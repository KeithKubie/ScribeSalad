WEBVTT
Kind: captions
Language: en

00:05:01.731 --> 00:05:05.794
. Test. This SA

00:05:12.487 --> 00:05:13.700
 -- is a caption test. Please 
standby for realtime captions. 

00:05:13.701 --> 00:05:15.701
testing a caption test.

00:05:25.220 --> 00:05:28.629
 Test. Test is caption. Please 
standby for realtime captions.

00:05:37.168 --> 00:05:41.381
 test. see connection going 
false

00:06:16.904 --> 00:06:18.904
.

00:07:34.698 --> 00:07:37.343
 connector two now. Test. This 
is

00:07:45.440 --> 00:07:47.440
 now Good Test. Test.

00:07:58.811 --> 00:08:00.811
 Okay. Now it's a.

00:08:04.088 --> 00:08:06.088
 logged

00:08:08.432 --> 00:08:10.432
 into my connect or

00:12:16.009 --> 00:12:17.009
. 

00:13:33.181 --> 00:13:35.181
   Â»

00:14:26.648 --> 00:14:28.648
test

00:14:30.278 --> 00:14:32.278
 is

00:16:39.386 --> 00:16:45.268
. Test. a caption test. caption 
want to see if text shows up 

00:16:45.269 --> 00:16:52.624
this time. That's. This I am 
still Keep This

00:19:11.084 --> 00:19:13.084
test. Please standby for 
realtime captions..

00:20:30.998 --> 00:20:35.377
 bit more here. Testing testing.
 This is a caption test. Okay. 

00:20:35.378 --> 00:20:38.754
Just a little bit more. There we
 go. Let's see what magic 

00:20:38.755 --> 00:20:48.284
happens here. Okay. There. How's
 it look to you? It looks fine 

00:20:48.285 --> 00:20:50.285
to me. I don't see any text 
missing.

00:27:04.625 --> 00:27:06.158
RAW FILE 
GOOGLE iO 2017

00:27:04.625 --> 00:27:04.881
MOUNTAIN VIEW, CALIFORNIA 
Architechture Components - 

00:27:04.882 --> 00:27:07.615
Solving the Lifecycle Problem
May 18, 2017

00:27:04.882 --> 00:27:06.215
11:30 AM EDT
Stage 2 

00:27:04.882 --> 00:27:07.615
Services provided by: 
Caption First, Inc.

00:27:04.882 --> 00:27:08.282
          P.O. Box 3066
          Monument, CO 80132

00:27:04.882 --> 00:27:05.115
          800-825-5234
          www.captionfirst.com  

00:27:05.116 --> 00:27:05.233
***
This text is being provided in a

00:27:05.234 --> 00:27:09.300
 realtime format.  Communication
 Access Realtime translation 

00:27:05.234 --> 00:27:09.034
(CART) or captioning are 
provided in order to facilitate 

00:27:05.234 --> 00:27:09.367
communication accessibility and 
may not be a totally verbatim 

00:27:05.234 --> 00:27:06.507
record of the proceedings. 
***                  

00:27:06.508 --> 00:27:08.508
 #346D

00:28:33.999 --> 00:28:37.718
   Â» SERGEY VASILINETE: Good 
morning, everyone. Probably many

00:28:37.843 --> 00:28:46.233
 of you attended yesterday's 
talk where Yigit introduced new

00:28:49.506 --> 00:28:52.553
 architecture components. Today 
we will focus on

00:28:59.497 --> 00:29:01.497
 architecture.

00:29:09.101 --> 00:29:18.154
 We will have more details. If 
you attended yet, it will still 

00:29:18.155 --> 00:29:20.155
be interesting.

00:29:26.295 --> 00:29:34.155
 Let's see what we have today. 
Today we have a fragment.

00:29:39.341 --> 00:29:48.061
 This line has results -- Google
 services ask us to start 

00:29:48.062 --> 00:29:50.907
methods. Your own components 
need to know about the sect 

00:29:50.908 --> 00:29:59.595
event. So you need to forward 
them in some kind of API. And 

00:29:59.596 --> 00:30:07.053
correspondingly, onStop, you 
have to have varying stop 

00:30:07.054 --> 00:30:09.054
methods, and it's easy to forget
 one.

00:30:14.056 --> 00:30:17.501
 It will drain a user's battery.

00:30:48.005 --> 00:30:52.293
different things. Let's see what
 I mean. We are completely 

00:30:52.294 --> 00:30:59.792
associated in initialized state.
 And all creation phase is in 

00:30:59.793 --> 00:31:01.793
there. On

00:31:07.170 --> 00:31:10.156
 DSH create, it is on -- pause.

00:31:37.540 --> 00:31:42.336
 -- pause. Last event is on_
destroy. It brings it to destroy

00:31:42.509 --> 00:31:47.577
 state. I will be thrown away in
 garbage collector. So let's 

00:31:47.578 --> 00:31:50.830
make our component lifecycle 
there.

00:31:58.221 --> 00:32:04.280
 We add adaptation. And events 
that we are interested in. You 

00:32:04.281 --> 00:32:09.068
can parse multiple LIPs if you 
want to. One step is to add 

00:32:09.069 --> 00:32:13.634
ourselves as an observer. And we
 may have potential problem here

00:32:13.859 --> 00:32:18.510
. What if activity is already 
started at this point? Does this

00:32:18.830 --> 00:32:26.224
 mean that we are going to 
receive on_stop event and we 

00:32:26.225 --> 00:32:32.920
didn't receive on_start and our 
program is not ready for this. 

00:32:32.921 --> 00:32:36.306
We bring a server to the correct
 state. What does this mean? Let

00:32:36.485 --> 00:32:39.459
's take this example and discuss
 it.

00:32:43.456 --> 00:32:47.073
 Perspective on_start and on_
create already happened and 

00:32:47.074 --> 00:32:51.167
after that we add an observer. 
But observer will still receive 

00:32:51.168 --> 00:32:58.848
on_create and on_start events. 
So let's take, like one step 

00:32:58.849 --> 00:33:05.266
further, on_resume. Resume state
, we bring to resume state, we 

00:33:05.550 --> 00:33:15.082
have on_resume event. 
    On_pause. And in this, we 

00:33:15.083 --> 00:33:19.926
are in a started state as well, 
as we learned. So we bring 

00:33:19.927 --> 00:33:23.563
observer to the current state. 
We should start it in a similar 

00:33:23.564 --> 00:33:28.436
station as we had a moment ago. 
Observer will receive on_create 

00:33:28.437 --> 00:33:33.874
and on_start events and that's 
it. So we don't have a problem 

00:33:33.875 --> 00:33:40.317
here. So how to get this magical
 lifecycle object? We have this 

00:33:40.318 --> 00:33:45.147
interface is super simple, but 
this probably doesn't help much 

00:33:45.148 --> 00:33:47.148
right now.

00:33:57.567 --> 00:34:02.018
 This is unfortunately true only
 in bright future, and right now

00:34:02.649 --> 00:34:04.649
 we 

00:34:07.234 --> 00:34:11.260
have life cycle activity and 
fragment. At the point of 

00:34:11.261 --> 00:34:15.204
release, we will merge our 
library to support library, so 

00:34:15.205 --> 00:34:16.996
you don't have to use them later
. 

00:34:16.997 --> 00:34:21.247
    Now Adam will speak about 
some key differences between 

00:34:21.248 --> 00:34:23.959
fragment and lifecycle observers
. 

00:34:23.960 --> 00:34:27.297
   Â» ADAM POWELL: So if you have
 been following along, you 

00:34:27.298 --> 00:34:31.030
probably recognized some 
similarities. At this point 

00:34:31.031 --> 00:34:33.740
we've got these two different 
components. Which one do you use

00:34:33.968 --> 00:34:38.415
? As the slides are already 
spoiling for you, this is not an

00:34:38.590 --> 00:34:41.236
 either/or question. One does 
not necessarily replace the 

00:34:41.237 --> 00:34:45.748
other and here's why. Fragments,
 on the one hand, everybody 

00:34:45.749 --> 00:34:50.502
knows and loves. They are state
fully managed and recreated 

00:34:50.503 --> 00:34:54.981
after a process death, an 
activity recreation or creation 

00:34:54.982 --> 00:35:01.305
of any activity that you host a 
fragment within. They are things

00:35:01.468 --> 00:35:05.074
 that are firmly out of scope of
 what life cycle observers are 

00:35:05.075 --> 00:35:09.488
meant to do. Instead they are 
meant to enable more granular 

00:35:09.489 --> 00:35:12.605
factoring of your code. They are
 stateless. So that means they 

00:35:12.606 --> 00:35:16.792
must be registered each time the
 owner is recreated.  We're not 

00:35:16.793 --> 00:35:24.298
going to try to recreate these 
magically for you. These are 

00:35:24.299 --> 00:35:27.224
meant to be very, very 
lightweight.

00:35:32.212 --> 00:35:39.169
 And there's no navigation to 
the viewer or navigation 

00:35:39.170 --> 00:35:43.394
management. It is much simpler 
to integrate libraries which are

00:35:43.591 --> 00:35:47.677
 code, as long as they have 
provided lifecycle aware 

00:35:47.678 --> 00:35:51.479
components.  You can break up 
the large fragment or activity 

00:35:51.480 --> 00:35:55.423
classes to make it simpler to 
understand for our reader and 

00:35:55.424 --> 00:35:58.878
provide much more granular 
guarantees around what 

00:35:58.879 --> 00:36:01.997
operations are valid at any 
given point in time. If an 

00:36:01.998 --> 00:36:05.331
operation happens, then you're 
guaranteed to be in a correct 

00:36:05.332 --> 00:36:12.479
state when something is called. 
    So, lifecycle owner as 

00:36:12.480 --> 00:36:15.108
already introduced is just an 
interface.  Anyone can implement

00:36:15.249 --> 00:36:18.221
 this. You can improve 
testability by creating your own

00:36:18.478 --> 00:36:25.776
. You can create your own 
fragment-like library 

00:36:25.777 --> 00:36:30.441
implementations and KPOZ its as 
well. So you can answer 

00:36:30.442 --> 00:36:34.812
questions like, Is my app 
visible? This is a common 

00:36:34.813 --> 00:36:39.105
question that many of you might 
be interested in. It lets you do

00:36:39.106 --> 00:36:42.938
 things like session management.
 It can track across some sort 

00:36:42.939 --> 00:36:46.618
of a flow or logged in versus 
logged out events and may help 

00:36:46.619 --> 00:36:52.405
you with analytics as well. 
    So we have the process lifel

00:36:53.009 --> 00:36:56.596
ifecycleowner as a component 
that I think a lot of you will 

00:36:56.597 --> 00:37:00.785
be interested in for this. It's 
all the activities in your app, 

00:37:00.786 --> 00:37:04.109
so there's no configuration 
changes to handle because we 

00:37:04.110 --> 00:37:07.802
won't be dealing with those from
 the process life cycle owner 

00:37:07.803 --> 00:37:11.733
stays alive through the whole 
process. And you don't need 

00:37:11.734 --> 00:37:14.919
state restoration after process 
death like mentioned earlier. 

00:37:14.920 --> 00:37:18.494
You don't have to handle saving 
and restoring that state, but at

00:37:18.697 --> 00:37:22.713
 the same time, you need to 
remember to reregister the base 

00:37:22.714 --> 00:37:26.306
observers if that's something 
that you're working with. 

00:37:26.307 --> 00:37:30.857
    So, many Android components 
provide a lot of deep plumbing 

00:37:30.858 --> 00:37:34.078
layers for things that you can 
plug into and work with, but a 

00:37:34.079 --> 00:37:37.689
lot of times we've kind of 
omitted the idea of higher level

00:37:38.009 --> 00:37:40.075
 components that make use of 
that plumbing so that you can 

00:37:40.076 --> 00:37:45.045
just plug, play, and go. So I 
mean do we have anything more 

00:37:45.046 --> 00:37:49.158
high level? 
   Â» YIGIT BOYAR: We do. Let me 

00:37:49.388 --> 00:37:51.540
show you. 
   Â» ADAM POWELL: Great. 

00:37:51.541 --> 00:37:54.511
   Â» YIGIT BOYAR: Thanks, Adam. 
It's so nice that you can 

00:37:54.512 --> 00:37:59.336
observe a lifecycle, it is 
verified as a first-class 

00:37:59.337 --> 00:38:02.790
citizen, but you still need to 
deal with the states.  And we 

00:38:02.791 --> 00:38:05.718
thought, okay, there is some 
common life cycle problems that 

00:38:05.719 --> 00:38:08.931
we should be able to solve with 
this. So we look at the problems

00:38:09.119 --> 00:38:14.396
 that people are having. This 
was probably the most major 

00:38:14.397 --> 00:38:20.171
problem that we are seeing. The 
untimely UI updates.  When the 

00:38:20.172 --> 00:38:23.819
activity receives a call back, 
but they have started to start a

00:38:23.980 --> 00:38:27.389
 new activity and crashes or 
starts a fragment and crashes. 

00:38:27.390 --> 00:38:31.182
If an activity or fragment is 
stopped, there is no reason to 

00:38:31.183 --> 00:38:35.481
update that activity right? You 
don't want to do that. If the 

00:38:35.482 --> 00:38:37.845
activity happens to become 
visible again, then you want to 

00:38:37.846 --> 00:38:41.122
do it. We realize this is a 
really common problem, and we 

00:38:41.123 --> 00:38:46.900
wanted to solve this with a 
higher level component which we 

00:38:46.901 --> 00:38:53.325
call live data. If we look at it
 in detail, essentially it is an

00:38:53.891 --> 00:38:56.923
 observer data holder. It holds 
on to some information that you 

00:38:56.924 --> 00:39:01.669
can observe. The difference 
between live data and your 

00:39:01.670 --> 00:39:07.323
observer or whatever is that 
live data is lifecycle aware. It

00:39:07.699 --> 00:39:12.408
 knows about lifecycles, and 
when you want to observe, you 

00:39:12.409 --> 00:39:16.819
can patch in this lifecycle so 
it can manage your substation. 

00:39:17.210 --> 00:39:21.031
You observe and that's all you 
do with livedata. So you look at

00:39:21.178 --> 00:39:27.122
 the user example, let's say we 
have an activity. We receive 

00:39:27.123 --> 00:39:30.018
data from someone that doesn't 
really matter and we call 

00:39:30.019 --> 00:39:34.265
observe. We are passing this, 
which is the life cycle owner. 

00:39:34.266 --> 00:39:38.335
That's all you need to say. I 
want to observe this live data 

00:39:38.336 --> 00:39:41.700
within this life cycle, which 
also means if this life cycle is

00:39:41.949 --> 00:39:47.140
 gone, I don't want to observe 
it. Or if this life cycle is 

00:39:47.141 --> 00:39:52.628
stopped, I don't want to get it 
elsewhere. 

00:39:52.629 --> 00:39:58.290
    That's all you do. You don't
 need to write on_start on_

00:40:12.080 --> 00:40:15.114
stop. 
    As soon as activity starts, 

00:40:15.115 --> 00:40:21.125
it start receiving data changes.
 So whenever the live data 

00:40:21.126 --> 00:40:24.867
changes, this goes back to the 
observer inside the activity. It

00:40:25.058 --> 00:40:29.460
 can also be a fragment. Let's 
say user decides to rotate the 

00:40:29.461 --> 00:40:32.795
activity to a small one, so you 
know the activity will be 

00:40:32.796 --> 00:40:36.134
stopped. And what happens at the
 same time the livedata happens 

00:40:36.135 --> 00:40:39.895
to be updated? If that happens, 
we are not going to tell the 

00:40:39.896 --> 00:40:42.650
activity about this change, 
because there cannot be any 

00:40:42.651 --> 00:40:47.244
reason for you to update the UI 
because it's already stopped.

00:40:53.717 --> 00:40:57.039
 destroyed, we will automatly 
mod

00:41:01.241 --> 00:41:05.631
      ically modify the 
subscription. We know that 

00:41:05.632 --> 00:41:10.519
Android will re create the 
activity. We are observing the 

00:41:10.520 --> 00:41:17.784
same LiveData back. So your UI 
is going to have the data before

00:41:17.936 --> 00:41:23.757
 it gets a chance to draw it. So
 similarly, a user needs to 

00:41:23.758 --> 00:41:26.954
unbutton, which means the 
activity will be stopped. If the

00:41:27.563 --> 00:41:31.895
 LiveData changes while the 
activity is stopped, it will not

00:41:32.191 --> 00:41:35.443
 receive any changes. If the 
data changes, we are not going 

00:41:35.444 --> 00:41:39.164
to tell it. As soon as the user 
commits to the application, we 

00:41:39.165 --> 00:41:44.592
will give it the last available 
data. LiveData is not just a 

00:41:44.593 --> 00:41:49.465
stream of events, but if any 
observer comes, it receives the 

00:41:49.466 --> 00:41:53.876
last available value. 
    And eventually the user 

00:41:53.877 --> 00:41:58.153
backs out of that activity and 
we remove that subscription. You

00:41:58.297 --> 00:42:03.422
 can also extend the live data 
class, because live data 

00:42:03.423 --> 00:42:08.225
provides two really handy call 
backs. The first one is called 

00:42:08.226 --> 00:42:13.360
on_active, which means you have 
an active observer. The other is

00:42:13.741 --> 00:42:18.990
 called inactive. That means you
 don't have observers so don't 

00:42:18.991 --> 00:42:22.114
change your router if it's 
something you care about. 

00:42:22.115 --> 00:42:28.133
    You probably ask now, what 
is an active observer? Active 

00:42:28.134 --> 00:42:33.072
observer whose lifecycle is 
started or resumed. Your 

00:42:33.073 --> 00:42:36.169
fragment is currently visible to
 the user. If it's on the back 

00:42:36.170 --> 00:42:41.145
stack, the user is not seeing it
. It's stopped, so it's not 

00:42:41.146 --> 00:42:44.870
active. No reason to do any work
 on that fragment. We will see 

00:42:44.871 --> 00:42:49.244
how we take advantage of these 
main call-backs.  We will create

00:42:49.798 --> 00:42:52.615
 the location main live data 
class, which represents the 

00:42:52.616 --> 00:42:56.762
location on the device. So we 
say this data holds an instance 

00:42:56.763 --> 00:42:58.944
of a location.

00:43:02.989 --> 00:43:07.377
 There's nothing fancy here. And
 we have a licenser. Whenever 

00:43:07.378 --> 00:43:12.618
the system server sends us a new
 location, we just call send_v

00:43:12.792 --> 00:43:21.453
alue on this. There is no life
cycle handling here. LiveData 

00:43:21.454 --> 00:43:25.148
handles this. You can have any 
number of observers. It doesn't 

00:43:25.149 --> 00:43:28.831
really matter. So the very first
 active observer comes and we 

00:43:28.832 --> 00:43:32.475
want to start listening to the 
system service.  Similarly,

00:43:35.749 --> 00:43:39.136
 when the last one goes away, we
 want to stop observing the 

00:43:39.137 --> 00:43:42.979
system service. 
    Now if you look at that 

00:43:42.980 --> 00:43:47.406
location of LiveData, let's look
 at the properties of that. 

00:43:47.407 --> 00:43:52.051
First of all, it is lifecycle a
ware. It knows when to stop and 

00:43:52.052 --> 00:43:56.115
start itself. You don't need to 
baby sit it anymore. It is self-

00:43:56.340 --> 00:44:01.827
sufficient. Like you start it, 
you forget about it. It can be a

00:44:02.239 --> 00:44:04.959
 signal to all of the 
subscriptions that are 

00:44:04.960 --> 00:44:07.192
automatically managed for you.

00:44:22.516 --> 00:44:28.056
 If you are using LiveData, it 
is yes yes, because we manage it

00:44:28.385 --> 00:44:32.265
 for you. If you just need an 
instance of it but you already 

00:44:32.266 --> 00:44:36.924
have the value, you can use this
 mutable live data plus which 

00:44:36.925 --> 00:44:41.312
comes inside the library that 
has a public setter. Usually 

00:44:41.313 --> 00:44:44.361
when using this class, 
internally you will have it, but

00:44:44.729 --> 00:44:47.452
 the value will just return a 
live data because you don't want

00:44:47.706 --> 00:44:54.772
 TOEX  -- to expose that fact. 
    When we were designing these

00:44:54.938 --> 00:45:00.411
 life cycle components, the Live
Data, we spent a lot of time to 

00:45:00.412 --> 00:45:05.584
get rid of one exception. This 
fragment exception -- 

00:45:05.585 --> 00:45:07.585
[ Applause ] 

00:45:13.977 --> 00:45:19.546
please, no more fragment 
exceptions. If you receive them,

00:45:20.226 --> 00:45:24.680
 you can run a fragment trans
section. To see how we are 

00:45:24.681 --> 00:45:28.455
making it part of the history, I
 will give it back to Adam to 

00:45:28.456 --> 00:45:31.798
explain it to us. 
   Â» ADAM POWELL: All right. So 

00:45:31.799 --> 00:45:35.284
anyone who has received one of 
these exceptions realizes that 

00:45:35.285 --> 00:45:38.518
it doesn't just come from trying
 to do something when you are 

00:45:38.519 --> 00:45:42.898
just completely stopped and you 
absolutely know it. They tend to

00:45:43.135 --> 00:45:49.091
 happen when you get into very 
inTRI Kate nested lifecycles. So

00:45:49.576 --> 00:45:53.579
 we wanted to be thoughtful 
about how the callbacks are 

00:45:53.580 --> 00:45:57.378
invoked and when. 
    So in a case like this, what

00:45:57.379 --> 00:46:03.165
 happens? You have defined 
handler for the stop event. So 

00:46:03.166 --> 00:46:07.633
in the container, your activity 
on stop, you want to make sure 

00:46:07.634 --> 00:46:13.651
you don't get an on_change after
 the on_stop has happened. But 

00:46:13.652 --> 00:46:16.289
in order for that to happen, 
what needs to be true about when

00:46:16.554 --> 00:46:21.093
 we actually invoke all of the 
on_stop listeners that are 

00:46:21.094 --> 00:46:25.227
attached to the observers? So we
 have to define a really strict 

00:46:25.228 --> 00:46:29.925
order for this. As we go through
 create and start and on_resume,

00:46:30.095 --> 00:46:34.941
 we know that we need to invoke 
the lifecycle observers after 

00:46:34.942 --> 00:46:38.879
the container event happens. So 
you know in your observer that 

00:46:38.880 --> 00:46:42.676
everything about your lifecycle 
owner has been configured: If 

00:46:42.677 --> 00:46:45.668
you check the state about it, 
you know that you're already 

00:46:45.669 --> 00:46:48.636
completely in that state. But 
that means something really 

00:46:48.637 --> 00:46:51.779
special for coming back down the
 other direction. It means when 

00:46:51.780 --> 00:46:55.627
any activity starts to become 
paused, you want your lifecycle 

00:46:55.628 --> 00:47:01.845
on receiverer -- observers to be
 able to shut down before the 

00:47:01.846 --> 00:47:04.793
work happens to become paused. 
Similar for stop. This is where 

00:47:04.794 --> 00:47:08.668
it becomes really important for 
the transaction ENGS ception. 

00:47:08.669 --> 00:47:13.124
You want to make sure that 
you're recording that you're 

00:47:13.125 --> 00:47:15.125
fully stop ed

00:47:17.868 --> 00:47:20.125
. 
    So what that means is that 

00:47:20.126 --> 00:47:25.049
the stop event of your lifecycle
 observer will always be invoked

00:47:25.251 --> 00:47:30.233
 before the activity on_stop or 
before the full stop event for 

00:47:30.234 --> 00:47:33.589
your container happens. So this 
seems really similar to some 

00:47:33.590 --> 00:47:36.363
other libraries that some people
 may have seen in the past. Can 

00:47:36.364 --> 00:47:39.221
you talk about that? 
   Â» SERGEY VASILINETE: Yes.  So

00:47:40.139 --> 00:47:46.644
 when we create new observable 
pattern, nowadays this question 

00:47:46.645 --> 00:47:54.364
is unavoidable. Is it another 
java?

00:47:56.996 --> 00:48:03.303
 Especially when it comes to 
relationship between your UI and

00:48:03.651 --> 00:48:08.007
 the state. They want you to 
react on the changes of the 

00:48:08.008 --> 00:48:10.008
state.

00:48:12.429 --> 00:48:17.992
 It's a life cycle away out of 
the box as Yigit mentioned, and 

00:48:17.993 --> 00:48:26.096
it's much easier. As many of you
 may know, learning curve of Rx 

00:48:26.097 --> 00:48:31.514
java is super steep. If you have
 an Android learning curve, and 

00:48:31.515 --> 00:48:36.812
after we add RX Java learning 
curve on top of this, it becomes

00:48:37.117 --> 00:48:41.280
 very hard for new people to 
start to develop on our platform

00:48:41.506 --> 00:48:45.595
. So we just can't just say to 
them, like, oh, let's go. Just 

00:48:45.596 --> 00:48:52.547
learn this. That's it. No. 
    But if you already learned R

00:48:52.990 --> 00:48:57.855
x Java, we don't expect you to 
migrate from it to our solution,

00:48:58.063 --> 00:49:03.373
 because you already passed this
 learning curve. You and your 

00:49:03.374 --> 00:49:07.833
co-workers are comfortable with 
it, fine. We are totally fine 

00:49:07.834 --> 00:49:14.139
with this. But one thing we ask 
you to do is to be sure that you

00:49:14.674 --> 00:49:22.044
 manage lifecycle. Rx Java has 
common approaches to solve this.

00:49:22.231 --> 00:49:25.159
 Everything will be fine. But 
when you start

00:49:28.532 --> 00:49:33.337
 a new app, we think this is the
 best. The best is to start a 

00:49:33.338 --> 00:49:38.736
project with a LiveData because 
it's simpler, faster, 

00:49:38.737 --> 00:49:42.667
lightweight, well integrated 
into the framework. And if you 

00:49:42.668 --> 00:49:48.180
feel like you are programming a 
lot, you want to bring it not 

00:49:48.678 --> 00:49:53.945
only to relation between UI and 
the state, you want to bring it 

00:49:53.946 --> 00:49:58.648
to business parts of your 
application. Then you may 

00:49:58.649 --> 00:50:06.934
consider addition al Rx Java 
because it gives you more power.

00:50:07.189 --> 00:50:11.443
 It will help you to do it. We 
have this extension to our 

00:50:11.444 --> 00:50:18.133
library, which gives the ability
 to create LiveData from 

00:50:18.134 --> 00:50:23.810
Publisher and create from Live
Data. The integration should be 

00:50:23.811 --> 00:50:27.181
quite smooth. 
    But I want to highlight key 

00:50:27.182 --> 00:50:32.631
differences between Rx Java and 
live data. As already said, live

00:50:33.015 --> 00:50:37.637
 data is a holder, not a stream.
 We haven't referenced to the 

00:50:37.638 --> 00:50:41.332
last value, and observers 
immediately receive the last 

00:50:41.333 --> 00:50:49.795
value when they start to observe
 LAIFData. A big difference is 

00:50:49.796 --> 00:50:57.285
our threading portal. It is 
extremely powerful, but most 

00:50:57.286 --> 00:51:00.772
probably don't need it. And we 
have everything on the main 

00:51:00.773 --> 00:51:04.097
thread. And the reason for this 
is we want to give you all of 

00:51:04.098 --> 00:51:12.869
these guarantees about when we 
notify about state changes. And 

00:51:12.870 --> 00:51:18.338
we can't do this on a background
 thread. We have just one 

00:51:18.339 --> 00:51:24.698
exception. We have a post value,
 which is a method which 

00:51:24.699 --> 00:51:28.790
developed from a background 
thread to the main thread and 

00:51:28.791 --> 00:51:33.836
set it there. Super simple. 
    A quick summary. Lifecycle 

00:51:33.837 --> 00:51:39.770
events, observable pattern which
 respects these events. LiveData

00:51:39.771 --> 00:51:43.131
 is one thing that is not 
covered yet.  And this is how to

00:51:43.604 --> 00:51:49.666
 handle configuration change. In
 2017, almost nine years after 

00:51:49.667 --> 00:51:53.736
Android was first time released,
 we still discuss this question.

00:51:53.913 --> 00:51:59.332
 It is a loaded question, and we
 hear it constantly from new 

00:51:59.333 --> 00:52:03.164
Android developers.  Many of you
 probably know what's the deal 

00:52:03.165 --> 00:52:07.897
with it. But let's look at this 
oversimplified example but still

00:52:08.104 --> 00:52:11.503
 very vivid. 
    So you want to show this 

00:52:11.504 --> 00:52:14.646
information about user 
activities, and you want to make

00:52:15.047 --> 00:52:19.311
 some web service request. You 
will use life data to get this 

00:52:19.312 --> 00:52:26.781
result. It's super simple. When 
request was started. Request 

00:52:26.782 --> 00:52:35.064
response is received, and we put
 this into live data as a value.

00:52:36.051 --> 00:52:40.721
 It will notify activity and it 
will do everything it needs. So 

00:52:40.722 --> 00:52:46.218
what happens if activity is 
updated? We're going to make it 

00:52:46.219 --> 00:52:49.558
compliant. And I hope that you 
don't call web service right 

00:52:49.559 --> 00:52:54.673
into your activity, but you 
probably have some abstraction s

00:52:56.178 --> 00:52:58.777
 that is something like that.

00:53:03.593 --> 00:53:07.110
 Maybe goes to caching and 
persistent storages.  All of 

00:53:07.111 --> 00:53:14.661
these are by nature. So -- you 
probably don't want to make 

00:53:14.662 --> 00:53:16.662
these calls twice.

00:53:21.506 --> 00:53:27.211
 And one of the ways today to do
 this? What are they? One of the

00:53:27.392 --> 00:53:31.902
 proposed way is a fragment in 
that instance.

00:53:43.301 --> 00:53:45.547
 People will go nuts.

00:53:50.254 --> 00:53:53.156
 Another possible way to solve 
this is with loaders and we 

00:53:53.157 --> 00:54:01.198
decided to tackle it one against
 and create ViewModel.

00:54:03.649 --> 00:54:07.321
 It is associated with a 
fragment or activity but is 

00:54:07.322 --> 00:54:12.729
retained across configuration 
changes. What does this mean? 

00:54:12.730 --> 00:54:17.710
Let's see. You can predict the 
future. We know that activity is

00:54:17.939 --> 00:54:20.485
 going to be created.

00:54:23.928 --> 00:54:27.484
 During call create, we will 
request for the first time. We 

00:54:27.485 --> 00:54:32.834
will create it. And after that, 
this uses this view model. 

00:54:32.835 --> 00:54:36.562
Pretty simple. Predicted 
activity is going to be rotated.

00:54:36.723 --> 00:54:43.806
 Let's see what is going to 
happen with our view model. It 

00:54:43.807 --> 00:54:46.373
will receive events.

00:54:50.754 --> 00:54:58.180
 On_pause, on_stop, on_destroy. 
It's created, and then stopped 

00:54:58.181 --> 00:55:03.135
and destroyed, the new model 
survives it. This was created in

00:55:03.373 --> 00:55:07.879
 place of the old one uses the 
same old objects so you can 

00:55:07.880 --> 00:55:11.708
easily cache there LiveData or 
something else. 

00:55:11.709 --> 00:55:16.033
    The last case, what is going
 to happen if you have a finish 

00:55:16.034 --> 00:55:20.464
call? Once again, we will 
receive the distraction events, 

00:55:20.465 --> 00:55:25.126
but this time, available here.

00:55:29.891 --> 00:55:33.801
 If you have any currently 
running actions or any resources

00:55:33.934 --> 00:55:36.804
, it's time to close.

00:55:43.431 --> 00:55:46.214
 At the point your activity is 
destroyed, it's

00:55:50.595 --> 00:55:54.644
 not going to be recreated again
, the model is gone as well. So 

00:55:54.645 --> 00:55:56.672
let's quickly make our sample in
 the model.

00:56:01.879 --> 00:56:06.907
 So we have initiation of a view
 model class.  We want to cache 

00:56:06.908 --> 00:56:16.759
the user data. It says it's live
 data. And finally, it is 

00:56:16.760 --> 00:56:22.900
extreme ly straightforward. If 
we already requested it, we use 

00:56:22.901 --> 00:56:28.069
it. If it is no, reflected from 
the web service, it returns it. 

00:56:28.070 --> 00:56:34.891
Fine. We have this. Now we need 
to get this to the view model. 

00:56:34.892 --> 00:56:41.816
So get it, we need to get the 
view model somehow. Let's take a

00:56:42.082 --> 00:56:44.173
 precise look on it.

00:56:47.696 --> 00:56:52.897
 This is a object associated 
with a fragment or activity. It 

00:56:52.898 --> 00:56:56.664
knows how to get existing view 
model from it or how to create a

00:56:56.889 --> 00:56:59.512
 new one if there is no existing
 model. 

00:56:59.513 --> 00:57:07.947
    After that, we request our 
my activity Model, and later, 

00:57:07.948 --> 00:57:11.884
this is quite simple. We get 
user data, we observe it to up

00:57:12.061 --> 00:57:21.949
date the UI. Fine. So what are 
the rules of ViewModel? So,

00:57:22.152 --> 00:57:30.257
 it manages the data for the UI.
 It means that it speaks to the 

00:57:30.258 --> 00:57:33.095
business parts of your 
application to retrieve the data

00:57:33.302 --> 00:57:39.677
. It may be a pattern or DMI 
other use.

00:57:55.056 --> 00:58:00.641
 It will speak about this a bit 
later. Prior to this, things 

00:58:00.642 --> 00:58:02.642
that you must

00:58:09.157 --> 00:58:13.090
          other use. It will 
speak about this a bit later. 

00:58:09.157 --> 00:58:12.991
Prior to this, things that you 
must access views. And other UI 

00:58:12.992 --> 00:58:20.592
related instances. The reason 
for that? If you try to use them

00:58:20.790 --> 00:58:30.687
, you will have stale data. It's
 going to finish bad. And it

00:58:30.912 --> 00:58:36.703
's fragment or activity's job to
 bind the data which you will 

00:58:36.704 --> 00:58:43.626
get from a view model with 
actual UI text use buttons and I

00:58:43.627 --> 00:58:48.708
 don't know what else.  
    One more thing, there are 

00:58:48.709 --> 00:58:52.103
resources which sound more 
harmless like strings or 

00:58:52.104 --> 00:58:57.096
drawable. And you may think I 
may cache it here? No. They 

00:58:57.097 --> 00:59:03.211
depend on current integration 
state as well. So yes, right now

00:59:04.815 --> 00:59:08.988
 you may have one resource for 
every configuration, but you add

00:59:09.129 --> 00:59:12.363
 the same resource for different
 configuration and you will 

00:59:12.364 --> 00:59:17.676
easily forget the updated view 
model. And you may not notice 

00:59:17.677 --> 00:59:27.324
this. But your users will see 
embedded UI. This is just ugly. 

00:59:27.325 --> 00:59:33.234
    Now Yigit will speak about 
interfragment communications. 

00:59:33.235 --> 00:59:36.299
   Â» YIGIT BOYAR: I wanted to 
talk about one of my favorite 

00:59:36.300 --> 00:59:40.649
features about ViewModel, which 
is communicating between 

00:59:40.650 --> 00:59:46.723
multiple fragments of the same 
activity. It's the Gmail on the 

00:59:46.724 --> 00:59:50.132
tablet where on the left side 
you pick an e-mail and on the 

00:59:50.133 --> 00:59:54.447
right side it shows the contents
 of the G mail. Usually you 

00:59:54.448 --> 00:59:58.920
implement this as a fragmental U
I which picks something from the

00:59:59.093 --> 01:00:01.949
 list and another fragment on 
the right which shows how they 

01:00:01.950 --> 01:00:05.572
show the contents of an e-mail 
so that if you're on the phone, 

01:00:05.573 --> 01:00:10.231
you can reuse the same fragments
 but separate from each other. 

01:00:10.232 --> 01:00:14.292
If you ever try to write a UI 
like this, have you ever tried 

01:00:14.293 --> 01:00:17.892
to make these talk to each other
? It's a pain in the neck and 

01:00:17.893 --> 01:00:22.056
very, very hard. Like you need 
to create an interface but what 

01:00:22.057 --> 01:00:25.256
if one fragment gets created 
before the other one and the 

01:00:25.257 --> 01:00:28.302
activity needs to talk to each 
other?

01:00:44.808 --> 01:00:50.394
fragments want to talk about 
selected data. This is the 

01:00:50.395 --> 01:00:53.497
information they want to share, 
so let's put it inside the view 

01:00:53.498 --> 01:00:58.528
model and we will call this the 
shared view model. You have a 

01:00:58.529 --> 01:01:04.622
call selection, and it provides 
two very simple APIs.

01:01:11.714 --> 01:01:17.090
 Very simple. Once we have this,
 let's make the fragments and 

01:01:17.091 --> 01:01:19.091
see how we can use this.

01:01:35.341 --> 01:01:41.010
of the fragment. But the view 
model not from this fragment, 

01:01:41.011 --> 01:01:45.502
but we want it from our activity
. So we have to get it from 

01:01:45.503 --> 01:01:50.641
activity. Now it's going to 
return your view model in the 

01:01:50.642 --> 01:01:52.642
activity.

01:02:06.043 --> 01:02:10.290
 So get the selected e-mails, 
start observing on it. Similarly

01:02:10.462 --> 01:02:14.445
, the selector fragment, the one
 on the left when a user picks 

01:02:14.446 --> 01:02:20.921
an e-mail, we get the same view 
model, and when the user selects

01:02:21.119 --> 01:02:25.610
 an e-mail from the list, we 
call the view models related 

01:02:25.611 --> 01:02:29.640
matter to change the selected 
e-mail. These two fragments 

01:02:29.641 --> 01:02:31.988
talking to each other without 
actually talking to each other, 

01:02:31.989 --> 01:02:34.140
how does it happen?

01:02:48.819 --> 01:02:50.849
are on the call,

01:02:54.454 --> 01:02:57.697
 there is no room for error.

01:03:27.618 --> 01:03:33.052
 These are things that work 
together. It shows how to use 

01:03:33.053 --> 01:03:36.710
these things together to write 
better applications.

01:03:45.648 --> 01:03:47.648
 Thank you. 
[ Applause ] 

01:03:54.742 --> 01:03:57.610
   Â» YIGIT BOYAR: We have like 
four minutes for questions. If 

01:03:57.611 --> 01:04:02.341
you have questions, there are 
two mics in the corridors.

01:04:05.513 --> 01:04:07.839
 Please use the mics.

01:04:50.604 --> 01:04:51.541
. 
   Â» ADAM POWELL: Generally the 

01:04:51.542 --> 01:04:55.796
pat THAERN you want to follow is
 if you are accepting a context,

01:04:55.797 --> 01:05:02.313
 what you want to do is is make 
sure you call get application 

01:05:02.314 --> 01:05:04.314
context.

01:05:19.337 --> 01:05:23.337
 that you want to follow is if 
you are accepting a context, 

01:05:19.337 --> 01:05:23.403
what you want to do is is make 
sure you call get application 

01:05:19.337 --> 01:05:20.284
context. 
   Â» PARTICIPANT: [ Off mic ]. 

01:05:20.285 --> 01:05:23.286
   Â» ADAM POWELL: We covered a 
few best practices.  You want to

01:05:23.428 --> 01:05:27.147
 make sure you keep the activity
 context away from your view 

01:05:27.148 --> 01:05:30.533
models in particular. Anything 
to add to that? 

01:05:30.534 --> 01:05:32.534
   Â» PARTICIPANT: Thanks.

01:05:56.660 --> 01:05:58.660
. 
   Â» YIGIT BOYAR: With life

01:05:58.885 --> 01:06:04.775
psyching, you just implement 
this interface, and we take care

01:06:05.085 --> 01:06:08.866
 of what you ask for you. 
   Â» PARTICIPANT: Thanks.

01:06:37.308 --> 01:06:42.574
                                                cycle,
 you just implement this 

01:06:37.308 --> 01:06:40.841
interface, and we take care of 
what you ask for you. 

01:06:37.308 --> 01:06:39.308
   Â» PARTICIPANT: Thanks. 
   Â» PARTICIPANT: [ Off mic ]

01:06:40.648 --> 01:06:41.214
. 
   Â» SERGEY VASILINETE: [ 

01:06:41.215 --> 01:06:43.215
INDISCERNIBLE ]

01:07:04.640 --> 01:07:07.810
. 
    It is simplified models is 

01:07:07.811 --> 01:07:09.819
way more simple to use this. 
   Â» PARTICIPANT: [ Off mic ]

01:07:27.951 --> 01:07:28.963
. 
   Â» ADAM POWELL: We've got time

01:07:28.964 --> 01:07:33.059
 for one more and then we'll be 
in the sandbox afterwards. 

01:07:33.060 --> 01:07:35.060
   Â» PARTICIPANT: [ Off mic ]

01:07:44.121 --> 01:07:45.160
. 
   Â» ADAM POWELL: That may be a 

01:07:45.161 --> 01:07:50.433
very large dataset. 
   Â» YIGIT BOYAR: It depends on 

01:07:50.434 --> 01:07:59.318
your use case. If you loaded it,
 just want to keep big memory 

01:07:59.319 --> 01:08:03.574
anyways. If that is what you 
want. It truly depends. It has 

01:08:03.575 --> 01:08:08.523
nothing to do with the lifedata 
itself.

01:08:11.609 --> 01:08:13.609
 It...

01:08:21.539 --> 01:08:24.054
something that looks like a 
cursor or window, we will use 

01:08:24.055 --> 01:08:28.049
that. We'll be in the sandbox 
after this. Thank you very much 

01:08:28.050 --> 01:08:29.600
for coming. 
   Â» YIGIT BOYAR: Thank you. 

01:08:29.601 --> 01:08:31.601
[ Applause ] 

01:08:32.803 --> 01:08:40.749
    [ Session concluded at 12:10
 p.m. EDT ]. 

01:11:46.713 --> 01:11:47.078
GOOGLE iO 2017
MOUNTAIN VIEW, CALIFORNIA 

01:11:47.079 --> 01:11:49.812
Best Practices to Slim Down Your
 App Size

01:11:47.079 --> 01:11:48.612
May 18, 2017
9:30 am PDT

01:11:47.079 --> 01:11:49.145
Stage 2  
Services provided by: 

01:11:47.079 --> 01:11:48.212
Caption First, Inc.
P.O. Box 3066

01:11:48.213 --> 01:11:50.213
Monument, CO 80132
800-825-5234

01:11:48.213 --> 01:11:49.813
www.captionfirst.com 
***

01:11:48.213 --> 01:11:52.479
This text is being provided in a
 realtime format.  Communication

01:11:48.213 --> 01:11:51.813
 Access Realtime translation 
(CART) or captioning are 

01:11:48.213 --> 01:11:52.479
provided in order to facilitate 
communication accessibility and 

01:11:48.213 --> 01:11:52.013
may not be a totally verbatim 
record of the proceedings. 

01:11:48.213 --> 01:11:50.213
***                   

01:28:19.354 --> 01:28:23.431
, everyone.  If you're wondering
, I do work on Android text and 

01:28:23.432 --> 01:28:27.547
fonts, and yes, fonts is my real
 last name. With that out of the

01:28:28.122 --> 01:28:32.409
 way, let's begin. So today we 
want to cover a few things.  

01:28:32.410 --> 01:28:40.010
First we want to convey how we 
think about APK stats and a -- A

01:28:40.258 --> 01:28:45.604
PK size and metrics that we 
think you should think about. As

01:28:45.834 --> 01:28:48.953
 well as show you a number of 
new tools and features that we 

01:28:48.954 --> 01:28:52.358
are going to introduce this week
 that will also help you keep 

01:28:52.359 --> 01:28:55.548
your APK size down. So let's get
 started. 

01:28:55.549 --> 01:28:59.090
    One of the things you'll see
 today is we have a diverse 

01:28:59.091 --> 01:29:02.053
group of people from Google. 
People from the Android people, 

01:29:02.054 --> 01:29:06.633
from the tools team, from the 
play team, internal developers 

01:29:06.634 --> 01:29:13.439
at Google. With really think 
that APK size is super important

01:29:13.648 --> 01:29:16.119
 and something that we see as 
something you have to take care 

01:29:16.120 --> 01:29:19.408
of from the design stage, the 
time you build your app, the 

01:29:19.409 --> 01:29:23.824
time you publish, and the time 
the app gets delivered to a 

01:29:23.825 --> 01:29:27.402
device. Let me tell you a little
 about the two dimensions that 

01:29:27.403 --> 01:29:31.059
we think are important for APK 
size. First is the download size

01:29:31.229 --> 01:29:34.335
. This is the size of the 
application when it's in the 

01:29:34.336 --> 01:29:37.858
play store and it gets delivered
 to the device. This is highly 

01:29:37.859 --> 01:29:41.643
compressed and we'll tell you 
how we do that. That allows us 

01:29:41.644 --> 01:29:49.234
to save size on the wire and 
user's data. Download size is 

01:29:49.235 --> 01:29:51.973
pretty small. There is another 
concept that is important, which

01:29:52.269 --> 01:29:55.195
 is installed size. That is what
 happens when you actually 

01:29:55.196 --> 01:30:00.180
download the app, unpack it, and
 compile it and optimize it. 

01:30:00.181 --> 01:30:04.373
Which expands the application 
significantly, yielding a 

01:30:04.374 --> 01:30:07.604
download size that is sometimes 
two to three times bigger than 

01:30:07.605 --> 01:30:10.247
the download size, so it's 
something to think about. What 

01:30:10.248 --> 01:30:16.413
is the footprint of your 
application once it's installed 

01:30:16.414 --> 01:30:18.414
on the device.

01:30:21.116 --> 01:30:23.219
 This is something really 
important because what happens 

01:30:23.220 --> 01:30:27.311
is when a user goes and install 
an app, they will see the 

01:30:27.312 --> 01:30:29.964
loading bar and see the actual 
size of the application.  The 

01:30:29.965 --> 01:30:33.508
larger the app, the more user 
regret that happens. And a lot 

01:30:33.509 --> 01:30:36.837
of people will go and actually 
back out of it and cancel. So 

01:30:36.838 --> 01:30:41.959
what we see is up to 20% of 
downloads fail or get canceled 

01:30:41.960 --> 01:30:47.531
rather, when applications are 
over 100mb. So you want to keep 

01:30:47.532 --> 01:30:51.510
the download size small to en
sure you get as much 

01:30:51.511 --> 01:30:52.922
distribution for your app as 
possible. 

01:30:52.923 --> 01:30:56.547
    The other to think about is 
install size. That has a similar

01:30:57.089 --> 01:30:59.582
 phenomenon, right?

01:31:11.478 --> 01:31:15.655
 They're going to go hunting if 
they need to download something 

01:31:15.656 --> 01:31:18.875
once it's full. The play store 
will suggest that they remove 

01:31:18.876 --> 01:31:23.112
some applications and they give 
them a list of suggestions.

01:31:29.523 --> 01:31:33.798
 So this is really going to hurt
 your reengagement if your app 

01:31:33.799 --> 01:31:37.841
is more likely to get un
installed. So I hope I have 

01:31:37.842 --> 01:31:41.725
given you a little motivation to
 think twice maybe three size 

01:31:41.726 --> 01:31:45.690
about your APK size, go back and
 think about what you can do. 

01:31:45.691 --> 01:31:48.797
What we want to show you today 
is a number of ways you can 

01:31:48.798 --> 01:31:52.276
follow to reduce that APK size. 
 Some will be existing practices

01:31:52.421 --> 01:31:55.687
 that have been out there for a 
while. We hope to summarize and 

01:31:55.688 --> 01:31:59.135
make it compact for you. Others 
are new and we're going to show 

01:31:59.136 --> 01:32:03.691
you those. Let's roll up our 
sleeves.  We will be working 

01:32:03.692 --> 01:32:06.786
with the Topeka app.

01:32:20.721 --> 01:32:25.290
 This is a good opportunity to 
tackle DEX code and make it 

01:32:25.291 --> 01:32:30.255
smaller. In a typical production
 app, you will have shared 

01:32:30.256 --> 01:32:33.481
objects but this doesn't happen 
with Topeka. At this point, I 

01:32:33.482 --> 01:32:39.099
would like to hand it over to Sh
ai. Hopefully you will see that 

01:32:39.100 --> 01:32:41.243
it's not too difficult and 
something you can do with your 

01:32:41.244 --> 01:32:43.244
app.

01:32:55.350 --> 01:32:59.675
Fonts.  Here we have our app 
built and running. I can press 

01:32:59.676 --> 01:33:04.537
build APK to get an APK and 
press analyze APK to crack it 

01:33:04.538 --> 01:33:11.077
open and see what it's made of. 
I already have it open here. It

01:33:11.270 --> 01:33:15.530
's a glorified zip file. Here we
 can see all of these con P 

01:33:15.531 --> 01:33:20.548
tents.  We can BRAUZ  -- browse 
through the resources folder to 

01:33:20.549 --> 01:33:24.232
see all of the large drawables 
that really dominate the most 

01:33:24.233 --> 01:33:31.567
bites in our app. We can look at
 class s.decks and see all the 

01:33:31.568 --> 01:33:33.783
code for our app.

01:33:41.616 --> 01:33:45.721
 We can look inside resources 
and see the translatable strings

01:33:45.722 --> 01:33:49.791
 and styles and extensions and 
resources that end up in 

01:33:49.792 --> 01:33:55.270
resources. We can look at the 
Android manifest and deKOID app.

01:34:00.925 --> 01:34:04.502
 There are two columns with size
 information. First is raw. This

01:34:04.936 --> 01:34:07.497
 is how every particular item 
contributes to size. The second 

01:34:07.498 --> 01:34:11.416
is download size, which better 
represents how much bytes the 

01:34:11.417 --> 01:34:15.600
user will actually have to 
download from Play in order to 

01:34:15.601 --> 01:34:18.709
install your app for the first 
time. You'll see, for instance, 

01:34:18.710 --> 01:34:22.169
that for resources, these 
numbers aren't very far apart 

01:34:22.170 --> 01:34:27.494
because resources are dominated 
by large PNGs we have for 

01:34:27.495 --> 01:34:30.847
drawables.  Those don't benefit 
from further compression. 

01:34:30.848 --> 01:34:36.196
Whereas for some other items, en
tropy is typically lower so the 

01:34:36.197 --> 01:34:38.738
gains from compression are 
higher. 

01:34:38.739 --> 01:34:42.825
    We're going to show you a 
bunch of tricks you can use for 

01:34:42.826 --> 01:34:45.185
this particular app, which we're
 going to use right now on stage

01:34:45.382 --> 01:34:49.724
. And we're going to show you 
the impact on the app size. For 

01:34:49.725 --> 01:34:54.106
your own app, your mileage may 
vary. Rather than memorizing 

01:34:54.107 --> 01:34:56.984
these particular steps, if there
's one lesson that you should 

01:34:56.985 --> 01:35:01.859
take home from this talk, it's 
that optimizing your app size 

01:35:01.860 --> 01:35:06.625
begins with finding out what's 
in it and tailoring to that. All

01:35:06.626 --> 01:35:13.159
 right? 
    First step is to use pro 

01:35:13.160 --> 01:35:17.136
guard. It's a whole program java
 optimizer.

01:35:27.081 --> 01:35:31.583
 It optimizes your code in ways 
that don't change functionality 

01:35:31.584 --> 01:35:38.606
but do change things to make 
them more exact. It will 

01:35:38.607 --> 01:35:43.663
optimize some spots in your code
. It will obfuscates names o6 

01:35:43.664 --> 01:35:46.936
types, methods and fields where 
the original name doesn't matter

01:35:47.134 --> 01:35:52.259
 so that long names are replaced
 with short strings like a and b

01:35:52.379 --> 01:35:57.896
 for efficiency. I know we like 
to give java classes long names 

01:35:57.897 --> 01:36:02.233
in our packages, but it 
shouldn't get in the way of 

01:36:02.234 --> 01:36:05.427
efficiency. And the last is dead
 code elimination. Pay attention

01:36:06.125 --> 01:36:11.013
. Think of this as a graph of 
classes of methods and fields 

01:36:11.014 --> 01:36:13.014
and modes.

01:36:23.937 --> 01:36:28.033
 If these classes are in your 
app manifest, then the platform 

01:36:28.034 --> 01:36:30.628
can call into them, so the 
program marks them as live 

01:36:30.629 --> 01:36:36.893
because this code can execute at
 run time, right? It then 

01:36:36.894 --> 01:36:41.746
propagates via references so it
's a free exploration algorithm,

01:36:41.943 --> 01:36:46.311
 and anything that is reachable 
is considered live. Then 

01:36:46.312 --> 01:36:49.860
whatever quote remains a 
compliment to that is presumed 

01:36:49.861 --> 01:36:54.198
dead and will be deleted unless 
you specify otherwise. This is 

01:36:54.199 --> 01:37:02.021
important to be aware of. So let
's look at the in path to that. 

01:37:02.022 --> 01:37:08.147
Here is what happens when you 
run Proguard on Topeka. Most of 

01:37:08.148 --> 01:37:12.304
the code is now gone. If I look 
at the support library here, I 

01:37:12.305 --> 01:37:17.516
see that it's considerably 
smaller than it was before. We 

01:37:17.517 --> 01:37:21.463
can also get the results using 
the APK analyzer. We can compare

01:37:21.612 --> 01:37:27.540
 one APK with another. Here we 
have numbers in raw APK size and

01:37:27.727 --> 01:37:31.857
 over in the charts on the 
slides I have it as download 

01:37:31.858 --> 01:37:38.033
size. I thought you'd appreciate
 that. If you look closely 

01:37:38.034 --> 01:37:43.946
inside the Dex file, most of the
 source code is gone and most of

01:37:44.630 --> 01:37:53.669
 the rest is obfuscated. Why is 
this happening? Proguard allows 

01:37:53.670 --> 01:37:56.613
you to choose what libraries you
 want to use without having to 

01:37:56.614 --> 01:37:59.120
worry about stuff in the 
libraries that you don't need 

01:37:59.121 --> 01:38:03.777
and how it might affect your 
load size. We're using support 

01:38:03.778 --> 01:38:06.304
library 4 and 7 and 
notifications and design and all

01:38:06.593 --> 01:38:10.437
 kinds of assets. We're only 
using the subset of the support 

01:38:10.438 --> 01:38:14.473
library so everything we're not 
using gets torn away at build 

01:38:14.474 --> 01:38:17.960
time and eliminated. Some of you
 might be thinking this is nice.

01:38:18.261 --> 01:38:22.607
 It's a nice benefit, but the 
optimizations make debugging 

01:38:22.608 --> 01:38:27.481
more difficult. Hold that 
thought until the next demo. 

01:38:27.482 --> 01:38:33.163
    What we've done for code we 
can do for resources as well. 

01:38:33.164 --> 01:38:39.988
Resource shrinking extends dead 
code to resources. Drawables 

01:38:39.989 --> 01:38:43.163
whose references are reachable 
from live code are kept in your 

01:38:43.164 --> 01:38:48.433
APK and everything else is 
deleted. 

01:38:48.434 --> 01:38:56.306
    Now our app is almost 4X 
small er. And this is no mistake

01:38:56.590 --> 01:39:01.169
. All we've done is tweaked two 
lines of Gradle, but what we get

01:39:01.431 --> 01:39:05.525
 is once again, things that go 
into the transtive closure of 

01:39:05.526 --> 01:39:08.377
dependencies of our app but not 
actually useful to the app. This

01:39:08.564 --> 01:39:12.006
 is due to features included in 
our dependencies that we don't 

01:39:12.007 --> 01:39:15.002
need.  The support libraries in 
this case contain a lot of de

01:39:15.098 --> 01:39:20.406
sign assets that we could use, 
but Topeka isn't, so we make the

01:39:20.659 --> 01:39:23.431
 deadweight go away. But we can 
do even better. 

01:39:23.432 --> 01:39:28.259
    So if you recall, we saw 
that in the resource folder when

01:39:28.430 --> 01:39:33.219
 we were looking at the APK 
analyzer, we saw drawables for 

01:39:33.220 --> 01:39:39.754
different screen densities. What
's going on? The Android eco-

01:39:40.277 --> 01:39:43.831
system is diverse for different 
displays and different CPU types

01:39:44.007 --> 01:39:48.480
 and other things.  By default, 
when you build an APK with all 

01:39:48.481 --> 01:39:53.184
the material to service as many 
devices as possible, it's 

01:39:53.185 --> 01:39:57.424
universal APK but it's larger 
than what you need on each 

01:39:57.425 --> 01:40:03.047
particular device.  Each 
specific device will only use 

01:40:03.048 --> 01:40:08.410
its particular code. Fortunately
, you can split your build a

01:40:08.602 --> 01:40:13.329
cross these dimensions and then 
upload multiple APKs to Play, 

01:40:13.330 --> 01:40:17.192
each one tailored to a 
particular device type. 

01:40:17.193 --> 01:40:23.030
    Here we intentionally look 
at the APK build for XXHDPI for 

01:40:23.031 --> 01:40:26.878
density screens which contains 
the largest PNGs because this is

01:40:27.089 --> 01:40:30.931
 the largest APK that we were 
building for this app in this 

01:40:30.932 --> 01:40:33.714
example. The difference is 
significant even when comparing 

01:40:33.715 --> 01:40:37.706
the universal APK to the largest
 split that we have. And the 

01:40:37.707 --> 01:40:42.369
difference is more pronounce ed 
for each one. 

01:40:42.370 --> 01:40:46.399
    Speaking of PNGs and 
densities, we can do better with

01:40:46.722 --> 01:40:49.858
 vector drawables.  Tell them, 
Gus. 

01:40:49.859 --> 01:40:52.946
   Â» AGUSTIN FONTS: We just saw 
that there is a way to deliver a

01:40:53.443 --> 01:40:58.412
 smaller app by chunking it up. 
That's a great benefit to APK 

01:40:58.413 --> 01:41:02.682
size, but it does come at a cost
, and that might be something 

01:41:02.683 --> 01:41:07.046
that you're not quite ready to 
get into. So there's an initial 

01:41:07.047 --> 01:41:09.787
approach that you can follow to 
reduce the amount of size that 

01:41:09.788 --> 01:41:13.639
you carry with your assets and 
that's use vector drawables. 

01:41:13.640 --> 01:41:19.416
Vector drawables would basically
 start with a vector inside your

01:41:19.857 --> 01:41:23.873
 application with a single asset
 that can serve up all of your 

01:41:23.874 --> 01:41:27.140
densities. The vector drawable 
is smaller than the smallest 

01:41:27.141 --> 01:41:34.821
density PNG, so it's quite nice.
 This is a medium complexity 

01:41:34.822 --> 01:41:37.876
vector with somewhat complex 
paths but not necessarily grate 

01:41:37.877 --> 01:41:41.757
YENTs and things like that. The 
thing that makes it useable and 

01:41:41.758 --> 01:41:47.260
exciting today is in support 
library 23.2, we introduced 

01:41:47.261 --> 01:41:51.378
support backwards compatible all
 the way back to 14. And also 

01:41:51.379 --> 01:41:55.116
with introduced gradient support
, so hopefully that gives you a 

01:41:55.117 --> 01:41:58.277
wider range of things you can do
 with vectors.  One thing to 

01:41:58.278 --> 01:42:02.309
keep in mind with vectors is 
that they can increase your RAM 

01:42:02.310 --> 01:42:06.763
and CPU load, especially when 
you first start up the 

01:42:06.764 --> 01:42:10.624
application.  If you have an app
 that is a series of assets that

01:42:11.142 --> 01:42:15.694
 are pretty complex, you want to
 do a performance test and Mick 

01:42:15.895 --> 01:42:19.417
 -- make sure you're not 
sacrifice ing performance in ex

01:42:19.729 --> 01:42:26.629
change for smaller app size. 
    Let's look at the savings. 

01:42:26.630 --> 01:42:30.193
It's all flat images with 
relatively low complexity, we 

01:42:30.194 --> 01:42:37.104
see that Vector Drawables is a 
little better than multiple APK,

01:42:37.268 --> 01:42:40.754
 which makes sense.  Our advice 
would be that you consider what 

01:42:40.755 --> 01:42:44.627
kind of image assets are in the 
applications.  If they're 

01:42:44.628 --> 01:42:47.354
relatively simple and flat, you 
should consider it. And that 

01:42:47.355 --> 01:42:53.524
also simplifies your build and Q
A process. 

01:42:53.525 --> 01:42:59.469
    So let me hand it back to Sh
ai for one more best practice. 

01:42:59.470 --> 01:43:02.809
   Â» SHAI BARAK: Awesome, thanks
. Finally we're going to see a 

01:43:02.810 --> 01:43:10.255
specialized trick for resources.
arc. So Topeka's ARC file is 

01:43:10.256 --> 01:43:15.056
small, but we will make it 2X 
smaller with one line, because 

01:43:15.057 --> 01:43:17.057
we can.

01:43:34.307 --> 01:43:39.237
 arsc file and view all the 
string translations and also 

01:43:39.238 --> 01:43:44.702
live on stage. Now you'll notice
 that some strings only appear 

01:43:44.703 --> 01:43:49.760
in English. For instance, there
's going to be sign in here and 

01:43:49.761 --> 01:43:54.641
sign-out. But other strings have
 as many as 82 translations for 

01:43:54.642 --> 01:43:59.587
them. Why is this happening? So 
the support library folks went 

01:43:59.588 --> 01:44:02.905
out of their way to localize 
their strings and kudos to them 

01:44:02.906 --> 01:44:06.469
because this is the right thing 
for a library to do. A lot of 

01:44:06.470 --> 01:44:09.380
apps go to similar lengths to 
translate their own strings and 

01:44:09.381 --> 01:44:13.396
you want the libraries to line 
up so that the app isn't half 

01:44:13.397 --> 01:44:20.092
translated right? Not the case 
with Topeka. It didn't bother 

01:44:20.093 --> 01:44:23.282
with anything but English.  
Translating your app is a good 

01:44:23.283 --> 01:44:27.492
way to reach out to more users, 
and we absolutely encourage that

01:44:27.723 --> 01:44:32.807
. Google translates all apps to 
as many languages as this. But a

01:44:33.109 --> 01:44:36.376
 half translated app can make a 
poor user experience.  

01:44:36.377 --> 01:44:43.703
    What's worse is these empty 
spaces use up bytes in our arsc 

01:44:43.704 --> 01:44:49.830
file. So what are we going to do
? We're going to get rid of them

01:44:50.013 --> 01:44:54.230
. We can fix all of this by 
simply stating that we only want

01:44:54.921 --> 01:45:00.303
 to retain English strings and 
then all the half translations 

01:45:00.304 --> 01:45:03.664
just disappear. So I know this 
is hard to see the difference, 

01:45:03.665 --> 01:45:09.513
but if you look under your seats
, you will find a pair of 

01:45:09.514 --> 01:45:16.044
binoculars each. Made you look. 
As promised, arsc is now 2X 

01:45:16.045 --> 01:45:19.594
smaller, although in the big 
picture it doesn't do much since

01:45:19.814 --> 01:45:24.964
 it was small to begin with. I 
have seen real apps that are 40%

01:45:25.167 --> 01:45:34.205
 arsc. Once again your mileage 
may vary. Now

01:45:35.242 --> 01:45:38.842
 Topeka is 5X smaller and it's 
not even 10 a.m. 

01:45:38.843 --> 01:45:40.843
[ Applause ] 

01:45:58.475 --> 01:46:02.329
   Â» CLARA BAYARRI: Hi. I'm the 
tech lead on the Android tool 

01:46:02.330 --> 01:46:05.246
kit team and I work on fonts.

01:46:09.125 --> 01:46:11.797
 Fonts are a source for apps. 
They're heavy and stuck into 

01:46:11.798 --> 01:46:15.047
your app and you need them and 
you need them for your UX. That

01:46:15.205 --> 01:46:20.319
's fine.  We figured out that 
most fonts that are bundling in 

01:46:20.320 --> 01:46:24.817
your apps are not even optimized
 for mobile. Half of that is not

01:46:25.028 --> 01:46:29.100
 even something we're going to 
use in Android. So that's a 

01:46:29.101 --> 01:46:31.101
shame.

01:46:34.945 --> 01:46:38.693
 And the top 25 apps that bundle
 fonts are

01:46:44.787 --> 01:46:46.825
 500kb.

01:47:00.372 --> 01:47:04.185
 There you go. Can we go back 
please? There you go. Fonts 

01:47:04.186 --> 01:47:11.620
provider is a separate app that 
is not yours that is its own 

01:47:11.621 --> 01:47:17.267
mission is to fetch fonts, cache
 them, and serve them when 

01:47:17.268 --> 01:47:22.600
needed. The way this works is 
all apps can context the font 

01:47:22.601 --> 01:47:28.219
provider. These are available in
 Android O and in support 

01:47:28.908 --> 01:47:30.908
library 26

01:47:35.393 --> 01:47:39.432
. We have one copy of the font 
that they are using at one time.

01:47:39.598 --> 01:47:43.159
 We save memory because we're 
only loading font once and 

01:47:43.160 --> 01:47:51.221
sharing that memory between apps
. They don't have to bundle the 

01:47:51.222 --> 01:47:55.149
fonts and we have one copy. 
We're saving the space for the 

01:47:55.150 --> 01:47:59.999
user because all of your apps 
are smaller and we're also 

01:48:00.000 --> 01:48:02.000
saving network.

01:48:05.002 --> 01:48:07.760
 This is available in support 
library today, and I'm proud to 

01:48:07.761 --> 01:48:11.299
announce our font provider is 
available, great collaboration 

01:48:11.300 --> 01:48:18.183
done with the Google fonts team.
 The Google fonts catalog is 800

01:48:18.557 --> 01:48:24.335
 fonts, available for you to use
, free from APK size. There is a

01:48:24.750 --> 01:48:28.779
 tiny caveat. It is currently in
 beta.

01:48:40.548 --> 01:48:45.994
 Now I want to hand it over to W
ojtek. 

01:48:45.995 --> 01:48:50.036
   Â» WOJTEK KALICINSKI: Hi, 
everyone. I'm a developer 

01:48:50.037 --> 01:48:52.037
advocate

01:48:55.439 --> 01:48:59.065
 I want to walk you through some
 of the new tools to help you 

01:48:59.066 --> 01:49:04.464
keep your APK size down. The 
fonts are a great way to make 

01:49:04.465 --> 01:49:09.175
your apps look pretty without 
adding the bloat to your APK. 

01:49:09.176 --> 01:49:14.156
Let me show you how easy it is. 
Are we on demo? Yes. Here I

01:49:20.134 --> 01:49:24.200
 have open one of the layout 
files from the Topeka app. If I 

01:49:20.134 --> 01:49:23.476
click on the TEKTS view, I can 
actually go and change the fonts

01:49:23.907 --> 01:49:27.415
 on the layout inspector. I 
scroll down and select more 

01:49:27.416 --> 01:49:33.063
fonts, there is a new picker in 
Android studio 3.0 that we 

01:49:33.064 --> 01:49:41.285
announce ed yesterday.  If I 
just choose one, here I can 

01:49:41.286 --> 01:49:46.088
select the downloadable font. So
 if I press okay, I can see the 

01:49:46.089 --> 01:49:49.184
font immediately change in the 
preview, which I would if the 

01:49:49.185 --> 01:49:52.086
font were downloaded.

01:50:13.871 --> 01:50:19.555
 Can we switch back to slides 
please? So that's one thing. 

01:50:19.556 --> 01:50:24.204
When we're on the topic of 
resources, we are also making 

01:50:24.205 --> 01:50:30.278
changes to APT, Android asset 
packaging tool.

01:50:54.278 --> 01:50:56.495
different colors or different 
styles for the different 

01:50:56.496 --> 01:51:01.420
versions of the platform. That 
also happens in the support 

01:51:01.421 --> 01:51:04.413
library, which you normally 
bring into your apps. But as you

01:51:04.641 --> 01:51:09.429
 develop your app and time 
passes, you normally start 

01:51:09.430 --> 01:51:13.603
raising your SDK version and 
restricting versions that your 

01:51:13.604 --> 01:51:17.455
Android apps run on. These 
resources still remain 

01:51:17.456 --> 01:51:21.832
especialry if if they come from 
external dependencies. So they 

01:51:21.833 --> 01:51:30.230
take up unnecessary space in 
your APK. With AAPT2, it can 

01:51:30.231 --> 01:51:34.056
figure it out and get rid of the
 resources that are unneeded and

01:51:34.398 --> 01:51:37.317
 can collapse the configurations
 in your app to reduce the size 

01:51:37.318 --> 01:51:42.802
of the resources file even 
further. 

01:51:42.803 --> 01:51:45.341
    Next up, we have resource

01:51:48.805 --> 01:51:55.234
 deed implications. I'm showing 
you resources. Translations.  In

01:51:55.363 --> 01:51:59.248
 some configurations, in French 
and French Canadian, mostly the 

01:51:59.249 --> 01:52:02.465
translations will be the same. 
Most of the words are exactly 

01:52:02.466 --> 01:52:06.220
the same except for just a few. 
It doesn't make sense to 

01:52:06.221 --> 01:52:10.630
actually keep these duplicate 
resources in the resources file,

01:52:11.051 --> 01:52:15.016
 so what this will do now is 
find the duplicate resources, 

01:52:15.017 --> 01:52:19.938
get rid of them and let the 
system default to the default 

01:52:19.939 --> 01:52:25.445
configuration. So this is 
version CLAPGSing and resource 

01:52:25.446 --> 01:52:30.742
deduplication. It does a couple 
more internal things. It starts 

01:52:30.743 --> 01:52:33.303
using UTF8.

01:52:37.626 --> 01:52:41.757
 This is the part that reduces 
the size of images by optimizing

01:52:41.990 --> 01:52:46.470
 them. If you find that your 
images are already preoptimized 

01:52:46.471 --> 01:52:53.239
and the output would be bigger, 
then it just uses the smaller 

01:52:53.240 --> 01:52:55.240
versions.

01:53:07.710 --> 01:53:14.790
this one line I encourage you to
 try it and reduce the size of 

01:53:14.791 --> 01:53:20.347
your ADK without doing anything.
 You don't have to change a 

01:53:20.348 --> 01:53:22.973
single line of code. But 
sometimes that's not enough. 

01:53:22.974 --> 01:53:27.123
Sometimes you actually want to 
go in and inspect and change 

01:53:27.124 --> 01:53:30.752
things in your app and you need 
tools to help you make decisions

01:53:31.091 --> 01:53:36.430
 of where to actually go and 
make the optimizations. Like Sha

01:53:36.538 --> 01:53:40.954
i mentioned before, one of the 
biggest changes you can make to 

01:53:40.955 --> 01:53:45.362
your app is enable proguard to 
shrink away code and resources. 

01:53:45.363 --> 01:53:48.723
But when talking to developers 
at conferences like this, I 

01:53:48.724 --> 01:53:54.531
often hear that it's difficult 
to debug build and runtime 

01:53:54.830 --> 01:53:59.716
problems that can stem from code
 in your apps and developers 

01:53:59.717 --> 01:54:02.475
were lacking tools. That's why 
we're making improvements to the

01:54:03.583 --> 01:54:07.827
 analyzer in Android studio. Let
 me show you an example. Can we 

01:54:07.828 --> 01:54:14.328
switch to the demo please? 
    So here we have Android 

01:54:14.329 --> 01:54:19.524
studio 3 running on my machine. 
One of the first things -- sorry

01:54:19.637 --> 01:54:23.664
. I'm going to walk you through 
a few things that we're adding 

01:54:23.797 --> 01:54:27.636
to let you better debug problems
, but we've also added tweaks to

01:54:27.935 --> 01:54:32.222
 the APK analyzer that hopefully
 will make working with it even 

01:54:32.223 --> 01:54:37.536
easier. So the first thing you 
might notice is we now have 

01:54:37.537 --> 01:54:44.169
multiDex support so we can 
select multiple files this is 

01:54:44.170 --> 01:54:47.692
not the Topeka app. It created 
it

01:54:50.856 --> 01:54:52.856
 just for the purpose of this 
demo.

01:55:03.128 --> 01:55:07.712
 The fragment, I only use it for
 the layout XML file, which that

01:55:07.871 --> 01:55:12.568
 will be important later. We 
will make tweaks to the Dex 

01:55:12.569 --> 01:55:18.364
viewers.  We have filtering 
options. I can disable show ing 

01:55:18.365 --> 01:55:22.745
the referenced from my file but 
not actually defined in it. 

01:55:22.746 --> 01:55:26.400
    Moving on to Proguard.

01:55:37.430 --> 01:55:40.430
 First problem is it crashes.  I
 don't know why. The second 

01:55:40.431 --> 01:55:46.633
problem is if I actually go and 
try to debug the problem, like S

01:55:46.765 --> 01:55:50.889
hai mentioned, all of the names,
 they were all changed to 

01:55:50.890 --> 01:55:54.994
strings like A, B, C. It's very 
difficult to debug the problem 

01:55:54.995 --> 01:56:00.115
here. So what I can do now with 
the new Android studio is I can 

01:56:00.116 --> 01:56:05.055
load the program mappings that 
were created when my APK was 

01:56:05.056 --> 01:56:07.056
built.

01:56:08.849 --> 01:56:13.514
 So let me open that here. And 
now you can see the Dex viewer 

01:56:13.515 --> 01:56:19.657
changed. First I can actually 
see all the names.  Everything 

01:56:19.658 --> 01:56:23.144
is back like it was in my 
original source code.  Second, I

01:56:23.304 --> 01:56:27.910
 can actually go here and see 
that my blank fragment is 

01:56:27.911 --> 01:56:33.240
missing. Proguard was not able 
to automatically detect that it 

01:56:33.241 --> 01:56:37.321
was being used in my code. I can
 press this button here

01:56:52.297 --> 01:56:54.006
. 
    I right click on it and I 

01:56:54.007 --> 01:56:56.007
can generate a program rule -- 
[ Applause ] 

01:57:04.911 --> 01:57:08.808
Proguard configuration. I just 
want to keep the class and all 

01:57:08.809 --> 01:57:13.960
its members. So I copy it here. 
I rebuild my app and I open the 

01:57:13.961 --> 01:57:17.708
APK after actually building it. 
I have loaded the program 

01:57:17.709 --> 01:57:22.857
mappings so that we can keep 
things brief. I open it, and I 

01:57:22.858 --> 01:57:26.771
can see that the blank fragment 
is not only here, it's shown in 

01:57:26.772 --> 01:57:31.625
bold, which means that it was 
explicitly kept by the program 

01:57:31.626 --> 01:57:36.367
configuration. So that's the Pro
guard support in Android Studio 

01:57:36.368 --> 01:57:41.753
and APK analyzer. For real power
 users, you can go and figure 

01:57:41.754 --> 01:57:45.195
out how the classes that you use
 and the dependencies that you 

01:57:45.196 --> 01:57:48.563
have pull even more code inside 
your app. For example, I know 

01:57:48.564 --> 01:57:51.618
that in my source code, I'm 
using this class called optional

01:57:51.832 --> 01:57:55.533
, but I have never used this one
 or this one. So why is it here?

01:57:56.148 --> 01:58:02.521
 I can now right click on any 
class or method and actually 

01:58:02.522 --> 01:58:07.264
find usages and get a nice tree 
of dependencies and see that 

01:58:07.265 --> 01:58:10.675
actually this percent class is 
used by this method from the 

01:58:10.676 --> 01:58:14.864
optional, which I'm using from 
my own create. What's more, I 

01:58:14.865 --> 01:58:22.368
can actually verify that by 
opening my on_create method and 

01:58:22.369 --> 01:58:27.250
looking at the exact bytecode of
 that method. I know not every 

01:58:27.251 --> 01:58:31.160
one of you will need to use this
, but if you work with very 

01:58:31.161 --> 01:58:34.375
complicated build systems, now 
you can actually analyze the 

01:58:34.376 --> 01:58:41.648
bytecode that gets packaged in 
your APK. Okay? Can we switch 

01:58:41.649 --> 01:58:46.163
back to slides please? This is 
available in Android Studio now.

01:58:46.298 --> 01:58:49.102
 There are more things that 
we're working on and hopefully 

01:58:49.103 --> 01:58:52.473
you'll get to play with them in 
the future, but now let me give 

01:58:52.474 --> 01:58:55.832
you a sneak peak. 
    Previously we had only two 

01:58:55.833 --> 01:58:59.017
colors showing defined and 
reference methods, which is 

01:58:59.018 --> 01:59:06.758
useful if you're debugging 
problems with multiDex. We're 

01:59:06.759 --> 01:59:10.230
adding a third column that will 
show you the actual byte size 

01:59:10.231 --> 01:59:14.231
for package, class, or even 
method so you can see how the 

01:59:14.232 --> 01:59:17.136
functionality that you add to 
your code or the libraries that 

01:59:17.137 --> 01:59:23.531
you pull into your code base 
impact the detection and APK 

01:59:23.532 --> 01:59:28.373
size of your app. 
    The last thing is Shai 

01:59:28.374 --> 01:59:34.136
showed you how to compare two AP
Ks, but that was quite limited. 

01:59:34.137 --> 01:59:38.743
We're expanding the compare APK 
action to give you the actual up

01:59:39.027 --> 01:59:43.029
date size as delivered by the 
Play store from one version of 

01:59:43.030 --> 01:59:46.268
the app to the other and we 
include the new file by file 

01:59:46.475 --> 01:59:49.718
support that has been added to 
Play. If you're not familiar 

01:59:49.719 --> 01:59:54.024
with file by file patches, let 
me invite James on the stage 

01:59:54.025 --> 01:59:56.130
from the Play team to explain it
 better. 

01:59:56.131 --> 01:59:58.131
[ Applause ] 

02:00:10.922 --> 02:00:12.922
   Â» JAMES SMITH: Hello.

02:00:27.225 --> 02:00:32.521
 In the last year, Play invested
 a lot in taking significant 

02:00:32.522 --> 02:00:38.142
steps to reduce APK size for 
downloads and updates. I'm 

02:00:38.143 --> 02:00:40.693
delighted to say we've had great
 success and I would like to 

02:00:40.694 --> 02:00:48.647
tell you about two in particular
. The first was compression. 

02:00:48.648 --> 02:00:53.213
We're always proud of our in
terns, but this will take some 

02:00:53.509 --> 02:00:59.737
beating. Our intern Ana took Bro
tli, a really cool new 

02:00:59.738 --> 02:01:03.811
compression format from the 
Google re search Europe team and

02:01:04.262 --> 02:01:07.688
 applied it to the Play 

02:01:11.129 --> 02:01:19.002
Store. That one change reduced 
our data usage by 1.5Petabyes.

02:01:23.804 --> 02:01:33.628
  A day. We are definitely 
offered Ana a place to join

02:01:34.965 --> 02:01:40.605
 us full-time. 
    Secondly, when Google play 

02:01:40.606 --> 02:01:45.383
updates an app, we started out 
by serving the full new APK for 

02:01:45.384 --> 02:01:50.469
each update. Later on we 
switched to using DIFing 

02:01:50.470 --> 02:01:55.336
algorithms to generate deltas 
between the new APKs and old APK

02:01:55.482 --> 02:01:59.394
s, which we would then deliver 
as patches.

02:02:03.998 --> 02:02:12.958
 I changed one character here. 
Can you see it? Top left, second

02:02:13.188 --> 02:02:16.856
 word. Let's go back and see it 
again. We only changed one 

02:02:16.857 --> 02:02:22.299
character. Let's see that again.
 Pretty crazy. So a compressed 

02:02:22.300 --> 02:02:26.049
version produces a massively 
different version of compressed 

02:02:26.050 --> 02:02:28.050
text.  That means the patch 
between the two is very in

02:02:29.834 --> 02:02:33.015
efficient. So we decided to get 
smarter about how we generate 

02:02:33.016 --> 02:02:37.675
patches.  We've launched a new 
system called file by file 

02:02:37.676 --> 02:02:41.124
patching and decided to un
compress the APKs and generate 

02:02:42.597 --> 02:02:46.016
the deltas on uncompressed 
versions. Every file, file by 

02:02:46.017 --> 02:02:49.993
file. This creates a far more 
efficient patch and we reverse 

02:02:49.994 --> 02:02:54.508
the process when we apply the 
patch on the device. The result?

02:02:55.112 --> 02:03:00.664
 We saved 6petabytes of user 
data per day. On average, 

02:03:00.665 --> 02:03:05.475
patches are now 65% smaller than
 the original app size and some 

02:03:05.476 --> 02:03:11.559
are even smaller. Netflix's 
original app is 60 megabytes but

02:03:12.014 --> 02:03:16.999
 the patch was only one 1 
megabyte, a 92% saving. With 

02:03:17.000 --> 02:03:26.032
these two changes, we dropped 
our data use -- usage by 7.5peta

02:03:26.380 --> 02:03:31.650
bytes per day. That's 100 years 
of HDTV video every single day. 

02:03:31.651 --> 02:03:38.776
If that doesn't give you an -- 
an idea of Android scale and 

02:03:38.777 --> 02:03:40.743
play  ? 
[ Applause ] 

02:03:40.744 --> 02:03:47.871
    So now we're introducing 
Google play app signing. Google 

02:03:47.872 --> 02:03:51.487
play will manage your key on 
your behalf and sign your app 

02:03:51.488 --> 02:03:55.374
before delivering it to users. 
Now once Google play signs your 

02:03:55.375 --> 02:04:02.626
app, we can go one step further 
and we can provide app size 

02:04:02.627 --> 02:04:04.627
optimizations.

02:04:05.851 --> 02:04:09.903
 You heard earlier about multiAP
K and the stuff that's not 

02:04:09.904 --> 02:04:16.219
required. If I have 32 bit 
architecture and HDPI screen, I 

02:04:16.220 --> 02:04:21.182
only need what's in blue and the
 rest of the APK is completely 

02:04:21.183 --> 02:04:25.873
unnecessary on my device. With 
app optimization, we deliver 

02:04:25.874 --> 02:04:29.203
just the right content for each 
device.

02:04:34.564 --> 02:04:38.618
 Sign up for app optimizizations
 and you never need to worry 

02:04:38.619 --> 02:04:42.411
about it again. 
[ Applause ]  

02:04:42.412 --> 02:04:47.359
you give us a universal APK, and
 we will automatically create an

02:04:47.995 --> 02:04:51.899
 optimized APK for different 
devices on screen density and 

02:04:51.900 --> 02:04:56.704
native architecture. 
    Now we're just getting 

02:04:56.705 --> 02:05:00.674
started exploring this area. It
's really early. But we've tried

02:05:00.675 --> 02:05:05.832
 this out with a few apps that 
were in our early access program

02:05:05.833 --> 02:05:09.425
 for app signing and we expect 
the average savings to be about 

02:05:09.426 --> 02:05:15.947
15%.  However some apps see even
 better results. Delivery was 33

02:05:16.106 --> 02:05:21.308
% smaller after the 
optimizations and the 7-minute 

02:05:21.309 --> 02:05:24.179
workout app was nearly a half 
smaller.  So we're really 

02:05:24.180 --> 02:05:27.164
excited about this. We think it 
will be a huge benefit to users 

02:05:27.165 --> 02:05:30.462
and developers.  
    So how can you get these 

02:05:30.657 --> 02:05:33.836
benefits? App signing is 
available today. You can go out 

02:05:33.837 --> 02:05:39.940
and get enrolled straight away. 
We are trialing app 

02:05:39.941 --> 02:05:43.333
optimizizations with a few 
select patter in s at the moment

02:05:43.516 --> 02:05:49.745
 and hope to widen the beta. 
Please enroll in app signing. If

02:05:50.196 --> 02:05:54.523
 you would like to find out more
, please come to our talk at 2:

02:05:54.917 --> 02:05:59.408
30 p.m. today on stage one next 
door. 

02:05:59.409 --> 02:06:02.642
    So thank you very much for 
listening. Today we covered a 

02:06:02.643 --> 02:06:05.766
lot of the best practices that 
you can do to slim down your APK

02:06:05.924 --> 02:06:09.737
 size. It's really important to 
users, so I really hope that you

02:06:09.913 --> 02:06:12.836
 take something away from this 
and go and invest in making this

02:06:12.837 --> 02:06:17.050
 better.  If you'd like to find 
out more, talk to the Android 

02:06:17.051 --> 02:06:20.346
and play teams in sandbox dorm C
. Thanks again. 

02:06:20.347 --> 02:06:22.347
[ Applause ] 

02:09:37.229 --> 02:09:37.618
RAW FILE 
GOOGLE iO 2017

02:09:37.619 --> 02:09:41.285
MOUNTAIN VIEW, CALIFORNIA 
What's New in Support Library

02:09:37.619 --> 02:09:37.710
May 18, 2017
10:30 am PDT

02:09:37.711 --> 02:09:37.920
Stage 2  
Services provided by: 

02:09:37.921 --> 02:09:38.679
Caption First, Inc.
P.O. Box 3066

02:09:38.680 --> 02:09:40.680
Monument, CO 80132
800-825-5234

02:09:38.680 --> 02:09:40.280
www.captionfirst.com 
***

02:09:38.680 --> 02:09:42.946
This text is being provided in a
 realtime format.  Communication

02:09:38.680 --> 02:09:42.280
 Access Realtime translation 
(CART) or captioning are 

02:09:38.680 --> 02:09:42.946
provided in order to facilitate 
communication accessibility and 

02:09:38.680 --> 02:09:42.480
may not be a totally verbatim 
record of the proceedings. 

02:09:38.680 --> 02:09:40.680
***                   

02:28:29.308 --> 02:28:30.993
   Â» ALAN VIVERETTE: Good 
morning. 

02:28:30.994 --> 02:28:31.531
   Â» CORY O'CONNOR: Good morning
. 

02:28:31.532 --> 02:28:35.037
   Â» ALAN VIVERETTE: And we're 
going to talk about what's new 

02:28:35.038 --> 02:28:40.498
in support library through today
's release 26.0 beta one.

02:28:50.005 --> 02:28:54.050
 Do you develop Android apps? 
Okay.  So everybody here is p

02:28:54.306 --> 02:28:59.750
retty familiar with the support 
library. It's a collection of 

02:28:59.751 --> 02:29:01.773
utilities and classes that make 
it easy to target older versions

02:29:01.914 --> 02:29:09.927
 of the platform. It's a very 
essential part of Android app 

02:29:09.928 --> 02:29:11.912
development. 
    So we're going to start by 

02:29:11.913 --> 02:29:17.246
talking about what's old in the 
Android support library before 

02:29:17.247 --> 02:29:21.913
we move on to what's new. Last 
year you may recall that we 

02:29:21.914 --> 02:29:25.816
dropped support for SDKs lower 
than 9.

02:29:35.388 --> 02:29:44.496
 We reduced our count by quite a
 bit. This is really helpful. So

02:29:44.795 --> 02:29:49.697
 today, we have fewer than 1% of
 active Android devices 

02:29:49.698 --> 02:29:54.307
according to Play Store check-
ins on APIs lower than

02:29:59.172 --> 02:30:03.305
 14. So you may guess what I'm 
about to say. Is anybody still 

02:29:59.172 --> 02:30:01.232
targeting ginger bred?

02:30:05.119 --> 02:30:09.503
 -- bread. You probably have a 
singeing feeling right now. We 

02:30:09.504 --> 02:30:15.222
are removing support for APIs 
lower than 14. 

02:30:15.223 --> 02:30:17.223
[ Applause ]
.

02:30:19.130 --> 02:30:22.277
 We've got some great benefits 
from this.

02:30:26.295 --> 02:30:31.155
 If your main SDK is not already
 14, it will become 14. The 

02:30:31.156 --> 02:30:34.589
three of you still targeting 
ginger bread, you can still use 

02:30:34.590 --> 02:30:38.629
the existing versions of support
 library. So 25.3 is going to 

02:30:38.630 --> 02:30:42.820
continue to work on gingerbread 
and honey comb. But if you want 

02:30:42.821 --> 02:30:47.657
to use some of the new features,
 you'll need to maybe have a 

02:30:47.658 --> 02:30:52.951
separate code branch where your 
main SDK is 14. 

02:30:52.952 --> 02:30:57.324
    So some of the benefits that
 you will get from this? We've 

02:30:57.325 --> 02:31:01.106
dropped over 1400 methods. So 
we're a little bit backing off 

02:31:01.107 --> 02:31:03.107
from the Dex limit.

02:31:13.340 --> 02:31:19.426
 We're deprecate ing over 400 
methods that are no longer 

02:31:19.427 --> 02:31:28.978
necessary. So for example, if 
you do this, it will show up as 

02:31:28.979 --> 02:31:34.886
depreKated and it will show up 
as the actual set pivot X method

02:31:35.249 --> 02:31:38.338
 because that exists.  We have 
work-arounds for bugs in 

02:31:38.339 --> 02:31:44.072
existing versions. It may be 
useful to be calling view compa

02:31:44.316 --> 02:31:49.698
t. We will be removing the 
methods in a later version. 

02:31:49.699 --> 02:31:52.625
    So we've made it easier to 
develop with the Android support

02:31:53.090 --> 02:31:56.528
 library. We're also going to be
 improving the way you get to 

02:31:56.529 --> 02:31:59.965
the Android support library. 
We've modernized our 

02:31:59.966 --> 02:32:04.677
distribution method and added 
the Google Maven repository  . A

02:32:12.208 --> 02:32:19.404
Every time we update, you don't 
have to download internal Maven 

02:32:19.654 --> 02:32:20.454
repository  . 
[ Applause ] 

02:32:20.455 --> 02:32:25.444
    So we're including support 
library as well as constraint 

02:32:25.445 --> 02:32:29.090
layout. The application 
architecture components that you

02:32:29.359 --> 02:32:33.705
 may have heard about yesterday 
through this Maven repository, 

02:32:33.706 --> 02:32:37.396
we're including every historical
 version of support including 26

02:32:37.648 --> 02:32:41.855
 beta one, which is only 
available through the Google Mav

02:32:42.019 --> 02:32:46.590
en repo. You can make the 
transition even if you're not 

02:32:46.591 --> 02:32:51.512
targeting 26 yet. It's as simple
 as adding the Google Maven 

02:32:51.513 --> 02:32:56.600
repository to your Maven 
repositories in your build Gradl

02:32:56.838 --> 02:33:01.041
e. You set up your compile 
dependencies and you're good to 

02:33:01.042 --> 02:33:04.814
go. Just a moment while a bunch 
of people take photos. The 

02:33:04.815 --> 02:33:07.782
slides will be available later 
so any links that we're showing,

02:33:08.017 --> 02:33:10.017
 you can look at later.

02:33:15.385 --> 02:33:19.072
attain and develop and we also 
want to make it easier to 

02:33:19.073 --> 02:33:21.842
develop the support library 
itself.  So we're approving work

02:33:22.131 --> 02:33:25.921
 flow with our issue tracker. We
 moved from Google code to our 

02:33:26.687 --> 02:33:30.787
new issue tracker.Google.com. 
This is providing a much, much 

02:33:30.788 --> 02:33:33.796
better tool for us to track bug 
s

02:33:38.400 --> 02:33:41.835
 manage hot lists and follow up 
on what you're telling us about 

02:33:41.836 --> 02:33:46.061
bugs. But it's also better for 
you. It's more stable and will 

02:33:46.062 --> 02:33:49.646
provide a faster response time 
when you file bugs.

02:33:54.204 --> 02:33:57.802
 When you file a bug, sometimes 
maybe we're slow to respond. We 

02:33:57.803 --> 02:34:01.236
try hard, but there are a lot of
 bugs. So if you decide that you

02:34:01.422 --> 02:34:07.515
 want to handle a bug yourself, 
we have support for developing 

02:34:07.516 --> 02:34:15.362
support library for iOSP, an un
bundled support that is around 6

02:34:15.688 --> 02:34:21.050
 gigs right now instead of the 
full 150 gig, you can open the 

02:34:21.051 --> 02:34:24.300
framework support root in 
Android Studio. Everything works

02:34:24.522 --> 02:34:29.797
.  You don't have a bunch of 
weird red arrow linings.

02:34:42.349 --> 02:34:45.063
 We want to get patches from you
.

02:34:51.024 --> 02:34:55.697
 If you send us a pull request, 
for bug fixes only. We're not 

02:34:55.698 --> 02:34:59.438
taking API changes. We'll look 
at those. We'll give you feed

02:34:59.634 --> 02:35:02.771
back and hopefully we'll be able
 to integrate those into our 

02:35:02.772 --> 02:35:08.385
main repository. 

02:35:08.386 --> 02:35:12.816
    Now over to Clara to talk 
about some of the actual new 

02:35:12.817 --> 02:35:14.047
features. 
   Â» CLARA BAYARRI: Thank you. 

02:35:14.048 --> 02:35:17.267
It's an exciting year for text.

02:35:21.509 --> 02:35:25.696
 Let me start. First feature I 
want to present today, we're 

02:35:25.697 --> 02:35:28.854
calling it fonts in XML.

02:35:32.318 --> 02:35:35.506
 You might be familiar with a 
painful process that looks like 

02:35:35.507 --> 02:35:40.769
this. Create your custom text 
view, load your type face on and

02:35:41.065 --> 02:35:44.473
 use your custom type face 
everywhere in your XMLs. That's 

02:35:44.474 --> 02:35:49.101
not fun. We've seen more clever 
ideas out there, but we decided 

02:35:49.102 --> 02:35:54.083
to fix this in the framework. So
 starting now, fonts are a new 

02:35:54.084 --> 02:35:56.084
resource type  . 
[ Applause ] 

02:36:07.515 --> 02:36:11.120
these for you. We are adding 
support for font families, for 

02:36:11.121 --> 02:36:14.524
when you have more than one file
 to define a font. You have a 

02:36:14.525 --> 02:36:19.274
regular, bold, italic, and bold 
italic style and you want to 

02:36:19.275 --> 02:36:22.647
treat them as a unit, we are 
supporting that as well. You can

02:36:22.849 --> 02:36:27.839
 define XML with a font family 
tag and font tags for each font 

02:36:27.840 --> 02:36:31.380
in the family. I defined a 
family with a regular and a bold

02:36:31.381 --> 02:36:34.451
 font. Creating those, you tell 
us what the style and the weight

02:36:34.579 --> 02:36:39.268
 is for each of the files, and 
then this, for example, would 

02:36:39.269 --> 02:36:45.288
generate my font. This is a 
family and can be used as a unit

02:36:45.722 --> 02:36:49.538
 and the framework would take 
care of selecting the font it 

02:36:49.539 --> 02:36:52.517
wants from that group. You may 
be familiar with the Android 

02:36:52.518 --> 02:36:56.820
font family. This has existed 
since way before. It takes 

02:36:56.821 --> 02:36:59.115
strings, things like san

02:37:02.307 --> 02:37:10.507
s sarif and others.  You can now
 say Android family at font my 

02:37:10.508 --> 02:37:15.072
font. We have added support for 
textiles. It already existed. If

02:37:15.073 --> 02:37:20.054
 it were a family and you tell 
us to use bold, we will 

02:37:20.055 --> 02:37:23.466
automatically use the bold font 
within your family. If you're 

02:37:23.467 --> 02:37:27.027
using spans within your text to 
define different styles, we will

02:37:27.618 --> 02:37:29.554
 automatically select the font 
for you and take care of 

02:37:29.555 --> 02:37:34.447
everything. As you can imagine, 
it works in styles. Set it on 

02:37:34.448 --> 02:37:42.388
your text view, everything works
. We have added resources. Give 

02:37:42.389 --> 02:37:44.974
us the ID and we'll give you a 
type face back. 

02:37:44.975 --> 02:37:52.800
    This is all available to you
 today on API14 and above thanks

02:37:53.046 --> 02:37:55.314
 to the support library. 
[ Applause ] 

02:38:00.855 --> 02:38:05.031
 me move to another feature. We 
have downloadable fonts.  We 

02:38:05.032 --> 02:38:08.791
noticed that lots of you bundle 
fonts into your APK and they are

02:38:09.059 --> 02:38:12.903
 really large files.  You are 
probably bundling fonts that are

02:38:13.077 --> 02:38:16.589
 not even optimized for mobile 
and Android doesn't need about 

02:38:16.590 --> 02:38:18.590
50% of the file.

02:38:21.797 --> 02:38:26.865
 We made a little analysis and 
we found that the top 25 are 

02:38:26.866 --> 02:38:30.465
bundling on average about 500K 
in fonts that we have in the 

02:38:30.466 --> 02:38:38.397
Google fonts catalog. Couldn't 
we do better with that? And you 

02:38:38.398 --> 02:38:42.256
are bundling in several places 
and the user is downloading this

02:38:42.454 --> 02:38:45.696
 over and over again. We have 
created the concept of a font 

02:38:45.697 --> 02:38:49.130
provider and it is the separate 
entity that is not your app and 

02:38:49.131 --> 02:38:53.358
its own mission is to fetch 
fonts, cache them, and serve 

02:38:53.359 --> 02:38:57.058
them to you and every other app 
that wants fonts so hopefully 

02:38:57.059 --> 02:39:03.402
you can get rid of your bundled 
fonts and rely on the font 

02:39:03.403 --> 02:39:10.545
provider. All apps can do 
contract APIs. This means that 

02:39:10.546 --> 02:39:16.212
you all have one entry point 
into the font provider. Can you 

02:39:16.213 --> 02:39:22.713
go back one? Benefits? We have 
one copy of the font. We only 

02:39:22.714 --> 02:39:26.380
have one on memory, saving 
memory for the user. One copy on

02:39:26.615 --> 02:39:29.916
 the device so that you don't 
have to bundle it in the APK and

02:39:30.215 --> 02:39:33.375
 only downloading it once from 
the network if you are also 

02:39:33.376 --> 02:39:36.872
downloading it yourself. We're 
very proud to announce that our 

02:39:36.873 --> 02:39:40.215
very first font provider 
available to you is a 

02:39:40.216 --> 02:39:43.442
collaboration with the Google 
fonts team.

02:39:47.219 --> 02:39:51.280
 That is more than 800 fonts out
 there for you. 

02:39:51.281 --> 02:39:53.281
[ Applause ] 

02:40:05.041 --> 02:40:10.912
request. The actual query of the
 font, so say you want comic 

02:40:10.913 --> 02:40:14.547
sans, maybe. And the array of 
certificates that the provider 

02:40:14.548 --> 02:40:18.761
is signed with. This is very 
important. Fonts are kind of a 

02:40:18.762 --> 02:40:21.736
security loophole. They can load
 and execute code, so we want to

02:40:21.986 --> 02:40:24.535
 make sure you have a trust 
relationship with your font p

02:40:24.705 --> 02:40:27.931
rovider. You don't want to up
load fonts from anywhere. We can

02:40:28.571 --> 02:40:32.775
 assure you that all the fonts 
available on Google play 

02:40:32.776 --> 02:40:36.309
services, we know they are 
secure and mobile optimized. 

02:40:36.310 --> 02:40:40.842
    Next you will create a call 
back and it has two main 

02:40:40.843 --> 02:40:42.843
functions.

02:41:01.579 --> 02:41:05.661
 Er  -- we want to make sure 
that you have control over where

02:41:05.784 --> 02:41:13.000
 it is executed. Please don't 
give us a UI thread handler. It'

02:41:13.189 --> 02:41:17.584
s all under your control. It is 
obvious that we tied those two 

02:41:17.585 --> 02:41:20.917
together. You can have a 
specifier and download it in XML

02:41:21.599 --> 02:41:26.027
. We added four attributes to 
the font family tag.

02:41:42.771 --> 02:41:48.988
 Next I want to show you the 
studio team has done a great 

02:41:48.989 --> 02:41:51.704
collaboration with us. If you 
open the properties, you will 

02:41:51.705 --> 02:41:56.607
see there's a font family 
section. Usually it takes things

02:41:56.820 --> 02:42:02.159
 like this. Now if you open it, 
there you go. And you scroll all

02:42:02.443 --> 02:42:07.544
 the way to the bottom, there is
 a "more fonts" option. That 

02:42:07.545 --> 02:42:10.567
opens the new font picker. It 
will show you fonts that are 

02:42:10.568 --> 02:42:14.931
already in your project because 
you bundled them, fonts in the 

02:42:14.932 --> 02:42:19.123
Android system, and downloadable
 fonts. Right now you know 

02:42:19.124 --> 02:42:22.470
notice on the top right, we are 
ready to integrate with any 

02:42:22.471 --> 02:42:25.736
other font provider that comes 
out. Right now it shows all in 

02:42:25.737 --> 02:42:29.068
Google fonts so if you scroll, 
you will see that is the entire 

02:42:29.069 --> 02:42:33.716
catalog. Right now I want to 
search for fonts.

02:42:38.659 --> 02:42:43.393
 Android studio generates all of
 the XML for me and prerenders 

02:42:43.394 --> 02:42:45.560
it to show me what it will look 
like. 

02:42:45.561 --> 02:42:47.561
[ Applause ] 

02:42:57.216 --> 02:43:00.261
    It generated everything we 
needed, all for free. 

02:43:00.262 --> 02:43:03.393
    If you want to know more 
about the Android studio, check 

02:43:03.394 --> 02:43:08.947
out what's new in Android 
development tools today at 11:30

02:43:09.109 --> 02:43:13.010
 in the amphitheater. For more 
information, we do have a sample

02:43:13.195 --> 02:43:17.622
 app that is published on GitHub
 since yesterday.  We have 

02:43:17.623 --> 02:43:21.144
public documentation that you 
can access. The slides won't be 

02:43:21.145 --> 02:43:26.460
available until later so don't 
worry about the links. We have 

02:43:26.461 --> 02:43:29.476
documentation that will tell you
 about the Google fonts provider

02:43:29.639 --> 02:43:33.698
. One caveat, because we have 
done an integration, that is not

02:43:33.861 --> 02:43:37.354
 out to the public just yet, but
 you can join their beta through

02:43:37.493 --> 02:43:41.434
 that link over there. And get V
11 so you can play around with 

02:43:41.435 --> 02:43:46.426
it as a developer until it 
actually rolls out. Downloadable

02:43:46.935 --> 02:43:53.479
 fonts available to everyone on 
APK14 and above. Thanks  .  Next

02:43:53.772 --> 02:43:58.674
, let's talk about emoji. Have 
you ever seen one of these boxes

02:43:59.144 --> 02:44:05.350
? We call this tofu and what we 
render when we can't render what

02:44:05.351 --> 02:44:14.863
 you've asked for. Every year un
icode defines more emojis.

02:44:15.378 --> 02:44:20.187
 We can't update it and give you
 the new emojis. Maybe you will 

02:44:20.188 --> 02:44:27.220
send one to a friend with a kit 
kat device and they will never 

02:44:27.221 --> 02:44:32.694
see the emoji, so that is bad 
and we decided to fix this. 

02:44:32.695 --> 02:44:37.814
    So what we do is for each em
oji that you're trying to render

02:44:38.158 --> 02:44:42.547
, we check to see if it can 
render. If so we leave it be. If

02:44:43.076 --> 02:44:49.019
 it can't, we substitute an emoj
i span and we use available emoj

02:44:49.249 --> 02:44:52.206
i font to render that for you. 
You can bundle the font into 

02:44:52.207 --> 02:44:55.994
your app or let us use 
downloadable fonts to let us get

02:44:56.202 --> 02:45:01.319
 the latest for you from Google 
play services and Google fonts. 

02:45:01.320 --> 02:45:05.710
So when you want to use a 
downloaded configuration, you 

02:45:05.711 --> 02:45:10.015
would use a supported dependency
, create a font request which 

02:45:10.016 --> 02:45:16.342
we've just seen in downloadable 
fonts. You can get these to 

02:45:16.343 --> 02:45:20.136
actually use their fonts. And 
then you initialize with a font 

02:45:20.137 --> 02:45:23.910
request. And this tells it to go
 find the downloaded font. If 

02:45:23.911 --> 02:45:27.234
you do this in the application 
on create, then you're set. If y

02:45:27.396 --> 02:45:31.433
ou say oh, but I actually 
targeted non-Google play service

02:45:32.109 --> 02:45:36.275
 devices, that's fine.  We have 
the bundled configuration for 

02:45:36.276 --> 02:45:40.814
you. You use support emoji 
bundle dependency and that pulls

02:45:40.815 --> 02:45:44.467
 the latest font that we have at
 that moment into your APK. That

02:45:45.523 --> 02:45:49.291
 font is about 7 megabytes so be
 careful with this. And of 

02:45:49.292 --> 02:45:52.548
course once you ship your app, 
it will not get updated, so it's

02:45:52.981 --> 02:45:56.533
 up to you to ship a new update 
on your app to get the newer 

02:45:56.534 --> 02:46:01.517
fonts. 
    It's extremely easy. Set it,

02:46:01.518 --> 02:46:05.401
 initialize, and you're set. And
 then to actually use the emojis

02:46:05.580 --> 02:46:11.232
 in your app, we provided widget
s for you.

02:46:15.337 --> 02:46:19.280
 Some of you might say, Oh, but 
I have my custom class and I 

02:46:19.281 --> 02:46:22.549
don't want to use or extend this
 one. Go read the documentation.

02:46:22.751 --> 02:46:27.474
 We have very detailed stuff on 
how to integrate into your own 

02:46:27.475 --> 02:46:31.750
custom class as well. 
    Hopefully you will stop 

02:46:31.751 --> 02:46:34.114
seeing tofu, especially if queue
 ear

02:46:37.563 --> 02:46:43.164
 -- you're a messaging app. We 
have a sample app. It's 

02:46:43.165 --> 02:46:45.739
available on GitHub. We have 
public documentation on how to 

02:46:45.740 --> 02:46:51.125
use this. And because if you use
 a downloaded configuration, it 

02:46:51.126 --> 02:46:57.678
has the same caveat. Please sign
 up for the beta to play around 

02:46:57.679 --> 02:47:02.225
with that. It it is available to
 everyone on APIs 19 and above. 

02:47:02.226 --> 02:47:05.061
    Finally, I want to present 
our fourth and important feature

02:47:05.611 --> 02:47:09.598
. We've made text view auto 
sizing. What this means is you 

02:47:09.599 --> 02:47:12.849
might have run into this case 
where you have some text, care

02:47:13.203 --> 02:47:16.767
fully measured your text view, 
know it fits and the trans

02:47:17.109 --> 02:47:21.239
lations come out. You start 
seeing that your text doesn't 

02:47:21.240 --> 02:47:26.926
fit into the bounds. That's 
where auto sizing can help you. 

02:47:26.927 --> 02:47:30.103
It chooses the size of the text 
depending on the boundaries.  We

02:47:30.478 --> 02:47:34.121
 will increase your text size as
 needed to fill in its 

02:47:34.122 --> 02:47:40.041
container. Using this is really 
simple. You use this auto size 

02:47:40.042 --> 02:47:42.807
text type attribute and set it 
to uniform. What this will do is

02:47:43.290 --> 02:47:50.164
 it will scale the text on the X
 and Y axis uniformly. Some of 

02:47:50.165 --> 02:47:52.568
you may want more control.

02:47:56.702 --> 02:48:01.067
 You may give us an array of 
pre-set sizes, in which case we 

02:48:01.068 --> 02:48:08.650
will take the best match, or you
 can give us a minimum, maximum,

02:48:09.022 --> 02:48:11.762
 and a step. What we do 

02:48:15.694 --> 02:48:17.694
is

02:48:20.652 --> 02:48:27.180
 and we will snap only to the 
sizes. Now let me hand it back 

02:48:27.181 --> 02:48:32.011
to Alex to talk about 
innovations. 

02:48:32.012 --> 02:48:34.748
   Â» ALAN VIVERETTE: Now that 
we've made our apps beautiful by

02:48:35.559 --> 02:48:40.476
 switching everything to comic 
sans and adding emojis, let's 

02:48:40.477 --> 02:48:46.064
make other things more beautiful
 for graphics and animations. So

02:48:46.192 --> 02:48:50.719
 this is going to be a library 
for direct interaction and 

02:48:50.720 --> 02:48:57.043
animations in response to that. 
These are based on velocity 

02:48:57.044 --> 02:48:59.059
instead of animation.

02:49:05.340 --> 02:49:09.948
 So you want to fling something 
off the screen, and you want 

02:49:09.949 --> 02:49:14.817
velocity to do the initial touch
 movement. You can figure out a 

02:49:14.818 --> 02:49:17.711
curve that will roughly match 
what they were doing before the 

02:49:17.712 --> 02:49:21.257
animation started. It can be a 
lot of work. Going to help you 

02:49:21.258 --> 02:49:23.569
create natural looking 
animations in response to direct

02:49:23.941 --> 02:49:28.316
 user interaction. We provided 
two animations right now, spring

02:49:28.749 --> 02:49:32.221
 animation and fling animation. 
These are for behavior where you

02:49:32.555 --> 02:49:37.181
 want to drag something down and
 it snaps back and eventually 

02:49:37.182 --> 02:49:40.441
reaches an equilibrium point. 
Maybe you grab something and you

02:49:40.688 --> 02:49:43.897
 fling it off the screen and you
 want it to slow down as though 

02:49:43.898 --> 02:49:48.225
there's friction. What that 
looks like in practice is I have

02:49:48.448 --> 02:49:52.401
 an Android view and I touch it.
 As I'm pulling it down, we 

02:49:52.402 --> 02:49:56.406
start feeding touch events into 
a velocity tracker. This knows 

02:49:56.407 --> 02:49:59.641
how fast the bug Droid is going 
to be moving when I let go of it

02:49:59.846 --> 02:50:04.010
. As I'm moving it down, we're 
tracking the Y translation so 

02:50:04.011 --> 02:50:11.254
that it follows my finger. When 
I remove my FINGSer, -- finger, 

02:50:11.255 --> 02:50:14.022
we will start the spring 
animation from code, that looks 

02:50:14.023 --> 02:50:18.757
like this. We're creating a new 
spring animation, and adding the

02:50:18.962 --> 02:50:22.444
 translation Y that we've been 
using to track our user inter

02:50:22.662 --> 02:50:28.300
action. When I let go of that, I
 want it to return to 

02:50:28.301 --> 02:50:32.965
equilibrium state. It's going to
 overshoot and eventually settle

02:50:34.666 --> 02:50:42.100
 on zero translation, Y is 
equilibrium. It is how quickly 

02:50:42.334 --> 02:50:47.490
the spring is going to come to 
rest. Dampering ratio of zero 

02:50:47.710 --> 02:50:54.659
would go inif I Nate  -- 
infinitely, and high would stop 

02:50:54.660 --> 02:50:59.271
quickly. A high stiffness, when 
I pull the spring down it will 

02:50:59.272 --> 02:51:03.937
snap back immediately. A low 
would bounce back and forth 

02:51:03.938 --> 02:51:06.788
slowly like a car with low 
suspension. 

02:51:06.789 --> 02:51:10.728
    Finally, I want to pull in 
the velocity that I've been 

02:51:10.729 --> 02:51:14.026
tracking. This is the direct 
interaction portion. I'm pulling

02:51:14.240 --> 02:51:20.728
 down quickly. When I lift my 
finger up, I want it to keep 

02:51:20.729 --> 02:51:22.729
moving.

02:51:24.923 --> 02:51:30.768
 FIRNLly we start our P -- 
finally we start our animation, 

02:51:31.033 --> 02:51:35.907
and it snaps back, bounces and 
comes to rest at equilibrium. 

02:51:35.908 --> 02:51:38.809
You can check out Android 
animations spring to life 

02:51:38.810 --> 02:51:45.252
tomorrow at 2:30, stage two, 
right here. 

02:51:45.253 --> 02:51:50.173
    We've also made improvements
 to drawing with vector 

02:51:50.174 --> 02:51:54.580
drawables.  We have fill type, 
and if you've ever received an 

02:51:54.581 --> 02:51:58.665
asset from UX that has hallow 
areas in the middle, here we 

02:51:58.959 --> 02:52:02.486
have a lightbulb that has a 
single path defining the entire 

02:52:02.487 --> 02:52:10.138
area and it has some empty areas
. This looks great in photoshop.

02:52:10.294 --> 02:52:14.602
 It looks great in asset studio.
 But once you load it on to a 

02:52:14.603 --> 02:52:19.869
device running API lower than 24
, you see there's some weird art

02:52:21.061 --> 02:52:26.142
 facting at the edges. The 
reason for that is the format of

02:52:26.602 --> 02:52:31.095
 svg that gets exported uses a 
fill rule, and this defines what

02:52:31.353 --> 02:52:36.417
 the inside of our vector path 
is. So you'll notice we have a 

02:52:36.418 --> 02:52:43.246
single path that defines our 
lightbulb. We have a rule that 

02:52:43.247 --> 02:52:46.989
tells the renderer which is 
inside and which is outside fill

02:52:47.347 --> 02:52:49.347
.

02:53:08.391 --> 02:53:11.734
 You write one and it looks 
correct and nobody has to hand-

02:53:12.018 --> 02:53:15.375
edit things so you can use a 
single fill rule. 

02:53:15.376 --> 02:53:18.094
    All right. Speaking of 
vectors and parity, we're adding

02:53:18.477 --> 02:53:24.199
 parity for the ability to morph
 between different paths and 

02:53:24.200 --> 02:53:27.335
interpolate along a path.

02:53:34.041 --> 02:53:40.346
 These are new features. You 
will be using the same XML and 

02:53:40.347 --> 02:53:45.398
here for path data morphing, 
we're going to be able to take 

02:53:45.528 --> 02:53:48.937
an initial path speck, so the 
long string of letters and 

02:53:48.938 --> 02:53:52.410
numbers and commas that you may 
see if you dive down into your 

02:53:52.411 --> 02:53:57.084
vector drawable pads. One caveat
 is the path formats must match.

02:53:57.463 --> 02:54:01.219
 This is something that must be 
handled by tools.  We use the 

02:54:01.220 --> 02:54:05.936
shape shifter tool for this demo
 that we're about to show.

02:54:10.230 --> 02:54:14.204
 A very common case of morphing 
that I'm sure you'll all 

02:54:14.205 --> 02:54:17.280
familiar with in your Android 

02:54:21.002 --> 02:54:24.739
apps. So we have a vector 
drawable defining our starting 

02:54:24.740 --> 02:54:29.537
image, a buffalo. And I've ex
tracted out the path data so the

02:54:29.750 --> 02:54:32.653
 long string that defines the 
path, I pulled that into a 

02:54:32.654 --> 02:54:36.700
string resource. And we're going
 to be reuse ing it in our 

02:54:36.701 --> 02:54:40.834
animation and it makes things 
way more readable. We have the 

02:54:40.835 --> 02:54:44.696
starting vector that we want to 
animate from and we have our 

02:54:44.697 --> 02:54:49.577
object animator. The new thing 
here for API14 and above is the 

02:54:49.578 --> 02:54:52.945
ability to specify path data. So
 we're going to animate the 

02:54:52.946 --> 02:54:59.604
value from our buffalo path spec
 to our hippo. And this is going

02:55:00.146 --> 02:55:03.623
 to transform the points and 
give us the morphing animation 

02:55:03.624 --> 02:55:08.881
that we saw. We pull this all 
together into an animated vector

02:55:09.699 --> 02:55:13.029
. The target, we're taking our 
buffalo path from the drawable 

02:55:13.030 --> 02:55:16.963
and we're going to be morphing 
from a buffalo to a hippo. So 

02:55:16.964 --> 02:55:19.510
we're going to take this a 
little further and take 

02:55:19.511 --> 02:55:24.091
advantage of the feature in AAPT
 to use a bundled XML format. So

02:55:24.289 --> 02:55:28.572
 you may not have used this 
before, but ITS cool. It's 

02:55:28.573 --> 02:55:31.906
supported through AAPT, so it's 
backwards compatible. We're 

02:55:31.907 --> 02:55:37.561
going to take this and we're 
going to take our drawable and 

02:55:37.562 --> 02:55:39.562
expand that out into

02:55:51.434 --> 02:55:58.632
 -- so now we're centralizing 
things in our animal morph 

02:55:58.633 --> 02:56:02.692
bundle animal XML. If you're not
 reusing it and only need for 

02:56:02.693 --> 02:56:06.331
this animation, it can simplify 
and clean up your resources 

02:56:06.332 --> 02:56:09.163
directory. We will do the same 
thing with our animation and now

02:56:09.272 --> 02:56:12.568
 everything is neatly contained 
within one file. The only thing 

02:56:12.569 --> 02:56:16.291
we're going to reference from 
our layout or code is our animal

02:56:17.178 --> 02:56:21.322
 morph bundle drawable. And we 
don't need to keep a separate 

02:56:21.323 --> 02:56:26.228
animation XML in some other 
resources folder somewhere. If 

02:56:26.229 --> 02:56:30.808
we're trying to send, we don't 
have to bundle everything into a

02:56:31.468 --> 02:56:35.794
 ZIP and then tell everyone 
where it goes. Everything is one

02:56:35.914 --> 02:56:42.689
 file. Very clean, supported all
 the way to API14 through AAPT. 

02:56:42.690 --> 02:56:48.063
    We have back ported support 
for interpolation along a path. 

02:56:48.064 --> 02:56:52.355
And this is going to allow you 
to set the interpolator on your 

02:56:52.356 --> 02:56:56.374
object animators to be a path 
using a spec similar to what you

02:56:56.702 --> 02:57:02.368
 would use for SVG and what we 
support in vector drawable path 

02:57:02.369 --> 02:57:07.914
data. Here's an example of 
combined path morphing and 

02:57:07.915 --> 02:57:10.839
interpolation. This one is 
pretty complicated so we're 

02:57:10.840 --> 02:57:13.775
going to take a more simple 
example. 

02:57:13.776 --> 02:57:19.657
    Let's say our UX designer 
was not feeling particularly 

02:57:19.658 --> 02:57:23.010
creative, so they want us to 
shrink down a square. We're 

02:57:23.011 --> 02:57:26.454
going to shrink down fast, 
bounce back a little, and slowly

02:57:26.839 --> 02:57:31.693
 reduce it to a point. So our 
path interpolator that we use on

02:57:32.124 --> 02:57:39.963
 API14 through current 26 is 
going to look like this. We de

02:57:40.427 --> 02:57:45.179
fine a vector drawable path. If 
you render, it looks like this. 

02:57:45.180 --> 02:57:49.939
Quickly reducing from 1.0, 
bouncing back a little bit and 

02:57:49.940 --> 02:57:51.940
then slowly tapering off to 
zero.

02:58:00.534 --> 02:58:05.546
in our object animator. 
Compatible. Same XML for 14 and 

02:58:05.547 --> 02:58:11.801
26. Set our interpolate or to be
 our new path interpret lator. I

02:58:12.054 --> 02:58:15.858
 will pull everything out into 
an XML bundle because it helps 

02:58:15.859 --> 02:58:21.335
clean things up. And then we get
 this quick shrink and slow fade

02:58:22.768 --> 02:58:26.969
 to zero. 
    All right. So far all the 

02:58:26.970 --> 02:58:32.530
screen shots and video I've  
shown you are from phones but 

02:58:32.531 --> 02:58:36.823
there are a number of things 
included for form factors such 

02:58:36.824 --> 02:58:40.443
as watches and TVs.  We're 
integrating the wearable support

02:58:41.394 --> 02:58:44.367
 library into the main line 
Android support library. You 

02:58:44.368 --> 02:58:47.469
will see a number of 
improvements in core UI elements

02:58:47.682 --> 02:58:52.731
. Things like improved circular 
scrolling. Better support for 

02:58:52.732 --> 02:58:57.305
responsive layouts on round 
screens and square screens with 

02:58:57.306 --> 02:59:02.356
box inset layout.  And 
consistent user interaction 

02:59:02.357 --> 02:59:05.940
models. So you can learn more 
about developing for wear 

02:59:05.941 --> 02:59:10.337
devices at the Android wear UI 
best practices talk on this 

02:59:10.338 --> 02:59:16.166
stage on Friday at 3:30 p.m. 
tomorrow. 

02:59:16.167 --> 02:59:19.729
    We've made improvements for 
developing TV interfaces.  So 

02:59:19.730 --> 02:59:25.933
the leanback has added playback 
transport control glue. If 

02:59:25.934 --> 02:59:29.500
you're writing in interface for 
lean back, this is problem 

02:59:29.501 --> 02:59:32.367
something that was painful to do
 yourself, so we have a pre

02:59:33.245 --> 02:59:37.647
packaged seek with preview. And 
we're also allowing you to embed

02:59:37.796 --> 02:59:41.600
 a video view. If you're writing
 something for browsing media 

02:59:41.601 --> 02:59:45.515
and you want to be able to play 
that media in line while showing

02:59:45.755 --> 02:59:48.517
 people the description or 
ratings of it, that's now very 

02:59:48.518 --> 02:59:52.072
simple to do with detailed 
fragment background controller. 

02:59:52.073 --> 02:59:55.063
If you want to learn more about 
developing for TVs

02:59:58.693 --> 03:00:02.349
, you already missed that talk 
but check out office hours at 6:

03:00:02.780 --> 03:00:05.788
30 this evening in section 3. 
    So we have a number of other

03:00:06.118 --> 03:00:08.875
 smaller behavior changes and 
new classes that I think it's 

03:00:08.876 --> 03:00:15.857
important for everyone to know 
about. First of all, preference 

03:00:15.858 --> 03:00:19.931
data store. For anyone who's 
storing preferences in the cloud

03:00:20.103 --> 03:00:24.438
, you may have had to do 
something tricky if you had to 

03:00:24.439 --> 03:00:28.028
do preference manager. So this 
allows you to customize the way 

03:00:28.029 --> 03:00:33.644
that your put and get calls for 
preferences are handled. So the 

03:00:33.645 --> 03:00:37.534
implementation of this let's say
 we want to store in the cloud. 

03:00:37.535 --> 03:00:40.815
We'll extend preference data 
store, the new class, and over

03:00:41.062 --> 03:00:50.215
ride just get and put boolean. 
Because we want to be able to 

03:00:50.216 --> 03:00:53.888
retrieve a value without having 
to wait for cloud interaction, 

03:00:53.889 --> 03:00:56.450
we're going to store this 
locally as well. An important 

03:00:56.451 --> 03:00:59.693
thing to keep in mind with this 
class is that calls are going to

03:01:00.051 --> 03:01:02.821
 happen on the main thread.  If 
you're doing some long trans

03:01:02.912 --> 03:01:05.963
action, doing something in the 
cloud, persisting something to 

03:01:05.964 --> 03:01:10.484
disk, you want to do it a
synchronously and want to handle

03:01:11.120 --> 03:01:15.287
 quicks after that to get boo
lean, so something like local 

03:01:15.288 --> 03:01:19.001
caching. To set this up, we're 
going to grab our preference 

03:01:19.002 --> 03:01:23.513
manager and set an instance on 
our data store on that and all 

03:01:23.514 --> 03:01:26.719
subsequent get and pull calls 
are going to go through our new 

03:01:26.720 --> 03:01:33.324
preference data store. We also 
have changes in

03:01:38.116 --> 03:01:40.783
 transaction calls can be 
dangerous to call if you're 

03:01:40.784 --> 03:01:44.928
already in a transaction.  If 
you're already in a state change

03:01:45.245 --> 03:01:48.676
. These can have unexpected 
behavior. So we want to make it 

03:01:48.677 --> 03:01:51.979
a little bit easier to do the 
right thing, more difficult to 

03:01:51.980 --> 03:01:56.321
do the wrong thing.  And these 
will now be strictly enforced 

03:01:56.322 --> 03:02:00.532
and through exceptions if you're
 trying to do re-entrant trans

03:02:00.707 --> 03:02:03.093
action calls. 
    And for developers 

03:02:03.094 --> 03:02:06.540
interested in learning about 
their UI performance, we've 

03:02:06.541 --> 03:02:12.182
added frame metrics aggregator. 
You can get information about 

03:02:12.183 --> 03:02:17.030
rendering milestones during the 
lifecycle of a drawing frame. If

03:02:17.246 --> 03:02:21.673
 you don't know what a rendering
 milestone is or you do know and

03:02:22.089 --> 03:02:25.251
 want to know more about 
assessing the performance, you 

03:02:25.252 --> 03:02:28.895
can check out the Android 
performance UI talk.  If you 

03:02:28.896 --> 03:02:38.753
don't care but you saw Chet's 
talk and you love Chet talks,

03:02:38.911 --> 03:02:42.433
 it has Chet. So check that out 
Friday.  

03:02:42.434 --> 03:02:48.309
    And last but not least, this
 is actually from 25.3 API, but 

03:02:48.310 --> 03:02:51.525
I thought it was really 
important. Action bar drawer 

03:02:51.526 --> 03:02:56.482
toggle is a class used to 
animate or implement the 

03:02:57.168 --> 03:03:00.148
hamburger button.  The button 
that you use to open the 

03:03:00.149 --> 03:03:03.614
navigation drawer, the three 
lines.  You may have noticed in 

03:03:03.615 --> 03:03:07.755
some apps when you start to pull
 your drawer out over the 

03:03:07.756 --> 03:03:10.848
hamburger button, it animates. 
This is officially not the thing

03:03:11.030 --> 03:03:15.890
 that you're supposed to do, but
 I see a lot of apps where you 

03:03:16.187 --> 03:03:19.533
have done it and it has been 
fixed. It's wrong. We pull it 

03:03:19.534 --> 03:03:23.369
and the hamburger turns just a 
little bit. Some lettuce is 

03:03:23.370 --> 03:03:26.533
falling out. It wasn't quite 
right. Maybe you fixed it. Maybe

03:03:26.685 --> 03:03:30.038
 the way that you fixed it took 
a couple hundred lines because 

03:03:30.039 --> 03:03:36.189
it was really difficult to do? 
Don't do that. Stop that. And 

03:03:36.190 --> 03:03:39.920
instead do this. We now have one
 line to disable the drawer 

03:03:39.921 --> 03:03:43.785
slide animation and get the 
correct behavior. So use that.

03:03:54.150 --> 03:03:56.150
talks.

03:04:00.751 --> 03:04:05.058
 Here is a list of all of the 
ones we have coming up.

03:04:11.546 --> 03:04:15.558
 So thanks, everybody. 
   Â» CLARA BAYARRI: Thank you. 

03:04:15.559 --> 03:04:17.589
   Â» ALAN VIVERETTE: We'll be 
around for questions after  

03:04:21.405 --> 03:04:22.650
wards. 
[ Applause ]  

03:04:22.651 --> 03:04:24.651
[ session concluded ]

03:04:29.246 --> 03:04:29.574
. 

03:13:38.677 --> 03:13:40.677
 #3469D

03:27:59.287 --> 03:28:01.287
 #1KW

03:28:17.535 --> 03:28:19.245
 . 

03:28:23.519 --> 03:28:27.531
morning. How's everybody doing? 
Welcome. Welcome. Okay. Hi. My 

03:28:27.532 --> 03:28:31.261
name is Owen Campbell-Moore. I'm
 a product manager on the Chrome

03:28:31.469 --> 03:28:34.820
 team, and I work to make sure 
that the web is the best 

03:28:34.821 --> 03:28:38.981
platform that it can possibly be
 for both developers and users.

03:28:43.779 --> 03:28:47.616
 Today I'm going to talk about 
creating user experiences that 

03:28:47.617 --> 03:28:50.263
just feel right and doing that 
with progressive web apps.

03:28:53.933 --> 03:28:57.590
 Before I jump in to talk about 
UX, I want to take a moment to 

03:28:57.591 --> 03:29:00.994
talk about why I think the web 
is such an exciting and 

03:29:00.995 --> 03:29:04.259
fascinating platform to build 
for as developers.

03:29:07.679 --> 03:29:11.244
 You all heard yesterday in the 
keynote how Chrome has more than

03:29:11.448 --> 03:29:16.449
 2 billion monthly active users,
 which is a huge number, and 

03:29:16.450 --> 03:29:19.515
that's just Chrome alone.  When 
we look at the whole spectrum of

03:29:19.807 --> 03:29:24.021
 the web, we see there are over 
5 billion devices running web 

03:29:24.022 --> 03:29:27.519
browsers. This means if you're 
building for the web, there's 

03:29:27.520 --> 03:29:31.618
this incredible, large potential
 addressable audience that you 

03:29:31.619 --> 03:29:36.040
have, amazing potential reach. I
 think that's a really 

03:29:36.041 --> 03:29:42.534
fascinating and unique property 
that the web has. And there's 

03:29:42.535 --> 03:29:46.394
been a huge rate of development 
over the past pew years.  

03:29:46.395 --> 03:29:50.777
Performance has gotten so much 
better. In the last year alone, 

03:29:50.778 --> 03:29:57.204
JavaScript performance on Chrome
 for Android is now 35% faster. 

03:29:57.205 --> 03:30:03.151
So I think that these 
improvements mean that it's 

03:30:03.152 --> 03:30:05.239
possible to do a lot more than 
was previously possible. 

03:30:05.240 --> 03:30:07.794
    Another thing that I love 
about the web is how it's 

03:30:07.795 --> 03:30:10.562
fundamentally open. There's no 
one company that's in control 

03:30:10.563 --> 03:30:14.277
and decides what happens on the 
web. It's thousands of 

03:30:14.278 --> 03:30:18.885
developers across lots of 
different companies and web 

03:30:18.886 --> 03:30:19.725
browsers and open standards 
organizations that are all 

03:30:19.726 --> 03:30:27.235
working together to push the web
 forward. And it's really been 

03:30:27.236 --> 03:30:31.202
designed over the past years why
 users should be able to click 

03:30:31.203 --> 03:30:33.590
one link and immediately have 
that content streamed to them so

03:30:33.787 --> 03:30:39.457
 they can access it instantly. 
No need to bundle up 10, 20 

03:30:39.458 --> 03:30:43.177
megabytes of resources, upload 
them to a store and have users 

03:30:43.178 --> 03:30:46.020
go through some kind of install 
process to download and get that

03:30:46.172 --> 03:30:49.340
 on to their device. That's a 
really fascinating property for 

03:30:49.341 --> 03:30:54.658
the platform in part because it 
means that your users can 

03:30:54.659 --> 03:30:56.905
potentially tap a link and be in
 the experience immediately, 

03:30:56.906 --> 03:31:01.700
which means you can reach a lot 
more users. And from a purely 

03:31:01.701 --> 03:31:09.468
business perspective, it mean s 
acquisition costs are lower. So 

03:31:09.469 --> 03:31:12.551
we have seen a huge shift to 
mobile. In particular, this has 

03:31:12.552 --> 03:31:16.697
been interesting because native 
has really been great on mobile.

03:31:17.212 --> 03:31:25.468
 It's takinged a VAJ -- taking 
advantage of the unique 

03:31:25.469 --> 03:31:28.681
capabilities.  Before there was 
no way that the user was able to

03:31:28.996 --> 03:31:33.932
 get push notifications and home
 screen icon and all of these 

03:31:33.933 --> 03:31:36.851
aspects that allow users to come
 back over and over again. That

03:31:37.056 --> 03:31:43.155
's been a big focus for us in 
the last few years. In addition.

03:31:45.000 --> 03:31:48.600
 The shift to mobile has been a 
big shift in interaction. 

03:31:48.601 --> 03:31:53.582
Previously on desktop, users had
 keyboard and a mouse.

03:32:00.853 --> 03:32:04.298
 Now users are dragging and 
swiping and interacting with 

03:32:04.299 --> 03:32:06.929
things on the screen. So the 
quality has to be that much 

03:32:06.930 --> 03:32:09.790
higher, so when the user is 
physically manipulating 

03:32:09.791 --> 03:32:13.142
something on the screen, it has 
to respond and do what they 

03:32:13.143 --> 03:32:16.668
expect to create a good 
experience. So this is what I'm 

03:32:16.669 --> 03:32:19.999
going to be talking about today.
 Specifically how do we design 

03:32:20.000 --> 03:32:24.492
for the web, especially for 
mobile devices? So this will 

03:32:24.493 --> 03:32:30.982
build upon principles of good 
mobile design and good design.

03:32:42.029 --> 03:32:47.520
build user SPEERPS  experiences 
that just feel right on mobile 

03:32:47.521 --> 03:32:50.224
devices. To dig into that, we 
have had experiences on the web 

03:32:50.225 --> 03:32:53.608
where we open a page and we're 
scrolling and it's not really 

03:32:53.609 --> 03:32:57.308
responding and we tap it and it 
feels slow and old fashioned. So

03:32:57.521 --> 03:33:02.711
 this is a common emotion and 
feeling on lots of

03:33:07.030 --> 03:33:10.763
 websites. Those are the 
symptoms and can we dig in and 

03:33:07.030 --> 03:33:08.397
understand the symptoms and 
understand the causes for those 

03:33:08.398 --> 03:33:14.069
such that we can work out how to
 go and address them? And so the

03:33:14.229 --> 03:33:17.628
 first common symptom that we 
see is that sites often aren't 

03:33:17.629 --> 03:33:22.419
reactive. So here you can see 
I'm tapping a link on developers

03:33:22.961 --> 03:33:27.797
.Google.com and I'm waiting and 
waiting. And I'm on a mobile 

03:33:27.798 --> 03:33:32.453
device and who knows what the 
network is like this is in 

03:33:32.454 --> 03:33:35.253
contrast to when things were 
developed on desktop and 

03:33:35.254 --> 03:33:39.474
probably this was developed on a
 desktop device where they were 

03:33:39.475 --> 03:33:43.142
running a local server and they 
tapped the button and in half a 

03:33:43.143 --> 03:33:46.450
second, it was there and it was 
fine. But in the real world, 

03:33:46.451 --> 03:33:51.747
that's not the case. Often sites
 don't feel 

03:33:55.019 --> 03:34:01.253
reactive. So here you can see 
we're looking at the Google iO. 

03:34:01.254 --> 03:34:05.368
It's not responding -- it's not 
swiping away.

03:34:14.186 --> 03:34:18.688
 They think a pull sign and a 
handle, and that's what all the 

03:34:18.689 --> 03:34:23.342
others have, so that will be 
good. And that's something that 

03:34:23.716 --> 03:34:25.988
we often see on the web.

03:34:42.419 --> 03:34:45.505
content appears and loads in 
elsewhere on the page this is 

03:34:45.506 --> 03:34:49.267
also a very common experience 
this we've seen. And it's a big 

03:34:49.268 --> 03:34:52.995
problem. Another good example of
 whether a user is in control is

03:34:53.097 --> 03:34:58.206
 if they are on a list of 
products on an E commerce site, 

03:34:58.207 --> 03:35:00.555
they tap an item and realize 
they tapped the wrong one.

03:35:16.435 --> 03:35:19.913
 Do I need to hit back again 
what's going on. This will turn 

03:35:19.914 --> 03:35:24.660
a minor mistake where they leave
 the whole site. They hit back 

03:35:24.661 --> 03:35:28.903
too many times so often users 
are not in control. These are 

03:35:28.904 --> 03:35:32.015
some of the big issues that we 
see. So today I want to share a 

03:35:32.016 --> 03:35:39.595
secret with all of you. Are you 
all ready? So the secret is that

03:35:39.596 --> 03:35:46.035
 websites can feel amazing. So 
this is actually a pretty well 

03:35:46.036 --> 03:35:48.036
kept secret, I think. So

03:35:51.420 --> 03:35:55.686
 there's a huge amount, like the
 history of the web means there 

03:35:51.420 --> 03:35:53.904
is a huge amount of legacy 
content.

03:36:10.354 --> 03:36:13.511
 People think this is how the 
web is, this is how it feels, 

03:36:13.512 --> 03:36:17.180
how it must be. If you take away
 one thing, it's that websites 

03:36:17.181 --> 03:36:21.489
can feel amazing and can do more
. And here's a great example of 

03:36:21.490 --> 03:36:24.728
a web app that I think does a 
lot more. So here we have 

03:36:24.729 --> 03:36:28.382
Twitter.com. They recently 
launched this as a progressive 

03:36:28.383 --> 03:36:31.624
web app a couple months ago so 
you can try it on your mobile 

03:36:31.625 --> 03:36:35.209
device. And you can see it's 
capping the tabs, very 

03:36:35.210 --> 03:36:38.747
responsive. I can tap compose, 
tap through all of the tweets, 

03:36:38.748 --> 03:36:44.452
and this is simulated on a very 
slow 2 or 3G network and it all 

03:36:44.453 --> 03:36:47.642
feels really good. And you can 
actually see that it's running 

03:36:47.954 --> 03:36:52.748
and it's in an immersive mode. 
No distracting browser UI. That

03:36:52.903 --> 03:36:56.309
's another feature of the 
progressive web app.

03:37:01.370 --> 03:37:05.319
 It runs in a rich immersive 
mode, which creates a nice 

03:37:05.320 --> 03:37:09.000
experience. This is a nice 
example of what's possible.

03:37:15.825 --> 03:37:17.967
ive web app. At the core, they 
are just radically better web 

03:37:17.968 --> 03:37:21.924
experiences, and they are 
fundamentally enabled by a new 

03:37:21.925 --> 03:37:25.390
set of browser standardized 
capabilities and APIs

03:37:29.150 --> 03:37:33.283
 that have been shipped over the
 past few years. For example, 

03:37:29.150 --> 03:37:34.175
service worker is an amazing new
 API that allows websites to 

03:37:34.176 --> 03:37:36.572
fundamentally take control of 
the networking on the page in 

03:37:36.573 --> 03:37:38.573
order to make it per for

03:37:41.665 --> 03:37:47.444
 -- performant even if the user 
is offline. You can keep a 

03:37:47.445 --> 03:37:52.910
stored copy of the app on the 
user's device.  You're not 

03:37:52.911 --> 03:37:56.403
downloading the whole app every 
time they browse to it. 

03:37:56.404 --> 03:37:59.949
    And another thing that I 
think is important about 

03:37:59.950 --> 03:38:04.857
progressive web apps besides the
 capabilities of the technical 

03:38:04.858 --> 03:38:07.169
aspects is the idea of a label.

03:38:13.857 --> 03:38:16.551
 We can say these are 
progressive web apps, these are 

03:38:16.552 --> 03:38:20.645
great experiences.  We can reset
 expectations for ourselves and 

03:38:20.646 --> 03:38:24.126
our companies and for our users 
that things can be great. So 

03:38:24.127 --> 03:38:31.903
that's one of the reasons why I 
think PWA is so exciting. 

03:38:31.904 --> 03:38:34.659
    We have had the great 
opportunity to work with some of

03:38:34.939 --> 03:38:39.503
 the world's best developers in 
rebuilding their mobile sites as

03:38:40.059 --> 03:38:43.492
 progressive web apps or coming 
to the web for the first time 

03:38:43.493 --> 03:38:50.117
like Twitter launching Twitter l
ite to Lyft and their PWA as 

03:38:50.118 --> 03:38:53.719
well. We have had a chance to 
look at the common problems and 

03:38:53.720 --> 03:38:58.183
work out what works well, and we
 boiled down three key 

03:38:58.184 --> 03:39:02.132
principals that we call the fee-
good principals that we think 

03:39:02.133 --> 03:39:05.103
explain what makes a web 
experience feel good to users as

03:39:05.445 --> 03:39:08.739
 they're using it. So the first 
principle is reactive. Sites 

03:39:08.938 --> 03:39:14.415
should be reactive to users' in
put. Really the word responsive 

03:39:14.545 --> 03:39:17.529
would have been better in there 
but responsive web design is 

03:39:17.530 --> 03:39:21.622
already a thing.  So reactive is
 the word we're using today. 

03:39:21.623 --> 03:39:26.165
    Secondly, a site should be 
predictable and should offer pre

03:39:28.815 --> 03:39:32.626
DIKTable user experiences. And 
thirdly, users should always be 

03:39:32.627 --> 03:39:35.282
in control of their experience. 
So let's dig into this first one

03:39:35.418 --> 03:39:39.625
, reactive. Sites should be 
reactive to users' input. When 

03:39:39.626 --> 03:39:42.666
we talk about reactivity, I 
think first it's important to 

03:39:42.667 --> 03:39:46.522
think about perceived 
performance.

03:39:50.487 --> 03:39:55.305
 This is a quote that I loved. A
 classic paper in the fields 

03:39:55.306 --> 03:40:00.046
which says human perception of 
time is fluid and can be 

03:40:00.047 --> 03:40:02.727
manipulated in purposeful and 
productive ways. This is a quote

03:40:03.329 --> 03:40:08.006
 that comes from a great paper 
about designing loading bars and

03:40:08.168 --> 03:40:10.733
 about how to create good 
experiences of loading bars that

03:40:10.939 --> 03:40:13.844
 make users feel like the 
experience is really fast and a

03:40:14.031 --> 03:40:19.589
void them feeling frustrated. 
And then research has 

03:40:19.590 --> 03:40:23.380
demonstrated that user 
perception of time is fluid. So 

03:40:23.847 --> 03:40:27.591
as we're thinking about building
 reactive websites, we should 

03:40:27.592 --> 03:40:30.475
think about how users perceive

03:40:34.828 --> 03:40:36.828
 loading.

03:40:43.283 --> 03:40:47.817
 So the first example I want to 
show is kind of like what we saw

03:40:48.214 --> 03:40:52.703
 before. A transition that's 
blocked on the network. You can 

03:40:52.704 --> 03:40:55.581
see me tapping a listing and I'm
 waiting an indeterminate amount

03:40:56.021 --> 03:41:00.116
 of time until the next page 
appears. So this can be 

03:41:00.117 --> 03:41:05.949
frustrate ing here we can see 
what housing.com, the PWA here, 

03:41:05.950 --> 03:41:09.663
has done. When a user taps on 
the listing, they're immediately

03:41:09.823 --> 03:41:11.640
 taken to the next screen.  The 
information that was known 

03:41:11.641 --> 03:41:14.992
before, the image and title is 
reused on the next screen, and 

03:41:14.993 --> 03:41:18.978
the user is given an idea of the
 structure of the page so they 

03:41:18.979 --> 03:41:24.698
can start understanding that, 
take a few seconds to process 

03:41:24.699 --> 03:41:28.020
that WHILS the process is 
happening. So this is a 

03:41:28.021 --> 03:41:30.774
improvement in user experience 
and a pa tern we have seen 

03:41:30.775 --> 03:41:36.594
successfully used across lots of
 progressive web apps.

03:41:44.837 --> 03:41:48.085
 finding that touch feed back is
 not responding to users' input.

03:41:48.491 --> 03:41:55.867
 I'm tapping on the demo button.
 It is an implementation for the

03:41:56.686 --> 03:41:59.846
 react framework. As I'm 
tapping, this should be a 

03:41:59.847 --> 03:42:02.318
material button and there should
 be a ripple and if you look at 

03:42:02.319 --> 03:42:06.587
the code, there is a ripple. But
 when you go on a low end phone 

03:42:06.588 --> 03:42:11.131
and tap it, there's no. Why? To 
understand this, let's take a 

03:42:11.132 --> 03:42:14.829
look at a simplification of the 
code for how this would look. 

03:42:14.830 --> 03:42:18.592
Here we have the button and we 
add an event listener. When the 

03:42:18.593 --> 03:42:21.833
user clicks on the button, we 
will add a class to the button. 

03:42:21.834 --> 03:42:26.928
This class will trigger the 
animation, and then we call 

03:42:26.929 --> 03:42:33.847
render_next. Now the problem 
here is when you actually set a 

03:42:33.848 --> 03:42:37.857
class on something in JavaScript
, it doesn't actually happen 

03:42:37.858 --> 03:42:43.369
immediately. And in this case 
the render_next screen code is 

03:42:43.370 --> 03:42:48.667
blocking the main thread. It's 
doing so much busy work that the

03:42:48.668 --> 03:42:51.013
 change to the class doesn't get
 time to be applied. So this is 

03:42:51.014 --> 03:42:54.073
kind of a weird quirk that we 
have. But it's fairly simple to 

03:42:54.074 --> 03:42:59.723
solve. The way to solve it is to
 use this trick TLA we call a 

03:42:59.724 --> 03:43:02.337
double request animation frame. 
So here what we're doing is 

03:43:02.338 --> 03:43:07.004
after we add that class, we say 
to the browser, Hey, wait until 

03:43:07.005 --> 03:43:10.578
the next frame and then we say 
wait until the next frame again 

03:43:10.579 --> 03:43:13.850
and then start rendering the 
next screen. It ensures that the

03:43:14.315 --> 03:43:16.632
 CSS change has been aPLID

03:43:19.661 --> 03:43:23.255
 plied. It's made it to the 
process.  When we call render 

03:43:23.256 --> 03:43:26.921
next screen, it can block, but 
animation is already going and 

03:43:26.922 --> 03:43:30.610
it won't be blocked by that work
. So this is a really good trick

03:43:30.917 --> 03:43:34.139
 that I'd recommend you think 
about when you're implementing 

03:43:34.140 --> 03:43:37.638
tabs or buttons or anything that
 the user should expect to get a

03:43:37.950 --> 03:43:40.591
 response from. Think about 
using this to make sure that 

03:43:40.592 --> 03:43:44.311
things don't get blocked. If 
you're testing your site always 

03:43:44.312 --> 03:43:49.314
on the latest pixel or the 
latest iPhone or your desktop, 

03:43:49.315 --> 03:43:52.285
you often don't notice the 
issues.  But when you try them 

03:43:52.286 --> 03:43:56.437
on the low end devices that a 
lot of users are using, these 

03:43:56.438 --> 03:43:57.721
issues can really become a 
problem. 

03:43:57.722 --> 03:44:02.332
    So here we can see the page 
where the fix applied and 

03:44:02.333 --> 03:44:05.337
tapping the demo button and 
there's a nice material ripple, 

03:44:05.338 --> 03:44:07.338
as you would expect.

03:44:16.707 --> 03:44:23.095
infinite lists. Sites like 
Twitter or Facebook or Tumblr 

03:44:23.096 --> 03:44:26.705
often let you scroll infinitely 
through a list. Here I have a 

03:44:26.706 --> 03:44:32.153
page with 1,000 of the rows and 
I try to scroll through it, and 

03:44:32.154 --> 03:44:34.154
it's rendering

03:44:38.266 --> 03:44:38.829
 blank for a lot of it, which is
 weird.  When I was writing code

03:44:38.830 --> 03:44:40.937
 to keep adding limits to the 
page, it got really sluggish and

03:44:41.190 --> 03:44:48.273
 slow and the memory got really 
large. If you go to a site that 

03:44:48.274 --> 03:44:51.666
uses one of these and watch the 
memory information, you can see 

03:44:51.667 --> 03:44:55.956
these sometimes take multiple 
gigabytes of memory, which 

03:44:55.957 --> 03:44:59.282
grinds everything to a halt this
 is a problem that we need to be

03:44:59.283 --> 03:45:03.950
 thoughtful about. There's a 
solution to this, which is to 

03:45:03.951 --> 03:45:06.123
use virtualized lists.  When 
that component goes off the 

03:45:06.124 --> 03:45:10.630
screen, it's actually removed 
from the DOM, removed from the 

03:45:10.631 --> 03:45:15.647
page.  Really only the things 
within view and a few on either 

03:45:15.648 --> 03:45:19.305
side are rendered. This is a 
page with 100,000 elements on 

03:45:19.423 --> 03:45:22.828
it. This can really scale very 
well and was a key that Twitter 

03:45:22.829 --> 03:45:26.859
found when they were building 
Twitter Lite that was key to 

03:45:26.860 --> 03:45:29.490
make sure that their list 
scrolls really well and the user

03:45:29.632 --> 03:45:34.045
 can sit there and use Twitter 
very a long time. So a 

03:45:34.046 --> 03:45:35.946
virtualized list is a great tool
. 

03:45:35.947 --> 03:45:38.780
    Next, one of the big 
questions that we get when we 

03:45:38.781 --> 03:45:42.466
talk about building reactive 
websites is how do I do native U

03:45:42.650 --> 03:45:47.502
I on the web? For Android 
developers, that means how do I 

03:45:47.503 --> 03:45:52.030
do material on the web? I want 
to give a quick shout out to a 

03:45:52.031 --> 03:45:55.655
few implementations. At the top 
we have the polymer elements. 

03:45:55.656 --> 03:46:01.723
This is a set of elements built 
by Google, built by the Polymer 

03:46:01.724 --> 03:46:03.724
team.

03:46:08.893 --> 03:46:10.893
 If you're interested in

03:46:13.884 --> 03:46:18.135
 react, you can check that out 
as well. If you want to be a bit

03:46:18.136 --> 03:46:20.647
 more framework agnostic, then 
Google has published the 

03:46:20.648 --> 03:46:26.578
material components for web, and
 these framework with vanilla CS

03:46:26.791 --> 03:46:30.429
S and pull them into any project
 you're working on. 

03:46:30.430 --> 03:46:33.595
    Now I can't really talk 
about building reactive websites

03:46:33.828 --> 03:46:36.499
 without touching on load 
performance. Since the first 

03:46:36.500 --> 03:46:39.906
time a user comes to a site, the
 first experience is part of it 

03:46:39.907 --> 03:46:43.144
being reactive to what they're 
trying to do. And so here on the

03:46:43.377 --> 03:46:49.951
 left we can see the improvement
 that the major company OLX saw 

03:46:49.952 --> 03:46:53.345
in India when they launched 
their progressive web app and 

03:46:53.346 --> 03:46:57.552
used some of the patterns. There
 are techniques that I recommend

03:46:57.641 --> 03:47:02.211
 you look up. The first is the P
RPL pattern, a way of ensuring 

03:47:02.212 --> 03:47:06.429
that you're loading and reusing 
resources effectively to make 

03:47:06.430 --> 03:47:09.304
everything fast. Secondly is 
service worker caching. That is 

03:47:09.305 --> 03:47:15.165
one of the new standardized APIs
 that has been added to the web 

03:47:15.166 --> 03:47:18.177
that allows controlling of the 
network. This is good for when 

03:47:18.178 --> 03:47:22.175
the user comes back to your side
 and you can have the resources 

03:47:22.176 --> 03:47:25.834
available on the device.  And 
third, service side rendering. 

03:47:25.835 --> 03:47:30.051
People are building a lot richer
 experiences on the web. They're

03:47:30.287 --> 03:47:34.462
 very app-like, have a big frame
 work and lots of resources and 

03:47:34.463 --> 03:47:37.403
sometimes this means to get that
 first render you have to 

03:47:37.404 --> 03:47:40.809
download all of those resources,
 then it's going to be a slow 

03:47:41.246 --> 03:47:44.262
first render. So there's a 
technique where you can render 

03:47:44.263 --> 03:47:47.753
the first view on the server and
 send that down and hydrate it 

03:47:47.754 --> 03:47:51.037
on the client once the other 
resources have been loaded and 

03:47:51.038 --> 03:47:53.315
make it interactive.

03:47:57.708 --> 03:48:01.214
 FF . 
    Given that we're talking 

03:48:01.215 --> 03:48:06.489
about design, I think it's 
important to touch on fonts. 

03:48:06.490 --> 03:48:11.437
Fonts are a valuable tool for 
create ing the great 

03:48:11.794 --> 03:48:14.469
experiencings. But on the web, 
there's a common problem where 

03:48:14.470 --> 03:48:19.247
fonts can be a megabyte, two 
megabytes in size.  If you want 

03:48:19.248 --> 03:48:22.935
to rely on that font for the 
first load of your application, 

03:48:22.936 --> 03:48:24.936
you can end up with something 
like you see here, everything is

03:48:25.438 --> 03:48:29.158
 downloaded, all of the text is 
there, but the font is not yet 

03:48:29.159 --> 03:48:32.724
downloaded so it's unstyled. It
's blank. This is a big problem.

03:48:33.270 --> 03:48:37.003
 There are a couple of things I 
would recommend thinking about. 

03:48:37.004 --> 03:48:41.991
Firstly, consider using device 
fonts.  These days devices ship 

03:48:41.992 --> 03:48:45.156
with a large set of default 
fonts.  By choosing between them

03:48:45.387 --> 03:48:50.793
, you can get a good artistic 
expression. If a custom font is 

03:48:50.794 --> 03:48:55.240
really important for you for a 
header or a logo, consider using

03:48:56.025 --> 03:49:05.248
 an img or svg. Off then these 
can be 10kilobyte instead of a 

03:49:05.249 --> 03:49:09.601
megabyte. And then use custom 
fonts but use them on subsequent

03:49:10.462 --> 03:49:14.144
 loads. Once available, use them
. Until they are available, make

03:49:14.530 --> 03:49:16.963
 sure they're not.  If you're 
pulling from Google fonts, there

03:49:17.119 --> 03:49:20.131
's an option that lets you do 
this. Keep your eye out for this

03:49:20.316 --> 03:49:24.017
. Make sure you're trying your 
site and first load on slow net

03:49:25.750 --> 03:49:31.066
works and checking how the fonts
 are working. I have given a 

03:49:31.067 --> 03:49:34.240
bunch of tips. Now I want to 
share tools to make it easier to

03:49:34.472 --> 03:49:36.253
 make sure you're hitting all of
 these. 

03:49:36.254 --> 03:49:39.373
    The first is lighthouse. It 
doesn't do all of the things 

03:49:39.374 --> 03:49:43.344
that we've talked about in terms
 of helping the skeleton screens

03:49:43.345 --> 03:49:46.808
 and responsive touch input, but
 it does help a lot with many 

03:49:46.809 --> 03:49:50.469
aspects and we're building on it
 rapidly. So lighthouse is a new

03:49:50.673 --> 03:49:54.561
 Chrome extension BILD built by 
the Chrome team that you are a 

03:49:54.562 --> 03:49:57.817
run on any page that gives you a
 personalized report that 

03:49:57.818 --> 03:50:00.644
explains how all the differents 
a pecks are working and gives 

03:50:00.645 --> 03:50:05.615
you pointers about areas you 
should look at, areas of 

03:50:05.616 --> 03:50:10.644
opportunity. 
    There are another couple 

03:50:10.645 --> 03:50:15.131
tools worth mentioning. This is 
another tool. And web page test 

03:50:15.132 --> 03:50:18.236
is a great non-Google tool that 
helps you say, you know, what

03:50:21.497 --> 03:50:25.319
's the experience like of 
loading my website on a Moto4G 

03:50:25.320 --> 03:50:28.466
on Bangalore. It will give you 
video and help you see how that

03:50:28.883 --> 03:50:32.773
's working.  So this is a really
 powerful tool for understanding

03:50:33.006 --> 03:50:37.214
 real world how users would 
experience your site. 

03:50:37.215 --> 03:50:40.985
    So that was a bit how to 
make sure your site is reactive 

03:50:40.986 --> 03:50:45.343
to the users' input. Next I want
 to talk about how to make sure 

03:50:45.344 --> 03:50:48.837
it's predictable and that your 
user experiences are 

03:50:48.838 --> 03:50:52.004
understandable. So here we saw 
the example earlier of a 

03:50:52.005 --> 03:50:55.389
hamburger menu that the user is 
trying to swipe away and it 

03:50:55.390 --> 03:50:59.036
doesn't swipe. So this is a 
problem. And here instead we can

03:50:59.298 --> 03:51:05.589
 see the progressive web app 
recently launched by wego. This 

03:51:05.590 --> 03:51:11.276
was built using polymer. I'm 
able to drag and fling and it 

03:51:11.277 --> 03:51:16.383
works just like you'd expect. So
 here's another example similar 

03:51:16.384 --> 03:51:21.275
to the ham berger menu there are
 tabs on the side and I'm trying

03:51:21.276 --> 03:51:26.464
 to swipe between the tabs, but 
it's not working. This is a 

03:51:26.465 --> 03:51:31.664
confusing experience. So instead
 of that, here's the page for 

03:51:31.665 --> 03:51:37.868
react swipable views, which is a
 perfomant way of having the 

03:51:37.869 --> 03:51:40.558
swipable views in your 
application. Check this out if 

03:51:40.559 --> 03:51:44.155
you're looking at doing swipable
 views for some reason. 

03:51:44.156 --> 03:51:46.852
    But there's another tip that
 I like to think about when 

03:51:46.853 --> 03:51:49.960
thinking about navigation, which
 is sometimes it's best just to 

03:51:49.961 --> 03:51:53.154
keep it simple. With both the 
hamburger menu and with the tabs

03:51:53.339 --> 03:51:57.944
, we have this implication of 
gesture navigation, which can be

03:51:58.319 --> 03:52:01.644
 challenging to do a good job of
 especially if you're interested

03:52:01.889 --> 03:52:06.435
 in serving users on low end 
devices. The hamburger menu has 

03:52:06.436 --> 03:52:10.977
a number of usability problems 
around discoverability of the 

03:52:10.978 --> 03:52:14.058
items in the menu. Sometimes it
's best to keep it simple. There

03:52:14.535 --> 03:52:19.056
's a pattern called a button 
navigation which doesn't have 

03:52:19.057 --> 03:52:24.875
the same implications of 
gestural. It's more 

03:52:24.876 --> 03:52:28.083
discoveriable because they can 
see immediately what's available

03:52:28.178 --> 03:52:32.283
. Think about keeping it simple 
with bottom navigation instead 

03:52:32.284 --> 03:52:34.283
of going deep in the other areas
. 

03:52:34.284 --> 03:52:37.135
    So the next aspect of pre

03:52:42.082 --> 03:52:49.816
 -- predictability. So the blue 
flash? It's an excellent super 

03:52:49.817 --> 03:52:54.200
hero name for one. I'm tapping 
to dismiss it and the screen is 

03:52:54.201 --> 03:52:59.251
flashing blue in that area. So 
why is this happening? This 

03:52:59.252 --> 03:53:04.776
turns out again to be due to the
 legacy content on the web we 

03:53:04.777 --> 03:53:08.033
had this big problem in the 
early days oTF web where the 

03:53:08.034 --> 03:53:12.025
user would tap and then they 
would be stuck waiting. So we 

03:53:12.026 --> 03:53:15.939
made a decision to have links go
 blue for a brief amount of time

03:53:16.239 --> 03:53:20.792
 so the user knows that their 
tap was recognized and they know

03:53:20.793 --> 03:53:22.722
 they need to wait. But these 
days when we're building these 

03:53:22.723 --> 03:53:27.261
rich experiences that are going 
to be responding to user input 

03:53:27.262 --> 03:53:32.481
immediately, this blue flash is 
really just a DI  distraction 

03:53:32.482 --> 03:53:35.830
and it takes away from the de
sign.  If you want a blue flash,

03:53:36.052 --> 03:53:42.221
 great. You get one by default. 
If you don't, it's easy to fix. 

03:53:42.222 --> 03:53:50.101
Just add this one line of code. 
So this makes the blue flash 

03:53:50.102 --> 03:53:53.644
transparent. So this is just a 
small example of the polish that

03:53:53.645 --> 03:53:56.430
 you can bring to your websites.

03:53:56.431 --> 03:53:59.703
    Now thirdly, the user should
 always be in control when

03:54:03.173 --> 03:54:06.148
 they're on your site. And so 
earlier we saw this example of 

03:54:06.149 --> 03:54:09.012
loading an article and it 
jumping out from underneath us, 

03:54:09.013 --> 03:54:13.982
which is a common experience 
that we've all had.  So the 

03:54:13.983 --> 03:54:16.258
alternative to that is what we 
call the stable load. This is 

03:54:16.259 --> 03:54:19.692
where images and dynamic 
components have their size pre

03:54:20.244 --> 03:54:24.006
determined such that the browser
 knows how to lay out everything

03:54:24.241 --> 03:54:26.535
 on the screen even before 
they're downloaded. So this is 

03:54:26.536 --> 03:54:31.737
the solution just specify those 
sizes. And it really allows the 

03:54:31.738 --> 03:54:38.298
user to ininterpret the page 
better and not tap on the wrong 

03:54:38.299 --> 03:54:42.824
thing. 
    Another case where I 

03:54:42.978 --> 03:54:44.709
personally find them taken out 
of context and diverted is 

03:54:44.710 --> 03:54:48.120
sometimes with permissions on 
the web. This is a pattern that 

03:54:48.121 --> 03:54:52.482
I'm seeing a lot at the moment 
where I will land on an 

03:54:52.483 --> 03:54:55.066
e-commerce site or news site and
 the first thing I see is a bar 

03:54:55.067 --> 03:55:00.764
at the bottom saying the website
 wants to send you 

03:55:00.765 --> 03:55:02.120
notifications. 
    At this point the user 

03:55:02.121 --> 03:55:04.336
doesn't have context to make the
 decision and they don't know 

03:55:04.337 --> 03:55:08.647
what you're going to send 
notifications about. You 

03:55:08.648 --> 03:55:10.828
probably have multiple calls to 
action on the page, so it's 

03:55:10.829 --> 03:55:13.897
unclear what we're expecting 
users to do at this point. 

03:55:13.898 --> 03:55:18.757
Instead, I really like what 
Twitter has done, which is where

03:55:19.156 --> 03:55:22.189
 when you tap on their 
notifications tab, if you have 

03:55:22.190 --> 03:55:28.402
not enabled them, they show a 
full screen overlay asking the 

03:55:28.403 --> 03:55:30.303
user if they want to opt in. 
Incidentally, push notifications

03:55:30.304 --> 03:55:37.324
 are one of the new standardized
 features brought by progressive

03:55:37.325 --> 03:55:39.514
 web apps so you can build 
experiences that can send native

03:55:39.515 --> 03:55:43.637
 notifications on Android and 
desktop that look and feel just 

03:55:43.638 --> 03:55:48.174
as you would expect. 
    So these were the feel good 

03:55:48.175 --> 03:55:55.781
principles. Reactive to user's 
input, predictable user 

03:55:55.782 --> 03:55:56.561
experiences and not set up 
things that are going to trip up

03:55:56.562 --> 03:56:00.790
 users, and users should always 
be in control fundamentally.

03:56:04.590 --> 03:56:08.460
 What we've seen from companies 
shipping new progressive web 

03:56:08.461 --> 03:56:11.483
apps that follow these 
principles is really good 

03:56:11.484 --> 03:56:16.028
results.  We've published a 
whole bunch on if you Google 

03:56:16.029 --> 03:56:20.683
progressive web app case study, 
you will find a whole bunch. 

03:56:20.684 --> 03:56:26.029
This is just a few. 170% in
crease in page views from 

03:56:26.030 --> 03:56:31.329
Twitter and 76% in higher 
conversions. So this is 

03:56:31.330 --> 03:56:37.448
potentially a very major impact 
on business. Now I want to talk 

03:56:37.449 --> 03:56:42.020
quickly about how better UX is 
now being built into browsers 

03:56:42.021 --> 03:56:45.074
and how you can do things that 
you couldn't before thanks to 

03:56:45.215 --> 03:56:47.833
the new capabilities being built
 in. So the first of these is 

03:56:47.834 --> 03:56:52.169
smart lock. So smart lock is a 
capability that means if a user 

03:56:52.170 --> 03:56:55.295
has ever logged into your 
service on any device native or 

03:56:55.296 --> 03:56:58.046
on the web, then when they 
transition to another device, 

03:56:58.047 --> 03:57:01.666
they can be automatically logged
 in without needing to remember 

03:57:01.667 --> 03:57:05.717
their user name and password. We
 find that when users are 

03:57:05.718 --> 03:57:09.681
presented with a log-in screen, 
actually the majority of them 

03:57:09.682 --> 03:57:13.211
often leave the site at that 
point and they don't ever make 

03:57:13.212 --> 03:57:16.272
it through that log-in screen.  
So this is a really key part of 

03:57:16.466 --> 03:57:19.598
your screen that you can 
optimize with this new 

03:57:19.599 --> 03:57:23.964
capability of smart lock, which 
is also called credential 

03:57:24.058 --> 03:57:26.511
manager if you're looking it up.

03:57:26.512 --> 03:57:29.741
    Next the payment request API
. The data shows that 

03:57:29.742 --> 03:57:33.837
approximately 65% of users on 
mobile that get to a check-out 

03:57:33.838 --> 03:57:37.216
screen don't end up completing 
that check-out. When we ask them

03:57:41.137 --> 03:57:41.928
 why, most of them say it's 
because the form was too long or

03:57:41.929 --> 03:57:44.206
 hard to fill in. So payment 
requests lets you tell the 

03:57:44.207 --> 03:57:46.986
browser what the price is and 
what the product is and then the

03:57:47.386 --> 03:57:50.366
 browser will render this native
 form that's already filled in 

03:57:50.367 --> 03:57:53.171
with all of the user's 
information that we already 

03:57:53.172 --> 03:57:56.246
have.  The user can just tap pay
 and you get all of that form 

03:57:56.247 --> 03:57:58.997
information back. You get the 
credit card details, the address

03:57:59.095 --> 03:58:01.905
, all of the things that you 
would expect, but the user 

03:58:01.906 --> 03:58:08.872
didn't have to re-type them in. 
This can be really big with im

03:58:09.301 --> 03:58:13.025
pact on e-commerce. 
    And service workers allow 

03:58:13.026 --> 03:58:17.401
you to work on flakey networks 
even when fully offline. Here 

03:58:17.402 --> 03:58:21.751
you can see a progressive web 
app in Africa. What they shipped

03:58:21.997 --> 03:58:25.981
 their experience such if that 
if the user goes offline, they 

03:58:25.982 --> 03:58:29.667
can look back at items they have
 looked at previously, take 

03:58:29.668 --> 03:58:34.233
their phone home and show their 
partner when they were looking 

03:58:34.459 --> 03:58:37.548
at, even without internet. They 
give you a phone number to call 

03:58:37.834 --> 03:58:41.278
and you can call that phone 
number and convert on the item 

03:58:41.279 --> 03:58:44.000
without internet at a later 
point. 

03:58:44.001 --> 03:58:50.421
    So these are some of the 
things possible on the web. In 

03:58:50.422 --> 03:58:57.550
the last year alone we shipped 
over 215 new APIs like web blue 

03:58:57.551 --> 03:59:01.326
tooth and image capture that 
gives you full control over the 

03:59:01.327 --> 03:59:04.836
camera and focus and aperture. 
If you ever thought I can't do 

03:59:04.837 --> 03:59:08.267
that on the web, I have to do 
native for some reason, just go 

03:59:08.268 --> 03:59:11.316
back and take a look and see if 
it's possible because a lot of 

03:59:11.317 --> 03:59:14.982
things really are. The web has 
come a really long way. And 

03:59:14.983 --> 03:59:18.668
finally, I'd like to share a 
debate that's currently going on

03:59:18.777 --> 03:59:22.496
 on the web in this area. 
    So this is a common question

03:59:23.116 --> 03:59:28.627
 that we get. Should I tweak my 
PWA to visually fit in with 

03:59:28.628 --> 03:59:33.202
Android or iOS especially when 
running in the immersive mode? 

03:59:33.203 --> 03:59:37.569
What do users expect? I think 
this is a really fascinating 

03:59:37.570 --> 03:59:42.020
question. It's really 
philosophical. Some argue that 

03:59:42.021 --> 03:59:50.122
the web should evolve its own de
sign pat earns -- patterns. And 

03:59:50.123 --> 03:59:55.739
others would argue that you 
should fully adjust how it looks

03:59:55.975 --> 03:59:58.906
 on iOS and Android.

04:00:03.670 --> 04:00:06.834
 It should be about the form 
factor and the user's context, 

04:00:06.835 --> 04:00:10.830
which I think is another great 
point. A really interesting 

04:00:10.831 --> 04:00:14.636
example of one company's way of 
handling this, well, so this is 

04:00:14.637 --> 04:00:18.676
the progressive web app from the
 city of Barcelona for their 

04:00:18.677 --> 04:00:25.405
tourists. It works afterline. 
You -- offline. They have kept 

04:00:25.406 --> 04:00:29.759
the same fundamental structure a
cross Android and iOS but they 

04:00:29.760 --> 04:00:34.324
have tweaked the design. They 
have changed the colors and the 

04:00:34.325 --> 04:00:37.584
typography. They have centered 
the header and really made it 

04:00:37.585 --> 04:00:41.609
feel a little more native while 
keeping the fundamental under

04:00:41.953 --> 04:00:47.201
lying structure the same. I 
think this is an area where a 

04:00:47.202 --> 04:00:50.424
lot more exploration and 
discussion needs to happen.  If 

04:00:50.425 --> 04:00:53.188
you have thoughts, I would love 
to see blog posts and see people

04:00:53.423 --> 04:00:57.575
 trying different things. 
    And finally if you're 

04:00:57.576 --> 04:01:01.069
interested in going out from 
here and building a progressive 

04:01:01.070 --> 04:01:04.479
web app, there's a couple of 
ways I would recommend looking 

04:01:04.480 --> 04:01:11.005
at getting started. The first is
 the poller in CLI. They 

04:01:11.006 --> 04:01:14.888
recently released a new command 
line tool that makes it really 

04:01:14.889 --> 04:01:18.827
easy to get up and running. It 
includes service work and 

04:01:18.828 --> 04:01:25.079
caching and all of those aspects
.  And on react, there's a tool 

04:01:25.080 --> 04:01:30.226
called create react app. You 
won't have to deal with babble 

04:01:30.227 --> 04:01:37.732
or any of those things. And 
create react app just announced 

04:01:37.733 --> 04:01:39.733
at Google

04:01:41.985 --> 04:01:47.310
 iO that any built with that 
will be PWA by default straight 

04:01:47.311 --> 04:01:50.385
out of the box. These are two 
really good places to get 

04:01:50.386 --> 04:01:52.268
started. 
    And remember that when you 

04:01:52.269 --> 04:01:56.161
go out and start building these 
things, use skeleton screens and

04:01:56.407 --> 04:01:59.535
 those techniques to make sure 
that your site is reactive to 

04:01:59.536 --> 04:02:03.740
the users' input. Consider 
keeping things simple and using 

04:02:03.741 --> 04:02:08.091
a bottom navigation instead of 
the gesture input. Or if you do 

04:02:08.092 --> 04:02:12.301
the gesture, be thoughtful so 
your site is predictable to 

04:02:12.302 --> 04:02:16.913
users. And use techniques like 
stable loading to be sure that 

04:02:16.914 --> 04:02:20.276
your site isn't jumping around 
under the fingers in order to 

04:02:20.277 --> 04:02:23.810
keep the user in control. 
    I think we have a couple 

04:02:23.811 --> 04:02:26.765
minutes now for Q&amp;A if you'd 
like to stick around. Otherwise,

04:02:27.181 --> 04:02:30.812
 I've been Owen. You've been a 
wonderful audience. I hope you 

04:02:31.542 --> 04:02:33.542
enjoy the rest of iO. Thank you 
very much.

04:02:40.454 --> 04:02:49.300
to invite one of my colleagues, 
Mustafa, from the design team. 

04:02:49.301 --> 04:02:55.348
He will help with question s. 
Please use the microphones. Yeah

04:02:55.654 --> 04:02:57.654
?

04:03:29.649 --> 04:03:31.901
 [   [ Inaudible Question ] 

04:03:36.844 --> 04:03:39.413
   Â» ALAN VIVERETTE: He 
mentioned including a tag that 

04:03:39.414 --> 04:03:42.990
specifies a service worker to be
 installed so when a user taps a

04:03:43.364 --> 04:03:47.532
 link, they're taken to the PWA 
already installed locally on the

04:03:47.985 --> 04:03:50.946
 device. So I don't think there
's any proposal for a new 

04:03:50.947 --> 04:03:53.772
standard around that, building 
that into the browsers. But that

04:03:54.078 --> 04:03:59.754
 component, that web component 
that you can use, I think the 

04:03:59.755 --> 04:04:04.064
idea of having that as a 
standard web component that can 

04:04:04.825 --> 04:04:08.023
be used outside of it, for 
example, and using it to install

04:04:08.349 --> 04:04:11.832
 service workers on other pages 
is valuable. And we're looking 

04:04:11.833 --> 04:04:17.402
at this, for example, on the new
 tab page, when you get the new 

04:04:17.403 --> 04:04:20.712
install of Chrome, there are 
different icons there. And we're

04:04:21.296 --> 04:04:26.236
 looking at pre-installing the 
service worker. So it loads 

04:04:26.237 --> 04:04:29.110
instantly. So we are thinking 
about those things. I think 

04:04:29.204 --> 04:04:31.969
there's probably opportunity to 
do more there.

04:05:09.889 --> 04:05:19.017
   Â» MUSTAFA: We've got the 
progressive directly. . 

04:05:19.018 --> 04:05:21.160
   Â» ALAN VIVERETTE: Hold it 
closer

04:05:24.396 --> 04:05:26.396
. 
   Â» MAUFL

04:05:30.491 --> 04:05:34.956
 MUSTAFA: To get existing 
infrastructure to be like a PWA 

04:05:34.957 --> 04:05:38.587
is quite hard so people are 
starting fresh with a PWA or a 

04:05:38.588 --> 04:05:41.662
mobile app. I think what will 
happen is slowly but surely they

04:05:41.870 --> 04:05:46.402
 will move backwards. There's 
also implications that desktop 

04:05:46.403 --> 04:05:53.604
sites have a lot of adverts on 
it and it's quite hard to get 

04:05:54.089 --> 04:05:57.691
ads working really, really well 
on PWA and mobile so there are 

04:05:57.692 --> 04:06:01.323
choices and decisions that you 
have to make, which is why it's 

04:06:01.324 --> 04:06:03.969
easier to go PWA.

04:06:07.936 --> 04:06:13.420
 I would prefer that we don't 
lose responsive design.

04:06:18.536 --> 04:06:22.943
 It's easier to start fresh and 
slowly they will move backwards.

04:06:22.944 --> 04:06:25.915
  In the UK there was a big 
shopping site that they had like

04:06:26.229 --> 04:06:30.109
 an accessible site that was 
aimed for people

04:06:33.641 --> 04:06:35.641
 that had the main site.

04:06:48.395 --> 04:06:51.943
 Some are actual websites and 
some are just apps. And really a

04:06:52.163 --> 04:06:58.475
 long-winded answer, but it 
depends on the context. Does 

04:06:58.476 --> 04:07:01.354
that help? 
   Â» ALAN VIVERETTE: Sometimes 

04:07:01.355 --> 04:07:06.892
people ask about SEO when it 
comes to that question. If you 

04:07:06.893 --> 04:07:12.230
Google SEO with progressive web 
apps and it's not different from

04:07:12.799 --> 04:07:15.790
 normal single page development,
 but there is some to take a 

04:07:15.791 --> 04:07:20.460
look at. One last question? 
    [ Inaudible Question ] 

04:07:29.517 --> 04:07:38.405
   Â»  MUSTAFA: In the beginning,
 there were three different 

04:07:38.406 --> 04:07:44.088
elements. And it was called for 
web developers to have a single 

04:07:44.089 --> 04:07:48.288
source of truth. We took the 
best of all of them. And evolved

04:07:48.660 --> 04:07:51.593
 it to material like components 
on the web so it can be the 

04:07:51.594 --> 04:07:53.676
single source of truth.

04:08:01.224 --> 04:08:04.648
 So SO that will be a single 
source.

04:08:15.753 --> 04:08:19.938
be a bunch of us over in the 
mobile web tent. If you want to 

04:08:19.939 --> 04:08:23.443
chat with us later in the week. 
Otherwise, thank you very much. 

04:08:23.444 --> 04:08:25.444
    [ Session concluded ]

04:08:28.398 --> 04:08:28.699
. 

05:17:05.402 --> 05:17:07.402
   &gt;

05:21:05.524 --> 05:21:07.601
   &gt;&gt;
   &gt;&gt;

05:21:07.602 --> 05:21:08.602
   &gt;&gt;
   &gt;&gt;

05:21:07.602 --> 05:21:08.602
   &gt;&gt;
   &gt;&gt;

05:21:07.602 --> 05:21:10.072
   &gt;&gt; Test test test test test 
test test test test test test 

05:21:10.232 --> 05:21:13.639
test test test I pledge 
allegiance to the flag of States

05:21:13.738 --> 05:21:15.738
 of and to the 

05:21:28.280 --> 05:21:30.280
republic

05:21:48.399 --> 05:21:49.399
to.
   &gt;&gt;

05:21:48.399 --> 05:21:48.686
   &gt;&gt;
   &gt;&gt;

05:21:48.687 --> 05:21:49.687
   &gt;&gt;

05:21:48.687 --> 05:21:50.816
    John John test, 

05:22:03.296 --> 05:22:05.296
Caramel, 

05:22:08.779 --> 05:22:10.779
Jonathan 

05:24:05.774 --> 05:24:06.665
Karmel,.

05:24:11.506 --> 05:24:13.506
native 

05:24:19.914 --> 05:24:21.914
Native

05:24:31.215 --> 05:24:33.215
Android, dot

05:24:47.534 --> 05:24:49.534
Dotloop, 

05:25:06.078 --> 05:25:08.078
jet, ticket 

05:25:10.678 --> 05:25:12.678
t 

05:25:28.076 --> 05:25:31.389
Ticketmaster.  Instant app, 
instant 

05:26:26.464 --> 05:26:29.444
App, smart Smart 

05:26:56.154 --> 05:26:58.154
Lock.  Mix 

05:27:02.609 --> 05:27:04.609
panel, locale littics, 

05:27:08.806 --> 05:27:10.867
tics, 

05:27:15.793 --> 05:27:17.793
alytics,

05:27:32.645 --> 05:27:34.645
Fabric. 

05:27:37.626 --> 05:27:39.626
Developer

05:28:19.939 --> 05:28:21.811
Relations. 
   &gt;&gt; JONATHAN KARMEL:  Hi, can 

05:28:21.812 --> 05:28:24.515
everyone me in the Awesome.

05:28:30.609 --> 05:28:35.155
you.  Keep the applause going.
   (

05:28:42.454 --> 05:28:49.067
manager apps have to a session 
for introduction duction to 

05:28:54.019 --> 05:28:59.958
apps.  I'm  excited to highlight
 ners  have many in audience.  

05:28:59.959 --> 05:29:04.517
dive in  let's talk about of 
Instant Apps which are Android 

05:29:04.518 --> 05:29:07.814
Apps. 
   We love Android Apps.  

05:29:07.815 --> 05:29:10.667
Android Apps are getting better 
and better.  They fast, 

05:29:12.071 --> 05:29:15.902
seamless, beautiful and take 
advantage of device c 

05:29:15.903 --> 05:29:18.411
apabilities.  Let's take a look 
at some of them on my homescreen

05:29:18.773 --> 05:29:22.140
 t oday.  We have Ticketmaster 
who has a beautiful end-to-end 

05:29:22.476 --> 05:29:27.708
experience.  So let's say I 
wanted to go LCD sound system, 

05:29:27.709 --> 05:29:29.709
well, I would just go into 
Ticketmaster, I would search for

05:29:31.530 --> 05:29:35.158
 LCD sound system and due NDK 
support I can find the exact 

05:29:35.159 --> 05:29:39.623
seat I want, see what it looks 
like in the venue, and there.  

05:29:40.062 --> 05:29:43.258
Next day I can actually get into
 the with 

05:29:48.174 --> 05:29:52.781
we Citymapper saved me a lot 
because I'm staying in a 

05:29:52.782 --> 05:29:55.516
Mountain hotel and riding my 
bike because I didn't want to 

05:29:55.729 --> 05:29:59.680
hit the traffic you all hit.
   It's a 30 minute bike ride 

05:29:59.681 --> 05:30:04.250
and I have no idea how to 
navigate the back roads of 

05:30:04.251 --> 05:30:07.438
mountainview.  So I opened up 
Citymapper, it tells me the 

05:30:07.851 --> 05:30:10.817
exact transit and due to map 
viewer support I can dive in and

05:30:10.936 --> 05:30:14.649
 figure out the turn I just 
missed and go back a few miles. 

05:30:14.650 --> 05:30:20.884
 Then you have red bull TV, aI 
lean back experience for 

05:30:20.885 --> 05:30:26.780
immersive television.  All of 
these add up to great   Android 

05:30:26.781 --> 05:30:29.831
Apps.  All of you in the crowd 
have done an amazing job 

05:30:29.832 --> 05:30:33.338
developing apps.  In order to  
the get the experience you have 

05:30:33.339 --> 05:30:35.339
to install.  And there is a 
friction point and you don't 

05:30:35.554 --> 05:30:40.463
have as many users using your 
best experience.  What had the 

05:30:40.464 --> 05:30:45.944
same experience but just with a 
click you dive into is 

05:30:45.945 --> 05:30:51.951
   They are native Android Apps 
run without installation.  So me

05:30:51.952 --> 05:30:57.625
 dive in a  example.  I have a 
Joyce, and she loves "Buzz" 

05:30:57.746 --> 05:31:03.573
feed.  is on the "Buzz" feed app
  the time just  videos.  The 

05:31:03.574 --> 05:31:08.034
other day she me that there are 
seven  to make chicken  you and 

05:31:08.387 --> 05:31:11.407
I there are six ways to make 
chicken 

05:31:17.151 --> 05:31:22.598
 I usually would the the play 
wait, up and search for the she 

05:31:22.705 --> 05:31:26.965
is talking about, but now all I 
have to do, she sends me a I is 

05:31:27.172 --> 05:31:31.657
click.  I dive into native app 
experience and I find out there 

05:31:31.971 --> 05:31:35.934
are actually seven to make 
chicken wings.

05:31:35.935 --> 05:31:39.541
   Now, I may not  to use "Buzz"
 I  want the experience  thin 

05:31:39.659 --> 05:31:45.232
and don't want to it my phone 
and with Instant Apps don't talk

05:31:45.233 --> 05:31:50.801
 about a few of our livetoday 
I'm excited to talk The first 

05:31:53.008 --> 05:31:57.805
one dot which is a contract  
ciberring app.  I don't sign 

05:31:57.806 --> 05:32:03.459
contracts every day but when I 
get the email that time have to 

05:32:04.028 --> 05:32:07.429
sign this contract and I'm 
transit I don't wait get back to

05:32:08.400 --> 05:32:13.347
 to sign.  has you covered next 
native experience thatguides you

05:32:14.397 --> 05:32:17.053
 the flow you how many 
signatures you have to have on 

05:32:17.054 --> 05:32:19.685
the contract, read, flip through
 the contract and then dive into

05:32:19.686 --> 05:32:23.412
 the exact place you have to 
sign. 

05:32:23.413 --> 05:32:27.245
   Now, early results have been 
phenomenal.  They are seeing 

05:32:27.798 --> 05:32:32.846
more users startthat There is 
starting that experience because

05:32:32.847 --> 05:32:35.319
 they are guiding you 
immediately and they double 

05:32:35.663 --> 05:32:37.663
digit increasefor the number of 

05:32:40.272 --> 05:32:44.965
c ontracts.  Hot another Instant
 App that's live a real estate 

05:32:45.323 --> 05:32:50.029
browsing app.. Now, my wife and 
I are looking to move right now 

05:32:50.030 --> 05:32:53.776
or at least I believe so because
 she keeps sending me links day 

05:32:53.777 --> 05:32:56.203
about new properties.  So I 
don't have the

05:33:00.501 --> 05:33:02.501
 hot pads on phone because she 
does because she is 

05:33:04.621 --> 05:33:06.621
browsing properties into this 
high fidelity experience, get 

05:33:07.145 --> 05:33:12.426
through photos, look at the 
comengses of the home, look rich

05:33:12.427 --> 05:33:16.143
 information like what schools 
are nearby and then I can flip 

05:33:16.609 --> 05:33:23.816
new in and when I'm ready, I can
  the and up times actually the 

05:33:24.869 --> 05:33:30.465
And exactly what HotPadsis 
trying to optimize.  They want 

05:33:30.466 --> 05:33:36.150
you to the and see the house.  
And HotPads told us they have 

05:33:36.151 --> 05:33:43.501
optimizing app for 12 years and 
to the uplift significant. any 

05:33:44.136 --> 05:33:48.209
new daily morning ritual which 
is New York word.  I wake up in 

05:33:48.754 --> 05:33:52.018
the I a quick search to find the
 "New York Times"cross word.  it

05:33:52.019 --> 05:33:57.253
 up in Google.com and shows a 
instant badge right next to it. 

05:33:57.254 --> 05:34:05.351
 I dive  App and to the cross 
word immediately, day I send 

05:34:05.352 --> 05:34:10.092
best time to my whole team.  
This the time to beat  the day.

05:34:11.261 --> 05:34:15.028
   Now, early data shows that 
I'm not that this has become 

05:34:15.315 --> 05:34:18.288
more habitual users in the 
Instant App.  They are coming 

05:34:18.684 --> 05:34:22.065
back more and more and seeing 
significant increases in 

05:34:22.066 --> 05:34:24.066
re-engagement from early 

05:34:25.929 --> 05:34:33.926
data.  put this slide up.  Today
 we live.  want the that's have 

05:34:34.824 --> 05:34:39.615
worked so hard to live today.  
So please give them a round of a

05:34:39.616 --> 05:34:41.616
 pplause.
   (Applause). 

05:34:48.326 --> 05:34:52.819
   We have 15 Instant Apps from 
14 countries, and you can see we

05:34:52.820 --> 05:34:55.997
 cover bunch of different 
categories, and I will just 

05:34:57.460 --> 05:34:59.631
through a few of t hem.  I'm 
sorry I'm some of you 

05:35:05.408 --> 05:35:09.474
out.  But you can see e Commerce
 partners lick jet, wish and 

05:35:05.408 --> 05:35:08.689
Ticketmaster, red bull, Vicki, 
tab pro and "New York Times" 

05:35:08.910 --> 05:35:18.211
cross word.  Tap o is Po is 
great if want to learn You have 

05:35:18.624 --> 05:35:25.061
travel apps like trip scanner 
and  Citymapper.  These have 

05:35:25.209 --> 05:35:28.374
been extensions of our product 
team.  They are not only trying 

05:35:28.375 --> 05:35:30.797
to optimize their app but they 
are giving tons of feedback on 

05:35:31.122 --> 05:35:34.164
the platform and tooling we have
 in So a lot of the tooling you 

05:35:34.165 --> 05:35:38.694
will check out today is due to 
all of the hours of feedback 

05:35:38.695 --> 05:35:44.011
provided for us.  So I  want 
thank them again and today at 

05:35:44.012 --> 05:35:46.860
4:30 p.will where developers

05:35:50.147 --> 05:35:54.306
themselves.  let's take all of 
these apps and put them on our 

05:35:54.307 --> 05:36:00.513
phone.  ace lot,  the today, is 
a apps to fit on your But these 

05:36:00.757 --> 05:36:05.772
native apps now your can them 
any time anywhere it's not 

05:36:06.203 --> 05:36:08.203
installed on your phone.

05:36:12.349 --> 05:36:15.097
our phone.
   Anyone can build an Instant 

05:36:15.512 --> 05:36:19.448
App so we are excited to open it
 to you and see more and more of

05:36:19.660 --> 05:36:23.340
 you develop Instant Apps.  You 
can access the documentation, 

05:36:23.497 --> 05:36:31.070
download SDK and the tooling.  
So  should you expect?  One one 

05:36:31.177 --> 05:36:34.117
project and the tools you are 
already familiar You will 

05:36:34.327 --> 05:36:38.358
develop an Android 3.0.  The 
first step you will do is begin 

05:36:39.042 --> 05:36:42.532
to your app and start taking the
 features that you already have 

05:36:43.062 --> 05:36:46.703
today and breaking it up 
different modules. 

05:36:46.704 --> 05:36:51.230
   We have tooling you do that 
and you the way.  We stress the 

05:36:51.231 --> 05:36:56.205
reuse of code the installable 
app.  So, again, you are working

05:36:56.206 --> 05:36:59.367
 in one code base, one project. 
 When you done, you upload to 

05:36:59.577 --> 05:37:04.115
the Play Console.  Now, you will
 not have to go and hire an 

05:37:05.205 --> 05:37:07.870
Android Instant Apps Engineer.  
This isthe Android development 

05:37:07.871 --> 05:37:14.488
you are familiar And when we 
have talked to and asked them 

05:37:14.489 --> 05:37:18.635
how did it take them to develop 
an Instant App,all apps vary but

05:37:18.636 --> 05:37:20.712
 on it's about  

05:37:26.645 --> 05:37:28.940
your use case.  One thing I will
 stress throughout this 

05:37:29.333 --> 05:37:32.335
presentation the  of focusing on
 action you are trying to get 

05:37:32.737 --> 05:37:37.463
the users to do.  So I know many
 of you have focused on but 

05:37:37.732 --> 05:37:40.164
really what you are trying to do
 you develop your Android App 

05:37:40.165 --> 05:37:46.215
and App is get to article,a 
video, a contract, do a 

05:37:47.074 --> 05:37:52.107
purchase, get highly app.  That 
is your goal. are the 

05:37:52.456 --> 05:37:56.591
motivations that have seen and 
heard from our partners about 

05:37:57.104 --> 05:38:00.533
they developed an Instant App.  
break them into three 

05:38:00.534 --> 05:38:05.565
categories.  The first one is 
about focusing onyour base and 

05:38:05.672 --> 05:38:10.402
opt newsing experience and what 
we call conversion.  one 

05:38:10.933 --> 05:38:14.526
thinking about new users you can
now reach, the third is 

05:38:14.527 --> 05:38:16.527
completely newuse 

05:38:19.835 --> 05:38:24.536
 again, for conversionabout 
current users and when we say 

05:38:25.090 --> 05:38:28.193
conversion, we mean metric are 
you trying to optimize.  For 

05:38:28.194 --> 05:38:31.719
current users, of you have told 
me that your native app is one 

05:38:32.111 --> 05:38:36.888
of your best properties and you 
want more users app. of current 

05:38:36.889 --> 05:38:40.721
user opening up accessibility 
your current user base dive into

05:38:40.722 --> 05:38:44.348
 the native app.  So we launched
 recently jet and they are 

05:38:45.045 --> 05:38:49.206
seeing great numbers of the 
likelihood of a user now 

05:38:49.315 --> 05:38:55.451
purchasing when they the Instant
 App has significantly by double

05:38:55.452 --> 05:39:00.574
 digits.  Reach about top of the
 funnel, more users that haven't

05:39:00.575 --> 05:39:06.528
 even your before.  This is true
 for lot of first developers.  

05:39:06.710 --> 05:39:11.342
So you can for a of first 
developers they are thinking 

05:39:11.969 --> 05:39:16.380
most of mythe play store.  I'm 
getting most users frominstalled

05:39:16.381 --> 05:39:23.429
 and thequestion is can expand 
service Can reach new  users you

05:39:23.565 --> 05:39:27.487
 haven't reached in the past?  
And t hinking now URLs is a way 

05:39:27.826 --> 05:39:31.105
to on board into your 
experience, you basically that 

05:39:31.106 --> 05:39:35.052
surface across the for new users
 to actually interface with your

05:39:35.053 --> 05:39:37.053
 native app experience.

05:39:41.864 --> 05:39:45.985
   The podcasts, forpodcasts 
oftentimes I listen to it 

05:39:46.315 --> 05:39:53.200
actually every d ay, I listen to
 a and I love cast Cast Box I 

05:39:53.201 --> 05:39:59.023
don't always want to my podcast 
people  not sure if listen to  

05:39:59.024 --> 05:40:03.711
but now I share a I know that 
they going dive into that app 

05:40:03.923 --> 05:40:07.364
experience I'm experiencing and 
I that's aexperience.  So my 

05:40:07.365 --> 05:40:12.233
propensity to share has 
increased. 

05:40:12.234 --> 05:40:16.507
   Finally, there are use that 
we are to see people in this 

05:40:16.955 --> 05:40:19.682
start to think about and develop
 now that there is no install 

05:40:19.996 --> 05:40:22.973
friction and there is not much 
friction between the physical 

05:40:23.609 --> 05:40:33.186
and world.  imagine to a a and a
 map for day, you are not to 

05:40:33.187 --> 05:40:37.961
install an Or if you go to a and
 have an option to order food 

05:40:37.962 --> 05:40:41.573
your seat, but you are want 
install an app.  I will just go 

05:40:42.540 --> 05:40:45.163
the concession 
   We a lot of the friction so 

05:40:45.579 --> 05:40:49.953
there are opportunities to  we 
are thinking here things like QR

05:40:49.954 --> 05:40:54.578
 codes, beak c ovens, new ways 
to user  experience.  We been 

05:40:55.661 --> 05:40:58.629
these  apps and we are  to see 
what you guys all develop in 

05:40:58.630 --> 05:41:04.214
this room.  you go to our 
Sandbox you actually see some of

05:41:04.215 --> 05:41:06.215
 partners developing types 

05:41:13.501 --> 05:41:17.331
developing App.  What should 
start thinking about alongside 

05:41:17.332 --> 05:41:22.436
the development?  What are the  
guiding principles that you App?

05:41:22.437 --> 05:41:25.747
  There are five  guiding 
principles, the first is the 

05:41:26.068 --> 05:41:30.771
idea of app.  like to think of 
Instant Apps and installed apps 

05:41:30.996 --> 05:41:32.996
as one app that run in two 
different 

05:41:36.730 --> 05:41:40.722
modes.  often to Apps to the 
streaming version of music.  You

05:41:40.838 --> 05:41:45.334
 are breaking up the and 
streaming each song.  It's 

05:41:45.335 --> 05:41:50.591
similar to will do with Instant 
are on plane, you  music to your

05:41:50.592 --> 05:41:52.592
 phone, so 

05:41:53.992 --> 05:41:55.992
you offline  
   But when you are 

05:42:01.404 --> 05:42:01.842
sitting at home, don't about 
what music do I have all of the 

05:42:01.843 --> 05:42:04.993
music you to and you are 
thinking I have to download this

05:42:04.994 --> 05:42:10.034
 or not.  So to one, the one app
 concept, want to think Apps as 

05:42:10.035 --> 05:42:17.352
the same app only being used on 
From stand that's what it will 

05:42:17.353 --> 05:42:22.068
feel like.  Again, one code 
base, one project, all of the 

05:42:22.562 --> 05:42:28.674
features you use in installed 
app in your Instant Android 

05:42:28.675 --> 05:42:32.970
3.Android 0, we insure that with
 high code reuse reaching your 

05:42:33.882 --> 05:42:38.433
app and your Instant We will go 
in depth into the actual 

05:42:38.434 --> 05:42:44.835
development of an Instant App at
 our technical later at 3:30 

05:42:44.836 --> 05:42:48.790
p.which you to go to and they 
will develop an instant app in 

05:42:48.791 --> 05:42:51.385
less minutes. 
   As you can see here, just 

05:42:51.952 --> 05:42:55.758
this diagram, all of the 
features from your installed app

05:42:55.759 --> 05:42:59.589
 now present in App and all that
 done is broken them up so now 

05:43:00.269 --> 05:43:05.182
you can, now the user can access
 one module with not having to 

05:43:05.733 --> 05:43:10.206
download and install feature two
 module.  From an installed app 

05:43:10.207 --> 05:43:14.578
standpoint same app, same output
 and same experience installed 

05:43:15.056 --> 05:43:17.056
app.  Nothing has 

05:43:18.744 --> 05:43:23.445
changed.  From the standpoint 
you are sameUI, navigation 

05:43:24.297 --> 05:43:27.273
flows.  A lot of developers ask 
me should I develop a trial app.

05:43:27.274 --> 05:43:33.081
  is not the goal. back on the 
music analysis, ideally if the 

05:43:33.303 --> 05:43:36.563
user doesn't know if they are in
 an Instant  or installed app 

05:43:36.564 --> 05:43:39.843
because the content is the of 
those rich experiences and all 

05:43:39.844 --> 05:43:43.242
ef of those great features you 
have in installed appyou want to

05:43:43.607 --> 05:43:48.305
 pull over to the  Instant App. 
   It's because the ever go from

05:43:48.306 --> 05:43:53.310
 instant the little relearning 
as There is no onboarding 

05:43:53.725 --> 05:43:56.784
process.  The user knows what 
this app does and they 

05:43:56.785 --> 05:44:00.723
understand your features.  Andwe
 have received a lot of positive

05:44:01.718 --> 05:44:07.200
 data for Vimeo has a great   
They all of their f eatures into

05:44:07.201 --> 05:44:12.999
 their Instant App and they are 
seeing of  their they longer 

05:44:13.000 --> 05:44:20.435
they deeper engaged.  They  seen
 digit in en engagement. next 

05:44:20.553 --> 05:44:24.274
three I will about what  once 
you are  an Instant App.  So 

05:44:24.481 --> 05:44:26.481
let's enter

05:44:28.578 --> 05:44:31.210
app.  Before you might have 
thought of having one flow 

05:44:31.693 --> 05:44:34.839
because you are yourch loading a
 monolithic app and there is 

05:44:34.951 --> 05:44:37.793
only one flow that the user can 
go through.  That's now changed 

05:44:38.888 --> 05:44:41.896
Apps. 
   You have actually now think 

05:44:41.897 --> 05:44:45.949
points into your Instant App.  
So you have to about that flow 

05:44:45.950 --> 05:44:50.958
like.  someone just me a and I 
don't know exactly what the 

05:44:50.959 --> 05:44:55.627
Instant App is going to be click
 it.  If I hit a sin I may be --

05:44:55.628 --> 05:45:00.384
 sign may be I understand the 
value proposition is for that 

05:45:00.385 --> 05:45:04.851
app.  So you want to think where
 across the Internet a user 

05:45:04.960 --> 05:45:10.997
could  the app through media, 
ads, all these different that's 

05:45:11.201 --> 05:45:14.932
a user can and what the context 
they that app and want to for 

05:45:15.491 --> 05:45:19.980
that are thinking flow. 
   If someone  sends a want drop

05:45:19.981 --> 05:45:24.154
 into the If someonesends a 
video.  I want to drop into the 

05:45:24.155 --> 05:45:28.219
exact video.  Search integration
 is also present in Instant 

05:45:28.915 --> 05:45:31.939
Apps.  So you want to think 
about what happens when a user 

05:45:32.653 --> 05:45:39.180
into your page from search.  
Here actually a search of 

05:45:40.053 --> 05:45:43.811
hometown in Franklin, Michigan 
and you zero come up three  

05:45:44.022 --> 05:45:47.464
times an Instant App.  So what 
has d one, said you are 

05:45:47.652 --> 05:45:50.123
searching for this area.  You 
probablyinterested in a 

05:45:50.649 --> 05:45:54.389
property.  I will sure my 
Instant App into a report on 

05:45:54.616 --> 05:45:57.572
Sunset drive and there three 
relevant properties for me.  I 

05:45:57.573 --> 05:46:04.232
click into that, I click that 
link and I dive into app 

05:46:04.233 --> 05:46:10.122
experience.side is important but
 also have think about home 

05:46:11.111 --> 05:46:14.884
entry still.  This was shown at 
the developer keynote of 

05:46:15.417 --> 05:46:19.460
actually getting use the, an 
Android O integration with 

05:46:20.014 --> 05:46:22.076
launcher allows you Apps

05:46:25.229 --> 05:46:30.686
 Here you can see I typed in NY,
 it recommendation of New York 

05:46:30.687 --> 05:46:33.236
Times Instant App and I pull 
that onto my homescreen and now 

05:46:33.237 --> 05:46:42.052
when I click it, it me into the 
homescreen of the cross puzzle. 

05:46:42.053 --> 05:46:44.960
 It is t hinking about the 
context of the user and them 

05:46:45.363 --> 05:46:47.363
driving into the homescreen of 
the

05:46:56.761 --> 05:47:00.033
native app.  We think install 
friction.  are friction we are  

05:47:00.151 --> 05:47:03.861
to solve across the native app 
experience.  We  remove friction

05:47:03.862 --> 05:47:05.862
 we heard from 

05:47:08.456 --> 05:47:11.594
developers.  So sign? Is one 
where sometimes you are asked to

05:47:11.595 --> 05:47:13.885
 sign in when you have no idea 
what the app is about. 

05:47:13.886 --> 05:47:16.883
   Other times with purchasing, 
you may not have a credit card 

05:47:18.423 --> 05:47:21.273
around, and yet you still want 
to purchase.  How can we remove 

05:47:21.596 --> 05:47:23.596
those friction  points from 

05:47:30.481 --> 05:47:36.163
apps?  I mentioned before, sign 
in sometimes with installable 

05:47:36.164 --> 05:47:38.130
apps because you already gone 
through friction point. You know

05:47:38.131 --> 05:47:41.996
 the user flow the user is going
 through so decide to have them 

05:47:42.171 --> 05:47:46.061
sign up When are coming through 
the side entry, you may not want

05:47:46.062 --> 05:47:51.359
 a sign in to right we have a 
number our partners who in their

05:47:51.360 --> 05:47:56.170
 installed had mandatory sign in
 front, had removed that and 

05:47:56.171 --> 05:47:59.958
decided to in a point in the 
flow they felt that the user 

05:48:00.331 --> 05:48:04.073
understood they would signing in
 and value of in.

05:48:04.074 --> 05:48:08.554
   Instant also uses Smart Lock 
for Androidwhich allows you to 

05:48:08.555 --> 05:48:12.394
continue tobe signed between 
AndroidChrome desktop, I'm 

05:48:12.902 --> 05:48:19.238
sorry, Chromeand Chromebooks as 
as continued signed in App 

05:48:21.201 --> 05:48:24.448
sessions.  purchasing, there is 
digital purchasing and physical 

05:48:25.584 --> 05:48:29.417
purchasing.  Digital purchasing 
is very to what  where identical

05:48:29.418 --> 05:48:34.988
 to experienced installed is in 
app bigyou will continueto use 

05:48:34.989 --> 05:48:38.655
with Instant Apps.  For 
purchases we excited talk about 

05:48:38.656 --> 05:48:41.829
Google payment API.  Some of you
 mayhave heard about it in the 

05:48:41.830 --> 05:48:46.164
developer where assistant 
mentioned it, and there was also

05:48:46.165 --> 05:48:48.468
 another session specifically 
talking about the Google payment

05:48:49.339 --> 05:48:53.162
 API.  Weexcited to have part of
 Instant 

05:48:53.163 --> 05:48:58.850
   So are hundreds of millions 
of cards that already on file, 

05:48:58.966 --> 05:49:04.210
and when you are thinking  a 
entering into an Instant lot 

05:49:04.211 --> 05:49:07.317
times they are a user.  They may
 not have a form of payment 

05:49:07.980 --> 05:49:11.747
credit cardon file with you, but
 they have a form of payment on 

05:49:11.748 --> 05:49:17.329
with Now, they can access 
payment, API and access that 

05:49:17.330 --> 05:49:22.694
credit card.  you see  Jet is 
using the Google payment API,

05:49:24.124 --> 05:49:29.493
just click pay and Google 
payment API or the Google Pay 

05:49:30.576 --> 05:49:34.948
up, it my credit card and  and 
with just a few clicks I'm done 

05:49:35.375 --> 05:49:38.239
with my purchase. 
   So  mentioned before that Jet

05:49:38.240 --> 05:49:43.032
 seeing an increase propensity 
for  to purchase  they the 

05:49:43.033 --> 05:49:46.005
Instant App and they s eeing
great numbers what I'm is how 

05:49:46.113 --> 05:49:49.169
much of that is from the 
decreasing install friction and 

05:49:49.170 --> 05:49:53.080
how much is decreasing payment 
friction?  And as we get more 

05:49:53.634 --> 05:49:56.410
and more data I'm excited to 
parse that out and understand 

05:49:56.411 --> 05:50:01.957
how much is coming from each,  
now, Jet has told us they are 

05:50:01.958 --> 05:50:09.197
seeing increase purchases. to 
say, mention we don't want you 

05:50:09.198 --> 05:50:13.666
adding additional friction 
points.  And with our early 

05:50:13.667 --> 05:50:16.172
partners we did a lot of 
testing, we tried different 

05:50:16.173 --> 05:50:19.932
stuff out and we realized that 
the thing we to do is get the 

05:50:19.933 --> 05:50:25.567
user to the action theyto doas 
quickly as  early  partners 

05:50:25.568 --> 05:50:29.188
tried splash screens a lot tried
 i nstallation prompts and we 

05:50:29.189 --> 05:50:32.842
think getting rid of all of the 
friction points allows  smooth 

05:50:38.733 --> 05:50:42.918
experience in your Instant App. 
 They have   it and now they 

05:50:42.919 --> 05:50:47.528
want to install.  a number maybe
 24EZ to do offline usage.  We 

05:50:47.529 --> 05:50:50.316
encourage  in that case.  So 
let's talk about that experience

05:50:50.317 --> 05:50:52.317
 looks like when a 

05:50:55.687 --> 05:51:00.282
install.  of we the of 
installing in the Instant App.  

05:51:03.254 --> 05:51:08.092
There this in API, play install 
API allows you to install in 

05:51:08.093 --> 05:51:10.093
line when you are in an Instant 

05:51:12.076 --> 05:51:15.323
App.  I'm the red bull video.  I
 this video you and I want to 

05:51:16.142 --> 05:51:21.454
have -- awesome.  It me to 
install without having to the 

05:51:22.043 --> 05:51:24.566
Play you want to take into 
account copying the user 

05:51:24.967 --> 05:51:27.385
information from the Instant App
 to the installed app so you 

05:51:27.386 --> 05:51:32.408
know in this history was you can
 put them right back the video 

05:51:32.409 --> 05:51:37.703
they watching when they hit open
 installed app.  Now, let's 

05:51:37.704 --> 05:51:40.423
about the that you can actually 
prompt a user to install.  There

05:51:40.847 --> 05:51:44.382
 two ways.  The first one is 
explicit installations.  This 

05:51:44.383 --> 05:51:47.981
means that knows that they  
about  install  they hit button 

05:51:47.982 --> 05:51:51.797
it install. 
   The second is implicit are 

05:51:51.798 --> 05:51:56.963
when click  App and the feature 
might not be available  offline 

05:51:57.378 --> 05:52:00.898
 so  prompt  user if you to use 
this feature, please install.  

05:52:01.528 --> 05:52:05.803
talk about tools that we have 
driving installation.  The first

05:52:06.276 --> 05:52:10.074
 one, as I mentioned is explicit
 installation.  You include the 

05:52:10.610 --> 05:52:16.781
install, the install string and 
the install, theinstall iconhere

05:52:16.782 --> 05:52:23.482
 and you can Amber did a great 
job with  embed it in their UI. 

05:52:23.483 --> 05:52:26.005
 They want the user to get the 
information they came for, which

05:52:26.006 --> 05:52:29.300
 is the weather.  They want to 
show all these great things they

05:52:29.301 --> 05:52:32.590
 within their app but now if the
 user wants to install, the 

05:52:33.034 --> 05:52:38.293
button  right there, feels 
really part of UI.  Wish a great

05:52:38.294 --> 05:52:43.780
 job including is in their 
drawer.  and easy the they want 

05:52:43.781 --> 05:52:48.655
to install to install right  
there.  Implicit installations 

05:52:48.656 --> 05:52:52.791
as I when you click a button in 
the Instant App and that feature

05:52:52.792 --> 05:52:54.792
 is not yet 

05:52:57.459 --> 05:53:01.395
 Yumly has some personalized 
things that theydo that would 

05:53:01.851 --> 05:53:04.540
only like in theinstalled app.  
That's great.  That's fine.  

05:53:04.541 --> 05:53:06.541
here see 

05:53:10.330 --> 05:53:10.642
that it prompts the user to 
install and it gives context to 

05:53:10.643 --> 05:53:12.643
why the user has to install. 

05:53:15.097 --> 05:53:17.774
 Early partners have tried both 
explicit implicit installations.

05:53:17.775 --> 05:53:21.976
  We encourageyou not to it 
disruptive.  And if they choose 

05:53:22.261 --> 05:53:25.319
to continuepotentially to that 
you them an option to 

05:53:33.303 --> 05:53:37.526
do so to you built this amazing 
Instant You have thought about 

05:53:37.527 --> 05:53:41.851
different pointsdifferent that 
are important for thought about 

05:53:41.852 --> 05:53:45.621
decreasing from to i 
nstallation.  So now you are 

05:53:45.787 --> 05:53:48.176
ready to track your success.  
What does that look

05:53:51.667 --> 05:53:53.545
 like? 
   First you need to upload your

05:53:53.546 --> 05:53:58.049
 Instant to the Play Console.  
This is going feel very to your 

05:53:58.801 --> 05:54:01.227
app.  We have three different 
tracks.  There is development 

05:54:02.869 --> 05:54:07.225
pre release and the prod track. 
 allows you do front and make 

05:54:07.716 --> 05:54:11.107
sure you are production.  Also 
the latest update that you push 

05:54:11.548 --> 05:54:15.543
will go directly to your user.  
We will serve directly to the 

05:54:15.896 --> 05:54:21.953
userso if click theURL you the
App.

05:54:21.954 --> 05:54:26.879
   We are also big proponents of
 experimentation so we created 

05:54:27.430 --> 05:54:30.084
mobile hold back.  This allows 
you to hold back percentage of 

05:54:30.304 --> 05:54:35.017
your traffic go to the mobile 
Web.  If put 2, 20% of yourwill 

05:54:35.018 --> 05:54:38.534
go to the mobile Web and 80% 
will go to Instant Apps.  This 

05:54:38.648 --> 05:54:42.127
enables you to do testingand 
experimentation.  We know have 

05:54:42.708 --> 05:54:46.382
optimized for years and your 
native  you have optimized  

05:54:46.383 --> 05:54:49.153
mobile website and have 
optimized your desktop and we 

05:54:49.154 --> 05:54:52.510
want to make sure give you tools
 to optimize Instant Apps and 

05:54:52.891 --> 05:54:56.666
try to make it the best property
 that you can. 

05:54:56.667 --> 05:55:02.685
   So let's about now of metrics
 will now tracking in instant  

05:55:02.686 --> 05:55:05.749
Instant might be different than 
how you thought  it with install

05:55:05.750 --> 05:55:10.596
 apps.  I showed two flows, one 
is where you start an app at the

05:55:10.597 --> 05:55:15.133
 play store.  Youinstall your 
you sign up and you then browse 

05:55:15.134 --> 05:55:17.134
engage with content of

05:55:18.940 --> 05:55:20.940
 the nativeapp, and then For 
Instant

05:55:22.143 --> 05:55:24.143
 Apps a start flip around.  
First, you 

05:55:25.775 --> 05:55:29.705
   You then can immediately 
engage without signing up, you 

05:55:29.916 --> 05:55:31.916
actually can purchase 

05:55:33.430 --> 05:55:37.906
without the eCommerce category. 
 you won't necessarily install. 

05:55:37.907 --> 05:55:41.408
 So youhave to start thinking 
what different metrics that you 

05:55:41.837 --> 05:55:46.621
track important in Instant Apps.
  First you would want to 

05:55:46.622 --> 05:55:48.248
separate installed apps and 
Instant Apps when you are 

05:55:48.249 --> 05:55:52.611
tracking to see different 
behavior.  Maybe for your 

05:55:53.748 --> 05:55:57.361
installed app acts differently 
than for your Instant App.  

05:55:57.362 --> 05:56:00.380
That's because you are creating 
different flows.  The be coming 

05:56:00.554 --> 05:56:04.142
through a door so the user act 
differently.  You may think 

05:56:04.143 --> 05:56:07.738
about signed users versus 
non-signed in users so some of 

05:56:08.146 --> 05:56:11.482
our partners signed in and now 
that they have pulled that moved

05:56:11.483 --> 05:56:17.080
 it to different point in App 
are to in users. 

05:56:17.081 --> 05:56:20.595
   You also have think about URL
 traffic which you may not have 

05:56:20.596 --> 05:56:25.036
considered in the past.  Now, 
Google for Firebase has covered.

05:56:25.037 --> 05:56:31.606
  with Google for Firebase to 
make all of these metrics  to be

05:56:31.607 --> 05:56:39.030
 for your Instant App.  They 
continuing to us to put tracking

05:56:39.031 --> 05:56:42.922
 and thinkthrough additional
complex make sense in Instant 

05:56:42.923 --> 05:56:47.333
Apps.  For our early partners a 
lot have their current SDK.  So 

05:56:47.334 --> 05:56:49.421
now that we are opening 
documentation today we are 

05:56:49.422 --> 05:56:52.732
excited to to more Analytics 
providers and start thinking 

05:56:53.354 --> 05:56:55.354
about more metrics we need to 

05:56:57.765 --> 05:57:00.599
start the SDK.
   So with of these partners 

05:57:00.600 --> 05:57:03.911
have shared with me, I have 
noticed a When first started 

05:57:03.912 --> 05:57:08.151
with Instant they to me about 
installation and there been a in

05:57:08.152 --> 05:57:12.227
 our conversation where talk 
about engagement I showed in 

05:57:12.228 --> 05:57:17.387
flow it used tobe that inorder 
to a successmetrics you have 

05:57:18.010 --> 05:57:21.647
install first.  So installation 
became aproxy for success.  We 

05:57:21.648 --> 05:57:25.427
have kind of that around,and now
 developers aresaying how 

05:57:25.428 --> 05:57:29.241
optimize the tickets purchased? 
 How do I optimize the flights 

05:57:29.242 --> 05:57:33.419
found?  How about watch our 
about time spent reading 

05:57:33.835 --> 05:57:36.583
football articles.  So all of 
this has changed a bit and we 

05:57:36.584 --> 05:57:39.647
are to how you guys start 
thinking about metrics in a 

05:57:40.071 --> 05:57:43.248
different way. 
   Sop let's

05:57:48.621 --> 05:57:54.603
that anyone can build an Instant
 App.  You can go to G.

05:57:55.695 --> 05:58:02.294
CO/instant Apps.  I about the 
gig motivation for  is App.  

05:58:02.295 --> 05:58:06.450
Thinking about c urrent, new and
 completely new use cases.  The 

05:58:06.451 --> 05:58:10.229
thing I about is what should in 
mind as guiding principles as 

05:58:10.485 --> 05:58:13.670
you in parallel do development. 
 We talked about one app, 

05:58:14.063 --> 05:58:16.962
different entry points, 
decreasing friction identity to 

05:58:17.236 --> 05:58:21.122
payments installation, as well 
as metrics.

05:58:21.123 --> 05:58:24.270
   There are two talks I would 
encourage you to go today.  

05:58:24.271 --> 05:58:26.271
first one is 

05:58:32.170 --> 05:58:37.234
at 3:30.  it's really exciting 
and encourage you to learn how 

05:58:37.235 --> 05:58:41.070
they are going to take an 
installed app and it into an 

05:58:41.071 --> 05:58:44.361
Instant I done my best to 
channel developer voice from 

05:58:44.525 --> 05:58:48.143
talking to all of our early 
partners, but it's much better 

05:58:48.144 --> 05:58:53.392
to hear directly our So I 
encourage you to go to who is 

05:58:53.768 --> 05:58:58.287
the lead Developer manager for 
Instant Apps and she have on the

05:58:58.623 --> 05:59:03.672
 panel cast box, vimio, 
delivery,  and parascope and 

05:59:04.111 --> 05:59:06.821
they will talk about their 
experience and will best 

05:59:08.189 --> 05:59:12.754
practices. 
   Thank you  I'm you all I'm 

05:59:12.755 --> 05:59:17.993
happy take questions you and 
visit us in Sandbox Dome C and I

05:59:17.994 --> 05:59:22.347
 will there also to answer 
questions after the talk.  Thank

05:59:22.348 --> 05:59:24.348
 you.
   (Applause).

06:00:07.673 --> 06:00:10.938
   (Concluded at 5:00 CT).

06:05:56.002 --> 06:05:58.002
.

06:05:59.463 --> 06:06:01.463
Test test  test

06:13:03.548 --> 06:13:05.548
   &gt;

06:13:19.725 --> 06:13:19.862
&gt;
   &gt;&gt;

06:13:19.863 --> 06:13:20.863
   RAW FILE

06:13:19.863 --> 06:13:22.596
   GOOGLE I/O 2017
   SAN JOSE, CALIFORNIA

06:13:19.863 --> 06:13:21.796
   MAY 18, 2017
   10:30 AM CT

06:13:19.863 --> 06:13:22.463
   STAGE 6
   THE FUTURE OF WEB PAYMENTS

06:13:19.863 --> 06:13:20.863
   T37A77

06:13:19.863 --> 06:13:19.941
           Caption First, Inc.
           P.O. Box 3066

06:13:19.942 --> 06:13:23.408
           Monument, CO 80132
           800-825-5234

06:13:19.942 --> 06:13:20.040
           Www.captionfirst.com
   ***

06:13:20.041 --> 06:13:23.641
   This text is being provided 
in a realtime format.  

06:13:20.041 --> 06:13:24.174
Communication Access Realtime 
Translation (CART) or captioning

06:13:20.041 --> 06:13:22.041
 are provided in order to

06:13:23.161 --> 06:13:26.961
 facilitate communication 
accessibility and may not be a 

06:13:23.161 --> 06:13:26.027
totally verbatim record of the 
proceedings.

06:13:23.161 --> 06:13:25.161
   ***

06:18:33.578 --> 06:18:34.578
   &gt;&gt;
   &gt;&gt;

06:18:44.781 --> 06:18:46.781
Store.

06:19:02.066 --> 06:19:04.066
oogle Play Protect.

06:19:09.714 --> 06:19:11.714
     Machine

06:19:30.676 --> 06:19:32.676
 Learning

06:19:35.555 --> 06:19:37.555
.  Verify apps 

06:19:41.773 --> 06:19:43.773
Verify Apps 

06:20:02.640 --> 06:20:04.640
API.  Cap chai.

06:20:14.297 --> 06:20:16.297
cha.

06:20:19.127 --> 06:20:22.487
     Sate net, safety

06:20:38.141 --> 06:20:40.141
SafetyNet, verified 

06:20:43.395 --> 06:20:45.395
Verified 

06:20:46.903 --> 06:20:49.026
Boot.  Lollipop.  

06:21:04.156 --> 06:21:06.156
Lollipop. 

06:21:18.884 --> 06:21:20.884
R ansomware, SE

06:21:34.439 --> 06:21:36.439
SELinux.  Project

06:21:39.443 --> 06:21:41.443
 Project 

06:21:52.505 --> 06:21:54.505
Treble. 

06:22:04.548 --> 06:22:06.548
WebView,

06:22:08.507 --> 06:22:10.507
 WebView, Kit Kat,

06:22:22.031 --> 06:22:24.031
Kat, 

06:22:42.145 --> 06:22:44.145
WebView,

06:22:58.464 --> 06:23:00.464
FIDO.

06:28:23.522 --> 06:28:23.814
API. 
   &gt;&gt; ADRIAN LUDWIG:  Welcome 

06:28:23.815 --> 06:28:27.290
this afternoon to our talk on 
Android security, my name is 

06:28:28.748 --> 06:28:30.831
Adrian.  Xiaowen Xin will be 
joining us in just a minute as 

06:28:31.010 --> 06:28:37.262
well.  It will be a bit of a 
whirlwind tour.  If I talk to  

06:28:37.492 --> 06:28:39.492
too fast I 

06:28:41.413 --> 06:28:43.488
apologize.  There has been a lot
 going often in

06:28:46.930 --> 06:28:47.554
 Android play.  So we will touch
 on that as we go through today 

06:28:47.555 --> 06:28:50.372
and give you the information 
that you hopefully need and 

06:28:50.620 --> 06:28:52.620
certainly seem to want.  We have
 a lot of people 

06:28:55.615 --> 06:28:58.254
here today.  What we are going 
to cover is talk a little bit 

06:28:58.255 --> 06:29:01.096
about security services and from
 there hand offtalk about the 

06:29:01.097 --> 06:29:05.702
core operating system and app 
security.  Yesterday we heard 

06:29:05.928 --> 06:29:09.649
mention of something new, 
excite, Google play protect.  

06:29:09.650 --> 06:29:12.793
What is Google Play Protect.  
The core is an engine we have 

06:29:13.368 --> 06:29:16.428
built to protect all of the 
devices 234 the Android 

06:29:16.971 --> 06:29:20.039
ecosystem.  This slide has grown
 year after year and we talk 

06:29:20.376 --> 06:29:23.866
about over 2 billion devices 
around the world protected by 

06:29:23.867 --> 06:29:28.673
those services.  Scanning over a
 billion devices and c hecking 

06:29:28.674 --> 06:29:31.635
over 50 bill ondevices and 
applications every day.  So 

06:29:31.636 --> 06:29:33.817
incredible scale.  The reason we
 have that scale is because we 

06:29:33.933 --> 06:29:37.425
need it to be able to see what's
 going on on the  ecosystem 

06:29:37.426 --> 06:29:40.809
that's own a mass almost the 
majority of devices out there in

06:29:40.810 --> 06:29:42.882
 the world. 
   To be able to actually look 

06:29:43.109 --> 06:29:47.283
at that data requires 
computational resources.  It 

06:29:47.284 --> 06:29:50.755
turns out Google has quite a few
 of those.  We use a tiny sliver

06:29:50.756 --> 06:29:54.715
 to look at the data.  Over 
20,000 looking at application 

06:29:54.716 --> 06:29:59.766
data, analyzing it, divetion 
deep into every single new 

06:29:59.767 --> 06:30:03.026
application we find.  And trying
 to understand how they behave 

06:30:03.117 --> 06:30:06.301
in our environment, how they 
behave out in the real world and

06:30:06.633 --> 06:30:09.272
 what risks they might pose for 
users. 

06:30:09.273 --> 06:30:12.343
   The reason we do that is to 
protect users, so one of the 

06:30:12.344 --> 06:30:14.836
most important things that we do
 is try to keep an eye on what 

06:30:15.386 --> 06:30:20.414
is the risk that users are being
 exposed to?  Clearly over the 

06:30:20.415 --> 06:30:23.599
last few years is users of 
Google Play are in a much safer 

06:30:24.031 --> 06:30:27.404
position.  They are about 95% 
safer if they are installing 

06:30:27.405 --> 06:30:29.500
applications that come from 
Google Play.  The reason is we 

06:30:29.714 --> 06:30:33.348
are able to use data gathered 
outside of Google Play and 

06:30:33.349 --> 06:30:35.951
analyze that in the context of 
an environment that's much more 

06:30:36.397 --> 06:30:38.896
controlled so applications at 
the time that they are uploaded,

06:30:38.897 --> 06:30:41.204
 we are able to analyze them, 
understand what's in there and 

06:30:41.546 --> 06:30:43.816
make good guidance and provide 
that guidance. 

06:30:43.817 --> 06:30:46.221
   We also provide those 
protections outside of Google 

06:30:46.222 --> 06:30:48.969
Play.  So that's what we wanted 
to show here is over the last 

06:30:49.065 --> 06:30:52.694
few years we have been carefully
 tracking this, keeping an eye 

06:30:52.895 --> 06:30:56.292
on what's going on and making 
sure users are protected.  From 

06:30:56.293 --> 06:30:59.357
my perspective it's all about 
the g raphs.  But that's not 

06:30:59.909 --> 06:31:02.309
really how most people think 
about security because most 

06:31:02.528 --> 06:31:06.243
people aren't looking at the 
entire ecosystem at once.  What 

06:31:06.244 --> 06:31:10.097
they want to know is am I safe? 
 So that's  really what the 

06:31:10.399 --> 06:31:12.699
announcement was yesterday 
putting really in a brand 

06:31:13.060 --> 06:31:15.109
understanding that these 
protections are there and making

06:31:15.110 --> 06:31:18.829
 them more and more scriesable 
to users -- visible to users and

06:31:18.830 --> 06:31:21.561
 that Google is standing behind 
the protection.  Google is going

06:31:22.007 --> 06:31:24.723
 to protect you on your Android 
device and make sure we have the

06:31:25.191 --> 06:31:28.542
 best protections in place 
throughout the devices. 

06:31:28.543 --> 06:31:31.401
   So that's what we are 
focusing on.  How do we do that?

06:31:31.402 --> 06:31:36.539
  We do that in a variety of 
ways.  We are investing 

06:31:36.540 --> 06:31:38.632
increasing intelligence, the 
ability to analyze what is going

06:31:38.633 --> 06:31:41.681
 on in these devices, expanding 
the scope and the types of 

06:31:42.149 --> 06:31:44.743
protections we provide, and also
 quite simply switching from 

06:31:45.212 --> 06:31:48.481
that graph mind set that I have 
latched onto in my life into the

06:31:48.482 --> 06:31:53.502
 user mind set where what they 
want to know is am I being 

06:31:53.503 --> 06:31:56.911
protected now?  Am I being 
protected, what it is that 

06:31:56.912 --> 06:31:59.517
Google is going to look out for 
me.  So we have a lot we are 

06:31:59.834 --> 06:32:03.011
doing in terms of increasing 
user visibility.  When I talk 

06:32:03.012 --> 06:32:06.300
about the increased protection, 
one of the most important things

06:32:06.516 --> 06:32:10.232
 we have learned is that we 
can't do it all as humans.  When

06:32:10.233 --> 06:32:13.764
 you are talking 500,000 new 
applications that are discovered

06:32:13.765 --> 06:32:18.657
 and analyzed every day, more 
and more we have to rely upon 

06:32:18.658 --> 06:32:21.389
the intelligence of machines to 
be able to do that type of 

06:32:21.390 --> 06:32:24.139
analysis.  One of the largest 
areas we have been investing in 

06:32:24.353 --> 06:32:28.070
is what everybody refers to as 
Machine Learning or artificial 

06:32:28.395 --> 06:32:31.479
intelligence at its most sort of
 simplistic.  What it is is it's

06:32:31.480 --> 06:32:35.500
 us working with the machines to
 train them.  This is a picture 

06:32:35.501 --> 06:32:39.122
of a clustering algorithm that 
has grouped different types of 

06:32:39.779 --> 06:32:42.528
malware based on behaviors that 
those applications exhibit in 

06:32:42.529 --> 06:32:45.012
the world.  So when we are 
looking at 500,000 new 

06:32:45.462 --> 06:32:48.435
applications every day, a 
clustering of them gives us the 

06:32:48.641 --> 06:32:51.362
ability to hone in on the ones 
we think are highest risk.  

06:32:51.363 --> 06:32:54.192
Those may be applications that 
are brand new that no one has 

06:32:54.193 --> 06:32:55.980
installed.  Those may be 
applications that have been out 

06:32:55.981 --> 06:32:59.030
for a while that we are starting
 to see a change in their 

06:32:59.451 --> 06:33:01.775
behavior.  The key is using 
these systems to understand and 

06:33:01.776 --> 06:33:04.174
make those kinds of quick 
decisions so that a user doesn't

06:33:04.175 --> 06:33:07.021
 have to make them, so that you 
as a developer don't have to 

06:33:07.346 --> 06:33:09.965
make them either and you don't 
have to guess because you can 

06:33:10.282 --> 06:33:13.343
rely on the investments we are 
making to analyze those data 

06:33:13.344 --> 06:33:15.344
points and help make the 
decisions for you and inform you

06:33:15.534 --> 06:33:20.119
 about what's going on on these 
devices. 

06:33:20.120 --> 06:33:24.406
   The other thing we have begun
 to recognize is sometimes we 

06:33:24.621 --> 06:33:28.010
just name things wrong.  There 
is a feature rereleased a couple

06:33:28.095 --> 06:33:32.388
 of years ago called Android 
device manager.  How many have 

06:33:32.389 --> 06:33:34.688
Android device manager 
installed.  For this audience 

06:33:35.094 --> 06:33:39.169
it's 20%.  So you are an order 
of magnitude higher than the 

06:33:39.170 --> 06:33:41.354
overall user base in terms of 
percentage of people that have 

06:33:41.581 --> 06:33:44.772
Android device manager 
installed.  Not shocking and 

06:33:44.968 --> 06:33:50.792
given who we are and how many 
are Googlers.  Find my device, a

06:33:51.214 --> 06:33:54.510
 simple way to take an existing 
set of technology, expose it to 

06:33:54.511 --> 06:33:58.871
users and make  it easier to 
understand. 

06:33:58.872 --> 06:34:01.714
   Battery and Wi-Fi status, 
tracking the device in the 

06:34:01.715 --> 06:34:04.343
background so that if it gets 
turned off, you know where it 

06:34:04.681 --> 06:34:06.956
was before it was turned off, 
you don't have to do the queer 

06:34:07.287 --> 06:34:11.543
in in real time.  A number of 
basic usability features to make

06:34:11.775 --> 06:34:14.935
 Thursday that sh functionality 
can be increasingly valuable for

06:34:15.159 --> 06:34:17.999
 users.  The most security risk 
that the average person is 

06:34:18.000 --> 06:34:21.580
exposed to is this one.  It's 
losing their device whether it's

06:34:22.029 --> 06:34:24.553
 accidental or whether it's 
someone taking the device out of

06:34:24.554 --> 06:34:29.449
 their possession. 
   The other thing we wanted to 

06:34:29.450 --> 06:34:32.412
do is let people know that this 
is h appening.  The number of 

06:34:32.413 --> 06:34:34.718
times that I have read the 
statement Google doesn't look at

06:34:34.719 --> 06:34:41.094
 the applications in Google Play
 just employees my   blows my 

06:34:41.741 --> 06:34:45.455
mind.  Every application goes 
through a rigorous screening 

06:34:45.456 --> 06:34:49.169
process both at the time the 
developer is enroll rolling to 

06:34:49.938 --> 06:34:53.885
become a member of Google Play 
processing, and every single day

06:34:53.886 --> 06:34:57.272
 after that we reanalyze those 
applications.  So there is 

06:34:57.273 --> 06:35:00.435
absolutely a lot of intelligence
 going on in the background that

06:35:00.436 --> 06:35:03.503
 simply wasn't exposed.  And so 
a lot of the work we are doing 

06:35:03.727 --> 06:35:07.876
now is to figure out how to 
delicately indicate to the user,

06:35:07.877 --> 06:35:11.804
 whether that be a consumer or 
an Enterprise, yes, this is 

06:35:11.805 --> 06:35:13.805
happening, we are checking these
 things and we have got your 

06:35:14.123 --> 06:35:16.630
back. 
   It's not just about 

06:35:17.158 --> 06:35:19.248
consumers, right?  It's also 
about application developers and

06:35:19.249 --> 06:35:23.844
 making sure that they have the 
ability to leverage services as 

06:35:23.845 --> 06:35:26.255
well.  Right now Google Play 
services is rolling out a new 

06:35:26.481 --> 06:35:30.192
version and one of the APIs that
 is exposed is what we refer to 

06:35:30.737 --> 06:35:35.551
as verify apps API.  We have 
talked about verify apps which a

06:35:35.766 --> 06:35:39.062
 mechanism used to evaluate on a
 device and to check for a user 

06:35:39.365 --> 06:35:42.776
on a device whether something is
 potentially harmful or a piece 

06:35:42.777 --> 06:35:46.493
of malware.  What we have done 
with the Verify Apps API is made

06:35:46.494 --> 06:35:50.103
 that available to any 
application on the device.  If 

06:35:50.104 --> 06:35:52.166
you are concerned about whether 
your application should be 

06:35:52.497 --> 06:35:55.119
running you can check are there 
any other apps on this device I 

06:35:55.343 --> 06:35:58.710
should be worried about.  What 
are those applications?  Let me 

06:35:58.847 --> 06:36:01.274
know what they are.  And you can
 evaluate whether or not you 

06:36:01.275 --> 06:36:03.224
think it's an appropriate 
environment as the application 

06:36:03.225 --> 06:36:06.270
developer for your application 
to continue to execute.  That 

06:36:06.271 --> 06:36:08.795
builds on other technologies 
that we have provided in the 

06:36:08.796 --> 06:36:14.843
past.  Last year at Google I/O I
 referenced the safety net 

06:36:16.234 --> 06:36:20.374
attestation  attestation API.  
We use to determine whether it 

06:36:20.725 --> 06:36:24.673
is a certified secure Android  
device.  We provide that as a 

06:36:24.892 --> 06:36:29.590
signed statement.  You invoke 
the attestation API it hits a 

06:36:29.917 --> 06:36:34.500
round troop off a server.  We do
 an evaluation of the software 

06:36:34.501 --> 06:36:36.798
integritiy on the device.  And 
make a statement back to you, 

06:36:37.149 --> 06:36:39.644
yes, this looks good or no, it 
doesn't.  This is one of the 

06:36:39.741 --> 06:36:43.690
critical pieces of technology 
that allows for delivery of, for

06:36:43.691 --> 06:36:45.427
 example, Android pay where 
there is a requirement that this

06:36:45.428 --> 06:36:48.721
 be a certified device and it be
 operating in that environment. 

06:36:49.065 --> 06:36:51.685
 It's an API we have made 
available to any application 

06:36:51.790 --> 06:36:54.515
that wants to take advantage of 
it.  We are going to continue 

06:36:55.062 --> 06:37:00.553
adding these technologies.  
Captcha was a technology 

06:37:01.742 --> 06:37:03.823
introduced 10 years ago to do 
quick evaluation of whether or 

06:37:03.824 --> 06:37:07.861
not the entity interacting with 
your Web UI was actually a 

06:37:08.179 --> 06:37:11.155
human.  That's now being 
provided as a safety net API as 

06:37:11.491 --> 06:37:18.268
well, so in the context of your 
evaluation you can you a 

06:37:18.269 --> 06:37:21.897
re-Captcha to see whether there 
is automation of.  This is low 

06:37:22.191 --> 06:37:24.524
cost services that you want to 
continue to make available for 

06:37:24.525 --> 06:37:28.545
free but you want to cut down on
 the amount of abuse that's 

06:37:28.546 --> 06:37:31.183
coming through bot farms and 
other automation, very valuable 

06:37:31.513 --> 06:37:35.871
for large scale Web properties. 
   One of the things that's come

06:37:35.872 --> 06:37:39.481
 out of us being able to 
understand what's going on in 

06:37:39.482 --> 06:37:41.996
the ecosystem is the ability to 
revisit some of the technologies

06:37:42.209 --> 06:37:45.288
 that are actually baked into 
the core platform.  Unknown 

06:37:45.715 --> 06:37:48.446
sources was a flag that was 
introduced when Android was 

06:37:48.990 --> 06:37:53.039
launched almost eight years ago.
  That gave the individual the 

06:37:53.040 --> 06:37:56.539
ability to change  where they 
want to do install applications 

06:37:56.990 --> 06:37:59.725
from.  Over the last few years 
we have begun to understand what

06:37:59.726 --> 06:38:02.434
 those install patterns look 
like.  We have been able to 

06:38:02.435 --> 06:38:04.855
analyze what the risks are that 
users are exposed to.  We have 

06:38:05.081 --> 06:38:07.705
come to appreciate that Google 
Play is a safer place to install

06:38:07.928 --> 06:38:10.995
 applications from, but we have 
also come to appreciate that 

06:38:11.425 --> 06:38:14.024
there many other safe places to 
install applications from as 

06:38:14.025 --> 06:38:17.013
well.  So we want to simplify 
for the user the ability to 

06:38:17.232 --> 06:38:20.356
install from other safe places 
without introducing the risk of 

06:38:20.976 --> 06:38:23.213
installing from just your R 
anywhere that's out there.  One 

06:38:23.214 --> 06:38:26.975
of the changes introduced with 
Android O is a modification to 

06:38:27.601 --> 06:38:31.022
how unknown sources works.  Now 
it's on a per application  

06:38:31.556 --> 06:38:34.724
basis.  You decide, yes, that 
app store, it can install, but 

06:38:34.725 --> 06:38:37.355
that doesn't mean everybody can 
install and that's targeted at 

06:38:37.667 --> 06:38:41.170
making sure that apps are 
installed from more trustworthy 

06:38:41.171 --> 06:38:44.145
users where the user has 
designated that trust to the 

06:38:44.460 --> 06:38:47.839
specific entity.  Those are the 
changes we are making at the 

06:38:47.840 --> 06:38:52.134
platform level.  I have Xiaowen 
Xin here who will give insight 

06:38:52.217 --> 06:38:57.691
into some of the other changes 
we are m aking. 

06:38:57.692 --> 06:38:59.647
   &gt;&gt; XIAOWEN XIN:  Thank you, 
Adrian.  My name is Xiaowen Xin,

06:38:59.648 --> 06:39:03.496
 I'm a product manager for 
Android platform security and 

06:39:03.704 --> 06:39:07.078
today in this next section of 
the talk I with like to give you

06:39:07.079 --> 06:39:09.724
 an overview of the changes we 
have made to the operating 

06:39:09.725 --> 06:39:13.456
system to make it more secure  
as well as the hard net.  We 

06:39:13.457 --> 06:39:17.382
have  collected a lot of data on
 the impact and adongs of these 

06:39:17.928 --> 06:39:20.229
features.  I'm excited to share 
some of that with you.  So let's

06:39:20.443 --> 06:39:23.078
 dig in.  We will start with the

06:39:26.145 --> 06:39:29.203
basics.  And that begins with 
verified boot.  So verified boot

06:39:29.857 --> 06:39:34.875
 is Android's secure beauty 
mechanism where we check the 

06:39:34.876 --> 06:39:38.154
signature of every stage it 
boots before running it.  That 

06:39:38.155 --> 06:39:41.455
has come a long way in the last 
few years with Android 

06:39:41.787 --> 06:39:46.935
marshmallow we started requiring
 Verified Boot for all devices. 

06:39:46.936 --> 06:39:52.607
 With Android knew gat that 
became, Verified Boot is now 

06:39:52.608 --> 06:39:55.652
strictly enforced and now with 
Android O we are providing 

06:39:55.985 --> 06:40:00.487
guidance to our AM ecosystem to 
add a couple more security 

06:40:01.366 --> 06:40:06.545
enhancements to round out the 
features of verified boot 

06:40:06.546 --> 06:40:10.352
starting with protection.  On 
compatible devices on an droitd 

06:40:10.898 --> 06:40:13.744
O Verified Boots will no longer 
bite an operating system that's 

06:40:14.023 --> 06:40:19.951
known to have been back to an 
older potentially more 

06:40:19.952 --> 06:40:21.952
vulnerable version.  Also with 
Verified 

06:40:24.341 --> 06:40:26.341
Boot, we have hardened the 
unlocking mechanism.  What that 

06:40:26.850 --> 06:40:30.582
means is any bugs or any 
compromise in the Android 

06:40:31.011 --> 06:40:35.807
operating system cannot unlock 
the boot loader by interacting 

06:40:35.808 --> 06:40:42.603
with the boot loader itself. 
   So while Verified Boots 

06:40:42.604 --> 06:40:46.966
protects your operating system, 
Android uses encryption to 

06:40:46.967 --> 06:40:48.967
protect user

06:40:50.410 --> 06:40:52.410
 data, and that has also come a 
long way in the last three 

06:40:53.427 --> 06:40:55.708
years.  As of Android march 
mellow all compatible d evices 

06:40:55.709 --> 06:40:57.900
are required to support 
encryption.  They are required 

06:40:58.236 --> 06:41:07.216
to be enabled by default.  As of
 Android Nougat we added file 

06:41:07.434 --> 06:41:10.262
based encryption where we ebb 
crypt different storage areas 

06:41:10.263 --> 06:41:15.094
with different keys.  File based
  encryption made the user 

06:41:15.095 --> 06:41:20.549
experience much better without 
sacrificing security.  As an app

06:41:20.770 --> 06:41:23.733
 developer if you are interested
 in running your app before the 

06:41:24.380 --> 06:41:28.207
user first signs in, before the 
user first unlocks their device,

06:41:28.416 --> 06:41:32.253
 check out our FBE documentation
 on the developer website.  With

06:41:32.474 --> 06:41:36.534
 Android O we have continued to 
improve on FBE and added in a 

06:41:36.535 --> 06:41:40.452
few more features such as key 
ejection. 

06:41:40.453 --> 06:41:43.730
   So how are we doing with 
encryption?  We have listened to

06:41:44.047 --> 06:41:47.130
 the data and seen that over the
 last few years encryption on 

06:41:47.448 --> 06:41:49.448
Android, we have seen a 
significant 

06:41:52.071 --> 06:41:55.872
adoption.  Android devices 
encryption was very, very low, 

06:41:55.873 --> 06:42:03.104
on march mellow, that jumped to 
25% and in Nougat we are  seeing

06:42:03.627 --> 06:42:06.703
 around 80%.  We started 
requiring eniption cription on 

06:42:06.704 --> 06:42:10.228
compatible devices as off 
Android marshmallow.  The reason

06:42:10.229 --> 06:42:13.593
 the number didn't jump 
immediately to 100% is due to a 

06:42:13.594 --> 06:42:17.853
couple of factors, one is a lot 
of marshmallow devices were 

06:42:17.854 --> 06:42:21.703
upgrades from Lollipop so those 
devices were not required to be 

06:42:22.247 --> 06:42:24.889
encrypted when they shipped and 
also because of the wide variety

06:42:25.117 --> 06:42:28.266
 of dough vises supported by 
Android, we still see a lot of 

06:42:28.574 --> 06:42:31.873
very local performance devices 
that are not yet capable of 

06:42:32.313 --> 06:42:34.263
supporting encryption.  
Nevertheless, we could expect 

06:42:34.264 --> 06:42:39.518
that number to continue to 
increase, and we see that 

06:42:39.519 --> 06:42:42.062
encryption on Android is the 
norm and no longer the 

06:42:43.497 --> 06:42:45.551
exception. 
   Another way in which we are 

06:42:46.087 --> 06:42:50.049
protecting user data is to 
improve the secure lock screen 

06:42:50.050 --> 06:42:53.323
experience.  Request Android 
marshmallow we introduced 

06:42:53.546 --> 06:42:55.952
official support for finger 
print sensors and that had a 

06:42:56.365 --> 06:42:59.990
significant impact on the 
adoption rate of secure lock 

06:43:02.312 --> 06:43:04.912
screen.  Also we have been 
working with 

06:43:09.171 --> 06:43:12.450
manufacturers to make the 
implementation of a secure lock 

06:43:12.451 --> 06:43:15.516
screen much more secure.  From 
the very beginning, finger print

06:43:16.060 --> 06:43:19.450
 implementation it went through 
preliminary eliminated and 

06:43:20.415 --> 06:43:25.797
hardware.  Such as the TE.  With
 Android Nougat we started 

06:43:25.798 --> 06:43:29.417
requiring pin pad verification 
take place in secure hardware 

06:43:29.652 --> 06:43:34.214
and with Android O we are adding
 in support for tamper resistant

06:43:34.761 --> 06:43:37.839
 hardware.  So similar to the 
chip that you see in credit 

06:43:37.920 --> 06:43:41.447
cards today, Android now 
supports having that chip be 

06:43:41.986 --> 06:43:46.387
embedded in the hardware and 
using that chip to do pin pat 

06:43:46.676 --> 06:43:49.974
person password verification. 
   This significantly raises the

06:43:49.975 --> 06:43:54.884
 bar, makes it much harder to 
perform a his cal attack against

06:43:55.214 --> 06:43:57.214
 a device to bypass the lock 

06:44:00.261 --> 06:44:03.791
screen.  So how are we doing 
with lock screen adoption.  We 

06:44:03.792 --> 06:44:06.492
see that that has also increased
 quite a bit over the last few 

06:44:08.264 --> 06:44:14.148
years.  On Lollipop devices 
adoption was only about half and

06:44:14.714 --> 06:44:19.720
 half.  That increased to 70% on
 Android Nougat devices and a 

06:44:20.294 --> 06:44:24.198
lot of that is driven by the 
fact that a lot of devices have 

06:44:24.199 --> 06:44:29.352
finger print sensor.  And finger
 print devices are much more 

06:44:29.442 --> 06:44:33.938
likely to have a secure lock 
screen then across the Android 

06:44:33.939 --> 06:44:38.657
device system.  We do see apps 
such as Android Pay and 

06:44:38.884 --> 06:44:42.126
Enterprise apps require enabling
 secure lock screen to function 

06:44:42.127 --> 06:44:44.871
properly so that might is also 
have had an effect. 

06:44:44.872 --> 06:44:49.162
   As developers, you might want
 to consider taking, really 

06:44:49.163 --> 06:44:52.902
taking  advantage of the lock 
screen and incorporating that 

06:44:53.087 --> 06:44:57.045
into your application.  We see a
 lot of apps incorporating 

06:44:57.046 --> 06:44:59.046
finger print 

06:45:03.253 --> 06:45:06.556
authentication.  So while 
encryption and lock screen 

06:45:06.557 --> 06:45:09.704
protects user d ata.  Android 
has a robust permission model to

06:45:09.921 --> 06:45:12.770
 give you control over app 
access to data.  That has also 

06:45:13.319 --> 06:45:15.711
improved quite a bit over the 
last few years. 

06:45:16.375 --> 06:45:18.673
   With Android marshmallow, we 
introduced one time permissions 

06:45:18.899 --> 06:45:22.844
and we see great adoption there.
  With Android Nougat and 

06:45:22.925 --> 06:45:25.567
Android O, we are continuing to 
update the permissions model to 

06:45:25.790 --> 06:45:31.571
make it more usable by good apps
 and less abusable by bad apps. 

06:45:31.572 --> 06:45:34.508
 Before we go into the details 
of that, let's check out how run

06:45:34.855 --> 06:45:40.016
 time permissions are doing.  We
 looked into permission 

06:45:40.017 --> 06:45:45.059
requests, and so for each 
request for, let's say the 

06:45:45.361 --> 06:45:49.517
camera permissions, we see that 
about 65% of users, 65% of those

06:45:49.518 --> 06:45:53.792
 requests are accepted by the 
users.  So that's towards one 

06:45:53.793 --> 06:45:56.640
end of the spectrum.  Oardz the 
other end of the spectrum, we 

06:45:56.961 --> 06:46:02.003
see that for the phone group of 
permissions, only about 44% of 

06:46:02.004 --> 06:46:04.513
the permission requests are 
accepted by the user.  So users 

06:46:04.630 --> 06:46:09.875
are actually very  judicious in 
controlling which apps have 

06:46:09.876 --> 06:46:12.273
access to what data. 
   So I think there are a couple

06:46:12.379 --> 06:46:16.960
 of take aways here for apps.  
The big thing is, of course, the

06:46:16.961 --> 06:46:20.381
 follow up permissions best 
practices so you can take 

06:46:20.467 --> 06:46:22.559
advantage of one time 
permissions and provide the best

06:46:22.782 --> 06:46:25.199
 user experience.  As an 
example, you should always make 

06:46:25.518 --> 06:46:28.040
sure that users know why you are
 asking for a particular 

06:46:28.356 --> 06:46:32.173
permission and be able to fail 
gracefully if they decline that 

06:46:32.174 --> 06:46:34.596
permission request.  In some 
cases you may not need to ask 

06:46:34.923 --> 06:46:38.443
for per submission.  For 
example, you may be able to use 

06:46:38.621 --> 06:46:42.389
a contacts picture instead of 
requesting a contact permission.

06:46:44.992 --> 06:46:48.270
updating our permissions model 
is to make it less abusable by 

06:46:48.271 --> 06:46:52.739
bad apps.  So take ransom were 
as an example.  We have seen 

06:46:52.740 --> 06:46:55.823
instances of this type of 
malware that take over your 

06:46:56.151 --> 06:47:00.314
device and then demand payment 
before they let you back in. 

06:47:00.620 --> 06:47:04.766
   And they typically abuse two 
permissions.  First they use the

06:47:04.767 --> 06:47:08.738
 system alert with no permission
 to display an overlay on top of

06:47:08.739 --> 06:47:12.550
 your entire screen so that you 
can't interact properly with 

06:47:12.762 --> 06:47:17.264
your device.  To address that on
 Android O we have changed the 

06:47:17.265 --> 06:47:21.424
system alert window permission 
slightly so that overlays, app 

06:47:21.425 --> 06:47:25.576
overlays can no longer cover up 
critical system Windows.  They 

06:47:25.783 --> 06:47:29.734
can no longer cover up the lock 
screen the status bar and the 

06:47:30.602 --> 06:47:35.065
IEM as examples.  Also when 
there is an overlay, an app 

06:47:35.066 --> 06:47:38.810
overlay being shown there is 
also a notify indication users 

06:47:38.811 --> 06:47:42.411
can click on to hide the overlay
 window. 

06:47:42.412 --> 06:47:49.095
   Ransom were also  ware, they 
used it to prevent their own 

06:47:49.293 --> 06:47:54.354
uninstall and change your pass  
code to lock you out of your 

06:47:54.355 --> 06:47:59.917
device.  Over the last few years
 we have been descoping admin 

06:47:59.918 --> 06:48:03.633
permission and replacing with a 
less abusable alternative.  An 

06:48:03.853 --> 06:48:09.576
driewd Nougats bad apps can no 
longer use admin permission to 

06:48:10.083 --> 06:48:12.391
prevent uninstall and they can't
 use it to change the pass code 

06:48:12.483 --> 06:48:16.642
if you have run set. 
   So -- one set. 

06:48:16.643 --> 06:48:21.334
   So learn more we have a talk,
 one of our co-workers gave at a

06:48:21.460 --> 06:48:24.966
 different conference, so check 
that out.  Another way in which 

06:48:25.183 --> 06:48:28.451
we have updated permissions 
model in order to protect users 

06:48:28.452 --> 06:48:32.634
it to take a stronger stance on 
privacy.  Over the last few 

06:48:32.960 --> 06:48:36.108
releases of Android, we have 
been steadily removing access to

06:48:36.109 --> 06:48:40.720
  persistent device identifiers.
  For example, on Android O, the

06:48:40.721 --> 06:48:46.642
 Android ID property is now 
scoped peruser and per app. 

06:48:46.643 --> 06:48:49.593
   The net.host name property 
which contains the network host 

06:48:49.683 --> 06:48:54.078
name of your device is now 
empty.  To learn more about the 

06:48:54.079 --> 06:48:58.434
changes in Android O regarding 
persistent device identifiers, 

06:48:58.435 --> 06:49:02.809
check out the blog post on the 
screen that will tell you all of

06:49:02.810 --> 06:49:04.810
 the changes as well as best 

06:49:09.475 --> 06:49:12.461
practices.  So everything I have
 talked about so far relates to 

06:49:12.462 --> 06:49:16.592
installed apps.  So what about 
Instant Apps.  If you guys were 

06:49:16.720 --> 06:49:19.324
here in the last session, 
actually in this tent, there is 

06:49:19.325 --> 06:49:23.573
a session about Instant Apps.  
So Instant Apps for those who 

06:49:23.574 --> 06:49:26.774
don't know, is a future coming 
to Android where you can click 

06:49:27.205 --> 06:49:30.265
on a URL and open it immediately
 in an Android App even if you 

06:49:30.266 --> 06:49:35.193
don't have the app installed. 
   So that has a potential to 

06:49:35.194 --> 06:49:38.364
greatly improve user experience 
as well as increasing the app's 

06:49:38.804 --> 06:49:42.834
user engagement and conversion 
numbers.  On the other hand, 

06:49:42.835 --> 06:49:46.681
opening up arbitrary URLs and 
apps also comes with associated 

06:49:47.022 --> 06:49:51.182
security and privacy risks.  So 
how do we want to address that? 

06:49:51.183 --> 06:49:55.203
 We are addressing that by 
creating an updated provisions 

06:49:55.204 --> 06:49:57.846
model that is really tailored to
 the capabilities and 

06:49:58.274 --> 06:50:01.452
characteristics of an Android 
Instant App.  In particular, 

06:50:01.453 --> 06:50:06.048
Instant Apps will have security 
and privacy best practices baked

06:50:06.049 --> 06:50:11.725
 in.  For example, Instant Apps 
must use run time permissions.  

06:50:11.726 --> 06:50:16.651
And Instant Apps will use HTTPS 
instead of HTTP by default.  

06:50:16.747 --> 06:50:19.396
There are a lot of Android 
permissions that Instant Apps 

06:50:19.949 --> 06:50:24.359
cannot access.  She cannot 
access any persistent device i 

06:50:24.360 --> 06:50:27.188
dentifiers. 
   And a better example is she 

06:50:27.189 --> 06:50:31.201
can't access the  contacts 
permission.  You must use  a 

06:50:32.071 --> 06:50:35.261
contacts picker instead.  As app
 developers if you make a normal

06:50:35.262 --> 06:50:38.385
 act deployable as an in
stability app.  It makes injure 

06:50:38.652 --> 06:50:41.602
normal app much better too 
because you are automatically 

06:50:41.603 --> 06:50:44.987
using security and  privacy best

06:50:49.382 --> 06:50:53.747
 practices.  As userrers your 
device becomes safer too.  So we

06:50:53.748 --> 06:50:58.428
 are excited about the Instant 
Apps model. 

06:50:58.429 --> 06:51:01.734
   So while permissions is 
related to control app access to

06:51:01.735 --> 06:51:06.970
 data, within the operating 
system itself, we use a Sandbox 

06:51:06.971 --> 06:51:10.714
device on every process on every
 app to limit the ways in which 

06:51:11.144 --> 06:51:14.610
a  compromise in one can affect 
the others.  For many years in 

06:51:14.611 --> 06:51:18.459
Android we have been steadily 
improving the application 

06:51:18.680 --> 06:51:22.290
Sandbox in force with SELinux.  
And we will see how that's doing

06:51:22.291 --> 06:51:27.314
 in the next slide.  And Android
 Nougat we applied the same 

06:51:27.315 --> 06:51:29.506
Sandboxing principles to the 
media server to significantly 

06:51:29.850 --> 06:51:34.764
harden it.  And now in Android O
 with Project Treble.  We are 

06:51:35.206 --> 06:51:40.893
taking isolation to the next 
level by  putting device 

06:51:41.371 --> 06:51:44.583
specific components into their 
own Sandboxes. 

06:51:44.584 --> 06:51:50.509
   So how are we doing there?  
We have data into the Android 

06:51:50.751 --> 06:51:53.354
security bulletin data for the 
first mor months of the year.  

06:51:53.682 --> 06:51:59.489
We looked at the kernel bugs and
 almost half of the kernel bugs,

06:51:59.811 --> 06:52:05.811
 SELinux we do see  reduced very
 vairt of the kernel bugs.  By 

06:52:06.142 --> 06:52:09.867
making parts of the kernel 
unreachable by untrusted apps we

06:52:09.868 --> 06:52:13.035
 made it so that it's harder to 
exploit those parts of the 

06:52:13.036 --> 06:52:15.143
kernel and that's what SELinux 
helps with.

06:52:20.929 --> 06:52:24.089
took the same Sandboxing and 
isolation techniques and applied

06:52:24.309 --> 06:52:27.370
 it to the media server.  In 
older versions of Android, the 

06:52:27.700 --> 06:52:32.492
media server used to be this one
 giant monolithic complex 

06:52:32.493 --> 06:52:36.987
process that had access to 
permissions and Android we broke

06:52:37.215 --> 06:52:40.934
 that up into six different 
processes and put that into 

06:52:40.935 --> 06:52:43.659
individual Sandboxes with much 
tighter permissions so that a 

06:52:43.890 --> 06:52:47.058
compromise to any one of them 
only grants access to a small 

06:52:47.059 --> 06:52:50.667
subset of the permissions and 
not the permissions of the 

06:52:50.668 --> 06:52:52.668
entire media server.  

06:52:55.701 --> 06:52:58.549
We also integrated integer force
 where we are able to detect 

06:52:58.995 --> 06:53:01.818
memory corruption that results 
from integer overflows.  This 

06:53:02.912 --> 06:53:05.442
helps us find a lot more bugs 
earlier in the development 

06:53:05.671 --> 06:53:08.709
process and limited the severity
 of any bugs that occur at one 

06:53:08.963 --> 06:53:13.842
time. 
   So how do we do there?  We 

06:53:13.843 --> 06:53:19.325
looked into the bugs, the 
security bulletin bugs for the 

06:53:19.326 --> 06:53:23.466
first four months of the year 
and we sue that although media 

06:53:23.467 --> 06:53:27.631
stack bucks that affected 
marshmallow more than 20% are no

06:53:28.521 --> 06:53:31.362
 longer security issues and a 
few more bugs on top of that 

06:53:31.363 --> 06:53:34.879
downgraded in severity from 
marshmallow to end.

06:53:41.968 --> 06:53:46.873
 in Android O, we took Sandbox 
in isolation to a whole new 

06:53:47.210 --> 06:53:50.270
level with Project Treble.  With
 Project Treble.  We are putting

06:53:50.598 --> 06:53:54.209
 Android, the Android OS 
framework and the vendor i 

06:53:54.210 --> 06:53:57.841
mplementation, the device 
specific vendor implementation 

06:53:57.842 --> 06:54:00.453
into different process that's 
communicate with aeach other 

06:54:00.454 --> 06:54:03.539
using a standard vendor 
interface.  This vendor 

06:54:03.540 --> 06:54:05.540
interface will be maintained 
from version to version, which 

06:54:06.035 --> 06:54:12.468
means a newer an destroyed OS 
framework will run with  minimal

06:54:12.807 --> 06:54:15.442
 changes on top of an older 
device.  That paves the way for 

06:54:15.443 --> 06:54:20.045
us to release new Android OS 
versions with shiny new features

06:54:20.046 --> 06:54:26.505
 and new security enhancements, 
and have it be adopted much more

06:54:26.506 --> 06:54:29.158
 quickly by the ecosystem.  So 
that's very exciting for 

06:54:29.823 --> 06:54:31.823
security. 
   Also the vendor interface 

06:54:31.961 --> 06:54:35.791
allows us to enforce a boundary 
between the framework and the 

06:54:36.222 --> 06:54:39.376
vendor implementation so that we
 can use it to limit the ways in

06:54:39.511 --> 06:54:41.511
 which a bug in one can affect 
the other.

06:54:46.728 --> 06:54:51.209
back to the media server.  As 
part of Project Treble, we have 

06:54:51.210 --> 06:54:54.296
rearchitected the media server 
again in Android O, and taken 

06:54:54.822 --> 06:54:59.415
the audio camera and DRM, 
hardware obstruction layers and 

06:54:59.416 --> 06:55:02.695
put them into different 
Sandboxes.  What that lets us do

06:55:02.918 --> 06:55:07.051
 is to say the firmware pieces 
actually now no longer need 

06:55:07.052 --> 06:55:11.886
access to the kernel components,
 the kernel drivers that 

06:55:11.887 --> 06:55:17.917
comproal media play back.  So we
 can put the PCs into tiny 

06:55:17.918 --> 06:55:21.627
Sandboxes as well and they an 
exploit compromising the kernel 

06:55:21.628 --> 06:55:24.366
it's harder for the compromise 
to exploit certain 

06:55:28.834 --> 06:55:33.660
areas of the kernel.
   All right.  So speaking of 

06:55:33.661 --> 06:55:40.090
the kernel, why is kernel, why 
is the kernel important?  In the

06:55:40.241 --> 06:55:46.563
 last year, we have spent a lot 
of time hardening the kernel.  

06:55:46.564 --> 06:55:51.582
And we did that for one major 
reason.  We see the kernel bytes

06:55:51.801 --> 06:55:55.217
 are becoming a much larger 
proportion of Android security 

06:55:55.218 --> 06:56:01.248
bugs where there as in 2014 
about 4% of Android security 

06:56:01.249 --> 06:56:03.754
bugs were kernel bugs.  That 
number increased significantly 

06:56:05.709 --> 06:56:09.426
to 44%.  And there are probably 
a couple of returns for  returns

06:56:09.427 --> 06:56:11.498
 for this. 
   One is we made progress in 

06:56:12.068 --> 06:56:14.576
hardening the user space so, for
 example, the application 

06:56:14.916 --> 06:56:18.299
Sandbox enforced by SELinux 
that's gotten better over time 

06:56:18.300 --> 06:56:20.369
and in order to break out of 
that application Sandbox, in 

06:56:20.596 --> 06:56:25.190
order to break out of the 
SELinux Sandbox, you have to 

06:56:25.191 --> 06:56:29.886
compromise the kernel.  Also the
 kernel is very powerful.  It 

06:56:30.212 --> 06:56:34.468
has a large attack surface.  
It's kind of like the king piece

06:56:34.469 --> 06:56:38.858
 in a game of chess.  You take 
the kernel and you win the game.

06:56:38.859 --> 06:56:42.773
  So we decided to spend a lot 
more time thinking about how to 

06:56:42.774 --> 06:56:48.591
harden the kernel.  So we looked
 into what causes kernel bugs.  

06:56:48.592 --> 06:56:53.505
We looked into the data from 
2014 and 2016, and categorized 

06:56:53.506 --> 06:56:56.243
different kernel bugs into 
different categories and we see 

06:56:56.244 --> 06:57:00.501
that the largest category 
accounting for about 45% is this

06:57:00.969 --> 06:57:06.954
 missing and incorrect bounce 
check when we are copying data 

06:57:06.955 --> 06:57:10.599
from the user space to the k 
ernel.  We presented this exact 

06:57:10.934 --> 06:57:16.052
same data to Linux upstream 
community and to the them last 

06:57:16.275 --> 06:57:18.773
year and to their credit they 
were responsive.  Within a fume 

06:57:18.774 --> 06:57:24.134
of months they gave us a 
featured called hardened user 

06:57:24.135 --> 06:57:28.091
copy that addressed kernel bugs.
  We have since then back 

06:57:28.645 --> 06:57:33.457
printed user copy to the Android
 kernels and we have invented a 

06:57:33.458 --> 06:57:39.353
few more security features on  
on betop of that.  We have KSLR 

06:57:39.354 --> 06:57:42.529
and many others so all of these 
kernel features taken together, 

06:57:42.965 --> 06:57:45.691
we will expect that they will 
have a huge impact on the number

06:57:45.923 --> 06:57:48.909
 and severity of kernel bugs in 
the future.

06:57:55.547 --> 06:57:59.162
protecting the kernel is to 
reduce its attack surface.  We 

06:57:59.163 --> 06:58:05.273
are using a technology called 
Seccomp to enforce a white list 

06:58:05.274 --> 06:58:09.012
of system calls that apps can 
use to communicate with the 

06:58:09.013 --> 06:58:12.404
kernel.  Any system calls not on
 the white list will be blocked 

06:58:14.136 --> 06:58:16.891
by the Seccomp filter.  So 
everything that is on the white 

06:58:17.445 --> 06:58:21.471
list, that includes the system 
calls made by all public 

06:58:21.472 --> 06:58:25.310
libraries that is put in 
Android.  So if you have tested 

06:58:25.311 --> 06:58:29.682
in of the top apps as well as 
Google apps so we expect that 

06:58:29.683 --> 06:58:34.163
this won't actually impact 
almost any app, but if you do 

06:58:34.164 --> 06:58:38.232
have an app that uses a lot of 
native code, we do encourage you

06:58:38.233 --> 06:58:41.823
 to test that app on an Android 
O device to make sure that any 

06:58:41.923 --> 06:58:45.347
system calls that you make are 
not affected by the new Seccomp 

06:58:46.014 --> 06:58:49.398
filter. 
   Having this white list of 

06:58:49.399 --> 06:58:55.170
kernel interfaces allows us to 
really focus and concentrate our

06:58:55.609 --> 06:58:58.435
 quality assurance efforts on 
this well defined wit list and 

06:58:58.666 --> 06:59:02.827
also be sure, be more confident 
that the rest of the kernel is 

06:59:02.828 --> 06:59:05.670
protected and that it's much 
harder to exploit the rest of 

06:59:05.783 --> 06:59:07.783
the 

06:59:09.292 --> 06:59:11.901
kernel.  Seccomp is actually not
 new to an destroyed.  Chrome 

06:59:12.129 --> 06:59:17.256
has been using it quite a while 
in fact.  To Chrome has their 

06:59:17.257 --> 06:59:21.232
own app defined Seccomp filter 
around the renderer process.

06:59:26.449 --> 06:59:30.637
to make a few guarantees they 
want to guarantee that the 

06:59:30.638 --> 06:59:35.651
renderer process can read global
 states but it cannot modified 

06:59:35.857 --> 06:59:38.603
global state and in fact this 
has been quite useful quite a 

06:59:38.604 --> 06:59:42.970
few times.  Recently we have 
seen a few kernel bugs that were

06:59:43.285 --> 06:59:51.726
 unreachable from renderer 
relevant Seccomp. 

06:59:51.727 --> 06:59:59.626
   Okay.  So that was quick the 
 of the  relevant  Android now 

06:59:59.949 --> 07:00:05.320
turn  app security.  particular 
we talk about a couple that 

07:00:05.321 --> 07:00:07.321
improve the your 

07:00:10.227 --> 07:00:12.227
apps.  First, go Web

07:00:15.480 --> 07:00:22.026
 view.  So Webview has with 
Android since very  It shipped, 

07:00:22.027 --> 07:00:27.281
until KitKat it with the 
operating system means that is 

07:00:27.680 --> 07:00:32.969
not easy us to bugs and get them

07:00:32.970 --> 07:00:36.915
   We addressed that with 
Lollipop when made Webview 

07:00:36.916 --> 07:00:39.926
separate APK that updatable 
every six weeks by the Play 

07:00:40.359 --> 07:00:44.257
Store.  And now with Android O 
we have added quite a bit more, 

07:00:44.258 --> 07:00:49.033
a few more security features to 
Webview. 

07:00:49.034 --> 07:00:53.869
   In particular, the Webview 
renderer process similar to how 

07:00:53.870 --> 07:00:57.256
it runs on Chrome runs as an 
isolated process separate from 

07:00:57.257 --> 07:01:00.982
the  rest of your app.  This 
means that crashes or 

07:01:00.983 --> 07:01:04.470
compromises to renderer process 
no longer affects your app and 

07:01:04.471 --> 07:01:09.740
any website that is able to 
exploit the progress can't use 

07:01:10.139 --> 07:01:16.181
that to exploit the rest of your
 app.  The practice is put into 

07:01:16.182 --> 07:01:20.891
a tight Sandbox using Seccomp 
and other technologies, it can't

07:01:20.892 --> 07:01:24.182
 write to the network, talk to 
the network or write to disk on 

07:01:24.183 --> 07:01:28.103
its own.  That protects the rest
 of the operating system for 

07:01:28.104 --> 07:01:30.104
exploits in the rendering 
process.

07:01:36.763 --> 07:01:39.259
browsing.  Safe browsing has 
been available on Chrome for 

07:01:40.026 --> 07:01:43.945
quite a long time.  When 
visitors visit a website known 

07:01:43.946 --> 07:01:48.240
to be malicious, safe browse 
will show a warning and prompt a

07:01:48.430 --> 07:01:52.513
 user before continuing.  Safe 
browsing has been showing useful

07:01:52.514 --> 07:01:56.544
 warnings to users more than 250
 million times per month, and 

07:01:56.545 --> 07:02:00.824
now it's coming to W ebview on 
Android. 

07:02:00.825 --> 07:02:03.905
   Safe  browsing is actually 
implemented within the Webview 

07:02:05.525 --> 07:02:08.853
APK updated ifer six weeks about
 the store, you change your app 

07:02:09.286 --> 07:02:11.286
protect your users almost

07:02:14.723 --> 07:02:17.794
 immediately.  A very important 
aspect of app security is device

07:02:17.795 --> 07:02:24.801
 and user authentication.  So 
why is device authentication 

07:02:24.802 --> 07:02:27.725
important?  If you are using 
your phone to buy things or to 

07:02:27.933 --> 07:02:30.700
unlock your home door, you want 
to make sure that no one can 

07:02:30.808 --> 07:02:34.187
pretend to be your phone. 
   And so what you can do is you

07:02:34.419 --> 07:02:41.520
 can use the Android Q store API
 to u niquely identify your 

07:02:42.397 --> 07:02:46.872
device.  The benefit of using 
the key store keys are protected

07:02:47.201 --> 07:02:51.462
 by secure hardware such as 
trusted execution environment so

07:02:51.463 --> 07:02:54.527
 even in the event of kernel 
compromise no one can extract 

07:02:54.528 --> 07:02:57.599
the keys and clone them to 
another device. 

07:02:57.600 --> 07:03:01.101
   There is always one question 
remaining though, which is how 

07:03:01.428 --> 07:03:05.567
do you actually know that those 
keys are properly protected.  

07:03:05.568 --> 07:03:08.665
Let's say you are on the server 
side, how does your server 

07:03:08.776 --> 07:03:11.418
verify that you are talking to a
 device using keys that are 

07:03:11.732 --> 07:03:14.671
properly protected by secure 
hardware?  This is where key 

07:03:15.341 --> 07:03:20.055
attestation comes in.  With 
Android O, we are adding in a 

07:03:20.797 --> 07:03:23.854
attestation API for compatible 
device where's at a high level 

07:03:24.075 --> 07:03:27.375
your server can talk directly to
 the secure hardware, the trusts

07:03:27.376 --> 07:03:31.610
 execution environment on the 
device, and ask it to give you 

07:03:32.082 --> 07:03:35.038
signed assertions about the 
properties of the keys that it 

07:03:35.039 --> 07:03:37.651
protects as well as about the 
properties of the device. 

07:03:37.652 --> 07:03:42.551
   So, for example, the key 
attestation API can tell you 

07:03:42.552 --> 07:03:46.813
whether the is protected by the 
securehardware.  It can also 

07:03:46.814 --> 07:03:51.134
tell you, for example, whether 
Verified Boot past on that 

07:03:51.316 --> 07:03:55.798
particular deTheattestation 
certificate chain on compatible

07:03:56.236 --> 07:03:59.097
devices is actually rooted ina 
Google certificate.  That's how 

07:03:59.098 --> 07:04:03.029
knowthatdevice itself is Google 
and is compatible with Google 

07:04:03.397 --> 07:04:05.397
standards.

07:04:08.174 --> 07:04:12.165
   All right.  So was device 
authentication, what about user 

07:04:12.773 --> 07:04:16.485
authentication.  Weare happy to 
let everyone that the next 

07:04:16.693 --> 07:04:24.119
version of Google Play  adding  
This is a test. is a testAPIs to

07:04:24.214 --> 07:04:28.262
 .prevent FIDO security keys.  
They are accepted by many major 

07:04:28.699 --> 07:04:33.621
websites such as G oogle, 
Facebook and  GitHub.  And 

07:04:33.622 --> 07:04:37.133
security keys are faster to 
authenticate and harder to 

07:04:37.134 --> 07:04:41.498
phish.  we know  for a of users,
 one of the most important they 

07:04:41.499 --> 07:04:47.429
can do to secure their user 
account is enable factor 

07:04:47.430 --> 07:04:50.161
authentication so they are 
excited asecurity case report is

07:04:50.162 --> 07:04:52.162
  to 

07:04:54.979 --> 07:04:57.957
Android.  So to up, covered a 
lot material, we talked about 

07:04:58.035 --> 07:05:03.394
all kinds of improvements in the
operating system, wetalked about

07:05:03.487 --> 07:05:08.320
 app security.  you want to know
 more about making app more 

07:05:08.321 --> 07:05:14.785
check developer R.  well best 
practices, we a couple of 

07:05:15.147 --> 07:05:19.374
Codelabs here at I/O that you 
can try out at the kiosks or try

07:05:19.375 --> 07:05:22.884
 out on line.  So thank you for 
your attention, and if you have 

07:05:23.256 --> 07:05:26.919
questions or any comments, feel 
free to email at security@A 

07:05:26.920 --> 07:05:29.059
ndroid.com and will be back 
stage.  Thank you.

07:05:29.060 --> 07:05:35.023
   (Applause).
     (Concluded at 6:07CT)

07:08:18.055 --> 07:08:20.055
  Testi

07:08:26.143 --> 07:08:28.143
ng

07:17:08.945 --> 07:17:10.945
&gt;

07:17:13.947 --> 07:17:14.947
&gt;
   &gt;&gt;

07:17:13.947 --> 07:17:15.666
   &gt;&gt;
   &gt;&gt;

07:17:15.667 --> 07:17:16.667
   &gt;&gt;
   &gt;&gt;

07:17:15.667 --> 07:17:16.667
   &gt;&gt;
   &gt;&gt;

07:17:15.667 --> 07:17:17.667
   &gt;&gt; Android Android

07:17:19.843 --> 07:17:21.843
 Android

07:28:29.386 --> 07:28:29.697
Studio. 
   &gt;&gt; JOHN HOFORD:  I'm John 

07:28:29.698 --> 07:28:32.745
Hoford and this is Nicholas 
Roard, we both work on 

07:28:32.746 --> 07:28:38.766
constraint layout and the 
Android Studio design surface.  

07:28:38.767 --> 07:28:40.767
Nicholas will sort of give us a 
little

07:28:43.912 --> 07:28:46.641
 introduction to the whole 
thing. 

07:28:46.642 --> 07:28:48.706
   &gt;&gt; NICHOLAS ROARD:  So hi, 
everyone.  We are  going to talk

07:28:48.930 --> 07:28:50.930
 a little

07:28:52.234 --> 07:28:57.898
 bit about constraint layouts.  
So quick summary about what's 

07:28:58.226 --> 07:29:03.006
here as far as Google 
developers.  What we want is 

07:29:03.007 --> 07:29:06.446
really to make sure life much 
better.  And we want to listen 

07:29:06.547 --> 07:29:10.586
to what you have to say any 
feedback, ideas, requests, you 

07:29:11.377 --> 07:29:14.858
know, anything, we really are 
looking into that.  And we try 

07:29:15.062 --> 07:29:19.357
to move fast, you know, since 
last year at I/O, we released 

07:29:19.668 --> 07:29:24.271
the stable regression of 2.2, 
2.3 and we are now working on 3.

07:29:24.462 --> 07:29:29.869
0, and I strongly encourage you 
to test 3.2.  There is a lot of 

07:29:29.870 --> 07:29:36.837
improvements in the  layout. 
   And specifically for the 

07:29:36.838 --> 07:29:38.838
layout of the visual

07:29:41.376 --> 07:29:43.508
 designer our goals are 
relatively simple.  Basically we

07:29:43.637 --> 07:29:50.545
 want you to be able to 
visualize l ayouts, we want you 

07:29:50.546 --> 07:29:54.115
to be able to create the layouts
 easily, and all of that being 

07:29:54.554 --> 07:29:56.554
efficient.  We don't want 

07:29:58.361 --> 07:30:00.361
you to use your name for no 

07:30:03.227 --> 07:30:03.865
reason. 
   &gt;&gt; JOHN HOFORD:  We want to 

07:30:03.866 --> 07:30:05.955
just give you a brief overview, 
the lay of the 

07:30:09.135 --> 07:30:14.018
land.  Designer to give you an 
idea how it all comes together. 

07:30:14.019 --> 07:30:22.133
 One of the things you can do do
 in track cool La mode and we 

07:30:22.134 --> 07:30:27.050
could go back to the other one. 
 Now, we have on the left-hand 

07:30:27.051 --> 07:30:30.884
side the palette it's basically 
where you can drag and drop your

07:30:30.885 --> 07:30:36.591
 Widgets onto your design 
surface.  Then the component 

07:30:37.133 --> 07:30:41.044
tree, then comes the inspector 
and we will have much more about

07:30:41.160 --> 07:30:47.495
 that later.  Then the Core 
design surface, and there is a 

07:30:48.953 --> 07:30:50.953
Toolbar. 
   We also have a right click 

07:30:52.980 --> 07:30:55.286
menu.  So people, a lot of 
people kind of forget that there

07:30:55.287 --> 07:30:59.655
 is a right click menu.  If you 
select an object, you can click 

07:30:59.862 --> 07:31:03.563
on it and right click and you 
will get useful actions 

07:31:03.564 --> 07:31:05.564
associated with what you have 

07:31:10.368 --> 07:31:15.078
selected.  So the other thing 
that you can switch to is 

07:31:15.281 --> 07:31:20.974
blueprint mode.  You could also 
switch to two screens at once.  

07:31:20.975 --> 07:31:26.402
The blueprint mode is kind of a 
blueprint, it's a rough outline,

07:31:26.403 --> 07:31:33.463
 a sketch of your UI, the design
 surface is actually being 

07:31:33.464 --> 07:31:37.953
rendered in layout, which is a 
sort of emulator of Android.

07:31:44.161 --> 07:31:51.463
also can do is use, use the 
designer in the XML editor mode.

07:31:51.464 --> 07:31:56.330
  So if you are in the XML 
editor and you press the 

07:31:56.983 --> 07:32:02.554
preview, you get essentially a 
full design mode right there. 

07:32:02.555 --> 07:32:06.805
   Notice if you select, it will
 actually navigate you to the 

07:32:06.806 --> 07:32:12.390
right element in the XML.  You 
can switch to the design or 

07:32:12.391 --> 07:32:18.850
blueprint, you can also expand 
it a little bit, pull out the 

07:32:19.280 --> 07:32:22.240
palette and you can actually 
drag an element right there on 

07:32:22.241 --> 07:32:26.564
the screen. 
   Notice it actually created 

07:32:26.565 --> 07:32:31.940
the XML at the bottom, and in 
fact, if you edit the

07:32:34.940 --> 07:32:38.874
 XML, it goes from the design 
surface instantly.  So you get a

07:32:39.078 --> 07:32:43.582
 real time feedback in both 
directions simply like 

07:32:48.540 --> 07:32:49.146
that.
   &gt;&gt; NICHOLAS ROARD:  That was 

07:32:49.147 --> 07:32:52.416
a brief introduction to give you
 concepts some of the vocabulary

07:32:52.417 --> 07:32:56.031
 we are going to use in the talk
 and hopefully you have been 

07:32:56.032 --> 07:32:59.847
already familiar with this UI.  
If not, again, give it a try 

07:33:00.744 --> 07:33:06.203
specifically with 3.0.  Let me 
cover constraint layout now.  So

07:33:06.872 --> 07:33:09.059
 constraint layout is the 
library we announced last year 

07:33:09.485 --> 07:33:14.508
at I/O in this very room, and 
the idea was to provide 

07:33:14.509 --> 07:33:18.235
something that gives you all of 
the flexibility and the power to

07:33:18.455 --> 07:33:20.455
 create any type of layout that 
you 

07:33:22.858 --> 07:33:28.419
 with strong emphasis on flat 
layout.  You don't have a view 

07:33:28.420 --> 07:33:34.864
in order to create the layout.  
There is a lot of advantages.  

07:33:34.865 --> 07:33:39.589
One is performance.  Indeed we 
have nested layouts.  You could 

07:33:39.688 --> 07:33:43.408
have cases where there is an 
explosion of computation 

07:33:43.409 --> 07:33:48.876
necessary.  So if everything is 
flat, you tend to win in 

07:33:48.877 --> 07:33:51.823
performance.  There is a reason 
which I think it actually more 

07:33:52.244 --> 07:33:55.539
interesting is you got a lot 
more flexibility.  It's much 

07:33:55.664 --> 07:34:00.571
better if you want to eliminate 
contents, if you want to modify 

07:34:01.683 --> 07:34:03.549
contents, upgrade it, modify, et
 cetera. 

07:34:03.550 --> 07:34:08.445
   There is a big thing with 
constraint layout, there is a 

07:34:09.103 --> 07:34:12.167
big team that works on con 
strainlt layout.  So it's deeply

07:34:12.714 --> 07:34:14.788
 integrated from the beginning 
which means that we have some 

07:34:15.398 --> 07:34:19.162
features in constraint layout 
that create a great designer and

07:34:19.513 --> 07:34:22.770
 we have some features in the 
studio that allows you to create

07:34:22.771 --> 07:34:25.524
 much better and more efficient 
layouts with coven straint 

07:34:26.071 --> 07:34:30.329
layout.  It had also in the 
library which means we can push 

07:34:30.777 --> 07:34:33.731
innovation any time and in fact 
we just pushes innovation like 

07:34:34.145 --> 07:34:41.290
five minutes ago, and it's 
compatible with basically every 

07:34:41.291 --> 07:34:45.877
device. 
   So quick recap on the 1.0.  

07:34:45.878 --> 07:34:54.938
Last year when we announced 11.0
 we did a lot of releases 

07:34:54.939 --> 07:34:58.448
basically 17 releases since last
 year.  We are to move fast and 

07:34:58.650 --> 07:35:02.017
that's what we do.  We did the 
final release of 1.2 in 

07:35:02.018 --> 07:35:07.525
February.  Lots of performance 
increase, but if -- the lay 

07:35:07.728 --> 07:35:11.344
outwas last year.  Definitely 
give it a go.  A bunch of new 

07:35:11.988 --> 07:35:18.130
features as well that we cover. 
   So when you create a new 

07:35:18.131 --> 07:35:21.272
screen by default we put c
onstraint layout where before we

07:35:21.627 --> 07:35:26.876
 used to put reiterative layout 
as and studio is flexible if you

07:35:27.086 --> 07:35:31.221
 want to change that, you can, 
but we believe that it's a great

07:35:31.656 --> 07:35:34.104
 layout to start your screen 
with and that's what we want to 

07:35:34.105 --> 07:35:39.057
encourage you to do..  And all 
of that really should not have 

07:35:39.058 --> 07:35:41.058
been possible without the 
involvement of the community.  

07:35:41.190 --> 07:35:45.371
There has been a flurry of 
articles, talks, videos on 

07:35:45.508 --> 07:35:48.741
YouTube leading to widespread a
doption of the library.  There 

07:35:48.742 --> 07:35:54.897
is also a new community-based 
constraint  layout website that 

07:35:54.898 --> 07:35:59.352
is launching this week and you 
should check it out. 

07:35:59.353 --> 07:36:03.337
   So 1.0, what did we have in 
terms of feature?  What did we 

07:36:03.338 --> 07:36:07.125
show you last year, and what did
 we add in the meantime?  So we 

07:36:07.354 --> 07:36:10.511
had the original idea of having 
relative positioning.  You can, 

07:36:10.642 --> 07:36:14.461
you know, set up your layout so 
that one button is going to be 

07:36:14.903 --> 07:36:19.603
positioned relative to another 
element.  Very similar to 

07:36:19.604 --> 07:36:25.045
relative layouts with a couple 
of interesting tricks.  We also 

07:36:25.046 --> 07:36:30.221
added a center positioning.  So 
if you create constraints in 

07:36:30.749 --> 07:36:34.146
between two targets, your 
element will be centered and you

07:36:34.147 --> 07:36:37.433
 can actually modify that.  It's
 not just center.  You can apply

07:36:37.434 --> 07:36:39.837
 by us. 
   So think about it as being 

07:36:40.822 --> 07:36:46.293
able to build much more flexible
 reactive UI that will position 

07:36:46.294 --> 07:36:51.321
themself not simply in terms of 
an exact dimension.  We also 

07:36:52.316 --> 07:36:56.238
added, introduced the  concept 
of helper's object like g 

07:36:56.239 --> 07:36:59.303
uidelines.  The idea of 
guidelines is that it lets you 

07:36:59.304 --> 07:37:03.345
create a UI in a much more 
natural way, particularly if you

07:37:03.469 --> 07:37:06.416
 come from a design background 
where you are working with 

07:37:07.166 --> 07:37:11.001
designers, they always think and
 create the layout in terms of 

07:37:11.143 --> 07:37:15.700
they call it many names, 
guidelines, key lines, red 

07:37:15.701 --> 07:37:20.502
lines, basically hosers antal 
lines to make sure everything is

07:37:21.395 --> 07:37:24.478
 aligned greatly.  So guidelines
 in constraint layout is a first

07:37:24.903 --> 07:37:28.291
 class concept you can use and 
create your layout with.  But on

07:37:28.526 --> 07:37:32.239
 the device it just results in 
the right settings for the 

07:37:32.472 --> 07:37:35.181
layout. 
   We also introduced chains and

07:37:35.381 --> 07:37:39.109
 that's a relatively late 
edition in the 1.2 release 

07:37:39.658 --> 07:37:42.194
cycle.  Think of it as being 
able to position a group of 

07:37:42.637 --> 07:37:45.603
Widgets as a group.  So, for 
example, spread them apart.  The

07:37:45.604 --> 07:37:50.477
 i nteresting thing compared to 
previous layout is that it only 

07:37:50.478 --> 07:37:58.270
works in one axis.  So the  
other axis is not constrained by

07:37:58.377 --> 07:38:01.441
 a chain.  Finally we introduced
 ratio.  I'm sure a lot of you 

07:38:01.564 --> 07:38:08.012
had to reimplement a customer 
just to reimplement the ratio.  

07:38:08.236 --> 07:38:12.831
We just does it in layout from 
the get go.  And last but not 

07:38:13.015 --> 07:38:16.205
least we introduced constraint 
set.  The idea with constraint 

07:38:16.331 --> 07:38:20.468
set is that now we have a layout
 that is flat.  There 

07:38:23.973 --> 07:38:26.829
is no -- necessary to create 
your layout.  In the sense you 

07:38:26.954 --> 07:38:30.655
end up with a bunch of Widgets 
at the same level, and we apply,

07:38:30.656 --> 07:38:34.686
 you know, that to create the 
layout to get the result that 

07:38:34.912 --> 07:38:36.980
you want we apply those 
constraints. 

07:38:36.981 --> 07:38:41.684
   So constraint sets, the idea 
is simply that we gather all of 

07:38:41.685 --> 07:38:48.040
those con  constraints and put 
that into that object.  So you 

07:38:48.041 --> 07:38:50.870
can create the constraint set 
that embeds all of the 

07:38:51.322 --> 07:38:54.806
constraints of your layout, you 
can create it from the layout 

07:38:54.807 --> 07:38:56.807
file, under

07:38:58.100 --> 07:39:02.363
 a live, and the fact that you 
can do that is actually really 

07:39:03.026 --> 07:39:06.521
powerful because and just to 
give you a simple example, you 

07:39:06.522 --> 07:39:10.463
can simply just toggle one set 
of constraints with another one.

07:39:10.464 --> 07:39:15.615
  So it's very easy to tweak 
your UI at run time and even 

07:39:15.616 --> 07:39:19.218
more you can specify and create 
your layouts in the comfort of 

07:39:19.546 --> 07:39:24.019
the l ayout editor graphically 
and at run time in your program 

07:39:24.235 --> 07:39:26.442
you can decide which layout you 
want. 

07:39:26.443 --> 07:39:28.443
   So this is 

07:39:31.477 --> 07:39:38.247
 we will come back to that.  
Today we just released 1.1 beta 

07:39:38.248 --> 07:39:42.287
1.  It's maven so it should be 
easy for you to integrate in 

07:39:42.607 --> 07:39:46.867
your work flow.  What did we add
 in 1.1?  We added first the 

07:39:46.868 --> 07:39:50.151
concept of barriers.  And a 
barrier in this sense is a way 

07:39:50.152 --> 07:39:55.975
to say just take on a set of 
widgets, takes the maximum or 

07:39:55.976 --> 07:40:02.642
the minimum of an edge, and that
 allows you to create a lot of 

07:40:02.850 --> 07:40:07.432
UI that previously with 1.2 
would have been tricky to do.  

07:40:07.433 --> 07:40:13.124
We also added another class 
that's called a group which is 

07:40:13.671 --> 07:40:16.537
relatively limited but we have 
ideas on how to improve it but 

07:40:16.843 --> 07:40:20.473
the concept is basically you can
 have a set of Widgets that are,

07:40:20.474 --> 07:40:23.966
 you know, stored into that 
group and you can set, for 

07:40:23.967 --> 07:40:26.263
example, the visibility of the 
group. 

07:40:26.264 --> 07:40:29.774
   So you don't have anymore to 
maintain yourself a list of 

07:40:30.322 --> 07:40:33.617
Widgets just so that you can 
toggle the visibility in one go.

07:40:33.618 --> 07:40:40.289
  You can specify that in XML 
and, you know, any visibility 

07:40:40.617 --> 07:40:42.887
state on the group will 
basically be applied

07:40:46.830 --> 07:40:50.661
 to the other in the group.  We 
also have another concept.  We 

07:40:51.184 --> 07:40:54.942
will cover that in more details 
later, but I think you will like

07:40:55.709 --> 07:40:58.771
 it.  And finally we did a 
couple of tweaks in the way we 

07:40:59.063 --> 07:41:02.736
did with c onstraints -- deal 
with constraints on dimensions 

07:41:02.737 --> 07:41:07.515
so if you ever want to create a 
view with 30% of the screen, you

07:41:07.516 --> 07:41:11.126
 could do that, but it was a 
little complex with  guidelines 

07:41:11.340 --> 07:41:15.513
because guidelines allow percent
 positioning but now you can 

07:41:15.514 --> 07:41:19.636
just do it simply directly on 
the Widget. 

07:41:19.637 --> 07:41:23.572
   And now we will cover a 
little bit of the new features 

07:41:24.415 --> 07:41:26.415
in Android Studio

07:41:27.988 --> 07:41:30.710
 itself. 
   &gt;&gt; JOHN HOFORD:  So 

07:41:30.711 --> 07:41:34.188
essentially if you are kind of 
more detail inside Android 

07:41:34.189 --> 07:41:37.485
Studios we have a set of tools. 
 Some of them we will talk a 

07:41:37.486 --> 07:41:43.829
little bit more about later, but
 we have a series of them that 

07:41:44.264 --> 07:41:50.325
are alignment type  tools and 
arrangement type tools and we 

07:41:51.152 --> 07:41:53.416
have some stuff to add 
guidelines and we will see more 

07:41:53.860 --> 07:41:56.741
on this. 
   Here is also the right click 

07:41:57.177 --> 07:42:02.860
menu which is actually a lot of 
them are existing tools.  Now, 

07:42:02.861 --> 07:42:06.552
here is a little example of what
 you can do with the tools.  So 

07:42:06.553 --> 07:42:12.492
in this particular example, I 
create a chain, I center a line 

07:42:12.688 --> 07:42:17.295
all of them and then I use the 
inference to automatically 

07:42:17.296 --> 07:42:20.246
connect them.  So in three 
clicks I have essentially made a

07:42:22.544 --> 07:42:24.544
 top

07:42:25.868 --> 07:42:27.868
 layout.

07:42:33.152 --> 07:42:38.080
that we have done a lot of work 
on is the inspector.  Those 

07:42:38.506 --> 07:42:44.525
pluses you see I'm clicking on, 
they outically cast a ray and 

07:42:44.726 --> 07:42:48.135
connect to the adjacent surface.
  So it's a quick handy way of 

07:42:48.136 --> 07:42:51.641
just making the connections 
without actually having to drag 

07:42:51.642 --> 07:42:55.576
out lines.  It can really speed 
up a lot of connections.  And 

07:42:55.577 --> 07:42:59.205
then I'm playing with all of the
 other features of the 

07:42:59.206 --> 07:43:04.233
inspector.  I can change the 
bias, I can then go and kill 

07:43:04.660 --> 07:43:09.893
connections all over again. 
   And it doesn't, they both 

07:43:09.894 --> 07:43:13.406
work together.  So I just move 
it back over and the loop starts

07:43:13.407 --> 07:43:17.044
 all over again.  So I will just
 show one 

07:43:24.334 --> 07:43:28.303
last.  N ow, the inference, you 
saw me do a little bit of the 

07:43:28.304 --> 07:43:31.943
inference before.  It's 
essentially based on a probable 

07:43:33.425 --> 07:43:37.909
  probabilistic model where we 
try to estimate what is the most

07:43:37.910 --> 07:43:41.620
 likely thing it would want to 
connect to.  If they are lined 

07:43:41.621 --> 07:43:44.255
above each other, it's more 
likely to align that way if it's

07:43:44.908 --> 07:43:51.814
 directly on the center, the 
little icon is, it will want to 

07:43:51.913 --> 07:43:54.312
connect to.  One of the cool 
things about it is that you will

07:43:54.313 --> 07:43:57.582
 notice I could make connections
 and then use inference to 

07:43:57.719 --> 07:44:03.060
finish it off, and essentially 
complete my UI.  So the ones 

07:44:03.184 --> 07:44:08.096
that I care about a lot, I can 
do by hand, and inference does 

07:44:08.296 --> 07:44:11.711
not currently create chains 

07:44:16.532 --> 07:44:20.398
or some of the new Widgets that 
we talk about, they don't 

07:44:16.532 --> 07:44:19.904
operate properly with some of 
the newer design features. 

07:44:19.905 --> 07:44:24.080
   But as those features become 
stable, I will work on putting 

07:44:24.081 --> 07:44:28.127
them into the inference engine. 
 So here is an example, it 

07:44:28.677 --> 07:44:34.110
inferred, ands you can see, it 
detected that it was sent and 

07:44:34.111 --> 07:44:40.377
attached there.  It changes some
 things from wrap content to 

07:44:40.378 --> 07:44:44.426
zero DP, things like that.  It 
just tries to fix it.  Now, one 

07:44:44.427 --> 07:44:48.023
of the other things to remember 
here is it's not a beautifier.  

07:44:48.024 --> 07:44:52.709
It is not going to align things 
for you and arrange t hings. 

07:44:52.841 --> 07:44:56.551
   It tries very hard to keep 
exactly where you put things.  

07:44:56.552 --> 07:45:01.497
So I have seen a few cases where
 people just sloppy put things 

07:45:01.689 --> 07:45:07.049
on a UI, and then hit inference 
and they get bad results because

07:45:07.275 --> 07:45:12.199
 it's not organized.  So just 
remember to do that when you are

07:45:12.200 --> 07:45:14.200
 thinking about 

07:45:16.805 --> 07:45:21.729
it.  Now, one of the things that
 we like and we use is the 

07:45:22.819 --> 07:45:26.205
inspector, you just saw me use 
it.  There is another mode that 

07:45:26.206 --> 07:45:28.937
you can get if you hits the 
little arrow at the top which is

07:45:28.938 --> 07:45:34.055
 this, which is all of the 
constraints.  That's kind of a 

07:45:34.056 --> 07:45:39.543
pain to use, quite frankly. 
   So we have been working on 

07:45:39.544 --> 07:45:41.960
something to try and make that 
easier and how you would use it 

07:45:42.493 --> 07:45:48.548
and how you would interact with 
it, and we call it 

07:45:53.448 --> 07:45:57.365
slice.  So image begin whenever 
you have a layout, you will 

07:45:57.366 --> 07:46:00.770
actually have, associated with 
the layout, you will have 

07:46:00.771 --> 07:46:03.184
dimensions, strings file, a few 
files, and the information you 

07:46:03.285 --> 07:46:07.539
are trying to work with is 
mapped across all of these 

07:46:07.675 --> 07:46:11.472
different files.  So it's, it 
becomes this sort of hopping 

07:46:11.473 --> 07:46:14.442
around game where you are trying
 to figure out oh, I have got to

07:46:14.649 --> 07:46:17.524
 go out and adjust the 
dimensions here, I got to go and

07:46:17.713 --> 07:46:21.872
 set the string in this file, 
and I have got -- and I have no 

07:46:21.873 --> 07:46:27.569
easy simple navigation. 
   So if we can take the 

07:46:27.570 --> 07:46:29.570
selected object that's in the

07:46:33.054 --> 07:46:36.093
 layout, the dimensions, that 
uses the strings it uses and all

07:46:36.094 --> 07:46:39.275
 of the other things it's 
referring to, and we sort of 

07:46:39.276 --> 07:46:43.243
combine them into one user 
interface, it appears on the 

07:46:43.528 --> 07:46:46.806
right, and we give it a look 
that is kind of like an XML 

07:46:47.592 --> 07:46:51.085
file. 
   So if you are used to the 

07:46:51.086 --> 07:46:55.118
XML, you can understand what it 
does and how it works.  You can 

07:46:55.119 --> 07:47:00.262
sort of see the files that are 
coming from all of the other 

07:47:00.263 --> 07:47:02.263
parameters, for

07:47:03.451 --> 07:47:09.562
 example, the draw is a picture 
of me, and the values is some 

07:47:09.888 --> 07:47:14.067
number, and in fact you request 
go edit and even create new 

07:47:14.068 --> 07:47:16.895
elements directly in that user 
interface. 

07:47:16.896 --> 07:47:21.922
   So it's a quick fast way to 
work within the design and do 

07:47:21.923 --> 07:47:24.235
all of the other things you 
would like to do

07:47:40.003 --> 07:47:40.652
typically. 
   &gt;&gt; NICHOLAS ROARD:  I will 

07:47:40.653 --> 07:47:46.648
talk a little bit about the 
tools attribute.  So the idea of

07:47:46.649 --> 07:47:50.603
 showing you this is also that 
you could, of course, use all of

07:47:50.604 --> 07:47:54.538
 this layout in XML.  I mean, 
they are normal Android layouts,

07:47:54.740 --> 07:47:59.457
 you can use the old layouts, 
everything is perfectly useable 

07:47:59.458 --> 07:48:03.385
in XML, but the idea and this 
what we strongly believe, is we 

07:48:03.612 --> 07:48:07.871
as  with the designer we have 
great opportunity to make your 

07:48:07.872 --> 07:48:10.717
life easier.  I think you could 
see with some of the tools we 

07:48:10.718 --> 07:48:15.950
have presented, doing the same 
thing in XML line by line, I 

07:48:15.951 --> 07:48:20.337
think will be much faster by 
using those tools.  So the tools

07:48:20.774 --> 07:48:23.511
 attributes, it's something you 
may know already. 

07:48:23.732 --> 07:48:27.786
   The general problem is that 
we have, we have something 

07:48:27.787 --> 07:48:31.735
that's not executing your code 
directly, so sometimes what we 

07:48:31.938 --> 07:48:36.232
show you in the l ayout editor 
is not going to be exactly the 

07:48:36.412 --> 07:48:39.913
same as what you have on your 
device.  So because, for 

07:48:40.226 --> 07:48:46.048
example, some of it is just 
determined by your program.  So 

07:48:46.362 --> 07:48:49.653
we have this idea of having 
tools attributes where you can 

07:48:50.317 --> 07:48:54.250
specify behavior that will be 
applied in the editor.  So those

07:48:54.452 --> 07:48:56.752
 attributes are not going to be 
there when you publish your 

07:48:56.753 --> 07:48:58.951
application, when you push it on
 a device.  They are just 

07:48:58.952 --> 07:49:02.234
tricked out, but in the design 
it tells you quite a lot of 

07:49:02.575 --> 07:49:05.611
flexibility in how you want to 
run things. 

07:49:05.939 --> 07:49:13.182
   So we got like show instance 
is pretty useful, list item to 

07:49:13.183 --> 07:49:17.455
set up things and things like 
that.  Says this generic 

07:49:17.775 --> 07:49:21.927
problem, right, of how do we 
want to show layout when -- we 

07:49:22.257 --> 07:49:26.618
don't really want to execute the
 code.  If you try to drag 

07:49:26.619 --> 07:49:29.378
recycle view or this view in the
 layout, that's probably what 

07:49:29.686 --> 07:49:34.310
you saw because we automatically
 generate the default adapter 

07:49:34.483 --> 07:49:38.666
that is pretty limit  limited 
about and by default that's what

07:49:38.667 --> 07:49:41.521
 you see.  This is probably not 
how your application looks like.

07:49:41.522 --> 07:49:45.877
  So if you have some contents, 
let's say I created a row, you 

07:49:46.221 --> 07:49:49.717
can specify it and you will be 
able to see that being remember 

07:49:49.718 --> 07:49:53.668
  replicated better, but clearly
 not what your application is 

07:49:53.861 --> 07:49:57.157
going to look like.  Of course, 
you are going to have different 

07:49:58.114 --> 07:50:02.410
data.  So and that's where 
simple data comes i n. 

07:50:02.411 --> 07:50:05.561
   You could specify new 
attributes and that's going to 

07:50:05.562 --> 07:50:10.809
be available in 2.2, where we 
have attribute, for example, 

07:50:10.810 --> 07:50:14.106
names or phone numbers and you 
will be able to reference that 

07:50:14.107 --> 07:50:17.616
instead of, you know, other 
attributes and that will be 

07:50:18.171 --> 07:50:21.418
replicated in the design.  So 
think about it as a way to 

07:50:21.419 --> 07:50:23.868
quickly see how your layout is 
going to look like without 

07:50:24.160 --> 07:50:28.752
having to program anything.  We 
actually do more than just t 

07:50:28.753 --> 07:50:32.042
hat.  We have a new sample data 
folder in the project that you 

07:50:32.043 --> 07:50:35.671
will be able to create.  You 
could specify things like colors

07:50:35.672 --> 07:50:40.809
 and that's trivial, just create
 a text file with the colors on 

07:50:40.810 --> 07:50:44.953
each line, and that's it.  Every
 time that you reference that 

07:50:45.427 --> 07:50:49.122
element, we will pull the next 
color and we will just loop. 

07:50:49.123 --> 07:50:51.843
   So you can very quickly get 
something like that.  And you 

07:50:53.156 --> 07:50:56.007
have more sample data 
capabilities, you can, you 

07:50:59.945 --> 07:51:04.552
know, display, dates in specific
 formats, colors, you can even 

07:51:04.863 --> 07:51:10.761
specify JSON file if you want to
 use most of your data.  So we 

07:51:10.762 --> 07:51:13.490
have baked in data 

07:51:18.313 --> 07:51:20.313
types., the JSON files as I said

07:51:23.243 --> 07:51:27.298
.  And you can reference it and 
pick them.  So if you want a 

07:51:28.481 --> 07:51:31.205
collection of names for instance
 you put them into a folder and 

07:51:31.206 --> 07:51:36.131
you reference the folder it will
 pick the next one.  And let's 

07:51:36.132 --> 07:51:39.753
go on some more advanced 
examples on constraint layouts. 

07:51:39.754 --> 07:51:45.232
   So you may have seen, you 
know, in your practice a problem

07:51:45.233 --> 07:51:49.041
 like that.  I have some texts 
on the left of my button and I 

07:51:49.278 --> 07:51:52.238
want that text to grow but no 
more than what the button 

07:51:52.779 --> 07:51:55.859
allows, and I want everything to
 be centered left.  So the way 

07:51:56.065 --> 07:51:59.755
you would do it in constraint 
layouts, and it's a little, you 

07:51:59.756 --> 07:52:04.799
know, it can be a little tricky,
 but fundamentally we create a 

07:52:04.800 --> 07:52:08.083
chain, make the text being 
resizable and it will 

07:52:08.084 --> 07:52:10.422
automatically apply the 
constraint.  So it won't go 

07:52:10.933 --> 07:52:13.364
further.  So that's just a quick
 example of how you can use 

07:52:13.769 --> 07:52:18.263
chain.  It's not just oh, I want
 to spread Widgets apart.  You 

07:52:18.264 --> 07:52:24.159
can do much more complex and for
 fuller combinations. 

07:52:24.160 --> 07:52:27.785
   So there is another 
elimination as well about the 

07:52:27.786 --> 07:52:31.503
gone behavior.  So by default 
when you set a Widget to gone, 

07:52:32.051 --> 07:52:35.118
we reserve it as a point.  So in
 that case, my center button 

07:52:35.672 --> 07:52:40.258
gets collapsed basically as a 
single point.  That  behavior 

07:52:40.683 --> 07:52:43.527
looks fine to me.  That's 
probably what I want.  Sometimes

07:52:43.528 --> 07:52:46.704
 it's not going to work the same
 way.  If I do that on the first

07:52:46.705 --> 07:52:52.724
 element, everything collapses 
to zero again, the  margin 

07:52:53.035 --> 07:52:56.871
included and then the rest of my
 buttons are moving.  So we have

07:52:57.649 --> 07:52:59.937
 those attributes that you can 
specify when the object you 

07:52:59.938 --> 07:53:03.229
collect to is gone and in that 
case we will use those values 

07:53:03.230 --> 07:53:08.828
for the margin.  So the gone 
button originally the margin on 

07:53:09.136 --> 07:53:14.704
the top of zero and now has a 
margin of 32.  Only if the first

07:53:14.705 --> 07:53:18.976
 element is marked as gone. 
   And let's talk a little bit 

07:53:18.977 --> 07:53:25.018
about placeholder which is a new
 addition in constraint layouts 

07:53:25.019 --> 07:53:26.193
1.1.
   &gt;&gt; JOHN HOFORD:  So this is 

07:53:26.194 --> 07:53:28.262
new 

07:53:33.081 --> 07:53:40.977
to 1.1 and essentially what it 
is is you can create a virtual 

07:53:40.978 --> 07:53:47.072
view and set its content to 
another view within the 

07:53:47.073 --> 07:53:49.600
constraint layout.  So in this 
simple

07:53:53.207 --> 07:53:56.163
 example, it's grabbing 
whichever one you clicked on, 

07:53:56.383 --> 07:54:00.202
whichever view you clicked on 
and warping it up to the top of 

07:54:00.428 --> 07:54:04.473
the screen.  If you look at the 
text, it maze look a little 

07:54:04.474 --> 07:54:07.979
strange if you are not familiar 
with code 1.

07:54:12.141 --> 07:54:16.168
  Check out code one child 
pornography.  That's the total 

07:54:16.169 --> 07:54:19.598
length of the cold in the f ile.
  So the animation you see on 

07:54:19.599 --> 07:54:22.219
the right is being generated by 
the code you see on the left, 

07:54:22.652 --> 07:54:27.673
nothing else is being used in an
 XML file.  So as you can see, 

07:54:27.674 --> 07:54:31.948
it's ran damly switching.  But 
the -- randomly switching but 

07:54:32.149 --> 07:54:34.997
the fact that you can have a 
placeholder a place where you 

07:54:34.998 --> 07:54:39.408
can move a Widget may seem like 
what else can you do with that. 

07:54:39.409 --> 07:54:48.428
 Well, if I design a placeholder
 based UI with merged tag, 

07:54:49.199 --> 07:54:55.020
essentially I have defined a 
constraint layout make sure to 

07:54:55.231 --> 07:54:58.624
use the parent tag if you want 
to see the UI while you are 

07:54:58.625 --> 07:55:02.773
doing it.  It essentially gives 
you a fixed layout which you can

07:55:02.774 --> 07:55:06.624
 then use in another file. 
   So in this case, I have 

07:55:06.625 --> 07:55:11.628
decided to have one placeholder 
that's going to be my top image,

07:55:11.958 --> 07:55:16.795
 a big image, and then a second 
placeholder that will be my 

07:55:16.983 --> 07:55:18.983
action 

07:55:20.261 --> 07:55:24.653
button.  But I can actually make
 the second placeholder with now

07:55:27.513 --> 07:55:31.555
 using full landscape mode, and 
this one I arranged it a little 

07:55:31.556 --> 07:55:36.386
bit different.  I use a 
different set of constraints and

07:55:36.387 --> 07:55:42.398
 now in the main layout, I just 
declared it to UI elements and 

07:55:42.600 --> 07:55:46.304
include the place, the template.

07:55:46.305 --> 07:55:50.024
   Essentially it produces a 
template that decides on how you

07:55:51.000 --> 07:55:54.972
 do your l ayout.  And because 
they are in fact two of these 

07:55:57.609 --> 07:56:01.642
templates, one in different 
ones, when I rotate the screen, 

07:56:01.643 --> 07:56:06.889
it will would actually take the 
other template.  So now I can 

07:56:06.890 --> 07:56:11.356
lay out my views and separate 
out the layout from it.  But I 

07:56:11.357 --> 07:56:15.956
can actually do more than just 
that.  One of the things that 

07:56:15.957 --> 07:56:22.075
you can do with this structure 
is what if instead of the image 

07:56:22.728 --> 07:56:26.694
button, the second image but ton
 I could decide to put -- button

07:56:26.999 --> 07:56:30.724
 I could decide to put  an 
entire include file with 

07:56:30.725 --> 07:56:32.734
something else in it.  So in 
this particular case, 

07:56:39.914 --> 07:56:43.955
I have have an entire include 
with a bunch of different layout

07:56:44.848 --> 07:56:48.011
 elements, and it's actually 
been warped into that space.  So

07:56:48.232 --> 07:56:51.938
 it's a constraint layout within
 a constraint layout.  So it's 

07:56:51.939 --> 07:56:55.871
nested in that context. 
   But this is a very simple and

07:56:55.872 --> 07:57:00.089
 almost stupid example, but you 
could imagine where you decide 

07:57:00.090 --> 07:57:03.771
how you want the top and the 
bottom, the left and the right, 

07:57:04.314 --> 07:57:08.352
and behaviors and lay them out 
and design them as templates.  

07:57:08.353 --> 07:57:14.486
And then when you are ready to 
produce your main stuff, you 

07:57:14.695 --> 07:57:18.649
just go and do it in a 
completely separate file.  You 

07:57:18.650 --> 07:57:21.751
could have d esigners help you 
design templates, things like 

07:57:21.752 --> 07:57:23.752
that.

07:57:32.299 --> 07:57:37.023
wanted to do with constraint set
 and I will talk a little bit 

07:57:37.024 --> 07:57:43.033
about how you use constraint 
sets, is you can separate the 

07:57:43.034 --> 07:57:49.034
views completely from how you do
 the layouts.  So essentially 

07:57:49.035 --> 07:57:54.291
you can -- another way of doing 
things is to encapsulate your 

07:57:54.292 --> 07:57:57.060
entire layout as a separate 
constraint set and then you 

07:57:57.061 --> 07:58:02.181
apply it to a layout. 
   So you might kind of wonder 

07:58:02.386 --> 07:58:06.020
what would you want to do with 
that.  Well, you can switch 

07:58:06.021 --> 07:58:11.006
between two constraint sets on 
the fly.  No views get reload.  

07:58:11.252 --> 07:58:14.764
It's not like switching a 
layout.  You are actually just 

07:58:14.765 --> 07:58:18.255
moving the layout, the Widgets 
around by applying different 

07:58:18.256 --> 07:58:25.149
sets of constraints. 
   So in this example, I create 

07:58:25.485 --> 07:58:27.485
two constraint 

07:58:30.188 --> 07:58:38.275
sets.  I grab a constraint set 
from a layout file and I put 

07:58:38.276 --> 07:58:43.848
another layout on the screen 
with set content view, and then 

07:58:43.976 --> 07:58:50.939
I actually get that one and grab
 its constraint set and 

07:58:50.940 --> 07:58:54.364
constraint set 2.  Now, to 
switch between the two 

07:58:54.365 --> 07:58:57.529
constraint sets all I have to do
 is call the constraint set and 

07:58:57.633 --> 07:59:01.148
apply to the constraint layout 
and that will allow me to 

07:59:01.149 --> 07:59:05.968
switch. 
   So I can produce lots of 

07:59:05.969 --> 07:59:11.200
clever animations that way.  So 
one simple example is if I have 

07:59:11.201 --> 07:59:15.032
a dialogue and this is a normal 
constraint set with my picture 

07:59:15.147 --> 07:59:21.710
on it.  And I could do another 
one and landscape.  Now, instead

07:59:21.711 --> 07:59:27.052
 of creating two separate 
layouts and inflating them when 

07:59:27.053 --> 07:59:31.889
you rotate, you can take over 
the rotation yourself and you 

07:59:32.202 --> 07:59:35.498
can perform the constraint set 
switch yourself. 

07:59:35.499 --> 07:59:42.052
   And that way you have a lot 
less going on during rotations. 

07:59:42.053 --> 07:59:45.871
 If you have an app that likes 
to rotate a lot, you can do it 

07:59:46.212 --> 07:59:48.212
that way and save some 

07:59:52.568 --> 07:59:53.650
speed. 
   &gt;&gt; NICHOLAS ROARD:  The other

07:59:53.651 --> 07:59:57.054
 things that important to keep 
in mind with the constraint set 

07:59:57.055 --> 07:59:59.978
is the example of rotation is 
interesting.  Of course, you can

08:00:00.516 --> 08:00:04.596
 use the normal system on 
Android and let the resource 

08:00:04.597 --> 08:00:07.665
being loaded at run time.  The 
thing with constraint set is 

08:00:07.666 --> 08:00:11.069
that you actually are in 
complete control of when you 

08:00:11.070 --> 08:00:14.085
create the constraint set.  So 
often in mobile it's not so much

08:00:14.213 --> 08:00:17.830
 about trying to not do the work
 that you need to do because you

08:00:17.831 --> 08:00:20.464
 need to do it.  So sometimes if
 the work is costly, you still 

08:00:20.675 --> 08:00:23.850
have to do it.  It's more a 
matter of trying to find the 

08:00:24.287 --> 08:00:28.097
right time on when to do it, and
 to me, that's why constraint 

08:00:28.520 --> 08:00:31.603
sets urge you to do.  You can 
basically pre bake all of the 

08:00:32.251 --> 08:00:37.391
constraints and load them before
 and so you don't have to incur 

08:00:37.392 --> 08:00:42.001
anything like that because 
suddenly you have to set out a 

08:00:42.002 --> 08:00:45.949
set of resources.  So constraint
 set is also pretty useful when 

08:00:46.173 --> 08:00:52.301
we want to use motion in 
general.  So one object of con 

08:00:52.505 --> 08:00:57.301
strainlt layout it's focused on 
keeping a flat hierarchy is 

08:00:57.543 --> 08:01:01.589
there are no issues.  You can 
think of it as a scene graph.  

08:01:01.776 --> 08:01:05.632
You have all of the different 
objects you want to show on 

08:01:06.602 --> 08:01:09.999
screen, your emojis, et cetera. 
 And you can see of constraint 

08:01:10.000 --> 08:01:13.048
set in some ways as a key frame.
  The way you would do that if 

08:01:13.921 --> 08:01:17.990
you remember that slide that we 
just saw, you only need to add 

08:01:17.991 --> 08:01:22.460
one line, and that's all.  And 
that is simply using the Android

08:01:22.461 --> 08:01:29.039
 transition framework that is, 
that also is available on 

08:01:29.040 --> 08:01:33.967
industry and it will automate 
layout changes.  That also would

08:01:33.968 --> 08:01:37.454
 apply even on the individual 
view, right.  So in that 

08:01:37.455 --> 08:01:41.828
example, I have -- I'm sorry, 
the clicker is not happy. 

08:01:41.829 --> 08:01:47.297
   In that example, we have a 
layout that's set with the 

08:01:47.512 --> 08:01:51.658
normal constraint layout, but I 
can change the of an individual 

08:01:51.986 --> 08:01:56.251
view.  The lay outwill 
automatically accordingly to the

08:01:56.252 --> 08:01:59.695
 constraints thatI set and 
transition manager willanimate 

08:02:00.257 --> 08:02:05.560
So you can do kind of complex 
behavior that very, easy. 

08:02:05.561 --> 08:02:09.291
   And the code itself really 
trivial.  You could do a further

08:02:09.292 --> 08:02:14.376
 than that, you that is an 
example.  You could create one 

08:02:14.377 --> 08:02:21.855
state of your screen layout, 
change, you a second basically, 

08:02:22.001 --> 08:02:30.033
and load set. that at run time, 
and the transition will  

08:02:30.034 --> 08:02:33.100
framework will the What is cool 
is you do that graphically.  You

08:02:33.101 --> 08:02:36.960
 don't have to try to figure out
 how much to what's the 

08:02:37.356 --> 08:02:40.980
dimension, no.  You have the 
image result on screen without 

08:02:41.092 --> 08:02:47.129
having do a round trip to your 
device.  And that was purely 

08:02:47.130 --> 08:02:51.927
constraint layout can also be 
used by leveraging the existing,

08:02:51.928 --> 08:02:56.893
 you know, firm work the 
existing Widgets in the 

08:02:57.324 --> 08:03:00.476
framework. 
   So this is just a the one 

08:03:01.907 --> 08:03:05.841
used in the layout.  I can 
simply reuse into a constraint 

08:03:05.842 --> 08:03:07.842
layout.  So this is a   
(indiscernible) (indiscernible)

08:03:08.591 --> 08:03:11.758
simple   Let's apply that.  
What's nice is, encourage you to

08:03:11.759 --> 08:03:16.018
 think about link to the concept
 of placeholders,  that you 

08:03:16.134 --> 08:03:25.075
could define set of generic  on 
your and becomes something  than

08:03:25.410 --> 08:03:30.341
 simply I want to position, how 
they interact with each other, 

08:03:30.787 --> 08:03:35.706
it can become  well, the UI 
around. 

08:03:35.707 --> 08:03:43.447
   And, of course, you can apply
 that your Widget you,  -- 

08:03:43.448 --> 08:03:48.289
Widget you that simple.  So 
another example of the 

08:03:48.290 --> 08:03:53.242
constraint set/transition  
animation.  We define two states

08:03:53.243 --> 08:04:00.525
 see are applied, it changes and
 all of that is graphically.  

08:04:00.860 --> 08:04:05.130
The with this animation is that 
it's little stale.  It doesn't 

08:04:05.519 --> 08:04:08.835
do anything special.  There is 
no movement, but we could do lot

08:04:13.025 --> 08:04:16.552
 more with you coulddefine 
whatever youwant. So recently 

08:04:17.045 --> 08:04:24.990
there a physics library being 
released, you  own transition, 

08:04:24.991 --> 08:04:28.741
plug them into the system do you
 We will not encourage you to 

08:04:28.742 --> 08:04:32.808
this particular UI.  is test 
example.   you know, just to 

08:04:33.139 --> 08:04:40.140
give you like the type of 
flexibility this approach can   

08:04:40.492 --> 08:04:44.109
   And on that note, I think we 
are done.  We have a few minutes

08:04:44.110 --> 08:04:52.146
 Q and A.  please find out about
 future requests you can contact

08:04:52.470 --> 08:04:55.801
us easily.  The documentation of
 constraint layout is available 

08:04:55.802 --> 08:05:01.069
on line as well, and as I said, 
we just released 1.1.  it a 

08:05:01.070 --> 08:05:03.070
   (Applause).

08:05:19.935 --> 08:05:22.950
at 76:03).

08:23:16.827 --> 08:23:18.827
RAW

08:23:29.731 --> 08:23:31.731
 FILE

08:23:34.526 --> 08:23:36.526
.

08:23:39.177 --> 08:23:44.201
   GOOGLE I/O2017.
   SAN JOSE, CALIFORNIA.

08:23:44.202 --> 08:23:50.852
   MAY 18, 2017.
   6:30 P.M. CENTRAL

08:23:54.420 --> 08:23:56.420
 TIME.
   STAGE #2

08:23:59.821 --> 08:24:03.620
.
   SESSION: WHAT'S NEW IN 

08:24:03.621 --> 08:24:06.812
NOTIFICATIONS, LAUNCHER ICONS 
AND

08:24:10.630 --> 08:24:16.840
 SHORTCUTS.
   SESSION: TA335B.

08:24:16.841 --> 08:24:17.140
   Services provided by:
        Caption First, Inc.

08:24:17.141 --> 08:24:17.394
        P.O. Box 3066
        Monument, CO  80132

08:24:17.395 --> 08:24:17.840
        800-825-5234
        +001-719-481-9835

08:24:17.841 --> 08:24:18.338
        www.captionfirst.com
   * * * text is being provided 

08:24:18.339 --> 08:24:20.739
in a realtime format.  
Communication

08:24:18.339 --> 08:24:18.424
   Access Realtime Translation 
(CART) or captioning are 

08:24:18.425 --> 08:24:18.628
provided in
   order to facilitate 

08:24:18.629 --> 08:24:21.562
communication accessibility and 
may not be a

08:24:18.629 --> 08:24:18.794
   totally verbatim record of 
proceedings.

08:24:18.795 --> 08:24:20.795
   * * *

08:28:17.471 --> 08:28:20.982
CROWD.  THANK YOU SO MUCH FOR 
COMING.  HI, HI NAME IS DAN.  

08:28:20.983 --> 08:28:26.895
I'M HERE WITH SUNNY AND 
HYUNYOUNG AND SELIM.  WE'RE 

08:28:26.896 --> 08:28:30.542
GOING TO TALK ABOUT SOME GREAT 
STUFFER FOR USE    USERS, SOME 

08:28:31.112 --> 08:28:33.112
STUFF YOU NEED DON 

08:28:36.225 --> 08:28:38.225
    DON to know as developers.

08:28:40.406 --> 08:28:45.024
  I'm Hyunyoung, take it away.  
Tell us about new stuff in icons

08:28:45.901 --> 08:28:46.335
.
   HYUNYOUNG SONG:  Okay.  Thank

08:28:46.336 --> 08:28:53.230
 you, Dan.  Hi, everybody.  My 
name is Hyunyoung Song.  I want 

08:28:53.231 --> 08:28:58.635
to talk about some new changes 
in I/O platform.  So what's the 

08:28:58.636 --> 08:29:03.166
problem we're trying to solve 
here?  One of the things that 

08:29:03.167 --> 08:29:08.481
developers life about icons is 
that it's very flexible.  Aside 

08:29:08.482 --> 08:29:13.605
from the constraints that Play 
console impose on you, the size 

08:29:13.606 --> 08:29:18.263
limit, you can choose whatever 
shape or size or shadow that you

08:29:18.485 --> 08:29:22.938
 like.  Of course, there's a 
guideline around how you should 

08:29:23.039 --> 08:29:29.784
do them, but not all developers 
abides by them.  So this 

08:29:29.785 --> 08:29:33.996
flexibility is actually a double
 edge ed       edge ed sword.  

08:29:33.997 --> 08:29:38.811
If you look at a lot of the OEM 
launcher screens or homescreens,

08:29:39.062 --> 08:29:42.502
 what you notice is your icon 
doesn't look the same as what 

08:29:42.503 --> 08:29:50.294
you actually added to APK.  Like
 in this example of Chro     

08:29:50.295 --> 08:29:57.595
Chrome and Play store icon they 
shrunk it down and put it on a 

08:29:57.596 --> 08:30:01.635
background color that OEM 
decided.  In this example, the 

08:30:01.636 --> 08:30:06.002
same Play store console is cut 
around the corners.  At least 

08:30:06.003 --> 08:30:10.839
these icons preserved the 
original look.  Sometimes they 

08:30:10.840 --> 08:30:16.953
use icons which completely 
changes how your brand identity 

08:30:16.954 --> 08:30:19.937
looks like.  That's what we're 
trying to solve in adaptive icon

08:30:20.725 --> 08:30:23.742
s.
   So let's bring up the slides 

08:30:23.743 --> 08:30:27.694
that you may have seen Dan 
already presented during "what's

08:30:28.311 --> 08:30:33.731
 new in Android O."
   There's a simple formula.  

08:30:33.732 --> 08:30:36.952
App developers provide 
foreground and background layer

08:30:37.222 --> 08:30:40.099
s.  One of these layers has to

08:30:43.216 --> 08:30:45.562
 be opaque.  These decide what 
kind of mask that will be used 

08:30:45.563 --> 08:30:49.594
on these icons.  The user will 
see if the mask was circle, then

08:30:50.364 --> 08:30:56.081
 the user will see circle-shaped
 icons all across the System UI 

08:30:56.082 --> 08:30:58.082
surfaces.  This includes not 
only

08:31:02.447 --> 08:31:06.389
 the launcher but setsing UI.  
Also, the title bar, and lastly 

08:31:06.390 --> 08:31:10.716
the share sheet dialogue will 
also use this launcher icon.  So

08:31:10.717 --> 08:31:19.439
 the shape will change 
throughout these surfaces.  If 

08:31:19.440 --> 08:31:24.417
it was a round direct then the 
result will be a round direct 

08:31:24.418 --> 08:31:29.659
icon.  So while we were changing
 the Android icon API, the first

08:31:29.815 --> 08:31:31.815
 thing we also change is

08:31:33.768 --> 08:31:35.768
 the usable size of the icon.  
Previously it used

08:31:38.802 --> 08:31:42.094
 to be 48 DP.  Later there are 
wide er range of icon sizes that

08:31:42.321 --> 08:31:49.114
 third-party launchers uses.  We
 decided the visible size should

08:31:50.172 --> 08:31:52.688
 be 72 DP.
   But the foreground and 

08:31:52.689 --> 08:31:55.786
background layer that we 
actually want you to upgrade to,

08:31:55.902 --> 08:32:02.124
 we want you to provide 108 DP. 
 We want you to add 25% of the 

08:32:02.125 --> 08:32:10.305
view port inset around four 
edges.  Either using the 

08:32:10.306 --> 08:32:13.295
extension of your foreground 
layer or as a

08:32:18.114 --> 08:32:22.128
 transparency.  There's a lot 
more, but unfortunately, on your

08:32:22.343 --> 08:32:26.626
 today's developer preview you 
will not see any of these 

08:32:26.627 --> 08:32:31.390
animations because we're still 
vetting how to best place these 

08:32:31.391 --> 08:32:34.050
but will come up in future 
releases.

08:32:34.051 --> 08:32:37.186
   So let's talk about safe 
zone.  When you're adding your 

08:32:37.187 --> 08:32:42.359
main logo or the badge of your 
icon in the foreground layer you

08:32:42.360 --> 08:32:45.817
 might be curious, how do I make
 sure that all of these show up 

08:32:45.818 --> 08:32:50.452
on every single platform?  
That's what safe zone does for 

08:32:50.545 --> 08:32:55.212
you.  When an OEM defines your 
mask shape, it cannot cut into 

08:32:55.213 --> 08:33:02.853
the safe zone.  This is enforced
 by the system -- by the API. 

08:33:02.854 --> 08:33:09.079
this means is that if you happen
 to have a badge on the right 

08:33:09.080 --> 08:33:13.731
bottom corner of this risky zone
 that I labeled, then what I 

08:33:13.732 --> 08:33:18.876
mean is that if, if it's rendere
d in a platform that is close to

08:33:22.032 --> 08:33:25.057
 a rectangle, then -- but if 
it's on a device where it has 

08:33:25.058 --> 08:33:27.927
circle mask shape, it will be 
clipped off or not shown at all.

08:33:28.417 --> 08:33:32.936
   But I'm not saying that you 
should not add badges.  Just 

08:33:32.937 --> 08:33:36.844
make sure that they're inside 
the safe zone, to be shown on 

08:33:37.000 --> 08:33:42.689
every platform.
   Okay.  So let's talk about 

08:33:44.146 --> 08:33:49.841
API.  The main class that we 
added to O platform is adaptive 

08:33:49.842 --> 08:33:56.291
icon drawable class.  
Approximate it supports two 

08:33:56.292 --> 08:34:02.437
foregrand and background inner 
tag.  Another child drawable -- 

08:34:02.438 --> 08:34:07.806
basically, you can specific 
either drawable or a color.

08:34:07.807 --> 08:34:12.624
   And where this class fits in 
the drawable family tree, its 

08:34:12.871 --> 08:34:17.726
parent probably could be the 
layer drawable and its half 

08:34:17.815 --> 08:34:21.361
sibling would be the ripple ing 
drawable.

08:34:21.362 --> 08:34:25.483
   After you define this xml 
file, you doesn't actually 

08:34:25.484 --> 08:34:30.602
specific this in Android 
manifest file.  The old Android 

08:34:30.603 --> 08:34:39.968
icon at    at    attribute is 
still in effect.  In

08:34:42.932 --> 08:34:45.125
 previous platform it -- you 
still have to keep this adaptive

08:34:45.240 --> 08:34:47.255
 icon.  As of O,

08:34:51.300 --> 08:34:53.923
 what you do is you create a 
same name xml file and then add 

08:34:58.147 --> 08:35:06.617
it into -- this is IC foreground
 png you add it to the density 

08:35:07.769 --> 08:35:16.787
specific mipmap directory.  At 
compile time, it -- it will move

08:35:17.232 --> 08:35:23.374
 to -- only platform 26 and 
above will inflate it and use 

08:35:25.717 --> 08:35:28.669
it.
   One thing to note is that 

08:35:28.670 --> 08:35:32.897
some of you like Android citizen
 may already know about this 

08:35:33.266 --> 08:35:43.083
round attribute that we added in
 MMR    MMR1, we recommend that 

08:35:43.084 --> 08:35:48.715
you create the same name xml 
file as the legacy -- as the 

08:35:49.000 --> 08:35:51.000
original adaptive icon file

08:35:53.290 --> 08:35:55.556
 but the contents can be the 
same.

08:35:53.290 --> 08:35:56.453
   Now, regarding why we decided
 to not

08:36:01.315 --> 08:36:06.597
 depricate this, I strong       
strongly argue to read them on 

08:36:06.598 --> 08:36:09.228
our websites.
   Now, some of you sitting in 

08:36:09.229 --> 08:36:14.408
the audience may think, 108 DP, 
that is really huge.  Maybe to 

08:36:14.409 --> 08:36:20.731
make the matter worse your APSI 
is very close to hitting that 

08:36:20.732 --> 08:36:24.982
Play console max size limit.  In
 which case what you can do is 

08:36:24.983 --> 08:36:26.983
in O we added

08:36:30.630 --> 08:36:33.353
 a fraction pipe.  It's a 
perfection type.  The inset that

08:36:33.683 --> 08:36:40.986
 I asked you to add was 18 DP.  
If you divide that by 8 that's 

08:36:40.987 --> 08:36:46.976
16%.  If you specify 16%, as 
your inset, and then you use 

08:36:47.076 --> 08:36:49.076
your legacy,

08:36:50.269 --> 08:36:55.750
 appoint the to be the latest 
legacy icon, there will be no AP

08:36:55.977 --> 08:36:59.629
K size increase and you will be 
able to upgrade to adaptive icon

08:37:00.783 --> 08:37:07.093
s for free.
   And as of Android N, the 

08:37:07.094 --> 08:37:11.038
vector drobos became so much 
more expensive that almost every

08:37:11.853 --> 08:37:16.914
 element in SCG file can be -- 
as either your foreground or 

08:37:17.044 --> 08:37:22.838
background element, then you're 
APK size will actually decrease.

08:37:29.361 --> 08:37:31.361
Now I'm going to 

08:37:33.585 --> 08:37:37.847
do a demo of how the icon wizard
 now support creating

08:37:41.195 --> 08:37:43.195
 adaptive icon

08:37:46.255 --> 08:37:48.255
 wizard.  Choose

08:37:51.762 --> 08:37:55.562
 new wizard asset and you get 
this page and here you can 

08:37:51.762 --> 08:37:57.246
configure your foreground and 
select different asset type.  

08:37:57.247 --> 08:37:58.668
I'm going to choose image here. 
 What you're seeing on the right

08:37:58.669 --> 08:38:02.027
 side is this is a preview of 
what your icon will look like 

08:38:02.028 --> 08:38:05.884
that four different platforms 
with different masks and what 

08:38:05.885 --> 08:38:11.191
you're adding into your APK is 
presented here in four oblique 

08:38:11.192 --> 08:38:16.485
layers s.  You can see if your 
foreground element is fully 

08:38:16.486 --> 08:38:20.359
within the safe zone so you can 
resize.  You make sure that 

08:38:20.360 --> 08:38:24.316
everything is the foreground.  
In background player I'm going 

08:38:24.317 --> 08:38:29.119
to change the color to something
 hopefully hip, not so hip.  

08:38:29.120 --> 08:38:35.461
Okay.  Whatever.
   Then -- (laughing) -- that's 

08:38:35.462 --> 08:38:40.416
what we're going to use.
   And the last tab is actually 

08:38:40.417 --> 08:38:43.655
very important.  Because as I 
mentioned early ier if you just 

08:38:43.656 --> 08:38:48.869
add adaptive icons, you're app 
will not have any icons in 

08:38:48.870 --> 08:38:53.143
previous platforms.  So you can 
use this third tab to generate 

08:38:53.144 --> 08:38:59.546
the legacy icon, the legacy 
round icon for circle-shaped 

08:38:59.547 --> 08:39:05.997
mask, shaped devices, and this 
you can also even generate the 

08:39:05.998 --> 08:39:12.198
five 12 by 512 image that you 
upload to your Play icon here.  

08:39:12.199 --> 08:39:15.611
This is the same that I showed 
you early ier on.  You'll see 

08:39:15.612 --> 08:39:18.366
finish and then since

08:39:22.427 --> 08:39:28.047
 -- before all devices become 
available you can test this on 

08:39:32.778 --> 08:39:40.633
the emulat  tor.  I'm installing
 the app.  This emulator has 

08:39:40.634 --> 08:39:45.470
circle as the mask.  And -- oh. 

08:39:48.664 --> 08:39:50.614
 Okay.
   Oh.  So what I'm showing you 

08:39:50.615 --> 08:39:56.809
right now is this is an option 
that you can see on the main 

08:39:56.810 --> 08:40:04.474
launcher of your emulator.  It 
let's you                It lets

08:40:04.475 --> 08:40:06.823
 you first what it should have 
the main mask shape on this 

08:40:06.824 --> 08:40:09.342
device is circle, but just for 
developer purpose you can change

08:40:09.565 --> 08:40:14.066
 the icon shape.  So that you 
can check what it will look like

08:40:14.875 --> 08:40:21.637
 on other devices.  Let's pick 
something fun like teardrop.  

08:40:21.638 --> 08:40:24.936
Now you'll have teardrop shape 
icon without having to make any 

08:40:24.937 --> 08:40:26.937
changes.

08:40:34.571 --> 08:40:41.308
   Next slide, please.
   So -- oh.  Can we go back 

08:40:41.309 --> 08:40:49.886
just one more slide?
   So -- next slide.

08:40:50.118 --> 08:40:56.280
   Okay.  Well, that's all.  
Everything about adaptive icons.

08:40:56.808 --> 08:41:01.752
  I'll pass it off to Sunny who 
will tell you more about 

08:41:01.753 --> 08:41:06.434
shortcuts and widgets.
   [Applause]

08:41:06.532 --> 08:41:11.513
   SUNNY GOYAL:  Hello, 
everyone.  I'll tell you how to 

08:41:11.514 --> 08:41:15.008
make your app icons look even 
better.  This helps a lot in 

08:41:15.009 --> 08:41:18.935
improving the app's experience. 
 Another way to improve the app

08:41:19.195 --> 08:41:22.708
's experience is by adding 
shortcuts.  Shuts         Shut

08:41:22.802 --> 08:41:27.132
                  shortcuts 
shortcuts allow apps to list 

08:41:27.133 --> 08:41:30.054
things on the homescreen

08:41:33.711 --> 08:41:35.711
.

08:41:38.062 --> 08:41:47.855
   An app -- using API last year
 -- (audio difficulties

08:41:49.589 --> 08:41:54.547
) -- it can add shortcuts.

08:42:01.783 --> 08:42:07.423
   These added shortcuts are 
shown as additional options for 

08:42:07.424 --> 08:42:13.192
the app.  But the launcher can 
also allow that user to bring 

08:42:13.273 --> 08:42:15.727
the shortcuts on the 

08:42:18.989 --> 08:42:24.258
homescreen.
   To create the shortcuts, -- 

08:42:24.520 --> 08:42:27.677
and hope that the launcher gets 
the broadcast and does the right

08:42:27.940 --> 08:42:30.421
 thing.  There are many down 
sides to this flow.  For example

08:42:30.554 --> 08:42:39.599
, the app loses control.
   Also, since there is

08:42:41.574 --> 08:42:43.574
 --

08:42:53.191 --> 08:42:58.307
 this will make the launcher -- 
so bring the shortcut on the 

08:42:58.308 --> 08:43:03.335
home screen.  Once the shortcut 
is added, it works like any 

08:43:03.336 --> 08:43:09.313
other shortcut and can be 
updated within the existing APIs

08:43:10.001 --> 08:43:14.919
.
   Another way to use shortcuts 

08:43:14.920 --> 08:43:24.164
-- continue ation -- on the 
homescreen.  The app would 

08:43:24.570 --> 08:43:29.981
declare the continue ation 
activity in the manager.  You 

08:43:29.982 --> 08:43:38.273
are --            
   Lack    (Loss of audio)

08:44:05.009 --> 08:44:09.540
 -- now is the only way for a 
user to add widgets.  If an app 

08:44:09.718 --> 08:44:15.970
wants to add an widget, it will 
have to explain to the user 

08:44:15.971 --> 08:44:18.560
which may vary from device to 
device.

08:44:18.821 --> 08:44:26.276
   This will show confirmation 
-- and allow the user to place 

08:44:26.424 --> 08:44:32.278
the data on the homescreen.
   And can be used to update the

08:44:32.416 --> 08:44:40.788
 budget        widget.
   To summarize the changes, a 

08:44:40.789 --> 08:44:45.702
small channel shortcut will no 
longer work -- and apps should 

08:44:45.703 --> 08:44:49.824
instead use the new API to add 
shortcuts and widget.

08:44:49.825 --> 08:44:54.349
   Make sure to look for more 
information on these APIs.

08:44:54.350 --> 08:44:56.582
   [Applause]
   I'll hand it over to Selim 

08:44:59.194 --> 08:45:01.194
for notifications.
   SELIM CINEK:  Thank you, 

08:45:01.289 --> 08:45:06.428
Sunny.  Hello, everyone.  I'm 
Selim and I'm here today to talk

08:45:06.429 --> 08:45:09.029
 about notifications.  
Notifications have been one of 

08:45:09.030 --> 08:45:13.357
the key components of Android 
for many years.  In each of our 

08:45:13.358 --> 08:45:18.049
previous releases we've 
continuously improved on them.  

08:45:18.050 --> 08:45:22.547
We're further improving our 
system.  Let's first talk about 

08:45:22.548 --> 08:45:26.281
the visual changes we're doing. 
 The first key areas of improvem

08:45:26.857 --> 08:45:32.405
ents we're doing is to channel 
visual

08:45:35.975 --> 08:45:39.450
 notification hierarchy.  A user
 compares to different things.  

08:45:39.451 --> 08:45:41.583
In today's world, all 
notifications look very similar 

08:45:41.584 --> 08:45:46.428
and the user has a really hard 
time parse ing notifications.  

08:45:46.429 --> 08:45:49.327
So standarding with          
        standard               

08:45:49.328 --> 08:45:55.677
Starting with Android O  O, 
we're going to be more opinioned

08:45:55.678 --> 08:46:00.004
 about notifications.  We're 
dividing the session up into 

08:46:00.005 --> 08:46:02.005
four different areas.  On the 
very top we have a

08:46:05.006 --> 08:46:06.177
 new seconds         section 
called major ongoing.  Before 

08:46:06.178 --> 08:46:10.776
this we have people to people 
notifications.  Followed slight

08:46:11.121 --> 08:46:14.746
ly by general notifications that
 behave just the way they do 

08:46:14.747 --> 08:46:18.985
today.  At the very bottom we 
have a new section called bye 

08:46:18.986 --> 08:46:21.293
the way   notifications.
   Then we go into detail for 

08:46:21.294 --> 08:46:25.988
all of these sections.
   So the very first section 

08:46:25.989 --> 08:46:30.351
that appears on the very top is 
called major ongoing.  It is for

08:46:30.352 --> 08:46:35.772
 high-priority ongoing tasks.  
Good examples here are music 

08:46:35.773 --> 08:46:37.773
notifications, like an 

08:46:39.882 --> 08:46:42.682
ongoing navigation notification,
 or basically only something 

08:46:42.800 --> 08:46:45.375
that is really important to the 
user and the user must know it 

08:46:45.376 --> 08:46:49.603
exists.
   There are basically two ways 

08:46:49.604 --> 08:46:54.049
how a notification can end up in
 this area.  The first one 

08:46:54.050 --> 08:46:57.130
doesn't require any developer 
into     intoaction at all     

08:46:57.228 --> 08:47:01.363
              into      
interaction at all.  This is 

08:47:01.709 --> 08:47:03.869
reserve ed for media 
notifications.  We're going to 

08:47:04.268 --> 08:47:07.216
color the background of the 
notifications based on the media

08:47:07.217 --> 08:47:11.525
 artwork.
   An example you can see on the

08:47:11.526 --> 08:47:15.943
 slide.  As you can see we're 
extracting the foreground and 

08:47:15.944 --> 08:47:19.891
background color and it creates 
a really nice structured image. 

08:47:20.233 --> 08:47:23.502
 The second way how a 
notification can be colorized is

08:47:24.389 --> 08:47:28.426
 by opting in by the developer 
so a developer actually has to 

08:47:28.427 --> 08:47:32.968
do something if he wants to get 
there.  The way to do this is 

08:47:33.293 --> 08:47:37.148
it's reserve ed      serve ed 
for foreground service 

08:47:37.215 --> 08:47:38.766
notifications              
notifications.  They can use a 

08:47:38.767 --> 08:47:43.983
new method called set colorized 
on the bill ler.  The background

08:47:43.984 --> 08:47:48.510
 color will then be colorized by
 the app provided notification 

08:47:48.511 --> 08:47:50.098
color.
   I want to really stress that 

08:47:50.099 --> 08:47:54.267
please, please, please, don't 
abuse

08:47:57.561 --> 08:48:02.533
 these tile      styles.  We're 
putting a lot of trust into our 

08:48:04.107 --> 08:48:07.903
ecosystem and if we see it being
 abused too much we will have 

08:48:07.904 --> 08:48:15.605
the change it in the future.  We
 don't want to create a shape of

08:48:15.721 --> 08:48:19.012
 rainbow colors.  We want to do 
the opposite.  We want to put 

08:48:19.013 --> 08:48:21.399
focus on the one notification 
that matters.

08:48:21.552 --> 08:48:26.449
   All right.  So below these 
ongoing notifications we have 

08:48:26.534 --> 08:48:29.688
people-to-people notifications. 
 Research has shown 

08:48:32.902 --> 08:48:36.335
that users usually care about 
people notification the most.  

08:48:36.336 --> 08:48:39.822
You should go to this talk 
tomorrow happening at 12:30 p.m.

08:48:40.386 --> 08:48:49.250
  It's a design talk.  A if 
you're interested in about 

08:48:49.251 --> 08:48:51.967
notifications and how developers
 today abuse notifications, you 

08:48:51.968 --> 08:48:53.968
should really go there      
there.

08:48:53.969 --> 08:48:57.836
   We're transforming people to 
people notifications by ranking 

08:48:57.837 --> 08:49:03.398
them higher up to the user sees 
them more quickly and we're also

08:49:03.599 --> 08:49:08.269
 expanding their size.  Even in 
a collapsed form the user can 

08:49:08.351 --> 08:49:14.371
see up to three lines of text 
which makes it easy ier to parse

08:49:14.372 --> 08:49:17.956
 information.  It also happens 
on a lock screen.  If you've 

08:49:17.957 --> 08:49:21.398
been away from you're phone and 
come back you can immediately 

08:49:21.399 --> 08:49:24.092
see what's relevant and come 
back to it.

08:49:24.093 --> 08:49:29.592
   There's also internal 
notifications that behave just 

08:49:29.593 --> 08:49:32.808
like before so I won't go into 
detail on this action.

08:49:32.809 --> 08:49:38.461
   The last section on the 
notification place is called bye

08:49:38.836 --> 08:49:42.627
 the way   notifications.  This 
is completely new.  You can see 

08:49:42.628 --> 08:49:45.974
that we're transforming     
         transforming these mint

08:49:45.975 --> 08:49:50.801
 priority notifications to show 
only a single line of text.  A 

08:49:50.879 --> 08:49:53.896
user if he's interested in it 
can still make it visible by 

08:49:53.897 --> 08:49:57.084
clicking on it.  Good examples 
of notifications that should 

08:49:57.085 --> 08:50:00.794
appear there are like ongoing 
traffic notification, the 

08:50:00.795 --> 08:50:04.041
weather, basically anything that
 is important or could be 

08:50:04.042 --> 08:50:07.308
relevant but doesn't require 
immediate attention.

08:50:07.309 --> 08:50:11.460
   All right.  So this completes
 the visual notification 

08:50:11.461 --> 08:50:15.231
hierarchy.  And let's get to the
 next feature we're working on.

08:50:15.390 --> 08:50:17.737
   So the other feature we're 
working on is called

08:50:21.077 --> 08:50:23.123
 visible stability.  Let's 
consider a situation you maybe 

08:50:23.124 --> 08:50:26.351
encounter everyday.  You're 
carefully crafting and you reply

08:50:28.539 --> 08:50:31.712
 to maybe your friend, Selim, 
and just about when you were to 

08:50:31.960 --> 08:50:38.238
hit "send ," then obviously it's
 all going to reorder.  It sucks

08:50:39.672 --> 08:50:42.891
 and probably you hit the wrong 
notification and magic stuff 

08:50:42.892 --> 08:50:46.467
happened and you don't know what
 happened.  Of course, this is a

08:50:46.798 --> 08:50:49.309
 really bad experience and we 
want to improve on it.  The goal

08:50:49.559 --> 08:50:54.405
 is don't reorder notifications 
while we're looking at them.  It

08:50:54.406 --> 08:50:58.875
 sounds simple.  In reality, 
it's slightly harder than it 

08:50:58.876 --> 08:51:01.606
sounds but if you get a new 
message, you still want to know 

08:51:01.607 --> 08:51:04.668
about that, right       right?  
Yeah.

08:51:04.669 --> 08:51:12.071
   We like this feature so much 
it's even available in MRR2.  If

08:51:12.988 --> 08:51:16.053
   Ifer have a phone with that, 
it's already there.

08:51:16.054 --> 08:51:19.826
   If you know me personally, 
you know I'm all about 

08:51:19.827 --> 08:51:22.032
notifications and all about 
animations with the 

08:51:22.033 --> 08:51:25.433
notifications.  I care about the
 details.  Even the slightest 

08:51:25.576 --> 08:51:29.175
          slightest little 
detail should be pixel perfect 

08:51:29.176 --> 08:51:34.808
and animated.
   So my designers and coworkers

08:51:35.459 --> 08:51:40.111
 left me off my leash a little 
bit and I went wild.  I created 

08:51:40.112 --> 08:51:42.112
this basically where we expand

08:51:45.234 --> 08:51:46.287
 the notification chain.  I 
think this slide explains it way

08:51:46.288 --> 08:51:50.583
 better than I ever could.  The 
key goal essentially is to 

08:51:50.584 --> 08:51:52.584
create a sense of

08:51:58.057 --> 08:52:03.534
 object permanence.
   Obviously, there needs to be 

08:52:03.535 --> 08:52:05.404
a nice transition between things
       things.

08:52:05.405 --> 08:52:09.210
   As you can see, bye the way  
 notifications appear on the 

08:52:09.211 --> 08:52:13.503
very bottom and they appear as 
overflow dots to indicate an 

08:52:13.842 --> 08:52:16.560
overflow and to go away when you
 close the shade.

08:52:16.561 --> 08:52:21.294
   Let me hand it over to Dan to
 talk about channels and other 

08:52:21.295 --> 08:52:23.658
nice features.
   [Applause]

08:52:23.809 --> 08:52:29.059
   DAN SANDLER:  Thanks, Selim. 
 Hi, it's me again.  

08:52:29.060 --> 08:52:31.663
Notification channels is 
probably the biggest piece of 

08:52:31.664 --> 08:52:33.889
new API surface in the 
notification systems.  There's a

08:52:34.303 --> 08:52:39.127
 lot of interesting design 
decisions there.  Let's talk 

08:52:39.128 --> 08:52:42.867
about it.  Let's start with the 
base assumption that apps post a

08:52:42.868 --> 08:52:46.178
 lot of notifications, like kind
 of a lot.

08:52:46.443 --> 08:52:51.119
   But that's okay because users
 like notifications, also, kind 

08:52:51.310 --> 08:52:55.466
of a lot.  This is actually a 
good state of affairs. tell you 

08:52:55.467 --> 08:52:58.850
the full story of channels, I 
need to stop for a second and 

08:52:58.851 --> 08:53:02.178
talk about my friend here.  It 
might be your friend.  This is 

08:53:02.179 --> 08:53:04.223
my friend.  This is

08:53:08.398 --> 08:53:13.462
 the neurotransmitter dopamine. 
 I'm not a neuroscientist.  You 

08:53:13.463 --> 08:53:17.782
shouldn't trust what I say about
 brain chemistry, but let's just

08:53:17.783 --> 08:53:23.332
 say this is dopamine.  It's 
complicated how it works in the 

08:53:23.806 --> 08:53:26.415
brain and all kinds of stuff.  
But what we're going to talk 

08:53:26.529 --> 08:53:29.545
about today is the things it's 
associating with that I show 

08:53:29.546 --> 08:53:33.481
here.  Things like anticipation 
and reward.  Motivation, seeking

08:53:34.157 --> 08:53:40.362
 rewards, your attention, 
salience, your sort of in-the-

08:53:40.611 --> 08:53:44.480
moment and looking for something
, including the right word for 

08:53:44.481 --> 08:53:47.101
that slide.
   It's basically the user 

08:53:47.556 --> 08:53:54.132
engagement chemical in your 
brain.  So bringing this back, 

08:53:54.133 --> 08:53:58.028
to what we're talking about here
, dopamine on its own doesn't 

08:53:58.029 --> 08:54:02.288
make you happy.  There are lots 
of other great neurotransmitters

08:54:02.289 --> 08:54:05.699
 and chemicals that make you 
feel happy.  That's not its 

08:54:05.700 --> 08:54:10.714
purpose.  Dopamine gets you 
there.  Okay?  This works the 

08:54:10.715 --> 08:54:14.740
same way.  They get your 
anticipation.  You become 

08:54:14.741 --> 08:54:20.476
attuned to them.  You anticipate
 a reward so you tap on it.  

08:54:20.477 --> 08:54:22.982
Maybe what's behind it is 
satisfying.  You hope it is.  

08:54:22.983 --> 08:54:26.605
Maybe it's not.
   So with every app fighting 

08:54:26.606 --> 08:54:33.186
for the users limited supply of 
dopamine and limited ability to 

08:54:33.471 --> 08:54:35.694
care about distractions and 
stuff the device wants to tell 

08:54:35.873 --> 08:54:41.830
you, and suddenly, you're not as
 nearly as excited about those 

08:54:41.831 --> 08:54:43.831
notifications at all.  Everybody
 uses     

08:54:47.740 --> 08:54:51.857
 loses.  All of you, I can tell,
 just by looking at you, have 

08:54:51.858 --> 08:54:56.750
good notifications.  Your 
notifications are the ones use 

08:54:56.903 --> 08:55:01.963
ers really want to see.  We get 
ourselves.  But some others 

08:55:01.964 --> 08:55:05.201
ought there aren't working so 
well.  Or maybe you get really 

08:55:05.562 --> 08:55:10.385
good notifications, but (

08:55:13.946 --> 08:55:16.648
long beep noise).
   Okay.  Well, this is the long

08:55:18.191 --> 08:55:22.889
est notification tone ever.
   [Laughter]

08:55:25.024 --> 08:55:32.474
   Yep.  Dun, dun, dun.  Maybe 
need          

08:55:37.817 --> 08:55:39.817
   [Applause]
   So maybe you messed up one 

08:55:40.219 --> 08:55:45.997
time and you made a notification
 that had a really loud beeping 

08:55:45.998 --> 08:55:51.464
tone so the user banned your app
 forever.  Or maybe it didn't 

08:55:51.465 --> 08:55:53.465
recommend the right thing so

08:55:55.772 --> 08:55:57.772
 the user blocked our app or

08:56:00.229 --> 08:56:05.080
 uninstalled it.
   Maybe some users love things 

08:56:05.081 --> 08:56:08.989
but the rest could take it or 
leave it and you run the risk of

08:56:09.309 --> 08:56:13.946
 making them unhappy.
   The Android way is to let you

08:56:14.181 --> 08:56:20.363
 get control.  You can uninstall
 things.  In jelly bean we added

08:56:20.364 --> 08:56:24.689
 the ability to block 
notifications and leave the rest

08:56:24.690 --> 08:56:32.561
 just as it did.  But in Android
 O we're introducing channels.  

08:56:32.562 --> 08:56:37.205
So this describes a category of 
notifications from your app, the

08:56:37.463 --> 08:56:40.537
 channel is specific to your app
    app, doesn't match any other

08:56:40.538 --> 08:56:43.898
 app's channels.  Everything on 
the channel shares the same 

08:56:43.899 --> 08:56:49.210
behavior.  You can see behaviors
 like sound, vibration, whether 

08:56:49.211 --> 08:56:53.058
they pop up on the screen or 
light the LED and so forth.

08:56:53.284 --> 08:56:56.559
   The category is arranged so 
the user can understand these 

08:56:56.560 --> 08:56:58.353
notifications and control them. 
 Category of notifications from 

08:56:58.354 --> 08:57:01.933
an app with the same behavior so
 the user can understand and 

08:57:01.934 --> 08:57:03.388
control them.
   All right.  I've got an 

08:57:03.389 --> 08:57:10.214
example here from a fictitious 
airline, Crane Air.  Usually 

08:57:10.215 --> 08:57:13.466
they post notifications like 
your flight is delayed but your 

08:57:13.467 --> 08:57:16.518
really important, but one day 
they post something that says 

08:57:16.519 --> 08:57:22.292
you earned 60 points today.  
Your only a few points away from

08:57:22.613 --> 08:57:27.817
 being able to sit in the humane
 seats.  Many users might really

08:57:27.818 --> 08:57:33.386
 love this.  I'll get to that 
status level.  Other users might

08:57:33.387 --> 08:57:37.450
 find, wow, I'm going to 
uninstall this app.  I don't 

08:57:37.451 --> 08:57:41.992
need that in my life. the 
channels world, Android O, you 

08:57:41.993 --> 08:57:45.975
can use the short swipe gesture 
to get to the inside of this 

08:57:45.976 --> 08:57:48.247
notification, the inspector 
where you can see the app that 

08:57:48.248 --> 08:57:51.568
posted it.  We want that 
account        accountability.  

08:57:51.569 --> 08:57:55.962
We introduced that in nugget.
   You want the name of the 

08:57:55.963 --> 08:57:57.460
channel.
   You see there are other 

08:57:57.461 --> 08:58:00.303
channels available to sort of 
give you context.  You see here 

08:58:00.304 --> 08:58:06.216
it's called "categories" ." Our 
user facing name is categories. 

08:58:06.546 --> 08:58:10.011
 You and I know something we 
already had something called 

08:58:10.433 --> 08:58:15.182
categories.  So internally it's 
called "  "channels."  But we 

08:58:15.406 --> 08:58:17.925
call it categories in the UI 
strings.

08:58:17.926 --> 08:58:21.693
   So you see this screen.  What
 do you do?  Touch that switch 

08:58:22.247 --> 08:58:24.731
on the right-hand side and 
they're gone.  The executive 

08:58:24.732 --> 08:58:28.247
program notifications only are 
gone.  Everything else from that

08:58:28.442 --> 08:58:33.371
 app works as it did before. you
 didn't want to block them.  

08:58:33.372 --> 08:58:39.198
Like that's useful information 
but it beeped or made the phone 

08:58:39.199 --> 08:58:43.296
do something you didn't like.  
Maybe this would be more 

08:58:43.297 --> 08:58:51.304
preferred to be "by the way" 
type.

08:58:51.305 --> 08:58:57.584
   This takes you into setting 
dot APK on the ROM.  It shows 

08:58:59.100 --> 08:59:05.830
you the app name and shows the 
master switch to block things.  

08:59:05.831 --> 08:59:15.305
It lists the categories.
   --  From this space the user 

08:59:15.306 --> 08:59:18.085
can quickly block or unblock 
that channel and even dig in 

08:59:18.086 --> 08:59:20.254
deeper to control the very 
specific details of that 

08:59:20.255 --> 08:59:23.206
behavior if you really want to, 
because, again, the point is 

08:59:23.425 --> 08:59:26.478
we're giving the user control 
over everything the app can do. 

08:59:26.738 --> 08:59:29.932
 Before I move on I want to 
point out there is a link at the

08:59:30.163 --> 08:59:33.144
 bottom that goes to your app 
notification settings.  We'll 

08:59:33.145 --> 08:59:35.356
talk about what goes here and 
what goes there.

08:59:35.357 --> 08:59:37.971
   To show you an example, if 
you touch one of those channels,

08:59:38.196 --> 08:59:41.723
 you'll see a screen like this 
where you can block just that 

08:59:42.134 --> 08:59:46.116
channel.  That switch is the 
same on the previous slide on 

08:59:46.230 --> 08:59:49.805
the row item.  You can change 
the importance, which is our new

08:59:49.806 --> 08:59:54.523
 system which replaces the old 
priority APIs, if your familiar 

08:59:54.524 --> 08:59:59.056
with those.  It affects what 
pops up or makes or doesn't make

08:59:59.286 --> 09:00:02.719
 sense and           sound and 
so forth.

09:00:02.720 --> 09:00:05.846
   You can change a whole bunch 
of stuff, if you're a super fan 

09:00:05.957 --> 09:00:09.590
of notifications.  If you're not
, you might not get this far 

09:00:09.790 --> 09:00:13.791
down into this.  We have another
 link here.  We'll put extra 

09:00:13.792 --> 09:00:17.456
stuff in so you know what the 
user was trying to configure at 

09:00:17.457 --> 09:00:18.932
that time.
   There's also a little 

09:00:18.933 --> 09:00:21.458
description at the bottom.  You 
can set a description to explain

09:00:21.598 --> 09:00:25.302
 what the channel is for.
   I have a little bit of code 

09:00:25.303 --> 09:00:29.009
here.  Just a little bit.  
There's much more extensive code

09:00:29.010 --> 09:00:34.185
 samples, obviously, on D  
D.Android.com.

09:00:34.186 --> 09:00:41.099
   You create one to set up the 
notification channels.  The 

09:00:41.100 --> 09:00:45.770
channel ID is important there.  
It's just a string, whatever you

09:00:45.771 --> 09:00:50.446
 want it to be.  It becomes an 
ID for that channel when you 

09:00:50.447 --> 09:00:55.913
post it later P you give       
    .  You give it a localized 

09:00:56.098 --> 09:00:58.098
string.  You give it the 
importance you would look for it

09:00:58.705 --> 09:01:03.006
 to have.  You give it the sound
 and vibration you would like 

09:01:03.007 --> 09:01:08.461
for it to have and so on.  You 
set up all the program         

09:01:08.571 --> 09:01:11.942
parameters of this channel.  
Then you ask, please, correct 

09:01:11.943 --> 09:01:18.039
this.
   The notification manager 

09:01:18.040 --> 09:01:21.420
persists all this information 
between reboots.  You can do 

09:01:21.578 --> 09:01:24.841
this any time the service starts
 up and it's very cheap.  If it 

09:01:24.842 --> 09:01:27.890
sees you already made this 
channel, it skips right over it.

09:01:27.998 --> 09:01:31.944
  You can do this in any of your
 setup code.hen you go to post a

09:01:32.076 --> 09:01:35.590
 notification, you just slow it 
into the builder constructor.  

09:01:35.591 --> 09:01:37.591
And that's it

09:01:39.408 --> 09:01:41.408
.
   [

09:01:42.561 --> 09:01:44.830
Applause]
   Not that's it for the talk.  

09:01:44.831 --> 09:01:45.945
We have more things to talk 
about.

09:01:45.946 --> 09:01:49.130
   Remember I said there was 
question about what settings go 

09:01:49.131 --> 09:01:54.623
where.  So there's app settings,
 inside your app and that I've 

09:01:54.624 --> 09:01:58.442
shown you are now inside Android
.  Truthly           Truth     

09:01:59.103 --> 09:02:07.060
   .  Truth be told you could 
always control certain things 

09:02:07.340 --> 09:02:10.511
but we've made a clearer 
distinction in O about what goes

09:02:10.775 --> 09:02:15.038
 where.  We're saying focus on 
the business rules, the what, 

09:02:15.292 --> 09:02:20.772
when, why, of what notifications
 exist in your world and what 

09:02:20.773 --> 09:02:24.351
that mean.  The system doesn't 
know what your social graph is 

09:02:24.352 --> 09:02:28.750
and such.  Android doesn't care 
about that.  You define all 

09:02:28.751 --> 09:02:33.317
those.  We're only moving to 
Android settings how it behaves 

09:02:33.318 --> 09:02:37.873
once it gets onscreen or on 
vibrate or so forth.

09:02:37.874 --> 09:02:42.567
   That's a thing a user can 
take editorial control of later.

09:02:42.760 --> 09:02:46.703
   There are some questions when
 we described this of I don't 

09:02:46.704 --> 09:02:50.315
know how to organize my 
questions or do I have just one?

09:02:50.556 --> 09:02:54.202
  Here is our recommendation.  
Pick something that makes sense.

09:02:54.429 --> 09:02:57.538
  Pick something that is going 
to make sense to your user such 

09:02:57.539 --> 09:03:02.836
that if they say I kind of want 
this set of things to behave 

09:03:02.837 --> 09:03:04.351
differently            
differently, that defines your 

09:03:04.352 --> 09:03:09.527
channel.  Let's say your in some
 kind of business chat.  Maybe 

09:03:09.528 --> 09:03:12.901
ever room is its own channel.  
Your app might already call them

09:03:12.902 --> 09:03:17.255
 channels.  Or perhaps a 
different topic in a news app or

09:03:17.256 --> 09:03:20.988
 a different sender or different
 chat group in a messaging app. 

09:03:21.143 --> 09:03:24.717
 Anything that you want the user
 to tweak in isolation or you 

09:03:24.718 --> 09:03:29.143
want to behave differently from 
other notifications, put it in 

09:03:29.257 --> 09:03:32.785
its own channel.  Remember, 
everything in the channel 

09:03:32.924 --> 09:03:35.398
behaves exactly the same way so 
that the user can understand and

09:03:35.548 --> 09:03:38.791
 control it. give you one 
additional level of hierarchy 

09:03:38.792 --> 09:03:43.510
just for presentation and make 
it easy ier to organize it.  The

09:03:43.511 --> 09:03:49.952
 code is real easy.  You assign 
it to each channel as you create

09:03:49.953 --> 09:03:53.097
 it.  You can segment channels. 
 It's really useful for multiple

09:03:53.199 --> 09:03:59.280
 accounts.  This is the et    
              You can see I have

09:03:59.281 --> 09:04:05.203
 one channel and another 
channel.  The user may never see

09:04:05.204 --> 09:04:09.864
 this screen.  But if you long 
press it you can see it's calls 

09:04:09.865 --> 09:04:13.200
specifically from my personal 
account.  Now, I can make 

09:04:13.201 --> 09:04:15.809
changes to that.
   Many of you are already 

09:04:16.218 --> 09:04:21.505
sitting there thinking, ob     
okay, I see some ways around 

09:04:21.506 --> 09:04:26.034
this.  We've been thinking about
 this a little bit.  Let's walk 

09:04:26.035 --> 09:04:30.786
through it.  First is apps have 
a million ways to be cruel to 

09:04:30.787 --> 09:04:33.188
the user.  Stopping them is 
impossible.  What we want to do 

09:04:33.380 --> 09:04:38.400
is deal with obviously things.  
Right?  An obvious abusive app 

09:04:38.401 --> 09:04:43.020
results in uninstalls or bad 
ratings or bad reviews and you 

09:04:43.152 --> 09:04:45.862
don't want that.
   Now we have to worry about 

09:04:46.006 --> 09:04:48.389
sneaky things.  We want to 
prevent them if we can or move 

09:04:48.390 --> 09:04:51.816
them into the obvious category, 
which we know how to deal with.

09:04:52.073 --> 09:04:55.403
   Here is an example of 
something an app can do.  If the

09:04:55.903 --> 09:04:59.379
 user changes the channel 
settings, like I want to put it 

09:04:59.380 --> 09:05:08.845
in BTWP , well     well, what if
 I just change it back?  We 

09:05:09.092 --> 09:05:13.710
don't let you.  The user has the
 final say in what that channel 

09:05:13.711 --> 09:05:17.287
does, period.  Okay.  All right.
  If      If I can't change the 

09:05:17.288 --> 09:05:20.357
channel settings, I'm just going
 to delete that channel that has

09:05:20.460 --> 09:05:23.329
 properties I don't like and 
create a new one.

09:05:23.330 --> 09:05:29.065
   Okay.  Fine.  In the settings
 app we actually show you how 

09:05:29.066 --> 09:05:33.099
many channels the app has 
deleted.  We don't show you 

09:05:33.100 --> 09:05:38.185
exactly what they are for 
privacy reasons but you can go 

09:05:38.186 --> 09:05:42.364
into settings and say, "I feel 
like I've blocked that five 

09:05:42.365 --> 09:05:45.348
times before?"           
before?" Mm-hmm, five blocked 

09:05:45.349 --> 09:05:47.349
channels.  Now the app

09:05:50.358 --> 09:05:54.049
's malfeasance is obviously.
   Can I make one channel for 

09:05:54.050 --> 09:05:57.231
everything and suspect out of 
               opt out of all of

09:05:57.479 --> 09:06:02.700
 this?  You can do that.  If 
your app only chimes on the hour

09:06:03.010 --> 09:06:06.244
, that probably makes sense.  
But if you want your critical 

09:06:06.763 --> 09:06:13.567
notifications to be tied in fate
 to your recommendations or 

09:06:13.568 --> 09:06:17.790
speculative notifications, than 
the user and you will have a bad

09:06:17.791 --> 09:06:20.810
 time because all those will 
behave the same way and they'll 

09:06:20.811 --> 09:06:24.898
get blocked together..  Wrapping
 up on channels, you set up your

09:06:24.899 --> 09:06:28.795
 categories.  After that, the 
user is in control of how they 

09:06:28.796 --> 09:06:31.902
behave.  The user happiness 
should be your goal.  You work 

09:06:32.168 --> 09:06:35.676
to make your user happy      
happy.  The user will work to 

09:06:35.677 --> 09:06:38.713
get the notifications they want 
and you want them to see and 

09:06:38.714 --> 09:06:48.563
everybody gets their dopamine 
and Sarah       s  seratonin

09:06:49.087 --> 09:06:51.087
 and norepinephrine.

09:06:53.598 --> 09:06:58.006
   Once you started targets O, 
any notifications you post that 

09:06:58.007 --> 09:07:01.846
doesn't have a channel gets drop
 odd the floor               

09:07:01.938 --> 09:07:04.911
     dropped on the floor.  I 
shouldn't have done that with 

09:07:04.912 --> 09:07:08.581
the clicker.  The notification 
gets dropped.  It never shows up

09:07:08.801 --> 09:07:11.791
 with the user.  You have a 
limited amount of time to move 

09:07:11.792 --> 09:07:15.711
everything over, take a look at 
your notifications and organize 

09:07:15.712 --> 09:07:20.590
them into channels.  You'll be 
amazed at how many things you 

09:07:21.012 --> 09:07:28.026
post.  What a great time to take
 stock.

09:07:28.289 --> 09:07:32.057
   So you can organize them to 
situations where there's -- 

09:07:32.058 --> 09:07:35.280
there's nothing on this slide.  
Go to the situation where the 

09:07:35.383 --> 09:07:39.430
user sees them in the order they
 want to see and is very happy 

09:07:39.431 --> 09:07:43.881
and blinky and so forth.
   Oh, one last thing.  We've 

09:07:43.882 --> 09:07:47.634
got almost no time.  We did 
introduce badges on icons.  That

09:07:47.635 --> 09:07:51.854
 slipped out on    on    on the 
keynote.  A late breaking thing.

09:07:52.048 --> 09:07:55.117
  We wanted to do the Android 
thing and make them low anxiety,

09:07:55.271 --> 09:08:02.347
 give the user control, make 
them look nice.

09:08:02.348 --> 09:08:05.960
   You'll see notification dots.
  The dot just means there are 

09:08:05.961 --> 09:08:09.965
notifications for this app.  You
 get to choose which of your app

09:08:10.325 --> 09:08:15.302
    apps get dots.  The music 
channel wouldn't have a dot for 

09:08:15.417 --> 09:08:20.454
play back controls but it would 
for its recommendations.  Users 

09:08:20.551 --> 09:08:25.355
can turn those on or off as they
 will.  If you dismiss it, the 

09:08:25.356 --> 09:08:29.199
user is in total control.
   Thank you so much.

09:08:29.200 --> 09:08:32.763
   [Applause]
   We've got folks from the team

09:08:32.764 --> 09:08:38.185
 here.  So we'll answer 
questions outside.  Thanks, very

09:08:38.418 --> 09:08:41.971
 much.
   (End of 

09:08:46.663 --> 09:08:48.663
presentation)

09:09:06.907 --> 09:09:10.358
RAW FILE.
   GOOGLE I/O

09:09:16.471 --> 09:09:20.549
2017.
   SAN JOSE, CALIFORNIA.

09:09:20.550 --> 09:09:22.597
   MAY 18, 2017.

09:09:30.533 --> 09:09:36.048
7:30 P.M. CENTRAL TIME.
   STAT 

09:09:40.926 --> 09:09:45.598
#2.
   SESSION: SPEEDING UP YOUR 

09:09:45.599 --> 09:09:47.761
ANDROID GRADLE 

09:09:50.868 --> 09:09:52.868
BUILDS.

09:09:55.438 --> 09:09:57.438
   SESSION #: T

09:10:00.439 --> 09:10:02.439
1

09:10:03.916 --> 09:10:05.916
912D

09:10:19.192 --> 09:10:27.374
   GOOGLE I/O2017.
   SAN JOSE, CALIFORNIA.AY 18, 

09:10:27.375 --> 09:10:29.680
2017.
   7:30 P.M.

09:10:37.251 --> 09:10:39.251
CENTRAL TIME.
   STAGE #2

09:10:44.180 --> 09:10:46.180
.
   SESSION:

09:11:34.103 --> 09:11:39.169
 SPEEDING UP YOUR ANDROID GRADLE
 BUILDS

09:11:44.007 --> 09:11:47.535
.
   SESSION #: T

09:11:51.912 --> 09:11:53.912
1912D.

09:11:56.842 --> 09:11:57.110
.
   Services provided by:

09:11:57.111 --> 09:11:57.345
        Caption First, Inc.
        P.O. Box 3066

09:11:57.346 --> 09:11:57.785
        Monument, CO  80132
        800-825-5234

09:11:57.786 --> 09:11:58.166
        +001-719-481-9835
        www.captionfirst.com

09:11:58.167 --> 09:11:58.830
   * * *
   This text is being provided 

09:11:58.831 --> 09:11:58.911
in a realtime format.  
Communication

09:11:58.912 --> 09:11:59.427
   Access Realtime Translation 
(CART) or captioning are 

09:11:59.428 --> 09:11:59.885
provided in
   order to facilitate 

09:11:59.886 --> 09:11:59.954
communication accessibility and 
may not be a

09:11:59.955 --> 09:12:00.043
   totally verbatim record of 
proceedings.

09:12:00.044 --> 09:12:02.044
   * * *

09:26:56.580 --> 09:26:58.580
 TEST    

09:28:21.744 --> 09:28:23.744
.  Good afternoon. 

09:28:27.972 --> 09:28:30.953
 We I am James and I work on 
Android Studio.

09:28:35.791 --> 09:28:37.791
 I am here with Jerome, who is 
the tech lead for the build 

09:28:38.440 --> 09:28:40.009
system. We are here today to 
talk about one of our favorite 

09:28:40.010 --> 09:28:42.023
topics: how to improve Android 
build speed. Slow build speed is

09:28:42.024 --> 09:28:44.024
 a huge productivity buster.

09:28:46.038 --> 09:28:47.497
 Itâ€™s like driving on a road 
while constantly hitting speed 

09:28:47.498 --> 09:28:49.498
bumps.

09:28:52.338 --> 09:28:53.575
 We have heard you loud and 
clear about the importance of 

09:28:53.576 --> 09:28:55.576
build speed.

09:28:58.478 --> 09:29:03.447
that's why we've been focused on
 the past several quarters on 

09:29:03.448 --> 09:29:05.448
building speed performance

09:29:07.606 --> 09:29:09.606
. To give you some context of 
why we are giving this talk 

09:29:09.624 --> 09:29:10.654
today: over the past year, our 
team has been running several 

09:29:10.655 --> 09:29:12.655
build 

09:29:14.313 --> 09:29:14.484
clinics. In these build clinics,
 we meet with developers one on 

09:29:14.485 --> 09:29:16.485
one.

09:29:20.848 --> 09:29:23.288
     one.They would come to you 
and tell us about your build 

09:29:23.289 --> 09:29:27.182
performance issues.  Now, well 
play doctor in these clinics 

09:29:27.183 --> 09:29:32.126
which was kind of fun. Now this 
is the really surprising part, 

09:29:32.127 --> 09:29:34.127
even to us.

09:29:36.999 --> 09:29:43.316
We would be able to speed up 
their development builds 3x, 10x

09:29:43.317 --> 09:29:49.950
 sometimes, by applying a simple
 set of tips that we will share 

09:29:49.951 --> 09:29:51.951
with you today.

09:29:54.675 --> 09:29:56.675
 Our talk today is structured 
into three parts.

09:29:58.200 --> 09:29:58.915
 For the first part, I will 
share with you some simple tips 

09:29:58.916 --> 09:30:00.916
for speeding

09:30:02.691 --> 09:30:05.141
 up your projectâ€™s development 
build.Second we're Jerome is 

09:30:05.142 --> 09:30:12.427
going to talk to you about how 
you can make the most of of the 

09:30:12.540 --> 09:30:17.630
Android Gradle plugin 3.0 which 
we just released yesterday.  

09:30:17.631 --> 09:30:22.523
Finally we'll talk about tools 
and best practices on how to 

09:30:22.980 --> 09:30:28.891
debug and build your best 
performance issues. So now, 

09:30:28.892 --> 09:30:30.892
letâ€™s talk about some quick tips
 for speeding up your 

09:30:31.358 --> 09:30:31.685
development builds. I am going 
to present these tips to you one

09:30:31.686 --> 09:30:33.686
 at a time.

09:30:39.367 --> 09:30:41.367
 I am also going to use the 
Santa Tracker project as

09:30:42.860 --> 09:30:43.595
 an example, and show you how 
each of these tips impact its 

09:30:43.596 --> 09:30:45.596
build speed.

09:30:49.178 --> 09:30:50.870
 We will apply these tips one by
 one and letâ€™s see how fast we 

09:30:50.871 --> 09:30:54.088
can get the build at the end. 
Okay?

09:30:58.994 --> 09:31:00.994
 But first, I want to show you a
 bit about the Santa Tracker

09:31:03.403 --> 09:31:05.627
 Because build performance is 
really dependent on the project

09:31:05.838 --> 09:31:14.204
's characteristics.  The       
The Santa tracker is organized 

09:31:14.205 --> 09:31:18.187
into different modules, 
including a wear module.  It's 

09:31:18.188 --> 09:31:27.061
pretty resource heavy with 
thousands of files and 3500 

09:31:27.062 --> 09:31:30.398
png's. Itâ€™s very resources 
heavy, with over 1700 XML files 

09:31:30.399 --> 09:31:32.708
and over 3500 PNGs. It uses 
multi-dex, and no annotation 

09:31:33.846 --> 09:31:35.504
processors. The debug APK is 
about 60MB, so itâ€™s pretty 

09:31:35.505 --> 09:31:35.662
large. If you would like to 
explore more about this project,

09:31:35.663 --> 09:31:37.663
 you can find it on Googleâ€™s 
GitHub account.

09:31:41.525 --> 09:31:44.458
 For the benchmarking of this 
project, I am going to show you 

09:31:49.071 --> 09:31:49.218
numbers for three build 
scenarios. The first one is a 

09:31:49.219 --> 09:31:49.811
full build, which is just a 
clean, and then an assemble 

09:31:49.812 --> 09:31:51.812
Debug.

09:31:54.918 --> 09:31:56.709
 The second one is an 
incremental build after making a

09:31:56.710 --> 09:31:58.710
 one-line method implementation 
Java

09:32:01.338 --> 09:32:01.509
 change. The third one is an 
incremental build after adding a

09:32:01.510 --> 09:32:03.510
 string 

09:32:05.041 --> 09:32:11.104
resource.It's a simple add or 
remove sing resource.  We can 

09:32:11.105 --> 09:32:13.105
measure time for

09:32:15.440 --> 09:32:17.440
 each of these. Just remember 
that build performance is highly

09:32:22.835 --> 09:32:26.901
 dependent on the project and 
your build environment, so you 

09:32:22.835 --> 09:32:22.995
may get more or less improvement
 from these tips. All of that is

09:32:22.996 --> 09:32:24.996
 to say: actual results may 
vary.

09:32:31.370 --> 09:32:32.387
 The first tip is to make sure 
you use the latest Android 

09:32:32.388 --> 09:32:34.877
Gradle plugin.

09:32:39.850 --> 09:32:41.850
 With each release, we have a 
lot of bug fixes and performance

09:32:42.095 --> 09:32:46.995
 improvements that you can take 
advantage of.You want to make 

09:32:46.996 --> 09:32:50.591
sure you can legislative        
     leverage those.  There are 

09:32:50.592 --> 09:32:53.897
a couple things to note here.  
First, starting with

09:32:57.961 --> 09:32:59.961
 3.0,

09:33:03.525 --> 09:33:04.382
 the first thing I did was to 
check the version of the Android

09:33:04.383 --> 09:33:04.549
 Gradle plugin that it was 
using. Then I was both sad and 

09:33:04.550 --> 09:33:06.550
happy that it was using an old 
version

09:33:10.484 --> 09:33:14.318
 of the plugin.the plug in often
 requires specific build tools 

09:33:14.319 --> 09:33:16.963
and specific versions of Gradle 
itself.  The easiest way to do 

09:33:16.964 --> 09:33:25.884
this is to do the update in 
Android studio.  And third the

09:33:27.855 --> 09:33:33.301
 3.0 plugin is a bit of an 
exception.  It might require 

09:33:33.302 --> 09:33:37.253
more work on your part to update
.  We published a migration 

09:33:37.254 --> 09:33:43.229
guide and you'll see the link at
 the end of the presentation.

09:33:48.081 --> 09:33:50.081
 And this was the result I got.

09:33:51.645 --> 09:33:55.385
You can see that Immediately, I 
shaved off 25%

09:33:58.611 --> 09:34:00.611
 from the full build, close to

09:34:03.566 --> 09:34:05.566
 40% from the incremental Java 
change build, and 16% from the 

09:34:06.419 --> 09:34:09.437
resource change build.not bad 
for just updating to the latest 

09:34:09.438 --> 09:34:18.020
plugin.  The second tip is to 
avoid legacy multidex.

09:34:20.334 --> 09:34:21.603
 Now all of you know that if 
your app exceeds the 64K method 

09:34:21.604 --> 09:34:23.604
reference limit, you need to use
 multi-dex.

09:34:27.754 --> 09:34:30.182
 Now what you may not know is 
that if you are using multi-dex 

09:34:30.267 --> 09:34:32.361
and if your minSdkVersion is 
less than 21, then you will be 

09:34:32.453 --> 09:34:34.453
using legacy multi-dex,

09:34:36.675 --> 09:34:40.813
 and the build will be much 
slower.Legacy multidex is a lot 

09:34:40.814 --> 09:34:49.193
slower to build and you want to 
avoid that.  Newer versions of

09:34:52.119 --> 09:34:56.796
 Android studio will 
automatically detect your emulat

09:34:56.877 --> 09:35:05.408
  to image and switch to multide
x if applicable. Now if you 

09:35:05.409 --> 09:35:07.409
usually start your build by 
clicking on the Run

09:35:08.505 --> 09:35:10.842
 button in Android Studio, then 
you donâ€™t really need to worry 

09:35:10.919 --> 09:35:11.863
about this anymore. Newer 
versions of Android Studio will 

09:35:11.864 --> 09:35:11.953
automatically look at the 
connected device and emulator, 

09:35:11.954 --> 09:35:13.954
and

09:35:17.243 --> 09:35:19.243
 if

09:35:22.058 --> 09:35:23.645
 itâ€™s newer than 21. Then it 
will use native multidex 

09:35:23.646 --> 09:35:26.926
regardless of what you have the 
minSdkVersion set to.These are 

09:35:26.927 --> 09:35:30.593
the results that I got.  We 
shaved another five seconds off 

09:35:30.594 --> 09:35:35.110
the full build, a whooping eight
 seconds, that more than 50% of 

09:35:35.111 --> 09:35:40.852
what we had before, and then 
incremental build for resource 

09:35:40.853 --> 09:35:42.853
change is about the

09:35:46.561 --> 09:35:51.056
 same, as you would expect.

09:36:02.355 --> 09:36:06.335
  --
   MultiAPK -- the idea here is 

09:36:06.336 --> 09:36:12.218
that you can tell it to generate
 a long dimensions like ABI or 

09:36:12.219 --> 09:36:19.831
density so that it generates 
these APK's that are smaller in 

09:36:19.832 --> 09:36:25.132
size.  Small APK's are great for
 release builds but they're not 

09:36:25.133 --> 09:36:28.116
that important for your 
development builds.  So if you 

09:36:28.117 --> 09:36:34.040
do it for development builds 
you'll be wasting time creating 

09:36:34.041 --> 09:36:37.883
these APK's that you're not 
using.

09:36:45.344 --> 09:36:47.300
 To disable multi-APK generation
 properly, you canâ€™t just d

09:36:47.301 --> 09:36:47.495
isable it in the splits block 
because the splits block applies

09:36:47.496 --> 09:36:50.891
 to all build variants. So one 
way to do this properly is to 

09:36:50.892 --> 09:36:51.215
disable multi-APK generation 
whenever a devBuild project 

09:36:51.216 --> 09:36:55.691
property is defined.I'm just 
going to pass that property to 

09:36:55.692 --> 09:36:59.268
Gradle every time I do a 
development build.  If Gradle 

09:36:59.269 --> 09:37:05.510
sees that property, it will set 
the split start API and density 

09:37:05.511 --> 09:37:11.303
to false.  And the multiAPK 
generation will not happen.

09:37:22.843 --> 09:37:23.276
 And then in Studio, you can 
pass the same flag under the 

09:37:23.277 --> 09:37:25.277
Compiler under preferences 
command-line

09:37:26.744 --> 09:37:31.886
 options.It will also pass the 
same flag to Gradle so multiAPK 

09:37:31.887 --> 09:37:36.309
generation will not occur.
   And these are numbers I got 

09:37:36.310 --> 09:37:45.554
after disables multiAPK.  Again 
some more improvements across 

09:37:45.555 --> 09:37:47.555
the 

09:37:49.327 --> 09:37:50.416
board. The next tip four is to 
include minimal resources in 

09:37:50.417 --> 09:37:52.417
your development flavor.

09:37:55.852 --> 09:37:59.074
 By default, the build system 
will include resources for all 

09:37:59.198 --> 09:38:01.118
the languages and screen 
densities that your app or the 

09:38:01.119 --> 09:38:03.119
libraries that your app uses 
define.

09:38:16.927 --> 09:38:18.927
 So if your app supports many 
different languages or screen 

09:38:22.362 --> 09:38:22.621
densities you're limiting the 
resources to just the set you 

09:38:22.622 --> 09:38:23.810
need in your development build 
could get you substantial time 

09:38:23.811 --> 09:38:27.524
savings in your build. To do 
this, use resConfigs keyword in 

09:38:27.525 --> 09:38:28.881
your product flavor to specify 
only the language and screen 

09:38:28.882 --> 09:38:31.551
density you want to support.

09:38:36.538 --> 09:38:40.376
Then we can see here on the full
 build we shaved off another six

09:38:40.814 --> 09:38:46.400
 seconds, 24% off the increment
al build in Java change, and 21%

09:38:49.096 --> 09:38:52.767
 for the incremental change 
case.  I continue to make gains.

09:38:54.737 --> 09:38:58.876
    Next up, is to disable PNG 
crunching in your development 

09:38:58.877 --> 09:39:02.178
build. By default, AAPT will 
crunch your PNGs to reduce their

09:39:02.179 --> 09:39:04.179
 sizes, yielding you a smaller

09:39:08.085 --> 09:39:12.371
 APK.Again, that's a great thing
 for your release APK's but not 

09:39:12.372 --> 09:39:16.199
that important for your 
development builds.

09:39:19.496 --> 09:39:20.479
    To avoid PNG crunching, you 
can use the same property that 

09:39:20.480 --> 09:39:22.480
we

09:39:25.337 --> 09:39:31.804
 Defined and have the         
             define defined 

09:39:31.805 --> 09:39:33.033
earlier for your development 
builds, and set cruncherEnabled 

09:39:33.034 --> 09:39:35.034
to false if this property is 

09:39:36.160 --> 09:39:38.824
defined.on Gradle whenever you 
do a property build you can pass

09:39:39.031 --> 09:39:43.772
 that onto Gradle to avoid png 
crunching.

09:39:43.773 --> 09:39:48.941
   The other option to avoid png
 crunches is to convert all your

09:39:49.238 --> 09:39:58.039
 png's into P   WebP.  WebP is 
up to 25% smaller so you get a 

09:39:58.040 --> 09:40:02.973
smaller APK to boot. Newer 
versions of Android Studio has 

09:40:02.974 --> 09:40:03.160
built-in support for converting 
PNGs into WebP, so you can you 

09:40:03.161 --> 09:40:09.180
do that easily right inside 
Studio.You can easy ily convert 

09:40:09.181 --> 09:40:11.999
them into                      

09:40:15.844 --> 09:40:18.563
 you need to be mindful of the 
platform support for WebP: O

09:40:18.684 --> 09:40:20.684
paque webâ€™s are supported 
starting with API level 15but if

09:40:20.856 --> 09:40:25.431
 you have alpha channels and 
support transparency in your web

09:40:25.528 --> 09:40:30.328
 feed then you need level 18 or 
above.  That is something to be 

09:40:30.329 --> 09:40:32.474
mindful of.
   So these are the numbers that

09:40:33.412 --> 09:40:35.807
 I got after disabling

09:40:39.939 --> 09:40:41.939
 crunching.

09:40:43.401 --> 09:40:50.850
  The Santa tracker has a ton of
 pngs in them.  Previously, we 

09:40:50.851 --> 09:40:53.818
were spending a lot of time 
doing that.  The other ones 

09:40:53.819 --> 09:40:56.512
didn't change that much.
   Here is the kicker.  When I 

09:40:56.513 --> 09:41:04.897
looked at the APK size with 
crunching and without crunching 

09:41:04.898 --> 09:41:10.193
there was no difference.  Turns 
out Santa was doing png 

09:41:10.194 --> 09:41:13.237
crunching for no reason. Tip 6 
is to use Instant 

09:41:18.684 --> 09:41:20.684
Run.

09:41:23.591 --> 09:41:25.591
 Instant Run was launched in 
Android Studio 2.0, and since

09:41:33.875 --> 09:41:37.001
 then we have improved it  . We 
have been focused on fixing 

09:41:37.002 --> 09:41:37.521
stability issues. The Instant 
Run in 3.0 is massively 

09:41:37.522 --> 09:41:38.219
different from what was shipped 
in 2.0. We have removed a lot of

09:41:38.220 --> 09:41:40.220
 hacks to work around the 
platform, and w

09:41:42.177 --> 09:41:43.026
e believe itâ€™s much more 
reliable.Instant run will now 

09:41:43.027 --> 09:41:47.799
only work on level 21 or above. 
 That doesn't mean that you 

09:41:47.800 --> 09:41:51.514
can't have your version set to 
lower.  It just means the device

09:41:51.515 --> 09:41:57.313
 your running instant app on has
 to be 21 or above.

09:41:57.314 --> 09:42:00.109
    We have also tweaked the 
original Instant Run UI. The 

09:42:00.110 --> 09:42:02.110
Instant Run button is now split 
into into a Run and Apply 

09:42:03.732 --> 09:42:09.019
Changes button.When you hit the 
run button, we will try to do a 

09:42:09.109 --> 09:42:11.575
cold swap and the app -- excuse 
me -- will always restart.  When

09:42:11.576 --> 09:42:16.490
 you click the apply changes, we
 will try to do a hot or warm 

09:42:16.491 --> 09:42:21.726
swap first.  That would push 
changes directly into the live 

09:42:24.583 --> 09:42:27.232
process.  One thing to note, 
when you use instant run, it 

09:42:27.233 --> 09:42:31.442
makes your lives a little bit 
easy ier because we 

09:42:32.485 --> 09:42:36.231
automatically look at the target
 device, at its API level and 

09:42:36.502 --> 09:42:40.850
the set of resources it needs 
and automatically builds minimal

09:42:40.952 --> 09:42:42.699
 things that the target device 
requires.

09:42:42.700 --> 09:42:47.509
   Even if we didn't define a 
separate product flavor, you 

09:42:47.510 --> 09:42:54.211
would automatically get some of 
the optimizations.  These are 

09:42:54.212 --> 09:42:58.040
numbers I got after.  Notice, we
 actually regressed by 7 seconds

09:42:58.041 --> 09:43:05.225
 for the full build.  The reason
 for that is that in order for 

09:43:05.324 --> 09:43:10.819
instant run to work we have to 
do extra work and to do byte 

09:43:10.820 --> 09:43:15.229
code manipulation to prepare 
your app for future hot, warm, 

09:43:15.230 --> 09:43:18.508
and cold swaps.  That's where 
the 7 seconds came from.  We're 

09:43:18.509 --> 09:43:21.683
working to drive that number 
down.

09:43:25.547 --> 09:43:31.580
  We shaved off three seconds 
for the incremental changes.

09:43:31.581 --> 09:43:34.950
   Hopefully you would recoop 
the initial build show down 

09:43:34.951 --> 09:43:42.837
after the incremental changes.
   Now tip seven is a fun one.  

09:43:42.838 --> 09:43:46.410
It's that you should avoid 
inadvertent changes to your 

09:43:46.411 --> 09:43:54.757
project.  The code shown here is
 an example of such.  At first 

09:43:54.850 --> 09:43:56.938
glance it seems reasonable

09:44:01.749 --> 09:44:02.403
. It is just trying to use the 
build datetime as the 

09:44:02.404 --> 09:44:06.408
versionCode to uniquely identify
 the build.You want to have a 

09:44:06.409 --> 09:44:14.160
unique ID so when you find a bug
 it can tell what build it was. 

09:44:14.232 --> 09:44:15.098
But the reason why this is not a
 good idea is because this will 

09:44:15.099 --> 09:44:16.118
force the AndroidManifest to 
change every time, causing your 

09:44:16.119 --> 09:44:20.306
build to do more work than 
necessary.Even the ones you're 

09:44:20.386 --> 09:44:22.741
not distributing to anybody.

09:44:27.687 --> 09:44:29.272
    Santa Tracker didnâ€™t have 
this problem, but I simulated 

09:44:29.273 --> 09:44:31.273
this 

09:44:32.457 --> 09:44:41.324
mistake.I simulated this by 
forcing a manifest change every 

09:44:41.325 --> 09:44:48.239
time     time.  If I       Here 
you can see the impact of 

09:44:48.240 --> 09:44:48.397
changing your manifest. For an 
incremental Java change, you are

09:44:48.398 --> 09:44:49.869
 paying a penalty of three 
seconds. And for an incremental 

09:44:49.870 --> 09:44:52.149
resource change, you are paying 
a penalty of 3.6 seconds.That's 

09:44:52.150 --> 09:45:01.044
huge and that's time spent for 
no good reason.  In this 

09:45:01.045 --> 09:45:03.753
previous example, you can easy 
ily fix this by putting the 

09:45:03.754 --> 09:45:08.404
unique version code based on the
 property, the de   dex build 

09:45:08.405 --> 09:45:11.282
property we were using early 
ier.  In this case, if that 

09:45:11.283 --> 09:45:16.388
property is defined, we set it 
to a static value.  If not, we 

09:45:16.389 --> 09:45:24.560
will generate a unique value.  
Now, having bad code in your 

09:45:24.561 --> 09:45:27.659
build script is not the only way
 to get into trouble.  I know a 

09:45:27.660 --> 09:45:34.616
lot of you use crashlytics and 
it's a great product so it must 

09:45:34.617 --> 09:45:36.962
be safe, right?
   Well, that depends.

09:45:36.963 --> 09:45:44.381
   Turns out Crashlytics by 
default will always build a 

09:45:44.382 --> 09:45:48.997
unique I  ID on every build but 
they provide a flag for you to 

09:45:48.998 --> 09:45:53.699
turn this off so you need to be 
careful.  You should set this 

09:45:54.447 --> 09:46:00.748
flag.  Always up date ID to 
false.  They also supply a 

09:46:04.785 --> 09:46:11.734
flag to disable Crashly ytics 
altogether.

09:46:18.666 --> 09:46:22.799
 Tip eight is to not use dynamic
 versions. Gradle gives you a 

09:46:18.666 --> 09:46:19.021
way to easily use the latest 
version of the dependency 

09:46:19.022 --> 09:46:21.022
through the â€˜+â€™ sign. This is 
bad for several 

09:46:23.741 --> 09:46:23.827
reasons: 1. From a performance 
perspective, this will cause 

09:46:23.828 --> 09:46:25.828
Gradle

09:46:27.404 --> 09:46:28.275
 to check for newer versions of 
those dependencies from all the 

09:46:28.276 --> 09:46:33.130
repos that you are using.It will
 check the library every 24 

09:46:33.131 --> 09:46:36.509
hours causing your resolution 
dependency to increase.

09:46:36.645 --> 09:46:40.437
   Even if you're okay with that
 hit, it's still bad because it 

09:46:40.438 --> 09:46:45.559
makes your build 
nondeterministic.  You do a 

09:46:45.560 --> 09:46:49.794
build today compared to two 
weeks from now, you might be 

09:46:49.795 --> 09:46:54.305
building completely different 
things because the library has 

09:46:54.306 --> 09:47:00.212
changed underneath of you.  So 
please avoid doing 

09:47:03.221 --> 09:47:05.221
this. Tip nine is to watch the 
amount of memory you give to

09:47:08.068 --> 09:47:10.158
 the Gradle. By default, Android
 Studio sets the max heap size 

09:47:10.159 --> 09:47:12.825
to 1.5 GB. This may or may not 
be a good setting for your

09:47:16.687 --> 09:47:22.808
 project.We don't really know 
because it really depends on the

09:47:22.809 --> 09:47:26.346
 characteristics of your project
.  So you should tweak this 

09:47:26.347 --> 09:47:30.831
setting to see what's optimal.
   Another thing I want to call 

09:47:30.832 --> 09:47:36.352
ought       ought       out is 
we have dex options where we 

09:47:36.353 --> 09:47:41.669
allow you to set the size for 
this dex process.  This made a 

09:47:41.670 --> 09:47:49.714
lot of sense when dex was out of
 process but since the plug in 

09:47:49.715 --> 09:47:53.174
2.1 -- you should not release 
that anymore.  So if you have it

09:47:53.371 --> 09:47:56.776
, you can just delete it.

09:48:05.158 --> 09:48:06.637
 Tip 10: Gradle has recently 
introduced a new caching 

09:48:06.638 --> 09:48:13.200
mechanism that caches task 
outputs.You might have heard Xav

09:48:14.339 --> 09:48:20.115
ier talk about this this 
morning. This is going to be 

09:48:20.116 --> 09:48:20.643
useful when you switch branches 
locally, and it enables 

09:48:20.644 --> 09:48:22.235
distributed caching. Note that 
this is different from the build

09:48:22.236 --> 09:48:24.236
 cache that we introduced in 2.3

09:48:25.918 --> 09:48:27.918
 which just caches pre-dex 
libraries.That

09:48:29.020 --> 09:48:33.353
 only cache ed pre-dexed 
external library ies.  This 

09:48:33.354 --> 09:48:39.917
cache using       uses the same 
mechanism but not just for the 

09:48:39.918 --> 09:48:43.989
last build but for any build 
from the previous location.  It 

09:48:43.990 --> 09:48:48.568
will speed up builds from 
previous branches and enable 

09:48:48.569 --> 09:48:51.153
caches.
   We haven't fully taken 

09:48:51.154 --> 09:48:55.900
advantage of it yet in Canary 
one but we're actively working 

09:48:57.884 --> 09:49:03.239
on this in dot O.  It's so 

09:49:07.562 --> 09:49:10.238
new.  So you should see 
progressively improved 

09:49:10.239 --> 09:49:12.735
performance. these are the 
numbers that I got after turning

09:49:13.137 --> 09:49:17.301
 on the build cache, even though
 we haven't fully taken 

09:49:17.302 --> 09:49:22.402
advantage of it yet.  So you can
 see the full build actually 

09:49:22.403 --> 09:49:28.831
dropped down by seven seconds 
and it negated the regression 

09:49:28.832 --> 09:49:31.471
that was introduced by instant 
run.

09:49:34.749 --> 09:49:36.749
  The increment    mental build 
actually got                  

09:49:36.760 --> 09:49:39.698
              increment run got 
slightly slower.  That's 

09:49:39.699 --> 09:49:43.133
something we're looking into.
   Here are the cumulative 

09:49:43.134 --> 09:49:47.061
improvements after applying all 
these tips.  The full build is 

09:49:47.171 --> 09:49:53.846
three times faster.  The 
incremental Java brimmed is 

09:49:54.333 --> 09:49:59.247
three times faster and the 
resource change is also three 

09:49:59.248 --> 09:50:02.551
times faster.
   [

09:50:05.604 --> 09:50:07.604
Applause]
   JAMES LAU:  Thank you.

09:50:07.791 --> 09:50:13.122
   Now here sa sum me           
is a summary of all the tips.  

09:50:13.123 --> 09:50:20.896
I've also created a G  GitHub 
repo if you wanted to experiment

09:50:21.013 --> 09:50:25.700
 with some of these tips 
yourself.  And that's it for me.

09:50:26.682 --> 09:50:30.203
   JEROME DOCHEZ:  That's it for
 me                           

09:50:30.288 --> 09:50:34.890
        hank you, James.
   [Applause]

09:50:35.061 --> 09:50:36.935
   JEROME DOCHEZ:  Now, I would 
like to talk more about some 

09:50:36.936 --> 09:50:40.925
more radical changes you can do 
with your build to liberate some

09:50:41.130 --> 09:50:44.862
 of the new features that comes 
with plugin

09:50:51.842 --> 09:50:53.842
 Letâ€™s

09:50:57.052 --> 09:50:59.160
 talk about Multi-Module project
 first.3.5 we used to have a lot

09:50:59.161 --> 09:51:03.148
 of issues with it so it was 
discouraged because there was a 

09:51:03.149 --> 09:51:05.149
lot of issues

09:51:07.035 --> 09:51:08.980
 around scale ability with 
things getting slower and lower.

09:51:08.981 --> 09:51:13.643
  We worked really hard with 
Gradle to fix this     this.  

09:51:13.644 --> 09:51:22.226
Now we totally recommend you to 
go to the multimodule project.

09:51:24.957 --> 09:51:29.788
  Any projects created from 
templates, it's an easy project 

09:51:29.933 --> 09:51:34.992
to start with.  It has one.  
It's ready to be multimodule.

09:51:35.228 --> 09:51:40.313
   We just need to include a few
 more subfolders in your main 

09:51:40.314 --> 09:51:44.457
Gradle.  Then you can start 
moving code from, say, the app 

09:51:44.458 --> 09:51:51.094
into the lib 1 or lib 2.  It 
sounds easy.  Multimode al is 

09:51:51.095 --> 09:51:54.384
not easy.  I can guarantee.  
It's going to be painful if you 

09:51:54.385 --> 09:51:58.467
want to do this.  Not painful, 
but it's going to be hard.  And 

09:51:58.468 --> 09:52:02.276
it's not something you should do
 over the weekend.  It's going 

09:52:02.277 --> 09:52:07.869
to take some time.  However, 
we're going to see it has a lot 

09:52:08.115 --> 09:52:12.234
of improvements in it.
   We have three examples here.

09:52:24.086 --> 09:52:26.657
  --
   Maybe like removing a public 

09:52:26.658 --> 09:52:31.951
message.  Of course, we need to 
recompile whoever is using that 

09:52:32.304 --> 09:52:36.236
particular lib 2 to make sure 
you're not using that method but

09:52:36.237 --> 09:52:41.077
 it will trigger the recom      
 recompile          

09:52:41.078 --> 09:52:44.232
recompilation of app.  That 
means that app which depends on 

09:52:45.708 --> 09:52:50.596
lib 1 -- also depends on lib 2 
just because lib 1 itself was 

09:52:50.597 --> 09:52:52.414
impart       imparting          
 impart       imparting lib 2.

09:52:52.415 --> 09:52:54.619
   That's some of the things 
that's going to change in

09:52:59.052 --> 09:53:00.706
 3.0.
   The first thing Gradle is 

09:53:00.707 --> 09:53:08.256
gives us for free is compilation
 avoidance.  What they do is 

09:53:08.257 --> 09:53:13.471
they came up with the notion of 
an A  ABI.  An ABI is the 

09:53:13.472 --> 09:53:17.505
application binary interface.  
It means your public methods and

09:53:17.506 --> 09:53:21.095
 fields, anything that can be 
invoked outside.  So you can 

09:53:21.096 --> 09:53:26.872
have an ABI change or a non-ABI 
change depending on whether or 

09:53:26.873 --> 09:53:29.553
not your changing a public API. 
 Okay?

09:53:29.554 --> 09:53:35.249
   Now, an ABI change has no 
impact on consumers.  If you're 

09:53:35.250 --> 09:53:39.110
changing the method, which is 
private, or even if it's public,

09:53:39.253 --> 09:53:43.973
 if it's just implementation of 
a method, none of the consumers 

09:53:43.974 --> 09:53:47.938
are going to be impacted by the 
change.  However, obviously, if 

09:53:47.939 --> 09:53:51.376
you're removing a public method 
or changing a public method 

09:53:51.377 --> 09:53:56.936
significant, this is an ABI 
change.  This will trigger 

09:53:57.035 --> 09:54:01.296
consumers to be recompiled.
   Very simple.  I have a non-AB

09:54:01.425 --> 09:54:04.437
I change.  Something which is 
private to lib 2 is being 

09:54:04.438 --> 09:54:12.721
changed.  Nothing is recompiled.
   Now, I have an ABI change.  

09:54:12.722 --> 09:54:18.629
We're coming back to the 
original case.  I'm changing 

09:54:18.630 --> 09:54:24.728
something which is in lib 2.  
Lib 1 has to be recompiled.  An 

09:54:24.729 --> 09:54:26.729
app is importing it

09:54:29.929 --> 09:54:32.016
 also has to be recompiled    
       recompiled.  That's 

09:54:32.017 --> 09:54:37.469
really very annoying.  From this
 diagram, it seems pretty 

09:54:37.638 --> 09:54:41.043
obvious that app is not using 
lib 2.  But the fact is that 

09:54:41.044 --> 09:54:45.317
because through this compiled 
configuration, Gradle does not 

09:54:45.318 --> 09:54:54.941
know if app is using the ability
 to use the two interface.  The 

09:54:55.046 --> 09:54:58.483
implementation of detail of lib 
1, which is the lib 2, to the 

09:54:58.484 --> 09:55:03.317
consumers of itself.  That means
 that now app can see lib 1 and 

09:55:03.318 --> 09:55:09.580
lib 2.  It's really something 
that needed to be changed.

09:55:09.581 --> 09:55:13.899
   Let's look at how that really
 falls into when you have a big 

09:55:15.157 --> 09:55:20.953
hair ball of modules.  Here we 
have 8 modules.  That's pretty 

09:55:20.954 --> 09:55:25.444
simple.  You have 50 modules and
 you're making a non-ABI change.

09:55:25.704 --> 09:55:29.297
  So that has to be recompiled. 
 That's pretty obviously.  

09:55:29.298 --> 09:55:31.854
Right?
   Now, let's switch to the ABI 

09:55:31.855 --> 09:55:37.884
code change.  Let's say now 
we're changing a public ABI of 

09:55:37.885 --> 09:55:41.591
that really -- module.  Of 
course       course, we'll 

09:55:41.592 --> 09:55:48.681
recompile it and to all the 
users but because they're transe

09:55:49.398 --> 09:55:54.496
ntly depend on each over, you 
have to recompile.  If you have 

09:55:54.497 --> 09:55:59.428
250 modules, you have to 
recompile 250 modules.  If you 

09:55:59.429 --> 09:56:02.644
have a common type of library, 
this will happen quite a bit.

09:56:02.645 --> 09:56:09.428
   Basically, compiling is all 

09:56:13.110 --> 09:56:15.110
wrong.

09:56:17.939 --> 09:56:19.328
 So basically, compile scope is 
wrong. It does not disambiguate 

09:56:19.329 --> 09:56:19.955
between just consuming a module 
as an implementation detail 

09:56:19.956 --> 09:56:24.049
versus consuming it and 
re-exporting its APIs.You should

09:56:24.050 --> 09:56:30.627
 only be using a API of my 
library but I'm offering its API

09:56:30.628 --> 09:56:34.073
 as a part of mine.  If you're 
using

09:56:37.152 --> 09:56:45.347
 Guava, it didn't mean you     
you want your users to use Guava

09:56:45.587 --> 09:56:51.057
 through you.  That's really 
nasty if you want to save time.

09:56:55.899 --> 09:57:02.781
  You used in the past to 
provide Guava as a -- therefore,

09:57:02.929 --> 09:57:08.670
 you can break your clients.  
People using Guava through your 

09:57:09.094 --> 09:57:14.966
module and that's it.  So really
, this co    co dependency was 

09:57:14.967 --> 09:57:17.036
all wrong.

09:57:22.355 --> 09:57:23.173
 When you use a dependency as an
 implementation details of your 

09:57:23.174 --> 09:57:24.137
module, and do not want to offer
 that dependency as part of your

09:57:24.138 --> 09:57:26.138
 API, declare

09:57:28.481 --> 09:57:29.095
 it with the â€œimplementationâ€  
configuration. Gradle came up 

09:57:29.096 --> 09:57:33.491
with a new way of declaring 
dependency.  It's replaced by 

09:57:33.492 --> 09:57:38.811
two new configurations.  Either 
API or implement          

09:57:38.812 --> 09:57:40.414
implementation.
   Here I'm replacing what I 

09:57:40.415 --> 09:57:46.227
used to declare X and Y as one 
implementation detail, that 

09:57:46.228 --> 09:57:52.005
means that I'm consuming led X 
as an implementation detail but 

09:57:52.006 --> 09:57:55.917
none of my users will have 
access to its implementation, to

09:57:56.164 --> 09:58:00.854
 its API.
   However, I'm also using lib Y

09:58:00.992 --> 09:58:02.992
 and offering its API as part

09:58:06.290 --> 09:58:08.290
 of my API.  I'm composing over 
that particular one.  So there's

09:58:08.515 --> 09:58:16.063
 a strict distinction between 
the two.  Now API is basically 

09:58:16.359 --> 09:58:20.326
the equivalent of the old 
compiling.  It's an easy way to 

09:58:20.327 --> 09:58:25.482
go.  It would just work but we 
totally not recommend doing this

09:58:25.483 --> 09:58:30.736
 but you'll leak all your 
dependency ies, ask      and 

09:58:31.059 --> 09:58:34.833
that's a bad idea. is to use 
implementation.  Then you clear

09:58:35.408 --> 09:58:39.477
ly say I have an implementation 
of my library and I'm using this

09:58:39.714 --> 09:58:43.737
 module and I'm not going to 
leak it to my users.  Seems 

09:58:43.862 --> 09:58:45.350
pretty easy.
   In fact, you should probably 

09:58:45.351 --> 09:58:50.232
do a search and replace of all 
your compile, replace it with 

09:58:50.233 --> 09:58:53.681
complementation.  Your build 
might break because some users 

09:58:53.682 --> 09:58:56.369
of your library somewhere was 
using actually a dependency you 

09:58:56.370 --> 09:58:59.414
were leaking.  The only thing 
you would have to do is they 

09:58:59.415 --> 09:59:03.620
would have to also declare their
 dependency on which ever module

09:59:04.179 --> 09:59:08.564
 they were actually using.
   So it's a little bit of work 

09:59:08.565 --> 09:59:16.563
but it shouldn't be too bad.
   If you do a non-ABI change, 

09:59:16.564 --> 09:59:18.757
nothing happens.  No change 
here.

09:59:18.758 --> 09:59:25.410
   But if we switch to the      
  to the ABI change, this is 

09:59:25.411 --> 09:59:30.252
what we used to have.  Now it's 
not compiled any longer.  Only 

09:59:30.650 --> 09:59:33.588
lib 1 would be recompiled 
because lib 2 is not visible to 

09:59:33.589 --> 09:59:37.554
app.
   This may seem to be a small 

09:59:37.555 --> 09:59:41.236
detail, but when you come back 
to the example given early ier 

09:59:41.237 --> 09:59:45.576
where you have this ABI could 
change the leaf module.  

09:59:45.577 --> 09:59:48.389
Remember?  I was compiling 
obviously the module that 

09:59:48.390 --> 09:59:52.950
changes.  You're still going to 
compile all the modules that are

09:59:53.182 --> 09:59:57.544
 impacted directly but it will 
stop right there.  It won't 

09:59:57.545 --> 10:00:00.618
recompile anything else.
   Here, I'm sitting at about 

10:00:00.619 --> 10:00:07.168
50% of recompilation.  Not too 
bad    bad.  But if you have 50 

10:00:07.169 --> 10:00:09.860
or 100 or whatever number it is,
 this can be substantial saving.

10:00:11.871 --> 10:00:17.813
  Okay?  It adds up.  You have 
compilation avoidance because 

10:00:18.046 --> 10:00:22.177
this API configuration, you're 
going to get much faster builds.

10:00:22.294 --> 10:00:27.127
   I want to talk about one last
 final note.  When you have 

10:00:27.128 --> 10:00:33.649
multiple modules, Gradle -- 
we've had issues with one task 

10:00:34.752 --> 10:00:39.172
has to work before another task 
and you wait for it.  When you 

10:00:39.391 --> 10:00:44.309
do things in parallel, you don't
 have these issues anymore.  

10:00:44.310 --> 10:00:49.977
This is great to use it when you
 have multiple modules.  Having 

10:00:50.132 --> 10:00:53.399
multiple modules is a great work
 around for some

10:00:58.426 --> 10:01:03.392
 incremental tasks.
   Java C is in theory 

10:01:03.393 --> 10:01:07.222
incremental.  As soon as you 
start using annotation processer

10:01:07.713 --> 10:01:12.302
s, though, we have to turn off 
the increment          

10:01:12.385 --> 10:01:15.781
incrementalty.  Some of    of 
the annotation processers want 

10:01:15.906 --> 10:01:21.646
to see the world.  You have to 
recompile everything so that the

10:01:21.744 --> 10:01:23.744
 annotation processers 

10:01:26.432 --> 10:01:28.834
can be fed and react properly

10:01:33.713 --> 10:01:40.462
.  --
   In  As difficult and it's 

10:01:40.463 --> 10:01:44.325
limited and you will never get 
as much parallelism as if you 

10:01:44.326 --> 10:01:51.764
are using multimodule projects.
   Now, let's say you've been 

10:01:52.112 --> 10:01:56.113
very good.  You followed all of 
James tips.  You tried to 

10:01:56.114 --> 10:02:00.074
understand what's wrong.  It is 
still slow.  What is the next 

10:02:00.075 --> 10:02:04.168
step for you to understand?  
What can you do to figure out 

10:02:04.169 --> 10:02:06.169
why

10:02:07.255 --> 10:02:16.190
 is it    my build slow?
   Realize slow builds are not 

10:02:16.191 --> 10:02:19.862
normal.  Let me be very clear.  
A full build that takes ten 

10:02:19.863 --> 10:02:24.797
minutes is not normal.  An      
An      An incremental

10:02:28.140 --> 10:02:32.352
 build that takes almost as much
 time as a full build is even 

10:02:32.353 --> 10:02:37.364
less normal.  If it seems to 
rerun a bunch of tasks but you 

10:02:37.365 --> 10:02:40.501
don't know why, this is clearly 
not normal.

10:02:40.502 --> 10:02:43.334
   There are scenarios like this
 that you should be looking into

10:02:43.432 --> 10:02:48.170
 and figures out do I have to go
 through this?  Maybe there is 

10:02:48.454 --> 10:02:52.024
something that could make things
 better for me.  Nobody likes to

10:02:52.275 --> 10:02:56.292
 pay taxes.  So understanding 
the build is like paying taxes 

10:02:56.293 --> 10:02:59.437
on taxes.  I understand that.  
But you must understand on some 

10:02:59.438 --> 10:03:03.083
level that you need to spend 
some time into it, to invest 

10:03:03.084 --> 10:03:08.756
into understanding where is my 
build being spend?  Which task 

10:03:08.757 --> 10:03:11.731
is taking time?  So that you can
 eventually have a chance to 

10:03:11.732 --> 10:03:16.248
improve it.
   But like we talked early ier,

10:03:16.705 --> 10:03:20.868
 third-party plugins you have to
 be very careful about which 

10:03:20.869 --> 10:03:25.628
ones you're using.  Some of them
 are well written; some not so 

10:03:25.629 --> 10:03:29.108
well.
   It's particularly true, for 

10:03:29.109 --> 10:03:32.716
instance, which coming from the 
eclipse a few years back where 

10:03:32.717 --> 10:03:35.784
all the source files were in the
 source directory.  They were 

10:03:35.785 --> 10:03:40.732
all in the same folder.  If you 
changed one, it would trigger 

10:03:40.733 --> 10:03:43.527
all the tasks to 

10:03:47.487 --> 10:03:50.469
rerun.  Some people like to 
customize their build system and

10:03:50.863 --> 10:03:52.540
 sometimes it goes really, 
really wild.

10:03:52.541 --> 10:03:56.894
   But you need to understand 
and spend some time in the build

10:03:57.494 --> 10:04:00.771
 system.  I know this is not 
something you like to do.  But 

10:04:00.772 --> 10:04:03.985
as your project is growing, you 
must spend some time.

10:04:03.986 --> 10:04:09.670
   Now, tools to help you so 
that you spend a minimum amount 

10:04:09.779 --> 10:04:11.739
of time.
   But before we get into that 

10:04:11.740 --> 10:04:16.733
slide, one of the things we see 
repeatedly over and over again 

10:04:16.734 --> 10:04:20.606
with people who complain about 
their slow build is the "do last

10:04:21.403 --> 10:04:27.401
." That's bad.  Gradle can not 
understand if your task is 

10:04:27.503 --> 10:04:30.736
incremental or not.  Do last is 
bad because most of the time 

10:04:30.737 --> 10:04:34.020
your checks will fail because 
you're probably writing 

10:04:34.021 --> 10:04:37.514
something somewhere in the upper
 directory of the task or your 

10:04:37.515 --> 10:04:42.342
changing something after the 
task is run.  So it will rerun 

10:04:42.343 --> 10:04:45.485
your task every time.  Avoid 
these types of things       

10:04:45.486 --> 10:04:46.905
things.
   One way you can do that is by

10:04:46.906 --> 10:04:51.473
 writing your own plugin.  I 
know it sounds scary, but 

10:04:51.474 --> 10:04:55.495
believe me, it's not that bad.  
You can write your own plugin 

10:04:55.496 --> 10:04:59.319
and put it in the build source 
directory that would make it 

10:04:59.320 --> 10:05:03.503
available to all your modules 
automatically.  Remember to 

10:05:03.504 --> 10:05:10.136
profile it.  Instead of using 
"do last" try to write a custom 

10:05:10.137 --> 10:05:14.080
task with property inputs and 
outputs so that Gradle can cache

10:05:14.081 --> 10:05:18.601
 it and understand what would 
make the task up to date or not.

10:05:20.213 --> 10:05:23.913
   Now, you still don't get it. 
 I mean, you know, it's still 

10:05:23.914 --> 10:05:27.122
slow.  You've been spending time
 on this.  It's still slow.  

10:05:27.123 --> 10:05:31.308
What can you do? .
   Next thing to do is run with 

10:05:31.309 --> 10:05:34.435
a dry run.  This will tell you 
how much time you're spending in

10:05:34.666 --> 10:05:38.092
 the configuration.  This should
 be a couple of seconds.  Ten 

10:05:38.571 --> 10:05:42.751
seconds at best, at maximum, if 
you really have a huge project. 

10:05:43.182 --> 10:05:45.717
 If you start spending way too 
much time there, there's 

10:05:45.718 --> 10:05:48.803
something wrong.  Some plugin 
somewhere is doing something 

10:05:48.804 --> 10:05:51.207
wrong and we need to understand 
what it is.

10:05:51.413 --> 10:05:56.537
   Then you should do a dash 
dash in full.  Dash dash in full

10:05:56.835 --> 10:06:00.154
 is very useful.  It will tell 
you what tasks are running and 

10:06:00.155 --> 10:06:05.200
why.  Again, you change none of 
the source code.  You rerun a 

10:06:05.201 --> 10:06:09.769
build.  Some tasks are running 
and you don't know why.  The 

10:06:09.770 --> 10:06:13.635
dash dash info will tell you 
exactly why this process 

10:06:13.636 --> 10:06:15.826
manifest task is running.  
That's because the manifest task

10:06:16.092 --> 10:06:23.051
 changed.  Then you have to -- 
obviously, you didn't change it 

10:06:23.052 --> 10:06:28.337
yourself, but at least it gives 
you a hyst      hint.

10:06:28.456 --> 10:06:32.420
   Next one is the profile.  A 
slightly more comp      

10:06:32.421 --> 10:06:35.040
complicated tool that will give 
you the ability to look at your 

10:06:35.041 --> 10:06:39.153
tasks and see how much time you 
spent on each of them.  Maybe 

10:06:39.487 --> 10:06:43.889
one task is dominating.  Most of
 time we've seen this.  One task

10:06:44.205 --> 10:06:48.789
 takes 90% of the time of your 
build.  Find out what it is and 

10:06:48.790 --> 10:06:50.661
what it's doing before you 
report.

10:06:50.662 --> 10:06:56.219
   And then, for hard core, 
there's a tool provided by 

10:06:56.220 --> 10:07:00.712
Gradle.  It's great.  It gives 
you the ability to profile and 

10:07:00.794 --> 10:07:02.999
to benchmark.  The profile is 
the most interesting one.  You 

10:07:03.000 --> 10:07:06.990
can actually generate a profile 
er information right from there 

10:07:06.991 --> 10:07:13.875
which you can use to file bug 
against us.  So if you think 

10:07:13.876 --> 10:07:18.409
you've done all your homework 
and your build is still slow and

10:07:18.410 --> 10:07:22.450
 you don't get it, run the 
profile er.  File a bug against 

10:07:22.451 --> 10:07:26.064
us.  Then we'll start looking 
into why is your build slow?  

10:07:26.065 --> 10:07:31.403
Much better than just going onto
 the web and saying my build is 

10:07:31.404 --> 10:07:34.724
slow; I don't know why    why.  
Not giving us any information.

10:07:34.945 --> 10:07:39.184
   This is stuff we can act upon
.  With this, we can look into 

10:07:39.185 --> 10:07:44.542
why your build is slow.
   Some resources, this is what 

10:07:44.543 --> 10:07:50.304
we have today.  Look at the 
migration guide.  Optimize your 

10:07:50.305 --> 10:07:54.919
build speed.  Look into the 
Gradle.  It's always like you 

10:07:54.920 --> 10:07:58.788
know when you receive new 
things, or a new car, you should

10:07:58.789 --> 10:08:02.252
 look into the new things in 
there.  There's a bunch of new 

10:08:02.253 --> 10:08:07.698
utilities that you can use.
   Thank you very much.

10:08:07.699 --> 10:08:12.419
   [Applause]
   (End of presentation)

10:09:16.511 --> 10:09:18.511
   (Applause)          

10:09:46.897 --> 10:09:48.897
RAW

10:09:53.945 --> 10:09:55.945
 FILE

10:09:58.909 --> 10:10:07.121
   GOOGLE I/O2017.
   SAN JOSE, CALIFORNIA.

10:10:07.122 --> 10:10:09.149
   MAY 18, 2017.

10:10:19.042 --> 10:10:23.516
 8:30 P.M. CENTRAL TIME.
   STAGE #2

10:10:27.375 --> 10:10:33.467
    #2    #2.
   SESSION:

10:10:38.478 --> 10:10:41.673
 ANDROID FIRESIDE CHAT

10:10:46.552 --> 10:10:49.471
.
   SESSION

10:10:54.076 --> 10:10:58.328
 #: T0FF1E

10:11:24.193 --> 10:11:24.368
.
   Services provided by:

10:11:24.369 --> 10:11:24.662
        Caption First, Inc.
        P.O. Box 3066

10:11:24.663 --> 10:11:24.994
        Monument, CO  80132
        800-825-5234

10:11:24.995 --> 10:11:25.681
        +001-719-481-9835
        www.captionfirst.com

10:11:25.682 --> 10:11:25.848
   This text is being provided 
in a realtime format.  

10:11:25.849 --> 10:11:26.132
Communication
   Access Realtime Translation 

10:11:26.133 --> 10:11:26.620
(CART) or captioning are 
provided in to facilitate 

10:11:26.621 --> 10:11:29.554
communication accessibility and 
may not be a

10:11:26.621 --> 10:11:26.732
   totally verbatim record of 
proceedings.

10:11:26.733 --> 10:11:28.733
   * * *

10:20:14.255 --> 10:20:17.747
   BLUSH TEST       

10:28:27.637 --> 10:28:31.803
to the Android fireside chat, 
another edition of this thing.  

10:28:31.804 --> 10:28:34.723
You will notice there are a lot 
of people on stage up here.  

10:28:34.724 --> 10:28:39.234
This is probably the most they 
have for any session ever at I/O

10:28:39.343 --> 10:28:43.658
.  In fact, there's so many 
we're in danger of violate ing 

10:28:43.659 --> 10:28:47.787
the fire code.  We may need to 
ask the audience to leave.

10:28:47.926 --> 10:28:50.593
   [Laughter]
   We're going to do an 

10:28:50.594 --> 10:28:57.113
introduction of who these people
 are and what they do.  I'm 

10:28:57.114 --> 10:29:01.520
approximate em see.  Brian, go.

10:29:06.461 --> 10:29:09.598
   BRIAN CARLSTROM:  Introducing
 self.

10:29:09.755 --> 10:29:12.128
   WALE OGUNWALE:  (Introducing 
self)

10:29:18.231 --> 10:29:21.108
.
   (indiscernible).

10:29:21.109 --> 10:29:23.109
   RACHEL GARB:  Rachel Gar

10:29:25.595 --> 10:29:27.595
, user 

10:29:29.831 --> 10:29:31.831
experience.

10:29:34.718 --> 10:29:36.718
   XIAOWEN XIN:  , could Xin 

10:29:43.317 --> 10:29:49.426
Xiaowen Xin, Android security.  
--

10:29:49.979 --> 10:29:55.601
   SPEAKER:  I'm a guest here.  
I'm from Japan.  I'm a V     a 

10:29:55.602 --> 10:29:57.602
CEO from Japan

10:30:01.156 --> 10:30:03.602
.
   (Applause)

10:30:03.795 --> 10:30:05.795
   ADAM POWELL:  Adam

10:30:07.920 --> 10:30:11.130
 Powell, framework.
   SPEAKER:  Everybody got that?

10:30:11.131 --> 10:30:13.868
  Excellent.  We have a few 
things to cover.  A lot of 

10:30:13.869 --> 10:30:17.687
content before we get into the 
meat of it.  So, no, actually, 

10:30:17.688 --> 10:30:20.978
let's just get into it.
   So here the the way it works.

10:30:21.057 --> 10:30:23.786
  I'll ask a couple so you 
understand what this is.  You're

10:30:23.787 --> 10:30:26.298
 going to ask questions and 
we're going to -- we may have 

10:30:26.299 --> 10:30:30.092
the answers.  We don't know.  It
 depends what you ask.  The 

10:30:30.093 --> 10:30:33.607
ground rule is we don't really 
talk about -- no.  We don't talk

10:30:33.608 --> 10:30:36.671
 about futures.  If you say, 
"Yeah, what is Google going to 

10:30:36.892 --> 10:30:40.700
do a year from now on this thing
?" Pen they would say, thank you

10:30:40.823 --> 10:30:43.802
 for the question; would 
somebody else like to ask one?  

10:30:43.803 --> 10:30:46.971
Just so you know, when we say 
that, there's a reason.  I will 

10:30:46.972 --> 10:30:51.120
show you how this works for a 
couple of things.  We trolled 

10:30:51.235 --> 10:30:55.498
Twitter and G+ to get some 
questions, sort of pre-roll some

10:30:55.499 --> 10:30:58.859
 topics to find out what the 
community would like to know 

10:30:58.860 --> 10:31:02.949
about, people who aren't 
necessarily here.  I will 

10:31:02.950 --> 10:31:05.106
summarize the several comments 
in Twitter that essentially came

10:31:05.432 --> 10:31:12.299
 down to," What about adopting C
olin as a language for Android 

10:31:12.390 --> 10:31:15.148
       Android?" 
   SPEAKER:  Check.

10:31:19.010 --> 10:31:21.423
   SPEAKER:  Done.
   (Applause)

10:31:26.321 --> 10:31:28.746
   SPEAKER:  All right.  Here is
 another one that came up.  A 

10:31:28.747 --> 10:31:30.954
few different comments phrased 
in different ways but 

10:31:31.197 --> 10:31:35.551
essentially boils down to a two-
part question.  How does fuchsia

10:31:36.367 --> 10:31:42.537
 relate to Android.  Dave?
   DAVE BURKE:  Uh, how do you

10:31:45.789 --> 10:31:50.761
 spell fuchsia?  We actually 
have lots of cool early projects

10:31:50.762 --> 10:31:53.759
 at Google.  I think what's 
interesting is it's open to 

10:31:53.760 --> 10:32:01.536
people can see it and comment on
 it.  It's probably going to 

10:32:01.653 --> 10:32:04.860
pivot and morph.  There are 
people who worked on it who are 

10:32:04.861 --> 10:32:09.557
great.  It's just kind of 
exciting to see what happens.  

10:32:09.558 --> 10:32:12.105
It's definitely an independent 
project to Android        

10:32:12.106 --> 10:32:14.374
Android.  Yeah.  That's 
basically it.

10:32:14.512 --> 10:32:15.988
   SPEAKER:  Thank you.  So 
we're going to ask another 

10:32:15.989 --> 10:32:22.848
question here, but we could -- 
multiprocesses thing, people 

10:32:22.849 --> 10:32:29.797
should be lining up at the mics.
  If nobody wants to ask, that's

10:32:29.923 --> 10:32:33.316
 fine.  The session will end 
very early.

10:32:33.317 --> 10:32:39.404
   Second two-part question for 
micro,       Mike, how does Flut

10:32:39.632 --> 10:32:43.969
ter relate to Android?
   SPEAKER:  Let's see.  What do

10:32:43.970 --> 10:32:49.065
 you all think is the best 
framework for Android?  Is it 

10:32:49.066 --> 10:32:50.628
Android?
   SPEAKER:  Usually.

10:32:50.629 --> 10:32:54.478
   SPEAKER:  Yeah.  We kind of 
like our own stuff.  Android has

10:32:54.479 --> 10:32:59.932
 always been pretty open.  
That's our core principle.  The 

10:33:00.346 --> 10:33:04.477
better answer is use whatever 
works for you.  We try to make 

10:33:04.478 --> 10:33:08.425
stuff that works for you.  We 
hope you like it.  If you find 

10:33:08.426 --> 10:33:13.393
something you like better, then 
that gives us something to shoot

10:33:14.389 --> 10:33:17.716
 for.
   SPEAKER:  All right.  We have

10:33:17.848 --> 10:33:23.677
 people at the mics now.  Over 
on the left there.

10:33:23.849 --> 10:33:26.877
   AUDIENCE:  My question is -- 
(away 

10:33:31.199 --> 10:33:34.650
from microphone) (indiscernible)
.Laughter]

10:33:34.796 --> 10:33:38.535
   SPEAKER:  Great question.  I 
think one of the things we made 

10:33:38.536 --> 10:33:44.766
clear in the keynote and we try 
to say very clearly is we're 

10:33:44.767 --> 10:33:50.264
embracing Colin.  Someone can 
hug max there, if you want.  

10:33:50.493 --> 10:33:55.287
We're embracing Colin but we're 
doubling down simultaneously on 

10:33:55.549 --> 10:33:59.866
your existing languages and 
we're very open about that.  The

10:33:59.867 --> 10:34:04.523
 keynote with the investments 
with Java 8 language features.  

10:34:04.524 --> 10:34:09.799
We also made extensive 
improvements in APIs.  Again, 

10:34:10.485 --> 10:34:17.762
the Java .9 API is my favorite. 
 We made extensive improvements 

10:34:17.763 --> 10:34:24.465
in C++.  You'll see investment 
in Colin and in your existing 

10:34:25.295 --> 10:34:29.421
programs.  Dave has increased 
the teams in all of those areas.

10:34:29.659 --> 10:34:36.127
  It's not an either/or for us. 
 It's truly an "and." Java is a 

10:34:36.128 --> 10:34:40.724
wonderful language.  I told 
people when I studied at Brown 

10:34:40.725 --> 10:34:44.572
it's the first language I 
learned.  It's wonderful.  For 

10:34:44.573 --> 10:34:50.826
those who have tried            
want to try Cotland, it is a 

10:34:50.827 --> 10:34:53.656
beautiful language.  A lot of us
 have tried it and think it's 

10:34:53.657 --> 10:34:57.339
quite wonderful.
   SPEAKER:  So if I could 

10:34:57.340 --> 10:35:00.500
rephrase that, either one should
 work     work?  Is that -- did 

10:35:00.501 --> 10:35:04.680
I catch the essence of that?
   SPEAKER:  You could try 

10:35:04.681 --> 10:35:12.579
either one.  Yeah.    I'm sorry.
  You want to find more words 

10:35:13.149 --> 10:35:15.228
for that?
   SPEAKER:  It's a good thing 

10:35:15.229 --> 10:35:19.398
they cut me off at the keynote, 
huh?

10:35:19.548 --> 10:35:21.941
   SPEAKER:  I think we got it. 
 Thank you.  Let's go over there

10:35:25.592 --> 10:35:27.592
 there.

10:35:29.478 --> 10:35:31.478
 inaudible

10:35:33.983 --> 10:35:35.990
 question) what are alternatives
 to people who want those 

10:35:35.991 --> 10:35:39.811
features and capabilities but 
want to maintain

10:35:43.845 --> 10:35:48.349
...(indiscernible).
   SPEAKER:  You could turn it 

10:35:48.350 --> 10:35:53.108
on on your friends' devices.
   [Laughter]

10:35:53.109 --> 10:35:58.627
   Otherwise -- to be perfectly 
honest we're not on those teams.

10:35:59.290 --> 10:36:04.370
  That's why we're looking at 
each over.  We do think privacy 

10:36:04.371 --> 10:36:06.798
is something you should have.  
You're asking for those teams to

10:36:07.573 --> 10:36:12.165
 support those services they're 
producing and then not require 

10:36:12.166 --> 10:36:19.299
location and other things.  Part
 of what makes those features 

10:36:19.300 --> 10:36:21.767
good are those services.  You 
should ask them.  But we're 

10:36:21.768 --> 10:36:26.048
ensuring you always have the 
choice.  It might not always be 

10:36:26.049 --> 10:36:29.212
the fine-grain choices within 
that you always want but you 

10:36:29.213 --> 10:36:31.257
should have the visibility to 
know what's on and have the 

10:36:31.258 --> 10:36:35.873
control in the IOS to turn it on
 or off.

10:36:35.874 --> 10:36:39.959
   SPEAKER:  Thanks.  You, sir.
   AUDIENCE:  I have a question 

10:36:42.001 --> 10:36:44.001
for you.

10:37:10.948 --> 10:37:17.329
  -- (asking inaudible question 
away from                

10:37:20.453 --> 10:37:22.947
    question).
   SPEAKER:  So I actually did 

10:37:22.948 --> 10:37:27.190
have project travel as part of 
my keynote but we didn't have 

10:37:27.191 --> 10:37:32.604
enough time, number one.  Number
 two is it's a very device 

10:37:33.149 --> 10:37:35.495
manufacturer focused project.  
So we thought we might bore you 

10:37:35.611 --> 10:37:39.436
a little bit.  But since you've 
asked, I can bore you now.  

10:37:39.437 --> 10:37:43.735
Bring up the teleprompter.  No, 
I'm joking.

10:37:43.736 --> 10:37:46.722
   So project travel, if you ask
 a lot of people around here who

10:37:46.999 --> 10:37:49.997
 worked on it they'll tell you 
it was a huge amount of work and

10:37:50.689 --> 10:37:56.833
 they're still angry at me.  
Rachad is nodding his head.  

10:37:56.834 --> 10:38:01.443
He's so pissed off because the 
amount of work that went into it

10:38:01.545 --> 10:38:09.197
 was huge     huge.  We created 
a vendor interface.  It's an   

10:38:12.464 --> 10:38:17.332
 an         
   We've introduced a new vendor

10:38:17.333 --> 10:38:21.048
 interface at the bottom.  It's 
silicon and hardware specific.

10:38:21.305 --> 10:38:27.939
   Then we have VTS tests that 
test vendor interface.  The idea

10:38:27.940 --> 10:38:32.667
 is when the P release comes 
along, if you're a device make 

10:38:32.899 --> 10:38:35.915
er you take P and it will run on
 top of today's O device that 

10:38:35.916 --> 10:38:38.538
you build      build, say.
   The whole reason for that is 

10:38:38.539 --> 10:38:42.806
we want to make it easy ier and 
faster for device make ers to 

10:38:42.807 --> 10:38:46.972
update devices.  Because if it's
 faster, they'll get updates out

10:38:47.380 --> 10:38:52.259
 more quickly.  If it costs less
 they'll do more updates.  It's 

10:38:52.260 --> 10:38:55.630
a huge huge change.  That's the 
whole premise of it.

10:38:56.016 --> 10:39:00.396
   I can talk about it more but 
one of the things -- it's kind 

10:39:00.397 --> 10:39:03.088
of analogous to C

10:39:06.832 --> 10:39:12.952
otland.  Treble, you ask, we 
deliver.  Not really.

10:39:13.139 --> 10:39:16.778
   For Treble it was actually 
the

10:39:20.122 --> 10:39:23.937
     the silicon vendors and so 
forth we were asking how to 

10:39:23.938 --> 10:39:29.661
reduce the cost.  Silicon     
      Every time we change the 

10:39:29.662 --> 10:39:33.393
operating system they have to 
rework the code.  They asked how

10:39:33.487 --> 10:39:37.945
 to make it better and we came 
up with TrebleP but it's a huge 

10:39:37.946 --> 10:39:39.946
huge change.  Probably the 
biggest

10:39:44.557 --> 10:39:48.624
 rearchitect of Android ever.  
Thank you to all my colleagues 

10:39:48.625 --> 10:39:51.219
who hate me.
   SPEAKER:  I want to make sure

10:39:51.220 --> 10:39:54.662
 you understand there's a lot of
 engineers who aren't here today

10:39:55.713 --> 10:40:00.897
 at I/O.  They've been working 
incredible  ly hard.  They had 

10:40:00.898 --> 10:40:03.852
to work through millions of 
lines of code they've never seen

10:40:04.387 --> 10:40:08.955
 before.  One guy on my team I 
think almost lost it works on 

10:40:08.956 --> 10:40:12.606
this.  It's a huge amount of 
work.  It's going to make 

10:40:12.859 --> 10:40:17.117
Android better in the future.
Applause)

10:40:21.924 --> 10:40:26.032
   SPEAKER:  If we tried to 
bring anymore engineers up on 

10:40:26.351 --> 10:40:28.209
stage the produce ers would have
 kill led us.

10:40:28.210 --> 10:40:32.788
   There was a follow-up 
question about Treble on 

10:40:32.938 --> 10:40:36.888
Twitter.  So I was going to ask 
that one which was the docks say

10:40:37.682 --> 10:40:42.083
 the -- on existing devices.  
Okay.  That wasn't a complete 

10:40:42.084 --> 10:40:44.104
sentence.  But this is Twitter.
   (Applause)

10:40:44.105 --> 10:40:48.239
   The question is will devices 
that get updated to O also get T

10:40:48.544 --> 10:40:51.237
  Treble?
   SPEAKER:  Right.  One of the 

10:40:51.448 --> 10:40:56.593
challenges of doing this huge 
rearchitecture is if we did it 

10:40:56.594 --> 10:40:59.617
blindly we'd slow down adoption 
to O because we had a lot of 

10:40:59.618 --> 10:41:03.177
work to do.  We didn't want to 
slow down the short-term to 

10:41:03.178 --> 10:41:07.893
speed up the long term.  If you 
have an existing device on N and

10:41:08.137 --> 10:41:12.762
 you want to update to O, the Tr
eble requirements aren't applied

10:41:13.303 --> 10:41:15.986
 to you.  If you're a new device
 make     maker building a new 

10:41:15.987 --> 10:41:20.156
device, then you have to comply 
to the O architecture.  That's 

10:41:20.157 --> 10:41:27.665
sort of how it works.  What we 
did to prove it all out was to 

10:41:27.947 --> 10:41:34.554
treat the N16 pixel as a new 
divide              a new device

10:41:34.555 --> 10:41:41.771
 for O.  This is           We 
basically rebuilt the system on 

10:41:41.772 --> 10:41:45.928
pixel.  We did that because we 
wanted to prove it end to end so

10:41:46.218 --> 10:41:53.793
 that new devices on O will be 
able to sale and lead true.  

10:41:53.882 --> 10:41:59.702
                      to sail 
and lead true.

10:41:59.901 --> 10:42:01.903
   AUDIENCE:  My question is 
when you use your Android phone,

10:42:02.020 --> 10:42:08.096
 what do you really hate?  And 
why haven't you fixed it yet?

10:42:09.538 --> 10:42:12.819
   [Laughter]
   (Applause)

10:42:12.955 --> 10:42:17.347
   SPEAKER:  I have one.  I 
really hate the colors.  But I'm

10:42:17.418 --> 10:42:21.217
 fixing this in O.
   [Laughter]

10:42:21.218 --> 10:42:24.804
   (Applause)
   speaker and I really hate 

10:42:24.805 --> 10:42:29.499
notifications.  Some that come 
from nameless applications, from

10:42:29.748 --> 10:42:34.216
 my own company.  That gentleman
 over there along with members 

10:42:34.217 --> 10:42:37.660
of his company are fixes that 
this time with notifications 

10:42:37.661 --> 10:42:45.401
channels. hate the locking 
tension and systems serve      

10:42:45.402 --> 10:42:49.306
server.  We'll fix that for the 
next race.

10:42:49.451 --> 10:42:53.399
   [Laughter]
   Seriously, I obsess about 

10:42:53.400 --> 10:42:57.141
lock in tension and system serve
 er.  It bugs me.

10:42:57.142 --> 10:42:59.306
   SPEAKER:  Anything else have 
a confession?

10:42:59.438 --> 10:43:04.153
   SPEAKER:  I'll go with one.  
This group should know it.  

10:43:04.154 --> 10:43:08.186
Battery life.  The reason we 
don't break it is all of you.  

10:43:08.187 --> 10:43:14.625
We have to manage keeping you 
alive but keeping better battery

10:43:14.626 --> 10:43:16.617
 life at the same time.
   SPEAKER:  That will do for 

10:43:16.618 --> 10:43:19.000
    for a sample.  How about 
over here?

10:43:23.144 --> 10:43:25.144
   AUDIENCE:  (Speaking

10:43:34.187 --> 10:43:38.985
        asking inaudible 
question).

10:43:38.986 --> 10:43:42.192
   SPEAKER:  That really depends
 on -- I don't regret the stuff 

10:43:42.193 --> 10:43:45.212
we did.  You can always make 
improvements.  If you're looking

10:43:45.576 --> 10:43:48.190
 for things I would change, 
probably the big things is stuff

10:43:48.393 --> 10:43:51.300
 that we did that allowed 
applications to do too much.  

10:43:51.301 --> 10:43:55.945
Like a big one for me is the 
settings provide er access to 

10:43:55.946 --> 10:43:59.852
allow changes to system 
settings.  I wish we had never 

10:43:59.853 --> 10:44:05.204
done that.  Just make sure we 
had clear API controlled ways 

10:44:05.205 --> 10:44:07.205
for them to

10:44:09.921 --> 10:44:10.489
 do things.  Now we've started 
to do things to get them back 

10:44:10.490 --> 10:44:17.914
under control.  Those are things
 I wish we'd done better at.

10:44:22.619 --> 10:44:25.493
   AUDIENCE:  My question lass 
to do with the                

10:44:25.575 --> 10:44:33.799
     has to do with the blocking
 of -- (  (asking inaudible 

10:44:33.800 --> 10:44:40.746
question).  So why won't you let
 users buy those          

10:44:44.845 --> 10:44:50.142
 (indiscernible) those apps?
   SPEAKER:  The maps thing 

10:44:50.143 --> 10:44:52.864
isn't about users.  It's about 
developers.  There's a lot of 

10:44:52.865 --> 10:44:57.084
things we don't let developers 
do because it's better nor     

10:44:57.085 --> 10:45:04.350
for the overall device behavior.
  Speaking of things we regret 

10:45:04.351 --> 10:45:08.939
doing, I think if I could do it 
again, having things so easy 

10:45:08.940 --> 10:45:11.047
that you could launch 
applications like that was clear

10:45:11.246 --> 10:45:15.806
ly a big mistake we made.  We 
didn't realize at a time once 

10:45:15.807 --> 10:45:18.489
it's there and you have 100 
applications on your phone all 

10:45:18.490 --> 10:45:24.230
listening to this broadcast, the
 kind of hell that's going to 

10:45:24.482 --> 10:45:27.120
break loose on the device when 
that happens.  I really think 

10:45:27.121 --> 10:45:31.598
that's something we need to 
really put brakes on and get 

10:45:31.599 --> 10:45:35.486
back control over the device and
 switch to more things like job 

10:45:35.487 --> 10:45:37.661
scheduling.
   SPEAKER:  If I could add to 

10:45:37.662 --> 10:45:39.662
that

10:45:41.079 --> 10:45:43.432
 on the use er choice.  I hope 
we announced we have 2 billion 

10:45:43.433 --> 10:45:47.982
use ers.  If not I just 
announced that.  That's a reason

10:45:48.438 --> 10:45:52.868
able fraction of the world's 
population.  We think about 

10:45:53.625 --> 10:45:55.586
literally everyone when 
designing it.  It's hard to put 

10:45:55.587 --> 10:45:58.947
that in front of users and 
expect them to make scale able 

10:46:00.229 --> 10:46:02.229
decisions.  Especially when 

10:46:04.230 --> 10:46:09.140
applications say, "Hey, please 
turn this on.  It will make it 

10:46:09.350 --> 10:46:13.218
better." It's not that the 
applications are doing anything 

10:46:13.219 --> 10:46:19.440
wrong, usually.  But if you say 
yes to the first and then you 

10:46:19.441 --> 10:46:23.189
feel like you have to say yes to
 the next 30, then it makes the 

10:46:23.991 --> 10:46:27.765
device unusable.  We have to 
balance out with making devices 

10:46:27.766 --> 10:46:33.589
that literally anyone can 
administer and manage and still 

10:46:33.590 --> 10:46:36.486
have a good experience.
   SPEAKER:  I can add to that. 

10:46:36.575 --> 10:46:41.162
 You can say -- if you really 
want to, you can do a foreground

10:46:41.163 --> 10:46:43.999
 service and the user knows that
 you're running all the time 

10:46:44.399 --> 10:46:47.427
now.  I think part of this is 
actually having the choice being

10:46:47.765 --> 10:46:51.965
 clear to the user.  It's like 
it's clear to the user that, oh,

10:46:51.966 --> 10:46:54.489
 this application is running all
 the time, because I really care

10:46:54.575 --> 10:46:58.957
 about it.  So it's okay with me
.  I'll let it do that.  Versus 

10:46:58.958 --> 10:47:02.768
subtlety ies about, well, I have
 this choice to allow it to run 

10:47:02.769 --> 10:47:05.720
sometimes in the background but 
I don't really know what that 

10:47:05.721 --> 10:47:08.961
does and I don't realize that 
when I do this a lot with a lot 

10:47:08.962 --> 10:47:12.383
of applications that actually 
there's a lot of stuff going on 

10:47:12.384 --> 10:47:14.524
in the background that I'm not 
aware of.

10:47:14.525 --> 10:47:19.310
   So we learned, like, with 
     with the foreground service

10:47:19.397 --> 10:47:25.032
 is having the UI and having 
those clear lock things, if you 

10:47:25.033 --> 10:47:31.393
decide to do this, there's a lot
 ofimplications, that the user 

10:47:31.394 --> 10:47:34.913
understanding that's all 
together.  They can make those 

10:47:34.914 --> 10:47:37.606
choices.
   But having subtle choices 

10:47:37.607 --> 10:47:41.007
between this and that and they 
don't know what it means, really

10:47:41.219 --> 10:47:45.651
 doesn't leave the user with 
much choice, because they don't 

10:47:45.652 --> 10:47:49.109
understand.
   SPEAKER:  Finally, another 

10:47:49.110 --> 10:47:53.547
principal that's coming to the 
forefront with recent versions 

10:47:53.548 --> 10:47:58.393
of Android, we want to make sure
 that the user's choice, they 

10:47:58.394 --> 10:48:04.028
can actually see the affects of 
that and they can audit that 

10:48:04.029 --> 10:48:09.326
behavior as they use the device.
  The foreground service 

10:48:09.327 --> 10:48:10.998
notification really provides 
that visibility when an app is 

10:48:10.999 --> 10:48:14.880
running in the background.
   SPEAKER:  We'll take one from

10:48:14.881 --> 10:48:18.956
 online from Rachel, I believe. 
 Is material design done?  Or do

10:48:18.957 --> 10:48:21.812
 you see it growing and evolving
?

10:48:21.989 --> 10:48:27.693
   RACHEL GARB:  The work is 
never done with design and I 

10:48:27.694 --> 10:48:31.600
think that you probably have a 
lot of other things, other 

10:48:31.601 --> 10:48:35.368
patterns, that you would like to
 see and have supported for your

10:48:35.477 --> 10:48:38.694
 apps.  So the material team, 
they're growing, and they're 

10:48:38.695 --> 10:48:42.231
investing heavy      heavily in 
this space.  This was an off-

10:48:42.617 --> 10:48:46.468
shoot of Android.  The material 
team started out very small in 

10:48:46.469 --> 10:48:49.819
Android and then it grew so big 
that it is a completely 

10:48:49.820 --> 10:48:55.219
different department.  So yeah, 
I don't think they're sitting 

10:48:55.302 --> 10:48:57.956
around twiddling their thumbs.  
They're definitely doing a lot 

10:48:57.957 --> 10:48:59.957
to develop the language

10:49:04.184 --> 10:49:06.250
.
   SPEAKER:  Designers design.

10:49:04.184 --> 10:49:06.450
   SPEAKER:  And in particular 
they just launched a bunch of 

10:49:06.451 --> 10:49:10.691
code.  They now have the 
capacity to bring on more 

10:49:10.692 --> 10:49:16.089
prototypers and software 
engineers.  They have a bunch of

10:49:16.090 --> 10:49:18.413
 new components s available for 
lots of different platforms to 

10:49:18.668 --> 10:49:22.691
make its easy ier to integrate 
the stuff that's involved in 

10:49:22.900 --> 10:49:25.719
material in the last number 
years.  So you can look at their

10:49:25.929 --> 10:49:30.381
 work and see that material and 
design is alive and well and 

10:49:30.382 --> 10:49:36.192
continuing to evolve.
   SPEAKER:  To see that you go 

10:49:36.193 --> 10:49:42.363
to Material.IO.  Let's         
Lots of good stuff and materials

10:49:42.364 --> 10:49:45.626
 and tools there.
   SPEAKER:  Thanks.  How about 

10:49:45.627 --> 10:49:47.627
there (indicating).

10:49:51.990 --> 10:49:54.182
   AUDIENCE:  (Asking inaudible 
question)

10:50:00.826 --> 10:50:02.186
.
   SPEAKER:  You mean to write 

10:50:02.187 --> 10:50:06.024
build files?
   AUDIENCE:  Yeah, the build 

10:50:06.025 --> 10:50:10.064
files.
   SPEAKER:  As soon as it's 

10:50:10.065 --> 10:50:16.059
finished on the Webb            
 on    on the website.

10:50:16.060 --> 10:50:19.347
   SPEAKER:  Thanks.  Here 
(indicating).

10:50:19.348 --> 10:50:21.348
   AUDIENCE:  Between       

10:50:26.009 --> 10:50:28.457
(Asking inaudible question)

10:50:39.728 --> 10:50:40.235
.
   SPEAKER:  No.  I don't think 

10:50:40.236 --> 10:50:42.236
so.

10:50:45.368 --> 10:50:52.909
  Max?
   SPEAKER:  There's about 600 

10:50:52.910 --> 10:50:57.498
kilobytes.  That's the only 
thing      thing.

10:50:57.701 --> 10:50:59.701
   SPEAKER:  Thanks.

10:51:03.077 --> 10:51:05.337
   AUDIENCE:  (Asking inaudible 
question)

10:51:19.660 --> 10:51:24.760
.age fight.
   SPEAKER:  So Sistrays gets 

10:51:24.761 --> 10:51:34.321
all the data from the Le inxy

10:51:41.094 --> 10:51:43.920
kernel.  -- will actually sample
 the runtime of your application

10:51:44.320 --> 10:51:47.795
 and tell you, hey, you're 
spending 50 milliseconds in this

10:51:47.796 --> 10:51:51.079
 function and 4 milliseconds in 
this function and things like 

10:51:51.080 --> 10:51:56.074
that.  That means the CPO 
profile er has higher overhead 

10:51:56.189 --> 10:51:59.402
which means it can curb the 
results of performance testing, 

10:51:59.568 --> 10:52:02.419
but it gives you greater 
visibility into your application

10:52:02.686 --> 10:52:05.922
.
   So my general recommendation 

10:52:05.923 --> 10:52:12.146
would be use Sistrays to get a 
general idea of how your 

10:52:12.147 --> 10:52:16.776
application runs because you'll 
probably spot a lot of problems 

10:52:17.007 --> 10:52:21.563
there.  You can use CPU profile 
er to get a closer look inside 

10:52:21.564 --> 10:52:26.646
your application.
   SPEAKER:  Great.  Thanks.  

10:52:26.647 --> 10:52:28.647
Tor, did that cover it?

10:52:32.346 --> 10:52:33.523
   TOR NORBYE:  That sounds 
good.  I mean the CPU profile er

10:52:33.524 --> 10:52:38.258
 has a lower head mode until you
 start recording actual sampling

10:52:38.371 --> 10:52:42.753
.  You can use it initially as 
well but it obviously does more 

10:52:42.754 --> 10:52:46.180
whole system praising.
   SPEAKER:  Okay.  Thanks.

10:52:46.181 --> 10:52:49.297
   AUDIENCE:  Hello.  I believe 
we have not heard much about 

10:52:49.298 --> 10:52:53.713
data volume this week.  I wonder
 if that's a technology we 

10:52:53.714 --> 10:53:03.225
should continue to adopt.
   SPEAKER:  Yes, actually.  We 

10:53:03.226 --> 10:53:06.964
(indiscernible) so we're still 
working on that.  Tools         

10:53:06.965 --> 10:53:15.478
Tool       .  Crews are still 
working on that, right, Tor?

10:53:15.638 --> 10:53:17.638
   TOR NORBYE:  Yes.

10:53:20.921 --> 10:53:21.816
  Data binding is one of our 
responsibilities.

10:53:21.817 --> 10:53:24.597
   SPEAKER:  Thank you.
   AUDIENCE:  Hi.  I started 

10:53:24.598 --> 10:53:30.164
writing Cotland last week and I 
thought it felt oddly familiar. 

10:53:30.752 --> 10:53:34.445
 I spent the last year doing 
code reviews of our IOS develop

10:53:35.015 --> 10:53:38.412
er in swift.  I was wondering if
 you could comment on the 

10:53:38.413 --> 10:53:43.562
relationship between Cotland and
 Swift.

10:53:43.563 --> 10:53:45.724
   [Laughter]
   SPEAKER:  We have independent

10:53:46.158 --> 10:53:48.344
.
   [Laughter]

10:53:48.500 --> 10:53:50.500
   (Applause)

10:53:52.119 --> 10:53:55.721
   SPEAKER:  There are a lot of 
resentment because we're aiming 

10:53:56.046 --> 10:54:00.640
for the same task, to make it 
productive developers.

10:54:00.641 --> 10:54:05.269
   AUDIENCE:  Yeah.  I meant 
conceptually, thank you.

10:54:05.416 --> 10:54:09.972
   SPEAKER:  Max is quite modest
.  He was one of the key folks 

10:54:09.973 --> 10:54:17.236
who contributed the language.  
Another language designer is 

10:54:17.237 --> 10:54:21.535
probably also here now.  I talk 
too much, don't I?  One fact 

10:54:21.536 --> 10:54:25.837
Dave and I were talking about is
 Cotland does predate swift.  

10:54:25.966 --> 10:54:32.032
The first announcement of Cot
land was in 2011 and the first 

10:54:32.033 --> 10:54:36.577
release was 2012.  The language 
has evolved since then.  It's 

10:54:36.779 --> 10:54:39.649
just an interesting fact.  Good 
to know.

10:54:39.964 --> 10:54:43.062
   (Light laughter).
   SPEAKER:  Thanks.

10:54:46.327 --> 10:54:49.793
   AUDIENCE:  Hello.  I 
personally think being open 

10:54:46.327 --> 10:54:49.253
source is one of the most 
important powers of Android and 

10:54:49.254 --> 10:54:54.525
one of the most important 
announcements for me this week 

10:54:54.606 --> 10:54:59.634
was that -- being open source ed
 and unfortunately Android is 

10:54:59.635 --> 10:55:03.823
not currently but will follow.  
So the question is about Google 

10:55:03.824 --> 10:55:11.557
Play services.  Is there a plan?
  Because the Play services are 

10:55:11.558 --> 10:55:17.149
so integrated.  Fire base can be
 open source now, but why not 

10:55:17.150 --> 10:55:19.150
Play services?

10:55:21.732 --> 10:55:25.297
   SPEAKER:  So the thing about 
Play services is there's lots of

10:55:25.443 --> 10:55:28.903
 stuff in there.  Some of it is 
developer focused and some of it

10:55:29.139 --> 10:55:34.339
 is just really extension of 
applications, like Google's own 

10:55:34.340 --> 10:55:37.785
applications.  So sort of Google
 policy, their applications is 

10:55:37.786 --> 10:55:41.471
they're just not open source ed.
  The challenge is there's no 

10:55:41.472 --> 10:55:48.623
easy way to GMS quarters to say,
 hey, this sa    is a developer 

10:55:48.624 --> 10:55:51.909
component and this is an 
extension of an app component.  

10:55:51.910 --> 10:55:57.188
Also, we don't know anyone from 
the Play services team here.  So

10:55:57.189 --> 10:55:58.923
 I can punt the question.
   SPEAKER:  We punt the 

10:55:58.924 --> 10:56:01.328
questions to you.  If you're 
going to punt the questions, I 

10:56:01.329 --> 10:56:09.339
don't know what to do with it.
   SPEAKER:  Uh, I'll go into an

10:56:09.340 --> 10:56:15.058
 infinite loop.
   SPEAKER:  Moving on?

10:56:15.310 --> 10:56:18.165
   SPEAKER:  Moving on.
   SPEAKER:  Let me go into a 

10:56:18.166 --> 10:56:23.065
theoretical thing.  What's the 
one piece of advice you would 

10:56:23.066 --> 10:56:27.677
want developers to never, ever 
follow when making Android apps?

10:56:28.124 --> 10:56:34.851
  Anybody?
   SPEAKER:  Force garbage 

10:56:34.852 --> 10:56:39.264
collection.  I don't know.
   SPEAKER:  (indiscernible).

10:56:39.448 --> 10:56:41.463
   [Laughter]
   SPEAKER:  You need an 

10:56:41.464 --> 10:56:46.011
application context for 
everything.

10:56:46.168 --> 10:56:50.119
   SPEAKER:  Moving on.  You 
(indicating).

10:56:50.297 --> 10:56:57.233
   AUDIENCE:  Hey.  We saw the 
introduction of I/O of a great 

10:56:57.320 --> 10:57:02.437
of profile ing tools, for 
network and CPUP one thing 

10:57:02.552 --> 10:57:05.701
that's still missing is a good 
battery profiling           

10:57:05.702 --> 10:57:12.217
profile er for    .  Some are 
extremely difficult and 

10:57:12.218 --> 10:57:15.248
interpret the results from.  I 
was wondering if that was 

10:57:15.249 --> 10:57:20.993
something we might be able to 
look forward to?

10:57:21.116 --> 10:57:23.051
   SPEAKER:  It's a very good 
question.  One of the things we 

10:57:23.052 --> 10:57:26.711
talked about is the battery 
profiling has to be based on CPU

10:57:26.889 --> 10:57:30.345
 and network.  We want to look 
at those two things as really 

10:57:30.622 --> 10:57:35.111
important inputs.  We felt it 
was important to do CPU and 

10:57:35.112 --> 10:57:39.168
network first into our profile 
ers.  We don't talk about 

10:57:39.247 --> 10:57:41.512
futures but we get a lot of 
questions about battery 

10:57:41.513 --> 10:57:45.344
profiling.  So you can read that
 however you want.

10:57:45.500 --> 10:57:47.757
   [Laughter]
   SPEAKER:  That's code for 

10:57:47.758 --> 10:57:54.306
staff and team are working on 
it.

10:57:54.457 --> 10:58:00.985
   SPEAKER:  Rachad, do you know
 about that?

10:58:01.164 --> 10:58:05.783
   SPEAKER:  We're going to 
start showing -- it's going to 

10:58:05.784 --> 10:58:10.785
include everything from crashes 
to memory uses to -- is that all

10:58:10.786 --> 10:58:12.786
 right, battery?

10:58:15.827 --> 10:58:18.299
   SPEAKER:  We put out there 
locks that are a big battery 

10:58:18.372 --> 10:58:20.372
strain on the number 

10:58:22.637 --> 10:58:27.559
and yanky frames.  You'll get 
information about those issues 

10:58:27.560 --> 10:58:33.237
and fix them.  The really short 
yank event and the really severe

10:58:33.238 --> 10:58:37.243
 horrible yank effects who we 
named after our vice president 

10:58:38.248 --> 10:58:42.796
behind us.  We called it a Davey
.  I'm glad we got to talk about

10:58:42.910 --> 10:58:46.445
 it.  So thank you for that 
question.

10:58:46.583 --> 10:58:53.011
   SPEAKER:  You're focus.  
      famous.

10:58:53.012 --> 10:58:56.490
   AUDIENCE:  Hi.  I have a 
question about Treble and how 

10:58:56.491 --> 10:59:04.096
it's going to be easy ier to 
update to new versions.  But 

10:59:04.097 --> 10:59:08.377
open sourcing hardware drive ers
 is most exciting for it.  Are 

10:59:08.378 --> 10:59:11.630
you going to be working more to 
start new projects with existing

10:59:12.379 --> 10:59:18.093
 vendors and get their code open
 course ed or otherwise?

10:59:18.246 --> 10:59:21.200
   SPEAKER:  We may just focus 
on the architecture.  I mean 

10:59:21.201 --> 10:59:27.009
that's really up to the silicon 
vendors and the device make ers.

10:59:27.010 --> 10:59:31.487
  We just wanted to make sure we
 had much nice er architecture. 

10:59:31.659 --> 10:59:36.640
 We had not thought about that 
specific aspect of it.

10:59:36.775 --> 10:59:39.476
   AUDIENCE:  Thank you.
   SPEAKER:  Thanks.

10:59:39.660 --> 10:59:45.189
   AUDIENCE:  Hey, everyone.  
Last year there was a really 

10:59:45.190 --> 10:59:46.778
excellent session on attention 
and notifications and treating 

10:59:46.779 --> 10:59:50.830
people well.  Since we saw that 
manifest this year through 

10:59:50.831 --> 10:59:53.444
notification channels and 
through attention-based 

10:59:53.445 --> 10:59:57.353
notifications, are there any 
other issues like that on the 

10:59:57.354 --> 11:00:02.076
platform that are near and dear 
to your heart that you wish 

11:00:02.077 --> 11:00:06.318
developers spent more time 
thinking about?

11:00:06.319 --> 11:00:09.474
   SPEAKER:  Why applications 
need permissions.  We get that a

11:00:09.545 --> 11:00:16.027
 lot internally about -- not 
just the premise but what the 

11:00:16.028 --> 11:00:19.717
entire application is doing with
 that data.  That's something I 

11:00:19.718 --> 11:00:23.405
would love developers to take
      take a lot of care when 

11:00:23.406 --> 11:00:31.780
asking it in context.  We found 
when it's in context, if the 

11:00:31.781 --> 11:00:35.394
user understands why, and they 
understand the value, you should

11:00:35.395 --> 11:00:40.286
 put a lot of time into that, 
because users appreciate it.

11:00:40.390 --> 11:00:43.659
   SPEAKER:  I would broaden 
that more to settings in general

11:00:46.749 --> 11:00:47.547
.  We know users get pretty 
overwhelmed by the number of 

11:00:47.548 --> 11:00:52.636
settings and being able to find 
what they need when they need it

11:00:52.851 --> 11:00:55.960
.  Apps should really think 
about every single setting that 

11:00:56.242 --> 11:01:01.686
we want      want to introduce 
and is it really necessary?  We 

11:01:01.687 --> 11:01:05.202
think about that, too, on the 
platform level and we have to 

11:01:05.414 --> 11:01:09.986
keep thinking about that.  It 
gets more complicated over time.

11:01:10.993 --> 11:01:15.272
   SPEAKER:  Every new thing and
 setting and feature we add to 

11:01:15.273 --> 11:01:19.132
Android, there's other things we
 didn't add.  It's a huge part 

11:01:19.133 --> 11:01:22.561
of how we design things and how 
we want to encourage apps to do 

11:01:22.562 --> 11:01:27.665
things.  Honestly, every year we
 add new stuff, we probably 

11:01:28.129 --> 11:01:31.534
already just launched the stuff 
the users are going to find 

11:01:31.535 --> 11:01:35.941
terrible and we're going to come
 back and fix next year.  So we 

11:01:35.942 --> 11:01:42.569
keep ourselves in business.
   SPEAKER:  Given our global 

11:01:42.570 --> 11:01:49.854
foot print, a lot of our use ers
 can't afford to upgrade.  So we

11:01:50.665 --> 11:01:55.871
 need to band together and 
improve those low-end devices.

11:01:58.245 --> 11:02:03.741
   SPEAKER:  I'm going to put 
words in Tim's mouth and say I 

11:02:03.742 --> 11:02:07.202
wants everyone to care more 
about performance, as well.  

11:02:07.203 --> 11:02:09.620
Some of the sessions here as 
well as some of the tools we're 

11:02:09.621 --> 11:02:13.214
talking about are coming in 
because we want it to be easy 

11:02:13.373 --> 11:02:15.491
ier for develop        
developers to chase that 

11:02:15.492 --> 11:02:17.277
information and fix it for users
.

11:02:17.278 --> 11:02:20.804
   Am I allowed to provide an 
answer?  Would somebody else 

11:02:20.805 --> 11:02:23.190
like to say that instead?  Is 
that good?

11:02:23.191 --> 11:02:25.962
   Okay.  You (indicating).
   AUDIENCE:  Hi.  I get the 

11:02:25.963 --> 11:02:31.198
sense that you guys really like 
Cot    Cotland a lot.  (Laughing

11:02:31.768 --> 11:02:34.240
).
   I'm wondering if you have any

11:02:34.320 --> 11:02:36.320
 future plans

11:02:39.298 --> 11:02:46.299
 to implement platform framework
 components using Cotland.  If 

11:02:46.300 --> 11:02:52.365
so, would you expose --
   SPEAKER:  Well, as has been 

11:02:52.366 --> 11:02:57.877
said, we're also committed to 
Java.  The bazillion lines of 

11:02:57.878 --> 11:03:03.096
code we already have is Java.  I
 think as much as we love it the

11:03:03.097 --> 11:03:06.250
 reality is we're probably going
 to be continuing to use Java 

11:03:06.251 --> 11:03:10.528
code for the immediate future.  
At the point we're starting

11:03:14.026 --> 11:03:16.026
 to introduce new features in Co

11:03:19.747 --> 11:03:23.628
tland, it will be compatible 
with Java, too.  It will take a 

11:03:23.629 --> 11:03:28.665
while.  First, we'll make sure 
our language, the APIs, the 

11:03:28.666 --> 11:03:35.960
legacy ones we already have and 
the new ones we create and 

11:03:36.044 --> 11:03:39.539
incooperate work perfectly with 
Cotland.  That's going to be a 

11:03:39.907 --> 11:03:43.393
goal for us going forward.
   SPEAKER:  I should clarify 

11:03:43.394 --> 11:03:48.306
that bazillion lines of code is 
just an estimate.  It's actually

11:03:48.530 --> 11:03:50.530
 far more.

11:03:52.669 --> 11:03:55.255
echnically 1.36 bazillion.
   AUDIENCE:  Yesterday, I went 

11:03:55.256 --> 11:04:00.401
to a talk about progressive web 
apps and these guys are really 

11:04:00.402 --> 11:04:09.774
catching up.  Should I use myt
ime        my time using

11:04:10.896 --> 11:04:12.896
 Java script or Co

11:04:17.074 --> 11:04:19.074
tland?
   [Laughter]

11:04:19.172 --> 11:04:23.345
   SPEAKER:  I think the way to 
think about PWA's purposes web 

11:04:23.346 --> 11:04:29.409
apps, if your company is focused
 on building -- it's unrealistic

11:04:29.639 --> 11:04:35.456
 to focus on app development 
entirely.  Everyone on stage is 

11:04:35.457 --> 11:04:39.850
an Android die hard and focused 
on improving the operating 

11:04:39.851 --> 11:04:43.872
system.  If you're really 
focused on building a native app

11:04:43.873 --> 11:04:46.879
 experience and you believe 
that's where it converts better 

11:04:46.880 --> 11:04:51.422
for the users we want to make it
 as easy as possible to get your

11:04:51.883 --> 11:04:57.715
 users onto that platform from a
 development and reachability 

11:04:57.716 --> 11:05:00.552
standpoint.
   AUDIENCE:  What are some 

11:05:00.553 --> 11:05:04.486
great new things you think have 
been overlooked or left out of I

11:05:04.777 --> 11:05:07.939
/O this year for some reason?

11:05:14.147 --> 11:05:16.779
   SPEAKER:  What are things 
that we decided to not talk 

11:05:16.780 --> 11:05:19.769
about that we would talk about 
now?

11:05:19.891 --> 11:05:21.891
   [Laughter]
   AUDIENCE:  Well, I mean --

11:05:22.203 --> 11:05:25.035
   SPEAKER:  The biggest one is 
probably Treble.  That's 

11:05:25.036 --> 11:05:30.066
enormous.  What else?  Did we 
talk about downloadable fonts 

11:05:30.067 --> 11:05:35.615
and emoji?  That's kind of cool.
  Did we talk

11:05:38.807 --> 11:05:40.807
 about

11:05:41.980 --> 11:05:43.786
 garbage collect        
collector?

11:05:43.787 --> 11:05:47.029
   SPEAKER:  Tomorrow.
   SPEAKER:  Will I steal the 

11:05:47.109 --> 11:05:50.487
thunder if I talk about how cool
 and fast it is?  It's super 

11:05:50.488 --> 11:05:54.876
cool.  I'm steal ling Brian's 
thunder so I'll stop now.  Also,

11:05:55.098 --> 11:06:02.735
 dex, code layout, did we talk 
about that?  Steal ling thunder?

11:06:02.736 --> 11:06:06.508
  So I'm steal ling thunder.  
You should go to the talk 

11:06:06.509 --> 11:06:09.887
tomorrow.  It's cool ler stuff.
   SPEAKER:  I have a hard time 

11:06:09.888 --> 11:06:12.865
believing you guys fit 
everything into all your 

11:06:12.866 --> 11:06:16.857
presentations.
   [Laughter]

11:06:17.000 --> 11:06:19.379
   SPEAKER:  Yes (indicating).
   AUDIENCE:  So our app is 

11:06:19.380 --> 11:06:22.843
localized in about 50 languages 
and we also have a lot of 

11:06:22.844 --> 11:06:26.549
resources that are localized as 
well.  Is there any thought 

11:06:26.550 --> 11:06:28.550
around being 

11:06:31.063 --> 11:06:33.063
able to

11:06:34.913 --> 11:06:40.077
 -- for the purposes of the 
smaller app, basically?

11:06:40.078 --> 11:06:42.641
   SPEAKER:  Yeah, Google has 
that problem with their apps and

11:06:43.046 --> 11:06:47.555
 it's something we're aware of. 
 I'm not going to talk about 

11:06:47.781 --> 11:06:51.082
future stuff.  There's a 
platform that's not being used 

11:06:51.083 --> 11:06:55.389
yet.  We are kind of setting up 
to address that problem but 

11:06:55.390 --> 11:06:59.784
nothing right now.
   AUDIENCE:  Thanks.

11:06:59.893 --> 11:07:01.893
   SPEAKER:  I have an answer 
for

11:07:04.054 --> 11:07:05.532
 the previous question.  It's 
something my team did.  I have  

11:07:05.533 --> 11:07:11.029
        I should have thought 
about it.  In O we have the 

11:07:11.030 --> 11:07:16.997
ability to update the graphics 
driver from the Play store.

11:07:16.998 --> 11:07:18.069
   (Applause)
   SPEAKER:  We have time for 

11:07:18.070 --> 11:07:22.943
one more question.
   AUDIENCE:  Oh, okay.  Is 

11:07:22.944 --> 11:07:26.667
volley still the recommended 
network        networking 

11:07:26.668 --> 11:07:28.781
solution?
   SPEAKER:  If (indiscernible) 

11:07:28.782 --> 11:07:32.714
is not here, can we say no?

11:07:37.617 --> 11:07:45.965
  -- that's what we say.
   Also, we think glide is a 

11:07:45.966 --> 11:07:50.294
very nice library.  But these 
are recommendations.  That's it.

11:07:50.683 --> 11:07:52.856
   [Laughter]
   SPEAKER:  Thanks.  We did 

11:07:53.185 --> 11:07:58.431
have one more important question
 online.  It is map crashes with

11:08:00.121 --> 11:08:05.955
 no pointer exception when the 
user rotates the phone while a 

11:08:05.956 --> 11:08:08.783
network exception is happening. 
 Do you have any planning to fix

11:08:09.112 --> 11:08:10.613
?
   SPEAKER:  Yes.

11:08:10.614 --> 11:08:12.413
   [Laughter]
   (Applause)

