WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.640
 
I don't know about you but I like

00:00:01.640 --> 00:00:01.650
I don't know about you but I like
 

00:00:01.650 --> 00:00:03.379
I don't know about you but I like
writing less code particularly

00:00:03.379 --> 00:00:03.389
writing less code particularly
 

00:00:03.389 --> 00:00:07.130
writing less code particularly
boilerplate code alongside API 24 we've

00:00:07.130 --> 00:00:07.140
boilerplate code alongside API 24 we've
 

00:00:07.140 --> 00:00:09.440
boilerplate code alongside API 24 we've
included support for a number of Java 8

00:00:09.440 --> 00:00:09.450
included support for a number of Java 8
 

00:00:09.450 --> 00:00:11.690
included support for a number of Java 8
language features with the help of the

00:00:11.690 --> 00:00:11.700
language features with the help of the
 

00:00:11.700 --> 00:00:14.629
language features with the help of the
Jack tool chain to use any of these new

00:00:14.629 --> 00:00:14.639
Jack tool chain to use any of these new
 

00:00:14.639 --> 00:00:16.430
Jack tool chain to use any of these new
features you'll need to enable the Jack

00:00:16.430 --> 00:00:16.440
features you'll need to enable the Jack
 

00:00:16.440 --> 00:00:18.800
features you'll need to enable the Jack
tool chain all it takes is just a few

00:00:18.800 --> 00:00:18.810
tool chain all it takes is just a few
 

00:00:18.810 --> 00:00:20.599
tool chain all it takes is just a few
lines of code in your build.gradle file

00:00:20.599 --> 00:00:20.609
lines of code in your build.gradle file
 

00:00:20.609 --> 00:00:22.939
lines of code in your build.gradle file
and you're all set now to cut that

00:00:22.939 --> 00:00:22.949
and you're all set now to cut that
 

00:00:22.949 --> 00:00:25.849
and you're all set now to cut that
boilerplate code firstly you'll be able

00:00:25.849 --> 00:00:25.859
boilerplate code firstly you'll be able
 

00:00:25.859 --> 00:00:28.310
boilerplate code firstly you'll be able
to use lambda expressions a simplified

00:00:28.310 --> 00:00:28.320
to use lambda expressions a simplified
 

00:00:28.320 --> 00:00:30.650
to use lambda expressions a simplified
way of expressing functional interfaces

00:00:30.650 --> 00:00:30.660
way of expressing functional interfaces
 

00:00:30.660 --> 00:00:33.100
way of expressing functional interfaces
interfaces with just a single method

00:00:33.100 --> 00:00:33.110
interfaces with just a single method
 

00:00:33.110 --> 00:00:35.840
interfaces with just a single method
this allows us to rewrite our on-click

00:00:35.840 --> 00:00:35.850
this allows us to rewrite our on-click
 

00:00:35.850 --> 00:00:37.910
this allows us to rewrite our on-click
listeners from all this down to

00:00:37.910 --> 00:00:37.920
listeners from all this down to
 

00:00:37.920 --> 00:00:39.760
listeners from all this down to
something a little easier to look at

00:00:39.760 --> 00:00:39.770
something a little easier to look at
 

00:00:39.770 --> 00:00:42.049
something a little easier to look at
you'll note that parameter types are

00:00:42.049 --> 00:00:42.059
you'll note that parameter types are
 

00:00:42.059 --> 00:00:44.540
you'll note that parameter types are
optional here we're using braces to

00:00:44.540 --> 00:00:44.550
optional here we're using braces to
 

00:00:44.550 --> 00:00:45.889
optional here we're using braces to
allow you to have multiple statements

00:00:45.889 --> 00:00:45.899
allow you to have multiple statements
 

00:00:45.899 --> 00:00:48.470
allow you to have multiple statements
just like a normal method but if you

00:00:48.470 --> 00:00:48.480
just like a normal method but if you
 

00:00:48.480 --> 00:00:50.119
just like a normal method but if you
only have a single expression you can

00:00:50.119 --> 00:00:50.129
only have a single expression you can
 

00:00:50.129 --> 00:00:53.360
only have a single expression you can
leave them out a sister feature - lambda

00:00:53.360 --> 00:00:53.370
leave them out a sister feature - lambda
 

00:00:53.370 --> 00:00:55.729
leave them out a sister feature - lambda
expressions method references allow you

00:00:55.729 --> 00:00:55.739
expressions method references allow you
 

00:00:55.739 --> 00:00:58.310
expressions method references allow you
to use existing methods as lambda

00:00:58.310 --> 00:00:58.320
to use existing methods as lambda
 

00:00:58.320 --> 00:01:00.799
to use existing methods as lambda
expressions making those one-line lambda

00:01:00.799 --> 00:01:00.809
expressions making those one-line lambda
 

00:01:00.809 --> 00:01:04.189
expressions making those one-line lambda
expressions even shorter the best part

00:01:04.189 --> 00:01:04.199
expressions even shorter the best part
 

00:01:04.199 --> 00:01:05.630
expressions even shorter the best part
about these features there

00:01:05.630 --> 00:01:05.640
about these features there
 

00:01:05.640 --> 00:01:07.700
about these features there
backward-compatible down to Gingerbread

00:01:07.700 --> 00:01:07.710
backward-compatible down to Gingerbread
 

00:01:07.710 --> 00:01:09.649
backward-compatible down to Gingerbread
so whether you're building for the

00:01:09.649 --> 00:01:09.659
so whether you're building for the
 

00:01:09.659 --> 00:01:11.810
so whether you're building for the
latest version of Android or not you'll

00:01:11.810 --> 00:01:11.820
latest version of Android or not you'll
 

00:01:11.820 --> 00:01:13.280
latest version of Android or not you'll
be able to shave off some boilerplate

00:01:13.280 --> 00:01:13.290
be able to shave off some boilerplate
 

00:01:13.290 --> 00:01:16.580
be able to shave off some boilerplate
code this works because the Jack tool

00:01:16.580 --> 00:01:16.590
code this works because the Jack tool
 

00:01:16.590 --> 00:01:18.200
code this works because the Jack tool
chain is able to implement these new

00:01:18.200 --> 00:01:18.210
chain is able to implement these new
 

00:01:18.210 --> 00:01:21.830
chain is able to implement these new
features using anonymous classes just as

00:01:21.830 --> 00:01:21.840
features using anonymous classes just as
 

00:01:21.840 --> 00:01:23.390
features using anonymous classes just as
if you had written the old version of

00:01:23.390 --> 00:01:23.400
if you had written the old version of
 

00:01:23.400 --> 00:01:26.510
if you had written the old version of
the code yourself that also means you

00:01:26.510 --> 00:01:26.520
the code yourself that also means you
 

00:01:26.520 --> 00:01:28.130
the code yourself that also means you
shouldn't go overboard with using them

00:01:28.130 --> 00:01:28.140
shouldn't go overboard with using them
 

00:01:28.140 --> 00:01:30.200
shouldn't go overboard with using them
in tight loops or anything they're still

00:01:30.200 --> 00:01:30.210
in tight loops or anything they're still
 

00:01:30.210 --> 00:01:33.740
in tight loops or anything they're still
relatively expensive however if you are

00:01:33.740 --> 00:01:33.750
relatively expensive however if you are
 

00:01:33.750 --> 00:01:37.039
relatively expensive however if you are
min SDK version 24 you've entered a

00:01:37.039 --> 00:01:37.049
min SDK version 24 you've entered a
 

00:01:37.049 --> 00:01:39.560
min SDK version 24 you've entered a
magical land you can take advantage of a

00:01:39.560 --> 00:01:39.570
magical land you can take advantage of a
 

00:01:39.570 --> 00:01:42.380
magical land you can take advantage of a
number of additional features for

00:01:42.380 --> 00:01:42.390
number of additional features for
 

00:01:42.390 --> 00:01:44.749
number of additional features for
example lambda expressions go perfectly

00:01:44.749 --> 00:01:44.759
example lambda expressions go perfectly
 

00:01:44.759 --> 00:01:47.569
example lambda expressions go perfectly
with the stream api's which allow you to

00:01:47.569 --> 00:01:47.579
with the stream api's which allow you to
 

00:01:47.579 --> 00:01:49.969
with the stream api's which allow you to
chain together multiple operations such

00:01:49.969 --> 00:01:49.979
chain together multiple operations such
 

00:01:49.979 --> 00:01:52.550
chain together multiple operations such
as filtering mapping or converting into

00:01:52.550 --> 00:01:52.560
as filtering mapping or converting into
 

00:01:52.560 --> 00:01:54.410
as filtering mapping or converting into
different types before applying a

00:01:54.410 --> 00:01:54.420
different types before applying a
 

00:01:54.420 --> 00:01:57.319
different types before applying a
terminating method such as sum for a

00:01:57.319 --> 00:01:57.329
terminating method such as sum for a
 

00:01:57.329 --> 00:01:59.959
terminating method such as sum for a
stream events or for each for applying a

00:01:59.959 --> 00:01:59.969
stream events or for each for applying a
 

00:01:59.969 --> 00:02:01.789
stream events or for each for applying a
lambda expression to every remaining

00:02:01.789 --> 00:02:01.799
lambda expression to every remaining
 

00:02:01.799 --> 00:02:04.700
lambda expression to every remaining
item oh and it supports running in

00:02:04.700 --> 00:02:04.710
item oh and it supports running in
 

00:02:04.710 --> 00:02:07.490
item oh and it supports running in
parallel out of the box crazy powerful

00:02:07.490 --> 00:02:07.500
parallel out of the box crazy powerful
 

00:02:07.500 --> 00:02:09.710
parallel out of the box crazy powerful
stuff and I'd encourage you to check out

00:02:09.710 --> 00:02:09.720
stuff and I'd encourage you to check out
 

00:02:09.720 --> 00:02:12.229
stuff and I'd encourage you to check out
the docs for all the details as there's

00:02:12.229 --> 00:02:12.239
the docs for all the details as there's
 

00:02:12.239 --> 00:02:13.539
the docs for all the details as there's
a lot of them

00:02:13.539 --> 00:02:13.549
a lot of them
 

00:02:13.549 --> 00:02:15.860
a lot of them
interfaces also got an upgrade with the

00:02:15.860 --> 00:02:15.870
interfaces also got an upgrade with the
 

00:02:15.870 --> 00:02:17.530
interfaces also got an upgrade with the
ability to add default method

00:02:17.530 --> 00:02:17.540
ability to add default method
 

00:02:17.540 --> 00:02:20.660
ability to add default method
implementations and static methods this

00:02:20.660 --> 00:02:20.670
implementations and static methods this
 

00:02:20.670 --> 00:02:23.030
implementations and static methods this
makes it easy to add new methods to an

00:02:23.030 --> 00:02:23.040
makes it easy to add new methods to an
 

00:02:23.040 --> 00:02:25.789
makes it easy to add new methods to an
interface without having to update every

00:02:25.789 --> 00:02:25.799
interface without having to update every
 

00:02:25.799 --> 00:02:27.580
interface without having to update every
implementation of the interface and

00:02:27.580 --> 00:02:27.590
implementation of the interface and
 

00:02:27.590 --> 00:02:30.229
implementation of the interface and
allows you to play static helper methods

00:02:30.229 --> 00:02:30.239
allows you to play static helper methods
 

00:02:30.239 --> 00:02:32.660
allows you to play static helper methods
related to an interface in the interface

00:02:32.660 --> 00:02:32.670
related to an interface in the interface
 

00:02:32.670 --> 00:02:35.569
related to an interface in the interface
itself and if you're a fan of

00:02:35.569 --> 00:02:35.579
itself and if you're a fan of
 

00:02:35.579 --> 00:02:37.429
itself and if you're a fan of
annotations and I know some of you are

00:02:37.429 --> 00:02:37.439
annotations and I know some of you are
 

00:02:37.439 --> 00:02:39.379
annotations and I know some of you are
you'll be able to take advantage of

00:02:39.379 --> 00:02:39.389
you'll be able to take advantage of
 

00:02:39.389 --> 00:02:41.449
you'll be able to take advantage of
repeating annotations to add the same

00:02:41.449 --> 00:02:41.459
repeating annotations to add the same
 

00:02:41.459 --> 00:02:44.569
repeating annotations to add the same
annotation more than once particularly

00:02:44.569 --> 00:02:44.579
annotation more than once particularly
 

00:02:44.579 --> 00:02:46.009
annotation more than once particularly
useful if you have an annotation that

00:02:46.009 --> 00:02:46.019
useful if you have an annotation that
 

00:02:46.019 --> 00:02:50.179
useful if you have an annotation that
accepts different type elements so lots

00:02:50.179 --> 00:02:50.189
accepts different type elements so lots
 

00:02:50.189 --> 00:02:51.800
accepts different type elements so lots
of great new features both in the

00:02:51.800 --> 00:02:51.810
of great new features both in the
 

00:02:51.810 --> 00:02:53.960
of great new features both in the
backward metal and non dock work memo

00:02:53.960 --> 00:02:53.970
backward metal and non dock work memo
 

00:02:53.970 --> 00:02:56.420
backward metal and non dock work memo
nature new tools to help you build

00:02:56.420 --> 00:02:56.430
nature new tools to help you build
 

00:02:56.430 --> 00:03:02.930
nature new tools to help you build
better apps

00:03:02.930 --> 00:03:02.940
 
 

00:03:02.940 --> 00:03:05.000
 
you

