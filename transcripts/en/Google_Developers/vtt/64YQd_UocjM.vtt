WEBVTT
Kind: captions
Language: en

00:00:00.410 --> 00:00:01.990
NAVNEET JONEJA: Hello
and welcome.

00:00:01.990 --> 00:00:05.480
My name is Navneet Joneja I am
the lead product manager for

00:00:05.480 --> 00:00:06.590
Compute Engine.

00:00:06.590 --> 00:00:08.620
MARTIN GANNHOLM: And I am
Martin Gannholm, the

00:00:08.620 --> 00:00:11.265
engineering manager for
Compute Engine.

00:00:11.265 --> 00:00:13.180
NAVNEET JONEJA: Over the past
several months, Compute Engine

00:00:13.180 --> 00:00:18.080
has evolved to become faster,
better, more cost effective

00:00:18.080 --> 00:00:19.440
and easier to use.

00:00:19.440 --> 00:00:22.120
And we're here to talk to you
about what that means for you

00:00:22.120 --> 00:00:24.890
as a developer, and for the
applications you can

00:00:24.890 --> 00:00:26.680
build in the Cloud.

00:00:26.680 --> 00:00:28.790
Now a quick note about
level of depth.

00:00:28.790 --> 00:00:31.530
This is a short session, so
the goal here is really to

00:00:31.530 --> 00:00:32.780
make this a fire starter.

00:00:32.780 --> 00:00:35.640
We're going to talk to you about
what Compute Engine is

00:00:35.640 --> 00:00:37.800
about, talk to you about several
of the new features,

00:00:37.800 --> 00:00:39.440
but not go into significant
amount of

00:00:39.440 --> 00:00:41.190
technical depth on them.

00:00:41.190 --> 00:00:44.730
We have additional deep dive
sessions about everything

00:00:44.730 --> 00:00:46.960
we're talking about today, and
we'll give you pointers to the

00:00:46.960 --> 00:00:48.930
sessions at the end
of our talk.

00:00:48.930 --> 00:00:50.890
MARTIN GANNHOLM: And we also
have a Q&amp;A at the end, so you

00:00:50.890 --> 00:00:54.660
can ask us deeper technical
questions if you want then.

00:00:54.660 --> 00:00:54.860
OK.

00:00:54.860 --> 00:00:57.360
So let's start talking
about infrastructure.

00:00:57.360 --> 00:00:59.860
So this is a picture of one
of our data centers.

00:00:59.860 --> 00:01:03.860
And this is the infrastructure
that everything Google does as

00:01:03.860 --> 00:01:05.590
a service runs on.

00:01:05.590 --> 00:01:08.050
Now infrastructure includes
both the hardware and the

00:01:08.050 --> 00:01:10.890
networks that we have, but it
also includes the software

00:01:10.890 --> 00:01:13.250
infrastructures that we have
built, and Urs talked about

00:01:13.250 --> 00:01:15.930
some of this earlier today.

00:01:15.930 --> 00:01:19.080
This is the infrastructure that
powers our web search.

00:01:19.080 --> 00:01:23.350
It allows us to crawl more
than 20 billion web pages

00:01:23.350 --> 00:01:24.560
every single day.

00:01:24.560 --> 00:01:27.340
It's the same infrastructure
that also serves up more than

00:01:27.340 --> 00:01:31.410
four billion hours of
video every month.

00:01:31.410 --> 00:01:33.020
It also is the same
infrastructure that powers

00:01:33.020 --> 00:01:36.140
Compute Engine and the other
Cloud platform services.

00:01:36.140 --> 00:01:39.660
And so you get to take advantage
of running on this

00:01:39.660 --> 00:01:41.915
infrastructure that we've
developed over the last 14

00:01:41.915 --> 00:01:46.100
plus years when you run
on Compute Engine.

00:01:46.100 --> 00:01:49.670
So let me cover a few of
our core principles.

00:01:49.670 --> 00:01:53.070
Being highly secure is one of
our fundamental principles,

00:01:53.070 --> 00:01:54.900
and so that takes three forms.

00:01:54.900 --> 00:01:56.042
One is encapsulation.

00:01:56.042 --> 00:01:59.440
The primary form of
encapsulation is, of course,

00:01:59.440 --> 00:02:01.820
your virtual machine.

00:02:01.820 --> 00:02:04.410
We also encapsulate the network,
so all of your

00:02:04.410 --> 00:02:06.880
Compute Engine instances are
connected to each other on a

00:02:06.880 --> 00:02:08.880
private encapsulated network.

00:02:08.880 --> 00:02:11.260
And they're connected regardless
of which zone or

00:02:11.260 --> 00:02:15.600
which region across the globe
your instances are running in.

00:02:15.600 --> 00:02:17.340
The second dimension
is access.

00:02:17.340 --> 00:02:21.490
We restrict access to your
virtual machines by default.

00:02:21.490 --> 00:02:24.260
And so the only port that is
open to communicate from the

00:02:24.260 --> 00:02:26.520
outside world is through
the SSH.

00:02:26.520 --> 00:02:29.500
Now, you can choose to open up
other ports in the firewall to

00:02:29.500 --> 00:02:31.790
allow other traffic in.

00:02:31.790 --> 00:02:36.390
You can also choose to remove
your public IP address from

00:02:36.390 --> 00:02:38.200
the instance and thereby
cutting it

00:02:38.200 --> 00:02:40.190
off from the internet.

00:02:40.190 --> 00:02:42.480
And you can only reach it from
other virtual machines inside

00:02:42.480 --> 00:02:44.390
of your cluster.

00:02:44.390 --> 00:02:47.790
Third form of security that
we employ is encryption.

00:02:47.790 --> 00:02:50.480
So all of the block device
storage that you use, whether

00:02:50.480 --> 00:02:53.500
that is the scratch disk or
system disk storage, is

00:02:53.500 --> 00:02:58.260
encrypted at rest, and is
encrypted as it leaves in the

00:02:58.260 --> 00:03:00.790
virtual machine monitor and
before it hits the disk.

00:03:03.930 --> 00:03:06.220
NAVNEET JONEJA: So at Google
we treat performance as a

00:03:06.220 --> 00:03:07.600
first class feature.

00:03:07.600 --> 00:03:11.250
It's not just another attribute
of a service.

00:03:11.250 --> 00:03:14.230
And this goes back to our early
days when we designed

00:03:14.230 --> 00:03:17.560
our consumer sites to be as fast
as possible, because we

00:03:17.560 --> 00:03:21.720
believe that there's a strong
correlation between speed and

00:03:21.720 --> 00:03:22.730
engagement.

00:03:22.730 --> 00:03:25.580
And so it reflects itself in the
infrastructure we build.

00:03:25.580 --> 00:03:30.040
Our physical machines are built
to be very fast and very

00:03:30.040 --> 00:03:32.550
consistent, and it
reflects itself

00:03:32.550 --> 00:03:34.340
every step of the stack.

00:03:34.340 --> 00:03:40.270
So not only do you get to build
on great Infrastructure,

00:03:40.270 --> 00:03:42.670
the software itself is
architected to be highly

00:03:42.670 --> 00:03:45.460
consistent and highly
performant.

00:03:45.460 --> 00:03:49.020
So how does that show up
in Compute Engine?

00:03:49.020 --> 00:03:52.560
Well first it shows up in the
performance of the virtual

00:03:52.560 --> 00:03:54.570
machines you can launch
in Compute Engine.

00:03:54.570 --> 00:03:58.220
So you can launch a two core
virtual machine anywhere in

00:03:58.220 --> 00:04:00.290
Compute Engine and get
the same performance.

00:04:00.290 --> 00:04:02.250
So the consistency and the
performance are both

00:04:02.250 --> 00:04:03.700
attributes built into the

00:04:03.700 --> 00:04:06.440
architecture of Compute Engine.

00:04:06.440 --> 00:04:09.210
It also is present in
our storage layer.

00:04:09.210 --> 00:04:12.110
Now, in many cases, the
performance of the storage

00:04:12.110 --> 00:04:15.190
layer is at least as important
as the performance of the

00:04:15.190 --> 00:04:16.589
actual virtual machine.

00:04:16.589 --> 00:04:19.410
And so we've built both our
scratch and our persistent

00:04:19.410 --> 00:04:22.520
disk solutions, which are short
lived and sort of highly

00:04:22.520 --> 00:04:27.870
available redundant reliable
storage solutions, to be very

00:04:27.870 --> 00:04:30.490
fast and very consistently
performant.

00:04:30.490 --> 00:04:33.470
And this has been demonstrated
by many benchmarks run by some

00:04:33.470 --> 00:04:34.720
people in the audience
today even.

00:04:37.690 --> 00:04:40.530
Another aspect of performance
for us is network performance.

00:04:40.530 --> 00:04:43.090
Now network is really what
Google does, right?

00:04:43.090 --> 00:04:46.110
It's fundamentally core
to all our businesses.

00:04:46.110 --> 00:04:49.560
And so over the past 14 years,
we've done a lot of research

00:04:49.560 --> 00:04:50.370
in the area of networking.

00:04:50.370 --> 00:04:52.280
We've published several
papers.

00:04:52.280 --> 00:04:54.720
This morning, if you were at
Urs' talk, he was talking

00:04:54.720 --> 00:04:56.810
about how we run on
a software defined

00:04:56.810 --> 00:04:58.750
network for all of Google.

00:04:58.750 --> 00:05:01.640
And you'll find that that
research and that thinking

00:05:01.640 --> 00:05:04.900
about network performance is
pervasive and is reflected in

00:05:04.900 --> 00:05:05.470
Compute Engine.

00:05:05.470 --> 00:05:07.660
Because when you spin up virtual
machines, you get

00:05:07.660 --> 00:05:10.360
extremely high cross sectional
bandwidth between virtual

00:05:10.360 --> 00:05:11.730
machines in Compute Engine.

00:05:11.730 --> 00:05:14.520
And you also get great
performance to the broader

00:05:14.520 --> 00:05:16.120
network as well.

00:05:16.120 --> 00:05:20.030
Finally, we also believe
that scale and speed

00:05:20.030 --> 00:05:21.960
of scaling is important.

00:05:21.960 --> 00:05:26.500
Because, it turns out, that you
don't always get heads up

00:05:26.500 --> 00:05:28.050
about a load that's
coming your way.

00:05:28.050 --> 00:05:28.330
Right?

00:05:28.330 --> 00:05:30.890
By the time you know you need to
scale, it's often too late.

00:05:30.890 --> 00:05:33.425
And so when you need to scale,
you want to be able to spin up

00:05:33.425 --> 00:05:36.500
virtual machines as quickly
as possible.

00:05:36.500 --> 00:05:40.230
And so we focused on making that
spin up process quick and

00:05:40.230 --> 00:05:43.890
painless so that you can scale
up quickly and effectively on

00:05:43.890 --> 00:05:45.140
Compute Engine.

00:05:47.600 --> 00:05:49.920
So how does that reflect
in the product

00:05:49.920 --> 00:05:51.220
that you get to use?

00:05:51.220 --> 00:05:54.770
Well, so a great example is our
partner MapR Technologies

00:05:54.770 --> 00:05:59.910
who used our off-the-shelf
virtual machines to run the

00:05:59.910 --> 00:06:01.540
benchmark called Minute
Sort Benchmark.

00:06:01.540 --> 00:06:04.180
This benchmark measures
how much data you

00:06:04.180 --> 00:06:05.910
can sort in a minute.

00:06:05.910 --> 00:06:09.020
It's kind of the gold standard
for big data processing.

00:06:09.020 --> 00:06:13.040
And MapR was able to sort one
and a half terabytes of data

00:06:13.040 --> 00:06:15.740
in one minute on Compute Engine,
beating the previous

00:06:15.740 --> 00:06:18.500
record that was set
on dedicated

00:06:18.500 --> 00:06:20.890
tuned physical hardware.

00:06:20.890 --> 00:06:24.280
So I hope that gives you a sense
of what you can do when

00:06:24.280 --> 00:06:27.415
you have access to not just fast
virtual machines, but to

00:06:27.415 --> 00:06:31.520
a fast network connecting
those virtual machines.

00:06:31.520 --> 00:06:31.870
MARTIN GANNHOLM: All right.

00:06:31.870 --> 00:06:34.840
Another core principle
is openness.

00:06:34.840 --> 00:06:39.920
We start by providing an easy
to use API layer that we

00:06:39.920 --> 00:06:42.080
expose to you, the developers.

00:06:42.080 --> 00:06:45.490
That is also the same API layer
that we use as we build

00:06:45.490 --> 00:06:48.430
higher level tools.

00:06:48.430 --> 00:06:52.450
For example, command line tools
or the Cloud Console is

00:06:52.450 --> 00:06:56.940
built accessing the exact same
APIs that you have access to.

00:06:56.940 --> 00:07:00.500
Another form of openness is we
really want developers and

00:07:00.500 --> 00:07:03.370
partners to be adding to the
ecosystem, building solutions

00:07:03.370 --> 00:07:06.050
on top of Compute Engine and
the greater Cloud platform.

00:07:06.050 --> 00:07:10.290
And so we've worked with the
community to provide both

00:07:10.290 --> 00:07:12.960
CentOS and Debian images as
part of Compute Engine.

00:07:16.450 --> 00:07:18.110
NAVNEET JONEJA: Now all that
doesn't really mean very much

00:07:18.110 --> 00:07:20.900
unless it translates into
benefits that you can see and

00:07:20.900 --> 00:07:22.070
that benefits you.

00:07:22.070 --> 00:07:24.760
And we're very happy that our
customers and partners have

00:07:24.760 --> 00:07:29.680
noted that our focus on
performance and security

00:07:29.680 --> 00:07:32.750
address what they're hearing
from their customers as their

00:07:32.750 --> 00:07:34.800
top concerns when they
move to the Cloud.

00:07:34.800 --> 00:07:38.360
Here's a quote from Thorsten
von Eicken, the CTO of

00:07:38.360 --> 00:07:41.340
RightScale, one of the
largest providers of

00:07:41.340 --> 00:07:42.590
Cloud management software.

00:07:50.410 --> 00:07:52.690
MARTIN GANNHOLM: So Compute
Engine is not an island.

00:07:52.690 --> 00:07:55.140
I spoke earlier about
the Cloud platform.

00:07:55.140 --> 00:07:57.360
So to build really sophisticated
services, you

00:07:57.360 --> 00:08:00.530
often need to use multiple
different pieces in order to

00:08:00.530 --> 00:08:03.710
build a complex application
solution.

00:08:03.710 --> 00:08:07.210
And so we're really excited that
today we announced that

00:08:07.210 --> 00:08:11.670
Cloud Datastore is basically
taking what has been the

00:08:11.670 --> 00:08:14.710
world's largest hosted NoSQL
database, which is App Engines

00:08:14.710 --> 00:08:18.250
Datastore, processing more than
four and a half trillion

00:08:18.250 --> 00:08:21.340
operations per month, and making
that available through

00:08:21.340 --> 00:08:22.280
a public API.

00:08:22.280 --> 00:08:24.740
So you can access it from
Compute Engine or, indeed,

00:08:24.740 --> 00:08:26.250
from anywhere.

00:08:26.250 --> 00:08:29.320
And so you can build
applications comprising

00:08:29.320 --> 00:08:32.679
frontends, using App Engine,
communicating and sharing data

00:08:32.679 --> 00:08:36.100
in the middle with Cloud
Datastore, and having backends

00:08:36.100 --> 00:08:38.669
on Compute Engine, for
example, all being

00:08:38.669 --> 00:08:40.750
synchronized and accessing
that data.

00:08:40.750 --> 00:08:41.960
So there are a lot of the

00:08:41.960 --> 00:08:43.690
possibilities with the Datastore.

00:08:43.690 --> 00:08:45.860
So we think it's a great
addition to the family.

00:08:45.860 --> 00:08:47.290
NAVNEET JONEJA: And that pattern
that Martin talked

00:08:47.290 --> 00:08:50.040
about is also a great pattern,
one that we recommend, because

00:08:50.040 --> 00:08:52.000
it lets you get the best
of both worlds--

00:08:52.000 --> 00:08:54.420
App Engine for your scalable
frontends and Compute Engine

00:08:54.420 --> 00:08:56.980
for the heavy lifting.

00:08:56.980 --> 00:09:01.030
Now it turns out that not all
workloads are created equal.

00:09:01.030 --> 00:09:04.380
Some, like databases, benefit
from lots of memory.

00:09:04.380 --> 00:09:07.900
Others, like rendering or
processing geographical data,

00:09:07.900 --> 00:09:10.130
require lots of processing
power.

00:09:10.130 --> 00:09:11.940
When we launched Compute Engine,
we launched with what

00:09:11.940 --> 00:09:15.150
we call our standard family of
instances, which had a good

00:09:15.150 --> 00:09:18.910
mix of both processing
power and memory.

00:09:18.910 --> 00:09:21.740
But we quickly specialized to
offer instances that actually

00:09:21.740 --> 00:09:24.270
are more suited to these
specialized workloads that

00:09:24.270 --> 00:09:27.376
require more of memory
or compute.

00:09:27.376 --> 00:09:31.010
And so we launched instance
families called a high CPU and

00:09:31.010 --> 00:09:32.300
high memory instances.

00:09:32.300 --> 00:09:35.260
So you have a good diversity of
instances to suit a broad

00:09:35.260 --> 00:09:37.215
array of workloads.

00:09:37.215 --> 00:09:40.030
And the standard instances are
available in one, two, four

00:09:40.030 --> 00:09:41.590
and eight core variance.

00:09:41.590 --> 00:09:45.100
And high CPU and high memory
instances are available in

00:09:45.100 --> 00:09:47.160
two, four and eight
core variance.

00:09:47.160 --> 00:09:47.970
But that's not all.

00:09:47.970 --> 00:09:51.485
Today we are also announcing two
new instance types, small

00:09:51.485 --> 00:09:55.170
and micro instances, that are
designed for workloads that

00:09:55.170 --> 00:09:57.970
don't need as much
processing power.

00:09:57.970 --> 00:10:01.130
So for example, if you want to
run a development or test

00:10:01.130 --> 00:10:03.510
workload in the Cloud or you
just want to experiment, you

00:10:03.510 --> 00:10:08.990
can do so with these instances
for less than $0.02 an hour.

00:10:08.990 --> 00:10:10.670
MARTIN GANNHOLM: So as you
design your clusters and think

00:10:10.670 --> 00:10:13.280
about how you're going to
orchestrate and get a large

00:10:13.280 --> 00:10:15.530
number of machines understanding
what their roles

00:10:15.530 --> 00:10:19.820
are, we produced a metadata
server, which is a simple HTTP

00:10:19.820 --> 00:10:22.750
server that's exposed into the
guest environment, so you can

00:10:22.750 --> 00:10:26.930
just use a simple HTTP
get request to get

00:10:26.930 --> 00:10:28.500
metadata that is past.

00:10:28.500 --> 00:10:29.970
And we had two forms
of metadata.

00:10:29.970 --> 00:10:32.710
One was project level, which
all of your instances would

00:10:32.710 --> 00:10:34.760
see the project level
metadata.

00:10:34.760 --> 00:10:37.030
And then we also have instance
level metadata where each

00:10:37.030 --> 00:10:40.440
individual machine can
have custom metadata

00:10:40.440 --> 00:10:42.450
for just that instance.

00:10:42.450 --> 00:10:45.920
One of the things that we've
now added is the ability to

00:10:45.920 --> 00:10:49.680
mutate this metadata and add
more metadata on the fly.

00:10:49.680 --> 00:10:52.770
So you can use this to pass in
changes to your configurations

00:10:52.770 --> 00:10:54.530
while your system is running.

00:10:54.530 --> 00:10:56.170
You can also use it--

00:10:56.170 --> 00:10:59.070
the instance itself can also
make changes to that metadata

00:10:59.070 --> 00:11:02.790
to pass information out to some
process on the outside

00:11:02.790 --> 00:11:03.630
that wants to understand what's

00:11:03.630 --> 00:11:05.295
going on with the instances.

00:11:05.295 --> 00:11:07.400
NAVNEET JONEJA: And it turns out
that a lot of people tried

00:11:07.400 --> 00:11:09.580
to solve these problems in their
own self built clusters

00:11:09.580 --> 00:11:12.910
by using things like agents
to configure and to update

00:11:12.910 --> 00:11:15.140
instances when things change.

00:11:15.140 --> 00:11:17.220
And with Compute Engine, because
you have access to a

00:11:17.220 --> 00:11:19.930
metadata server that's very easy
to program to, you don't

00:11:19.930 --> 00:11:20.430
need to do that.

00:11:20.430 --> 00:11:21.680
It's built into the service.

00:11:24.790 --> 00:11:26.830
Another thing people think about
a lot when they think

00:11:26.830 --> 00:11:29.900
about how they deploy sort of
highly robust and scalable

00:11:29.900 --> 00:11:33.540
architectures, is how to
make their applications

00:11:33.540 --> 00:11:36.710
restartable, repeatable
and resumable.

00:11:36.710 --> 00:11:41.520
And so, from the get go, we
provided highly reliable,

00:11:41.520 --> 00:11:44.200
persistent disk solution to
let people store their

00:11:44.200 --> 00:11:47.450
critical data so they could
do these things.

00:11:47.450 --> 00:11:50.680
And our customers really liked
it, and they wanted more.

00:11:50.680 --> 00:11:52.230
By more I mean more storage.

00:11:52.230 --> 00:11:54.370
And so today we're happy to
announce that you can now

00:11:54.370 --> 00:11:58.680
attach up to 10 terabytes of
persistent disk to any Compute

00:11:58.680 --> 00:12:02.020
Engine virtual machine, which
really lets you unlock the

00:12:02.020 --> 00:12:04.730
power of crunching large amounts
of data and storing

00:12:04.730 --> 00:12:07.280
that data reliably.

00:12:07.280 --> 00:12:10.010
But it's not just about your
actual application data.

00:12:10.010 --> 00:12:12.090
It's also about your virtual
machines, too.

00:12:12.090 --> 00:12:14.890
And so we've made it possible
for you to use a persistent

00:12:14.890 --> 00:12:18.440
disk as the root file system
for your virtual machine.

00:12:18.440 --> 00:12:21.570
What that means is that if you
deploy a virtual machine as a

00:12:21.570 --> 00:12:23.880
component in your architecture,
and that

00:12:23.880 --> 00:12:25.950
component happens to fail--
because they do, that's

00:12:25.950 --> 00:12:27.200
Murphy's law--

00:12:27.200 --> 00:12:29.050
you can always bring that
component back up in

00:12:29.050 --> 00:12:31.180
practically the same state
where it left off.

00:12:31.180 --> 00:12:33.550
Because all the configuration
tweaks you made to that

00:12:33.550 --> 00:12:36.570
virtual machine in the root file
system, all the changes

00:12:36.570 --> 00:12:38.450
you made to it, were preserved,
and you just spun

00:12:38.450 --> 00:12:41.070
up a new instance using the
same persistent disk.

00:12:41.070 --> 00:12:44.330
And it's effectively
the same instance.

00:12:44.330 --> 00:12:46.480
Take that one step further, and
think about what you can

00:12:46.480 --> 00:12:49.840
do when you can actually
attach and detach these

00:12:49.840 --> 00:12:52.600
persistent disks on the fly
to your virtual machines.

00:12:52.600 --> 00:12:54.820
Because now you can think
about architectures like

00:12:54.820 --> 00:12:57.920
having a hot standby where you
can quickly swap a persistent

00:12:57.920 --> 00:13:00.986
disk to the hot standby and have
very low downtime if a

00:13:00.986 --> 00:13:02.070
component fails.

00:13:02.070 --> 00:13:06.810
Or think about what that means
in terms of how you scale.

00:13:06.810 --> 00:13:08.700
So it's quite easy to
scale horizontally.

00:13:08.700 --> 00:13:10.300
But if you want to scale
vertically, you

00:13:10.300 --> 00:13:11.740
could even do that.

00:13:11.740 --> 00:13:13.960
So let's say you're running
a database on a standard

00:13:13.960 --> 00:13:17.310
instance, and you decide that
you could probably use some

00:13:17.310 --> 00:13:20.790
more RAM, because your queries
are not performing as well as

00:13:20.790 --> 00:13:21.700
they could.

00:13:21.700 --> 00:13:23.925
So you spin up a high memory
instance, and you detach the

00:13:23.925 --> 00:13:26.940
persistent disk from your
standard instance.

00:13:26.940 --> 00:13:28.330
You attach it to the high memory
instance, and you've

00:13:28.330 --> 00:13:30.880
just scaled vertically.

00:13:30.880 --> 00:13:34.870
So persistent disk makes
building these architectures

00:13:34.870 --> 00:13:36.370
really easy.

00:13:36.370 --> 00:13:39.060
And with these changes, we
hope that it'll make your

00:13:39.060 --> 00:13:43.370
applications ever more robust
and easier to build.

00:13:43.370 --> 00:13:43.540
MARTIN GANNHOLM: Right.

00:13:43.540 --> 00:13:45.230
So the Cloud is all
about flexibility.

00:13:45.230 --> 00:13:48.610
And so you can spin up a single
instance, or 1,000

00:13:48.610 --> 00:13:52.160
instances, at the drop of a hat
as your workload demands.

00:13:52.160 --> 00:13:55.270
Now with sub-hour billing, which
we announced today, you

00:13:55.270 --> 00:13:57.350
pay for per minute increments.

00:13:57.350 --> 00:14:00.330
And this gives you flexibility
also in the time dimension.

00:14:00.330 --> 00:14:04.550
No longer do you need to think
about utilizing the full hour

00:14:04.550 --> 00:14:08.630
that you will pay for, and you
can instead focus on exactly

00:14:08.630 --> 00:14:10.460
what your workloads require.

00:14:10.460 --> 00:14:13.130
And so we anticipate that
this will enable new

00:14:13.130 --> 00:14:14.760
types of use cases.

00:14:14.760 --> 00:14:17.150
When you can spin up your
virtual machines really,

00:14:17.150 --> 00:14:21.560
really fast and when you turn
them off, you only pay for the

00:14:21.560 --> 00:14:23.740
time that you actually used.

00:14:23.740 --> 00:14:25.040
NAVNEET JONEJA: And we combine
that with the fact that

00:14:25.040 --> 00:14:28.020
virtual machines spin up really
fast in Compute Engine.

00:14:28.020 --> 00:14:30.210
That can actually enable new
kinds of architectures, as

00:14:30.210 --> 00:14:30.970
Martin said.

00:14:30.970 --> 00:14:33.120
And we've seen at Google-- and
in fact, it's how we build our

00:14:33.120 --> 00:14:34.060
applications--

00:14:34.060 --> 00:14:35.800
but we haven't really seen
much of in the Cloud.

00:14:35.800 --> 00:14:39.820
And we hope that this enables
you to build using on demand

00:14:39.820 --> 00:14:41.530
kind of architectures, which
you couldn't earlier.

00:14:44.090 --> 00:14:47.300
Now a lot of our customers told
us that they don't look

00:14:47.300 --> 00:14:49.900
at the Cloud as a silo.

00:14:49.900 --> 00:14:52.160
They want to build applications
that span their

00:14:52.160 --> 00:14:54.520
local infrastructure, their
own physical data

00:14:54.520 --> 00:14:56.040
centers, and the Cloud.

00:14:56.040 --> 00:14:57.250
Or in some cases, they
want to build

00:14:57.250 --> 00:15:00.010
applications that span Clouds.

00:15:00.010 --> 00:15:01.880
And so we've announced
a new feature

00:15:01.880 --> 00:15:03.400
called Advanced Routing.

00:15:03.400 --> 00:15:05.640
It's a very deep networking
feature that lets you do lots

00:15:05.640 --> 00:15:07.100
of things, including this.

00:15:07.100 --> 00:15:10.070
You can actually spin up
gateways and VPNs.

00:15:10.070 --> 00:15:13.550
So you can connect your data
centers to the Cloud and share

00:15:13.550 --> 00:15:16.720
IP spaces so that you can do
things like augment your on

00:15:16.720 --> 00:15:20.140
premise capacity with capacity
in the Cloud, build

00:15:20.140 --> 00:15:22.680
multi-Cloud deployments, share
data between applications that

00:15:22.680 --> 00:15:25.300
might live in different
locations, and more.

00:15:25.300 --> 00:15:27.490
You can also do things like, as
Martin mentioned earlier,

00:15:27.490 --> 00:15:32.030
if you remove the public IP from
an instance, you can cut

00:15:32.030 --> 00:15:33.190
it off from the internet,
but make it

00:15:33.190 --> 00:15:34.500
accessible from inside.

00:15:34.500 --> 00:15:37.100
And now using advanced routing
and the fine-grain packet

00:15:37.100 --> 00:15:39.400
level routing control you get,
you can do things like

00:15:39.400 --> 00:15:42.885
deploying a proxy server or a
gateway to mediate access to

00:15:42.885 --> 00:15:43.960
those instances.

00:15:43.960 --> 00:15:46.420
So it makes some very, very cool
and powerful and highly

00:15:46.420 --> 00:15:49.160
secure architectures possible
when you take full advantage

00:15:49.160 --> 00:15:50.410
of this capability.

00:15:52.720 --> 00:15:53.290
MARTIN GANNHOLM: All right.

00:15:53.290 --> 00:15:56.250
What I want to do now is to give
you a little demo of some

00:15:56.250 --> 00:15:59.160
of the features that
we've talked about.

00:15:59.160 --> 00:16:05.190
I'm just going to switch
to this one.

00:16:09.490 --> 00:16:10.740
Uh oh.

00:16:15.800 --> 00:16:18.354
Yeah, I know, but it's--

00:16:18.354 --> 00:16:20.110
no.

00:16:20.110 --> 00:16:21.360
It's not refreshing.

00:16:24.608 --> 00:16:27.410
I broke it, Joe.

00:16:27.410 --> 00:16:28.290
NAVNEET JONEJA: Well, you know,
it's a live demo and

00:16:28.290 --> 00:16:29.540
stuff breaks, right.

00:16:32.580 --> 00:16:33.830
MARTIN GANNHOLM: Total blank.

00:16:36.360 --> 00:16:38.926
Oh, I moved to that one.

00:16:47.720 --> 00:16:50.980
Open up another tab.

00:16:50.980 --> 00:16:51.080
NAVNEET JONEJA: All right.

00:16:51.080 --> 00:16:52.050
We'll try and get this fixed.

00:16:52.050 --> 00:16:54.030
In the meantime, we'll just move
on to the next segment,

00:16:54.030 --> 00:16:56.360
and we'll come back and
get the demo going.

00:16:56.360 --> 00:16:59.600
I'd like to invite Sebastian
Stadil, the founder and CEO of

00:16:59.600 --> 00:17:03.180
Scalr, to talk to you about what
he thinks is cool about

00:17:03.180 --> 00:17:04.430
Compute Engine.

00:17:08.420 --> 00:17:09.050
SEBASTIAN STADIL: All right.

00:17:09.050 --> 00:17:10.700
Thank you very much, Naveet,
for inviting me.

00:17:10.700 --> 00:17:13.300
So it's very exciting
to be here.

00:17:13.300 --> 00:17:17.079
I'm super pumped about getting
a Chromebook and all of that.

00:17:17.079 --> 00:17:20.930
So I hope you guys are
as excited as I am.

00:17:20.930 --> 00:17:25.510
So I'm here to talk about a
couple use cases that we've

00:17:25.510 --> 00:17:28.760
seen from our experience at
Scalr with working with

00:17:28.760 --> 00:17:31.850
hundreds of customers across
many different Clouds for the

00:17:31.850 --> 00:17:34.030
past five years now.

00:17:34.030 --> 00:17:38.650
And there's a lot of features
that Compute Engine has that

00:17:38.650 --> 00:17:43.960
basically allow us to solve real
customer problems with

00:17:43.960 --> 00:17:47.130
greater ease.

00:17:47.130 --> 00:17:49.410
So here's a few of the customers
that we've worked

00:17:49.410 --> 00:17:52.690
with in the past five years.

00:17:52.690 --> 00:17:54.470
Companies big and small.

00:17:54.470 --> 00:17:58.180
One of them that I'd like
to point out is Samsung.

00:17:58.180 --> 00:18:03.580
They run something like 22% of
the world's Android phones.

00:18:03.580 --> 00:18:07.240
They build applications to
manage all of that, and

00:18:07.240 --> 00:18:08.885
infrastructure for
it is just huge.

00:18:11.740 --> 00:18:17.840
And I'm super excited, because
right now, as I speak, there's

00:18:17.840 --> 00:18:19.090
the Eurovision contest.

00:18:21.540 --> 00:18:25.090
How many of you here are from
Europe or have heard about

00:18:25.090 --> 00:18:25.550
this contest?

00:18:25.550 --> 00:18:26.270
Awesome.

00:18:26.270 --> 00:18:31.490
So it's like the world's
second largest annual

00:18:31.490 --> 00:18:34.640
televised event, between
100 and 120

00:18:34.640 --> 00:18:37.860
million televised viewers.

00:18:37.860 --> 00:18:43.190
And the voting for it
is extremely spiky.

00:18:43.190 --> 00:18:50.480
Now the viewership on any given
day for this is 4x what

00:18:50.480 --> 00:18:53.420
you could find at the Olympics
on any given date.

00:18:53.420 --> 00:18:58.500
The scale of this event is so
huge, I could even say it

00:18:58.500 --> 00:19:02.150
exceeds the Michael Arrington's
ego but maybe

00:19:02.150 --> 00:19:03.870
that's a bit--

00:19:03.870 --> 00:19:05.070
[LAUGHTER]

00:19:05.070 --> 00:19:07.210
SEBASTIAN STADIL: So Ralf
Rottmann, the infrastructure

00:19:07.210 --> 00:19:14.130
director that was retained by
Eurovision to run the backend

00:19:14.130 --> 00:19:16.920
for this has the following
to say of Compute Engine.

00:19:16.920 --> 00:19:21.440
"Google Compute Engine rocks."
Basically, what he loves about

00:19:21.440 --> 00:19:26.020
it is it's not just fast,
it's Google fast.

00:19:26.020 --> 00:19:28.280
There's a few recent benchmarks
that we ran to

00:19:28.280 --> 00:19:31.130
evaluate the speed of
different services.

00:19:31.130 --> 00:19:34.030
And one of the figures I'd
like to show is that for

00:19:34.030 --> 00:19:36.520
sequential I/O on persistent
disks.

00:19:36.520 --> 00:19:40.650
You can see here in blue is
Google, higher is better.

00:19:40.650 --> 00:19:44.680
And it's compared to a
well-known competitor.

00:19:44.680 --> 00:19:47.900
[LAUGHTER]

00:19:47.900 --> 00:19:50.390
SEBASTIAN STADIL: And you can
see here that for a sequential

00:19:50.390 --> 00:19:53.100
writes, you get about three
times the amount of

00:19:53.100 --> 00:19:54.560
throughputs.

00:19:54.560 --> 00:19:57.560
For reads, you get about
twice the amount.

00:19:57.560 --> 00:20:00.120
This type of performance is
something that's really

00:20:00.120 --> 00:20:03.540
valuable when you're using
[INAUDIBLE] or anything that

00:20:03.540 --> 00:20:05.920
writes sequentially.

00:20:05.920 --> 00:20:07.930
But Compute Engine isn't
just about the speed,

00:20:07.930 --> 00:20:08.610
although we love it.

00:20:08.610 --> 00:20:10.190
It's also about the features.

00:20:10.190 --> 00:20:13.170
And there's this use case that
we see recurring in the

00:20:13.170 --> 00:20:16.200
enterprise which--

00:20:16.200 --> 00:20:17.040
think about it this way.

00:20:17.040 --> 00:20:19.990
You're building an application
on the Cloud, and that

00:20:19.990 --> 00:20:23.150
application needs to access some
resources that you have

00:20:23.150 --> 00:20:25.020
in your corporate network.

00:20:25.020 --> 00:20:28.910
Now normally you'd have to build
a whole series of things

00:20:28.910 --> 00:20:31.360
to get that and secure that,
and go through all sorts of

00:20:31.360 --> 00:20:33.190
different vendors.

00:20:33.190 --> 00:20:36.390
Compute Engine's routing
capabilities allow you to do

00:20:36.390 --> 00:20:38.050
that really, really easily.

00:20:38.050 --> 00:20:42.420
They allow you to build that
highly secure tunnel between

00:20:42.420 --> 00:20:44.960
Compute Engine and your
corporate network for your

00:20:44.960 --> 00:20:46.280
application.

00:20:46.280 --> 00:20:50.590
Another use case that we see
very often is the opposite.

00:20:50.590 --> 00:20:55.580
When you have applications that
are in your corporate

00:20:55.580 --> 00:20:59.650
network, but don't have enough
capacity for them to run,

00:20:59.650 --> 00:21:01.540
because they've increased
in size.

00:21:01.540 --> 00:21:03.770
And what you have here is you
usually have something called

00:21:03.770 --> 00:21:06.900
Cloud bursting, where you're
extending your corporate

00:21:06.900 --> 00:21:08.860
network with Cloud resources.

00:21:08.860 --> 00:21:11.250
Again, routing makes this
really, really easy.

00:21:14.190 --> 00:21:16.880
A second use case that we run
into quite frequently is the

00:21:16.880 --> 00:21:20.260
processing of large
amounts of data.

00:21:20.260 --> 00:21:22.250
The folks at CERN, specifically,
from the

00:21:22.250 --> 00:21:25.190
Lawrence Berkeley Labs just
across the Bay, they're

00:21:25.190 --> 00:21:27.420
working on the ATLAS experiments
which is

00:21:27.420 --> 00:21:31.960
responsible for managing all the
giant Condor clusters that

00:21:31.960 --> 00:21:34.260
are crunching huge
amounts of data.

00:21:34.260 --> 00:21:36.760
And that eventually led
to the discovery of

00:21:36.760 --> 00:21:38.350
the Higgs boson particle.

00:21:45.215 --> 00:21:46.860
So they crunch huge
amounts of data.

00:21:46.860 --> 00:21:51.230
And when you're able to mount a
persistent disk to multiple

00:21:51.230 --> 00:21:54.950
instances, and when you couple
that with the new limits of 10

00:21:54.950 --> 00:21:57.820
terabytes per persistent disk,
it makes it really, really

00:21:57.820 --> 00:22:01.660
easy to crunch huge amounts of
data across large amounts of

00:22:01.660 --> 00:22:06.080
nodes, without having to manage
a very large number of

00:22:06.080 --> 00:22:08.620
volumes and having to version
what's what and

00:22:08.620 --> 00:22:09.980
where and all that.

00:22:09.980 --> 00:22:14.070
So the use case of crunching
large amounts of data is very

00:22:14.070 --> 00:22:16.280
much facilitated.

00:22:16.280 --> 00:22:21.750
Now there's another use case
that I like to talk about, so

00:22:21.750 --> 00:22:23.350
this is the third one.

00:22:23.350 --> 00:22:27.100
And I'm sure if anybody here
has used one of the leading

00:22:27.100 --> 00:22:32.130
competitors, a couple years
ago, there were two major

00:22:32.130 --> 00:22:38.020
outages that pretty much took
a lot of people offline.

00:22:38.020 --> 00:22:42.970
And we had some customers that
were telling us well, this is

00:22:42.970 --> 00:22:44.800
unacceptable, there's
a lot of components

00:22:44.800 --> 00:22:45.760
that are not reliable.

00:22:45.760 --> 00:22:48.150
So we need to architect
around that.

00:22:48.150 --> 00:22:49.860
And architecting around
those things

00:22:49.860 --> 00:22:51.300
is very, very difficult.

00:22:51.300 --> 00:22:54.880
For example, if you can't rely
on a region being up, if you

00:22:54.880 --> 00:22:58.600
can't rely on remote disks being
accessible, then you

00:22:58.600 --> 00:22:59.540
have to architect around that.

00:22:59.540 --> 00:23:01.630
And that's really, really,
really tough.

00:23:01.630 --> 00:23:02.880
It's very painful.

00:23:06.270 --> 00:23:09.140
I'd say it's like probably even
more painful than sitting

00:23:09.140 --> 00:23:11.010
through a "Twilight" movie,
but I don't know.

00:23:14.850 --> 00:23:15.090
Yeah.

00:23:15.090 --> 00:23:21.380
So the fact that in Compute
Engine you're able to have

00:23:21.380 --> 00:23:24.260
every resource that's either a
global resource or a regional

00:23:24.260 --> 00:23:28.700
resource, that allows you to
plan what will go down in the

00:23:28.700 --> 00:23:30.770
event of a regional outage
and what won't.

00:23:30.770 --> 00:23:32.650
So you can plan your
architecture and build your

00:23:32.650 --> 00:23:34.150
infrastructure in a much--

00:23:34.150 --> 00:23:36.920
so it makes it much
easier to build

00:23:36.920 --> 00:23:39.950
highly available systems.

00:23:39.950 --> 00:23:44.340
And finally, the last thing
that, of course, as a startup

00:23:44.340 --> 00:23:48.450
that I very much appreciate, is
the by the minute pricing.

00:23:48.450 --> 00:23:53.250
We have this customer
that has very, very

00:23:53.250 --> 00:23:55.770
erratic scaling patterns.

00:23:55.770 --> 00:23:58.520
They're very hard to predict,
but when they happen, they're

00:23:58.520 --> 00:23:59.680
just explosive.

00:23:59.680 --> 00:24:03.120
So they go from x to 20x in
the matter of minutes.

00:24:03.120 --> 00:24:06.850
Now what's awesome about by the
minute pricing is that it

00:24:06.850 --> 00:24:11.410
dramatically reduces the
risk of scaling up.

00:24:11.410 --> 00:24:14.780
If you only need to pay for that
10 minute block instead

00:24:14.780 --> 00:24:17.160
of the whole hour, then you
can start scaling at the

00:24:17.160 --> 00:24:22.020
slightest hint of having
that peak.

00:24:22.020 --> 00:24:25.050
So we're looking at about six
times lower cost of a false

00:24:25.050 --> 00:24:25.720
positive here.

00:24:25.720 --> 00:24:27.510
So that's huge.

00:24:27.510 --> 00:24:30.570
And eventually, that's all
that money that you start

00:24:30.570 --> 00:24:33.470
saving, and you might be able
to do cool things like buy a

00:24:33.470 --> 00:24:36.391
WinZip license or,
I don't know.

00:24:36.391 --> 00:24:38.846
[LAUGHTER]

00:24:38.846 --> 00:24:41.410
SEBASTIAN STADIL: But
that money ends up.

00:24:41.410 --> 00:24:44.070
So that's the four use cases
that we see Compute Engine

00:24:44.070 --> 00:24:45.250
being really powerful.

00:24:45.250 --> 00:24:48.210
And we're super excited about
what you guys are building.

00:24:48.210 --> 00:24:51.190
So I'd like to hand
it back to Martin.

00:24:51.190 --> 00:24:51.670
MARTIN GANNHOLM: Thanks
very much

00:24:51.670 --> 00:24:52.130
NAVNEET JONEJA: All right.

00:24:52.130 --> 00:24:52.370
SEBASTIAN STADIL: Thank you.

00:24:52.370 --> 00:24:53.136
NAVNEET JONEJA: Thanks,
Sebastian.

00:24:53.136 --> 00:24:58.600
[APPLAUSE]

00:24:58.600 --> 00:24:59.140
MARTIN GANNHOLM: All right.

00:24:59.140 --> 00:25:00.620
Joe fixed it.

00:25:00.620 --> 00:25:02.410
Thank you, Joe.

00:25:02.410 --> 00:25:05.080
So I was going to show you a
little demo here highlighting

00:25:05.080 --> 00:25:06.950
some of the features
that we have.

00:25:06.950 --> 00:25:09.710
I'm just going to start by
kicking off a bunch of VMs,

00:25:09.710 --> 00:25:12.300
and I'll talk through what's
happening here.

00:25:12.300 --> 00:25:15.140
So what you're looking at here
is a web page that is backed

00:25:15.140 --> 00:25:19.590
by an App Engine application
that is controlling the

00:25:19.590 --> 00:25:21.280
Compute Engine through
the API.

00:25:21.280 --> 00:25:23.200
And so what it did is on the
left hand side, it started up

00:25:23.200 --> 00:25:26.250
a cluster of one instance and,
on the right hand side, is a

00:25:26.250 --> 00:25:27.750
cluster of eight.

00:25:27.750 --> 00:25:30.890
As you can see, as it's coming
up here, the green means that

00:25:30.890 --> 00:25:34.250
these VMs are actually running
and they're now just getting

00:25:34.250 --> 00:25:38.850
ready to be able to serve tiles
in a Mandelbrot set.

00:25:38.850 --> 00:25:43.150
So we basically are going to
show you some cool Mandelbrot

00:25:43.150 --> 00:25:44.980
fractals here.

00:25:44.980 --> 00:25:47.480
And so on the right hand side,
this eight machine

00:25:47.480 --> 00:25:48.770
cluster has shown up.

00:25:48.770 --> 00:25:51.260
And here on the left hand
side, we have the single

00:25:51.260 --> 00:25:52.160
instance has launched.

00:25:52.160 --> 00:25:54.410
So you see that's how fast
we can launch a bunch of

00:25:54.410 --> 00:25:56.260
instances on Compute Engine.

00:25:56.260 --> 00:26:02.480
And these are now two core
high CPU instances.

00:26:02.480 --> 00:26:03.400
So let me show the maps.

00:26:03.400 --> 00:26:07.910
So using the Maps API here to
basically just jump around and

00:26:07.910 --> 00:26:10.670
get some tiling behavior.

00:26:10.670 --> 00:26:15.510
And you can see that the right
hand side is a lot faster.

00:26:15.510 --> 00:26:17.740
Now I'm just a single user using
this, and so it doesn't

00:26:17.740 --> 00:26:20.090
demonstrate the full scalability
of this.

00:26:20.090 --> 00:26:23.900
And so if it was multiple users
hitting this at the same

00:26:23.900 --> 00:26:26.190
time, you'd see the scalability
much better.

00:26:26.190 --> 00:26:28.200
But it's pretty cool anyway.

00:26:28.200 --> 00:26:30.810
Ooh, this is one of
my favorites.

00:26:30.810 --> 00:26:32.460
This is pretty complex.

00:26:32.460 --> 00:26:36.520
This one takes much
longer to render.

00:26:36.520 --> 00:26:37.050
All right.

00:26:37.050 --> 00:26:40.290
So one of the interesting
things here is that the

00:26:40.290 --> 00:26:46.640
virtual machines are vanilla
images that we launch.

00:26:46.640 --> 00:26:50.550
And all of the configuration
data, all of the instructions

00:26:50.550 --> 00:26:53.230
for what they should be doing,
are passed into the virtual

00:26:53.230 --> 00:26:55.740
machines through our
metadata server.

00:26:55.740 --> 00:27:00.590
And so, in fact, since this is
Go program, we are actually

00:27:00.590 --> 00:27:03.650
passing the source code of the
Go program in one of metadata

00:27:03.650 --> 00:27:06.780
values, and that gets read by
the virtual machine as part of

00:27:06.780 --> 00:27:07.890
the start-up script.

00:27:07.890 --> 00:27:12.220
And it compiles it on the fly
and then renders these things.

00:27:12.220 --> 00:27:13.860
So that's an interesting
use of our metadata

00:27:13.860 --> 00:27:16.190
server right there.

00:27:16.190 --> 00:27:20.550
So let me show you what happens
if I go over to the

00:27:20.550 --> 00:27:21.250
Cloud Console.

00:27:21.250 --> 00:27:24.370
So the Cloud Console
is a new home--

00:27:24.370 --> 00:27:26.010
and, actually, let
me go back here--

00:27:26.010 --> 00:27:28.970
a new home for all of our Cloud
services, where you can

00:27:28.970 --> 00:27:31.480
manage and see all the resources
that you're using.

00:27:31.480 --> 00:27:32.900
You can see billing information
and all

00:27:32.900 --> 00:27:33.600
this kind of stuff.

00:27:33.600 --> 00:27:36.660
And so I'll just jump back into
the Compute Engine piece.

00:27:36.660 --> 00:27:40.400
And here, we see a list
of our instances.

00:27:40.400 --> 00:27:44.080
And so right now, I have eight
instances here, and then I

00:27:44.080 --> 00:27:46.950
have a single one over here.

00:27:46.950 --> 00:27:49.090
Now what I can do is I can
add virtual machines.

00:27:49.090 --> 00:27:51.820
And we've programmed this so I
can just click this button,

00:27:51.820 --> 00:27:54.620
and it'll start spinning up
virtual machines here.

00:27:57.190 --> 00:28:00.250
And one of the things that I'm
previewing for you here today

00:28:00.250 --> 00:28:02.350
is it says, using load balance
up at the top.

00:28:02.350 --> 00:28:05.860
And so this is an upcoming
feature of Compute Engine that

00:28:05.860 --> 00:28:10.730
we are showing you where it's a
load balancer as a service.

00:28:10.730 --> 00:28:12.680
And so adding virtual machines
is really easy.

00:28:12.680 --> 00:28:17.150
You just spin them up and add
them to your pool of servers

00:28:17.150 --> 00:28:21.090
for that work, and smoothly
you can remove machines.

00:28:21.090 --> 00:28:24.546
And so as I click around, those
things will be spun up.

00:28:24.546 --> 00:28:26.180
And I shouldn't have been
doing this while

00:28:26.180 --> 00:28:27.100
it was coming up.

00:28:27.100 --> 00:28:28.790
But as they get health checked--
that's what the

00:28:28.790 --> 00:28:30.330
white checkmark means--

00:28:30.330 --> 00:28:33.410
they basically get included
into that.

00:28:33.410 --> 00:28:36.140
Another fun thing I can do is I
can, of course, just go into

00:28:36.140 --> 00:28:38.700
any one of these instances.

00:28:38.700 --> 00:28:39.710
We can look at this,
and here, you can

00:28:39.710 --> 00:28:41.610
actually see the Go program.

00:28:41.610 --> 00:28:44.890
It's really quite long, but we
can't see the whole thing.

00:28:44.890 --> 00:28:46.500
It's one of the metadata
pieces.

00:28:46.500 --> 00:28:48.410
And I can just simulate
a failure.

00:28:48.410 --> 00:28:50.860
So I'm just going to delete
this instance.

00:28:50.860 --> 00:28:52.390
So we'll blow that away.

00:28:52.390 --> 00:28:56.790
And now, as I'm scrolling around
and doing stuff here,

00:28:56.790 --> 00:29:00.450
you'll notice that everything
still keeps working, and our

00:29:00.450 --> 00:29:02.390
application detects that
that machine is gone.

00:29:02.390 --> 00:29:05.570
So it highlights, updates the
little graphic we have there.

00:29:09.650 --> 00:29:12.440
And of course, I can just spin
everything down by hitting the

00:29:12.440 --> 00:29:16.710
Stop VMs right here.

00:29:16.710 --> 00:29:20.730
And as you see, in this view,
you'll start seeing these

00:29:20.730 --> 00:29:24.730
things terminate
and disappear.

00:29:24.730 --> 00:29:26.960
One other thing I want to point
out here is that you'll

00:29:26.960 --> 00:29:31.700
see a metric being shown on
this graph, which is CPU

00:29:31.700 --> 00:29:32.790
utilization.

00:29:32.790 --> 00:29:36.310
And so this is another preview
feature of an upcoming Compute

00:29:36.310 --> 00:29:40.700
Engine feature, which is a
monitoring API where we will

00:29:40.700 --> 00:29:44.760
expose a number of metrics out
of the virtual machine, and we

00:29:44.760 --> 00:29:48.200
will add to those metrics
over time as well.

00:29:48.200 --> 00:29:52.246
And now all our instances
have shut down.

00:29:52.246 --> 00:29:54.230
So I think that's it for
the demo, and we'll

00:29:54.230 --> 00:29:57.760
switch back to slides.

00:29:57.760 --> 00:30:03.430
[APPLAUSE]

00:30:03.430 --> 00:30:04.970
NAVNEET JONEJA: Thanks,
Martin.

00:30:04.970 --> 00:30:08.270
And thank you, Joe.

00:30:08.270 --> 00:30:11.230
So as I mentioned earlier, this
is an overview session.

00:30:11.230 --> 00:30:14.080
We haven't had time to go into
much technical depth about any

00:30:14.080 --> 00:30:16.740
of the features, but we wanted
to give you an overall flavor

00:30:16.740 --> 00:30:17.910
of Compute Engine.

00:30:17.910 --> 00:30:20.330
But we have deep dive sessions
into a number of things that

00:30:20.330 --> 00:30:21.640
we've talked about today.

00:30:21.640 --> 00:30:24.820
Speed, efficiency and control is
a deep dive session on our

00:30:24.820 --> 00:30:25.930
advanced networking stack.

00:30:25.930 --> 00:30:28.660
I highly encourage those of you
who are interested in this

00:30:28.660 --> 00:30:29.680
stuff to go attend.

00:30:29.680 --> 00:30:31.600
It's going to be a
really cool talk.

00:30:31.600 --> 00:30:33.820
We have a great talk on
persistent disk later this

00:30:33.820 --> 00:30:36.900
evening, actually, where they're
actually not only

00:30:36.900 --> 00:30:39.400
going to tell you how to use
persistent disk and talk about

00:30:39.400 --> 00:30:41.990
using it in an application, but
even give you a little bit

00:30:41.990 --> 00:30:45.080
of the behind the scenes glimpse
at the architecture

00:30:45.080 --> 00:30:46.980
and product itself.

00:30:46.980 --> 00:30:49.940
We have a session that is
focused on how you can build

00:30:49.940 --> 00:30:52.690
robust high availability
applications in the Cloud.

00:30:52.690 --> 00:30:56.640
It's called When Bad Things
Happen to Good Clusters.

00:30:56.640 --> 00:30:59.590
And then we have a Code Lab on
Friday morning, which will

00:30:59.590 --> 00:31:01.900
help you get your hands dirty
with Compute Engine, play

00:31:01.900 --> 00:31:07.450
around with some astronomical
data, and just get a feel for

00:31:07.450 --> 00:31:07.850
the products.

00:31:07.850 --> 00:31:10.190
Should be a really cool,
fun session.

00:31:10.190 --> 00:31:13.780
And, of course, we have some
time for questions today, but

00:31:13.780 --> 00:31:16.180
we'll also be at the Sandbox
from time to time.

00:31:16.180 --> 00:31:18.030
We have Office Hours tomorrow,
if you want to come by and

00:31:18.030 --> 00:31:20.920
chat one on one, ask any
question you have of us.

00:31:20.920 --> 00:31:23.880
We'll be available to you.

00:31:23.880 --> 00:31:27.910
So, one more thing, we're happy
to announce that Compute

00:31:27.910 --> 00:31:30.000
Engine is now available
to sign up online.

00:31:30.000 --> 00:31:32.330
We'll be flipping the switch
shortly after this talk.

00:31:32.330 --> 00:31:35.880
You can go online, sign up for
Compute Engine, play with it,

00:31:35.880 --> 00:31:37.920
spin up a virtual machine
for under $0.02 an hour.

00:31:37.920 --> 00:31:39.120
Tell us what you think.

00:31:39.120 --> 00:31:41.170
Tell us how we can make the
service better for you.

00:31:41.170 --> 00:31:43.050
We'd love to have you play
with the service, give us

00:31:43.050 --> 00:31:46.428
feedback, and tell us what
you need from it.

00:31:46.428 --> 00:31:53.280
[APPLAUSE]

00:31:53.280 --> 00:31:54.460
NAVNEET JONEJA: If you're
interested in playing with the

00:31:54.460 --> 00:31:56.560
two new preview features
Martin talked

00:31:56.560 --> 00:31:58.540
about earlier today--

00:31:58.540 --> 00:32:00.470
the load balancing capabilities
as well as the

00:32:00.470 --> 00:32:01.810
monitoring APIs--

00:32:01.810 --> 00:32:04.970
we actually have them
available to a

00:32:04.970 --> 00:32:06.580
small set of customers.

00:32:06.580 --> 00:32:08.890
And we'd love to have more
people come play with them,

00:32:08.890 --> 00:32:11.260
give us feedback, help evolve
these features, tell us what

00:32:11.260 --> 00:32:12.640
matters to you.

00:32:12.640 --> 00:32:14.290
So we have an early
access program.

00:32:14.290 --> 00:32:16.670
The URL is on the
screen up there.

00:32:16.670 --> 00:32:19.420
Come apply, give us feedback,
be the first to tell us what

00:32:19.420 --> 00:32:21.440
you like, tell us what
you don't like--

00:32:21.440 --> 00:32:22.840
especially what you
don't like--

00:32:22.840 --> 00:32:26.460
so we can make it
better for you.

00:32:26.460 --> 00:32:27.250
Thank you very much.

00:32:27.250 --> 00:32:27.560
MARTIN GANNHOLM: All right.

00:32:27.560 --> 00:32:28.060
Thank you.

00:32:28.060 --> 00:32:30.470
And I think we can take
questions now.

00:32:30.470 --> 00:32:32.640
I would like to invite to
Sebastian back up on stage,

00:32:32.640 --> 00:32:35.830
and also a Joe Beda, who is
the tech lead on Compute

00:32:35.830 --> 00:32:38.690
Engine, who will field the most

00:32:38.690 --> 00:32:41.354
difficult technical questions.

00:32:41.354 --> 00:32:43.350
JOE BEDA: So why did
the demo fail?

00:32:43.350 --> 00:32:45.540
Does anybody want to know?

00:32:45.540 --> 00:32:49.230
I was running it on an unpaid
App Engine instance, and I hit

00:32:49.230 --> 00:32:50.170
a quota limit.

00:32:50.170 --> 00:32:54.440
And so I entered my credit card
up here frantically while

00:32:54.440 --> 00:32:55.610
you guys all watched.

00:32:55.610 --> 00:32:58.550
[LAUGHTER AND APPLAUSE]

00:32:58.550 --> 00:33:00.590
JOE BEDA: And in that vein, I'm
going to be hosting the

00:33:00.590 --> 00:33:02.250
robustness talk later.

00:33:02.250 --> 00:33:08.570
[LAUGHTER]

00:33:08.570 --> 00:33:09.180
MARTIN GANNHOLM: All right.

00:33:09.180 --> 00:33:10.900
We can start with you.

00:33:10.900 --> 00:33:12.605
AUDIENCE: Maybe this is a
question better for the

00:33:12.605 --> 00:33:15.260
persistent disk session, but
I'll just ask it anyways.

00:33:15.260 --> 00:33:19.350
What's the consistency semantics
associated with

00:33:19.350 --> 00:33:20.990
multiple Google engines
writing to the

00:33:20.990 --> 00:33:21.820
same persistent disk?

00:33:21.820 --> 00:33:24.610
Let's say they are writing
to the same file.

00:33:24.610 --> 00:33:27.140
MARTIN GANNHOLM: So you can only
attach a persistent disk,

00:33:27.140 --> 00:33:29.430
a read/write, to a single
instance at a time.

00:33:29.430 --> 00:33:34.100
We do have the capability of
mounting read only, a single

00:33:34.100 --> 00:33:36.630
persistent disk, to many
VMs at the same time.

00:33:36.630 --> 00:33:37.820
But that's in read only mode.

00:33:37.820 --> 00:33:40.450
So you can share data across
them that way.

00:33:40.450 --> 00:33:42.340
JOE BEDA: And you're free to do
something like run an NFS

00:33:42.340 --> 00:33:44.720
server on an instance hosting
a persistent disk and then

00:33:44.720 --> 00:33:46.840
export that to other virtual
machines, if you need to share

00:33:46.840 --> 00:33:48.680
a file system.

00:33:48.680 --> 00:33:51.620
SEBASTIAN STADIL: In our
benchmarks we've run, there's

00:33:51.620 --> 00:33:55.240
no degradation of performance
when you're reading it from

00:33:55.240 --> 00:33:57.160
multiple servers.

00:33:57.160 --> 00:33:58.986
AUDIENCE: Thank you.

00:33:58.986 --> 00:33:59.630
MARTIN GANNHOLM: All right.

00:33:59.630 --> 00:34:00.300
Over here.

00:34:00.300 --> 00:34:05.090
AUDIENCE: What is your plans
with Google's customer support

00:34:05.090 --> 00:34:07.840
surrounding this whole thing,
given the history of Google

00:34:07.840 --> 00:34:10.330
and customer support?

00:34:10.330 --> 00:34:12.719
MARTIN GANNHOLM: So we've
already launched the ability

00:34:12.719 --> 00:34:15.500
to get premium support.

00:34:15.500 --> 00:34:17.340
We have a gold support
program.

00:34:17.340 --> 00:34:18.825
We launched that about
a month and a half or

00:34:18.825 --> 00:34:20.070
maybe two months ago.

00:34:20.070 --> 00:34:22.310
So you can actually get
developer support, talk to a

00:34:22.310 --> 00:34:24.380
real person on the phone, as
well as submit tickets.

00:34:24.380 --> 00:34:26.409
So that's already a capability
you can have.

00:34:26.409 --> 00:34:30.480
We're also very responsive to
feedback, and we watch Stack

00:34:30.480 --> 00:34:31.900
Overflow and stuff as well.

00:34:31.900 --> 00:34:34.139
So if you have sort of
non-urgent development

00:34:34.139 --> 00:34:35.739
questions, we're quite
responsive.

00:34:38.868 --> 00:34:39.320
MARTIN GANNHOLM: All right.

00:34:39.320 --> 00:34:40.080
This side.

00:34:40.080 --> 00:34:42.719
AUDIENCE: You mentioned the
performance difference between

00:34:42.719 --> 00:34:46.350
a compute Cloud and other
Cloud providers.

00:34:46.350 --> 00:34:49.250
But what's the performance
difference, if there is any,

00:34:49.250 --> 00:34:55.420
between the Compute server
and App Engine?

00:34:55.420 --> 00:34:56.389
NAVNEET JONEJA: That's
a great question.

00:34:56.389 --> 00:34:58.850
So I think you're comparing
apples and oranges.

00:34:58.850 --> 00:35:00.850
Right?

00:35:00.850 --> 00:35:02.860
There's no such thing as a
Compute Engine performance.

00:35:02.860 --> 00:35:03.430
Right?

00:35:03.430 --> 00:35:06.010
You deploy Apache,
you deploy no JS.

00:35:06.010 --> 00:35:07.210
You'd deploy something else.

00:35:07.210 --> 00:35:08.300
Performance varies, right?

00:35:08.300 --> 00:35:10.240
It depends on the entire
stack you build.

00:35:10.240 --> 00:35:12.580
With App Engine you get a fully
managed stack where

00:35:12.580 --> 00:35:14.740
performance is taken care
of you, scalability is

00:35:14.740 --> 00:35:15.910
taken care for you.

00:35:15.910 --> 00:35:18.940
So think about the platform
versus the infrastructure.

00:35:18.940 --> 00:35:21.190
So you can do a lot of things
with Compute Engine, but if

00:35:21.190 --> 00:35:24.860
you write bad code, it
won't do very well.

00:35:24.860 --> 00:35:26.000
So you just can't
compare the two.

00:35:26.000 --> 00:35:27.740
It's not a fair comparison.

00:35:27.740 --> 00:35:29.510
MARTIN GANNHOLM: We
invite you to try.

00:35:29.510 --> 00:35:32.620
If you have workloads that could
be suited for either,

00:35:32.620 --> 00:35:36.630
then if you want to manage the
infrastructure and you need

00:35:36.630 --> 00:35:38.370
that control, then
Compute Engine is

00:35:38.370 --> 00:35:39.340
probably your choice.

00:35:39.340 --> 00:35:41.770
But if you would be happy with
having all that managed for

00:35:41.770 --> 00:35:44.240
you, and you get the performance
and the price

00:35:44.240 --> 00:35:45.100
points and everything else--

00:35:45.100 --> 00:35:48.450
I mean, all the different
factors are what you want--

00:35:48.450 --> 00:35:50.010
then you should make
that trade off.

00:35:50.010 --> 00:35:53.550
So we offer multiple products
so you can use whatever is

00:35:53.550 --> 00:35:57.045
best in your particular
situation.

00:35:57.045 --> 00:35:57.480
All right.

00:35:57.480 --> 00:35:57.920
Over here.

00:35:57.920 --> 00:35:58.910
AUDIENCE: Hi.

00:35:58.910 --> 00:36:02.420
You mentioned that security was
sort of like a major point

00:36:02.420 --> 00:36:03.940
of Google Compute Engine.

00:36:03.940 --> 00:36:08.180
I was wondering when you might
be going through any of the

00:36:08.180 --> 00:36:09.250
certifications.

00:36:09.250 --> 00:36:10.500
For example, FedRAMP?

00:36:12.890 --> 00:36:16.360
NAVNEET JONEJA: So the ISO27k
is probably one of the most

00:36:16.360 --> 00:36:19.700
common certifications around
information security.

00:36:19.700 --> 00:36:22.600
And I didn't mention it today,
but we actually have recently

00:36:22.600 --> 00:36:25.700
gotten ISO27k certification.

00:36:25.700 --> 00:36:27.150
So that's one of the
areas we've done.

00:36:27.150 --> 00:36:29.520
We're also looking at additional
areas where

00:36:29.520 --> 00:36:31.370
certification matters to our
customers, and you'll hear

00:36:31.370 --> 00:36:34.390
more about that in the days
and months to come.

00:36:34.390 --> 00:36:37.110
AUDIENCE: Anything specifically
on FedRAMP?

00:36:37.110 --> 00:36:38.850
NAVNEET JONEJA: I am not sure
about that, but if you come

00:36:38.850 --> 00:36:40.720
and find me at the Sandbox,
I'll get you an answer.

00:36:40.720 --> 00:36:42.232
AUDIENCE: Thank you.

00:36:42.232 --> 00:36:43.025
MARTIN GANNHOLM: All right.

00:36:43.025 --> 00:36:43.380
Over here.

00:36:43.380 --> 00:36:45.600
AUDIENCE: If I want to connect
from Google Compute Engine

00:36:45.600 --> 00:36:48.040
instance to the Cloud Datastore
product, is that

00:36:48.040 --> 00:36:51.220
going to have better latency
significantly compared to

00:36:51.220 --> 00:36:55.020
connecting to that from
another Cloud?

00:36:55.020 --> 00:36:58.120
JOE BEDA: In general, connecting
from Compute Engine

00:36:58.120 --> 00:37:00.040
to other Google services,
you're going to get the

00:37:00.040 --> 00:37:02.440
fastest connection from
within Compute Engine.

00:37:02.440 --> 00:37:03.690
Not everything is hosted
everywhere.

00:37:03.690 --> 00:37:05.780
These things have physical
locations, and there's the

00:37:05.780 --> 00:37:06.660
speed of light.

00:37:06.660 --> 00:37:09.200
But we're continually working
on optimizing the connection

00:37:09.200 --> 00:37:11.960
between Compute Engine and other
Google services, whether

00:37:11.960 --> 00:37:14.030
they be Cloud services
or other APIs

00:37:14.030 --> 00:37:16.770
or services at Google.

00:37:16.770 --> 00:37:19.470
MARTIN GANNHOLM: And as you
access other Google services,

00:37:19.470 --> 00:37:21.720
your traffic stays on
the Google network.

00:37:21.720 --> 00:37:26.770
So you won't be subject to the
variance in the general

00:37:26.770 --> 00:37:30.498
internet in those
cases as well.

00:37:30.498 --> 00:37:30.980
All right.

00:37:30.980 --> 00:37:31.950
Over here.

00:37:31.950 --> 00:37:35.680
AUDIENCE: So beyond Debian and
CentOS, anything for Ubuntu or

00:37:35.680 --> 00:37:38.126
Microsoft OS's?

00:37:38.126 --> 00:37:40.140
NAVNEET JONEJA: So right now,
our focus is on working with

00:37:40.140 --> 00:37:43.010
the community to provide
community supported

00:37:43.010 --> 00:37:46.360
distributions as part
of our images.

00:37:46.360 --> 00:37:49.600
We've worked with both the
Debian and the CentOS

00:37:49.600 --> 00:37:52.010
communities to bring those
images to Compute Engine.

00:37:52.010 --> 00:37:54.880
We'd be happy to engage with
any of the other free Linux

00:37:54.880 --> 00:37:58.340
providers who want to make the
images available as part of

00:37:58.340 --> 00:38:01.300
our default images in
Compute Engine.

00:38:01.300 --> 00:38:04.160
In terms of Microsoft, we've
heard that from customers.

00:38:04.160 --> 00:38:06.270
We'd love to chat with you more
about your use case and

00:38:06.270 --> 00:38:08.825
see where that falls in
our priority list.

00:38:08.825 --> 00:38:09.290
AUDIENCE: Great.

00:38:09.290 --> 00:38:10.524
Thank you.

00:38:10.524 --> 00:38:11.520
AUDIENCE: Hi.

00:38:11.520 --> 00:38:16.010
My question is, is the App
Engine Datastore being renamed

00:38:16.010 --> 00:38:18.960
or re-branded as Cloud
Datastore?

00:38:18.960 --> 00:38:23.700
If the answer is yes, how do I
get my existing data that is

00:38:23.700 --> 00:38:26.070
being accessed by an App Engine
application to be

00:38:26.070 --> 00:38:29.810
accessed from a Google Compute
Engine application?

00:38:29.810 --> 00:38:32.840
If the answer is no, how do I
copy the data from an App

00:38:32.840 --> 00:38:34.830
Engine Datastore to the
Cloud Datastore?

00:38:37.360 --> 00:38:38.610
JOE BEDA: I actually
don't know.

00:38:41.600 --> 00:38:43.290
Why don't you grab us
afterwards, and we'll find the

00:38:43.290 --> 00:38:44.760
right people who can give
you that information.

00:38:44.760 --> 00:38:45.050
AUDIENCE: I'll hang it on.

00:38:45.050 --> 00:38:45.260
Thank you.

00:38:45.260 --> 00:38:46.620
JOE BEDA: Is there a
session on the app?

00:38:46.620 --> 00:38:46.850
MARTIN GANNHOLM: I think
I know what it is.

00:38:46.850 --> 00:38:48.290
Yes, there's definitely a
session on Datastore.

00:38:48.290 --> 00:38:48.580
JOE BEDA: Yeah.

00:38:48.580 --> 00:38:51.560
And I think, definitely go to
that session, and they're

00:38:51.560 --> 00:38:54.920
going to go into the Cloud
Datastore a lot deeper.

00:38:54.920 --> 00:38:56.680
MARTIN GANNHOLM: But you can
also find us and we can--

00:38:56.680 --> 00:38:57.750
JOE BEDA: We can find
the right person.

00:38:57.750 --> 00:38:59.900
MARTIN GANNHOLM: I think I know
the answer, and I think

00:38:59.900 --> 00:39:00.630
it's the answer you want.

00:39:00.630 --> 00:39:02.210
But we need to verify.

00:39:02.210 --> 00:39:02.820
AUDIENCE: I'll hang it on.

00:39:02.820 --> 00:39:05.210
Thank you.

00:39:05.210 --> 00:39:08.580
AUDIENCE: You talked about
the advanced routing.

00:39:08.580 --> 00:39:12.250
Is it very similar to your
favorite competitors

00:39:12.250 --> 00:39:12.710
[INAUDIBLE]

00:39:12.710 --> 00:39:15.350
private Cloud, or it's
not there yet?

00:39:15.350 --> 00:39:16.460
NAVNEET JONEJA: Advanced
routing--

00:39:16.460 --> 00:39:20.260
so, in general, I will think
of advanced routing-- so if

00:39:20.260 --> 00:39:21.730
you've looked at the
abstractions of the Compute

00:39:21.730 --> 00:39:23.835
Engine at all, there's always
been this hint that there's

00:39:23.835 --> 00:39:25.580
this virtual router behind
the scenes, this

00:39:25.580 --> 00:39:26.480
software defined router.

00:39:26.480 --> 00:39:30.260
We never gave any knobs and sort
of ways to configure it.

00:39:30.260 --> 00:39:32.190
And so advanced routing actually
makes that virtual

00:39:32.190 --> 00:39:33.620
router configurable by you.

00:39:33.620 --> 00:39:36.110
So it lets you do all those
things, but it's not a hosted

00:39:36.110 --> 00:39:38.940
service per se, that does
higher level things.

00:39:38.940 --> 00:39:40.910
It gives you the tools so you
can do the stuff yourself.

00:39:40.910 --> 00:39:45.920
So it's very powerful, but it
takes some work on your part.

00:39:45.920 --> 00:39:47.830
But you can do a lot with it.

00:39:47.830 --> 00:39:48.770
Does that answer
your question?

00:39:48.770 --> 00:39:49.410
AUDIENCE: Yeah.

00:39:49.410 --> 00:39:51.680
NAVNEET JONEJA: Thank you.

00:39:51.680 --> 00:39:53.340
SEBASTIAN STADIL: I'd
like to add to that.

00:39:53.340 --> 00:39:56.146
I assume that you're referring
to some service that starts

00:39:56.146 --> 00:39:59.750
with a V. That particular
service is very complex.

00:39:59.750 --> 00:40:01.810
Compared to that, routing is
very easy to work with.

00:40:01.810 --> 00:40:03.100
That's been our experience.

00:40:03.100 --> 00:40:03.730
AUDIENCE: OK.

00:40:03.730 --> 00:40:04.540
Thank you.

00:40:04.540 --> 00:40:05.570
NAVNEET JONEJA: So
I apologize.

00:40:05.570 --> 00:40:06.780
We are out of time.

00:40:06.780 --> 00:40:09.530
We'll just head to the back,
and you can chat with us

00:40:09.530 --> 00:40:10.870
outside if you have any
more questions.

00:40:10.870 --> 00:40:11.360
MARTIN GANNHOLM: All right.

00:40:11.360 --> 00:40:11.580
NAVNEET JONEJA: Thank you.

00:40:11.580 --> 00:40:12.830
MARTIN GANNHOLM: Thank
you again for coming.

00:40:12.830 --> 00:40:18.637
[APPLAUSE]

