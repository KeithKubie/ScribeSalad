WEBVTT
Kind: captions
Language: en-GB

00:00:00.000 --> 00:00:04.110
I have to say, depressingly, and let
me say this right here and now: I do not

00:00:04.110 --> 00:00:09.090
own Adobe shares; I'm not a marketing
executive for Adobe, but the other day I

00:00:09.090 --> 00:00:15.690
did actually save a PowerPoint
presentation - something like 370

00:00:15.690 --> 00:00:17.789
megabytes in total.

00:00:17.789 --> 00:00:24.630
I'd used the "Save As PDF", available as
standard in PowerPoint, and it reduced it

00:00:24.630 --> 00:00:32.009
from 370 to all of 210 Mbytes. Wow! And it
was a PDF and it viewed fine. I then put

00:00:32.009 --> 00:00:37.110
it through PDF Writer.  PDF Writer of
course was a paid-for option - a pseudo-

00:00:37.110 --> 00:00:42.809
printer driver - and it went from 370
MB to 10 MB,  which I think

00:00:42.809 --> 00:00:48.239
says something about the willingness to
call upon compression technologies and

00:00:48.239 --> 00:00:55.530
the expertise in preparing good PDFs.

00:00:56.030 --> 00:01:02.690
Let's just backtrack a little bit and remind 
ourselves of the famous launch of PostScript 
in early 1985

00:01:02.690 --> 00:01:08.630
John Warnock, Steve Jobs all that. And the
example they used - we've got it here -

00:01:08.630 --> 00:01:14.600
was John Warnock's original PostScript
which, when imaged and rendered, produced

00:01:14.600 --> 00:01:20.390
this "Supplementary Income Tax" form. But
it was too slow for Steve Jobs to show

00:01:20.390 --> 00:01:21.799
at the launch.

00:01:21.799 --> 00:01:25.820
We've done some stuff on this. If you
unroll the loops, flatten the code, then

00:01:25.820 --> 00:01:31.070
you can get something that works in
about 25 seconds. And that's what they did.

00:01:31.070 --> 00:01:34.310
Now i know many of you will say: "Well,
that's a good start but it's not enough.

00:01:34.310 --> 00:01:38.300
What about this stuff you've gone on
in the past about - lossy and lossless

00:01:38.300 --> 00:01:45.649
compression? Yes. Obviously, in PDF, many of
you will know, you can do lossless LZ 

00:01:45.649 --> 00:01:50.539
or LZW type compression on text. Fine -
it's there, it's available. And, yes, in

00:01:50.539 --> 00:01:54.590
images you are certainly going to need
to be able to do compression of the JPEG

00:01:54.590 --> 00:01:59.569
sort and to have it coped with by the
PostScript - and indeed the PDF -  'image'

00:01:59.569 --> 00:02:05.210
operator. So compression is of the order
of the day,  over and beyond abbreviating

00:02:05.210 --> 00:02:10.040
things. if this is the glimmerings of PDF
why did it take so long for PDF to

00:02:10.040 --> 00:02:11.030
actually emerge?  Well ...

00:02:11.030 --> 00:02:16.130
&gt;&gt; Sean:  How long ... what are we talking ...
&gt;&gt; DFB: We're talking from 1985 when this

00:02:16.130 --> 00:02:23.030
was done and the actual announcement of
PDF and Acrobat its viewer software, was

00:02:23.030 --> 00:02:29.060
late '92 early '93. So we're looking at
seven years aren't we, there? More like

00:02:29.060 --> 00:02:32.060
eight, probably, by the time you're finished.

00:02:32.060 --> 00:02:38.840
Why did it take so long? And the answer is simple.
You had to wait for people's desktop

00:02:38.840 --> 00:02:42.709
workstations to become powerful enough
to handle all this.

00:02:43.250 --> 00:02:47.720
The common factor between the two [i.e. PostScript and PDF]
is what's called the PostScript Graphics Model

00:02:47.720 --> 00:02:55.010
which is magic. But remember, back in '85,
the only computer in the room powerful

00:02:55.010 --> 00:02:59.570
enough to render PostScript was the
LaserWriter. The Macs were utterly

00:02:59.570 --> 00:03:00.830
incapable of doing

00:03:00.830 --> 00:03:06.620
it. A standard 9-inch Mac came with 128K.
Just hopeless! And they

00:03:06.620 --> 00:03:11.870
were so slow as well. Even slower than the 
laser-printer. So, there we are then, you realize

00:03:11.870 --> 00:03:16.430
that if PostScript was going to develop
away from being just something that

00:03:16.430 --> 00:03:22.130
ended up being printed out on paper, into
being something renderable on a big screen,

00:03:22.130 --> 00:03:27.320
well for a start your screen's got to be
capable of holding ... rendering ....  US

00:03:27.320 --> 00:03:31.220
Letter size, or A4 size, pages.

00:03:31.220 --> 00:03:37.490
OK - relate that back to a tiny 9-inch
Mac screen and the answer is: "Well, you'll

00:03:37.490 --> 00:03:40.790
have to wait for that technology to
develop". And you'll have to be prepared

00:03:40.790 --> 00:03:47.480
to pay a fortune for your Apollo or Sun
workstations for the 70 people in your

00:03:47.480 --> 00:03:53.090
print room, or whatever it is,  to use. But
gradually, slowly but surely, it did come

00:03:53.090 --> 00:03:59.720
along and of course by 1990 there was no question

00:03:59.720 --> 00:04:04.970
PostScript had won the high-end [quality typesetting]
war - completely and totally. So, what was their

00:04:04.970 --> 00:04:11.269
recommended means, if you were a
PostScript devotee, to get across to PDF

00:04:11.269 --> 00:04:16.940
as a first approximation? And, for the
sake of argument, we'll say, maybe, it was

00:04:16.940 --> 00:04:22.760
Microsoft Word, or something like that
here. And up until now, if you want

00:04:22.760 --> 00:04:29.360
high-quality output - let's use ellipses
for stuff that's in printable formats. So

00:04:29.360 --> 00:04:32.360
we'll say PS here.

00:04:32.360 --> 00:04:35.960
Yes, you could get Word to produce
PostScript. You could send that

00:04:35.960 --> 00:04:42.380
PostScript off [to an] Apple LaserWriter, or some
other laser-writer that actually has got

00:04:42.380 --> 00:04:44.030
PostScript inside it.

00:04:44.030 --> 00:04:47.600
Adobe were making a fair bit of nice
money, thank you very much,

00:04:47.600 --> 00:04:52.190
supplying proper PostScript to go into
laser-writers, right through to laser

00:04:52.190 --> 00:04:56.780
setters at the very high [quality] end. The 
new feature now coming along, was to say well

00:04:56.780 --> 00:05:05.270
if you put this PostScript into another
piece of Adobe software, called Distiller,

00:05:05.270 --> 00:05:11.110
this will turn it into this new
and wonderful PDF.

00:05:11.110 --> 00:05:16.270
Now you've got to give people a means
of viewing it for free

00:05:16.780 --> 00:05:23.020
- the famous Acrobat - but you have to pay
if you want Distiller. So the next

00:05:23.020 --> 00:05:28.090
question then was: "Yes, I'm a loyal PostScript
person but that Distiller is costing a

00:05:28.090 --> 00:05:32.950
fortune, Adobe!  I'm gonna find somebody
else who can do it for me". And, of course,

00:05:32.950 --> 00:05:36.880
there were lots and lots of people who
would do you a Distiller substitute.

00:05:36.880 --> 00:05:38.260
It is not easy.

00:05:38.260 --> 00:05:43.330
You have got to be able to take the most
outrageously abominable PostScript and

00:05:43.330 --> 00:05:48.610
not crash [when converting to PDF]. And I remember 
saying to an Adobe person at the time I said: "What's

00:05:48.610 --> 00:05:52.480
wrong with a lot of these clones?" He said:
"They get everything right but the thing they

00:05:52.480 --> 00:05:59.050
can't handle is fonts".  He said: "Well
first of all y'know you've got to license

00:05:59.050 --> 00:06:03.610
them? We've got permission from Linotype
to use their stuff but if you've got to use

00:06:03.610 --> 00:06:07.450
clone fonts and then you're in trouble. Do
they quite match what was there on the

00:06:07.450 --> 00:06:12.490
original? What the intention was?" And
indeed fonts has always been a problem

00:06:12.490 --> 00:06:17.830
in this.  I once asked Bob Wulff the leader
of the team that developed PDF, Distiller

00:06:17.830 --> 00:06:23.380
and Acrobat Reader. I  said: "Bob what were
your six greatest challenges in 

00:06:23.380 --> 00:06:27.010
developing PDF?". And he said: "Dave that's easy,

00:06:27.010 --> 00:06:31.450
fonts, fonts, fonts, fonts, fonts and fonts. 
In that order!

00:06:31.450 --> 00:06:37.360
Those were my six biggest challenges"
So, anyway the obvious question to ask,

00:06:37.360 --> 00:06:42.910
since this is going to cost you a lot of
money, is to say: "Well,look,  Word needs to

00:06:42.910 --> 00:06:51.970
get into this PDF form now, doesn't it? To
go ... y'know be compliant?" Why not take a

00:06:51.970 --> 00:06:54.190
flying leap around here

00:06:54.190 --> 00:06:58.900
cut out the middleman, as it were. You
don't need to go through PostScript any more.

00:06:58.900 --> 00:07:04.720
Word, or any other app, could use a
printer driver - a standard printer driver

00:07:04.720 --> 00:07:08.260
type [of] thing. Except it's not really
directly driving a printer, it's producing

00:07:08.260 --> 00:07:14.890
a PDF file. Well they did - in very short order.
They came out with PDF Writer and again

00:07:14.890 --> 00:07:21.980
opportunity for third parties. PDF Writer,
of course, was a paid-for option

00:07:21.980 --> 00:07:26.930
to get this PDF. It was not free, like
Reader. So a lot of people said: "We can do

00:07:26.930 --> 00:07:30.830
a PDF writer that's good enough!" And some
were better than others

00:07:30.830 --> 00:07:37.160
inevitably. So to sum up, then, this is the
nature of the PDF story.

00:07:37.160 --> 00:07:43.070
It took a long time to get itself
established but now it really is a 

00:07:43.070 --> 00:07:50.570
de facto standard and a very, very successful 
one too [and now an ISO standard]. The only big conundrum

00:07:50.570 --> 00:07:58.850
still left and y'know for those of 
you who've seen my HTML video I

00:07:58.850 --> 00:08:06.080
can only come back to this - that Tim
Berners-Lee's comment to me about: "We've

00:08:06.080 --> 00:08:12.620
got to find some way to marry exact
representation and high-quality

00:08:12.620 --> 00:08:17.810
typography with the flexibility to
reflow stuff. And we're still, in a way,

00:08:17.810 --> 00:08:18.980
poles apart

00:08:18.980 --> 00:08:26.180
I mean HTML, despite CSS, cannot really
aspire to the same standards of

00:08:26.180 --> 00:08:34.910
typographic excellence as PDF can. And
yet PDF is exact but rigid. Sometimes

00:08:34.910 --> 00:08:40.729
people try and attempt to reflow PDF and
its rarely successful. It's certainly not

00:08:40.729 --> 00:08:46.370
easy. So I think John Warnock's comment - I
just wish he would do something about

00:08:46.370 --> 00:08:51.110
marrying these two views of the world - is
yeah, one of the advantages of PDF and

00:08:51.110 --> 00:08:58.010
PostScript is you can say: "Draw me on my
screen a line that is exactly one inch

00:08:58.010 --> 00:09:03.140
long". And it doesn't matter whether it's
a 72 dpi screen or whether it's a piece

00:09:03.140 --> 00:09:08.060
of bromide imaged at 2,000 dots per
inch. That same command in either

00:09:08.060 --> 00:09:10.760
PostScript or PDF 'draw me a line one 
inch long'.

00:09:10.760 --> 00:09:15.860
Regardless of the resolution - get your ruler
out - it will be 1 inch long.  HTML [with no CSS] can't

00:09:15.860 --> 00:09:17.939
do that!

