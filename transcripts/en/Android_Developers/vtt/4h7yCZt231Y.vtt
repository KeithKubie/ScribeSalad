WEBVTT
Kind: captions
Language: en

00:00:00.500 --> 00:00:02.520
IAN LAKE: A computer
file is a resource

00:00:02.520 --> 00:00:04.430
for storing information.

00:00:04.430 --> 00:00:06.760
Almost all the files
you're used to working with

00:00:06.760 --> 00:00:10.730
are openable files-- files
with a direct representation

00:00:10.730 --> 00:00:12.270
in bytes.

00:00:12.270 --> 00:00:14.460
But there's actually
another kind of file--

00:00:14.460 --> 00:00:18.470
a virtual file, a new part of
the Storage Access Framework

00:00:18.470 --> 00:00:20.970
added in API 24.

00:00:20.970 --> 00:00:23.520
Now, on Android,
a traditional file

00:00:23.520 --> 00:00:26.020
is known as an openable file.

00:00:26.020 --> 00:00:29.410
This comes from the fact that
you can open a file stream

00:00:29.410 --> 00:00:31.980
and get directly at
the bytes that make up

00:00:31.980 --> 00:00:34.670
the file via something
like openFileDescriptor

00:00:34.670 --> 00:00:37.170
or openInputStream.

00:00:37.170 --> 00:00:39.680
And in most cases when
you're using something

00:00:39.680 --> 00:00:43.060
like getContent or
ActionOpenDocument,

00:00:43.060 --> 00:00:45.150
this is exactly what you'd want.

00:00:45.150 --> 00:00:49.980
So way back in API 1, Android
added CATEGORY_OPENABLE.

00:00:49.980 --> 00:00:51.980
You'd add this to your
intent, and then you

00:00:51.980 --> 00:00:55.410
could ensure that what you
got back could be opened.

00:00:55.410 --> 00:00:59.060
Virtual files will appear,
but they won't be selectable.

00:00:59.060 --> 00:01:00.820
If you're already
using that category,

00:01:00.820 --> 00:01:02.870
never get a virtual
file, and you

00:01:02.870 --> 00:01:05.160
don't need to worry about them.

00:01:05.160 --> 00:01:07.180
But if you don't include
CATEGORY_OPENABLE,

00:01:07.180 --> 00:01:10.230
the user will be able to
select both openable files

00:01:10.230 --> 00:01:12.170
and virtual files.

00:01:12.170 --> 00:01:16.010
In both cases, you'll be able
to get the document's metadata

00:01:16.010 --> 00:01:18.870
and use other documents
provider APIs, such as getting

00:01:18.870 --> 00:01:20.940
a thumbnail, if supported.

00:01:20.940 --> 00:01:24.570
But beyond that, you'll need
to handle virtual files a bit

00:01:24.570 --> 00:01:26.200
differently.

00:01:26.200 --> 00:01:28.900
You can determine if you
have a virtual document

00:01:28.900 --> 00:01:32.750
by using a method like this,
which looks at the column

00:01:32.750 --> 00:01:35.120
flags for the URI.

00:01:35.120 --> 00:01:38.050
That FLAG_VIRTUAL_DOCUMENT
is the indicator

00:01:38.050 --> 00:01:40.780
which marks a virtual file.

00:01:40.780 --> 00:01:43.040
With this information,
you can also

00:01:43.040 --> 00:01:46.900
take advantage of one of
API 24's other new features,

00:01:46.900 --> 00:01:50.860
alternate MIME types for the
Storage Access Framework.

00:01:50.860 --> 00:01:53.700
Think of this as
on-the-fly transcoding

00:01:53.700 --> 00:01:58.310
or exporting a virtual file into
an openable file, such as a PDF

00:01:58.310 --> 00:01:59.720
file.

00:01:59.720 --> 00:02:03.550
GetStreamTypes determines
what openable MIME types

00:02:03.550 --> 00:02:05.890
are available--
say, checking if we

00:02:05.890 --> 00:02:08.720
can get an image from the file.

00:02:08.720 --> 00:02:12.130
Then use
openTypedAssetFileDescriptor

00:02:12.130 --> 00:02:17.540
and createInputStream to get
an input stream for the file.

00:02:17.540 --> 00:02:19.160
This is really
useful if you're just

00:02:19.160 --> 00:02:21.230
wanting a one-time
export of a file,

00:02:21.230 --> 00:02:24.030
say, to send as an
email attachment.

00:02:24.030 --> 00:02:27.290
But for local viewing
and editing of the file,

00:02:27.290 --> 00:02:30.530
you'll need to rely on the app
that provided the virtual file

00:02:30.530 --> 00:02:32.400
in the first place.

00:02:32.400 --> 00:02:36.060
In those cases, the virtual
file serves more just

00:02:36.060 --> 00:02:41.030
as a link to a file, allowing
you to use ACTION_VIEW intent

00:02:41.030 --> 00:02:43.980
to open the file in
the native app, which

00:02:43.980 --> 00:02:45.700
would know how to
interact with whatever

00:02:45.700 --> 00:02:49.460
crazy internal format or
database or cloud storage

00:02:49.460 --> 00:02:53.280
system the document might
have under the hood.

00:02:53.280 --> 00:02:56.150
So for developers interested
in using virtual files

00:02:56.150 --> 00:02:58.600
in your documents
provider, you want

00:02:58.600 --> 00:03:01.160
to make sure you add the
VIRTUAL_DOCUMENT flag

00:03:01.160 --> 00:03:03.370
to each virtual document.

00:03:03.370 --> 00:03:05.660
Then make sure you
have an activity that

00:03:05.660 --> 00:03:08.900
supports ACTION_VIEW
for the MIME types you

00:03:08.900 --> 00:03:11.810
use on those virtual documents.

00:03:11.810 --> 00:03:16.240
That way, there's at least one
app that can render the file.

00:03:16.240 --> 00:03:18.560
And if you want to provide
an alternate MIME type that

00:03:18.560 --> 00:03:21.800
is openable, which is
strongly recommended,

00:03:21.800 --> 00:03:27.070
override getDocumentStreamTypes
and openTypedDocument.

00:03:27.070 --> 00:03:29.620
Just make sure to call
the super implementations

00:03:29.620 --> 00:03:31.490
for non-virtual files.

00:03:31.490 --> 00:03:34.090
This ensures that every
client app can call it,

00:03:34.090 --> 00:03:36.780
whether explicitly checking
whether it's a virtual file

00:03:36.780 --> 00:03:38.390
or not.

00:03:38.390 --> 00:03:40.090
So make sure that
you're explicitly

00:03:40.090 --> 00:03:42.520
including
CATEGORY_OPENABLE if you

00:03:42.520 --> 00:03:45.960
want to ensure openable files,
and handling virtual files

00:03:45.960 --> 00:03:48.350
correctly in every other case.

00:03:48.350 --> 00:03:51.150
Check out the links in the
description for all the details

00:03:51.150 --> 00:03:53.900
as you continue to
build better apps.

00:03:53.900 --> 00:03:56.950
[MUSIC PLAYING]

