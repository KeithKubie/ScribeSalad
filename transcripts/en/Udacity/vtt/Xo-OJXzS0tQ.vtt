WEBVTT
Kind: captions
Language: en

00:00:00.280 --> 00:00:06.860
The idea of a join has its roots in SQL, a declarative database language.

00:00:08.029 --> 00:00:12.000
If you're not familiar with databases or SQL, don't worry.

00:00:13.210 --> 00:00:16.530
If you are however, hopefully you can make some connections to

00:00:16.530 --> 00:00:18.690
previous concepts you are familiar with.

00:00:18.690 --> 00:00:23.230
Joins emerged out of relational database theory as a way to

00:00:23.230 --> 00:00:27.790
associate two different tables or spreadsheets.

00:00:27.790 --> 00:00:31.700
Now to understand what a join is, imagine we have two tables.

00:00:31.700 --> 00:00:35.520
Or in this case, you can think of them as CSVs or TSVs.

00:00:35.520 --> 00:00:40.520
Wherein the first table, in this case, the employee table, each row represents

00:00:40.520 --> 00:00:45.150
an employee's last name and a department ID which they are employed in.

00:00:45.150 --> 00:00:51.240
So, in the case of the first row, employee Rafferty works in department 31,

00:00:51.240 --> 00:00:55.300
Jones works in department 33, and so forth.

00:00:55.300 --> 00:01:00.720
One thing to note is the value null here, which represents an empty value.

00:01:00.720 --> 00:01:05.080
So let's just say that John doesn't work for any specific one department.

00:01:05.080 --> 00:01:10.230
These tables are example tables from the Wikipedia article on joins,

00:01:10.230 --> 00:01:14.520
which explains all of the concepts I'm going to go over in much more depth.

00:01:14.520 --> 00:01:19.460
A join can be thought of as a union of two different tables combined in

00:01:19.460 --> 00:01:21.860
someway such that they make sense.

00:01:21.860 --> 00:01:27.190
Now, the most natural way to join these tables might be on the common column in

00:01:27.190 --> 00:01:30.450
this case DepartmentID that they both have.

00:01:30.450 --> 00:01:35.640
So to join these two tables, we would simply go down each row in the first, and

00:01:35.640 --> 00:01:40.750
for that DepartmentID match it to the equivalent DepartmentID,

00:01:40.750 --> 00:01:42.390
in the department table.

00:01:42.390 --> 00:01:44.200
And we would do the same for every row.

00:01:45.320 --> 00:01:50.590
One thing to notice is that two employees can be mapped to the same department,

00:01:50.590 --> 00:01:54.900
in this case, both Jones and Heisenberg belong to department 33.

00:01:54.900 --> 00:01:57.500
Or there could be no employees for

00:01:57.500 --> 00:02:00.690
a given department, in this case department 35.

00:02:00.690 --> 00:02:05.230
Or if an employee doesn't have a department, he can't get mapped to any

