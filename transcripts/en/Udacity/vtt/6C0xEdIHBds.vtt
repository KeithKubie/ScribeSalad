WEBVTT
Kind: captions
Language: en

00:00:00.331 --> 00:00:02.883
Given a graph and a source vertex S,

00:00:02.883 --> 00:00:07.402
what's the distance of all other
vertices of the graph from S?

00:00:07.402 --> 00:00:12.091
To find out, you can perform a
breadth-first search or a BFS for short.

00:00:12.091 --> 00:00:13.531
Here's how you might do it.

00:00:13.531 --> 00:00:16.518
For each vertex,
we'll keep a shortest distance.

00:00:16.518 --> 00:00:21.341
Now, the source is a distance
of 0 edges away from itself,

00:00:21.341 --> 00:00:24.048
so let's set its distance to 0.

00:00:24.048 --> 00:00:27.348
Now for all the rest, you don't
know any of the distances yet, so

00:00:27.348 --> 00:00:29.034
let's set them all to infinity.

00:00:29.034 --> 00:00:33.657
Next, start the source and
look at its immediate neighbors.

00:00:33.657 --> 00:00:36.364
These neighbors are one
away from the source, so

00:00:36.364 --> 00:00:38.684
let's update their distances to be one.

00:00:38.684 --> 00:00:41.078
Now, let's visit
the neighbor's neighbors.

00:00:41.078 --> 00:00:43.729
Now, most of these are not yet
visited, so

00:00:43.729 --> 00:00:47.571
they must be one more away from
the previous nodes we visited.

00:00:47.571 --> 00:00:50.621
But one of these, we've seen already,
so that means we already know its

00:00:50.621 --> 00:00:52.983
shortest distance, and so
we can leave that one alone.

00:00:52.983 --> 00:00:56.568
And you'll continue this process
until you've seen all the vertices.

00:00:56.568 --> 00:01:01.001
The way a BFS works is a little bit like
dropping a drop of water into a bucket.

00:01:01.001 --> 00:01:04.554
The drop hits the source, and
that causes a ripple of waves through

00:01:04.554 --> 00:01:07.101
the graph where we
propagate the differences.

00:01:07.101 --> 00:01:10.166
These waves are sometimes
called frontiers.

00:01:12.627 --> 00:01:13.665
Here's a pseudocode for

00:01:13.665 --> 00:01:16.340
a sequential algorithm that
implements the scheme we just saw.

