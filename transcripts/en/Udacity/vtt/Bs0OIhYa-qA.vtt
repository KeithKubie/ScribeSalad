WEBVTT
Kind: captions
Language: en

00:00:00.170 --> 00:00:04.210
Let's say that initially, you've got through,

00:00:04.210 --> 00:00:06.860
two memory locations, a and b, and both

00:00:06.860 --> 00:00:08.490
these memory locations have been initialized to

00:00:08.490 --> 00:00:11.910
zero. And let's say that there are two

00:00:11.910 --> 00:00:19.700
processes executing on two different processes, P1 and P2, and so a and b, c

00:00:19.700 --> 00:00:21.339
and d, they're all shared memory locations.

00:00:22.590 --> 00:00:25.640
And let's say that process P1 is executing

00:00:25.640 --> 00:00:31.330
this piece of code. It's assigning a + 1 to a, b + 1 to b and there is another

00:00:31.330 --> 00:00:37.820
process P2 that is using the values b and a and assigning them

00:00:37.820 --> 00:00:44.295
to variables d and c. Now one thing you have to recognize is that the process

00:00:44.295 --> 00:00:46.725
of P1 and process of P2 are working

00:00:46.725 --> 00:00:50.950
completely independently, right? They're completely independent of each other.

00:00:50.950 --> 00:00:55.110
It is just that these memory locations a, b, c, and d are all shared memory

00:00:55.110 --> 00:00:57.870
locations. And, but, we have no way of

00:00:57.870 --> 00:01:03.580
knowing the relative ordering of all of these instructions

00:01:03.580 --> 00:01:06.150
that we're seeing here. When you think about

00:01:06.150 --> 00:01:10.540
a uniprocessor program there is an expectation that instructions

00:01:10.540 --> 00:01:13.290
are textually the way they're ordered, is the

00:01:13.290 --> 00:01:16.370
order in which the processor is executing. But what

00:01:16.370 --> 00:01:19.620
we're looking at is instructions that are happening on

00:01:19.620 --> 00:01:22.060
different processes. There's a set of instructions here. Set

00:01:22.060 --> 00:01:25.320
of instructions here. All manipulating the same shared memory.

00:01:25.320 --> 00:01:28.910
So the question to you is what possible values

00:01:28.910 --> 00:01:34.850
do you expect to see for d and c? Do you expect that, when, let's say that you

00:01:34.850 --> 00:01:37.840
know, process P1 completes, process P2 completes. We don't

00:01:37.840 --> 00:01:41.530
know what order they executed. Both have completed executions.

00:01:41.530 --> 00:01:47.250
At the end of that, would you expect to see c and d to be equal to 0,

00:01:47.250 --> 00:01:52.762
c and d to be both equal to 1, c to be equal to 1 and d to be equal to

00:01:52.762 --> 00:01:58.340
0, c to be equal to be 0 and d to be equal to 1, okay? Basically I've given

00:01:58.340 --> 00:02:03.320
you all the permutation combinations of the four possibilities for

00:02:03.320 --> 00:02:06.730
the values that c and d can assume. Given this

00:02:06.730 --> 00:02:10.330
set of instructions that is happening, partially on P1, partially on P2.

