WEBVTT
Kind: captions
Language: en

00:00:00.300 --> 00:00:02.902
That brings me to another background technology that I have

00:00:02.902 --> 00:00:05.700
to explain to you and which is called log structured

00:00:05.700 --> 00:00:09.340
file system. The idea here is that when I make

00:00:09.340 --> 00:00:12.490
a change to file y meaning I either append to

00:00:12.490 --> 00:00:15.610
the file or make some modifications to it. What I'm

00:00:15.610 --> 00:00:19.710
going to do is rather than writing the file as is,

00:00:19.710 --> 00:00:21.810
I'm going to write the change that I made to

00:00:21.810 --> 00:00:25.570
the file as a log record. So, I have a log

00:00:25.570 --> 00:00:30.910
record that says, what are the changes I made to this file x. Similarly, I have

00:00:30.910 --> 00:00:38.810
a log record of all the changes I made to this file y. And this is being done in

00:00:38.810 --> 00:00:42.130
a data structure which I'll call log segment. And

00:00:42.130 --> 00:00:44.840
I'll keep this log segment data structure in memory,

00:00:44.840 --> 00:00:47.300
of course, to make it fast in terms of

00:00:47.300 --> 00:00:50.810
the file system operation. So with this log segment

00:00:50.810 --> 00:00:53.310
data structure, what I can do is, buffer

00:00:53.310 --> 00:00:57.650
the changes to multiple files in one contiguous log

00:00:57.650 --> 00:01:00.830
segment data structure. So this log segment data structure,

00:01:00.830 --> 00:01:02.590
I can write it out as a file, and

00:01:02.590 --> 00:01:04.739
when I write it out, I'm not writing a

00:01:04.739 --> 00:01:08.170
single file, but I'm actually writing a log segment

00:01:08.170 --> 00:01:12.740
which contains all the changes made to multiple files.

00:01:12.740 --> 00:01:16.270
And because the log segment is contiguous, I can

00:01:16.270 --> 00:01:19.760
write it sequentially on the disk and sequential writes

00:01:19.760 --> 00:01:22.550
are good in the disk subsystem. And what we

00:01:22.550 --> 00:01:25.770
want to do is, we want to gather these changes to

00:01:25.770 --> 00:01:28.550
files that are happening in my system in the

00:01:28.550 --> 00:01:31.080
log segment in memory, and every once in a

00:01:31.080 --> 00:01:34.990
while, flush the log segment to disk, once the

00:01:34.990 --> 00:01:38.520
log segment fills up to a certain extent, or

00:01:38.520 --> 00:01:41.480
periodically. And the reason, of course, is the fact

00:01:41.480 --> 00:01:43.610
that if it is in memory, you have to

00:01:43.610 --> 00:01:47.710
worry about reliability of your file system, if, in fact,

00:01:47.710 --> 00:01:49.970
the node crashes. And therefore, what we want to

00:01:49.970 --> 00:01:53.020
do is, we want to either write out these log

00:01:53.020 --> 00:01:57.570
segments periodically or when a lot of file activity

00:01:57.570 --> 00:02:01.342
is happening and the log segment fills up very rapidly.

00:02:01.342 --> 00:02:03.500
After it passes of threshold, then you write it

00:02:03.500 --> 00:02:06.525
out to the desk. So in other words, we use

00:02:06.525 --> 00:02:09.120
a space metric or a time metric to figure

00:02:09.120 --> 00:02:12.750
out when to flush the changes from the log segment

00:02:12.750 --> 00:02:15.940
into the disk. And this solves the small write

00:02:15.940 --> 00:02:19.650
problem because if y happens to be a small file.

00:02:19.650 --> 00:02:22.572
No problem, because we are not writing y as-is

00:02:22.572 --> 00:02:26.060
on to the disk. But what we are writing is

00:02:26.060 --> 00:02:29.290
this log segment that contains changes that have been

00:02:29.290 --> 00:02:31.680
made to y in addition to changes that have been

00:02:31.680 --> 00:02:33.312
made to a number of other files. And

00:02:33.312 --> 00:02:36.050
therefore, this log segment is going to be a

00:02:36.050 --> 00:02:39.510
big file. And therefore, we can use the RAID

00:02:39.510 --> 00:02:44.300
technology to stripe the log segments across multiple disks.

00:02:44.300 --> 00:02:46.690
And give the benefit of the parallel IO

00:02:46.690 --> 00:02:50.250
that's possible with the RAID technology. So this log

00:02:50.250 --> 00:02:53.880
structured file system solves the small write problem. And

00:02:53.880 --> 00:02:57.280
in log structured file system, there are only logs.

00:02:57.280 --> 00:02:59.790
No data files. You'll never write any data files.

00:02:59.790 --> 00:03:03.270
All the things that you're writing are these append only

00:03:03.270 --> 00:03:09.250
logs to the disk. And when you have a read of a file, the read of a file, if

00:03:09.250 --> 00:03:11.290
it has to go to the disk and fetch

00:03:11.290 --> 00:03:15.040
that file, then the file system has to reconstruct the

00:03:15.040 --> 00:03:18.250
file from the logs that it has stored on the

00:03:18.250 --> 00:03:22.630
disk. Of course, once it comes into the memory of

00:03:22.630 --> 00:03:25.510
the server, then in the file cache the

00:03:25.510 --> 00:03:28.870
file is going to remain as a file. But, if

00:03:28.870 --> 00:03:31.670
at any point, the server has to fetch

00:03:31.670 --> 00:03:34.660
the file from the disk, it's actually fetching the

00:03:34.660 --> 00:03:38.270
log segments. And then reconstructing the file from

00:03:38.270 --> 00:03:42.050
the log segments. That's important. Which means that, in

00:03:42.050 --> 00:03:44.560
a log structured file system, there could be

00:03:44.560 --> 00:03:47.760
latency associated with reading a file for the first

00:03:47.760 --> 00:03:49.930
time from the disk. Of course, once it is read from

00:03:49.930 --> 00:03:52.670
the disk and reconstructed, it is in memory. In the file

00:03:52.670 --> 00:03:55.830
cache of the server, then everything is fine. But the first

00:03:55.830 --> 00:03:59.040
time, you have to read it from the disk, it's going to

00:03:59.040 --> 00:04:01.170
take some time because you have to read all these log

00:04:01.170 --> 00:04:05.200
segments and reconstruct it and that's where parallel RAID technology can

00:04:05.200 --> 00:04:09.280
be very helpful, because you're aggregating all the bandwidth that's available

00:04:09.280 --> 00:04:13.830
for reading the log segments from multiple disks at the same time.

00:04:13.830 --> 00:04:15.510
And the other thing that you have to worry about,

00:04:15.510 --> 00:04:18.850
when you have a log structured file system, is that these

00:04:18.850 --> 00:04:22.960
logs represent changes that have been made to the files.

00:04:22.960 --> 00:04:26.300
So, for instance, I may have written a particular block of

00:04:26.300 --> 00:04:28.940
y and that may be the change sitting here. Next

00:04:28.940 --> 00:04:33.000
time, what I'm doing is perhaps I'm writing the same block

00:04:33.000 --> 00:04:35.610
of the file. In which case, the first strike that I

00:04:35.610 --> 00:04:38.850
did, that is invalid. I have got a new write of

00:04:38.850 --> 00:04:44.410
that same block. So, you see that over time, the logs are going to have lots of

00:04:44.410 --> 00:04:49.290
holes created by overwriting the same block of

00:04:49.290 --> 00:04:52.120
a particular file. So in a log structured

00:04:52.120 --> 00:04:55.710
file system, one of the things that has to happen is that the logs have to

00:04:55.710 --> 00:04:59.130
be cleaned periodically to ensure that the disk

00:04:59.130 --> 00:05:03.850
is not cluttered with wasted logs that have empty

00:05:03.850 --> 00:05:07.120
holes in them because of old writes to

00:05:07.120 --> 00:05:09.860
parts of a file that are no longer relevant.

00:05:09.860 --> 00:05:12.110
Because those parts of the file have been

00:05:12.110 --> 00:05:16.660
rewritten, overwritten by subsequent writes to the same file.

00:05:16.660 --> 00:05:19.900
So logs, as I've introduced you, is similar

00:05:19.900 --> 00:05:23.070
to the disks that you've seen in the DSM

00:05:23.070 --> 00:05:26.040
system with the multiple writer protocol that we talked

00:05:26.040 --> 00:05:28.988
about in a previous lecture. You may have also

00:05:28.988 --> 00:05:31.496
heard the term, journalling file system, there is

00:05:31.496 --> 00:05:34.745
a difference between log structured file system, and journalling

00:05:34.745 --> 00:05:39.150
file system. Journalling file systems has both log files

00:05:39.150 --> 00:05:41.770
as well as data files, and what a journalling

00:05:41.770 --> 00:05:44.770
file system does, is it applies the log

00:05:44.770 --> 00:05:48.800
files to the data files and discards the log

00:05:48.800 --> 00:05:51.900
files. The goal is similar in a journaling file

00:05:51.900 --> 00:05:54.260
system, and the goal is to solve the small

00:05:54.260 --> 00:05:58.740
write problem, but in a journaling file system, the logs are there only for a

00:05:58.740 --> 00:06:01.100
short duration of time before the logs

00:06:01.100 --> 00:06:03.450
are committed to the data files themselves. Whereas

00:06:03.450 --> 00:06:07.560
in a log structured file system, you don't have data files at all, all that

00:06:07.560 --> 00:06:10.490
you have are log files and reads have

00:06:10.490 --> 00:06:12.280
to deconstruct the data from the log files.

