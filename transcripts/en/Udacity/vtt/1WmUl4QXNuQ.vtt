WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.000
This particular chart-based approach

00:00:02.000 --> 00:00:04.000
is due to Jay Earley,

00:00:04.000 --> 00:00:08.000
a computer scientist and psychologist.

00:00:08.000 --> 00:00:10.000
And now that we've seen all the theory behind it,

00:00:10.000 --> 00:00:12.000
we're going to code it up in Python together.

00:00:12.000 --> 00:00:15.000
Now one of the tricks that's different between this and Memo_Fibo

00:00:15.000 --> 00:00:20.000
is that our chart may have many things in it.

00:00:20.000 --> 00:00:23.000
One of the differences between this chart-based algorithm

00:00:23.000 --> 00:00:26.000
and our memoized Fibonacci

00:00:26.000 --> 00:00:31.000
is that our charts hold groups--lists, sets--of items.

00:00:31.000 --> 00:00:34.000
After we've seen one token of input,

00:00:34.000 --> 00:00:38.000
there's an entire collection of parse states that we could be in.

00:00:38.000 --> 00:00:40.000
So we're going to represent that

00:00:40.000 --> 00:00:42.000
by having our chart be a dictionary

00:00:42.000 --> 00:00:46.000
that maps from numbers to lists.

00:00:46.000 --> 00:00:48.000
But we're going to use those lists--

00:00:48.000 --> 00:00:51.000
we don't really want any duplicates,

00:00:51.000 --> 00:00:53.000
Just like we saw with Memo_Fibo,

00:00:53.000 --> 00:00:56.000
we want to keep adding things to the chart until we're done.

00:00:56.000 --> 00:01:00.000
We want to be lazy and not do any extra work.

00:01:00.000 --> 00:01:03.000
So I don't want to add any duplicate entries to the chart

00:01:03.000 --> 00:01:05.000
because that'll just be more work for me to do later,

00:01:05.000 --> 00:01:07.000
and it may not settle down.

00:01:07.000 --> 00:01:10.000
So I'm going to write a special Add procedure,

00:01:10.000 --> 00:01:13.000
treating the right-hand side of the chart

00:01:13.000 --> 00:01:15.000
as if it were a set.

00:01:15.000 --> 00:01:17.000
And you may have seen sets in mathematics,

00:01:17.000 --> 00:01:20.000
but if you haven't a list can have elements repeated.

00:01:20.000 --> 00:01:22.000
I can have this list: [1, 2, 2, 3].

00:01:22.000 --> 00:01:26.000
But in a set, each element can occur, at most, once.

00:01:26.000 --> 00:01:29.000
So if I were to put: {1, 2, 2, and 3} into this set,

00:01:29.000 --> 00:01:33.000
I would just get: {1, 2, 3} as the final result.

00:01:33.000 --> 00:01:36.000
When you're about to put something in, you check and see if it's already there,

00:01:36.000 --> 00:01:38.000
and if it's already there, you don't do anything.

00:01:38.000 --> 00:01:40.000
I'm going to have you implement that set for me.

00:01:40.000 --> 00:01:42.000
What I'd like you to do

00:01:42.000 --> 00:01:45.000
is write a Python procedure, using the Interpreter

00:01:45.000 --> 00:01:47.000
called: addtochart

00:01:47.000 --> 00:01:49.000
that takes 3 arguments: the chart,

00:01:49.000 --> 00:01:52.000
a Python dictionary, the index, a number,

00:01:52.000 --> 00:01:55.000
and the state--more on that later, but it could be anything--

00:01:55.000 --> 00:02:01.000
and it ensures that if I go look at chart[index] later,

00:02:01.000 --> 00:02:04.000
it will return a list--it will evaluate to a list--

00:02:04.000 --> 00:02:07.000
that contains state exactly once.

00:02:07.000 --> 00:02:12.000
So if state was already in chart[index], don't do anything.

00:02:12.000 --> 00:02:15.000
If it wasn't, you want to add it.

00:02:15.000 --> 00:02:17.000
addtochart should return true

00:02:17.000 --> 00:02:20.000
if something was actually added to chart[index],

00:02:20.000 --> 00:02:22.000
and return False otherwise--

00:02:22.000 --> 00:02:24.000
False if if was already there.

00:02:24.000 --> 00:02:27.000
And we're going to us this so that we can tell if we actually updated the chart

00:02:27.000 --> 00:02:30.000
and then if we didn't update the chart,maybe we're closer to being done.

00:02:30.000 --> 00:02:33.000
To simplify this problem bit, you can assume

00:02:33.000 --> 00:02:38.000
that chart[index] is valid--that index is already in this mapping

00:02:38.000 --> 00:02:40.000
and that it returns a list.

00:02:40.000 --> 00:02:42.000
Let's say it's the Empty list, if we haven't gotten started yet.

00:02:42.000 --> 09:59:59.000
But it's, at least, going to be a list. Go forth!

