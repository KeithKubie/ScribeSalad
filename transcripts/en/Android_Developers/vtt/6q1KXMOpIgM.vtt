WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:05.460
[MUSIC PLAYING]

00:00:05.460 --> 00:00:08.640
So now that we have this OAuth
2.0 access token, I'm going to

00:00:08.640 --> 00:00:10.300
show you something cool
we can do with it.

00:00:10.300 --> 00:00:13.770
So I'm going to switch
to my browser here.

00:00:13.770 --> 00:00:18.010
And I'm going to open up
an incognito window.

00:00:18.010 --> 00:00:18.570
Now, don't worry.

00:00:18.570 --> 00:00:20.060
This is still safe for work.

00:00:20.060 --> 00:00:22.315
And I'm just going to
go to gmail.com.

00:00:24.840 --> 00:00:26.790
Now, you'll notice that in
this browser window,

00:00:26.790 --> 00:00:27.800
I'm not signed in.

00:00:27.800 --> 00:00:29.760
Google has no idea who I am.

00:00:29.760 --> 00:00:31.090
But let's do something.

00:00:31.090 --> 00:00:36.320
I'm going to go to
https://www.googleapis.com--

00:00:36.320 --> 00:00:37.630
oh, here it is--

00:00:37.630 --> 00:00:38.880
games/v1/players/me.

00:00:41.050 --> 00:00:43.660
And well, at this point, I'm
getting back something that

00:00:43.660 --> 00:00:45.870
looks like sort of an error.

00:00:45.870 --> 00:00:47.630
And I guess that's not
very interesting.

00:00:47.630 --> 00:00:49.140
But let me show you something.

00:00:49.140 --> 00:00:54.930
I'm going to add in
?access_token=, and I'm going

00:00:54.930 --> 00:00:56.000
to go back to Xcode.

00:00:56.000 --> 00:01:00.950
And I'm going to copy this
access token, go back here,

00:01:00.950 --> 00:01:03.530
and paste it into the URL.

00:01:03.530 --> 00:01:04.379
And look at that.

00:01:04.379 --> 00:01:06.890
We get back information
about me.

00:01:06.890 --> 00:01:11.350
We get back my ID, my name, the
URL of my avatar image.

00:01:11.350 --> 00:01:13.770
Now, we're getting this
information directly from the

00:01:13.770 --> 00:01:14.930
Play Games service.

00:01:14.930 --> 00:01:17.060
And maybe this seems
normal to you.

00:01:17.060 --> 00:01:18.630
Or maybe you're saying,
wait a minute.

00:01:18.630 --> 00:01:21.150
You're able to access the Play
Games service by hitting up

00:01:21.150 --> 00:01:22.450
web pages in your browser?

00:01:22.450 --> 00:01:24.750
What kind of crazy
magic is this?

00:01:24.750 --> 00:01:26.390
And that brings us to--

00:01:26.390 --> 00:01:27.450
da-da-da-dah--

00:01:27.450 --> 00:01:30.590
a somewhat oversimplified, and
inaccurate in places, but good

00:01:30.590 --> 00:01:33.850
enough for most intents and
purposes, guide to REST.

00:01:33.850 --> 00:01:37.290
And as an added bonus, this
presentation adds

00:01:37.290 --> 00:01:38.060
with a bit of a lie.

00:01:38.060 --> 00:01:39.920
And we'll get to
that in a bit.

00:01:39.920 --> 00:01:42.320
But first, let's talk about what
we mean when we say that

00:01:42.320 --> 00:01:44.720
the Play Games service
is a RESTful service.

00:01:44.720 --> 00:01:47.070
This is a phrase we throw around
a lot here at Google

00:01:47.070 --> 00:01:49.870
because we are a web
services company.

00:01:49.870 --> 00:01:51.660
And this is second
nature to us.

00:01:51.660 --> 00:01:54.300
But I realize that to many of
you out there, you're game

00:01:54.300 --> 00:01:55.400
developers.

00:01:55.400 --> 00:01:58.090
You're focused on client-side
issues, like AI, and physics

00:01:58.090 --> 00:02:01.770
engines, and multiplying
matrices, and stuff like that.

00:02:01.770 --> 00:02:04.060
And you're thinking,
server side stuff?

00:02:04.060 --> 00:02:05.310
I don't got time for that.

00:02:05.310 --> 00:02:09.810
I'm too busy trying to figure
out path finding, or whatever.

00:02:09.810 --> 00:02:11.430
So we're going to go over
what it means to

00:02:11.430 --> 00:02:12.940
be a RESTful service.

00:02:12.940 --> 00:02:15.460
And if this feels too basic
for you, you feel like you

00:02:15.460 --> 00:02:17.960
have a basic understanding of
this, feel free to skip to the

00:02:17.960 --> 00:02:18.610
next video.

00:02:18.610 --> 00:02:19.620
I won't be offended--

00:02:19.620 --> 00:02:20.870
too much.

00:02:20.870 --> 00:02:24.970
But let's talk about what a
REST service really is.

00:02:24.970 --> 00:02:28.390
I suppose, at its very basic
core, REST is simply a set of

00:02:28.390 --> 00:02:31.530
rules about client-server
communication that, very

00:02:31.530 --> 00:02:36.440
typically, is paired with HTTP
as its application protocol.

00:02:36.440 --> 00:02:39.110
In theory, these two things
don't have to go together.

00:02:39.110 --> 00:02:41.990
But in practice, very often, if
somebody's talking about a

00:02:41.990 --> 00:02:44.660
REST service, they're talking
about a service that uses

00:02:44.660 --> 00:02:48.320
HTTP, which is that application
protocol that your

00:02:48.320 --> 00:02:49.400
browser uses.

00:02:49.400 --> 00:02:52.210
Which is great for us, because
it means that just about any

00:02:52.210 --> 00:02:56.000
language that wants some
basic, web-browser-like

00:02:56.000 --> 00:02:59.540
functionality, already has some
really nice support for

00:02:59.540 --> 00:03:01.300
making HTTP calls.

00:03:01.300 --> 00:03:05.040
And by extension, has great
support for communicating with

00:03:05.040 --> 00:03:07.440
servers in a RESTful way.

00:03:07.440 --> 00:03:09.530
So the Play Games service,
typically, uses

00:03:09.530 --> 00:03:10.990
four types of calls.

00:03:10.990 --> 00:03:14.310
GET and POST should be pretty
familiar to you if you've done

00:03:14.310 --> 00:03:15.790
anything on the internet.

00:03:15.790 --> 00:03:18.640
Two other calls that we use a
little less frequently are PUT

00:03:18.640 --> 00:03:19.460
and DELETE.

00:03:19.460 --> 00:03:22.150
And let's go over what
each of these means.

00:03:22.150 --> 00:03:24.470
GET is generally used to
query the service.

00:03:24.470 --> 00:03:27.490
It's used to get information
about a particular thing or

00:03:27.490 --> 00:03:29.240
get a list of things.

00:03:29.240 --> 00:03:34.130
POST and PUT but are both used
to create a new object or to

00:03:34.130 --> 00:03:37.190
update an existing object
on the server.

00:03:37.190 --> 00:03:40.680
This is used, say, if you want
to add or modify data up on

00:03:40.680 --> 00:03:42.030
the Play Games service.

00:03:42.030 --> 00:03:44.560
And DELETE, as they might
suggest, is used

00:03:44.560 --> 00:03:45.960
for deleting things.

00:03:45.960 --> 00:03:47.950
In case you're saying to
yourself, hey, POST and PUT

00:03:47.950 --> 00:03:48.630
look kind of similar.

00:03:48.630 --> 00:03:50.140
What's the difference?

00:03:50.140 --> 00:03:54.160
The main difference is that
PUT is an idempotent call.

00:03:54.160 --> 00:03:55.430
And what does that mean?

00:03:55.430 --> 00:03:57.810
Well, that means that if you
make the same PUT call over

00:03:57.810 --> 00:04:00.460
and over again, the result
on the server will

00:04:00.460 --> 00:04:02.380
always be the same.

00:04:02.380 --> 00:04:05.145
Let's say, for instance, that I
had a call to add an item to

00:04:05.145 --> 00:04:06.220
a shopping cart.

00:04:06.220 --> 00:04:09.260
If every time I made that call,
another item were added

00:04:09.260 --> 00:04:12.210
to that shopping cart, that
would not be idempotent.

00:04:12.210 --> 00:04:14.920
I would go from one, to two,
to three, to four, to five

00:04:14.920 --> 00:04:16.350
bottles of shampoo.

00:04:16.350 --> 00:04:18.200
And that would, then,
be a POST call.

00:04:18.200 --> 00:04:21.269
On the other hand, if making
that call repeatedly still

00:04:21.269 --> 00:04:24.250
only put one bottle of shampoo
in my shopping cart, then that

00:04:24.250 --> 00:04:25.680
would be a PUT call.

00:04:25.680 --> 00:04:28.930
Perhaps another way to think
about it is POST is typically

00:04:28.930 --> 00:04:31.790
telling the server, hey, here's
this update I'd like

00:04:31.790 --> 00:04:32.850
you to apply.

00:04:32.850 --> 00:04:35.480
Go ahead and supply your own
logic, because maybe there's

00:04:35.480 --> 00:04:38.600
other side effects that this
call is going to make.

00:04:38.600 --> 00:04:41.160
Whereas, PUT is generally
telling the service, hey, just

00:04:41.160 --> 00:04:43.330
copy and paste this data
over what you've got.

00:04:43.330 --> 00:04:45.830
Try not to think about
it too much.

00:04:45.830 --> 00:04:49.260
Another analogy I've heard that
I kind of like is, PUT is

00:04:49.260 --> 00:04:52.725
like setting an instance
variable directly.

00:04:52.725 --> 00:04:55.390
You know, we're going to call
some value equals 5.

00:04:55.390 --> 00:04:57.540
Whereas, POST is like
calling the setter.

00:04:57.540 --> 00:04:59.510
Maybe all it's going to
do is set that value.

00:04:59.510 --> 00:05:01.160
But maybe there's other
stuff going on that

00:05:01.160 --> 00:05:02.520
we don't know about.

00:05:02.520 --> 00:05:05.250
Whichever analogy works
for you, go with it.

00:05:05.250 --> 00:05:09.150
And again, this whole thing,
somewhat oversimplified.

00:05:09.150 --> 00:05:10.560
So it's time for a
little pop quiz.

00:05:10.560 --> 00:05:12.540
Here's a bunch of calls we're
going to make to the service.

00:05:12.540 --> 00:05:16.020
See if you can guess what types
of calls these would be.

00:05:16.020 --> 00:05:19.480
So, listing all achievements,
well, that is simply querying

00:05:19.480 --> 00:05:21.330
the service and getting
back some data.

00:05:21.330 --> 00:05:23.190
So that's a GET call.

00:05:23.190 --> 00:05:26.640
Getting information about a
particular player, well,

00:05:26.640 --> 00:05:28.210
that's also a GET call.

00:05:28.210 --> 00:05:30.590
A giveaway might be the fact
that we use the word "get"

00:05:30.590 --> 00:05:31.820
right there on the left.

00:05:31.820 --> 00:05:33.900
So keep that in mind.

00:05:33.900 --> 00:05:37.630
Incrementing an achievement,
that's a POST call.

00:05:37.630 --> 00:05:39.580
And if you think about it,
that kind of makes sense.

00:05:39.580 --> 00:05:43.000
If we had an achievement to,
say, earn 100 coins, and we

00:05:43.000 --> 00:05:45.870
made a call to increment that
achievement by five coins, you

00:05:45.870 --> 00:05:47.870
would expect that every time
we made that call.

00:05:47.870 --> 00:05:50.460
It would go from five coins
to 10 coins, to 15,

00:05:50.460 --> 00:05:51.910
to 20, and so on.

00:05:51.910 --> 00:05:52.220
Right?

00:05:52.220 --> 00:05:54.220
That call is not idempotent.

00:05:54.220 --> 00:05:57.500
It would be different every
time we made that call.

00:05:57.500 --> 00:05:59.860
How about unlocking
an achievement?

00:05:59.860 --> 00:06:02.100
Now, if you were to say PUT,
you might be right.

00:06:02.100 --> 00:06:04.960
And our judges will give
you credit for that.

00:06:04.960 --> 00:06:06.730
Because, if you think about it,
if you were to make that

00:06:06.730 --> 00:06:09.100
unlock achievement call
multiple times, that

00:06:09.100 --> 00:06:10.850
achievement would still
stay unlocked.

00:06:10.850 --> 00:06:13.720
Basically, nothing else on
our service changes.

00:06:13.720 --> 00:06:15.770
And so that would be
an idempotent call.

00:06:15.770 --> 00:06:19.350
However, in a Play Games case,
this is actually a POST.

00:06:19.350 --> 00:06:21.730
And I believe the reason is
the team wanted to leave

00:06:21.730 --> 00:06:24.070
things open for future
functionality.

00:06:24.070 --> 00:06:26.260
Imagine that we had an
achievement that you could

00:06:26.260 --> 00:06:27.810
unlock multiple times.

00:06:27.810 --> 00:06:30.600
By keeping this as a POST, we
basically leave the door open

00:06:30.600 --> 00:06:33.560
to add that feature in the
future without breaking

00:06:33.560 --> 00:06:35.180
backwards compatibility.

00:06:35.180 --> 00:06:37.260
But maybe this is a good time
to remind you that if you're

00:06:37.260 --> 00:06:39.700
ever wondering about these
calls, don't try and guess.

00:06:39.700 --> 00:06:40.710
Don't figure it out yourself.

00:06:40.710 --> 00:06:43.240
We have API documentation
that you can review.

00:06:43.240 --> 00:06:45.540
And you should always
check that out.

00:06:45.540 --> 00:06:50.210
And updating cloud saved data,
in this case, it is a PUT.

00:06:50.210 --> 00:06:53.110
Because, generally speaking, the
service doesn't know much

00:06:53.110 --> 00:06:55.340
about this cloud save data
that we're giving it.

00:06:55.340 --> 00:06:58.530
All it does is it copies and
pastes this blob of text that

00:06:58.530 --> 00:07:01.390
we're giving it on top of
the save game slot.

00:07:01.390 --> 00:07:04.640
And if we ask to save the same
set of data multiple times,

00:07:04.640 --> 00:07:07.420
that data doesn't change
on the service.

00:07:07.420 --> 00:07:10.130
So let's go back and review
that call we made at the

00:07:10.130 --> 00:07:12.060
beginning of this lesson.

00:07:12.060 --> 00:07:14.000
This was a plain old GET call
to googleapis.com/g

00:07:14.000 --> 00:07:15.250
ames/v1/players/me.

00:07:18.740 --> 00:07:20.820
Technically, this looks like
we're accessing a web page.

00:07:20.820 --> 00:07:22.080
But really, we're not.

00:07:22.080 --> 00:07:23.660
Instead of hitting a
web server, we're

00:07:23.660 --> 00:07:25.060
hitting a REST server.

00:07:25.060 --> 00:07:27.650
It just so happens that our
browser, which communicates

00:07:27.650 --> 00:07:30.980
via HTTP, knows exactly
how to make a GET

00:07:30.980 --> 00:07:32.740
call to that service.

00:07:32.740 --> 00:07:35.070
And that service spits
back data--

00:07:35.070 --> 00:07:36.500
in this case, JSON--

00:07:36.500 --> 00:07:38.960
that our browser knows how to
render and display in a

00:07:38.960 --> 00:07:40.510
human-readable way.

00:07:40.510 --> 00:07:42.200
And if it seems weird that we're
kind of blurring the

00:07:42.200 --> 00:07:44.530
lines between accessing a REST
service and hitting web

00:07:44.530 --> 00:07:47.140
server, this is basically
a good thing.

00:07:47.140 --> 00:07:50.220
One of the nice advantages of
accessing a REST service over

00:07:50.220 --> 00:07:53.480
HTTP is that you can do things
like ping the service directly

00:07:53.480 --> 00:07:55.620
in your browser or
make a curl call.

00:07:55.620 --> 00:07:58.570
And you can analyze the data
that way without having to

00:07:58.570 --> 00:08:01.620
write your own client that's
just made to access the Play

00:08:01.620 --> 00:08:02.470
Games service.

00:08:02.470 --> 00:08:03.770
So that's kind of cool.

00:08:03.770 --> 00:08:05.880
You'll also notice, by the way,
that this call did not

00:08:05.880 --> 00:08:08.320
work until we added
our access token.

00:08:08.320 --> 00:08:10.510
And remember, that
is our valet key

00:08:10.510 --> 00:08:11.990
that does two things.

00:08:11.990 --> 00:08:14.600
One, it tells the service
who this me string

00:08:14.600 --> 00:08:16.190
actually refers to.

00:08:16.190 --> 00:08:19.380
The service is able to say,
oh, this key is associated

00:08:19.380 --> 00:08:21.100
with Todd Kerpelman's account.

00:08:21.100 --> 00:08:23.810
Therefore, we must be
talking about him.

00:08:23.810 --> 00:08:26.170
Second, it tells the service
that I've given the Gets My

00:08:26.170 --> 00:08:29.830
Number application permission
to find out who I am and

00:08:29.830 --> 00:08:33.090
retrieve basic information about
me, like my avatar image

00:08:33.090 --> 00:08:34.860
and my player ID.

00:08:34.860 --> 00:08:37.690
And remember that I did this
all in an incognito window.

00:08:37.690 --> 00:08:40.220
So this access key was,
basically, the only thing the

00:08:40.220 --> 00:08:42.880
service had to go on to know
that the person who made this

00:08:42.880 --> 00:08:45.010
call was Todd Kerpelman.

00:08:45.010 --> 00:08:46.990
And this means you have to be
pretty careful about these

00:08:46.990 --> 00:08:48.170
access tokens.

00:08:48.170 --> 00:08:50.690
If someone else were to see
this video in the next 60

00:08:50.690 --> 00:08:53.490
minutes and they copied that
access token, they could

00:08:53.490 --> 00:08:55.820
essentially hit the Play Games
service pretending that they

00:08:55.820 --> 00:08:59.240
were me because they have
my access token.

00:08:59.240 --> 00:09:00.740
That token is really
the only thing that

00:09:00.740 --> 00:09:02.120
identifies who I am.

00:09:02.120 --> 00:09:04.390
There's a reason it's called
a bearer token.

00:09:04.390 --> 00:09:07.700
And that's because the powers
of that key are associated

00:09:07.700 --> 00:09:10.242
with the owner, or bearer,
of that token.

00:09:10.242 --> 00:09:12.390
And so you need to treat these
things with the same kind of

00:09:12.390 --> 00:09:14.260
respect you would treat
a password.

00:09:14.260 --> 00:09:16.770
That means, for starters, don't
go displaying it in

00:09:16.770 --> 00:09:19.560
YouTube videos where anybody
could copy and paste it.

00:09:19.560 --> 00:09:21.330
That would be a terrible idea.

00:09:21.330 --> 00:09:24.230
In practice, this means you
would not add it as a URL

00:09:24.230 --> 00:09:25.620
argument the way I did.

00:09:25.620 --> 00:09:28.300
You would, more typically, send
the access token as an

00:09:28.300 --> 00:09:29.830
HTTP header.

00:09:29.830 --> 00:09:32.440
And most importantly, any call
you make where you use an

00:09:32.440 --> 00:09:35.100
access token should always
be over SSL.

00:09:35.100 --> 00:09:39.760
In fact, if I go back to my
browser, and I were to replace

00:09:39.760 --> 00:09:45.560
this HTTPS with HTTP, I'll get
back an error telling me,

00:09:45.560 --> 00:09:48.560
sorry, you have to make
this call over SSL.

00:09:48.560 --> 00:09:51.030
There are a few other
interesting characteristics of

00:09:51.030 --> 00:09:52.140
REST services.

00:09:52.140 --> 00:09:54.780
I suppose your definition
of interesting may vary.

00:09:54.780 --> 00:09:57.580
The first is that calls are
stateless, meaning the service

00:09:57.580 --> 00:10:01.080
doesn't remember who you are
from one call to the next.

00:10:01.080 --> 00:10:03.060
In some ways, maybe this
seems like a drawback.

00:10:03.060 --> 00:10:05.820
Because every time you make a
call to the service, you need

00:10:05.820 --> 00:10:07.040
to send your access token.

00:10:07.040 --> 00:10:09.440
You need to resend any
information that the service

00:10:09.440 --> 00:10:11.340
should know about the player.

00:10:11.340 --> 00:10:13.290
There are no shortcuts
to, hey.

00:10:13.290 --> 00:10:13.950
Remember, it's me.

00:10:13.950 --> 00:10:15.670
Here's another call
I'd like to make.

00:10:15.670 --> 00:10:18.810
The big advantage is that
this makes calls--

00:10:18.810 --> 00:10:21.420
in particular GET calls--
very cacheable.

00:10:21.420 --> 00:10:23.850
And typically speaking, a lot of
calls you're making through

00:10:23.850 --> 00:10:25.515
the Game Service tend
to be GET calls.

00:10:25.515 --> 00:10:27.840
So this helps speed up
things quite a bit.

00:10:27.840 --> 00:10:30.480
I suppose, somewhat related to
that fact, is the fact that

00:10:30.480 --> 00:10:33.210
GET calls will have no
effect on your data.

00:10:33.210 --> 00:10:36.140
If your player were to view
their achievements 50 times,

00:10:36.140 --> 00:10:38.370
there would be no effect
on their achievements.

00:10:38.370 --> 00:10:40.610
These calls are considered
safe.

00:10:40.610 --> 00:10:42.500
As mentioned, PUT calls
are idempotent,

00:10:42.500 --> 00:10:43.490
as are DELETE calls.

00:10:43.490 --> 00:10:45.260
You can delete an object
multiple times.

00:10:45.260 --> 00:10:48.590
And calling DELETE a second
or third time won't

00:10:48.590 --> 00:10:49.460
undelete the object.

00:10:49.460 --> 00:10:51.520
It'll just stay deleted.

00:10:51.520 --> 00:10:55.250
Typically, what you get back is
human-readable JSON or XML.

00:10:55.250 --> 00:10:56.900
I don't know if this is
a hard and fast rule.

00:10:56.900 --> 00:10:58.650
This is by convention.

00:10:58.650 --> 00:11:00.200
And again, this makes debugging

00:11:00.200 --> 00:11:01.510
really nice and easy.

00:11:01.510 --> 00:11:03.300
You can see exactly what you're
getting back from the

00:11:03.300 --> 00:11:06.440
service without having to
interpret it, or run it

00:11:06.440 --> 00:11:08.910
through any other tools,
or anything like that.

00:11:08.910 --> 00:11:11.960
And perhaps, more importantly,
libraries exist for managing

00:11:11.960 --> 00:11:14.330
all this stuff, and you
should use them.

00:11:14.330 --> 00:11:16.920
We'll talk a little more about
these libraries and the types

00:11:16.920 --> 00:11:18.660
you'll be encountering
in the next lesson.

00:11:18.660 --> 00:11:20.030
So stay tuned.

00:11:20.030 --> 00:11:30.422
[MUSIC PLAYING]

