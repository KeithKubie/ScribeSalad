WEBVTT
Kind: captions
Language: en

00:00:50.565 --> 00:00:51.440
PROFESSOR: All right.

00:00:51.440 --> 00:00:53.170
Let's get started.

00:00:53.170 --> 00:00:57.130
So we are continuing the
theme of unfolding polyhedra,

00:00:57.130 --> 00:01:01.290
and the general picture we are
thinking about in terms of edge

00:01:01.290 --> 00:01:03.670
unfolding versus
general unfolding which

00:01:03.670 --> 00:01:05.440
are these two pictures.

00:01:05.440 --> 00:01:07.030
Top is an edge
unfolding of the cube.

00:01:07.030 --> 00:01:10.680
Bottom is a general
unfolding of the cube.

00:01:10.680 --> 00:01:12.640
If you have a
complex polyhedron,

00:01:12.640 --> 00:01:14.930
we found general unfoldings.

00:01:14.930 --> 00:01:16.241
There are like four of them.

00:01:16.241 --> 00:01:16.740
They work.

00:01:16.740 --> 00:01:18.799
We proved one of them.

00:01:18.799 --> 00:01:20.340
If you want an edge
unfolding, that's

00:01:20.340 --> 00:01:22.760
the centuries-old open problem.

00:01:22.760 --> 00:01:24.352
For non-convex
polyhedra, we know

00:01:24.352 --> 00:01:25.560
this is too much to hope for.

00:01:25.560 --> 00:01:27.879
Even if it's
topologically convex,

00:01:27.879 --> 00:01:29.420
there's not always
an edge unfolding.

00:01:29.420 --> 00:01:33.410
That was the
tetrahedral Witch's Hat.

00:01:33.410 --> 00:01:37.470
But for general
unfolding, we don't know.

00:01:37.470 --> 00:01:40.320
So today's lecture is actually
mostly about these two

00:01:40.320 --> 00:01:45.910
open problems and
different variations of it

00:01:45.910 --> 00:01:49.070
that we know how to
solve, special cases,

00:01:49.070 --> 00:01:51.160
and changes in the model.

00:01:54.280 --> 00:01:56.280
At the end, there'll
also be some stuff

00:01:56.280 --> 00:01:58.270
about the reverse
direction folding,

00:01:58.270 --> 00:02:02.190
but mostly, it will
be about unfolding.

00:02:02.190 --> 00:02:05.300
So there's a third
kind of unfolding

00:02:05.300 --> 00:02:10.330
which we call vertex
unfolding, and it's

00:02:10.330 --> 00:02:13.900
kind of like a
hinged dissection.

00:02:13.900 --> 00:02:16.430
So instead of normally
in unfolding, something

00:02:16.430 --> 00:02:23.450
like a cross, it's a
nice, connected polygon.

00:02:23.450 --> 00:02:26.430
The faces are
joined along edges.

00:02:26.430 --> 00:02:30.770
But what if I allowed
disconnecting along edges,

00:02:30.770 --> 00:02:37.240
but I just wanted things to
stay connected along vertices,

00:02:37.240 --> 00:02:38.610
like at a hinge.

00:02:38.610 --> 00:02:41.390
So it still should be
one piece in the sense

00:02:41.390 --> 00:02:45.840
that this is still
connected, and in this case,

00:02:45.840 --> 00:02:48.710
I still want an edge unfolding.

00:02:48.710 --> 00:02:50.280
You're only allowed
to cut on edges.

00:02:53.480 --> 00:02:55.500
And in fact, we will
cut on all the edges

00:02:55.500 --> 00:02:57.190
because that'll be
the most flexible.

00:02:57.190 --> 00:02:59.510
Every edge gets cut,
but you're going

00:02:59.510 --> 00:03:09.830
to leave intact certain
vertices to make one, quote,

00:03:09.830 --> 00:03:14.970
"piece" at vertices.

00:03:18.635 --> 00:03:20.240
So we still want one piece.

00:03:23.310 --> 00:03:28.869
So this is vertex unfolding,
and it's always possible.

00:03:28.869 --> 00:03:30.660
We've even implemented
this algorithm here.

00:03:30.660 --> 00:03:32.560
A bunch of random
points on a sphere.

00:03:32.560 --> 00:03:37.030
Take the convex hull, and
then, take a vertex unfolding.

00:03:37.030 --> 00:03:40.330
So you get this nice
chain of triangles,

00:03:40.330 --> 00:03:42.450
don't intersect each other,
and this will fold up

00:03:42.450 --> 00:03:45.000
into that 3D
polyhedron on the left.

00:03:45.000 --> 00:03:47.591
Here's some bigger examples,
hundreds of vertices.

00:03:47.591 --> 00:03:48.090
Amazing.

00:03:52.880 --> 00:03:53.380
All right.

00:03:53.380 --> 00:03:57.179
So how do we do this?

00:03:57.179 --> 00:03:57.678
All right.

00:03:57.678 --> 00:04:01.330
Let me state a theorem.

00:04:01.330 --> 00:04:14.050
Every connected
triangulated manifold--

00:04:14.050 --> 00:04:15.300
this is a very general result.

00:04:15.300 --> 00:04:17.536
It actually holds
in any dimension.

00:04:17.536 --> 00:04:19.910
We're going to think about
two dimensional sources in 3D,

00:04:19.910 --> 00:04:21.493
but it could be D
dimensional surfaces

00:04:21.493 --> 00:04:23.963
in D plus 1 dimensions.

00:04:23.963 --> 00:04:26.740
--has a vertex unfolding.

00:04:34.640 --> 00:04:38.420
So this works both for
convex and for non-convex.

00:04:38.420 --> 00:04:42.740
The only catch is that every
face has to be a triangle.

00:04:42.740 --> 00:04:44.660
It's an open problem
for something

00:04:44.660 --> 00:04:48.955
like a cube where you actually
have quadrilateral faces.

00:04:55.260 --> 00:05:00.720
So the way we prove
this is to construct

00:05:00.720 --> 00:05:03.125
what we call a facet-path.

00:05:08.640 --> 00:05:14.330
This is a path that
alternates between visiting

00:05:14.330 --> 00:05:22.910
faces, triangles, and vertices.

00:05:28.490 --> 00:05:31.960
So the idea is you
have some-- say

00:05:31.960 --> 00:05:34.690
we're doing a
tetrahedron or something.

00:05:34.690 --> 00:05:36.020
You start at a facet.

00:05:36.020 --> 00:05:37.520
Then, you go to one
of its vertices.

00:05:37.520 --> 00:05:41.340
Then, you go to one of the
facets that shares that vertex.

00:05:41.340 --> 00:05:42.840
Then, you go to one
of the vertices.

00:05:42.840 --> 00:05:44.259
Then, you go to a facet.

00:05:44.259 --> 00:05:45.300
Then, you go to a vertex.

00:05:45.300 --> 00:05:46.490
Then, you go to a facet.

00:05:46.490 --> 00:05:48.380
This is a facet-path.

00:05:48.380 --> 00:05:55.680
It should visit every facet,
every triangle, exactly once.

00:05:59.730 --> 00:06:01.900
Vertices you can
visit multiple times,

00:06:01.900 --> 00:06:04.790
although I think it's a bad idea
to visit the same vertex twice

00:06:04.790 --> 00:06:06.460
in a row.

00:06:06.460 --> 00:06:08.810
Other than that, you can
visit a vertex more than once.

00:06:08.810 --> 00:06:10.964
Maybe I would visit it
again coming up here.

00:06:10.964 --> 00:06:12.630
If there was another
triangle like this,

00:06:12.630 --> 00:06:18.050
I could go up to this vertex
again and over to the triangle.

00:06:18.050 --> 00:06:19.850
So the claim is
facet-paths always

00:06:19.850 --> 00:06:25.390
exist for any triangulated,
connected surface.

00:06:25.390 --> 00:06:28.690
Once you have this
facet-path, you're

00:06:28.690 --> 00:06:36.810
basically golden because you
can lay it out without overlap.

00:06:36.810 --> 00:06:40.970
And that's the next picture.

00:06:40.970 --> 00:06:46.980
So if you have a triangle and
you have some corners of it

00:06:46.980 --> 00:06:49.120
that are hinged to
adjacent triangles,

00:06:49.120 --> 00:06:50.930
you can rotate
that triangle 'til

00:06:50.930 --> 00:06:52.910
it fits in a vertical slab.

00:06:52.910 --> 00:06:55.650
And the hinges are on
the ends of the slab.

00:06:55.650 --> 00:06:58.150
And so each triangle
lives in its own slab.

00:06:58.150 --> 00:06:59.499
Slabs don't intersect.

00:06:59.499 --> 00:07:00.165
No intersection.

00:07:13.970 --> 00:07:15.720
The hard part is really
getting this path.

00:07:15.720 --> 00:07:18.190
Once you have that, you
can just lay it out.

00:07:18.190 --> 00:07:20.540
It's a little bit nontrivial
with obtuse triangles.

00:07:20.540 --> 00:07:23.680
They don't necessarily just
lie along the horizontal line.

00:07:23.680 --> 00:07:25.940
You have to set things
up so that those guys are

00:07:25.940 --> 00:07:28.420
on the boundary,
but you can always

00:07:28.420 --> 00:07:29.965
rotate it so that
that's possible.

00:07:34.260 --> 00:07:44.920
So the real question is, how
do we construct a facet-path?

00:07:53.820 --> 00:07:54.800
All right.

00:07:54.800 --> 00:07:56.740
So I have a bunch of triangles.

00:07:56.740 --> 00:07:59.360
In general, they
make some surface.

00:07:59.360 --> 00:08:04.340
And maybe I should draw a
running example over here.

00:08:04.340 --> 00:08:08.960
Let's think about a triangulated
cube, something simple.

00:08:13.220 --> 00:08:15.499
Imagine there's more
triangles in the back.

00:08:15.499 --> 00:08:17.540
It's a little hard to
think about the 3D picture.

00:08:17.540 --> 00:08:20.600
I would really like to
two dimensionalify it,

00:08:20.600 --> 00:08:22.740
and because this
theorem works, not only

00:08:22.740 --> 00:08:27.620
for a polyhedron-- it works
for any manifold, any sort

00:08:27.620 --> 00:08:30.880
of locally, two dimensional
thing-- it would be nice

00:08:30.880 --> 00:08:32.919
if I could just sort
of cut this open

00:08:32.919 --> 00:08:36.730
and think about a disc instead
of a sphere, topologically.

00:08:36.730 --> 00:08:37.436
And I can.

00:08:37.436 --> 00:08:39.470
I mean this theorem's supposed
to work for discs just as well.

00:08:39.470 --> 00:08:41.110
It should work for
anything that's connected.

00:08:41.110 --> 00:08:43.651
So ideally, I cut it all apart
into lots of little triangles,

00:08:43.651 --> 00:08:46.100
but it has to stay connected.

00:08:46.100 --> 00:08:49.240
So I'll unfold it.

00:08:49.240 --> 00:08:49.920
Why not?

00:08:49.920 --> 00:08:53.420
So I can add some
cuts until I get down

00:08:53.420 --> 00:09:02.160
to a spanning tree of the
faces, a spanning tree

00:09:02.160 --> 00:09:03.921
of the dual graph.

00:09:03.921 --> 00:09:04.420
OK.

00:09:04.420 --> 00:09:09.084
For whatever reason, this is
the triangulation I chose,

00:09:09.084 --> 00:09:10.500
and this is the
unfolding I chose.

00:09:10.500 --> 00:09:13.230
But just keep cutting
edges until cutting an edge

00:09:13.230 --> 00:09:14.990
would cause it to disconnect.

00:09:14.990 --> 00:09:17.740
So the maximal set of cuts,
there are many ways to do it.

00:09:17.740 --> 00:09:19.512
When I unfold, it might
overlap because we

00:09:19.512 --> 00:09:21.220
don't know whether
edge unfoldings exist,

00:09:21.220 --> 00:09:22.590
but that's fine.

00:09:22.590 --> 00:09:24.810
You can think of it as a
two dimensional picture,

00:09:24.810 --> 00:09:26.877
but it might need a few layers.

00:09:26.877 --> 00:09:28.710
We're not going to
actually fold this thing,

00:09:28.710 --> 00:09:31.500
but we're going to cut
this up into a facet-path.

00:09:31.500 --> 00:09:32.910
This could actually
be our input.

00:09:32.910 --> 00:09:34.780
Instead of being
given a polyhedron,

00:09:34.780 --> 00:09:37.270
we're given a disc like
this, a triangulated disc,

00:09:37.270 --> 00:09:38.729
and we have to deal with it.

00:09:38.729 --> 00:09:40.770
Somehow we've got to
construct a facet-path here,

00:09:40.770 --> 00:09:43.020
visit every triangle
exactly once,

00:09:43.020 --> 00:09:44.825
and passing through vertices.

00:09:44.825 --> 00:09:46.200
AUDIENCE: So if
you have overlap,

00:09:46.200 --> 00:09:47.682
it doesn't really matter.

00:09:47.682 --> 00:09:49.640
PROFESSOR: Yeah, overlap
doesn't really matter.

00:09:49.640 --> 00:09:50.980
We're going to cut it
up, and then, we're

00:09:50.980 --> 00:09:52.413
going to splay
out the triangles.

00:09:52.413 --> 00:09:53.788
AUDIENCE: Distances
don't matter.

00:09:53.788 --> 00:09:55.150
Right?

00:09:55.150 --> 00:09:56.620
PROFESSOR: No, uh.

00:09:56.620 --> 00:09:58.620
AUDIENCE: If you're trying
to just find a path--

00:09:58.620 --> 00:09:58.712
PROFESSOR: Right.

00:09:58.712 --> 00:10:00.410
From the perspective
of facet-path,

00:10:00.410 --> 00:10:01.440
distances don't matter.

00:10:01.440 --> 00:10:02.360
It's just topology.

00:10:02.360 --> 00:10:02.859
Yeah.

00:10:02.859 --> 00:10:08.430
You could think of it as a
circle with some decomposition

00:10:08.430 --> 00:10:12.000
into triangles, if you like,
but that's maybe harder

00:10:12.000 --> 00:10:13.850
to think about.

00:10:13.850 --> 00:10:15.630
I got to think
about it this way.

00:10:15.630 --> 00:10:17.970
It's useful because then,
we'll get to Mickey Mouses,

00:10:17.970 --> 00:10:21.000
as we'll see.

00:10:21.000 --> 00:10:30.310
So cut edges until
you can't anymore,

00:10:30.310 --> 00:10:31.925
so until cutting
would disconnect.

00:10:38.520 --> 00:10:40.730
So this means what
you're left with

00:10:40.730 --> 00:10:43.356
will be sort of a tree of faces.

00:10:43.356 --> 00:10:45.480
There'll be no cycles
because if there was a cycle,

00:10:45.480 --> 00:10:49.770
you could cut one of the edges,
and it wouldn't fall apart.

00:10:49.770 --> 00:10:52.570
So obviously,
there's a tree here.

00:10:52.570 --> 00:10:54.980
Now, trees have leaves.

00:10:54.980 --> 00:10:57.260
That's our favorite
lemma lately.

00:10:57.260 --> 00:10:59.480
They have at least two leaves.

00:10:59.480 --> 00:11:01.140
In the case of a
triangulated polygon,

00:11:01.140 --> 00:11:02.330
we usually call them ears.

00:11:02.330 --> 00:11:03.580
So here's a fun term.

00:11:06.700 --> 00:11:11.740
So let's say color the ears.

00:11:11.740 --> 00:11:19.105
These are leaves and in that
tree which call the dual tree.

00:11:22.190 --> 00:11:25.524
So in reality, we're thinking
about a dual graph which

00:11:25.524 --> 00:11:27.190
looks something like
this, where there's

00:11:27.190 --> 00:11:31.160
a vertex for every triangle and
edges for every edge connecting

00:11:31.160 --> 00:11:33.590
triangles, and there's
leaves of that tree.

00:11:33.590 --> 00:11:36.820
But in the original thing,
we think of this triangle

00:11:36.820 --> 00:11:41.180
as being an ear, and
this triangle is an ear.

00:11:41.180 --> 00:11:46.850
And this triangle is an ear,
and this triangle is an ear.

00:11:46.850 --> 00:11:49.150
I like ears because they're
kind of on the boundary,

00:11:49.150 --> 00:11:51.450
on the surface, so
they're just triangles

00:11:51.450 --> 00:11:54.650
that are adjacent to
only one other triangle.

00:11:54.650 --> 00:11:57.770
Now, the next step
is to color what

00:11:57.770 --> 00:12:00.340
are called the
second-level ears.

00:12:00.340 --> 00:12:02.020
I'll call them the
remaining ears,

00:12:02.020 --> 00:12:04.970
if you remove those ears, what
would, then, become an ear.

00:12:09.300 --> 00:12:09.800
All right.

00:12:09.800 --> 00:12:12.531
Now, I wish I had another color.

00:12:12.531 --> 00:12:14.260
Yeah, that's kind of yellowish.

00:12:14.260 --> 00:12:16.060
So this would become an ear.

00:12:16.060 --> 00:12:17.170
This would become an ear.

00:12:17.170 --> 00:12:19.742
This would become an ear,
and this would become an ear.

00:12:22.340 --> 00:12:26.280
And I'm going to stop
there, just two levels.

00:12:26.280 --> 00:12:29.609
What could I get
in this process?

00:12:29.609 --> 00:12:31.150
I mean what it looks
like I'm getting

00:12:31.150 --> 00:12:33.370
is I get an ear and
then, a second-level ear.

00:12:33.370 --> 00:12:35.540
It could be a little
more general than that.

00:12:35.540 --> 00:12:38.490
Maybe, for example, if I
had a triangle like this,

00:12:38.490 --> 00:12:40.190
both of these would
be first-level ears,

00:12:40.190 --> 00:12:42.600
and then, this would
become a second-level ear.

00:12:42.600 --> 00:12:45.080
Turns out that's
all that can happen.

00:12:45.080 --> 00:12:48.852
Because these are
triangles, second-level ear,

00:12:48.852 --> 00:12:51.060
at this point, it's only
adjacent to one other thing.

00:12:51.060 --> 00:12:52.760
So what was it
adjacent to before?

00:12:52.760 --> 00:12:54.580
Well, maybe, one
ear, certainly not

00:12:54.580 --> 00:12:57.000
zero because it wasn't
a first-level ear.

00:12:57.000 --> 00:12:59.270
So at least one
ear, maybe two ears.

00:12:59.270 --> 00:13:00.157
That's it.

00:13:00.157 --> 00:13:02.115
AUDIENCE: Unless there's
only four pieces left.

00:13:02.115 --> 00:13:03.062
Right?

00:13:03.062 --> 00:13:04.520
PROFESSOR: Sorry,
what do you mean?

00:13:04.520 --> 00:13:06.477
AUDIENCE: You could
have three ears.

00:13:06.477 --> 00:13:08.060
PROFESSOR: You could
have three years.

00:13:08.060 --> 00:13:09.180
Yeah, so here I have two.

00:13:09.180 --> 00:13:11.096
I mean the first-level
ear and a second-level,

00:13:11.096 --> 00:13:14.020
or it could be a first-level--
Oh, you're saying at the end.

00:13:14.020 --> 00:13:14.740
Right.

00:13:14.740 --> 00:13:15.970
It could be like this.

00:13:15.970 --> 00:13:18.220
That would only happen
at the very end.

00:13:18.220 --> 00:13:20.230
But yeah, this could
be first-level ears,

00:13:20.230 --> 00:13:21.605
and this is the
second-level ear.

00:13:21.605 --> 00:13:22.810
Good point.

00:13:22.810 --> 00:13:34.040
Most of the time, we
will either get something

00:13:34.040 --> 00:13:37.470
like this, the rest of
the polygons over here--

00:13:37.470 --> 00:13:38.780
so this is a first-level ear.

00:13:38.780 --> 00:13:41.020
This is a second-level ear.

00:13:41.020 --> 00:13:53.110
--or I get-- this is the
Mickey Mouse picture.

00:13:53.110 --> 00:13:55.435
Probably not allowed
to say Mickey Mouse.

00:13:55.435 --> 00:14:00.650
It's under copyright,
but there you go.

00:14:00.650 --> 00:14:02.820
So two first-level
ears, second-level ear.

00:14:02.820 --> 00:14:03.677
Boom.

00:14:03.677 --> 00:14:05.260
This is, most of the
time, what you'll

00:14:05.260 --> 00:14:07.670
get in the base case
of this induction.

00:14:07.670 --> 00:14:09.054
I'm going to pluck
off these ears

00:14:09.054 --> 00:14:10.470
and keep making
the thing smaller.

00:14:10.470 --> 00:14:13.630
At the end, there are a
few cases to think about.

00:14:13.630 --> 00:14:17.175
I have them drawn here
somewhere, base cases.

00:14:20.190 --> 00:14:21.230
Nothing.

00:14:21.230 --> 00:14:21.900
Yeah, well.

00:14:30.500 --> 00:14:32.830
This won't work out if
you have one triangle,

00:14:32.830 --> 00:14:37.670
if you have zero triangles,
which is this empty picture,

00:14:37.670 --> 00:14:39.875
or if you just have two maybe.

00:14:39.875 --> 00:14:41.437
Well, I guess--
Yeah, because then,

00:14:41.437 --> 00:14:42.770
these are both first-level ears.

00:14:42.770 --> 00:14:44.780
It doesn't look quite the same.

00:14:44.780 --> 00:14:50.273
Or maybe just a Mickey Mouse
because those are all-- Well,

00:14:50.273 --> 00:14:51.590
it probably works.

00:14:51.590 --> 00:14:57.082
Anyway, these are the sort
of cases you worry about.

00:14:57.082 --> 00:14:58.790
But for these cases,
I just need to check

00:14:58.790 --> 00:15:00.140
that I can find a facet-path.

00:15:00.140 --> 00:15:02.930
So for example, this one,
I just visit the triangle.

00:15:02.930 --> 00:15:06.820
This one-- I don't
know-- I do it like that.

00:15:06.820 --> 00:15:11.660
In fact, I can make it a
cycle if I want to go crazy.

00:15:11.660 --> 00:15:15.166
This one-- I don't know--
something like this.

00:15:15.166 --> 00:15:17.290
That'd be one way to do it.

00:15:17.290 --> 00:15:18.290
(SINGING) Doo, doo, doo.

00:15:21.400 --> 00:15:24.350
Hm.

00:15:24.350 --> 00:15:26.500
Got to be a little careful.

00:15:26.500 --> 00:15:27.000
[INAUDIBLE]

00:15:30.980 --> 00:15:32.350
Something like that.

00:15:32.350 --> 00:15:33.100
All right.

00:15:33.100 --> 00:15:37.340
But really, I care
about these two cases.

00:15:37.340 --> 00:15:39.856
So what I'm going to
do for each of those--

00:15:39.856 --> 00:15:48.430
I guess this is
still step four--

00:15:48.430 --> 00:15:53.706
is I actually want to make
cycles for these guys.

00:15:53.706 --> 00:15:55.005
I care about that.

00:16:03.440 --> 00:16:05.220
Am I doing something wrong?

00:16:05.220 --> 00:16:05.720
Oh, no.

00:16:05.720 --> 00:16:06.630
Over there.

00:16:06.630 --> 00:16:07.130
Good.

00:16:09.906 --> 00:16:11.780
So in both of these
cases, I can make cycles.

00:16:11.780 --> 00:16:13.720
In this one, in the
base cases, not always.

00:16:13.720 --> 00:16:17.770
Like this guy, hard
to make a cycle.

00:16:17.770 --> 00:16:19.870
But for the two
general cases, if I

00:16:19.870 --> 00:16:22.370
find two ears or three ears,
I can just draw that in.

00:16:22.370 --> 00:16:24.756
So I'll do that for this
example, though, by now,

00:16:24.756 --> 00:16:26.756
it's gotten a little
messy, so let me redraw it.

00:16:30.930 --> 00:16:43.630
So we have-- All right.

00:16:43.630 --> 00:16:49.390
So I'm going to connect these
guys and connect these guys.

00:16:49.390 --> 00:16:51.080
This case, I only
get the two-ear case,

00:16:51.080 --> 00:16:53.220
but I think we'll get
another case shortly.

00:17:01.370 --> 00:17:02.180
OK?

00:17:02.180 --> 00:17:05.400
So obviously, I haven't finished
it, and these are disconnected.

00:17:05.400 --> 00:17:07.750
There's lots of
things left to do.

00:17:07.750 --> 00:17:11.170
But then, the idea is repeat.

00:17:13.690 --> 00:17:15.880
So imagine those
guys as being done.

00:17:15.880 --> 00:17:19.349
I'm left with these
four triangles,

00:17:19.349 --> 00:17:22.640
actually, a little
boring because I

00:17:22.640 --> 00:17:25.089
don't get the Mickey Mouse case.

00:17:25.089 --> 00:17:26.720
But then, this will be an ear.

00:17:26.720 --> 00:17:28.410
This will be a second-level ear.

00:17:28.410 --> 00:17:32.380
And so I'll end up doing this.

00:17:32.380 --> 00:17:34.540
And this will be
an ear, and this

00:17:34.540 --> 00:17:37.030
will be an ear,
second-level here.

00:17:37.030 --> 00:17:40.369
I mean this is actually
the base case, if you will.

00:17:40.369 --> 00:17:42.660
So in general, I just pluck
off two or three triangles,

00:17:42.660 --> 00:17:45.040
repeat until I get
one of the base cases.

00:17:45.040 --> 00:17:48.110
Now, what I have
is not connected,

00:17:48.110 --> 00:17:50.310
but it's a bunch of cycles.

00:17:50.310 --> 00:17:54.545
But there's one cycle here, one
cycle there, one cycle there.

00:17:54.545 --> 00:17:56.170
You could actually
connect some of them

00:17:56.170 --> 00:17:57.211
together, like these two.

00:17:57.211 --> 00:17:59.820
You could go around like
this and then, go like that,

00:17:59.820 --> 00:18:01.780
so that could be a bigger cycle.

00:18:01.780 --> 00:18:04.670
But these cycles are not even
attached to these cycles,

00:18:04.670 --> 00:18:06.017
so it's kind of a problem.

00:18:06.017 --> 00:18:08.350
That's step five is we're
going to fix all the problems.

00:18:11.020 --> 00:18:13.080
That'd be a great title.

00:18:13.080 --> 00:18:17.195
Connect cycles together.

00:18:20.800 --> 00:18:22.800
We're going to do that
by local switches,

00:18:22.800 --> 00:18:24.870
so here's the general picture.

00:18:24.870 --> 00:18:28.660
Suppose you have two adjacent
triangles and two completely

00:18:28.660 --> 00:18:31.940
separate paths.

00:18:31.940 --> 00:18:36.180
So it's a cycle, so
some cycle over here.

00:18:36.180 --> 00:18:38.170
And if this guy shared
a vertex, then I

00:18:38.170 --> 00:18:39.320
could actually
connect them together.

00:18:39.320 --> 00:18:40.861
So suppose it doesn't
share a vertex.

00:18:40.861 --> 00:18:42.640
That means it has
to use these two,

00:18:42.640 --> 00:18:46.510
and then, it--
something like that.

00:18:46.510 --> 00:18:50.940
What I want to do is remove
this edge and remove this edge

00:18:50.940 --> 00:18:55.060
and, instead, add this
edge and that edge.

00:18:55.060 --> 00:18:58.620
So that's a local change, and
now, it will be one big cycle.

00:18:58.620 --> 00:19:00.640
We've probably seen
this trick once or twice

00:19:00.640 --> 00:19:05.840
before, I think in the Mountain
Valley assignment stuff.

00:19:05.840 --> 00:19:09.940
So here I have, for example,
these two triangles,

00:19:09.940 --> 00:19:12.760
which are adjacent, but
the paths don't meet.

00:19:12.760 --> 00:19:15.390
So I'm just going to erase
this edge, put in that one,

00:19:15.390 --> 00:19:17.295
erase this edge,
put in that one.

00:19:17.295 --> 00:19:24.010
Lo and behold, I have a
bigger cycle now, like that.

00:19:24.010 --> 00:19:26.410
Still not everything, so
like these two triangles

00:19:26.410 --> 00:19:27.510
don't touch.

00:19:27.510 --> 00:19:28.400
So erase that edge.

00:19:28.400 --> 00:19:29.444
Erase that edge.

00:19:29.444 --> 00:19:30.110
Put in that one.

00:19:30.110 --> 00:19:31.620
Put in that one.

00:19:31.620 --> 00:19:34.140
I'm preserving, at all
times, that I'm a facet path,

00:19:34.140 --> 00:19:36.270
and I'm merging components.

00:19:36.270 --> 00:19:40.365
So by the end, I'll
have one big component.

00:19:40.365 --> 00:19:42.740
Now, I haven't necessarily
described this as a big cycle,

00:19:42.740 --> 00:19:44.910
but as I've kind of been
hinting, what I do now

00:19:44.910 --> 00:19:46.920
is take an Euler tour
around this thing.

00:19:46.920 --> 00:19:48.870
We've seen Euler tours.

00:19:48.870 --> 00:19:52.350
All the vertices in this
graph will have even degree.

00:19:52.350 --> 00:19:55.960
And so I can take an
Euler tour, and really, I

00:19:55.960 --> 00:19:59.310
should take what's called
a non-crossing Euler tour.

00:20:01.879 --> 00:20:03.920
Point is you've got a
bunch of cycles that touch.

00:20:03.920 --> 00:20:06.540
You just walk
around the outside.

00:20:06.540 --> 00:20:08.482
That will visit all the cycles.

00:20:08.482 --> 00:20:10.190
It'll visit all these
edges exactly once,

00:20:10.190 --> 00:20:11.850
and that will actually
be a facet-path.

00:20:18.340 --> 00:20:20.778
And we're done.

00:20:20.778 --> 00:20:24.210
Now, I have a facet-path
for a triangulated cube.

00:20:24.210 --> 00:20:26.110
So I can splay out
those triangles,

00:20:26.110 --> 00:20:28.940
get a non-overlapping
chain like this.

00:20:28.940 --> 00:20:33.890
Actually, it's probably the
top one, something like that,

00:20:33.890 --> 00:20:34.390
might be.

00:20:34.390 --> 00:20:36.640
I may not have matched exactly
what's in the textbook.

00:20:40.360 --> 00:20:41.500
Cool.

00:20:41.500 --> 00:20:44.480
One slight detail is I was
sort of waving my hands,

00:20:44.480 --> 00:20:47.430
assuming there was
actually a cycle here.

00:20:47.430 --> 00:20:48.900
I really only need a path.

00:20:48.900 --> 00:20:52.270
In fact, there won't always be
a cycle because at the very end,

00:20:52.270 --> 00:20:53.930
you're not able to
construct a cycle.

00:20:53.930 --> 00:20:56.135
So that will actually
cause you to make--

00:20:56.135 --> 00:20:59.690
if I do something like
this, so at least it

00:20:59.690 --> 00:21:02.510
can connect to other things.

00:21:02.510 --> 00:21:05.702
That will cause you make
two vertices of odd degree.

00:21:05.702 --> 00:21:07.160
But that's OK
because there's still

00:21:07.160 --> 00:21:10.850
an Euler path that starts at one
of the vertices of odd degree,

00:21:10.850 --> 00:21:12.600
visits all the other
edges, and then,

00:21:12.600 --> 00:21:15.460
comes to the other
vertex of odd degree.

00:21:15.460 --> 00:21:16.925
And I just need a path.

00:21:16.925 --> 00:21:19.050
You can actually characterize
when you get a cycle.

00:21:19.050 --> 00:21:24.860
It's when the original thing
is not too colorable, I think.

00:21:24.860 --> 00:21:28.960
Anyway, that's vertex unfolding.

00:21:28.960 --> 00:21:29.710
It's kind of easy.

00:21:32.470 --> 00:21:34.837
I think we solved most of
it in like an afternoon.

00:21:34.837 --> 00:21:35.545
We had this idea.

00:21:35.545 --> 00:21:39.785
It was cool, and then, we
solved it kind of quickly.

00:21:39.785 --> 00:21:41.090
That's how it often goes.

00:21:41.090 --> 00:21:44.734
Once you have a cool
problem, it falls quickly.

00:21:44.734 --> 00:21:47.400
There's lots of interesting open
problems remaining about vertex

00:21:47.400 --> 00:21:49.900
unfolding, and they
seem a lot harder.

00:21:49.900 --> 00:21:53.920
So for example, what if I have
non-triangulated polyhedra?

00:21:53.920 --> 00:21:56.710
And natural version is to think
about what we were originally

00:21:56.710 --> 00:21:58.382
trying to attack,
convex polyhedra.

00:21:58.382 --> 00:22:00.090
This turned out to
not require convexity.

00:22:00.090 --> 00:22:03.290
But what about convex
polyhedra, not triangulated?

00:22:03.290 --> 00:22:05.330
Is there always a
vertex unfolding?

00:22:05.330 --> 00:22:07.490
We don't know about
edge unfoldings.

00:22:07.490 --> 00:22:11.620
And the answer is no.

00:22:11.620 --> 00:22:13.710
Well, no that's not right.

00:22:13.710 --> 00:22:15.050
Sorry.

00:22:15.050 --> 00:22:17.030
The answer is we don't know.

00:22:17.030 --> 00:22:18.970
What's annoying
about this example

00:22:18.970 --> 00:22:20.610
is that there's no facet-path.

00:22:20.610 --> 00:22:22.620
So there are two things
that could go wrong.

00:22:22.620 --> 00:22:24.350
One is that the
facet-path doesn't exist,

00:22:24.350 --> 00:22:26.690
and that can happen in
this more general scenario.

00:22:26.690 --> 00:22:29.400
And the other is that when
you lay it out, it overlaps.

00:22:29.400 --> 00:22:31.770
Both of these things
could go wrong

00:22:31.770 --> 00:22:33.990
in the general convex case.

00:22:33.990 --> 00:22:36.640
So in this example, this
is a truncated cube.

00:22:36.640 --> 00:22:41.360
There's eight triangles
and only six octagons.

00:22:41.360 --> 00:22:43.847
And if you look, once
you're at a triangle,

00:22:43.847 --> 00:22:45.680
you have to go to an
octagon because there's

00:22:45.680 --> 00:22:47.380
no adjacent triangles.

00:22:47.380 --> 00:22:50.400
So at best, you could alternate
 triangle-octagon-triangle-octagon

00:22:50.400 --> 00:22:52.870
if you want to pack all those
triangles in, but you run out

00:22:52.870 --> 00:22:54.310
of octagons to get there.

00:22:54.310 --> 00:22:58.714
So there's no facet-path,
but maybe, you

00:22:58.714 --> 00:22:59.630
don't need facet-path.

00:22:59.630 --> 00:23:03.960
You could make a tree,
just a little trickier.

00:23:03.960 --> 00:23:06.450
Obviously, if you triangulate
that surface, you're done.

00:23:06.450 --> 00:23:11.030
So the analog of general
unfolding with vertex unfolding

00:23:11.030 --> 00:23:11.830
is trivial.

00:23:11.830 --> 00:23:15.130
You just triangulate, and
then, you use the edge case.

00:23:15.130 --> 00:23:17.110
But if you really only
want to cut along edges,

00:23:17.110 --> 00:23:18.510
this example can be done.

00:23:18.510 --> 00:23:21.450
I mean it has an edge unfolding,
so if it has an edge unfolding,

00:23:21.450 --> 00:23:23.150
it definitely has
a vertex unfolding,

00:23:23.150 --> 00:23:25.010
but we don't know
how to prove it.

00:23:25.010 --> 00:23:27.176
The other thing that could
go wrong is once you have

00:23:27.176 --> 00:23:33.690
octagons, even if you could
find a way to lay them out--

00:23:33.690 --> 00:23:37.630
that's not a very good
octagon-- you can't-- let's say

00:23:37.630 --> 00:23:39.650
if your two hinges
were here and here,

00:23:39.650 --> 00:23:42.110
if that's where you attach
two adjacent pieces,

00:23:42.110 --> 00:23:44.076
you can't fit that
in a vertical strip.

00:23:44.076 --> 00:23:46.450
There's no way to turn it so
it fits in a vertical strip.

00:23:46.450 --> 00:23:49.180
So also this layout
problem doesn't

00:23:49.180 --> 00:23:52.044
work if you have something
more than triangles.

00:23:52.044 --> 00:23:53.585
So some pretty
fascinating questions.

00:23:53.585 --> 00:23:57.210
It's even open for non-convex.

00:23:57.210 --> 00:24:03.460
If I take non-convex polyhedra,
and I want a vertex unfolding--

00:24:03.460 --> 00:24:06.400
let's say all the
faces are convex.

00:24:06.400 --> 00:24:10.635
At the very least, you need
to forbid faces having holes.

00:24:10.635 --> 00:24:17.480
If you remember this
example, the box on a box,

00:24:17.480 --> 00:24:19.720
this also doesn't have
a vertex unfolding

00:24:19.720 --> 00:24:23.220
because still, this guy has to
fit in that little square hole.

00:24:25.840 --> 00:24:27.930
But as long as the
faces don't have holes--

00:24:27.930 --> 00:24:31.310
let's say the faces are convex--
would be a nice version,

00:24:31.310 --> 00:24:36.550
like the Witch's Hat,
the spiked tetrahedron.

00:24:36.550 --> 00:24:38.280
That probably has
a vertex unfolding.

00:24:38.280 --> 00:24:40.902
AUDIENCE: If you triangulate
that, [INAUDIBLE].

00:24:40.902 --> 00:24:42.360
PROFESSOR: If you
triangulate this,

00:24:42.360 --> 00:24:44.490
it'll definitely have a--
if you triangulate anything,

00:24:44.490 --> 00:24:45.740
it'll have a vertex unfolding.

00:24:45.740 --> 00:24:47.380
Yeah.

00:24:47.380 --> 00:24:47.880
All right.

00:24:47.880 --> 00:24:50.110
That's all I want to say
about vertex unfolding,

00:24:50.110 --> 00:24:53.060
and that's sort of addressing
edge unfolding of convex

00:24:53.060 --> 00:24:57.060
polyhedra, or actually,
both of these.

00:24:57.060 --> 00:24:59.485
Now, I'd like to go to
sort of the real problem.

00:24:59.485 --> 00:25:01.360
This is one of my favorite
problems, I think.

00:25:01.360 --> 00:25:04.520
A bunch of us posed it in '98,
which was right when I was--

00:25:04.520 --> 00:25:08.220
or '99, right when
I was starting out.

00:25:08.220 --> 00:25:11.020
See, it's tantalizing, in
some ways more natural,

00:25:11.020 --> 00:25:13.566
because it's nice to
allow cuts anywhere.

00:25:13.566 --> 00:25:15.440
And it could potentially
work for everything.

00:25:15.440 --> 00:25:19.850
I conjecture every non-convex
polyhedron without boundary

00:25:19.850 --> 00:25:22.220
can be generally
unfolded, and there's

00:25:22.220 --> 00:25:26.220
some really good evidence for
this as of a couple years ago.

00:25:26.220 --> 00:25:50.720
That's what I want
to talk about,

00:25:50.720 --> 00:25:52.045
which is orthogonal polyhedra.

00:25:58.810 --> 00:26:02.120
This is one of my favorite
unfolding results.

00:26:02.120 --> 00:26:08.830
It's by Mirela Damian, Robin
Flatland, and Joe O'Rourke.

00:26:08.830 --> 00:26:11.530
They've done a lot of work
in this unfolding area.

00:26:11.530 --> 00:26:14.880
An orthogonal polyhedron is
one where all the faces are

00:26:14.880 --> 00:26:17.640
perpendicular to one of
the three coordinate axes.

00:26:17.640 --> 00:26:21.160
So for example, here is
a orthogonal polyhedron

00:26:21.160 --> 00:26:22.726
I drew this morning.

00:26:22.726 --> 00:26:24.470
If you want to draw
orthogonal polyhedra,

00:26:24.470 --> 00:26:26.880
Google SketchUp
makes it really easy,

00:26:26.880 --> 00:26:30.900
and you can add
shadows and texture.

00:26:30.900 --> 00:26:32.970
So there are three
kinds of faces.

00:26:32.970 --> 00:26:37.230
There's the ones perpendicular
to x, like these guys.

00:26:37.230 --> 00:26:40.470
There's the ones
perpendicular to y.

00:26:40.470 --> 00:26:42.494
That's all the yellow faces.

00:26:42.494 --> 00:26:44.160
And there's the ones
perpendicular to z.

00:26:44.160 --> 00:26:45.870
That's these top guys.

00:26:45.870 --> 00:26:47.710
So we call them x-faces,
y-faces, z-faces.

00:26:51.480 --> 00:26:54.060
What we're going to do--
so the theorem is these

00:26:54.060 --> 00:26:56.540
have general unfoldings.

00:26:56.540 --> 00:26:59.520
That's pretty awesome
because every polyhedron

00:26:59.520 --> 00:27:03.780
is approximately orthogonal
if you can voxelize it.

00:27:03.780 --> 00:27:05.469
So this is really
a lot of stuff.

00:27:05.469 --> 00:27:08.010
I would love to generalize this
approach arbitrary polyhedra,

00:27:08.010 --> 00:27:11.900
but that's the
big open question.

00:27:11.900 --> 00:27:13.380
So what do we do?

00:27:13.380 --> 00:27:16.270
Well, we're going to single
out, from this color coding,

00:27:16.270 --> 00:27:18.430
the y-faces.

00:27:18.430 --> 00:27:20.290
Just color them yellow.

00:27:20.290 --> 00:27:21.740
Then, there's all
the other faces.

00:27:21.740 --> 00:27:25.090
Well, they form bands.

00:27:25.090 --> 00:27:26.470
They're cycles.

00:27:26.470 --> 00:27:29.174
They go around in a loop.

00:27:29.174 --> 00:27:32.820
A lot of them here, I've just
drawn as rectangular loops,

00:27:32.820 --> 00:27:36.280
but in general, all those
wooden faces, the x and z-faces,

00:27:36.280 --> 00:27:39.290
will form a bunch of loops.

00:27:39.290 --> 00:27:41.120
And then, there's
the y-faces which

00:27:41.120 --> 00:27:43.495
we're going to have to deal
with, but sort of ignore them

00:27:43.495 --> 00:27:44.374
for a while.

00:27:44.374 --> 00:27:46.040
I should have drawn
it with them erased.

00:27:46.040 --> 00:27:47.230
It would look cool.

00:27:47.230 --> 00:27:50.250
But if you think about
just those bands,

00:27:50.250 --> 00:27:53.270
this is sort of how they're
connected together, this tree.

00:27:53.270 --> 00:27:57.270
There's a big one out here,
and then, it has two children.

00:27:57.270 --> 00:27:59.405
There's this one and this one.

00:27:59.405 --> 00:28:02.450
And then, this child has
one child hanging off of it,

00:28:02.450 --> 00:28:05.120
and this one has two
children hanging off of it.

00:28:05.120 --> 00:28:08.810
So that's these two guys.

00:28:08.810 --> 00:28:12.014
In general, this guy might
have some children hanging off

00:28:12.014 --> 00:28:12.930
the back side as well.

00:28:12.930 --> 00:28:14.880
I'm not going to try to
represent that in this picture.

00:28:14.880 --> 00:28:16.350
There's just a
bunch of children.

00:28:16.350 --> 00:28:17.725
There will be some
front children

00:28:17.725 --> 00:28:18.975
and some back children.

00:28:18.975 --> 00:28:20.850
You pick some root
arbitrarily, and then, you

00:28:20.850 --> 00:28:22.370
have children
going off of there.

00:28:22.370 --> 00:28:26.040
Now, if you're orthogonal
polyhedron has genus 0--

00:28:26.040 --> 00:28:29.100
it's topologically a
sphere-- this will be a tree.

00:28:29.100 --> 00:28:32.730
If it's like a doughnut,
it will have a cycle.

00:28:32.730 --> 00:28:35.420
So this theorem only
applies for our genius zero.

00:28:39.380 --> 00:28:44.370
So we're going to exploit
that that dual drawing, how

00:28:44.370 --> 00:28:47.540
the bands are connected
together, is like a tree.

00:28:47.540 --> 00:28:52.960
So why don't I
write down, a band

00:28:52.960 --> 00:29:09.640
is a cycle of x and z-faces,
and they are connected together

00:29:09.640 --> 00:29:12.610
in a tree.

00:29:12.610 --> 00:29:14.550
Now, the rough
idea is we're going

00:29:14.550 --> 00:29:17.180
to take a depth-first
traversal of this tree.

00:29:17.180 --> 00:29:18.790
We're going to
start at the root,

00:29:18.790 --> 00:29:21.720
work our way down and come
back, work our way down,

00:29:21.720 --> 00:29:23.710
and something like that.

00:29:23.710 --> 00:29:25.360
It's not going to
be quite so simple.

00:29:28.710 --> 00:29:31.910
The challenge, I guess you
could say, is avoiding overlap.

00:29:31.910 --> 00:29:32.410
OK?

00:29:32.410 --> 00:29:34.451
If you wanted to unfold
a band, obviously, a band

00:29:34.451 --> 00:29:36.010
can just unfold straight.

00:29:36.010 --> 00:29:38.630
It's like a nice, long strip.

00:29:38.630 --> 00:29:40.220
So each band,
individually, is fine.

00:29:40.220 --> 00:29:42.386
It's how do you piece those
bands together and then,

00:29:42.386 --> 00:29:45.100
have room for the
yellow faces to attach

00:29:45.100 --> 00:29:49.366
on the sides, no overlap?

00:29:49.366 --> 00:29:53.690
But it can be done with
the awesome, crazy idea

00:29:53.690 --> 00:29:54.815
that we'll get to shortly.

00:29:57.452 --> 00:29:59.160
It's going to start
out kind of innocent,

00:29:59.160 --> 00:30:11.450
but the general
approach is always

00:30:11.450 --> 00:30:18.640
proceed rightward
in the unfolding.

00:30:21.870 --> 00:30:27.495
So the unfolding will
look something like this.

00:30:36.910 --> 00:30:38.587
OK, whatever.

00:30:38.587 --> 00:30:39.670
Always going to the right.

00:30:39.670 --> 00:30:42.540
We start here, and we
might go up and down,

00:30:42.540 --> 00:30:46.080
but we never go left.

00:30:46.080 --> 00:30:49.100
And then, that's going
to be all the band faces.

00:30:49.100 --> 00:30:51.102
All the band stuff will
be connected like that,

00:30:51.102 --> 00:30:53.060
and then, there's going
to be yellow faces that

00:30:53.060 --> 00:30:54.226
can just hang off the sides.

00:30:56.809 --> 00:30:57.850
So these are the y-faces.

00:31:01.140 --> 00:31:03.130
As long as I get
the band to do this,

00:31:03.130 --> 00:31:05.260
y-faces can hang up and down.

00:31:05.260 --> 00:31:07.600
It's not going to
intersect anybody.

00:31:07.600 --> 00:31:08.580
Pretty clear?

00:31:08.580 --> 00:31:10.060
So it's clear if
we could do this,

00:31:10.060 --> 00:31:12.060
we can get non-selfintersection.

00:31:12.060 --> 00:31:15.050
The amazing thing is
that this is possible.

00:31:15.050 --> 00:31:16.900
What this is essentially
a limitation on

00:31:16.900 --> 00:31:19.900
is how far you could
turn your bearing.

00:31:19.900 --> 00:31:21.502
So you start going right.

00:31:21.502 --> 00:31:23.710
You can turn right, but I
could not turn right again.

00:31:23.710 --> 00:31:25.371
I have to turn left next.

00:31:25.371 --> 00:31:27.120
I can actually do two
left turns in a row,

00:31:27.120 --> 00:31:29.145
as long as I was
initially going down.

00:31:29.145 --> 00:31:31.770
I can turn left twice, then,
I could alternate left-right.

00:31:31.770 --> 00:31:32.650
That's always good.

00:31:32.650 --> 00:31:37.940
Or I could turn right twice, but
only if I'm initially going up.

00:31:37.940 --> 00:31:38.780
That's the rules.

00:31:38.780 --> 00:31:41.500
As long as I adhere to
those rules, I'm fine.

00:31:41.500 --> 00:31:43.950
Now, we're going
to heavily exploit

00:31:43.950 --> 00:31:45.760
that we can do
general unfolding,

00:31:45.760 --> 00:31:48.260
that we can subdivide
those strips

00:31:48.260 --> 00:31:50.210
into lots of little pieces.

00:31:50.210 --> 00:31:52.600
We're going to subdivide
into a lot of little pieces,

00:31:52.600 --> 00:32:00.100
an exponential number of pieces,
so this is kind of hard core.

00:32:00.100 --> 00:32:02.210
So here is one example.

00:32:05.430 --> 00:32:07.190
This is a leaf.

00:32:07.190 --> 00:32:09.360
So trees have leaves,
and at the end,

00:32:09.360 --> 00:32:10.860
we're going to have
to visit a leaf.

00:32:10.860 --> 00:32:13.140
So this is one box.

00:32:13.140 --> 00:32:15.250
There's this funny
view, so you can

00:32:15.250 --> 00:32:19.490
see like a mirror on the bottom
and a mirror on the right

00:32:19.490 --> 00:32:21.780
and on the side.

00:32:21.780 --> 00:32:27.850
So this is if you had one
box, here's what you would do.

00:32:27.850 --> 00:32:29.800
And we're actually
assuming-- notice

00:32:29.800 --> 00:32:34.710
this side does not get covered.

00:32:34.710 --> 00:32:36.210
The idea is that
site doesn't exist.

00:32:36.210 --> 00:32:37.920
That's attached to the
rest of the polyhedron,

00:32:37.920 --> 00:32:39.410
so that's where
our parent lives.

00:32:39.410 --> 00:32:42.600
And our parent tells us
you have to start at s,

00:32:42.600 --> 00:32:45.280
and it says you
better finish at t.

00:32:45.280 --> 00:32:49.180
And I want the property
that if initially,

00:32:49.180 --> 00:32:51.720
I think, initially,
you're going right.

00:32:51.720 --> 00:32:55.900
No, it looks like
initially, you're going up.

00:32:55.900 --> 00:32:57.680
It matters.

00:32:57.680 --> 00:32:59.910
You can do stuff,
and then, at the end,

00:32:59.910 --> 00:33:02.060
you should still be facing up.

00:33:02.060 --> 00:33:06.395
So you have to visit all these
faces, but not turn in total.

00:33:06.395 --> 00:33:08.020
And normally, that
would be hard to do.

00:33:08.020 --> 00:33:09.936
If you just tried to
visit one face at a time,

00:33:09.936 --> 00:33:12.640
you can't do that,
but if you visit

00:33:12.640 --> 00:33:15.660
faces multiple times and kind
of weave around in a clever way,

00:33:15.660 --> 00:33:16.880
you can do it.

00:33:16.880 --> 00:33:24.061
So maybe I'll point
with this thing.

00:33:24.061 --> 00:33:24.560
Yeah.

00:33:24.560 --> 00:33:25.910
So I start at s.

00:33:25.910 --> 00:33:27.060
I go up.

00:33:27.060 --> 00:33:28.670
I turn right.

00:33:28.670 --> 00:33:29.700
Now, I better turn left.

00:33:29.700 --> 00:33:32.840
I go down over here, up there.

00:33:32.840 --> 00:33:34.140
I turn left.

00:33:34.140 --> 00:33:36.560
Then, I turn right.

00:33:36.560 --> 00:33:40.420
So if you follow along here,
I just turn right here.

00:33:40.420 --> 00:33:41.890
So now, I go down here.

00:33:41.890 --> 00:33:44.780
And that is a left
turn because it's

00:33:44.780 --> 00:33:46.990
on the bottom, a little
hard to think about.

00:33:46.990 --> 00:33:52.330
So I turn left here, and
then, I go, turn right.

00:33:52.330 --> 00:33:58.900
And then, I go down, turn
left and then, right.

00:33:58.900 --> 00:34:00.560
This is confusing
that I'm upside down.

00:34:00.560 --> 00:34:06.310
And I come to t, and lo and
behold, I'm facing up again.

00:34:06.310 --> 00:34:08.520
In fact, I basically
just zigzagged.

00:34:08.520 --> 00:34:11.231
This would also work if
it was rotated 90 degrees.

00:34:11.231 --> 00:34:13.480
I'd initially be going right
and, then, down and right

00:34:13.480 --> 00:34:14.659
and down and right and down.

00:34:14.659 --> 00:34:16.090
So this can kind
of go in a couple

00:34:16.090 --> 00:34:17.726
of different orientations.

00:34:17.726 --> 00:34:18.600
It's really powerful.

00:34:18.600 --> 00:34:20.474
It also works if t is
on the other side of s.

00:34:20.474 --> 00:34:22.560
You could do sort of the
mirror image traversal.

00:34:22.560 --> 00:34:24.949
Now, obviously, I didn't
cover the entire surface.

00:34:24.949 --> 00:34:27.940
I'm leaving room for
later, but if this

00:34:27.940 --> 00:34:32.710
was all I was going to do, I
would actually sort of fill out

00:34:32.710 --> 00:34:35.360
all those strips, just
kind of extend them.

00:34:35.360 --> 00:34:37.469
It just makes this
kind of fatter.

00:34:37.469 --> 00:34:39.070
So this got a little bigger.

00:34:39.070 --> 00:34:42.290
I've got the first half
and then, the second half.

00:34:42.290 --> 00:34:44.929
This is really glued up there.

00:34:44.929 --> 00:34:47.489
But you can imagine once you
have these sort of paths that

00:34:47.489 --> 00:34:49.889
visit everything,
you just fatten out,

00:34:49.889 --> 00:34:51.889
and it's no big deal.

00:34:51.889 --> 00:34:53.770
And also, in this
case here, we're

00:34:53.770 --> 00:34:56.870
imagining-- oh, this is
actually two of them.

00:34:56.870 --> 00:34:58.040
Fun.

00:34:58.040 --> 00:35:00.770
Two of these strips
joined together.

00:35:00.770 --> 00:35:02.670
And so there's a few side faces.

00:35:02.670 --> 00:35:04.415
They just attach up and down.

00:35:04.415 --> 00:35:06.040
They're not going to
intersect anything

00:35:06.040 --> 00:35:07.770
because this is not
actually below this.

00:35:07.770 --> 00:35:08.686
This is way over here.

00:35:12.330 --> 00:35:16.610
So that's the
leaves, and I still

00:35:16.610 --> 00:35:18.110
haven't gotten to
the exciting part.

00:35:20.940 --> 00:35:23.010
So imagine you have a band.

00:35:23.010 --> 00:35:25.889
Just going to represent
that by this big rectangle,

00:35:25.889 --> 00:35:27.180
and it has a bunch of children.

00:35:27.180 --> 00:35:29.030
Remember, it can
have front children.

00:35:29.030 --> 00:35:31.370
This is down in
the y-coordinate.

00:35:31.370 --> 00:35:37.640
And it could have back children
up in the y-coordinate.

00:35:37.640 --> 00:35:41.070
And suppose I'm actually
attached to some parent,

00:35:41.070 --> 00:35:45.011
let's say, as a down neighbor,
and I start at some s.

00:35:45.011 --> 00:35:46.760
Let's say I'm told you
have to start here.

00:35:46.760 --> 00:35:49.340
You have to finish here, and
you should preserve orientation

00:35:49.340 --> 00:35:52.519
because I don't want to have to
think about whether it turned,

00:35:52.519 --> 00:35:54.060
don't want to have
to depend on that.

00:35:54.060 --> 00:35:56.127
So you can do it.

00:35:56.127 --> 00:35:58.460
Initially, you must be facing
up because immediately I'm

00:35:58.460 --> 00:35:59.892
going to make two right turns.

00:35:59.892 --> 00:36:01.350
And I could handle
two right turns,

00:36:01.350 --> 00:36:03.141
as long as the next
thing I did was a left.

00:36:03.141 --> 00:36:05.210
So I come into
this thing saying,

00:36:05.210 --> 00:36:07.940
look, you're facing--
this is facing up.

00:36:07.940 --> 00:36:09.430
Now, you're facing down.

00:36:09.430 --> 00:36:11.870
You better turn left
next, and by the end,

00:36:11.870 --> 00:36:13.590
I still want to be facing down.

00:36:13.590 --> 00:36:14.090
OK.

00:36:14.090 --> 00:36:15.409
Now, I make two left turns.

00:36:15.409 --> 00:36:16.450
Now, I'm facing up again.

00:36:16.450 --> 00:36:20.230
I tell this guy, you better
turn right next, and preserve.

00:36:20.230 --> 00:36:22.084
At the end, you should
be facing up again.

00:36:22.084 --> 00:36:23.250
Now, I make two right turns.

00:36:23.250 --> 00:36:25.160
Now, I'm facing down,
and so on and so on.

00:36:25.160 --> 00:36:28.380
And here, I'm wrapping
around to here

00:36:28.380 --> 00:36:30.829
because this is actually
a band that cycles around.

00:36:30.829 --> 00:36:31.620
Then, I go in here.

00:36:31.620 --> 00:36:32.520
It's the same thing.

00:36:32.520 --> 00:36:34.820
It's just a little
hard to see because I'm

00:36:34.820 --> 00:36:37.970
drawing it on a flat surface.

00:36:37.970 --> 00:36:40.170
But if it was on a ring,
it would be much clearer.

00:36:40.170 --> 00:36:42.190
Just going left and
right and left and right,

00:36:42.190 --> 00:36:46.570
alternating direction, so that
I preserve my orientation.

00:36:46.570 --> 00:36:50.160
At some point, I get to here.

00:36:50.160 --> 00:36:51.090
I loop around.

00:36:51.090 --> 00:36:53.530
I make a little
wiggle at some point,

00:36:53.530 --> 00:36:55.429
and then, I can visit
all the top neighbors.

00:36:55.429 --> 00:36:57.970
You just have to slightly switch
your orientation, but again,

00:36:57.970 --> 00:37:00.310
preserve that you're doing
left-left-right-right,

00:37:00.310 --> 00:37:02.890
left-left-right-right,
left-left-right-right.

00:37:02.890 --> 00:37:05.030
Then, you will preserve
your orientation.

00:37:05.030 --> 00:37:07.363
You tell each of the children
which way you're initially

00:37:07.363 --> 00:37:10.070
going, and they
can deal with it.

00:37:10.070 --> 00:37:11.969
It's basically telling
you whether s and t

00:37:11.969 --> 00:37:13.510
is like this or the
other way around.

00:37:16.380 --> 00:37:17.350
OK?

00:37:17.350 --> 00:37:20.000
So now, we end up
way up there where

00:37:20.000 --> 00:37:24.100
the lavender edge is at t10.

00:37:24.100 --> 00:37:25.620
Now what?

00:37:25.620 --> 00:37:29.040
We want to come back
here, and I'm not

00:37:29.040 --> 00:37:30.587
allowed to sort of
intersect myself.

00:37:30.587 --> 00:37:32.420
That would be the paper
going into two parts

00:37:32.420 --> 00:37:34.620
of this unfolding,
so that's not good.

00:37:34.620 --> 00:37:37.700
But I have all this
space, so natural thing

00:37:37.700 --> 00:37:40.670
is to just wander from
there back down to here,

00:37:40.670 --> 00:37:42.450
using up the space.

00:37:42.450 --> 00:37:45.650
So it's going to look like this.

00:37:45.650 --> 00:37:49.090
Everything that you
did, you just undo.

00:37:49.090 --> 00:37:51.310
Now, where this is
painful is not only

00:37:51.310 --> 00:37:53.030
do I have to undo
it in this diagram,

00:37:53.030 --> 00:37:54.924
but I have to recursively
undo everything

00:37:54.924 --> 00:37:57.340
I did in here, everything I
didn't in here, and everything

00:37:57.340 --> 00:37:58.400
I did in here.

00:37:58.400 --> 00:38:01.930
So this recursive thing
from this structure

00:38:01.930 --> 00:38:03.360
ends up getting doubled.

00:38:03.360 --> 00:38:05.700
At the parent structure,
it will also get doubled.

00:38:05.700 --> 00:38:07.620
At every level of
the tree, you're

00:38:07.620 --> 00:38:10.144
going to double
what was below you,

00:38:10.144 --> 00:38:12.060
so that's why you get
exponential, in general.

00:38:12.060 --> 00:38:21.941
If your tree is ugly
like something like this,

00:38:21.941 --> 00:38:23.690
you'll start with
something nice and small

00:38:23.690 --> 00:38:26.100
down here, maybe
constant number of terms.

00:38:26.100 --> 00:38:26.970
Then, you'll double.

00:38:26.970 --> 00:38:27.730
Then, you'll double again.

00:38:27.730 --> 00:38:28.490
Then, you'll double again.

00:38:28.490 --> 00:38:30.910
Then, you'll double again,
and it will be exponential.

00:38:30.910 --> 00:38:34.230
So if this is n, the number
of things you're doing here

00:38:34.230 --> 00:38:37.055
is 2 theta n.

00:38:37.055 --> 00:38:38.680
On the other hand,
if your tree happens

00:38:38.680 --> 00:38:43.930
to be nice and balanced,
doubling is not so bad

00:38:43.930 --> 00:38:46.270
because here you'll
have constant.

00:38:46.270 --> 00:38:48.507
This will double
everything below.

00:38:48.507 --> 00:38:51.090
This a double everything below,
but there's only log n levels.

00:38:54.610 --> 00:38:57.486
So is that linear?

00:38:57.486 --> 00:38:59.610
It should be about linear.

00:38:59.610 --> 00:39:03.140
It's certainly 2
to the theta log n,

00:39:03.140 --> 00:39:04.800
and it matters what
this constant is.

00:39:04.800 --> 00:39:09.790
I think it's n or maybe n
squared, but not too bad.

00:39:09.790 --> 00:39:12.330
So if you're lucky and the just
the structure of your bands

00:39:12.330 --> 00:39:14.220
is balanced, it's good.

00:39:14.220 --> 00:39:16.600
In general, though, it's
going to be exponential.

00:39:16.600 --> 00:39:18.420
Open problem.

00:39:18.420 --> 00:39:21.100
Can you deal with these
situations and sort of balance

00:39:21.100 --> 00:39:24.670
them and make them only make
a polynomial number of cuts.

00:39:24.670 --> 00:39:26.320
Certainly be nice.

00:39:26.320 --> 00:39:31.960
Exponential number cuts
is a lot, but it works.

00:39:31.960 --> 00:39:34.380
You can unfold every
orthogonal polyhedron this way.

00:39:34.380 --> 00:39:35.921
I would love to see
an implementation

00:39:35.921 --> 00:39:37.610
of this algorithm.

00:39:37.610 --> 00:39:39.069
You could only do
it in a computer

00:39:39.069 --> 00:39:41.360
because you'd be splicing
into all these little things,

00:39:41.360 --> 00:39:42.960
and it would fall apart.

00:39:42.960 --> 00:39:44.400
Jason?

00:39:44.400 --> 00:39:47.476
AUDIENCE: You've been
making these, I guess,

00:39:47.476 --> 00:39:55.305
gadgets [INAUDIBLE] voxel
would attach just by a side.

00:39:55.305 --> 00:39:59.091
You could imagine it attaching
at a corner attaching

00:39:59.091 --> 00:40:01.550
to multiple sides.

00:40:01.550 --> 00:40:04.655
PROFESSOR: So you're worried
about-- not quite sure.

00:40:07.210 --> 00:40:10.840
What we think about is one
band, which looks something

00:40:10.840 --> 00:40:15.090
like this, attaching
to another band.

00:40:15.090 --> 00:40:17.310
That will always
happen on a face.

00:40:20.582 --> 00:40:22.290
I'm not quite sure
what you're imagining.

00:40:22.290 --> 00:40:29.260
Maybe something like that where
they share a partial face here?

00:40:29.260 --> 00:40:30.665
AUDIENCE: Yeah,
but it could also

00:40:30.665 --> 00:40:31.980
be inset into the [INAUDIBLE].

00:40:31.980 --> 00:40:35.320
PROFESSOR: If it's inset, I'm
cutting with every-- I maybe

00:40:35.320 --> 00:40:37.940
didn't mention that--
through every vertex,

00:40:37.940 --> 00:40:40.230
I'm going to slice
with a y-plane.

00:40:40.230 --> 00:40:42.252
So that will cut into
lots of little strips,

00:40:42.252 --> 00:40:44.460
and then, there's no sort
of overlap with the strips.

00:40:44.460 --> 00:40:47.299
I'm subdividing into
little substrips.

00:40:47.299 --> 00:40:48.840
So that sort of
deals with that issue

00:40:48.840 --> 00:40:51.760
if this was moved that way.

00:40:51.760 --> 00:40:53.592
Then, there will be
three strips, one

00:40:53.592 --> 00:40:55.300
over here, one where
they're overlapping,

00:40:55.300 --> 00:40:57.020
and one on the right.

00:40:57.020 --> 00:40:57.520
Yeah.

00:40:57.520 --> 00:40:58.103
Good question.

00:40:58.103 --> 00:41:02.190
I forgot to mention the
subdivision at the beginning.

00:41:02.190 --> 00:41:05.520
Speaking of subdivision
at the beginning,

00:41:05.520 --> 00:41:09.245
this leads to another notion
which we call grid unfolding.

00:41:37.010 --> 00:41:41.610
So the grid of an
orthogonal polyhedron

00:41:41.610 --> 00:41:45.850
is what you get
when you subdivide

00:41:45.850 --> 00:42:01.730
by extending every
face into a plane

00:42:01.730 --> 00:42:03.455
and cutting with that plane.

00:42:03.455 --> 00:42:05.080
So that's sort of
what I was doing here

00:42:05.080 --> 00:42:06.121
when they're overlapping.

00:42:06.121 --> 00:42:10.439
Even in this picture,
there's like a face here,

00:42:10.439 --> 00:42:11.980
this vertical face,
and so I'd end up

00:42:11.980 --> 00:42:15.755
slicing through this thing
with a band in that direction.

00:42:19.590 --> 00:42:21.927
And I don't know,
this vertex you'll

00:42:21.927 --> 00:42:23.260
end up slicing through this guy.

00:42:26.690 --> 00:42:28.800
So hopefully, you
can imagine that.

00:42:28.800 --> 00:42:31.400
With every vertex,
slice x, y, and z.

00:42:31.400 --> 00:42:32.620
That's another way to do it.

00:42:32.620 --> 00:42:35.840
And that subdivides
in sort of a nice grid

00:42:35.840 --> 00:42:38.370
where every face will
now be a rectangle,

00:42:38.370 --> 00:42:41.730
and rectangles always meet
whole edge to whole edge.

00:42:41.730 --> 00:42:43.400
So it's a nice simplification.

00:42:43.400 --> 00:42:46.870
What I'm proposing is add
those edges to your polyhedron.

00:42:46.870 --> 00:42:49.670
It's kind of like assuming that
you started with unit cubes

00:42:49.670 --> 00:42:54.710
and build something but kept
all the edges of all the cubes.

00:42:54.710 --> 00:42:57.700
I want an edge
unfolding of that.

00:42:57.700 --> 00:42:58.720
Do those exist?

00:42:58.720 --> 00:43:00.545
These are what we
call grid unfoldings.

00:43:07.270 --> 00:43:11.787
So grid unfolding is an
edge unfolding of the grid.

00:43:11.787 --> 00:43:13.745
This only makes sense
for orthogonal polyhedra.

00:43:20.460 --> 00:43:21.730
Open question.

00:43:21.730 --> 00:43:24.300
Do grid unfoldings always exist?

00:43:24.300 --> 00:43:28.170
It's essentially the
orthogonal analog

00:43:28.170 --> 00:43:33.587
of this question, edge
unfolding a convex polyhedra.

00:43:33.587 --> 00:43:35.170
If you want to go
to orthogonal, which

00:43:35.170 --> 00:43:38.832
is like in between convex
and general non-convex,

00:43:38.832 --> 00:43:40.540
maybe you could hope
for grid unfoldings.

00:43:40.540 --> 00:43:42.081
Edge unfoldings
obviously don't work.

00:43:42.081 --> 00:43:45.600
We had lots of examples
where those fail,

00:43:45.600 --> 00:43:49.990
like the cube with little
bites taken out of the edges.

00:43:49.990 --> 00:43:52.220
But grid unfolding, you
get lots of subdivision.

00:43:52.220 --> 00:43:53.590
It might be easy.

00:43:53.590 --> 00:43:55.660
Well, it's not easy.

00:43:55.660 --> 00:43:58.760
I would guess, actually,
it's not possible.

00:43:58.760 --> 00:44:01.810
The next best thing you
could hope for is to refine.

00:44:08.490 --> 00:44:14.880
So you take each of
the grid rectangles

00:44:14.880 --> 00:44:20.350
and divide it into
k by k, so subgrid.

00:44:26.460 --> 00:44:29.780
So ideally, k is one, and
you're not subdividing at all.

00:44:29.780 --> 00:44:33.420
But maybe, you take every
rectangle, divide it in half.

00:44:33.420 --> 00:44:36.640
Maybe that's enough to
then be edge unfoldable.

00:44:36.640 --> 00:44:42.220
That would be sort of a refined
level two grid-like unfolding.

00:44:42.220 --> 00:44:45.590
There are a ton of
results about this.

00:44:45.590 --> 00:44:47.670
They're all partial.

00:44:47.670 --> 00:44:49.610
Obviously, in the
general situation--

00:44:49.610 --> 00:44:51.480
I mean this algorithm
we just covered--

00:44:51.480 --> 00:44:53.720
you can achieve a
refinement of only 2

00:44:53.720 --> 00:44:57.170
to the theta n exponential.

00:44:57.170 --> 00:44:59.030
When can you do better?

00:44:59.030 --> 00:45:03.040
Ideally, you get 1 by 1, but
maybe, you can do something.

00:45:10.875 --> 00:45:11.375
What?

00:45:14.870 --> 00:45:15.630
OK.

00:45:15.630 --> 00:45:16.130
Interesting.

00:45:22.420 --> 00:45:28.620
One thing you could do, with
merely 5 by 4 refinement,

00:45:28.620 --> 00:45:30.690
is something called
Manhattan Towers.

00:45:30.690 --> 00:45:34.329
Let me show you a picture
of Manhattan Tower.

00:45:34.329 --> 00:45:36.120
No that's not a picture
of Manhattan Tower.

00:45:36.120 --> 00:45:39.410
This is more crazy examples
of what it's like to visit.

00:45:39.410 --> 00:45:42.260
This is not-- this
probably is complete,

00:45:42.260 --> 00:45:45.250
but here, there isn't too much
doubling because there's only

00:45:45.250 --> 00:45:47.920
a single child, more
or less, everywhere.

00:45:47.920 --> 00:45:51.350
But the unfolding looks
something like that.

00:45:51.350 --> 00:45:53.160
Here is Manhattan Tower.

00:45:53.160 --> 00:45:59.070
So it has a connected
base on the x-y plane.

00:45:59.070 --> 00:46:04.780
And I want to consider z-slices
as I go up in z-coordinate,

00:46:04.780 --> 00:46:07.810
and I want those z-slices to
get smaller and smaller, always

00:46:07.810 --> 00:46:09.930
contained in what I had before.

00:46:09.930 --> 00:46:11.260
So I never have overhang.

00:46:11.260 --> 00:46:13.550
That's a Manhattan Tower.

00:46:13.550 --> 00:46:16.240
And in that case,
5 by 4 refinement

00:46:16.240 --> 00:46:19.080
is enough to unfold
these things.

00:46:19.080 --> 00:46:22.020
So that's pretty good, still
not perfect, but pretty good.

00:46:22.020 --> 00:46:24.620
And this is by the same
authors, like a year

00:46:24.620 --> 00:46:27.974
before the general result.

00:46:27.974 --> 00:46:29.650
Let's see.

00:46:29.650 --> 00:46:31.350
I think maybe I have a movie.

00:46:31.350 --> 00:46:31.995
Yeah.

00:46:31.995 --> 00:46:33.850
So this algorithm
has been implemented,

00:46:33.850 --> 00:46:36.740
at least in some
simple examples.

00:46:36.740 --> 00:46:37.990
And it kind of nicely unrolls.

00:46:37.990 --> 00:46:41.320
You can see a 5 by 4 refinement
in that little staircase.

00:46:41.320 --> 00:46:44.750
It's, again, to make everything
keep going to the right,

00:46:44.750 --> 00:46:47.630
but here, they find a clever
way to visit all the faces

00:46:47.630 --> 00:46:51.415
without having to revisit,
basically, at all,

00:46:51.415 --> 00:46:53.540
just visiting each face a
constant number of times.

00:46:59.990 --> 00:47:03.530
And then, we can zoom out,
and you get the unfolding.

00:47:03.530 --> 00:47:05.354
So it looks very
similar in spirit.

00:47:05.354 --> 00:47:07.770
Of course, the details is how
do you do all that visiting.

00:47:07.770 --> 00:47:10.970
I'm not going to
cover that here,

00:47:10.970 --> 00:47:13.050
but you get substantially
less refinement

00:47:13.050 --> 00:47:14.100
for that special case.

00:47:18.150 --> 00:47:18.810
Yeah.

00:47:18.810 --> 00:47:20.710
Another case looks like this.

00:47:20.710 --> 00:47:21.380
Boom!

00:47:21.380 --> 00:47:22.555
AUDIENCE: Woah.

00:47:22.555 --> 00:47:23.680
PROFESSOR: Isn't that cool?

00:47:23.680 --> 00:47:24.780
I'll play it again.

00:47:24.780 --> 00:47:27.190
This is just slightly
more special.

00:47:27.190 --> 00:47:30.907
So again-- I have three of them.

00:47:30.907 --> 00:47:31.740
They're so much fun.

00:47:31.740 --> 00:47:33.591
It's like exploding a city.

00:47:33.591 --> 00:47:34.090
Boom!

00:47:37.220 --> 00:47:40.300
So here, the floor
is a rectangle.

00:47:40.300 --> 00:47:42.590
That's the only
additional requirement,

00:47:42.590 --> 00:47:47.270
and again, as you slice upwards,
things only get smaller.

00:47:47.270 --> 00:47:48.140
Here's a bigger one.

00:47:50.760 --> 00:47:52.850
Boom!

00:47:52.850 --> 00:47:54.680
So exciting.

00:47:54.680 --> 00:47:55.700
I could do this all day.

00:47:58.860 --> 00:48:02.970
So I'm not going to
describe how this works,

00:48:02.970 --> 00:48:06.040
but you could almost reconstruct
it from these diagrams.

00:48:06.040 --> 00:48:10.060
This is what we call
an orthogonal terrain.

00:48:10.060 --> 00:48:13.840
This result by Joe O'Rourke.

00:48:13.840 --> 00:48:17.190
Here, you don't need any
refinement, grid unfolding, one

00:48:17.190 --> 00:48:18.097
by one.

00:48:18.097 --> 00:48:18.930
That's pretty sweet.

00:48:21.671 --> 00:48:22.170
All right.

00:48:22.170 --> 00:48:26.400
Next one is what we
call orthostacks.

00:48:26.400 --> 00:48:30.460
These are like a stack of a
bunch of orthogonal polygons,

00:48:30.460 --> 00:48:31.670
a bunch of bands, basically.

00:48:31.670 --> 00:48:33.420
This is where the idea
of bands came from.

00:48:33.420 --> 00:48:37.546
This is from an old paper
in 1998, from the beginning.

00:48:37.546 --> 00:48:39.170
So it's just I have
a band, and then, I

00:48:39.170 --> 00:48:40.350
stack another band on top.

00:48:40.350 --> 00:48:44.372
So each z cross-section
is connected.

00:48:44.372 --> 00:48:45.580
So that's a little different.

00:48:45.580 --> 00:48:48.090
With towers, I could have
multiple towers here.

00:48:48.090 --> 00:48:51.404
I really only want one
tower built slab by slab.

00:48:51.404 --> 00:48:53.320
These things we don't
know how to grid unfold.

00:48:53.320 --> 00:48:56.330
That's an open problem,
but if you refine just

00:48:56.330 --> 00:49:01.360
in z by a factor of 2,
that's enough to unfold.

00:49:01.360 --> 00:49:03.690
So 1 by 2 refinement is
enough for orthostacks.

00:49:12.840 --> 00:49:15.420
Now, you could go
a little crazier

00:49:15.420 --> 00:49:20.030
and allow vertex unfolding
of orthostacks with some grid

00:49:20.030 --> 00:49:24.420
refinement, and in that case,
you don't need any refinement.

00:49:24.420 --> 00:49:27.190
So grid vertex
unfolding orthostacks

00:49:27.190 --> 00:49:30.510
was the title of paper.

00:49:30.510 --> 00:49:33.570
These guys, John Iacono
and Stefan Langerman.

00:49:33.570 --> 00:49:36.050
And it looks
something like this.

00:49:36.050 --> 00:49:38.920
He uses vertex unfolding
to fix the direction.

00:49:38.920 --> 00:49:41.730
Here you were going up, but
you really wanted to go right.

00:49:41.730 --> 00:49:43.180
So it makes things easier.

00:49:43.180 --> 00:49:46.830
And in fact, the other
guys, Damian, Flatland,

00:49:46.830 --> 00:49:50.130
and O'Rourke-- It's got to
be awesome doing geometry

00:49:50.130 --> 00:49:55.030
and your last name is
Flatland, unless she

00:49:55.030 --> 00:49:57.490
does a lot of three
dimensional stuff.

00:49:57.490 --> 00:49:59.110
Irony.

00:49:59.110 --> 00:50:04.234
You can do vertex grid unfolding
of any orthogonal polyhedron

00:50:04.234 --> 00:50:05.400
is what I have written here.

00:50:05.400 --> 00:50:06.608
I haven't actually read that.

00:50:06.608 --> 00:50:08.400
I should read that paper.

00:50:08.400 --> 00:50:09.650
What else do I have?

00:50:09.650 --> 00:50:11.770
Orthotubes.

00:50:11.770 --> 00:50:15.420
Orthotubes, this is
again in the old paper.

00:50:15.420 --> 00:50:20.590
Orthotube is just sort of
thickness one orthogonal tube.

00:50:20.590 --> 00:50:23.095
It could even be closed,
I think, in a loop,

00:50:23.095 --> 00:50:25.320
but here I've shown it open.

00:50:25.320 --> 00:50:27.200
And here, grid
unfolding is enough.

00:50:27.200 --> 00:50:29.090
You just do all the
grid refinement.

00:50:29.090 --> 00:50:32.030
You could even
just do it locally.

00:50:32.030 --> 00:50:35.412
Technically,
there's a slice here

00:50:35.412 --> 00:50:36.870
that might slice
over here, but you

00:50:36.870 --> 00:50:38.161
don't have to worry about that.

00:50:38.161 --> 00:50:40.330
You just subdivide
into a bunch of boxes,

00:50:40.330 --> 00:50:45.250
and this can be unfolded in
a sort of zigzag fashion.

00:50:45.250 --> 00:50:46.850
So 1 by 1.

00:50:46.850 --> 00:50:48.620
You can generalize
this to trees also,

00:50:48.620 --> 00:50:50.110
though, it's not totally known.

00:50:50.110 --> 00:50:52.750
As long as you have
a tree of cubes

00:50:52.750 --> 00:50:56.870
with fairly long connectors
in between the branch points--

00:50:56.870 --> 00:50:59.990
those are called
well-separated orthotrees--

00:50:59.990 --> 00:51:02.090
that works grid unfolding.

00:51:02.090 --> 00:51:03.540
If you don't have
that condition,

00:51:03.540 --> 00:51:05.814
so just have cubes connect
in some treelike fashion,

00:51:05.814 --> 00:51:07.730
it's open whether you
can do a grid unfolding.

00:51:07.730 --> 00:51:09.104
We've worked on
that in the past.

00:51:09.104 --> 00:51:15.925
My conjecture's, in general,
you need to omega n refinement.

00:51:24.830 --> 00:51:28.460
My belief is that this
kind of exponential blow

00:51:28.460 --> 00:51:32.720
up is necessary, but that you
can do it only a balance tree.

00:51:32.720 --> 00:51:35.089
So this would give
like linear refinement.

00:51:35.089 --> 00:51:36.880
I think that's necessary,
but we can't even

00:51:36.880 --> 00:51:40.670
prove that you need 2 buy 1
refinement in any example.

00:51:40.670 --> 00:51:44.210
We don't have anything where
grid unfolding is definitely

00:51:44.210 --> 00:51:46.190
impossible.

00:51:46.190 --> 00:51:49.630
It's quite sad state, I guess.

00:51:52.940 --> 00:51:55.440
It's very hard to prove that
there aren't unfoldings, accept

00:51:55.440 --> 00:51:59.372
by exhaustive
enumeration, and that's

00:51:59.372 --> 00:52:00.580
hard to do because it's slow.

00:52:09.604 --> 00:52:11.520
We've come up with lots
of candidate examples,

00:52:11.520 --> 00:52:13.370
but eventually, we
unfold them all.

00:52:16.690 --> 00:52:21.430
I have a bunch of
other open problems.

00:52:21.430 --> 00:52:23.080
This was genus 0.

00:52:23.080 --> 00:52:27.620
Interesting question is can
you do genus higher than 0?

00:52:27.620 --> 00:52:30.670
Orthogonal polyhedra.

00:52:30.670 --> 00:52:32.530
I would guess so,
but I'm not sure.

00:52:32.530 --> 00:52:34.196
I think the biggest
question is, can you

00:52:34.196 --> 00:52:35.440
make this non-orthogonal?

00:52:35.440 --> 00:52:37.850
But then, the bands get messy.

00:52:37.850 --> 00:52:39.661
Haven't been able to do that.

00:52:39.661 --> 00:52:40.160
All right.

00:52:40.160 --> 00:52:42.167
I think those were
the main problems.

00:52:42.167 --> 00:52:42.750
Any questions?

00:52:45.960 --> 00:52:48.250
I'm going to take a
break from unfolding now

00:52:48.250 --> 00:52:50.340
and switch the other
direction of folding.

00:52:53.100 --> 00:53:09.695
So with folding, we're imagining
we're given some polygon,

00:53:09.695 --> 00:53:11.570
and we'd like to make
a polyhedron out of it.

00:53:11.570 --> 00:53:14.840
It's exactly the reverse of
what we've been thinking about.

00:53:17.730 --> 00:53:19.202
When is this possible?

00:53:19.202 --> 00:53:21.660
Now, the rules of the game here
are different from origami.

00:53:21.660 --> 00:53:24.250
With origami, we
showed from any shape,

00:53:24.250 --> 00:53:27.350
you can make anything
if you scale it down.

00:53:27.350 --> 00:53:29.840
But here, I really
want exact coverage.

00:53:29.840 --> 00:53:34.360
Every point here, or let's
say every little patch here,

00:53:34.360 --> 00:53:37.800
should be covered by
exactly one layer over here,

00:53:37.800 --> 00:53:39.330
not allowing multiple layers.

00:53:39.330 --> 00:53:41.590
So this means not
everything is possible.

00:53:41.590 --> 00:53:43.950
I also care about
scale factor, but--

00:53:43.950 --> 00:53:46.190
This one, of course, you
can crease like this,

00:53:46.190 --> 00:53:49.600
and more importantly, you
glue these edges together.

00:53:49.600 --> 00:53:51.240
You glue these edges together.

00:53:51.240 --> 00:53:54.564
The opposite of
cutting is gluing.

00:53:54.564 --> 00:53:56.730
We'll be more formal about
defining gluing, I think,

00:53:56.730 --> 00:53:58.520
next lecture.

00:53:58.520 --> 00:54:00.810
This is just a sort of prelude.

00:54:00.810 --> 00:54:03.440
But you end up gluing--
I want to make something,

00:54:03.440 --> 00:54:05.280
let's say-- in
fact, we're always

00:54:05.280 --> 00:54:08.820
going to talk about
folding convex polyhedra.

00:54:08.820 --> 00:54:14.459
There's very little work
on the non-convex case,

00:54:14.459 --> 00:54:16.250
though, there was
actually a recent result.

00:54:16.250 --> 00:54:19.419
I'll mention that next lecture.

00:54:19.419 --> 00:54:20.960
If you want to make
something convex,

00:54:20.960 --> 00:54:22.510
and therefore,
sphere-like, you have

00:54:22.510 --> 00:54:25.400
to get rid of all the
boundary, so you've got a glue

00:54:25.400 --> 00:54:25.927
every edge.

00:54:25.927 --> 00:54:28.010
You don't have to glue
whole edges to whole edges.

00:54:28.010 --> 00:54:29.180
Maybe you just glue
part of an edge

00:54:29.180 --> 00:54:31.390
to another part of an
edge, but somehow, boundary

00:54:31.390 --> 00:54:32.650
has to get glued up.

00:54:32.650 --> 00:54:34.140
And if you want something
sphere-like, in fact,

00:54:34.140 --> 00:54:35.723
those gluings have
to be non-crossing.

00:54:35.723 --> 00:54:38.130
I have to be able to
draw a picture like this.

00:54:38.130 --> 00:54:41.840
Question is when do these
gluings make a polyhedron?

00:54:41.840 --> 00:54:44.870
That is the question we will
be answering next class.

00:54:44.870 --> 00:54:47.930
But first question is suppose I
gave you one of these pictures.

00:54:47.930 --> 00:54:50.200
I give you a polygon,
and I give you a gluing.

00:54:50.200 --> 00:54:54.030
What this tells you is sort
of how to locally walk around.

00:54:54.030 --> 00:54:57.060
So if I'm here, I
could walk over here.

00:54:57.060 --> 00:55:01.080
I could walk over here, teleport
over there, walk over here,

00:55:01.080 --> 00:55:02.520
teleport over here.

00:55:02.520 --> 00:55:03.410
Whatever.

00:55:03.410 --> 00:55:03.910
OK?

00:55:03.910 --> 00:55:06.720
The gluing tells you locally
what the surface looks like,

00:55:06.720 --> 00:55:09.400
even though you don't know
what it looks like yet in 3D.

00:55:09.400 --> 00:55:13.320
In particular, you can
compute shortest paths here.

00:55:13.320 --> 00:55:15.920
I could compute the shortest
path from this point

00:55:15.920 --> 00:55:18.790
to this point you might
think is a straight line.

00:55:18.790 --> 00:55:20.950
But no, it's not.

00:55:24.375 --> 00:55:25.160
I don't think.

00:55:25.160 --> 00:55:26.410
Or maybe it is.

00:55:26.410 --> 00:55:27.812
Let's see.

00:55:27.812 --> 00:55:31.310
A little tricky.

00:55:31.310 --> 00:55:34.141
AUDIENCE: Should be diagonal
with the bottom square.

00:55:34.141 --> 00:55:35.890
PROFESSOR: Diagonal
with the bottom square

00:55:35.890 --> 00:55:37.640
because these guys are
both in the bottom.

00:55:37.640 --> 00:55:38.230
Very good.

00:55:38.230 --> 00:55:43.820
So this point is the same as
this point, or no, this point.

00:55:43.820 --> 00:55:46.190
Because these get
zipped together.

00:55:46.190 --> 00:55:48.840
This point is the
same as this point,

00:55:48.840 --> 00:55:52.490
so in fact, that diagonal is the
shortest path between those two

00:55:52.490 --> 00:55:53.310
points.

00:55:53.310 --> 00:55:55.060
So you have to think
about it for a while,

00:55:55.060 --> 00:55:57.310
but it turns out, in polynomial
time, you can do that.

00:55:59.890 --> 00:56:02.070
That's cool.

00:56:02.070 --> 00:56:08.670
What I want to show
now is that suppose

00:56:08.670 --> 00:56:10.860
you could make a convex
polyhedron in this way.

00:56:10.860 --> 00:56:14.370
I claim you can only make
one, never more than one

00:56:14.370 --> 00:56:16.440
from the same gluing.

00:56:16.440 --> 00:56:18.376
So I've defined locally
what this thing is.

00:56:18.376 --> 00:56:19.500
It's like a piece of paper.

00:56:19.500 --> 00:56:20.710
I can mangle it around.

00:56:20.710 --> 00:56:22.760
If I want to make
something convex,

00:56:22.760 --> 00:56:24.820
there's only one thing
it could possibly make.

00:56:31.290 --> 00:56:34.390
Finding out what that one
thing is quite a challenge,

00:56:34.390 --> 00:56:37.800
but at least, we can
prove that it's unique.

00:56:37.800 --> 00:56:38.925
Sorry about the screeching.

00:56:41.830 --> 00:56:45.190
This is Cauchy's
rigidity theorem.

00:56:45.190 --> 00:56:49.880
I think we mentioned it
in a previous lecture when

00:56:49.880 --> 00:56:52.266
we were talking about
rigidity and three dimensions

00:56:52.266 --> 00:56:56.169
and like why domes stand up.

00:56:56.169 --> 00:56:57.460
But now, we're going to use it.

00:56:57.460 --> 00:56:58.750
We're actually going
to prove this theorem,

00:56:58.750 --> 00:57:01.140
and we're going to use it to
study these kinds of gluings

00:57:01.140 --> 00:57:04.467
and say there's, at
most, one way to do this.

00:57:04.467 --> 00:57:06.300
There's a lot of ways
to state this theorem,

00:57:06.300 --> 00:57:11.400
but one way is to say, suppose
you have two convex polyhedra,

00:57:11.400 --> 00:57:13.810
and suppose they came
from the same sort

00:57:13.810 --> 00:57:17.580
of intrinsic geometry.

00:57:17.580 --> 00:57:20.450
So there's the
geometry of the faces,

00:57:20.450 --> 00:57:23.060
and there's how they're
connected together.

00:57:23.060 --> 00:57:24.920
So here, initially,
I drew a tree

00:57:24.920 --> 00:57:26.980
of how the faces were
connected together,

00:57:26.980 --> 00:57:30.820
and then, I drew some other
connections like this.

00:57:30.820 --> 00:57:33.630
So the dual here is, of
course, an octahedron.

00:57:33.630 --> 00:57:36.960
But if you have two
convex polyhedra

00:57:36.960 --> 00:57:39.360
and they are combinatorally
equivalent, they

00:57:39.360 --> 00:57:41.570
have the same way that
things are connected

00:57:41.570 --> 00:57:51.710
together, the same graph, and
they have congruent faces,

00:57:51.710 --> 00:57:57.060
so the geometries
match also, then, they

00:57:57.060 --> 00:58:06.954
are actually the same
thing, the same polyhedron.

00:58:06.954 --> 00:58:11.070
AUDIENCE: Is that
something that--

00:58:11.070 --> 00:58:14.137
PROFESSOR: Up to
rotation and translation.

00:58:14.137 --> 00:58:17.217
AUDIENCE: Is it the same
set of congruent faces?

00:58:17.217 --> 00:58:18.050
PROFESSOR: Oh, yeah.

00:58:18.050 --> 00:58:19.591
So when I say
congruent faces, I mean

00:58:19.591 --> 00:58:21.150
according to this equivalence.

00:58:21.150 --> 00:58:22.600
If you take a face
on one that has

00:58:22.600 --> 00:58:24.250
a corresponding
face on the other,

00:58:24.250 --> 00:58:27.100
those two faces should be
congruent, not just any pair,

00:58:27.100 --> 00:58:28.860
and they're not all the same.

00:58:28.860 --> 00:58:30.380
Different faces
can be different,

00:58:30.380 --> 00:58:33.450
but they're identical in pairs.

00:58:33.450 --> 00:58:36.930
So I'm just saying basically,
if you have this picture,

00:58:36.930 --> 00:58:38.330
there's only one realization.

00:58:38.330 --> 00:58:41.450
So this picture defines what
are the geometry of the faces,

00:58:41.450 --> 00:58:43.810
how are they connected together.

00:58:43.810 --> 00:58:45.800
And so if you had
two convex polyhedra

00:58:45.800 --> 00:58:47.880
with that same
underlying diagram,

00:58:47.880 --> 00:58:49.890
they have to be the
same polyhedron.

00:58:49.890 --> 00:58:53.115
That's what we're claiming.

00:58:53.115 --> 00:58:54.490
That's what we're
going to prove.

00:59:04.591 --> 00:59:05.698
Is this one any better?

00:59:05.698 --> 00:59:06.448
Yeah, it's better.

00:59:16.420 --> 00:59:18.370
This is an old theorem.

00:59:18.370 --> 00:59:21.820
You may have heard of Cauchy,
famous French mathematician.

00:59:21.820 --> 00:59:24.262
Cauchy-Schwarz inequality,
all those good things.

00:59:24.262 --> 00:59:25.470
You don't need to know those.

00:59:25.470 --> 00:59:27.240
He proved a lot of things.

00:59:27.240 --> 00:59:29.480
This theorem he
didn't actually prove.

00:59:29.480 --> 00:59:31.880
He wrote a paper about it
or, I think, partly a letter,

00:59:31.880 --> 00:59:34.890
partly a paper in 1813.

00:59:34.890 --> 00:59:38.730
Proof was wrong, and
it was fixed in 1934,

00:59:38.730 --> 00:59:41.010
over 100 years
later, by Steinitz.

00:59:41.010 --> 00:59:44.880
So sometimes it's called
Cauchy-Steinitz rigidity

00:59:44.880 --> 00:59:47.250
theorem, although,
usually, Cauchy.

00:59:47.250 --> 00:59:49.116
There's a lemma in
here that's often

00:59:49.116 --> 00:59:50.240
attributed to both of them.

00:59:55.190 --> 01:00:00.550
So it's sort of a
proof by contradiction.

01:00:00.550 --> 01:00:02.490
We want to prove uniqueness.

01:00:02.490 --> 01:00:04.420
So we're supposing,
well, maybe, there's

01:00:04.420 --> 01:00:09.510
two polyhedra, p and
p prime, and they're

01:00:09.510 --> 01:00:12.030
combinatory equivalent and
have matching faces congruent.

01:00:15.370 --> 01:00:24.890
What I want to do is look
at corresponding vertices,

01:00:24.890 --> 01:00:30.760
let's say a vertex v and p and
a vertex v prime and p prime.

01:00:30.760 --> 01:00:35.170
So there corresponding in the
combinatorial equivalence.

01:00:35.170 --> 01:00:41.075
And then, I want to
slice the polyhedra, p

01:00:41.075 --> 01:00:49.820
and p prime, with
an epsilon sphere,

01:00:49.820 --> 01:00:55.530
epsilon radius sphere
centered at v and v prime.

01:01:02.460 --> 01:01:04.750
Quick mention, this
is not true if you

01:01:04.750 --> 01:01:06.500
allow non-convex realizations.

01:01:06.500 --> 01:01:08.770
You may have seen
that example before.

01:01:08.770 --> 01:01:11.910
These have exactly the same
combinatorial structure,

01:01:11.910 --> 01:01:14.824
same geometry on each
face, but one's non-convex,

01:01:14.824 --> 01:01:15.740
and they're different.

01:01:15.740 --> 01:01:18.450
But as long as they're convex,
they're going to be the same.

01:01:18.450 --> 01:01:21.170
In a convex situation, here's
what the slice looks like.

01:01:21.170 --> 01:01:27.610
So here's little
vertex, degree like 5,

01:01:27.610 --> 01:01:30.360
and I slice the polyhedron
with this tiny sphere centered

01:01:30.360 --> 01:01:35.630
at v, not the interior, just
the boundary of the sphere.

01:01:35.630 --> 01:01:37.100
What I get are these arcs.

01:01:37.100 --> 01:01:40.130
They'll be great circular arcs.

01:01:40.130 --> 01:01:42.250
Here we can see
all five of them.

01:01:42.250 --> 01:01:43.610
They're great circular arcs.

01:01:43.610 --> 01:01:44.990
There on the sphere.

01:01:44.990 --> 01:01:46.680
I get a polygon.

01:01:46.680 --> 01:01:48.980
I get a convex
polygon on the sphere.

01:01:55.030 --> 01:01:58.466
Convex spherical
polygons, convex

01:01:58.466 --> 01:01:59.840
because the
polyhedra are convex.

01:01:59.840 --> 01:02:01.130
I actually get two of them.

01:02:01.130 --> 01:02:01.630
Right?

01:02:01.630 --> 01:02:04.695
One for p, one for p prime.

01:02:04.695 --> 01:02:05.195
Polygons.

01:02:07.960 --> 01:02:09.500
What do I know about
those polygons?

01:02:09.500 --> 01:02:13.050
I know they're edge lengths
because the length of an edge

01:02:13.050 --> 01:02:16.300
here is equal to-- if
this is a unit sphere,

01:02:16.300 --> 01:02:18.800
if I rescale the
epsilon to be 1,

01:02:18.800 --> 01:02:21.660
that edge length is
actually this angle.

01:02:21.660 --> 01:02:25.440
That angle is an angle of
the face at the vertex.

01:02:25.440 --> 01:02:26.686
So I know all the angles.

01:02:26.686 --> 01:02:28.310
I know all the
geometries of the faces.

01:02:28.310 --> 01:02:29.820
I know they're congruent.

01:02:29.820 --> 01:02:34.130
So I know what these edge
lengths are in the sphere.

01:02:34.130 --> 01:02:37.080
What I don't know are these
angles of the polygon.

01:02:37.080 --> 01:02:38.850
I know the lengths
of the polygon,

01:02:38.850 --> 01:02:40.600
but I don't know the
angles of the polygon

01:02:40.600 --> 01:02:46.010
because that's essentially the
dihedral angle of that edge.

01:02:46.010 --> 01:02:48.610
And the worry is, well, maybe
all the edge lengths match.

01:02:48.610 --> 01:02:50.110
We could do this
at every vertex,

01:02:50.110 --> 01:02:52.070
but maybe the dihedral
angles are different.

01:02:52.070 --> 01:02:54.000
Maybe the convex
polyhedron could flex.

01:02:54.000 --> 01:02:55.720
That's why this
is about rigidity.

01:02:55.720 --> 01:02:57.750
Maybe it's flexible,
and then, maybe there

01:02:57.750 --> 01:02:59.916
are two different states.

01:02:59.916 --> 01:03:02.290
All the faces are the same,
and therefore, all those edge

01:03:02.290 --> 01:03:05.644
lengths are the same, but
the angles might differ.

01:03:05.644 --> 01:03:07.560
If p and p prime are
supposed to be different,

01:03:07.560 --> 01:03:10.440
then there must be two
angles that differ.

01:03:10.440 --> 01:03:13.330
So I want to look
at those angles,

01:03:13.330 --> 01:03:31.270
and I want to label vertex
of a spherical polygon.

01:03:31.270 --> 01:03:36.630
So I have n of these spherical
polygons for p n of them

01:03:36.630 --> 01:03:37.900
and p prime.

01:03:37.900 --> 01:03:39.890
Let's look at them in p.

01:03:39.890 --> 01:03:47.780
I'm going to label it plus if
the angle there in p is bigger

01:03:47.780 --> 01:03:50.886
than the angle in p prime.

01:03:50.886 --> 01:03:53.010
Remember I have a correspondence
between everything

01:03:53.010 --> 01:03:54.770
in p and everything and p prime.

01:03:54.770 --> 01:04:00.964
Minus, if the angle is less,
and 0, if the angles are equal.

01:04:00.964 --> 01:04:02.380
So what I want to
show is actually

01:04:02.380 --> 01:04:03.421
all the angles are equal.

01:04:03.421 --> 01:04:05.810
Therefore, the polyhedra
will be identical.

01:04:05.810 --> 01:04:08.937
If all the faces are the same
and all the angles at which you

01:04:08.937 --> 01:04:10.770
join them are the same
and they're connected

01:04:10.770 --> 01:04:12.686
in the same way, they
are the same polyhedron.

01:04:12.686 --> 01:04:15.710
There's no flexibility
there, but it

01:04:15.710 --> 01:04:17.399
could be there are
pluses and minuses.

01:04:17.399 --> 01:04:19.690
But if there's going to be
a problem with this theorem,

01:04:19.690 --> 01:04:21.189
there have to be
pluses and minuses.

01:04:21.189 --> 01:04:23.170
That's the proof
by contradiction.

01:04:23.170 --> 01:04:24.799
So let's look at one of them.

01:04:24.799 --> 01:04:27.090
Let's look at a vertex that
has some pluses or minuses.

01:04:44.470 --> 01:04:47.260
So we have-- it's a
spherical polygon.

01:04:47.260 --> 01:04:53.520
I'm going to draw it more like
a polygon, maybe some pluses,

01:04:53.520 --> 01:04:57.160
some zeroes, some
minuses, whatever.

01:04:57.160 --> 01:05:02.327
First question is could it
be all pluses and zeroes?

01:05:02.327 --> 01:05:03.035
Is that possible?

01:05:09.630 --> 01:05:12.345
No.

01:05:12.345 --> 01:05:13.220
It doesn't look good.

01:05:13.220 --> 01:05:14.530
What does that mean?

01:05:14.530 --> 01:05:16.270
It would mean this
is like a linkage.

01:05:16.270 --> 01:05:17.710
We're used to linkages.

01:05:17.710 --> 01:05:19.190
It just happens
to be on a sphere.

01:05:19.190 --> 01:05:20.260
Forget this on a sphere.

01:05:20.260 --> 01:05:23.074
Think of it is as almost flat.

01:05:23.074 --> 01:05:24.990
What that would mean is
there's some other way

01:05:24.990 --> 01:05:26.146
to draw this thing.

01:05:26.146 --> 01:05:28.020
Basically, there's a
way to flex this linkage

01:05:28.020 --> 01:05:30.320
so that all of these angles
increase and this one

01:05:30.320 --> 01:05:32.070
stays the same.

01:05:32.070 --> 01:05:35.380
How could I get a polygon
where all the angles increase

01:05:35.380 --> 01:05:37.610
and still be convex?

01:05:37.610 --> 01:05:38.860
Ain't possible.

01:05:38.860 --> 01:05:40.360
Why is it not possible?

01:05:40.360 --> 01:05:45.650
I think we've used this
fact a couple lectures ago.

01:05:45.650 --> 01:05:48.161
It's not possible by something
called the Cauchy Arm Lemma.

01:05:51.107 --> 01:05:52.800
This is the part that
Cauchy got wrong,

01:05:52.800 --> 01:05:55.880
so it's also called the
Cauchy-Steinitz Arm Lemma.

01:05:55.880 --> 01:05:57.870
And here's the thing.

01:05:57.870 --> 01:06:04.530
If you have a convex
chain but open chain here.

01:06:04.530 --> 01:06:06.580
There's a missing bar.

01:06:06.580 --> 01:06:08.370
So suppose that even
when you add the bar,

01:06:08.370 --> 01:06:09.470
it's a convex polygon.

01:06:09.470 --> 01:06:11.740
But then, I take a convex
polygon, remove an edge.

01:06:11.740 --> 01:06:14.940
This is what we
call convex chain.

01:06:14.940 --> 01:06:21.280
And if you open all the angles,
increasing all the angles,

01:06:21.280 --> 01:06:34.125
in a convex chain, then
this distance increases.

01:06:42.044 --> 01:06:42.960
It's pretty intuitive.

01:06:42.960 --> 01:06:45.660
I open all these angles.

01:06:45.660 --> 01:06:46.670
So I put plus.

01:06:46.670 --> 01:06:48.940
Some of them could
stay the same,

01:06:48.940 --> 01:06:51.465
but then, this
distance will increase,

01:06:51.465 --> 01:06:52.590
as long as you stay convex.

01:06:55.270 --> 01:06:56.590
I should mention that.

01:06:56.590 --> 01:06:59.650
But in this situation, we know
that both the initial position

01:06:59.650 --> 01:07:02.125
in p and its target position
in p prime are both convex.

01:07:08.420 --> 01:07:09.010
OK.

01:07:09.010 --> 01:07:11.500
Let's just take
that lemma as given.

01:07:11.500 --> 01:07:12.840
This is the one I don't like.

01:07:25.250 --> 01:07:27.660
Then, I know, in particular,
I can't have all pluses

01:07:27.660 --> 01:07:32.530
because then, if I just pretend
one of these edges wasn't here,

01:07:32.530 --> 01:07:36.614
I know that that
distance must increase.

01:07:36.614 --> 01:07:37.530
But it can't increase.

01:07:37.530 --> 01:07:38.821
It's supposed to stay the same.

01:07:38.821 --> 01:07:40.370
The edge lengths are fixed.

01:07:40.370 --> 01:07:42.800
So if they're all pluses
and zeroes, or all minuses

01:07:42.800 --> 01:07:46.335
and zeroes, the same is true
just viewing p prime as p and p

01:07:46.335 --> 01:07:49.009
as p prime.

01:07:49.009 --> 01:07:50.050
They can't be all pluses.

01:07:50.050 --> 01:07:52.040
They can't be all minuses.

01:07:52.040 --> 01:07:54.180
So if there's anything in
there other than zeroes,

01:07:54.180 --> 01:07:57.540
there has to be at least one
plus, at least one minus.

01:07:57.540 --> 01:08:01.050
In particular, there have to
be at least two alternations.

01:08:03.620 --> 01:08:07.390
Alternation is either going
from plus to minus or from minus

01:08:07.390 --> 01:08:08.800
to plus.

01:08:08.800 --> 01:08:10.353
So it could be
something like plus,

01:08:10.353 --> 01:08:14.950
plus, plus, minus, minus,
minus, minus, plus, plus.

01:08:14.950 --> 01:08:16.050
Whatever.

01:08:16.050 --> 01:08:16.550
OK?

01:08:16.550 --> 01:08:19.399
Maybe that's your polygon,
and that's your labeling.

01:08:26.410 --> 01:08:27.190
Is that possible?

01:08:31.089 --> 01:08:33.130
So once you have at least
one plus and one minus,

01:08:33.130 --> 01:08:38.380
you have to have these
two switches at least.

01:08:38.380 --> 01:08:39.693
Could this happen?

01:08:39.693 --> 01:08:40.660
AUDIENCE: No.

01:08:40.660 --> 01:08:42.370
PROFESSOR: No.

01:08:42.370 --> 01:08:43.950
Right.

01:08:43.950 --> 01:08:48.590
Because you pick some chord.

01:08:48.590 --> 01:08:52.002
What do I do here?

01:08:52.002 --> 01:08:53.000
Just subdivide.

01:08:53.000 --> 01:08:53.500
All right.

01:08:53.500 --> 01:08:54.890
Whatever.

01:08:54.890 --> 01:08:58.505
Pick some chord like this one.

01:08:58.505 --> 01:08:59.505
I'm not sure it matters.

01:08:59.505 --> 01:09:00.609
Maybe here?

01:09:00.609 --> 01:09:03.020
Whatever.

01:09:03.020 --> 01:09:05.550
These angles down
here are decreasing.

01:09:05.550 --> 01:09:08.229
Therefore, this
distance decreases.

01:09:08.229 --> 01:09:10.870
The angles up here
are all increasing.

01:09:10.870 --> 01:09:13.200
Therefore, this
distance increases.

01:09:13.200 --> 01:09:15.310
Can't have both.

01:09:15.310 --> 01:09:18.109
So this is also not possible.

01:09:18.109 --> 01:09:20.767
So in fact, you have to have
at least four alternations.

01:09:20.767 --> 01:09:21.475
It's always even.

01:09:27.020 --> 01:09:30.760
And so it has to be at least a
bunch of pluses, then a bunch

01:09:30.760 --> 01:09:32.910
of minuses, then a
bunch of pluses, then

01:09:32.910 --> 01:09:34.560
a bunch of minuses.

01:09:34.560 --> 01:09:37.910
And so we're counting these
transitions from plus to minus.

01:09:37.910 --> 01:09:41.380
This is a lemma that we used
when we were locking trees,

01:09:41.380 --> 01:09:42.000
I think.

01:09:42.000 --> 01:09:43.000
We had a convex polygon.

01:09:43.000 --> 01:09:45.654
I said at least two of the
angles have to decrease,

01:09:45.654 --> 01:09:48.279
or at least two of them have to
increase, one way or the other.

01:09:48.279 --> 01:09:51.460
That's because there have to be
at least two groups of pluses,

01:09:51.460 --> 01:09:55.382
not only at least two pluses
and at least two minuses.

01:09:55.382 --> 01:09:56.840
You might think,
well, what happens

01:09:56.840 --> 01:09:59.465
if there's only three vertices.

01:09:59.465 --> 01:10:01.340
Then, you can't have
these four alternations.

01:10:01.340 --> 01:10:03.450
Well, yeah, you can't have
those four alternation

01:10:03.450 --> 01:10:05.830
because if you have a
triangle, even on the sphere,

01:10:05.830 --> 01:10:07.240
triangles are rigid.

01:10:07.240 --> 01:10:11.917
So you would know if I had
a degree 3 vertex, locally

01:10:11.917 --> 01:10:12.750
that thing is rigid.

01:10:12.750 --> 01:10:13.830
It can't flex at all.

01:10:13.830 --> 01:10:17.090
We're only interested in cases
where it might flex locally

01:10:17.090 --> 01:10:20.230
at a vertex like the pentagon,
like a quadrilateral.

01:10:22.760 --> 01:10:23.550
All right.

01:10:23.550 --> 01:10:25.480
So what?

01:10:25.480 --> 01:10:30.610
This was true at every vertex
that was not entirely zero.

01:10:30.610 --> 01:10:35.807
So if we look at-- let
me write this down.

01:10:35.807 --> 01:10:37.640
I really just care about
the non-zero edges,

01:10:37.640 --> 01:10:38.973
the ones that are plus or minus.

01:10:42.510 --> 01:10:51.520
So I'll call the subgraph
of plus and minus edges.

01:10:54.480 --> 01:11:02.482
The number of alternations
is at least 4 times

01:11:02.482 --> 01:11:03.440
the number of vertices.

01:11:03.440 --> 01:11:10.083
I'm going to denote the number
of vertices by a capital V. OK?

01:11:10.083 --> 01:11:11.030
That's page one.

01:11:13.670 --> 01:11:16.620
We're going to use a trick.

01:11:16.620 --> 01:11:18.120
It has many names, I suppose.

01:11:18.120 --> 01:11:21.000
I usually call it double
counting in combinatorics,

01:11:21.000 --> 01:11:22.500
where you have one
quantity, namely,

01:11:22.500 --> 01:11:23.583
the number of alterations.

01:11:23.583 --> 01:11:25.830
We're going to count it
in two different ways.

01:11:25.830 --> 01:11:27.455
We'll get two different
answers, but we

01:11:27.455 --> 01:11:29.150
know they must end
up being the same.

01:11:29.150 --> 01:11:30.650
And then, we'll get
a contradiction.

01:11:33.410 --> 01:11:35.760
So what's the second
way of counting.

01:11:35.760 --> 01:11:39.390
Well, we counted
local to a vertex.

01:11:39.390 --> 01:11:42.420
The other natural
way to count angles

01:11:42.420 --> 01:11:43.936
is by looking at the faces.

01:11:43.936 --> 01:11:44.810
There are also faces.

01:11:44.810 --> 01:11:46.226
It's sort of the
dual perspective.

01:11:46.226 --> 01:11:48.610
Every phase has a bunch of
angles that have some degree

01:11:48.610 --> 01:11:50.767
or whatever.

01:11:50.767 --> 01:11:52.350
They're really kind
of the same thing.

01:11:52.350 --> 01:11:53.250
Oh, here was Cauchy's Arm Lemma.

01:11:53.250 --> 01:11:53.750
Beautiful.

01:11:56.230 --> 01:11:57.830
If you look at the
alternations as you

01:11:57.830 --> 01:12:02.420
walk around a vertex versus
as you walk around a face,

01:12:02.420 --> 01:12:04.810
you'll end up counting
them the same number.

01:12:04.810 --> 01:12:05.310
Right?

01:12:05.310 --> 01:12:09.290
Here was an alternation
from plus to minus.

01:12:09.290 --> 01:12:10.857
What's interesting
here-- before we

01:12:10.857 --> 01:12:12.440
were thinking of
labeling the vertices

01:12:12.440 --> 01:12:15.380
of the spherical polygon, but in
fact, whatever this edge does,

01:12:15.380 --> 01:12:18.300
it does the same thing local to
that vertex as the thing local

01:12:18.300 --> 01:12:19.020
to that vertex.

01:12:19.020 --> 01:12:21.640
So really the labels are
on the edges of the graph.

01:12:21.640 --> 01:12:24.030
They could be zero,
plus, or minus.

01:12:24.030 --> 01:12:26.660
And if I have an alternation
from plus to minus,

01:12:26.660 --> 01:12:28.710
view from the vertex,
it's also an alternation

01:12:28.710 --> 01:12:30.650
as I walk around the face.

01:12:30.650 --> 01:12:32.800
So instead of counting
by walking around all

01:12:32.800 --> 01:12:35.216
the vertices-- which are just
did, and I got at least four

01:12:35.216 --> 01:12:37.579
at every vertex-- let's
do it from the perspective

01:12:37.579 --> 01:12:38.120
of the faces.

01:12:41.215 --> 01:12:43.590
And we're in this weird subgraph
of plus and minus edges,

01:12:43.590 --> 01:12:44.870
so assume there are no zeroes.

01:12:49.410 --> 01:12:49.910
All right.

01:12:49.910 --> 01:13:02.110
If I have a face of 2
k or 2 k plus 1 edges,

01:13:02.110 --> 01:13:08.500
then it will have, at
most, 2 k alternations.

01:13:13.710 --> 01:13:16.600
So I already have a lower
bound number of alternations.

01:13:16.600 --> 01:13:18.360
I'm going to try and
prove an upper bound,

01:13:18.360 --> 01:13:20.901
sandwich it between, and show
that, actually, the upper bound

01:13:20.901 --> 01:13:23.850
is smaller than the lower bound,
and that's a contradiction.

01:13:23.850 --> 01:13:25.760
So this is kind of obvious.

01:13:25.760 --> 01:13:26.260
Right?

01:13:26.260 --> 01:13:29.350
If you have 2 k vertices, no
more than 2 k alternations,

01:13:29.350 --> 01:13:31.770
slight, the place where we're
making a little improvement

01:13:31.770 --> 01:13:32.975
is for the odd case.

01:13:32.975 --> 01:13:34.600
We know because a
number of alterations

01:13:34.600 --> 01:13:38.990
has to be even you can't get
up to 2 k plus 1 alternations.

01:13:38.990 --> 01:13:41.360
Has to be even because
for every plus to minus,

01:13:41.360 --> 01:13:44.220
there has to be a matching minus
to plus because it's cyclic.

01:13:44.220 --> 01:13:46.460
So even here, you can
only get 2 k alternations.

01:13:46.460 --> 01:13:50.670
That helps us a little
bit because now, we

01:13:50.670 --> 01:13:59.430
can talk about
number of alternation

01:13:59.430 --> 01:14:03.730
is at most two times
the number of triangles,

01:14:03.730 --> 01:14:08.320
f sub 3 is going to be the
number of faces of degree 3,

01:14:08.320 --> 01:14:14.010
plus 4 times the number
of quadrilaterals

01:14:14.010 --> 01:14:17.490
plus 4 times the
number of pentagons

01:14:17.490 --> 01:14:21.937
plus 6 times the number
of hexagons plus--

01:14:21.937 --> 01:14:22.770
why'd I write seven?

01:14:22.770 --> 01:14:23.850
I wrote seven.

01:14:23.850 --> 01:14:26.150
I'm being sloppy.

01:14:26.150 --> 01:14:27.860
At that point, I don't care.

01:14:27.860 --> 01:14:31.050
7 f 7, 8 f 8, 9 f
9-- I'm not going

01:14:31.050 --> 01:14:35.580
to try to be clever
from 6 on, but I'm

01:14:35.580 --> 01:14:38.270
going to be clever at 5 and 3.

01:14:38.270 --> 01:14:39.750
Why 5 and 3?

01:14:39.750 --> 01:14:41.330
As you may remember
from way back

01:14:41.330 --> 01:14:44.160
when, you have a planar
graph-- because polyhedra

01:14:44.160 --> 01:14:45.190
are planar graphs.

01:14:45.190 --> 01:14:47.020
They're convex.

01:14:47.020 --> 01:14:53.700
The average degree is 5?

01:14:53.700 --> 01:14:57.680
Slightly under 6, 4, 3, 2, 1?

01:14:57.680 --> 01:14:59.940
One of those numbers.

01:14:59.940 --> 01:15:01.080
Let's see.

01:15:01.080 --> 01:15:06.120
Should be like 3 n minus 6
edges, so that should be 3.

01:15:09.025 --> 01:15:10.600
Yeah, three.

01:15:10.600 --> 01:15:13.830
So most of the faces are
going to have low degree.

01:15:13.830 --> 01:15:14.580
That's the points.

01:15:14.580 --> 01:15:17.062
So 3 and 5 really
matter, but out here, it

01:15:17.062 --> 01:15:18.020
doesn't matter so much.

01:15:36.750 --> 01:15:39.160
This is kind of a magical proof.

01:15:39.160 --> 01:15:43.130
It shouldn't be intuitive
where it came from,

01:15:43.130 --> 01:15:44.440
but it's really beautiful.

01:15:44.440 --> 01:15:47.390
You'll see as it
all comes together.

01:15:47.390 --> 01:15:48.670
Fun.

01:15:48.670 --> 01:15:51.680
What do I do next?

01:15:51.680 --> 01:15:52.400
Right.

01:15:52.400 --> 01:15:56.000
I want to relate-- I
have a vertex count here.

01:15:56.000 --> 01:16:00.330
I have a face count here,
and I know Euler's formula.

01:16:00.330 --> 01:16:01.902
Hopefully, we know it.

01:16:01.902 --> 01:16:02.735
It's a cool formula.

01:16:06.340 --> 01:16:07.350
V minus E plus F is 2.

01:16:07.350 --> 01:16:09.350
This is the number of
vertices, number of edges,

01:16:09.350 --> 01:16:11.630
number faces is two.

01:16:11.630 --> 01:16:16.494
[? For ?] connected,
planar graphs.

01:16:16.494 --> 01:16:18.910
There are other versions when
you have multiple components

01:16:18.910 --> 01:16:22.420
or when you have
tori, genus, whatever,

01:16:22.420 --> 01:16:24.930
but for convex
polyhedra, this is true.

01:16:24.930 --> 01:16:28.430
So this conveniently
relates vertices to faces,

01:16:28.430 --> 01:16:30.790
but it involves edges.

01:16:30.790 --> 01:16:33.616
So somehow, I have to
bring edges into the mix.

01:16:33.616 --> 01:16:34.370
All right.

01:16:34.370 --> 01:16:38.930
Well, edges.

01:16:38.930 --> 01:16:41.190
I want to count
the number of edges

01:16:41.190 --> 01:16:43.667
in terms of the number of faces.

01:16:43.667 --> 01:16:45.500
I could do it in terms
of vertices or faces.

01:16:45.500 --> 01:16:47.710
The number of edges
is half the sum

01:16:47.710 --> 01:16:49.310
of the degrees of the vertices.

01:16:49.310 --> 01:16:52.240
Remember, that's handshaking
lemma from way back when.

01:16:52.240 --> 01:16:57.200
It's also half the sum of
the degrees of the faces.

01:16:57.200 --> 01:17:00.170
If I look at every face and
I count the number of edges,

01:17:00.170 --> 01:17:02.560
I will end up counting
every edge twice, once

01:17:02.560 --> 01:17:07.515
from each side, so this is
half the number of faces.

01:17:07.515 --> 01:17:10.240
Well, number faces I want
to write in this form.

01:17:10.240 --> 01:17:15.445
So this is half 2-- No, sorry.

01:17:15.445 --> 01:17:16.320
Not the number faces.

01:17:16.320 --> 01:17:18.460
What am I doing?

01:17:18.460 --> 01:17:20.680
Half the sum of the
degrees of the faces.

01:17:23.810 --> 01:17:28.690
So this is half-- what is
the degree of degree 3 faces?

01:17:28.690 --> 01:17:30.340
3.

01:17:30.340 --> 01:17:32.110
What is the degree
of degree 4 faces?

01:17:32.110 --> 01:17:32.881
4.

01:17:32.881 --> 01:17:33.380
And so on.

01:17:41.795 --> 01:17:42.295
Exactly.

01:17:45.567 --> 01:17:47.400
So now, things are
starting to look similar,

01:17:47.400 --> 01:17:51.300
and I want to get some
cancellation going on.

01:17:51.300 --> 01:17:53.530
Use my cheat sheet here.

01:17:53.530 --> 01:17:56.120
I'm going to
rewrite this formula

01:17:56.120 --> 01:18:02.830
as V equals 2 plus E minus F.
Hopefully, that's the same.

01:18:02.830 --> 01:18:04.270
I put E over here.

01:18:04.270 --> 01:18:05.495
I put F over there.

01:18:05.495 --> 01:18:07.650
We'll get this.

01:18:07.650 --> 01:18:08.260
OK.

01:18:08.260 --> 01:18:12.790
So now, I have E
minus F. E is this.

01:18:12.790 --> 01:18:29.390
F-- I have F. Am I
missing something here?

01:18:29.390 --> 01:18:31.430
I'll write the
next one, and I'll

01:18:31.430 --> 01:18:32.680
figure out where it came from.

01:18:52.800 --> 01:18:55.690
Oh, duh, I just skipped a step.

01:18:55.690 --> 01:18:59.620
F is the sum of f3 plus
f4 plus f5 plus f6.

01:18:59.620 --> 01:19:00.215
OK?

01:19:00.215 --> 01:19:03.020
All I did here was
decrease by-- well,

01:19:03.020 --> 01:19:05.540
because there's a half out here,
I decrease each coefficient

01:19:05.540 --> 01:19:09.204
by 2, nothing surprising.

01:19:09.204 --> 01:19:11.470
Whew!

01:19:11.470 --> 01:19:16.610
So I took E, I subtracted F,
just took away one of each.

01:19:16.610 --> 01:19:17.670
Now, I have this formula.

01:19:17.670 --> 01:19:18.690
That's V.

01:19:18.690 --> 01:19:23.850
Now, I also know
that 4V is at most,

01:19:23.850 --> 01:19:26.538
the number of alternations.

01:19:26.538 --> 01:19:27.430
Hm.

01:19:27.430 --> 01:19:29.291
So I could get a
formula for 4V here.

01:19:29.291 --> 01:19:29.790
Right?

01:19:29.790 --> 01:19:36.230
4V is going to be 8 plus
this is going to be like 2.

01:19:36.230 --> 01:19:43.670
So I get 2 f3 plus-- oh
boy, 1 times-- 4 times f4

01:19:43.670 --> 01:19:47.890
plus-- just double
these numbers-- 6 times

01:19:47.890 --> 01:19:50.990
f5 plus-- what's the next one?

01:19:50.990 --> 01:19:54.810
4-- 8 times f6, and so on.

01:20:04.470 --> 01:20:06.240
Yes.

01:20:06.240 --> 01:20:06.790
OK.

01:20:06.790 --> 01:20:15.620
Now, these guys look very
similar to these guys.

01:20:18.560 --> 01:20:20.101
Now, here it gets bigger.

01:20:20.101 --> 01:20:20.600
8.

01:20:20.600 --> 01:20:23.670
It's going to go 10,
instead of 6 and 7.

01:20:23.670 --> 01:20:25.080
We also have a plus 8.

01:20:25.080 --> 01:20:27.660
We don't know whether there
any faces of degree 6 or more,

01:20:27.660 --> 01:20:29.790
so we can't rely on
that, but we have plus 8.

01:20:29.790 --> 01:20:33.402
So somehow, 4V,
which is, at most,

01:20:33.402 --> 01:20:34.860
the number of
alternations-- that's

01:20:34.860 --> 01:20:37.070
the reverse of what
we said before-- 4V

01:20:37.070 --> 01:20:38.970
is, at most, this
number, and yet, it's

01:20:38.970 --> 01:20:40.670
also equal to this number.

01:20:40.670 --> 01:20:41.620
It can't be both.

01:20:41.620 --> 01:20:43.680
This number's at least 8
larger than this number.

01:20:43.680 --> 01:20:46.380
It could be even more
larger, but at least

01:20:46.380 --> 01:20:49.320
that contradiction done.

01:20:49.320 --> 01:20:51.750
This works as long as
there's at least one face,

01:20:51.750 --> 01:20:54.310
meaning there's at
least 1 plus or minus

01:20:54.310 --> 01:20:56.700
because we're only looking at
the subgraph plus and minus

01:20:56.700 --> 01:20:57.530
edges.

01:20:57.530 --> 01:20:59.320
And that is Cauchy's
rigidity theorem.

01:20:59.320 --> 01:21:04.944
Let me quickly tell
you in our situation,

01:21:04.944 --> 01:21:06.610
here, we don't actually
necessarily know

01:21:06.610 --> 01:21:07.526
where the creases are.

01:21:07.526 --> 01:21:10.302
We just know how things
are glued together.

01:21:10.302 --> 01:21:12.010
Even in that situation,
you could sort of

01:21:12.010 --> 01:21:14.890
figure out where the creases
must be because as I said,

01:21:14.890 --> 01:21:17.360
you can compute shortest paths
once you have the gluing.

01:21:17.360 --> 01:21:18.440
So you compute
the shortest paths

01:21:18.440 --> 01:21:20.898
between all pairs of vertices,
something like this picture,

01:21:20.898 --> 01:21:23.040
except you don't know
what it looks like in 3D.

01:21:23.040 --> 01:21:24.748
You can still compute
the shortest paths.

01:21:24.748 --> 01:21:27.030
You know every edge
must be a shortest path.

01:21:27.030 --> 01:21:29.660
So the edges are some
subset of these guys.

01:21:29.660 --> 01:21:33.500
And so you've got lots of
little convex polygons here.

01:21:33.500 --> 01:21:35.360
We know it must make
a convex polyhedron.

01:21:35.360 --> 01:21:38.710
If it made two, Cauchy's
rigidity theorem

01:21:38.710 --> 01:21:40.330
would tell you that
they're the same.

01:21:40.330 --> 01:21:42.090
So even once you
fix the gluing, you

01:21:42.090 --> 01:21:46.590
know that there's a
unique convex realization,

01:21:46.590 --> 01:21:49.710
and there will be a unique
set of edges from the shortest

01:21:49.710 --> 01:21:51.340
paths that actually realize it.

01:21:51.340 --> 01:21:53.184
The next class will
be all about how

01:21:53.184 --> 01:21:55.600
to actually find those gluings
and know that they actually

01:21:55.600 --> 01:21:58.290
will fold into some convex shape
and how to find that convex

01:21:58.290 --> 01:22:01.880
shape, but that's it for today.

