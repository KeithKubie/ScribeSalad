WEBVTT
Kind: captions
Language: en

00:00:00.012 --> 00:00:04.860
We're going to sketch out a solution that uses a similar logarithmic structure to the previous problem.

00:00:04.860 --> 00:00:07.576
I'm going to write it in a different way, though, and I'm going to use a table here.

00:00:07.576 --> 00:00:09.620
So recall in the previous algorithm,

00:00:09.620 --> 00:00:12.384
we began with each node knowing its neighbor 1 hop away.

00:00:12.384 --> 00:00:15.497
In the first step, each node learned the node that was 2 hops away.

00:00:15.497 --> 00:00:18.161
Then in the next step, 4 hops away and so on.

00:00:18.161 --> 00:00:20.814
So we're going to try to use a similar approach here,

00:00:20.814 --> 00:00:22.856
and the algorithm's going to proceed in 2 phases.

00:00:22.856 --> 00:00:29.333
The first phase is filling in this table, so that every node knows the nodes that are 1, 2, 4, and 8 hops away,

00:00:29.333 --> 00:00:33.805
and this if functionally equivalent to find the last element in the link list problem that we just saw,

00:00:33.805 --> 00:00:36.905
except that now we're treating a list of circulars so we wrap around.

00:00:36.905 --> 00:00:41.511
So at each step of this phase, we're going to begin by knowing the node that's K hops away;

00:00:41.511 --> 00:00:43.381
for instance, K equals 1.

00:00:43.381 --> 00:00:45.483
And then we're going to compute per node,

00:00:45.483 --> 00:00:47.984
the node that is 2 K hops away.

00:00:47.984 --> 00:00:53.472
So let's begin. Every node is going to start by knowing the idea of a node that's exactly 1 hop away.

