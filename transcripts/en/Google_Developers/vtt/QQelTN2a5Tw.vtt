WEBVTT
Kind: captions
Language: en

00:00:00.414 --> 00:00:02.580
LAURENCE MORONEY: Welcome
to "Coffee with a Googler"

00:00:02.580 --> 00:00:03.490
from New York City.

00:00:03.490 --> 00:00:04.810
I'm Laurence Moroney.

00:00:04.810 --> 00:00:06.990
On a previous episode,
we met with Ray Tsang

00:00:06.990 --> 00:00:09.280
from the Google
Cloud Platform team.

00:00:09.280 --> 00:00:12.200
But one of the things that we
didn't cover in that episode

00:00:12.200 --> 00:00:16.140
was looking at the back end
of how all of this is done.

00:00:16.140 --> 00:00:19.120
So today I'm meeting with
Francesc Campoy who was one

00:00:19.120 --> 00:00:20.682
of the developers on the team.

00:00:20.682 --> 00:00:22.840
[MUSIC PLAYING]

00:00:22.840 --> 00:00:23.891
Fransesc, welcome.

00:00:23.891 --> 00:00:24.890
FRANCESC CAMPOY: Oh, hi.

00:00:24.890 --> 00:00:26.570
LAURENCE MORONEY: So that seemed
like a really cool project

00:00:26.570 --> 00:00:27.390
to work on.

00:00:27.390 --> 00:00:28.806
FRANCESC CAMPOY:
It was definitely

00:00:28.806 --> 00:00:30.850
one of the coolest
project I've worked at,

00:00:30.850 --> 00:00:32.770
for a very long time, yes.

00:00:32.770 --> 00:00:33.460
Lots of fun.

00:00:33.460 --> 00:00:34.540
LAURENCE MORONEY: It
certainly looked like it.

00:00:34.540 --> 00:00:36.030
Now, when we met
with Ray, we were

00:00:36.030 --> 00:00:38.071
talking about how the
pictures were taken-- well,

00:00:38.071 --> 00:00:40.180
the videos were taken
with an audio cue in them,

00:00:40.180 --> 00:00:41.888
and then they were
uploaded to the cloud.

00:00:41.888 --> 00:00:42.860
But what happened next?

00:00:42.860 --> 00:00:44.901
FRANCESC CAMPOY: So
basically once the phones get

00:00:44.901 --> 00:00:48.770
to upload those files to the
Google Cloud Storage what

00:00:48.770 --> 00:00:51.860
we have is we've set what we
call object modifications,

00:00:51.860 --> 00:00:53.840
or back end modifications.

00:00:53.840 --> 00:00:58.545
So basically, we will
receive some HTTP request,

00:00:58.545 --> 00:01:01.160
and you get to choose where
that HTTP request is sent.

00:01:01.160 --> 00:01:04.319
So we are actually processing
those with [INAUDIBLE],

00:01:04.319 --> 00:01:07.860
and basically, what we say is,
as soon as that file has been

00:01:07.860 --> 00:01:11.430
received, we will
just record that

00:01:11.430 --> 00:01:13.350
and we'll put it into a queue.

00:01:13.350 --> 00:01:14.650
It actually pops up.

00:01:14.650 --> 00:01:19.064
So that way, we're able to say,
oh, we have to handle this.

00:01:19.064 --> 00:01:20.230
For now, we don't handle it.

00:01:20.230 --> 00:01:21.730
We just say, we
have to handle that,

00:01:21.730 --> 00:01:23.630
so we just put it in the queue.

00:01:23.630 --> 00:01:26.260
And then what we
do is then we'll

00:01:26.260 --> 00:01:29.310
have a different process, which
is what we call the extractors,

00:01:29.310 --> 00:01:33.690
and an extractor is actually
just a very simple Python

00:01:33.690 --> 00:01:38.430
script that uses MoviePy
which is this library.

00:01:38.430 --> 00:01:41.730
It's just an easy
way of using FFmpeg.

00:01:41.730 --> 00:01:43.960
FFmpeg is an amazing
library, but it's

00:01:43.960 --> 00:01:45.190
quite complicated to use.

00:01:45.190 --> 00:01:45.710
LAURENCE MORONEY: Yes, it is.

00:01:45.710 --> 00:01:47.084
FRANCESC CAMPOY:
So with MoviePy,

00:01:47.084 --> 00:01:49.300
it just makes it that much
easier, and what we do

00:01:49.300 --> 00:01:52.190
is we just go and find
that single frame.

00:01:52.190 --> 00:01:54.384
There's that noisy
frame, that's when you

00:01:54.384 --> 00:01:55.675
press that little button there.

00:01:55.675 --> 00:01:56.820
It's like, beep.

00:01:56.820 --> 00:02:00.800
We extract that single frame,
and we put that frame back

00:02:00.800 --> 00:02:02.110
into the Google Cloud Storage.

00:02:02.110 --> 00:02:04.609
LAURENCE MORONEY: Now we have
a video of all this in action,

00:02:04.609 --> 00:02:06.226
so why don't we
take a look at it.

00:02:06.226 --> 00:02:08.154
-One, two, three, go.

00:02:08.154 --> 00:02:10.362
[MUSIC PLAYING]

00:02:10.362 --> 00:02:12.070
BRENT MCGOWEN: So
right now, every camera

00:02:12.070 --> 00:02:14.360
is uploading its video
to Google Cloud Storage,

00:02:14.360 --> 00:02:16.580
and you can see in the process,
here it is in the input bucket.

00:02:16.580 --> 00:02:17.600
LAURENCE MORONEY:
Hey, how's it looking?

00:02:17.600 --> 00:02:18.500
BRENT MCGOWEN:
Yeah, he wrote most

00:02:18.500 --> 00:02:19.390
of the code to do all this.

00:02:19.390 --> 00:02:20.520
LAURENCE MORONEY: I
bet he did it in Go.

00:02:20.520 --> 00:02:21.420
BRENT MCGOWEN: He
did in Go, as you can

00:02:21.420 --> 00:02:22.740
see our little gopher up here.

00:02:22.740 --> 00:02:24.323
So what's happening
in the cloud right

00:02:24.323 --> 00:02:27.155
now is our extractors are
going to look into each video,

00:02:27.155 --> 00:02:29.780
and it's going to try and find
a frame that has that audio beep

00:02:29.780 --> 00:02:31.770
to mark the same moment in time.

00:02:31.770 --> 00:02:35.320
Now once we have all the frames
extracted from all the videos,

00:02:35.320 --> 00:02:36.970
it'll put it into
our stitcher process

00:02:36.970 --> 00:02:38.770
in the cloud, which is
on a Compute Engine.

00:02:38.770 --> 00:02:42.220
It'll save it to the output
bucket and Google Cloud Storage

00:02:42.220 --> 00:02:43.720
and it'll show it to you.

00:02:43.720 --> 00:02:44.600
[LAUGHING]

00:02:44.600 --> 00:02:45.043
BRENT MCGOWEN: It's pretty cool.

00:02:45.043 --> 00:02:45.930
LAURENCE MORONEY:
It's pretty cool.

00:02:45.930 --> 00:02:46.810
I like the finger.

00:02:46.810 --> 00:02:49.760
So I can now post that to
Twitter and G+ and stuff like

00:02:49.760 --> 00:02:50.260
that?

00:02:50.260 --> 00:02:50.903
BRENT MCGOWEN: Yeah, exactly.

00:02:50.903 --> 00:02:52.028
LAURENCE MORONEY: Oh, cool.

00:02:52.028 --> 00:02:54.900
I'm going to do it right now.

00:02:54.900 --> 00:02:57.210
And here it is from--
@googlecloudspin

00:02:57.210 --> 00:03:02.420
have tweeted me, and I'm going
to favorite and re-tweet that.

00:03:02.420 --> 00:03:04.847
Bing, done.

00:03:04.847 --> 00:03:06.930
Now I could understand
like having-- in this case,

00:03:06.930 --> 00:03:07.830
it was 19 videos.

00:03:07.830 --> 00:03:09.752
These 19 videos
uploaded, and all these

00:03:09.752 --> 00:03:12.210
processes that need to be kicked
off on them-- that there's

00:03:12.210 --> 00:03:15.210
a synchronization problem there,
so how did you solve that?

00:03:15.210 --> 00:03:17.210
FRANCESC CAMPOY: Yeah,
so that's actually partly

00:03:17.210 --> 00:03:18.720
why we use Pub/Sub.

00:03:18.720 --> 00:03:22.600
So with Pub/Sub, it
allows us to decouple

00:03:22.600 --> 00:03:24.260
how many machines are behind.

00:03:24.260 --> 00:03:28.520
So rather than processing one
single file at a time, what

00:03:28.520 --> 00:03:31.700
we can do is-- if we
have 19 videos, then

00:03:31.700 --> 00:03:33.250
we can 19 extractors.

00:03:33.250 --> 00:03:37.890
So we're making it
as a parallel job.

00:03:37.890 --> 00:03:40.190
And then the problem
is that well, if you

00:03:40.190 --> 00:03:43.370
have 19 things happening
at the same time,

00:03:43.370 --> 00:03:45.120
when are you actually done?

00:03:45.120 --> 00:03:47.360
And that's the hard
part, so synchronizing

00:03:47.360 --> 00:03:48.830
all of those things
and making sure

00:03:48.830 --> 00:03:52.690
that we have all the frames
before we stitch them together.

00:03:52.690 --> 00:03:55.160
And that's actually done,
again with Firebase.

00:03:55.160 --> 00:03:57.110
So we're using Firebase
basically a little

00:03:57.110 --> 00:03:58.320
bit everywhere.

00:03:58.320 --> 00:03:59.130
LAURENCE MORONEY:
Yeah, because Ray

00:03:59.130 --> 00:04:01.380
was talking about that it
was used as a remote control

00:04:01.380 --> 00:04:03.840
effectively for starting
the videos being shot,

00:04:03.840 --> 00:04:05.585
and now you're using
it for synchronizing

00:04:05.585 --> 00:04:06.710
the grabbing in the frames?

00:04:06.710 --> 00:04:09.130
FRANCESC CAMPOY: Yeah,
and actually, we also

00:04:09.130 --> 00:04:13.110
use it even to be
able to visualize

00:04:13.110 --> 00:04:15.480
the status of the whole system.

00:04:15.480 --> 00:04:18.610
So we're able to see,
where are those frames?

00:04:18.610 --> 00:04:19.980
Did we extract them already?

00:04:19.980 --> 00:04:22.730
Are we done stitching
everything together?

00:04:22.730 --> 00:04:23.860
LAURENCE MORONEY: OK, nice.

00:04:23.860 --> 00:04:25.720
Now, so one of the
things-- once you've

00:04:25.720 --> 00:04:27.720
extracted each of these
frames, now these frames

00:04:27.720 --> 00:04:30.220
have to be stitched together
to make it animated GIF, right?

00:04:30.220 --> 00:04:31.420
So how did you do that?

00:04:31.420 --> 00:04:32.836
FRANCESC CAMPOY:
So again, what we

00:04:32.836 --> 00:04:35.780
do is every single time
we're done extracting one

00:04:35.780 --> 00:04:40.430
single frame, we put a
new task into Pub/Sub,

00:04:40.430 --> 00:04:44.600
and then that Pub/Sub is
received by the stitcher,

00:04:44.600 --> 00:04:49.450
we call it, which is just a very
simple program written in Go.

00:04:49.450 --> 00:04:50.290
Of course.

00:04:50.290 --> 00:04:50.950
LAURENCE MORONEY:
I was wondering,

00:04:50.950 --> 00:04:52.840
because people who are watching
this who would know Francesc,

00:04:52.840 --> 00:04:54.880
would be saying, didn't
he say Python earlier?

00:04:54.880 --> 00:04:55.590
FRANCESC CAMPOY: Yeah, I know.

00:04:55.590 --> 00:04:55.850
I know.

00:04:55.850 --> 00:04:57.766
LAURENCE MORONEY: But
you did this part in Go.

00:04:57.766 --> 00:05:02.140
FRANCESC CAMPOY: Yeah, there
was no a good port or binding

00:05:02.140 --> 00:05:04.552
for FFmpeg with Go, so that's--

00:05:04.552 --> 00:05:06.510
LAURENCE MORONEY: Tell
me you're working on it.

00:05:06.510 --> 00:05:07.790
FRANCESC CAMPOY: I'm
actually working on it.

00:05:07.790 --> 00:05:08.100
[LAUGHING]

00:05:08.100 --> 00:05:10.266
FRANCESC CAMPOY: It's kind
of a really huge project,

00:05:10.266 --> 00:05:11.990
so it will take
time, but I think

00:05:11.990 --> 00:05:15.790
it's worth doing, especially
for these kind of demos.

00:05:15.790 --> 00:05:18.560
I mean, it's a fun
demo, so why not?

00:05:18.560 --> 00:05:21.180
So yeah, that
stitcher, what it does

00:05:21.180 --> 00:05:23.870
is every single time it
receives an notification saying,

00:05:23.870 --> 00:05:26.260
oh, this frame is
ready, it checks this.

00:05:26.260 --> 00:05:29.160
Yeah, this frame is ready, but
are all the other ones also

00:05:29.160 --> 00:05:29.910
ready?

00:05:29.910 --> 00:05:34.710
And that's actually done on
checking Firebase continuously.

00:05:34.710 --> 00:05:37.760
Once they are what
ready, what will happen

00:05:37.760 --> 00:05:41.360
is that the stitcher will
download all of those frames

00:05:41.360 --> 00:05:43.570
from the Google
Cloud Storage bucket,

00:05:43.570 --> 00:05:45.800
and stitch them all together
into one single GIF.

00:05:45.800 --> 00:05:47.960
And then put it back into
Google Cloud Storage.

00:05:47.960 --> 00:05:48.918
LAURENCE MORONEY: Nice.

00:05:48.918 --> 00:05:51.811
So I'm hearing there's so many
elements of the Cloud Platform

00:05:51.811 --> 00:05:53.310
being used here,
for Compute Engine.

00:05:53.310 --> 00:05:54.660
You've used App Engine.

00:05:54.660 --> 00:05:55.870
You use Cloud Storage.

00:05:55.870 --> 00:05:58.760
You use Pub/Sub.

00:05:58.760 --> 00:06:01.930
This is a really nice way
of stretching and showing

00:06:01.930 --> 00:06:04.360
people how the different
elements of the Cloud Platform

00:06:04.360 --> 00:06:06.110
can work together,
because sometimes that

00:06:06.110 --> 00:06:07.000
can be confusing to
[? different people. ?]

00:06:07.000 --> 00:06:07.960
FRANCESC CAMPOY: Yeah,
that was a little bit

00:06:07.960 --> 00:06:09.160
the goal of the thing.

00:06:09.160 --> 00:06:11.830
It was basically, what can
we do with the Google Cloud

00:06:11.830 --> 00:06:14.220
Platform that will
show the power of it,

00:06:14.220 --> 00:06:15.890
but at the same
time will be fun?

00:06:15.890 --> 00:06:18.350
So people will get
interested into it

00:06:18.350 --> 00:06:20.355
and say, how does
this actually work?

00:06:20.355 --> 00:06:21.980
LAURENCE MORONEY: So
now if a developer

00:06:21.980 --> 00:06:25.520
wants to learn how you did
what you did, what can they do?

00:06:25.520 --> 00:06:27.650
Is there a blog post or
documentation or anything

00:06:27.650 --> 00:06:27.915
that's--

00:06:27.915 --> 00:06:29.390
FRANCESC CAMPOY: There
is not one blog post.

00:06:29.390 --> 00:06:30.460
There's actually three of them.

00:06:30.460 --> 00:06:31.250
LAURENCE MORONEY: Three?

00:06:31.250 --> 00:06:32.000
FRANCESC CAMPOY: Yes.

00:06:32.000 --> 00:06:33.640
LAURENCE MORONEY: So good,
you did it three times.

00:06:33.640 --> 00:06:34.780
FRANCESC CAMPOY: Yeah.

00:06:34.780 --> 00:06:37.810
So yeah, there's going to be
one talking about a little bit

00:06:37.810 --> 00:06:40.380
the whole project,
how it was created.

00:06:40.380 --> 00:06:43.570
One describes more the Android
part, and then the third one,

00:06:43.570 --> 00:06:47.130
which is more about this cloud
part of how is this, everything

00:06:47.130 --> 00:06:48.200
[? on ?] in the back end.

00:06:48.200 --> 00:06:48.980
LAURENCE MORONEY:
And for folks who'd

00:06:48.980 --> 00:06:51.780
be interested in how you
used FFmpeg or the Go stuff

00:06:51.780 --> 00:06:54.540
that you wrote, are you making
that source code available?

00:06:54.540 --> 00:06:55.915
FRANCESC CAMPOY:
Yeah, yeah, that

00:06:55.915 --> 00:06:58.450
will be open source
quite soon, we hope.

00:06:58.450 --> 00:07:01.060
We're just removing
some hacks and things

00:07:01.060 --> 00:07:02.920
that we had to do for the demos.

00:07:02.920 --> 00:07:03.970
LAURENCE MORONEY: The
usual things people

00:07:03.970 --> 00:07:05.636
have to do before
they open source code.

00:07:05.636 --> 00:07:06.970
FRANCESC CAMPOY: Yeah, exactly.

00:07:06.970 --> 00:07:07.920
It's a demo.

00:07:07.920 --> 00:07:10.367
It has to run, even if the
code is not perfect, so yeah.

00:07:10.367 --> 00:07:12.700
LAURENCE MORONEY: And that
will be announced on the blog

00:07:12.700 --> 00:07:13.450
as well, when that's available?

00:07:13.450 --> 00:07:14.230
FRANCESC CAMPOY: Yeah,
that will be on the blog.

00:07:14.230 --> 00:07:14.530
Yeah.

00:07:14.530 --> 00:07:16.770
LAURENCE MORONEY: So developers,
keep an eye on the Google Cloud

00:07:16.770 --> 00:07:17.560
Platform blog.

00:07:17.560 --> 00:07:18.550
So thank you, Francesc.

00:07:18.550 --> 00:07:19.310
That was awesome.

00:07:19.310 --> 00:07:21.290
And I've learned so much,
and I had so much fun

00:07:21.290 --> 00:07:23.748
actually playing with the demo
and doing my own Cloud Spin.

00:07:23.748 --> 00:07:26.780
So if you want to learn how
to do this for yourself,

00:07:26.780 --> 00:07:28.990
take a look at the blog post
that Francesc mentioned,

00:07:28.990 --> 00:07:30.810
there on the Google
Cloud developers' blog.

00:07:30.810 --> 00:07:32.530
Also, when the source
code is available,

00:07:32.530 --> 00:07:33.655
it will be announced there.

00:07:33.655 --> 00:07:35.446
If you've any questions
for me or if you've

00:07:35.446 --> 00:07:37.110
any questions for
Fransesc, just please

00:07:37.110 --> 00:07:38.559
leave them in the
comments below,

00:07:38.559 --> 00:07:40.350
and tune into the Google
Developers channel

00:07:40.350 --> 00:07:42.332
for more great videos,
including more episodes

00:07:42.332 --> 00:07:44.290
of "Coffee with a Googler,"
and the one that we

00:07:44.290 --> 00:07:46.160
had with the rest of
the Cloud Spin team.

00:07:46.160 --> 00:07:47.720
So thank you very much.

00:07:47.720 --> 00:07:49.270
[MUSIC PLAYING]

