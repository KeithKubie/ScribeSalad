WEBVTT
Kind: captions
Language: en

00:00:01.398 --> 00:00:04.194
[MUSIC PLAYING]

00:00:06.530 --> 00:00:07.800
FILIP: Hello, everyone.

00:00:07.800 --> 00:00:09.680
This is another episode
of the "Boring Show"

00:00:09.680 --> 00:00:12.301
with your favorite
hosts, Emily and me.

00:00:12.301 --> 00:00:13.594
EMILY: Favorite?

00:00:13.594 --> 00:00:14.460
FILIP: Yeah.

00:00:14.460 --> 00:00:19.500
And today, we're going to talk
about the good old Hacker News

00:00:19.500 --> 00:00:23.480
app that some of you might
remember from way earlier.

00:00:23.480 --> 00:00:27.271
We decided to
revisit it because--

00:00:27.271 --> 00:00:29.520
EMILY: There was some clean-up
that needed to be done.

00:00:29.520 --> 00:00:30.210
FILIP: Yeah.

00:00:30.210 --> 00:00:32.110
EMILY: And people had a
couple of questions about--

00:00:32.110 --> 00:00:32.500
FILIP: That's true.

00:00:32.500 --> 00:00:34.460
EMILY: --things we
wanted to [INAUDIBLE]

00:00:34.460 --> 00:00:35.510
off the rough edges.

00:00:35.510 --> 00:00:39.080
FILIP: And also, yeah, we
have some plans for it,

00:00:39.080 --> 00:00:42.080
which we'll keep secret for now.

00:00:42.080 --> 00:00:46.560
So, Emily, you looked at
it, and it was broken.

00:00:46.560 --> 00:00:50.420
EMILY: Yeah, so
I synced the repo

00:00:50.420 --> 00:00:54.830
and tried to run Footer
Run, and it didn't build.

00:00:54.830 --> 00:00:59.630
And the reason is because Dart
2 has come out, and basically,

00:00:59.630 --> 00:01:01.760
a lot of our dependencies--

00:01:01.760 --> 00:01:08.500
package dependencies
in our pub spec

00:01:08.500 --> 00:01:10.700
allowed you to go
up to everything

00:01:10.700 --> 00:01:13.596
but the next major
version number.

00:01:13.596 --> 00:01:15.470
That's-- if you have
that little caret thing.

00:01:15.470 --> 00:01:19.010
Maybe you can put the pub spec.

00:01:19.010 --> 00:01:22.250
But yeah, so that caret
syntax means everything up

00:01:22.250 --> 00:01:24.250
to the next major
version number.

00:01:24.250 --> 00:01:25.100
FILIP: So not 7.0.

00:01:25.100 --> 00:01:25.820
EMILY: Right.

00:01:25.820 --> 00:01:29.450
And because, with Dart 2
coming out, a bunch of things

00:01:29.450 --> 00:01:32.240
bumps there major
version number.

00:01:32.240 --> 00:01:34.010
And since we're
running Dart 2 locally,

00:01:34.010 --> 00:01:36.550
everything was like, I can't
solve these constraints.

00:01:36.550 --> 00:01:38.720
So I had to tweak
the constraints

00:01:38.720 --> 00:01:41.990
on a couple different
things, and mainly, it

00:01:41.990 --> 00:01:44.510
consisted of looking at
what the latest package

00:01:44.510 --> 00:01:46.210
number was in pub.

00:01:46.210 --> 00:01:50.090
If you want to not deal with all
of that, another way to do it

00:01:50.090 --> 00:01:52.040
is just to use the
greater than or equals

00:01:52.040 --> 00:01:55.730
to and then those numbers,
and that will always

00:01:55.730 --> 00:01:59.690
take anything larger, including
the next version number.

00:01:59.690 --> 00:02:01.340
FILIP: So yeah,
so basically this,

00:02:01.340 --> 00:02:06.530
and then we realized that
Build Runner has to be--

00:02:06.530 --> 00:02:09.470
EMILY: Yes, so I made a--

00:02:09.470 --> 00:02:15.440
that actually just updated, and
that required a slight tweak

00:02:15.440 --> 00:02:16.960
in Build Runner's pub specs.

00:02:16.960 --> 00:02:19.460
So I sent them a pull
request, and they actually

00:02:19.460 --> 00:02:20.210
just updated it.

00:02:20.210 --> 00:02:23.720
So I haven't-- right now, it's
pointing to my forked version

00:02:23.720 --> 00:02:24.650
of the repository.

00:02:24.650 --> 00:02:26.240
FILIP: Which is a
good point to make,

00:02:26.240 --> 00:02:32.750
is if you are depending on
someone or something, and you--

00:02:32.750 --> 00:02:36.240
the pub version is not the most
current version, for example,

00:02:36.240 --> 00:02:39.450
or you're tweaking it a
little bit just to make sure,

00:02:39.450 --> 00:02:42.122
you don't need to just
use the version number.

00:02:42.122 --> 00:02:43.580
If you just use
the version number,

00:02:43.580 --> 00:02:47.300
it will just go to [INAUDIBLE]
and get the version there.

00:02:47.300 --> 00:02:49.820
But you can also say, you know
what, I want this from Git

00:02:49.820 --> 00:02:53.030
from this particular URL.

00:02:53.030 --> 00:02:55.820
You can even say the
comment hash, I think,

00:02:55.820 --> 00:02:57.480
and you can even use path.

00:02:57.480 --> 00:03:00.770
So you can just clone
it to yourself--

00:03:00.770 --> 00:03:03.890
you can do whatever you
want with the library

00:03:03.890 --> 00:03:07.110
or with the package,
and then point to it

00:03:07.110 --> 00:03:09.670
with the path instead
of Git or anything else.

00:03:09.670 --> 00:03:12.170
EMILY: Yeah, it can
point to a local path

00:03:12.170 --> 00:03:13.892
on your machine,
which is actually

00:03:13.892 --> 00:03:15.350
what I did before
I committed this,

00:03:15.350 --> 00:03:16.933
and I was like, Filip
needs to use it.

00:03:16.933 --> 00:03:19.950
He doesn't have access
to my local machine.

00:03:19.950 --> 00:03:22.690
Actually, do you
want to edit out--

00:03:22.690 --> 00:03:24.065
or change one of
the numbers back

00:03:24.065 --> 00:03:27.050
to what it was just so they can
see what the error message is?

00:03:27.050 --> 00:03:30.770
Pub will tell you what the
particular packages are

00:03:30.770 --> 00:03:32.300
that it's having problems with.

00:03:32.300 --> 00:03:36.560
FILIP: This was dev
dependency 0.8.0?

00:03:36.560 --> 00:03:37.060
EMILY: Sure.

00:03:37.060 --> 00:03:40.450
FILIP: That's the
thing that-- well, OK.

00:03:40.450 --> 00:03:43.460
EMILY: Instead of 1.0, yeah.

00:03:43.460 --> 00:03:48.100
FILIP: 0.8.0 and put get--

00:03:48.100 --> 00:03:54.274
oh, look, "the current dot
SDK version 2.1," because--

00:03:54.274 --> 00:03:56.690
EMILY: This is actually a
little bit of a complicated one,

00:03:56.690 --> 00:04:03.350
but the error is saying
that Build Runner, up

00:04:03.350 --> 00:04:04.860
to the next major
version number,

00:04:04.860 --> 00:04:10.250
1.0, requires the Dart SDK
to be less than Dart 2.0.

00:04:10.250 --> 00:04:12.470
And because we're
running Dart 2.0,

00:04:12.470 --> 00:04:14.660
we can't run that
version of Build Runner.

00:04:14.660 --> 00:04:18.079
Therefore, we have to update
our Build Runner version.

00:04:18.079 --> 00:04:20.975
FILIP: So we do that
again, and then this

00:04:20.975 --> 00:04:23.195
should be back to normal.

00:04:23.195 --> 00:04:25.385
EMILY: And it's great, yes.

00:04:25.385 --> 00:04:28.490
FILIP: All right, everything
works like last time,

00:04:28.490 --> 00:04:33.420
so if you haven't seen our
previous Flutter "Boring Show"

00:04:33.420 --> 00:04:34.790
with the Hacker News app--

00:04:34.790 --> 00:04:37.123
EMILY: You have lots of
exciting footage to catch up on.

00:04:37.123 --> 00:04:38.540
FILIP: Yes, yes.

00:04:38.540 --> 00:04:43.490
But this is-- spoiler alert--
this is the app that we get to,

00:04:43.490 --> 00:04:46.370
and it works.

00:04:46.370 --> 00:04:51.050
I think it's almost ready
to publish on Play Store.

00:04:51.050 --> 00:04:54.435
So all right, let's--

00:04:54.435 --> 00:04:55.100
that's the--

00:04:55.100 --> 00:04:55.470
EMILY: Is that the spoiler?

00:04:55.470 --> 00:04:56.761
FILIP: --dependency encryption.

00:04:56.761 --> 00:04:59.030
Another spoiler.

00:04:59.030 --> 00:05:04.010
So that's the
dependency problem,

00:05:04.010 --> 00:05:05.825
and then we wanted
to just check--

00:05:05.825 --> 00:05:06.991
EMILY: A couple of warnings.

00:05:06.991 --> 00:05:08.390
FILIP: Couple of warnings, yes.

00:05:08.390 --> 00:05:10.010
So we have some
warnings in the code

00:05:10.010 --> 00:05:12.124
that we just left there
because we're lazy.

00:05:12.124 --> 00:05:14.540
EMILY: Oh, I thought they were
because they didn't show up

00:05:14.540 --> 00:05:15.584
with Dart.

00:05:15.584 --> 00:05:16.500
FILIP: Oh, no, no, no.

00:05:16.500 --> 00:05:16.870
No, no, no.

00:05:16.870 --> 00:05:17.305
We were just lazy.

00:05:17.305 --> 00:05:17.530
EMILY: [INAUDIBLE].

00:05:17.530 --> 00:05:18.380
FILIP: Yes.

00:05:18.380 --> 00:05:24.010
So first of them is,
this class inherits

00:05:24.010 --> 00:05:25.460
a class marked immutable.

00:05:25.460 --> 00:05:27.680
So basically what
it's saying that,

00:05:27.680 --> 00:05:30.440
you know what, your
loading info class

00:05:30.440 --> 00:05:34.490
is extending stateful widget,
and that needs to be immutable.

00:05:34.490 --> 00:05:36.314
The widget itself is immutable.

00:05:36.314 --> 00:05:37.730
Then the state,
obviously, is not,

00:05:37.730 --> 00:05:40.190
but the widget
itself is immutable.

00:05:40.190 --> 00:05:44.780
And yet you have a string
that can be reassigned.

00:05:44.780 --> 00:05:45.740
EMILY: Dun-dun-dun.

00:05:45.740 --> 00:05:48.540
FILIP: Yeah, so we just do this.

00:05:48.540 --> 00:05:51.250
Not file-- final.

00:05:51.250 --> 00:05:53.010
And that disappears.

00:05:53.010 --> 00:05:56.130
So if you have a thing
that is-- and by the way,

00:05:56.130 --> 00:05:59.170
I wanted to show you--

00:05:59.170 --> 00:05:59.810
hey.

00:05:59.810 --> 00:06:06.170
Oh, this is how you would say I
want my class to be immutable,

00:06:06.170 --> 00:06:08.810
and then everything
inside the class

00:06:08.810 --> 00:06:11.390
must be either
[INAUDIBLE] or final.

00:06:11.390 --> 00:06:15.742
You are not allowed to have
free assignable things in there.

00:06:15.742 --> 00:06:17.780
So that's fixed.

00:06:17.780 --> 00:06:23.150
Next one, we have a stream
controller here, and it says,

00:06:23.150 --> 00:06:28.220
actually, you should close all
instances of Dart core sync,

00:06:28.220 --> 00:06:30.500
which is very helpful
because that's--

00:06:30.500 --> 00:06:32.990
sometimes, people will forget.

00:06:32.990 --> 00:06:35.960
And even though in our
case, because our--

00:06:35.960 --> 00:06:39.500
this is our block, and our block
lives for the whole duration

00:06:39.500 --> 00:06:40.050
of the app.

00:06:40.050 --> 00:06:43.790
So we don't really care, but
it's obviously better practice

00:06:43.790 --> 00:06:46.770
to close syncs in general.

00:06:46.770 --> 00:06:51.200
So what we can do is
just add a close method

00:06:51.200 --> 00:06:56.570
and close the string here.

00:06:56.570 --> 00:07:00.515
And then just make
sure that we--

00:07:00.515 --> 00:07:04.130
anytime we get rid of the block,
which we don't right now, we

00:07:04.130 --> 00:07:08.770
will just do block.close.

00:07:08.770 --> 00:07:10.480
EMILY: So is Hacker News--

00:07:10.480 --> 00:07:12.910
oh, it's not a--

00:07:12.910 --> 00:07:15.010
I was going to say, if
it's a stable widget,

00:07:15.010 --> 00:07:16.900
then you can do it
on [INAUDIBLE]----

00:07:16.900 --> 00:07:17.650
FILIP: Yeah, yeah.

00:07:17.650 --> 00:07:18.960
No, this is just a class.

00:07:18.960 --> 00:07:20.560
Yeah, yeah.

00:07:20.560 --> 00:07:25.720
So I also just
sorted everything.

00:07:25.720 --> 00:07:28.600
EMILY: So in theory, you
could call that close method

00:07:28.600 --> 00:07:31.460
when the last widget--

00:07:31.460 --> 00:07:34.660
the widget that is
using the block is done.

00:07:34.660 --> 00:07:37.600
FILIP: That's true, but that's--

00:07:37.600 --> 00:07:41.530
basically, that would
be the app widget.

00:07:41.530 --> 00:07:48.705
And then the app
widget is stateless,

00:07:48.705 --> 00:07:50.080
and stateless
don't have dispose.

00:07:53.160 --> 00:07:57.010
And we really want this to
be on for the whole duration

00:07:57.010 --> 00:07:57.830
of the app.

00:07:57.830 --> 00:08:00.040
If this was a
block for something

00:08:00.040 --> 00:08:03.410
that we create, like a page, and
then we don't need it anymore,

00:08:03.410 --> 00:08:05.574
then yes, we have
our dispose method,

00:08:05.574 --> 00:08:07.240
and in our dispose
method, we would just

00:08:07.240 --> 00:08:12.370
be calling close of everything
that we need to close.

00:08:12.370 --> 00:08:14.710
So that's one, and
the third one is

00:08:14.710 --> 00:08:17.980
here, which just says
this function has

00:08:17.980 --> 00:08:19.550
a return type of feature--

00:08:19.550 --> 00:08:22.570
of article, but doesn't end
with a return statement.

00:08:22.570 --> 00:08:24.190
It does end with
a return statement

00:08:24.190 --> 00:08:28.300
if everything is grayed, but if
there is something happening,

00:08:28.300 --> 00:08:29.519
then it's just--

00:08:29.519 --> 00:08:30.810
EMILY: [INAUDIBLE] getting bad.

00:08:30.810 --> 00:08:34.539
FILIP: Right, so
we can do either

00:08:34.539 --> 00:08:38.770
like returning a dummy article
or something that kind of tells

00:08:38.770 --> 00:08:43.039
us somewhere else that
this has gone wrong.

00:08:43.039 --> 00:08:46.980
But again, we're lazy,
so we'll just throw--

00:08:46.980 --> 00:08:47.726
what?

00:08:47.726 --> 00:08:48.710
Which kind of errors?

00:08:51.686 --> 00:08:54.363
EMILY: Is there-- ooh.

00:08:54.363 --> 00:08:56.734
FILIP: [INAUDIBLE]
network error right now.

00:08:56.734 --> 00:08:58.750
EMILY: Stad something?

00:08:58.750 --> 00:08:59.650
FILIP: StateError?

00:08:59.650 --> 00:09:02.390
I just default to StateError.

00:09:02.390 --> 00:09:02.890
I mean, we--

00:09:02.890 --> 00:09:04.350
EMILY: You should do Error.

00:09:04.350 --> 00:09:05.170
FILIP: Just Error?

00:09:05.170 --> 00:09:07.160
Wow.

00:09:07.160 --> 00:09:08.740
EMILY: Let's not do that.

00:09:08.740 --> 00:09:10.840
Yeah-- mm?

00:09:10.840 --> 00:09:12.820
FILIP: Well, you know what?

00:09:12.820 --> 00:09:13.670
EMILY: StateError.

00:09:13.670 --> 00:09:14.240
FILIP: Nah.

00:09:14.240 --> 00:09:15.510
Class--

00:09:15.510 --> 00:09:16.390
EMILY: Oh.

00:09:16.390 --> 00:09:17.260
FILIP: Yes.

00:09:17.260 --> 00:09:22.420
Class Hacker News--

00:09:22.420 --> 00:09:23.230
EMILY: Wow.

00:09:23.230 --> 00:09:25.476
FILIP: API error.

00:09:25.476 --> 00:09:27.600
EMILY: I was just going to
be like, what about HTTP

00:09:27.600 --> 00:09:28.808
error or something like that?

00:09:28.808 --> 00:09:30.969
FILIP: Yeah, but
it's not really that.

00:09:30.969 --> 00:09:31.510
EMILY: It is.

00:09:31.510 --> 00:09:32.860
FILIP: The underlying one--

00:09:32.860 --> 00:09:32.983
oh.

00:09:32.983 --> 00:09:34.300
EMILY: That's what
causes the problem,

00:09:34.300 --> 00:09:36.549
is because we didn't get the
right result we expected,

00:09:36.549 --> 00:09:37.690
so we can't find it.

00:09:37.690 --> 00:09:40.670
FILIP: Right, but is it there?

00:09:40.670 --> 00:09:42.410
EMILY: There's-- OK, you--

00:09:42.410 --> 00:09:44.350
I'll search.

00:09:44.350 --> 00:09:46.950
FILIP: I mean-- right,
OK, I'll do my thing.

00:09:46.950 --> 00:09:55.300
So Hacker News-- so we could
do final String message,

00:09:55.300 --> 00:10:04.010
and Hacker News API error,
as with this message,

00:10:04.010 --> 00:10:05.070
and that's it.

00:10:05.070 --> 00:10:13.800
So we can actually-- now that we
made our own error, so article

00:10:13.800 --> 00:10:16.590
ID couldn't be fetched.

00:10:19.831 --> 00:10:20.872
EMILY: [INAUDIBLE], yeah.

00:10:24.340 --> 00:10:30.580
FILIP: Now, we can actually
try to catch that exact error,

00:10:30.580 --> 00:10:31.660
and it will--

00:10:31.660 --> 00:10:37.430
so while we are actually
using this, we can do--

00:10:37.430 --> 00:10:38.620
EMILY: Try catch.

00:10:38.620 --> 00:10:41.480
FILIP: Try catch [INAUDIBLE].

00:10:41.480 --> 00:10:47.350
So we don't have any more
warnings, which is great.

00:10:47.350 --> 00:10:53.150
Yes, we could use a preexisting
error, but this [INAUDIBLE]..

00:10:53.150 --> 00:10:57.140
EMILY: [INAUDIBLE].

00:10:57.140 --> 00:11:00.530
FILIP: All right,
so everything works.

00:11:00.530 --> 00:11:02.810
We had a question.

00:11:02.810 --> 00:11:03.600
We had a question.

00:11:03.600 --> 00:11:05.749
What if you have--

00:11:05.749 --> 00:11:07.790
this is about blocks, so
this is the architecture

00:11:07.790 --> 00:11:12.740
that we were using for
this particular app.

00:11:12.740 --> 00:11:16.550
That's basically, having a
component that has only streams

00:11:16.550 --> 00:11:18.480
as inputs and syncs as--

00:11:18.480 --> 00:11:21.890
sorry, streams as outputs
and sync as inputs.

00:11:21.890 --> 00:11:25.400
And for this, the
question was, what

00:11:25.400 --> 00:11:28.280
if I have two different blocks
or three different blocks--

00:11:28.280 --> 00:11:30.530
how do they communicate
to each other?

00:11:30.530 --> 00:11:36.220
And so there is no
single perfect answer--

00:11:36.220 --> 00:11:38.965
to any architectural
question, by the way.

00:11:38.965 --> 00:11:43.730
But what I've seen so far is--

00:11:43.730 --> 00:11:46.520
and what Google
uses internally is

00:11:46.520 --> 00:11:49.370
that you're trying
to not pass one

00:11:49.370 --> 00:11:52.370
block to another as a
dependency, but instead,

00:11:52.370 --> 00:11:57.230
you're using the streams
as inputs and the syncs--

00:11:57.230 --> 00:12:00.155
I'm sorry, syncs as inputs
and streams as outputs,

00:12:00.155 --> 00:12:01.280
and just put them together.

00:12:01.280 --> 00:12:02.321
EMILY: Producer-consumer.

00:12:02.321 --> 00:12:03.020
FILIP: Yes, yes.

00:12:03.020 --> 00:12:06.920
You're just piping
the blocks together,

00:12:06.920 --> 00:12:11.200
which sometimes,
that means that you

00:12:11.200 --> 00:12:15.050
will have to add new
either outputs or inputs,

00:12:15.050 --> 00:12:18.590
just in order to
put these in sync.

00:12:18.590 --> 00:12:26.660
But it's way-- it's way easier
than to just put something out,

00:12:26.660 --> 00:12:31.750
maybe even pull the block
away and not use it and so on.

00:12:31.750 --> 00:12:37.010
EMILY: So are you suggesting
adding to the API of the block

00:12:37.010 --> 00:12:37.600
specifically?

00:12:37.600 --> 00:12:39.345
FILIP: Yes, if you need that.

00:12:39.345 --> 00:12:40.220
Sometimes, you don't.

00:12:40.220 --> 00:12:44.000
Sometimes, you're just like,
oh, that other block is just

00:12:44.000 --> 00:12:48.960
listening to some of the
outputs that I already have.

00:12:48.960 --> 00:12:50.840
And it shouldn't
be-- again, if it

00:12:50.840 --> 00:12:53.420
looks too complicated
and too overengineered,

00:12:53.420 --> 00:12:57.350
it probably is,
so make it simple

00:12:57.350 --> 00:12:59.420
and make it just for your app.

00:12:59.420 --> 00:13:01.130
We're actually kind of--

00:13:01.130 --> 00:13:02.660
EMILY: More than
needed for this.

00:13:02.660 --> 00:13:04.076
FILIP: Yeah, we're
doing something

00:13:04.076 --> 00:13:06.890
that's a little too
overengineered for something

00:13:06.890 --> 00:13:10.070
as simple as this.

00:13:10.070 --> 00:13:12.650
So that's the question.

00:13:12.650 --> 00:13:16.370
And then we just realized that
this is a really good Hacker

00:13:16.370 --> 00:13:20.476
News reader, but it
always reads just a set--

00:13:20.476 --> 00:13:21.350
EMILY: Five articles.

00:13:21.350 --> 00:13:24.770
FILIP: Yes, five articles
because we're actually--

00:13:24.770 --> 00:13:27.230
I don't know exactly
why we did this.

00:13:27.230 --> 00:13:28.940
Probably just because
we're lazy, again.

00:13:28.940 --> 00:13:35.340
But we just added these and
hardcoded these into the app,

00:13:35.340 --> 00:13:38.150
so what we want
to do is actually

00:13:38.150 --> 00:13:42.950
get them through our
amazing method that

00:13:42.950 --> 00:13:46.690
is called parseTopStories.

00:13:46.690 --> 00:13:51.275
And then use them to
get the latest articles.

00:13:54.180 --> 00:13:57.250
EMILY: Why is the JSON
string hardcoded there?

00:13:57.250 --> 00:13:58.080
Oh, this is a test?

00:13:58.080 --> 00:13:59.455
FILIP: Yeah, this
is just a test.

00:13:59.455 --> 00:14:00.210
I just wanted to--

00:14:00.210 --> 00:14:00.710
yes.

00:14:03.410 --> 00:14:06.440
All right, so let
me see the top IDs.

00:14:06.440 --> 00:14:08.480
Where do we use them here?

00:14:08.480 --> 00:14:10.280
Get articles and update.

00:14:10.280 --> 00:14:11.710
Oh, that's because--

00:14:11.710 --> 00:14:14.090
EMILY: Yeah, we put it
into the article stream.

00:14:14.090 --> 00:14:15.590
[INAUDIBLE]

00:14:15.590 --> 00:14:17.615
FILIP: So we need Get IDs.

00:14:21.020 --> 00:14:27.080
That would be a future
of a list of ints.

00:14:27.080 --> 00:14:35.030
So Future of List
of Integers, getIds,

00:14:35.030 --> 00:14:41.860
and then we should tell if it's
a top stories or news stories,

00:14:41.860 --> 00:14:43.390
I think.

00:14:43.390 --> 00:14:46.420
Yeah, so it should
be stories type,

00:14:46.420 --> 00:14:52.250
so we should give
it a stories type,

00:14:52.250 --> 00:14:54.110
and this is an async
method because we'll

00:14:54.110 --> 00:14:55.745
be calling the API.

00:14:58.880 --> 00:15:03.380
For now, we're just going
to come out and do this.

00:15:06.620 --> 00:15:12.450
EMILY: Oh, so I just looked
up the Hacker News API,

00:15:12.450 --> 00:15:16.260
and it looks like it's
just this URL here.

00:15:16.260 --> 00:15:18.600
FILIP: Right, yes, I'll
need this in a minute.

00:15:18.600 --> 00:15:22.980
I just want to make sure
that-- so we can do that.

00:15:22.980 --> 00:15:26.250
And now, how do we use this?

00:15:26.250 --> 00:15:38.880
So we want getIds of Story Type
Top, and that's a list of IDs.

00:15:38.880 --> 00:15:42.740
Oh, and we need
to [INAUDIBLE] it.

00:15:42.740 --> 00:15:45.804
EMILY: Oh, no, but
you're in a constructor.

00:15:45.804 --> 00:15:48.060
FILIP: Oh, OK.

00:15:48.060 --> 00:15:51.480
EMILY: So you will probably want
to write a helper function that

00:15:51.480 --> 00:15:54.120
is asynchronous.

00:15:54.120 --> 00:16:00.030
Now, do we need this Get
Articles update to be

00:16:00.030 --> 00:16:01.860
completed before this happens?

00:16:01.860 --> 00:16:02.880
FILIP: No, no.

00:16:02.880 --> 00:16:04.006
It's just the first--

00:16:04.006 --> 00:16:04.506
EMILY: OK.

00:16:04.506 --> 00:16:06.930
FILIP: Yeah, so future void--

00:16:06.930 --> 00:16:09.450
which is also something
that we didn't have before.

00:16:09.450 --> 00:16:10.770
We have future void now.

00:16:10.770 --> 00:16:13.230
EMILY: As of Dart 2.0.

00:16:13.230 --> 00:16:18.110
FILIP: So just--

00:16:18.110 --> 00:16:19.090
EMILY: Initialize?

00:16:19.090 --> 00:16:21.764
FILIP: Initialize--

00:16:21.764 --> 00:16:22.430
EMILY: Articles.

00:16:22.430 --> 00:16:23.096
FILIP: Articles.

00:16:25.640 --> 00:16:38.200
And that said, it's just async
because we want to do this.

00:16:38.200 --> 00:16:41.730
And now, we can
call it from here.

00:16:41.730 --> 00:16:43.090
EMILY: Yeah.

00:16:43.090 --> 00:16:46.090
FILIP: So just so that
we are not losing anyone,

00:16:46.090 --> 00:16:52.290
what we did is we realized,
we want to use async--

00:16:52.290 --> 00:16:57.520
or await in constructor,
and constructors cannot be

00:16:57.520 --> 00:16:58.210
asynchronous.

00:16:58.210 --> 00:17:00.160
They need to be synchronous.

00:17:00.160 --> 00:17:04.569
So we could do the
getIds dot [INAUDIBLE]

00:17:04.569 --> 00:17:10.119
and do it the old way,
but we want to use async.

00:17:10.119 --> 00:17:16.270
So instead, we just call this
thing that will do this for us,

00:17:16.270 --> 00:17:20.650
and we don't care that
it will finish sometime

00:17:20.650 --> 00:17:27.000
after the creation of this whole
thing because we don't care.

00:17:27.000 --> 00:17:29.800
This will get the article
sometime in the future

00:17:29.800 --> 00:17:30.550
and give it to us.

00:17:30.550 --> 00:17:32.383
EMILY: Yeah, and we'll
listen to the stream,

00:17:32.383 --> 00:17:34.190
and when the articles
appeared, then we

00:17:34.190 --> 00:17:35.190
can do things with them.

00:17:35.190 --> 00:17:38.020
But until then, I think
we have a default--

00:17:38.020 --> 00:17:40.340
FILIP: I wonder
if I can do this.

00:17:40.340 --> 00:17:41.270
Can I?

00:17:41.270 --> 00:17:42.770
Oh, OK.

00:17:42.770 --> 00:17:50.800
And so this is the same
thing, so await, get IDs of--

00:17:50.800 --> 00:17:52.930
that one is news stories?

00:17:52.930 --> 00:17:56.420
Actually, I can just do await.

00:17:56.420 --> 00:17:57.430
EMILY: Hm?

00:17:57.430 --> 00:17:59.710
FILIP: I have the
Stories Type here,

00:17:59.710 --> 00:18:05.206
so I can do await
of Stories Type.

00:18:05.206 --> 00:18:07.640
I don't need the
switch here anymore.

00:18:07.640 --> 00:18:09.176
See?

00:18:09.176 --> 00:18:10.550
Goes Stories Type,
Stories Type--

00:18:10.550 --> 00:18:11.170
EMILY: Yes.

00:18:11.170 --> 00:18:13.390
FILIP: Yes, OK.

00:18:13.390 --> 00:18:14.470
EMILY: Great.

00:18:14.470 --> 00:18:17.680
FILIP: All right, and
now to fix the getId.

00:18:17.680 --> 00:18:18.200
Where is it?

00:18:22.810 --> 00:18:27.950
So you told me that there
is a URL at Hacker News.

00:18:27.950 --> 00:18:31.785
EMILY: Yeah, so see, this
one is Hacker News Item,

00:18:31.785 --> 00:18:33.160
and so the difference
of this one

00:18:33.160 --> 00:18:40.105
is it's slash v0 slash top
stories versus new stories.

00:18:40.105 --> 00:18:40.810
FILIP: OK, so--

00:18:40.810 --> 00:18:47.392
EMILY: Yeah, item-- not item,
top stories, new stories,

00:18:47.392 --> 00:18:48.405
dot JSON.

00:18:48.405 --> 00:18:50.627
FILIP: V0 top stories
or news stories.

00:18:50.627 --> 00:18:51.210
EMILY: Mm-hmm.

00:18:51.210 --> 00:18:56.140
FILIP: OK, so final--

00:18:59.739 --> 00:19:01.030
EMILY: What are you trying to--

00:19:01.030 --> 00:19:02.480
oh, like base URL?

00:19:02.480 --> 00:19:03.290
FILIP: Yeah.

00:19:03.290 --> 00:19:03.790
EMILY: Oh.

00:19:03.790 --> 00:19:09.958
FILIP: Oh, yeah,
or part URL base.

00:19:09.958 --> 00:19:11.886
EMILY: Yeah, what is it called?

00:19:11.886 --> 00:19:14.780
Piece?

00:19:14.780 --> 00:19:15.950
There's a name for that.

00:19:15.950 --> 00:19:16.575
Can't remember.

00:19:16.575 --> 00:19:21.200
FILIP: Time equals Stories Type,
Top Stories, then it's Top,

00:19:21.200 --> 00:19:24.232
and otherwise, it's New?

00:19:24.232 --> 00:19:25.430
EMILY: Yeah.

00:19:25.430 --> 00:19:28.460
FILIP: This is kind of
hacky, but you get the point.

00:19:28.460 --> 00:19:30.990
So URL, and then?

00:19:30.990 --> 00:19:32.400
EMILY: Dot JSON.

00:19:32.400 --> 00:19:33.340
It's just--

00:19:33.340 --> 00:19:34.631
FILIP: [INAUDIBLE] top stories?

00:19:34.631 --> 00:19:35.894
EMILY: New stories, yeah.

00:19:35.894 --> 00:19:37.310
FILIP: Top stories
or new stories.

00:19:37.310 --> 00:19:37.910
Correct?

00:19:37.910 --> 00:19:38.690
EMILY: Yes.

00:19:38.690 --> 00:19:40.460
FILIP: Stories.JSON.

00:19:40.460 --> 00:19:42.290
EMILY: Yep.

00:19:42.290 --> 00:19:43.220
FILIP: So we have URL.

00:19:43.220 --> 00:19:46.970
EMILY: And if you really wanted,
you could take out this--

00:19:46.970 --> 00:19:51.660
that chunk of
hacker-news.firebase v0,

00:19:51.660 --> 00:19:52.910
and then make that a constant.

00:19:52.910 --> 00:20:04.816
FILIP: So like a static const
of base URL is this or this.

00:20:04.816 --> 00:20:05.690
EMILY: Yeah, yeah.

00:20:05.690 --> 00:20:06.190
FILIP: This.

00:20:10.062 --> 00:20:15.390
And why don't we just
do base URL and OK.

00:20:20.290 --> 00:20:21.270
And this.

00:20:25.680 --> 00:20:28.780
[INAUDIBLE] using braces?

00:20:28.780 --> 00:20:31.280
EMILY: You don't need to because
it's just the [INAUDIBLE]..

00:20:31.280 --> 00:20:32.238
FILIP: Oh, that's true.

00:20:32.238 --> 00:20:32.880
EMILY: Yeah.

00:20:32.880 --> 00:20:33.380
Great.

00:20:33.380 --> 00:20:33.880
FILIP: OK.

00:20:37.400 --> 00:20:40.970
So we have the URL, and
then we get the contents

00:20:40.970 --> 00:20:45.656
of the URL, so basically, this.

00:20:45.656 --> 00:20:48.440
EMILY: Yeah, you
did JSON Decode?

00:20:48.440 --> 00:21:02.500
FILIP: Final response is
await of HTTP get URL,

00:21:02.500 --> 00:21:06.460
and then I think we already--

00:21:06.460 --> 00:21:11.480
we're parsing this
in the stories.

00:21:11.480 --> 00:21:12.282
What did I do?

00:21:12.282 --> 00:21:13.370
No.

00:21:13.370 --> 00:21:13.870
EMILY: I do.

00:21:13.870 --> 00:21:14.370
I do.

00:21:19.070 --> 00:21:23.440
FILIP: So just parse top
stories on the string.

00:21:23.440 --> 00:21:24.535
EMILY: Great.

00:21:24.535 --> 00:21:25.910
FILIP: Are we
getting the string?

00:21:25.910 --> 00:21:26.885
No.

00:21:26.885 --> 00:21:27.760
EMILY: Response.body.

00:21:27.760 --> 00:21:29.120
FILIP: On the body, OK.

00:21:29.120 --> 00:21:33.170
So again, we'll
probably If Story--

00:21:33.170 --> 00:21:41.540
sorry, If Response Status
Code does not equal 200,

00:21:41.540 --> 00:21:47.270
then we probably want to
throw our amazing new--

00:21:47.270 --> 00:21:50.590
EMILY: Specialized [INAUDIBLE]
Hacker News API error.

00:21:53.690 --> 00:22:00.827
FILIP: And we say Stories
couldn't be fetched.

00:22:09.530 --> 00:22:13.680
Now, we know that status
code is 200, so we can--

00:22:13.680 --> 00:22:14.360
EMILY: Return.

00:22:14.360 --> 00:22:16.945
FILIP: Parse top
stories from the stream.

00:22:16.945 --> 00:22:17.820
EMILY: Response.body.

00:22:17.820 --> 00:22:20.540
FILIP: Our response.body.

00:22:20.540 --> 00:22:21.340
And that's it.

00:22:21.340 --> 00:22:23.165
EMILY: Return, yeah.

00:22:23.165 --> 00:22:25.540
FILIP: Cool.

00:22:25.540 --> 00:22:28.277
So what do we think?

00:22:28.277 --> 00:22:29.110
EMILY: Yeah, let's--

00:22:29.110 --> 00:22:30.670
FILIP: Let's try it.

00:22:30.670 --> 00:22:34.878
EMILY: See if we
get updated stories.

00:22:34.878 --> 00:22:36.670
Ooh.

00:22:36.670 --> 00:22:38.180
FILIP: Connection failed.

00:22:38.180 --> 00:22:39.821
EMILY: Too many open files?

00:22:39.821 --> 00:22:40.320
FILIP: What?

00:22:44.000 --> 00:22:45.030
OK, what?

00:22:50.510 --> 00:22:55.250
Is there anything--
so we're trying

00:22:55.250 --> 00:22:59.211
to get a bunch of
articles at once, maybe.

00:22:59.211 --> 00:22:59.710
Is that--

00:23:02.422 --> 00:23:04.200
EMILY: Oh, are we--

00:23:04.200 --> 00:23:05.340
maybe-- so right.

00:23:05.340 --> 00:23:08.550
So this says this
returns up to 500,

00:23:08.550 --> 00:23:11.510
so maybe we want to
just limit that to 10.

00:23:11.510 --> 00:23:13.350
FILIP: Yeah.

00:23:13.350 --> 00:23:15.810
How do we tell it
to get just 10?

00:23:15.810 --> 00:23:17.255
EMILY: Oh, well, I don't--

00:23:17.255 --> 00:23:18.630
I think it'll
return all of them,

00:23:18.630 --> 00:23:20.130
but we just don't have
to process them all.

00:23:20.130 --> 00:23:20.760
FILIP: Ah, that's true.

00:23:20.760 --> 00:23:22.426
EMILY: So we can just
like get a subset.

00:23:22.426 --> 00:23:23.010
FILIP: Right.

00:23:23.010 --> 00:23:31.146
So wherever we are doing
this, we'll just do--

00:23:31.146 --> 00:23:34.810
EMILY: Oh, how about
in parseTopStories?

00:23:34.810 --> 00:23:37.280
FILIP: Like this?

00:23:37.280 --> 00:23:38.690
EMILY: Sure.

00:23:38.690 --> 00:23:40.440
FILIP: To list.

00:23:40.440 --> 00:23:41.510
EMILY: OK, yeah.

00:23:41.510 --> 00:23:43.800
Does parseTopStories
make [INAUDIBLE]---- no,

00:23:43.800 --> 00:23:44.710
it just makes a list.

00:23:44.710 --> 00:23:45.368
OK, yeah.

00:23:48.056 --> 00:23:49.740
Great.

00:23:49.740 --> 00:23:50.240
Woo-hoo.

00:23:50.240 --> 00:23:54.410
FILIP: Let's see if this
is actually a new story.

00:23:54.410 --> 00:23:57.070
But it should be at Bloomberg.

00:24:00.652 --> 00:24:01.360
EMILY: All right.

00:24:01.360 --> 00:24:02.318
FILIP: September, nice.

00:24:02.318 --> 00:24:06.710
EMILY: OK, so what
we did is we did a--

00:24:06.710 --> 00:24:11.040
we updated, so we're not using
hardcoded Hacker News stories.

00:24:11.040 --> 00:24:14.070
We're pulling them live
from the Hacker News API.

00:24:14.070 --> 00:24:19.310
We added-- talked a
little bit about block,

00:24:19.310 --> 00:24:22.140
if you have multiple
blocks, inputs and outputs.

00:24:22.140 --> 00:24:25.230
We talked about
version controlling

00:24:25.230 --> 00:24:27.090
with updating your pub spec.

00:24:27.090 --> 00:24:29.487
And I think there's one more.

00:24:29.487 --> 00:24:30.320
FILIP: No, I think--

00:24:30.320 --> 00:24:31.530
EMILY: No?

00:24:31.530 --> 00:24:33.160
FILIP: I think-- oh, we--

00:24:33.160 --> 00:24:34.290
EMILY: Oh, fixing warnings.

00:24:34.290 --> 00:24:35.060
FILIP: Yes.

00:24:35.060 --> 00:24:36.360
EMILY: Great.

00:24:36.360 --> 00:24:40.860
Stay tuned for-- we're going to
work on caching for the Hacker

00:24:40.860 --> 00:24:42.510
News app next.

00:24:42.510 --> 00:24:45.560
[MUSIC PLAYING]

