WEBVTT
Kind: captions
Language: en

00:00:00.500 --> 00:00:03.240
So this is what we
are going to do today.

00:00:03.240 --> 00:00:04.470
Let's meet our game.

00:00:04.470 --> 00:00:08.510
We are going to make a very
simple Defend the Castle game.

00:00:08.510 --> 00:00:14.550
This is also online right now on
GitHub, in our samples folder.

00:00:14.550 --> 00:00:17.610
There are going to be three
bridges connecting the island

00:00:17.610 --> 00:00:19.290
from one side to the other.

00:00:19.290 --> 00:00:21.270
We'll have Androids
made of cardboard

00:00:21.270 --> 00:00:23.050
follow a path
through the bridges

00:00:23.050 --> 00:00:26.560
and onto a castle,
trying to invade it.

00:00:26.560 --> 00:00:29.310
We'll be adding
stereoscopic VR rendering,

00:00:29.310 --> 00:00:32.280
so it will work on
the viewer later.

00:00:32.280 --> 00:00:35.260
We'll be adding binaural audio.

00:00:35.260 --> 00:00:41.550
Now, audio is really important
for a complete and immersive VR

00:00:41.550 --> 00:00:43.060
experience.

00:00:43.060 --> 00:00:45.540
3D auditory cues
will tell you when

00:00:45.540 --> 00:00:51.310
a cannon is being shot over
your head, and where to look.

00:00:51.310 --> 00:00:54.370
Finally, we will add
some interaction using

00:00:54.370 --> 00:00:56.970
the input and the reticle.

00:00:56.970 --> 00:01:00.660
This will work both for
gaze and the old cardboard,

00:01:00.660 --> 00:01:03.920
and for the controller
[INAUDIBLE].

00:01:03.920 --> 00:01:05.459
Oh, and this.

00:01:05.459 --> 00:01:07.680
How many of you made games?

00:01:07.680 --> 00:01:10.160
Put up your hands if you
were a game developer.

00:01:10.160 --> 00:01:13.930
Did you ever run
into throttling,

00:01:13.930 --> 00:01:17.180
that your GPU or
CPU went too hard,

00:01:17.180 --> 00:01:21.000
and you needed to take a break
until you can keep it working.

00:01:21.000 --> 00:01:22.900
Or maybe you're like
me, and you just

00:01:22.900 --> 00:01:27.260
put your phone into the
fridge for it to cool down.

00:01:27.260 --> 00:01:30.510
So we're going to look into
some optimization tips,

00:01:30.510 --> 00:01:34.535
so you can get to 60 FPS
and avoid being throttled.

00:01:34.535 --> 00:01:35.910
Now, these are
the assets we will

00:01:35.910 --> 00:01:39.760
be using in the game,
assets I've made before.

00:01:39.760 --> 00:01:41.910
We have the cannon
and the castle.

00:01:41.910 --> 00:01:43.860
They're really simple.

00:01:43.860 --> 00:01:47.060
And some trees we took off the
Cardboard Design Lab, which

00:01:47.060 --> 00:01:50.100
is also open source online.

00:01:50.100 --> 00:01:52.320
Now, this is how we
are going to make this.

00:01:52.320 --> 00:01:55.490
To make the game, I've
used Unity and Blender.

00:01:55.490 --> 00:01:58.910
But you can use any other
tool off the market,

00:01:58.910 --> 00:02:01.960
and whatever you like, even
if you have your own engine,

00:02:01.960 --> 00:02:06.350
there is a C++ SDK which will
be introduced in more detail

00:02:06.350 --> 00:02:09.639
at Nathan Marks' talk later.

00:02:09.639 --> 00:02:10.139
OK.

00:02:10.139 --> 00:02:12.650
So a very quick
overview into Unity,

00:02:12.650 --> 00:02:14.310
if you have never
used it before.

00:02:14.310 --> 00:02:16.950
I'm going to go through
it very briefly.

00:02:16.950 --> 00:02:20.720
This is how a Unity
game editor looks like.

00:02:20.720 --> 00:02:23.530
At the center, we just
have our 3D scene.

00:02:23.530 --> 00:02:28.460
We can move it and look
around using a virtual camera.

00:02:28.460 --> 00:02:31.760
We can also drag and
drop objects in the scene

00:02:31.760 --> 00:02:33.370
to move them around.

00:02:33.370 --> 00:02:35.760
On the left is the
scene hierarchy.

00:02:35.760 --> 00:02:39.480
That's the object that
we have inside the scene.

00:02:39.480 --> 00:02:40.920
On the right is the Inspector.

00:02:40.920 --> 00:02:44.310
You can look at any object
and see what it is made of.

00:02:44.310 --> 00:02:47.460
Every object is made
of several components.

00:02:47.460 --> 00:02:50.230
For example, here on the top
is the transform component,

00:02:50.230 --> 00:02:54.250
saying what's our position,
rotation, and scale.

00:02:54.250 --> 00:02:56.470
And at the bottom is
the project assets.

00:02:56.470 --> 00:02:59.910
That's all of the scripts,
models, and textures

00:02:59.910 --> 00:03:02.310
inside our project.

00:03:02.310 --> 00:03:04.710
Now, a very quick
word about Blender.

00:03:04.710 --> 00:03:07.145
As a game developer
for many years,

00:03:07.145 --> 00:03:10.570
I've found that having
some 3D editing skill

00:03:10.570 --> 00:03:12.700
really empowers you,
because it means

00:03:12.700 --> 00:03:16.120
you can make your own models
and experiment, and make

00:03:16.120 --> 00:03:19.260
your own game, if you want.

00:03:19.260 --> 00:03:21.340
However, this is how
Blender looks like.

00:03:21.340 --> 00:03:23.850
Now, Blender is an
open source project

00:03:23.850 --> 00:03:27.419
which is free for everyone to
use, which is why I picked it.

00:03:27.419 --> 00:03:28.460
And this is how it looks.

00:03:28.460 --> 00:03:30.950
And it can be a
bit intimidating.

00:03:30.950 --> 00:03:33.310
I've learned how to use
it through this site,

00:03:33.310 --> 00:03:36.136
but I'm pretty sure there are
many other websites out there.

00:03:39.220 --> 00:03:39.810
OK.

00:03:39.810 --> 00:03:45.430
Let's get to work very quickly,
and see how far we can go.

00:03:45.430 --> 00:03:47.110
So I'm just going
to open up Unity.

00:03:47.110 --> 00:03:49.360
If you have it, and you
have downloaded the project,

00:03:49.360 --> 00:03:51.000
feel free to do the same.

00:03:51.000 --> 00:03:54.790
And I will create a very
simple, empty project

00:03:54.790 --> 00:03:59.150
to get started with, just to
show you the basics, really.

00:03:59.150 --> 00:04:01.140
So this is how a new
project looks like.

00:04:01.140 --> 00:04:02.350
I have the scene.

00:04:02.350 --> 00:04:08.630
I can press Alt and look around,
or with the mouse wheel button.

00:04:08.630 --> 00:04:11.530
And I can go to the game
object menu at the top,

00:04:11.530 --> 00:04:16.070
and maybe add a plane
to use as my ground,

00:04:16.070 --> 00:04:18.529
and now it's inside the scene.

00:04:18.529 --> 00:04:22.270
I have beginning-- I start the
camera, the main camera, which

00:04:22.270 --> 00:04:23.750
I can move around.

00:04:23.750 --> 00:04:26.820
On the bottom right, you
can see the camera preview

00:04:26.820 --> 00:04:28.950
and what it will see.

00:04:28.950 --> 00:04:31.380
Now, if I add just a cube
for reference, and then

00:04:31.380 --> 00:04:35.110
start in very basic, and
we'll go on in a bit.

00:04:35.110 --> 00:04:36.970
So now, I have a
cube in the scene,

00:04:36.970 --> 00:04:39.440
and I can press Play
here at the top.

00:04:39.440 --> 00:04:41.630
And basically, we
get "what we see

00:04:41.630 --> 00:04:43.600
is what we get"
kind of attitude.

00:04:43.600 --> 00:04:46.620
However, there are some
problems here, the biggest of,

00:04:46.620 --> 00:04:49.230
we don't have
stereoscopic rendering.

00:04:49.230 --> 00:04:53.330
Luckily, it is really simple
to get it with our SDK.

00:04:53.330 --> 00:04:58.790
Now, I have
downloaded the package

00:04:58.790 --> 00:05:03.060
for importing the Google
VR SDK just before,

00:05:03.060 --> 00:05:05.990
and this is simply
a Unity package.

00:05:05.990 --> 00:05:09.550
I can double click
on it, and it will

00:05:09.550 --> 00:05:13.320
load all the relevant
assets into our project.

00:05:17.350 --> 00:05:20.380
Now, next, I'm just going
to delete the main camera,

00:05:20.380 --> 00:05:21.910
because we no longer need it.

00:05:21.910 --> 00:05:24.870
We want to have
stereoscopic view.

00:05:24.870 --> 00:05:27.330
So I'm deleting that.

00:05:27.330 --> 00:05:30.400
And as you may see, here
down into the project assets,

00:05:30.400 --> 00:05:32.750
we have the Google
VR folder now.

00:05:32.750 --> 00:05:36.090
So I'll go into it,
and I'll go to prefabs.

00:05:36.090 --> 00:05:40.360
And then I'll drag the Google
VR Main into the scene,

00:05:40.360 --> 00:05:42.470
and place it just
here, at the back.

00:05:42.470 --> 00:05:44.780
Now, a prefab is
basically a collection

00:05:44.780 --> 00:05:48.220
of game objects already
set up with components.

00:05:48.220 --> 00:05:50.010
So in this case,
this is what we need

00:05:50.010 --> 00:05:51.870
to do stereoscopic rendering.

00:05:51.870 --> 00:05:55.880
I can press play, and now
we have all we need for VR.

00:05:55.880 --> 00:05:59.500
If I press Alt, I can simulate
head movement, use my mouse,

00:05:59.500 --> 00:06:01.540
and look around.

00:06:01.540 --> 00:06:03.750
The stereoscopic
camera basically

00:06:03.750 --> 00:06:07.270
works if I open up it on
the left in the hierarchy.

00:06:07.270 --> 00:06:10.320
It has a head and
a stereo renderer.

00:06:10.320 --> 00:06:12.730
The head also has
a camera, which

00:06:12.730 --> 00:06:16.040
is a template camera for
two different cameras, one

00:06:16.040 --> 00:06:19.950
camera for each eye, simulating
the distance between our two

00:06:19.950 --> 00:06:21.280
eyes, basically.

00:06:21.280 --> 00:06:26.150
This is how we do the illusion
of depth and depth sensation.

00:06:26.150 --> 00:06:29.530
So we know how far someone
in the crowd is from me,

00:06:29.530 --> 00:06:32.700
or I am from you.

00:06:32.700 --> 00:06:36.780
OK, now let's open up a project
I have prepared beforehand,

00:06:36.780 --> 00:06:38.260
so we can get started.

00:06:38.260 --> 00:06:41.200
Because if we start making
the entire scene from scratch,

00:06:41.200 --> 00:06:44.420
it's going to take
quite a while.

00:06:44.420 --> 00:06:47.320
And we want to make
any game like that.

00:06:47.320 --> 00:06:49.900
So this is the very basic scene.

00:06:49.900 --> 00:06:52.780
I can move inside
by zooming in, using

00:06:52.780 --> 00:06:56.720
the scroll wheel or the track
pad, and I can look around.

00:06:56.720 --> 00:06:59.650
And let's see what
we are going to do.

00:06:59.650 --> 00:07:02.970
So we have our castle
made of Cardboard,

00:07:02.970 --> 00:07:04.720
and on the other
side of the island,

00:07:04.720 --> 00:07:07.000
we have the little
Android statue

00:07:07.000 --> 00:07:12.040
signifying where the invading
Androids will come from.

00:07:12.040 --> 00:07:14.100
Here on top of the
castle, we also

00:07:14.100 --> 00:07:19.480
have our cannon that we'll be
using to fire at the Androids.

00:07:19.480 --> 00:07:22.470
And again, all the assets
here, including the scenes,

00:07:22.470 --> 00:07:26.640
are already ready for you
to download off GitHub.

00:07:26.640 --> 00:07:29.790
If I press Play, I've
already prepared the camera

00:07:29.790 --> 00:07:31.280
on top of one of the towers.

00:07:31.280 --> 00:07:33.810
So I can look
around and see where

00:07:33.810 --> 00:07:35.640
the Androids will come from.

00:07:35.640 --> 00:07:37.900
However, nothing is
happening at the moment,

00:07:37.900 --> 00:07:39.770
so we'll need to
add some gameplay.

00:07:39.770 --> 00:07:43.360
So let's see how we are going
to add Androids to spawn

00:07:43.360 --> 00:07:46.980
from somewhere in the island.

00:07:46.980 --> 00:07:50.470
So I'm just going to disable
a few scenes on the left.

00:07:50.470 --> 00:07:53.290
I'm going to create a
new game object-- let's

00:07:53.290 --> 00:07:57.060
say, just an empty one-- and
I'm going to call it spawner,

00:07:57.060 --> 00:07:59.670
because this is what's going
to spawn my Androids from.

00:07:59.670 --> 00:08:02.140
So I'm doing it here on
the right at the Inspector.

00:08:02.140 --> 00:08:05.500
Now I'm going to
create a new component,

00:08:05.500 --> 00:08:08.150
and I'll just call it
spawner, because it's simple.

00:08:11.450 --> 00:08:15.850
And then I can double click the
script here on the Inspector

00:08:15.850 --> 00:08:18.850
to open it up in
MonoDevelop, or whatever

00:08:18.850 --> 00:08:22.830
script you want to use.

00:08:22.830 --> 00:08:28.800
I'm going to add a short timer.

00:08:28.800 --> 00:08:34.110
I'll start it at, maybe,
one second, to begin with.

00:08:37.640 --> 00:08:44.800
And let's add another
one for respond time,

00:08:44.800 --> 00:08:46.800
and set it up to five seconds.

00:08:49.660 --> 00:08:55.030
Now, on the update,
what we should be doing

00:08:55.030 --> 00:08:59.410
is decrease our
timer so we can get

00:08:59.410 --> 00:09:02.440
new Androids into our scene.

00:09:02.440 --> 00:09:04.155
So we'll use time delta time.

00:09:08.310 --> 00:09:14.370
And then, if our timer is-- I
keep getting code completion

00:09:14.370 --> 00:09:15.220
errors, here.

00:09:21.790 --> 00:09:22.290
Oh.

00:09:22.290 --> 00:09:23.800
Before I can spawn
Androids, I need

00:09:23.800 --> 00:09:26.440
to have some locations
I can spawn them from.

00:09:26.440 --> 00:09:36.110
So let's add a list
of transformations,

00:09:36.110 --> 00:09:41.250
correspond points, and
just initialize it here.

00:09:48.390 --> 00:09:48.890
OK.

00:09:48.890 --> 00:09:52.694
So now, if I look
into this scene,

00:09:52.694 --> 00:09:54.360
you see that the
spawner script is going

00:09:54.360 --> 00:09:56.420
to update in just a moment.

00:09:56.420 --> 00:09:57.400
There we go.

00:09:57.400 --> 00:10:00.280
So now, we have the timer
and the respond timer,

00:10:00.280 --> 00:10:07.010
and we'll be able to add some
points to let the script know

00:10:07.010 --> 00:10:09.330
where to place Androids at.

00:10:09.330 --> 00:10:12.220
We also need to create
a path into the island.

00:10:12.220 --> 00:10:16.250
So for that, what we can do,
just to make it simple again,

00:10:16.250 --> 00:10:18.400
I'll create a new game object.

00:10:18.400 --> 00:10:21.180
That will be a sphere.

00:10:21.180 --> 00:10:25.090
And I can place it
somewhere inside the scene.

00:10:25.090 --> 00:10:28.150
And this signifies a point
in space at the moment.

00:10:28.150 --> 00:10:30.220
I'll just remove
the sphere collider,

00:10:30.220 --> 00:10:32.970
so objects do not
collide with it later on.

00:10:32.970 --> 00:10:36.360
And then I'll add a
waypoint script which

00:10:36.360 --> 00:10:38.230
I have prepared beforehand.

00:10:38.230 --> 00:10:41.430
All it does is have
a list of what's

00:10:41.430 --> 00:10:43.040
the next point going to be.

00:10:43.040 --> 00:10:48.130
And then it can duplicate this--
just Command C, Command V--

00:10:48.130 --> 00:10:51.360
and I can go into
the first sphere

00:10:51.360 --> 00:10:55.360
and drag and drop the
sphere from the hierarchy

00:10:55.360 --> 00:10:57.600
into the next.

00:10:57.600 --> 00:11:00.090
So I can have them
linked to each other.

00:11:00.090 --> 00:11:01.950
And then, I will
have to keep doing it

00:11:01.950 --> 00:11:05.360
until they cross over the
bridge and go to the castle.

00:11:05.360 --> 00:11:07.810
But this is just a way to start.

00:11:07.810 --> 00:11:13.890
So now that we have some object,
we will go to our spawner,

00:11:13.890 --> 00:11:17.518
and we will add the initial
point into the spawn points.

00:11:20.330 --> 00:11:24.110
And now, if the timer
is less than zero,

00:11:24.110 --> 00:11:30.150
then we'll just set the timer
back to the respond timer.

00:11:30.150 --> 00:11:33.460
And we'll go to an Android pool,
which I'll go to in more detail

00:11:33.460 --> 00:11:38.600
later, and I'll
create the position.

00:11:38.600 --> 00:11:39.770
That is my position.

00:11:39.770 --> 00:11:42.075
I'm going to do a transform.

00:11:42.075 --> 00:11:43.065
Create Transform.

00:12:03.360 --> 00:12:09.652
And I'll use the size of
the elements inside my list.

00:12:20.720 --> 00:12:21.260
There we go.

00:12:21.260 --> 00:12:22.676
Have I missed a
bracket somewhere?

00:12:26.850 --> 00:12:28.350
All good.

00:12:28.350 --> 00:12:29.050
OK.

00:12:29.050 --> 00:12:34.757
And now that we have the two
set up, we'll press Play again.

00:12:34.757 --> 00:12:36.340
If we go over to the
scene view, we'll

00:12:36.340 --> 00:12:40.010
see every few seconds-- every
five seconds, specifically--

00:12:40.010 --> 00:12:42.110
we'll have an Android coming up.

00:12:42.110 --> 00:12:45.430
Now, I'm not going to create
the entire path, here,

00:12:45.430 --> 00:12:49.150
because I think that editing
should be done later.

00:12:49.150 --> 00:12:50.510
It's not very interesting.

00:12:50.510 --> 00:12:52.960
So I do have enemies path.

00:12:52.960 --> 00:12:55.970
And here, if I go to layers,
here at the top right,

00:12:55.970 --> 00:12:59.930
and mark invisible to enable
it, we can see them in here.

00:12:59.930 --> 00:13:02.064
And I just collapse it.

00:13:02.064 --> 00:13:04.410
I'll decollapse this one.

00:13:04.410 --> 00:13:08.250
I'll go to the spawner, and
I'll drag and drop my waypoints

00:13:08.250 --> 00:13:11.948
here from the left
and on to the list.

00:13:15.850 --> 00:13:19.890
And now that I press
Play again, we'll

00:13:19.890 --> 00:13:25.100
have Androids spawning
from various spawn points

00:13:25.100 --> 00:13:26.180
here on the scene.

00:13:26.180 --> 00:13:34.160
And we'll go over to the castle,
through the different paths.

00:13:34.160 --> 00:13:35.220
OK.

00:13:35.220 --> 00:13:37.770
So we have basic Androids
coming to the scene.

00:13:37.770 --> 00:13:39.837
We can look at
them from the game.

00:13:39.837 --> 00:13:40.670
I can also maximize.

00:13:40.670 --> 00:13:41.480
Let's see.

00:13:41.480 --> 00:13:42.850
You might be able to see it.

00:13:45.500 --> 00:13:48.810
But we don't have any way
to interact with them.

00:13:48.810 --> 00:13:52.610
We need some kind of a way
to shoot them off our island,

00:13:52.610 --> 00:13:54.510
so they don't get to the castle.

00:13:54.510 --> 00:13:57.030
So let's look into our ground.

00:13:57.030 --> 00:14:01.000
Let's look at, how are we
going to shoot with the cannon

00:14:01.000 --> 00:14:03.240
onto the ground somehow?

00:14:03.240 --> 00:14:06.980
So selecting the terrain,
I'll go to Add Component,

00:14:06.980 --> 00:14:09.755
and I'll add a target behavior.

00:14:14.110 --> 00:14:16.110
And we'll just make
a very quick script,

00:14:16.110 --> 00:14:18.630
so we can shoot
onto the cannons.

00:14:18.630 --> 00:14:22.320
I don't actually need
the start or update here.

00:14:22.320 --> 00:14:27.230
So what I'll do is make
a new function, on click.

00:14:27.230 --> 00:14:36.980
And then I'll use the base
event data from Unity,

00:14:36.980 --> 00:14:40.265
and then I'll cast it
into a pointer event.

00:14:44.750 --> 00:14:45.250
Data.

00:14:54.100 --> 00:14:55.918
Maybe I'll actually name this.

00:15:01.502 --> 00:15:03.460
But before that, I need
to make sure I actually

00:15:03.460 --> 00:15:06.420
have a cannon inside the scene.

00:15:06.420 --> 00:15:09.478
So I did add one beforehand.

00:15:09.478 --> 00:15:11.920
So I'll just make sure
it actually exists.

00:15:24.080 --> 00:15:26.440
And now, we'll make
the cannon shoot

00:15:26.440 --> 00:15:30.590
from the current
side of the scene

00:15:30.590 --> 00:15:32.900
onto the intersection point.

00:15:39.120 --> 00:15:40.168
What am I missing here?

00:15:45.544 --> 00:15:46.820
Wonder if there's brackets.

00:15:55.631 --> 00:15:56.130
Oh.

00:15:56.130 --> 00:15:57.213
I was in the wrong script.

00:15:57.213 --> 00:15:58.112
Sorry about that.

00:16:02.050 --> 00:16:08.230
And all I'm going to do
is use the transformation

00:16:08.230 --> 00:16:11.770
from the raycast, and
I'll get to more detail

00:16:11.770 --> 00:16:17.050
on that in a moment.

00:16:17.050 --> 00:16:18.330
Let's see.

00:16:18.330 --> 00:16:19.250
What position?

00:16:19.250 --> 00:16:20.460
That sounds about right.

00:16:20.460 --> 00:16:23.390
OK, but even now, if I
press onto the terrain,

00:16:23.390 --> 00:16:24.920
nothing will happen.

00:16:24.920 --> 00:16:28.720
We need to add a few
more interactions, here.

00:16:28.720 --> 00:16:30.610
The first thing we
need to do is add a way

00:16:30.610 --> 00:16:36.690
to receive events from Unity
and from our Google VR SDK,

00:16:36.690 --> 00:16:38.820
so we know when an
object had actually

00:16:38.820 --> 00:16:41.080
been clicked in any way.

00:16:41.080 --> 00:16:46.770
So I'm going to add a
event system from Unity.

00:16:46.770 --> 00:16:49.440
The event system,
all it does is relay

00:16:49.440 --> 00:16:51.750
the events between objects.

00:16:51.750 --> 00:16:54.455
So it comes with a
stand-alone input module,

00:16:54.455 --> 00:16:56.330
which I'm going to
remove, because we are not

00:16:56.330 --> 00:16:57.710
going to use it.

00:16:57.710 --> 00:17:00.790
And I'll add a
gaze input module.

00:17:00.790 --> 00:17:06.780
This is basically going to take
the orientation off our camera

00:17:06.780 --> 00:17:10.030
and transform it
into the events.

00:17:10.030 --> 00:17:14.020
At the moment, there is not
such element for the controller,

00:17:14.020 --> 00:17:16.859
but this will be coming soon.

00:17:16.859 --> 00:17:20.800
So the next thing
I need to do is

00:17:20.800 --> 00:17:24.240
go to my camera
inside Google VR Main,

00:17:24.240 --> 00:17:27.540
go to the main camera
template, and we'll

00:17:27.540 --> 00:17:30.170
add a physics raycaster.

00:17:30.170 --> 00:17:32.430
Now, on its own,
the event system

00:17:32.430 --> 00:17:35.420
will allow you to interact
with UI canvas elements.

00:17:35.420 --> 00:17:38.130
But if you want to interact
with objects inside the scene,

00:17:38.130 --> 00:17:41.170
you need to add a
physics raycaster for it

00:17:41.170 --> 00:17:42.250
to interact with it.

00:17:42.250 --> 00:17:44.405
So I'm going to
set the event mask.

00:17:44.405 --> 00:17:47.372
The event mask basically says
which layers in the scene

00:17:47.372 --> 00:17:48.080
are interactable.

00:17:48.080 --> 00:17:50.740
And I will just set
it up to nothing,

00:17:50.740 --> 00:17:53.300
and then I'll set it
again to the grid.

00:17:53.300 --> 00:17:55.250
The grid is the name I
chose for the terrain.

00:17:55.250 --> 00:17:58.070
You can see it here up on layer.

00:17:58.070 --> 00:18:00.480
It is selected as
grid, and that means

00:18:00.480 --> 00:18:05.300
that when the gaze input module
is looking into the camera,

00:18:05.300 --> 00:18:08.070
finding its views, it's
going to find exactly

00:18:08.070 --> 00:18:11.040
which object it is looking
on, but only from the layers

00:18:11.040 --> 00:18:13.490
that you have enabled.

00:18:13.490 --> 00:18:15.430
So the next thing we
need to do-- OK, now we

00:18:15.430 --> 00:18:18.620
have everything kind of
working and interactable,

00:18:18.620 --> 00:18:21.720
but we never actually call
our script from anywhere.

00:18:21.720 --> 00:18:24.140
So going back to our terrain,
I'll just click on it here

00:18:24.140 --> 00:18:28.690
in the editor, what we need
to do-- and this is our water,

00:18:28.690 --> 00:18:34.242
so click again on the terrain--
is create an event trigger.

00:18:34.242 --> 00:18:36.540
What the event trigger
does is basically

00:18:36.540 --> 00:18:40.800
say that this object is
listening for the following

00:18:40.800 --> 00:18:41.580
events.

00:18:41.580 --> 00:18:46.850
And I'll add a
pointer click event.

00:18:46.850 --> 00:18:49.810
And then, I'll select
the same object.

00:18:49.810 --> 00:18:51.990
I can just drag and
drop it from here,

00:18:51.990 --> 00:18:56.760
from the scene on the left,
into the missing component.

00:18:56.760 --> 00:18:59.020
And then, it shows
me all the components

00:18:59.020 --> 00:19:02.290
that are on this
object, and they

00:19:02.290 --> 00:19:03.600
can select the one they want.

00:19:03.600 --> 00:19:07.850
So I have made a
target behavior.

00:19:07.850 --> 00:19:10.640
So I'll just select on click.

00:19:10.640 --> 00:19:14.240
And when I press Play the
next time, and I look around,

00:19:14.240 --> 00:19:17.970
I'll be able to
activate the cannon,

00:19:17.970 --> 00:19:21.180
and we'll be able to
fire onto the Android.

00:19:21.180 --> 00:19:23.920
However, it's actually
really difficult.

00:19:23.920 --> 00:19:26.380
And I'll just put it
first in, actually.

00:19:26.380 --> 00:19:31.220
It is actually really
difficult to aim this way.

00:19:31.220 --> 00:19:32.920
I have no idea where
I'm pointing at.

00:19:32.920 --> 00:19:35.370
I'm just doing this
at random, almost.

00:19:35.370 --> 00:19:39.106
So what I'm going to
do is add a reticle.

00:19:39.106 --> 00:19:43.060
So I'll search here
in the project assets,

00:19:43.060 --> 00:19:45.670
and I'll find the
Google VR reticle.

00:19:45.670 --> 00:19:50.240
And what I'm going to do
is drag it down onto head,

00:19:50.240 --> 00:19:52.790
and I'll make sure that
its position is reset here

00:19:52.790 --> 00:19:53.820
in the Inspector.

00:19:53.820 --> 00:19:55.760
It already is, so it's good.

00:19:55.760 --> 00:19:57.940
And the next time
I start my scene,

00:19:57.940 --> 00:20:01.340
you see there is a little
point in the middle

00:20:01.340 --> 00:20:05.220
of the screen, which is telling
me where I'm looking at.

00:20:05.220 --> 00:20:08.680
Now, if it looks at an object
that is marked as interactable,

00:20:08.680 --> 00:20:12.480
it will grow to signify
that the object can

00:20:12.480 --> 00:20:15.494
be interacted in some way,
and I can shoot there.

00:20:19.730 --> 00:20:24.350
However, once again,
we have gameplay.

00:20:24.350 --> 00:20:26.510
We have some
minimal interaction.

00:20:26.510 --> 00:20:29.030
But the game feels
somewhat empty.

00:20:29.030 --> 00:20:31.840
I mentioned before in
the presentation that,

00:20:31.840 --> 00:20:34.800
to make a really good
virtual reality experience,

00:20:34.800 --> 00:20:36.970
you want to have sound.

00:20:36.970 --> 00:20:41.200
So let's look into how we're
going to add some sound in.

00:20:41.200 --> 00:20:46.700
So I want to have an epic
sound for the cannon, whenever

00:20:46.700 --> 00:20:48.810
I shoot at the Androids.

00:20:48.810 --> 00:20:53.340
So I'm going to look into
my cannonball object.

00:20:53.340 --> 00:20:56.370
The cannonball object
is found every time

00:20:56.370 --> 00:21:00.230
where I select to shoot
somewhere into the scene.

00:21:00.230 --> 00:21:07.250
The first thing I will do is,
I will add an audio source.

00:21:07.250 --> 00:21:11.470
If you have listened to the
binaural audio presentation

00:21:11.470 --> 00:21:13.630
earlier, you might
be familiar with it.

00:21:13.630 --> 00:21:17.060
But this is our Google
VR implementation

00:21:17.060 --> 00:21:21.920
of 3D binaural audio, and you
can use it just like this.

00:21:21.920 --> 00:21:23.790
Now, it's on the object.

00:21:23.790 --> 00:21:28.880
I'm going to select a specific
sound, the cannonball fire

00:21:28.880 --> 00:21:31.320
sound.

00:21:31.320 --> 00:21:35.990
I have also prepared the
cannonball behavior script,

00:21:35.990 --> 00:21:39.240
which is what controls
the flight of the cannon,

00:21:39.240 --> 00:21:41.330
and then the
explosion at the end.

00:21:41.330 --> 00:21:44.915
And it has an another element
here, for the input audio.

00:21:44.915 --> 00:21:49.490
So I'll just go in here, and
I'll select the cannon impact

00:21:49.490 --> 00:21:50.910
here on the left.

00:21:50.910 --> 00:21:53.720
And if we look quickly on
the cannonball behavior,

00:21:53.720 --> 00:21:58.530
we will see this on impact
script here at the bottom.

00:21:58.530 --> 00:22:02.690
And what it does is select
the variable which I have just

00:22:02.690 --> 00:22:07.450
filled in, and it will play
it once our cannonball is just

00:22:07.450 --> 00:22:11.600
about to hit the ground,
inside the [INAUDIBLE].

00:22:11.600 --> 00:22:13.430
It's a pretty short
script, so if you're

00:22:13.430 --> 00:22:16.180
following on the
YouTube video later,

00:22:16.180 --> 00:22:17.610
you can easily find it all.

00:22:20.480 --> 00:22:23.910
Now here, you have additional
settings for the sounds.

00:22:23.910 --> 00:22:26.780
In this case, I want it
to be an epic explosion,

00:22:26.780 --> 00:22:28.720
so I'm just going to
put the gain on the max,

00:22:28.720 --> 00:22:33.410
and hope it will all work
well on the speakers, here.

00:22:33.410 --> 00:22:37.180
But you also have
settings for directivity,

00:22:37.180 --> 00:22:41.130
which is how the sound
is going to distribute

00:22:41.130 --> 00:22:44.650
and spread out in space.

00:22:44.650 --> 00:22:47.680
Here, you'll see the
circle showing how

00:22:47.680 --> 00:22:50.520
the sound waves will spread.

00:22:50.520 --> 00:22:55.190
If I use the alpha, you see
it become larger on the front,

00:22:55.190 --> 00:22:57.980
and then it will spread
more towards the back.

00:22:57.980 --> 00:23:01.800
Well, if I use the sharpness,
it will make it more sharp,

00:23:01.800 --> 00:23:03.110
as you would expect.

00:23:03.110 --> 00:23:05.830
So give it more of a direction.

00:23:05.830 --> 00:23:09.470
For the cannonball, I'll
use a sound that spreads

00:23:09.470 --> 00:23:12.600
in everywhere at the same time.

00:23:12.600 --> 00:23:15.030
You can also enable
occlusion for the sound

00:23:15.030 --> 00:23:18.370
to bounce off elements
from the scene,

00:23:18.370 --> 00:23:20.630
but I'm going to skip
that at the moment.

00:23:20.630 --> 00:23:24.560
Now, I kind of want to
press play and just see

00:23:24.560 --> 00:23:27.520
how the sound is working,
but it will not work.

00:23:27.520 --> 00:23:29.180
There is one more
step we need to do.

00:23:29.180 --> 00:23:32.820
If I go Edit here, on the
top, and to Project Settings,

00:23:32.820 --> 00:23:37.150
and go to Audio, we need to set
the specializer plug in here

00:23:37.150 --> 00:23:40.555
on the right from None to
Google VR Audio Specializer.

00:23:43.110 --> 00:23:45.340
And once again, all
of these instructions

00:23:45.340 --> 00:23:48.380
will be in the
GitHub readme file.

00:23:48.380 --> 00:23:55.380
Now, the next time I press
Play, when I fire at Androids--

00:23:55.380 --> 00:24:01.320
and I'll maximize this
again-- here's one.

00:24:01.320 --> 00:24:03.290
It's coming.

00:24:03.290 --> 00:24:05.690
There we go.

00:24:05.690 --> 00:24:07.410
We'll have some 3D audio.

00:24:07.410 --> 00:24:10.620
Now, if you are with
speakers on a device,

00:24:10.620 --> 00:24:12.980
or even on the computer,
you will find out

00:24:12.980 --> 00:24:15.400
that when you look in
different directions,

00:24:15.400 --> 00:24:17.150
the stereo sound
will come as you

00:24:17.150 --> 00:24:18.590
would expect it to come from.

00:24:21.520 --> 00:24:24.830
I also want to add some
sounds to the Androids,

00:24:24.830 --> 00:24:28.930
but I'm going to cheat, here,
because I have a lot to cover.

00:24:28.930 --> 00:24:31.266
So a lot of it is
prepared beforehand.

00:24:31.266 --> 00:24:32.890
I'm just going to
look for the Android.

00:24:32.890 --> 00:24:34.695
I'm going to search
here in the project.

00:24:34.695 --> 00:24:37.660
I'll find the Android
prefab, and I'm

00:24:37.660 --> 00:24:42.950
going to add another Google
VR audio source component.

00:24:42.950 --> 00:24:45.570
Now, I'm not going to
set any sound in here.

00:24:45.570 --> 00:24:48.180
I'm going to disable
the play on awake.

00:24:48.180 --> 00:24:51.470
This is because I've
already set some sounds here

00:24:51.470 --> 00:24:55.810
in different lists, and if
we go into the script itself,

00:24:55.810 --> 00:24:59.840
you'll notice there are
multiple lists of audio clips.

00:24:59.840 --> 00:25:05.180
And when we enable the Android,
it will play the charge sound.

00:25:05.180 --> 00:25:08.120
And when it's going to be
exploded away by the cannon,

00:25:08.120 --> 00:25:11.890
we will play an impact
sound, just as an example.

00:25:11.890 --> 00:25:15.180
Now, when I press Play, every
time an Android will spawn,

00:25:15.180 --> 00:25:17.260
it will have some
kind of a charge.

00:25:17.260 --> 00:25:21.600
And when I shoot
towards it and hit it,

00:25:21.600 --> 00:25:24.590
it will have an uh-oh
sound and fly away.

00:25:24.590 --> 00:25:26.640
You'll probably hear
it better on a device.

00:25:26.640 --> 00:25:29.195
You can get the APK
from the GitHub.

00:25:29.195 --> 00:25:32.440
It's online right now.

00:25:32.440 --> 00:25:38.000
So this is the Google
VR interaction,

00:25:38.000 --> 00:25:42.550
the stereoscopic
rendering, and the audio.

00:25:42.550 --> 00:25:47.250
A few quick more words
about the interaction.

00:25:47.250 --> 00:25:51.050
When you're pointing
at an element--

00:25:51.050 --> 00:25:52.480
let's do it as an example.

00:25:52.480 --> 00:25:54.880
I'm going to maximize
it-- the reticle

00:25:54.880 --> 00:25:57.030
is quite smart, actually.

00:25:57.030 --> 00:26:01.020
In VR, you really need to
be able to converge exactly

00:26:01.020 --> 00:26:02.610
where you're looking at.

00:26:02.610 --> 00:26:06.879
And the reticle tends to
take the depth of the element

00:26:06.879 --> 00:26:07.920
that you are pointing at.

00:26:07.920 --> 00:26:10.840
So if we are pointing
out at the terrain here,

00:26:10.840 --> 00:26:14.870
it's not only spreading out
to show that the terrain is

00:26:14.870 --> 00:26:19.210
interactable, but it's
actually casting its position

00:26:19.210 --> 00:26:22.510
onto the depth of
the terrain itself.

00:26:22.510 --> 00:26:24.320
However, in this
case, I have not

00:26:24.320 --> 00:26:29.360
set the trees to be occluders
inside the event mask,

00:26:29.360 --> 00:26:33.730
as well as the tower, which
means that the reticle is

00:26:33.730 --> 00:26:37.830
probably rendering in front of
them, but still being visible,

00:26:37.830 --> 00:26:40.260
which can make some
issues with convergence,

00:26:40.260 --> 00:26:43.580
especially if we look down
here onto the terrain,

00:26:43.580 --> 00:26:45.500
but also onto the tower.

00:26:45.500 --> 00:26:51.370
So what you want to do in this
case is, go to your main camera

00:26:51.370 --> 00:26:55.270
and add some more elements
into the event mask down here.

00:26:55.270 --> 00:26:58.176
So for example, if
we add the default,

00:26:58.176 --> 00:26:59.550
you will notice
that, whenever we

00:26:59.550 --> 00:27:04.210
are looking on to a tower or a
tree, it will no longer grow,

00:27:04.210 --> 00:27:09.370
and the depth will be cast
properly in the reticle.

00:27:09.370 --> 00:27:13.590
Now, I have just
about 15 minutes.

00:27:13.590 --> 00:27:16.850
And this is a very
basic game, but I really

00:27:16.850 --> 00:27:20.080
want to talk about
performance, here.

00:27:20.080 --> 00:27:23.250
When I was making this demo,
I had about two and 1/2 weeks

00:27:23.250 --> 00:27:26.450
to do it, and I was trying to
do some really fancy stuff.

00:27:26.450 --> 00:27:31.110
However, doing work and working
on a game demo at the same time

00:27:31.110 --> 00:27:33.480
actually turned out to
be pretty difficult.

00:27:33.480 --> 00:27:36.790
And after the game
was finished, it maybe

00:27:36.790 --> 00:27:40.230
ran at, like, 45 frames per
second, which is not great.

00:27:40.230 --> 00:27:45.690
Now, it's running on 60 FPS on
the device at full resolution.

00:27:45.690 --> 00:27:50.410
But this gave me even
more firsthand experience

00:27:50.410 --> 00:27:51.950
to give you some
performance tips.

00:27:51.950 --> 00:27:54.420
So let's look into them.

00:27:54.420 --> 00:27:57.430
If we look into
the Google VR, we

00:27:57.430 --> 00:28:02.030
will notice that we have
our VR mode enabled,

00:28:02.030 --> 00:28:03.890
which is what we want
to do, but we also

00:28:03.890 --> 00:28:06.180
have distortion correction.

00:28:06.180 --> 00:28:08.890
If we press Play, and we
look into the distortion,

00:28:08.890 --> 00:28:11.650
we can set it to none,
which means it's not

00:28:11.650 --> 00:28:13.490
going to fix the distortion.

00:28:13.490 --> 00:28:15.810
The distortion-- it's
been cautioned distortion

00:28:15.810 --> 00:28:18.190
caused by the lenses,
when you're looking

00:28:18.190 --> 00:28:20.120
through them onto the screen.

00:28:20.120 --> 00:28:23.250
You want to use
distortion correction.

00:28:23.250 --> 00:28:25.500
However, there are
several ways to do so.

00:28:25.500 --> 00:28:28.970
If you have watched the
vertex distortion correction

00:28:28.970 --> 00:28:33.410
presentation-- I'm not sure if
it was before mine or after--

00:28:33.410 --> 00:28:36.020
but it mentions a
way to do correction

00:28:36.020 --> 00:28:37.510
without post-processing.

00:28:37.510 --> 00:28:39.860
The way we do it here
is we're doing it

00:28:39.860 --> 00:28:41.920
in the post process,
which means we

00:28:41.920 --> 00:28:46.380
will need to draw every pixel
again with a correction.

00:28:46.380 --> 00:28:48.590
The vertex correction
happens when

00:28:48.590 --> 00:28:51.630
you are drawing the objects
themselves onto the screen,

00:28:51.630 --> 00:28:56.310
and it will distort them to fit
and look how they should look,

00:28:56.310 --> 00:29:00.330
so you don't need to use
additional pixel rendering time

00:29:00.330 --> 00:29:02.750
and waste more of
your GPU bandwidth,

00:29:02.750 --> 00:29:07.310
because that tends to be one
of the more expensive things.

00:29:07.310 --> 00:29:10.680
So if I'm not using the
vertex base correction,

00:29:10.680 --> 00:29:13.250
I'll use either Native or Unity.

00:29:13.250 --> 00:29:14.910
In this case, I'm using Unity.

00:29:14.910 --> 00:29:17.870
And you can play with the
[? stereo ?] screen scale.

00:29:17.870 --> 00:29:22.890
That changes the virtual
display that we are drawing to.

00:29:22.890 --> 00:29:28.000
When we are drawing our scene,
our game or application,

00:29:28.000 --> 00:29:31.520
we are actually drawing it
into an off-screen buffer,

00:29:31.520 --> 00:29:34.840
which is a larger size
of our real screen.

00:29:34.840 --> 00:29:39.010
We do it so we can completely
remove any artifacts

00:29:39.010 --> 00:29:42.070
and distortion, and that
includes any of our details.

00:29:42.070 --> 00:29:46.180
So we are fixing the
pixel error by drawing

00:29:46.180 --> 00:29:47.690
on a higher resolution.

00:29:47.690 --> 00:29:49.860
But sometimes,
depending on the device,

00:29:49.860 --> 00:29:52.720
you'll find that the generated
resolution is too high,

00:29:52.720 --> 00:29:58.450
and you might want to change
it from 1 to maybe 0.9 or 0.8.

00:29:58.450 --> 00:30:01.710
I'm going to leave it
at 1 here, because it's

00:30:01.710 --> 00:30:03.850
working quite well.

00:30:03.850 --> 00:30:09.020
Now, the other thing you can
do is go into your Edit menu,

00:30:09.020 --> 00:30:15.440
and go into Project, and we'll
just look into quality here.

00:30:15.440 --> 00:30:20.410
So I like to make an equality
level-- I call it Google VR,

00:30:20.410 --> 00:30:24.260
or GVR for short--
and I set Android

00:30:24.260 --> 00:30:29.420
to be the user by default.

00:30:29.420 --> 00:30:31.790
Now, depending on
your scene, if you're

00:30:31.790 --> 00:30:34.770
using a lot of lighting
or heavy shaders,

00:30:34.770 --> 00:30:39.170
I'd suggest to bake all your
lighting into a texture.

00:30:39.170 --> 00:30:41.170
I'm not going to go
over how to do it now.

00:30:41.170 --> 00:30:43.860
There's enough
information on it online.

00:30:43.860 --> 00:30:48.140
But in that case, you can
lower your pixel count.

00:30:48.140 --> 00:30:50.040
And depending on your
scene, you might even

00:30:50.040 --> 00:30:53.830
be able to move to
vertex lighting,

00:30:53.830 --> 00:30:57.000
but that's in a different
menu, so I'll go to it later.

00:30:57.000 --> 00:31:00.780
If you're not using soft
particles, or any reflections,

00:31:00.780 --> 00:31:02.770
you might want to disable this.

00:31:02.770 --> 00:31:07.500
I do suggest keeping
multi-sampling at least at 2.

00:31:07.500 --> 00:31:11.100
When you're looking into the
screen through the lenses,

00:31:11.100 --> 00:31:13.420
and you don't have
multi-sampling on,

00:31:13.420 --> 00:31:16.530
then you will see all the
[INAUDIBLE] and jagged edges.

00:31:16.530 --> 00:31:19.020
And that's not a pretty
experience on your eyes,

00:31:19.020 --> 00:31:20.710
to see all those jagged edges.

00:31:20.710 --> 00:31:23.910
So try to make sure that
your game or application

00:31:23.910 --> 00:31:30.300
is performing well enough to
enable [INAUDIBLE] at least 2x,

00:31:30.300 --> 00:31:34.460
because otherwise, it's just
not going to look as great,

00:31:34.460 --> 00:31:38.480
unless you are rendering at
a much higher resolution.

00:31:38.480 --> 00:31:42.110
Now, as I mentioned, if you
can, play with your shadows,

00:31:42.110 --> 00:31:43.420
play with your light.

00:31:43.420 --> 00:31:45.450
Try to bake your
shadows as well.

00:31:45.450 --> 00:31:49.060
And then, if you can, you can
disable your real-time shadows

00:31:49.060 --> 00:31:51.100
or set it to hard shadows only.

00:31:51.100 --> 00:31:54.489
Another thing you can do is
change the shadow cascades

00:31:54.489 --> 00:31:54.988
instead.

00:31:58.355 --> 00:32:02.000
And shadow cascades is
multiple shadow maps

00:32:02.000 --> 00:32:05.280
used to have different
qualities between shadows

00:32:05.280 --> 00:32:08.270
that are near the
camera or further away.

00:32:08.270 --> 00:32:11.520
Because the shadows near
the camera need to be higher

00:32:11.520 --> 00:32:14.180
quality, because
the player can see

00:32:14.180 --> 00:32:17.260
all of the artifacts happening.

00:32:17.260 --> 00:32:22.680
Now, another thing we can
do is go here into Player.

00:32:22.680 --> 00:32:27.510
You have to set your default
orientation to landscape

00:32:27.510 --> 00:32:31.180
left to work with the viewer.

00:32:31.180 --> 00:32:32.760
Another thing you
might be able to do

00:32:32.760 --> 00:32:36.060
to gain more performance-- and
sometimes quality-- over mobile

00:32:36.060 --> 00:32:40.110
is, disable the 3D
bit display buffer.

00:32:40.110 --> 00:32:44.380
The reason for it is because
some phones do not actually

00:32:44.380 --> 00:32:50.010
have a 32-bit support, and they
emulate it using house points.

00:32:50.010 --> 00:32:52.840
So on some Galaxy
phones, for example,

00:32:52.840 --> 00:32:56.580
you're getting more shadow
artifacts without it, because

00:32:56.580 --> 00:32:58.780
of the emulation layer.

00:32:58.780 --> 00:33:01.770
And then, if you're
using only 16 bits,

00:33:01.770 --> 00:33:05.410
you are getting less
bandwidth usage, which

00:33:05.410 --> 00:33:07.170
means you're getting
more performance,

00:33:07.170 --> 00:33:13.070
and less heat is being generated
on the hardware itself.

00:33:13.070 --> 00:33:16.650
If we go to Auto Setting,
as I mentioned earlier,

00:33:16.650 --> 00:33:19.000
you can change to
vertex lighting,

00:33:19.000 --> 00:33:21.430
or you can keep it
at forward, if you

00:33:21.430 --> 00:33:24.290
have good enough performance,
depending on how you have

00:33:24.290 --> 00:33:26.630
made your scene and your game.

00:33:26.630 --> 00:33:29.610
I do very much
recommend enabling

00:33:29.610 --> 00:33:31.390
multi-threaded
rendering, because that

00:33:31.390 --> 00:33:35.040
is going to take a big
chunk of your CPU usage

00:33:35.040 --> 00:33:38.710
to another thread, and
then you can do more,

00:33:38.710 --> 00:33:41.390
and you will not be
as CPU sorted later

00:33:41.390 --> 00:33:45.470
for hitting up one code, and
using all the bandwidth there.

00:33:45.470 --> 00:33:48.660
You should use static
and dynamic batching.

00:33:48.660 --> 00:33:52.220
What that does is
reduce your draw calls.

00:33:52.220 --> 00:33:57.110
So if I go to the game, and I
press on the stats over here,

00:33:57.110 --> 00:34:00.420
you can see that I
have about [? 16.6 ?]

00:34:00.420 --> 00:34:06.440
draw calls inside this scene,
and I have 162 vertices.

00:34:06.440 --> 00:34:10.170
If I press Play, I'm going
to have double that amount,

00:34:10.170 --> 00:34:13.275
or just about that amount,
because Unity is going to be

00:34:13.275 --> 00:34:16.650
able to optimize to some level.

00:34:16.650 --> 00:34:20.060
The reason for it is because
we are drawing the scene twice.

00:34:20.060 --> 00:34:22.730
So it's doing double
the work, and you

00:34:22.730 --> 00:34:24.389
need to make sure
that you are not

00:34:24.389 --> 00:34:29.120
having too many vertices in the
scene, or too many triangles.

00:34:29.120 --> 00:34:32.510
Another thing that I
have noticed with Unity--

00:34:32.510 --> 00:34:34.130
and you might be
familiar with it,

00:34:34.130 --> 00:34:36.540
especially if you
have worked with C++--

00:34:36.540 --> 00:34:39.870
is that it doesn't really
like instantiating objects.

00:34:39.870 --> 00:34:42.570
That means a lot of
memory allocations.

00:34:42.570 --> 00:34:46.680
And for that, I have made
a specific memory pool.

00:34:46.680 --> 00:34:48.429
So if you look at the
memory pool in here,

00:34:48.429 --> 00:34:51.659
you see it will have two
scripts, one for cannonballs

00:34:51.659 --> 00:34:53.270
and one for the Androids.

00:34:53.270 --> 00:34:57.230
When I press Play, as this
object is being initialized,

00:34:57.230 --> 00:35:01.340
it's creating all these
unused cannonball elements

00:35:01.340 --> 00:35:04.040
and the Androids, which
are slowly being used.

00:35:04.040 --> 00:35:07.230
When I shoot a
cannonball-- let's say,

00:35:07.230 --> 00:35:11.010
over here-- you see one
cannonball is being used here

00:35:11.010 --> 00:35:12.490
at the top, and
in a few seconds,

00:35:12.490 --> 00:35:15.900
it will be disabled and
ready to be used again.

00:35:15.900 --> 00:35:19.610
This is to avoid heavy
memory allocations, which can

00:35:19.610 --> 00:35:22.610
be very expensive at runtime.

00:35:22.610 --> 00:35:26.370
So the way I make
a script like that

00:35:26.370 --> 00:35:30.580
is by creating a
single turn, and then

00:35:30.580 --> 00:35:34.150
having a couple of
static functions, one

00:35:34.150 --> 00:35:37.296
to create an element,
and one to destroy.

00:35:37.296 --> 00:35:39.680
On the initialization
of the script,

00:35:39.680 --> 00:35:42.760
it's going to make sure, if
there is no single turn, to set

00:35:42.760 --> 00:35:46.380
its own, and then it
will create however

00:35:46.380 --> 00:35:50.980
many instances of the
object that I set it to do.

00:35:50.980 --> 00:35:52.810
In this case, I've
put it on the code.

00:35:52.810 --> 00:35:56.310
You should put it as
a variable instead.

00:35:56.310 --> 00:35:59.660
OK, so I've managed to
finish a little bit ahead

00:35:59.660 --> 00:36:02.960
of time, which never happened
when I tried to do it before.

00:36:02.960 --> 00:36:04.460
[APPLAUSE]

00:36:05.660 --> 00:36:08.710
[MUSIC PLAYING]

