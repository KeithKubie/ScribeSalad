WEBVTT
Kind: captions
Language: en

00:00:12.460 --> 00:00:13.230
FRED SAUER: Hello, everyone.

00:00:13.230 --> 00:00:17.270
I'm here in the studio today
with Iein Valdez, colleague,

00:00:17.270 --> 00:00:20.630
developer advocate on AppEngine
as well as myself.

00:00:20.630 --> 00:00:23.800
And today we have two really
special guests with us.

00:00:23.800 --> 00:00:26.570
If you've been following the
AppEngine blog in the last

00:00:26.570 --> 00:00:28.230
couple of days, you saw
that we had a couple

00:00:28.230 --> 00:00:29.610
of guest blog posts.

00:00:29.610 --> 00:00:34.910
And we actually have those guest
bloggers with us today.

00:00:34.910 --> 00:00:40.450
So we have first Steve Huffman
who is the founder of Reddit

00:00:40.450 --> 00:00:41.670
and Hipmunk.

00:00:41.670 --> 00:00:46.100
And Steve has been teaching a
course online at Udacity, a

00:00:46.100 --> 00:00:47.550
free online university.

00:00:47.550 --> 00:00:50.970
And so we have Chris Chew from
Udacity who's a senior

00:00:50.970 --> 00:00:52.400
software engineer there.

00:00:52.400 --> 00:00:55.280
And today we're gonna talk to
them about their experiences

00:00:55.280 --> 00:01:01.050
of building course material for
Udacity, building the site

00:01:01.050 --> 00:01:02.240
itself, building the
course material,

00:01:02.240 --> 00:01:03.480
working with AppEngine.

00:01:03.480 --> 00:01:07.740
And we'll have a chance for
you to ask questions on a

00:01:07.740 --> 00:01:09.670
moderator page.

00:01:09.670 --> 00:01:14.850
So let's bring in Steve first
and let him to do a little bit

00:01:14.850 --> 00:01:16.370
more formal introduction.

00:01:16.370 --> 00:01:18.240
And then we'll get cracking.

00:01:18.240 --> 00:01:19.490
Steve.

00:01:22.675 --> 00:01:23.150
STEVE HUFFMAN: I, uh--

00:01:23.150 --> 00:01:23.480
FRED SAUER: I'm sorry.

00:01:23.480 --> 00:01:24.450
You were muted for a second.

00:01:24.450 --> 00:01:24.893
Go again.

00:01:24.893 --> 00:01:25.336
STEVE HUFFMAN: Oh, OK.

00:01:25.336 --> 00:01:26.250
Let's try that again.

00:01:26.250 --> 00:01:27.090
OK, so.

00:01:27.090 --> 00:01:29.790
I'm Steve Huffman.

00:01:29.790 --> 00:01:33.320
I am one of the founders of
Reddit, and more recently one

00:01:33.320 --> 00:01:35.130
of the founders of Hipmunk.

00:01:35.130 --> 00:01:37.950
I've been a web developer
basically my entire career,

00:01:37.950 --> 00:01:40.750
all seven years of it so far.

00:01:40.750 --> 00:01:43.160
And then this past spring, I had
the opportunity to teach a

00:01:43.160 --> 00:01:44.410
web development class
with Udacity.

00:01:47.495 --> 00:01:49.360
At the end of this course, I
really wanted students to have

00:01:49.360 --> 00:01:51.920
the ability to build their
own web applications

00:01:51.920 --> 00:01:53.530
and get them online.

00:01:53.530 --> 00:01:57.040
And Google AppEngine
was instrumental in

00:01:57.040 --> 00:01:58.500
the success of that.

00:01:58.500 --> 00:02:00.500
Actually went into the class
not knowing anything at all

00:02:00.500 --> 00:02:03.050
about AppEngine other than
basically that existed and it

00:02:03.050 --> 00:02:05.780
might help us with want
we needed to do.

00:02:05.780 --> 00:02:09.199
And by the end of it, I
came out a total fan.

00:02:09.199 --> 00:02:10.389
The course was a success.

00:02:10.389 --> 00:02:13.270
AppEngine is great.

00:02:13.270 --> 00:02:14.560
It was a really fun
experience.

00:02:14.560 --> 00:02:17.440
And so now I've turned into
something of an AppEngine

00:02:17.440 --> 00:02:18.850
evangelist, I guess.

00:02:18.850 --> 00:02:19.580
FRED SAUER: OK.

00:02:19.580 --> 00:02:22.980
Well, thanks for coming
to the program today.

00:02:22.980 --> 00:02:26.170
I was gonna ask you what your
feeling was when you started

00:02:26.170 --> 00:02:27.200
out and how it worked out.

00:02:27.200 --> 00:02:30.140
But it sounds like at
least the end result

00:02:30.140 --> 00:02:31.110
was a pretty good.

00:02:31.110 --> 00:02:34.330
Can you tell us a little bit
more about how you felt about

00:02:34.330 --> 00:02:35.955
AppEngine going into it with--

00:02:35.955 --> 00:02:36.220
STEVE HUFFMAN: Sure.

00:02:36.220 --> 00:02:37.540
FRED SAUER: --a lot
of unknowns?

00:02:37.540 --> 00:02:39.260
STEVE HUFFMAN: So basically what
I knew about AppEngine

00:02:39.260 --> 00:02:45.720
going in is that it was this
Google product for building

00:02:45.720 --> 00:02:47.510
web applications without
dealing with the sys

00:02:47.510 --> 00:02:49.220
administration.

00:02:49.220 --> 00:02:52.280
So you get a basic web framework
and you can deploy

00:02:52.280 --> 00:02:54.360
your code and it would magically
be online and it

00:02:54.360 --> 00:02:57.310
would magically scale and you'd
have this data store.

00:02:57.310 --> 00:02:59.520
There's a lot of magic
basically.

00:02:59.520 --> 00:03:02.400
And as a developer, right, one
of the things you learn is

00:03:02.400 --> 00:03:04.130
that you should be aware
of magic, right.

00:03:04.130 --> 00:03:06.200
There's always something
lurking under there.

00:03:06.200 --> 00:03:07.330
So.

00:03:07.330 --> 00:03:09.390
But what we wanted to accomplish
with the course was

00:03:09.390 --> 00:03:12.040
I wanted to teach people how to
build web applications, not

00:03:12.040 --> 00:03:15.420
teach them how to be
sys administrators.

00:03:15.420 --> 00:03:17.890
Didn't want them dealing with
installing MySQL and Windows

00:03:17.890 --> 00:03:19.230
and that sort of thing.

00:03:19.230 --> 00:03:24.580
So, it sounded like on paper,
and after like a cursory read

00:03:24.580 --> 00:03:26.600
through of the documentation,
it sounded like it would do

00:03:26.600 --> 00:03:28.806
just about exactly
what we wanted.

00:03:28.806 --> 00:03:31.220
But I hadn't actually ever
really used it myself.

00:03:31.220 --> 00:03:33.900
So, we went in with some
question marks basically.

00:03:33.900 --> 00:03:36.250
If this thing is as good
as it says it is,

00:03:36.250 --> 00:03:37.530
it's gonna be perfect.

00:03:37.530 --> 00:03:40.950
But as a developer, right,
the documentation and

00:03:40.950 --> 00:03:46.830
implementation seem to be
implemented by very different

00:03:46.830 --> 00:03:47.930
teams of people.

00:03:47.930 --> 00:03:52.040
But in this particular case, I
was pleasantly surprised at

00:03:52.040 --> 00:03:54.330
just about [INAUDIBLE]

00:03:54.330 --> 00:03:55.290
at how things worked.

00:03:55.290 --> 00:03:58.100
And when I was [INAUDIBLE]
things the first time just to

00:03:58.100 --> 00:04:00.770
see like will this basic
application get online, I was

00:04:00.770 --> 00:04:02.660
actually really blown away that
the deployment process

00:04:02.660 --> 00:04:03.640
worked on a first try.

00:04:03.640 --> 00:04:05.930
Because I've spent an
embarrassing amount of time

00:04:05.930 --> 00:04:08.700
over my career deploying code.

00:04:08.700 --> 00:04:10.420
So it was actually a really
cool experience.

00:04:10.420 --> 00:04:11.070
FRED SAUER: OK.

00:04:11.070 --> 00:04:12.500
Good.

00:04:12.500 --> 00:04:16.550
Can you maybe talk a little bit
more about your background

00:04:16.550 --> 00:04:17.329
as a developer?

00:04:17.329 --> 00:04:18.750
Like, where did you start?

00:04:18.750 --> 00:04:21.640
What was your road, like, to
getting to this point where

00:04:21.640 --> 00:04:23.480
you wanted to teach
this course?

00:04:23.480 --> 00:04:23.840
STEVE HUFFMAN: Sure.

00:04:23.840 --> 00:04:28.250
I mean, programming has been my
life's passions since I was

00:04:28.250 --> 00:04:30.460
a little kid.

00:04:30.460 --> 00:04:33.040
I got started when I was, I
think, eight years old or so

00:04:33.040 --> 00:04:36.800
typing in programs out of
magazines into GW-Basic.

00:04:36.800 --> 00:04:39.870
And all through high school,
I loved to code.

00:04:39.870 --> 00:04:42.560
And I studied computer
science in school.

00:04:42.560 --> 00:04:45.230
Me and one of my college
roommate, Alexis, we started

00:04:45.230 --> 00:04:48.650
Reddit immediately after
graduating from the University

00:04:48.650 --> 00:04:49.830
of Virginia.

00:04:49.830 --> 00:04:53.530
And that was actually
my first time really

00:04:53.530 --> 00:04:55.420
developing on the web.

00:04:55.420 --> 00:04:57.970
I had a passing knowledge
of HTML and CSS.

00:04:57.970 --> 00:05:02.210
And I had dealt with a SQL
database maybe once or twice.

00:05:02.210 --> 00:05:04.820
So that was a pretty
good trial by fire.

00:05:04.820 --> 00:05:07.430
Fortunately, Reddit never had
hockey-stick growth, right.

00:05:07.430 --> 00:05:12.670
It grew slowly but surely over
the last seven years or so.

00:05:12.670 --> 00:05:16.870
But, we learned a lot of things
the hard way from how

00:05:16.870 --> 00:05:19.970
to scale a database, how
to migrate stuff.

00:05:19.970 --> 00:05:23.050
Going from one app server to
two app servers was a big

00:05:23.050 --> 00:05:23.710
challenge for me.

00:05:23.710 --> 00:05:25.040
I didn't know what the
heck I was doing.

00:05:25.040 --> 00:05:29.620
And going from two to whatever
they're at right now was also

00:05:29.620 --> 00:05:30.790
a huge challenge.

00:05:30.790 --> 00:05:34.220
And so, I've learned a lot
of lessons, a lot of best

00:05:34.220 --> 00:05:36.780
practices, the hard way.

00:05:36.780 --> 00:05:41.720
And that whole experience
was a lot, a lot of fun.

00:05:41.720 --> 00:05:47.020
And I wanted to basically, in
this course, try to share some

00:05:47.020 --> 00:05:49.570
of those experiences so people
don't have to make so many

00:05:49.570 --> 00:05:51.610
missteps that I made.

00:05:51.610 --> 00:05:53.900
And AppEngine, actually, it's
funny because it abstracts

00:05:53.900 --> 00:05:56.690
away a lot of those
bad decisions.

00:05:56.690 --> 00:05:58.330
It makes things a lot more
straightforward so you can

00:05:58.330 --> 00:06:02.990
actually focus on the actual
software you're building.

00:06:02.990 --> 00:06:04.930
And I feel like on Reddit, I
actually spent a lot of time

00:06:04.930 --> 00:06:09.420
focusing on ops and not
on Reddit itself.

00:06:09.420 --> 00:06:10.245
FRED SAUER: Yeah.

00:06:10.245 --> 00:06:13.660
That certainly rings true with
what we've heard from other

00:06:13.660 --> 00:06:14.540
developers.

00:06:14.540 --> 00:06:17.340
And that's kind of the mission
we set out when building

00:06:17.340 --> 00:06:19.480
AppEngine when we launched
it several years ago.

00:06:19.480 --> 00:06:22.380
So, I'm glad to hear that echo
back that that was the

00:06:22.380 --> 00:06:22.745
experience.

00:06:22.745 --> 00:06:24.060
STEVE HUFFMAN: Yeah.

00:06:24.060 --> 00:06:25.290
Ops are fun.

00:06:25.290 --> 00:06:31.030
But it's one of those
things, you know.

00:06:31.030 --> 00:06:32.500
Leave that to the pros, right.

00:06:32.500 --> 00:06:35.960
And Google, like you guys
are the pros, so.

00:06:35.960 --> 00:06:38.580
As me, it's like when I was 20
years old, why should I be

00:06:38.580 --> 00:06:39.430
messing with this stuff?

00:06:39.430 --> 00:06:40.440
I've never done it before.

00:06:40.440 --> 00:06:43.720
Google, they're the
world's experts.

00:06:43.720 --> 00:06:47.300
FRED SAUER: I guess my own
experience is ops fun when

00:06:47.300 --> 00:06:48.650
you're on one server.

00:06:48.650 --> 00:06:49.550
STEVE HUFFMAN: Yeah, exactly.

00:06:49.550 --> 00:06:51.320
FRED SAUER: And as soon as you
get to two, it starts to

00:06:51.320 --> 00:06:52.400
become annoying.

00:06:52.400 --> 00:06:53.935
STEVE HUFFMAN: I mean, it's
fun when it's working.

00:06:53.935 --> 00:06:54.330
FRED SAUER: Yeah.

00:06:54.330 --> 00:06:55.840
IEIN VALDEZ: Yeah.

00:06:55.840 --> 00:06:58.800
I was actually curious if you
could talk a little bit about

00:06:58.800 --> 00:07:02.540
Python and how that was as
a language, some of the

00:07:02.540 --> 00:07:03.210
frameworks?

00:07:03.210 --> 00:07:05.710
And then how it was like to
actually build the content?

00:07:05.710 --> 00:07:06.260
STEVE HUFFMAN: Yeah.

00:07:06.260 --> 00:07:09.520
So, Python's great.

00:07:09.520 --> 00:07:10.990
You know, when I actually
started Reddit, Reddit was

00:07:10.990 --> 00:07:12.910
written in LISP.

00:07:12.910 --> 00:07:16.750
And when Aaron Schwartz joined
us, he was a big

00:07:16.750 --> 00:07:18.960
Python guy at the time.

00:07:18.960 --> 00:07:21.740
I was thinking to myself-- or
thinking out loud rather--

00:07:21.740 --> 00:07:23.670
we should rewrite Reddit because
the stuff we have

00:07:23.670 --> 00:07:24.580
right now is trash.

00:07:24.580 --> 00:07:27.120
And he's like, well, we should
rewrite it in Python.

00:07:27.120 --> 00:07:28.500
And I was like, OK, sure.

00:07:28.500 --> 00:07:29.100
What the heck.

00:07:29.100 --> 00:07:31.370
I had never done
Python before.

00:07:31.370 --> 00:07:35.070
So we rewrote Reddit in about
a week in Python.

00:07:35.070 --> 00:07:38.950
And basically, Python has been
my main language ever since.

00:07:38.950 --> 00:07:41.820
And I love it for a
lot of reasons.

00:07:41.820 --> 00:07:45.220
The main reason is that
it is unlike LISP.

00:07:45.220 --> 00:07:48.710
It is very difficult to write
bad code in Python.

00:07:48.710 --> 00:07:50.840
It's a great language
for teams.

00:07:50.840 --> 00:07:52.480
It's very readable language.

00:07:52.480 --> 00:07:54.350
And when you're working together
in a team, being able

00:07:54.350 --> 00:07:58.560
to read other people's
code is so important.

00:07:58.560 --> 00:08:07.540
And we also developed these
picky feelings about web

00:08:07.540 --> 00:08:08.540
frameworks.

00:08:08.540 --> 00:08:09.980
At the time, Rails
was blowing up.

00:08:09.980 --> 00:08:11.555
But it was just way
too magical.

00:08:11.555 --> 00:08:13.010
Like it hid so much from you.

00:08:13.010 --> 00:08:13.970
I really didn't like it.

00:08:13.970 --> 00:08:16.540
Django was just getting
started.

00:08:16.540 --> 00:08:17.850
There was a couple others
we looked at.

00:08:17.850 --> 00:08:21.340
But every time we tried one of
them, we would find ourselves

00:08:21.340 --> 00:08:25.400
within a couple of days
feeling boxed in.

00:08:25.400 --> 00:08:28.730
So we ended up making our own
framework called web.pi, which

00:08:28.730 --> 00:08:32.929
basically mapped some URLs
to some handlers.

00:08:32.929 --> 00:08:35.559
And you had to explicitly deal
with get and posts and headers

00:08:35.559 --> 00:08:36.480
and cookies.

00:08:36.480 --> 00:08:39.860
And we felt like that was the
perfect level of abstraction

00:08:39.860 --> 00:08:40.789
to deal with.

00:08:40.789 --> 00:08:45.700
And by a very coincidental
twist of fate, AppEngine

00:08:45.700 --> 00:08:50.220
actually shares some lineage
all the way back to web.pi,

00:08:50.220 --> 00:08:52.610
which was really convenient
for me.

00:08:52.610 --> 00:08:55.600
But I think it's the right level
to be working at as a

00:08:55.600 --> 00:08:56.150
web developer.

00:08:56.150 --> 00:08:57.870
You should understand
how the web works.

00:08:57.870 --> 00:09:01.040
You don't need to have these
simple tasks hidden behind

00:09:01.040 --> 00:09:04.580
these complex abstractions.

00:09:04.580 --> 00:09:10.110
And so a simple framework, a
simple language, everything

00:09:10.110 --> 00:09:13.380
nice and simple, I think, is
a really nice quality about

00:09:13.380 --> 00:09:16.990
Python the way we are doing
things at Reddit, and then the

00:09:16.990 --> 00:09:19.090
way things work at
AppEngine now.

00:09:19.090 --> 00:09:21.340
FRED SAUER: Yeah.

00:09:21.340 --> 00:09:24.580
That all rings true that you
want simple abstractions as a

00:09:24.580 --> 00:09:26.780
programmer so you can put
the pieces together.

00:09:26.780 --> 00:09:30.020
But you also want to be close
enough to the metal that you

00:09:30.020 --> 00:09:31.960
could actually make the
engineering trade offs that

00:09:31.960 --> 00:09:33.890
you need to make in order
to make it site

00:09:33.890 --> 00:09:35.270
performance and scale.

00:09:35.270 --> 00:09:37.070
STEVE HUFFMAN: 'Cause every
site's a little bit different.

00:09:37.070 --> 00:09:40.380
And what makes a good site great
is how you deal with

00:09:40.380 --> 00:09:43.080
those unique challenges
you have.

00:09:43.080 --> 00:09:46.176
And being able to do that
is supremely important.

00:09:46.176 --> 00:09:47.800
FRED SAUER: Yep.

00:09:47.800 --> 00:09:50.730
So I think you started talking
a little bit how it was

00:09:50.730 --> 00:09:53.430
building the course.

00:09:53.430 --> 00:09:56.190
How did maybe Python play in,
and how did AppEngine play in?

00:09:56.190 --> 00:09:58.950
What was it like building this
course and going through and

00:09:58.950 --> 00:10:01.620
creating that material
for the students?

00:10:01.620 --> 00:10:04.410
STEVE HUFFMAN: So, it was
actually a lot of fun.

00:10:04.410 --> 00:10:06.780
And so once we realized that
AppEngine was going to work

00:10:06.780 --> 00:10:10.110
out, we constructed the course
the way we did, which was

00:10:10.110 --> 00:10:12.240
basically at the end
of each lesson--

00:10:12.240 --> 00:10:13.820
there were seven lessons
in total--

00:10:13.820 --> 00:10:16.100
at the end of each lesson
there'd be homework.

00:10:16.100 --> 00:10:18.980
And the overarching kind of
arc of the course was

00:10:18.980 --> 00:10:20.420
basically build a blog.

00:10:20.420 --> 00:10:24.010
And so we could say, add this
feature to your blog.

00:10:24.010 --> 00:10:26.970
So the first lesson was
basically get a hello world

00:10:26.970 --> 00:10:31.500
website online, which if you
knew exactly what you're doing

00:10:31.500 --> 00:10:33.670
could take as few
as five minutes.

00:10:33.670 --> 00:10:35.730
And if you've done it for the
first time, it still shouldn't

00:10:35.730 --> 00:10:37.610
take more than an hour, which
is really impressive for

00:10:37.610 --> 00:10:40.480
getting anything online.

00:10:40.480 --> 00:10:44.390
And lesson two was forms,
getting forms and

00:10:44.390 --> 00:10:45.340
validation and stuff.

00:10:45.340 --> 00:10:48.350
And the nice quality about the
way we've structured this is

00:10:48.350 --> 00:10:50.310
to submit your homework, all you
would have to do is submit

00:10:50.310 --> 00:10:52.890
us a URL of your live
website online.

00:10:52.890 --> 00:10:55.900
And then we could have our
grading scripts just go hit

00:10:55.900 --> 00:11:00.130
your website and verify
that it's working.

00:11:00.130 --> 00:11:02.890
And so I think then we got into
basic databases and then

00:11:02.890 --> 00:11:06.060
user accounts and then some
kind of scaling memcache

00:11:06.060 --> 00:11:08.980
stuff, that sort of thing.

00:11:08.980 --> 00:11:12.710
And I wanted the course to
be immediately useful.

00:11:12.710 --> 00:11:15.550
I wanted the students to have
gone through these experiences

00:11:15.550 --> 00:11:20.180
of implementing accounts, of
implementing caching, of

00:11:20.180 --> 00:11:21.440
validating form elements.

00:11:21.440 --> 00:11:23.700
Because those are all the things
as a web developer you

00:11:23.700 --> 00:11:27.470
do over and over
and over again.

00:11:27.470 --> 00:11:29.100
And it was a really
nice opportunity.

00:11:29.100 --> 00:11:33.320
I feel like web development is
one of those rare pieces of

00:11:33.320 --> 00:11:37.200
learning where you can be
instantly useful after a very

00:11:37.200 --> 00:11:37.920
short amount of time.

00:11:37.920 --> 00:11:39.246
FRED SAUER: Yeah.

00:11:39.246 --> 00:11:41.510
Well, you certainly have
something to interact with,

00:11:41.510 --> 00:11:43.130
and it's live on the web.

00:11:43.130 --> 00:11:43.420
STEVE HUFFMAN: Yeah.

00:11:43.420 --> 00:11:44.670
It's very gratifying.

00:11:44.670 --> 00:11:48.820
FRED SAUER: I went through the
course myself, and I really

00:11:48.820 --> 00:11:51.630
thought the notion of submitting
a URL where you had

00:11:51.630 --> 00:11:54.540
completed your assignment, or
your mini assignment, was a

00:11:54.540 --> 00:12:00.116
really good way of keeping me
engaged and pulling me along

00:12:00.116 --> 00:12:02.330
the different steps of the
course and say, well, just do

00:12:02.330 --> 00:12:03.750
this one more thing and you
can get to the next

00:12:03.750 --> 00:12:04.520
step and the next.

00:12:04.520 --> 00:12:06.460
So I thought it was
very engaging.

00:12:06.460 --> 00:12:07.010
I like it.

00:12:07.010 --> 00:12:08.136
STEVE HUFFMAN: I'm glad
to hear that, really

00:12:08.136 --> 00:12:09.720
glad to hear that.

00:12:09.720 --> 00:12:11.450
FRED SAUER: So you talked about,
I think, some of the

00:12:11.450 --> 00:12:15.950
features you liked on AppEngine,
the built-in user

00:12:15.950 --> 00:12:17.060
accounts and the caching.

00:12:17.060 --> 00:12:21.810
Were there other things that
stood out in this platform as

00:12:21.810 --> 00:12:25.620
a service offering that were
really beneficial?

00:12:25.620 --> 00:12:27.860
Either thinking back
to the days of

00:12:27.860 --> 00:12:32.160
building Reddit or Hipmunk?

00:12:32.160 --> 00:12:35.030
Things that you use today that
would have saved you maybe a

00:12:35.030 --> 00:12:35.750
lot of time?

00:12:35.750 --> 00:12:36.880
STEVE HUFFMAN: Oh, absolutely.

00:12:36.880 --> 00:12:39.560
The big one is the data store.

00:12:39.560 --> 00:12:42.510
At Reddit, and to a lesser
extent at Hipmunk, I feel like

00:12:42.510 --> 00:12:45.850
I've written our own kind of
like ORM, no SQL thing on

00:12:45.850 --> 00:12:49.640
postgres half a dozen
times now.

00:12:49.640 --> 00:12:51.440
And it gets a little bit
better each time.

00:12:51.440 --> 00:12:56.630
But the data store is
really, really nice.

00:12:56.630 --> 00:12:59.946
Once you start thinking in like
I can't do joins, I need

00:12:59.946 --> 00:13:04.210
to structure my data this way,
it's really, really nice.

00:13:04.210 --> 00:13:06.480
And data store's nice from
two points of view.

00:13:06.480 --> 00:13:09.220
And this actually really
surprised me.

00:13:09.220 --> 00:13:12.730
The first is that you just don't
have to think about the

00:13:12.730 --> 00:13:13.980
scaling issue.

00:13:16.050 --> 00:13:17.610
It just works.

00:13:17.610 --> 00:13:19.160
I was really surprised
at that.

00:13:19.160 --> 00:13:22.470
The documentation doesn't go
into great many details about

00:13:22.470 --> 00:13:23.020
how it works.

00:13:23.020 --> 00:13:25.170
But I guess if you've built it
a few times, you kind of

00:13:25.170 --> 00:13:30.460
understand which strategy Google
has taken with this.

00:13:30.460 --> 00:13:39.350
And, the other thing was that it
allows you to develop very

00:13:39.350 --> 00:13:41.480
fast, right.

00:13:41.480 --> 00:13:43.910
The whole no SQL argument,
right, is that you don't have

00:13:43.910 --> 00:13:46.060
to be constrained by a schema.

00:13:46.060 --> 00:13:48.740
You can kind of add features
as you go, which is part of

00:13:48.740 --> 00:13:51.220
the culture web development,
right.

00:13:51.220 --> 00:13:53.260
Think of half a product and
build it and get it online,

00:13:53.260 --> 00:13:55.670
and then write the
other half later.

00:13:55.670 --> 00:13:57.750
If you have to do a data
migration every time you add a

00:13:57.750 --> 00:13:59.780
new feature, which we did for
the first couple of years at

00:13:59.780 --> 00:14:01.650
Reddit, it's so painful.

00:14:01.650 --> 00:14:04.030
It's so painful, especially if
you don't know how to do data

00:14:04.030 --> 00:14:05.400
migrations.

00:14:05.400 --> 00:14:09.900
So not having to think about
that would have been a

00:14:09.900 --> 00:14:11.460
tremendous advantage.

00:14:11.460 --> 00:14:15.360
I feel like I spent probably
half my time over the course

00:14:15.360 --> 00:14:18.410
of Reddit thinking about how are
we gonna store this data?

00:14:18.410 --> 00:14:19.820
How we're gonna access
it quickly?

00:14:19.820 --> 00:14:23.060
How are we going to scale it?

00:14:23.060 --> 00:14:24.790
And if I didn't have to think
about that, I could have spent

00:14:24.790 --> 00:14:27.100
a lot more time just screwing
around on Reddit, which would

00:14:27.100 --> 00:14:29.053
have been nice.

00:14:29.053 --> 00:14:29.800
FRED SAUER: OK.

00:14:29.800 --> 00:14:34.630
So you mentioned not having
to do data migrations.

00:14:34.630 --> 00:14:38.780
And I think people who have
built it scale or have built

00:14:38.780 --> 00:14:40.660
sites that have been around for
a little while as they add

00:14:40.660 --> 00:14:42.210
features maybe have thought
about this.

00:14:42.210 --> 00:14:44.900
But maybe not all of
our viewers have.

00:14:44.900 --> 00:14:50.140
Can you maybe talk about how you
in practice add fields to,

00:14:50.140 --> 00:14:52.390
essentially, an existing scheme,
or how you restructure

00:14:52.390 --> 00:14:54.920
the data store without doing
a migration, without

00:14:54.920 --> 00:14:56.640
taking the site down?

00:14:56.640 --> 00:14:59.110
STEVE HUFFMAN: So a big
challenge when you're using

00:14:59.110 --> 00:15:01.490
kind of a traditional approach,
or the kind of naive

00:15:01.490 --> 00:15:05.230
approach that you might learn
from a web tutorial, is that

00:15:05.230 --> 00:15:07.390
simply adding a column
to a large database

00:15:07.390 --> 00:15:08.660
is not always fast.

00:15:08.660 --> 00:15:10.770
Actually most modern systems
it's pretty fast now, but it

00:15:10.770 --> 00:15:11.920
wasn't necessarily
the case then.

00:15:11.920 --> 00:15:15.430
But let's say you want to
restructure Reddit comments,

00:15:15.430 --> 00:15:16.250
for example.

00:15:16.250 --> 00:15:17.920
They're threaded.

00:15:17.920 --> 00:15:21.500
There aren't really good
kind of tree-like data

00:15:21.500 --> 00:15:23.390
structures in SQL.

00:15:23.390 --> 00:15:24.800
So you have to kind of
create the systems.

00:15:24.800 --> 00:15:27.050
It's like, so, are we gonna pull
out all of the comments

00:15:27.050 --> 00:15:29.520
for a particular story and sort
them in memory and then

00:15:29.520 --> 00:15:32.040
display them?

00:15:32.040 --> 00:15:35.600
How is that relationship
gonna work?

00:15:35.600 --> 00:15:37.970
How do we get a fast list
of everybody who's

00:15:37.970 --> 00:15:39.160
voted on this thing?

00:15:39.160 --> 00:15:41.440
How do we sort all of these
stores in real time?

00:15:41.440 --> 00:15:43.870
Those are things that aren't
really SQL problems.

00:15:43.870 --> 00:15:46.880
And so you kind of have to
work around SQL to do it.

00:15:46.880 --> 00:15:50.140
And for optimization, what
we basically do is we

00:15:50.140 --> 00:15:50.950
de-normalize everything.

00:15:50.950 --> 00:15:53.000
We store things redundantly in
all sorts of different places

00:15:53.000 --> 00:15:55.270
and in a different tables and
on different systems so

00:15:55.270 --> 00:15:57.410
everything's fast.

00:15:57.410 --> 00:15:59.470
If you take the kind of the more
the data store approach

00:15:59.470 --> 00:16:04.470
where you can kind of your data
as you're going to use it

00:16:04.470 --> 00:16:08.280
or you can store your data in
the place that it needs to be

00:16:08.280 --> 00:16:10.390
and if you change the way you
want to use it, all you need

00:16:10.390 --> 00:16:13.520
to do is store it a little
differently.

00:16:16.890 --> 00:16:18.160
It's much simpler.

00:16:18.160 --> 00:16:20.180
It's a much easier way of
thinking about things.

00:16:20.180 --> 00:16:23.170
You don't just grab this blob
of data out of the database.

00:16:23.170 --> 00:16:25.780
If you try to distill everything
into a simple query

00:16:25.780 --> 00:16:28.180
of basically by ID.

00:16:28.180 --> 00:16:32.730
You can convert everything into
a by ID query, things

00:16:32.730 --> 00:16:33.740
cache really nicely.

00:16:33.740 --> 00:16:36.290
Things scale really nicely.

00:16:36.290 --> 00:16:39.190
And if you're doing that simple
just get me item with

00:16:39.190 --> 00:16:42.150
ID x and all of a sudden that
item has all of the data

00:16:42.150 --> 00:16:46.240
you're gonna need for x, it's
really, really convenient.

00:16:46.240 --> 00:16:46.940
FRED SAUER: Yeah.

00:16:46.940 --> 00:16:49.720
I hear that one of the hard
things for people coming from

00:16:49.720 --> 00:16:54.170
a relational SQL background is
this notion of giving up

00:16:54.170 --> 00:16:55.460
normalization.

00:16:55.460 --> 00:16:57.480
And they fight it initially.

00:16:57.480 --> 00:17:01.230
And I went through this myself
when I was first going into no

00:17:01.230 --> 00:17:03.250
SQL scalable databases.

00:17:03.250 --> 00:17:05.849
I constantly was trying to
normalize my schema.

00:17:05.849 --> 00:17:09.720
And when I finally gave that up,
then this whole new world

00:17:09.720 --> 00:17:11.859
opened up of kind of what you're
describing of hitting

00:17:11.859 --> 00:17:15.510
the sweet spot of everything
is a fetch by ID and the

00:17:15.510 --> 00:17:17.470
systems performing
fast and cache.

00:17:17.470 --> 00:17:20.140
All those things you mentioned
just suddenly come together.

00:17:20.140 --> 00:17:21.920
STEVE HUFFMAN: And the code
actually gets simpler, too.

00:17:21.920 --> 00:17:23.780
Everything gets actually
much more simple.

00:17:23.780 --> 00:17:25.079
You just have to think
a little bit.

00:17:25.079 --> 00:17:26.339
Sometimes it's tricky.

00:17:26.339 --> 00:17:28.880
Sometimes you have to fold your
use case into this thing.

00:17:28.880 --> 00:17:30.210
But now it's funny.

00:17:30.210 --> 00:17:34.710
After doing it for a few years,
the notion of designing

00:17:34.710 --> 00:17:36.120
a table, it's just ugh.

00:17:36.120 --> 00:17:38.200
I don't want to spend time
doing that today.

00:17:38.200 --> 00:17:40.970
FRED SAUER: Yeah.

00:17:40.970 --> 00:17:44.820
So this one question that I
always ask developers--

00:17:44.820 --> 00:17:48.060
at least ones that I talk to
initially when they're coming

00:17:48.060 --> 00:17:50.360
to work on AppEngine and they're
struggling a little

00:17:50.360 --> 00:17:54.330
bit with the no SQL world, and
because AppEngine is a little

00:17:54.330 --> 00:17:56.130
bit different or the no SQL
world is a little bit

00:17:56.130 --> 00:18:00.510
different, it feels like an
uphill battle because.

00:18:00.510 --> 00:18:01.910
It's something new that they're
learning that they

00:18:01.910 --> 00:18:03.410
haven't been exposed to.

00:18:03.410 --> 00:18:06.580
But I always try to come back,
like six or eight months later

00:18:06.580 --> 00:18:09.010
when they've built their site
and had some time to play with

00:18:09.010 --> 00:18:13.680
it, and ask them is this new
world harder or is it easier

00:18:13.680 --> 00:18:14.670
than it was?

00:18:14.670 --> 00:18:17.840
And I'm curious what
your answer is.

00:18:17.840 --> 00:18:20.260
STEVE HUFFMAN: I think it's
absolutely easier.

00:18:20.260 --> 00:18:24.290
Because the hard parts about SQL
is that SQL's designed in

00:18:24.290 --> 00:18:25.870
the general case to
solve problems

00:18:25.870 --> 00:18:28.472
that aren't web problems.

00:18:28.472 --> 00:18:30.560
It's really good for
like dealing with

00:18:30.560 --> 00:18:32.260
spreadsheet-like data.

00:18:32.260 --> 00:18:34.490
But when you have this
case where like--

00:18:34.490 --> 00:18:39.510
on Reddit, we built this
database called thethingDB.

00:18:39.510 --> 00:18:41.700
And it's because everything
was a thing, right.

00:18:41.700 --> 00:18:44.950
Users and comments and links and
subreddits all had a lot

00:18:44.950 --> 00:18:47.660
of the same qualities.

00:18:47.660 --> 00:18:49.300
Have you ever tried to do
inheritance in SQL?

00:18:52.255 --> 00:18:53.760
It's a nightmare.

00:18:53.760 --> 00:18:57.360
And so once you can free
yourself from trying to force

00:18:57.360 --> 00:19:02.520
your problem into a spreadsheet,
yeah, it becomes

00:19:02.520 --> 00:19:06.360
much, much simpler because
sometimes you have to--

00:19:06.360 --> 00:19:09.130
There are challenging aspects
to it which is, what

00:19:09.130 --> 00:19:12.220
queries can I do?

00:19:12.220 --> 00:19:16.100
The types of queries you can do
can be limited sometimes.

00:19:16.100 --> 00:19:17.700
So that requires a little
bit of extra thought.

00:19:17.700 --> 00:19:20.440
But it's a lot less thought
then, how do I represent this

00:19:20.440 --> 00:19:23.246
non-tabular data in a table?

00:19:23.246 --> 00:19:25.940
FRED SAUER: OK.

00:19:25.940 --> 00:19:28.900
I appreciate the answer.

00:19:28.900 --> 00:19:34.340
The answer varies, but it's
usually somewhere between both

00:19:34.340 --> 00:19:36.550
worlds are about equally
complex.

00:19:36.550 --> 00:19:39.130
Or it's more along the lines of
your answer where this new

00:19:39.130 --> 00:19:40.650
world is actually easier.

00:19:40.650 --> 00:19:45.180
And I think the answer tends to
be if people are playing in

00:19:45.180 --> 00:19:48.100
a world where they're building
bigger apps and more scalable

00:19:48.100 --> 00:19:51.280
things, they tend to find
the no SQL world easier.

00:19:51.280 --> 00:19:54.250
And people who are still
building smaller apps for

00:19:54.250 --> 00:19:58.010
themselves or for small groups
of users, these tend to find

00:19:58.010 --> 00:20:00.930
them of roughly equal
complexity.

00:20:00.930 --> 00:20:01.220
STEVE HUFFMAN: Yeah.

00:20:01.220 --> 00:20:03.800
I mean if you're on
one machine, SQL

00:20:03.800 --> 00:20:06.660
works pretty well.

00:20:06.660 --> 00:20:08.030
There's still some constraints,
though, right.

00:20:08.030 --> 00:20:11.010
Because if you make one schema
design decision and then you

00:20:11.010 --> 00:20:15.160
want to change that,
that's troublesome.

00:20:15.160 --> 00:20:17.870
If you have to care about data
types, it's nice not having to

00:20:17.870 --> 00:20:20.790
care about data types
all the time.

00:20:20.790 --> 00:20:24.250
Sometimes it's nice to just
store a blob of stuff and then

00:20:24.250 --> 00:20:26.036
not have to think about
it again for awhile.

00:20:26.036 --> 00:20:28.170
FRED SAUER: Yeah.

00:20:28.170 --> 00:20:34.280
So if you put yourself in the
shoes of other developers and

00:20:34.280 --> 00:20:39.450
you're maybe coaching a friend
or a colleague on what

00:20:39.450 --> 00:20:43.470
technology stacks they should be
using for maybe a site that

00:20:43.470 --> 00:20:46.550
they're building, could you
maybe talk about some of the

00:20:46.550 --> 00:20:49.680
different things they should
think about as far as choosing

00:20:49.680 --> 00:20:51.400
technology?

00:20:51.400 --> 00:20:54.040
STEVE HUFFMAN: When it comes
to choosing technology, you

00:20:54.040 --> 00:20:57.140
can't go wrong using something
that somebody else really big

00:20:57.140 --> 00:20:59.810
is also using.

00:20:59.810 --> 00:21:03.440
And I usually use that as an
argument against things.

00:21:03.440 --> 00:21:06.920
Don't use Mongo because
who big uses Mongo?

00:21:06.920 --> 00:21:08.310
Don't use noJS.

00:21:08.310 --> 00:21:10.550
Who big is using noJS.

00:21:10.550 --> 00:21:11.600
Use Python.

00:21:11.600 --> 00:21:13.342
Google uses Python, right.

00:21:16.000 --> 00:21:16.740
Use postgres.

00:21:16.740 --> 00:21:17.500
Use MySQL.

00:21:17.500 --> 00:21:20.050
Use things that have worked for
other people in the past,

00:21:20.050 --> 00:21:24.380
the battle hardened, tried
and true systems.

00:21:24.380 --> 00:21:25.880
Because you don't want
to be the test dummy.

00:21:25.880 --> 00:21:28.700
You've got more important things
to worry about than

00:21:28.700 --> 00:21:31.900
will this thing scale
for my needs.

00:21:31.900 --> 00:21:34.650
You want to be one Google search
away from answering all

00:21:34.650 --> 00:21:36.150
of your problems.

00:21:36.150 --> 00:21:38.040
You want to put yourself in a
position where you will not

00:21:38.040 --> 00:21:41.000
have any problem for
the first time.

00:21:41.000 --> 00:21:42.700
And so that's how we
usually think.

00:21:42.700 --> 00:21:46.200
And a really good measure about
the quality of a piece

00:21:46.200 --> 00:21:50.010
of software is how easy
is it to install.

00:21:50.010 --> 00:21:52.680
If that thing builds on your
weird machine the first time

00:21:52.680 --> 00:21:54.780
and the documentation is clear,
that's a really good

00:21:54.780 --> 00:21:57.720
sign people have been down that
road a number of times.

00:21:57.720 --> 00:22:01.420
And if you're using NODE and
half the packages have to be

00:22:01.420 --> 00:22:03.680
installed globally and half of
them have to be installed

00:22:03.680 --> 00:22:05.990
locally and it's screwing up
your home directory, you

00:22:05.990 --> 00:22:09.470
should be thinking, ugh, maybe
this isn't quite as polished

00:22:09.470 --> 00:22:11.541
as it should be for my
needs right now.

00:22:11.541 --> 00:22:13.850
STEVE HUFFMAN: OK.

00:22:13.850 --> 00:22:18.430
So, before we kind of jump over
to Chris to kind of hear

00:22:18.430 --> 00:22:25.040
his take on kind of building
Udacity and his experiences

00:22:25.040 --> 00:22:28.490
there, maybe can I leave a
parting question with you

00:22:28.490 --> 00:22:32.560
which is would you use AppEngine
for your next

00:22:32.560 --> 00:22:33.550
Reddit, Hipmunk--

00:22:33.550 --> 00:22:35.110
I don't know what the third
in that series is?

00:22:35.110 --> 00:22:36.600
STEVE HUFFMAN: Yeah.

00:22:36.600 --> 00:22:38.420
It would absolutely
be, I think, the

00:22:38.420 --> 00:22:40.060
first place we'd start.

00:22:40.060 --> 00:22:41.600
Because when you're starting
a company, you should be

00:22:41.600 --> 00:22:43.155
thinking about what is
your company doing.

00:22:43.155 --> 00:22:45.690
You don't want to be thinking
about how are we gonna scale

00:22:45.690 --> 00:22:47.780
this thing.

00:22:47.780 --> 00:22:50.540
You just don't want to deal
with those problems.

00:22:50.540 --> 00:22:53.050
The first three months of a
start-up are so critically

00:22:53.050 --> 00:22:56.170
important, just launching.

00:22:56.170 --> 00:23:00.390
Yeah, I would give serious
consideration.

00:23:00.390 --> 00:23:02.340
And certainly if it was Reddit
or Hipmunk, both of them would

00:23:02.340 --> 00:23:05.570
have of lived just fine
on AppEngine, I think.

00:23:05.570 --> 00:23:08.160
Every problems a little bit
different, but that's

00:23:08.160 --> 00:23:10.250
certainly where I would
start my thinking.

00:23:10.250 --> 00:23:10.770
FRED SAUER: OK.

00:23:10.770 --> 00:23:12.350
Great.

00:23:12.350 --> 00:23:13.380
IEIN VALDEZ: I have one
more quick question.

00:23:13.380 --> 00:23:17.330
Actually I was just curious,
sort of, now that the course

00:23:17.330 --> 00:23:20.560
is up, people have taken it,
what's been the reaction from

00:23:20.560 --> 00:23:23.030
people who have taken the
course on the platform?

00:23:23.030 --> 00:23:27.325
Overall, like positive,
useful?

00:23:27.325 --> 00:23:29.390
What's your take?

00:23:29.390 --> 00:23:30.390
STEVE HUFFMAN: The sentiment
that's gotten to

00:23:30.390 --> 00:23:32.780
me is really positive.

00:23:32.780 --> 00:23:34.060
Now, I don't think people are
gonna be like, hey, Steve,

00:23:34.060 --> 00:23:35.210
your course sucked So--

00:23:35.210 --> 00:23:35.530
IEIN VALDEZ: Yeah, yeah.

00:23:35.530 --> 00:23:37.530
STEVE HUFFMAN: --maybe I'm a
little bit of a biased source.

00:23:37.530 --> 00:23:39.900
But, I think the enrollment
numbers are still pretty solid

00:23:39.900 --> 00:23:40.990
and consistent.

00:23:40.990 --> 00:23:44.340
I've met a handful of people,
including a couple of our

00:23:44.340 --> 00:23:47.550
employees at Hipmunk who took
my course, which is really

00:23:47.550 --> 00:23:51.165
nice because I kind of push my
agenda on people before they

00:23:51.165 --> 00:23:53.390
even get through the door.

00:23:53.390 --> 00:23:56.610
So that has been really nice.

00:23:56.610 --> 00:23:59.960
And I'm really proud of it.

00:23:59.960 --> 00:24:04.960
It was a really fun experience
and I love meeting people who

00:24:04.960 --> 00:24:07.580
have gotten to learn from my
mistakes, get a year or two

00:24:07.580 --> 00:24:10.120
ahead of the curve, and not have
to go through the same

00:24:10.120 --> 00:24:11.640
pains that I went through.

00:24:11.640 --> 00:24:12.520
IEIN VALDEZ: Very cool.

00:24:12.520 --> 00:24:13.120
FRED SAUER: OK.

00:24:13.120 --> 00:24:14.460
Great.

00:24:14.460 --> 00:24:18.580
So we're gonna go over to Chris
Chew, senior software

00:24:18.580 --> 00:24:20.980
engineer at Udacity.

00:24:20.980 --> 00:24:23.900
Chris is gonna do a little
introduction.

00:24:23.900 --> 00:24:26.840
I think he's gonna have a
demo for us for Udacity.

00:24:26.840 --> 00:24:32.640
And then I think we already have
some questions queued up

00:24:32.640 --> 00:24:35.650
for you Steve and for Chris,
and maybe for a

00:24:35.650 --> 00:24:37.140
couple for us as well.

00:24:37.140 --> 00:24:39.840
So at the end we'll
go through those.

00:24:39.840 --> 00:24:42.450
First you want to start out and
just do a little better

00:24:42.450 --> 00:24:46.050
introduction then I gave you.

00:24:46.050 --> 00:24:46.680
CHRIS CHEW: Sure.

00:24:46.680 --> 00:24:47.920
Hello.

00:24:47.920 --> 00:24:49.390
My name's Chris Chew.

00:24:49.390 --> 00:24:53.250
I'm a senior software engineer
for Udacity,

00:24:53.250 --> 00:24:54.405
originally from Colorado.

00:24:54.405 --> 00:24:56.690
I actually moved out here
to join Udacity.

00:24:56.690 --> 00:24:59.950
So it's been an amazing
adventure to be part of

00:24:59.950 --> 00:25:03.640
something that's making such
a big splash in the world.

00:25:03.640 --> 00:25:06.650
And it's been fun to work
with people like Steve

00:25:06.650 --> 00:25:07.900
and you guys at Google.

00:25:11.120 --> 00:25:11.900
It's interesting.

00:25:11.900 --> 00:25:15.210
AppEngine is actually a pretty
good fit for Udacity, and I'll

00:25:15.210 --> 00:25:17.040
talk a little bit more about
what Udacity does.

00:25:17.040 --> 00:25:19.980
But I would characterize a lot
of the first half of the

00:25:19.980 --> 00:25:26.070
discussion in terms of the
application of AppEngine for

00:25:26.070 --> 00:25:28.490
Steve's class is that
everybody really

00:25:28.490 --> 00:25:30.760
enjoys doing things.

00:25:30.760 --> 00:25:32.930
And people enjoy learning
by doing.

00:25:32.930 --> 00:25:36.000
And that is absolutely
Udacity's mission.

00:25:36.000 --> 00:25:40.200
We want to provide a
high-quality, higher education

00:25:40.200 --> 00:25:43.130
based on the belief that people
learn best when doing.

00:25:43.130 --> 00:25:47.260
And we really want to try and
redefining what that means.

00:25:47.260 --> 00:25:51.280
And so we also want to give
people employable skills.

00:25:51.280 --> 00:25:55.030
And one of the fastest growing
areas in the world would be

00:25:55.030 --> 00:25:56.890
web development.

00:25:56.890 --> 00:26:01.350
And so having a platform where
you can get people just doing

00:26:01.350 --> 00:26:04.910
immediately within the first
five minutes of a course, you

00:26:04.910 --> 00:26:08.250
can get people already working
on a project by putting up

00:26:08.250 --> 00:26:10.190
their very first website.

00:26:10.190 --> 00:26:11.610
It's amazing.

00:26:11.610 --> 00:26:18.575
It really is a perfect fit for
us and for our mission.

00:26:18.575 --> 00:26:20.410
FRED SAUER: Great.

00:26:20.410 --> 00:26:23.790
CHRIS CHEW: So, Udacity was
founded by some people from

00:26:23.790 --> 00:26:27.710
Stanford, along with various
other people that just really

00:26:27.710 --> 00:26:29.940
wanted to try and disrupt
education.

00:26:29.940 --> 00:26:35.990
Our mission is to provide the
high-quality, higher education

00:26:35.990 --> 00:26:44.100
and to find ways to give people
employable skills.

00:26:44.100 --> 00:26:48.530
I have some screen
sharing ready.

00:26:48.530 --> 00:26:54.060
So I'll go ahead and start
sharing my screen.

00:26:54.060 --> 00:26:55.650
Do you see our Udacity
home page on--

00:26:55.650 --> 00:26:55.940
FRED SAUER: Yeah.

00:26:55.940 --> 00:26:56.706
That looks good.

00:26:56.706 --> 00:26:58.080
CHRIS CHEW: All right.

00:26:58.080 --> 00:27:02.920
So our website is udacity.com,
of the home page.

00:27:02.920 --> 00:27:04.790
We have a lot of courses.

00:27:04.790 --> 00:27:06.150
So we have--

00:27:06.150 --> 00:27:08.490
I think it's five or six that
are in development and some

00:27:08.490 --> 00:27:11.080
where around 10 that are
actually out and live.

00:27:11.080 --> 00:27:12.810
They're all completely free.

00:27:12.810 --> 00:27:15.840
And they're all built-- or have
been designed and taught

00:27:15.840 --> 00:27:19.500
by leading experts in the
particular field.

00:27:19.500 --> 00:27:23.970
We're focusing on science and
technology, engineering,

00:27:23.970 --> 00:27:28.180
mathematics, the stem
curriculums, I guess, because

00:27:28.180 --> 00:27:30.620
that's what we know and that
seems to be kind of what the

00:27:30.620 --> 00:27:33.010
world needs at the moment.

00:27:33.010 --> 00:27:35.630
And how is it that we branch
out, I think, it's still to be

00:27:35.630 --> 00:27:36.730
determined.

00:27:36.730 --> 00:27:40.100
One of our most popular classes
is Introduction to

00:27:40.100 --> 00:27:43.650
Computer Science taught
by Dave Evans.

00:27:43.650 --> 00:27:45.230
And throughout the course
you learn Python.

00:27:45.230 --> 00:27:47.360
And you actually learn to
build a search engine.

00:27:47.360 --> 00:27:49.960
And students have actually
built all kinds of search

00:27:49.960 --> 00:27:53.870
engines that started from zero
to scratch, went through the

00:27:53.870 --> 00:27:57.240
course and built interesting
things.

00:27:57.240 --> 00:28:01.010
Steve's class was Web
Development CS253.

00:28:01.010 --> 00:28:05.170
And people actually start with
no web development experience

00:28:05.170 --> 00:28:09.440
and put up a working website
that adds value to the world.

00:28:09.440 --> 00:28:12.550
A really interesting one that
I was just looking again at

00:28:12.550 --> 00:28:15.850
yesterday is somebody who built
something that looks at

00:28:15.850 --> 00:28:20.410
tweets and defines some
sentiment and analyzes that,

00:28:20.410 --> 00:28:24.360
particularly around the
upcoming US election.

00:28:24.360 --> 00:28:28.620
So here's the overview page
for Steve's course.

00:28:28.620 --> 00:28:31.570
It talks a little bit
about Steve and what

00:28:31.570 --> 00:28:32.880
the course will do.

00:28:32.880 --> 00:28:36.470
And you can just start it any
time by previewing the class.

00:28:36.470 --> 00:28:39.860
Or if you enroll, we'll start
remembering your progress.

00:28:39.860 --> 00:28:43.330
And at the end, you can actually
get a certificate.

00:28:43.330 --> 00:28:46.320
Courses are based around
small lectures.

00:28:46.320 --> 00:28:49.560
We try to add as much
interactivity as we can,

00:28:49.560 --> 00:28:51.280
broken up by quizzes.

00:28:51.280 --> 00:28:54.730
And quizzes aren't graded
at the moment.

00:28:54.730 --> 00:28:56.600
And it's just a way
to make sure that

00:28:56.600 --> 00:28:57.990
you're following along.

00:28:57.990 --> 00:29:02.070
And the course builds up to
final projects at the end.

00:29:02.070 --> 00:29:04.160
In which case, Steve's
course, it was

00:29:04.160 --> 00:29:05.470
actually building a blog.

00:29:05.470 --> 00:29:10.590
And we assess that by actually
sending out a request to your

00:29:10.590 --> 00:29:13.400
AppEngine app-- or it could
be any app really--

00:29:13.400 --> 00:29:19.210
and deciding whether or not the
blog is actually operable.

00:29:19.210 --> 00:29:23.160
So that's the, I guess, you
asked the overview.

00:29:23.160 --> 00:29:26.410
Do you have any questions
in particular?

00:29:26.410 --> 00:29:26.860
FRED SAUER: Yeah.

00:29:26.860 --> 00:29:31.000
Well, to get started maybe, you
heard Steve kind of talk

00:29:31.000 --> 00:29:32.350
about his experiences.

00:29:32.350 --> 00:29:37.580
And I wonder if the way you
think about AppEngine kind of

00:29:37.580 --> 00:29:38.995
aligns with Steve?

00:29:38.995 --> 00:29:44.690
And what experiences did you
have kind of along the way?

00:29:44.690 --> 00:29:45.090
CHRIS CHEW: Yeah.

00:29:45.090 --> 00:29:47.440
I think it does very
much align.

00:29:47.440 --> 00:29:51.030
Although, lately I've been
focusing more on the longevity

00:29:51.030 --> 00:29:53.450
of an AppEngine application
as opposed to just

00:29:53.450 --> 00:29:55.340
getting up and running.

00:29:55.340 --> 00:29:57.440
And the interesting thing about
AppEngine is it actually

00:29:57.440 --> 00:30:01.340
does both pretty well, and
better than most things.

00:30:01.340 --> 00:30:05.380
My background, I've been a web
application software engineer

00:30:05.380 --> 00:30:07.970
for 13 years now.

00:30:07.970 --> 00:30:10.490
I had started actually building
Access databases, and

00:30:10.490 --> 00:30:13.130
then got into the web by
putting them online

00:30:13.130 --> 00:30:15.150
using PHP and MySQL.

00:30:15.150 --> 00:30:19.660
Since then I've been responsible
for applications

00:30:19.660 --> 00:30:22.900
in seven or eight different
languages, probably 15, 20

00:30:22.900 --> 00:30:25.980
different stacks.

00:30:25.980 --> 00:30:30.390
And so I came to Udacity with a
pretty broad range, I think,

00:30:30.390 --> 00:30:34.220
of skills as it pertains
to the stacks.

00:30:34.220 --> 00:30:38.562
And, I also pretty strong in
the [INAUDIBLE], as Steve

00:30:38.562 --> 00:30:42.850
calls it, the understanding
file

00:30:42.850 --> 00:30:44.955
descriptor limits on a Linux.

00:30:44.955 --> 00:30:46.700
You know, stupid things
like that.

00:30:46.700 --> 00:30:49.620
And I came to Udacity actually
hoping to take us away from

00:30:49.620 --> 00:30:52.290
AppEngine, quite frankly.

00:30:52.290 --> 00:30:53.620
I was skeptical, like Steve.

00:30:53.620 --> 00:30:55.920
I didn't know enough about it,
and my experiences with it had

00:30:55.920 --> 00:31:00.270
been vanilla, I guess.

00:31:00.270 --> 00:31:03.790
And actually the opposite has
happened in my time here.

00:31:03.790 --> 00:31:06.280
I turned into a big
fan of AppEngine.

00:31:06.280 --> 00:31:09.600
And it is absolutely the best
place for us to be.

00:31:09.600 --> 00:31:10.910
And it's very surprising.

00:31:10.910 --> 00:31:14.170
And it really does force you
to make the right kind of

00:31:14.170 --> 00:31:16.790
scalability decisions
from the get go.

00:31:16.790 --> 00:31:19.560
And whereas Steve can talk
about that transition of

00:31:19.560 --> 00:31:23.370
learning those things over the
years of scaling is hard.

00:31:23.370 --> 00:31:24.720
And so to be able to
just do it from

00:31:24.720 --> 00:31:27.713
beginning is really nice.

00:31:27.713 --> 00:31:29.926
FRED SAUER: Good, good.

00:31:29.926 --> 00:31:31.580
I'm glad to hear that.

00:31:31.580 --> 00:31:34.260
Can you maybe just help--

00:31:34.260 --> 00:31:36.800
I know you talked about this
in you're guest blog post--

00:31:36.800 --> 00:31:40.980
but maybe describe you're stack
to our viewers today and

00:31:40.980 --> 00:31:41.880
what does it look like?

00:31:41.880 --> 00:31:44.620
I think you have some custom
libraries in there.

00:31:44.620 --> 00:31:45.870
CHRIS CHEW: Yeah, we do.

00:31:49.390 --> 00:31:53.340
We've actually had to do a lot
of work, I think, to improve

00:31:53.340 --> 00:31:54.180
our code over--

00:31:54.180 --> 00:31:56.910
so we've been live on AppEngine
for about 10 months.

00:31:56.910 --> 00:32:03.680
And we've seen some amazingly
crazy spikes in volume.

00:32:03.680 --> 00:32:06.560
So, it's been really
nice to be able

00:32:06.560 --> 00:32:07.560
to handle that traffic.

00:32:07.560 --> 00:32:10.940
But even then, we definitely
don't feel like we handle it

00:32:10.940 --> 00:32:12.870
as well as we should.

00:32:12.870 --> 00:32:16.440
And so we've been doing a lot
of refactoring of our code

00:32:16.440 --> 00:32:21.440
into some libraries so that we
can kind of ensure that we're

00:32:21.440 --> 00:32:24.970
following the best practices
of AppEngine.

00:32:24.970 --> 00:32:28.840
One of those is creating a
persistence library that wraps

00:32:28.840 --> 00:32:31.650
on top of the new NDB library.

00:32:31.650 --> 00:32:32.890
We're in Python.

00:32:32.890 --> 00:32:36.500
And that adds some things,
like helps us manage

00:32:36.500 --> 00:32:38.240
references a little bit.

00:32:38.240 --> 00:32:43.050
'Cause with a data store you
do kind of move away from

00:32:43.050 --> 00:32:44.990
relationships, and you
kind of look to have

00:32:44.990 --> 00:32:47.040
things in key values.

00:32:47.040 --> 00:32:49.890
But the reality is things
really are related.

00:32:49.890 --> 00:32:52.630
And we do have to manage some
consistency around that.

00:32:52.630 --> 00:32:57.480
And that's the downside to a
bunch of key value pairs.

00:32:57.480 --> 00:32:59.980
And so that library helps
us manage some of

00:32:59.980 --> 00:33:01.310
that a little bit.

00:33:01.310 --> 00:33:05.250
Also a big component in that is
some kind of event driven

00:33:05.250 --> 00:33:09.510
sort of processing that allows
us to do some deferred

00:33:09.510 --> 00:33:14.010
processing so that when one
value of one key changes and

00:33:14.010 --> 00:33:18.410
we need to update a series of
others, we have a framework to

00:33:18.410 --> 00:33:22.526
run the code that can make the
others eventually consistent.

00:33:22.526 --> 00:33:24.230
FRED SAUER: OK.

00:33:24.230 --> 00:33:26.510
CHRIS CHEW: On top of that,
then, we have a REST kind of

00:33:26.510 --> 00:33:31.030
framework we call TRAILS, which
is also developed by

00:33:31.030 --> 00:33:31.520
[INAUDIBLE]

00:33:31.520 --> 00:33:34.100
Kaminsky, one of our
engineers here.

00:33:34.100 --> 00:33:35.720
And it's a really nice--

00:33:35.720 --> 00:33:37.530
it's actually, I think,
the nicest REST

00:33:37.530 --> 00:33:40.320
framework I've ever seen.

00:33:40.320 --> 00:33:41.270
It's a joy to work with.

00:33:41.270 --> 00:33:46.070
It's very easy to build families
of RESTful resources.

00:33:46.070 --> 00:33:50.400
And then after that, it's
all HTML and JavaScript.

00:33:50.400 --> 00:33:51.480
FRED SAUER: OK.

00:33:51.480 --> 00:33:53.880
Great.

00:33:53.880 --> 00:33:59.040
Maybe can you share some of
the questions that you get

00:33:59.040 --> 00:33:59.910
from others.

00:33:59.910 --> 00:34:02.250
When you tell them that
Udacity's running on

00:34:02.250 --> 00:34:06.460
AppEngine, what sort of
questions do you get?

00:34:06.460 --> 00:34:06.880
CHRIS CHEW: Yeah.

00:34:06.880 --> 00:34:13.199
So, a lot of times it's
disbelief or surprise, I guess

00:34:13.199 --> 00:34:15.590
surprise more than
disbelief, but.

00:34:15.590 --> 00:34:17.750
And the first question
that comes up is,

00:34:17.750 --> 00:34:20.460
what about the speed?

00:34:20.460 --> 00:34:23.660
And I think the truth is it's
a little slower than if you

00:34:23.660 --> 00:34:26.110
were building something on--

00:34:26.110 --> 00:34:29.639
if you put servers some place
and were running things low

00:34:29.639 --> 00:34:31.650
level with a simpler
stack, it's

00:34:31.650 --> 00:34:32.900
absolutely gonna be faster.

00:34:36.040 --> 00:34:38.040
And that's a trade off that
you get for the horizontal

00:34:38.040 --> 00:34:39.170
scalability.

00:34:39.170 --> 00:34:41.880
And we do experience
latency spikes.

00:34:41.880 --> 00:34:45.980
And we're working through
figuring out why those happen,

00:34:45.980 --> 00:34:48.250
and then what we can do
to minimize those.

00:34:48.250 --> 00:34:51.870
And we're learning there are
things that we can do to

00:34:51.870 --> 00:34:53.380
minimize them.

00:34:53.380 --> 00:34:57.470
And so that's the growing
pains that you get with

00:34:57.470 --> 00:35:00.170
AppEngine, I think, would be
learning how to minimize

00:35:00.170 --> 00:35:03.170
latency spikes and organizing
your code and your data

00:35:03.170 --> 00:35:07.330
structures such that you don't
have that as often.

00:35:07.330 --> 00:35:12.230
And so, that would be the first
surprise is how do you

00:35:12.230 --> 00:35:13.880
keep your site fast?

00:35:13.880 --> 00:35:15.290
FRED SAUER: OK.

00:35:15.290 --> 00:35:19.640
So, I remember in your guest
blog post talked about a few

00:35:19.640 --> 00:35:23.070
things that you were looking
at to kind of reduce the

00:35:23.070 --> 00:35:26.390
latency of various requests
in your application.

00:35:26.390 --> 00:35:30.640
I know you already mentioned NDB
which adds memcache-based

00:35:30.640 --> 00:35:32.380
caching for free, instance
caching--

00:35:32.380 --> 00:35:32.970
IEIN VALDEZ: Yeah.

00:35:32.970 --> 00:35:37.540
FRED SAUER: It has the tasklet
support, that sort of thing.

00:35:37.540 --> 00:35:39.550
Can you name one or two other
things that maybe you're

00:35:39.550 --> 00:35:40.880
doing, looking at?

00:35:40.880 --> 00:35:43.390
Is it restructuring your code?

00:35:43.390 --> 00:35:47.710
Is it doing more requests
or RPCs in parallel

00:35:47.710 --> 00:35:50.110
asynchronously, braking
up task queues?

00:35:50.110 --> 00:35:52.180
Like, what are your main
strategies that you're kind of

00:35:52.180 --> 00:35:54.120
focused on right now?

00:35:54.120 --> 00:35:54.390
CHRIS CHEW: Yeah.

00:35:54.390 --> 00:36:00.510
So the overarching strategy is
to be able to fulfill each

00:36:00.510 --> 00:36:03.620
request with the least amount
of work possible.

00:36:03.620 --> 00:36:10.460
And so that means we've
basically taken the idea of

00:36:10.460 --> 00:36:15.020
normalization and
turned it to 11.

00:36:15.020 --> 00:36:16.310
Everything is de-normalized.

00:36:16.310 --> 00:36:18.170
We have a lot of duplicated
data.

00:36:18.170 --> 00:36:20.090
And we're really trying
to kind of--

00:36:20.090 --> 00:36:22.660
I keep calling it
pre-materializing views--

00:36:22.660 --> 00:36:27.370
kind of take it from an
Oracle background--

00:36:27.370 --> 00:36:32.210
where we try and get the data
to be ready to be read as

00:36:32.210 --> 00:36:33.800
quickly as possible.

00:36:33.800 --> 00:36:36.640
And so, in order to do that,
we have a ton of deferred

00:36:36.640 --> 00:36:41.570
processing which sits on
top of the task queue.

00:36:41.570 --> 00:36:45.150
And we've actually monkey
patched some of the NDB stuff

00:36:45.150 --> 00:36:48.190
to allow us to be able so that
when something's written to

00:36:48.190 --> 00:36:53.900
the data store, we can send
something into a task queue to

00:36:53.900 --> 00:36:57.400
let other code know that it
needs to update other parts of

00:36:57.400 --> 00:36:59.470
the system.

00:36:59.470 --> 00:37:02.860
We're starting to use the NDB
task list, the co-routines, a

00:37:02.860 --> 00:37:08.570
ton to try and fire off things
in parallel, and also give the

00:37:08.570 --> 00:37:10.670
process opportunity
to handle other

00:37:10.670 --> 00:37:11.920
requests at the same time.

00:37:14.850 --> 00:37:16.930
And I think that's a trend
that's happening in web

00:37:16.930 --> 00:37:17.800
development everywhere.

00:37:17.800 --> 00:37:21.550
I mean, noJS or [INAUDIBLE] and
Python all those things

00:37:21.550 --> 00:37:25.270
are really taking advantage of
the co-routine of patterns or

00:37:25.270 --> 00:37:26.520
cooperative programming.

00:37:28.510 --> 00:37:31.000
Then I think the other
thing we've--

00:37:31.000 --> 00:37:35.370
so we actually have a couple
layers of cache on top of NDB.

00:37:35.370 --> 00:37:39.010
We actually have an in-process
cache for some things where

00:37:39.010 --> 00:37:40.530
consistency's not
as important.

00:37:40.530 --> 00:37:42.855
And we don't use
as much memory.

00:37:42.855 --> 00:37:45.500
Our apps are actually,
surprisingly, have low memory

00:37:45.500 --> 00:37:46.480
footprints.

00:37:46.480 --> 00:37:50.110
So we're trying to use more of
that with in-process caching

00:37:50.110 --> 00:37:55.590
on keys that are gonna be
more predictably read.

00:37:55.590 --> 00:37:55.860
FRED SAUER: OK.

00:37:55.860 --> 00:37:57.270
Good.

00:37:57.270 --> 00:37:59.420
Iein, I know you're already
kind of looking

00:37:59.420 --> 00:38:00.400
at questions here.

00:38:00.400 --> 00:38:02.010
Do we have some good
questions?

00:38:02.010 --> 00:38:02.150
IEIN VALDEZ: Yeah.

00:38:02.150 --> 00:38:03.850
We have a couple questions.

00:38:03.850 --> 00:38:05.630
Some of them have
been touched.

00:38:05.630 --> 00:38:06.990
Let's start with Steve.

00:38:06.990 --> 00:38:10.080
There's a couple questions
for Steve.

00:38:10.080 --> 00:38:13.600
Maybe the first one here
is from anonymous

00:38:13.600 --> 00:38:15.305
person which is--

00:38:15.305 --> 00:38:16.470
STEVE HUFFMAN: Hopefully
not anonymous.

00:38:16.470 --> 00:38:17.200
IEIN VALDEZ: Yes.

00:38:17.200 --> 00:38:20.190
Which is, do you plan to
continue teaching at Udacity,

00:38:20.190 --> 00:38:24.000
perhaps a follow-up
course to CS253?

00:38:24.000 --> 00:38:26.070
STEVE HUFFMAN: It's something
we've talked about.

00:38:26.070 --> 00:38:29.440
And I think I'm on board with
doing that and I think

00:38:29.440 --> 00:38:31.960
Udacity's on board with
doing that as well.

00:38:31.960 --> 00:38:33.880
Presently, my head is basically

00:38:33.880 --> 00:38:35.600
in the sand at Hipmunk.

00:38:35.600 --> 00:38:38.460
But when my load lightens
up a little bit, yeah.

00:38:38.460 --> 00:38:40.770
There's definitely a few gaps in
the current course that I'd

00:38:40.770 --> 00:38:42.810
really like to fill.

00:38:42.810 --> 00:38:44.810
Yeah, potential another
course or two.

00:38:44.810 --> 00:38:46.220
That would be interesting
to explore

00:38:46.220 --> 00:38:47.350
down the road certainly.

00:38:47.350 --> 00:38:47.670
IEIN VALDEZ: Great.

00:38:47.670 --> 00:38:48.700
That's good to hear.

00:38:48.700 --> 00:38:51.020
And then we have another
question for you from Udi

00:38:51.020 --> 00:38:54.970
which is, which concepts were
the hardest or trickiest for

00:38:54.970 --> 00:38:56.530
students to understand?

00:38:56.530 --> 00:38:58.750
And then, what would you
change to overcome that

00:38:58.750 --> 00:39:00.110
difficulty?

00:39:00.110 --> 00:39:02.230
STEVE HUFFMAN: For students
to understand?

00:39:02.230 --> 00:39:05.940
The database stuff is tricky
because, I think, really to

00:39:05.940 --> 00:39:08.960
get a good grasp, it just
requires time, right.

00:39:08.960 --> 00:39:14.530
You just have to be thinking
in databases for a while.

00:39:14.530 --> 00:39:16.480
So that's challenging.

00:39:16.480 --> 00:39:19.120
Certainly some of the concepts
are really hard to teach

00:39:19.120 --> 00:39:23.030
because coming up
with meaningful

00:39:23.030 --> 00:39:25.110
quizzes can be tricky.

00:39:25.110 --> 00:39:27.390
A lot of like the basic HTML
stuff was actually really

00:39:27.390 --> 00:39:29.570
tedious to try to teach.

00:39:29.570 --> 00:39:33.680
And some of the scaling concepts
are hard to express

00:39:33.680 --> 00:39:38.150
in a video and hard to capture
in either a simple quiz or a

00:39:38.150 --> 00:39:40.480
simple web app.

00:39:40.480 --> 00:39:43.660
But by and large, I think we
managed to get to the high

00:39:43.660 --> 00:39:45.290
points pretty well.

00:39:45.290 --> 00:39:50.160
But as with anything, if you
take a seven unit course and

00:39:50.160 --> 00:39:54.960
spend maybe 100 hours on it or
so, it still takes thousands

00:39:54.960 --> 00:39:56.760
of hours to become an expert
in anything, right.

00:39:56.760 --> 00:39:59.920
So, some of the trickier
concepts just

00:39:59.920 --> 00:40:01.340
take time, I think.

00:40:01.340 --> 00:40:02.330
IEIN VALDEZ: Cool, cool.

00:40:02.330 --> 00:40:02.830
OK.

00:40:02.830 --> 00:40:05.420
And then one more question
for you which

00:40:05.420 --> 00:40:07.560
is someone's asking--

00:40:07.560 --> 00:40:10.030
[? Varun ?] is asking-- how easy
would it be for someone

00:40:10.030 --> 00:40:12.690
to learn PHP and
MySQL instead?

00:40:12.690 --> 00:40:14.770
I guess this is probably in the
context of your course.

00:40:14.770 --> 00:40:15.940
What do you have to
say about that?

00:40:15.940 --> 00:40:17.500
STEVE HUFFMAN: I think
a lot of the

00:40:17.500 --> 00:40:20.750
concepts are very similar.

00:40:20.750 --> 00:40:23.940
We tried to not make this an
AppEngine tutorial, but have

00:40:23.940 --> 00:40:26.505
AppEngine facilitate
the concepts we

00:40:26.505 --> 00:40:28.600
were trying to teach.

00:40:28.600 --> 00:40:29.750
Now some things will
be tricky, right.

00:40:29.750 --> 00:40:30.830
You've got to get
MySQL running.

00:40:30.830 --> 00:40:32.030
You've gotta get PHP running.

00:40:32.030 --> 00:40:33.950
You've got to get those
two talking.

00:40:33.950 --> 00:40:36.750
That, I think, will actually
be the hardest part.

00:40:36.750 --> 00:40:40.640
When MySQL goes wrong--

00:40:40.640 --> 00:40:42.000
or when you run out of--

00:40:42.000 --> 00:40:44.030
as Chris was alluding to, one
day you're gonna run out of

00:40:44.030 --> 00:40:45.280
file descriptors.

00:40:47.570 --> 00:40:49.050
Those are the type of issues
that you're gonna have to deal

00:40:49.050 --> 00:40:49.840
with at some point.

00:40:49.840 --> 00:40:50.760
And those are tricky, right.

00:40:50.760 --> 00:40:51.850
Those are challenging.

00:40:51.850 --> 00:40:54.690
Things break in weird ways.

00:40:54.690 --> 00:41:00.140
And that's the joy of being
an ops guy, I guess.

00:41:00.140 --> 00:41:00.440
IEIN VALDEZ: OK.

00:41:00.440 --> 00:41:01.810
Cool.

00:41:01.810 --> 00:41:03.640
This looks like a question
for Chris.

00:41:03.640 --> 00:41:04.920
I'm not sure if he can
answer or not, but

00:41:04.920 --> 00:41:07.680
I'll just go for it.

00:41:07.680 --> 00:41:11.400
Basically, the gist of the
question is this is around the

00:41:11.400 --> 00:41:14.180
sort of copyright status
of the CS253 course.

00:41:14.180 --> 00:41:15.680
Is it Creative Commons?

00:41:15.680 --> 00:41:18.910
Can it be translated into other
languages and shared in

00:41:18.910 --> 00:41:19.700
other websites?

00:41:19.700 --> 00:41:26.310
This looks like someone in the
Russian Republic potentially.

00:41:26.310 --> 00:41:27.350
I'm not sure what
the status is.

00:41:27.350 --> 00:41:28.660
Do you have any comment?

00:41:28.660 --> 00:41:29.120
CHRIS CHEW: Yes.

00:41:29.120 --> 00:41:32.070
So, our courses are all
Creative Commons.

00:41:32.070 --> 00:41:36.940
And as far as I know, we intend
it to stay that way.

00:41:36.940 --> 00:41:41.460
We do actually have several
translations already.

00:41:41.460 --> 00:41:44.420
And we absolutely encourage
translations.

00:41:44.420 --> 00:41:46.920
That happened accidentally, and
it was one of the happiest

00:41:46.920 --> 00:41:49.580
moments, I think, we had here
at Udacity that people found

00:41:49.580 --> 00:41:51.540
our stuff so useful.

00:41:51.540 --> 00:41:54.270
There's a website here.

00:41:54.270 --> 00:41:59.590
And I can follow up on a blog
post on a Udacity blog or

00:41:59.590 --> 00:42:01.420
universalsubtitles.org.

00:42:01.420 --> 00:42:03.400
And we have a team
called Udacity.

00:42:03.400 --> 00:42:06.000
So you can actually search
for Udacity there.

00:42:06.000 --> 00:42:08.210
Or I can provide a link.

00:42:08.210 --> 00:42:13.220
And that's the best place to
submit new translations.

00:42:13.220 --> 00:42:16.240
And also the translations are
then put into our subtitle

00:42:16.240 --> 00:42:18.810
system in YouTube.

00:42:18.810 --> 00:42:19.670
IEIN VALDEZ: Cool, cool.

00:42:19.670 --> 00:42:19.840
CHRIS CHEW: Yeah.

00:42:19.840 --> 00:42:20.110
Please.

00:42:20.110 --> 00:42:21.570
Translations would
be wonderful.

00:42:21.570 --> 00:42:22.980
We'd very much appreciate
that.

00:42:22.980 --> 00:42:23.620
IEIN VALDEZ: Fantastic.

00:42:23.620 --> 00:42:24.470
OK.

00:42:24.470 --> 00:42:25.930
Here's a question for Fred.

00:42:25.930 --> 00:42:28.360
FRED SAUER: OK.

00:42:28.360 --> 00:42:30.670
IEIN VALDEZ: Which is,
the data store quotas

00:42:30.670 --> 00:42:31.840
seem to be quite low.

00:42:31.840 --> 00:42:34.760
Doesn't that severely limit the
free usage for AppEngine?

00:42:34.760 --> 00:42:37.240
What happens if it
goes beyond the--

00:42:37.240 --> 00:42:38.230
FRED SAUER: So, yeah.

00:42:38.230 --> 00:42:42.890
So with AppEngine, we've always
said that we want it to

00:42:42.890 --> 00:42:43.800
be free to get started.

00:42:43.800 --> 00:42:46.150
We want you to kind of start
experimenting with AppEngine,

00:42:46.150 --> 00:42:48.860
be able to try it out, kick the
tires a little bit, before

00:42:48.860 --> 00:42:52.760
you have to give a credit
card and enable billing.

00:42:52.760 --> 00:42:57.650
And so we have two of the main
components that most

00:42:57.650 --> 00:43:01.760
applications who have billing
enabled, they pay for, are

00:43:01.760 --> 00:43:02.740
instance hours.

00:43:02.740 --> 00:43:05.680
Those are hours that there are
app servers running your code

00:43:05.680 --> 00:43:07.390
so that's when you're
getting traffic.

00:43:07.390 --> 00:43:09.910
And the other is data
store operations.

00:43:09.910 --> 00:43:11.970
And other smaller things
like storage

00:43:11.970 --> 00:43:13.860
quota on disk and bandwidth.

00:43:13.860 --> 00:43:16.640
The first two are kind of
the key components.

00:43:16.640 --> 00:43:20.360
And so the free quota for
an application includes,

00:43:20.360 --> 00:43:23.970
currently, 28 instance
hours a day.

00:43:23.970 --> 00:43:25.280
It's a little bit
more than 24.

00:43:25.280 --> 00:43:27.450
We want to give you some room
to kind of occasionally bump

00:43:27.450 --> 00:43:28.860
up to multiple instances.

00:43:28.860 --> 00:43:34.360
But it essentially let you run
kind of a small site easily.

00:43:34.360 --> 00:43:37.750
The data store operations
are--

00:43:37.750 --> 00:43:41.830
what we did is we kind of looked
at average use of lots

00:43:41.830 --> 00:43:44.690
of small apps, and we kind of
picked a number there where we

00:43:44.690 --> 00:43:48.520
thought, OK, most applications
should reasonably be able to

00:43:48.520 --> 00:43:51.200
use the free quota and
be able to run.

00:43:51.200 --> 00:43:55.240
So I have a couple personal
sites that I run under that

00:43:55.240 --> 00:43:55.800
free quota.

00:43:55.800 --> 00:43:58.520
They're just ones I use
with my family.

00:43:58.520 --> 00:44:01.180
They don't get hit very often.

00:44:01.180 --> 00:44:04.420
I don't have to pay for those,
so that's great.

00:44:04.420 --> 00:44:08.150
There are a few kind of things
that people starting with

00:44:08.150 --> 00:44:11.320
AppEngine run into quickly with
respect to data store

00:44:11.320 --> 00:44:15.680
usage that catches them a
little bit by surprise.

00:44:15.680 --> 00:44:21.330
And with just a few lines of
code changed, you can probably

00:44:21.330 --> 00:44:25.130
reduce your data store usage
very significantly.

00:44:25.130 --> 00:44:29.810
So one of the decisions we made
early on with AppEngine

00:44:29.810 --> 00:44:33.500
in hindsight that was maybe not
quite the right decision,

00:44:33.500 --> 00:44:37.000
but what we decided was the
properties on entities would

00:44:37.000 --> 00:44:39.080
by default be indexed.

00:44:39.080 --> 00:44:42.290
That is, so if you have a
customer property with a first

00:44:42.290 --> 00:44:45.710
and a last name, by default we
create a first name index and

00:44:45.710 --> 00:44:49.050
a last name index so that you
can do queries like find me

00:44:49.050 --> 00:44:52.200
all customers whose last name
starts with Hoffman.

00:44:52.200 --> 00:44:55.760
And hopefully Steve would
show up in that list.

00:44:55.760 --> 00:45:01.000
Or first name with Chris, and
we would find Chris there.

00:45:01.000 --> 00:45:04.200
But it turns out in this
non-relational world, that's

00:45:04.200 --> 00:45:05.500
usually not what you want.

00:45:05.500 --> 00:45:08.560
You don't want an index in
every single property.

00:45:08.560 --> 00:45:11.930
You probably have maybe a dozen
or two dozen different

00:45:11.930 --> 00:45:13.230
properties on an entity.

00:45:13.230 --> 00:45:15.780
And you're not gonna run a
query against all those.

00:45:15.780 --> 00:45:17.810
But every one of
those indexes--

00:45:17.810 --> 00:45:20.605
there's actually two indexes,
an ascending and

00:45:20.605 --> 00:45:21.860
a descending one.

00:45:21.860 --> 00:45:26.510
And so kind of to wrap up
the story is by default,

00:45:26.510 --> 00:45:27.770
properties are indexed.

00:45:27.770 --> 00:45:31.210
And there's an extra penalty
that you pay as a user for

00:45:31.210 --> 00:45:32.110
writing those.

00:45:32.110 --> 00:45:33.900
And the change is very,
very simple.

00:45:33.900 --> 00:45:39.190
When you declare your database
model, when you say first name

00:45:39.190 --> 00:45:43.580
equals db string property, in
parentheses you just put index

00:45:43.580 --> 00:45:44.630
equals false.

00:45:44.630 --> 00:45:47.330
And suddenly you've reduced
the number of small write

00:45:47.330 --> 00:45:49.580
operations by two just
for that one entity.

00:45:49.580 --> 00:45:52.270
So every time you kind of update
that entity or you

00:45:52.270 --> 00:45:56.160
create it, that's a reduction
right there.

00:45:56.160 --> 00:46:01.240
There's another area where when
I get a chance to look at

00:46:01.240 --> 00:46:04.810
code that other developers have
written, I very often see

00:46:04.810 --> 00:46:08.400
that they're doing data store
queries rather than fetches by

00:46:08.400 --> 00:46:11.050
key even when they know that
the result is gonna be a

00:46:11.050 --> 00:46:12.110
single entity.

00:46:12.110 --> 00:46:15.930
And queries essentially cost
twice as much work as a fetch

00:46:15.930 --> 00:46:19.060
because you're first doing a
query across the index to

00:46:19.060 --> 00:46:21.460
figure out what entities you
need, and then you're doing a

00:46:21.460 --> 00:46:23.880
second phase of actually
getting the entities.

00:46:23.880 --> 00:46:27.060
So right there with that trick
you can kind of cut your data

00:46:27.060 --> 00:46:29.580
store big operations in half.

00:46:29.580 --> 00:46:30.910
And then with the other
one, you can cut the

00:46:30.910 --> 00:46:32.220
smaller ones in half.

00:46:32.220 --> 00:46:36.180
So, short answer, there's some
low hanging fruit to kind of

00:46:36.180 --> 00:46:36.960
address that.

00:46:36.960 --> 00:46:41.110
And we think that the free quota
should still be good for

00:46:41.110 --> 00:46:42.770
small applications.

00:46:42.770 --> 00:46:43.470
IEIN VALDEZ: Cool.

00:46:43.470 --> 00:46:46.050
So we have time for about
two more questions.

00:46:46.050 --> 00:46:50.190
I have one here for Chris from
Evan in Oregon which is,

00:46:50.190 --> 00:46:53.400
Udacity is an awesome
application and I'm excited to

00:46:53.400 --> 00:46:56.130
watch it grow, but certain
oddities persist.

00:46:56.130 --> 00:47:00.420
Each view of each course
requires greater than 300k in

00:47:00.420 --> 00:47:01.750
monolithic JSON object.

00:47:01.750 --> 00:47:05.300
Why not a more dynamic fractured
Ajax response to

00:47:05.300 --> 00:47:06.480
avoid loading?

00:47:06.480 --> 00:47:12.200
So, hopefully that makes
sense, that question.

00:47:12.200 --> 00:47:13.280
CHRIS CHEW: I'm curious.

00:47:13.280 --> 00:47:14.530
I think Evan might be a plant.

00:47:17.790 --> 00:47:18.320
Yeah.

00:47:18.320 --> 00:47:21.970
So, that has not escaped
our notice.

00:47:21.970 --> 00:47:23.260
It's interesting that--

00:47:26.190 --> 00:47:30.150
yeah, I mean, everybody makes
wrong design decisions at

00:47:30.150 --> 00:47:33.860
time, and sometimes you just
have to make a decision.

00:47:33.860 --> 00:47:37.200
Right now, when you pull down a
course, you load most of the

00:47:37.200 --> 00:47:40.400
course content in one
JSON request.

00:47:40.400 --> 00:47:43.970
And, I guess it's fewer
requests, and that's a bonus.

00:47:43.970 --> 00:47:47.430
But our courses, I think, or
the content is a lot bigger

00:47:47.430 --> 00:47:50.160
than what we envisioned at the
time of that decision.

00:47:50.160 --> 00:47:52.610
And it ends up pulling
more down.

00:47:52.610 --> 00:47:54.760
We're actually in the middle of
a rewrite that will go live

00:47:54.760 --> 00:47:56.010
in January-ish.

00:47:58.500 --> 00:48:00.820
And within the new system
we're definitely pulling

00:48:00.820 --> 00:48:04.100
things down incrementally,
and the performance

00:48:04.100 --> 00:48:05.840
is definitely improved.

00:48:05.840 --> 00:48:07.390
So Evan please be patient.

00:48:07.390 --> 00:48:09.680
We're working through
that refactoring.

00:48:09.680 --> 00:48:12.770
And we're gonna give you
a whole bunch of other

00:48:12.770 --> 00:48:14.310
oddities, I'm sure.

00:48:14.310 --> 00:48:15.950
FRED SAUER: Sounds like fix
is on the way already.

00:48:15.950 --> 00:48:16.428
CHRIS CHEW: Yeah.

00:48:16.428 --> 00:48:18.340
I hope so.

00:48:18.340 --> 00:48:18.630
IEIN VALDEZ: OK.

00:48:18.630 --> 00:48:18.940
Cool.

00:48:18.940 --> 00:48:20.670
And this will be our
last question.

00:48:20.670 --> 00:48:21.340
This is from Kyle.

00:48:21.340 --> 00:48:24.490
And this is for you Steve which
is, why do you think you

00:48:24.490 --> 00:48:30.150
and Alexis were so successful
in the company?

00:48:30.150 --> 00:48:34.020
Do you have any parting
thoughts on that?

00:48:34.020 --> 00:48:35.480
STEVE HUFFMAN: I could talk
at length on that.

00:48:38.610 --> 00:48:40.130
There are many paths
to success.

00:48:40.130 --> 00:48:44.260
And for Alexis and I, we were
really close friends going in.

00:48:44.260 --> 00:48:45.950
And we stayed close friends
throughout the entire

00:48:45.950 --> 00:48:47.030
experience.

00:48:47.030 --> 00:48:50.000
And when you're starting a
company, being able to lean on

00:48:50.000 --> 00:48:52.910
your co-founder is supremely
important.

00:48:52.910 --> 00:48:56.360
And one of the things that I
really loved about Reddit was

00:48:56.360 --> 00:48:58.620
that Reddit was a company
with a soul.

00:48:58.620 --> 00:49:01.730
And Reddit's personality
was our personality.

00:49:01.730 --> 00:49:05.400
And Alexis and I, like, we're
fun to hang out with.

00:49:05.400 --> 00:49:07.650
And Reddit, it was a
fun place to be.

00:49:07.650 --> 00:49:10.590
And I think considering we
submitted all the content for

00:49:10.590 --> 00:49:14.370
the first couple of months,
pretending we had traffic, we

00:49:14.370 --> 00:49:16.380
were able to kind of
set the tone to be

00:49:16.380 --> 00:49:19.080
things that we liked.

00:49:19.080 --> 00:49:23.240
And so I think it really came
down to caring, letting our

00:49:23.240 --> 00:49:25.560
company have a personality, and
letting that personality

00:49:25.560 --> 00:49:26.470
be our personality.

00:49:26.470 --> 00:49:30.550
And so, we considered
our users friends.

00:49:30.550 --> 00:49:33.310
And if you've hung out on
Reddit, like, there's a good

00:49:33.310 --> 00:49:36.840
chance you've interacted with
Alexis or I. And if you've met

00:49:36.840 --> 00:49:39.350
us in person, we try to--

00:49:39.350 --> 00:49:41.580
That was important to us because
our technology wasn't

00:49:41.580 --> 00:49:43.190
very good, right.

00:49:43.190 --> 00:49:44.940
The website was kind of ugly.

00:49:44.940 --> 00:49:45.840
It was pretty jank.

00:49:45.840 --> 00:49:47.050
It was down a lot.

00:49:47.050 --> 00:49:48.400
It was slow a lot.

00:49:48.400 --> 00:49:51.210
I was still learning how
to do all this stuff.

00:49:51.210 --> 00:49:53.470
But I think we overcame a lot
of that by having a real

00:49:53.470 --> 00:49:55.120
community and making
a place that people

00:49:55.120 --> 00:49:58.020
really wanted to be.

00:49:58.020 --> 00:50:01.090
FRED SAUER: Great, great.

00:50:01.090 --> 00:50:02.595
I thought of maybe one
more question.

00:50:02.595 --> 00:50:02.850
IEIN VALDEZ: Yeah, yeah.

00:50:02.850 --> 00:50:04.780
FRED SAUER: We can throw
that out there.

00:50:04.780 --> 00:50:06.400
So I'll start with you Chris.

00:50:06.400 --> 00:50:07.560
And Steve, I'll give
you a chance to

00:50:07.560 --> 00:50:09.700
answer the same question.

00:50:09.700 --> 00:50:13.100
So Chris would you ever go back
to kind of managing your

00:50:13.100 --> 00:50:16.270
own machines, be it virtual
machines or real machines?

00:50:16.270 --> 00:50:19.760
Or are you kind of sold on the
kind of platform as a service

00:50:19.760 --> 00:50:23.590
model and just worrying about
application logic?

00:50:23.590 --> 00:50:26.350
I'm biasing the question a
little bit, but I do want an

00:50:26.350 --> 00:50:27.680
honest answer.

00:50:27.680 --> 00:50:28.930
CHRIS CHEW: Yeah.

00:50:31.110 --> 00:50:38.650
So, I would say that AppEngine
would definitely be on the top

00:50:38.650 --> 00:50:44.230
of my short list in starting
some other projects.

00:50:44.230 --> 00:50:48.170
There are some things that you
can't do in AppEngine, like

00:50:48.170 --> 00:50:51.480
you can't execute arbitrary
code really.

00:50:51.480 --> 00:50:53.990
And so, like our program
submissions here, when you

00:50:53.990 --> 00:50:58.020
submit some programming
snippet, that

00:50:58.020 --> 00:50:59.940
doesn't run on AppEngine.

00:50:59.940 --> 00:51:04.050
We actually send that out and
run it at someplace else.

00:51:04.050 --> 00:51:09.360
And so there are some projects
that you might envision that

00:51:09.360 --> 00:51:10.380
it's just not gonna work.

00:51:10.380 --> 00:51:12.890
And you might end up creating
some other hoops you have to

00:51:12.890 --> 00:51:17.650
jump through when it would've
been net easier to do it

00:51:17.650 --> 00:51:19.830
someplace else.

00:51:19.830 --> 00:51:24.860
And the Amazon Web Services
has the Elastic Beanstalk,

00:51:24.860 --> 00:51:28.150
which is kind of like the
instance deployment kind of

00:51:28.150 --> 00:51:29.340
system that AppEngine has.

00:51:29.340 --> 00:51:30.890
And so those are some
other competitors.

00:51:30.890 --> 00:51:33.240
And you always have to be
aware of what your other

00:51:33.240 --> 00:51:34.680
options are.

00:51:34.680 --> 00:51:39.110
But as far as starting something
that actually has a

00:51:39.110 --> 00:51:42.760
chance to stick with you
throughout the entire life of

00:51:42.760 --> 00:51:46.265
a project no matter how popular
you get, even the fact

00:51:46.265 --> 00:51:49.100
that there's a chance that
it'll work is extremely

00:51:49.100 --> 00:51:50.444
compelling.

00:51:50.444 --> 00:51:50.871
FRED SAUER: OK.

00:51:50.871 --> 00:51:51.300
Great.

00:51:51.300 --> 00:51:54.460
And Steve, would you ever go
back to kind of managing your

00:51:54.460 --> 00:51:57.510
own servers, playing
sysadmin or--

00:51:57.510 --> 00:51:59.260
STEVE HUFFMAN: I can tell you
what I would never do is I

00:51:59.260 --> 00:52:02.380
will hopefully never install
a server in Iraq again.

00:52:05.020 --> 00:52:08.050
Now, you know the difference
between AppEngine and AWS--

00:52:08.050 --> 00:52:10.090
Hipmunk uses AWS now, right--

00:52:10.090 --> 00:52:11.580
is whether you are actually

00:52:11.580 --> 00:52:14.786
administering the boxes yourself.

00:52:14.786 --> 00:52:18.230
I basically echo exactly what
Chris said is if I were

00:52:18.230 --> 00:52:21.930
starting again or if I had the
opportunity to really move

00:52:21.930 --> 00:52:24.930
Hipmunk, we'd consider AppEngine
for a lot of it.

00:52:24.930 --> 00:52:27.730
But I know there are pieces
where it wouldn't quite fit.

00:52:27.730 --> 00:52:31.570
And what I wonder is
will those pieces

00:52:31.570 --> 00:52:34.680
exist at some point?

00:52:34.680 --> 00:52:37.930
'Cause there's things like the
way we run batch jobs and our

00:52:37.930 --> 00:52:40.770
[? Fare Alert ?] product and
we care about the IPs very

00:52:40.770 --> 00:52:44.120
much and that sort of thing.

00:52:44.120 --> 00:52:47.820
They're kind of little issues,
issues that I'm sure Google

00:52:47.820 --> 00:52:49.880
could actually solve.

00:52:49.880 --> 00:52:52.900
But, my instinct is to
say, I want to do

00:52:52.900 --> 00:52:54.210
as little as possible.

00:52:54.210 --> 00:52:57.640
So the more somebody does
for me, the better.

00:52:57.640 --> 00:53:00.050
And AppEngine does
quite a lot.

00:53:00.050 --> 00:53:06.280
But, we are not a company who is
gonna be made or destroyed

00:53:06.280 --> 00:53:09.090
on our skills on ops, right.

00:53:09.090 --> 00:53:10.060
We're not an ops company.

00:53:10.060 --> 00:53:10.920
We don't want to think
about that.

00:53:10.920 --> 00:53:12.890
We're a consumer web company.

00:53:12.890 --> 00:53:14.910
And so as long as that's the
case, we want to outsource the

00:53:14.910 --> 00:53:15.980
ops to somebody else.

00:53:15.980 --> 00:53:17.050
Yeah.

00:53:17.050 --> 00:53:18.580
FRED SAUER: Focus on
the value end.

00:53:18.580 --> 00:53:18.860
OK.

00:53:18.860 --> 00:53:20.100
STEVE HUFFMAN: Exactly.

00:53:20.100 --> 00:53:22.090
FRED SAUER: Well, thank you very
much both you for taking

00:53:22.090 --> 00:53:25.055
your time and sharing your
experiences with us.

00:53:25.055 --> 00:53:28.330
I hope the viewers had
a chance to enjoy it.

00:53:28.330 --> 00:53:28.750
IEIN VALDEZ: Yeah.

00:53:28.750 --> 00:53:29.570
Thanks a lot.

00:53:29.570 --> 00:53:29.860
FRED SAUER: Thank you.

00:53:29.860 --> 00:53:30.650
STEVE HUFFMAN: Our pleasure.

00:53:30.650 --> 00:53:30.870
Yeah.

00:53:30.870 --> 00:53:32.340
Well done over there guys.

00:53:32.340 --> 00:53:34.080
FRED SAUER: All right.

00:53:34.080 --> 00:53:37.340
So, just to wrap it up.

00:53:37.340 --> 00:53:40.350
If you followed the interview,
liked it, and you haven't read

00:53:40.350 --> 00:53:43.800
the blog posts yet that Steve
and Chris contributed the last

00:53:43.800 --> 00:53:45.700
couple days, do check
those out.

00:53:45.700 --> 00:53:49.080
And we'll see you back here on
the Google Developers Live.

00:53:49.080 --> 00:53:50.070
Thanks everyone.

00:53:50.070 --> 00:53:51.200
IEIN VALDEZ: Thanks everyone.

00:53:51.200 --> 00:53:51.500
FRED SAUER: Have good day.

00:53:51.500 --> 00:53:52.750
STEVE HUFFMAN: Bye.

