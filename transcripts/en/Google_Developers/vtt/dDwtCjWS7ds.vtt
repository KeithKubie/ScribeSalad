WEBVTT
Kind: captions
Language: en

00:00:11.207 --> 00:00:13.290
What's even better than
playing your favorite game

00:00:13.290 --> 00:00:14.570
on your phone?

00:00:14.570 --> 00:00:16.560
Playing it on a big
screen TV in your living

00:00:16.560 --> 00:00:18.590
room with a couple of friends.

00:00:18.590 --> 00:00:19.550
I'm Josh Gordon.

00:00:19.550 --> 00:00:22.540
And today, I'll show you how to
get your existing mobile game

00:00:22.540 --> 00:00:24.870
working on Android TV.

00:00:24.870 --> 00:00:27.590
Android TV is your
opportunity to develop

00:00:27.590 --> 00:00:31.470
for both the big screen and
for mobile at the same time

00:00:31.470 --> 00:00:34.390
and in the same APK.

00:00:34.390 --> 00:00:36.720
That's because
Android TV is just

00:00:36.720 --> 00:00:40.070
Android on a new form factor.

00:00:40.070 --> 00:00:41.620
So can you run
your existing game

00:00:41.620 --> 00:00:44.310
on the TV right out of the box?

00:00:44.310 --> 00:00:47.670
Not quite, but
you're nearly there.

00:00:47.670 --> 00:00:49.790
First, you'll need to
make a couple of updates

00:00:49.790 --> 00:00:51.500
so it's compatible.

00:00:51.500 --> 00:00:53.890
Of course, TVs have a lot
of hardware differences

00:00:53.890 --> 00:00:55.440
with mobile.

00:00:55.440 --> 00:00:58.000
For example, my TV
doesn't have a touchscreen

00:00:58.000 --> 00:01:00.210
or an accelerometer.

00:01:00.210 --> 00:01:03.220
But by properly structuring your
manifest and application code,

00:01:03.220 --> 00:01:05.450
you can make your game
compatible with both form

00:01:05.450 --> 00:01:08.100
factors.

00:01:08.100 --> 00:01:09.970
Start by specifying
the activity that's

00:01:09.970 --> 00:01:13.990
launched when the user selects
your app on the TV home screen.

00:01:13.990 --> 00:01:15.660
Do so by adding the
Leanback Launcher

00:01:15.660 --> 00:01:17.800
category to an intent filter.

00:01:17.800 --> 00:01:20.185
Having this category
also lets the Play Store

00:01:20.185 --> 00:01:23.620
know that your app is
compatible with Android TV.

00:01:23.620 --> 00:01:25.690
Next, notice that
the Android TV home

00:01:25.690 --> 00:01:28.704
screen uses a separate
launcher row for games.

00:01:28.704 --> 00:01:30.870
And you'll want to make
sure your game is shown here

00:01:30.870 --> 00:01:32.490
when it's installed.

00:01:32.490 --> 00:01:35.480
To do so, just add an
Android isGame attribute

00:01:35.480 --> 00:01:38.890
to your application element.

00:01:38.890 --> 00:01:41.710
Now, Android TV uses banners
instead of icons to represent

00:01:41.710 --> 00:01:43.420
your app on the home screen.

00:01:43.420 --> 00:01:46.330
If you don't have a banner,
you'll need to create one.

00:01:46.330 --> 00:01:50.660
It's a fixed size
drawable at 320 x 180.

00:01:50.660 --> 00:01:52.060
Your banner should
always include

00:01:52.060 --> 00:01:53.779
text that identifies your game.

00:01:53.779 --> 00:01:56.320
And you should create a banner
for each language you support.

00:01:59.010 --> 00:02:02.282
Now, specify the banner
in your manifest.

00:02:02.282 --> 00:02:03.740
Also, in your
manifest, you'll need

00:02:03.740 --> 00:02:06.590
to make sure you don't require
any hardware features that

00:02:06.590 --> 00:02:08.750
are unavailable on the TV.

00:02:08.750 --> 00:02:11.060
For example, if your game
requires a touchscreen

00:02:11.060 --> 00:02:14.000
in the manifest, your app
won't be listed as compatible

00:02:14.000 --> 00:02:15.610
with TVs in the Play Store.

00:02:15.610 --> 00:02:18.265
So start by declaring that a
touchscreen is not required.

00:02:20.940 --> 00:02:23.260
Next, check through your
manifest for other hardware

00:02:23.260 --> 00:02:27.530
features you use on mobile, like
a camera or an accelerometer.

00:02:27.530 --> 00:02:31.880
Be sure to also mark
these as not required.

00:02:31.880 --> 00:02:34.210
Now, keep in mind that
some permissions can also

00:02:34.210 --> 00:02:36.750
imply hardware requirements.

00:02:36.750 --> 00:02:39.150
For example, using
the camera permission

00:02:39.150 --> 00:02:43.070
creates an implicit
dependency on camera hardware.

00:02:43.070 --> 00:02:46.044
To handle this, you'll need to
explicitly mark that hardware

00:02:46.044 --> 00:02:46.710
as not required.

00:02:50.080 --> 00:02:52.370
Next, declare that your app
uses the Leanback feature.

00:02:52.370 --> 00:02:54.360
And be sure to set
Required to false,

00:02:54.360 --> 00:02:57.890
so your game can also
be installed on mobile.

00:02:57.890 --> 00:03:00.110
Now, at runtime, you can
check what type of device

00:03:00.110 --> 00:03:03.160
your game is running on and
adapt its behavior accordingly.

00:03:03.160 --> 00:03:05.990
To do so, use the
UI mode manager

00:03:05.990 --> 00:03:09.980
and test if the current
device is a TV or mobile.

00:03:09.980 --> 00:03:11.940
Also, by using the
package manager,

00:03:11.940 --> 00:03:13.700
you can test if
specific hardware

00:03:13.700 --> 00:03:16.324
is available on the
device at runtime.

00:03:16.324 --> 00:03:17.990
Now, here's a gotcha
to be aware of when

00:03:17.990 --> 00:03:19.860
you're porting your game.

00:03:19.860 --> 00:03:21.550
You probably already
have code that

00:03:21.550 --> 00:03:24.160
checks to see if there's an
active internet connection.

00:03:24.160 --> 00:03:25.810
On mobile, commonly,
you just have

00:03:25.810 --> 00:03:29.800
to worry about Wi-Fi and
cellular, but on Android TV,

00:03:29.800 --> 00:03:32.340
you might also have Ethernet.

00:03:32.340 --> 00:03:34.940
The best way to check for an
active internet connection

00:03:34.940 --> 00:03:36.900
without having to
specify the type

00:03:36.900 --> 00:03:38.530
is to use the
connectivity manager.

00:03:41.080 --> 00:03:44.340
Now, let's talk about
how to control your game.

00:03:44.340 --> 00:03:46.200
Instead of a
touchscreen, on the TV,

00:03:46.200 --> 00:03:49.480
players control your game using
a D-pad remote control or more

00:03:49.480 --> 00:03:52.000
advanced gamepad.

00:03:52.000 --> 00:03:54.150
Most TVs ship with
just the remote.

00:03:54.150 --> 00:03:56.880
So if your game supports
a simple input scheme,

00:03:56.880 --> 00:04:01.120
you can potentially reach
every Android TV user.

00:04:01.120 --> 00:04:03.040
Always show visual
controller instructions

00:04:03.040 --> 00:04:05.030
in your game for both
types of controllers,

00:04:05.030 --> 00:04:07.170
if you support them.

00:04:07.170 --> 00:04:10.640
Google provides generic graphics
you can use for this purpose.

00:04:10.640 --> 00:04:12.399
And drawing your
own is fine too,

00:04:12.399 --> 00:04:13.815
just keep them
free from branding.

00:04:16.339 --> 00:04:18.399
Now, if your game
requires a gamepad,

00:04:18.399 --> 00:04:21.050
you should let players
know in the Play Store.

00:04:21.050 --> 00:04:24.320
To do so, add the gamepad
feature to manifest,

00:04:24.320 --> 00:04:27.640
but be sure to always
set it to required false.

00:04:27.640 --> 00:04:29.240
This is a gotcha.

00:04:29.240 --> 00:04:32.500
It must be false, because
gamepads are accessories,

00:04:32.500 --> 00:04:35.270
and they might not be connected
at the time of purchase.

00:04:35.270 --> 00:04:37.270
Instead of requiring
this feature,

00:04:37.270 --> 00:04:38.770
check whether a
gamepad is connected

00:04:38.770 --> 00:04:42.430
when your game starts up.

00:04:42.430 --> 00:04:44.270
And here's something
else to be aware of.

00:04:44.270 --> 00:04:46.790
TV controllers
periodically save energy

00:04:46.790 --> 00:04:48.960
by going into sleep mode.

00:04:48.960 --> 00:04:52.300
When this happens, they
disconnect from the TV.

00:04:52.300 --> 00:04:54.810
To prevent this event from
interrupting your game,

00:04:54.810 --> 00:04:56.670
you can subscribe
to it by adding

00:04:56.670 --> 00:04:58.960
these lines to
your manifest, then

00:04:58.960 --> 00:05:01.630
you can handle it in your game.

00:05:01.630 --> 00:05:03.380
Check out this code
sample to learn all

00:05:03.380 --> 00:05:06.440
about handling input devices
and events on the TV,

00:05:06.440 --> 00:05:10.850
as well as how to handle
multiple connected game pads.

00:05:10.850 --> 00:05:15.980
There are also a couple display
considerations to keep in mind.

00:05:15.980 --> 00:05:18.740
First, the TV is always
in landscape mode.

00:05:18.740 --> 00:05:22.080
And second, you should
be aware of overscan.

00:05:22.080 --> 00:05:24.600
Overscan refers to the
tendency of some TVs

00:05:24.600 --> 00:05:26.870
to clip the outside
of the display.

00:05:26.870 --> 00:05:30.610
It's a historical problem that
isn't specific to Android.

00:05:30.610 --> 00:05:33.690
To handle it, just avoid placing
important screen elements,

00:05:33.690 --> 00:05:36.000
like a player's
score, within about 5%

00:05:36.000 --> 00:05:37.970
from the edge of the display.

00:05:37.970 --> 00:05:41.190
You can find more details
about overscan at this link.

00:05:41.190 --> 00:05:43.680
Now, one of the most
powerful parts of Android TVs

00:05:43.680 --> 00:05:45.690
is that they open
up new opportunities

00:05:45.690 --> 00:05:48.210
for local multiplayered gaming.

00:05:48.210 --> 00:05:50.540
For example, you can
use your Android phone

00:05:50.540 --> 00:05:55.190
as a second screen and as a game
controller for your TV game.

00:05:55.190 --> 00:05:57.820
You can enable this
technology, using an API called

00:05:57.820 --> 00:05:59.290
Nearby Connections.

00:05:59.290 --> 00:06:02.880
And you can see it in action
by watching this video.

00:06:02.880 --> 00:06:05.650
We have tons of great resources
to help you learn more, which

00:06:05.650 --> 00:06:07.970
can be found at these links.

00:06:07.970 --> 00:06:10.060
Thanks, very much, for
watching, and happy gaming.

00:06:13.916 --> 00:06:17.970
[MUSIC PLAYING]

