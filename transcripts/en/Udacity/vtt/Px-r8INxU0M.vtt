WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.000
So it's going to turn out that I can complete the definition of expand

00:00:04.000 --> 00:00:11.000
with just 2 lines if I use yielding generators and list comprehensions later on.

00:00:11.000 --> 00:00:13.000
Let's go take a look and see how this goes.

00:00:13.000 --> 00:00:17.000
Well, we're passed in a set of tokens like "a exp,"

00:00:17.000 --> 00:00:20.000
and now we're going to consider each possible position,

00:00:20.000 --> 00:00:24.000
the zeroth position which is a, and the first position which is exp,

00:00:24.000 --> 00:00:27.000
and then for each rule in the grammar, we want to see if it matches.

00:00:27.000 --> 00:00:30.000
Now remember, none of the rules in our grammar match a,

00:00:30.000 --> 00:00:33.000
so we're going to need our program to deal with that correctly.

00:00:33.000 --> 00:00:37.000
If tokens[pos] might be a the first time and exp the second time.

00:00:37.000 --> 00:00:41.000
We have to check and see if that matches the left-hand side

00:00:41.000 --> 00:00:45.000
of the grammar rule and remember--let's go back up to our encoding of the grammar--

00:00:45.000 --> 00:00:50.000
we always had the left-hand side as the zeroth element of this tuple,

00:00:50.000 --> 00:00:52.000
and the right-hand side was the first.

00:00:52.000 --> 00:00:55.000
We're going to check and see if these strings equal exp.

00:00:55.000 --> 00:01:00.000
Only if they do do we want to apply

00:01:00.000 --> 00:01:03.000
the transformation, so if we're in the right position,

00:01:03.000 --> 00:01:06.000
like we're in position 1, and we see an exp, great.

00:01:06.000 --> 00:01:10.000
Now what I need to do is for each of the rules in our grammar,

00:01:10.000 --> 00:01:13.000
yield or return one of those results.

00:01:13.000 --> 00:01:15.000
Conveniently, we've got this other for loop up here.

00:01:15.000 --> 00:01:19.000
For each rule in our grammar, I'm going to use this expression that I showed you before,

00:01:19.000 --> 00:01:21.000
and we take tokens 0 through the position.

00:01:21.000 --> 00:01:24.000
For us that's that a that's being unchanged.

00:01:24.000 --> 00:01:26.000
We're just carrying that along. I'm going to yield that.

00:01:26.000 --> 00:01:29.000
We're going to add to it the right-hand side of the rule,

00:01:29.000 --> 00:01:31.000
expression plus expression, expression minus expression,

00:01:31.000 --> 00:01:35.000
and then also any tokens that came afterward.

00:01:35.000 --> 00:01:37.000
We could have done a expression b, and we would have seen a b

00:01:37.000 --> 00:01:39.000
on the right-hand side of all of these.

00:01:39.000 --> 00:01:42.000
And actually, that's pretty much it, but here's the real power of this.

00:01:42.000 --> 00:01:45.000
Let's expand the depth up to 2 and start seeing

00:01:45.000 --> 00:01:48.000
what kind of answers we'll get, so now we're going to re-expand

00:01:48.000 --> 00:01:50.000
expression, expression, expression.

00:01:50.000 --> 00:01:55.000
There are 1, 2, 3, 4, 5, 6 places we could do this expansion.

00:01:55.000 --> 00:01:57.000
It's immense. It goes down quite a ways.

00:01:57.000 --> 00:02:00.000
But you can start seeing much more complicated expressions,

00:02:00.000 --> 00:02:03.000
like for example, here we have something that might be

00:02:03.000 --> 00:02:07.000
1 + 2 + 3, but one line below it

00:02:07.000 --> 00:02:09.000
1 + 2 - 3.

00:02:09.000 --> 00:02:13.000
Here we've got some uses of parentheses to help remove ambiguity,

00:02:13.000 --> 00:02:16.000
and you could imagine that I could go up to depth 3 and depth 4

00:02:16.000 --> 00:02:18.000
and start enumerating lots of strings in this grammar.

00:02:18.000 --> 00:02:21.000
In fact, wow, there's a huge amount of output,

00:02:21.000 --> 00:02:25.000
and that's why I was suggesting that this is not a very efficient way of doing things

00:02:25.000 --> 00:02:29.000
because I could enumerate a lot of strings of length 3 or 4 or 5

00:02:29.000 --> 00:02:34.000
or a lot of strings that have involved 3 or 4 or 5 rule rewrites.

00:02:34.000 --> 00:02:39.000
So we just saw a slow way to encode formal grammars in Python

00:02:39.000 --> 00:02:41.000
and enumerate strings in them.

00:02:41.000 --> 00:02:44.000
We will definitely need this power, but in our next exciting episode

00:02:44.000 --> 00:02:48.000
I'm going to teach you a more efficient way

00:02:48.000 --> 00:02:52.000
to encode grammar rules, like the rules for HTML in JavaScript

00:02:52.000 --> 00:02:56.000
that we will need for our web browser, and check to see if a string is valid

00:02:56.000 --> 00:02:59.000
without having to enumerate all possible strings first,

00:02:59.000 --> 00:03:02.000
because that might take, let's say, one more second than I have,

00:03:02.000 --> 00:03:05.000
so we're going to see very efficient ways to solve this problem.

00:03:05.000 --> 09:59:59.000
Super cool. Stick around, and I'll see you next time.

