WEBVTT
Kind: captions
Language: en

00:00:05.049 --> 00:00:07.070
Hi, I'm Chet Haase,
an engineer on the

00:00:07.070 --> 00:00:08.650
Android team at Google.

00:00:08.650 --> 00:00:10.710
I work on graphics and
animation, but today, I'm

00:00:10.710 --> 00:00:13.350
going to talk about something
a little bit different.

00:00:13.350 --> 00:00:16.480
Little bit of animation,
but it's more about

00:00:16.480 --> 00:00:17.150
doing things wrong.

00:00:17.150 --> 00:00:20.350
So this is the first in possibly
an ongoing series

00:00:20.350 --> 00:00:22.820
which I like to call You're
Doing It Wrong.

00:00:22.820 --> 00:00:25.260
So the demo I'm going to show
you today, this is really

00:00:25.260 --> 00:00:28.990
hacked up, as many of my demos
are, and very obvious, and you

00:00:28.990 --> 00:00:30.520
may not do things exactly
this way.

00:00:30.520 --> 00:00:34.130
But these are examples taken
from real apps shipping on the

00:00:34.130 --> 00:00:38.330
device, where we've seen
approaches like this or like

00:00:38.330 --> 00:00:41.610
this in a maybe much more
complex and not as

00:00:41.610 --> 00:00:43.650
obviously bad way.

00:00:43.650 --> 00:00:46.830
So it's important to sort of
take the main idea away from

00:00:46.830 --> 00:00:49.690
it, if not the exact
implementation.

00:00:49.690 --> 00:00:54.800
So in particular, I want to look
at ListView and the idea

00:00:54.800 --> 00:00:57.080
that there's a distinction
between the position of items

00:00:57.080 --> 00:01:00.330
on the screen and the views that
represent the content in

00:01:00.330 --> 00:01:00.880
those items.

00:01:00.880 --> 00:01:02.500
And you should understand
those differences very

00:01:02.500 --> 00:01:04.930
carefully for the following
reason.

00:01:04.930 --> 00:01:07.250
So let's take a look at
the demo, which I call

00:01:07.250 --> 00:01:08.910
ListViewDeletion.

00:01:08.910 --> 00:01:11.410
And we've got a list of
cheeses on the screen.

00:01:11.410 --> 00:01:14.620
We can select several of these,
and we want to select

00:01:14.620 --> 00:01:15.890
the ones that we're getting
rid of, so we

00:01:15.890 --> 00:01:17.510
click the Delete Selected.

00:01:17.510 --> 00:01:19.810
They fade out, so that's the
animation part of this thing.

00:01:19.810 --> 00:01:22.030
They fade out, and then we
remove them from the adapter.

00:01:22.030 --> 00:01:25.020
And the ListView updates, and
all things are wonderful.

00:01:25.020 --> 00:01:27.230
But what happens if we select
a few of these, and then we

00:01:27.230 --> 00:01:31.710
scroll down and, OK, we'll go
ahead and run the deletion.

00:01:31.710 --> 00:01:34.070
OK, let's run that one again.

00:01:34.070 --> 00:01:36.540
If I could slow-mo
this, I would.

00:01:36.540 --> 00:01:40.590
Notice that there are things
fading out on the screen that

00:01:40.590 --> 00:01:43.400
had nothing to do with the
ones that are checked.

00:01:43.400 --> 00:01:46.160
In fact, if I scroll all the
checked ones off the screen,

00:01:46.160 --> 00:01:48.060
nothing should fade out because
none of these items

00:01:48.060 --> 00:01:50.080
are actually selected.

00:01:50.080 --> 00:01:52.695
So they shouldn't be removed,
but they are.

00:01:52.695 --> 00:01:57.660
But actually, the content of
the items themselves is not

00:01:57.660 --> 00:01:58.370
being deleted.

00:01:58.370 --> 00:02:01.120
What's being deleted
are the views.

00:02:01.120 --> 00:02:03.820
So we fade out the view, and
then we delete the items.

00:02:03.820 --> 00:02:05.830
Well, the items that are being
deleted are not the views that

00:02:05.830 --> 00:02:06.480
are being faded out.

00:02:06.480 --> 00:02:07.690
So what's going on?

00:02:07.690 --> 00:02:10.979
So there's a concept in ListView
of view recycling.

00:02:10.979 --> 00:02:14.240
This is done because you can
have ListViews of enormous

00:02:14.240 --> 00:02:16.920
size with tons of views in them,
and we don't want to

00:02:16.920 --> 00:02:18.780
instantiate all of those
things and have them

00:02:18.780 --> 00:02:21.820
persistent in the state of the
activity at all times, and we

00:02:21.820 --> 00:02:24.100
don't want to have to update all
this stuff every time we

00:02:24.100 --> 00:02:25.010
redraw the ListView.

00:02:25.010 --> 00:02:27.930
So instead, we have active views
for the items that are

00:02:27.930 --> 00:02:29.680
on the screen at the time.

00:02:29.680 --> 00:02:33.330
And as views scroll off, those
views get recycled and used

00:02:33.330 --> 00:02:34.700
for other content
on the screen.

00:02:34.700 --> 00:02:35.460
It's very nice.

00:02:35.460 --> 00:02:38.360
It makes ListView very smooth to
fling and to scroll and to

00:02:38.360 --> 00:02:39.280
interact with.

00:02:39.280 --> 00:02:42.540
However, it means that if you
are assuming things about the

00:02:42.540 --> 00:02:46.140
specific views that are being
used in a ListView, you're

00:02:46.140 --> 00:02:49.030
doing it wrong.

00:02:49.030 --> 00:02:50.900
It's important to understand
that ListView--

00:02:50.900 --> 00:02:53.565
you should really think of it
as a holder of content, and

00:02:53.565 --> 00:02:56.730
that you need to really interact
with that content in

00:02:56.730 --> 00:03:00.130
terms of the adapter directly
and not necessarily the views

00:03:00.130 --> 00:03:02.060
on the screen, or else
you at least need to

00:03:02.060 --> 00:03:03.100
know what you're doing.

00:03:03.100 --> 00:03:04.720
So let's take a look at the
code and see what the

00:03:04.720 --> 00:03:06.740
application is doing wrong.

00:03:06.740 --> 00:03:09.380
So we have this ListViewDeletion
class.

00:03:09.380 --> 00:03:13.240
We create this array list
holding this large list of

00:03:13.240 --> 00:03:15.580
cheeses, terribly interesting
content.

00:03:15.580 --> 00:03:17.600
And then we have this set
on Click Listener

00:03:17.600 --> 00:03:18.430
for the Delete Button.

00:03:18.430 --> 00:03:21.560
So when you click the button, it
figures out what to delete

00:03:21.560 --> 00:03:24.790
and runs animations and removes
things appropriately.

00:03:24.790 --> 00:03:26.790
And then there's some code
down here where, when you

00:03:26.790 --> 00:03:29.230
actually checked on these
things so we can

00:03:29.230 --> 00:03:31.300
take a look at that.

00:03:31.300 --> 00:03:34.110
On Item Click Listener for the
check box, it basically adds

00:03:34.110 --> 00:03:38.470
these views to this list
of checked views there.

00:03:38.470 --> 00:03:39.980
So we track that.

00:03:39.980 --> 00:03:42.840
Now, this is kind of the hack
part of the demo, where we're

00:03:42.840 --> 00:03:45.700
actually tracking the views
that are actually being

00:03:45.700 --> 00:03:48.280
deleted for the purposes
of the demo.

00:03:48.280 --> 00:03:50.990
So we go through here, and we
go through the checked items

00:03:50.990 --> 00:03:52.870
of the ListView.

00:03:52.870 --> 00:03:58.810
And this is the default code,
which is bad, which is--

00:03:58.810 --> 00:04:03.280
OK, this check box to control
the behavior is not currently

00:04:03.280 --> 00:04:05.540
checked, so we're going to run
the code that we thought was

00:04:05.540 --> 00:04:09.000
obvious, and we're
going to fade out

00:04:09.000 --> 00:04:09.920
views and remove them.

00:04:09.920 --> 00:04:13.570
So first of all, we're going to
post this delayed thing to

00:04:13.570 --> 00:04:15.670
actually remove it from the
adapter after the fade

00:04:15.670 --> 00:04:16.519
animation is done.

00:04:16.519 --> 00:04:18.149
We know that the animation
is going to take 300

00:04:18.149 --> 00:04:19.200
milliseconds.

00:04:19.200 --> 00:04:22.820
The actual animation is run down
here, where we iterate

00:04:22.820 --> 00:04:24.940
through the checked
views list.

00:04:24.940 --> 00:04:27.220
And for each one of those,
we grab the view that was

00:04:27.220 --> 00:04:30.130
checked, and we run an
animation on it.

00:04:30.130 --> 00:04:33.500
This is using the view property
animator API, which

00:04:33.500 --> 00:04:35.830
was introduced in
the 3.2 release.

00:04:35.830 --> 00:04:39.740
So we say animate the alpha
property to 0, and when you

00:04:39.740 --> 00:04:42.300
finish, let's restore the alpha
property because that's

00:04:42.300 --> 00:04:42.870
good practice.

00:04:42.870 --> 00:04:45.520
Otherwise, the thing
stays invisible.

00:04:45.520 --> 00:04:48.470
So all of that looks good except
for the part where, if

00:04:48.470 --> 00:04:50.990
you scrolled off the screen,
that view got recycled and

00:04:50.990 --> 00:04:53.240
reused by completely
different content.

00:04:53.240 --> 00:04:56.150
So now we're going to fade out
the view, which has nothing to

00:04:56.150 --> 00:04:58.780
do with the content that was
checked, which is now sitting

00:04:58.780 --> 00:05:00.080
off the screen.

00:05:00.080 --> 00:05:00.930
Bad way to go.

00:05:00.930 --> 00:05:05.060
If we go back and look at the
demo again, and we say Use

00:05:05.060 --> 00:05:08.230
Positions instead of Use Views,
and we check a bunch of

00:05:08.230 --> 00:05:11.950
things on here, and then we
run this thing, well, of

00:05:11.950 --> 00:05:13.230
course, it does the right thing
when they're on the

00:05:13.230 --> 00:05:13.890
screen anyway.

00:05:13.890 --> 00:05:18.460
But if we scroll these things
off the screen, then it fades

00:05:18.460 --> 00:05:21.340
out only the ones that are
actually selected that are on

00:05:21.340 --> 00:05:22.070
the screen.

00:05:22.070 --> 00:05:25.270
And that logic works
as follows.

00:05:25.270 --> 00:05:28.040
So in here, we go into
the else clause.

00:05:28.040 --> 00:05:30.050
First of all, we clear this
thing so that we're not going

00:05:30.050 --> 00:05:32.010
to run animations on these
because we have a different

00:05:32.010 --> 00:05:34.755
way of managing our animations
in this approach.

00:05:34.755 --> 00:05:37.550
We get the position on the
screen, so we can get the

00:05:37.550 --> 00:05:40.840
first visible position, and then
everything after that is

00:05:40.840 --> 00:05:42.050
numbered after that position.

00:05:42.050 --> 00:05:49.000
So we can say, OK, this is the
first visible position, and

00:05:49.000 --> 00:05:50.590
then we iterate through
it, so this is the

00:05:50.590 --> 00:05:51.270
number of checked items.

00:05:51.270 --> 00:05:52.600
So we're actually iterating
through the

00:05:52.600 --> 00:05:53.890
ListView items here.

00:05:53.890 --> 00:05:56.850
So we can get the position of
the ListView item itself, the

00:05:56.850 --> 00:05:59.570
position of the first visible
position, and then figure out

00:05:59.570 --> 00:06:01.480
whether that thing is
actually on screen.

00:06:01.480 --> 00:06:04.810
And if it's not on screen, don't
run an animation at all.

00:06:04.810 --> 00:06:05.930
Just remove the thing.

00:06:05.930 --> 00:06:10.080
In fact, we should remove it
after we're done so that it

00:06:10.080 --> 00:06:14.170
doesn't blink the list and move
stuff around at the time.

00:06:14.170 --> 00:06:17.040
But we basically use that as a
trigger to determine whether

00:06:17.040 --> 00:06:20.240
it's on screen, therefore run an
animation on the thing, or

00:06:20.240 --> 00:06:22.420
it's off screen, don't bother
with the animation, just

00:06:22.420 --> 00:06:24.690
remove it when all the
animations are done.

00:06:24.690 --> 00:06:27.670
So if it is on screen, then we
do a similar animation as we

00:06:27.670 --> 00:06:28.590
did before.

00:06:28.590 --> 00:06:31.090
We animate the alpha property
on that view with an End

00:06:31.090 --> 00:06:34.850
action to restore alpha, and
after we've restored alpha,

00:06:34.850 --> 00:06:37.300
then we remove it from
the adapter.

00:06:37.300 --> 00:06:39.430
So all the animation code,
before it was good.

00:06:39.430 --> 00:06:42.260
What wasn't good was that we
were using a view that was

00:06:42.260 --> 00:06:45.530
determined at check time, not
at the time when we were

00:06:45.530 --> 00:06:48.380
actually telling the system to
delete, and we knew what was

00:06:48.380 --> 00:06:50.160
actually on the screen
at the time.

00:06:50.160 --> 00:06:53.120
So the takeaway here is be aware
of the position of your

00:06:53.120 --> 00:06:55.230
items on the screen, be aware
that your views can be

00:06:55.230 --> 00:06:57.880
recycled, and be aware that
there is a really large

00:06:57.880 --> 00:07:00.930
disconnect, potentially, between
those positions and

00:07:00.930 --> 00:07:04.030
the views and the data
underneath that the views

00:07:04.030 --> 00:07:06.600
happen to be displaying
at any point in time.

00:07:06.600 --> 00:07:07.850
So thanks.

