WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.000
Now let's talk about the design of the function, Play Pig,

00:00:03.000 --> 00:00:05.000
which plays a single game of Pig.

00:00:05.000 --> 00:00:09.000
We decided that this is a two player game, player "A" and "B,"

00:00:09.000 --> 00:00:12.000
and we decided that we're going to represent this as a function.

00:00:12.000 --> 00:00:15.000
At some point in the future we might want to allow multiplayer games

00:00:15.000 --> 00:00:19.000
with more than two players, but we're not going to want to worry about that for now.

00:00:19.000 --> 00:00:22.000
So let's make a list of what the function has to do.

00:00:22.000 --> 00:00:25.000
It has to keep score--it needs the score for player "A"

00:00:25.000 --> 00:00:28.000
and for player "B" and for pending.

00:00:28.000 --> 00:00:30.000
It has to take turns.

00:00:30.000 --> 00:00:32.000
It has to figure out whose turn it is, and that that turn

00:00:32.000 --> 00:00:35.000
keeps going until they hold or pig out.

00:00:35.000 --> 00:00:39.000
Another way to say that is, the score for "A," the score for "B,"

00:00:39.000 --> 00:00:43.000
the pending, and whose turn it is--

00:00:43.000 --> 00:00:47.000
all of that is managing the current state.

00:00:47.000 --> 00:00:50.000
It has to call the strategy functions, so "A" and "B"

00:00:50.000 --> 00:00:53.000
are going to be strategy functions that we pass in.

00:00:53.000 --> 00:00:57.000
It has to keep track of the current state, pass that state

00:00:57.000 --> 00:01:01.000
to the strategy function for the appropriate player whose turn it is,

00:01:01.000 --> 00:01:05.000
and then that will give back an action, either roll or hold.

00:01:05.000 --> 00:01:10.000
Then it has to do the action, the roll or hold, and that will generate a new state

00:01:10.000 --> 00:01:12.000
and we have to keep track of the state we're in.

00:01:12.000 --> 00:01:14.000
But there's one more trick here--when we were doing

00:01:14.000 --> 00:01:17.000
a normal search, that was it.

00:01:17.000 --> 00:01:22.000
We had to figure out what the actions were. Apply the action.

00:01:22.000 --> 00:01:26.000
When you get to the next state, there's a single successor for each action.

00:01:26.000 --> 00:01:29.000
But here there's multiple successors for an action.

00:01:29.000 --> 00:01:32.000
And so we have to do one more thing, which is roll the die,

00:01:32.000 --> 00:01:35.000
and that disambiguates the action of rolling

00:01:35.000 --> 00:01:38.000
and makes it not generate a set of possible states,

00:01:38.000 --> 00:01:43.000
but the action plus the die--that generates a single state.

00:01:43.000 --> 00:01:46.000
I want you to write the function "Play Pig,"

00:01:46.000 --> 00:01:49.000
which takes two strategies as input,

00:01:49.000 --> 00:01:51.000
plays the game, keeping track of what's going on--

00:01:51.000 --> 00:01:54.000
rolling the dice as necessary, updating the state,

00:01:54.000 --> 00:01:58.000
and then when one player wins, we turn that player either "A" or "B."

00:01:58.000 --> 00:02:02.000
One thing I note is--I don't have any tests here.

00:02:02.000 --> 00:02:05.000
The reason is it's hard to test this.

00:02:05.000 --> 00:02:07.000
It's hard to write a deterministic test because

00:02:07.000 --> 00:02:09.000
part of playing the game is rolling the die,

00:02:09.000 --> 00:02:11.000
and that won't be the same every time.

00:02:11.000 --> 09:59:59.000
We'll talk in a bit about how to test programs like this.

