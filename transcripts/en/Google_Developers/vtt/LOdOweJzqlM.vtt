WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:07.741
&gt;&gt; NORTH: ...have told to me people have written
too much code that relies on the way we currently

00:00:07.741 --> 00:00:09.190
do things. It's almost an opportunity now
that the Google Wave product doesn't need

00:00:09.190 --> 00:00:13.900
to--you don't need to worry. It's difficult
for us to make changes because the Google

00:00:13.900 --> 00:00:18.870
Wave product is huge, and making changes is
a lot of work, but we're not--you guys have

00:00:18.870 --> 00:00:23.700
nothing to worry about that. That is an opportunity
to make the kind of changes that Christian

00:00:23.700 --> 00:00:28.980
was talking about. But, you know, some people
have already written a lot of code that works

00:00:28.980 --> 00:00:34.370
with Wave as it is now, and I guess it's a
discussion that we all have to have. Can you

00:00:34.370 --> 00:00:36.220
guys hear me okay? I know my voice is not
as strong as it might have been on Monday.

00:00:36.220 --> 00:00:37.220
Can you hear me at the back?
&gt;&gt; We can hear you bit [INDISTINCT]

00:00:37.220 --> 00:00:42.330
&gt;&gt; NORTH: A bit more. Sure.
&gt;&gt; Can you just hold it?

00:00:42.330 --> 00:00:54.489
&gt;&gt; NORTH: I don't like holding it. So, I'm
going to give a short overview of A client/server

00:00:54.489 --> 00:00:59.250
protocol for Wave. I think--this is--lots
of people have sort of asked about client/server

00:00:59.250 --> 00:01:04.350
protocols and want to implement their own
Wave clients all on your phones and other

00:01:04.350 --> 00:01:12.970
devices. And so, I'm going to talk about A
client/server protocol for Wave. This is not

00:01:12.970 --> 00:01:16.190
the one that's currently implemented, and
I don't think we should stick with the one

00:01:16.190 --> 00:01:19.400
that's currently implemented probably because
it's not fully implemented because it was

00:01:19.400 --> 00:01:25.400
too tricky. But this is--so this is based
on a design I sent out to the list a few weeks

00:01:25.400 --> 00:01:34.010
ago, and there's a few more--a few bits of,
you know, discussion at the end. And

00:01:34.010 --> 00:01:38.409
of course, stick your hand up if you have
questions at any point while I'm talking.

00:01:38.409 --> 00:01:43.950
Okay. So A client/server protocol, the motivation
is a protocol that allows users to interact

00:01:43.950 --> 00:01:47.759
live with Wave. Few many users to interact
live with Wave so they can, you know, type

00:01:47.759 --> 00:01:54.470
and see other people's typing live, make formatting
changes, you know, generally you tape the

00:01:54.470 --> 00:01:58.790
conversation. And since the live protocol,
the data API provides another live protocol

00:01:58.790 --> 00:02:02.590
which means it doesn't sort of receive live
operations. You get snapshots of Waves and

00:02:02.590 --> 00:02:08.959
I think--I think that's probably the way we
intend to leave it. All right. There was a

00:02:08.959 --> 00:02:13.510
question a while--maybe on Monday about whether
we're going to add live stuff to the data

00:02:13.510 --> 00:02:17.900
API. I think the answer is probably no, it
would just turn in to another thing like the

00:02:17.900 --> 00:02:21.811
client/server protocol if we did that. So
I think we should have the client/server protocol

00:02:21.811 --> 00:02:26.060
for live, and the data API for not live, and
then you--being not live means you can be

00:02:26.060 --> 00:02:30.770
much more lightweight. This protocol is quite
heavyweight to implement in a client. Okay,

00:02:30.770 --> 00:02:36.590
so I'll be talking about the Wavey bit of
the protocol, the bit that interacts live

00:02:36.590 --> 00:02:41.370
with Waves, and some of those other bits that
some client will need to be fully functional;

00:02:41.370 --> 00:02:47.349
things like authentication which is just assumed
here, interacting with search, with contact

00:02:47.349 --> 00:02:53.750
list, that kind of stuff. Much of that would
be very much more system dependent, not something

00:02:53.750 --> 00:02:57.180
that we could standardize on so much. It would
depend a lot on which back ends are talking

00:02:57.180 --> 00:03:05.440
to which front ends. Yeah, so I'm sorry, I'm
not going talk about those protocols yet.

00:03:05.440 --> 00:03:10.620
Perhaps they are something we can agree later
on. So for history, the Wave in a Box currently

00:03:10.620 --> 00:03:15.769
and Google Wave--if you've gone and reverse
engineered our over the wire JSON--implements

00:03:15.769 --> 00:03:22.519
of protocol that presents a view of a Wave
multiplexed over a single connection. So when

00:03:22.519 --> 00:03:25.830
you open a Wave, you get a bunch of snapshots
down the wire, one per the wavelet. Then you

00:03:25.830 --> 00:03:30.159
get a marker that says, "That's it for snapshots,"
although it doesn't really mean too much.

00:03:30.159 --> 00:03:34.810
And then for each wavelet that is open, you
can then receive deltas, and so you just tell

00:03:34.810 --> 00:03:39.560
which Wavelet they are from the wavelet ID
associated with the delta. And then you could

00:03:39.560 --> 00:03:43.201
submit deltas back to those wavelets. And
your view has a channel ID and so when you

00:03:43.201 --> 00:03:49.230
submit a delta, you say it's associated with
this view. And then, as a service to you,

00:03:49.230 --> 00:03:54.330
the front end that you're talking to drops
your own deltas from the view so you don't

00:03:54.330 --> 00:04:00.069
see them echoed back to you. So this was all
implemented--multiplexed over one connection.

00:04:00.069 --> 00:04:04.879
The tricky bits are all come to do when we
reconnect, so if your browser connection drops

00:04:04.879 --> 00:04:10.790
out, you go offline, something like that.
We tried to have a seamless reconnection when

00:04:10.790 --> 00:04:14.480
you come back online. The browser channels
and so on are relatively flaky. They seem

00:04:14.480 --> 00:04:19.951
to sort of drop out even on wide connections
periodically, but we didn't want that to sort

00:04:19.951 --> 00:04:25.430
of affect you or your data. So when you reconnect,
you used to come back with a big list of known

00:04:25.430 --> 00:04:29.569
versions of wavelets. You said, "Look, I saw
this wavelet at your version and then I had

00:04:29.569 --> 00:04:35.229
this particular distinction or hash at that
time." And then when you reconnect, the server

00:04:35.229 --> 00:04:39.949
will do a bunch of work to try and find a
synchronization point and then restart everything

00:04:39.949 --> 00:04:44.360
at that point. So lots of those ideas are
carried over in the new protocol in which

00:04:44.360 --> 00:04:47.979
they'll try to do it all over one connection
that made it very complex on the server's

00:04:47.979 --> 00:04:54.509
side, and sort of inhibits scalability and
so on. So a client has these sort of four

00:04:54.509 --> 00:04:58.969
main requirements they use to discover what
wavelets are in a Wave. If some search says,

00:04:58.969 --> 00:05:03.930
"Hey, you have Wave X in your inbox," they
need to discover what wavelets are in that

00:05:03.930 --> 00:05:08.349
Wave and be able to, you know, fetch the current
state of them. And then for each of those

00:05:08.349 --> 00:05:18.319
wavelets, then you'd be able to stream live
deltas and submit deltas, again, live. So,

00:05:18.319 --> 00:05:22.909
we break this sort of protocol into four services.
The server provides and the client can sort

00:05:22.909 --> 00:05:26.960
of use them in any order, although there's
an obvious order that makes sense for a simple

00:05:26.960 --> 00:05:34.300
web client use case. So, fetching is the first
thing that a client can do. So the client

00:05:34.300 --> 00:05:37.789
comes with the Wave ID and says, "Give me
the Wave, what's on this Wave ID," and the

00:05:37.789 --> 00:05:41.879
server responds with this list of snapshots
of those wavelets at the current version,

00:05:41.879 --> 00:05:49.119
the latest version the server knows. And then
to support reconnection, the client can provide

00:05:49.119 --> 00:05:53.539
a list of known wavelet versions saying, "I
saw a--I know that this wavelet is in the

00:05:53.539 --> 00:05:58.499
Wave and I last saw that version 10, say.
If you've got the Wave and version 10 is the

00:05:58.499 --> 00:06:01.629
latest version, I don't need another snapshot.
I've already got it." So if you've been working

00:06:01.629 --> 00:06:05.129
with the Wave live and your connection drops
out, you still have local state. If that local

00:06:05.129 --> 00:06:09.309
state is still valid, we don't need to send
you a new snapshot over the wire. So that's

00:06:09.309 --> 00:06:13.990
what these known wavelet versions are. And--but
if the wavelet has sort of moved on since

00:06:13.990 --> 00:06:22.020
that point, then we'll send you a new snapshot.
Okay, so that's the fetch part. Oh, and then

00:06:22.020 --> 00:06:26.279
a way--all of this, by the way, is a--I'm
presenting this as a protocol that's sort

00:06:26.279 --> 00:06:29.939
of transport agnostic. I'm not showing you
which bits go over the wire. This is the kind

00:06:29.939 --> 00:06:34.569
of protocol that goes over the WebSocket or
the, you know, the Socket.IO library. You

00:06:34.569 --> 00:06:41.949
could put it over some other, you know, browser
channel, something else--some other message-based

00:06:41.949 --> 00:06:44.509
connected channel.
&gt;&gt; I have a quick question.

00:06:44.509 --> 00:06:48.080
&gt;&gt; NORTH: Yeah.
&gt;&gt; This is somewhat the question of [INDISTINCT].

00:06:48.080 --> 00:06:53.960
Why would--why--you mean there are various
reasons why multiple wavelets inside the Waves

00:06:53.960 --> 00:07:00.939
are of sort of connected?
What thing [INDISTINCT] is the reason to have

00:07:00.939 --> 00:07:04.929
multiple wavelets [INDISTINCT]?
&gt;&gt; NORTH: So we have two, big use cases for

00:07:04.929 --> 00:07:12.059
them that are still pretty valid. One is the
per-user data that we store in the Wave. So

00:07:12.059 --> 00:07:16.709
that's a wavelet that's private to each user
who's viewing the Wave. So, an alternative

00:07:16.709 --> 00:07:22.580
to that is to store that in some non-Wave
data store somewhere, but using Wave benefits

00:07:22.580 --> 00:07:26.479
from reuse of this client-server protocol,
the reconnection, the seamless synchronization

00:07:26.479 --> 00:07:31.749
and so on. The other is private replies and
that was kind of the first use case that drove

00:07:31.749 --> 00:07:36.639
separate wavelets. So a private reply is a
wavelet with a different participant list.

00:07:36.639 --> 00:07:39.150
And so your view might include some private
replies.

00:07:39.150 --> 00:07:42.349
&gt;&gt; The Wave in a Box tends to dispose more
private replies?

00:07:42.349 --> 00:07:48.119
&gt;&gt; NORTH: Yes. I don't think the--so the protocol
right now doesn't and--but yes, there's nothing

00:07:48.119 --> 00:07:54.039
fundamental. It's just a matter of coding,
some more coding for it to support private

00:07:54.039 --> 00:08:03.289
replies.
&gt;&gt; [INDISTINCT] providing a different structure,

00:08:03.289 --> 00:08:08.782
a semi-structure [INDISTINCT]. The user data
gets stored in the wavelet. Is it going to

00:08:08.782 --> 00:08:09.782
be stored the wavelets [INDISTINCT] away?
&gt;&gt; NORTH: I think it would still be stored

00:08:09.782 --> 00:08:11.209
in the wavelet. It just wouldn't be a wavelet
that was made of documents. We'd have some

00:08:11.209 --> 00:08:14.709
other type of thing that you can have in a
wavelet which was maybe, you know, a native

00:08:14.709 --> 00:08:23.699
map, an OT map or something like that. Okay,
so this is a caller response fetch. It's a

00:08:23.699 --> 00:08:29.089
one-off, so there's one weakness in this protocol
at the moment and I'm going to sum--sort of

00:08:29.089 --> 00:08:32.329
first describing a simple protocol and then
I'll talk about a couple of things that we

00:08:32.329 --> 00:08:40.909
can extend to make it better. So this fetch
is just a call and response. And that means

00:08:40.909 --> 00:08:43.870
that if a new wavelet shows up in the Wave
at some point while you're viewing it, you

00:08:43.870 --> 00:08:49.240
won't find out about it until you do another
request. But later on, we can extend this

00:08:49.240 --> 00:08:53.759
to provide a streaming view of snapshots and
the new wavelets, like a private reply, will

00:08:53.759 --> 00:09:02.829
show up live. So then, per wavelet, we have
a delta channel. So this is the channel upon

00:09:02.829 --> 00:09:07.829
which the client receives the live deltas.
So the request to open a wavelet channel is

00:09:07.829 --> 00:09:13.050
simply the wavelet name, wavelet ID, and then
a hashed version that wish to begin the channel.

00:09:13.050 --> 00:09:17.851
So if you received a snapshot from your fetch,
your snapshot might be at version 20 and you

00:09:17.851 --> 00:09:21.399
want to open the--open the delta channel at
version 20, so the fist delta you get down

00:09:21.399 --> 00:09:27.940
the channel applies at version 20. And so
then, the server will sort of scan back through

00:09:27.940 --> 00:09:30.930
the deltas it's already received as part of
your--it must be at least of that version

00:09:30.930 --> 00:09:34.670
for it to have sent you that snapshot and
resend you anything to help you get up to

00:09:34.670 --> 00:09:40.550
date and then be streaming live. So this is
what we call a streaming RPC. So it has one

00:09:40.550 --> 00:09:46.920
request and then multiple responses. So the
first response is a channel ID, which is used

00:09:46.920 --> 00:09:53.440
to identify the channel for later on when
we're submitting deltas, serving a similar

00:09:53.440 --> 00:09:58.930
purpose to the current view protocol and then
future responses are either a delta and/or

00:09:58.930 --> 00:10:04.040
a commit notice. So the delta comes down with
all the kind of--it's a bunch of ops and then

00:10:04.040 --> 00:10:07.041
a bunch of metadata or about the delta like
the version it's applying at which you can

00:10:07.041 --> 00:10:11.759
check as your current version, the author
of the timestamp that reach the server and

00:10:11.759 --> 00:10:18.020
so on. A commit notice, it was--so it's piggybacked
on top of this--on top of this response and

00:10:18.020 --> 00:10:24.459
that says that some wavelet or a bunch of
wavelets--it might be one wavelet at a time--has

00:10:24.459 --> 00:10:31.189
been persistent to discs. So you might be
aware that the Wave server, as deltas are

00:10:31.189 --> 00:10:34.930
received and transformed and applied--sorry,
I missed Soren's talk yesterday; this was

00:10:34.930 --> 00:10:38.811
probably mentioned--it doesn't write them
to discs right away. Did you go over this?

00:10:38.811 --> 00:10:43.880
Yeah. So when they do eventually get written
into disc, this message comes down the client

00:10:43.880 --> 00:10:47.870
server protocol to let the client know that
if it's holding any state just so that it

00:10:47.870 --> 00:10:51.791
can do a reconnection at some point, this
particular version has hit disc and you can

00:10:51.791 --> 00:10:54.790
drop any [INDISTINCT] before that version.
You can always fetch it again from the server.

00:10:54.790 --> 00:11:04.269
Okay, so you get one delta channel--the client
will open one delta channel per wavelet. Then

00:11:04.269 --> 00:11:09.250
for submitting deltas, the client must submit
a delta against the known server version.

00:11:09.250 --> 00:11:14.569
So a known server version is a version the
client knows the server saw. So if you receive

00:11:14.569 --> 00:11:20.480
a delta down the delta channel and you don't
have any kind of outstanding submits against

00:11:20.480 --> 00:11:24.710
the server, then the delta you receive gives
you a known server version. Or if you receive

00:11:24.710 --> 00:11:28.880
a snapshot, then that's a known server version.
So if you imagine, there's multiple clients

00:11:28.880 --> 00:11:33.459
all submitting deltas to the server at the
same time, then the server gets them in some

00:11:33.459 --> 00:11:38.459
order, but any individual client doesn't know
what order they reach the server and doesn't

00:11:38.459 --> 00:11:42.680
know which order its own deltas are going
to leave with those until it receives things

00:11:42.680 --> 00:11:48.560
back down the wire from the server. So, mainly,
this prevents the client--the main effect

00:11:48.560 --> 00:11:54.110
of this is it prevents the client from submitting
two deltas at a time before receiving an acknowledgement

00:11:54.110 --> 00:12:00.889
of the first one. And this--we have this constraint.
This gives us two great advantages. One is

00:12:00.889 --> 00:12:07.079
that it massively reduces the resources required
by the Wave server to do OT. If you could

00:12:07.079 --> 00:12:13.029
submit arbitrarily many deltas at a time before
waiting for acknowledgement, the server would

00:12:13.029 --> 00:12:19.769
need any memory representation per client
of the whole Wave in order for it to be able

00:12:19.769 --> 00:12:24.329
to make sense of your second delta after your
first one. But if it's any one at a time,

00:12:24.329 --> 00:12:29.209
then the server only needs one in memory representation.
And so that's what we mean by known server

00:12:29.209 --> 00:12:34.149
version. It's a state of the wavelet the server
definitely saw. The other is that it auto-throttles

00:12:34.149 --> 00:12:39.810
the client server protocol as you're buffering
up local, you know, typing changes waiting

00:12:39.810 --> 00:12:46.220
for--waiting for your acknowledgement. So
submitting deltas, you send the wavelet ID

00:12:46.220 --> 00:12:51.629
that the delta replies to, the channel ID
that you got from the open delta channel's

00:12:51.629 --> 00:12:57.819
first message, and then the actual delta itself.
And in response, I've left all the error responses

00:12:57.819 --> 00:13:02.120
out. All of these have, like, a failure response.
But in a successful case, you get the count

00:13:02.120 --> 00:13:06.249
of ops applied, which should match the--with
the current RT, that should always match the

00:13:06.249 --> 00:13:11.970
number of ops that run the delta that you
sent, the hashed version of the wavelet after

00:13:11.970 --> 00:13:14.040
your delta replied, and the timestamp at which
you applied. Okay, now...

00:13:14.040 --> 00:13:15.430
&gt;&gt; Does that imply that if you have two plans
to submit deltas on the same Wave, the same

00:13:15.430 --> 00:13:16.430
wavelet...
&gt;&gt; NORTH: Yup.

00:13:16.430 --> 00:13:19.140
&gt;&gt; ...then that [INDISTINCT] give it to the
clients that the client can submit a delta

00:13:19.140 --> 00:13:41.829
against the earlier version or a new version
that's actually the snapshot version itself

00:13:41.829 --> 00:13:43.309
on the server?
&gt;&gt; NORTH: In theory, it kind of--yes, a client

00:13:43.309 --> 00:13:49.199
can submit against--tend to submit against
an arbitrarily old version and it's the server's

00:13:49.199 --> 00:13:56.129
job to transform it up past the entire history.
In practice, we intend to limit the client's

00:13:56.129 --> 00:14:00.600
ability to do that. It's a big workload on
the server to develop service opportunity.

00:14:00.600 --> 00:14:05.399
So in practice, the Wave server may reject
your delta if it was too old and tell you--tell

00:14:05.399 --> 00:14:17.889
you, the client, to do the job of transforming
it up to the current version and try again.

00:14:17.889 --> 00:14:24.649
So what was some stuff I missed out? So, all
right, so that's--I mean, as a service to

00:14:24.649 --> 00:14:33.649
you, again, when you submit the--on your delta
channel, the server will omit deltas that

00:14:33.649 --> 00:14:38.170
it knows are yours. So if you send a bunch
of deltas and some other clients sends a bunch

00:14:38.170 --> 00:14:40.839
of deltas, you don't need to receive your
own deltas back because you know what they

00:14:40.839 --> 00:14:45.069
look like. The acknowledgement that gives
you this version here tells you when they

00:14:45.069 --> 00:14:51.610
applied, so what--how they were interweaved
with other client's deltas. And so, the concurrency

00:14:51.610 --> 00:14:59.720
control object inside the client's stack can
here now insert the right--can do transform

00:14:59.720 --> 00:15:06.029
which is the right part of it once yours has
been--once you--once the delta's coming down

00:15:06.029 --> 00:15:10.440
the stream, catch up with the hashed version
from your acknowledgement, you don't know--no

00:15:10.440 --> 00:15:14.170
longer need to transform past that client
delta. Question, yes.

00:15:14.170 --> 00:15:17.849
&gt;&gt; Yeah. A question about the kind of op supplies...
&gt;&gt; NORTH: Yeah.

00:15:17.849 --> 00:15:20.690
&gt;&gt; ...Going back in the response. It seems
like the practice into your [INDISTINCT] with

00:15:20.690 --> 00:15:22.110
a number of your--the delta.
&gt;&gt; NORTH: Yeah.

00:15:22.110 --> 00:15:27.582
&gt;&gt; Is there any intent there that would be
less than the number of the--with the delta?

00:15:27.582 --> 00:15:31.170
&gt;&gt; NORTH: So, it's possible for operations
to transform away completely. Let me think.

00:15:31.170 --> 00:15:38.529
&gt;&gt; I was thinking more on the case of like
if one of those operations was actually ended

00:15:38.529 --> 00:15:43.320
by the server?
&gt;&gt; NORTH: Sorry, the server will accept or

00:15:43.320 --> 00:15:48.769
reject the delta in its entirety. So, if anything
does it, fails to apply from a delta, it will

00:15:48.769 --> 00:15:50.169
be--the whole thing will be rejected.
&gt;&gt; Back into zero?

00:15:50.169 --> 00:15:55.420
&gt;&gt; NORTH: Yeah. It is possible for ops to
transform into nothing and so, it was our

00:15:55.420 --> 00:16:01.930
intention that this--and you could have fewer
ops applied than the number that you sent.

00:16:01.930 --> 00:16:06.139
In practice, we didn't finish the coding to
have the client appropriately handle that

00:16:06.139 --> 00:16:10.180
case. And so, currently, if an op transforms
to nothing, we leave a no op in there which

00:16:10.180 --> 00:16:17.910
increments the version number, but has no
effect. So, I guess in future, the count could

00:16:17.910 --> 00:16:22.100
be smaller than the number ops that you sent,
but currently, that never happens.

00:16:22.100 --> 00:16:25.869
&gt;&gt; I was wondering and sorry, if you get the
response back, just one narrow response, and

00:16:25.869 --> 00:16:27.290
you don't supply successfully...
&gt;&gt; NORTH: Yeah.

00:16:27.290 --> 00:16:31.009
&gt;&gt; ...I was just mentioning [INDISTINCT] client
and I'm not really sure what I do with that

00:16:31.009 --> 00:16:39.069
number, I'd probably stir it out. Unlike,
does it really, you know, it seems like to

00:16:39.069 --> 00:16:42.790
get rid of the [INDISTINCT].
&gt;&gt; NORTH: Once--so, getting rid of it would

00:16:42.790 --> 00:16:49.139
mean removing the possibility of ops transforming
to nothing and I guess we just haven't that

00:16:49.139 --> 00:16:52.410
call yet.
&gt;&gt; Well, what can you do with that information?

00:16:52.410 --> 00:16:57.180
&gt;&gt; NORTH: So, the concurrency control object
inside the--excuse me, inside the client's

00:16:57.180 --> 00:17:01.410
stack is keeping track of the version number
of various things like where are the outgoing

00:17:01.410 --> 00:17:05.420
op was intended to apply, where it ends up
applying, and where we're up to in the incoming

00:17:05.420 --> 00:17:10.440
delta stream. And so, that version number
is a count of ops and so it needs to know

00:17:10.440 --> 00:17:15.990
if an ops are going to--if--sorry. Delta's
going to come--start coming down the stream

00:17:15.990 --> 00:17:20.209
with your number that doesn't line up to where
we think a delta boundary is, it's going to

00:17:20.209 --> 00:17:24.409
freak out. So, it needs to know where delta
boundaries are, you know, how many ops were

00:17:24.409 --> 00:17:32.860
in each delta. Probably the best--probably
an appropriate case will just be to drop that

00:17:32.860 --> 00:17:38.580
number and--but that will be giving up on
the transforming of ops, a waste and I think

00:17:38.580 --> 00:17:47.610
I'm not sure--it's something to think about.
Okay. So, all right, let's move on. A couple

00:17:47.610 --> 00:17:52.020
of other things. So, wavelet creation my--the
designer posted a few weeks ago had a wavelet

00:17:52.020 --> 00:17:57.760
creation call, that's not what Google Wave
does. And that sort of flip flop back to thinking

00:17:57.760 --> 00:18:04.780
we should get rid the explicit wavelet creation
again. So, wavelet creation then becomes implicit,

00:18:04.780 --> 00:18:08.910
you just submit a delta at version zero and
whoever gets the first delta on a wavelet

00:18:08.910 --> 00:18:14.770
owns it. There's just a couple of downsides.
One is that we need a bunch of policing of

00:18:14.770 --> 00:18:20.080
deltas in the server, so certain wavelets
are sort of--have well-known names, at least

00:18:20.080 --> 00:18:26.080
in our current protocols. So for example,
you use it on a wavelet has a well-known Wave,

00:18:26.080 --> 00:18:31.420
your client knows how to create it and knows
where to expect it to store your--place a

00:18:31.420 --> 00:18:35.179
red state. And so, your client expects to
be able to create this Wave if it doesn't

00:18:35.179 --> 00:18:40.630
exist. So therefore, the server mustn't let
any other client create that wavelet maliciously

00:18:40.630 --> 00:18:44.429
or accidentally on your behalf because then
you wouldn't be a participant on it and you

00:18:44.429 --> 00:18:50.809
couldn't store any per-user data. So, there
are few other--it requires this kind of policing

00:18:50.809 --> 00:18:56.650
inside the server, which would otherwise,
of course, be policing logic inside a create

00:18:56.650 --> 00:19:02.730
wavelet call. It's right in the date--right
in the depths of delta transmission. But in

00:19:02.730 --> 00:19:08.800
any case, implicit delta creation is--has
many benefits. Of course, it's very obvious

00:19:08.800 --> 00:19:12.950
that the state of a wavelet is entirely defined
by the deltas that apply to it. If there were

00:19:12.950 --> 00:19:17.210
some delta creation call; then that would
have some effect on the state of a wavelet

00:19:17.210 --> 00:19:24.670
that would not be reflected in just the history
of deltas. So, that's the main reason that

00:19:24.670 --> 00:19:29.309
I think the implicit Waves is the way to go.
Add/remove participant, this was not--I can

00:19:29.309 --> 00:19:35.900
really address this in the design that I published
and currently, just--when you get to remove

00:19:35.900 --> 00:19:40.230
from a delta--from a wavelet then the delta
stream stops sending you messages. We intend

00:19:40.230 --> 00:19:44.720
to add and remove messages at delta stream,
so that you can tell when you've been removed.

00:19:44.720 --> 00:19:48.380
You don't always get to remove a participant
op when you get removed. It may be that you

00:19:48.380 --> 00:19:52.970
were part of some group when groups are implemented
in Wave in a Box. You may have indirect access

00:19:52.970 --> 00:19:58.460
to a Wave, say, by being a member of the Wave
protocol group or something. And if you get

00:19:58.460 --> 00:20:01.740
removed from the group in whatever systems
implementing that group, then you lose access

00:20:01.740 --> 00:20:04.940
to the wavelet, but you won't see a remove
participant op telling you that. So, we need

00:20:04.940 --> 00:20:11.549
a "removed" message to tell you that you can
expect to receive no more deltas on the stream.

00:20:11.549 --> 00:20:15.419
And then we need to improve the fetch service.
So, an extension to the fetch service is to

00:20:15.419 --> 00:20:20.600
be able to ask for older versions of this
snapshot than the current one. And our intent

00:20:20.600 --> 00:20:25.450
is that you could--if you've seen a version
of a wavelet, you can always go and request

00:20:25.450 --> 00:20:31.130
that version again. We don't--we'd never take
data away from you that you've seen. Unlike--what

00:20:31.130 --> 00:20:34.750
happens? I think in docs, you--when you delete
a doc, you can, you know, it's gone for--you

00:20:34.750 --> 00:20:38.110
can delete it for everyone. We didn't want
that to happen in Wave. Particularly, you

00:20:38.110 --> 00:20:41.710
know, it's in federation. It doesn't really
make sense to be able to delete something

00:20:41.710 --> 00:20:47.340
for everyone. So the server should be able
to provide you access with the last version

00:20:47.340 --> 00:20:51.440
that you saw. And so, inside, you use it on
a wavelet somewhere. We stashed the last version

00:20:51.440 --> 00:20:56.360
of the wavelet that you saw whenever you open
it up and your client. And the fetch servelet

00:20:56.360 --> 00:21:01.910
should be able to ask--should be able to answer
a respond--answer a request for an older version

00:21:01.910 --> 00:21:07.910
of a wavelet. Now that imposes some load on
the server to be able to answer that and we

00:21:07.910 --> 00:21:13.080
haven't implemented it yet. But at some point,
we should be able to--when you do it--when

00:21:13.080 --> 00:21:18.100
you do a fetch across a whole Wave, get the
latest snapshots that you were able to see.

00:21:18.100 --> 00:21:26.750
And if you open a stream, be able to open
a stream up to the point where you get removed.

00:21:26.750 --> 00:21:30.200
That's it. Hopefully, that's been short and
we've go back up the time. Anymore questions

00:21:30.200 --> 00:21:34.990
about client/server protocol? So again, this
is sort of a transport agnostic client/server

00:21:34.990 --> 00:21:39.000
protocol for interacting with live Waves.
It's probably something that we can standardize

00:21:39.000 --> 00:21:42.260
on, you know, modularly some details so that
everyone's clients can talk to everyone's

00:21:42.260 --> 00:21:49.010
servers in this way. It's ignoring some aspects
of it like authentication and sort of the

00:21:49.010 --> 00:21:55.833
non-Wavey bits of the protocol. But otherwise,
it's something I hope to be implementing in

00:21:55.833 --> 00:22:09.230
the next month or so inside Wave in a Box
so that we can make sure that it works.

00:22:09.230 --> 00:22:12.900
&gt;&gt; In the--is the participant list maintained
using OT transports or is it basically just

00:22:12.900 --> 00:22:13.900
straightforward OT data?
&gt;&gt; NORTH: Yeah, the participant list, I guess,

00:22:13.900 --> 00:22:18.740
is an example of us not using document operations
to do OT. So it has its own OT, which is fairly

00:22:18.740 --> 00:22:19.740
simple. Anthony?
&gt;&gt; ANTHONY: Do you still have to specify the

00:22:19.740 --> 00:22:20.740
inversion? Can you--what was the history of
this [INDISTINCT] systems for that was [INDISTINCT]

00:22:20.740 --> 00:22:21.740
awful, but [INDISTINCT] for the client only
had the inversions from what they saw last,

00:22:21.740 --> 00:22:22.740
because if you're not online, you urge user
object wasn't created and so when you update

00:22:22.740 --> 00:22:31.240
it--the last version you saw. So basically,
I came home and the clients did different

00:22:31.240 --> 00:22:40.970
changes whether they were all [INDISTINCT]
server.

00:22:40.970 --> 00:22:46.350
&gt;&gt; NORTH: Yeah.
&gt;&gt; ANTHONY: It didn't get the--it had to actually

00:22:46.350 --> 00:22:49.750
make the change before you get all the history.
And so, I was--I asked, in fact [INDISTINCT]

00:22:49.750 --> 00:22:53.149
the answer was why you had to specify his
version as opposed to saying, "Just give everything

00:22:53.149 --> 00:22:55.700
from his version," when you do it from open
[INDISTINCT].

00:22:55.700 --> 00:23:01.970
&gt;&gt; Are you talking about client server call?
&gt;&gt; ANTHONY: Yeah, client server time and that's

00:23:01.970 --> 00:23:23.870
what basically--I mean, [INDISTINCT].
&gt;&gt; NORTH: It

00:23:23.870 --> 00:23:31.289
doesn't ring a bell to me.
&gt;&gt; [INDISTINCT] request the federation. If

00:23:31.289 --> 00:23:43.630
you request the federation [INDISTINCT] member
was to open request, you know, the old non-wave--WebSockets

00:23:43.630 --> 00:23:53.270
protocol [INDISTINCT]. And when you get it
open, you test by a wavelet [INDISTINCT].

00:23:53.270 --> 00:23:54.270
&gt;&gt; It's pretty sure the first [INDISTINCT]
I there's a [INDISTINCT].

00:23:54.270 --> 00:23:55.270
&gt;&gt; I think we should [INDISTINCT].
&gt;&gt; NORTH: Let's talk about it during the break.

00:23:55.270 --> 00:24:08.850
&gt;&gt; I was saying that a...
&gt;&gt; NORTH: That's a bit [INDISTINCT]. I must

00:24:08.850 --> 00:24:09.850
be dead.
&gt;&gt; Good morning.

00:24:09.850 --> 00:24:11.360
&gt;&gt; Oh, hi, Stan. Yeah.
&gt;&gt; The federation protocol tends to request

00:24:11.360 --> 00:24:13.269
or require him [INDISTINCT].
&gt;&gt; NORTH: Okay. Sorry. Any other questions,

00:24:13.269 --> 00:24:16.670
otherwise it's--is it break time or is there
another talk?

00:24:16.670 --> 00:24:20.620
&gt;&gt; No, we've got discussion on Wave.
&gt;&gt; NORTH: Yes, adapted on the way of government

00:24:20.620 --> 00:24:24.789
thinks. Right, excellent.
&gt;&gt; Index Waves gone away?

00:24:24.789 --> 00:24:34.940
&gt;&gt; NORTH: Not yet, but I'm really trying hard
to make them go away.

00:24:34.940 --> 00:24:39.909
aying that a...
&gt;&gt; NORTH: That's a bit [INDISTINCT]. I must

00:24:39.909 --> 00:24:41.000
be dead.
&gt;&gt; Good morning.

00:24:41.000 --> 00:24:43.740
&gt;&gt; Oh, hi, Stan. Yeah.
&gt;&gt; The federation protocol tends to request

00:24:43.740 --> 00:24:46.480
or require him [INDISTINCT].
&gt;&gt; NORTH: Okay. Sorry. Any other question

