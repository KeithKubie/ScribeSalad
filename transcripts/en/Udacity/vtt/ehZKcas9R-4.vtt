WEBVTT
Kind: captions
Language: en

00:00:00.100 --> 00:00:03.280
In order to start asking the question, what does the key word this refer to,

00:00:03.280 --> 00:00:06.390
we really need a code example where the keyword this appears.

00:00:06.390 --> 00:00:09.070
Here we have it appearing inside a function which is generally how you

00:00:09.070 --> 00:00:10.200
are going to see it.

00:00:10.200 --> 00:00:13.820
So if you notice the keyword this appearing somewhere in a function,

00:00:13.820 --> 00:00:16.329
what would you imagine it is bound to?

00:00:16.329 --> 00:00:17.340
let's go through a quick list of

00:00:17.340 --> 00:00:21.020
things that people frequently think it's bound to although it usual is not.

00:00:21.020 --> 00:00:24.130
So first of all you might see this function definition here.

00:00:24.130 --> 00:00:27.200
Highlight it in blue, and you know that when your interpreter hits it,

00:00:27.200 --> 00:00:30.090
it's going to create a function object in memory.

00:00:30.090 --> 00:00:33.030
You may then conclude that the keyword this should refer to that

00:00:33.030 --> 00:00:35.110
function object, but it doesn't.

00:00:35.110 --> 00:00:38.440
As a next step sometimes people conjecture that an

00:00:38.440 --> 00:00:42.460
instance of that function is created and the keyword this refers to it.

00:00:42.460 --> 00:00:44.930
Now, in certain circumstances that's true.

00:00:44.930 --> 00:00:48.450
But in order to really get on board with that definition, I would have to ask,

00:00:48.450 --> 00:00:52.110
what is it that you imagine a new instance of this function would be?

00:00:52.110 --> 00:00:55.740
I mean, strictly speaking, what is this object in your mind?

00:00:55.740 --> 00:00:59.300
Later on we're going to go on to examine how this could be considered true but

00:00:59.300 --> 00:01:02.660
it's actually rarely the case that you're going to see code that looks

00:01:02.660 --> 00:01:03.500
like this.

00:01:03.500 --> 00:01:05.370
So let's say, for the sake of argument.

00:01:05.370 --> 00:01:08.200
But this is basically an error, generally speaking.

00:01:08.200 --> 00:01:11.550
You might then think that in order for the keyword this to mean anything it

00:01:11.550 --> 00:01:16.970
must be in a function that is contained within some other object as a property.

00:01:16.970 --> 00:01:18.730
Here was have an object ob2.

00:01:18.730 --> 00:01:22.050
That has a method called method that stores a reference to

00:01:22.050 --> 00:01:27.280
that same function object, so that object creates an object in memory and

00:01:27.280 --> 00:01:31.060
maybe that in memory object, where the function is a property,

00:01:31.060 --> 00:01:33.610
would be the thing that the keyword this refers to.

00:01:33.610 --> 00:01:35.950
This is actually one of the most popular misconceptions.

00:01:35.950 --> 00:01:36.880
But it's also not the case.

00:01:36.880 --> 00:01:38.680
And we'll see why in just a minute.

00:01:38.680 --> 00:01:40.060
The easiest way to think about this,

00:01:40.060 --> 00:01:44.320
though, is what if that same function was a property of two different objects?

00:01:44.320 --> 00:01:45.880
It doesn't stand to reason that the keyword,

00:01:45.880 --> 00:01:49.100
this, would be forced to choose somehow between the two of them.

00:01:49.100 --> 00:01:50.540
Taking it a step further,

00:01:50.540 --> 00:01:54.130
we could then claim that the keyword this will appear inside a function.

00:01:54.130 --> 00:01:58.410
And that function must appear inside the curly braces of some object literal.

00:01:58.410 --> 00:02:00.610
Or some other form of defining a function.

00:02:00.610 --> 00:02:04.530
So that object literal that surrounds the function definition might create an in

00:02:04.530 --> 00:02:05.760
memory object and

00:02:05.760 --> 00:02:09.139
that could be what we're referring to when we say the keyword this.

00:02:09.139 --> 00:02:10.850
But this is also not correct.

00:02:10.850 --> 00:02:13.700
Lastly, we know we will eventually call this function, and

00:02:13.700 --> 00:02:17.950
as we pass values in to be bound to the positional parameters of the function,

00:02:17.950 --> 00:02:23.330
we could imagine that that invocation creates a set of bindings, or a scope.

00:02:23.330 --> 00:02:25.770
That scope must be modeled somewhere in memory.

00:02:25.770 --> 00:02:29.790
And maybe it's represented as an object where a maps to three in this case, and

00:02:29.790 --> 00:02:30.600
b maps to four.

00:02:30.600 --> 00:02:34.450
We would either call this an execution context, or a scope.

00:02:34.450 --> 00:02:37.010
But this is also not what the keyword this refers to.

00:02:37.010 --> 00:02:40.320
As we recall from our earlier conversation about scopes, it's not the case that

00:02:40.320 --> 00:02:44.300
JavaScript gives you any memory reference access to these constructs.

