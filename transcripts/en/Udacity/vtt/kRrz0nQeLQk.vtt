WEBVTT
Kind: captions
Language: en

00:00:00.120 --> 00:00:03.950
Another piece of information that the
cache maintains about each of the blocks

00:00:03.950 --> 00:00:06.790
it has is the so-called valid bit.

00:00:06.790 --> 00:00:10.390
If we look at the cache with
four blocks of data and

00:00:10.390 --> 00:00:14.410
the tag that tells us which block
we have in each of the lines,

00:00:14.410 --> 00:00:18.190
the question is, what happens
when we turn on the processor?

00:00:18.190 --> 00:00:22.660
At that time the cache
contains no useful data.

00:00:22.660 --> 00:00:25.420
But the data will have some bits here.

00:00:25.420 --> 00:00:30.040
Even if all of the bits are zero,
we need to know that whatever address we

00:00:30.040 --> 00:00:33.340
produce, it doesn't match
any of these blocks here, so

00:00:33.340 --> 00:00:37.160
that we need to access memory and
bring the actual data into the cache.

00:00:37.160 --> 00:00:39.850
We do this by matching the tag.

00:00:39.850 --> 00:00:41.860
But what does the tag initially have?

00:00:43.200 --> 00:00:45.840
If the tag initially
just has all zeroes,

00:00:47.150 --> 00:00:51.890
what if we're accessing address
like this where it might

00:00:51.890 --> 00:00:57.090
happen that this address actually has
a tag bit that correspond to zero?

00:00:57.090 --> 00:01:00.660
In that case the initial
tag would match this and

00:01:00.660 --> 00:01:03.710
we would be accessing this
garbage data in the cache.

00:01:03.710 --> 00:01:07.630
Which hasn't been brought from memory,
so we're really accessing something

00:01:07.630 --> 00:01:10.240
that is not equal to what
we should be accessing.

00:01:10.240 --> 00:01:12.430
Note that any possible value for

00:01:12.430 --> 00:01:16.699
the tag might match the tag
of an actual address.

00:01:17.760 --> 00:01:21.160
So, it is not that it is
wrong to initialize to 0,

00:01:21.160 --> 00:01:25.830
it's that any particular initial value
here, would produce the same problem.

00:01:25.830 --> 00:01:32.790
So what we do, is we add an additional
bit of state to the cache for each line.

00:01:32.790 --> 00:01:38.340
That tells us whether the tag and
the data are valid.

00:01:38.340 --> 00:01:44.290
Initially, the valid bits need to be
set to 0, which means that if our tag

00:01:44.290 --> 00:01:50.800
matches the address but the valid bit
is 0, we treat that as not a hit.

00:01:50.800 --> 00:01:56.770
So the hit condition is really
the tag matches our block number and

00:01:56.770 --> 00:01:58.860
the valid bit is set to one.

00:01:58.860 --> 00:02:01.420
By setting the valid
bits to zero initially,

00:02:01.420 --> 00:02:06.480
we make sure that none of these can
hit until real data is brought in.

00:02:06.480 --> 00:02:10.590
And thus, we also remove the problem
of initializing the data and the tag.

00:02:10.590 --> 00:02:12.650
We can leave anything here.

00:02:12.650 --> 00:02:16.430
So these don't need to be zeroed out
as long as the valid bit is set to

00:02:16.430 --> 00:02:17.830
zero correctly.

00:02:17.830 --> 00:02:21.110
So when we boot up the processor,
we set all the valid bits to zero.

00:02:21.110 --> 00:02:24.230
And then,
when we bring stuff from memory,

00:02:24.230 --> 00:02:28.560
put the data here, set the tag to
correspond to the block's number.

00:02:28.560 --> 00:02:31.430
And at that time,
we also set the valid bit to one.

