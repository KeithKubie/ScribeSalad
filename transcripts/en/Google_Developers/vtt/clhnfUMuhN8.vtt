WEBVTT
Kind: captions
Language: en

00:00:06.277 --> 00:00:07.110
KRISTAN UCCELLO: Hi.

00:00:07.110 --> 00:00:08.250
My name's Krispy.

00:00:08.250 --> 00:00:11.460
I'm a Developer Advocate on the
Cast Developer Relations team.

00:00:11.460 --> 00:00:13.480
In this DevBytes
video, I will discuss

00:00:13.480 --> 00:00:15.490
Google Cast receivers
and how development

00:00:15.490 --> 00:00:17.369
works with Cast
receiver devices.

00:00:17.369 --> 00:00:19.160
For this video, I'm
assuming you're already

00:00:19.160 --> 00:00:21.330
familiar with the Cast
developer console.

00:00:21.330 --> 00:00:22.990
If not, please
review the developer

00:00:22.990 --> 00:00:24.630
console documentation.

00:00:24.630 --> 00:00:28.510
Now, let's take a look at what
a receiver application is.

00:00:28.510 --> 00:00:32.119
Cast receiver applications
are single-page HTML5 apps

00:00:32.119 --> 00:00:34.070
that are loaded
from a network URL

00:00:34.070 --> 00:00:36.480
and executed on a special
version of Chrome.

00:00:36.480 --> 00:00:39.660
Cast receiver applications
run on Cast receiver devices

00:00:39.660 --> 00:00:41.000
like a Chrome Cast.

00:00:41.000 --> 00:00:43.810
Elements such as buttons,
links, and alerts

00:00:43.810 --> 00:00:46.090
have been disabled since
there's no mouse or keyboard

00:00:46.090 --> 00:00:47.300
input available.

00:00:47.300 --> 00:00:50.170
All interactions with a running
Cast receiver application

00:00:50.170 --> 00:00:52.950
happen through messages
sent by a Cast sender app.

00:00:52.950 --> 00:00:54.674
To illustrate this
interaction model,

00:00:54.674 --> 00:00:56.340
let's take a look at
how a Cast receiver

00:00:56.340 --> 00:00:58.530
application is launched.

00:00:58.530 --> 00:01:00.270
Cast receiver
applications are launched

00:01:00.270 --> 00:01:02.080
when a Cast sender
application running

00:01:02.080 --> 00:01:05.000
on a sender device such as
a phone, tablet, or computer

00:01:05.000 --> 00:01:08.300
tells a receiver device that it
wants to launch an application.

00:01:08.300 --> 00:01:11.224
What that application is
depends on the application ID

00:01:11.224 --> 00:01:12.890
that the sender
provides when requesting

00:01:12.890 --> 00:01:14.930
to use the receiver device.

00:01:14.930 --> 00:01:17.710
The receiver device will look
up the application ID using

00:01:17.710 --> 00:01:20.270
a Google service and load
the corresponding receiver

00:01:20.270 --> 00:01:22.670
application associated with it.

00:01:22.670 --> 00:01:24.670
Once the receiver
application is loaded,

00:01:24.670 --> 00:01:27.110
it can start processing messages
from the connected sender

00:01:27.110 --> 00:01:28.250
applications.

00:01:28.250 --> 00:01:29.872
As a developer, you
have options when

00:01:29.872 --> 00:01:32.080
it comes to the type of
receiver application launched

00:01:32.080 --> 00:01:33.930
by a sender.

00:01:33.930 --> 00:01:37.530
An application ID is a unique
ID for a receiver application

00:01:37.530 --> 00:01:39.420
that you get when you
register a receiver

00:01:39.420 --> 00:01:41.440
app in the Cast
developer console.

00:01:41.440 --> 00:01:46.700
You can register an application
ID at cast.google.com/publish.

00:01:46.700 --> 00:01:48.850
There are three types of
receiver applications,

00:01:48.850 --> 00:01:50.600
two of which require
registration using

00:01:50.600 --> 00:01:53.440
the Cast developer console,
and one that does not.

00:01:53.440 --> 00:01:55.910
The one that doesn't is called
the Default Media Receiver,

00:01:55.910 --> 00:01:57.850
and all it does is
play simple media.

00:01:57.850 --> 00:02:01.710
No styling, no customization,
and no application ID.

00:02:01.710 --> 00:02:04.250
There's no way to
modify its behavior.

00:02:04.250 --> 00:02:06.190
The Styled Media
Receiver application

00:02:06.190 --> 00:02:09.919
does require registration and
allows for some customization.

00:02:09.919 --> 00:02:11.340
It's for playback
of simple media.

00:02:11.340 --> 00:02:12.990
More on this in a moment.

00:02:12.990 --> 00:02:14.540
Custom Receivers
are applications

00:02:14.540 --> 00:02:17.370
that require registration and
are for building advanced media

00:02:17.370 --> 00:02:22.070
players or other types of
TV applications like games.

00:02:22.070 --> 00:02:24.510
A Styled Media Receiver
allows a sender application

00:02:24.510 --> 00:02:26.680
to play media on a Cast
device without needing

00:02:26.680 --> 00:02:29.260
to create your own Custom
Receiver application.

00:02:29.260 --> 00:02:31.470
You can customize the
Styled Media Receiver color

00:02:31.470 --> 00:02:34.060
scheme and branding by
providing your own CSS

00:02:34.060 --> 00:02:35.620
during registration.

00:02:35.620 --> 00:02:37.430
The Styled Media
Receiver is a great way

00:02:37.430 --> 00:02:40.090
to get started building
Google Cast applications.

00:02:40.090 --> 00:02:41.700
Using the Styled
Media Receiver means

00:02:41.700 --> 00:02:44.230
developers can focus their
efforts on sender application

00:02:44.230 --> 00:02:47.480
interactions without having
to build a custom receiver.

00:02:47.480 --> 00:02:48.980
Creating a Styled
Media Receiver is

00:02:48.980 --> 00:02:51.280
as easy as registering
for an application ID

00:02:51.280 --> 00:02:53.030
through the Cast
developer console.

00:02:53.030 --> 00:02:55.380
The Styled Media Receiver
is the best option

00:02:55.380 --> 00:02:58.040
if the application does not
need to utilize advanced media

00:02:58.040 --> 00:03:00.940
playback capabilities such
as adaptive streaming, DRM,

00:03:00.940 --> 00:03:03.980
closed captioning,
or authentication.

00:03:03.980 --> 00:03:05.720
Custom Receiver
applications are the way

00:03:05.720 --> 00:03:07.310
to go if you want
to have control

00:03:07.310 --> 00:03:10.220
over all aspects of the
behavior of your application.

00:03:10.220 --> 00:03:13.110
With Custom Receivers, you can
support protocol name spaces

00:03:13.110 --> 00:03:16.490
beyond just media and build
rich experiences for your users.

00:03:16.490 --> 00:03:19.240
You have full control over the
presentation, interactions,

00:03:19.240 --> 00:03:20.530
and more.

00:03:20.530 --> 00:03:22.590
Using the Google
Cast receiver SDK,

00:03:22.590 --> 00:03:25.135
you can build an HTML5
application, hook

00:03:25.135 --> 00:03:27.780
into the various events that are
fired within the Cast Receiver

00:03:27.780 --> 00:03:30.270
Message System, and
build complex behaviors

00:03:30.270 --> 00:03:32.200
beyond simple media playback.

00:03:32.200 --> 00:03:34.660
The Cast Receiver APIs
provide ways for developers

00:03:34.660 --> 00:03:37.950
to build rich applications
targeting the TV space.

00:03:37.950 --> 00:03:40.060
You can utilize the Cast
media player library

00:03:40.060 --> 00:03:42.710
to build media applications
that use adaptive streaming.

00:03:42.710 --> 00:03:45.460
HLS, MPEG DASH, smooth
streaming, and more.

00:03:45.460 --> 00:03:48.870
They can also handle
authentication and use DRM.

00:03:48.870 --> 00:03:51.600
In order to load a receiver
application onto a Cast device

00:03:51.600 --> 00:03:53.910
while developing, register
the receiver devices

00:03:53.910 --> 00:03:56.460
you wish to use in the
Cast developer console.

00:03:56.460 --> 00:03:58.250
For an unpublished
receiver application,

00:03:58.250 --> 00:03:59.870
only registered
Cast devices will

00:03:59.870 --> 00:04:02.050
be able to load the
receiver application.

00:04:02.050 --> 00:04:04.440
As well, during development,
the receiver device

00:04:04.440 --> 00:04:06.440
will need to expose
its serial number.

00:04:06.440 --> 00:04:09.200
This can be enabled using the
Chrome Cast setup application.

00:04:09.200 --> 00:04:12.930
Simply select the Cast device
and enable the "Send serial

00:04:12.930 --> 00:04:15.270
number when checking
for updates" option.

00:04:15.270 --> 00:04:16.950
When you publish
your application,

00:04:16.950 --> 00:04:19.861
any Cast receiver device
can load your app.

00:04:19.861 --> 00:04:22.110
Now that I've covered some
of the basics of setting up

00:04:22.110 --> 00:04:24.630
for development, let's
have a look at some code.

00:04:24.630 --> 00:04:27.000
In a few lines of code, a
very basic Custom Receiver

00:04:27.000 --> 00:04:30.150
application can be built
that plays simple media.

00:04:30.150 --> 00:04:33.900
First, we load
the receiver APIs.

00:04:33.900 --> 00:04:37.170
Then we ensure that we have
a video element, some media

00:04:37.170 --> 00:04:41.290
element to play back
video, music, et cetera.

00:04:41.290 --> 00:04:44.350
Once the window onload is fired,
identify the media element

00:04:44.350 --> 00:04:47.160
and create a Cast media
manager to handle the sender

00:04:47.160 --> 00:04:49.400
communication and media events.

00:04:49.400 --> 00:04:52.180
Then get an instance of the
Cast receiver manager, which

00:04:52.180 --> 00:04:54.720
is responsible for communicating
with the Cast system.

00:04:54.720 --> 00:04:57.550
And tell it to start, which
lets the receiver device know

00:04:57.550 --> 00:05:00.350
that the application is loaded
and ready to process sender

00:05:00.350 --> 00:05:01.420
messages.

00:05:01.420 --> 00:05:04.819
From here, you can build up
additional application logic.

00:05:04.819 --> 00:05:06.360
And as you do, you
might want to know

00:05:06.360 --> 00:05:08.910
how to debug your receiver code.

00:05:08.910 --> 00:05:12.050
Thankfully, it's very simple
to debug receiver applications.

00:05:12.050 --> 00:05:13.770
You can connect to
a device debugger

00:05:13.770 --> 00:05:17.000
on a registered receiver by
opening Chrome on a computer

00:05:17.000 --> 00:05:19.710
and going to the IP address
of the receiver device

00:05:19.710 --> 00:05:21.860
on port 9222.

00:05:21.860 --> 00:05:24.450
You can get the IP address
of the receiver device using

00:05:24.450 --> 00:05:26.150
the Chrome Cast setup app.

00:05:26.150 --> 00:05:28.920
The debugger has full DOM
manipulation and JavaScript

00:05:28.920 --> 00:05:30.680
console support.

00:05:30.680 --> 00:05:33.400
To keep logs between
sessions, click the gear icon

00:05:33.400 --> 00:05:35.930
in the lower right and check
the box next to "Preserve

00:05:35.930 --> 00:05:39.880
log upon navigation."

00:05:39.880 --> 00:05:42.766
We are very excited to see what
you build with Google Cast.

00:05:42.766 --> 00:05:44.140
To get you going,
we're providing

00:05:44.140 --> 00:05:45.430
a number of resources.

00:05:45.430 --> 00:05:48.240
You can discover more details
about the Google Cast SDK

00:05:48.240 --> 00:05:51.360
at developers.google.com/cast.

00:05:51.360 --> 00:05:53.670
The design checklist will
go a long way in guiding you

00:05:53.670 --> 00:05:56.840
down the path to creating great
second screen applications.

00:05:56.840 --> 00:05:59.860
You can find sample senders
and sample receiver apps

00:05:59.860 --> 00:06:02.560
at gethub.com/googlecast.

00:06:02.560 --> 00:06:04.310
Post your questions
on Stack Overflow

00:06:04.310 --> 00:06:07.010
and tag them with Google-cast.

00:06:07.010 --> 00:06:09.080
In future DevBytes,
we will dive deeper

00:06:09.080 --> 00:06:12.460
into the Cast sender SDK for
each platform and Cast receiver

00:06:12.460 --> 00:06:13.680
SDK.

00:06:13.680 --> 00:06:16.390
Join the Google Cast developer
community on Google+ for pro

00:06:16.390 --> 00:06:18.550
tips and share your experiences.

00:06:18.550 --> 00:06:20.960
It's now up to you to go out
and create great Google Cast

00:06:20.960 --> 00:06:22.290
receiver applications.

00:06:22.290 --> 00:06:24.160
Happy casting.

