WEBVTT
Kind: captions
Language: en

00:00:06.960 --> 00:00:09.880
Hello and welcome to an Apps
Script Crash Course.

00:00:09.880 --> 00:00:11.120
I'm Eric Koleda.

00:00:11.120 --> 00:00:13.310
And today, we're going to be
talking about Cursor and

00:00:13.310 --> 00:00:17.450
Selection within Google Docs and
how to manipulate and read

00:00:17.450 --> 00:00:19.300
it via Apps Script.

00:00:19.300 --> 00:00:23.500
We recently published a blog
post that goes into the launch

00:00:23.500 --> 00:00:26.280
of this feature, as well as some
really good samples that

00:00:26.280 --> 00:00:28.350
show how it works.

00:00:28.350 --> 00:00:30.150
And today, I'm just going to
give you a little background

00:00:30.150 --> 00:00:34.100
into how Cursor and Selection
operates, show you a little

00:00:34.100 --> 00:00:36.410
bit of debugging information,
and then also we'll code

00:00:36.410 --> 00:00:40.120
together some examples that
use Cursor and Selection.

00:00:40.120 --> 00:00:41.970
So before you can really
understand Cursor and

00:00:41.970 --> 00:00:44.860
Selection, it's important to
understand the structure of a

00:00:44.860 --> 00:00:47.360
Google Doc as it exists
within Apps Script.

00:00:47.360 --> 00:00:50.160
Because you will be using that
information a lot when coding

00:00:50.160 --> 00:00:52.790
against the Cursor and
Selection APIs.

00:00:52.790 --> 00:00:55.870
So a great resource for this is
within our documentation.

00:00:55.870 --> 00:00:58.330
We have a page called Extending
Google Docs that

00:00:58.330 --> 00:01:00.990
talks about a bunch of different
technology you can

00:01:00.990 --> 00:01:03.750
use in Apps Script to extend
a Google Document.

00:01:03.750 --> 00:01:06.450
And there's a whole section on
the structure of a document.

00:01:06.450 --> 00:01:09.750
And in addition to some
description, we have a nice

00:01:09.750 --> 00:01:13.260
tree that basically outlines
what elements can exist within

00:01:13.260 --> 00:01:16.440
a Google Doc and what their
hierarchy is like.

00:01:16.440 --> 00:01:19.460
So if you've never programmed
against our Document App API

00:01:19.460 --> 00:01:22.710
before, do read up a little
bit on this structure.

00:01:22.710 --> 00:01:25.640
And then refer to it as you're
coding, as it's very helpful

00:01:25.640 --> 00:01:27.370
to kind of understand
how different

00:01:27.370 --> 00:01:29.660
elements work together.

00:01:29.660 --> 00:01:31.410
Another great tool that I'm
going to show you a little bit

00:01:31.410 --> 00:01:33.570
first is called Cursor
Inspector.

00:01:33.570 --> 00:01:36.890
So this is a demo that was
linked to in the blog post.

00:01:36.890 --> 00:01:40.060
And it allows you to kind of
explore the raw data that

00:01:40.060 --> 00:01:42.970
comes back in the Cursor and
Selection APIs without

00:01:42.970 --> 00:01:45.540
actually having to do a lot
of coding yourself.

00:01:45.540 --> 00:01:47.830
So let's see how this
sample works.

00:01:47.830 --> 00:01:50.850
So you can make a copy of this
document from the blog post.

00:01:50.850 --> 00:01:53.570
And when you do, you get a
menu that says Inspector.

00:01:53.570 --> 00:01:57.590
Click Show Sidebar to bring up
the Cursor Inspector Sidebar.

00:01:57.590 --> 00:02:01.910
And now what this does is it's
a page that live loads data

00:02:01.910 --> 00:02:05.240
from the Cursor and Selection
and shows you just a raw kind

00:02:05.240 --> 00:02:07.560
of dump about what you're
getting back.

00:02:07.560 --> 00:02:09.460
So at the very start of
my document is where

00:02:09.460 --> 00:02:10.500
my cursor is currently.

00:02:10.500 --> 00:02:13.370
And you'll see that my cursor is
within a paragraph element.

00:02:13.370 --> 00:02:17.780
And it's at offset 0, and the
surrounding text is the whole

00:02:17.780 --> 00:02:20.310
word of that header,
Cursor Inspector.

00:02:20.310 --> 00:02:22.680
And [? I'm ?] within
0 within that text.

00:02:22.680 --> 00:02:25.480
So let's talk a little bit
about what offsets mean.

00:02:25.480 --> 00:02:29.300
When you're in the element
type other than text--

00:02:29.300 --> 00:02:33.300
so something like a paragraph,
a table cell, a list item--

00:02:33.300 --> 00:02:35.650
those are what we call
container elements.

00:02:35.650 --> 00:02:37.920
And they're elements that
themselves are kind of buckets

00:02:37.920 --> 00:02:39.150
that hold things.

00:02:39.150 --> 00:02:40.010
They can hold text.

00:02:40.010 --> 00:02:43.070
They can hold inline images,
drawings, a variety of

00:02:43.070 --> 00:02:44.540
different types of content.

00:02:44.540 --> 00:02:47.100
So when your cursor is being
reported as within one of

00:02:47.100 --> 00:02:51.090
those types, like paragraph
here, the offset means which

00:02:51.090 --> 00:02:54.500
element within the bucket is
your cursor in front of.

00:02:54.500 --> 00:02:58.070
So right now, my cursor is in
front of the 0-th, or first

00:02:58.070 --> 00:03:00.280
element, within the paragraph.

00:03:00.280 --> 00:03:02.680
In this case, there's only one
element within the paragraph,

00:03:02.680 --> 00:03:04.060
and it's a text.

00:03:04.060 --> 00:03:06.490
Now, if I were to move my cursor
one to the right in

00:03:06.490 --> 00:03:08.950
between the C and the U, you'll
see that the element

00:03:08.950 --> 00:03:11.170
type switches to text.

00:03:11.170 --> 00:03:13.090
And the offset is now 1.

00:03:13.090 --> 00:03:15.260
So now the meaning
changes slightly.

00:03:15.260 --> 00:03:19.040
When you're within a text, the
offset means what character

00:03:19.040 --> 00:03:21.870
index within the string
of the text is your

00:03:21.870 --> 00:03:23.140
cursor in front of.

00:03:23.140 --> 00:03:27.350
So in this case, now it's
in front of the first or

00:03:27.350 --> 00:03:29.350
character index 1,
the U, within

00:03:29.350 --> 00:03:31.240
the text Cursor Inspector.

00:03:31.240 --> 00:03:33.910
And when I get to the end of the
text, you'll see that it

00:03:33.910 --> 00:03:36.130
once again switches back
to the paragraph.

00:03:36.130 --> 00:03:40.600
And now the offset is 1, meaning
I'm at the end of all

00:03:40.600 --> 00:03:44.210
of the things within
my paragraph.

00:03:44.210 --> 00:03:48.610
Within the outer paragraph, I
am right before the child at

00:03:48.610 --> 00:03:51.150
index 1, which doesn't exist
yet, which means it's very

00:03:51.150 --> 00:03:54.430
easy to add a new child
to this paragraph.

00:03:54.430 --> 00:03:56.290
So you can use this Cursor
Inspector yourself to play

00:03:56.290 --> 00:03:58.810
around and see how Cursor
and Selection change.

00:03:58.810 --> 00:04:00.810
And let's see what happens
with Selection now.

00:04:00.810 --> 00:04:01.325
So Selection--

00:04:01.325 --> 00:04:03.820
I can very simply start by just
selecting some text, like

00:04:03.820 --> 00:04:07.170
let's say this U-R-S. You'll
see what I get is

00:04:07.170 --> 00:04:09.290
one selected element.

00:04:09.290 --> 00:04:11.680
It's a partial selection because
I only have part of

00:04:11.680 --> 00:04:13.200
that text element selected.

00:04:13.200 --> 00:04:15.740
And then it gives me the indices
within it that have

00:04:15.740 --> 00:04:17.410
been selected.

00:04:17.410 --> 00:04:20.310
You'll see I have no cursor when
a selection is active.

00:04:20.310 --> 00:04:22.650
At any time, you have
either a cursor or a

00:04:22.650 --> 00:04:25.030
selection but not both.

00:04:25.030 --> 00:04:29.040
Now, if I were to select this
entire paragraph here all the

00:04:29.040 --> 00:04:31.600
way from start to end, you'll
see that the element in my

00:04:31.600 --> 00:04:34.100
selection changes from a
text to a paragraph.

00:04:34.100 --> 00:04:35.200
And it's not partial.

00:04:35.200 --> 00:04:38.060
I'm selecting the entire
paragraph.

00:04:38.060 --> 00:04:41.200
And the start and end are
negative 1, which indicate no

00:04:41.200 --> 00:04:41.700
valid data.

00:04:41.700 --> 00:04:42.910
Don't use them.

00:04:42.910 --> 00:04:44.650
But the thing about selections,
unlike a cursor,

00:04:44.650 --> 00:04:47.210
is that they can contain
many elements at once.

00:04:47.210 --> 00:04:50.220
So I can for instance, select
all of these list items.

00:04:50.220 --> 00:04:51.920
And you'll see that
they all appear

00:04:51.920 --> 00:04:53.940
here within my selection.

00:04:53.940 --> 00:04:55.955
And so when you're working with
Selection, be aware that

00:04:55.955 --> 00:04:59.140
there could be many things
selected at once.

00:04:59.140 --> 00:05:01.380
All right, so now that we
understand the basis of Cursor

00:05:01.380 --> 00:05:03.900
and Selection, let's actually
do a little coding.

00:05:03.900 --> 00:05:06.520
So I've created a script
attached to this doc.

00:05:06.520 --> 00:05:10.330
So I'll go to Tools, Script
Editor and select my script,

00:05:10.330 --> 00:05:11.760
Cursor Fun.

00:05:11.760 --> 00:05:13.910
Because we're about to
have some cursor fun.

00:05:13.910 --> 00:05:18.710
So let's create a new function
that does insertHelloWorld.

00:05:18.710 --> 00:05:20.830
This is what we're going to
do first, just kind of

00:05:20.830 --> 00:05:25.320
demonstrate how you can use
Cursor API to insert some text

00:05:25.320 --> 00:05:26.750
wherever the cursor
is located.

00:05:26.750 --> 00:05:28.510
This is useful when you want
to, let's say, import some

00:05:28.510 --> 00:05:30.480
information into a document
wherever the

00:05:30.480 --> 00:05:32.070
user has their cursor.

00:05:32.070 --> 00:05:35.020
So the first thing I need to do
is get ahold of the cursor.

00:05:35.020 --> 00:05:38.810
So the cursor is within
the document.

00:05:38.810 --> 00:05:40.940
And so we'll use DocumentApp.

00:05:40.940 --> 00:05:43.130
We'll get the active document,
which is the one we

00:05:43.130 --> 00:05:45.280
currently have open.

00:05:45.280 --> 00:05:46.530
And then we'll get the cursor.

00:05:48.890 --> 00:05:50.960
Now, like I said, a cursor
may not always exist.

00:05:50.960 --> 00:05:52.510
For instance, if there's
a selection, there's

00:05:52.510 --> 00:05:53.770
going to be no cursor.

00:05:53.770 --> 00:05:57.350
So we do want to test first if
there actually is a cursor

00:05:57.350 --> 00:06:00.010
available for us to work with.

00:06:00.010 --> 00:06:04.135
And if there is, it's very easy
for us to insert some

00:06:04.135 --> 00:06:07.600
text at that cursor
using insertText.

00:06:07.600 --> 00:06:11.400
So I'll insert Hello World.

00:06:11.400 --> 00:06:11.950
And that's it.

00:06:11.950 --> 00:06:12.840
We're done.

00:06:12.840 --> 00:06:15.240
So let's position my
cursor somewhere.

00:06:15.240 --> 00:06:17.220
Looks like I had an old
Hello World here

00:06:17.220 --> 00:06:18.620
from a previous run.

00:06:18.620 --> 00:06:20.080
Let's delete that.

00:06:20.080 --> 00:06:23.250
So our cursor is right here
in that first paragraph.

00:06:23.250 --> 00:06:26.420
And we'll run insertHelloWorld.

00:06:26.420 --> 00:06:28.400
Now, I already authorized this
script, but if you haven't,

00:06:28.400 --> 00:06:29.870
you might need to
authorize it.

00:06:29.870 --> 00:06:33.070
Just a simple clicking
of Accept.

00:06:33.070 --> 00:06:33.920
We go back to the document.

00:06:33.920 --> 00:06:36.710
And we'll see there's Hello
World inserted in the document

00:06:36.710 --> 00:06:38.660
right where the cursor was.

00:06:38.660 --> 00:06:40.690
Like I said, now, obviously I
could have just pasted the

00:06:40.690 --> 00:06:42.190
word Hello World.

00:06:42.190 --> 00:06:44.250
But when you are developing
a script, it could be very

00:06:44.250 --> 00:06:45.450
useful to paste all sorts of

00:06:45.450 --> 00:06:48.700
automatically generated content.

00:06:48.700 --> 00:06:49.520
So that's working with Cursor.

00:06:49.520 --> 00:06:51.210
Now let's code up a little
bit of Selection.

00:06:51.210 --> 00:06:55.630
So let's say I wanted to take
all the selected text within a

00:06:55.630 --> 00:06:57.000
selection and bold it.

00:06:57.000 --> 00:06:57.460
Right?

00:06:57.460 --> 00:06:58.910
So you can only bold text.

00:06:58.910 --> 00:07:00.370
You can't bold images.

00:07:00.370 --> 00:07:02.750
So we need to add a little bit
of logic that removes things

00:07:02.750 --> 00:07:04.180
that can't be bolded.

00:07:04.180 --> 00:07:06.360
And then we also need to add
a little logic that handles

00:07:06.360 --> 00:07:07.810
partial selections.

00:07:07.810 --> 00:07:10.120
So if I select part of a text
element, I don't want to bold

00:07:10.120 --> 00:07:11.180
the entire thing.

00:07:11.180 --> 00:07:13.880
I just want to bold the part
that has been selected.

00:07:13.880 --> 00:07:16.220
So let's write that function.

00:07:16.220 --> 00:07:21.120
So I'll create a new function
here called boldMe.

00:07:21.120 --> 00:07:23.840
And much like before, I
need to get ahold of

00:07:23.840 --> 00:07:25.490
the selection object.

00:07:25.490 --> 00:07:32.190
So in this case, it's still
within the active document.

00:07:32.190 --> 00:07:34.650
Typos galore.

00:07:34.650 --> 00:07:38.060
And within there is
getSelection.

00:07:38.060 --> 00:07:39.660
And once again, we do want to
test to see if there is a

00:07:39.660 --> 00:07:41.510
selection, because there
might not always be.

00:07:41.510 --> 00:07:43.610
There's a cursor.

00:07:43.610 --> 00:07:46.370
And now what we need to do is
pull out a list of all of the

00:07:46.370 --> 00:07:48.160
selected elements, so
all of the elements

00:07:48.160 --> 00:07:48.880
that have been selected.

00:07:48.880 --> 00:07:51.700
Basically, what those rows
in the table were before.

00:07:51.700 --> 00:07:57.630
So I'll do var Selected Elements
is selection dot

00:07:57.630 --> 00:07:58.880
getSelectedElements.

00:07:58.880 --> 00:08:00.600
Now, we want to loop over
these, so we'll do

00:08:00.600 --> 00:08:01.850
a simple For loop.

00:08:06.550 --> 00:08:08.440
Great.

00:08:08.440 --> 00:08:14.160
And now we need to pull out
the element that is within

00:08:14.160 --> 00:08:14.840
that selection.

00:08:14.840 --> 00:08:16.566
So a selected element
is kind of a

00:08:16.566 --> 00:08:19.660
wrapper around an element.

00:08:19.660 --> 00:08:22.680
And so you can see a selected
element has the element

00:08:22.680 --> 00:08:26.350
itself, whether or not it's been
partially selected, and

00:08:26.350 --> 00:08:29.040
then the start and end offset
within that if it

00:08:29.040 --> 00:08:30.530
is partially selected.

00:08:30.530 --> 00:08:32.840
So I'm going to pull out the
actual element that has been

00:08:32.840 --> 00:08:34.610
selected and do a test on it.

00:08:34.610 --> 00:08:38.150
So we need to know, can this
element be treated as text?

00:08:38.150 --> 00:08:41.225
That means, is it a paragraph,
is a text, is it a list item?

00:08:41.225 --> 00:08:43.500
If it can be treated as text,
then we can bold it.

00:08:43.500 --> 00:08:45.430
Otherwise, we can't.

00:08:45.430 --> 00:08:49.340
So what I can do is do a test
where If the element dot

00:08:49.340 --> 00:08:51.660
editAsText.

00:08:51.660 --> 00:08:54.240
So it doesn't autocomplete
because it's not in the outer

00:08:54.240 --> 00:08:54.960
element class.

00:08:54.960 --> 00:08:57.400
But basically, if the element
that we have ahold of right

00:08:57.400 --> 00:09:00.320
now has this method available,
then we know we

00:09:00.320 --> 00:09:01.530
can treat it as text.

00:09:01.530 --> 00:09:03.330
And if this method
isn't available,

00:09:03.330 --> 00:09:05.030
then we know we can't.

00:09:05.030 --> 00:09:07.160
So now we know it can be
edited as text, we can

00:09:07.160 --> 00:09:08.680
actually grab the text.

00:09:08.680 --> 00:09:10.480
So I'll do element
dot editAsText.

00:09:13.800 --> 00:09:15.470
So there's our text.

00:09:15.470 --> 00:09:17.830
Now we're ready to bold this
text, but we need to know, do

00:09:17.830 --> 00:09:19.790
we bold the whole thing
or just part of it?

00:09:19.790 --> 00:09:21.690
And so for that, we once
again need to do a

00:09:21.690 --> 00:09:23.620
test on that isPartial.

00:09:23.620 --> 00:09:27.490
So if the selected element is
only partially selected, we'll

00:09:27.490 --> 00:09:28.850
do one thing.

00:09:28.850 --> 00:09:31.930
Otherwise, we'll do another.

00:09:31.930 --> 00:09:33.940
Now, if it's not partially
selected, it's

00:09:33.940 --> 00:09:34.880
actually quite easy.

00:09:34.880 --> 00:09:37.830
We can just do text
dot setBold.

00:09:41.010 --> 00:09:42.200
And we're done.

00:09:42.200 --> 00:09:45.640
Now, if it's partially selected,
we have to only bold

00:09:45.640 --> 00:09:46.590
some of it.

00:09:46.590 --> 00:09:50.670
So what we can do
here is setBold.

00:09:50.670 --> 00:09:52.390
And you can refer to the
documentation as to the

00:09:52.390 --> 00:09:53.720
parameters.

00:09:53.720 --> 00:09:56.810
But the parameters are going to
be the start, the end, and

00:09:56.810 --> 00:09:58.490
whether or not to
make it bold.

00:09:58.490 --> 00:10:01.160
And actually this takes a True
to make it bold, as well.

00:10:01.160 --> 00:10:06.680
So the start is going to
be the getStartOffset.

00:10:06.680 --> 00:10:10.450
The end is going to
be getEndOffset.

00:10:10.450 --> 00:10:11.680
And then we want to
make it bold.

00:10:11.680 --> 00:10:14.120
So we'll put the
word True here.

00:10:14.120 --> 00:10:16.980
So just to overview, we grabbed
the selection, we made

00:10:16.980 --> 00:10:20.380
sure it was there, we got
all the elements.

00:10:20.380 --> 00:10:23.090
For all the elements that can
be treated as text, we got

00:10:23.090 --> 00:10:24.390
them as text.

00:10:24.390 --> 00:10:26.530
And then if it's partial, we
only bolded part of it.

00:10:26.530 --> 00:10:29.060
And if it's not, we bolded
the whole thing.

00:10:29.060 --> 00:10:32.320
So let me save my code and
run the boldMe function.

00:10:32.320 --> 00:10:33.550
So let me select
some text here.

00:10:33.550 --> 00:10:36.090
So what I'm going to do is I'm
going to select all of the

00:10:36.090 --> 00:10:39.360
first Kittens, the two pictures
of kittens, as well

00:10:39.360 --> 00:10:41.210
as part of the last
word of Kittens.

00:10:41.210 --> 00:10:44.070
Now, if we turn back on Cursor
and Selector, you'll see we

00:10:44.070 --> 00:10:47.306
have some text, some images,
and some more text.

00:10:47.306 --> 00:10:53.360
If we run the boldMe function,
and I go back to my document,

00:10:53.360 --> 00:10:57.490
you'll see that the whole first
word Kittens got bolded.

00:10:57.490 --> 00:10:59.250
The images were left alone--
they can't be bolded.

00:10:59.250 --> 00:11:02.800
And then I only bolded the
second word of Kittens up

00:11:02.800 --> 00:11:04.830
until the selection.

00:11:04.830 --> 00:11:07.090
So this is a little bit of an
overview about how Cursor and

00:11:07.090 --> 00:11:07.920
Selection works.

00:11:07.920 --> 00:11:09.490
But there's a lot more
that you can try

00:11:09.490 --> 00:11:11.080
out and learn yourself.

00:11:11.080 --> 00:11:12.870
Like I mentioned, we did
publish a blog post.

00:11:12.870 --> 00:11:16.240
And the URL is going
to be shown below.

00:11:16.240 --> 00:11:16.910
Go check it out.

00:11:16.910 --> 00:11:20.270
We have some more information
on how to use Cursor and

00:11:20.270 --> 00:11:23.300
Selection, some great samples
to try out, and links to our

00:11:23.300 --> 00:11:26.120
reference documentation that
give you kind of all the

00:11:26.120 --> 00:11:27.470
detail you need to
know about how to

00:11:27.470 --> 00:11:29.150
use Cursor and Selection.

00:11:29.150 --> 00:11:30.930
Thank you for joining me,
and have a good one.

