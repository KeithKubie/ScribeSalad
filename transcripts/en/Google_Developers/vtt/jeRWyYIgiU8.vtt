WEBVTT
Kind: captions
Language: en

00:00:00.500 --> 00:00:02.760
All right.

00:00:02.760 --> 00:00:03.680
Let's get started.

00:00:03.680 --> 00:00:04.934
News from webperf-landia.

00:00:04.934 --> 00:00:06.850
It's going to be a really
tough act to follow.

00:00:10.490 --> 00:00:11.670
Impossible, I think.

00:00:11.670 --> 00:00:14.830
Only [INAUDIBLE]
can do what he does.

00:00:14.830 --> 00:00:17.080
I'm going to give you some
tips for some of the things

00:00:17.080 --> 00:00:19.090
we've been working
on in the W3C webperf

00:00:19.090 --> 00:00:21.830
group and related topics
about some of the techniques

00:00:21.830 --> 00:00:24.040
that you can use to
optimize your plundering

00:00:24.040 --> 00:00:25.819
around the web in particular.

00:00:25.819 --> 00:00:27.610
There are four things
we're going to cover.

00:00:27.610 --> 00:00:29.690
Some of them are
already available today.

00:00:29.690 --> 00:00:30.960
Some of them are coming.

00:00:30.960 --> 00:00:32.922
Some of them are actually
still in the works,

00:00:32.922 --> 00:00:35.380
so we're looking for feedback,
use cases, and all the rest,

00:00:35.380 --> 00:00:37.420
and that's where
you guys come in.

00:00:37.420 --> 00:00:40.710
We're going to go in
order of these APIs.

00:00:40.710 --> 00:00:43.990
The best one by far is the Bacon
API for faster bacon delivery,

00:00:43.990 --> 00:00:45.690
and you'll see
exactly what I mean.

00:00:45.690 --> 00:00:49.345
There's stuff like getting
connection type such

00:00:49.345 --> 00:00:51.940
that you can optimize your apps.

00:00:51.940 --> 00:00:53.399
You can figure out
if users are not

00:00:53.399 --> 00:00:55.064
getting to your site,
which is something

00:00:55.064 --> 00:00:56.510
that you can't
actually do today.

00:00:56.510 --> 00:00:59.010
And then finally, we're going
to talk about some of the work

00:00:59.010 --> 00:01:02.130
that I've been doing
recently with resource hits.

00:01:02.130 --> 00:01:05.230
Let's start with the best
one, blocking loot beacons.

00:01:05.230 --> 00:01:06.820
A very common pattern
on the web today

00:01:06.820 --> 00:01:09.700
is you want to track what
happens when somebody clicks

00:01:09.700 --> 00:01:11.571
or when somebody
performs an action.

00:01:11.571 --> 00:01:13.320
In particular, that's
important for things

00:01:13.320 --> 00:01:15.760
like let's say somebody's
clicking away from your site

00:01:15.760 --> 00:01:18.330
or you're trying to
just log some activity.

00:01:18.330 --> 00:01:19.977
A user clicks on
an activity and you

00:01:19.977 --> 00:01:22.310
want to record the fact that
they're going to a checkout

00:01:22.310 --> 00:01:23.670
or they want to buy something.

00:01:23.670 --> 00:01:26.540
The common way you do that today
is, of course, because you're

00:01:26.540 --> 00:01:28.560
navigating away from the page,
the page is getting unloaded.

00:01:28.560 --> 00:01:30.420
You need to stop the
page from unloading.

00:01:30.420 --> 00:01:32.910
You need to send a request
to your analytics server,

00:01:32.910 --> 00:01:34.410
you need to wait
for that to finish.

00:01:34.410 --> 00:01:36.326
If you're doing it right,
then I hope at least

00:01:36.326 --> 00:01:37.370
you're setting a timeout.

00:01:37.370 --> 00:01:39.950
You're saying, I'll wait for
200 milliseconds or something

00:01:39.950 --> 00:01:42.710
like that, and then it
will resume and actually

00:01:42.710 --> 00:01:44.080
let the navigation continue.

00:01:44.080 --> 00:01:46.330
And of course, that is a
terrible performance pattern.

00:01:46.330 --> 00:01:48.532
It's an anti-pattern,
in fact, because we're

00:01:48.532 --> 00:01:50.740
blocking actual navigation
from proceeding because we

00:01:50.740 --> 00:01:53.970
need to log the
actual analytics.

00:01:53.970 --> 00:01:55.840
That is why we have Beacon now.

00:01:55.840 --> 00:02:00.170
This is a new thing that
is now available in Firefox

00:02:00.170 --> 00:02:03.090
and Chrome, and
using this API, you

00:02:03.090 --> 00:02:05.830
can actually post data
to a URL asynchronously.

00:02:05.830 --> 00:02:08.000
What this means is that
you no longer have to wait,

00:02:08.000 --> 00:02:11.009
and you can get on with
navigating to the new page,

00:02:11.009 --> 00:02:14.350
and the browser will take
care of actually delivering

00:02:14.350 --> 00:02:15.757
the payload that you give it.

00:02:15.757 --> 00:02:17.340
It's actually really
nice because it's

00:02:17.340 --> 00:02:19.740
much more flexible than
when you could do before,

00:02:19.740 --> 00:02:25.500
and it actually allows the
browser to do better delivery,

00:02:25.500 --> 00:02:27.710
so we can do things like
retries and other things

00:02:27.710 --> 00:02:28.850
on your behalf.

00:02:28.850 --> 00:02:31.140
All of this is already handled.

00:02:31.140 --> 00:02:34.350
This is actually very similar
if you've seen a ping.

00:02:34.350 --> 00:02:36.100
This is an attribute
that you can actually

00:02:36.100 --> 00:02:40.850
put on a link that
says, for example,

00:02:40.850 --> 00:02:43.200
please navigate to
the site, but when

00:02:43.200 --> 00:02:45.480
the user clicks on this
thing, please also send

00:02:45.480 --> 00:02:48.225
a ping registering the fact that
somebody has clicked on this.

00:02:48.225 --> 00:02:50.300
This is not supported
across all browsers,

00:02:50.300 --> 00:02:53.320
but Chrome supports
it, Safari supports it,

00:02:53.320 --> 00:02:57.610
and it actually is fairly
well established on mobile.

00:02:57.610 --> 00:03:00.640
For example, Google
search last year

00:03:00.640 --> 00:03:03.490
deployed this on all
mobile search results,

00:03:03.490 --> 00:03:05.130
where before you
were actually getting

00:03:05.130 --> 00:03:09.704
redirected to a redirect service
which would then send a 301.

00:03:09.704 --> 00:03:11.370
That's an unnecessary
redirect, and they

00:03:11.370 --> 00:03:13.480
needed that because they need
to register the fact that you've

00:03:13.480 --> 00:03:14.560
clicked on the link.

00:03:14.560 --> 00:03:17.270
This helped us improve search
quality and all the rest.

00:03:17.270 --> 00:03:18.740
Nowadays, they don't do that.

00:03:18.740 --> 00:03:20.360
Instead, they use
the ping attribute,

00:03:20.360 --> 00:03:23.370
which allows them to basically
send two requests at once.

00:03:23.370 --> 00:03:25.720
One navigates to the
actual destination, one

00:03:25.720 --> 00:03:27.800
logs the fact that a
click has happened.

00:03:27.800 --> 00:03:29.360
This helps you
optimize performance.

00:03:29.360 --> 00:03:30.400
This works today.

00:03:30.400 --> 00:03:32.640
This is great, but it's
limited in the sense

00:03:32.640 --> 00:03:35.580
that you can't actually
post arbitrary data.

00:03:35.580 --> 00:03:38.177
You can encode some
data in the URI itself,

00:03:38.177 --> 00:03:40.510
but that's fairly limited in
terms of the amount of data

00:03:40.510 --> 00:03:45.430
you can push and what kind of
data you can push in there.

00:03:45.430 --> 00:03:49.290
In effect, Beacon is an
improved version of a ping.

00:03:49.290 --> 00:03:53.284
It's supported on both
Firefox and Chrome today.

00:03:53.284 --> 00:03:54.700
One nice thing is
that it actually

00:03:54.700 --> 00:03:56.830
allows you to send up
to 64 kilobytes of data,

00:03:56.830 --> 00:03:58.080
and this is arbitrary data.

00:03:58.080 --> 00:04:01.170
You can stuff a JSON payload
or whatever other data type

00:04:01.170 --> 00:04:03.280
you want, and we will
take care of just posting

00:04:03.280 --> 00:04:04.620
that data to the server.

00:04:04.620 --> 00:04:06.460
It's available today
and you can use it.

00:04:06.460 --> 00:04:08.820
And best part, Google
Analytics has actually

00:04:08.820 --> 00:04:10.740
just recently
rolled out support,

00:04:10.740 --> 00:04:14.010
and you can actually enable
this on Google Analytics.

00:04:14.010 --> 00:04:16.010
You do need to modify
your code a little bit.

00:04:16.010 --> 00:04:19.470
You need to pass this additional
flag that says Use Beacon True.

00:04:19.470 --> 00:04:21.319
Because this is
still a new API, we

00:04:21.319 --> 00:04:22.610
have not enabled it by default.

00:04:22.610 --> 00:04:23.690
I'm hoping that in
the future, we'll

00:04:23.690 --> 00:04:26.450
just make that the default. and
you can opt out if you want to,

00:04:26.450 --> 00:04:30.340
and we'll detect the fact that
maybe a particular browser

00:04:30.340 --> 00:04:31.160
doesn't support it.

00:04:31.160 --> 00:04:34.771
But this is by far a much
better way to deliver Beacon.

00:04:34.771 --> 00:04:36.770
So for example, if you're
using Google Analytics

00:04:36.770 --> 00:04:38.603
and you're using things
like click tracking,

00:04:38.603 --> 00:04:40.350
today, they would
actually tell you

00:04:40.350 --> 00:04:43.260
to inject additional JavaScript
code and all the rest

00:04:43.260 --> 00:04:47.450
and pause your navigations to
log analytics and all the rest.

00:04:47.450 --> 00:04:51.010
You can avoid all of that
and get your bacon faster.

00:04:51.010 --> 00:04:53.220
This is very important
because actually, this

00:04:53.220 --> 00:04:56.430
is how all of the ads
monetization and everything

00:04:56.430 --> 00:04:57.140
else works.

00:04:57.140 --> 00:04:58.270
Clicks matter.

00:04:58.270 --> 00:05:00.140
One of the goals here
was to make it simple,

00:05:00.140 --> 00:05:03.360
make it fast, and also improve
the reliability of delivery

00:05:03.360 --> 00:05:04.760
of these beacons.

00:05:04.760 --> 00:05:07.149
A ping has actually
had some bad rap

00:05:07.149 --> 00:05:08.940
in the past on the
browsers that support it

00:05:08.940 --> 00:05:10.481
in terms of the
actual delivery rate.

00:05:10.481 --> 00:05:12.295
It just hasn't
been that reliable.

00:05:12.295 --> 00:05:14.670
With Beacon, we're actually
taking a clean slate approach

00:05:14.670 --> 00:05:16.980
and we're making sure that
that is very well handled,

00:05:16.980 --> 00:05:18.920
and we're seeing very
good results there,

00:05:18.920 --> 00:05:21.120
so definitely something
that you want to check out.

00:05:21.120 --> 00:05:23.200
Use it today, available today.

00:05:23.200 --> 00:05:24.120
Awesome.

00:05:24.120 --> 00:05:26.132
Next, we have Forecasting
Network Weather.

00:05:26.132 --> 00:05:27.590
Sometimes it's
actually very useful

00:05:27.590 --> 00:05:31.080
to know what type of connection
is a user currently on.

00:05:31.080 --> 00:05:33.210
For example, are they
on a cellular connection

00:05:33.210 --> 00:05:34.610
or are they on Wi-Fi?

00:05:34.610 --> 00:05:37.840
Or god forbid, maybe they're
using Bluetooth tethering

00:05:37.840 --> 00:05:41.140
or Bluetooth to
access the internet.

00:05:41.140 --> 00:05:45.110
It's also useful to know more
detailed data for things like,

00:05:45.110 --> 00:05:46.700
how fast is the link
that they're on?

00:05:46.700 --> 00:05:49.230
So the fact that I told you
that the user's on cellular

00:05:49.230 --> 00:05:52.230
is not very useful by
itself because there's

00:05:52.230 --> 00:05:53.510
a lot of variety there.

00:05:53.510 --> 00:05:55.750
There's 2G, there's
3G, there's LTE,

00:05:55.750 --> 00:05:59.810
LTE advanced, and all
these kinds of things.

00:05:59.810 --> 00:06:01.720
We're now exposing
two attributes,

00:06:01.720 --> 00:06:04.056
and downlinkMax is actually
really, really fresh.

00:06:04.056 --> 00:06:05.430
This is something
that we've just

00:06:05.430 --> 00:06:07.270
recently added to the spec.

00:06:07.270 --> 00:06:09.950
Let's look at the
actual logic here.

00:06:09.950 --> 00:06:11.930
First of all, let's
talk about the use case.

00:06:11.930 --> 00:06:15.100
This is a recent headline
where Facebook is actually

00:06:15.100 --> 00:06:18.140
using bandwidth targeting to
deliver a different experience.

00:06:18.140 --> 00:06:20.410
In this particular case,
this is for advertising.

00:06:20.410 --> 00:06:21.880
They detect the
fact that you used

00:06:21.880 --> 00:06:23.700
happen to be on a
slower connection,

00:06:23.700 --> 00:06:25.590
so it doesn't make
sense for me to try

00:06:25.590 --> 00:06:28.311
to jam a video ad into this
pipe because you're not

00:06:28.311 --> 00:06:29.560
going to even see it, frankly.

00:06:29.560 --> 00:06:31.820
It's going to take you 10
seconds to download it,

00:06:31.820 --> 00:06:34.620
so that's a bad experience.

00:06:34.620 --> 00:06:36.300
That's one use case
of how you could

00:06:36.300 --> 00:06:38.620
use this sort of information.

00:06:38.620 --> 00:06:40.760
Note that we're not
saying here that this

00:06:40.760 --> 00:06:44.870
is the actual download
speed of the client.

00:06:44.870 --> 00:06:47.470
We're just saying this is
the maximum potential speed

00:06:47.470 --> 00:06:48.890
that you could get.

00:06:48.890 --> 00:06:50.520
All we know is the last hop.

00:06:50.520 --> 00:06:52.700
Similarly, you can actually
use a lot of this data

00:06:52.700 --> 00:06:54.100
to do analytics.

00:06:54.100 --> 00:06:57.430
I've actually talked to a number
of companies that are currently

00:06:57.430 --> 00:07:04.010
segmenting their conversion
data on connection type,

00:07:04.010 --> 00:07:07.410
and they're finding different
performance for things

00:07:07.410 --> 00:07:09.860
like, hey, we're getting a
lot more conversions on 4G

00:07:09.860 --> 00:07:12.170
versus 3G and all the rest.

00:07:12.170 --> 00:07:13.920
That is actually a
good signal to tell you

00:07:13.920 --> 00:07:16.280
that there's maybe
performance problems on 3G

00:07:16.280 --> 00:07:18.870
that we need to optimize
to up the conversion

00:07:18.870 --> 00:07:21.110
rates and all the rest.

00:07:21.110 --> 00:07:24.311
Analytics, customizing what you
deliver, what types of assets

00:07:24.311 --> 00:07:24.810
you deliver.

00:07:24.810 --> 00:07:28.170
Maybe you want to
pick a lower res image

00:07:28.170 --> 00:07:31.560
or skip the video and
other things like that.

00:07:31.560 --> 00:07:34.300
DownlinkMax is a new
attribute that we're adding,

00:07:34.300 --> 00:07:38.690
and what it reports is the
actual megabits per second

00:07:38.690 --> 00:07:41.980
of the last hop link.

00:07:41.980 --> 00:07:43.580
This is very important.

00:07:43.580 --> 00:07:46.250
What we're not
telling you is, what

00:07:46.250 --> 00:07:50.090
is the expected or the
current bandwidth of the user?

00:07:50.090 --> 00:07:52.526
Because frankly, that
is a very hard problem.

00:07:52.526 --> 00:07:54.150
It's a very transient
thing, especially

00:07:54.150 --> 00:07:56.810
on a cellular network where
these things go up and down all

00:07:56.810 --> 00:07:57.990
the time.

00:07:57.990 --> 00:07:59.540
Instead, we're
just saying, look,

00:07:59.540 --> 00:08:02.950
we know that the user is
connected to an LTE network.

00:08:02.950 --> 00:08:04.590
That's all we know.

00:08:04.590 --> 00:08:09.115
On an LTE network,
regardless of what carrier

00:08:09.115 --> 00:08:11.450
you're signed up with, the
maximum theoretical speed

00:08:11.450 --> 00:08:15.100
as a written in the spec happens
to be 100 megabits per second.

00:08:15.100 --> 00:08:17.950
When you query that value and
it says 100 megabits per second,

00:08:17.950 --> 00:08:19.910
that's not to say
that I'm just going

00:08:19.910 --> 00:08:22.832
to dump the 4K video
ad on the user.

00:08:22.832 --> 00:08:24.040
That's not what we're saying.

00:08:24.040 --> 00:08:26.770
We're just saying this is
the potential, the maximum.

00:08:26.770 --> 00:08:31.122
This, of course, becomes very
useful for the lower range

00:08:31.122 --> 00:08:32.580
of the pipe where
you start looking

00:08:32.580 --> 00:08:36.179
at 2G connections, which are
still very much prevalent.

00:08:36.179 --> 00:08:39.340
Believe it or not, I'm
sure you've all seen it.

00:08:39.340 --> 00:08:43.931
We get bumped down to 2G
even around here every once

00:08:43.931 --> 00:08:44.430
in a while.

00:08:44.430 --> 00:08:47.132
You go to a big
event, you're on 2G.

00:08:47.132 --> 00:08:49.340
This is where you can actually
use this sort of logic

00:08:49.340 --> 00:08:51.047
to say, hey, I'm
currently on 2G.

00:08:51.047 --> 00:08:53.130
I'm going to fetch maybe
a different set of assets

00:08:53.130 --> 00:08:54.990
or I'm going to
do something else,

00:08:54.990 --> 00:08:58.540
optimize my experience
for the user.

00:08:58.540 --> 00:09:02.360
Now, there's another
important digression here.

00:09:02.360 --> 00:09:04.480
Carriers have pulled
a fast one on us.

00:09:04.480 --> 00:09:06.470
Well, it's not just
carriers, but they still

00:09:06.470 --> 00:09:07.980
pulled a fast one on us.

00:09:07.980 --> 00:09:11.320
We love to talk about
megabits per second.

00:09:11.320 --> 00:09:17.550
Megabits and megabytes
are very different things.

00:09:17.550 --> 00:09:18.800
Sorry?

00:09:18.800 --> 00:09:20.860
Eight times different, exactly.

00:09:20.860 --> 00:09:24.250
So the next time
you're hearing, I

00:09:24.250 --> 00:09:27.940
did a bandwidth test and
my phone is really fast.

00:09:27.940 --> 00:09:30.830
I'm getting 10
megabits per second,

00:09:30.830 --> 00:09:32.580
and I'm downloading
a one megabyte image.

00:09:32.580 --> 00:09:35.450
If you actually do
the math, let's say

00:09:35.450 --> 00:09:38.180
you have a 10 megabit per second
connection, which is actually

00:09:38.180 --> 00:09:43.490
really, really good, that's
about 1.2 megabytes per second.

00:09:43.490 --> 00:09:46.100
So if you had a one megabyte
image, which is actually not

00:09:46.100 --> 00:09:51.500
crazy with our super awesome
double retina something

00:09:51.500 --> 00:09:57.005
advanced super screens--
double retina, exactly.

00:10:00.540 --> 00:10:02.000
Retina HD.

00:10:02.000 --> 00:10:03.840
That's the word.

00:10:03.840 --> 00:10:06.700
It will still take a second
to download that image.

00:10:06.700 --> 00:10:08.260
And more likely,
you're experiencing

00:10:08.260 --> 00:10:09.460
much, much slower speeds.

00:10:09.460 --> 00:10:12.020
So you have something like two
or three megabits per second,

00:10:12.020 --> 00:10:14.667
and it will take four seconds.

00:10:14.667 --> 00:10:16.250
This is an important
digression, but I

00:10:16.250 --> 00:10:18.166
think it's something you
need to keep in mind.

00:10:18.166 --> 00:10:21.744
Megabits and megabytes,
don't confuse those things.

00:10:21.744 --> 00:10:23.410
The spec actually
reports it in megabits

00:10:23.410 --> 00:10:25.440
because that's how
the industry works.

00:10:27.950 --> 00:10:30.930
That's net info, and net
info is available currently

00:10:30.930 --> 00:10:32.540
in Chrome and Firefox.

00:10:32.540 --> 00:10:35.540
We're currently implementing
the max bandwidth stuff.

00:10:35.540 --> 00:10:39.240
Hopefully in the next stable
release, that'll make it there.

00:10:39.240 --> 00:10:41.510
Today, you can ready
query for type.

00:10:41.510 --> 00:10:44.500
Next one is what I'm calling
sea monster detection.

00:10:44.500 --> 00:10:46.300
So there's actually
a subtle problem

00:10:46.300 --> 00:10:50.300
that we have today on the web,
which is if the user can't even

00:10:50.300 --> 00:10:51.160
reach your site.

00:10:51.160 --> 00:10:57.400
For example, before
we can log the fact

00:10:57.400 --> 00:10:59.960
that somebody has
visited your site,

00:10:59.960 --> 00:11:02.019
first we need to
find the IP address,

00:11:02.019 --> 00:11:03.560
resolve the IP
address, take the name

00:11:03.560 --> 00:11:05.139
and find the IP address of that.

00:11:05.139 --> 00:11:07.180
Then we need to perform
the TCP handshake and all

00:11:07.180 --> 00:11:09.470
that other stuff, and then we
can only send the HTTP request.

00:11:09.470 --> 00:11:11.011
There's a bunch of
steps in here that

00:11:11.011 --> 00:11:13.930
are basically invisible
to us as web developers,

00:11:13.930 --> 00:11:16.240
and it's actually not
uncommon for users

00:11:16.240 --> 00:11:17.650
to fail somewhere in there.

00:11:17.650 --> 00:11:21.550
So you send your UDP
packet and it gets lost

00:11:21.550 --> 00:11:25.170
and you have no idea
because the visitor never

00:11:25.170 --> 00:11:26.970
made it to your site.

00:11:26.970 --> 00:11:28.340
The DNS timed out.

00:11:28.340 --> 00:11:31.560
Maybe you experienced DNS
problems or your server's

00:11:31.560 --> 00:11:34.090
overloaded and the visitor
can't even reach your site

00:11:34.090 --> 00:11:36.650
or establish the connection
with your HTTP server.

00:11:36.650 --> 00:11:40.370
Those things just go
unreported unless you actually

00:11:40.370 --> 00:11:44.480
have some users telling you that
through a side channel saying,

00:11:44.480 --> 00:11:48.710
hey, I can't resolve your
DNS, and this is a problem.

00:11:48.710 --> 00:11:51.480
For that, we actually have
navigation error logging API,

00:11:51.480 --> 00:11:54.570
which is currently in the works.

00:11:54.570 --> 00:11:56.200
There's no
implementation of it yet,

00:11:56.200 --> 00:11:58.140
but I think we
actually finally have

00:11:58.140 --> 00:12:01.050
the spec nailed down,
or very close to.

00:12:01.050 --> 00:12:02.240
Expect this to come soon.

00:12:02.240 --> 00:12:03.870
How does this work?

00:12:03.870 --> 00:12:07.600
One way it could work is when
the user comes to your site,

00:12:07.600 --> 00:12:09.270
they can actually
call window.performan

00:12:09.270 --> 00:12:12.850
ce.getNavigationErrors and just
iterate through past errors.

00:12:12.850 --> 00:12:15.670
If the user has had problems
accessing your site,

00:12:15.670 --> 00:12:18.000
this would actually
contain a full log of,

00:12:18.000 --> 00:12:21.300
hey, I tried to open your
site on Friday at 5:00 PM

00:12:21.300 --> 00:12:25.320
and I experienced a TCP
something problem and this

00:12:25.320 --> 00:12:27.515
is how long it took for
this thing to time out.

00:12:27.515 --> 00:12:29.140
Of course, you can
use that information

00:12:29.140 --> 00:12:32.650
to then log into
your back end and do

00:12:32.650 --> 00:12:34.150
all the analytics you want.

00:12:34.150 --> 00:12:37.420
But I think we can agree
that that's after the fact,

00:12:37.420 --> 00:12:39.050
perhaps not as useful.

00:12:39.050 --> 00:12:41.190
Still nice to have,
but not as useful.

00:12:41.190 --> 00:12:43.860
What we also support
is this method

00:12:43.860 --> 00:12:46.080
called enable navigation
error reporting, which

00:12:46.080 --> 00:12:48.990
does live reporting.

00:12:48.990 --> 00:12:50.990
So first, you have
to come to the site,

00:12:50.990 --> 00:12:54.540
obviously, at least once, where
you would invoke this code

00:12:54.540 --> 00:12:56.350
and it basically
says, hey, this site

00:12:56.350 --> 00:13:04.490
would like to register for
error reporting moving forward.

00:13:04.490 --> 00:13:06.980
Next time, if the user
experiences an issue,

00:13:06.980 --> 00:13:09.720
we will actually pull up
that URL that you told us,

00:13:09.720 --> 00:13:13.150
and when the timeout happens
or when the connection fails,

00:13:13.150 --> 00:13:15.050
we will just beacon that
information directly

00:13:15.050 --> 00:13:16.770
to that endpoint.

00:13:16.770 --> 00:13:19.120
And of course, this is
the important part here.

00:13:19.120 --> 00:13:20.880
You should beacon
to somewhere else

00:13:20.880 --> 00:13:23.096
because if I can't connect
to your awesomething.com

00:13:23.096 --> 00:13:24.970
and I'm trying to beacon
to awesomething.com,

00:13:24.970 --> 00:13:27.830
that's not going to work.

00:13:27.830 --> 00:13:32.320
You want to have a third party
service or some other domain

00:13:32.320 --> 00:13:35.147
that is separate where you
would send these reports.

00:13:35.147 --> 00:13:37.230
This way, you can actually
get real time reporting

00:13:37.230 --> 00:13:39.970
of there's DNS
timeouts, or maybe I'm

00:13:39.970 --> 00:13:42.830
getting blocked somewhere, or
TCP connections are failing,

00:13:42.830 --> 00:13:43.870
and all the rest.

00:13:43.870 --> 00:13:46.055
This is very, very cool
because today, in order

00:13:46.055 --> 00:13:47.680
to get this sort of
data, you basically

00:13:47.680 --> 00:13:51.540
need to control the client
and the actual site as well,

00:13:51.540 --> 00:13:54.380
and only the largest
companies can do that today,

00:13:54.380 --> 00:13:55.190
and it's very hard.

00:13:55.190 --> 00:13:56.850
This will be really
awesome for just

00:13:56.850 --> 00:13:57.975
improving your reliability.

00:14:00.260 --> 00:14:03.920
And then finally, we're getting
to just faster navigations.

00:14:03.920 --> 00:14:07.855
There's a bag of tricks here
that we want to talk about.

00:14:07.855 --> 00:14:09.480
This is some data
that I just pulled up

00:14:09.480 --> 00:14:12.080
from my own browsing session.

00:14:12.080 --> 00:14:14.730
I'll show you guys
some examples later,

00:14:14.730 --> 00:14:17.190
but if you go to
Chrome Histogram,

00:14:17.190 --> 00:14:19.450
anybody been to Chrome
Histogram before?

00:14:19.450 --> 00:14:21.450
Open a new tab and just
go to Chrome Histogram.

00:14:21.450 --> 00:14:24.680
It has a very long page of
all the different metrics

00:14:24.680 --> 00:14:26.670
of everything that
happens in your system,

00:14:26.670 --> 00:14:28.530
and it's just histograms
of everything.

00:14:28.530 --> 00:14:31.514
Just type in "TCP," and
you'll get 15 charts.

00:14:31.514 --> 00:14:32.930
What I looked up
in there is, what

00:14:32.930 --> 00:14:35.650
is my median DNS
resolution time?

00:14:35.650 --> 00:14:37.320
What is my median
TCP handshake time?

00:14:37.320 --> 00:14:39.840
What is my median TLS handshake
time, and all the rest?

00:14:39.840 --> 00:14:42.160
By the way, this is
based on 10,000 samples,

00:14:42.160 --> 00:14:45.600
and this is based on
the last day of me just

00:14:45.600 --> 00:14:48.350
using my computer on this Wi-Fi.

00:14:48.350 --> 00:14:50.300
You'd expect this Wi-Fi
to be pretty fast.

00:14:50.300 --> 00:14:52.060
We do a pretty good
job of it Google,

00:14:52.060 --> 00:14:53.810
but nonetheless, you
can see that things

00:14:53.810 --> 00:14:56.920
like DNS handshakes, TCP
handshakes and all the rest--

00:14:56.920 --> 00:14:59.060
or DNS lookups, rather--
take quite a bit of time,

00:14:59.060 --> 00:15:00.820
60 milliseconds,
35 milliseconds.

00:15:00.820 --> 00:15:04.160
If I add all of this up, for
a typical page, a median page,

00:15:04.160 --> 00:15:07.160
it takes about 200 milliseconds
for me just to establish,

00:15:07.160 --> 00:15:09.870
perform all the ceremony
before I can actually

00:15:09.870 --> 00:15:11.600
even send HTTP request.

00:15:11.600 --> 00:15:15.420
If you substitute numbers
for things like 3G or 4G,

00:15:15.420 --> 00:15:19.200
this very quickly adds up
to one second of latency.

00:15:19.200 --> 00:15:21.130
There is a lot of
latency that is just

00:15:21.130 --> 00:15:25.250
spent on the initial
setup and the ceremony.

00:15:25.250 --> 00:15:28.520
Browsers do a lot of stuff
to try and hide this.

00:15:28.520 --> 00:15:30.750
We have things like, hey,
let's try and preresolve

00:15:30.750 --> 00:15:32.650
all the links so
when we open a page

00:15:32.650 --> 00:15:35.030
and there's a bunch
of links, let's just

00:15:35.030 --> 00:15:37.530
look up all the DNS names, or
at least some of the DNS names

00:15:37.530 --> 00:15:40.310
such that when you click on that
link, we don't have to wait.

00:15:40.310 --> 00:15:41.510
Let's preconnect.

00:15:41.510 --> 00:15:43.190
So before you even
click on a link

00:15:43.190 --> 00:15:46.730
or as you start to hover towards
the link, it'll just say,

00:15:46.730 --> 00:15:49.200
hey, it looks like
you're going there.

00:15:49.200 --> 00:15:52.116
Let's start to preconnect,
because between the time

00:15:52.116 --> 00:15:54.240
that you actually get to
the link and click, that's

00:15:54.240 --> 00:15:55.930
a couple hundred milliseconds,
and a couple hundred

00:15:55.930 --> 00:15:57.760
milliseconds counts
because by that time

00:15:57.760 --> 00:15:59.426
we could have established
the connection

00:15:59.426 --> 00:16:02.160
and we can send HTTP
request immediately.

00:16:02.160 --> 00:16:03.150
That's pretty sweet.

00:16:03.150 --> 00:16:05.090
And then there's things
like prefetch and prerender,

00:16:05.090 --> 00:16:06.631
where we can actually
just say, look,

00:16:06.631 --> 00:16:09.220
I think this user is likely
heading in that direction

00:16:09.220 --> 00:16:12.324
or to that page next, so
let's prefetch the resource,

00:16:12.324 --> 00:16:13.990
or let's just prerender
the entire page.

00:16:13.990 --> 00:16:16.852
We'll just literally create
a hidden tab in your browser,

00:16:16.852 --> 00:16:18.810
we'll prerender the page,
and when you actually

00:16:18.810 --> 00:16:21.480
say, yes, I want to go there,
we'll just swap it out.

00:16:21.480 --> 00:16:25.080
It loads instantly, but
we're just really swapping

00:16:25.080 --> 00:16:29.980
behind the scenes
the actual render.

00:16:29.980 --> 00:16:32.335
These are tricks that
are available across most

00:16:32.335 --> 00:16:34.952
of the browsers today.

00:16:34.952 --> 00:16:37.160
In Chrome, you can actually
inspect all of the stuff.

00:16:37.160 --> 00:16:38.743
If you go to something
like Chrome DNS

00:16:38.743 --> 00:16:41.440
and once again open a new
tab, Chrome Predictors,

00:16:41.440 --> 00:16:42.369
and Chrome Histograms.

00:16:42.369 --> 00:16:43.910
Between these three,
you can actually

00:16:43.910 --> 00:16:46.560
see all the different things
that we're doing under the hood

00:16:46.560 --> 00:16:50.130
and trying to predict
and all the rest.

00:16:50.130 --> 00:16:51.600
Chrome actually
learns quite a bit

00:16:51.600 --> 00:16:53.597
about your browsing patterns.

00:16:53.597 --> 00:16:55.180
Over time as you use
it more and more,

00:16:55.180 --> 00:16:57.690
we actually observe things
like, what are the first 10

00:16:57.690 --> 00:17:00.032
tabs that you open in the
morning when you open Chrome?

00:17:00.032 --> 00:17:01.990
We'll remember that, and
next time you open it,

00:17:01.990 --> 00:17:05.521
we'll just preconnect to all
of those sites immediately.

00:17:05.521 --> 00:17:07.020
Yes, you're going
to check the news,

00:17:07.020 --> 00:17:09.599
you're going to open
Gmail, and something else.

00:17:09.599 --> 00:17:13.200
These small tricks do a lot
to improve user experience,

00:17:13.200 --> 00:17:15.349
and the interesting
observation here

00:17:15.349 --> 00:17:18.800
is that the browser does
a pretty good job of this,

00:17:18.800 --> 00:17:21.730
but site developers,
you guys, have

00:17:21.730 --> 00:17:24.785
a lot of knowledge about
your own applications.

00:17:27.500 --> 00:17:32.400
Let's say we're looking at a
sports app or a sports section,

00:17:32.400 --> 00:17:36.000
and if you know that the user
always navigates to the NBA

00:17:36.000 --> 00:17:38.790
section and then clicks
on whatever team,

00:17:38.790 --> 00:17:40.640
that's just what
they do each morning,

00:17:40.640 --> 00:17:43.460
or whenever a user expands
a particular section,

00:17:43.460 --> 00:17:45.160
then they go to something else.

00:17:45.160 --> 00:17:47.540
You know these things
that the browser doesn't.

00:17:47.540 --> 00:17:50.285
What we really need to
do is provide you access

00:17:50.285 --> 00:17:52.660
to the same primitives such
that you can hint the browser

00:17:52.660 --> 00:17:54.201
to say, hey, I think
the user's going

00:17:54.201 --> 00:17:56.980
to do this next, so
start doing your stuff.

00:17:56.980 --> 00:17:59.140
That's what these
resource hints are.

00:17:59.140 --> 00:18:02.210
We have three, preconnect,
preload, and prerender.

00:18:02.210 --> 00:18:05.980
The quick anatomy of this thing
is basically, this is a hint.

00:18:05.980 --> 00:18:09.750
It's a link element where
you put a resource name.

00:18:09.750 --> 00:18:11.847
We'll talk about
the rel, which is

00:18:11.847 --> 00:18:13.430
the preconnect,
preload, or prerender.

00:18:13.430 --> 00:18:15.340
That's the type of a hint.

00:18:15.340 --> 00:18:18.449
There is the as, which
describes the type of the asset

00:18:18.449 --> 00:18:19.490
that we're talking about.

00:18:19.490 --> 00:18:22.420
This is basically like,
I want you to fetch this

00:18:22.420 --> 00:18:24.950
as if it was a
style sheet, or as

00:18:24.950 --> 00:18:27.630
if it's an image
or something else.

00:18:27.630 --> 00:18:29.440
This just allows
us to prioritize

00:18:29.440 --> 00:18:34.479
the fetches better
in the browser.

00:18:34.479 --> 00:18:36.770
Then there is need the actual
link, and of course media

00:18:36.770 --> 00:18:37.270
queries.

00:18:37.270 --> 00:18:39.720
So you can say, look,
this hint is only relevant

00:18:39.720 --> 00:18:42.690
if I'm on mobile and
my screen is thus big,

00:18:42.690 --> 00:18:46.540
or it's only relevant for high
DPI screens and all the rest.

00:18:46.540 --> 00:18:47.360
That's as expected.

00:18:47.360 --> 00:18:49.840
And probabilities,
we'll talk about that.

00:18:49.840 --> 00:18:52.570
Let's look at the simplest one
and the first one, preconnect.

00:18:52.570 --> 00:18:54.650
It basically just
says, look, there's

00:18:54.650 --> 00:18:58.380
a lot of latency that is spent
just doing the DNS, the TCP,

00:18:58.380 --> 00:19:00.130
and the TLS because
increasingly, we

00:19:00.130 --> 00:19:04.000
need to just secure
all the things.

00:19:04.000 --> 00:19:05.740
What we can do here
is we can say, look,

00:19:05.740 --> 00:19:09.940
I think I'm going to be fetching
resources from the server.

00:19:09.940 --> 00:19:12.900
I'm not yet sure what resources
exactly I'm going to fetch.

00:19:12.900 --> 00:19:14.780
For example, you have
some dynamic thing

00:19:14.780 --> 00:19:16.657
that you need to
fetch, like I know

00:19:16.657 --> 00:19:18.490
I'm going to have to
connect to an ad server

00:19:18.490 --> 00:19:19.530
and request some ads.

00:19:19.530 --> 00:19:22.020
I'm not sure what they are
yet, so just start doing

00:19:22.020 --> 00:19:23.951
that now, and by the
time you're done,

00:19:23.951 --> 00:19:25.950
I'll probably know the
actual URL and everything

00:19:25.950 --> 00:19:27.490
will be much better.

00:19:27.490 --> 00:19:31.200
But then you can also say, look,
sometimes I'm not quite sure.

00:19:31.200 --> 00:19:34.810
I may need to connect to
this thing, but maybe not,

00:19:34.810 --> 00:19:36.930
and that's why we
have probability.

00:19:36.930 --> 00:19:39.540
Probability allows you to
express some sort of notion of,

00:19:39.540 --> 00:19:42.567
I may or may not
need this thing.

00:19:42.567 --> 00:19:44.650
You'll see why this becomes
more relevant for some

00:19:44.650 --> 00:19:45.442
of the other hints.

00:19:45.442 --> 00:19:46.816
This is one of
those things where

00:19:46.816 --> 00:19:48.710
you can be anticipating
user behavior.

00:19:48.710 --> 00:19:51.389
You could say, well, if a
user expands the NBA section,

00:19:51.389 --> 00:19:53.180
I will need to connect
to these five things

00:19:53.180 --> 00:19:54.861
to fetch the other
images, and I think

00:19:54.861 --> 00:19:56.360
the probability of
the user actually

00:19:56.360 --> 00:19:59.870
doing that is about 0.75,
something like that.

00:19:59.870 --> 00:20:02.010
So if you tell us that
the probability is one,

00:20:02.010 --> 00:20:04.490
it basically means it's a
required hint and the user

00:20:04.490 --> 00:20:06.980
agent must execute it,
whereas everything else is up

00:20:06.980 --> 00:20:08.120
for grabs.

00:20:08.120 --> 00:20:10.220
The observation
here is that these

00:20:10.220 --> 00:20:16.120
are speculative optimizations
that could, in fact, request

00:20:16.120 --> 00:20:20.022
extra resources
which may go unused.

00:20:20.022 --> 00:20:21.480
If you're really,
really aggressive

00:20:21.480 --> 00:20:23.120
with all your prefetching
and all the rest,

00:20:23.120 --> 00:20:25.490
you're going to fetch a lot
of data that you'll never use.

00:20:25.490 --> 00:20:27.906
That's also not good because
you've consumed a user's data

00:20:27.906 --> 00:20:30.560
plan, battery, and all the rest.

00:20:30.560 --> 00:20:34.250
So as an example,
let's say two hints.

00:20:34.250 --> 00:20:38.960
We have a preconnect with 1.0
and a preconnect with 0.4.

00:20:38.960 --> 00:20:42.330
Depending on how the
user agent is currently,

00:20:42.330 --> 00:20:45.960
or how the device is doing
currently, it will say,

00:20:45.960 --> 00:20:49.330
great, I've got full battery,
I happen to be on Wi-Fi,

00:20:49.330 --> 00:20:51.190
I've got a ton of resources.

00:20:51.190 --> 00:20:53.060
I'm just going to
follow this whole thing.

00:20:53.060 --> 00:20:56.150
And in fact, for 1.0, that's
pretty much guaranteed.

00:20:56.150 --> 00:21:00.040
But for a low probability
hint, something like 0.4,

00:21:00.040 --> 00:21:02.010
like you may or may
not use this and I

00:21:02.010 --> 00:21:05.720
happen to be running
low on battery,

00:21:05.720 --> 00:21:07.970
maybe I'll skip the hint
entirely, but for this case,

00:21:07.970 --> 00:21:12.170
maybe I'll just do the DNS
preconnect, or the preresolve,

00:21:12.170 --> 00:21:12.850
rather.

00:21:12.850 --> 00:21:17.080
So the user agent reserves the
right to shift some of the work

00:21:17.080 --> 00:21:20.250
and figure out what is
the optimal strategy

00:21:20.250 --> 00:21:24.060
to improve the user
experience here.

00:21:24.060 --> 00:21:25.260
Next, we get to preload.

00:21:25.260 --> 00:21:26.426
This is kind of interesting.

00:21:26.426 --> 00:21:28.430
This is basically a
declarative way of saying,

00:21:28.430 --> 00:21:29.810
I need this resource.

00:21:29.810 --> 00:21:31.820
Preconnect was just
a way for you to say,

00:21:31.820 --> 00:21:33.470
I need to connect
to that server,

00:21:33.470 --> 00:21:37.370
and that's important because
it just takes a long time.

00:21:37.370 --> 00:21:40.790
For preload, think
of this as XHR kind

00:21:40.790 --> 00:21:42.605
of, but in a declarative way.

00:21:42.605 --> 00:21:43.980
What you're saying
here is, look,

00:21:43.980 --> 00:21:46.740
I will need this
critical CSS file.

00:21:46.740 --> 00:21:48.687
Please fetch it as if
it's a style sheet.

00:21:48.687 --> 00:21:49.770
I will definitely need it.

00:21:49.770 --> 00:21:52.970
Only fetch it if the screen
matches this media query,

00:21:52.970 --> 00:21:55.810
or if this media query
is matched, rather.

00:21:55.810 --> 00:21:58.710
The difference here
between fetching this

00:21:58.710 --> 00:22:01.970
as a regular style sheet is that
it's actually not processed.

00:22:01.970 --> 00:22:04.730
This is just downloading.

00:22:04.730 --> 00:22:05.960
Please just download this.

00:22:05.960 --> 00:22:07.700
Don't parse the CSS.

00:22:07.700 --> 00:22:08.780
Don't execute.

00:22:08.780 --> 00:22:10.340
Don't apply it to
the current page.

00:22:10.340 --> 00:22:12.940
I will tell you later when
I want this to be applied.

00:22:12.940 --> 00:22:16.100
This is really cool because
today, whenever you include

00:22:16.100 --> 00:22:18.210
a link rel style
sheet, we actually

00:22:18.210 --> 00:22:21.152
block rendering on that because
that's just how CSS works.

00:22:21.152 --> 00:22:23.110
Now, you can actually
decouple these two things

00:22:23.110 --> 00:22:25.370
and say, download
this now and later,

00:22:25.370 --> 00:22:28.100
I will inject it into
my dom and all the rest,

00:22:28.100 --> 00:22:30.850
and you can apply it and
do all the other things

00:22:30.850 --> 00:22:33.530
that you need to do.

00:22:33.530 --> 00:22:36.050
This is really, really
useful, and it will solve,

00:22:36.050 --> 00:22:37.841
I think, a lot of
problems for us.

00:22:37.841 --> 00:22:39.340
And then finally,
we have prerender.

00:22:39.340 --> 00:22:42.530
So preload is something that
you would use to fetch resources

00:22:42.530 --> 00:22:44.940
declaratively for the
current page, things

00:22:44.940 --> 00:22:47.860
like critical assets, additional
assets, and all the rest,

00:22:47.860 --> 00:22:51.850
and prerender is something that
you can use for the next page.

00:22:51.850 --> 00:22:53.800
You can say, look, I
think the user's heading

00:22:53.800 --> 00:22:56.870
in that direction next,
and on that next page,

00:22:56.870 --> 00:22:59.530
I will need DCSS
files, these images.

00:22:59.530 --> 00:23:06.180
Maybe it's a big product image
that you want to prerender such

00:23:06.180 --> 00:23:08.832
that it is played
very, very quickly.

00:23:08.832 --> 00:23:10.290
Perhaps the biggest
difference here

00:23:10.290 --> 00:23:12.730
is when the user
starts navigating

00:23:12.730 --> 00:23:16.310
towards the new destination,
we don't cancel those requests.

00:23:16.310 --> 00:23:18.380
Today, if you think
about it, if you initiate

00:23:18.380 --> 00:23:21.470
a bunch of XHR requests and
then the user clicks away,

00:23:21.470 --> 00:23:23.845
we will actually
cancel all of those.

00:23:23.845 --> 00:23:25.220
That's just how
the process works

00:23:25.220 --> 00:23:27.850
because we don't want to persist
those requests because you're

00:23:27.850 --> 00:23:31.510
navigating away from the
page, so cancel all the things

00:23:31.510 --> 00:23:33.600
and let's move on
to the next page.

00:23:33.600 --> 00:23:36.410
Prerender, this
is a hint to say,

00:23:36.410 --> 00:23:39.270
I think I will need this
on the next rendered page,

00:23:39.270 --> 00:23:41.690
so please don't cancel
these things and let them

00:23:41.690 --> 00:23:45.250
continue, and then the next
page can make use of them.

00:23:45.250 --> 00:23:47.630
This way, you can actually
use a similar strategy

00:23:47.630 --> 00:23:48.620
as I described before.

00:23:48.620 --> 00:23:53.560
As the user's heading towards
that link, you could say,

00:23:53.560 --> 00:23:54.850
I know where they're heading.

00:23:54.850 --> 00:23:56.400
I will need these
five resources,

00:23:56.400 --> 00:23:58.100
so start fetching
those now, and then

00:23:58.100 --> 00:24:01.160
the next page can be
rendered much faster.

00:24:01.160 --> 00:24:03.570
So here's a quick overview
of how this actually works

00:24:03.570 --> 00:24:04.990
and where you would use it.

00:24:04.990 --> 00:24:06.610
We have Fetch Start
here at the top.

00:24:06.610 --> 00:24:08.750
This is where we just
start fetching the page,

00:24:08.750 --> 00:24:10.380
and you can inject
a bunch of hints

00:24:10.380 --> 00:24:11.796
right at the
beginning of the page

00:24:11.796 --> 00:24:14.770
to say, look, I will need to
preconnect to these servers,

00:24:14.770 --> 00:24:17.070
I will need to prefetch
these resources.

00:24:17.070 --> 00:24:17.940
Do all that for me.

00:24:17.940 --> 00:24:22.640
This is a way for you to help
optimize the initial render.

00:24:22.640 --> 00:24:25.390
Once the page is rendered, you
have all of your regular tools.

00:24:25.390 --> 00:24:28.200
You have the XHR, the images,
the scripts, and all the rest.

00:24:28.200 --> 00:24:29.510
None of that has changed.

00:24:29.510 --> 00:24:30.850
Everything's the same.

00:24:30.850 --> 00:24:33.460
Then finally, there is
another transition here,

00:24:33.460 --> 00:24:35.130
which is the user's
navigating away

00:24:35.130 --> 00:24:36.400
or towards a new destination.

00:24:36.400 --> 00:24:38.207
You can say, look,
this is great.

00:24:38.207 --> 00:24:40.290
This is where you use
prerender because you inject

00:24:40.290 --> 00:24:42.470
the prerender hints
on the current page

00:24:42.470 --> 00:24:46.220
but they will be used
on the next page.

00:24:46.220 --> 00:24:48.140
That's the only
distinction, really,

00:24:48.140 --> 00:24:52.220
the important distinction
between preload and prerender.

00:24:52.220 --> 00:24:53.990
This is a working, living doc.

00:24:53.990 --> 00:24:55.190
There's a lot of examples.

00:24:55.190 --> 00:24:58.490
The spec is something
that we've been working on

00:24:58.490 --> 00:25:01.911
in the webperf group for
a couple of months now.

00:25:01.911 --> 00:25:03.160
Please check it out on GitHub.

00:25:03.160 --> 00:25:04.700
There's a lot of
examples in there.

00:25:04.700 --> 00:25:06.120
I would love to
get your feedback

00:25:06.120 --> 00:25:08.500
in terms of what are the other
use cases that perhaps are

00:25:08.500 --> 00:25:10.790
missing, that we're not
covering, and all the rest.

00:25:10.790 --> 00:25:11.623
Take a read through.

00:25:11.623 --> 00:25:16.950
I tried to put as many
examples in there as I could.

00:25:16.950 --> 00:25:17.950
This is a quick summary.

00:25:17.950 --> 00:25:20.480
If you're not familiar
with these APIs,

00:25:20.480 --> 00:25:21.540
just follow these links.

00:25:21.540 --> 00:25:22.460
I'll share the slides.

00:25:22.460 --> 00:25:24.626
You don't need to copy that
because you can actually

00:25:24.626 --> 00:25:27.560
find the slides at
pirateperf and perfmatters.

00:25:30.540 --> 00:25:31.040
All right.

00:25:31.040 --> 00:25:32.120
Thank you.

00:25:32.120 --> 00:25:33.670
[APPLAUSE]

