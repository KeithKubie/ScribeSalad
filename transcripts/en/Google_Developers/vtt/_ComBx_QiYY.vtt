WEBVTT
Kind: captions
Language: en

00:00:00.610 --> 00:00:04.010
Sights, sounds, and music
are important components

00:00:04.010 --> 00:00:05.330
of our everyday lives.

00:00:05.330 --> 00:00:09.370
And even more so for the Android
ecosystem and the apps therein.

00:00:09.370 --> 00:00:12.280
My name is Lajos from the
Android Video Framework Team.

00:00:12.280 --> 00:00:15.020
I'm going to talk about how
to create great multimedia

00:00:15.020 --> 00:00:18.350
experiences in Android
using some of our newer APIs

00:00:18.350 --> 00:00:20.214
with a focus on video.

00:00:20.214 --> 00:00:22.380
The good news is, you don't
have to be a [INAUDIBLE]

00:00:22.380 --> 00:00:25.120
to add impressive multimedia
to your application

00:00:25.120 --> 00:00:28.010
because Android does the
heavy lifting for you.

00:00:28.010 --> 00:00:31.050
Android has easy to use,
high level APIs that

00:00:31.050 --> 00:00:33.580
allow you to do some of
the most common media

00:00:33.580 --> 00:00:35.440
tasks with minimal effort.

00:00:35.440 --> 00:00:37.750
Namely, to play
and record video,

00:00:37.750 --> 00:00:41.650
and also to take advantage
of external displays.

00:00:41.650 --> 00:00:43.480
Let's discuss video playback.

00:00:43.480 --> 00:00:45.160
Are you ready for
some good news?

00:00:45.160 --> 00:00:46.490
Stop the presses.

00:00:46.490 --> 00:00:49.700
In the L Developer Preview,
we have dramatically

00:00:49.700 --> 00:00:51.850
improved the quality
of video playback

00:00:51.850 --> 00:00:55.720
when using the high level APIs
for the most common video frame

00:00:55.720 --> 00:00:56.610
rates.

00:00:56.610 --> 00:00:57.860
OK, then.

00:00:57.860 --> 00:01:01.810
The simplest way to play back
a video is using intents.

00:01:01.810 --> 00:01:06.440
The benefit is that it uses the
user's preferred media player.

00:01:06.440 --> 00:01:08.330
On the other hand,
this means that you

00:01:08.330 --> 00:01:11.480
will have no control of
the playback experience.

00:01:11.480 --> 00:01:15.540
Therefore, use this approach if
the media playback experience

00:01:15.540 --> 00:01:18.370
is not an essential part
of your application.

00:01:18.370 --> 00:01:20.800
When using intents
to play media,

00:01:20.800 --> 00:01:24.530
always set the media type--
as illustrated in this code

00:01:24.530 --> 00:01:27.760
sample-- so that the system
can select the best media

00:01:27.760 --> 00:01:30.020
player for your content.

00:01:30.020 --> 00:01:32.560
The next simplest way
to play back video

00:01:32.560 --> 00:01:34.460
is using the system player.

00:01:34.460 --> 00:01:37.380
MediaPlayer has been around
since the very first Android

00:01:37.380 --> 00:01:39.410
release and it is
the easiest way

00:01:39.410 --> 00:01:41.670
to add videos to
your application.

00:01:41.670 --> 00:01:44.370
And it allows some
level of control,

00:01:44.370 --> 00:01:47.000
such as pause and
seek, as well as

00:01:47.000 --> 00:01:49.180
selecting the output surface.

00:01:49.180 --> 00:01:51.890
MediaPlayer has
extensive documentation.

00:01:51.890 --> 00:01:55.330
Check out the API reference
and don't miss the API guide

00:01:55.330 --> 00:01:58.980
for advice on some common
tasks and headaches.

00:01:58.980 --> 00:02:01.530
MediaPlayer can be
used for local files

00:02:01.530 --> 00:02:04.200
as well as to play stream
media from the network.

00:02:04.200 --> 00:02:09.259
Supported files include 3GP,
MP4, and WebM files over RTSP

00:02:09.259 --> 00:02:11.480
and HTTP streaming.

00:02:11.480 --> 00:02:14.540
MediaPlayer also supports
adaptive video playback

00:02:14.540 --> 00:02:18.110
using HLS, HTTP Live Streaming.

00:02:18.110 --> 00:02:20.570
For more information on
the supported data sources

00:02:20.570 --> 00:02:24.660
and media formats, click
on the link on the screen.

00:02:24.660 --> 00:02:27.830
Now let's dive into how,
or more appropriately,

00:02:27.830 --> 00:02:30.160
where to display a video.

00:02:30.160 --> 00:02:33.530
MediaPlayer displays video on
a surface, which can either

00:02:33.530 --> 00:02:37.240
be the surface of a
SurfaceView or a GL texture.

00:02:37.240 --> 00:02:41.010
Ice Cream Sandwich also added
support for TextureView.

00:02:41.010 --> 00:02:42.480
A word of advice.

00:02:42.480 --> 00:02:45.970
Surfaces may change or
be deleted dynamically,

00:02:45.970 --> 00:02:49.330
so it is a recommended to
implement a Surface Holder

00:02:49.330 --> 00:02:50.780
Listener.

00:02:50.780 --> 00:02:53.340
This is how you display
video on a SurfaceView.

00:02:53.340 --> 00:02:56.200
The main advantage of
using the SurfaceView

00:02:56.200 --> 00:03:00.230
is that it is the only way
to display protected content.

00:03:00.230 --> 00:03:03.750
However, since it is a window,
not technically a view,

00:03:03.750 --> 00:03:06.660
it cannot be animated
like other views.

00:03:06.660 --> 00:03:10.440
Here, the example is
updated to use TextureView.

00:03:10.440 --> 00:03:13.470
TextureView, introduced
in API Level 14,

00:03:13.470 --> 00:03:17.920
is similar to a SurfaceView
except that it uses GL textures

00:03:17.920 --> 00:03:19.600
and it is truly a view.

00:03:19.600 --> 00:03:22.850
And as such, it can be animated.

00:03:22.850 --> 00:03:25.515
You can also use a texture
output of the media player

00:03:25.515 --> 00:03:28.310
in a GL composition
and display that

00:03:28.310 --> 00:03:31.570
in a GLSurfaceView
or a TextureView.

00:03:31.570 --> 00:03:33.450
This is how you
configure MediaPlayer

00:03:33.450 --> 00:03:35.710
to use a Surface Texture.

00:03:35.710 --> 00:03:38.000
One of the latest
additions to MediaPlayer

00:03:38.000 --> 00:03:40.700
is the ability to
display subtitles.

00:03:40.700 --> 00:03:42.620
It was introduced in KitKat.

00:03:42.620 --> 00:03:44.920
And you need to use
a VideoView for this.

00:03:44.920 --> 00:03:48.610
A VideoView is basically a
SurfaceView with a dedicated

00:03:48.610 --> 00:03:53.090
MediaPlayer object plus the
ability to display subtitles.

00:03:53.090 --> 00:03:56.720
Android KitKat added support
for WebVTT subtitles.

00:03:56.720 --> 00:04:02.700
However, some WebVTT features
are not supported at this time.

00:04:02.700 --> 00:04:06.710
Use MediaPlayer getTrackInfo
to list the available subtitle

00:04:06.710 --> 00:04:07.770
tracks.

00:04:07.770 --> 00:04:11.160
If playing an HTTP live
stream, the WebVTT subtitle

00:04:11.160 --> 00:04:14.580
tracks within are automatically
included in the media track

00:04:14.580 --> 00:04:15.390
list.

00:04:15.390 --> 00:04:18.880
You can also add subtitle
tracks using VideoView's Add

00:04:18.880 --> 00:04:22.510
Subtitle Source Method,
as illustrated here.

00:04:22.510 --> 00:04:26.110
You can monitor the success
of adding a subtitle track

00:04:26.110 --> 00:04:28.620
using MediaPlayer's
OnInfoListener.

00:04:28.620 --> 00:04:31.020
If the subtitle track has
been added successfully,

00:04:31.020 --> 00:04:33.520
yay, a new track
has been created

00:04:33.520 --> 00:04:36.390
and onInfo is called
with metadata update.

00:04:36.390 --> 00:04:38.390
On the other hand,
if an error occurred

00:04:38.390 --> 00:04:41.430
onInfo is called with either
an unsupported subtitle

00:04:41.430 --> 00:04:43.980
or a subtitle timed out message.

00:04:43.980 --> 00:04:48.310
You cannot programmatically
enable or disable subtitles.

00:04:48.310 --> 00:04:51.915
This can only be done using
the System Preferences which

00:04:51.915 --> 00:04:55.110
you can bring up using
this highlighted intent.

00:04:55.110 --> 00:04:57.990
There can be at most one
selected subtitle track

00:04:57.990 --> 00:05:00.640
at a time on a single VideoView.

00:05:00.640 --> 00:05:04.250
By default, the first track
that best matches the System

00:05:04.250 --> 00:05:06.170
Preferences is selected.

00:05:06.170 --> 00:05:09.270
This can be none if
no track matches.

00:05:09.270 --> 00:05:12.370
If the preferences change,
the default track selection

00:05:12.370 --> 00:05:14.830
is automatically repeated.

00:05:14.830 --> 00:05:17.170
Each subtitle has
four attributes

00:05:17.170 --> 00:05:19.160
that are relevant
for track selection.

00:05:19.160 --> 00:05:22.610
The first three, forced,
default, and autoselect,

00:05:22.610 --> 00:05:25.890
are yes/no flags that are
commonly used for subtitles.

00:05:25.890 --> 00:05:30.010
The last, and also arguably
least important attribute,

00:05:30.010 --> 00:05:31.450
is its language.

00:05:31.450 --> 00:05:34.040
The default track
selection is quite complex.

00:05:34.040 --> 00:05:37.470
Each track is weighed
by several factors.

00:05:37.470 --> 00:05:40.290
If captioning is enabled,
first and foremost,

00:05:40.290 --> 00:05:42.810
we prefer tracks not
marked as forced.

00:05:42.810 --> 00:05:45.760
Then, we prefer tracks
marked as default.

00:05:45.760 --> 00:05:48.370
But this vector is only used
if the captioning language

00:05:48.370 --> 00:05:49.700
is set to default.

00:05:49.700 --> 00:05:53.470
Third, we prefer tracks marked
for autoselect, which we assume

00:05:53.470 --> 00:05:56.590
to be okays, unless
marked otherwise.

00:05:56.590 --> 00:06:00.110
Lastly, we favor tracks that
match the selected captioning

00:06:00.110 --> 00:06:01.350
language.

00:06:01.350 --> 00:06:04.970
A track must have at least
one of these flags set

00:06:04.970 --> 00:06:08.560
or match the explicitly
selected captioning language

00:06:08.560 --> 00:06:10.380
to qualify it.

00:06:10.380 --> 00:06:14.310
If captions are off, only
forced tracks are considered.

00:06:14.310 --> 00:06:17.000
But the rest of the
priorities remain.

00:06:17.000 --> 00:06:20.100
An application can also use
MediaPlayer's select track

00:06:20.100 --> 00:06:22.710
and deselect track to
programmatically set

00:06:22.710 --> 00:06:24.230
the subtitle track.

00:06:24.230 --> 00:06:27.040
Once this is done, however,
changes in the System

00:06:27.040 --> 00:06:30.730
Preferences will have no effect
on the selected subtitle track

00:06:30.730 --> 00:06:32.860
until the VideoView is reset.

00:06:32.860 --> 00:06:34.790
You are on your own.

00:06:34.790 --> 00:06:36.000
But all is not lost.

00:06:36.000 --> 00:06:40.940
You can and should register
for CaptioningChangeListener

00:06:40.940 --> 00:06:44.890
callback, as illustrated here,
so that you can be notified

00:06:44.890 --> 00:06:47.480
if the captioning has been
turned on, turned off,

00:06:47.480 --> 00:06:49.970
or if the locale has changed.

00:06:49.970 --> 00:06:52.470
The other two callbacks,
font and style change,

00:06:52.470 --> 00:06:56.220
are already handled for you
by the subtitle renderer.

00:06:56.220 --> 00:06:58.790
Now let's talk about
recording video.

00:06:58.790 --> 00:07:01.440
The simplest way to capture
video, you guessed it,

00:07:01.440 --> 00:07:05.040
is using intents, which launches
the user's preferred camera

00:07:05.040 --> 00:07:08.410
application to record a
video file from the camera.

00:07:08.410 --> 00:07:12.560
There is very limited ability to
supply configuration parameters

00:07:12.560 --> 00:07:14.150
for the capture video.

00:07:14.150 --> 00:07:17.620
As such, the quality
of the resulting video

00:07:17.620 --> 00:07:21.000
will strongly depend on the
user's device and preferred

00:07:21.000 --> 00:07:22.490
camera application.

00:07:22.490 --> 00:07:25.660
Therefore, this
approach is recommended

00:07:25.660 --> 00:07:27.230
if the quality of
the video recording

00:07:27.230 --> 00:07:29.640
is not essential for your task.

00:07:29.640 --> 00:07:33.270
You can find more details on how
to use intents to capture video

00:07:33.270 --> 00:07:35.080
at this link.

00:07:35.080 --> 00:07:38.410
The preferred way to easily
capture or record video

00:07:38.410 --> 00:07:42.280
into a local file is using
the system MediaRecorder.

00:07:42.280 --> 00:07:45.440
MediaRecorder has been around
the whole life of Android.

00:07:45.440 --> 00:07:47.170
And it allows some
level of control

00:07:47.170 --> 00:07:51.286
over the video-- yay-- such
as its resolution and format.

00:07:51.286 --> 00:07:52.910
I'm not going to say
too much about it,

00:07:52.910 --> 00:07:55.980
as there is a great developer
guide available for you

00:07:55.980 --> 00:07:58.680
for using the MediaRecorder
to capture video.

00:07:58.680 --> 00:07:59.810
Check it out.

00:07:59.810 --> 00:08:01.850
And use MediaRecorder.

00:08:01.850 --> 00:08:02.810
Just one thing.

00:08:02.810 --> 00:08:05.260
In the L Developer
Preview, the added

00:08:05.260 --> 00:08:08.310
support to record
video from the Surface.

00:08:08.310 --> 00:08:09.220
Ta da.

00:08:09.220 --> 00:08:13.120
I can just see the clouds part
and the sun shine through.

00:08:13.120 --> 00:08:14.990
Talking about things
that are heating up,

00:08:14.990 --> 00:08:16.620
it seems that
everybody is buzzing

00:08:16.620 --> 00:08:18.780
about 2nd Screen experience.

00:08:18.780 --> 00:08:21.120
Android has you covered here.

00:08:21.120 --> 00:08:25.220
You can use the Google Cast
SDK to launch content on a cast

00:08:25.220 --> 00:08:28.250
receiver device,
such as a Chromecast.

00:08:28.250 --> 00:08:31.900
The Cast sender API is
supported for all Android 2.3

00:08:31.900 --> 00:08:33.630
or later devices.

00:08:33.630 --> 00:08:37.240
As of KitKat MR1, you can
also mirror your screen

00:08:37.240 --> 00:08:39.440
onto Google Cast receivers.

00:08:39.440 --> 00:08:42.280
Use the presentation
class for this purpose.

00:08:42.280 --> 00:08:45.450
A presentation is a
special kind of dialogue

00:08:45.450 --> 00:08:48.280
whose purpose is to
show specific content

00:08:48.280 --> 00:08:49.890
on a secondary display.

00:08:49.890 --> 00:08:52.340
There are great API
guides and references

00:08:52.340 --> 00:08:55.180
for the media router and
presentation classes.

00:08:55.180 --> 00:08:59.110
There are also two fantastic
second screen sample apps

00:08:59.110 --> 00:09:01.480
in the Android SDK
that use the display

00:09:01.480 --> 00:09:05.350
manager or the MediaRouter
to detect additional screens.

00:09:05.350 --> 00:09:07.440
Be sure to check them out.

00:09:07.440 --> 00:09:10.490
That concludes this episode on
building great media experience

00:09:10.490 --> 00:09:11.410
on Android.

00:09:11.410 --> 00:09:15.380
Now go out and experiment with
the high level media APIs.

00:09:15.380 --> 00:09:18.570
For more information, as always,
visit the Android developer

00:09:18.570 --> 00:09:21.710
website for API reference,
guides, and sample

00:09:21.710 --> 00:09:22.870
applications.

00:09:22.870 --> 00:09:24.980
Thank you for your time.

