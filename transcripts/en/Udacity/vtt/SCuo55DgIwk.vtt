WEBVTT
Kind: captions
Language: en

00:00:00.370 --> 00:00:02.780
I want you to imagine
a situation like this,

00:00:02.780 --> 00:00:07.010
where you're setting an Event listener
after the event has already fired.

00:00:07.010 --> 00:00:07.600
What happens?

00:00:08.940 --> 00:00:11.850
Nothing, if this event
doesn't fire again,

00:00:11.850 --> 00:00:14.830
then this Event listener
never gets called.

00:00:14.830 --> 00:00:18.590
Now imagine you're using promises and
you set an action to occur when

00:00:18.590 --> 00:00:23.750
a Promise resolves here which is after
the promise has already resolved.

00:00:23.750 --> 00:00:24.904
Guess what?

00:00:24.904 --> 00:00:26.761
This will execute.

00:00:26.761 --> 00:00:31.346
Compare this to Event listener example
where the Event listener would never get

00:00:31.346 --> 00:00:34.296
called if it's set after
the event already fired.

00:00:34.296 --> 00:00:36.164
I want to quickly show you some code.

00:00:36.164 --> 00:00:37.857
This is a promise constructor, and

00:00:37.857 --> 00:00:41.150
you'll be learning more about
this in the next video.

00:00:41.150 --> 00:00:44.870
This methods, resolve,
settles the promise.

00:00:44.870 --> 00:00:47.250
A promise can only settle once.

00:00:47.250 --> 00:00:50.910
So in this scenario,
the second resolve is doing nothing.

00:00:50.910 --> 00:00:53.530
Nothing's going to happen,
it's going to go by unnoticed.

00:00:53.530 --> 00:00:55.160
Compare this to events.

00:00:55.160 --> 00:00:59.890
An event can fire many times, but
a promise can only settle once.

00:00:59.890 --> 00:01:02.450
Promises execute in the main thread,

00:01:02.450 --> 00:01:06.360
which means that they are still
potentially blocking.

00:01:06.360 --> 00:01:10.620
If the work that happens inside the
promise takes a long time, there's still

00:01:10.620 --> 00:01:14.870
a chance it could block the work the
browser needs to do to render the page.

00:01:14.870 --> 00:01:18.070
If so, the frame rate of your
app is going to suffer, and

00:01:18.070 --> 00:01:21.520
you'll probably hear your
users complain about jank.

00:01:21.520 --> 00:01:26.340
Promises are not a pass for safely
executing long running operations.

00:01:26.340 --> 00:01:28.144
They're simply a technique for

00:01:28.144 --> 00:01:32.550
deciding what will happen when
an asynchronous task settles.

00:01:32.550 --> 00:01:36.300
Think of them as try catch wrappers
around asynchronous work.

00:01:37.360 --> 00:01:38.900
Okay, it's time for a quiz.

