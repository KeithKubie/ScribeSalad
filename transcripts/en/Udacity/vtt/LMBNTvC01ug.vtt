WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:05.000
What you could get out of that is an automatic cause-effect chain

00:00:05.000 --> 00:00:11.000
isolating the causes for different places during the program execution.

00:00:11.000 --> 00:00:17.000
For instance, at the beginning s had a value of double quote and &lt;,

00:00:17.000 --> 00:00:24.000
then c became a double quote again are well-defined in the failing room,

00:00:24.000 --> 00:00:31.000
then quote became true, and then out became &lt;, which caused this version to fail.

00:00:31.000 --> 00:00:36.000
This cause-effect chain is what you get when you apply delta debugging

00:00:36.000 --> 00:00:40.000
on state differences at various places during the execution.

00:00:40.000 --> 00:00:45.000
In producing such a cause-effect chain automatically is your homework.

00:00:45.000 --> 00:00:49.000
This is a very cool outcome but is also a pretty tricky homework.

00:00:49.000 --> 00:00:54.000
In particular, setting variables while the program is executing

00:00:54.000 --> 00:01:00.000
is a feature that's very rarely used, very rarely tested, and therefore full of surprises.

00:01:00.000 --> 00:01:04.000
On the web page, you will find a number of hints and code templates

00:01:04.000 --> 00:01:07.000
that help you in accomplishing this task.

00:01:07.000 --> 00:01:11.000
Having such a cause-effect chain and getting it automatically

00:01:11.000 --> 00:01:13.000
sounds like a great promise for debugging

00:01:13.000 --> 00:01:19.000
In particular because it very neatly tells you the story of how the failure came to be.

00:01:19.000 --> 00:01:25.000
In particular the relationship of c having a double quote and then the quote variable becoming true

00:01:25.000 --> 00:01:29.000
points you directly to the condition, which is at fault at this point.

00:01:29.000 --> 00:01:31.000
It should--oh, sorry.

00:01:31.000 --> 00:01:36.000
This is already the closest to a fully automatic debugging tool we can get at this point.

00:01:36.000 --> 00:01:40.000
However, it is worth to very much consider the limitations.

00:01:40.000 --> 00:01:43.000
First and foremost you need to similar runs.

00:01:43.000 --> 00:01:50.000
The higher the similarity, the higher the chances of finding a small set of failure-inducing differences.

00:01:50.000 --> 00:01:54.000
Even in our homework implementation, there is many things we don't handle.

00:01:54.000 --> 00:01:57.000
We'll only handle scalar values and strings.

00:01:57.000 --> 00:02:04.000
We won't go into details of how to find differences between say, this or dictionaries

00:02:04.000 --> 00:02:10.000
or graph structures, and finally, all of these are still very experimental,

00:02:10.000 --> 00:02:14.000
but the fact that it's experimental calls for many ways to extend this,

00:02:14.000 --> 00:02:17.000
and this again can be part of your homework.

00:02:17.000 --> 00:02:23.000
Again, on the web page, you will find a number of ways of how to further expand this.

00:02:23.000 --> 00:02:25.000
So go and build fully automatic debugging for Python programs. Enjoy.

