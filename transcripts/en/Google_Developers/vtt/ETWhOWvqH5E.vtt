WEBVTT
Kind: captions
Language: en

00:00:00.500 --> 00:00:03.864
[MUSIC PLAYING]

00:00:06.280 --> 00:00:08.080
INDRANIL CHAKRABORTY:
Hello, everyone.

00:00:08.080 --> 00:00:09.670
Good afternoon.

00:00:09.670 --> 00:00:11.560
Hope you are all
enjoying the second day

00:00:11.560 --> 00:00:14.710
at I/O. Thank you for attending
this session in person

00:00:14.710 --> 00:00:16.570
and by live streaming.

00:00:16.570 --> 00:00:18.160
I'm Indranil Chakraborty.

00:00:18.160 --> 00:00:20.470
I'm a product guy at
Google Cloud Platform.

00:00:20.470 --> 00:00:23.650
And we also have
Hanwook Kim, who's

00:00:23.650 --> 00:00:28.570
a Product Manager at Android
Things for Enterprise.

00:00:28.570 --> 00:00:32.310
In this session, we're going
to cover three key areas.

00:00:32.310 --> 00:00:34.690
What are the key
products which Google

00:00:34.690 --> 00:00:39.430
offers for IoT, particularly
as it comes to enterprise?

00:00:39.430 --> 00:00:41.860
We're going to talk about
some of the key challenges

00:00:41.860 --> 00:00:44.860
in building IoT
solution, and how Google

00:00:44.860 --> 00:00:46.850
thinks about addressing those.

00:00:46.850 --> 00:00:49.385
And finally, we'll have
some demos for you.

00:00:49.385 --> 00:00:50.260
So let's get started.

00:00:53.240 --> 00:00:56.080
Now, I think parking is a
problem which is near and dear

00:00:56.080 --> 00:00:57.040
to everyone's heart.

00:00:57.040 --> 00:00:58.750
All of us.

00:00:58.750 --> 00:01:03.100
It is estimated that there
are around 800 million parking

00:01:03.100 --> 00:01:05.170
spaces in United States.

00:01:05.170 --> 00:01:09.760
San Francisco city alone has
half a million parking spaces,

00:01:09.760 --> 00:01:12.850
but it's still really
hard to find parking.

00:01:12.850 --> 00:01:16.060
Now, the SF city has
taken some initiative

00:01:16.060 --> 00:01:19.190
in putting sensors in
many of the parking spaces

00:01:19.190 --> 00:01:22.130
so you can detect whether a
parking lot is open or not.

00:01:22.130 --> 00:01:24.520
And that data is sent to cloud.

00:01:24.520 --> 00:01:26.950
So you can check on your
mobile phone which parking

00:01:26.950 --> 00:01:29.020
lots around you are open.

00:01:29.020 --> 00:01:30.956
That is great, because
now you don't have

00:01:30.956 --> 00:01:32.080
to look around for parking.

00:01:32.080 --> 00:01:34.670
But you can just find
parking automatically

00:01:34.670 --> 00:01:36.910
on your mobile phone
and you park there.

00:01:36.910 --> 00:01:40.270
Now, imagine if all the
parking spaces in US

00:01:40.270 --> 00:01:42.210
is connected
through some sensor.

00:01:42.210 --> 00:01:44.470
While each sensor might
be sending a small amount

00:01:44.470 --> 00:01:47.230
of data on a periodic basis.

00:01:47.230 --> 00:01:50.110
But cumulative, that is
a massive influx of data.

00:01:50.110 --> 00:01:51.820
So the question is,
how do we handle

00:01:51.820 --> 00:01:53.230
such a massive influx of data?

00:01:53.230 --> 00:01:55.090
And how do you
build applications

00:01:55.090 --> 00:01:58.030
which really scales?

00:01:58.030 --> 00:02:00.910
We also have some
interesting partners

00:02:00.910 --> 00:02:06.560
who have built interesting
applications for utilities.

00:02:06.560 --> 00:02:09.850
We have a number of smart
meters in the US and in Europe.

00:02:09.850 --> 00:02:12.730
And this number of our
partners and customers

00:02:12.730 --> 00:02:17.290
have connected the smart meter
data from consumer homes.

00:02:17.290 --> 00:02:19.660
And now, with Google
Cloud Platform

00:02:19.660 --> 00:02:21.400
and with other
applications, they

00:02:21.400 --> 00:02:25.450
can provide a pretty real-time
view of the energy usage

00:02:25.450 --> 00:02:27.980
in different regions
for consumers.

00:02:27.980 --> 00:02:33.040
Now, imagine, if all the
smart meters in all the houses

00:02:33.040 --> 00:02:36.100
are connected, imagine
the influx of data.

00:02:36.100 --> 00:02:41.170
There would be millions of smart
meters sending data every hour

00:02:41.170 --> 00:02:42.560
or every 15 minutes.

00:02:42.560 --> 00:02:44.560
That's a massive amount
of data to handle.

00:02:44.560 --> 00:02:46.030
And what about security?

00:02:46.030 --> 00:02:47.860
How do we get
real-time insights?

00:02:47.860 --> 00:02:49.420
Those are all key
questions which

00:02:49.420 --> 00:02:51.878
every developer has as they
think about building enterprise

00:02:51.878 --> 00:02:53.620
applications.

00:02:53.620 --> 00:02:56.000
Google has done some work
with data center optimization

00:02:56.000 --> 00:02:56.500
as well.

00:02:56.500 --> 00:02:59.560
As you know, we've
collected data from HVAC,

00:02:59.560 --> 00:03:02.290
from coolers, from
chillers in data centers,

00:03:02.290 --> 00:03:05.650
and we've used machine learning
to overall improve our power

00:03:05.650 --> 00:03:08.360
utilization by more than 15%.

00:03:08.360 --> 00:03:10.870
Now, imagine if every building--

00:03:10.870 --> 00:03:14.050
commercial and
residential building--

00:03:14.050 --> 00:03:17.500
can use the same concept
to actively optimize energy

00:03:17.500 --> 00:03:19.460
consumption.

00:03:19.460 --> 00:03:21.070
So there are some
key use cases I just

00:03:21.070 --> 00:03:23.430
laid out in front of you.

00:03:23.430 --> 00:03:27.269
And I think you all know
while phones were bigger

00:03:27.269 --> 00:03:28.810
in terms of growth,
phones are bigger

00:03:28.810 --> 00:03:34.000
than PC, significant growth is
expected for IoT in the coming

00:03:34.000 --> 00:03:34.780
years.

00:03:34.780 --> 00:03:37.380
Depending on the
analyst report you read,

00:03:37.380 --> 00:03:41.710
it is estimated that around
20 to 50 billion devices

00:03:41.710 --> 00:03:44.300
will be connected by 2020.

00:03:44.300 --> 00:03:46.600
While each of these
devices might be sending

00:03:46.600 --> 00:03:48.170
a small amount of bytes--

00:03:48.170 --> 00:03:52.750
a small amount of data every
couple of seconds or minutes,

00:03:52.750 --> 00:03:55.420
cumulatively, it's a
massive influx of data.

00:03:55.420 --> 00:03:58.900
So that creates three
challenges as we think of

00:03:58.900 --> 00:04:01.120
and what we hear from
partners and developers.

00:04:01.120 --> 00:04:02.860
One is security.

00:04:02.860 --> 00:04:06.160
How do you ensure that all
these devices are secure?

00:04:06.160 --> 00:04:07.930
How do you ensure
that all those devices

00:04:07.930 --> 00:04:12.490
have the latest operating system
and the right security patches?

00:04:12.490 --> 00:04:14.230
And how do you ensure
that the data which

00:04:14.230 --> 00:04:19.010
you're importing into cloud is
protected and secure as well?

00:04:19.010 --> 00:04:20.230
Second is scale.

00:04:20.230 --> 00:04:23.050
When you have millions of
billions of devices connected

00:04:23.050 --> 00:04:25.840
to cloud or to the
internet, there's

00:04:25.840 --> 00:04:27.500
going to be a massive
influx of data.

00:04:27.500 --> 00:04:31.100
So how do you handle all this
data in a cost-effective way?

00:04:31.100 --> 00:04:34.480
And also, make sure that you
can manage this massive amount

00:04:34.480 --> 00:04:37.390
of devices, which are
globally dispersed,

00:04:37.390 --> 00:04:39.910
in a way where you know
that all those devices have

00:04:39.910 --> 00:04:42.640
the right firmware version,
has the right security patches

00:04:42.640 --> 00:04:43.580
as well?

00:04:43.580 --> 00:04:47.080
And finally, what do you
do with all this data?

00:04:47.080 --> 00:04:49.330
Each of these devices
may have-- they're

00:04:49.330 --> 00:04:50.800
sending massive amount of data.

00:04:50.800 --> 00:04:53.049
How do you cost-effectively
store the data?

00:04:53.049 --> 00:04:55.090
How do you analyze the
data so you can get really

00:04:55.090 --> 00:04:56.150
actionable insight?

00:04:56.150 --> 00:04:58.150
And how do you also do
it not just in the cloud,

00:04:58.150 --> 00:05:00.790
but also on the edge?

00:05:00.790 --> 00:05:03.010
So I'm going to
start with how we

00:05:03.010 --> 00:05:07.180
think about these challenges
on the cloud side.

00:05:07.180 --> 00:05:10.480
As you know, Google
has seven products

00:05:10.480 --> 00:05:15.100
which are serving more than
a billion users currently.

00:05:15.100 --> 00:05:17.487
And all these users
are highly-engaged.

00:05:17.487 --> 00:05:19.570
So there's a massive amount
of data back and forth

00:05:19.570 --> 00:05:24.610
between these products, as well
as our cloud infrastructure.

00:05:24.610 --> 00:05:27.520
So as part of our
mission at Google

00:05:27.520 --> 00:05:30.070
to organize world's information
and make it universally

00:05:30.070 --> 00:05:35.440
accessible, we've been working
with data ingestion, storage,

00:05:35.440 --> 00:05:39.880
and getting insight at a
massive scale over a decade.

00:05:39.880 --> 00:05:41.140
In fact, we believe--

00:05:41.140 --> 00:05:44.440
and in the process of
serving these billion

00:05:44.440 --> 00:05:48.100
users, billion-plus users
for these consumer products,

00:05:48.100 --> 00:05:50.800
we have built the world's
best compute infrastructure

00:05:50.800 --> 00:05:53.770
across hardware, software,
networking, and operations

00:05:53.770 --> 00:05:55.300
as well.

00:05:55.300 --> 00:05:56.920
And we've built
our infrastructure

00:05:56.920 --> 00:06:00.400
for developers in a
way where developers

00:06:00.400 --> 00:06:04.510
think of these not as data
centers, but as one computers.

00:06:04.510 --> 00:06:06.490
All these data
centers are connected

00:06:06.490 --> 00:06:07.880
via our global network.

00:06:07.880 --> 00:06:11.270
In fact, we are the
only non-ISP company

00:06:11.270 --> 00:06:14.710
who has under-ocean fiber
connection between data

00:06:14.710 --> 00:06:15.490
centers.

00:06:15.490 --> 00:06:18.400
So as a developer, when you're
accessing Cloud Platform

00:06:18.400 --> 00:06:21.130
and this compute infrastructure
in the data center,

00:06:21.130 --> 00:06:23.200
it's not a collection of
different data center.

00:06:23.200 --> 00:06:25.990
For you, it's just one computer.

00:06:25.990 --> 00:06:28.210
You just write applications
and cloud takes

00:06:28.210 --> 00:06:31.120
care of running them at scale.

00:06:34.060 --> 00:06:36.250
In addition to our data
center infrastructure,

00:06:36.250 --> 00:06:41.200
we've also been working hard in
building up our data management

00:06:41.200 --> 00:06:44.350
and analytics stack as well.

00:06:44.350 --> 00:06:48.910
We've built an open source
MapReduce, Dremel, Bigtable,

00:06:48.910 --> 00:06:52.270
and many others over
the last decade.

00:06:52.270 --> 00:06:54.070
And over the last
couple of years,

00:06:54.070 --> 00:06:57.090
we've started to externalize
these internal tools

00:06:57.090 --> 00:07:01.170
and this tech stack as services
on a Google Cloud Platform

00:07:01.170 --> 00:07:04.770
for our enterprise customers,
developers, and partners.

00:07:04.770 --> 00:07:09.560
So today, for example,
think about BigQuery.

00:07:09.560 --> 00:07:13.690
BigQuery is our data warehousing
and analytics cloud service.

00:07:13.690 --> 00:07:16.440
So when you run a SQL
query on BigQuery today

00:07:16.440 --> 00:07:20.040
on Cloud Platform,
your query essentially

00:07:20.040 --> 00:07:22.650
is running on Dremel,
which we at Google

00:07:22.650 --> 00:07:24.990
internally use for
our applications.

00:07:24.990 --> 00:07:27.646
When you upload some
data on Bigtable,

00:07:27.646 --> 00:07:29.770
you're uploading on a
[INAUDIBLE] Bigtable service,

00:07:29.770 --> 00:07:32.280
which has been used by Search--

00:07:32.280 --> 00:07:34.800
which has been powering
Search, Ads, Gmail, and Google

00:07:34.800 --> 00:07:37.195
Maps since 2006.

00:07:37.195 --> 00:07:39.570
So everything that Google has
built and is in the process

00:07:39.570 --> 00:07:42.460
of being externalized, including
TensorFlow and Spanner,

00:07:42.460 --> 00:07:44.700
which you're already aware of.

00:07:44.700 --> 00:07:48.960
So when it comes
to IoT, we believe

00:07:48.960 --> 00:07:53.070
we have the industry-leading
data, analytics, and machine

00:07:53.070 --> 00:07:55.440
learning services on
Cloud Platform, which

00:07:55.440 --> 00:07:58.530
many of our developers
and enterprise partners

00:07:58.530 --> 00:08:03.030
have been already using
to build applications.

00:08:03.030 --> 00:08:06.420
And one thing they have asked
us many times is, this is great

00:08:06.420 --> 00:08:08.010
that you have all
these services,

00:08:08.010 --> 00:08:10.800
like Pub/Sub, BigQuery,
Dataflow, Bigtable.

00:08:10.800 --> 00:08:15.600
But how do I connect
and manage my devices

00:08:15.600 --> 00:08:17.130
and connect them
to cloud so that I

00:08:17.130 --> 00:08:20.730
can start leveraging these
cloud services which you have?

00:08:20.730 --> 00:08:25.260
So earlier this week, we
announced Cloud IoT Core,

00:08:25.260 --> 00:08:30.060
with a goal to make it really
easy for developers to build

00:08:30.060 --> 00:08:32.590
enterprise IoT applications.

00:08:32.590 --> 00:08:34.610
So what is Cloud IoT Core?

00:08:34.610 --> 00:08:38.220
Cloud IoT Core is a
fully-managed service.

00:08:38.220 --> 00:08:42.419
It's 100% managed running
on Google Cloud Platform.

00:08:42.419 --> 00:08:44.070
Let's talk about security.

00:08:44.070 --> 00:08:46.380
As part of our Cloud
IoT Core, we've

00:08:46.380 --> 00:08:51.150
built from ground up an
MQTT protocol endpoint

00:08:51.150 --> 00:08:53.520
so that you can
bring your existing

00:08:53.520 --> 00:08:59.130
device or your new device and
establish a secure connection

00:08:59.130 --> 00:09:02.640
with Google Cloud
IoT Core over TLS.

00:09:02.640 --> 00:09:07.200
And you can send and receive
telemetry over MQTT messaging

00:09:07.200 --> 00:09:08.190
protocol.

00:09:08.190 --> 00:09:10.950
We understand that a lot
of our enterprise customers

00:09:10.950 --> 00:09:14.520
already have devices that
support standard MQTT protocol.

00:09:14.520 --> 00:09:18.120
So we have built an
MQTT protocol bridge

00:09:18.120 --> 00:09:21.070
so that you can connect your
existing or new device directly

00:09:21.070 --> 00:09:27.030
to cloud and start leveraging
our data analytics services.

00:09:27.030 --> 00:09:30.420
As part of Cloud IoT
core, whether you're

00:09:30.420 --> 00:09:34.170
connecting one device
or millions of device,

00:09:34.170 --> 00:09:36.930
the protocol bridge
scales internally.

00:09:36.930 --> 00:09:39.860
You don't have to worry
about provisioning

00:09:39.860 --> 00:09:42.670
a separate infrastructure
or provisioning a node.

00:09:42.670 --> 00:09:44.456
You don't have to
worry about redundancy.

00:09:44.456 --> 00:09:46.080
You don't have to
worry about sharding.

00:09:46.080 --> 00:09:47.850
We scale internally.

00:09:47.850 --> 00:09:49.560
So that makes it, for
a developer, really

00:09:49.560 --> 00:09:52.650
easy to build application
without worrying about,

00:09:52.650 --> 00:09:56.250
how do you scale from 10
devices to millions of devices

00:09:56.250 --> 00:10:00.930
as you graduate from a prototype
to full-scale deployment?

00:10:00.930 --> 00:10:06.330
And the protocol bridge also
underneath uses Cloud Pub/Sub,

00:10:06.330 --> 00:10:09.924
the foundation of data routing.

00:10:09.924 --> 00:10:12.810
Thanks to Cloud
Pub/Sub now, you can

00:10:12.810 --> 00:10:16.440
access the data, which you have
from your diverse connection

00:10:16.440 --> 00:10:20.760
of devices to Cloud IoT
Core from a center point

00:10:20.760 --> 00:10:22.260
so you can view--

00:10:22.260 --> 00:10:24.540
you can have a global
view of all your data

00:10:24.540 --> 00:10:27.480
points across the
different devices.

00:10:27.480 --> 00:10:31.540
We've also added some
key functionality

00:10:31.540 --> 00:10:34.140
for device management.

00:10:34.140 --> 00:10:36.690
With Cloud IoT Core now,
you can individually

00:10:36.690 --> 00:10:38.610
configure and manage devices.

00:10:38.610 --> 00:10:40.570
And I'll go more
into the details.

00:10:40.570 --> 00:10:45.570
You can also now update and
control the remote devices

00:10:45.570 --> 00:10:47.060
using Cloud IoT Core.

00:10:47.060 --> 00:10:51.240
We have built a set
of APIs, which you

00:10:51.240 --> 00:10:53.340
can use on your applications.

00:10:53.340 --> 00:10:55.050
And we also have
a console, so you

00:10:55.050 --> 00:10:59.130
can use that to manage
your device as well.

00:10:59.130 --> 00:11:01.200
In addition, with
Cloud IoT Core,

00:11:01.200 --> 00:11:05.550
you can provide
granular-level access

00:11:05.550 --> 00:11:10.870
to a group of devices
using Cloud IAM.

00:11:10.870 --> 00:11:12.690
So we're pretty excited
with this release.

00:11:12.690 --> 00:11:15.900
We think this will really
help developers, you guys,

00:11:15.900 --> 00:11:19.230
to start building using your
existing device or even new

00:11:19.230 --> 00:11:22.530
devices running Android Things
or others to connect to cloud

00:11:22.530 --> 00:11:25.830
and start leveraging our data
analytics and state-of-the-art

00:11:25.830 --> 00:11:27.900
machine learning services.

00:11:27.900 --> 00:11:32.250
Now, we understand that
developers and partners,

00:11:32.250 --> 00:11:35.520
as you think about building
enterprise IoT applications,

00:11:35.520 --> 00:11:37.920
you want to build some
quick prototypes to get

00:11:37.920 --> 00:11:41.220
your feet wet, see if there's
an ROI, before you start

00:11:41.220 --> 00:11:43.350
doing full-scale development.

00:11:43.350 --> 00:11:47.190
So as part of our Cloud
IoT Core offering,

00:11:47.190 --> 00:11:54.360
we also have a UI, which will
be available on Cloud Console.

00:11:54.360 --> 00:11:56.430
Before I get into the
UI, let me tell you

00:11:56.430 --> 00:12:01.470
about some of the key
concepts for Cloud IoT Core,

00:12:01.470 --> 00:12:04.350
specifically as it pertains
to device management

00:12:04.350 --> 00:12:05.520
and monitoring.

00:12:05.520 --> 00:12:07.650
We have a notion
of device registry.

00:12:07.650 --> 00:12:09.930
So if you are a
device manufacturer

00:12:09.930 --> 00:12:13.200
and you have 10
categories of products,

00:12:13.200 --> 00:12:15.450
you can create 10 registry.

00:12:15.450 --> 00:12:17.700
And you can register
all those devices

00:12:17.700 --> 00:12:21.170
for each of those
category under a registry.

00:12:21.170 --> 00:12:26.970
And you can also assign
IAM policies and roles

00:12:26.970 --> 00:12:31.020
to control access to users
on those specific registries.

00:12:31.020 --> 00:12:32.880
So if I'm a device
manufacturer and I

00:12:32.880 --> 00:12:36.750
want to make sure that
my users in my customer A

00:12:36.750 --> 00:12:41.930
can only have view access, you
can do that with a registry.

00:12:41.930 --> 00:12:43.800
And you can register
one device or millions

00:12:43.800 --> 00:12:48.540
of devices in that registry.

00:12:48.540 --> 00:12:54.540
So as you can see on the screen,
when you go to Cloud Console,

00:12:54.540 --> 00:12:57.300
on the menu, there's a
section called IoT Core.

00:12:57.300 --> 00:12:59.040
You click on that
and you will see

00:12:59.040 --> 00:13:01.520
a list of different
device registries, which

00:13:01.520 --> 00:13:02.770
you have already created.

00:13:02.770 --> 00:13:05.700
You can also create a new
registry, give it a name,

00:13:05.700 --> 00:13:07.940
select a region,
and assign a Pub/Sub

00:13:07.940 --> 00:13:10.500
topic, which you want all
the devices to publish

00:13:10.500 --> 00:13:12.130
their data to.

00:13:12.130 --> 00:13:14.640
And once you select
on a device registry,

00:13:14.640 --> 00:13:19.500
you will see a list of devices
which has been pre-registered.

00:13:19.500 --> 00:13:22.020
And you can see whether
they're enabled or disabled.

00:13:22.020 --> 00:13:23.670
So with Cloud IoT
Core, we also allow

00:13:23.670 --> 00:13:27.360
you to disable a device
if you think a device has

00:13:27.360 --> 00:13:28.530
become a rogue device.

00:13:28.530 --> 00:13:30.480
Or for the testing
purposes, you want

00:13:30.480 --> 00:13:33.000
to turn off a couple of devices
and just have one device on,

00:13:33.000 --> 00:13:36.720
so you can start testing the
connection to the device.

00:13:36.720 --> 00:13:39.030
For the purpose
of authentication,

00:13:39.030 --> 00:13:40.830
security is pretty
close-- we are

00:13:40.830 --> 00:13:42.400
very particular about security.

00:13:42.400 --> 00:13:44.590
So we wanted to make
sure that as a developer,

00:13:44.590 --> 00:13:47.130
you can individually
authenticate

00:13:47.130 --> 00:13:49.440
a device or a group of devices.

00:13:49.440 --> 00:13:53.525
So Cloud IoT Core has
support for public key-based

00:13:53.525 --> 00:13:54.150
authentication.

00:13:54.150 --> 00:13:56.250
So asymmetric keys
for authentication.

00:13:56.250 --> 00:14:00.120
And the way it works is you can
register your device by adding

00:14:00.120 --> 00:14:02.940
a public key to Cloud IoT Core.

00:14:02.940 --> 00:14:06.090
And the device, when it wants
to connect to Cloud IoT Core,

00:14:06.090 --> 00:14:10.590
it has to create a JSON web
token of the public key,

00:14:10.590 --> 00:14:12.180
and then send it
to Cloud IoT Core.

00:14:12.180 --> 00:14:13.680
That is the identity
of the device.

00:14:13.680 --> 00:14:16.355
And we use that to
authenticate the device

00:14:16.355 --> 00:14:18.480
and make sure that the
device, which is connecting,

00:14:18.480 --> 00:14:20.790
is really a real,
registered device.

00:14:26.250 --> 00:14:28.890
As part of our
launch, we have also

00:14:28.890 --> 00:14:32.670
been working very hard with
a number of device partners.

00:14:32.670 --> 00:14:36.330
So we are very excited that with
the launch of Cloud IoT Core,

00:14:36.330 --> 00:14:40.470
we have announced partnership
with a couple of key leading

00:14:40.470 --> 00:14:44.580
device manufacturers, such as
Intel, Microchip, NXP, Sierra

00:14:44.580 --> 00:14:46.980
Wireless, Marvell,
and many others.

00:14:46.980 --> 00:14:49.050
And we're working
closely with our partners

00:14:49.050 --> 00:14:51.360
to make it easy for
developers to connect

00:14:51.360 --> 00:14:55.200
partner devices to Cloud
IoT Core right off the gate.

00:14:55.200 --> 00:15:03.270
For example, this is a really
tiny microcontroller, ESP8266.

00:15:03.270 --> 00:15:05.310
And thanks to our
partner at Mongoose OS,

00:15:05.310 --> 00:15:09.015
you can now connect a tiny MCU
like this to Google Cloud IoT

00:15:09.015 --> 00:15:13.860
Core and start leveraging the
data and ML services on Cloud.

00:15:13.860 --> 00:15:17.220
So we're very excited
about what we're building

00:15:17.220 --> 00:15:19.470
and how we're working
with our partner ecosystem

00:15:19.470 --> 00:15:21.920
to really help
developers so they can

00:15:21.920 --> 00:15:23.610
build compelling application.

00:15:23.610 --> 00:15:26.010
In addition to
hardware partners,

00:15:26.010 --> 00:15:28.630
we're also working with
application partners as well.

00:15:28.630 --> 00:15:32.280
So we've announced agreements
with a couple of application

00:15:32.280 --> 00:15:35.760
partners, such as Mnubo,
Helium, and a bunch of others

00:15:35.760 --> 00:15:37.440
which are coming along.

00:15:37.440 --> 00:15:40.830
So we're very excited with the
announcement of Cloud IoT Core

00:15:40.830 --> 00:15:42.750
and how we're building
partner ecosystem,

00:15:42.750 --> 00:15:44.280
so that developers
can really start

00:15:44.280 --> 00:15:48.540
building compelling enterprise
application using Google Cloud

00:15:48.540 --> 00:15:49.902
Platform infrastructure.

00:15:49.902 --> 00:15:51.360
I want to spend a
couple of minutes

00:15:51.360 --> 00:15:55.970
on some of the other services,
which really adds value.

00:15:55.970 --> 00:15:59.142
As we think about the
overall IoT platform, some

00:15:59.142 --> 00:16:00.600
of these services
which are already

00:16:00.600 --> 00:16:03.330
existing today in
Cloud, really helps

00:16:03.330 --> 00:16:06.070
you to build compelling
applications.

00:16:06.070 --> 00:16:07.740
One of them is
Google Cloud Pub/Sub.

00:16:07.740 --> 00:16:12.075
What's great about Pub/Sub
is that for Cloud IoT Core,

00:16:12.075 --> 00:16:13.261
it sends--

00:16:13.261 --> 00:16:14.760
all the devices
which are registered

00:16:14.760 --> 00:16:17.740
to a registry, the data
from all those devices

00:16:17.740 --> 00:16:20.790
are published to a
Cloud Pub/Sub topic.

00:16:20.790 --> 00:16:22.590
And what this
allows you to do is

00:16:22.590 --> 00:16:26.220
you can collect data from all
those devices into one topic,

00:16:26.220 --> 00:16:30.000
and then start analyzing it
using downstream services.

00:16:30.000 --> 00:16:32.880
Pub/Sub has durable
message persistence.

00:16:32.880 --> 00:16:37.800
What this means is you
can wait for seven days

00:16:37.800 --> 00:16:40.260
to send a response
back, or you can even

00:16:40.260 --> 00:16:42.600
send it within a minute.

00:16:42.600 --> 00:16:45.450
It also allows you to access
data globally, as I mentioned.

00:16:45.450 --> 00:16:48.960
And what's great about Pub/Sub
is that now the Cloud IoT Core

00:16:48.960 --> 00:16:50.790
integrates easily with Pub/Sub.

00:16:50.790 --> 00:16:53.820
It really separates the
application development

00:16:53.820 --> 00:16:56.910
from your upstream
device firmware changes.

00:16:56.910 --> 00:16:59.670
So you can constantly
update your application,

00:16:59.670 --> 00:17:01.560
build new applications
without needing

00:17:01.560 --> 00:17:03.940
to change your upstream format.

00:17:03.940 --> 00:17:08.880
And Pub/Sub also allows you
to use powerful services

00:17:08.880 --> 00:17:13.230
for building applications such
as Cloud Functions, Dataflow.

00:17:13.230 --> 00:17:16.500
Or even, you can use your
existing ETL pipeline

00:17:16.500 --> 00:17:19.380
or third-party services to
consume the data from all

00:17:19.380 --> 00:17:22.109
those dispersed global
devices and start building

00:17:22.109 --> 00:17:23.465
interesting applications.

00:17:27.109 --> 00:17:30.510
Once you've ingested the data
in a secured way using Cloud IoT

00:17:30.510 --> 00:17:35.090
Core, and once you have routed
the data using Google Cloud

00:17:35.090 --> 00:17:38.330
Pub/Sub such that you
have a global access view,

00:17:38.330 --> 00:17:42.380
you can then start using
our cloud data services

00:17:42.380 --> 00:17:44.285
for analysis,
storage, and insights.

00:17:47.850 --> 00:17:52.070
And this is where we want to
have humans and machines learn

00:17:52.070 --> 00:17:53.220
from the data.

00:17:53.220 --> 00:17:56.060
So you can use BigQuery,
which is our data warehousing

00:17:56.060 --> 00:18:00.500
and analytics platform, to
analyze hundreds of billions

00:18:00.500 --> 00:18:03.680
of rows of data in
a couple of seconds.

00:18:03.680 --> 00:18:07.610
And then you can use
that data to train

00:18:07.610 --> 00:18:08.920
a machine learning model.

00:18:08.920 --> 00:18:14.360
So you can use Datalab to
analyze the data from BigQuery,

00:18:14.360 --> 00:18:18.560
connect it to Cloud ML, train
machine learning models,

00:18:18.560 --> 00:18:21.110
and then eventually
use those model

00:18:21.110 --> 00:18:28.070
to predict either power failure,
demand usage, or maintenance,

00:18:28.070 --> 00:18:29.960
and then send it
to Cloud IoT Core.

00:18:29.960 --> 00:18:32.990
And then from there, you can
either send it some alerts

00:18:32.990 --> 00:18:36.410
or you can even send it
upstream to the devices as well.

00:18:39.400 --> 00:18:42.540
So this is how we think
about our overall platform,

00:18:42.540 --> 00:18:46.980
and how we think about the
cloud portion and its connection

00:18:46.980 --> 00:18:48.370
to devices.

00:18:48.370 --> 00:18:52.470
So here you will see, you can
use an Android Things device,

00:18:52.470 --> 00:18:54.540
which Hanwook is
going to go more

00:18:54.540 --> 00:18:58.140
into the detail,
or any other device

00:18:58.140 --> 00:19:00.140
with other embedded
operating system.

00:19:00.140 --> 00:19:03.420
You can connect to Cloud IoT
Core using MQTT and a secured

00:19:03.420 --> 00:19:06.240
connection to send your
measurement and other telemetry

00:19:06.240 --> 00:19:07.910
data.

00:19:07.910 --> 00:19:11.820
All that data gets [INAUDIBLE]
into Pub/Sub, on Cloud Pub/Sub,

00:19:11.820 --> 00:19:15.370
from where you can then route
it to either Cloud Function

00:19:15.370 --> 00:19:18.160
to build a simple rule
and then act on it.

00:19:18.160 --> 00:19:22.720
You can do some complex event
processing using Dataflow.

00:19:22.720 --> 00:19:26.700
And then you can use BigQuery
or Bigtable to store data cost

00:19:26.700 --> 00:19:29.570
effectively, use it for
time series analysis

00:19:29.570 --> 00:19:31.530
or for other ad hoc analysis.

00:19:31.530 --> 00:19:34.230
Feed it to Cloud Machine
Learning, Cloud ML,

00:19:34.230 --> 00:19:38.880
which is our managed service for
TensorFlow for training machine

00:19:38.880 --> 00:19:39.900
learning models.

00:19:39.900 --> 00:19:44.400
And then you can use the
same Cloud ML for prediction,

00:19:44.400 --> 00:19:46.830
and then send the data
back through Cloud IoT

00:19:46.830 --> 00:19:51.080
Core for any actions you
want to take on the devices.

00:19:51.080 --> 00:19:53.400
So again, we're very excited
with the upcoming launch--

00:19:53.400 --> 00:19:55.734
with the launch announcement
of Cloud IoT Core.

00:19:55.734 --> 00:19:56.650
More is going to come.

00:19:56.650 --> 00:19:57.608
We'll get more details.

00:19:57.608 --> 00:19:59.370
But I want to hand
it to Hanwook,

00:19:59.370 --> 00:20:01.950
who is going to cover Android
Things for Enterprise.

00:20:01.950 --> 00:20:03.720
HANWOOK KIM: Thank you.

00:20:03.720 --> 00:20:05.394
Hello, everyone.

00:20:05.394 --> 00:20:08.346
[APPLAUSE]

00:20:08.346 --> 00:20:09.830
INDRANIL CHAKRABORTY: Thanks.

00:20:09.830 --> 00:20:11.420
HANWOOK KIM: Hello, everyone.

00:20:11.420 --> 00:20:14.330
So I'm going to talk about the
other side of an IoT solution,

00:20:14.330 --> 00:20:16.340
which is devices,
devices in the field,

00:20:16.340 --> 00:20:18.625
which is also known
as edge devices.

00:20:18.625 --> 00:20:20.750
And they're devices that
are collecting information

00:20:20.750 --> 00:20:21.830
about your operations.

00:20:21.830 --> 00:20:24.371
In some cases, you know exactly
what data you're looking for.

00:20:24.371 --> 00:20:26.600
And maybe you're
looking for something

00:20:26.600 --> 00:20:27.560
that has high fidelity.

00:20:27.560 --> 00:20:28.934
Something that
has more accuracy,

00:20:28.934 --> 00:20:30.080
maybe more sampling rates.

00:20:30.080 --> 00:20:31.496
Or maybe there's
a new sensor that

00:20:31.496 --> 00:20:34.292
came out that you want to apply
to your enterprise solution.

00:20:34.292 --> 00:20:36.500
Or maybe you're looking for
something, just a cheaper

00:20:36.500 --> 00:20:37.990
option at the end of the day.

00:20:37.990 --> 00:20:40.732
Or maybe you have a hypothesis
that you want to try and test

00:20:40.732 --> 00:20:42.440
before you actually
deploy and figure out

00:20:42.440 --> 00:20:45.110
whether you can actually
identify new signals to drive

00:20:45.110 --> 00:20:46.840
better outcomes
for your operation.

00:20:46.840 --> 00:20:48.590
Then, you need devices
to actually control

00:20:48.590 --> 00:20:49.490
your operations.

00:20:49.490 --> 00:20:51.074
And some of these
devices are actually

00:20:51.074 --> 00:20:53.198
the same ones that are
actually collecting devices.

00:20:53.198 --> 00:20:54.107
Some of them are not.

00:20:54.107 --> 00:20:55.190
They may be single points.

00:20:55.190 --> 00:20:56.390
They may be multiple points.

00:20:56.390 --> 00:20:59.180
And they could be simple
things like relays to hundreds

00:20:59.180 --> 00:21:03.320
of relays, or maybe even a
single device as [INAUDIBLE]

00:21:03.320 --> 00:21:05.120
in terms of like a controller.

00:21:05.120 --> 00:21:08.660
These devices are typically
powered by either MCU-class

00:21:08.660 --> 00:21:10.460
devices--

00:21:10.460 --> 00:21:13.340
simple things like measuring
temperature as an example--

00:21:13.340 --> 00:21:15.470
to SOC-class devices,
which is a system

00:21:15.470 --> 00:21:19.040
on chip, which is typically
much more powerful than an MCU

00:21:19.040 --> 00:21:20.510
and much more flexible.

00:21:20.510 --> 00:21:21.980
And those are the
types of devices

00:21:21.980 --> 00:21:26.120
in which you want to have some
on-device intelligence or maybe

00:21:26.120 --> 00:21:27.284
even complex operations.

00:21:27.284 --> 00:21:28.700
And types of devices
may be things

00:21:28.700 --> 00:21:32.660
like cameras, gateways, point
of sales machines, maybe even

00:21:32.660 --> 00:21:33.590
sensor hubs.

00:21:33.590 --> 00:21:35.180
And this last
class of categories

00:21:35.180 --> 00:21:38.210
is where Android
Things is here to play.

00:21:38.210 --> 00:21:41.306
We want to help our developers
build these devices,

00:21:41.306 --> 00:21:42.680
to be able to
collect information

00:21:42.680 --> 00:21:44.055
from your operations,
but also be

00:21:44.055 --> 00:21:46.520
able to control your operations
much more easily and much

00:21:46.520 --> 00:21:47.930
faster.

00:21:47.930 --> 00:21:50.542
There's already been a bunch
of sessions on Android Things,

00:21:50.542 --> 00:21:53.000
so I definitely encourage you
to look at the video streams.

00:21:53.000 --> 00:21:55.610
So I will provide you
with a basic understanding

00:21:55.610 --> 00:21:59.640
of Android Things in the
next couple of slides.

00:21:59.640 --> 00:22:02.540
So Android Things
essentially is Android.

00:22:02.540 --> 00:22:05.004
We've optimized it for IoT.

00:22:05.004 --> 00:22:06.920
So essentially, we've
taken out the components

00:22:06.920 --> 00:22:08.300
that aren't relevant for IoT.

00:22:08.300 --> 00:22:11.600
So as an example, things
like user-facing applications

00:22:11.600 --> 00:22:15.337
or maybe system
UI, notification.

00:22:15.337 --> 00:22:17.420
And then we've added things
very specifically that

00:22:17.420 --> 00:22:19.260
is needed for an IoT device.

00:22:19.260 --> 00:22:21.640
So things like peripheral
I/O, user drivers,

00:22:21.640 --> 00:22:24.680
so that you can add peripherals
and component to devices as you

00:22:24.680 --> 00:22:26.120
need to.

00:22:26.120 --> 00:22:28.330
And in the process, we
actually made Android Things

00:22:28.330 --> 00:22:32.000
also smaller as IoT devices
have a smaller footprint.

00:22:32.000 --> 00:22:34.580
For enterprise, I think the
importance of Android Things,

00:22:34.580 --> 00:22:36.880
I think comes down
to three points.

00:22:36.880 --> 00:22:37.940
One is scale.

00:22:37.940 --> 00:22:40.400
So obviously, if you're
already a developer for Android

00:22:40.400 --> 00:22:44.030
Enterprise, Android Things
uses the same Android APIs

00:22:44.030 --> 00:22:45.740
and the same
developer tool kits,

00:22:45.740 --> 00:22:48.920
like Android SDK
and Android Studio.

00:22:48.920 --> 00:22:50.420
If you're not
familiar with Android,

00:22:50.420 --> 00:22:51.980
obviously we've got
a vibrant ecosystem

00:22:51.980 --> 00:22:53.980
that you can tap into,
so you can start actually

00:22:53.980 --> 00:22:57.590
developing for devices
relatively quickly.

00:22:57.590 --> 00:23:00.212
And Android OS is
obviously very--

00:23:00.212 --> 00:23:01.910
it scales to-- now
we support over

00:23:01.910 --> 00:23:05.780
2 billion devices across mobile
devices, tablets, TVs, watches,

00:23:05.780 --> 00:23:06.750
and cars.

00:23:06.750 --> 00:23:08.458
And of course, many
of these are actually

00:23:08.458 --> 00:23:10.100
in enterprise
situations as well.

00:23:10.100 --> 00:23:13.160
And now we're adding
IoT to that mix.

00:23:13.160 --> 00:23:15.290
The second is security.

00:23:15.290 --> 00:23:16.870
There was a session
earlier today

00:23:16.870 --> 00:23:19.422
in the morning that actually
did a deep dive on security.

00:23:19.422 --> 00:23:21.380
So again, if you're
interested in the security,

00:23:21.380 --> 00:23:22.930
I'd encourage you
to watch that video.

00:23:22.930 --> 00:23:24.846
So I'll give you a
high-level view of security

00:23:24.846 --> 00:23:26.780
and how we think about
it from Android Things.

00:23:26.780 --> 00:23:29.652
So we provide security
through OS hardening.

00:23:29.652 --> 00:23:31.432
Security in the
OS and app update.

00:23:31.432 --> 00:23:33.140
So I think this is a
very important piece

00:23:33.140 --> 00:23:35.420
because we want to make sure
that the devices running

00:23:35.420 --> 00:23:36.950
Android Things are
always patched up

00:23:36.950 --> 00:23:37.990
to the latest version.

00:23:37.990 --> 00:23:40.073
And you always have the
ability to actually update

00:23:40.073 --> 00:23:44.420
your application that's running
device-side specific software.

00:23:44.420 --> 00:23:48.110
We also support verified
boot, signed images,

00:23:48.110 --> 00:23:50.390
hardware-backed keys,
and asset stations.

00:23:50.390 --> 00:23:53.030
And we will continue to
provide and work on security,

00:23:53.030 --> 00:23:56.180
because we know end-to-end
security from devices to cloud

00:23:56.180 --> 00:23:59.429
is actually very important.

00:23:59.429 --> 00:24:01.470
The last piece is, I kind
of mentioned it before,

00:24:01.470 --> 00:24:03.840
which is peripheral
I/O and user drivers.

00:24:03.840 --> 00:24:06.170
So this allows you
to basically connect

00:24:06.170 --> 00:24:10.220
components, sensors, varying
different input devices--

00:24:10.220 --> 00:24:11.700
displays into Android Things.

00:24:11.700 --> 00:24:13.700
And allow you to actually
use those and actually

00:24:13.700 --> 00:24:17.620
build applications and
devices across those things.

00:24:17.620 --> 00:24:19.790
Android Things is currently
in developer preview.

00:24:19.790 --> 00:24:21.110
We're in developer preview 4.

00:24:21.110 --> 00:24:22.410
So we've done four releases.

00:24:22.410 --> 00:24:24.410
We want to do releases
every six to eight weeks.

00:24:24.410 --> 00:24:27.470
We encourage you to kind of
come along and play and check it

00:24:27.470 --> 00:24:28.300
out.

00:24:28.300 --> 00:24:30.860
We'll, again, do updates
every six to eight weeks.

00:24:30.860 --> 00:24:34.030
And then, long-term support is
targeted for end of this year

00:24:34.030 --> 00:24:37.640
and it will be based on O.
So that's the software layer

00:24:37.640 --> 00:24:38.450
of Android Things.

00:24:42.490 --> 00:24:45.430
The next layer that I'll
talk about is the hardware.

00:24:45.430 --> 00:24:47.890
So we know that bringing
up hardware, new hardware,

00:24:47.890 --> 00:24:49.750
is actually very
hard and complex.

00:24:49.750 --> 00:24:51.400
So the approach we're actually
taking with our Silicon

00:24:51.400 --> 00:24:52.858
partners is actually
going the path

00:24:52.858 --> 00:24:54.730
of what's called a
SOM architecture,

00:24:54.730 --> 00:24:55.651
the System On Module.

00:24:55.651 --> 00:24:58.025
And a System On Module comes
with a couple of components.

00:24:58.025 --> 00:25:01.101
It comes with a CPU, memory
storage, and connectivity.

00:25:01.101 --> 00:25:03.100
Essentially, all the
pieces that you need to run

00:25:03.100 --> 00:25:04.540
Android Things on.

00:25:04.540 --> 00:25:05.320
So you pick a SOM.

00:25:05.320 --> 00:25:06.160
It runs Android Things.

00:25:06.160 --> 00:25:07.760
It's certified to
run Android Things.

00:25:07.760 --> 00:25:09.340
And from there, you
go ahead and build out

00:25:09.340 --> 00:25:10.360
what's called a
base board, which

00:25:10.360 --> 00:25:12.760
has the additional components
that you want to include.

00:25:12.760 --> 00:25:15.490
Things like I/O, display,
sensors, and so forth.

00:25:15.490 --> 00:25:17.580
But because you've taken
a SOM that's certified,

00:25:17.580 --> 00:25:18.830
Android Things actually works.

00:25:18.830 --> 00:25:20.788
So there's no actually
additional certification

00:25:20.788 --> 00:25:21.740
that you need to do.

00:25:21.740 --> 00:25:24.160
So it helps you speed up your
development cycle relatively

00:25:24.160 --> 00:25:24.672
rapidly.

00:25:24.672 --> 00:25:27.130
And obviously, we're working
with a lot of Silicon partners

00:25:27.130 --> 00:25:28.000
as we see.

00:25:28.000 --> 00:25:29.916
And all these Silicon
partners are, obviously,

00:25:29.916 --> 00:25:32.009
also very trusted in
the enterprise space.

00:25:32.009 --> 00:25:33.550
So for enterprise,
what this means to

00:25:33.550 --> 00:25:36.400
me is faster speed to market.

00:25:36.400 --> 00:25:38.292
We've certified these SOMs.

00:25:38.292 --> 00:25:40.000
They're proven to work
on Android Things.

00:25:40.000 --> 00:25:42.410
You take these and you can
prototype relatively quickly

00:25:42.410 --> 00:25:45.250
and actually iterate
on these designs.

00:25:45.250 --> 00:25:47.380
Most of these
Silicon partners also

00:25:47.380 --> 00:25:51.200
have developer kits as well
that are available to you.

00:25:51.200 --> 00:25:52.960
And so in our demo
booth, which I believe

00:25:52.960 --> 00:25:56.120
is A, which is one of the first
demo booths as you come in,

00:25:56.120 --> 00:25:59.649
we basically got a dev
kit from Raspberry Pi.

00:25:59.649 --> 00:26:01.690
We've got a couple of
components in a breadboard.

00:26:01.690 --> 00:26:02.770
And we simply just wired it up.

00:26:02.770 --> 00:26:04.730
And that is a device
that's actually connected.

00:26:04.730 --> 00:26:05.605
and actually working.

00:26:05.605 --> 00:26:07.470
And actually, it's
sending information back

00:26:07.470 --> 00:26:08.562
to Cloud IoT Core.

00:26:08.562 --> 00:26:10.020
There's another
version next to it,

00:26:10.020 --> 00:26:12.270
which is the next iteration
of that, where we actually

00:26:12.270 --> 00:26:13.326
printed out a PSB board.

00:26:13.326 --> 00:26:14.950
We actually soldered
the components on.

00:26:14.950 --> 00:26:16.060
So you can kind of
see the evolution

00:26:16.060 --> 00:26:18.000
where you can go
quickly from prototyping

00:26:18.000 --> 00:26:20.685
on the breadboard with wires
into something that's soldered.

00:26:20.685 --> 00:26:23.310
And then when you're ready to go
into production, because again

00:26:23.310 --> 00:26:26.396
it's the same SOM, you can
scale right into production.

00:26:26.396 --> 00:26:28.270
And then, essentially
scale all these devices

00:26:28.270 --> 00:26:30.811
throughout your enterprise to
realize the benefit of your IoT

00:26:30.811 --> 00:26:33.232
solution.

00:26:33.232 --> 00:26:35.440
The last layer that I'll
talk about on Android Things

00:26:35.440 --> 00:26:37.949
is the services.

00:26:37.949 --> 00:26:40.240
We want to make it easy for
you to use Google services.

00:26:40.240 --> 00:26:41.430
We, obviously, believe
Google services

00:26:41.430 --> 00:26:43.471
is going to help you drive
those insights that we

00:26:43.471 --> 00:26:45.870
talked about on top
of your IT solutions.

00:26:45.870 --> 00:26:46.840
Obviously, TensorFlow.

00:26:46.840 --> 00:26:48.506
You can use TensorFlow
on Android Things

00:26:48.506 --> 00:26:51.320
to run machine learning
locally on the device.

00:26:51.320 --> 00:26:54.340
We also provide
local-based services.

00:26:54.340 --> 00:26:57.150
And I also left a couple
of the consumer services

00:26:57.150 --> 00:26:59.610
on there, like we
support the assistant.

00:26:59.610 --> 00:27:02.090
We are working on supporting
[INAUDIBLE] as example.

00:27:02.090 --> 00:27:04.090
So this is important because
in the cases of an enterprise

00:27:04.090 --> 00:27:04.540
developer.

00:27:04.540 --> 00:27:06.748
You may be actually developing
both for the consumers

00:27:06.748 --> 00:27:07.480
and enterprise.

00:27:07.480 --> 00:27:09.040
And we actually provide both.

00:27:09.040 --> 00:27:11.407
This platform actually
supports both sides.

00:27:11.407 --> 00:27:13.990
And obviously for enterprise, I
think the most obvious service

00:27:13.990 --> 00:27:16.870
that makes a lot of sense
is actually Cloud IoT Core.

00:27:16.870 --> 00:27:19.870
To be able to send data
from Android Things

00:27:19.870 --> 00:27:23.170
to Cloud IoT Core, to be
able to apply data analytics,

00:27:23.170 --> 00:27:24.145
machine learning.

00:27:24.145 --> 00:27:26.020
And obviously then,
remote manage and control

00:27:26.020 --> 00:27:26.985
those devices.

00:27:26.985 --> 00:27:28.360
So in the case
where you may have

00:27:28.360 --> 00:27:30.370
a sensor hub in a
manufacturing line,

00:27:30.370 --> 00:27:33.744
or maybe even in a commercial
building HVAC system,

00:27:33.744 --> 00:27:36.160
you want to be able to send
that information to the cloud,

00:27:36.160 --> 00:27:39.410
analyze real-time usage,
predictive analysis, anomaly

00:27:39.410 --> 00:27:39.910
detection.

00:27:39.910 --> 00:27:41.710
And then to be able
to take your insights,

00:27:41.710 --> 00:27:43.630
and then basically control
those devices back,

00:27:43.630 --> 00:27:47.480
to be able to optimize your
yields or reduce energy.

00:27:47.480 --> 00:27:50.710
So how do you connect
Android Things to cloud?

00:27:50.710 --> 00:27:52.499
So we actually
have a code sample

00:27:52.499 --> 00:27:53.540
that we actually created.

00:27:53.540 --> 00:27:55.998
And this code sample is actually
an end-to-end code sample.

00:27:55.998 --> 00:27:58.480
We've actually connected
a couple of sensors

00:27:58.480 --> 00:27:59.650
to Android Things.

00:27:59.650 --> 00:28:01.420
We've defined the
payload in terms of what

00:28:01.420 --> 00:28:03.461
data information that we
want to collect and send

00:28:03.461 --> 00:28:07.000
that information through the
MQTT bridge to Cloud IoT Core.

00:28:07.000 --> 00:28:08.530
So we basically
show the full thing.

00:28:08.530 --> 00:28:09.550
But at the end of
the day, it really

00:28:09.550 --> 00:28:11.360
comes down to a
couple of core steps.

00:28:11.360 --> 00:28:13.360
One is create your
Cloud IoT project

00:28:13.360 --> 00:28:16.360
in which you need to define
a project ID, registry ID,

00:28:16.360 --> 00:28:17.109
region ID.

00:28:17.109 --> 00:28:18.650
You go to Android
Things and you want

00:28:18.650 --> 00:28:19.710
to pull off that public key.

00:28:19.710 --> 00:28:21.970
So sample code actually
creates a public-private key

00:28:21.970 --> 00:28:24.040
in which you want to
pull out that public key.

00:28:24.040 --> 00:28:25.539
And the private key
then is actually

00:28:25.539 --> 00:28:28.000
stored within Android Key
Store, so it's secure.

00:28:28.000 --> 00:28:30.100
The second step is then
you want to register

00:28:30.100 --> 00:28:32.230
the device to Cloud IoT Core.

00:28:32.230 --> 00:28:35.440
And I've already shown
you a command line method.

00:28:35.440 --> 00:28:36.760
Obviously, this doesn't work.

00:28:36.760 --> 00:28:39.660
This works really
well for prototyping.

00:28:39.660 --> 00:28:41.910
But for when you want to go
into production, obviously

00:28:41.910 --> 00:28:43.326
there's REST APIs
that we can use.

00:28:43.326 --> 00:28:46.040
And we'll actually showcase a
demo for you about registration

00:28:46.040 --> 00:28:48.040
and how important that
is in terms of onboarding

00:28:48.040 --> 00:28:49.240
all these devices.

00:28:49.240 --> 00:28:52.210
And the last step is to
configure a cloud service

00:28:52.210 --> 00:28:55.380
on Android Things to start
sending the messages to cloud.

00:28:55.380 --> 00:28:58.390
So relatively easy steps for you
to connect, use Android Things,

00:28:58.390 --> 00:29:01.210
and connect to Cloud IoT Core
to use the power of cloud.

00:29:01.210 --> 00:29:05.110
And again, the code sample is
on GitHub Android Things Sensor

00:29:05.110 --> 00:29:08.290
Hub Cloud IoT.

00:29:08.290 --> 00:29:10.570
So now, let's take
a real example--

00:29:10.570 --> 00:29:11.770
or an example.

00:29:11.770 --> 00:29:13.575
So let's say you're
building a camera.

00:29:13.575 --> 00:29:15.770
Maybe this camera is a
quality control camera.

00:29:15.770 --> 00:29:17.770
So you have your
specifications of what you want

00:29:17.770 --> 00:29:18.922
to achieve in your product.

00:29:18.922 --> 00:29:20.380
And you evaluate
the different SOMs

00:29:20.380 --> 00:29:23.052
that we actually provide
based on price, performance.

00:29:23.052 --> 00:29:24.760
You pick the one that
works best for you.

00:29:24.760 --> 00:29:25.990
You build your product
around those things.

00:29:25.990 --> 00:29:27.364
And it comes with
Android Things,

00:29:27.364 --> 00:29:30.190
so you build your APK to
do the camera controls,

00:29:30.190 --> 00:29:33.990
the video data, kind of capture
and processing and streaming,

00:29:33.990 --> 00:29:36.212
and you connect it to cloud.

00:29:36.212 --> 00:29:38.170
And what actually then
becomes more interesting

00:29:38.170 --> 00:29:41.140
is the on-device intelligence
feed, that little yellow piece,

00:29:41.140 --> 00:29:42.720
which is the TensorFlow piece.

00:29:42.720 --> 00:29:45.290
In the case of quality control,
especially in the cases

00:29:45.290 --> 00:29:46.730
of where they're abstract.

00:29:46.730 --> 00:29:48.980
And maybe they're pattern-based,
so you can't actually

00:29:48.980 --> 00:29:50.510
define rules or they're learned.

00:29:50.510 --> 00:29:53.026
I can imagine a person at
the end of a line that's

00:29:53.026 --> 00:29:54.650
looking at these
widgets, and they just

00:29:54.650 --> 00:29:56.150
get smarter about
detecting like,

00:29:56.150 --> 00:29:57.920
what's a defect
versus not defect?

00:29:57.920 --> 00:29:59.540
Those are all the
same cases in which

00:29:59.540 --> 00:30:01.449
you want to be able to
use machine learning.

00:30:01.449 --> 00:30:02.990
So as an example,
maybe you're trying

00:30:02.990 --> 00:30:06.170
to define a quality
of a wood grain.

00:30:06.170 --> 00:30:08.422
There's no specific rules
about what good looks like.

00:30:08.422 --> 00:30:10.130
But when you see a
particular wood grain,

00:30:10.130 --> 00:30:11.960
you know what that
good looks like.

00:30:11.960 --> 00:30:14.060
Or maybe it's a marbling
on a piece of beef.

00:30:14.060 --> 00:30:16.601
As an example, you want to be
able to grade things from A, B,

00:30:16.601 --> 00:30:18.230
to C. And that's subjective.

00:30:18.230 --> 00:30:19.760
Or, maybe it's a pizza line.

00:30:19.760 --> 00:30:21.380
And maybe it's hand tossed.

00:30:21.380 --> 00:30:23.472
And you expect some
variation in a pizza.

00:30:23.472 --> 00:30:25.680
You don't expect everything
to be in the right place.

00:30:25.680 --> 00:30:27.260
But when you see this
pizza, you kind of know

00:30:27.260 --> 00:30:29.300
what good looks like
versus bad looks like.

00:30:29.300 --> 00:30:30.860
Those, again, good
examples of where

00:30:30.860 --> 00:30:32.840
you want to be able to
use machine learning.

00:30:32.840 --> 00:30:34.610
But you don't want to stream
all this information back

00:30:34.610 --> 00:30:36.570
to the cloud because it's
actually a lot of information.

00:30:36.570 --> 00:30:37.945
So this is, again,
where you want

00:30:37.945 --> 00:30:41.210
to be able to use TensorFlow
on device with your models

00:30:41.210 --> 00:30:43.790
to do decisions locally and
only stream the information back

00:30:43.790 --> 00:30:45.885
to the cloud to enhance
your models in the cloud.

00:30:45.885 --> 00:30:48.260
And as you make improvements
into the model in the cloud,

00:30:48.260 --> 00:30:50.480
you actually send the
parameters back to the device

00:30:50.480 --> 00:30:51.750
to update the model.

00:30:51.750 --> 00:30:53.870
So you have this kind
of constant iteration

00:30:53.870 --> 00:30:57.485
of increasing, of making the
models much better over time.

00:30:57.485 --> 00:30:59.360
Then, you can use,
obviously, Android Things,

00:30:59.360 --> 00:31:02.770
to make sure that the OS is
updated to the latest patch

00:31:02.770 --> 00:31:04.440
using your latest application.

00:31:04.440 --> 00:31:06.620
You can also use cloud
to do remote management.

00:31:06.620 --> 00:31:09.370
So you can identify and alert
yourself if one of the cameras

00:31:09.370 --> 00:31:10.220
is down.

00:31:10.220 --> 00:31:11.720
Or maybe you're just
collecting quality information

00:31:11.720 --> 00:31:13.970
and you want to be able to
compare across five lines

00:31:13.970 --> 00:31:15.860
and see which ones are
actually doing better.

00:31:15.860 --> 00:31:17.600
And this scales if
you have one camera

00:31:17.600 --> 00:31:19.174
or if you have
hundreds of cameras.

00:31:19.174 --> 00:31:20.840
Or, if maybe you want
to take one camera

00:31:20.840 --> 00:31:22.610
and you actually want to
retrofit your whole line

00:31:22.610 --> 00:31:24.060
with a whole bunch of sensors.

00:31:24.060 --> 00:31:26.000
So you can kind of get a sense
of what the line is doing.

00:31:26.000 --> 00:31:27.920
So you can start thinking
about correlations between,

00:31:27.920 --> 00:31:29.540
what is the condition
of your line,

00:31:29.540 --> 00:31:31.130
and what are you
defining as defects?

00:31:31.130 --> 00:31:33.005
So maybe you can get
into predictive analysis

00:31:33.005 --> 00:31:35.750
around forecasting
issues that come along.

00:31:35.750 --> 00:31:38.650
And that's the beauty of
Cloud IoT and Android Things.

00:31:38.650 --> 00:31:41.060
It scales as you start
thinking about the use cases.

00:31:41.060 --> 00:31:42.980
And as you add more
use cases, you simply

00:31:42.980 --> 00:31:44.810
add on more sensors
and more devices

00:31:44.810 --> 00:31:48.270
and you stream
that to the cloud.

00:31:48.270 --> 00:31:50.010
So to wrap it up,
we're trying to make

00:31:50.010 --> 00:31:51.551
it easier for
developers and partners

00:31:51.551 --> 00:31:54.720
to build enterprise IoT
solutions from edge to cloud.

00:31:54.720 --> 00:31:57.330
Android Things really supports
building out the edge computing

00:31:57.330 --> 00:32:00.920
for local controls, local
alerts and notifications, data

00:32:00.920 --> 00:32:05.040
preprocessing, applied
analytics and machine learning.

00:32:05.040 --> 00:32:07.680
This will allow you to
design a system that

00:32:07.680 --> 00:32:08.880
will improve performance.

00:32:08.880 --> 00:32:10.860
In the cases where you don't
want to actually send data

00:32:10.860 --> 00:32:13.318
to the cloud and back, you can
make those decisions locally

00:32:13.318 --> 00:32:14.360
on the device.

00:32:14.360 --> 00:32:16.350
Or build for bandwidth
requirements.

00:32:16.350 --> 00:32:17.760
So if you have restricted
bandwidth requirements,

00:32:17.760 --> 00:32:19.690
you want to do some
processing on the device

00:32:19.690 --> 00:32:21.000
and send only the
information you absolutely

00:32:21.000 --> 00:32:22.050
need to the cloud.

00:32:22.050 --> 00:32:24.150
And then lastly, be tolerant
of offline use cases,

00:32:24.150 --> 00:32:27.192
whether they're either
intended or even non-intended.

00:32:27.192 --> 00:32:29.400
Or you just need redundancy
where you want to, again,

00:32:29.400 --> 00:32:31.300
make some local
decisions on the device,

00:32:31.300 --> 00:32:33.940
but also make those same
decisions in the cloud as well.

00:32:33.940 --> 00:32:36.273
So we're working on solving
some of these key challenges

00:32:36.273 --> 00:32:39.422
through better managed
security, scalability insights.

00:32:39.422 --> 00:32:41.880
And so we're really excited
about what you think of Android

00:32:41.880 --> 00:32:43.300
Things with Cloud IoT Core.

00:32:43.300 --> 00:32:46.200
So I encourage you to-- invite
you to test it out and give us

00:32:46.200 --> 00:32:47.530
some feedback.

00:32:47.530 --> 00:32:49.372
So thank you.

00:32:49.372 --> 00:32:55.180
[APPLAUSE]

00:32:55.180 --> 00:32:56.950
So now we're going
to go through a demo.

00:32:56.950 --> 00:32:59.619
So the cameramen is going to
come up and switch on the video

00:32:59.619 --> 00:33:01.660
so you guys can see from
the live stream, as well

00:33:01.660 --> 00:33:02.854
as the ones in the back.

00:33:02.854 --> 00:33:04.270
And on our demo
board, we actually

00:33:04.270 --> 00:33:07.870
have three demos
I'll run you through.

00:33:07.870 --> 00:33:10.580
And the demos I'm going to run
through is around registration.

00:33:10.580 --> 00:33:12.440
So registration in
[INAUDIBLE] enterprise

00:33:12.440 --> 00:33:14.356
is actually very challenging
because the scale

00:33:14.356 --> 00:33:16.060
of registration
becomes very difficult.

00:33:16.060 --> 00:33:18.434
It's no longer about just one
device, but it's about tens

00:33:18.434 --> 00:33:20.060
and hundreds and
thousands of devices.

00:33:20.060 --> 00:33:22.476
And how do you effectively
actually register these devices

00:33:22.476 --> 00:33:24.274
to Cloud IoT to
stream information?

00:33:24.274 --> 00:33:25.690
So talking to our
partners, we are

00:33:25.690 --> 00:33:28.270
going to show you basically
two variations to show

00:33:28.270 --> 00:33:30.350
what the possibilities are.

00:33:30.350 --> 00:33:32.517
So we're going to focus on
the right set of devices.

00:33:32.517 --> 00:33:34.183
And you can kind of
see from the screen,

00:33:34.183 --> 00:33:35.650
there's actually a QR code.

00:33:35.650 --> 00:33:39.910
And so we've actually built
a mobile app for the demo

00:33:39.910 --> 00:33:40.840
to basically register.

00:33:40.840 --> 00:33:42.490
What the app will
do essentially,

00:33:42.490 --> 00:33:45.130
number one is I'm going
to sign in by myself--

00:33:45.130 --> 00:33:45.730
as myself.

00:33:45.730 --> 00:33:47.563
And it's going to check
whether I'm actually

00:33:47.563 --> 00:33:50.410
authorized by Cloud IoT
to actually add devices

00:33:50.410 --> 00:33:51.770
as an authorized user or not.

00:33:51.770 --> 00:33:52.812
So that's the first step.

00:33:52.812 --> 00:33:55.186
The next step is I'm going to
go and capture the QR code,

00:33:55.186 --> 00:33:55.770
as an example.

00:33:55.770 --> 00:33:57.561
So I'm going to go and
capture the QR code.

00:33:57.561 --> 00:33:58.810
And this app is very simple.

00:33:58.810 --> 00:34:00.452
So it's basically
got just two buttons.

00:34:00.452 --> 00:34:01.660
So I've captured the QR code.

00:34:01.660 --> 00:34:02.890
And the QR code
basically gave me

00:34:02.890 --> 00:34:04.690
all the information I
need to now register

00:34:04.690 --> 00:34:06.070
my device to Cloud IoT.

00:34:06.070 --> 00:34:08.510
So I used the REST APIs
to now register the app.

00:34:08.510 --> 00:34:10.480
I'm going to hit Add Device.

00:34:10.480 --> 00:34:12.546
And then on the screen
Indranil is showing

00:34:12.546 --> 00:34:14.170
is basically the
device register saying

00:34:14.170 --> 00:34:15.419
we'll show the Device Manager.

00:34:15.419 --> 00:34:19.257
And that device will now show
up on that Device Manager.

00:34:19.257 --> 00:34:21.090
And then if you also
noticed in [INAUDIBLE],

00:34:21.090 --> 00:34:23.630
you could see that the
device actually turned on.

00:34:23.630 --> 00:34:25.963
And what the device did was
as soon as it could actually

00:34:25.963 --> 00:34:28.449
talk to the cloud, it
actually lit up the LEDs.

00:34:28.449 --> 00:34:31.210
And then we actually showed
the temperature of that device.

00:34:31.210 --> 00:34:33.900
And now, that information is
actually streaming every second

00:34:33.900 --> 00:34:35.530
to Cloud IoT Core.

00:34:35.530 --> 00:34:36.699
So I'm going to go now--

00:34:36.699 --> 00:34:39.767
I put that on my machine number
1, the location number 1.

00:34:39.767 --> 00:34:41.100
So now I've got a second device.

00:34:41.100 --> 00:34:44.409
I'm going to do the same thing.

00:34:44.409 --> 00:34:46.967
Capture the QR code,
and then Add Device.

00:34:46.967 --> 00:34:47.800
And then same thing.

00:34:47.800 --> 00:34:49.659
You're going to see it
show up on Device Manager.

00:34:49.659 --> 00:34:51.719
And then soon, you're going
to see the device light up.

00:34:51.719 --> 00:34:53.968
As soon as it connects and
it's actually sending data.

00:34:53.968 --> 00:34:56.239
Again, it's sending every
second and so forth.

00:34:56.239 --> 00:34:59.260
So now I'm going to continue
to go down the line,

00:34:59.260 --> 00:35:02.230
capture the QR code, Add Device.

00:35:02.230 --> 00:35:04.310
Go to the next one.

00:35:04.310 --> 00:35:07.921
Capture the QR code, Add Device.

00:35:07.921 --> 00:35:16.820
I'm going to go and capture
the QR code, Add Device.

00:35:16.820 --> 00:35:17.540
And the last one.

00:35:17.540 --> 00:35:19.160
Again, maybe a
different location.

00:35:19.160 --> 00:35:22.622
I'm going to capture the QR
code, and then Add Device.

00:35:22.622 --> 00:35:24.830
So every time I did that,
you could see how quickly I

00:35:24.830 --> 00:35:28.010
was able to get six
devices, see the visibility

00:35:28.010 --> 00:35:29.030
on Device Manager.

00:35:29.030 --> 00:35:30.934
And actually,
sending, again, data.

00:35:30.934 --> 00:35:32.600
They're actually
connected to Cloud IoT.

00:35:32.600 --> 00:35:34.933
Every second, I'm actually
sending temperature data back

00:35:34.933 --> 00:35:35.570
to that.

00:35:35.570 --> 00:35:37.820
So that's one example of how
you can actually register

00:35:37.820 --> 00:35:39.330
a whole bunch of devices.

00:35:39.330 --> 00:35:41.382
The second method is what's
called pre-provision.

00:35:41.382 --> 00:35:43.340
So in those cases where
the public-private keys

00:35:43.340 --> 00:35:45.137
are actually created
at the factory.

00:35:45.137 --> 00:35:47.470
The public keys are actually
provided to the enterprise.

00:35:47.470 --> 00:35:49.636
And the enterprise, we
actually set those devices up

00:35:49.636 --> 00:35:51.630
in the back office.

00:35:51.630 --> 00:35:53.570
So what Indranil will
show you is the Device

00:35:53.570 --> 00:35:55.370
Manager will see
a set of devices

00:35:55.370 --> 00:35:57.770
that are already registered,
but they're disabled.

00:35:57.770 --> 00:36:00.590
Because these
devices are en route.

00:36:00.590 --> 00:36:02.960
So what I have on my app--

00:36:02.960 --> 00:36:04.710
I'm going to use
the app as well--

00:36:04.710 --> 00:36:07.040
is I'm going to go and query
that device registry where

00:36:07.040 --> 00:36:08.920
it has all the devices
in which we said,

00:36:08.920 --> 00:36:09.920
these are preregistered.

00:36:09.920 --> 00:36:11.930
Now, I'm going to go and
install these devices

00:36:11.930 --> 00:36:12.763
in the place I want.

00:36:12.763 --> 00:36:14.370
And maybe I'm not ready yet.

00:36:14.370 --> 00:36:16.287
As soon as I'm ready--
maybe I'm doing a test.

00:36:16.287 --> 00:36:17.453
Maybe I'm in pre-production.

00:36:17.453 --> 00:36:19.440
I want to go in and
enable all these devices.

00:36:19.440 --> 00:36:20.190
So I have an app.

00:36:20.190 --> 00:36:21.250
Again, I'm going to
have two buttons.

00:36:21.250 --> 00:36:22.640
One is Disable and one's Enable.

00:36:22.640 --> 00:36:24.140
I'm going to hit
the Enable button.

00:36:24.140 --> 00:36:25.640
And as soon as I
do that, you'll see

00:36:25.640 --> 00:36:27.350
all the devices get enabled.

00:36:27.350 --> 00:36:29.630
And then as they get connected,
they'll all light up.

00:36:29.630 --> 00:36:30.680
So we'll go and do that.

00:36:30.680 --> 00:36:35.176
So we'll bulk enable
devices right now.

00:36:35.176 --> 00:36:36.800
So you can see that
some of the devices

00:36:36.800 --> 00:36:39.440
are starting to light up.

00:36:39.440 --> 00:36:41.090
And they're all
lit up right now.

00:36:41.090 --> 00:36:44.240
So now, those are 12 Raspberry
Pis running on Android Things.

00:36:44.240 --> 00:36:48.110
We also included the expressive
boards running Mongoose OS.

00:36:48.110 --> 00:36:50.117
So again, they're a
partner of Cloud IoT.

00:36:50.117 --> 00:36:51.200
And we did the same thing.

00:36:51.200 --> 00:36:52.740
So it's the same process.

00:36:52.740 --> 00:36:55.700
So this registry process
is the same across OSes.

00:36:55.700 --> 00:36:57.230
We want to make
this really simple

00:36:57.230 --> 00:36:59.540
for you to be able to get
register devices to Cloud IoT

00:36:59.540 --> 00:37:02.277
and to actually manage
them in one place.

00:37:02.277 --> 00:37:04.360
Then, now I'm going to
transition to the next demo

00:37:04.360 --> 00:37:07.420
back to Indranil.

00:37:07.420 --> 00:37:10.808
[APPLAUSE]

00:37:14.382 --> 00:37:16.090
INDRANIL CHAKRABORTY:
Thank you, Hanwook.

00:37:16.090 --> 00:37:18.490
So Hanwook showed
you a demo of how

00:37:18.490 --> 00:37:20.030
you can do batch registration.

00:37:20.030 --> 00:37:22.620
And you can even
disable and enable

00:37:22.620 --> 00:37:24.635
a large chunk of devices,
which is manufactured.

00:37:24.635 --> 00:37:26.010
What I'm going to
spend some time

00:37:26.010 --> 00:37:30.250
is giving a demo on
how you access data

00:37:30.250 --> 00:37:33.804
from all these global, the
deployment of your devices,

00:37:33.804 --> 00:37:35.470
and how you can create
some simple rules

00:37:35.470 --> 00:37:37.640
as well to take some action.

00:37:37.640 --> 00:37:40.060
So we have a dashboard here.

00:37:40.060 --> 00:37:44.980
What we have done is we have
taken these set of devices,

00:37:44.980 --> 00:37:47.650
a number of those devices,
and we have deployed them

00:37:47.650 --> 00:37:51.040
across the Google campus in
Mountain View, San Francisco,

00:37:51.040 --> 00:37:53.620
and in some of the
other offices as well.

00:37:53.620 --> 00:37:57.370
And all these Raspberry Pi
devices running Android Things

00:37:57.370 --> 00:37:59.080
are connected to Cloud IoT Core.

00:37:59.080 --> 00:38:00.790
And they're constantly
sending data

00:38:00.790 --> 00:38:04.690
about temperature, humidity,
pressure, and other factors

00:38:04.690 --> 00:38:05.530
as well.

00:38:05.530 --> 00:38:09.130
And what I can show you is
these are all the location

00:38:09.130 --> 00:38:10.600
of the devices.

00:38:10.600 --> 00:38:12.070
You can monitor.

00:38:12.070 --> 00:38:14.362
You can do real-time
monitoring of all these devices

00:38:14.362 --> 00:38:16.070
in terms of the
temperature and pressure.

00:38:16.070 --> 00:38:18.950
So the left chart shows
you the local temperature

00:38:18.950 --> 00:38:22.040
for a whole bunch of devices,
the humidity, and pressure.

00:38:22.040 --> 00:38:25.210
What we also have is
a more detailed view.

00:38:25.210 --> 00:38:29.590
So I can click on a device
and I can see, real time,

00:38:29.590 --> 00:38:31.400
what is the temperature
of that device?

00:38:31.400 --> 00:38:32.980
Whether it's outside or inside.

00:38:32.980 --> 00:38:35.320
Humidity, light, and pressure.

00:38:35.320 --> 00:38:37.620
And also, you can
see this chart.

00:38:37.620 --> 00:38:40.150
It's actually moving
in every second

00:38:40.150 --> 00:38:42.280
as it collects data
from different sources

00:38:42.280 --> 00:38:43.840
and starts seeing it.

00:38:43.840 --> 00:38:46.960
So in the interest of time, I'm
going to move to another demo

00:38:46.960 --> 00:38:49.740
where we're going
to show how we can--

00:38:49.740 --> 00:38:51.760
I'm going to switch
to the split screen.

00:38:54.290 --> 00:38:54.960
Awesome.

00:38:54.960 --> 00:38:58.170
So we have-- let me come here.

00:38:58.170 --> 00:39:00.990
We have a Raspberry Pi
running Android Things

00:39:00.990 --> 00:39:03.540
on this device, which
is measuring temperature

00:39:03.540 --> 00:39:04.420
and light.

00:39:04.420 --> 00:39:07.350
We have an Intel Edison running
Android Things in a relay.

00:39:07.350 --> 00:39:11.670
And what I'm going to do is I'm
going to put my finger here,

00:39:11.670 --> 00:39:15.210
which increases the temperature
and also blocks the light.

00:39:15.210 --> 00:39:19.290
And you would see
that the fan turns on.

00:39:19.290 --> 00:39:23.360
What is happening here
is we have built--

00:39:23.360 --> 00:39:25.750
the Raspberry Pi is sending
data to Cloud IoT Core.

00:39:25.750 --> 00:39:29.970
Cloud IoT Core
publishes it to Pub/Sub.

00:39:29.970 --> 00:39:31.860
And from there, we
have a cloud function

00:39:31.860 --> 00:39:34.440
which uses a simple rule to
see if the temperature goes

00:39:34.440 --> 00:39:38.100
above 90 Fahrenheit, then
it sends the command back

00:39:38.100 --> 00:39:42.000
to Cloud IoT Core to turn on the
fan through that Intel Edison.

00:39:42.000 --> 00:39:48.940
Now, what I can also do is I can
turn it off from my UI as well.

00:39:48.940 --> 00:39:53.630
So all I have to
do is-- let's see.

00:39:53.630 --> 00:39:54.929
Just say fan.

00:39:54.929 --> 00:39:55.970
I also created a JSON on.

00:39:55.970 --> 00:39:59.470
So it's fan on equal to false.

00:39:59.470 --> 00:40:04.780
And I just send the command
and the fan is turned off.

00:40:04.780 --> 00:40:08.370
So you can either use the
system to create rules,

00:40:08.370 --> 00:40:12.929
either using Cloud Function or
Dataflow to act on the device,

00:40:12.929 --> 00:40:13.470
send command.

00:40:13.470 --> 00:40:15.820
Or you can do it
from UI as well.

00:40:15.820 --> 00:40:18.450
So as a quick demo
of batch registration

00:40:18.450 --> 00:40:20.490
and how you can use
connected devices,

00:40:20.490 --> 00:40:24.060
send to cloud to act on it, and
then send commands and messages

00:40:24.060 --> 00:40:25.560
back to devices as well.

00:40:25.560 --> 00:40:28.380
Let's switch to the main
deck so we can wrap it up.

00:40:34.860 --> 00:40:35.970
So we went through this.

00:40:38.960 --> 00:40:43.270
So in the summary, what
you saw was we have Android

00:40:43.270 --> 00:40:47.650
Things, which really takes
care of security at the edge,

00:40:47.650 --> 00:40:50.500
managing those devices
at scale at the edge.

00:40:50.500 --> 00:40:52.810
And also, running
actionable insights

00:40:52.810 --> 00:40:54.730
at the edge using TensorFlow.

00:40:54.730 --> 00:40:57.280
And we have Cloud
IoT Core to connect

00:40:57.280 --> 00:41:00.580
your existing and new devices
running Android Things--

00:41:00.580 --> 00:41:02.860
security Cloud IoT, Cloud--

00:41:02.860 --> 00:41:06.100
and then leverage our other
services such as Pub/Sub, Cloud

00:41:06.100 --> 00:41:09.760
Function, Dataflow, and others
to have secured connection

00:41:09.760 --> 00:41:12.090
from device to cloud,
run scalable app,

00:41:12.090 --> 00:41:16.070
build scalable application, and
really get actionable insights.

00:41:16.070 --> 00:41:19.190
So next steps, we
have helpful links.

00:41:19.190 --> 00:41:21.340
So if you were interested
more in Android Things,

00:41:21.340 --> 00:41:24.640
go to
developer.android.com/things.

00:41:24.640 --> 00:41:27.460
Cloud IoT Core is
currently on private beta,

00:41:27.460 --> 00:41:31.720
so you can go to
cloud.google.com/iot-core

00:41:31.720 --> 00:41:32.581
and request access.

00:41:32.581 --> 00:41:35.080
And we're reviewing access and
we'll provide you access over

00:41:35.080 --> 00:41:36.560
the next couple of weeks.

00:41:36.560 --> 00:41:39.100
So in summary, we're
very excited with what

00:41:39.100 --> 00:41:40.030
you guys can do.

00:41:40.030 --> 00:41:41.890
And we love to hear
your feedback, both

00:41:41.890 --> 00:41:43.750
on Android Things
and Cloud IoT Core

00:41:43.750 --> 00:41:45.150
as it comes to building
enterprise applications.

00:41:45.150 --> 00:41:45.690
Thank you.

00:41:45.690 --> 00:41:46.648
HANWOOK KIM: Thank you.

00:41:46.648 --> 00:41:47.882
[APPLAUSE]

00:41:47.882 --> 00:41:53.434
[MUSIC PLAYING]

