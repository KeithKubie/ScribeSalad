WEBVTT
Kind: captions
Language: en

00:00:01.300 --> 00:00:02.000
Gundrota: This new functionality
that's, uh, included

00:00:02.000 --> 00:00:04.467
in these browsers
allows developers

00:00:04.467 --> 00:00:06.801
to have their cake
and eat it too.

00:00:06.801 --> 00:00:09.400
We still get the best
of the web browser

00:00:09.400 --> 00:00:12.334
deployment model--
the friction-free deployment--

00:00:12.334 --> 00:00:15.534
and for the first time
as developers,

00:00:15.534 --> 00:00:18.267
we're able to access
the underlying services

00:00:18.267 --> 00:00:21.334
such as geolocation
or the graphic subsystem

00:00:21.334 --> 00:00:23.634
or storage or CPU services

00:00:23.634 --> 00:00:26.400
in a way that was formerly
only limited

00:00:26.400 --> 00:00:28.434
to native applications.

00:00:28.434 --> 00:00:30.701
And those capabilities,
we believe,

00:00:30.701 --> 00:00:35.200
will close the remaining gap
in usability and performance

00:00:35.200 --> 00:00:37.167
from native apps
and web applications

00:00:37.167 --> 00:00:38.968
even further.

00:00:38.968 --> 00:00:40.634
Course, it's not just
about the technology.

00:00:40.634 --> 00:00:41.767
It's about people.

00:00:41.767 --> 00:00:43.434
It's about the people
in this room.

00:00:43.434 --> 00:00:46.734
Those who've contributed
to this amazing acceleration

00:00:46.734 --> 00:00:48.501
of innovation
that we've seen.

00:00:48.501 --> 00:00:52.634
This chart is the unique,
monthly contributors,

00:00:52.634 --> 00:00:54.167
um, to open source projects.

00:00:54.167 --> 00:00:56.434
And just look at the growth
of our community--

00:00:56.434 --> 00:00:59.701
of developers contributing
to make the web better.

00:00:59.701 --> 00:01:02.367
And so it's no surprise
that as our community grows,

00:01:02.367 --> 00:01:04.133
we see more innovation.

00:01:04.133 --> 00:01:05.801
I mean, just stop
for a moment.

00:01:05.801 --> 00:01:07.467
Did you realize
that in the last decade,

00:01:07.467 --> 00:01:10.133
we have seen
a 100x improvement

00:01:10.133 --> 00:01:12.767
in JavaScript parsing?

00:01:12.767 --> 00:01:14.601
Think about the implications.

00:01:14.601 --> 00:01:17.400
The implications are that
what we thought was impossible

00:01:17.400 --> 00:01:19.701
to do in the browser
with JavaScript

00:01:19.701 --> 00:01:22.033
may now become possible.

00:01:22.033 --> 00:01:24.167
Of course,
that's just one example

00:01:24.167 --> 00:01:25.501
of technological improvement.

00:01:25.501 --> 00:01:27.400
We're going to show you
lots more today.

00:01:27.400 --> 00:01:29.667
More the community growing,
more innovation,

00:01:29.667 --> 00:01:32.167
has lead to the ultimate metric
of success,

00:01:32.167 --> 00:01:33.434
which is users.

00:01:33.434 --> 00:01:35.667
And today, we have
almost half a billion people

00:01:35.667 --> 00:01:38.167
who are using modern,
open source browsers.

00:01:38.167 --> 00:01:40.767
And I think that is just
a fantastic testimony

00:01:40.767 --> 00:01:43.033
to the success that we
as a community have had

00:01:43.033 --> 00:01:46.067
in moving the web forward.

00:01:46.067 --> 00:01:48.334
I'm gonna walk you through
some new capabilities

00:01:48.334 --> 00:01:52.234
in what I'm going
to broadly categorize as HTML 5.

00:01:52.234 --> 00:01:54.667
We believe that the capabilities
that I'm about to show you

00:01:54.667 --> 00:01:58.434
in this keynote allow us
to move beyond Web 2.0 apps,

00:01:58.434 --> 00:02:01.133
but really move to kind of apps
that have capability,

00:02:01.133 --> 00:02:03.400
have a fidelity,
have an experience

00:02:03.400 --> 00:02:06.067
that I think
will surprise you.

00:02:06.067 --> 00:02:08.400
Before I go
into those new standards,

00:02:08.400 --> 00:02:10.801
I want to tell
a cautionary tale

00:02:10.801 --> 00:02:15.868
and I want to plead
for help from you.

00:02:15.868 --> 00:02:17.434
Almost a decade ago,

00:02:17.434 --> 00:02:19.467
I was on another team
responsible

00:02:19.467 --> 00:02:23.234
for driving the adoption
of XMLHttpRequest.

00:02:23.234 --> 00:02:25.801
It was a new capability
we had added to the browser

00:02:25.801 --> 00:02:28.033
that allowed
for asynchronous callback.

00:02:28.033 --> 00:02:30.334
And I talked to many companies,
many developers,

00:02:30.334 --> 00:02:33.868
and we just
didn't get traction

00:02:33.868 --> 00:02:37.200
until--do you know when?

00:02:37.200 --> 00:02:41.300
Until about April of 2004
when Google released Gmail

00:02:41.300 --> 00:02:45.067
and we saw an explosion
of Ajax apps.

00:02:45.067 --> 00:02:47.234
Yet those underlying
capabilities

00:02:47.234 --> 00:02:49.167
that enabled
those Ajax applications

00:02:49.167 --> 00:02:50.767
had laid dormant
in the browser

00:02:50.767 --> 00:02:53.601
for over half a decade

00:02:53.601 --> 00:02:55.868
because no killer apps
were developed

00:02:55.868 --> 00:02:58.534
that exploited
those capabilities.

00:02:58.534 --> 00:03:01.100
I'm going to plead with you
as a community,

00:03:01.100 --> 00:03:03.534
let's not make
the same mistake again.

00:03:03.534 --> 00:03:05.601
As we talk about these
new standards this morning

00:03:05.601 --> 00:03:07.267
around HTML 5,

00:03:07.267 --> 00:03:09.400
recognize that having
the capability

00:03:09.400 --> 00:03:12.133
in the underlying platform
is not enough.

00:03:12.133 --> 00:03:14.300
It's up to you
and people like Google--

00:03:14.300 --> 00:03:15.801
companies like Google
and others--

00:03:15.801 --> 00:03:17.400
to build the compelling apps

00:03:17.400 --> 00:03:19.634
that are exploitive
of these capabilities.

00:03:19.634 --> 00:03:21.801
Let's not wait
another half decade.

00:03:21.801 --> 00:03:23.133
Let's take advantage
of these things

00:03:23.133 --> 00:03:24.400
that you'll see this morning.

00:03:24.400 --> 00:03:26.067
Let's build
those exploitive apps.

00:03:26.067 --> 00:03:30.167
Let's move the web forward
even faster.

00:03:30.167 --> 00:03:32.000
So this morning, I'm going
to invite up Matt Waddell

00:03:32.000 --> 00:03:33.434
to walk us through--

00:03:33.434 --> 00:03:35.434
we're gonna go through
about 16 demos this morning.

00:03:35.434 --> 00:03:37.100
You're going to see a lot
of the capabilities

00:03:37.100 --> 00:03:38.467
we're talking about.

00:03:38.467 --> 00:03:40.901
And Matt, my colleague, is going
to walk through these demos

00:03:40.901 --> 00:03:42.634
as I--as I talk over them.

00:03:42.634 --> 00:03:45.300
We're going to emphasize
five things

00:03:45.300 --> 00:03:47.067
that excite Google

00:03:47.067 --> 00:03:49.467
and we think you should be
paying attention to

00:03:49.467 --> 00:03:51.367
in the HTML 5 world.

00:03:51.367 --> 00:03:53.767
The first one is canvas.

00:03:53.767 --> 00:03:55.667
Let's talk
about the problem.

00:03:55.667 --> 00:03:57.200
You're developers.

00:03:57.200 --> 00:04:00.868
How do you draw a diagonal line
in the browser?

00:04:04.701 --> 00:04:06.067
Think about it.
What do you do?

00:04:06.067 --> 00:04:08.434
Draw a diagonal line
in the browser.

00:04:08.434 --> 00:04:09.934
Well, I know, you think,
well, Vic,

00:04:09.934 --> 00:04:12.167
I guess you can't really draw
a diagonal line in the browser.

00:04:12.167 --> 00:04:13.767
You would draw and image
on the server.

00:04:13.767 --> 00:04:14.934
You'd push the image down

00:04:14.934 --> 00:04:16.200
and you'd get
your diagonal line.

00:04:16.200 --> 00:04:17.534
Yeah, you're right.

00:04:17.534 --> 00:04:18.934
But then, of course,
your interactivity

00:04:18.934 --> 00:04:21.300
is limited to the granularity
of the image tag.

00:04:21.300 --> 00:04:23.100
That's not very interactive.

00:04:23.100 --> 00:04:24.801
Some of you in the audience
are going, wait, wait,

00:04:24.801 --> 00:04:25.834
it's easier than that.

00:04:25.834 --> 00:04:29.701
Just use a VML
or Silverlight or Flash.

00:04:29.701 --> 00:04:32.701
And--and you're right.
Those approaches could work.

00:04:32.701 --> 00:04:36.434
But what if we wanted something
that was part of the open,

00:04:36.434 --> 00:04:40.767
transparent internet
that we know and love?

00:04:40.767 --> 00:04:42.901
And that's exactly
what canvas is.

00:04:42.901 --> 00:04:44.934
The canvas tag is intrinsic.
It's native.

00:04:44.934 --> 00:04:47.167
It fits seamlessly
into the page

00:04:47.167 --> 00:04:52.100
and works great with JavaScript
and CSS and the DOM.

00:04:52.100 --> 00:04:54.534
And canvas allows you
as a developer

00:04:54.534 --> 00:04:56.234
for the first time
within the browser

00:04:56.234 --> 00:04:58.667
to have drawing
and animation APIs

00:04:58.667 --> 00:05:00.400
with pixel-level control,

00:05:00.400 --> 00:05:02.968
which changes,
uh, the kind of applications

00:05:02.968 --> 00:05:04.000
we can deliver.

00:05:04.000 --> 00:05:05.334
Let me show you.

00:05:05.334 --> 00:05:08.067
In the first example
we're going to show--

00:05:08.067 --> 00:05:09.667
if we could switch
to the demo machine--

00:05:09.667 --> 00:05:12.501
Matt is just going to draw
within, uh, the browser.

00:05:12.501 --> 00:05:14.634
And he's using the mouse.
He's drawing.

00:05:14.634 --> 00:05:17.234
The magic here
is in the source code.

00:05:17.234 --> 00:05:18.801
That's the entire
source code.

00:05:18.801 --> 00:05:20.801
There are no plug-ins here.

00:05:20.801 --> 00:05:23.067
What's magical
is what Matt is highlighting.

00:05:23.067 --> 00:05:25.133
There's the use
of the canvas tag.

00:05:25.133 --> 00:05:26.968
And then the JavaScript
is doing nothing more

00:05:26.968 --> 00:05:29.868
than responding to mouse up
and mouse down movements.

00:05:29.868 --> 00:05:32.601
And he's drawing right there
within the browser.

00:05:32.601 --> 00:05:35.334
Let's show you a little bit
more advanced example.

00:05:35.334 --> 00:05:37.334
This is a first-person,
uh, shooter--

00:05:37.334 --> 00:05:38.734
I mean, gifter.

00:05:38.734 --> 00:05:40.067
We did this
on Mother's Day.

00:05:40.067 --> 00:05:41.634
And we thought
first-person shooter

00:05:41.634 --> 00:05:43.801
was not politically correct
so we changed his--

00:05:43.801 --> 00:05:44.868
the weapon.

00:05:44.868 --> 00:05:46.567
I guess he runs around
giving gifts.

00:05:46.567 --> 00:05:48.868
Uh, but once again,
the magic here,

00:05:48.868 --> 00:05:50.968
look at the JavaScript.

00:05:50.968 --> 00:05:54.133
It's the use of the canvas tag
and nothing more

00:05:54.133 --> 00:05:55.501
than--than JavaScript.

00:05:55.501 --> 00:05:57.501
And, you know, this is--
this is amazing.

00:05:57.501 --> 00:05:59.100
That kind of demo
half a decade ago

00:05:59.100 --> 00:06:01.567
or a decade ago
was amazing on the PC.

00:06:01.567 --> 00:06:03.501
Now you can do that
within the browser.

00:06:03.501 --> 00:06:05.167
This next example is Bespin.

00:06:05.167 --> 00:06:07.334
It's a development tool
from Mozilla Labs.

00:06:07.334 --> 00:06:09.334
It's an IDE that allows you
to build web apps.

00:06:09.334 --> 00:06:11.367
And it's,
uh, it's a fascinating tool.

00:06:11.367 --> 00:06:12.801
What's interesting
about the IDE

00:06:12.801 --> 00:06:14.868
is that it feels
like a native app.

00:06:14.868 --> 00:06:17.400
It's not a native app.
This is in the browser.

00:06:17.400 --> 00:06:20.634
And the use of canvas tags
to do pixel-level control

00:06:20.634 --> 00:06:24.567
gives this Bespin IDE tool
a level of richness

00:06:24.567 --> 00:06:26.000
and a native feel

00:06:26.000 --> 00:06:28.133
that I don't think
you're used to in the browser.

00:06:28.133 --> 00:06:29.601
Finally, let me show you
another example.

00:06:29.601 --> 00:06:31.100
This is an internal tool.

00:06:31.100 --> 00:06:32.801
We've never
demonstrated this publicly.

00:06:32.801 --> 00:06:34.033
We've never shown this.

00:06:34.033 --> 00:06:37.300
It's a tool we use at Google
to do profiling,

00:06:37.300 --> 00:06:39.100
um, uh, uh, characteristics,

00:06:39.100 --> 00:06:40.367
um, and so we can tweak
our apps

00:06:40.367 --> 00:06:42.067
and make them faster
and better.

00:06:42.067 --> 00:06:46.000
So we can switch
to, uh, machine two.

00:06:46.000 --> 00:06:47.400
And what Matt's going to do
is this is--

00:06:47.400 --> 00:06:48.834
this is running in Chrome.

00:06:48.834 --> 00:06:50.100
He's going to click
on the tab.

00:06:50.100 --> 00:06:51.934
And he--he turned on
this profiling tool

00:06:51.934 --> 00:06:53.834
that you see him moving
to the right.

00:06:53.834 --> 00:06:55.067
Now he's going
to open an article

00:06:55.067 --> 00:06:56.501
in &lt;i&gt;The New York Times.&lt;/i&gt;

00:06:59.400 --> 00:07:01.334
Yeah, I don't think
you clicked on that article.

00:07:01.334 --> 00:07:02.434
There we go.

00:07:02.434 --> 00:07:04.901
Now, as he,
uh, goes to that article,

00:07:04.901 --> 00:07:06.667
what will happen
is that profiling tool

00:07:06.667 --> 00:07:08.267
will start to graph,

00:07:08.267 --> 00:07:10.934
uh, the--the performance
characteristics

00:07:10.934 --> 00:07:12.934
of--of that particular
operation.

00:07:12.934 --> 00:07:15.501
Note how he can zoom in
to that profiling tool.

00:07:15.501 --> 00:07:17.801
Those spikes represent time

00:07:17.801 --> 00:07:19.601
or things that are slowing down
the app.

00:07:19.601 --> 00:07:22.501
And as he moves up and down,
he can see the various events.

00:07:22.501 --> 00:07:23.834
Matt, can you click--
there we go.

00:07:23.834 --> 00:07:25.434
So he opened up
a script tag.

00:07:25.434 --> 00:07:26.767
You can see
the pie chart there

00:07:26.767 --> 00:07:28.601
that shows what percent
of the time

00:07:28.601 --> 00:07:30.133
was on the JavaScript
compile,

00:07:30.133 --> 00:07:31.767
what percent
was on parsing the HTML

00:07:31.767 --> 00:07:33.133
and so forth.

00:07:33.133 --> 00:07:35.100
So the tool is interesting.

00:07:35.100 --> 00:07:36.934
But would you believe that tool
is completely built

00:07:36.934 --> 00:07:38.133
in HTML 5--

00:07:38.133 --> 00:07:39.634
that's just the use
of a canvas tag

00:07:39.634 --> 00:07:41.701
to produce this level
of high fidelity?

00:07:41.701 --> 00:07:43.300
It's an example
of the kind of apps

00:07:43.300 --> 00:07:45.667
that we as a community
can build

00:07:45.667 --> 00:07:48.968
once we have pixel-level control
on the screen.

00:07:48.968 --> 00:07:51.834
Let's go back to the slides.

00:07:51.834 --> 00:07:53.767
Course, one of the advantages
of using,

00:07:53.767 --> 00:07:55.267
uh, something like canvas

00:07:55.267 --> 00:07:58.400
is that you as the developer
get to take advantage

00:07:58.400 --> 00:08:00.701
of performance improvements
in the browser.

00:08:00.701 --> 00:08:03.434
So as JavaScript continues
to get faster,

00:08:03.434 --> 00:08:04.701
you get to ride that rocket

00:08:04.701 --> 00:08:08.267
and automatically benefit
from that.

00:08:08.267 --> 00:08:09.934
Course, we've shown you
some examples

00:08:09.934 --> 00:08:13.400
of canvas to produce
higher fidelity apps in 2-D.

00:08:13.400 --> 00:08:15.534
Is the web ready for 3-D?

00:08:15.534 --> 00:08:16.834
We think it might be.

00:08:16.834 --> 00:08:18.968
In fact, I'd like to invite up
Matt Papakipos

00:08:18.968 --> 00:08:22.934
up to the stage
to show you some 3-D demos,

00:08:22.934 --> 00:08:24.367
uh, and some
emerging standards

00:08:24.367 --> 00:08:26.334
that we think
will surprise you.

00:08:26.334 --> 00:08:29.167
Matt.

00:08:29.167 --> 00:08:31.200
Papakipos: I got to go, right?
Gundrota: We've lost Matt.

00:08:31.200 --> 00:08:34.334
Aha! There he is.
Matt, please.

00:08:34.334 --> 00:08:36.067
Papakipos:
Thank you, Vic.

00:08:36.067 --> 00:08:38.033
[applause]

00:08:38.033 --> 00:08:39.634
So I'm Matt--Matt Papakipos.

00:08:39.634 --> 00:08:41.133
I run, uh, one of the--
one of the efforts

00:08:41.133 --> 00:08:42.634
in the Chrome team
at Google.

00:08:42.634 --> 00:08:44.601
Um, we are very excited
about the prospects

00:08:44.601 --> 00:08:46.434
for 3-D graphics
inside the web browser.

00:08:46.434 --> 00:08:47.601
And we'd like
to share with you,

00:08:47.601 --> 00:08:50.767
uh, what we've been
working on today.

00:08:50.767 --> 00:08:51.868
Over the last ten years,

00:08:51.868 --> 00:08:53.667
we've seen an explosion
in 3-D content

00:08:53.667 --> 00:08:55.567
that real users
use every day.

00:08:55.567 --> 00:08:58.767
Everything from video games
to engineering applications

00:08:58.767 --> 00:09:02.801
to data visualizations
like Google Earth.

00:09:02.801 --> 00:09:04.400
What's been missing thus far
is the ability

00:09:04.400 --> 00:09:06.367
to run these 3-D graphics
applications

00:09:06.367 --> 00:09:08.367
in the browser itself.

00:09:08.367 --> 00:09:11.701
So let me show you
what we've been working on.

00:09:11.701 --> 00:09:13.467
This is O3D.

00:09:13.467 --> 00:09:16.601
O3D is a-a project that we've
developed at Google,

00:09:16.601 --> 00:09:19.467
that we open sourced
a little over a month ago today.

00:09:19.467 --> 00:09:22.501
You can find this
on code.google.com.

00:09:22.501 --> 00:09:23.868
So what are we looking at?

00:09:23.868 --> 00:09:26.634
We're looking at rich,
interactive, 3-D graphics

00:09:26.634 --> 00:09:28.400
running in the browser.

00:09:28.400 --> 00:09:30.067
It's a JavaScript API

00:09:30.067 --> 00:09:32.234
that a conventional
web application can use

00:09:32.234 --> 00:09:34.033
to get 3-D graphics
functionality

00:09:34.033 --> 00:09:35.801
whenever you want
in your app.

00:09:35.801 --> 00:09:37.601
As you can see, we're running it
here in Chrome.

00:09:37.601 --> 00:09:43.000
But it also runs in Firefox
and IE and Safari and Opera.

00:09:43.000 --> 00:09:44.601
This, uh, the application
we're running

00:09:44.601 --> 00:09:46.334
is what we call
our beach demo.

00:09:46.334 --> 00:09:48.300
It's one of the many
code samples we developed

00:09:48.300 --> 00:09:50.501
for 3-D that makes sure
that the technology worked

00:09:50.501 --> 00:09:51.801
and performed.

00:09:51.801 --> 00:09:54.467
Uh, and it's open sourced
on code.google.com.

00:09:54.467 --> 00:09:56.968
So the--the full source code
of the JavaScript

00:09:56.968 --> 00:09:59.567
and all the art assets
are fully open sourced.

