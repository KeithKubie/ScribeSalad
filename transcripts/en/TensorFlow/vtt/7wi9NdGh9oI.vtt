WEBVTT
Kind: captions
Language: en

00:00:06.916 --> 00:00:09.436
Hello everyone, my name is Cory McLean,

00:00:09.436 --> 00:00:12.776
and I'm an engineer on 
the genomics team in Google Brain.

00:00:13.125 --> 00:00:15.616
Today I'm excited 
to tell you about Nucleus,

00:00:15.616 --> 00:00:19.166
which is a library we've released today

00:00:19.166 --> 00:00:23.057
to make it easy to bring 
genomics data to TensorFlow.

00:00:25.486 --> 00:00:30.488
So genomics is a study of the structure
and function of genomes.

00:00:30.488 --> 00:00:33.622
In every cell in your body 
you have two copies of the genome,

00:00:33.622 --> 00:00:35.493
one from each parent.

00:00:35.493 --> 00:00:39.327
And this is the strings of DNA,
which is a four-letter alphabet,

00:00:39.327 --> 00:00:42.861
and about 3 billion letters in the genome.

00:00:43.190 --> 00:00:49.035
So here is a picture of a snapshot
on chromosome 1 - 150,000 letters.

00:00:49.474 --> 00:00:55.164
What we can see is there's a number
of known things about this area.

00:00:55.164 --> 00:00:57.793
One, there are functional elements,

00:00:57.793 --> 00:01:00.659
like the genes depicted 
in that second row.

00:01:01.333 --> 00:01:06.625
Biological measurements allow us 
to analyze what are different things

00:01:06.625 --> 00:01:09.484
that are active in cells, 
so on that third row

00:01:09.484 --> 00:01:11.894
we can see the amount of gene expression

00:01:11.894 --> 00:01:15.804
across different tissue types
is quantified there.

00:01:16.065 --> 00:01:19.498
And at the bottom, 
through sequencing many people,

00:01:19.498 --> 00:01:23.424
we can identify places where 
there's variation across individuals.

00:01:25.115 --> 00:01:29.075
There's many different 
computational algorithmic challenges

00:01:29.075 --> 00:01:31.604
in developing that image.

00:01:31.888 --> 00:01:36.428
This ranges from: 
on the experimental data generation side,

00:01:36.428 --> 00:01:40.177
can we better take the output 
of these physical measurements

00:01:40.177 --> 00:01:42.216
to get accurate DNA readings?

00:01:42.216 --> 00:01:48.567
Or reduce noise in the experiments
that quantify this expression?

00:01:49.527 --> 00:01:51.074
Can we take the DNA sequence

00:01:51.074 --> 00:01:55.229
and interpret where are 
functional elements like these genes?

00:01:55.229 --> 00:01:59.549
Or predict how active 
are they in different tissue types?

00:02:00.019 --> 00:02:04.411
And can we identify places 
where individuals vary

00:02:04.411 --> 00:02:06.489
compared to our reference?

00:02:06.489 --> 00:02:11.101
And how is that different 
in small variance versus, say, in cancer?

00:02:11.380 --> 00:02:14.722
And how did those changes 
influence human traits?

00:02:16.320 --> 00:02:20.756
One thing that is really exciting for us
is there are many opportunities

00:02:20.756 --> 00:02:22.893
for deep learning in genomics.

00:02:22.893 --> 00:02:25.055
Now a lot of that is driven 
by the increase

00:02:25.055 --> 00:02:27.085
in the amount of data available.

00:02:27.085 --> 00:02:30.126
This graph shows 
the dramatic reduction in cost

00:02:30.126 --> 00:02:33.878
to sequence a million bases of DNA 
over the past decade.

00:02:34.635 --> 00:02:38.696
But also there's a lot of structure
in these data sets

00:02:38.696 --> 00:02:41.421
that is often complex 
and difficult to represent

00:02:41.421 --> 00:02:43.456
with relatively simple models.

00:02:43.456 --> 00:02:47.478
But this may display 
a convolutional structure

00:02:47.478 --> 00:02:51.854
so we can use techniques 
from image classification

00:02:51.854 --> 00:02:53.737
as well as sequence models.

00:02:54.355 --> 00:02:56.251
And there have been 
a number of proven successes

00:02:56.251 --> 00:02:59.155
of applying deep learning
to problems in genomics

00:02:59.155 --> 00:03:03.107
such as DeepVariant, 
which is a tool our group developed

00:03:03.107 --> 00:03:07.276
to identify small variants
using convolutional neural networks.

00:03:08.916 --> 00:03:12.527
So our goals in genomics 
are multifaceted.

00:03:12.530 --> 00:03:17.844
One is to make it easy to apply 
TensorFlow to problems in genomics,

00:03:17.844 --> 00:03:19.666
and do this by creating libraries

00:03:19.666 --> 00:03:22.306
to make it easy to work
with genomics data.

00:03:22.306 --> 00:03:26.826
We're also interested in developing tools
and pushing the boundaries

00:03:26.826 --> 00:03:31.596
on some of these scientific questions
using those things that we've built,

00:03:31.596 --> 00:03:35.386
and then want to make 
all of that publicly available

00:03:35.386 --> 00:03:38.047
as tools that can be 
used by the community.

00:03:38.047 --> 00:03:41.495
So today I'll focus on 
the first part of making it easy

00:03:41.495 --> 00:03:44.036
to bring genomics data to TensorFlow.

00:03:45.014 --> 00:03:46.907
So what is a major problem?

00:03:46.907 --> 00:03:53.425
One major difficulty is that 
there are many different types of data

00:03:53.425 --> 00:03:56.064
that are generated for genomics research.

00:03:56.064 --> 00:04:00.175
You can see here on the right,
a subset of different types used,

00:04:00.175 --> 00:04:05.645
and these different file formats
have varying amounts of support

00:04:05.645 --> 00:04:09.145
and in general no uniform APIs.

00:04:09.796 --> 00:04:14.166
We also have some concerns
about efficiency and language support

00:04:14.166 --> 00:04:18.285
where we would like to be able to express
some manipulations in Python

00:04:18.285 --> 00:04:23.674
but it needs some effective ways 
to efficiently go through this data

00:04:23.674 --> 00:04:27.045
such that native Python 
wouldn't make that possible.

00:04:29.144 --> 00:04:32.637
So to address these challenges
we developed Nucleus,

00:04:32.637 --> 00:04:37.806
which is a C++ and Python library
for reading and writing genomic data

00:04:37.806 --> 00:04:40.536
to make it easy to bring 
to TensorFlow models,

00:04:40.536 --> 00:04:46.838
and then feed through the TF data API
that Derek talked about earlier today,

00:04:46.838 --> 00:04:49.962
for turning models 
for your particular task of interest.

00:04:50.344 --> 00:04:53.471
In this release we support the reading

00:04:53.471 --> 00:04:57.074
of many of the most common
data formats in genomics

00:04:57.074 --> 00:05:00.920
and provide a unified API 
across the different data types.

00:05:01.470 --> 00:05:05.454
So we're able to iterate 
through the different records

00:05:05.454 --> 00:05:08.435
of these different types, 
and be able to query

00:05:08.435 --> 00:05:12.633
on specific regions of the genome
to access the data there.

00:05:16.043 --> 00:05:21.243
The way that we developed this
uses protocol buffers under the hood

00:05:21.243 --> 00:05:26.784
so that we can implement 
all of the general parsing in C++

00:05:26.784 --> 00:05:33.088
and then make those available 
to other languages, like Python.

00:05:34.674 --> 00:05:40.505
For those of you familiar with genomics,
we end up using HTSlib

00:05:40.505 --> 00:05:46.674
which is a canonical parser 
for the high-throughput sequencing formats

00:05:46.674 --> 00:05:50.018
like the aligned reads and variants,

00:05:50.018 --> 00:05:53.544
and then wrap that to generate
the protocol buffers.

00:05:53.799 --> 00:05:58.054
And then use CLIF on top of this
to make the data available to Python.

00:05:58.354 --> 00:06:01.864
And finally we use 
some of the TensorFlow core libraries

00:06:01.864 --> 00:06:05.805
so that we can write out this data
as TFRecords

00:06:05.805 --> 00:06:08.515
so that they can be ingested
by the TF data API.

00:06:10.851 --> 00:06:15.290
So the data types that 
we currently support are the following

00:06:15.290 --> 00:06:17.924
ranging from general genome annotation

00:06:17.924 --> 00:06:22.734
to reference genomes
and different sequence reads,

00:06:22.734 --> 00:06:27.919
whether they're direct off a sequencer
or mapped, as well as genetic variants.

00:06:31.088 --> 00:06:36.400
So to give an example of the reading API
it's quite straightforward.

00:06:36.400 --> 00:06:38.696
So this is a toy example,

00:06:38.696 --> 00:06:42.316
but is essentially similar 
to what is used for DeepVariant,

00:06:42.316 --> 00:06:47.979
when we want to train a model
to identify actual genome variations

00:06:47.979 --> 00:06:53.358
based on mapped sequence reads
and a reference genome.

00:06:53.358 --> 00:06:55.959
So we have three different 
data types that we need.

00:06:55.959 --> 00:06:59.429
We import the different reader types

00:06:59.429 --> 00:07:02.189
and then, say, in this region 
that we're interested in

00:07:02.189 --> 00:07:06.059
we can issue queries
to each of the different reader types

00:07:06.059 --> 00:07:10.260
and then have iterables
of these protocol buffers as output,

00:07:10.260 --> 00:07:14.468
which we can then manipulate
and turn into TensorFlow examples.

00:07:17.204 --> 00:07:20.975
On the writing side, 
it's similarly straightforward.

00:07:21.991 --> 00:07:30.225
So if we have a list of variants,
for the common VCF format,

00:07:30.225 --> 00:07:34.055
we'll have an associated header
which provides metadata about this

00:07:34.055 --> 00:07:36.704
and then open a writer with that header

00:07:36.704 --> 00:07:39.429
and then just loop through 
the variants and write them.

00:07:39.429 --> 00:07:43.449
And note that we support
writing to block [inaudible] format

00:07:43.449 --> 00:07:49.294
which is common for 
the subsequent indexing by other tools.

00:07:49.578 --> 00:07:52.447
However, we can also write 
directly to TFRecords

00:07:52.447 --> 00:07:54.933
and here I'll provide 
some convenient methods

00:07:54.933 --> 00:07:56.544
to write out chartered data

00:07:56.544 --> 00:08:00.933
which we found helps avoiding 
certain hotspots in the genome,

00:08:01.602 --> 00:08:04.015
using a very similar API.

00:08:07.323 --> 00:08:13.445
Finally, we have been working 
with the Google Cloud team

00:08:13.445 --> 00:08:17.095
which has some tools
for analyzing variant data

00:08:17.095 --> 00:08:20.776
and so they have developed a tool
called Variant Transforms

00:08:20.776 --> 00:08:25.755
which allows you to load 
the VCF variant files to BigQuery

00:08:25.755 --> 00:08:27.163
using Apache Beam.

00:08:27.163 --> 00:08:31.313
And then you can do
structured queries over that data.

00:08:31.313 --> 00:08:36.546
And so we're working now to integrate 
here to have Nucleus under the hood

00:08:36.546 --> 00:08:39.937
providing that generation of the variants.

00:08:39.937 --> 00:08:44.971
And to learn more about that tool,
you can go to the link below.

00:08:47.637 --> 00:08:53.936
So to summarize, we have developed Nucleus
which is a C++ and Python library

00:08:53.936 --> 00:08:57.446
to make it easy to bring 
genomics data to TensorFlow,

00:08:57.446 --> 00:09:01.265
to train your models of interest
for genomic problems.

00:09:01.538 --> 00:09:05.516
We have the ability to interoperate
with Cloud Genomics

00:09:05.516 --> 00:09:09.495
and are being integrated into 
the variant transforms at the moment.

00:09:09.495 --> 00:09:16.295
This ended up being the foundation
of our CNN-based variant caller

00:09:16.295 --> 00:09:20.042
which is also available, 
open-source, at the link below.

00:09:21.123 --> 00:09:24.497
So with that I would like to thank you all
for your attention today.

00:09:24.715 --> 00:09:26.539
(applause)

