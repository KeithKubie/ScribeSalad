WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.730
[MUSIC PLAYING]

00:00:02.730 --> 00:00:07.260
"Dear bald guy, I watched
your threading videos.

00:00:07.260 --> 00:00:13.110
I spawned 100 threads to do my
work, and my app got slower.

00:00:13.110 --> 00:00:16.830
You're a horrible person,
and you should feel bad.

00:00:16.830 --> 00:00:21.590
#enumsmatter."

00:00:21.590 --> 00:00:24.940
My name is Colt McAnlis,
and yes, technically you

00:00:24.940 --> 00:00:26.900
can spawn hundreds of
threads for your app,

00:00:26.900 --> 00:00:29.230
but as you guessed
it, that might not be

00:00:29.230 --> 00:00:31.170
the best idea for performance.

00:00:31.170 --> 00:00:33.470
See, cramming too many
threads into not enough CPUs

00:00:33.470 --> 00:00:37.790
is an old problem, and for
decades now, thread scheduling

00:00:37.790 --> 00:00:39.680
has solved this by
using various metrics

00:00:39.680 --> 00:00:43.000
to determine which thread gets
the next slice of CPU time.

00:00:43.000 --> 00:00:45.990
Basically every thread
is assigned a priority.

00:00:45.990 --> 00:00:47.520
The scheduler then
gives preference

00:00:47.520 --> 00:00:49.750
to threads that are more
important, balancing that

00:00:49.750 --> 00:00:51.990
with the need to eventually
get all of its work done.

00:00:51.990 --> 00:00:54.760
Now, priorities are assigned
in a couple of ways.

00:00:54.760 --> 00:00:56.940
Firstly, Android
assigns thread priority

00:00:56.940 --> 00:01:00.953
based on the life cycle
activity state of your app.

00:01:00.953 --> 00:01:03.170
Active invisible
apps are assigned

00:01:03.170 --> 00:01:05.340
to the foreground group,
where the rest are assigned

00:01:05.340 --> 00:01:06.590
to the background group.

00:01:06.590 --> 00:01:09.350
And threads in the foreground
group get about 90% to 95%

00:01:09.350 --> 00:01:11.850
of total execution time for the
device, where the background

00:01:11.850 --> 00:01:16.180
group only gets about 5% to 10%,
which of course makes sense.

00:01:16.180 --> 00:01:18.010
I mean, visible
applications on the screen

00:01:18.010 --> 00:01:19.730
should get more
processor allocation

00:01:19.730 --> 00:01:21.390
than apps which aren't visible.

00:01:21.390 --> 00:01:21.900
Hm.

00:01:21.900 --> 00:01:24.720
Secondly, it's important to note
that when a thread is created,

00:01:24.720 --> 00:01:28.090
by default it's given the same
priority and group memberships

00:01:28.090 --> 00:01:29.610
as the spawning thread.

00:01:29.610 --> 00:01:31.510
As such, it competes
on equal terms

00:01:31.510 --> 00:01:33.250
for processor time allocation.

00:01:33.250 --> 00:01:36.250
So if your UI thread spawns
20 other high priority work

00:01:36.250 --> 00:01:38.550
threads, they will
all compete equally

00:01:38.550 --> 00:01:40.969
for CPU resources,
which pretty much ruins

00:01:40.969 --> 00:01:42.510
your chance of
getting all of your UI

00:01:42.510 --> 00:01:44.730
work done in 16 milliseconds.

00:01:44.730 --> 00:01:46.390
To fix this, you
should explicitly

00:01:46.390 --> 00:01:48.410
set thread priority
for any threads

00:01:48.410 --> 00:01:50.540
you create in your application.

00:01:50.540 --> 00:01:53.030
This helps the system to
schedule competing threads

00:01:53.030 --> 00:01:54.840
in the same control group.

00:01:54.840 --> 00:01:56.550
On Android, this is
accomplished using

00:01:56.550 --> 00:01:59.860
the handy
Process.setThreadPriority API.

00:01:59.860 --> 00:02:02.610
Now, just to be
confusing, this function

00:02:02.610 --> 00:02:04.740
takes an integer value
between negative 20

00:02:04.740 --> 00:02:09.976
and 20 where a lower value
indicates a higher priority.

00:02:09.976 --> 00:02:11.350
Technically
speaking, this number

00:02:11.350 --> 00:02:12.180
is actually supposed
to represent

00:02:12.180 --> 00:02:14.480
how friendly this thread
is with sharing its time,

00:02:14.480 --> 00:02:16.660
so negative numbers
means it's more

00:02:16.660 --> 00:02:18.280
hostile to sharing its time.

00:02:18.280 --> 00:02:20.140
But whatever.

00:02:20.140 --> 00:02:21.850
To make this a little
clearer, Android

00:02:21.850 --> 00:02:24.320
has provided some named
values for you to work with.

00:02:24.320 --> 00:02:27.020
These values are defined
by Android.OS.process

00:02:27.020 --> 00:02:29.940
and can be used as base
states to work against.

00:02:29.940 --> 00:02:33.790
Default, of course, is what your
threads are generally given.

00:02:33.790 --> 00:02:36.170
In addition to that, there
is a couple quantized values

00:02:36.170 --> 00:02:38.640
to help you increment or
decrement the priority

00:02:38.640 --> 00:02:40.920
to get a little bit more
fine grained control.

00:02:40.920 --> 00:02:42.720
For example, the
UI thread is always

00:02:42.720 --> 00:02:45.970
assigned Priority Default,
and any threads it spawned

00:02:45.970 --> 00:02:47.859
will also be given
that same value.

00:02:47.859 --> 00:02:49.400
But in reality,
worker threads should

00:02:49.400 --> 00:02:51.350
be lower priority,
which you can set

00:02:51.350 --> 00:02:55.200
by adding Priority Default
and Priority Less Favorable.

00:02:55.200 --> 00:02:57.790
This way you can control
which of your spawned threads

00:02:57.790 --> 00:03:00.970
might be more or less
important than others.

00:03:00.970 --> 00:03:02.930
And in truth, setting
these priorities

00:03:02.930 --> 00:03:04.530
yourself can be cumbersome.

00:03:04.530 --> 00:03:07.890
And that's why classes like
AsyncTask or IntentServices

00:03:07.890 --> 00:03:11.320
do this on your behalf, so you
don't have to deal with it.

00:03:11.320 --> 00:03:12.934
But if you're using
threading and not

00:03:12.934 --> 00:03:15.100
using one of these fancy
primitives, then of course,

00:03:15.100 --> 00:03:16.641
you'll have to set
priority yourself,

00:03:16.641 --> 00:03:18.227
so keep an eye
out on that, which

00:03:18.227 --> 00:03:20.060
is always the weird
thing about performance.

00:03:20.060 --> 00:03:21.675
There's many ways
to do one thing,

00:03:21.675 --> 00:03:24.050
which is why you should check
out the rest of the Android

00:03:24.050 --> 00:03:26.450
Performance Patterns videos,
to get a better sense of all

00:03:26.450 --> 00:03:28.880
the options you have, and don't
forget to join the Google+

00:03:28.880 --> 00:03:32.580
community to ask questions
to other great developers.

00:03:32.580 --> 00:03:35.220
So keep calm, profile your
code, and always remember

00:03:35.220 --> 00:03:36.420
perf matters.

00:03:36.420 --> 00:03:39.770
[MUSIC PLAYING]

