WEBVTT
Kind: captions
Language: en

00:00:05.890 --> 00:00:07.850
&gt;&gt;Ankur: Hi everyone!

00:00:07.850 --> 00:00:11.000
Welcome to another APAC Developer Office Hours.

00:00:11.000 --> 00:00:15.920
For those of you who haven't joined us before
this is basically a session where you can

00:00:15.920 --> 00:00:22.070
ask us questions live on Android development
and we can do our best to answer them live

00:00:22.070 --> 00:00:27.939
or what we actually recommend is you post
your questions ahead of time and we provide

00:00:27.939 --> 00:00:31.159
a moderator link for that, a Google moderator
link.

00:00:31.159 --> 00:00:39.100
The best way to tune into this is through
Developers.Google.com/live and you'll see

00:00:39.100 --> 00:00:45.239
all of the other office hours starred events
or all Google developer live events including

00:00:45.239 --> 00:00:46.329
the Android ones.

00:00:46.329 --> 00:00:49.070
So thank you for joining in today.

00:00:49.070 --> 00:00:53.239
I'm joined here this week by Anirudh Dewani
from Bangalore.

00:00:53.239 --> 00:00:56.890
&gt;&gt;Anirudh: Hi there, it's actually Hyderabad

00:00:56.890 --> 00:00:59.019
&gt;&gt;Ankur: Hyderabad, I'm sorry, Anirudh.

00:00:59.019 --> 00:01:00.300
&gt;&gt;Anirudh: It's alright.

00:01:00.300 --> 00:01:05.810
&gt;&gt;Ankur: It's hard to keep track of your travel
and I often make mistakes so I apologize.

00:01:05.810 --> 00:01:11.250
&gt;&gt;Anirudh: Anyway, it's great to be joining
and welcome all of you.

00:01:11.250 --> 00:01:16.799
&gt;&gt;Ankur: And I am of course Ankur Kotwal and
I'm joining you from Sydney, Australia.

00:01:16.799 --> 00:01:22.990
Today I'm in a secret closet, well it's not
really a closet but it feels like one and,

00:01:22.990 --> 00:01:30.110
uh, so yeah, hopefully you've been having
a good day and a good week so far.

00:01:30.110 --> 00:01:38.110
So what we usually do is we go to the Google
moderator link, we bring that up and we, uh,

00:01:38.110 --> 00:01:39.579
we start looking at the questions.

00:01:39.579 --> 00:01:40.880
So, uh
[Clears throat]

00:01:40.880 --> 00:01:43.450
&gt;&gt;Ankur: I'm just gonna go ahead and do that.

00:01:43.450 --> 00:01:45.830
Today we're gonna try something different.

00:01:45.830 --> 00:01:48.950
We're gonna try screen sharing on Google plus.

00:01:48.950 --> 00:01:54.719
Now, this could, of course, blow up in our
faces but I suspect it should be okay.

00:01:54.719 --> 00:02:03.039
So let me try that, let's go screen share
and we will bring up the questions.

00:02:03.039 --> 00:02:10.010
And today we have 9 questions and you know
people have voted on them.

00:02:10.010 --> 00:02:14.630
So it's not too late to submit questions for
today's session.

00:02:14.630 --> 00:02:19.680
This is live so we will, before we wrap up
for the day we will go in and check those

00:02:19.680 --> 00:02:21.460
questions again.

00:02:21.460 --> 00:02:24.000
So, let's get started then.

00:02:24.000 --> 00:02:32.170
The first question is, "Looking at the APIs
available is there a Hangout API for web?"

00:02:32.170 --> 00:02:38.900
I'm sorry, "There is a Hangout API for web
and a Google Plus SDK for Android "coming

00:02:38.900 --> 00:02:39.900
soon."

00:02:39.900 --> 00:02:45.959
Is there any plans to expose G plus hangouts
in the Google Plus SDK and if so, roughly

00:02:45.959 --> 00:02:47.511
when will this functionality be enabled?"

00:02:47.511 --> 00:02:52.129
That's a good question.

00:02:52.129 --> 00:02:57.269
Before I answer it I just wanna also bring
up the next question because it's related

00:02:57.269 --> 00:03:03.989
and it's this one here that says, "Any word
on when the Android SDK for Google Plus will

00:03:03.989 --> 00:03:06.220
be available for download?"

00:03:06.220 --> 00:03:15.180
So we've, uh, we've mentioned this before
that we actually can't share any dates with

00:03:15.180 --> 00:03:18.480
you externally.

00:03:18.480 --> 00:03:26.480
When it's ready and available we will make
the SDK public and available for all of you.

00:03:26.480 --> 00:03:33.480
So let me just bring up, Developers.Google.com/plus
/mobile.

00:03:33.480 --> 00:03:38.379
This is basically where the Google Plus SDK
will be found.

00:03:38.379 --> 00:03:40.730
It's not out yet.

00:03:40.730 --> 00:03:45.689
It's coming soon from for Android as was mentioned
and as I said, we can't really speak to the

00:03:45.689 --> 00:03:53.330
dates and the honest truth is we don't actually
know the dates so we would probably be lying

00:03:53.330 --> 00:03:58.370
if we made something up and we could get in
trouble for that so we'd rather not.

00:03:58.370 --> 00:04:03.630
Basically here you'll find that it's, that
this is where you'll find the SDK when it's

00:04:03.630 --> 00:04:09.099
released and don't you worry we'll be very
vocal about it so you'll know that it's out.

00:04:09.099 --> 00:04:15.170
But, while it's still baking you can go ahead
and have a look at this page and you'll see

00:04:15.170 --> 00:04:22.050
that it actually describes what APIs are going
to be available at the time of release.

00:04:22.050 --> 00:04:25.210
So, I guess I'll just go through them quickly.

00:04:25.210 --> 00:04:31.340
There'll be a sign in on Google Plus so you
can use the identity management side of things.

00:04:31.340 --> 00:04:35.930
You'll be able to allow users to share content
from within your apps.

00:04:35.930 --> 00:04:41.760
Of course, the plus one button will be there
to allow users to engage on Google Plus through

00:04:41.760 --> 00:04:43.560
your app.

00:04:43.560 --> 00:04:50.530
We also have something called history API
and we have personalization and there's some

00:04:50.530 --> 00:04:52.080
APIs there.

00:04:52.080 --> 00:04:56.550
You'll notice that we haven't made any mention
of the Hangout API.

00:04:56.550 --> 00:05:01.010
The honest truth is I don't know whether there'll
be a Hangout API, if I did I probably couldn't

00:05:01.010 --> 00:05:02.690
tell you about it.

00:05:02.690 --> 00:05:10.410
So, anyways, the Google Plus mobile SDK is
for Android, it is coming soon and you should

00:05:10.410 --> 00:05:12.850
just stay tuned.

00:05:12.850 --> 00:05:16.850
Okay, let us go back to the questions.

00:05:16.850 --> 00:05:19.760
Switch back.

00:05:19.760 --> 00:05:23.640
And here we are.

00:05:23.640 --> 00:05:28.250
So that's the first two questions that we've
answered.

00:05:28.250 --> 00:05:35.980
The next one, "Are there any plans to provide
real multi session on tablets and APIs?

00:05:35.980 --> 00:05:42.650
How about some services for games to save
the preferences of the user and saves on Cloud

00:05:42.650 --> 00:05:47.140
level so that they can continue either on
tablet or phone?"

00:05:47.140 --> 00:05:50.570
That's a very good question.

00:05:50.570 --> 00:05:51.940
Hi, Andrew!

00:05:51.940 --> 00:05:53.310
&gt;&gt;Andrew: Hi.

00:05:53.310 --> 00:05:57.330
&gt;&gt;Ankur: We'll finish answering this question
and it looks like the next one is from you

00:05:57.330 --> 00:05:58.330
anyway.

00:05:58.330 --> 00:06:00.700
So we'll get to you in a minute.

00:06:00.700 --> 00:06:01.700
&gt;&gt;Andrew: That works.

00:06:01.700 --> 00:06:05.820
&gt;&gt;Ankur: Uh, actually, we just answered one
from you regarding the Android SDK for Google

00:06:05.820 --> 00:06:06.820
Plus.

00:06:06.820 --> 00:06:09.070
&gt;&gt;Andrew: Yeah, I saw that.

00:06:09.070 --> 00:06:10.700
&gt;&gt;Ankur: Yeah, good.

00:06:10.700 --> 00:06:11.700
[Laughter]

00:06:11.700 --> 00:06:17.440
&gt;&gt;Ankur: So, multi session APIs on tablets,
like I said, this is one of those, another

00:06:17.440 --> 00:06:19.590
one of those, "Hey, what's happening in the
future?"

00:06:19.590 --> 00:06:21.440
type things.

00:06:21.440 --> 00:06:25.960
You know, it is, what you're suggesting sounds
like a really useful idea.

00:06:25.960 --> 00:06:31.990
So, we don't have anything to share right
now about whether such an API exists or is

00:06:31.990 --> 00:06:32.990
coming in the future.

00:06:32.990 --> 00:06:38.820
It certainly not available now but part of
it is and that part is the saves on a Cloud

00:06:38.820 --> 00:06:40.660
level.

00:06:40.660 --> 00:06:44.250
Right now there's probably two ways you can
tackle this.

00:06:44.250 --> 00:06:47.410
One of them is using the backup service on
Android.

00:06:47.410 --> 00:06:54.650
So, basically, you can, your app can backup
some information to the Cloud and then when

00:06:54.650 --> 00:06:58.530
you fire up the app on other devices you can
restore that data.

00:06:58.530 --> 00:07:02.600
Keep in mind it's not really designed for
real time seeking but you might find that

00:07:02.600 --> 00:07:04.840
it's sufficient for what you're trying to
do.

00:07:04.840 --> 00:07:07.940
It really depends on your situation.

00:07:07.940 --> 00:07:14.350
The other way you could do it is through things
like the Google Drive SDK and use the Google

00:07:14.350 --> 00:07:20.660
Drive, uh, the user's Google Drive as a way
of storing your data and then pulling it down

00:07:20.660 --> 00:07:22.360
and syncing it with Cloud.

00:07:22.360 --> 00:07:32.340
There was a really good presentation at Google
IO 2012, this year, on using the Google Drive

00:07:32.340 --> 00:07:33.840
SDK on an Android.

00:07:33.840 --> 00:07:41.260
So, I would suggest you have a look at that
and see where it lands you.

00:07:41.260 --> 00:07:44.560
Is there anything else you wanna add to that
Anirudh?

00:07:44.560 --> 00:07:48.700
&gt;&gt;Anirudh: Yeah, thank you.

00:07:48.700 --> 00:07:54.110
So we don't have any real time Cloud backing
up for the session but you can save your preferences

00:07:54.110 --> 00:07:59.510
by using one of the options with just the
backup API but it's not real time.

00:07:59.510 --> 00:08:03.440
And then you can use the drive which can be
real time.

00:08:03.440 --> 00:08:07.700
&gt;&gt;Ankur: Thanks a lot, cool.

00:08:07.700 --> 00:08:11.310
Alright, Andrew it seems like someone bumped
you so I'll just get to them then I'll get

00:08:11.310 --> 00:08:12.310
to you.

00:08:12.310 --> 00:08:13.410
Hopefully they don't bump you again.

00:08:13.410 --> 00:08:15.360
&gt;&gt;Andrew: That's alright.

00:08:15.360 --> 00:08:16.360
[Laughter]

00:08:16.360 --> 00:08:19.360
&gt;&gt;Ankur: Alright, we have a question from
Arpit.

00:08:19.360 --> 00:08:24.140
He says, "I'm really trying to understand
the Android layout trend work.

00:08:24.140 --> 00:08:29.830
I get that you have to override methods like
onmeasure and onlayout but what's the class

00:08:29.830 --> 00:08:32.050
that's managing the entire lifecycle?

00:08:32.050 --> 00:08:35.669
i.e. what's the class that measures the top
level container?"

00:08:35.669 --> 00:08:38.330
&gt;&gt;Anirudh: Uh, I can take that one.

00:08:38.330 --> 00:08:41.300
&gt;&gt;Ankur: I'm sorry, go ahead Anirudh, all
yours.

00:08:41.300 --> 00:08:48.100
&gt;&gt;Anirudh: So, just give me a second to pull
up the question.

00:08:48.100 --> 00:08:58.320
Right, so, all your views of the container
would be a layout, like a reading layout or

00:08:58.320 --> 00:09:00.650
relative layout which is a view group.

00:09:00.650 --> 00:09:05.780
So that would take care of the responsibility
of calling the methods unmeasured layout and

00:09:05.780 --> 00:09:11.630
all the popular view groups are managed by
the form window manager and that would manage

00:09:11.630 --> 00:09:18.850
the lifecycle of the view groups and the views
inside them and their layout and measuring

00:09:18.850 --> 00:09:19.850
part.

00:09:19.850 --> 00:09:22.050
&gt;&gt;Ankur: Cool, thanks.

00:09:22.050 --> 00:09:27.440
I'd also just like to bring up a couple of
pages that might be useful for this person.

00:09:27.440 --> 00:09:37.400
Again, if you go to, you can see the URL at
the top, Developer.Android.com/guide/topics/ui/overview.html

00:09:37.400 --> 00:09:43.260
and it really gives you an overview of what
the view hierarchy is, how it's laid out,

00:09:43.260 --> 00:09:46.240
what the relationships in that view hierarchy
are.

00:09:46.240 --> 00:09:55.120
In terms of executing the lifecycle you'll
see overrides exist in the activity and also

00:09:55.120 --> 00:09:56.120
in the view.

00:09:56.120 --> 00:10:00.450
So in the activity, for example, you tend
to call set content view which basically goes

00:10:00.450 --> 00:10:05.400
and sets the top level view in your hierarchy.

00:10:05.400 --> 00:10:13.010
There is actually a root node that you can
get from the window called the [inaudible].

00:10:13.010 --> 00:10:17.300
But this is getting in to fairly low level
stuff so it'd be interesting to just find

00:10:17.300 --> 00:10:21.130
out from what perspective you're really asking
this question.

00:10:21.130 --> 00:10:29.590
So check out the activity documentation and,
finally, also check out the view itself, the

00:10:29.590 --> 00:10:34.650
view classes documentation because, again,
we go through in detail to say what all of

00:10:34.650 --> 00:10:37.930
these overrides are and at what point they
are kind of cold.

00:10:37.930 --> 00:10:42.820
And I know you alluded to sort of the fact
that you understood these ones from the view

00:10:42.820 --> 00:10:48.730
but you might, these pages might just help
give you the broader picture.

00:10:48.730 --> 00:10:58.760
Alright, I'm going to go back to questions
and we are at Andrew's question which is,

00:10:58.760 --> 00:11:08.400
"On Android 2.3 and 3.x I can use the audio
texts successfully inside a web view, however,

00:11:08.400 --> 00:11:13.720
when using the same app on Android 4.x I can
only play the audio file once.

00:11:13.720 --> 00:11:19.610
The current time gets stuck at infinity after
the first play and can't be set back to zero."

00:11:19.610 --> 00:11:22.240
Uh, Andrew, are you there?

00:11:22.240 --> 00:11:24.870
&gt;&gt;Andrew: Yeah I'm here, yeah.

00:11:24.870 --> 00:11:29.710
&gt;&gt;Ankur: So, I think I understood this question
but I haven't actually heard of this problem

00:11:29.710 --> 00:11:34.750
before so what I was hoping for was if you
can just one, give us an overview since you're

00:11:34.750 --> 00:11:40.630
here, you know, what the nuances around this
are, but if you can just provide a small example

00:11:40.630 --> 00:11:43.710
that I can reproduce this in it would really
help.

00:11:43.710 --> 00:11:44.710
&gt;&gt;Andrew: Cool.

00:11:44.710 --> 00:11:49.670
Yep, I can send you a couple lines of htmls
at some point and demonstrate them.

00:11:49.670 --> 00:11:55.590
It's really quite bizarre, I mean, I've got
this web app wrapping inside an Android app

00:11:55.590 --> 00:11:57.980
and it's gonna be inside an iPhone app as
well.

00:11:57.980 --> 00:12:03.390
But, yeah, it's just playing back the audio
files when you click on the little hyperlink

00:12:03.390 --> 00:12:10.010
that I've got on my page, it'll play the audio
fine multiple times on Android 2.3 devices

00:12:10.010 --> 00:12:11.010
and 3.

00:12:11.010 --> 00:12:20.040
Whatever devices but as soon as I go to a
device that's got 4.0 or 4.1 you hit the play

00:12:20.040 --> 00:12:23.960
button and it plays fine the first time but
then you can't play the sound file again.

00:12:23.960 --> 00:12:29.620
It's stuck at, like I said, one of the attributes
is the current time and at the end of the

00:12:29.620 --> 00:12:34.779
first playing through it's set to infinity
rather than kind of 3 seconds or whatever

00:12:34.779 --> 00:12:36.910
the length of the sound file is.

00:12:36.910 --> 00:12:40.990
And doing searches on the web would indicate
that you can just set time current time back

00:12:40.990 --> 00:12:46.350
to zero to set the play head back to the start
of the sound file but that doesn't seem to

00:12:46.350 --> 00:12:49.500
work so I was just wondering if there was
a weird freaky thing.

00:12:49.500 --> 00:12:53.470
I mean, I've done lots of searches on the
web and lots of people have different ideas

00:12:53.470 --> 00:12:57.650
about various bits and pieces but none of
the tricks seem to have worked so I just thought

00:12:57.650 --> 00:12:58.650
I'd post.

00:12:58.650 --> 00:13:00.640
&gt;&gt;Ankur: Okay, so, a couple of things just
on that.

00:13:00.640 --> 00:13:05.130
It'll be great if you can also give us the,
um, some of those references where people

00:13:05.130 --> 00:13:06.130
are discussing this

00:13:06.130 --> 00:13:07.540
&gt;&gt;Andrew: Yeah, yeah.

00:13:07.540 --> 00:13:09.960
On stack overflow I can send you some links.

00:13:09.960 --> 00:13:15.750
&gt;&gt;Ankur: Yeah, that would be ideal and the
other thing I was going to ask you is if you

00:13:15.750 --> 00:13:17.270
fire this up in the web browser

00:13:17.270 --> 00:13:18.790
&gt;&gt;Andrew: Yep

00:13:18.790 --> 00:13:24.750
&gt;&gt;Ankur: the built in browser on ice cream
sandwich and then also on Chrome, do you see

00:13:24.750 --> 00:13:26.390
the same behavior on both of them?

00:13:26.390 --> 00:13:27.390
&gt;&gt;Andrew: Yes.

00:13:27.390 --> 00:13:29.460
Yeah, yeah, yeah it's the same on both.

00:13:29.460 --> 00:13:34.040
So even though it's not even, like you say,
if you take away this web view inside the

00:13:34.040 --> 00:13:38.680
Android app part and just run it in the default
browser you still get the same behavior.

00:13:38.680 --> 00:13:42.190
If you run it inside of Chrome or Safari on
the desktop it works fine.

00:13:42.190 --> 00:13:43.910
&gt;&gt;Ankur: That's quite interesting.

00:13:43.910 --> 00:13:44.910
&gt;&gt;Andrew: Yeah.

00:13:44.910 --> 00:13:47.290
&gt;&gt;Ankur: I must admit I haven't heard of this
problem before.

00:13:47.290 --> 00:13:52.970
I only had the chance to do a cursory search
and I didn't find anything but maybe I wasn't

00:13:52.970 --> 00:13:54.070
looking for the right thing.

00:13:54.070 --> 00:13:55.070
&gt;&gt;Andrew: Yeah, yeah, yeah.

00:13:55.070 --> 00:13:58.680
I'll try and put together little sample stuff
so I can send it through.

00:13:58.680 --> 00:14:00.150
&gt;&gt;Ankur: Alright, great.

00:14:00.150 --> 00:14:04.000
That would be appreciated and then maybe we
can talk about it next week.

00:14:04.000 --> 00:14:06.520
&gt;&gt;Andrew: Yeah, yeah, sure.

00:14:06.520 --> 00:14:08.410
&gt;&gt;Ankur: Alright, cool.

00:14:08.410 --> 00:14:16.540
Uh, let me see, we asked the Android layout
question, we answered that one.

00:14:16.540 --> 00:14:26.190
Alright, we have someone called "Gears" asking,
"How can I make an Android app efficiently?"

00:14:26.190 --> 00:14:32.530
This is an interesting question and there's
several ways that you could, interpret it.

00:14:32.530 --> 00:14:39.700
For starters let me just say that's also a
very broad question in that there's no one

00:14:39.700 --> 00:14:42.960
simple answer.

00:14:42.960 --> 00:14:47.820
In terms of being efficient about making it,
it's good for you to go through the docs.

00:14:47.820 --> 00:14:52.020
So one way to interpret it is how do I, how
can I be efficient in the way that I develop

00:14:52.020 --> 00:14:53.200
this app?

00:14:53.200 --> 00:14:58.880
So make sure you're well aware of some of
the APIs that you're using, we have a ton

00:14:58.880 --> 00:15:04.610
of best practices around, you know, developing
for Android so make sure you're familiar with

00:15:04.610 --> 00:15:05.610
those.

00:15:05.610 --> 00:15:08.350
Familiarity with eclipse is also a useful
thing.

00:15:08.350 --> 00:15:13.180
In a multi developer environment you want
to use a robust version control system but,

00:15:13.180 --> 00:15:16.950
you know, there's no one magic answer.

00:15:16.950 --> 00:15:21.870
In terms of how to make your app itself efficient
which is the other way you could interpret

00:15:21.870 --> 00:15:27.520
it, well again there's a ton of best practices
around there but some of those sort of the

00:15:27.520 --> 00:15:33.240
basic ones don't do a lot of work in the main
thread cause that's also the UI thread.

00:15:33.240 --> 00:15:39.120
So if you're doing a lot of processing or
you're doing anything across the network make

00:15:39.120 --> 00:15:44.440
sure that you are doing that in a background
like you can use in an AC task or you can

00:15:44.440 --> 00:15:47.150
use threads, there's a number of options there.

00:15:47.150 --> 00:15:49.170
So make sure you utilize those.

00:15:49.170 --> 00:15:50.460
Don't reinvent the wheel.

00:15:50.460 --> 00:15:55.540
You know, if there's some good libraries out
there then utilize those, often they're quite

00:15:55.540 --> 00:15:57.930
heavily optimized as well.

00:15:57.930 --> 00:16:01.540
You know, again, this is a very broad question.

00:16:01.540 --> 00:16:06.950
When it comes to layouts in UI we've seen
developers sort of make the mistake of nesting

00:16:06.950 --> 00:16:12.040
tons and tons of layouts, you know, so linear
layout within linear layout within linear

00:16:12.040 --> 00:16:17.890
layout, that's just really inefficient and
it's quite expensive too.

00:16:17.890 --> 00:16:24.790
So, uh, those are the things that will tend
to slow down your app.

00:16:24.790 --> 00:16:26.490
Anirudh is there anything you wanna add to
that one?

00:16:26.490 --> 00:16:28.470
&gt;&gt;Anirudh: Yeah, just a quick thing.

00:16:28.470 --> 00:16:33.730
So if once you're working with a lot of data
and, for example, if you have a news reader

00:16:33.730 --> 00:16:40.060
app and you're fetching articles, do use the
synchronizing service because we have designed

00:16:40.060 --> 00:16:44.060
it very efficiently and it patches the request
from different apps together so the device

00:16:44.060 --> 00:16:46.310
is not waking up very often.

00:16:46.310 --> 00:16:50.370
So, yeah, do use some these framework components
that you have instead of pulling your, doing

00:16:50.370 --> 00:16:54.290
your requests in the timers or backgrounds.

00:16:54.290 --> 00:17:01.110
Regarding tools, as Ankur mentioned, we have
an awesome new tool, the [unintelligible]

00:17:01.110 --> 00:17:05.559
tool with Jelly Bean and it's really good
if you wanna analyze a performance in the

00:17:05.559 --> 00:17:06.829
memory of your application.

00:17:06.829 --> 00:17:16.030
So do, again, look at those tools before you
release your app and optimize it there.

00:17:16.030 --> 00:17:20.780
&gt;&gt;Ankur: Yeah, thank you.

00:17:20.780 --> 00:17:28.360
Alright, we have a question from Fung Lam
in Hong Kong, "In the IO12 app there is an

00:17:28.360 --> 00:17:36.470
action bar/spinner, depends on whether you're
in vertical or horizontal mode on the action

00:17:36.470 --> 00:17:37.930
bar and the view pager.

00:17:37.930 --> 00:17:43.970
However, the tab index will update when you
swipe on the view pager, the spinner is not

00:17:43.970 --> 00:17:44.970
updated.

00:17:44.970 --> 00:17:46.130
When will it get fixed?"

00:17:46.130 --> 00:17:57.100
So, uh, it seems to me like Fung, here, is
basically reporting a bug on the IO12 app.

00:17:57.100 --> 00:17:58.120
Thanks for reporting it, Fung.

00:17:58.120 --> 00:18:06.740
I will, it would probably best if you actually
report it to the project page itself because

00:18:06.740 --> 00:18:11.900
the engineers that sort of built that app
are actually not in this hangout and you obviously

00:18:11.900 --> 00:18:15.960
know the right test steps on how to reproduce
the bug.

00:18:15.960 --> 00:18:18.929
So I would suggest you go there.

00:18:18.929 --> 00:18:23.890
You may even contribute a patch if you want
to; it is an open source project.

00:18:23.890 --> 00:18:30.050
So, yeah, I would say engage in an open source
manner.

00:18:30.050 --> 00:18:38.520
Okay, next question, "For a person that has
not written a single Java application is it

00:18:38.520 --> 00:18:46.160
beneficial to use the NDK, using Native C
as I believe, to write an app?

00:18:46.160 --> 00:18:52.860
Can it be effective as one using the SDK and
writing Java code?"

00:18:52.860 --> 00:18:59.490
Um, interesting question, so, it's, again
depending on your skills.

00:18:59.490 --> 00:19:05.260
Using the NDK, it requires a bit more set
up.

00:19:05.260 --> 00:19:12.040
The developer experience is, well the learning
curve for developers is a bit steeper so knowing

00:19:12.040 --> 00:19:16.190
the language is one thing but you still need
to understand how the tools integrate, how

00:19:16.190 --> 00:19:24.830
you set, build system, how you debug those
apps, you know, how you interoperate between

00:19:24.830 --> 00:19:29.110
the native app and the sort of, the framework
of Android.

00:19:29.110 --> 00:19:37.670
And, in general I think it's actually harder
to learn all of that rather than sort of learn

00:19:37.670 --> 00:19:38.670
Java.

00:19:38.670 --> 00:19:44.990
Again, that's a generalization, it depends,
you may be a really awesome C coder and you're

00:19:44.990 --> 00:19:49.520
familiar with all of these sorts of things
and so you might find that more useful.

00:19:49.520 --> 00:19:55.850
Probably the answer is give it a go and see
how it turns out.

00:19:55.850 --> 00:19:59.610
I think it'll probably be easier, though,
to start in the Java side of things.

00:19:59.610 --> 00:20:04.680
The tooling is a lot better and there's just
few points of failure.

00:20:04.680 --> 00:20:06.190
Um, yeah.

00:20:06.190 --> 00:20:09.020
&gt;&gt;Andrew: With the NDK stuff

00:20:09.020 --> 00:20:10.060
&gt;&gt;Ankur: Yep.

00:20:10.060 --> 00:20:17.080
&gt;&gt;Andrew: is it a lower level kind of API
than the one that's exposed to Java or is

00:20:17.080 --> 00:20:22.710
it just a C interface to the existing things
like location manager and all that kind of

00:20:22.710 --> 00:20:23.710
stuff?

00:20:23.710 --> 00:20:24.710
Or is it more low level than that?

00:20:24.710 --> 00:20:28.110
&gt;&gt;Ankur: It's, it's a big of both, actually.

00:20:28.110 --> 00:20:34.780
So, so we expose some of the capabilities
of the framework to the, to the NDK stuff

00:20:34.780 --> 00:20:38.850
too for your C and C Plus code but not everything
is there.

00:20:38.850 --> 00:20:44.880
So some of it you end up having to build JNI
wrappers and going back and forth yourself

00:20:44.880 --> 00:20:49.090
and not only is that a little bit more work
but then you now have to start considering

00:20:49.090 --> 00:20:55.429
the performance cost of going, you know, marshalling
through that space all the time.

00:20:55.429 --> 00:21:01.429
So, uh, yeah it's a bit of both.

00:21:01.429 --> 00:21:06.560
Okay, well, next question I see we've had
a few more people join us so before I go ahead

00:21:06.560 --> 00:21:15.299
with the next question [inaudible name] or
[inaudible name] do you guys have any questions

00:21:15.299 --> 00:21:16.299
to ask?

00:21:16.299 --> 00:21:23.000
&gt;&gt;Male #1: Yep, um, my question was related
to view flipper which was introduced as an

00:21:23.000 --> 00:21:24.860
extension.

00:21:24.860 --> 00:21:29.799
I was really just wanting to ask, actually,
what I'm trying to do is I have a [unintelligible]

00:21:29.799 --> 00:21:33.490
related to my view flipper, view pager, sorry.

00:21:33.490 --> 00:21:36.160
&gt;&gt;Ankur: View pager, okay, yep.

00:21:36.160 --> 00:21:42.520
&gt;&gt;Male #1: And I'm trying to get the last
created fragment on an article of the page,

00:21:42.520 --> 00:21:48.740
let's say on page 2, I have a fragment with
just the [inaudible].

00:21:48.740 --> 00:21:51.410
What would be the most optimal solution for
that?

00:21:51.410 --> 00:21:57.200
Because I'm not able to get it and when I
say get on my adaptor I get a new fragment

00:21:57.200 --> 00:22:04.640
and when I'm trying to get it in the section
then it's not available at all.

00:22:04.640 --> 00:22:08.070
&gt;&gt;Ankur: That's interesting.

00:22:08.070 --> 00:22:12.000
So you would typically, I would suggest, oops!

00:22:12.000 --> 00:22:13.400
The lights have gone out.

00:22:13.400 --> 00:22:14.679
That's not so good.

00:22:14.679 --> 00:22:18.470
Hey Anirudh do you just wanna take over for
a second?

00:22:18.470 --> 00:22:19.520
[Laughter]

00:22:19.520 --> 00:22:21.630
&gt;&gt;Anirudh: Yeah.

00:22:21.630 --> 00:22:25.730
So I'm guessing in your adaptor you have coded
to say that get [unintelligible] done based

00:22:25.730 --> 00:22:28.950
on the implex of the pager or a new instance?

00:22:28.950 --> 00:22:30.059
&gt;&gt;Male #1: Yes.

00:22:30.059 --> 00:22:34.150
&gt;&gt;Anirudh: You could possibly manage it as
just new instances and then [unintelligible].

00:22:34.150 --> 00:22:36.100
I mean, I guess that's a part of your adaptor
implementation.

00:22:36.100 --> 00:22:37.910
&gt;&gt;Male #1: Yeah.

00:22:37.910 --> 00:22:39.970
&gt;&gt;Anirudh: So instead of saying

00:22:39.970 --> 00:22:45.380
&gt;&gt;Male #1: What's the solution at this point
in time that I'm maintaining a kind of array

00:22:45.380 --> 00:22:50.850
[unintelligible] which is keeping track of
fragments that have been created and then

00:22:50.850 --> 00:22:56.040
if the fragment is already created after turning
the value as get particle of fragment?

00:22:56.040 --> 00:22:59.160
&gt;&gt;Anirudh: That seems to be a fitting implementation
to me.

00:22:59.160 --> 00:23:02.960
Are you incurring any type of performance
hit there or?

00:23:02.960 --> 00:23:08.170
&gt;&gt;Male #1: Well, my, my point is in case when
I'm trying to access this particle of fragment

00:23:08.170 --> 00:23:14.910
directly from view flipper by saying something
like, let's see here,

00:23:14.910 --> 00:23:23.080
[Pause]
&gt;&gt;Male #1: Alright, if I try to say viewflipper.getcurrentitem

00:23:23.080 --> 00:23:35.780
it's just index and if I say get item at [unintelligible]

00:23:35.780 --> 00:23:43.150
&gt;&gt;Ankur: So what I would actually suggest
is rather than getting it from view pager

00:23:43.150 --> 00:23:45.790
I would actually try to get it from the fragment
manager.

00:23:45.790 --> 00:23:52.550
So when you extentiate it you can specify
a tag and then I would try and do find fragment,

00:23:52.550 --> 00:23:53.920
what is it, find fragment

00:23:53.920 --> 00:23:59.260
&gt;&gt;Male #1: That's not possible with expired
tag for this because at the time of extentiation

00:23:59.260 --> 00:24:05.610
this fragment, I guess at the time, when you
say get item the adaptor itself gives a fragment

00:24:05.610 --> 00:24:07.330
ID to it.

00:24:07.330 --> 00:24:09.040
&gt;&gt;Ankur: I see.

00:24:09.040 --> 00:24:16.770
So, the main use of, is your fragment a UI
fragment or is it just a class that you're

00:24:16.770 --> 00:24:17.770
sort of reusing?

00:24:17.770 --> 00:24:19.070
&gt;&gt;Male #1: UI fragment.

00:24:19.070 --> 00:24:24.600
&gt;&gt;Ankur: So these UI fragments are going to
get recycled so I would suggest--sorry?

00:24:24.600 --> 00:24:26.900
&gt;&gt;Male #1: Yeah.

00:24:26.900 --> 00:24:32.670
&gt;&gt;Ankur: So I would actually suggest if you're
trying to get something very specific then

00:24:32.670 --> 00:24:39.390
your solution kind of, it will work, it seems
like not the right thing to do because the

00:24:39.390 --> 00:24:46.610
whole idea of the view pager is that it will
try and hold onto the page, the contents of

00:24:46.610 --> 00:24:49.690
the pages only while it needs them.

00:24:49.690 --> 00:24:56.210
So, typically what I've noticed is that if
your current page and one on either side it

00:24:56.210 --> 00:25:01.320
tends to keep, so if you've got things that
are more than two of your current page it'll

00:25:01.320 --> 00:25:04.690
actually try to recycle and reuse those fragments.

00:25:04.690 --> 00:25:11.960
And that's probably why your get methods are
calling, I'm sorry, returning a new fragment

00:25:11.960 --> 00:25:14.799
because the existing one has been recycled.

00:25:14.799 --> 00:25:21.380
&gt;&gt;Male #1: But, uh, how can I use the same
instances if I always get a new one?

00:25:21.380 --> 00:25:24.650
So, if I want to modify something on that
part of the fragment?

00:25:24.650 --> 00:25:31.290
&gt;&gt;Ankur: So, this is kind of the difference
between sort of separating out your UI and

00:25:31.290 --> 00:25:32.920
your data layer.

00:25:32.920 --> 00:25:37.630
If you're presenting something, I mean, typically
what you're doing with those adaptors is your

00:25:37.630 --> 00:25:42.700
marking the data as dirty and then you're
just asking the fragment to repopulate and

00:25:42.700 --> 00:25:44.059
redraw itself.

00:25:44.059 --> 00:25:50.590
So, rather than directly sort of modifying
some state on your fragment what I'd be doing

00:25:50.590 --> 00:25:55.250
is changing the data in the background and
letting it flow through the adaptor so when

00:25:55.250 --> 00:25:58.870
it's presenting that particular framework
it's gonna get the fresh data.

00:25:58.870 --> 00:26:04.930
&gt;&gt;Male #1: But, for example, what the issue
will be with this thing is that I have something

00:26:04.930 --> 00:26:11.980
on my foreground as a UI, it won't get refreshed
until my adaptor screen of that particular

00:26:11.980 --> 00:26:13.360
fragment is created again.

00:26:13.360 --> 00:26:18.730
That will again lead me to a different kind
of problem.

00:26:18.730 --> 00:26:22.060
&gt;&gt;Ankur: Are you calling notified data since
it changed?

00:26:22.060 --> 00:26:26.450
&gt;&gt;Male #1: I'm calling it but it does not
refresh it.

00:26:26.450 --> 00:26:28.710
&gt;&gt;Ankur: Interesting.

00:26:28.710 --> 00:26:35.330
[Background chatter]
&gt;&gt;Ankur: Are you using custom views by any

00:26:35.330 --> 00:26:36.670
chance within the fragment?

00:26:36.670 --> 00:26:37.670
&gt;&gt;Male #1: No.

00:26:37.670 --> 00:26:39.970
It's all the normal views.

00:26:39.970 --> 00:26:40.970
[Laughter]

00:26:40.970 --> 00:26:44.420
&gt;&gt;Ankur: Yeah cause what should be happening
if you called notified data had changed it

00:26:44.420 --> 00:26:50.020
should come through and basically, you know,
redraw the views.

00:26:50.020 --> 00:26:58.890
&gt;&gt;Male #1: I placed even some logs in order
to see if I could get the get view quality

00:26:58.890 --> 00:27:03.610
for the adaptor but even that would not help,
get item called again, but even that was not

00:27:03.610 --> 00:27:04.610
happening.

00:27:04.610 --> 00:27:06.510
So I was like, okay, what to do?

00:27:06.510 --> 00:27:13.950
&gt;&gt;Ankur: Yeah, it almost seems like what you're
wanting is a static set of fragments and you're

00:27:13.950 --> 00:27:18.510
using the view pager for that and the view
pager is something that typically tends to

00:27:18.510 --> 00:27:22.540
recycle fragments and discard them when they're
not being used.

00:27:22.540 --> 00:27:27.510
So it's almost like that's not a good fit
and I would, I would try and have a layer

00:27:27.510 --> 00:27:35.440
of abstraction that's says, "Hey, this is
a statically defined allocated set of fragments."

00:27:35.440 --> 00:27:37.070
And then try and link them up.

00:27:37.070 --> 00:27:41.380
So, in a sense what you're doing with your
array list isn't so bad I just hope that the

00:27:41.380 --> 00:27:46.740
glue between the view pager and that list
is correctly managed.

00:27:46.740 --> 00:27:53.430
&gt;&gt;Male #1: I just wanted to ask, maybe it's
a stupid question but what exactly is the

00:27:53.430 --> 00:27:56.630
difference between fragment state pager adaptor
and fragment page adaptor?

00:27:56.630 --> 00:27:59.940
&gt;&gt;Ankur: Fragment, I'm sorry, what was the
first one?

00:27:59.940 --> 00:28:05.960
&gt;&gt;Male #1: Fragment state pager adaptor and
fragment pager adaptor.

00:28:05.960 --> 00:28:08.910
&gt;&gt;Ankur: That's an interesting one.

00:28:08.910 --> 00:28:12.200
Um, I've not used the state pager adaptor
have you, Anirudh?

00:28:12.200 --> 00:28:16.171
&gt;&gt;Anirudh: No, same, I haven't used it but
I know it's one of the options available in

00:28:16.171 --> 00:28:19.100
the view pager library to view all the fragments.

00:28:19.100 --> 00:28:24.460
&gt;&gt;Male #1: helping me in some sense I got
it from a blog that I just ordered because

00:28:24.460 --> 00:28:30.160
the previous one was always ending me with
some different kind of values then what exactly

00:28:30.160 --> 00:28:33.980
I wanted it's giving me that but why it is
giving me it I have no idea.

00:28:33.980 --> 00:28:38.549
I was just curious about it knowing what exactly
is the difference between these two?

00:28:38.549 --> 00:28:42.000
&gt;&gt;Ankur: Yeah, sorry, neither of us know off
the top of our heads.

00:28:42.000 --> 00:28:43.850
We'd need to look into it and get back to
you.

00:28:43.850 --> 00:28:44.850
[Laughs]

00:28:44.850 --> 00:28:47.190
&gt;&gt;Male #1: Maybe you can help me with one
more thing.

00:28:47.190 --> 00:28:53.070
I was just having a question, I hope I'm not
taking too much of yours.

00:28:53.070 --> 00:28:54.070
&gt;&gt;Ankur: That's okay.

00:28:54.070 --> 00:28:57.260
&gt;&gt;Male #1: What is different between view
animator, view flipper and view switcher?

00:28:57.260 --> 00:29:01.590
Because apparently all three of them have
been working like something similar to each

00:29:01.590 --> 00:29:02.590
other.

00:29:02.590 --> 00:29:04.590
So, is there, what would be the difference?

00:29:04.590 --> 00:29:10.980
&gt;&gt;Ankur: So, view flipper, so view animator
does a lot more than just flipping views.

00:29:10.980 --> 00:29:14.559
View flipper is literally, you know, I've
got a list of views and I just wanna say go

00:29:14.559 --> 00:29:17.640
from one to the next to the next in terms
of what I show.

00:29:17.640 --> 00:29:22.780
View animator you can do a whole bunch of
like different types of animation things there.

00:29:22.780 --> 00:29:25.710
View switcher, I don't know off the top of
my head.

00:29:25.710 --> 00:29:35.701
&gt;&gt;Male #1: But, I, for the animation thing
I'm seeing I can't animate in and out of the

00:29:35.701 --> 00:29:41.090
view pager and view switcher or adaptor, so
view flipper and view animator both of them

00:29:41.090 --> 00:29:46.630
I can do in and out animations and they will
be doing almost the same job so I was like

00:29:46.630 --> 00:29:51.100
is there any specific difference as an API
level or something like that?

00:29:51.100 --> 00:29:54.660
&gt;&gt;Ankur: When you say view animator are you
referring to the view property animator that

00:29:54.660 --> 00:29:55.920
we introduced in Honeycomb?

00:29:55.920 --> 00:30:00.600
&gt;&gt;Male #1: View animator is a transition,
transition API that you have.

00:30:00.600 --> 00:30:03.880
One of the transitions API.

00:30:03.880 --> 00:30:06.500
&gt;&gt;Ankur: Um, yeah, sorry.

00:30:06.500 --> 00:30:11.539
I'll need to look this up and get back to
you unless Anirudh knows what I'd suggest

00:30:11.539 --> 00:30:18.100
is after this hangout is complete I'm gonna
send out the event for next week's one, if

00:30:18.100 --> 00:30:21.660
you can just put the question in the moderator
then it gives us a chance to look ahead of

00:30:21.660 --> 00:30:23.830
time and I'll have something ready for you.

00:30:23.830 --> 00:30:24.940
&gt;&gt;Male #1: Gotcha.

00:30:24.940 --> 00:30:29.289
&gt;&gt;Anirudh: One of the things is that View
Switcher can have just two views, two views

00:30:29.289 --> 00:30:35.030
and I think flipper can have more than two
so that's one difference between view switcher

00:30:35.030 --> 00:30:36.080
and flipper.

00:30:36.080 --> 00:30:38.650
&gt;&gt;Male #1: Is that so?

00:30:38.650 --> 00:30:41.380
&gt;&gt;Anirudh: Yeah, I think view switcher can
have just two views which I think you can

00:30:41.380 --> 00:30:48.700
switch between and flipper can have more than
two.

00:30:48.700 --> 00:30:49.700
[Unintelligible]

00:30:49.700 --> 00:30:51.030
&gt;&gt;Male #1: Okay.

00:30:51.030 --> 00:30:52.030
Alright.

00:30:52.030 --> 00:30:56.900
So, view animator, view flipper via a little--
[Dog barks]

00:30:56.900 --> 00:30:57.910
&gt;&gt;Andrew: Shh!

00:30:57.910 --> 00:31:03.049
&gt;Male #1:--but view flipper can have only
two views that's what you are saying, right?

00:31:03.049 --> 00:31:06.440
&gt;&gt;Anirudh: View flipper has two views and
you can switch between those two.

00:31:06.440 --> 00:31:08.160
&gt;&gt;Male #1: Got it.

00:31:08.160 --> 00:31:09.160
Thank you.

00:31:09.160 --> 00:31:12.580
&gt;&gt;Ankur: Andrew, either you're hungry or you
have a dog.

00:31:12.580 --> 00:31:15.620
&gt;&gt;Andrew: Yes, I have a dog, sorry.

00:31:15.620 --> 00:31:16.620
[Laughter]

00:31:16.620 --> 00:31:18.610
&gt;&gt;Ankur: That's alright.

00:31:18.610 --> 00:31:22.820
Um, okay, uh, next question.

00:31:22.820 --> 00:31:28.539
We have, I think Fung Lam has added a few
and they've sort of been out voted so I'll

00:31:28.539 --> 00:31:33.900
just go back up a little bit, "It takes longer
and longer time after we load an APK for the

00:31:33.900 --> 00:31:39.370
update and before it is available for download,
why is it?"

00:31:39.370 --> 00:31:43.970
Um, there's too many apps queuing the new
approach for APK update.

00:31:43.970 --> 00:31:45.440
The answer is I don't know.

00:31:45.440 --> 00:31:48.570
I didn't, we didn't realize that this was
an issue.

00:31:48.570 --> 00:31:55.140
Fung, if you are online it'd be great for
you to just let us know what kind of times

00:31:55.140 --> 00:31:56.140
are you seeing?

00:31:56.140 --> 00:32:00.470
Are we talking from like 2 minutes to 4 minutes
or are talking from 2 minutes to like 4 hours?

00:32:00.470 --> 00:32:05.300
&gt;&gt;Andrew: I've seen something similar as well
over the past couple of months.

00:32:05.300 --> 00:32:11.070
It used to take about 15 minutes from hitting
the publish button on the developer console

00:32:11.070 --> 00:32:16.730
before you would see your app appear in the
placed on device and maybe another half hour

00:32:16.730 --> 00:32:18.419
after that before it appeared on the web.

00:32:18.419 --> 00:32:23.559
Whereas now it's taking about an hour from
hitting the publish button to appearing on

00:32:23.559 --> 00:32:27.470
the placed on device and maybe an hour and
a half or so before it appears on the web.

00:32:27.470 --> 00:32:34.230
So, yeah, it does seem to be longer these
days then maybe 6 months ago.

00:32:34.230 --> 00:32:39.440
&gt;&gt;Ankur: Okay, let me raise that with the
team.

00:32:39.440 --> 00:32:42.211
I don't know if anyone has raised it before.

00:32:42.211 --> 00:32:43.700
I wasn't aware of that so--

00:32:43.700 --> 00:32:47.270
&gt;&gt;Andrew: It isn't really a problem it's just,
you know, maybe it's just due to the number

00:32:47.270 --> 00:32:50.860
of apps or something that are out there these
days or the number that are being submitted.

00:32:50.860 --> 00:32:53.850
&gt;&gt;Ankur: Yeah I don't want to speculate.

00:32:53.850 --> 00:32:59.100
It could be that, it could be that we have
the security mechanism bouncer that could

00:32:59.100 --> 00:33:01.630
be more thorough now which takes longer.

00:33:01.630 --> 00:33:08.669
I honestly don't know and I'll need to find
out but thanks for raising that with us.

00:33:08.669 --> 00:33:18.240
Going back to the questions we, we have one
from Soham Mondal from Bangalore.

00:33:18.240 --> 00:33:24.010
"Typically my service stops working after
awhile after my app goes into the background

00:33:24.010 --> 00:33:28.929
and I need to acquire a wake lock or use start
foreground.

00:33:28.929 --> 00:33:34.799
What is the difference between using start
foreground on a service or acquire a wake

00:33:34.799 --> 00:33:38.250
lock on a service?

00:33:38.250 --> 00:33:39.830
Anirudh do you wanna start with this one?

00:33:39.830 --> 00:33:43.450
&gt;&gt;Anirudh: Honestly, I don't know the answer
to this.

00:33:43.450 --> 00:33:44.450
[Laughter]

00:33:44.450 --> 00:33:45.450
&gt;&gt;Ankur: That's alright.

00:33:45.450 --> 00:33:52.230
So I think, let's see, it'll be interesting
to see why it is your service is being stopped.

00:33:52.230 --> 00:33:59.070
If you start your service in a certain way
it kind of says hey it's bound to this activity

00:33:59.070 --> 00:34:04.390
or bound to this, to this particular foreground
process and so when that foreground process

00:34:04.390 --> 00:34:06.720
goes away your service will also stop.

00:34:06.720 --> 00:34:13.200
So it depends how you are binding to the service
and how you're starting it.

00:34:13.200 --> 00:34:17.399
Acquiring a wake lock on a service, all that,
my understanding of that, all that will do

00:34:17.399 --> 00:34:21.980
is stop the device from going into standby.

00:34:21.980 --> 00:34:26.960
I don't think that there's a direct correlation
between having a wake lock and having your

00:34:26.960 --> 00:34:34.819
service stay running unless you're acquiring
the wake lock in your activity in which case

00:34:34.819 --> 00:34:37.929
it's not getting a chance to background.

00:34:37.929 --> 00:34:43.919
So it really depends how you're binding to
the service and if you are, if you're allowing

00:34:43.919 --> 00:34:50.429
it to sort of hang around after the, your
main activity's gone away or not.

00:34:50.429 --> 00:34:54.349
So, I would look into that.

00:34:54.349 --> 00:35:00.519
One way to look into this is just by putting
in a bunch of logging statements in there.

00:35:00.519 --> 00:35:06.529
See if there's a correlation between when
your activity is paused or stopped or destroyed

00:35:06.529 --> 00:35:10.640
and when the service is going away.

00:35:10.640 --> 00:35:13.420
Okay, final question.

00:35:13.420 --> 00:35:17.880
I'll just read this one out.

00:35:17.880 --> 00:35:19.560
Oh no, we've already done this one.

00:35:19.560 --> 00:35:24.089
It's the one about native development languages.

00:35:24.089 --> 00:35:27.190
I don't see any more questions on there.

00:35:27.190 --> 00:35:29.780
Does anyone on the hangout have any more questions?

00:35:29.780 --> 00:35:37.460
&gt;&gt;Andrew: I just have one that's maybe not
related to Android specifically but you mentioned

00:35:37.460 --> 00:35:44.009
earlier about the Google Plus SDK will be
coming out at some point in the future, for

00:35:44.009 --> 00:35:45.009
Android.

00:35:45.009 --> 00:35:49.650
There's already a kind of Google Plus API
which is hosted on Google Code I think.

00:35:49.650 --> 00:35:53.131
Is that just gonna be replaced or is that
gonna be kind of in parallel or will there

00:35:53.131 --> 00:35:54.329
be some crossover?

00:35:54.329 --> 00:35:57.859
&gt;&gt;Ankur: Are you referring to the web API
that's there?

00:35:57.859 --> 00:36:01.329
&gt;&gt;Andrew: Yeah, there seems to be a lot of
rest services that you can call to get things

00:36:01.329 --> 00:36:03.519
like comments on various posts and stuff.

00:36:03.519 --> 00:36:04.640
Is that gonna go away?

00:36:04.640 --> 00:36:09.470
&gt;&gt;Ankur: So that web API will stay because
what we're bringing out is an Android API.

00:36:09.470 --> 00:36:13.779
Right now you can consume, you know, basically
consume it like it's a rest service.

00:36:13.779 --> 00:36:14.779
&gt;&gt;Andrew: Yeah.

00:36:14.779 --> 00:36:19.480
&gt;&gt;Ankur: But what we're doing is building
an Android API which will give you all the

00:36:19.480 --> 00:36:28.599
niceties of, you know, having like a method
call using the identity manager on the phone

00:36:28.599 --> 00:36:29.599
or tablet.

00:36:29.599 --> 00:36:32.960
So, yeah, there's nothing stopping you from
using that rest API.

00:36:32.960 --> 00:36:40.109
It's probably gonna be a bigger overhead using
that than using the native SDK when it's available.

00:36:40.109 --> 00:36:41.720
&gt;&gt;Andrew: Yeah, cool.

00:36:41.720 --> 00:36:48.109
&gt;&gt;Ankur: Alright, now, before we wrap up today,
actually, we've got something a little bit

00:36:48.109 --> 00:36:49.109
different.

00:36:49.109 --> 00:36:53.530
We tried to do this last week and we failed
miserably.

00:36:53.530 --> 00:37:00.549
We basically had an interview that we've done
with a developer called Animoca.

00:37:00.549 --> 00:37:09.180
Now I'm unfortunately gonna have to try something
that's less than optimum to play this and

00:37:09.180 --> 00:37:17.099
to do that I'm basically going to share the
YouTube video, do a screen share.

00:37:17.099 --> 00:37:21.130
So what I'd request is that people that are
on the hangout, if you could please mute your

00:37:21.130 --> 00:37:26.729
microphone because I'm having to use the speaker
in the mic, super low tech today, to play

00:37:26.729 --> 00:37:28.609
this video.

00:37:28.609 --> 00:37:33.140
Once this hangout is finished we will, it
will be available as a standard line YouTube

00:37:33.140 --> 00:37:36.440
video as well for you guys to watch.

00:37:36.440 --> 00:38:07.079
So I'll just start the video and let it run
it's thing.

00:38:07.079 --> 00:38:08.079
[Pause]

00:38:08.079 --> 00:38:12.170
&gt;&gt;Male #1 in video: Hi everyone.

00:38:12.170 --> 00:38:17.249
I'm really excited to be here [inaudible].

00:38:17.249 --> 00:38:24.509
This is our first interview in Hong Kong in
APAC.

00:38:24.509 --> 00:38:31.049
Sitting on my lap is [Inaudible] our mascot
[inaudible].

00:38:31.049 --> 00:38:35.510
To my right is [inaudible all names of team].

00:38:35.510 --> 00:38:37.700
Guys, please introduce yourselves.

00:38:37.700 --> 00:38:44.700
&gt;&gt;Male #2 in video: My name is [inaudible];
I'm the CEO of Animoca.

00:38:44.700 --> 00:38:48.369
[Inaudible] publishes Android [inaudible].

00:38:48.369 --> 00:38:53.880
&gt;&gt;Male #3 in video: I'm [inaudible]

00:38:53.880 --> 00:39:00.920
&gt;&gt;Ankur: That's embarrassing, hit by buffering,
I had pre buffered this video or so I thought.

00:39:00.920 --> 00:39:04.569
Let me just try it once more.

00:39:04.569 --> 00:39:12.969
&gt;&gt;Male #3 in video: [Inaudible]

00:39:12.969 --> 00:39:36.890
&gt;&gt;Male #1 in video: I see that a lot of your
guys' apps are free so what is your business

00:39:36.890 --> 00:39:37.890
quality?

00:39:37.890 --> 00:39:54.359
&gt;&gt;Male #2 in video: So, our apps are [inaudible]
so they're free to download and users do not

00:39:54.359 --> 00:40:03.960
get paid and the organization is [inaudible].

00:40:03.960 --> 00:40:12.780
We may have some advertising of [inaudible].

00:40:12.780 --> 00:40:32.130
We have a few [inaudible] items also where
you go [inaudible] an experiment with all

00:40:32.130 --> 00:40:33.130
possibilities.

00:40:33.130 --> 00:40:35.890
&gt;&gt;Male #1: [Inaudible]
[Cannot understand]

00:40:35.890 --> 00:40:46.369
&gt;&gt;Male #4 in video: The characters will actually
move by themselves.

00:40:46.369 --> 00:41:07.190
This is actually a great aide for the teams
cause they don't have to manually drag things

00:41:07.190 --> 00:41:15.220
everywhere and you can adjust the speed and
skip levels and stuff like that.

00:41:15.220 --> 00:41:19.709
However, this is not a replacement for action
[inaudible].

00:41:19.709 --> 00:41:28.700
&gt;&gt;Ankur: Alright, So that was, firstly we'd
like just to thank Animoca for helping us

00:41:28.700 --> 00:41:32.709
there and being part of that.

00:41:32.709 --> 00:41:38.059
We hope that that was some useful advice.

00:41:38.059 --> 00:41:57.859
You can see that Animoca's a developer that
headers for a wide variety of Android devices

00:41:57.859 --> 00:42:15.470
many of which you wouldn't of even heard of
that we got to see some of them.

00:42:15.470 --> 00:42:37.470
They were kind of sharing their tips for success.

00:42:37.470 --> 00:42:48.180
So 
if there's anyone on here on the hangout right

00:42:48.180 --> 00:42:58.750
now that has questions around the interview
or anything else that we haven't addressed

00:42:58.750 --> 00:43:03.130
today, now is your chance.

00:43:03.130 --> 00:43:15.969
If you are watching this as a recorded segment
you can feel free to send us some questions

00:43:15.969 --> 00:43:24.829
via the Google moderator link for next week's
show as well.

00:43:24.829 --> 00:43:42.809
So we have Andrew and Thompson on the line,
do you guys have any follow up questions?

00:43:42.809 --> 00:43:43.809
No?

00:43:43.809 --> 00:43:59.400
Alright, I think before we go though, Anirudh
wanted to make an announcement.

00:43:59.400 --> 00:44:34.069
&gt;&gt;Anirudh: Yeah, hi, this is for [inaudible]
we are hosting a code labs on the 3rd of August

00:44:34.069 --> 00:44:54.309
and this is on SDK and tools in SDK for performance
analysis and reanalysis so the registrations

00:44:54.309 --> 00:45:22.509
are open for the event and we have a link
shared, Ankur if you could bring that up on

00:45:22.509 --> 00:45:24.089
the screen.

00:45:24.089 --> 00:45:25.609
[Laughter]

00:45:25.609 --> 00:45:31.920
&gt;&gt;Ankur: I actually can't.

00:45:31.920 --> 00:46:13.959
If you can just pop it in the chat for 

00:46:13.959 --> 00:46:45.609
this hangout then I can bring it up right
now.

00:46:45.609 --> 00:46:48.329
&gt;&gt;Anirudh: Alright.

00:46:48.329 --> 00:46:52.390
I can do that.

00:46:52.390 --> 00:46:55.089
&gt;&gt;Ankur: Yeah.

00:46:55.089 --> 00:46:56.440
Thanks.

00:46:56.440 --> 00:47:46.339
&gt;&gt;Anirudh: So, anyway, we will drop the link
in the post on G Plus and you can register

00:47:46.339 --> 00:48:03.920
and join us for the code lapse then.

00:48:03.920 --> 00:48:40.209
&gt;&gt;Ankur: Alright, so Anirudh can you just
let us know, you said in India but I'm sorry,

00:48:40.209 --> 00:48:42.109
was it one event?

00:48:42.109 --> 00:48:43.380
Multiple events?

00:48:43.380 --> 00:48:45.279
How many cities?

00:48:45.279 --> 00:48:59.619
&gt;&gt;Anirudh: This is one event in New Dehli
in the office in Gurgaon, the Google office;

00:48:59.619 --> 00:49:07.369
we'll be hosting it there.

00:49:07.369 --> 00:49:47.829
This is one event for now and we are looking
at other events in other cities but we don't

00:49:47.829 --> 00:49:49.920
have any plans right now.

00:49:49.920 --> 00:49:51.170
&gt;&gt;Ankur: Okay, fantastic.

00:49:51.170 --> 00:50:50.239
And we will make that, the, uh, the link,
we will post it on Android developers, the

00:50:50.239 --> 00:54:37.859
Google Plus page.

00:54:37.859 --> 00:54:45.910
We'll also post a link to that video and allow
you guys to submit any questions so we can

00:54:45.910 --> 00:54:46.930
address them.

00:54:46.930 --> 00:54:52.410
Anyways, thanks for watching, thanks for joining
those of you that were able to join us on

00:54:52.410 --> 00:54:56.319
the hangout and we will see you next week.

00:54:56.319 --> 00:54:58.650
&gt;&gt;Andrew: Cheers, guys!

00:54:58.650 --> 00:55:00.200
&gt;&gt;Anirudh: Bye!

