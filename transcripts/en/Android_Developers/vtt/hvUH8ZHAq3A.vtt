WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.100
DAN GALPIN: We've now
reached the second release

00:00:02.100 --> 00:00:04.080
of the Android Q beta program.

00:00:04.080 --> 00:00:07.570
Q has enhancements to privacy
and security, and, of course,

00:00:07.570 --> 00:00:10.120
there's a lot of great
stuff for developers.

00:00:10.120 --> 00:00:13.470
Let's start with how Q builds on
top of Android's strong privacy

00:00:13.470 --> 00:00:14.750
protections.

00:00:14.750 --> 00:00:17.550
Android Q enhances runtime
permission requests

00:00:17.550 --> 00:00:21.570
to give users more control over
when apps can get location.

00:00:21.570 --> 00:00:24.240
When Android Q prompts users
to give the app the location

00:00:24.240 --> 00:00:27.450
permission, it now enables users
to allow the permission only

00:00:27.450 --> 00:00:29.610
while the app is in
use in the foreground,

00:00:29.610 --> 00:00:32.460
allow the permission always,
or to deny the permission.

00:00:32.460 --> 00:00:34.440
Check out the developer
guide for details

00:00:34.440 --> 00:00:37.170
on how to adapt your app for
this new permission model.

00:00:37.170 --> 00:00:39.960
Android Q continues the
work in previous releases

00:00:39.960 --> 00:00:42.270
to limit access to
non-resettable device

00:00:42.270 --> 00:00:46.230
identifiers including device
IMEI and serial number.

00:00:46.230 --> 00:00:47.880
The Mac address to
the device is now

00:00:47.880 --> 00:00:49.920
randomized by default
when connected

00:00:49.920 --> 00:00:52.640
to different Wi-Fi networks.

00:00:52.640 --> 00:00:54.650
Most of our APIs for
scanning networks

00:00:54.650 --> 00:00:57.140
already require the course
location permission,

00:00:57.140 --> 00:01:00.350
but in Android Q for
Bluetooth, cellular, and Wi-Fi,

00:01:00.350 --> 00:01:02.510
we're increasing the
protection around those APIs

00:01:02.510 --> 00:01:06.190
by requiring the fine
location permission instead.

00:01:06.190 --> 00:01:09.210
Finally, Android Q continues
the process of limiting access

00:01:09.210 --> 00:01:11.910
to non-SDK internal interfaces.

00:01:11.910 --> 00:01:14.430
You can turn on and off
this for testing purposes

00:01:14.430 --> 00:01:18.920
and tell Android to enable
access but print log messages.

00:01:18.920 --> 00:01:22.070
Android Q adds new support
for foldable devices,

00:01:22.070 --> 00:01:24.890
allowing multiple apps to
be in this resumed state

00:01:24.890 --> 00:01:26.510
at the same time.

00:01:26.510 --> 00:01:29.000
Most apps won't have
to address this change,

00:01:29.000 --> 00:01:31.110
but we've added a
top resumed activity

00:01:31.110 --> 00:01:33.350
callback that should be
used to open and close

00:01:33.350 --> 00:01:36.290
exclusive devices
such as the camera.

00:01:36.290 --> 00:01:39.440
We've also changed how the
re-sizable activity manifest

00:01:39.440 --> 00:01:40.730
attribute works.

00:01:40.730 --> 00:01:44.480
In Q, if an app sets re-sizable
activity equals false along

00:01:44.480 --> 00:01:46.940
with a fixed orientation
or aspect ratio,

00:01:46.940 --> 00:01:48.620
display changes
will cause the app

00:01:48.620 --> 00:01:53.060
to be letterboxed and resized
to maintain the aspect ratio.

00:01:53.060 --> 00:01:56.120
You can use the canary
release of Android Studio 3.5

00:01:56.120 --> 00:01:59.990
to create a foldable virtual
device with a beta 2 image.

00:01:59.990 --> 00:02:02.090
The emulator gives
you onscreen controls

00:02:02.090 --> 00:02:06.890
to trigger fold, unfold, change
orientation, and quick actions.

00:02:06.890 --> 00:02:09.320
Also an Android Q,
apps can request

00:02:09.320 --> 00:02:11.240
a dynamic in depth image.

00:02:11.240 --> 00:02:13.670
Supported device cells
will return a JPEG

00:02:13.670 --> 00:02:15.830
with embedded XMP
metadata related

00:02:15.830 --> 00:02:19.520
to depth-related elements and
a depth in competence map.

00:02:19.520 --> 00:02:22.520
The existing direct share
feature gives users the power

00:02:22.520 --> 00:02:26.090
to share content to a specific
contact with another app,

00:02:26.090 --> 00:02:27.860
but the implementation
adds latency

00:02:27.860 --> 00:02:29.690
when displaying the share UI.

00:02:29.690 --> 00:02:32.480
In Android Q, developers
can publish share targets

00:02:32.480 --> 00:02:36.680
in advance, allowing the share
UI to load much more quickly.

00:02:36.680 --> 00:02:39.150
These works similarly
to app shortcuts,

00:02:39.150 --> 00:02:40.970
so we've expanded
their shortcut info

00:02:40.970 --> 00:02:43.970
API to make integrating
both features easier

00:02:43.970 --> 00:02:46.430
and added the share
target AndroidX library

00:02:46.430 --> 00:02:48.950
to allow apps to leverage
the new functionality

00:02:48.950 --> 00:02:53.020
while still supporting pre-Q
devices using direct share.

00:02:53.020 --> 00:02:56.620
Android Q ads platform support
for notification bubbles,

00:02:56.620 --> 00:02:59.920
circular icons that
represent app content.

00:02:59.920 --> 00:03:02.200
Various apps have used
system alert windows

00:03:02.200 --> 00:03:04.270
to build similar
interactions, and we're

00:03:04.270 --> 00:03:07.090
excited to standardize on a
straightforward implementation

00:03:07.090 --> 00:03:10.030
for developers that provides
consistent interactions

00:03:10.030 --> 00:03:11.870
for users.

00:03:11.870 --> 00:03:14.810
Bubbles are built on top of
Android's notification system

00:03:14.810 --> 00:03:17.990
to provide a familiar and easy
to use APIs for developers

00:03:17.990 --> 00:03:21.020
with a bubble being a
type of notification.

00:03:21.020 --> 00:03:23.000
To bubble a
notification, you need

00:03:23.000 --> 00:03:25.430
to make sure the notification
channel allows bubble

00:03:25.430 --> 00:03:29.000
notifications and then call
set bubble metadata to add

00:03:29.000 --> 00:03:30.470
bubble metadata.

00:03:30.470 --> 00:03:33.050
Within the metadata, you
provide the bubble icon

00:03:33.050 --> 00:03:37.190
along with the activity to
display as bubble content.

00:03:37.190 --> 00:03:39.770
In Q, you can use the
settings panel API

00:03:39.770 --> 00:03:42.650
to show key system settings
as a floating panel

00:03:42.650 --> 00:03:44.510
in the context of your app.

00:03:44.510 --> 00:03:46.550
A browser could use
this API to display

00:03:46.550 --> 00:03:49.850
connectivity settings such
as airplane mode, Wi-Fi,

00:03:49.850 --> 00:03:51.240
and mobile data.

00:03:51.240 --> 00:03:52.910
Users can then
manage these settings

00:03:52.910 --> 00:03:55.280
without leaving the app.

00:03:55.280 --> 00:03:58.490
We've done a bunch in Android Q
to allow for higher performance

00:03:58.490 --> 00:03:59.270
apps.

00:03:59.270 --> 00:04:01.970
For example, apps can
create a Wi-Fi lock

00:04:01.970 --> 00:04:06.230
to ask the platform to optimize
Wi-Fi around low latency.

00:04:06.230 --> 00:04:09.320
Android Q also adds support
for the high performance Vulkan

00:04:09.320 --> 00:04:13.460
1.1 graphics API and
makes 1.1 a requirement

00:04:13.460 --> 00:04:17.470
for all 64-bit devices
running Q and higher.

00:04:17.470 --> 00:04:21.070
Android Q contains a preview
of a standard updatable OpenGL

00:04:21.070 --> 00:04:24.760
driver for all devices built
on Vulkan called Angle.

00:04:24.760 --> 00:04:26.620
You can enable
Angle for all apps

00:04:26.620 --> 00:04:29.980
or for individual apps
in developer options.

00:04:29.980 --> 00:04:33.790
The neural networks API has
been updated to version 1.2,

00:04:33.790 --> 00:04:36.650
adding 60 new opps
including arg max,

00:04:36.650 --> 00:04:41.320
arg min, quantized LSTM, laying
the foundation for accelerating

00:04:41.320 --> 00:04:43.480
a wider range of
models such as those

00:04:43.480 --> 00:04:46.930
for object detection
and image segmentation.

00:04:46.930 --> 00:04:50.170
Android Q now allows apps to
pull the current thermal status

00:04:50.170 --> 00:04:52.660
of the device and
register for a callback

00:04:52.660 --> 00:04:54.670
when the thermal status changes.

00:04:54.670 --> 00:04:57.190
This can help real-time
applications such as games,

00:04:57.190 --> 00:04:58.810
reduce their
workload in response

00:04:58.810 --> 00:05:01.150
to an overheating device.

00:05:01.150 --> 00:05:04.690
We've also added a native
MIDI API in the NDK.

00:05:04.690 --> 00:05:07.120
This API allows MIDI
data to be retrieved

00:05:07.120 --> 00:05:10.990
inside an audio callback using
a non-blocking thread, enabling

00:05:10.990 --> 00:05:14.320
low latency processing
of MIDI messages.

00:05:14.320 --> 00:05:17.530
Google Play is now delivering
cloud-based profiles along

00:05:17.530 --> 00:05:18.880
with APKs.

00:05:18.880 --> 00:05:21.250
These are anonymized
aggregate art profiles

00:05:21.250 --> 00:05:23.140
that let art pre-compile
parts of your app

00:05:23.140 --> 00:05:26.020
even before it's run, giving
a significant jumpstart

00:05:26.020 --> 00:05:28.660
to the overall
optimization process.

00:05:28.660 --> 00:05:30.670
Cloud-based profiles
benefit all apps,

00:05:30.670 --> 00:05:33.190
and they're already available
to devices running Android P

00:05:33.190 --> 00:05:34.210
and higher.

00:05:34.210 --> 00:05:36.880
And there's so much more like
support for the AV1 video

00:05:36.880 --> 00:05:40.270
codec, improvements for
managing IoT devices over Wi-Fi,

00:05:40.270 --> 00:05:44.455
passive support for biometric
prompt, and TLS 1.3.

00:05:44.455 --> 00:05:47.320
For information on how to
install the Android Q beta,

00:05:47.320 --> 00:05:49.450
check out the links
in the description.

00:05:49.450 --> 00:05:52.560
Enjoy Android Q. Learn about
the new features and APIs

00:05:52.560 --> 00:05:54.220
you can using your apps.

00:05:54.220 --> 00:05:56.470
Please leave us
feedback on the beta.

00:05:56.470 --> 00:05:58.510
On the Android Q
beta developer site,

00:05:58.510 --> 00:06:00.550
you'll find release notes
and support resources

00:06:00.550 --> 00:06:02.700
for reporting issues.

