WEBVTT
Kind: captions
Language: en

00:00:00.650 --> 00:00:04.620
Let's say I have an n-by-n
matrix that looks like this.

00:00:04.620 --> 00:00:07.870
So let me just see if I can
do it in general terms.

00:00:07.870 --> 00:00:11.010
In the first row and first
column, that entry has a 1,

00:00:11.010 --> 00:00:14.630
and then everything else, the
rest of the n minus 1 rows in

00:00:14.630 --> 00:00:16.465
that first column are all
going to be zeroes.

00:00:16.465 --> 00:00:20.990
So it's going to be zeroes all
the way down to the nth term.

00:00:20.990 --> 00:00:24.630
And then the second column,
we have a 0 in the first

00:00:24.630 --> 00:00:29.060
component, but then a 1 in
the second component.

00:00:29.060 --> 00:00:31.440
And then it goes zeroes
all the way down.

00:00:31.440 --> 00:00:34.460
And you keep doing this.

00:00:34.460 --> 00:00:36.635
In the third row, or let me say
third column, although it

00:00:36.635 --> 00:00:39.060
would've applied to the third
row as well, the 1 shows up in

00:00:39.060 --> 00:00:42.950
the third component, and then
it's zeroes all the way down.

00:00:42.950 --> 00:00:46.100
Essentially, you have the ones
filling up the diagonal of

00:00:46.100 --> 00:00:47.210
this matrix right here.

00:00:47.210 --> 00:00:50.860
So if you go all the way to
the nth column or the nth

00:00:50.860 --> 00:00:53.680
column vector, you have a bunch
of zeroes until you

00:00:53.680 --> 00:00:56.330
get-- you have n minus 1 zeroes,
and then the very last

00:00:56.330 --> 00:00:58.300
component, the nth component
there will be a 1.

00:00:58.300 --> 00:01:01.640
So you have essentially,
a matrix with

00:01:01.640 --> 00:01:03.580
ones down the diagonal.

00:01:03.580 --> 00:01:05.610
Now, this matrix has a bunch of
neat properties and we'll

00:01:05.610 --> 00:01:07.070
explore it more in the future.

00:01:07.070 --> 00:01:10.180
But I'm just exposing you to
this because it has one very

00:01:10.180 --> 00:01:13.410
neat property relative to
linear transformations.

00:01:13.410 --> 00:01:15.950
But I'm going to call this the
identity matrix and I'll call

00:01:15.950 --> 00:01:19.550
this I sub n, and I called that
sub n because it's an

00:01:19.550 --> 00:01:21.690
n-by-n identity matrix.

00:01:21.690 --> 00:01:26.690
I sub 2 would be equal to a
2-by-2 identity matrix, so it

00:01:26.690 --> 00:01:28.700
would look like that.

00:01:28.700 --> 00:01:36.340
And I sub 3 would look like
this: 1 0 0, 0 1 0, 0 0 1.

00:01:36.340 --> 00:01:37.690
I think you get the point.

00:01:37.690 --> 00:01:40.390
Now, the neat thing about this
identity matrix becomes

00:01:40.390 --> 00:01:44.650
evident when you multiply
it times any vector.

00:01:44.650 --> 00:01:48.660
We can multiply this guy times
the n-component vector, a

00:01:48.660 --> 00:01:49.910
member of Rn.

00:01:49.910 --> 00:01:51.430
So let's do that.

00:01:51.430 --> 00:01:55.720
So if we multiply this
matrix times-- let's

00:01:55.720 --> 00:01:56.840
call this vector x.

00:01:56.840 --> 00:02:02.460
This is x1, x2, all the way down
to xn, what is this going

00:02:02.460 --> 00:02:04.290
to be equal to?

00:02:04.290 --> 00:02:06.130
So this is vector
x right here.

00:02:06.130 --> 00:02:12.430
So if I multiply matrix I, my
identity matrix, I sub n, and

00:02:12.430 --> 00:02:17.410
I multiply it times my vector x,
where x is a member of Rn,

00:02:17.410 --> 00:02:20.840
has n components, what
am I going to get?

00:02:20.840 --> 00:02:25.035
Well, I'm going to get 1 times
x1 plus 0 times x2 plus 0

00:02:25.035 --> 00:02:26.940
times x3 plus 0 times
x4, all of that.

00:02:26.940 --> 00:02:28.730
So essentially, I'm going to
have-- you can kind of view it

00:02:28.730 --> 00:02:31.340
as this row dotted
with the vector.

00:02:31.340 --> 00:02:32.980
So the only nonzero term
is going to be

00:02:32.980 --> 00:02:34.200
the 1 times the x1.

00:02:34.200 --> 00:02:38.330
So it's going to be x1-- sorry,
let me do it like this.

00:02:38.330 --> 00:02:45.190
So you're going to get another
vector in Rn like that.

00:02:45.190 --> 00:02:48.350
And so the first term is that
row essentially being dotted

00:02:48.350 --> 00:02:51.440
with that column, and
so you just get x1.

00:02:51.440 --> 00:02:57.130
And then the next entry is going
to be this row, or you

00:02:57.130 --> 00:02:59.620
could view it as the transpose
of this row dotted with that

00:02:59.620 --> 00:03:04.090
column, so 0 times x1 plus
1 times x2 plus 0 times

00:03:04.090 --> 00:03:04.710
everything else.

00:03:04.710 --> 00:03:07.380
So the only nonzero term
is the 1 times x2, so

00:03:07.380 --> 00:03:08.680
you get an x2 there.

00:03:08.680 --> 00:03:10.660
And then you keep doing thatt,
and what are you going to get?

00:03:10.660 --> 00:03:13.470
You're going to get an x3
because the only nonzero term

00:03:13.470 --> 00:03:15.070
here is the third one and you're
going to go all the way

00:03:15.070 --> 00:03:17.370
down until you get an xn.

00:03:17.370 --> 00:03:18.520
But what is this
thing equal to?

00:03:18.520 --> 00:03:20.690
This is just equal to x.

00:03:20.690 --> 00:03:24.050
So the neat thing about this
identity matrix that we've

00:03:24.050 --> 00:03:26.780
created is that when you
multiply it times any vector,

00:03:26.780 --> 00:03:27.850
you got the vector again.

00:03:27.850 --> 00:03:31.910
The identity matrix times any
vector in Rn-- it's only

00:03:31.910 --> 00:03:37.130
defined for vectors in Rn-- is
equal to that vector again.

00:03:37.130 --> 00:03:42.810
And actually, the columns of
the identity matrix have a

00:03:42.810 --> 00:03:49.240
special-- I guess the set of
columns has a special name.

00:03:49.240 --> 00:03:55.610
So if we call this first column
e1 and this second

00:03:55.610 --> 00:04:05.050
column e2 and the third column
e3 and we go all the way to

00:04:05.050 --> 00:04:08.670
en, these vectors, these column
vectors here, the set

00:04:08.670 --> 00:04:15.410
of these-- so let's say e1, e2,
all the way to en-- this

00:04:15.410 --> 00:04:24.390
is called the standard
basis for Rn.

00:04:24.390 --> 00:04:25.410
So why is it called that?

00:04:25.410 --> 00:04:29.000
Well, the word basis is there,
so two things must be true.

00:04:29.000 --> 00:04:32.120
These things must span Rn and
they must be linearly

00:04:32.120 --> 00:04:32.940
independent.

00:04:32.940 --> 00:04:35.060
It's pretty obvious from
inspection they're linearly

00:04:35.060 --> 00:04:35.530
independent.

00:04:35.530 --> 00:04:38.340
If this guy has a 1 here and
no one else has a 1 there,

00:04:38.340 --> 00:04:40.400
there's no way you can construct
that 1 with some

00:04:40.400 --> 00:04:41.600
combination of the
rest of the guys.

00:04:41.600 --> 00:04:44.060
And you can make that same
argument for each of the ones

00:04:44.060 --> 00:04:44.805
in each of the components.

00:04:44.805 --> 00:04:47.220
So it's clearly linearly
independent.

00:04:47.220 --> 00:04:50.620
And then to see that you can
span, that you can construct

00:04:50.620 --> 00:04:55.420
any vector with a linear
combination of these guys, you

00:04:55.420 --> 00:04:57.650
just really have to-- you know,
whatever vector you want

00:04:57.650 --> 00:05:00.900
to construct, if you want
to construct x1-- let

00:05:00.900 --> 00:05:01.460
me put it this way.

00:05:01.460 --> 00:05:04.380
If you want to construct
this vector-- let me

00:05:04.380 --> 00:05:04.980
write it this way.

00:05:04.980 --> 00:05:06.480
Let me pick a different one.

00:05:06.480 --> 00:05:11.560
Let's say you want to construct
the vector a1, a2,

00:05:11.560 --> 00:05:13.880
a3 all the way down to an.

00:05:13.880 --> 00:05:15.610
So this is some member
of Rn, you want to

00:05:15.610 --> 00:05:17.060
construct this vector.

00:05:17.060 --> 00:05:20.060
Well, the linear combination
that would get you this is

00:05:20.060 --> 00:05:28.370
literally a1 times e1 plus a2
times e2 plus all the way to

00:05:28.370 --> 00:05:29.620
an times en.

00:05:32.240 --> 00:05:37.140
This scalar times this first
column vector will essentially

00:05:37.140 --> 00:05:39.200
just get you-- what will
this look like?

00:05:39.200 --> 00:05:41.510
This will look like
a1 and then you'd

00:05:41.510 --> 00:05:42.850
have a bunch of zeroes.

00:05:42.850 --> 00:05:48.060
You'd have n minus 1 zeroes plus
0 and you'd have an a2

00:05:48.060 --> 00:05:49.690
and then you'd have
a bunch of zeroes.

00:05:49.690 --> 00:05:53.320
And then you'd keep doing that,
and then you would have

00:05:53.320 --> 00:05:55.370
a bunch of zeroes, and then
you would have an an.

00:05:55.370 --> 00:05:58.370
Obviously, by our definition
of vector addition, you add

00:05:58.370 --> 00:06:00.880
all these things up, you get
this guy right here.

00:06:00.880 --> 00:06:04.430
And it's kind of obvious,
because this right here is the

00:06:04.430 --> 00:06:08.880
same thing as our identity
matrix times a1.

00:06:08.880 --> 00:06:10.930
I just wanted to expose
you to that idea.

00:06:10.930 --> 00:06:14.670
Now, let's apply what we already
know about linear

00:06:14.670 --> 00:06:17.450
transformations to what we've
just learned about this

00:06:17.450 --> 00:06:19.090
identity matrix.

00:06:19.090 --> 00:06:20.980
I just told you that
I can represent

00:06:20.980 --> 00:06:23.210
any vector like this.

00:06:23.210 --> 00:06:25.180
Let me rewrite it in
maybe terms of x.

00:06:25.180 --> 00:06:32.940
I can write any vector x as a
linear combination of the

00:06:32.940 --> 00:06:36.210
standard basis, which are really
just the columns of the

00:06:36.210 --> 00:06:37.310
identity matrix.

00:06:37.310 --> 00:06:43.060
I can write that as x1 times e1
plus x2 times e2, all the

00:06:43.060 --> 00:06:45.430
way to xn times en.

00:06:45.430 --> 00:06:49.430
And remember, each of these
column vectors right here,

00:06:49.430 --> 00:06:54.820
like for e1, is just 1 in the
first entry and then all the

00:06:54.820 --> 00:06:57.020
rest are zeroes. e2 is a 1
in the second entry and

00:06:57.020 --> 00:06:59.410
everything else is 0.

00:06:59.410 --> 00:07:03.050
e5 is a 1 in the fifth entry
and everything else is 0.

00:07:03.050 --> 00:07:05.270
And this I just showed you, and
this is a bit obvious from

00:07:05.270 --> 00:07:06.290
this right here.

00:07:06.290 --> 00:07:09.520
Now, we know that by definition,
a linear

00:07:09.520 --> 00:07:20.680
transformation of x-- let
me put it this way.

00:07:20.680 --> 00:07:25.350
A linear transformation of x,
of our vector x, is the same

00:07:25.350 --> 00:07:27.440
thing as taking the linear
transformation of this whole

00:07:27.440 --> 00:07:29.550
thing-- let me do it in another
color-- is equal to

00:07:29.550 --> 00:07:38.050
the linear transformation of--
actually, instead of using L,

00:07:38.050 --> 00:07:38.740
let me use T.

00:07:38.740 --> 00:07:42.290
I used L by accident because
I was thinking linear.

00:07:42.290 --> 00:07:45.930
But if I were take the linear
transformation of x, because

00:07:45.930 --> 00:07:48.540
that's the notation we're used
to, that's the same thing as

00:07:48.540 --> 00:07:50.830
taking a linear transformation
of this thing.

00:07:50.830 --> 00:07:51.840
They're equivalent.

00:07:51.840 --> 00:07:58.510
So x1 times e1 plus x2 times
e2, all the way to

00:07:58.510 --> 00:08:01.800
plus xn times en.

00:08:01.800 --> 00:08:03.340
It's equivalent statements.

00:08:03.340 --> 00:08:06.750
Now, from the definition of
linear transformations, we

00:08:06.750 --> 00:08:09.330
know that this is the same
thing, that the transformation

00:08:09.330 --> 00:08:12.230
of the sum is equal to the sum
of the transformation.

00:08:12.230 --> 00:08:18.800
So this is equal to the
transformation of x1 e1 plus

00:08:18.800 --> 00:08:22.850
the transformation of x2 e2
where this is just any linear

00:08:22.850 --> 00:08:23.510
transformation.

00:08:23.510 --> 00:08:24.670
Let me make that very clear.

00:08:24.670 --> 00:08:26.660
This is any linear
transformation.

00:08:30.860 --> 00:08:33.230
By definition, linear
transformations have to

00:08:33.230 --> 00:08:34.850
satisfy these properties.

00:08:34.850 --> 00:08:39.289
So the transformation times
x2 e2, all the way to this

00:08:39.289 --> 00:08:43.940
transformation times this last
entry, the scalar xn times my

00:08:43.940 --> 00:08:47.320
standard basis vector en.

00:08:47.320 --> 00:08:49.190
And we know from the other
property of linear

00:08:49.190 --> 00:08:53.220
transformations that the
transformation of a vector

00:08:53.220 --> 00:08:58.690
multiplied by the scalar is the
same thing as the scalar

00:08:58.690 --> 00:09:04.390
multiplied by the transformation
of the vector.

00:09:04.390 --> 00:09:05.950
That's just from our definition
of linear

00:09:05.950 --> 00:09:06.630
transformations.

00:09:06.630 --> 00:09:12.580
Plus x2 two times the
transformation of e2 plus all

00:09:12.580 --> 00:09:19.560
the way to xn times the
transformation of en.

00:09:19.560 --> 00:09:20.730
Now, what is this?

00:09:20.730 --> 00:09:23.860
I could rewrite this, so
everything I've done so far,

00:09:23.860 --> 00:09:28.280
so the transformation of x is
equal to that, which just

00:09:28.280 --> 00:09:31.170
using our properties of linear
transformations, all linear

00:09:31.170 --> 00:09:33.780
transformations, this has
to be true for them.

00:09:33.780 --> 00:09:36.410
I get to this and this
is equivalent.

00:09:36.410 --> 00:09:40.600
This is equal to-- if we view
each of these as a column

00:09:40.600 --> 00:09:45.350
vector, this is equal to what?

00:09:45.350 --> 00:09:49.140
This is equal to the matrix
where this is the first

00:09:49.140 --> 00:09:53.300
column, T e1.

00:09:53.300 --> 00:09:56.960
And then the second
column is T e2.

00:09:56.960 --> 00:10:03.970
And then we go all the way to
T en times-- let me put it

00:10:03.970 --> 00:10:07.640
this way-- x1, x2, all
the way to xn.

00:10:07.640 --> 00:10:10.090
We've seen this multiple,
multiple times.

00:10:10.090 --> 00:10:13.290
Now what's really, really,
really neat about this is I

00:10:13.290 --> 00:10:16.270
just started with an arbitrary
transformation.

00:10:16.270 --> 00:10:19.520
And I just showed that
an arbitrary linear

00:10:19.520 --> 00:10:23.350
transformation of x can be
rewritten as a product of a

00:10:23.350 --> 00:10:27.460
matrix where I'm taking that
same linear transformation of

00:10:27.460 --> 00:10:31.320
each of our standard basis
vectors, and I can construct

00:10:31.320 --> 00:10:34.480
that matrix, and multiplying
that matrix times my x vector

00:10:34.480 --> 00:10:36.770
is the same thing as this
transformation.

00:10:36.770 --> 00:10:42.000
So this is essentially showing
you that all transformations--

00:10:42.000 --> 00:10:42.940
let me be careful.

00:10:42.940 --> 00:10:53.500
All linear transformations can
be a matrix vector product.

00:10:53.500 --> 00:10:55.540
Not only did I show you that
you can do it, but it's

00:10:55.540 --> 00:10:57.430
actually a fairly
straightforward thing to do.

00:10:57.430 --> 00:11:01.340
This is actually a pretty
simple operation to do.

00:11:01.340 --> 00:11:04.960
Let me show you an example.

00:11:04.960 --> 00:11:06.700
I don't know, I think
this is super neat.

00:11:06.700 --> 00:11:08.810
Let's say that I just-- I'm
just going to make up some

00:11:08.810 --> 00:11:09.610
transformation.

00:11:09.610 --> 00:11:11.650
Let's say I have a
transformation and it's a

00:11:11.650 --> 00:11:14.720
mapping between-- let's make
it extra interesting--

00:11:14.720 --> 00:11:18.580
between R2 and R3.

00:11:18.580 --> 00:11:22.090
And let's say my transformation,
let's say that

00:11:22.090 --> 00:11:30.030
T of x1 x2 is equal to-- let's
say the first entry is x1 plus

00:11:30.030 --> 00:11:37.620
3x2, the second entry is 5x2
minus x1, and let's say the

00:11:37.620 --> 00:11:43.390
third entry is 4x1 plus x2.

00:11:43.390 --> 00:11:44.190
This is a mapping.

00:11:44.190 --> 00:11:45.150
I could have written
it like this.

00:11:45.150 --> 00:11:52.620
I could write T of any vector
in R2, x1, x2, is equal to--

00:11:52.620 --> 00:11:54.560
and maybe this is just
redundant, but I

00:11:54.560 --> 00:11:55.500
think you get the idea.

00:11:55.500 --> 00:12:02.520
I like this notation better. x1
plus 3x2, 5x2 minus x1, and

00:12:02.520 --> 00:12:05.080
then 4x1 plus x2.

00:12:05.080 --> 00:12:07.650
This statement and this
statement I just wrote are

00:12:07.650 --> 00:12:07.830
equivalent.

00:12:07.830 --> 00:12:10.060
And I like to visualize this
a little bit more.

00:12:10.060 --> 00:12:12.030
Now, I just told you that
I can represent this

00:12:12.030 --> 00:12:15.330
transformation as a matrix
vector product.

00:12:15.330 --> 00:12:16.360
How do I do it?

00:12:16.360 --> 00:12:20.530
Well, what I do is I take the
transformation of this guy.

00:12:20.530 --> 00:12:25.260
My domain right here is R2, and
I produce a vector that's

00:12:25.260 --> 00:12:26.610
going to be in Rn.

00:12:26.610 --> 00:12:28.330
So what I do is, let's see.

00:12:28.330 --> 00:12:33.320
So I'm concerned with
multiplying things times

00:12:33.320 --> 00:12:34.840
vectors in R2.

00:12:34.840 --> 00:12:37.940
So what we're going to do is
we're going to start with the

00:12:37.940 --> 00:12:42.350
identity matrix, identity 2
because that's my domain and

00:12:42.350 --> 00:12:47.300
it just looks like
this: 1, 0, 0, 1.

00:12:47.300 --> 00:12:48.770
I'm just going to
start with that.

00:12:48.770 --> 00:12:51.940
And all I do is I apply my
transformation to each of the

00:12:51.940 --> 00:12:54.340
columns, each of my
standard bases.

00:12:54.340 --> 00:12:56.095
These are the standard
bases for R2.

00:13:00.150 --> 00:13:01.960
I showed you that they're bases,
how do I know that

00:13:01.960 --> 00:13:03.110
they're standard?

00:13:03.110 --> 00:13:05.080
Why are they called the
standard bases?

00:13:05.080 --> 00:13:07.560
And I haven't covered this in a
lot of detail right yet, but

00:13:07.560 --> 00:13:11.210
you could take the dot product
of any of these guys with any

00:13:11.210 --> 00:13:12.620
of the other guys, and you'll
see that they're all

00:13:12.620 --> 00:13:13.660
orthogonal to each other.

00:13:13.660 --> 00:13:15.510
The dot product of any one of
these columns with the other

00:13:15.510 --> 00:13:18.000
is always zero, so that's
a nice clue.

00:13:18.000 --> 00:13:21.230
And they all have length of 1,
so that's a nice reason why

00:13:21.230 --> 00:13:22.530
they're called the
standard bases.

00:13:22.530 --> 00:13:26.240
But anyway, back to our attempt
to represent this

00:13:26.240 --> 00:13:29.190
transformation as a matrix
vector product.

00:13:29.190 --> 00:13:34.000
So we say look, our domain is in
R2, so let's start with I2,

00:13:34.000 --> 00:13:38.450
or we could call it our 2-by-2
identity matrix.

00:13:38.450 --> 00:13:41.280
And let's apply the
transformation to each of its

00:13:41.280 --> 00:13:43.850
column vectors where each of
its column vectors are a

00:13:43.850 --> 00:13:45.750
vector in the standard
basis for R2.

00:13:50.630 --> 00:13:54.900
So I'm going to write
it like this.

00:13:54.900 --> 00:13:58.790
The first column is T of this
column, and then the second

00:13:58.790 --> 00:14:05.910
column is going to
be T of 0, 1.

00:14:05.910 --> 00:14:09.860
And I know I'm getting messier
with my handwriting.

00:14:09.860 --> 00:14:15.160
What is T of the vector 1, 0?

00:14:15.160 --> 00:14:16.670
Well, we just go here.

00:14:16.670 --> 00:14:18.690
We construct another vector.

00:14:18.690 --> 00:14:22.540
So we get 1 plus
3 times 0 is 1.

00:14:22.540 --> 00:14:27.930
Then we get 5 times 0 minus
1, so that's minus 1.

00:14:27.930 --> 00:14:29.740
x2 is zero in this case.

00:14:29.740 --> 00:14:35.820
And then we get 4 times 1 plus
0, so that's just 4.

00:14:35.820 --> 00:14:37.850
So that's T of 1, 0.

00:14:37.850 --> 00:14:46.500
And then what is T of 0, 1?

00:14:46.500 --> 00:14:53.410
T of 0, 1 is equal to-- so we
have 0 plus 3 times 1 is 3.

00:14:53.410 --> 00:14:59.260
Then we have 0 minus
1 is minus 1.

00:14:59.260 --> 00:15:00.930
Let me make sure I did
this one right.

00:15:00.930 --> 00:15:01.540
What was this?

00:15:01.540 --> 00:15:03.860
This was 5 times 1 minus 1.

00:15:06.400 --> 00:15:10.750
Yeah, 5 times 0 minus
x1, which is 1.

00:15:10.750 --> 00:15:15.280
Now, this case, it's 5 times--
oh, I have to be careful.

00:15:15.280 --> 00:15:16.960
This is 5 times x2.

00:15:16.960 --> 00:15:17.510
x2 is 1.

00:15:17.510 --> 00:15:22.970
So 5 times 1 minus
0, so it's 5.

00:15:22.970 --> 00:15:28.490
And then I have 4 times
0 plus x2, plus 1.

00:15:28.490 --> 00:15:31.820
And I just showed you if I
replace each of these standard

00:15:31.820 --> 00:15:33.910
basis vectors with the
transformation of

00:15:33.910 --> 00:15:35.550
them, what do I get?

00:15:35.550 --> 00:15:37.860
I get this vector right here.

00:15:37.860 --> 00:15:39.410
So I already figured
out what they are.

00:15:42.690 --> 00:15:45.280
If I take this guy and evaluate
it, it's the vector

00:15:45.280 --> 00:15:48.250
1, minus 1, 4.

00:15:48.250 --> 00:15:54.620
And then this guy is the
vector 3, 5, and 1.

00:15:54.620 --> 00:15:57.410
So what we just did and this
is-- I don't know.

00:15:57.410 --> 00:15:59.790
For some reason, I find this
to be pretty amazing.

00:15:59.790 --> 00:16:03.800
We can now rewrite this
transformation here as the

00:16:03.800 --> 00:16:05.720
product of any vector.

00:16:05.720 --> 00:16:09.770
So if we define this to be equal
to a, or we could write

00:16:09.770 --> 00:16:10.290
it this way.

00:16:10.290 --> 00:16:12.210
We can now write our
transformation.

00:16:12.210 --> 00:16:17.950
Our transformation of x1, x2
can now be rewritten as the

00:16:17.950 --> 00:16:20.430
product of this vector.

00:16:20.430 --> 00:16:22.070
I'll write it in green.

00:16:22.070 --> 00:16:31.720
The vector 1, 3, minus 1, 5, 4,
1 times our input vector,

00:16:31.720 --> 00:16:36.200
x1, x2, which is super cool
because now we just have to do

00:16:36.200 --> 00:16:37.660
a matrix multiplication.

00:16:37.660 --> 00:16:39.770
Instead of this, and if we have
some processor that does

00:16:39.770 --> 00:16:42.920
this super fast, we
can then use that.

00:16:42.920 --> 00:16:46.050
I don't know, I think this is
especially elegant, because

00:16:46.050 --> 00:16:49.310
what happens here is we applied
the transformations to

00:16:49.310 --> 00:16:52.090
each of the columns of a 2-by-2
matrix, and we got a

00:16:52.090 --> 00:16:55.620
3-by-2 matrix.

00:16:55.620 --> 00:16:58.380
And we know what happens when
you multiply a 3-by-2 matrix

00:16:58.380 --> 00:17:00.550
times a vector that's in R2.

00:17:00.550 --> 00:17:05.420
Or you can almost view this
as a 2-by-1 matrix.

00:17:05.420 --> 00:17:09.579
You're going to get a vector
that is in R3.

00:17:09.579 --> 00:17:11.790
Because you're going to have
these guys times that guy's

00:17:11.790 --> 00:17:12.609
going to be the first term.

00:17:12.609 --> 00:17:13.846
These guys times these
guys are going to

00:17:13.846 --> 00:17:14.800
be the second term.

00:17:14.800 --> 00:17:16.230
These guys times those
guys are going to

00:17:16.230 --> 00:17:17.569
be the third term.

00:17:17.569 --> 00:17:22.040
So by kind of creating this
3-by-2 matrix, we have

00:17:22.040 --> 00:17:25.510
actually created a mapping
from R2 to R3.

00:17:25.510 --> 00:17:28.470
Anyway, for some reason I find
this to be especially neat.

00:17:28.470 --> 00:17:31.470
Hopefully, at least you find
this somewhat instructive.

