WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.444
[MUSIC PLAYING]

00:00:07.390 --> 00:00:09.822
CHET HASSE: Hello, and welcome
to another fireside chat.

00:00:09.822 --> 00:00:11.530
You can tell it's a
fireside chat because

00:00:11.530 --> 00:00:15.256
of that professional video
shot in my dirty closet.

00:00:15.256 --> 00:00:18.610
So we have a panel of
experts here on stage.

00:00:18.610 --> 00:00:22.480
We also have more engineers
in the audience to handle,

00:00:22.480 --> 00:00:24.847
hopefully, anything you
can throw out at us.

00:00:24.847 --> 00:00:26.180
So let me set some ground rules.

00:00:26.180 --> 00:00:29.110
We're looking for interesting
technical questions.

00:00:29.110 --> 00:00:31.600
We are not looking for
questions that go something

00:00:31.600 --> 00:00:35.110
like, when will Android,
will the platform--

00:00:35.110 --> 00:00:37.242
anything with the word
"will," or any future thing,

00:00:37.242 --> 00:00:38.950
you can guarantee
we're not going to give

00:00:38.950 --> 00:00:40.116
an interesting answer to it.

00:00:40.116 --> 00:00:41.890
We don't really
talk about futures.

00:00:41.890 --> 00:00:43.880
But we'd like to talk
about everything else.

00:00:43.880 --> 00:00:46.338
So let me start this out by
actually introducing the panel.

00:00:46.338 --> 00:00:47.020
I'm Chet Hasse.

00:00:47.020 --> 00:00:49.319
I'm from the Android
Toolkit team.

00:00:49.319 --> 00:00:50.860
DIANNE HACKBORN:
I'm Dianne Hackborn.

00:00:50.860 --> 00:00:53.200
I manage the Android
Framework team.

00:00:53.200 --> 00:00:54.665
ANWAR GHULOUM:
I'm Anwar Ghuloum.

00:00:54.665 --> 00:00:57.195
I'm responsible
for CoreOS Android.

00:00:57.195 --> 00:00:58.570
STEPHANIE CUTHBERTSON:
I'm Steph.

00:00:58.570 --> 00:01:00.220
I'm the Director of
Product Management

00:01:00.220 --> 00:01:03.067
and Developer Relations
for Developer platform.

00:01:03.067 --> 00:01:04.150
AURASH MAHBOD: I'm Aurash.

00:01:04.150 --> 00:01:05.632
I work on Play Store.

00:01:05.632 --> 00:01:06.590
ROMAIN GUY: I'm Romain.

00:01:06.590 --> 00:01:09.670
I'm not sure what I do anymore.

00:01:09.670 --> 00:01:13.095
CHET HASSE: Neither
does anybody else.

00:01:13.095 --> 00:01:14.470
PAUL BANKHEAD:
I'm Paul Bankhead.

00:01:14.470 --> 00:01:16.170
I'm the PM for the Play Store.

00:01:16.170 --> 00:01:19.182
TOR NORBYE: I'm Tor
from Android Studio.

00:01:19.182 --> 00:01:20.140
YIGIT BOYAR: I'm Yigit.

00:01:20.140 --> 00:01:21.780
I don't have a microphone.

00:01:21.780 --> 00:01:25.140
I work in the Toolkit team.

00:01:25.140 --> 00:01:28.600
CHET HASSE: And so in
past fireside chats,

00:01:28.600 --> 00:01:31.977
we've pre-rolled questions from
Twitter, from the interwebs.

00:01:31.977 --> 00:01:33.310
And we didn't do that this year.

00:01:33.310 --> 00:01:35.350
We thought it'd be interesting
to just take the live questions

00:01:35.350 --> 00:01:36.130
from the crowd.

00:01:36.130 --> 00:01:38.380
The fact that nobody is
standing up at the microphones

00:01:38.380 --> 00:01:41.430
means this may be an
extremely short session.

00:01:41.430 --> 00:01:44.260
I would invite any
and all questions,

00:01:44.260 --> 00:01:46.930
with the caveat that I did
before from the audience,

00:01:46.930 --> 00:01:49.937
please come up to the microphone
so that the Livestream-- so

00:01:49.937 --> 00:01:52.270
that the recording can actually
catch what you're saying

00:01:52.270 --> 00:01:53.560
and so that we can as well.

00:01:53.560 --> 00:01:56.800
It looks like we have our first
coming up to the microphone.

00:01:56.800 --> 00:01:59.521
So just form queues,
really, really long

00:01:59.521 --> 00:02:02.020
and painful and tedious queues
at the microphones, and we'll

00:02:02.020 --> 00:02:03.340
take them one by one
until we're done.

00:02:03.340 --> 00:02:03.840
Thanks.

00:02:03.840 --> 00:02:04.390
Yes, please?

00:02:04.390 --> 00:02:04.931
AUDIENCE: Hi.

00:02:04.931 --> 00:02:08.430
I have a couple questions
about some of the libraries.

00:02:08.430 --> 00:02:13.600
I'd like to start off with the
Android job priority queue.

00:02:13.600 --> 00:02:16.010
And so-- yes--

00:02:16.010 --> 00:02:20.890
I'm wondering if
with all the new ways

00:02:20.890 --> 00:02:24.100
to manage jobs in the
background if you would still

00:02:24.100 --> 00:02:26.860
suggest using that
particular library,

00:02:26.860 --> 00:02:31.566
or would you suggest
something else?

00:02:31.566 --> 00:02:33.190
YIGIT BOYAR: For
people who don't know,

00:02:33.190 --> 00:02:35.350
this is like a job
schedule library.

00:02:35.350 --> 00:02:37.660
Before that was a
job scheduler that I

00:02:37.660 --> 00:02:39.610
wrote in my previous
job, I thought

00:02:39.610 --> 00:02:42.070
I'm just lazy to deprecate it.

00:02:42.070 --> 00:02:44.800
I worked closely with
the Work Manager team.

00:02:44.800 --> 00:02:47.260
I think that's
definitely the way to go.

00:02:47.260 --> 00:02:50.800
Hopefully, I will have some
time to deprecate the library.

00:02:50.800 --> 00:02:52.510
You should have used it more.

00:02:52.510 --> 00:02:54.370
AUDIENCE: What would
you suggest using

00:02:54.370 --> 00:02:57.160
if you want a job to be
done in the background,

00:02:57.160 --> 00:03:00.360
but relatively quickly?

00:03:00.360 --> 00:03:02.320
Not like in the
middle of the night,

00:03:02.320 --> 00:03:06.539
but within a few minutes, an
hour, something like that.

00:03:06.539 --> 00:03:08.080
YIGIT BOYAR: So Work
Manager actually

00:03:08.080 --> 00:03:11.590
does try to run it faster,
compared to Job Scheduler.

00:03:11.590 --> 00:03:14.950
It doesn't delegate to the
Job Scheduler immediately.

00:03:14.950 --> 00:03:17.090
It also tries to run it itself.

00:03:17.090 --> 00:03:20.360
So Work Manager will work
most of the use cases.

00:03:20.360 --> 00:03:23.440
When we were designing
Work Manager, we looked at,

00:03:23.440 --> 00:03:24.940
should we create
something that both

00:03:24.940 --> 00:03:28.090
can run different jobs
and the instant jobs?

00:03:28.090 --> 00:03:32.140
The problem is you cannot really
define a good API that works

00:03:32.140 --> 00:03:33.380
for both of them.

00:03:33.380 --> 00:03:36.340
And if you're trying to run
them in memory instantly,

00:03:36.340 --> 00:03:39.340
there's much better APIs
with callbacks and stuff.

00:03:39.340 --> 00:03:41.580
So we decided to
keep them separate.

00:03:41.580 --> 00:03:42.530
AUDIENCE: OK.

00:03:42.530 --> 00:03:44.320
One last question.

00:03:44.320 --> 00:03:48.600
If anyone knows
anything about Glide--

00:03:48.600 --> 00:03:51.690
on Glide 4, we've got
Glide and Glide app.

00:03:51.690 --> 00:03:56.710
And I'm just curious, if I could
maybe have someone from Glide

00:03:56.710 --> 00:04:00.239
maybe explain some of
the differences with it?

00:04:00.239 --> 00:04:02.530
CHET HASSE: I don't think we
have people from the Glide

00:04:02.530 --> 00:04:03.250
library here.

00:04:03.250 --> 00:04:05.870
But has anybody on the
panel used Glide before,

00:04:05.870 --> 00:04:08.470
or have opinions, besides we do
recommend that people use that

00:04:08.470 --> 00:04:11.920
and not write your own bitmap
caching library, because why?

00:04:11.920 --> 00:04:12.852
AUDIENCE: Yes.

00:04:12.852 --> 00:04:14.560
CHET HASSE: There are
other ones as well.

00:04:14.560 --> 00:04:17.209
Picasso is a
reasonable approach.

00:04:17.209 --> 00:04:19.850
But I'm not sure what
your question was.

00:04:19.850 --> 00:04:22.044
It's not answered by
that vague assumption.

00:04:22.044 --> 00:04:22.960
AUDIENCE: That's fine.

00:04:22.960 --> 00:04:25.220
If there's no one around
then I'll ask later.

00:04:25.220 --> 00:04:25.720
Thanks.

00:04:25.720 --> 00:04:26.386
CHET HASSE: Yup.

00:04:26.386 --> 00:04:28.954
Also, there are two mics, too,
if one line gets really long.

00:04:28.954 --> 00:04:30.370
Be sure to seek
out the other one.

00:04:30.370 --> 00:04:31.030
Hi.

00:04:31.030 --> 00:04:32.170
AUDIENCE: Hi.

00:04:32.170 --> 00:04:34.530
Since I cannot ask questions,
I'm going to just make

00:04:34.530 --> 00:04:36.640
a comment.

00:04:36.640 --> 00:04:40.540
So I noticed that
you're not opinionated,

00:04:40.540 --> 00:04:42.920
and that's excellent.

00:04:42.920 --> 00:04:45.050
You have limited your opinion.

00:04:45.050 --> 00:04:48.220
So for example, it's still there
is no dependency injection.

00:04:48.220 --> 00:04:51.400
There are suggestions,
maybe use dagger, too.

00:04:51.400 --> 00:04:55.390
There are suggestions about
using Rx Java at certain times.

00:04:55.390 --> 00:04:59.187
Sometimes there are conflicts
between the suggestions.

00:04:59.187 --> 00:05:00.770
I'm not going to ask
when you're going

00:05:00.770 --> 00:05:04.300
to have those incorporated
into what you're doing today.

00:05:04.300 --> 00:05:05.820
I'm just suggesting
that maybe you

00:05:05.820 --> 00:05:08.700
should consider
that have those also

00:05:08.700 --> 00:05:10.500
so that we don't
have to make choices.

00:05:10.500 --> 00:05:12.750
CHET HASSE: So if I could
rephrase that, I'd just say,

00:05:12.750 --> 00:05:13.706
would you consider?

00:05:13.706 --> 00:05:15.580
And then I'll put a
question mark at the end,

00:05:15.580 --> 00:05:16.290
and then it would be about--

00:05:16.290 --> 00:05:17.165
AUDIENCE: Not really.

00:05:17.165 --> 00:05:19.672
I was going to ask when
you are going to do that.

00:05:19.672 --> 00:05:21.600
[LAUGHS]

00:05:23.385 --> 00:05:24.010
CHET HASSE: OK.

00:05:24.010 --> 00:05:25.968
I doubt we're going to
answer to that question.

00:05:25.968 --> 00:05:28.510
Was there anyone that wanted to
address the underlying thing?

00:05:28.510 --> 00:05:29.926
YIGIT BOYAR:
Dependency injections

00:05:29.926 --> 00:05:32.280
is one of the areas we
are looking at expanding,

00:05:32.280 --> 00:05:35.250
but we want to be
careful and slow.

00:05:35.250 --> 00:05:38.160
So we want to make sure the
things we have already shipped

00:05:38.160 --> 00:05:40.090
are iterated very well.

00:05:40.090 --> 00:05:42.503
And as we get more head
count, I don't know,

00:05:42.503 --> 00:05:43.504
we'll be able to run it.

00:05:43.504 --> 00:05:44.294
CHET HASSE: Subtle.

00:05:44.294 --> 00:05:45.050
Very subtle.

00:05:45.050 --> 00:05:47.370
YIGIT BOYAR: We'll
challenge more problems.

00:05:47.370 --> 00:05:48.270
CHET HASSE: I should
point out, too.

00:05:48.270 --> 00:05:49.710
This came up in
conversations yesterday

00:05:49.710 --> 00:05:51.418
that we were having
with some developers.

00:05:51.418 --> 00:05:54.720
We have opinions now, but
those opinions, we hope,

00:05:54.720 --> 00:05:57.570
don't approach the area of
arrogance, where we say,

00:05:57.570 --> 00:05:59.940
this is absolutely the way
you should do it always.

00:05:59.940 --> 00:06:03.360
It's more that we are providing
opinions on reasonable ways

00:06:03.360 --> 00:06:04.410
to write applications.

00:06:04.410 --> 00:06:06.990
If you have other opinions,
if you have existing

00:06:06.990 --> 00:06:09.630
architectures, or ways that
you need to do it instead,

00:06:09.630 --> 00:06:12.510
we absolutely think that you
should use those approaches.

00:06:12.510 --> 00:06:14.650
And this includes the
use of other libraries

00:06:14.650 --> 00:06:15.570
and other approaches out there.

00:06:15.570 --> 00:06:17.278
We don't want to take
the place of things

00:06:17.278 --> 00:06:19.740
that are there that are working
reasonably well for people

00:06:19.740 --> 00:06:20.239
already.

00:06:20.239 --> 00:06:22.140
Why would we bother doing that?

00:06:22.140 --> 00:06:25.200
So yes, we do have opinions,
but one of those opinions

00:06:25.200 --> 00:06:28.156
is use what is right for
you and your application.

00:06:28.156 --> 00:06:30.030
DIANNE HACKBORN: I still
don't have opinions.

00:06:30.030 --> 00:06:31.155
[LAUGHS]

00:06:31.539 --> 00:06:33.330
DIANNE HACKBORN: So
the underlying platform

00:06:33.330 --> 00:06:34.913
is still neutral,
and what we're doing

00:06:34.913 --> 00:06:37.804
is building, on top of it,
some opinions that make

00:06:37.804 --> 00:06:38.970
it easier for people to use.

00:06:38.970 --> 00:06:40.680
ROMAIN GUY: I'm pretty
sure you have opinions,

00:06:40.680 --> 00:06:42.013
you just don't want to say them.

00:06:44.630 --> 00:06:45.510
CHET HASSE: Yes?

00:06:45.510 --> 00:06:45.780
AUDIENCE: Hey.

00:06:45.780 --> 00:06:46.500
My name's Shane.

00:06:46.500 --> 00:06:48.570
I'm with Jaguar Land Rover.

00:06:48.570 --> 00:06:51.210
So ever since I first heard
about Kotlin last year,

00:06:51.210 --> 00:06:53.920
it sounds like something
really interesting.

00:06:53.920 --> 00:06:55.687
I've practiced it a
little bit on my own.

00:06:55.687 --> 00:06:57.270
But the reality is
I'm not going to be

00:06:57.270 --> 00:06:58.770
able to start getting
deeper into it

00:06:58.770 --> 00:07:01.380
until I can get organizational
buy-in to switch

00:07:01.380 --> 00:07:04.264
from Java to Kotlin at a
company like mine, which

00:07:04.264 --> 00:07:05.430
is a big automotive company.

00:07:05.430 --> 00:07:07.020
It's not a software company.

00:07:07.020 --> 00:07:09.330
Getting that sort of
buy-in is really difficult.

00:07:09.330 --> 00:07:13.530
So do you guys have any
strategies or tips to sell that

00:07:13.530 --> 00:07:17.610
up to management, and slash,
are there any resources that you

00:07:17.610 --> 00:07:19.650
guys have that we can
use to kind of help

00:07:19.650 --> 00:07:22.830
present a technical and
business case to use

00:07:22.830 --> 00:07:23.917
Kotlin more at work?

00:07:23.917 --> 00:07:26.250
ROMAIN GUY: So first of all,
[? Kristin ?] [? Ali ?] had

00:07:26.250 --> 00:07:29.490
a couple talks last year, I
think, on this exact topic,

00:07:29.490 --> 00:07:31.950
how to convince your
organization to adopt Kotlin.

00:07:31.950 --> 00:07:33.877
So you should check those out.

00:07:33.877 --> 00:07:35.460
ANWAR GHULOUM: Maybe
we have some data

00:07:35.460 --> 00:07:38.780
on developer productivity.

00:07:38.780 --> 00:07:40.576
Developer productivity
data might help.

00:07:40.576 --> 00:07:42.700
TOR NORBYE: We do know that
people who are using it

00:07:42.700 --> 00:07:44.140
are very, very happy.

00:07:44.140 --> 00:07:44.980
[LAUGHS]

00:07:44.980 --> 00:07:47.830
TOR NORBYE: And also, it
could be an easier way

00:07:47.830 --> 00:07:50.856
to attract talent, if
that's difficult for you

00:07:50.856 --> 00:07:52.480
to find really good
Android developers.

00:07:52.480 --> 00:07:54.700
It seems that a lot
of pro developers

00:07:54.700 --> 00:07:56.650
really prefer to use Kotlin.

00:07:56.650 --> 00:08:00.100
So they might be more
excited to come work for you

00:08:00.100 --> 00:08:01.420
if you can offer them Kotlin.

00:08:01.420 --> 00:08:02.110
ROMAIN GUY: It's
actually pretty cool

00:08:02.110 --> 00:08:04.068
to see that in LinkedIn
emails from recruiters,

00:08:04.068 --> 00:08:06.310
where they say, and we use
Kotlin and it's a perk.

00:08:06.310 --> 00:08:08.984
That's weird to have
a language as a perk.

00:08:08.984 --> 00:08:10.900
STEPHANIE CUTHBERTSON:
So just some more data.

00:08:10.900 --> 00:08:13.930
Our surveys, which have
an end of like 17,000,

00:08:13.930 --> 00:08:17.020
the delta between Kotlin
and any other language,

00:08:17.020 --> 00:08:20.530
it's about 20 to 25
points higher, absolute,

00:08:20.530 --> 00:08:21.760
in terms of satisfaction.

00:08:21.760 --> 00:08:24.370
And what's interesting is the
more developers use Kotlin--

00:08:24.370 --> 00:08:25.570
we measure that--

00:08:25.570 --> 00:08:27.017
the higher that
satisfaction gets,

00:08:27.017 --> 00:08:29.600
which the first time I saw that,
I was like, is that an error?

00:08:29.600 --> 00:08:29.770
ROMAIN GUY: Yeah.

00:08:29.770 --> 00:08:31.394
Engineers never gets
happier over time.

00:08:31.394 --> 00:08:34.100
STEPHANIE CUTHBERTSON: Yeah, so
that was very interesting data.

00:08:34.100 --> 00:08:37.750
The other thing that
we're finding is,

00:08:37.750 --> 00:08:40.690
generally, the companies
that are using Kotlin

00:08:40.690 --> 00:08:44.440
are finding they have whole
classes of errors that go away.

00:08:44.440 --> 00:08:48.160
So the quality of the code
is significantly higher.

00:08:48.160 --> 00:08:50.354
And also, their
productivity is higher.

00:08:50.354 --> 00:08:52.270
One of the things that
is useful is you end up

00:08:52.270 --> 00:08:54.311
writing a lot less code,
and code you don't write

00:08:54.311 --> 00:08:56.337
doesn't have bugs in it.

00:08:56.337 --> 00:08:58.420
If I was going to phrase
the question back to you,

00:08:58.420 --> 00:09:01.240
if we produced a series
of concrete case studies

00:09:01.240 --> 00:09:03.340
that documented that, would
that be useful to you?

00:09:03.340 --> 00:09:03.550
AUDIENCE: Yeah.

00:09:03.550 --> 00:09:04.660
That's exactly what
I'm getting at.

00:09:04.660 --> 00:09:04.960
STEPHANIE CUTHBERTSON: OK.

00:09:04.960 --> 00:09:06.790
Mr. Katsaros is right
in front of you.

00:09:06.790 --> 00:09:09.700
I think we should
probably do some of those.

00:09:09.700 --> 00:09:10.810
We did one, he says.

00:09:10.810 --> 00:09:11.890
OK.

00:09:11.890 --> 00:09:13.550
What's that?

00:09:13.550 --> 00:09:15.550
Oh, he says, did you
watch the keynote?

00:09:15.550 --> 00:09:16.765
It was in it.

00:09:16.765 --> 00:09:17.640
AUDIENCE: Well, sure.

00:09:17.640 --> 00:09:21.130
But it's not readily available
for me to share the keynote,

00:09:21.130 --> 00:09:22.120
right?

00:09:22.120 --> 00:09:23.090
So yeah, anything.

00:09:23.090 --> 00:09:25.090
And I've talked to several
other developers here

00:09:25.090 --> 00:09:26.839
who work for maybe
financial institutions,

00:09:26.839 --> 00:09:30.190
or other kind of non-software
companies that don't get it.

00:09:30.190 --> 00:09:32.830
So any case studies
or any statistics

00:09:32.830 --> 00:09:35.350
that you guys can put up,
like in a one-stop shop

00:09:35.350 --> 00:09:39.040
that could be sent to a manager,
that would be really useful.

00:09:39.040 --> 00:09:40.180
STEPHANIE CUTHBERTSON: How many
other people in the audience,

00:09:40.180 --> 00:09:42.070
if we produced a
series of case studies,

00:09:42.070 --> 00:09:43.530
like valid case
studies on Kotlin,

00:09:43.530 --> 00:09:44.696
that would be useful to you?

00:09:44.696 --> 00:09:45.370
Raise your hand.

00:09:45.370 --> 00:09:45.940
Wow.

00:09:45.940 --> 00:09:46.952
OK, let's do it.

00:09:46.952 --> 00:09:48.160
Thank you very much for this.

00:09:48.160 --> 00:09:48.640
AUDIENCE: Thank you.

00:09:48.640 --> 00:09:49.960
CHET HASSE: You have
alerted the right people.

00:09:49.960 --> 00:09:51.280
Also, as a general
rule, if you're

00:09:51.280 --> 00:09:52.904
trying to convince
business executives,

00:09:52.904 --> 00:09:55.900
I find that charts
and graphs help.

00:09:55.900 --> 00:09:56.800
[LAUGHS]

00:09:56.800 --> 00:09:57.700
CHET HASSE: Thanks.

00:09:57.700 --> 00:09:58.450
Yes?

00:09:58.450 --> 00:09:59.590
ROMAIN GUY: And if you
could ask questions

00:09:59.590 --> 00:10:01.965
that don't lead to more work
for us, that would be great.

00:10:01.965 --> 00:10:02.902
[LAUGHS]

00:10:04.360 --> 00:10:05.240
AUDIENCE: Hey, guys.

00:10:05.240 --> 00:10:06.830
A bunch of tooling questions.

00:10:06.830 --> 00:10:08.330
I'll start with the easy one.

00:10:08.330 --> 00:10:09.930
Can we make Lint incremental?

00:10:09.930 --> 00:10:15.620
In our projects, for context, it
takes about an hour on 32 cores

00:10:15.620 --> 00:10:19.296
118 28 gigs of RAM machines.

00:10:19.296 --> 00:10:21.080
And we shard it now.

00:10:21.080 --> 00:10:23.282
CHET HASSE: Tor, you
wrote too much LintCode.

00:10:23.282 --> 00:10:23.990
TOR NORBYE: Yeah.

00:10:23.990 --> 00:10:26.307
It's a very difficult
problem, and I

00:10:26.307 --> 00:10:28.640
had this conversation with a
couple of people yesterday.

00:10:28.640 --> 00:10:33.110
And unfortunately for them,
what they're doing right now

00:10:33.110 --> 00:10:35.890
is they want to have every CL
they upload actually also run

00:10:35.890 --> 00:10:37.640
through all the Lint
to make sure that you

00:10:37.640 --> 00:10:38.660
don't accidentally regress.

00:10:38.660 --> 00:10:39.659
AUDIENCE: Exactly, yeah.

00:10:39.659 --> 00:10:42.290
TOR NORBYE: My plan is to
make Lint five to 10 times

00:10:42.290 --> 00:10:43.455
slower over the next year.

00:10:43.455 --> 00:10:44.330
AUDIENCE: Oh, thanks.

00:10:44.330 --> 00:10:45.360
TOR NORBYE: Right.

00:10:45.360 --> 00:10:47.600
And I'm doing that because
I want to add more checks.

00:10:47.600 --> 00:10:49.700
I want to look for
things more deeply,

00:10:49.700 --> 00:10:52.770
add more whole program analysis.

00:10:52.770 --> 00:10:55.580
And I think, for most people,
it's more important for Lint

00:10:55.580 --> 00:10:57.710
to find more bugs than
for it to run quickly.

00:10:57.710 --> 00:10:59.240
And so I would
recommend, instead,

00:10:59.240 --> 00:11:01.520
running Lint as a
post-submit thing,

00:11:01.520 --> 00:11:03.327
so that it runs,
maybe, every night.

00:11:03.327 --> 00:11:04.910
And then you find
out afterwards, hey,

00:11:04.910 --> 00:11:05.936
this CL broke something.

00:11:05.936 --> 00:11:08.060
I understand that it would
be nicer if it was fast,

00:11:08.060 --> 00:11:10.220
but I'm saying that the
primary goal of Lint

00:11:10.220 --> 00:11:12.620
is to be really
comprehensive and for us

00:11:12.620 --> 00:11:13.760
to keep adding more checks.

00:11:13.760 --> 00:11:16.630
And that is the opposite of
trying to make it run faster.

00:11:16.630 --> 00:11:18.440
If there was some low-hanging
fruit of making it faster,

00:11:18.440 --> 00:11:19.190
I would love to do it--

00:11:19.190 --> 00:11:20.148
AUDIENCE: No, there is.

00:11:20.148 --> 00:11:21.346
TOR NORBYE: Go ahead.

00:11:21.346 --> 00:11:23.470
AUDIENCE: Well, I mean,
you can mark all the inputs

00:11:23.470 --> 00:11:25.220
as inputs cachable.

00:11:25.220 --> 00:11:27.440
TOR NORBYE: I think we
just did that in 3.4.

00:11:27.440 --> 00:11:32.060
But there's a lot more work
to make it run in parallel.

00:11:32.060 --> 00:11:33.400
AUDIENCE: Yeah, yeah.

00:11:33.400 --> 00:11:34.990
All right.

00:11:34.990 --> 00:11:37.772
But that will be like eventual
integration if we run it post?

00:11:37.772 --> 00:11:38.480
TOR NORBYE: Yeah.

00:11:38.480 --> 00:11:40.040
I know that there are
people in the Gradle team

00:11:40.040 --> 00:11:42.440
who actually are looking
into making Lint run faster.

00:11:42.440 --> 00:11:45.500
It's just that we don't see
a lot of low hanging fruit.

00:11:45.500 --> 00:11:49.827
And again, it's, at least,
not my top priority.

00:11:49.827 --> 00:11:50.660
AUDIENCE: All right.

00:11:50.660 --> 00:11:57.504
So the second one from it,
so there is Bazel, right?

00:11:57.504 --> 00:11:58.420
Let me start that way.

00:11:58.420 --> 00:12:00.160
There was Bazel [INAUDIBLE]--

00:12:00.160 --> 00:12:01.270
Bazel is open source.

00:12:01.270 --> 00:12:03.030
So it's not something
that is in future.

00:12:03.030 --> 00:12:10.635
Bazel is here, but what
Android teams think about it?

00:12:10.635 --> 00:12:13.780
TOR NORBYE: Every time
we another language

00:12:13.780 --> 00:12:16.406
or build system or IDE,
it's a lot more work, right?

00:12:16.406 --> 00:12:18.280
So when we started
working on Android Studio,

00:12:18.280 --> 00:12:21.220
we stopped working on Eclipse,
because trying to maintain, oh,

00:12:21.220 --> 00:12:21.970
you want Eclipse?

00:12:21.970 --> 00:12:23.040
We'll have this plugin for you.

00:12:23.040 --> 00:12:23.956
Oh, you want IntelliJ?

00:12:23.956 --> 00:12:25.140
Here's this other plugin.

00:12:25.140 --> 00:12:27.820
There's a lot to be gained when
you focus on making one thing

00:12:27.820 --> 00:12:29.030
work really well.

00:12:29.030 --> 00:12:31.660
And so right now, we are
focusing on making Gradle work

00:12:31.660 --> 00:12:33.540
as well as we can make it.

00:12:33.540 --> 00:12:35.620
AUDIENCE: Fair enough.

00:12:35.620 --> 00:12:36.430
CHET HASSE: Thanks.

00:12:36.430 --> 00:12:37.869
Yes?

00:12:37.869 --> 00:12:38.410
AUDIENCE: Hi.

00:12:38.410 --> 00:12:41.680
So back in the
day, back in 2011,

00:12:41.680 --> 00:12:43.720
we had Android App Inventor.

00:12:43.720 --> 00:12:46.510
Actually, I used to
use it to teach it

00:12:46.510 --> 00:12:51.180
to kids in the summer games,
and it was a good, noble tool.

00:12:51.180 --> 00:12:53.410
But then it got deprecated.

00:12:53.410 --> 00:12:57.505
I was just curious, do you
guys have any like this?

00:12:57.505 --> 00:13:00.947
Any local framework which
we can use right now?

00:13:00.947 --> 00:13:02.530
TOR NORBYE: I think
that what happened

00:13:02.530 --> 00:13:05.162
was that it's been taken
over by, I want to say MIT.

00:13:05.162 --> 00:13:06.745
I'm not sure exactly
which university.

00:13:06.745 --> 00:13:08.740
CHET HASSE: It get absorbed
in some of the project, yeah.

00:13:08.740 --> 00:13:10.989
TOR NORBYE: Yeah, I think
they're still developing it.

00:13:10.989 --> 00:13:14.180
One of my daughters is
using it in college.

00:13:14.180 --> 00:13:16.360
AUDIENCE: Oh, OK.

00:13:16.360 --> 00:13:19.661
But there were not a lot of
updates coming in, so yeah.

00:13:19.661 --> 00:13:21.160
TOR NORBYE: We're
not working on it.

00:13:21.160 --> 00:13:22.300
AUDIENCE: OK.

00:13:22.300 --> 00:13:24.760
TOR NORBYE: I think that it
was originally maybe developed

00:13:24.760 --> 00:13:27.200
together, you know,
academia and Google.

00:13:27.200 --> 00:13:29.659
We're not working
off that right now.

00:13:29.659 --> 00:13:31.950
STEPHANIE CUTHBERTSON: Would
you like us to work on it?

00:13:31.950 --> 00:13:32.575
AUDIENCE: Yeah.

00:13:32.575 --> 00:13:35.770
I mean, something.

00:13:35.770 --> 00:13:38.500
TOR NORBYE: What, in particular,
is that you like about it?

00:13:38.500 --> 00:13:41.800
Is it the no source file, just
the actual visual programming?

00:13:41.800 --> 00:13:44.020
Or is it the
component-based development

00:13:44.020 --> 00:13:46.390
of taking readymade, not
just widgets, but things

00:13:46.390 --> 00:13:48.550
like accelerometers
and hooking those up?

00:13:48.550 --> 00:13:51.010
What specifically
is it that you want?

00:13:51.010 --> 00:13:53.395
AUDIENCE: When I was
using it for teaching it

00:13:53.395 --> 00:13:57.820
to kids in the third
or the fourth grade,

00:13:57.820 --> 00:14:00.785
it's really exciting for
them to just develop an app.

00:14:00.785 --> 00:14:04.610
And at that time, it was
intuitive for me as well.

00:14:04.610 --> 00:14:06.670
So I was just thinking,
if something is there,

00:14:06.670 --> 00:14:09.040
since we're already
working on so many tools,

00:14:09.040 --> 00:14:13.070
if there was just one more
local tool, it will help us out.

00:14:13.070 --> 00:14:15.629
And the kids can
start developing apps.

00:14:15.629 --> 00:14:17.920
TOR NORBYE: All right, well,
thank you for the request.

00:14:17.920 --> 00:14:19.630
We'll add it to our to do list.

00:14:19.630 --> 00:14:22.079
It's pretty long at this point.

00:14:22.079 --> 00:14:23.620
AUDIENCE: And just
one more question.

00:14:23.620 --> 00:14:29.370
So any recommended tool
for using CI/CD in Android?

00:14:29.370 --> 00:14:30.490
There is no means.

00:14:30.490 --> 00:14:32.680
We can use Jenkins,
and that's fine,

00:14:32.680 --> 00:14:39.200
but do you guys recommend any
tool to be used for CI/CD?

00:14:39.200 --> 00:14:40.790
TOR NORBYE: Any of
the experts want

00:14:40.790 --> 00:14:43.564
to say anything about this?

00:14:43.564 --> 00:14:45.480
I don't think we picked
one that we recommend.

00:14:45.480 --> 00:14:46.470
Oh, Stephan.

00:14:46.470 --> 00:14:48.860
STEPHAN SOMOGYI: So we
have a talk later today

00:14:48.860 --> 00:14:52.472
on Project Nitrogen, which is
a pretty interesting project,

00:14:52.472 --> 00:14:53.930
where we want to
give you something

00:14:53.930 --> 00:14:56.100
that you can scale your testing.

00:14:56.100 --> 00:14:59.216
And so you might want to
check that session out.

00:14:59.216 --> 00:15:00.730
AUDIENCE: OK, OK.

00:15:00.730 --> 00:15:01.230
OK.

00:15:01.230 --> 00:15:01.670
Thanks.

00:15:01.670 --> 00:15:02.390
CHET HASSE: Thanks.

00:15:02.390 --> 00:15:02.889
Yes?

00:15:02.889 --> 00:15:04.270
AUDIENCE: All right.

00:15:04.270 --> 00:15:06.680
Does the Android team view
Flutter as a growing core

00:15:06.680 --> 00:15:10.220
that developers in this room
should focus on learning,

00:15:10.220 --> 00:15:12.620
or should we expend
those learning resources

00:15:12.620 --> 00:15:16.460
on deeper Android SDK knowledge?

00:15:16.460 --> 00:15:18.560
ROMAIN GUY: So we do a
lot of things at Google.

00:15:18.560 --> 00:15:19.580
Flutter is one of them.

00:15:19.580 --> 00:15:20.690
AUDIENCE: Sure.

00:15:20.690 --> 00:15:23.306
ROMAIN GUY: And Android, as
always, is all about choice.

00:15:23.306 --> 00:15:24.680
I personally really
like Flutter.

00:15:24.680 --> 00:15:26.400
There's a lot of
interesting things.

00:15:26.400 --> 00:15:29.390
But we just made Kotlin an
offshore language on Android.

00:15:29.390 --> 00:15:32.452
We're not going to make Dart an
offshore language on Android.

00:15:32.452 --> 00:15:33.997
And it photographs
qualities that

00:15:33.997 --> 00:15:36.080
are very interesting to
some types of applications

00:15:36.080 --> 00:15:36.220
out there.

00:15:36.220 --> 00:15:37.636
If you are already
cross-platform,

00:15:37.636 --> 00:15:39.930
you should definitely
look into it.

00:15:39.930 --> 00:15:42.710
It's worth a look,
but it's not something

00:15:42.710 --> 00:15:44.560
we are adopting,
ourselves, on the Android.

00:15:44.560 --> 00:15:44.800
AUDIENCE: All right.

00:15:44.800 --> 00:15:45.574
Thank you.

00:15:45.574 --> 00:15:46.240
CHET HASSE: Yes?

00:15:46.240 --> 00:15:47.164
Yes?

00:15:47.164 --> 00:15:47.830
AUDIENCE: Hello.

00:15:47.830 --> 00:15:49.070
My name is Bombi from Brazil.

00:15:49.070 --> 00:15:50.960
Thanks for any
work that you have

00:15:50.960 --> 00:15:52.160
done for Android community.

00:15:52.160 --> 00:15:53.880
I think everyone
is grateful here.

00:15:53.880 --> 00:15:55.080
I have two questions.

00:15:55.080 --> 00:15:58.280
One is regarding Instant Run.

00:15:58.280 --> 00:16:02.110
I was talking to some friends a
few weeks ago, and all of them

00:16:02.110 --> 00:16:05.260
disable Instant Run to
work on a daily basis.

00:16:05.260 --> 00:16:07.800
And if you look for
Instant Run on Google,

00:16:07.800 --> 00:16:10.070
every time there's three
or four suggestions,

00:16:10.070 --> 00:16:14.030
it's like, how can I disable
Instant Run to program?

00:16:14.030 --> 00:16:16.220
What's the current
scenario of Instant Run?

00:16:16.220 --> 00:16:18.470
Are you guys putting some
effort to [INAUDIBLE]

00:16:18.470 --> 00:16:19.530
some [INAUDIBLE]?

00:16:19.530 --> 00:16:22.430
It's kind of not
working as could be?

00:16:22.430 --> 00:16:24.120
How is the current scenario?

00:16:24.120 --> 00:16:26.120
TOR NORBYE: Yeah, so we
described in the keynote

00:16:26.120 --> 00:16:28.340
yesterday, I think,
that we're working

00:16:28.340 --> 00:16:31.332
on Project Marble, which is
really about reworking things

00:16:31.332 --> 00:16:33.290
that are kind of broken
and focusing on product

00:16:33.290 --> 00:16:35.780
excellence-- fixing
bugs, UI freezes,

00:16:35.780 --> 00:16:37.110
leaks, those kinds of things.

00:16:37.110 --> 00:16:38.943
And Instant Run is one
of those things where

00:16:38.943 --> 00:16:40.340
we're working pretty deeply on.

00:16:40.340 --> 00:16:41.930
Did we talk about the EA?

00:16:41.930 --> 00:16:42.440
Yes, we did.

00:16:42.440 --> 00:16:46.359
So we're already working
with a few early access users

00:16:46.359 --> 00:16:47.900
to test our new
implementation, which

00:16:47.900 --> 00:16:49.497
is quite different
from the old one,

00:16:49.497 --> 00:16:51.080
and we are pretty
optimistic about it.

00:16:51.080 --> 00:16:53.780
But we want to make sure
that we really test it well

00:16:53.780 --> 00:16:56.569
before we say, hey, try it now.

00:16:56.569 --> 00:16:57.110
AUDIENCE: OK.

00:16:57.110 --> 00:16:58.670
TOR NORBYE: It's
going to be great.

00:16:58.670 --> 00:17:00.950
AUDIENCE: We are actively
recruiting for an EAP right

00:17:00.950 --> 00:17:02.390
now for what we're
doing with Instant Run,

00:17:02.390 --> 00:17:03.764
so if you are
interested, you can

00:17:03.764 --> 00:17:06.210
look for me or John [INAUDIBLE]
out in the Android studio

00:17:06.210 --> 00:17:06.710
booth.

00:17:06.710 --> 00:17:06.890
AUDIENCE: Awesome.

00:17:06.890 --> 00:17:07.859
Thank you.

00:17:07.859 --> 00:17:10.310
And second question,
just quickly.

00:17:10.310 --> 00:17:13.319
How do you folks think
about remote development?

00:17:13.319 --> 00:17:16.540
For example, if you don't
have this kind of huge machine

00:17:16.540 --> 00:17:19.970
with 16 gigabytes of RAM,
how it's possible for me

00:17:19.970 --> 00:17:22.477
to have this kind of fast
deployment on Android?

00:17:22.477 --> 00:17:24.560
I saw some libraries, like
[? Ming ?] Framer, that

00:17:24.560 --> 00:17:26.565
can also deploy an
application, come back.

00:17:26.565 --> 00:17:28.190
If you have good
connection, it doesn't

00:17:28.190 --> 00:17:29.842
matter the hardware you have.

00:17:29.842 --> 00:17:32.300
What do you guys think about
this kind of remote deployment

00:17:32.300 --> 00:17:34.780
and testing with remote ADB?

00:17:34.780 --> 00:17:37.610
There's a lot of stuff going
on about this on community.

00:17:37.610 --> 00:17:39.560
What do you guys think about it?

00:17:39.560 --> 00:17:41.750
As Google is this
kind of cloud-first,

00:17:41.750 --> 00:17:46.800
data-first company, it's
good to have something--

00:17:46.800 --> 00:17:48.890
TOR NORBYE: Are you
talking about running tests

00:17:48.890 --> 00:17:51.640
in the cloud, or are you talking
about actually live debugging?

00:17:51.640 --> 00:17:52.885
AUDIENCE: Yeah, I run an app.

00:17:52.885 --> 00:17:55.430
It reads on a very powerful
machine on the cloud

00:17:55.430 --> 00:17:57.850
and come back with [INAUDIBLE]
that I run on my phone.

00:17:57.850 --> 00:17:59.210
TOR NORBYE: But I mean machine.

00:17:59.210 --> 00:18:00.640
Are you talking
about the device?

00:18:00.640 --> 00:18:02.360
AUDIENCE: Yeah, your computer.

00:18:02.360 --> 00:18:04.320
TOR NORBYE: OK, so
you want Studio?

00:18:04.320 --> 00:18:05.460
AUDIENCE: Yeah, remote.

00:18:05.460 --> 00:18:07.075
TOR NORBYE: So
you want like an X

00:18:07.075 --> 00:18:08.476
terminal that's talking to it?

00:18:08.476 --> 00:18:09.350
AUDIENCE: Yeah, yeah.

00:18:09.350 --> 00:18:11.300
Maybe you can code
on your machine,

00:18:11.300 --> 00:18:13.250
and then, if you need
to, a fast deployment.

00:18:13.250 --> 00:18:15.401
You can have heat on
the cloud or deployment.

00:18:15.401 --> 00:18:17.900
TOR NORBYE: Basically, X hosting
should already work, right?

00:18:17.900 --> 00:18:22.120
If you have Linux, this should
be possible to you already.

00:18:22.120 --> 00:18:24.255
But building this in
general is a little harder.

00:18:24.255 --> 00:18:26.380
STEPHANIE CUTHBERTSON:
Yeah, it's a great question.

00:18:26.380 --> 00:18:27.710
It's one we talk about.

00:18:27.710 --> 00:18:30.140
We've talked about it every
year for the last three years.

00:18:30.140 --> 00:18:33.170
I think one of the
advantages is it would really

00:18:33.170 --> 00:18:35.595
help when you don't have
a really beefy machine.

00:18:35.595 --> 00:18:36.470
AUDIENCE: Yeah, yeah.

00:18:36.470 --> 00:18:37.760
STEPHANIE CUTHBERTSON: And
that is a lot of users.

00:18:37.760 --> 00:18:39.710
For those of you
who opt in, we do

00:18:39.710 --> 00:18:43.500
watch the stats of how
much RAM people have

00:18:43.500 --> 00:18:44.560
and how much disk size.

00:18:44.560 --> 00:18:47.259
And as you can expect,
it varies a lot by geo.

00:18:47.259 --> 00:18:49.550
Only if people have opted in
do we look at those stats.

00:18:49.550 --> 00:18:52.280
So we worry a lot about places
where people don't, on average,

00:18:52.280 --> 00:18:53.450
have larger machines.

00:18:53.450 --> 00:18:54.520
It's a great question.

00:18:54.520 --> 00:18:57.320
The challenge is the cost of
doing that and doing that well

00:18:57.320 --> 00:18:58.820
is exceptionally high.

00:18:58.820 --> 00:19:01.070
And probably a lot of
you in the audience

00:19:01.070 --> 00:19:03.090
are familiar with many
different efforts.

00:19:03.090 --> 00:19:05.240
So it's a long-running
debate we have.

00:19:05.240 --> 00:19:07.255
Should we do this?

00:19:07.255 --> 00:19:08.630
Because doing that
would postpone

00:19:08.630 --> 00:19:10.310
a lot of other efforts.

00:19:10.310 --> 00:19:12.230
So we're still
having that debate,

00:19:12.230 --> 00:19:14.340
and that would be great
to have you weigh in.

00:19:14.340 --> 00:19:16.070
It's just really a
trade-off decision.

00:19:16.070 --> 00:19:17.870
AUDIENCE: Yeah, I was thinking
because most of the people

00:19:17.870 --> 00:19:20.001
that I talk about, why they
don't code for Android,

00:19:20.001 --> 00:19:22.500
it's just because they don't
have a proper powerful machine.

00:19:22.500 --> 00:19:25.310
So for example, if you have
just kind of remote deployment

00:19:25.310 --> 00:19:27.380
that you can run
the application,

00:19:27.380 --> 00:19:29.750
it would be good for, for
example, Google for Education

00:19:29.750 --> 00:19:31.500
would have a lot of
Chromebooks that would

00:19:31.500 --> 00:19:32.890
have this local Android Studio.

00:19:32.890 --> 00:19:35.660
It's a very short
hardware machine,

00:19:35.660 --> 00:19:37.340
but with powerful
cloud machine that

00:19:37.340 --> 00:19:39.354
can build tablets, or something.

00:19:39.354 --> 00:19:40.770
CHET HASSE: OK,
thank you so much.

00:19:40.770 --> 00:19:41.353
AUDIENCE: Thanks.

00:19:41.353 --> 00:19:42.059
CHET HASSE: Hi.

00:19:42.059 --> 00:19:42.600
AUDIENCE: Hi.

00:19:42.600 --> 00:19:47.040
A quick question
about after you pur--

00:19:47.040 --> 00:19:50.480
not repurchase-- you
got acquired Crashlytics

00:19:50.480 --> 00:19:55.610
into Firebase, some
functionalities

00:19:55.610 --> 00:19:58.910
are in the Firebase side
is trying to catch up

00:19:58.910 --> 00:20:00.060
on the Crashlytics side.

00:20:00.060 --> 00:20:01.880
And they're trying to
bring themselves up

00:20:01.880 --> 00:20:04.010
to a feature parity.

00:20:04.010 --> 00:20:08.220
But I can no longer
search the crashes

00:20:08.220 --> 00:20:11.100
on Crashlytics or Firebase.

00:20:11.100 --> 00:20:12.320
Is that deliberate?

00:20:12.320 --> 00:20:15.230
CHET HASSE: Is there anybody
from Firebase or Crashlytics

00:20:15.230 --> 00:20:15.980
around?

00:20:15.980 --> 00:20:21.054
AUDIENCE: Or is that not part
of the tools offering anymore?

00:20:21.054 --> 00:20:24.250
CHET HASSE: Let me point out
that Google's a big company.

00:20:24.250 --> 00:20:26.417
We're not representative
of all the stuff

00:20:26.417 --> 00:20:27.750
that we're working on right now.

00:20:27.750 --> 00:20:28.860
I know some of the
people on the team

00:20:28.860 --> 00:20:30.330
and I also know that
they're not in the room.

00:20:30.330 --> 00:20:32.900
So I don't think we can actually
answer that question right now.

00:20:32.900 --> 00:20:34.940
If you follow up afterwards,
we can get back to you

00:20:34.940 --> 00:20:35.360
with an answer.

00:20:35.360 --> 00:20:35.750
AUDIENCE: Cool.

00:20:35.750 --> 00:20:36.541
CHET HASSE: Thanks.

00:20:36.541 --> 00:20:37.660
Hi.

00:20:37.660 --> 00:20:38.660
AUDIENCE: Hi, I'm Jason.

00:20:38.660 --> 00:20:41.390
I work at Hinge and
we've been 100% Kotlin

00:20:41.390 --> 00:20:43.910
for about two years now and
it's been dope and amazing.

00:20:43.910 --> 00:20:45.800
CHET HASSE: How did you convince
your executive management

00:20:45.800 --> 00:20:46.299
to do that?

00:20:46.299 --> 00:20:47.062
[LAUGHS]

00:20:47.062 --> 00:20:49.235
AUDIENCE: Actually,
Christina Lee and Ty Smith,

00:20:49.235 --> 00:20:52.160
their talks from Droidcon
2 and 1/2 years ago

00:20:52.160 --> 00:20:53.540
were the convincing factors.

00:20:53.540 --> 00:20:56.450
So that was great and
wonderful and amazing.

00:20:56.450 --> 00:20:59.510
I have been working
really, really

00:20:59.510 --> 00:21:03.950
hard at making the app
as good as I can, with

00:21:03.950 --> 00:21:09.100
respect to CI and test
coverage and unit tests.

00:21:09.100 --> 00:21:11.120
And something that's
been plaguing me

00:21:11.120 --> 00:21:17.090
for a very long time
is having code coverage

00:21:17.090 --> 00:21:20.960
and getting the reporters
to work correctly,

00:21:20.960 --> 00:21:23.990
with respect to Kotlin and
the 40 Gradle modules that I

00:21:23.990 --> 00:21:26.140
have to maintain.

00:21:26.140 --> 00:21:29.570
When I run code coverage
in Android Studio,

00:21:29.570 --> 00:21:32.230
by the default, Android
Studio Code coverage tool,

00:21:32.230 --> 00:21:33.510
it works great and amazing.

00:21:33.510 --> 00:21:35.350
And then when I
switch it to JaCoCo,

00:21:35.350 --> 00:21:39.810
it says there's
no coverage found.

00:21:39.810 --> 00:21:45.080
And essentially, I have this
very strange copy pasted from

00:21:45.080 --> 00:21:53.390
Stack Overflow scripts for
JaCoCo version 07927 blah that

00:21:53.390 --> 00:21:58.910
happens to work and does
happen to do correct reporting.

00:21:58.910 --> 00:22:04.580
But I feel like it's
not documented anywhere.

00:22:04.580 --> 00:22:09.570
And essentially, I'm
not sure where to go,

00:22:09.570 --> 00:22:12.930
or if I upgrade to JaCoCo
or Kotlin, at some point,

00:22:12.930 --> 00:22:14.160
I'm going to break this.

00:22:14.160 --> 00:22:18.450
And I do love Kotlin and
I do love Android Studio,

00:22:18.450 --> 00:22:20.370
in general.

00:22:20.370 --> 00:22:21.824
I just want to make this better.

00:22:21.824 --> 00:22:23.490
TOR NORBYE: Well, it
sounds like we just

00:22:23.490 --> 00:22:26.400
need to fix the JaCoCo
integration with our Kotlin

00:22:26.400 --> 00:22:27.207
Gradle plugin.

00:22:27.207 --> 00:22:29.040
CHET HASSE: Or integrate
that Stack Overflow

00:22:29.040 --> 00:22:30.040
post into the IDE.

00:22:30.040 --> 00:22:30.696
AUDIENCE: Yeah.

00:22:30.696 --> 00:22:31.688
[LAUGHS]

00:22:32.412 --> 00:22:34.620
TOR NORBYE: I'll make sure
to talk to the Gradle team

00:22:34.620 --> 00:22:35.803
and see what we can do.

00:22:35.803 --> 00:22:36.750
AUDIENCE: Thank you.

00:22:36.750 --> 00:22:38.291
AUDIENCE: Can we
follow up afterwards

00:22:38.291 --> 00:22:40.700
to get the bug report from you?

00:22:40.700 --> 00:22:42.990
I'm aware that early on,
there was some code coverage

00:22:42.990 --> 00:22:44.070
issues with Kotlin.

00:22:44.070 --> 00:22:47.430
But we fixed a bunch of those
recently, but apparently,

00:22:47.430 --> 00:22:49.415
not all of them.

00:22:49.415 --> 00:22:50.040
AUDIENCE: Yeah.

00:22:50.040 --> 00:22:51.498
Some of them we
definitely did fix.

00:22:51.498 --> 00:22:53.010
There was one really
weird bug where

00:22:53.010 --> 00:22:57.510
I could only run unit tests
on a single file at the time.

00:22:57.510 --> 00:22:59.350
I couldn't run it
on an entire module.

00:22:59.350 --> 00:23:00.950
CHET HASSE: If we could
follow up with you afterwards,

00:23:00.950 --> 00:23:02.116
then we can get the details.

00:23:02.116 --> 00:23:02.890
Thanks.

00:23:02.890 --> 00:23:03.929
Hi.

00:23:03.929 --> 00:23:04.470
AUDIENCE: Hi.

00:23:04.470 --> 00:23:08.490
What is the reason behind
the JVM-based instrumentation

00:23:08.490 --> 00:23:10.185
tests in Roboelectric 4.0?

00:23:16.380 --> 00:23:18.415
AUDIENCE: JVM
instrumentation tests.

00:23:18.415 --> 00:23:19.040
AUDIENCE: Yeah.

00:23:19.040 --> 00:23:21.260
So now, you can
run Android tests.

00:23:21.260 --> 00:23:24.440
Instead of on device,
you can write it on JVM

00:23:24.440 --> 00:23:26.472
instead with the
Roboelectric 4.0.

00:23:26.472 --> 00:23:27.680
AUDIENCE: Yeah, that's right.

00:23:27.680 --> 00:23:30.260
So in Android, there's
two kinds of tests.

00:23:30.260 --> 00:23:33.260
There's local JVM
tests, and they're

00:23:33.260 --> 00:23:36.010
in your Test folder, and
then instrumentation test,

00:23:36.010 --> 00:23:39.260
which are in your
Android Test folder.

00:23:39.260 --> 00:23:43.310
You can use [INAUDIBLE] or
you can use Roboelectric

00:23:43.310 --> 00:23:44.780
in those local tests.

00:23:44.780 --> 00:23:46.460
What we're doing
with Android X test

00:23:46.460 --> 00:23:50.060
is bringing a unified testing
API into Android X test,

00:23:50.060 --> 00:23:55.340
because each mode of testing
has different APIs and styles.

00:23:55.340 --> 00:23:56.910
It's very confusing
for developers.

00:23:56.910 --> 00:23:59.300
So in terms of
Roboelectric, it just

00:23:59.300 --> 00:24:01.790
basically implements
the same APIs

00:24:01.790 --> 00:24:03.360
that instrumentation implements.

00:24:03.360 --> 00:24:08.120
So you can write the same
tests in both local unit

00:24:08.120 --> 00:24:10.170
tests and instrumentation.

00:24:10.170 --> 00:24:12.980
AUDIENCE: So are you
merging the Android test

00:24:12.980 --> 00:24:18.204
folder and the normal unit
test folder in Android Studio?

00:24:18.204 --> 00:24:20.120
AUDIENCE: Well, I don't
think there's actually

00:24:20.120 --> 00:24:21.930
been any decision yet on that.

00:24:21.930 --> 00:24:26.290
But in terms of right now, you
can use the same APIs in both.

00:24:26.290 --> 00:24:29.460
We've got another talk
today on Project Nitrogen,

00:24:29.460 --> 00:24:32.000
so if you think about the
tests or what you run,

00:24:32.000 --> 00:24:34.750
Project Nitrogen sort of
is the how and the where.

00:24:34.750 --> 00:24:37.220
So I'd encourage you to
check that talk out today.

00:24:37.220 --> 00:24:40.212
It's at 4:45, I believe.

00:24:40.212 --> 00:24:43.620
AUDIENCE: OK And will
you provide code coverage

00:24:43.620 --> 00:24:46.626
for both unit tests
and functional tests?

00:24:46.626 --> 00:24:48.000
AUDIENCE: We would
hope so, yeah.

00:24:48.000 --> 00:24:48.541
AUDIENCE: OK.

00:24:48.541 --> 00:24:49.259
Thank you.

00:24:49.259 --> 00:24:50.050
CHET HASSE: Thanks.

00:24:50.050 --> 00:24:50.850
Hi.

00:24:50.850 --> 00:24:51.391
AUDIENCE: Hi.

00:24:51.391 --> 00:24:54.810
I'm Colin William from
Minneapolis, Mozilla.

00:24:54.810 --> 00:24:55.740
I have a question.

00:24:55.740 --> 00:24:58.140
Over the past eight years
or so of writing apps,

00:24:58.140 --> 00:25:01.980
the one API that's been the
most bizarre hacks for something

00:25:01.980 --> 00:25:05.160
that's really basic is
working with a soft keyboard.

00:25:05.160 --> 00:25:08.214
And things like just
opening the keyboard,

00:25:08.214 --> 00:25:09.630
listening to the
state, saying you

00:25:09.630 --> 00:25:12.266
want to focus particular
element reliably,

00:25:12.266 --> 00:25:14.970
and shifting the
window on View so

00:25:14.970 --> 00:25:18.480
that it focuses the elements
you want to write into or alter.

00:25:18.480 --> 00:25:21.510
All those things, they
break up certain layouts.

00:25:21.510 --> 00:25:27.655
Are we considering a rewrite
of how keyboards functions?

00:25:27.655 --> 00:25:29.060
AUDIENCE: Yeah.

00:25:29.060 --> 00:25:29.610
Yes we are.

00:25:29.610 --> 00:25:30.690
DIANNE HACKBORN: Do
you want to answer it?

00:25:30.690 --> 00:25:33.490
CHET HASSE: Many people want
to answer this question.

00:25:33.490 --> 00:25:36.110
AUDIENCE: Dianne,
you want to go first?

00:25:36.110 --> 00:25:39.032
DIANNE HACKBORN: I'll let others
go, if you have something.

00:25:39.032 --> 00:25:41.497
CHET HASSE: Many people don't
want to answer this question.

00:25:41.497 --> 00:25:43.080
AUDIENCE: It's
something we're looking

00:25:43.080 --> 00:25:45.320
into in official release.

00:25:45.320 --> 00:25:46.320
AUDIENCE: Yeah, exactly.

00:25:46.320 --> 00:25:49.825
So I mean, we're well
aware of the shortcomings

00:25:49.825 --> 00:25:50.700
that we've got there.

00:25:50.700 --> 00:25:52.890
We definitely want to enable
some richer integration

00:25:52.890 --> 00:25:57.060
with letting apps feel like the
keyboard is a part of your app

00:25:57.060 --> 00:25:58.980
experience, more so
than the bolt-on.

00:25:58.980 --> 00:26:00.872
So we're actively looking at it.

00:26:00.872 --> 00:26:02.580
CHET HASSE: It's pretty
constant feedback

00:26:02.580 --> 00:26:03.870
over the last few years.

00:26:03.870 --> 00:26:07.867
ROMAIN GUY: Everybody's being
very polite about these APIs.

00:26:07.867 --> 00:26:08.700
AUDIENCE: Thank you.

00:26:08.700 --> 00:26:09.950
CHET HASSE: All right, thanks.

00:26:09.950 --> 00:26:10.969
Hi.

00:26:10.969 --> 00:26:11.510
AUDIENCE: Hi.

00:26:11.510 --> 00:26:13.070
I'm Mike.

00:26:13.070 --> 00:26:15.370
So I love Android Studio
and I love IntelliJ.

00:26:15.370 --> 00:26:16.870
I was lucky enough
to actually start

00:26:16.870 --> 00:26:18.970
working on IntelliJ
as my first IT,

00:26:18.970 --> 00:26:20.740
rather than having
to use Eclipse.

00:26:20.740 --> 00:26:24.520
But unfortunately, sometimes
it's a little too heavy.

00:26:24.520 --> 00:26:26.290
If we have emulators
up, we have Studio,

00:26:26.290 --> 00:26:28.790
we have the browser for
doing something like Stetho.

00:26:28.790 --> 00:26:31.900
16 gigs is now
something that is not

00:26:31.900 --> 00:26:33.772
even optimal to do
Android development with.

00:26:33.772 --> 00:26:35.230
And my manager
looks at me like I'm

00:26:35.230 --> 00:26:38.234
crazy when I tell him
that a 16-gig laptop that

00:26:38.234 --> 00:26:40.150
is, basically, top of
the line isn't something

00:26:40.150 --> 00:26:43.240
that I want to be coding
on on a daily basis.

00:26:43.240 --> 00:26:45.550
So I know we can use Vim.

00:26:45.550 --> 00:26:46.300
I can't use Vim.

00:26:46.300 --> 00:26:47.780
Maybe other people can use Vim.

00:26:47.780 --> 00:26:49.000
We have Sublime.

00:26:49.000 --> 00:26:51.760
Sublime, also,
doesn't really have

00:26:51.760 --> 00:26:54.430
some of the nice
autocomplete, or doesn't

00:26:54.430 --> 00:26:56.710
have some of the code
navigation that I really

00:26:56.710 --> 00:26:59.170
got used to using
IntelliJ all these years.

00:26:59.170 --> 00:27:00.880
So I kind of want to
ask, has there ever

00:27:00.880 --> 00:27:03.880
been something like an
Android Studio Light,

00:27:03.880 --> 00:27:06.640
or some kind of plugins that
anyone has thought about doing?

00:27:06.640 --> 00:27:10.040
Because I used to use Visual
Studio for everything.

00:27:10.040 --> 00:27:12.760
And then VS Code came
out and you can now

00:27:12.760 --> 00:27:14.590
do a lot of that same
development, just

00:27:14.590 --> 00:27:15.730
on smaller machines.

00:27:15.730 --> 00:27:18.146
And I would love to just bring
my Pixelbook here and still

00:27:18.146 --> 00:27:19.720
be able to do
development for work

00:27:19.720 --> 00:27:21.730
and be able to do
it in not in Studio.

00:27:21.730 --> 00:27:23.890
I kind of want to throw
it out, has there ever

00:27:23.890 --> 00:27:25.390
been any thought
about doing tooling

00:27:25.390 --> 00:27:27.860
that would work on
things other than just

00:27:27.860 --> 00:27:31.240
the IntelliJ platform?

00:27:31.240 --> 00:27:33.140
TOR NORBYE: Um.

00:27:33.140 --> 00:27:33.640
[LAUGHS]

00:27:35.549 --> 00:27:36.590
AUDIENCE: Does that help?

00:27:36.590 --> 00:27:38.780
TOR NORBYE: I mean,
we're not starting there.

00:27:38.780 --> 00:27:40.760
It's very tempting to
start with an editor

00:27:40.760 --> 00:27:42.218
and try to build
it up, but there's

00:27:42.218 --> 00:27:45.860
so much magic in IntelliJ that
they're very hard to replicate.

00:27:45.860 --> 00:27:47.540
What we're doing with
Project Marble is

00:27:47.540 --> 00:27:51.620
to try to look at optimizing a
lot of inefficiencies, right?

00:27:51.620 --> 00:27:54.710
A lot of people tell me that
they have a 16-gig machine

00:27:54.710 --> 00:27:57.392
and Studio runs slowly on
it, but they weren't aware--

00:27:57.392 --> 00:27:59.100
and this is not their
fault, by the way--

00:27:59.100 --> 00:28:01.266
but they weren't aware that
Studio is capped to use,

00:28:01.266 --> 00:28:03.410
at most, 1.2 gigs
out of those 16 gigs,

00:28:03.410 --> 00:28:06.017
because there's a hard setting
of max heat that Studio gets.

00:28:06.017 --> 00:28:07.850
And the only way to
make it use more of that

00:28:07.850 --> 00:28:10.130
is to actually go and
edit the VM config file.

00:28:10.130 --> 00:28:12.296
AUDIENCE: I think if we
don't-- sorry to interrupt--

00:28:12.296 --> 00:28:15.440
but I think if we don't edit
it, we're unable to use Android

00:28:15.440 --> 00:28:16.340
Studio.

00:28:16.340 --> 00:28:18.110
At least that's
my issue with it.

00:28:18.110 --> 00:28:20.390
I don't want to edit it
and give it 4 or 8 gigs,

00:28:20.390 --> 00:28:22.160
but it's not a
usable experience.

00:28:22.160 --> 00:28:24.530
We get pop-ups saying that
we have to give it more RAM.

00:28:24.530 --> 00:28:24.760
TOR NORBYE: Yeah.

00:28:24.760 --> 00:28:25.820
So one of the
things we want to do

00:28:25.820 --> 00:28:28.278
is to try to autoconfigure that
so you don't have to do it.

00:28:28.278 --> 00:28:32.294
We also want to try to reduce
the obvious inefficiencies

00:28:32.294 --> 00:28:33.710
in some of the
things we're doing.

00:28:33.710 --> 00:28:35.600
We're also looking at
disabling some plugins,

00:28:35.600 --> 00:28:36.890
sort of on demand,
because some of them

00:28:36.890 --> 00:28:39.570
are pretty resource-intensive
that maybe you aren't using.

00:28:39.570 --> 00:28:44.660
So I think our first plan is
to spend the next few releases

00:28:44.660 --> 00:28:46.980
just really trying to optimize
things to work better,

00:28:46.980 --> 00:28:51.197
as opposed to starting
a brand new tool.

00:28:51.197 --> 00:28:52.280
CHET HASSE: Anything else?

00:28:52.280 --> 00:28:52.939
Good?

00:28:52.939 --> 00:28:54.230
AUDIENCE: All right, thank you.

00:28:54.230 --> 00:28:55.146
CHET HASSE: Thank you.

00:28:55.146 --> 00:28:55.949
Hi.

00:28:55.949 --> 00:28:56.490
AUDIENCE: Hi.

00:28:56.490 --> 00:28:58.175
I'm [? Swabnim ?]
from CBS Interactive.

00:28:58.175 --> 00:29:01.460
So I have a question regarding
the data mining library.

00:29:01.460 --> 00:29:05.600
So I kind of have
mixed opinion regarding

00:29:05.600 --> 00:29:07.340
using the data mining library.

00:29:07.340 --> 00:29:09.530
So I just want to
ask you, technically,

00:29:09.530 --> 00:29:13.310
is it efficient, or
anything, then, let's say,

00:29:13.310 --> 00:29:17.400
using Kotlin X [INAUDIBLE]?

00:29:17.400 --> 00:29:22.430
Or does data mining
have efficient benefits

00:29:22.430 --> 00:29:24.490
or something?

00:29:24.490 --> 00:29:29.180
Personally, I don't like
putting the code inside XML.

00:29:29.180 --> 00:29:29.970
I just prefer--

00:29:29.970 --> 00:29:32.240
YIGIT BOYAR: But don't put
the code inside the XML.

00:29:32.240 --> 00:29:33.940
AUDIENCE: But with
data mining, you--

00:29:33.940 --> 00:29:37.250
YIGIT BOYAR: Data mining doesn't
require you to put code in XML.

00:29:37.250 --> 00:29:39.980
Actually, Jose and I give a
talk in Droidcon two weeks ago.

00:29:39.980 --> 00:29:41.340
You can check that one out.

00:29:41.340 --> 00:29:44.900
There's a misconception that
just because you could do it,

00:29:44.900 --> 00:29:45.615
you should do it.

00:29:45.615 --> 00:29:47.990
You don't put all of your code
into your activity either,

00:29:47.990 --> 00:29:48.490
right?

00:29:48.490 --> 00:29:50.140
It will divide your app.

00:29:50.140 --> 00:29:52.760
So same things are
valid in data mining.

00:29:52.760 --> 00:29:55.230
Just because you can
write complex expression

00:29:55.230 --> 00:29:56.780
doesn't mean you should write.

00:29:56.780 --> 00:29:59.600
In terms of efficiency,
yes, actually, data mining

00:29:59.600 --> 00:30:02.090
tries to generate
more efficient code

00:30:02.090 --> 00:30:04.260
that you would normally write.

00:30:04.260 --> 00:30:06.290
But is it a decision point?

00:30:06.290 --> 00:30:06.960
Definitely not.

00:30:06.960 --> 00:30:08.460
It's not going to
make a big change.

00:30:08.460 --> 00:30:11.920
You probably have a
bigger fish to fry.

00:30:11.920 --> 00:30:14.420
But I personally like it.

00:30:14.420 --> 00:30:17.510
I wrote on it and I used to use
it in other platforms before.

00:30:17.510 --> 00:30:20.270
I do like the declarative
nature of data mining

00:30:20.270 --> 00:30:22.550
that makes it like you just
said, put this thing here

00:30:22.550 --> 00:30:25.030
and it eventually
shows up there.

00:30:25.030 --> 00:30:26.960
But it's kind of
a personal choice.

00:30:26.960 --> 00:30:27.980
We have these things.

00:30:27.980 --> 00:30:31.100
They are not rules,
they are opinions,

00:30:31.100 --> 00:30:33.340
and we don't always share
the same opinion, either.

00:30:33.340 --> 00:30:35.110
If you like it, use it.

00:30:35.110 --> 00:30:35.700
That's great.

00:30:35.700 --> 00:30:37.324
And if you don't like
it, it's like you

00:30:37.324 --> 00:30:38.460
don't have to use anything.

00:30:38.460 --> 00:30:40.876
AUDIENCE: [INAUDIBLE] support
[INAUDIBLE] just [INAUDIBLE]

00:30:40.876 --> 00:30:44.840
not that really helps with
the efficiency or anything.

00:30:44.840 --> 00:30:45.590
YIGIT BOYAR: Yeah.

00:30:45.590 --> 00:30:50.150
I mean, it is
efficient, but it's not

00:30:50.150 --> 00:30:52.640
going to make a big change
for your application.

00:30:52.640 --> 00:30:53.810
That's the problem.

00:30:53.810 --> 00:30:56.270
Yes, we generate,
try to generate,

00:30:56.270 --> 00:30:59.315
better code than you would
normally bother with writing.

00:30:59.315 --> 00:31:01.070
But is it that important?

00:31:01.070 --> 00:31:02.050
I don't think so.

00:31:02.050 --> 00:31:02.930
AUDIENCE: OK.

00:31:02.930 --> 00:31:03.590
Thank you.

00:31:03.590 --> 00:31:04.381
CHET HASSE: Thanks.

00:31:04.381 --> 00:31:05.020
Hi.

00:31:05.020 --> 00:31:06.912
AUDIENCE: Bunch of
more tooling questions.

00:31:06.912 --> 00:31:08.120
Let's start with an easy one.

00:31:08.120 --> 00:31:11.580
Can we push for J Unit 5
support in integrated plugin?

00:31:11.580 --> 00:31:14.240
Because right now, you have to
use third-party plugin written

00:31:14.240 --> 00:31:17.060
by some guy, which every
integrated plugin obviously

00:31:17.060 --> 00:31:18.680
breaks, and all that.

00:31:18.680 --> 00:31:22.089
And Gradle 4.6 made
the J Unit 5 work out

00:31:22.089 --> 00:31:23.130
of the box, and all that.

00:31:23.130 --> 00:31:24.080
Can we do it?

00:31:24.080 --> 00:31:25.710
TOR NORBYE: That sounds like
a very reasonable request.

00:31:25.710 --> 00:31:26.400
Yeah.

00:31:26.400 --> 00:31:27.410
AUDIENCE: All right.

00:31:27.410 --> 00:31:29.168
Now to the harder ones.

00:31:29.168 --> 00:31:30.164
[LAUGHS]

00:31:32.086 --> 00:31:33.460
TOR NORBYE: You're
warming me up.

00:31:33.460 --> 00:31:34.250
AUDIENCE: Yeah.

00:31:34.250 --> 00:31:36.620
There was a question
about Instant Run, right?

00:31:36.620 --> 00:31:40.175
Can we please make it a
command line tool, rather than

00:31:40.175 --> 00:31:41.880
an integration into
Android studio?

00:31:41.880 --> 00:31:44.720
Because right now, three
major build systems--

00:31:44.720 --> 00:31:46.520
Bazel, Bulk, Gradle--

00:31:46.520 --> 00:31:48.170
Bazel and Bulk
has their own ways

00:31:48.170 --> 00:31:50.460
of incrementally [INAUDIBLE].

00:31:50.460 --> 00:31:52.910
Gradle hasn't one,
Android Studio has one.

00:31:52.910 --> 00:31:56.324
And that's like mismatch.

00:31:56.324 --> 00:31:58.240
TOR NORBYE: Yeah so in
the new implementation,

00:31:58.240 --> 00:32:01.390
we're not hooking into the
Gradle bite code transformation

00:32:01.390 --> 00:32:02.910
pipeline.

00:32:02.910 --> 00:32:05.920
It's done at runtime,
a bit like the profiler

00:32:05.920 --> 00:32:06.910
does instrumentation.

00:32:06.910 --> 00:32:08.540
So it should be easier.

00:32:08.540 --> 00:32:10.540
But again, it's not
something we're deliberately

00:32:10.540 --> 00:32:15.180
designing for, but we're
trying not to do that.

00:32:15.180 --> 00:32:17.530
AUDIENCE: All right.

00:32:17.530 --> 00:32:18.610
Harder one now.

00:32:18.610 --> 00:32:24.070
So let me put it that way.

00:32:24.070 --> 00:32:25.855
Who knows how to
contribute to AOSP?

00:32:28.405 --> 00:32:32.910
Well, who is not
Googler, those people.

00:32:32.910 --> 00:32:35.700
ROMAIN GUY: Can I quit just
to answer the question?

00:32:35.700 --> 00:32:37.240
AUDIENCE: Yeah.

00:32:37.240 --> 00:32:41.880
So as you can figure,
particularly with Android KTX

00:32:41.880 --> 00:32:44.280
Project, there was
an announcement

00:32:44.280 --> 00:32:47.370
that it was moved
from GitHub to AOSP.

00:32:47.370 --> 00:32:50.779
For some reason people were
happy, but that's not true.

00:32:50.779 --> 00:32:52.320
It's very hard to
contribute to AOSP.

00:32:52.320 --> 00:32:53.780
It's really hard to pull it.

00:32:53.780 --> 00:32:54.863
ROMAIN GUY: I'm not happy.

00:32:54.863 --> 00:32:55.760
I like GitHub.

00:32:55.760 --> 00:32:56.760
AUDIENCE: Yeah, yeah.

00:32:56.760 --> 00:32:59.750
And a lot of projects from
Google are already on GitHub.

00:32:59.750 --> 00:33:02.690
Can we, as a community,
ask for this push for some

00:33:02.690 --> 00:33:03.690
of the libraries, maybe?

00:33:03.690 --> 00:33:04.796
ROMAIN GUY: Please do.

00:33:04.796 --> 00:33:05.670
AUDIENCE: I'm asking.

00:33:05.670 --> 00:33:09.070
YIGIT BOYAR: Actually, like
other Android X migration,

00:33:09.070 --> 00:33:11.660
when we're internal
discussing moving to a speed,

00:33:11.660 --> 00:33:14.530
sort of like internally
developing and syncing.

00:33:14.530 --> 00:33:15.740
I was a big proponent.

00:33:15.740 --> 00:33:18.660
And I said, look, if you put
this on AOSP, plenty of people

00:33:18.660 --> 00:33:19.890
will contribute.

00:33:19.890 --> 00:33:21.750
No one [? sends the ?] CL.

00:33:21.750 --> 00:33:24.520
So we understand
there's still a barrier,

00:33:24.520 --> 00:33:26.475
but we simplified
it significantly.

00:33:26.475 --> 00:33:30.270
And we understand there's
[INAUDIBLE],, Repo, tools people

00:33:30.270 --> 00:33:32.410
are not very familiar with.

00:33:32.410 --> 00:33:35.220
But we also have an
internal integration,

00:33:35.220 --> 00:33:38.190
like with the next
version of Android.

00:33:38.190 --> 00:33:43.320
We need to stay in the
same BL3 to make this easy.

00:33:43.320 --> 00:33:44.070
Oh, there you are.

00:33:44.070 --> 00:33:44.800
That guy can answer.

00:33:44.800 --> 00:33:47.133
AUDIENCE: Hi. [? Allen ?]
[? Everett, ?] TLM for Android

00:33:47.133 --> 00:33:54.030
X. We checked out the Android
X Repo from AOSP onto the two

00:33:54.030 --> 00:33:56.880
machines that we have, over
at the Android X booth,

00:33:56.880 --> 00:33:58.760
in about five minutes.

00:33:58.760 --> 00:34:01.532
And we're up and running
to upload commence.

00:34:01.532 --> 00:34:03.240
CHET HASSE: So if you
want to contribute,

00:34:03.240 --> 00:34:05.718
just go into the next
room and write some code.

00:34:05.718 --> 00:34:06.875
AUDIENCE: Yeah.

00:34:06.875 --> 00:34:07.500
AUDIENCE: Cool.

00:34:07.500 --> 00:34:09.800
Sounds scalable.

00:34:09.800 --> 00:34:10.699
[LAUGHS]

00:34:15.937 --> 00:34:17.520
CHET HASSE: There's
a difference, too.

00:34:17.520 --> 00:34:20.219
When you say AOSP, when we
think of AOSP contributions

00:34:20.219 --> 00:34:21.810
in platform, yes,
that is a big deal.

00:34:21.810 --> 00:34:23.219
And we don't expect
a lot of people

00:34:23.219 --> 00:34:25.094
are going to absorb the
entire platform to be

00:34:25.094 --> 00:34:26.909
able to contribute,
especially since we

00:34:26.909 --> 00:34:29.200
don't release the source code
until the release is out.

00:34:29.200 --> 00:34:31.260
But the smaller
libraries, like Android X,

00:34:31.260 --> 00:34:33.600
we're actually
developing an AOSP.

00:34:33.600 --> 00:34:35.070
We would like
contributions, and we

00:34:35.070 --> 00:34:37.020
hope that that's low
weight enough for people.

00:34:37.020 --> 00:34:38.310
AUDIENCE: We would
love to contribute.

00:34:38.310 --> 00:34:39.429
CHET HASSE: Please do.

00:34:39.429 --> 00:34:41.820
So get together with
[? Allen ?] and figure out

00:34:41.820 --> 00:34:44.400
what the disconnects are
on being able to do that,

00:34:44.400 --> 00:34:47.067
because the intention was to
make it much more possible.

00:34:47.067 --> 00:34:49.650
AUDIENCE: Some of the projects,
we're able to succeed at that.

00:34:49.650 --> 00:34:51.060
Like Dagger, for example.

00:34:51.060 --> 00:34:54.300
And you have tooling to sync
it back to your MonoRepos.

00:34:56.930 --> 00:35:01.200
I think AOSP is not the
part of MonoRepo Google,

00:35:01.200 --> 00:35:04.077
but still is a MonoRepo, so you
should be able to sync it back.

00:35:04.077 --> 00:35:05.910
STEPHANIE CUTHBERTSON:
Can I ask a question?

00:35:05.910 --> 00:35:06.831
CHET HASSE: Yes.

00:35:06.831 --> 00:35:09.330
STEPHANIE CUTHBERTSON: So we
could make contributing to AOSP

00:35:09.330 --> 00:35:10.050
easier.

00:35:10.050 --> 00:35:11.880
We could also consider GitHub.

00:35:11.880 --> 00:35:14.356
I'm curious what you all
would like to see us do.

00:35:14.356 --> 00:35:16.230
How many people would
be interested in seeing

00:35:16.230 --> 00:35:18.990
us put Android X on GitHub?

00:35:18.990 --> 00:35:20.230
Wow.

00:35:20.230 --> 00:35:20.730
OK.

00:35:20.730 --> 00:35:25.650
How many would like to see
us just make AOSP easier?

00:35:25.650 --> 00:35:28.030
AUDIENCE: You can't
make [INAUDIBLE] easier.

00:35:28.030 --> 00:35:28.640
STEPHANIE CUTHBERTSON:
OK, thank you.

00:35:28.640 --> 00:35:29.630
That was very helpful.

00:35:29.630 --> 00:35:30.350
AUDIENCE: Thanks.

00:35:30.350 --> 00:35:31.141
CHET HASSE: Thanks.

00:35:31.141 --> 00:35:31.730
Hi.

00:35:31.730 --> 00:35:32.271
AUDIENCE: Hi.

00:35:32.271 --> 00:35:35.945
So I work at a company that does
smart connected devices, which

00:35:35.945 --> 00:35:38.570
means that I have had the joy of
interacting with the Bluetooth

00:35:38.570 --> 00:35:40.451
API.

00:35:40.451 --> 00:35:42.404
I also implemented
barcode scanning recently

00:35:42.404 --> 00:35:44.570
in the app, which means I
had the joy of interacting

00:35:44.570 --> 00:35:45.440
with the camera API.

00:35:48.420 --> 00:35:50.420
ROMAIN GUY: Have you
considered a different job?

00:35:53.144 --> 00:35:55.616
AUDIENCE: Only every day.

00:35:55.616 --> 00:35:57.665
ANWAR GHULOUM: He's
regretting his life choices.

00:35:57.665 --> 00:35:59.060
AUDIENCE: So many of them.

00:35:59.060 --> 00:36:02.930
So my question is
with the GSIs, there

00:36:02.930 --> 00:36:06.650
was this notion of pulling
things away from the OEMs

00:36:06.650 --> 00:36:10.700
and putting them in
Google-controllable land.

00:36:10.700 --> 00:36:15.520
And there's lore from
many, many years ago of,

00:36:15.520 --> 00:36:17.139
oh, you only run
Bluetooth operations

00:36:17.139 --> 00:36:18.680
on Samsung phones
on the main thread.

00:36:18.680 --> 00:36:21.020
If you don't, Samsung
phones just goop on you.

00:36:21.020 --> 00:36:24.500
Or like, modern phones
don't support Camera2 APIs,

00:36:24.500 --> 00:36:27.950
even though they were made
this side of the century.

00:36:27.950 --> 00:36:30.290
Is there an effort, or
can there be an effort,

00:36:30.290 --> 00:36:33.620
to move all of this
junk that happens

00:36:33.620 --> 00:36:38.450
on the cameras and Bluetooth
into Google-controllable land

00:36:38.450 --> 00:36:40.966
so that it's not OEM-dependent?

00:36:40.966 --> 00:36:43.340
ANWAR GHULOUM: So this might
be a little forward-looking,

00:36:43.340 --> 00:36:45.506
but there is an effort
around cameras, specifically,

00:36:45.506 --> 00:36:48.950
to try to have a higher-level
API that the chips is part

00:36:48.950 --> 00:36:53.869
of the X libraries that smooths
those differences between OEMs.

00:36:53.869 --> 00:36:55.160
AUDIENCE: What about Bluetooth?

00:36:55.160 --> 00:36:57.275
Because that's
almost even worse.

00:36:57.275 --> 00:36:59.400
ANWAR GHULOUM: Yeah, there's
probably a need there.

00:36:59.400 --> 00:37:01.360
In fact, we suggest a lot of--

00:37:01.360 --> 00:37:04.070
if you can use it, because
it has a limited API,

00:37:04.070 --> 00:37:06.240
that you use the Nearby
APIs because they

00:37:06.240 --> 00:37:08.615
hide a lot of the messiness
of the underlying application

00:37:08.615 --> 00:37:10.940
that we actually check
the quality of those APIs

00:37:10.940 --> 00:37:13.100
on different devices.

00:37:13.100 --> 00:37:16.130
If not, we can certainly take
it back to the Bluetooth team

00:37:16.130 --> 00:37:17.210
and share your pain.

00:37:17.210 --> 00:37:19.730
So let us know.

00:37:19.730 --> 00:37:24.250
AUDIENCE: But the nearby APIs
don't give you the ability

00:37:24.250 --> 00:37:26.290
to assemble the two
packets and actually

00:37:26.290 --> 00:37:28.270
communicate with a Smart
Lock that I'm trying

00:37:28.270 --> 00:37:32.320
to unlock on someone's door.

00:37:32.320 --> 00:37:34.120
That's not what those
APIs are meant for.

00:37:34.120 --> 00:37:36.225
But I don't want to have
to remember that, oh,

00:37:36.225 --> 00:37:37.600
if I'm on a Samsung
phone, I have

00:37:37.600 --> 00:37:38.590
to switch to the main thread.

00:37:38.590 --> 00:37:41.020
All other devices, I don't
have to switch to main thread,

00:37:41.020 --> 00:37:43.270
except for LG, which
just doesn't work,

00:37:43.270 --> 00:37:45.674
all this nonsense.

00:37:45.674 --> 00:37:47.590
This should be something
that Google controls.

00:37:47.590 --> 00:37:51.430
Why is it something that the
OEMs get to decide on my life?

00:37:54.290 --> 00:37:56.040
ANWAR GHULOUM: I'm
going to take this one.

00:37:56.040 --> 00:37:57.456
I'm not responsible
for Bluetooth.

00:37:57.456 --> 00:38:00.670
But it is pretty
complicated, right?

00:38:00.670 --> 00:38:03.690
Bluetooth's standard
isn't totally complete,

00:38:03.690 --> 00:38:07.180
or unambiguous about how
certain devices should behave.

00:38:07.180 --> 00:38:09.300
So you'll see a
lot of variability

00:38:09.300 --> 00:38:10.154
between OEM devices.

00:38:10.154 --> 00:38:11.820
Now, some of the stuff
you're describing

00:38:11.820 --> 00:38:15.429
seems kind of pointless to have.

00:38:15.429 --> 00:38:17.220
So I can take it back
to the Bluetooth team

00:38:17.220 --> 00:38:17.880
and talk to them about it.

00:38:17.880 --> 00:38:19.660
One of things we've been doing
over the last couple of years

00:38:19.660 --> 00:38:22.260
is really trying to improve
Bluetooth implementation

00:38:22.260 --> 00:38:24.690
across the ecosystem, including
a rewrite of the Bluetooth

00:38:24.690 --> 00:38:27.990
stack, working with our C
vendors, and stuff like that.

00:38:27.990 --> 00:38:30.357
All those platitudes
aside, it sounds

00:38:30.357 --> 00:38:32.190
like there is this gap
on the developer side

00:38:32.190 --> 00:38:34.439
that we need to address, and
I'm happy to take it back

00:38:34.439 --> 00:38:35.040
to the team.

00:38:35.040 --> 00:38:37.373
I don't know of anything that
they're doing specifically

00:38:37.373 --> 00:38:39.291
to address this, like I
do on the camera side.

00:38:39.291 --> 00:38:41.040
AUDIENCE: Speaking of
platitude, Bluetooth

00:38:41.040 --> 00:38:43.846
has gotten way better
since Android 7.0,

00:38:43.846 --> 00:38:44.970
so thank you guys for that.

00:38:44.970 --> 00:38:45.330
ANWAR GHULOUM: Cool.

00:38:45.330 --> 00:38:46.740
CHET HASSE: It's getting
better, at least.

00:38:46.740 --> 00:38:48.780
Yeah, if you can follow up
afterwards with more details,

00:38:48.780 --> 00:38:49.620
that'd be awesome.

00:38:49.620 --> 00:38:50.850
We are running out of time.

00:38:50.850 --> 00:38:52.440
I'm sorry for all the people
who've been standing there

00:38:52.440 --> 00:38:53.050
for a while.

00:38:53.050 --> 00:38:54.670
If you can ask really
quick questions,

00:38:54.670 --> 00:38:55.890
we'll try to get through
as many as we can

00:38:55.890 --> 00:38:56.580
before they shut down.

00:38:56.580 --> 00:38:57.990
STEPHANIE CUTHBERTSON: And Chet,
can I ask one question, too?

00:38:57.990 --> 00:38:59.130
CHET HASSE: Yes, please.

00:38:59.130 --> 00:39:01.110
STEPHANIE CUTHBERTSON:
You can take them first.

00:39:01.110 --> 00:39:02.070
CHET HASSE: I can what?

00:39:02.070 --> 00:39:02.730
STEPHANIE CUTHBERTSON:
They can go first.

00:39:02.730 --> 00:39:03.229
That's OK.

00:39:06.520 --> 00:39:07.990
ROMAIN GUY: Your turn.

00:39:07.990 --> 00:39:11.170
AUDIENCE: Thank you for this
great event and all the support

00:39:11.170 --> 00:39:12.320
on the various forums.

00:39:12.320 --> 00:39:14.470
I'm showing my gratitude
first because I

00:39:14.470 --> 00:39:18.240
have a complaint slash
request for the data mining.

00:39:18.240 --> 00:39:22.720
So most of time on Android
Studio, it works fine.

00:39:22.720 --> 00:39:24.970
But sometime, even though
I refer to, let's say,

00:39:24.970 --> 00:39:28.132
variable name, it doesn't
pick up in XML file.

00:39:28.132 --> 00:39:28.840
TOR NORBYE: Yeah.

00:39:28.840 --> 00:39:30.506
So we are specifically
trying to address

00:39:30.506 --> 00:39:31.990
this with Project Marble.

00:39:31.990 --> 00:39:33.810
AUDIENCE: Second thing.

00:39:33.810 --> 00:39:37.400
The classes we generate
are in one package.

00:39:37.400 --> 00:39:40.600
So what happens is all
the internet classes,

00:39:40.600 --> 00:39:43.860
let's say view model or
inside support classes,

00:39:43.860 --> 00:39:46.000
I have to make them public
because they are not

00:39:46.000 --> 00:39:49.160
accessible in the XML files or
in the data mining generated

00:39:49.160 --> 00:39:49.750
classes.

00:39:49.750 --> 00:39:52.360
YIGIT BOYAR: No, actually,
when you have a layout file,

00:39:52.360 --> 00:39:53.810
you can use the class name.

00:39:53.810 --> 00:39:55.240
So if you specify
the class name,

00:39:55.240 --> 00:39:57.310
it will change the layout file.

00:39:57.310 --> 00:39:59.710
The binding will
have that class name

00:39:59.710 --> 00:40:01.440
with the package you provided.

00:40:01.440 --> 00:40:03.900
AUDIENCE: But the data
mining generated class,

00:40:03.900 --> 00:40:05.675
they are not package-specific.

00:40:05.675 --> 00:40:07.117
They are not in one place.

00:40:07.117 --> 00:40:08.200
YIGIT BOYAR: No, they are.

00:40:08.200 --> 00:40:10.720
If you specify the package
name, then they will be there.

00:40:10.720 --> 00:40:11.190
AUDIENCE: Interesting.

00:40:11.190 --> 00:40:12.130
I will try that.

00:40:14.950 --> 00:40:16.810
YIGIT BOYAR: Find me
afterwards, if maybe I

00:40:16.810 --> 00:40:17.809
didn't get the question.

00:40:17.809 --> 00:40:19.930
AUDIENCE: And third thing,
if some error happens,

00:40:19.930 --> 00:40:22.980
it shows 200-plus error,
which is hard to--

00:40:22.980 --> 00:40:25.600
sometimes it takes
some time to--

00:40:25.600 --> 00:40:28.289
CHET HASSE: Can we make
that less than 200 errors?

00:40:28.289 --> 00:40:29.830
YIGIT BOYAR: That's
a Java C problem.

00:40:29.830 --> 00:40:33.111
We haven't foreseen-- we cannot
workaround without breaking

00:40:33.111 --> 00:40:33.610
our API.

00:40:33.610 --> 00:40:35.530
I wish knew this four years ago.

00:40:35.530 --> 00:40:38.904
We would design
something differently.

00:40:38.904 --> 00:40:41.320
I'm getting this so many times
that we might actually just

00:40:41.320 --> 00:40:44.680
break some of the API to
work around that problem,

00:40:44.680 --> 00:40:47.062
like some easy [INAUDIBLE]

00:40:47.062 --> 00:40:48.760
AUDIENCE: And last thing.

00:40:48.760 --> 00:40:50.470
CHET HASSE: We're
overtime already.

00:40:50.470 --> 00:40:52.730
Is it really quick?

00:40:52.730 --> 00:40:55.065
AUDIENCE: In XML, can we
import some convenience methods

00:40:55.065 --> 00:40:57.690
so that we don't have to put the
business logic inside the XML?

00:40:57.690 --> 00:41:01.240
Let's see if null, then
visible, not visible.

00:41:01.240 --> 00:41:03.790
If we can reimport
some static function

00:41:03.790 --> 00:41:07.241
and we can really use them, like
really small set of functions.

00:41:07.241 --> 00:41:07.990
YIGIT BOYAR: Yeah.

00:41:07.990 --> 00:41:09.283
Let's talk offline.

00:41:09.283 --> 00:41:09.970
AUDIENCE: OK.

00:41:09.970 --> 00:41:11.740
CHET HASSE: OK, Steph,
did you something quick?

00:41:11.740 --> 00:41:13.490
STEPHANIE CUTHBERTSON:
I have one question

00:41:13.490 --> 00:41:16.270
that came out of the community
in advance of this summit,

00:41:16.270 --> 00:41:20.680
was people had questions about
how we think about the store

00:41:20.680 --> 00:41:22.270
and apps on the store.

00:41:22.270 --> 00:41:23.790
We talked about
it in the keynote.

00:41:23.790 --> 00:41:25.240
People were just
wondering what's

00:41:25.240 --> 00:41:28.240
the reasoning for when
we take apps down.

00:41:28.240 --> 00:41:30.430
How can I reach out if
there's been a mistake?

00:41:30.430 --> 00:41:33.670
So I actually invited some
friends of mine to come,

00:41:33.670 --> 00:41:34.510
like Paul Bankhead.

00:41:34.510 --> 00:41:35.560
I was wondering
if any people did

00:41:35.560 --> 00:41:36.700
have that question,
if you'd like

00:41:36.700 --> 00:41:38.991
to hear Paul talk about it,
because they have certainly

00:41:38.991 --> 00:41:39.875
thought about it.

00:41:39.875 --> 00:41:40.375
Yes.

00:41:40.375 --> 00:41:42.541
Would people like to hear
Paul answer that question?

00:41:42.541 --> 00:41:44.308
He's great, by the way.

00:41:44.308 --> 00:41:45.000
OK.

00:41:45.000 --> 00:41:46.000
CHET HASSE: No pressure.

00:41:46.000 --> 00:41:47.125
PAUL BANKHEAD: No pressure.

00:41:47.125 --> 00:41:49.880
So sometimes we take
apps down from the store

00:41:49.880 --> 00:41:51.880
because your safety is
really, really important.

00:41:51.880 --> 00:41:53.960
And we're a marketplace.

00:41:53.960 --> 00:41:56.290
We need all of you to create
awesome apps and games

00:41:56.290 --> 00:41:57.640
and we need users to come.

00:41:57.640 --> 00:41:59.844
And if we don't have either
side of the ecosystem,

00:41:59.844 --> 00:42:00.760
we don't have a store.

00:42:00.760 --> 00:42:01.870
We don't have Android.

00:42:01.870 --> 00:42:04.540
So we really appreciate
everything that all of you

00:42:04.540 --> 00:42:06.070
do to create great
apps and games.

00:42:06.070 --> 00:42:08.047
There are a handful of
bad actors in the world.

00:42:08.047 --> 00:42:09.880
Some of them are really
bad and some of them

00:42:09.880 --> 00:42:11.750
are accidentally
doing bad things.

00:42:11.750 --> 00:42:15.310
And we have a set of policies
in place to protect our users,

00:42:15.310 --> 00:42:17.920
and some of these policies
also protect good developers

00:42:17.920 --> 00:42:21.100
from having their stuff
inappropriately used.

00:42:21.100 --> 00:42:24.610
So we try really hard to
not have any false positives

00:42:24.610 --> 00:42:27.550
and to not make any
mistakes in our enforcement.

00:42:27.550 --> 00:42:30.310
If we do make mistakes,
you can appeal.

00:42:30.310 --> 00:42:33.230
We look at every appeal and try
to do so within a day or two.

00:42:33.230 --> 00:42:35.410
And I think you can expect--

00:42:35.410 --> 00:42:38.380
over the next quarters,
we've announced

00:42:38.380 --> 00:42:41.500
that we are looking at
further improving the safety

00:42:41.500 --> 00:42:43.080
and privacy on the
Android Interplay,

00:42:43.080 --> 00:42:46.330
and we are going to do our best
to keep all of you in business

00:42:46.330 --> 00:42:47.693
and keep our users safe.

00:42:47.693 --> 00:42:48.580
CHET HASSE: Thanks.

00:42:48.580 --> 00:42:50.950
Let me check real
quick with the crew.

00:42:50.950 --> 00:42:52.610
We're running into
lunchtime right now.

00:42:52.610 --> 00:42:54.820
Is it possible to run over and
take a couple more questions,

00:42:54.820 --> 00:42:55.660
or do we need to shut down?

00:42:55.660 --> 00:42:57.250
AUDIENCE: How about if
we say five more minutes.

00:42:57.250 --> 00:42:58.090
CHET HASSE: Five more minutes.

00:42:58.090 --> 00:42:58.631
AUDIENCE: OK?

00:42:58.631 --> 00:42:59.902
CHET HASSE: Thank you.

00:42:59.902 --> 00:43:00.640
Really quick.

00:43:00.640 --> 00:43:01.150
Yes, please?

00:43:01.150 --> 00:43:01.691
AUDIENCE: OK.

00:43:01.691 --> 00:43:04.290
I've been doing Android
TV for three months.

00:43:04.290 --> 00:43:07.250
Due to design constraints,
I could not use Leanback,

00:43:07.250 --> 00:43:09.550
so I had to do the
fields manually.

00:43:09.550 --> 00:43:13.600
I was hoping for better ways
to override Focus Finder.

00:43:13.600 --> 00:43:15.910
Sometimes I when
I refresh things,

00:43:15.910 --> 00:43:21.850
there is nothing to focus on
anymore or it had gone away.

00:43:21.850 --> 00:43:23.520
And sorry for
suggesting more work.

00:43:23.520 --> 00:43:24.228
CHET HASSE: Adam?

00:43:24.228 --> 00:43:26.198
Have any take on this?

00:43:26.198 --> 00:43:27.073
AUDIENCE: Oh, for me?

00:43:27.073 --> 00:43:27.940
Oh geez.

00:43:27.940 --> 00:43:31.780
Go ahead and find us in
the general questionnaire

00:43:31.780 --> 00:43:32.290
afterwards.

00:43:32.290 --> 00:43:33.790
I want to know some
more about this.

00:43:33.790 --> 00:43:34.340
AUDIENCE: OK.

00:43:34.340 --> 00:43:34.630
CHET HASSE: Thanks.

00:43:34.630 --> 00:43:35.139
Yes?

00:43:35.139 --> 00:43:35.680
AUDIENCE: Hi.

00:43:35.680 --> 00:43:37.570
Thanks for the event.

00:43:37.570 --> 00:43:38.990
I have two questions.

00:43:38.990 --> 00:43:40.870
First of them is
more generic one.

00:43:40.870 --> 00:43:43.670
So I hear beacon library's
being deprecated.

00:43:43.670 --> 00:43:47.020
So what is the future obligation
detection based on beacons?

00:43:50.320 --> 00:43:52.290
ANWAR GHULOUM: That's
a good question.

00:43:52.290 --> 00:43:55.750
I mean, you can
still do BLE scans

00:43:55.750 --> 00:44:01.810
and use those scans for
location, beacon-based location

00:44:01.810 --> 00:44:02.710
using nearby.

00:44:02.710 --> 00:44:06.880
What we deprecated was the
nearby notifications stuff,

00:44:06.880 --> 00:44:12.400
which, basically, the issue was
the potential for spam or user

00:44:12.400 --> 00:44:17.050
abuse through people just
posting inappropriate URLs,

00:44:17.050 --> 00:44:19.780
or whatever on these
beacons, and then

00:44:19.780 --> 00:44:23.680
people getting notifications
about them constantly.

00:44:23.680 --> 00:44:25.190
So you should still
be able to use

00:44:25.190 --> 00:44:29.170
BLE scanning to do beacon-based
location applications.

00:44:29.170 --> 00:44:30.044
And we do that.

00:44:30.044 --> 00:44:32.210
I mean, I don't think we,
as a team, do it directly,

00:44:32.210 --> 00:44:36.130
but my team supports that
kind of work in other apps

00:44:36.130 --> 00:44:38.201
that are doing
this kind of thing.

00:44:38.201 --> 00:44:39.200
AUDIENCE: OK, thank you.

00:44:39.200 --> 00:44:42.730
So the second question is
more specific to data mining.

00:44:42.730 --> 00:44:43.695
So yeah.

00:44:43.695 --> 00:44:46.830
YIGIT BOYAR: Should be a
fireside chat on data mining.

00:44:46.830 --> 00:44:48.500
CHET HASSE: I think
we're doing it now.

00:44:48.500 --> 00:44:52.440
AUDIENCE: So newer APIs,
so writing binding adapters

00:44:52.440 --> 00:44:56.420
in Java class static meta fire,
and writing them and Kotlin

00:44:56.420 --> 00:44:58.550
isn't.

00:44:58.550 --> 00:44:59.690
It's not supposed to.

00:44:59.690 --> 00:45:04.480
But it didn't work for me unless
I edit JVM static annotation.

00:45:04.480 --> 00:45:06.800
But in the
documentation, it doesn't

00:45:06.800 --> 00:45:10.250
say that I'm required to do so.

00:45:10.250 --> 00:45:10.941
It doesn't work.

00:45:10.941 --> 00:45:11.690
YIGIT BOYAR: Yeah.

00:45:11.690 --> 00:45:13.710
Maybe we should fix
the documentation.

00:45:13.710 --> 00:45:16.044
It's like if you write
it as an extension

00:45:16.044 --> 00:45:17.210
function on the [INAUDIBLE].

00:45:17.210 --> 00:45:20.270
Kotlin ends up generating
a static function.

00:45:20.270 --> 00:45:22.820
Then data mining picks
it up automatically.

00:45:22.820 --> 00:45:24.860
It works by mistake.

00:45:24.860 --> 00:45:26.580
It wasn't intended to.

00:45:26.580 --> 00:45:29.180
But it's really nice because
you're binding it up.

00:45:29.180 --> 00:45:30.860
There's an actual
extension functions

00:45:30.860 --> 00:45:34.780
on the actual [INAUDIBLE],,
like a much more convenient way

00:45:34.780 --> 00:45:36.180
to declare them.

00:45:36.180 --> 00:45:39.350
But I guess we need to
fix the documentation.

00:45:39.350 --> 00:45:41.420
You still need
them to be static,

00:45:41.420 --> 00:45:43.827
or you could do
it dynamic, but it

00:45:43.827 --> 00:45:45.410
goes through data
mining [INAUDIBLE],,

00:45:45.410 --> 00:45:47.060
which I think I'm
going to deprecate

00:45:47.060 --> 00:45:49.340
to fix that Java C problem.

00:45:49.340 --> 00:45:51.800
AUDIENCE: So if you copy
from the documentation,

00:45:51.800 --> 00:45:54.652
it just doesn't work, so I
was just letting you know.

00:45:54.652 --> 00:45:56.110
YIGIT BOYAR: I will
get that fixed.

00:45:56.110 --> 00:45:56.360
Thanks.

00:45:56.360 --> 00:45:56.840
CHET HASSE: Thank you.

00:45:56.840 --> 00:45:57.620
Two minutes left.

00:45:57.620 --> 00:45:58.161
AUDIENCE: Hi.

00:45:58.161 --> 00:46:01.100
I have a quick correction.

00:46:01.100 --> 00:46:05.570
Is there any plan that camera
API will be in the Jetpack

00:46:05.570 --> 00:46:07.190
with a better interface?

00:46:07.190 --> 00:46:11.480
And when will the camera
API1 actually be gone?

00:46:11.480 --> 00:46:14.327
Because it's been
deprecated for a while.

00:46:14.327 --> 00:46:16.910
ANWAR GHULOUM: I can't speak to
when it will actually be gone.

00:46:16.910 --> 00:46:18.350
Hopefully soon.

00:46:18.350 --> 00:46:19.850
I think the reason
we kept it around

00:46:19.850 --> 00:46:23.570
was to better support low-end
devices that were on chipsets

00:46:23.570 --> 00:46:26.010
that can support Camera2 API.

00:46:26.010 --> 00:46:30.650
But the plan is to
eventually have it be gone.

00:46:30.650 --> 00:46:33.830
I can't really speak to
details on the plans,

00:46:33.830 --> 00:46:36.260
including the new camera
APIs in the Jetpack,

00:46:36.260 --> 00:46:38.864
because, again, it's sort of
work in progress and stuff

00:46:38.864 --> 00:46:39.780
that we're looking at.

00:46:39.780 --> 00:46:41.196
But we are keenly
interested in it

00:46:41.196 --> 00:46:43.890
because we know
that a lot of apps,

00:46:43.890 --> 00:46:46.252
they want to get the best
picture out of the camera,

00:46:46.252 --> 00:46:48.710
and they're having to resort
to things like screen scraping

00:46:48.710 --> 00:46:49.690
and stuff like that.

00:46:49.690 --> 00:46:51.800
AUDIENCE: It's writing
too much code on our side.

00:46:51.800 --> 00:46:53.590
ANWAR GHULOUM: Yeah.

00:46:53.590 --> 00:46:54.830
It's a high priority for us.

00:46:54.830 --> 00:46:55.880
We're aware of it.

00:46:55.880 --> 00:46:57.010
Just stay tuned.

00:46:57.010 --> 00:46:58.727
Hopefully, next
developer summit,

00:46:58.727 --> 00:47:00.560
we'll have something
better to say about it.

00:47:00.560 --> 00:47:01.100
AUDIENCE: Great.

00:47:01.100 --> 00:47:01.400
Thank you.

00:47:01.400 --> 00:47:03.072
CHET HASSE: Does that
mean in three years?

00:47:03.072 --> 00:47:03.571
[LAUGHS]

00:47:04.689 --> 00:47:05.480
CHET HASSE: Thanks.

00:47:05.480 --> 00:47:05.780
Yes?

00:47:05.780 --> 00:47:06.340
ANWAR GHULOUM: Three years?

00:47:06.340 --> 00:47:07.410
I thought it was four.

00:47:07.410 --> 00:47:09.285
AUDIENCE: I was late,
so hopefully this

00:47:09.285 --> 00:47:10.160
wasn't already asked.

00:47:10.160 --> 00:47:11.540
CHET HASSE: Oh, let
me just summarize

00:47:11.540 --> 00:47:13.326
what we've been talking about
for the last [INAUDIBLE]

00:47:13.326 --> 00:47:13.826
[LAUGHS]

00:47:14.326 --> 00:47:16.900
AUDIENCE: Data binding, right?

00:47:16.900 --> 00:47:22.500
So Play Services, and Firebase,
as well, to an extent,

00:47:22.500 --> 00:47:26.225
is this huge monolithic
black box that crashes a lot

00:47:26.225 --> 00:47:28.700
and has no bug reporter.

00:47:28.700 --> 00:47:33.230
Is there anything on your radar
to improve that feedback loop?

00:47:35.580 --> 00:47:36.080
Yeah.

00:47:36.080 --> 00:47:39.527
It's really frustrating
whenever you have an issue.

00:47:39.527 --> 00:47:42.110
We know people in the community
who work directly on Android X

00:47:42.110 --> 00:47:44.940
or Frameworks, but as far as
Play Services or Firebase,

00:47:44.940 --> 00:47:47.252
it's just, well, you can
dump it into the ether--

00:47:47.252 --> 00:47:49.460
CHET HASSE: I'm going to
stop you there because we're

00:47:49.460 --> 00:47:50.460
about to run out of time.

00:47:50.460 --> 00:47:53.084
Is there anybody that can handle
that question of Play Services

00:47:53.084 --> 00:47:54.440
crashing?

00:47:54.440 --> 00:47:56.750
ANWAR GHULOUM: I mean,
I work with them a lot,

00:47:56.750 --> 00:47:59.814
and some of my colleagues
here do, too, as well.

00:47:59.814 --> 00:48:02.480
They've been working really hard
to reduce the number of crashes

00:48:02.480 --> 00:48:03.480
in Google Play Services.

00:48:03.480 --> 00:48:06.450
They've actually made
a lot of progress.

00:48:06.450 --> 00:48:08.690
But it is kind of a volume
game, in a sense, right?

00:48:08.690 --> 00:48:11.490
They look at the crashes
that are most frequent

00:48:11.490 --> 00:48:12.590
and focus on those.

00:48:12.590 --> 00:48:13.965
If you're looking
at crashes that

00:48:13.965 --> 00:48:17.460
are induced by certain uses
of the Google Play SDK,

00:48:17.460 --> 00:48:18.686
I think that'd be--

00:48:18.686 --> 00:48:21.047
we can talk offline
afterwards, if you want,

00:48:21.047 --> 00:48:23.130
and I can get you connected
with the right people.

00:48:23.130 --> 00:48:25.590
AUDIENCE: Yeah The main
concern is it's not clear

00:48:25.590 --> 00:48:27.007
where to file bug reports.

00:48:27.007 --> 00:48:29.340
STEPHANIE CUTHBERTSON: So
Zach, you're basically asking,

00:48:29.340 --> 00:48:30.990
I'd like a good way
to file bug reports

00:48:30.990 --> 00:48:32.495
for Play Services in Firebase?

00:48:32.495 --> 00:48:33.120
AUDIENCE: Yeah.

00:48:33.120 --> 00:48:33.350
STEPHANIE CUTHBERTSON: OK.

00:48:33.350 --> 00:48:34.350
Yeah, we can mention it.

00:48:34.350 --> 00:48:35.564
Thank you.

00:48:35.564 --> 00:48:36.480
CHET HASSE: Thank you.

00:48:36.480 --> 00:48:37.890
Last question.

00:48:37.890 --> 00:48:40.710
AUDIENCE: I have two questions,
but I'll ask just one.

00:48:40.710 --> 00:48:41.940
CHET HASSE: OK.

00:48:41.940 --> 00:48:45.000
AUDIENCE: Firstly, I'd like
to say that I'm new to Android

00:48:45.000 --> 00:48:48.940
and it's really good that
we have the Google samples

00:48:48.940 --> 00:48:51.600
in every possible
combination, with Rx Java,

00:48:51.600 --> 00:48:52.890
with the live data.

00:48:52.890 --> 00:48:56.490
So that's really good,
but I was recently

00:48:56.490 --> 00:48:58.920
working on a code lab
for dynamic feature,

00:48:58.920 --> 00:49:01.770
and I did everything right,
and still, nothing was working.

00:49:01.770 --> 00:49:06.290
Because there was some issue
with the flavors in our app.

00:49:06.290 --> 00:49:10.260
So can we have more
real-world app samples as well

00:49:10.260 --> 00:49:12.149
to reflect such things?

00:49:12.149 --> 00:49:13.440
CHET HASSE: Real-world samples.

00:49:13.440 --> 00:49:14.670
It's a good request.

00:49:14.670 --> 00:49:18.520
There are many, many dev rel
people here who work on stuff.

00:49:18.520 --> 00:49:20.520
So that's certainly good
feedback for that team.

00:49:20.520 --> 00:49:22.812
It'd be good to get the
details on the specific problem

00:49:22.812 --> 00:49:25.061
that you had, and that would
be a good use case for us

00:49:25.061 --> 00:49:26.820
to look at if you could
follow up with us.

00:49:26.820 --> 00:49:27.440
Thank you.

00:49:27.440 --> 00:49:28.690
Thanks, everybody, for coming.

00:49:28.690 --> 00:49:29.914
Thanks to the panel.

00:49:29.914 --> 00:49:31.830
Thanks for the people
in the audience as well.

00:49:31.830 --> 00:49:32.330
[APPLAUSE]

00:49:32.330 --> 00:49:35.480
[MUSIC PLAYING]

