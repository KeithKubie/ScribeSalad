WEBVTT
Kind: captions
Language: en

00:00:05.567 --> 00:00:07.067
Scudder: Hi.
I'm Jeff Scudder.

00:00:07.067 --> 00:00:09.667
In this video, we'll be looking
at a couple of techniques

00:00:09.667 --> 00:00:13.767
to improve the efficiency
of your App Engine applications.

00:00:13.767 --> 00:00:16.767
The first thing we'll
be looking at is profiling,

00:00:16.767 --> 00:00:19.033
which is a way to view
the execution path

00:00:19.033 --> 00:00:20.834
taken through your app.

00:00:20.834 --> 00:00:23.534
The second thing
we'll look at is memcache,

00:00:23.534 --> 00:00:25.200
which is a way to speed up
the retrieval

00:00:25.200 --> 00:00:27.934
of commonly used data.

00:00:27.934 --> 00:00:29.534
To view
these two techniques,

00:00:29.534 --> 00:00:31.133
we'll be looking
at the App Gallery

00:00:31.133 --> 00:00:32.868
sample application.

00:00:32.868 --> 00:00:35.167
Let's take a look.

00:00:35.167 --> 00:00:38.567
Now we're looking
at the App Gallery application.

00:00:38.567 --> 00:00:41.601
This app shows
featured applications,

00:00:41.601 --> 00:00:43.033
editors' picks,

00:00:43.033 --> 00:00:46.367
and the most recently added
applications.

00:00:46.367 --> 00:00:48.200
This version of the code
doesn't include

00:00:48.200 --> 00:00:50.300
any profiling code.

00:00:50.300 --> 00:00:52.167
So we're going to show
how to add that

00:00:52.167 --> 00:00:55.100
to get an idea of which pieces
of the application

00:00:55.100 --> 00:00:58.267
are being exercised
when we view the pages.

00:00:59.334 --> 00:01:01.501
To learn
how to do profiling,

00:01:01.501 --> 00:01:04.334
we'll look in the Frequently
Asked Questions section

00:01:04.334 --> 00:01:08.367
on code.google.com/appengine.

00:01:08.367 --> 00:01:12.033
We show two ways to add
profiling to your application.

00:01:12.033 --> 00:01:14.300
We're going to go
with the second one,

00:01:14.300 --> 00:01:17.701
which adds the profiling data
to the logs.

00:01:17.701 --> 00:01:21.467
Now we see the main function
of the App Gallery's code.

00:01:21.467 --> 00:01:25.167
We're going to add
our profiling function here.

00:01:25.167 --> 00:01:28.701
To add profiling,
we've replaced the main function

00:01:28.701 --> 00:01:31.200
with this profile_main.

00:01:31.200 --> 00:01:37.100
This captures profiling data
and pushes it into the logs.

00:01:37.100 --> 00:01:40.934
I've uploaded a new version
of the App Gallery application,

00:01:40.934 --> 00:01:44.100
which now includes
profiling.

00:01:44.100 --> 00:01:45.634
You can see
that the application

00:01:45.634 --> 00:01:48.534
looks exactly the same
as before.

00:01:48.534 --> 00:01:51.367
But now, if we look
on the admin console,

00:01:51.367 --> 00:01:54.200
we can see profiling data
in the logs.

00:01:54.200 --> 00:01:55.701
Here in the dashboard,

00:01:55.701 --> 00:01:58.534
I'm viewing version 4
of the App Gallery,

00:01:58.534 --> 00:02:01.367
which includes
profiling data.

00:02:01.367 --> 00:02:03.501
Let's take a look
at the logs.

00:02:03.501 --> 00:02:06.767
Here we see the profiling
data from the logs

00:02:06.767 --> 00:02:08.834
that show the path
that's taken

00:02:08.834 --> 00:02:11.033
through our
application's code.

00:02:13.167 --> 00:02:14.501
Right around here,

00:02:14.501 --> 00:02:17.834
we see some calls
to entity.pb,

00:02:17.834 --> 00:02:22.133
which is responsible for working
with the, uh, data models.

00:02:22.133 --> 00:02:24.968
Quite a bit of time
is spent in our application

00:02:24.968 --> 00:02:28.067
working with these data models
from the datastore.

00:02:28.067 --> 00:02:32.234
And we can improve some of this
by adding memcache.

00:02:32.234 --> 00:02:35.667
Let's take a look at how
this version of the application

00:02:35.667 --> 00:02:37.767
is fetching data
from the datastore.

00:02:40.033 --> 00:02:44.300
I'm pulling up the main page
of the application

00:02:44.300 --> 00:02:47.501
and viewing the get_or_fetch_
main_page method.

00:02:47.501 --> 00:02:50.267
You can see here
that we're querying

00:02:50.267 --> 00:02:53.334
for the top apps,
recent apps,

00:02:53.334 --> 00:02:55.434
and the featured
application,

00:02:55.434 --> 00:02:58.801
and then plugging these values
into our template.

00:03:00.734 --> 00:03:02.701
Now, these same queries
are repeated

00:03:02.701 --> 00:03:05.033
each time we view
the main page.

00:03:05.033 --> 00:03:07.434
The results don't change
all that often.

00:03:07.434 --> 00:03:11.400
So querying every time
is a little bit expensive.

00:03:11.400 --> 00:03:13.234
Since the results
are always the same,

00:03:13.234 --> 00:03:16.667
we could see a vast improvement
by adding memcache,

00:03:16.667 --> 00:03:19.634
which stores recent results
in memory.

00:03:19.634 --> 00:03:22.400
Let's take a look
at adding that now.

00:03:22.400 --> 00:03:25.434
I can take this same
main page class

00:03:25.434 --> 00:03:29.601
and add in memcache.

00:03:29.601 --> 00:03:33.534
In the get_or_fetch_main_page
method,

00:03:33.534 --> 00:03:36.501
I'm first calling
a memcache.get,

00:03:36.501 --> 00:03:41.434
which tries to fetch
recent results from memcache.

00:03:41.434 --> 00:03:43.167
If the results
are in memcache,

00:03:43.167 --> 00:03:45.267
I'll return them
immediately.

00:03:45.267 --> 00:03:48.200
Otherwise, I'll perform
the datastore queries

00:03:48.200 --> 00:03:50.501
as I did before.

00:03:50.501 --> 00:03:54.634
After I construct the values
to put into the template,

00:03:54.634 --> 00:03:58.234
I add them to the cache
so that next time I make a call,

00:03:58.234 --> 00:03:59.634
I can use the cache values

00:03:59.634 --> 00:04:02.133
instead of calling
to the datastore.

00:04:02.133 --> 00:04:04.267
After making these changes,

00:04:04.267 --> 00:04:07.634
I've uploaded version 5
of the application.

00:04:07.634 --> 00:04:10.200
Once again, you can see
that the application

00:04:10.200 --> 00:04:11.968
looks exactly the same.

00:04:11.968 --> 00:04:15.467
All of the changes
are under the hood, so to speak.

00:04:17.133 --> 00:04:19.534
If we look at version 5
of the application

00:04:19.534 --> 00:04:21.067
in the dashboard,

00:04:21.067 --> 00:04:22.734
we can see that there's
been an improvement

00:04:22.734 --> 00:04:27.200
in performance of some
of the commonly fetched pages.

00:04:27.200 --> 00:04:29.934
For example, if we compare
the average CPU

00:04:29.934 --> 00:04:33.801
to previous versions,
this number has decreased.

00:04:33.801 --> 00:04:35.634
If we look at the logs,

00:04:35.634 --> 00:04:38.968
we can also see that some data
is coming out of memcache

00:04:38.968 --> 00:04:41.334
instead of the datastore.

00:04:41.334 --> 00:04:44.868
Here's a log entry
for viewing the main page.

00:04:46.801 --> 00:04:49.701
You can see that calls
are now being made to memcache

00:04:49.701 --> 00:04:52.434
instead of the datastore.

00:04:52.434 --> 00:04:54.467
This should greatly improve
the efficiency

00:04:54.467 --> 00:04:56.367
of our application.

00:04:58.167 --> 00:05:01.234
Now you've seen how to add
profiling to your application

00:05:01.234 --> 00:05:03.033
and how to use memcache.

00:05:03.033 --> 00:05:04.734
These are just two
of the many ways

00:05:04.734 --> 00:05:06.701
to speed up your application,

00:05:06.701 --> 00:05:08.868
and we'll be covering more
in the future.

00:05:08.868 --> 00:05:10.334
Stay tuned.

