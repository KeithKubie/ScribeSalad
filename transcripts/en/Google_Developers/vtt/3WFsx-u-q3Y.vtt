WEBVTT
Kind: captions
Language: en

00:00:02.330 --> 00:00:03.970
ROSS MCELROY: Hello, everyone.

00:00:03.970 --> 00:00:05.430
Thank you for coming.

00:00:05.430 --> 00:00:09.300
I'd like to introduce you to our
session, which is YouTube

00:00:09.300 --> 00:00:13.390
Android Player Tools, and we're
going to be talking

00:00:13.390 --> 00:00:18.060
today about how to bring YouTube
to your Android apps.

00:00:18.060 --> 00:00:19.270
I'm Ross McElroy.

00:00:19.270 --> 00:00:22.010
I'm a YouTube mobile
engineer within

00:00:22.010 --> 00:00:24.810
Google at Google London.

00:00:24.810 --> 00:00:25.890
ANTON HANSSON: My name
is Anton Hansson.

00:00:25.890 --> 00:00:28.380
I work together with Ross, and
I'll be doing our live coding

00:00:28.380 --> 00:00:31.440
demo later.

00:00:31.440 --> 00:00:34.300
ROSS MCELROY: So first off, I
thought just give a brief

00:00:34.300 --> 00:00:38.760
rundown of some background on
both YouTube, and its history,

00:00:38.760 --> 00:00:42.940
and its progression to mobile.

00:00:42.940 --> 00:00:44.430
So we all know YouTube.

00:00:44.430 --> 00:00:47.840
It's our favorite destination
for keyboard-playing cats, and

00:00:47.840 --> 00:00:50.390
space cats, and skateboarding
dogs.

00:00:50.390 --> 00:00:52.650
And of course, that's the way
it started, with a lot of

00:00:52.650 --> 00:00:55.860
viral videos, amateur videos,
giving people the ability to

00:00:55.860 --> 00:00:57.920
express themselves on the web.

00:00:57.920 --> 00:01:02.150
But it's progressed into more
than that, and there's now a

00:01:02.150 --> 00:01:06.320
wide range of content available
for watching any

00:01:06.320 --> 00:01:07.420
kind of videos on YouTube.

00:01:07.420 --> 00:01:10.470
So you can learn something new--
there's a huge variety

00:01:10.470 --> 00:01:14.410
of lectures available, anything
from statistics to

00:01:14.410 --> 00:01:17.460
quantum physics to cooking.

00:01:17.460 --> 00:01:21.300
It's being used as a platform
for campaigning, for example,

00:01:21.300 --> 00:01:26.790
in the recent Kony 2012 video
or the videos uploaded from

00:01:26.790 --> 00:01:30.360
Egypt during the Arab Spring.

00:01:30.360 --> 00:01:33.730
It's also a great platform for
surfacing new talent, new

00:01:33.730 --> 00:01:39.480
music, anything from the next
greatest band demoing their

00:01:39.480 --> 00:01:44.070
latest song in their garage to
official music videos from the

00:01:44.070 --> 00:01:46.090
next superstars.

00:01:46.090 --> 00:01:47.820
And people love watching
these videos.

00:01:47.820 --> 00:01:51.730
There are absolutely massive
amounts of video playbacks

00:01:51.730 --> 00:01:53.140
watched on YouTube.

00:01:53.140 --> 00:01:56.260
There's over 4 billion
videos played back

00:01:56.260 --> 00:01:58.680
every day on YouTube.

00:01:58.680 --> 00:02:01.260
That's more than 1,000
hours of videos being

00:02:01.260 --> 00:02:03.510
watched every second--

00:02:03.510 --> 00:02:04.790
incredible amount.

00:02:04.790 --> 00:02:07.570
And the catalog is growing
tremendously, as well.

00:02:07.570 --> 00:02:12.620
Over 72 hours of YouTube videos
are uploaded every

00:02:12.620 --> 00:02:17.200
minute, a huge amount of
additional content.

00:02:17.200 --> 00:02:19.730
And of course, as the content
has changed, the way in which

00:02:19.730 --> 00:02:22.140
we watch the content has
evolved, as well.

00:02:22.140 --> 00:02:25.740
Originally, of course, it was
only PCs were the platform

00:02:25.740 --> 00:02:27.500
which you could watch YouTube
videos on, the only thing

00:02:27.500 --> 00:02:28.430
powerful enough.

00:02:28.430 --> 00:02:32.450
With the rise of smart phones,
tablets, smart TV devices, a

00:02:32.450 --> 00:02:35.160
lot more people are choosing
these types of devices to

00:02:35.160 --> 00:02:37.480
watch their YouTube videos on.

00:02:37.480 --> 00:02:40.550
And we're now around the world--
it's coming up towards

00:02:40.550 --> 00:02:43.190
20% off all YouTube
video playbacks

00:02:43.190 --> 00:02:46.620
happening on mobile devices.

00:02:46.620 --> 00:02:49.810
In the USA, it's greater
than 20% already.

00:02:49.810 --> 00:02:52.570
And in some countries, for
example South Korea, it's

00:02:52.570 --> 00:02:54.820
already more than
the majority.

00:02:54.820 --> 00:02:57.190
It's greater than 50%.

00:02:57.190 --> 00:02:59.610
So I think it's clear that as
these devices become more

00:02:59.610 --> 00:03:02.960
prevalent in the home and
people's pocket, this is going

00:03:02.960 --> 00:03:04.980
to be the medium of choice for
people watching YouTube

00:03:04.980 --> 00:03:08.250
videos, and it's going to be
the majority of viewbacks

00:03:08.250 --> 00:03:12.920
happening on these mobile
smart devices.

00:03:12.920 --> 00:03:15.380
One of the other great things
about YouTube, which helped

00:03:15.380 --> 00:03:18.510
build its success in the first
instance, was its ability to

00:03:18.510 --> 00:03:22.000
allow you to embed YouTube
videos in your own website.

00:03:22.000 --> 00:03:24.100
So this allows you to have great
video content on your

00:03:24.100 --> 00:03:27.950
website without having to
have the whole necessary

00:03:27.950 --> 00:03:31.120
infrastructure for sharing
these videos.

00:03:31.120 --> 00:03:34.470
However, there's not, up until
now, been a very satisfactory

00:03:34.470 --> 00:03:38.030
option for embedding YouTube
videos in your mobile

00:03:38.030 --> 00:03:39.450
applications.

00:03:39.450 --> 00:03:42.820
And so that's what we're going
to talk about today.

00:03:42.820 --> 00:03:47.190
So today we are introducing
and pre-announcing a new

00:03:47.190 --> 00:03:51.090
YouTube Android Player API,
and we want to put

00:03:51.090 --> 00:03:53.380
YouTube in your apps.

00:03:53.380 --> 00:03:55.690
So there was an important thing
I said there, which is,

00:03:55.690 --> 00:03:58.760
this is a pre-announcement, and
so all of these details

00:03:58.760 --> 00:04:01.450
today are going to be
subject to change.

00:04:01.450 --> 00:04:02.940
We're not going to be launching
for at least a

00:04:02.940 --> 00:04:04.350
couple of months.

00:04:04.350 --> 00:04:09.570
And we would encourage feedback
and suggestions and

00:04:09.570 --> 00:04:10.980
future requests.

00:04:10.980 --> 00:04:13.396
So if you have any comments,
please use the mics at the end

00:04:13.396 --> 00:04:15.670
of the talk, or we'll be hanging
out at the YouTube

00:04:15.670 --> 00:04:17.410
Developer Sandbox
after this talk.

00:04:17.410 --> 00:04:21.010
You can come and talk
to us in person.

00:04:21.010 --> 00:04:22.860
So saying that--

00:04:22.860 --> 00:04:24.310
this pre-announcement--

00:04:24.310 --> 00:04:26.240
you probably already have
a copy of it in your

00:04:26.240 --> 00:04:27.450
pocket right now.

00:04:27.450 --> 00:04:30.660
How many of you have the YouTube
I/O Companion app?

00:04:30.660 --> 00:04:33.870
Any of you used live
streaming on it?

00:04:33.870 --> 00:04:35.500
You've used the YouTube
Android Player

00:04:35.500 --> 00:04:36.950
API, in that case.

00:04:36.950 --> 00:04:38.880
Anton, you want to have
a look at what's going

00:04:38.880 --> 00:04:43.245
on in another session?

00:04:45.870 --> 00:04:47.120
ANTON HANSSON: All right.

00:04:49.360 --> 00:04:50.610
Fingers crossed.

00:04:58.390 --> 00:04:59.640
See what's on.

00:05:03.540 --> 00:05:05.530
Here's a live session.

00:05:14.880 --> 00:05:16.820
There we go.

00:05:16.820 --> 00:05:18.968
Looks like they're
having fun there.

00:05:18.968 --> 00:05:21.290
[APPLAUSE]

00:05:21.290 --> 00:05:22.590
ANTON HANSSON: Static slide.

00:05:22.590 --> 00:05:26.050
ROSS MCELROY: So I'm hoping
that we're going to be

00:05:26.050 --> 00:05:28.760
interesting to you today, and
you'll not resort to watching

00:05:28.760 --> 00:05:30.540
other sessions during the
middle of the talk.

00:05:30.540 --> 00:05:33.630
But if you do, I'll at
least be happy that

00:05:33.630 --> 00:05:34.880
you're using our tool.

00:05:39.150 --> 00:05:43.580
So why do we want another
YouTube Player API?

00:05:43.580 --> 00:05:45.540
So there's three options
available to you at the moment

00:05:45.540 --> 00:05:48.620
to embed YouTube videos in your
apps, and they're not

00:05:48.620 --> 00:05:49.610
terribly satisfactory.

00:05:49.610 --> 00:05:54.730
So the first two involve
embedding a web view in your

00:05:54.730 --> 00:05:56.290
app and using that--

00:05:56.290 --> 00:05:59.180
using the standard web embeds
currently available.

00:05:59.180 --> 00:06:02.390
The first web embed option is
the normal Flash-based embed.

00:06:02.390 --> 00:06:04.620
So this was the traditional
web embed format from the

00:06:04.620 --> 00:06:07.260
beginning of YouTube.

00:06:07.260 --> 00:06:10.450
Unfortunately, it's not really a
very true mobile experience.

00:06:10.450 --> 00:06:11.790
The buttons are not very easily

00:06:11.790 --> 00:06:13.270
clickable on mobile phones.

00:06:13.270 --> 00:06:16.750
It's not optimized for
a touch experience.

00:06:16.750 --> 00:06:19.910
And also, of course, it uses
Flash, and not many devices

00:06:19.910 --> 00:06:21.580
have Flash pre-installed.

00:06:21.580 --> 00:06:25.400
And if Flash is not available,
it will end up using the

00:06:25.400 --> 00:06:27.580
browser plug-in, which means
you have no access to the

00:06:27.580 --> 00:06:30.120
player API yourself,
and you don't have

00:06:30.120 --> 00:06:32.080
access to monetize content.

00:06:32.080 --> 00:06:33.940
So overall, this is not really
a very good mobile

00:06:33.940 --> 00:06:36.810
experience for users.

00:06:36.810 --> 00:06:38.520
The second option is an
IFRAME-based embed.

00:06:38.520 --> 00:06:40.690
So this is a newer embed option,
which has been made

00:06:40.690 --> 00:06:42.040
available recently.

00:06:42.040 --> 00:06:44.800
It offers HTML5 video, so it
can be played on devices

00:06:44.800 --> 00:06:47.770
without Flash, and you can have
full access to the player

00:06:47.770 --> 00:06:49.030
through an API.

00:06:49.030 --> 00:06:51.350
However, of course, this is
embedded in a web view, and

00:06:51.350 --> 00:06:53.360
therefore the API
is JavaScript.

00:06:53.360 --> 00:06:55.000
And there's a kind of impedance
mismatch there

00:06:55.000 --> 00:06:57.180
between the Java, which you're
writing, and the

00:06:57.180 --> 00:06:59.650
JavaScript in the API.

00:06:59.650 --> 00:07:02.190
It's also, unfortunately,
unsupported on some versions

00:07:02.190 --> 00:07:03.250
of Android.

00:07:03.250 --> 00:07:05.020
So this is not really a very
good mobile development

00:07:05.020 --> 00:07:07.270
experience for you.

00:07:07.270 --> 00:07:11.130
And the final option is what
most of you end up doing, just

00:07:11.130 --> 00:07:13.880
throwing off an intent to launch
the YouTube video in

00:07:13.880 --> 00:07:16.280
the native Android
YouTube Player.

00:07:16.280 --> 00:07:17.360
So this is really easy to do.

00:07:17.360 --> 00:07:19.650
You just need to create an
intent with the video ID, and

00:07:19.650 --> 00:07:23.320
it gives a really native good
experience to users.

00:07:23.320 --> 00:07:26.080
However, you can't embed it
within your own UI, and it's

00:07:26.080 --> 00:07:27.160
fire and forget, of course.

00:07:27.160 --> 00:07:29.830
You have no Player API access,
and the user ends up leaving

00:07:29.830 --> 00:07:32.800
your app to view the video, and
will hopefully come back,

00:07:32.800 --> 00:07:35.180
but there's no guarantee that
they're staying within your

00:07:35.180 --> 00:07:36.540
application.

00:07:36.540 --> 00:07:40.220
So this has been described
as a kind of out-of-body

00:07:40.220 --> 00:07:42.860
experience by some
of our partners.

00:07:42.860 --> 00:07:45.800
So no control in that option.

00:07:45.800 --> 00:07:47.760
So this is why we're creating
the YouTube

00:07:47.760 --> 00:07:49.440
Android Player API.

00:07:49.440 --> 00:07:53.000
It's a native library
specifically designed for

00:07:53.000 --> 00:07:56.310
Android devices, and it actually
makes use of a lot of

00:07:56.310 --> 00:08:00.650
the same code used by the native
Android YouTube Player.

00:08:00.650 --> 00:08:02.700
So you can take advantage of all
the development that has

00:08:02.700 --> 00:08:07.110
gone into that player in your
apps, automatically.

00:08:07.110 --> 00:08:10.500
It's been optimized for the full
range of devices that run

00:08:10.500 --> 00:08:14.550
Android, from mobile phones,
tablets, and Google TV

00:08:14.550 --> 00:08:17.620
devices, and it's been optimized
so that it works

00:08:17.620 --> 00:08:18.380
well on each of them.

00:08:18.380 --> 00:08:20.740
So for example, on Google TV, we
have a different controller

00:08:20.740 --> 00:08:24.470
scheme which uses the
keyboard-based remote controls

00:08:24.470 --> 00:08:26.290
rather than a touch-based
interface, because of course,

00:08:26.290 --> 00:08:29.710
you don't have touch on a TV.

00:08:29.710 --> 00:08:33.220
We have support for a very wide
range of Android platform

00:08:33.220 --> 00:08:35.440
versions, right back
to version 2.2--

00:08:35.440 --> 00:08:37.030
that's the Froyo release--

00:08:37.030 --> 00:08:38.890
through Gingerbread, Honeycomb,
Ice Cream Sandwich,

00:08:38.890 --> 00:08:40.990
and the recently released
Jellybean.

00:08:40.990 --> 00:08:45.440
And so this captures over 90%
of the Android devices that

00:08:45.440 --> 00:08:48.240
are out there already.

00:08:48.240 --> 00:08:51.170
And we also wanted to make it
really trivial for people to

00:08:51.170 --> 00:08:53.200
embed YouTube videos
in their apps.

00:08:53.200 --> 00:08:55.700
So I'll go into more detail into
how the API works later

00:08:55.700 --> 00:08:58.480
in the talk, but I just wanted
to give you a brief look at

00:08:58.480 --> 00:09:00.960
embedding how it would work,
and these three lines are

00:09:00.960 --> 00:09:03.080
really all that's needed
to launch a YouTube

00:09:03.080 --> 00:09:06.010
video in your app.

00:09:06.010 --> 00:09:09.390
We have a lot of extra support
baked into the library to make

00:09:09.390 --> 00:09:11.550
sure you can have a really
good, polished app, and

00:09:11.550 --> 00:09:13.980
everything can be taken
care of for you.

00:09:13.980 --> 00:09:16.610
And we have good support for
full screen, orientation

00:09:16.610 --> 00:09:20.160
changes, handling hiding of the
system UI at appropriate

00:09:20.160 --> 00:09:22.560
moments in time and
restoring of that.

00:09:22.560 --> 00:09:25.000
And so it just makes it an easy
experience for you to

00:09:25.000 --> 00:09:29.290
embed it in your apps and
make it a polished app.

00:09:29.290 --> 00:09:32.640
The YouTube videos look gorgeous
on the devices.

00:09:32.640 --> 00:09:36.550
We support full HD up to the
amount of resolution supported

00:09:36.550 --> 00:09:37.580
by the device.

00:09:37.580 --> 00:09:41.360
And the quality control is kind
of automatically dealt

00:09:41.360 --> 00:09:46.010
with by the API itself, so you
don't need to worry about

00:09:46.010 --> 00:09:47.910
whether the quality
stream will be

00:09:47.910 --> 00:09:49.375
playable on that device.

00:09:49.375 --> 00:09:50.610
The library will take
care of that.

00:09:50.610 --> 00:09:54.670
And it will also choose the
quality automatically based on

00:09:54.670 --> 00:09:57.310
network conditions, so on a
mobile network, it will use a

00:09:57.310 --> 00:10:00.150
lower quality stream so the
user gets video quickly,

00:10:00.150 --> 00:10:03.550
rather than having to
wait to buffer.

00:10:03.550 --> 00:10:05.870
And finally, it has
full support for

00:10:05.870 --> 00:10:07.790
monetized YouTube content.

00:10:07.790 --> 00:10:10.140
So this is an important
one for partners.

00:10:10.140 --> 00:10:13.880
It means that you have a much
wider range of content

00:10:13.880 --> 00:10:14.830
available to you.

00:10:14.830 --> 00:10:16.530
You have available--

00:10:16.530 --> 00:10:19.020
you can view all the content
that's been marked as

00:10:19.020 --> 00:10:20.910
monetizable on YouTube.

00:10:20.910 --> 00:10:24.650
And that also means that if
you're the content owner, you

00:10:24.650 --> 00:10:26.200
can have an additional
revenue stream.

00:10:26.200 --> 00:10:29.720
So if you own the content, and
you put the content in your

00:10:29.720 --> 00:10:34.830
apps, then you will get the
advertisement revenue through

00:10:34.830 --> 00:10:38.580
the views of that content using
this player API in the

00:10:38.580 --> 00:10:39.830
apps you write.

00:10:41.640 --> 00:10:44.580
Just to make something clear--

00:10:44.580 --> 00:10:45.780
so this is a player API.

00:10:45.780 --> 00:10:49.850
We also have a data API, and
that's a separate API.

00:10:49.850 --> 00:10:51.970
The data API's been around for
a while, and that allows you

00:10:51.970 --> 00:10:55.750
to search for videos, get
recommendations, find related

00:10:55.750 --> 00:10:59.630
videos, and access video
metadata, things like that.

00:10:59.630 --> 00:11:02.070
And once you've got that data,
then that's when you would use

00:11:02.070 --> 00:11:04.240
this player API to
make the playback

00:11:04.240 --> 00:11:06.460
experience really great.

00:11:06.460 --> 00:11:08.490
So I would have recommended that
you went to the Master

00:11:08.490 --> 00:11:10.750
the Latest YouTube Data API Code
Lab, but unfortunately,

00:11:10.750 --> 00:11:12.990
that was just before
this talk.

00:11:12.990 --> 00:11:15.570
If you can find online some of
the details of that, I'm sure

00:11:15.570 --> 00:11:17.810
that would be very useful to
you, if you're writing a

00:11:17.810 --> 00:11:20.030
YouTube app.

00:11:20.030 --> 00:11:24.090
So we're quite excited about
this API, and we distributed

00:11:24.090 --> 00:11:27.460
it to a couple of our
external partners.

00:11:27.460 --> 00:11:30.330
They've only had a couple of
weeks access to this API, but

00:11:30.330 --> 00:11:33.170
they've created some good demos,
and we'd like to show

00:11:33.170 --> 00:11:36.910
you what people can
do with this API.

00:11:36.910 --> 00:11:39.670
So first off, we have
Maria Ly, who's

00:11:39.670 --> 00:11:41.580
co-founder of Skimble.

00:11:41.580 --> 00:11:44.390
She'll be downloading their
app, Workout Trainer.

00:11:49.710 --> 00:11:52.840
MARIA LY: Thanks, Ross, and
good afternoon, everyone.

00:11:52.840 --> 00:11:56.310
Without a doubt, everyone wants
to live well and be fit,

00:11:56.310 --> 00:11:57.680
but it's not always easy.

00:11:57.680 --> 00:12:01.310
We lack guidance, motivation,
and constantly feel like life

00:12:01.310 --> 00:12:03.740
itself gets in the way.

00:12:03.740 --> 00:12:07.270
Fortunately, with the
proliferation of a variety of

00:12:07.270 --> 00:12:10.400
Android devices, we can now
overcome these challenges in a

00:12:10.400 --> 00:12:13.046
fun, dynamic, and social way.

00:12:13.046 --> 00:12:18.270
At Skimble, we are developing
the next-generation fitness

00:12:18.270 --> 00:12:20.140
experience for mobile.

00:12:20.140 --> 00:12:23.530
Specifically, our latest
application, Workout Trainer,

00:12:23.530 --> 00:12:28.230
provides thousands of workouts
on your mobile device.

00:12:28.230 --> 00:12:31.760
Our application provides a
multimedia-rich experience to

00:12:31.760 --> 00:12:35.380
take out the guesswork in
exercise, and our approach has

00:12:35.380 --> 00:12:37.790
helped us organically grow to
be a top-three health and

00:12:37.790 --> 00:12:41.470
fitness application
on Google Play.

00:12:41.470 --> 00:12:45.180
Did you know you can literally
exercise anywhere you are?

00:12:45.180 --> 00:12:49.560
You could be at home on the
couch, at the office, or even

00:12:49.560 --> 00:12:54.150
at Google I/O. On that note,
everyone stand up.

00:12:54.150 --> 00:12:55.400
Really.

00:12:55.400 --> 00:12:58.420
Get off your seats and
follow along to this.

00:12:58.420 --> 00:13:01.220
My co-founder, Gabe,
will cue us in.

00:13:01.220 --> 00:13:01.590
GABE VANRENREN: All right.

00:13:01.590 --> 00:13:05.100
We're going to start out with
some chest openers.

00:13:05.100 --> 00:13:05.445
[VIDEO PLAYBACK]

00:13:05.445 --> 00:13:08.000
-Stand or sit tall with your
arms in front, palm to palm.

00:13:08.000 --> 00:13:09.805
Inhale and open your
arms out and back.

00:13:09.805 --> 00:13:12.830
Feel your chest and shoulders
open up as you take in several

00:13:12.830 --> 00:13:13.680
deep breaths.

00:13:13.680 --> 00:13:15.700
Squeeze your shoulder blades,
return, and--

00:13:15.700 --> 00:13:16.410
[END VIDEO PLAYBACK]

00:13:16.410 --> 00:13:16.870
GABE VANRENREN: All right.

00:13:16.870 --> 00:13:18.120
Let's do march in place.

00:13:25.096 --> 00:13:25.570
[VIDEO PLAYBACK]

00:13:25.570 --> 00:13:26.050
[MUSIC PLAYING]

00:13:26.050 --> 00:13:27.217
-Stand tall, and optionally
rest your hands on

00:13:27.217 --> 00:13:29.050
the back of a chair.

00:13:29.050 --> 00:13:30.915
March in place by lifting
your knees up high.

00:13:34.730 --> 00:13:35.375
GABE VANRENREN: OK.

00:13:35.375 --> 00:13:36.980
Some finger bursts
and stretches.

00:13:41.100 --> 00:13:43.110
-Make tight fists
with your hands.

00:13:43.110 --> 00:13:45.200
Quickly stretch your fingers out
as far as they will go and

00:13:45.200 --> 00:13:46.580
hold for three counts.

00:13:46.580 --> 00:13:48.970
Relax and return them
back into fists.

00:13:48.970 --> 00:13:50.220
Repeat.

00:13:53.410 --> 00:13:53.880
GABE VANRENREN: All right.

00:13:53.880 --> 00:13:56.466
Shadow boxing.

00:13:56.466 --> 00:13:58.240
MARIA LY: Good one!

00:13:58.240 --> 00:14:00.620
-Stand in a boxer's stance
and start boxing.

00:14:00.620 --> 00:14:01.110
GABE VANRENREN: And
be careful!

00:14:01.110 --> 00:14:02.770
MALE SPEAKER: Pretend like you
are actually punching the

00:14:02.770 --> 00:14:04.020
person in front of you.

00:14:07.250 --> 00:14:10.900
GABE VANRENREN: And
last, let's do--

00:14:10.900 --> 00:14:12.540
back handsprings!

00:14:12.540 --> 00:14:14.005
But seriously, don't do this.

00:14:17.310 --> 00:14:19.923
-Begin with raised arms and
perform a squat while swinging

00:14:19.923 --> 00:14:20.646
your arms downward.

00:14:20.646 --> 00:14:23.538
Lean backwards, arch your
back, and thrust back.

00:14:23.538 --> 00:14:25.440
Flip over with locked
arms to the floor.

00:14:25.440 --> 00:14:28.864
Swing your legs over and snap
them down on the floor.

00:14:28.864 --> 00:14:29.780
GABE VANRENREN: All right.

00:14:29.780 --> 00:14:32.890
MARIA LY: Thanks, Gabe.

00:14:32.890 --> 00:14:33.560
[END VIDEO PLAYBACK]

00:14:33.560 --> 00:14:34.765
GABE VANRENREN: Hey, no
good demo without a

00:14:34.765 --> 00:14:36.820
little crash bug.

00:14:36.820 --> 00:14:37.990
MARIA LY: You guys didn't
expect that

00:14:37.990 --> 00:14:39.140
one coming, did you?

00:14:39.140 --> 00:14:40.900
Thanks for your participation.

00:14:40.900 --> 00:14:43.190
Feel free to sit down now.

00:14:43.190 --> 00:14:44.870
And let me tell you a little
bit about the YouTube

00:14:44.870 --> 00:14:48.160
integration we did within
in Workout Trainer.

00:14:48.160 --> 00:14:51.840
We used the YouTube Android
Player API to instantly stream

00:14:51.840 --> 00:14:54.950
all of our gorgeous HD exercise
video onto any

00:14:54.950 --> 00:14:56.770
Android device.

00:14:56.770 --> 00:14:59.270
During the workout, as you could
tell, we were able to

00:14:59.270 --> 00:15:03.060
choose a variety of exercises,
and the API provided us with a

00:15:03.060 --> 00:15:06.720
handy thumbnail view which
we could select from.

00:15:06.720 --> 00:15:09.820
That makes our job a lot easier,
and we could focus

00:15:09.820 --> 00:15:12.720
more on creating a great workout
experience, rather

00:15:12.720 --> 00:15:17.020
than dealing with streaming
video, thumbnail creation, and

00:15:17.020 --> 00:15:21.160
everything else that's
cumbersome with video.

00:15:21.160 --> 00:15:24.170
Ladies and gents, life will
continue to get in the way,

00:15:24.170 --> 00:15:27.530
and by today, you're probably
going to be sitting in your

00:15:27.530 --> 00:15:29.670
chair for over six hours.

00:15:29.670 --> 00:15:33.380
Fortunately, with Skimble's
Workout Trainer application

00:15:33.380 --> 00:15:37.880
and its YouTube Android API
integration, the exercise

00:15:37.880 --> 00:15:40.050
coaching you need to
get active is just

00:15:40.050 --> 00:15:41.840
an Android tap away.

00:15:41.840 --> 00:15:42.600
Amazing!

00:15:42.600 --> 00:15:43.836
Thanks.

00:15:43.836 --> 00:15:45.086
ROSS MCELROY: Thanks
very much, Maria.

00:15:48.140 --> 00:15:51.140
Getting a room of Google I/O
attendees to do exercise--

00:15:51.140 --> 00:15:53.600
I think that's almost more of
an achievement than Sergey's

00:15:53.600 --> 00:15:56.370
parachute jump there.

00:15:56.370 --> 00:15:58.830
So next up, we have Tony
Jacobs, who's SVP of

00:15:58.830 --> 00:16:00.280
technology at Gloto.

00:16:00.280 --> 00:16:02.660
And he's going to be demoing
the Gloto Designer.

00:16:05.470 --> 00:16:06.720
TONY JACOBS: Thanks, Ross.

00:16:09.405 --> 00:16:11.390
Hi, guys.

00:16:11.390 --> 00:16:14.810
Gloto provides a self-service
consumer engagement platform

00:16:14.810 --> 00:16:16.490
called Gloto Designer.

00:16:16.490 --> 00:16:19.280
Fortune 500 brands, publishers,
and agencies use

00:16:19.280 --> 00:16:22.360
this sophisticated web app to
engage their audience with

00:16:22.360 --> 00:16:23.845
scalable mobile and
web experiences.

00:16:26.940 --> 00:16:29.700
Our customers tend to demand
creative control over

00:16:29.700 --> 00:16:32.180
absolutely everything
they release.

00:16:32.180 --> 00:16:34.830
When working with YouTube, they
want their own videos in

00:16:34.830 --> 00:16:38.340
their own context with their
own monetization.

00:16:38.340 --> 00:16:40.990
Of course, they usually have
a tight budget and a really

00:16:40.990 --> 00:16:42.930
short deadline.

00:16:42.930 --> 00:16:46.440
This is why we built the Gloto
Designer, and more to the

00:16:46.440 --> 00:16:49.280
point, the mobile uploader for
the Gloto Designer, that lets

00:16:49.280 --> 00:16:53.320
us use our HTML 5 editor to make
it ridiculously easy--

00:16:53.320 --> 00:16:54.460
very easy--

00:16:54.460 --> 00:16:59.410
to create well-constructed
native apps to browse, record,

00:16:59.410 --> 00:17:02.460
and upload videos to YouTube.

00:17:02.460 --> 00:17:06.099
We've got a beta of the YouTube
Android API, and we

00:17:06.099 --> 00:17:09.050
were able to play videos inline
and full-screen in the

00:17:09.050 --> 00:17:12.910
app, and we were able to
do all this without any

00:17:12.910 --> 00:17:14.160
out-of-body experiences.

00:17:14.160 --> 00:17:16.380
Like the phrase.

00:17:16.380 --> 00:17:18.089
It only took about a day
or so to get this

00:17:18.089 --> 00:17:21.828
working, so Ross, Anton--

00:17:21.828 --> 00:17:23.109
good job.

00:17:23.109 --> 00:17:24.810
It was actually really,
really easy.

00:17:24.810 --> 00:17:28.580
So we actually prepared a video
to kind of make this a

00:17:28.580 --> 00:17:29.830
little bit easier
to understand.

00:17:35.650 --> 00:17:38.310
That is not the right one.

00:17:38.310 --> 00:17:41.050
There we go.

00:17:41.050 --> 00:17:45.720
So we made a really easy way for
customers to build their

00:17:45.720 --> 00:17:48.345
own amazing experiences and
apps right on the web.

00:17:48.345 --> 00:17:49.990
So as you can see, we're
concentrating on all the

00:17:49.990 --> 00:17:53.330
little details to make an
app feel just right--

00:17:53.330 --> 00:17:55.790
press dates on buttons and
player controls and all that.

00:17:55.790 --> 00:17:58.470
So you can see, it's just
playing right in the app.

00:17:58.470 --> 00:18:01.810
So we log into the free Gloto
Designer, and we'll just have

00:18:01.810 --> 00:18:03.060
a look and see what's
going on.

00:18:06.380 --> 00:18:08.780
So as you can see, there's
quite a few options here.

00:18:08.780 --> 00:18:11.360
We can build on the web,
we can build on mobile.

00:18:11.360 --> 00:18:14.180
But here, we're going to make a
mobile uploader for YouTube.

00:18:14.180 --> 00:18:16.340
That's why we're here.

00:18:16.340 --> 00:18:21.390
So as always, we have, complete
creative freedom.

00:18:21.390 --> 00:18:23.690
There's no templates forcing
the workflow.

00:18:23.690 --> 00:18:27.730
We can drag, we can rearrange,
and just build it out.

00:18:27.730 --> 00:18:30.590
And look, we have some
videos to browse.

00:18:30.590 --> 00:18:33.945
And when we tap them, they
play and go full-screen.

00:18:33.945 --> 00:18:37.000
Of course, you can embed videos,
you can change colors,

00:18:37.000 --> 00:18:38.150
you can change backgrounds,
you can do

00:18:38.150 --> 00:18:39.120
all of that fun stuff.

00:18:39.120 --> 00:18:41.580
And we're just playing with the
buttons for now, just to

00:18:41.580 --> 00:18:42.750
keep it quick.

00:18:42.750 --> 00:18:45.600
And as always, it tends
to be pretty easy to

00:18:45.600 --> 00:18:47.020
preview on the device.

00:18:47.020 --> 00:18:47.490
Comes up.

00:18:47.490 --> 00:18:49.430
As you can see, the
videos play.

00:18:49.430 --> 00:18:52.310
Tap things, interact, and
actually move the system

00:18:52.310 --> 00:18:53.560
around pretty well.

00:18:56.140 --> 00:18:58.260
So we've built a bunch of
examples using this tool.

00:18:58.260 --> 00:19:00.450
You can see some very different

00:19:00.450 --> 00:19:02.360
layouts, color schemes.

00:19:02.360 --> 00:19:03.130
It's really important.

00:19:03.130 --> 00:19:04.720
There's no templates.

00:19:04.720 --> 00:19:07.610
We're not forcing any
designs on anyone.

00:19:07.610 --> 00:19:11.300
We're letting you have complete
creative freedom.

00:19:11.300 --> 00:19:12.970
You can follow a brand
style guide.

00:19:12.970 --> 00:19:15.950
You're not really concentrating
so much on

00:19:15.950 --> 00:19:19.650
building an Android experience
as much as you're building a

00:19:19.650 --> 00:19:20.700
consumer experience.

00:19:20.700 --> 00:19:22.700
It's great for the consumers.

00:19:22.700 --> 00:19:25.200
And a lot of different
options there.

00:19:25.200 --> 00:19:27.710
So Gloto Designer is a free
way to build awesome

00:19:27.710 --> 00:19:30.962
experiences very quickly, and
basically immediately test

00:19:30.962 --> 00:19:32.212
them on your device.

00:19:36.260 --> 00:19:38.460
And that's basically it.

00:19:38.460 --> 00:19:39.732
ROSS MCELROY: Thanks
very much, Tony.

00:19:46.000 --> 00:19:49.030
So last stop.

00:19:49.030 --> 00:19:53.730
We have Raghu Bala, the CTO of
Source Interlink Media, and

00:19:53.730 --> 00:19:56.180
he's going to be demoing
their app, Motor Trend.

00:19:56.180 --> 00:19:59.025
RAGHU BALA: Thank you, Ross.

00:19:59.025 --> 00:20:01.530
Can you guys hear me?

00:20:01.530 --> 00:20:02.120
No?

00:20:02.120 --> 00:20:02.220
OK.

00:20:02.220 --> 00:20:03.690
Now it's better.

00:20:03.690 --> 00:20:05.245
So I'm Raghu Bala.

00:20:05.245 --> 00:20:06.560
I'm with Source Interlink
Media.

00:20:06.560 --> 00:20:08.050
I'm the CTO.

00:20:08.050 --> 00:20:12.770
And with me is Wayne May, one
of our Android developers.

00:20:12.770 --> 00:20:16.340
Source Interlink Media is an
enthusiast media company.

00:20:16.340 --> 00:20:20.020
We've got a number of brands,
some of which you guys might

00:20:20.020 --> 00:20:21.350
be familiar with.

00:20:21.350 --> 00:20:26.160
Among them, we have Motor Trend,
Hot Rod, Automobile,

00:20:26.160 --> 00:20:29.110
Surfing, and so on.

00:20:29.110 --> 00:20:31.830
These are brands that are loved
by enthusiasts who are

00:20:31.830 --> 00:20:36.550
into action sports and outdoor
lifestyle and so on.

00:20:36.550 --> 00:20:44.950
And one of the brands, Motor
Trend, we built a Google TV

00:20:44.950 --> 00:20:46.770
app last year.

00:20:46.770 --> 00:20:52.630
And recently, for this show, we
have done a prototype using

00:20:52.630 --> 00:20:58.830
the latest Android Player API,
which we are going to

00:20:58.830 --> 00:21:01.040
demonstrate here.

00:21:01.040 --> 00:21:05.590
So before we begin, I want to
say that for a media company,

00:21:05.590 --> 00:21:08.800
there are three elements that
are very important, first of

00:21:08.800 --> 00:21:10.150
which is reach.

00:21:10.150 --> 00:21:13.880
So Google TV is an important
platform for us, because it

00:21:13.880 --> 00:21:19.020
enables us to distribute our
content and actually reach

00:21:19.020 --> 00:21:22.340
consumers at their homes
on a big screen.

00:21:22.340 --> 00:21:27.180
So that, in and of itself, is
an important element for us.

00:21:27.180 --> 00:21:29.380
The second part of
it is engagement.

00:21:29.380 --> 00:21:32.360
So once you reach the consumer,
the second thing is

00:21:32.360 --> 00:21:37.240
to get them to consume your
content and come back and

00:21:37.240 --> 00:21:40.120
revisit your sites and
your apps and so on.

00:21:40.120 --> 00:21:43.210
So Google TV gives us a kind
of a platform where we can

00:21:43.210 --> 00:21:47.670
reach out to consumers and so
on, and then engage them with

00:21:47.670 --> 00:21:48.610
video content.

00:21:48.610 --> 00:21:51.260
And we're going to see some
examples in a couple of

00:21:51.260 --> 00:21:52.490
minutes here.

00:21:52.490 --> 00:21:54.830
And then the final thing
is monetization.

00:21:54.830 --> 00:21:58.435
So you've got hold of your
audience, they are consuming

00:21:58.435 --> 00:22:01.090
your content, but you also
have to make some money.

00:22:01.090 --> 00:22:05.610
So the Android Player API, what
it does for us is all of

00:22:05.610 --> 00:22:07.420
these three elements.

00:22:07.420 --> 00:22:10.340
We actually have an app that has
been performing very well

00:22:10.340 --> 00:22:11.940
on Google TV.

00:22:11.940 --> 00:22:14.990
It's in the Android Marketplace,
Google Play.

00:22:14.990 --> 00:22:18.300
For about nine months, it's
been the top few apps

00:22:18.300 --> 00:22:19.550
throughout.

00:22:19.550 --> 00:22:22.320
And that's all [? doing ?]
in the marketplace.

00:22:22.320 --> 00:22:26.160
This app has been built
in the last two weeks

00:22:26.160 --> 00:22:27.230
using the new API.

00:22:27.230 --> 00:22:33.980
So it's pretty, I'd say,
alpha-level application.

00:22:33.980 --> 00:22:38.020
But we were able to get it up
and running pretty quick, and

00:22:38.020 --> 00:22:42.380
that's a testament to how
easy the API is to use.

00:22:42.380 --> 00:22:46.400
And so what I'm going to do is
highlight three features in

00:22:46.400 --> 00:22:50.410
the API that were
relevant to us.

00:22:50.410 --> 00:22:54.500
The first one is, you're going
to see on the left side, on

00:22:54.500 --> 00:22:57.200
the left panel there,
a playlist.

00:22:57.200 --> 00:23:03.300
So one can bring in YouTube's
playlist into your app easily.

00:23:03.300 --> 00:23:06.570
And so we have set up a number
of playlists like Epic Drives,

00:23:06.570 --> 00:23:13.130
Head 2 Head, things that are
relevant in the auto space.

00:23:13.130 --> 00:23:19.300
Once you select a particular
playlist, then you get to see

00:23:19.300 --> 00:23:23.850
thumbnails of videos that
are in that playlist.

00:23:23.850 --> 00:23:25.580
And once you click a particular

00:23:25.580 --> 00:23:31.610
video, what we did was--

00:23:31.610 --> 00:23:33.300
this is the monetization
aspect.

00:23:33.300 --> 00:23:37.250
So before playing the video,
we show you an ad.

00:23:37.250 --> 00:23:40.840
And we did this inset view of
the video that's coming up

00:23:40.840 --> 00:23:47.450
next and played the ad first on
full screen, and then jump

00:23:47.450 --> 00:23:50.145
into the video next.

00:23:50.145 --> 00:23:50.620
[VIDEO PLAYBACK]

00:23:50.620 --> 00:23:53.000
---start small, usually with
"what if?" being the first

00:23:53.000 --> 00:23:54.610
question brought about.

00:23:54.610 --> 00:23:58.460
In my case, immediately after
the "what if" came, we drove,

00:23:58.460 --> 00:23:59.890
and a Subaru BRZ.

00:24:09.106 --> 00:24:11.090
[END VIDEO PLAYBACK]

00:24:11.090 --> 00:24:14.490
RAGHU BALA: And then finally,
one other element that is

00:24:14.490 --> 00:24:15.230
interesting--

00:24:15.230 --> 00:24:17.900
you want to go to the
widget that we did?

00:24:17.900 --> 00:24:21.070
So on the desktop in Google TV,
one of the things that you

00:24:21.070 --> 00:24:23.240
can do is create this widget.

00:24:23.240 --> 00:24:26.150
And the interesting thing about
the widget is, normally,

00:24:26.150 --> 00:24:28.220
if you don't have a widget, what
you have to do is, you

00:24:28.220 --> 00:24:31.380
have hope that your consumer
comes back, goes into the app,

00:24:31.380 --> 00:24:34.810
looks for new content, and then
launches that content.

00:24:34.810 --> 00:24:37.290
So here with the widget, what
you can do is you can actually

00:24:37.290 --> 00:24:40.300
notify the consumer
of latest content.

00:24:40.300 --> 00:24:43.900
And that way, you can just click
on the video directly

00:24:43.900 --> 00:24:46.390
and jump into the content
immediately without having to

00:24:46.390 --> 00:24:49.570
navigate through the app
and so on and so forth.

00:24:49.570 --> 00:24:52.570
So these are three features that
we used as part of this

00:24:52.570 --> 00:24:56.940
quick two-week prototype
that we built.

00:24:56.940 --> 00:24:58.980
ROSS MCELROY: Thank
you, Raghu.

00:24:58.980 --> 00:25:00.230
Thank you very much.

00:25:05.970 --> 00:25:08.750
So next off, I thought I'd just
go into a bit more detail

00:25:08.750 --> 00:25:13.530
into how you can use the API to
embed YouTube in your app.

00:25:13.530 --> 00:25:16.280
So the first thing you need to
do to use the API is register

00:25:16.280 --> 00:25:18.640
for a YouTube developer key.

00:25:18.640 --> 00:25:23.010
The website for this, a link to
it will be up on the Help

00:25:23.010 --> 00:25:26.520
website once we've got the
API fully released.

00:25:26.520 --> 00:25:27.930
But it looks something
like this.

00:25:27.930 --> 00:25:31.200
You fill in details of your
app, and then once you've

00:25:31.200 --> 00:25:36.230
saved the details, you'll have
a developer key listed here.

00:25:36.230 --> 00:25:37.790
And so you use that
developer key to

00:25:37.790 --> 00:25:43.020
initialize the YouTube API.

00:25:43.020 --> 00:25:49.060
So once you've done that, the
easiest way to embed a video

00:25:49.060 --> 00:25:51.830
into your app is to use
what we call a kind of

00:25:51.830 --> 00:25:53.070
fire-and-forget playback.

00:25:53.070 --> 00:25:55.640
So we've got an activity
called a YouTube Player

00:25:55.640 --> 00:26:00.120
activity, and that will allow
you just to play a video in

00:26:00.120 --> 00:26:04.040
full screen or in a kind of
lightbox mode without having

00:26:04.040 --> 00:26:05.870
to worry about it very easily.

00:26:05.870 --> 00:26:08.990
So here, we have fire-and-forget
playback.

00:26:08.990 --> 00:26:11.660
This is all the code that you
really need for that.

00:26:11.660 --> 00:26:13.900
So you first initialize the
YouTube library using the

00:26:13.900 --> 00:26:16.460
developer key and your current
context, as we

00:26:16.460 --> 00:26:18.180
talked about earlier.

00:26:18.180 --> 00:26:23.540
And then, when you want to play
the video, you create an

00:26:23.540 --> 00:26:24.645
intent using the
YouTubePlayerAct

00:26:24.645 --> 00:26:29.060
ivity.createintent method, pass
it the video ID, and then

00:26:29.060 --> 00:26:32.020
just start that intent, and
it'll start an activity that

00:26:32.020 --> 00:26:34.062
plays the video full-screen.

00:26:34.062 --> 00:26:36.520
Easy as that.

00:26:36.520 --> 00:26:38.240
You can do a few more
things with this.

00:26:38.240 --> 00:26:41.250
You can pass in a playlist or
list of videos, as well, give

00:26:41.250 --> 00:26:43.900
it a particular start index that
you want to start from.

00:26:43.900 --> 00:26:46.260
This will allow the users to
navigate through those with

00:26:46.260 --> 00:26:49.580
onscreen Next and Previous
buttons on the videos.

00:26:49.580 --> 00:26:51.590
And finally, we have
a lightbox mode.

00:26:51.590 --> 00:26:54.050
So if you would prefer to have
it kind of appearing popping

00:26:54.050 --> 00:26:57.423
out of your activity with some
of your activities showing

00:26:57.423 --> 00:26:59.080
around the edges, you
can do that as well.

00:26:59.080 --> 00:27:01.910
That was what was shown
in the first screen

00:27:01.910 --> 00:27:03.170
shot I showed earlier.

00:27:03.170 --> 00:27:06.170
So that's really how easy
it is to embed a video.

00:27:06.170 --> 00:27:08.980
But of course, this is a
kind of very easy but

00:27:08.980 --> 00:27:10.880
less flexible option.

00:27:10.880 --> 00:27:16.560
You don't get to interact with
your UI using this option.

00:27:16.560 --> 00:27:18.950
So we have another option, which
is to actually embed the

00:27:18.950 --> 00:27:21.600
YouTube video within
your UI itself.

00:27:21.600 --> 00:27:24.440
And to do that, we have
two classes--

00:27:24.440 --> 00:27:26.660
there's the YouTube Player
fragment and a

00:27:26.660 --> 00:27:27.940
YouTube Player view.

00:27:27.940 --> 00:27:31.460
They're both very similar, but
one, of course, is a fragment,

00:27:31.460 --> 00:27:32.820
and one is a view.

00:27:32.820 --> 00:27:34.510
And there's some consequences
to that.

00:27:34.510 --> 00:27:37.070
The fragment is the preferred
option for you to use.

00:27:37.070 --> 00:27:39.410
We also have support fragment,
so if you need to use the

00:27:39.410 --> 00:27:41.150
support library, you
can use that.

00:27:41.150 --> 00:27:43.280
But if you can't do that,
then we have the

00:27:43.280 --> 00:27:44.510
player view, as well.

00:27:44.510 --> 00:27:47.310
I'll tell you about the
restrictions on that.

00:27:47.310 --> 00:27:52.570
So to embed the YouTube Player
fragment, it's just a normal

00:27:52.570 --> 00:27:55.380
view, so you can embed it in
your view hierarchy, as you

00:27:55.380 --> 00:27:58.070
would any other view, and
your layout XML file.

00:27:58.070 --> 00:28:01.010
So here, if we hide that, we're
embedding this fragment

00:28:01.010 --> 00:28:07.010
into the layout XML, we're
giving it an ID, and then the

00:28:07.010 --> 00:28:08.310
demo activity--

00:28:08.310 --> 00:28:10.160
again, we would need to
initialize the libraries in

00:28:10.160 --> 00:28:13.120
onCreate, but then when we want
to play a video, we can

00:28:13.120 --> 00:28:18.580
find that fragment using
findFragmentByID, and then

00:28:18.580 --> 00:28:20.040
load the video into it.

00:28:20.040 --> 00:28:23.930
So here I'm casting this
fragment to YouTube Player.

00:28:23.930 --> 00:28:26.310
That's an interface object,
which both the YouTube

00:28:26.310 --> 00:28:29.680
Fragment and YouTube Player
View implement.

00:28:29.680 --> 00:28:32.460
And that provides the interface
for all the API

00:28:32.460 --> 00:28:35.250
access you might want for
playing the videos.

00:28:35.250 --> 00:28:38.380
So playing, pausing, loading,
queueing up videos, skipping

00:28:38.380 --> 00:28:40.480
through playlists, seeking
through videos.

00:28:40.480 --> 00:28:42.400
I'll not go into all the
details, but the things you

00:28:42.400 --> 00:28:44.600
would expect to be able to
do on a player view.

00:28:47.140 --> 00:28:49.700
As I said, the other option is
for you to use a YouTube

00:28:49.700 --> 00:28:51.080
player view.

00:28:51.080 --> 00:28:54.230
Now, we need to control the
life cycle of the Player

00:28:54.230 --> 00:28:57.940
views, and because of that, if
you're using a player view,

00:28:57.940 --> 00:29:01.380
you have to extend the activity
that we provide as

00:29:01.380 --> 00:29:02.100
part of the library.

00:29:02.100 --> 00:29:07.300
So we provide this YouTube Base
Activity, and you need to

00:29:07.300 --> 00:29:10.310
extend that rather than the
normal activity object.

00:29:10.310 --> 00:29:12.110
Once you've done that, you can
create a new YouTube player

00:29:12.110 --> 00:29:14.570
view, so that could be created
in your XML again, or here I'm

00:29:14.570 --> 00:29:17.990
just creating it in code, and
then you need to register that

00:29:17.990 --> 00:29:20.000
player view with the YouTube
Base Activity.

00:29:20.000 --> 00:29:22.520
So you can't make any
calls on the Player

00:29:22.520 --> 00:29:23.660
before you've done that.

00:29:23.660 --> 00:29:26.350
It's not initialized until
you've done that.

00:29:26.350 --> 00:29:28.904
Once you've done that, it will
act exactly the same way as a

00:29:28.904 --> 00:29:31.980
You Tube player fragment, and
you can load videos, use the

00:29:31.980 --> 00:29:35.060
same interface to seek and
programmatically control the

00:29:35.060 --> 00:29:37.580
player view.

00:29:37.580 --> 00:29:42.460
So that's how easy it
is to embed videos.

00:29:42.460 --> 00:29:46.030
Now of course, what you want
with these videos is for great

00:29:46.030 --> 00:29:47.060
full-screen support.

00:29:47.060 --> 00:29:50.300
So we have the controls already
on the player view,

00:29:50.300 --> 00:29:52.220
and there's a full-screen button
there, and when you

00:29:52.220 --> 00:29:55.260
press that button out
the box, it works.

00:29:55.260 --> 00:29:57.330
So there's a default
implementation

00:29:57.330 --> 00:29:59.410
of full-screen handling.

00:29:59.410 --> 00:30:02.960
And the way it's implemented is
that we throw a dialogue on

00:30:02.960 --> 00:30:06.460
top of your activity, and we
start playback in that.

00:30:06.460 --> 00:30:10.840
So that means you don't need to
perform any additional code

00:30:10.840 --> 00:30:14.320
in your application to
get full screen.

00:30:14.320 --> 00:30:16.290
But unfortunately, because
we're doing that, it

00:30:16.290 --> 00:30:18.810
disconnects the media player,
and we need to reconnect it,

00:30:18.810 --> 00:30:21.150
which involves potential
buffering.

00:30:21.150 --> 00:30:24.760
And so it's not the most
seamless experience for users.

00:30:24.760 --> 00:30:28.540
So our recommended method for
handling full screen is to use

00:30:28.540 --> 00:30:31.320
a custom full-screen handler.

00:30:31.320 --> 00:30:37.390
So to do that, the only thing
you really need to do is when

00:30:37.390 --> 00:30:41.370
full-screen events happen, you
need to react to that by

00:30:41.370 --> 00:30:44.370
making sure the player view
expands to fill the full view

00:30:44.370 --> 00:30:47.290
hierarchy of your activity.

00:30:47.290 --> 00:30:48.760
We then have Helpers
that do almost

00:30:48.760 --> 00:30:49.600
everything else for you.

00:30:49.600 --> 00:30:53.670
So hiding the System UI,
handling orientation changes,

00:30:53.670 --> 00:30:55.820
all that stuff is automatically
handled for you

00:30:55.820 --> 00:30:58.080
unless you specify that you
don't want us to handle it

00:30:58.080 --> 00:30:59.530
automatically.

00:30:59.530 --> 00:31:03.040
And so this provides a really
seamless transition with no

00:31:03.040 --> 00:31:06.820
rebuffering, so it's
the best way to

00:31:06.820 --> 00:31:09.000
integrate into your apps.

00:31:09.000 --> 00:31:13.290
So here's the code here for
handling full-screen.

00:31:13.290 --> 00:31:16.712
I'll just go through it in
detail, so I'll hide some of

00:31:16.712 --> 00:31:18.810
the extraneous detail.

00:31:18.810 --> 00:31:20.570
So the first thing you
need to do is have an

00:31:20.570 --> 00:31:22.100
OnFullScreenListener listener.

00:31:22.100 --> 00:31:23.620
So here, we're just
implementing the

00:31:23.620 --> 00:31:27.010
OnFullScreenListener as part
of the activity itself.

00:31:27.010 --> 00:31:30.740
And by doing that, you'll have
to implement the OnFullScreen

00:31:30.740 --> 00:31:32.970
method you see below here.

00:31:32.970 --> 00:31:38.330
And the library will then call
this OnFullScreen method

00:31:38.330 --> 00:31:43.570
whenever the player is
transitioning to full screen.

00:31:43.570 --> 00:31:46.340
And so here, what we're doing
is we're saving the full

00:31:46.340 --> 00:31:51.880
screen into a field and then
re-laying out the activity.

00:31:51.880 --> 00:31:53.780
And to enable this custom
full-screen control, you can

00:31:53.780 --> 00:31:57.100
see in onCreate method, we have
player dot enable custom

00:31:57.100 --> 00:32:01.090
full-screen helper, which
takes in your

00:32:01.090 --> 00:32:01.840
OnFullScreenListener.

00:32:01.840 --> 00:32:04.360
So in our case, this.

00:32:04.360 --> 00:32:11.150
And so if you see the Do Layout
function here, the only

00:32:11.150 --> 00:32:13.640
changes we would need to do in
the Do Layout is if we are

00:32:13.640 --> 00:32:19.200
going to full-screen, we have to
set the player view to have

00:32:19.200 --> 00:32:20.720
the full size of the view.

00:32:20.720 --> 00:32:22.420
So here, we're setting
it to Match Parent.

00:32:22.420 --> 00:32:27.170
And we hide all the other UI
elements, so other views,

00:32:27.170 --> 00:32:27.780
visibility, [? dot view ?]

00:32:27.780 --> 00:32:28.860
[? dot gone. ?]

00:32:28.860 --> 00:32:32.050
And so you'd also do this, Do
Layout, whenever you're doing

00:32:32.050 --> 00:32:34.945
orientation changes
or otherwise.

00:32:37.620 --> 00:32:40.130
So that gives you a brief look
at one of the listeners, the

00:32:40.130 --> 00:32:41.300
OnFullScreenListener.

00:32:41.300 --> 00:32:43.240
There's a couple of other
listeners for listening to

00:32:43.240 --> 00:32:45.970
state of the player itself.

00:32:45.970 --> 00:32:47.200
So there's a
PlayerStateListener.

00:32:47.200 --> 00:32:51.560
This is a kind of
high-granularity listener for

00:32:51.560 --> 00:32:53.440
life cycle events
of the player.

00:32:53.440 --> 00:32:55.640
So things like loading a new
video, starting video

00:32:55.640 --> 00:32:59.640
playback, ending video playback,
and kind of stopping

00:32:59.640 --> 00:33:01.740
video playback or
error events.

00:33:01.740 --> 00:33:05.280
There's then another listener
called PlaybackEventListener,

00:33:05.280 --> 00:33:07.800
which is a more fine-grained
listener, which listens to

00:33:07.800 --> 00:33:09.140
events while playback
is happening.

00:33:09.140 --> 00:33:12.260
So things like the users click
Pause, click Resume, or skip

00:33:12.260 --> 00:33:15.060
to next video.

00:33:15.060 --> 00:33:17.400
So just to give a brief look
at the state transition

00:33:17.400 --> 00:33:19.720
diagram for these listeners.

00:33:19.720 --> 00:33:23.030
So the PlayerStateListener
runs something like this.

00:33:23.030 --> 00:33:27.230
You start in an uninitialized
state, you load a video, you

00:33:27.230 --> 00:33:30.230
get an unloading callback.

00:33:30.230 --> 00:33:32.680
And between unloading and any
other callback, you can't do

00:33:32.680 --> 00:33:33.870
anything with the
video player.

00:33:33.870 --> 00:33:36.480
Well, you can't do certain
functions such as checking the

00:33:36.480 --> 00:33:39.590
current time of the video or
other functions which would

00:33:39.590 --> 00:33:42.130
necessitate knowing what video
is loaded in the player,

00:33:42.130 --> 00:33:43.970
because it's not loaded yet.

00:33:43.970 --> 00:33:46.330
Once the video has been loaded,
you transition to an

00:33:46.330 --> 00:33:47.710
onLoaded callback.

00:33:47.710 --> 00:33:51.690
And when this happens, you have
a fully accessible player

00:33:51.690 --> 00:33:54.040
available to you.

00:33:54.040 --> 00:33:56.450
Now if you're queuing the video,
it'll stop there, until

00:33:56.450 --> 00:33:58.090
the user clicks Play.

00:33:58.090 --> 00:34:00.080
If you are loading it normally,
it will kind of

00:34:00.080 --> 00:34:02.530
auto-transition into playback.

00:34:02.530 --> 00:34:06.350
So you then get a call into
either onPlayingAd, if it

00:34:06.350 --> 00:34:08.610
starts playing an ad first,
or skips straight to

00:34:08.610 --> 00:34:09.730
onVideoStarted.

00:34:09.730 --> 00:34:11.620
And when that starts, it'll give
you the video ID that's

00:34:11.620 --> 00:34:13.219
currently playing.

00:34:13.219 --> 00:34:16.010
And once that video starts, if
you're in the middle of a

00:34:16.010 --> 00:34:18.510
playlist, and next and previous
is called, you may

00:34:18.510 --> 00:34:21.179
end up back in onLoading state
while it loads the next video.

00:34:21.179 --> 00:34:23.760
Or if you finish the playlist,
or you've only got one video

00:34:23.760 --> 00:34:27.210
playing, you transition out into
on onEnded, and that's

00:34:27.210 --> 00:34:28.889
the end of the state space.

00:34:28.889 --> 00:34:30.980
And of course, onError can
happen at any time here.

00:34:33.880 --> 00:34:37.810
The second listener, the
PlaybackEventListener, happens

00:34:37.810 --> 00:34:39.659
only when video playback
is happening.

00:34:39.659 --> 00:34:43.460
So in these two states here,
these events can be firing.

00:34:43.460 --> 00:34:47.429
So there's onPlay, onPause, and
onStop, which are called,

00:34:47.429 --> 00:34:50.280
as you would expect, when the
user presses Play, Pause,

00:34:50.280 --> 00:34:53.980
onStop when the video's ended,
or some other external reason,

00:34:53.980 --> 00:34:55.780
stop the video playback.

00:34:55.780 --> 00:34:58.910
And then onSkip, if the user
decides to scrub through the

00:34:58.910 --> 00:35:00.960
video, it'll tell you where
the user has finished

00:35:00.960 --> 00:35:02.160
scrubbing to.

00:35:02.160 --> 00:35:04.290
And then there's an onBuffering
callback, which

00:35:04.290 --> 00:35:05.400
lets you know that the video is

00:35:05.400 --> 00:35:08.225
buffering or stopped buffering.

00:35:08.225 --> 00:35:11.860
So there's a bunch more example
code in the API.

00:35:11.860 --> 00:35:14.800
Most of it goes through things
which I've discussed here in

00:35:14.800 --> 00:35:16.250
the deep dive.

00:35:16.250 --> 00:35:18.330
There's also a video wall
example for a bit more of an

00:35:18.330 --> 00:35:20.680
idea of what you could
do with the API.

00:35:20.680 --> 00:35:24.930
And there's also a bunch of
helper functions for being

00:35:24.930 --> 00:35:27.390
able to fire off intents to
the main YouTube App, for

00:35:27.390 --> 00:35:30.140
example, to upload a video or
play back a video in the main

00:35:30.140 --> 00:35:33.590
YouTube app, as well.

00:35:33.590 --> 00:35:37.000
So with that, I'd like
to bring Anton

00:35:37.000 --> 00:35:38.160
back up to the stage.

00:35:38.160 --> 00:35:40.290
He's going to be doing a live
coding demo to show you how

00:35:40.290 --> 00:35:43.610
easy it is to build an app
from scratch with the new

00:35:43.610 --> 00:35:45.640
YouTube Player API.

00:35:45.640 --> 00:35:46.280
ANTON HANSSON: All right.

00:35:46.280 --> 00:35:47.600
Thank you, Ross.

00:35:47.600 --> 00:35:52.490
So what I'd like to do is to
create a very simple demo

00:35:52.490 --> 00:35:57.080
application from scratch, which
just shows you how easy

00:35:57.080 --> 00:35:59.310
it is to get started in YouTube
API, and hopefully how

00:35:59.310 --> 00:36:03.390
easy it would be to embed
into your apps, as well.

00:36:03.390 --> 00:36:09.190
So I've started here with a
clean Eclipse workspace, which

00:36:09.190 --> 00:36:12.110
only has the import library
project, which we distribute

00:36:12.110 --> 00:36:14.560
with the API.

00:36:14.560 --> 00:36:16.970
So what I'm going to do here is
just to create the new app

00:36:16.970 --> 00:36:24.915
project, which will reference
this library project.

00:36:29.126 --> 00:36:30.963
Let's see--

00:36:30.963 --> 00:36:34.570
I have to add that there, in
the Eclipse preferences.

00:36:34.570 --> 00:36:39.180
And second thing we need to do
is to include two permissions

00:36:39.180 --> 00:36:41.900
that the library requires,
which is our internet and

00:36:41.900 --> 00:36:43.870
network state.

00:36:43.870 --> 00:36:46.710
We'll just add them to our
application manifest, as well.

00:36:50.900 --> 00:36:54.780
So that's really all the setup
you need to start using the

00:36:54.780 --> 00:36:57.740
library here.

00:36:57.740 --> 00:37:04.500
As Ross mentioned, we have two
ways of putting a player view

00:37:04.500 --> 00:37:05.620
into our hierarchy.

00:37:05.620 --> 00:37:08.850
One is the fragment, and one
is just a plain view.

00:37:08.850 --> 00:37:13.520
So what I'm going to do here
is just add the plain view.

00:37:16.761 --> 00:37:21.080
So I'm adding that here to the
default layout, which is this

00:37:21.080 --> 00:37:22.330
linear layout.

00:37:22.330 --> 00:37:25.580
I'm going to make it share the
available space here with the

00:37:25.580 --> 00:37:26.830
text here above.

00:37:37.580 --> 00:37:40.860
So just setting the height here
to 0, and then setting a

00:37:40.860 --> 00:37:42.390
weight on this guy.

00:37:45.660 --> 00:37:47.000
And I'll do the same
for TextView here.

00:37:53.150 --> 00:37:55.120
Add an ID to this guy, as well,
so I can reference him

00:37:55.120 --> 00:37:56.370
in the code later.

00:37:59.480 --> 00:37:59.800
All right.

00:37:59.800 --> 00:38:02.000
So that will be our layout.

00:38:02.000 --> 00:38:05.960
Going back to the code, the
first thing you need to do

00:38:05.960 --> 00:38:10.200
before interacting with the
library is to initialize the

00:38:10.200 --> 00:38:12.870
library with your
developer key.

00:38:12.870 --> 00:38:17.890
So what you pass in here is the
context that we're using

00:38:17.890 --> 00:38:19.965
and a developer key.

00:38:19.965 --> 00:38:23.810
I have my developer
key right here.

00:38:23.810 --> 00:38:25.350
Just copy that into our app.

00:38:31.655 --> 00:38:32.150
There.

00:38:32.150 --> 00:38:34.245
So I'll just pass the
developer key.

00:38:34.245 --> 00:38:36.740
Now this is something you
really want to do in a

00:38:36.740 --> 00:38:38.830
once-per-app kind of thing.

00:38:38.830 --> 00:38:43.330
So in the onCreate of your
application object would be a

00:38:43.330 --> 00:38:44.100
good candidate.

00:38:44.100 --> 00:38:45.745
But for now, I'll just put
it in the onCreate.

00:38:48.930 --> 00:38:52.050
Now I'll want to get a reference
to the player view,

00:38:52.050 --> 00:38:58.640
which we have in our hierarchy,
so I'll just use

00:38:58.640 --> 00:38:59.890
findViewById here.

00:39:08.091 --> 00:39:10.680
And I'll get a reference to
the TextView here as well.

00:39:18.390 --> 00:39:18.730
Cool.

00:39:18.730 --> 00:39:23.980
And as Ross mentioned, if we use
the player view, we also

00:39:23.980 --> 00:39:28.810
need to extend the activity that
we provide, the YouTube

00:39:28.810 --> 00:39:32.270
Base Activity, so we can
hook into the life

00:39:32.270 --> 00:39:33.755
cycle of the activity.

00:39:33.755 --> 00:39:39.470
So I'll just add that here,
YouTubeBaseActivity, and I'll

00:39:39.470 --> 00:39:43.180
just register it here.

00:39:43.180 --> 00:39:46.980
registerPlayerView,
playerView.

00:39:46.980 --> 00:39:50.390
So that's kind of all the
boilerplate you need to start

00:39:50.390 --> 00:39:52.380
using this player view.

00:39:52.380 --> 00:39:58.420
What I'm going do in this demo
is just to, in the onResume

00:39:58.420 --> 00:40:03.870
method, I'll just call
playerView, loadVideo, and

00:40:03.870 --> 00:40:08.215
I'll pass in the player video
ID that I specified above.

00:40:11.185 --> 00:40:12.410
All right.

00:40:12.410 --> 00:40:13.700
So let's try this.

00:40:18.290 --> 00:40:22.810
So I've used loadVideo here, so
the expectation is that the

00:40:22.810 --> 00:40:25.640
app will start, and the video
will start playing

00:40:25.640 --> 00:40:27.120
automatically here.

00:40:27.120 --> 00:40:28.370
Whoopsie.

00:40:30.920 --> 00:40:32.170
Checking the cable.

00:40:44.420 --> 00:40:45.670
There we go.

00:40:53.164 --> 00:40:53.650
All right.

00:40:53.650 --> 00:40:54.290
It works.

00:40:54.290 --> 00:40:58.510
So great.

00:40:58.510 --> 00:40:59.250
All right.

00:40:59.250 --> 00:41:00.470
So these are controls here.

00:41:00.470 --> 00:41:03.320
You can kind of skip back and
forth, and you can pause the

00:41:03.320 --> 00:41:09.250
video, and you can toggle the
quality, and use captions, if

00:41:09.250 --> 00:41:11.020
they're available,
[INAUDIBLE].

00:41:11.020 --> 00:41:18.040
And so the downside of the
full-screen interpretation

00:41:18.040 --> 00:41:20.350
becomes obvious here when we
need to kind of rebuffer when

00:41:20.350 --> 00:41:24.320
we go into full screen,
which is not ideal.

00:41:24.320 --> 00:41:28.460
And so one way to easily improve
this demo would be to

00:41:28.460 --> 00:41:31.690
just handle the full screen
event ourselves.

00:41:31.690 --> 00:41:34.686
So that's the next thing
I'm going to add here.

00:41:34.686 --> 00:41:36.770
So just going out to
the activity again,

00:41:36.770 --> 00:41:38.020
and back to the code.

00:41:41.050 --> 00:41:43.730
Now, the custom full-screen
thing-- and there's a lot of

00:41:43.730 --> 00:41:46.480
things you need to handle when
you do custom full-screen,

00:41:46.480 --> 00:41:49.050
like the system UI.

00:41:49.050 --> 00:41:52.840
There's a navigation bar,
there's a system bar, there's

00:41:52.840 --> 00:41:55.180
all these kinds of automatically
added UI that

00:41:55.180 --> 00:41:58.080
you want to get rid of in full
screen, and the orientation

00:41:58.080 --> 00:42:01.580
changes are kind of nontrivial
to deal with

00:42:01.580 --> 00:42:02.900
correctly, as well.

00:42:02.900 --> 00:42:09.262
Luckily, we've done some work
and made it very easy, and we

00:42:09.262 --> 00:42:13.760
have a lot of helpers to
help you with that.

00:42:13.760 --> 00:42:16.360
So the first thing I want to do
here when enabling custom

00:42:16.360 --> 00:42:18.370
full-screen is to make sure that
the view that we play the

00:42:18.370 --> 00:42:24.260
video in does not get destroyed
when we change the

00:42:24.260 --> 00:42:26.000
orientation to landscape for
the full-screen mode.

00:42:26.000 --> 00:42:29.220
So the first thing I'm going
to do here is add to my

00:42:29.220 --> 00:42:32.040
manifest that I handle
some configuration

00:42:32.040 --> 00:42:33.920
changes on my own.

00:42:33.920 --> 00:42:37.190
So the ones that can occur when
we rotate the device are

00:42:37.190 --> 00:42:39.473
orientation, keyboardHidden,
and screenSize.

00:42:39.473 --> 00:42:43.660
So I'll just add that here, and
we'll make sure that the

00:42:43.660 --> 00:42:46.600
view does not get recreated.

00:42:46.600 --> 00:42:50.360
And then back in the activity,
we have a helper method called

00:42:50.360 --> 00:42:51.610
enableCustomFullScreen.

00:42:53.790 --> 00:42:55.950
So this does a lot of things.

00:42:55.950 --> 00:43:00.020
It enables all these orientation
changes, listeners

00:43:00.020 --> 00:43:03.810
to kind of do what you
want automatically.

00:43:03.810 --> 00:43:06.510
The only thing we need to do
is to make sure that the

00:43:06.510 --> 00:43:11.410
player view occupies all
the available space.

00:43:11.410 --> 00:43:14.190
And our player view will occupy
all the available

00:43:14.190 --> 00:43:16.300
space, as long as we just hide
the text view here, because

00:43:16.300 --> 00:43:18.160
they are sharing the available
space, so if we get rid of

00:43:18.160 --> 00:43:23.320
text view, then that
should be enough.

00:43:23.320 --> 00:43:25.380
So we'll just set the
visibility here.

00:43:25.380 --> 00:43:30.190
So in the listener here, this
will be invoked when someone

00:43:30.190 --> 00:43:31.920
clicks the Full-Screen button.

00:43:31.920 --> 00:43:34.640
So we check if, if we have
entered full screen, then we

00:43:34.640 --> 00:43:38.290
want to hide the text view.

00:43:38.290 --> 00:43:41.360
And if not, then we want to kind
of re-show the text view.

00:43:45.960 --> 00:43:46.420
All right.

00:43:46.420 --> 00:43:48.280
So I'm going to try launching
this again.

00:43:48.280 --> 00:43:51.890
Let's see, switching back.

00:44:06.040 --> 00:44:08.160
So the video loading,
just like before.

00:44:08.160 --> 00:44:11.210
Clicking the Full-Screen
button takes you into

00:44:11.210 --> 00:44:13.625
landscape, and it
keeps playing.

00:44:13.625 --> 00:44:16.370
You can start watching the
video in landscape mode.

00:44:16.370 --> 00:44:18.980
Rotating, taking it back to
portrait, we'll exit full

00:44:18.980 --> 00:44:22.052
screen, as you would expect.

00:44:22.052 --> 00:44:22.480
All right.

00:44:22.480 --> 00:44:24.720
So very easy, and a quick
demo of what can be

00:44:24.720 --> 00:44:26.070
done with the API.

00:44:26.070 --> 00:44:29.280
That's all we'll have
time to do today.

00:44:29.280 --> 00:44:31.090
Thank you very much,
and back to Ross.

00:44:34.670 --> 00:44:36.170
ROSS MCELROY: Thank
you, Anton.

00:44:36.170 --> 00:44:37.330
Great job.

00:44:37.330 --> 00:44:39.610
So that's all we have
time for today.

00:44:39.610 --> 00:44:43.020
So just a quick wrap-up.

00:44:43.020 --> 00:44:46.450
A new YouTube Android Player
API is on the way.

00:44:46.450 --> 00:44:48.940
It works across a wide variety
of Android devices and it's

00:44:48.940 --> 00:44:52.250
been optimized for mobile,
tablet, and Google TV.

00:44:52.250 --> 00:44:54.980
It's got support way
back to Froyo.

00:44:54.980 --> 00:44:59.130
There's full support for
monetized content, and there's

00:44:59.130 --> 00:45:01.980
lots of helper functionality,
as Anton demonstrated, for

00:45:01.980 --> 00:45:05.460
making sure you can make
a really polished app.

00:45:05.460 --> 00:45:08.540
So we'd like to thank you for
taking the time to join our

00:45:08.540 --> 00:45:11.590
session, and if you have any
questions, you can either and

00:45:11.590 --> 00:45:13.880
come up to one of the mics or
meet us at the Developer

00:45:13.880 --> 00:45:16.580
Sandbox after the talk.

00:45:16.580 --> 00:45:17.830
Thank you.

00:45:22.070 --> 00:45:24.430
AUDIENCE: Thank you for
the presentation.

00:45:24.430 --> 00:45:26.930
I just wanted to ask, just
regarding the full-screen

00:45:26.930 --> 00:45:31.560
mode, I didn't notice, why did
the YouTube video suddenly

00:45:31.560 --> 00:45:32.470
become landscape?

00:45:32.470 --> 00:45:34.860
I didn't see any code
related to that.

00:45:34.860 --> 00:45:38.950
ROSS MCELROY: So the automatic
behavior of the API that we

00:45:38.950 --> 00:45:42.710
deal with is, if you handle
configuration changes

00:45:42.710 --> 00:45:44.730
yourself, then we know the
video is not going to be

00:45:44.730 --> 00:45:47.180
destroyed when orientation
changes.

00:45:47.180 --> 00:45:49.565
And so in that case, in either
case, when you press Full

00:45:49.565 --> 00:45:52.500
Screen or rotate to landscape,
if you weren't handling that

00:45:52.500 --> 00:45:54.770
then, when we rotated it to
landscape, the whole video

00:45:54.770 --> 00:45:56.390
would be destroyed,
and it would start

00:45:56.390 --> 00:45:58.885
back from the beginning.

00:45:58.885 --> 00:46:01.360
AUDIENCE: I guess I understood
that part.

00:46:01.360 --> 00:46:03.810
But in that first case, when
you went to full screen, it

00:46:03.810 --> 00:46:04.790
had to rebuffer and
everything.

00:46:04.790 --> 00:46:06.590
And it remained portrait.

00:46:06.590 --> 00:46:07.030
ROSS MCELROY: Exactly.

00:46:07.030 --> 00:46:09.990
Because in the first case, Anton
hadn't specified that

00:46:09.990 --> 00:46:13.000
we're handling orientation
changes, and so the default

00:46:13.000 --> 00:46:19.890
then is not to reorientate
on full-screen changes.

00:46:19.890 --> 00:46:21.940
So if he had been in landscape
mode automatically, then it

00:46:21.940 --> 00:46:24.380
would have been full screen and
landscape, but we don't

00:46:24.380 --> 00:46:26.010
handle that otherwise.

00:46:26.010 --> 00:46:30.740
There are flags to enable you to
turn this on or off as you

00:46:30.740 --> 00:46:33.280
wish, but that's the kind
of default behavior.

00:46:33.280 --> 00:46:35.970
There's also a flag which
enables you to, whenever you

00:46:35.970 --> 00:46:38.060
rotate to landscape, to
automatically transition into

00:46:38.060 --> 00:46:38.890
full screen.

00:46:38.890 --> 00:46:41.260
So if you wanted to create a
portrait app which had no real

00:46:41.260 --> 00:46:44.566
landscape UI, but when you
rotated it went to full

00:46:44.566 --> 00:46:46.590
screen, you could
use that flag.

00:46:46.590 --> 00:46:50.650
And that's actually what is
being used in the I/O

00:46:50.650 --> 00:46:53.880
companion app for phones,
but not for tablets.

00:46:53.880 --> 00:46:54.180
Thank you.

00:46:54.180 --> 00:46:55.175
Next question.

00:46:55.175 --> 00:46:59.400
AUDIENCE: So does the API allow
playing multiple videos

00:46:59.400 --> 00:47:01.300
in multiple fragments at the
same time, no audio?

00:47:01.300 --> 00:47:02.080
ROSS MCELROY: No.

00:47:02.080 --> 00:47:04.300
There's only support for
playing one video.

00:47:04.300 --> 00:47:06.140
AUDIENCE: But you can select
from the thumbnails.

00:47:06.140 --> 00:47:09.130
ROSS MCELROY: You can create
what looks like a player view,

00:47:09.130 --> 00:47:12.000
and when the user presses Play,
you can move the player

00:47:12.000 --> 00:47:15.870
to that thumbnail and
play back there.

00:47:15.870 --> 00:47:17.940
That's what some of our partners
have been doing.

00:47:17.940 --> 00:47:20.320
So you could make the appearance
of multiple videos

00:47:20.320 --> 00:47:24.040
on a large UI, and then when
the user presses one of the

00:47:24.040 --> 00:47:27.170
thumbnails, then playback
happens in that thumbnail,

00:47:27.170 --> 00:47:29.200
with one video object.

00:47:29.200 --> 00:47:31.880
AUDIENCE: And will we have
a way to customize those

00:47:31.880 --> 00:47:34.510
thumbnails, like how they are
presented in a layout?

00:47:40.320 --> 00:47:42.230
ROSS MCELROY: We have helper
functions to give you a

00:47:42.230 --> 00:47:44.960
thumbnail, but you can also
download the thumbnails from

00:47:44.960 --> 00:47:48.560
the data library itself.

00:47:48.560 --> 00:47:50.930
So if you were wanting to do
some customization that way,

00:47:50.930 --> 00:47:55.250
you could potentially do it
using the data API instead,

00:47:55.250 --> 00:47:58.250
though not the customization on
the thumbnails views that

00:47:58.250 --> 00:48:02.760
we provide, as far as the
library other than showing a

00:48:02.760 --> 00:48:04.010
Play button or not.

00:48:06.340 --> 00:48:06.780
Sorry.

00:48:06.780 --> 00:48:07.810
At back?

00:48:07.810 --> 00:48:09.170
AUDIENCE: I have
two questions.

00:48:09.170 --> 00:48:14.440
The first one, the controls in
the player view, are we able

00:48:14.440 --> 00:48:15.430
to customize that?

00:48:15.430 --> 00:48:21.010
And also, the Like Video and Add
To Playlist, are they also

00:48:21.010 --> 00:48:23.030
in the built-in controls?

00:48:23.030 --> 00:48:28.340
ROSS MCELROY: So on your first
question, you can't customize

00:48:28.340 --> 00:48:31.320
the controls, but you can
select from a couple of

00:48:31.320 --> 00:48:32.490
controls, which we provide.

00:48:32.490 --> 00:48:34.560
So there's the default
controls,

00:48:34.560 --> 00:48:35.600
which we showed there.

00:48:35.600 --> 00:48:37.490
There's a minimized view, where
you just have the red

00:48:37.490 --> 00:48:40.210
bar at the bottom, but there's
no other ability to scrub or

00:48:40.210 --> 00:48:41.180
anything like that.

00:48:41.180 --> 00:48:42.610
Or there's the chromeless
player,

00:48:42.610 --> 00:48:44.210
where there's no controls.

00:48:44.210 --> 00:48:46.840
We're not allowing customization
of the controls

00:48:46.840 --> 00:48:52.260
itself, and you can't overlay
objects on top of the player

00:48:52.260 --> 00:48:54.650
view, either.

00:48:54.650 --> 00:48:59.510
Your second question was about
and likes and dislikes.

00:48:59.510 --> 00:49:04.480
That's not going to be in the
first version of the API.

00:49:04.480 --> 00:49:08.420
There is the ability in the
controls themselves to, when

00:49:08.420 --> 00:49:10.330
you press the YouTube logo,
that takes you to the main

00:49:10.330 --> 00:49:11.400
YouTube app.

00:49:11.400 --> 00:49:13.800
And so that would allow users
to like and dislike from the

00:49:13.800 --> 00:49:16.010
main YouTube app.

00:49:16.010 --> 00:49:16.680
So that would be a workaround.

00:49:16.680 --> 00:49:21.240
AUDIENCE: So is it planned to
have that in the future?

00:49:21.240 --> 00:49:23.610
ROSS MCELROY: It's a potential
future revision, yes.

00:49:23.610 --> 00:49:26.050
We can potentially think about
that, but there's no--

00:49:26.050 --> 00:49:29.580
AUDIENCE: Because that would be
really helpful, because the

00:49:29.580 --> 00:49:32.460
whole point of having a player
view in our app is that we

00:49:32.460 --> 00:49:37.100
don't want to have the user go
to the YouTube app, and that's

00:49:37.100 --> 00:49:39.330
not really seamless.

00:49:39.330 --> 00:49:39.910
You could have--

00:49:39.910 --> 00:49:40.054
ROSS MCELROY: Sure.

00:49:40.054 --> 00:49:41.235
That's exactly the reason
we're creating this.

00:49:41.235 --> 00:49:42.670
So yeah, it's good feedback.

00:49:42.670 --> 00:49:45.722
We'll take that on board and see
what we can do for future

00:49:45.722 --> 00:49:47.660
versions of the API.

00:49:47.660 --> 00:49:49.450
AUDIENCE: I have one
last question.

00:49:49.450 --> 00:49:53.480
So you said that if you want
to use the YouTube player

00:49:53.480 --> 00:49:57.540
view, you need to extend
the YouTube activity.

00:49:57.540 --> 00:50:01.190
But what if I am already
extending some other

00:50:01.190 --> 00:50:02.320
activities in the framework,
like--

00:50:02.320 --> 00:50:02.650
[INAUDIBLE]

00:50:02.650 --> 00:50:02.890
[INTERPOSING VOICES]

00:50:02.890 --> 00:50:04.110
ROSS MCELROY: Then
unfortunately, you're going to

00:50:04.110 --> 00:50:07.260
have to use the YouTube
player fragment.

00:50:07.260 --> 00:50:09.520
So the only option in that case
is to use the fragment or

00:50:09.520 --> 00:50:11.740
the support fragment.

00:50:11.740 --> 00:50:13.760
If you're using the player
view, you must extend the

00:50:13.760 --> 00:50:15.390
YouTube Base Activity.

00:50:15.390 --> 00:50:16.940
We need to control the life
cycle of the player, and

00:50:16.940 --> 00:50:18.760
that's the only way
we can do it.

00:50:18.760 --> 00:50:22.120
AUDIENCE: OK, all
right, thanks.

00:50:22.120 --> 00:50:22.970
ROSS MCELROY: Thank you.

00:50:22.970 --> 00:50:23.510
AUDIENCE: All right.

00:50:23.510 --> 00:50:24.780
One more question.

00:50:24.780 --> 00:50:29.920
So in the state machine, there
is a playing ad portion.

00:50:29.920 --> 00:50:32.390
So if I choose not to monetize
my application, is there a way

00:50:32.390 --> 00:50:33.860
to skip that?

00:50:33.860 --> 00:50:36.590
ROSS MCELROY: There's
no way to--

00:50:36.590 --> 00:50:38.470
if you choose not to monetize
your application, then you're

00:50:38.470 --> 00:50:42.500
going to need to select
non-monetized YouTube videos.

00:50:42.500 --> 00:50:45.910
There's no option to turn off
ads for monetized content,

00:50:45.910 --> 00:50:49.660
because the content providers
have specified that they want

00:50:49.660 --> 00:50:51.900
adverts to be played if
the video's played.

00:50:51.900 --> 00:50:55.010
So if you want no ads
to show, only use

00:50:55.010 --> 00:50:57.300
non-monetized content.

00:50:57.300 --> 00:50:58.665
AUDIENCE: So if I own
the content--

00:50:58.665 --> 00:51:00.090
ROSS MCELROY: If you own the
content, you can do whatever

00:51:00.090 --> 00:51:00.835
you want with it, yes.

00:51:00.835 --> 00:51:01.730
AUDIENCE: All right.

00:51:01.730 --> 00:51:02.980
Thank you.

00:51:05.090 --> 00:51:06.010
ANTON HANSSON: Thank
you very much.

00:51:06.010 --> 00:51:07.260
ROSS MCELROY: Thanks very
much for your time.

