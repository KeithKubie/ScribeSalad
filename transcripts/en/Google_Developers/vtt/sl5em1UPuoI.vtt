WEBVTT
Kind: captions
Language: en

00:00:01.334 --> 00:00:04.801
Cromwell: Hi.
How you guys doing?

00:00:04.801 --> 00:00:07.667
So, um,
it's been a busy day, huh?

00:00:07.667 --> 00:00:10.501
How 'bout that keynote?
It was awesome, right?

00:00:10.501 --> 00:00:12.601
So my name's Ray Cromwell.

00:00:12.601 --> 00:00:15.734
And what I want
to show you today

00:00:15.734 --> 00:00:18.567
is two things.

00:00:18.567 --> 00:00:20.868
One is if you're
a GWT programmer,

00:00:20.868 --> 00:00:22.367
an existing GWT programmer,

00:00:22.367 --> 00:00:25.000
and you've done apps before,

00:00:25.000 --> 00:00:26.567
I'd like to try
to show you a new way

00:00:26.567 --> 00:00:28.434
of doing GWT applications

00:00:28.434 --> 00:00:31.033
that you may not
have thought of before.

00:00:31.033 --> 00:00:32.634
And if you're not
a GWT programmer,

00:00:32.634 --> 00:00:34.400
maybe you're just
a programmer using

00:00:34.400 --> 00:00:37.501
LAMP Frameworks
and hand-coded JavaScript,

00:00:37.501 --> 00:00:40.801
I'd like to show you
an interesting way

00:00:40.801 --> 00:00:42.934
to use GWT that might,
you know, influence you

00:00:42.934 --> 00:00:44.801
to try it out.

00:00:44.801 --> 00:00:48.400
So...

00:00:48.400 --> 00:00:51.334
First before I begin,
let's kind of discuss

00:00:51.334 --> 00:00:53.968
where web applications
have come and gone.

00:00:53.968 --> 00:00:55.868
Let's look at the history.

00:00:55.868 --> 00:01:02.267
So Web 1.0 basically was about
server-side round-trips.

00:01:02.267 --> 00:01:05.400
So you designed
a Web 1.0 application,

00:01:05.400 --> 00:01:07.501
every time
someone clicked on anything,

00:01:07.501 --> 00:01:09.067
it did an HTTP request,

00:01:09.067 --> 00:01:10.567
it went to the server.

00:01:10.567 --> 00:01:12.801
The server processed
some UI state,

00:01:12.801 --> 00:01:14.868
maybe did some logic
on the back-end,

00:01:14.868 --> 00:01:16.434
and then it re-rendered
the whole page,

00:01:16.434 --> 00:01:21.267
shipped down a big, massive
HTML and CSS and images.

00:01:21.267 --> 00:01:23.901
And that worked pretty well,

00:01:23.901 --> 00:01:25.601
but the problem is
is that it has

00:01:25.601 --> 00:01:27.133
a lot of latency in there.

00:01:27.133 --> 00:01:31.400
So the experience is not--
it's not that great.

00:01:31.400 --> 00:01:33.834
And then what people
started doing

00:01:33.834 --> 00:01:35.267
is they started writing,

00:01:35.267 --> 00:01:38.000
once JavaScript kinda became
powerful and faster

00:01:38.000 --> 00:01:39.834
and people started
to take it serious

00:01:39.834 --> 00:01:41.334
as, like, a real language

00:01:41.334 --> 00:01:44.000
and not just something
to validate forms or something,

00:01:44.000 --> 00:01:47.033
is they started writing
large applications,

00:01:47.033 --> 00:01:49.767
you know, like Gmail,
like Google Docs--

00:01:49.767 --> 00:01:51.834
these large,
monolithic applications

00:01:51.834 --> 00:01:55.234
that sort of mimic
the desktop experience.

00:01:55.234 --> 00:01:57.567
And one of the features
of these applications

00:01:57.567 --> 00:02:01.801
is they really don't
ship any HTML down

00:02:01.801 --> 00:02:03.767
to the application after
it's been initially loaded.

00:02:03.767 --> 00:02:06.801
So you load up the HTML,
maybe it sets up a structure,

00:02:06.801 --> 00:02:09.534
you download a very large
amount of JavaScript,

00:02:09.534 --> 00:02:11.834
and then everything else
is done with REST requests

00:02:11.834 --> 00:02:13.267
all on the back-end.

00:02:13.267 --> 00:02:14.701
And the JavaScript modifies
the DOM

00:02:14.701 --> 00:02:16.501
from that point forward.

00:02:16.501 --> 00:02:19.701
However, that model
is not for everyone.

00:02:19.701 --> 00:02:22.400
That model works
really well for an application

00:02:22.400 --> 00:02:24.667
like Wave, which is
an incredible application

00:02:24.667 --> 00:02:26.634
where it really needs
to do that.

00:02:26.634 --> 00:02:28.334
But a lot of the applications
that people have built,

00:02:28.334 --> 00:02:31.033
like in the Enterprise
and for The Web

00:02:31.033 --> 00:02:35.167
are built on the model of,
you know, page reloads.

00:02:35.167 --> 00:02:36.834
And that's great.

00:02:36.834 --> 00:02:38.667
So what people
are doing these days

00:02:38.667 --> 00:02:42.200
is they are going back
to their Web 1.0 applications

00:02:42.200 --> 00:02:44.334
and they're adding
a little bit of JavaScript

00:02:44.334 --> 00:02:46.601
here and there
and gradually making it

00:02:46.601 --> 00:02:49.901
more "Web 2.0ey,"
if I can use that word,

00:02:49.901 --> 00:02:51.801
by eliminating page reloads

00:02:51.801 --> 00:02:53.934
and using AJAX REST request
on the back-end.

00:02:53.934 --> 00:02:56.167
And that's sort of like
the predominant model you see

00:02:56.167 --> 00:02:58.834
nowadays in a lot of start-ups.

00:02:58.834 --> 00:03:01.334
There's also kind of been
a return to simplicity.

00:03:01.334 --> 00:03:03.300
So if you remember
what happened

00:03:03.300 --> 00:03:05.267
during the dot-com era,
is, you know,

00:03:05.267 --> 00:03:06.767
Java got really popular,

00:03:06.767 --> 00:03:09.467
and people started building
these monolithic frameworks,

00:03:09.467 --> 00:03:11.367
and they just got
bigger and bigger and bigger.

00:03:11.367 --> 00:03:13.567
And it kinda
culminated in J2EE

00:03:13.567 --> 00:03:15.968
where, you know, to write
something really simple

00:03:15.968 --> 00:03:17.701
like a Hello World,
you had to write, you know,

00:03:17.701 --> 00:03:20.400
like 10,000 lines of code
of boilerplate.

00:03:20.400 --> 00:03:23.267
And people kind of
rebelled to that.

00:03:23.267 --> 00:03:26.834
And the first rebellion
was to sort of pull back,

00:03:26.834 --> 00:03:29.934
and you got things
like Spring where people said,

00:03:29.934 --> 00:03:31.934
"I only want IoC containers,"

00:03:31.934 --> 00:03:33.267
or, "I only want
dependency injection.

00:03:33.267 --> 00:03:34.634
I don't really need
all this extra stuff."

00:03:34.634 --> 00:03:36.167
You got, like,
Spring and Hibernate,

00:03:36.167 --> 00:03:37.901
and that worked really well.

00:03:37.901 --> 00:03:39.767
And then it's been
kind of simplified further

00:03:39.767 --> 00:03:42.133
because a lot of times
people don't even need that,

00:03:42.133 --> 00:03:43.901
so you see
with Rails and Django

00:03:43.901 --> 00:03:45.367
this active record pattern

00:03:45.367 --> 00:03:47.901
where people just generate
a skeleton app,

00:03:47.901 --> 00:03:49.300
and it's very simple,

00:03:49.300 --> 00:03:51.234
like objects are directly mapped
to the database

00:03:51.234 --> 00:03:54.434
and they spit out HTML
from PHP, Python, or Rails.

00:03:54.434 --> 00:03:56.067
And it's very, very simple.

00:03:56.067 --> 00:03:57.834
Your code base is small.

00:03:57.834 --> 00:04:00.534
You can get it up and running
in, like, five minutes.

00:04:00.534 --> 00:04:02.534
And usually what they do when
people do these applications

00:04:02.534 --> 00:04:05.167
is they first sort of
get it working with HTML

00:04:05.167 --> 00:04:06.534
without JavaScript.

00:04:06.534 --> 00:04:08.133
So, like, your application
would work

00:04:08.133 --> 00:04:09.601
even if JavaScript's disabled.

00:04:09.601 --> 00:04:11.300
And then they go back,

00:04:11.300 --> 00:04:14.100
and they sort of add
on top of it HTML

00:04:14.100 --> 00:04:16.601
to make it more
client-side interactive.

00:04:16.601 --> 00:04:20.934
So the page reloads
are gradually replaced.

00:04:20.934 --> 00:04:24.200
So essentially
the key thing is, is that

00:04:24.200 --> 00:04:26.801
logic from a server
that used to deal with UI

00:04:26.801 --> 00:04:28.801
is gradually pushed
the the client.

00:04:28.801 --> 00:04:31.367
And the way people
do this is they use

00:04:31.367 --> 00:04:32.567
popular JavaScript libraries

00:04:32.567 --> 00:04:34.400
to sort of walk them
through it,

00:04:34.400 --> 00:04:36.567
like jQuery, Dojo,
Prototype, MooTools,

00:04:36.567 --> 00:04:39.234
there's, like, a bunch of them,
and they're all great.

00:04:39.234 --> 00:04:41.667
My perspective,
which, you know,

00:04:41.667 --> 00:04:43.000
is not necessarily
the right one,

00:04:43.000 --> 00:04:45.701
but as a GWT developer,

00:04:45.701 --> 00:04:48.934
I don't like the fact that
the end-to-end tool chain

00:04:48.934 --> 00:04:50.300
is not coherent for me.

00:04:50.300 --> 00:04:52.634
Like in other words,
if I'm doing Rails or Python

00:04:52.634 --> 00:04:54.000
on the back-end,

00:04:54.000 --> 00:04:55.767
I have a different
set of tools--

00:04:55.767 --> 00:04:57.267
I'm using Rake
or something else

00:04:57.267 --> 00:04:58.868
to basically build
and configure my app.

00:04:58.868 --> 00:05:00.300
And then when I get
on the client side,

00:05:00.300 --> 00:05:01.534
it's different.

00:05:01.534 --> 00:05:03.434
How I unit test
is different.

00:05:03.434 --> 00:05:05.801
How I check the app
for errors

00:05:05.801 --> 00:05:07.767
or inspect it
when inspection--

00:05:07.767 --> 00:05:09.100
It's all different.

00:05:09.100 --> 00:05:10.667
And I kind of prefer
to have an end-to-end solution

00:05:10.667 --> 00:05:12.133
that works on both sides

00:05:12.133 --> 00:05:15.334
using the tools
that I'm used to.

00:05:15.334 --> 00:05:19.100
So basically what I've done
is I've built a library

00:05:19.100 --> 00:05:21.067
that allows you to do
what people do

00:05:21.067 --> 00:05:25.200
with libraries like jQuery
and Dojo and Prototype,

00:05:25.200 --> 00:05:27.434
but I've done it with GWT.

00:05:27.434 --> 00:05:30.834
And if you are not familiar
with GWT,

00:05:30.834 --> 00:05:32.501
and I hope you are
familiar with it,

00:05:32.501 --> 00:05:37.367
basically, to me,
it's a really kick-butt,

00:05:37.367 --> 00:05:42.300
optimizing complier
and hosted mode browser tool.

00:05:42.300 --> 00:05:44.367
And it produces
incredibly fast code.

00:05:44.367 --> 00:05:47.701
I mean, I'll show you
something later

00:05:47.701 --> 00:05:49.267
about some of the code
it generates,

00:05:49.267 --> 00:05:51.467
and sometimes
it even amazes me.

00:05:51.467 --> 00:05:53.000
It reduces start-up
latency a lot.

00:05:53.000 --> 00:05:54.601
It produces
very small code.

00:05:54.601 --> 00:05:57.133
Most of the time,
you can reduce

00:05:57.133 --> 00:05:59.667
all the HTTP requests
in your app down to just two,

00:05:59.667 --> 00:06:02.167
and sometimes just one.

00:06:02.167 --> 00:06:04.200
It integrates with all
of the Java language tools

00:06:04.200 --> 00:06:06.834
that you're used to--
your IDEs, IntelliJ, Eclipse,

00:06:06.834 --> 00:06:08.734
Maven, Ant--
for build tools,

00:06:08.734 --> 00:06:11.033
your continuous
integration tools--

00:06:11.033 --> 00:06:13.801
JUnit testing,
checkstyle, FindBugs--

00:06:13.801 --> 00:06:15.501
all the tools you're used to
with Java that are mature,

00:06:15.501 --> 00:06:16.934
they've been around
for ten years.

00:06:16.934 --> 00:06:18.234
They just work,

00:06:18.234 --> 00:06:20.267
and now they work
with your client-side code.

00:06:20.267 --> 00:06:22.901
However, if you're
in this room today

00:06:22.901 --> 00:06:25.200
and you're not
a GWT programmer,

00:06:25.200 --> 00:06:27.267
it may be a big leap for you.

00:06:27.267 --> 00:06:30.234
I'll be honest,
there is a learning curve.

00:06:30.234 --> 00:06:31.901
If you're, like,
a JavaScript programmer

00:06:31.901 --> 00:06:33.067
or you're doing Rail--

00:06:33.067 --> 00:06:35.234
you know, you started
with Python or Ruby,

00:06:35.234 --> 00:06:37.033
it's a pretty big leap.

00:06:37.033 --> 00:06:40.400
And also,
rightly or wrongly,

00:06:40.400 --> 00:06:42.467
the way GWT
is currently constructed,

00:06:42.467 --> 00:06:44.901
the library, it sort of
encourages people

00:06:44.901 --> 00:06:48.167
to make these desktop
metaphor applications

00:06:48.167 --> 00:06:49.601
using Widget abstraction.

00:06:49.601 --> 00:06:52.067
So it kind of encourages you
to build something

00:06:52.067 --> 00:06:53.701
that you would build
with, like, Swing.

00:06:53.701 --> 00:06:56.067
It encourages
monolithic applications

00:06:56.067 --> 00:06:58.234
that don't have
more than one page,

00:06:58.234 --> 00:07:00.200
and there are times
to do that.

00:07:00.200 --> 00:07:01.934
That's actually
a perfectly valid reason

00:07:01.934 --> 00:07:04.334
as we saw with Wave
and with Gmail and Google Docs.

00:07:04.334 --> 00:07:08.234
But there's a lot of other
applications people do

00:07:08.234 --> 00:07:10.901
where multipages
are a good thing.

00:07:10.901 --> 00:07:14.400
And the other problem is,
is that the learning curve

00:07:14.400 --> 00:07:15.767
for UI designers

00:07:15.767 --> 00:07:17.367
who are gonna
make your site look good

00:07:17.367 --> 00:07:19.868
would be pretty big
for them to start writing

00:07:19.868 --> 00:07:22.467
all of their code
using GWT Widget abstractions.

00:07:22.467 --> 00:07:24.067
They want to deal
with HTML and CSS

00:07:24.067 --> 00:07:25.701
because that's what they know.

00:07:25.701 --> 00:07:28.133
So it could conflict with
your existing design process

00:07:28.133 --> 00:07:30.367
in your company.

00:07:30.367 --> 00:07:33.868
So let's talk about
progressive enhancement.

00:07:33.868 --> 00:07:36.868
So it's different
in every company,

00:07:36.868 --> 00:07:38.701
but in some of the companies
I've worked in

00:07:38.701 --> 00:07:40.868
the way the website
starts out, you know,

00:07:40.868 --> 00:07:43.868
besides defining
what the requirements

00:07:43.868 --> 00:07:45.834
and new cases are,
is that a designer

00:07:45.834 --> 00:07:47.634
will sit down with, like,
Photoshop or some other tool

00:07:47.634 --> 00:07:49.300
and he'll mock up
what the UI will look like.

00:07:49.300 --> 00:07:51.901
Sometimes it's like an image
or some other tool.

00:07:51.901 --> 00:07:53.434
And, you know,
he'll show it to everyone.

00:07:53.434 --> 00:07:55.334
Everyone will sign off on it,
say, "Hey, this looks great.

00:07:55.334 --> 00:07:56.667
"I like the way
this looks now.

00:07:56.667 --> 00:07:58.534
We want to make it
into a website."

00:07:58.534 --> 00:08:00.834
And then they'll hand it to
some guys who know how to code.

00:08:00.834 --> 00:08:02.601
Sometimes the designer
and the coder are the same

00:08:02.601 --> 00:08:04.200
if they're lucky.

00:08:04.200 --> 00:08:06.901
I'm not one of those people.
I'm really bad at UI design.

00:08:06.901 --> 00:08:09.400
They'll hand it to a coder,
and he'll take that design

00:08:09.400 --> 00:08:11.367
from Photoshop
and he'll slice it up,

00:08:11.367 --> 00:08:14.000
and he'll reify it
into, like, HTML and CSS,

00:08:14.000 --> 00:08:16.534
and he'll make
the code generate

00:08:16.534 --> 00:08:18.334
what the designer
had in mind,

00:08:18.334 --> 00:08:20.934
typically using, like,
PHP or Python, or Rails

00:08:20.934 --> 00:08:22.501
and things like that.

00:08:22.501 --> 00:08:25.501
And you'll end up with
a working Web 1.0 application.

00:08:25.501 --> 00:08:28.567
You know,
you click on something

00:08:28.567 --> 00:08:29.801
and it goes to the server,

00:08:29.801 --> 00:08:30.968
and it runs
another PHP script,

00:08:30.968 --> 00:08:33.133
which outputs, you know,
the website,

00:08:33.133 --> 00:08:35.901
again with all the template
and nice UI design stuff on it.

00:08:35.901 --> 00:08:37.868
And then after that,
the guys will say,

00:08:37.868 --> 00:08:40.000
"Hey, you know, let's start
trying to make this site

00:08:40.000 --> 00:08:41.334
"more dynamic.

00:08:41.334 --> 00:08:43.400
"Like, you know, maybe
when I'm paging through,

00:08:43.400 --> 00:08:44.968
"like, an Enterprise report,

00:08:44.968 --> 00:08:46.601
"rather than reloading
the page every time,

00:08:46.601 --> 00:08:49.200
"I'll just launch off
a REST request to the server

00:08:49.200 --> 00:08:51.100
"on the back-end,
get the data,

00:08:51.100 --> 00:08:52.534
"and then I'll just
repopulate the DOM

00:08:52.534 --> 00:08:53.701
without leaving the page."

00:08:53.701 --> 00:08:56.100
So they start to enhance
the existing UI

00:08:56.100 --> 00:08:58.300
by layering JavaScript
on top of it.

00:08:58.300 --> 00:08:59.701
But the cool thing is,

00:08:59.701 --> 00:09:01.133
is that if somebody
comes to the page

00:09:01.133 --> 00:09:02.968
and they don't have
JavaScript turned on,

00:09:02.968 --> 00:09:06.067
the app will still work.

00:09:06.067 --> 00:09:08.467
And there are places
where people do that.

00:09:08.467 --> 00:09:10.734
I believe in Japan
a lot of the mobile phones

00:09:10.734 --> 00:09:12.300
actually don't have
JavaScript.

00:09:12.300 --> 00:09:15.367
They just have HTML support.

00:09:15.367 --> 00:09:17.767
And also, it facilitates SCO--

00:09:17.767 --> 00:09:19.601
search engine optimization
and accessibility.

00:09:19.601 --> 00:09:21.133
So I mean, the search engine
sees your app.

00:09:21.133 --> 00:09:23.100
If it doesn't understand
JavaScript,

00:09:23.100 --> 00:09:24.801
it still sees
the HTML content,

00:09:24.801 --> 00:09:28.334
so it can index it
and find it.

00:09:28.334 --> 00:09:31.100
So here's an example
of how someone

00:09:31.100 --> 00:09:33.000
would progressively
enhance something.

00:09:33.000 --> 00:09:34.968
This is sort of--
would represent the output

00:09:34.968 --> 00:09:36.734
of an RSS feed reader.

00:09:36.734 --> 00:09:38.501
So you've got, like,
a container element.

00:09:38.501 --> 00:09:42.033
And you've got a div
with class = article.

00:09:42.033 --> 00:09:43.467
So you've got two articles.

00:09:43.467 --> 00:09:45.934
And then you've got, like,
a h3 element with a Title,

00:09:45.934 --> 00:09:48.200
a p tag with classical
summary,

00:09:48.200 --> 00:09:49.667
which is a summary
of the article.

00:09:49.667 --> 00:09:51.167
And then, like,
another p tag

00:09:51.167 --> 00:09:52.567
which is the entire body
of the article,

00:09:52.567 --> 00:09:53.968
which would be quite large.

00:09:53.968 --> 00:09:56.501
And then a bulleted list
of ul li,

00:09:56.501 --> 00:09:58.968
which is the possible actions
you could take.

00:09:58.968 --> 00:10:00.400
Like maybe you're gonna
leave a comment,

00:10:00.400 --> 00:10:01.834
or maybe you're gonna
do a Trackback.

00:10:01.834 --> 00:10:03.634
And what you want to do

00:10:03.634 --> 00:10:05.234
is you maybe want
to enhance this a little bit.

00:10:05.234 --> 00:10:06.567
And maybe, like,
you don't want to show

00:10:06.567 --> 00:10:09.000
all of the body material
expanded right away.

00:10:09.000 --> 00:10:10.434
You wanted
to have it collapsed.

00:10:10.434 --> 00:10:11.968
And then, like, maybe
when you click on something,

00:10:11.968 --> 00:10:13.367
it expands it to read it.

00:10:13.367 --> 00:10:15.334
So here's how you would do it
in jQuery.

00:10:15.334 --> 00:10:17.400
So someone would write
this little snippet of code.

00:10:17.400 --> 00:10:22.234
They'd say find the body
that contains all the content

00:10:22.234 --> 00:10:25.334
using the CSS selector
.article.body.

00:10:25.334 --> 00:10:27.167
So find me the div--

00:10:27.167 --> 00:10:28.834
Find something that has
the class = article,

00:10:28.834 --> 00:10:30.734
find something that has
the class = the body,

00:10:30.734 --> 00:10:32.767
and call hide.

00:10:32.767 --> 00:10:35.434
Now what hide does is it sets
display colon none.

00:10:35.434 --> 00:10:37.367
So it basically
hides the element

00:10:37.367 --> 00:10:39.400
so you can't see it
anymore.

00:10:39.400 --> 00:10:41.334
Then the next thing
they might do

00:10:41.334 --> 00:10:42.834
is they will say,

00:10:42.834 --> 00:10:45.234
"I'm gonna add
a new action to that list

00:10:45.234 --> 00:10:46.901
of where it says
comment and trackback,"

00:10:46.901 --> 00:10:49.167
which is like
read the article or expand it

00:10:49.167 --> 00:10:51.267
so now you can see it.

00:10:51.267 --> 00:10:53.667
So they say
find the container tag

00:10:53.667 --> 00:10:55.968
then find the article element,

00:10:55.968 --> 00:10:57.567
and then find ul element.

00:10:57.567 --> 00:10:59.267
And I'm gonna prepend an li

00:10:59.267 --> 00:11:02.167
as the first child
of that ul.

00:11:02.167 --> 00:11:04.067
And it says,
"Read the article"

00:11:04.067 --> 00:11:05.734
or "Read Body,"
so it's a link.

00:11:05.734 --> 00:11:07.601
See the A link up there.

00:11:07.601 --> 00:11:10.067
Now they have to add something
to handle that link.

00:11:10.067 --> 00:11:11.400
So what they do
is then they write

00:11:11.400 --> 00:11:13.968
another bit of code

00:11:13.968 --> 00:11:17.501
which targets that A link
that they just injected.

00:11:17.501 --> 00:11:21.234
And that says,
"Okay, find any action

00:11:21.234 --> 00:11:23.934
"with an li element
that's called Read Body

00:11:23.934 --> 00:11:26.501
that has an A link in it
and add a click handler to it."

00:11:26.501 --> 00:11:28.767
And what the click handler does,
if you can see it there,

00:11:28.767 --> 00:11:31.901
is it says, "Okay,
find the parent ul element

00:11:31.901 --> 00:11:33.701
"of this li,

00:11:33.701 --> 00:11:37.000
"find the previous sibling,
which is the body tag,

00:11:37.000 --> 00:11:38.701
"it's a sibling
of the ul tag--

00:11:38.701 --> 00:11:40.033
"it's kind of walking
out the DOM--

00:11:40.033 --> 00:11:41.267
and then toggle it."

00:11:41.267 --> 00:11:43.267
So that's gonna
make it be shown.

00:11:43.267 --> 00:11:46.167
So I'm gonna show you
a quick example

00:11:46.167 --> 00:11:48.467
of what that would look like.

00:11:48.467 --> 00:11:53.334
This is actually
from the jQuery tutorial.

00:11:53.334 --> 00:11:55.567
Okay.
And I'm gonna scroll down.

00:11:55.567 --> 00:11:58.033
Well, we may have to resize
a little bit here.

00:11:58.033 --> 00:11:59.167
Okay.

00:11:59.167 --> 00:12:01.100
So I'm gonna scroll down here.

00:12:01.100 --> 00:12:03.167
And here's what
it would look like.

00:12:03.167 --> 00:12:04.667
So here's it in a browser.

00:12:04.667 --> 00:12:06.667
And after you execute
that jQuery code,

00:12:06.667 --> 00:12:09.300
I click that Read Body
and it expands the content.

00:12:09.300 --> 00:12:12.300
So that's what we want to do.

00:12:12.300 --> 00:12:14.767
We've, you know, progressively
enhanced the page

00:12:14.767 --> 00:12:17.734
to make it just a little bit
easier to use.

00:12:17.734 --> 00:12:19.133
So before I go on,

00:12:19.133 --> 00:12:23.033
let me discuss the core
jQuery concepts as I see them.

00:12:23.033 --> 00:12:24.501
This may not be how
other people see them,

00:12:24.501 --> 00:12:25.934
but this is kind of
what I infer from it.

00:12:25.934 --> 00:12:27.601
Number one is querying.

00:12:27.601 --> 00:12:30.667
So instead of using DOM methods
to navigate the DOM,

00:12:30.667 --> 00:12:32.434
like get elements
by tag name--

00:12:32.434 --> 00:12:34.501
you know, get child node
or get first child

00:12:34.501 --> 00:12:36.467
or get next sibling and so on,
which is really painful--

00:12:36.467 --> 00:12:38.767
you write a CSS
selector query.

00:12:38.767 --> 00:12:40.634
The library executes it,

00:12:40.634 --> 00:12:42.567
finds all the elements
that match it,

00:12:42.567 --> 00:12:44.133
and then basically
then you perform

00:12:44.133 --> 00:12:45.400
a bunch of operations
on it.

00:12:45.400 --> 00:12:46.767
And the way you perform
those operations

00:12:46.767 --> 00:12:48.667
is by chaining method calls.

00:12:48.667 --> 00:12:49.734
So you could say,

00:12:49.734 --> 00:12:50.801
"Okay, find me
all the div tags

00:12:50.801 --> 00:12:52.367
"that have class = foo,

00:12:52.367 --> 00:12:54.734
"and then set its background
color to be red,

00:12:54.734 --> 00:12:56.300
"and add this event handler,

00:12:56.300 --> 00:12:59.567
and, you know, change this
attribute of the thing."

00:12:59.567 --> 00:13:02.968
And you can do multiple
operations by chaining.

00:13:02.968 --> 00:13:05.667
It also provides a pretty
powerful set of functions

00:13:05.667 --> 00:13:07.901
to manipulate the DOM,
to inject content,

00:13:07.901 --> 00:13:10.033
to remove content,
to wrap content.

00:13:10.033 --> 00:13:12.667
So it just moves stuff around,
and they're really powerful.

00:13:12.667 --> 00:13:14.200
Much more powerful
than what you get

00:13:14.200 --> 00:13:17.133
in the basic DOM Level 2
interface.

00:13:17.133 --> 00:13:19.868
It provides a facility
for attaching arbitrary data

00:13:19.868 --> 00:13:21.534
to any element,

00:13:21.534 --> 00:13:24.567
and also attaching binding
event handlers to elements.

00:13:24.567 --> 00:13:26.601
And finally,
probably the biggest thing

00:13:26.601 --> 00:13:29.334
to jQuery's success
is that it has

00:13:29.334 --> 00:13:32.367
a really, really simple way
to write plugins for it.

00:13:32.367 --> 00:13:34.267
So people,
after they write things,

00:13:34.267 --> 00:13:35.601
like thing you just saw

00:13:35.601 --> 00:13:37.501
where it kind of modifies
that feed reader output

00:13:37.501 --> 00:13:39.267
to make it collapsible,

00:13:39.267 --> 00:13:40.634
they would change that
into a plugin

00:13:40.634 --> 00:13:42.901
and maybe call it
the feed collapse plugin.

00:13:42.901 --> 00:13:44.367
And then they'd publish it
somewhere,

00:13:44.367 --> 00:13:45.834
and people
could just include it.

00:13:45.834 --> 00:13:48.968
And then with one line of code,
they could just apply it

00:13:48.968 --> 00:13:50.200
to their feed.

00:13:50.200 --> 00:13:52.734
So it has a really nice way
of doing plugins.

00:13:52.734 --> 00:13:56.200
So what's GQuery?

00:13:56.200 --> 00:13:59.901
GQuery is a jQuery clone
written in GWT.

00:13:59.901 --> 00:14:03.567
So it's written in Java code.
It's compiled to JavaScript.

00:14:03.567 --> 00:14:06.534
But it's designed to fit
in the sort of workflow

00:14:06.534 --> 00:14:08.167
that people who do
progressive enhancement

00:14:08.167 --> 00:14:11.033
on Web 1.0 applications
are used to.

00:14:11.033 --> 00:14:14.167
And I tried to make it
easy to learn for people

00:14:14.167 --> 00:14:15.601
who have used jQuery.

00:14:15.601 --> 00:14:18.601
So the syntax, you know,
maybe surprisingly

00:14:18.601 --> 00:14:20.067
doesn't look like Java.

00:14:20.067 --> 00:14:21.567
It actually looks
like JavaScript,

00:14:21.567 --> 00:14:24.767
but you're actually
in Java code.

00:14:24.767 --> 00:14:27.000
However,
you do get a benefit.

00:14:27.000 --> 00:14:28.901
It's that underneath
all of that code

00:14:28.901 --> 00:14:30.868
that kind of looks like
it's not even Java code,

00:14:30.868 --> 00:14:32.968
it's actually being
type checked.

00:14:32.968 --> 00:14:37.467
You get code sensibility,
pop-ups, Javadoc pop-ups,

00:14:37.467 --> 00:14:41.067
and all the other benefits
of GWT, which I'll show you.

00:14:41.067 --> 00:14:43.000
So here's an example.

00:14:43.000 --> 00:14:45.200
This is legal Java code.

00:14:45.200 --> 00:14:48.501
Sometimes people are kind of
surprised when they see this

00:14:48.501 --> 00:14:52.334
because you usually don't
name a function $.

00:14:52.334 --> 00:14:56.834
But yes, there is a function
called $ in my library,

00:14:56.834 --> 00:14:58.501
and it's statically exported,

00:14:58.501 --> 00:15:01.667
so you can import it
at a top level,

00:15:01.667 --> 00:15:03.834
and you just refer to it
as $.

00:15:03.834 --> 00:15:05.400
So what this code would do

00:15:05.400 --> 00:15:08.801
is it would find all
of the div.menu items

00:15:08.801 --> 00:15:11.300
in the current page
that this is running

00:15:11.300 --> 00:15:13.834
and set their vertical align
property to top.

00:15:13.834 --> 00:15:17.434
Now what's interesting about
this is that I'm not doing

00:15:17.434 --> 00:15:19.901
"vertical-align","top"

00:15:19.901 --> 00:15:21.734
like you would do
in jQuery.

00:15:21.734 --> 00:15:23.334
In actuality,
what these are

00:15:23.334 --> 00:15:26.000
is these are typesafe enums.

00:15:26.000 --> 00:15:27.734
And the interesting thing
about this is,

00:15:27.734 --> 00:15:31.934
is that the IDE
will make it impossible

00:15:31.934 --> 00:15:34.234
for you to type
a combination

00:15:34.234 --> 00:15:36.067
of CSS property name
and value

00:15:36.067 --> 00:15:38.868
that are invalid
according to the CSS Spec.

00:15:38.868 --> 00:15:40.567
It will do it at edit time,

00:15:40.567 --> 00:15:42.367
and it will also check it
at compile time.

00:15:42.367 --> 00:15:44.534
But more than that,
it can also show you a pop-up

00:15:44.534 --> 00:15:46.267
of what the legal values are

00:15:46.267 --> 00:15:48.767
and even Javadoc taken from
the CSS2 Spec

00:15:48.767 --> 00:15:50.901
or from
the Quirksmode database.

00:15:50.901 --> 00:15:52.734
So as an example,

00:15:52.734 --> 00:15:54.434
I'll bring up my IDE

00:15:54.434 --> 00:15:56.467
just to show you
what this experience is like.

00:15:56.467 --> 00:16:00.601
So let's say I want to set
a CSS property on this.

00:16:00.601 --> 00:16:02.467
I'll type in CSS,

00:16:02.467 --> 00:16:04.434
and then I'll hit
my completion.

00:16:04.434 --> 00:16:06.434
And you can see
vertical align is one of them.

00:16:06.434 --> 00:16:08.601
Think I've got to double.
That'll do it.

00:16:08.601 --> 00:16:11.300
Let me try this background--
Did I not--

00:16:11.300 --> 00:16:13.901
Maybe I didn't import
something right.

00:16:13.901 --> 00:16:15.567
Okay, yeah, that's why
it's not seeing it.

00:16:15.567 --> 00:16:17.501
Oops.

00:16:17.501 --> 00:16:20.534
My IDE gets too smart
sometimes.

00:16:20.534 --> 00:16:23.334
Okay, now it should work.

00:16:23.334 --> 00:16:24.501
So there you go,

00:16:24.501 --> 00:16:26.167
background color,
display, width.

00:16:26.167 --> 00:16:28.300
You might say, "Okay,
if I put the display property,

00:16:28.300 --> 00:16:30.434
what are the possible values?"

00:16:30.434 --> 00:16:32.567
Oops.

00:16:32.567 --> 00:16:35.567
Block, inline, inline block,
and so on.

00:16:35.567 --> 00:16:37.868
And in fact,
you can even hit Javadoc

00:16:37.868 --> 00:16:39.901
and I can see
from the CSS2 Spec,

00:16:39.901 --> 00:16:41.534
like, what each one
of these will do.

00:16:41.534 --> 00:16:43.367
Because you might not use
the run in

00:16:43.367 --> 00:16:45.934
or in the inline block
display property very much.

00:16:45.934 --> 00:16:47.868
You might not remember
what it's like.

00:16:47.868 --> 00:16:49.400
And, you know,
this is nothing--

00:16:49.400 --> 00:16:51.033
I haven't done anything
to me IDE.

00:16:51.033 --> 00:16:52.434
There's no plugin
to my IDE.

00:16:52.434 --> 00:16:55.000
Any IDE will show this
because it's just a fact--

00:16:55.000 --> 00:16:56.801
a property
of the Java code.

00:16:56.801 --> 00:16:58.801
It's just Javadoc.

00:16:58.801 --> 00:17:00.968
So another example
is, like, for example

00:17:00.968 --> 00:17:03.100
this vertical align property

00:17:03.100 --> 00:17:05.601
takes not just top
or bottom or baseline

00:17:05.601 --> 00:17:06.868
and those kind of things.

00:17:06.868 --> 00:17:08.200
It actually
can take a value.

00:17:08.200 --> 00:17:11.601
So I can say--
I can go here and say--

00:17:11.601 --> 00:17:14.234
Well, okay, I can put in middle,
baseline, stuff like that.

00:17:14.234 --> 00:17:15.968
But I can also
put in a length,

00:17:15.968 --> 00:17:18.667
like ten centimeters.

00:17:18.667 --> 00:17:21.701
So what happens
is the IDE knows that

00:17:21.701 --> 00:17:23.634
the vertical align property

00:17:23.634 --> 00:17:25.567
can take one of these
enumerated values

00:17:25.567 --> 00:17:28.434
or it can take centimeters
or some other length value.

00:17:28.434 --> 00:17:32.234
But it can't, for instance,
take a color.

00:17:32.234 --> 00:17:36.534
So if I put--
if I put something like this...

00:17:38.834 --> 00:17:41.334
RBG, you know, like,
blah, blah, blah.

00:17:41.334 --> 00:17:43.234
It's an error.
You see it's red.

00:17:43.234 --> 00:17:46.133
So it knows that vertical align
does not take colors.

00:17:46.133 --> 00:17:49.801
So it basically makes it harder
to make a mistake.

00:17:49.801 --> 00:17:53.167
Oops, okay, so let's go back
to the presentation.

00:17:56.000 --> 00:17:58.133
So there's other benefits
to using types,

00:17:58.133 --> 00:18:00.634
and this is where the GWT
compiler comes in.

00:18:00.634 --> 00:18:03.901
The compiler has
various optimizations,

00:18:03.901 --> 00:18:06.033
and one of it's called
type tightening.

00:18:06.033 --> 00:18:07.968
And the compiler
can actually see, like,

00:18:07.968 --> 00:18:09.868
what values are being used
sometimes

00:18:09.868 --> 00:18:14.133
and whether or not
there's any other alternative.

00:18:14.133 --> 00:18:16.300
So the compiler can infer
in this case

00:18:16.300 --> 00:18:18.834
that I only use
the top property,

00:18:18.834 --> 00:18:22.100
and I only use the vertical
align property name.

00:18:22.100 --> 00:18:24.200
So what it did
is when I compiled it,

00:18:24.200 --> 00:18:26.968
it eliminated
the CSS routine.

00:18:26.968 --> 00:18:30.000
And it eliminated
all the other properties

00:18:30.000 --> 00:18:32.834
that you might set,
and it just inlined this loop,

00:18:32.834 --> 00:18:34.267
which is for i = 0 to

00:18:34.267 --> 00:18:36.834
I list the number of elements
that have been matched,

00:18:36.834 --> 00:18:39.767
set this
element.style property,

00:18:39.767 --> 00:18:41.133
vertical align = top.

00:18:41.133 --> 00:18:43.467
So basically it removed
everything else from the program

00:18:43.467 --> 00:18:45.400
except for that
and inlined it.

00:18:45.400 --> 00:18:47.367
You can't write
faster code than that,

00:18:47.367 --> 00:18:48.868
even by hand.

00:18:48.868 --> 00:18:50.400
There will be no JavaScript
code you can write

00:18:50.400 --> 00:18:52.767
that'll execute
faster than that.

00:18:52.767 --> 00:18:56.367
So this is another
quick example.

00:18:56.367 --> 00:18:58.467
Can anybody
see anything wrong

00:18:58.467 --> 00:19:02.634
with these lines
of jQuery code?

00:19:02.634 --> 00:19:05.667
There's some subtle
errors in here.

00:19:05.667 --> 00:19:07.667
So the first one might be
a little bit obvious

00:19:07.667 --> 00:19:09.868
if you're looking at it.

00:19:09.868 --> 00:19:12.501
"Background color"
is spelled wrong.

00:19:12.501 --> 00:19:14.567
So if you actually
wrote this code

00:19:14.567 --> 00:19:17.000
and you execute it
in your browser,

00:19:17.000 --> 00:19:19.067
you won't get an error.

00:19:19.067 --> 00:19:20.901
I think in Firefox if you look
in the error console,

00:19:20.901 --> 00:19:22.400
you might see it.

00:19:22.400 --> 00:19:24.834
But in many browsers, you won't
actually get any error at all.

00:19:24.834 --> 00:19:27.133
And if it's something obscure,
like some background color

00:19:27.133 --> 00:19:28.701
or some really tiny element
somewhere,

00:19:28.701 --> 00:19:29.901
you might not ever
even see it.

00:19:29.901 --> 00:19:31.200
You might deploy it
to production,

00:19:31.200 --> 00:19:32.934
and you'll never know
unless somebody, like,

00:19:32.934 --> 00:19:34.267
later on, a week later, says,

00:19:34.267 --> 00:19:38.367
"Hey, this color
didn't get set properly."

00:19:38.367 --> 00:19:40.334
Second line, lavender's
not a system color.

00:19:40.334 --> 00:19:42.400
So there's a whole bunch
of CSS2 system colors,

00:19:42.400 --> 00:19:44.534
like, you know,
magenta and cyan and stuff.

00:19:44.534 --> 00:19:46.667
Lavender's not one of them.

00:19:46.667 --> 00:19:49.567
The next one
is kind of interesting.

00:19:49.567 --> 00:19:52.100
Maybe you're running
a CSS selector

00:19:52.100 --> 00:19:53.901
with an ID selector,

00:19:53.901 --> 00:19:56.067
and that element might not
exist in the page

00:19:56.067 --> 00:19:57.601
you're targeting.

00:19:57.601 --> 00:19:59.834
It'd be interesting to get
a warning when that happened--

00:19:59.834 --> 00:20:04.767
like you wrote a CSS selector
and it doesn't match anything.

00:20:04.767 --> 00:20:06.367
The next one's kinda tricky.

00:20:06.367 --> 00:20:10.467
Can anybody guess
what's wrong with that one?

00:20:10.467 --> 00:20:13.834
Yeah, so it's binding
a callback event handler

00:20:13.834 --> 00:20:15.734
for the double click event.

00:20:15.734 --> 00:20:18.868
The problem is
it's called "dblclick"

00:20:18.868 --> 00:20:20.501
not "doubleclick."

00:20:20.501 --> 00:20:22.400
So I think that, you know,
could be an easy mistake

00:20:22.400 --> 00:20:23.934
to make by some people.

00:20:23.934 --> 00:20:26.534
The last one I'm gonna leave
for an exercise to the reader.

00:20:26.534 --> 00:20:27.868
So later on, you can go and,

00:20:27.868 --> 00:20:30.601
you know,
download the presentation,

00:20:30.601 --> 00:20:33.167
see if you can figure out
that last one.

00:20:33.167 --> 00:20:35.968
Okay, so like I said earlier,
because it's Java,

00:20:35.968 --> 00:20:37.968
you get to use all of your
normal JavaScript tools--

00:20:37.968 --> 00:20:41.701
sorry Java tools--
so you can do JUnit tests

00:20:41.701 --> 00:20:43.434
using your IDE.

00:20:43.434 --> 00:20:46.901
Here's an example of me
running that div.menu

00:20:46.901 --> 00:20:49.000
and setting the vertical align
top property.

00:20:49.000 --> 00:20:50.501
And then I have
a little loop there

00:20:50.501 --> 00:20:52.501
where I loop over
the same selector

00:20:52.501 --> 00:20:54.334
and assert that
the actual elements

00:20:54.334 --> 00:20:55.734
had their top properties--

00:20:55.734 --> 00:20:57.200
the vertical align property
set at the top.

00:20:57.200 --> 00:20:58.801
And then of course you see
a little pop-up there

00:20:58.801 --> 00:21:00.133
for my IDE.

00:21:00.133 --> 00:21:01.734
I can just run that
right in my IDE

00:21:01.734 --> 00:21:03.000
and check it
right then and there,

00:21:03.000 --> 00:21:05.567
or I could run it
at build time.

00:21:05.567 --> 00:21:07.167
There's some other cool stuff
you can do with jQuery

00:21:07.167 --> 00:21:08.567
and unit testing.

00:21:08.567 --> 00:21:11.100
If I have time,
I'll talk about it later.

00:21:11.100 --> 00:21:13.000
So now I'm gonna show you
a quick demo

00:21:13.000 --> 00:21:17.167
of a progressive enhancement.

00:21:17.167 --> 00:21:19.968
Here is--

00:21:19.968 --> 00:21:23.701
So here is some HTML
that's basically

00:21:23.701 --> 00:21:25.968
just two div tags

00:21:25.968 --> 00:21:29.601
with some bulleted
lis in them,

00:21:29.601 --> 00:21:31.033
and that's all.

00:21:31.033 --> 00:21:33.501
And what I've done
is I've written a little bit

00:21:33.501 --> 00:21:35.400
of Java code in GQuery.

00:21:35.400 --> 00:21:36.801
And I've turned it into

00:21:36.801 --> 00:21:38.767
sort of like
a PowerPoint-like slide.

00:21:38.767 --> 00:21:42.501
I transitioned
to another slide there.

00:21:42.501 --> 00:21:45.667
So if you don't have
JavaScript enabled,

00:21:45.667 --> 00:21:47.067
you'll still see
the information,

00:21:47.067 --> 00:21:48.501
but if you come
with JavaScript enabled,

00:21:48.501 --> 00:21:49.868
you'll get something
kind of looks

00:21:49.868 --> 00:21:52.300
sort of like
a PowerPoint presentation.

00:21:52.300 --> 00:21:54.901
So the cool thing
about that is,

00:21:54.901 --> 00:21:58.100
is that if I go to
that website.

00:21:58.100 --> 00:22:00.667
This is deployed
on App Engine.

00:22:00.667 --> 00:22:07.267
And if I open up Firebug,

00:22:07.267 --> 00:22:10.334
you'll see this.

00:22:10.334 --> 00:22:12.801
Okay, here's the generated
JavaScript.

00:22:12.801 --> 00:22:15.067
So its compiled
and it's obfuscated.

00:22:15.067 --> 00:22:16.434
You couldn't read this

00:22:16.434 --> 00:22:18.267
and figure out, like,
what it's doing.

00:22:18.267 --> 00:22:19.868
So you might need
to debug this.

00:22:19.868 --> 00:22:21.200
Now, this is deployed
to production.

00:22:21.200 --> 00:22:22.601
So, you know, this could be,
like, an app

00:22:22.601 --> 00:22:24.100
that people are using.

00:22:24.100 --> 00:22:25.767
It's been in production.
It's been reliable for a while.

00:22:25.767 --> 00:22:27.634
And you might need
to check on some bug

00:22:27.634 --> 00:22:29.567
that you suspect
is somewhere.

00:22:29.567 --> 00:22:31.834
Well, GWT has this thing
called hosted mode.

00:22:31.834 --> 00:22:33.701
And what you can do is

00:22:33.701 --> 00:22:36.901
I can attach
a Java debugger

00:22:36.901 --> 00:22:40.000
to that HTML site.

00:22:40.000 --> 00:22:42.567
So I'm gonna click
the debug button up here,

00:22:42.567 --> 00:22:45.334
and I'm gonna launch
hosted mode.

00:22:45.334 --> 00:22:46.868
And it's gonna take a second.

00:22:46.868 --> 00:22:50.501
You can see it's connecting
to gwt.query.appspot.com/demo.

00:22:50.501 --> 00:22:55.300
So I'm loading up
HTML and JavaScript here.

00:22:55.300 --> 00:22:58.133
And there it is.
You just saw it.

00:22:58.133 --> 00:22:59.801
But I've got
a break point set

00:22:59.801 --> 00:23:02.968
in my Java debugger
to when I click on something.

00:23:02.968 --> 00:23:04.968
So I'm gonna click
the mouse button.

00:23:04.968 --> 00:23:08.133
And you can see
that my break point triggered

00:23:08.133 --> 00:23:10.701
inside my Java IDE

00:23:10.701 --> 00:23:14.868
but from a production compiled
and deployed JavaScript site.

00:23:14.868 --> 00:23:16.434
And I think
that's pretty cool,

00:23:16.434 --> 00:23:17.767
because I can step
through this

00:23:17.767 --> 00:23:19.234
and try to figure out
where the bug is,

00:23:19.234 --> 00:23:20.968
and I don't even have
to touch the production.

00:23:20.968 --> 00:23:22.501
I don't have to do anything
to get a debug build.

00:23:22.501 --> 00:23:24.834
I don't have to put a debug
build on a production site--

00:23:24.834 --> 00:23:26.334
let's say
un-obfuscated JavaScript

00:23:26.334 --> 00:23:27.667
or un-minified JavaScript--

00:23:27.667 --> 00:23:29.434
in order to use Firebug
to debug it.

00:23:29.434 --> 00:23:32.934
I can debug in the original
source code,

00:23:32.934 --> 00:23:35.534
which I think
is really, really powerful.

00:23:35.534 --> 00:23:40.467
So let me go back
to the presentation.

00:23:40.467 --> 00:23:43.067
So let me just mention
sort of an analogy.

00:23:43.067 --> 00:23:45.868
Hosted mode
is really complicated.

00:23:45.868 --> 00:23:47.601
I don't even fully understand
how it's implemented,

00:23:47.601 --> 00:23:51.334
but by analogy,
I'll compare it to GreaseMonkey.

00:23:51.334 --> 00:23:54.200
Is anybody familiar
with GreaseMonkey in Firefox?

00:23:54.200 --> 00:23:56.734
Yeah, so GreaseMonkey
kind of allows you

00:23:56.734 --> 00:23:59.067
to inject JavaScript
in the page.

00:23:59.067 --> 00:24:01.467
You can kind of, like,
when a page loads up,

00:24:01.467 --> 00:24:03.434
you can basically
intercept stuff

00:24:03.434 --> 00:24:06.200
and inject your own, you know,
modifications to the DOM.

00:24:06.200 --> 00:24:08.000
And hosted mode
is like GreaseMonkey,

00:24:08.000 --> 00:24:10.133
but instead of injecting
JavaScript,

00:24:10.133 --> 00:24:11.934
it injects Java.

00:24:11.934 --> 00:24:13.901
It doesn't really inject Java
into the page.

00:24:13.901 --> 00:24:16.067
What it does is it kind of
intercepts the attempt

00:24:16.067 --> 00:24:19.033
to load that obfuscated,
pre-compiled JavaScript

00:24:19.033 --> 00:24:21.400
will callbacks into the VM

00:24:21.400 --> 00:24:24.501
where that same code,
in its original Java form,

00:24:24.501 --> 00:24:27.200
is being executed
in the JVM as bytecode.

00:24:27.200 --> 00:24:30.834
So that's how I was able
to step through it like that.

00:24:30.834 --> 00:24:32.567
So it's a really, really
powerful tool.

00:24:32.567 --> 00:24:34.767
It allows you to basically
make changes in Java

00:24:34.767 --> 00:24:36.801
and hit reload and have them
show up instantly

00:24:36.801 --> 00:24:38.234
without even compiling,

00:24:38.234 --> 00:24:40.100
'cause that's
a major complaint

00:24:40.100 --> 00:24:42.133
a lot of people who use
dynamic languages have.

00:24:42.133 --> 00:24:45.334
They're like, "Well, I don't
like a build process," right?

00:24:45.334 --> 00:24:47.567
"I got into--you know,
if I'm using, like, Python

00:24:47.567 --> 00:24:49.300
"or Ruby
or something like that,

00:24:49.300 --> 00:24:50.934
"or I'm using JavaScript,

00:24:50.934 --> 00:24:52.801
"I make a modification
and I hit reload,

00:24:52.801 --> 00:24:54.734
"and I see the changes
instantly.

00:24:54.734 --> 00:24:57.501
"I don't have to, you know,
run Ant or run Maven

00:24:57.501 --> 00:25:00.234
"and wait, like, 50 seconds
for it to build

00:25:00.234 --> 00:25:02.701
and then deploy the ward and,
you know, do, like, that stuff."

00:25:02.701 --> 00:25:04.234
They want
instant turnaround time,

00:25:04.234 --> 00:25:08.067
and that's what
hosted mode gives you.

00:25:08.067 --> 00:25:10.467
Okay, so let's talk
about performance.

00:25:10.467 --> 00:25:14.167
You wouldn't want to use
GQuery if the performance

00:25:14.167 --> 00:25:18.801
of running these selectors
was poor.

00:25:18.801 --> 00:25:21.000
And--so you might have
concerns about that.

00:25:21.000 --> 00:25:22.467
And a lot of people
have had concerns,

00:25:22.467 --> 00:25:25.667
because the original selector
implementations were written,

00:25:25.667 --> 00:25:28.701
you know, using JavaScript
parsed the CSS selectors

00:25:28.701 --> 00:25:30.467
and executing it
in JavaScript.

00:25:30.467 --> 00:25:33.234
It turns out
all of the HTML 5 browsers--

00:25:33.234 --> 00:25:35.200
in fact including
the non-HTML browsers, like IE8,

00:25:35.200 --> 00:25:38.734
have selectors
implemented natively now.

00:25:38.734 --> 00:25:40.767
There's a function called
"query selector all."

00:25:40.767 --> 00:25:42.400
So you can basically
just ask the browser

00:25:42.400 --> 00:25:44.501
to execute the selector.

00:25:44.501 --> 00:25:47.868
However, for other browsers,
like on some mobile phones

00:25:47.868 --> 00:25:52.400
and IE 6 and older versions
of Firefox and Opera,

00:25:52.400 --> 00:25:55.234
you still need to have
an alternative.

00:25:55.234 --> 00:25:58.334
So I'm gonna show you
a benchmark.

00:25:58.334 --> 00:26:01.868
Now there's this benchmark
that jQuery and MooTools

00:26:01.868 --> 00:26:04.767
and Dojo often use
called SlickSpeed.

00:26:04.767 --> 00:26:07.300
It's a selector engine
benchmark.

00:26:07.300 --> 00:26:09.267
And it's used to, you know,

00:26:09.267 --> 00:26:11.033
sort of see how they compare
to each other

00:26:11.033 --> 00:26:13.567
but also sort of to improve
their performance every time.

00:26:13.567 --> 00:26:17.567
And I sort of modified it
a little bit

00:26:17.567 --> 00:26:21.067
and added GQuery to it
as one of the benchmarks,

00:26:21.067 --> 00:26:22.901
and I changed
the visualizations.

00:26:22.901 --> 00:26:25.901
So rather than just
being a table,

00:26:25.901 --> 00:26:28.801
it's a horse race.

00:26:28.801 --> 00:26:31.100
So I'll be honest with you
up front,

00:26:31.100 --> 00:26:33.100
this is not rigged.

00:26:33.100 --> 00:26:34.601
I may not win.

00:26:34.601 --> 00:26:36.667
Sometimes it's pretty close

00:26:36.667 --> 00:26:40.367
because the selector engines
in these other libraries

00:26:40.367 --> 00:26:42.834
are very,
very well-optimized now.

00:26:42.834 --> 00:26:45.167
So it's really hard,
and if I do win,

00:26:45.167 --> 00:26:47.801
it won't be very--
by much.

00:26:47.801 --> 00:26:49.634
However, I hope you guys
are gonna root for me

00:26:49.634 --> 00:26:52.300
because I don't want
the GWT team to be angry with me

00:26:52.300 --> 00:26:54.367
if I put up
a poor performance.

00:26:54.367 --> 00:26:56.901
So let's click Start Race
and see what happens.

00:26:56.901 --> 00:26:58.467
Oh, by the way,
down here is a table

00:26:58.467 --> 00:26:59.968
of the selectors being run.

00:26:59.968 --> 00:27:01.501
That's from the SlickSpeed
benchmark.

00:27:01.501 --> 00:27:04.567
So here we go.

00:27:04.567 --> 00:27:06.300
And we're off.

00:27:06.300 --> 00:27:08.067
So let's see.

00:27:08.067 --> 00:27:12.100
It looks like they're running
neck and neck here.

00:27:12.100 --> 00:27:14.601
JQuery is--

00:27:14.601 --> 00:27:16.667
GQuery's pulling
a little bit ahead,

00:27:16.667 --> 00:27:20.234
but they're still
sort of close together.

00:27:20.234 --> 00:27:23.667
Looks like Dojo's
catching up a little bit,

00:27:23.667 --> 00:27:25.501
at least to me.

00:27:25.501 --> 00:27:26.701
It's getting close.

00:27:26.701 --> 00:27:28.467
Okay, let's--Come on.
Come on, GQuery.

00:27:28.467 --> 00:27:29.934
Come on, come on.

00:27:29.934 --> 00:27:31.801
Yes.

00:27:31.801 --> 00:27:34.033
Bruce and the GWT team
are not gonna kill me.

00:27:34.033 --> 00:27:36.033
Oh, oh, he came back.
Dojo came back at the end.

00:27:36.033 --> 00:27:38.701
Whoa, that was--
Phew, that was close.

00:27:38.701 --> 00:27:42.267
[applause]

00:27:42.267 --> 00:27:45.100
I counted my chickens
before they hatched there.

00:27:45.100 --> 00:27:47.868
But if you want to see
how close it actually is,

00:27:47.868 --> 00:27:50.367
look at the bottom row,
the total row at the bottom.

00:27:50.367 --> 00:27:53.767
9.26 milliseconds
versus jQuery,

00:27:53.767 --> 00:27:55.300
which is 10.2 milliseconds.

00:27:55.300 --> 00:27:57.734
That's about one millisecond
difference.

00:27:57.734 --> 00:27:59.133
So that's very, very close.

00:27:59.133 --> 00:28:00.667
And the reason
why it's so close

00:28:00.667 --> 00:28:02.834
is because they're delegating
most of their implementation

00:28:02.834 --> 00:28:06.968
to the native browser
query selector engine.

00:28:06.968 --> 00:28:09.067
And a lot of the performance
improvements we get

00:28:09.067 --> 00:28:11.267
probably come down to some stuff
the GWT compiler does.

00:28:11.267 --> 00:28:17.000
However, let's go back
to the presentation here.

00:28:20.100 --> 00:28:23.133
There is the subject of IE6,

00:28:23.133 --> 00:28:25.767
which I refer to
as the dreaded IE6.

00:28:25.767 --> 00:28:27.701
From now on, that's what
I'll refer to it to.

00:28:27.701 --> 00:28:30.000
And unfortunately,
I don't have, like,

00:28:30.000 --> 00:28:32.634
a VM on my Mac here
to basically show you IE,

00:28:32.634 --> 00:28:37.133
or maybe fortunately I don't
have any way to run IE6 here.

00:28:37.133 --> 00:28:39.167
However, I did take
a screen shot from a PC,

00:28:39.167 --> 00:28:40.801
and as you can see,

00:28:40.801 --> 00:28:43.834
running the pure
JavaScript selector engine,

00:28:43.834 --> 00:28:46.734
the difference
is more substantial.

00:28:46.734 --> 00:28:48.701
We win by, you know,
a pretty good margin.

00:28:48.701 --> 00:28:50.834
Or if you look
at the bottom line,

00:28:50.834 --> 00:28:53.133
about 500 milliseconds
for GQuery

00:28:53.133 --> 00:28:55.567
versus Prototype,
3,800 milliseconds.

00:28:55.567 --> 00:28:59.801
Or against jQuery,
655 milliseconds,

00:28:59.801 --> 00:29:03.667
maybe about
a 40%, 50% improvement.

00:29:03.667 --> 00:29:05.868
That's pretty good.

00:29:05.868 --> 00:29:07.667
I don't want to toot
GWT's horn too much,

00:29:07.667 --> 00:29:10.634
but that's
a pretty good result.

00:29:10.634 --> 00:29:12.200
What about size, right?

00:29:12.200 --> 00:29:18.133
I mean, how big is the output
of our GQuery library?

00:29:18.133 --> 00:29:19.801
You don't want
a really bulky library,

00:29:19.801 --> 00:29:21.767
you don't want to download
100 K of Java code

00:29:21.767 --> 00:29:23.133
to implement these selectors.

00:29:23.133 --> 00:29:24.501
And, you know, it could be--

00:29:24.501 --> 00:29:26.734
You know, we're generating
JavaScript from Java,

00:29:26.734 --> 00:29:28.701
so maybe it's really bloated.

00:29:28.701 --> 00:29:30.167
I mean, you know,
it's not as good

00:29:30.167 --> 00:29:33.968
as hand-coded JavaScript where
you can do a lot of tricks.

00:29:33.968 --> 00:29:35.901
Here's an example.

00:29:35.901 --> 00:29:38.667
This is one line of code
from GQuery.

00:29:38.667 --> 00:29:40.968
It's $("div.note")--

00:29:40.968 --> 00:29:42.634
Find all the note elements,

00:29:42.634 --> 00:29:44.534
the class = note elements
in the page

00:29:44.534 --> 00:29:48.300
and replace their inner text
with "Hello Google I/O."

00:29:48.300 --> 00:29:52.100
So the GQuery library is about
10,000 lines of Java code.

00:29:52.100 --> 00:29:55.734
It's 300 kilobytes
of source on disk.

00:29:55.734 --> 00:29:58.534
So what would be

00:29:58.534 --> 00:30:01.968
the compiled JavaScript
output?

00:30:01.968 --> 00:30:03.834
15 kilobytes or larger maybe.

00:30:03.834 --> 00:30:08.267
So the size of jQuery
is about 15 kilobytes on disk.

00:30:08.267 --> 00:30:10.501
I think 1.3,
it's a little bit bigger,

00:30:10.501 --> 00:30:13.100
like 21 or something.

00:30:13.100 --> 00:30:15.400
What would you say
about seven kilobytes,

00:30:15.400 --> 00:30:17.200
a 50% reduction?

00:30:17.200 --> 00:30:19.834
If I came to you and said,

00:30:19.834 --> 00:30:21.300
"Hey, I got this
C++ compiler,

00:30:21.300 --> 00:30:24.968
"and it will produce
executables

00:30:24.968 --> 00:30:27.868
for you and your customers
that are 50% smaller,"

00:30:27.868 --> 00:30:29.901
I mean, would it be something
you'd be interested in buying

00:30:29.901 --> 00:30:31.901
or, you know, trying out?

00:30:31.901 --> 00:30:33.834
I think that's pretty good.

00:30:33.834 --> 00:30:36.400
But it turns out
the actual output

00:30:36.400 --> 00:30:41.367
from that compile up there,
760 bytes for Safari.

00:30:41.367 --> 00:30:43.267
That's--

00:30:43.267 --> 00:30:45.067
[applause]

00:30:45.067 --> 00:30:46.400
Thank you.

00:30:46.400 --> 00:30:48.567
Thank the GWT team
for that one.

00:30:48.567 --> 00:30:52.167
So the interesting thing
is that's the Safari version

00:30:52.167 --> 00:30:54.701
where it can delegate
to the native selector engine.

00:30:54.701 --> 00:30:58.868
That's a reduction
from 300 kilobytes of source

00:30:58.868 --> 00:31:02.067
down to the obfuscated
output of 760 bytes.

00:31:02.067 --> 00:31:03.734
So I don't know,
what's the calculation there?

00:31:03.734 --> 00:31:07.567
It's like a 300 to 1
reduction in size.

00:31:07.567 --> 00:31:08.901
It's pretty amazing.

00:31:08.901 --> 00:31:10.534
And even versus
some of the other libraries,

00:31:10.534 --> 00:31:13.167
it's pretty substantial.

00:31:13.167 --> 00:31:15.267
It's actually smaller
than the [indistinct] headers

00:31:15.267 --> 00:31:16.534
used to fetch it.

00:31:16.534 --> 00:31:18.367
So if you were
to fetch this code,

00:31:18.367 --> 00:31:21.267
it's actually
smaller than that.

00:31:21.267 --> 00:31:23.767
Here's, like, another way
to visualize it.

00:31:23.767 --> 00:31:25.400
Actually, I didn't get to do
what I wanted

00:31:25.400 --> 00:31:26.767
for this presentation.

00:31:26.767 --> 00:31:29.334
But if you Uuencoded it
or Base64 encoded it,

00:31:29.334 --> 00:31:31.501
it actually fits
on a T-shirt.

00:31:31.501 --> 00:31:33.067
[laughter]

00:31:33.067 --> 00:31:35.367
I wouldn't want to calculate
how many T-shirts it would take

00:31:35.367 --> 00:31:38.667
to put some of the other
libraries on there.

00:31:38.667 --> 00:31:42.367
You might have to visit
an outlet store.

00:31:42.367 --> 00:31:45.334
So you might be wondering,
like, how it is

00:31:45.334 --> 00:31:47.701
that this can be possible.

00:31:47.701 --> 00:31:49.734
And I'll try to explain
a little bit

00:31:49.734 --> 00:31:51.734
about, like, how it works.

00:31:51.734 --> 00:31:54.000
So one of the advantages
we have with GWT

00:31:54.000 --> 00:31:55.901
is we have a compile phase.

00:31:55.901 --> 00:31:58.767
So we can parse
and run selectors at run time,

00:31:58.767 --> 00:32:00.934
like the other libraries do
with JavaScript.

00:32:00.934 --> 00:32:03.868
But we can also pre-compile
the selectors at compile time.

00:32:03.868 --> 00:32:06.033
So when it's compiling
the Java to JavaScript,

00:32:06.033 --> 00:32:09.567
it can also compile
the CSS selectors to JavaScript.

00:32:09.567 --> 00:32:11.467
So we can omit
the parsing step

00:32:11.467 --> 00:32:14.400
that the other libraries
have to deal with completely.

00:32:14.400 --> 00:32:17.701
So that code doesn't make it
into the output.

00:32:17.701 --> 00:32:20.901
Also we can inline functions.

00:32:20.901 --> 00:32:23.968
So a lot of stuff in JavaScript
impacts performance.

00:32:23.968 --> 00:32:26.501
Like, making a call
that's polymorphic,

00:32:26.501 --> 00:32:28.534
like upper Prototype chain

00:32:28.534 --> 00:32:31.601
actually has performance
implications.

00:32:31.601 --> 00:32:33.634
It turns out having, like,
global functions

00:32:33.634 --> 00:32:38.367
on the window objects--
global script is pretty fast.

00:32:38.367 --> 00:32:40.734
And then on IE6,
there's a bunch of other stuff

00:32:40.734 --> 00:32:42.667
that the GWT compiler does
that I don't want to get into,

00:32:42.667 --> 00:32:46.167
but it really helps IE6.

00:32:46.167 --> 00:32:50.067
But really the core reason
why it's so small and fast

00:32:50.067 --> 00:32:53.901
is that only fields and methods
that are referenced

00:32:53.901 --> 00:32:55.901
are actually emitted
in the output.

00:32:55.901 --> 00:32:58.100
So typically with JavaScript,

00:32:58.100 --> 00:33:00.200
you know, you might have
a library and, you know,

00:33:00.200 --> 00:33:02.267
have, like, 50 JavaScript
functions in there.

00:33:02.267 --> 00:33:04.067
You have no idea
which ones are gonna be called

00:33:04.067 --> 00:33:06.067
and which ones won't,
so you just include all of them

00:33:06.067 --> 00:33:08.267
in the whole library
and deploy with that.

00:33:08.267 --> 00:33:09.934
But what GWT does
is it says,

00:33:09.934 --> 00:33:12.400
"Hey, you know what,

00:33:12.400 --> 00:33:17.100
"you only use the text function
to replace inner text.

00:33:17.100 --> 00:33:20.300
"So I don't need
the special effects framework,

00:33:20.300 --> 00:33:22.834
the animation framework,
the click handler stuff."

00:33:22.834 --> 00:33:24.767
It just throws
all that stuff out the window,

00:33:24.767 --> 00:33:29.934
and it only emits the code
that you actually use.

00:33:29.934 --> 00:33:32.400
So like I said,
"G dub T" query or GWT query,

00:33:32.400 --> 00:33:36.133
GQuery, has this concept
of compile time selectors.

00:33:36.133 --> 00:33:37.767
It can also do
run time selectors.

00:33:37.767 --> 00:33:39.901
You can write $
and a query expression,

00:33:39.901 --> 00:33:41.968
and it will parse that
at run time.

00:33:41.968 --> 00:33:44.300
If you do that,
the GWT compiler will be forced

00:33:44.300 --> 00:33:45.868
to include
the run time parses.

00:33:45.868 --> 00:33:47.701
It'll say, "Hey, you know,
you're trying to evaluate

00:33:47.701 --> 00:33:49.400
"a selector at run time.

00:33:49.400 --> 00:33:50.834
"I need to go pull in
all that code

00:33:50.834 --> 00:33:52.968
to parse CSS selectors
and evaluate them."

00:33:52.968 --> 00:33:55.501
So you might want to do that
when you're first prototyping

00:33:55.501 --> 00:33:58.501
the application.

00:33:58.501 --> 00:33:59.968
But then later on,
you might want to go,

00:33:59.968 --> 00:34:01.267
"Okay, I'm gonna make
my application

00:34:01.267 --> 00:34:02.434
smaller to download
and faster."

00:34:02.434 --> 00:34:04.167
You go back and you can
re-factor those

00:34:04.167 --> 00:34:05.567
into compile time selectors.

00:34:05.567 --> 00:34:07.567
And the way you do that
is quite simple.

00:34:07.567 --> 00:34:09.567
If you've something like
the GWT image bundle before,

00:34:09.567 --> 00:34:11.200
it's kind of similar.

00:34:11.200 --> 00:34:13.534
But what you do
is you make an interface.

00:34:13.534 --> 00:34:15.567
Here I have
public interface slide.

00:34:15.567 --> 00:34:18.667
And I extend another interface
called Selectors.

00:34:18.667 --> 00:34:20.868
And then what I do
is for each selector

00:34:20.868 --> 00:34:22.701
that I want to run,

00:34:22.701 --> 00:34:24.434
I declare a method.

00:34:24.434 --> 00:34:26.367
So here I have a method
called allSlideBullets,

00:34:26.367 --> 00:34:28.601
another one called
slideBulletCtx,

00:34:28.601 --> 00:34:30.334
another one called allSlides.

00:34:30.334 --> 00:34:32.234
And then you use
a Java annotation,

00:34:32.234 --> 00:34:34.801
@selector, to tell it that,

00:34:34.801 --> 00:34:37.234
"Okay, when you call
allSlideBullets,

00:34:37.234 --> 00:34:40.300
"I want it to actually
return the result of executing

00:34:40.300 --> 00:34:43.267
div.slide li."

00:34:43.267 --> 00:34:45.934
Then you hand this off
to the compiler,

00:34:45.934 --> 00:34:48.033
and the GQuery library
takes over

00:34:48.033 --> 00:34:51.334
and uses a feature of GWT
called Generators,

00:34:51.334 --> 00:34:53.767
and it will parse
that div.slide li

00:34:53.767 --> 00:34:55.100
at compile time.

00:34:55.100 --> 00:34:56.868
It's like a compiler plugin.

00:34:56.868 --> 00:35:00.100
And it generate code
that actually implements

00:35:00.100 --> 00:35:04.033
that allSlideBullets
function.

00:35:04.033 --> 00:35:09.934
So no parsing code actually
makes it into your output.

00:35:09.934 --> 00:35:11.334
You might be wondering,

00:35:11.334 --> 00:35:13.601
what happens when you call
$(selector)?

00:35:13.601 --> 00:35:15.734
Well, there's another
feature of GWT called

00:35:15.734 --> 00:35:18.033
Deferred Binding
and Permutations.

00:35:18.033 --> 00:35:19.634
This might have been discussed

00:35:19.634 --> 00:35:21.367
in some of the other
presentations,

00:35:21.367 --> 00:35:23.901
but GWT compiles a separate
version of the output

00:35:23.901 --> 00:35:25.367
for each browser--

00:35:25.367 --> 00:35:28.300
one for Safari,
one for IE6, for example.

00:35:28.300 --> 00:35:29.901
And that means that,
for example,

00:35:29.901 --> 00:35:32.367
the Safari users
don't have to download

00:35:32.367 --> 00:35:35.601
all this bloated code
to implement selectors

00:35:35.601 --> 00:35:37.400
that IE6 needs,

00:35:37.400 --> 00:35:39.367
because it has
native acceleration

00:35:39.367 --> 00:35:41.300
for query selectors called
querySelectorAll.

00:35:41.300 --> 00:35:43.367
So it just leaves those out.

00:35:43.367 --> 00:35:46.868
But on Firefox2
and older Safari browsers,

00:35:46.868 --> 00:35:48.367
they don't have
querySelectorAll,

00:35:48.367 --> 00:35:49.901
but they do have XPath.

00:35:49.901 --> 00:35:52.000
They have this function called
document.evaluate.

00:35:52.000 --> 00:35:55.100
So for those browsers
what happens is at compile time,

00:35:55.100 --> 00:35:57.834
it will parse
the CSS2 selector

00:35:57.834 --> 00:36:01.067
and then translate it
into an XPath string,

00:36:01.067 --> 00:36:03.934
and then it passes it
to document.evaluate.

00:36:03.934 --> 00:36:06.434
So it produces one line of code
to implement the selector.

00:36:06.434 --> 00:36:08.734
document.evaluate, quote,
and then some XPath.

00:36:08.734 --> 00:36:10.400
That's all it does.

00:36:10.400 --> 00:36:12.000
And then for all
the other browsers,

00:36:12.000 --> 00:36:13.601
of course like IE6,

00:36:13.601 --> 00:36:16.000
it just uses
lots of regular expressions

00:36:16.000 --> 00:36:17.634
to parse the selectors

00:36:17.634 --> 00:36:21.434
and then emits
a bunch of DOM calls

00:36:21.434 --> 00:36:22.968
directly into the output.

00:36:22.968 --> 00:36:24.367
Like, you know,
get elements by tag name,

00:36:24.367 --> 00:36:25.801
traverse the children,

00:36:25.801 --> 00:36:27.434
check to see
if they have the class

00:36:27.434 --> 00:36:31.734
that you're trying to match
and so on.

00:36:31.734 --> 00:36:33.968
Compile time selectors
do another cool thing,

00:36:33.968 --> 00:36:35.834
is they can short-circuit stuff

00:36:35.834 --> 00:36:39.234
even with the native
querySelectorAll.

00:36:39.234 --> 00:36:41.367
I've benchmarked this
and it turns out, for example,

00:36:41.367 --> 00:36:43.534
to getElementById
is still faster

00:36:43.534 --> 00:36:45.334
than calling
querySelectorAll,

00:36:45.334 --> 00:36:46.968
probably because they don't
have to parse anything.

00:36:46.968 --> 00:36:49.367
So for example,
if you use a selector

00:36:49.367 --> 00:36:51.801
like # and then the ID
of an element,

00:36:51.801 --> 00:36:53.534
the compile time selector

00:36:53.534 --> 00:36:56.067
will not emit
querySelectorAll

00:36:56.067 --> 00:36:59.334
with, like, the #foo
for example.

00:36:59.334 --> 00:37:02.133
Instead, it will delegate
to getElementById.

00:37:02.133 --> 00:37:03.601
So it'll just produce,
you know,

00:37:03.601 --> 00:37:06.567
getElementById #foo
in the output.

00:37:06.567 --> 00:37:08.868
And if you have a browser
that has this function

00:37:08.868 --> 00:37:10.734
called
getElementsByClassName,

00:37:10.734 --> 00:37:12.200
it will delegate to that.

00:37:12.200 --> 00:37:14.067
Otherwise, it will fall back
to the native selector,

00:37:14.067 --> 00:37:16.701
'cause getElementsByClassName
seems to be faster

00:37:16.701 --> 00:37:18.634
than querySelectorAll too
if you're just doing

00:37:18.634 --> 00:37:21.501
a class name lookup.

00:37:21.501 --> 00:37:24.868
And on Firefox2
or the XPath-specific browsers,

00:37:24.868 --> 00:37:27.801
it basically has
that same short-circuiting.

00:37:27.801 --> 00:37:29.300
It will short-circuit
for IDs

00:37:29.300 --> 00:37:31.300
and some other
particular queries.

00:37:31.300 --> 00:37:34.734
And then even for
the dreaded IE6,

00:37:34.734 --> 00:37:38.067
it will generate
inlined calls

00:37:38.067 --> 00:37:40.367
by parsing the CSS selector

00:37:40.367 --> 00:37:42.100
and generating inlined calls
to DOM method

00:37:42.100 --> 00:37:43.501
to get elements by tag name.

00:37:43.501 --> 00:37:45.133
So it kind of
unrolls everything.

00:37:45.133 --> 00:37:46.734
That's how we get our speed.

00:37:46.734 --> 00:37:48.868
And it's possible
to short-circuit or eliminate

00:37:48.868 --> 00:37:50.367
some of the cases.

00:37:50.367 --> 00:37:52.534
This is the most immature
part of GQuery.

00:37:52.534 --> 00:37:54.367
So even though
we're performing

00:37:54.367 --> 00:37:56.000
well ahead
of the other libraries,

00:37:56.000 --> 00:37:58.167
in fact, believe it or not,
there's a lot of overhead left.

00:37:58.167 --> 00:38:00.000
So when I get to the end
of the presentation

00:38:00.000 --> 00:38:02.334
and talk about how you can
contribute to the project,

00:38:02.334 --> 00:38:04.601
I'm accepting patches,
'cause there's a lot of stuff

00:38:04.601 --> 00:38:07.634
we can do to speed it up
even more than it already is.

00:38:07.634 --> 00:38:09.834
Okay, let me show you
a real app.

00:38:09.834 --> 00:38:13.300
This is the Partuza
OpenSocial Container.

00:38:13.300 --> 00:38:16.601
It's an Apache Shindig
reference implementation,

00:38:16.601 --> 00:38:18.801
and it uses jQuery.

00:38:18.801 --> 00:38:20.701
So I'm gonna show you, like,
how to take something

00:38:20.701 --> 00:38:23.200
that was written in jQuery
and do the GQuery equivalent.

00:38:23.200 --> 00:38:24.868
So here we go with--

00:38:24.868 --> 00:38:27.067
what it does
is over here on the left

00:38:27.067 --> 00:38:29.000
there's, like,
a navigation bar.

00:38:29.000 --> 00:38:32.234
And when you hover over
these li links,

00:38:32.234 --> 00:38:35.067
it puts this, like, little
gradient background on it

00:38:35.067 --> 00:38:36.634
and then makes it clickable,

00:38:36.634 --> 00:38:38.968
'cause normally it's just
like an li link.

00:38:38.968 --> 00:38:42.200
And here's the jQuery
code to do that.

00:38:42.200 --> 00:38:43.534
My time's getting
a little bit short,

00:38:43.534 --> 00:38:44.968
so I'm gonna have
to speed up a little bit.

00:38:44.968 --> 00:38:47.467
It basically targets
the li elements there

00:38:47.467 --> 00:38:49.167
in that really long selector,

00:38:49.167 --> 00:38:51.467
and it calls a jQuery function
called hover.

00:38:51.467 --> 00:38:53.334
Now hover's
an interesting function.

00:38:53.334 --> 00:38:55.501
What you do is you pass
two callback functions to it--

00:38:55.501 --> 00:38:57.968
one to call you when someone
hovers the element

00:38:57.968 --> 00:38:59.434
and one to call you
when they leave--

00:38:59.434 --> 00:39:00.868
un-hover the element.

00:39:00.868 --> 00:39:02.467
And you can see what they're
doing in the callbacks

00:39:02.467 --> 00:39:04.067
is they're saying,
"If you hover it,

00:39:04.067 --> 00:39:06.868
"add this class called
ui-state-hover to the element.

00:39:06.868 --> 00:39:09.501
"And if you leave--
you stop hovering,

00:39:09.501 --> 00:39:12.367
remove that class
ui-state-hover."

00:39:12.367 --> 00:39:16.834
So here's what the same thing
looks like in GQuery.

00:39:16.834 --> 00:39:19.133
So we have the same
selector.

00:39:19.133 --> 00:39:21.434
And we have
the .hover function.

00:39:21.434 --> 00:39:23.667
And then what's that?

00:39:23.667 --> 00:39:25.701
Oh, no, it's an anonymous
inner class.

00:39:25.701 --> 00:39:27.601
So one of the things
you're used to

00:39:27.601 --> 00:39:30.434
if you're using JavaScript
is that you have closures.

00:39:30.434 --> 00:39:32.567
You can pass
little function snippets

00:39:32.567 --> 00:39:35.701
very easily and very succinctly
into methods.

00:39:35.701 --> 00:39:37.467
But Java doesn't have
first class functions

00:39:37.467 --> 00:39:38.734
or high order functions.

00:39:38.734 --> 00:39:40.601
It only has
anonymous inner classes.

00:39:40.601 --> 00:39:42.133
So this is how you would
normally do it,

00:39:42.133 --> 00:39:43.901
and jQuery fully supports
this programming model.

00:39:43.901 --> 00:39:46.868
So here I'm passing
two anonymous inner functions,

00:39:46.868 --> 00:39:49.767
like new function
and then basically one--

00:39:49.767 --> 00:39:52.100
the first one's adding
the class ui-state-hover,

00:39:52.100 --> 00:39:55.734
and then the second one's saying
remove class ui-state-hover.

00:39:55.734 --> 00:39:58.300
But I thought
that this experience

00:39:58.300 --> 00:40:00.400
would turn off some people
who are used

00:40:00.400 --> 00:40:01.701
to the jQuery
programming model.

00:40:01.701 --> 00:40:03.167
They don't necessarily
want to write

00:40:03.167 --> 00:40:04.734
all those boilerplate
Java code.

00:40:04.734 --> 00:40:07.434
You know, they're usually
sort of griping about it.

00:40:07.434 --> 00:40:10.033
And maybe there's a way
to sort of get that feel

00:40:10.033 --> 00:40:14.734
in Java using some tricks.

00:40:14.734 --> 00:40:16.934
So here's what I came up with--

00:40:16.934 --> 00:40:18.968
lazy evaluation.

00:40:18.968 --> 00:40:20.601
So what you can do is,

00:40:20.601 --> 00:40:22.834
is you can call this function
called lazy.

00:40:22.834 --> 00:40:26.267
And what it returns
is a lazy version

00:40:26.267 --> 00:40:28.167
of the GQuery object

00:40:28.167 --> 00:40:30.167
that implements
the GQuery API.

00:40:30.167 --> 00:40:32.033
Now the thing about
the lazy version is this,

00:40:32.033 --> 00:40:33.400
is when you
call methods on it,

00:40:33.400 --> 00:40:35.767
like add this class or set
this CSS property or so on,

00:40:35.767 --> 00:40:37.601
it doesn't execute it
right away.

00:40:37.601 --> 00:40:40.367
It just records the fact that
that's what you wanted to do.

00:40:40.367 --> 00:40:43.200
Then at the very end
when you call end,

00:40:43.200 --> 00:40:45.634
it actually processes
all of the things

00:40:45.634 --> 00:40:48.467
that you queued up
and turns it into a closure

00:40:48.467 --> 00:40:51.434
and passes it to
the requisite library function.

00:40:51.434 --> 00:40:53.534
So in this case,
you can just say,

00:40:53.534 --> 00:40:56.734
"lazy.addClass.end"
and then pass--

00:40:56.734 --> 00:41:00.000
it's almost like passing
a closure in JavaScript.

00:41:00.000 --> 00:41:02.100
And if you look at the bottom,
here's sort of the mnemonic.

00:41:02.100 --> 00:41:03.968
lazy = function() {

00:41:03.968 --> 00:41:06.400
and end = }

00:41:06.400 --> 00:41:08.200
And if you count
the number of keystrokes,

00:41:08.200 --> 00:41:12.667
it's actually more succinct
than JavaScript.

00:41:12.667 --> 00:41:17.067
I told you I would show you
some cool tricks with Java, so.

00:41:17.067 --> 00:41:19.934
Okay, here's another thing.

00:41:19.934 --> 00:41:22.234
I admit this part's
actually not fully baked.

00:41:22.234 --> 00:41:24.234
I'm sort of still
in the process of figuring out

00:41:24.234 --> 00:41:25.767
exactly what
we're gonna do here.

00:41:25.767 --> 00:41:27.033
But I thought about
one of the cool things

00:41:27.033 --> 00:41:29.200
is that since we have
this information

00:41:29.200 --> 00:41:31.400
in compile time
selector interfaces

00:41:31.400 --> 00:41:33.934
and in other parts
of the Java type system,

00:41:33.934 --> 00:41:36.234
wouldn't it be cool
if we could auto-generate

00:41:36.234 --> 00:41:39.300
Javadoc-like stuff
but for the designers?

00:41:39.300 --> 00:41:41.701
So, like, for the guys
who are editing the HTML

00:41:41.701 --> 00:41:44.434
but not writing code, right?

00:41:44.434 --> 00:41:48.601
So what we want to do
basically

00:41:48.601 --> 00:41:51.300
is we want to look at--
that selector interface

00:41:51.300 --> 00:41:52.834
has all of our
compile time selectors,

00:41:52.834 --> 00:41:54.968
and we want to produce, like,
a human readable thing

00:41:54.968 --> 00:41:56.267
that says, you know,

00:41:56.267 --> 00:41:57.834
"If you want to make something
a slide bullet,

00:41:57.834 --> 00:42:02.434
you have to basically
put a class = Slide Bullet,"

00:42:02.434 --> 00:42:03.667
or something on it, right?

00:42:03.667 --> 00:42:05.667
So it will sort of
document the selector

00:42:05.667 --> 00:42:09.367
for the guys who are gonna be
applying it to the HTML.

00:42:09.367 --> 00:42:10.968
So this is what
it would look like.

00:42:10.968 --> 00:42:12.300
This is that selector
you saw before

00:42:12.300 --> 00:42:13.534
with all Slide Bullets,

00:42:13.534 --> 00:42:15.467
and it has the @selector
annotation saying,

00:42:15.467 --> 00:42:17.400
"run div.slide li."

00:42:17.400 --> 00:42:19.801
And then what we do
is we add two extra annotations.

00:42:19.801 --> 00:42:23.567
One is @ the design name
to give us some more

00:42:23.567 --> 00:42:25.734
human-readable things
instead of allSlideBullets.

00:42:25.734 --> 00:42:28.000
And then we give it
a design sample,

00:42:28.000 --> 00:42:30.234
which is like what a fragment
of HTML would look like

00:42:30.234 --> 00:42:32.868
that this selector
would typically target.

00:42:32.868 --> 00:42:36.267
And then we run
our build process on it.

00:42:36.267 --> 00:42:39.067
We compile our JavaScript,
and what will happen is,

00:42:39.067 --> 00:42:42.701
is we'll get some
documentation output

00:42:42.701 --> 00:42:44.501
that might look like this.

00:42:44.501 --> 00:42:47.367
And of course, it kind of looks
not too good right now.

00:42:47.367 --> 00:42:49.267
This is like
a prototype implementation.

00:42:49.267 --> 00:42:52.567
But it's like a table,
and for each design element,

00:42:52.567 --> 00:42:55.100
like Slide Bullet,
you see what is the selector

00:42:55.100 --> 00:42:57.667
that that thing
is looking to target,

00:42:57.667 --> 00:42:59.901
and some Javadoc
that kind of explains, like,

00:42:59.901 --> 00:43:02.167
Slide Bullets are li items
with a ul

00:43:02.167 --> 00:43:04.100
that you want to appear
as animated bullet points

00:43:04.100 --> 00:43:06.634
triggered by a space bar
or mouse click.

00:43:06.634 --> 00:43:08.133
And then underneath it
includes the sample, which is

00:43:08.133 --> 00:43:12.033
class = div
class = slide ul li

00:43:12.033 --> 00:43:13.267
and so on.

00:43:13.267 --> 00:43:14.901
The idea here
is that the programmer

00:43:14.901 --> 00:43:17.000
would be able
to hand this document

00:43:17.000 --> 00:43:20.534
to a guy who maybe
only knows HTML and CSS,

00:43:20.534 --> 00:43:23.734
and that guy could know what
he has to put into the HTML

00:43:23.734 --> 00:43:26.467
to trigger that
GQuery library code

00:43:26.467 --> 00:43:29.734
to target it and progressively
enhance those elements.

00:43:29.734 --> 00:43:32.801
So it's still something
that's in the process

00:43:32.801 --> 00:43:34.367
of being designed,

00:43:34.367 --> 00:43:38.567
but I think it has potential.

00:43:38.567 --> 00:43:41.767
Okay.

00:43:41.767 --> 00:43:43.100
So plugins.

00:43:43.100 --> 00:43:45.934
I mentioned that plugins
are a really powerful mechanism

00:43:45.934 --> 00:43:47.267
that jQuery uses.

00:43:47.267 --> 00:43:50.200
So obviously we have to do
the same thing for GQuery.

00:43:50.200 --> 00:43:53.767
However, the way plugins work
in jQuery

00:43:53.767 --> 00:43:57.901
leverages sort of a powerful
facility in JavaScript,

00:43:57.901 --> 00:43:59.734
which is prototype
modification.

00:43:59.734 --> 00:44:02.501
So you include a plugin
in jQuery,

00:44:02.501 --> 00:44:05.634
it modifies the methods
on the jQuery object itself

00:44:05.634 --> 00:44:07.801
and adds new methods to it.

00:44:07.801 --> 00:44:09.968
And we obviously
can't do that in Java.

00:44:09.968 --> 00:44:11.434
It's a statically compiled
language.

00:44:11.434 --> 00:44:15.267
You can't add methods
to the class at run time

00:44:15.267 --> 00:44:18.100
or, you know,
even compile time.

00:44:18.100 --> 00:44:20.367
I mean, you can
sub class it, but--

00:44:20.367 --> 00:44:22.868
So how do we get around that?

00:44:22.868 --> 00:44:25.934
So what I did is I came up
with this mechanism

00:44:25.934 --> 00:44:29.100
of using some trickery
with Java Generics.

00:44:29.100 --> 00:44:32.367
so all you have
to write is .as

00:44:32.367 --> 00:44:33.734
and then you write
the name of the plugin.

00:44:33.734 --> 00:44:35.634
So here you can see
a thing that says

00:44:35.634 --> 00:44:37.367
.as(Effects) right?

00:44:37.367 --> 00:44:39.167
And once you do that,

00:44:39.167 --> 00:44:40.601
they new methods
that are in that plugin

00:44:40.601 --> 00:44:43.667
sort of materialize
on a sub type

00:44:43.667 --> 00:44:45.000
that comes out of that.

00:44:45.000 --> 00:44:46.601
So you see
that the pop-up's saying

00:44:46.601 --> 00:44:48.167
that there's a fade in
method,

00:44:48.167 --> 00:44:49.767
a fade out method,
and so on.

00:44:49.767 --> 00:44:53.100
So I'm gonna give you
an example

00:44:53.100 --> 00:44:55.100
of a plugin I wrote--

00:44:55.100 --> 00:44:56.634
not that I wrote,
that I ported,

00:44:56.634 --> 00:44:59.801
called The jQuery
Star Rating Plugin.

00:44:59.801 --> 00:45:04.167
So here's an HTML
Web 1.0 page.

00:45:04.167 --> 00:45:07.367
It has some radio buttons
on the right and left here.

00:45:07.367 --> 00:45:08.868
Sorry, on the right.

00:45:08.868 --> 00:45:11.734
And this could be like
a rating thing for a forum.

00:45:11.734 --> 00:45:13.400
Like maybe it says
at the end of a document,

00:45:13.400 --> 00:45:15.734
"How would you rate this article
from one to five?"

00:45:15.734 --> 00:45:17.601
And you have, like,
five radio buttons there.

00:45:17.601 --> 00:45:19.934
And then you would submit
a form to the server

00:45:19.934 --> 00:45:22.133
to submit the result
of you filling out

00:45:22.133 --> 00:45:23.667
those radio buttons.

00:45:23.667 --> 00:45:25.367
But we want to
progressively enhance that

00:45:25.367 --> 00:45:26.968
so it's done on the client's
side and it looks nicer.

00:45:26.968 --> 00:45:31.000
So I'm gonna click this button
down here that says Enhance,

00:45:31.000 --> 00:45:33.667
and it turns it into stars.

00:45:33.667 --> 00:45:37.467
So now I can mouse
over the stars like that.

00:45:37.467 --> 00:45:39.467
I can click to set the rating.

00:45:39.467 --> 00:45:41.534
The interesting thing is,
is that it's actually

00:45:41.534 --> 00:45:43.567
reflecting
the click on the star

00:45:43.567 --> 00:45:46.701
in the underlying HTML form.

00:45:46.701 --> 00:45:50.000
So if you were to submit this
using a regular form submit,

00:45:50.000 --> 00:45:51.801
the server on the back-end

00:45:51.801 --> 00:45:53.801
that's written in PHP or Python
or Java, whatever it is,

00:45:53.801 --> 00:45:56.400
would get that rating value

00:45:56.400 --> 00:46:00.801
as a regular, you know,
form submit.

00:46:00.801 --> 00:46:06.133
So the code for that

00:46:06.133 --> 00:46:07.968
looks like this.

00:46:07.968 --> 00:46:09.701
Oops.

00:46:09.701 --> 00:46:11.167
GWT.

00:46:11.167 --> 00:46:13.801
Let's see here, what's
the name of that function?

00:46:13.801 --> 00:46:15.334
Plugin module.

00:46:15.334 --> 00:46:17.767
Okay, so here it is
right here.

00:46:17.767 --> 00:46:19.300
Oops, no, no.
Here it is right here.

00:46:19.300 --> 00:46:21.534
Sorry.

00:46:21.534 --> 00:46:23.834
This is like a callback when
you click the Enhance button.

00:46:23.834 --> 00:46:25.734
And all it does
is this is the line of code,

00:46:25.734 --> 00:46:27.200
one line of code.

00:46:27.200 --> 00:46:29.467
Whoops.
Oops.

00:46:29.467 --> 00:46:32.534
Where'd it go?

00:46:32.534 --> 00:46:34.434
Uh, give me a second.
Okay.

00:46:34.434 --> 00:46:36.133
Okay, this one line
of code right here--

00:46:36.133 --> 00:46:37.734
I'll highlight it for you--

00:46:37.734 --> 00:46:40.200
is all I had to do
to activate the plugin.

00:46:40.200 --> 00:46:42.868
I said $input,
which is a CSS selector,

00:46:42.868 --> 00:46:44.100
run time selector says,

00:46:44.100 --> 00:46:46.067
"Find all the input elements
in the page,"

00:46:46.067 --> 00:46:47.868
which all happen to be
radio buttons.

00:46:47.868 --> 00:46:50.667
and .as(ratings)--

00:46:50.667 --> 00:46:52.701
so that's the ratings plugin--

00:46:52.701 --> 00:46:54.334
and then execute
the rating method,

00:46:54.334 --> 00:46:55.801
and that's sufficient.

00:46:55.801 --> 00:46:57.634
It executes the plugin
that goes to the page

00:46:57.634 --> 00:47:02.801
and runs GQuery code
to progressively enhance it.

00:47:02.801 --> 00:47:06.033
So it's really simple
to write plugins.

00:47:06.033 --> 00:47:09.801
So if you're interested
in doing it--

00:47:09.801 --> 00:47:12.367
and I would encourage people
who are interested

00:47:12.367 --> 00:47:15.701
to contribute plugins to me
'cause I need help--

00:47:15.701 --> 00:47:18.067
you only have to do
four things to implement it.

00:47:18.067 --> 00:47:20.567
First, you write
your plugin class in Java

00:47:20.567 --> 00:47:23.133
and you extend
the GQuery object.

00:47:23.133 --> 00:47:25.934
Second, you implement
an interface called Plugin

00:47:25.934 --> 00:47:28.767
that parameterized
by your class type.

00:47:28.767 --> 00:47:31.200
Third, you have a static
initializer on your class

00:47:31.200 --> 00:47:33.267
that invokes
GQuery.registerPlugin

00:47:33.267 --> 00:47:36.067
and passes, like,
your class.

00:47:36.067 --> 00:47:37.934
And then last,

00:47:37.934 --> 00:47:41.300
you put a static variable
on your class.

00:47:41.300 --> 00:47:43.567
Typically, you name it
the same as your class

00:47:43.567 --> 00:47:46.100
so that people can use it
as a succinct way

00:47:46.100 --> 00:47:47.501
to refer to the plugin.

00:47:47.501 --> 00:47:49.334
They can say .as
and then, like, Effects

00:47:49.334 --> 00:47:50.868
or Star Ratings or whatever.

00:47:50.868 --> 00:47:52.234
And they can
statically import it,

00:47:52.234 --> 00:47:53.567
so they don't
have to write like,

00:47:53.567 --> 00:47:56.534
"com.foo.bar.starrating."

00:47:56.534 --> 00:47:58.400
You know, they can
sort of import it

00:47:58.400 --> 00:48:01.534
and just use
a very succinct label.

00:48:01.534 --> 00:48:06.567
So it's being released
as open source today.

00:48:06.567 --> 00:48:09.534
You can go to gwtquery.com
and download it.

00:48:09.534 --> 00:48:12.634
It's still sort of Beta,
but it mostly works.

00:48:12.634 --> 00:48:15.968
I'd encourage people
to download it, try it out,

00:48:15.968 --> 00:48:18.300
and help me fix it up.

00:48:18.300 --> 00:48:20.467
Contribute to the core,
write plugins.

00:48:20.467 --> 00:48:21.968
Give me feedback.

00:48:21.968 --> 00:48:24.000
And before I go further,
I'd like to thank--

00:48:24.000 --> 00:48:25.467
I don't know
if he's here today--

00:48:25.467 --> 00:48:28.367
but someone named
Manuel Carrasco.

00:48:28.367 --> 00:48:33.267
Just, like, two weeks before
I started doing this

00:48:33.267 --> 00:48:34.834
for the show,

00:48:34.834 --> 00:48:36.601
submitted me, like,
a massive patch.

00:48:36.601 --> 00:48:38.801
He did unit tests
for, like, half the functions,

00:48:38.801 --> 00:48:40.167
he wrote documentation.

00:48:40.167 --> 00:48:42.067
It just appeared out of nowhere
as a lifesaver.

00:48:42.067 --> 00:48:43.534
So I'd like to thank him,
wherever he is,

00:48:43.534 --> 00:48:44.801
for the patches.

00:48:44.801 --> 00:48:46.601
I've integrated them
with GQuery.

00:48:46.601 --> 00:48:48.634
And I'd encourage
more people like him

00:48:48.634 --> 00:48:51.467
to come forward
and help us out.

00:48:51.467 --> 00:48:54.334
And I'd encourage you
to follow my blog in the future,

00:48:54.334 --> 00:48:56.033
timepedia.blogspot.com,

00:48:56.033 --> 00:48:58.200
where I frequently talk
about these things.

00:48:58.200 --> 00:49:00.133
So we're getting
to the ten-minute mark.

00:49:00.133 --> 00:49:02.267
I have time for questions.

00:49:02.267 --> 00:49:04.734
If you want to ask me
a question, come to the mic.

00:49:04.734 --> 00:49:06.067
[applause]

00:49:06.067 --> 00:49:08.000
Thank you.

00:49:13.701 --> 00:49:15.567
man: Looks great.
Looking forward to using it.

00:49:15.567 --> 00:49:17.868
Glad it's open source now.

00:49:17.868 --> 00:49:20.267
Can you comment
on the other announcement

00:49:20.267 --> 00:49:23.834
I heard, I think yesterday,
about GWT team

00:49:23.834 --> 00:49:25.901
bringing this into GWT.

00:49:25.901 --> 00:49:27.234
Cromwell: Yeah.

00:49:27.234 --> 00:49:30.601
You'll have to ask Bruce
and some of the GWT team

00:49:30.601 --> 00:49:33.501
more about this,
but they would like to.

00:49:33.501 --> 00:49:35.400
And I think
at the current stage

00:49:35.400 --> 00:49:38.501
it probably is a little rough
around the edges for that.

00:49:38.501 --> 00:49:40.601
But I think, and I would
say this in general

00:49:40.601 --> 00:49:42.901
for getting anything
into the GWT trunk,

00:49:42.901 --> 00:49:45.167
is that you should join
the GWT contributors list.

00:49:45.167 --> 00:49:46.534
If you've got some kind
of cool new feature

00:49:46.534 --> 00:49:48.100
you want to add to GWT,

00:49:48.100 --> 00:49:51.267
make a project on Google code
or put it into the incubator.

00:49:51.267 --> 00:49:53.834
Have people use it,
test it out,

00:49:53.834 --> 00:49:55.868
see what needs to be changed

00:49:55.868 --> 00:49:59.100
to make it more usable
or fit more use cases.

00:49:59.100 --> 00:50:01.100
Get it to a point where
it's more mature and reliable,

00:50:01.100 --> 00:50:03.200
and then it probably
will make it into the trunk.

00:50:03.200 --> 00:50:05.801
They're very open
about accepting stuff

00:50:05.801 --> 00:50:07.400
into the GWT trunk.

00:50:07.400 --> 00:50:08.701
There's been a lot
of contributors,

00:50:08.701 --> 00:50:11.167
and I hope that
at some point in the future

00:50:11.167 --> 00:50:15.167
it will be in the GWT trunk,
maybe 2.0.

00:50:15.167 --> 00:50:16.467
Next question.

00:50:16.467 --> 00:50:18.634
man: Hi.
Regarding the benchmark,

00:50:18.634 --> 00:50:22.200
what versions of libraries
of Dojo, Prototype--

00:50:22.200 --> 00:50:24.033
Cromwell: The Newest.
Prototype 1.6.

00:50:24.033 --> 00:50:26.767
The very latest Dojo as of
whatever it was last week.

00:50:26.767 --> 00:50:29.334
And jQuery 1.3.2.

00:50:29.334 --> 00:50:31.000
I can check--

00:50:31.000 --> 00:50:33.667
Actually, I have them
sitting in my IDE,

00:50:33.667 --> 00:50:35.801
so I can tell you
what the versions are.

00:50:35.801 --> 00:50:37.667
So let's see here.

00:50:37.667 --> 00:50:39.667
jQuery 1.3.1.

00:50:39.667 --> 00:50:41.534
Prototype 1.6.03.

00:50:41.534 --> 00:50:44.133
And whatever, I think Dojo
is just called Dojo,

00:50:44.133 --> 00:50:46.300
but maybe there's
a version string in there.

00:50:46.300 --> 00:50:49.400
I don't know what version
this is.

00:50:49.400 --> 00:50:51.567
It's whatever the latest
version of Dojo is.

00:50:51.567 --> 00:50:54.601
It's the one with
the Sizzle engine in it.

00:50:54.601 --> 00:50:56.901
man: All right, thanks.

00:50:56.901 --> 00:51:00.701
Cromwell: By the way,
just to mention,

00:51:00.701 --> 00:51:02.868
the SlickSpeed benchmark
that I used is an older version.

00:51:02.868 --> 00:51:04.834
They added
more selectors to it.

00:51:04.834 --> 00:51:07.801
So, you know, the results
might be different

00:51:07.801 --> 00:51:09.567
if you used
the newest SlickSpeed,

00:51:09.567 --> 00:51:14.400
which uses a lot more
varied selectors.

00:51:14.400 --> 00:51:16.701
Next question.

00:51:16.701 --> 00:51:20.868
man: What is the GWT using
to detect the browser?

00:51:20.868 --> 00:51:22.767
Cromwell:
Okay, so the way GWT works

00:51:22.767 --> 00:51:24.534
is it doesn't--

00:51:24.534 --> 00:51:26.501
You can use either
browser sniffing

00:51:26.501 --> 00:51:27.834
or capability detection.

00:51:27.834 --> 00:51:29.234
You can do either one.

00:51:29.234 --> 00:51:31.100
So two things are going on.

00:51:31.100 --> 00:51:33.467
One is is that
there's browser sniffing

00:51:33.467 --> 00:51:35.300
for like IE, Safari,
and so on.

00:51:35.300 --> 00:51:38.467
And that's done by this
very small start-up script

00:51:38.467 --> 00:51:40.634
that sniffs the browser
and then loads up

00:51:40.634 --> 00:51:42.467
which compiled version
for which browsers.

00:51:42.467 --> 00:51:44.567
Like, it loads up
the IE6 version if it's IE6.

00:51:44.567 --> 00:51:46.234
That's one way of doing it.

00:51:46.234 --> 00:51:48.434
The way I did GQuery is I did
a capability detection.

00:51:48.434 --> 00:51:52.767
So you can write what's called
a provider in GWT,

00:51:52.767 --> 00:51:55.534
which participates
in the start-up,

00:51:55.534 --> 00:51:57.033
bootstrap process.

00:51:57.033 --> 00:51:58.334
And what I do
is I check, like,

00:51:58.334 --> 00:51:59.901
document.queerySelectorAll.

00:51:59.901 --> 00:52:01.834
If it's there, I load up
the querySelectorAll version.

00:52:01.834 --> 00:52:04.334
Or document.evaluate,
then I fall back to XPath.

00:52:04.334 --> 00:52:05.667
And if neither of them
are there,

00:52:05.667 --> 00:52:07.968
then I load up
the one that's JavaScript.

00:52:15.400 --> 00:52:18.067
Next. Any questions?

00:52:18.067 --> 00:52:24.934
Okay, so there's a little bit,
um, administration here.

00:52:24.934 --> 00:52:27.400
Don't forget--
And I want to encourage you

00:52:27.400 --> 00:52:32.033
to basically complete
the survey

00:52:32.033 --> 00:52:34.067
and sort of evaluate
the session.

00:52:34.067 --> 00:52:37.400
There's the URL for it,
haveasec.com/io.

00:52:37.400 --> 00:52:39.767
So please take the time
to do that.

00:52:39.767 --> 00:52:41.100
Thank you very much.

00:52:41.100 --> 00:52:43.534
[applause]

