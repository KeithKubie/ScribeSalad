WEBVTT
Kind: captions
Language: en

00:00:09.764 --> 00:00:10.930
MALE SPEAKER: Are you ready?

00:00:10.930 --> 00:00:11.380
SHANEE: Yeah.

00:00:11.380 --> 00:00:12.130
MALE SPEAKER: Set?

00:00:12.130 --> 00:00:12.730
SHANEE: Yep.

00:00:12.730 --> 00:00:13.438
MALE SPEAKER: Go!

00:00:13.438 --> 00:00:14.530
SHANEE: Hi, everyone.

00:00:14.530 --> 00:00:15.270
I'm a programmer.

00:00:15.270 --> 00:00:17.080
How many of you guys
are programmers?

00:00:17.080 --> 00:00:18.800
Hands, come on, hands!

00:00:18.800 --> 00:00:20.400
Hm-- that's a good ratio.

00:00:20.400 --> 00:00:23.986
So my presentation
is a bit technical.

00:00:23.986 --> 00:00:26.020
But they feel it's
quite important.

00:00:26.020 --> 00:00:30.110
It's about things which
we do in our game code

00:00:30.110 --> 00:00:36.310
and pretty much [INAUDIBLE]
since we can optimize and do

00:00:36.310 --> 00:00:37.470
better to improve it.

00:00:37.470 --> 00:00:42.990
So I have seven points, "The
Seven Sins of Android Game

00:00:42.990 --> 00:00:45.270
Developers," and
let's get into them.

00:00:45.270 --> 00:00:49.100
So number one, Android
mobile internal

00:00:49.100 --> 00:00:51.280
is pretty much just
like PC and console.

00:00:51.280 --> 00:00:54.340
So many lessons we have
learned, and they still apply.

00:00:54.340 --> 00:00:56.930
So there is a lot of
common knowledge out there,

00:00:56.930 --> 00:00:59.850
and we should use
it more in our game.

00:00:59.850 --> 00:01:01.700
A lot of what's
coming are examples.

00:01:01.700 --> 00:01:03.970
So let's take this
code, for example.

00:01:03.970 --> 00:01:07.310
We have two methods.

00:01:07.310 --> 00:01:10.550
They're pretty much the
same, iterating an array.

00:01:10.550 --> 00:01:13.490
But by one time, we
are incrementing by 1,

00:01:13.490 --> 00:01:16.630
and the other time, we
are incrementing by 16.

00:01:16.630 --> 00:01:18.200
So it's pretty much the same.

00:01:18.200 --> 00:01:19.700
No tricks, right?

00:01:19.700 --> 00:01:20.570
So what happens?

00:01:20.570 --> 00:01:25.200
You'd expect for performance
it would be exactly the same.

00:01:25.200 --> 00:01:27.030
So I've put it into a benchmark.

00:01:27.030 --> 00:01:29.960
And the results are
quite astonishing.

00:01:29.960 --> 00:01:33.450
When you look into
the graph, you

00:01:33.450 --> 00:01:36.350
see that it's just
about five times

00:01:36.350 --> 00:01:40.190
slower when you increment the
data by 16 bytes at the time.

00:01:40.190 --> 00:01:41.560
What's going on here?

00:01:41.560 --> 00:01:45.480
So beyond the software,
we also have our hardware.

00:01:45.480 --> 00:01:48.060
We have our CPU and the cache.

00:01:48.060 --> 00:01:52.390
And when you want to send data
to be transformed in the cache,

00:01:52.390 --> 00:01:55.880
it needs to be laid out in
a way so it can read it.

00:01:55.880 --> 00:01:58.540
If the cache doesn't have the
data, that you get the cache

00:01:58.540 --> 00:02:01.620
miss, and it needs
to be copied into it.

00:02:01.620 --> 00:02:07.080
So that can literally double
or times 5 your performance.

00:02:07.080 --> 00:02:11.700
And then the end
lesson is that's when

00:02:11.700 --> 00:02:13.650
you're making your
code, you really

00:02:13.650 --> 00:02:15.350
need to think about your data.

00:02:15.350 --> 00:02:17.980
So make design for
the many, not the one.

00:02:17.980 --> 00:02:21.340
Always have a lot of physics
objects, not just one.

00:02:21.340 --> 00:02:24.630
Number three, thou shalt
not abuse thy draw calls.

00:02:24.630 --> 00:02:29.610
We want to make a huge army,
a crowd, a forest, or just

00:02:29.610 --> 00:02:31.430
a nice field of grass maybe.

00:02:31.430 --> 00:02:35.420
And for doing that, we
have a lot of draw calls.

00:02:35.420 --> 00:02:39.400
But when we do it, we need
to send a command to the GPU.

00:02:39.400 --> 00:02:41.535
So we need to sync with
another [INAUDIBLE].

00:02:41.535 --> 00:02:42.390
We need hardware.

00:02:42.390 --> 00:02:45.864
We communicate with the drivers,
and always through CPU cycles.

00:02:45.864 --> 00:02:47.780
And then we do it again,
and again, and again.

00:02:47.780 --> 00:02:50.490
And we're not really
doing any good work.

00:02:50.490 --> 00:02:53.590
To fix that, there's a technique
called geometry instancing.

00:02:53.590 --> 00:02:56.660
This is available
from OpenGL ES 3.0.

00:02:56.660 --> 00:02:59.650
So we have our meta
data on one platform

00:02:59.650 --> 00:03:01.910
and the per-instance
data on another.

00:03:01.910 --> 00:03:04.730
That's the big world view
projection and the color.

00:03:04.730 --> 00:03:08.600
And we draw a lot objects at
once with just one draw call.

00:03:08.600 --> 00:03:11.640
Next, do not
decompress on the CPU.

00:03:11.640 --> 00:03:14.400
We have PNG, and we
have JPG, and WebP,

00:03:14.400 --> 00:03:18.380
and we really want to use
them to lower our upsize.

00:03:18.380 --> 00:03:20.310
But then we need
to decompress them

00:03:20.310 --> 00:03:22.440
before we can copy
them to the GPU.

00:03:22.440 --> 00:03:26.960
So not only the decompression
doesn't help us,

00:03:26.960 --> 00:03:28.960
because it's for size
again, we are also

00:03:28.960 --> 00:03:30.710
wasting time on loading.

00:03:30.710 --> 00:03:33.260
On the other hand, how I
accelerate the textures

00:03:33.260 --> 00:03:37.040
like ASTC or DXT can
just be copied as is.

00:03:37.040 --> 00:03:39.390
All you need to do is
create a header and copy it.

00:03:39.390 --> 00:03:42.481
So not only do you
gain time on loading,

00:03:42.481 --> 00:03:43.980
because you don't
need to decompress

00:03:43.980 --> 00:03:47.270
them, you're also
gaining your size again.

00:03:47.270 --> 00:03:49.110
Your antimemory is smaller.

00:03:49.110 --> 00:03:51.970
And sometimes, it's even
smaller than PNG can do.

00:03:51.970 --> 00:03:55.350
It's [INAUDIBLE], but
it's relatively good.

00:03:55.350 --> 00:03:58.290
Number five, do not
totally redundancy.

00:03:58.290 --> 00:04:01.580
You'll have your shader
and you have your uniforms.

00:04:01.580 --> 00:04:03.460
And you need to do a
glGetUniformLocation

00:04:03.460 --> 00:04:04.520
my uniform name.

00:04:04.520 --> 00:04:06.326
And this is relatively slow.

00:04:06.326 --> 00:04:08.076
And if you're doing
it on charcoal and not

00:04:08.076 --> 00:04:10.360
on [INAUDIBLE], go to
your code now and fix it.

00:04:10.360 --> 00:04:11.650
Put it on [INAUDIBLE].

00:04:11.650 --> 00:04:13.530
But what if we
didn't need to do it?

00:04:13.530 --> 00:04:16.529
What if we could always
know where our uniforms are?

00:04:16.529 --> 00:04:20.740
So with OpenGL ES 3.1, we
can change the top shader

00:04:20.740 --> 00:04:21.740
to the bottom one.

00:04:21.740 --> 00:04:23.700
We always know
where everything is.

00:04:23.700 --> 00:04:25.260
This is deterministic.

00:04:25.260 --> 00:04:28.470
Number six, do not dismiss
cool new technology.

00:04:28.470 --> 00:04:30.280
With Android Extension
Pack, we have

00:04:30.280 --> 00:04:32.300
compute shaders and
[? distillation. ?]

00:04:32.300 --> 00:04:35.090
We can use them for
amazing levels of detail

00:04:35.090 --> 00:04:38.680
or putting in our physics into
GPU for a higher performance.

00:04:38.680 --> 00:04:41.930
I have a video from ARM here.

00:04:41.930 --> 00:04:44.290
This is showing
a 3D ASTC texture

00:04:44.290 --> 00:04:46.590
all in the GPU with
compute shaders

00:04:46.590 --> 00:04:48.170
doing the particle physics.

00:04:48.170 --> 00:04:50.180
This is all under
GPU, nothing else.

00:04:50.180 --> 00:04:53.660
And you can expand it and use
it for procedurally generated

00:04:53.660 --> 00:04:55.570
geometry like
terrain and foxholes.

00:04:55.570 --> 00:04:57.660
How amazing is that?

00:04:57.660 --> 00:05:00.570
Number seven, do not
disrespect thy hardware.

00:05:00.570 --> 00:05:02.510
Android is quite a new platform.

00:05:02.510 --> 00:05:05.240
But if we look at the
performance for the past four

00:05:05.240 --> 00:05:08.590
years only, we can see the
performance is more than

00:05:08.590 --> 00:05:09.590
doubling every year.

00:05:09.590 --> 00:05:12.460
And the chart is going
to up and faster.

00:05:12.460 --> 00:05:13.992
That's all.

00:05:13.992 --> 00:05:17.622
[APPLAUSE]

