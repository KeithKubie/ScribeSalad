WEBVTT
Kind: captions
Language: en

00:00:00.261 --> 00:00:01.510
SPEAKER 1: Are you guys ready?

00:00:01.510 --> 00:00:02.650
SPEAKER 2: I think we are.

00:00:02.650 --> 00:00:05.270
So Damien will come up after me.

00:00:05.270 --> 00:00:06.450
I was super excited.

00:00:06.450 --> 00:00:08.410
Damien works in the
Munich office here.

00:00:08.410 --> 00:00:10.745
We're partnering a lot with
the Bazel team internally

00:00:10.745 --> 00:00:12.640
and it's like we
should have something

00:00:12.640 --> 00:00:15.170
to mix things up a little
bit, talk about future stuff.

00:00:15.170 --> 00:00:17.850
Damien wrote a great talk and I
went through the talk and said,

00:00:17.850 --> 00:00:18.980
this is amazing.

00:00:18.980 --> 00:00:20.530
It's like, what if someone
went through this talk

00:00:20.530 --> 00:00:21.800
and didn't understand
the context of what

00:00:21.800 --> 00:00:22.830
we're doing with Dart?

00:00:22.830 --> 00:00:24.290
So like maybe we should
add some context.

00:00:24.290 --> 00:00:25.207
So I'll do that first.

00:00:25.207 --> 00:00:26.914
So I didn't have to
teach Damien about it

00:00:26.914 --> 00:00:28.340
all because he's
working on a huge

00:00:28.340 --> 00:00:32.270
build system that supports
lots of languages.

00:00:32.270 --> 00:00:33.090
So let's look.

00:00:33.090 --> 00:00:36.200
This is kind of the forward
to his talk about the Dart web

00:00:36.200 --> 00:00:38.210
workflow.

00:00:38.210 --> 00:00:40.000
And it's a very touchy clicker.

00:00:40.000 --> 00:00:42.609
So we've talked a lot about
the Summit from our customers,

00:00:42.609 --> 00:00:44.400
after a second time,
it's great hearing it,

00:00:44.400 --> 00:00:47.200
about [INAUDIBLE] how they
have a fast dev cycle.

00:00:47.200 --> 00:00:48.700
Obviously, on the
web side they want

00:00:48.700 --> 00:00:50.220
to be able to build
for production

00:00:50.220 --> 00:00:52.553
and they need to do things
like code generation and code

00:00:52.553 --> 00:00:53.529
transformation.

00:00:53.529 --> 00:00:55.820
You just need to do that and,
obviously, the great talk

00:00:55.820 --> 00:00:59.412
yesterday about source
gen and that type of work

00:00:59.412 --> 00:01:00.120
makes it obvious.

00:01:00.120 --> 00:01:01.518
[APPLAUSE]

00:01:01.518 --> 00:01:02.607
Thank you.

00:01:02.607 --> 00:01:04.190
And so we have
solutions for this now.

00:01:04.190 --> 00:01:04.690
Right?

00:01:04.690 --> 00:01:07.020
We say, use pub, pub
build, pub serve, use

00:01:07.020 --> 00:01:08.010
barback transformers.

00:01:08.010 --> 00:01:09.190
I talked to people
who've written a bunch

00:01:09.190 --> 00:01:10.670
of their own transformers.

00:01:10.670 --> 00:01:13.270
This is a really great model.

00:01:13.270 --> 00:01:15.330
It's 100% Dart, so
it ships in the box

00:01:15.330 --> 00:01:20.150
and it's fast-- well,
if you're using Dartium

00:01:20.150 --> 00:01:23.380
and if your app is
on the smaller side

00:01:23.380 --> 00:01:25.870
and if you don't have
a lot of transformers.

00:01:25.870 --> 00:01:29.610
So when Will and others talked
about how things got kind

00:01:29.610 --> 00:01:30.960
of slow, that's what happened.

00:01:30.960 --> 00:01:33.110
Because all these things are
built on big global analysis

00:01:33.110 --> 00:01:33.510
of things.

00:01:33.510 --> 00:01:35.000
We have a need to
do code generation,

00:01:35.000 --> 00:01:37.250
you usually want to look at
the analysis of your code.

00:01:37.250 --> 00:01:40.210
Doing that big AST or
that big analysis context

00:01:40.210 --> 00:01:41.360
takes a long time.

00:01:41.360 --> 00:01:43.256
And you have to do it
every time you build.

00:01:43.256 --> 00:01:46.940
dart2js does global inference
and it looks at all the code.

00:01:46.940 --> 00:01:49.639
And so that takes a long time.

00:01:49.639 --> 00:01:51.180
And that's just part
of the problems.

00:01:51.180 --> 00:01:54.692
And if you look at what we do
with barback for transformers,

00:01:54.692 --> 00:01:57.150
it lets you overwrite files,
which seems nice, but actually

00:01:57.150 --> 00:01:59.233
ends up being really bad,
because then if you look

00:01:59.233 --> 00:02:02.140
at things like source
maps and stack traces,

00:02:02.140 --> 00:02:04.140
does the stack trace point
to the generated file

00:02:04.140 --> 00:02:05.020
or my original file?

00:02:05.020 --> 00:02:07.160
It's not clear.

00:02:07.160 --> 00:02:09.991
If you're doing pub serve,
all the intermediate files

00:02:09.991 --> 00:02:10.949
are actually in memory.

00:02:10.949 --> 00:02:13.032
So there's actually no
place to look at the source

00:02:13.032 --> 00:02:14.090
map and the stack trace.

00:02:14.090 --> 00:02:16.450
And obviously, if
you do a pub build,

00:02:16.450 --> 00:02:18.530
unless you flip certain
flags, those files

00:02:18.530 --> 00:02:20.380
aren't even on disk.

00:02:20.380 --> 00:02:23.350
And obviously, every time you
build, you start from scratch

00:02:23.350 --> 00:02:24.630
and that can take a long time.

00:02:24.630 --> 00:02:26.810
We've had people internally
take many, many minutes.

00:02:26.810 --> 00:02:30.864
It's a very long coffee break
for a full build from scratch.

00:02:30.864 --> 00:02:32.030
So what's the solution here?

00:02:32.030 --> 00:02:34.200
Well, I actually stole a
bunch of these slides from VJ.

00:02:34.200 --> 00:02:34.699
Thank you.

00:02:34.699 --> 00:02:36.020
I didn't tell him in advance.

00:02:36.020 --> 00:02:38.160
He talked about this yesterday
in the dev compiler talk.

00:02:38.160 --> 00:02:38.660
Right?

00:02:38.660 --> 00:02:41.630
Which is we have many megabytes
of code, complex dependencies,

00:02:41.630 --> 00:02:42.830
how do you solve this?

00:02:42.830 --> 00:02:46.480
And the way you solve this is--
and obviously, all the things

00:02:46.480 --> 00:02:48.900
and compilation of JavaScript
isn't even on this list.

00:02:48.900 --> 00:02:50.290
Right?

00:02:50.290 --> 00:02:52.540
And even things that aren't
necessarily Dart-specific,

00:02:52.540 --> 00:02:56.150
like you can take a proto buff
and turn it into Dart code.

00:02:56.150 --> 00:02:59.660
The way we do that is internally
with a system called Bazel.

00:02:59.660 --> 00:03:02.459
And so it gives you
amazing parallelism

00:03:02.459 --> 00:03:03.500
and it gives you caching.

00:03:03.500 --> 00:03:03.900
And guess what?

00:03:03.900 --> 00:03:04.980
That's how you do
things quickly.

00:03:04.980 --> 00:03:06.610
Like, make solve
this a long time ago.

00:03:06.610 --> 00:03:07.820
Right?

00:03:07.820 --> 00:03:11.570
And so the idea is you might
want to do a table component.

00:03:11.570 --> 00:03:13.340
Part of this is,
well, how do we make

00:03:13.340 --> 00:03:15.020
sure we do code gen
on that really fast

00:03:15.020 --> 00:03:15.740
and compilation on that?

00:03:15.740 --> 00:03:17.590
Oh, well, generate summary
and actually save that summary

00:03:17.590 --> 00:03:18.470
to disk.

00:03:18.470 --> 00:03:21.160
And then in parallel,
we can do the JS stuff

00:03:21.160 --> 00:03:22.285
while we're summarizing it.

00:03:22.285 --> 00:03:24.410
And then we can do the
summary of another component

00:03:24.410 --> 00:03:25.700
and build that in parallel.

00:03:25.700 --> 00:03:28.214
And it ends up that
your main line here, you

00:03:28.214 --> 00:03:30.630
used to have to worry about
what your slowest component is

00:03:30.630 --> 00:03:32.350
because a lot of this
could be parallelized.

00:03:32.350 --> 00:03:33.850
And this is actually
a poor example,

00:03:33.850 --> 00:03:35.395
because I see four
parallel threads,

00:03:35.395 --> 00:03:37.020
but, you know, if
you have eight cords,

00:03:37.020 --> 00:03:38.061
it could be eight things.

00:03:38.061 --> 00:03:41.790
And that's only one machine.

00:03:41.790 --> 00:03:43.900
So what's beautiful
about the Bazel model

00:03:43.900 --> 00:03:45.690
what we use internally
is it's one model.

00:03:45.690 --> 00:03:47.106
So the way you
generate summaries,

00:03:47.106 --> 00:03:51.120
the way you run source_gen, the
way you do template injection,

00:03:51.120 --> 00:03:53.330
even the way you
compile to JavaScript,

00:03:53.330 --> 00:03:54.640
they're all one system.

00:03:54.640 --> 00:03:56.510
Like the way we
generate JS is just

00:03:56.510 --> 00:03:59.560
another build output along
with how we generate summaries.

00:03:59.560 --> 00:04:01.795
So we have a single model
for all these things' work.

00:04:04.580 --> 00:04:07.010
Everything's on disk,
which means your source

00:04:07.010 --> 00:04:09.674
maps and your stack traces,
you can go find those files.

00:04:09.674 --> 00:04:12.090
In some cases, they might be
in some weird temp directory.

00:04:12.090 --> 00:04:13.673
You don't necessarily
care because you

00:04:13.673 --> 00:04:14.920
can debug through it.

00:04:14.920 --> 00:04:17.110
It's 100% incremental
even between builds.

00:04:17.110 --> 00:04:19.149
All those incremental
outputs are cached.

00:04:19.149 --> 00:04:20.440
You can run things in parallel.

00:04:20.440 --> 00:04:22.189
It figures out the
build tree and actually

00:04:22.189 --> 00:04:24.140
can run things in parallel.

00:04:24.140 --> 00:04:26.200
And it's the exact same
model we have internally,

00:04:26.200 --> 00:04:27.991
which means you get
all the benefits we do.

00:04:27.991 --> 00:04:30.880
When we make fixes and
changes and improve things,

00:04:30.880 --> 00:04:34.499
folks that use our
frameworks do the same stuff.

00:04:34.499 --> 00:04:35.540
So that all sounds great.

00:04:35.540 --> 00:04:37.690
Before you jump into
the Bazel stuff,

00:04:37.690 --> 00:04:41.490
I would just say don't panic
if you're using pub today.

00:04:41.490 --> 00:04:43.080
These things aren't
going anywhere.

00:04:43.080 --> 00:04:46.260
And, in fact, the Angular
story that we give you today,

00:04:46.260 --> 00:04:48.360
and you run pub serve
and it runs transformers,

00:04:48.360 --> 00:04:52.270
it works great, that exact same
code runs in Bazel internally.

00:04:52.270 --> 00:04:53.957
And actually, we have
one copy of things

00:04:53.957 --> 00:04:56.290
like the template generator
and the dependency injection

00:04:56.290 --> 00:04:56.910
generator.

00:04:56.910 --> 00:04:59.170
There's one copy and
it works in both.

00:04:59.170 --> 00:05:02.080
And so if you write your
own transformers, let's

00:05:02.080 --> 00:05:04.510
talk, because your model
will change a little bit.

00:05:04.510 --> 00:05:07.174
We have a bunch of code already
out in public and open source

00:05:07.174 --> 00:05:08.840
where you basically
write your code once

00:05:08.840 --> 00:05:11.550
and then it can go either to
Bazel and a source gen model

00:05:11.550 --> 00:05:13.260
or to transformers.

00:05:13.260 --> 00:05:15.640
And if you don't write
your own transformers,

00:05:15.640 --> 00:05:18.390
this will just come along and
you'll get all the benefits.

00:05:18.390 --> 00:05:21.360
So hopefully I've given you some
context and belayed some fears.

00:05:21.360 --> 00:05:23.380
And now we can talk
about Bazel specifically.

00:05:23.380 --> 00:05:26.420
So I give you Damien.

00:05:26.420 --> 00:05:29.645
[APPLAUSE]

00:05:29.645 --> 00:05:31.630
DAMIEN MARTIN-GUILLEREZ:
Thank you.

00:05:31.630 --> 00:05:32.680
Do you hear me?

00:05:32.680 --> 00:05:33.620
Great.

00:05:33.620 --> 00:05:34.790
OK.

00:05:34.790 --> 00:05:41.240
So Bazel it's a Google
home built system.

00:05:41.240 --> 00:05:44.570
It's called Blaze internally.

00:05:44.570 --> 00:05:48.150
So previous speakers talked
that they were [INAUDIBLE] it

00:05:48.150 --> 00:05:49.580
for six months.

00:05:49.580 --> 00:05:52.426
We were [INAUDIBLE] Bazel
last Blaze for nine years.

00:05:56.870 --> 00:06:02.930
So we open sourced Bazel
last year in March of 2015.

00:06:02.930 --> 00:06:06.070
The basic for Bazel is we
want a big systems that

00:06:06.070 --> 00:06:08.300
is fast and correct.

00:06:08.300 --> 00:06:11.910
So we have a motto that is
Fast, Correct, Choose Two.

00:06:15.070 --> 00:06:16.690
A question you
might ask yourself

00:06:16.690 --> 00:06:20.190
is why Google developed
yet another build system.

00:06:20.190 --> 00:06:25.450
So back in 2006, Google
was using makefiles.

00:06:25.450 --> 00:06:28.875
And it was using, actually,
a generator to make files.

00:06:28.875 --> 00:06:32.960
And it's a problem without
it's obviously a makefile.

00:06:32.960 --> 00:06:36.180
That is a very,
very clean makefile

00:06:36.180 --> 00:06:39.740
from an open source project.

00:06:39.740 --> 00:06:42.040
And it's really
difficult to read.

00:06:42.040 --> 00:06:46.970
It's still has a
lot of problems.

00:06:46.970 --> 00:06:48.080
It looks a bit like that.

00:06:48.080 --> 00:06:48.580
Right?

00:06:51.370 --> 00:06:53.045
It's also very slow.

00:06:56.190 --> 00:07:00.280
So if you try to build one
of the largest open source

00:07:00.280 --> 00:07:03.940
projects out there, the
Android open source platform,

00:07:03.940 --> 00:07:06.720
try just to request
a dummy packet,

00:07:06.720 --> 00:07:08.585
a packet that does not exist.

00:07:08.585 --> 00:07:11.630
Only to do that, it
would take 70 seconds

00:07:11.630 --> 00:07:14.450
to load all the
makefile it includes.

00:07:14.450 --> 00:07:16.230
And it does not do nothing.

00:07:16.230 --> 00:07:19.710
It does not do anything.

00:07:19.710 --> 00:07:22.650
So what Blaze wants
to be, it wants

00:07:22.650 --> 00:07:26.530
to refer a very nice view, a
very maintainable view of the

00:07:26.530 --> 00:07:27.925
build for the user.

00:07:35.830 --> 00:07:38.310
And we want some
things that scale

00:07:38.310 --> 00:07:44.180
to the billions of line of code
of the Google code repositories

00:07:44.180 --> 00:07:45.975
and of course, that's
also compilation

00:07:45.975 --> 00:07:50.790
files, because every second
lost for the developer

00:07:50.790 --> 00:07:53.970
is money lost because
we pay [INAUDIBLE].

00:07:59.000 --> 00:08:03.710
One last thing, we want
the build to be correct.

00:08:03.710 --> 00:08:04.770
What does that mean?

00:08:04.770 --> 00:08:07.260
That means that if
you ever use makefile,

00:08:07.260 --> 00:08:09.440
you'll probably use
to do makeclean.

00:08:09.440 --> 00:08:10.890
Right?

00:08:10.890 --> 00:08:14.910
We have a saying as the
Blaze team to never,

00:08:14.910 --> 00:08:17.180
ever do Blaze clean.

00:08:17.180 --> 00:08:19.110
We should never have to do it.

00:08:19.110 --> 00:08:21.690
And if you take your
build, take the same input,

00:08:21.690 --> 00:08:24.980
put it on some machine
at another time,

00:08:24.980 --> 00:08:28.280
you will get the same result.
And that's very important

00:08:28.280 --> 00:08:33.549
because that's also a lot
of performance improvement

00:08:33.549 --> 00:08:37.650
because we can cache
results of everything.

00:08:37.650 --> 00:08:40.330
Bazel, which is the
open source place,

00:08:40.330 --> 00:08:44.480
it's basically Blaze that
is done of Google internals.

00:08:44.480 --> 00:08:49.350
As built-in support for several
[INAUDIBLE], Java [INAUDIBLE]

00:08:49.350 --> 00:08:53.280
but having to modify
the binary to scale-ups,

00:08:53.280 --> 00:08:55.040
to various language
doesn't work.

00:08:55.040 --> 00:08:58.500
So we have an extension
language and to that, we

00:08:58.500 --> 00:08:59.850
have that support.

00:08:59.850 --> 00:09:04.760
We also have Go, Java
AppEngine, and many more.

00:09:04.760 --> 00:09:07.640
We work on Linux, of course.

00:09:07.640 --> 00:09:11.384
We work on OS X and we
know what's on Windows

00:09:11.384 --> 00:09:15.075
and we are doing a lot of
work to make Windows on par

00:09:15.075 --> 00:09:17.260
with Linux and OS
X. So Linux on OS X

00:09:17.260 --> 00:09:20.980
is used by thousands of
developers internally.

00:09:20.980 --> 00:09:26.870
And so we're trying to offer
the same experience for Windows.

00:09:26.870 --> 00:09:28.480
Of course we want
to be fast, correct,

00:09:28.480 --> 00:09:30.930
so we do a lot of
things to help that,

00:09:30.930 --> 00:09:35.090
and we would go a
bit deeper into that.

00:09:35.090 --> 00:09:36.480
So we do cache.

00:09:36.480 --> 00:09:39.160
We run as many parallel
jobs as possible.

00:09:39.160 --> 00:09:42.430
We're so [INAUDIBLE] to
make sure that we are not

00:09:42.430 --> 00:09:45.300
modifying inputs.

00:09:45.300 --> 00:09:48.785
We test for it internally
on the code repository.

00:09:53.610 --> 00:09:56.530
So remember the makefile?

00:09:56.530 --> 00:09:58.046
This is a BUILD file.

00:09:58.046 --> 00:10:00.280
This is what Bazel
takes as input.

00:10:00.280 --> 00:10:03.565
So it has high-level
representation of the language.

00:10:08.430 --> 00:10:10.300
A bit slow, sorry.

00:10:10.300 --> 00:10:13.560
So you describe what
you want to build

00:10:13.560 --> 00:10:18.340
as Java library, that library,
and you give them a name

00:10:18.340 --> 00:10:20.856
and you basically
declare its dependencies.

00:10:20.856 --> 00:10:26.710
And that's all that Bazel needs
to actually perform its jobs.

00:10:26.710 --> 00:10:30.870
So thanks to that, it
can be fast, correct.

00:10:30.870 --> 00:10:32.490
Let's see what's a
build looks like.

00:10:32.490 --> 00:10:35.510
So we run a bunch of tests.

00:10:35.510 --> 00:10:37.615
It's running a lot of things.

00:10:41.320 --> 00:10:42.540
And runs other test.

00:10:42.540 --> 00:10:45.760
That's a clean build,
so it has no information

00:10:45.760 --> 00:10:47.990
before running that.

00:10:47.990 --> 00:10:49.915
[APPLAUSE]

00:10:49.915 --> 00:10:50.415
Thank.

00:10:53.810 --> 00:10:58.720
And it does that by
constricting in memory a graph

00:10:58.720 --> 00:11:01.540
of all your dependencies.

00:11:01.540 --> 00:11:04.790
And once it does that
graph, it can actually

00:11:04.790 --> 00:11:06.980
follow up which
dependencies has changed

00:11:06.980 --> 00:11:08.810
and run the extra [INAUDIBLE].

00:11:08.810 --> 00:11:11.880
It can also construct a
graph of the artifacts

00:11:11.880 --> 00:11:16.670
that you need to create from
that graph of dependency

00:11:16.670 --> 00:11:21.100
and executes action to
generate source artifact.

00:11:21.100 --> 00:11:25.230
So if you re-run the same
build, it actually does nothing.

00:11:25.230 --> 00:11:29.340
It just re-run every time
you use the same information

00:11:29.340 --> 00:11:30.960
that it runs before.

00:11:30.960 --> 00:11:33.570
And it also say
that the last cache

00:11:33.570 --> 00:11:36.160
was a test result. And why
can we cache test result?

00:11:36.160 --> 00:11:40.610
Because we know we have a
correct behavior [INAUDIBLE].

00:11:40.610 --> 00:11:43.420
So if we re-run a
test twice, we don't

00:11:43.420 --> 00:11:45.900
need to re-run it another time.

00:11:45.900 --> 00:11:50.330
We can just say OK, pass me
false, so it must have passed.

00:11:50.330 --> 00:11:55.000
Now, let's see what we do
when we actually touch a file.

00:11:57.622 --> 00:11:59.088
So let's touch a file.

00:12:01.720 --> 00:12:02.990
So we are not fast at typing.

00:12:05.990 --> 00:12:12.160
And yeah, we didn't do anything
because so we touch a file,

00:12:12.160 --> 00:12:16.830
we evaluate that everything
in its dependency graph,

00:12:16.830 --> 00:12:20.230
but after that, we actually see
that the file doesn't change.

00:12:20.230 --> 00:12:23.130
So we don't do anything.

00:12:23.130 --> 00:12:24.590
Let's actually modify a file.

00:12:24.590 --> 00:12:27.920
So let's start by
modifying just a test.

00:12:27.920 --> 00:12:31.150
So it's a leaf, if you think
of the dependency graph.

00:12:34.380 --> 00:12:37.690
Let's just ready to
test and hide a command.

00:12:43.110 --> 00:12:44.530
And then test again.

00:12:44.530 --> 00:12:54.230
Bazel [NON-ENGLISH] So we
were run only a test that says

00:12:54.230 --> 00:12:56.900
change and no other actions.

00:12:56.900 --> 00:13:00.620
So we don't do
extra work, we just

00:13:00.620 --> 00:13:03.670
reduce the work that is needed.

00:13:03.670 --> 00:13:06.352
So let's modify our library.

00:13:11.785 --> 00:13:13.285
That's not enough
exclamation marks,

00:13:13.285 --> 00:13:14.480
so let's add another one.

00:13:17.880 --> 00:13:19.360
And then we'll re-run the test.

00:13:19.360 --> 00:13:21.730
So we do a bit more.

00:13:21.730 --> 00:13:24.080
Note the [INAUDIBLE]
.js compiler.

00:13:24.080 --> 00:13:29.850
And we just re-run the two test
that are dependent on that.

00:13:29.850 --> 00:13:33.000
So how does it work is when
we do modification, we just

00:13:33.000 --> 00:13:36.400
see the actions
that need to re-run,

00:13:36.400 --> 00:13:39.929
but does not re-run
the other actions.

00:13:39.929 --> 00:13:40.470
Our last one.

00:13:40.470 --> 00:13:44.185
This is an extract of the
build of Bazel itself.

00:13:44.185 --> 00:13:48.100
Bazel is some [? utility ?]
language system by itself

00:13:48.100 --> 00:13:53.600
it's just C++, Java,
Python, Proto Buff,

00:13:53.600 --> 00:13:55.870
[? shared. ?] We
have a lot of things.

00:13:55.870 --> 00:13:58.470
And the interesting
thing in that is you

00:13:58.470 --> 00:14:00.290
can see 200 action running.

00:14:00.290 --> 00:14:04.510
So we basically, because we
might end up graph in memory

00:14:04.510 --> 00:14:05.870
and we know the dependency.

00:14:05.870 --> 00:14:10.760
We can stop the act of running
the action as soon as possible

00:14:10.760 --> 00:14:15.660
with being sure that we
don't have problem running

00:14:15.660 --> 00:14:16.720
those action in parallel.

00:14:21.200 --> 00:14:25.830
So as Kevin mentioned,
what if you don't

00:14:25.830 --> 00:14:27.100
want to write Bazel files?

00:14:27.100 --> 00:14:31.780
Then you don't have to because
the dev team has come up we

00:14:31.780 --> 00:14:36.540
with a buildified generator that
just like generates those build

00:14:36.540 --> 00:14:39.840
file, run Bazel, and you will
get the same [INAUDIBLE] model,

00:14:39.840 --> 00:14:46.220
and gets the same performance
as that if you are running Bazel

00:14:46.220 --> 00:14:49.000
natively.

00:14:49.000 --> 00:14:51.946
However, if you want
to use Bazel with Java,

00:14:51.946 --> 00:14:53.530
with some other
language, then you

00:14:53.530 --> 00:14:57.295
can just start taking the
refractionary [INAUDIBLE]

00:14:57.295 --> 00:14:59.470
of the generator, started
doing things in them,

00:14:59.470 --> 00:15:01.290
and add some more targets.

00:15:04.890 --> 00:15:06.630
That's about all.

00:15:06.630 --> 00:15:08.420
Our website is bazel.build.

00:15:08.420 --> 00:15:10.886
And thank you very much.

00:15:10.886 --> 00:15:13.326
[APPLAUSE]

00:15:20.650 --> 00:15:23.050
SPEAKER 2: So a couple things
to add to be really clear

00:15:23.050 --> 00:15:26.040
as far as how Bazel affects
Dart and your work here,

00:15:26.040 --> 00:15:28.010
because obviously,
this is very important.

00:15:28.010 --> 00:15:29.190
If you look at our
Git repo, you'll

00:15:29.190 --> 00:15:30.360
notice there's a
couple projects.

00:15:30.360 --> 00:15:31.790
There's Rules, Dart, and Bazel.

00:15:31.790 --> 00:15:33.540
We're working on some code here.

00:15:33.540 --> 00:15:35.720
We're not ready for you
to use this in production.

00:15:35.720 --> 00:15:36.777
It's still very early.

00:15:36.777 --> 00:15:38.860
You'll see these Bazel
files and these build files

00:15:38.860 --> 00:15:40.650
and these workspace files.

00:15:40.650 --> 00:15:42.740
If you're really excited
and curious, go play.

00:15:42.740 --> 00:15:44.580
But this is not something
we're supporting.

00:15:44.580 --> 00:15:47.060
We try to get
things bootstrapped.

00:15:47.060 --> 00:15:49.987
So our goal is to get Angular 2
working externally all the way.

00:15:49.987 --> 00:15:51.570
And that means we
have code generation

00:15:51.570 --> 00:15:54.380
working, tablet generation,
all those things.

00:15:54.380 --> 00:15:56.350
Once we get to that
point, we might go out

00:15:56.350 --> 00:15:57.900
and say, go play
with this some more.

00:15:57.900 --> 00:16:00.609
But I want to be very clear,
our goal is that if you are just

00:16:00.609 --> 00:16:03.150
doing Dart, pure Dart-- we call
it the classic Dart or simple

00:16:03.150 --> 00:16:07.010
Dart app, meaning you're not
compiling proto buffs and C++

00:16:07.010 --> 00:16:10.880
in the background-- you
guys aren't all doing that.

00:16:10.880 --> 00:16:12.770
It's cool and we did
a lot internally.

00:16:12.770 --> 00:16:14.270
SPEAKER 1: I do it for funsies.

00:16:14.270 --> 00:16:14.900
SPEAKER 2: We really
want Bazel to be

00:16:14.900 --> 00:16:16.399
able to be an
implementation detail,

00:16:16.399 --> 00:16:18.689
a spectacular implementation
detail that makes things

00:16:18.689 --> 00:16:20.230
super fast for you,
but you shouldn't

00:16:20.230 --> 00:16:21.188
have to worry about it.

00:16:21.188 --> 00:16:25.022
And then the idea is if you want
to grow up and do more things

00:16:25.022 --> 00:16:26.730
in the broader sense,
do bigger projects,

00:16:26.730 --> 00:16:29.292
do cross-language projects,
then your falldown

00:16:29.292 --> 00:16:30.750
will be Bazel,
which means we don't

00:16:30.750 --> 00:16:33.340
have to write all these
crazy one-off support for XYZ

00:16:33.340 --> 00:16:34.290
and Dart.

00:16:34.290 --> 00:16:35.990
Bazel will be the
underlying system.

00:16:35.990 --> 00:16:39.320
So if you stay simple Dart, you
get all the benefits of Bazel

00:16:39.320 --> 00:16:41.820
and you won't have to learn
Bazel scripting language.

00:16:41.820 --> 00:16:43.280
And you'll be able to
upgrade to full Bazel

00:16:43.280 --> 00:16:44.904
if you want to do
other awesome things.

00:16:44.904 --> 00:16:48.060
And I think current users
are folks like TensorFlow

00:16:48.060 --> 00:16:50.030
is a big user of Bazel already.

00:16:50.030 --> 00:16:52.626
There's folks taking off with
this and they really like it.

00:16:52.626 --> 00:16:54.250
So we have a few
minutes for questions.

00:16:54.250 --> 00:16:56.370
Is there anything about Bazel
before we jump to lunch?

00:16:56.370 --> 00:16:56.954
Any questions?

00:16:59.680 --> 00:17:00.750
Always.

00:17:00.750 --> 00:17:02.824
SPEAKER 1: I'll
repeat the question.

00:17:02.824 --> 00:17:03.365
AUDIENCE: OK.

00:17:03.365 --> 00:17:09.390
So what about CSS files,
images, [INAUDIBLE] change that.

00:17:09.390 --> 00:17:12.332
SPEAKER 2: What about CSS files,
images, other binary assets?

00:17:12.332 --> 00:17:14.040
DAMIEN MARTIN-GUILLEREZ:
So normally, you

00:17:14.040 --> 00:17:19.200
declare dependencies on
those files so we see them.

00:17:19.200 --> 00:17:25.617
And we also have I guess we'd
have [? globing ?] so you

00:17:25.617 --> 00:17:26.450
don't have to worry.

00:17:26.450 --> 00:17:30.529
You just call out your
directory and Bazel will see it.

00:17:30.529 --> 00:17:32.820
SPEAKER 2: Basically, if you
just have all these things

00:17:32.820 --> 00:17:34.940
need to go to this
directory and that's it,

00:17:34.940 --> 00:17:36.270
it'll just be an xcopy.

00:17:36.270 --> 00:17:38.520
And then a few other things
that consume those images,

00:17:38.520 --> 00:17:41.060
I remember in my previous
web writing days,

00:17:41.060 --> 00:17:43.180
if you knew spriting
and stuff, then

00:17:43.180 --> 00:17:45.730
you'll see those are my
inputs to my sprite rule,

00:17:45.730 --> 00:17:46.820
my sprite target.

00:17:46.820 --> 00:17:48.350
And then if you
modify those files,

00:17:48.350 --> 00:17:52.357
the sprite target will run and
it will generate new sprite.

00:17:52.357 --> 00:17:53.940
And that's really
exciting because you

00:17:53.940 --> 00:17:56.420
can imagine oh, there's some
Node thing or some Ruby thing

00:17:56.420 --> 00:17:58.045
or some Java thing
that does spriting.

00:17:58.045 --> 00:18:01.550
And all you want is, I want
content in this directory

00:18:01.550 --> 00:18:02.860
so I can use these sprites.

00:18:02.860 --> 00:18:05.290
You can bring in the Java
rule or the whatever rule

00:18:05.290 --> 00:18:08.580
for spriting in Java or C++,
drop it into your Bazel field,

00:18:08.580 --> 00:18:12.210
and you just run Bazel
build and it'll just work.

00:18:12.210 --> 00:18:16.706
AUDIENCE: I was curious about
I think Blaze distributes

00:18:16.706 --> 00:18:20.192
across different machines, so
like the CI environment would

00:18:20.192 --> 00:18:22.100
be the--

00:18:22.100 --> 00:18:24.200
SPEAKER 2: So the
question is, so, does this

00:18:24.200 --> 00:18:25.490
work across machines?

00:18:25.490 --> 00:18:26.820
DAMIEN MARTIN-GUILLEREZ: Yes.

00:18:26.820 --> 00:18:28.468
No.

00:18:28.468 --> 00:18:30.870
So we have a prototype
implementation

00:18:30.870 --> 00:18:35.190
of the API to talk to a
distributive cluster and we

00:18:35.190 --> 00:18:39.310
in the middle of rewriting it
to give a more stable version

00:18:39.310 --> 00:18:41.990
of it that we would use, too.

00:18:45.310 --> 00:18:46.125
SPEAKER 2: Future.

00:18:46.125 --> 00:18:48.041
DAMIEN MARTIN-GUILLEREZ:
So, it's experimental

00:18:48.041 --> 00:18:49.630
and it's going to
be stable soon.

00:18:49.630 --> 00:18:51.120
SPEAKER 2: So what's
great is you'll have,

00:18:51.120 --> 00:18:52.536
at least in the
Dart world, you'll

00:18:52.536 --> 00:18:55.040
have a better experience than
you have today on one machine

00:18:55.040 --> 00:18:56.760
and then all the
future work that Bazel

00:18:56.760 --> 00:18:59.190
does in any of those paths,
you just get for free.

00:19:02.530 --> 00:19:03.610
Are people hungry?

00:19:03.610 --> 00:19:04.910
SPEAKER 1: No.

00:19:04.910 --> 00:19:07.335
AUDIENCE: Why don't
you start from Maven?

00:19:07.335 --> 00:19:11.220
Why did you write
it from scratch?

00:19:11.220 --> 00:19:13.240
SPEAKER 2: Why didn't
you start from Maven?

00:19:13.240 --> 00:19:15.760
I'm not enough of a
Java person, but I'll--

00:19:15.760 --> 00:19:16.850
SPEAKER 1: Or grunt.

00:19:16.850 --> 00:19:18.308
DAMIEN MARTIN-GUILLEREZ:
That's fun

00:19:18.308 --> 00:19:21.450
because before joining Google,
I was actually using a lot Maven

00:19:21.450 --> 00:19:24.710
and it failed to revert.

00:19:24.710 --> 00:19:26.740
So Maven will run as
a test, for example.

00:19:26.740 --> 00:19:29.100
It's super slow.

00:19:29.100 --> 00:19:34.240
I wasn't here around the
times that Blaze was started.

00:19:34.240 --> 00:19:38.480
As a part of Maven, like if you
do something more than Java,

00:19:38.480 --> 00:19:42.130
you'll really feels
the pain of using it.

00:19:42.130 --> 00:19:46.484
So Google was like is
[INAUDIBLE] so it's super

00:19:46.484 --> 00:19:48.804
[? spruced ?] Java Go.

00:19:48.804 --> 00:19:53.670
And so it needs some things
that works across language.

00:19:53.670 --> 00:19:56.765
SPEAKER 1: You guys about
ready for some lunch?

00:19:56.765 --> 00:19:57.890
We'll do one more question.

00:19:57.890 --> 00:19:59.277
You're the last one.

00:19:59.277 --> 00:19:59.860
Make it count.

00:20:03.228 --> 00:20:07.584
AUDIENCE: One is about extending
the system by using plugins.

00:20:07.584 --> 00:20:12.908
In what language will
you write these plugins?

00:20:12.908 --> 00:20:16.040
SPEAKER 2: So what language do
I write a plugin for Bazel in?

00:20:16.040 --> 00:20:18.610
DAMIEN MARTIN-GUILLEREZ:
This is a home language

00:20:18.610 --> 00:20:20.530
that is called Skylark.

00:20:20.530 --> 00:20:22.350
But it's actually
a subset of Python.

00:20:22.350 --> 00:20:24.410
The reason it's
not fully Python,

00:20:24.410 --> 00:20:26.350
it's for correctness issue.

00:20:26.350 --> 00:20:29.390
We don't want to
overwrite our directory,

00:20:29.390 --> 00:20:32.469
generate things that
have side effects.

00:20:32.469 --> 00:20:33.010
AUDIENCE: OK.

00:20:33.010 --> 00:20:37.495
And the last one is
about milestones.

00:20:37.495 --> 00:20:40.470
Do you have some
public milestones

00:20:40.470 --> 00:20:41.554
about releasing these two?

00:20:41.554 --> 00:20:42.969
SPEAKER 2: So
repeat the question.

00:20:42.969 --> 00:20:44.832
What are the-- are
there public milestones?

00:20:44.832 --> 00:20:46.290
I think it's posted
on the website.

00:20:46.290 --> 00:20:47.498
DAMIEN MARTIN-GUILLEREZ: Yes.

00:20:47.498 --> 00:20:49.010
We have a public
[INAUDIBLE] map.

00:20:49.010 --> 00:20:51.700
It's on our website.

00:20:51.700 --> 00:20:53.510
We're about to
reach-- we're going

00:20:53.510 --> 00:20:58.987
to announce 0.4 next week so if
you want to follow it, you can.

00:20:58.987 --> 00:21:00.820
SPEAKER 2: And I want
to add one more thing.

00:21:00.820 --> 00:21:03.028
One of the things we're
working on with the Dart team

00:21:03.028 --> 00:21:05.020
is that there'll be
low-level Skylark

00:21:05.020 --> 00:21:06.540
rules written in Skylark.

00:21:06.540 --> 00:21:07.910
There's very good reason
it has its own language.

00:21:07.910 --> 00:21:09.785
I should repeat that
because everyone's like,

00:21:09.785 --> 00:21:10.810
why another language?

00:21:10.810 --> 00:21:12.360
SPEAKER 1: Purely
functional subset of Python

00:21:12.360 --> 00:21:12.770
sounds awesome.

00:21:12.770 --> 00:21:14.220
SPEAKER 2: You want
guaranteed correctness,

00:21:14.220 --> 00:21:15.220
you get hermeticness.

00:21:15.220 --> 00:21:17.180
No one wants a
distributed build system

00:21:17.180 --> 00:21:18.570
that does things incorrectly.

00:21:18.570 --> 00:21:22.236
It messes up the caching
because we're all very sad.

00:21:22.236 --> 00:21:23.610
But in the Dart
world, what we're

00:21:23.610 --> 00:21:25.621
looking at is we'll
have low level Bazel

00:21:25.621 --> 00:21:27.370
rules-- at least this
is our current plan,

00:21:27.370 --> 00:21:29.661
we're working on it-- we'll
have low-level Bazel rules.

00:21:29.661 --> 00:21:30.750
We'll write the Bazel.

00:21:30.750 --> 00:21:31.780
And the idea is
then you can just

00:21:31.780 --> 00:21:33.530
write Dart code and
configuration on top

00:21:33.530 --> 00:21:35.380
to do your transformation,
and you'll just

00:21:35.380 --> 00:21:38.340
call down to a Dart library and
say, cool, and write some YAML

00:21:38.340 --> 00:21:41.190
and it will work.

00:21:41.190 --> 00:21:42.804
[INAUDIBLE] Beck
saying, damn PM,

00:21:42.804 --> 00:21:43.970
why are you making promises?

00:21:43.970 --> 00:21:45.381
But we think we can do that.

00:21:45.381 --> 00:21:47.380
DAMIEN MARTIN-GUILLEREZ:
It's not only for that.

00:21:47.380 --> 00:21:49.930
I mean [INAUDIBLE]
language that we

00:21:49.930 --> 00:21:51.830
wonder a lot of words
for various language

00:21:51.830 --> 00:21:53.950
we have [? closer ?] compiles.

00:21:53.950 --> 00:22:00.540
We have SAS, Rest, and we try
to [INAUDIBLE] so you can just

00:22:00.540 --> 00:22:01.880
use them out of the box.

00:22:01.880 --> 00:22:03.405
You don't have to
write your own.

00:22:03.405 --> 00:22:04.920
[APPLAUSE]

