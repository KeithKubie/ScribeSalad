WEBVTT
Kind: captions
Language: en

00:00:00.570 --> 00:00:02.776
As another example where a control and

00:00:02.776 --> 00:00:05.660
data plan separation comes in handy, let's look

00:00:05.660 --> 00:00:09.770
at the security of internet backbones. Where filtering

00:00:09.770 --> 00:00:14.310
attack traffic is a regular network management task.

00:00:14.310 --> 00:00:16.880
Suppose that an attacker is sending lots

00:00:16.880 --> 00:00:19.270
of traffic towards a victim. In this case

00:00:19.270 --> 00:00:22.760
a measurement system might detect the attack, identify

00:00:22.760 --> 00:00:25.580
the entry point, and a controller such as

00:00:25.580 --> 00:00:30.680
the RCP might install what is called a null route to ensure

00:00:30.680 --> 00:00:35.920
that no more traffic reaches the victim from the attacker. Two

00:00:35.920 --> 00:00:40.450
fundamental challenges with SDN are scalability and

00:00:40.450 --> 00:00:45.550
consistency. In an SDN a single control element

00:00:45.550 --> 00:00:50.750
might be responsible for many forwarding elements. So control element might

00:00:50.750 --> 00:00:53.520
be responsible for hundreds to thousands

00:00:53.520 --> 00:00:57.960
of switches. Of course, for redundancy and

00:00:57.960 --> 00:01:01.410
reliability, typically we want to replicate the

00:01:01.410 --> 00:01:04.060
controller. So while the controller is logically

00:01:04.060 --> 00:01:07.970
centralized, physically there may be many replicas.

00:01:07.970 --> 00:01:10.910
And, in such a deployment scenario we

00:01:10.910 --> 00:01:13.670
need to ensure that different controller replicas

00:01:13.670 --> 00:01:16.450
see the same view of the network

00:01:16.450 --> 00:01:20.960
so that they make consistent decisions when they're installing state in the data

00:01:20.960 --> 00:01:29.330
plane. A final challenge that's also worth mentioning is security or robustness.

00:01:29.330 --> 00:01:32.530
In particular, we want to make sure that the network continues to

00:01:32.530 --> 00:01:35.070
function correctly in the event that

00:01:35.070 --> 00:01:38.020
a controller replica fails or is compromised.

