WEBVTT
Kind: captions
Language: en

00:00:00.220 --> 00:00:02.360
Now that we know we should be tofu,

00:00:02.360 --> 00:00:06.680
let's explore the actual code that drives this application.

00:00:06.680 --> 00:00:09.010
Let yourself marinade in it as we go through.

00:00:09.010 --> 00:00:11.880
Like tofu in sauce or something.

00:00:11.880 --> 00:00:17.130
Now as we go through, think not only of how the code works, but

00:00:17.130 --> 00:00:21.540
how different changes would affect the behavior of the application.

00:00:21.540 --> 00:00:25.160
By constantly thinking about how we can change the application or

00:00:25.160 --> 00:00:27.590
break the application in different ways,

00:00:27.590 --> 00:00:31.540
it'll let us start thinking more like the original developer was thinking.

00:00:31.540 --> 00:00:32.439
So, let's explore.

00:00:34.560 --> 00:00:37.130
First, we have index .html.

00:00:37.130 --> 00:00:39.730
At the very bottom, we have all of our script tags here.

00:00:40.840 --> 00:00:45.440
One thing you might notice is of all these custom script tags here

00:00:45.440 --> 00:00:47.408
they run in a particular order.

00:00:47.408 --> 00:00:53.060
Our model todo.js runs first, then our collection, then both of our views.

00:00:53.060 --> 00:00:55.180
Then our router, then our app.

00:00:55.180 --> 00:00:58.810
Now a lot of times, the order of all of this does matter.

00:00:58.810 --> 00:01:03.120
My intuition tells me that the reason app.js is last,

00:01:03.120 --> 00:01:06.970
is that it gives all of the other files a chance to get set up

00:01:06.970 --> 00:01:10.710
before the app actually gets kicked off with this line here.

00:01:10.710 --> 00:01:12.600
So let's see if that's true.

00:01:12.600 --> 00:01:14.290
Let's take a look at our model.

00:01:15.860 --> 00:01:18.130
Now there's a particular pattern that we're going to see again and

00:01:18.130 --> 00:01:19.900
again with these files.

00:01:19.900 --> 00:01:23.610
Var app equals app, or an empty object.

00:01:23.610 --> 00:01:28.310
Meaning if app exists, don't do anything.

00:01:28.310 --> 00:01:32.390
If app doesn't exist, set app equal to a new empty object.

00:01:32.390 --> 00:01:36.650
So whichever one of these is first, there won't be an app variable, and

00:01:36.650 --> 00:01:38.400
it'll get set to an empty object.

00:01:38.400 --> 00:01:40.910
And then we have the module pattern, an IIFE.

00:01:40.910 --> 00:01:43.450
Immediately invoked function expression.

00:01:43.450 --> 00:01:47.490
So we have an open parenthesis, a function, a bunch of code here,

00:01:47.490 --> 00:01:51.560
close parenthesis, and then we run it immediately.

00:01:51.560 --> 00:01:54.410
This function here is not named, doesn't have a name.

00:01:54.410 --> 00:01:56.080
It's an anonymous function.

00:01:56.080 --> 00:02:00.290
And it's wrapped in parentheses here and, and immediately invoked.

00:02:00.290 --> 00:02:05.330
What that means is, any variables that we declare inside of this function,

00:02:05.330 --> 00:02:07.500
don't pollute the global scope.

00:02:07.500 --> 00:02:09.960
They don't go up onto the window object,

00:02:09.960 --> 00:02:14.750
meaning they don't accidentally overwrite any variables that may already exist.

00:02:14.750 --> 00:02:20.240
And we can see that inside of this function we've got app.Todo equals something.

00:02:20.240 --> 00:02:25.650
In this case, a Backbone.Model.extend, and we pass it an object literal.

00:02:25.650 --> 00:02:27.670
And that goes all the way down to here.

00:02:27.670 --> 00:02:32.980
Or at a higher level, app.Todo equals this thing.

00:02:32.980 --> 00:02:36.330
Let's take a look at our CollectionsToDo.js.

00:02:36.330 --> 00:02:38.270
We have the same pattern.

00:02:38.270 --> 00:02:41.380
Var app equals app or an empty object.

00:02:41.380 --> 00:02:44.910
Then we have an IIFE, an immediately invoked function expression.

00:02:44.910 --> 00:02:48.910
And down here we say var Todos equals this backbone collection.

00:02:48.910 --> 00:02:53.880
At the very bottom we say app.todos equals a new Todos.

00:02:53.880 --> 00:02:58.480
Now, don't get mired in the details of what's going on here.

00:02:58.480 --> 00:02:59.510
Just look at the big picture.

00:02:59.510 --> 00:03:02.065
We're creating an app object literal and

00:03:02.065 --> 00:03:05.960
then we're saying, app.todos equals some stuff.

00:03:05.960 --> 00:03:09.620
Or, app.Todo equals some stuff.

00:03:09.620 --> 00:03:12.070
If we look at the routers, same thing.

00:03:12.070 --> 00:03:14.430
App equals app, or an empty object.

00:03:14.430 --> 00:03:18.740
If we scroll down, app.TodoRouter equals some stuff.

00:03:18.740 --> 00:03:23.945
Both of our views do the same exact thing, app equals app or an empty object.

00:03:23.945 --> 00:03:27.950
App.AppView equals some stuff.

00:03:27.950 --> 00:03:31.320
In this case app.TodoView equals some stuff.

00:03:31.320 --> 00:03:33.940
So, as all of these files run,

00:03:33.940 --> 00:03:38.790
it creates an object with all of these various properties on it.

00:03:38.790 --> 00:03:42.390
TodoView, appView, our router, our model,

00:03:42.390 --> 00:03:46.830
our collection, and finally at the very end, app.js runs.

00:03:46.830 --> 00:03:47.740
So what happens there?

00:03:48.810 --> 00:03:51.460
Well, we say jQuery in this case, so

00:03:51.460 --> 00:03:57.900
when the document is loaded, run this following function, new app.AppView.

00:03:57.900 --> 00:04:00.130
Now why exactly that works?

00:04:00.130 --> 00:04:03.250
I'm not sure right now because I haven't looked at the documentation and

00:04:03.250 --> 00:04:05.900
figured out how we kick off a backbone app.

00:04:05.900 --> 00:04:08.730
But I do know that the reason that these are first so

00:04:08.730 --> 00:04:11.480
that way that app object can get set up.

00:04:11.480 --> 00:04:16.010
Now we should have some idea of where the various functionality lives because of

00:04:16.010 --> 00:04:19.970
our previous experience with other organizational paradimes.

00:04:19.970 --> 00:04:22.670
Our views are the stuff that the user sees and

00:04:22.670 --> 00:04:24.190
the stuff the user interacts with.

00:04:24.190 --> 00:04:28.250
Our router is just like the view except for the url bar.

00:04:28.250 --> 00:04:30.980
We've got the model, which is todo.js, and we've got

00:04:30.980 --> 00:04:35.458
a collection which is a collection of models for all of our various todos.

00:04:35.458 --> 00:04:39.750
And then app.js right in this line kicks it all off.

00:04:39.750 --> 00:04:42.000
Let's take a look at index.html.

00:04:42.000 --> 00:04:45.070
The other thing that we previously saw was all of

00:04:45.070 --> 00:04:49.490
these bizarre script tags with type equals text/template.

00:04:49.490 --> 00:04:55.130
And that's a chunk of HTML which is a template for something that may repeat or

00:04:55.130 --> 00:04:57.150
be some kind of a dynamic view.

00:04:57.150 --> 00:05:01.320
Here for example, we've got the view for the items.

00:05:01.320 --> 00:05:02.310
Now in the next video,

00:05:02.310 --> 00:05:05.300
we're going to make some modifications to this code base here.

