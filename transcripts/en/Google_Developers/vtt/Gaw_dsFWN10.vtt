WEBVTT
Kind: captions
Language: en

00:24:37.951 --> 00:24:38.978
by now you checked into 
registration to receive your 

00:24:38.979 --> 00:24:40.979
badge.

00:24:42.458 --> 00:24:44.692
It must be visibly warn at all 
times and you'll need it to 

00:24:44.693 --> 00:24:46.693
enter the after hours activities
at the end of days 1 and 2.

00:24:49.186 --> 00:24:51.186
Throughout the event, make sure 
to visit Google.com /IO.

00:24:53.469 --> 00:24:55.332
Or download the IO Mobile App 
for the most up-to-date 

00:24:55.333 --> 00:24:57.333
schedules and conference map.

00:25:00.448 --> 00:25:01.056
For questionser on assistance, 
stop by the information desk 

00:25:01.057 --> 00:25:04.714
looked across from the code labs
building or Chat with a staff 

00:25:04.715 --> 00:25:06.767
member wearing a yellow badge.
Sessions will take place in the 

00:25:09.805 --> 00:25:11.848
amphitheater and at the 8 stages
throughout the venue.

00:25:14.528 --> 00:25:16.211
If you haven't already, reserve 
a seat on the website or Mobile 

00:25:16.212 --> 00:25:18.062
App.
If you miss a session, 

00:25:18.063 --> 00:25:20.700
rasheddings will be available on
line shortly after they end.

00:25:22.937 --> 00:25:25.373
Be sure to visit the code labs 
building for hands on experience

00:25:25.374 --> 00:25:27.813
with ready to code kiosks and 
self-paced tutorials.

00:25:29.675 --> 00:25:31.514
Google staff will be on hand for
helpful advice and to provide 

00:25:31.515 --> 00:25:34.575
direction if you need support.
Make some time to visit the 

00:25:34.576 --> 00:25:39.913
office hours and App reviews 
tent to meet one-on-one with 

00:25:39.914 --> 00:25:41.935
Googlers, ask all your technical
questions and get feedback on 

00:25:41.936 --> 00:25:46.410
your projects F you're looking 
to network with googlers and 

00:25:46.411 --> 00:25:50.083
fellow developers, join one of 
the several meet ups hosted in 

00:25:50.084 --> 00:25:52.150
the community lounge.
Finally we'd like to visit you 

00:25:52.151 --> 00:25:54.151
to visit 

00:25:55.620 --> 00:25:57.031
the san box where you can 
explore, plane and play with our

00:25:57.032 --> 00:25:59.688
latest products and platforms 
and demos and physical 

00:26:00.298 --> 00:26:01.899
installations and more.
After sessions are done for the 

00:26:01.900 --> 00:26:06.621
day, stick around for food, 
drinks and music and fun and be 

00:26:06.622 --> 00:26:08.622
prepared for surprises along the
way.

00:26:09.111 --> 00:26:11.111
We would like to take this 
opportunity 

00:26:12.362 --> 00:26:14.805
to remind you you wu are 
dedicated to providing an 

00:26:14.806 --> 00:26:16.806
inclusive event experience for 
everyone.

00:26:18.074 --> 00:26:19.091
And you agree to our Code of 
Conduct posted throughout the 

00:26:19.092 --> 00:26:21.127
venue.
Your opinion is valuable to us.

00:26:21.128 --> 00:26:25.619
After the event, look on the fur
feedback form to share your 

00:26:25.620 --> 00:26:27.248
experience.
Thank you for attending and have

00:26:27.249 --> 00:26:29.249
a 

00:26:32.703 --> 00:26:34.703
wonderful time exploring Google 
I/O

00:26:40.302 --> 00:26:40.902
.
H.

00:28:20.311 --> 00:28:22.311
welcome and thank you for 
joining.

00:28:25.233 --> 00:28:27.233
Our session will begin soon.

00:36:03.737 --> 00:36:06.418
&gt;&gt; AYLIN ALTIOK: Hello, 
everyone.  We are really Excited

00:36:06.419 --> 00:36:08.419
to have you all here today.

00:36:11.117 --> 00:36:13.754
My name is Aylin and I'm a 
Product Manager for Actions on 

00:36:13.755 --> 00:36:15.755
Google.

00:36:16.801 --> 00:36:18.838
&gt;&gt; NICK FELKER: I'm a developer 
of programs engineer and Google 

00:36:18.839 --> 00:36:22.138
Assistant and IoT.
&gt;&gt; AYLIN ALTIOK: Today we will 

00:36:22.139 --> 00:36:26.437
talk about Best Practices for 
testing your actions and tools 

00:36:26.438 --> 00:36:29.698
we have built to make it easier 
for you.  But before getting 

00:36:29.699 --> 00:36:31.699
into details, I 

00:36:33.158 --> 00:36:36.412
want to mention why testing is 
so important.  It's important 

00:36:36.413 --> 00:36:38.413
because your users care about 
it.

00:36:40.481 --> 00:36:42.481
How do we know that?

00:36:44.367 --> 00:36:46.367
By looking at play reviews, we 
noticed 

00:36:50.441 --> 00:36:52.441
42% of the users mention 
stability and 

00:36:54.293 --> 00:36:56.293
box in their 1 star review.

00:36:59.778 --> 00:37:01.778
And 62% of the users uninstall 
the App 

00:37:04.325 --> 00:37:06.325
if they notice crash, freeze or 
an error.

00:37:10.039 --> 00:37:12.922
On the flip side, though, 73% of
the users mention speed, design 

00:37:12.923 --> 00:37:14.923
and  

00:37:16.787 --> 00:37:18.787
usability in their 5-star 
review.

00:37:20.485 --> 00:37:22.485
So this tells us users want 
5-star Apps.

00:37:24.575 --> 00:37:25.829
And this has been the trend we 
have been seeing in mobile 

00:37:25.830 --> 00:37:27.830
world.

00:37:28.894 --> 00:37:30.894
And it's no different when it 
comes to Actions.

00:37:32.858 --> 00:37:35.696
So today, we will walk you 
through some tips and tools that

00:37:35.697 --> 00:37:38.960
will let you build your own 
5-star Actions.

00:37:41.664 --> 00:37:46.394
Our journey today starts with 
Jane.  Jane is a developer.  She

00:37:46.395 --> 00:37:48.395
works on a start-up and she 
wants 

00:37:50.672 --> 00:37:52.915
to build her own Action.  Her 
Action is called TrailBlazer.

00:37:56.368 --> 00:37:58.368
And TrailBlazer will return 
nearby 

00:38:01.080 --> 00:38:03.080
bike trails for a given user 
location.

00:38:05.422 --> 00:38:08.083
So, together, we'll start our 
journey designing and building 

00:38:08.084 --> 00:38:10.084
TrailBlazer with Dialogflow.

00:38:13.183 --> 00:38:15.183
Then we will test it locally by 
using simulator.

00:38:17.081 --> 00:38:19.081
And we will show you how you can
write 

00:38:20.529 --> 00:38:22.529
your own unit test for your 
Actions by 

00:38:23.609 --> 00:38:25.609
using automated testing library.

00:38:26.652 --> 00:38:28.652
And we'll show you how you can 
test your 

00:38:32.994 --> 00:38:36.394
Actions with your own users by 
using balta release 

00:38:32.994 --> 00:38:34.994
environments.

00:38:36.079 --> 00:38:37.707
This is something we just 
announced yesterday and we are 

00:38:37.708 --> 00:38:39.708
super excited to 

00:38:42.596 --> 00:38:44.596
show you the details later today
in this session.

00:38:48.904 --> 00:38:51.825
And we'll show you some tools 
like analytics and set driver 

00:38:51.826 --> 00:38:53.826
logging to make 

00:38:55.261 --> 00:38:58.137
sure your actions remain healthy
throughout life cycle.

00:38:59.156 --> 00:39:03.254
Awesome!  Let's start with 
design and build.  So we will do

00:39:03.255 --> 00:39:05.255
that with Dialogflow.

00:39:07.740 --> 00:39:09.740
Dialogflow enables you to build 
rich conversational experiences.

00:39:11.203 --> 00:39:13.203
How does it do that?

00:39:15.065 --> 00:39:17.065
It gives you natural language 
processing out-of-the-box.

00:39:20.740 --> 00:39:23.630
So it takes user response and it
automatically match that to 

00:39:23.631 --> 00:39:25.631
intense and entities you 
defined.

00:39:28.367 --> 00:39:30.367
And you can handle this in your 
own server.

00:39:31.009 --> 00:39:33.252
So as a developer, you don't 
need to worry about knowing or 

00:39:33.253 --> 00:39:36.714
writing your own mission 
learning models.  It just works 

00:39:36.715 --> 00:39:41.222
for you if you use Dialogflow.
Let's see what it means for 

00:39:41.223 --> 00:39:43.223
TrailBlazer.

00:39:45.351 --> 00:39:47.351
So as you can see, Dialogflow 
sits in 

00:39:49.007 --> 00:39:51.007
between a system server and your
own server.

00:39:52.668 --> 00:39:55.327
So for TrailBlazer we use Google
Cloud Platform to build our own 

00:39:55.328 --> 00:39:57.328
server logic.

00:39:58.773 --> 00:40:00.773
When user says talk to 
TrailBlazer, 

00:40:02.227 --> 00:40:04.073
assistant server takes that 
response and takes our welcome 

00:40:04.074 --> 00:40:06.722
intent from Dialogflow and 
returns back to  user.

00:40:09.983 --> 00:40:11.983
So after that point, user may 
say, find 

00:40:13.845 --> 00:40:15.678
me a nearby bike trail or where 
are the nearby bike trails, and 

00:40:15.679 --> 00:40:18.316
multiple other variations of 
these type of text responses.

00:40:21.373 --> 00:40:23.825
And then, Dialogflow 
automatically match that to 

00:40:23.826 --> 00:40:25.826
intent we defined.

00:40:27.306 --> 00:40:29.536
Let's call it, find trails, and 
that intent may be reading the 

00:40:29.537 --> 00:40:33.031
logic from our own server.  Our 
own server may have the location

00:40:35.273 --> 00:40:38.926
services, we find the trails, 
and we respond back to user.  

00:40:38.927 --> 00:40:40.927
And we don't need to worry about

00:40:42.797 --> 00:40:45.642
natural language processing.&gt;&gt; 
NICK FELKER: Thank you.  So now 

00:40:45.643 --> 00:40:50.116
you built your Action.  How do 
you start testing it?  The first

00:40:50.117 --> 00:40:52.357
step is to use the Actions on 
Google simulator.

00:40:55.866 --> 00:40:57.709
And this works on your laptop or
desktop and also test on your 

00:40:57.710 --> 00:41:02.786
device if you have a home or a 
phone.  You can enter text or 

00:41:02.787 --> 00:41:04.787
you can just 

00:41:06.242 --> 00:41:08.058
talk to it and you'll get the 
response you expect.  And you 

00:41:08.059 --> 00:41:10.059
can do extra things like 

00:41:11.733 --> 00:41:13.733
changing the user's language and
their location.

00:41:13.754 --> 00:41:15.754
How does this work?

00:41:16.814 --> 00:41:18.814
Let's go to the demo.

00:41:27.450 --> 00:41:29.699
Let's go to the demo.  Click on 
the simulator tab, here.

00:41:33.411 --> 00:41:35.411
We will jump right here into the
Action.

00:41:37.510 --> 00:41:39.510
Rewill say, talk to TrailBlazer.

00:41:40.573 --> 00:41:43.444
We can say, find trails nearby. 
You notice I did make a typo 

00:41:43.445 --> 00:41:47.721
there but Dialogflow will be 
able to map it to the intent, 

00:41:47.722 --> 00:41:49.722
regardless.

00:41:50.831 --> 00:41:52.831
And we have a request and 
response tab 

00:41:54.286 --> 00:41:56.175
on the side and that will help 
you to debug your Actions.  

00:41:56.176 --> 00:41:58.176
We'll say yes.  Share the 
location.

00:42:00.277 --> 00:42:02.317
Notice in the top right corner, 
I mapped it to my hometown.

00:42:05.987 --> 00:42:07.804
So you can actually show the 
different types of locations as 

00:42:07.805 --> 00:42:09.805
well.

00:42:11.737 --> 00:42:13.804
And then display tab, notice it 
has picked a park that is pretty

00:42:13.805 --> 00:42:15.805
close to 

00:42:17.252 --> 00:42:19.707
where I used to live.  And 
that's a very basic overview of 

00:42:20.511 --> 00:42:22.511
how the simulator works.

00:42:23.618 --> 00:42:25.618
Let's go back to the Slides for 
a second.

00:42:27.686 --> 00:42:29.314
So, you can do this and mainly 
test your Actions every time you

00:42:29.315 --> 00:42:33.810
make a change.  But as Actions 
grow more complicated, you want 

00:42:33.811 --> 00:42:35.811
to make sure that users continue
to have a reliable experience.

00:42:38.542 --> 00:42:40.367
And to make this easier, we are 
introducing the automated 

00:42:40.368 --> 00:42:42.368
testing library for Actions on 
Google.

00:42:46.474 --> 00:42:49.166
If you're familiar with - node 
JS, then you will be familiar 

00:42:49.167 --> 00:42:52.622
with this testing library.  It 
supports all the Actions on 

00:42:52.623 --> 00:42:57.722
Google low calls and works with 
your existing testing 

00:42:57.723 --> 00:43:00.368
infrastructure, whether that is 
a lender or continuous 

00:43:00.369 --> 00:43:03.009
integration.  All those things 
work out-of-the-box.

00:43:06.453 --> 00:43:08.693
So, there is three key features 
this library le do for 

00:43:08.694 --> 00:43:13.980
developers.  First, you can send
text queries to your  Action.  

00:43:13.981 --> 00:43:15.198
This can be unstructured 
queries, exactly what the user 

00:43:15.199 --> 00:43:19.277
would  say.  And this is 
important because users can say 

00:43:19.278 --> 00:43:20.894
anything to your conversation.  
And you want to make sure you 

00:43:20.895 --> 00:43:22.895
can handle that.

00:43:25.375 --> 00:43:27.413
You're going to get SSML, text, 
rich responses and everything 

00:43:27.414 --> 00:43:30.261
else you would expect.
And this is your account to send

00:43:30.262 --> 00:43:32.497
the queries.  So things like 
user storage and the 

00:43:36.774 --> 00:43:38.774
last time you visited the  
Action, will 

00:43:40.081 --> 00:43:42.081
be exactly what it would be for 
yourself.

00:43:43.539 --> 00:43:44.350
How is this going to work for 
you as a developner let's switch

00:43:44.351 --> 00:43:47.003
over to the demo and I'll show 
you.

00:43:50.477 --> 00:43:52.477
So you notice I have this test 
DJS 

00:43:54.356 --> 00:43:56.356
file here and we will go down 
here.

00:43:59.454 --> 00:44:01.497
First we import the library and 
we will pass in my user 

00:44:01.498 --> 00:44:05.793
credentials so it will talk to 
this Action as  myself.  And we 

00:44:05.794 --> 00:44:08.244
start a test.  And we get a test
name.

00:44:11.925 --> 00:44:14.360
We can also set thick like the 
location.  So we can change the 

00:44:14.361 --> 00:44:18.239
location and see how the Action 
performance in different areas. 

00:44:18.240 --> 00:44:20.269
Then we will start by returning 
a promise that will start the 

00:44:20.270 --> 00:44:22.270
conversation with TrailBlazer.

00:44:25.165 --> 00:44:27.165
We'll go and send this query, 
find trails nearby.

00:44:29.447 --> 00:44:31.447
And then we will send yes after 
it asks for our location.

00:44:33.531 --> 00:44:36.383
You make sure you also try no 
and test different flows with 

00:44:36.384 --> 00:44:39.237
different permissions.  At the 
very end, we will get back text 

00:44:40.451 --> 00:44:45.570
to speech and cards.  And you 
can do a search to verify those 

00:44:45.571 --> 00:44:48.218
are exactly what we expect.  At 
the very  end, you end the test.

00:44:48.425 --> 00:44:50.425
How does this work?

00:44:54.943 --> 00:44:56.943
Let's go over here and run MPM 
test.

00:45:00.440 --> 00:45:02.440
Okay, so now we  started our 
test.

00:45:04.700 --> 00:45:08.980
In a few seconds, it is going to
send, talk to TrailBlazer.  And 

00:45:08.981 --> 00:45:10.981
we will get back a response.  
Okay.

00:45:12.671 --> 00:45:15.531
And you see a variety of 
parameters in that response.

00:45:18.617 --> 00:45:20.442
Text to speech, SSML cards, et 
cetera.  So we send, find trails

00:45:20.443 --> 00:45:24.155
nearby.  We will get back that 
thing that Google will ask for 

00:45:24.156 --> 00:45:26.156
permission to use our location. 
We'll say, yes.

00:45:29.061 --> 00:45:31.538
And then at the end, you see you
got the card, you got the text 

00:45:31.539 --> 00:45:33.539
and everything else from our 
Action.

00:45:37.253 --> 00:45:39.253
At the bottom, it says one test 
passes.  There you go.

00:45:42.138 --> 00:45:44.138
So using this tool, you will be 
able 

00:45:46.832 --> 00:45:48.861
to more easily verify that your 
Actions do exactly what you 

00:45:48.862 --> 00:45:50.862
expect.

00:45:55.381 --> 00:45:57.213
So let's switch back to the 
Slides.

00:45:57.214 --> 00:45:59.657
&gt;&gt; AYLIN ALTIOK: Awesome.  So 
far we will TrailBlazer and we 

00:46:02.086 --> 00:46:04.086
tested it locally in our 
simulator.

00:46:05.190 --> 00:46:07.631
And we wrote our own unit test 
and make sure they were all 

00:46:07.632 --> 00:46:12.931
green.  But it is always 
important, as a developer, to 

00:46:12.932 --> 00:46:17.412
test your Actions with your own 
users.  Why?  Because they may 

00:46:17.413 --> 00:46:21.298
find bugs and usability issues 
that you didn't think or you 

00:46:21.299 --> 00:46:23.299
didn't catch.

00:46:25.805 --> 00:46:27.805
Let's see how you can do it by 
utilizing 

00:46:29.065 --> 00:46:31.065
our new, Alpha and Beta release 
environments.

00:46:32.736 --> 00:46:36.993
So Alpha is the quickest way to 
test your Actions.  Once you 

00:46:36.994 --> 00:46:38.994
submit Alpha, it doesn't go 
through the review process.

00:46:44.378 --> 00:46:46.441
So it can be live live just in 
couple hours.  And you can 

00:46:46.442 --> 00:46:49.091
invite your friends, family and 
teammates up to 20 testers.

00:46:52.348 --> 00:46:54.321
And you  caniterate by releasing
Alpha and acting on the feedback

00:46:54.322 --> 00:46:56.595
from your users and keep this 
iteration going on 

00:46:59.836 --> 00:47:01.836
until you have the stable 
version.

00:47:02.301 --> 00:47:04.928
And once you have the stable 
version, you can submit that for

00:47:04.929 --> 00:47:06.929
Beta release.

00:47:07.992 --> 00:47:12.698
Beta is live after going through
regular Google review process.  

00:47:12.699 --> 00:47:14.745
So your Actions would be live if
they are approved after the 

00:47:14.746 --> 00:47:19.427
review.  But once they are 
approved, you don't need to go 

00:47:19.428 --> 00:47:21.428
through additional review to 
deploy those to production.

00:47:24.819 --> 00:47:26.819
So as a developer, you can 
decide when 

00:47:28.681 --> 00:47:31.113
to deploy this to public 
audience at your own flexible 

00:47:31.114 --> 00:47:34.366
timing.
And you can invite wider 

00:47:34.367 --> 00:47:36.367
audience for 

00:47:38.443 --> 00:47:42.353
your Beta release up to 200 
users.  Awesome.  Let's see how 

00:47:42.354 --> 00:47:44.354
that works in Action.

00:47:45.630 --> 00:47:50.525
Let's go back to demo mode.  
Perfect.  So let's take it from 

00:47:50.526 --> 00:47:52.526
where we left off in simulator.

00:47:58.428 --> 00:48:01.075
So now you can see a new release
tab in the left hand side 

00:48:01.076 --> 00:48:06.161
navigation in the Actions 
console.  Let's click that.  And

00:48:06.162 --> 00:48:08.017
you will see aside from 
production, we also have now 

00:48:08.018 --> 00:48:12.899
Alpha and Beta release.  These 
are totally optional.  You don't

00:48:12.900 --> 00:48:14.940
need to utilize those but since 
you're in the session today, I'm

00:48:16.971 --> 00:48:21.313
sure you care about testing your
actions with your own users.  

00:48:21.314 --> 00:48:23.554
And before getting into the 
details of Alpha, I just want to

00:48:23.555 --> 00:48:25.783
show you the versions I already 
deployed before.

00:48:29.451 --> 00:48:32.081
So currently, I have three 
different versions one in Alpha,

00:48:32.082 --> 00:48:34.082
one in Beta and one in 
production that is already 

00:48:35.743 --> 00:48:37.743
deployed to my users.

00:48:39.213 --> 00:48:42.278
So let's go ahead and deploy an 
Alpha together.  But before 

00:48:42.279 --> 00:48:44.737
doing so, let's change something
in our Actions so we can tell 

00:48:47.420 --> 00:48:49.420
our users if they like the new 
change.

00:48:51.138 --> 00:48:53.991
So now you see the actions under
the build section.  I'll go 

00:48:53.992 --> 00:48:55.992
ahead and click that.

00:48:58.281 --> 00:48:59.297
And if you are family with the 
-- familiar with the Action 

00:48:59.298 --> 00:49:03.390
console, we just redesigned the 
whole UI for you to make it 

00:49:03.391 --> 00:49:06.277
easier for your navigation.
So we will see our default 

00:49:06.278 --> 00:49:11.787
welcome intent here that we 
already built with Dialogflow.  

00:49:11.788 --> 00:49:14.450
I'll click to that and it gives 
me option to edited that in 

00:49:14.451 --> 00:49:18.508
Dialogflow.  Let's see how that 
looks like.  So this is my 

00:49:18.509 --> 00:49:23.403
welcome intent.  But we also 
have other intent that is I 

00:49:23.404 --> 00:49:25.637
mention to you before that we 
can handle in our server.

00:49:30.537 --> 00:49:33.830
So I'll go back and go to 
default welcome intent.  So 

00:49:33.831 --> 00:49:35.831
right now, our welcome message 
to 

00:49:36.888 --> 00:49:38.888
the users says good day from 
TrailBlazer.

00:49:39.940 --> 00:49:42.598
Let's change that and let's see 
if our Alpha testers would like 

00:49:42.599 --> 00:49:44.599
it.

00:49:46.672 --> 00:49:48.672
So instead of TrailBlazer, let's
say, 

00:49:52.017 --> 00:49:54.017
good day from Google I/O Stage 
7.

00:49:57.379 --> 00:49:59.379
So, I'll save this, and after it
is 

00:50:01.065 --> 00:50:03.419
saved, I can go ahead and see 
how that works by clicking 

00:50:03.420 --> 00:50:05.420
right-hand side.

00:50:07.126 --> 00:50:09.773
And this is going to bring my 
draft version into the simulator

00:50:09.774 --> 00:50:12.234
to see the change that is I just
did.  So let's see.

00:50:16.977 --> 00:50:18.977
Talk to TrailBlazer.

00:50:25.972 --> 00:50:27.972
Let's make sure it is reading 
from the draft.

00:50:31.513 --> 00:50:34.783
Let's try it again.  Awesome.
So it says, good day from Google

00:50:34.784 --> 00:50:38.732
I/O Stage 7, as we expected.  So
we want to test it with our 

00:50:38.733 --> 00:50:43.233
Alpha users and see if they are 
going to like this response 

00:50:43.234 --> 00:50:46.086
instead of the previous version.
And also please note that you 

00:50:46.087 --> 00:50:48.087
can see 

00:50:49.349 --> 00:50:53.034
all your versions here and test 
them to see the difference.

00:50:57.932 --> 00:50:59.932
So I'll just click down and go 
ahead and 

00:51:01.241 --> 00:51:03.241
click on the release tab now.

00:51:04.294 --> 00:51:06.939
And on the release tab, let's 
push this version into our Alpha

00:51:06.940 --> 00:51:09.180
testers.  So while my production
and Beta 

00:51:12.448 --> 00:51:14.448
remains like a different welcome
that 

00:51:15.707 --> 00:51:17.766
says, welcome to TrailBlazer, 
our Alpha will be taking this 

00:51:17.767 --> 00:51:21.421
version and changing the welcome
response.  So we just need to 

00:51:21.422 --> 00:51:23.422
click that we 

00:51:24.726 --> 00:51:26.772
tested it in simulator.  We gone
through the check list and 

00:51:27.389 --> 00:51:29.389
complying with policies.

00:51:32.107 --> 00:51:34.107
And once we submit, this is 
going to 

00:51:35.158 --> 00:51:37.158
run our checks and will be done 
in few seconds.

00:51:39.015 --> 00:51:41.015
And while it is doing that -- it
is already done.

00:51:45.766 --> 00:51:47.766
So you can see now that our 
version will be deploying state.

00:51:48.030 --> 00:51:50.030
Perfect.

00:51:53.137 --> 00:51:54.960
So we created version 7, and now
it is being in the deploying 

00:51:54.961 --> 00:51:58.818
state and it will be deployed 
just in few hours and live to 

00:51:58.819 --> 00:52:00.819
your testers.

00:52:02.297 --> 00:52:04.555
But how do we invite our own 
testers?  You'll see a manage 

00:52:04.556 --> 00:52:08.679
Alpha testers and same applies 
to Beta, by the way.  The only 

00:52:08.680 --> 00:52:10.907
difference with Beta, we would 
see the status as, under review.

00:52:11.111 --> 00:52:16.597
So we'll go ahead and click on 
manage testers.  So in this 

00:52:16.598 --> 00:52:19.443
section, you can add your own 
testers to make sure they are 

00:52:19.444 --> 00:52:21.480
white listed to receive your 
Alpha version.

00:52:29.097 --> 00:52:31.762
So we can add just --ed that to 
my list and I already had some 

00:52:31.763 --> 00:52:35.035
other e-mails before.  And once 
I hit save, all of these 

00:52:39.123 --> 00:52:41.567
users are white listed to get my
Alpha version.  Just couple 

00:52:41.568 --> 00:52:43.568
things to note here.

00:52:45.027 --> 00:52:47.027
The users you're adding should 
have a 

00:52:48.489 --> 00:52:51.135
Google account, either Gmail or 
Google Maps user otherwise you 

00:52:51.136 --> 00:52:54.418
would see that it will fail and 
you can remove and add new 

00:52:54.419 --> 00:52:57.276
users.
So, the last step as a developer

00:52:57.277 --> 00:53:00.117
for  you, is to invite your own 
testers.

00:53:04.033 --> 00:53:06.668
So you see here there is an 
opt-in link.  And this is static

00:53:06.669 --> 00:53:08.669
link that directs 

00:53:09.967 --> 00:53:12.575
users to your directory page.  
So if you're users already using

00:53:12.576 --> 00:53:14.576
your 

00:53:15.631 --> 00:53:17.474
Action in their mobile, they can
just search your Action name 

00:53:17.475 --> 00:53:21.378
like, TrailBlazer, and they 
would see your invitation in the

00:53:21.379 --> 00:53:25.645
Action directed page.  But if 
they are not familiar with that,

00:53:25.646 --> 00:53:27.481
you can just share this link and
once they click this link on 

00:53:27.482 --> 00:53:31.772
their mobile phone, either iOS 
or Android, they would land into

00:53:31.773 --> 00:53:34.220
your directory.
Let's see how that experience 

00:53:34.221 --> 00:53:36.221
looks  like.

00:53:41.532 --> 00:53:43.574
Let's go back to our Slides.  
Perfect.

00:53:46.849 --> 00:53:49.301
We now created an Alpha release 
and we took the opt-in link and 

00:53:49.302 --> 00:53:51.952
shared with our tester.  So the 
first screen here is the place 

00:53:52.557 --> 00:53:54.557
they landed.

00:53:55.840 --> 00:53:57.840
So this is my Action directory 
page on mobile.

00:53:59.101 --> 00:54:01.101
And when they scroll down, they 
see 

00:54:02.556 --> 00:54:04.556
that the invitation that I added
them to 

00:54:05.664 --> 00:54:07.664
my Beta -- or same applies to 
Alpha.

00:54:09.938 --> 00:54:12.585
Once they are all okay to be 
your Alpha tester, they say, I'm

00:54:12.586 --> 00:54:16.923
in.  And after that point, they 
will start talking to your test 

00:54:16.924 --> 00:54:18.924
version.

00:54:20.605 --> 00:54:22.874
At any time, they can opt-out or
they can switch between Alpha 

00:54:22.875 --> 00:54:24.875
and Beta if you 

00:54:25.943 --> 00:54:28.185
invited them to both channels.  
How cool is that?

00:54:32.836 --> 00:54:34.835
This was something -- this 
feature was a top developer 

00:54:34.836 --> 00:54:36.850
request and we are also excited 
to actually make it happen.

00:54:40.546 --> 00:54:44.217
So let's recap what we have been
doing so far.  So Jane builds 

00:54:44.218 --> 00:54:48.503
her TrailBlazer Action with 
Dialogflow.  She tested locally 

00:54:48.504 --> 00:54:51.360
with simulator and also she was 
able to test it with her 

00:54:55.640 --> 00:54:57.640
own device that was connected to
her preview account.

00:54:59.521 --> 00:55:01.521
And she wrote her unit test by 
using automated testing library.

00:55:05.261 --> 00:55:07.102
And once everything was green, 
she moved to her teammates and 

00:55:07.103 --> 00:55:09.758
made an Alpha release.  Her 
teammates gave her feedback and 

00:55:12.070 --> 00:55:14.536
she was able toiterate and make 
her actions more stable.

00:55:17.403 --> 00:55:19.236
And then she released it to her 
Beta testers to more wider 

00:55:19.237 --> 00:55:21.237
audience.

00:55:23.121 --> 00:55:25.121
And once she made sure her 
Actions are 

00:55:27.000 --> 00:55:29.000
stable, she is ready to go for 
production.

00:55:30.685 --> 00:55:33.124
But before going to production, 
I would like to share some Best 

00:55:33.125 --> 00:55:35.125
Practices while 

00:55:36.816 --> 00:55:39.673
you are testing your actions.  
So as a developer, we always 

00:55:39.674 --> 00:55:42.107
think about end-to-end journeys 
and try to 

00:55:45.419 --> 00:55:47.419
capture those use cases in our 
test.

00:55:48.516 --> 00:55:51.159
But what does it even mean in a 
conversational space?

00:55:55.916 --> 00:55:57.989
So in a system world, your users
may be in multiple modes.

00:56:01.314 --> 00:56:03.314
And these modes are determined 
by 

00:56:04.768 --> 00:56:06.768
input and output of your device.

00:56:09.862 --> 00:56:11.913
So if a user is talking to 
TrailBlazer in Google Home, they

00:56:11.914 --> 00:56:14.779
would only get voice.  But if 
they are talking to TrailBlazer 

00:56:18.063 --> 00:56:20.323
on their mobile phone, not only 
would they get voice, but they 

00:56:20.324 --> 00:56:22.793
would also get image of the 
nearby bike trails.

00:56:26.100 --> 00:56:28.100
So as a developer, it is 
important to 

00:56:29.149 --> 00:56:30.798
think about where our users may 
be interacting with our  actions

00:56:30.799 --> 00:56:33.446
and handle these test cases 
accordingly to make 

00:56:36.937 --> 00:56:38.937
sure their experience is smooth 
in all 

00:56:40.833 --> 00:56:42.833
device that is actions are 
offered.

00:56:44.602 --> 00:56:46.602
And the second important point 
is to 

00:56:49.030 --> 00:56:51.712
make sure your users are able to
answer your actions.  It's good 

00:56:51.713 --> 00:56:53.713
to test your invocations.

00:56:55.190 --> 00:56:57.190
They can invoke your App in 
multiple ways.

00:56:59.069 --> 00:57:01.069
Either explicitly by saying, 
talk to TrailBlazer.

00:57:03.135 --> 00:57:05.385
Or you may also have some 
built-intense or implicit 

00:57:05.386 --> 00:57:08.430
invocation that may be 
triggereddered in different way.

00:57:09.446 --> 00:57:11.446
Let's say, play a game.

00:57:14.144 --> 00:57:16.144
Or find a nearby bike trail.

00:57:17.632 --> 00:57:22.175
So Actions on Google today are 
offered in multiple languages.  

00:57:22.176 --> 00:57:24.827
And it becomes even more 
important to test your user's 

00:57:24.828 --> 00:57:26.828
languages in a conversational 
world.

00:57:30.326 --> 00:57:32.326
So this is a great one to be 
able to 

00:57:33.793 --> 00:57:36.045
test programly by using unit 
tests or in simulator as well as

00:57:36.046 --> 00:57:38.046
you can offer your 

00:57:39.540 --> 00:57:41.182
Alpha and Beta environments to 
the use they're speaks one of 

00:57:41.183 --> 00:57:43.183
these languages.

00:57:44.861 --> 00:57:50.212
And see if they can navigate.
And same applies to location. 

00:57:50.213 --> 00:57:53.056
Today, Nick pointed out that in 
simulator, you are able to 

00:57:53.057 --> 00:58:00.010
change the location and see how 
your action responds back.

00:58:03.910 --> 00:58:05.540
Actions on Google offers 
multiple functional activities 

00:58:05.541 --> 00:58:07.798
to developers, like facilitated 
payments, account  

00:58:11.253 --> 00:58:13.253
linking, reengagement, push  
notifications.

00:58:16.166 --> 00:58:18.831
Some of these may be hard to 
test pragmatically.  For  

00:58:18.832 --> 00:58:20.832
example, let's take payment as 
an example.

00:58:22.310 --> 00:58:24.310
So this may be a perfect use 
case to 

00:58:25.783 --> 00:58:28.237
test with your Alpha or Beta 
testers and make sure that they 

00:58:28.238 --> 00:58:30.238
can get the 

00:58:31.748 --> 00:58:33.748
functionality that you want to 
be.

00:58:35.244 --> 00:58:37.697
And last but not least, our 
Action may be touching into 

00:58:37.698 --> 00:58:39.698
multiple stack.

00:58:40.970 --> 00:58:42.970
So TrailBlazer rebuilds not only
have 

00:58:44.428 --> 00:58:46.659
Dialogflow and assistance on the
client side but we also build 

00:58:46.660 --> 00:58:48.949
Orion server.  So it is 
important to make sure and 

00:58:51.586 --> 00:58:53.586
handle all the cases in each of 
these 

00:58:54.852 --> 00:58:56.852
text in the architecture.

00:58:58.147 --> 00:58:59.787
&gt;&gt; NICK FELKER: So, you 
designed, built and tested your 

00:58:59.788 --> 00:59:03.286
Action.  Now you deployed it to 
users.  But it doesn't stop 

00:59:03.287 --> 00:59:06.973
there.  You have to continue to 
ensure that users have a great 

00:59:06.974 --> 00:59:11.637
experience.  We have a couple of
tools to help you do that.  The 

00:59:11.638 --> 00:59:13.679
first of which is the Health 
Analytics section in the 

00:59:13.680 --> 00:59:17.950
console.  And this we'll slow 
you graphs for the number of 

00:59:17.951 --> 00:59:20.389
errors that users are 
experiencing as well as the 

00:59:20.390 --> 00:59:22.390
latency.

00:59:23.478 --> 00:59:25.307
And we do periodic checks on 
your Action and if we determine 

00:59:25.308 --> 00:59:30.014
they are unhealthy, we will let 
you know over an e-mail and if 

00:59:30.015 --> 00:59:32.460
it continues to be unhealthy, it
will be disabled until it 

00:59:35.892 --> 00:59:37.892
becomes healthy again.

00:59:41.835 --> 00:59:43.835
Let's switch over to the demo.

00:59:47.192 --> 00:59:49.192
So here we are in the analytics 
page.

00:59:52.180 --> 00:59:53.016
You can jump over to health and 
see the errors that are 

00:59:53.017 --> 00:59:56.123
happening.  Let's go ahead and 
jump over the last three months,

00:59:56.124 --> 00:59:58.155
what kind of errors have we had?
You see there are a couple of 

00:59:58.156 --> 01:00:03.280
errors that  started out a few 
weeks ago.  We can go ahead and 

01:00:03.281 --> 01:00:07.361
look at the errors themselves.  
In valid response.  Time out.  

01:00:07.362 --> 01:00:10.010
Unknown error.  We can learn 
more about why these errors 

01:00:10.011 --> 01:00:12.011
might be happening.

01:00:13.292 --> 01:00:15.139
We can also filter these out and
say, okay, people might be 

01:00:15.140 --> 01:00:17.140
having a different 

01:00:19.002 --> 01:00:20.840
experience on a phone compared 
to a Google Home.  And seems 

01:00:20.841 --> 01:00:25.356
like all these errors relate to 
mobile devices.  We can also 

01:00:25.357 --> 01:00:27.357
look at the latency and 

01:00:29.286 --> 01:00:31.319
see 50% of users are getting 
about 200  milliseconds.  That's

01:00:31.320 --> 01:00:33.320
a pretty good response time.

01:00:35.389 --> 01:00:37.389
As we jump out towards the 95  

01:00:38.541 --> 01:00:40.976
percentile, it gets higher and 
so maybe we want to see what 

01:00:40.977 --> 01:00:45.084
kind of things are happening for
some of those users to help 

01:00:45.085 --> 01:00:47.085
reduce that latency.

01:00:48.213 --> 01:00:50.213
And there is more graphs as 
well.

01:00:52.700 --> 01:00:54.130
Now the second part in making 
sure you have reliable action is

01:00:54.131 --> 01:00:58.252
Stackdriver.  To show you how to
do that, I'm going to go back to

01:00:58.253 --> 01:01:00.253
the simulator.

01:01:01.703 --> 01:01:04.996
And we talked about finding bike
trails.  But there is also a bug

01:01:04.997 --> 01:01:06.997
in our Action.

01:01:10.771 --> 01:01:12.771
So if I say, give me a tip.  
It's going to crash.

01:01:15.706 --> 01:01:17.706
That's intentional for this 
demo.

01:01:17.962 --> 01:01:19.807
So it says, final response must 
be set.  You might have 

01:01:19.808 --> 01:01:23.480
experienced this when you're 
using the simulator.  But you 

01:01:23.481 --> 01:01:28.568
might not know what this means. 
Click this view logs button.  

01:01:28.569 --> 01:01:32.865
We'll jump into Stackdriver, 
which is our log-in tool.  And 

01:01:32.866 --> 01:01:35.745
it will show all of these things
that happened, all the logs, for

01:01:35.746 --> 01:01:41.530
our Action.  We can go ahead and
filter something like errors.  

01:01:41.531 --> 01:01:43.531
So we'll find all the errors 
that happened.

01:01:44.162 --> 01:01:46.162
You see right now we just got 
this final 

01:01:47.436 --> 01:01:50.892
response must be set.  It is a 
lot of information here.  What 

01:01:50.893 --> 01:01:52.893
does this mean?

01:01:54.194 --> 01:01:56.198
Since we are using 
CloudFunctions, we actually also

01:01:56.199 --> 01:01:58.199
logged what is happening there 
as well.

01:02:01.532 --> 01:02:03.585
And we have this error in our 
Cloud function T says, reference

01:02:03.586 --> 01:02:05.586
error, trail 

01:02:07.453 --> 01:02:09.453
tips is not defined  index.JS 
line 30.

01:02:10.914 --> 01:02:13.801
Okay, let's jump over to our 
code and figure out what is 

01:02:13.802 --> 01:02:16.080
happening.  Index.

01:02:24.630 --> 01:02:26.630
JS line 30 says -- this is 
actually  correct.  Okay.

01:02:28.124 --> 01:02:32.827
So you might see that there is a
syntax error in our index.JS 

01:02:32.828 --> 01:02:34.828
file.  Once you figure out this 
is a problem, 

01:02:40.044 --> 01:02:42.044
we can go ahead and make the 
change and 

01:02:43.905 --> 01:02:45.905
do another deploy.

01:02:47.374 --> 01:02:50.245
And then the next time we run 
our tool and through the 

01:02:50.246 --> 01:02:54.336
simulator or testing, it will 
work as we expect.  So let's 

01:02:54.337 --> 01:02:56.337
jump back to the Slides and 

01:02:58.190 --> 01:03:00.190
recap what just happened.

01:03:01.277 --> 01:03:03.928
So with Stackdriver Logging, you
can examine error logs for your 

01:03:03.929 --> 01:03:05.929
fulfillment 

01:03:07.868 --> 01:03:10.326
and filter these logs based on 
types of errors and anything 

01:03:10.327 --> 01:03:12.800
else that might be logging.  And
what is really cool is that no 

01:03:14.240 --> 01:03:16.681
custom code is required.  If 
you're using Actions on Google, 

01:03:16.682 --> 01:03:21.783
you get those logs.  If you're 
using CloudFunctions, you get 

01:03:21.784 --> 01:03:23.784
those logs as well.

01:03:25.896 --> 01:03:31.009
&gt;&gt; AYLIN ALTIOK: Awesome.  This 
concludes our journey today.  So

01:03:31.010 --> 01:03:33.041
let's review what we have been 
doing together.

01:03:36.563 --> 01:03:38.658
So it started with Jane and Jane
had an idea for an Action 

01:03:38.659 --> 01:03:41.088
called, TrailBlazer.

01:03:45.168 --> 01:03:47.821
She built with Dialogflow.  Once
she was done with designing and 

01:03:50.878 --> 01:03:52.878
building, she moved it to her 
simulator 

01:03:53.950 --> 01:03:56.185
and tested locally on her device
and on the simulator on the 

01:03:56.186 --> 01:03:59.440
Actions on Google web.  And then
she wrote her own unit test 

01:04:03.151 --> 01:04:05.151
by using automated testing 
library.

01:04:07.210 --> 01:04:09.900
And once it was all good and 
tested, she released it to her 

01:04:09.901 --> 01:04:11.901
Alpha and Beta  

01:04:14.406 --> 01:04:17.249
testers to make sure she gets a 
stable action.  And once she 

01:04:17.250 --> 01:04:19.250
gets that, she was able 

01:04:21.547 --> 01:04:23.621
to deploy to public, all systems
users.  And she was able to grow

01:04:23.622 --> 01:04:26.698
her audience and she was able to
get more engagement.

01:04:29.554 --> 01:04:31.180
Throughout this journey, once 
her Action was in production, 

01:04:31.181 --> 01:04:33.847
she was able to monitor it by 
looking at the Health 

01:04:36.985 --> 01:04:39.461
Analytics in Actions on Google 
console, or Stackdriver Logging 

01:04:39.462 --> 01:04:42.702
that comes out-of-the-box.  And 
she was able to check and 

01:04:42.703 --> 01:04:44.703
monitor 

01:04:46.374 --> 01:04:48.005
and catch the box if her 
production users had been seeing

01:04:48.006 --> 01:04:50.006
any issues.

01:04:51.256 --> 01:04:53.256
So she was able to fix those and
make 

01:04:54.518 --> 01:04:56.518
sure her action was healthy.

01:04:57.972 --> 01:04:59.972
As a result, Jane was able to 
get her 

01:05:01.055 --> 01:05:03.919
own  5-star Actions.  And you 
want to make sure that all the 

01:05:06.354 --> 01:05:09.212
tools and tips we shared today 
will help you get your own 

01:05:09.213 --> 01:05:12.716
5-star Actions.  Thank you very 
much for coming and we would 

01:05:12.717 --> 01:05:15.424
love to hear from you.  So if 
you can go and provide us 

01:05:19.913 --> 01:05:21.913
feedback in this link up here, 
we would be so happy.

01:05:24.601 --> 01:05:26.634
And also, please visit Actions.
google.com if you want to learn 

01:05:26.635 --> 01:05:28.635
more about the things we talked 
about today.

01:05:31.099 --> 01:05:33.099
And Nick and I will be available
after 

01:05:34.590 --> 01:05:36.590
the session in sandbox if you 
have any questions.

01:05:37.450 --> 01:05:39.064
We would love to hear from you 
either through our developer 

01:05:39.065 --> 01:05:42.541
challenges or in person in IO.
&gt;&gt; NICK FELKER: Make sure you 

01:05:42.542 --> 01:05:44.994
follow us on Twitter and follow 
abses on Google 

01:05:50.456 --> 01:05:56.483
and use the #AOGDEVS.  Thank 
you.

01:05:59.691 --> 01:06:01.691
[ Applause ]

01:26:10.646 --> 01:26:14.129
&gt;&gt; SANDEEP DINESH: What's up? 
Good morning!  It's 9:30 and we 

01:26:14.130 --> 01:26:17.656
are all sleeping still.  Ubers 
and traffic?  I know all the 

01:26:17.657 --> 01:26:21.993
excuses.  My name is Sandeep.  
Today I want to talk to you 

01:26:21.994 --> 01:26:23.994
about 

01:26:25.459 --> 01:26:27.476
microservices with Kubernetes 
and Istio.  So I'm a developer 

01:26:27.477 --> 01:26:29.477
advocate on the 

01:26:34.280 --> 01:26:38.013
Google Cloud working with 
Kubernetes for the past three 

01:26:34.280 --> 01:26:36.280
years.

01:26:37.307 --> 01:26:39.307
It's grown a lot.

01:26:41.290 --> 01:26:45.356
And Istio is the next new hot 
thing coming out so you're all 

01:26:41.290 --> 01:26:43.290
here to learn about it.  So 
let's go.

01:26:43.354 --> 01:26:46.487
Because we all know 
microservices are awesome, 

01:26:43.354 --> 01:26:45.761
right?  When you have a 
traditional application, like a 

01:26:45.762 --> 01:26:50.308
model, you have all your logic 
in one App, right?  So a Java 

01:26:50.309 --> 01:26:52.585
App, Ruby App, node, whatever.  
You would have all the code in 

01:26:52.586 --> 01:26:54.586
your one App.

01:26:56.127 --> 01:26:57.978
It would do all the parts, maybe
using like object orientation so

01:26:57.979 --> 01:27:01.928
have you different classes that 
do different things.  But at the

01:27:01.929 --> 01:27:03.550
end of the day, it's like one 
big program that does all the 

01:27:03.551 --> 01:27:07.230
stuff.  And it's a lot of 
advantages doing this monolithic

01:27:07.231 --> 01:27:10.076
type of development.  The it's 
easier to debug and easier to 

01:27:10.279 --> 01:27:13.531
deploy.  You just push it out 
and you're done.  When you have 

01:27:13.532 --> 01:27:15.532
a small team, and you 

01:27:16.614 --> 01:27:18.614
have a small App, it's really 
easy to do.

01:27:19.693 --> 01:27:22.143
But the problem with the 
monolith comes when your App 

01:27:22.144 --> 01:27:24.144
starts to grow a little bigger.

01:27:26.002 --> 01:27:28.247
So now you have all of these 
things and all these different 

01:27:28.248 --> 01:27:30.277
pieces but you still have one 
App that is doing all of it, 

01:27:30.278 --> 01:27:34.183
right?  So any time you want to 
make a change in invoicing, that

01:27:34.184 --> 01:27:37.865
means you have to redeploy the 
whole thing, even though the ETL

01:27:37.866 --> 01:27:39.720
pipeline might not have been 
affected at all and maybe the 

01:27:39.721 --> 01:27:42.174
invoicing part is really good to
be done in Java, 

01:27:45.444 --> 01:27:47.080
but ETL pipeline you want to use
Python and on the front end you 

01:27:47.081 --> 01:27:49.081
want to use NodeJS.

01:27:50.768 --> 01:27:52.407
But if you have a monolithic 
App, your stuck into using one 

01:27:52.408 --> 01:27:54.475
language.
A team that wants to make a 

01:27:54.476 --> 01:27:57.939
update to one part has to touch 
the whole thing.  And things 

01:27:57.940 --> 01:28:01.623
start to get really Harry really
quickly.  So with microservices,

01:28:01.624 --> 01:28:03.624
each one of these becomes its 
own individual 

01:28:06.720 --> 01:28:09.184
component that can be written in
its own language and updated and

01:28:09.185 --> 01:28:13.049
deployed independently of the, 
so this gives you more agilitiy 

01:28:13.050 --> 01:28:15.050
and more flexibility and a lot 
more speed and a lot more cool 

01:28:15.917 --> 01:28:18.989
things like that.
So you're like, that sounds 

01:28:18.990 --> 01:28:23.269
really good.  Why is anyone 
using monolith?  Because once 

01:28:23.270 --> 01:28:25.270
you start growing even 

01:28:26.934 --> 01:28:28.934
bigger, it gets even more 
complicated, right?

01:28:29.997 --> 01:28:31.660
Honestly, a monolith can fall 
apart at this point too but even

01:28:31.661 --> 01:28:36.184
all the advantages of the 
microservices start to get 

01:28:36.185 --> 01:28:38.423
really hard to manage because 
now you don't have just 20 

01:28:38.424 --> 01:28:43.376
microservices, have you 2000 
microservices, right?  And how 

01:28:43.377 --> 01:28:46.265
do you know which one talks to 
which one and you the intricate 

01:28:46.266 --> 01:28:50.399
spider web of connections works?
You might have a single request 

01:28:50.400 --> 01:28:52.400
that comes into your load 
balance they're 

01:28:54.697 --> 01:28:57.122
gets send to 20,000 
microservices and all the way 

01:28:57.123 --> 01:28:59.123
back up and anywhere that chain 
breaks your whole application 

01:29:00.004 --> 01:29:02.254
looks like it is broken.
So debugging this becomes super 

01:29:02.255 --> 01:29:04.255
hard.

01:29:08.284 --> 01:29:09.346
Deploying things making sure 
everything is in lock step with 

01:29:09.347 --> 01:29:11.347
each 

01:29:14.292 --> 01:29:16.292
other T becomes

01:29:19.277 --> 01:29:22.810
really difficult to try to 
manage this huge stack of 

01:29:19.277 --> 01:29:21.277
services.  So are microservices 
terrible?

01:29:25.313 --> 01:29:29.579
Maybe.  But we can use a lot of 
tooling to try to make them more

01:29:25.313 --> 01:29:25.518
manage believe.
So let's use tools to automate 

01:29:25.519 --> 01:29:27.519
the 

01:29:29.321 --> 01:29:29.531
infrastructure component and 
automate the networking 

01:29:29.532 --> 01:29:32.643
components and the management 
sides of things.  When you look 

01:29:32.644 --> 01:29:34.490
at a monolith versus 
microservice, they have a lot of

01:29:34.491 --> 01:29:38.999
complexity.  The difference is, 
unless you know something I 

01:29:39.000 --> 01:29:41.000
don't, there is no tools out 

01:29:42.506 --> 01:29:45.341
there that umly write code for 
you and maintain two million 

01:29:45.342 --> 01:29:47.342
Java line App.

01:29:48.442 --> 01:29:50.471
It's like some magic AI to write
code, we all will be out of 

01:29:50.472 --> 01:29:52.519
years.  Maybe in a few years.

01:29:55.775 --> 01:29:57.417
We have a lot of tools that can 
automate infrastructure a lot 

01:29:57.418 --> 01:29:59.660
more easily.  So a lot of the 
issues that we have 

01:30:02.732 --> 01:30:04.564
with microservice can be 
automated away.

01:30:04.565 --> 01:30:06.593
So let's take a look at some of 
those tools.  So how many people

01:30:06.594 --> 01:30:10.067
are familiar with Docker?  I 
expect a lot of hands to go up. 

01:30:10.068 --> 01:30:11.905
So for those who are not 
familiar with Docker, Docker is 

01:30:11.906 --> 01:30:13.906
basically a way to package your 
application.

01:30:15.603 --> 01:30:18.520
So it doesn't matter if you're 
writing node code, Python, Java,

01:30:18.521 --> 01:30:20.521
whatever.

01:30:21.973 --> 01:30:24.211
Doesn't matter if you have image
magic, a random library, you put

01:30:24.212 --> 01:30:27.680
it in your Docker container and 
you're good to go.  All you have

01:30:27.681 --> 01:30:31.182
to do is care about running the 
container.  You don't have to 

01:30:31.183 --> 01:30:33.229
care about running what is 
inside of it.

01:30:36.088 --> 01:30:38.953
So basically you take your code 
and your dependency and put it 

01:30:38.954 --> 01:30:41.595
into a generic container format.
It doesn't matter what is inside

01:30:41.596 --> 01:30:45.520
as long as you can run a 
container you can run all of 

01:30:45.521 --> 01:30:47.521
them.
So now you have a container.

01:30:50.078 --> 01:30:52.946
You have to run it on your 
cluster, right?  Because logging

01:30:52.947 --> 01:30:54.947
into a single machine and then 
running Docker run and then 

01:30:56.699 --> 01:31:00.407
doing that 1000 times, it seems 
like a waste of time to me.  So 

01:31:00.408 --> 01:31:03.067
instead, we can use something 
like Kubernetes which is a 

01:31:03.068 --> 01:31:06.321
container orchestration system. 
And what we can do with that is 

01:31:06.322 --> 01:31:10.028
say say, run this container five
times somewhere in my cluster.

01:31:10.029 --> 01:31:14.754
What it will do is it will run 
your containers for you 

01:31:14.755 --> 01:31:16.986
automatically.
So let's say you wanted to run 

01:31:16.987 --> 01:31:21.121
this container and that 
container and that one and you 

01:31:21.122 --> 01:31:23.800
want two copies of each.  You 
just tell Kubernetes that and it

01:31:24.821 --> 01:31:26.869
figures out how to run them.  
The nice thing about this is if 

01:31:26.870 --> 01:31:29.932
a server crashes, it will figure
out that server crashed and run 

01:31:29.933 --> 01:31:31.967
them somewhere else.  If a 
application crashes, it will 

01:31:32.379 --> 01:31:36.266
figure that out.  If you want to
scale it up, go from two copies 

01:31:36.267 --> 01:31:38.747
to four copies.  Say make it 
four and it will spring up two 

01:31:38.748 --> 01:31:43.874
more.  Go down to one because 
you want to save money, say hey,

01:31:43.875 --> 01:31:45.875
make one and it will remove 
three.

01:31:48.355 --> 01:31:50.428
This is like a declarative 
syntax that makes it really easy

01:31:50.429 --> 01:31:54.557
to manage these containers 
running on your cluster.  Mew 

01:31:54.558 --> 01:31:56.558
might have thousands running.

01:31:58.324 --> 01:31:59.333
Doing it manually is impossible.
How many heard Kubernetes and 

01:31:59.334 --> 01:32:02.431
keep your hands up if you used 
it before.  About half.

01:32:02.842 --> 01:32:06.935
Cool.  But that is the starting 
point.  Now you have these 

01:32:06.936 --> 01:32:08.936
containers running.

01:32:09.984 --> 01:32:11.984
You have to manage the services 

01:32:13.258 --> 01:32:14.698
because you have container A 
talking to container B and C and

01:32:14.699 --> 01:32:17.558
D.  How do you manage that set 
of points going between each 

01:32:17.559 --> 01:32:22.057
other?  How do you set rules on 
who can talk to who?  Who can 

01:32:22.058 --> 01:32:26.017
talk to what?  How many tries 
should you have?  How much 

01:32:26.018 --> 01:32:27.866
network traffic should you send?
It becomes really complicated 

01:32:27.867 --> 01:32:32.862
and that is where Istio comes 
into play.  It's a service mesh 

01:32:32.863 --> 01:32:37.546
which at the end of the  day, it
means that it manages your 

01:32:37.547 --> 01:32:39.575
services and the connections 
that they make between 

01:32:39.576 --> 01:32:41.576
themselves.

01:32:43.886 --> 01:32:46.729
So if you look at it, you take 
orchestration and we go to 

01:32:46.730 --> 01:32:49.580
management and communication.  
So you want to manage how these 

01:32:50.612 --> 01:32:53.464
services interact with each 
other because that is what 

01:32:53.465 --> 01:32:55.525
really causes microservices to 
be so useful, is the 

01:32:56.764 --> 01:32:58.810
communication between each 
other.  You can reuse one 

01:32:58.811 --> 01:33:03.084
service that can talk to three 
different ones with the same 

01:33:03.085 --> 01:33:05.102
information and mix-and-match 
and do all of these really 

01:33:05.103 --> 01:33:08.370
powerful things but it becomes 
hard to really understand what 

01:33:08.371 --> 01:33:10.623
is happening and Istio makes it 
a lot easier to understand what 

01:33:10.624 --> 01:33:12.624
is 

01:33:13.709 --> 01:33:14.340
happening and control what is 
happening.

01:33:14.341 --> 01:33:18.049
All right.  So that's enough of 
me  talking about random things.

01:33:21.115 --> 01:33:23.344
Let's move to a demo.  If we can
go to that screen, thank you 

01:33:23.758 --> 01:33:25.758
very much.

01:33:27.475 --> 01:33:29.706
And I can't see anything.  So 
what we are going to do first --

01:33:29.707 --> 01:33:31.707
go 

01:33:32.955 --> 01:33:34.955
back to the slides real quick.

01:33:37.046 --> 01:33:39.046
Let me tell you what we are 
going to do.

01:33:39.069 --> 01:33:41.069
What we are going to do is walk 
through 

01:33:42.338 --> 01:33:43.968
the end-to-end story of picking 
an App and making it into a 

01:33:43.969 --> 01:33:49.512
microservice.  So we will take 
an App, put it into a container,

01:33:49.513 --> 01:33:51.513
run the container locally, store
the container on the Cloud and 

01:33:54.002 --> 01:33:55.258
then we'll create a Kubernetes 
cluster and run our App on that 

01:33:55.259 --> 01:33:58.131
cluster and scale it out.  And 
then we will do something more 

01:33:58.132 --> 01:34:00.359
interesting.  We will run 
multiple Apps that work 

01:34:00.562 --> 01:34:05.545
together.  True microservices 
pattern, and then monitor and 

01:34:05.546 --> 01:34:07.546
manage them with Istio.  
Awesome.

01:34:09.230 --> 01:34:11.230
Let's move back to the demo.  
Cool.

01:34:13.528 --> 01:34:15.528
So here I'm using Google Cloud 
Shell.

01:34:18.838 --> 01:34:20.275
It's a free VM in the Cloud that
let's you do your development 

01:34:20.276 --> 01:34:22.573
work.  I'm on a Chrome book 
right now.

01:34:25.638 --> 01:34:26.709
If it crashes, we will be like 
jumping jacks until it comes 

01:34:26.710 --> 01:34:28.966
back or something.  I don't 
know.  It happened before.

01:34:32.418 --> 01:34:33.865
So, basically here I have some 
code.  It's a little NodeJS 

01:34:33.866 --> 01:34:35.866
application.

01:34:36.936 --> 01:34:38.556
If you don't know Java script, 
that is fine.  It's a simple  

01:34:38.557 --> 01:34:40.557
App.

01:34:42.416 --> 01:34:45.071
Basically it is a web server 
that lift tones slash and it 

01:34:45.072 --> 01:34:47.072
will basically ping a 
downstream.

01:34:50.030 --> 01:34:52.257
So in this case, it will ping 
here and it will make that 

01:34:52.258 --> 01:34:54.258
response and then send it to us.

01:34:58.417 --> 01:35:00.417
So, let's run this locally right
now.

01:35:22.892 --> 01:35:24.892
So if I go NPM start

01:35:28.280 --> 01:35:30.280
, let's see what happens.  Cool.

01:35:39.804 --> 01:35:41.804
So it's listening on port 3000. 
So I will

01:35:46.946 --> 01:35:46.992
so on Cloud Shell we can do a 
web preview.  So it looks like 

01:35:46.993 --> 01:35:49.017
we are running a local machine.

01:35:52.742 --> 01:35:54.179
You can see we go here and print
out our current test name and we

01:35:54.180 --> 01:35:56.428
are seeing the current time.  If
I refresh this, the time will 

01:35:57.459 --> 01:35:59.740
change, right?  Cool.  So now 
let's take this and put it into 

01:36:03.434 --> 01:36:05.677
a Docker container.
So to make a Docker container, 

01:36:05.678 --> 01:36:10.779
basically what we do is make 
something called a Docker file. 

01:36:10.780 --> 01:36:13.028
So Docker file is a set of 
instructions that creates this 

01:36:13.029 --> 01:36:15.029
end pointed.

01:36:16.697 --> 01:36:18.697
Almost think of it like a bash 
script it's what it is.

01:36:21.397 --> 01:36:24.711
Here we start with node 8 
Alpine.  Abyss image.  It give 

01:36:24.712 --> 01:36:26.712
us node stuff out of the bo box 
and don't have to worry about 

01:36:29.638 --> 01:36:31.898
installing NodeJS and then we 
copy in our  dependency and then

01:36:31.899 --> 01:36:33.899
run.

01:36:36.033 --> 01:36:37.673
Copy in our index code and 
expose some ports and run MPM 

01:36:37.674 --> 01:36:41.338
start.  Once you run Docker 
build, it will create a Docker 

01:36:41.339 --> 01:36:44.669
container.  So it let's build 
and run that container.

01:36:49.065 --> 01:36:51.720
For the sake of time I already 
built it.

01:37:01.960 --> 01:37:03.960
Here when I run that container, 
once I built it -- nope.

01:37:07.719 --> 01:37:09.719
I need to build it.

01:37:11.424 --> 01:37:14.468
So it's just not found.  So this
might take a little bit of time.

01:37:17.112 --> 01:37:20.000
And while we are building this, 
let's switch to going and 

01:37:20.001 --> 01:37:22.001
building our Kubernetes Cluster.

01:37:24.389 --> 01:37:26.389
So here in our Kubernetes -- if 
I go 

01:37:28.454 --> 01:37:30.933
to Google Kubernetes engine, 
Google Kubernetes engine is 

01:37:30.934 --> 01:37:32.934
Google's managed Kubernetes 
offering.

01:37:34.650 --> 01:37:36.895
So it is probably the easiest 
way to create a  

01:37:36.896 --> 01:37:39.763
production-ready Kubernetes 
Cluster.  Just click create 

01:37:39.764 --> 01:37:42.677
cluster and you get a bunch of 
ones on what you can do to 

01:37:43.532 --> 01:37:45.618
create thisust whicher.
Go to name and description and 

01:37:45.619 --> 01:37:50.287
you can make it a zone at or 
regional cluster and this is a 

01:37:50.288 --> 01:37:52.520
cool feature where you have 
multiple masters so it is highly

01:37:52.919 --> 01:37:56.615
available.  So if a zone goes 
down, your cluster still will be

01:37:56.616 --> 01:37:58.616
up and running.

01:38:00.280 --> 01:38:02.728
You can choose the version of 
Kubernetes you want, the size of

01:38:02.729 --> 01:38:07.247
the cluster, and then a bunch of
not negative 21 -- let's not do 

01:38:07.248 --> 01:38:09.248
that.  You can do a lot of other
cool 

01:38:12.142 --> 01:38:14.803
features that Google Kubernetes 
engine gives you out-of-the-box 

01:38:14.804 --> 01:38:17.250
like automatically upgrading 
your nosed and repairing them if

01:38:17.251 --> 01:38:22.150
they get broken.   Logging 
monitoring, and a lot more too. 

01:38:22.151 --> 01:38:24.382
For example, auto-scaling.  You 
can turn auto-scaling on which 

01:38:28.316 --> 01:38:30.750
means if you have more 
containers that can fit in your 

01:38:30.751 --> 01:38:34.194
cluster, Google Kubernetes 
engine will automatically scale 

01:38:34.195 --> 01:38:36.848
it up to create that space and 
even better, if you have less 

01:38:37.659 --> 01:38:40.365
containers, will scale it down 
to save you money, which is 

01:38:40.366 --> 01:38:44.729
really cool.
So a lot of that cool stuff.  

01:38:44.730 --> 01:38:46.950
And then all you have to do is 
click, create, and it will 

01:38:46.951 --> 01:38:50.041
create thatust whicher.  So I'll
click cancer.  It's like a 

01:38:50.042 --> 01:38:52.082
cooking show.  We have one ready
in the oven.

01:38:56.167 --> 01:38:58.167
This is still going.

01:39:00.881 --> 01:39:02.881
That's okay.

01:39:05.588 --> 01:39:06.806
What we'll do instead because I 
have already built this and 

01:39:06.807 --> 01:39:08.807
pushed it.  So we will do the 
opposite of what I 

01:39:14.140 --> 01:39:16.140
said and we will pull it down.

01:39:33.975 --> 01:39:35.975
So I cheated but that's okay.

01:39:38.427 --> 01:39:40.427
So let's run that container 
locally.

01:39:41.567 --> 01:39:43.645
So what we are going to do with 
Docker is say, Docker run, and 

01:39:43.646 --> 01:39:46.499
then open up that port 3000.  
And so if you look or go back 

01:39:46.500 --> 01:39:50.568
here, you can see that it is 
basically the exact same thing. 

01:39:50.569 --> 01:39:53.207
Except now it is running in 
Docker.  And so the really nice 

01:39:53.208 --> 01:39:57.277
thing is we didn't have to 
change code.  Just put it into 

01:39:57.278 --> 01:39:59.278
the Docker container and we are 
good to go, right?  Cool.

01:40:02.375 --> 01:40:04.004
So, the next step is actually 
pushing it to a container 

01:40:04.005 --> 01:40:07.501
registry.  The reason why we 
have to do this is because we 

01:40:07.502 --> 01:40:10.567
can't just run containers 
running on our local machine.  

01:40:10.568 --> 01:40:12.191
We have to push them to a secure
location so we can run them on 

01:40:12.192 --> 01:40:16.933
our cluster.  Google Container 
registry is probably the best 

01:40:16.934 --> 01:40:19.183
place to put them 23 you're 
running Kubernetes engine.

01:40:23.784 --> 01:40:25.909
You get automatic 
authentification and a few other

01:40:25.910 --> 01:40:27.910
features we will look at in a 
second.  Let's push it up.

01:40:31.231 --> 01:40:34.642
That's not how you spell, make. 
I love using make.  It makes 

01:40:34.643 --> 01:40:39.627
demos super easy.  So what we 
are going to do is run Docker 

01:40:39.628 --> 01:40:41.332
push and -- can people read 
that?  Or should I make it 

01:40:41.333 --> 01:40:43.333
bigger?  All right.  People can 
read it.

01:40:46.677 --> 01:40:50.333
So Docker push and then give the
name of the container.  So what 

01:40:50.334 --> 01:40:52.334
will happen is it will go to 

01:40:53.342 --> 01:40:55.342
Google Container

01:40:56.554 --> 01:41:01.893
registry.  And so here in my 
Istio test container, you can 

01:41:01.894 --> 01:41:07.176
see that we have the newest one 
pushed up right now.  And it is 

01:41:07.177 --> 01:41:09.177
tagged as 1.0.

01:41:10.860 --> 01:41:12.279
If I enabled it, one cool thing 
it can do is vulnerability 

01:41:12.280 --> 01:41:14.280
scanning.

01:41:15.351 --> 01:41:17.822
We can scan your containers for 
known vulnerabilities 

01:41:17.823 --> 01:41:20.268
automatically for any 
Alpine-based images.  That's 

01:41:20.269 --> 01:41:22.321
cool especially if you have 
older containers if you haven't 

01:41:22.322 --> 01:41:25.427
updated in a while, go back and 
look and you'll have tons of 

01:41:25.428 --> 01:41:30.408
vulnerabilities.  So it's a good
idea to check this out.  It's in

01:41:30.409 --> 01:41:31.849
the Beta right now but it will 
find a Burch of stuff wrong with

01:41:31.850 --> 01:41:35.916
your things and tell you how to 
fix them and then you just go 

01:41:35.917 --> 01:41:38.971
and update your containers and 
you are good to go.

01:41:42.380 --> 01:41:44.831
So it's a good thing running 
older containers.  Now we have 

01:41:44.832 --> 01:41:48.100
this pushed up.  We can start to
deploy it to our Kubernetes 

01:41:48.101 --> 01:41:54.824
Cluster.  Like I said before, we
already have a cluster created. 

01:41:54.825 --> 01:41:56.825
Let's go back there.

01:42:00.112 --> 01:42:03.012
Now basically to connect, we run
this command.  Let's run it.

01:42:10.993 --> 01:42:12.993
Great.

01:42:15.101 --> 01:42:17.101
So now we can say, cube  CTL, a 

01:42:18.341 --> 01:42:19.587
Kubernetes command line tool, 
get nodes.  Just to make sure 

01:42:19.588 --> 01:42:21.588
everything is, working.

01:42:30.510 --> 01:42:32.510
Is everything working?  A goody 
request.  There it is.

01:42:36.823 --> 01:42:38.823
We have a four-node Kubernetes 

01:42:39.896 --> 01:42:43.158
Cluster, running Version 1.9.7. 
So now we can start running the 

01:42:43.159 --> 01:42:45.418
same contain they're we ran 
locally.

01:42:53.170 --> 01:42:54.829
So, what we are going to do is 
do cube CTL run demo and then 

01:42:54.830 --> 01:42:59.616
give it the name of that image. 
And demo will be the name of the

01:43:00.421 --> 01:43:02.421
deployment that we are going 
toet cra.

01:43:07.384 --> 01:43:09.031
So if I say cube  CTL get 
deployment, and then give that 

01:43:09.032 --> 01:43:11.522
name space.  It's just for this 
demo's sake.

01:43:14.791 --> 01:43:16.791
You don't need it in real life.

01:43:22.137 --> 01:43:24.137
So you can see that we have our 
demo 

01:43:28.263 --> 01:43:33.574
deployment created and if you 
say, get pods, so pods are 

01:43:33.575 --> 01:43:35.575
basically the containers in 
Kubernetes.

01:43:37.751 --> 01:43:39.599
You can see that we have our 
container created.  It's ready 

01:43:39.600 --> 01:43:43.002
and running.  But now that it is
running, you have to be able to 

01:43:43.003 --> 01:43:48.131
access it, right?  So this is 
where it gets more complicated. 

01:43:48.132 --> 01:43:49.962
Where in the old world with 
Docker, you access it directly 

01:43:49.963 --> 01:43:53.662
because it's running on your 
local machine.  But in the 

01:43:53.663 --> 01:43:56.129
Kubernetes world it's running on
one of the four nodes and we 

01:43:56.733 --> 01:44:01.440
don't care which one.  We want a
static endpoint to route traffic

01:44:01.441 --> 01:44:03.441
and access that node, right?

01:44:06.958 --> 01:44:08.958
So, what we are going to do is 
create a service.

01:44:15.645 --> 01:44:17.150
And now I forgot what my make 
command is.  That's okay.  I'll 

01:44:17.151 --> 01:44:23.770
look.  It's like a cheat sheet. 
Let's see.  Expose.  There it 

01:44:23.771 --> 01:44:25.771
is.  Cool.

01:44:27.927 --> 01:44:30.339
So what we'll do here is we'll 
run cube CTL expose and then 

01:44:30.340 --> 01:44:35.678
we'll give it the target port of
3000 which is where our App is 

01:44:35.679 --> 01:44:38.310
listening, and then run it on 
port 80, that's the normal HTP 

01:44:38.311 --> 01:44:40.368
port and we'll open a type load 
balancer and give 

01:44:43.819 --> 01:44:46.074
us a public IP address using 
Google Cloud load balancer.

01:44:57.295 --> 01:44:59.294
Now, we can say, get service. 
Most people here are familiar 

01:44:59.295 --> 01:45:01.295
with  Kubernetes.

01:45:02.297 --> 01:45:03.313
If you're not familiar, talk to 
me.  I know I'm going quickly, 

01:45:03.314 --> 01:45:05.329
but there is more exciting 
things to happen soon.  So we 

01:45:05.330 --> 01:45:10.026
want to get to them.  So the 
external IP address is pending. 

01:45:10.027 --> 01:45:12.027
Let's run a watch on that.  And 
it's done the moment I try 

01:45:14.116 --> 01:45:16.116
anything complicated, it just 
finishes.  It  knows.  Cool.

01:45:19.757 --> 01:45:21.757
Let's go to that URL.

01:45:28.027 --> 01:45:30.027
All right.

01:45:31.090 --> 01:45:33.090
We'll just do this.

01:45:34.140 --> 01:45:36.140
And if we go here, you can see 
the 

01:45:38.001 --> 01:45:40.245
exact same App running on our 
cluster.  So now we have it 

01:45:40.246 --> 01:45:42.860
running on our public IP 
address.  If you go there on 

01:45:42.861 --> 01:45:47.109
your phone or laptop, it will 
work.  And what we can do, let's

01:45:47.110 --> 01:45:49.760
say all you go on your phone to 
this IP address, 

01:45:52.805 --> 01:45:54.805
we'll probably overwomen this 
App.

01:45:56.960 --> 01:45:58.391
So in Kubernetes, we can scale 
it out with the scale command.  

01:45:58.392 --> 01:46:00.392
So let's do that.

01:46:05.601 --> 01:46:07.601
So let's say, cube CTL scale 
deployment demo, the name of the

01:46:15.180 --> 01:46:17.180
deployment, and then replicas 
equals 5.

01:46:18.456 --> 01:46:20.456
And again, that name space.

01:46:24.615 --> 01:46:26.615
So it will say deployment demo 
scaled.

01:46:29.154 --> 01:46:30.567
So now if we go back to our get 
pods, you'll notice we have five

01:46:30.568 --> 01:46:33.479
of them running in our cluster, 
which is really cool.

01:46:37.333 --> 01:46:39.333
So, and then if we say, get 
deployments, 

01:46:40.786 --> 01:46:41.785
you can see it also says that we
have five desired five current 

01:46:41.786 --> 01:46:45.936
and five up-to-date and five 
available.  So now if we go back

01:46:45.937 --> 01:46:47.937
to the IP address, it still 
works.

01:46:51.692 --> 01:46:52.906
The only difference is it is now
round Robinning traffic between 

01:46:52.907 --> 01:46:58.633
all five instances.  So you have
more scalability and a lot more 

01:46:58.634 --> 01:47:01.526
robustness and we are running 
five copies even though we have 

01:47:01.527 --> 01:47:03.527
four VNs 

01:47:05.198 --> 01:47:07.198
because we are able to run 
multiple 

01:47:08.897 --> 01:47:10.897
copies of on a single VN so we 
get more 

01:47:13.603 --> 01:47:17.482
utilization out of our machines.
So, let's clean that up.  We no 

01:47:17.483 --> 01:47:19.916
longer need that demo.  Let's 
start  looking at Istio.

01:47:24.837 --> 01:47:26.689
So now we had a single service 
running useless in the long 

01:47:26.690 --> 01:47:29.958
scheme of things.  No one just 
runs one thing.  You don't need 

01:47:29.959 --> 01:47:31.959
Kubernetes to do that.  You want
to run multiple applications 

01:47:33.236 --> 01:47:35.236
together and make sure they all 
work together well.

01:47:41.272 --> 01:47:43.272
So what we are going to do is

01:47:46.867 --> 01:47:47.930
run this same application three 
times and then chain it 

01:47:47.931 --> 01:47:51.791
together.  So you might have 
noticed in our code -- I'm going

01:47:51.792 --> 01:47:54.059
to go back too it for a  second.
Basically, I can set whatever I 

01:47:54.060 --> 01:47:57.559
want as the upstream URI using 
an environment variable.

01:48:00.045 --> 01:48:02.851
So what I can do is actually tie
multiple of these together using

01:48:02.852 --> 01:48:04.852
one to 

01:48:05.926 --> 01:48:08.172
talk to the other and talk to 
the other and to tie them 

01:48:08.173 --> 01:48:10.173
together and then will all 
concat mate their responses and 

01:48:11.922 --> 01:48:13.975
finally show at the end user.  
So that's a really cool thing.

01:48:17.042 --> 01:48:18.457
In Kubernetes we can dynamically
set these variables when 

01:48:18.458 --> 01:48:21.120
deploying.  So let's look at 
that.

01:48:24.258 --> 01:48:28.163
So normally in Kubernetes we 
would create aiamil file.  I'm 

01:48:28.164 --> 01:48:30.814
going to make this bigger.  In 
this file we will define our 

01:48:31.025 --> 01:48:33.120
deployments.
So I'm going to make four  

01:48:33.121 --> 01:48:35.121
deployments.

01:48:38.033 --> 01:48:38.857
So the first one will be called 
front end prod.  So front end 

01:48:38.858 --> 01:48:40.858
production service.

01:48:42.536 --> 01:48:43.761
I'm going to get the service 
name, front end prod and the 

01:48:43.762 --> 01:48:47.858
upstream URI, I'm going to call 
it, middleware.  So Kubernetes 

01:48:47.859 --> 01:48:53.379
will automatically do DNS-based 
service discovery so I can find 

01:48:53.380 --> 01:48:55.429
my middleware application by 
just pointing at middleware.  

01:48:55.430 --> 01:48:58.078
This is really cool.  I don't 
need IP addresses or anything 

01:48:58.281 --> 01:49:03.163
like that.  You can see here 
giving it  labels.  App front 

01:49:03.164 --> 01:49:05.798
end, version prod, and then the 
same container name that we used

01:49:06.002 --> 01:49:08.686
before.
And then in our middleware, 

01:49:08.687 --> 01:49:10.687
everything 

01:49:11.956 --> 01:49:12.763
looks the same except it is App 
middleware version prod, and 

01:49:12.764 --> 01:49:17.492
then the service name is 
different and the upstream URI 

01:49:17.493 --> 01:49:22.224
is now back end.  And then we 
also have a canarr's version of 

01:49:22.225 --> 01:49:25.128
our middleware so like a test 
version that is working on.  But

01:49:25.129 --> 01:49:27.129
we want to see how it works in 
the real world.

01:49:29.218 --> 01:49:30.641
So again, this also points to 
back end and then our back end 

01:49:30.642 --> 01:49:33.320
which points to time.JSON test.
com.

01:49:39.269 --> 01:49:41.269
So, at this point, we can deploy
it into 

01:49:45.052 --> 01:49:47.052
our cluster.

01:49:50.582 --> 01:49:51.385
So now we will create these 
deployments but we also need to 

01:49:51.386 --> 01:49:54.648
create the corresponding 
services so they can find each 

01:49:54.649 --> 01:49:58.719
other.  Let's take a look at 
that.  So here in our  services.

01:49:59.932 --> 01:50:01.932
iamil, it is straightforward.

01:50:03.818 --> 01:50:05.818
We have a front end, middleware 
and back end service.

01:50:07.358 --> 01:50:10.242
They all open up port 3000 to 
port 80, which makes sense.  The

01:50:10.243 --> 01:50:12.337
only difference here is the 
front end service is a type load

01:50:12.338 --> 01:50:14.338
balancer so 

01:50:15.410 --> 01:50:17.410
that we get that public IP 
address.  Cool.

01:50:18.717 --> 01:50:20.765
So let's go to that public IP 
address and see what happens.

01:50:30.748 --> 01:50:36.854
Still pending.  That's fine.  
Let's do it one more time.  

01:50:36.855 --> 01:50:38.855
There we go.

01:50:45.067 --> 01:50:49.180
So interesting.  A little bit 
different than before.  Our 

01:50:49.181 --> 01:50:51.030
front end prod went to our 
middleware and then the 

01:50:51.031 --> 01:50:53.908
middleware went to our back end 
and the back end went to time.

01:50:55.331 --> 01:50:57.331
JSON  test.com.

01:50:59.414 --> 01:51:01.641
But, we are getting a 404 which 
is wierd because I mean if I go 

01:51:01.642 --> 01:51:04.532
to this website, clearly at the,
who.  We are seeing it working 

01:51:04.533 --> 01:51:08.794
all the time before.  It's 
working.  So why are we getting 

01:51:08.795 --> 01:51:14.923
a  404?  And so now, we go into 
the world of Istio.  So I have 

01:51:14.924 --> 01:51:19.453
Istio already running in this 
cluster.  And what Istio will do

01:51:19.454 --> 01:51:22.366
is really lockdown and help you 
manage your microservices.

01:51:24.561 --> 01:51:29.778
So it knows that time.JSON  
test.com is a external service 

01:51:29.779 --> 01:51:31.823
and by default, it will block 
all traffic going out of your 

01:51:31.824 --> 01:51:35.870
cluster.  And this is really 
good for security reasons.  You 

01:51:35.871 --> 01:51:37.905
don't want your App talking to 
random endpoints on the 

01:51:37.906 --> 01:51:42.226
internet.  You want as the 
administrator to be able to 

01:51:42.227 --> 01:51:45.098
lockdown and only talk to 
trusted endpoints.  So by 

01:51:45.099 --> 01:51:48.237
default everything is blocked 
going out of your cluster.  So 

01:51:48.238 --> 01:51:50.238
how do you unblock it?

01:51:51.525 --> 01:51:52.740
In Istio, we have something 
called, egress rules.

01:51:52.741 --> 01:51:56.650
It's a simple thing.  You can 
see it is only like a few lines 

01:51:56.651 --> 01:52:00.724
ofiamil.  And so here we will 
say allow traffic to time.JSON 

01:52:00.725 --> 01:52:02.725
test.

01:52:06.257 --> 01:52:08.257
com so both port 80 for HTP and 
for 443 for HTPS.

01:52:09.970 --> 01:52:11.970
Let's deploy that rule.

01:52:18.739 --> 01:52:20.739
And for I feltio we used the 
Istio control command line tool.

01:52:22.833 --> 01:52:24.833
It's just like the cube control 
or cube CTL.

01:52:26.163 --> 01:52:28.167
Istio CTL, I don't know how to 
pronounce it.  Your guess is as 

01:52:28.168 --> 01:52:33.495
good as mine.  It's similar to 
the cube control tool.  And so 

01:52:33.496 --> 01:52:35.496
now we have created that and we 

01:52:36.561 --> 01:52:37.996
can go back to our website and 
hit refresh and you can see it 

01:52:37.997 --> 01:52:39.997
is all  working perfectly fine.

01:52:43.935 --> 01:52:45.935
So we white listed traffic to 
time.JSON test.com.

01:52:47.014 --> 01:52:49.014
You might notice another thing 
going on.

01:52:50.545 --> 01:52:54.854
If I hit refresh, just look at 
this line right here.  Sometimes

01:52:54.855 --> 01:52:58.768
it says canary and sometimes it 
says, prod.  Right?  And so the 

01:52:58.769 --> 01:53:00.769
reason why this is 

01:53:01.774 --> 01:53:04.294
happening is by default, 
Kubernetes will use round Robin 

01:53:04.295 --> 01:53:06.331
load-balancing for services.  So
our middleware service is 

01:53:06.332 --> 01:53:08.332
pointing 

01:53:10.240 --> 01:53:13.904
to any deployment or any pod 
that has a tag App middleware.  

01:53:13.905 --> 01:53:17.375
But both the canary and the prod
versions both have that tag.  So

01:53:17.376 --> 01:53:19.376
Kubernetes will  blindly send 
traffic to both.

01:53:22.679 --> 01:53:24.716
In fact, if you had three 
versions of canarr's and two 

01:53:24.717 --> 01:53:26.717
versions of your prod, 

01:53:28.620 --> 01:53:30.040
this traffic would go to canary 
3-two because it's round 

01:53:30.041 --> 01:53:34.575
Robinning.  With Istio we can 
make traffic go exactly where we

01:53:34.576 --> 01:53:36.576
want.

01:53:39.075 --> 01:53:41.075
Let's do that real fast.

01:53:51.727 --> 01:53:53.727
We will set a route rule and 
basically 

01:53:55.620 --> 01:53:57.657
send whenever the destination is
middleware, always send it to 

01:53:57.658 --> 01:54:02.393
prod.  And then whenever a 
destination is front end send to

01:54:02.394 --> 01:54:04.059
prod and back end send to prod. 
Super simple things but what 

01:54:04.060 --> 01:54:07.945
happens is now hit refresh and 
it will always go to our 

01:54:07.946 --> 01:54:10.868
production service.  So as an 
end user, I never have to worry 

01:54:10.869 --> 01:54:15.966
about it.  I will always hit 
production and won't hit some 

01:54:15.967 --> 01:54:18.427
random test build running in my 
cluster, which is really nice.

01:54:18.428 --> 01:54:22.156
But this is great.  This App is 
like bulletproof.  It's soatism 

01:54:22.157 --> 01:54:24.157
it never breaks.

01:54:25.646 --> 01:54:27.646
But in the real world, we have 
our 

01:54:28.746 --> 01:54:30.746
code is not perfect.  I don't 
write perfect code and neither 

01:54:30.765 --> 01:54:35.488
do you.  In the real world 
things break all the time.  So, 

01:54:35.489 --> 01:54:37.489
to simulate that, I have this 

01:54:40.654 --> 01:54:42.892
really cool function called, 
create issues.  And what create 

01:54:42.893 --> 01:54:44.893
issues will do is, it will look 
at a header called, fail, and 

01:54:48.191 --> 01:54:50.223
then if that will generate a 
number and if it is less than 

01:54:50.224 --> 01:54:52.224
that, it will just 

01:54:53.765 --> 01:54:55.765
return a 500.  Yes.  I didn't 
know how else to make things 

01:54:56.002 --> 01:54:58.873
break on purpose.  It's hard to 
make things break on purpose.

01:55:02.180 --> 01:55:03.829
So this is a program called, 
postman and if you never used it

01:55:03.830 --> 01:55:05.830
before, it is awesome.

01:55:09.197 --> 01:55:09.994
It let's you said headers in 
JSON and things like that 

01:55:09.995 --> 01:55:12.246
automatically.  Let's do a 
normal request right now.

01:55:14.695 --> 01:55:16.695
It works the same Wayz as the 
request 

01:55:18.131 --> 01:55:20.131
from the web browser but now we 
can send 

01:55:21.235 --> 01:55:23.893
headers from the tool and let's 
set a value of 0.3.  So 30% 

01:55:23.894 --> 01:55:27.658
chance of failure.  Let's see 
what happens.  Boom.  Back end 

01:55:27.659 --> 01:55:29.659
failed.

01:55:30.712 --> 01:55:33.153
Boom, middleware failed.  
Everything worked.  Back end 

01:55:33.154 --> 01:55:35.154
failed again.

01:55:36.853 --> 01:55:37.892
Everything worked again.  
Middleware failed.  Everything 

01:55:37.893 --> 01:55:44.042
failed.  Right?  And you might 
notice that the problem is worse

01:55:44.043 --> 01:55:46.043
than we think because in our 

01:55:47.704 --> 01:55:50.779
code what we are doing is we are
propagating these headers.  

01:55:50.780 --> 01:55:52.780
These are for tracing.  We'll 
take a look at that in a second.

01:55:54.244 --> 01:55:56.244
We are forwarding this fail 
header along each request.

01:55:57.946 --> 01:56:00.595
So it's not just a 30% chance, 
it's a 30% times 30% times 30% 

01:56:00.596 --> 01:56:05.292
chance of failure.  And that is 
where all of this cascading 

01:56:05.293 --> 01:56:07.347
failures coming into play with 
microservices because one 

01:56:07.348 --> 01:56:09.348
failure truggers tons of 
failures downstream.

01:56:11.680 --> 01:56:13.680
So let's take a look at how 
Istio can help with this.

01:56:17.161 --> 01:56:19.033
So let's do our second routing 
rules.  Let's do something 

01:56:19.034 --> 01:56:22.294
called, a simple retry policy.  
So let's have Istio 

01:56:22.295 --> 01:56:27.839
automatically retry the request 
three times before giving up.  

01:56:27.840 --> 01:56:31.752
And again, we don't have to 
change our code at all.  Istio 

01:56:31.753 --> 01:56:35.393
is transparently proxying all of
these network calls.  Proxying 

01:56:35.394 --> 01:56:37.477
is a strong word.   
Transparently managing all these

01:56:38.706 --> 01:56:41.571
network calls.  So what happens 
is, our code doesn't 

01:56:44.830 --> 01:56:47.723
have to know it all that Istio 
is trying it three times.  It 

01:56:47.724 --> 01:56:50.159
just tries it once and Istio 
manages all the backoff and 

01:56:50.160 --> 01:56:52.401
retries and all that stuff for 
you automatically.  So you don't

01:56:52.402 --> 01:56:55.745
have to.  So now if we go back 
to postman, let's see what 

01:56:55.746 --> 01:56:59.670
happens.  Boom.  Working.  
Working.  Working.  Still some 

01:56:59.671 --> 01:57:04.832
issues.  Working.  Working.  
Working.  Working.  Much better.

01:57:06.899 --> 01:57:09.332
Obviously it didn't fix the 
issue.  In fact, if I increased 

01:57:09.333 --> 01:57:11.333
this to something like version 
0.

01:57:16.465 --> 01:57:18.349
5, you can see it's going to 
fail a lot more, or not.  It 

01:57:18.350 --> 01:57:20.350
might not fail.  It might mask 
that.  You know what?  0.

01:57:23.143 --> 01:57:28.069
0.9.  See.  Failure.  And you 
might notice it is failing a lot

01:57:28.070 --> 01:57:32.030
at the front too.  Right?
So let's take a look at two 

01:57:32.031 --> 01:57:34.031
things.

01:57:39.742 --> 01:57:41.999
One, it's able to mask your 
failures but you don't want it 

01:57:42.000 --> 01:57:44.000
to always do that, right?  Just 
because things are working 

01:57:46.310 --> 01:57:48.790
doesn't mean things are good.  
You want to be able to detect 

01:57:48.791 --> 01:57:54.769
that you have errors and be able
to detect that and fix it.  So, 

01:57:54.770 --> 01:57:57.016
Istio actually gives you a lot 
of tooling out of the bo box to 

01:57:57.017 --> 01:57:59.531
manage your systems.  So first 
thing I want to show you is 

01:58:01.375 --> 01:58:03.375
something called service graph.

01:58:05.267 --> 01:58:06.688
So because Istio is sitting and 
interSeptemberring the network 

01:58:06.689 --> 01:58:09.555
calls it is able to create a 
full picture of your services 

01:58:09.556 --> 01:58:11.556
for you.  So you can see here we
have a front 

01:58:15.273 --> 01:58:16.490
end talking to a prod in 
canarr's back end and talking to

01:58:16.491 --> 01:58:18.491
time.JSON test.com.

01:58:24.428 --> 01:58:26.299
We can also start doing things 
automatically getting metrics 

01:58:26.300 --> 01:58:30.570
from our cluster as well.  Wow, 
that looks way too zoomed in.  

01:58:30.571 --> 01:58:34.065
All right.  Let's zoom out a 
little bit.  You can see here 

01:58:34.066 --> 01:58:38.211
once we started adding those 
errors our global success rated 

01:58:38.212 --> 01:58:41.514
just started  crashing to the 
bottom.  And so Istio will 

01:58:41.515 --> 01:58:43.515
automatically find 

01:58:46.456 --> 01:58:48.111
your 500s, 400s, volume, your 
QPS, latency, all this stuff 

01:58:48.112 --> 01:58:50.112
automatically 

01:58:53.005 --> 01:58:54.018
for you and start throwing it on
to Prometheus and other 

01:58:54.019 --> 01:58:56.019
dashboards so you can start 
running metrics and 

01:58:58.097 --> 01:59:00.097
understanding what is going on 
in your services.

01:59:01.147 --> 01:59:03.620
And I didn't have to write any 
code for this.  Istio gives me 

01:59:03.621 --> 01:59:08.565
all these metrics out-of-the-box
for free.  And then finally, we 

01:59:08.566 --> 01:59:10.566
can use something 

01:59:12.062 --> 01:59:13.874
like zip kin or Yager, to do 
tracing.  So our stack over 

01:59:13.875 --> 01:59:17.374
trace, a lot of these tools all 
work.  So let's find some 

01:59:17.375 --> 01:59:19.375
traces.

01:59:21.650 --> 01:59:23.080
So you can see here, we can see 
our front end talks to our 

01:59:23.081 --> 01:59:25.947
middleware and talks to our back
end.  And the back end takes the

01:59:25.948 --> 01:59:29.218
longest amount of time because 
it's talking to our external 

01:59:29.219 --> 01:59:31.219
service, right?

01:59:35.315 --> 01:59:37.315
But even more interesting than 
this

01:59:42.641 --> 01:59:44.641
, you can see here it actually 
has back 

01:59:45.850 --> 01:59:47.850
end 2X and

01:59:51.311 --> 01:59:53.311
back end 2X and middleware 2X.

01:59:54.597 --> 01:59:56.597
I actually candy find one.  
That's okay.

01:59:58.691 --> 02:00:00.517
So you can see all the 
distributed tracing and all I 

02:00:00.518 --> 02:00:02.518
had to do was forward 

02:00:04.202 --> 02:00:06.202
the trace headers along.

02:00:10.782 --> 02:00:12.782
Those so as long as I'm 
forwarding those 

02:00:13.806 --> 02:00:15.094
trace headers, I get distributed
tracing for free out-of-the-box.

02:00:15.095 --> 02:00:15.110
And I have another talk talking 
about open census which can 

02:00:15.111 --> 02:00:17.865
automatically forward these for 
you as well.  So even less work 

02:00:17.866 --> 02:00:25.051
for you as a developer.  Okay.  
Now let's do one final thing.  

02:00:25.052 --> 02:00:27.296
So here you can see when I hit 
refresh, I'm always going to my 

02:00:27.297 --> 02:00:29.297
prod service.

02:00:31.004 --> 02:00:33.288
But as a  tester, I kind of want
to use a canary service and see 

02:00:33.289 --> 02:00:36.981
what happens in this new path.  
And the really nice thing is we 

02:00:36.982 --> 02:00:42.785
can do in production testing 
using  Istio.  Because when we 

02:00:42.786 --> 02:00:46.269
have thousands of services it's 
impossible to launch them all in

02:00:46.270 --> 02:00:49.377
our local machine and test it 
that way.  We want to push our 

02:00:49.378 --> 02:00:52.852
service like our -ue think it is
working so you push it into a 

02:00:52.853 --> 02:00:54.072
production cluster but we don't 
want any production traffic 

02:00:54.073 --> 02:00:56.073
hitting it.

02:00:58.007 --> 02:01:00.007
We just want test traffic 
hitting it.

02:01:01.136 --> 02:01:03.136
We will put up the last and 
final route rule.

02:01:05.401 --> 02:01:06.642
It is going to make a new route 
called the middleware canary 

02:01:06.643 --> 02:01:08.643
route and it will 

02:01:10.347 --> 02:01:11.984
look for a header called, XDEV 
user and whenever it sees the 

02:01:11.985 --> 02:01:16.466
value of super secret, it will 
route it to our canary.  So all 

02:01:16.467 --> 02:01:17.889
normal traffic will go to our 
production service and then the 

02:01:17.890 --> 02:01:22.825
super secret traffic will go to 
our canary service.  Obviously 

02:01:22.826 --> 02:01:25.249
you do something like 
authentication scheme not just 

02:01:25.250 --> 02:01:28.721
the word super secret, because 
you know, security is important.

02:01:32.190 --> 02:01:39.599
So let's take a look at that.
So let's deploy this rule.  And 

02:01:39.600 --> 02:01:42.303
so now if you go here, obviously
it will still go to our 

02:01:42.304 --> 02:01:44.555
production service but if we go 
to postman, and 

02:01:48.848 --> 02:01:50.848
let's remove that fail header 
and let's 

02:01:56.398 --> 02:01:58.398
go to XDEV user

02:01:59.715 --> 02:02:04.404
super -- boom.  No.  Did I spell
it wrong?  Let's see what 

02:02:04.405 --> 02:02:10.932
happened.  What happened?  
Disabled?  There we go.  Thank 

02:02:10.933 --> 02:02:14.044
you.
Middleware canary.

02:02:18.131 --> 02:02:20.374
So we are able to route to a 
specific service in the middle 

02:02:20.375 --> 02:02:22.375
of our stack using headers.

02:02:23.686 --> 02:02:25.686
And that is because we are using
heder propagation.

02:02:26.908 --> 02:02:29.565
Even if we had  friendy,000 -- 
2000 services, and you want to 

02:02:29.566 --> 02:02:31.566
make the 

02:02:33.455 --> 02:02:35.317
middle one, the  900th service a
special thing, by propagating 

02:02:35.318 --> 02:02:37.318
these headers, we 

02:02:38.581 --> 02:02:40.233
can actually use Istio and then 
route to that one even if it's 

02:02:40.234 --> 02:02:44.109
in the middle of our stack.  So 
not just a front end.  We can 

02:02:44.110 --> 02:02:46.110
test anything in the whole 

02:02:48.933 --> 02:02:50.933
stack using Istio and header 
propagation.

02:02:52.399 --> 02:02:54.399
Let's switch back to the slides,
please.

02:02:58.331 --> 02:02:59.560
So we did all this stuff.  Thank
you all so much.  If you want to

02:02:59.561 --> 02:03:01.561
get a deeper dive into 

02:03:03.305 --> 02:03:04.954
Istio, it's basically this topic
with more things focused 

02:03:04.955 --> 02:03:06.955
specifically on 

02:03:10.054 --> 02:03:12.938
Istio, check out my name.slash 
Istio 101.  All this code is 

02:03:12.939 --> 02:03:14.939
open-source on my GitHub.

02:03:18.088 --> 02:03:20.088
If you go to that website, Istio
101, I have a link there.

02:03:23.840 --> 02:03:26.107
Check out Google Kubernetes code
and follow me on Twitter and if 

02:03:26.108 --> 02:03:28.108
you have any 

02:03:29.220 --> 02:03:30.852
questions, please follow me out 
the door.  I'm going to go staff

02:03:30.853 --> 02:03:33.699
the office hours right now so 
come talk to me there.  Or talk 

02:03:33.700 --> 02:03:36.748
to me right outside.  Or find me
in the Sandbox.  I'm happy to 

02:03:36.749 --> 02:03:38.749
answer any questions.

02:03:40.280 --> 02:03:43.388
I know we went quickly today.
And finally, if you have any  

02:03:43.389 --> 02:03:47.255
feedback, you know where to send
it.  5 stars only -- just 

02:03:47.256 --> 02:03:49.898
kidding.  I'll take anything.  
But thank you so much and enjoy 

02:03:49.899 --> 02:03:54.640
the rest of your IO and the 
concert tonight and I'll see you

02:03:54.641 --> 02:03:56.641
out there.
[ Applause ]

02:21:26.231 --> 02:21:28.231
Realtime captioning on this 
screen.

02:26:05.722 --> 02:26:07.722
&gt;&gt; How is everyone doing today?

02:26:10.823 --> 02:26:12.823
My name is assurer sore I'm a 
Product 

02:26:13.913 --> 02:26:15.955
Manager on the Hangouts Chat 
bots framework.  I'm here about 

02:26:15.956 --> 02:26:17.956
Wesley, one of our G 

02:26:23.442 --> 02:26:27.012
Suite deputier advocates and 
choo choo.  So today we are 

02:26:27.013 --> 02:26:31.392
going to talk about how you can 
transform your workplace with 

02:26:31.393 --> 02:26:33.621
the Hangouts Chat bot framework.
And just a quick agenda, I'm 

02:26:33.622 --> 02:26:37.935
going to give background about 
the new Hangouts Chat and the 

02:26:37.936 --> 02:26:39.936
bots user experience in 

02:26:41.231 --> 02:26:43.687
case you never tried the product
before and fass off to wes and 

02:26:43.688 --> 02:26:45.944
Juan to talk about the AP I and 
show you a ton of 

02:26:49.637 --> 02:26:51.637
code samples and demos before I 
wrap it up.

02:26:53.117 --> 02:26:55.975
So quick show of hands, how many
people in the room use Hangouts 

02:26:55.976 --> 02:27:00.921
today and Gmail or on mobile?  
Awesome.  So what you might not 

02:27:00.922 --> 02:27:03.673
know is that millions of 
businesses use Hangouts 

02:27:06.942 --> 02:27:08.942
today for direct messaging or 
light 

02:27:10.202 --> 02:27:12.262
weight group messaging with 
their company.  And what we 

02:27:12.263 --> 02:27:14.744
heard from these companies is 
that they are looking for more 

02:27:16.364 --> 02:27:18.436
persistent place for teams to 
collaborate and communicate.

02:27:20.274 --> 02:27:21.911
This past February we launched 
the new Hangouts Chat T is 

02:27:21.912 --> 02:27:24.149
currently available for G Suite 
customers at no additional 

02:27:24.550 --> 02:27:26.550
charge.

02:27:28.241 --> 02:27:31.163
It's a brand new text stack with
Apps on Mac OS and windows, 

02:27:31.164 --> 02:27:33.164
Android, iOS and web.  It's 
global out of the gate so it 

02:27:35.540 --> 02:27:38.185
works in 28 languages and is 
accessible on all major screen 

02:27:38.186 --> 02:27:41.053
readers, on all major platforms.
And really the backbone of the 

02:27:41.054 --> 02:27:45.760
new Hangouts Chat are rooms, a 
way to center the conversation 

02:27:45.761 --> 02:27:48.805
around a team, a project, an 
event, basically anything you 

02:27:48.806 --> 02:27:51.899
want.  And it's obvious when 
you're working on a project 

02:27:51.900 --> 02:27:56.072
you're going to be talking about
a bunch of different things.  

02:27:56.073 --> 02:27:56.913
I'm sure everyone in the room is
experienced this if you used 

02:27:56.914 --> 02:27:59.567
group messaging before.  You may
be talking about something 

02:28:01.231 --> 02:28:03.498
important, something at work, 
about work, and then all of a 

02:28:03.499 --> 02:28:05.499
sudden, someone 

02:28:06.969 --> 02:28:09.409
in the message is like, hey, 
guys, what do youment for lunch 

02:28:09.410 --> 02:28:13.088
today?  And then work keeps 
going on and that's great but 

02:28:13.089 --> 02:28:15.089
then someone else who 

02:28:16.577 --> 02:28:18.634
is probably hungry says, I want 
Mexican.  So, when this happens,

02:28:18.635 --> 02:28:21.280
it's really hard to just figure 
out what is happening and what 

02:28:21.281 --> 02:28:23.281
is the conversation we should be
focused on.

02:28:24.737 --> 02:28:26.737
So conversations and rooms are  
threaded 

02:28:28.004 --> 02:28:30.004
to prevent this exact problem.

02:28:31.287 --> 02:28:32.971
Threading helps you separate the
every day chitchat from all of 

02:28:32.972 --> 02:28:37.272
the important stuff and not only
that, you can segment the 

02:28:37.273 --> 02:28:38.085
important stuff by different 
threads to keep context around 

02:28:38.086 --> 02:28:43.408
those conversations.  If you use
Google groups for e-mail list or

02:28:43.409 --> 02:28:45.239
identity management at your 
company, you can add the Google 

02:28:45.240 --> 02:28:49.505
group to a room and anyone in 
the room can also join the room.

02:28:49.506 --> 02:28:54.637
Over time, these rooms will 
contain all the things you 

02:28:54.638 --> 02:28:57.716
talked about, all the files you 
shared so everything is ul iffy 

02:28:57.717 --> 02:28:59.754
indexed and searchable and you 
can look for file type, keyword,

02:28:59.755 --> 02:29:01.755
person, 

02:29:03.428 --> 02:29:05.097
look in one room, many rooms, 
basically however you remember 

02:29:05.098 --> 02:29:07.098
what you're looking for.

02:29:08.577 --> 02:29:11.469
Hangouts Chat has deep 
integrations into G Suite so you

02:29:11.470 --> 02:29:13.470
can pick any Docs or Drive file 
from the picker and any time 

02:29:16.141 --> 02:29:18.419
you pace a Drive file or Docs 
file, a link to it, we will 

02:29:18.420 --> 02:29:21.542
render a thumb nail and help you
grant access to everybody in the

02:29:21.543 --> 02:29:25.234
room.  And if you find yourself 
going back-and-forth too much 

02:29:25.235 --> 02:29:29.970
with someone or writing blocks 
and blocks of text, we help you 

02:29:29.971 --> 02:29:32.667
with one click, up the bandwidth
of the conversation by creating 

02:29:32.668 --> 02:29:34.668
a video meeting with our sister 

02:29:36.536 --> 02:29:37.189
product, Hangouts meet.  So 
again in the room can jump in 

02:29:37.190 --> 02:29:40.040
the meeting and you can resolve 
what you wanted to resolve, 

02:29:40.041 --> 02:29:44.382
faster.
So you're no stranger to 

02:29:44.383 --> 02:29:46.647
conversational interfaces.  We 
saw amazing things from the 

02:29:49.122 --> 02:29:50.750
assistant team yesterday at the 
Keynote.  And bots at the 

02:29:50.751 --> 02:29:52.751
workplace, what they are meant 
to do is help you blend 

02:29:54.834 --> 02:29:56.662
conversation and tools to 
accelerate your work and reduce 

02:29:56.663 --> 02:29:59.725
all the context switching that 
happens when you're working with

02:29:59.726 --> 02:30:02.784
a bunch of different tools at 
work.  You can talk to a bot 

02:30:02.785 --> 02:30:06.889
privately and a one-on-one 
direct message or add a bot to a

02:30:06.890 --> 02:30:09.175
room and then anyone in the room
can at mention it to do 

02:30:09.176 --> 02:30:12.086
something.
And while you can take anything 

02:30:12.087 --> 02:30:16.780
and make it a conversational 
interface, you can take a 

02:30:16.781 --> 02:30:18.781
12-page form and make it a 

02:30:20.539 --> 02:30:21.352
conversational interface, we 
think those interfaces shine for

02:30:21.353 --> 02:30:24.006
three main use  cases at the 
workplace.  One is a synchronous

02:30:24.007 --> 02:30:26.038
notification.  So in this use 
case, something happens 

02:30:30.129 --> 02:30:30.532
in a third party App and a 
notification gets plummed into 

02:30:30.533 --> 02:30:34.022
the room where everyone can 
start a conversation about it.  

02:30:34.023 --> 02:30:35.706
Another is one-off actions.  So 
maybe you're talking about 

02:30:35.707 --> 02:30:39.606
someone, about what you need to 
do, and then you say, hey 

02:30:39.607 --> 02:30:42.250
project management bot, create a
task about this item.  And it 

02:30:42.251 --> 02:30:46.189
does that.  And the third is 
querying for information.  So 

02:30:46.190 --> 02:30:47.855
with this use case there is data
obviously in the third party 

02:30:47.856 --> 02:30:51.763
App, and you just want to find 
it.  So you say project 

02:30:51.764 --> 02:30:56.644
management bot, what are Mandy 
tiller's tasks it shows you what

02:30:56.645 --> 02:30:58.645
the tasks are.

02:31:00.144 --> 02:31:01.402
One of our big mantras on hang 
out Chat team is bots are people

02:31:01.403 --> 02:31:04.671
too.  They live alongside people
and there is no heavy 

02:31:04.672 --> 02:31:07.952
installation flow.  Nothing more
to learn.  If you know how to 

02:31:07.953 --> 02:31:09.953
start a direct 

02:31:11.004 --> 02:31:13.004
message with someone, add 
someone to a 

02:31:15.531 --> 02:31:17.531
room, you know how to get 
started with a bot.

02:31:17.774 --> 02:31:20.280
Google launched a few bots of 
their own, one is the meet bot 

02:31:20.281 --> 02:31:22.281
thatue uses natural language 
processing and Machine Learning 

02:31:24.160 --> 02:31:26.802
to schedule meeting and book a 
room for everybody in the room.

02:31:30.060 --> 02:31:30.906
Another is the Google Drive bot 
then nerves you when new files 

02:31:30.907 --> 02:31:36.068
are shared with you, new 
comments are made or when people

02:31:36.069 --> 02:31:38.069
request access toure yo files 
and 

02:31:39.529 --> 02:31:41.172
not only can you see when people
request access but you can grant

02:31:41.173 --> 02:31:43.205
access to the bot itself.  In 
the two months since launching, 

02:31:46.084 --> 02:31:47.549
what we have seen is people 
typically grant access to files 

02:31:47.550 --> 02:31:50.617
with the Google Drive bot eight 
times faster than with e-mail.  

02:31:50.618 --> 02:31:52.618
So think about that.

02:31:53.727 --> 02:31:55.727
You can speed up a common 
workflow for 

02:31:57.812 --> 02:31:59.812
any App that you build by eight 
times.

02:32:01.095 --> 02:32:02.976
We have a number everthird party
bots like trella, to stay 

02:32:02.977 --> 02:32:04.977
informed about your 

02:32:06.669 --> 02:32:10.360
project's progress without 
leaving the chatroom.  Ring 

02:32:10.361 --> 02:32:13.425
central to make video calls for 
your team.  JIRA to get notified

02:32:13.426 --> 02:32:17.978
about changes to issues, tasks, 
and bugs and talk about the 

02:32:17.979 --> 02:32:20.071
changes as they happen; and we 
are excited to aannounce that 

02:32:20.072 --> 02:32:24.823
box is launching a bot on 
Hangouts Chat to help you find 

02:32:24.824 --> 02:32:27.338
recent fights or favorite files 
to open or share without 

02:32:27.339 --> 02:32:32.023
switching context.
We have a number of bots in many

02:32:33.243 --> 02:32:35.243
different business functions 
like 

02:32:37.354 --> 02:32:39.454
developer tools, tasks, CRM, HR 
support, and more.

02:32:46.621 --> 02:32:48.621
Now I'm going pass this over 
toess and 

02:32:49.833 --> 02:32:51.833
CHUAN JI: 

02:32:53.606 --> 02:32:55.606
Chuan Ji.

02:32:56.858 --> 02:32:57.683
&gt;&gt; What we just saw are a bunch 
of public bots written by 

02:32:57.684 --> 02:33:01.197
others.  And they are available 
for everyone.  But what I want 

02:33:01.198 --> 02:33:04.661
you to think about is writing 
bots on your own.  Whether it be

02:33:04.662 --> 02:33:06.662
for your organization, 

02:33:08.541 --> 02:33:09.358
for your customers, or the 
world.  Light a public bot like 

02:33:09.359 --> 02:33:13.471
the others you have seen.  Maybe
you're new to bots and you're 

02:33:14.897 --> 02:33:16.938
heditating going, how hard is 
it?  But put simply, it's not 

02:33:16.939 --> 02:33:18.939
that bad.

02:33:20.636 --> 02:33:22.899
Just think of bots as 
microservices.  They are 

02:33:22.900 --> 02:33:24.900
simpler, there is less code 

02:33:26.379 --> 02:33:28.379
and you don't have to write a 
complete web App or Mobile App.

02:33:30.060 --> 02:33:31.486
You don't have that complexity. 
So loss code means you can build

02:33:31.487 --> 02:33:33.487
your Apps quicker but how quick?

02:33:36.385 --> 02:33:38.434
The Motorola CIO got a domeo bot
up in less than an hour and 

02:33:38.435 --> 02:33:42.527
spent a bit more time to do one 
for real work.  What does it do?

02:33:45.022 --> 02:33:47.311
It talks to multiple  systems 
and gathers customer order and 

02:33:47.312 --> 02:33:50.177
device warranty information to 
present to perhaps the Customer 

02:33:50.178 --> 02:33:51.614
Service agent who needs 
information when they are on a 

02:33:51.615 --> 02:33:53.615
call.

02:33:54.890 --> 02:33:56.890
The main idea is that humans 
used to 

02:33:57.971 --> 02:33:59.805
have to log into each of these 
systems separately by hand, coal

02:33:59.806 --> 02:34:03.322
8 all that information, before 
they could tell their customer. 

02:34:03.323 --> 02:34:04.968
Now with a bot, you can 
summarize all these results from

02:34:04.969 --> 02:34:06.969
all of these different systems 
together in a single 

02:34:11.118 --> 02:34:13.118
room so that all of the CSRs can
see it at the same time.

02:34:16.044 --> 02:34:18.044
We are here to help get you 
started.

02:34:18.690 --> 02:34:20.361
All right, building quickly 
isn't the only standout feature 

02:34:20.362 --> 02:34:23.280
of Hangouts Chat.  We want to 
emphasize the platform has a lot

02:34:23.281 --> 02:34:26.540
of flexibility.  There is many 
different ways to implement and 

02:34:26.541 --> 02:34:30.845
host your bots.  So we are going
to go over some of the basics 

02:34:30.846 --> 02:34:33.158
and then walk you through each 
option that you see here.  All 

02:34:33.159 --> 02:34:37.474
right.  So quick review.  
Talking to APIs, and then 

02:34:37.475 --> 02:34:41.364
comparing that with bots.  So in
this diagram, we have an 

02:34:44.254 --> 02:34:46.933
application, we need reach an 
API.  The data is protected and 

02:34:46.934 --> 02:34:49.007
so what typically has to happen 
is the user has 

02:34:53.077 --> 02:34:54.502
to grant access to your 
application through OAF, you 

02:34:54.503 --> 02:34:57.373
seen that dialogue window, 
right?  Once that happens, the 

02:34:57.374 --> 02:35:02.533
App is able to reach the API, 
access that user secured data on

02:35:02.534 --> 02:35:05.004
their behalf, do all the work 
that it needs to, and then 

02:35:05.005 --> 02:35:07.734
respond back to the user.  
Right?  Everybody familiar with 

02:35:07.735 --> 02:35:10.824
this?  Great.
So with bots, it's a little bit 

02:35:11.440 --> 02:35:16.357
different.  It'saise three-tier 
architecture here.  And what 

02:35:16.358 --> 02:35:18.476
happens is instead of a request 
coming from an application, 

02:35:20.740 --> 02:35:24.624
requests really comes from a 
user in a chatroom.  They enter,

02:35:24.625 --> 02:35:27.063
I want to talk to this bot and I
will send it this payload so 

02:35:27.064 --> 02:35:30.954
that message gets entered into 
Hangouts Chat and then Chat 

02:35:30.955 --> 02:35:32.978
contacts your bot.  Your bot 
does all the work it needs to 

02:35:35.325 --> 02:35:36.754
do, collates the information, 
and then returns that 

02:35:36.755 --> 02:35:39.198
information back to Hangouts 
Chat which then rennedthers 

02:35:40.265 --> 02:35:43.969
result in the chatroom.
So it's a little bit different. 

02:35:43.970 --> 02:35:46.422
The key takeaway here is that 
for your regular Apps, you call 

02:35:46.423 --> 02:35:48.423
APIs.

02:35:51.311 --> 02:35:53.181
But with bots, Hangouts Chat 
calls you.  So noodle on this 

02:35:53.182 --> 02:35:55.919
for a moment and once you get 
this, then the implementation 

02:35:55.920 --> 02:35:57.920
path that you are going to take 
is going to be more clear and 

02:36:00.864 --> 02:36:02.864
you can build your bots faster.
All right.

02:36:04.783 --> 02:36:06.272
Now the most efficient bots are 
return plain text because it is 

02:36:06.273 --> 02:36:10.626
short, it's fast, it gets the 
job done.  But for a better user

02:36:10.627 --> 02:36:16.218
experience, Hangouts chats 
supports richer UIs called cards

02:36:16.219 --> 02:36:18.219
that allow you to structure your
response data.

02:36:20.363 --> 02:36:23.058
For example, if you look at the 
cards sample here, you can see 

02:36:23.059 --> 02:36:27.156
that your bot could have 
returned 5 lines of plain text 

02:36:27.157 --> 02:36:31.686
and done its job.  But this UI 
card is more pleasing visually. 

02:36:31.687 --> 02:36:34.980
And in fact it can communicate 
more than just plain text.  For 

02:36:34.981 --> 02:36:37.230
example, you can see that there 
is a visual queue to show that 

02:36:37.231 --> 02:36:39.231
two of the 5 

02:36:41.336 --> 02:36:41.851
tasks have been completed from 
this project management bot that

02:36:41.852 --> 02:36:43.852
is managing like one of your 
reports.

02:36:45.519 --> 02:36:47.560
So that visual queue is really 
helpful and if you you were to 

02:36:47.561 --> 02:36:51.674
do that in plain text, you have 
to add extra symbols which may 

02:36:51.675 --> 02:36:53.743
get in the way of the data that 
is coming back.  So cards are 

02:36:53.744 --> 02:36:55.808
great.
We'll look at them a little bit 

02:36:55.809 --> 02:36:57.856
more later.  Now if you already 
have an App with 

02:37:02.570 --> 02:37:05.201
data that is kept secure behind 
OFF you can expose your 

02:37:05.202 --> 02:37:07.202
functionality within Hangouts 
Chat.

02:37:09.492 --> 02:37:11.130
Our config flow lets your users 
log do your App from Hangouts 

02:37:11.131 --> 02:37:15.019
Chat.  It's similar to this 
example where you see the task 

02:37:15.020 --> 02:37:18.533
tracker bot which stores 
information on Google sheet.  

02:37:18.534 --> 02:37:21.386
The sheet is protected data, 
right?  So the user has to allow

02:37:21.387 --> 02:37:23.387
your bot access to that 
spreadsheet.

02:37:25.709 --> 02:37:28.608
And then once the flow is 
complete, users can access your 

02:37:28.609 --> 02:37:30.609
App and their 

02:37:31.698 --> 02:37:33.321
secured data directly from 
Hangouts chatrooms and direct 

02:37:33.322 --> 02:37:35.168
messages.
Before showing you the code, I 

02:37:35.169 --> 02:37:40.070
want to give you a quick Ron 
down of the event types that 

02:37:40.071 --> 02:37:42.728
hang out chats sends to your 
bot.  Your bot can take action 

02:37:42.729 --> 02:37:44.729
when it is for example, added to
a space.

02:37:47.891 --> 02:37:50.967
A great place to send a welcome 
message.  Thank you for adding 

02:37:50.968 --> 02:37:52.968
me to this room.

02:37:54.429 --> 02:37:55.896
She how to use me and also when 
it is removed from a space, like

02:37:55.897 --> 02:38:00.656
locking things or doing a 
clean-up business lodging.  The 

02:38:00.657 --> 02:38:02.382
most common event type is 
message, which is just when a 

02:38:02.383 --> 02:38:06.908
bot receives a normal message 
entered by a user in a room or 

02:38:06.909 --> 02:38:09.582
DM and then the last one is card
click which is when a user 

02:38:09.583 --> 02:38:14.496
clicks on one of the UI card 
elements we looked at earlier.  

02:38:14.497 --> 02:38:16.497
To keep things simple we will 
focus on the latter pair.

02:38:18.394 --> 02:38:22.100
Let's start with standard bots 
that are running http.  As 

02:38:22.101 --> 02:38:24.151
mentioned before, the 
development environment is quite

02:38:24.152 --> 02:38:28.228
flexible.  Bots can be created 
and  hosted on any platform.  In

02:38:28.229 --> 02:38:30.496
other words, your language, your
stack, your Cloud, or ours.  

02:38:30.497 --> 02:38:35.588
Right?  So I presented at the 
top here some Google Cloud 

02:38:35.589 --> 02:38:37.891
Platform or GCP products and 
fire-based products you could 

02:38:37.892 --> 02:38:41.800
use but you don't have to.  So 
Hangouts Chat also works with  

02:38:44.040 --> 02:38:47.915
bot-related environments like 
Dialogflow and Hue bot.  Demo 

02:38:47.916 --> 02:38:49.540
some bots in some languages you 
see here but it really doesn't 

02:38:49.541 --> 02:38:54.446
matter.  As long as the Hangouts
Chat service can http post to 

02:38:54.447 --> 02:38:57.541
your bot, that's all that is 
really necessary.

02:38:57.958 --> 02:39:02.067
All right.  You guys ready for 
your hello world?  We will start

02:39:02.068 --> 02:39:04.951
with the echo bot and happy to 
pass it off to Juan, the 

02:39:07.016 --> 02:39:09.251
engineering lad for the Hangouts
Chat bot framework.

02:39:14.594 --> 02:39:18.091
.
&gt;&gt; CHUAN JI: Cool.  For shows 

02:39:18.092 --> 02:39:20.562
who haven't used Hangouts Chat 
before, what you're seeing on my

02:39:25.263 --> 02:39:27.263
screen is the macro OS desktop 
for hang out Chat.

02:39:29.367 --> 02:39:31.451
On the left is a list of rooms 
and direct messages and on the 

02:39:31.452 --> 02:39:33.891
right is a message stream.  You 
can see the group conversations 

02:39:35.731 --> 02:39:40.886
and so on.  Of course I can 
create a new conversation here.

02:39:45.634 --> 02:39:48.897
So, let's take a look at very 
basic bot.  We'll call it the 

02:39:48.898 --> 02:39:50.898
echo bot which writes back 
whatever the user sends to it.

02:39:54.209 --> 02:39:56.209
So I'm going to talk to it here.
Hi.

02:39:59.534 --> 02:40:01.534
And it will say, hi back to me.

02:40:02.809 --> 02:40:05.060
So you saw the way I talked to a
bot is by mentioning it in a 

02:40:05.061 --> 02:40:09.964
message.  So in  rooms, only 
messages that directly mention a

02:40:09.965 --> 02:40:12.421
bot get sent to the  
corresponding bot.  So the rest 

02:40:12.422 --> 02:40:15.927
of your conversation with your 
team is private.  This is not 

02:40:15.928 --> 02:40:17.928
the only way to talk to a bot.

02:40:19.198 --> 02:40:20.634
You can also have a direct  
message, one-on-one direct 

02:40:20.635 --> 02:40:24.107
message with a bot.  Here you 
can see I already have a direct 

02:40:24.108 --> 02:40:25.768
message with the echo bot as 
well.  And here you can see I 

02:40:25.769 --> 02:40:29.039
don't have to mention the echo 
bot at all.  Every message I say

02:40:29.040 --> 02:40:32.749
in this direct message will be 
sent to this bot because that is

02:40:32.750 --> 02:40:34.799
the only other person in this 
direct message.

02:40:37.031 --> 02:40:39.496
Cool so now what we have seen 
that you can interact with the 

02:40:39.497 --> 02:40:42.619
echo bot in Hangouts Chat, let's
take a look at how it is built.

02:40:47.340 --> 02:40:49.340
Let's go back to the slid&gt;&gt; 
WESLEY 

02:40:51.260 --> 02:40:53.260
CHAN: So here is the echo not 
full glory in Python.

02:40:55.338 --> 02:40:57.565
This uses the flask web 
framework hostable on any Cloud 

02:40:57.566 --> 02:41:00.219
supporting Python web Apps.  As 
you can see from the top of the 

02:41:03.675 --> 02:41:06.558
function, Hangouts Chat posts to
slash and then the code scans 

02:41:06.559 --> 02:41:10.045
the JSON payload for the message
type and then returns the same 

02:41:10.046 --> 02:41:12.301
message string along with the 
user in the user name of 

02:41:12.302 --> 02:41:14.302
whomever called 

02:41:15.974 --> 02:41:17.974
the bot just like in the demo 
you just saw.

02:41:19.452 --> 02:41:21.720
Now Python isn't the only 
choice.  Maybe you're using 

02:41:21.721 --> 02:41:24.807
Firebase F all your code is on 
Firebase, you don't necessarily 

02:41:24.808 --> 02:41:26.086
want to host your bot on 
something completely different, 

02:41:26.087 --> 02:41:28.087
right?  It's perfectly fine.

02:41:31.645 --> 02:41:34.142
So here is the same bot in JS 
and hosted by CloudFunctions for

02:41:34.143 --> 02:41:39.315
Firebase.  If instead most of 
your back end is on GCP, then 

02:41:39.316 --> 02:41:40.942
host it on the sister product, 
Google Cloud functions and the 

02:41:40.943 --> 02:41:43.803
code will be nearly identical.
If you take a look at the code 

02:41:43.804 --> 02:41:47.247
here, it does pretty much the 
same thing as all the littler.  

02:41:47.248 --> 02:41:49.503
It scans the I understand bound 
message for message event and 

02:41:49.504 --> 02:41:51.504
then returns user name and 
strings before and 

02:41:54.396 --> 02:41:57.275
it doesn't matter to Hangouts 
Chat your code is in Java script

02:41:57.276 --> 02:41:59.276
or Python and hosted on Firebase
or Google Cloud functions.

02:42:02.206 --> 02:42:05.079
Remember, Hangouts Chat only 
knows how to http post to your 

02:42:05.080 --> 02:42:09.592
bot.
So how are you doing so far?  

02:42:09.593 --> 02:42:14.516
Want to see more code?  
Switching gears a little bit.  

02:42:14.517 --> 02:42:18.227
Let's talk a little bit about 
Google Cloud Pub/Sub.  Many of 

02:42:18.228 --> 02:42:20.501
you know it's a realtime event 
streaming and messaging system 

02:42:20.502 --> 02:42:22.502
where you 

02:42:23.604 --> 02:42:24.828
can have many producers and 
reading and writing and probably

02:42:24.829 --> 02:42:26.829
at different rates and all of 
course could be coming from 

02:42:27.300 --> 02:42:29.975
different applications.  But, 
what does this victim to do with

02:42:31.403 --> 02:42:36.108
hang out Chat?  The platform is 
supposed to be flexible.  What 

02:42:36.109 --> 02:42:37.729
if you decide to host your bot 
on premise and behind a 

02:42:37.730 --> 02:42:42.835
firewall?  In this case, 
Hangouts Chat cannot contact 

02:42:42.836 --> 02:42:45.901
your bot so what can you do?
This is the perfect use case for

02:42:45.902 --> 02:42:47.927
Pub/Sub.  Hangouts Chat sends a 
message to 

02:42:51.408 --> 02:42:55.781
Pub/Sub instead of your bolt 
because it can't reach it.  It 

02:42:55.782 --> 02:42:57.825
has to register to allow the bot
to get the messages from Pub/Sub

02:42:57.826 --> 02:42:59.826
and bring it through the 
firewall and then your 

02:43:01.707 --> 02:43:03.707
on-premise bot can service the 
request, 

02:43:04.803 --> 02:43:07.442
do all the calls it needs to do 
and gathers the information and 

02:43:07.443 --> 02:43:10.493
responds to Lang outs Chat like 
normal.  Let's see how to use 

02:43:10.494 --> 02:43:13.144
it.
The next example is the Java 

02:43:13.145 --> 02:43:17.019
version of the echo bot.  A lot 
of Enterprises uses Java and so 

02:43:19.253 --> 02:43:22.129
we want to show an example here 
as well.  So Python and Node, 

02:43:22.130 --> 02:43:24.130
you can see the 

02:43:26.043 --> 02:43:27.891
cold handles the event and scans
for message type and then 

02:43:27.892 --> 02:43:29.892
replies with a 

02:43:30.949 --> 02:43:32.949
message text and user name it's 
like the other but more verbose.

02:43:35.426 --> 02:43:37.478
What if this bot is in our 
corporate data center behind the

02:43:37.479 --> 02:43:39.479
firewall?

02:43:40.529 --> 02:43:43.179
We just meaned that puck sub is 
the right solution --  mentioned

02:43:43.180 --> 02:43:45.423
- audio how doe we tweak to work
with Pub/Sub?  It's not too bad.

02:43:47.274 --> 02:43:48.900
If you look over here, you can 
see the extra code that we added

02:43:48.901 --> 02:43:51.130
to our Java echo bot that uses 
object mapper to 

02:43:54.848 --> 02:43:56.691
convert between JSON and Java 
objects and get the message from

02:43:56.692 --> 02:43:58.692
Pub/Sub and convert to JSON for 
processing.

02:44:01.771 --> 02:44:04.030
It passes that event object to 
the handle math we saw in the 

02:44:04.031 --> 02:44:06.492
privacy slide which handles a 
message as iftives sent 

02:44:09.967 --> 02:44:12.452
via http frost Hangouts Chat T 
doesn't know the difference.  

02:44:12.453 --> 02:44:15.340
That's awesome!
So we discussed hosting on 

02:44:15.341 --> 02:44:19.629
Google's Cloud, your Cloud, with
or without a firewall.  Let's 

02:44:19.630 --> 02:44:21.278
bring it back inside Google with
a little twist called Google App

02:44:21.279 --> 02:44:27.394
script.  First things first.  
Quick quiz.  How many feel it's 

02:44:27.395 --> 02:44:29.395
important to have 

02:44:32.279 --> 02:44:34.279
off to help keep your data user 
data secure?

02:44:36.988 --> 02:44:39.239
How many of you like writing 
authcode?  Chirp chirp.  That's 

02:44:39.240 --> 02:44:44.329
what I thought.  What about 
managing your own servers or VMs

02:44:44.330 --> 02:44:47.800
on premise or in the Cloud?  Not
easy eater.  So in that case, 

02:44:47.801 --> 02:44:50.669
App script is for you.  Have you
heard of App script before?

02:44:54.004 --> 02:44:57.690
How many have heard of App 
script before?  Not enough.  

02:44:57.691 --> 02:44:59.118
It's like another Google secret 
but just not a good one because 

02:44:59.119 --> 02:45:02.005
we launched it almost a decade 
ago.  So what is it?

02:45:04.045 --> 02:45:05.870
It's a customized Java script 
environment where we take care 

02:45:05.871 --> 02:45:10.872
of the servers and auth, and you
have access to more than 40 G 

02:45:10.873 --> 02:45:15.754
Suite and Google APIs with just 
function calls.  Now if you try 

02:45:15.755 --> 02:45:18.600
to build a bot with it, we 
provide you a one-click bot 

02:45:18.601 --> 02:45:22.307
template so you're already given
a basic working bot to hack on 

02:45:22.308 --> 02:45:25.582
right away.  Check out the video
if you want to learn more about 

02:45:25.583 --> 02:45:27.583
the secret.

02:45:28.877 --> 02:45:30.912
So App script is a serverless 
environment for all developers, 

02:45:32.575 --> 02:45:34.192
including all you product folk, 
business analyst and data 

02:45:34.193 --> 02:45:36.193
scientists out there.

02:45:37.913 --> 02:45:39.755
Now here is the at echo bot in 
App script.  Now let's pause for

02:45:39.756 --> 02:45:42.041
a minute here.  Really look that
the code while it is 

02:45:45.306 --> 02:45:47.359
identical in functionality as 
the others, it's only one line 

02:45:47.360 --> 02:45:51.656
of code!  And not only that, 
it's the easiest way to deploy a

02:45:51.657 --> 02:45:53.657
bot within your organization.

02:45:56.971 --> 02:45:58.971
So the echo part is a good start
but can 

02:46:01.447 --> 02:46:03.447
you show us more useful App 
script bot?

02:46:08.617 --> 02:46:10.617
?

02:46:12.755 --> 02:46:14.821
&gt;&gt; So we will show you a quick 
bot, and we will do a little 

02:46:14.822 --> 02:46:16.822
twist and translate it.

02:46:18.704 --> 02:46:21.180
So let's switch to demo.  I have
called the translate bot and 

02:46:24.673 --> 02:46:26.673
I'm going to say, welcome to 
Google I/O in English.

02:46:30.597 --> 02:46:34.905
And it's giving us back the same
message but in Japanese.  Cool! 

02:46:34.906 --> 02:46:36.906
Let's take a look at how that is
built.

02:46:39.621 --> 02:46:41.621
Let's go back to the slides, 
please.

02:46:42.682 --> 02:46:46.769
Here it is.  Notice how it is 
almost as simple as the echo 

02:46:46.770 --> 02:46:48.801
bot, the only difference is that
we are now calling the Google 

02:46:51.885 --> 02:46:53.885
translate API and how do we call
the Google translate AP!

02:46:54.117 --> 02:46:56.117
It's a function call away.

02:46:57.195 --> 02:46:58.810
You're not importing SDK or 
downloading anything.  It's just

02:46:58.811 --> 02:47:04.193
there.  And you can see how it 
is very intuitive to use.  You 

02:47:04.194 --> 02:47:07.233
pass the message to user sent, 
in this case it is E.message to 

02:47:07.234 --> 02:47:11.552
argument text.  Argument text 
being the text you just sent 

02:47:11.553 --> 02:47:13.003
without the bot's own name in it
and pass the source language and

02:47:13.004 --> 02:47:16.310
the target language.  And then 
you return the result Aztecs.

02:47:16.535 --> 02:47:19.803
That's it.  It's almost too 
simple, right?

02:47:24.086 --> 02:47:26.086
Let's take a look at a more 
advanced example.

02:47:29.271 --> 02:47:31.271
So let's cut to the demo again. 
Thank you.

02:47:33.596 --> 02:47:35.596
So in preparation for this talk,
our 

02:47:39.258 --> 02:47:42.862
team has been using a Google 
spreadsheets to track all work. 

02:47:42.863 --> 02:47:45.128
Each of us has a task assigned 
and I built a simple bot to take

02:47:45.129 --> 02:47:49.236
a look at where everyone is at 
in terms of tasks.  So, I call 

02:47:49.237 --> 02:47:51.237
it the task tracker bot.

02:47:53.133 --> 02:47:55.133
So I'm going to call it here.

02:47:58.021 --> 02:48:00.482
So looks like we have a bunch of
tasks pending here.  So let's 

02:48:00.483 --> 02:48:02.515
take a look at the spreadsheet.

02:48:07.036 --> 02:48:09.036
Can you see the spreadsheet?

02:48:11.528 --> 02:48:14.376
So, you can see this is a plain 
Google spreadsheet.  The first 

02:48:14.377 --> 02:48:17.062
row with the column names and a 
bunch of tasks here assigning 

02:48:17.063 --> 02:48:19.063
and status.

02:48:21.162 --> 02:48:22.167
The bot is really pulling the 
data from the spreadsheet 

02:48:22.168 --> 02:48:25.070
showing tasks not yet completed.
So I'm going to mark all of 

02:48:25.071 --> 02:48:27.118
these completed right now since 
we are all 

02:48:30.973 --> 02:48:32.808
already standing on the IO 
stage.  I'm going to mark 

02:48:32.809 --> 02:48:34.809
everything completed 

02:48:35.861 --> 02:48:38.093
and then go back to the Chat App
and I'm going to query it again 

02:48:38.094 --> 02:48:42.188
through my task tracker bot.  
And this time it will tell us 

02:48:42.189 --> 02:48:44.189
that 

02:48:45.490 --> 02:48:48.400
there are no more tasks T.
&gt;&gt; Video is coming soon, by the 

02:48:48.401 --> 02:48:50.401
way.
&gt;&gt; Cool.

02:48:51.872 --> 02:48:53.872
Let's go to the slides.

02:48:56.782 --> 02:48:58.818
So this is the code.
This is the code for the task 

02:48:58.819 --> 02:49:02.933
tracker bot.  And you can see it
fits on one slide.  So it's 

02:49:02.934 --> 02:49:04.934
really not that complicated.

02:49:06.614 --> 02:49:08.033
You can see we are doing some 
processing here where we are  

02:49:08.034 --> 02:49:10.034
opening up 

02:49:11.314 --> 02:49:13.968
the spreadsheet opening by  ID, 
grabbing the data from the 

02:49:13.969 --> 02:49:17.259
spreadsheet in a two dimensional
array and doing a little bit of 

02:49:17.260 --> 02:49:19.260
processing here, removing the 
first 

02:49:20.737 --> 02:49:22.367
row, which is just the column 
names, filling out the rows that

02:49:22.368 --> 02:49:26.661
are already completed, mapping 
each row into a string, putting 

02:49:26.662 --> 02:49:30.548
them together into a message and
then  returning them to hang out

02:49:30.549 --> 02:49:32.549
Chat.

02:49:33.834 --> 02:49:35.834
&gt;&gt; I don't see any author API 
calls here.

02:49:37.290 --> 02:49:39.290
&gt;&gt; That's a very good question, 
wes.

02:49:40.183 --> 02:49:42.238
&gt;&gt; So, notice how -- in terms of
API calls like the translate 

02:49:42.239 --> 02:49:44.316
bot, all the  API calls are just
function calls.

02:49:47.597 --> 02:49:50.051
It's just especially to open ID,
spreadsheet get data range, get 

02:49:50.052 --> 02:49:54.139
values, get URL.  That's it.  
You're not like doing 

02:49:54.140 --> 02:49:58.012
complicated -- not building 
requests or using SDK.  You just

02:49:58.013 --> 02:50:00.484
call them as if they were built 
in.  And in addition, you don't 

02:50:00.485 --> 02:50:03.222
have to write about explicit 
authentification code.

02:50:07.704 --> 02:50:10.381
So obviously this spreadsheet is
not publicly visible but because

02:50:10.382 --> 02:50:15.479
I used this bot before, I have 
given access to it and Google 

02:50:15.480 --> 02:50:17.924
App script is responsible for 
handling all of that.  You don't

02:50:17.925 --> 02:50:20.794
have to write a call back.  You 
don't have to store the 

02:50:20.795 --> 02:50:24.671
authtokens.  You don't have to 
refresh them.  It's taken care 

02:50:24.672 --> 02:50:29.561
of by App script.  So after the 
user logs into for the first 

02:50:29.562 --> 02:50:31.562
time, App script will take care 
of it.

02:50:33.245 --> 02:50:35.245
So so far, the bots you have 
seen 

02:50:37.064 --> 02:50:40.047
collect data and return them in 
plain text but let's take a look

02:50:40.048 --> 02:50:42.903
at how to present a richer UI in
the form of  cards.

02:50:44.728 --> 02:50:47.459
&gt;&gt; WESLEY CHAN: It's true that 
plain text is the easiest and 

02:50:47.460 --> 02:50:51.371
fastest but for the cards, you 
have to use cards to make your 

02:50:51.372 --> 02:50:55.050
response look good.  So that is 
what this is for.  So, you can 

02:50:55.051 --> 02:50:57.559
use JSON mark up to construct 
the UI card and then the best 

02:51:03.061 --> 02:51:04.078
part is it is wants to run 
anywhere.  You don't need to 

02:51:04.079 --> 02:51:08.589
write a separate mobile version 
of your bot.  Cards can be 

02:51:08.590 --> 02:51:10.590
interactive like the poll you 
see here.

02:51:12.463 --> 02:51:14.507
Users interact by  clicking on 
the vote button and they are 

02:51:14.508 --> 02:51:19.420
updatable.  The bar chart and 
the votes update.  Now the user 

02:51:19.421 --> 02:51:21.691
experience will be much worse if
a new card was generated for 

02:51:23.340 --> 02:51:25.340
every vote, right?

02:51:26.413 --> 02:51:29.106
The bot framework supports a 
variety of widgets.  So here are

02:51:29.107 --> 02:51:31.780
a couple to get an idea like 
buttons, formatted temperatures,

02:51:34.646 --> 02:51:36.686
structured data, images, links 
and more.  But really the 

02:51:36.687 --> 02:51:38.927
widgets are just building 
blocks.  The real magic is when 

02:51:38.928 --> 02:51:44.014
you put them all together and 
assemble them into cards whether

02:51:44.015 --> 02:51:46.015
interactive, updating or both.

02:51:49.961 --> 02:51:51.961
So let's see a demo of a bot 
that has 

02:51:54.024 --> 02:51:56.024
interactive and updating cards.
&gt;&gt; CHUAN JI: Great.  Thank you.

02:51:58.759 --> 02:52:00.759
So it's a great day here today 
at the amphitheater.

02:52:03.012 --> 02:52:05.924
How many of you have been to 
this amphitheater before?  Some 

02:52:05.925 --> 02:52:08.812
of you.  Okay.  So that's more 
than I expected, actually.

02:52:12.635 --> 02:52:14.635
But for the rest of you, I just 
wrote 

02:52:15.748 --> 02:52:17.748
a little bot that helps us find 
the amphitheater on Google Maps.

02:52:21.324 --> 02:52:23.324
So I call it the where is, bot.

02:52:24.610 --> 02:52:26.610
So where is shoreline 
amphitheater?

02:52:28.293 --> 02:52:30.293
And what this bot does is pull 
up a 

02:52:32.184 --> 02:52:34.184
map of the amphitheater and it 
shows an 

02:52:35.266 --> 02:52:37.266
image of the map.
&gt;&gt; WESLEY CHAN: I don't see an 

02:52:38.368 --> 02:52:39.998
amphitheater there.
&gt;&gt; CHUAN JI: On the bottom you 

02:52:39.999 --> 02:52:41.999
see a row 

02:52:43.311 --> 02:52:45.311
of buttons and guess what 
happens?

02:52:45.377 --> 02:52:47.434
&gt;&gt; WESLEY CHAN: I don't see it, 
still.  There it is.

02:52:50.745 --> 02:52:52.745
&gt;&gt; CHUAN JI: So it zooms in here
and the minus button zooms out.

02:52:55.880 --> 02:52:57.880
So we can see the Bay Area and 
all of its glory.

02:52:58.356 --> 02:53:00.356
&gt;&gt; WESLEY CHAN: What is that 
Google Maps icon down there?

02:53:02.204 --> 02:53:04.204
&gt;&gt; CHUAN JI: When you click on 
this 

02:53:05.897 --> 02:53:07.897
button, it will take you to the 
Google 

02:53:09.895 --> 02:53:11.513
Maps site centered on the 
location I typed and on mobile, 

02:53:11.514 --> 02:53:15.681
it will take you to the Google 
Maps App.  Cool.

02:53:18.840 --> 02:53:21.124
Would you like to see how this 
is built?  Let's go back to the 

02:53:21.125 --> 02:53:26.700
slides.
Cool.  So here is the first to 

02:53:26.701 --> 02:53:29.975
start with our familiar on 
message function.  So as you 

02:53:29.976 --> 02:53:32.675
already know, the on message 
function is invoked when the 

02:53:32.676 --> 02:53:36.139
user sends a message to the bot 
n this case, I  said, where is 

02:53:36.140 --> 02:53:38.140
the shoreline amphitheater?

02:53:40.044 --> 02:53:42.905
So Java's return the card but in
this case, we are going to move 

02:53:42.906 --> 02:53:45.604
the logic for constructing the 
card into a new function we will

02:53:45.605 --> 02:53:48.676
show called, build message.  
Note here that build message 

02:53:48.677 --> 02:53:50.677
takes in three arguments.

02:53:52.953 --> 02:53:55.446
It takes in the location the 
user typed.  This is argument 

02:53:55.447 --> 02:54:00.374
text.  So we move the space and 
it will take initial zoom level 

02:54:00.375 --> 02:54:04.458
and it will take in a third 
parameter, the responsive to.  

02:54:04.459 --> 02:54:06.459
So when a new message is sent, 
we want 

02:54:08.139 --> 02:54:10.139
to send a new message always, so
we use the new message type.

02:54:12.434 --> 02:54:14.057
We'll take a look at that 
litter.  So now let's look at 

02:54:14.058 --> 02:54:18.782
build message.  This is the meat
of the code.  You saw before it 

02:54:18.783 --> 02:54:20.783
takes in location, 

02:54:22.446 --> 02:54:26.120
the user typed and zoom level 
and takes in the response type. 

02:54:26.121 --> 02:54:28.389
So what we are going to do in 
build message is we are going to

02:54:28.390 --> 02:54:31.844
construct each element or each 
widget inside this card in 

02:54:31.845 --> 02:54:36.576
sequence.  So we start with the 
header.  You can see just like 

02:54:36.577 --> 02:54:39.624
the header, the other widgets 
are the same.  All of these 

02:54:39.625 --> 02:54:42.058
widgets are represented by a 
plain Java script object and the

02:54:43.286 --> 02:54:45.286
header has two minutes.

02:54:47.192 --> 02:54:49.192
The title and icon.

02:54:51.716 --> 02:54:54.148
So next, we are going to build 
the image that we see here, the 

02:54:54.149 --> 02:54:58.866
map image.  We'll take a look at
how that is built in the next 

02:54:58.867 --> 02:55:01.172
slide and then construct a row 
of buttons like you see on the 

02:55:01.375 --> 02:55:03.375
bottom.

02:55:04.834 --> 02:55:06.278
We will create two more 
functions, build Google Maps 

02:55:06.279 --> 02:55:09.936
link which takes in location and
we'll build or have a function 

02:55:09.937 --> 02:55:11.983
called, build button, which 
takes in the label, the location

02:55:11.984 --> 02:55:16.695
and the target zoom level the 
user will be taken to when they 

02:55:16.696 --> 02:55:19.129
click the button.
So finally we will put it all 

02:55:19.130 --> 02:55:24.472
together into one big JSON 
object.  And return this object 

02:55:24.473 --> 02:55:27.138
back to Hangouts Chat and that 
creates the card.

02:55:31.654 --> 02:55:34.094
So let's look at each of these 
widgets.  So first let's look at

02:55:34.095 --> 02:55:36.095
build image.

02:55:39.615 --> 02:55:42.467
It shows a widget from Google 
Maps in an image widget.  So in 

02:55:42.468 --> 02:55:44.468
this example we will use the 

02:55:45.746 --> 02:55:47.746
Google Maps API which is built 
into App script.

02:55:49.235 --> 02:55:52.093
Just say maps new static map.  
We set a bunch of new 

02:55:52.094 --> 02:55:54.132
parameters, like location zoom 
level, a marker, the red 

02:55:58.466 --> 02:56:00.520
pin you see there, and we can 
just grab a mat URL.  Pretty 

02:56:00.521 --> 02:56:04.237
simple.  It's just a function 
call away.  And then finally we 

02:56:04.238 --> 02:56:06.238
will take the URL 

02:56:07.492 --> 02:56:09.316
and construct a Java script 
object that represents the image

02:56:09.317 --> 02:56:11.996
widget and return it.
So next we'll build zoom 

02:56:11.997 --> 02:56:14.230
buttons.  These are interactive.

02:56:17.937 --> 02:56:19.937
So in addition to creating the 
UI side 

02:56:21.828 --> 02:56:24.089
of things, we will add a text 
button which contains text label

02:56:24.090 --> 02:56:26.090
and we will have an unclicked 
parameter.

02:56:28.575 --> 02:56:30.575
What is inside the unclicked 
parameter?

02:56:31.640 --> 02:56:33.319
It's going to be the payload we 
want sent back to our bot when a

02:56:33.320 --> 02:56:35.320
user 

02:56:36.338 --> 02:56:38.582
interacts with one of these 
buttons.  So in here we'll set 

02:56:38.583 --> 02:56:42.066
two parameters.  The location 
the user tied in the beginning 

02:56:42.067 --> 02:56:44.067
and the new zoom level the user 
will be taken to when they click

02:56:44.555 --> 02:56:46.555
the button.

02:56:48.912 --> 02:56:50.536
So, like I said, this object 
payload will be sent back to our

02:56:50.537 --> 02:56:52.537
bot when the user clicks this 
button.

02:56:54.626 --> 02:56:56.626
So where do we receive this 
payload?

02:56:57.071 --> 02:56:59.727
We receive a function called on 
card click.  So just like on 

02:56:59.728 --> 02:57:04.005
message which is triggered when 
a user sends a message.  On card

02:57:04.006 --> 02:57:08.098
click is triggered when a user 
clicks on a button in a card.  

02:57:08.099 --> 02:57:10.387
What it receives is the payload 
of the button that the user 

02:57:10.388 --> 02:57:12.388
clicked so we can extract the 
parameters that were 

02:57:14.275 --> 02:57:16.289
assigned to the button and see 
thics attracted location and 

02:57:16.290 --> 02:57:20.230
zoom level and we do a bit of 
math to make sure the zoom level

02:57:20.231 --> 02:57:22.231
isn't out-of-bounds and then we 
just call the same build message

02:57:23.671 --> 02:57:26.944
function that constructed the 
initial card.  The only 

02:57:26.945 --> 02:57:29.417
difference is that in this time 
we will set the parameter to 

02:57:29.418 --> 02:57:34.318
update message because we want 
to not post a new message.  We 

02:57:34.319 --> 02:57:36.319
want to update the original card

02:57:37.321 --> 02:57:39.321
the user clicked on.

02:57:42.319 --> 02:57:44.554
So finally, we have the icon on 
the bottom left that takes the 

02:57:44.555 --> 02:57:47.802
user to Google Maps.  So like 
the zoom buttons, it will have 

02:57:50.885 --> 02:57:53.528
or create a button but it's not 
going to have an unclick handler

02:57:53.529 --> 02:57:57.405
payload that will be returned to
the bot because we don't want 

02:57:57.406 --> 02:57:59.222
the bot to be invoked, we just 
want to send the user to Google 

02:57:59.223 --> 02:58:03.910
Maps.  Here we construct a link 
to Google Maps and then attach 

02:58:03.911 --> 02:58:05.911
it to the open link 

02:58:06.992 --> 02:58:08.619
property which just instructs 
Hangouts chats to not deliver 

02:58:08.620 --> 02:58:13.729
the response back to the bots, 
but just call-up Google Maps.

02:58:17.826 --> 02:58:20.062
So I want to stress through all 
these examples it shows you how 

02:58:20.063 --> 02:58:22.063
to build this interactivity in 
App script.

02:58:23.319 --> 02:58:25.573
This functionality is not 
limited to App script.  The same

02:58:25.574 --> 02:58:27.574
functionalities are available 

02:58:28.840 --> 02:58:31.498
as well if you build your bot in
using HTP endpoint or Pub/Sub 

02:58:31.499 --> 02:58:33.499
endpoint.  It means you can 
build the same rich 

02:58:36.817 --> 02:58:37.428
user experience with cards in a 
language of your house and 

02:58:37.429 --> 02:58:40.909
deploy to the environment of 
your choice.  Cool.

02:58:44.183 --> 02:58:45.612
So so far we have shown you bots
that respond to something user 

02:58:45.613 --> 02:58:50.516
does.  User has to send a 
message or click on a button for

02:58:50.517 --> 02:58:52.747
your bots to do anything.  But 
what if the bot needs to notify 

02:58:53.769 --> 02:58:55.769
the user about something?
&gt;&gt; WESLEY CHAN: So thank you.

02:58:58.704 --> 02:59:01.171
So the framework supports 
asingeinous messages perfect for

02:59:01.172 --> 02:59:03.172
long-running jobs.

02:59:06.838 --> 02:59:08.837
A synchronous message can be 
sent to specific threads for 

02:59:08.838 --> 02:59:15.243
context.  So here our bot needs 
to contact Hangouts Chat.  So 

02:59:15.244 --> 02:59:18.705
when you see auth, it's a strong
indication you're using API.  A 

02:59:18.706 --> 02:59:20.706
bot has to call into Hangouts 
Chat now.

02:59:22.364 --> 02:59:24.364
So this Python sample uses the 
bot's 

02:59:25.654 --> 02:59:27.511
permission Scopelus service 
another credentials you got 

02:59:27.512 --> 02:59:29.512
downloaded from your project and
then establish a service 

02:59:31.384 --> 02:59:33.435
endpoint to the API like with a 
discovery.build call and then 

02:59:33.436 --> 02:59:35.885
you can use the A approximate.  
I to send message to a DM or 

02:59:35.886 --> 02:59:38.175
room.
Now like any other bot, this bot

02:59:38.176 --> 02:59:40.176
can 

02:59:41.218 --> 02:59:43.218
call other APIs or do any other 

02:59:44.879 --> 02:59:45.708
processing you want done and 
then collate the information and

02:59:45.709 --> 02:59:47.709
send it back 

02:59:48.762 --> 02:59:50.835
into the room with the DM.
More generally, besides just 

02:59:50.836 --> 02:59:56.549
creating messages, the API can 
do all operations on messages.  

02:59:56.550 --> 02:59:58.550
It also has the additional fee 
towers 

03:00:00.436 --> 03:00:01.301
give you more context like 
getting information on rooms or 

03:00:01.302 --> 03:00:05.416
members who are in rooms and 
DMs.  And in addition to the 

03:00:05.417 --> 03:00:10.338
API, Hangouts Chat supports 
in-coming web hosts great for 

03:00:10.339 --> 03:00:12.780
one off alerts like when a 
server goes down.  They are 

03:00:12.781 --> 03:00:14.781
quick and dirty or easy and you 
can integrate with any of your 

03:00:16.436 --> 03:00:18.272
custom workflows and the way you
do it is go to the room with the

03:00:18.273 --> 03:00:22.346
DM and pull down configure web 
hooks and then from there, you 

03:00:22.347 --> 03:00:24.582
can see the current web hooks 
that are currently defined.  And

03:00:24.583 --> 03:00:26.015
you can have different ones 
because you may have different 

03:00:26.016 --> 03:00:29.477
Apps that are posting different 
alerts.  So just click on the 

03:00:29.478 --> 03:00:31.478
icon to the right 

03:00:33.793 --> 03:00:36.497
to copy the web hook URL to use.
Now in coming web hooks can come

03:00:36.498 --> 03:00:40.384
from monitoring Apps or the 
command line.  So we will prove 

03:00:40.385 --> 03:00:42.385
this by doing an 

03:00:44.276 --> 03:00:46.276
incoming web hook from a curl 
command.

03:00:47.157 --> 03:00:49.794
&gt;&gt; CHUAN JI: Thank you.  So as 
wes showed you the way you 

03:00:51.953 --> 03:00:54.810
configure a web hook is get to a
room and click on config web 

03:00:54.811 --> 03:00:57.859
hooks and we will see a dialogue
that shows you what you have 

03:00:57.860 --> 03:01:00.513
conphysician.  There will be a 
URL here that you can use.

03:01:03.810 --> 03:01:06.275
So in this case, let's say we 
have imaginary task manager App 

03:01:06.276 --> 03:01:11.799
and it just wants to send a 
quick notification into hang 

03:01:11.800 --> 03:01:13.800
outs Chat when something 
happens.

03:01:15.105 --> 03:01:17.150
So I want to switch to terminal 
here and here you can see I 

03:01:17.151 --> 03:01:19.151
pasted the 

03:01:20.211 --> 03:01:22.890
command and it's going to be a 
command sending http post 

03:01:22.891 --> 03:01:24.891
request T will contain 

03:01:26.338 --> 03:01:28.835
a JSON payload and it will 
contain the URL I copied from 

03:01:28.836 --> 03:01:30.836
the dialogue from in Hangouts 
Chat in the background.

03:01:32.523 --> 03:01:34.775
And the text I'm going to send, 
remember this is the same 

03:01:34.776 --> 03:01:36.776
payload, same JSON 

03:01:38.868 --> 03:01:41.704
object you would send from App 
script or from requests, it's 

03:01:41.705 --> 03:01:45.980
the same format.  So just send 
this to payload and let me hit 

03:01:45.981 --> 03:01:49.638
enter here.  And everything goes
well -- you can see before we 

03:01:49.639 --> 03:01:51.897
close the terminal, you can see 
I have gotten back response a 

03:01:54.973 --> 03:01:56.973
JSON formatted payload from 
Hangouts 

03:01:58.667 --> 03:02:00.355
Chat that shows me the ID of the
message that was just created, 

03:02:00.356 --> 03:02:02.356
the space that it was posted in 
and so on.

03:02:05.082 --> 03:02:08.441
Now let's take a look at this 
message in Hangouts Chat.  You 

03:02:08.442 --> 03:02:10.940
can see here this created a new 
conversation.  And it contains 

03:02:10.941 --> 03:02:13.415
the text that we were just sent 
to it.

03:02:17.345 --> 03:02:19.345
Let's go back to the slides.

03:02:21.435 --> 03:02:24.341
So one of the most innovative 
featureses in Hangouts Chat as 

03:02:24.342 --> 03:02:26.342
Mike 

03:02:28.202 --> 03:02:30.445
explained earlier, 
conversations.  So threaded 

03:02:30.446 --> 03:02:32.446
conversations are great 

03:02:33.720 --> 03:02:36.361
for grouping relevant context 
together so in the context of 

03:02:36.362 --> 03:02:40.481
imaginary task manager App, what
we really like to see is the 

03:02:40.482 --> 03:02:42.482
history around the particular 

03:02:43.747 --> 03:02:47.402
task  grouped together like the 
top thread you can see here.  So

03:02:47.403 --> 03:02:49.249
what this means is that all the 
relevant discussions from 

03:02:49.250 --> 03:02:52.504
people, all the relevant 
notifications from this App, get

03:02:52.505 --> 03:02:54.357
grouped into the same 
conversation.  This is very easy

03:02:54.358 --> 03:02:56.592
for people to understand what is
going on.

03:02:58.620 --> 03:03:00.620
So how do we do this?

03:03:02.292 --> 03:03:04.734
Just like you saw on my screen, 
after you send the request to 

03:03:04.735 --> 03:03:06.735
Hangouts Chat, 

03:03:09.259 --> 03:03:10.281
we returned the data, the IDs 
and so on about the message 

03:03:10.282 --> 03:03:13.728
created.  So remember that and 
remember the association between

03:03:13.729 --> 03:03:17.190
task ID and the thread ID and 
that is perfectly fine.  Nothing

03:03:17.191 --> 03:03:19.281
wrong with that and you dock 
that.  But since this is a 

03:03:19.282 --> 03:03:21.946
really common use case, we 
thought we could make it more 

03:03:22.357 --> 03:03:24.357
convenient.

03:03:26.428 --> 03:03:27.254
So, once one solution we came up
with is the idea of a thread 

03:03:27.255 --> 03:03:33.271
key.  So think of thread key as 
a custom identifier.  It is some

03:03:33.272 --> 03:03:36.978
identifier that makes sense to 
you in your problem domain.  So 

03:03:36.979 --> 03:03:38.979
for example, in our task manager

03:03:40.473 --> 03:03:41.903
App it could be a task ID, if 
you have a customer ticket 

03:03:41.904 --> 03:03:44.352
tracking system, it could be a 
ticket ID, maybe a customer 

03:03:45.171 --> 03:03:48.262
order ID.  Doesn't matter.  What
you do with it is specify in 

03:03:48.263 --> 03:03:51.949
each request that you make when 
you create a message in Hangouts

03:03:51.950 --> 03:03:56.254
Chat.  And we dot heavy  
lifting.  Remember, the first 

03:03:56.255 --> 03:04:00.745
time we see a message that has a
particular thread key, we'll 

03:04:00.746 --> 03:04:02.982
create a new conversation, some 
sequence messages get post thed 

03:04:03.824 --> 03:04:06.069
into same conversation.  Now you
don't have to remember that 

03:04:08.921 --> 03:04:11.182
mapping between an entity in 
your problem domain and a thread

03:04:11.183 --> 03:04:13.183
or conversation in Hangouts 
Chat.

03:04:15.083 --> 03:04:17.083
So of course this example here 
on the 

03:04:18.806 --> 03:04:20.806
slide shows you a command very 
simple 

03:04:21.891 --> 03:04:24.196
but this of course doesn't just 
look for incoming web hooks or 

03:04:24.197 --> 03:04:26.197
curl T works for 

03:04:27.656 --> 03:04:29.693
bots as well so you could write 
as a  bot, and could use thread 

03:04:29.694 --> 03:04:31.758
key to do the same group 
conversation -- group message 

03:04:34.221 --> 03:04:37.699
into the same conversation.
All right.  So this wraps up our

03:04:37.700 --> 03:04:42.196
introductory tour of the 
Hangouts Chat bot framework.  

03:04:42.197 --> 03:04:44.692
I'll hand it off to Mike to take
us across the finish line.

03:04:47.163 --> 03:04:49.208
&gt;&gt; MIKE SORVILLO: Thank you wes 
and Juan.  Just to summarize 

03:04:49.209 --> 03:04:51.209
what we talked about today.

03:04:52.874 --> 03:04:53.935
The Hangouts Chat service with 
bots helps teams accelerate team

03:04:53.936 --> 03:04:57.069
work and productivity.  You can 
stay notified, automate tasks, 

03:04:59.104 --> 03:05:01.794
query information, all without 
changing anything context.  And 

03:05:01.795 --> 03:05:03.795
like they showed you, there is 
many different ways to connect.

03:05:07.302 --> 03:05:09.548
You can spent up your own web 
service using any Cloud or 

03:05:09.549 --> 03:05:11.549
language, use Cloud 

03:05:12.812 --> 03:05:14.463
Pub/Sub to with a firewall in 
addition your organization or 

03:05:14.464 --> 03:05:17.934
the  easiest way to streamline a
workflow is using App script 

03:05:17.935 --> 03:05:19.989
where you don't have to worry 
about servers, auth, or anything

03:05:19.990 --> 03:05:21.990
like that.

03:05:27.361 --> 03:05:29.186
So to get started, check out our
website for more documentation 

03:05:29.187 --> 03:05:31.187
on how to do all of this.

03:05:32.878 --> 03:05:34.878
If you're a G Suite customer and
you 

03:05:36.537 --> 03:05:39.623
haven't tried Hangouts Chat 
today, try the product itself.  

03:05:39.624 --> 03:05:41.458
And if you have more questions, 
we are happy to answer them in 

03:05:41.459 --> 03:05:45.972
dome B.  We will be giving more 
are domeos and could show you 

03:05:45.973 --> 03:05:47.973
more details on how to publish 
bots and what not.

03:05:49.835 --> 03:05:52.332
So, before we all leave, we want
to hear from you.  So please 

03:05:52.333 --> 03:05:54.333
provide feedback for this 
session at google.

03:05:55.593 --> 03:05:58.891
com/io/schedule.  And thank you 
for all coming.  Enjoy the rest 

03:05:58.892 --> 03:06:02.571
of the conference.
[ Applause ]

03:22:17.776 --> 03:22:21.309
By now you checked into 
registration to receive your 

03:22:17.776 --> 03:22:22.087
badge. It must be visibly warn 
at all times and you'll need it 

03:22:22.088 --> 03:22:22.276
to enter the after hours 
activities at the end of days 1 

03:22:22.277 --> 03:22:24.538
and 2. Throughout the event, 
make sure to visit google.

03:22:26.153 --> 03:22:27.981
com/io, or download the IO 
Mobile App for the most 

03:22:27.982 --> 03:22:29.982
up-to-date schedules and 
conference map.

03:22:32.864 --> 03:22:34.093
For questions or assistance, 
stop by the information desk 

03:22:34.094 --> 03:22:36.739
located across from the CodeLabs
building or chat with a staff 

03:22:36.740 --> 03:22:38.740
member wearing a yellow badge.

03:22:43.406 --> 03:22:45.406
Sessions will take place in the

03:22:47.917 --> 03:22:49.150
Amphitheater and at the 8 stages
throughout the venue. If you 

03:22:49.151 --> 03:22:51.151
haven't already, reserve a seat 
on the website or Mobile App.

03:22:57.378 --> 03:22:57.794
If you miss a session, don't 
worry, recordings will be 

03:22:57.795 --> 03:22:59.425
available on line shortly after 
they end. Be sure to visit the 

03:22:59.426 --> 03:23:00.655
CodeLabs building for hands on 
experience with ready-to-code 

03:23:00.656 --> 03:23:02.656
kiosks and self-paced tutorials.

03:23:03.759 --> 03:23:04.583
Google staff will be on hand for
helpful advice and to provide 

03:23:04.584 --> 03:23:06.584
direction if you need support.

03:23:10.439 --> 03:23:12.708
Make some time to visit the 
office hours and App Reviews 

03:23:12.709 --> 03:23:16.392
tent to meet one-on-one with 
Googlers, ask all your technical

03:23:16.393 --> 03:23:17.206
questions and get feedback on 
your projects.  If you're 

03:23:17.207 --> 03:23:19.256
looking to network with Googlers
and fellow developers, join one 

03:23:20.274 --> 03:23:22.274
of the several meet-ups hosted 
in the Community Lounge.

03:23:27.560 --> 03:23:30.074
Finally, we'd like to visit you 
to visit the Sandbox Domes, 

03:23:30.075 --> 03:23:33.064
where you can explore, learn and
play with our latest

03:23:39.471 --> 03:23:39.881
products and platforms and 
interact with demos and physical

03:23:39.882 --> 03:23:41.498
installations and more. After 
sessions are done for the day, 

03:23:41.499 --> 03:23:41.919
stick around for food, drinks 
and music and fun and be 

03:23:41.920 --> 03:23:43.173
prepared for surprises along the
way. We would like to take this 

03:23:43.174 --> 03:23:46.032
opportunity to remind you we are
dedicated to providing an 

03:23:46.033 --> 03:23:48.033
inclusive event experience for 
everyone.

03:23:56.498 --> 03:23:57.299
And by attending Google I/O, you
agree to our Code of Conduct 

03:23:57.300 --> 03:23:59.343
posted throughout the venue. 
Your opinion is valuable to us. 

03:23:59.344 --> 03:24:03.344
After the event, look on the fur
feedback form to share your 

03:23:59.344 --> 03:24:01.344
experience.

03:24:02.604 --> 03:24:04.604
experience.Thanks for attending 
and have a 

03:24:08.121 --> 03:24:10.121
wonderful time exploring Google 
I/O.

03:24:32.179 --> 03:24:34.179
ANNOUNCER: At this time, please 
find your seat.

03:24:36.709 --> 03:24:38.709
Our session will begin soon.

03:25:20.410 --> 03:25:22.410
Is

03:25:58.907 --> 03:26:02.778
[ Applause ]
&gt;&gt; Hello, everybody.  Good 

03:26:02.779 --> 03:26:07.905
morning.  And welcome.  We are 
so kited to have you huer.  My 

03:26:07.906 --> 03:26:10.765
name is alley, I work on 
Firebase and I'm Product Manager

03:26:10.766 --> 03:26:14.266
on performance monitoring.
&gt;&gt; Hello, everyone.  I'm Jason a

03:26:14.267 --> 03:26:16.506
Project Manager on Firebase and 
work on crash littics.

03:26:17.932 --> 03:26:20.363
&gt;&gt; I'm an engineering manager on
Firebase and I work on crash 

03:26:20.364 --> 03:26:24.057
littics.  Thank you very much 
for coming today.  We are really

03:26:24.058 --> 03:26:26.126
Excited to talk to you about how
to improve your App's quality 

03:26:28.777 --> 03:26:31.616
and stability using Firebase 
tools.  But we want to start at 

03:26:31.617 --> 03:26:34.889
the beginning.  So you have got 
a great idea and you start to 

03:26:34.890 --> 03:26:36.890
code it up.

03:26:37.945 --> 03:26:40.191
You're spending a lot of time 
making sure that your App is  

03:26:40.192 --> 03:26:44.467
working, you're debugging, 
showing your friends, and it's 

03:26:44.468 --> 03:26:46.468
really exciting part of the 
journey.

03:26:47.732 --> 03:26:49.732
But how many people here have 

03:26:51.410 --> 03:26:53.884
experienced user's churning 
because of a bad experience once

03:26:53.885 --> 03:26:57.157
an App shifts to the App Store. 
It's happened to me too.  And 

03:26:57.158 --> 03:26:59.821
it's really frustrating.  And 
our metrics show that it's a big

03:27:02.063 --> 03:27:04.063
problem.

03:27:07.764 --> 03:27:09.612
42% of one-star reviews in the 
App Store specifically mention 

03:27:09.613 --> 03:27:14.105
stability and bugs.  This means 
that users are taking notice 

03:27:14.106 --> 03:27:15.947
when these problems exist in our
Apps and they are making note of

03:27:15.948 --> 03:27:17.948
them in the App Store, which is 
going to make it 

03:27:20.853 --> 03:27:22.853
harder for you to get and grow 
new  users.

03:27:25.416 --> 03:27:27.459
Not only that, but 62% of users 
uninstall an App after ad about 

03:27:28.302 --> 03:27:30.970
experience like this.  And in 
many of those cases, that is 

03:27:33.408 --> 03:27:35.713
after a first-time bad 
experience.  So you can imagine 

03:27:35.714 --> 03:27:38.983
this makes a huge difference in 
your ability to make your App a 

03:27:38.984 --> 03:27:40.984
business.

03:27:44.928 --> 03:27:47.665
On the flip side, 73% of 5-star 
reviews in the App Store 

03:27:47.666 --> 03:27:49.666
actually mention speed, design 
and usability.

03:27:51.768 --> 03:27:53.610
So users really appreciate when 
this is delightful in an App and

03:27:53.611 --> 03:27:55.662
they call it out.  That's really
exciting.

03:27:58.725 --> 03:28:01.409
And when it comes to App 
quality, the first step is 

03:28:01.410 --> 03:28:03.410
making sure that your App is 
throughly tested before you ever

03:28:04.881 --> 03:28:07.726
release to the App Store.
And Firebase test lab is your 

03:28:07.727 --> 03:28:09.727
best friend when it comes to 
that.

03:28:12.374 --> 03:28:15.241
As we announced yesterday, 
Firebase test lab is now 

03:28:15.242 --> 03:28:18.480
available across platform on iOS
and Android which is super  

03:28:18.481 --> 03:28:21.344
exciting.  And we really rely on
it heavily.

03:28:24.214 --> 03:28:27.480
We know testing is important but
it can be really hard.  And it 

03:28:27.481 --> 03:28:29.481
doesn't have to be.

03:28:30.757 --> 03:28:32.757
Because test lab does all the 
heavy lifting for you.

03:28:34.487 --> 03:28:36.487
With over 1000 devices ranging 
in 

03:28:37.763 --> 03:28:40.409
different device models, screen 
sizes, OSs, it's able to cover 

03:28:40.410 --> 03:28:43.067
all of the different use cases 
so you don't need to worry about

03:28:43.068 --> 03:28:47.370
it.  And there is the new 
accessibility report so it's not

03:28:47.371 --> 03:28:52.682
just testing whether or not your
App is stable or crashing, it's 

03:28:52.683 --> 03:28:54.910
actually helping you understand 
if it's useable, which is super 

03:28:54.911 --> 03:28:57.159
cool.  And it's really easy to 
get started.

03:29:01.431 --> 03:29:03.051
All you have to do is drag and 
drop your App binary and you're 

03:29:03.052 --> 03:29:07.528
able to get out-of-the-box test 
right away without having to 

03:29:07.529 --> 03:29:09.529
right any code and it will help 
you understand your performance,

03:29:10.388 --> 03:29:12.388
start up time, as well as 
crashes and a lot more.

03:29:14.277 --> 03:29:17.192
So you're able to be confident 
in your App's performance before

03:29:17.193 --> 03:29:19.449
you ever ship to the App Store. 
But we know it's only the 

03:29:19.450 --> 03:29:22.124
beginning of the story, right?  
Because it's pretty hard to 

03:29:22.125 --> 03:29:24.125
catch everything before it goes 
out to users.

03:29:26.831 --> 03:29:29.074
And we feel proud that users 
have trusted crash littics for 

03:29:29.075 --> 03:29:33.578
more than six years as your 
partner in understanding how 

03:29:33.579 --> 03:29:35.579
stable your App is.

03:29:37.835 --> 03:29:42.370
Crash lit 6 run -- generally 
available in fair base, which is

03:29:42.371 --> 03:29:47.144
really exciting.  It's our new 
home and really looking forward 

03:29:47.145 --> 03:29:48.362
to having closer ties with the 
other Firebase tools available 

03:29:48.363 --> 03:29:51.016
to make it the best possible 
experience for users.

03:29:53.254 --> 03:29:57.132
Crash littics is running on over
3 billion devices worldwide.  

03:29:57.133 --> 03:29:59.571
And that is pretty amazing 
because it means we are seeing a

03:29:59.572 --> 03:30:03.925
huge range of crash data across 
the world.  But what does it 

03:30:03.926 --> 03:30:07.614
mean in terms of the data that 
we are  processing?  Let's take 

03:30:07.615 --> 03:30:09.615
a look.
We process about 1.

03:30:13.367 --> 03:30:15.421
5 million events every second.  
That's about two billion events 

03:30:15.422 --> 03:30:21.405
per day.  What does it look like
in terms of users actually using

03:30:21.406 --> 03:30:24.062
an App that is crashing?  So 
imagine we are all here in sunny

03:30:27.357 --> 03:30:29.028
California and your phone 
crashes seven times while 

03:30:29.029 --> 03:30:31.264
walking around the conference.  
That would be pretty 

03:30:31.265 --> 03:30:34.729
frustrating.  There is a very 
good chance you're going to 

03:30:34.730 --> 03:30:36.764
uninstall that App and there is 
a pretty good chance you're 

03:30:36.765 --> 03:30:39.618
going to tell all your friends 
auto terrible and not to use it.

03:30:42.486 --> 03:30:45.156
Now imagine every person in the 
United States had a mobile phone

03:30:45.157 --> 03:30:48.198
and it crashed seven times 
today.  That is equivalent to 

03:30:48.199 --> 03:30:50.199
the amount of 

03:30:51.247 --> 03:30:53.247
data we are processing in our 
system every single day.

03:30:55.932 --> 03:30:57.189
It is a lot of data and it is 
really hard to understand what 

03:30:57.190 --> 03:31:00.843
you need to pay attention to.
Not only that, but when you get 

03:31:00.844 --> 03:31:05.574
a crash from the device, it 
looks like this.  It's pretty 

03:31:05.575 --> 03:31:07.625
hard to understand, right?  
Maybe if you look really  

03:31:07.626 --> 03:31:11.108
closely, you'll see some things 
that highlight your App but it's

03:31:11.109 --> 03:31:14.971
hard to figure out where to get 
started.  So crash littics takes

03:31:14.972 --> 03:31:19.458
all that data and all this 
information from the device and 

03:31:19.459 --> 03:31:21.526
we put it into a beautiful 
dashboard that makes it easy for

03:31:21.527 --> 03:31:23.979
you to understand what you need 
to focus on first.

03:31:27.034 --> 03:31:29.057
We have our crash-free user 
statistic at the top which is 

03:31:29.058 --> 03:31:31.529
the industry standard to 
understand how your App is 

03:31:31.939 --> 03:31:33.939
doing.

03:31:35.242 --> 03:31:37.242
We also have your session list, 
issue 

03:31:38.510 --> 03:31:41.158
list, which allows you to see 
right away what needs your 

03:31:41.159 --> 03:31:43.159
attention T shows you cigarette 
butts of information like if a 

03:31:45.237 --> 03:31:48.281
certain OS is seeing this issue 
more than others.  If there is 

03:31:48.282 --> 03:31:49.922
specific device that is have 
this problem, and so you're able

03:31:49.923 --> 03:31:51.923
to 

03:31:53.190 --> 03:31:55.190
know right off the bat what 
needs your attention.

03:31:55.620 --> 03:31:58.289
When you dig in further, you're 
able to see how this issue is 

03:31:58.290 --> 03:32:00.940
trending across different 
versions as well as the blame 

03:32:02.774 --> 03:32:05.428
frame where we think you should 
really start your debugging 

03:32:05.429 --> 03:32:07.429
process.

03:32:08.713 --> 03:32:10.971
It allows you to go confidently 
into triaging of an issue so 

03:32:10.972 --> 03:32:15.032
you're able to solve it quickly 
and get your users on to a 

03:32:15.033 --> 03:32:19.110
better path fast.  But we know 
you can't always be at your 

03:32:19.111 --> 03:32:20.797
computer it's not really 
possible.  So we have got your 

03:32:20.798 --> 03:32:26.359
back no matter where you are 
with realtime e-mails that let 

03:32:26.360 --> 03:32:28.360
you know if there is a stability

03:32:29.576 --> 03:32:31.646
issue with new issue, regressed 
issue or velocity alerts.  No 

03:32:31.647 --> 03:32:33.647
matter where you are, we have 
got your back.

03:32:35.370 --> 03:32:37.402
Now I'm going to pass it over to
alley, who is obsessed with 

03:32:37.403 --> 03:32:41.465
performance on our team.
&gt;&gt; Alley: Yes in, deed.  Thank 

03:32:41.466 --> 03:32:43.466
you.

03:32:45.541 --> 03:32:47.613
So as you heard, clearly App's 
ability plays a huge role in how

03:32:47.614 --> 03:32:50.678
your users perceive your App.  
Unfortunately, though, it 

03:32:50.679 --> 03:32:54.350
doesn't just stop there.  Users 
are also known to have a very 

03:32:55.574 --> 03:32:57.574
short attention span.

03:32:58.807 --> 03:33:01.891
They expect a highly performance
and smooth  experience.  And for

03:33:01.892 --> 03:33:03.892
this exact reason we went to 
work last year to build Firebase

03:33:04.955 --> 03:33:06.955
performance monitoring which we 

03:33:08.020 --> 03:33:10.020
announced this time at IO last 
year on 

03:33:12.573 --> 03:33:13.799
the same stage T supports IO.  
And androids and allows you to 

03:33:13.800 --> 03:33:16.851
report a lot of data about how 
your App performance from the 

03:33:16.852 --> 03:33:20.518
point of view of your users.
Now if you use performance 

03:33:20.519 --> 03:33:24.629
monitoring before, you probably 
know that in addition to being 

03:33:24.630 --> 03:33:27.880
able to instrument things that 
are accustomed to your App, you 

03:33:27.881 --> 03:33:29.922
also get a lot of data 
out-of-the-box just by 

03:33:29.923 --> 03:33:31.961
installing the  SDK.  You will 
get things like the network 

03:33:34.647 --> 03:33:37.915
activity between your App and 
the back end user.  So it will 

03:33:37.916 --> 03:33:40.172
report things like how often 
your endpoints fail or what 

03:33:42.248 --> 03:33:44.858
response latency your users are 
experiencing and we do that for 

03:33:44.859 --> 03:33:49.195
any backends whether third party
SDKs you have in your App or 

03:33:49.196 --> 03:33:52.878
your own managed services.
We also report App start 

03:33:52.879 --> 03:33:55.526
duration, a key metric because 
it ties into that first 

03:33:58.355 --> 03:34:00.355
impressions that your users get.

03:34:01.360 --> 03:34:03.360
And as of yesterday we started  
reporting rendering data.

03:34:04.385 --> 03:34:06.231
Now we tell you how often your 
App drops a frame and where this

03:34:06.232 --> 03:34:10.929
happens.  Now this is pretty 
important for any developer but 

03:34:10.930 --> 03:34:12.930
if you're a play developer 

03:34:13.993 --> 03:34:15.222
it's especially important F have
an App on the play store you 

03:34:15.223 --> 03:34:17.464
probably know that last year the
play developer console 

03:34:19.094 --> 03:34:22.550
introduced this new section 
called, Android vitals.  And 

03:34:22.551 --> 03:34:24.983
what it does is report a number 
of metrics that are key to your 

03:34:24.984 --> 03:34:27.232
success.  Naturally some of 
these metrics are performance 

03:34:27.233 --> 03:34:32.386
metrics.  You see an example 
right here in this case slow 

03:34:32.387 --> 03:34:35.277
rendering and a similar metric 
called frozen frame and they are

03:34:35.278 --> 03:34:38.762
both about how smoothly your 
animations and App in general 

03:34:38.763 --> 03:34:40.763
renders.

03:34:42.216 --> 03:34:42.839
No you for these let metrics we 
heard feedback from our 

03:34:42.840 --> 03:34:47.541
developers.  People love to have
this data but they don't know 

03:34:47.542 --> 03:34:49.542
how to act on it and where 

03:34:50.559 --> 03:34:51.978
exactly in the App this happens.
And that is exactly where 

03:34:51.979 --> 03:34:54.104
Firebase performance comes in.  
Because not only do we now 

03:34:54.105 --> 03:34:57.163
report these metrics 
out-of-the-box, but we also do 

03:34:57.164 --> 03:34:59.164
it per screen.

03:35:01.022 --> 03:35:03.271
So if your Android, we'll show 
you the number of frozen frames 

03:35:03.272 --> 03:35:08.827
or slow frames per Android 
activity and also  for iOS, we 

03:35:08.828 --> 03:35:11.698
do the same thing, we show you 
these numbers for controllers.  

03:35:11.699 --> 03:35:14.373
So you get a lot of extra 
context this way to help you get

03:35:14.374 --> 03:35:15.998
started on fixing the shall.  
We'll see an example of how this

03:35:15.999 --> 03:35:19.893
works in a second but first, I 
want to talk a little bit about 

03:35:19.894 --> 03:35:21.894
the reception that we seen with 
Firebase performance.

03:35:23.997 --> 03:35:26.441
The last time we talked about 
this was back in October at the 

03:35:26.442 --> 03:35:30.315
Firebase summit in Amsterdam and
we were super Excited to tell 

03:35:30.316 --> 03:35:32.351
you we were processing as many 
as 30 billion performance events

03:35:32.352 --> 03:35:37.716
per day.  And since then, only 
six months later, this number 

03:35:37.717 --> 03:35:40.384
has grown to 100 billion events 
per day.  So we couldn't be more

03:35:40.385 --> 03:35:44.237
excited about the trajectory we 
are seeing and about the quality

03:35:44.238 --> 03:35:45.895
of the feedback and the 
reception that our developers 

03:35:45.896 --> 03:35:47.896
has given to us.

03:35:49.360 --> 03:35:50.568
So please keep it coming T will 
only help us make the product 

03:35:50.569 --> 03:35:52.569
better.

03:35:54.648 --> 03:35:57.738
Now, as you can imagine, this is
a lot of data to go through.  

03:35:57.739 --> 03:35:59.406
And if you're a developer that 
is looking to improve your App, 

03:35:59.407 --> 03:36:01.407
this can be 

03:36:02.857 --> 03:36:06.790
a little bit of intimidating, a 
lo the ever data to assist 

03:36:02.857 --> 03:36:07.842
through through and because of 
that, our console is now getting

03:36:07.843 --> 03:36:10.891
better.  We now have a new 
feature called, the issue feeds,

03:36:10.892 --> 03:36:12.892
which helps you identify 

03:36:14.225 --> 03:36:15.466
the top performance issues you 
have and appears right at the 

03:36:15.467 --> 03:36:18.771
top of the main page in the 
performance console.  So we'll 

03:36:18.772 --> 03:36:21.417
tell you things like, how often 
your endpoints fail or if your 

03:36:21.418 --> 03:36:25.678
App start is slow so that you 
can spend much less time sifting

03:36:25.679 --> 03:36:27.679
through that data and 

03:36:29.764 --> 03:36:31.764
more time acting on it and 
fixing issues.

03:36:32.619 --> 03:36:34.878
And finally, if you're around 
for the Firebase session 

03:36:34.879 --> 03:36:37.111
yesterday, you heard that 
Firebase performance is now 

03:36:37.514 --> 03:36:41.826
generally available.  We have 
data as of yesterday and we are 

03:36:41.827 --> 03:36:43.827
really Excited about how battle 

03:36:44.914 --> 03:36:46.943
tested our SDKs are on iOS and 
Android about the overall value 

03:36:46.944 --> 03:36:50.667
our developers have found with 
performance monitoring.  So if 

03:36:50.668 --> 03:36:53.345
you haven't tried it so far, now
would be a great time to do so.

03:36:53.542 --> 03:36:55.542
All right, so let's get to the 
fun part.

03:36:59.287 --> 03:37:01.287
I'm going to invite alley back 
on 

03:37:02.747 --> 03:37:05.609
stage so she can tell us how she
got to use these products in 

03:37:05.610 --> 03:37:09.731
building one of our own Apps.
&gt;&gt; Thank you.  So you just heard

03:37:09.732 --> 03:37:11.732
a good overview of these 
different products but we really

03:37:13.430 --> 03:37:15.879
wanted to talk about how this 
actually looks in an App and how

03:37:15.880 --> 03:37:18.956
it works with the timeline as 
you build and release your 

03:37:18.957 --> 03:37:20.997
application.
We are going to specifically 

03:37:20.998 --> 03:37:22.998
focus on 

03:37:24.299 --> 03:37:25.924
the Firebase App quality tools 
but it's worth noting that 

03:37:25.925 --> 03:37:28.377
friendly picks uses a lot of 
other Firebase tools like 

03:37:30.241 --> 03:37:32.283
functions, databases, storage 
and auth.  So it is has a lot of

03:37:32.284 --> 03:37:35.137
good innocence there and you can
check out the code for yourself.

03:37:35.138 --> 03:37:39.200
Friendly picks allows you to 
take a photo and upload it and 

03:37:39.201 --> 03:37:41.201
share it with your friends.

03:37:43.482 --> 03:37:45.530
Here is jays son taking a 
picture of his dog Percy, which 

03:37:45.531 --> 03:37:48.375
he does a lot and putting a 
caption with it and sharing it. 

03:37:48.376 --> 03:37:52.861
It's pretty simple.  And our 
first step was making sure that 

03:37:52.862 --> 03:37:54.862
it was well tested.

03:37:56.315 --> 03:37:58.169
We partnered and used test lab 
heavily to make sure this worked

03:37:58.170 --> 03:38:02.884
well and we could ship  
confidently.  And when we looked

03:38:02.885 --> 03:38:04.329
at our dashboard, we noticed 
that there was a problem right 

03:38:04.330 --> 03:38:07.857
away.  We saw that a test was 
failing.  And this was pretty 

03:38:07.858 --> 03:38:12.376
surprising to us because we had 
all been playing with the App 

03:38:12.377 --> 03:38:14.377
and we hasn't seen anything 
problems.

03:38:15.211 --> 03:38:17.461
We were able to go to the 
video's tab and see a simulation

03:38:17.462 --> 03:38:22.452
of this crash actually happening
on a device which was super 

03:38:22.453 --> 03:38:24.453
helpful in debugging the 
problem.

03:38:25.938 --> 03:38:28.620
You can see here that we are 
uploading a photo.  Okay and 

03:38:28.621 --> 03:38:30.650
it's freezing and then it 
crashings.  So that was really 

03:38:30.651 --> 03:38:33.126
important to catch early and 
make sure that we had a good 

03:38:34.334 --> 03:38:36.334
experience for users.  This 
allowed us to ship to the App 

03:38:38.200 --> 03:38:41.070
Store with confidence because we
knew we were going to have a 

03:38:41.071 --> 03:38:43.071
good experience for our users.

03:38:44.527 --> 03:38:46.765
Now I'll pass it off to JASN who
is keeping an eye on stability 

03:38:46.766 --> 03:38:49.453
for friendly picks.Ed.

03:38:52.940 --> 03:38:54.575
&gt;&gt; JASN: So I want to walk you 
through real scenario that 

03:38:54.576 --> 03:38:59.054
happened shortly after we 
shipped friendly picks.  So I 

03:38:59.055 --> 03:39:01.087
went in to upload a photo, most 
likely of Percy which I'm super 

03:39:01.088 --> 03:39:05.977
excited you got to see a picture
of, and the App crashed for me 

03:39:05.978 --> 03:39:07.978
and it crashed  immediately on 
launching it.

03:39:10.051 --> 03:39:11.693
Which was surprising because as 
we discussed we tested it 

03:39:11.694 --> 03:39:16.419
manually and ran it through test
lab and things were smooth and 

03:39:16.420 --> 03:39:19.061
we hadn't shipped any recent 
changes.  So I immediately log 

03:39:19.062 --> 03:39:23.150
in and go to crash  littics and 
notice a huge drop in crash free

03:39:23.151 --> 03:39:27.826
users.  Clearly not just me 
experiencings this issue cra.  

03:39:27.827 --> 03:39:30.099
And it's attributed to one 
spectacular issue.  So I dive in

03:39:30.100 --> 03:39:32.559
to see what is going on.  I can 
see a big spike with this issue 

03:39:34.011 --> 03:39:36.011
and I look at what is going on.

03:39:38.098 --> 03:39:40.552
Something to do with MD user 
dictionary.  I talked to other 

03:39:40.553 --> 03:39:43.222
folks to see what is going on 
and what we realized is the web 

03:39:47.118 --> 03:39:49.771
team shipped a change that was 
allowing users to upload a photo

03:39:49.772 --> 03:39:51.833
without a user name.  They 
weren't sitting it to null.

03:39:54.908 --> 03:39:56.908
And our iOS client was expecting
null in those scenarios.

03:39:58.980 --> 03:40:00.020
So it was causing a crash.  It 
was crashing immediately on 

03:40:00.021 --> 03:40:02.089
launch because the first post 
trying to load.

03:40:03.533 --> 03:40:05.533
So pretty simple fix.

03:40:06.806 --> 03:40:08.648
We made the iOS map more 
resilient do non-null and 

03:40:08.649 --> 03:40:10.649
shipped the change to make sure 
the web client was setting those

03:40:13.357 --> 03:40:15.986
scenarios to null, and we 
documented what happened.  So 

03:40:15.987 --> 03:40:18.451
crash littics has a great future
called, notes.  In notes, I can 

03:40:18.452 --> 03:40:20.452
document exactly what I just 
walked through to tell other 

03:40:21.972 --> 03:40:24.231
members of our team what was 
going on, how we fixed it, why 

03:40:24.232 --> 03:40:28.309
we fixed it and this is really 
great to make sure you don't 

03:40:28.310 --> 03:40:29.939
sort of relive some of the same 
mistakes if you use a bug 

03:40:29.940 --> 03:40:34.243
tracking system, you can put a 
ticket in there.  You see we 

03:40:34.244 --> 03:40:36.244
captured the bug, put it  away. 
Hopefully it doesn't regress and

03:40:37.088 --> 03:40:40.136
escape.  We are all set up for 
now.

03:40:42.993 --> 03:40:44.825
The next thing I did is make 
sure that change actually was 

03:40:44.826 --> 03:40:50.367
fixed.  So you can see here that
I'm pinning one.1 the recent 

03:40:50.368 --> 03:40:55.291
version that we just shipped to 
the App Store and pin builds is 

03:40:55.292 --> 03:40:57.292
a really great feature in crash 

03:40:58.332 --> 03:41:00.332
littics because if you're one of
those development teams that is 

03:41:00.333 --> 03:41:03.941
always turning out QA builds or 
Beta builds or local builds, you

03:41:03.942 --> 03:41:05.942
may have a long list of versions
and by  pinning the most 

03:41:07.200 --> 03:41:08.636
relevant ones to the top you can
get access to the ones that are 

03:41:08.637 --> 03:41:12.332
in the App Store so it's easy to
keep those top of mind.

03:41:14.778 --> 03:41:16.449
So I filtered on to that and 
noticed that there are still a 

03:41:16.450 --> 03:41:21.327
few issues I needed to deal with
but luckily that prevalent one 

03:41:21.328 --> 03:41:24.002
we just fix said no longer 
there.  So, what I want to make 

03:41:24.003 --> 03:41:28.284
sure here, what I wanted to make
sure is that that never happened

03:41:28.285 --> 03:41:29.915
again where I was the one that 
tested and found out what was 

03:41:29.916 --> 03:41:32.992
going on or maybe someone on my 
team.  I wanted to know about it

03:41:32.993 --> 03:41:36.897
right away.  And maybe I wasn't 
paying attention to the e-mails 

03:41:36.898 --> 03:41:39.787
that tally was mentioning.  But 
I do spend a lot of time in 

03:41:39.788 --> 03:41:42.636
slack.
So maybe as you heard yesterday 

03:41:42.637 --> 03:41:46.515
in the what's new in Firebase 
talk, in the integrations tab, 

03:41:46.516 --> 03:41:49.803
we now have the ability to 
config slack.  We wanted to take

03:41:49.804 --> 03:41:53.468
advantage of this.  So super 
easy.  Just need to copy and 

03:41:53.469 --> 03:41:56.360
paste your slack web hook URL 
and set the channel you want the

03:41:56.361 --> 03:41:58.596
notifications to go to.  So in 
our case it's the friendly picks

03:42:02.658 --> 03:42:04.658
iOS room where my team is monare
toking 

03:42:05.723 --> 03:42:07.539
this and I want new issues, 
regressed issues and velocity 

03:42:07.540 --> 03:42:09.540
alerts.

03:42:11.634 --> 03:42:13.458
And velocity alert is when one 
issue is causing a significant 

03:42:13.459 --> 03:42:15.694
portion of all your issues to 
crash.  That's something you 

03:42:15.695 --> 03:42:17.695
want to pay attention to.

03:42:19.172 --> 03:42:21.258
This issue would have triggered 
a velon the U.S. alert.  So 

03:42:21.259 --> 03:42:23.747
hopefully I don't get one of 
those in the future but at least

03:42:23.748 --> 03:42:26.605
it will come through in slack 
where I'm paying attention to.

03:42:29.643 --> 03:42:32.329
Ment I'm going to turn it over 
to alley who will tell us what 

03:42:32.330 --> 03:42:34.330
is going on with performance 
while  debugging this.

03:42:37.634 --> 03:42:40.706
&gt;&gt; Alley: Cool.  So I'm curious 
myself how performance is going.

03:42:44.369 --> 03:42:47.216
So, we'll stay in the Firebase 
console but switch over to the 

03:42:47.217 --> 03:42:50.509
performance page.  And we land 
there.  When we land there, the 

03:42:50.510 --> 03:42:54.394
first thing I see are the 
dashboard tab and the number of 

03:42:54.395 --> 03:42:57.034
high-level metrics about how my 
App is performing.  So I see 

03:42:57.035 --> 03:42:58.929
things like the duration of 
different parts of the App, 

03:42:58.930 --> 03:43:01.588
network success rate over the 
last 30 days, 

03:43:04.842 --> 03:43:08.137
network response latency by 
country ask so on.  What I'm 

03:43:08.138 --> 03:43:09.557
curious about is how friendly 
picks is performing on the 

03:43:09.558 --> 03:43:12.438
device.
So I'm going to go ahead and 

03:43:12.439 --> 03:43:15.097
click on that tab and when I do 
that, I see a couple of 

03:43:15.098 --> 03:43:19.579
sections.  The first one 
duration, tells me things like 

03:43:19.580 --> 03:43:23.053
how long App start is taking in 
this case it is 2.4 seconds and 

03:43:23.054 --> 03:43:25.293
it sounds about reasonable.  The
second section I see here is the

03:43:25.922 --> 03:43:30.628
rendering data.  This is the new
feature I was talking about.  

03:43:30.629 --> 03:43:32.275
And if you look at it, you can 
see there is a couple of metrics

03:43:32.276 --> 03:43:37.798
being reported here.  Slow 
frames and frozen frames.  Slow 

03:43:37.799 --> 03:43:39.799
frames are basically any frames 

03:43:41.286 --> 03:43:42.291
that take more than 16 
milliseconds to render and 

03:43:42.292 --> 03:43:44.737
therefore deviate from that 
ideal 60 frames per second 

03:43:44.738 --> 03:43:46.989
standard that we always want to 
have in our animations.

03:43:49.028 --> 03:43:50.653
Frozen frames on the other hand 
are frames that take more than 

03:43:50.654 --> 03:43:52.654
700 

03:43:54.521 --> 03:43:57.187
milliseconds and therefore 
create this noticeable freeze 

03:43:57.188 --> 03:43:59.188
that interrupts the user flow.

03:44:00.861 --> 03:44:01.890
For each one of these two 
metrics, we report the values 

03:44:01.891 --> 03:44:06.793
per  screen.  So since we are 
dealing with iOS App in this 

03:44:06.794 --> 03:44:08.794
case, we see it per the 
controller.

03:44:10.082 --> 03:44:12.328
If you look closely, you can see
that the animation view 

03:44:12.329 --> 03:44:16.596
controller specifically has a 
higher percentage of slow frames

03:44:16.597 --> 03:44:18.430
compared to other screens.  So 
this is obviously not a great 

03:44:18.431 --> 03:44:20.431
thing and I want to look into a 
bit more.

03:44:23.137 --> 03:44:25.137
So I'm going to click on it and 
I land 

03:44:26.599 --> 03:44:28.415
on this details page that 
details out the characteristics 

03:44:28.416 --> 03:44:33.314
of slow frame rendering for that
screen.  And I can see that the 

03:44:33.315 --> 03:44:38.417
breakdown of versions that I 
have, this part I see at the top

03:44:38.418 --> 03:44:39.829
left of the page, shows me that 
there is no significant 

03:44:39.830 --> 03:44:44.547
difference between the last few 
versions.  So this is not 

03:44:44.548 --> 03:44:46.548
necessarily regression 

03:44:48.042 --> 03:44:50.042
that got introduced because of 
my --

03:44:50.911 --> 03:44:52.987
If I scroll down, I can see a 
breakdown of the percentage of 

03:44:52.988 --> 03:44:56.051
slow frames by a number of 
attributes.  By things like 

03:44:56.052 --> 03:44:58.052
which devices the users were on,
which App versions they were 

03:44:59.508 --> 03:45:03.825
using, and which countries they 
were based in.  And specifically

03:45:03.826 --> 03:45:05.826
for device, I can see 

03:45:07.312 --> 03:45:09.554
a couple of warnings on the 
iphone 5 and the I pad air and 

03:45:09.555 --> 03:45:13.432
they tell me that these two 
devices specifically have a much

03:45:13.433 --> 03:45:16.508
higher percentage of slow frames
compared to other devices.  Now 

03:45:16.509 --> 03:45:20.984
this makes sense.  These are 
older devices and I would expect

03:45:20.985 --> 03:45:22.823
their rendering is not going to 
be as smooth as some of the 

03:45:22.824 --> 03:45:26.722
newer ones but the cool thing 
here is using this data, I can 

03:45:26.723 --> 03:45:28.760
specifically target these 
devices and give them a 

03:45:28.761 --> 03:45:32.615
different treatment so for 
instance, I can show less 

03:45:32.616 --> 03:45:34.941
animations or no  animations for
these users so they can have an 

03:45:34.942 --> 03:45:37.975
overall better experience.  And 
just like that, we found our 

03:45:37.976 --> 03:45:39.976
first 

03:45:41.248 --> 03:45:44.112
insight using the console data 
and we dealt with it by having a

03:45:44.113 --> 03:45:45.331
targeted experience.
Cool?

03:45:45.332 --> 03:45:49.031
A.So I'm going to ship this fix 
and now we can see our App is 

03:45:49.032 --> 03:45:53.555
growing.  It's expanding to new 
users and markets.  We are 

03:45:53.556 --> 03:45:55.814
getting a lot of reviews coming 
in.  A lot are good reviews, 

03:45:55.815 --> 03:45:57.852
which is a great thing.  I want 
to jump back into the 

03:45:59.470 --> 03:46:01.929
performance console and see how 
things are.  And when I do that,

03:46:01.930 --> 03:46:05.210
I notice that there is an issue 
now that popped up that I did 

03:46:05.211 --> 03:46:09.911
not have before.  And this issue
tells me my image service has 

03:46:09.912 --> 03:46:12.146
been taking longer to respond in
the last few  days.

03:46:16.248 --> 03:46:18.072
If I click on it, I can see a 
detailed overtime chart that 

03:46:18.073 --> 03:46:20.521
shows that over the last seven 
days or so, there has been a 

03:46:22.545 --> 03:46:25.395
significant  percentage of 
samples that have  exceeded the 

03:46:25.396 --> 03:46:28.835
network threshold we  have, 
which is two seconds.  This is 

03:46:28.836 --> 03:46:32.097
the default network threshold we
have.  You can tweak this if it 

03:46:32.098 --> 03:46:35.158
doesn't make sense for your 
specific use case.  In here we 

03:46:35.159 --> 03:46:37.159
will stick with the default 

03:46:38.256 --> 03:46:40.256
threshold and try to examine why
this is happening.

03:46:42.132 --> 03:46:44.575
Now if I scroll down, and look 
at my breakdowns, I can see that

03:46:44.576 --> 03:46:49.120
users in India have been 
specifically  experiencing 

03:46:49.121 --> 03:46:52.830
higher network latency compared 
to other users.  Now, I have a 

03:46:52.831 --> 03:46:54.831
theory on why this might be 
happening.

03:46:57.917 --> 03:46:59.787
I think this is happening 
because this is an service that 

03:46:59.788 --> 03:47:01.788
we have not been 

03:47:03.068 --> 03:47:04.847
using image compression so far 
and users with typically slower 

03:47:04.848 --> 03:47:07.321
data connections will have a 
harder time fetching these 

03:47:07.522 --> 03:47:13.432
images.  How do a make sure my 
hypothesis is correct?  The 

03:47:13.433 --> 03:47:15.433
answer obviously is an 
experiment.

03:47:15.669 --> 03:47:17.669
So I'm going to jump back into 
my code 

03:47:18.915 --> 03:47:20.915
and create a custom trace and 
have it 

03:47:21.973 --> 03:47:24.039
trap the logic I used to fetch 
these images and for that trace,

03:47:24.040 --> 03:47:27.309
called image fetch, I'm going to
set a custom attribute, call it 

03:47:27.310 --> 03:47:29.310
compression, and turn 

03:47:31.377 --> 03:47:34.234
it on and off depending on which
variant.  Experiment you're in. 

03:47:34.235 --> 03:47:36.258
Now I'm going to ship this code 
and a couple of days later I'll 

03:47:36.259 --> 03:47:39.924
jump back into the console and 
check out the details I have for

03:47:39.925 --> 03:47:42.152
image fetch trace I just 
created.  And I can see that in 

03:47:42.153 --> 03:47:44.592
addition to the traditional 
breakdowns I have, I also 

03:47:48.255 --> 03:47:49.695
now have a compression, this 
custom attribute, and I can see 

03:47:49.696 --> 03:47:53.790
the difference in performance 
specifically in network latency 

03:47:53.791 --> 03:47:55.656
is huge between the cases where 
compression is on and 

03:47:55.657 --> 03:47:57.899
compression is  off.
So now I have the data that I 

03:47:57.900 --> 03:48:01.994
need to make sure that 
compression is the right fix.  

03:48:01.995 --> 03:48:04.623
And I can go ahead and role it 
out to every user.  So the cool 

03:48:04.624 --> 03:48:08.137
thing here is that not only did 
we find out about an issue using

03:48:08.138 --> 03:48:10.576
our console when we didn't know 
it existed, but we also used the

03:48:10.577 --> 03:48:12.859
console to monitor the effects 
of the fix and make 

03:48:16.765 --> 03:48:18.765
sure that it had the intended 
effects.

03:48:20.658 --> 03:48:21.271
But now, it looks like we have a
new slack notification that is 

03:48:21.272 --> 03:48:23.272
complaining about a new fatal 
crash.

03:48:26.184 --> 03:48:28.829
So I'm going to let yea son take
a look at this.

03:48:32.316 --> 03:48:33.738
&gt;&gt; JASN: So, it's a bummer we 
got a crash but great that I 

03:48:33.739 --> 03:48:37.027
immediately knew about this.  
So, clicking through from slack,

03:48:37.028 --> 03:48:41.718
takes me directly into the issue
details page.  So, I noticed a 

03:48:41.719 --> 03:48:43.587
few things immediately about 
this issue that are a little bit

03:48:43.588 --> 03:48:49.075
unique.  One is that it's not in
my main App code.  The problem 

03:48:49.076 --> 03:48:52.751
is actually in a system library,
photo library severances.  And 

03:48:52.752 --> 03:48:54.800
the second thing is that there 
is a bit of data at the top and 

03:48:54.801 --> 03:48:59.700
this is what we call a crash 
insight and a crash insight is 

03:48:59.701 --> 03:49:01.730
actually a solution to what is 
going on here.

03:49:05.026 --> 03:49:05.869
So as tally mentioned earlier, 
we get billions of crashes a 

03:49:05.870 --> 03:49:07.870
day.

03:49:08.909 --> 03:49:09.726
As you can imagine, not every 
one is unique to each 

03:49:09.727 --> 03:49:13.373
application.  Many of those 
crashes are common across 

03:49:13.374 --> 03:49:15.407
thousands of applications.  
Typically those common crashes 

03:49:15.408 --> 03:49:17.408
are 

03:49:18.879 --> 03:49:20.937
either programming errors or 
issues in third party libraries 

03:49:20.938 --> 03:49:23.167
or issues in the system 
framework.  And in our case, 

03:49:23.168 --> 03:49:25.817
what we are doing wrong is, we 
are trying to access the 

03:49:28.884 --> 03:49:30.313
camera role to upload a photo 
before the user granted 

03:49:30.314 --> 03:49:32.314
permission.

03:49:33.392 --> 03:49:35.639
So maybe this is API misuse or 
race condition.  Either way, 

03:49:35.640 --> 03:49:37.475
it's a common error that many 
other developers are 

03:49:37.476 --> 03:49:42.159
experiencing and I know exactly 
how to solve it right here.  

03:49:42.160 --> 03:49:43.369
There is documentation that 
points to what I'm doing wrong 

03:49:43.370 --> 03:49:45.370
and how to address it.

03:49:46.857 --> 03:49:48.857
So, huge timesaver.  Saved us a 
lot of time debugging and 

03:49:49.703 --> 03:49:51.703
looking through documentation.  
So if you get a crash and it has

03:49:53.365 --> 03:49:56.061
insight on it, I definitely 
recommend you take a aspect make

03:49:56.062 --> 03:50:00.748
sure that you read up on what it
is telling you to do because it 

03:50:00.749 --> 03:50:02.749
could save you a ton of time as 
well.

03:50:03.401 --> 03:50:05.401
Now if this crash didn't have an
insight 

03:50:06.842 --> 03:50:07.866
on it, there was another great 
integration you could have used 

03:50:07.867 --> 03:50:12.358
for free out-of-the-box with 
crash littics, is what we call, 

03:50:12.359 --> 03:50:14.359
breadcrumbs.

03:50:16.488 --> 03:50:17.134
So crash  littics automatically 
integrates with Google Analytics

03:50:17.135 --> 03:50:20.602
for Firebase and when a crash 
occurs, we send through all the 

03:50:20.603 --> 03:50:22.603
events that were recorded in 
that session.

03:50:25.307 --> 03:50:26.740
So, what the actions the user is
doing, so you can see here there

03:50:26.741 --> 03:50:31.864
is a bunch of screen views and 
the last thing in this session 

03:50:31.865 --> 03:50:35.315
was the user tried to access the
image picker controller.  Which 

03:50:35.316 --> 03:50:36.961
makes sense because if you think
back to the crash, or what the 

03:50:36.962 --> 03:50:41.028
problem was at the insight 
telling us, is that we were 

03:50:41.029 --> 03:50:42.267
trying to access the camera role
before they granted permission.

03:50:42.268 --> 03:50:46.933
So, even if we didn't have the 
insight on to this crash, we 

03:50:46.934 --> 03:50:48.934
could have probably 

03:50:50.412 --> 03:50:52.859
retraced the user steps with 
breadcrumbs got ourselves into 

03:50:52.860 --> 03:50:55.091
that same scenair arrow.  These 
are two great things you get 

03:50:57.164 --> 03:50:59.164
out-of-the-box to upon had you 
debug.

03:51:00.447 --> 03:51:02.917
But we wanted to step up our 
debugging game by adding more 

03:51:02.918 --> 03:51:07.809
metadata and adding more are 
code to the App and one of those

03:51:07.810 --> 03:51:09.810
things we used was what we call,
custom keys.

03:51:11.482 --> 03:51:14.123
Now, you can think of custom 
keys as like contextural queues 

03:51:14.124 --> 03:51:16.782
to what is going on in the 
application.  So maybe that is 

03:51:16.783 --> 03:51:20.137
the level of the game.  Level 
equals 10.  Maybe that's a 

03:51:20.138 --> 03:51:22.811
really buggy level.  Or how many
items the user stored in the 

03:51:22.812 --> 03:51:26.692
shopping cart.  Because maybe 
those are indicative of what is 

03:51:26.693 --> 03:51:28.693
going on and what the problem is
with the application.

03:51:31.214 --> 03:51:32.435
And in our case, we had a hunch 
there was something going on 

03:51:32.436 --> 03:51:36.735
with what we thought the 
indexies of posts were in the 

03:51:36.736 --> 03:51:37.985
database versus locally on the 
device when trying to delete 

03:51:37.986 --> 03:51:39.986
them.

03:51:41.250 --> 03:51:43.250
We thought something was getting
out of sync and causing a crash.

03:51:44.094 --> 03:51:45.719
We wanted to understand that 
context so instrumented custom 

03:51:45.720 --> 03:51:47.720
keys.  Here is an example.

03:51:51.728 --> 03:51:53.728
One line of code logging the key
for 

03:51:55.186 --> 03:51:57.186
our function and the same things
in our update deletes function.

03:51:59.269 --> 03:52:01.103
You can download this in GitHub 
but I wanted to highlight how 

03:52:01.104 --> 03:52:03.347
simple that was.
And it shows up in crash littics

03:52:03.348 --> 03:52:07.828
like this.  So, right in the 
same area you see the stack 

03:52:07.829 --> 03:52:10.058
trace and the breadcrumbs, you 
canny see the keyys and what he 

03:52:10.059 --> 03:52:12.059
we 

03:52:13.136 --> 03:52:14.153
thought at the time of the crash
was for intdecks and database 

03:52:14.154 --> 03:52:18.861
this helped us debug a super 
tricky crash.  So something I 

03:52:18.862 --> 03:52:21.901
recommend taking advantage of 
for yourself when you want to 

03:52:21.902 --> 03:52:23.943
know context of what is going on
when the App is crashing.

03:52:26.585 --> 03:52:27.617
Now another thing we used was 
what is called user identifier.

03:52:27.618 --> 03:52:31.273
This is something that your 
customer support team will 

03:52:31.274 --> 03:52:33.274
really, really like.

03:52:34.355 --> 03:52:36.177
So setting user identifiers is 
similar to custom keys, one line

03:52:36.178 --> 03:52:41.548
of code.  And it shows up in 
crash littics like this.  Now 

03:52:41.549 --> 03:52:43.391
that might not look super useful
at first but what can you do is 

03:52:43.392 --> 03:52:45.392
map that 

03:52:47.464 --> 03:52:49.096
user ID to the user that is 
logged in or using your 

03:52:49.097 --> 03:52:50.942
application so when someone 
writes in to customer support 

03:52:50.943 --> 03:52:55.633
and says, hey, I'm having a bad 
experience or the App always 

03:52:55.634 --> 03:52:58.495
crashes to me when I try to do 
X, Y or Z, you can rectify their

03:52:58.496 --> 03:53:02.750
situation.  Maybe retrace their 
steps with breadcrumbs, issue 

03:53:02.751 --> 03:53:04.796
them a refund, tell them they 
need to update their version.

03:53:08.884 --> 03:53:09.507
Turn a negative experience into 
a positive experience really 

03:53:09.508 --> 03:53:11.556
super charge your debugging 
capabilities.

03:53:13.792 --> 03:53:16.465
So those are a few extra things 
you can do in addition to the 

03:53:16.466 --> 03:53:21.178
out-of-the-box insights in 
breadcrumbs with custom keys and

03:53:21.179 --> 03:53:23.031
user IDs for crash littics.  
What I'm going to do now is turn

03:53:23.032 --> 03:53:26.173
it back to tally to review 
everything we did to improve the

03:53:26.174 --> 03:53:28.904
performance and stability of 
friendly picks.

03:53:32.411 --> 03:53:34.411
&gt;&gt; Tally: Thank you.

03:53:36.773 --> 03:53:38.671
So that was our full journey and
we know it was just one example 

03:53:38.672 --> 03:53:43.666
of what this could like like for
all of you.  We started coming 

03:53:43.667 --> 03:53:48.668
up with an idea and coding up an
App.  It was really exciting.  

03:53:48.669 --> 03:53:51.552
We partnered early with Firebase
test lab to make sure we had a 

03:53:51.553 --> 03:53:55.454
high-quality experience and we 
could ship to the App Store with

03:53:55.455 --> 03:54:00.673
confidence.  After we shipped to
the App Store, we depended 

03:54:00.674 --> 03:54:01.934
heavily on Firebase crash 
littics and performance to make 

03:54:01.935 --> 03:54:04.419
sure we had the best possible  
experience.

03:54:07.568 --> 03:54:10.007
We were able to alert to new 
issues quickly, triage and 

03:54:10.008 --> 03:54:12.891
resolve them fast.  We saw 
growth of our App and expanded 

03:54:13.529 --> 03:54:15.529
to new markets.

03:54:17.036 --> 03:54:19.537
And we dug in deeper with 
advanced features.  We did all 

03:54:19.538 --> 03:54:21.538
of this so that you could focus 
on what you really want to focus

03:54:24.039 --> 03:54:25.505
on most, which is building new 
features and delighting your 

03:54:25.506 --> 03:54:28.073
users.
We know no one wants to spend 

03:54:28.074 --> 03:54:32.260
their day worrying about the 
quality and stability of their 

03:54:32.261 --> 03:54:34.796
App and that is why we created 
these tools.  So we are able to 

03:54:34.797 --> 03:54:37.318
have your back so you can focus 
on what you want to do most.

03:54:40.025 --> 03:54:44.181
We also have your back when it 
comes to security and privacy.  

03:54:44.182 --> 03:54:46.182
We are excited by may 25, we 
will be 

03:54:47.340 --> 03:54:48.998
fully GDPR compliant so you can 
continue to serve your users no 

03:54:48.999 --> 03:54:51.912
matter where I that are in the 
world because we know that is 

03:54:51.913 --> 03:54:53.148
really important.
Thank you very much for coming 

03:54:53.149 --> 03:54:57.557
today.  We really appreciate 
your time.  If you want to dig 

03:54:57.558 --> 03:55:00.888
in deeper with test lab, there 
is another session tomorrow at  

03:55:00.889 --> 03:55:07.083
9:30 a.m. on autonomous and 
customized prelaunch testing.  

03:55:07.084 --> 03:55:08.337
It should be really cool so 
check it out.  Thank you so  

03:55:08.338 --> 03:55:10.338
much.
[ Applause ]

04:08:33.909 --> 04:08:35.909
&gt;&gt; Realtime captions on this 
screen.

04:21:38.506 --> 04:21:40.506
&gt;&gt; ANNOUNCER: At this time, 
please find your seat.

04:21:42.772 --> 04:21:44.772
We will begin soon.

04:24:41.210 --> 04:24:45.410
ANNOUNCER: At this time, please 
find your seat.  We will begin 

04:24:41.210 --> 04:24:43.210
soon.

04:26:07.741 --> 04:26:10.980
&gt;&gt; MYLES BORINS: Hi, thank you 
very much for joining us today. 

04:26:10.981 --> 04:26:13.025
How are you doing?  Todayy woo 
are going to be  talking to 

04:26:17.143 --> 04:26:19.143
you about growing your App on 
GCP.

04:26:20.401 --> 04:26:22.401
First I'd like to introducaga.  
A developer advocate.

04:26:26.307 --> 04:26:29.156
Aga loves Ruby, dinosaurs, 
robots and of course cats.

04:26:30.379 --> 04:26:32.423
&gt;&gt; AJA HAMMERLY: Miles is a 
developer advocate on the Cloud 

04:26:32.424 --> 04:26:37.123
team with me and she also the 
Director of the Nosed technical 

04:26:37.124 --> 04:26:38.785
steering committee and loves 
music and getting down with his 

04:26:38.786 --> 04:26:40.786
tech friends.

04:26:43.898 --> 04:26:45.317
Earlier this week we stumbled 
across dim somand had to pause 

04:26:45.318 --> 04:26:49.226
our rehearsal and had to have 
dumplings before we could 

04:26:49.227 --> 04:26:50.849
continue.
&gt;&gt; MYLES BORINS: I had them all.

04:26:50.850 --> 04:26:54.714
&gt;&gt; AJA HAMMERLY: We spent part 
of our careers at startups for 

04:26:54.715 --> 04:26:56.715
both of us.

04:26:58.238 --> 04:27:00.671
Y we know what it is like to 
growing it in adapting it as 

04:27:00.672 --> 04:27:05.164
your user base shifts.  We know 
picking the right tools for the 

04:27:05.165 --> 04:27:06.788
job at the right time is a 
balancing act of costs versus 

04:27:06.789 --> 04:27:09.219
benefits versus skillsets.  And 
today we are here to show you 

04:27:09.220 --> 04:27:12.715
that the Google Cloud Platform 
has products that will work for 

04:27:12.716 --> 04:27:14.716
you no matter what phase you're 
at and what your current 

04:27:17.239 --> 04:27:20.101
struggles are.
&gt;&gt; MYLES BORINS: So, once upon a

04:27:20.102 --> 04:27:22.102
time, 

04:27:23.577 --> 04:27:25.577
there was a start-up.

04:27:26.836 --> 04:27:30.086
Cat facts.  Has anyone heard of 
cat facts before?  Raise your 

04:27:30.087 --> 04:27:34.168
hands.  A few of you.
&gt;&gt; AJA HAMMERLY: We might be 

04:27:34.169 --> 04:27:37.024
old, miles.
&gt;&gt; MYLES BORINS: This might be 

04:27:37.025 --> 04:27:41.134
an old joke.  Cat facts is a 
service about getting facts 

04:27:41.135 --> 04:27:42.356
about cats.
&gt;&gt; AJA HAMMERLY: So some quick 

04:27:42.357 --> 04:27:49.062
facts about our cat facts App.  
We already have an MVP.  We are 

04:27:49.063 --> 04:27:51.097
running on some provider 
somewhere in a VM because 

04:27:51.098 --> 04:27:53.098
originally we were running on my
laptop and we have 

04:27:55.936 --> 04:27:58.835
some OS and the database and App
are all running in that 

04:27:58.836 --> 04:28:02.278
environment because that's how I
had it on my laptop and we are 

04:28:02.279 --> 04:28:04.279
using Node because of miles and 
we 

04:28:05.335 --> 04:28:07.373
are using some no SQL database. 
I don't want to have do deal 

04:28:07.374 --> 04:28:10.019
with  dealing with the schema as
we are rapidly iterating.

04:28:13.881 --> 04:28:14.285
And we are doing e-mail 
integration through a thursday 

04:28:14.286 --> 04:28:16.286
party because I don't want to 
deal with email.

04:28:18.161 --> 04:28:20.414
&gt;&gt; MYLES BORINS: So like cats, 
the  VMs we use are a little 

04:28:20.415 --> 04:28:23.911
temperamental.  We only have one
at a time.  It's very precious.

04:28:27.383 --> 04:28:28.607
But it also can get kind of 
angry if you try to pet it too 

04:28:28.608 --> 04:28:32.888
quickly.  And we really have to 
take care of it.  There is no 

04:28:32.889 --> 04:28:34.889
real rooms with you have a 

04:28:36.995 --> 04:28:38.207
single Virtual Machine for 
errors.

04:28:38.208 --> 04:28:40.486
&gt;&gt; AJA HAMMERLY: So miles is 
going to show us quick what the 

04:28:40.487 --> 04:28:42.686
MVP looks like because most of 
you are not familiar 

04:28:46.986 --> 04:28:48.614
with the joy that is cat facts.
&gt;&gt; MYLES BORINS: As you can see 

04:28:48.615 --> 04:28:51.291
here, we have cat facts.  You're
going to sign up with your 

04:28:54.377 --> 04:28:56.377
e-mail address and I'm going to 
make one up.

04:28:59.457 --> 04:29:01.457
OMG  cats@cats.biz.

04:29:03.401 --> 04:29:03.795
We are going to submit it and we
subscribed to cat facts and get 

04:29:03.796 --> 04:29:05.796
a 

04:29:07.922 --> 04:29:08.321
response letting us know we have
successfully subscribed and 

04:29:08.322 --> 04:29:10.322
every day 

04:29:11.994 --> 04:29:14.482
we'll get an e-mail with a new 
fact and a new cat with a new 

04:29:14.483 --> 04:29:16.483
cat fact.

04:29:17.548 --> 04:29:19.398
Back to youaga.
&gt;&gt; AJA HAMMERLY: Thank you, 

04:29:19.399 --> 04:29:24.524
miles.  So, our cat facts App 
wants to move to the Cloud.  And

04:29:24.525 --> 04:29:27.851
we are going to be using GCP 
because we are here at Google.  

04:29:27.852 --> 04:29:34.155
O.  So what are the reasons why 
people want to move?  A lot of 

04:29:34.156 --> 04:29:36.417
the reasons is  people's 
investors want them to.  They 

04:29:36.418 --> 04:29:38.655
know it gives you a lot of 
flexibility to grow rapidly if 

04:29:38.656 --> 04:29:42.726
your App takes off and it's also
relatively easy of what the 

04:29:42.727 --> 04:29:47.415
costs will be.  People are 
comfortable with it now.  You 

04:29:47.416 --> 04:29:49.025
might also want to move to the 
Cloud because you don't have an 

04:29:49.026 --> 04:29:52.892
opposite team.  Our App, it's 
just the two of us.  We don't 

04:29:52.893 --> 04:29:55.175
have an opposite team and you 
might want to move to GCP 

04:29:55.176 --> 04:29:57.176
because you trust Google.  You 
know it's running on the same 

04:29:59.245 --> 04:30:01.692
hardware and data center is 
where we run YouTube and search 

04:30:01.693 --> 04:30:03.693
and Gmail and we keep those up 
so we should be able to keep 

04:30:04.745 --> 04:30:06.745
your App up too.

04:30:10.537 --> 04:30:11.350
So, we have a VM to run VMos on 
GCP works will be using Google 

04:30:11.351 --> 04:30:14.806
Compute Engine.  This is on the 
Cloud service.

04:30:18.493 --> 04:30:19.705
We can make an exact combination
of CP.

04:30:19.706 --> 04:30:20.921
And ram right for serving our 
cat facts.  So I'm going to pick

04:30:20.922 --> 04:30:24.191
something that looks like my DEV
box because I know that works.

04:30:24.192 --> 04:30:28.322
&gt;&gt; MYLES BORINS: So, if we want 
to move a VM over to Google 

04:30:28.323 --> 04:30:30.576
Cloud Platform, there is a 
couple of different ways to 

04:30:34.049 --> 04:30:36.694
do T we can spit out a fresh VM 
and build everything up or try 

04:30:36.695 --> 04:30:38.936
to find a way to orchestrate it 
through tools such  

04:30:43.237 --> 04:30:44.053
asancible chef or puppet, or 
have file system images you move

04:30:44.054 --> 04:30:46.368
over.  But it's going to be a 
manual process 

04:30:49.433 --> 04:30:52.880
to move this over.  So VMs are 
awesome.  And there is a lot of 

04:30:52.881 --> 04:30:55.966
things that I like about VMs.  
You have really fast start up 

04:30:55.967 --> 04:31:00.500
times so you can see from the 
second that you spin up the VM 

04:31:00.501 --> 04:31:04.621
it will be like 30 seconds until
it is available and ready to use

04:31:04.622 --> 04:31:06.657
and once it is running, it's 
available all the time.  You 

04:31:06.658 --> 04:31:08.275
don't have to worry about how 
fast it will boot off after 

04:31:08.276 --> 04:31:12.966
that.  From that, you can ma 
make images and quickly boot up 

04:31:12.967 --> 04:31:14.967
in the future at any 

04:31:16.211 --> 04:31:18.039
time and customize the specks.  
How much memory, CPU, and really

04:31:18.040 --> 04:31:22.970
dial it in.  If you need 
graphics cards you can do that. 

04:31:22.971 --> 04:31:25.631
If you need  TPUs for doing 
sensor flow, you can do that.  

04:31:25.632 --> 04:31:27.632
It's extremely flexible.  Make 
it as big or small as you want 

04:31:28.487 --> 04:31:30.487
and it's very familiar.

04:31:32.801 --> 04:31:35.684
So if you know the  winders 
server, just get that spun up 

04:31:35.685 --> 04:31:37.685
quickly and, 

04:31:39.154 --> 04:31:41.154
working in an environment you 
know.

04:31:42.045 --> 04:31:44.071
&gt;&gt; AJA: So a list of stuff to 
consider here.  We have to 

04:31:44.072 --> 04:31:49.051
consider process management, 
security updates, upgrades, we 

04:31:49.052 --> 04:31:51.052
need to consider scaling.  We 
have to be responsible for doing

04:31:52.143 --> 04:31:53.992
all of those security patches.  
If something bad happens, I 

04:31:53.993 --> 04:31:57.043
don't know how many of you were 
working in the industry when 

04:31:57.044 --> 04:31:58.685
heart bleed happened but I was 
working consulting at that point

04:31:58.686 --> 04:32:02.584
and it was a very frantic 
morning for us as we patched a 

04:32:02.585 --> 04:32:07.082
whole bunch of VMs.  You also 
know you have to do backups and 

04:32:07.083 --> 04:32:09.722
disaster recovery and 
provisioning and you have to do 

04:32:09.723 --> 04:32:11.723
database replication 

04:32:12.986 --> 04:32:14.003
and that's my least favorite 
task.  And our opposite team is 

04:32:14.004 --> 04:32:18.137
just the two of us.  And we 
don't have the time to deal with

04:32:18.138 --> 04:32:22.471
all of that stuff.  So, we are 
going to move to highly-managed 

04:32:22.472 --> 04:32:24.297
services.
Specifically I want to start 

04:32:24.298 --> 04:32:29.427
with the database because I 
don't want to do database 

04:32:29.428 --> 04:32:31.428
replication.

04:32:32.687 --> 04:32:34.393
So we'll move to Google's 
databases where we can get 

04:32:34.394 --> 04:32:36.394
services like that and 

04:32:37.692 --> 04:32:39.692
disaster recovery taken care of 
us for us.

04:32:41.552 --> 04:32:43.552
Google has SQL options and Cloud
SQL 

04:32:45.325 --> 04:32:46.148
and we support My SQL and post 
crest.  And if you have 

04:32:46.149 --> 04:32:48.149
something that is similar 
high-throughput and you need to 

04:32:49.410 --> 04:32:51.022
do a lot of writes, nude 
consistency and you need to be 

04:32:51.023 --> 04:32:53.023
global scale, we have Cloud 
Spanner, which is amazing.

04:32:58.049 --> 04:32:58.657
It can do so much stuff and it 
almost violates the cap fair but

04:32:58.658 --> 04:33:00.658
not quite.

04:33:01.929 --> 04:33:03.929
And then data store, our no SQL 
option 

04:33:06.847 --> 04:33:09.726
what we are going to be useing 
in this demo and then fire 

04:33:09.727 --> 04:33:12.600
store, which is not on the slide
but is part of fire way and 

04:33:14.022 --> 04:33:16.022
similar to data store.
&gt;&gt; MYLES BORINS: Now we have the

04:33:17.270 --> 04:33:18.926
database moved over, we want to 
figure out where to run the 

04:33:18.927 --> 04:33:20.927
application.

04:33:22.414 --> 04:33:24.336
How many people in the audience 
used App Engine before?  

04:33:24.337 --> 04:33:26.337
Awesome!

04:33:27.555 --> 04:33:28.789
So you know all the amazing 
benefits about moving to uponna 

04:33:28.790 --> 04:33:31.632
engine.  It's our managed 
platform as a service.

04:33:34.880 --> 04:33:37.736
We love App Engine because there
is no ops.  It has integrated 

04:33:37.737 --> 04:33:41.795
data store.  When you deploy on 
App Engine, you have https 

04:33:41.796 --> 04:33:46.301
already ready for you.  You have
idiomatic run times.  I love 

04:33:46.302 --> 04:33:48.746
this as a NodeJS developer.  I 
can write my App and test it 

04:33:48.747 --> 04:33:51.422
locally and deploy to the Cloud.
It will run exactly the way I 

04:33:51.423 --> 04:33:55.364
expect it to run.  And if I need
to run it somewhere else it will

04:33:55.365 --> 04:33:57.829
just work.
Also, all the container images 

04:33:57.830 --> 04:34:02.817
we use for App Engine flex are 
available on GitHub so if you 

04:34:02.818 --> 04:34:05.459
want to fork them, add to them, 
it's easy for you to do that.

04:34:09.944 --> 04:34:11.383
&gt;&gt; AJA: So, now we have got 
someone else dealing with the 

04:34:11.384 --> 04:34:13.421
operations of our App and we 
demo for you but the demo for 

04:34:15.269 --> 04:34:17.924
showing it runnings on App en 
judge in is, nothing changed so 

04:34:17.925 --> 04:34:22.621
we'll skip that part.  So now we
can factor out bits of our App 

04:34:22.622 --> 04:34:26.077
and add new features, which is 
what I really want to be doing. 

04:34:26.078 --> 04:34:27.586
I want to make cool stuff and I 
don't want to deal with pagers.

04:34:32.089 --> 04:34:33.318
So, first thing we'll pull out 
is your App mails you cat facts 

04:34:33.319 --> 04:34:35.319
and Weis don't 

04:34:36.437 --> 04:34:38.469
really have to run the mailer in
the frontend on the same machine

04:34:38.470 --> 04:34:40.517
so miles will tell us what to do
next with the mailer.

04:34:41.740 --> 04:34:44.573
&gt;&gt; MYLES BORINS: So, when we 
originally wrote this 

04:34:44.574 --> 04:34:48.484
application for our MVP, as we 
said, we have everything.  The 

04:34:48.485 --> 04:34:52.350
database was in the VM.  The 
single Node App did everything. 

04:34:52.351 --> 04:34:57.048
And this isn't super flexible.  
It's not going to scale nicely. 

04:34:57.049 --> 04:34:58.511
It's not going to have nice 
abstractions and it won't be 

04:34:58.512 --> 04:35:00.512
reusable.

04:35:01.974 --> 04:35:04.635
One of the first things we 
decided to extract out was our 

04:35:04.636 --> 04:35:06.636
cat facts as a service.

04:35:08.333 --> 04:35:10.180
So we were able to go and maybe 
AJA, do you want to get into and

04:35:10.181 --> 04:35:12.181
describe it?

04:35:13.295 --> 04:35:15.526
&gt;&gt; AJA: I'm going to show you, 
we moved all of our stuff to 

04:35:15.527 --> 04:35:17.767
Cloud Functions like miles said.
We moved the mailer and we also 

04:35:17.768 --> 04:35:20.840
moved some other stuff there but
the first thing we need to do is

04:35:20.841 --> 04:35:24.504
build out a function to get us 
cat facts.  So this is some code

04:35:24.505 --> 04:35:26.337
to retrieve cat facts from the 
database and a picture to go 

04:35:26.338 --> 04:35:28.338
with it.

04:35:29.838 --> 04:35:32.665
You can see we are just doing 
basicca data star queries here 

04:35:32.666 --> 04:35:36.948
and we are ordering and pulling 
one thing back and I have 

04:35:36.949 --> 04:35:39.437
updated time stamps and then we 
just send back a very basic JSON

04:35:39.438 --> 04:35:42.926
payload and a status Code of  
2000.  It really took 10 minutes

04:35:42.927 --> 04:35:46.786
to write this code and most of 
that was remembering how data 

04:35:46.787 --> 04:35:48.787
store and Java script worked 
together.

04:35:50.482 --> 04:35:52.330
Miles was talking about the 
e-mails so he will go into the 

04:35:52.331 --> 04:35:54.331
code for e-mail and talk about 
how we approached that.

04:35:55.387 --> 04:35:57.387
&gt;&gt; MYLES BORINS: So part of the 
reason 

04:35:58.662 --> 04:35:59.672
we decided to move the e-mail 
tore a Cloud function is because

04:35:59.673 --> 04:36:03.360
e-mail is not a service that is 
running in hot code.  It's not 

04:36:03.361 --> 04:36:06.466
going to necessarily affect the 
user experience.  So you saw the

04:36:06.467 --> 04:36:10.325
demo where I signed up with my 
e-mail address.  I want to get 

04:36:10.326 --> 04:36:13.026
the response from the server 
giving me confirmation we signed

04:36:15.065 --> 04:36:17.728
up once your e-mail address is 
in data store.  Once that is 

04:36:17.729 --> 04:36:20.180
done, we don't need to wait for 
a e-mail to go out to send a  

04:36:20.786 --> 04:36:22.786
confirmation to the user.

04:36:23.833 --> 04:36:25.833
So we send a message out on 
Pub/Sub to send an  e-mail.

04:36:27.532 --> 04:36:29.393
We have a generic e-mail server 
that creates a client and sends 

04:36:29.394 --> 04:36:31.394
a request 

04:36:33.557 --> 04:36:35.599
with the data to who the e-mail 
is going to and who is e-mailing

04:36:35.600 --> 04:36:37.837
it and the subject and the body.
This can be reused throughout 

04:36:37.838 --> 04:36:42.562
our application.  So the exact 
same Cloud function is running 

04:36:42.563 --> 04:36:44.596
to send an e-mail who you 
subscribe and also sending an 

04:36:44.597 --> 04:36:49.373
e-mail every single day whenever
new facts go out.  And by 

04:36:49.374 --> 04:36:51.010
splitting it out into a Cloud 
function, it's able to scale up 

04:36:51.011 --> 04:36:55.145
with our load as we have more 
people subscribing.  It's able 

04:36:55.146 --> 04:36:57.230
to be used for different things.
And it's able to believe its own

04:36:57.231 --> 04:37:00.482
code we can think about 
independently.  And if we ever 

04:37:00.483 --> 04:37:03.962
want to change our e-mail Serbs 
for example, we can just change 

04:37:03.963 --> 04:37:06.617
the Cloud function as long as we
adhere to the same API, the rest

04:37:06.618 --> 04:37:08.654
of the services don't need to 
change at all.

04:37:11.320 --> 04:37:13.143
&gt;&gt; AJA: And so we talked about 
adding new features and one of 

04:37:13.144 --> 04:37:17.837
the things I wanted to add was 
cat facts bot because I really 

04:37:17.838 --> 04:37:20.870
like Chat bots.  They are a lot 
of fun.  And our team uses hang 

04:37:20.871 --> 04:37:23.824
outs Chat which is sooner cool. 
And so I written a Hangouts Chat

04:37:23.825 --> 04:37:27.524
bot and one of the bring things 
both the mailer and the bo the 

04:37:27.525 --> 04:37:31.800
use the same underlying cat 
facts service and all of the 

04:37:31.801 --> 04:37:33.801
Hangouts Chatted bot does is 

04:37:34.853 --> 04:37:36.883
reformats the facts and picture 
payload into the form that 

04:37:36.884 --> 04:37:39.730
Hangouts Chat requires.  All I 
have to do is call out to the 

04:37:41.972 --> 04:37:44.864
cat facts service, get a fact 
back, and then send back a 200 

04:37:44.865 --> 04:37:46.865
with the JSON 

04:37:49.387 --> 04:37:53.462
package the exact way the 
Hangouts Chat expects it.  And 

04:37:53.463 --> 04:37:55.463
it was really fast and easy.  
Because it's running in Cloud 

04:37:57.173 --> 04:37:59.173
Functions, if 100,000 people hit
my 

04:38:00.445 --> 04:38:01.873
Hangouts Chat bot to get their 
cat facts at the same time, it's

04:38:01.874 --> 04:38:06.174
fine.  And if no one wants cat 
facts right now, that's also 

04:38:06.175 --> 04:38:08.653
fine.  Cloud function has scale 
automatically to what I need at 

04:38:08.654 --> 04:38:12.375
the time.  And so, I really like
it because I don't know if cat 

04:38:12.376 --> 04:38:15.642
facts is going to take off.  
Maybe people don't want cat 

04:38:15.643 --> 04:38:17.643
facts in their Chat box.

04:38:20.997 --> 04:38:23.232
But miles can show you that Chat
bot right news.  And you're 

04:38:23.233 --> 04:38:25.233
going to see pictures of my 
cats.

04:38:26.074 --> 04:38:28.074
&gt;&gt; MYLES BORINS: Here you can 
see we are 

04:38:30.211 --> 04:38:32.211
in Hangouts Chat and we have a 
bot.

04:38:33.464 --> 04:38:36.129
I can go like, hey bot, give me 
aicality.  And the bot will 

04:38:36.130 --> 04:38:38.795
think about it for a second it's
making a call to the Cloud 

04:38:40.221 --> 04:38:42.858
function and getting the data 
and it comes back with a cat and

04:38:42.859 --> 04:38:44.904
a fact that each cat and owner 
have their own unique 

04:38:45.529 --> 04:38:47.529
vocabulary.

04:38:52.255 --> 04:38:54.754
And we can message it again, 
hey, more cats.  And we give it 

04:38:54.755 --> 04:38:57.056
a second to think about a new 
cat and a new fact and it gets 

04:38:59.095 --> 04:39:02.584
back to us with the same cat.  
And the same fact.  And that is 

04:39:02.585 --> 04:39:05.623
how you know this is a real  
demo.

04:39:06.241 --> 04:39:08.695
[ Laughs ]
Back to you AJA.

04:39:12.807 --> 04:39:15.442
&gt;&gt; AJA: So, what happened is we 
have -- I hadda a time out.  I 

04:39:15.443 --> 04:39:17.528
did not sufficiently put enough 
time in my Chat bot to do the 

04:39:17.529 --> 04:39:20.810
update on my query because we 
are trying to pull the most 

04:39:20.811 --> 04:39:24.519
recently used.  I spent time 
debugging that yesterday but I'm

04:39:24.520 --> 04:39:25.951
sorry you saw the broken 
version.  But you know it's 

04:39:25.952 --> 04:39:29.442
real.  So miles will talk a 
little bit about the 

04:39:29.443 --> 04:39:31.054
architecture we ended up with.  
And then we'll talk about one of

04:39:31.055 --> 04:39:34.140
the last compute options you 
have available on  GCP.

04:39:35.971 --> 04:39:38.430
&gt;&gt; MYLES BORINS: So, we have 
been talking through all these 

04:39:38.431 --> 04:39:42.524
different services but thought 
this diagram would give a clear 

04:39:42.525 --> 04:39:44.525
idea of how we architected it.

04:39:45.988 --> 04:39:47.834
We have a frond ent running on 
App Engine taking user requests 

04:39:47.835 --> 04:39:49.835
and when you 

04:39:52.779 --> 04:39:55.271
sign up, it is adding a user and
then requesting a cat fact from 

04:39:55.272 --> 04:39:57.272
the cat fact 

04:39:58.569 --> 04:40:00.569
function and then submitting an 
event to 

04:40:03.066 --> 04:40:05.066
Pub/Sub to let it know this in 
an  e-mail.

04:40:06.584 --> 04:40:09.398
Pub/Sub is triggering the 
function listening for new 

04:40:09.399 --> 04:40:11.455
e-mail events and e-mailing it 
out.  The task  scheduler is 

04:40:11.456 --> 04:40:15.573
another App Engine App.  If you 
didn't know, you can actually 

04:40:16.829 --> 04:40:18.829
make cron jobs using App Jen sin
to set 

04:40:22.132 --> 04:40:22.752
up it to sex cute App Engine 
rest calls besides certain 

04:40:22.753 --> 04:40:26.664
amounts of time.  So the task 
scheduler is set to run on a 

04:40:26.665 --> 04:40:30.722
daily basis.  It gets a list of 
all the people who subscribed 

04:40:30.723 --> 04:40:32.797
every day and then sets a new 
task in the Pub/Sub queue for 

04:40:32.798 --> 04:40:35.023
every single person to send them
a new fact.

04:40:38.075 --> 04:40:41.363
The e-mailer goes and grabs the 
cat fact and sends it out.  What

04:40:41.364 --> 04:40:43.802
is really cool about this too is
you will notice we have multiple

04:40:44.618 --> 04:40:46.618
services calling to the cat 
facts service.

04:40:49.149 --> 04:40:51.411
We have the chalet bot also 
calling and we can build a whole

04:40:51.412 --> 04:40:53.882
fleet of services depending on 
the kind of service you want to 

04:40:53.883 --> 04:40:55.883
use.

04:40:58.761 --> 04:41:00.468
We can make e-mailers, SMS, Chat
bots, IRC bots, and they can all

04:41:00.469 --> 04:41:03.151
use the same microservice to 
scale up based on how much load 

04:41:03.152 --> 04:41:06.602
there is.  Maybe we find out 
that people don't like e-mail 

04:41:06.603 --> 04:41:09.402
anymore and we need to piaffes 
on the to SMS.  We are ready to 

04:41:09.403 --> 04:41:11.900
do that and don't have to do 
much refactorring to our 

04:41:13.759 --> 04:41:15.579
architecture to support that.
&gt;&gt; AJA: That the point, let's 

04:41:15.580 --> 04:41:19.480
just pretend that cat facts is 
the new  hotness and it is 

04:41:19.481 --> 04:41:22.343
wildly successful and we have 
hundreds of millions of users 

04:41:23.754 --> 04:41:26.413
gets the cat pictures on a daily
basis.  So if that happens, 

04:41:26.414 --> 04:41:28.854
which we hope will happen, we 
will be able to hire someone to 

04:41:28.855 --> 04:41:30.855
help us with operations.  And 
when I talked to my friends in 

04:41:34.559 --> 04:41:35.166
operations, one of them said, we
need to consider Google 

04:41:35.167 --> 04:41:37.167
Kubernetes everyone gin.  I was 
talking to her about it and said

04:41:38.678 --> 04:41:40.678
it will give us more flexibility
with 

04:41:42.554 --> 04:41:43.579
our architecture while retaining
many of the benefits of App 

04:41:43.580 --> 04:41:47.462
Engine Cloud functions and 
especially work well for us 

04:41:47.463 --> 04:41:49.902
because we already moved towards
our microservices architecture 

04:41:49.903 --> 04:41:51.903
with a bunch 

04:41:54.023 --> 04:41:55.845
of different scalable 
components&gt;&gt; MYLES BORINS: You 

04:41:55.846 --> 04:41:59.165
may be asking yourself, what is 
a Kubernetes?  How many people 

04:41:59.166 --> 04:42:02.023
in the audience used Kubernetes 
so far?  So you're not asking 

04:42:02.024 --> 04:42:04.024
what is a Kubernetes.

04:42:05.946 --> 04:42:07.946
But for those who haven't, 
Kubernetes 

04:42:09.259 --> 04:42:12.104
is the Greek word for Helms man.
And it is a service that is 

04:42:12.714 --> 04:42:14.714
open-source.

04:42:16.189 --> 04:42:18.451
It's in the CNCF, Cloud data 
compute foundation and it is for

04:42:18.452 --> 04:42:23.399
orchestrating and scaling Docker
containers and production.  It's

04:42:23.400 --> 04:42:25.864
a way of setting up Cloud 
architecture and designed and 

04:42:25.865 --> 04:42:30.131
based on the Google internal 
architecture polar.  So a lot of

04:42:30.132 --> 04:42:32.777
the lessons and things we 
learned about making scalable 

04:42:32.778 --> 04:42:34.778
services, were all used to 
inspire the 

04:42:37.866 --> 04:42:39.866
architecture of Kubernetes.

04:42:42.785 --> 04:42:44.785
On our next slide we will show 
what  

04:42:45.868 --> 04:42:47.868
aiama file looks like for 
Kubernetes.

04:42:49.757 --> 04:42:51.757
&gt;&gt; AJA: Here is a example for 
engine X container.

04:42:54.894 --> 04:42:56.138
The big thing to be aware of, 
this is something folks found 

04:42:56.139 --> 04:42:58.579
challenging.  Unlike when you're
doing scripting to 

04:43:01.844 --> 04:43:03.258
make your VMs  reproducible, all
of that is focused on the how 

04:43:03.259 --> 04:43:06.988
and you want to install this 
thing and this thing and change 

04:43:06.989 --> 04:43:09.862
these ports and set up this kind
of load balancer.  Kubernetes 

04:43:09.863 --> 04:43:11.863
you need to describe what a 

04:43:12.904 --> 04:43:14.904
happy, wonderful, good state is 
for your product.

04:43:17.488 --> 04:43:19.564
This many versions of this 
container, this many versions, 

04:43:19.565 --> 04:43:21.565
and this kind of load balancer 
and Kubernetes does 

04:43:23.564 --> 04:43:25.399
everything in its 4 keep that 
happy state.  So if one of your 

04:43:25.400 --> 04:43:29.688
Nodes magically one of your VMs 
gets hit by lightening in the 

04:43:29.689 --> 04:43:31.555
center of your data center, 
Kubernetes will take what was 

04:43:31.556 --> 04:43:33.790
running on that Node and put it 
to other places in 

04:43:37.059 --> 04:43:38.892
a way to make sure that your App
is as close to that running 

04:43:38.893 --> 04:43:43.052
state that happy state that you 
want it to be.  And it takes a 

04:43:43.053 --> 04:43:45.088
little bit of work for a lot of 
peoples to get their head around

04:43:45.089 --> 04:43:47.730
the fact you don't explain how 
to get there.  You use the 

04:43:47.731 --> 04:43:52.859
concepts built into Kubernetes, 
pods, services, deployments, to 

04:43:52.860 --> 04:43:56.161
describe what a successfully 
running App looks like.

04:43:58.411 --> 04:44:00.856
So, miles mentioned it a bit. In
that example I was using the 

04:44:00.857 --> 04:44:05.614
engine X Docker container.  What
is a Docker?  One of the things 

04:44:05.615 --> 04:44:07.615
I asked when people 

04:44:08.880 --> 04:44:10.880
are trying to teach me about 
Kubernetes.

04:44:13.587 --> 04:44:15.587
And Docker is a conner format 
and the 

04:44:17.304 --> 04:44:19.601
container is a way of packaging 
up run time and the files in the

04:44:19.602 --> 04:44:21.602
dependency to go with it.

04:44:23.957 --> 04:44:26.448
You can put multiple of them on 
a VM and don't have to deal with

04:44:26.449 --> 04:44:30.753
dependency conflicts.  When I 
was  working in opposite, one of

04:44:30.754 --> 04:44:33.205
the things we had was three 
different parts of the 

04:44:33.206 --> 04:44:35.206
microservices and they were each
releasing slightly different 

04:44:37.908 --> 04:44:40.340
versions of Ruby gems or various
sea libraries and installing 

04:44:40.341 --> 04:44:44.875
them together side-by-side was a
problem and we had to get three 

04:44:44.876 --> 04:44:46.876
teams to agree on which version 
we were going to standardize on.

04:44:48.576 --> 04:44:50.648
With Docker you can package up 
an App and run it next to an App

04:44:50.649 --> 04:44:54.553
with very different dependency 
on the same machine and you get 

04:44:54.554 --> 04:44:57.195
much better utilization and you 
get safety.  The other nice 

04:44:57.196 --> 04:45:01.705
thing about using containers and
Docker is that since you're 

04:45:01.706 --> 04:45:03.741
packaging a container, you seem 
to have less for example with 

04:45:03.742 --> 04:45:07.813
the works in DEV and doesn't 
work in prod situation.  Which I

04:45:07.814 --> 04:45:09.965
spent many hours banging my head
against.  And when you read 

04:45:09.966 --> 04:45:12.429
about this, you'll see stuff 
about name spaces and sea 

04:45:16.131 --> 04:45:18.131
groups and all that but the big 
thing 

04:45:19.993 --> 04:45:22.651
is, running application withings
key pendency and file system 

04:45:22.652 --> 04:45:24.740
packaged up neatly.
&gt;&gt; MYLES BORINS: What you can 

04:45:24.741 --> 04:45:30.304
see on the screen now is fairly 
straightforward Docker file.  We

04:45:30.305 --> 04:45:32.383
are starting from an image that 
is published by the NodeJS 

04:45:32.384 --> 04:45:34.384
project.

04:45:37.253 --> 04:45:39.267
Carbon is the eight.X branch for
LT.

04:45:42.895 --> 04:45:45.332
And if you go from NodeJS:  
Carbon-Alpine, we will grab the 

04:45:45.333 --> 04:45:49.005
latest published version running
on an App  pine-based operating 

04:45:49.006 --> 04:45:52.350
system is.  It's a very, very 
thin operating system designed 

04:45:52.351 --> 04:45:54.351
specifically for running in 
Docker containers.

04:45:57.227 --> 04:45:59.279
If you're looking for fast boots
and thin images, Alpine is a 

04:45:59.280 --> 04:46:01.394
good place tow get started.  We 
are copying the file system from

04:46:04.452 --> 04:46:05.875
the folder we are running in 
directly into the image and we 

04:46:05.876 --> 04:46:10.144
will run the command, MPM and 
install production.  That 

04:46:10.145 --> 04:46:12.169
production flag makes sure 
you're DEV dependency don't get 

04:46:12.170 --> 04:46:15.092
installed and it's important to 
run all of the commands to set 

04:46:15.093 --> 04:46:18.957
up your environment before 
you're running in production.  

04:46:18.958 --> 04:46:20.784
So this will make sure all the 
dependency you need are there, 

04:46:20.785 --> 04:46:24.933
there there ising in in that 
image you don't need for running

04:46:24.934 --> 04:46:27.180
in that production and then the 
command MPM start will boot 

04:46:27.790 --> 04:46:29.790
everything up.  That command 
gets run when the Docker 

04:46:30.680 --> 04:46:33.547
container is started.  MPM start
is a really great way to boot 

04:46:33.548 --> 04:46:35.806
things up.  It's something you 
pult in your backage JSON 

04:46:35.807 --> 04:46:39.324
script.  If anyone has more 
questions about Best Practices 

04:46:39.325 --> 04:46:41.334
for setting up Node 
applications, please feel free 

04:46:41.335 --> 04:46:43.335
to grab 

04:46:44.820 --> 04:46:47.270
me after the talk.
&gt;&gt; AJA: One of the things I 

04:46:47.271 --> 04:46:50.803
mentioned in my definition of 
Docker is sea group.  What is a 

04:46:50.804 --> 04:46:52.804
sea group?  That's out of scope 
for this talk.

04:46:55.493 --> 04:46:57.493
So you can come talk to me -- 
there is 

04:46:58.548 --> 04:47:00.174
container office hours and also 
office hours on Google Cloud's 

04:47:00.175 --> 04:47:04.046
open-source projects in the 
office hours space and folks 

04:47:04.047 --> 04:47:05.888
from the Kubernetes project will
be there if you want to talk in 

04:47:05.889 --> 04:47:07.918
detail about the implementation.

04:47:11.174 --> 04:47:12.608
So, why would you maic the 
switch to Kubernetes?  This is 

04:47:12.609 --> 04:47:14.657
the question I get the most when
I'm in the field talking to 

04:47:14.658 --> 04:47:20.177
folks at events or at meet-ups 
and you don't have to.  There is

04:47:20.178 --> 04:47:22.206
a lot of folks who are like, 
Kubernetes is the new holtness, 

04:47:22.207 --> 04:47:25.461
I have to use Kubernetes.  If 
what you have works for you, 

04:47:25.462 --> 04:47:27.462
great.

04:47:29.322 --> 04:47:30.538
App Engines, Cloud Functions or 
VMs or any combination of those 

04:47:30.539 --> 04:47:32.539
like we had 

04:47:33.839 --> 04:47:35.052
with our cat facts App, they are
a fine way to run your App 

04:47:35.053 --> 04:47:39.155
indefinitely.  If if works don't
fix it.  But containers provide 

04:47:39.156 --> 04:47:41.452
some advantages around  
portability, predictability and 

04:47:42.680 --> 04:47:45.532
utilization.  And I have seen a 
lot of success with teams that 

04:47:45.533 --> 04:47:49.605
have switched to this.  The big 
thing I seen from my friends is 

04:47:49.606 --> 04:47:52.881
they are getting better 
utilization out of their VMs.  

04:47:52.882 --> 04:47:53.910
Able to use all the CP.
And all the memory they 

04:47:53.911 --> 04:47:55.911
provision.

04:47:58.196 --> 04:48:00.196
It's less of an issue with GCP 
because 

04:48:01.299 --> 04:48:03.733
it lets you make custom VMs that
exactly fit your App.  But if 

04:48:03.734 --> 04:48:06.166
you have things that are really 
variable in load or you have a 

04:48:06.167 --> 04:48:10.292
bunch of VMs that look the same 
for whatever reason, containers 

04:48:10.293 --> 04:48:12.293
might be a way to solve that 
problem.

04:48:13.765 --> 04:48:16.232
And if you decided to go with 
containers for any of theser 

04:48:16.233 --> 04:48:20.734
other reasons, Kubernetes is a 
great way of managing the 

04:48:20.735 --> 04:48:23.398
problem of making sure that 
everything stays up.  If you 

04:48:23.399 --> 04:48:26.068
specify known good state, it 
will take care of making that 

04:48:26.069 --> 04:48:30.772
known good state maintained even
if something wierd happens to 

04:48:30.773 --> 04:48:33.855
some of your machines.
&gt;&gt; MYLES BORINS: So, some 

04:48:33.856 --> 04:48:36.740
concluding thoughts about all 
the things we just said.

04:48:40.396 --> 04:48:44.485
Google Cloud Platform is kind of
like a delicious buffet.  Bear 

04:48:44.486 --> 04:48:49.150
with me on this.  You have lots 
of different ones and you can 

04:48:49.151 --> 04:48:51.387
pick them all depending on your 
tastes.  As you need more, they 

04:48:51.388 --> 04:48:53.835
are there.  They are on the 
cart.  They are steamed.  They 

04:48:53.836 --> 04:48:58.117
are ready to go.  You need more 
Summey, we have more.  And it's 

04:48:58.118 --> 04:49:01.893
really easy to share.  You have 
big projects, you can add more 

04:49:01.894 --> 04:49:06.002
people to the projects, they can
grab the dumplings they want.  

04:49:06.003 --> 04:49:08.022
I'm really hungry.
[ Laughs ]

04:49:10.256 --> 04:49:12.256
&gt;&gt; AJA: Almost lunch time.

04:49:15.389 --> 04:49:17.630
&gt;&gt; MYLES BORINS: I know almost 
about dumplings.  But I just 

04:49:17.631 --> 04:49:20.076
want to eat them not think about
how to make them.  That's a 

04:49:20.077 --> 04:49:22.927
great benefit about this 
platform.  You if you need to 

04:49:22.928 --> 04:49:27.033
focus on the MVP and the product
you're getting out the door and 

04:49:27.034 --> 04:49:29.723
your product isn't operations 
you may want to use all these 

04:49:29.724 --> 04:49:33.227
things that are ready to go.  
You can iterate off them as 

04:49:33.228 --> 04:49:36.120
necessary and make decisions to 
make sure that you're not super 

04:49:36.121 --> 04:49:39.197
locked into things that are 
harder to move.  But we have a 

04:49:39.198 --> 04:49:41.231
lot of different products 
available for you today to run 

04:49:42.880 --> 04:49:45.337
your compute in 5U8 sorts of 
different ways based on your 

04:49:45.338 --> 04:49:46.982
needs.
&gt;&gt; AJA: So we went through a lot

04:49:46.983 --> 04:49:50.456
of stuff really requestic looy 
and one of the thick I want to 

04:49:50.457 --> 04:49:54.540
make sure everyone knows, if you
choose one of these things it 

04:49:54.541 --> 04:49:56.795
doesn't mean you can't change 
your mind later on.  All of 

04:49:56.796 --> 04:49:59.294
these things play well together.
Here is kind of the  high-level 

04:49:59.937 --> 04:50:04.427
summary of what we talked about.
We have Google Compute Engine.  

04:50:04.428 --> 04:50:06.660
Virtual machines in custom 
sizes.  I was talking to someone

04:50:06.661 --> 04:50:08.661
and they had done the math.

04:50:11.368 --> 04:50:13.368
There is over 6000 different 
ways to configure it.

04:50:14.832 --> 04:50:18.538
6000 different flavors of VM.  
So who ships something on a VM? 

04:50:18.539 --> 04:50:21.219
I have lots and lots of times.  
That's fewer folks than I 

04:50:21.220 --> 04:50:25.490
expected.  Or if you want to 
pick up something that you're 

04:50:25.491 --> 04:50:26.518
running in a V month.
Your local machine and shove it 

04:50:26.519 --> 04:50:29.567
into production.  We have Google
App Engine.  This is a 

04:50:29.568 --> 04:50:32.603
serverless application platform.
It's good when you want to no 

04:50:32.604 --> 04:50:36.283
opposite solution to running 
youre App and want fully-managed

04:50:36.284 --> 04:50:38.336
services.  You want networking 
and auto-scaling 

04:50:42.810 --> 04:50:45.053
and the ability to use images 
that are known good that Google 

04:50:45.054 --> 04:50:48.124
has endorsed and we want to make
sure we are maintaining and 

04:50:48.125 --> 04:50:49.752
patching and things like that.  
We have Google Cloud functions 

04:50:49.753 --> 04:50:51.753
for 

04:50:52.841 --> 04:50:54.462
event-driven serverless 
applications or event-driven 

04:50:54.463 --> 04:50:56.541
parts of your application.  This
is good for tasks that need high

04:50:58.782 --> 04:51:00.192
scale some of the time and 
largely stateless.  Especially 

04:51:00.193 --> 04:51:02.240
if you have something you need 
to run a lot at once and not a 

04:51:02.241 --> 04:51:06.734
lot later on.  Because you can 
shove as much through that pipe 

04:51:06.735 --> 04:51:08.620
as you need to or as little.  
Depends on what your use is and 

04:51:08.621 --> 04:51:12.288
it's great are for that and then
we have Google Kubernetes 

04:51:12.289 --> 04:51:15.003
engine.  It's managed Kubernetes
on Google Compute Engine.

04:51:17.885 --> 04:51:18.897
This is know one of the easiest 
ways to get started with 

04:51:18.898 --> 04:51:22.949
containers.  It's how I got 
started and it's really good 

04:51:22.950 --> 04:51:25.611
because we take care of a lot of
the stuff for you.  Lots of 

04:51:25.612 --> 04:51:27.236
folks are involved in the 
Kubernetes projects inside and 

04:51:27.237 --> 04:51:32.542
outside Google, Google is very 
involved and the team that build

04:51:32.543 --> 04:51:34.543
Google Kubernetes engine works 
with the team that is working on

04:51:36.818 --> 04:51:38.650
Kubernetes to make sure that 
Erving is smooth.  So we want to

04:51:38.651 --> 04:51:40.651
say thank you and before 

04:51:42.731 --> 04:51:43.741
we say thank you for all 
attending, I'd like to thank the

04:51:43.742 --> 04:51:46.172
folks who are making this 
possible.  We have fantastic 

04:51:46.173 --> 04:51:48.029
staff running the lights and 
camera and producing in this 

04:51:48.030 --> 04:51:51.169
room.  So if you could give them
a round of applause, I would be 

04:51:51.170 --> 04:51:55.046
grateful.
[ Applause ]

04:51:57.681 --> 04:51:59.681
And thank you all for coming and
giving 

04:52:00.968 --> 04:52:03.809
us 45 minutes of your wonderful 
day today at Google I/O.  I hope

04:52:03.810 --> 04:52:05.438
you have a wonderful afternoon.
&gt;&gt; MYLES BORINS: Thank you.

04:52:05.439 --> 04:52:07.872
[ Applause ]

05:18:47.877 --> 05:18:49.877
&gt;&gt; Realtime captions on this 
screen

05:23:52.396 --> 05:23:55.111
&gt;&gt; ANNOUNCER: At this time, 
please find your seat.

05:23:58.984 --> 05:24:00.984
Our session will begin soon.

05:25:58.545 --> 05:26:01.399
[ Applause ]
&gt;&gt; Hello!  Welcome to our 

05:26:01.400 --> 05:26:05.857
session.  We appreciate you 
choosing to spend the next 40 

05:26:05.858 --> 05:26:07.686
minutes her with us given the 
number of things we have going 

05:26:07.687 --> 05:26:09.687
on at IO.  It's a busy time.

05:26:13.852 --> 05:26:16.100
My name is Benjamin Schrom and 
I'm joined by Jennifer miller 

05:26:16.101 --> 05:26:18.101
and Brittany Mennuti.

05:26:19.556 --> 05:26:23.820
We are from the team at Google 
working on immersive computing. 

05:26:23.821 --> 05:26:25.473
We want to talk about it for 
teaching and learning and a few 

05:26:25.474 --> 05:26:28.931
really important and different 
context.  First, I want to make 

05:26:28.932 --> 05:26:32.385
sure we are all on the same page
about what we mean by immersive 

05:26:32.386 --> 05:26:34.386
computing.

05:26:36.848 --> 05:26:38.854
The simplest terms we mean VR 
and AR.  VR that can take you 

05:26:38.855 --> 05:26:41.572
anywhere like to the Taj Mahal, 
to the another place in 

05:26:44.849 --> 05:26:46.849
time, down to the atomic level, 
wherever.

05:26:47.935 --> 05:26:49.935
And AR, that can bring you 
anything, a 

05:26:51.212 --> 05:26:53.966
dinosaur, a jet engine, da 
Vinci's 15th century design for 

05:26:53.967 --> 05:26:56.417
a helicopter or just information
about the world around you.

05:26:58.448 --> 05:27:00.900
But the reason we say and will 
continue to say immersive 

05:27:00.901 --> 05:27:03.862
computing is that at Google we 
look at these technologies as 

05:27:05.702 --> 05:27:08.155
occupying different areas in a 
shared spectrum and all points 

05:27:08.156 --> 05:27:13.476
on this spectrum are beginning 
to blur together more and more. 

05:27:13.477 --> 05:27:14.689
So the plan today to spend a few
minutes  walking through 

05:27:14.690 --> 05:27:19.156
specifically why and how we see 
this Technology being used for 

05:27:19.157 --> 05:27:21.163
teaching and learning and again 
we really mean teaching and 

05:27:21.164 --> 05:27:24.860
learning in the broadest sense. 
So I'll share updates about 

05:27:24.861 --> 05:27:28.737
Google expeditions.  Jen will 
talk to us about our efforts to 

05:27:28.738 --> 05:27:30.378
bring this Technology to higher 
education and then finally brit 

05:27:30.379 --> 05:27:32.379
will 

05:27:33.428 --> 05:27:36.890
walk us through tour creator.
So why are we here for the third

05:27:36.891 --> 05:27:40.978
IO in a row talking about this? 
What is the big idea here?

05:27:44.065 --> 05:27:46.095
The really powerful idea is that
we have an opportunity with 

05:27:46.096 --> 05:27:48.096
almost any 

05:27:49.983 --> 05:27:52.425
Technology on this submersive 
computing spectrum to turn 

05:27:52.426 --> 05:27:54.426
things that form so 

05:27:55.747 --> 05:27:58.188
much of our education, of our 
work, of how we perceive the 

05:27:58.189 --> 05:28:00.216
world, into more concrete 
experiences that activate our 

05:28:03.275 --> 05:28:06.318
minds and our bodies and allow 
us to learn by experience.  Sort

05:28:06.319 --> 05:28:09.169
of a continuation of how we all 
learned things as kids.

05:28:10.816 --> 05:28:13.263
For the set of things we will 
talk about today, what we want 

05:28:13.264 --> 05:28:15.264
to enable is this Technology 
makes those concrete 

05:28:18.357 --> 05:28:19.577
experiences much more regular 
things, must have more 

05:28:19.578 --> 05:28:22.617
accessible and effective as 
possible.  This is really 

05:28:22.618 --> 05:28:24.618
important because we all need it
like our kids will need it, 

05:28:27.332 --> 05:28:29.332
future generations will need it.

05:28:31.207 --> 05:28:32.623
So two years ago at IO, I posed 
this classic math problem to the

05:28:32.624 --> 05:28:37.733
audience and I wanted to check 
back and see if anyone got the 

05:28:37.734 --> 05:28:40.374
answer in the last two years?  I
have now learned this is a 

05:28:40.375 --> 05:28:46.289
classic problem.  It's called 
the age of the Captain problem. 

05:28:46.290 --> 05:28:47.494
Many, many studies have posed 
this or similar sorts of 

05:28:47.495 --> 05:28:51.763
questions to primary and 
secondary students.  Does anyone

05:28:51.764 --> 05:28:53.764
have an answer?  How old the 
Captain is?

05:28:56.900 --> 05:28:59.160
It turns out, a majority of your
average sort of primary and 

05:28:59.161 --> 05:29:02.418
secondary school math students 
will produce a numerical answer 

05:29:02.419 --> 05:29:04.419
to thisy request.

05:29:07.485 --> 05:29:10.138
66 out of 97 is the most recent 
study.  The researchers in that 

05:29:10.139 --> 05:29:12.139
study termed this phenomenon, 
the suspension of sense 

05:29:15.441 --> 05:29:18.300
making which now I know it is a 
really useful phrase in all 

05:29:18.301 --> 05:29:20.301
kinds of context 

05:29:21.560 --> 05:29:23.387
but it's the doomsday skin arrow
from when learning becomes too 

05:29:23.388 --> 05:29:27.451
abstracted.  And it illustrates 
the challenge and opportunity we

05:29:27.452 --> 05:29:29.452
have before us.

05:29:30.741 --> 05:29:33.605
The opportunity is that instead 
of asking a student like why 

05:29:33.606 --> 05:29:35.606
they should 

05:29:36.863 --> 05:29:38.518
spend time studying why ancient 
Rome was important or asking 

05:29:38.519 --> 05:29:43.413
them to appreciate these amazing
artifacts of human history with 

05:29:43.414 --> 05:29:46.068
little pictures in a textbook or
a video on a little screen, you 

05:29:46.069 --> 05:29:48.939
can let them explore it in VR 
like they were there in Rome.

05:29:52.426 --> 05:29:55.273
You can give them this 
bite-sized field trip moment 

05:29:55.274 --> 05:29:57.274
that  engages their 

05:29:58.314 --> 05:30:00.344
mind and body and gives them 
thage to look around.  Or you 

05:30:00.345 --> 05:30:02.388
can let them evaluate statue of 
a powerful woman in history like

05:30:04.816 --> 05:30:06.816
Cleopatra like it was standing 
right in front of them.

05:30:09.503 --> 05:30:10.745
Another way to think about this 
is that a Thiry popular among 

05:30:10.746 --> 05:30:12.772
cognitive scientists who study 
learning, cognitive 

05:30:16.019 --> 05:30:18.673
load theory, people heard of 
this?  It says that like our 

05:30:18.674 --> 05:30:21.351
ability to learn if you think 
about it like a funnel, 

05:30:23.216 --> 05:30:25.465
basically the total mental 
energy that we have to learn 

05:30:25.466 --> 05:30:27.466
something is what is left over 
after you subtracted the 

05:30:28.922 --> 05:30:31.180
inherent difficulty of the thing
you're trying to understand and 

05:30:31.181 --> 05:30:34.429
learn, plus the effort required 
to understand how that concept 

05:30:34.430 --> 05:30:37.882
is presented.  So what you're 
left with is the mental energy 

05:30:37.883 --> 05:30:39.940
left to learn.  So if fractions 
has inherent 

05:30:43.206 --> 05:30:45.206
difficulty of X, it's like other

05:30:46.254 --> 05:30:47.668
difficulty of Y that is just 
like trying to understand how 

05:30:47.669 --> 05:30:49.801
fractions are  presented to you 
or how it is taught to you.

05:30:53.049 --> 05:30:53.654
We can't do much about the 
interaren't difficulty of these 

05:30:53.655 --> 05:30:56.505
concepts.  The world is a 
complicated place.  But we can 

05:30:56.506 --> 05:30:58.506
do something about that orange 
part of the funnel but how 

05:30:59.362 --> 05:31:02.005
information is presented to 
people when they are trying to 

05:31:02.006 --> 05:31:03.828
learn it.
When you look at so many of the 

05:31:03.829 --> 05:31:08.504
place that is learning happens, 
like classrooms and lecture 

05:31:08.505 --> 05:31:14.693
halls, they really aren't set up
to like lesson cognitive load.  

05:31:14.694 --> 05:31:17.583
They are basically only set up 
to explain things with words or 

05:31:17.584 --> 05:31:22.059
2HD drawings.  And then you 
realize that not a lot changed 

05:31:22.060 --> 05:31:24.042
in hundreds of years like this 
is how we were teaching people 

05:31:24.043 --> 05:31:26.915
in the 15th century.

05:31:32.323 --> 05:31:34.958
And for us it seems like using 
seem overdue.  So let's start 

05:31:34.959 --> 05:31:36.959
with talking about Google 
expedition.

05:31:39.857 --> 05:31:42.575
We launched expeditions at IO 
three years ago and it's been 

05:31:42.576 --> 05:31:47.251
incredible to watch it grow and 
now 10s and tens of thousands of

05:31:47.252 --> 05:31:51.114
schools are using it every 
single day.  Expeditions hasn't 

05:31:51.115 --> 05:31:54.980
changed much from how we first 
conceived it.  It's a tool that 

05:31:54.981 --> 05:31:56.981
allows a teacher, or 

05:31:58.039 --> 05:32:00.490
a guide, to take groups of 
co-located students on virtual 

05:32:00.491 --> 05:32:03.115
field trips or show them virtual
things.

05:32:05.977 --> 05:32:08.235
Since we announced it in 2015, 
we have continued to see it grow

05:32:08.236 --> 05:32:13.135
and continued to add features to
make it more powerful and even 

05:32:13.136 --> 05:32:17.861
more accessible.  And as of 
today, we are really excited to 

05:32:17.862 --> 05:32:19.862
show over 3 million students and

05:32:23.396 --> 05:32:24.411
teachers have participated in 
one of our pioneer programs and 

05:32:24.412 --> 05:32:28.922
it's been installed on over 6 
million device system and we are

05:32:28.923 --> 05:32:30.361
so encouraged by the excitement 
we see from teachers and 

05:32:30.362 --> 05:32:32.362
students who have 

05:32:33.410 --> 05:32:35.410
been using it for multiple years
now.

05:32:35.664 --> 05:32:37.293
In addition, to the steady 
stream of qualitative feedback 

05:32:37.294 --> 05:32:39.294
we received, we have also 
started to get real  

05:32:40.370 --> 05:32:42.444
quantitative data back as well. 
And it is still early days for 

05:32:42.445 --> 05:32:44.680
this stuff but in a recent 
study, we worked 

05:32:49.373 --> 05:32:49.984
with SRI researchers and found 
that students that used 

05:32:49.985 --> 05:32:51.985
expeditions VR as 

05:32:53.649 --> 05:32:54.872
part of a specific science 
lesson outperformed those 

05:32:54.873 --> 05:32:56.873
students who used 

05:32:58.380 --> 05:32:59.999
that same lesson but with 
traditional 2D media like 

05:33:00.000 --> 05:33:02.236
pictures and video and they did 
so by statistically significant 

05:33:03.048 --> 05:33:05.288
number.
So I wanted to share a few of 

05:33:05.289 --> 05:33:07.289
the thick we learned along the 
way and some things 

05:33:10.992 --> 05:33:12.417
that we are doing to makes 
expeditions better and more 

05:33:12.418 --> 05:33:14.418
accessible.

05:33:17.321 --> 05:33:19.378
So first, cardboard my be an 
awesome material to build a 

05:33:19.379 --> 05:33:21.619
universally available VR headset
but not the best to 

05:33:27.135 --> 05:33:29.606
build a VR kit to schools to 
use.  This is the first kit box 

05:33:29.607 --> 05:33:32.672
made in 2015 and we were so 
Excited when it arrived.  We 

05:33:32.673 --> 05:33:34.673
thought it was the coolest thing
ever.

05:33:37.594 --> 05:33:39.626
We had cardboard headsets and a 
cardboard kit.  That was our 

05:33:39.627 --> 05:33:42.913
cardboard box of two hours in a 
classroom.  Big surprise, right?

05:33:44.533 --> 05:33:47.603
Classrooms are harsh 
environments for Technology.  So

05:33:47.604 --> 05:33:49.654
we knew we had to bring on 
Partners to help us and today we

05:33:49.655 --> 05:33:51.655
have kits like 

05:33:54.136 --> 05:33:56.136
this in school across the world.

05:33:57.614 --> 05:33:59.461
Who wishes that I had a VR cart 
in their class instead of a TV 

05:33:59.462 --> 05:34:02.716
cart?  Me too.  We now have over
10 different Partners 

05:34:06.584 --> 05:34:09.418
offering kits in over a dozen 
different countries.  We also 

05:34:09.419 --> 05:34:11.856
learned that if we want to reach
the most number learners 

05:34:11.857 --> 05:34:17.002
possible with Technology like VR
and AR, we need to remove as 

05:34:17.003 --> 05:34:20.046
many Aztec logical prerequisites
as possible.  We started by 

05:34:20.047 --> 05:34:22.918
allowing expeditions to work off
line so that even in schools 

05:34:24.560 --> 05:34:28.635
like this Juan in Ghana, they 
could travel the world with VR. 

05:34:28.636 --> 05:34:30.463
Or in the school hundreds of 
Myles up the Amazon river, they 

05:34:30.464 --> 05:34:36.170
could go outside and compare 
their environment to ones all 

05:34:36.171 --> 05:34:38.171
the way across the world.

05:34:39.916 --> 05:34:41.144
So last year, we removed another
pre-rec sit and made it works 

05:34:41.145 --> 05:34:43.784
for users who didn't find 
themselves in a classroom or in 

05:34:43.785 --> 05:34:45.785
a group.

05:34:47.057 --> 05:34:48.083
We have seen lots and lots of 
teachers uses this solo mode in 

05:34:48.084 --> 05:34:50.084
their classes to let their 
students explore the world on 

05:34:52.389 --> 05:34:55.244
their own.
We'll soon be updating the home 

05:34:55.245 --> 05:34:59.917
screen to make self-guided tours
much easier to discover and jump

05:34:59.918 --> 05:35:04.670
into.  While still making it 
simple and straightforward to 

05:35:04.671 --> 05:35:06.289
use in class.
We also have been making some 

05:35:06.290 --> 05:35:08.290
really 

05:35:10.189 --> 05:35:12.440
amazing new content like the set
of expeditions we made with the 

05:35:12.441 --> 05:35:14.441
Earth VR 

05:35:15.900 --> 05:35:17.926
team that brings the experience 
of  seeing Google earth in VR 

05:35:17.927 --> 05:35:22.605
and daydream and it is made 
available in ser at.  It allows 

05:35:22.606 --> 05:35:24.606
you to take a highly 

05:35:26.879 --> 05:35:27.881
complicated 3D mesh like the 
scene of Google Earth from New 

05:35:27.882 --> 05:35:30.079
York City and simplifies it down
to a scene that within a limited

05:35:30.080 --> 05:35:34.554
head box, can be viewed on 
mobile VR devices.  It's really 

05:35:34.555 --> 05:35:36.828
powerful stuff.  And it's 
especially really powerful 

05:35:42.340 --> 05:35:44.159
stuff on the recentee announced 
la novo solo device.  These 

05:35:44.160 --> 05:35:46.232
expeditions really come alive 
with the 6 degrees of freedom 

05:35:46.233 --> 05:35:48.705
you get with a mirage.  And we 
continued to add just more and 

05:35:52.967 --> 05:35:54.967
more engaging and interesting 
content to epetitions.

05:35:56.271 --> 05:35:59.122
We have over 800 expeditions 
spanning history, stem subjects,

05:35:59.123 --> 05:36:01.123
art, there is something for 
everyone, every teacher 

05:36:04.012 --> 05:36:06.012
and student and eve curious 
adult.

05:36:06.454 --> 05:36:08.308
You also continue to partner 
with the real experts in the 

05:36:08.309 --> 05:36:10.309
field of educational 

05:36:11.365 --> 05:36:13.033
publishing like HMH, a series of
expeditions that supplement 

05:36:13.034 --> 05:36:16.944
their textbooks and as we were 
discussing, make all that 

05:36:16.945 --> 05:36:20.406
important information contained 
within the textbook become more 

05:36:20.407 --> 05:36:22.407
accessible and concrete with the

05:36:23.469 --> 05:36:25.107
set of acutching VR content.  
But most importantly, we learned

05:36:25.108 --> 05:36:27.108
that when you take students to 
amazing 

05:36:30.587 --> 05:36:31.612
places, like under water or 
among choral Reeves, they really

05:36:31.613 --> 05:36:33.613
want to investigate 

05:36:34.724 --> 05:36:38.599
the things they see there.  Like
choral.  Or  sharks.  They want 

05:36:38.600 --> 05:36:41.848
to get up close.  I that want to
take the opportunity to look 

05:36:41.849 --> 05:36:43.849
this guy in the eye.

05:36:45.511 --> 05:36:47.511
To look at the rows of sharp 
teeth.

05:36:50.007 --> 05:36:51.717
So expeditions AV our answer for
how you bring that shark into 

05:36:51.718 --> 05:36:56.900
the classroom such as everyone 
remains dry and intact.  We give

05:36:56.901 --> 05:36:59.390
you a preview of the AR last 
year at IO and we spent the last

05:36:59.391 --> 05:37:04.306
year taking our Beta application
around to schools all over the 

05:37:04.307 --> 05:37:06.307
world.

05:37:08.222 --> 05:37:09.036
Over one million students and 
teachers participated in our 

05:37:09.037 --> 05:37:12.125
bait.  They gave us their 
thoughts and helped us refine it

05:37:12.126 --> 05:37:16.394
and improve it.  We wanted to 
take this chance to thank them 

05:37:16.395 --> 05:37:18.632
for such thoughtful feedback, 
for seeing through some of the 

05:37:18.633 --> 05:37:20.633
early rough 

05:37:21.693 --> 05:37:23.693
Edges and for just inspiring us 
to build it each and every day.

05:37:26.195 --> 05:37:28.212
And check out #google 
expeditions on Twitter if you 

05:37:28.213 --> 05:37:31.291
want to seea mazing scenes of 
people using expeditions AR.

05:37:34.379 --> 05:37:36.207
The feedback we received has 
been super encouraging like this

05:37:36.208 --> 05:37:39.649
9th grade teacher from Boise, 
Idaho W.H.O. saw her classroom 

05:37:39.650 --> 05:37:41.650
come alive.

05:37:42.905 --> 05:37:45.779
We love that last part in the 
quote, most of  all.  Students 

05:37:45.780 --> 05:37:47.780
have become both the teacher and
the learner.

05:37:49.444 --> 05:37:52.086
And this is really the Holy 
Grail giving amazing teachers 

05:37:52.087 --> 05:37:54.547
like Karen the technological 
instruments to make moments like

05:37:54.548 --> 05:37:59.450
this happen in her classroom.  
So expeditions AR will be 

05:37:59.451 --> 05:38:01.519
shipping a major update to our 
already launched 

05:38:05.384 --> 05:38:07.235
App, ARL live along V R and 
shipping it at the end of the 

05:38:07.236 --> 05:38:09.883
month with 100 different AR 
expeditions composed of the 

05:38:16.004 --> 05:38:18.004
objects that span the same 
breath our VR tours do.

05:38:18.851 --> 05:38:21.564
I want to give you a quick run 
through of the futures we will 

05:38:21.565 --> 05:38:23.565
be  launching with.

05:38:25.228 --> 05:38:26.861
First, as we do in VR, one of 
the most powerful tools we can 

05:38:26.862 --> 05:38:30.534
give a guide is the ability to 
draw the group's attention to 

05:38:30.535 --> 05:38:32.974
specific areas or points of 
interest.  But we needed to 

05:38:32.975 --> 05:38:36.466
design a new way to point out 
parts of the object.  So we 

05:38:36.467 --> 05:38:38.507
built a spotlight light feature 
that let's a teacher shine a 

05:38:38.508 --> 05:38:41.592
light on part of the object such
that all of the students can see

05:38:41.593 --> 05:38:47.112
it.  The teacher can move that 
spotlight around.  They can make

05:38:47.113 --> 05:38:49.113
it a pinpoint or a floodlight.

05:38:50.180 --> 05:38:52.833
It looks really cool.
We also learned that the bigger 

05:38:52.834 --> 05:38:56.489
the elephant, the better.  But 
the spaces people have available

05:38:57.949 --> 05:39:00.008
to them are all different sizes.
So you need to be able to 

05:39:00.009 --> 05:39:02.009
quickly resize it and let that 
propagate to all 

05:39:04.715 --> 05:39:07.375
the connected devices.
And while we don't use markers 

05:39:07.376 --> 05:39:11.440
for tracking, we learned that 
physical marker images can be a 

05:39:11.441 --> 05:39:14.930
great way of establishing a 
common reference point for large

05:39:14.931 --> 05:39:17.574
groups viewing the same  object.
So with expeditions, you can put

05:39:17.575 --> 05:39:20.622
down eight different markers 
around your space and the 

05:39:20.623 --> 05:39:22.849
objects you choose to show your 
group will display on top of 

05:39:22.850 --> 05:39:27.321
them.  This helps to ensure you 
don't have 30 kids crowded 

05:39:27.322 --> 05:39:30.193
around the same object.
And just like we have a solo 

05:39:30.194 --> 05:39:34.891
mode in VR, we values a solo 
mode in AR.  So if you weren't 

05:39:34.892 --> 05:39:36.892
guiding a group, you don't need 
a marker.

05:39:39.860 --> 05:39:40.931
Just tap on any plane your 
device detectives to place that 

05:39:40.932 --> 05:39:42.932
object and have a look and you 
have all the explanatory 

05:39:43.989 --> 05:39:45.989
information in a card to read 
about.

05:39:48.086 --> 05:39:50.086
Like who doesn't want  the -- on
their table?

05:39:51.356 --> 05:39:53.385
So as I said before, expeditions
AR will be shipping at the end 

05:39:53.386 --> 05:39:55.386
of the month as 

05:39:56.466 --> 05:39:57.952
an update to current 
application.  No need to install

05:39:57.953 --> 05:39:59.953
anything new.

05:40:01.438 --> 05:40:04.721
You will need an AR enabled 
device like a pixel.  For 

05:40:04.722 --> 05:40:07.019
schools that love their VRits 
and there are more and more of 

05:40:07.020 --> 05:40:10.271
them, that's by education we 
will be offering a best of both 

05:40:10.272 --> 05:40:14.979
words.  VR and AR kit.  This 
device does high-quality AR and 

05:40:17.817 --> 05:40:20.073
the VR just beautifully.
We are also really excited to 

05:40:20.074 --> 05:40:22.074
announce 

05:40:23.332 --> 05:40:25.332
that the recently debuted acer 
Chrome 

05:40:27.236 --> 05:40:29.236
tab 10, the first Chrome OS 
tablet 

05:40:30.485 --> 05:40:32.941
designed for use in schools, 
will be supporting VR core and 

05:40:32.942 --> 05:40:35.431
expeditions  AR.  And for those 
schools with iPads, 

05:40:38.480 --> 05:40:40.932
we'll also be bringing the same 
updates to the iOS App and just 

05:40:40.933 --> 05:40:45.061
like Cloud anchors you may have 
heard of earlier, it will cork 

05:40:45.062 --> 05:40:47.927
across platform so you can use 
an Android device to guide an 

05:40:47.928 --> 05:40:52.871
iOS device or vice versa.  So 
that is it for expeditions.  A 

05:40:52.872 --> 05:40:54.872
beautiful new UI.

05:40:56.260 --> 05:40:57.888
A powerful set of AR features 
and a bunch of AR content to go 

05:40:57.889 --> 05:40:59.889
with it.

05:41:01.985 --> 05:41:03.985
It's basically a museum in your 
pocket.

05:41:04.221 --> 05:41:04.410
So we are going to change gears 
--

05:41:04.411 --> 05:41:06.411
[ Applause ]

05:41:07.823 --> 05:41:09.823
We are excited too.  Thank you!

05:41:12.159 --> 05:41:13.818
Beyond K12 learning, we are 
seeing lots of signs this 

05:41:13.819 --> 05:41:15.271
Technology can create engaging 
experiences for University 

05:41:15.272 --> 05:41:17.952
students.  And to talk to you 
about  that, I'd 

05:41:21.226 --> 05:41:23.884
like to introduce Jen.
&gt;&gt; JENNIFER HOLLAND: Thank you, 

05:41:23.885 --> 05:41:28.355
Ben.  Beyond the curriculum, we 
quickly learned that there was 

05:41:28.356 --> 05:41:30.356
even broader learning 
opportunities with VR.

05:41:33.663 --> 05:41:36.131
In the same way that learning 
can be an abstraction for many 

05:41:36.132 --> 05:41:39.899
students, going to college, 
pursuing different careers is an

05:41:39.900 --> 05:41:44.077
abstraction for students around 
the world.  These students don't

05:41:44.078 --> 05:41:47.355
have access to the mentors and 
the professionals in their life 

05:41:47.356 --> 05:41:49.405
that have experience going to 
college or have experience 

05:41:49.406 --> 05:41:51.406
pursuing different careers.

05:41:55.317 --> 05:41:57.755
So, for the past few years, we 
have been creating hundreds of 

05:41:57.756 --> 05:42:01.411
college and career expeditions 
to enable students to be able to

05:42:01.412 --> 05:42:04.273
visual use what it is like 
taking that step across that 

05:42:04.274 --> 05:42:08.740
graduation stage and accepting 
that diploma.  Or taking that 

05:42:08.741 --> 05:42:10.988
first step in applying for that 
dream job.

05:42:14.055 --> 05:42:16.315
And along the same lines, many 
educational programs have not 

05:42:16.316 --> 05:42:19.160
been traditionally represented 
by women and minorities.

05:42:22.440 --> 05:42:23.873
And it can be difficult for 
these students to imagine what 

05:42:23.874 --> 05:42:25.874
did is like to participate in 
these programs.

05:42:29.362 --> 05:42:31.187
But we know VR can help with 
this.  One school, the New York 

05:42:31.188 --> 05:42:35.943
tan den school of engineering, 
has taken this to a completely 

05:42:35.944 --> 05:42:40.624
another level.  They were 
looking to improve the impact 

05:42:40.625 --> 05:42:42.259
and the diversity of their 
in-coming freshman class so they

05:42:42.260 --> 05:42:44.260
created 

05:42:45.317 --> 05:42:48.167
a VR App and they enlisted the 
help of students and faculty and

05:42:48.168 --> 05:42:50.168
built a bunch of different 
experiences showcasing the 

05:42:51.437 --> 05:42:53.437
different projects and programs 
happening on their campus.

05:42:58.305 --> 05:43:00.030
And the admissions team created 
these cardboard, sent out a 

05:43:00.031 --> 05:43:03.698
letter to students with 
instructions on how to download 

05:43:03.699 --> 05:43:05.699
the VR App.

05:43:06.953 --> 05:43:09.609
And apart from doing this, to 
separate themselves from other 

05:43:09.610 --> 05:43:12.051
schools, the immersive 
experience mainly highlighting 

05:43:15.523 --> 05:43:16.944
the work of female students and 
faculty and narrated by a woman,

05:43:16.945 --> 05:43:18.945
has helped to 

05:43:20.455 --> 05:43:22.455
increase the female acceptance 
rate of 

05:43:25.739 --> 05:43:27.765
students by over 10% in just two
years.  Come on!  We can cheer 

05:43:27.766 --> 05:43:30.023
for that.
[ Applause ]

05:43:32.052 --> 05:43:34.299
It's so impressive.  When the 
admissions office surveyed 

05:43:37.381 --> 05:43:39.451
that  in-coming class, many 
cited the VR App as one of the 

05:43:39.452 --> 05:43:42.329
reasons why they chose the New 
York tan den school of 

05:43:43.966 --> 05:43:45.833
engineering because they could 
visualize what their 4 years 

05:43:45.834 --> 05:43:47.834
were going to be like on campus 
and get to experience working 

05:43:50.195 --> 05:43:52.195
with different faculty and 
students.

05:43:53.058 --> 05:43:55.484
And beyond using VR for 
admissions, we are seeing 

05:43:55.485 --> 05:43:57.485
Professors like Adam 

05:43:58.969 --> 05:44:00.595
Blumenthal from brown University
capture historical Sites using 

05:44:00.596 --> 05:44:02.596
the jump camera 

05:44:03.859 --> 05:44:06.716
and marking those videos up in 
360 photos up and using tools 

05:44:06.717 --> 05:44:08.717
like blocks 

05:44:09.730 --> 05:44:13.081
and poly, to vividly re-create 
important historical moments in 

05:44:13.082 --> 05:44:17.570
history.  Like the battle bee 
affair which happened off the 

05:44:17.571 --> 05:44:21.252
coast of Rhode Island.  It was a
dramatic event in the lead up to

05:44:21.253 --> 05:44:24.110
the American revolution.  
Students can now walk through 

05:44:24.111 --> 05:44:26.111
this 

05:44:27.370 --> 05:44:29.370
virtual tour and experience a 
preserved part of history.

05:44:31.679 --> 05:44:34.125
But not all faculty are like 
Adam and know how to build 

05:44:34.126 --> 05:44:36.970
immersive content.   So, to help
faculty and students get 

05:44:41.041 --> 05:44:43.126
started, we created a free VR 
video course for anyone to be 

05:44:43.127 --> 05:44:45.566
able to take and will be 
launching an AR course this 

05:44:46.385 --> 05:44:48.385
summer.

05:44:50.672 --> 05:44:51.691
We have also provided schools 
with sampled projects to help 

05:44:51.692 --> 05:44:55.364
them get inspired to how they 
could build experiences using VR

05:44:55.365 --> 05:44:59.028
and AR.  And we have also 
established a hardware loan 

05:44:59.029 --> 05:45:01.262
program so that schools can 
apply and get the necessary 

05:45:01.263 --> 05:45:05.762
hardware to help them get 
started on their first projects.

05:45:05.763 --> 05:45:10.449
Since launching the VR video 
course and the hardware loan 

05:45:10.450 --> 05:45:13.277
program this past fall, we have 
received really positive 

05:45:15.752 --> 05:45:17.752
feedback from students like 
Michael who 

05:45:19.240 --> 05:45:24.805
have taken the course.  And one 
thing we are seeing is that more

05:45:24.806 --> 05:45:26.806
and more students like Michael, 
are 

05:45:28.105 --> 05:45:30.105
going online to pursue an 
education.

05:45:31.422 --> 05:45:33.422
In fact, 32% of students took an
on 

05:45:35.095 --> 05:45:37.095
line course just last year.

05:45:42.667 --> 05:45:43.278
This is a really powerful notion
that your access to a great 

05:45:43.279 --> 05:45:45.279
education is no 

05:45:46.394 --> 05:45:48.394
longer dependent on your 
geographic proximity to one.

05:45:50.897 --> 05:45:53.956
Or dependent on having all day 
in-person classes.

05:45:55.813 --> 05:45:59.725
Imagine if you wanted to pursue 
a career in let's say, nursing. 

05:45:59.726 --> 05:46:02.187
And you had to take a set of 
pre-rec sit courses like 

05:46:02.188 --> 05:46:07.710
biology.  And your closest 
University is 200 Myles away.  

05:46:07.711 --> 05:46:10.144
You might decide it's worth it 
and so you go and look up the 

05:46:10.145 --> 05:46:14.430
courses that are being offered 
and you realize that biology 

05:46:14.431 --> 05:46:16.884
class is offered Monday, 
Wednesday and Fridays from 1-4 

05:46:16.885 --> 05:46:22.624
p.m.
But you have a full-time job. 

05:46:22.625 --> 05:46:24.241
You're probably not likely to 
register for that class and you 

05:46:24.242 --> 05:46:26.286
might also consider a different 
career opportunity 

05:46:30.590 --> 05:46:33.224
that allows you more 
flexibility.  Almost all degreed

05:46:33.225 --> 05:46:38.144
granting institutions offer 
courses on line.  But many 

05:46:38.145 --> 05:46:40.605
popular courses and degrees like
biology, require in-person 

05:46:42.485 --> 05:46:44.926
activities like labs.  Because 
of this, schools either don't 

05:46:47.570 --> 05:46:49.570
offer those courses, ask 
students to pay 

05:46:52.097 --> 05:46:53.511
really high course fees, or ask 
remote students to Drive hours 

05:46:53.512 --> 05:46:58.252
to attend these in-person 
activities.  It turns out this 

05:46:58.253 --> 05:47:00.253
doesn't scale.

05:47:01.339 --> 05:47:04.179
But we know we have the 
Technology to enable these 

05:47:04.180 --> 05:47:06.180
experiences.

05:47:08.078 --> 05:47:08.889
And that is why we are excited 
today to aannounce that in 

05:47:08.890 --> 05:47:10.922
partnership with labster, a 
science education company in 

05:47:13.178 --> 05:47:15.178
Denmark, we have removed the 
physical 

05:47:16.453 --> 05:47:19.158
lab requirements to complete an 
on line biology degree using 

05:47:19.159 --> 05:47:21.188
virtual reality.

05:47:24.199 --> 05:47:26.199
[ Applause ]

05:47:28.720 --> 05:47:31.158
Schools will now be able to 
truly offer an on line biology 

05:47:31.159 --> 05:47:33.159
degree.

05:47:34.412 --> 05:47:36.873
The 30 labs can fully simulate 
real-world outcomes using 

05:47:36.874 --> 05:47:39.311
advanced simulations and 
mathematical equations 

05:47:43.142 --> 05:47:45.142
all built on the daydream 
platform.

05:47:46.103 --> 05:47:48.768
These labs are economically 
efficient as a cost of the VR 

05:47:48.769 --> 05:47:50.806
headset and the content for the 
lab is still cheaper than the 

05:47:51.822 --> 05:47:54.458
years of lab fees.  And it 
provides scale to a growing 

05:47:56.489 --> 05:47:58.744
number of students that are 
pursuing courses on line who 

05:47:58.745 --> 05:48:00.745
previously were left 

05:48:02.835 --> 05:48:04.525
out because of geographic 
constraints.

05:48:04.526 --> 05:48:06.394
Students are also able to have 
unlimit the lab time, which is 

05:48:06.395 --> 05:48:08.395
something that many schools 
can't offer today.

05:48:11.487 --> 05:48:14.155
And as one student put it, I no 
longer have to worry about 

05:48:14.156 --> 05:48:17.064
having a bad TA.  Students are 
also able to engage on a 

05:48:19.331 --> 05:48:21.814
molecular level within these 
labs, which is impossible today.

05:48:22.208 --> 05:48:26.540
And will we are really excited 
to announce that the first 

05:48:26.541 --> 05:48:31.894
University that will be offering
these VR labs to their students 

05:48:31.895 --> 05:48:34.942
is Arizona State University this
fall.

05:48:37.954 --> 05:48:39.954
[ Applause ]

05:48:41.097 --> 05:48:43.097
And what is also exciting is 
that these 

05:48:45.362 --> 05:48:46.595
labs map to AP and IB courses 
for K12 schools so schools that 

05:48:46.596 --> 05:48:49.258
want to supplement their 
existing curriculum can do that.

05:48:52.536 --> 05:48:54.189
And for those schools that can't
afford creating a whole VR 

05:48:54.190 --> 05:48:58.068
laboratory in their school, they
can offer these VR labs as a 

05:48:58.069 --> 05:49:00.069
replacement.

05:49:01.522 --> 05:49:03.801
Labs are also connects the lab 
progress with major LMS systems 

05:49:03.802 --> 05:49:05.820
including Google classroom, 
which will be integrated this 

05:49:06.037 --> 05:49:08.901
fall.  And it allows teachers to
track the 

05:49:12.978 --> 05:49:14.978
progress of students throughout 
these VR labs.

05:49:16.421 --> 05:49:18.878
Labster has been able to help 
reduce all of the laboratory 

05:49:18.879 --> 05:49:21.304
costs for schools by 
virtualizing hundreds of 

05:49:21.305 --> 05:49:23.305
machines and equipment.

05:49:25.793 --> 05:49:27.629
I'm not sure what this HPLC or 
the PCR is, but I'm pretty sure 

05:49:27.630 --> 05:49:29.630
I can do 

05:49:31.910 --> 05:49:33.910
something fun with that 
fermenter.

05:49:35.153 --> 05:49:37.153
We think this is the beginning 
of something big.

05:49:39.022 --> 05:49:41.670
What better way to use the power
of VR than to offer a powerful 

05:49:41.671 --> 05:49:44.934
education?  And with that, I'll 
hand it off to my colleague, 

05:49:44.935 --> 05:49:47.168
Brent, who will talk a little 
bit more about how VR is being 

05:49:47.169 --> 05:49:49.198
used in the classroom and 
beyond.

05:49:52.217 --> 05:49:54.915
[ Applause ]
&gt;&gt; BRITTANY MENNUTI: Thank you 

05:49:54.916 --> 05:49:59.208
very much, Jen.  Programs like 
labster got us thinking.  How 

05:49:59.209 --> 05:50:01.248
could we scale this kind of 
immersive learning to more 

05:50:01.249 --> 05:50:04.500
people?  And how to make it 
easier to create this kind of 

05:50:04.501 --> 05:50:07.992
content?  Now we all know that 
most of us don't have the 

05:50:07.993 --> 05:50:10.227
expertise to re-create a million
dollar laboratory in VR but we 

05:50:12.060 --> 05:50:13.683
also know that many of us have 
things to teach.  And stories to

05:50:13.684 --> 05:50:17.969
tell.  And since the earliest 
days of expeditions, both 

05:50:17.970 --> 05:50:20.017
teachers and students have asked
for the ability to create their 

05:50:20.018 --> 05:50:23.930
own.  So we started to think 
about what it would be like to 

05:50:23.931 --> 05:50:25.931
make it easier to create VR 
content.

05:50:28.464 --> 05:50:30.528
That is why in January, we 
launched a Beta for students and

05:50:30.529 --> 05:50:35.009
teachers to make their own 
expeditions.  In partnership 

05:50:35.010 --> 05:50:37.874
with Rico, we outfitted students
and schools all over the globe 

05:50:40.944 --> 05:50:43.231
with Rico data 360 cameras and 
kits of Chrome books, 

05:50:43.232 --> 05:50:46.314
cardboards, phones, tripods, 
everything they needed to create

05:50:46.315 --> 05:50:48.552
their own expeditions.  We 
encouraged them to use the 

05:50:48.553 --> 05:50:51.830
theme, love where you live, so 
they could showcase their 

05:50:51.831 --> 05:50:55.960
communities to other schools 
participating in the program.  

05:50:55.961 --> 05:50:58.003
Let's take a look at the 
experience of one of these 

05:50:58.004 --> 05:51:00.849
schools in Lancaster, 
Pennsylvania with this quick 

05:51:00.850 --> 05:51:02.917
video.
&gt;&gt; I was born and raised here in

05:51:03.310 --> 05:51:05.159
Lancaster.
&gt;&gt; It is a big farming 

05:51:05.160 --> 05:51:07.222
community.
&gt;&gt; You see family farms 

05:51:07.223 --> 05:51:09.465
everywhere you go.
&gt;&gt; And I think it is really cool

05:51:09.466 --> 05:51:14.143
that we have this opportunity to
share our way of life.

05:51:15.777 --> 05:51:18.647
&gt;&gt; How we are going to do this 
is using a new tool called 

05:51:18.648 --> 05:51:20.688
towery creator.
&gt;&gt; Easy to use tool that allows 

05:51:20.689 --> 05:51:23.354
our students to create rich 360 
degree experiences.

05:51:25.787 --> 05:51:28.443
&gt;&gt; You will see the photos that 
the Ag department and the art 

05:51:28.444 --> 05:51:32.965
department have supplied.
&gt;&gt; Add a title and description. 

05:51:32.966 --> 05:51:34.966
Click on that and then it will 
bring up the street view.

05:51:37.703 --> 05:51:39.703
We could plug that into the 
tour.

05:51:40.376 --> 05:51:42.019
&gt;&gt; It will definitely in spear 
me to show more of Lancaster and

05:51:42.020 --> 05:51:44.464
hopefully it will inspire people
to do the same.

05:51:46.095 --> 05:51:48.095
&gt;&gt; And it's wonderful we can 
have our 

05:51:49.158 --> 05:51:50.598
students interacting with all of
these other student stories 

05:51:50.599 --> 05:51:53.030
across the globe.
&gt;&gt; This is Chicago's little 

05:51:53.031 --> 05:51:55.031
village neighborhood.
&gt;&gt; Very close living quarters.

05:51:56.277 --> 05:51:58.127
Very different from around here.
&gt;&gt; We were just looking at the 

05:51:58.128 --> 05:52:00.128
one from bally.

05:52:01.783 --> 05:52:03.783
Their classes are basically 
outside.

05:52:03.822 --> 05:52:05.260
&gt;&gt; I really thought that this 
was neat.

05:52:05.261 --> 05:52:07.261
&gt;&gt; Everybody is different on the
way they live.

05:52:09.602 --> 05:52:11.602
&gt;&gt; And every place has a unique 
story.

05:52:15.884 --> 05:52:22.944
[ Applause ]
&gt;&gt; BRITTANY MENNUTI: One of 

05:52:22.945 --> 05:52:26.856
hundreds of schools that are 
have participated in this 

05:52:26.857 --> 05:52:30.333
program.  For example, community
high school in Chicago made a 

05:52:30.334 --> 05:52:32.579
tour of Chicago's little village
showcasing the awesome arts and 

05:52:33.820 --> 05:52:36.265
the culture the village has to 
offer.  And the green school in 

05:52:36.266 --> 05:52:38.266
Bali, made 

05:52:39.713 --> 05:52:41.151
this amazing tour that showcases
other students what it is like 

05:52:41.152 --> 05:52:44.047
to get an education being 
completely emersed in nature, 

05:52:44.048 --> 05:52:46.048
that is right.

05:52:47.535 --> 05:52:49.535
These students actually learn 
outside.

05:52:50.592 --> 05:52:52.592
And another school in Spain 
created a 

05:52:54.701 --> 05:52:56.147
tour of all the historic Sites 
to show other schools what their

05:52:56.148 --> 05:52:58.148
community was like.

05:52:59.409 --> 05:53:01.454
These are just a few examples of
over 300 schools that have 

05:53:01.455 --> 05:53:03.901
participated in this program.  
And thanks to them, we now have 

05:53:03.902 --> 05:53:07.964
a ton of feedback about what it 
is like to create your own 

05:53:07.965 --> 05:53:09.965
expeditions.
As we were thinking through that

05:53:11.259 --> 05:53:12.906
feedback, it occurred to us, 
that when it comes to this 

05:53:12.907 --> 05:53:15.194
concept that Ben mentioned 
earlier, of transforming 

05:53:18.466 --> 05:53:20.702
abstract concepts to real ones, 
perhaps expeditions like content

05:53:20.703 --> 05:53:25.192
could be useful outside of the 
classroom.  Let's take the 

05:53:25.193 --> 05:53:27.629
example of buying a home.  When 
you're purchasing a home, you 

05:53:29.660 --> 05:53:31.660
might consult a whole Burch of 
resources 

05:53:32.745 --> 05:53:34.745
like photos, brochures, 
blueprints, 

05:53:36.200 --> 05:53:38.200
floor plans, in order to inform 
your decision.

05:53:40.495 --> 05:53:42.980
Now we can imagine how being 
emersed in a virtual tour would 

05:53:42.981 --> 05:53:44.981
give you a much better 
understanding of what it is like

05:53:46.444 --> 05:53:48.897
to actually live there.  That is
why we are super excited today 

05:53:51.147 --> 05:53:53.383
to announce the launch of tour 
creator.  A web application that

05:53:53.384 --> 05:53:55.384
gives anyone 

05:53:58.088 --> 05:54:00.346
the power to create VR content.
As of today, students, teachers,

05:54:02.629 --> 05:54:05.469
businesses and employees, folks 
like you and me, we can all 

05:54:05.470 --> 05:54:07.713
create our own VR tours and 
easily share them anywhere on 

05:54:09.735 --> 05:54:11.735
the web.

05:54:12.999 --> 05:54:15.630
When you go to tour creator, you
start out by starting a new tour

05:54:15.631 --> 05:54:19.702
or picking up on a draft.  And 
then you add some basic metadata

05:54:22.745 --> 05:54:27.016
like a title, description, 
category and a cover photo.  And

05:54:27.017 --> 05:54:28.857
then you fill your tour with 
scenes.  Scenes are made 

05:54:28.858 --> 05:54:32.782
possible through the use of 360 
photos.  If you have your own 

05:54:32.783 --> 05:54:35.638
360 photos, awesome.  You can 
upload them in just a couple of 

05:54:35.639 --> 05:54:40.522
clicks.  But if you don't have 
no fear, we integrated with 

05:54:40.523 --> 05:54:43.364
street view so take advantage of
the massive library of 360 

05:54:46.637 --> 05:54:48.637
photos already available in 
Google Maps.

05:54:50.128 --> 05:54:52.420
Once you add your scenes, you 
add points of interest.  These 

05:54:52.421 --> 05:54:53.872
are  essentially areas of 
importance that you like to 

05:54:53.873 --> 05:54:58.752
highlight and you can add a 
little bit of text information 

05:54:58.753 --> 05:55:01.408
to inform your viewer.  You can 
also enrich points of interest 

05:55:04.070 --> 05:55:06.070
with other media like 2D photos 
and in 

05:55:07.543 --> 05:55:08.967
the future, we'll add narration 
and ambient audio to help your 

05:55:08.968 --> 05:55:12.870
viewers feel like they are 
actually there.  Now when you're

05:55:12.871 --> 05:55:14.871
done creating your tour, publish
it to the web.

05:55:18.412 --> 05:55:19.618
Make it public for anyone to 
see, or unlisted so only those 

05:55:19.619 --> 05:55:21.865
with the link can see it.  When 
you publish it to the web, you 

05:55:23.689 --> 05:55:25.689
actually publish it to poly.

05:55:26.765 --> 05:55:29.601
If you're not familiar with 
poly, polyis Google's library of

05:55:29.602 --> 05:55:31.602
3D content launched late last 
year.

05:55:34.312 --> 05:55:36.312
Previously poly, had things like
3D models and sketches.

05:55:38.643 --> 05:55:39.869
As of it, it will also contain 
3D experiences in the forcement 

05:55:39.870 --> 05:55:42.308
of tours.
And this is where the true 

05:55:42.309 --> 05:55:45.582
beauty of this product comes in.
Because your publishing your 

05:55:45.583 --> 05:55:48.853
tour to the web, all you need to
do to share it is share a URL.

05:55:51.934 --> 05:55:53.934
So that means you can view your 
tour in 2D on desktop or laptop.

05:55:55.827 --> 05:55:58.058
You can text the link to your 
tour to a friend or colleague.  

05:55:58.059 --> 05:56:00.294
They can load it on their mobile
device and simply use magic 

05:56:00.295 --> 05:56:03.551
window to experience it.  Or 
they can tap and enter VR button

05:56:06.215 --> 05:56:08.042
and put to the in a Google 
cardboard and immediately be 

05:56:08.043 --> 05:56:10.043
emersed in the tour you just 
created.

05:56:13.398 --> 05:56:15.881
Now you may be wondering what is
this magic?  I thought you had 

05:56:15.882 --> 05:56:18.335
to install a Burch of Apps and 
get wheel really expensive 

05:56:18.955 --> 05:56:21.798
hardware.
This is made through a 

05:56:21.799 --> 05:56:24.641
Technology called web X, that 
you might have heard of at the 

05:56:24.642 --> 05:56:27.126
previous IO session.  Web XR 
means you can experience VR 

05:56:31.968 --> 05:56:33.968
content in your browser using 
any VR headset.

05:56:34.877 --> 05:56:36.109
Another beautiful thing about  
publishing these tours to the 

05:56:36.110 --> 05:56:40.855
web is that you can easily embed
them.  Just go to poly, click on

05:56:40.856 --> 05:56:45.391
a share button, and you'll get 
an ibreak snippet to put in any 

05:56:45.392 --> 05:56:47.392
blog or website.  And when you 
think about it, this can 

05:56:50.331 --> 05:56:52.976
be truly  transformational for 
business.  Let's go back to the 

05:56:52.977 --> 05:56:54.977
example of real estate.

05:56:56.037 --> 05:56:58.503
Imagine a future where instead 
of seeing a series of 2D feetose

05:56:58.504 --> 05:57:00.550
on line, instead you saw a 
virtual tour of that 

05:57:03.801 --> 05:57:05.801
property that you are about to 
buy.

05:57:07.263 --> 05:57:09.074
Now you may be thinking, okay 
maybe business businesses will 

05:57:09.075 --> 05:57:12.991
use this thing but will they 
actually use it?  To validate we

05:57:12.992 --> 05:57:15.034
were building the right product 
we partnered with a bunch of 

05:57:16.859 --> 05:57:18.502
companies across many verticals 
to get their feedback before we 

05:57:18.503 --> 05:57:20.503
launched and we want to share 
with youa I few examples 

05:57:24.000 --> 05:57:25.633
of what they created.
Time out New York has been using

05:57:25.634 --> 05:57:30.137
tour creator to create tours of 
having the best day ever in New 

05:57:30.138 --> 05:57:32.138
York City.

05:57:33.199 --> 05:57:34.629
Everything from Central Park to 
Lincoln center to the New York 

05:57:34.630 --> 05:57:38.135
public library.  Imagine it 
done.

05:57:41.440 --> 05:57:43.471
A company devoted to helping its
clients like style icon Lindsay 

05:57:43.472 --> 05:57:45.472
lain, 

05:57:46.939 --> 05:57:48.777
organize their lives and their 
closets, has been using tour 

05:57:48.778 --> 05:57:52.080
creator to showcase their 
expertise.  Now I don't know 

05:57:52.081 --> 05:57:54.844
about you, but if I had that 
many pairs of shoes, I probably 

05:57:56.668 --> 05:57:58.668
want to see a tour of how they 
were 

05:57:59.743 --> 05:58:01.743
going to organize them.

05:58:03.609 --> 05:58:05.665
REA group, owner of real estate.
com, the Number 1 place for 

05:58:05.666 --> 05:58:10.444
property in Australia, has been 
using tour creator to create 

05:58:10.445 --> 05:58:12.515
tours to embed in both their 
website and their Mobile Apps 

05:58:12.516 --> 05:58:17.264
soon.  As they mentioned to us, 
tour creator allows their users 

05:58:17.265 --> 05:58:22.562
to explore their properties from
wherever they are.  And of 

05:58:22.563 --> 05:58:25.288
course, in broad applications if
are this Technology and 

05:58:25.289 --> 05:58:27.959
Enterprise training.  KLM 
airlines has been using tour 

05:58:30.225 --> 05:58:32.673
creator to save lots of money on
training costs by acclimating 

05:58:32.674 --> 05:58:35.711
flight crews to the aircraft 
before they set foot inside.

05:58:38.784 --> 05:58:43.312
Now it's one thing to hear about
these use cases from us.  It's 

05:58:43.313 --> 05:58:45.761
another thing to hear about them
direct from the source.  Let's 

05:58:45.762 --> 05:58:48.062
doubt a quick video where we 
will share their feedback.

05:58:50.108 --> 05:58:51.725
&gt;&gt; Time out has awls always been
helping people explore their 

05:58:51.726 --> 05:58:53.726
city and tower creator helps us 
do just that.

05:58:56.850 --> 05:58:58.717
It is really going to help us be
able to  ibovate in the digital 

05:58:58.718 --> 05:59:00.718
world and create new content.

05:59:02.838 --> 05:59:04.838
We have cool 360 photos and we 
pop 

05:59:06.106 --> 05:59:07.727
them into tour creator and pull 
images, fun facts, things to do 

05:59:07.728 --> 05:59:11.177
in that area.  Anything you need
to know, we have really cool 

05:59:11.178 --> 05:59:13.178
tours through that.

05:59:14.302 --> 05:59:16.739
&gt;&gt; You can use tour creator 
virtually in the aircraft which 

05:59:16.740 --> 05:59:18.740
means we can train 

05:59:19.805 --> 05:59:23.702
people whenever and wherever 
they want with virtual reality. 

05:59:23.703 --> 05:59:25.703
It saves quite a bit of money.

05:59:26.777 --> 05:59:27.793
&gt;&gt; We have a mission to provide 
purposeful corking opportunities

05:59:27.794 --> 05:59:31.485
and authentic vocational 
experiences for individuals with

05:59:31.486 --> 05:59:34.345
Autism.
&gt;&gt; Tour creator allowed us to ha

05:59:34.346 --> 05:59:36.346
bus 8 our staff and employees 
before they come 

05:59:39.450 --> 05:59:41.450
in the building, before they 
make one step into our building.

05:59:43.154 --> 05:59:45.388
Tour creator lets us show them 
what to expect and become 

05:59:45.389 --> 05:59:47.389
acclimated to the 

05:59:48.679 --> 05:59:50.679
building, to the noise, to the 
machinery.

05:59:51.127 --> 05:59:53.978
&gt;&gt; The tour creator tool brings 
everything to life.  Clients 

05:59:53.979 --> 05:59:55.823
feel so comfortable knowing what
the spaces are going to look 

05:59:55.824 --> 05:59:57.824
like by seeing it through the 
tour creator tool.

06:00:01.146 --> 06:00:03.146
It's in dispensable.

06:00:08.373 --> 06:00:12.030
[ Applause ]
&gt;&gt; BRITTANY MENNUTI: Thank you. 

06:00:12.031 --> 06:00:14.066
We are super excited to launch 
tour creator to all of you today

06:00:14.067 --> 06:00:18.178
and can't wait to see all the 
tours you're going to  create.  

06:00:18.179 --> 06:00:20.032
Later this year, we will be 
introducing the ability to add 

06:00:20.033 --> 06:00:22.033
these 

06:00:23.096 --> 06:00:25.748
tours directly to the expedition
App so say tuned for that.  

06:00:25.749 --> 06:00:27.749
With, that I'll pass it back off
to 

06:00:28.822 --> 06:00:30.822
Ben for some Closing Remarks.

06:00:32.297 --> 06:00:36.171
&gt;&gt; BENJAMIN SCHROM: Thank you, 
brit.  So there you have it.

06:00:40.490 --> 06:00:41.103
A new powerful mode in Google 
expesdition that packs a 

06:00:41.104 --> 06:00:43.104
universe of places and things in
your pocket and 

06:00:45.814 --> 06:00:47.814
brings them into your classroom,
on to 

06:00:49.100 --> 06:00:51.810
your desk, on toppure of your 
textbook.  A biology degree from

06:00:51.811 --> 06:00:56.062
labster and daydream that uses 
the power of immersive

06:01:01.463 --> 06:01:03.513
com futmake access to education 
no reliant on your -- and 

06:01:03.514 --> 06:01:06.970
immersive content accessible to 
anyone straight from the web 

06:01:06.971 --> 06:01:10.848
browser.  I want to close on a 
note about why this is so 

06:01:10.849 --> 06:01:14.752
important.  I can't really think
about education and Technology 

06:01:14.753 --> 06:01:17.791
without  thinking about this 
guy.  20 years ago he observed 

06:01:17.792 --> 06:01:22.068
it might be time to reconsider 
our fundamental conception of 

06:01:22.069 --> 06:01:24.069
what a literal person -- 

06:01:25.961 --> 06:01:28.667
not a literal punish, a literate
person.  For hundreds of years 

06:01:28.668 --> 06:01:33.384
the primary way we have taught 
things and learned things in 

06:01:33.385 --> 06:01:35.837
school was via the written word 
or symbols.   Reading, writing 

06:01:35.838 --> 06:01:39.938
them.  These are obviously 
critical skills for many people 

06:01:39.939 --> 06:01:41.939
they are really challenging 
entry points.

06:01:44.441 --> 06:01:46.075
They are about as abstract as 
things get.  We have an 

06:01:46.076 --> 06:01:48.076
opportunity to use Technology to
lower these barriers to 

06:01:51.620 --> 06:01:52.860
make learning richer, less 
abstract, to make all that 

06:01:52.861 --> 06:01:56.972
important reading and writing we
do be augmented with the parts 

06:01:56.973 --> 06:01:58.973
of the world they refer to.

06:02:00.481 --> 06:02:02.481
And we can use photo sphere, 
sounds, 

06:02:05.125 --> 06:02:07.832
3D objects and simulations and 
all the formats to give learners

06:02:07.833 --> 06:02:09.875
effective entry points to 
complicated subjects and  ideas.

06:02:11.544 --> 06:02:13.990
So here is a quote from one of 
the teachers who participated in

06:02:13.991 --> 06:02:15.991
the Beta.

06:02:17.456 --> 06:02:19.456
It really resonated with us.  It
is something I remember seeing 

06:02:20.947 --> 06:02:23.389
every day when I have been a 
teacher every day 10 years ago. 

06:02:23.390 --> 06:02:25.390
Many very, very smart students, 
they 

06:02:27.036 --> 06:02:29.036
might not bring extensive

06:02:30.769 --> 06:02:33.211
textural literacy for a Burch of
different reasons.  Language 

06:02:33.212 --> 06:02:35.212
bears, educational background.

06:02:36.484 --> 06:02:38.312
We we treat this like it say 
blocker to their  learning, we 

06:02:38.313 --> 06:02:42.256
don't have to.  We view  all, 
and we all have an opportunity 

06:02:42.257 --> 06:02:44.257
to use all these tools.

06:02:45.520 --> 06:02:47.351
VR and AR to give them a more 
natural, more inherently visual 

06:02:47.352 --> 06:02:52.090
entry point to really important 
ideas in learning.  And as this 

06:02:52.091 --> 06:02:56.779
teacher says, we can help to 
level the playing field.  So 

06:02:56.780 --> 06:02:58.780
thank you very much!
[ Applause ]

07:20:31.336 --> 07:20:33.336
Bringing AI and machine learning

07:20:36.801 --> 07:20:38.801
innovations to health healthcare

07:26:00.839 --> 07:26:02.839
My name is Lily Peng.

07:26:04.339 --> 07:26:06.339
I'm a physician by training and 
I work 

07:26:09.428 --> 07:26:11.428
medical -- Lgoogle  AI 
healthcare team.

07:26:12.696 --> 07:26:14.696
I am a Product Manager and today
we're 

07:26:16.757 --> 07:26:18.757
you about a couple of projects 
that we 

07:26:20.015 --> 07:26:22.015
have been working on in our 
group.

07:26:23.670 --> 07:26:25.670
lot of this.

07:26:26.961 --> 07:26:28.961
So I'm not going to go over this
too much.

07:26:30.838 --> 07:26:33.511
because we apply deep learning 
to medical information, I kind 

07:26:33.512 --> 07:26:35.512
of wanted to 

07:26:39.422 --> 07:26:41.422
get used quite a bit, but are 
some what defined.

07:26:47.817 --> 07:26:50.101
This is a pretty broad term and 
build non-human intelligence.

07:26:53.357 --> 07:26:55.357
Machine learning is a particular
type 

07:26:58.061 --> 07:26:59.932
suppose, that teaches machine to
be -- teaches machines to be 

07:26:59.933 --> 07:27:01.933
smarter.

07:27:05.042 --> 07:27:07.042
particular type of machine 
learning 

07:27:08.109 --> 07:27:10.109
which you guys have probably 
heard about quite a bit.

07:27:15.573 --> 07:27:17.573
So it's a modern  reincarnation 
of 

07:27:21.301 --> 07:27:23.301
networks which was invent in the
1960s.

07:27:24.578 --> 07:27:26.578
It's a collection of simple, 
trainable 

07:27:28.857 --> 07:27:30.900
layers and they work together to
solve a model complicated tasks.

07:27:37.214 --> 07:27:39.214
data sets and compute which we 
had in 

07:27:40.832 --> 07:27:42.832
the 1980

07:27:45.688 --> 07:27:47.688
's and '90s, they work with 
larger data 

07:27:49.997 --> 07:27:51.997
compute power, we find that 
neuro networks work much better.

07:27:55.947 --> 07:27:57.947
aways that I want you guys to 
get from this slide.

07:27:59.602 --> 07:28:01.602
deep learning trains algorithms 
which 

07:28:02.687 --> 07:28:04.687
are very accurate when given 
enough data.

07:28:06.975 --> 07:28:09.842
learn category do this without 
feature engineering.  And that 

07:28:09.843 --> 07:28:11.843
means without explicitly rules.

07:28:16.375 --> 07:28:18.375
Well, in traditional computer 
vision, 

07:28:21.522 --> 07:28:23.153
the rules that machines should 
follow to make a certain 

07:28:23.154 --> 07:28:25.154
prediction task.

07:28:27.893 --> 07:28:29.950
networks, we spend very little 
time in feature engineering and 

07:28:29.951 --> 07:28:31.951
writing these rules.

07:28:34.031 --> 07:28:36.901
time we spend in data 
preparation, numerical 

07:28:36.902 --> 07:28:38.902
optimization and model 
architecture.

07:28:41.394 --> 07:28:43.394
question quite a bit and the 
question 

07:28:44.655 --> 07:28:48.139
is:  How much data is enough 
data for a deep neuro network?In

07:28:48.140 --> 07:28:50.995
general, more is better, but 
there are diminishing returns 

07:28:50.996 --> 07:28:52.996
beyond a certain point.

07:28:54.681 --> 07:28:56.681
rule of thumb is that we like to
have 

07:29:00.034 --> 07:29:02.034
about 5,000 positives per class 
and but and relevant data.

07:29:05.372 --> 07:29:07.845
So garbage in, garbage out.  The
model will predict very well 

07:29:07.846 --> 07:29:09.846
what 

07:29:12.110 --> 07:29:14.110
predict.

07:29:17.653 --> 07:29:19.653
when you think about where 
machine 

07:29:21.339 --> 07:29:22.952
deep learning can make the 
biggest impact, it's really in 

07:29:22.953 --> 07:29:25.439
places where through.

07:29:30.309 --> 07:29:32.309
One of our directors, Greg Carr 
rato put its best.

07:29:37.255 --> 07:29:39.255
you have done T*EFRPB,000 times 
and on 

07:29:40.925 --> 07:29:42.360
the 10,001st time, you don't 
want to do it anymore.You are 

07:29:42.361 --> 07:29:45.824
sick of it.  This is really good
in screening applications when 

07:29:45.825 --> 07:29:47.825
you see a lot of 

07:29:50.924 --> 07:29:52.924
that are potentially normal.

07:29:55.667 --> 07:29:57.667
So here on the right, you see a 
graph 

07:30:01.366 --> 07:30:03.366
of the shortage of

07:30:04.920 --> 07:30:06.920
This is forever other medical 

07:30:09.375 --> 07:30:11.375
specialties, but radiologists 
are here.

07:30:19.652 --> 07:30:21.652
that our group has worked on is 
with a diabetic Rhettinopathy.

07:30:28.192 --> 07:30:30.192
say than Rhettinopathy.

07:30:34.400 --> 07:30:38.268
diabetes are at risk and need to
be screened once a year.  This 

07:30:38.269 --> 07:30:40.269
is done by taking a picture of 

07:30:41.337 --> 07:30:43.980
back of the eye with a special 
camera as you see here.  And the

07:30:43.981 --> 07:30:45.981
picture looks a little bit like 
that.

07:30:51.226 --> 07:30:53.226
an image like this is they grade
it on a 

07:31:00.026 --> 07:31:02.277
from no disease so healthy to 
the end stage B. they do 

07:31:02.278 --> 07:31:04.323
grading, they look for findings.

07:31:07.420 --> 07:31:10.087
Little things called micro 
anyou'rism that are out 

07:31:10.088 --> 07:31:12.088
pouchings in the blood guy.

07:31:15.470 --> 07:31:17.115
That indicates how bad -- how 
bad your diabeaties is affecting

07:31:17.116 --> 07:31:19.116
your vision.

07:31:22.437 --> 07:31:24.437
the world, there are not enough 
eye doctors to do this task.

07:31:27.772 --> 07:31:30.287
So in one of the -- with one of 
our partners in India, a couple 

07:31:30.288 --> 07:31:32.288
of our 

07:31:34.407 --> 07:31:36.407
shortage of worn 27,000 eye 
doctors in the nation.

07:31:39.856 --> 07:31:41.856
As a result, about 45% of

07:31:44.945 --> 07:31:49.471
suffer some vision loss before 
the disease is detectd.  Again, 

07:31:49.472 --> 07:31:51.914
this is something that should 
happening.

07:31:55.172 --> 07:31:56.585
So what we decided to do is we 
partnered with a couple of 

07:31:56.586 --> 07:31:58.586
hospitals in 

07:32:00.528 --> 07:32:02.528
a screening provider in the U.S.

07:32:04.596 --> 07:32:06.596
and we got about  130,000 images
for this first go around.

07:32:10.547 --> 07:32:12.547
hired 54 ophthalmologists and 
built a labeling tool.

07:32:15.851 --> 07:32:18.149
The opt mathatmologists made 
this.interesting thing was that 

07:32:18.150 --> 07:32:23.854
there was actually variant and 
how doctors call the images.

07:32:34.939 --> 07:32:35.863
about 880,000 diagnosis in all. 
With this label data set, we put

07:32:35.864 --> 07:32:37.864
it 

07:32:53.855 --> 07:32:57.921
It is generally used to class 
classify cats and dogs for our 

07:32:53.855 --> 07:32:57.907
photo.  So the other thing that 
we learned really useful to have

07:32:57.908 --> 07:32:59.908
this 5 point 

07:33:00.932 --> 07:33:02.932
diagnosis, it was also 
incredibly  

07:33:04.245 --> 07:33:06.489
on housekeeping predictions like
image quality, whether this is a

07:33:06.490 --> 07:33:08.775
left or right of the etna this 
is.

07:33:13.326 --> 07:33:15.326
So we added that to the network 
as well.

07:33:19.899 --> 07:33:21.899
This is the first version of our
model 

07:33:26.281 --> 07:33:28.281
journal in 2016, I believe.

07:33:29.780 --> 07:33:31.780
And right here on the left is a 
chart 

07:33:34.291 --> 07:33:36.291
and aggregate over about 10,000 
images.

07:33:39.756 --> 07:33:41.756
Sensitivity is on the right oop 
-- on the Y access.

07:33:46.051 --> 07:33:48.051
time when a parent has a disease
and you 

07:33:49.151 --> 07:33:51.993
the model was calling the 
disease.  And then specificity 

07:33:51.994 --> 07:33:53.994
is the proportion 

07:33:56.889 --> 07:33:59.765
have the disease that the model 
or doctor got right.  You can 

07:33:59.766 --> 07:34:02.622
see you want something with 
sensitivity and high 

07:34:02.623 --> 07:34:05.879
specificity.  Up into the right 
or up into the left is good.

07:34:09.181 --> 07:34:11.643
here on the chart that the 
little dots are the doctors that

07:34:11.644 --> 07:34:13.644
were grading the same set.

07:34:18.218 --> 07:34:20.218
and these are board certified 
U.S. physicians.

07:34:25.614 --> 07:34:26.824
are opt are opt  thatmologists, 
general opt thatmologists by 

07:34:26.825 --> 07:34:28.825
training.

07:34:31.974 --> 07:34:33.974
which are combined score, we're 
just a 

07:34:35.489 --> 07:34:40.039
little better than the 
meetingant particular study.  So

07:34:40.040 --> 07:34:42.040
since then, we have improved the
model.

07:34:45.539 --> 07:34:48.405
we were sort of on par with 
generalists and then this year, 

07:34:48.406 --> 07:34:50.406
this is a new paper that we 
published.

07:34:52.524 --> 07:34:54.524
We actually used retina 
specialists to grade the images.

07:34:55.790 --> 07:34:57.790
So they're specialists.

07:35:02.455 --> 07:35:04.455
argue when they guess

07:35:05.784 --> 07:35:07.784
disagreed about what the 
diagnosis was.

07:35:09.480 --> 07:35:12.163
with the retina specialists.  
This cappa thing is just 

07:35:12.164 --> 07:35:14.164
agreement on 

07:35:18.331 --> 07:35:20.331
see that essentially we're sort 
of in 

07:35:22.634 --> 07:35:24.634
between the ophthalmologists and
retina specialists.

07:35:28.630 --> 07:35:30.630
working on since beyond 
improving the 

07:35:34.748 --> 07:35:36.748
have the networks explain how 
it's making a prediction.

07:35:42.548 --> 07:35:44.999
the consumer world, we started 
using this technique called show

07:35:45.000 --> 07:35:47.000
me where.

07:35:50.308 --> 07:35:52.979
image we generate a heat map of 
where the relevant pixels are 

07:35:52.980 --> 07:35:56.031
for this particular prediction.
here you can see a picture of a 

07:35:58.269 --> 07:36:00.269
pomeranian and the heat map 
shows you 

07:36:02.177 --> 07:36:04.177
face of the pomeranian that make
its 

07:36:05.190 --> 07:36:07.190
look

07:36:09.778 --> 07:36:12.644
pomeranian and on the right, you
have (inaudible) and the 

07:36:12.645 --> 07:36:14.645
networks highlighting the afghan
hound.

07:36:20.878 --> 07:36:22.096
we applied it to the funded 
images and we said show me 

07:36:22.097 --> 07:36:24.097
where.

07:36:28.660 --> 07:36:32.761
and I can tell it's mild disease
-- normal to me.  I can't tell 

07:36:32.762 --> 07:36:34.992
there's any disease there.  But 
a highly trained doctor would be

07:36:39.100 --> 07:36:41.961
pick up little things called 
micro aneurisms where the green 

07:36:41.962 --> 07:36:43.962
spots are.

07:36:45.413 --> 07:36:48.106
moderate disease and this is a 
little worse because you can see

07:36:48.107 --> 07:36:50.575
some bleeding at the ends here.

07:36:54.935 --> 07:36:56.984
actually, I don't know if I can 
signal.  There's a bleeding 

07:36:56.985 --> 07:36:58.985
there and the heat 

07:37:01.518 --> 07:37:03.518
You can see that it picks up the

07:37:05.177 --> 07:37:07.177
bleeding, but there's twoart 
facts in this image.

07:37:11.582 --> 07:37:13.684
is a dust spot on just like 
little dark spot and then there 

07:37:13.685 --> 07:37:17.889
is this little of the image.  
You can tell that a model just 

07:37:17.890 --> 07:37:19.890
ignores it essentially.

07:37:23.804 --> 07:37:26.302
You train a model.  We showed 
that it is some what 

07:37:26.524 --> 07:37:29.381
explainable.doing the right  
thing.  What's next?

07:37:33.696 --> 07:37:35.725
We actually have to deploy this 
into systems and we're providing

07:37:35.726 --> 07:37:37.726
them to 

07:37:39.690 --> 07:37:41.690
bring this to patients and 
actually, Dr.

07:37:43.293 --> 07:37:49.555
Jessgoing to speak after me.  
Okay.  So I've given a screening

07:37:49.556 --> 07:37:52.455
application diagnosis that we're
working on.

07:37:55.911 --> 07:37:57.911
So, in this particular example, 
we're 

07:38:03.078 --> 07:38:05.078
Lwe're talking about breast 
cancer, but 

07:38:06.118 --> 07:38:08.118
midwesta size to nearby lymph 
nodes.

07:38:11.497 --> 07:38:13.497
diagnosed with breast cancer and
the 

07:38:16.363 --> 07:38:18.363
primary breast cancer isry 
moved, the 

07:38:19.591 --> 07:38:21.591
taking out what we call lymph 
nodes so 

07:38:23.667 --> 07:38:25.667
we can examine to see whether or
not the 

07:38:26.670 --> 07:38:28.670
breast cancer

07:38:30.697 --> 07:38:32.319
messta sized in the lymph nodes.
Reading this is not an easy 

07:38:32.320 --> 07:38:34.320
task.

07:38:38.272 --> 07:38:40.302
they went back to look at them, 
this 24% had a change in noteo 

07:38:40.303 --> 07:38:42.303
status.

07:38:46.649 --> 07:38:49.535
it was read negative.  If it was
negative, it was read positive.

07:38:54.495 --> 07:38:56.495
that showed that a pathologist 
with 

07:38:57.516 --> 07:38:59.516
unlimited time not overwhelmed 
with data is quite 

07:39:02.466 --> 07:39:04.466
finding the tumors.

07:39:06.598 --> 07:39:08.598
When you put time constraint on 
the 

07:39:11.553 --> 07:39:13.553
pathologist, the sensitivity 
drops.

07:39:16.069 --> 07:39:18.069
And people start overlooking 
where little disease may be.

07:39:23.436 --> 07:39:28.748
one there.  That is usually 
small things like this mixed.  

07:39:28.749 --> 07:39:30.814
This is not surprising given 
that so much information is in 

07:39:30.815 --> 07:39:32.815
each slide.

07:39:38.744 --> 07:39:40.744
Slides, if digitized is about 10
giga  pixels.

07:39:44.998 --> 07:39:47.426
pathologists can find 73% of the
cancer fist they spend all their

07:39:47.427 --> 07:39:51.953
time looking false positives.  
So we train a model that can 

07:39:51.954 --> 07:39:53.954
help with this task.

07:39:57.966 --> 07:39:59.966
cancer lesions and it has eight 
false positives per slide.

07:40:05.948 --> 07:40:08.193
is sensitive and also quite 
specific that relies to look 

07:40:08.194 --> 07:40:11.041
over the false false positives.

07:40:15.984 --> 07:40:17.984
working on  validation in a 
clinic right 

07:40:20.270 --> 07:40:23.183
reader studies, how does it 
actually interact with the 

07:40:23.184 --> 07:40:25.184
doctor is really quite 
important.

07:40:27.103 --> 07:40:29.175
there are applications to other 
tissues and talk about lymph 

07:40:29.176 --> 07:40:31.176
nodes.

07:40:33.810 --> 07:40:35.810
that

07:40:40.211 --> 07:40:42.211
show this works for them.

07:40:45.338 --> 07:40:47.338
can produce algorithms that are 
very 

07:40:50.223 --> 07:40:51.248
make calls that a doctor might 
already make half about 

07:40:51.249 --> 07:40:56.176
predicting things that  do for 
imaging?  As recall in the 

07:40:56.177 --> 07:40:58.177
beginning of the 

07:40:59.358 --> 07:41:01.358
talk, one of the great things is
you can 

07:41:02.698 --> 07:41:04.698
very accurate algorithms without
writing rules.

07:41:05.994 --> 07:41:07.994
So, this allows us to make 
completely new discoveries.

07:41:10.912 --> 07:41:12.912
paper that we published recently
where 

07:41:18.488 --> 07:41:20.488
models to predict cardio vas 
cooler risk factors.

07:41:22.565 --> 07:41:24.565
pressure, things that doctors 
consider 

07:41:27.845 --> 07:41:29.845
right now to assess a patient's 
cardio videos coolar risk.

07:41:31.637 --> 07:41:33.637
So it turns thought we cannot 
only 

07:41:34.674 --> 07:41:36.674
predict many of these factors 
and quite 

07:41:38.581 --> 07:41:41.221
actually directly report a five 
year risk of a cardiac's event.

07:41:47.997 --> 07:41:51.883
preliminary and the AUC for this
prediction is .7.  What that 

07:41:51.884 --> 07:41:53.884
number means if given two 

07:41:55.758 --> 07:41:58.221
one picture of a patient that 
did not have a cardiovascular 

07:41:58.222 --> 07:42:00.364
event and one did.

07:42:04.668 --> 07:42:06.906
It is right about 70% of the 
time.  Most doctor is around 50%

07:42:06.907 --> 07:42:08.907
of the time.

07:42:10.783 --> 07:42:12.783
to do based on the retinol image
alone.  So why is this exciting?

07:42:19.358 --> 07:42:21.604
to assess your risk for 
cardiovascular disease, there 

07:42:21.605 --> 07:42:23.605
are needles involved.

07:42:25.881 --> 07:42:28.565
if anyone has gotten blood 
cholesterol screening.  You fast

07:42:28.566 --> 07:42:30.566
the night before and then we 

07:42:31.642 --> 07:42:34.074
blood samples and then assess 
your risk.  Again, I want to 

07:42:34.075 --> 07:42:36.075
emphasize this is 

07:42:38.158 --> 07:42:40.818
these results support the idea 
that we may be able to use 

07:42:40.819 --> 07:42:45.563
something like an predictions 
that we couldn't make before.  

07:42:45.564 --> 07:42:47.564
This might be able to be done in
sort 

07:42:49.032 --> 07:42:51.032
manner.

07:42:56.785 --> 07:42:58.785
examples of how deep learning 
can really 

07:43:00.242 --> 07:43:02.735
availability and accuracy in 
healthcare.  And one of the 

07:43:02.736 --> 07:43:04.736
things that I want to 

07:43:08.480 --> 07:43:10.480
acknowledge here is the reason 
why this 

07:43:11.562 --> 07:43:13.796
has become more and more 
exciting is, I tensorflow is 

07:43:13.797 --> 07:43:15.797
open source.

07:43:18.362 --> 07:43:20.362
In kind of opens standard from a

07:43:22.056 --> 07:43:24.056
I have given  examples, but 
there's a 

07:43:28.399 --> 07:43:30.399
the community in other medical 
centers that are very similar.

07:43:33.955 --> 07:43:36.799
I am really excited about what 
this technology can bring to the

07:43:36.800 --> 07:43:38.800
field.

07:43:41.295 --> 07:43:43.295
I would like to introduce Jess 
Mega.

07:43:46.596 --> 07:43:49.027
is a real doctor and a chief 
medical doctorate kill burly.

07:43:54.591 --> 07:43:56.591
all for being here and thank 
you, Lily, for kicking us off.

07:43:58.914 --> 07:44:01.553
think the excitement around AI 
and healthcare could not be 

07:44:01.554 --> 07:44:03.554
greater.

07:44:05.275 --> 07:44:07.275
As you heard, my name is Jess 
Mega.

07:44:11.874 --> 07:44:17.404
to be part of the Alphabet 
family.Google X.  We focus 

07:44:17.405 --> 07:44:19.405
solely on healthcare and life 
sciences.

07:44:22.160 --> 07:44:25.027
health information and make it 
useful so that patients live 

07:44:25.028 --> 07:44:27.028
healthier lives.

07:44:29.743 --> 07:44:32.627
I'll talk about today focuses on
diabetes and really lends itself

07:44:32.628 --> 07:44:38.788
to the started.  But I think 
it's very important to pause and

07:44:38.789 --> 07:44:40.789
think about health data broadly.

07:44:42.672 --> 07:44:44.672
any individual who's in the 
audience 

07:44:46.133 --> 07:44:49.012
today has about several 
gigabytes of health data.think 

07:44:49.013 --> 07:44:51.013
about health in the years to 
come 

07:44:52.283 --> 07:44:54.283
and think about genomix, 
molecular 

07:44:58.227 --> 07:44:59.641
sensor dat apparent recorded 
data, electronic health record 

07:44:59.642 --> 07:45:01.642
and claims, 

07:45:04.951 --> 07:45:07.422
of data and we're committed to 
stay ahead of this so that we 

07:45:07.423 --> 07:45:09.423
can help patients.

07:45:14.007 --> 07:45:19.387
some of our efforts on diabetes 
is this issue.  About 1 in 10 

07:45:19.388 --> 07:45:21.388
people has diabetes.

07:45:22.499 --> 07:45:24.499
When you have diabetes, it 
affects how 

07:45:25.588 --> 07:45:27.588
glucose in the body.

07:45:29.851 --> 07:45:31.851
If you think about  
pre-diabetes, the 

07:45:33.922 --> 07:45:35.922
diabetes, that is 1 in 3 people.

07:45:38.454 --> 07:45:40.454
That would be one entire section
of 

07:45:42.380 --> 07:45:44.380
have down stream effects.

07:45:47.403 --> 07:45:49.403
You heard Lily talk about 
diabetes retinopathy.

07:45:51.345 --> 07:45:53.392
problems with their heart, 
kidneys and neuropathy.  These 

07:45:53.393 --> 07:45:56.040
are the things we need to get 
ahead of.We have two main issues

07:45:56.041 --> 07:45:58.041
that we're trying to address.

07:45:59.733 --> 07:46:01.733
The first one is an information 
gap.

07:46:03.816 --> 07:46:06.259
the most adherent parent with 
diabetes and my grandfather was 

07:46:06.260 --> 07:46:10.970
one of these sugar four times a 
day.  And I don't know if anyone

07:46:10.971 --> 07:46:12.971
today has been age to have any 
of the snacks.

07:46:19.270 --> 07:46:23.937
had some of the caramel pop I 
popcorn.  So if I didn't check 

07:46:23.938 --> 07:46:28.854
my glucose in wouldn't have 
captured that data.  So we know 

07:46:28.855 --> 07:46:30.855
biology is happening all of the 
time.

07:46:32.970 --> 07:46:34.395
patients in the hospital, as a 
cardiologist, I can see 

07:46:34.396 --> 07:46:36.396
someone's heart 

07:46:38.068 --> 07:46:40.524
and then people go home.  But 
biology is still happening.

07:46:44.225 --> 07:46:49.194
with diabetes.  The second issue
is a decision gap.  You may see 

07:46:49.195 --> 07:46:51.841
a care provider once a a year, 
but health decisions are 

07:46:53.266 --> 07:46:55.266
happening every single day.

07:47:00.248 --> 07:47:02.248
And how do we decide to close 
this gap.

07:47:03.731 --> 07:47:06.189
We're focusing on three key 
missions be true for almost 

07:47:06.190 --> 07:47:08.883
every project we take on.  We're
thinking about how to shift from

07:47:11.801 --> 07:47:14.259
reactive care to much more 
proactive care.  In order to do 

07:47:14.260 --> 07:47:17.143
that and to get to the we can 
use the power of AI, we have to 

07:47:18.168 --> 07:47:20.168
do three things.  We have to 
think about collecting the 

07:47:23.081 --> 07:47:24.286
data and today I'll be talking 
about continuous glucose  

07:47:24.287 --> 07:47:26.287
monitoring.

07:47:28.609 --> 07:47:31.269
this data so that it is in a 
forthat the that we can unlock 

07:47:31.270 --> 07:47:33.270
and activate and truly help 
patients.

07:47:35.980 --> 07:47:37.980
Whether we do this in the field 
of 

07:47:41.057 --> 07:47:43.057
diabetes, this is the general 
premise.

07:47:44.138 --> 07:47:46.138
think about is the collection of
data.

07:47:48.430 --> 07:47:50.430
You hear Lily say garbage in, 
garbage out.

07:47:52.328 --> 07:47:54.328
insights unless we understand 
what we're looking at.

07:47:55.606 --> 07:47:58.068
One thing is thinking about 
extremely biocompatible 

07:47:58.069 --> 07:48:00.069
electronics.

07:48:02.414 --> 07:48:04.414
So we are working on next 
generation sensing.

07:48:06.988 --> 07:48:09.872
to, for example, with extremely 
small continuous glucose 

07:48:09.873 --> 07:48:11.873
monitors where we are 

07:48:13.802 --> 07:48:15.802
some of these tools, this will 
lead to seemless integration.

07:48:20.966 --> 07:48:24.220
we're understanding how your 
body is handling sugar T. also 

07:48:24.221 --> 07:48:26.853
helps us understandna not only 
happens at a population level, 

07:48:26.854 --> 07:48:31.881
but what might happen on an 
individual level when certain 

07:48:31.882 --> 07:48:33.907
foods.  And the final thing is 
to try to 

07:48:37.179 --> 07:48:39.179
reduce cost of dices so we can 
democratize health.

07:48:44.173 --> 07:48:46.173
of this data and I can speak 
both as a 

07:48:48.265 --> 07:48:50.265
The thing people will say is 
data is 

07:48:51.750 --> 07:48:53.750
with the tsunami of data.  You 
need to organize it.

07:48:59.339 --> 07:49:01.380
company called enduo.  The idea 
is put the patient in the 

07:49:05.235 --> 07:49:09.363
diabetes managements.  This gets
to the heart of someone who is 

07:49:09.364 --> 07:49:11.364
going to be happier and 
healthyef.What does that mean?

07:49:15.115 --> 07:49:17.115
We try to empower people with 
their glucose control.

07:49:20.080 --> 07:49:22.080
diabetes association and see the
ranges that are recommended.

07:49:25.608 --> 07:49:27.891
what you your day looks like.  
Again giving a parent or a user 

07:49:27.892 --> 07:49:29.892
that 

07:49:31.990 --> 07:49:33.990
of their decisions and then  
tracking 

07:49:35.055 --> 07:49:37.055
steps through Google fit.

07:49:39.150 --> 07:49:43.678
how glucose is pairing with your
activity in your diet.here, 

07:49:43.679 --> 07:49:46.362
there's an app that prompts for 
the photo of the food and then 

07:49:46.363 --> 07:49:48.363
using 

07:49:50.251 --> 07:49:52.076
Tensorflow we can identify the 
food.  This is where the true 

07:49:52.077 --> 07:49:54.077
personal 

07:49:56.810 --> 07:49:58.847
because if you eat a certain 
meal, it's helpful to understand

07:49:58.848 --> 07:50:00.848
how your body ends up relating 
to it.

07:50:03.163 --> 07:50:05.163
preliminary data suggesting that
the 

07:50:08.886 --> 07:50:10.716
way I respond to a banana or you
might respond.  That's important

07:50:10.717 --> 07:50:12.717
to know because all 

07:50:13.983 --> 07:50:15.983
those general recommendations 
that we 

07:50:18.453 --> 07:50:20.453
make as a doc, if someone comes 
to see 

07:50:22.744 --> 07:50:25.043
say here are the thins you need 
to discount you need to watch 

07:50:25.044 --> 07:50:27.044
your diet, 

07:50:28.940 --> 07:50:31.423
exercise, you have to see your 
foot doctor, primary care doctor

07:50:31.424 --> 07:50:33.424
and foot 

07:50:34.471 --> 07:50:36.724
and that's a lot to integrate.  
What we try to do is pair all of

07:50:36.725 --> 07:50:41.465
this with a care lead.  This is 
a person that helps someone on 

07:50:50.377 --> 07:50:52.377
If you look in the midst of what
I am 

07:50:53.622 --> 07:50:56.111
number of different lines.  I 
want us to drill down and look 

07:50:56.112 --> 07:50:58.112
into that.

07:50:59.802 --> 07:51:01.802
difference between the data you 
might 

07:51:03.463 --> 07:51:05.463
see in an episodic glucose 
example or 

07:51:07.542 --> 07:51:09.542
the continuous glucose monitor 
enabled by this new sensing.

07:51:15.497 --> 07:51:17.541
glucose monitor and look at a 
cluster of days.  This is an 

07:51:17.542 --> 07:51:20.005
example.  We might start to see 
patterns.

07:51:25.494 --> 07:51:27.494
of thing a care lead or 
physician would 

07:51:28.605 --> 07:51:31.041
through, but this is where you 
start to unlock the power of  

07:51:31.042 --> 07:51:33.042
learning models.

07:51:36.351 --> 07:51:38.351
can start to see is a cluster of
different mornings.

07:51:40.651 --> 07:51:43.104
So maybe we'll make a positive 
that everyone's eating 

07:51:43.105 --> 07:51:45.105
incredibly healthy here at 
Google I/O.

07:51:51.891 --> 07:51:53.320
mornings, but we go back into 
our regular lives and eating a 

07:51:53.321 --> 07:51:55.321
different cluster of foods.

07:51:57.633 --> 07:51:59.061
giving general advice, we can 
use different models to point 

07:51:59.062 --> 07:52:01.062
out.

07:52:04.219 --> 07:52:07.058
on with one patient, for 
example, we were seeing a 

07:52:07.059 --> 07:52:11.548
cluster around Wednesdays. 
Wednesdays?  Is it that the 

07:52:11.549 --> 07:52:16.078
person is going and stopping by 
a particular location or a lot 

07:52:16.079 --> 07:52:18.121
of stress that day, but again 
instead of giving general care, 

07:52:18.122 --> 07:52:20.122
we can 

07:52:23.223 --> 07:52:25.223
the most comprehensive and 
actionable example.

07:52:27.115 --> 07:52:29.115
So again, thinking about what 
we're 

07:52:30.194 --> 07:52:32.038
and collecting data, organizing 
it and then  activating it and 

07:52:32.039 --> 07:52:37.635
making it relevant.  So that is 
the way we're thinking about 

07:52:37.636 --> 07:52:41.564
diabetes care and that is the 
way work.  We heard this morning

07:52:41.565 --> 07:52:43.565
in another discussion.  We have 
tongue about the problems that 

07:52:45.673 --> 07:52:47.322
going to solve and use these 
tools to really make a 

07:52:47.323 --> 07:52:49.323
difference.

07:52:53.896 --> 07:52:55.896
can think about activating 
information?

07:52:58.736 --> 07:53:01.465
Lily that diabetic 
retinoipalitysy one of the  

07:53:03.336 --> 07:53:05.336
leading causes of blindness.

07:53:06.594 --> 07:53:09.452
excellent glucose care, there 
may be times where you start to 

07:53:09.453 --> 07:53:11.453
have organ damage.

07:53:15.225 --> 07:53:17.225
they end up affecting the fundus
and the retina.

07:53:19.081 --> 07:53:21.081
Now, we know that people with 
diabetes 

07:53:23.168 --> 07:53:25.396
undergo  screening, but earlier 
in the talk, I gave you the 

07:53:25.397 --> 07:53:27.397
laundry list of 

07:53:28.465 --> 07:53:30.706
patients to do who have 
diabetes.  So what we're trying 

07:53:30.707 --> 07:53:32.707
to do with this 

07:53:33.780 --> 07:53:36.552
figure out how do we actually 
get ahead of the product and 

07:53:36.553 --> 07:53:38.553
think about an end to 

07:53:39.666 --> 07:53:41.901
that we realize and bring down 
the challenges that exist today.

07:53:48.552 --> 07:53:50.749
getting screened, one of it is 
accessibility and one is having 

07:53:50.750 --> 07:53:52.750
access 

07:53:54.248 --> 07:53:56.248
ophthalmologists.

07:53:57.318 --> 07:53:59.375
This is a problem in the United 
States and in other parts of the

07:53:59.376 --> 07:54:03.237
world.This is something we think
very globally about when we 

07:54:03.238 --> 07:54:05.238
think about the solution.

07:54:10.220 --> 07:54:12.220
this idea that we can take 
algorithms 

07:54:15.727 --> 07:54:18.012
sensitivity and specificity of 
diagnosing diabeatic.

07:54:22.897 --> 07:54:27.042
outlined.  The question is:  How
do we think about creating this 

07:54:27.043 --> 07:54:29.043
product because the 

07:54:30.116 --> 07:54:32.344
at places like Alphabet and 
working at partners like you all

07:54:32.345 --> 07:54:34.345
here today, we can 

07:54:35.619 --> 07:54:37.661
problem we're solving and create
the algorithms, but we need to 

07:54:37.662 --> 07:54:39.662
step back and 

07:54:41.523 --> 07:54:43.523
to create in the space of 
healthcare and life science.

07:54:45.808 --> 07:54:47.808
We need to think about the image
and delivering that.

07:54:50.861 --> 07:54:52.861
So what we're doing is taking 
this 

07:54:54.058 --> 07:54:56.058
our  partners.  There's a 
promising pilot that's  

07:55:00.582 --> 07:55:02.407
as in India and we're so 
encouraged to hear the early 

07:55:02.408 --> 07:55:04.408
feedback.

07:55:05.513 --> 07:55:07.513
I wanted to share with you.

07:55:08.831 --> 07:55:10.831
One is that looking at this 
early 

07:55:14.008 --> 07:55:16.008
accuracy with  AI than with the 
manual greater.

07:55:17.283 --> 07:55:19.144
And the thing that's important 
as a don't know if there are any

07:55:19.145 --> 07:55:21.165
other doctors in the room, but 
the piece I 

07:55:25.847 --> 07:55:27.847
to be room for healthcare 
providers.

07:55:29.539 --> 07:55:33.765
What the tools are doing is help
with the job.Technology and AI 

07:55:33.766 --> 07:55:35.766
going to replace physicians or 
replace the healthcare system.

07:55:39.898 --> 07:55:41.898
about it, it just augments the 
work we do.

07:55:43.409 --> 07:55:46.253
If you think about the 
stethoscope and about 200 years 

07:55:46.254 --> 07:55:49.718
ago, it doesn't  replaced work 
we do.  It merely augments the 

07:55:49.719 --> 07:55:53.407
work we do.think you are going 
to see a similar theme as you 

07:55:53.408 --> 07:55:55.408
continue to think about 

07:55:57.853 --> 07:55:59.853
more effective way to bring 
about patients.

07:56:03.950 --> 07:56:05.950
And then the second thing is to 
think of that base of patients.

07:56:08.053 --> 07:56:10.053
How do we truly democratize 
care?

07:56:11.885 --> 07:56:14.863
The other encouraging piece from
the pilot was this idea that we 

07:56:14.864 --> 07:56:16.952
can start to parents treated 
with the algorithm.

07:56:21.852 --> 07:56:23.852
Now, I would love to say it is 
really 

07:56:25.751 --> 07:56:27.751
turns out it takes a huge 
village to do this kind of work.

07:56:28.418 --> 07:56:33.315
So what's next?path to clinical 
adoption?  This is what makes it

07:56:33.316 --> 07:56:35.316
incredibly 

07:56:40.284 --> 07:56:43.137
so many wonderful technologists 
and engineers.  We need to 

07:56:43.138 --> 07:56:45.138
partner with clinical sites 
here.

07:56:48.032 --> 07:56:50.032
We also partner deeply with the 
FDA as 

07:56:51.098 --> 07:56:53.098
well as regulatory agencies in 
Europe and beyond.

07:56:55.618 --> 07:56:58.300
thing we decided to do was be 
part of the FDA 

07:56:58.301 --> 07:57:00.301
pre-certification program.

07:57:03.008 --> 07:57:05.690
technologies is  critical, but 
we need to figure out how to do 

07:57:05.691 --> 07:57:07.691
that in ways 

07:57:08.747 --> 07:57:10.747
effective.

07:57:13.721 --> 07:57:16.222
I am grateful for Alphabet for 
staying with it.

07:57:21.798 --> 07:57:23.798
partners like Night Count and  
Optus.

07:57:25.876 --> 07:57:27.876
They come together to transform 
care.

07:57:30.094 --> 07:57:32.265
opportunity not only in 
diabetes, but really in this 

07:57:32.266 --> 07:57:34.950
entire world of health 
information.interesting to think

07:57:34.951 --> 07:57:36.951
about it as a physician who 
spends most of my time 

07:57:40.026 --> 07:57:42.893
taking care of fahrenheits 
Fahrenheits in the hospital -- 

07:57:42.894 --> 07:57:44.894
patients in the hospital.

07:57:48.602 --> 07:57:50.602
we stay ahead of it, we can 
close this gap.

07:57:52.282 --> 07:57:54.282
We can figure out ways to become
more preventative.

07:57:56.168 --> 07:57:58.811
can collect the right 
information.  We can create the 

07:57:58.812 --> 07:58:00.812
infrastructure and 

07:58:01.874 --> 07:58:03.874
figure out how to activate it.

07:58:05.765 --> 07:58:07.765
the type of work to do alone.

07:58:10.245 --> 07:58:12.689
and we at Google and Alphabet 
look forward to partnering with 

07:58:12.690 --> 07:58:16.346
you.  Please help us on this 
journey.Lily and I will be here 

07:58:16.347 --> 07:58:19.018
after these talks.  We're happy 
to chat with all of you 

07:58:22.512 --> 07:58:24.512
spending time at I/O.

07:59:19.976 --> 07:59:21.976
4:30-5:30 p.m.

07:59:26.525 --> 07:59:28.525
Integrating your content with 
the 

08:26:06.362 --> 08:26:08.362
&gt;&gt; Oh, thanks.

08:26:12.413 --> 08:26:14.413
I'm so glad you can make it 
today to 

08:26:24.359 --> 08:26:26.359
super awesome Google I/O.

08:26:27.442 --> 08:26:29.442
&gt;&gt; BARRIE LEVINSON:  And I am 
Barrie, 

08:26:31.430 --> 08:26:33.430
to find your content and use it 
on Google Assistant.

08:26:34.451 --> 08:26:36.451
And today, we're here tocontent 
is reach millions of devices on 

08:26:36.617 --> 08:26:39.284
Google Assistant really without 
much work at all for you.

08:26:47.299 --> 08:26:49.753
refresher, but just a quick 
overview of presents itself to 

08:26:49.754 --> 08:26:53.437
you with Google Assistant.  
Assistant really helps people 

08:26:53.438 --> 08:26:55.438
get 

08:26:57.787 --> 08:26:59.824
over 1 million actions, actions 
is the word that we use to 

08:26:59.825 --> 08:27:01.825
describe things that assistant 
can do.

08:27:03.502 --> 08:27:05.502
And assistant is ready to help 
wherever users are.

08:27:07.598 --> 08:27:09.598
With over 500 million Voice 
activated 

08:27:12.100 --> 08:27:13.115
like Google home, eligible 
mobile phones and are the 

08:27:13.116 --> 08:27:15.116
devices where Google Assistant 
work.

08:27:18.046 --> 08:27:20.046
available across the globe and 
more 

08:27:21.525 --> 08:27:23.997
than 25 locales and in 80 
countries and 30 languages.

08:27:27.257 --> 08:27:29.257
that's a lot of devices and a 
lot of 

08:27:31.140 --> 08:27:36.030
actions that assistant can do 
and a lot  for your content.  

08:27:36.031 --> 08:27:38.681
How you can bring your site's 
content into this Eco system.

08:27:41.157 --> 08:27:43.388
presented ways for you to 
optimize content for search 

08:27:43.389 --> 08:27:45.389
since what my kids 

08:27:46.469 --> 08:27:52.046
would call the 1900s.sites with 
content and popular areas like 

08:27:52.047 --> 08:27:54.047
news, podcasts and recipes, the 

08:27:55.320 --> 08:27:57.320
optimizations that you have 
likely made 

08:27:58.562 --> 08:28:00.562
already for search will also 
help your 

08:28:01.612 --> 08:28:03.639
discoverable in Google 
Assistant.  So we'll be 

08:28:03.640 --> 08:28:05.640
explaining how to use 

08:28:10.372 --> 08:28:12.372
content to help drive traffic to
your 

08:28:13.444 --> 08:28:15.444
site for both assistant and for 
search 

08:28:17.569 --> 08:28:19.569
the same work on your part.

08:28:27.484 --> 08:28:29.484
accessing with different kinds 
of use 

08:28:32.977 --> 08:28:34.977
We than users are -- we than 
users are 

08:28:38.067 --> 08:28:40.067
commute  routines and then in 
the 

08:28:41.348 --> 08:28:43.348
evening around meal preparation,
recipe 

08:28:45.627 --> 08:28:47.627
Google has put a lot of thought 
how to 

08:28:50.902 --> 08:28:52.902
different kinds of use cases.

08:28:55.589 --> 08:28:57.589
conversation with Google 
Assistant 

08:28:59.854 --> 08:29:01.854
done in my world.

08:29:03.558 --> 08:29:05.558
Let's take for example Zach at 
the center of his world.

08:29:11.343 --> 08:29:13.198
latest hep seed of his podcast. 
If he's not sure what he wants 

08:29:13.199 --> 08:29:15.199
to 

08:29:18.144 --> 08:29:20.144
different pod casts to try.

08:29:23.867 --> 08:29:25.867
At dinner time when Zach is hung
rye 

08:29:28.805 --> 08:29:31.084
make, she asks his assistant for
ideas.  They are easy is to 

08:29:31.085 --> 08:29:33.085
browse and load 

08:29:35.596 --> 08:29:37.238
single tap, he can choose a food
that sends straight to his 

08:29:37.239 --> 08:29:39.239
Google home.

08:29:41.133 --> 08:29:43.133
worry about handling his phone 
in the 

08:29:44.419 --> 08:29:46.419
kitchen when he might be busy 
using his 

08:29:47.908 --> 08:29:49.732
whatever it is he's making for 
dinner.  And Google Assistant is

08:29:49.733 --> 08:29:51.733
there 

08:29:53.443 --> 08:29:55.443
with lots of other use cases too
like 

08:29:56.717 --> 08:29:58.717
reading the news, translations, 
getting 

08:29:59.750 --> 08:30:02.224
through photos and more.  So 
let's have a look at how some 

08:30:06.998 --> 08:30:08.998
like Zach and many others 
throughout the day.

08:30:10.046 --> 08:30:12.046
Here are three examples.

08:30:18.326 --> 08:30:20.326
produce scaro sills and rich 
results in 

08:30:22.197 --> 08:30:24.197
a Voice activated device to hear
of a 

08:30:25.456 --> 08:30:28.303
news or listen to a podcast or 
find a recipe.connected to 

08:30:28.304 --> 08:30:30.304
content right away.

08:30:32.029 --> 08:30:34.029
On the left, a user is asking 
for top 

08:30:37.152 --> 08:30:39.152
right away gets a carousel of 
the latest headlines.

08:30:41.434 --> 08:30:43.434
Rendered quickly with nice 
imagery.

08:30:45.307 --> 08:30:47.307
middle, a user is asking for and
gets recipes from food network.

08:30:53.674 --> 08:30:55.674
recipe to send straight to 
Google Google Home.

08:31:05.035 --> 08:31:07.035
assistant to play Planet Money.

08:31:10.978 --> 08:31:12.978
You might know that the actions 

08:31:15.516 --> 08:31:17.516
each in every action that users 
can do on assistant.

08:31:20.234 --> 08:31:22.234
When recipe podcasts and news 

08:31:23.307 --> 08:31:25.307
optimize your content using 
structured 

08:31:26.875 --> 08:31:32.561
data, you become eligible for an
auto in the actions directory.  

08:31:32.562 --> 08:31:34.562
The actions directory is 
organized 

08:31:38.114 --> 08:31:40.114
and it's also organized by 
things that 

08:31:41.194 --> 08:31:43.194
users are trying to do like find
food recipes or play a podcast.

08:31:48.795 --> 08:31:50.795
content could be presented in 
multiple 

08:31:52.913 --> 08:31:54.913
depending what  users are trying
to do.

08:31:55.939 --> 08:31:58.603
We built the actions directory 
to be single tap from Google 

08:31:58.604 --> 08:32:00.604
Assistant like 

08:32:02.133 --> 08:32:04.133
you see here on mobile and 
there's also 

08:32:05.808 --> 08:32:08.520
available on the desk top and 
also for mobile browsers.

08:32:13.283 --> 08:32:15.131
promote your action or your 
current users can share it with 

08:32:15.132 --> 08:32:17.132
their friends or with their 
followers.

08:32:22.080 --> 08:32:24.311
can choose to do to get your 
content  assistant.

08:32:28.217 --> 08:32:31.114
Structured data and AMP are key 
to optimizing for search and for

08:32:31.115 --> 08:32:34.985
assistant the same work to do 
both.  When you invest in 

08:32:34.986 --> 08:32:36.986
structured data, 

08:32:40.086 --> 08:32:41.971
devices and help users get 
things done throughout their 

08:32:41.972 --> 08:32:43.972
day.

08:32:45.885 --> 08:32:47.885
structured data can make your 
content 

08:32:49.363 --> 08:32:51.363
eligible for coo ruseels and 
rich results like you just saw.

08:32:53.900 --> 08:32:56.193
And for a page on the actions 
directory.  When you further 

08:32:56.194 --> 08:32:58.194
enhance your content 

08:33:00.445 --> 08:33:02.445
your mobile pages to load 
quickly and 

08:33:04.323 --> 08:33:07.252
take advantage of Google AMP 
cache.take things further and 

08:33:07.253 --> 08:33:09.253
claim your actions directory 
page to make it your 

08:33:12.974 --> 08:33:15.019
additional features like user 
reviews.  And you can consider 

08:33:15.020 --> 08:33:17.020
going furt are to 

08:33:18.087 --> 08:33:20.087
custom action using the actions 
on Google developer platform.

08:33:23.834 --> 08:33:25.834
We'll cover all three in the 
take.

08:33:30.208 --> 08:33:33.066
mark up and AMP a few times 
already and we're all on the 

08:33:33.067 --> 08:33:35.067
same page about that.

08:33:36.991 --> 08:33:38.991
AMP stands for accelerated 
mobile 

08:33:43.334 --> 08:33:45.334
an indication that this will 
load quickly and smoothly B.

08:33:49.647 --> 08:33:51.541
retrieve its from Google AMP 
cache which has a variety of 

08:33:51.542 --> 08:33:53.542
optimizations.

08:33:55.294 --> 08:33:57.946
data mark up on the web to best 
understand the content on each 

08:33:57.947 --> 08:33:59.947
and every page.

08:34:02.243 --> 08:34:04.073
up is a standardized format for 
specifying information about a 

08:34:04.074 --> 08:34:06.074
page and classifying it.

08:34:08.607 --> 08:34:11.466
have a recipe page, what are the
ingredients, the cook time, 

08:34:11.467 --> 08:34:13.467
nutrition information and so on.

08:34:15.987 --> 08:34:18.878
help Google search understand 
content on your pages by giving 

08:34:18.879 --> 08:34:20.879
crew clues that 

08:34:22.206 --> 08:34:25.740
to stands.  They're really well 
documented standards for 

08:34:25.741 --> 08:34:27.741
structured dat that vary 

08:34:29.251 --> 08:34:31.716
and the standards are consistent
with open standards for schema.

08:34:32.338 --> 08:34:34.338
org.

08:34:39.147 --> 08:34:41.147
examples for news, podcasts and 
recipes today.

08:34:45.323 --> 08:34:47.323
specify your structured data for
web pages.

08:34:49.824 --> 08:34:52.058
JavaScript, open notation with 
linked data is  encoding that's 

08:34:52.059 --> 08:34:54.295
used by graph.

08:35:00.216 --> 08:35:02.476
JSON LD shows ahead of each page
and starts with a script tag 

08:35:02.477 --> 08:35:04.477
that says hey, 

08:35:06.179 --> 08:35:08.179
the JavaScript that contains 
some JSON LD.

08:35:09.861 --> 08:35:14.367
So this really simple snippet of
mark website type.  I'm using 

08:35:14.368 --> 08:35:16.368
the vocabulary there  schema.

08:35:18.047 --> 08:35:20.714
org and the website has this 
URL.Another implementation of 

08:35:20.715 --> 08:35:23.570
mark up would be with  HTML 
extensions that places 

08:35:28.484 --> 08:35:29.909
throughout the page with tagged 
attributes that name the 

08:35:29.910 --> 08:35:31.910
properties and 

08:35:35.307 --> 08:35:38.180
in the head and body of the 
structures.  We will see a 

08:35:38.181 --> 08:35:40.181
preferred method to use 

08:35:42.940 --> 08:35:44.940
you can also use Google's 
examples to 

08:35:46.188 --> 08:35:48.188
create your JSON  LD mark up 
rather than scratch.

08:35:55.290 --> 08:35:57.290
we will use a case study example
of a family recipe site.

08:36:01.187 --> 08:36:03.187
Structured data mask up and AMP 
works 

08:36:05.603 --> 08:36:07.603
for large publishers like good 
network 

08:36:08.707 --> 08:36:11.199
anyone including a small family 
recipe site.  In fact, this is 

08:36:11.200 --> 08:36:13.200
not just any small 

08:36:16.103 --> 08:36:18.103
This is my own family's recipe 
site.

08:36:20.200 --> 08:36:25.126
Recently, my husband and I 
optimized site.  So there are 

08:36:25.127 --> 08:36:27.575
few characters in the story.  So
I can follow along in the plot.

08:36:30.437 --> 08:36:33.094
(inaudible).  You might know 
that it is a dutch 

08:36:36.164 --> 08:36:38.614
cookie with some carra mel 
inside of some waffles.It will 

08:36:38.615 --> 08:36:40.615
show up in some pictures.

08:36:42.029 --> 08:36:44.029
And then Saunders

08:36:45.372 --> 08:36:47.372
coach trough is waffles and cort

08:36:48.414 --> 08:36:50.414
the site owner and he's also 
dutch.

08:36:56.698 --> 08:36:58.731
you see here in the carousel 
including a Saunders strove 

08:36:58.732 --> 08:37:00.732
waffles.

08:37:08.182 --> 08:37:10.182
you ask Google assistant to find
recipes from cort adventure.

08:37:11.436 --> 08:37:13.436
You can send it to your Google 
home.

08:37:16.757 --> 08:37:18.757
after -- so here's the before 
and after with our recipe site.

08:37:19.843 --> 08:37:21.888
Before we made changes for 
structured data, a page like on 

08:37:21.889 --> 08:37:23.889
the left would show 

08:37:29.093 --> 08:37:31.093
specific query for Saunders 
dutch recipe.

08:37:32.345 --> 08:37:34.345
There is pretty ordinary search 
result 

08:37:38.497 --> 08:37:41.357
and unremarkable text.  We 
started to participate in rich 

08:37:47.140 --> 08:37:49.618
And you can spot a few more 
differences.  Because of 

08:37:49.619 --> 08:37:52.459
structured data mark ups, 
smarter about the data that it 

08:37:52.460 --> 08:37:56.568
finds on our site and on this 
page.  The generic blue link is 

08:37:56.569 --> 08:37:59.201
gone.You can see a row of chips 
to select 

08:38:02.261 --> 08:38:04.261
relevant content under title 
recipes.

08:38:05.538 --> 08:38:08.401
our recipe  content of course 
from the way the data is passed 

08:38:08.402 --> 08:38:10.402
in the mark up.

08:38:13.479 --> 08:38:15.340
data mark up for recipes, we 
were age to increase discovery 

08:38:15.341 --> 08:38:17.341
for search and for 

08:38:19.825 --> 08:38:21.825
the same time with exactly the 
same work.  And true story.

08:38:24.853 --> 08:38:26.853
e-mail.

08:38:27.904 --> 08:38:29.904
So it's like last week from 
Google 

08:38:32.924 --> 08:38:34.924
small had increased more than 
300% in 

08:38:37.269 --> 08:38:39.269
the month of April with 72% of  
user 

08:38:42.828 --> 08:38:45.899
through offering antic search --
organic search.  So after our 

08:38:45.900 --> 08:38:50.694
site was indexed and converted 
to structured data, we noticed a

08:38:50.695 --> 08:38:52.695
page in the actions direct we.

08:38:54.561 --> 08:38:56.561
actions directory page for food 
network 

08:38:58.463 --> 08:39:00.463
and this is the actions 
directory page 

08:39:04.901 --> 08:39:06.129
rendered on web browser or 
desktop.  Later on we'll so how 

08:39:06.130 --> 08:39:08.130
this page can be 

08:39:10.415 --> 08:39:12.415
to customize it with our own 
images and information.

08:39:19.751 --> 08:39:21.751
takes to use structured data 
narc up and 

08:39:22.793 --> 08:39:24.793
code and we'll continue to use 
the 

08:39:26.485 --> 08:39:28.485
family recipe site as an 
example.

08:39:33.260 --> 08:39:35.260
structured data snippet for type
recipe.

08:39:36.757 --> 08:39:38.383
structured data guidelines, you 
will need to follow the specific

08:39:38.384 --> 08:39:40.384
guidelines 

08:39:41.799 --> 08:39:44.652
type that you have in order to 
be eligible in rich  results 

08:39:44.653 --> 08:39:47.536
displays in both search and 
assistant.

08:39:53.440 --> 08:39:55.440
org vocabulary as I mentioned.

08:39:58.340 --> 08:40:00.340
what is required by schema.org.

08:40:03.237 --> 08:40:05.237
So Google is able to read JSON 
data 

08:40:07.562 --> 08:40:10.008
injected into a page's content 
and that's what we're doing in 

08:40:10.009 --> 08:40:12.009
the family recipes site 
architecture.

08:40:14.351 --> 08:40:16.351
Here the server site PHP helps 
generate 

08:40:18.012 --> 08:40:20.012
an AMP recipe page using recipe 
details 

08:40:22.941 --> 08:40:24.941
of the my SQL database.  When it
is requested by the web 

08:40:30.049 --> 08:40:32.049
database for the recipe details,
then 

08:40:33.735 --> 08:40:35.735
marks it up as HTML and return 
its to a 

08:40:37.838 --> 08:40:39.838
This also insists the structured
data we 

08:40:42.391 --> 08:40:46.302
added the injuriesson inside the
script head.  So the highlighted

08:40:46.303 --> 08:40:48.804
part is the essence of what is 
new after optimizing with the 

08:40:52.090 --> 08:40:54.539
data mark up.  Obviously for 
recipe collection, the 

08:40:58.212 --> 08:41:00.212
type of structured data we use 
was the type.

08:41:02.091 --> 08:41:04.772
So let's have a closer look at 
that.  This is the first section

08:41:04.773 --> 08:41:06.773
of mark up 

08:41:10.013 --> 08:41:13.419
recipe specifically Saunders 
dutch strobe waffles.  Each page

08:41:13.420 --> 08:41:15.420
carries mark up specific to it.

08:41:16.473 --> 08:41:18.715
we see the result of where the 
recipe information is pulld to 

08:41:18.716 --> 08:41:20.716
generate mark up.

08:41:22.601 --> 08:41:24.601
you can easily parse the 
resulting mark 

08:41:26.473 --> 08:41:28.473
up and see the name, 
description, I'mor, 

08:41:29.555 --> 08:41:34.712
time and cook time.  The format 
is always expressed as a set of 

08:41:34.713 --> 08:41:36.713
attribute value pairs.

08:41:38.185 --> 08:41:41.442
Saunders.strobe waffles.  You 
use the recipe for a single 

08:41:41.443 --> 08:41:43.443
recipe at a time.

08:41:45.408 --> 08:41:47.408
recipes or a whole list.

08:41:48.654 --> 08:41:50.654
And there are 15 total recipe 
properties that are recommended.

08:41:54.138 --> 08:41:58.081
Although only name is actually 
required.  Going into this, we 

08:41:58.082 --> 08:42:01.528
didn't have an in the 
collection.  So that is 

08:42:01.529 --> 08:42:03.529
something we're working on.

08:42:07.065 --> 08:42:09.065
the block of mark up for a photo
that 

08:42:11.976 --> 08:42:13.976
would be for the big stack of 
GUI strobe waffles.

08:42:19.947 --> 08:42:21.947
same recipe page, we have 
ratings.

08:42:24.057 --> 08:42:26.108
data, we added ratings to the 
site, which isn't something that

08:42:26.109 --> 08:42:29.031
had been a feature before.see 
here the mark up for ratings 

08:42:29.032 --> 08:42:31.670
that includes data for the 
rating value, a 

08:42:37.203 --> 08:42:39.203
best and worse rating for the 
recipe page.

08:42:44.186 --> 08:42:46.186
ratings will render in search 
results.

08:42:47.290 --> 08:42:50.136
result of adding the structured 
data mark up for data ratings on

08:42:50.137 --> 08:42:52.137
the page.

08:42:54.248 --> 08:42:56.695
the rating, et cetera.  And now 
the last part of the mark up 

08:43:03.507 --> 08:43:05.507
rest of the format truncated a 
little bit to fit on the slide.

08:43:09.228 --> 08:43:11.329
and finally, the nutrition 
information.  So for us 

08:43:11.330 --> 08:43:13.330
nutrition information was 

08:43:14.968 --> 08:43:18.919
database, but many of the fields
were empty.  So adding more data

08:43:18.920 --> 08:43:21.790
has been a good enhancement 
here.Then at the end, we closed 

08:43:21.791 --> 08:43:23.857
the script and now you have seen
the full format 

08:43:29.647 --> 08:43:31.647
the recipe, for the type recipe.

08:43:33.922 --> 08:43:35.922
The structured data testing tool
helps 

08:43:37.583 --> 08:43:39.583
correct to standards for 
whatever type you're using.

08:43:41.870 --> 08:43:44.358
to use.  It's open.  You can 
find it easily on Google 

08:43:49.671 --> 08:43:51.671
search and puts a running page 
URL.

08:43:53.947 --> 08:43:56.009
the tool shows any anomalies as 
compared to the standards for 

08:43:56.010 --> 08:43:58.010
the type that I'm testing.

08:44:00.115 --> 08:44:02.560
can see here I have an error 
where the cook time was 

08:44:02.561 --> 08:44:04.561
formatted in some way that 

08:44:09.381 --> 08:44:11.381
person as compared to the ISO 
format 

08:44:13.428 --> 08:44:15.002
and fix errors one at a time and
it would be recommended to do 

08:44:15.003 --> 08:44:17.003
this really 

08:44:19.944 --> 08:44:21.944
pages to check the format.

08:44:26.106 --> 08:44:28.106
site optimization process was 
structured data.

08:44:29.397 --> 08:44:31.857
the structured data guidelines 
to create the mark up using JSON

08:44:31.858 --> 08:44:33.858
LD.

08:44:36.352 --> 08:44:39.809
documented examples rather than 
starting from scratch.  We 

08:44:39.810 --> 08:44:42.451
validate our code using the 
testing  which is probably going

08:44:42.452 --> 08:44:44.708
to be anities rative process 
where you find and fix errors.

08:44:50.389 --> 08:44:54.054
unblock robots.text which might 
keep the crawlers from getting 

08:44:54.055 --> 08:44:56.055
to your mark up.

08:44:58.157 --> 08:45:00.408
monitor errors and reindex the 
site as you change it.

08:45:04.899 --> 08:45:06.899
special about using structured 
data mark 

08:45:07.979 --> 08:45:10.404
for news content.  Let's have a 
along.

08:45:13.649 --> 08:45:15.649
There's a special type news 
article 

08:45:17.143 --> 08:45:19.143
that are recommended in the case
of 

08:45:20.398 --> 08:45:24.713
non-AMP pages, the headline and 
the image is highlighted.news 

08:45:24.714 --> 08:45:26.714
articles when you are optimizing

08:45:28.814 --> 08:45:30.814
with AMP mobile pages, 
additional 

08:45:31.885 --> 08:45:34.328
and those include the publisher,
publisher name, the logo,  URL, 

08:45:34.329 --> 08:45:36.329
date 

08:45:38.254 --> 08:45:40.254
here on the next slide.

08:45:42.588 --> 08:45:44.588
When AMP pagesna have structured
data 

08:45:46.444 --> 08:45:48.693
dat can appear in a carousel of 
stories like the ones you saw 

08:45:48.694 --> 08:45:50.694
from the New York Times earlier.

08:45:52.597 --> 08:45:54.597
Without the structured  data, 
AMP pages 

08:45:57.078 --> 08:45:59.132
can load fast, but they would 
show up as links in search 

08:45:59.133 --> 08:46:03.455
results.  Also for news content 
Fyou offer subscription based 

08:46:03.456 --> 08:46:05.456
access to your 

08:46:07.327 --> 08:46:09.377
or if users need to register for
access, there's a guideline 

08:46:09.378 --> 08:46:11.378
that's specific to 

08:46:12.677 --> 08:46:14.516
structured data for subscription
and pay walled content.  If your

08:46:14.517 --> 08:46:16.517
site is marked up with 

08:46:18.816 --> 08:46:20.849
data and AMP following the 
standards for the type news 

08:46:20.850 --> 08:46:22.850
article and also follows 

08:46:24.981 --> 08:46:26.981
index guides, you can apply to 
be in Google news.

08:46:30.940 --> 08:46:32.940
So now I will hand it to Zach to
talk 

08:46:36.060 --> 08:46:38.060
podcast content.

08:46:39.734 --> 08:46:41.734
Let's walk through an example.

08:46:45.059 --> 08:46:47.301
cast appears in the actions 
directory.  And Google search 

08:46:47.302 --> 08:46:49.302
which was all mark up.

08:46:54.291 --> 08:46:56.291
By structuring your podcast  
content, 

08:46:57.363 --> 08:46:59.992
search results and descriptions 
and even on embedded player for 

08:46:59.993 --> 08:47:01.993
each episode.

08:47:03.453 --> 08:47:05.709
content may be automatically 
turned into an action on the 

08:47:05.710 --> 08:47:10.192
Google assistant with a the 
actions directory.  In order for

08:47:10.193 --> 08:47:12.267
your podcast to be properly 
indexed, we need to first 

08:47:15.972 --> 08:47:18.459
valid RSS feed, and have 2.0 
specifications and insure your 

08:47:18.460 --> 08:47:20.460
feed 

08:47:24.596 --> 08:47:26.596
dedicate home page that points 
to your RSS feed.

08:47:28.713 --> 08:47:30.713
We'll now cover the certainly 
podcast 

08:47:31.974 --> 08:47:34.838
episode level and mark up 
requirements to make sure your 

08:47:34.839 --> 08:47:36.839
content is set up for success.

08:47:40.776 --> 08:47:42.813
shows the podcast level tags 
that need to get configured.

08:47:46.859 --> 08:47:48.859
This takes us for planet money 
podcast.

08:47:49.909 --> 08:47:51.909
Make sure you have a tag that 
defines your podcast title.

08:47:54.082 --> 08:47:56.328
other requirements are tags that
define your podcast home page 

08:47:56.329 --> 08:47:58.329
along with 

08:47:59.574 --> 08:48:03.904
cover next.  Optionally, you can
also add tags that state the 

08:48:03.905 --> 08:48:06.893
author, description, image, and 
language for your podcast.

08:48:09.352 --> 08:48:11.352
-for-per these are the rip seed 
level 

08:48:13.824 --> 08:48:15.457
that would need to get  
configured.  The only two 

08:48:15.458 --> 08:48:17.458
requirements are the 

08:48:20.784 --> 08:48:22.821
enclosure tag which points to 
the URL.  Optionally, you can 

08:48:22.822 --> 08:48:24.822
also configure a 

08:48:26.503 --> 08:48:28.552
publication date, duration and 
more for each episode.

08:48:31.851 --> 08:48:33.905
The last step is to make sure 
that  has a home page that very 

08:48:33.906 --> 08:48:35.906
clearly 

08:48:38.631 --> 08:48:40.631
describes what the podcast is 
is.

08:48:43.394 --> 08:48:45.394
link that points to your podcast
RSS URL.

08:48:46.678 --> 08:48:48.678
Once that is all set up, you are
on 

08:48:50.156 --> 08:48:52.156
Google search and Google 
Assistant just 

08:48:53.228 --> 08:48:55.228
by  configuring a few RSS tags.

08:48:56.317 --> 08:48:58.975
reviewed structured data mark 
up.  Now the best big 

08:48:58.976 --> 08:49:00.976
opportunity is to claim your 
page.

08:49:03.313 --> 08:49:05.589
your action will unlock three 
key cape ability for you.  First

08:49:05.590 --> 08:49:07.590
the ability to modify your 

08:49:09.260 --> 08:49:11.527
Second the ability to view 
Analytics on your actions 

08:49:11.528 --> 08:49:13.528
performance and then 

08:49:16.810 --> 08:49:18.810
opportunity for improved ranking
and discovery.

08:49:24.006 --> 08:49:26.006
Barrie's content.

08:49:27.081 --> 08:49:29.116
Once it is made, you will be 
able to action by creating a 

08:49:29.117 --> 08:49:31.117
project on the actions on Google
developer console 

08:49:36.385 --> 08:49:38.640
creating, managing and 
optimizing your actions.  Shown 

08:49:38.641 --> 08:49:41.107
here the actions on Google  is 
the place where you will be able

08:49:41.108 --> 08:49:43.108
to manage your actions after you
claim them.

08:49:46.225 --> 08:49:48.706
you will notice there's a 
dedicated section for you to 

08:49:48.707 --> 08:49:51.968
modify your directory 
information.use the console to 

08:49:51.969 --> 08:49:54.833
change up images and 
descriptions to more accurately 

08:49:54.834 --> 08:49:56.922
reflect actions and its content.

08:50:01.029 --> 08:50:03.029
claimed, you will be able to 
view them in the console.

08:50:05.325 --> 08:50:07.775
console can help to you monitor 
your actions star ratings along 

08:50:07.776 --> 08:50:09.776
with directory page use.

08:50:12.680 --> 08:50:14.163
claimed actions, users will have
the ability to rate and submit 

08:50:14.164 --> 08:50:16.164
written 

08:50:17.508 --> 08:50:19.951
This is all access using the 
actions directory.  So for 

08:50:19.952 --> 08:50:21.952
example, this is how ratings 

08:50:23.250 --> 08:50:25.287
will appear on the directory 
page for Barrie's content.

08:50:29.199 --> 08:50:31.199
Many are quality indicateors.

08:50:33.674 --> 08:50:36.131
importantly, they're benchmarks 
that users depend on for 

08:50:36.132 --> 08:50:38.132
relevant  feedback.

08:50:41.426 --> 08:50:43.426
functionality is accessible by 
using 

08:50:45.431 --> 08:50:47.428
Now that we just covered 
claiming your action, let's 

08:50:47.429 --> 08:50:49.429
discuss by how  conversational 
action.

08:50:52.988 --> 08:50:54.988
You can take action that actions
on 

08:50:56.676 --> 08:50:58.676
to offer.

08:51:00.355 --> 08:51:02.355
optimize your existing content 
for a 

08:51:05.067 --> 08:51:06.724
or you can decide to build 
custom actions with a much more 

08:51:06.725 --> 08:51:08.725
conversational AI focus.

08:51:11.224 --> 08:51:13.912
advantage of the Google 
assistant, the best path is to 

08:51:13.913 --> 08:51:15.913
build a custom conversational 
action.

08:51:17.409 --> 08:51:19.451
discuss a thought process, 
rationale and overview of 

08:51:19.452 --> 08:51:21.452
creating these custom actions.

08:51:23.354 --> 08:51:24.998
will most likely need to revisit
your contents identity for the 

08:51:24.999 --> 08:51:30.351
AI first world.need more than 
just  graphics.  It will need a 

08:51:30.352 --> 08:51:32.352
fully developed  personality.

08:51:34.028 --> 08:51:36.900
example, is your content funny 
or serious?  What Voice will 

08:51:36.901 --> 08:51:38.901
represent your content?

08:51:40.017 --> 08:51:42.239
tailor the personality of your 
action to stand out in a 

08:51:42.240 --> 08:51:44.240
conversational environment?

08:51:48.194 --> 08:51:51.254
just looking to access your 
website in an audio form.  The 

08:51:51.255 --> 08:51:53.255
more rich your conversational 

08:51:54.926 --> 08:51:57.185
more we can suggest your action 
to increase discovery.  

08:51:57.186 --> 08:51:59.654
Assistant learns from other 
about which actions may be best 

08:51:59.655 --> 08:52:01.655
for assisting the user with 
their needs.

08:52:05.015 --> 08:52:06.463
includeior brands name, your 
content may be recommended to 

08:52:06.464 --> 08:52:08.464
the user.

08:52:10.139 --> 08:52:12.208
actions that provide users with 
a really high quality end user 

08:52:12.209 --> 08:52:14.845
experience and the create this 
more tailored branded 

08:52:18.265 --> 08:52:20.651
experience is create a custom 
action from scratch.

08:52:25.188 --> 08:52:28.847
many providers have elected to 
go the custom action rout.  We 

08:52:28.848 --> 08:52:30.848
have been working with partners 

08:52:33.774 --> 08:52:35.774
food network to enhance custom 
actions.

08:52:45.692 --> 08:52:47.692
custom action is triggered.

08:52:53.673 --> 08:52:55.673
just started an episode of the 
pioneer woman.

08:52:59.230 --> 08:53:01.230
and dives is coming on at 11:00 
a.m. Pacific.

08:53:03.098 --> 08:53:05.947
You can ask for details or for 
recipes.would you like?

08:53:16.548 --> 08:53:18.548
&gt;&gt; Recipes from the biopeer 
woman

08:53:19.731 --> 08:53:21.731
pioneer woman.

08:53:26.881 --> 08:53:29.339
address.   Delish.  What else 
can I help you with?

08:53:33.655 --> 08:53:35.655
conversational action which you 
just 

08:53:37.752 --> 08:53:39.752
find inspiration in the kitchen 
across 

08:53:41.024 --> 08:53:43.024
devices with those displays and 
surfaces such as Google home.

08:53:47.816 --> 08:53:52.564
favorite chefs and shows, but 
send recipes via email.network 

08:53:52.565 --> 08:53:54.402
customizes their content for 
conversational world and creates

08:53:54.403 --> 08:53:57.856
several reengagement.  First 
users can ask when the show is 

08:53:58.265 --> 08:54:00.265
on air.

08:54:03.202 --> 08:54:05.030
currently being prepared and 
then they'll have the ability to

08:54:05.031 --> 08:54:07.031
share the 

08:54:10.595 --> 08:54:12.595
to enjoy later.  All elements 
are usually woven 

08:54:15.372 --> 08:54:17.372
together in a coherent thread 
that includes content.

08:54:21.974 --> 08:54:23.974
anticipates their behavior.

08:54:25.895 --> 08:54:27.971
developer console which makes it
easier than ever to create 

08:54:27.972 --> 08:54:31.526
custom actions for your content.
you create a project, you can 

08:54:31.527 --> 08:54:33.996
choose from several categories 
that will tailor your workflow.

08:54:37.298 --> 08:54:39.298
whether you are a podcast 
provider 

08:54:43.858 --> 08:54:45.858
followers, the actions on Google

08:54:47.572 --> 08:54:49.572
developer is the place to get 
started.

08:54:55.525 --> 08:54:58.624
you through different stages of 
development.  Build actions that

08:54:58.625 --> 08:55:01.283
will help users get with the 
information they both want and 

08:55:03.553 --> 08:55:05.553
need and then test your actions 
either 

08:55:08.055 --> 08:55:11.332
the new dweeb simulator to run 
through user flows.  Deploy your

08:55:11.333 --> 08:55:13.333
actions or to limited 

08:55:14.922 --> 08:55:16.502
Beta audiences and then finally,
measure the success of your 

08:55:16.503 --> 08:55:18.503
actions with 

08:55:20.845 --> 08:55:22.845
on usage, errors and intoe 
channels.

08:55:24.332 --> 08:55:28.860
It's sizasm as set up, build, 
test, deploy and measure.There 

08:55:28.861 --> 08:55:30.861
are numerous surfaces that you 
can 

08:55:33.368 --> 08:55:35.368
target with your custom actions 

08:55:37.425 --> 08:55:39.425
outfut and those with screen 
output.

08:55:40.434 --> 08:55:42.888
experience based on the device 
being used.  For devices with 

08:55:42.889 --> 08:55:44.889
screens including 

08:55:46.784 --> 08:55:48.222
or smart displays, you can have 
special responses that take 

08:55:48.223 --> 08:55:50.223
advantage of the screen.

08:55:53.580 --> 08:55:56.267
podcast provider, show images 
that can play inside the audio.

08:56:04.257 --> 08:56:05.683
optimize for the eyes and hands 
free experiences that  speakers 

08:56:05.684 --> 08:56:10.969
have to offer.getting ready in 
the morning or running out the 

08:56:10.970 --> 08:56:12.970
door to commute to and from 
work.

08:56:14.918 --> 08:56:17.394
the 80 to interact with the 
display.  Users won't have the 

08:56:17.395 --> 08:56:22.289
time to blouse website if they 
need to keep their eyes on 

08:56:22.290 --> 08:56:24.786
something else or if their hands
are full.critical opportunities 

08:56:24.787 --> 08:56:26.787
throughout a users day that 
you'll be able to present 

08:56:30.351 --> 08:56:32.187
information such as news stories
or a brand new episode of your 

08:56:32.188 --> 08:56:34.188
podcast.

08:56:35.657 --> 08:56:37.913
leveraging latest advances in 
machine learning, AI and natural

08:56:37.914 --> 08:56:43.309
language Google's technology 
stack to create a really 

08:56:43.310 --> 08:56:45.310
advanced assistive experience 
and 

08:56:46.391 --> 08:56:49.045
this power while creating your 
actions in a multitude of ways.

08:56:54.603 --> 08:56:56.603
opportunities.

08:56:58.503 --> 08:57:00.503
You can use a vast array of 
cards in 

08:57:01.804 --> 08:57:04.065
for your content.  You can also 
leverage speed synthesis 

08:57:09.206 --> 08:57:12.122
responses even more lifelike.  
Then play around with our brand 

08:57:12.123 --> 08:57:14.999
themed content visual appearance
especially on 

08:57:18.525 --> 08:57:20.525
some of our beautiful, new smart
displays.

08:57:24.650 --> 08:57:25.880
example of a Barrie's custom 
action by leveraging themed 

08:57:25.881 --> 08:57:28.578
customizations that actions 
developer  console.

08:57:31.887 --> 08:57:33.887
This is an awesome opportunity 
for 

08:57:36.953 --> 08:57:40.877
the full recipe to human the 
content stand out.  Actions are 

08:57:40.878 --> 08:57:42.878
personal.

08:57:47.632 --> 08:57:49.463
allow you to use Google 
assistance along side count 

08:57:49.464 --> 08:57:52.344
linking and user experiences for
individual users of your 

08:57:53.170 --> 08:57:57.901
actions.  If you're a content 
provider, it special opportunity

08:57:57.902 --> 08:58:00.156
for you to interact with your 
users.

08:58:05.063 --> 08:58:06.510
provide personalized podcast, 
recipe and news story 

08:58:06.511 --> 08:58:08.511
recommendations.

08:58:10.581 --> 08:58:12.581
assistant to augment the 
consumption experience.

08:58:16.354 --> 08:58:18.207
information about guests and 
stories being discussed on a 

08:58:18.208 --> 08:58:20.208
given episode F.

08:58:24.367 --> 08:58:28.300
use Google Assistant to help 
provide them with  aughtments 

08:58:24.367 --> 08:58:26.367
information about 

08:58:28.416 --> 08:58:31.098
places being discussed along 
with relevant recommendation 

08:58:31.099 --> 08:58:33.099
such as articles and news 
stories.

08:58:36.979 --> 08:58:39.386
Barrie can also leverage 
personallations for her recipe 

08:58:39.387 --> 08:58:41.387
content.

08:58:42.659 --> 08:58:44.332
users name and location.  
Suppose Barrie wants to suggest 

08:58:44.333 --> 08:58:46.333
where 

08:58:49.235 --> 08:58:51.303
ingredients and supplies for her
recipe, she can suggest common 

08:58:54.372 --> 08:58:57.885
drinks and sides that will go 
well with the recipe.  She can 

08:58:57.886 --> 08:59:02.998
then use localization in a of 
languages.  Actions are 

08:59:02.999 --> 08:59:05.882
reengaging.  With custom 
conversational actions, 

08:59:11.109 --> 08:59:13.109
s to share, RL that would have 
them directly to the action.

08:59:17.647 --> 08:59:20.557
about upcoming shows, stories 
and special events  using push 

08:59:20.558 --> 08:59:22.558
notifications.

08:59:25.261 --> 08:59:27.506
also allow to send daily 
recommendations to her users.

08:59:34.267 --> 08:59:36.267
By taking advantage of the 

08:59:38.979 --> 08:59:40.979
you can leverage to allow them 
to 

08:59:42.033 --> 08:59:44.033
purchase premium content, 
American an 

08:59:48.161 --> 08:59:50.669
-- American an dice or order 
digital goods.  And there's 

08:59:50.670 --> 08:59:52.670
much, much more.

08:59:55.412 --> 08:59:57.661
there's always room to grow with
custom conversational actions.

09:00:03.407 --> 09:00:05.407
AMP allows to you take existing 
web 

09:00:07.502 --> 09:00:09.758
for Google search and Google 
Assistant.  You will be eligible

09:00:09.759 --> 09:00:13.261
for having a page directory.  In
fact, many of you have already 

09:00:17.133 --> 09:00:20.194
completed the necessary mark up 
for your content.so, you will 

09:00:20.195 --> 09:00:23.050
notice there is already a page 
in the directory to claim your 

09:00:23.657 --> 09:00:25.657
action.

09:00:27.386 --> 09:00:29.386
claim your directory listing, 
view 

09:00:30.997 --> 09:00:32.997
Analytics and receive  ratings 
for your content.

09:00:34.739 --> 09:00:37.423
to go above and beyond the 
limitations of mark up, visit 

09:00:37.424 --> 09:00:39.424
the actions on Google 

09:00:40.679 --> 09:00:42.679
create a custom conversational 
action.

09:00:43.739 --> 09:00:45.739
Doing so will allow you to do 
many 

09:00:47.294 --> 09:00:49.294
reengagement and transactional 
features 

09:00:50.361 --> 09:00:52.591
in APIs as you build out your 
custom actions.opportunities for

09:00:52.592 --> 09:00:54.592
what you can create 

09:00:56.665 --> 09:00:58.665
for your content are truly 
endless.

09:01:01.074 --> 09:01:02.520
what you can build with custom 
conversational actions to 

09:01:02.521 --> 09:01:04.521
leverage the 

09:01:08.901 --> 09:01:10.901
Google and Google assist ants 
Google Assistant.

09:01:14.626 --> 09:01:17.063
If you haven't done so, there 
are  things done during the day.

09:01:19.148 --> 09:01:21.148
To see some really awesome demos

09:01:24.058 --> 09:01:26.058
Sandbox.

09:01:27.506 --> 09:01:29.585
Thank you and we hope you all 
continue to have a really great 

09:01:29.586 --> 09:01:31.586
Google I/O.

09:03:16.990 --> 09:03:18.990
5:30-6:30 PST

09:03:31.987 --> 09:03:33.987
Stage 7

09:04:15.497 --> 09:04:17.497
Alternative architectures for 
your PWA

09:25:52.763 --> 09:25:55.652
&gt;&gt; JEFF:  So, hello, everybody.
Ha, my name is Jeff Posnick and 

09:25:55.653 --> 09:25:57.653
I'm a 

09:25:58.904 --> 09:26:00.904
developer relations team.

09:26:03.741 --> 09:26:05.741
So I'm here to talk about

09:26:07.253 --> 09:26:12.674
an an important but potentially 
topic.  Your architecture 

09:26:12.675 --> 09:26:14.725
decisions come into play when 
you are building a progressive 

09:26:16.760 --> 09:26:18.760
web app.

09:26:21.589 --> 09:26:24.181
what do I mean by web architect 
architecture?  One way to think 

09:26:24.182 --> 09:26:27.640
about it is to ask following 
questions.  When a user visits a

09:26:27.641 --> 09:26:30.095
page on my site, what HTML is 
loaded?

09:26:36.653 --> 09:26:38.653
loaded when they visit another  
page?

09:26:40.113 --> 09:26:43.171
The answers to those questions 
are not forward.  When you start

09:26:43.172 --> 09:26:45.430
thinking about progressive web 
apps, they get complicated.

09:26:48.675 --> 09:26:51.120
to walk you through one possible
architecture that I found 

09:26:51.121 --> 09:26:53.121
effective.

09:26:56.006 --> 09:26:57.866
label the decisions that I made 
as being my approach for 

09:26:57.867 --> 09:26:59.867
building a progressive 

09:27:00.871 --> 09:27:05.954
webfree to use my approach when 
building your own PWA, but at 

09:27:05.955 --> 09:27:07.955
the same time, 

09:27:09.291 --> 09:27:12.161
alternatives as well.  My hope 
is that by seeing how all the 

09:27:19.335 --> 09:27:21.335
and you you will go out and 
customize 

09:27:23.009 --> 09:27:25.009
everything to suit your own 
particular needs.

09:27:27.528 --> 09:27:29.528
ended up building to this talk 
is a 

09:27:31.678 --> 09:27:33.678
StackOverflow of PWA.

09:27:36.063 --> 09:27:38.504
contributing to StackOverflow 
and I wanted to build a web app 

09:27:38.505 --> 09:27:40.505
that would 

09:27:43.477 --> 09:27:45.477
browse through for a given 
topic.

09:27:46.963 --> 09:27:48.963
It is built on top of the public
stack 

09:27:52.881 --> 09:27:54.881
out live and use the URLs on 
that slide.

09:28:01.044 --> 09:28:03.529
how I built that web app, let's 
define pieces of terminology.

09:28:06.794 --> 09:28:08.794
First, we'll talk about 
multi-page 

09:28:10.262 --> 09:28:12.262
apps or MPAs.

09:28:16.392 --> 09:28:18.476
as a fancy name for the 
traditional architecture that's 

09:28:18.477 --> 09:28:20.477
been used since the beginning of
the web.

09:28:24.937 --> 09:28:26.937
Each time a user navigates to a 
new UR

09:28:28.112 --> 09:28:31.157
L, they are going to browse 
specific to that page.no attempt

09:28:31.158 --> 09:28:33.158
to preserve the pages states 

09:28:34.415 --> 09:28:36.415
or the content in between 
navigations.

09:28:38.321 --> 09:28:40.321
a new page, you are starting 
fresh.

09:28:43.882 --> 09:28:45.882
This is in contrast to the 
single page 

09:28:49.440 --> 09:28:52.344
web apps in which the browser 
runs Java web app code when the 

09:28:52.345 --> 09:28:54.345
user visits a new section.

09:28:57.049 --> 09:28:59.910
SPAs and MPAs are equally veiled
models for you to use but for 

09:28:59.911 --> 09:29:01.911
this talk, I 

09:29:07.662 --> 09:29:09.084
within the content of a 
multi-page app, something we 

09:29:09.085 --> 09:29:11.085
haven't talked about too much in
the past.

09:29:16.070 --> 09:29:18.070
countless otherses the phrase 

09:29:19.123 --> 09:29:21.123
progressive web app or PWA.

09:29:23.223 --> 09:29:25.223
what do I mean by that exactly?

09:29:27.512 --> 09:29:29.512
You can think of a PWA as a web 
app 

09:29:32.213 --> 09:29:34.213
experience and earns a place 
under the user home screen.

09:29:44.270 --> 09:29:47.101
fast, integrated reliable and 
engaging.  The purposes of this 

09:29:47.102 --> 09:29:49.102
talk however 

09:29:53.868 --> 09:29:55.868
a subset of those attributes 
fast and reliable.

09:29:57.977 --> 09:29:59.977
different content.

09:30:02.902 --> 09:30:07.013
loading as little as possible 
from the network.  The raw speed

09:30:07.014 --> 09:30:09.014
isn't enough.

09:30:12.921 --> 09:30:15.586
a  PWA, your web app should be 
reliable.  Needs to be 

09:30:15.587 --> 09:30:17.587
resilient, enough to 

09:30:20.880 --> 09:30:22.513
even if it's just a customized 
error page regardless of the 

09:30:22.514 --> 09:30:24.565
state of the network.

09:30:29.877 --> 09:30:31.911
we're going to rephrase the PWA 
definition slightly and look at 

09:30:31.912 --> 09:30:36.220
what it reliably fast.  Now it 
is not good enough to be fast 

09:30:38.491 --> 09:30:42.982
and reliable only when you're on
a low network.  Being reliably 

09:30:42.983 --> 09:30:45.669
fast means that your web app 
speed is consistent regardless 

09:30:50.236 --> 09:30:52.236
network conditions.

09:30:55.949 --> 09:30:57.949
So PWAs introduce a high bar for
speed and resilience.

09:31:00.624 --> 09:31:02.624
building blocks to make that 
type of 

09:31:03.876 --> 09:31:05.876
performance a reality.

09:31:07.781 --> 09:31:09.781
cache storage API.

09:31:13.832 --> 09:31:15.832
So a service worker sits in 
between 

09:31:20.378 --> 09:31:25.393
a as a proxy.  What that service
worker does is completely up to 

09:31:25.394 --> 09:31:27.394
you.

09:31:28.912 --> 09:31:30.544
The service taker takes incoming
requests and forwards them on to

09:31:30.545 --> 09:31:37.141
the network.then returns the 
network response to page as is.

09:31:41.910 --> 09:31:43.910
This trivial service worker 
doesn't 

09:31:46.794 --> 09:31:48.794
versus the default value.

09:31:49.850 --> 09:31:51.850
But once we add the cache 
storage API 

09:31:55.412 --> 09:31:57.702
workers shine through.  So we 
can build service worker that 

09:32:04.021 --> 09:32:06.387
before, passing some on to the 
network.  Instead of just 

09:32:06.388 --> 09:32:08.388
returning the network 

09:32:10.026 --> 09:32:12.026
we can write a service worker 
that 

09:32:13.078 --> 09:32:15.078
stores a copy of the response 
for future 

09:32:16.750 --> 09:32:18.750
storage API.

09:32:21.461 --> 09:32:24.318
Next time the web app makes that
request, it can check the cashes

09:32:24.319 --> 09:32:26.319
and 

09:32:28.618 --> 09:32:30.618
45eously cache response.

09:32:32.883 --> 09:32:34.883
So a void the network whenever 

09:32:37.863 --> 09:32:39.863
reliably fast performance.

09:32:47.905 --> 09:32:52.033
cover is what sometimes referred
to Java script.  Simply put, 

09:32:52.034 --> 09:32:54.482
it's the ideana the same Java 
script code can be shared 

09:32:54.483 --> 09:32:56.483
between 

09:32:57.565 --> 09:32:59.565
run time environments.

09:33:01.224 --> 09:33:03.224
So when I build my PWA, I wanted
to 

09:33:06.564 --> 09:33:09.028
end server and the service 
worker.  There are lots of valid

09:33:09.029 --> 09:33:11.029
approaches to 

09:33:12.082 --> 09:33:14.082
but the approach that worked for
me was 

09:33:17.019 --> 09:33:19.019
to use EFs modules as a 
definitive source.

09:33:26.194 --> 09:33:28.194
d and for the service worker in 
babble and roll up.

09:33:30.909 --> 09:33:32.959
So in my Slides when you see an 
MJ extension, we're  talking 

09:33:32.960 --> 09:33:34.960
about code 

09:33:37.271 --> 09:33:39.271
that lives in an ES module.

09:33:45.420 --> 09:33:47.420
terminology in mind, let's dive 
into the StackOverflow of PWA.

09:33:49.276 --> 09:33:50.928
start by covering our back end 
server and explain how that fits

09:33:50.929 --> 09:33:53.401
into the overall architecture.

09:33:59.733 --> 09:34:01.733
dynamic back ends along with 
static 

09:34:05.057 --> 09:34:07.057
approach was used to Firebase 
platform.

09:34:08.541 --> 09:34:10.541
Firebase Cloud functions will 

09:34:12.233 --> 09:34:13.832
based environment when there's 
an incoming request and 

09:34:13.833 --> 09:34:15.833
integrates with a 

09:34:18.729 --> 09:34:21.183
HTB framework which is already 
familiar with.  It also offers 

09:34:21.184 --> 09:34:23.184
out of the box hosting 

09:34:25.693 --> 09:34:27.693
site statin assets and let's 
take a look 

09:34:29.601 --> 09:34:31.601
at how that server handles 
incoming requests.

09:34:35.318 --> 09:34:37.318
request against our server, it 
goes flow.

09:34:39.425 --> 09:34:41.425
The server routs the request 
based on 

09:34:43.931 --> 09:34:45.931
the  URL and it uses templating 
logic to 

09:34:48.831 --> 09:34:51.681
to create a complete HTML 
document.  We use a combination 

09:34:51.682 --> 09:34:53.682
of data from the 

09:34:56.817 --> 09:34:59.343
well as partial HTML fragments 
that the server  stores locally.

09:35:06.926 --> 09:35:09.176
we start streaming HTML back to 
our web app.  So there are two 

09:35:09.177 --> 09:35:14.914
pieces of this  in more detail. 
Routing and templateing.

09:35:19.199 --> 09:35:21.199
When it comes to routing, my 
approach 

09:35:23.927 --> 09:35:26.570
express frameworks Native 
routing Syntax.  It is flexible 

09:35:26.571 --> 09:35:28.571
enough to match simple 

09:35:31.710 --> 09:35:33.710
well as URLs that include 
parameters 

09:35:36.046 --> 09:35:38.046
such as the question ID as part 
of the path.

09:35:41.539 --> 09:35:43.539
earlyish, we're  using ES 
modules as a 

09:35:44.816 --> 09:35:46.816
source of truth and Java code.

09:35:58.588 --> 09:36:00.588
directly from the service code.

09:36:06.391 --> 09:36:08.619
given express pattern, the 
appropriate handler with 

09:36:08.620 --> 09:36:10.620
templating logic specific 

09:36:12.927 --> 09:36:14.927
a chance to respond.

09:36:21.902 --> 09:36:24.583
They piece together fragments in
sequence one after another.

09:36:29.481 --> 09:36:32.333
itself really well to streaming 
response back.

09:36:35.650 --> 09:36:37.650
The several sends back initial 
HTML 

09:36:41.869 --> 09:36:43.869
immediately and the browse Serb 
able to 

09:36:44.896 --> 09:36:46.896
render that nationalphage page 
right away.

09:36:51.404 --> 09:36:53.404
Testimony  It streams them till 
the document is complete.

09:36:59.396 --> 09:37:01.396
take a look at the express code 
from one 

09:37:03.408 --> 09:37:05.408
of our routs.

09:37:08.412 --> 09:37:09.571
using the responses right method
and referencing locally stored 

09:37:09.572 --> 09:37:15.095
partial start the response 
stream immediately without 

09:37:15.096 --> 09:37:17.096
blocking on any sort of external
data source.

09:37:24.193 --> 09:37:26.898
and renders a meaningful 
database and away.

09:37:30.153 --> 09:37:32.153
So that loading please wait 
message 

09:37:34.042 --> 09:37:36.042
givers important context to our 
users, 

09:37:37.322 --> 09:37:40.773
the sort of thing you expect to 
see in a multi-page app.  Rather

09:37:40.774 --> 09:37:42.774
than rely on JavaScript, I am 

09:37:44.053 --> 09:37:46.934
the empty pseudoclass in  CSS to
display that message and then it

09:37:46.935 --> 09:37:48.935
will 

09:37:53.088 --> 09:37:55.965
content starts streaming in.  So
going back to our rout handler.

09:38:01.536 --> 09:38:03.188
data from the stack exchange 
API.  Getting that data means 

09:38:03.189 --> 09:38:05.189
that our 

09:38:06.277 --> 09:38:11.397
request.  We can't render 
anything else until we get a 

09:38:11.398 --> 09:38:13.398
response back and process it.

09:38:17.558 --> 09:38:19.558
users are not staring at a blank
screen while they wait.

09:38:24.550 --> 09:38:26.604
stack exchange API, we call 
custom templating function to 

09:38:26.605 --> 09:38:28.605
translate the dat 

09:38:31.902 --> 09:38:33.902
corresponding HTML.

09:38:36.382 --> 09:38:38.382
contentious  topic.

09:38:41.294 --> 09:38:43.294
here is one approach among many.

09:38:44.357 --> 09:38:46.357
You will want to substitute your
own 

09:38:48.284 --> 09:38:53.343
you have Legacy ties to an 
existing templating framework.  

09:38:53.344 --> 09:38:55.344
But what made sense for my use 
case 

09:38:56.425 --> 09:38:59.301
to just rely on  JavaScripts 
template literals with some 

09:38:59.302 --> 09:39:03.767
logic broken out into functions.
So one of the nice  things about

09:39:06.223 --> 09:39:09.087
building an MPA is that we don't
have to track of state updates 

09:39:09.088 --> 09:39:11.408
and rerender our  HTML as things
change.

09:39:19.645 --> 09:39:21.287
HTML worked fine for me.  All 
right.  Soy here's an example of

09:39:21.288 --> 09:39:23.288
how I am 

09:39:26.238 --> 09:39:28.279
portion of our web apps index.  
As with our routs, the 

09:39:28.280 --> 09:39:30.280
templating 

09:39:32.767 --> 09:39:34.767
that can be imported into both 
the 

09:39:36.201 --> 09:39:38.201
server and the service worker.

09:39:41.462 --> 09:39:43.462
And just a reminder.

09:39:44.925 --> 09:39:47.560
you are  taking user provided 
input and converting it into an 

09:39:47.561 --> 09:39:53.117
HTMLit is crucial escape 
dangerous character sequences.  

09:39:53.118 --> 09:39:55.118
If you are using existing 
templating 

09:39:56.654 --> 09:39:59.719
rolling your own, then it might 
be taken care of for you.  Okay.

09:40:05.456 --> 09:40:07.694
pure JavaScript is used to break
out into larger helpful 

09:40:07.695 --> 09:40:09.695
functions when appropriate.

09:40:11.977 --> 09:40:13.977
each of the items returned in 
the API 

09:40:15.070 --> 09:40:17.070
response into one such function.

09:40:25.109 --> 09:40:27.109
element with all attributes set.

09:40:28.166 --> 09:40:30.166
A particular note is a data 
attribute 

09:40:33.487 --> 09:40:35.487
each link set to the stack 
exchange  API 

09:40:39.394 --> 09:40:40.424
corresponding question -- 
display the corresponding 

09:40:40.425 --> 09:40:44.078
question.  Keep it in mind.later
on.  Okay.

09:40:49.423 --> 09:40:51.423
Once templating is complete, we 
stream 

09:40:54.913 --> 09:40:56.913
of our pages HTML to the browser
and we end the stream.

09:41:01.860 --> 09:41:03.860
progressive rendering is 
complete.

09:41:04.956 --> 09:41:06.956
So that's a brief tour of our 
servish set up.

09:41:10.137 --> 09:41:12.137
first time will always get a 
response 

09:41:13.576 --> 09:41:15.576
from the server, but when a 
visitor 

09:41:18.937 --> 09:41:21.416
the service worker will get a 
chance to start responding.  

09:41:21.417 --> 09:41:23.417
Let's dive in there.

09:41:24.521 --> 09:41:27.044
familiar.  Many of the same 
pieces we previously 

09:41:31.526 --> 09:41:32.962
are here in slightly different 
arrangement.  Let's walk through

09:41:32.963 --> 09:41:34.963
the requests flow 

09:41:36.161 --> 09:41:38.195
worker taking all the logic into
account.

09:41:42.874 --> 09:41:44.874
So service worker handles an 
incoming 

09:41:48.393 --> 09:41:51.271
request for a give everyone URL.
Just like our server did, it 

09:41:51.272 --> 09:41:53.272
does 

09:41:56.486 --> 09:41:58.486
figure out how to response.

09:42:00.937 --> 09:42:02.937
The approach is the same as 
before but 

09:42:05.008 --> 09:42:09.552
primitives like fetch and the 
cache storage API.  We use those

09:42:09.553 --> 09:42:11.553
data sources to construct 

09:42:13.462 --> 09:42:15.462
HTML response, which the service
worker 

09:42:17.145 --> 09:42:19.145
passes back to the web page.

09:42:21.446 --> 09:42:23.446
scratch, with those low level 

09:42:25.986 --> 09:42:27.986
service worker on top of a set 
of high 

09:42:29.665 --> 09:42:31.665
level  librarys called Workbox.

09:42:33.529 --> 09:42:35.529
the Workbox engineering team and
this is not exactly  unbiased.

09:42:38.494 --> 09:42:40.494
provides a solid foundation for 
any 

09:42:42.586 --> 09:42:44.586
service worker's caching, 
routing and 

09:42:46.481 --> 09:42:48.481
Throughout the next set of 
Slides, we'll 

09:42:50.043 --> 09:42:52.043
see how Workbox is put to use.

09:42:54.956 --> 09:42:57.801
routing.  Just as with our 
server side code, our 

09:43:01.089 --> 09:43:02.524
worker needs to know how to 
match up an incoming request 

09:43:02.525 --> 09:43:04.765
with the appropriate response 
logic.

09:43:09.251 --> 09:43:11.251
approach was to translate each 
express 

09:43:15.387 --> 09:43:17.387
rout into a corresponding 
regular 

09:43:19.443 --> 09:43:23.643
helpful library called ridge X 
per M.  Once that translation is

09:43:19.443 --> 09:43:21.443
performed, we 

09:43:23.769 --> 09:43:26.029
Workbox's bottom and support for
regular expression routing.

09:43:32.661 --> 09:43:34.661
has our regular expressions, we 
register 

09:43:36.359 --> 09:43:38.359
Workbox's router.

09:43:40.138 --> 09:43:42.595
Inside each rout, we're able to 
provide custom templating logic 

09:43:42.596 --> 09:43:46.718
used to a response.  Tim 
operating in the service worker 

09:43:46.719 --> 09:43:48.996
is a bit more involved than it 
was in our 

09:43:54.503 --> 09:43:56.503
The Workbox helps with a lot of 
the heavy lifting.

09:44:01.037 --> 09:44:03.280
that our partial HTML templates 
are locally available in the 

09:44:03.281 --> 09:44:05.281
cache storage API.

09:44:07.381 --> 09:44:09.433
up to date whenever we deploy 
changes to the web app.

09:44:12.939 --> 09:44:15.171
done by hand.  We turn to 
Workbox to handle 

09:44:19.454 --> 09:44:21.454
precaching as part of our build 
process.

09:44:24.766 --> 09:44:26.397
precache and using a 
configuration file pointing to 

09:44:26.398 --> 09:44:28.398
the directory that contains 

09:44:32.100 --> 09:44:34.100
assets along with the set of 
patterns to match.

09:44:35.823 --> 09:44:37.823
The file is automatically read 
by the 

09:44:39.705 --> 09:44:41.705
is run each time we rebuild our 
sites 

09:44:42.756 --> 09:44:44.756
as part of my build process.

09:44:50.531 --> 09:44:53.005
of each file's content and 
automatically injects that list 

09:44:53.006 --> 09:44:55.006
of URLs and  revisions 

09:44:56.327 --> 09:44:59.167
final service worker file.  
Workbox now has everything it 

09:44:59.168 --> 09:45:01.168
needs to 

09:45:04.699 --> 09:45:07.636
always available and always kept
up to date.  For folks who use a

09:45:07.637 --> 09:45:09.637
more complex build 

09:45:14.994 --> 09:45:17.213
Workbox has a node and in 
addition to the command line.

09:45:23.785 --> 09:45:25.785
stream that pre-cast partial 
HFML back 

09:45:26.882 --> 09:45:29.756
immediately without any delays. 
This is a really crucial part of

09:45:29.757 --> 09:45:31.757
being reliably fast.

09:45:34.058 --> 09:45:36.315
get something meaningful on the 
screen right away.

09:45:40.589 --> 09:45:42.589
Fortunately, using the stream's 
API 

09:45:44.333 --> 09:45:46.359
service worker makes that 
possible.  Now, you might have 

09:45:46.360 --> 09:45:48.360
heard about the 

09:45:49.421 --> 09:45:51.421
streams API before.

09:45:52.587 --> 09:45:54.845
colleague Jake Archibald has 
been singing the  phrases for 

09:45:54.846 --> 09:45:59.806
years.back in 2016.  And the 
stream's API is awesome today 

09:46:03.496 --> 09:46:08.390
difference.  While only Chrome 
supported the streams back then,

09:46:08.391 --> 09:46:11.870
the streams API much supported 
now.  All right.

09:46:14.945 --> 09:46:16.945
So careful observers might note 
that asterisk.

09:46:23.116 --> 09:46:25.839
yachts for today -- car yachts 
for caveats for today.

09:46:29.297 --> 09:46:31.297
You can make that change.

09:46:34.590 --> 09:46:36.590
also a known bug that lead to 
issues 

09:46:37.649 --> 09:46:39.649
with edges current streams 
implementation.

09:46:43.154 --> 09:46:44.831
story is positive and with 
appropriate  fallback code, 

09:46:44.832 --> 09:46:46.832
there is nothing stopping 

09:46:49.151 --> 09:46:51.151
streams in your service worker 
today.

09:46:52.873 --> 09:46:54.873
Well, well the thigh be one 
thing 

09:46:55.909 --> 09:46:57.909
wrapping your head around how 
the 

09:46:59.010 --> 09:47:01.010
streams  API actually works.

09:47:03.498 --> 09:47:05.542
primitives and developers who 
are comfortable using it can 

09:47:05.543 --> 09:47:08.213
create really complex Dataflows.

09:47:12.301 --> 09:47:14.530
understanding the full 
implication of code similar to 

09:47:14.531 --> 09:47:19.631
what's on the screen for 
everyone.  Rather than parse 

09:47:19.632 --> 09:47:21.684
through this logic, let's talk 
about my approach to service 

09:47:27.387 --> 09:47:30.275
So I'm using a brand new high 
level  wrapper provided by 

09:47:30.276 --> 09:47:32.276
Workbox.

09:47:34.756 --> 09:47:36.587
a mix of streaming sources from 
cashes and run time data that 

09:47:36.588 --> 09:47:38.868
might come from the network.

09:47:42.567 --> 09:47:44.385
will take care of coordinating 
the individual sources and 

09:47:44.386 --> 09:47:46.386
stitching them 

09:47:48.287 --> 09:47:50.287
streaming response.

09:47:52.590 --> 09:47:55.252
More over, Workbox detects 
whether the streams API is 

09:47:55.253 --> 09:47:57.931
support and when it's  it 
creates an, 85 leapt of 

09:48:00.579 --> 09:48:02.078
non-streaming response -- an 
equivalent of non-streaming 

09:48:02.079 --> 09:48:04.538
response.doesn't mean you have 
to worry about 

09:48:08.567 --> 09:48:12.648
writing fallbacks to 100% 
browser    All right.  Let's 

09:48:12.649 --> 09:48:14.649
turn our attention to how our 

09:48:21.649 --> 09:48:23.938
We are making use of Workboxes 
for a scale while we validate 

09:48:23.939 --> 09:48:25.939
along with 

09:48:27.843 --> 09:48:29.843
sure storage doesn't grow 
unbounded.

09:48:30.932 --> 09:48:33.000
Let's take a look how those 
concepts translate into code.

09:48:40.131 --> 09:48:42.131
Workbox to handle the different 
sources 

09:48:43.806 --> 09:48:45.806
final streaming response.  A few
function calls and some 

09:48:50.812 --> 09:48:52.812
would otherwise take hundreds or

09:48:54.130 --> 09:48:56.130
thousands of lines of hand 
written code.

09:48:58.817 --> 09:49:00.817
will be used to read data that's
been 

09:49:03.514 --> 09:49:05.514
pre-cached like our partial HTML
templates.

09:49:10.840 --> 09:49:12.840
strategy implements that steal 
while we

09:49:14.128 --> 09:49:19.304
implement that scale while we 
validate reentries.have those 

09:49:19.305 --> 09:49:21.305
strategies in place, all 

09:49:24.442 --> 09:49:26.442
that's left is to tell Workbox 
how to 

09:49:32.982 --> 09:49:37.115
We pass in an array of sources 
as functions and each of those 

09:49:32.982 --> 09:49:34.982
functions 

09:49:38.734 --> 09:49:40.734
Workbox takes the result from 
each 

09:49:42.035 --> 09:49:44.066
source and stream its to the web
app in only delaying if the next

09:49:44.067 --> 09:49:46.067
function in 

09:49:47.735 --> 09:49:49.735
the array hasn't completed yet.

09:49:57.894 --> 09:49:59.894
pre-cached partial templates 
that read 

09:50:00.904 --> 09:50:02.904
So they'll always be available 
immediately.

09:50:06.632 --> 09:50:08.264
implementation will be reliably 
fast and responding to requests 

09:50:08.265 --> 09:50:11.119
just like our server side code 
was.

09:50:18.110 --> 09:50:19.943
Our next sorts function fetches 
data and  processes the response

09:50:19.944 --> 09:50:21.944
into the 

09:50:24.308 --> 09:50:26.769
that our web app expects.  The 
scale revalidates strategy means

09:50:31.642 --> 09:50:33.294
call and will be able to stream 
into the call immediately while 

09:50:33.295 --> 09:50:35.295
updating the 

09:50:36.587 --> 09:50:38.639
background for the next time 
that it's requested.

09:50:48.334 --> 09:50:50.334
of our footer, enclose the final
HTML 

09:50:57.582 --> 09:50:59.582
service worker code, certain 
bits hopefully look familiar.

09:51:02.874 --> 09:51:04.874
The partial HTML and the 
template used 

09:51:06.761 --> 09:51:08.761
by the service worker is 
identical to 

09:51:10.272 --> 09:51:12.722
handler uses.  This code sharing
insures that users 

09:51:16.201 --> 09:51:18.666
get a consistent experience 
whether they visiting the web 

09:51:18.667 --> 09:51:20.667
app for the first time or 
returning to a page that's been 

09:51:22.775 --> 09:51:24.775
worker.

09:51:27.367 --> 09:51:29.367
That's the beauty of using 
isoforfix 

09:51:31.302 --> 09:51:33.302
So we have walked through both 
the 

09:51:34.378 --> 09:51:38.452
server and the service worker, 
but of logic.  There's a small 

09:51:38.453 --> 09:51:41.342
Java script that runs on each of
our pages after they're fully 

09:51:42.773 --> 09:51:44.890
in.  This code progressively 
roan Hanses 

09:51:52.389 --> 09:51:54.389
the user -- enhances the user 

09:51:59.395 --> 09:52:01.428
So one thing we're using that 
for is metadata baseed on the 

09:52:01.429 --> 09:52:04.068
API response.end up using the 
same initial bit of 

09:52:08.270 --> 09:52:10.270
cache to HTML for each page, we 
end up 

09:52:11.925 --> 09:52:14.360
the documents head, but the 
coordination between the 

09:52:14.361 --> 09:52:16.361
templating and our client 

09:52:18.044 --> 09:52:20.105
the windows title  using page 
specific metadata.

09:52:23.209 --> 09:52:25.209
So as part of the templating 
code, we 

09:52:26.893 --> 09:52:28.893
a script tag containing the 
properly escaped string.

09:52:32.390 --> 09:52:34.438
Then once the page is load, we 
read in and update the document 

09:52:34.439 --> 09:52:36.884
title.  Now if there are other 
pieces of page 

09:52:41.582 --> 09:52:43.827
update your own web app and you 
can follow the same approach.

09:52:51.243 --> 09:52:53.243
enhancement we added is use used
to offline capabilities.

09:52:56.593 --> 09:52:58.866
We have built a reliable PWA.  
We want users to know when 

09:52:58.867 --> 09:53:00.867
they're 

09:53:02.328 --> 09:53:04.328
they can revisit previously 
visited pages.

09:53:06.869 --> 09:53:08.869
We do this in two stages.

09:53:12.792 --> 09:53:14.004
storage API from within the 
content of the client side 

09:53:14.005 --> 09:53:16.005
JavaScript.

09:53:19.495 --> 09:53:21.495
previously cached API requested 
and 

09:53:23.375 --> 09:53:25.375
transfer that into a list of 
URLs.

09:53:27.280 --> 09:53:29.280
attribute we talked about 
containing the 

09:53:30.756 --> 09:53:32.756
URL for the API request needed 
to display the request?

09:53:37.687 --> 09:53:39.687
attributes against the list of 
cache 

09:53:44.455 --> 09:53:47.336
all the question linksna that 
don't match.  This gives us all 

09:53:47.337 --> 09:53:49.384
the data we need to handlers and
respond to the browser 

09:53:52.432 --> 09:53:54.432
going online or offline.

09:53:59.780 --> 09:54:01.617
state, we loop through the list 
of uncached links and give out 

09:54:01.618 --> 09:54:03.618
the ones that don't work.

09:54:06.351 --> 09:54:08.405
mind this is just a visual hint 
so user about what they should 

09:54:08.406 --> 09:54:11.475
expect from those pages.
disabling the links or 

09:54:11.476 --> 09:54:13.929
preventing the user from 
navigating.

09:54:19.245 --> 09:54:21.502
we restore the links to the 
original capacity.

09:54:28.489 --> 09:54:31.330
my approach to building a 
multi-page PWA.factors you will 

09:54:31.331 --> 09:54:33.989
have to consider when coming up 
with your own approach and you 

09:54:36.862 --> 09:54:39.103
different choices than I did.  
And that flexibility is one the 

09:54:39.104 --> 09:54:41.104
great 

09:54:45.262 --> 09:54:47.288
But there are few common 
pitfalls that you may encounter 

09:54:47.289 --> 09:54:49.746
when making your own decisions 
and I wanted to call them out 

09:54:54.256 --> 09:54:56.256
in advance to hopefully save you
some pain.

09:54:58.740 --> 09:55:00.740
would really recommend against 
storing 

09:55:02.466 --> 09:55:05.322
complete HTML documents in your 
cache.a waste of space.

09:55:08.399 --> 09:55:10.468
If your web app uses the same 
basic structure for each of its 

09:55:10.469 --> 09:55:15.182
pages, you end up storing copies
of the same mark up again and 

09:55:15.183 --> 09:55:17.183
again.

09:55:22.778 --> 09:55:26.156
deploy a change to the sates 
shared HTML structure.  Each one

09:55:26.157 --> 09:55:28.157
of those previously cache 

09:55:29.215 --> 09:55:32.107
still stuck with your old 
layout.  You can imagine the 

09:55:32.108 --> 09:55:34.108
frustration when 

09:55:37.877 --> 09:55:39.519
and see a mix of old and new 
pages  depending upon whether 

09:55:39.520 --> 09:55:41.520
they previously 

09:55:45.243 --> 09:55:47.287
So the other pitfall to avoid 
involves your server and your 

09:55:47.288 --> 09:55:49.288
service worker getting out of 
sync.

09:55:56.560 --> 09:55:58.560
JavaScript so the code was 
always run in both places.

09:55:59.409 --> 09:56:01.409
depending upon your existing 
server 

09:56:02.683 --> 09:56:04.683
architecture, that's not always 
possible.

09:56:06.450 --> 09:56:08.688
architectural decision you end 
up making, you need to have some

09:56:08.689 --> 09:56:10.689
strategy 

09:56:12.562 --> 09:56:14.562
ruleing and template and code in
your 

09:56:17.043 --> 09:56:19.043
server and your service worker.

09:56:23.805 --> 09:56:25.805
those pitfalls?

09:56:28.157 --> 09:56:30.157
Well, all sorts of failures are 

09:56:31.653 --> 09:56:33.653
the worst case scenario is that 
a user 

09:56:34.737 --> 09:56:36.737
returns to your site and 
navigates around.

09:56:39.515 --> 09:56:42.165
revisiting a cache page for the 
very stale layout.  So it's  

09:56:42.166 --> 09:56:44.400
jarring when you see it during a
presentation and it is just as 

09:56:46.453 --> 09:56:48.453
interacting for your web apps 
repeat visitors.

09:56:49.930 --> 09:56:51.930
everything you can to avoid 
this.

09:56:53.333 --> 09:56:56.293
Alternative  Alternatively, they
might come across 

09:57:00.815 --> 09:57:03.289
that is run by your server.  
Zombie layouts and ruleing dead 

09:57:03.290 --> 09:57:05.290
ends 

09:57:07.814 --> 09:57:09.814
reliable PWA.  But you're not in
this alone.

09:57:12.755 --> 09:57:17.240
The following tips can help you 
avoid those pitfalls.Try to use 

09:57:17.241 --> 09:57:19.241
templating and routing 

09:57:20.327 --> 09:57:22.327
libraries that have JavaScript 
implementations.

09:57:25.861 --> 09:57:28.417
every developer has a luxury of 
migrating off the current web 

09:57:28.418 --> 09:57:30.418
server and 

09:57:32.926 --> 09:57:34.754
number of popular templating and
routing frameworks have 

09:57:34.755 --> 09:57:38.663
implementations in multiple 
languages.You can find one that 

09:57:38.664 --> 09:57:40.664
works with 

09:57:42.346 --> 09:57:45.805
JavaScript as well as your 
current servers language.step 

09:57:45.806 --> 09:57:47.806
closer to keeping your service 

09:57:49.129 --> 09:57:51.129
worker and your server in sync.

09:57:55.879 --> 09:57:57.879
sequential templates that can be

09:58:01.830 --> 09:58:04.307
It's okay if later portions of 
your page use more complicated 

09:58:04.308 --> 09:58:06.308
templating 

09:58:08.009 --> 09:58:10.009
you stream in the initial parts 
of your 

09:58:11.274 --> 09:58:13.274
HTML as quickly as possible.

09:58:15.768 --> 09:58:17.596
should  pre-cache all of your 
sites critical static  

09:58:17.597 --> 09:58:19.597
resources.

09:58:22.138 --> 09:58:24.585
a run time  caching rout to 
handle dynamic content like  API

09:58:24.586 --> 09:58:26.586
requests.

09:58:27.688 --> 09:58:29.316
means you can build on top of 
well tested production ready 

09:58:29.317 --> 09:58:31.317
strategies 

09:58:33.396 --> 09:58:37.714
from scratch.   Related to, that
you should only block on the 

09:58:37.715 --> 09:58:39.715
network when it's not 

09:58:41.431 --> 09:58:44.080
to stream a response from the 
cache.  Diss playing a cache API

09:58:44.081 --> 09:58:46.081
responds 

09:58:47.157 --> 09:58:50.008
to a better user experience than
waits for that fresh data.

09:58:55.767 --> 09:58:57.767
s that I covered today, you're 
on your 

09:58:59.048 --> 09:59:01.048
way to build a first class  PWA 
experience.

09:59:02.332 --> 09:59:05.189
that's fast, loading as little 
as possible from the network and

09:59:05.190 --> 09:59:07.190
the casing 

09:59:10.888 --> 09:59:12.888
all the bytes for loading were 
for 

09:59:14.547 --> 09:59:16.547
actual content with almost no 
overhead.

09:59:19.488 --> 09:59:21.334
that's reliable by displaying 
something meaning.  Even when 

09:59:21.335 --> 09:59:23.335
you're offline.

09:59:25.653 --> 09:59:28.320
queues to reenforcing that we're
providing a reliable experience.

09:59:33.240 --> 09:59:35.240
reliably fast by streaming in 
our initial HTML immediately.

09:59:43.083 --> 09:59:45.083
regardless of the network 
conditions.

09:59:48.073 --> 09:59:50.073
We're interested in your 
feedback on this presentation.

09:59:51.638 --> 09:59:53.638
Please go to the website or use 
the 

09:59:55.671 --> 09:59:57.671
Android I/O S

10:00:00.447 --> 10:00:02.447
iOS  apps.

10:00:03.721 --> 10:00:05.721
Thank you and special thanks to 
everybody here in person.

10:00:09.738 --> 10:00:11.566
at the web Sandbox area 
afterwards and I would really 

10:00:11.567 --> 10:00:15.909
love to chat.  So thanks again. 
Cheers.

