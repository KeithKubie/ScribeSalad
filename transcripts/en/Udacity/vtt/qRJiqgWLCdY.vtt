WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.810
And the solution here is if we have the if&lt;u&gt;better function available, then we can solve&lt;/u&gt;

00:00:04.810 --> 00:00:10.920
vertex cover in polynomial time because as we said the if&lt;u&gt;better function works in polynomial time&lt;/u&gt;

00:00:10.920 --> 00:00:13.740
and we're calling it once for each vertex in the graph.

00:00:13.740 --> 00:00:18.860
So we're calling it n times it works in polynomial time so this part here of finding the

00:00:18.860 --> 00:00:22.890
best possible assignment of theirs and once to the vertices that works in polynomial time.

00:00:22.890 --> 00:00:26.800
And as you know from before, checking if an assignment is valid and checking the size

00:00:26.800 --> 00:00:29.440
of an assignment that's also doable in polynomial time.

00:00:29.440 --> 00:00:34.480
So the total running time of the algorithm is polynomial in n the number of vertices,

00:00:34.480 --> 00:00:38.910
and the right thing is that, although you shouldn't probably anthropomorphise this,

00:00:38.910 --> 00:00:42.740
the if&lt;u&gt;better function always knows what will help us.&lt;/u&gt;

00:00:42.740 --> 00:00:49.090
So if we were trying to solve clique or independent set instead of vertex cover,

00:00:49.090 --> 00:00:54.360
the if&lt;u&gt;better function would somehow know this and give us a different assignment&lt;/u&gt;

00:00:54.360 --> 00:00:58.610
of 0s and 1s to the vertices, which would however still be guaranteed to be optimal,

00:00:58.610 --> 99:59:59.000
and that is what make this function so extremely powerful.

