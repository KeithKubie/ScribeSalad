WEBVTT
Kind: captions
Language: en

00:00:00.150 --> 00:00:02.170
Let's look at the solution to our test and

00:00:02.170 --> 00:00:05.680
set quiz. We have a test and set instruction that

00:00:05.680 --> 00:00:09.560
checks the memory location at the address defined in the

00:00:09.560 --> 00:00:13.360
instruction. If that location is 0, then we write a

00:00:13.360 --> 00:00:16.968
1 there and set the register to 1. If

00:00:16.968 --> 00:00:19.272
the location is not 0, then we just set the

00:00:19.272 --> 00:00:22.940
register to 0 without writing to the memory location. And

00:00:22.940 --> 00:00:26.410
we want to use this to implement a lock function.

00:00:26.410 --> 00:00:32.570
The way we do that is, we set R1 to 0, and then, as long as R1 is equal to 0,

00:00:32.570 --> 00:00:38.488
we test and set lockvar and get the result of that instruction in R1. So, what

00:00:38.488 --> 00:00:40.902
happens is, our R1 starts out at 0, so

00:00:40.902 --> 00:00:44.290
we will enter this first iteration of the loop.

00:00:44.290 --> 00:00:47.870
If the test and set finds the lock busy,

00:00:47.870 --> 00:00:51.730
it's going to read lockvar, see that it's not 0,

00:00:51.730 --> 00:00:54.800
return 0. And R1 stays 0, and we keep

00:00:54.800 --> 00:00:58.678
looping. If, however, the test and set finds the

00:00:58.678 --> 00:01:01.989
lockvar to be free, that means its memory location

00:01:01.989 --> 00:01:04.617
is 0, then we do this. We set lockvar

00:01:04.617 --> 00:01:10.581
to 1, thus changing the state of the lock to locked, and we return 1 in R1, so

00:01:10.581 --> 00:01:13.834
that this loop will exit. So, we will only

00:01:13.834 --> 00:01:17.029
exit this lock function once we acquire the lock, and

00:01:17.029 --> 00:01:20.290
we will wait here as long as the lock is not available.

