WEBVTT
Kind: captions
Language: en

00:00:06.240 --> 00:00:07.210
I'm Erik Demaine.

00:00:07.210 --> 00:00:08.450
You can call me Erik.

00:00:08.450 --> 00:00:10.380
This is the web
page for the class.

00:00:10.380 --> 00:00:13.600
You should all go there if you
haven't already, and sign up

00:00:13.600 --> 00:00:16.350
on this sheet if you want
to be on the mailing list.

00:00:16.350 --> 00:00:18.600
Good.

00:00:18.600 --> 00:00:22.910
So, maybe I'll tell you a little
bit what this class about.

00:00:22.910 --> 00:00:25.470
Then I'll tell you about
how the class works,

00:00:25.470 --> 00:00:28.050
and then we'll do more
about what it's about.

00:00:28.050 --> 00:00:30.680
The idea of lecture 1 is
to cover the entire class

00:00:30.680 --> 00:00:31.860
in one lecture.

00:00:31.860 --> 00:00:35.390
Obviously, I will omit
a few of the details

00:00:35.390 --> 00:00:37.112
because we have a
lot to cover, but I

00:00:37.112 --> 00:00:38.570
thought it would
be fun to give you

00:00:38.570 --> 00:00:41.670
a picture what the whole class
is, what the sort of content

00:00:41.670 --> 00:00:44.940
is, so you know whether
you want to be here.

00:00:44.940 --> 00:00:48.430
And my chalk.

00:00:48.430 --> 00:00:52.350
So this class is about geometry.

00:00:52.350 --> 00:00:53.510
It's about folding.

00:00:53.510 --> 00:00:55.190
It's about algorithms.

00:00:55.190 --> 00:01:04.560
In general, we are interested in
the mathematics and algorithms

00:01:04.560 --> 00:01:05.880
behind folding things.

00:01:19.660 --> 00:01:22.410
And also unfolding things,
because that turns out

00:01:22.410 --> 00:01:24.780
to be pretty interesting.

00:01:24.780 --> 00:01:28.005
And the formal term for
things is geometric objects.

00:01:30.600 --> 00:01:34.150
And you think of things
like your arm folds.

00:01:34.150 --> 00:01:37.860
Pieces of paper fold.

00:01:37.860 --> 00:01:39.610
All sorts of things
fold in the world.

00:01:39.610 --> 00:01:43.010
A lot of the-- if there's
any sheet metal objects

00:01:43.010 --> 00:01:46.250
in this room, maybe
some of these parts

00:01:46.250 --> 00:01:48.790
are folded out of sheet.

00:01:48.790 --> 00:01:50.360
I would guess so.

00:01:50.360 --> 00:01:52.900
So folding is everywhere,
and this class

00:01:52.900 --> 00:01:55.350
is all about how that
works mathematically.

00:01:55.350 --> 00:01:57.330
And I'm a theoretical
computer scientist.

00:01:57.330 --> 00:01:59.890
I do algorithms, so my
slant is towards algorithms,

00:01:59.890 --> 00:02:03.340
which is getting computers
to do all this for you.

00:02:03.340 --> 00:02:06.430
How many people here
are computer scientists?

00:02:06.430 --> 00:02:10.550
How many people are-- you've got
to pick one-- mathematicians?

00:02:10.550 --> 00:02:13.560
How many people are
neither of the above?

00:02:13.560 --> 00:02:14.860
Wow, cool.

00:02:14.860 --> 00:02:18.105
It's like not a lot of
mathematicians only,

00:02:18.105 --> 00:02:19.480
but a lot of
computer scientists,

00:02:19.480 --> 00:02:20.890
a lot of everyone else.

00:02:20.890 --> 00:02:24.960
So I'll go around later
maybe and find out

00:02:24.960 --> 00:02:27.680
what your background is.

00:02:27.680 --> 00:02:29.730
You may be interested
less in the mathematics

00:02:29.730 --> 00:02:31.580
and more in the
applications, so let

00:02:31.580 --> 00:02:33.160
me tell you a little
bit about those.

00:02:42.520 --> 00:02:45.056
I have a long list of
applications, some of which

00:02:45.056 --> 00:02:46.430
have been realized,
some of which

00:02:46.430 --> 00:02:49.790
are still in progress
or just ideas.

00:02:49.790 --> 00:02:53.420
Robotics is a big one,
folding robotic arms.

00:02:53.420 --> 00:02:57.860
And I'll show later different
kinds of transforming robots,

00:02:57.860 --> 00:03:01.990
like Transformers or
Terminator 2-style, where

00:03:01.990 --> 00:03:04.945
you want one robot to take on
many different forms, this idea

00:03:04.945 --> 00:03:06.820
of programmable matter,
where you can program

00:03:06.820 --> 00:03:09.030
the geometry of your
object as well as you

00:03:09.030 --> 00:03:11.560
could program the software.

00:03:11.560 --> 00:03:13.839
So next time when you
buy the new iPhone,

00:03:13.839 --> 00:03:15.380
you download the
hardware in addition

00:03:15.380 --> 00:03:16.380
to downloading software.

00:03:16.380 --> 00:03:19.210
That would be the crazy idea.

00:03:19.210 --> 00:03:21.050
That, of course,
doesn't exist yet.

00:03:21.050 --> 00:03:24.300
But it exists in
some simple forms.

00:03:24.300 --> 00:03:26.200
Computer graphics.

00:03:26.200 --> 00:03:30.829
If you're making
Toy Story 4, and you

00:03:30.829 --> 00:03:33.370
want to animate your characters
from one position to another,

00:03:33.370 --> 00:03:36.740
you have some skeleton
which is a foldable object,

00:03:36.740 --> 00:03:39.470
and you'd like to interpolate
between two key frames

00:03:39.470 --> 00:03:42.010
that the animator
draws automatically.

00:03:42.010 --> 00:03:44.930
That's a morphing problem,
and it's a folding morphing

00:03:44.930 --> 00:03:47.210
problem.

00:03:47.210 --> 00:03:50.590
We have mechanics.

00:03:50.590 --> 00:03:56.320
A lot of the early folding
work is in like 17, 1800s,

00:03:56.320 --> 00:03:59.030
and is motivated by
building mechanical linkages

00:03:59.030 --> 00:04:00.400
to do useful things.

00:04:00.400 --> 00:04:02.860
This is back before
electrical computers,

00:04:02.860 --> 00:04:06.480
we had mechanical
computers of sorts.

00:04:06.480 --> 00:04:11.142
Things like you could sign
your name in triplicate

00:04:11.142 --> 00:04:13.100
by just signing once,
and having a linkage that

00:04:13.100 --> 00:04:16.769
made many copies of it.

00:04:16.769 --> 00:04:20.019
I think Jefferson
used such a linkage.

00:04:20.019 --> 00:04:25.200
We have manufacturing, which
is a pretty broad term--

00:04:25.200 --> 00:04:28.760
things like sheet metal bending.

00:04:28.760 --> 00:04:32.330
Nano manufacturing, I think,
is an exciting context,

00:04:32.330 --> 00:04:35.020
where you can-- we're
really good at building

00:04:35.020 --> 00:04:39.160
flat nano-scale
objects like CPUs.

00:04:39.160 --> 00:04:40.760
And if you could
get them to fold up,

00:04:40.760 --> 00:04:46.830
then you could manufacture
3D nano-scale objects.

00:04:46.830 --> 00:04:50.240
I have optics here, Jason.

00:04:50.240 --> 00:04:51.230
Sure.

00:04:51.230 --> 00:04:55.380
George [INAUDIBLE] group
does some optical devices

00:04:55.380 --> 00:04:58.250
through folding here at MIT.

00:04:58.250 --> 00:04:59.950
Medical is a big one.

00:05:02.690 --> 00:05:05.570
Imagine folding a
stent really small,

00:05:05.570 --> 00:05:07.327
so it can fit through
small blood vessels

00:05:07.327 --> 00:05:09.160
until it gets to where
you want in your body

00:05:09.160 --> 00:05:11.960
and expands-- do
non-intrusive heart surgery.

00:05:11.960 --> 00:05:13.410
Drug delivery is another one.

00:05:13.410 --> 00:05:17.500
You have some object you want
to deliver, your cancer drug,

00:05:17.500 --> 00:05:22.280
so it follows through your body
until it detects the cancer,

00:05:22.280 --> 00:05:24.879
and then it releases
the drug, for example.

00:05:24.879 --> 00:05:26.420
Something we just
started looking at.

00:05:28.960 --> 00:05:31.280
Aero-astro.

00:05:31.280 --> 00:05:33.280
You want to deploy something
out in outer space.

00:05:33.280 --> 00:05:35.696
You've got to get it there
first within the space shuttle.

00:05:35.696 --> 00:05:37.540
So how do you fold
it down small so it

00:05:37.540 --> 00:05:39.700
fits in your space
shuttle, and then expands

00:05:39.700 --> 00:05:41.670
when it gets there?

00:05:41.670 --> 00:05:43.360
Biology.

00:05:43.360 --> 00:05:44.630
Big one.

00:05:44.630 --> 00:05:46.320
I'm interested in
protein folding.

00:05:46.320 --> 00:05:49.950
Proteins are the building block
of all life forms we know,

00:05:49.950 --> 00:05:51.880
and we'd like to
know how they fold.

00:05:51.880 --> 00:05:53.801
I'll show you some
pictures of them later.

00:05:53.801 --> 00:05:55.300
We'll talk more
about it, obviously,

00:05:55.300 --> 00:05:57.090
in the rest of the class.

00:05:57.090 --> 00:05:59.390
And the goal is to use
this mathematics of folding

00:05:59.390 --> 00:06:01.680
to try to figure out what
biology might be doing

00:06:01.680 --> 00:06:05.890
in real life, though that's
still obviously very difficult.

00:06:05.890 --> 00:06:09.290
Sculpture, sort
of an obvious one.

00:06:09.290 --> 00:06:12.120
Designing cooler
origami is possible,

00:06:12.120 --> 00:06:13.890
thanks to mathematics
and algorithms.

00:06:13.890 --> 00:06:16.590
Hopefully Jason agrees.

00:06:16.590 --> 00:06:20.270
Jason Ku is, I guess, the top
origami designer currently

00:06:20.270 --> 00:06:20.770
at MIT.

00:06:20.770 --> 00:06:22.120
That's a safe bet.

00:06:22.120 --> 00:06:23.760
You could make
some broader claim.

00:06:23.760 --> 00:06:25.970
And we'll get him to
give a guest lecture

00:06:25.970 --> 00:06:28.320
on the more artistic
side of origami,

00:06:28.320 --> 00:06:30.980
and I'll talk about the
mathematics-- some of which

00:06:30.980 --> 00:06:32.620
is currently used
in origami design

00:06:32.620 --> 00:06:35.500
today, either implicitly or
explicitly, some of which

00:06:35.500 --> 00:06:41.370
is yet to be used, but hopefully
will make cooler sculpture.

00:06:41.370 --> 00:06:43.650
You could also imagine
building interactive sculpture.

00:06:43.650 --> 00:06:46.770
Interactive buildings'
architecture

00:06:46.770 --> 00:06:48.060
is another big one.

00:06:48.060 --> 00:06:50.450
How many people
here are architects?

00:06:50.450 --> 00:06:50.950
Cool.

00:06:50.950 --> 00:06:52.730
A bunch.

00:06:52.730 --> 00:06:55.000
So I think this is really
exciting and underexploited

00:06:55.000 --> 00:06:57.010
at the moment,
reconfigurable buildings.

00:06:57.010 --> 00:06:59.750
Hoberman is one
example of somebody

00:06:59.750 --> 00:07:02.366
exploring this, getting the
building to fold from one shape

00:07:02.366 --> 00:07:04.740
to another, or getting your
shades to fold from one shape

00:07:04.740 --> 00:07:06.780
to another, all sorts of things.

00:07:06.780 --> 00:07:07.980
That's all I have.

00:07:07.980 --> 00:07:09.546
Maybe there are more.

00:07:09.546 --> 00:07:12.570
You're welcome to tell me.

00:07:12.570 --> 00:07:14.240
But this is somehow
why you might

00:07:14.240 --> 00:07:18.950
care about the mathematics
of folding things.

00:07:18.950 --> 00:07:23.140
And what else do I have?

00:07:23.140 --> 00:07:25.680
Yeah, let me tell you a
little bit about the field.

00:07:25.680 --> 00:07:27.890
It's, in some sense, old.

00:07:27.890 --> 00:07:31.430
There are some problems in
this world of geometric folding

00:07:31.430 --> 00:07:34.950
that go back four
or five centuries.

00:07:34.950 --> 00:07:37.510
And some of those problems
are still unsolved,

00:07:37.510 --> 00:07:39.390
but a lot of the
action in the field

00:07:39.390 --> 00:07:43.960
has been in the
last 12 years or so.

00:07:43.960 --> 00:07:45.390
And it's been really exciting.

00:07:45.390 --> 00:07:47.190
A lot of theorems
have been proved.

00:07:47.190 --> 00:07:48.690
In fact, a lot of
theorems have been

00:07:48.690 --> 00:07:50.610
proved in the context
of previous iterations

00:07:50.610 --> 00:07:51.810
of this class.

00:07:51.810 --> 00:07:53.870
And so I always have
to update things,

00:07:53.870 --> 00:07:56.690
because we keep
getting new results.

00:07:56.690 --> 00:07:59.380
And the idea of this class
is to cover the bleeding

00:07:59.380 --> 00:08:03.410
edge, whatever the
frontiers of what's known,

00:08:03.410 --> 00:08:05.780
and also to push
that edge further.

00:08:05.780 --> 00:08:08.540
So there is an open problem
session, which is optional.

00:08:08.540 --> 00:08:11.330
But if you want to come solve
new problems that haven't been

00:08:11.330 --> 00:08:13.650
solved before,
every week probably

00:08:13.650 --> 00:08:16.710
we'll work on a problem related
to what I cover in class.

00:08:16.710 --> 00:08:19.880
So you know what's
known, and then we

00:08:19.880 --> 00:08:21.710
try to prove what's unknown.

00:08:21.710 --> 00:08:22.710
That's the idea.

00:08:22.710 --> 00:08:24.460
And that's worked
pretty well in the past.

00:08:27.260 --> 00:08:29.835
Let's dive a little
bit into the sort

00:08:29.835 --> 00:08:30.960
of mathematical structures.

00:08:33.870 --> 00:08:36.690
So say geometric objects.

00:08:44.290 --> 00:08:47.730
There are three main
things that we typically

00:08:47.730 --> 00:08:56.605
think about, linkages, pieces
of paper, and polyhedra.

00:09:03.030 --> 00:09:06.750
A linkage is something like
your arm or a robotic arm.

00:09:06.750 --> 00:09:10.930
You have one-dimensional
straight links like bones,

00:09:10.930 --> 00:09:13.380
and hinges that
connect them together.

00:09:13.380 --> 00:09:16.230
And you'd like to know
how that thing can fold.

00:09:16.230 --> 00:09:19.640
So this is like in the graphics
world or mechanical linkage

00:09:19.640 --> 00:09:20.140
world.

00:09:22.740 --> 00:09:25.440
The typical way we
think about linkages

00:09:25.440 --> 00:09:29.160
is that they have rigid bars.

00:09:29.160 --> 00:09:33.070
As opposed to a string,
which is really floppy,

00:09:33.070 --> 00:09:36.030
here you have these rigid,
like maybe metal, parts,

00:09:36.030 --> 00:09:37.930
and you can only
fold at the hinges.

00:09:37.930 --> 00:09:41.200
That's typical
thinking on linkages.

00:09:41.200 --> 00:09:42.330
Makes it interesting.

00:09:42.330 --> 00:09:47.050
And sometimes we also
require no crossing.

00:09:47.050 --> 00:09:50.160
I'm trying to take a physical
thing you have intuition for,

00:09:50.160 --> 00:09:52.530
and write some of the
mathematical constraints.

00:09:52.530 --> 00:09:55.680
No crossing means you
can't intersect yourself.

00:09:55.680 --> 00:09:57.939
Sometimes that's important.

00:09:57.939 --> 00:09:58.730
Sometimes it's not.

00:09:58.730 --> 00:10:01.130
In a lot of the
mechanical linkage world

00:10:01.130 --> 00:10:04.070
you can have crossing
bars, but just

00:10:04.070 --> 00:10:06.910
because they're in different
planes in real life,

00:10:06.910 --> 00:10:10.070
if you're making a
two-dimensional linkage.

00:10:10.070 --> 00:10:10.570
Paper.

00:10:13.170 --> 00:10:16.620
This is my drawing
of a piece of paper.

00:10:16.620 --> 00:10:20.700
The rules are you
are not allowed

00:10:20.700 --> 00:10:25.270
to stretch the
material, and you're not

00:10:25.270 --> 00:10:27.550
allowed to tear or cut.

00:10:30.420 --> 00:10:31.846
So all you can do is fold.

00:10:31.846 --> 00:10:33.220
And so intuitively
this is saying

00:10:33.220 --> 00:10:34.930
you can't make paper any longer.

00:10:34.930 --> 00:10:36.520
You can't really
make it shorter.

00:10:36.520 --> 00:10:42.610
The only thing you can do
is change its 3D geometry.

00:10:42.610 --> 00:10:45.540
But if you look really closely,
the geometry is the same.

00:10:45.540 --> 00:10:47.790
It has a fixed
intrinsic geometry.

00:10:47.790 --> 00:10:50.660
All the distances on the
surface are staying the same.

00:10:50.660 --> 00:10:52.780
And usually in modern
origami, you're

00:10:52.780 --> 00:10:54.740
not allowed to cut the
paper, because that

00:10:54.740 --> 00:10:56.690
makes things too
easy, basically.

00:10:56.690 --> 00:10:59.349
And I guess also
no crossing here.

00:10:59.349 --> 00:11:00.140
It's a requirement.

00:11:03.930 --> 00:11:05.980
This is a pretty informal
description of paper.

00:11:05.980 --> 00:11:06.990
You can formalize it.

00:11:06.990 --> 00:11:08.260
We will do that at some point.

00:11:08.260 --> 00:11:10.380
But it's pretty intuitive.

00:11:10.380 --> 00:11:13.070
You've all done it before.

00:11:13.070 --> 00:11:16.051
Polyhedron is something
more three-dimensional.

00:11:16.051 --> 00:11:18.300
So here we had one-dimensional
things we were folding.

00:11:18.300 --> 00:11:19.640
Two-dimensional things
we were folding.

00:11:19.640 --> 00:11:22.306
A three-dimensional thing, or at
least a two-dimensional surface

00:11:22.306 --> 00:11:24.620
in three dimensions,
a typical thing

00:11:24.620 --> 00:11:27.760
you might want to do with
a polyhedron is build it.

00:11:27.760 --> 00:11:30.150
And often you want to
build something out

00:11:30.150 --> 00:11:34.570
of flat material, something
like-- you've probably

00:11:34.570 --> 00:11:38.930
made a cube by building a
cross, and then folding it up

00:11:38.930 --> 00:11:39.976
into that thing.

00:11:39.976 --> 00:11:41.100
That's the folding problem.

00:11:41.100 --> 00:11:43.040
The unfolding problem
is, where do I

00:11:43.040 --> 00:11:47.370
cut along this surface
in order to make

00:11:47.370 --> 00:11:49.650
one of these nice unfoldings?

00:11:49.650 --> 00:11:53.490
I think there's one more
cut here in the back.

00:11:53.490 --> 00:11:56.130
If I did it right, that
will unfold into the cross.

00:11:56.130 --> 00:12:00.160
So if I have some complicated
3D shape, what 2D shape

00:12:00.160 --> 00:12:02.660
do I cut out in order to
bend it into that 3D shape?

00:12:02.660 --> 00:12:04.171
That's the unfolding problem.

00:12:04.171 --> 00:12:05.920
There are actually
lots of different kinds

00:12:05.920 --> 00:12:08.400
of polyhedron folding
problems, but here it

00:12:08.400 --> 00:12:11.910
is you want to cut the surface.

00:12:11.910 --> 00:12:15.940
You want one piece-- it's
a little harder to assemble

00:12:15.940 --> 00:12:23.460
multiple pieces-- and you'd like
no overlap in that unfolding.

00:12:23.460 --> 00:12:25.390
Because if, when you
unfold, it overlaps,

00:12:25.390 --> 00:12:26.848
then you can't
actually make it out

00:12:26.848 --> 00:12:30.640
of one piece of sheet material.

00:12:30.640 --> 00:12:33.970
So these are the sorts
of things we study.

00:12:33.970 --> 00:12:35.520
And I think the
plan in the class

00:12:35.520 --> 00:12:39.230
is I will start with paper,
because it's kind of the most

00:12:39.230 --> 00:12:42.540
fun, origami design,
computational origami design.

00:12:42.540 --> 00:12:44.910
And then we'll talk about
linkages and polyhedra.

00:12:44.910 --> 00:12:48.040
And I'll probably jump around
from week to week, just

00:12:48.040 --> 00:12:50.540
to keep it exciting, because
they're all interesting.

00:12:50.540 --> 00:12:52.890
You might each have
your favorite one.

00:12:52.890 --> 00:12:55.050
And so that we can talk
about all of them at once.

00:13:01.647 --> 00:13:03.230
So what kind of
mathematical questions

00:13:03.230 --> 00:13:06.580
would you ask about
these structures?

00:13:06.580 --> 00:13:11.870
Well, there are two main
types I like to characterize.

00:13:11.870 --> 00:13:17.330
On the one hand, we have what
I call foldability questions,

00:13:17.330 --> 00:13:23.090
where you're given some existing
structure like a linkage,

00:13:23.090 --> 00:13:27.159
or a piece of paper with
some creases on it maybe,

00:13:27.159 --> 00:13:29.200
and you'd like to know,
how does that thing fold?

00:13:36.990 --> 00:13:41.180
So I give you some structure,
and you'd like to know,

00:13:41.180 --> 00:13:42.750
does it fold?

00:13:42.750 --> 00:13:45.720
Maybe just does it fold at all?

00:13:45.720 --> 00:13:49.090
Or, in some particular
way, can you

00:13:49.090 --> 00:13:51.750
make it fold into
something interesting?

00:13:51.750 --> 00:13:53.220
Or some notion of interesting?

00:13:53.220 --> 00:13:55.200
I'm going to be generic
here, because there's

00:13:55.200 --> 00:13:57.320
a lot of different
questions obviously.

00:13:57.320 --> 00:14:00.730
And this is in contrast
to a design question,

00:14:00.730 --> 00:14:04.230
where you're given-- what
you start with is a goal.

00:14:04.230 --> 00:14:07.477
Like I want to make a butterfly.

00:14:07.477 --> 00:14:09.810
And then the question is, how
do I fold a piece of paper

00:14:09.810 --> 00:14:11.110
to make that butterfly?

00:14:11.110 --> 00:14:13.140
So here you're given
maybe a crease pattern

00:14:13.140 --> 00:14:14.410
and given some structure.

00:14:14.410 --> 00:14:17.940
You want to see how it folds.

00:14:17.940 --> 00:14:19.842
In design, you're
given the goal and you

00:14:19.842 --> 00:14:21.550
want to figure out
what you should build,

00:14:21.550 --> 00:14:23.404
what folding structure
should I make

00:14:23.404 --> 00:14:24.570
that will achieve this goal?

00:14:27.140 --> 00:14:31.150
So what shapes?

00:14:31.150 --> 00:14:35.230
Shape is one thing
you might want.

00:14:35.230 --> 00:14:39.445
But in general, you have some
property you want to achieve.

00:14:45.550 --> 00:14:46.570
Can you fold it?

00:14:49.690 --> 00:14:54.470
And of course if you
can, how do you do it?

00:14:54.470 --> 00:14:56.205
So this tends-- in
general you could

00:14:56.205 --> 00:14:58.330
think of this as a more
mathematical question, this

00:14:58.330 --> 00:14:59.510
as a more algorithmic question.

00:14:59.510 --> 00:15:00.884
But usually actually
both of them

00:15:00.884 --> 00:15:03.460
are addressed with
algorithms to some extent.

00:15:06.220 --> 00:15:08.040
Of course design
is somehow cooler,

00:15:08.040 --> 00:15:09.960
but often we need to
understand foldability

00:15:09.960 --> 00:15:12.140
before we can solve design.

00:15:12.140 --> 00:15:13.420
But not always.

00:15:13.420 --> 00:15:15.630
It depends.

00:15:15.630 --> 00:15:17.940
And just to give
you like-- I mean

00:15:17.940 --> 00:15:20.430
if you looked at the entire
set of results, the questions

00:15:20.430 --> 00:15:23.430
and answers, that we consider,
and you filter them down,

00:15:23.430 --> 00:15:25.140
there would be three
kinds of things

00:15:25.140 --> 00:15:27.570
that we prove in this class.

00:15:27.570 --> 00:15:29.040
These are the results.

00:15:29.040 --> 00:15:31.420
All the results
in three bullets.

00:15:31.420 --> 00:15:33.993
It could be either
you get universality.

00:15:38.332 --> 00:15:39.790
This is the coolest
kind of result,

00:15:39.790 --> 00:15:41.590
and it's surprisingly common.

00:15:41.590 --> 00:15:46.077
Everything can be folded, for
some notion of everything.

00:15:46.077 --> 00:15:47.160
That's always a challenge.

00:15:52.040 --> 00:15:56.080
And you get an
algorithm to do it.

00:15:56.080 --> 00:15:58.312
So if you say I want
to fold a butterfly,

00:15:58.312 --> 00:16:00.020
you put the butterfly
into the algorithm,

00:16:00.020 --> 00:16:02.580
out come your design
for folding a butterfly.

00:16:02.580 --> 00:16:09.270
That's the ideal picture when
you get a universality result.

00:16:09.270 --> 00:16:11.900
The next best thing
you could hope for

00:16:11.900 --> 00:16:14.800
is a sort of decision
result, which

00:16:14.800 --> 00:16:18.635
is that there's a fast
algorithm that will tell you

00:16:18.635 --> 00:16:19.885
whether something is foldable.

00:16:30.080 --> 00:16:32.160
So we say it
decides foldability.

00:16:36.166 --> 00:16:37.290
So you give it a butterfly.

00:16:37.290 --> 00:16:39.170
It says, oh, that's impossible.

00:16:39.170 --> 00:16:39.970
That's not true.

00:16:39.970 --> 00:16:41.924
But you could imagine that.

00:16:41.924 --> 00:16:43.840
Or maybe you give it a
butterfly, it says yes.

00:16:43.840 --> 00:16:46.770
You give it the
skyline of New York,

00:16:46.770 --> 00:16:48.770
and it says no, you
can't fold that.

00:16:48.770 --> 00:16:49.530
That's not true.

00:16:49.530 --> 00:16:54.332
But if it's not the case
that everything is foldable,

00:16:54.332 --> 00:16:56.540
the next best thing is you
could at least distinguish

00:16:56.540 --> 00:16:58.690
which things are foldable
from which things are not.

00:16:58.690 --> 00:17:00.398
And then, of course,
the worst thing that

00:17:00.398 --> 00:17:04.650
could happen, in some sense,
is you get a hardness results

00:17:04.650 --> 00:17:08.829
which says, there's no good
way to even distinguish

00:17:08.829 --> 00:17:10.640
foldable things from
unfoldable things.

00:17:19.621 --> 00:17:21.079
So I'm going to
say computationally

00:17:21.079 --> 00:17:23.960
intractable to mean generically
that there's no good algorithm

00:17:23.960 --> 00:17:25.429
to solve a problem.

00:17:25.429 --> 00:17:27.720
We're going to be more formal
about that in the future.

00:17:33.160 --> 00:17:35.660
Because different people
have different backgrounds,

00:17:35.660 --> 00:17:37.410
you may know about
competition complexity.

00:17:37.410 --> 00:17:38.360
Many of you don't.

00:17:38.360 --> 00:17:39.410
That's cool.

00:17:39.410 --> 00:17:42.960
We're going to talk
about all that here.

00:17:42.960 --> 00:17:44.190
All right.

00:17:44.190 --> 00:17:45.610
That's the class in a nutshell.

00:17:45.610 --> 00:17:46.650
Totally generic.

00:17:46.650 --> 00:17:48.830
Any questions so far?

00:17:48.830 --> 00:17:49.630
Probably not.

00:17:52.300 --> 00:17:55.500
I thought now I would tell you
a little bit about the class

00:17:55.500 --> 00:17:57.920
structure.

00:17:57.920 --> 00:18:01.340
The main part of the
class are these lectures,

00:18:01.340 --> 00:18:04.470
and attendance is
mandatory for classes,

00:18:04.470 --> 00:18:07.270
because you're not going to
learn it unless you come here.

00:18:07.270 --> 00:18:08.270
You can have exceptions.

00:18:08.270 --> 00:18:10.770
Just email me and
watch the videos later.

00:18:10.770 --> 00:18:13.700
That's one of the fun
features of the videos,

00:18:13.700 --> 00:18:18.120
although the videos are mainly
to reach the world for fun.

00:18:18.120 --> 00:18:22.140
There will be a few problem sets
in this class, not too many.

00:18:22.140 --> 00:18:26.170
And the other main thing that
you turn in is the project.

00:18:26.170 --> 00:18:29.290
So sort of a
project-focused class.

00:18:29.290 --> 00:18:31.490
You will hand in some write up.

00:18:31.490 --> 00:18:34.040
You will give some presentation
in the last few lectures

00:18:34.040 --> 00:18:36.040
of class, if you're taking
the class for credit.

00:18:36.040 --> 00:18:37.680
If you're listening, you
don't have to do this.

00:18:37.680 --> 00:18:38.420
You can, if you want.

00:18:38.420 --> 00:18:39.586
You can do the problem sets.

00:18:39.586 --> 00:18:40.910
Some of them will be fun.

00:18:40.910 --> 00:18:43.230
Hopefully all of
them will be fun.

00:18:43.230 --> 00:18:47.090
None of them will
bee too painful.

00:18:47.090 --> 00:18:49.410
But for people who are
taking the class for credit,

00:18:49.410 --> 00:18:51.550
you have to do a project
and presentation.

00:18:51.550 --> 00:18:53.350
The project could be
about tons of things.

00:18:53.350 --> 00:18:54.980
You could build a sculpture.

00:18:54.980 --> 00:18:57.660
You could come up with a cool
virtual design of something

00:18:57.660 --> 00:19:00.110
amazing that somehow
relates to folding.

00:19:00.110 --> 00:19:02.842
It doesn't have to be direct.

00:19:02.842 --> 00:19:05.050
If you're a coder, you could
implement some algorithm

00:19:05.050 --> 00:19:09.780
we talk about, or make a
beautiful image or animation

00:19:09.780 --> 00:19:11.620
or applet or something.

00:19:11.620 --> 00:19:15.690
If you're more theory, you
could solve an open problem.

00:19:15.690 --> 00:19:17.070
Obviously that's a big win.

00:19:17.070 --> 00:19:19.990
But even trying to solve
an open problem is fine.

00:19:19.990 --> 00:19:23.250
You can talk about how
you failed to solve it,

00:19:23.250 --> 00:19:26.202
in the unhappy
case that happens.

00:19:26.202 --> 00:19:27.910
But if you want to
solve an open problem,

00:19:27.910 --> 00:19:29.720
I would encourage you to come
to the open problem session,

00:19:29.720 --> 00:19:31.350
so we can all solve it together.

00:19:31.350 --> 00:19:33.120
Then you can have
a joint project

00:19:33.120 --> 00:19:37.450
on what we do, but it's totally
unpredictable, of course.

00:19:37.450 --> 00:19:39.410
Even posing an open
problem in this field

00:19:39.410 --> 00:19:40.510
is pretty interesting.

00:19:40.510 --> 00:19:42.270
I know a lot of the
hard open problems.

00:19:42.270 --> 00:19:46.540
I would like to find more of
them, more tractable ones.

00:19:46.540 --> 00:19:48.810
And so if you have some
idea, especially related

00:19:48.810 --> 00:19:51.620
to some application field
that you know a lot about,

00:19:51.620 --> 00:19:53.460
it'd be cool to try
to extract, what

00:19:53.460 --> 00:19:58.010
is the mathematical problem
in a lot of these fields?

00:19:58.010 --> 00:19:59.300
Or you can write a survey.

00:19:59.300 --> 00:20:01.947
That's a typical project.

00:20:01.947 --> 00:20:04.530
You should avoid overlap with--
I don't actually have it here,

00:20:04.530 --> 00:20:06.200
but the textbook
for this class--

00:20:06.200 --> 00:20:09.050
you can imagine it being
here-- is Geometric Folding

00:20:09.050 --> 00:20:11.010
Algorithms.

00:20:11.010 --> 00:20:11.790
Here it is.

00:20:11.790 --> 00:20:12.660
Thank you, Jason.

00:20:12.660 --> 00:20:13.160
That's good.

00:20:13.160 --> 00:20:14.250
I ran out of copies.

00:20:14.250 --> 00:20:15.991
Now I have one.

00:20:15.991 --> 00:20:17.710
No, I'll give it back.

00:20:17.710 --> 00:20:21.096
So this is by me and Joe
O'Rourke at Smith College.

00:20:21.096 --> 00:20:22.595
Any questions about
class structure?

00:20:25.150 --> 00:20:25.710
Yeah.

00:20:25.710 --> 00:20:28.390
AUDIENCE: Can projects be
individual? [INAUDIBLE]

00:20:28.390 --> 00:20:30.545
PROFESSOR: Projects
can be with groups.

00:20:30.545 --> 00:20:32.350
I forget whether the
website has a limit

00:20:32.350 --> 00:20:33.350
on the number of people.

00:20:33.350 --> 00:20:34.849
I don't think so.

00:20:34.849 --> 00:20:37.140
But at some point you'll have
to do a project proposal.

00:20:37.140 --> 00:20:38.610
I should mention that also.

00:20:38.610 --> 00:20:41.950
And then I will vet
your project group.

00:20:41.950 --> 00:20:43.447
But I think anything's fine.

00:20:43.447 --> 00:20:45.030
Just when you have
more people, you're

00:20:45.030 --> 00:20:47.720
expected to do a
little more, naturally.

00:20:47.720 --> 00:20:49.250
Other questions?

00:20:49.250 --> 00:20:49.880
Yeah.

00:20:49.880 --> 00:20:51.460
I love collaboration.

00:20:51.460 --> 00:20:53.940
I think I've never written
a paper without a co-author.

00:20:53.940 --> 00:20:55.360
It wasn't a survey paper.

00:20:55.360 --> 00:20:57.130
So collaboration's good.

00:20:59.770 --> 00:21:00.921
All right.

00:21:00.921 --> 00:21:01.420
Doing well.

00:21:04.860 --> 00:21:08.070
So the next thing I
want to do is actually

00:21:08.070 --> 00:21:10.390
dive into actual content.

00:21:10.390 --> 00:21:12.012
This was totally generic.

00:21:12.012 --> 00:21:12.970
And to me, it's useful.

00:21:12.970 --> 00:21:14.637
But maybe to you,
it's less useful.

00:21:14.637 --> 00:21:15.970
This is sort of an organization.

00:21:15.970 --> 00:21:17.880
As we go through,
everything you'll see

00:21:17.880 --> 00:21:20.769
will fit almost always into
one of these three categories.

00:21:20.769 --> 00:21:23.060
The question will fit into
one of these two categories,

00:21:23.060 --> 00:21:25.590
and the answer will fit into
one of these three categories.

00:21:25.590 --> 00:21:28.660
Now let's see what some of
those actual problems, questions

00:21:28.660 --> 00:21:29.990
and answers, are.

00:21:29.990 --> 00:21:31.600
That's the fun part.

00:21:31.600 --> 00:21:33.820
There's so many
cool results here,

00:21:33.820 --> 00:21:35.420
and so many cool open problems.

00:21:35.420 --> 00:21:40.530
I thought I'd tell you a bunch
of the big open problems, too.

00:21:40.530 --> 00:21:43.790
So in today's class, I'm
going to go in order.

00:21:43.790 --> 00:21:46.260
We're going to start with
linkages, and then paper,

00:21:46.260 --> 00:21:49.120
and then polyhedra.

00:21:49.120 --> 00:21:59.290
And I'm going to start with
linkages allowing intersection.

00:22:03.130 --> 00:22:07.550
So magically, bars of the
linkage can overlap each other.

00:22:07.550 --> 00:22:09.920
And then later I'll
talk about linkages,

00:22:09.920 --> 00:22:12.040
which is most interesting
in two dimensions,

00:22:12.040 --> 00:22:14.373
because you can actually build
them in three dimensions.

00:22:14.373 --> 00:22:18.710
And then we'll go to linkages
that do not have intersection.

00:22:18.710 --> 00:22:24.450
So an early
motivation here where

00:22:24.450 --> 00:22:26.710
a lot of this linkage folding
came from originally--

00:22:26.710 --> 00:22:35.220
this is the 17, 1800s-- is
converting linear motion

00:22:35.220 --> 00:22:36.300
into circular motion.

00:22:41.290 --> 00:22:45.280
Actually, it's really--
yeah, get it right.

00:22:45.280 --> 00:22:47.505
Linear motion to
circular motion.

00:22:50.624 --> 00:22:52.540
I don't know what order
to cover these things.

00:22:52.540 --> 00:22:54.750
I'll show you a slide.

00:22:54.750 --> 00:22:58.130
My rules are essentially
no words on any slide.

00:22:58.130 --> 00:23:00.330
This is just for
pretty pictures,

00:23:00.330 --> 00:23:02.250
and I'll write
stuff on the board.

00:23:02.250 --> 00:23:04.670
There's this fun book called
How to Draw a Straight

00:23:04.670 --> 00:23:09.620
Line by Kempe in 1877, which
is all about this problem.

00:23:09.620 --> 00:23:11.940
How do I turn a
circular crank and make

00:23:11.940 --> 00:23:14.510
a straight line come
out as a result?

00:23:14.510 --> 00:23:17.790
And the motivation for this
problem is steam engines.

00:23:17.790 --> 00:23:20.280
You have a steam piston,
which is moving something

00:23:20.280 --> 00:23:21.980
up and down along
a straight line.

00:23:21.980 --> 00:23:25.500
And maybe you're building
a locomotive train,

00:23:25.500 --> 00:23:29.609
and you want to turn
a wheel in a circle,

00:23:29.609 --> 00:23:30.650
because wheels are round.

00:23:30.650 --> 00:23:32.360
So how do you convert
this linear motion

00:23:32.360 --> 00:23:33.950
into a circular motion?

00:23:33.950 --> 00:23:39.230
That is How to Draw a Straight
Line, affectionately titled.

00:23:39.230 --> 00:23:42.960
But you can see that one of
the earliest linkages for this

00:23:42.960 --> 00:23:46.270
is called the Watt
parallel motion.

00:23:46.270 --> 00:23:48.990
And we have a little
animation here.

00:23:48.990 --> 00:23:52.170
So the idea is this vertex in
the top left is pinned down.

00:23:52.170 --> 00:23:54.750
This one in the bottom
right is pinned down.

00:23:54.750 --> 00:23:58.880
And then, I think if I move
this around the circle,

00:23:58.880 --> 00:24:04.050
the green guy moves
along that figure eight.

00:24:04.050 --> 00:24:06.950
And there's a limit
to how far it can go.

00:24:06.950 --> 00:24:09.730
So and if you draw it
right, the figure eight

00:24:09.730 --> 00:24:11.880
is almost a straight line.

00:24:11.880 --> 00:24:15.130
So that was mathematics
back in the day.

00:24:15.130 --> 00:24:17.282
No, no one thought
that that was perfect,

00:24:17.282 --> 00:24:18.240
but it was pretty good.

00:24:18.240 --> 00:24:20.780
And that actually led Watt--
you may have heard of Watt.

00:24:20.780 --> 00:24:22.440
He's a unit.

00:24:22.440 --> 00:24:25.760
And he was very proud
of this invention.

00:24:25.760 --> 00:24:29.310
And he made tons of innovations
in the steam engine world,

00:24:29.310 --> 00:24:31.160
and this was his favorite.

00:24:31.160 --> 00:24:33.100
And, I mean, it changed things.

00:24:33.100 --> 00:24:35.660
But later on-- I mean this
is like 100 years later,

00:24:35.660 --> 00:24:38.850
1864 versus 1764.

00:24:38.850 --> 00:24:40.800
Exactly 100 years later.

00:24:40.800 --> 00:24:45.110
Peaucellier a French guy
in the army, I think,

00:24:45.110 --> 00:24:46.360
came up with this linkage.

00:24:46.360 --> 00:24:49.430
So again, you have two
pinned vertices here.

00:24:49.430 --> 00:24:51.120
This one's moving
around a circle.

00:24:51.120 --> 00:24:53.130
So you just turn
the crank, and look.

00:24:53.130 --> 00:24:56.340
This guy moves
along that red line.

00:24:56.340 --> 00:24:57.880
Perfect.

00:24:57.880 --> 00:24:58.380
Very cool.

00:24:58.380 --> 00:25:02.500
Again it has a limit
how far you can go.

00:25:02.500 --> 00:25:04.010
But it's pretty awesome.

00:25:04.010 --> 00:25:06.095
I mean you could play
with this forever.

00:25:09.820 --> 00:25:10.567
I won't bore you.

00:25:10.567 --> 00:25:12.275
There's this other
guy you may have heard

00:25:12.275 --> 00:25:14.690
of, Kelvin, Lord Kelvin.

00:25:14.690 --> 00:25:16.759
Another unit.

00:25:16.759 --> 00:25:18.550
There's a story about
him playing with one.

00:25:18.550 --> 00:25:20.299
He wouldn't want to
give it up, because he

00:25:20.299 --> 00:25:23.270
was having too much fun just
pushing it back and forth.

00:25:23.270 --> 00:25:27.394
It's like, wow, a straight
line out of a circle.

00:25:27.394 --> 00:25:28.310
So that's pretty cool.

00:25:28.310 --> 00:25:30.560
Making straight lines out
of circles is pretty neat.

00:25:30.560 --> 00:25:34.026
In fact, you could think,
well, what else could I make?

00:25:34.026 --> 00:25:35.150
I can make a straight line.

00:25:35.150 --> 00:25:35.983
That's kind of nice.

00:25:35.983 --> 00:25:40.640
But could I make, I don't
know, some other curve?

00:25:40.640 --> 00:25:42.770
I mean a straight line is
a special kind of curve.

00:25:42.770 --> 00:25:47.420
Maybe I could make this curve.

00:25:47.420 --> 00:25:48.393
That's a nice curve.

00:25:51.070 --> 00:25:53.380
In general, there's
a universality result

00:25:53.380 --> 00:25:56.390
which says there's a
linkage to sign your name.

00:25:58.824 --> 00:25:59.865
That's the cute phrasing.

00:26:03.240 --> 00:26:05.850
So it's a
two-dimensional linkage.

00:26:05.850 --> 00:26:13.510
You turn one circular crank,
and it signs your name.

00:26:13.510 --> 00:26:15.950
The mathematical
version is that you

00:26:15.950 --> 00:26:21.130
trace a piecewise
polynomial curve.

00:26:21.130 --> 00:26:24.259
Or if you're an architect
or graphics person,

00:26:24.259 --> 00:26:25.050
call this a spline.

00:26:31.340 --> 00:26:32.880
Pick your favorite word.

00:26:32.880 --> 00:26:36.110
You can make it all
with one linkage.

00:26:36.110 --> 00:26:39.480
It's pretty crazy, and
not super practical.

00:26:39.480 --> 00:26:44.370
Building this would probably
require thousands of bars.

00:26:44.370 --> 00:26:46.970
But hey, who's counting?

00:26:46.970 --> 00:26:48.921
At least you can get
a universality result.

00:26:48.921 --> 00:26:50.670
This is actually
something that goes back,

00:26:50.670 --> 00:26:52.910
in particular, to the
first time this class was

00:26:52.910 --> 00:26:55.220
taught six years ago.

00:26:55.220 --> 00:26:56.920
We found some better
ways to do, so it's

00:26:56.920 --> 00:26:58.680
known that it could be done.

00:26:58.680 --> 00:27:02.690
And I'll talk about
those ways later on.

00:27:02.690 --> 00:27:03.620
Cool.

00:27:03.620 --> 00:27:04.810
Open problem.

00:27:04.810 --> 00:27:08.264
Not everything is known.

00:27:08.264 --> 00:27:10.430
There's a lot of open
problems here, but one of them

00:27:10.430 --> 00:27:12.850
is, what if you
forbid crossings?

00:27:16.500 --> 00:27:20.040
So these linkages, like the
ones I've been showing here,

00:27:20.040 --> 00:27:22.560
like the Peaucellier linkage,
there's crossing bars.

00:27:22.560 --> 00:27:26.070
And yeah, you could do that, but
what if you forbid crossings?

00:27:26.070 --> 00:27:29.150
It'd be really cool to sign
your name with a linkage that

00:27:29.150 --> 00:27:30.850
doesn't even cross itself.

00:27:30.850 --> 00:27:31.840
That's totally open.

00:27:31.840 --> 00:27:34.100
Getting any kind of
result, positive result,

00:27:34.100 --> 00:27:35.790
maybe not everything,
but at least

00:27:35.790 --> 00:27:37.123
getting some interesting things.

00:27:37.123 --> 00:27:39.590
Even drawing a straight
line, I think, is open.

00:27:39.590 --> 00:27:42.430
Could be a fun
problem to work on.

00:27:42.430 --> 00:27:43.040
All right.

00:27:43.040 --> 00:27:45.770
That's one.

00:27:45.770 --> 00:27:52.510
Let's go over here.

00:27:55.234 --> 00:27:57.400
Let's see, is that the end
of linkages, is crossing?

00:27:57.400 --> 00:27:58.030
No.

00:27:58.030 --> 00:28:01.840
Next question you might
ask is-- so that's

00:28:01.840 --> 00:28:04.180
sort of a design question.

00:28:04.180 --> 00:28:07.040
I was given the goal, which
was to make a straight line

00:28:07.040 --> 00:28:09.990
or sign my name.

00:28:09.990 --> 00:28:12.180
And I wanted to find
the linkage that did it.

00:28:12.180 --> 00:28:15.610
The other question, the
foldability question,

00:28:15.610 --> 00:28:19.270
one of them is rigidity, which
is, does a linkage fold at all?

00:28:23.310 --> 00:28:24.640
I should say a given linkage.

00:28:32.520 --> 00:28:36.690
So for example, I'll
give you three examples.

00:28:36.690 --> 00:28:37.530
Test you out here.

00:28:40.692 --> 00:28:42.400
These are rigid bars
connected by hinges.

00:28:53.920 --> 00:28:56.850
OK, rigid or flexible?

00:28:56.850 --> 00:28:58.280
Rigid, I agree.

00:28:58.280 --> 00:28:59.971
Rigid or flexible.

00:28:59.971 --> 00:29:00.470
Rigid.

00:29:00.470 --> 00:29:02.260
Any other answers?

00:29:02.260 --> 00:29:04.230
Flexible, correct.

00:29:04.230 --> 00:29:05.550
Both are correct.

00:29:05.550 --> 00:29:10.190
In two dimensions, OK, it
depends where you live?

00:29:10.190 --> 00:29:13.456
In two dimensions, this
is rigid no matter what,

00:29:13.456 --> 00:29:15.830
in any dimension.

00:29:15.830 --> 00:29:20.770
But in three dimensions, this is
flexible and in two dimensions,

00:29:20.770 --> 00:29:22.632
it's rigid.

00:29:22.632 --> 00:29:24.506
In three dimensions,
you can pick this guy up

00:29:24.506 --> 00:29:27.680
and it spins around a circle,
out of the board here.

00:29:27.680 --> 00:29:28.930
Or you could pick this guy up.

00:29:28.930 --> 00:29:30.450
It spins around a circle.

00:29:30.450 --> 00:29:32.385
In two dimensions,
though, it's rigid

00:29:32.385 --> 00:29:34.010
because it's really
just two triangles.

00:29:34.010 --> 00:29:35.820
Triangles are rigid
in two dimensions.

00:29:35.820 --> 00:29:37.010
This is a tetrahedron.

00:29:37.010 --> 00:29:39.350
Tetrahedra are rigid
in three dimensions.

00:29:39.350 --> 00:29:40.910
Rigid or flexible?

00:29:40.910 --> 00:29:42.559
Everyone agrees.

00:29:42.559 --> 00:29:43.975
In both dimensions
it is flexible.

00:29:46.580 --> 00:29:50.980
OK, pretty intuitive
for four vertices.

00:29:50.980 --> 00:29:53.132
But you can ask the
mathematical question

00:29:53.132 --> 00:29:54.090
and give you a linkage.

00:29:54.090 --> 00:29:55.350
Is it rigid in 2D?

00:29:55.350 --> 00:29:57.290
Is it rigid in 3D?

00:29:57.290 --> 00:30:00.430
And there are many
versions of this question.

00:30:00.430 --> 00:30:05.410
But the short version, a
short answer, let's say,

00:30:05.410 --> 00:30:08.060
is that distinguishing rigid
from flexible two-dimensional

00:30:08.060 --> 00:30:09.594
linkages is easy.

00:30:09.594 --> 00:30:11.010
There's a good
algorithm to do it.

00:30:11.010 --> 00:30:12.970
It's very powerful, very useful.

00:30:12.970 --> 00:30:15.900
In 3D, we have no idea.

00:30:15.900 --> 00:30:18.040
Very open.

00:30:18.040 --> 00:30:18.540
Tough.

00:30:18.540 --> 00:30:19.200
Very tough problem.

00:30:19.200 --> 00:30:20.616
A lot of people
have been thinking

00:30:20.616 --> 00:30:24.120
about that for decades.

00:30:24.120 --> 00:30:24.950
So that's rigidity.

00:30:24.950 --> 00:30:28.740
I'm just going to touch on
lots of topics very briefly.

00:30:42.120 --> 00:30:43.490
All right.

00:30:43.490 --> 00:30:46.990
Next we go on to, I
guess, one and a half.

00:30:46.990 --> 00:30:52.240
This is linkages
forbidding intersection.

00:31:04.336 --> 00:31:05.710
And this is more
interesting when

00:31:05.710 --> 00:31:07.584
you're talking about 3D
linkages like my arm.

00:31:07.584 --> 00:31:09.810
I really don't want it
to penetrate other bars.

00:31:09.810 --> 00:31:10.585
It's not possible.

00:31:13.900 --> 00:31:18.430
And the first question you
might ask in this world, which

00:31:18.430 --> 00:31:22.970
I guess is a
foldability question,

00:31:22.970 --> 00:31:25.300
sort of a
reconfiguration question,

00:31:25.300 --> 00:31:30.840
let's say I want to fold
my robotic arm from one

00:31:30.840 --> 00:31:33.130
configuration that
I know-- call it

00:31:33.130 --> 00:31:40.130
configuration A-- to some
other configuration, B.

00:31:40.130 --> 00:31:41.880
When is that possible?

00:31:41.880 --> 00:31:42.990
Can I go from A to B?

00:31:42.990 --> 00:31:46.954
Can I go from some other A
prime to some other B prime?

00:31:46.954 --> 00:31:48.120
Sometimes yes, sometimes no.

00:31:48.120 --> 00:31:49.320
It depends.

00:31:49.320 --> 00:31:51.050
Sometimes it's not
foldable at all,

00:31:51.050 --> 00:31:53.644
even when you allow
intersections.

00:31:53.644 --> 00:31:55.310
So this is a pretty
open-ended question.

00:31:55.310 --> 00:31:57.710
In general, it's
computationally intractable.

00:31:57.710 --> 00:32:00.164
If I give you a linkage
and two configurations,

00:32:00.164 --> 00:32:01.830
to decide whether you
can go from A to B

00:32:01.830 --> 00:32:04.180
is, for the
complexity theorists,

00:32:04.180 --> 00:32:05.450
piece space complete.

00:32:05.450 --> 00:32:08.020
Talk about what
that means later.

00:32:08.020 --> 00:32:09.870
Really, really hard
is the short version.

00:32:12.720 --> 00:32:19.250
But a lot of the times you can
think about special linkages.

00:32:19.250 --> 00:32:22.660
There are a lot of
interesting special cases.

00:32:26.430 --> 00:32:30.550
In particular, we like
to think about chains

00:32:30.550 --> 00:32:31.430
like I drew before.

00:32:37.160 --> 00:32:39.990
Also polygons.

00:32:39.990 --> 00:32:42.880
That's a little
messy, but imagine

00:32:42.880 --> 00:32:44.859
those don't self-intersect.

00:32:44.859 --> 00:32:46.400
So this is what I
call an open chain,

00:32:46.400 --> 00:32:47.500
and this is a closed chain.

00:32:47.500 --> 00:32:48.708
In general, these are chains.

00:32:51.030 --> 00:32:54.410
And the other thing I might like
to think about, in particular

00:32:54.410 --> 00:32:57.145
because proteins look kind
of like this, are trees.

00:33:02.330 --> 00:33:05.680
Trees are just linkages
without any cycles in them.

00:33:05.680 --> 00:33:07.400
So those are nice and simple.

00:33:07.400 --> 00:33:10.780
Here I have no cycles,
no cycles, one cycle.

00:33:10.780 --> 00:33:11.890
Easier to think about.

00:33:11.890 --> 00:33:14.310
And sometimes you actually
get a universality result

00:33:14.310 --> 00:33:16.935
that these linkages can
fold from any configuration

00:33:16.935 --> 00:33:18.580
to any configuration.

00:33:18.580 --> 00:33:20.340
And that's especially cool.

00:33:20.340 --> 00:33:21.710
Let me tell you about them.

00:33:28.694 --> 00:33:29.610
Where do I want to go?

00:33:38.090 --> 00:33:41.140
So it depends again what
dimension you live in.

00:33:43.867 --> 00:33:45.200
I'm very flexible in this class.

00:33:45.200 --> 00:33:46.574
You can live in
any dimension you

00:33:46.574 --> 00:33:50.600
want to, and even
fictional ones.

00:33:50.600 --> 00:33:54.320
And you can think about
chains and trees, let's say.

00:33:54.320 --> 00:33:55.800
You could go more
general, but this

00:33:55.800 --> 00:33:57.920
is where most things
have been studied.

00:33:57.920 --> 00:34:01.960
And the answer is,
for chains in 2D

00:34:01.960 --> 00:34:04.220
you get a universality result.

00:34:04.220 --> 00:34:06.730
You can fold from
anything into anything.

00:34:06.730 --> 00:34:10.975
For trees in 2D, you don't.

00:34:10.975 --> 00:34:13.350
There are some trees you can't
get from one configuration

00:34:13.350 --> 00:34:14.810
to another.

00:34:14.810 --> 00:34:15.889
Which ones?

00:34:15.889 --> 00:34:16.580
We don't know.

00:34:16.580 --> 00:34:19.989
But at least you don't
get a universality result.

00:34:19.989 --> 00:34:23.360
In 3D chains you do not
get a universality result.

00:34:23.360 --> 00:34:26.670
And so also for trees,
because that's even harder.

00:34:26.670 --> 00:34:30.239
And for 4D, everything's easy.

00:34:30.239 --> 00:34:32.780
Also in 5D, any
higher dimension.

00:34:32.780 --> 00:34:40.400
Because the intuition here,
at least for this column,

00:34:40.400 --> 00:34:42.400
is you think about tying knots.

00:34:42.400 --> 00:34:45.027
I have a one-dimensional
linkage here.

00:34:45.027 --> 00:34:46.610
Think of it as a
one-dimensional cord.

00:34:46.610 --> 00:34:48.190
It's kind of a kinky cord.

00:34:48.190 --> 00:34:52.480
It has kinks-- not the
other kind of kinky.

00:34:52.480 --> 00:34:54.880
And in two dimensions,
if you draw

00:34:54.880 --> 00:34:57.904
a non-self-intersecting
loop, it's never knotted.

00:34:57.904 --> 00:34:59.570
You can't draw a knot
in two dimensions.

00:34:59.570 --> 00:35:01.040
You can drawn a knot
in three dimensions,

00:35:01.040 --> 00:35:03.570
and you cannot draw a knot
in four dimensions or higher.

00:35:03.570 --> 00:35:05.410
You may not know that
result, but it's true.

00:35:05.410 --> 00:35:09.180
So it matches, but things are
little tricky, even trees.

00:35:09.180 --> 00:35:11.430
If this was a piece
of string, you'd

00:35:11.430 --> 00:35:15.310
be able to always fold this
piece of a tree-shaped piece

00:35:15.310 --> 00:35:16.852
of string into
anything you wanted.

00:35:16.852 --> 00:35:18.310
But it's a little
more complicated.

00:35:21.460 --> 00:35:26.690
Let me show you a locked
tree, I think, is next.

00:35:26.690 --> 00:35:28.950
Yeah.

00:35:28.950 --> 00:35:33.090
For a long time, these were
the only known locked trees.

00:35:33.090 --> 00:35:37.087
These are configurations of tree
linkages that cannot reach some

00:35:37.087 --> 00:35:37.920
other configuration.

00:35:37.920 --> 00:35:40.050
In fact, they can
barely move at all.

00:35:40.050 --> 00:35:42.550
It's less obvious
for some of them.

00:35:42.550 --> 00:35:45.570
But say, in this
top left one, you

00:35:45.570 --> 00:35:49.820
have these little sort of petals
tucked into their armpits,

00:35:49.820 --> 00:35:52.880
I guess, and you can't
get any of those arms

00:35:52.880 --> 00:35:55.799
open unless you had a
lot of room to open it.

00:35:55.799 --> 00:35:57.340
And in order to make
room, you'd have

00:35:57.340 --> 00:35:58.964
to squeeze all the
others really tight.

00:35:58.964 --> 00:36:01.260
And if you draw this
example tight enough,

00:36:01.260 --> 00:36:04.530
also none of the arms can
get compressed very much.

00:36:04.530 --> 00:36:06.460
And so it's locked.

00:36:06.460 --> 00:36:09.030
And this is one of the first
examples actually discovered

00:36:09.030 --> 00:36:11.910
in 1998, and publication
took a while.

00:36:11.910 --> 00:36:14.332
There are a few others,
which you see here.

00:36:14.332 --> 00:36:15.790
This one's kind of
crazy because it

00:36:15.790 --> 00:36:19.900
has only one vertex with
three incident bars.

00:36:19.900 --> 00:36:21.400
Everybody else is like a chain.

00:36:21.400 --> 00:36:23.980
So it's like three chains
joined together at that point,

00:36:23.980 --> 00:36:26.257
and still it is locked.

00:36:26.257 --> 00:36:28.090
And for a long time,
these were the examples

00:36:28.090 --> 00:36:29.298
we would always carry around.

00:36:29.298 --> 00:36:31.350
These are the ones that
appear in the textbook.

00:36:31.350 --> 00:36:33.230
But I thought it would
be neat to see, well,

00:36:33.230 --> 00:36:34.890
are there any simpler examples?

00:36:34.890 --> 00:36:37.530
And last time this class
was offered three years ago,

00:36:37.530 --> 00:36:40.780
we found what is believed
to be the smallest

00:36:40.780 --> 00:36:43.780
locked tree in existence.

00:36:43.780 --> 00:36:51.500
It has 1, 2, 3, 4, 5, 6, 7,
8 bars, if I counted right.

00:36:51.500 --> 00:36:54.820
And it looks curved here,
just to make it easier to see.

00:36:54.820 --> 00:36:56.730
But, in fact, you could
straighten these out

00:36:56.730 --> 00:36:57.950
and it's still locked.

00:36:57.950 --> 00:37:02.400
If you squeeze these
little regions down,

00:37:02.400 --> 00:37:04.550
they'd be very tight.

00:37:04.550 --> 00:37:07.290
So that was with a bunch of
students from this class.

00:37:10.440 --> 00:37:11.560
Cool.

00:37:11.560 --> 00:37:14.380
So that gives you some
idea of this answer.

00:37:17.320 --> 00:37:23.930
Maybe I'll draw you
a picture for chains,

00:37:23.930 --> 00:37:25.055
because it's really simple.

00:37:31.040 --> 00:37:42.160
OK, imagine tying a knot, but
don't actually close the loops.

00:37:42.160 --> 00:37:44.690
And make these end lengths
really, really long.

00:37:44.690 --> 00:37:46.450
We call this the
knitting needles example,

00:37:46.450 --> 00:37:48.991
because the intuition was you
have two long knitting needles,

00:37:48.991 --> 00:37:52.270
and then a very short cord
connecting them in a knot.

00:37:52.270 --> 00:37:53.740
Mathematically,
this is not a knot,

00:37:53.740 --> 00:37:56.590
because if it were string, you
could untie it, no problem.

00:37:56.590 --> 00:38:00.130
But because of these really
long bars, you can't untie it.

00:38:00.130 --> 00:38:03.910
So that's why 3D is hard.

00:38:03.910 --> 00:38:05.690
Or one example of
why 3D is hard.

00:38:05.690 --> 00:38:07.290
It's pretty much
our only example.

00:38:07.290 --> 00:38:10.260
It is the smallest example, and
we can prove things about it.

00:38:10.260 --> 00:38:14.810
But there's a pretty
fascinating open question here,

00:38:14.810 --> 00:38:20.880
I would say, which
is, characterize

00:38:20.880 --> 00:38:22.450
these bad examples.

00:38:22.450 --> 00:38:32.064
Which 3D chains and
which 2D trees have

00:38:32.064 --> 00:38:32.980
locked configurations?

00:38:38.547 --> 00:38:40.880
And all that means is that
there are two configurations,

00:38:40.880 --> 00:38:45.020
A and B, for which you
cannot get from A to B.

00:38:45.020 --> 00:38:47.500
So this is an example.

00:38:47.500 --> 00:38:48.990
Those locked trees
are an example.

00:38:48.990 --> 00:38:52.260
It'd be really fascinating
if you could do this.

00:38:52.260 --> 00:38:54.960
I would guess that this is a
hard problem, but I don't know.

00:38:54.960 --> 00:38:57.210
It's hard to know
whether it's hard.

00:39:04.490 --> 00:39:07.370
It'd be nice to understand
3D chains in particular,

00:39:07.370 --> 00:39:10.830
because they relate--
and 3D trees.

00:39:10.830 --> 00:39:11.470
Oh, sorry.

00:39:11.470 --> 00:39:12.560
I have more animations.

00:39:12.560 --> 00:39:13.740
I forgot.

00:39:13.740 --> 00:39:16.250
Let me show you some pretty
pictures for this result.

00:39:16.250 --> 00:39:20.960
This was actually my PhD
thesis, way back in 2001.

00:39:20.960 --> 00:39:24.110
And this is a more
modern algorithm

00:39:24.110 --> 00:39:25.840
for solving this problem.

00:39:25.840 --> 00:39:27.644
I give you some
complicated polygon.

00:39:27.644 --> 00:39:29.310
First thing you want
to know is, can you

00:39:29.310 --> 00:39:31.591
unfold it into a
nice convex shape?

00:39:31.591 --> 00:39:34.090
Once you get there, you could
refolded into some other shape

00:39:34.090 --> 00:39:37.130
by playing one of these
motions backwards.

00:39:37.130 --> 00:39:39.750
So that's how you
unfold some teeth.

00:39:42.400 --> 00:39:44.970
Here's one of those tree
examples, but doubled.

00:39:44.970 --> 00:39:47.560
For a while, people thought
that might still be locked,

00:39:47.560 --> 00:39:48.620
but it's not.

00:39:48.620 --> 00:39:52.290
Can do this crazy fivefold
rotationally symmetric motion

00:39:52.290 --> 00:39:53.530
to unfold that thing.

00:39:53.530 --> 00:39:55.759
We're zooming in
and out, so it looks

00:39:55.759 --> 00:39:57.550
like things are getting
bigger and smaller.

00:39:57.550 --> 00:40:00.008
But in fact, each of these bars
is staying the same length,

00:40:00.008 --> 00:40:02.656
and they're never
crossing each other.

00:40:02.656 --> 00:40:04.280
Here's a much more
complicated example.

00:40:04.280 --> 00:40:05.500
This is the first
algorithm that could

00:40:05.500 --> 00:40:07.020
handle examples of this size.

00:40:07.020 --> 00:40:10.030
It's pretty fast.

00:40:10.030 --> 00:40:14.990
That's like it's
going to come back.

00:40:14.990 --> 00:40:17.500
You can do it.

00:40:17.500 --> 00:40:20.230
It's like a spider.

00:40:20.230 --> 00:40:21.990
Spooky.

00:40:21.990 --> 00:40:24.735
I think it has 500
vertices, and it probably

00:40:24.735 --> 00:40:26.110
took a couple
minutes to compute.

00:40:26.110 --> 00:40:27.692
I'm not computing it live here.

00:40:27.692 --> 00:40:29.150
There's an applet
on the web if you

00:40:29.150 --> 00:40:30.782
want to pick your
favorite polygon

00:40:30.782 --> 00:40:31.990
and run this algorithm on it.

00:40:31.990 --> 00:40:35.630
It doesn't make quite
movies like in this style,

00:40:35.630 --> 00:40:40.382
but it will show
you how it unfolds.

00:40:40.382 --> 00:40:41.465
We call this the tentacle.

00:40:45.959 --> 00:40:48.250
Yeah, so we'll talk about
this algorithm, how it works.

00:40:48.250 --> 00:40:49.140
There's a couple
other algorithms

00:40:49.140 --> 00:40:50.181
for solving this problem.

00:40:50.181 --> 00:40:51.830
It's pretty cool,
and you could imagine

00:40:51.830 --> 00:40:54.460
using this for planning the
motion of a robotic arm in two

00:40:54.460 --> 00:40:55.360
dimensions.

00:40:55.360 --> 00:40:57.830
But in three dimensions,
things are a lot harder.

00:40:57.830 --> 00:41:00.340
We lack good algorithms.

00:41:00.340 --> 00:41:02.374
I would like to study
four dimensions actually.

00:41:02.374 --> 00:41:04.040
There's some pretty
neat questions here,

00:41:04.040 --> 00:41:05.820
but I'm not supposed
to talk about that.

00:41:05.820 --> 00:41:07.060
It's not on my list.

00:41:07.060 --> 00:41:10.940
I've got to move quickly, but
we're doing all right on time.

00:41:10.940 --> 00:41:13.790
What I wanted to show
you was a protein.

00:41:13.790 --> 00:41:16.650
This is a particular
enzyme protein

00:41:16.650 --> 00:41:21.740
called hexokinase, whatever.

00:41:21.740 --> 00:41:23.030
Embarrassing myself.

00:41:23.030 --> 00:41:24.990
It's a particularly
complicated one.

00:41:24.990 --> 00:41:28.430
It is one of a few I could
find a nice free image of.

00:41:28.430 --> 00:41:32.060
But you can see closely,
if you look closely here,

00:41:32.060 --> 00:41:33.360
it's a linkage.

00:41:33.360 --> 00:41:35.330
And this one actually
has lots of cycles.

00:41:35.330 --> 00:41:38.750
But the backbone of a
protein is like a tree,

00:41:38.750 --> 00:41:41.640
and so it fits into
this kind of world.

00:41:41.640 --> 00:41:43.770
Unfortunately it
fits in this world

00:41:43.770 --> 00:41:46.521
of three-dimensional trees,
which are really hard to fold.

00:41:46.521 --> 00:41:48.270
Or three-dimensional
chains, if you really

00:41:48.270 --> 00:41:49.714
just look at the backbone.

00:41:49.714 --> 00:41:51.880
They're a little bit more
complicated than the sorts

00:41:51.880 --> 00:41:53.421
of linkages we're
talking about here,

00:41:53.421 --> 00:41:56.550
but it makes it even harder
to fold things like this.

00:41:56.550 --> 00:41:58.840
But there's something
special about proteins

00:41:58.840 --> 00:42:00.920
that makes them
fold really well.

00:42:00.920 --> 00:42:04.530
That enzyme over there is
in every living organism

00:42:04.530 --> 00:42:08.310
we have ever tested for the
existence of that thing, which

00:42:08.310 --> 00:42:11.050
I assume is everything.

00:42:11.050 --> 00:42:13.520
And yet it's folding.

00:42:13.520 --> 00:42:15.930
It's produced by this
machine-- the Ribosome,

00:42:15.930 --> 00:42:18.990
you probably know about it--
in a sort of straight state,

00:42:18.990 --> 00:42:21.440
and then it folds into
this shape pretty reliably,

00:42:21.440 --> 00:42:25.584
less than a second, usually
like within nanoseconds.

00:42:25.584 --> 00:42:27.500
So it's really hard to
watch what's happening.

00:42:27.500 --> 00:42:29.490
It's very hot and jiggly,
so it's a little hard

00:42:29.490 --> 00:42:32.400
to see what's actually
going on in the real thing.

00:42:32.400 --> 00:42:36.290
But somehow, these kinds
of barriers to foldability

00:42:36.290 --> 00:42:37.440
don't happen.

00:42:37.440 --> 00:42:41.430
Maybe that's because evolution
found the right things,

00:42:41.430 --> 00:42:46.460
or maybe it's because
protein chains don't really

00:42:46.460 --> 00:42:48.250
look like this.

00:42:48.250 --> 00:42:51.000
They don't have these super
long bars and super short bars.

00:42:51.000 --> 00:42:53.590
If you've ever played with a
chemistry set, all of the bars

00:42:53.590 --> 00:42:56.534
are within a factor of
like 1.5 of each other.

00:42:56.534 --> 00:42:58.450
So there's lots of cool
mathematical questions

00:42:58.450 --> 00:42:59.830
that come out of
protein folding,

00:42:59.830 --> 00:43:01.770
and we will talk
about the ones I know.

00:43:01.770 --> 00:43:03.290
I'd love to find more.

00:43:03.290 --> 00:43:05.050
But the ones I know
I will talk about.

00:43:05.050 --> 00:43:05.960
And that's linkages.

00:43:05.960 --> 00:43:08.910
Let me move on to paper,
unless there are questions.

00:43:11.625 --> 00:43:13.080
All right.

00:43:13.080 --> 00:43:15.560
Let's go over here.

00:43:15.560 --> 00:43:19.510
So we've seen some universality
results, some hardness results.

00:43:19.510 --> 00:43:20.892
I didn't go into them.

00:43:20.892 --> 00:43:21.850
Folding these linkages.

00:43:26.630 --> 00:43:27.745
Let's do that for paper.

00:43:36.170 --> 00:43:37.670
I think first up I
have foldability.

00:43:40.435 --> 00:43:41.810
And then we'll
talk about design.

00:43:44.720 --> 00:43:48.960
So there are lots of
questions in both.

00:43:48.960 --> 00:43:51.340
But for foldability, the
sort of first question people

00:43:51.340 --> 00:43:54.740
like to ask is, which
crease patterns fold flat?

00:44:04.620 --> 00:44:07.390
So a crease pattern
is just a graph

00:44:07.390 --> 00:44:08.490
drawn on a piece of paper.

00:44:08.490 --> 00:44:11.220
So you have some
collection of lines,

00:44:11.220 --> 00:44:14.240
and I think that will fold flat.

00:44:14.240 --> 00:44:16.740
But I'm not going to try to
draw something more complicated,

00:44:16.740 --> 00:44:18.320
but you could imagine doing it.

00:44:22.220 --> 00:44:22.840
I don't know.

00:44:22.840 --> 00:44:25.000
That probably is
not flat foldable.

00:44:25.000 --> 00:44:25.795
It might be.

00:44:25.795 --> 00:44:28.167
It's close.

00:44:28.167 --> 00:44:29.500
But that's the sort of question.

00:44:29.500 --> 00:44:31.380
If you take some
origami and unfold it,

00:44:31.380 --> 00:44:33.710
what kind of
patterns do you get?

00:44:33.710 --> 00:44:35.465
Some flat origami,
something that

00:44:35.465 --> 00:44:37.230
folds into two
dimensions in the end.

00:44:37.230 --> 00:44:39.360
There's some really
nice structure here.

00:44:39.360 --> 00:44:42.410
If I drew it right, this
angle plus this angle

00:44:42.410 --> 00:44:45.026
should equal 180
degrees, for example.

00:44:45.026 --> 00:44:46.150
And that's true everywhere.

00:44:46.150 --> 00:44:48.510
And there's all sorts
of cool properties.

00:44:48.510 --> 00:44:52.050
But unfortunately,
this is really hard.

00:44:52.050 --> 00:44:54.862
This is NP hard problem.

00:44:54.862 --> 00:44:57.670
You've probably at least
heard of P versus NP.

00:44:57.670 --> 00:44:59.510
Again, I'll define it later.

00:44:59.510 --> 00:45:02.350
But it means probably
there is no good algorithm

00:45:02.350 --> 00:45:03.520
to solve this problem.

00:45:03.520 --> 00:45:05.530
It's really hard
to figure out which

00:45:05.530 --> 00:45:07.025
crease patterns fold flat.

00:45:07.025 --> 00:45:10.190
It's kind of annoying.

00:45:10.190 --> 00:45:12.570
One good news is
that if you just

00:45:12.570 --> 00:45:15.400
have an example like the
original thing I drew,

00:45:15.400 --> 00:45:19.940
which is like this-- so it
has one vertex and a bunch

00:45:19.940 --> 00:45:23.830
of creases emanating out,
that picture we understand.

00:45:23.830 --> 00:45:29.700
So it's easy for
a single vertex.

00:45:29.700 --> 00:45:33.610
That may seem kind of trivial,
but it's actually really useful

00:45:33.610 --> 00:45:36.540
because it lets you understand
the local behavior around one

00:45:36.540 --> 00:45:37.052
vertex.

00:45:37.052 --> 00:45:38.510
If you check that
for every vertex,

00:45:38.510 --> 00:45:40.801
you don't know that the whole
thing folds, but at least

00:45:40.801 --> 00:45:43.280
you know it mostly
folds, at least locally.

00:45:43.280 --> 00:45:46.770
And you can't tell whether
it globally folds correctly,

00:45:46.770 --> 00:45:48.890
because that's NP hard.

00:45:48.890 --> 00:45:52.174
There are so many questions here
like, what about two vertices?

00:45:52.174 --> 00:45:53.090
No one's studied that.

00:45:53.090 --> 00:45:57.055
I think it's polynomial,
but well, it's

00:45:57.055 --> 00:46:01.120
certainly polynomial,
but I think

00:46:01.120 --> 00:46:02.520
you could do it in linear time.

00:46:02.520 --> 00:46:04.103
Anyway, there's lots
of open questions

00:46:04.103 --> 00:46:07.070
there I haven't
even listed here.

00:46:07.070 --> 00:46:10.340
One of the bigger open
questions is a particular kind

00:46:10.340 --> 00:46:14.430
of crease pattern, which you may
have encountered in real life

00:46:14.430 --> 00:46:16.792
refolding your roadmaps.

00:46:16.792 --> 00:46:18.880
The saying goes, the
easiest way to refold

00:46:18.880 --> 00:46:21.190
your road map is differently.

00:46:21.190 --> 00:46:26.670
So suppose you have your road
map, and each of these creases

00:46:26.670 --> 00:46:28.229
is marked.

00:46:28.229 --> 00:46:30.020
I'm not going to mark
all them because it's

00:46:30.020 --> 00:46:31.970
a little messy with
black and white chalk.

00:46:31.970 --> 00:46:34.170
But some of them are marked
mountain, some of them

00:46:34.170 --> 00:46:39.830
are marked valley, meaning
you fold-- this is valley.

00:46:39.830 --> 00:46:41.020
This is mountain.

00:46:41.020 --> 00:46:43.896
So they just have a relative
orientation to each other.

00:46:43.896 --> 00:46:45.520
Suppose you look
carefully at your map.

00:46:45.520 --> 00:46:48.230
You can recover which
way it was folded last,

00:46:48.230 --> 00:46:49.320
hopefully correctly.

00:46:49.320 --> 00:46:52.730
And then you want to find,
does that thing fold flat?

00:46:52.730 --> 00:46:54.770
Sometimes it does,
sometimes it doesn't.

00:46:54.770 --> 00:46:58.600
For two by n maps, we don't
know whether we can even

00:46:58.600 --> 00:47:00.430
detect this with an
efficient algorithm.

00:47:00.430 --> 00:47:04.329
Can I decide whether
this thing folds flat

00:47:04.329 --> 00:47:06.120
using those creases
and those orientations?

00:47:06.120 --> 00:47:07.210
For two by n, it's open.

00:47:07.210 --> 00:47:09.210
For one by n, it's easy.

00:47:09.210 --> 00:47:10.870
Obviously for bigger,
it's also open.

00:47:10.870 --> 00:47:12.400
Two by n is the smallest.

00:47:12.400 --> 00:47:14.410
This is a really
annoying problem.

00:47:14.410 --> 00:47:15.610
Worked on it many times.

00:47:15.610 --> 00:47:18.100
It's very difficult.

00:47:18.100 --> 00:47:21.660
All right, so that's a quick
overview of foldability.

00:47:21.660 --> 00:47:24.400
It's hard, but there are a lot
of interesting special cases

00:47:24.400 --> 00:47:26.750
where we might be
able to solve it.

00:47:31.210 --> 00:47:34.300
Let's move on to design,
which is probably

00:47:34.300 --> 00:47:38.330
where most of the action
is in the origami world,

00:47:38.330 --> 00:47:39.760
in the mathematical
origami world.

00:47:46.990 --> 00:47:52.770
So and there are
tons of results,

00:47:52.770 --> 00:47:56.190
and I had a much
longer list initially,

00:47:56.190 --> 00:47:59.245
but I trimmed just for
brevity down to a few things.

00:48:05.935 --> 00:48:08.130
The central question--
at least it's

00:48:08.130 --> 00:48:13.240
been considered so far-- in
computational origami design

00:48:13.240 --> 00:48:14.485
is, what shapes can you make?

00:48:14.485 --> 00:48:16.610
You could imagine other
properties than just shape,

00:48:16.610 --> 00:48:18.750
if you want stability
in your folding,

00:48:18.750 --> 00:48:21.630
lots of practical things--
not much thickness,

00:48:21.630 --> 00:48:23.600
not too many creases, whatever.

00:48:23.600 --> 00:48:27.810
But shape has sort of
been the fun centerpiece.

00:48:27.810 --> 00:48:34.050
And there's an early result
that says universally,

00:48:34.050 --> 00:48:35.760
you can make anything you want.

00:48:35.760 --> 00:48:37.530
And in the
mathematical world, you

00:48:37.530 --> 00:48:39.240
might try to make a polygon.

00:48:39.240 --> 00:48:42.250
Try to make a
silhouette or something.

00:48:42.250 --> 00:48:46.630
You could make a
polyhedron in 3D.

00:48:46.630 --> 00:48:50.860
Maybe you want to wrap a box,
so you want to fold a box,

00:48:50.860 --> 00:48:54.480
or you want to fold a
3D model of a dragon.

00:48:54.480 --> 00:48:56.390
That's all possible.

00:48:56.390 --> 00:48:59.810
And for fun, you can even
make any two-color pattern

00:48:59.810 --> 00:49:02.590
on either of those things.

00:49:02.590 --> 00:49:06.440
So I have a tiny example
here, which is-- yeah,

00:49:06.440 --> 00:49:10.170
it's still alive-- a four
by four checkerboard.

00:49:10.170 --> 00:49:13.680
And it's made from
one square paper.

00:49:17.030 --> 00:49:20.600
It's white on one side
and red on the other.

00:49:20.600 --> 00:49:23.479
So you get some idea of
making two-color patterns.

00:49:23.479 --> 00:49:24.770
This one's pretty easy to fold.

00:49:24.770 --> 00:49:28.660
It even folds itself almost.

00:49:28.660 --> 00:49:29.330
That's great.

00:49:29.330 --> 00:49:32.012
Usually when I give a
class like to high school

00:49:32.012 --> 00:49:34.470
students or something, I say,
could you refold this for me?

00:49:34.470 --> 00:49:36.180
And they're like, oh, no!

00:49:36.180 --> 00:49:37.580
But it actually does it itself.

00:49:37.580 --> 00:49:39.110
It's great.

00:49:39.110 --> 00:49:41.200
Like magic.

00:49:41.200 --> 00:49:42.500
So you could try that at home.

00:49:42.500 --> 00:49:43.580
Just take a square paper.

00:49:43.580 --> 00:49:44.080
It works.

00:49:48.740 --> 00:49:51.140
So this is great.

00:49:51.140 --> 00:49:52.220
Super general.

00:49:52.220 --> 00:49:54.810
This is something actually
my dad and I proved

00:49:54.810 --> 00:49:57.970
with Joe Mitchell
back in '99, I think.

00:49:57.970 --> 00:49:59.870
I don't remember exactly.

00:49:59.870 --> 00:50:03.460
So beginning of modern
computational origami design.

00:50:03.460 --> 00:50:05.820
But the way that we do
this, while algorithmic,

00:50:05.820 --> 00:50:07.720
is completely impractical.

00:50:07.720 --> 00:50:09.705
We'd never want to
use the foldings that

00:50:09.705 --> 00:50:12.520
are designed by this algorithm,
unless you're starting out

00:50:12.520 --> 00:50:14.370
with a big ticker tape of paper.

00:50:14.370 --> 00:50:15.629
Then it's a great method.

00:50:15.629 --> 00:50:18.170
But if you're starting with a
square, the first thing it does

00:50:18.170 --> 00:50:20.500
is fold it down to a
tiny little narrow strip,

00:50:20.500 --> 00:50:21.920
and then wraps the shape.

00:50:21.920 --> 00:50:23.170
And we'll see how that's done.

00:50:23.170 --> 00:50:24.878
It's interesting to
do it mathematically,

00:50:24.878 --> 00:50:27.330
but it's not how you want
to do it practically.

00:50:27.330 --> 00:50:30.610
Good news is-- that used to be
sort of the end of the story.

00:50:30.610 --> 00:50:34.320
But now you can even do
it pretty practically--

00:50:34.320 --> 00:50:40.730
practically is a
relative term-- using

00:50:40.730 --> 00:50:43.510
something called Origamizer.

00:50:43.510 --> 00:50:47.389
And if you've seen the poster
of this class, you've seen--

00:50:47.389 --> 00:50:49.180
and if I'm lucky, it's
even the next slide,

00:50:49.180 --> 00:50:54.080
yes it is-- this rabbit--
bunny, I should say.

00:50:54.080 --> 00:50:55.250
This is the Stanford bunny.

00:50:55.250 --> 00:50:57.660
The original Stanford
bunny is in the top right.

00:50:57.660 --> 00:50:59.187
That's a classic model.

00:50:59.187 --> 00:51:01.770
Everybody in computer graphics
does something with that bunny.

00:51:01.770 --> 00:51:02.960
It has a zillion triangles.

00:51:02.960 --> 00:51:04.646
I don't know offhand how many.

00:51:04.646 --> 00:51:06.020
It's been simplified
here to make

00:51:06.020 --> 00:51:11.296
it feasible to fold to
this mesh of triangles.

00:51:11.296 --> 00:51:13.670
So the input to the algorithm
was this mesh of triangles.

00:51:13.670 --> 00:51:15.970
The output of the algorithm--
and it's a real program,

00:51:15.970 --> 00:51:18.500
you can go and download
it right now for free--

00:51:18.500 --> 00:51:20.189
is this crease pattern.

00:51:20.189 --> 00:51:21.980
Now it doesn't look
like a square or paper,

00:51:21.980 --> 00:51:23.646
but if you start with
a square of paper,

00:51:23.646 --> 00:51:25.540
you just fold away
the excess stuff.

00:51:25.540 --> 00:51:27.690
You'll get to a piece
of paper like this.

00:51:27.690 --> 00:51:31.950
And then you just fold along
all those little creases there,

00:51:31.950 --> 00:51:34.240
and eight hours later
you have this bunny.

00:51:34.240 --> 00:51:36.630
This is a real photograph
of a folded bunny

00:51:36.630 --> 00:51:38.970
by Tomohiro Tachi, who
designed this thing.

00:51:38.970 --> 00:51:42.920
He came up with the original
algorithm and computer program.

00:51:42.920 --> 00:51:44.500
In the last few
years, we've been

00:51:44.500 --> 00:51:46.700
proving this algorithm
actually always works.

00:51:46.700 --> 00:51:48.908
We still don't know how to
prove that it's efficient,

00:51:48.908 --> 00:51:51.350
or even what
efficient should mean.

00:51:51.350 --> 00:51:53.780
But in practice it's super good.

00:51:53.780 --> 00:51:55.540
If you look closely,
the white parts

00:51:55.540 --> 00:51:56.660
are the parts of
the paper that you

00:51:56.660 --> 00:51:58.076
need to use in
order to make this.

00:51:58.076 --> 00:51:59.740
They are the triangles
of the surface.

00:51:59.740 --> 00:52:01.560
These grey regions
are the excess.

00:52:01.560 --> 00:52:02.850
And it's pretty small.

00:52:02.850 --> 00:52:06.440
I don't know, maybe 50% of the
area is used in a useful way

00:52:06.440 --> 00:52:08.250
here, which is a lot.

00:52:08.250 --> 00:52:11.330
Whereas this method
over here would use

00:52:11.330 --> 00:52:14.650
like a one millionth
of a percent

00:52:14.650 --> 00:52:15.740
of the paper or something.

00:52:15.740 --> 00:52:16.845
A very tiny amount.

00:52:16.845 --> 00:52:18.262
The Origamizer is
super efficient.

00:52:18.262 --> 00:52:20.470
We don't know how to prove
that it's super efficient,

00:52:20.470 --> 00:52:22.260
but at least we can
prove that it works.

00:52:22.260 --> 00:52:25.380
It will make any 3D
polyhedron you want.

00:52:25.380 --> 00:52:28.420
And in practice, it
seems really good at it.

00:52:28.420 --> 00:52:32.710
Now it's a very different
style from typical origami,

00:52:32.710 --> 00:52:35.770
so this has not yet hit the
sculpture world, let's say.

00:52:35.770 --> 00:52:38.595
But I think it opens the door
to a lot of new possibilities.

00:52:41.320 --> 00:52:44.880
Traditionally
though-- traditionally

00:52:44.880 --> 00:52:48.020
before this Origamizer
or in practice

00:52:48.020 --> 00:52:50.970
today, a much more
commonly used approach

00:52:50.970 --> 00:52:54.230
to computational
origami design is

00:52:54.230 --> 00:52:56.882
something called
the tree method.

00:52:56.882 --> 00:52:58.590
I'm just going to call
it TreeMaker here.

00:52:58.590 --> 00:53:00.256
TreeMaker's the name
of the program that

00:53:00.256 --> 00:53:04.700
implements the tree method,
and it's made by Robert Lang.

00:53:04.700 --> 00:53:13.164
And this is sort of making
stick figures, which

00:53:13.164 --> 00:53:14.080
sounds a little silly.

00:53:14.080 --> 00:53:19.250
But TreeMaker or the
tree method is powerful

00:53:19.250 --> 00:53:25.500
for if I want to make what's
called an origami base, that

00:53:25.500 --> 00:53:31.229
has a lot of limbs in different
places of different lengths--

00:53:31.229 --> 00:53:33.020
maybe you want to make
something like that.

00:53:33.020 --> 00:53:35.960
I don't know.

00:53:35.960 --> 00:53:38.380
The typical origami base might
look something like this.

00:53:38.380 --> 00:53:39.720
Maybe you want to make a lizard.

00:53:39.720 --> 00:53:43.210
It has a head, some forearms,
some really big hind legs,

00:53:43.210 --> 00:53:46.090
a little tail, and some body.

00:53:46.090 --> 00:53:52.270
You can abstract
this into a tree

00:53:52.270 --> 00:53:54.590
and then say, well can
I fold a piece of paper

00:53:54.590 --> 00:53:56.330
into some shape
whose projection is

00:53:56.330 --> 00:53:59.480
that tree, with all
the right edge links?

00:53:59.480 --> 00:54:00.550
And the answer is yes.

00:54:00.550 --> 00:54:02.470
I mean, you can make
anything, of course.

00:54:02.470 --> 00:54:06.420
But what TreeMaker tries to do
is find the most efficient way

00:54:06.420 --> 00:54:08.002
to make that thing.

00:54:08.002 --> 00:54:09.960
Unfortunately, finding
the most efficient way--

00:54:09.960 --> 00:54:13.100
like the smallest square
paper, so the most paper

00:54:13.100 --> 00:54:16.300
usage possible to make
something with that projection--

00:54:16.300 --> 00:54:18.620
finding that is NP complete.

00:54:18.620 --> 00:54:21.710
We just proved that this
year with Robert Lang

00:54:21.710 --> 00:54:23.420
and Sandor Fekete.

00:54:23.420 --> 00:54:26.250
But there's a theory.

00:54:26.250 --> 00:54:28.184
There's a hard problem
you have to solve,

00:54:28.184 --> 00:54:29.600
something related
to disk packing.

00:54:29.600 --> 00:54:31.650
If you solve it, you
find the best way.

00:54:31.650 --> 00:54:34.460
In practice, use some heuristics
which are really good.

00:54:34.460 --> 00:54:36.682
And usually you
find the optimal way

00:54:36.682 --> 00:54:37.890
to make a given stick figure.

00:54:37.890 --> 00:54:41.520
But for super complicated
things, it may not be perfect.

00:54:41.520 --> 00:54:45.710
Now a lot of people use this
method for designing origami.

00:54:45.710 --> 00:54:50.950
I have a slide of cool
origami, just to show you.

00:54:50.950 --> 00:54:52.750
Not all of this uses
the tree method.

00:54:56.360 --> 00:54:58.360
These three designs
by Brian Chan,

00:54:58.360 --> 00:55:02.430
who was an MIT grad student,
graduated last year--

00:55:02.430 --> 00:55:05.440
these are all designed
partly using the tree method.

00:55:05.440 --> 00:55:07.400
I'm sure they're more
complicated than that.

00:55:07.400 --> 00:55:10.860
But to get the initial structure
of the arms in the right place,

00:55:10.860 --> 00:55:13.306
the legs in the right place,
the head, body segments,

00:55:13.306 --> 00:55:14.680
fingers-- some of
these guys have

00:55:14.680 --> 00:55:20.020
fingers-- all that stuff
is done using tree theory,

00:55:20.020 --> 00:55:22.790
almost certainly not with
TreeMaker, the program.

00:55:22.790 --> 00:55:25.960
Most origami designers do it by
hand, in their head, or drawing

00:55:25.960 --> 00:55:29.260
pictures with a drawing
program, to design out the base.

00:55:29.260 --> 00:55:31.410
Then they fold by
hand everything.

00:55:31.410 --> 00:55:35.070
But still, the math is in there.

00:55:35.070 --> 00:55:38.120
These guys are not yet
mathematically analyzed,

00:55:38.120 --> 00:55:38.730
let's say.

00:55:38.730 --> 00:55:45.500
They're experiments by
[? Garn ?] and Joel Cooper.

00:55:45.500 --> 00:55:49.742
[? Garn ?] is a computer
scientist slash mathematician,

00:55:49.742 --> 00:55:51.950
but he doesn't understand
these yet, and sort of he's

00:55:51.950 --> 00:55:52.970
trying to figure it out.

00:55:52.970 --> 00:55:54.860
So there's a lot of
interesting questions,

00:55:54.860 --> 00:55:59.430
and you get some really
cool sculpture as a result,

00:55:59.430 --> 00:56:01.360
out of this world.

00:56:01.360 --> 00:56:04.380
So this is something
we've also been working on

00:56:04.380 --> 00:56:07.790
with my dad and Robert Lang,
proving that this actually

00:56:07.790 --> 00:56:08.770
works.

00:56:08.770 --> 00:56:10.230
It's been around
for a long time,

00:56:10.230 --> 00:56:12.941
but it turns out to
be really complicated

00:56:12.941 --> 00:56:14.190
to prove that it always works.

00:56:14.190 --> 00:56:17.190
But it looks like it
does, so stay tuned.

00:56:17.190 --> 00:56:19.716
Some time we will
publish that paper.

00:56:19.716 --> 00:56:21.860
It's still in process.

00:56:21.860 --> 00:56:23.410
All right.

00:56:23.410 --> 00:56:25.717
I have some more fun things.

00:56:25.717 --> 00:56:27.050
This is just a random selection.

00:56:27.050 --> 00:56:29.990
There's a ton of work here.

00:56:29.990 --> 00:56:32.830
One of my favorites-- this was
my first result in this field--

00:56:32.830 --> 00:56:35.880
is the folding cut
problem, theorem, whatever.

00:56:35.880 --> 00:56:42.490
So you start with a rectangle
of paper, and you fold it flat.

00:56:42.490 --> 00:56:44.060
Now you take your
scissors-- I know

00:56:44.060 --> 00:56:47.130
this is blasphemy
for most origamists.

00:56:47.130 --> 00:56:48.840
But I'm not going to
make a lot of cuts.

00:56:48.840 --> 00:56:52.410
I'm just going to make
one complete straight cut.

00:56:52.410 --> 00:56:55.920
I get two pieces in this case,
and then I unfold the pieces

00:56:55.920 --> 00:56:59.120
and see what I get.

00:56:59.120 --> 00:57:02.540
In this case I
get a little swan.

00:57:02.540 --> 00:57:05.320
And the general theorem is you
can make any polygon you want.

00:57:05.320 --> 00:57:07.310
In fact, you can
make one cut and make

00:57:07.310 --> 00:57:09.360
any collection of
polygons you want.

00:57:09.360 --> 00:57:11.740
So like on my website,
you can make the MIT logo

00:57:11.740 --> 00:57:15.140
with all the little rectangles
with one complete straight cut.

00:57:15.140 --> 00:57:17.430
And the outside
shape will have holes

00:57:17.430 --> 00:57:19.820
exactly where you want them.

00:57:19.820 --> 00:57:21.520
And you can download
this, too, if you

00:57:21.520 --> 00:57:23.550
want to impress
all your friends,

00:57:23.550 --> 00:57:26.630
especially recommended
for, like, kids.

00:57:26.630 --> 00:57:27.877
It's a good magic trick.

00:57:27.877 --> 00:57:29.710
In fact, Harry Houdini
used to do this trick

00:57:29.710 --> 00:57:32.110
in the '20s before he
was an escape artist.

00:57:32.110 --> 00:57:33.580
He did general magic.

00:57:33.580 --> 00:57:34.240
Not this trick.

00:57:34.240 --> 00:57:35.770
He made stars.

00:57:35.770 --> 00:57:39.037
And we thought about it, and we
proved you could make anything.

00:57:39.037 --> 00:57:39.620
So that's fun.

00:57:39.620 --> 00:57:41.320
Another universality result.

00:57:41.320 --> 00:57:42.394
It's what got us started.

00:57:42.394 --> 00:57:44.310
And it relates to things
like the tree theory,

00:57:44.310 --> 00:57:47.960
in fact, because what
you're really solving here

00:57:47.960 --> 00:57:52.120
is, how do I take a polygon
and-- if I fold this guy back

00:57:52.120 --> 00:57:56.460
up-- how do I make all
the edges of that polygon

00:57:56.460 --> 00:57:58.680
lie along-- this
guy's not very happy,

00:57:58.680 --> 00:58:02.270
get rid of that-- lie
along a straight line.

00:58:02.270 --> 00:58:04.729
That actually turns out to be
important for origami design.

00:58:04.729 --> 00:58:06.353
A lot of these things--
an Origamizer--

00:58:06.353 --> 00:58:07.530
it's all over the place.

00:58:07.530 --> 00:58:11.490
And so this structure
is helpful for solving

00:58:11.490 --> 00:58:15.812
sort of pure origami
problems, not with cutting.

00:58:15.812 --> 00:58:16.770
So what else do I have?

00:58:16.770 --> 00:58:20.060
Curved creases.

00:58:20.060 --> 00:58:23.660
You may not know this,
because most origami

00:58:23.660 --> 00:58:24.940
is straight creases.

00:58:24.940 --> 00:58:27.540
But if you take
a piece of paper,

00:58:27.540 --> 00:58:30.840
you can put a curved
crease into it.

00:58:30.840 --> 00:58:34.530
It's a little hard to do
by hand, but there you go.

00:58:34.530 --> 00:58:37.010
Curved crease.

00:58:37.010 --> 00:58:38.290
Is that allowed?

00:58:38.290 --> 00:58:40.980
What can you make like that?

00:58:40.980 --> 00:58:42.190
It's not too well studied.

00:58:42.190 --> 00:58:44.700
Jeannine Mosely has done some
of the curved crease stuff.

00:58:44.700 --> 00:58:46.760
Early stuff was done
by David Huffman,

00:58:46.760 --> 00:58:50.260
you may know from Huffman codes
in every cell phone, whatever.

00:58:50.260 --> 00:58:53.800
And by Ron Resch.

00:58:53.800 --> 00:58:55.200
That's wrong queuing.

00:58:55.200 --> 00:58:57.067
All right, I'm going
to show that later.

00:58:57.067 --> 00:58:58.900
This are some of the
things that we've made,

00:58:58.900 --> 00:59:02.080
this is my dad and I,
out of curved creases.

00:59:02.080 --> 00:59:06.290
This is kind of a crazy-- it's
like a circular piece of paper,

00:59:06.290 --> 00:59:08.990
but it goes around
twice like a ramp.

00:59:08.990 --> 00:59:11.830
So you make two circles
and then join the ends,

00:59:11.830 --> 00:59:13.780
and you pleat along
concentric circles,

00:59:13.780 --> 00:59:15.460
alternating mountain and valley.

00:59:15.460 --> 00:59:17.442
And you change a few
different parameters,

00:59:17.442 --> 00:59:19.150
and you get these
three different shapes.

00:59:19.150 --> 00:59:22.610
These are in the permanent
collection at MOMA in New York.

00:59:22.610 --> 00:59:26.580
So you can make some really
cool sculpture out of this.

00:59:26.580 --> 00:59:28.160
This is a more
recent piece we did.

00:59:28.160 --> 00:59:34.066
And this is taking just a
regular circular band of paper

00:59:34.066 --> 00:59:35.440
with concentric
circular creases,

00:59:35.440 --> 00:59:41.030
and then taking three of them
and joining them together

00:59:41.030 --> 00:59:42.920
at a few points.

00:59:42.920 --> 00:59:44.900
And then you get
some cool structures.

00:59:44.900 --> 00:59:47.790
These are interesting to us
especially because the paper

00:59:47.790 --> 00:59:49.360
actually does fold itself.

00:59:49.360 --> 00:59:51.020
You put in these
circular creases.

00:59:51.020 --> 00:59:52.900
You just squeeze
a little, and it

00:59:52.900 --> 00:59:55.325
will make these
shapes automatically.

00:59:55.325 --> 00:59:57.730
It's called
self-folding origami.

00:59:57.730 --> 00:59:59.640
And in that spirit,
I will show you

00:59:59.640 --> 01:00:01.980
a different kind of
self-folding origami.

01:00:01.980 --> 01:00:05.280
I think I need to
click this button.

01:00:05.280 --> 01:00:11.180
Which is approach to making
paper that folds itself.

01:00:11.180 --> 01:00:15.830
This is a self-folding sheet.

01:00:15.830 --> 01:00:18.190
It's made of rigid panels
connected by little rubber

01:00:18.190 --> 01:00:22.540
hinges, and there's little
muscles, you could say,

01:00:22.540 --> 01:00:25.680
that are folding
those creases shut.

01:00:25.680 --> 01:00:28.290
By turning on some
electrical signal,

01:00:28.290 --> 01:00:29.970
that thing folds
itself into a boat.

01:00:29.970 --> 01:00:33.890
That same sheet, you can send
it a different electrical signal

01:00:33.890 --> 01:00:36.950
and it will just fold
along these two creases.

01:00:36.950 --> 01:00:39.660
And then there's little
magnets to hold it into place,

01:00:39.660 --> 01:00:41.520
so you can turn off
that electricity now.

01:00:41.520 --> 01:00:42.450
No power.

01:00:42.450 --> 01:00:45.140
Then you send it a third signal,
and it will fold those three

01:00:45.140 --> 01:00:49.140
creases, and you get
a paper airplane.

01:00:49.140 --> 01:00:52.070
No origamist required.

01:00:52.070 --> 01:00:57.089
So the idea here, this is the
programmable matter vision,

01:00:57.089 --> 01:00:59.130
where you could download
hardware in the same way

01:00:59.130 --> 01:01:00.370
you could download software.

01:01:00.370 --> 01:01:05.000
You can make one sheet that
has lots of panels in it,

01:01:05.000 --> 01:01:07.139
enough creases to make
anything you want.

01:01:07.139 --> 01:01:09.430
And then you just push a
button and some of the creases

01:01:09.430 --> 01:01:09.910
turn on.

01:01:09.910 --> 01:01:11.640
Then push a button and
some other creases turn on,

01:01:11.640 --> 01:01:13.640
and it folds into some
complicated origami

01:01:13.640 --> 01:01:15.020
all by itself.

01:01:15.020 --> 01:01:16.950
You could imagine making
this building scale.

01:01:16.950 --> 01:01:19.780
You could imagine making it
nano scale, some scale where

01:01:19.780 --> 01:01:22.280
an origamist can't
do it, or you don't

01:01:22.280 --> 01:01:24.080
have an origamist
to do it for you.

01:01:24.080 --> 01:01:27.420
This would be the
self-refolding, transforming

01:01:27.420 --> 01:01:29.630
robot thing.

01:01:29.630 --> 01:01:32.300
To do it, though, we
needed to prove new theory.

01:01:32.300 --> 01:01:36.965
And this is the world of, call
it, universal hinge patterns.

01:01:42.950 --> 01:01:46.125
And this is the topic of a
master's thesis just finished

01:01:46.125 --> 01:01:47.750
last week, I think,
by [? Viva Vadia ?]

01:01:47.750 --> 01:01:51.440
where-- and maybe
we'll get him to talk

01:01:51.440 --> 01:01:54.560
about it at some point--
it's one crease pattern.

01:01:54.560 --> 01:01:58.310
In that case we were using
a crease pattern called

01:01:58.310 --> 01:02:03.080
box pleating, where
you take a square grid,

01:02:03.080 --> 01:02:05.985
and then you put alternating
diagonals in those squares.

01:02:12.710 --> 01:02:14.730
Get my alternation going here.

01:02:14.730 --> 01:02:16.609
So that's the so-called
box pleating pattern.

01:02:16.609 --> 01:02:18.900
We proved that that pattern,
if you make it big enough,

01:02:18.900 --> 01:02:23.790
can fold any 3D shape that's
made out of little cubes.

01:02:23.790 --> 01:02:28.720
I think, yeah, so in fact if
you take a sort of n by n sheet,

01:02:28.720 --> 01:02:30.890
you could make about n cubes.

01:02:30.890 --> 01:02:33.704
And in the worst case,
that's the best you can do.

01:02:33.704 --> 01:02:35.120
So that's cool,
because that tells

01:02:35.120 --> 01:02:36.670
you here's one robot you build.

01:02:36.670 --> 01:02:39.960
You just make this sheet
with those creases,

01:02:39.960 --> 01:02:42.660
those rubber creases with
muscles on each of those edges.

01:02:42.660 --> 01:02:45.920
And if you can turn those
edges on and off programmably,

01:02:45.920 --> 01:02:49.050
you could make anything you
want up to some resolution.

01:02:49.050 --> 01:02:51.720
If you want to make a
bunny, you can sort of

01:02:51.720 --> 01:02:55.380
build that bunny our of
little cubes in simulation,

01:02:55.380 --> 01:02:59.672
and then fold that cubefied,
voxillized form of the bunny.

01:02:59.672 --> 01:03:01.380
And then you want to
make something else,

01:03:01.380 --> 01:03:04.165
you unfold it and refold
it all automatically.

01:03:07.472 --> 01:03:08.918
AUDIENCE: This is
like [INAUDIBLE]

01:03:08.918 --> 01:03:11.330
no width of the material?

01:03:11.330 --> 01:03:14.590
PROFESSOR: Yeah, there's a
lot of open questions here.

01:03:14.590 --> 01:03:16.700
This result assumes 0 thickness.

01:03:16.700 --> 01:03:18.460
In fact, every result
I've talked about

01:03:18.460 --> 01:03:19.294
assumes 0 thickness.

01:03:19.294 --> 01:03:21.376
I think there's one theorem
in the literature that

01:03:21.376 --> 01:03:22.650
looks at thickness of paper.

01:03:22.650 --> 01:03:25.080
That's a great open
question, and you really

01:03:25.080 --> 01:03:27.290
see it in something
like that video.

01:03:27.290 --> 01:03:31.650
That just appeared at PNAS,
and the video's online.

01:03:31.650 --> 01:03:33.770
Because in the
airplane, you have

01:03:33.770 --> 01:03:35.760
to fold through multiple layers.

01:03:35.760 --> 01:03:36.527
And that's tricky.

01:03:36.527 --> 01:03:39.110
We get around that right now by
having the creases be a little

01:03:39.110 --> 01:03:40.810
bit stretchy, some rubber.

01:03:40.810 --> 01:03:44.630
But there's a limit, and it's
related to the thickness.

01:03:44.630 --> 01:03:48.090
So yes, some complicated shapes
are not going to work this way.

01:03:48.090 --> 01:03:50.310
I think one thing that
would work really well-- we

01:03:50.310 --> 01:03:53.840
have another result with Jason
Ku, which is folding a maze.

01:03:53.840 --> 01:03:58.080
This is sort of like folding
a shallow terrain in this way,

01:03:58.080 --> 01:04:01.210
so you could make a rat maze
out of a square-- just tracks

01:04:01.210 --> 01:04:03.420
by 50%, and then
you have arbitrary

01:04:03.420 --> 01:04:05.640
undulation in the middle,
which is pretty cool.

01:04:05.640 --> 01:04:07.723
So some of these things
are going to be practical.

01:04:07.723 --> 01:04:08.360
Some are not.

01:04:08.360 --> 01:04:12.150
So there's still interesting
theory questions to ask about.

01:04:12.150 --> 01:04:14.840
I think thickness is
a really good one.

01:04:14.840 --> 01:04:16.890
Other questions?

01:04:16.890 --> 01:04:17.390
Yeah.

01:04:20.255 --> 01:04:22.880
AUDIENCE: [INAUDIBLE] I thought
I heard something about how you

01:04:22.880 --> 01:04:24.802
can't fold a sheet of
paper more than like--

01:04:24.802 --> 01:04:26.510
PROFESSOR: Yeah, so
that's the one thing.

01:04:26.510 --> 01:04:31.020
The question is, you can't
fold a piece of paper in half 8

01:04:31.020 --> 01:04:35.600
times, 7 times, whatever the
number is everyone quotes.

01:04:35.600 --> 01:04:38.960
The answer was solved by
someone who was a high school

01:04:38.960 --> 01:04:42.140
student a few years ago.

01:04:42.140 --> 01:04:43.660
What's her name?

01:04:43.660 --> 01:04:45.440
Britney Gallivan.

01:04:45.440 --> 01:04:48.860
And so this is the one paper
that's about thickness,

01:04:48.860 --> 01:04:54.160
and she analyzed-- the issue
is when you fold-- if you have

01:04:54.160 --> 01:04:59.250
a folding that is
1,000 layers thick,

01:04:59.250 --> 01:05:01.110
and you want to
fold in the middle,

01:05:01.110 --> 01:05:05.160
you can't just like cut here
and move it over here and then

01:05:05.160 --> 01:05:06.450
be folded.

01:05:06.450 --> 01:05:09.850
Paper has to actually
turn that corner.

01:05:09.850 --> 01:05:14.900
And the thicker that thing
is, the more length of paper

01:05:14.900 --> 01:05:17.306
it takes to turn that corner.

01:05:17.306 --> 01:05:18.680
And you can compute
how much that

01:05:18.680 --> 01:05:22.020
is if you assume sort of
a circular trajectory,

01:05:22.020 --> 01:05:23.400
and it matches reality.

01:05:23.400 --> 01:05:27.080
So she computed how thin does
a piece of paper need to be,

01:05:27.080 --> 01:05:29.060
or how long does
a piece of paper

01:05:29.060 --> 01:05:31.230
have to be-- it's
that ratio-- in order

01:05:31.230 --> 01:05:33.152
to fold it in half 12 times.

01:05:33.152 --> 01:05:35.110
So she took a piece of
paper that was, I think,

01:05:35.110 --> 01:05:38.717
three-quarters of a mile long,
and folded it in half 12 times.

01:05:38.717 --> 01:05:40.800
And it's like this big
monstrosity when it's done.

01:05:40.800 --> 01:05:43.020
And it follows the
theory exactly.

01:05:43.020 --> 01:05:44.870
So that seems to
be the right model,

01:05:44.870 --> 01:05:46.590
but that's the only
paper that analyzes

01:05:46.590 --> 01:05:48.631
paper folding in that
model, because it's so much

01:05:48.631 --> 01:05:50.300
easier to think
about zero thickness.

01:05:50.300 --> 01:05:51.550
But that is what we should do.

01:05:51.550 --> 01:05:53.890
So that particular
question we understand,

01:05:53.890 --> 01:05:56.250
but everything else is open.

01:05:56.250 --> 01:05:59.454
I'll show you some
pictures of that next time.

01:05:59.454 --> 01:06:00.120
Other questions?

01:06:00.120 --> 01:06:01.660
All right.

01:06:01.660 --> 01:06:04.140
That is paper, and
then I was going

01:06:04.140 --> 01:06:08.450
to show you a little bit
about polyhedra and hinged

01:06:08.450 --> 01:06:09.020
dissections.

01:06:09.020 --> 01:06:10.240
All right.

01:06:10.240 --> 01:06:10.910
Let's go.

01:06:31.679 --> 01:06:33.720
So I mentioned there's a
bunch of different kinds

01:06:33.720 --> 01:06:36.740
of polyhedron folding
and unfolding problems.

01:06:36.740 --> 01:06:39.900
Probably the coolest
one-- because it's

01:06:39.900 --> 01:06:44.100
the oldest problem in
this entire field--

01:06:44.100 --> 01:06:50.570
is unfolding convex polyhedron
by cutting along the edges.

01:06:50.570 --> 01:06:59.980
We call this edge
unfolding convex polyhedra.

01:06:59.980 --> 01:07:02.380
At the beginning of
class, I showed you

01:07:02.380 --> 01:07:04.660
a cube which you could
unfold into a cross.

01:07:04.660 --> 01:07:05.470
I want that.

01:07:05.470 --> 01:07:07.690
So I was only cutting
along edges of the cube.

01:07:07.690 --> 01:07:09.380
That's this edge unfolding.

01:07:09.380 --> 01:07:10.800
The cube is a convex shape.

01:07:10.800 --> 01:07:13.950
It doesn't have any dents.

01:07:13.950 --> 01:07:17.200
And I got to unfold it with
one piece without overlap.

01:07:17.200 --> 01:07:18.730
Is that always possible?

01:07:18.730 --> 01:07:21.420
We have no idea.

01:07:21.420 --> 01:07:23.920
Can every convex polyhedron
be made in that way?

01:07:23.920 --> 01:07:24.820
We don't know.

01:07:24.820 --> 01:07:30.630
This problem goes back
to Albrecht Durer,

01:07:30.630 --> 01:07:31.680
this guy on the left.

01:07:31.680 --> 01:07:33.430
This is his self-portrait.

01:07:33.430 --> 01:07:37.590
In 1525, he wrote this book
called The Painter's Manual

01:07:37.590 --> 01:07:38.810
in German.

01:07:38.810 --> 01:07:42.310
And he tried this out for
a whole bunch of polyhedra.

01:07:42.310 --> 01:07:46.970
This is the so-called snub
cube, and unfolded in his book.

01:07:46.970 --> 01:07:50.060
And he has page after page
after page of these unfoldings.

01:07:50.060 --> 01:07:51.519
And they're all edge unfoldings.

01:07:51.519 --> 01:07:52.560
Most of them are correct.

01:07:52.560 --> 01:07:54.715
There's a couple small
errors, probably just

01:07:54.715 --> 01:07:55.590
transcription errors.

01:07:55.590 --> 01:07:56.635
And he did this
because he wanted

01:07:56.635 --> 01:07:57.970
to understand these 3D shapes.

01:07:57.970 --> 01:07:59.070
He had to build them.

01:07:59.070 --> 01:08:01.310
How do you build them?

01:08:01.310 --> 01:08:03.720
So he didn't pose this
mathematical question.

01:08:03.720 --> 01:08:05.470
He was not a mathematician.

01:08:05.470 --> 01:08:08.050
But it's sort of implicit
there, and people

01:08:08.050 --> 01:08:12.420
have been thinking about it for
at least decades if not more.

01:08:12.420 --> 01:08:15.710
At least since '65, I think,
was the first formal posing.

01:08:15.710 --> 01:08:17.660
And it's really hard.

01:08:17.660 --> 01:08:21.050
A lot of people
have worked on it.

01:08:21.050 --> 01:08:23.029
We'll talk about it.

01:08:23.029 --> 01:08:25.854
There are some interesting
things that are known.

01:08:25.854 --> 01:08:27.229
I mean the depressing
thing is we

01:08:27.229 --> 01:08:29.359
have no algorithm which
we think will work.

01:08:29.359 --> 01:08:32.845
Every algorithm we've tried
has a counter example.

01:08:32.845 --> 01:08:34.220
Every counter
example we've tried

01:08:34.220 --> 01:08:36.430
has an algorithm
for which it works,

01:08:36.430 --> 01:08:42.100
but they don't match
up, so it's frustrating.

01:08:42.100 --> 01:08:46.060
If you allow
non-convex polyhedra,

01:08:46.060 --> 01:08:47.170
then the answer is no.

01:08:47.170 --> 01:08:51.439
So that's something I did
with a bunch of people

01:08:51.439 --> 01:08:52.420
back in the day.

01:08:52.420 --> 01:08:54.945
This was actually
done in '98, then

01:08:54.945 --> 01:08:57.770
it took forever for the
journal paper to appear.

01:08:57.770 --> 01:08:59.240
This is a polyhedron.

01:08:59.240 --> 01:09:01.020
All the faces are triangles.

01:09:01.020 --> 01:09:03.160
So it's sort of
topologically convex.

01:09:03.160 --> 01:09:05.200
And then if I made the
spike a little shorter,

01:09:05.200 --> 01:09:07.120
it would be a convex polyhedron.

01:09:07.120 --> 01:09:10.113
But this particular embedding--
these are just two views.

01:09:10.113 --> 01:09:12.029
If you cross your eyes,
it's three dimensions.

01:09:12.029 --> 01:09:13.290
No, I'm just kidding.

01:09:13.290 --> 01:09:14.770
It's not designed for that.

01:09:14.770 --> 01:09:16.279
Just two views of
the same thing.

01:09:16.279 --> 01:09:20.399
And if you cut along the
edges any way you want,

01:09:20.399 --> 01:09:22.682
it will overlap itself
or be multiple pieces.

01:09:22.682 --> 01:09:24.140
And we'll prove
that at some point.

01:09:24.140 --> 01:09:24.890
It's not too hard.

01:09:28.149 --> 01:09:31.850
Yeah, so good.

01:09:31.850 --> 01:09:33.620
That's edge unfolding.

01:09:33.620 --> 01:09:35.460
But there's another
kind of unfolding

01:09:35.460 --> 01:09:38.080
called general unfolding.

01:09:38.080 --> 01:09:41.500
This seems a lot more
interesting to me.

01:09:41.500 --> 01:09:43.279
Edges are sort of artificial.

01:09:43.279 --> 01:09:45.439
What if you let me cut
anywhere on the surface,

01:09:45.439 --> 01:09:47.560
not just at the edges?

01:09:47.560 --> 01:09:52.760
Well, then it turns out,
for convex polyhedra,

01:09:52.760 --> 01:09:54.950
you can do it.

01:09:54.950 --> 01:09:56.295
It's always possible.

01:10:03.420 --> 01:10:05.310
I don't have pictures
of that here,

01:10:05.310 --> 01:10:08.740
but even for some non-convex
polyhedra you could do it.

01:10:08.740 --> 01:10:10.880
For example, this
polyhedron, if you

01:10:10.880 --> 01:10:13.970
let me cut not just at the edges
but anywhere on the surface,

01:10:13.970 --> 01:10:17.460
you can do this crazy thing.

01:10:17.460 --> 01:10:21.530
These are the spikes, and you
cut out a tiny little sliver

01:10:21.530 --> 01:10:23.960
out to the side,
and that lets you

01:10:23.960 --> 01:10:27.390
attach one of those spikes
from one of these witch's hats

01:10:27.390 --> 01:10:29.330
to the wrong side.

01:10:29.330 --> 01:10:33.540
Like you see, this blue guy, the
blue spike-- because this edge

01:10:33.540 --> 01:10:35.260
ends up being
glued over here, we

01:10:35.260 --> 01:10:37.260
can attach the spike with
the little sliver that

01:10:37.260 --> 01:10:40.410
gets opened up here, over
there, and avoid overlap.

01:10:40.410 --> 01:10:42.000
Even if these spikes
are super tall,

01:10:42.000 --> 01:10:44.520
does this go out to
infinity and overlap.

01:10:44.520 --> 01:10:46.290
That's one example.

01:10:46.290 --> 01:10:49.060
Can you do it for every
non-convex polyhedron?

01:10:49.060 --> 01:10:49.850
We don't know.

01:10:49.850 --> 01:10:51.730
I would love to
answer that question.

01:10:51.730 --> 01:10:55.230
The one thing we know or
the big thing that we know

01:10:55.230 --> 01:10:58.210
is so-called
orthogonal polyhedra.

01:10:58.210 --> 01:10:59.210
This is always possible.

01:10:59.210 --> 01:11:01.209
This the same kind of
thing I was talking about.

01:11:01.209 --> 01:11:03.820
You take any 3D shape
made of little cubes--

01:11:03.820 --> 01:11:08.969
so all the faces are horizontal,
vertical, or the other way--

01:11:08.969 --> 01:11:10.260
then it's also always possible.

01:11:13.950 --> 01:11:16.860
The current method takes an
exponential number of cuts.

01:11:16.860 --> 01:11:17.992
It's really impractical.

01:11:17.992 --> 01:11:19.450
I think we could
make it practical.

01:11:19.450 --> 01:11:21.660
I think we could generalize
it to everything.

01:11:21.660 --> 01:11:23.355
But those are all
open questions.

01:11:25.950 --> 01:11:28.220
One more picture I
wanted to show you

01:11:28.220 --> 01:11:31.430
is, so here we really want
to keep the shape connected.

01:11:31.430 --> 01:11:33.650
You have to have a
positive area of connection

01:11:33.650 --> 01:11:35.010
between everything.

01:11:35.010 --> 01:11:38.060
If you let that connection
go down to a single point--

01:11:38.060 --> 01:11:40.690
sort of cheating, this is
called vertex unfolding--

01:11:40.690 --> 01:11:45.890
and then it's possible for any
surface made out of triangles.

01:11:45.890 --> 01:11:47.390
So it could be
non-convex, anything.

01:11:47.390 --> 01:11:48.830
These happen to be
convex polyhedra.

01:11:48.830 --> 01:11:51.205
It's a little hard to see that
they're three-dimensional,

01:11:51.205 --> 01:11:51.790
but they are.

01:11:51.790 --> 01:11:54.600
You cut them up
into little faces.

01:11:54.600 --> 01:11:57.380
Here I'm only
cutting along edges.

01:11:57.380 --> 01:12:00.380
And I string them
out on a line here.

01:12:00.380 --> 01:12:02.080
This thing will not
overlap, but I'm

01:12:02.080 --> 01:12:04.121
kind of cheating because
the connections are only

01:12:04.121 --> 01:12:05.650
at single points.

01:12:05.650 --> 01:12:10.340
But hey, we'll take a positive
result if we can get it.

01:12:10.340 --> 01:12:13.055
A lot of these problems
are really hard.

01:12:13.055 --> 01:12:14.680
OK, the next thing
I want to talk about

01:12:14.680 --> 01:12:16.490
is the reverse
direction folding.

01:12:16.490 --> 01:12:19.065
So we know-- this is
a video I made back

01:12:19.065 --> 01:12:22.760
when I was a grad
student, a long time ago.

01:12:22.760 --> 01:12:25.180
So we know you can take
a cube, and there's

01:12:25.180 --> 01:12:27.780
a whole bunch of different ways
to just cut along its edges

01:12:27.780 --> 01:12:29.820
and unfold it into one piece.

01:12:29.820 --> 01:12:32.970
And the particular
unfolding I want to consider

01:12:32.970 --> 01:12:36.520
is the cross unfolding,
because that's our favorite.

01:12:36.520 --> 01:12:38.860
So you take this
cross unfolding,

01:12:38.860 --> 01:12:41.170
and ideally don't stutter.

01:12:41.170 --> 01:12:43.620
And you say, well what if
I gave you that polygon?

01:12:43.620 --> 01:12:45.740
What 3D shapes
could it fold into?

01:12:45.740 --> 01:12:47.892
One thing is the
cube, but it can also

01:12:47.892 --> 01:12:49.725
make this flat doubly
covered quadrilateral.

01:12:54.090 --> 01:12:57.250
So I'm taking this
as a piece of paper,

01:12:57.250 --> 01:13:00.090
but I can set the
creases however I want.

01:13:00.090 --> 01:13:04.470
I can fold it into this
five-sided, reflectionally

01:13:04.470 --> 01:13:05.870
symmetric polyhedron.

01:13:08.850 --> 01:13:11.490
All of these things are
convex, and they all

01:13:11.490 --> 01:13:13.670
have perfect coverage,
unlike an origami where

01:13:13.670 --> 01:13:15.170
I'm allowed to have
multiple layers.

01:13:15.170 --> 01:13:16.950
Here, one layer everywhere.

01:13:16.950 --> 01:13:18.540
Like sheet metal bending.

01:13:18.540 --> 01:13:20.806
So here, this pocket fits
perfectly into that tab.

01:13:20.806 --> 01:13:21.680
I make a tetrahedron.

01:13:25.350 --> 01:13:27.720
And the last thing you can
make with something called

01:13:27.720 --> 01:13:30.190
edge-to-edge [INAUDIBLE]--
I'll talk about this more.

01:13:30.190 --> 01:13:32.650
There's an algorithm here
which, given a polygon,

01:13:32.650 --> 01:13:36.050
will list all of the
things it can fold into,

01:13:36.050 --> 01:13:38.720
in a reasonable amount of time.

01:13:38.720 --> 01:13:39.990
This is an octahedron.

01:13:39.990 --> 01:13:41.365
Those are the five
things you can

01:13:41.365 --> 01:13:45.610
make by edge-to-edge
[INAUDIBLE] of the cross.

01:13:45.610 --> 01:13:51.037
Let me stop that.

01:13:51.037 --> 01:13:52.120
So that's also on the web.

01:13:52.120 --> 01:13:53.900
You can watch it.

01:13:53.900 --> 01:13:56.910
In fact, all the lecture notes
I use, my handwritten notes,

01:13:56.910 --> 01:13:58.201
are on the class web page.

01:13:58.201 --> 01:14:00.450
The slides that I'm showing
are on the class web page.

01:14:00.450 --> 01:14:02.658
And when there's videos,
there's links to the videos,

01:14:02.658 --> 01:14:07.570
so it's all there for your
perusal if you miss something.

01:14:07.570 --> 01:14:10.450
The last thing I wanted to talk
about, because I've already

01:14:10.450 --> 01:14:13.410
done one, two and three,
there should always

01:14:13.410 --> 01:14:16.140
be one more thing.

01:14:16.140 --> 01:14:17.499
Fourth thing.

01:14:17.499 --> 01:14:19.540
And this is kind of funny,
because I don't really

01:14:19.540 --> 01:14:20.415
know where to put it.

01:14:20.415 --> 01:14:21.780
I'm still figuring it out.

01:14:21.780 --> 01:14:23.267
We have these
debates, because it's

01:14:23.267 --> 01:14:25.100
so easy when you're
thinking about linkages.

01:14:25.100 --> 01:14:26.224
Oh, that's one dimensional.

01:14:26.224 --> 01:14:27.670
Paper, that's two-dimensional.

01:14:27.670 --> 01:14:30.290
Polyhedra, well locally
it's two-dimensional,

01:14:30.290 --> 01:14:31.415
but it's three-dimensional.

01:14:31.415 --> 01:14:32.740
It's different.

01:14:32.740 --> 01:14:35.760
Different questions.

01:14:35.760 --> 01:14:38.050
Hinged dissections span
so many dimensions,

01:14:38.050 --> 01:14:40.580
I don't know where to put it.

01:14:40.580 --> 01:14:43.285
So four, hinged dissections.

01:14:47.970 --> 01:14:49.950
This didn't used to be
a topic in this class,

01:14:49.950 --> 01:14:51.491
and it's not a topic
in our textbook,

01:14:51.491 --> 01:14:54.450
because the result was proved
like last year or the year

01:14:54.450 --> 01:14:56.260
before out of this class.

01:14:56.260 --> 01:14:58.370
Three years ago.

01:14:58.370 --> 01:15:14.750
And the theorem is you take
any finite set of polygons,

01:15:14.750 --> 01:15:28.630
of the same area,
they can be folded

01:15:28.630 --> 01:15:43.670
from one chain of polygons
without collision.

01:15:46.900 --> 01:15:51.470
I'm going to say this
first, and but let me

01:15:51.470 --> 01:15:54.260
show you a simple example.

01:15:54.260 --> 01:15:56.216
Very simple.

01:15:56.216 --> 01:15:57.715
This is going to
be a little boring.

01:15:57.715 --> 01:16:00.610
Let me show you more
interesting example.

01:16:00.610 --> 01:16:02.970
Let's take an
equilateral triangle.

01:16:02.970 --> 01:16:05.790
I'm going to cut it
into two triangles,

01:16:05.790 --> 01:16:09.210
and then I'm going to
hinge them together here.

01:16:09.210 --> 01:16:13.550
So this is now a hinged
chain of polygons.

01:16:13.550 --> 01:16:17.820
If I open it up a little
bit, it looks like this.

01:16:17.820 --> 01:16:19.635
It looks a lot like
those vertex unfoldings

01:16:19.635 --> 01:16:21.890
I was showing before.

01:16:21.890 --> 01:16:27.570
And you can fold this
thing into one other shape.

01:16:27.570 --> 01:16:30.615
It's going to look like this.

01:16:33.532 --> 01:16:35.945
Not a very good drawing,
but you get the idea.

01:16:35.945 --> 01:16:37.820
Something like that.

01:16:37.820 --> 01:16:39.790
So this is what we call
a hinged dissection

01:16:39.790 --> 01:16:43.200
from this equilateral triangle
into this other triangle.

01:16:43.200 --> 01:16:45.940
And it's been an open
question for about 100 years.

01:16:45.940 --> 01:16:48.430
Can you always do this for
polygons of the same area?

01:16:48.430 --> 01:16:50.180
Turns out yes, not
only for two polygons--

01:16:50.180 --> 01:16:53.240
you can take seven
polygons of equal area

01:16:53.240 --> 01:16:56.650
and there's one of
these chains of blocks

01:16:56.650 --> 01:16:59.080
that can fold into all of them.

01:16:59.080 --> 01:17:04.380
And I think I have
a little teaser

01:17:04.380 --> 01:17:06.980
picture of how the
construction goes.

01:17:06.980 --> 01:17:08.310
It's really crazy.

01:17:08.310 --> 01:17:09.860
You have this chain of blocks.

01:17:09.860 --> 01:17:12.200
It's changed in a particular
way and you say, well

01:17:12.200 --> 01:17:14.750
I really want that green piece--
so think of it like this.

01:17:14.750 --> 01:17:20.180
You just have three triangles or
three pieces that you can fold.

01:17:20.180 --> 01:17:22.600
You say, well I really like
that green piece to be up top.

01:17:22.600 --> 01:17:25.094
Turns out you can make
all these crazy cuts.

01:17:25.094 --> 01:17:27.260
And if you fold it this
way, you get the green piece

01:17:27.260 --> 01:17:27.843
on the bottom.

01:17:27.843 --> 01:17:30.360
If you fold it this way, you
get the green piece on the top.

01:17:30.360 --> 01:17:33.060
It's one hinged dissection that
can move the pieces around,

01:17:33.060 --> 01:17:36.130
and basically pretend as if
the hinges weren't there,

01:17:36.130 --> 01:17:37.820
and make anything you want.

01:17:37.820 --> 01:17:39.610
So it's a bit complicated,
but it's really

01:17:39.610 --> 01:17:43.120
cool theory, something that
we worked on for like 10 years

01:17:43.120 --> 01:17:46.030
before finally solving.

01:17:46.030 --> 01:17:47.334
And it's practical.

01:17:47.334 --> 01:17:49.500
I mean this particular
construction isn't practical,

01:17:49.500 --> 01:17:52.020
but this is another way
to build transformers.

01:17:52.020 --> 01:17:53.030
Also to build sculpture.

01:17:53.030 --> 01:17:56.351
This is a sculpture by Laurie
Palmer that we collaborated on.

01:17:56.351 --> 01:17:57.600
It's an interactive sculpture.

01:17:57.600 --> 01:18:01.300
You pick up gloves, and
this is one chain of blocks.

01:18:01.300 --> 01:18:03.890
And the theorem is, this
particular chain of blocks--

01:18:03.890 --> 01:18:07.070
about 1,000 blocks here--
can make any shape made out

01:18:07.070 --> 01:18:12.666
of about 250 cubes.

01:18:12.666 --> 01:18:16.180
It's slightly skewed, but so
there's one hinged dissection

01:18:16.180 --> 01:18:19.500
that can fold into exponentially
many different shapes-- again,

01:18:19.500 --> 01:18:21.770
anything made out
of little cubes.

01:18:21.770 --> 01:18:23.710
And this is the
sculpture version.

01:18:23.710 --> 01:18:26.730
We also have various
prototypes of a robot that's

01:18:26.730 --> 01:18:30.190
a long chain of little cubes
or cube-like shapes, that

01:18:30.190 --> 01:18:32.506
can fold itself into
any 3D shape you want.

01:18:32.506 --> 01:18:34.380
It's, again, a different
kind of transformer,

01:18:34.380 --> 01:18:36.450
more inspired by
proteins, the way nature

01:18:36.450 --> 01:18:41.420
does it by long chains,
compared to the sheet-folding,

01:18:41.420 --> 01:18:43.180
origami-inspired approach.

01:18:43.180 --> 01:18:46.450
But it's all pretty
exciting and fun.

01:18:46.450 --> 01:18:48.530
Any questions?

01:18:48.530 --> 01:18:49.910
Jean?

01:18:49.910 --> 01:18:52.160
AUDIENCE: This is a 3D version
you were talking about.

01:18:52.160 --> 01:18:55.610
PROFESSOR: Yeah, I
pulled a fast one.

01:18:55.610 --> 01:18:57.040
That picture's 3D.

01:18:57.040 --> 01:18:58.310
This is about 2D.

01:18:58.310 --> 01:19:00.280
For 3D, you need the same area.

01:19:00.280 --> 01:19:02.240
You need one other
condition just

01:19:02.240 --> 01:19:05.750
for them to have a dissection.

01:19:05.750 --> 01:19:08.890
It's impossible to go from a
regular tetrahedron to a cube.

01:19:08.890 --> 01:19:11.530
This was one of Hilbert's
problems from 1900.

01:19:11.530 --> 01:19:14.870
And volumetrically
it's impossible to go

01:19:14.870 --> 01:19:18.090
from regular
tetrahedron to a cube,

01:19:18.090 --> 01:19:20.460
because the angles are wrong.

01:19:20.460 --> 01:19:22.190
It's an algebraic thing.

01:19:22.190 --> 01:19:24.800
And if you make things out
of little cubes, it's fine.

01:19:24.800 --> 01:19:25.500
You get that.

01:19:25.500 --> 01:19:26.479
There's no problem.

01:19:26.479 --> 01:19:28.270
But in general, there's
some tricky issues.

01:19:28.270 --> 01:19:31.190
It's easier to state for
2D, which is why I did,

01:19:31.190 --> 01:19:33.530
but it works in 3D, too, with
a little extra condition.

01:19:33.530 --> 01:19:36.560
And we'll talk about
that in the future.

01:19:36.560 --> 01:19:38.930
Other questions?

01:19:38.930 --> 01:19:41.710
All right, that's the
end of lecture one.

