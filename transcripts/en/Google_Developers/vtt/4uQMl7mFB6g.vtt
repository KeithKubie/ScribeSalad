WEBVTT
Kind: captions
Language: en

00:00:00.204 --> 00:00:01.120
JAKE ARCHIBALD: Hello.

00:00:01.120 --> 00:00:03.630
I'm Jake Archibald, off of
the Chrome Developer Relations

00:00:03.630 --> 00:00:04.270
Team.

00:00:04.270 --> 00:00:07.300
And I want to show you
something pretty incredible.

00:00:07.300 --> 00:00:08.529
Now don't adjust your set.

00:00:08.529 --> 00:00:10.820
What we're looking at here
is the browser establishment

00:00:10.820 --> 00:00:11.600
connection.

00:00:11.600 --> 00:00:13.735
It's an incredible
feat of technology.

00:00:13.735 --> 00:00:16.940
Data is being sent through
the air despite low signal,

00:00:16.940 --> 00:00:19.480
then through cabling to the
other side of the world.

00:00:19.480 --> 00:00:22.144
And yet, here comes the
response making that final leap

00:00:22.144 --> 00:00:22.810
through the air.

00:00:22.810 --> 00:00:25.789
Oh, it didn't work.

00:00:25.789 --> 00:00:27.830
Network connectivity is
a single point of failure

00:00:27.830 --> 00:00:30.210
when it comes to user
experience on the web.

00:00:30.210 --> 00:00:32.980
When connectivity is bad,
user experience is bad.

00:00:32.980 --> 00:00:37.380
When connectivity is gone,
user experience is gone.

00:00:37.380 --> 00:00:39.050
Native apps can overcome this.

00:00:39.050 --> 00:00:40.910
Well-built native
apps get cached stuff

00:00:40.910 --> 00:00:44.200
on the screen straight away,
and then they go to the network.

00:00:44.200 --> 00:00:47.030
And if that fails,
sometimes they

00:00:47.030 --> 00:00:49.380
don't even need to tell the
user something went wrong.

00:00:49.380 --> 00:00:51.470
This pattern is offline first.

00:00:51.470 --> 00:00:55.760
And I want to tell you about new
API that brings it to the web.

00:00:55.760 --> 00:00:57.400
PAUL: Isn't that
what appcache is for?

00:00:57.400 --> 00:00:58.870
JAKE ARCHIBALD: Yes, good point.

00:00:58.870 --> 00:00:59.825
Thanks, Paul.

00:00:59.825 --> 00:01:02.230
Appcache did try and
fix this problem.

00:01:02.230 --> 00:01:04.290
It used a man-- this
is your bit, done.

00:01:04.290 --> 00:01:05.010
You're good now.

00:01:05.010 --> 00:01:05.670
You can go.

00:01:05.670 --> 00:01:07.734
PAUL: Oh.

00:01:07.734 --> 00:01:09.650
JAKE ARCHIBALD: It used
a manifest format that

00:01:09.650 --> 00:01:12.420
was really simple, but
resulted in complex changes

00:01:12.420 --> 00:01:15.010
to the networking and caching
behavior of your pages.

00:01:15.010 --> 00:01:16.880
Well, I say complex.

00:01:16.880 --> 00:01:19.700
As developers, we deal with
complex code all the time.

00:01:19.700 --> 00:01:22.154
But in appcache's case,
it feels like magic.

00:01:22.154 --> 00:01:23.820
Because there's little
to link the lines

00:01:23.820 --> 00:01:26.820
in the manifest to the bits
of this behavior it triggers.

00:01:26.820 --> 00:01:28.470
The specific problems
with appcache

00:01:28.470 --> 00:01:30.130
are pretty well documented.

00:01:30.130 --> 00:01:31.200
But here's a quick recap.

00:01:31.200 --> 00:01:33.525
[MUSIC PLAYING]

00:01:36.780 --> 00:01:38.980
Well, we should all be
on the same page now.

00:01:38.980 --> 00:01:40.980
But it's a shame about
appcache, because there's

00:01:40.980 --> 00:01:43.810
some powerful stuff in
there-- caching, routing,

00:01:43.810 --> 00:01:47.510
updating, offline first,
online first, handling failure.

00:01:47.510 --> 00:01:50.390
But those tools can only be
used in very particular ways.

00:01:50.390 --> 00:01:53.440
There's no expression of
intent in the manifest.

00:01:53.440 --> 00:01:55.300
This makes it really
easy to be caught out

00:01:55.300 --> 00:01:56.810
by unexpected behavior.

00:01:56.810 --> 00:02:00.330
And your only line of
defense is to read the spec.

00:02:00.330 --> 00:02:02.310
Read it until your
eyes bleed, and then

00:02:02.310 --> 00:02:05.880
wipe the blood from your
eyes, and read the spec again.

00:02:05.880 --> 00:02:09.190
The solution to this
is the ServiceWorker.

00:02:09.190 --> 00:02:12.210
This is a new spec developed
by Google, Mozilla, Samsung

00:02:12.210 --> 00:02:14.810
and others.

00:02:14.810 --> 00:02:16.220
There's the spec.

00:02:16.220 --> 00:02:18.640
You can see why I went
for the fireworks instead.

00:02:18.640 --> 00:02:20.496
But the ServiceWorker
breaks appcache down

00:02:20.496 --> 00:02:21.870
into a set of
primitives that you

00:02:21.870 --> 00:02:24.120
can reason about and
use independently.

00:02:24.120 --> 00:02:26.720
And no behaviors change
until you change them,

00:02:26.720 --> 00:02:28.512
using JavaScript.

00:02:28.512 --> 00:02:29.970
Google and Mozilla
are aggressively

00:02:29.970 --> 00:02:32.140
working on implementations
of ServiceWorker.

00:02:32.140 --> 00:02:34.640
Some of the things I cover
may be buggy or not yet

00:02:34.640 --> 00:02:35.890
implemented.

00:02:35.890 --> 00:02:39.270
Check out this site for the
current status in each browser.

00:02:39.270 --> 00:02:42.360
Right, let's take a look
at a real-world use case.

00:02:42.360 --> 00:02:45.430
This is Trained to
Thrill, a simple website

00:02:45.430 --> 00:02:46.530
I threw together.

00:02:46.530 --> 00:02:49.230
It delivers you the very
latest in hot railway action,

00:02:49.230 --> 00:02:50.403
straight from Flickr.

00:02:50.403 --> 00:02:52.114
I'm going to add it
to my home screen,

00:02:52.114 --> 00:02:53.780
because it feels like
that kind of thing

00:02:53.780 --> 00:02:55.250
I might need urgent access to.

00:02:55.250 --> 00:02:57.900
And it gives it that
native app feel.

00:02:57.900 --> 00:02:59.670
It's all on GitHub,
so you can check out

00:02:59.670 --> 00:03:02.060
and run the final
implementation.

00:03:02.060 --> 00:03:04.660
I don't know why I made
something about trains.

00:03:04.660 --> 00:03:06.960
It just came to me as
I was standing outside,

00:03:06.960 --> 00:03:08.980
admiring some trees.

00:03:08.980 --> 00:03:13.880
Unfortunately, this is our
current offline experience.

00:03:13.880 --> 00:03:15.050
Things are great online.

00:03:15.050 --> 00:03:18.290
But without a connection,
we get total failure.

00:03:18.290 --> 00:03:20.250
Let's do something about that.

00:03:20.250 --> 00:03:23.371
In our site's code, we'll
register for a ServiceWorker.

00:03:23.371 --> 00:03:25.620
I'm using feature detection
here so I don't get errors

00:03:25.620 --> 00:03:28.570
in browsers that don't yet
support ServiceWorkers.

00:03:28.570 --> 00:03:31.190
This is the URL to the script
that will control our pages.

00:03:31.190 --> 00:03:34.360
And this is the range
of pages it'll control.

00:03:34.360 --> 00:03:37.430
Register returns a promise,
so you can call .then and pass

00:03:37.430 --> 00:03:39.640
in success and
failure callbacks.

00:03:39.640 --> 00:03:41.330
Promises are a
really powerful way

00:03:41.330 --> 00:03:43.330
to control async operations.

00:03:43.330 --> 00:03:45.080
To learn more about
promises, check out

00:03:45.080 --> 00:03:47.840
this article on HTML5 Rocks.

00:03:47.840 --> 00:03:50.140
Because of the control you
get with a ServiceWorker,

00:03:50.140 --> 00:03:52.370
you can only register
for them on pages

00:03:52.370 --> 00:03:54.615
that are served over HTTPS.

00:03:54.615 --> 00:03:56.770
GitHub does this, so
it's a great place

00:03:56.770 --> 00:04:00.690
to host experiments
and little apps.

00:04:00.690 --> 00:04:02.760
So what happens to sw.js?

00:04:02.760 --> 00:04:04.260
Well, it runs in a
different thread,

00:04:04.260 --> 00:04:06.160
and it has no DOM access.

00:04:06.160 --> 00:04:08.400
It's a place where you can
run code outside of pages

00:04:08.400 --> 00:04:10.170
and control their loading.

00:04:10.170 --> 00:04:13.020
One ServiceWorker can
control many pages.

00:04:13.020 --> 00:04:14.980
You can think of it
as like a proxy server

00:04:14.980 --> 00:04:17.570
sitting on the client,
able to re-route requests

00:04:17.570 --> 00:04:19.820
or satisfy them
from its own cache.

00:04:19.820 --> 00:04:21.220
Let's do some of that.

00:04:21.220 --> 00:04:23.520
The first thing we care
about is the install event.

00:04:23.520 --> 00:04:25.420
This fires when the
browser sees this version

00:04:25.420 --> 00:04:27.670
of the ServiceWorker
for the first time,

00:04:27.670 --> 00:04:29.450
passing a promise to
wait until it defines

00:04:29.450 --> 00:04:31.830
the length of the
installation process.

00:04:31.830 --> 00:04:34.260
If the promise rejects,
the install fails,

00:04:34.260 --> 00:04:36.215
and this worker won't
do anything else.

00:04:36.215 --> 00:04:38.265
If that happens,
don't worry about it.

00:04:38.265 --> 00:04:39.890
You'll get another
shot at it next time

00:04:39.890 --> 00:04:42.097
you call ServiceWorker.register.

00:04:42.097 --> 00:04:44.430
We're going to use the install
event to cache everything

00:04:44.430 --> 00:04:46.060
we need to load the page.

00:04:46.060 --> 00:04:49.240
Cache is a new storage API
provided by the ServiceWorker.

00:04:49.240 --> 00:04:51.942
It's basically a
programmable HTTP cache,

00:04:51.942 --> 00:04:53.770
but things never expire.

00:04:53.770 --> 00:04:56.190
They're only gone
when you remove them.

00:04:56.190 --> 00:04:57.860
We'll create a new
cache and add it

00:04:57.860 --> 00:04:59.930
to the cache's object
to give it persistence.

00:04:59.930 --> 00:05:03.180
The cache's object is a
global within ServiceWorker.

00:05:03.180 --> 00:05:05.310
Then we'll add items to
the cache, everything

00:05:05.310 --> 00:05:07.190
we need to load the site.

00:05:07.190 --> 00:05:09.740
These methods return promises
so they can be used to feed

00:05:09.740 --> 00:05:11.020
[? wait ?] [? until. ?]

00:05:11.020 --> 00:05:12.830
If any of these
things fail to cache,

00:05:12.830 --> 00:05:15.510
the promise rejects
and the install fails.

00:05:15.510 --> 00:05:17.440
So if the install
succeeds, we know

00:05:17.440 --> 00:05:20.450
we have all of these
items in the cache.

00:05:20.450 --> 00:05:22.080
Although we've cached
a lot of stuff,

00:05:22.080 --> 00:05:25.990
the browser won't use any
of it until we tell it to.

00:05:25.990 --> 00:05:28.010
You can listen for
the fetch events.

00:05:28.010 --> 00:05:29.660
This fires for
every page request

00:05:29.660 --> 00:05:31.930
within the ServiceWorker
scope, but also

00:05:31.930 --> 00:05:33.860
for requests made
by those pages,

00:05:33.860 --> 00:05:36.070
even if they're
to other domains.

00:05:36.070 --> 00:05:38.060
You get a lot of information
about the request,

00:05:38.060 --> 00:05:41.490
such as URL, method, headers.

00:05:41.490 --> 00:05:45.350
However, the most interesting
bit is you can hijack the event

00:05:45.350 --> 00:05:48.030
and respond to the
request yourself.

00:05:48.030 --> 00:05:50.140
RespondWith takes
a response object,

00:05:50.140 --> 00:05:52.840
or a promise for a response.

00:05:52.840 --> 00:05:54.590
You could create the
response yourself

00:05:54.590 --> 00:05:57.370
from scratch using the
response constructor.

00:05:57.370 --> 00:05:59.900
But it just so happens we've
got a cache full of stuff

00:05:59.900 --> 00:06:01.350
we can use.

00:06:01.350 --> 00:06:03.880
Caches.match takes a
request and gives us

00:06:03.880 --> 00:06:06.300
a promise for a
response, a response that

00:06:06.300 --> 00:06:08.140
matches the request.

00:06:08.140 --> 00:06:10.260
The matching is
done by URL method

00:06:10.260 --> 00:06:13.570
and vary headers, just
like the HTTP cache.

00:06:13.570 --> 00:06:15.612
Let's see how that runs.

00:06:15.612 --> 00:06:18.690
Oh, we've broken it.

00:06:18.690 --> 00:06:20.350
Connectivity derailed.

00:06:20.350 --> 00:06:23.190
Because it's trains.

00:06:23.190 --> 00:06:25.320
Even with full
connectivity, it's broken.

00:06:25.320 --> 00:06:27.740
In fact, if we take
connectivity away,

00:06:27.740 --> 00:06:30.630
we get exactly the same results.

00:06:30.630 --> 00:06:33.645
Our page is working offline, but
all communication with Flickr

00:06:33.645 --> 00:06:36.060
is failing, even online.

00:06:36.060 --> 00:06:37.690
This is because our
request to Flickr,

00:06:37.690 --> 00:06:40.150
like all in-page requests,
hit the fetch event.

00:06:40.150 --> 00:06:42.460
And then it tries to get
a response from the cache,

00:06:42.460 --> 00:06:43.500
doesn't find one.

00:06:43.500 --> 00:06:45.140
The promise rejects,
and we get back

00:06:45.140 --> 00:06:47.340
what looks like a
connection failure.

00:06:47.340 --> 00:06:49.465
You see, we've told it
to satisfy all requests

00:06:49.465 --> 00:06:50.090
from the cache.

00:06:50.090 --> 00:06:52.410
And we didn't cache
anything from Flickr.

00:06:52.410 --> 00:06:55.040
Thankfully, promises let
us recover from this.

00:06:55.040 --> 00:06:56.900
If our cache lookup
fails, we can

00:06:56.900 --> 00:06:59.370
use event.default, which
goes to the network

00:06:59.370 --> 00:07:00.890
to fetch the resource.

00:07:00.890 --> 00:07:03.600
That might fail as well,
of course, in which case

00:07:03.600 --> 00:07:06.150
we can catch again
and serve a fallback.

00:07:06.150 --> 00:07:08.890
And that will never fail,
because we depended on fallback

00:07:08.890 --> 00:07:11.860
to HTML in our install step.

00:07:11.860 --> 00:07:13.680
Now everything
works again, well,

00:07:13.680 --> 00:07:15.190
as long as you've
got a connection.

00:07:15.190 --> 00:07:18.450
If we disable connectivity,
we're back here.

00:07:18.450 --> 00:07:20.070
So we're pretty close.

00:07:20.070 --> 00:07:21.960
We just have to cater
for Flickr's absence

00:07:21.960 --> 00:07:23.390
when we're offline.

00:07:23.390 --> 00:07:26.910
But to do that, before we do
that, let's take a step back.

00:07:26.910 --> 00:07:28.150
This is what we have so far.

00:07:28.150 --> 00:07:30.880
And it just so happens
that we're still roughly

00:07:30.880 --> 00:07:32.340
within appcache's capabilities.

00:07:32.340 --> 00:07:37.362
But to do this in appcache, our
manifest would look like this.

00:07:37.362 --> 00:07:40.330
It looks a lot simpler, but
it's not actually simpler.

00:07:40.330 --> 00:07:42.120
It's just fewer characters.

00:07:42.120 --> 00:07:44.800
This doesn't involve us in all
the behaviors it's created,

00:07:44.800 --> 00:07:47.210
the caching, the
routing, the fallbacks.

00:07:47.210 --> 00:07:49.900
If this Service Worker does
something we don't expect,

00:07:49.900 --> 00:07:53.860
if it behaves in a way we don't
understand, what can we do?

00:07:53.860 --> 00:07:55.430
Well, it's JavaScript.

00:07:55.430 --> 00:07:56.630
We can use console.log.

00:07:56.630 --> 00:07:58.770
We can open dev tools,
set breakpoints,

00:07:58.770 --> 00:08:01.770
see the state of everything
as it goes through the worker.

00:08:01.770 --> 00:08:06.030
If this does something we don't
expect, and it probably will,

00:08:06.030 --> 00:08:09.370
we're back to reading the
spec again, crying blood.

00:08:09.370 --> 00:08:11.060
But enough about appcache.

00:08:11.060 --> 00:08:12.690
Let's do something it can't.

00:08:12.690 --> 00:08:16.360
Let's make that Flickr data
and imagery work offline.

00:08:16.360 --> 00:08:18.410
Here's what our page
is currently doing.

00:08:18.410 --> 00:08:19.870
We request photo
data from Flickr.

00:08:19.870 --> 00:08:22.940
And if that works, we update
the page with that data.

00:08:22.940 --> 00:08:24.595
Otherwise, we show an error.

00:08:24.595 --> 00:08:28.200
Either way, we stop that
spinner spinning around.

00:08:28.200 --> 00:08:30.630
We want this to work without
a connection, which obviously

00:08:30.630 --> 00:08:33.460
means caching Flickr's
API response and images.

00:08:33.460 --> 00:08:35.429
However, if the
user's online, we

00:08:35.429 --> 00:08:37.220
want them to get the
very latest locomotive

00:08:37.220 --> 00:08:39.500
delights Flickr has to offer.

00:08:39.500 --> 00:08:41.250
It's tempting, then,
to go for something

00:08:41.250 --> 00:08:45.000
like this, where we try to
get train photo data online.

00:08:45.000 --> 00:08:48.180
And if that fails, we
go for the cached stuff.

00:08:48.180 --> 00:08:50.390
For some apps, this
is the best approach.

00:08:50.390 --> 00:08:52.510
But it's not good
enough for our trains.

00:08:52.510 --> 00:08:54.470
You see, this works
fine when you're

00:08:54.470 --> 00:08:57.280
in a big city with full signal.

00:08:57.280 --> 00:08:58.840
Stuff arrives fast.

00:08:58.840 --> 00:09:01.480
It works fine when you're on
the underground, with no signal.

00:09:01.480 --> 00:09:04.640
In fact, it's even faster than
before because we fail straight

00:09:04.640 --> 00:09:07.360
away and go straight
to the cache.

00:09:07.360 --> 00:09:09.400
This is the problem case.

00:09:09.400 --> 00:09:12.290
Your phone sort of, kind
of, maybe has a connection,

00:09:12.290 --> 00:09:13.290
possibly.

00:09:13.290 --> 00:09:15.780
It'll either take
ages to get the data,

00:09:15.780 --> 00:09:18.090
or take ages to decide it can't.

00:09:18.090 --> 00:09:20.590
In fact, signal bars aren't
even a good predictor

00:09:20.590 --> 00:09:21.630
of this behavior.

00:09:21.630 --> 00:09:23.500
We can have full
signal, but we're still

00:09:23.500 --> 00:09:25.530
beholden to all of the
internet pipes that

00:09:25.530 --> 00:09:28.000
sit between us and Flickr.

00:09:28.000 --> 00:09:31.070
Prediction is really inaccurate
when it comes to the network.

00:09:31.070 --> 00:09:34.470
Take navigator.onLine, which is
available within ServiceWorkers

00:09:34.470 --> 00:09:35.560
as well as pages.

00:09:35.560 --> 00:09:37.290
But it's not all that useful.

00:09:37.290 --> 00:09:40.110
You see, it tries
to be predictive.

00:09:40.110 --> 00:09:44.300
When you have absolutely no
connectivity, it will be false.

00:09:44.300 --> 00:09:47.680
When you have some
connectivity, it will be true.

00:09:47.680 --> 00:09:49.350
Even if the route
you're connected to

00:09:49.350 --> 00:09:53.390
is just plugged into
some soil, it'll be true.

00:09:53.390 --> 00:09:56.020
Now our prediction is
flawed, be wary of it.

00:09:56.020 --> 00:09:57.470
With this code,
the network needs

00:09:57.470 --> 00:10:00.260
to succeed or fail
before we do anything.

00:10:00.260 --> 00:10:03.020
Instead, let's get stuff
from the cache straight away

00:10:03.020 --> 00:10:05.420
and then go to the network.

00:10:05.420 --> 00:10:07.450
This isn't a revolutionary idea.

00:10:07.450 --> 00:10:08.940
Native apps often do this.

00:10:08.940 --> 00:10:11.800
But now we can do it on the web.

00:10:11.800 --> 00:10:14.130
First, we change how we
fetch live data slightly.

00:10:14.130 --> 00:10:15.175
We stop handling errors.

00:10:15.175 --> 00:10:18.890
And we set a variable to true
if and when it completes.

00:10:18.890 --> 00:10:21.450
We make this request
race with another,

00:10:21.450 --> 00:10:23.930
one that's only going
to go to the cache.

00:10:23.930 --> 00:10:26.660
It sounds unbelievable that the
network might beat the cache.

00:10:26.660 --> 00:10:28.500
But some virus scanners
make disk access

00:10:28.500 --> 00:10:29.740
like wading through mud.

00:10:29.740 --> 00:10:31.550
So we should prepare for that.

00:10:31.550 --> 00:10:33.210
In terms of error
handling, we only

00:10:33.210 --> 00:10:35.560
want to show a connection
error if both the cache

00:10:35.560 --> 00:10:37.940
and the network fail to deliver.

00:10:37.940 --> 00:10:41.660
If the network fails but the
cache delivers, that's OK.

00:10:41.660 --> 00:10:42.910
We can fail silently.

00:10:42.910 --> 00:10:45.225
That's a good offline
experience in this case.

00:10:45.225 --> 00:10:47.830
But how do we make one
request to cache and another

00:10:47.830 --> 00:10:49.440
to the network?

00:10:49.440 --> 00:10:51.194
Here's how we make
a network request.

00:10:51.194 --> 00:10:52.610
The Flickr search
function is just

00:10:52.610 --> 00:10:55.980
going to use XHR to make
a get request to Flickr.

00:10:55.980 --> 00:10:58.540
Getting cache data is
a little bit different.

00:10:58.540 --> 00:11:00.370
It fails if ServiceWorker
isn't supported,

00:11:00.370 --> 00:11:03.350
or if there isn't one
being used by this page.

00:11:03.350 --> 00:11:05.340
The Flickr search
is almost the same.

00:11:05.340 --> 00:11:07.830
The only difference is
this additional header.

00:11:07.830 --> 00:11:09.450
It looks like
magic, but it isn't.

00:11:09.450 --> 00:11:12.655
In fact, it doesn't
do anything yet.

00:11:12.655 --> 00:11:14.780
But it's something we'll
see as part of the request

00:11:14.780 --> 00:11:16.720
to the ServiceWorker.

00:11:16.720 --> 00:11:18.910
And we'll add our
own magic in there.

00:11:18.910 --> 00:11:21.600
Back into ServiceWorker,
let's do some extra stuff

00:11:21.600 --> 00:11:22.862
in our fetch listener.

00:11:22.862 --> 00:11:25.830
If the request URL
is to Flickr's API,

00:11:25.830 --> 00:11:27.600
we'll do something special.

00:11:27.600 --> 00:11:30.400
If the request URL is to
Flickr's image service,

00:11:30.400 --> 00:11:32.420
we'll do something else special.

00:11:32.420 --> 00:11:36.430
First, let's look at how
we handle API requests.

00:11:36.430 --> 00:11:39.400
If the request has that header,
the one that we set before,

00:11:39.400 --> 00:11:41.770
we'll send back a match
from the cache only.

00:11:41.770 --> 00:11:44.301
If there's no match,
the request will fail.

00:11:44.301 --> 00:11:44.800
That's fine.

00:11:44.800 --> 00:11:46.760
That's exactly what we want.

00:11:46.760 --> 00:11:48.280
If that header
isn't there, we'll

00:11:48.280 --> 00:11:50.480
create a new cache
for our Flickr content

00:11:50.480 --> 00:11:52.670
and add it to our
cache's object.

00:11:52.670 --> 00:11:55.010
Then we'll pipe the
request to our cache,

00:11:55.010 --> 00:11:57.550
but also back to the browser.

00:11:57.550 --> 00:11:59.720
The fetch method takes
a request and returns

00:11:59.720 --> 00:12:01.700
a promise for a response.

00:12:01.700 --> 00:12:03.974
Although we're using this
request object twice,

00:12:03.974 --> 00:12:05.640
the browser is smart
enough to only make

00:12:05.640 --> 00:12:07.830
one request under the hood.

00:12:07.830 --> 00:12:10.410
This dynamic handling of
requests and caches is

00:12:10.410 --> 00:12:13.150
something appcache
simply cannot do.

00:12:13.150 --> 00:12:16.020
So that's API request sorted,
but what about the request

00:12:16.020 --> 00:12:18.270
to Flickr's image service?

00:12:18.270 --> 00:12:20.150
First up, we'll try
and serve the images

00:12:20.150 --> 00:12:21.770
directly from the cache.

00:12:21.770 --> 00:12:25.300
But if that fails, we'll get
hold of our content cache,

00:12:25.300 --> 00:12:27.100
and we'll add this
new image to it.

00:12:27.100 --> 00:12:29.380
We'll also respond with
it, send it straight back

00:12:29.380 --> 00:12:31.030
to the browser.

00:12:31.030 --> 00:12:34.320
This exposes another interesting
feature of ServiceWorkers.

00:12:34.320 --> 00:12:36.700
Images from Flickr do
not have cause headers.

00:12:36.700 --> 00:12:39.350
You can't fetch them with XHR.

00:12:39.350 --> 00:12:41.490
ServiceWorkers don't
have this restriction.

00:12:41.490 --> 00:12:43.540
You'll get back an
opaque response.

00:12:43.540 --> 00:12:45.990
You can't query its
content with JavaScript,

00:12:45.990 --> 00:12:49.532
but you can add it to caches
and use it in responses.

00:12:49.532 --> 00:12:50.880
And that's it.

00:12:50.880 --> 00:12:53.640
Now we have an app that loads
blindingly fast and updates

00:12:53.640 --> 00:12:56.200
with the latest content, if
the user has a connection,

00:12:56.200 --> 00:12:58.640
but also works
entirely without one.

00:12:58.640 --> 00:13:01.490
They'll just get the last
set of images they saw.

00:13:01.490 --> 00:13:02.910
It's fully offline first.

00:13:02.910 --> 00:13:04.780
We assume nothing
at the network.

00:13:04.780 --> 00:13:06.530
We render with what
we've got, and then we

00:13:06.530 --> 00:13:09.360
try the network and
deal with the outcome.

00:13:09.360 --> 00:13:10.800
Mission accomplished.

00:13:10.800 --> 00:13:12.187
And that's just one example.

00:13:12.187 --> 00:13:13.770
ServiceWorker gives
you the primitives

00:13:13.770 --> 00:13:15.480
to do what's best for your app.

00:13:15.480 --> 00:13:18.060
It doesn't force you
down a particular path.

00:13:18.060 --> 00:13:19.960
This is a very new
feature, but we're already

00:13:19.960 --> 00:13:22.170
seeing other
specifications extended

00:13:22.170 --> 00:13:24.130
to make it even more powerful.

00:13:24.130 --> 00:13:26.110
For example, background sync.

00:13:26.110 --> 00:13:28.540
It adds a sync event
to ServiceWorkers.

00:13:28.540 --> 00:13:30.520
This allows a ServiceWorker
to spin up even

00:13:30.520 --> 00:13:32.300
when the user
isn't at your site,

00:13:32.300 --> 00:13:34.540
giving an opportunity
to update caches.

00:13:34.540 --> 00:13:36.950
Ideal for sending that
message that failed to send,

00:13:36.950 --> 00:13:40.430
or updating a set of
train photos from Flickr.

00:13:40.430 --> 00:13:42.510
And push-- push allows
the Service Worker

00:13:42.510 --> 00:13:45.520
to spin up in reaction
to a server push message.

00:13:45.520 --> 00:13:47.650
You can use this to
update caches and notify

00:13:47.650 --> 00:13:51.300
the user they have a new
message, or, I don't know,

00:13:51.300 --> 00:13:54.030
something to do with trains.

00:13:54.030 --> 00:13:56.920
Anyway, ServiceWorker
isn't limited to trains.

00:13:56.920 --> 00:13:59.060
Hopefully you've
got better ideas.

00:13:59.060 --> 00:14:02.110
The W3 web mobile group are
currently compiling examples,

00:14:02.110 --> 00:14:03.930
and they're looking
for contributors.

00:14:03.930 --> 00:14:05.930
If you want to start
writing demos, or coming up

00:14:05.930 --> 00:14:09.230
with use cases, this is
a great place to do it.

00:14:09.230 --> 00:14:11.850
Making stuff work offline
is just one possibility.

00:14:11.850 --> 00:14:14.320
You can also use Service
Workers to fine-tune performance

00:14:14.320 --> 00:14:17.716
on powerful network APIs
such as client hints.

00:14:17.716 --> 00:14:19.340
If you're building
with ServiceWorkers,

00:14:19.340 --> 00:14:22.330
remember to use this page to
see what's actually working.

00:14:22.330 --> 00:14:25.120
See what you can
build in Chrome today.

00:14:25.120 --> 00:14:28.020
Of course, there will
probably be bugs.

00:14:28.020 --> 00:14:30.910
Please, file tickets
as you find them.

00:14:30.910 --> 00:14:34.120
Filing bugs and making examples
will improve our implementation

00:14:34.120 --> 00:14:36.660
and steer the
direction of the API.

00:14:36.660 --> 00:14:39.050
We're crazily excited about
the performance benefits

00:14:39.050 --> 00:14:41.380
and new features this
brings to the web.

00:14:41.380 --> 00:14:43.195
Let's build some
cool stuff with it.

00:14:43.195 --> 00:14:45.310
Thanks for listening.

