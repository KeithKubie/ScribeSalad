WEBVTT
Kind: captions
Language: en

00:00:02.769 --> 00:00:05.238
Hi I'm Brett Slatkin, a
software engineer on the

00:00:05.238 --> 00:00:06.906
Google App Engine team.

00:00:06.906 --> 00:00:09.142
App Engine enables editors to
build web applications on

00:00:09.142 --> 00:00:10.643
Google's infrastructure.

00:00:10.643 --> 00:00:12.479
I'm here today to show you how
to quickly build a guest book

00:00:12.479 --> 00:00:16.316
application using App Engine.
Let's get started.

00:00:16.316 --> 00:00:18.785
First we'll create a directory
for my new application and

00:00:18.785 --> 00:00:23.990
bring it into my editor.

00:00:23.990 --> 00:00:25.458
Then I'll create an "app.yamo"
file with my

00:00:25.458 --> 00:00:29.763
application configuration.

00:00:29.763 --> 00:00:32.198
I'll type my application name.

00:00:32.198 --> 00:00:34.334
Version of this application,
in this case

00:00:34.334 --> 00:00:36.002
the first version.

00:00:36.002 --> 00:00:38.138
Version of the apis I'm going
to be using.

00:00:38.138 --> 00:00:41.975
And the runtime,
which is "python."

00:00:41.975 --> 00:00:43.410
Then I declare how my URL is
going to map

00:00:43.410 --> 00:00:45.612
to my application.

00:00:45.612 --> 00:00:48.515
In this case, I'm going to
have all URLs go to single

00:00:48.515 --> 00:00:51.284
python scripts called "main."

00:00:51.284 --> 00:00:56.589
I'll create my
main python file.

00:00:56.589 --> 00:01:06.566
I'll type in a very basic,
"Hello world" application.

00:01:06.566 --> 00:01:08.001
Now I'll go to the terminal
and start the

00:01:08.001 --> 00:01:11.971
development web server.

00:01:11.971 --> 00:01:13.940
And now that the server is
running, I can go and view the

00:01:13.940 --> 00:01:19.846
"Hello World" application.

00:01:19.846 --> 00:01:21.514
Now let's do something more
complicated and build

00:01:21.514 --> 00:01:23.917
a web application.

00:01:23.917 --> 00:01:26.319
To do this we've provided a
very basic web application

00:01:26.319 --> 00:01:28.021
framework called "Web App."

00:01:28.021 --> 00:01:33.626
I'll import the "Web App"
module and then define a

00:01:33.626 --> 00:01:35.695
handler, which will handle
the requests from

00:01:35.695 --> 00:01:42.068
the application.

00:01:42.068 --> 00:01:45.071
The methods of this class
will handle HTP requests.

00:01:45.071 --> 00:01:47.707
In this case, I just want to
handle a get request, and I'll

00:01:47.707 --> 00:01:54.080
print out a
"Hello World" message.

00:01:54.080 --> 00:01:57.283
Text "schema handler
" I'll use "wsgiref," which is

00:01:57.283 --> 00:02:11.931
python standard
web application container.

00:02:11.931 --> 00:02:14.968
And I'll define a
"WSGIApplication" throughout

00:02:14.968 --> 00:02:31.317
all URL's access to my
really basic handler.

00:02:31.317 --> 00:02:40.260
And of course, tell phython
to run my main function.

00:02:40.260 --> 00:02:44.631
Now let's view this
in our browser.

00:02:44.631 --> 00:02:48.001
Great. It showed up
and it's working.

00:02:48.001 --> 00:02:50.737
Now let's do some templates to
make this page look better.

00:02:50.737 --> 00:02:54.707
We provide a basic
library for doing this.

00:02:54.707 --> 00:03:01.748
Let's create a template file
using Django templates.

00:03:01.748 --> 00:03:03.983
To begin with, I'll just have
some HTML that says,

00:03:03.983 --> 00:03:09.255
"Hello World."

00:03:09.255 --> 00:03:18.064
I'll import our
template module.

00:03:18.064 --> 00:03:28.374
And then render the template.

00:03:28.374 --> 00:03:34.180
And then I can view
this in my browser.

00:03:34.180 --> 00:03:37.850
Now let's implement a basic
UI for our web application.

00:03:37.850 --> 00:03:40.753
I'll go back into my template
file and start writing my

00:03:40.753 --> 00:03:47.160
UI and HTML.
So first I'll have a form.

00:03:47.160 --> 00:03:49.596
In this case, I want to post.

00:03:49.596 --> 00:03:50.997
And the form will have
a couple of fields. 

00:03:50.997 --> 00:03:53.433
Since it's a guest book, let's
start off with the message

00:03:53.433 --> 00:03:55.602
I want to have.

00:03:55.602 --> 00:04:01.941
In this case, it's just text
fields with "message."

00:04:01.941 --> 00:04:08.081
And we'll change the "submit"
button to say "shout."

00:04:08.081 --> 00:04:12.218
And now we can go back
and view this in our browser.

00:04:12.218 --> 00:04:13.987
So let's have our web
application handle the post

00:04:13.987 --> 00:04:18.157
request and then do
something more interesting.

00:04:18.157 --> 00:04:20.760
I'll modify "MyHandler" to
handle post requests, as well

00:04:20.760 --> 00:04:36.209
as the "get" requests.

00:04:36.209 --> 00:04:39.045
Now let's hook this
up to the data store.

00:04:39.045 --> 00:04:41.814
To use the data store, I'll
import the dv module and to

00:04:41.814 --> 00:04:45.785
find a model class that says
what fields will have to store

00:04:45.785 --> 00:04:48.054
in the data store.

00:04:48.054 --> 00:04:54.894
In this case, my model class
will be called "Shout."

00:04:54.894 --> 00:05:02.101
And I'll have two fields. 
First, the message.

00:05:02.101 --> 00:05:13.146
And then the time the
message was left.

00:05:13.146 --> 00:05:16.215
Now, in the post method, I'll
use the request parameters to

00:05:16.215 --> 00:05:28.528
create a new "Shout" and
put it in the data store.

00:05:28.528 --> 00:05:32.865
Then I'll redirect the user
back to the main page.

00:05:32.865 --> 00:05:34.567
Then I can go back to my
browser and see this is

00:05:34.567 --> 00:05:38.805
working right now.

00:05:38.805 --> 00:05:40.406
Now we're handling posts and
putting posts and putting data

00:05:40.406 --> 00:05:42.375
in the data store,
but we're no retrieving it.

00:05:42.375 --> 00:05:44.610
So let's create a query to get
the data back out and

00:05:44.610 --> 00:05:46.446
present it to the user.

00:05:46.446 --> 00:05:57.423
To do this I'll
create a "GqlQuery."

00:05:57.423 --> 00:06:00.026
And then I'll use the results
of the query to

00:06:00.026 --> 00:06:04.764
populate my templates.

00:06:04.764 --> 00:06:10.703
And passes values
into the template renderer.

00:06:10.703 --> 00:06:12.705
Then if I go into my template,
I can use the results of the

00:06:12.705 --> 00:06:19.312
query and render them
to the user.

00:06:19.312 --> 00:06:30.523
In this case,
I'm using Django templates.

00:06:30.523 --> 00:06:32.458
Now I can go back to my
browser and see this is

00:06:32.458 --> 00:06:36.496
immediately working.

00:06:36.496 --> 00:06:39.699
And there are my two
requests from before.

00:06:39.699 --> 00:06:43.236
Now I can type of few
more messages.

00:06:43.236 --> 00:06:45.204
You'll see they are not in
any particular order.

00:06:45.204 --> 00:06:59.685
So I'd like to add a sort
order to my query.

00:06:59.685 --> 00:07:04.957
New messages go to the top.

00:07:04.957 --> 00:07:07.226
I'll modify my model to have
another property,

00:07:07.226 --> 00:07:09.529
which is
"who set the message?"

00:07:09.529 --> 00:07:11.564
In this case, it's optional
because some of the messages

00:07:11.564 --> 00:07:15.768
were sent without
an explicit sender.

00:07:15.768 --> 00:07:16.769
Then I'm going to go to my
template and add

00:07:16.769 --> 00:07:29.215
that new field.

00:07:29.215 --> 00:07:33.186
It would also be good to have
labels on these input fields.

00:07:33.186 --> 00:07:35.121
Then I need to make sure that
when I create my shot I've

00:07:35.121 --> 00:07:41.093
correctly populated
the "who" field.

00:07:41.093 --> 00:07:43.095
I'd also like to render who
sent each message.

00:07:43.095 --> 00:07:51.571
So, I'll go back to my
template and add that too.

00:07:51.571 --> 00:07:53.372
In the case the "who" field is
empty, I'll just say

00:07:53.372 --> 00:08:10.189
it's from anonymous.

00:08:10.189 --> 00:08:11.290
Now let's go back to the
browser and see what

00:08:11.290 --> 00:08:13.960
this looks like.

00:08:13.960 --> 00:08:15.962
You can see all the messages
are from anonymous because

00:08:15.962 --> 00:08:17.263
none of them has a sender.

00:08:17.263 --> 00:08:24.303
Let's add a new one
with a sender for me.

00:08:24.303 --> 00:08:27.340
You'll see my name
has appeared.

00:08:27.340 --> 00:08:30.243
One last thing I'm going to do
is fix the title to point out

00:08:30.243 --> 00:08:35.982
this is my application
called "shoutout!"

00:08:35.982 --> 00:08:39.285
For this application,
I'll use the App Config Tool.

00:08:39.285 --> 00:08:41.687
I'll just type, "appcfig
update" to deploy my

00:08:41.687 --> 00:08:48.594
application and then the
naming application directory.

00:08:48.594 --> 00:08:49.862
And we're done.

00:08:49.862 --> 00:08:57.770
Now I can access this
application on appspot.com.

00:08:57.770 --> 00:09:04.810
Now let's leave a message.

00:09:04.810 --> 00:09:08.314
That's it. We built an
application and deployed it.

00:09:08.314 --> 00:09:10.049
We hope that you check
out Google App Engine. 

00:09:10.049 --> 00:09:12.018
We look forward to
hearing your comments.

00:09:12.018 --> 00:09:13.753
If you'd like to learn more
about App Engine, please join

00:09:13.753 --> 00:09:16.522
us at Google IO, Google's
developer event on

00:09:16.522 --> 00:09:18.558
May 28th and 29th.

00:09:18.558 --> 00:09:19.891
Thanks for watching.

