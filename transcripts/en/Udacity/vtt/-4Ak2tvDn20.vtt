WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.000
This is an interesting question.

00:00:02.000 --> 00:00:04.000
This is from Kevin E.

00:00:04.000 --> 00:00:07.000
This is from Kevin from Oregon.

00:00:07.000 --> 00:00:13.000
He is a high school math  teacher. Nice. &gt;&gt;Cool--and a cross-country skier.

00:00:16.000 --> 00:00:19.000
He has a pretty interesting question. 

00:00:19.000 --> 00:00:24.000
He's asking, "There has been talk within the press and the media about programming

00:00:24.000 --> 00:00:29.000
and knowledge of programming becoming a 3rd required literacy of education."

00:00:29.000 --> 00:00:34.000
At least in the United States it's very common that you have verbal requirements,

00:00:34.000 --> 00:00:40.000
learning how to read and write, and mathematics requirements, learning how to do algebra.

00:00:40.000 --> 00:00:45.000
I guess he's asking do you feel that programming could be that 3rd section that's kind of required

00:00:45.000 --> 00:00:48.000
and designed into every curriculum everywhere?

00:00:48.000 --> 00:00:51.000
I think this is a really interesting question. &gt;&gt;It is interesting.

00:00:51.000 --> 00:00:59.000
I think there's definitely a tremendous value for students learning programming early in school.

00:00:59.000 --> 00:01:04.000
I think there's a lot of things that in the traditional grade school curriculum--

00:01:04.000 --> 00:01:09.000
I'm speaking about the U.S, I don't know much about how that works in other parts of the world--

00:01:09.000 --> 00:01:13.000
hopefully they're more forward thinking than America has been.

00:01:13.000 --> 00:01:19.000
But what's taught in grade school is--and this actually goes through high school--

00:01:19.000 --> 00:01:22.000
is pretty much 1950s curriculum.

00:01:22.000 --> 00:01:29.000
It really hasn't changed, and there's a lot of time spent on learning how to do mechanical calculations.

00:01:29.000 --> 00:01:36.000
Students are basically learning algorithms for doing division, for solving complex problems

00:01:36.000 --> 00:01:41.000
by following mechanical steps, and they're learning how to do this very carefully and precisely--

00:01:41.000 --> 00:01:43.000
the kinds of things that computers should be doing, 

00:01:43.000 --> 00:01:48.000
and it would be much better if students were learning how to think about things algorithmically,

00:01:48.000 --> 00:01:51.000
how to think about how to describe the way to solve problems

00:01:51.000 --> 00:01:55.000
rather than following steps the way a computer follows them.

00:01:55.000 --> 00:02:03.000
I think I'm probably not the one who knows how to redesign our elementary school curriculum,

00:02:03.000 --> 00:02:06.000
although it's definitely a good thing to think about.

00:02:06.000 --> 00:02:11.000
I think there are great ways to learn about math by doing programming,

00:02:11.000 --> 00:02:16.000
and there are programs that are seeking to do that. &gt;&gt;At Euler?

00:02:16.000 --> 00:02:22.000
Euler. There's also a project that started at Northeastern doing this.

00:02:22.000 --> 00:02:26.000
So I there's a lot of--actual that started at Brown,

00:02:26.000 --> 00:02:33.000
I'm forgetting the name of it now. I was just hearing about it earlier today from our field trip to Missoula.

00:02:33.000 --> 00:02:38.000
But there are projects that are doing things where the best way to learn about physics 

00:02:38.000 --> 00:02:42.000
or to learn about math is really to build a simulation yourself.

00:02:42.000 --> 00:02:50.000
That's true also learning about lots of things in society like elections or how people interact with eachother.

00:02:50.000 --> 00:02:54.000
If students learned about programming when they were in school, 

00:02:54.000 --> 00:02:57.000
they would understand these things much better than the, I think,

00:02:57.000 --> 00:03:01.000
much more difficult ways of understand them as mathematical models.

00:03:01.000 --> 00:03:05.000
A lot of it is it's just a systematic way of thinking.

00:03:05.000 --> 00:03:09.000
I like the idea of thinking of it as a third branch of literacy 

00:03:09.000 --> 00:03:14.000
that everyone who wants to function well in the world and understand how things work

00:03:14.000 --> 00:03:16.000
really should understand programming.

00:03:16.000 --> 00:03:19.000
They don't have to be expert programmers, 

00:03:19.000 --> 00:03:24.000
but at least enough to be able to understand how things work.

00:03:24.000 --> 00:03:29.000
Is there an age requirement at Udacity?

00:03:29.000 --> 00:03:32.000
Where are our lawyers? I hope our lawyers aren't watching. &gt;&gt;Maybe we shouldn't answer that.

00:03:32.000 --> 00:03:34.000
We have no age requirement. 

00:03:34.000 --> 00:03:37.000
There are laws in the U.S. about 

00:03:37.000 --> 00:03:42.000
if you collect an email address from someone what age they can be.

00:03:42.000 --> 00:03:45.000
Identifiable information.

00:03:45.000 --> 00:03:50.000
We are happy to have all students in the class.

00:03:50.000 --> 00:03:53.000
Students that are under whatever legal age the U.S. law would say are--

00:03:53.000 --> 00:03:56.000
Well, our content is creative commons licensed.

00:03:56.000 --> 00:04:02.000
--yes, can definitely take the class, and we assume anyone tells us that their age is below

00:04:02.000 --> 00:04:05.000
whatever the minimum legal is--

00:04:05.000 --> 00:04:07.000
But what I'm more interested in is can you be too old? 

00:04:07.000 --> 00:04:12.000
You can't be too old. I know we definitely have 80-year-olds in the class.

00:04:12.000 --> 00:04:15.000
I hope we have a 90-year-old. I haven't heard from one directly yet.

00:04:15.000 --> 00:04:18.000
I had a conversation with an 82-year-old. That's cool.

00:04:18.000 --> 00:04:21.000
He was following along pretty well.

00:04:21.000 --> 00:04:24.000
I think it's great that there's lots of retired people in the class.

00:04:24.000 --> 00:04:27.000
I can say my mom is taking the class as well as my dad.

00:04:27.000 --> 00:04:33.000
I don't mention their ages. It's under 82, so that's good.

00:04:33.000 --> 00:04:35.000
Does anyone have a question they want to ask verbally?

00:04:41.000 --> 00:04:46.000
You got a compliment about I hope people are enjoying it as much as we here.

00:04:46.000 --> 00:04:54.000
We're having a great time, and a lot of what makes a class work are the contributions of students as well.

00:04:54.000 --> 00:04:57.000
That's fantastic. &gt;&gt;And that's very evident on the forums.

00:04:57.000 --> 00:05:02.000
Some of the stuff we see on the forums we share around the office.

00:05:02.000 --> 00:05:06.000
It's pretty amazing what some of our students do. That's my shout out to our students.

00:05:15.000 --> 00:05:18.000
How do programmers make a new programming language?

00:05:18.000 --> 00:05:23.000
Okay, yeah. How and why do people make a new programming language.

00:05:23.000 --> 00:05:25.000
Why would you need a new programming language?

00:05:25.000 --> 00:05:31.000
One of the things I may have mentioned--I don't remember.

00:05:31.000 --> 00:05:35.000
All programming languages are exactly as powerful in terms of 

00:05:35.000 --> 00:05:39.000
once you have the things--and I did talk about in Unit 2

00:05:39.000 --> 00:05:45.000
that once you know about if and procedures and variables and arithmetic, 

00:05:45.000 --> 00:05:48.000
you've got enough to write every possible program.

00:05:48.000 --> 00:05:50.000
Every programming language is equally powerful.

00:05:50.000 --> 00:05:54.000
They can all write the same exact set of all possible programs.

00:05:54.000 --> 00:05:57.000
In a theory class, that's explained more precisely what that means, 

00:05:57.000 --> 00:06:02.000
but once you have those few basic things, that's really enough to build everything else.

00:06:02.000 --> 00:06:06.000
That raises the good question of why are there thousands of programming languages.

00:06:06.000 --> 00:06:11.000
There are thousands, and there are people making up new programming languages all time.

00:06:11.000 --> 00:06:15.000
There are lots of different reasons to make a new language.

00:06:15.000 --> 00:06:18.000
Sometimes it's just for fun, and it's definitely something that you learn a lot from.

00:06:18.000 --> 00:06:21.000
I think those of you who take the programming languages class next

00:06:21.000 --> 00:06:24.000
will get a sense for how easy it is to change what a language means

00:06:24.000 --> 00:06:27.000
and how interesting it is to do that.

00:06:27.000 --> 00:06:30.000
There are joke languages too. &gt;&gt;There are. Yeah. 

00:06:30.000 --> 00:06:33.000
Languages created just to be funny.

00:06:33.000 --> 00:06:37.000
That's one reason. There are more serious reasons to create a new language.

00:06:37.000 --> 00:06:41.000
All of language design is really a trade off. You're trading off different things.

00:06:41.000 --> 00:06:47.000
You're trading off how easy it is to write programs with how fast your programs can fun.

00:06:47.000 --> 00:06:51.000
We've chosen to teach 101 in a language that's Python that is designed

00:06:51.000 --> 00:06:56.000
where making it easy to write programs is more important than making the programs run fast.

00:06:56.000 --> 00:07:00.000
There are other languages, and if you're writing code for, say,

00:07:00.000 --> 00:07:06.000
controlling the fighter jet, how fast it takes to make decisions is more important

00:07:06.000 --> 00:07:09.000
than how easy it is for the code to write.

00:07:09.000 --> 00:07:12.000
You can spend millions of dollars getting the code written. You hope it's correct.

00:07:12.000 --> 00:07:16.000
But performance is much more important. That's one trade off. 

00:07:16.000 --> 00:07:20.000
Another trade off is between how expressive the language is 

00:07:20.000 --> 00:07:25.000
and how easy it is to write something that doesn't mean what you want it to mean.

00:07:25.000 --> 00:07:27.000
Python is quite an expressive language. 

00:07:27.000 --> 00:07:30.000
It's easy to write things in Python 

00:07:30.000 --> 00:07:34.000
that seem correct but don't mean exactly what you wanted them to mean.

00:07:34.000 --> 00:07:39.000
There are other languages that try much harder to make it so if you write code

00:07:39.000 --> 00:07:44.000
and the code runs, it's more likely to mean exactly what you thought it meant.

00:07:44.000 --> 00:07:48.000
Those languages do things that make it harder to accidentally write a program

00:07:48.000 --> 00:07:50.000
that means something different.

00:07:50.000 --> 00:07:54.000
There are lots of different programming languages for both reasons of style and taste,

00:07:55.000 --> 00:08:00.000
but there are also some good engineering reasons why we need many different programming languages.

00:08:10.000 --> 00:08:12.000
Feel free to ask a question. 

00:08:12.000 --> 00:08:15.000
Until then we're going to just look through the forums.

00:08:15.000 --> 00:08:20.000
Do we have the audio on? &gt;&gt;Audio is on. Oh, I don't have audio on. Sorry.

00:08:20.000 --> 00:08:28.000
If someone was talking, would you please repeat the question? I've got to get better at that.

