WEBVTT
Kind: captions
Language: en

00:00:15.320 --> 00:00:17.190
BASTIEN LEGRAS: So now we're
going to talk about Cloud

00:00:17.190 --> 00:00:20.200
Storage, which is
one compartment

00:00:20.200 --> 00:00:21.470
of the Cloud Platform.

00:00:21.470 --> 00:00:22.850
So why Cloud Storage?

00:00:22.850 --> 00:00:24.960
What is Cloud Storage?

00:00:24.960 --> 00:00:28.590
So the general challenge we
detected in the market on

00:00:28.590 --> 00:00:32.320
Cloud Storage and on storage in
general is that people have

00:00:32.320 --> 00:00:35.370
more and more difficulty to
patch the system, to do

00:00:35.370 --> 00:00:40.030
replication, to do disaster
recovery, to locate storage.

00:00:40.030 --> 00:00:43.630
And that's why we thought that
because at Google, we have a

00:00:43.630 --> 00:00:46.475
huge infrastructure, we have a
lot of hard drives and a lot

00:00:46.475 --> 00:00:50.840
of capacity of storage, we could
help people store data--

00:00:50.840 --> 00:00:53.010
companies, large companies,
as well--

00:00:53.010 --> 00:00:55.980
by giving them an easy solution
to store any type of

00:00:55.980 --> 00:00:59.240
object up to four terabytes.

00:00:59.240 --> 00:01:04.349
And this object is ultimately
replicated in our cloud.

00:01:04.349 --> 00:01:09.520
And because we own our
bandwidth, all of the fibers

00:01:09.520 --> 00:01:12.280
between our data centers, we
can do live replication.

00:01:12.280 --> 00:01:15.760
So the idea is that you can
upload from anywhere, and have

00:01:15.760 --> 00:01:18.890
the files available from any
of the data centers.

00:01:18.890 --> 00:01:21.580
So you can have a global
storage system for your

00:01:21.580 --> 00:01:25.300
application, and for your
backend, if you are in a

00:01:25.300 --> 00:01:28.780
mobile application development
scenario.

00:01:28.780 --> 00:01:31.110
So the main use case, as we
see, content sharing.

00:01:31.110 --> 00:01:33.425
Some people now are using Cloud
Storage directly to

00:01:33.425 --> 00:01:36.190
offload the bandwidth of their
website, because you can link

00:01:36.190 --> 00:01:39.180
heavy files directly to cloud
storage, because there is an

00:01:39.180 --> 00:01:43.700
HTTP URL that is associated
with each of the files.

00:01:43.700 --> 00:01:46.120
And if you make the file public,
the idea is that

00:01:46.120 --> 00:01:48.330
people can download
directly the file.

00:01:48.330 --> 00:01:51.820
And because we have what we call
an edge cache at Google,

00:01:51.820 --> 00:01:54.430
so we have thousands of network
infrastructure in the

00:01:54.430 --> 00:01:57.220
world, the idea is that the
first one is going to pull the

00:01:57.220 --> 00:01:59.060
files from the data center.

00:01:59.060 --> 00:02:01.200
That would be copied
in our edge cache.

00:02:01.200 --> 00:02:03.880
And the next one will only
go to the edge cache.

00:02:03.880 --> 00:02:04.950
So a practical example--

00:02:04.950 --> 00:02:09.449
imagine you store in Central
Europe your files.

00:02:09.449 --> 00:02:12.630
Someone in Italy goes on your
website or uses your mobile

00:02:12.630 --> 00:02:15.700
application, requests the file--
so it can be an update

00:02:15.700 --> 00:02:17.150
of the application.

00:02:17.150 --> 00:02:19.470
The file will be stored clearly
in one of the main

00:02:19.470 --> 00:02:21.900
cities in Italy, so the next one
won't have to go back to

00:02:21.900 --> 00:02:23.520
Central Europe or US.

00:02:23.520 --> 00:02:27.140
It will be much faster in terms
of latency, and in terms

00:02:27.140 --> 00:02:29.770
of bandwidth as well.

00:02:29.770 --> 00:02:32.450
Archive backup, so that's
quite obvious.

00:02:32.450 --> 00:02:35.740
Data sharing, because the idea
is that you can share an

00:02:35.740 --> 00:02:42.100
object to any Google account
directly, in, of course, a

00:02:42.100 --> 00:02:44.030
very secure way.

00:02:44.030 --> 00:02:47.510
So the idea is that we have
companies in the cinema who

00:02:47.510 --> 00:02:50.860
wants to have the
original movie.

00:02:50.860 --> 00:02:53.400
They will store it and exchange
it from New York or

00:02:53.400 --> 00:02:57.430
Hollywood to Europe directly
using Cloud Storage, because

00:02:57.430 --> 00:03:01.030
this is very secure
and very fast.

00:03:01.030 --> 00:03:02.900
Storage for applications,
of course,

00:03:02.900 --> 00:03:04.800
and for Compute Engine.

00:03:04.800 --> 00:03:08.050
Compute Engine, because for all
the HPC in I/O, like High

00:03:08.050 --> 00:03:12.460
Performance Computing, people
usually need to crunch a large

00:03:12.460 --> 00:03:14.300
amount of binary data.

00:03:14.300 --> 00:03:17.250
And they need to have that
central storage, and to

00:03:17.250 --> 00:03:19.360
request it to do the computation
on each of the

00:03:19.360 --> 00:03:22.020
machines, and then give
back the results.

00:03:22.020 --> 00:03:24.920
So that's another use case.

00:03:24.920 --> 00:03:29.730
So as I said, the idea is not
like one hard drive on one

00:03:29.730 --> 00:03:31.850
server in one data center
with Cloud Storage.

00:03:31.850 --> 00:03:33.620
This is really a global
solution.

00:03:33.620 --> 00:03:35.790
This is something we
are using at Google

00:03:35.790 --> 00:03:36.840
for a lot of projects.

00:03:36.840 --> 00:03:39.640
And on the left side, we have
some ideas of which projects

00:03:39.640 --> 00:03:40.840
are using it.

00:03:40.840 --> 00:03:44.860
So what we really think is key
there is the performance of

00:03:44.860 --> 00:03:47.320
the networks, the accessibility
to the file, and

00:03:47.320 --> 00:03:50.150
the replication, so the high
availability of the file.

00:03:50.150 --> 00:03:54.180
So that's why we have
SLAs 99.95 on

00:03:54.180 --> 00:03:57.200
these kinds of solutions.

00:03:57.200 --> 00:04:00.140
The network, again-- so between
data centers, between

00:04:00.140 --> 00:04:04.960
data centers and the end users,
this is usually our

00:04:04.960 --> 00:04:09.520
network up to the very last
mile, which is a telco.

00:04:09.520 --> 00:04:12.640
There will be from the user to
our point of presence maybe,

00:04:12.640 --> 00:04:14.140
let's say, fast web.

00:04:14.140 --> 00:04:16.600
And as soon as they go into
our fast web peering

00:04:16.600 --> 00:04:19.079
agreement, because we have
peering agreements with all

00:04:19.079 --> 00:04:21.970
the telcos, then you are
on Google network.

00:04:21.970 --> 00:04:24.950
And then it goes really,
really fast.

00:04:24.950 --> 00:04:27.620
As I said, so it's up to five
terabytes per object.

00:04:30.190 --> 00:04:30.760
I will show you it.

00:04:30.760 --> 00:04:31.915
So you have--

00:04:31.915 --> 00:04:33.350
we call them buckets.

00:04:33.350 --> 00:04:36.280
You see it like a folder, and
then within buckets, you can

00:04:36.280 --> 00:04:40.940
create these kind of folders,
and upload, modify, archive.

00:04:40.940 --> 00:04:42.440
You can do so also versioning.

00:04:42.440 --> 00:04:43.690
There's a lot of features.

00:04:45.850 --> 00:04:47.720
OK, I don't want to repeat
myself too much, but it's

00:04:47.720 --> 00:04:51.310
really about speed, reliability,
and scalability,

00:04:51.310 --> 00:04:51.990
in terms of storage.

00:04:51.990 --> 00:04:55.200
We have customers right now who
are storing more than 10

00:04:55.200 --> 00:04:57.430
petabytes of data.

00:05:01.930 --> 00:05:04.260
Next.

00:05:04.260 --> 00:05:05.000
How does it work?

00:05:05.000 --> 00:05:06.570
How can you use it?

00:05:06.570 --> 00:05:10.500
So as always, this is an
API, so a RESTful API.

00:05:10.500 --> 00:05:13.620
And we, as always, have three
ways that you can connect.

00:05:13.620 --> 00:05:15.930
So you have the API directly,
if you need to do deep

00:05:15.930 --> 00:05:17.850
integration with your
application.

00:05:17.850 --> 00:05:20.130
We have a common tool
called gsutil, and I

00:05:20.130 --> 00:05:21.890
will show it after.

00:05:21.890 --> 00:05:24.300
And we have also the UI,
so in the browser.

00:05:24.300 --> 00:05:25.720
And I will show it as well.

00:05:25.720 --> 00:05:30.010
So you can browse your files
when you are testing.

00:05:30.010 --> 00:05:34.220
So the API, so as I said,
RESTful buckets and objects.

00:05:34.220 --> 00:05:36.960
So the idea is that that's
really a snippet of what you

00:05:36.960 --> 00:05:38.980
can do, just put on HTTP.

00:05:38.980 --> 00:05:42.140
So we do, as always, the client
API to help you save

00:05:42.140 --> 00:05:46.460
some time, if you want to use
the Java client, or the .NET

00:05:46.460 --> 00:05:49.670
client or whatever language to
save some time and not work at

00:05:49.670 --> 00:05:52.510
the HTTP level.

00:05:52.510 --> 00:05:57.470
And of course, by REST, we
mean HTTP headers, so

00:05:57.470 --> 00:05:59.510
really a pure HTTP.

00:05:59.510 --> 00:06:00.790
So you can connect--

00:06:00.790 --> 00:06:02.370
what it means is that you
can connect from nearly

00:06:02.370 --> 00:06:05.440
everywhere, and any kind
of technology.

00:06:05.440 --> 00:06:08.540
It is very easy to
be the connector.

00:06:08.540 --> 00:06:12.460
And we have an ecosystem of
partners who are providing

00:06:12.460 --> 00:06:15.200
appliances to the storage.

00:06:15.200 --> 00:06:16.430
Some features, so you can do

00:06:16.430 --> 00:06:18.370
streaming, resumable transfer--

00:06:18.370 --> 00:06:22.050
so if you have a large file
upload or download, and the

00:06:22.050 --> 00:06:25.120
connection point is broken,
then you can resume at the

00:06:25.120 --> 00:06:27.510
precise byte where
you were stopped.

00:06:27.510 --> 00:06:30.950
Optimized browser upload and
download, and also you can do

00:06:30.950 --> 00:06:32.636
a multi-part upload.

00:06:32.636 --> 00:06:37.230
I will talk about that later, if
you have a very large file.

00:06:37.230 --> 00:06:41.730
So resumable upload, so here you
can see code snippets as

00:06:41.730 --> 00:06:42.840
well showing how you do that.

00:06:42.840 --> 00:06:46.030
You know, you will set which
range you want to upload or

00:06:46.030 --> 00:06:48.570
download directly,
within a file.

00:06:48.570 --> 00:06:50.665
Because we talk about large
files, so of course you don't

00:06:50.665 --> 00:06:53.180
want to re-download or re-upload
a full file.

00:06:53.180 --> 00:06:59.090
You can download just a specific
part of the file.

00:06:59.090 --> 00:07:02.220
The gateway is here as well.

00:07:02.220 --> 00:07:04.540
About security, how
does it work?

00:07:04.540 --> 00:07:07.570
So there is a default ACL,
so Access Control List.

00:07:07.570 --> 00:07:10.460
And then you can specify
ACLs per object.

00:07:10.460 --> 00:07:15.090
So you can imagine specifying
permission to a technical

00:07:15.090 --> 00:07:18.260
account, so a various set of
permissions, and then you can

00:07:18.260 --> 00:07:21.800
map these permissions to
the relevant object.

00:07:21.800 --> 00:07:24.300
And for browser access, we
use OAuth 2, as always.

00:07:27.490 --> 00:07:30.890
So the gsutil, so that's
a preview.

00:07:30.890 --> 00:07:33.660
But I'll open my terminal
from the Mac, to

00:07:33.660 --> 00:07:35.600
show you how it works.

00:07:35.600 --> 00:07:38.510
An example from Python,
so three lines.

00:07:38.510 --> 00:07:42.730
You just type the library, and
the you pass the command.

00:07:42.730 --> 00:07:44.460
And the URI is gs--

00:07:44.460 --> 00:07:45.660
Google Storage--

00:07:45.660 --> 00:07:47.880
semicolon slash slash.

00:07:47.880 --> 00:07:50.160
And the REST way, we already
had an example before.

00:07:52.720 --> 00:07:55.040
So the ecosystem--

00:07:55.040 --> 00:07:59.150
these are the first ones, but
there are new ones since then

00:07:59.150 --> 00:08:01.370
who are building solutions.

00:08:01.370 --> 00:08:04.250
So I know that Panzura and
TwinStrata, for example, what

00:08:04.250 --> 00:08:08.420
they do is that they sell
appliances to large companies.

00:08:08.420 --> 00:08:10.600
And these appliances, the
companies put them in their

00:08:10.600 --> 00:08:11.780
data center.

00:08:11.780 --> 00:08:16.480
And they can then do like a
network share directly.

00:08:16.480 --> 00:08:18.720
So from your Windows
environment, you can connect

00:08:18.720 --> 00:08:23.220
to a network drive, and you
don't even know it's cloud

00:08:23.220 --> 00:08:24.710
storage behind the scene.

00:08:24.710 --> 00:08:27.340
So they export a type of
protocol, and they do caching,

00:08:27.340 --> 00:08:29.870
so you have fast performance.

00:08:29.870 --> 00:08:32.090
So some use cases--

00:08:32.090 --> 00:08:35.380
and that's very useful
to augment.

00:08:35.380 --> 00:08:39.090
You can say I have a limited
space, and I want to be able

00:08:39.090 --> 00:08:42.240
to have more space, but I don't
know how much I need

00:08:42.240 --> 00:08:45.110
cloud storage, because it's
pay per use, as always.

00:08:45.110 --> 00:08:47.280
It's very nice to
have a burstable

00:08:47.280 --> 00:08:49.940
zone, so you can extend.

00:08:49.940 --> 00:08:53.300
That's the enterprise
use case.

00:08:53.300 --> 00:08:57.620
So that's not a pretty slide,
but these are the main

00:08:57.620 --> 00:09:00.480
features we see.

00:09:00.480 --> 00:09:03.140
So bucket model--

00:09:03.140 --> 00:09:05.450
we insist on the reliability.

00:09:05.450 --> 00:09:08.810
So read after write, what we
really mean is that you can

00:09:08.810 --> 00:09:12.080
really think of, I don't know,
uploading a one-terabyte file

00:09:12.080 --> 00:09:15.180
from New York, and download
it three seconds

00:09:15.180 --> 00:09:17.810
after from here, Roma.

00:09:17.810 --> 00:09:19.080
And that will be
the same file.

00:09:19.080 --> 00:09:21.700
You don't have to wait for
replication overnight.

00:09:21.700 --> 00:09:24.730
This is really global,
live, realtime.

00:09:24.730 --> 00:09:27.230
That's really the idea.

00:09:27.230 --> 00:09:30.800
The API, we are interoperable
with Amazon S3.

00:09:30.800 --> 00:09:36.780
I guess we imagine this is our
main competitor today.

00:09:36.780 --> 00:09:38.720
I talked about the
access control.

00:09:38.720 --> 00:09:42.450
And some new features about
notification, versioning, JSON

00:09:42.450 --> 00:09:44.210
API, et cetera, et cetera.

00:09:44.210 --> 00:09:45.540
Composite object as well--

00:09:45.540 --> 00:09:48.000
composite object is nice,
because you imagine you have a

00:09:48.000 --> 00:09:49.170
very large file.

00:09:49.170 --> 00:09:51.530
We can split it in small files
and upload all of them in

00:09:51.530 --> 00:09:53.610
parallel, so you can optimize
your bandwidth.

00:09:56.170 --> 00:10:01.690
These are some examples of
the gcutil command line.

00:10:01.690 --> 00:10:03.290
So this is pretty simple.

00:10:03.290 --> 00:10:04.690
It is gcutil cp.

00:10:04.690 --> 00:10:09.380
Gcutil is a simple binary you
can download in a zip or tar

00:10:09.380 --> 00:10:12.070
format and run it from
any kind of terminal.

00:10:12.070 --> 00:10:14.050
So this is using shell.

00:10:14.050 --> 00:10:17.650
And it has basic functions,
but it has also

00:10:17.650 --> 00:10:18.900
more advanced functions.

00:10:22.440 --> 00:10:27.220
So here's a way you can get
gcutil-- gsutil, sorry.

00:10:27.220 --> 00:10:31.220
There is some links to the
documentation, to the SDK.

00:10:31.220 --> 00:10:36.300
And the Python package is
also available online.

00:10:36.300 --> 00:10:38.440
Here are the main functions.

00:10:38.440 --> 00:10:41.490
We won't go one by one, but just
to give you an idea of

00:10:41.490 --> 00:10:46.210
what kinds of functions you
can do from gsutil.

00:10:46.210 --> 00:10:49.110
Like the perfdiag, nice also
when you want to see if the

00:10:49.110 --> 00:10:51.580
performance is good between
you and your

00:10:51.580 --> 00:10:54.280
network in Cloud Storage.

00:10:54.280 --> 00:10:57.140
The object composition that I've
been mentioning earlier--

00:10:57.140 --> 00:11:01.690
so as you can see, first you
split your big file.

00:11:01.690 --> 00:11:04.850
So that's really convenient
when you want to upload

00:11:04.850 --> 00:11:08.390
hundreds of megabytes or
terabytes or more.

00:11:08.390 --> 00:11:09.620
You can split your file.

00:11:09.620 --> 00:11:12.360
You can do a multi-part
upload, so

00:11:12.360 --> 00:11:13.680
it will run in parallel.

00:11:13.680 --> 00:11:15.950
So you can define a number
of threads you

00:11:15.950 --> 00:11:17.640
want to run in parallel.

00:11:17.640 --> 00:11:19.750
And then it will compose.

00:11:19.750 --> 00:11:22.350
And then, at the end,
you delete--

00:11:22.350 --> 00:11:28.620
the composer will regroup into
a big file, your parts files,

00:11:28.620 --> 00:11:31.120
and at the end, you delete
your parts files.

00:11:31.120 --> 00:11:33.270
So that's one way to
upload a very, very

00:11:33.270 --> 00:11:35.600
large amount of data.

00:11:35.600 --> 00:11:37.100
One example--

00:11:37.100 --> 00:11:39.600
five petabytes in five weeks,
so that's where we use case

00:11:39.600 --> 00:11:40.870
from the UK.

00:11:40.870 --> 00:11:44.790
We can't disclose the name of
the customer, but it has

00:11:44.790 --> 00:11:46.020
millions of users.

00:11:46.020 --> 00:11:48.940
It's doing backups
for end users.

00:11:48.940 --> 00:11:52.940
And they had to migrate
from Amazon S3 into

00:11:52.940 --> 00:11:54.250
Google Cloud Storage.

00:11:54.250 --> 00:11:58.120
And what we explain here is that
they started earlier this

00:11:58.120 --> 00:12:00.080
year, like in January,
February.

00:12:00.080 --> 00:12:02.330
And that is the type of
performance we get.

00:12:02.330 --> 00:12:04.210
Because we have, as we said,
a strong network.

00:12:04.210 --> 00:12:06.880
So we have pretty good
connections with other big

00:12:06.880 --> 00:12:08.510
cloud players.

00:12:08.510 --> 00:12:10.900
So 10 gigabytes per second,
even more when

00:12:10.900 --> 00:12:13.270
we reach the peaks.

00:12:13.270 --> 00:12:14.360
And how does it work?

00:12:14.360 --> 00:12:18.070
How do we implement such
a large upload?

00:12:18.070 --> 00:12:20.130
So that's how it works.

00:12:20.130 --> 00:12:24.870
So again, when I said earlier in
my presentation, we see App

00:12:24.870 --> 00:12:28.190
Engine as an orchestrator, so
App Engine is very convenient

00:12:28.190 --> 00:12:29.140
for that kind of usage.

00:12:29.140 --> 00:12:34.400
So it will directly start to
create the test use that will

00:12:34.400 --> 00:12:36.220
download from Amazon
S3 and then

00:12:36.220 --> 00:12:37.790
upload from Cloud Storage.

00:12:37.790 --> 00:12:41.900
Compute Engine here is the right
product to implement the

00:12:41.900 --> 00:12:44.870
migration workers data.

00:12:44.870 --> 00:12:48.720
And then you can imagine, you
can spin 1 to 10 to 100

00:12:48.720 --> 00:12:51.190
machines, as much as you want.

00:12:51.190 --> 00:12:54.380
You would be limited, of course,
by the network, not by

00:12:54.380 --> 00:12:55.610
the number of machines.

00:12:55.610 --> 00:12:57.790
And then it will upload
directly into

00:12:57.790 --> 00:12:59.150
the migration bucket.

00:12:59.150 --> 00:13:00.990
And the idea is that you
need to check for

00:13:00.990 --> 00:13:04.610
that type of big upload.

00:13:04.610 --> 00:13:07.420
You need to check the
consistency of the files.

00:13:07.420 --> 00:13:15.060
So you can do directly that with
CRC, from another worker.

00:13:15.060 --> 00:13:17.410
That's the type of architecture
to upload a very

00:13:17.410 --> 00:13:18.660
large amount of files.

00:13:21.364 --> 00:13:23.780
So as I said, we are using
it internally, always.

00:13:23.780 --> 00:13:27.860
All Google projects are always
projects we choose to build

00:13:27.860 --> 00:13:29.620
because we couldn't
find the right

00:13:29.620 --> 00:13:31.420
technology on the market.

00:13:31.420 --> 00:13:32.360
It's true for Gmail.

00:13:32.360 --> 00:13:33.890
It's true for all
Google projects.

00:13:33.890 --> 00:13:36.790
So all these Google projects are
using Google Cloud Storage

00:13:36.790 --> 00:13:39.300
today, maybe even more, because
this slide is not

00:13:39.300 --> 00:13:42.400
really recent.

00:13:42.400 --> 00:13:45.510
And of course, Big Query and
Prediction, which are two

00:13:45.510 --> 00:13:49.060
other Cloud Platform projects.

00:13:49.060 --> 00:13:51.490
What you do is you always
upload on Cloud Storage.

00:13:51.490 --> 00:13:53.170
And from Big Query, you
have one command.

00:13:53.170 --> 00:13:55.300
So you can load into Big
Query before you

00:13:55.300 --> 00:13:57.140
run your SQL requests.

00:13:57.140 --> 00:14:01.130
Prediction is using the Cloud
Storage the same way.

00:14:01.130 --> 00:14:05.430
OK, so let me show you
the gsutil stuff--

00:14:05.430 --> 00:14:08.830
so I need to sit down, sorry--

00:14:08.830 --> 00:14:09.510
and the UI.

00:14:09.510 --> 00:14:15.360
And so first with the
UI, so that's it.

00:14:15.360 --> 00:14:19.830
So here I am on the
cloud.google.com/console.

00:14:19.830 --> 00:14:23.930
This is really where you have
access to all your services.

00:14:23.930 --> 00:14:26.380
I am on the Cloud Service
project for this--

00:14:26.380 --> 00:14:28.400
AUDIENCE: [INAUDIBLE]

00:14:28.400 --> 00:14:29.235
BASTIEN LEGRAS: Sorry?

00:14:29.235 --> 00:14:31.300
Oh, you don't see the
URL, exactly.

00:14:31.300 --> 00:14:33.390
Yeah, I don't know why,
because the projector

00:14:33.390 --> 00:14:34.500
is going too high.

00:14:34.500 --> 00:14:35.890
OK, it's not really important.

00:14:35.890 --> 00:14:36.370
The idea--

00:14:36.370 --> 00:14:40.110
I can show it, so
cloud.google.com/console.

00:14:40.110 --> 00:14:43.190
This is where you see
your console.

00:14:43.190 --> 00:14:44.330
From where do you see it?

00:14:44.330 --> 00:14:44.930
From there.

00:14:44.930 --> 00:14:45.550
So it's OK.

00:14:45.550 --> 00:14:49.020
So in Cloud Storage--
so this is the web

00:14:49.020 --> 00:14:50.140
UI for Cloud Storage.

00:14:50.140 --> 00:14:52.160
You see all the buckets
on the left.

00:14:52.160 --> 00:14:55.510
So here, we are on the
internal Google

00:14:55.510 --> 00:14:57.010
demo platform project.

00:14:57.010 --> 00:14:59.370
So it's not only me.

00:14:59.370 --> 00:15:03.940
I have my bucket right there,
bastien-test, where I have

00:15:03.940 --> 00:15:04.950
some files.

00:15:04.950 --> 00:15:09.390
And the idea is you can drag and
drop directly a file from

00:15:09.390 --> 00:15:11.790
your explorer--

00:15:11.790 --> 00:15:15.580
sorry, it's not a good
idea, because Chrome

00:15:15.580 --> 00:15:17.040
is overriding that.

00:15:17.040 --> 00:15:20.390
Let's go with this
type of file.

00:15:22.970 --> 00:15:25.830
OK, let's do that that way.

00:15:25.830 --> 00:15:29.560
Normally, I have
drag and drop.

00:15:29.560 --> 00:15:31.380
But basically--

00:15:31.380 --> 00:15:32.820
let that go away.

00:15:32.820 --> 00:15:36.110
So it will upload the
file directly, and

00:15:36.110 --> 00:15:38.230
you will see it here.

00:15:38.230 --> 00:15:39.940
And you can do exactly
the same type of

00:15:39.940 --> 00:15:43.076
operation from gsutil.

00:15:43.076 --> 00:15:45.493
I don't know if the resolution
is good enough for you.

00:15:50.590 --> 00:15:51.560
Can you see?

00:15:51.560 --> 00:15:57.540
So that's the list of commands
we have on gsutil.

00:15:57.540 --> 00:16:01.190
And basically, you
just do a cp.

00:16:01.190 --> 00:16:04.370
So I'm going to first delete
this file so you can see it if

00:16:04.370 --> 00:16:05.030
I come back.

00:16:05.030 --> 00:16:08.360
So you can delete the object
directly from here.

00:16:08.360 --> 00:16:12.010
I'm doing it here with a small
object, but I've been

00:16:12.010 --> 00:16:13.790
uploading, as you can see.

00:16:13.790 --> 00:16:15.040
Sorry.

00:16:18.010 --> 00:16:21.192
It's coming back.

00:16:21.192 --> 00:16:22.442
AUDIENCE: [INAUDIBLE]

00:16:24.510 --> 00:16:26.080
BASTIEN LEGRAS: Yeah.

00:16:26.080 --> 00:16:27.600
I've been told that you
don't see very well.

00:16:30.140 --> 00:16:34.250
So that's the list of the
buckets on the left.

00:16:34.250 --> 00:16:37.610
So you will see them
as root folders.

00:16:37.610 --> 00:16:40.010
And I am currently showing
one bucket which is mine,

00:16:40.010 --> 00:16:43.430
bastien-test, where I have some

00:16:43.430 --> 00:16:44.980
files that I have uploaded.

00:16:44.980 --> 00:16:47.500
And I wanted to highlight
that--

00:16:47.500 --> 00:16:49.170
that's not even a
very large file.

00:16:49.170 --> 00:16:51.390
As I said, we can go up
to five terabytes.

00:16:51.390 --> 00:16:53.740
So you can drag and drop
normally from the browser.

00:16:53.740 --> 00:16:56.150
And you can also upload--

00:16:56.150 --> 00:16:58.130
so that's what I wanted
to show--

00:16:58.130 --> 00:17:00.810
from gsutil directly.

00:17:00.810 --> 00:17:05.890
This is how you're going
to use it afterwards.

00:17:05.890 --> 00:17:08.630
So I am right now in
my local folder.

00:17:08.630 --> 00:17:17.310
And I'll just do a cp test with
the PDF I was uploading

00:17:17.310 --> 00:17:18.619
directly to the bucket.

00:17:18.619 --> 00:17:20.910
You don't see it?

00:17:20.910 --> 00:17:22.160
Right there.

00:17:24.500 --> 00:17:27.690
Thanks to the Apple OS.

00:17:27.690 --> 00:17:30.430
So it's uploading the PDF.

00:17:30.430 --> 00:17:34.600
And now I would force
a refresh.

00:17:34.600 --> 00:17:38.616
And you see my PDF is back
there, uploading right now.

00:17:38.616 --> 00:17:40.860
It's in local time.

00:17:40.860 --> 00:17:42.390
OK, so very easy.

00:17:42.390 --> 00:17:45.300
So of course, there are many,
many other commands.

00:17:45.300 --> 00:17:51.880
You can use the multi-thread
version, et cetera.

00:17:51.880 --> 00:17:53.545
Let's try the perf stuff.

00:17:58.420 --> 00:17:59.850
No, not the right one.

00:17:59.850 --> 00:18:01.100
How is it?

00:18:03.240 --> 00:18:04.490
Gsutil--

00:18:07.290 --> 00:18:09.680
oh, there is a [INAUDIBLE]
command line for that.

00:18:09.680 --> 00:18:11.870
So I won't go into all the
commands, but the idea is that

00:18:11.870 --> 00:18:12.680
it's really simple.

00:18:12.680 --> 00:18:13.960
You have your commands
right there.

00:18:13.960 --> 00:18:17.120
You can upload your files,
download your files, and do

00:18:17.120 --> 00:18:19.090
multi-part uploads as well.

00:18:19.090 --> 00:18:23.120
And this is the UI, so you can
do basic operations, like

00:18:23.120 --> 00:18:25.920
working on the object
permissions, which group has

00:18:25.920 --> 00:18:27.270
access to what.

00:18:27.270 --> 00:18:29.980
And that's, of course, live.

00:18:29.980 --> 00:18:31.230
That's, of course--

00:18:35.470 --> 00:18:40.910
this is updated live on the
[INAUDIBLE] of the object.

00:18:40.910 --> 00:18:44.730
OK, I've been quite fast
on Cloud Storage.

00:18:44.730 --> 00:18:49.290
So now what we're going to do is
go with the infrastructure

00:18:49.290 --> 00:18:51.850
in general in Compute Engine.

00:18:51.850 --> 00:18:54.950
But what I would like, so unless
someone tells me you

00:18:54.950 --> 00:18:59.460
have already seen the video,
but it's five minutes long.

00:18:59.460 --> 00:19:02.920
It's Urs Holzle, our director.

00:19:02.920 --> 00:19:05.400
Has anyone already seen
that video, Cloud

00:19:05.400 --> 00:19:06.570
Platform Track Kickoff?

00:19:06.570 --> 00:19:07.520
It's really, really key.

00:19:07.520 --> 00:19:10.860
But because this guy is the
first engineer at Google.

00:19:10.860 --> 00:19:14.650
He's now head of the world
infrastructure, so within

00:19:14.650 --> 00:19:16.430
which we have Cloud Platform.

00:19:16.430 --> 00:19:17.610
He's really inspiring.

00:19:17.610 --> 00:19:19.930
So I prefer to let
him talk for five

00:19:19.930 --> 00:19:21.860
minutes, rather than me.

00:19:21.860 --> 00:19:25.970
So it will explain to you what
we have been doing for 14

00:19:25.970 --> 00:19:28.430
years with our data centers,
our network.

00:19:28.430 --> 00:19:30.490
I think it's really important
for you to understand that

00:19:30.490 --> 00:19:33.730
before I go on Compute Engine,
which is the virtualization

00:19:33.730 --> 00:19:36.330
machine technology.

00:19:36.330 --> 00:19:38.770
I will do some demo as well.

00:19:38.770 --> 00:19:41.370
So I hope the network
is with us.

00:19:41.370 --> 00:19:46.360
And I would like to have to
have a mic, the red one.

00:19:46.360 --> 00:19:47.796
[VIDEO PLAYBACK]

00:28:45.700 --> 00:28:46.250
[END VIDEO PLAYBACK]

00:28:46.250 --> 00:28:47.160
BASTIEN LEGRAS: Let's
stop there.

00:28:47.160 --> 00:28:49.710
If you want to see the whole
video, you just search--

00:28:49.710 --> 00:28:52.460
I will show you after, because
I want to work on

00:28:52.460 --> 00:28:53.600
this slide as well.

00:28:53.600 --> 00:28:57.080
So it's really interesting to
see all these projects.

00:28:57.080 --> 00:28:59.710
Maybe you haven't heard about
[INAUDIBLE] from Java, because

00:28:59.710 --> 00:29:03.650
these are usually our internal
code names for projects.

00:29:03.650 --> 00:29:08.440
What you need to understand is
that we built App Engine

00:29:08.440 --> 00:29:12.270
Datastore, it was Big
Table right away.

00:29:12.270 --> 00:29:16.130
So the initial Datastore of App
Engine when App Engine was

00:29:16.130 --> 00:29:19.370
released in 2008, it's
Cloud Data Storage.

00:29:19.370 --> 00:29:21.460
The Cloud Data Storage
of today originated

00:29:21.460 --> 00:29:23.310
from here, Big Table.

00:29:23.310 --> 00:29:26.750
What you see here, Colossus,
from last year, it's Google

00:29:26.750 --> 00:29:27.980
Cloud Storage.

00:29:27.980 --> 00:29:30.770
So it was a great introduction
to Google Cloud Storage.

00:29:30.770 --> 00:29:34.150
I should have put it before my
Cloud Storage presentation.

00:29:34.150 --> 00:29:36.840
So this is the internal name
of Google Cloud Storage.

00:29:36.840 --> 00:29:41.170
And Dremel is the internal
name of Google Big Query.

00:29:41.170 --> 00:29:44.520
So we have all these internal
technologies we had to build

00:29:44.520 --> 00:29:47.395
because we couldn't find any
technology in the market to

00:29:47.395 --> 00:29:48.570
serve our needs.

00:29:48.570 --> 00:29:51.140
And when we see that other
people are interested by this

00:29:51.140 --> 00:29:55.240
kind of technology, we just
choose a name, an external

00:29:55.240 --> 00:29:59.350
name for it, and pricing, and we
build a website, and we put

00:29:59.350 --> 00:30:00.400
the product online.

00:30:00.400 --> 00:30:03.220
That's really the idea of what
we're doing on Cloud Platform,

00:30:03.220 --> 00:30:07.720
is giving you the consequence of
our research, of a product

00:30:07.720 --> 00:30:11.200
that we use every day, so you
can use it for your own needs.

00:30:11.200 --> 00:30:13.890
So having your application
powered by our cloud, that's

00:30:13.890 --> 00:30:16.890
really the general idea.

00:30:16.890 --> 00:30:20.150
And if you search for these kind
of videos, just to show

00:30:20.150 --> 00:30:23.650
you where you can find it, so
this is on-- you search for

00:30:23.650 --> 00:30:25.450
Google I/O sessions.

00:30:25.450 --> 00:30:27.840
And you will go there.

00:30:27.840 --> 00:30:32.230
And on Google Cloud Platform,
you will see all the sessions.

00:30:32.230 --> 00:30:34.870
And you have very interesting
things.

00:30:34.870 --> 00:30:39.280
For Cloud Storage, you have a
13-minute video, usually,

00:30:39.280 --> 00:30:41.520
importing a large data set.

00:30:41.520 --> 00:30:44.390
My presentation was inspired
from that, of course.

00:30:44.390 --> 00:30:47.490
And then the backend we
discussed this morning.

00:30:47.490 --> 00:30:50.047
From Nothing to Nirvana in
Minutes, Cloud Backend for

00:30:50.047 --> 00:30:52.670
your Android App
was also there.

00:30:52.670 --> 00:30:56.080
So I really encourage you to
have a look, because these are

00:30:56.080 --> 00:31:00.230
our project manager architects
who are explaining how we

00:31:00.230 --> 00:31:02.940
think you could use
our technology.

00:31:02.940 --> 00:31:05.600
So now let's switch
to Compute Engine.

00:31:05.600 --> 00:31:08.510
Now you had a great introduction
from Urs, and you

00:31:08.510 --> 00:31:11.290
better understand what kind
of work we've been doing.

00:31:11.290 --> 00:31:16.030
So we'll start with a few
slides, and then with a demo.

00:31:16.030 --> 00:31:20.010
And then we'll go for
the coffee break.

00:31:20.010 --> 00:31:21.710
AUDIENCE: [INAUDIBLE]

00:31:21.710 --> 00:31:22.780
BASTIEN LEGRAS: Sure, sorry.

00:31:22.780 --> 00:31:24.660
And by the way, if you have
questions on Cloud Storage

00:31:24.660 --> 00:31:26.425
before I jump on
Compute Engine.

00:31:26.425 --> 00:31:27.675
AUDIENCE: [INAUDIBLE]

00:31:30.530 --> 00:31:32.420
AUDIENCE: I have just a
couple of questions.

00:31:32.420 --> 00:31:35.050
The first one is, is your
strong read after write

00:31:35.050 --> 00:31:37.810
consistency model covered
by your SLA?

00:31:37.810 --> 00:31:38.810
BASTIEN LEGRAS: Yeah.

00:31:38.810 --> 00:31:40.070
It's part of the SLA.

00:31:40.070 --> 00:31:40.560
AUDIENCE: OK.

00:31:40.560 --> 00:31:43.900
The second one will
be, does it still

00:31:43.900 --> 00:31:47.180
cover the listing feature?

00:31:47.180 --> 00:31:49.910
BASTIEN LEGRAS: The listing
on Compute Engine?

00:31:49.910 --> 00:31:51.690
AUDIENCE: I mean the consistency
model, does it

00:31:51.690 --> 00:31:55.100
cover the listing of the objects
that are stored in the

00:31:55.100 --> 00:31:55.640
Cloud Storage?

00:31:55.640 --> 00:31:57.580
BASTIEN LEGRAS: Yeah, because
it's metadata.

00:31:57.580 --> 00:32:02.610
So the idea is that a bucket
is an object with children,

00:32:02.610 --> 00:32:05.535
because this is a tree model.

00:32:05.535 --> 00:32:07.130
AUDIENCE: So every time I
require a list of the objects

00:32:07.130 --> 00:32:11.560
that I stored, I get a full read
after write consistent

00:32:11.560 --> 00:32:12.580
list of the objects?

00:32:12.580 --> 00:32:13.810
BASTIEN LEGRAS: Yeah, exactly.

00:32:13.810 --> 00:32:16.730
That's one of the features.

00:32:16.730 --> 00:32:17.660
If you have other questions--

00:32:17.660 --> 00:32:18.910
yeah, one over there.

00:32:26.790 --> 00:32:30.200
AUDIENCE: I would like to know
which are the differences

00:32:30.200 --> 00:32:35.100
between the Google Drive APIs
and the Google Cloud Storage?

00:32:35.100 --> 00:32:37.140
And when do you recommend
to use one with

00:32:37.140 --> 00:32:38.540
respect to the other?

00:32:38.540 --> 00:32:39.850
BASTIEN LEGRAS: That's
a good question I

00:32:39.850 --> 00:32:41.210
have from many customers.

00:32:41.210 --> 00:32:44.530
So it's like the Chrome
versus Android battle.

00:32:44.530 --> 00:32:48.840
No, frankly, Drive
is user storage.

00:32:48.840 --> 00:32:52.900
So you have your little client
you can use to synchronize

00:32:52.900 --> 00:32:54.910
your folder on your Mac or PC.

00:32:54.910 --> 00:32:57.780
You have viewers, you
have 25 viewers.

00:32:57.780 --> 00:33:00.060
You can view PDFs, AutoCAD
files, any

00:33:00.060 --> 00:33:01.830
Office files, et cetera.

00:33:01.830 --> 00:33:05.420
And on Drive, we put now the
focus on fidelity with

00:33:05.420 --> 00:33:06.490
Microsoft Office.

00:33:06.490 --> 00:33:07.640
That's our focus.

00:33:07.640 --> 00:33:09.150
So it's really user storage.

00:33:09.150 --> 00:33:13.670
Whereas here, Cloud Storage,
even if you see the UI where

00:33:13.670 --> 00:33:16.890
you can list, et cetera, this
UI will be only for

00:33:16.890 --> 00:33:18.100
administrators.

00:33:18.100 --> 00:33:21.130
You won't to give that to users,
because this is really

00:33:21.130 --> 00:33:26.210
optimized for heavy usage,
very, very large files.

00:33:26.210 --> 00:33:28.480
So of course you could
upload three doc

00:33:28.480 --> 00:33:30.250
flies in cloud storage.

00:33:30.250 --> 00:33:33.160
When you click, it will
re-download the files.

00:33:33.160 --> 00:33:35.880
So use Drive instead.

00:33:35.880 --> 00:33:38.370
Then it's a matter of load--

00:33:38.370 --> 00:33:40.700
not load, but oversize.

00:33:40.700 --> 00:33:42.270
So Cloud Storage--

00:33:42.270 --> 00:33:44.970
Drive is up to 30
gigabytes now.

00:33:44.970 --> 00:33:46.780
We have a common--

00:33:46.780 --> 00:33:49.120
and there was an announcement
with Gmail.

00:33:49.120 --> 00:33:50.920
We now put the storage.

00:33:50.920 --> 00:33:53.390
And here, with Cloud Storage,
you can go to petabytes,

00:33:53.390 --> 00:33:56.082
virtually no limits.

00:33:56.082 --> 00:33:58.390
AUDIENCE: Are there any
differences with respect to

00:33:58.390 --> 00:34:04.380
permissions we can assign to
files in Google Drive and in

00:34:04.380 --> 00:34:06.720
Cloud Platform Storage?

00:34:06.720 --> 00:34:09.290
BASTIEN LEGRAS: So in Drive,
you set the permissions in

00:34:09.290 --> 00:34:12.800
owner, viewer, editor, to other
users in your domain or

00:34:12.800 --> 00:34:14.080
any Google account.

00:34:14.080 --> 00:34:18.670
Or you get even put it fully
visible on the web, or anyone

00:34:18.670 --> 00:34:19.489
with the link.

00:34:19.489 --> 00:34:21.120
There are various models.

00:34:21.120 --> 00:34:22.850
And again, Cloud Storage
and Drive are

00:34:22.850 --> 00:34:24.000
totally different products.

00:34:24.000 --> 00:34:25.570
This is not the same thing.

00:34:25.570 --> 00:34:27.750
Cloud Storage is really for
application storage.

00:34:27.750 --> 00:34:30.250
So you can define [INAUDIBLE]

00:34:30.250 --> 00:34:33.389
and permissions to a Google
account, but it will be always

00:34:33.389 --> 00:34:34.580
a technical account.

00:34:34.580 --> 00:34:39.500
It wouldn't be a user account
for an end user, usually.

00:34:39.500 --> 00:34:43.659
It can be a group, a technical
group, et cetera.

00:34:43.659 --> 00:34:46.250
Because in Cloud Storage,
you will never

00:34:46.250 --> 00:34:47.360
expose it to the user.

00:34:47.360 --> 00:34:50.889
You will always use it as a
backend of your application,

00:34:50.889 --> 00:34:53.270
and your application will talk
to Cloud Storage and talk to

00:34:53.270 --> 00:34:55.500
the user, but not the user
to Cloud Storage.

00:34:55.500 --> 00:34:58.930
That's not a real use
case that we see.

00:34:58.930 --> 00:35:02.180
The closest the user can be to
Cloud Storage is when you have

00:35:02.180 --> 00:35:05.490
the Panzura stuff with an
appliance, where it's browsing

00:35:05.490 --> 00:35:07.470
Cloud Storage, but
is connecting to

00:35:07.470 --> 00:35:08.670
the appliance, actually.

00:35:08.670 --> 00:35:11.340
And just before, on Drive,
I said 30 gigabytes.

00:35:11.340 --> 00:35:14.390
You can buy more storage.

00:35:14.390 --> 00:35:15.260
It's not limited.

00:35:15.260 --> 00:35:17.540
It's what you have by default.

00:35:17.540 --> 00:35:18.090
AUDIENCE: Thank you.

00:35:18.090 --> 00:35:20.820
BASTIEN LEGRAS: You're
welcome.

00:35:20.820 --> 00:35:21.470
OK.

00:35:21.470 --> 00:35:23.580
I want to move on to
Compute Engine.

00:35:23.580 --> 00:35:24.340
AUDIENCE: Sorry.

00:35:24.340 --> 00:35:26.140
Just a small addition.

00:35:26.140 --> 00:35:29.360
I think that you can use Drive
also when you have to manage

00:35:29.360 --> 00:35:31.500
some personal kind of storage.

00:35:31.500 --> 00:35:34.860
So for example, an Android is
very good to use Drive to

00:35:34.860 --> 00:35:37.650
store the preferences
of your applications

00:35:37.650 --> 00:35:38.750
or stuff like that.

00:35:38.750 --> 00:35:41.310
Instead, I think that Cloud
Storage is better when you

00:35:41.310 --> 00:35:45.900
have to store something that is
globally available, or not

00:35:45.900 --> 00:35:48.910
to related to just one
user, more or less.

