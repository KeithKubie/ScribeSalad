WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.402
[MUSIC PLAYING]

00:00:04.374 --> 00:00:07.252
[APPLAUSE]

00:00:07.252 --> 00:00:08.710
CARL VOGEL: I hope,
today, you were

00:00:08.710 --> 00:00:11.620
able to listen to some of
the great talks we've had

00:00:11.620 --> 00:00:13.887
and explore the
different sandboxes.

00:00:13.887 --> 00:00:15.470
And if you haven't
seen the Smart Home

00:00:15.470 --> 00:00:17.410
section in the
Assistant sandbox,

00:00:17.410 --> 00:00:20.030
I highly encourage you to do so.

00:00:20.030 --> 00:00:20.530
Thank you.

00:00:20.530 --> 00:00:23.590
We have a great team there
and some really cool demos,

00:00:23.590 --> 00:00:27.160
including showing you how
the Smart Home API can

00:00:27.160 --> 00:00:29.860
help you grow a better garden.

00:00:29.860 --> 00:00:31.720
On behalf of our
team, we're really

00:00:31.720 --> 00:00:35.050
excited to share with you some
of the Smart Home technologies

00:00:35.050 --> 00:00:37.240
that we've been
building since we last

00:00:37.240 --> 00:00:39.760
spoke to you at I/O 2018.

00:00:39.760 --> 00:00:41.170
My name is Carl Vogel.

00:00:41.170 --> 00:00:43.485
I'm a product manager
on the Smart Home team.

00:00:43.485 --> 00:00:44.860
MANIT LIMLAMAI:
My name is Manit.

00:00:44.860 --> 00:00:46.267
I am a software engineer.

00:00:46.267 --> 00:00:47.350
GAURAV NOLKHA: I'm Gaurav.

00:00:47.350 --> 00:00:50.750
I'm a solutions
engineer on Smart Home.

00:00:50.750 --> 00:00:53.200
CARL VOGEL: I'd like
to begin with a story.

00:00:53.200 --> 00:00:55.450
One of my friends recently
purchased some Smart Home

00:00:55.450 --> 00:00:58.120
devices, in
particular, light bulbs

00:00:58.120 --> 00:01:01.270
from one company and smart
plugs from a different one.

00:01:01.270 --> 00:01:05.040
And he put them in an area
that he calls the downstairs.

00:01:05.040 --> 00:01:07.660
And when he gets ready for
bed, he walks upstairs,

00:01:07.660 --> 00:01:11.530
and he says, hey, G,
turn off the lights.

00:01:11.530 --> 00:01:13.510
Well, he was telling me
that oftentimes, they

00:01:13.510 --> 00:01:15.520
don't respond together.

00:01:15.520 --> 00:01:18.850
One set of lights often responds
a half second or a second

00:01:18.850 --> 00:01:20.860
faster than the other.

00:01:20.860 --> 00:01:22.900
Or sometimes they just
take a really long time

00:01:22.900 --> 00:01:27.460
to respond in general, or
they don't respond at all.

00:01:27.460 --> 00:01:29.650
As Google and our
developer community

00:01:29.650 --> 00:01:32.380
work together to
grow Smart Home,

00:01:32.380 --> 00:01:36.310
we need to work together
to solve these challenges.

00:01:36.310 --> 00:01:39.190
We believe one method
is to shift processing

00:01:39.190 --> 00:01:42.730
from the cloud to the
local environment.

00:01:42.730 --> 00:01:45.070
We've taken our first
step in this direction

00:01:45.070 --> 00:01:47.860
to improve the experience
for users like him

00:01:47.860 --> 00:01:49.900
and the millions of
other users that use

00:01:49.900 --> 00:01:51.970
our products on a daily basis.

00:01:51.970 --> 00:01:57.730
We're happy to introduce that
first step is the Local Home

00:01:57.730 --> 00:02:01.570
SDK [LAUGHS].

00:02:01.570 --> 00:02:03.970
[APPLAUSE]

00:02:03.970 --> 00:02:08.680
The Local Home SDK enables you
to locally process and fulfill

00:02:08.680 --> 00:02:12.520
Smart Home commands received
from the Google Assistant.

00:02:12.520 --> 00:02:16.640
We do this by inviting you to
build and run your Smart Home

00:02:16.640 --> 00:02:21.490
business logic locally on Google
Home speakers and Google Nest

00:02:21.490 --> 00:02:23.260
displays.

00:02:23.260 --> 00:02:27.370
Then we securely give you
access to the lower level radios

00:02:27.370 --> 00:02:30.610
to communicate over
the local area network

00:02:30.610 --> 00:02:32.560
with your smart devices.

00:02:32.560 --> 00:02:35.380
Through this, we
can together deliver

00:02:35.380 --> 00:02:39.940
substantial improvements
in latency and reliability.

00:02:39.940 --> 00:02:43.660
But first, before I talk
about the Local Home SDK,

00:02:43.660 --> 00:02:46.570
let me give you an intro
to the Smart Home API

00:02:46.570 --> 00:02:52.070
and then show you how the
Local Home SDK layers on top.

00:02:52.070 --> 00:02:54.590
The Smart Home API
is the foundation

00:02:54.590 --> 00:02:56.360
of our Smart Home program.

00:02:56.360 --> 00:03:00.620
Let's begin with how devices
are defined and integrated

00:03:00.620 --> 00:03:02.240
into the Assistant.

00:03:02.240 --> 00:03:06.020
First, developer-specified
device type.

00:03:06.020 --> 00:03:08.390
This is really the
what is it factor.

00:03:08.390 --> 00:03:09.760
Is it a light bulb?

00:03:09.760 --> 00:03:12.800
Is it a microwave, a camera?

00:03:12.800 --> 00:03:15.620
Device type is our
method to classify

00:03:15.620 --> 00:03:20.240
the overall essence of the
device in the user's home.

00:03:20.240 --> 00:03:24.230
Second, developers
specify a device trait.

00:03:24.230 --> 00:03:27.320
And this really describes
the overall functionality

00:03:27.320 --> 00:03:28.700
of the device.

00:03:28.700 --> 00:03:30.200
What can it do?

00:03:30.200 --> 00:03:32.360
How can users control it?

00:03:32.360 --> 00:03:34.700
Devices oftentimes
have multiple traits.

00:03:34.700 --> 00:03:38.330
For example, a light bulb
may have the traits on/off,

00:03:38.330 --> 00:03:41.450
brightness, and color setting.

00:03:41.450 --> 00:03:43.880
Once the device type
and trait are specified,

00:03:43.880 --> 00:03:46.730
we can then bring these
devices into the Assistant

00:03:46.730 --> 00:03:51.530
and specifically into our Home
Graph using the same intent.

00:03:51.530 --> 00:03:54.230
Home Graph is our
database that enables

00:03:54.230 --> 00:03:59.060
us to build a topology of the
user's devices in their home.

00:03:59.060 --> 00:04:02.540
Now that the devices are
defined and in our Home Graph,

00:04:02.540 --> 00:04:04.490
let's see what happens
when a user issues

00:04:04.490 --> 00:04:07.920
a command for your device.

00:04:07.920 --> 00:04:10.140
When our user says
a command, such as,

00:04:10.140 --> 00:04:13.680
for example, hey, Google,
turn on the lights,

00:04:13.680 --> 00:04:17.220
we send that to the Assistant
server as a wave form.

00:04:17.220 --> 00:04:19.890
And then Assistant server
process this wave form

00:04:19.890 --> 00:04:24.870
and ultimately determines which
device or devices the user is

00:04:24.870 --> 00:04:26.280
trying to move into what state.

00:04:29.270 --> 00:04:31.480
Then we send that
as a structured JSON

00:04:31.480 --> 00:04:35.080
payload to the developer to
be processed and ultimately

00:04:35.080 --> 00:04:36.070
fulfilled.

00:04:36.070 --> 00:04:39.220
And as we see, the
developer communicates

00:04:39.220 --> 00:04:42.100
with the end device.

00:04:42.100 --> 00:04:46.600
Through this very simple
method to integrate devices

00:04:46.600 --> 00:04:49.480
into the Assistant and
have users control them,

00:04:49.480 --> 00:04:53.350
we have grown
exponentially since 2017.

00:04:53.350 --> 00:04:58.150
In fact, we work with over
30,000 unique devices,

00:04:58.150 --> 00:05:01.420
among 3,500 brands.

00:05:01.420 --> 00:05:03.460
We encourage you to
join us and to integrate

00:05:03.460 --> 00:05:05.710
if you haven't done so already.

00:05:05.710 --> 00:05:09.390
And a great place to start
is the Smart Home 101 talk

00:05:09.390 --> 00:05:11.620
that some of our friends
gave earlier this morning.

00:05:14.610 --> 00:05:17.240
Although successful by
almost all accounts,

00:05:17.240 --> 00:05:21.440
cloud-to-cloud integrations
have inherent limitations.

00:05:21.440 --> 00:05:23.900
We may have a Google Home
speaker and a smart device

00:05:23.900 --> 00:05:25.520
within 10 feet of each other.

00:05:25.520 --> 00:05:28.940
Yet this command needs to
travel hundreds if not thousands

00:05:28.940 --> 00:05:32.840
of miles before returning
back to the same room.

00:05:32.840 --> 00:05:35.810
This takes time and, of
course, provides opportunities

00:05:35.810 --> 00:05:37.590
for dropped commands.

00:05:37.590 --> 00:05:39.270
So we started to
think at Google,

00:05:39.270 --> 00:05:41.150
can we leverage the
fact that these are

00:05:41.150 --> 00:05:43.850
on the same local area network?

00:05:43.850 --> 00:05:46.620
The Local Home SDK is
our method to do so.

00:05:50.380 --> 00:05:53.130
At Google, the
developer experience

00:05:53.130 --> 00:05:55.440
is core to our thinking.

00:05:55.440 --> 00:05:59.160
And this deeply influenced
our design tenants.

00:05:59.160 --> 00:06:01.950
With the Smart Home API
being the foundation,

00:06:01.950 --> 00:06:04.920
we wanted to leverage
its capabilities

00:06:04.920 --> 00:06:10.020
and layer the SDK on top as
a deeper integration, not

00:06:10.020 --> 00:06:12.480
as an either/or.

00:06:12.480 --> 00:06:15.720
We also implemented what
we call a "come as you are"

00:06:15.720 --> 00:06:19.140
philosophy, in that we want
it to work with your devices

00:06:19.140 --> 00:06:25.350
as is today without requiring
any further modifications.

00:06:25.350 --> 00:06:27.690
Lastly, we've heard from you.

00:06:27.690 --> 00:06:29.980
Thousands love the
Smart Home API.

00:06:29.980 --> 00:06:33.480
And so we wanted to mirror
that familiar interface

00:06:33.480 --> 00:06:35.650
onto the SDK.

00:06:35.650 --> 00:06:37.740
So with these tenants
now understood,

00:06:37.740 --> 00:06:40.110
let's go ahead and
revisit what happens

00:06:40.110 --> 00:06:44.790
when a user issues a command
using the Local Home SDK.

00:06:44.790 --> 00:06:47.132
As we can see, the user
still says a command.

00:06:47.132 --> 00:06:48.840
And it still goes to
the Assistant server

00:06:48.840 --> 00:06:50.250
to be processed.

00:06:50.250 --> 00:06:55.560
However, if we know that this
device is locally controllable,

00:06:55.560 --> 00:06:57.360
will it actually
send that command

00:06:57.360 --> 00:07:01.430
as a JSON payload down to the
Google Home speaker or Google

00:07:01.430 --> 00:07:02.920
Nest display.

00:07:02.920 --> 00:07:04.860
We'll then pull up the
appropriate developer's

00:07:04.860 --> 00:07:09.000
JavaScript file that has their
Smart Home business logic on it

00:07:09.000 --> 00:07:11.040
to process the intent.

00:07:11.040 --> 00:07:14.700
And then we'll provide access
to the lower-level Wi-Fi radio

00:07:14.700 --> 00:07:19.110
to ultimately communicate with
your device over the local area

00:07:19.110 --> 00:07:20.400
network.

00:07:20.400 --> 00:07:24.060
And notice, the developer
still controls the smart device

00:07:24.060 --> 00:07:30.210
but can now process and
fulfill that command locally.

00:07:30.210 --> 00:07:33.540
And since we still have this
cloud-to-cloud integration,

00:07:33.540 --> 00:07:37.840
we now have the
cloud as a fallback.

00:07:37.840 --> 00:07:41.170
So what is this app-- what
does adding this local path do?

00:07:41.170 --> 00:07:44.560
Well, first, it allows
us to reduce the latency

00:07:44.560 --> 00:07:47.380
after a payload leaves
the Assistant server

00:07:47.380 --> 00:07:50.660
to less than 300 milliseconds.

00:07:50.660 --> 00:07:54.130
This will provide a very,
very noticeable benefit

00:07:54.130 --> 00:07:56.240
for your users.

00:07:56.240 --> 00:07:59.530
Second, it allows us to
drive the reliability

00:07:59.530 --> 00:08:02.020
that a Smart Home command
reaches the device

00:08:02.020 --> 00:08:05.050
to well above 99.9%.

00:08:05.050 --> 00:08:07.150
And we primarily
achieve this by having

00:08:07.150 --> 00:08:09.010
redundancy in the system.

00:08:11.670 --> 00:08:14.000
So the next natural
question is, it sounds cool.

00:08:14.000 --> 00:08:16.460
But will this work
with my device?

00:08:16.460 --> 00:08:19.310
Well, I'm happy to say this
works with all the device

00:08:19.310 --> 00:08:23.930
types, including the 16 new ones
that we just launched at I/O.

00:08:23.930 --> 00:08:27.860
And, in particular, this is
not just for Wi-Fi devices.

00:08:27.860 --> 00:08:30.680
If you use a hub or a
gateway for your Smart Home

00:08:30.680 --> 00:08:34.890
integration, for example,
a BLE hub or a Zigbee hub,

00:08:34.890 --> 00:08:38.520
you can talk locally
to that hub as well.

00:08:38.520 --> 00:08:40.549
In addition, we
support all the traits

00:08:40.549 --> 00:08:42.919
that you use today
with the one exception

00:08:42.919 --> 00:08:47.630
of two-factor authentication.

00:08:47.630 --> 00:08:50.990
Recall from the tenants
that our goal was not

00:08:50.990 --> 00:08:54.830
to require any firmware changes
on the part of the developer.

00:08:54.830 --> 00:08:58.160
And so we set out to support
the most popular discovery

00:08:58.160 --> 00:09:01.100
and control protocols as
shown on the slide behind me.

00:09:03.670 --> 00:09:08.980
And lastly, which devices can
host or run this JavaScript?

00:09:08.980 --> 00:09:11.020
We're really happy
to say here that it

00:09:11.020 --> 00:09:13.810
works with all our Google
Home speakers and Google Nest

00:09:13.810 --> 00:09:18.085
displays, including the
new Google Nest Hub Max.

00:09:21.640 --> 00:09:24.850
So we've talked a lot about
the experience for developers.

00:09:24.850 --> 00:09:26.930
And this is I/O, of course.

00:09:26.930 --> 00:09:28.360
But what about users?

00:09:28.360 --> 00:09:31.780
What do users have to
do to gain this benefit?

00:09:31.780 --> 00:09:33.790
And the answer?

00:09:33.790 --> 00:09:35.440
Absolutely nothing.

00:09:35.440 --> 00:09:38.080
Once you integrate
the Local Home SDK,

00:09:38.080 --> 00:09:40.180
we go ahead and
establish the local path

00:09:40.180 --> 00:09:42.820
for all the users
that are already

00:09:42.820 --> 00:09:45.940
on your Smart Home project.

00:09:45.940 --> 00:09:47.440
So with that, I
want to turn it over

00:09:47.440 --> 00:09:50.967
to Manit to talk more about
the technical architecture.

00:09:50.967 --> 00:09:51.550
AUDIENCE: Woo!

00:09:51.550 --> 00:09:55.259
[APPLAUSE]

00:09:56.660 --> 00:09:58.750
MANIT LIMLAMAI: The Smart
Home ecosystem today

00:09:58.750 --> 00:10:02.320
relies on developers bringing
in devices better discovered

00:10:02.320 --> 00:10:05.860
and controlled on the local
network in different ways.

00:10:05.860 --> 00:10:08.770
In many cases, the application
layer or the business layer

00:10:08.770 --> 00:10:12.820
logic is openly documented
but nonetheless custom.

00:10:12.820 --> 00:10:15.910
Early on, we decided to make
the Local Home platform flexible

00:10:15.910 --> 00:10:18.430
enough such that our Smart
Home developers would

00:10:18.430 --> 00:10:22.090
be able to leverage the
platform without compromising

00:10:22.090 --> 00:10:25.270
the ability to bring out
their unique features.

00:10:25.270 --> 00:10:27.640
At a high level, let's
look into the elements

00:10:27.640 --> 00:10:29.830
to make this flexibility happen.

00:10:29.830 --> 00:10:31.340
We'll talk about
the Google device

00:10:31.340 --> 00:10:32.860
and what's happening there.

00:10:32.860 --> 00:10:35.560
We'll talk about the overall
Google infrastructure

00:10:35.560 --> 00:10:37.420
and how the Google
device fits into it.

00:10:37.420 --> 00:10:38.920
And then we'll go
into the specifics

00:10:38.920 --> 00:10:40.150
of discover and control.

00:10:42.890 --> 00:10:44.990
To give a bit of
background, a few years ago,

00:10:44.990 --> 00:10:46.610
we built Chromecast.

00:10:46.610 --> 00:10:48.860
Chromecast runs
on Chromium, which

00:10:48.860 --> 00:10:52.310
is the open-source project
behind Google Chrome.

00:10:52.310 --> 00:10:56.240
Chromecast, or more specifically
the Google Cast SDK,

00:10:56.240 --> 00:10:59.240
created a way for
developers to run their code

00:10:59.240 --> 00:11:01.340
on a Google-built device.

00:11:01.340 --> 00:11:03.860
This code doesn't run
natively but rather as

00:11:03.860 --> 00:11:05.840
an app in its own container.

00:11:05.840 --> 00:11:08.840
Since we're running on
something like Google Chrome,

00:11:08.840 --> 00:11:11.810
this container happens
to be a browser window.

00:11:11.810 --> 00:11:14.060
And the app is JavaScript.

00:11:14.060 --> 00:11:16.160
Leveraging this
browser technology,

00:11:16.160 --> 00:11:20.360
we're able to run multiple media
apps in their own sandboxes

00:11:20.360 --> 00:11:23.950
securely and simultaneously.

00:11:23.950 --> 00:11:25.930
Building on the
Cast foundation, we

00:11:25.930 --> 00:11:29.740
created the Local Home SDK
and the Local Home platform.

00:11:29.740 --> 00:11:31.810
The Local Home SDK
and the platform

00:11:31.810 --> 00:11:34.240
together are the interface
between developer

00:11:34.240 --> 00:11:37.120
Smart Home apps and
the low-level radios

00:11:37.120 --> 00:11:39.670
used to talk to smart devices.

00:11:39.670 --> 00:11:42.010
Local Home platform
has two important tasks

00:11:42.010 --> 00:11:43.540
to take care of.

00:11:43.540 --> 00:11:46.210
First, interfacing with
the Google Assistant,

00:11:46.210 --> 00:11:49.750
such that we can leverage
the Smart Home API as is,

00:11:49.750 --> 00:11:52.330
and second, to provide
controlled access

00:11:52.330 --> 00:11:57.190
to socket communications
using TCP, UDP, or HTTPS,

00:11:57.190 --> 00:12:00.372
HTTP, and HTTPS protocols.

00:12:00.372 --> 00:12:02.830
I just spent a couple minutes
talking about the Google Home

00:12:02.830 --> 00:12:06.670
device and how you can soon
run Smart Home JavaScript

00:12:06.670 --> 00:12:08.410
apps on it.

00:12:08.410 --> 00:12:10.810
In order to communicate with
your devices and the user's

00:12:10.810 --> 00:12:13.840
local network, we also had
to build up some components

00:12:13.840 --> 00:12:16.240
in the larger Smart Home
ecosystem with the Google

00:12:16.240 --> 00:12:19.750
Assistant and with
some help from you.

00:12:19.750 --> 00:12:22.420
If you already have a
cloud-to-cloud Smart Home

00:12:22.420 --> 00:12:24.760
integration, you'll be
familiar with the actions

00:12:24.760 --> 00:12:28.270
on Google Console
and Home Graph.

00:12:28.270 --> 00:12:31.120
There are some additions to
both of those systems in order

00:12:31.120 --> 00:12:34.570
for you, the developer,
to help your users benefit

00:12:34.570 --> 00:12:36.750
from this new local path.

00:12:36.750 --> 00:12:38.200
Let's look at the
high-level flow

00:12:38.200 --> 00:12:41.170
to discover and
control your devices

00:12:41.170 --> 00:12:43.870
in the user's local environment
in the next two slides.

00:12:47.552 --> 00:12:49.260
Before we talk about
the code that you'll

00:12:49.260 --> 00:12:51.420
write to run Google
Home, you'll need

00:12:51.420 --> 00:12:53.550
to add some data via
the Actions on Google

00:12:53.550 --> 00:12:57.060
Console and the
cloud-to-cloud integration.

00:12:57.060 --> 00:12:58.740
In the actions of
Google Console,

00:12:58.740 --> 00:13:02.340
you'll tell the Google Home
how to find your devices

00:13:02.340 --> 00:13:04.320
in the user's local network.

00:13:04.320 --> 00:13:08.160
We implemented the common
discovery protocols, like MDNS,

00:13:08.160 --> 00:13:11.780
UDP broadcast, and UPMP.

00:13:11.780 --> 00:13:13.830
Next, you'll update
the SYNC response

00:13:13.830 --> 00:13:16.830
to include a hint to the
Local Home platform that

00:13:16.830 --> 00:13:21.090
will help with identifying a
locally-discovered device is

00:13:21.090 --> 00:13:25.170
the same device that appears in
the cloud-to-cloud integration

00:13:25.170 --> 00:13:27.130
SYNC device list.

00:13:27.130 --> 00:13:28.770
Once the discovery
information is

00:13:28.770 --> 00:13:31.170
Added via actions
on Google Console

00:13:31.170 --> 00:13:34.470
and you've added this
hint to SYNC response,

00:13:34.470 --> 00:13:36.900
Google Assistant will
send this information

00:13:36.900 --> 00:13:41.160
to all Google Home devices
that a user is linked to.

00:13:41.160 --> 00:13:43.230
If the Local Home
platform can match

00:13:43.230 --> 00:13:45.630
a locally-discovered
device to a device

00:13:45.630 --> 00:13:50.210
in the list from your cloud,
we've established a local path.

00:13:50.210 --> 00:13:50.750
Great.

00:13:50.750 --> 00:13:52.940
So now we have a local path.

00:13:52.940 --> 00:13:56.190
And the user says, hey,
Google, turn on the lights.

00:13:56.190 --> 00:13:57.740
The request from
Google Assistant

00:13:57.740 --> 00:14:00.860
is dynamically routed to
a Google Home device that

00:14:00.860 --> 00:14:03.200
has claimed that local route.

00:14:03.200 --> 00:14:05.630
The JavaScript app
running on the Google Home

00:14:05.630 --> 00:14:08.270
can now handle this
request and can communicate

00:14:08.270 --> 00:14:10.880
with the device using
application-layer protocols,

00:14:10.880 --> 00:14:14.165
like HTTPS or TCP
and UDP sockets.

00:14:17.265 --> 00:14:18.640
GAURAV NOLKHA: So
when we set out

00:14:18.640 --> 00:14:20.800
to build the Local
Home SDK, we wanted

00:14:20.800 --> 00:14:25.340
to make sure that developers
have best experience.

00:14:25.340 --> 00:14:27.220
So let's look at
the developer flow.

00:14:27.220 --> 00:14:29.110
Starting with building
your application

00:14:29.110 --> 00:14:32.080
to debugging it for
certifying your application

00:14:32.080 --> 00:14:34.998
and even launching, we've taken
care of the complete spectrum.

00:14:34.998 --> 00:14:36.790
And in the next few
sections of the slides,

00:14:36.790 --> 00:14:40.390
we'll look into these each.

00:14:40.390 --> 00:14:42.130
So first, let's
start with developing

00:14:42.130 --> 00:14:44.530
your types of application
that will help us

00:14:44.530 --> 00:14:47.070
discover and control
the devices locally.

00:14:49.970 --> 00:14:52.640
To help discover and
control devices locally,

00:14:52.640 --> 00:14:55.860
you, as a developer, need
to do three key things.

00:14:55.860 --> 00:14:59.300
First, like Manit mentioned
earlier, the scan config

00:14:59.300 --> 00:15:01.490
on Actions in Google Console.

00:15:01.490 --> 00:15:04.160
Second, the little bit
of help from your works

00:15:04.160 --> 00:15:07.940
with integration, where you
update your SYNC response

00:15:07.940 --> 00:15:10.460
to give us a hint
that these devices may

00:15:10.460 --> 00:15:12.440
be locally controllable.

00:15:12.440 --> 00:15:14.960
And third, your TypeScript app.

00:15:14.960 --> 00:15:19.220
This is the app that will
run on Google Home devices.

00:15:19.220 --> 00:15:21.830
Now a quick note about
the app itself, we've

00:15:21.830 --> 00:15:23.960
been talking about
JavaScript as the app that

00:15:23.960 --> 00:15:25.280
runs on the devices.

00:15:25.280 --> 00:15:27.290
But we highly recommend
developing your app

00:15:27.290 --> 00:15:28.560
in TypeScript.

00:15:28.560 --> 00:15:31.430
It's just a better
developer flow.

00:15:31.430 --> 00:15:34.130
So what does this
app do locally?

00:15:34.130 --> 00:15:36.500
It needs to handle
two key events.

00:15:36.500 --> 00:15:39.440
First, when Google
Home devices discover

00:15:39.440 --> 00:15:41.420
a device in the
local network that

00:15:41.420 --> 00:15:46.700
belongs to you as a provider,
we fire and identify intent.

00:15:46.700 --> 00:15:49.760
And that needs to be
handled by your app.

00:15:49.760 --> 00:15:51.390
The second one is
REACHABLE_DEVICES,

00:15:51.390 --> 00:15:53.570
which is a special case
of the first one where

00:15:53.570 --> 00:15:56.450
if we have discovered a
hub or a bridge device.

00:15:56.450 --> 00:15:59.060
And we'll go into the
details in coming sessions.

00:15:59.060 --> 00:16:02.600
And finally, when the user
wants to control the device,

00:16:02.600 --> 00:16:04.520
the platform fires
EXECUTE intent.

00:16:04.520 --> 00:16:07.250
And for those who are familiar
with the Smart Home API,

00:16:07.250 --> 00:16:11.180
it's the same EXECUTE intent
that your JavaScript receives,

00:16:11.180 --> 00:16:12.650
like your cloud
endpoint receives.

00:16:17.128 --> 00:16:19.170
MANIT LIMLAMAI: Let's go
into the details of what

00:16:19.170 --> 00:16:22.140
the discover flow looks like.

00:16:22.140 --> 00:16:24.720
We talked a lot about this
Actions on Google Console.

00:16:24.720 --> 00:16:26.640
So what does it look like?

00:16:26.640 --> 00:16:31.170
In a few days, you'll be able
to see this new UI, which

00:16:31.170 --> 00:16:35.340
allows you to update how we
find your devices in the user's

00:16:35.340 --> 00:16:36.360
local network.

00:16:36.360 --> 00:16:39.120
In this particular
example, we've

00:16:39.120 --> 00:16:42.870
added the ability to upload
the UDP broadcast packet along

00:16:42.870 --> 00:16:47.950
with the in and output ports
required for UDP broadcast.

00:16:47.950 --> 00:16:50.050
Next, we'll take a
look at exactly what

00:16:50.050 --> 00:16:53.230
you need to do to update
the SYNC response.

00:16:53.230 --> 00:16:56.470
We've added a new field
called otherDeviceIds,

00:16:56.470 --> 00:17:00.760
which hints to the Google Home
to start looking for a device.

00:17:00.760 --> 00:17:03.370
And we'll use the
information in this field

00:17:03.370 --> 00:17:06.430
to help deduplicate a
device that we find locally

00:17:06.430 --> 00:17:08.829
to a device that you told us
about via the cloud-to-cloud

00:17:08.829 --> 00:17:10.210
integration.

00:17:10.210 --> 00:17:13.130
Here's a sample of
what that looks like.

00:17:13.130 --> 00:17:16.089
You'll notice that this
otherDeviceIds field appears

00:17:16.089 --> 00:17:17.500
at the device level.

00:17:17.500 --> 00:17:19.240
So you, as the
developer, can choose

00:17:19.240 --> 00:17:22.250
which devices you want to be
locally controlled or not.

00:17:27.173 --> 00:17:28.590
GAURAV NOLKHA: So
now, we're going

00:17:28.590 --> 00:17:30.300
to jump into the TypeScript app.

00:17:30.300 --> 00:17:33.300
And this is the app that
has the business logic that

00:17:33.300 --> 00:17:35.620
can control your devices.

00:17:35.620 --> 00:17:37.830
It is a simple, but it's
a critical component

00:17:37.830 --> 00:17:38.940
in this whole process.

00:17:38.940 --> 00:17:43.620
And just a quick reminder, we
need to handle two intents.

00:17:43.620 --> 00:17:46.600
Let's quickly put these
intents in perspective.

00:17:46.600 --> 00:17:49.050
So for those who are familiar
with the Smart Home API,

00:17:49.050 --> 00:17:52.950
we have SYNC, QUERY, and EXECUTE
intent that Google servers send

00:17:52.950 --> 00:17:56.110
to your cloud services.

00:17:56.110 --> 00:17:59.980
For local, we are adding
two new intents, IDENTIFY,

00:17:59.980 --> 00:18:03.460
which is fired by platform
when we have scanned

00:18:03.460 --> 00:18:05.740
a device that belongs to you.

00:18:05.740 --> 00:18:07.940
And second is the
REACHABLE DEVICES intent,

00:18:07.940 --> 00:18:10.510
which is optional
but required if we

00:18:10.510 --> 00:18:12.130
have scanned a bridge or a hub.

00:18:15.640 --> 00:18:17.830
Let's get started with
the TypeScript app.

00:18:17.830 --> 00:18:21.440
But before we do that, let's
look at the SDK interface.

00:18:21.440 --> 00:18:24.850
And when this launches
in June, you'll

00:18:24.850 --> 00:18:30.160
be able to download a sample and
a boilerplate code from GitHub.

00:18:30.160 --> 00:18:34.790
So the interface exposed by the
SDK is pretty straightforward.

00:18:34.790 --> 00:18:38.950
It has two main classes,
first, the DeviceManager class.

00:18:38.950 --> 00:18:42.160
The DeviceManager class
provides methods to communicate

00:18:42.160 --> 00:18:43.245
with your devices.

00:18:43.245 --> 00:18:44.620
And like Manit
mentioned earlier,

00:18:44.620 --> 00:18:48.370
it could be TCP,
UDP, or HTTP/HTTPS.

00:18:48.370 --> 00:18:50.990
The second is the app class.

00:18:50.990 --> 00:18:54.820
This provides the methods to
attach the intent handlers.

00:18:54.820 --> 00:18:58.150
So let's look at the typings
for DeviceManager class.

00:18:58.150 --> 00:19:01.120
Here's the send, which
takes in an input

00:19:01.120 --> 00:19:03.910
for CommandRequest
type object and return

00:19:03.910 --> 00:19:07.660
a promise, which is resolved
when Command is completed.

00:19:07.660 --> 00:19:13.060
And like I said earlier, it
could be a HTTP, TCP, or UDP.

00:19:13.060 --> 00:19:15.557
Let's look at the typing
for the app class.

00:19:15.557 --> 00:19:17.890
So for those who are familiar
with the actions of Google

00:19:17.890 --> 00:19:21.250
node library that you use for
the cloud side integration,

00:19:21.250 --> 00:19:25.130
you will realize that there
we have onExecute, onSync,

00:19:25.130 --> 00:19:28.210
and onQuery as the
handlers you can attach to.

00:19:28.210 --> 00:19:31.450
Here we have onIdentify,
onReachableDevices,

00:19:31.450 --> 00:19:33.640
and onExecute
methods, which you can

00:19:33.640 --> 00:19:37.000
call to attach the
handlers for your app.

00:19:37.000 --> 00:19:39.120
After your app is
attached to the handlers,

00:19:39.120 --> 00:19:41.320
you call the listen API.

00:19:41.320 --> 00:19:43.630
And that's an
indicator to the SDK

00:19:43.630 --> 00:19:46.870
that the app is now ready
to process these intents.

00:19:46.870 --> 00:19:50.050
And notice that these
methods are changeable.

00:19:50.050 --> 00:19:52.800
Finally, when you are ready to
communicate with your device,

00:19:52.800 --> 00:19:54.940
you'll call the
getDeviceManager API

00:19:54.940 --> 00:19:57.670
to get the singleton
object for Device Manager

00:19:57.670 --> 00:20:01.002
and use the same API.

00:20:01.002 --> 00:20:02.710
Let's put this interface
into perspective

00:20:02.710 --> 00:20:05.480
by looking at the
skeleton of a sample app.

00:20:05.480 --> 00:20:08.260
So in the sample app,
I have identifyHandler

00:20:08.260 --> 00:20:10.000
and executeHandler.

00:20:10.000 --> 00:20:12.670
And in the constructor
for this class,

00:20:12.670 --> 00:20:15.460
I create the instantiation
of a Local Home app,

00:20:15.460 --> 00:20:19.150
get the Device Manager object,
attach the two handlers,

00:20:19.150 --> 00:20:22.180
and call the listen API.

00:20:22.180 --> 00:20:26.740
Now let's start looking at the
events that happen at runtime

00:20:26.740 --> 00:20:31.015
and what your app does
to handle those events.

00:20:31.015 --> 00:20:32.890
MANIT LIMLAMAI: Gaurav,
I'm a visual learner.

00:20:32.890 --> 00:20:35.470
So let's take a look
at this in pictures.

00:20:35.470 --> 00:20:37.720
You've already updated
scan config via Actions

00:20:37.720 --> 00:20:38.890
of Google Console.

00:20:38.890 --> 00:20:40.780
You've updated
the sync response.

00:20:40.780 --> 00:20:44.000
And now the information has
been set down to a Google Home.

00:20:44.000 --> 00:20:46.450
The Google Home starts
a state machine where

00:20:46.450 --> 00:20:50.090
we look for local devices.

00:20:50.090 --> 00:20:51.200
This process repeats.

00:20:51.200 --> 00:20:53.490
So whenever a user
plugs in a new device,

00:20:53.490 --> 00:20:55.420
we'll find that too.

00:20:55.420 --> 00:20:58.510
When the smart device
responds to one of our scans,

00:20:58.510 --> 00:21:00.280
the Local Home
platform generates

00:21:00.280 --> 00:21:03.370
an intent called IDENTIFY, like
Gaurav has been mentioning.

00:21:03.370 --> 00:21:07.420
And we then call your
apps Identify Handler.

00:21:07.420 --> 00:21:09.700
GAURAV NOLKHA: So let's
look at Identify Handler.

00:21:09.700 --> 00:21:12.130
So here's the signature
of the Identify Handler.

00:21:12.130 --> 00:21:16.090
The input is the object
of type IdentifyRequest.

00:21:16.090 --> 00:21:19.300
And we expect the response
to be a promise that

00:21:19.300 --> 00:21:21.820
resolves to IdentifyResponse.

00:21:21.820 --> 00:21:24.550
The key information in
IdentifyRequest object

00:21:24.550 --> 00:21:26.260
is the scanData.

00:21:26.260 --> 00:21:28.270
And this depends
upon the scan that we

00:21:28.270 --> 00:21:31.820
use to scan for your device,
as it could be UDP, MDNS, UPNP.

00:21:35.000 --> 00:21:36.620
IdentifyResponse.

00:21:36.620 --> 00:21:40.510
The key information we look from
IdentifyResponse for the device

00:21:40.510 --> 00:21:44.530
that we just found is
the verificationId.

00:21:44.530 --> 00:21:48.460
And this must match one
of the otherDeviceIds

00:21:48.460 --> 00:21:51.780
that we got from
your SYNC response.

00:21:51.780 --> 00:21:55.630
And if we find a match, we would
have established a local path.

00:21:55.630 --> 00:21:57.190
Now there are two
other flags that

00:21:57.190 --> 00:22:00.700
are also important,
isProxy and isLocalOnly.

00:22:00.700 --> 00:22:03.160
And they are set to
false for this device

00:22:03.160 --> 00:22:07.220
if this device was an end device
that we wanted to control.

00:22:07.220 --> 00:22:09.485
But what if we find a hub?

00:22:09.485 --> 00:22:11.110
MANIT LIMLAMAI: Great
question, Gaurav.

00:22:11.110 --> 00:22:13.390
Similarly, when we
find a hub, we'll

00:22:13.390 --> 00:22:18.160
trigger an IDENTIFY intent
and is the field's isProxy

00:22:18.160 --> 00:22:20.620
and isLocalOnly
will be set to true.

00:22:20.620 --> 00:22:23.560
And that will tell the Local
Home platform to then trigger

00:22:23.560 --> 00:22:26.287
a REACHABLE_DEVICES intent.

00:22:26.287 --> 00:22:28.120
GAURAV NOLKHA: As the
name kind of suggests,

00:22:28.120 --> 00:22:29.950
REACHABLE_DEVICES
intent is supposed

00:22:29.950 --> 00:22:33.520
to return all the devices that
are reachable from this hub.

00:22:33.520 --> 00:22:36.160
The signature for the
handler looks very

00:22:36.160 --> 00:22:38.530
similar to the IdentifyRequest.

00:22:38.530 --> 00:22:41.350
The key information to look for
in the ReachableDevicesRequest

00:22:41.350 --> 00:22:44.110
object is the proxyDevice.

00:22:44.110 --> 00:22:47.710
This is your hub that you
told us about in response

00:22:47.710 --> 00:22:49.750
for identifier.

00:22:49.750 --> 00:22:54.500
Now the response object, we
expect an array of devices.

00:22:54.500 --> 00:22:57.430
And again, the key information
for each one of those device

00:22:57.430 --> 00:22:59.320
is the verificationId.

00:22:59.320 --> 00:23:02.560
And that has to match
one of the otherDeviceIds

00:23:02.560 --> 00:23:03.630
from your sync response.

00:23:06.283 --> 00:23:08.450
MANIT LIMLAMAI: Like you
know, I'm a visual learner.

00:23:08.450 --> 00:23:11.180
So let's take a look at
this lovely animation.

00:23:11.180 --> 00:23:14.060
We start establishing the
local path with information

00:23:14.060 --> 00:23:18.290
from you via scan config via
the actions of Google Console

00:23:18.290 --> 00:23:20.930
and the updated SYNC response
from your cloud-to-cloud

00:23:20.930 --> 00:23:23.030
integration.

00:23:23.030 --> 00:23:25.610
Once the Google Assistant
receives this information,

00:23:25.610 --> 00:23:27.260
it will send it down
to all Google Home

00:23:27.260 --> 00:23:30.620
Devices a user's linked to.

00:23:30.620 --> 00:23:32.900
Once the Google Home
receives this information,

00:23:32.900 --> 00:23:37.600
it begins looking for
devices on the local network.

00:23:37.600 --> 00:23:39.870
When a smart device
responds, the Google Home

00:23:39.870 --> 00:23:44.800
generates an IDENTIFY intent
to the appropriate JavaScript.

00:23:44.800 --> 00:23:47.960
The JavaScript responds
with a verificationId.

00:23:47.960 --> 00:23:50.390
And the Local Home
platform does some magic

00:23:50.390 --> 00:23:52.550
to determine if there
is a local path.

00:23:52.550 --> 00:23:55.550
If there is, Google Home will
update the Google Assistant

00:23:55.550 --> 00:23:58.690
with this optimized route.

00:23:58.690 --> 00:24:02.470
Let's dive into the details
of what that magic is.

00:24:02.470 --> 00:24:04.410
If you take a look
at the first step,

00:24:04.410 --> 00:24:06.040
we've updated SYNC response.

00:24:06.040 --> 00:24:09.340
And you've told us via
the otherDeviceIds field

00:24:09.340 --> 00:24:12.400
that we should start looking
for a device locally.

00:24:12.400 --> 00:24:14.320
Once we find a
device locally, we'll

00:24:14.320 --> 00:24:16.780
ask you to give us
a verificationId

00:24:16.780 --> 00:24:18.610
via the JavaScript.

00:24:18.610 --> 00:24:22.570
If we find a match between
the verificationId and any one

00:24:22.570 --> 00:24:24.640
of the otherDeviceIds
field, we'll

00:24:24.640 --> 00:24:26.830
call that a Deduplicated match.

00:24:26.830 --> 00:24:31.360
And we'll tell the Assistant
that that device can go local.

00:24:31.360 --> 00:24:32.680
If not, that's OK.

00:24:32.680 --> 00:24:37.075
We'll still go to your
cloud for integration.

00:24:37.075 --> 00:24:37.950
GAURAV NOLKHA: Great.

00:24:37.950 --> 00:24:40.710
So now that local path is
available thanks to the SYNC

00:24:40.710 --> 00:24:43.980
response, IDENTIFY,
and REACHABLE_DEVICES,

00:24:43.980 --> 00:24:48.670
let's make sure when the user
saves a command, it goes local.

00:24:48.670 --> 00:24:51.100
So user says, hey, G, lights on.

00:24:51.100 --> 00:24:54.640
Assistant then sends a message
to Google Home, in this case,

00:24:54.640 --> 00:24:57.180
because we have
established a local path.

00:24:57.180 --> 00:25:02.010
At that point, the platform
generates EXECUTE intent.

00:25:02.010 --> 00:25:05.490
And EXECUTE intent handler
in your JavaScript app

00:25:05.490 --> 00:25:07.170
gets called.

00:25:07.170 --> 00:25:09.990
The key information to look for
in the ExecuteRequest object

00:25:09.990 --> 00:25:11.640
is the list of
devices that the user

00:25:11.640 --> 00:25:15.000
wanted to control and the
command and the control

00:25:15.000 --> 00:25:16.230
that user really wanted.

00:25:16.230 --> 00:25:19.670
Could be on/off,
brightness, whatever.

00:25:19.670 --> 00:25:22.290
So your app is going
to create a command

00:25:22.290 --> 00:25:26.040
for each one of those devices or
a series of commands, actually,

00:25:26.040 --> 00:25:28.350
and then use the
deviceManager send API

00:25:28.350 --> 00:25:31.770
to communicate with the device.

00:25:31.770 --> 00:25:35.490
And for your help, we have
a utility builder function

00:25:35.490 --> 00:25:39.420
available that helps you
create the ExecuteResponse.

00:25:39.420 --> 00:25:42.220
And you can specify the
success or the failure state

00:25:42.220 --> 00:25:43.470
for each one of those devices.

00:25:47.520 --> 00:25:51.140
So one thing to note here
is that your app does not

00:25:51.140 --> 00:25:54.440
have direct access to IP
address of the device.

00:25:54.440 --> 00:25:58.190
And we expect your app
to use the CommandRequest

00:25:58.190 --> 00:26:00.800
object to communicate
with the platform

00:26:00.800 --> 00:26:03.145
and eventually to your device.

00:26:03.145 --> 00:26:04.520
And so we are
showing here again,

00:26:04.520 --> 00:26:08.810
you could use TCP or UDP
socket or HTTP/HTTPS request.

00:26:11.520 --> 00:26:12.930
MANIT LIMLAMAI:
So to recap, what

00:26:12.930 --> 00:26:16.920
you need to do as a developer
to develop your local Smart Home

00:26:16.920 --> 00:26:20.345
app that will run under Google
Home device are these steps.

00:26:20.345 --> 00:26:22.470
You'll tell the Google Home
how to find your device

00:26:22.470 --> 00:26:26.010
on a user's local network via
the Actions on Google Console.

00:26:26.010 --> 00:26:28.410
You'll update the SYNC
response with a hint

00:26:28.410 --> 00:26:30.450
to establish this local path.

00:26:30.450 --> 00:26:32.400
And you'll write an
app that will handle

00:26:32.400 --> 00:26:35.070
IDENTIFY and EXECUTE
intents and, optionally,

00:26:35.070 --> 00:26:37.740
a REACHABLE_DEVICES intent.

00:26:37.740 --> 00:26:39.640
GAURAV NOLKHA: Great.

00:26:39.640 --> 00:26:45.010
So moving on now that the app
is written and it's TypeScript,

00:26:45.010 --> 00:26:47.990
so let's start right building
and running this app.

00:26:47.990 --> 00:26:50.470
So TypeScript,
simple, you're going

00:26:50.470 --> 00:26:53.508
to use a TypeScript compiler
to generate the JavaScript app.

00:26:53.508 --> 00:26:55.300
And the good thing is
you can use whichever

00:26:55.300 --> 00:26:57.170
module system you want.

00:26:57.170 --> 00:26:59.230
And as long as the
target you choose

00:26:59.230 --> 00:27:02.950
is supported by Chrome
browser, you're good to go.

00:27:02.950 --> 00:27:06.190
Because remember, this is
an app that conceptually

00:27:06.190 --> 00:27:08.650
is running in a browser tab.

00:27:11.370 --> 00:27:14.580
So far we've talked
about that a JavaScript

00:27:14.580 --> 00:27:15.960
app is running in the browser.

00:27:15.960 --> 00:27:19.830
But technically,
it's an HTML page.

00:27:19.830 --> 00:27:22.680
So look at the sample HTML.

00:27:22.680 --> 00:27:28.660
It really doesn't do much, only
loads the SDK and your app.

00:27:28.660 --> 00:27:31.470
And during development,
you can actually

00:27:31.470 --> 00:27:34.840
host this HTML page
in your local machine

00:27:34.840 --> 00:27:36.490
or on a hosting server.

00:27:36.490 --> 00:27:40.020
And once you have that
URL, go back to Actions

00:27:40.020 --> 00:27:41.460
on Google console.

00:27:41.460 --> 00:27:45.420
And on device
testing page, there's

00:27:45.420 --> 00:27:48.210
an input box for you
to enter this URL.

00:27:48.210 --> 00:27:52.170
Once you save this URL, give
30 minutes for our servers

00:27:52.170 --> 00:27:54.200
to propagate this information.

00:27:54.200 --> 00:27:58.590
And at that point, if you
reboot your Google Home devices,

00:27:58.590 --> 00:28:01.890
then you can imagine
a tab coming up.

00:28:01.890 --> 00:28:05.550
And it's loading
your JavaScript app.

00:28:05.550 --> 00:28:08.410
And if all of that
works, moment of truth.

00:28:08.410 --> 00:28:10.740
Hey, G, lights on.

00:28:10.740 --> 00:28:12.600
Did that work?

00:28:12.600 --> 00:28:14.370
And did it go local?

00:28:14.370 --> 00:28:16.710
Well, that question brings
us to our next section.

00:28:19.453 --> 00:28:21.370
MANIT LIMLAMAI: Testing
and debugging your app

00:28:21.370 --> 00:28:23.860
can be a little complex
because the app is running

00:28:23.860 --> 00:28:25.360
on the Google Home device.

00:28:25.360 --> 00:28:27.280
But we've leveraged
a few familiar tools

00:28:27.280 --> 00:28:29.350
to make it easier.

00:28:29.350 --> 00:28:32.770
Open chrome://inspect on a
new Chrome tab on a machine

00:28:32.770 --> 00:28:36.710
that's on the same Wi-Fi network
as the Google Home device.

00:28:36.710 --> 00:28:40.180
Make sure your network doesn't
block packets between devices

00:28:40.180 --> 00:28:41.620
on the same Wi-Fi.

00:28:41.620 --> 00:28:44.620
And you should see your
app listed, like this image

00:28:44.620 --> 00:28:46.330
on the screen behind me.

00:28:46.330 --> 00:28:49.660
Click the inspect link
underneath your JavaScript,

00:28:49.660 --> 00:28:53.570
and you can open up DevTools
to remote debug your app.

00:28:53.570 --> 00:28:57.460
But what if your app
isn't in this list?

00:28:57.460 --> 00:28:59.920
Because your Actions on
Google Console project

00:28:59.920 --> 00:29:01.960
is not yet in
production, a few things

00:29:01.960 --> 00:29:05.480
need to be right before
your code kicks into action.

00:29:05.480 --> 00:29:07.360
Let's go through that checklist.

00:29:07.360 --> 00:29:10.510
Make sure the linked user
on the Google Home device

00:29:10.510 --> 00:29:13.960
has access to your
Actions on Google project.

00:29:13.960 --> 00:29:16.120
Second, make sure
your SYNC response

00:29:16.120 --> 00:29:20.650
is updated and contains at least
one otherDeviceIds field filled

00:29:20.650 --> 00:29:21.610
in.

00:29:21.610 --> 00:29:25.030
Finally, the scan
config and your app URL

00:29:25.030 --> 00:29:29.710
should be correctly entered in
the Actions on Google Console.

00:29:29.710 --> 00:29:33.190
Now let's assume that all those
worked and your app is loading.

00:29:33.190 --> 00:29:36.070
Let's make sure it
loads without errors.

00:29:36.070 --> 00:29:39.130
To ensure that, you can
look at the console section

00:29:39.130 --> 00:29:41.140
of the DevTools page.

00:29:41.140 --> 00:29:44.980
It will look something like
this if there is a problem.

00:29:44.980 --> 00:29:49.090
For IDENTIFY handler, make sure
that verificationId is correct

00:29:49.090 --> 00:29:51.790
and it matches one of
the otherDeviceIds field

00:29:51.790 --> 00:29:56.080
so that we can do the
magic to go local.

00:29:56.080 --> 00:29:58.150
Next, for the
EXECUTE handler, make

00:29:58.150 --> 00:29:59.860
sure that the
commands are working,

00:29:59.860 --> 00:30:04.390
either TCP, UDP, or HTTP/HTTPS.

00:30:04.390 --> 00:30:07.810
And finally, make sure that
you are returning a promise

00:30:07.810 --> 00:30:08.935
from each of your handlers.

00:30:13.770 --> 00:30:16.410
GAURAV NOLKHA: So now, to ensure
the great user experience,

00:30:16.410 --> 00:30:19.050
it's important that the Smart
Home integration that you just

00:30:19.050 --> 00:30:22.750
did is complete and all
the golden queries work.

00:30:22.750 --> 00:30:23.760
So how do you do that?

00:30:26.810 --> 00:30:29.030
Smart Home Test
Suite is your friend

00:30:29.030 --> 00:30:31.430
when it comes to testing
your integration.

00:30:31.430 --> 00:30:34.610
And we're going to talk
more about Smart Home Test

00:30:34.610 --> 00:30:38.900
Suite in detail in tomorrow's
talk at 9:30 AM on stage 5.

00:30:38.900 --> 00:30:41.720
So join us.

00:30:41.720 --> 00:30:44.930
Finally, let's look at
quickly the remainder

00:30:44.930 --> 00:30:48.230
of the app lifecycle.

00:30:48.230 --> 00:30:49.760
So your app works.

00:30:49.760 --> 00:30:51.920
Smart Home Test Suite
says it's working.

00:30:51.920 --> 00:30:53.630
All the tests pass.

00:30:53.630 --> 00:30:56.430
And at that point, it's time
to upload your JavaScript.

00:30:56.430 --> 00:30:59.120
So go back to the Console,
upload your JavaScript,

00:30:59.120 --> 00:30:59.750
hit Save.

00:31:03.320 --> 00:31:06.870
After you feel ready, you
hit the Submit button.

00:31:06.870 --> 00:31:09.590
And that starts the
certification process

00:31:09.590 --> 00:31:12.645
on Google's end to certify
this new JavaScript

00:31:12.645 --> 00:31:14.350
and the integration.

00:31:14.350 --> 00:31:19.640
Once certified, your project
launches to all the users.

00:31:19.640 --> 00:31:23.090
Once it's launched, you can
manage your integration again.

00:31:23.090 --> 00:31:26.120
And Actions on Google Console
is your window to doing that.

00:31:26.120 --> 00:31:28.400
You can monitor
the ops dashboard.

00:31:28.400 --> 00:31:30.140
You can look at the
Stackdriver logging

00:31:30.140 --> 00:31:31.970
for all the error logs
that are happening

00:31:31.970 --> 00:31:34.800
in production on Google's end.

00:31:34.800 --> 00:31:38.660
And if you find issues or
errors with your JavaScript,

00:31:38.660 --> 00:31:41.510
go back to the Console and,
again, upload the version

00:31:41.510 --> 00:31:43.040
2 of JavaScript.

00:31:43.040 --> 00:31:46.310
And hit Submit.

00:31:46.310 --> 00:31:49.610
If you see that in production
there is a JavaScript bug

00:31:49.610 --> 00:31:51.680
and you need to roll back
to a working version,

00:31:51.680 --> 00:31:54.050
like V1 of your
JavaScript, you can, again,

00:31:54.050 --> 00:31:57.020
work with us through the
Console to kind of help

00:31:57.020 --> 00:32:00.805
you roll back your JavaScript.

00:32:00.805 --> 00:32:02.180
So we've covered
a lot of details

00:32:02.180 --> 00:32:04.490
about the complete
developer flow,

00:32:04.490 --> 00:32:08.380
from writing your app
to launching your app.

00:32:08.380 --> 00:32:10.100
If you want to learn
more about the tools

00:32:10.100 --> 00:32:13.940
available and for faster
approval and submission

00:32:13.940 --> 00:32:19.170
process, join us at the Tools
For Creating Better Smart Home

00:32:19.170 --> 00:32:23.060
talk on Thursday
morning at 9:30 AM.

00:32:23.060 --> 00:32:27.410
And now to know what's
next, I'll invite Carl.

00:32:29.243 --> 00:32:30.368
CARL VOGEL: Thanks, Gaurav.

00:32:36.865 --> 00:32:39.370
So we have a busy couple
months ahead of us.

00:32:39.370 --> 00:32:44.320
The link behind me,
g.co/localhomesdk, is now live.

00:32:44.320 --> 00:32:47.170
So you can go ahead, visit
that link to learn more.

00:32:47.170 --> 00:32:48.970
And we'll also be
posting updates

00:32:48.970 --> 00:32:52.080
throughout the next couple
of months to that page.

00:32:52.080 --> 00:32:55.090
In just a few weeks,
we'll launch the SDK

00:32:55.090 --> 00:32:56.820
into developer preview.

00:32:56.820 --> 00:32:59.020
And at this time, you'll
be able to build and test

00:32:59.020 --> 00:33:01.270
your JavaScript app in
the local environment

00:33:01.270 --> 00:33:03.130
and complete the
self-certification program

00:33:03.130 --> 00:33:05.597
that Gaurav was talking about.

00:33:05.597 --> 00:33:07.930
And although we don't think
it will take you a long time

00:33:07.930 --> 00:33:10.180
to complete this
integration, we wanted

00:33:10.180 --> 00:33:12.650
to make sure we gave
you plenty of time.

00:33:12.650 --> 00:33:14.290
And so we began
launching projects

00:33:14.290 --> 00:33:18.695
to production in October and
bringing this amazing speed

00:33:18.695 --> 00:33:19.195
to users.

00:33:22.770 --> 00:33:24.950
We'd be remiss if we
didn't give a big thank you

00:33:24.950 --> 00:33:27.470
to some of the partners
on the slide behind me

00:33:27.470 --> 00:33:30.950
for providing engineering
time and energy to test out

00:33:30.950 --> 00:33:34.730
the platform and SDK to make
sure we deliver a rock star

00:33:34.730 --> 00:33:36.170
product to you in June.

00:33:38.950 --> 00:33:43.180
So when we've talked about
going local this whole talk,

00:33:43.180 --> 00:33:46.610
local execution is just
the tip of the iceberg.

00:33:46.610 --> 00:33:50.120
We have much, much more in mind.

00:33:50.120 --> 00:33:52.330
I want to briefly talk
about two technologies

00:33:52.330 --> 00:33:56.140
we're building that leverage
local communication to improve

00:33:56.140 --> 00:34:00.170
the device setup experience and
to extend the Assistant even

00:34:00.170 --> 00:34:00.670
further.

00:34:03.230 --> 00:34:06.410
One of the things
we've heard from users

00:34:06.410 --> 00:34:10.739
is that setup and account
making of smart devices is hard.

00:34:10.739 --> 00:34:13.639
In fact, it can take
upwards of 10-plus steps

00:34:13.639 --> 00:34:16.699
for users, including
downloading a new app,

00:34:16.699 --> 00:34:18.590
creating a new user
name and password,

00:34:18.590 --> 00:34:21.530
setting up the
device, taking an OTA,

00:34:21.530 --> 00:34:23.989
going back to the Google Home
app or Google Assistant app

00:34:23.989 --> 00:34:26.850
to link, reentering
those credentials.

00:34:26.850 --> 00:34:29.690
It's not easy for users.

00:34:29.690 --> 00:34:32.030
And one of the other
things we heard is that--

00:34:32.030 --> 00:34:35.280
and it seems that users have
a lot of apps on their phones

00:34:35.280 --> 00:34:37.010
to manage their smart home.

00:34:37.010 --> 00:34:39.679
And for all you smart home
enthusiasts out there,

00:34:39.679 --> 00:34:41.659
you'll recognize this
phone on this screen

00:34:41.659 --> 00:34:44.960
behind me, that you need a
folder to actually manage

00:34:44.960 --> 00:34:47.460
your smart home.

00:34:47.460 --> 00:34:50.090
So we took our first step
towards solving this device

00:34:50.090 --> 00:34:53.750
setup problem with GE lighting
and developing a seamless setup

00:34:53.750 --> 00:34:57.230
experience that we delivered
first in the Google Smart Light

00:34:57.230 --> 00:34:58.700
Starter Kit.

00:34:58.700 --> 00:35:03.110
We gave users the ability to
natively setup C by GE Smart

00:35:03.110 --> 00:35:07.130
Lights in the Google Home app
without needing to download

00:35:07.130 --> 00:35:09.230
any additional apps.

00:35:09.230 --> 00:35:11.760
And instead of this
10-plus step process,

00:35:11.760 --> 00:35:16.140
we reduced it to three
steps and about 30 seconds.

00:35:16.140 --> 00:35:18.690
Let's take a look and
see what it looks like.

00:35:18.690 --> 00:35:23.210
So when a Google Home device
discovers a C by GE light,

00:35:23.210 --> 00:35:26.330
we prompt the user,
would you like

00:35:26.330 --> 00:35:28.250
to set up your smart light?

00:35:28.250 --> 00:35:30.230
Then we go ahead and
connect to the bulb

00:35:30.230 --> 00:35:32.540
and discover services,
at which point

00:35:32.540 --> 00:35:34.250
then the bulb will
begin to blink.

00:35:34.250 --> 00:35:36.980
And this will let the user know
which bulb they're setting up.

00:35:36.980 --> 00:35:38.730
They click Setup and
choose which room

00:35:38.730 --> 00:35:40.840
they want it to go in
and give it a name.

00:35:40.840 --> 00:35:42.590
At this point, we're
provisioning the bulb

00:35:42.590 --> 00:35:45.560
to the local network and
registering it with Home Graph.

00:35:45.560 --> 00:35:47.690
And in just about
one second, you'll

00:35:47.690 --> 00:35:52.520
see that the smart light is
now set up and at which point

00:35:52.520 --> 00:35:57.140
it can go ahead and start
taking Google Home commands.

00:35:57.140 --> 00:36:00.800
And so 30 seconds is really
incredible for our users.

00:36:00.800 --> 00:36:03.890
And we've heard really
great feedback so far.

00:36:09.320 --> 00:36:11.110
And we accomplish
this by allowing

00:36:11.110 --> 00:36:14.890
GE to run their code
on Google Home devices.

00:36:14.890 --> 00:36:16.690
And yes, as you
may have guessed,

00:36:16.690 --> 00:36:21.040
they also used the
Local Home SDK.

00:36:21.040 --> 00:36:23.350
However, to do
seamless setup, there's

00:36:23.350 --> 00:36:26.290
more intents to write
than just the IDENTIFY

00:36:26.290 --> 00:36:28.190
and EXECUTE we
talked about today,

00:36:28.190 --> 00:36:31.400
including INDICATE, PROVISION,
UNPROVISION, et cetera.

00:36:31.400 --> 00:36:34.360
And those are all
part of the SDK.

00:36:34.360 --> 00:36:37.990
And also, this SDK can be
used for more than just

00:36:37.990 --> 00:36:39.640
the Wi-Fi radio.

00:36:39.640 --> 00:36:42.430
As part of early access,
we allow this SDK

00:36:42.430 --> 00:36:46.600
to also leverage the Bluetooth
radios for direct connection

00:36:46.600 --> 00:36:49.360
to BLE devices.

00:36:49.360 --> 00:36:52.390
And through this seamless setup
experience with BLE devices,

00:36:52.390 --> 00:36:55.150
we use the Google Home as a hub.

00:36:55.150 --> 00:36:58.000
So you don't need to go out
and buy an additional BLE

00:36:58.000 --> 00:37:00.440
hub or gateway.

00:37:00.440 --> 00:37:02.570
We're growing the
seamless setup program now

00:37:02.570 --> 00:37:06.080
and focusing on BLE
devices in the near term.

00:37:06.080 --> 00:37:08.200
So if you're
interested, let us know

00:37:08.200 --> 00:37:10.540
by visiting the link on
the screen behind me.

00:37:13.370 --> 00:37:15.980
Next, I want to talk about
a Assistant Connect, which

00:37:15.980 --> 00:37:18.500
is something that you may
have heard about at CES

00:37:18.500 --> 00:37:21.410
and we've been continuing
to invest in since.

00:37:21.410 --> 00:37:23.600
It leverages the same
Local Home platform

00:37:23.600 --> 00:37:25.550
that Manit talked
about to extend

00:37:25.550 --> 00:37:27.860
the reach of the
Google Assistant, which

00:37:27.860 --> 00:37:30.400
we call Assistant extensions.

00:37:30.400 --> 00:37:33.540
And we've classified
these into two categories.

00:37:33.540 --> 00:37:35.600
The first is input
extensions, which

00:37:35.600 --> 00:37:37.550
enable a simple
method for a user

00:37:37.550 --> 00:37:41.180
to activate the Assistant to do
everything from simple queries,

00:37:41.180 --> 00:37:44.930
such as, what's the weather, to
triggering advanced smart home

00:37:44.930 --> 00:37:46.340
routines.

00:37:46.340 --> 00:37:48.740
Here, we have a simple,
programmable button

00:37:48.740 --> 00:37:52.490
that instead of always
requiring users to say, hey, G,

00:37:52.490 --> 00:37:54.620
they can go ahead and
just push the button.

00:37:54.620 --> 00:37:58.190
It's really great for some
of those frequent queries.

00:37:58.190 --> 00:38:01.310
In addition, we also
have output extensions

00:38:01.310 --> 00:38:04.340
that enable devices to
show Assistant responses,

00:38:04.340 --> 00:38:07.010
such as, what's the
weather, or their schedule

00:38:07.010 --> 00:38:09.890
from their Google Calendar.

00:38:09.890 --> 00:38:12.170
So this is currently in
early access right now.

00:38:12.170 --> 00:38:16.650
And throughout 2019, we have a
really busy year ahead of us.

00:38:16.650 --> 00:38:19.170
We have some product launches
coming up later this year.

00:38:19.170 --> 00:38:20.330
So stay tuned.

00:38:20.330 --> 00:38:22.670
And our teams are finalizing
the reference design

00:38:22.670 --> 00:38:26.420
and preparing the Assistant
Connect SDK for public release

00:38:26.420 --> 00:38:27.790
later this year.

00:38:27.790 --> 00:38:30.170
And by 2020, we
expect developers

00:38:30.170 --> 00:38:32.780
to have self-service
access and the ability

00:38:32.780 --> 00:38:35.900
to even more easily and
deeply integrate the Assistant

00:38:35.900 --> 00:38:38.650
into their products.

00:38:38.650 --> 00:38:43.450
So to recap, we believe that
driving logic from cloud

00:38:43.450 --> 00:38:46.480
to on device is
central to our strategy

00:38:46.480 --> 00:38:49.690
to create even better
experiences for users.

00:38:49.690 --> 00:38:51.640
And we believe that
by going local,

00:38:51.640 --> 00:38:53.800
we can also invite
developers to integrate

00:38:53.800 --> 00:38:56.680
more deeply with Google.

00:38:56.680 --> 00:38:58.900
Secondly, the
developer experience

00:38:58.900 --> 00:39:02.260
is key to building a great
smart home ecosystem.

00:39:02.260 --> 00:39:06.340
Our ecosystem is only as strong
as our developer community,

00:39:06.340 --> 00:39:07.810
you all.

00:39:07.810 --> 00:39:10.090
We've taken many steps
to make onboarding

00:39:10.090 --> 00:39:12.520
as simple as
possible, for example,

00:39:12.520 --> 00:39:15.820
by not requiring firmware
updates to garner the benefits

00:39:15.820 --> 00:39:17.500
of local execution.

00:39:17.500 --> 00:39:20.200
And we always welcome feedback
on how we can further improve.

00:39:20.200 --> 00:39:22.510
So definitely let us know.

00:39:22.510 --> 00:39:26.380
And lastly, a big
focus for us in 2019

00:39:26.380 --> 00:39:28.540
is reducing friction and
making the device setup

00:39:28.540 --> 00:39:30.250
and linking more seamless.

00:39:30.250 --> 00:39:34.250
I encourage you to explore
our programs and learn more.

00:39:34.250 --> 00:39:37.220
So with that, I realize
at 5:30 PM talk,

00:39:37.220 --> 00:39:38.730
you're foregoing happy hour.

00:39:38.730 --> 00:39:41.330
So we thank you for coming here
today and listening to learn

00:39:41.330 --> 00:39:43.308
more about local technologies.

00:39:43.308 --> 00:39:44.850
If you have any
additional questions,

00:39:44.850 --> 00:39:46.880
check out the links in
the slide behind me,

00:39:46.880 --> 00:39:50.180
visit us in the sandbox, or
swing by our office hours.

00:39:50.180 --> 00:39:53.150
And with that, enjoy the
rest of your I/O. Thank you.

00:39:53.150 --> 00:39:56.500
[MUSIC PLAYING]

