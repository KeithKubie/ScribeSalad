WEBVTT
Kind: captions
Language: en

00:00:00.500 --> 00:00:02.580
DAN GALPIN: A nightmare
for any Android developer

00:00:02.580 --> 00:00:04.650
involves losing
their app signing key

00:00:04.650 --> 00:00:07.350
or having their app
signing key compromised.

00:00:07.350 --> 00:00:09.930
Losing this key prevents you
from updating your published

00:00:09.930 --> 00:00:12.030
app, while a
compromised key allows

00:00:12.030 --> 00:00:14.190
others to potentially
leverage your identity

00:00:14.190 --> 00:00:16.170
for malicious intent.

00:00:16.170 --> 00:00:18.570
Since the security
provided by this signature

00:00:18.570 --> 00:00:22.560
is integrated into the Android
platform, once the key is lost,

00:00:22.560 --> 00:00:23.895
little can be done.

00:00:23.895 --> 00:00:25.770
That means that developers
have traditionally

00:00:25.770 --> 00:00:27.990
been responsible for keeping
their private signing

00:00:27.990 --> 00:00:30.810
key both safe and accessible.

00:00:30.810 --> 00:00:32.910
But now you can let
Google Play sign apps

00:00:32.910 --> 00:00:36.210
and manage your keys for you
in the Google Play Console.

00:00:36.210 --> 00:00:40.140
Let's go through the app signing
process with an existing app.

00:00:40.140 --> 00:00:42.810
After selecting one of your
apps in the Play Console,

00:00:42.810 --> 00:00:45.390
App Signing is available under
the Release Management tools

00:00:45.390 --> 00:00:46.560
section.

00:00:46.560 --> 00:00:48.336
After accepting the
terms of service,

00:00:48.336 --> 00:00:49.710
you will see the
App Signing page

00:00:49.710 --> 00:00:52.260
with details about how
it works and instructions

00:00:52.260 --> 00:00:54.690
on how to start using
it with your app.

00:00:54.690 --> 00:00:56.820
If you store your key
in a Java KeyStore,

00:00:56.820 --> 00:01:00.150
the first step is to
download the PEPK tool.

00:01:00.150 --> 00:01:03.360
You use the PEPK tool along with
the command given in the Play

00:01:03.360 --> 00:01:06.930
Console to create an encrypted
version of your signing key.

00:01:06.930 --> 00:01:08.695
If you aren't using
a Java KeyStore,

00:01:08.695 --> 00:01:11.070
we also have instructions for
how to encrypt your signing

00:01:11.070 --> 00:01:13.560
key from a plain text PEM file.

00:01:13.560 --> 00:01:15.180
Then you upload the
encrypted key file

00:01:15.180 --> 00:01:18.240
to Google Play using
the Play Console.

00:01:18.240 --> 00:01:20.160
Now that Google Play
has your signing key,

00:01:20.160 --> 00:01:21.960
you have to generate
a new upload key

00:01:21.960 --> 00:01:23.640
and register the
public key certificate

00:01:23.640 --> 00:01:25.320
for this key with Google.

00:01:25.320 --> 00:01:27.150
The detailed key tool
command to do this

00:01:27.150 --> 00:01:29.460
can be found under
the App Signing page.

00:01:29.460 --> 00:01:31.350
Then you upload
both key files using

00:01:31.350 --> 00:01:34.860
the Play Console in a
single, secure transaction.

00:01:34.860 --> 00:01:37.230
After uploading the required
keys and certificate,

00:01:37.230 --> 00:01:38.820
click Enroll.

00:01:38.820 --> 00:01:40.530
If everything is OK,
you'll see a page

00:01:40.530 --> 00:01:42.792
with deployment and
upload certificates.

00:01:42.792 --> 00:01:44.250
And when managing
your release, you

00:01:44.250 --> 00:01:46.320
will see a green
check on App Signing,

00:01:46.320 --> 00:01:48.259
indicating that it is enabled.

00:01:48.259 --> 00:01:49.800
For a new app, you
can choose to have

00:01:49.800 --> 00:01:53.580
Google generate the signing key
so the process is much simpler.

00:01:53.580 --> 00:01:57.720
We highly recommend you use
App Signing to sign new apps.

00:01:57.720 --> 00:01:59.340
After enrolling in
App Signing, you

00:01:59.340 --> 00:02:02.850
will use the upload key to sign
all future updates to your app.

00:02:02.850 --> 00:02:05.640
Google Play uses the upload
key to verify your identity

00:02:05.640 --> 00:02:08.699
and will then sign your app with
the original app signing key.

00:02:08.699 --> 00:02:11.760
That newly signed app will
be delivered to users.

00:02:11.760 --> 00:02:14.670
You may ask, but I'm still
having to sign with a key?

00:02:14.670 --> 00:02:18.150
What happens if I lose this key
or this key gets compromised?

00:02:18.150 --> 00:02:19.410
No problem.

00:02:19.410 --> 00:02:21.330
We can revoke the
key immediately,

00:02:21.330 --> 00:02:23.760
as it is used to verify
your identity with Google,

00:02:23.760 --> 00:02:27.490
but isn't part of the Android
Platform Security model.

00:02:27.490 --> 00:02:29.380
To have your current
upload key revoked,

00:02:29.380 --> 00:02:30.970
you can contact
Google Play support

00:02:30.970 --> 00:02:32.570
through a web support form.

00:02:32.570 --> 00:02:35.200
So when you use App
Signing, losing your key

00:02:35.200 --> 00:02:38.110
doesn't mean that you can't
update your app anymore.

00:02:38.110 --> 00:02:40.930
With a simple process, you
can generate a new upload key

00:02:40.930 --> 00:02:42.640
and provide us with
its certificate

00:02:42.640 --> 00:02:45.070
so you can continue
updating your app.

00:02:45.070 --> 00:02:47.740
Access the Play Console
to enroll your application

00:02:47.740 --> 00:02:50.110
and take advantage
of App Signing today.

00:02:50.110 --> 00:02:53.050
For more details, check
out the documentation.

00:02:53.050 --> 00:02:54.340
Thanks for watching.

00:02:54.340 --> 00:02:57.690
[MUSIC PLAYING]

