WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:19.170
[MUSIC PLAYS]

00:00:19.170 --> 00:00:20.050
CLAUDIO CHERUBINO:
Hi everyone.

00:00:20.050 --> 00:00:22.150
Welcome back to Google
Developers Live.

00:00:22.150 --> 00:00:24.960
My name is Claudio and I'm one
of the engineers in the Google

00:00:24.960 --> 00:00:27.800
Drive Developer relations
team.

00:00:27.800 --> 00:00:31.950
We get a lot of requests from
you about what you want us to

00:00:31.950 --> 00:00:34.890
talk about in Google Developers
Live, but there is

00:00:34.890 --> 00:00:39.210
one topic that most of you ask
for, and that is how do I

00:00:39.210 --> 00:00:43.140
write an Android app that
uses Google Drive.

00:00:43.140 --> 00:00:45.640
This is a very common feature
request, and this is a very

00:00:45.640 --> 00:00:47.090
important scenario for us.

00:00:47.090 --> 00:00:51.220
So today I'm going to show you
how you can write your first

00:00:51.220 --> 00:00:53.880
Android application
that uses Drive.

00:00:53.880 --> 00:00:56.870
We also added this tutorial
to the documentation on

00:00:56.870 --> 00:01:01.410
developers.google.com/drive
just today.

00:01:01.410 --> 00:01:03.480
Probably two hours ago.

00:01:03.480 --> 00:01:07.550
So you can watch this video, and
if you need some guidance,

00:01:07.550 --> 00:01:09.680
you missed some commands, you
can always go back to our

00:01:09.680 --> 00:01:12.190
documentation or you can
watch this video again.

00:01:12.190 --> 00:01:15.140
It's going to be recorded and
you can watch it at any time.

00:01:15.140 --> 00:01:18.150
So if we go to our
documentation, as I said, in

00:01:18.150 --> 00:01:24.040
the home page we have the list
of five minute quick starts in

00:01:24.040 --> 00:01:25.780
different languages.

00:01:25.780 --> 00:01:28.100
The last one we added
is Android.

00:01:28.100 --> 00:01:31.280
We recently added Objective C.
We're going to talk about it

00:01:31.280 --> 00:01:34.240
in a future session of Google
Developers Live.

00:01:34.240 --> 00:01:36.780
But today we're going to
talk about Android.

00:01:36.780 --> 00:01:41.080
So if we click on this Android
link here we will be brought

00:01:41.080 --> 00:01:42.730
to the Android specific page.

00:01:42.730 --> 00:01:45.260
It looks like all the
other quickstarts.

00:01:45.260 --> 00:01:48.320
So you might have seen this
quickstart already.

00:01:48.320 --> 00:01:52.370
We covered most of them on
Google Developers Live.

00:01:52.370 --> 00:01:56.110
The goal with these quickstarts
is to have an

00:01:56.110 --> 00:02:00.870
application in a few minutes, an
application that integrates

00:02:00.870 --> 00:02:02.180
with Drive.

00:02:02.180 --> 00:02:05.280
As usual, being a quickstart,
we tend to cut some corners.

00:02:05.280 --> 00:02:08.650
So this is not going to be
a perfect application.

00:02:08.650 --> 00:02:12.940
We might not follow Android
best practices today.

00:02:12.940 --> 00:02:15.800
But still, with by following
this you will have something

00:02:15.800 --> 00:02:19.400
running and then you could
always go back to it and make

00:02:19.400 --> 00:02:22.910
it better, make it a production
application.

00:02:22.910 --> 00:02:26.010
If we look at our documentation
there are five

00:02:26.010 --> 00:02:29.480
steps to have this application
running.

00:02:29.480 --> 00:02:33.820
And the first one is very
specific to Android.

00:02:33.820 --> 00:02:37.400
So the first step is generating
the signing

00:02:37.400 --> 00:02:38.650
certificate fingerprint.

00:02:41.090 --> 00:02:42.830
It's only required when writing
an Android app.

00:02:42.830 --> 00:02:47.320
Android has a unique
authorization mechanism.

00:02:47.320 --> 00:02:51.330
So it still uses Auth2, like we
do with all other languages

00:02:51.330 --> 00:02:52.830
in all other platforms.

00:02:52.830 --> 00:02:58.660
But it requires the developers
to register their package name

00:02:58.660 --> 00:03:03.260
in signing certificates
in the API's console.

00:03:03.260 --> 00:03:06.620
So this is what we need to
do as our first step.

00:03:06.620 --> 00:03:08.750
If you're an Android
developer you've

00:03:08.750 --> 00:03:09.780
probably seen this already.

00:03:09.780 --> 00:03:12.390
Whenever you want to publish
an application on

00:03:12.390 --> 00:03:17.240
play.google.com you have to
sign your certificate with

00:03:17.240 --> 00:03:18.380
your product.

00:03:18.380 --> 00:03:20.970
This is the same thing and this
is what we're going to do

00:03:20.970 --> 00:03:24.420
and let me show how
this works.

00:03:24.420 --> 00:03:28.980
So the first thing to do is to
generate the SHA1 fingerprint.

00:03:28.980 --> 00:03:31.150
And you can do it by
using a command

00:03:31.150 --> 00:03:33.740
line tool called keytool.

00:03:33.740 --> 00:03:38.830
There is the command line
here in the Docs.

00:03:38.830 --> 00:03:41.970
So if you're following
instructions, as I'm doing,

00:03:41.970 --> 00:03:49.030
you can just select it, and
copy it, and execute it in

00:03:49.030 --> 00:03:49.550
your shell.

00:03:49.550 --> 00:03:53.080
So let me move to my shell.

00:03:53.080 --> 00:03:55.610
I paste the command.

00:03:55.610 --> 00:03:58.440
I'm using keytool to export
my certificate

00:03:58.440 --> 00:04:01.110
from the debug keystore.

00:04:01.110 --> 00:04:02.490
This is important.

00:04:02.490 --> 00:04:06.660
Every time you write an
application in debug mode in

00:04:06.660 --> 00:04:10.010
Eclipse it automatically
generates a debug

00:04:10.010 --> 00:04:11.450
keystore for you.

00:04:11.450 --> 00:04:14.320
So we're going to use that debug
keystore for our debug

00:04:14.320 --> 00:04:14.910
application.

00:04:14.910 --> 00:04:17.890
Whenever you want to move your
application from debug to

00:04:17.890 --> 00:04:20.800
production, you have to generate
your own keys.

00:04:20.800 --> 00:04:25.480
And this is well documented in
the Android documentation.

00:04:25.480 --> 00:04:28.740
If you're using the debug
keystore, its default location

00:04:28.740 --> 00:04:32.653
is inside a hidden folder in
your home directory and the

00:04:32.653 --> 00:04:35.490
file is going to be called
debug.keystore.

00:04:35.490 --> 00:04:42.350
When we ask keytool to export a
certificate, we are asked to

00:04:42.350 --> 00:04:43.730
type the keystore password.

00:04:43.730 --> 00:04:46.080
If you're using the debug
keystore password that is

00:04:46.080 --> 00:04:49.650
automatically generated by
Eclipse, the default password

00:04:49.650 --> 00:04:50.410
is Android.

00:04:50.410 --> 00:04:57.320
So I'm going to type Android
and what I get is some

00:04:57.320 --> 00:04:58.880
information about my key.

00:04:58.880 --> 00:05:04.300
And what I need is the SHA1
fingerprint This line here.

00:05:04.300 --> 00:05:07.040
We're going to use it
in the second step.

00:05:07.040 --> 00:05:08.490
So we're done with
the first step.

00:05:08.490 --> 00:05:13.460
So the first step is to recap
exporting your signing

00:05:13.460 --> 00:05:15.430
certificate SHA1.

00:05:15.430 --> 00:05:17.120
And this is done
using keytool.

00:05:17.120 --> 00:05:21.060
Nothing special if you know
about Android development.

00:05:21.060 --> 00:05:23.690
So let's go back to the docs.

00:05:23.690 --> 00:05:26.120
So we're done with
the first one.

00:05:26.120 --> 00:05:28.720
Of all those information what
you need is the SHA1

00:05:28.720 --> 00:05:30.900
certificate, the SHA1
fingerprint.

00:05:30.900 --> 00:05:33.880
So we're going to keep
him handy for later.

00:05:33.880 --> 00:05:37.080
Second step is enabling
the drive API

00:05:37.080 --> 00:05:39.590
in the API's console.

00:05:39.590 --> 00:05:42.100
This is the same thing you
would do with any other

00:05:42.100 --> 00:05:43.500
language in any other
platform.

00:05:43.500 --> 00:05:50.540
So we go to the API's console
and we create a new project.

00:05:50.540 --> 00:05:54.000
I'm going to click on
create project.

00:05:54.000 --> 00:05:54.920
My session is expired.

00:05:54.920 --> 00:06:01.760
I'm going to reload the page and
create a new project, and

00:06:01.760 --> 00:06:04.060
then I have to enable
the APIs I need.

00:06:04.060 --> 00:06:08.530
To Drive API application I need
to enable the drive API.

00:06:08.530 --> 00:06:13.470
So I just click on Drive API,
click activate, and that's it.

00:06:13.470 --> 00:06:16.800
The drive API is now enabled.

00:06:16.800 --> 00:06:19.350
Now I need to generate
my credentials.

00:06:19.350 --> 00:06:25.220
So to do that, I go to
the API axis tab and

00:06:25.220 --> 00:06:26.800
click on create [? Auth ?]

00:06:26.800 --> 00:06:29.470
2.0 client ID.

00:06:29.470 --> 00:06:32.190
When I do, I have a step
by step wizard

00:06:32.190 --> 00:06:33.280
that I have to follow.

00:06:33.280 --> 00:06:38.520
In the first page I have to
specify my product name, my

00:06:38.520 --> 00:06:39.160
application name.

00:06:39.160 --> 00:06:42.650
Let's say it's going to
be Drive Quickstart.

00:06:42.650 --> 00:06:44.890
You can also add a product
logo and a homepage

00:06:44.890 --> 00:06:45.820
URL if you have it.

00:06:45.820 --> 00:06:49.860
If you don't just move
on and click Next.

00:06:49.860 --> 00:06:54.360
In the second page we have to
select installed application

00:06:54.360 --> 00:06:55.390
as the application type.

00:06:55.390 --> 00:06:57.440
You can select different
types of application.

00:06:57.440 --> 00:06:59.370
One is a web application.

00:06:59.370 --> 00:07:01.690
Otherwise a service account
application we also covered

00:07:01.690 --> 00:07:05.170
those in another session to
Google Developers Live but

00:07:05.170 --> 00:07:07.490
what we want is an installed
application, which is an

00:07:07.490 --> 00:07:09.200
application that is installed
on the device.

00:07:09.200 --> 00:07:14.372
So when I click on it I then
have to choose whether I want

00:07:14.372 --> 00:07:18.530
an Android app, IUS app, or any
other kind of installed

00:07:18.530 --> 00:07:19.290
application.

00:07:19.290 --> 00:07:20.480
We're building an Android
app so this

00:07:20.480 --> 00:07:22.240
is going to be Android.

00:07:22.240 --> 00:07:27.220
And when we do we have to
specify the package name in

00:07:27.220 --> 00:07:29.990
the signing certificate
fingerprint.

00:07:29.990 --> 00:07:34.920
This pair has to be unique and
these uniquely identifies your

00:07:34.920 --> 00:07:38.820
application, so that whenever
an API call comes from an

00:07:38.820 --> 00:07:43.230
application, Google will check
if it matches this package

00:07:43.230 --> 00:07:45.870
name and signing certificate.

00:07:45.870 --> 00:07:49.180
So we have to be extra
careful here.

00:07:49.180 --> 00:07:54.380
We cannot use a package name
and fingerprint pair we

00:07:54.380 --> 00:07:55.940
already used.

00:07:55.940 --> 00:07:59.540
So in our example the package
name is going to be

00:07:59.540 --> 00:08:00.790
com.example.drivequicksearch.

00:08:07.310 --> 00:08:10.980
If you use these values you can
basically copy and paste

00:08:10.980 --> 00:08:13.100
the rest of the code from
the documentation.

00:08:13.100 --> 00:08:16.500
If you change this, obviously,
you will have to change the

00:08:16.500 --> 00:08:18.440
package name in your
application.

00:08:18.440 --> 00:08:23.350
The easiest way to get started
with this quickstart, is to do

00:08:23.350 --> 00:08:26.160
exactly as we do, which
is even using the

00:08:26.160 --> 00:08:28.430
same package names.

00:08:28.430 --> 00:08:31.960
And obviously my package name
will be the same as yours

00:08:31.960 --> 00:08:34.730
because we will all use
com.example.drivequickstart

00:08:34.730 --> 00:08:37.970
but my signing certificate
fingerprint, the SHA1 string

00:08:37.970 --> 00:08:39.679
we generated, will be unique.

00:08:39.679 --> 00:08:43.140
So the pair, package name,
and SHA1 will be unique.

00:08:43.140 --> 00:08:47.340
So we need the SHA1 and we can
get it back from the terminal.

00:08:47.340 --> 00:08:49.450
So let's go back here.

00:08:49.450 --> 00:08:54.500
We need this SHA1 string
we just generated.

00:08:54.500 --> 00:08:59.800
We copy it from the
terminal and we

00:08:59.800 --> 00:09:03.280
paste it in the dialogue.

00:09:03.280 --> 00:09:04.430
That's all it takes.

00:09:04.430 --> 00:09:07.430
We can create client ID.

00:09:07.430 --> 00:09:11.400
Now you can see in the API's
console that we have our

00:09:11.400 --> 00:09:11.830
credentials.

00:09:11.830 --> 00:09:13.420
So we have a client ID.

00:09:13.420 --> 00:09:15.760
We have an application
type Android.

00:09:15.760 --> 00:09:18.510
We have our package name
specified and our certificate

00:09:18.510 --> 00:09:19.920
fingerprint.

00:09:19.920 --> 00:09:23.360
Since this is the debug
certificate that Eclipse

00:09:23.360 --> 00:09:27.050
already uses, when I will build
my application using

00:09:27.050 --> 00:09:31.180
Eclipse it will be automatically
signed with this

00:09:31.180 --> 00:09:34.700
same key, assuming that I'm
running it in debug mode.

00:09:34.700 --> 00:09:39.870
So if we go back to the dock,
this is explained and we are

00:09:39.870 --> 00:09:41.790
basically done with step two.

00:09:41.790 --> 00:09:45.870
Step three is in Eclipse.

00:09:45.870 --> 00:09:49.250
So we're going to create and
configure an Android project

00:09:49.250 --> 00:09:51.480
that uses the Drive API.

00:09:51.480 --> 00:09:55.140
So I have Eclipse open here.

00:09:55.140 --> 00:09:56.210
I have no other projects,
so I'm going

00:09:56.210 --> 00:09:58.610
to start from scratch.

00:09:58.610 --> 00:10:04.590
I'm going to do file, new
project, and select Android

00:10:04.590 --> 00:10:05.840
application project.

00:10:08.820 --> 00:10:11.920
Here I have to specify
my application name.

00:10:11.920 --> 00:10:16.790
In order for it to match what
we put in the API's console

00:10:16.790 --> 00:10:19.490
the application name has
to be drivequickstart.

00:10:19.490 --> 00:10:22.300
Remember if you change the
application name to be your

00:10:22.300 --> 00:10:25.050
own, you have to match it
in the API's console.

00:10:25.050 --> 00:10:26.300
So I'm going to type
drivequickstart.

00:10:28.560 --> 00:10:34.960
And as you can see the package
name is automatically set to

00:10:34.960 --> 00:10:38.840
com.example.drivequickstart,
which is what I have in the

00:10:38.840 --> 00:10:40.330
API's console.

00:10:40.330 --> 00:10:44.080
What I'm going to do next is to
set the latest version of

00:10:44.080 --> 00:10:45.020
the target SDK.

00:10:45.020 --> 00:10:49.570
So we now have devices with the
latest version of the SDK.

00:10:49.570 --> 00:10:51.710
The Android SDK is 4.2.

00:10:51.710 --> 00:10:56.645
So I'm going to have target SDK
API 17, Android 4.2 just

00:10:56.645 --> 00:10:58.530
to get the latest.

00:10:58.530 --> 00:11:02.740
And we're going to compile with
same version but with

00:11:02.740 --> 00:11:05.190
Google APIs.

00:11:05.190 --> 00:11:08.450
Everything else in this
dialogue, in this wizard, we

00:11:08.450 --> 00:11:09.440
can leave it as it is.

00:11:09.440 --> 00:11:11.190
So I'm going to click next.

00:11:11.190 --> 00:11:12.850
The next part is about
some other

00:11:12.850 --> 00:11:15.600
configuration in the project.

00:11:15.600 --> 00:11:17.260
You don't need to change
anything here if you want to

00:11:17.260 --> 00:11:17.960
follow the quickstart.

00:11:17.960 --> 00:11:19.930
Of course, when you're writing
your application you will have

00:11:19.930 --> 00:11:22.130
to change things here maybe.

00:11:22.130 --> 00:11:23.540
You can set the icon.

00:11:23.540 --> 00:11:25.090
We're going to use
the default one.

00:11:25.090 --> 00:11:25.800
It doesn't matter.

00:11:25.800 --> 00:11:28.230
Then when you have a production
app you can change

00:11:28.230 --> 00:11:30.240
the icon and all the
other things.

00:11:30.240 --> 00:11:33.280
And we're going to create
a blind activity.

00:11:33.280 --> 00:11:36.100
Remember everything in Android
starts from an activity.

00:11:36.100 --> 00:11:38.990
And this activity is going to be
called with a default name

00:11:38.990 --> 00:11:40.110
which is main activity.

00:11:40.110 --> 00:11:41.470
Its fine with me.

00:11:41.470 --> 00:11:43.670
Remember, whenever you want to
write your own production

00:11:43.670 --> 00:11:45.300
application you can change it.

00:11:45.300 --> 00:11:48.130
You probably have to change
these values.

00:11:48.130 --> 00:11:52.260
So I click finish and the
basic skeleton of my

00:11:52.260 --> 00:11:54.410
application is created.

00:11:54.410 --> 00:11:56.220
And this is how the application
would look like,

00:11:56.220 --> 00:11:58.390
but we will see later.

00:11:58.390 --> 00:12:01.400
We're not going to show
this page a lot.

00:12:01.400 --> 00:12:03.370
So what this is the application
going to do?

00:12:03.370 --> 00:12:06.890
This application is going to
fire up the camera, the device

00:12:06.890 --> 00:12:11.020
camera, allow users to take
photos, and whenever a photo

00:12:11.020 --> 00:12:13.830
is taken it will be
automatically uploaded to

00:12:13.830 --> 00:12:14.870
Google Drive.

00:12:14.870 --> 00:12:16.520
And that's very easy.

00:12:16.520 --> 00:12:19.360
So let me show you
how to do it.

00:12:19.360 --> 00:12:25.120
So the next thing we have to do
is to add the drive API to

00:12:25.120 --> 00:12:26.440
the project.

00:12:26.440 --> 00:12:28.890
We have a Java client library
that can be used.

00:12:28.890 --> 00:12:32.610
And the easiest way to add all
the required .jars is to use

00:12:32.610 --> 00:12:34.630
the Google plug-in
for Eclipse.

00:12:34.630 --> 00:12:36.620
So this is one of the
prerequisites for this

00:12:36.620 --> 00:12:37.630
quickstart.

00:12:37.630 --> 00:12:39.690
If you install the Google
plug-in for Eclipse, then you

00:12:39.690 --> 00:12:43.280
have a button in your toolbar.

00:12:43.280 --> 00:12:47.350
And one of the commands
available here

00:12:47.350 --> 00:12:49.690
is add Google APIs.

00:12:49.690 --> 00:12:54.890
So if I click on that I see
the list of all APIs I can

00:12:54.890 --> 00:12:56.830
add, just with a click.

00:12:56.830 --> 00:12:58.960
So I'm going to look
for Drive API v2.

00:12:58.960 --> 00:13:00.730
Remember, we have version
one and version two.

00:13:00.730 --> 00:13:04.780
Version two is the newest with a
lot more features, but v1 is

00:13:04.780 --> 00:13:05.410
also supported.

00:13:05.410 --> 00:13:07.240
But I mean if you're building
any application you

00:13:07.240 --> 00:13:08.660
should use Drive v2.

00:13:08.660 --> 00:13:13.250
So I click on Drive v2, click
finish, and the plug-in is

00:13:13.250 --> 00:13:17.340
going to download the latest
version of the Drive API

00:13:17.340 --> 00:13:20.510
client library together with the
latest version of the Java

00:13:20.510 --> 00:13:23.360
client library in all required
dependencies.

00:13:23.360 --> 00:13:26.040
And add them to the project.

00:13:26.040 --> 00:13:27.590
So it's very easy.

00:13:27.590 --> 00:13:28.625
Not a lot of steps here.

00:13:28.625 --> 00:13:31.180
It just adds everything
you need for the

00:13:31.180 --> 00:13:33.060
application to build.

00:13:33.060 --> 00:13:39.740
The only other .jar you need is
google-play-services.jar We

00:13:39.740 --> 00:13:43.020
recently launched this
google-play-services.jar.

00:13:43.020 --> 00:13:46.300
It is the new way for developers
to perform

00:13:46.300 --> 00:13:50.266
authorization in Android
applications.

00:13:50.266 --> 00:13:53.290
All I'm going to show
you here, uses this

00:13:53.290 --> 00:13:56.420
google-play-services.jar and
what we did in the API's

00:13:56.420 --> 00:13:58.970
console requires the
google-play-services.jar.

00:13:58.970 --> 00:14:01.690
So we need to add the .jar.

00:14:01.690 --> 00:14:07.460
You have to download the .jar
in your local computer under

00:14:07.460 --> 00:14:09.480
the SDK manager and
then you can add

00:14:09.480 --> 00:14:13.240
it to the Java project.

00:14:13.240 --> 00:14:14.490
I already downloaded it.

00:14:20.610 --> 00:14:23.320
Click on Drive quickstart.

00:14:23.320 --> 00:14:29.490
I can do project, properties, go
to the library's tab and do

00:14:29.490 --> 00:14:32.060
add external .jars.

00:14:32.060 --> 00:14:34.960
I should browse for my
google-play-services.jar on my

00:14:34.960 --> 00:14:36.590
local computer and add it.

00:14:39.340 --> 00:14:45.360
Then I have to go to order and
export, to check the box next

00:14:45.360 --> 00:14:49.377
to it and make sure the .jar is
exported when we build the

00:14:49.377 --> 00:14:50.627
application.

00:14:52.560 --> 00:14:56.250
So we added all the .jars, now
we need to add the code, the

00:14:56.250 --> 00:14:58.770
code you're going to use and I'm
going to show it to you.

00:14:58.770 --> 00:15:01.910
I'm going to show the app and
then I'm going to explain what

00:15:01.910 --> 00:15:03.730
the app does step by step.

00:15:03.730 --> 00:15:08.370
The code is all available
in a single file in the

00:15:08.370 --> 00:15:09.620
documentation.

00:15:12.900 --> 00:15:15.570
This is probably one of the
non-best practices we're

00:15:15.570 --> 00:15:18.120
following, which is to put
everything in a single file.

00:15:18.120 --> 00:15:21.260
Obviously, in a production
application you might want to

00:15:21.260 --> 00:15:26.270
split the activities in the
files in separate files.

00:15:26.270 --> 00:15:29.260
But here it is just easier
for you to copy and

00:15:29.260 --> 00:15:30.830
paste all of this code.

00:15:30.830 --> 00:15:31.510
It's not that long.

00:15:31.510 --> 00:15:34.990
It's probably 100
lines of code.

00:15:34.990 --> 00:15:40.240
And take all this code and
replace the one that we have

00:15:40.240 --> 00:15:41.240
in Eclipse.

00:15:41.240 --> 00:15:44.780
So I'm going to go to source,
my namespace, the

00:15:44.780 --> 00:15:46.500
mainactivity.java.

00:15:46.500 --> 00:15:51.260
I'll take all of this, delete
this and put my code.

00:15:51.260 --> 00:15:54.070
If you used
com.example.drivequickstart as

00:15:54.070 --> 00:15:57.840
your namespace in your
package name this is

00:15:57.840 --> 00:15:59.770
going to build correctly.

00:15:59.770 --> 00:16:03.570
Otherwise it would have to adopt
the code to match it.

00:16:03.570 --> 00:16:07.080
The only other thing we have
to do is to add a couple of

00:16:07.080 --> 00:16:09.390
permission to the Android
manifest.

00:16:09.390 --> 00:16:13.440
So in the Android manifest you
specify what permissions your

00:16:13.440 --> 00:16:15.550
application requests.

00:16:15.550 --> 00:16:18.900
And this application requires
two permissions.

00:16:18.900 --> 00:16:23.310
The get account permission,
which is for the application

00:16:23.310 --> 00:16:26.200
to fire up the get account
intent and let the user choose

00:16:26.200 --> 00:16:27.910
an account to use.

00:16:27.910 --> 00:16:31.990
And the other permission
we need is internet.

00:16:31.990 --> 00:16:36.420
Well, for the application to be
able to send HTTP requests.

00:16:36.420 --> 00:16:38.250
So this is also covered
in the documentation.

00:16:38.250 --> 00:16:40.130
We have this other box here.

00:16:40.130 --> 00:16:42.860
So we need to take these two
lines, and there are multiple

00:16:42.860 --> 00:16:45.150
ways to add permissions to your
Android app, but we need

00:16:45.150 --> 00:16:48.690
to take these two lines
and put them in

00:16:48.690 --> 00:16:49.940
androidmanifest.xml.

00:16:52.620 --> 00:16:57.430
You just have to put it anywhere
inside of manifest.

00:16:57.430 --> 00:16:58.250
That's it.

00:16:58.250 --> 00:17:00.020
The application is
ready to run.

00:17:00.020 --> 00:17:03.400
I already have Android virtual
machine running, which is

00:17:03.400 --> 00:17:08.579
here, and it's a phone device,
an emulated phone device.

00:17:08.579 --> 00:17:13.420
And so what I'm going to do is
click on debug to run the

00:17:13.420 --> 00:17:13.685
application.

00:17:13.685 --> 00:17:18.310
The application will be
installed on my device, and

00:17:18.310 --> 00:17:21.859
we'll see what happens
in the device.

00:17:21.859 --> 00:17:25.410
So the application is now
building and then being

00:17:25.410 --> 00:17:27.260
installed on the phone.

00:17:27.260 --> 00:17:31.010
And then it will be
automatically run.

00:17:31.010 --> 00:17:34.770
So what this application does
is, first, it will ask the

00:17:34.770 --> 00:17:37.880
user for an account to use.

00:17:42.970 --> 00:17:45.660
This dialogue is fired
by an intent.

00:17:45.660 --> 00:17:48.930
It's a standard Android intent,
and it lets the user

00:17:48.930 --> 00:17:50.610
pick an account to use.

00:17:50.610 --> 00:17:55.750
We want to publish photos on
someone's Google Drive, so we

00:17:55.750 --> 00:17:58.880
need to select which Google
Drive account we want to use.

00:17:58.880 --> 00:18:01.980
And this will list all the
accounts I have on my phone.

00:18:01.980 --> 00:18:05.360
I only have one but you
can also add accounts.

00:18:05.360 --> 00:18:08.890
It's a good practice to only
show this the first time the

00:18:08.890 --> 00:18:11.630
application runs and then
remember this setting.

00:18:11.630 --> 00:18:14.640
So the next time the same user
starts the application, you

00:18:14.640 --> 00:18:16.140
don't have to ask it again.

00:18:16.140 --> 00:18:18.290
We're not doing this in
the application in

00:18:18.290 --> 00:18:20.340
order to keep it simple.

00:18:20.340 --> 00:18:22.780
So I'm going to select
my account.

00:18:22.780 --> 00:18:26.370
What happens next is that
the application

00:18:26.370 --> 00:18:27.900
will fire up the camera.

00:18:27.900 --> 00:18:30.930
If you've used the emulator
before you know that this is

00:18:30.930 --> 00:18:33.640
how do the emulated
camera looks like.

00:18:33.640 --> 00:18:36.140
We have this moving background
and we have

00:18:36.140 --> 00:18:37.070
a box moving around.

00:18:37.070 --> 00:18:38.360
This is a camera.

00:18:38.360 --> 00:18:41.000
Of course, if you use your
physical device you will lose

00:18:41.000 --> 00:18:42.320
your real camera.

00:18:42.320 --> 00:18:45.710
But this is good enough for
us to see what's going on.

00:18:45.710 --> 00:18:51.410
I'm going to take a photo,
beautiful, and confirm.

00:18:51.410 --> 00:18:57.480
Now the application will try to
upload the file, the photo

00:18:57.480 --> 00:18:59.710
we just took, to Drive.

00:18:59.710 --> 00:19:04.170
The problem is the app was never
approved by the user, so

00:19:04.170 --> 00:19:07.280
the application realizes
that we need

00:19:07.280 --> 00:19:08.540
approval from the user.

00:19:08.540 --> 00:19:11.370
And that's why this
dialogue is shown.

00:19:11.370 --> 00:19:13.630
So this is a standard
dialogue.

00:19:13.630 --> 00:19:14.520
Standard [? Auth2 ?]

00:19:14.520 --> 00:19:15.050
dialogue.

00:19:15.050 --> 00:19:18.410
It says, do you want
DriveQuickstart, which is the

00:19:18.410 --> 00:19:21.270
name of the application I just
created, do you want it to be

00:19:21.270 --> 00:19:23.480
able to view and manage the
files and documents I have on

00:19:23.480 --> 00:19:25.040
Google Drive?

00:19:25.040 --> 00:19:26.480
Yes, I do.

00:19:26.480 --> 00:19:32.720
This confirmation will only be
asked once, so now we will

00:19:32.720 --> 00:19:33.310
remember it.

00:19:33.310 --> 00:19:36.700
And in the future every time you
use the same application

00:19:36.700 --> 00:19:39.000
we will not ask for
[? DSAK. ?]

00:19:39.000 --> 00:19:42.720
What's going on now is that the
photo was just uploaded.

00:19:42.720 --> 00:19:44.560
I know the UI's not great.

00:19:44.560 --> 00:19:50.810
What you should expect is that
maybe instead of a blank page

00:19:50.810 --> 00:19:54.660
you show a progress dialogue,
things like that, but that's

00:19:54.660 --> 00:19:56.290
an improvement we can do
to the application.

00:19:56.290 --> 00:20:00.180
Now we can take photos, confirm,
and it will just send

00:20:00.180 --> 00:20:01.210
them to Drive.

00:20:01.210 --> 00:20:05.250
The only thing that happens it
will show a small toast, which

00:20:05.250 --> 00:20:08.250
is a small message saying that
the photo was uploaded, and

00:20:08.250 --> 00:20:10.400
then get back to the camera.

00:20:10.400 --> 00:20:13.130
See, the photo was uploaded.

00:20:13.130 --> 00:20:17.310
We can leave it running, but
if I go back to my Drive

00:20:17.310 --> 00:20:23.630
account, this is the Drive
account for the same user, I

00:20:23.630 --> 00:20:27.950
should be able to see the
photos I just took.

00:20:27.950 --> 00:20:30.450
Or not.

00:20:30.450 --> 00:20:31.700
They should be here.

00:20:34.380 --> 00:20:35.740
Anyway they probably show up.

00:20:35.740 --> 00:20:40.630
So let me explain this code and
let's see how it works.

00:20:40.630 --> 00:20:41.880
Let's go back to the code.

00:20:46.230 --> 00:20:50.550
This is all you all you need
to run this application.

00:20:50.550 --> 00:20:53.441
As you know everything starts
in the own create method of

00:20:53.441 --> 00:20:54.370
the activity.

00:20:54.370 --> 00:21:00.120
So in own create the first
thing we do is to instant

00:21:00.120 --> 00:21:02.510
shade our credential
using [? Auth2 ?]

00:21:02.510 --> 00:21:06.110
And we're saying that we want to
use the Drive scopes, which

00:21:06.110 --> 00:21:09.550
is the full scope that allows
the application to do

00:21:09.550 --> 00:21:13.050
basically everything on
my Google Drive file.

00:21:13.050 --> 00:21:15.490
After that we start
an activity.

00:21:15.490 --> 00:21:19.070
So we fire intent, which is the
new choose account intent.

00:21:19.070 --> 00:21:20.850
Which is as you remember the
first thing we the application

00:21:20.850 --> 00:21:27.130
did was asking us for which
account we wanted to use.

00:21:27.130 --> 00:21:31.000
So this intent will be uniquely
identified by this

00:21:31.000 --> 00:21:33.510
constant, which is called
request account picker.

00:21:33.510 --> 00:21:38.400
As you know, when we get back
something from an intent, we

00:21:38.400 --> 00:21:42.370
have to handle it in a method
called onActivityResult.

00:21:42.370 --> 00:21:46.970
So in onActivityResult we
check the request code.

00:21:46.970 --> 00:21:50.300
First case what we want
is if we are in

00:21:50.300 --> 00:21:51.260
request account picker.

00:21:51.260 --> 00:21:53.760
So the user itself.

00:21:53.760 --> 00:21:56.910
I just chose an account.

00:21:56.910 --> 00:22:00.970
If we are in this case and the
result is OK, which means the

00:22:00.970 --> 00:22:04.710
user has actually picked an
account and we have data, the

00:22:04.710 --> 00:22:07.520
data we need is the account
name, which is the email

00:22:07.520 --> 00:22:13.330
address of the user that
was chosen by the user.

00:22:13.330 --> 00:22:18.180
With that we can set the account
name in the credential

00:22:18.180 --> 00:22:20.430
and then we can use these
credentials to

00:22:20.430 --> 00:22:21.660
get the Drive service.

00:22:21.660 --> 00:22:24.910
So let me show you get drive
service and see what it is.

00:22:24.910 --> 00:22:27.570
Get drive service is
here at the bottom.

00:22:27.570 --> 00:22:32.610
We use the builder pattern to
build a drive service object,

00:22:32.610 --> 00:22:35.940
which is the one that's
going to be used to

00:22:35.940 --> 00:22:37.170
read and write files.

00:22:37.170 --> 00:22:39.790
And what we have
to do with it?

00:22:39.790 --> 00:22:42.620
We just have to pass some
parameters including

00:22:42.620 --> 00:22:45.900
transport, JSON factory
and our credential.

00:22:45.900 --> 00:22:48.110
And then we build it
and that's it.

00:22:48.110 --> 00:22:52.450
So we have drive service with
our credential, and if we go

00:22:52.450 --> 00:22:54.340
back to the activity,
what we do next is

00:22:54.340 --> 00:22:56.230
starting the camera.

00:22:56.230 --> 00:22:58.180
Let's see what start
camera intent does.

00:22:58.180 --> 00:23:02.070
Start camera intent
does two things.

00:23:02.070 --> 00:23:06.110
First, it generates a file
name for the photo

00:23:06.110 --> 00:23:06.980
we're going to take.

00:23:06.980 --> 00:23:15.990
And the file name is simply
image_timestamp.jpg, so each

00:23:15.990 --> 00:23:18.540
photo is uniquely identified.

00:23:18.540 --> 00:23:22.030
And once we decided what the
file name will be, we fire

00:23:22.030 --> 00:23:27.390
intent, which is a camera intent
to capture an image.

00:23:27.390 --> 00:23:31.710
And that's why after the user
has picked an account we go

00:23:31.710 --> 00:23:32.960
directly to the camera.

00:23:35.020 --> 00:23:38.030
This is still an intent, so the
result of the intent will

00:23:38.030 --> 00:23:40.360
be handled by onActivityResult.

00:23:40.360 --> 00:23:44.460
And onActivityResult has a
case for capture image.

00:23:44.460 --> 00:23:47.700
When we capture an image and the
result is OK, we call save

00:23:47.700 --> 00:23:50.830
file to drive, which is where
the Drive API calls her a

00:23:50.830 --> 00:23:51.870
[? mate. ?]

00:23:51.870 --> 00:23:54.680
So if we go to save file to
drive, there's a very

00:23:54.680 --> 00:23:56.730
important thing here
to notice.

00:23:56.730 --> 00:23:59.350
We are spawning a threat.

00:23:59.350 --> 00:24:00.410
Why do we do it?

00:24:00.410 --> 00:24:04.630
Because remember in Android
you cannot send network

00:24:04.630 --> 00:24:08.360
requests on the main thread,
because if you do, DUI will

00:24:08.360 --> 00:24:10.120
freeze and it will throw
an exception.

00:24:10.120 --> 00:24:13.380
So whenever you want to do
network requests you have to

00:24:13.380 --> 00:24:17.180
use a thread, or an an
[? async ?] task.

00:24:17.180 --> 00:24:19.590
I decided to use a thread,
basically the same.

00:24:19.590 --> 00:24:21.350
An [? async ?] task is basically
a wrapper around the

00:24:21.350 --> 00:24:24.590
thread and some other
helper method.

00:24:24.590 --> 00:24:30.900
But what this thread does is
reading the file that we saved

00:24:30.900 --> 00:24:31.320
from the phone.

00:24:31.320 --> 00:24:33.700
So when the camera takes a
photo, it saves it in a

00:24:33.700 --> 00:24:35.430
specific location
that we define.

00:24:35.430 --> 00:24:38.900
So this intent will read the
file from there and send it to

00:24:38.900 --> 00:24:44.320
drive using this call,
service.files.insert.

00:24:44.320 --> 00:24:47.100
So the service object, which is
the drive service object,

00:24:47.100 --> 00:24:50.680
exposes the number of methods
in a number of resources.

00:24:50.680 --> 00:24:52.000
One of them is files.

00:24:52.000 --> 00:24:54.810
And on files we have different
methods including insert,

00:24:54.810 --> 00:24:57.890
update, list, get, delete,
and so on.

00:24:57.890 --> 00:25:02.420
So we call it, we execute this
insert request, and then we

00:25:02.420 --> 00:25:06.210
get back to file, which
is the metadata we

00:25:06.210 --> 00:25:07.790
got back from Drive.

00:25:07.790 --> 00:25:12.230
When that happens or when
we get the file back--

00:25:12.230 --> 00:25:15.530
we showed a toast, which is
the small message we saw,

00:25:15.530 --> 00:25:18.390
which says photo uploaded in the
file title, and we saw the

00:25:18.390 --> 00:25:19.610
camera again.

00:25:19.610 --> 00:25:22.670
So that the user can go back
and take new photos.

00:25:22.670 --> 00:25:26.140
There is an important
catch clause here.

00:25:26.140 --> 00:25:29.100
So all of this was wrapped
in a try catch clause.

00:25:29.100 --> 00:25:29.800
Why?

00:25:29.800 --> 00:25:36.160
Because whenever we send the
drive service insert request

00:25:36.160 --> 00:25:39.650
it might happen that the
application is not authorized

00:25:39.650 --> 00:25:40.780
by the user.

00:25:40.780 --> 00:25:44.910
Remember, the first time I took
a photo I had to grant

00:25:44.910 --> 00:25:46.080
access to the app.

00:25:46.080 --> 00:25:48.590
How is that handled?

00:25:48.590 --> 00:25:52.450
So when the insert request is
sent, if the application is

00:25:52.450 --> 00:25:57.700
not authorized, it will throw a
user recoverable [? Auth ?]

00:25:57.700 --> 00:26:00.540
I/O exception that you
have to catch.

00:26:00.540 --> 00:26:06.070
When you catch that exception,
you simply have to fire the

00:26:06.070 --> 00:26:10.020
intent that is in the exception
and, we call it,

00:26:10.020 --> 00:26:11.940
request authorization.

00:26:11.940 --> 00:26:13.080
So this is what happened.

00:26:13.080 --> 00:26:14.980
I sent a request.

00:26:14.980 --> 00:26:16.900
The application wasn't
authorized.

00:26:16.900 --> 00:26:22.710
So the first time I did it, I
went into the catch clause.

00:26:22.710 --> 00:26:26.440
I started an activity asking
the user for permission.

00:26:26.440 --> 00:26:29.570
The activity is handled like
all other activities in

00:26:29.570 --> 00:26:31.440
onActivityResult.

00:26:31.440 --> 00:26:37.330
And we have the two
cases as usual.

00:26:37.330 --> 00:26:40.690
Good case the user said yes and
then we saved the file.

00:26:40.690 --> 00:26:43.920
So we called save file to drive
again and that's it.

00:26:43.920 --> 00:26:45.220
And this time it's
going to work.

00:26:45.220 --> 00:26:49.840
If the user said, no,
then we go back to

00:26:49.840 --> 00:26:52.340
choosing the account.

00:26:52.340 --> 00:26:56.020
So maybe the user decided to use
a different account, and

00:26:56.020 --> 00:26:58.360
doesn't want the app to be
authorized for that account.

00:26:58.360 --> 00:27:01.540
So if that fails, you have to
send back the user to the

00:27:01.540 --> 00:27:03.070
initial page and say,
OK, which account

00:27:03.070 --> 00:27:03.940
do you want to use?

00:27:03.940 --> 00:27:05.170
And this is what we're doing.

00:27:05.170 --> 00:27:06.920
In our case I said, yes.

00:27:06.920 --> 00:27:09.810
And I called save file
to drive again.

00:27:09.810 --> 00:27:13.280
It did the same thing, the
request went through, and the

00:27:13.280 --> 00:27:14.220
file was created.

00:27:14.220 --> 00:27:16.590
The second time and all the
other times I use the

00:27:16.590 --> 00:27:21.560
application, it will just
go there instead of

00:27:21.560 --> 00:27:23.310
throwing the exception.

00:27:23.310 --> 00:27:25.070
And that's basically it.

00:27:25.070 --> 00:27:29.360
The only other method I have
here is show toast, which is

00:27:29.360 --> 00:27:32.330
just a helper method to
show that message.

00:27:32.330 --> 00:27:34.210
But you can use any kind of
notification you want.

00:27:34.210 --> 00:27:37.140
You can even write to
logs and so on.

00:27:37.140 --> 00:27:39.260
And that's basically it.

00:27:39.260 --> 00:27:41.890
It took probably more than 10
minutes, but if you do not

00:27:41.890 --> 00:27:43.810
have to talk through it,
and you just follow the

00:27:43.810 --> 00:27:47.020
instructions, it's probably
very, very fast.

00:27:47.020 --> 00:27:51.760
And as I said at the beginning
this tutorial is also

00:27:51.760 --> 00:27:55.960
available on
developers.google.com/drive.

00:27:55.960 --> 00:27:59.830
You will see a link
on the home page.

00:27:59.830 --> 00:28:02.470
We think this is going to help
a lot of Android developers

00:28:02.470 --> 00:28:04.290
that want to integrate
with Drive.

00:28:04.290 --> 00:28:07.900
We had some reports that things
were not as smooth as

00:28:07.900 --> 00:28:09.050
we thought.

00:28:09.050 --> 00:28:11.190
We think they're now
much better.

00:28:11.190 --> 00:28:14.670
But if you have any questions,
we'll be really glad to answer

00:28:14.670 --> 00:28:15.350
your questions.

00:28:15.350 --> 00:28:20.120
Please feel free to get in touch
with us on SecOverflow

00:28:20.120 --> 00:28:22.310
on Google+.

00:28:22.310 --> 00:28:26.590
And if you have Android
applications that use Drive,

00:28:26.590 --> 00:28:27.920
please let us know.

00:28:27.920 --> 00:28:31.930
We are really curious about
your integration.

00:28:31.930 --> 00:28:34.165
And I think that's it.

00:28:34.165 --> 00:28:36.140
I want to thank you
all for your time.

00:28:36.140 --> 00:28:39.110
And see you next time on
Google Developers Live.

00:28:39.110 --> 00:28:40.360
Bye bye.

00:28:46.690 --> 00:29:07.800
[MUSIC PLAYS]

