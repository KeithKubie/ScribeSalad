WEBVTT
Kind: captions
Language: en

00:00:08.622 --> 00:00:09.365
Hey everybody.

00:00:09.365 --> 00:00:11.740
This is Jeff Posnick from the
YouTube Developer Relations

00:00:11.740 --> 00:00:12.240
team.

00:00:12.240 --> 00:00:15.010
And we're continuing
a series of videos

00:00:15.010 --> 00:00:18.450
about the migration
between the older legacy

00:00:18.450 --> 00:00:21.752
version of the
YouTube data API v2

00:00:21.752 --> 00:00:25.250
onto the newer version
of the data API v3.

00:00:25.250 --> 00:00:28.446
We strongly encourage folks to
begin that migration process,

00:00:28.446 --> 00:00:29.570
if you haven't done so yet.

00:00:29.570 --> 00:00:33.350
And we wanted to highlight
certain types of functionality

00:00:33.350 --> 00:00:35.920
and talk about the v2
way of doing things,

00:00:35.920 --> 00:00:39.600
and how you would go and do
the same sort of thing in v3.

00:00:39.600 --> 00:00:43.040
We're going to start by talking
about how you would actually

00:00:43.040 --> 00:00:47.570
get a list of videos that are
in a given channel using v3,

00:00:47.570 --> 00:00:49.090
the data API.

00:00:49.090 --> 00:00:51.440
Folks familiar with
v2 the data API

00:00:51.440 --> 00:00:55.090
know that you do this pretty
much with a single RESTful API

00:00:55.090 --> 00:00:56.340
call.

00:00:56.340 --> 00:00:59.840
You look for the user upload's
feed for a given channel,

00:00:59.840 --> 00:01:04.120
and you get back a list of
videos by default in an XML

00:01:04.120 --> 00:01:07.150
format, although you could
also ask for it JSON format

00:01:07.150 --> 00:01:09.340
if you want.

00:01:09.340 --> 00:01:13.400
In v3, it involves a slightly
different set of operations.

00:01:13.400 --> 00:01:18.100
And it's just keeping with
the overall philosophy with v3

00:01:18.100 --> 00:01:21.670
in that you return a very
specific set of information

00:01:21.670 --> 00:01:24.420
for a specific API
call, rather than

00:01:24.420 --> 00:01:26.320
returning a lot of information.

00:01:26.320 --> 00:01:28.730
So it's a little bit
more of a focused API.

00:01:28.730 --> 00:01:33.930
And the other main difference
is that in v3, we work primarily

00:01:33.930 --> 00:01:38.060
with channel IDs rather
than legacy usernames.

00:01:38.060 --> 00:01:41.500
So if you're familiar with the
more v2 way of doing things,

00:01:41.500 --> 00:01:44.500
where every channel
had a legacy username,

00:01:44.500 --> 00:01:48.020
you need to start thinking
about channel IDs instead.

00:01:48.020 --> 00:01:50.260
And this is particularly
important because moving

00:01:50.260 --> 00:01:53.390
forward, not every channel
does have a legacy username.

00:01:53.390 --> 00:01:57.600
So if you did want to uniquely
identify any given channel,

00:01:57.600 --> 00:01:59.564
there are going to be
those channels that

00:01:59.564 --> 00:02:01.230
don't have the legacy
usernames, and you

00:02:01.230 --> 00:02:04.224
do need to get comfortable
working with channel IDs.

00:02:04.224 --> 00:02:05.890
So let's actually
walk through the steps

00:02:05.890 --> 00:02:07.840
of doing the
operation of getting

00:02:07.840 --> 00:02:12.330
the uploads in a channel
using version 3 of the API.

00:02:12.330 --> 00:02:14.550
And we're going to
switch now to a screen

00:02:14.550 --> 00:02:15.830
share of that I have up.

00:02:15.830 --> 00:02:19.280
And what I have open here
is the Google APIs Explorer.

00:02:19.280 --> 00:02:22.000
This is a great resource
for playing around

00:02:22.000 --> 00:02:26.920
with version 3 of the data API
or using our analytics API,

00:02:26.920 --> 00:02:29.900
or any other of the
modern Google APIs.

00:02:29.900 --> 00:02:33.330
And it gives you a way
of making API calls

00:02:33.330 --> 00:02:36.980
within the context of
this nice browser web form

00:02:36.980 --> 00:02:38.680
in trying out
different parameters.

00:02:38.680 --> 00:02:41.230
So when you are
actually writing code

00:02:41.230 --> 00:02:43.842
for using this sort of thing
in your own applications,

00:02:43.842 --> 00:02:46.300
you're probably going to want
to use your client libraries.

00:02:46.300 --> 00:02:48.820
But this is a
neutral, agnostic way

00:02:48.820 --> 00:02:51.580
of showing off the API calls.

00:02:51.580 --> 00:02:54.270
So that being said, there
are two different steps

00:02:54.270 --> 00:02:57.990
for getting the uploads
in a given channel,

00:02:57.990 --> 00:03:00.050
assuming that you
know-- and we're

00:03:00.050 --> 00:03:02.560
going to assume right now that
we know that channel's legacy

00:03:02.560 --> 00:03:03.910
username.

00:03:03.910 --> 00:03:11.510
The first step is to get
back the playlist ID that

00:03:11.510 --> 00:03:14.810
corresponds to the
uploads for that channel.

00:03:14.810 --> 00:03:20.000
And the way we do that is by
making a YouTube.channels.list

00:03:20.000 --> 00:03:21.050
call.

00:03:21.050 --> 00:03:23.900
And we have that open
here in the API Explorer.

00:03:23.900 --> 00:03:27.320
And when making
version 3 API calls,

00:03:27.320 --> 00:03:32.250
pretty much the convention that
all the list operations follow

00:03:32.250 --> 00:03:35.300
is that you have one
parameter called Parts.

00:03:35.300 --> 00:03:39.270
And you set this to a
value that is a little bit

00:03:39.270 --> 00:03:42.190
dependent upon the given method.

00:03:42.190 --> 00:03:44.100
And in this particular
case, the YouTube

00:03:44.100 --> 00:03:48.160
channels that list takes
these values over here

00:03:48.160 --> 00:03:49.470
in the documentation.

00:03:49.470 --> 00:03:52.220
We can describe exactly
what all of them do.

00:03:52.220 --> 00:03:55.660
And what we want is the
content details part.

00:03:55.660 --> 00:03:58.720
So instead of returning every
single piece of information

00:03:58.720 --> 00:04:01.670
that we know about the
channel in every API response,

00:04:01.670 --> 00:04:03.270
which could get
very bloated, you

00:04:03.270 --> 00:04:05.365
have to explicitly state
what kind of information

00:04:05.365 --> 00:04:06.240
you want to get back.

00:04:06.240 --> 00:04:11.290
And you get a nice really
compact API response back.

00:04:11.290 --> 00:04:13.790
So we're going to say we want
the content details part back,

00:04:13.790 --> 00:04:16.899
and this is how we get
the uploads playlist ID.

00:04:16.899 --> 00:04:21.450
And there's this parameter
called forUsername.

00:04:21.450 --> 00:04:25.460
As the documentation states,
it lets you pass in a legacy

00:04:25.460 --> 00:04:27.920
YouTube username, assuming
that the channel that you're

00:04:27.920 --> 00:04:29.630
interested in has one.

00:04:29.630 --> 00:04:32.760
And it will return information
corresponding to that channel.

00:04:32.760 --> 00:04:36.090
So this is like a shortcut
of getting information

00:04:36.090 --> 00:04:39.450
about a channel or looking up
a channel's ID, if all you know

00:04:39.450 --> 00:04:41.680
is the legacy username.

00:04:41.680 --> 00:04:43.600
So in this particular
case, we're

00:04:43.600 --> 00:04:45.830
going to look up the
Google Developers channel.

00:04:45.830 --> 00:04:48.080
That's a legacy username.

00:04:48.080 --> 00:04:49.680
And we're going to
scroll down a bit.

00:04:49.680 --> 00:04:52.210
We don't need any of these
other fields right now.

00:04:52.210 --> 00:04:55.860
And click Execute, and it's
making the API call for us.

00:04:55.860 --> 00:04:57.440
You'll see these
are the parameters.

00:04:57.440 --> 00:05:01.110
This is the actual RESTful
URL that's being requested.

00:05:01.110 --> 00:05:03.940
And you get back
this JSON response.

00:05:03.940 --> 00:05:08.310
And you'll see over
here, because we're only

00:05:08.310 --> 00:05:11.390
asking for information
about one specific channel,

00:05:11.390 --> 00:05:15.640
the item's return array only has
one element, not surprisingly.

00:05:15.640 --> 00:05:17.390
You do you get this
channel ID right here.

00:05:17.390 --> 00:05:21.335
If we did want to use
that information later on,

00:05:21.335 --> 00:05:22.210
that might be useful.

00:05:22.210 --> 00:05:25.020
But in the particular context
of what we're doing here,

00:05:25.020 --> 00:05:27.862
we want the uploads playlist ID.

00:05:27.862 --> 00:05:29.740
So I'm going to just copy that.

00:05:29.740 --> 00:05:32.520
If you were writing real
code, you would obviously

00:05:32.520 --> 00:05:36.140
save it to a local variable
and use it in a follow-up call.

00:05:36.140 --> 00:05:41.080
And I'm going to now
make another API call--

00:05:41.080 --> 00:05:44.200
and just open up a
new tab for that.

00:05:44.200 --> 00:05:51.880
And this is going to be a
YouTube playlist items list.

00:05:51.880 --> 00:05:55.280
And again, the thing
to keep in mind

00:05:55.280 --> 00:05:58.600
is that in version 3
of the API, many things

00:05:58.600 --> 00:06:00.990
are considered playlists.

00:06:00.990 --> 00:06:03.970
Instead of, in version 2,
where you would go and get

00:06:03.970 --> 00:06:07.410
specifically the uploads
feed corresponding to a given

00:06:07.410 --> 00:06:09.930
channel, in version
3, you first look up

00:06:09.930 --> 00:06:13.110
the playlist that corresponds
to the uploads for the channel.

00:06:13.110 --> 00:06:15.600
And then you do the standard
YouTube playlist items

00:06:15.600 --> 00:06:16.420
list call.

00:06:16.420 --> 00:06:18.060
And this is the same
API call that you

00:06:18.060 --> 00:06:20.150
would use if you were
getting information

00:06:20.150 --> 00:06:23.980
about a user-generated playlist.

00:06:23.980 --> 00:06:25.739
It's really quite equivalent.

00:06:25.739 --> 00:06:27.780
So you'll see that a lot
in version 3 of the API,

00:06:27.780 --> 00:06:33.990
where we reuse methods
or overload the function

00:06:33.990 --> 00:06:36.610
of methods so that
they could be used

00:06:36.610 --> 00:06:39.530
for a variety of
different operations.

00:06:39.530 --> 00:06:42.840
So in this particular case, we
have this part parameter again.

00:06:42.840 --> 00:06:46.670
I'm going to pass in
the value snippet here.

00:06:46.670 --> 00:06:50.450
And snippet is a
part that contains

00:06:50.450 --> 00:06:55.300
the most relevant information
about any given response

00:06:55.300 --> 00:06:57.810
item, things that would
be useful if you were to,

00:06:57.810 --> 00:07:00.600
for instance, want to
display information

00:07:00.600 --> 00:07:02.340
about the response
like in a web browser.

00:07:02.340 --> 00:07:04.810
So it'll contain the
title for each item,

00:07:04.810 --> 00:07:07.860
it'll contain a thumbnail,
it'll contain a description.

00:07:07.860 --> 00:07:09.350
And that's the
type of information

00:07:09.350 --> 00:07:13.840
that we want about all the
uploads in a given channel.

00:07:13.840 --> 00:07:19.950
So I am going to take
that copied playlist ID,

00:07:19.950 --> 00:07:23.482
and I'm going to paste it
into the playlist ID field.

00:07:23.482 --> 00:07:25.190
This is something to
really keep in mind.

00:07:25.190 --> 00:07:27.730
You want this in the
playlist ID parameter.

00:07:27.730 --> 00:07:30.210
There's a separate
parameter called ID.

00:07:30.210 --> 00:07:32.910
And that takes in
something that's

00:07:32.910 --> 00:07:35.460
different than the playlist ID.

00:07:35.460 --> 00:07:39.260
So please-- this is a
common source of confusion--

00:07:39.260 --> 00:07:41.520
make sure that you're
setting the playlist ID

00:07:41.520 --> 00:07:44.170
parameter in this
particular case.

00:07:44.170 --> 00:07:47.518
And I'm also going to
set max results to 50.

00:07:47.518 --> 00:07:48.980
One of the things
you'll notice is

00:07:48.980 --> 00:07:51.680
that Mac's results
is, by default, set

00:07:51.680 --> 00:07:54.900
to five in version 3 of
the API, which is fine

00:07:54.900 --> 00:07:57.580
if you are going to be
displaying the results on a web

00:07:57.580 --> 00:07:59.750
page, and you don't
want a really, really,

00:07:59.750 --> 00:08:01.980
long list of videos.

00:08:01.980 --> 00:08:03.650
But in this particular
case, I want

00:08:03.650 --> 00:08:07.570
to get information about as
many as I could in a single API

00:08:07.570 --> 00:08:08.280
call.

00:08:08.280 --> 00:08:11.776
And the most you
could get back is 50.

00:08:11.776 --> 00:08:14.770
I'm going to click
Execute at this point.

00:08:14.770 --> 00:08:19.010
And you scroll down, and
you'll see this items array

00:08:19.010 --> 00:08:22.160
similar to what we saw
for the previous one.

00:08:22.160 --> 00:08:25.790
But in this case, the items
array has multiple items in it,

00:08:25.790 --> 00:08:27.730
because there are,
not surprisingly,

00:08:27.730 --> 00:08:32.630
quite a few uploads in the
Google Developers channel.

00:08:32.630 --> 00:08:35.750
You'll have information about
when that upload was published,

00:08:35.750 --> 00:08:38.299
and titles,
descriptions, thumbnails,

00:08:38.299 --> 00:08:40.030
things I mentioned before.

00:08:40.030 --> 00:08:42.250
One other thing that
I wanted to point out

00:08:42.250 --> 00:08:45.305
is the way paging works
in version 3 of the API,

00:08:45.305 --> 00:08:47.680
because this is something
that's different than version 2

00:08:47.680 --> 00:08:48.610
as well.

00:08:48.610 --> 00:08:51.210
So previously in
version 2, you could

00:08:51.210 --> 00:08:54.720
pass in whatever you
wanted as the start index.

00:08:54.720 --> 00:08:57.970
And that would allow you
to jump to different places

00:08:57.970 --> 00:09:00.390
within something like
an upload's feed.

00:09:00.390 --> 00:09:02.050
In version 3 of
the API, we don't

00:09:02.050 --> 00:09:03.910
take in a start index parameter.

00:09:03.910 --> 00:09:06.170
We take in what's known
as a paging token.

00:09:06.170 --> 00:09:09.970
And that gets returned
in the API response.

00:09:09.970 --> 00:09:13.026
And it's used when you
build up your next request,

00:09:13.026 --> 00:09:14.400
as a way of saying,
hey, you know

00:09:14.400 --> 00:09:15.940
I've gotten this
page of results.

00:09:15.940 --> 00:09:18.070
Give me the next
page of results.

00:09:18.070 --> 00:09:20.780
This allows for certain
efficiencies on the server,

00:09:20.780 --> 00:09:25.320
and it means that you get a more
reliable paging experience when

00:09:25.320 --> 00:09:27.707
you're using version 3.

00:09:27.707 --> 00:09:30.040
It just allows things to be
a little bit more efficient,

00:09:30.040 --> 00:09:33.810
and it means that less likely
to be duplicates or things that

00:09:33.810 --> 00:09:35.600
are unordered.

00:09:35.600 --> 00:09:39.300
So let's actually take in
that next page token value

00:09:39.300 --> 00:09:42.200
from this response.

00:09:42.200 --> 00:09:46.240
And we're going to construct
the next page of requests

00:09:46.240 --> 00:09:47.987
by pasting it in here.

00:09:47.987 --> 00:09:49.945
So we're going to have
all the same parameters,

00:09:49.945 --> 00:09:52.500
but we're sending
page token now.

00:09:52.500 --> 00:09:58.760
And if I click Execute,
things should return back.

00:09:58.760 --> 00:10:01.470
But in this particular case, I
get a different set of results.

00:10:01.470 --> 00:10:05.630
This is basically
results 51 through 100.

00:10:05.630 --> 00:10:07.510
And we can continue doing that.

00:10:07.510 --> 00:10:10.410
Basically as long as there's
a next page token returned,

00:10:10.410 --> 00:10:13.741
that means that there is
another page of results

00:10:13.741 --> 00:10:14.740
that you could get back.

00:10:14.740 --> 00:10:17.460
And you could
loop, more or less,

00:10:17.460 --> 00:10:20.830
until you stop getting
back next page tokens.

00:10:20.830 --> 00:10:23.430
As soon as that
stops being returned,

00:10:23.430 --> 00:10:26.710
you know that you've
reached the end of the list.

00:10:26.710 --> 00:10:29.470
So hopefully that's
a good overview

00:10:29.470 --> 00:10:31.820
for how you would do
something in version 2,

00:10:31.820 --> 00:10:35.630
and then how you would
do the v3 equivalent.

00:10:35.630 --> 00:10:38.150
Stay tuned for future shows.

00:10:38.150 --> 00:10:42.390
They cover more topics
in version 3 of the API.

00:10:42.390 --> 00:10:45.555
And thanks so much
for joining us.

00:10:45.555 --> 00:10:48.730
Again, I'm Jeff Posnick from
the Developer Relations team.

00:10:48.730 --> 00:10:50.010
And stay tuned.

00:10:50.010 --> 00:10:51.560
Cheers.

