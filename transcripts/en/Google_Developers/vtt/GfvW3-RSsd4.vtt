WEBVTT
Kind: captions
Language: en

00:00:01.040 --> 00:00:07.350
[SPEAKING GERMAN]

00:00:07.350 --> 00:00:10.530
MALE SPEAKER: Hi, we're
back here at Devoxx 2013.

00:00:10.530 --> 00:00:15.520
I'm here with Ludo Champenois
from the cloud team at Google.

00:00:15.520 --> 00:00:16.960
Welcome.

00:00:16.960 --> 00:00:20.220
So Ludo, you have two
sessions here at Devoxx.

00:00:20.220 --> 00:00:23.390
One is on building REST APIs.

00:00:23.390 --> 00:00:24.640
We'll get to that in a moment.

00:00:24.640 --> 00:00:26.750
And the other one is about
what's new in App Engine.

00:00:26.750 --> 00:00:28.550
And there's quite a few
things that are new, actually,

00:00:28.550 --> 00:00:28.890
this year.

00:00:28.890 --> 00:00:30.306
So we'll get to
that part as well.

00:00:30.306 --> 00:00:32.600
But first, APIs.

00:00:32.600 --> 00:00:34.880
Obviously, Google knows a
thing or two about APIs.

00:00:34.880 --> 00:00:36.890
We publish a lot of them.

00:00:36.890 --> 00:00:40.610
Some are very obvious to people,
like maybe the Maps API--

00:00:40.610 --> 00:00:43.100
everybody's built at least
one app with the Maps API.

00:00:43.100 --> 00:00:45.210
But we have a
whole slew of them.

00:00:45.210 --> 00:00:48.460
And we all base this on
one common framework, which

00:00:48.460 --> 00:00:50.470
we actually make
available to developers.

00:00:50.470 --> 00:00:52.242
So do you want to
tell us more about how

00:00:52.242 --> 00:00:53.450
we would go about using that?

00:00:53.450 --> 00:00:55.640
LUDO CHAMPENOIS: So we have
been adding APIs to our products

00:00:55.640 --> 00:00:56.139
forever.

00:00:58.840 --> 00:01:01.140
It's a typical
problem at Google.

00:01:01.140 --> 00:01:04.802
Google's scale, I mean,
designing one API, it's easy.

00:01:04.802 --> 00:01:05.720
Two, it's easy.

00:01:05.720 --> 00:01:09.810
But once you have 1,000 of
them, you want to version them,

00:01:09.810 --> 00:01:10.780
it's complicated.

00:01:10.780 --> 00:01:11.140
MALE SPEAKER: Security.

00:01:11.140 --> 00:01:13.348
LUDO CHAMPENOIS: You want
to add security, et cetera.

00:01:13.348 --> 00:01:15.580
So maybe I've been
using those APIs.

00:01:15.580 --> 00:01:18.340
I mean, access to Maps,
access to your Calendar,

00:01:18.340 --> 00:01:22.350
access to Gmail, G+, Google+,
et cetera, et cetera.

00:01:22.350 --> 00:01:24.530
So we're pretty
good at delivering

00:01:24.530 --> 00:01:27.200
those APIs on whatever
client you have,

00:01:27.200 --> 00:01:31.870
whether it's PHP, Python,
Java, JavaScript, Objective

00:01:31.870 --> 00:01:36.810
C, you can have access to
those APIs and make use of them

00:01:36.810 --> 00:01:38.520
in your client application.

00:01:38.520 --> 00:01:41.560
So what we have done
with cloud endpoints

00:01:41.560 --> 00:01:47.150
is allow you, as a developer,
to expose your business logic

00:01:47.150 --> 00:01:52.440
using the same technology
and the same techniques

00:01:52.440 --> 00:01:55.650
to generate clients
for your business logic

00:01:55.650 --> 00:01:58.540
and access via
RESTful web services.

00:01:58.540 --> 00:02:01.030
MALE SPEAKER: So a few
things that come to mind.

00:02:01.030 --> 00:02:03.570
The first one is how do
you describe the API?

00:02:03.570 --> 00:02:05.565
Is there a way to
discover, maybe, the API?

00:02:05.565 --> 00:02:06.440
LUDO CHAMPENOIS: Yes.

00:02:06.440 --> 00:02:11.560
So in Java, it's
based on the notation.

00:02:11.560 --> 00:02:13.420
So it's not really
JAX-RS because, I mean,

00:02:13.420 --> 00:02:16.000
JAX-RS was only limited
to the Java platform.

00:02:16.000 --> 00:02:18.260
But the Cloud
Endpoints technology

00:02:18.260 --> 00:02:21.680
can be also implemented in
Python, on [INAUDIBLE] PHP,

00:02:21.680 --> 00:02:23.340
or [INAUDIBLE].

00:02:23.340 --> 00:02:28.070
So for Java, you have to do to
use very simple annotations.

00:02:28.070 --> 00:02:32.630
And from that, we generate what
we call a discovery document

00:02:32.630 --> 00:02:38.150
that describes the method
of what your service is.

00:02:38.150 --> 00:02:39.860
And this discovery
document can be

00:02:39.860 --> 00:02:43.750
used on the frontend from
the client JavaScript, client

00:02:43.750 --> 00:02:48.360
to introspect what's going on,
or to generalize those client

00:02:48.360 --> 00:02:49.197
libraries.

00:02:49.197 --> 00:02:50.030
MALE SPEAKER: Right.

00:02:50.030 --> 00:02:52.720
So this is something that
people may be familiar with,

00:02:52.720 --> 00:02:56.020
a discovery tool, if they've
been using Google APIs.

00:02:56.020 --> 00:02:58.010
So we're using the
same environment.

00:02:58.010 --> 00:02:59.760
LUDO CHAMPENOIS: So
we are using the same.

00:02:59.760 --> 00:03:04.880
So if you go, those APIs are
documented automatically.

00:03:04.880 --> 00:03:09.020
And you have an API Explorer
tool for Google APIs

00:03:09.020 --> 00:03:12.610
as well as for your own
API that you want to push.

00:03:12.610 --> 00:03:15.240
MALE SPEAKER: So the
other part is security.

00:03:15.240 --> 00:03:17.370
So how do you deal with that?

00:03:17.370 --> 00:03:17.680
LUDO CHAMPENOIS:
I mean, security

00:03:17.680 --> 00:03:18.910
is also a big deal at Google.

00:03:18.910 --> 00:03:21.370
MALE SPEAKER: I think it is.

00:03:21.370 --> 00:03:23.810
LUDO CHAMPENOIS: It's
complicated to fill up a client

00:03:23.810 --> 00:03:28.836
library to use security
using OAuth, but we do it.

00:03:28.836 --> 00:03:32.480
And if you know how to do
it for anybody accessing

00:03:32.480 --> 00:03:36.340
your calendar, your
Google APIs for Calendar,

00:03:36.340 --> 00:03:38.740
you are using the
same mechanism that we

00:03:38.740 --> 00:03:41.390
provide for your
application as well.

00:03:41.390 --> 00:03:44.520
So obviously, your business
logic can be fully secure.

00:03:44.520 --> 00:03:48.800
You can restrict for
client ids, for example.

00:03:48.800 --> 00:03:50.700
So maybe not
everybody in the world

00:03:50.700 --> 00:03:53.520
can access your API because
you want to restrict, maybe,

00:03:53.520 --> 00:03:56.207
only for your
Android application.

00:03:56.207 --> 00:03:57.040
MALE SPEAKER: Right.

00:03:57.040 --> 00:03:59.640
LUDO CHAMPENOIS: So we
have all those layers--

00:03:59.640 --> 00:04:03.543
it's really an environment
where your API is fully managed.

00:04:03.543 --> 00:04:05.043
MALE SPEAKER: And
scales, of course.

00:04:05.043 --> 00:04:07.757
LUDO CHAMPENOIS: And scales
because it runs on Google.

00:04:07.757 --> 00:04:09.340
MALE SPEAKER: Maybe
an interesting use

00:04:09.340 --> 00:04:12.420
of that API and the
Endpoints technology

00:04:12.420 --> 00:04:14.750
is something called a Mobile
Backend Starter, which

00:04:14.750 --> 00:04:16.480
is something that's
built on top of that

00:04:16.480 --> 00:04:18.855
and provides a full
backend solution

00:04:18.855 --> 00:04:19.855
for mobile applications?

00:04:19.855 --> 00:04:22.230
LUDO CHAMPENOIS: So it might
be a bit confusing, but yes.

00:04:22.230 --> 00:04:24.770
I mean, the mobile
starter is an example

00:04:24.770 --> 00:04:30.848
of how you can do a backend
and expose it to clients.

00:04:30.848 --> 00:04:35.630
The value of it is
it's a generic backend

00:04:35.630 --> 00:04:39.150
that you can plug to
your phone application.

00:04:39.150 --> 00:04:41.540
And your phone
application can store data

00:04:41.540 --> 00:04:45.610
in the cloud using
the data store, which

00:04:45.610 --> 00:04:49.220
is the Non-SQL data
store for Google.

00:04:49.220 --> 00:04:56.310
So this cloud-- it
gives you a framework

00:04:56.310 --> 00:04:59.690
that you can use in
your Android application

00:04:59.690 --> 00:05:03.450
to access, generically,
resources in the cloud.

00:05:03.450 --> 00:05:05.870
MALE SPEAKER: So it actually
works with iOS as well.

00:05:05.870 --> 00:05:07.300
It provides notifications.

00:05:07.300 --> 00:05:09.580
It's actually much
more than just a demo.

00:05:09.580 --> 00:05:13.405
But it certainly exposes
the API as an Endpoint API,

00:05:13.405 --> 00:05:15.722
and as a RESTful set of
resources to manipulate.

00:05:15.722 --> 00:05:17.180
LUDO CHAMPENOIS:
So you can view it

00:05:17.180 --> 00:05:20.900
both as a sample, an example,
of how you could write your APIs

00:05:20.900 --> 00:05:22.900
or use it as is.

00:05:22.900 --> 00:05:23.850
MALE SPEAKER: Great.

00:05:23.850 --> 00:05:26.780
So lots of good stuff
here in Endpoints.

00:05:26.780 --> 00:05:28.470
Let's talk step
back a minute here

00:05:28.470 --> 00:05:31.400
and talk about another offering
in the Cloud Platform, which

00:05:31.400 --> 00:05:35.870
is the Compute Engine side of
things, which is where we're

00:05:35.870 --> 00:05:38.430
back to, as opposed to
the platform fully managed

00:05:38.430 --> 00:05:39.530
environment platform.

00:05:39.530 --> 00:05:41.790
So here we're back
to infrastructure,

00:05:41.790 --> 00:05:43.200
dealing with VMs.

00:05:43.200 --> 00:05:44.410
So you've written on a VM.

00:05:44.410 --> 00:05:46.330
And then you spawn those VMs.

00:05:46.330 --> 00:05:47.330
There's an API for that.

00:05:47.330 --> 00:05:49.825
Tell us a little bit more
about what Compute Engine is.

00:05:49.825 --> 00:05:51.241
LUDO CHAMPENOIS:
So Compute Engine

00:05:51.241 --> 00:05:53.390
is basically the [INAUDIBLE]
frame from Google.

00:05:53.390 --> 00:05:59.110
So we allow you to boot
VMs in our data centers,

00:05:59.110 --> 00:06:03.330
whether it's the one VM or
10,000 VMs, very simple.

00:06:03.330 --> 00:06:06.880
You select which
zone, and which zone,

00:06:06.880 --> 00:06:09.150
and geography you want to--

00:06:09.150 --> 00:06:12.300
MALE SPEAKER: What, the image,
the machines type, and off you

00:06:12.300 --> 00:06:12.800
go.

00:06:12.800 --> 00:06:15.450
LUDO CHAMPENOIS: Yeah, so
we have a bunch of images.

00:06:15.450 --> 00:06:18.720
And you can even add
your own and store it

00:06:18.720 --> 00:06:20.680
in cloud storage
and boot from it.

00:06:20.680 --> 00:06:25.320
So APIs, again, REST-based APIs.

00:06:25.320 --> 00:06:29.470
So we provide a web UI to create
those VMs, or a REST access,

00:06:29.470 --> 00:06:32.670
or a command line
to create those VMs.

00:06:32.670 --> 00:06:35.670
MALE SPEAKER: Right, and then
so you pay by the minute.

00:06:35.670 --> 00:06:36.650
And you have an API.

00:06:36.650 --> 00:06:39.427
So you can spawn a
huge number of VMs,

00:06:39.427 --> 00:06:41.510
and shut them down, and
only pay for what you use.

00:06:41.510 --> 00:06:41.670
LUDO CHAMPENOIS: Exactly.

00:06:41.670 --> 00:06:43.730
And the pay per
minute is very nice

00:06:43.730 --> 00:06:49.700
because instead of paying-- if
your compute processing takes,

00:06:49.700 --> 00:06:51.570
let's say, 15
minutes, you would pay

00:06:51.570 --> 00:06:54.890
15 minutes for Google,
and not an hour.

00:06:54.890 --> 00:06:56.600
So if you pay only
15 minutes, it

00:06:56.600 --> 00:07:00.810
means that you could even shard
your business processing using

00:07:00.810 --> 00:07:06.580
four VMs and be done in
less than 15 minutes,

00:07:06.580 --> 00:07:08.897
and pay only what you have used.

00:07:08.897 --> 00:07:11.480
MALE SPEAKER: Yeah, and so, of
course, this is infrastructure.

00:07:11.480 --> 00:07:14.230
So you are at a fairly low
level where you basically

00:07:14.230 --> 00:07:17.375
SSH into the instance, and
then it's like good luck.

00:07:17.375 --> 00:07:18.440
You are on your own.

00:07:18.440 --> 00:07:19.400
You have to install.

00:07:19.400 --> 00:07:20.733
LUDO CHAMPENOIS: Get Apache too.

00:07:20.733 --> 00:07:23.040
MALE SPEAKER: You have the
power of all this network

00:07:23.040 --> 00:07:24.450
as well, not just VMs.

00:07:24.450 --> 00:07:26.420
I think there's great
value in the network.

00:07:26.420 --> 00:07:28.064
Of course, load balancing--

00:07:28.064 --> 00:07:29.230
LUDO CHAMPENOIS: We have VM.

00:07:29.230 --> 00:07:32.730
We have persistent disk, so you
can store permanently your data

00:07:32.730 --> 00:07:34.240
on disk.

00:07:34.240 --> 00:07:37.410
We have [INAUDIBLE]
networking capability

00:07:37.410 --> 00:07:41.580
so that those VMs can
communicate securely, sometimes

00:07:41.580 --> 00:07:45.060
privately, between them.

00:07:45.060 --> 00:07:49.380
And we just recently introduced
also, a load balancer,

00:07:49.380 --> 00:07:56.060
so you can share traffic
across multiple VMs there.

00:07:56.060 --> 00:08:00.887
But it's still-- You are in
charge of booting those VMs

00:08:00.887 --> 00:08:02.490
and managing them.

00:08:02.490 --> 00:08:06.477
So alternating them if you
want to patch them for example.

00:08:06.477 --> 00:08:07.310
MALE SPEAKER: Right.

00:08:07.310 --> 00:08:09.530
But then you can run
anything you want

00:08:09.530 --> 00:08:14.080
and not just-- so any native
code, any code you have,

00:08:14.080 --> 00:08:15.760
any of that, you could run.

00:08:15.760 --> 00:08:18.630
So what if I have an application
that runs on App Engine,

00:08:18.630 --> 00:08:21.270
and I love the auto
scaling, I love

00:08:21.270 --> 00:08:23.530
all of the fully managed
aspects of App Engine,

00:08:23.530 --> 00:08:26.790
but I have this little
piece of native code

00:08:26.790 --> 00:08:29.902
which I inherited from,
which is highly optimized,

00:08:29.902 --> 00:08:31.360
I don't want to
rewrite, it doesn't

00:08:31.360 --> 00:08:33.539
fit into the App Engine model.

00:08:33.539 --> 00:08:34.998
Can I have the best
of both worlds?

00:08:34.998 --> 00:08:37.413
LUDO CHAMPENOIS: Yeah, so we
have a solution for that now.

00:08:37.413 --> 00:08:39.559
So App Engine is a platform
of the service offering

00:08:39.559 --> 00:08:40.400
from Google.

00:08:40.400 --> 00:08:44.420
I mean, it has been there
forever, at least since 2008.

00:08:44.420 --> 00:08:48.030
And it was running
your web application

00:08:48.030 --> 00:08:50.245
in the Google data center.

00:08:50.245 --> 00:08:53.347
So we had to have security
rules because we did not

00:08:53.347 --> 00:08:59.390
want you to look around what was
going on on our data centers.

00:08:59.390 --> 00:09:04.540
But with the VM-based
backend technology

00:09:04.540 --> 00:09:07.760
we're introducing, you
can run an App Engine

00:09:07.760 --> 00:09:12.140
application inside a VM,
running on Compute Engine.

00:09:12.140 --> 00:09:14.460
And what it means
is, first of all,

00:09:14.460 --> 00:09:18.330
it's a fully managed
application in App Engine.

00:09:18.330 --> 00:09:22.100
But it's running in a VM
where you could assess it.

00:09:22.100 --> 00:09:24.500
You could install
whatever native code

00:09:24.500 --> 00:09:28.580
you want to augment
your business logic.

00:09:28.580 --> 00:09:30.410
MALE SPEAKER: Any Java
code, to start with.

00:09:30.410 --> 00:09:33.560
LUDO CHAMPENOIS: And the Java
process running on those VMs

00:09:33.560 --> 00:09:39.817
is not restricted
because we don't care.

00:09:39.817 --> 00:09:41.650
MALE SPEAKER: Security
is not at that level.

00:09:41.650 --> 00:09:43.941
LUDO CHAMPENOIS: If you
system.exit et cetera shutdown,

00:09:43.941 --> 00:09:46.280
the machine will shut down.

00:09:46.280 --> 00:09:50.190
You could not do
that in App Engine.

00:09:50.190 --> 00:09:51.860
MALE SPEAKER: Luckily.

00:09:51.860 --> 00:09:54.360
So of course,
that's interesting.

00:09:54.360 --> 00:09:58.010
And actually, that is based
on one of the new features

00:09:58.010 --> 00:09:59.990
in App Engine, which is modules.

00:09:59.990 --> 00:10:02.060
So we used to have
frontend, backends,

00:10:02.060 --> 00:10:03.821
and that is kind of being--

00:10:03.821 --> 00:10:04.696
LUDO CHAMPENOIS: Yes.

00:10:04.696 --> 00:10:08.735
So in order to enable
App Engine apps running

00:10:08.735 --> 00:10:15.110
in the VM-based
runtimes, we introduced

00:10:15.110 --> 00:10:19.235
the notion of an application
is a collection of modules.

00:10:19.235 --> 00:10:21.550
So before, you could
create frontend, backend,

00:10:21.550 --> 00:10:23.420
but now it's much easier.

00:10:23.420 --> 00:10:25.840
And those modules
are versionable.

00:10:25.840 --> 00:10:29.385
So you have one single app
sharing the same data store--

00:10:29.385 --> 00:10:30.885
MALE SPEAKER: All
the same services.

00:10:30.885 --> 00:10:33.330
LUDO CHAMPENOIS: Same
security services, et cetera.

00:10:33.330 --> 00:10:37.117
But you can cut your
business logic into modules.

00:10:37.117 --> 00:10:40.910
And those modules will
run in different VMs.

00:10:40.910 --> 00:10:42.490
MALE SPEAKER: Like
the web frontend,

00:10:42.490 --> 00:10:44.312
the accounting,
the email server--

00:10:44.312 --> 00:10:45.770
LUDO CHAMPENOIS:
So you could still

00:10:45.770 --> 00:10:48.870
have one or n modules running
in the traditional App Engine

00:10:48.870 --> 00:10:53.050
world in a very fast startup
and a highly scalable,

00:10:53.050 --> 00:10:56.470
and some modules running
in Compute Engine.

00:10:56.470 --> 00:10:59.150
MALE SPEAKER: So modules
have this property

00:10:59.150 --> 00:11:02.600
of being more or less scalable,
or more of a frontend thing

00:11:02.600 --> 00:11:05.443
that scales up and down
based on traffic, or more

00:11:05.443 --> 00:11:06.570
of a backend thing.

00:11:06.570 --> 00:11:07.360
LUDO CHAMPENOIS:
Yeah, so you just say,

00:11:07.360 --> 00:11:09.750
oh, my module will be more
or less a backend module,

00:11:09.750 --> 00:11:11.130
so I will put 10 of them.

00:11:11.130 --> 00:11:13.220
And they will always
be up and running.

00:11:13.220 --> 00:11:14.100
MALE SPEAKER: Right.

00:11:14.100 --> 00:11:16.600
LUDO CHAMPENOIS: Or my
module is a frontend

00:11:16.600 --> 00:11:18.270
and I will let
App Engine scale--

00:11:18.270 --> 00:11:19.520
MALE SPEAKER: The typical way.

00:11:19.520 --> 00:11:20.430
LUDO CHAMPENOIS: To
10,000 of those--

00:11:20.430 --> 00:11:22.346
MALE SPEAKER: Yeah, if
that's what's required.

00:11:22.346 --> 00:11:26.930
LUDO CHAMPENOIS: If my
customer demand is that high.

00:11:26.930 --> 00:11:28.150
MALE SPEAKER: OK, so modules.

00:11:28.150 --> 00:11:29.566
And one of those
modules, and this

00:11:29.566 --> 00:11:32.140
is what you were describing,
can be actually running

00:11:32.140 --> 00:11:32.890
on Compute Engine.

00:11:32.890 --> 00:11:35.780
And that's the VM
runtime side of things.

00:11:35.780 --> 00:11:38.560
So you can have native code, not
just Java outside of sandbox.

00:11:38.560 --> 00:11:39.143
You can have--

00:11:39.143 --> 00:11:42.740
LUDO CHAMPENOIS: I mean, I have
a demo using PDF generation,

00:11:42.740 --> 00:11:48.350
using Java WT library that you
cannot use in the traditional

00:11:48.350 --> 00:11:49.670
App Engine model.

00:11:49.670 --> 00:11:55.070
MALE SPEAKER: And you get
access to maybe faster machines,

00:11:55.070 --> 00:11:59.010
and more beefier
machines as well?

00:11:59.010 --> 00:12:01.230
LUDO CHAMPENOIS: Exactly,
so if you look at the VMs,

00:12:01.230 --> 00:12:05.305
I mean, the processes we
were using for App Engine,

00:12:05.305 --> 00:12:09.560
it's F1, F2, F4, but
very small configuration,

00:12:09.560 --> 00:12:15.230
as opposed to a VM runtime
where you can have 16 cores--

00:12:15.230 --> 00:12:17.001
MALE SPEAKER: Yeah,
lots of memory.

00:12:17.001 --> 00:12:17.500
Cool.

00:12:17.500 --> 00:12:19.980
LUDO CHAMPENOIS: So
yeah, beefy server.

00:12:19.980 --> 00:12:22.030
MALE SPEAKER: So in
the time we have left,

00:12:22.030 --> 00:12:24.090
I want to touch on
developer experience.

00:12:24.090 --> 00:12:28.214
There's been a lot of work going
on into improving the tooling.

00:12:28.214 --> 00:12:29.880
And the tooling,
that's, of course, IDs,

00:12:29.880 --> 00:12:31.685
but that's also
things like Maven.

00:12:31.685 --> 00:12:34.230
A lot of people talk
about Gradle as well.

00:12:34.230 --> 00:12:36.314
Do you want to walk us
through a few improvements?

00:12:36.314 --> 00:12:37.813
LUDO CHAMPENOIS:
Yeah, first of all,

00:12:37.813 --> 00:12:39.990
with the introduction of
modules in App Engine,

00:12:39.990 --> 00:12:44.940
we had to help the developer
creating multiple modules.

00:12:44.940 --> 00:12:49.020
Again, in java.lan the
mapping was easy to use here.

00:12:49.020 --> 00:12:50.109
Enterprise archive.

00:12:50.109 --> 00:12:51.150
MALE SPEAKER: Your files.

00:12:51.150 --> 00:12:52.366
LUDO CHAMPENOIS: Your files.

00:12:52.366 --> 00:12:54.160
So one module would be a WAR.

00:12:54.160 --> 00:13:00.180
And then your entire application
can be packaged as a new file.

00:13:00.180 --> 00:13:04.160
We enabled tooling
for that in Maven.

00:13:04.160 --> 00:13:08.625
In the Eclipse idea as
well, where we rewrote,

00:13:08.625 --> 00:13:11.600
entirely, the Eclipse
plug-in for App Engine.

00:13:11.600 --> 00:13:15.290
And now we are
using WTP so that we

00:13:15.290 --> 00:13:19.020
could rely on all of the
web application development

00:13:19.020 --> 00:13:21.560
and enterprise
archive development

00:13:21.560 --> 00:13:24.460
capabilities in Eclipse
to support our modules.

00:13:24.460 --> 00:13:30.510
And recently, we are also
involved in the Gradle plug-in

00:13:30.510 --> 00:13:35.760
for App Engine because we see
more and more customers asking

00:13:35.760 --> 00:13:38.660
for Gradle.

00:13:38.660 --> 00:13:41.870
And if you remember,
the Android ecosystem

00:13:41.870 --> 00:13:45.300
moved to Gradle as a build
system using the Android

00:13:45.300 --> 00:13:46.700
Studio.

00:13:46.700 --> 00:13:50.132
So having end to end--

00:13:50.132 --> 00:13:51.840
MALE SPEAKER: Story
actually makes sense.

00:13:51.840 --> 00:13:53.496
LUDO CHAMPENOIS:
Story for building--

00:13:53.496 --> 00:13:54.870
MALE SPEAKER: So
could I actually

00:13:54.870 --> 00:13:57.335
be using Android Studio
to build my Android app

00:13:57.335 --> 00:13:59.999
and actually, in the same
IDE, build a backend as well?

00:13:59.999 --> 00:14:01.540
LUDO CHAMPENOIS:
Yeah, this is scary.

00:14:01.540 --> 00:14:04.610
But you can build App Engine
apps with Android Studio.

00:14:04.610 --> 00:14:06.326
MALE SPEAKER: That's not scary.

00:14:06.326 --> 00:14:09.490
LUDO CHAMPENOIS: Either you use
Maven or you use Gradle now.

00:14:09.490 --> 00:14:12.770
And we are adding a few
hooks for Endpoints.

00:14:12.770 --> 00:14:14.987
MALE SPEAKER: Endpoints is
supported there as well.

00:14:14.987 --> 00:14:17.570
LUDO CHAMPENOIS: You will see
in Android Studio Endpoints menu

00:14:17.570 --> 00:14:23.720
items in the tools menu to
help you generate those client

00:14:23.720 --> 00:14:28.160
libraries that you can consume
in your Android application.

00:14:28.160 --> 00:14:31.240
MALE SPEAKER: Last thing,
I hear you can actually

00:14:31.240 --> 00:14:34.210
run App Engine on
non-Google data centers.

00:14:34.210 --> 00:14:36.072
What's the deal there?

00:14:36.072 --> 00:14:39.620
LUDO CHAMPENOIS: Yeah, so we've
been working with Red Hat.

00:14:39.620 --> 00:14:40.610
MALE SPEAKER: OK.

00:14:40.610 --> 00:14:42.190
The makers of JBoss, I think.

00:14:42.190 --> 00:14:44.648
LUDO CHAMPENOIS: Yeah, Red Hat,
if you see Red Hat, I mean,

00:14:44.648 --> 00:14:46.970
they are the leader
of in JavaEE platform.

00:14:46.970 --> 00:14:51.340
They are the guys
innovating in JavaEE space.

00:14:51.340 --> 00:14:53.350
And what is interesting
is they wanted

00:14:53.350 --> 00:14:58.700
to add on top of the JavaEE
platform the App Engine APIs.

00:14:58.700 --> 00:15:02.550
So basically, they wanted to
take an App Engine application,

00:15:02.550 --> 00:15:07.139
as is, and run it without
modification on their JBoss

00:15:07.139 --> 00:15:07.930
application center.

00:15:07.930 --> 00:15:09.263
MALE SPEAKER: And they did that.

00:15:09.263 --> 00:15:11.250
LUDO CHAMPENOIS: And
then Wi-Fi, whatever.

00:15:11.250 --> 00:15:12.090
And they did that.

00:15:12.090 --> 00:15:14.660
But as Google, we
wanted to make sure

00:15:14.660 --> 00:15:17.740
that their solution
is compatible.

00:15:17.740 --> 00:15:22.360
So we worked together on the
TCK, Technology Compatibility

00:15:22.360 --> 00:15:25.860
Kit, like everybody
knows in java.lan.

00:15:25.860 --> 00:15:28.190
MALE SPEAKER: Available
to just JBoss?

00:15:28.190 --> 00:15:31.090
LUDO CHAMPENOIS: So we have now
a joint project between Google

00:15:31.090 --> 00:15:33.620
and Red Hat working on this TCK.

00:15:33.620 --> 00:15:38.870
So what it means is many of
our key engineers from Google

00:15:38.870 --> 00:15:43.720
are moving hundred of tests
that we had internally at Google

00:15:43.720 --> 00:15:47.200
testing App Engine, we
are moving them on Github.

00:15:47.200 --> 00:15:49.580
And the JBoss guys
are also contributing

00:15:49.580 --> 00:15:52.635
a lot of those tests.

00:15:52.635 --> 00:15:54.005
And it's a Github project.

00:15:54.005 --> 00:15:55.130
It's called App Engine TCK.

00:15:55.130 --> 00:15:55.900
MALE SPEAKER: So
it's open source.

00:15:55.900 --> 00:15:57.040
The TCK is open source.

00:15:57.040 --> 00:15:58.373
LUDO CHAMPENOIS: Apache license.

00:15:58.373 --> 00:16:00.700
And in fact, I would encourage
you to contribute to it.

00:16:00.700 --> 00:16:04.370
If you see a bug in App Engine,
and you can reproduce it,

00:16:04.370 --> 00:16:07.770
you submit a unit
test showing the bug.

00:16:07.770 --> 00:16:10.340
And because we run
those tests every day,

00:16:10.340 --> 00:16:12.277
we'll see that it's failing.

00:16:12.277 --> 00:16:13.110
MALE SPEAKER: Great.

00:16:13.110 --> 00:16:15.960
So lots of new stuff in
App Engine, the ability

00:16:15.960 --> 00:16:19.860
to run your App Engine
apps on top of Cave Dwarf,

00:16:19.860 --> 00:16:20.850
is the project name?

00:16:20.850 --> 00:16:22.240
LUDO CHAMPENOIS: The name of
the project is Cave Dwarf.

00:16:22.240 --> 00:16:24.600
MALE SPEAKER: On top of
JBoss and integration

00:16:24.600 --> 00:16:26.220
with Compute Engine.

00:16:26.220 --> 00:16:27.570
Then the sky becomes the limit.

00:16:27.570 --> 00:16:28.900
LUDO CHAMPENOIS: Yeah,
so many, many new things.

00:16:28.900 --> 00:16:29.790
MALE SPEAKER: Yeah, so
lots of great things.

00:16:29.790 --> 00:16:33.140
Great, looking forward to
seeing your sessions on Parlays.

00:16:33.140 --> 00:16:34.710
And I'll speak to
you soon, Ludo.

00:16:34.710 --> 00:16:35.980
Thank you very much.

00:16:35.980 --> 00:16:37.530
LUDO CHAMPENOIS: Thank you.

