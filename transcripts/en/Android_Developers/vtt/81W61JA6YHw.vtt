WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.095
(music playing)

00:00:02.095 --> 00:00:06.090
One of the unique features
of mobile apps is location awareness.

00:00:06.090 --> 00:00:08.530
Mobile users take their devices
with them everywhere

00:00:08.530 --> 00:00:12.920
and adding location awareness to your app
offers users a more engaging experience.

00:00:12.920 --> 00:00:15.910
My name is Colt McAnlis,
and while all this fancy location data

00:00:15.910 --> 00:00:19.230
is making your app more useful,
misusing it can cost you big

00:00:19.230 --> 00:00:20.790
with respect to battery life.

00:00:20.790 --> 00:00:24.450
Now, a standard location request
looks a little something like this.

00:00:24.450 --> 00:00:27.930
And in the name of performance,
let's take a look at the first two values,

00:00:27.930 --> 00:00:29.900
namely the interval APIs.

00:00:29.950 --> 00:00:33.570
SetInterval sets the rate in milliseconds
at which your app

00:00:33.570 --> 00:00:36.870
prefers to receive location updates.
The lower the number,

00:00:36.870 --> 00:00:40.295
then the more updates you get,
and the more battery you burn as a result,

00:00:40.295 --> 00:00:43.105
which means finding the right value
to use for your interval

00:00:43.105 --> 00:00:44.325
is an important balance.

00:00:44.325 --> 00:00:47.920
Too fast and you'll be burning
lots of battery for the GPS requests.

00:00:47.920 --> 00:00:50.720
Too slow and your application
won't be updating fast enough

00:00:50.720 --> 00:00:54.380
to be helpful to the user.
But you want to end up in a situation

00:00:54.390 --> 00:00:57.980
where you can be more dynamic
with how you interact with this hardware.

00:00:57.980 --> 00:01:01.421
For example, if you notice the position
has stayed the same for a while,

00:01:01.421 --> 00:01:05.130
then there's a good chance that the user
may be stationary for a long duration.

00:01:05.130 --> 00:01:09.210
So try backing off the sampling interval
to reduce the amount of battery churn

00:01:09.210 --> 00:01:10.980
that comes with that process.

00:01:11.020 --> 00:01:14.340
But it's also worth pointing out
that other apps also affect the rate

00:01:14.340 --> 00:01:16.887
in which updates
are sent to your application.

00:01:16.887 --> 00:01:21.000
In fact, the underlying system
will send out updates at the fastest rate

00:01:21.000 --> 00:01:26.520
that any application has requested
with the SetintervalAPI across the system,

00:01:26.840 --> 00:01:29.650
meaning that your app
can end up receiving location events

00:01:29.650 --> 00:01:33.120
at a faster frequency than the one
requested by your app,

00:01:33.120 --> 00:01:35.480
perhaps flooding you
with location information

00:01:35.480 --> 00:01:38.450
and doing a lot of other stuff
you don't actually need to do.

00:01:38.450 --> 00:01:42.086
Which is why
the SetFastestInterval API is used.

00:01:42.086 --> 00:01:44.900
Basically, this lets you throttle
how often you get updates

00:01:44.900 --> 00:01:47.370
that you might not
be interested in or ready for.

00:01:47.380 --> 00:01:50.720
So your app isn't wasting time
updating and processing location events

00:01:50.720 --> 00:01:52.720
when they're not actually being needed.

00:01:52.720 --> 00:01:56.271
Now let's take a look at the whole
setPriority thing.

00:01:56.271 --> 00:01:58.260
You have to remember
that the dominant way

00:01:58.260 --> 00:02:00.700
your device resolves
its physical location on Earth

00:02:00.700 --> 00:02:04.010
is with the help of a global
positioning system hardware.

00:02:04.010 --> 00:02:07.380
Basically, there's
a cascade of satellites hanging out

00:02:07.380 --> 00:02:10.049
just right outside of Earth's
atmosphere, whose whole job

00:02:10.049 --> 00:02:12.680
is to communicate positional
information to your device

00:02:12.680 --> 00:02:13.980
based upon your movements.

00:02:13.980 --> 00:02:18.940
Simply, the GPS hardware in your phone
negotiates signals between the satellites

00:02:18.940 --> 00:02:22.380
and tower data to pinpoint your position
in space and time,

00:02:22.380 --> 00:02:26.720
which as you might imagine,
is a very battery-intensive operation.

00:02:26.740 --> 00:02:30.140
But this isn't the only way
you can get location data.

00:02:30.140 --> 00:02:33.380
Besides the super expensive GPS,
there's also the network provider,

00:02:33.380 --> 00:02:36.450
which determines location based upon
availability of cell tower

00:02:36.450 --> 00:02:38.780
and Wi-Fi access points.

00:02:38.780 --> 00:02:41.710
The result is that less accurate results
are given to you,

00:02:41.710 --> 00:02:46.373
but only a portion of the battery
is used compared to the GPS version.

00:02:46.460 --> 00:02:48.750
And, of course,
there is the Passive Provider,

00:02:48.750 --> 00:02:50.850
which is probably
the most battery efficient.

00:02:50.850 --> 00:02:53.330
When some other application
makes a location request,

00:02:53.330 --> 00:02:56.410
the results then get passed
along to your app as well.

00:02:56.410 --> 00:02:59.610
That way your device
isn't sending out multiple location pings

00:02:59.610 --> 00:03:02.129
and can spend more time saving battery.

00:03:02.129 --> 00:03:04.480
Now, in order to make all
of this more accessible

00:03:04.480 --> 00:03:08.030
for your location API needs,
you can control what types of networking

00:03:08.030 --> 00:03:11.560
and battery drain you're wanting
by using the setPriority option

00:03:11.570 --> 00:03:13.050
of a location request.

00:03:13.050 --> 00:03:15.510
And if you're already
using activity recognition

00:03:15.510 --> 00:03:17.640
to determine what the
device or app is doing

00:03:17.640 --> 00:03:20.340
or when it's not being used,
you can leverage this data

00:03:20.340 --> 00:03:23.630
to turn off location request queries
or throttle them back

00:03:23.630 --> 00:03:25.130
when they're not needed.

00:03:25.130 --> 00:03:28.920
But in truth, balancing and bouncing
all of those APIs depending on the state

00:03:28.920 --> 00:03:33.877
is really a cumbersome process,
that's why Android made it a lot easier.

00:03:33.890 --> 00:03:37.830
By using the FusedLocationProvider API,
you get a simplified interface

00:03:37.830 --> 00:03:40.920
to all of this craziness,
and Android will handle

00:03:40.920 --> 00:03:45.430
all the grungy details on your behalf,
saving you both battery as well as sanity

00:03:45.430 --> 00:03:46.624
in your code base.

00:03:46.624 --> 00:03:49.200
Now, if you're ever confused
about how your application

00:03:49.220 --> 00:03:51.770
is eating through battery,
be sure to take a hard look

00:03:51.770 --> 00:03:53.200
at the Battery Historian tool.

00:03:53.200 --> 00:03:56.150
It will happily remind you
of all the things you're doing wrong

00:03:56.150 --> 00:03:58.200
and give you hints
on how to get them fixed.

00:03:58.200 --> 00:04:00.732
So don't get lost in the
world of battery performance.

00:04:00.732 --> 00:04:03.960
Make sure you check out the rest
of the Android Performance Patterns videos

00:04:03.960 --> 00:04:06.200
and join our Google+ community
to ask questions

00:04:06.200 --> 00:04:08.480
from other great performance experts.

00:04:08.480 --> 00:04:11.205
So keep calm, profile your code,
and always remember,

00:04:11.205 --> 00:04:12.710
Perf Matters.

00:04:14.150 --> 00:04:18.400
(music playing)

