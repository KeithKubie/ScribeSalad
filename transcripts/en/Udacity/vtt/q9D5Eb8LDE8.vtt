WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:06.000
Coming up with proper precondition, postcondition, and invariant can be a hard task.

00:00:06.000 --> 00:00:08.000
Other tools that help us doing that--

00:00:08.000 --> 00:00:14.000
this is the idea of inferring invariants, having a tool that automatically provides

00:00:14.000 --> 00:00:18.000
data invariants, preconditions, and postconditions.

00:00:18.000 --> 00:00:21.000
I'm going to show you how such tools work,

00:00:21.000 --> 00:00:23.000
and we're going to explore how to build one.

00:00:23.000 --> 00:00:27.000
The Daikon tool by Michael Ernst and colleagues is a tool

00:00:27.000 --> 00:00:30.000
that dynamically detects invariants from program run.

00:00:30.000 --> 00:00:33.000
The idea is that you do have a set of executions.

00:00:33.000 --> 00:00:35.000
Here is one execution,

00:00:35.000 --> 00:00:38.000
here is another one, and here is five executions.

00:00:38.000 --> 00:00:42.000
What Diakon does is it analyses these runs and checks

00:00:42.000 --> 00:00:47.000
whether there are any properties or variables that hold for all observed runs.

00:00:47.000 --> 00:00:51.000
For instance, it could determine that the variable x is odd

00:00:51.000 --> 00:00:54.000
whenever the function f is being called.

00:00:54.000 --> 00:00:56.000
How does Daikon do that?

00:00:56.000 --> 00:00:58.000
The first thing it does is it gets traces.

00:00:58.000 --> 00:01:02.000
A trace is a listing of all functions that were called

00:01:02.000 --> 00:01:05.000
and all values of all variables.

00:01:05.000 --> 00:01:09.000
Very much like the sys.settrace() function in Python,

00:01:09.000 --> 00:01:12.000
which we have used to trace the programs.

00:01:12.000 --> 00:01:16.000
What Daikon has built in is a so-called pattern library.

00:01:16.000 --> 00:01:18.000
A pattern library of possible invariants.

00:01:18.000 --> 00:01:21.000
Here is such a pattern--$1 == 0.

00:01:21.000 --> 00:01:25.000
Here is such a pattern--we have a place holder which equals 0.

00:01:25.000 --> 00:01:28.000
Daikon now takes the trace, looks at all the variables,

00:01:28.000 --> 00:01:31.000
and checks which variable satisfies this pattern.

00:01:31.000 --> 00:01:36.000
That is it replaces the placeholder with every single variable found in the trace.

00:01:36.000 --> 00:01:44.000
So it checks whether x == 0, whether y == 0, whether z == 0, and so on.

00:01:44.000 --> 00:01:47.000
And only those patterns that match are being retained.

00:01:47.000 --> 00:01:49.000
Those that don't match are eliminated.

00:01:49.000 --> 00:01:54.000
X and y are not 0, then they're eliminated. This one is retained.

00:01:54.000 --> 00:01:57.000
Daikon checks these patterns for every single invocation of a function

00:01:57.000 --> 00:02:01.000
and only retains those that hold for all invocations of the function,

00:02:01.000 --> 00:02:05.000
which means that over time the set of instantiated patterns becomes

00:02:05.000 --> 00:02:08.000
smaller and smaller. It's like a sieve.

00:02:08.000 --> 00:02:13.000
At the end, if this instantiation is found to hold for all invocations of a function

00:02:13.000 --> 00:02:17.000
then it's actually retained and finally reported as an invariant.

00:02:17.000 --> 00:02:19.000
Daikon has hundreds of these patterns.

00:02:19.000 --> 00:02:24.000
It tries them all out one by one on all variables at all invocations.

00:02:24.000 --> 00:02:26.000
Yes, this takes a bit of time.

00:02:26.000 --> 00:02:30.000
So, if by applying the pattern library, Diakon has found out

00:02:30.000 --> 00:02:33.000
that x is always odd when f is being called,

00:02:33.000 --> 00:02:36.000
it reports this as an invariant.

