WEBVTT
Kind: captions
Language: en

00:00:00.430 --> 00:00:03.410
Now that we understand what's
possible with animated vectors,

00:00:03.410 --> 00:00:05.620
let's walk through an example
of implementing them.

00:00:05.620 --> 00:00:10.260
We'll return to this tick to cross
animation and implement them.

00:00:10.260 --> 00:00:13.830
The first step is to create two vector
drawables, one for the tick, and

00:00:13.830 --> 00:00:15.270
one for the cross.

00:00:15.270 --> 00:00:16.250
Here are my drawables,

00:00:16.250 --> 00:00:20.330
I'm generating the path using my
favorite drawing graphics package, and

00:00:20.330 --> 00:00:24.230
then exporting the SVG and and
grabbing the path data from it.

00:00:24.230 --> 00:00:27.970
Soon Android Studio will be
able to import SVG directly

00:00:27.970 --> 00:00:29.720
as a vector drawable.

00:00:29.720 --> 00:00:33.760
A pro tip that I found helpful is
to create a resources file to keep

00:00:33.760 --> 00:00:36.140
all of the attributes of
an animation together.

00:00:36.140 --> 00:00:38.250
Here I'm calling it tickcross.

00:00:38.250 --> 00:00:38.790
For example,

00:00:38.790 --> 00:00:42.830
we'll need to reference the path data
from a couple of different places.

00:00:42.830 --> 00:00:47.660
So saving it as a string resource and
then referencing it makes it easy.

00:00:48.710 --> 00:00:52.870
Next we create animators for
each of the steps that are changing.

00:00:52.870 --> 00:00:55.700
Here's an example that
morphs the ticks across.

00:00:55.700 --> 00:01:00.260
See how it references the strings
we specified in the resources

00:01:00.260 --> 00:01:02.720
as the from and to states.

00:01:02.720 --> 00:01:05.160
Finally, we create
an animated-vector drawable

00:01:05.160 --> 00:01:08.390
which connects the image
to the animator.

00:01:08.390 --> 00:01:09.070
For example,

00:01:09.070 --> 00:01:14.510
this animated-vector drawable acts
on the ic_cross vector drawable.

00:01:14.510 --> 00:01:18.980
It targets one of the path sections
by name here, the crosspath.

00:01:20.070 --> 00:01:23.960
And then specifies and
animator to run on it,

00:01:23.960 --> 00:01:27.130
here running the cross_to_tick
animation we just looked up.

00:01:28.170 --> 00:01:30.460
Once we have all of
the moving parts together,

00:01:30.460 --> 00:01:33.930
we can show the drawable
in an imageView.

00:01:33.930 --> 00:01:35.800
And start the animation
when appropriate.

00:01:35.800 --> 00:01:38.240
Perhaps in response to
an event like a click.

00:01:38.240 --> 00:01:40.350
You can find the full
source code to this demo

00:01:40.350 --> 00:01:42.420
linked in the instructor's notes.

00:01:42.420 --> 00:01:46.070
Fun details like this are a great
way to entertain your users and

00:01:46.070 --> 00:01:47.500
show some personality in your app.

