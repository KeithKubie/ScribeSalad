WEBVTT
Kind: captions
Language: en

00:00:00.170 --> 00:00:02.870
All it takes it's this little bit of code to get the amount of time from the

00:00:02.870 --> 00:00:06.834
previous frame to the next one. When you call clock.getDelta, it returns a

00:00:06.834 --> 00:00:10.068
precise floating point value of the number of seconds that is elapsed since the

00:00:10.068 --> 00:00:14.716
clock created or from the last time getDelta was called. By calling this at the

00:00:14.716 --> 00:00:17.404
beginning of each render, we can know exactly how much time we should use when

00:00:17.404 --> 00:00:21.985
we rotate the drinking bird. This code is how we were rotating the bird, adding

00:00:21.985 --> 00:00:26.730
half a degree each frame. If our goal is to rotate 30 degrees per second, we

00:00:26.730 --> 00:00:31.590
replace the 0.5 degrees per frame with exactly this. As each frame passes and

00:00:31.590 --> 00:00:35.380
the delta gets updated, the object is rotated the proper amount. This works

00:00:35.380 --> 00:00:37.980
well while the browser window is visible, but an interesting thing happens if

00:00:37.980 --> 00:00:40.540
you start the demo in timed mode, set the frames per second, and then switch to

00:00:40.540 --> 00:00:45.268
another browser window, and hide the program. When you come back in a while,

00:00:45.268 --> 00:00:48.550
you're likely to see the drinking bird spinning around and around. The problem

00:00:48.550 --> 00:00:52.845
is with our function that computes how much to rotate. The assumption in this

00:00:52.845 --> 00:00:56.475
code is that the rotation angle will never increase much beyond 103 or negative

00:00:56.475 --> 00:01:01.220
22 degrees. However, when this window is hidden, rendering stops. When the

00:01:01.220 --> 00:01:04.220
window is exposed again, the renderer gets a huge delta, which the limit

00:01:04.220 --> 00:01:08.242
testing code doesn't deal with at all. The bird spins around and around

00:01:08.242 --> 00:01:12.047
incredibly fast for a while as the huge value gets damped out. There are a

00:01:12.047 --> 00:01:15.074
number of solutions. Here is one that locks the drinking bird directly to the

00:01:15.074 --> 00:01:19.648
time itself instead of the change of time, the delta. The method getElapsedTime

00:01:19.648 --> 00:01:23.818
gives how many seconds have gone by since the clock option was created. We take

00:01:23.818 --> 00:01:28.060
this time and multiply it by 30, the number of degrees per second. We know that

00:01:28.060 --> 00:01:31.415
the drinking bird sweeps through a 125 degree arc in both directions for a

00:01:31.415 --> 00:01:36.659
cycle of 250 degrees total. By taking the modulus, the remainder after the

00:01:36.659 --> 00:01:42.030
division by 250, we get an angle between 0 and 250. If the angle is less than

00:01:42.030 --> 00:01:46.130
125 degrees, we rotate the bird forwards. Otherwise, we rotate it backwards,

00:01:46.130 --> 00:01:50.610
adjusting for the starting and ending angles of negative 22 and 103 degrees.

00:01:50.610 --> 00:01:53.405
Now if the browser window is exposed later, the time is always going to resolve

00:01:53.405 --> 00:01:57.396
to a proper angle. The moral is, when you design any animation driven by time,

00:01:57.396 --> 00:02:01.265
make sure it's bulletproof from large time changes between renders. By the way,

00:02:01.265 --> 00:02:04.612
there's one more mode in the demo called wave. It's my attempt to make the bird

00:02:04.612 --> 00:02:07.048
swing back from the glass at a varying rate, instead of moving back at a

00:02:07.048 --> 00:02:11.708
constant number of degrees per second. This avoids a bit of the jerk that

00:02:11.708 --> 00:02:15.030
occurs when the direction is reversed. One nice thing about using the time as

00:02:15.030 --> 00:02:18.610
an input is that you can then decide what the angle should be at various times.

00:02:18.610 --> 00:02:22.170
I can't say my attempt is all that convincing, but at least it's a bit nicer.

