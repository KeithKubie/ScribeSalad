WEBVTT
Kind: captions
Language: en

00:00:00.550 --> 00:00:02.130
To update my project,

00:00:02.130 --> 00:00:08.170
I first modified the get forecast method
to future detect the cache's object.

00:00:08.170 --> 00:00:13.020
When it supported, I request the weather
forecast data from the cache and

00:00:13.020 --> 00:00:15.410
call update forecast with the response.

00:00:16.440 --> 00:00:19.040
I modified updateForecastCard

00:00:19.040 --> 00:00:23.220
to make sure that the old data
doesn't clover the new data.

00:00:23.220 --> 00:00:28.600
By checking the time of the data that's
currently stored versus the new data.

00:00:28.600 --> 00:00:31.030
If it's older, we just bail out.

00:00:31.030 --> 00:00:35.680
I also tricked the date element to store
the raw data and make comparison easier

00:00:35.680 --> 00:00:42.910
and added a date-dt=0 attribute
to the element in index.html.

00:00:42.910 --> 00:00:47.970
Then, in the service worker,
I bumped the cache name and

00:00:47.970 --> 00:00:53.060
added a new data cache name for
storing the data that also means,

00:00:53.060 --> 00:00:55.590
I needed to tweak
the activate event handler so

00:00:55.590 --> 00:00:58.590
it doesn't delete the data
cache when it runs.

00:00:58.590 --> 00:01:01.080
Finally, in the FetchEvent handler

00:01:01.080 --> 00:01:06.600
I checked if the requested URL starts
with the weather API base URL.

00:01:06.600 --> 00:01:10.910
If it does, I fetch the data
then clone the response and

00:01:10.910 --> 00:01:14.900
put it into the cache and
finally, return the response.

00:01:14.900 --> 00:01:18.350
Otherwise, we handle the request
just as we did before.

00:01:18.350 --> 00:01:21.880
If it's in the cache,
we return the cache version, otherwise,

00:01:21.880 --> 00:01:23.500
we get it from the network.

00:01:23.500 --> 00:01:26.370
If you got stuck or
want to see exactly what I did,

00:01:26.370 --> 00:01:29.512
the solution I built is linked
in the instructor notes below.

