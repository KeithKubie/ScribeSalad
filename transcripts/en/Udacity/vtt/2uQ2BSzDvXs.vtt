WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.000
In Twiddle, we're trying to optimize for a set of parameters.

00:00:04.000 --> 00:00:09.000
To do so, our function run() must return a goodness.

00:00:09.000 --> 00:00:11.000
This goodness value might be the average crosstrack error.

00:00:11.000 --> 00:00:16.000
Say I wanted to implement Twiddle so as to minimize the average crosstrack error.

00:00:16.000 --> 00:00:21.000
If that's the case, then the output of run depends on the three parameters.

00:00:21.000 --> 00:00:23.000
Here's how Twiddle works.

00:00:23.000 --> 00:00:28.000
Build a parameter vector of our 3-target parameters, and initialize it with zero.

00:00:28.000 --> 00:00:35.000
Also, build a vector of potential changes that you want to probe and initialize them for now with 1.

00:00:35.000 --> 00:00:39.000
Then you can run our command run( ) with our parameters,

00:00:39.000 --> 00:00:44.000
and whatever it outputs is our best error so far.

00:00:44.000 --> 00:00:48.000
Now we wish to modify p as to make the error smaller.

00:00:48.000 --> 00:00:51.000
That's where Twiddle comes in. It's a really smart algorithm, I believe.

00:00:51.000 --> 00:00:54.000
We sequentially go through these parameters.

00:00:54.000 --> 00:00:58.000
Obviously, you shouldn't write 3. You should write len of p.

00:00:58.000 --> 00:01:02.000
First we tried to increase p by our probing value,

00:01:02.000 --> 00:01:06.000
compute a new error for this new modified p.

00:01:06.000 --> 00:01:10.000
If this new error is better than our best error, then we do two things.

00:01:10.000 --> 00:01:17.000
First, we set best_err to err, and we even modify our dp to a slightly larger value

00:01:17.000 --> 00:01:20.000
by multiplying it with 1.1.

00:01:20.000 --> 00:01:23.000
Otherwise, we try the other way.

00:01:23.000 --> 00:01:29.000
We subtract dp from p--and we have to do it twice now because we added it before.

00:01:29.000 --> 00:01:31.000
Then we do the same thing again as over here. I'm not going to write it out.

00:01:31.000 --> 00:01:38.000
We check whether the error is better than our best error, we retain it, and we multiply dp by 1.1.

00:01:38.000 --> 00:01:41.000
But if both of those fail--this one over here and this one over here--

00:01:41.000 --> 00:01:49.000
we set p[ i ] back to the original value, and we decrease our probing thing over here,

00:01:49.000 --> 00:01:54.000
say, by multiplying it with 0.9.

00:01:54.000 --> 00:01:59.000
That's the core of Twiddle, and what it really does is for each coordinate in isolation

00:01:59.000 --> 00:02:03.000
it moves our parameter down a little bit by this value over here.

00:02:03.000 --> 00:02:10.000
If it then finds a better solution, it retains it, and it even increments the probing interval.

00:02:10.000 --> 00:02:15.000
If it fails to find a better solution, it goes back to the original and decreases our probing interval.

00:02:15.000 --> 00:02:22.000
We do this entire thing so long as the sum of the dp's is larger than the threshold.

00:02:22.000 --> 00:02:34.000
Somewhere in here we say while some of dp is larger than 0.00001.

00:02:34.000 --> 00:02:36.000
It's hard to read, but I hope you can follow it.

00:02:36.000 --> 00:02:41.000
This is Twiddle. Let me put this into pictures.

00:02:41.000 --> 00:02:44.000
We have three parameters--0, 0, 0.

00:02:44.000 --> 00:02:49.000
Then in the first iteration, we bump one of the parameters up and see if it improves the error.

00:02:49.000 --> 00:02:51.000
If that's the case, we retain it.

00:02:51.000 --> 00:02:53.000
Then we go to the second parameter. We bump it up. It might not work.

00:02:53.000 --> 00:02:56.000
We bump it down and maybe retain that one, and so on.

00:02:56.000 --> 00:03:02.000
Now, as we keep bumping up, we might find that neither bumping up nor bumping down helps.

00:03:02.000 --> 00:03:06.000
What we do instead is we retain the original solution but make our probing interval

00:03:06.000 --> 00:03:09.000
smaller than before by a factor of 0.9.

00:03:09.000 --> 00:03:14.000
In doing so, we can zoom in more and more into a detailed parameter until it finally converges.

00:03:14.000 --> 00:03:20.000
It's local hill climber, but it happens to be really, really efficient.

