WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.000
This is what we got this time--so we can see is that our fault injection version of read

00:00:04.000 --> 00:00:08.000
is indeed reading less bytes than the full number of bytes we asked for

00:00:08.000 --> 00:00:12.000
and what you can see is the first time it's called, you get the range from 1-3121, 

00:00:12.000 --> 00:00:15.000
so it's going to pick something in the middle usually, but then success of read calls have a narrow,

00:00:15.000 --> 00:00:19.000
narrow range of random numbers that can return and so that's what explains this kind of

00:00:19.000 --> 00:00:22.000
progressional numbers, that's what explains this sort of progression of numbers

00:00:22.000 --> 00:00:25.000
towards smaller numbers, and so there should be a 100 of these little sequences

00:00:25.000 --> 00:00:29.000
due to fact that we let the test loop 100 times.

00:00:29.000 --> 00:00:33.000
So the question we can ask is, is our confidence in the software now are higher.

00:00:33.000 --> 00:00:36.000
Well, probably there are other tests we should do--like one thing

00:00:36.000 --> 00:00:38.000
we could do is use a read fault injection function.

00:00:38.000 --> 00:00:40.000
Instead of being random just reads 1 byte every time--

00:00:40.000 --> 00:00:42.000
that might end up being a reasonable stress test.

00:00:42.000 --> 00:00:45.000
Another thing we might do is simulate random end of file conditions

00:00:45.000 --> 00:00:47.000
when random errors that read is allowed to return.

00:00:47.000 --> 00:00:51.000
So during our testing, the read system call never actually returned an error  value.

00:00:51.000 --> 00:00:54.000
It always read the file successful, but if we want to use fault injection to make it do that,

00:00:54.000 --> 00:00:57.000
then we have to modify our program a little but, but I'm not going to do that right now.

00:00:57.000 --> 00:01:00.000
In the meantime, I think we've established that the logic here is fairly solid.

00:01:00.000 --> 00:01:03.000
It can do with a wide variety of conditions and one thing we might want to do just before 

00:01:03.000 --> 00:01:07.000
our leaving is out of the 1,000,000 times instead of 100 times.

00:01:07.000 --> 00:01:10.000
Okay, so we compile with optimizations, we run it, it's running a 1,000,000 iterations

00:01:10.000 --> 00:01:14.000
of the test sequence, so it's doing a 1,000,000 iterations of this little sequence here,

00:01:14.000 --> 00:01:17.000
and let's see how long this takes, hopefully, it's not very long.

00:01:17.000 --> 00:01:19.000
Okay, there we go--it took like 15 or 20 seconds, so that was a

00:01:19.000 --> 00:01:21.000
little bit painful but not that bad overall.

00:01:21.000 --> 00:01:25.000
And so the question is now do we have reasonable confidence that our logic is solid

00:01:25.000 --> 00:01:29.000
and except for the error handling condition that we talked about, I would say that this is

00:01:29.000 --> 00:01:31.000
probably pretty solid--this is probably pretty solid code now.

