WEBVTT
Kind: captions
Language: en

00:00:00.240 --> 00:00:03.070
Thomas has 400 candy bars in his shop

00:00:03.070 --> 00:00:06.290
and each cost 50 cents. Let p of b

00:00:06.290 --> 00:00:09.889
denote the price, p, measured in
dollars

00:00:09.889 --> 00:00:13.210
of a purchase of b candy bars. Alright

00:00:13.210 --> 00:00:16.379
I input b, the number candy bars I wanna buy,

00:00:16.379 --> 00:00:19.630
and p(b) will tell me what's the
purchase price is really

00:00:19.630 --> 00:00:22.990
just taking the number of candy bars multiplied by 50 cents, but we won't have to worry

00:00:22.990 --> 00:00:23.939
about that just yet.

00:00:23.939 --> 00:00:28.519
Which number type is more appropriate
for the domain of the function?

00:00:28.519 --> 00:00:32.450
So just to remind ourselves, what is the domain of a function? A domain is a set

00:00:32.450 --> 00:00:35.280
of all inputs over which the function is
defined.

00:00:35.280 --> 00:00:38.670
So it is the set of all b's. It is the set of
all inputs

00:00:38.670 --> 00:00:42.489
over which p of b will produce a
defined response

00:00:42.489 --> 00:00:45.520
So let's think about it. Is it integers or
real numbers?

00:00:45.520 --> 00:00:51.000
So I could buy -- b could be 0 candy bars, 1 candy bars, 2 candy bars, all up to

00:00:51.000 --> 00:00:52.440
400 candy bars.

00:00:52.440 --> 00:00:55.879
Could I -- Could I have a fractional can-- 
Could be b

00:00:55.879 --> 00:00:59.480
0.372 of a candy bar?

00:00:59.480 --> 00:01:02.690
Well, this is a normal candy shop.

00:01:02.690 --> 00:01:06.790
It's -- each candy bar is gonna be in its own packet. It's going to be in a discrete

00:01:06.790 --> 00:01:10.020
chunk. You're not going to be able to buy
0.372

00:01:10.020 --> 00:01:15.189
of a candy bar. You can either buy a one
more or none more, so you buy your 1, 2, 3

00:01:15.189 --> 00:01:16.520
all the way up to 400.

00:01:16.520 --> 00:01:21.439
So I would say integers -- that the domain of this function is going to be

00:01:21.439 --> 00:01:25.680
is going to be a subset of integers. It's
not -- you not, you can't have

00:01:25.680 --> 00:01:29.860
a real, all real number, but integers
are obviously a subset real numbers.

00:01:29.860 --> 00:01:33.860
But you can't say, hey, I'm gonna buy pi candy
bars, or I'm gonna buy

00:01:33.860 --> 00:01:38.350
the square root of two candy bars. You're gonna buy integer number candy bars.

00:01:38.350 --> 00:01:43.189
Now they say, define the interval of the
domain. So the fewest candy bars I could

00:01:43.189 --> 00:01:43.610
buy

00:01:43.610 --> 00:01:49.070
are 0 candy bars, and I have to decide whether I put a
bracket or I put a parenthesis.

00:01:49.070 --> 00:01:52.649
I can actually buy 0 candy bars so I'm
gonna put a bracket.

00:01:52.649 --> 00:01:56.530
If I put a parentheses, that means I
could have values above zero but not

00:01:56.530 --> 00:01:58.850
including 0, but I want to include 0

00:01:58.850 --> 00:02:01.890
so I'm gonna put the bracket there. So the
least I could buy

00:02:01.890 --> 00:02:06.390
is 0, and in the most I could buy, the store
has 400 candy bars so that's the most I

00:02:06.390 --> 00:02:07.040
can buy.

00:02:07.040 --> 00:02:11.190
The most I could buy are 400
candy bars, and I can buy 400.

00:02:11.190 --> 00:02:13.050
So I would put

00:02:13.050 --> 00:02:15.980
brackets there as well. So the interval
of the domain,

00:02:15.980 --> 00:02:19.319
I would want to select integers. So b

00:02:19.319 --> 00:02:24.010
is a member of integers such that b is
also a member of this interval. It

00:02:24.010 --> 00:02:25.870
could be as low as 0

00:02:25.870 --> 00:02:29.080
including 0, and as high as 400
including

00:02:29.080 --> 00:02:31.900
400. Got it right.

