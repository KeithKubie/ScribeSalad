WEBVTT
Kind: captions
Language: en

00:00:00.330 --> 00:00:02.380
Okay, so what do you think?

00:00:02.380 --> 00:00:08.070
&gt;&gt; I think the answer would be a and b and any of those four: c, d, e or f.

00:00:08.070 --> 00:00:10.160
&gt;&gt; Alright. So let's think about what would happen in that

00:00:10.160 --> 00:00:13.350
case. So, if we start off the centers there. The first

00:00:13.350 --> 00:00:16.320
step is going to be for every point to join whichever

00:00:16.320 --> 00:00:19.940
cluster it's closest to. So, a is just going to be with a.

00:00:19.940 --> 00:00:20.433
&gt;&gt; Mm-hm.

00:00:20.433 --> 00:00:22.580
&gt;&gt; B is just going to be with b. And then

00:00:22.580 --> 00:00:24.810
d is going to slurp up all these other four points.

00:00:24.810 --> 00:00:24.990
&gt;&gt; Right.

00:00:24.990 --> 00:00:26.050
&gt;&gt; All right.

00:00:26.050 --> 00:00:28.970
So now in the next iteration, it's going to recompute the centers. And a

00:00:28.970 --> 00:00:31.090
and b aren't going to change. This cluster,

00:00:31.090 --> 00:00:33.290
the center's going to change to here. And

00:00:33.290 --> 00:00:36.140
now it's never going to make any additional progress. So those are the three

00:00:36.140 --> 00:00:39.600
clusters it'll find if it starts off with those kind of bad initial points.

00:00:39.600 --> 00:00:42.630
&gt;&gt; So how would we go about avoiding that sort of thing?

00:00:43.980 --> 00:00:47.660
&gt;&gt; yes. I was going to ask you exactly that question. So, given

00:00:47.660 --> 00:00:48.790
that we're thinking about this as a

00:00:48.790 --> 00:00:51.810
hill climbing process, that's a local optimum.

00:00:51.810 --> 00:00:53.550
And we had a pretty good way of dealing

00:00:53.550 --> 00:00:57.020
with local optima and that was random restarts. That's

00:00:57.020 --> 00:00:59.530
one possibility. Another thing that people sometimes do is

00:00:59.530 --> 00:01:01.680
they'll do a quick analysis of the space and actually

00:01:01.680 --> 00:01:03.980
try to find initial cluster centers that kind of

00:01:03.980 --> 00:01:07.120
are spread out. So pick a cluster center and then

00:01:07.120 --> 00:01:08.660
pick the next cluster center to be as far

00:01:08.660 --> 00:01:11.070
away from all the other cluster centers as you can.

00:01:11.070 --> 00:01:13.650
&gt;&gt; So kind of do like the, I don't know, the convex

00:01:13.650 --> 00:01:17.530
hole of the space and try to pick points near the corners or

00:01:17.530 --> 00:01:18.220
something like that?

00:01:18.220 --> 00:01:19.789
&gt;&gt; Yes, yeah, that's right.

00:01:21.160 --> 00:01:24.270
&gt;&gt; Hm. So I think you've done another thing too, now

00:01:24.270 --> 00:01:27.710
that I say that out loud. Which is, you've been choosing

00:01:27.710 --> 00:01:30.770
these random places to start your centers as always being one

00:01:30.770 --> 00:01:32.960
of the points. I guess you didn't have to do that.

00:01:32.960 --> 00:01:33.270
&gt;&gt; Yes.

00:01:33.270 --> 00:01:35.470
&gt;&gt; But it probably helps that you do.

00:01:35.470 --> 00:01:39.480
&gt;&gt; It certainly keeps the centers near the points. Another thing you

00:01:39.480 --> 00:01:43.160
can do to get things started is just randomly assign everybody the clusters

00:01:43.160 --> 00:01:45.330
but that can often have the property that all of

00:01:45.330 --> 00:01:47.250
the senders of those clusters end up being kind of really

00:01:47.250 --> 00:01:49.640
close to each other. So, by picking points to be

00:01:49.640 --> 00:01:51.990
the clusters it does have a tendency to spread things out.

00:01:51.990 --> 00:01:52.990
&gt;&gt; Okay, that makes sense.

00:01:52.990 --> 00:01:54.275
&gt;&gt; That's not a proof, though.

00:01:54.275 --> 00:01:57.129
&gt;&gt; No, a proof by that makes sense. [LAUGH]

