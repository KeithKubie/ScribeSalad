WEBVTT
Kind: captions
Language: en

00:00:00.109 --> 00:00:03.828
Just a couple of implementation notes, and first a quick mental exercise.

00:00:03.828 --> 00:00:07.712
What happens if 2 different paths reach the same vertex at the same time?

00:00:07.712 --> 00:00:09.680
So let's consider this graph here.

00:00:09.680 --> 00:00:13.784
We're going to start at node S here, and we're going to set its depth to zero

00:00:13.784 --> 00:00:19.794
on the first iteration of our algorithm, then the depth of A will be set to 1 and the depth of B will be set to 1,

00:00:19.794 --> 00:00:26.265
but we know in the next iteration of the algorithm this edge and this edge will both try to set Cs depth.

00:00:26.265 --> 00:00:30.540
Is this a race condition? Does the result depend on which thread happens to run first?

00:00:30.540 --> 00:00:33.204
Well, fortunately no, because the algorithm is structured

00:00:33.204 --> 00:00:37.082
to always write only a singe depth value on any iteration,

00:00:37.082 --> 00:00:41.511
so if 2 threads are both trying to write to the same vertex within a single iteration,

00:00:41.511 --> 00:00:44.325
they'll always both be writing the same depth.

00:00:44.325 --> 00:00:49.618
In this case, they'll both be trying to write the value 2, so it doesn't really matter who goes first or second,

00:00:49.618 --> 00:00:53.187
because the end result, the depth of C, is going to be the same.

00:00:53.187 --> 00:00:55.458
Second, how do we know when we're done?

00:00:55.458 --> 00:00:58.668
So typically the way we're going to write this code is as follows.

00:00:58.668 --> 00:01:02.232
We're going to check a variable to see if we're done, and we're going to check that variable on the host.

00:01:02.232 --> 00:01:07.368
That variable's going to be set on the device. The kernel needs to set that variable.

00:01:07.368 --> 00:01:11.674
Then we'll copy it at the end of every iteration to the host. The host will check if we're done.

00:01:11.674 --> 00:01:13.815
If we're not done, we're going to iterate again.

00:01:13.815 --> 00:01:17.514
If we are done, then we'll fall through the loop and move on to the next code.

00:01:17.514 --> 00:01:19.648
So how do we actually set this variable?

00:01:19.648 --> 00:01:26.289
So, in this case, what we're going to do is we're going to first initialize a device variable called done to true.

00:01:26.289 --> 00:01:29.367
The way we're going to initialize it is we're going to have a variable on the host we know is true

00:01:29.367 --> 00:01:33.769
and just copy it over to the device so it's set as true at the beginning,

00:01:33.769 --> 00:01:36.999
then we're going to run our iteration, run this particular kernel,

00:01:36.999 --> 00:01:43.338
and if the kernel knows that it's not done yet, it will take this done variable and set it to false.

00:01:43.338 --> 00:01:47.484
Then, whatever the state of the done variable is, will copy it back to the host,

00:01:47.484 --> 00:01:51.908
and so the host will then know if we're complete or not and make a decision accordingly.

00:01:51.908 --> 00:01:54.818
So how are we going to actually do this on a GPU? What's inside the kernel?

00:01:54.818 --> 00:01:58.733
So this is an enhancement to the code that we just saw on the previous slide.

00:01:58.733 --> 00:02:03.149
What we're going to do is every time we set any vertex depth on the GPU,

00:02:03.149 --> 00:02:07.971
we also, alongside, set the global variable done to false

00:02:07.971 --> 00:02:13.002
so it's initialized to true if we make no changes at all in this BFS code,

00:02:13.002 --> 00:02:16.177
then it will stay true and we'll be done. But if we make any changes at all,

00:02:16.177 --> 00:02:21.316
then we'll set that global variable to false, then we will copy that false variable back to the host,

00:02:21.316 --> 00:02:23.398
and it will give us another iteration.

00:02:23.398 --> 00:02:26.357
Note that more than one thread can set done to false, but that's fine.

00:02:26.357 --> 00:02:30.484
It doesn't matter in what order these writes occur since they're all going to be the same value.

