WEBVTT
Kind: captions
Language: en

00:00:03.110 --> 00:00:06.550
Hi, I’m Adriene Hill and Welcome back to
Crash Course Statistics.

00:00:06.550 --> 00:00:12.180
Last time we left off talking about different
data visualizations. The ones we encounter every single day.

00:00:12.180 --> 00:00:15.780
Whether it’s a chart on the subway telling
us the prevalence of heart disease in different

00:00:15.820 --> 00:00:20.840
age groups, or a histogram on Buzzfeed showing us how many times people use Lyft each week.

00:00:20.840 --> 00:00:25.640
These visualizations allow us to get to know data with our eyes, and today we’ll dive

00:00:25.640 --> 00:00:30.010
deeper into data visualization and make all
sorts of beautiful graphs and talk about some

00:00:30.010 --> 00:00:36.080
really extreme situations, like the person
who watched Sandy Wexler on Netflix like 400 times.

00:00:36.080 --> 00:00:37.460
Which seems like high.

00:00:37.460 --> 00:00:46.720
INTRO

00:00:46.720 --> 00:00:51.520
Last episode we looked at histograms which
use the height of a bar to show how frequently

00:00:51.530 --> 00:00:52.720
data occur.

00:00:52.720 --> 00:00:54.809
We can also use this format to make a dot
plot.

00:00:54.809 --> 00:01:00.489
A dotplot takes a histogram, and replaces
the solid bars which use their height to show

00:01:00.489 --> 00:01:01.719
frequency... with dots.

00:01:01.719 --> 00:01:05.920
There’s one dot for each data point contained
in the bar, so we can just count the number

00:01:05.920 --> 00:01:08.580
of dots to find out how many there are.

00:01:08.580 --> 00:01:14.440
The dot plot for our olive oil data looks
like this, unsurprisingly similar to the histogram

00:01:14.440 --> 00:01:15.580
for that data.

00:01:15.580 --> 00:01:20.250
Or check out this dot plot of how often this
sample of people called their moms this month.

00:01:20.250 --> 00:01:24.450
This gives us a nice way to explore the general
shape of our data, but we still lose information

00:01:24.450 --> 00:01:28.470
about the individual data values, just like
with the histogram.

00:01:28.470 --> 00:01:31.250
Occasionally we WANT that extra information.

00:01:31.250 --> 00:01:33.000
Enter, the stem and leaf plot.

00:01:33.000 --> 00:01:35.610
A stem and leaf plot is a cousin of the dotplot.

00:01:35.610 --> 00:01:40.700
It also gives us information about data and
their frequencies by stacking objects on top

00:01:40.700 --> 00:01:41.700
of each other.

00:01:41.700 --> 00:01:45.870
However, stem and leaf plots use values from
the raw data ...instead of dots.

00:01:45.870 --> 00:01:50.390
So we’ll turn our Olive oil dot plot into
a stem and leaf plot.

00:01:50.390 --> 00:01:53.340
And no, I’m not going to explain my olive
oil fixation...

00:01:53.340 --> 00:01:57.439
First, we need to split each data value into
a stem, and a leaf.

00:01:57.440 --> 00:02:01.540
Stems are related to the “bins” or bars
in a histogram or dotplot.

00:02:01.540 --> 00:02:06.360
Take our dotplot for example: each stack
of dots might represent a range of 5oz, from

00:02:06.360 --> 00:02:12.950
0-4 oz, 5-9oz, all the way up to a bar with
all the data in the 80-84 oz range.

00:02:12.950 --> 00:02:17.320
The stem for a “bin” of data is the digits
that *all* the values in a “bin” have

00:02:17.320 --> 00:02:18.320
in common.

00:02:18.320 --> 00:02:22.620
For the 10-14 oz range, each value has a 1
at the beginning of the number so the stem

00:02:22.620 --> 00:02:23.620
is ‘1’.

00:02:23.620 --> 00:02:28.040
For the 80-84 oz range, the data all have
an “8” at the beginning, so the stem would

00:02:28.040 --> 00:02:29.040
be ‘8’.

00:02:29.040 --> 00:02:30.350
We can have larger stems too!

00:02:30.350 --> 00:02:35.770
If the data went all the way up to 2,006 oz,
we could have a stem of “2-0-0”, but that’s

00:02:35.770 --> 00:02:38.099
probably too much for our olive oil example.

00:02:38.099 --> 00:02:40.890
Now that we have all of our stems, we can
add the leaves.

00:02:40.890 --> 00:02:44.380
Each stem, like in a real plant, can have
multiple leaves.

00:02:44.380 --> 00:02:48.260
They’re stacked on top of each other so
that the height of the stack shows you how

00:02:48.260 --> 00:02:51.500
frequently data appear in that bin, just like
a dotplot.

00:02:51.500 --> 00:02:54.960
The actual “leaf” is the rest of the digits
that are not in the “stem”.

00:02:54.960 --> 00:02:58.750
If one of our data points is 13, and the “stem”
for that range is 1, that takes care of the

00:02:58.750 --> 00:03:00.709
“1”, so the leaf is “3”.

00:03:00.709 --> 00:03:05.180
Leaves appear in numerical order, from the
stem out, so leaves that are smaller digits

00:03:05.180 --> 00:03:06.690
are closer to the stem.

00:03:06.690 --> 00:03:10.360
From a distance, stem and leaf plots look
a lot like a dotplot or histogram.

00:03:10.360 --> 00:03:14.760
If you squint your eyes, the leaves almost
look like bars or dots, but unsquinting them

00:03:14.760 --> 00:03:20.200
will allow you to see even more information
than a histogram or dotplot will tell you.

00:03:20.200 --> 00:03:24.540
You get to see what the individual values
are and *how* they’re spread out within

00:03:24.540 --> 00:03:25.540
a bar.

00:03:25.540 --> 00:03:29.100
Stem and leaf plots are usually flipped on
their sides so that the stems are listed vertically

00:03:29.100 --> 00:03:31.190
and leaves extend horizontally.

00:03:31.190 --> 00:03:35.489
Here’s a stem and leaf plot of the number
of pieces of gum each of your extended family

00:03:35.489 --> 00:03:37.690
members has chewed in the last month.

00:03:37.690 --> 00:03:39.340
Now let’s talk about boxplots.

00:03:39.340 --> 00:03:45.200
Boxplots use some of our measures of central tendency and spread to visually display our data.

00:03:45.200 --> 00:03:50.660
A boxplot--is also called a “box-and-whiskers-plot”
It has two major parts: the box and the whiskers.

00:03:50.660 --> 00:03:55.000
The box is a rectangle that stretches across
the inter quartile range of our data (from

00:03:55.000 --> 00:03:56.640
Q1-Q3).

00:03:56.650 --> 00:04:00.500
At the median, there is a line splitting the
rectangle into halves.

00:04:00.500 --> 00:04:04.790
If one one of those halves is larger than
the other, that quartile is more spread out.

00:04:04.790 --> 00:04:09.569
Since each quartile has the same number of
data points, the smaller the quartile, the

00:04:09.569 --> 00:04:12.060
less spread out that portion of the data is.

00:04:12.060 --> 00:04:16.030
Imagine the difference between fitting 20
clowns in a car and fitting 20 clowns in a

00:04:16.030 --> 00:04:17.950
regulation sized football field.

00:04:17.950 --> 00:04:20.609
Same number of “clowns”, more space to
make balloon animals.

00:04:20.609 --> 00:04:24.979
Attached to either end of this box are the
whiskers-- which help show the minimum and

00:04:24.979 --> 00:04:30.330
maximum of all the data, as long as it's within
one and a half times the Interquartile range

00:04:30.330 --> 00:04:31.419
of the median.

00:04:31.419 --> 00:04:32.979
This value sets our “fences.”

00:04:32.979 --> 00:04:38.379
We use one and a half times the InterQuartile
Range because *most* of the data will be within

00:04:38.380 --> 00:04:42.060
this range, especially if your data is normally
distributed.

00:04:42.060 --> 00:04:44.219
We’ll get into this more in future episodes.

00:04:44.219 --> 00:04:49.089
Most of the data will be inside the fences--
any data outside is flagged as a potential

00:04:49.089 --> 00:04:50.539
“outlier”.

00:04:50.539 --> 00:04:54.009
It can be tempting to think of outliers as
data that’s “wrong” somehow, but that’s

00:04:54.009 --> 00:04:55.520
not always the case.

00:04:55.520 --> 00:04:59.770
Values outside the fences are less likely
than data near the boxplot, but they’re

00:04:59.770 --> 00:05:01.159
not impossible.

00:05:01.159 --> 00:05:06.029
For example, It’s pretty unlikely that if
you dial random numbers into your phone you’ll

00:05:06.029 --> 00:05:08.500
call is a Domino’s Pizza, but it is possible.

00:05:08.500 --> 00:05:09.779
Rare values do happen.

00:05:09.779 --> 00:05:13.830
Keeping these rare-but-possible values can
be important.

00:05:13.830 --> 00:05:17.990
When the local news shows you a boxplot of
local rents and decides that the bottom 1000

00:05:17.990 --> 00:05:22.360
rent values are “outliers”, the graph
they display could be misleading.

00:05:22.360 --> 00:05:25.349
Those rents are real values that you could
expect.

00:05:25.349 --> 00:05:29.389
Taking them out will make your visualization
less informative, and might lead you to think

00:05:29.389 --> 00:05:32.490
that the average rent is higher than it actually
is.

00:05:32.490 --> 00:05:36.939
However, some values that are flagged as “outliers”
may not be expected in your data at all.

00:05:36.939 --> 00:05:40.750
Perhaps Neymar snuck into your amateur pick-up
soccer game without you knowing.

00:05:40.750 --> 00:05:45.599
His off-the-charts-agility-scores are not
representative of the population you are interested

00:05:45.599 --> 00:05:48.340
in since he is Neymar...not an amateur.

00:05:48.340 --> 00:05:52.669
Or maybe you made a typo in your spreadsheet
and wrote 500 pounds instead of 5 pounds for

00:05:52.669 --> 00:05:55.419
your data on the weights of pet teacup pigs.

00:05:55.420 --> 00:05:57.600
That’d be a giant teacup… pig.

00:05:57.600 --> 00:06:03.420
The problem is you may not always know the difference between a point that’s valid-but-rare and one that’s

00:06:03.420 --> 00:06:04.280
a mistake.

00:06:04.280 --> 00:06:09.060
Since we still need a way to decide, it is
useful to have a pre-set cut-off for when

00:06:09.069 --> 00:06:10.139
we discard data .

00:06:10.139 --> 00:06:14.580
To see how boxplots can help us look for these
outliers and compare data from two samples,

00:06:14.580 --> 00:06:16.339
Let’s jump to the Thought Bubble.

00:06:16.339 --> 00:06:18.199
Justin Timberlake has a new album.

00:06:18.199 --> 00:06:21.929
This American born singer and songwriter has
had quite the career.

00:06:21.929 --> 00:06:24.050
I mean, he did bring sexy back.

00:06:24.050 --> 00:06:28.749
Our writer, Chelsea wanted wanted to know
how going solo affected the songs he wrote,

00:06:28.749 --> 00:06:32.929
specifically, the number of unique words he
used per song.

00:06:32.929 --> 00:06:38.020
To satisfy her curiosity she made a boxplot
for a sample of Justin Timberlake’s songs

00:06:38.020 --> 00:06:42.740
once he’d gone solo, and one for a sample
of songs he sang with *N’SYNC.

00:06:42.740 --> 00:06:46.099
The first thing we might notice, is that the
medians-are pretty different.

00:06:46.099 --> 00:06:50.860
The median number of unique words in a Justin
Timberlake song is higher than the median

00:06:50.860 --> 00:06:53.309
number of unique words in an *N’SYNC song!

00:06:53.309 --> 00:06:59.949
JT has a median of 129 words vs a median of
89 back in his *N’SYNC days.

00:06:59.949 --> 00:07:04.139
Guess we shouldn’t be surprised coming from
a band that had a song titled “Bye Bye Bye.”

00:07:04.139 --> 00:07:09.629
So it seems like JT may have developed a larger
lyrical vocabulary when he went solo.

00:07:09.629 --> 00:07:11.449
...Maybe Lance Bass was holding him back…

00:07:11.449 --> 00:07:17.240
Anyway...you might also notice that the box
part of the *N’SYNC boxplot is a lot smaller.

00:07:17.240 --> 00:07:22.599
The squished nature of the boxplot shows us
that *N’SYNC songs have a relatively similar

00:07:22.599 --> 00:07:24.159
amount of unique words.

00:07:24.159 --> 00:07:28.639
The boxplot also shows you some potential
outliers to look at, shown by the points that

00:07:28.639 --> 00:07:30.639
are outside the fences of our boxplot.

00:07:30.640 --> 00:07:34.780
Let’s look at a song that’s marked as
a potential outlier in the Justin Timberlake

00:07:34.780 --> 00:07:35.500
Boxplot.

00:07:35.500 --> 00:07:41.420
The song is “Chop Me Up” and it has 257
unique words which is a lot, since the median

00:07:41.440 --> 00:07:45.560
number of unique words for a JT song is 129.

00:07:45.560 --> 00:07:47.800
It’s definitely outside the fences.

00:07:47.809 --> 00:07:48.809
Thanks Thoughtbubble.

00:07:48.809 --> 00:07:51.849
We don’t want to throw out data just because
it is extreme.

00:07:51.849 --> 00:07:56.249
And Chop Me Up isn’t part of some super-experimental
Christmas album... so it’s hard to tell

00:07:56.249 --> 00:07:58.589
if this is a valid data point.

00:07:58.589 --> 00:08:02.120
To get around this uncertainty, we apply our
pre-set rule.

00:08:02.120 --> 00:08:06.590
There isn’t one set rule for handling these
extreme values, there are many.

00:08:06.590 --> 00:08:10.239
For now, we’ll use our boxplot method, and
get rid of the “Chop Me Up” data because

00:08:10.239 --> 00:08:11.819
it’s outside the fences .

00:08:11.819 --> 00:08:14.469
Remember, statistics is all about uncertainty.

00:08:14.469 --> 00:08:19.439
I’m not sure if the number of unique words
in Chop Me Up is just a rare value, or whether

00:08:19.439 --> 00:08:22.979
it’s the lyrical equivalent of Neymar in
a pick-up soccer game.

00:08:22.979 --> 00:08:24.709
We still have to make decisions.

00:08:24.709 --> 00:08:29.160
For all the Nerdfighters out there, you may
have heard of Hank’s annual Nerdfighteria Census.

00:08:29.160 --> 00:08:33.560
And while you’re interested in taking it,
you may wonder how long it takes to fill out...you

00:08:33.560 --> 00:08:38.760
don’t have all day...so you use your new
data viz skills to create a boxplot of the

00:08:38.769 --> 00:08:40.610
data...and wahwhah.

00:08:40.610 --> 00:08:45.079
I can’t even see the box or the whiskers
through all those extreme values--it looks

00:08:45.079 --> 00:08:50.230
like some Nerdfighters were very thorough...or
very distracted by other things.

00:08:50.230 --> 00:08:52.579
8000 minutes is 133 hours.

00:08:52.579 --> 00:08:57.381
This plot isn’t wrong….per se...but it’s
not very informative since we can’t get

00:08:57.381 --> 00:08:59.769
much useful information from it.

00:08:59.769 --> 00:09:04.190
We don’t have any better idea of how long
it’s gonna take to fill out Hank’s survey.

00:09:04.190 --> 00:09:08.560
When you make or see a data visualization
it’s important to remember that its job

00:09:08.560 --> 00:09:10.090
is to actually give you information.

00:09:10.090 --> 00:09:12.640
If it doesn’t do that, its not worthwhile.

00:09:12.640 --> 00:09:17.509
Now, let’s go back to frequency plots and
talk about one last method for visualizing

00:09:17.509 --> 00:09:21.370
quantitative data: the cumulative frequency
plot.

00:09:21.370 --> 00:09:24.699
Cumulative Frequency Plots are like histograms
but instead of the height of a bar telling

00:09:24.699 --> 00:09:29.699
you how much data is in that specific bin,
it tells you how much data is in that bin

00:09:29.699 --> 00:09:31.379
AND all previous bins.

00:09:31.380 --> 00:09:33.250
That’s why it’s called “cumulative.”

00:09:33.250 --> 00:09:37.220
It’s the frequency of all the points we’ve
accumulated up to this point.

00:09:37.220 --> 00:09:40.820
It’s like a small fish getting eaten by
a bigger fish, which gets eaten by an even

00:09:40.829 --> 00:09:42.760
bigger fish, and so on.

00:09:42.760 --> 00:09:44.750
Each fish is now full of the fish it ate.

00:09:44.750 --> 00:09:46.459
And the fish that fish ate.

00:09:46.459 --> 00:09:47.459
And side note.

00:09:47.459 --> 00:09:52.779
Your odds of being killed by a shark--are
about one in 3 point 7 million.

00:09:52.779 --> 00:09:56.879
Back to our cumulative frequency plots...
these plots have their moment to shine when

00:09:56.879 --> 00:10:03.020
we want to answer a question like “How many
JT songs have 160 unique words or fewer?”

00:10:03.020 --> 00:10:05.540
The cumulative frequency plot looks like this:

00:10:05.540 --> 00:10:07.459
Here’s the bar that answers our question.

00:10:07.459 --> 00:10:12.181
We could also get this information by counting
all the songs in the bars that are 160 or

00:10:12.181 --> 00:10:15.120
less on our histogram, but that’s more work.

00:10:15.120 --> 00:10:19.160
Now that we’ve seen some good graphs and
some bad, we can apply our newfound knowledge

00:10:19.160 --> 00:10:22.300
anytime we see data visualizations...which
will be all the time.

00:10:22.300 --> 00:10:23.399
“This I Promise You”.

00:10:23.400 --> 00:10:25.280
I mean...like... "until the End of Time".

00:10:25.300 --> 00:10:29.540
On the bus, in your health app, or during
your bosses annual company-wide meeting, you’ll

00:10:29.540 --> 00:10:33.000
know that graphs are only as good as the information
they communicate.

00:10:33.000 --> 00:10:34.959
If you see a bad graph out there.

00:10:34.959 --> 00:10:36.420
“Say Something” Ask questions.

00:10:36.420 --> 00:10:37.579
Be skeptical.

00:10:37.579 --> 00:10:41.240
I’m coining a new DFTBA today: DFTBAQ.

00:10:41.280 --> 00:10:44.880
Don’t forget to be asking questions… it’s
another way of being awesome.

00:10:44.880 --> 00:10:47.680
“I Want it that way” The world wants it
that way.

00:10:47.760 --> 00:10:51.680
And remember...it’s not just gonna be you…”it’s
gonna be me” too.

00:10:51.680 --> 00:10:54.460
Allright. I’m “Gone” See you next time.

00:10:54.500 --> 00:10:56.940
And yeah, I know "I want it that way"was Backstreet Boys.

