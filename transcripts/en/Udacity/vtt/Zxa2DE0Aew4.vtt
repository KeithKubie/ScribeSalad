WEBVTT
Kind: captions
Language: en

00:00:00.160 --> 00:00:04.270
Now let's look at the relationship
between SMT, data cache, and TLB.

00:00:04.270 --> 00:00:08.230
If we have a virtual index
virtually tagged cache,

00:00:08.230 --> 00:00:12.490
then we simply send the virtual
address into the cache and

00:00:12.490 --> 00:00:14.840
use the data that comes
out of the cache.

00:00:14.840 --> 00:00:18.500
So with virtual index virtually tagged
cache is the problem is that our two

00:00:18.500 --> 00:00:21.350
transmitters might have
different other spaces.

00:00:21.350 --> 00:00:24.870
And now we are sending them
simultaneously to the cache.

00:00:24.870 --> 00:00:28.840
The cache has no clue which
one of the two it's getting.

00:00:28.840 --> 00:00:32.619
So, unless we make something really
complicated here to figure out

00:00:32.619 --> 00:00:36.640
which is which, we will have some
alias in between the two threads.

00:00:36.640 --> 00:00:41.350
Note that, normally with the VIVT cache,
when we switch

00:00:41.350 --> 00:00:45.830
between threads in a coarse grain we
would flush the cache between that, but

00:00:45.830 --> 00:00:49.550
now that the two threads can pretty
much every cycle you're getting one or

00:00:49.550 --> 00:00:52.780
the other, we cannot flush
the cache in between those.

00:00:52.780 --> 00:00:56.969
So with the virtual index virtually
tagged cache, we are running a real risk

00:00:56.969 --> 00:01:00.960
of getting the wrong data because
the same address in the two threads that

00:01:00.960 --> 00:01:05.282
are accessing the cache, pretty much
alternatingly in a very haphazard way,

00:01:05.282 --> 00:01:07.793
might map to different
physical addresses.

00:01:07.793 --> 00:01:12.019
But the data cache doesn't know that,
so one thread saves data to its stack,

00:01:12.019 --> 00:01:14.112
another one pops data from its stack.

00:01:14.112 --> 00:01:18.211
And if they're at the same virtual
address, we get the data forwarded from

00:01:18.211 --> 00:01:21.270
one thread to the other
which we didn't want.

00:01:21.270 --> 00:01:25.588
If we use a virtual index physically
tagged cache that avoids aliasing,

00:01:25.588 --> 00:01:26.830
then we are fine.

00:01:26.830 --> 00:01:29.920
We'll find the set in the cache and

00:01:29.920 --> 00:01:34.990
the physical tags that come out will
be compared with those from the TLB.

00:01:34.990 --> 00:01:37.540
So assuming that the TLB does
what it is supposed to do,

00:01:37.540 --> 00:01:40.420
we will have the same virtual
address from the two threads.

00:01:40.420 --> 00:01:41.727
Look at the same set, but

00:01:41.727 --> 00:01:45.910
find different data based on
the physical address in that thread.

00:01:45.910 --> 00:01:50.100
However, that assumes that when we use
a virtual address to access the TLB,

00:01:50.100 --> 00:01:55.140
it doesn't look at just the page
number in the virtual address.

00:01:55.140 --> 00:01:57.710
Because the two threads could
have the same page number

00:01:57.710 --> 00:01:59.580
translate to different things.

00:01:59.580 --> 00:02:03.750
So for virtual index physically tagged,
or physical index physically tagged

00:02:03.750 --> 00:02:09.508
caches, the cache is just fine,
but the TLB must be thread-aware.

00:02:09.508 --> 00:02:13.240
That can be done by adding
the single bit to each entry

00:02:13.240 --> 00:02:17.340
that tells us which of the two
threads is this mapping for.

00:02:17.340 --> 00:02:20.340
In that way, indexing into the TLB

00:02:20.340 --> 00:02:25.640
with a virtual address will find a set
in the TLB, that has multiple entries.

00:02:25.640 --> 00:02:29.150
And we will only be looking at
the entries that both match our virtual

00:02:29.150 --> 00:02:32.530
page number, and
also match our thread ID.

00:02:32.530 --> 00:02:36.790
So we will now send the page number and
also the thread ID here.

00:02:36.790 --> 00:02:42.080
And the TLB needs to match both before
it treats this as a TLB hit and

00:02:42.080 --> 00:02:43.730
produces the physical address here.

