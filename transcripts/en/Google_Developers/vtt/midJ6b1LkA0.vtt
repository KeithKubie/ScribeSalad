WEBVTT
Kind: captions
Language: en

00:00:01.000 --> 00:00:02.740
You just built a web app.

00:00:02.740 --> 00:00:05.940
And suddenly, it becomes
an overnight success.

00:00:05.940 --> 00:00:09.190
Now, you find yourself
struggling to scale it.

00:00:09.190 --> 00:00:11.950
We at YouTube face
the same problems.

00:00:11.950 --> 00:00:15.410
I'm Sugu, and I'm going to
talk about how we solve them,

00:00:15.410 --> 00:00:19.280
specifically about storage,
which is the hardest part.

00:00:19.280 --> 00:00:21.050
On top of this, we
also open sourced

00:00:21.050 --> 00:00:23.050
the project named Vitess.

00:00:23.050 --> 00:00:26.020
So you can also use
it for yourself.

00:00:26.020 --> 00:00:27.420
Vitess is written in Go.

00:00:27.420 --> 00:00:29.460
And since Go is an
upcoming language,

00:00:29.460 --> 00:00:33.680
I'll also talk about how
that worked out for us.

00:00:33.680 --> 00:00:37.050
When YouTube was first built,
we started out very simple.

00:00:37.050 --> 00:00:39.360
We had just one database.

00:00:39.360 --> 00:00:42.040
Then our QPS started going up.

00:00:42.040 --> 00:00:46.220
So we added replicas and sent
some of our retraffic there.

00:00:46.220 --> 00:00:48.360
That kept us going for a bit.

00:00:48.360 --> 00:00:51.230
Then, we ran out
of write capacity.

00:00:51.230 --> 00:00:53.130
What you do now?

00:00:53.130 --> 00:00:56.400
That's when we figured out
how to shadow databases.

00:00:56.400 --> 00:00:59.170
Once we did this, we
thought we had arrived.

00:00:59.170 --> 00:01:02.942
That's when someone came
and asked, what about DR?

00:01:02.942 --> 00:01:05.079
I was like DR, what is that?

00:01:05.079 --> 00:01:05.579
OK.

00:01:05.579 --> 00:01:06.079
OK.

00:01:06.079 --> 00:01:08.850
We'll work on disaster recovery.

00:01:08.850 --> 00:01:11.420
Once we took care of that
and a few other requirements,

00:01:11.420 --> 00:01:13.090
we ended up with
something like this.

00:01:13.090 --> 00:01:16.050
And at this point, we
had created more problems

00:01:16.050 --> 00:01:17.256
than we had solved.

00:01:17.256 --> 00:01:20.860
With these many servers, the
problems just multiplied.

00:01:20.860 --> 00:01:23.770
The simple operations become
complex and error prone,

00:01:23.770 --> 00:01:26.600
and things start to
fail all the time.

00:01:26.600 --> 00:01:29.690
And at the same time, the
number of developers went up.

00:01:29.690 --> 00:01:32.170
And every push, we
had some toxic query

00:01:32.170 --> 00:01:35.760
that would keep taking the
database down or the other.

00:01:35.760 --> 00:01:37.880
So this is how Vitess was born.

00:01:37.880 --> 00:01:39.430
We had three goals.

00:01:39.430 --> 00:01:43.050
One was to automate
maintenance tasks.

00:01:43.050 --> 00:01:45.390
Two is to write a
query mediator that

00:01:45.390 --> 00:01:47.780
will protect the databases
from bad elements.

00:01:47.780 --> 00:01:51.020
And three, make it
such that this big farm

00:01:51.020 --> 00:01:54.040
appears as one single database.

00:01:54.040 --> 00:01:57.340
So how did we architect
Vitess to achieve these goals?

00:01:57.340 --> 00:02:00.340
The first thing we did was
to write a proxy server that

00:02:00.340 --> 00:02:02.400
will mediate queries to MySQL.

00:02:02.400 --> 00:02:04.490
We called it vttablet.

00:02:04.490 --> 00:02:06.390
It actually does some
pretty cool stuff.

00:02:06.390 --> 00:02:10.199
I'll give you a glimpse of
what it can do in a moment.

00:02:10.199 --> 00:02:12.430
Then we built this
topology cloud.

00:02:12.430 --> 00:02:16.230
It's basically a lock server to
keep track of all our servers.

00:02:16.230 --> 00:02:18.110
It's the one link.

00:02:18.110 --> 00:02:20.010
For open source,
we used ZooKeeper,

00:02:20.010 --> 00:02:22.370
and internally, we used Chubby.

00:02:22.370 --> 00:02:25.620
And using this, we took
control of common workflows,

00:02:25.620 --> 00:02:28.120
like taking servers in
and out of rotation,

00:02:28.120 --> 00:02:31.100
master failover, et cetera.

00:02:31.100 --> 00:02:33.410
And finally, we
built vtgate, which

00:02:33.410 --> 00:02:36.240
is the main server that
the apps connect to.

00:02:36.240 --> 00:02:38.190
This server makes
all the databases

00:02:38.190 --> 00:02:40.140
look like a collective whole.

00:02:40.140 --> 00:02:43.080
Internally, what it does
is to use the pathology

00:02:43.080 --> 00:02:46.410
to figure out where to send the
query, which will eventually

00:02:46.410 --> 00:02:50.700
reach the vttablet where
the actual work is done.

00:02:50.700 --> 00:02:54.600
So what does this proxy called
vttablet do that is so awesome?

00:02:54.600 --> 00:02:57.440
So the first thing it does
is connection pulling.

00:02:57.440 --> 00:03:00.370
The cost of a MySQL connection
is around two megabytes.

00:03:00.370 --> 00:03:03.480
And imagine how much this
would be with tens of thousands

00:03:03.480 --> 00:03:04.690
of connections.

00:03:04.690 --> 00:03:06.710
And if your app
becomes popular, this

00:03:06.710 --> 00:03:09.270
is the kind of
demand you'll see.

00:03:09.270 --> 00:03:11.220
The second thing
that vttablet does

00:03:11.220 --> 00:03:15.520
is to have its own cache,
also known as the rowcache.

00:03:15.520 --> 00:03:18.730
See, MySQL's buffer cache works
well for full table scans,

00:03:18.730 --> 00:03:20.610
because it reads data in blocks.

00:03:20.610 --> 00:03:23.260
But this is not very
efficient for random access

00:03:23.260 --> 00:03:25.605
reads that fetch one
row at a time, which

00:03:25.605 --> 00:03:28.600
are typical of
mobile and web apps.

00:03:28.600 --> 00:03:31.610
So what vttablet does
is to store such rows

00:03:31.610 --> 00:03:32.820
in its own cache.

00:03:32.820 --> 00:03:35.050
And any subsequent
reads are first

00:03:35.050 --> 00:03:37.930
checked with vttablet's
rowcache before deciding

00:03:37.930 --> 00:03:40.230
to send the query to MySQL.

00:03:40.230 --> 00:03:42.380
And depending on
your usage present,

00:03:42.380 --> 00:03:43.880
the rowcache could
give you an order

00:03:43.880 --> 00:03:47.830
of magnitude increase in
your serving capacity.

00:03:47.830 --> 00:03:50.760
Vttablet has more
optimizations, like for example,

00:03:50.760 --> 00:03:53.860
if a query is executing,
and other identical requests

00:03:53.860 --> 00:03:56.870
come in, it just holds
off on those requests

00:03:56.870 --> 00:03:59.292
until the existing
query has returned.

00:03:59.292 --> 00:04:01.250
Then, it returns that
result to all the queries

00:04:01.250 --> 00:04:02.710
that are waiting on this.

00:04:02.710 --> 00:04:06.126
And you'd be surprised at
how often this happens.

00:04:06.126 --> 00:04:08.000
There are many other
safeguards that vttablet

00:04:08.000 --> 00:04:10.490
lets you customize like
blacklisting queries,

00:04:10.490 --> 00:04:13.070
or limiting the number of
rows a query can fetch.

00:04:13.070 --> 00:04:16.500
You can see the full list
on our documentation.

00:04:16.500 --> 00:04:18.709
And finally, there's
the stats module

00:04:18.709 --> 00:04:20.640
that exports all kinds
of info about what's

00:04:20.640 --> 00:04:22.410
going on inside vttablet.

00:04:22.410 --> 00:04:24.440
Our [? SRAs ?] just love this.

00:04:24.440 --> 00:04:28.450
Speaking of which, how is
Vitess performing at YouTube?

00:04:28.450 --> 00:04:31.180
Well, it's been serving
YouTube's MySQL traffic

00:04:31.180 --> 00:04:32.870
since 2011.

00:04:32.870 --> 00:04:35.120
And the first problem we
solved was the growing number

00:04:35.120 --> 00:04:36.790
of connections.

00:04:36.790 --> 00:04:39.360
Our servers now handle tens
of thousands of connections,

00:04:39.360 --> 00:04:42.270
and we serve hundreds
of thousands of QPS,

00:04:42.270 --> 00:04:43.980
and all of this
at low client side

00:04:43.980 --> 00:04:46.990
latency of three to
five milliseconds.

00:04:46.990 --> 00:04:51.670
So in short, Vitess is high
performance, scalable, storage

00:04:51.670 --> 00:04:52.870
system.

00:04:52.870 --> 00:04:55.610
Let's see how it's positioned
compared to other products.

00:04:55.610 --> 00:04:57.690
On one side, we have
the relational databases

00:04:57.690 --> 00:05:00.630
that give you rich functionality
and data guarantees,

00:05:00.630 --> 00:05:03.320
but they don't
scale out very well.

00:05:03.320 --> 00:05:05.270
And on the other
end of the spectrum,

00:05:05.270 --> 00:05:08.670
we have the NoSQL solutions
that give you good scalability,

00:05:08.670 --> 00:05:11.940
but they're not strong on
data guarantees, et cetera.

00:05:11.940 --> 00:05:14.195
So what Vitess does
is to push MySQL

00:05:14.195 --> 00:05:17.080
a little closer to
the NoSQL datastores

00:05:17.080 --> 00:05:19.430
by supporting sharding
and replication.

00:05:19.430 --> 00:05:21.560
And along the way we
make some trade offs

00:05:21.560 --> 00:05:24.140
on transactions and
data consistencies.

00:05:24.140 --> 00:05:27.740
And this allows us to scale
just like NoSQL datastores

00:05:27.740 --> 00:05:29.990
while still maintaining some
of the cool functionality

00:05:29.990 --> 00:05:32.640
that relational
databases give us.

00:05:32.640 --> 00:05:36.190
So this kind summarizes
what Vitess is about.

00:05:36.190 --> 00:05:37.790
I'm going to switch
gears now and talk

00:05:37.790 --> 00:05:40.390
a bit about our
experience with Go.

00:05:40.390 --> 00:05:43.420
We evaluated Go
in late 2010 when

00:05:43.420 --> 00:05:45.570
Vitess was just being conceived.

00:05:45.570 --> 00:05:47.980
And the main reasons why
we decided to use Go,

00:05:47.980 --> 00:05:51.660
well, that one, we liked how
the Go team approached problems.

00:05:51.660 --> 00:05:54.930
While everyone else was
fascinated with complexity,

00:05:54.930 --> 00:05:58.270
we found that they were actually
trying to simplify things.

00:05:58.270 --> 00:06:00.170
And this was refreshing.

00:06:00.170 --> 00:06:03.950
And two, we had confidence
in their ability to execute.

00:06:03.950 --> 00:06:07.500
And other than this, we kind
of just like those features.

00:06:07.500 --> 00:06:09.740
In reality, the true
awesomeness of the language

00:06:09.740 --> 00:06:13.610
is something we realized
much later along the way.

00:06:13.610 --> 00:06:17.320
So how does Go stack
up against C++.

00:06:17.320 --> 00:06:18.960
If you're looking
at raw performance,

00:06:18.960 --> 00:06:22.460
C++ will almost always win.

00:06:22.460 --> 00:06:24.310
But then there are
other considerations.

00:06:24.310 --> 00:06:28.500
Like in my experience, once
a server is deemed viable,

00:06:28.500 --> 00:06:30.890
people want it to
just do more and more.

00:06:30.890 --> 00:06:34.040
And with language like
C++, the code tends to lose

00:06:34.040 --> 00:06:36.190
maintainability as it grows.

00:06:36.190 --> 00:06:38.120
And even if you're
a good programmer,

00:06:38.120 --> 00:06:41.150
it becomes increasingly harder
to keep it maintainable.

00:06:41.150 --> 00:06:46.000
And it starts to take longer and
longer to produce new features.

00:06:46.000 --> 00:06:49.450
We haven't seen this happen with
Go yet, and at the same time,

00:06:49.450 --> 00:06:52.160
Go's performance is
pretty close to C++.

00:06:52.160 --> 00:06:57.070
And this makes Go a better
choice than C++ for most cases.

00:06:57.070 --> 00:06:58.760
How about Python?

00:06:58.760 --> 00:07:01.130
Python's expressibility
is amazing.

00:07:01.130 --> 00:07:05.060
And with Python, you can do
with statements, custom list

00:07:05.060 --> 00:07:08.940
comprehensions, function
decorators, and much more.

00:07:08.940 --> 00:07:10.620
But these are great
only if you want

00:07:10.620 --> 00:07:13.050
to write like 100 or
500 line program that

00:07:13.050 --> 00:07:15.132
performs a quick task for you.

00:07:15.132 --> 00:07:17.090
What if you want to write
hundreds of thousands

00:07:17.090 --> 00:07:20.210
of lines of code
using many engineers?

00:07:20.210 --> 00:07:22.800
Then, you start running into
a whole class of problems

00:07:22.800 --> 00:07:24.600
you haven't thought of before.

00:07:24.600 --> 00:07:26.510
There is this lack of formalism.

00:07:26.510 --> 00:07:28.400
When you write a
function in Python,

00:07:28.400 --> 00:07:31.810
there's no easy way to tell
what those parameters should be.

00:07:31.810 --> 00:07:33.560
There's a testability problem.

00:07:33.560 --> 00:07:35.300
It's very hard to
prove to yourself

00:07:35.300 --> 00:07:38.760
that a program will not
blow up once it goes live.

00:07:38.760 --> 00:07:40.850
And at the end of
the day, Python

00:07:40.850 --> 00:07:42.210
is an interpreted language.

00:07:42.210 --> 00:07:45.050
It eats a lot of CPU.

00:07:45.050 --> 00:07:48.340
So Go fills a
unique gap for those

00:07:48.340 --> 00:07:51.600
seeking to write high
performance servers.

00:07:51.600 --> 00:07:54.040
It's fast enough that
performance is not a concern,

00:07:54.040 --> 00:07:56.800
and at the same time
it's expressible enough

00:07:56.800 --> 00:07:59.800
that you can grow your server
functionality without losing

00:07:59.800 --> 00:08:03.100
maintainability and readability.

00:08:03.100 --> 00:08:05.566
So this is a very brief
presentation of Vitess and Go.

00:08:05.566 --> 00:08:06.940
If you want more
information, you

00:08:06.940 --> 00:08:09.350
can follow the
links provided here.

00:08:09.350 --> 00:08:11.530
Vitess is still under
active development,

00:08:11.530 --> 00:08:14.120
but most of its core
features are done.

00:08:14.120 --> 00:08:15.390
The project is open sourced.

00:08:15.390 --> 00:08:18.660
And you should be able to
download it and give it a try.

00:08:18.660 --> 00:08:21.400
We are behind on documentation,
but you can always

00:08:21.400 --> 00:08:22.780
contact us if you need help.

00:08:22.780 --> 00:08:24.820
And we are very eager.

00:08:24.820 --> 00:08:28.090
Thank you for listening
and happy hacking.

