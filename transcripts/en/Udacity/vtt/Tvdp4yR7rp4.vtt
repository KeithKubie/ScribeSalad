WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.000
The best option is the second one.

00:00:03.000 --> 00:00:05.000
The problem with the first option is that it doesn't provide

00:00:05.000 --> 00:00:08.000
the unpredictability property that we need.

00:00:08.000 --> 00:00:13.000
If an attacker knows X_0, they can easily compute X_1.

00:00:13.000 --> 00:00:17.000
And that's a property our pseudo-random number generator needs to have.

00:00:17.000 --> 00:00:20.000
The third option seems reasonable.

00:00:20.000 --> 00:00:23.000
It requires a lot of randomness in the pool.

00:00:23.000 --> 00:00:26.000
But if we have that much randomness in the pool--to extract

00:00:26.000 --> 00:00:28.000
a new random value for each random output--

00:00:28.000 --> 00:00:30.000
we should just use that.

00:00:30.000 --> 00:00:32.000
If we do have enough randomness for this

00:00:32.000 --> 00:00:34.000
there's no reason for all these other steps.

00:00:34.000 --> 00:00:38.000
We should just extract something for the random pool each time.

00:00:38.000 --> 00:00:43.000
We're not able to do this--we're assuming we don't have enough randomness

00:00:43.000 --> 00:00:47.000
to do that. So we're using things that aren't actually random here

00:00:47.000 --> 00:00:51.000
if we're extracting them from the random pool more quickly

00:00:51.000 --> 00:00:54.000
than we're actually able to produce new randomness here.

00:00:54.000 --> 00:00:57.000
It's doing a lot of extra work, but it's eventually starrting to use values

00:00:57.000 --> 00:01:00.000
that are not random as the inputs to our encrypt.

00:01:00.000 --> 00:01:04.000
And if those values are predictable, well then the outputs become predictable, too.

00:01:04.000 --> 00:01:08.000
So that doesn't work--so the best solution is this middle one

00:01:08.000 --> 00:01:12.000
where we're extracting the seed once, we're reusing that seed,

00:01:12.000 --> 00:01:16.000
and we're encrypting a sequence of values which is--can just be a counter--

00:01:16.000 --> 00:01:19.000
and each time using the output of that encryption.

