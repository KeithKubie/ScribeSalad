WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:05.251
[MUSIC PLAYING]

00:00:05.251 --> 00:00:06.000
SACHIT MISHRA: Hi.

00:00:06.000 --> 00:00:07.830
I'm Sachit Mishra,
and today I'm going

00:00:07.830 --> 00:00:11.460
to show you how fast and easy it
is to build apps for the Google

00:00:11.460 --> 00:00:14.730
Assistant using API.AI
These apps can be used

00:00:14.730 --> 00:00:17.100
by anyone with access to
the assistant on Google

00:00:17.100 --> 00:00:19.350
Home and eligible
mobile devices.

00:00:19.350 --> 00:00:21.300
For this video, I'll
build an assistant app

00:00:21.300 --> 00:00:23.100
similar to the one
used in our Facts

00:00:23.100 --> 00:00:25.500
about Google sample
hosted on GitHub.

00:00:25.500 --> 00:00:27.390
The Facts about
Google sample works

00:00:27.390 --> 00:00:30.240
by telling the user facts
about either Google's history

00:00:30.240 --> 00:00:33.060
or its headquarters,
whichever the user prefers.

00:00:33.060 --> 00:00:34.590
But once we're
finished here, you

00:00:34.590 --> 00:00:37.260
can go to our developer site
to build out the sample further

00:00:37.260 --> 00:00:39.900
and insert your own facts with
whatever you know a lot about,

00:00:39.900 --> 00:00:42.150
like cats or knitting.

00:00:42.150 --> 00:00:44.490
Let's go to the API.AI tool,
and I'll show you the steps

00:00:44.490 --> 00:00:46.140
to build this from scratch.

00:00:46.140 --> 00:00:48.480
First, let's log in
to the Actions console

00:00:48.480 --> 00:00:50.430
and click Add a Project.

00:00:50.430 --> 00:00:53.400
We'll give it some name, and
a new project is created.

00:00:53.400 --> 00:00:55.470
The Actions console
is the starting point

00:00:55.470 --> 00:00:57.360
for any new assistant app.

00:00:57.360 --> 00:00:59.430
It lets us choose our
tools for development,

00:00:59.430 --> 00:01:02.412
gives us access to analytics
and testing utilities,

00:01:02.412 --> 00:01:04.620
and provides the forms to
enter the directory listing

00:01:04.620 --> 00:01:06.570
information about the app.

00:01:06.570 --> 00:01:09.540
Here we're given the option
of either using API.AI

00:01:09.540 --> 00:01:12.720
or the raw Actions
SDK with our own NLA,

00:01:12.720 --> 00:01:15.770
or Natural Language
Understanding solution.

00:01:15.770 --> 00:01:19.800
Let's choose API.AI
We're logged into API.AI,

00:01:19.800 --> 00:01:22.080
and an agent has
been created for us.

00:01:22.080 --> 00:01:26.790
An API.AI agent is an NLU module
for your product or service.

00:01:26.790 --> 00:01:30.580
The term agent in API.AI
maps to an app for assistant.

00:01:30.580 --> 00:01:32.350
So for the purpose
of this video,

00:01:32.350 --> 00:01:34.830
consider them to mean
one and the same.

00:01:34.830 --> 00:01:38.520
After creating the agent, we
are taken to the Intents screen.

00:01:38.520 --> 00:01:41.220
Intents and entities
are two main concepts

00:01:41.220 --> 00:01:43.380
important to creating
interaction scenarios

00:01:43.380 --> 00:01:45.150
in API.AI.

00:01:45.150 --> 00:01:48.690
Intents are entry points into
the conversation and map what

00:01:48.690 --> 00:01:51.210
a user says to what your
conversational experience

00:01:51.210 --> 00:01:52.882
should say or do.

00:01:52.882 --> 00:01:54.840
There might be many
different ways for the user

00:01:54.840 --> 00:01:56.940
to say one thing they
want, but they should all

00:01:56.940 --> 00:02:01.290
resolve to one type of response
determined by a single intent.

00:02:01.290 --> 00:02:03.360
A conversation will be
made up of many back

00:02:03.360 --> 00:02:06.930
and forth turns in which each
of the user's responses maps

00:02:06.930 --> 00:02:09.080
to an intent.

00:02:09.080 --> 00:02:11.785
Notice that our app already
has a default fallback intent.

00:02:11.785 --> 00:02:13.910
This will be triggered when
the user says something

00:02:13.910 --> 00:02:15.620
that isn't recognized.

00:02:15.620 --> 00:02:18.170
It also has a default
welcome intent.

00:02:18.170 --> 00:02:20.420
This is the main entry
point to our conversation,

00:02:20.420 --> 00:02:24.199
as shown by the fact that it is
triggered by the welcome event.

00:02:24.199 --> 00:02:26.240
Let's get rid of some of
these pre-made greetings

00:02:26.240 --> 00:02:27.890
and specify our own.

00:02:27.890 --> 00:02:30.020
Something like, "Welcome
to Facts about Google.

00:02:30.020 --> 00:02:32.360
Which one do you want to
hear about, Google's history

00:02:32.360 --> 00:02:34.130
or its headquarters?"

00:02:34.130 --> 00:02:35.810
This serves to
acknowledge the user

00:02:35.810 --> 00:02:38.840
and separate our assistant
app from the Google Assistant,

00:02:38.840 --> 00:02:40.640
as well as direct the
user to the next turn

00:02:40.640 --> 00:02:43.160
in the conversation, in
this case using an either/or

00:02:43.160 --> 00:02:44.460
question.

00:02:44.460 --> 00:02:46.580
Remember, all your prompts
should be a reflection

00:02:46.580 --> 00:02:47.870
of your app's persona.

00:02:47.870 --> 00:02:51.200
This is vital to creating
a great experience.

00:02:51.200 --> 00:02:53.060
Before I move on
to the next intent,

00:02:53.060 --> 00:02:55.580
I'll need to create
some custom entities.

00:02:55.580 --> 00:02:57.740
Entities are objects
that serve to enumerate

00:02:57.740 --> 00:02:59.780
the different things
people will talk about

00:02:59.780 --> 00:03:01.670
in their natural speech input.

00:03:01.670 --> 00:03:04.610
You will use entities as
slot-filling parameters

00:03:04.610 --> 00:03:07.730
required for business
logic in your intents.

00:03:07.730 --> 00:03:11.190
In API.AI, there are two
different types of entities.

00:03:11.190 --> 00:03:13.250
There are pre-built
system entities

00:03:13.250 --> 00:03:16.190
to handle the most popular
common concepts, like time,

00:03:16.190 --> 00:03:18.680
number, address,
date, et cetera.

00:03:18.680 --> 00:03:21.890
And then there are developer
entities, which we'll use here.

00:03:21.890 --> 00:03:25.130
I'll create developer entities
using the API.AI web console,

00:03:25.130 --> 00:03:28.190
but you can also upload
them in JSON and CSV formats

00:03:28.190 --> 00:03:30.610
or through API calls.

00:03:30.610 --> 00:03:32.030
To get started,
Facts about Google

00:03:32.030 --> 00:03:34.370
should know two
categories of facts--

00:03:34.370 --> 00:03:35.990
history, which
might also be termed

00:03:35.990 --> 00:03:39.410
past, and headquarters, or HQ.

00:03:39.410 --> 00:03:42.110
Once I'm all done I'll
have something like this.

00:03:42.110 --> 00:03:44.300
Next, I'll create an
intent for the use case

00:03:44.300 --> 00:03:47.330
that our assistant app will
support, telling a fact.

00:03:47.330 --> 00:03:50.360
Let's create the
intent, tell_fact, then

00:03:50.360 --> 00:03:54.180
add a few examples of how the
user may ask to hear a fact.

00:03:54.180 --> 00:03:56.300
We are expecting the user
to respond to the prompt

00:03:56.300 --> 00:03:58.901
given in the welcome intent
or possibly ask us for a fact

00:03:58.901 --> 00:04:01.400
after they've already heard
one, so they might say something

00:04:01.400 --> 00:04:03.497
as simple as history,
or something more

00:04:03.497 --> 00:04:05.330
complicated like, I'd
love to hear something

00:04:05.330 --> 00:04:07.322
about Google's history.

00:04:07.322 --> 00:04:08.780
As I'm adding new
examples, you can

00:04:08.780 --> 00:04:10.430
see how they're
automatically annotated

00:04:10.430 --> 00:04:12.890
with the fact category entity.

00:04:12.890 --> 00:04:15.680
This means the user can provide
the entity value directly

00:04:15.680 --> 00:04:18.260
in the phrase used to
trigger this intent.

00:04:18.260 --> 00:04:20.540
We can change the annotation,
the names of parameters,

00:04:20.540 --> 00:04:23.510
and the entities to
fit our use case.

00:04:23.510 --> 00:04:26.900
API.AI will learn from the
annotated examples and entities

00:04:26.900 --> 00:04:29.257
to understand more
variations of such requests.

00:04:29.257 --> 00:04:31.340
Let's add a few more
examples of what a user might

00:04:31.340 --> 00:04:33.440
say to trigger this intent.

00:04:33.440 --> 00:04:35.330
"Tell me about Google's HQ."

00:04:35.330 --> 00:04:37.310
"I want to hear about
the history of Google."

00:04:37.310 --> 00:04:39.590
"Can you tell me about
Google's headquarters?"

00:04:39.590 --> 00:04:41.690
"Give me a fact about Google."

00:04:41.690 --> 00:04:44.000
Generally, you'd want to
provide about 10 to 12 samples

00:04:44.000 --> 00:04:47.390
to train API.AI on
variations a user might say.

00:04:47.390 --> 00:04:50.120
Notice that the last phrase does
not include the fact category

00:04:50.120 --> 00:04:53.270
entity, indicating to API.AI
that the category won't always

00:04:53.270 --> 00:04:55.790
be specified in the
triggering phrase.

00:04:55.790 --> 00:04:58.070
Down here, I'll name the
action for this intent

00:04:58.070 --> 00:05:01.310
as tell.fact, which will be the
trigger for my business logic

00:05:01.310 --> 00:05:03.320
to get the relevant response.

00:05:03.320 --> 00:05:05.840
As a side note, be aware
that actions on API.AI

00:05:05.840 --> 00:05:08.960
have a different meaning
than actions on Google.

00:05:08.960 --> 00:05:10.730
Again, we can see
how the fact category

00:05:10.730 --> 00:05:12.440
parameter was
created automatically

00:05:12.440 --> 00:05:14.300
from the annotated examples.

00:05:14.300 --> 00:05:15.950
This intent has
only one parameter,

00:05:15.950 --> 00:05:18.200
but you can imagine one that
might take a whole bunch,

00:05:18.200 --> 00:05:19.790
like a recipe-finding
intent that

00:05:19.790 --> 00:05:23.146
might need a list of
ingredients and dish types.

00:05:23.146 --> 00:05:25.770
Facts about Google won't be able
to tell a fact without knowing

00:05:25.770 --> 00:05:27.600
which category of
fact the user wants,

00:05:27.600 --> 00:05:29.730
so I'm going to mark this
parameter as required

00:05:29.730 --> 00:05:31.386
and add a prompt for it.

00:05:31.386 --> 00:05:32.760
Facts about Google
will use these

00:05:32.760 --> 00:05:35.190
prompts to request the missing
information if it was not

00:05:35.190 --> 00:05:38.430
provided directly in the phrase
used to trigger this intent,

00:05:38.430 --> 00:05:41.970
like if the user just said,
give me a fact about Google.

00:05:41.970 --> 00:05:43.720
You can add more than
one of these prompts

00:05:43.720 --> 00:05:45.687
for each parameter
to add variation.

00:05:45.687 --> 00:05:47.770
Our prompt will be something
like, which would you

00:05:47.770 --> 00:05:51.100
prefer to hear about, Google's
history or its headquarters?

00:05:51.100 --> 00:05:52.990
Let's hard code a
simple fact in for now,

00:05:52.990 --> 00:05:56.030
like Google was founded in 1998.

00:05:56.030 --> 00:05:59.920
Now we can test out this intent
right in the API.AI simulator.

00:05:59.920 --> 00:06:01.900
Let's try one of the
phrases we provided,

00:06:01.900 --> 00:06:03.924
"Give me a fact about Google."

00:06:03.924 --> 00:06:05.590
We can see that this
intent was matched,

00:06:05.590 --> 00:06:07.630
and we get the prompt
for the fact category

00:06:07.630 --> 00:06:09.880
parameter because it wasn't
provided in the triggering

00:06:09.880 --> 00:06:10.810
phrase.

00:06:10.810 --> 00:06:13.300
And after answering that, we
get the hard-coded response

00:06:13.300 --> 00:06:14.674
given here.

00:06:14.674 --> 00:06:16.840
But our actual response is
going to change depending

00:06:16.840 --> 00:06:18.756
on which type of fact
that user wants to hear,

00:06:18.756 --> 00:06:20.650
so we can't just hard code one.

00:06:20.650 --> 00:06:23.400
In order to provide this
sort of a dynamic experience,

00:06:23.400 --> 00:06:26.510
we'll need to add a web
hook to our API.AI agent.

00:06:26.510 --> 00:06:28.240
This will be a
web-hosted endpoint

00:06:28.240 --> 00:06:30.610
that API.AI can query
for a given intent

00:06:30.610 --> 00:06:32.800
in order to provide
some response.

00:06:32.800 --> 00:06:35.920
Your web hook will need to
be an https endpoint built

00:06:35.920 --> 00:06:38.060
on any technology
of your choosing.

00:06:38.060 --> 00:06:40.570
It will be responsible for
parsing the incoming API.AI

00:06:40.570 --> 00:06:43.060
request and returning
an appropriately

00:06:43.060 --> 00:06:44.475
formatted response.

00:06:44.475 --> 00:06:45.850
This can be a
little complicated,

00:06:45.850 --> 00:06:47.590
so we built a client
library in Node.js

00:06:47.590 --> 00:06:50.950
that can be used to interface
with your business logic.

00:06:50.950 --> 00:06:53.590
Let's take a look at how it can
be used to build a Node.js web

00:06:53.590 --> 00:06:55.220
hook for this app.

00:06:55.220 --> 00:06:59.160
Here we have a cloud function
that initializes the API.AI app

00:06:59.160 --> 00:07:02.760
class imported from our
client library's npm package

00:07:02.760 --> 00:07:06.750
and initializes it with the
incoming request response pair.

00:07:06.750 --> 00:07:09.330
We also declare a map,
call to action map,

00:07:09.330 --> 00:07:13.350
which matches an action string
entered in the API.AI console

00:07:13.350 --> 00:07:15.090
to a function handler.

00:07:15.090 --> 00:07:18.090
In this case, it maps
the tell.fact action

00:07:18.090 --> 00:07:21.720
we wrote in the console earlier
to the tellFact function, which

00:07:21.720 --> 00:07:25.490
will be passed to reference
to the API.AI app object.

00:07:25.490 --> 00:07:29.130
Calling app.handleRequest
with this action map

00:07:29.130 --> 00:07:33.060
will trigger the logic to
send a response to API.AI.

00:07:33.060 --> 00:07:36.130
The tellFact function does a
couple of interesting things.

00:07:36.130 --> 00:07:39.660
First, it initializes some
fact string to a default

00:07:39.660 --> 00:07:42.690
and then uses the
app.getArgument method

00:07:42.690 --> 00:07:45.210
to pull the value of the
fact category parameter

00:07:45.210 --> 00:07:46.500
in the intent.

00:07:46.500 --> 00:07:49.680
Based on that value, it
fetches some fact for the user.

00:07:49.680 --> 00:07:52.140
Then it forms a
response for the user.

00:07:52.140 --> 00:07:55.260
The response used is based
on the surface capabilities

00:07:55.260 --> 00:07:56.774
of the user device.

00:07:56.774 --> 00:07:59.190
If the device has the ability
to output visual information

00:07:59.190 --> 00:08:01.590
on a screen, like a
phone, a rich response

00:08:01.590 --> 00:08:03.900
is used, which includes
a simple response chat

00:08:03.900 --> 00:08:07.260
bubble, a card with
some text, and an image

00:08:07.260 --> 00:08:10.350
with its own alternative
text for accessibility.

00:08:10.350 --> 00:08:12.960
Finally, the response includes
some suggestion [INAUDIBLE]

00:08:12.960 --> 00:08:15.050
to further the conversation.

00:08:15.050 --> 00:08:17.610
For devices which cannot
output to a screen,

00:08:17.610 --> 00:08:21.840
a simple string is used as a
spoken response to the user.

00:08:21.840 --> 00:08:24.090
Now that we've built our
web hook as a cloud function

00:08:24.090 --> 00:08:26.310
and deployed to a hosting
solution like Google Cloud

00:08:26.310 --> 00:08:29.760
functions, we'll need to
tell API.AI to use it.

00:08:29.760 --> 00:08:32.579
To do that, go to fulfillment,
click Enabled under the Web

00:08:32.579 --> 00:08:35.669
Hook settings, and type in
your web hook's hosted address.

00:08:35.669 --> 00:08:37.950
Then head back to
the tellFact intent

00:08:37.950 --> 00:08:40.419
and check Use Web
Hook at the bottom.

00:08:40.419 --> 00:08:42.990
This will tell API.AI to
use the response provided

00:08:42.990 --> 00:08:45.120
from your web hook instead
of one you typed here

00:08:45.120 --> 00:08:46.920
for this intent.

00:08:46.920 --> 00:08:49.950
Again, we can test this intent
right in the API.AI simulator,

00:08:49.950 --> 00:08:52.500
but this time let's not use
a phrase given in our User

00:08:52.500 --> 00:08:53.820
Says section.

00:08:53.820 --> 00:08:56.760
Let's try, "Tell me something
interesting about Google's

00:08:56.760 --> 00:08:57.810
past."

00:08:57.810 --> 00:08:59.610
and immediately we get
the simple response

00:08:59.610 --> 00:09:01.290
generated from our web hook.

00:09:01.290 --> 00:09:03.520
This is one of the coolest
things about API.AI.

00:09:03.520 --> 00:09:06.770
It's machine learning, trained
on the phrases we provided,

00:09:06.770 --> 00:09:08.460
recognized the user
input even if it

00:09:08.460 --> 00:09:11.310
didn't match the examples
verbatim, called the web hook,

00:09:11.310 --> 00:09:12.870
and provided the response.

00:09:12.870 --> 00:09:14.160
Pretty neat, huh?

00:09:14.160 --> 00:09:16.620
We can also check out the JSON
request sent to our web hook

00:09:16.620 --> 00:09:17.235
here.

00:09:17.235 --> 00:09:19.110
Normally it'd be a little
hard to parse this,

00:09:19.110 --> 00:09:20.947
but our client
library made it easy.

00:09:20.947 --> 00:09:23.280
We can also check out the
training section of the API.AI

00:09:23.280 --> 00:09:26.059
console to see what input has
matched against our intents,

00:09:26.059 --> 00:09:27.600
and we can even make
live corrections

00:09:27.600 --> 00:09:29.558
to the intents and entities
being matched right

00:09:29.558 --> 00:09:30.692
on the spot.

00:09:30.692 --> 00:09:32.400
We've got something
that works well here,

00:09:32.400 --> 00:09:34.740
but we'd like to round out this
conversation just a little bit

00:09:34.740 --> 00:09:35.340
more.

00:09:35.340 --> 00:09:37.131
For instance, the user
might be confused as

00:09:37.131 --> 00:09:39.264
to what they can achieve
with this assistant app.

00:09:39.264 --> 00:09:41.430
So let's create a help
content that accepts phrases,

00:09:41.430 --> 00:09:44.020
like "What can you
do," or "I need help."

00:09:44.020 --> 00:09:47.400
Again, remember to provide
more examples than I am here.

00:09:47.400 --> 00:09:49.080
We can provide some
simple help response

00:09:49.080 --> 00:09:51.650
to try to direct the user
to our tellFact intent.

00:09:51.650 --> 00:09:53.400
"I can tell you all
about Google's history

00:09:53.400 --> 00:09:54.233
or its headquarters.

00:09:54.233 --> 00:09:55.962
Which would you prefer?"

00:09:55.962 --> 00:09:57.420
An even better
option here might be

00:09:57.420 --> 00:09:58.836
to just provide a
fact to the user

00:09:58.836 --> 00:10:01.530
to give them some foothold
into the conversation.

00:10:01.530 --> 00:10:03.910
I encourage you to
try that on your own.

00:10:03.910 --> 00:10:06.150
Finally, let's add one
more intent called quit,

00:10:06.150 --> 00:10:08.670
which will let the user
leave the conversation.

00:10:08.670 --> 00:10:10.470
To trigger this intent,
the user might say,

00:10:10.470 --> 00:10:12.270
"I'm done now," or "Bye."

00:10:12.270 --> 00:10:14.640
And we can provide a
polite response, like "OK,

00:10:14.640 --> 00:10:15.810
see you next time."

00:10:15.810 --> 00:10:19.042
Or, even better, if we really
want our users to come back,

00:10:19.042 --> 00:10:21.000
we could say something
like "Come back tomorrow

00:10:21.000 --> 00:10:22.020
for a new fact.

00:10:22.020 --> 00:10:23.250
See you next time."

00:10:23.250 --> 00:10:27.010
And have our web hook provide
a different fact each day.

00:10:27.010 --> 00:10:28.760
We'll check End
Conversation at the bottom

00:10:28.760 --> 00:10:32.164
to tell API.AI the
conversation ends here.

00:10:32.164 --> 00:10:34.330
Now that we've got something
that works pretty well,

00:10:34.330 --> 00:10:36.965
let's try this out in the
actions on Google web simulator

00:10:36.965 --> 00:10:38.590
so we can see how
this experience would

00:10:38.590 --> 00:10:41.230
work with the Google Assistant
in both a visual and voice

00:10:41.230 --> 00:10:42.580
context.

00:10:42.580 --> 00:10:44.410
First I'll head to
the Integrations page

00:10:44.410 --> 00:10:46.930
and click into the Actions
on Google settings.

00:10:46.930 --> 00:10:49.880
Then I'll click Test to
prepare my app for testing.

00:10:49.880 --> 00:10:51.880
I can jump over to the
Actions on Google console

00:10:51.880 --> 00:10:52.530
to test it out.

00:10:56.380 --> 00:11:00.830
First, I'll invoke it with
"Talk to my test app."

00:11:00.830 --> 00:11:04.910
Then I'll try a simple phrase,
like "History, please."

00:11:04.910 --> 00:11:06.500
Before triggering
the next intent,

00:11:06.500 --> 00:11:09.140
let's change the
simulated device to phone

00:11:09.140 --> 00:11:12.230
and then say, "Tell me about
Google's headquarters."

00:11:12.230 --> 00:11:12.840
It worked.

00:11:12.840 --> 00:11:15.020
We got a rich, visual
response because we

00:11:15.020 --> 00:11:17.270
were on a screen-based surface.

00:11:17.270 --> 00:11:18.710
In the case that
it doesn't work,

00:11:18.710 --> 00:11:20.251
I can check out the
debug information

00:11:20.251 --> 00:11:22.550
given on the right side to
see the data transferring

00:11:22.550 --> 00:11:25.640
between the assistant
server and my API.AI agent.

00:11:25.640 --> 00:11:27.645
Now, before I submit,
I'd want to build out

00:11:27.645 --> 00:11:30.020
this experience a little
further to provide a better user

00:11:30.020 --> 00:11:31.760
experience and more content.

00:11:31.760 --> 00:11:33.290
You can find out
how to do all this

00:11:33.290 --> 00:11:37.130
in the fuller Facts about Google
sample at our developer's site.

00:11:37.130 --> 00:11:39.500
Once we do all that, we
can head back to API.AI

00:11:39.500 --> 00:11:40.910
and click Update.

00:11:40.910 --> 00:11:43.100
This will tell the
actions console to update

00:11:43.100 --> 00:11:45.214
the app with what I have here.

00:11:45.214 --> 00:11:46.630
Now I can provide
some information

00:11:46.630 --> 00:11:48.310
about our app and the console.

00:11:48.310 --> 00:11:50.830
I'll give it a display
name of Facts about Google.

00:11:50.830 --> 00:11:52.984
This will be the name
shown in the directory.

00:11:52.984 --> 00:11:54.400
You will need to
make sure to give

00:11:54.400 --> 00:11:56.350
your app a unique
invocation name that

00:11:56.350 --> 00:11:59.911
follows the naming policies
published in our documentation.

00:11:59.911 --> 00:12:02.160
I can use the microphone to
help the console determine

00:12:02.160 --> 00:12:06.270
the pronunciation by saying,
Facts about Google allowed."

00:12:06.270 --> 00:12:09.372
Here I can give the app an
introduction, choose its voice,

00:12:09.372 --> 00:12:10.830
and provide a
description, which is

00:12:10.830 --> 00:12:13.020
clear about what the app does.

00:12:13.020 --> 00:12:15.750
After that, I'll provide
some sample invocations.

00:12:15.750 --> 00:12:17.160
Our docs cover
the different ways

00:12:17.160 --> 00:12:19.830
to invoke your app other than
the typical one shown here,

00:12:19.830 --> 00:12:22.620
but I have no other invocations
so I'll just keep the default.

00:12:22.620 --> 00:12:25.040
If you add others, make
sure you test them.

00:12:25.040 --> 00:12:28.360
Our reviewers will tell us
that they actually work.

00:12:28.360 --> 00:12:35.900
Next, I'll provide a couple of
images, some optional testing

00:12:35.900 --> 00:12:38.090
instructions, and provide
my email and a link

00:12:38.090 --> 00:12:40.457
to my privacy policy.

00:12:40.457 --> 00:12:43.040
Once we've got all this filled
out, we'll head back to the top

00:12:43.040 --> 00:12:44.350
and hit Save.

00:12:44.350 --> 00:12:47.620
Normally, I determine my apps
required surface capabilities

00:12:47.620 --> 00:12:49.820
here, but mine will
work with all devices,

00:12:49.820 --> 00:12:52.880
so we can leave the default.
Now that that's all done,

00:12:52.880 --> 00:12:54.460
I can click Submit.

00:12:54.460 --> 00:12:57.140
The app is submitted, and now
I can monitor the submission

00:12:57.140 --> 00:12:58.330
status here.

00:12:58.330 --> 00:13:00.970
At this point, your app will
enter our review process

00:13:00.970 --> 00:13:04.090
and, if accepted, will be
deployed to assistant devices

00:13:04.090 --> 00:13:05.380
everywhere.

00:13:05.380 --> 00:13:08.080
Once it's been approved, the
app is made available to anyone

00:13:08.080 --> 00:13:10.300
using the Google
Assistant on Google Home

00:13:10.300 --> 00:13:12.410
and other eligible devices.

00:13:12.410 --> 00:13:14.950
Remember, you can always
test before approval

00:13:14.950 --> 00:13:18.220
with your own device, as long as
it is linked to your developer

00:13:18.220 --> 00:13:19.240
account.

00:13:19.240 --> 00:13:20.500
Let's try it now.

00:13:20.500 --> 00:13:21.660
OK, Google.

00:13:21.660 --> 00:13:22.780
Talk to my test app.

00:13:24.881 --> 00:13:26.880
GOOGLE ASSISTANT: Sure,
here is the test version

00:13:26.880 --> 00:13:28.860
of my test app.

00:13:28.860 --> 00:13:30.750
Welcome to facts about Google.

00:13:30.750 --> 00:13:33.270
Which one do you want to
hear about, Google's history

00:13:33.270 --> 00:13:35.460
or its headquarters?

00:13:35.460 --> 00:13:39.144
SACHIT MISHRA: Let's
hear a headquarters fact.

00:13:39.144 --> 00:13:40.810
GOOGLE ASSISTANT:
Here's a fact for you.

00:13:40.810 --> 00:13:44.440
Google has over 15 cafeterias
on its main campus.

00:13:44.440 --> 00:13:46.170
Which one do you want
to hear about next,

00:13:46.170 --> 00:13:50.210
Google's history
or headquarters?

00:13:50.210 --> 00:13:51.810
Here's a fact for you.

00:13:51.810 --> 00:13:55.340
Google released the first
version of Android in 2008.

00:13:55.340 --> 00:13:57.170
Which one do you want
to hear about next,

00:13:57.170 --> 00:14:00.090
Google's history
or headquarters?

00:14:00.090 --> 00:14:02.070
SACHIT MISHRA: I'm done now.

00:14:02.070 --> 00:14:04.290
GOOGLE ASSISTANT: Come back
tomorrow for a new fact.

00:14:04.290 --> 00:14:05.400
See you next time.

00:14:07.825 --> 00:14:09.700
SACHIT MISHRA: So that
is a really quick demo

00:14:09.700 --> 00:14:12.370
of some of the powerful features
available in the actions

00:14:12.370 --> 00:14:15.370
console and API.AI
developer tool.

00:14:15.370 --> 00:14:17.770
You can find out more about
Actions on Google by checking

00:14:17.770 --> 00:14:19.930
out the console or
reading the documentation

00:14:19.930 --> 00:14:23.349
at
developers.google.com/actions.

00:14:23.349 --> 00:14:25.390
That's where you can find
the more complete Facts

00:14:25.390 --> 00:14:27.430
about Google sample
and walkthrough,

00:14:27.430 --> 00:14:29.500
as well as the number
geni sample, which

00:14:29.500 --> 00:14:32.530
is a great reference for
design best practices.

00:14:32.530 --> 00:14:35.440
We also have an Actions on
Google G+ community so you can

00:14:35.440 --> 00:14:38.710
ask your questions and share
your ideas with everyone.

00:14:38.710 --> 00:14:39.700
I'm Sachit Mishra.

00:14:39.700 --> 00:14:40.780
Thanks for watching.

00:14:40.780 --> 00:14:42.446
I look forward to
seeing what you build.

00:14:42.446 --> 00:14:47.340
[MUSIC PLAYING]

