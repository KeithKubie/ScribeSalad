WEBVTT
Kind: captions
Language: en

00:00:00.295 --> 00:00:03.250
Structs and enumeration are value types.

00:00:03.250 --> 00:00:05.350
And classes are reference types.

00:00:05.350 --> 00:00:09.410
This is in fact the principal difference
between these complex objects.

00:00:09.410 --> 00:00:13.700
Okay, so what are value types and
reference types?

00:00:13.700 --> 00:00:18.470
When a value type is assigned to
a variable or a constant, it's copied.

00:00:18.470 --> 00:00:21.170
An entirely new instance is created.

00:00:21.170 --> 00:00:23.700
When a reference type is
assigned to a variable or

00:00:23.700 --> 00:00:25.960
a constant, there is no copy.

00:00:25.960 --> 00:00:29.580
A new reference to the original
instance is created.

00:00:29.580 --> 00:00:32.490
This is definitely challenging
to wrap one's brain around.

00:00:32.490 --> 00:00:34.510
But a couple examples
should clear things up.

00:00:34.510 --> 00:00:36.470
Let's go back to our
picture frame struct.

00:00:36.470 --> 00:00:39.690
We'll declare an instance of the picture
frame struct and call it frame.

00:00:39.690 --> 00:00:41.420
Creative, I know.

00:00:41.420 --> 00:00:44.532
Here I'm initializing a frame
as a 3 by 5 picture frame with

00:00:44.532 --> 00:00:46.480
a half inch thickness.

00:00:46.480 --> 00:00:48.640
Now we'll assign another variable,
frameForMom.

00:00:48.640 --> 00:00:51.680
My mom always needs more picture frames.

00:00:51.680 --> 00:00:54.360
We'll assign frameForMom
to be equal to frame.

00:00:54.360 --> 00:00:56.820
But mom needs a 5 by 7 frame.

00:00:56.820 --> 00:01:00.260
So we'll need to reset
the dimensions of frameForMom.

00:01:00.260 --> 00:01:04.470
Now my question for you is what
is the width and height of frame?

00:01:04.470 --> 00:01:07.220
I'll give you a few
seconds to think about it.

00:01:09.820 --> 00:01:14.240
We can see in the sidebar that the
dimensions of frame are still 3 by 5.

00:01:14.240 --> 00:01:17.030
When the frame was
assigned to frameForMom,

00:01:17.030 --> 00:01:19.070
an entirely new copy was made.

00:01:19.070 --> 00:01:23.310
The values 5 and 7 are held by
the copy represented by frameForMom.

00:01:23.310 --> 00:01:27.530
The values 3 and 5 are held by
the copy represented by frame.

00:01:27.530 --> 00:01:29.880
What if picture frame were a class?

00:01:29.880 --> 00:01:34.060
Here's a nearly identical class,
I'm calling it classy picture frame.

00:01:34.060 --> 00:01:38.000
Down here I'm instantiating a classy
picture frame called classy frame.

00:01:38.000 --> 00:01:40.570
And setting its width and
height to 3 by 5.

00:01:40.570 --> 00:01:41.860
And like I did before,

00:01:41.860 --> 00:01:44.890
I'm creating another variable
called classyFrameForMom.

00:01:44.890 --> 00:01:47.410
And assigning it to be
equal to classy frame.

00:01:47.410 --> 00:01:50.420
But of course, mom needs 5 by 7 frames.

00:01:50.420 --> 00:01:55.090
And again we ask ourselves, what will
be the width and height of ClassyFrame.

00:01:55.090 --> 00:01:58.900
And over here in the sidebar,
we see 5 by 7.

00:01:58.900 --> 00:02:01.640
But we never change
the dimensions of ClassyFrame.

00:02:01.640 --> 00:02:03.060
How did that happen?

00:02:03.060 --> 00:02:04.930
Classes are reference types.

00:02:04.930 --> 00:02:10.100
So when ClassyFrame was assigned to
ClassyFrameForMom, no copy was made.

00:02:10.100 --> 00:02:12.600
Instead, a new reference was made.

00:02:12.600 --> 00:02:14.250
This means that classyFrame and

00:02:14.250 --> 00:02:18.220
classyFrameForMom both
refer to the same instance.

00:02:18.220 --> 00:02:22.870
Here we're changing the value of
the underlying instance to 5 by 7, and

00:02:22.870 --> 00:02:24.480
both references are affected.

