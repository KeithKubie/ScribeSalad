WEBVTT
Kind: captions
Language: en

00:00:08.630 --> 00:00:10.610
Hi, I'm Nazmul Idris,
a developer advocate

00:00:10.610 --> 00:00:13.555
on the Android team, and welcome
to this episode of DevBytes.

00:00:13.555 --> 00:00:15.930
In today's episode, we're
going to cover the new printing

00:00:15.930 --> 00:00:20.360
API that was released with
KitKat, AKA Android 4.4.

00:00:20.360 --> 00:00:23.660
Android 4.4 introduces native
platform support for printing,

00:00:23.660 --> 00:00:26.150
along with APIs for
managing printing and adding

00:00:26.150 --> 00:00:27.970
new types of printer support.

00:00:27.970 --> 00:00:29.610
The platform provides
a print manager

00:00:29.610 --> 00:00:31.540
that mediates between
applications requesting

00:00:31.540 --> 00:00:34.450
printing and installed
print services that

00:00:34.450 --> 00:00:35.865
actually do the printing.

00:00:35.865 --> 00:00:37.980
The print manager
provides shared services

00:00:37.980 --> 00:00:40.340
and a system user interface
for printing, giving users

00:00:40.340 --> 00:00:43.490
consistent control over
printing from any application.

00:00:43.490 --> 00:00:46.450
The print manager also ensures
the security of content

00:00:46.450 --> 00:00:49.490
as it passes across
processes from an application

00:00:49.490 --> 00:00:51.050
to a print service.

00:00:51.050 --> 00:00:53.070
Most devices running
Android 4.4 will

00:00:53.070 --> 00:00:55.290
include Google Cloud
Print pre-installed

00:00:55.290 --> 00:00:57.210
as a print service
out of the box,

00:00:57.210 --> 00:00:59.160
as well as several
Google Apps that

00:00:59.160 --> 00:01:03.040
support printing, including
Chrome, Drive, Gallery,

00:01:03.040 --> 00:01:05.239
and Quickoffice.

00:01:05.239 --> 00:01:07.280
So what is this printing API?

00:01:07.280 --> 00:01:09.760
Well, the print API
allows app developers

00:01:09.760 --> 00:01:11.570
to write applications
that can print

00:01:11.570 --> 00:01:14.230
any type of content to printers
that could be connected

00:01:14.230 --> 00:01:17.430
over Wi-Fi or Bluetooth, or any
other kind of printing service,

00:01:17.430 --> 00:01:19.810
for example, Google Cloud Print.

00:01:19.810 --> 00:01:24.110
It also allows printer OEMs
to generate print services

00:01:24.110 --> 00:01:27.030
and distribute them as
APKs on the Play Store

00:01:27.030 --> 00:01:30.410
so that their printers will plug
seamlessly into the framework,

00:01:30.410 --> 00:01:32.770
so that users can
print their documents

00:01:32.770 --> 00:01:35.650
to any connected printer.

00:01:35.650 --> 00:01:38.530
The system handles a transaction
between an application that

00:01:38.530 --> 00:01:40.910
wants to print a document
and the services that

00:01:40.910 --> 00:01:43.540
deliver print jobs
to an actual printer.

00:01:43.540 --> 00:01:45.440
The print framework
provides all the APIs

00:01:45.440 --> 00:01:47.930
necessary to specify
a print document

00:01:47.930 --> 00:01:50.280
and deliver it to the
system for printing.

00:01:50.280 --> 00:01:52.770
As an app developer,
which APIs you actually

00:01:52.770 --> 00:01:55.317
need for a given print job
depends on the type of content

00:01:55.317 --> 00:01:56.650
that you actually want to print.

00:01:56.650 --> 00:02:01.390
For example, are they images,
HTML, or a PDF canvas?

00:02:01.390 --> 00:02:03.260
In print-enabled
applications, users

00:02:03.260 --> 00:02:07.350
can discover available
printers, change paper sizes,

00:02:07.350 --> 00:02:10.000
choose specific pages
to print, and print

00:02:10.000 --> 00:02:13.040
almost any kind of
document, image, or file.

00:02:13.040 --> 00:02:15.610
Print services are
pluggable components

00:02:15.610 --> 00:02:19.045
that contain vendor-specific
logic, services, and so on.

00:02:19.045 --> 00:02:20.670
These are managed by
the system and are

00:02:20.670 --> 00:02:22.760
responsible for discovering
printers, interacting

00:02:22.760 --> 00:02:26.240
with them, and reporting
their state about what's

00:02:26.240 --> 00:02:28.470
going on with the print jobs.

00:02:28.470 --> 00:02:31.430
As a printer OEM, you can use
the print service framework

00:02:31.430 --> 00:02:33.730
to provide interoperability
with your printers

00:02:33.730 --> 00:02:34.970
from Android devices.

00:02:34.970 --> 00:02:36.610
And this is really important.

00:02:36.610 --> 00:02:38.401
You can build and
distribute these services

00:02:38.401 --> 00:02:40.910
as APKS, which users can
install on their devices.

00:02:40.910 --> 00:02:43.800
And they can be updated over the
air via the Play Store, which

00:02:43.800 --> 00:02:45.770
is pretty awesome.

00:02:45.770 --> 00:02:48.450
A print service application
operates primarily

00:02:48.450 --> 00:02:51.320
as a headless service by
subclassing the print service

00:02:51.320 --> 00:02:54.730
class, which receives
print jobs from the system

00:02:54.730 --> 00:02:56.610
and communicates it
to printers using

00:02:56.610 --> 00:02:58.366
the appropriate protocols.

00:02:58.366 --> 00:03:02.487
The print services will get
printed content as a PDF file

00:03:02.487 --> 00:03:04.070
and may apply whatever
transformations

00:03:04.070 --> 00:03:08.070
they need to make to the data so
that it's optimal for printing.

00:03:08.070 --> 00:03:10.180
And print services
have to implement APIs

00:03:10.180 --> 00:03:13.800
for being queried by the
printers that they manage.

00:03:13.800 --> 00:03:15.971
So now, from an application
developer perspective,

00:03:15.971 --> 00:03:17.470
I will show you how
to use the print

00:03:17.470 --> 00:03:19.810
API to quickly print content.

00:03:19.810 --> 00:03:21.540
So for the broadest
compatibility,

00:03:21.540 --> 00:03:25.560
Android uses PDF as its primary
file format for printing.

00:03:25.560 --> 00:03:27.040
Before printing,
your application

00:03:27.040 --> 00:03:29.140
needs to generate a
properly paginated PDF

00:03:29.140 --> 00:03:30.520
version of your content.

00:03:30.520 --> 00:03:32.490
And for your
convenience, we actually

00:03:32.490 --> 00:03:34.900
have helper classes that allow
you to very quickly print

00:03:34.900 --> 00:03:38.910
WebViews and also pretty
quickly create PDF documents as

00:03:38.910 --> 00:03:41.280
well-- actually, PDF output.

00:03:41.280 --> 00:03:44.980
So if your application knows
how to draw the content,

00:03:44.980 --> 00:03:48.900
it can quickly create
a PDF for printing.

00:03:48.900 --> 00:03:50.920
Now if you want
to print a bitmap,

00:03:50.920 --> 00:03:52.570
it's actually very
easy to do this.

00:03:52.570 --> 00:03:54.692
With very little code,
you can print out images.

00:03:54.692 --> 00:03:56.650
And the only one option
you have to think about

00:03:56.650 --> 00:04:00.170
is whether you want the
printed output to scale

00:04:00.170 --> 00:04:03.210
to fit or scale to fill
the actual printed page.

00:04:03.210 --> 00:04:04.900
So what's the difference?

00:04:04.900 --> 00:04:06.839
Scale to fit makes
sure that your bitmap

00:04:06.839 --> 00:04:08.880
fits within the maximum
dimensions of the printed

00:04:08.880 --> 00:04:10.000
output page.

00:04:10.000 --> 00:04:12.120
So with a square bitmap
on a rectangular page,

00:04:12.120 --> 00:04:14.570
it actually results in
white space on the top

00:04:14.570 --> 00:04:17.570
and the bottom of the page, as
you can see in this example.

00:04:17.570 --> 00:04:19.060
Scale to fill, on
the other hand,

00:04:19.060 --> 00:04:21.268
makes sure that your bitmap
is scaled to fill as much

00:04:21.268 --> 00:04:22.970
of the printed output
page as possible.

00:04:22.970 --> 00:04:25.095
And this might mean that
some portions of the image

00:04:25.095 --> 00:04:27.120
are not actually printed
because they exceeded

00:04:27.120 --> 00:04:28.900
the bounds of the
printed page, again,

00:04:28.900 --> 00:04:31.350
as you can see in the example.

00:04:31.350 --> 00:04:33.560
So here's some
code that shows you

00:04:33.560 --> 00:04:35.332
how easy it is to
actually do this.

00:04:35.332 --> 00:04:37.040
So again, the only
option that you really

00:04:37.040 --> 00:04:39.100
need to be mindful
of is what parameter

00:04:39.100 --> 00:04:41.870
to pass the getScaleMode method.

00:04:41.870 --> 00:04:44.310
So once the printBitmap
method is called,

00:04:44.310 --> 00:04:46.710
no further action from
your app is required.

00:04:46.710 --> 00:04:49.100
The Android modal
dialogue box for printing

00:04:49.100 --> 00:04:52.000
appears and allows the user to
select the printer and whatever

00:04:52.000 --> 00:04:53.810
print options they want.

00:04:53.810 --> 00:04:56.454
The user can then print the
image or cancel the action.

00:04:56.454 --> 00:04:57.870
If they choose to
print the image,

00:04:57.870 --> 00:05:00.530
then a print job is created,
and a printing notification

00:05:00.530 --> 00:05:03.720
appears in the system bar.

00:05:03.720 --> 00:05:06.020
Now let's say you wanted
to print some HTML content.

00:05:06.020 --> 00:05:08.610
So here's some code that
will show you how to do that.

00:05:08.610 --> 00:05:10.818
The first thing you do is
you can generate some HTML,

00:05:10.818 --> 00:05:13.600
put it in a string, then
load that in a WebView,

00:05:13.600 --> 00:05:17.930
and finally, attach a
WebView client to the WebView

00:05:17.930 --> 00:05:21.440
so that once the content
is actually loaded,

00:05:21.440 --> 00:05:24.770
you can submit the print
job to the print services.

00:05:24.770 --> 00:05:28.810
So if you want to include
graphics in your HTML content,

00:05:28.810 --> 00:05:31.390
just place them in the assets
directory for a project

00:05:31.390 --> 00:05:34.180
and specify the path to
this folder as a parameter

00:05:34.180 --> 00:05:37.530
to the loadDataWithBaseURL
method instead of passing null,

00:05:37.530 --> 00:05:39.230
as we did in this example.

00:05:39.230 --> 00:05:40.730
You can also load
an actual web page

00:05:40.730 --> 00:05:43.560
for printing just by replacing
loadDataWithBase method

00:05:43.560 --> 00:05:45.070
call with load URL.

00:05:45.070 --> 00:05:48.600
And this is very convenient if
you actually have HTML content

00:05:48.600 --> 00:05:51.050
that you've generated
on the server side.

00:05:51.050 --> 00:05:54.310
Now there are a few limitations
of using HTML printing.

00:05:54.310 --> 00:05:57.060
And one is you cannot
add headers or footers,

00:05:57.060 --> 00:05:59.650
and this includes page numbers.

00:05:59.650 --> 00:06:02.790
Also, the user can't
specify print ranges.

00:06:02.790 --> 00:06:06.135
So for example, you can't
print page two to four

00:06:06.135 --> 00:06:08.670
of a 10-page HTML document.

00:06:08.670 --> 00:06:10.780
And also, an instance
of WebView can only

00:06:10.780 --> 00:06:13.460
process one print job at a time.

00:06:13.460 --> 00:06:16.080
And finally, WebView
printing from JavaScript

00:06:16.080 --> 00:06:17.110
is not yet supported.

00:06:17.110 --> 00:06:20.500
For example, window.print
JavaScript call will not work.

00:06:20.500 --> 00:06:23.640
We are planning to address these
limitations in future releases.

00:06:23.640 --> 00:06:27.770
And please feel free to
open Android open source

00:06:27.770 --> 00:06:29.920
bugs for features that you
feel are important that

00:06:29.920 --> 00:06:31.770
are missing or changes
that you want to see,

00:06:31.770 --> 00:06:36.200
because this feedback
is very valuable to us.

00:06:36.200 --> 00:06:39.110
So finally, there is
a PdfDocument class

00:06:39.110 --> 00:06:42.120
which allows you to very
quickly generate PDF content

00:06:42.120 --> 00:06:44.110
using the platform drawing APIs.

00:06:44.110 --> 00:06:47.750
So this new PDF document
API offers a convenient way

00:06:47.750 --> 00:06:51.470
for you do this by getting
a canvas object by calling

00:06:51.470 --> 00:06:54.519
the getCanvas method
on PdfDocument.

00:06:54.519 --> 00:06:57.060
Once you have the canvas, you
can draw your printable content

00:06:57.060 --> 00:07:00.141
on it using the standard
graphics APIs on Android.

00:07:00.141 --> 00:07:01.890
And when you're done
drawing your content,

00:07:01.890 --> 00:07:04.440
you simply submit the document
to the printing sub-system,

00:07:04.440 --> 00:07:06.920
and it'll just sprint.

00:07:06.920 --> 00:07:10.470
So finally, this DevByte
has been a quick overview

00:07:10.470 --> 00:07:11.492
of all that's available.

00:07:11.492 --> 00:07:13.200
If you want more
information, we actually

00:07:13.200 --> 00:07:16.067
have a training guide
called "Printing a Document"

00:07:16.067 --> 00:07:17.150
on developers.android.com.

00:07:17.150 --> 00:07:19.930
Thank you for joining us today.

00:07:19.930 --> 00:07:21.680
Take care.

