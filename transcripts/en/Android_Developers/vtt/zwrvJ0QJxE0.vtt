WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:05.664
[MUSIC PLAYING]

00:00:05.664 --> 00:00:07.920
BILL BILODEAU: Good afternoon.

00:00:07.920 --> 00:00:10.070
My name is Bill
Bilodeau, and I'm

00:00:10.070 --> 00:00:11.960
a developer advocate at Google.

00:00:16.650 --> 00:00:19.070
So today we're going
to talk about improving

00:00:19.070 --> 00:00:21.950
game performance so that
you can make high fidelity

00:00:21.950 --> 00:00:24.230
games on Android.

00:00:24.230 --> 00:00:27.110
The first part will be
about common performance

00:00:27.110 --> 00:00:31.400
issues and the profiling tools
you can use to find them.

00:00:31.400 --> 00:00:35.210
Next, Jungwoo from
Samsung will be talking

00:00:35.210 --> 00:00:38.570
about optimization techniques.

00:00:38.570 --> 00:00:40.610
And then, finally,
we'll hear from Duke

00:00:40.610 --> 00:00:43.190
at Netmarble about how
those techniques were

00:00:43.190 --> 00:00:46.340
put into practice in one of
their games, "Lineage 2."

00:00:52.960 --> 00:00:56.920
One of the best reasons for
making a high-performance game

00:00:56.920 --> 00:00:59.440
is to have high fidelity.

00:00:59.440 --> 00:01:02.170
When we say high
fidelity, we mean

00:01:02.170 --> 00:01:06.430
high-quality, realistic,
immersive graphics.

00:01:06.430 --> 00:01:09.880
High-fidelity games used
to be limited to just PCs

00:01:09.880 --> 00:01:11.200
and consoles.

00:01:11.200 --> 00:01:13.660
But with recent
improvements in hardware,

00:01:13.660 --> 00:01:16.570
it's now possible to
play these types of games

00:01:16.570 --> 00:01:17.320
on mobile devices.

00:01:19.860 --> 00:01:22.960
Even with the latest
hardware, developers still

00:01:22.960 --> 00:01:25.990
need to be aware of
performance issues.

00:01:25.990 --> 00:01:28.270
Before I talk about
that, I want to discuss

00:01:28.270 --> 00:01:30.487
some of the basic
concepts of rendering.

00:01:33.350 --> 00:01:36.290
Rendering commands
are built on the CPU.

00:01:36.290 --> 00:01:40.910
The graphics driver queues these
commands for the GPU to render.

00:01:40.910 --> 00:01:43.820
Because the GPU is a
separate processor,

00:01:43.820 --> 00:01:46.670
it runs asynchronously
with the CPU.

00:01:46.670 --> 00:01:49.580
This means that the
CPU can build commands

00:01:49.580 --> 00:01:54.110
for the current frame, while
the GPU renders commands

00:01:54.110 --> 00:01:56.870
from the previous frame.

00:01:56.870 --> 00:02:01.570
To avoid artifacts, frames are
displayed at VSync intervals.

00:02:01.570 --> 00:02:08.419
This is every
16.67 milliseconds.

00:02:08.419 --> 00:02:11.630
If the GPU misses a
VSync, the frame buffer

00:02:11.630 --> 00:02:15.290
is displayed at the next VSync.

00:02:15.290 --> 00:02:18.937
Too many missed VSyncs can
cause stuttering or janks.

00:02:21.560 --> 00:02:24.920
If the frame is not
a multiple of VSyncs,

00:02:24.920 --> 00:02:28.140
you can see uneven frame times.

00:02:28.140 --> 00:02:31.460
So, for example, let's say
we have a frame time that's

00:02:31.460 --> 00:02:34.310
about 20 milliseconds.

00:02:34.310 --> 00:02:38.180
It will display some of
the frames every two VSyncs

00:02:38.180 --> 00:02:42.020
and some frames every VSync.

00:02:42.020 --> 00:02:46.280
To smooth out the frame rate,
we can delay the rendering

00:02:46.280 --> 00:02:49.790
to make the frame time an
even VSync of intervals.

00:02:49.790 --> 00:02:52.280
As in this case, we'll
now see the display

00:02:52.280 --> 00:02:55.010
happening every other VSync.

00:02:55.010 --> 00:02:56.720
One of the advantages
of doing this

00:02:56.720 --> 00:02:59.750
is also that it
saves battery life

00:02:59.750 --> 00:03:02.690
because you are doing less
work on the CPU and GPU.

00:03:02.690 --> 00:03:04.370
The trade-off, of
course, is that you're

00:03:04.370 --> 00:03:08.280
doing less rendering.

00:03:08.280 --> 00:03:10.200
So let's look at some
of the issues that

00:03:10.200 --> 00:03:13.110
can cause slow performance.

00:03:13.110 --> 00:03:16.070
CPU activity can be a
cause of slow performance.

00:03:16.070 --> 00:03:21.180
A CPU bottleneck is when a
CPU can't keep up with a GPU.

00:03:21.180 --> 00:03:24.990
This means that the GPU is
waiting and idle, waiting

00:03:24.990 --> 00:03:27.180
for commands to be sent to it.

00:03:27.180 --> 00:03:30.240
This breaks the
parallelism between the CPU

00:03:30.240 --> 00:03:34.970
and the GPU, which
makes it less efficient.

00:03:34.970 --> 00:03:38.000
Some of the common
causes of CPU bottlenecks

00:03:38.000 --> 00:03:40.530
include too many draw calls.

00:03:40.530 --> 00:03:42.850
And this is because
with every draw call,

00:03:42.850 --> 00:03:46.400
there's a certain amount of
driver overhead on the CPU.

00:03:48.940 --> 00:03:51.010
Single threading can
also be an issue.

00:03:51.010 --> 00:03:53.710
This is when you put
too much on one thread,

00:03:53.710 --> 00:03:59.500
for example, rendering and game
simulation on the same thread.

00:03:59.500 --> 00:04:01.030
Now, both of these
could be improved

00:04:01.030 --> 00:04:03.526
with the Vulkan graphics API.

00:04:03.526 --> 00:04:04.900
If you remember
last year at I/O,

00:04:04.900 --> 00:04:08.470
we announced Vulkan
on Android devices.

00:04:08.470 --> 00:04:12.130
Vulkan is a more
explicit API than OpenGL

00:04:12.130 --> 00:04:15.190
and is closer to what the
hardware is actually doing.

00:04:15.190 --> 00:04:18.220
This means it has less
overhead per draw call.

00:04:18.220 --> 00:04:24.210
It can also do multithreaded
command buffers building.

00:04:24.210 --> 00:04:27.340
So another problem that could
be causing a CPU bottleneck

00:04:27.340 --> 00:04:28.930
is too many state
changes, and this

00:04:28.930 --> 00:04:32.240
adds to the driver overhead.

00:04:32.240 --> 00:04:35.205
The GPU can also be a
cause of slow performance.

00:04:35.205 --> 00:04:37.880
GPU bottlenecks
are when the GPU is

00:04:37.880 --> 00:04:42.140
taking too much time to render.

00:04:42.140 --> 00:04:45.560
The driver can help this
by buffering commands

00:04:45.560 --> 00:04:49.120
for a couple of frames, but
when this queue gets full,

00:04:49.120 --> 00:04:51.110
the CPU has to just wait.

00:04:53.630 --> 00:04:56.840
As with CPU bottlenecks,
this breaks the parallelism

00:04:56.840 --> 00:04:58.520
between the CPU and the GPU.

00:05:01.160 --> 00:05:05.960
Some of the common causes of
GPU bottlenecks are fill rate.

00:05:05.960 --> 00:05:10.170
On modern phones, the
resolution is very high.

00:05:10.170 --> 00:05:14.930
And this can be worse if
you have long fragmentators.

00:05:14.930 --> 00:05:18.080
One thing you can do is render
to a lower resolution buffer.

00:05:18.080 --> 00:05:20.750
Another problem could be high
polygon count, especially when

00:05:20.750 --> 00:05:23.450
you have very complex geometry.

00:05:23.450 --> 00:05:25.340
Buffer synchronization
can also be an issue.

00:05:25.340 --> 00:05:28.520
This is when the GPU has
to wait until the CPU is

00:05:28.520 --> 00:05:33.380
done writing to a buffer
that's shared between the two.

00:05:33.380 --> 00:05:34.900
And also, too many
state changes.

00:05:34.900 --> 00:05:38.100
As with CPU, too many state
changes can be a problem.

00:05:38.100 --> 00:05:42.470
These hardware state changes
can cause the graphics hardware

00:05:42.470 --> 00:05:45.580
to flush the pipeline,
which introduces a stall.

00:05:50.120 --> 00:05:54.230
Overheating is a common
issue with mobile devices.

00:05:54.230 --> 00:05:56.570
As the temperature
goes up, the system

00:05:56.570 --> 00:06:00.280
has a governor that makes the
frequency and voltage go down.

00:06:00.280 --> 00:06:03.650
This is called
thermal throttling.

00:06:03.650 --> 00:06:06.680
As the SOC cools, the
frequency and the voltage

00:06:06.680 --> 00:06:08.760
go back up again.

00:06:08.760 --> 00:06:11.930
But then, this leads to
unstable frame rates.

00:06:15.910 --> 00:06:19.840
Developers should not
overlook long load times.

00:06:19.840 --> 00:06:23.560
This can cause people to
stop playing their game.

00:06:23.560 --> 00:06:25.930
Cold loads are
when the game needs

00:06:25.930 --> 00:06:28.870
to load assets into memory.

00:06:28.870 --> 00:06:30.580
They may need to process assets.

00:06:30.580 --> 00:06:34.150
For example, you may need
to decompress assets.

00:06:34.150 --> 00:06:36.460
You also may need
to compile shaders.

00:06:36.460 --> 00:06:39.220
This all takes time on the CPU.

00:06:39.220 --> 00:06:41.800
You might try caching to
avoid duplicating this work

00:06:41.800 --> 00:06:42.820
every time you load.

00:06:45.970 --> 00:06:49.160
Battery performance
is also important.

00:06:49.160 --> 00:06:52.750
This affects how long your
users can play the game.

00:06:52.750 --> 00:06:57.380
Unfortunately, high-performance
games tend to use more battery.

00:06:57.380 --> 00:07:01.230
Vulkan can also help with this
because it uses the CPU less.

00:07:01.230 --> 00:07:04.090
This is important
because the CPU

00:07:04.090 --> 00:07:06.430
runs at a higher clock
speed than the GPU,

00:07:06.430 --> 00:07:07.610
so it uses more power.

00:07:10.250 --> 00:07:13.280
To detect issues
like this, there

00:07:13.280 --> 00:07:15.510
are several tools available.

00:07:15.510 --> 00:07:19.670
Unfortunately, one
tool may not be enough.

00:07:19.670 --> 00:07:22.400
For example, if you're
doing low-level profiling,

00:07:22.400 --> 00:07:26.240
you may want to see the hardware
counters, like on the GPU.

00:07:26.240 --> 00:07:28.700
This requires vendors
specific tools.

00:07:31.470 --> 00:07:33.500
So the first one we'll
look at is Systrace,

00:07:33.500 --> 00:07:35.770
and this is from Google.

00:07:35.770 --> 00:07:38.390
Systrace is a
system trace viewer,

00:07:38.390 --> 00:07:41.300
and it shows threads
executing on the CPU.

00:07:41.300 --> 00:07:46.970
The longer the trace, the more
time is being spent executing.

00:07:46.970 --> 00:07:50.450
You can use custom trace
events in your game

00:07:50.450 --> 00:07:52.820
to see how different
sections of the game take,

00:07:52.820 --> 00:07:54.980
how long they take.

00:07:54.980 --> 00:07:57.110
This can also show you
how much concurrency

00:07:57.110 --> 00:07:58.640
there is within your game.

00:08:01.254 --> 00:08:02.670
One thing you can
do with Systrace

00:08:02.670 --> 00:08:05.330
is see system activity
relative to your game

00:08:05.330 --> 00:08:07.820
and see potential dependencies
that could be causing things

00:08:07.820 --> 00:08:10.220
to run slow.

00:08:10.220 --> 00:08:13.760
For more information, you
should watch this session that

00:08:13.760 --> 00:08:16.640
was presented earlier
at I/O, and we have

00:08:16.640 --> 00:08:18.285
it recorded on the I/O website.

00:08:21.580 --> 00:08:25.030
Simpleperf is a CPU
profiler from Google.

00:08:25.030 --> 00:08:27.160
It shows the percentages
of time spent

00:08:27.160 --> 00:08:29.380
in various parts of the game.

00:08:29.380 --> 00:08:33.970
For example, we can use it to
find the percentage of time

00:08:33.970 --> 00:08:36.250
spent in shared libraries.

00:08:36.250 --> 00:08:39.610
And that way, we can tell where
most of the time was spent.

00:08:39.610 --> 00:08:43.330
We can then look at, say, one
of these shared libraries,

00:08:43.330 --> 00:08:45.850
and then see how much
percentage of time

00:08:45.850 --> 00:08:48.310
was spent in each
of the functions.

00:08:48.310 --> 00:08:50.560
Now, one caveat with
Simpleperf right now

00:08:50.560 --> 00:08:52.360
is it's not very easy to use.

00:08:52.360 --> 00:08:55.090
It requires a certain
amount of setup,

00:08:55.090 --> 00:08:56.650
and it's only command line.

00:08:56.650 --> 00:08:59.410
But once you get
the hang of it, it's

00:08:59.410 --> 00:09:02.390
actually producing some
valuable information.

00:09:05.820 --> 00:09:09.000
Other profilers include the
hardware vendor profilers.

00:09:09.000 --> 00:09:12.980
For example, Qualcomm has
a Snapdragon Profiler,

00:09:12.980 --> 00:09:17.870
ARM has Streamline, and Nvidia
has the Tegra System Profiler.

00:09:17.870 --> 00:09:19.680
Game engines also
have profilers.

00:09:19.680 --> 00:09:23.370
For example, Unity and Unreal
have built-in profilers.

00:09:23.370 --> 00:09:25.650
And also, there are
graphics debuggers,

00:09:25.650 --> 00:09:29.130
like RenderDoc and
Google's GAPID.

00:09:29.130 --> 00:09:31.460
These tools can
capture API calls

00:09:31.460 --> 00:09:34.275
that can help you find
inefficiencies in the API.

00:09:38.680 --> 00:09:41.250
So here's an
example of profiling

00:09:41.250 --> 00:09:45.370
a game using the Qualcomm
Snapdragon profiler.

00:09:45.370 --> 00:09:49.420
Let's see if we can find
out where the bottleneck is.

00:09:49.420 --> 00:09:53.620
It shows CPU traces
similar to Systrace,

00:09:53.620 --> 00:09:57.340
and it also shows GPU traces.

00:09:57.340 --> 00:10:00.280
So on the lower part
of this display here,

00:10:00.280 --> 00:10:03.580
we can see the CPU
scheduling with colors

00:10:03.580 --> 00:10:05.890
corresponding to each thread.

00:10:05.890 --> 00:10:08.860
On the upper part
is the GPU activity,

00:10:08.860 --> 00:10:13.127
where the blue bars represent
when the GPU is rendering.

00:10:13.127 --> 00:10:14.710
Now, the first thing
we'll notice here

00:10:14.710 --> 00:10:17.800
is that the GPU was
idle for a long time.

00:10:17.800 --> 00:10:19.900
That's bad.

00:10:19.900 --> 00:10:26.950
In contrast, the CPU core 1
is busy almost the whole time.

00:10:26.950 --> 00:10:31.500
This is a classic case
of a CPU bottleneck.

00:10:31.500 --> 00:10:33.250
Now, we might be able
to multithread this,

00:10:33.250 --> 00:10:35.083
but in this case, this
is the render thread.

00:10:35.083 --> 00:10:37.310
In OpenGL, you can't do
multithreaded rendering.

00:10:37.310 --> 00:10:40.840
So let's take a closer
look at what's going on

00:10:40.840 --> 00:10:42.460
by doing a frame capture.

00:10:42.460 --> 00:10:47.440
Now, frame capture shows us the
API call similar to debuggers

00:10:47.440 --> 00:10:50.200
like RenderDoc.

00:10:50.200 --> 00:10:52.120
And if we look at
the frame capture,

00:10:52.120 --> 00:10:53.800
if we look at the
draw calls, there's

00:10:53.800 --> 00:10:55.850
a lot of draw calls
going on here.

00:10:55.850 --> 00:10:58.330
almost 1,500 draw calls.

00:10:58.330 --> 00:11:02.140
That's actually a lot,
too much for a mobile CPU.

00:11:02.140 --> 00:11:06.340
Now, remember, with every draw
call, there's CPU overhead.

00:11:06.340 --> 00:11:07.420
And that all adds up.

00:11:09.950 --> 00:11:13.360
So one thing we can do
is we can draw less,

00:11:13.360 --> 00:11:16.270
or we can batch these
draw calls together

00:11:16.270 --> 00:11:19.465
by the ones that have the same
materials, batch them together,

00:11:19.465 --> 00:11:21.340
and then you will have
fewer draw calls which

00:11:21.340 --> 00:11:24.130
will improve performance.

00:11:24.130 --> 00:11:32.350
Our next speaker is Jungwoo Kim,
and he is a principal engineer

00:11:32.350 --> 00:11:33.460
at Samsung.

00:11:33.460 --> 00:11:37.060
He will talk about
game optimizations.

00:11:37.060 --> 00:11:43.560
[APPLAUSE]

00:11:43.560 --> 00:11:44.940
JUNGWOO KIM: Thank you, Bill.

00:11:44.940 --> 00:11:46.080
I'm Jungwoo Kim.

00:11:46.080 --> 00:11:50.320
I'm managing GPU driver,
graphics performance for Galaxy

00:11:50.320 --> 00:11:53.670
product, and also rating Khronos
standard and game [? job ?]

00:11:53.670 --> 00:11:55.872
[? tag ?] in Samsung
Mobile division.

00:11:55.872 --> 00:11:58.380
So I will talk
about what should be

00:11:58.380 --> 00:12:00.990
the right direction
of gaming optimization

00:12:00.990 --> 00:12:05.250
and also some bad practices
from our real experiences.

00:12:05.250 --> 00:12:08.910
I think you all know that
Samsung is a good phone maker,

00:12:08.910 --> 00:12:12.390
but you may not know about
we are working with many game

00:12:12.390 --> 00:12:15.960
developers for improving
[INAUDIBLE] system entirely.

00:12:15.960 --> 00:12:21.800
[? It's sad. ?] So we are
working with over 50 game

00:12:21.800 --> 00:12:27.470
studios and developers with
around the 30 game titles, too.

00:12:27.470 --> 00:12:30.600
with various kind of ways
under our new game developer

00:12:30.600 --> 00:12:34.180
support program, Galaxy
GameDev, from March last year.

00:12:34.180 --> 00:12:35.810
And thank you, partners.

00:12:35.810 --> 00:12:40.430
I also strongly appreciate my
team in Suwon HQ, in the UK,

00:12:40.430 --> 00:12:43.310
US, and Ukraine to
support partners

00:12:43.310 --> 00:12:47.160
with endless overnight
work with many beers.

00:12:51.170 --> 00:12:53.480
During our supporting
game developers,

00:12:53.480 --> 00:12:55.910
we also have a
question about what

00:12:55.910 --> 00:12:59.630
would be the real goal
of gaming optimization.

00:12:59.630 --> 00:13:04.220
Just keeping stable frames per
second like this smile mark?

00:13:04.220 --> 00:13:06.860
But it looks like it's getting
boring by frame by frame

00:13:06.860 --> 00:13:08.690
and doesn't look
like it will bring

00:13:08.690 --> 00:13:11.900
high fidelity to any games.

00:13:11.900 --> 00:13:14.570
Like this, quality
level also would

00:13:14.570 --> 00:13:17.340
be another point we
have to take care,

00:13:17.340 --> 00:13:20.240
the resolutions in
complexity and more

00:13:20.240 --> 00:13:22.450
visual intensive graphics.

00:13:22.450 --> 00:13:27.200
The games will have more rich
content with better quality,

00:13:27.200 --> 00:13:29.150
and this can make
games fun to play.

00:13:31.800 --> 00:13:33.970
But traditional
optimization is just

00:13:33.970 --> 00:13:37.770
traded off between quality
and performance, always.

00:13:37.770 --> 00:13:40.050
If we want to get more
frames per second,

00:13:40.050 --> 00:13:43.230
then we should
expect less quality.

00:13:43.230 --> 00:13:46.170
Low content quality is
the reason of boring.

00:13:46.170 --> 00:13:49.230
Users will leave easily,
even the game is still

00:13:49.230 --> 00:13:53.150
keeping 60 frame per second.

00:13:53.150 --> 00:13:55.440
Some graphics
extensions will give you

00:13:55.440 --> 00:13:58.990
a way to manage both
quality and performance,

00:13:58.990 --> 00:14:02.250
but it works only with
some corner cases.

00:14:05.050 --> 00:14:07.350
How we can make this?

00:14:07.350 --> 00:14:08.580
This is even a year ago.

00:14:08.580 --> 00:14:11.910
Vulkan demo [INAUDIBLE]
what we showed to you

00:14:11.910 --> 00:14:14.250
during our S7
[? unpack. ?] Now, how

00:14:14.250 --> 00:14:16.530
can we chase both
quality and performance

00:14:16.530 --> 00:14:21.600
at the same time with
more general use cases?

00:14:21.600 --> 00:14:24.600
I want to show one simple
example from [? the address ?]

00:14:24.600 --> 00:14:26.910
[? side ?] because
we are phone maker.

00:14:26.910 --> 00:14:29.880
The thermal throttling is
one of the critical problems

00:14:29.880 --> 00:14:31.900
of phone makers like us.

00:14:31.900 --> 00:14:34.470
And Samsung has a good
structure of managing therma.

00:14:34.470 --> 00:14:42.120
From AP chipset, but it's stuck
in a certain level nowadays.

00:14:42.120 --> 00:14:45.960
So we optimize the structure
of a heat spreader and changing

00:14:45.960 --> 00:14:50.160
interface material has a nine
times better conductivity

00:14:50.160 --> 00:14:52.990
between a heat spreader
and AP chipset.

00:14:52.990 --> 00:14:57.300
So now, Galaxy 8 has seven
[INAUDIBLE] AP chipset

00:14:57.300 --> 00:14:59.610
[INAUDIBLE] in
worst case scenario,

00:14:59.610 --> 00:15:02.310
and this gives more
comfortable experience to user

00:15:02.310 --> 00:15:04.560
when they play games.

00:15:04.560 --> 00:15:08.130
This is not just trade-off
but making fundamental changes

00:15:08.130 --> 00:15:11.240
to big breakthrough jump.

00:15:11.240 --> 00:15:13.980
Then how we can
do similar things

00:15:13.980 --> 00:15:16.740
with softer side,
not harder side,

00:15:16.740 --> 00:15:19.530
chasing both quality
and performance?

00:15:19.530 --> 00:15:22.610
We strongly believe the
answer should be Vulkan.

00:15:26.770 --> 00:15:29.510
Vulkan is open standard
cross platform,

00:15:29.510 --> 00:15:34.120
new generation graphics
API from Khronos Group.

00:15:34.120 --> 00:15:38.140
It's really thin, lightweight,
predictable, portable,

00:15:38.140 --> 00:15:39.690
and cacheable.

00:15:39.690 --> 00:15:42.760
It supports [? predictable ?]
explicit control

00:15:42.760 --> 00:15:46.390
and delivers a bunch of great
tools to optimize your games.

00:15:46.390 --> 00:15:49.360
We have many times faced
at [? nothing ?] [? do ?]

00:15:49.360 --> 00:15:53.190
[? more ?] situation except
dropping quality with old API

00:15:53.190 --> 00:15:55.300
GL ES.

00:15:55.300 --> 00:15:59.650
OpenGL ES is easy to use and
can make quick prototyping,

00:15:59.650 --> 00:16:02.440
so it's still usable
for some use cases.

00:16:05.410 --> 00:16:10.760
But we believe that Vulkan
is breakthrough jump

00:16:10.760 --> 00:16:15.180
like I showed to you with the
hardware example and softer

00:16:15.180 --> 00:16:17.850
side.

00:16:17.850 --> 00:16:20.740
First, lower CPU overhead.

00:16:20.740 --> 00:16:23.730
Vulkan is a thin structure,
so driver can have

00:16:23.730 --> 00:16:26.120
very small overhead in CPU.

00:16:26.120 --> 00:16:29.970
The over 100 draw calls can
easily spend some milliseconds

00:16:29.970 --> 00:16:33.330
with the GL ES,
but Vulkan doesn't.

00:16:33.330 --> 00:16:36.330
This will give you some
margin on resources,

00:16:36.330 --> 00:16:39.450
and you can use this
for your own purposes

00:16:39.450 --> 00:16:42.390
like better performance
or longer battery life.

00:16:45.180 --> 00:16:48.630
We implemented many
[INAUDIBLE] Vulkan samples

00:16:48.630 --> 00:16:51.990
to prove Vulkan is a really good
thing to our marketing team.

00:16:51.990 --> 00:16:55.230
You may not even
imagine how many samples

00:16:55.230 --> 00:16:56.970
we implemented
before S7 launched

00:16:56.970 --> 00:16:59.610
for convincing internal people.

00:16:59.610 --> 00:17:01.440
This is a regular
demo, which one

00:17:01.440 --> 00:17:08.010
sample which our team developed
for around September 2015.

00:17:08.010 --> 00:17:12.119
You can see left side Vulkan
uses similar or less CPU

00:17:12.119 --> 00:17:14.909
but renders almost double
or more frames per second

00:17:14.909 --> 00:17:15.630
than GL ES.

00:17:19.720 --> 00:17:23.290
You may think this is just a
demo sample or a corner case,

00:17:23.290 --> 00:17:26.380
but Vulkan works with
the real games, too.

00:17:26.380 --> 00:17:27.940
Here is "Vainglory."

00:17:27.940 --> 00:17:32.470
We have been working with Super
Evil Megacorp since April 2016.

00:17:32.470 --> 00:17:34.280
You can see the
right side of Vulkan

00:17:34.280 --> 00:17:38.410
shows much stable frame per
second without big frame drops.

00:17:38.410 --> 00:17:41.360
We see around a 20%
performance gain,

00:17:41.360 --> 00:17:45.850
near 60 frame per second in
even throttling situation

00:17:45.850 --> 00:17:49.330
with the Galaxy S7.

00:17:49.330 --> 00:17:52.240
Second, explicit control.

00:17:52.240 --> 00:17:54.460
You can manage precise
command buffer submits

00:17:54.460 --> 00:17:58.810
from one of each render place
or one for some groups of render

00:17:58.810 --> 00:18:00.840
places.

00:18:00.840 --> 00:18:04.030
You also can change dependence
between each pipeline stage

00:18:04.030 --> 00:18:06.360
with the pipeline
barrier function.

00:18:06.360 --> 00:18:09.820
If you give barrier between
fragment to [? vertex ?] stage,

00:18:09.820 --> 00:18:11.620
then every
[? vertex ?] stage will

00:18:11.620 --> 00:18:15.550
wait until finishing
previous fragment stage.

00:18:15.550 --> 00:18:18.435
If you change barrier
between every frame stage,

00:18:18.435 --> 00:18:22.360
fragment stage, then there will
be no waiting between fragment

00:18:22.360 --> 00:18:25.440
to [? vertex ?] stage anymore.

00:18:25.440 --> 00:18:28.960
You also can manage the
memory more precisely.

00:18:28.960 --> 00:18:32.230
You can use different memory
time for each performance.

00:18:32.230 --> 00:18:38.740
And this will give you more
optimal memory management.

00:18:38.740 --> 00:18:40.960
So this is the [? DS-5 ?]
[? Streamline ?] capture

00:18:40.960 --> 00:18:43.570
of a certain game
we are working with.

00:18:43.570 --> 00:18:46.780
First capture shows
original GL ES.

00:18:46.780 --> 00:18:50.140
And there are wide gaps between
each render places coming

00:18:50.140 --> 00:18:54.070
from CPU overhead of some 100
draw calls for each render

00:18:54.070 --> 00:18:54.810
pass.

00:18:54.810 --> 00:18:58.660
12 milliseconds for GPU
processing is required.

00:18:58.660 --> 00:19:01.150
Even after we port
everything with Vulkan

00:19:01.150 --> 00:19:04.240
but can [? cease ?]
capture number two,

00:19:04.240 --> 00:19:08.570
worst performance,
like 24 millisecond.

00:19:08.570 --> 00:19:12.160
This comes from using
wrong pipeline barrier.

00:19:12.160 --> 00:19:15.790
Then, number three is now
showing the pipeline barrier,

00:19:15.790 --> 00:19:21.130
and then this takes
just 12 milliseconds.

00:19:21.130 --> 00:19:23.170
Third, uniform.

00:19:23.170 --> 00:19:26.710
Uniform is one of the critical
parts of graphics programming.

00:19:26.710 --> 00:19:29.370
This has a basic
intention of interaction

00:19:29.370 --> 00:19:32.130
between CPU and GPU.

00:19:32.130 --> 00:19:35.070
So it can give
quite a big impact

00:19:35.070 --> 00:19:37.570
to performance in many cases.

00:19:37.570 --> 00:19:40.050
But you can manage
uniform buffer in Vulkan

00:19:40.050 --> 00:19:43.000
to get less or
better performance.

00:19:43.000 --> 00:19:46.056
We've developed four different
incremental implementations

00:19:46.056 --> 00:19:48.680
from [? brute ?] [? force ?] to
either condition of [INAUDIBLE]

00:19:48.680 --> 00:19:50.640
opposite way.

00:19:50.640 --> 00:19:53.040
And you can see the
performance difference

00:19:53.040 --> 00:19:56.610
is from the one frame per second
to the 43 frames per second.

00:20:04.760 --> 00:20:09.930
Let's see the video clips from
our 1,250 draw calls sample.

00:20:09.930 --> 00:20:13.140
Implementation like this,
Vulkan gives you the ability

00:20:13.140 --> 00:20:15.930
to control things precisely.

00:20:15.930 --> 00:20:20.485
But you may also feel
it is hard to handle.

00:20:20.485 --> 00:20:25.420
But you don't have to
worry about being handled

00:20:25.420 --> 00:20:28.120
by yourself, all the things
with Vulkan implementation,

00:20:28.120 --> 00:20:32.470
but the game engine
supports now Vulkan.

00:20:32.470 --> 00:20:35.530
We worked with Epic
Games from May 2015

00:20:35.530 --> 00:20:39.390
for the UE 4's
Vulkan supporting.

00:20:39.390 --> 00:20:43.030
They released 4.12 as
first Vulkan RHI for UE 4

00:20:43.030 --> 00:20:45.220
and recent release
Vulkan support is now

00:20:45.220 --> 00:20:48.320
getting better and better.

00:20:48.320 --> 00:20:52.100
We've work with Unity for
supporting Vulkan in Unity 5

00:20:52.100 --> 00:20:57.080
since September 2016, and
5.6 was released recently

00:20:57.080 --> 00:21:01.840
at the first official Vulkan
render support Unity version.

00:21:01.840 --> 00:21:05.290
To wrap up, we believe
Vulkan is the answer

00:21:05.290 --> 00:21:08.140
for chasing both quality
and performance to develop

00:21:08.140 --> 00:21:10.750
high-fidelity games on
Android from many experiences

00:21:10.750 --> 00:21:14.440
with our partner game
companies and developers.

00:21:14.440 --> 00:21:18.160
It can give more performance,
longer battery life, less heat

00:21:18.160 --> 00:21:22.380
problem, more visual
quality to your game.

00:21:22.380 --> 00:21:25.000
A little bit complicated,
but still, game engine

00:21:25.000 --> 00:21:28.900
will help you can use it even
without any understanding

00:21:28.900 --> 00:21:30.944
of Vulkan implementation.

00:21:33.690 --> 00:21:37.200
One more thing,
Vulkan will help more

00:21:37.200 --> 00:21:39.870
with mass mainstream devices.

00:21:39.870 --> 00:21:42.420
We tested with one
of Vulkan's games

00:21:42.420 --> 00:21:46.830
with both Galaxy S7
and A5 2017 model

00:21:46.830 --> 00:21:50.020
and see more performance
gain with the Galaxy A5.

00:21:50.020 --> 00:21:52.110
Even Flagship shows
better performance,

00:21:52.110 --> 00:21:55.670
but Vulkan will boost
more with mass product.

00:21:55.670 --> 00:21:59.080
So Vulkan is not only a
Flagship feature anymore.

00:21:59.080 --> 00:22:02.040
We are all ready to develop
high-fidelity gaming.

00:22:02.040 --> 00:22:07.540
Android devices, technologies,
platforms are all set up.

00:22:07.540 --> 00:22:12.370
I want to introduce Duke to
introduce about the "Lineage 2

00:22:12.370 --> 00:22:14.374
Revolution" case study.

00:22:14.374 --> 00:22:24.330
[APPLAUSE]

00:22:24.330 --> 00:22:26.570
DUKE DONGHYUN KIM: Thank you.

00:22:26.570 --> 00:22:28.980
Yeah, developing
"Lineage 2" [INAUDIBLE]

00:22:28.980 --> 00:22:32.610
on the mobile as launched.

00:22:32.610 --> 00:22:34.500
My name is Duke.

00:22:34.500 --> 00:22:38.040
I'm a VP of Marketing
Intelligence in mobile.

00:22:38.040 --> 00:22:41.040
And I'm here to introduce
"Lineage 2 Revolution"

00:22:41.040 --> 00:22:43.860
and to share Samsung and
Google, and then mobile

00:22:43.860 --> 00:22:47.050
[? core working, ?] what kind
of [? digital ?] [INAUDIBLE] we

00:22:47.050 --> 00:22:49.800
made with you.

00:22:49.800 --> 00:22:52.670
Last year, I did a
show speech like this,

00:22:52.670 --> 00:22:56.340
and that was a part
of my bad memory.

00:22:56.340 --> 00:23:00.170
So at this time, not to make
that kind of thing again,

00:23:00.170 --> 00:23:01.820
this time I prepared
many video clips

00:23:01.820 --> 00:23:05.490
so that we will
not make you bored.

00:23:05.490 --> 00:23:10.620
So before talking, I want to
show you a very short clip

00:23:10.620 --> 00:23:14.140
of "Lineage 2."

00:23:14.140 --> 00:23:39.951
[VIDEO PLAYBACK]

00:23:39.951 --> 00:23:40.534
[END PLAYBACK]

00:23:40.534 --> 00:23:41.492
DUKE DONGHYUN KIM: Yup.

00:23:41.492 --> 00:23:44.540
[APPLAUSE]

00:23:44.540 --> 00:23:47.240
Yeah, one thing I want
to tell you is this

00:23:47.240 --> 00:23:50.800
is the actual game play video
on a mobile device, maybe

00:23:50.800 --> 00:23:53.520
Samsung S7, maybe.

00:23:53.520 --> 00:23:56.980
I think our title could be
called a high-performance game

00:23:56.980 --> 00:23:59.810
by graphic quality, at least.

00:23:59.810 --> 00:24:02.480
But to my boss, the
most important thing

00:24:02.480 --> 00:24:05.660
may be that high
performance means high KPI.

00:24:05.660 --> 00:24:09.110
So I want to share what kind of
KPI we are achieving in Korea.

00:24:11.880 --> 00:24:12.730
Yup.

00:24:12.730 --> 00:24:13.730
Record-breaking success.

00:24:15.910 --> 00:24:18.020
"Lineage Revolution"
was a huge success.

00:24:18.020 --> 00:24:21.400
Just 30 days after
launch, this title

00:24:21.400 --> 00:24:28.550
achieved over US $176
million only in South Korea.

00:24:28.550 --> 00:24:32.450
We just opened the
title in South Korea.

00:24:32.450 --> 00:24:37.330
It took us only 17 days
to earn US $100 million,

00:24:37.330 --> 00:24:41.420
and a huge [? base ?] five
million monthly active users.

00:24:41.420 --> 00:24:47.360
That is the same amount as 10%
of the South Korea population.

00:24:47.360 --> 00:24:49.870
Every number is recording
in South Korea mobile gaming

00:24:49.870 --> 00:24:50.370
industry.

00:24:53.480 --> 00:24:58.920
And it recorded over two
million daily active users.

00:24:58.920 --> 00:25:01.610
We do our best to
keep this number.

00:25:04.630 --> 00:25:08.830
Because "Lineage 2
Revolution" is MMORPG,

00:25:08.830 --> 00:25:12.630
the max number of concurrent
users is very, very important.

00:25:12.630 --> 00:25:18.250
And it records 740,000 five
weeks later after launch.

00:25:18.250 --> 00:25:22.030
It's a huge amount of people.

00:25:22.030 --> 00:25:25.740
Finally, according to
SuperData Research,

00:25:25.740 --> 00:25:27.910
"Lineage 2 Revolution"
was the number one title

00:25:27.910 --> 00:25:30.190
in global mobile
market in February.

00:25:30.190 --> 00:25:33.920
Only in February, just one
month, but we are proud of it.

00:25:33.920 --> 00:25:37.270
As I said, we just opened
this title only in Korea,

00:25:37.270 --> 00:25:41.530
and the Korean mobile market
is not small but not big.

00:25:41.530 --> 00:25:43.720
What I want to say is,
number one in Korea

00:25:43.720 --> 00:25:45.460
doesn't mean one in global.

00:25:45.460 --> 00:25:50.020
But February, we make that.

00:25:50.020 --> 00:25:52.530
To make this kind
of result, when

00:25:52.530 --> 00:25:54.330
we planned to
develop this title,

00:25:54.330 --> 00:25:57.490
we had three major
goals to make it to be

00:25:57.490 --> 00:26:01.540
the next [? global ?] title.

00:26:01.540 --> 00:26:05.771
The first thing is [INAUDIBLE]
console graphic quality.

00:26:05.771 --> 00:26:08.020
We just want to take [INAUDIBLE]
graphics [INAUDIBLE].

00:26:10.870 --> 00:26:15.220
The second thing is vast,
open world environment.

00:26:15.220 --> 00:26:17.830
In Korea, before
"Lineage Revolution,"

00:26:17.830 --> 00:26:21.550
[INAUDIBLE] was an action RPG.

00:26:21.550 --> 00:26:25.690
And action RPG means every
user tried every stage

00:26:25.690 --> 00:26:30.060
for enjoying game, and that
then made many people bored.

00:26:30.060 --> 00:26:34.110
So we thought open world
would be an answer for that.

00:26:36.820 --> 00:26:39.560
And massive castle sieges.

00:26:39.560 --> 00:26:44.240
Massive castle sieges
is very important.

00:26:44.240 --> 00:26:50.320
Why that is important is to
extend our title lifespan,

00:26:50.320 --> 00:26:53.290
making new content
is not enough.

00:26:53.290 --> 00:26:54.530
It takes too much time.

00:26:54.530 --> 00:26:56.170
It takes too much money.

00:26:56.170 --> 00:27:00.340
So to extend our lifespan,
the most important thing

00:27:00.340 --> 00:27:06.490
is making user build their
community based on our content.

00:27:06.490 --> 00:27:09.850
That content is castle sieges.

00:27:09.850 --> 00:27:11.620
I want to show you two clips.

00:27:11.620 --> 00:27:14.350
One clip is introduction
clip, and the other

00:27:14.350 --> 00:27:19.545
is actual game play video.

00:27:19.545 --> 00:27:21.042
[VIDEO PLAYBACK]

00:27:21.042 --> 00:27:22.539
[MUSIC PLAYING]

00:29:36.770 --> 00:29:38.450
[END PLAYBACK]

00:29:38.450 --> 00:29:41.040
DUKE DONGHYUN KIM: Yeah, this
is the introduction video

00:29:41.040 --> 00:29:42.980
of castle sieges mode.

00:29:42.980 --> 00:29:44.630
The one thing I
want to tell you is,

00:29:44.630 --> 00:29:47.950
to enjoy this kind
of a good content,

00:29:47.950 --> 00:29:50.890
every user have to make--
build their own clan,

00:29:50.890 --> 00:29:54.080
and they have to discuss
about how to win,

00:29:54.080 --> 00:29:55.850
how to beat the others.

00:29:55.850 --> 00:30:00.920
And that means,
to enjoy this one,

00:30:00.920 --> 00:30:04.220
the users have to make it
from their own community.

00:30:04.220 --> 00:30:08.882
So this is actual play video.

00:30:08.882 --> 00:30:41.420
[VIDEO PLAYBACK]

00:30:41.420 --> 00:30:43.891
Next slide, please.

00:30:43.891 --> 00:30:47.230
[END PLAYBACK]

00:30:47.230 --> 00:30:49.150
OK.

00:30:49.150 --> 00:30:53.100
Yep, it's awesome.

00:30:53.100 --> 00:30:54.860
You can enjoy this
kind of content

00:30:54.860 --> 00:30:59.920
on your mobile phone, real-time
battle with up to 200 players.

00:30:59.920 --> 00:31:01.250
But that is not easy.

00:31:01.250 --> 00:31:04.730
There are so many
problems we had to solve.

00:31:04.730 --> 00:31:07.310
Something like the
stable frame rate

00:31:07.310 --> 00:31:09.980
and the [INAUDIBLE] problem,
and the battery problem, as Bill

00:31:09.980 --> 00:31:12.720
said earlier.

00:31:12.720 --> 00:31:15.290
So how to make it a [INAUDIBLE]?

00:31:15.290 --> 00:31:19.710
We thought Vulkan can
be one of our solutions.

00:31:19.710 --> 00:31:24.830
So we expected, with Vulkan,
we can solve the frame rate

00:31:24.830 --> 00:31:28.700
problem and also,
our battery problems.

00:31:28.700 --> 00:31:30.650
So this is an actual example.

00:31:30.650 --> 00:31:35.190
[VIDEO PLAYBACK]

00:31:35.190 --> 00:31:37.710
The upside is using Vulkan.

00:31:37.710 --> 00:31:40.110
The downside is
just using OpenGL.

00:31:43.020 --> 00:31:47.160
You can check the frame rate.

00:31:47.160 --> 00:31:49.310
The Vulkan version
is more stable.

00:31:52.919 --> 00:31:55.310
[END PLAYBACK]

00:31:55.310 --> 00:31:56.490
This is another example.

00:31:56.490 --> 00:31:57.951
[VIDEO PLAYBACK]

00:32:09.067 --> 00:32:09.650
[END PLAYBACK]

00:32:09.650 --> 00:32:12.800
DUKE DONGHYUN KIM: And because
the frame rate is more stable,

00:32:12.800 --> 00:32:15.140
we can add more effect.

00:32:15.140 --> 00:32:18.400
This is the original version
of "Lineage 2 Revolution."

00:32:18.400 --> 00:32:21.140
This is using OpenGL.

00:32:21.140 --> 00:32:26.230
You can see very clear screen.

00:32:26.230 --> 00:32:29.160
And we add depth
of field effect.

00:32:32.100 --> 00:32:36.892
That makes user the feel
depths of the environment.

00:32:50.190 --> 00:32:53.200
So we chose to get
started, and we have teams

00:32:53.200 --> 00:32:56.400
throughout graphics to
maintain our position in Korea.

00:32:56.400 --> 00:32:59.530
And we plan to launch
this title outside Korea.

00:32:59.530 --> 00:33:04.000
And then you can enjoy this
content maybe in this year.

00:33:04.000 --> 00:33:08.440
That means we have to
make our title [INAUDIBLE]

00:33:08.440 --> 00:33:10.860
and device reader
keeping our edge.

00:33:10.860 --> 00:33:13.761
And we believe we can
do that with Vulkan.

00:33:13.761 --> 00:33:14.260
Thank you.

00:33:14.260 --> 00:33:18.580
[APPLAUSE]

00:33:18.580 --> 00:33:20.790
[MUSIC PLAYING]

