WEBVTT
Kind: captions
Language: en

00:00:07.715 --> 00:00:09.090
ALEXIS
MOUSSINE-POUCHKINE: Hello.

00:00:09.090 --> 00:00:11.340
Welcome back to Devoxx 2013.

00:00:11.340 --> 00:00:13.580
We're here right after
the Google keynote

00:00:13.580 --> 00:00:15.670
with Lars and Kasper.

00:00:15.670 --> 00:00:18.770
And welcome, guys,
and congratulations.

00:00:18.770 --> 00:00:21.454
You've just announced Dart 1.0.

00:00:21.454 --> 00:00:22.370
KASPER LUND: Sure did.

00:00:22.370 --> 00:00:23.540
LARS BAK: Fantastic news.

00:00:23.540 --> 00:00:23.910
ALEXIS MOUSSINE-POUCHKINE:
Yeah, I know.

00:00:23.910 --> 00:00:25.910
You've been working hard
on it, I'm pretty sure.

00:00:25.910 --> 00:00:28.034
LARS BAK: We've spent the
last two and a half years

00:00:28.034 --> 00:00:28.720
working on Dart.

00:00:28.720 --> 00:00:32.950
So finally it's out, and it
seems like it's well received.

00:00:32.950 --> 00:00:36.150
It's a fantastic new platform
for writing web applications.

00:00:36.150 --> 00:00:37.525
ALEXIS
MOUSSINE-POUCHKINE: Right.

00:00:37.525 --> 00:00:40.059
So give me the big
picture in terms

00:00:40.059 --> 00:00:42.100
of what it's trying to
do, the fact that it's not

00:00:42.100 --> 00:00:45.730
just a language, probably,
the elevator pitch.

00:00:45.730 --> 00:00:46.940
LARS BAK: The elevator pitch?

00:00:46.940 --> 00:00:47.230
ALEXIS MOUSSINE-POUCHKINE: Yes.

00:00:47.230 --> 00:00:48.930
It's going to be
short, first floor.

00:00:48.930 --> 00:00:49.810
LARS BAK: We only
get one [INAUDIBLE]?

00:00:49.810 --> 00:00:51.016
ALEXIS MOUSSINE-POUCHKINE:
Moving up.

00:00:51.016 --> 00:00:52.474
LARS BAK: The only
thing we want is

00:00:52.474 --> 00:00:54.590
to make a program that's
more efficient way when

00:00:54.590 --> 00:00:56.430
they write web applications.

00:00:56.430 --> 00:00:58.740
And today, there's
currently some obstacles.

00:00:58.740 --> 00:01:00.660
We think the language
is not structured enough

00:01:00.660 --> 00:01:04.250
for writing big applications,
lacking of tools.

00:01:04.250 --> 00:01:07.030
And we're trying to
solve that with Dart.

00:01:07.030 --> 00:01:10.540
And so Dart is a combination
of a programming language,

00:01:10.540 --> 00:01:13.920
a rich set of consistent
libraries, an IDE.

00:01:13.920 --> 00:01:16.360
And then we have
the final piece.

00:01:16.360 --> 00:01:18.950
We have Chromium
with Dart VM support.

00:01:18.950 --> 00:01:21.040
So that means that when
you do development,

00:01:21.040 --> 00:01:24.640
if you change the code,
you can try it right away.

00:01:24.640 --> 00:01:27.460
So no lag in tools
when using it.

00:01:27.460 --> 00:01:27.960
It

00:01:27.960 --> 00:01:29.543
KASPER LUND: I think
it's worth adding

00:01:29.543 --> 00:01:31.820
that in addition to having
that native way of running

00:01:31.820 --> 00:01:34.670
Dart code, you can also compile
Dart to JavaScript and run it

00:01:34.670 --> 00:01:36.200
across today's browsers.

00:01:36.200 --> 00:01:37.640
ALEXIS MOUSSINE-POUCHKINE:
Which would be probably--

00:01:37.640 --> 00:01:39.848
so you're talking about the
developer use case, which

00:01:39.848 --> 00:01:42.180
is as fast as possible
of a round trip,

00:01:42.180 --> 00:01:44.780
so you get immediate
feedback on your changes.

00:01:44.780 --> 00:01:46.880
And you're more addressing
the deployment story,

00:01:46.880 --> 00:01:48.960
which today probably
will be more

00:01:48.960 --> 00:01:50.180
about generating JavaScript.

00:01:50.180 --> 00:01:50.680
But--

00:01:50.680 --> 00:01:51.730
LARS BAK: It's a valid point.

00:01:51.730 --> 00:01:53.230
You need to deploy
your application.

00:01:53.230 --> 00:01:56.940
And by no means, we don't
want to fragment the web.

00:01:56.940 --> 00:02:00.200
So it's important that when
you translate that code

00:02:00.200 --> 00:02:03.570
into JavaScript, it'll work
on all the modern browsers.

00:02:03.570 --> 00:02:03.810
ALEXIS MOUSSINE-POUCHKINE:
So let's

00:02:03.810 --> 00:02:05.351
drill down just a
little bit on this.

00:02:05.351 --> 00:02:07.870
How good of a job are
you actually doing

00:02:07.870 --> 00:02:09.820
generating the JavaScript?

00:02:09.820 --> 00:02:12.470
How big, how efficient is the
code that's being generated?

00:02:12.470 --> 00:02:13.886
KASPER LUND: So
the generated code

00:02:13.886 --> 00:02:16.090
is getting very, very good.

00:02:16.090 --> 00:02:18.395
So we measure performance
of the generated code

00:02:18.395 --> 00:02:20.270
and the size of the
code, check it over time.

00:02:20.270 --> 00:02:21.936
And we've made lots
of good improvements

00:02:21.936 --> 00:02:24.430
there, to a point
where generated

00:02:24.430 --> 00:02:27.560
JavaScript code emitted
from the Dart to JS compiler

00:02:27.560 --> 00:02:30.240
is as efficient as handwritten
code for a lot of cases.

00:02:30.240 --> 00:02:31.090
ALEXIS MOUSSINE-POUCHKINE:
And I probably

00:02:31.090 --> 00:02:33.465
should have mentioned that
you guys are performance guys.

00:02:33.465 --> 00:02:35.500
You've been working
on Hotspot, on V8,

00:02:35.500 --> 00:02:37.010
and the goal every
time was really

00:02:37.010 --> 00:02:39.480
to enable a new
class of applications

00:02:39.480 --> 00:02:41.395
because the speed
was so much faster.

00:02:41.395 --> 00:02:42.770
KASPER LUND:
Performance is good.

00:02:42.770 --> 00:02:44.110
People tend to like it.

00:02:44.110 --> 00:02:45.670
It's easy that way.

00:02:45.670 --> 00:02:46.220
ALEXIS MOUSSINE-POUCHKINE:
Perfect.

00:02:46.220 --> 00:02:48.303
LARS BAK: One thing I
should add about performance

00:02:48.303 --> 00:02:52.410
is that if you increase
performance in a platform,

00:02:52.410 --> 00:02:54.740
you enable a new
class of applications

00:02:54.740 --> 00:02:55.910
to run on a platform.

00:02:55.910 --> 00:02:57.980
And that certainly
happened on the web,

00:02:57.980 --> 00:03:01.965
where over the last five years,
performance of the browser

00:03:01.965 --> 00:03:04.440
has just went through the roof.

00:03:04.440 --> 00:03:08.760
And suddenly, you see very
complex and very animated

00:03:08.760 --> 00:03:10.100
applications running on the web.

00:03:10.100 --> 00:03:11.890
And this is just
due to performance.

00:03:11.890 --> 00:03:14.340
When you give performance to
programmers, they'll use it.

00:03:14.340 --> 00:03:15.175
KASPER LUND: Especially
if you give them

00:03:15.175 --> 00:03:17.340
like 100 times
performance improvement.

00:03:17.340 --> 00:03:18.720
That really changes the game.

00:03:18.720 --> 00:03:20.350
Things that you
couldn't build before

00:03:20.350 --> 00:03:22.481
are suddenly possible to build.

00:03:22.481 --> 00:03:24.230
ALEXIS MOUSSINE-POUCHKINE:
So this is 1.0,

00:03:24.230 --> 00:03:26.675
and you guys are talking
performance already?

00:03:26.675 --> 00:03:27.550
KASPER LUND: Why not?

00:03:27.550 --> 00:03:28.070
ALEXIS MOUSSINE-POUCHKINE:
No, great.

00:03:28.070 --> 00:03:30.017
I think it's a great feature.

00:03:30.017 --> 00:03:31.600
Performance is always
a great feature.

00:03:31.600 --> 00:03:34.900
It tends to be a
1.1 or 2.0 feature.

00:03:34.900 --> 00:03:36.480
In this case, it's not.

00:03:36.480 --> 00:03:39.220
LARS BAK: I think Kasper forgot
to mention the Dart VM we have.

00:03:39.220 --> 00:03:40.730
We also have a VM for Dart.

00:03:40.730 --> 00:03:43.860
It's running twice as
fast as JavaScript.

00:03:43.860 --> 00:03:45.580
So it's not too bad.

00:03:45.580 --> 00:03:47.290
It's a good starting point.

00:03:47.290 --> 00:03:50.310
And we expect that over
the next year or two

00:03:50.310 --> 00:03:52.420
to dramatically
increase the speed,

00:03:52.420 --> 00:03:55.740
both on the translated code
to JavaScript, but also

00:03:55.740 --> 00:03:56.949
on the native implementation.

00:03:56.949 --> 00:03:58.781
ALEXIS MOUSSINE-POUCHKINE:
So the end result

00:03:58.781 --> 00:03:59.980
is web applications.

00:03:59.980 --> 00:04:01.720
But not only you can
go-- we'll probably

00:04:01.720 --> 00:04:03.430
talk about where else
you can use Dart.

00:04:03.430 --> 00:04:05.770
But who is this
really targeted at?

00:04:05.770 --> 00:04:07.070
What kind of developers?

00:04:07.070 --> 00:04:08.630
Is it JavaScript
developers today,

00:04:08.630 --> 00:04:11.389
web developers, maybe service
side, trying to get into--

00:04:11.389 --> 00:04:13.680
KASPER LUND: There's a lot
of interest from people that

00:04:13.680 --> 00:04:16.620
actually have a
background in Java, C#,

00:04:16.620 --> 00:04:20.060
that want to try to find a
good way of using their skills

00:04:20.060 --> 00:04:21.757
on the web for
building web apps.

00:04:21.757 --> 00:04:23.840
We certainly see a lot of
people interested there.

00:04:23.840 --> 00:04:26.131
ALEXIS MOUSSINE-POUCHKINE:
So worth mentioning probably

00:04:26.131 --> 00:04:27.900
is the optional typing.

00:04:27.900 --> 00:04:30.080
LARS BAK: Optional typing
is interesting in that you

00:04:30.080 --> 00:04:33.210
can start out doing prototyping
without being bothered

00:04:33.210 --> 00:04:34.310
by the types.

00:04:34.310 --> 00:04:36.930
When you then get your
structure into your program,

00:04:36.930 --> 00:04:40.850
you can start adding
static types in your APIs.

00:04:40.850 --> 00:04:44.270
So at least all the
teams that use your code

00:04:44.270 --> 00:04:45.964
can see how it should be used.

00:04:45.964 --> 00:04:47.630
KASPER LUND: Yes,
documenting the intent

00:04:47.630 --> 00:04:49.337
of your code makes
a ton of sense

00:04:49.337 --> 00:04:50.670
when you're working with people.

00:04:50.670 --> 00:04:52.753
LARS BAK: And it also makes
it much more readable.

00:04:52.753 --> 00:04:55.830
So given that you're serious
about doing web applications,

00:04:55.830 --> 00:04:58.480
your applications will
survive for a long time,

00:04:58.480 --> 00:05:00.740
and you need to maintain
that and refactor it.

00:05:00.740 --> 00:05:03.410
And the more intent you have
specified in the program,

00:05:03.410 --> 00:05:05.510
the easier it is to
maintain over time.

00:05:05.510 --> 00:05:07.720
KASPER LUND: A
simple description

00:05:07.720 --> 00:05:09.850
of that is that we
found that people that

00:05:09.850 --> 00:05:13.570
use Dart for writing web apps
have an easier time actually

00:05:13.570 --> 00:05:15.540
taking a sample and
understanding what it does

00:05:15.540 --> 00:05:17.580
and finding relevant
documentation from the type

00:05:17.580 --> 00:05:19.780
annotations than people
that start from JavaScript.

00:05:19.780 --> 00:05:21.320
Because you don't have
the types in there

00:05:21.320 --> 00:05:23.403
to tell you what to look
for in the documentation.

00:05:23.403 --> 00:05:24.532
So it's really helpful.

00:05:24.532 --> 00:05:26.490
ALEXIS MOUSSINE-POUCHKINE:
So other than types,

00:05:26.490 --> 00:05:28.920
it has everything you'd
expect from a modern language,

00:05:28.920 --> 00:05:32.870
so packages built in,
lambdas, all of those things.

00:05:32.870 --> 00:05:35.100
You want to talk about
maybe syntactic sugar?

00:05:35.100 --> 00:05:38.110
You've mentioned you've done
a demo during the keynote.

00:05:38.110 --> 00:05:38.860
KASPER LUND: Sure.

00:05:38.860 --> 00:05:43.380
So we try not to add too
much syntactic sugar.

00:05:43.380 --> 00:05:46.370
But sometimes, you just
want to express your code

00:05:46.370 --> 00:05:49.150
in a concise, nice way,
without repeating yourself

00:05:49.150 --> 00:05:50.440
over and over again.

00:05:50.440 --> 00:05:52.730
So we've added a few
things that make it easier

00:05:52.730 --> 00:05:55.300
to construct objects in
a simple and sane way

00:05:55.300 --> 00:05:58.320
without repeating the field
names and the parameter names

00:05:58.320 --> 00:06:01.510
all over the place, like it's
common in some other languages.

00:06:01.510 --> 00:06:03.620
So we've done a lot of
things to just cut down

00:06:03.620 --> 00:06:04.750
on the boilerplate.

00:06:04.750 --> 00:06:07.400
So we like to call it a
ceremony-free language.

00:06:07.400 --> 00:06:11.500
You don't have to write tons of
code just to get your stuff up

00:06:11.500 --> 00:06:12.000
and running.

00:06:12.000 --> 00:06:14.041
LARS BAK: And the feedback
from the products that

00:06:14.041 --> 00:06:15.950
are using Dart so far
has been that it's

00:06:15.950 --> 00:06:19.420
more compact than Java,
and it's very readable.

00:06:19.420 --> 00:06:21.220
So, so far, it looks good.

00:06:21.220 --> 00:06:23.150
It seems like we've
hit the sweet spot

00:06:23.150 --> 00:06:25.000
for what people are expecting.

00:06:25.000 --> 00:06:25.180
ALEXIS
MOUSSINE-POUCHKINE: What's

00:06:25.180 --> 00:06:28.000
quite impressive, I think, is
that you guys have pretty much

00:06:28.000 --> 00:06:29.980
started building a real
community around it.

00:06:29.980 --> 00:06:32.020
So because you have
package management,

00:06:32.020 --> 00:06:34.805
you have people
contributing those libraries

00:06:34.805 --> 00:06:36.390
in the form of packages.

00:06:36.390 --> 00:06:38.732
You have people using
it, early adopters.

00:06:38.732 --> 00:06:40.190
So tell me more
about the community

00:06:40.190 --> 00:06:43.110
and how it's been
used, and maybe what's

00:06:43.110 --> 00:06:44.740
Google's interest in all this.

00:06:44.740 --> 00:06:48.600
And is Google even using
Dart or planning to use it?

00:06:48.600 --> 00:06:50.460
LARS BAK: Of course
they're using Dart.

00:06:50.460 --> 00:06:53.470
So this is not a toy project.

00:06:53.470 --> 00:06:55.080
We're doing it for real.

00:06:55.080 --> 00:06:59.970
And we're serious about making
it a good platform for writing

00:06:59.970 --> 00:07:01.400
scalable web applications.

00:07:01.400 --> 00:07:04.350
One thing you have to bear
in mind, before we have Dart,

00:07:04.350 --> 00:07:07.660
you would find big
web projects that

00:07:07.660 --> 00:07:10.470
were using JavaScript
plus comments, where

00:07:10.470 --> 00:07:11.866
the types were put in comments.

00:07:11.866 --> 00:07:13.490
And you would, based
on these comments,

00:07:13.490 --> 00:07:18.550
try to figure out how the
program was stitched together.

00:07:18.550 --> 00:07:21.060
And we're just
taking the extra step

00:07:21.060 --> 00:07:22.780
in making a language
that supports that.

00:07:22.780 --> 00:07:25.870
So for applications
that are large

00:07:25.870 --> 00:07:28.840
and where you have several teams
working on the same code base,

00:07:28.840 --> 00:07:30.550
this is a huge step forward.

00:07:30.550 --> 00:07:33.130
And of course, you
know that Google

00:07:33.130 --> 00:07:35.950
is having a lot of big web apps.

00:07:35.950 --> 00:07:38.060
And we are serious
about making sure

00:07:38.060 --> 00:07:40.670
that we can maintain
these web apps over time.

00:07:40.670 --> 00:07:43.480
So yes, you will in the future
see applications written

00:07:43.480 --> 00:07:46.550
in Dart from Google, as
well as from the outside,

00:07:46.550 --> 00:07:47.540
which is important.

00:07:47.540 --> 00:07:49.623
ALEXIS MOUSSINE-POUCHKINE:
So there's at least one

00:07:49.623 --> 00:07:53.410
that's publicly talked about
and Brad Green from the Android

00:07:53.410 --> 00:07:55.620
team was up on
stage talking about.

00:07:55.620 --> 00:07:57.280
How to build an
application with--

00:07:57.280 --> 00:08:00.480
was it a team of
10, 12 developers

00:08:00.480 --> 00:08:01.650
in less than six months?

00:08:01.650 --> 00:08:07.130
And none of them actually
knew neither Angular nor Dart.

00:08:07.130 --> 00:08:09.732
LARS BAK: So this is
the interesting part.

00:08:09.732 --> 00:08:12.190
We have been very conservative
in designing the programming

00:08:12.190 --> 00:08:16.090
language so that if you had
a background in a programming

00:08:16.090 --> 00:08:21.150
language like C# or Java,
you could easily transition

00:08:21.150 --> 00:08:23.710
into using Dart without
having any surprises.

00:08:23.710 --> 00:08:28.407
So one of our core goals when
designing the programming

00:08:28.407 --> 00:08:30.490
language was there was no
surprises when using it.

00:08:30.490 --> 00:08:32.656
We would like to have each
construct in the language

00:08:32.656 --> 00:08:34.799
be as natural to
understand as possible,

00:08:34.799 --> 00:08:37.429
so no magic was
happening to the program.

00:08:37.429 --> 00:08:39.659
I think that that
is key to make sure

00:08:39.659 --> 00:08:41.760
that people like the
programming language.

00:08:41.760 --> 00:08:44.093
KASPER LUND: Like returning
to your point about packages

00:08:44.093 --> 00:08:47.320
and community around
Dart, it was very nice

00:08:47.320 --> 00:08:48.860
for us to be able
to give a keynote.

00:08:48.860 --> 00:08:50.970
And the demo that we
wanted to show in there

00:08:50.970 --> 00:08:53.930
was actually based on
third party, you could say,

00:08:53.930 --> 00:08:56.850
community code built by
someone outside our team,

00:08:56.850 --> 00:08:58.730
just using the Dart platform.

00:08:58.730 --> 00:09:01.040
And it's an excellent
set of libraries

00:09:01.040 --> 00:09:02.690
we have out there that way.

00:09:02.690 --> 00:09:04.390
ALEXIS MOUSSINE-POUCHKINE:
So Angular is very popular.

00:09:04.390 --> 00:09:05.806
Tell me more about
the work you've

00:09:05.806 --> 00:09:08.590
done with the Angular team.

00:09:08.590 --> 00:09:10.760
LARS BAK: So the
Angular guys decided

00:09:10.760 --> 00:09:13.420
to make a Dart
version of Angular.

00:09:13.420 --> 00:09:15.910
And that's a great
way to write apps,

00:09:15.910 --> 00:09:18.300
a framework for
writing web apps.

00:09:18.300 --> 00:09:22.807
But in all the logic in the
program, you just specify Dart.

00:09:22.807 --> 00:09:25.140
ALEXIS MOUSSINE-POUCHKINE:
And then what kind of benefit

00:09:25.140 --> 00:09:26.181
do they expect from that?

00:09:26.181 --> 00:09:28.130
And are they getting it already?

00:09:28.130 --> 00:09:28.640
KASPER LUND: Well,
they're getting

00:09:28.640 --> 00:09:30.723
some of the same benefits
as everybody else that's

00:09:30.723 --> 00:09:33.080
writing in Dart-- more
structure to your code.

00:09:33.080 --> 00:09:34.750
It's easier to
document your intent.

00:09:34.750 --> 00:09:37.770
Everything's built for writing
larger, maintainable apps.

00:09:37.770 --> 00:09:41.690
And you certainly get
that, even in a setting

00:09:41.690 --> 00:09:44.112
where you're using Angular Dart.

00:09:44.112 --> 00:09:45.945
So there's really no
difference between Dart

00:09:45.945 --> 00:09:47.560
and Angular Dart in that space.

00:09:47.560 --> 00:09:49.590
Angular solves the
problem of data binding

00:09:49.590 --> 00:09:52.080
and those things, in the
Angular way, you could say.

00:09:52.080 --> 00:09:53.870
And then Dart takes
care of making sure

00:09:53.870 --> 00:09:57.530
that your application can scale
up and in the basic constructs

00:09:57.530 --> 00:09:58.470
that it provides.

00:09:58.470 --> 00:10:02.220
LARS BAK: So if you like the
nice bindings they provide

00:10:02.220 --> 00:10:05.970
in Angular, then you can
use Angular Dart, together

00:10:05.970 --> 00:10:11.095
with all the logic written in
Dart, and it works just great.

00:10:11.095 --> 00:10:12.740
ALEXIS
MOUSSINE-POUCHKINE: Great.

00:10:12.740 --> 00:10:15.370
So you can use Dart
to build web apps.

00:10:15.370 --> 00:10:17.444
Can you use it for command
line, service side?

00:10:17.444 --> 00:10:19.860
Does it even make sense-- it's
a general purpose language,

00:10:19.860 --> 00:10:20.950
so you should be
able to do that.

00:10:20.950 --> 00:10:23.330
LARS BAK: It's a general
purpose programming language.

00:10:23.330 --> 00:10:25.620
And we already have
applications that

00:10:25.620 --> 00:10:28.650
are written outside the browser.

00:10:28.650 --> 00:10:32.800
One should mention the Dart
to JS command line tool.

00:10:32.800 --> 00:10:36.140
It's a compiler that takes Dart
code and produces JavaScript.

00:10:36.140 --> 00:10:37.640
Of course it's written in Dart.

00:10:37.640 --> 00:10:39.850
KASPER LUND: And of course,
it can compile itself.

00:10:39.850 --> 00:10:41.640
ALEXIS MOUSSINE-POUCHKINE:
Of course.

00:10:41.640 --> 00:10:42.390
LARS BAK: Oh yeah.

00:10:42.390 --> 00:10:46.860
So you can compile the Dart
to JS compiled from Dart to JS

00:10:46.860 --> 00:10:51.610
and run on top of a JavaScript
engine, if you like that.

00:10:51.610 --> 00:10:53.539
KASPER LUND: If you're
interested in that sort

00:10:53.539 --> 00:10:54.360
of thing.

00:10:54.360 --> 00:10:56.318
LARS BAK: But that's
probably beyond the point.

00:10:56.318 --> 00:10:58.230
But this is one
example where we have

00:10:58.230 --> 00:11:02.610
scaled Dart to run
outside the browser.

00:11:02.610 --> 00:11:04.710
So that works really well.

00:11:04.710 --> 00:11:08.260
Another one is that we have
a performance tracking server

00:11:08.260 --> 00:11:12.504
system inside to track our
increase in performance.

00:11:12.504 --> 00:11:14.420
ALEXIS MOUSSINE-POUCHKINE:
That's server side.

00:11:14.420 --> 00:11:16.132
LARS BAK: It's all
written in Dart.

00:11:16.132 --> 00:11:19.010
And that's been running stable
for one and a half years now.

00:11:19.010 --> 00:11:21.595
So it even works
outside the browser.

00:11:21.595 --> 00:11:22.470
KASPER LUND: It does.

00:11:22.470 --> 00:11:22.940
ALEXIS MOUSSINE-POUCHKINE:
Very nice.

00:11:22.940 --> 00:11:23.820
LARS BAK: And there's
more to come here.

00:11:23.820 --> 00:11:26.830
But I think it's important to
focus on web applications now.

00:11:26.830 --> 00:11:28.890
This is the first
area where we are

00:11:28.890 --> 00:11:33.120
trying to have consistent
libraries and so forth.

00:11:33.120 --> 00:11:35.420
And when that all
works well, we'll

00:11:35.420 --> 00:11:36.546
be happy to expand outside.

00:11:36.546 --> 00:11:38.753
ALEXIS MOUSSINE-POUCHKINE:
Yeah, let's focus on that.

00:11:38.753 --> 00:11:39.880
Let's do that really well.

00:11:39.880 --> 00:11:42.070
So you guys have had
a lot of experience

00:11:42.070 --> 00:11:44.595
in virtual machines,
Hotspot, V8.

00:11:44.595 --> 00:11:47.015
What were the challenges
with Dart VM specifically?

00:11:49.614 --> 00:11:51.030
KASPER LUND: It's
sort of designed

00:11:51.030 --> 00:11:52.592
to be less
challenging, you could

00:11:52.592 --> 00:11:54.050
say, than many of
the other things.

00:11:54.050 --> 00:11:56.090
We know, from from
ground up, how VMs work.

00:11:56.090 --> 00:11:57.840
So that helps when you
design the language

00:11:57.840 --> 00:11:59.420
that you're trying to avoid
some of the pitfalls that

00:11:59.420 --> 00:12:00.794
make it really
hard to implement.

00:12:00.794 --> 00:12:02.180
So we tried to
make a design that

00:12:02.180 --> 00:12:04.050
allows us to make it
go really, really fast.

00:12:04.050 --> 00:12:05.290
[INTERPOSING VOICES]

00:12:05.290 --> 00:12:08.540
LARS BAK: We designed it to
make it easier for the VM

00:12:08.540 --> 00:12:09.910
implementer.

00:12:09.910 --> 00:12:13.710
So one thing that we have been
bothered by in our systems

00:12:13.710 --> 00:12:16.000
is that it's very
hard to predict

00:12:16.000 --> 00:12:18.470
the performance
of an application.

00:12:18.470 --> 00:12:19.970
So the Dart programming
language has

00:12:19.970 --> 00:12:22.490
been designed so
that we can predict

00:12:22.490 --> 00:12:24.590
how well it performs on the VM.

00:12:24.590 --> 00:12:28.680
So the programmer,
when writing a program,

00:12:28.680 --> 00:12:30.860
he can sort of estimate
how fast it runs.

00:12:30.860 --> 00:12:31.930
And this is great.

00:12:31.930 --> 00:12:34.110
KASPER LUND: It's basically
all about avoiding

00:12:34.110 --> 00:12:35.790
performance pitfalls.

00:12:35.790 --> 00:12:38.835
If you fall off that performance
cliff in too many weird ways,

00:12:38.835 --> 00:12:40.210
it makes it really
hard to reason

00:12:40.210 --> 00:12:41.700
about the performance
of your code.

00:12:41.700 --> 00:12:43.730
LARS BAK: So for instance,
to give a contrast

00:12:43.730 --> 00:12:46.110
to make it more
concrete, in JavaScript,

00:12:46.110 --> 00:12:51.300
you know you can use an object
as a dictionary, basically.

00:12:51.300 --> 00:12:53.499
And if you, from
the side, get hold

00:12:53.499 --> 00:12:54.915
of an object inside
an application

00:12:54.915 --> 00:12:57.680
and start messing with it,
suddenly the whole application

00:12:57.680 --> 00:12:59.080
runs slow.

00:12:59.080 --> 00:13:01.670
And that cannot happen in Dart.

00:13:01.670 --> 00:13:04.810
So we designed it in such a
way that that's not possible.

00:13:04.810 --> 00:13:07.640
And I think that will
be great for developers,

00:13:07.640 --> 00:13:11.500
because they can predict how
well the code runs and should

00:13:11.500 --> 00:13:14.820
not try to sort of guess
whether it runs fast

00:13:14.820 --> 00:13:16.550
on one platform or the other.

00:13:16.550 --> 00:13:17.610
So this is good.

00:13:17.610 --> 00:13:18.370
ALEXIS MOUSSINE-POUCHKINE:
So performance, by the way,

00:13:18.370 --> 00:13:20.330
is not just the
app running fast.

00:13:20.330 --> 00:13:22.722
It's also about the
app starting fast.

00:13:22.722 --> 00:13:24.680
In the web, that actually
makes a lot of sense.

00:13:24.680 --> 00:13:28.800
So there's work, I
understand, around that

00:13:28.800 --> 00:13:30.549
in the Dart VM in
terms of fast startup.

00:13:30.549 --> 00:13:31.840
Do you want to talk about that?

00:13:31.840 --> 00:13:32.205
LARS BAK: Yeah,
we have snapshots.

00:13:32.205 --> 00:13:32.910
ALEXIS MOUSSINE-POUCHKINE:
Snapshots.

00:13:32.910 --> 00:13:34.930
LARS BAK: So snapshots
is a simple mechanism

00:13:34.930 --> 00:13:38.940
where you basically
start up the program

00:13:38.940 --> 00:13:41.560
until you're about
to execute main.

00:13:41.560 --> 00:13:43.610
And at that point, you
take the whole heap

00:13:43.610 --> 00:13:46.160
and stabilize it and put it
into a binary format on the file

00:13:46.160 --> 00:13:47.170
system.

00:13:47.170 --> 00:13:49.489
And you can use that
as a starting point

00:13:49.489 --> 00:13:50.780
when you start the application.

00:13:50.780 --> 00:13:55.240
And easily, you get a factor
of 10 in startup performance.

00:13:55.240 --> 00:13:58.530
That means that if your
application would take a second

00:13:58.530 --> 00:14:00.980
to start up, now it's
only 100 milliseconds.

00:14:00.980 --> 00:14:07.690
And as soon as the Dart
VM appears in Chrome,

00:14:07.690 --> 00:14:11.100
then you will hopefully
see a very snappy startup

00:14:11.100 --> 00:14:12.140
of web applications.

00:14:12.140 --> 00:14:14.080
Right now, we're
using these snapshots

00:14:14.080 --> 00:14:16.030
when starting up
Dart to JS to make

00:14:16.030 --> 00:14:20.745
sure the tools have a fast
startup in our tool box.

00:14:20.745 --> 00:14:22.120
ALEXIS
MOUSSINE-POUCHKINE: Great.

00:14:22.120 --> 00:14:23.890
So when can we--
are you starting

00:14:23.890 --> 00:14:25.710
to talk to the Chrome
guys to get in?

00:14:25.710 --> 00:14:28.850
Of course, you have a Chromium
build with the Dart VM, which

00:14:28.850 --> 00:14:32.200
is what you mentioned for
the development cycle.

00:14:32.200 --> 00:14:33.610
Next step is
obviously to make it

00:14:33.610 --> 00:14:35.340
available to as many
people as possible.

00:14:35.340 --> 00:14:38.050
And people will just realize
that the app is running faster,

00:14:38.050 --> 00:14:38.730
right?

00:14:38.730 --> 00:14:40.120
LARS BAK: Precisely.

00:14:40.120 --> 00:14:42.600
You can think about the
Dart VM inside the browser

00:14:42.600 --> 00:14:44.030
as an accelerator.

00:14:44.030 --> 00:14:46.990
So if it's not there, it'll take
off the [INAUDIBLE] version.

00:14:46.990 --> 00:14:49.634
Talking to the Chrome guys--
we are the Chrome guys.

00:14:49.634 --> 00:14:51.050
We are working on
the Chrome team.

00:14:51.050 --> 00:14:52.120
So of course.

00:14:52.120 --> 00:14:53.620
ALEXIS MOUSSINE-POUCHKINE:
Well, I'm

00:14:53.620 --> 00:14:58.040
sure you need to do some
convincing before it happens.

00:14:58.040 --> 00:14:59.610
LARS BAK: The technology speaks.

00:14:59.610 --> 00:15:00.220
ALEXIS MOUSSINE-POUCHKINE:
For itself.

00:15:00.220 --> 00:15:01.610
KASPER LUND: It does.

00:15:01.610 --> 00:15:03.151
ALEXIS MOUSSINE-POUCHKINE:
Wonderful.

00:15:03.151 --> 00:15:04.950
Well, on that note,
congratulations again

00:15:04.950 --> 00:15:06.690
on that 1.0 release.

00:15:06.690 --> 00:15:08.492
Where should people
go to try it out?

00:15:08.492 --> 00:15:09.450
LARS BAK: Dartlang.org.

00:15:09.450 --> 00:15:10.200
Try it out.

00:15:10.200 --> 00:15:11.170
Send us some feedback.

00:15:11.170 --> 00:15:12.836
ALEXIS MOUSSINE-POUCHKINE:
There you go.

00:15:12.836 --> 00:15:13.670
[INTERPOSING VOICES]

00:15:13.670 --> 00:15:14.711
LARS BAK: --for you guys.

00:15:14.711 --> 00:15:15.770
So hopefully you like it.

00:15:15.770 --> 00:15:18.190
And send us feedback so
we can improve our system.

00:15:18.190 --> 00:15:19.330
KASPER LUND: That's it.

00:15:19.330 --> 00:15:21.080
ALEXIS MOUSSINE-POUCHKINE:
Thank you guys.

00:15:21.080 --> 00:15:22.790
LARS BAK: Thank you.

