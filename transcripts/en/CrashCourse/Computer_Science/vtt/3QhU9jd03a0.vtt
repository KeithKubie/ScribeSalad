WEBVTT
Kind: captions
Language: en

00:00:03.200 --> 00:00:06.400
Hi, I’m Carrie Anne, and welcome to CrashCourse
Computer Science!

00:00:06.410 --> 00:00:07.970
The internet is amazing.

00:00:07.970 --> 00:00:13.110
In just a few keystrokes, we can stream videos
on Youtube -- Hello! -- read articles on Wikipedia,

00:00:13.110 --> 00:00:17.090
order supplies on amazon, video chat with
friends, and tweet about the weather.

00:00:17.090 --> 00:00:21.199
Without a doubt, the ability for computers,
and their users, to send and receive information

00:00:21.199 --> 00:00:24.160
over a global
telecommunications network forever changed

00:00:24.160 --> 00:00:25.160
the world.

00:00:25.160 --> 00:00:28.960
150 years ago, sending a letter from London
to California would have taken two to three

00:00:28.960 --> 00:00:31.349
weeks, and that’s if you paid for express
mail.

00:00:31.349 --> 00:00:33.989
Today, that email takes a fraction of a second.

00:00:33.989 --> 00:00:37.890
This million fold improvement in latency,
that’s the time it takes for a message to

00:00:37.890 --> 00:00:41.829
transfer, juiced up the global economy helping
the modern world to move at the speed of light

00:00:41.829 --> 00:00:43.989
on fiber optic cables spanning the globe.

00:00:43.989 --> 00:00:47.770
You might think that computers and networks
always went hand in hand, but actually most

00:00:47.770 --> 00:00:50.989
computers pre-1970 were humming away all alone.

00:00:50.989 --> 00:00:54.829
However, as big computers began popping up
everywhere, and low cost machines started

00:00:54.829 --> 00:00:59.380
to show up on people’s desks, it became
increasingly useful to share data and resources,

00:00:59.380 --> 00:01:01.380
and the first networks of computers appeared.

00:01:01.380 --> 00:01:05.610
Today, we’re going to start a three-episode
arc on how computer networks came into being

00:01:05.610 --> 00:01:08.560
and the fundamental principles and techniques
that power them.

00:01:08.560 --> 00:01:17.700
INTRO

00:01:17.710 --> 00:01:21.040
The first computer networks appeared in the
1950s and 60s.

00:01:21.040 --> 00:01:25.100
They were generally used within an organization
– like a company or research lab – to

00:01:25.100 --> 00:01:28.920
facilitate the exchange of information between
different people and computers.

00:01:28.920 --> 00:01:32.460
This was faster and more reliable than the
previous method of having someone walk a pile

00:01:32.460 --> 00:01:36.740
of punch cards, or a reel of magnetic tape,
to a computer on the other side of a building

00:01:36.740 --> 00:01:39.400
‒ which was later dubbed a sneakernet.

00:01:39.400 --> 00:01:42.780
A second benefit of networks was the ability
to share physical resources.

00:01:42.780 --> 00:01:46.870
For example, instead of each computer having
its own printer, everyone could share one

00:01:46.870 --> 00:01:47.890
attached to the network.

00:01:47.890 --> 00:01:53.020
It was also common on early networks to have
large, shared, storage drives, ones too expensive

00:01:53.020 --> 00:01:54.540
to have attached to every machine.

00:01:54.540 --> 00:01:58.870
These relatively small networks of close-by
computers are called Local Area Networks,

00:01:58.870 --> 00:01:59.580
or LANs.

00:01:59.580 --> 00:02:03.420
A LAN could be as small as two machines in
the same room, or as large as a university

00:02:03.420 --> 00:02:05.520
campus with thousands of computers.

00:02:05.520 --> 00:02:09.670
Although many LAN technologies were developed
and deployed, the most famous and succesful

00:02:09.670 --> 00:02:14.800
was Ethernet, developed in the early 1970s
at Xerox PARC, and still widely used today.

00:02:14.800 --> 00:02:19.380
In its simplest form, a series of computers
are connected to a single, common ethernet cable.

00:02:19.400 --> 00:02:23.700
When a computer wants to transmit data to
another computer, it writes the data, as an

00:02:23.700 --> 00:02:25.500
electrical signal, onto the cable.

00:02:25.500 --> 00:02:29.680
Of course, because the cable is shared, every
computer plugged into the network sees the

00:02:29.680 --> 00:02:33.030
transmission, but doesn’t know if data is
intended for them or another computer.

00:02:33.030 --> 00:02:37.630
To solve this problem, Ethernet requires that
each computer has a unique Media Access Control

00:02:37.630 --> 00:02:38.890
address, or MAC address.

00:02:38.890 --> 00:02:43.730
This unique address is put into a header that
prefixes any data sent over the network.

00:02:43.730 --> 00:02:48.140
So, computers simply listen to the ethernet
cable, and only process data when they see

00:02:48.140 --> 00:02:49.580
their address in the header.

00:02:49.580 --> 00:02:54.100
This works really well; every computer made
today comes with its own unique MAC address

00:02:54.100 --> 00:02:55.740
for both Ethernet and WiFi.

00:02:55.740 --> 00:03:00.620
The general term for this approach is Carrier
Sense Multiple Access, or CSMA for short.

00:03:00.620 --> 00:03:04.960
The “carrier”, in this case, is any shared
transmission medium that carries data – copper

00:03:04.960 --> 00:03:08.780
wire in the case of ethernet, and the air
carrying radio waves for WiFi.

00:03:08.780 --> 00:03:12.930
Many computers can simultaneously sense the
carrier, hence the “Sense” and “Multiple

00:03:12.930 --> 00:03:16.880
Access”, and the rate at which a carrier
can transmit data is called its Bandwidth.

00:03:16.880 --> 00:03:20.400
Unfortunately, using a shared carrier has
one big drawback.

00:03:20.400 --> 00:03:24.060
When network traffic is light, computers can
simply wait for silence on the carrier, and

00:03:24.069 --> 00:03:25.600
then transmit their data.

00:03:25.600 --> 00:03:30.490
But, as network traffic increases, the probability
that two computers will attempt to write data

00:03:30.490 --> 00:03:33.190
at the same time also increases.

00:03:33.190 --> 00:03:37.120
This is called a collision, and the data gets
all garbled up, like two people trying to

00:03:37.120 --> 00:03:38.940
talk on the phone at the same time.

00:03:38.940 --> 00:03:43.160
Fortunately, computers can detect these collisions
by listening to the signal on the wire.

00:03:43.170 --> 00:03:47.600
The most obvious solution is for computers
to stop transmitting, wait for silence, then

00:03:47.600 --> 00:03:48.540
try again.

00:03:48.540 --> 00:03:52.400
Problem is, the other computer is going to
try that too, and other computers on the network

00:03:52.400 --> 00:03:56.980
that have been waiting for the carrier to
go silent will try to jump in during any pause.

00:03:56.980 --> 00:03:59.230
This just leads to more and more collisions.

00:03:59.230 --> 00:04:03.700
Soon, everyone is talking over one another
and has a backlog of things they need to say,

00:04:03.700 --> 00:04:06.900
like breaking up with a boyfriend over a family
holiday dinner.

00:04:06.900 --> 00:04:07.900
Terrible idea!

00:04:07.900 --> 00:04:10.950
Ethernet had a surprisingly simple and effective
fix.

00:04:10.950 --> 00:04:15.209
When transmitting computers detect a collision,
they wait for a brief period before attempting

00:04:15.209 --> 00:04:16.560
to re-transmit.

00:04:16.560 --> 00:04:18.739
As an example, let’s say 1 second.

00:04:18.739 --> 00:04:22.990
Of course, this doesn’t work if all the
computers use the same wait duration -- they’ll

00:04:22.990 --> 00:04:24.490
just collide again one second later.

00:04:24.490 --> 00:04:29.600
So, a random period is added: one computer
might wait 1.3 seconds, while another waits

00:04:29.600 --> 00:04:30.930
1.5 seconds.

00:04:30.930 --> 00:04:34.950
With any luck, the computer that waited 1.3
seconds will wake up, find the carrier to

00:04:34.950 --> 00:04:37.160
be silent, and start transmitting.

00:04:37.160 --> 00:04:41.670
When the 1.5 second computer wakes up a moment
later, it’ll see the carrier is in use,

00:04:41.670 --> 00:04:43.980
and will wait for the other computer to finish.

00:04:43.980 --> 00:04:48.330
This definitely helps, but doesn’t totally
solve the problem, so an extra trick is used.

00:04:48.330 --> 00:04:52.430
As I just explained, if a computer detects
a collision while transmitting, it will wait

00:04:52.430 --> 00:04:54.750
1 second, plus some random extra time.

00:04:54.750 --> 00:04:59.340
However, if it collides again, which suggests
network congestion, instead of waiting another

00:04:59.340 --> 00:05:02.070
1 second, this time it will wait 2 seconds.

00:05:02.070 --> 00:05:07.139
If it collides again, it’ll wait 4 seconds,
and then 8, and then 16, and so on, until

00:05:07.139 --> 00:05:08.139
it’s successful.

00:05:08.139 --> 00:05:12.220
With computers backing off, the rate of collisions
goes down, and data starts moving again, freeing

00:05:12.220 --> 00:05:13.500
up the network.

00:05:13.500 --> 00:05:14.930
Family dinner saved!

00:05:14.930 --> 00:05:20.280
This “backing off” behavior using an exponentially
growing wait time is called Exponential Backoff.

00:05:20.280 --> 00:05:24.050
Both Ethernet and WiFi use it, and so do many
transmission protocols.

00:05:24.050 --> 00:05:28.370
But even with clever tricks like Exponential
Backoff, you could never have an entire university’s

00:05:28.370 --> 00:05:31.350
worth of computers on one shared ethernet
cable.

00:05:31.350 --> 00:05:35.590
To reduce collisions and improve efficiency,
we need to shrink the number of devices on

00:05:35.590 --> 00:05:38.550
any given shared carrier -- what’s called
the Collision Domain.

00:05:38.550 --> 00:05:44.030
Let go back to our earlier Ethernet example,
where we had six computers on one shared cable,

00:05:44.030 --> 00:05:45.980
a.k.a. one collision domain.

00:05:45.980 --> 00:05:49.570
To reduce the likelihood of collisions, we
can break this network into two collision

00:05:49.570 --> 00:05:51.860
domains by using a Network Switch.

00:05:51.860 --> 00:05:56.350
It sits between our two smaller networks,
and only passes data between them if necessary.

00:05:56.350 --> 00:06:00.030
It does this by keeping a list of what MAC
addresses are on what side of the network.

00:06:00.030 --> 00:06:04.080
So if A wants to transmit to C, the switch
doesn’t forward the data to the other network

00:06:04.080 --> 00:06:05.080
– there’s no need.

00:06:05.080 --> 00:06:09.620
This means if E wants to transmit to F at
the same time, the network is wide open, and

00:06:09.620 --> 00:06:11.479
two transmissions can happen at once.

00:06:11.479 --> 00:06:15.930
But, if F wants to send data to A, then the
switch passes it through, and the two networks

00:06:15.930 --> 00:06:17.400
are both briefly occupied.

00:06:17.400 --> 00:06:21.410
This is essentially how big computer networks
are constructed, including the biggest one

00:06:21.410 --> 00:06:26.050
of all – The Internet – which literally
inter-connects a bunch of smaller networks,

00:06:26.050 --> 00:06:27.690
allowing inter-network communication.

00:06:27.690 --> 00:06:31.390
What’s interesting about these big networks,
is that there’s often multiple paths to

00:06:31.390 --> 00:06:33.690
get data from one location to another.

00:06:33.690 --> 00:06:36.990
And this brings us to another fundamental
networking topic, routing.

00:06:36.990 --> 00:06:41.630
The simplest way to connect two distant computers,
or networks, is by allocating a communication

00:06:41.630 --> 00:06:43.490
line for their exclusive use.

00:06:43.490 --> 00:06:45.510
This is how early telephone systems worked.

00:06:45.510 --> 00:06:49.320
For example, there might be 5 telephone lines
running between Indianapolis and Missoula.

00:06:49.320 --> 00:06:53.650
If John picked up the phone wanting to call
Hank, in the 1910s, John would tell a human

00:06:53.650 --> 00:06:57.639
operator where he wanted to call, and they’d
physically connect John’s phone line into

00:06:57.639 --> 00:06:59.199
an unused line running to Missoula.

00:06:59.199 --> 00:07:03.490
For the length of the call, that line was
occupied, and if all 5 lines were already

00:07:03.490 --> 00:07:06.110
in use, John would have to wait for one to
become free.

00:07:06.110 --> 00:07:09.259
This approach is called Circuit Switching,
because you’re literally switching whole

00:07:09.259 --> 00:07:11.669
circuits to route traffic to the correct destination.

00:07:11.669 --> 00:07:16.860
It works fine, but it’s relatively inflexible
and expensive, because there’s often unused

00:07:16.860 --> 00:07:17.860
capacity.

00:07:17.860 --> 00:07:21.009
On the upside, once you have a line to yourself
– or if you have the money to buy one for

00:07:21.009 --> 00:07:25.110
your private use – you can use it to its
full capacity, without having to share.

00:07:25.110 --> 00:07:29.650
For this reason, the military, banks and other
high importance operations still buy dedicated

00:07:29.650 --> 00:07:32.240
circuits to connect their data centers.

00:07:32.240 --> 00:07:36.009
Another approach for getting data from one
place to another is Message Switching, which

00:07:36.009 --> 00:07:38.509
is sort of like how the postal system works.

00:07:38.509 --> 00:07:42.360
Instead of dedicated route from A to B, messages
are passed through several stops.

00:07:42.360 --> 00:07:46.650
So if John writes a letter to Hank, it might
go from Indianapolis to Chicago, and then

00:07:46.650 --> 00:07:50.660
hop to Minneapolis, then Billings, and then
finally make it to Missoula.

00:07:50.660 --> 00:07:55.000
Each stop knows where to send it next because
they keep a table of where to pass letters

00:07:55.000 --> 00:07:56.380
given a destination address.

00:07:56.380 --> 00:08:00.340
What’s neat about Message Switching is that
it can use different routes, making communication

00:08:00.340 --> 00:08:02.320
more reliable and fault-tolerant.

00:08:02.320 --> 00:08:05.680
Sticking with our mail example, if there’s
a blizzard in Minneapolis grinding things

00:08:05.680 --> 00:08:10.270
to a halt, the Chicago mail hub can decide
to route the letter through Omaha instead.

00:08:10.270 --> 00:08:13.270
In our example, cities are acting like network
routers.

00:08:13.270 --> 00:08:16.850
The number of hops a message takes along a
route is called the hop count.

00:08:16.850 --> 00:08:20.440
Keeping track of the hop count is useful because
it can help identify routing problems.

00:08:20.440 --> 00:08:25.200
For example, let’s say Chicago thinks the
fastest route to Missoula is through Omaha,

00:08:25.200 --> 00:08:27.410
but Omaha thinks the fastest route is through
Chicago.

00:08:27.410 --> 00:08:31.580
That's bad, because both cities are going
to look at the destination address, Missoula,

00:08:31.580 --> 00:08:34.260
and end up passing the message back and forth
between them, endlessly.

00:08:34.260 --> 00:08:38.459
Not only is this wasting bandwidth, but it’s
a routing error that needs to get fixed!

00:08:38.459 --> 00:08:41.979
This kind of error can be detected because
the hop count is stored with the message and

00:08:41.979 --> 00:08:43.699
updated along its journey.

00:08:43.699 --> 00:08:47.350
If you start seeing messages with high hop
counts, you can bet something has gone awry

00:08:47.350 --> 00:08:48.720
in the routing!

00:08:48.720 --> 00:08:50.160
This threshold is the Hop Limit.

00:08:50.160 --> 00:08:53.769
A downside to Message Switching is that messages
are sometimes big.

00:08:53.769 --> 00:08:57.420
So, they can clog up the network, because
the whole message has to be transmitted from

00:08:57.420 --> 00:09:00.529
one stop to the next before continuing on
its way.

00:09:00.529 --> 00:09:04.059
While a big file is transferring, that whole
link is tied up.

00:09:04.059 --> 00:09:08.139
Even if you have a tiny, one kilobyte email
trying to get through, it either has to wait

00:09:08.139 --> 00:09:11.259
for the big file transfer to finish or take
a less efficient route.

00:09:11.259 --> 00:09:12.259
That’s bad.

00:09:12.259 --> 00:09:16.690
The solution is to chop up big transmissions
into many small pieces, called packets.

00:09:16.690 --> 00:09:20.839
Just like with Message Switching, each packet
contains a destination address on the network,

00:09:20.839 --> 00:09:22.620
so routers know where to forward them.

00:09:22.620 --> 00:09:26.940
This format is defined by the “Internet
Protocol”, or IP for short, a standard created

00:09:26.940 --> 00:09:28.439
in the 1970s.

00:09:28.439 --> 00:09:31.180
Every computer connected to a network gets
an IP Address.

00:09:31.180 --> 00:09:35.619
You’ve probably seen these as four, 8-bit
numbers written with dots in between.

00:09:35.619 --> 00:09:41.050
For example,172.217.7.238 is an IP Address
for one of Google’s servers.

00:09:41.050 --> 00:09:45.480
With millions of computers online, all exchanging
data, bottlenecks can appear and disappear

00:09:45.480 --> 00:09:46.920
in milliseconds.

00:09:46.920 --> 00:09:50.939
Network routers are constantly trying to balance
the load across whatever routes they know

00:09:50.939 --> 00:09:55.170
to ensure speedy and reliable delivery, which
is called congestion control.

00:09:55.170 --> 00:09:58.720
Sometimes different packets from the same
message take different routes through a network.

00:09:58.720 --> 00:10:02.610
This opens the possibility of packets arriving
at their destination out of order, which is

00:10:02.610 --> 00:10:04.089
a problem for some applications.

00:10:04.089 --> 00:10:09.649
Fortunately, there are protocols that run
on top of IP, like TCP/IP, that handle this

00:10:09.649 --> 00:10:10.649
issue.

00:10:10.649 --> 00:10:11.959
We’ll talk more about that next week.

00:10:11.959 --> 00:10:16.699
Chopping up data into small packets, and passing
these along flexible routes with spare capacity,

00:10:16.699 --> 00:10:20.509
is so efficient and fault-tolerant, it’s
what the whole internet runs on today.

00:10:20.509 --> 00:10:22.629
This routing approach is called Packet Switching.

00:10:22.629 --> 00:10:27.610
It also has the nice property of being decentralized,
with no central authority or single point

00:10:27.610 --> 00:10:28.610
of failure.

00:10:28.610 --> 00:10:32.350
In fact, the threat of nuclear attack is why
packet switching was developed during the

00:10:32.350 --> 00:10:33.350
cold war!

00:10:33.350 --> 00:10:38.779
Today, routers all over the globe work cooperatively
to find efficient routings, exchanging information

00:10:38.780 --> 00:10:43.899
with each other using special protocols, like
the Internet Control Message Protocol (ICMP)

00:10:43.900 --> 00:10:46.240
and the Border Gateway Protocol (BGP).

00:10:46.240 --> 00:10:49.940
The world's first packet-switched network,
and the ancestor to the modern internet, was

00:10:49.940 --> 00:10:54.440
the ARPANET, named after the US agency that
funded it, the Advanced Research Projects

00:10:54.449 --> 00:10:55.449
Agency.

00:10:55.449 --> 00:10:58.540
Here’s what the entire ARPANET looked like
in 1974.

00:10:58.540 --> 00:11:02.800
Each smaller circle is a location, like a
university or research lab, that operated

00:11:02.800 --> 00:11:03.800
a router.

00:11:03.800 --> 00:11:08.209
They also plugged in one or more computers
– you can see PDP-1’s, IBM System 360s,

00:11:08.209 --> 00:11:12.579
and even an ATLAS in London connected over
a satellite link.

00:11:12.579 --> 00:11:15.889
Obviously the internet has grown by leaps
and bounds in the decades since.

00:11:15.889 --> 00:11:20.750
Today, instead of a few dozen computers online,
it’s estimated to be nearing 10 billion.

00:11:20.750 --> 00:11:25.129
And it continues to grow rapidly, especially
with the advent of wifi-connected refrigerators

00:11:25.129 --> 00:11:29.559
and other smart appliances, forming an “internet
of things”.

00:11:29.559 --> 00:11:32.339
So that’s part one – an overview of computer
networks.

00:11:32.339 --> 00:11:34.129
Is it a series of tubes?

00:11:34.129 --> 00:11:35.769
Well, sort of.

00:11:35.769 --> 00:11:39.459
Next week we’ll tackle some higher-level
transmission protocols, slowly working our

00:11:39.459 --> 00:11:41.290
way up to the World Wide Web.

00:11:41.290 --> 00:11:42.560
I’ll see you then!

