WEBVTT
Kind: captions
Language: en

00:00:00.500 --> 00:00:01.902
So who's excited about testing?

00:00:01.902 --> 00:00:03.140
[CHEERING]

00:00:03.140 --> 00:00:03.640
Excited?

00:00:03.640 --> 00:00:04.670
Yeah.

00:00:04.670 --> 00:00:07.858
OK, how many of you are
testing your apps already?

00:00:07.858 --> 00:00:09.100
[CHEERING]

00:00:09.100 --> 00:00:11.622
Is there anyone who is
not testing their apps?

00:00:11.622 --> 00:00:13.780
[BOOING]

00:00:13.780 --> 00:00:16.630
I don't believe you.

00:00:16.630 --> 00:00:18.070
Unless your apps
are not working.

00:00:18.070 --> 00:00:20.150
So, yeah, testing,
Android testing.

00:00:20.150 --> 00:00:22.260
There's been a lot happening
during the past year,

00:00:22.260 --> 00:00:24.050
past two years in
Android testing.

00:00:24.050 --> 00:00:26.150
We've been getting better
and better at this.

00:00:26.150 --> 00:00:29.030
There is now great support
in Android Studio and Gradle

00:00:29.030 --> 00:00:30.400
to run your tests.

00:00:30.400 --> 00:00:32.729
There is the Android
testing support library.

00:00:32.729 --> 00:00:34.140
It's an unbundled library.

00:00:34.140 --> 00:00:36.460
It's unbundled
from the framework.

00:00:36.460 --> 00:00:39.380
You can update it with
a support library.

00:00:39.380 --> 00:00:40.270
It's always fresh.

00:00:40.270 --> 00:00:41.790
That's a good thing.

00:00:41.790 --> 00:00:45.630
And one of the pieces of this
is Espresso, our UI testing

00:00:45.630 --> 00:00:48.460
framework, which you probably
all know about, since you

00:00:48.460 --> 00:00:49.910
are all testing your apps.

00:00:49.910 --> 00:00:54.950
But that's the part that we're
going to concentrate on today.

00:00:54.950 --> 00:00:57.690
So, yeah, Espresso-- just
a quick recap, quick intro

00:00:57.690 --> 00:00:59.850
for maybe those of
you who are listening

00:00:59.850 --> 00:01:03.370
on the live stream who are
not Espresso experts yet,

00:01:03.370 --> 00:01:06.130
I want to discuss the
basic Espresso task flow.

00:01:06.130 --> 00:01:08.640
So this is an app we
built a couple of months

00:01:08.640 --> 00:01:11.310
ago for a code lab, for an
Android testing code lab.

00:01:11.310 --> 00:01:17.750
It's a simple note taking app,
where you have a list of notes.

00:01:17.750 --> 00:01:20.340
You can add a note,
add some text, save it.

00:01:20.340 --> 00:01:22.480
That's pretty much it.

00:01:22.480 --> 00:01:29.330
The thing is, this app is a
nice way of looking at tests

00:01:29.330 --> 00:01:30.640
and explaining them.

00:01:30.640 --> 00:01:33.310
Because UI tests seem
like a very human way

00:01:33.310 --> 00:01:34.720
to test your apps.

00:01:34.720 --> 00:01:36.120
You get the interface.

00:01:36.120 --> 00:01:38.580
You look at it as if you
were looking at your phone.

00:01:38.580 --> 00:01:39.770
And what do you do?

00:01:39.770 --> 00:01:42.480
You first identify some view
you want to perform actions on.

00:01:42.480 --> 00:01:44.280
So in this case, I
want to add a new note.

00:01:44.280 --> 00:01:45.910
So I click the fab, right?

00:01:45.910 --> 00:01:48.450
And then, on the
second screen, I

00:01:48.450 --> 00:01:52.230
want to type some text in, save
the note, and then, finally,

00:01:52.230 --> 00:01:54.500
verify if the note was added.

00:01:54.500 --> 00:01:58.275
It's a simple thing, a very,
very human way to test an app.

00:01:58.275 --> 00:01:59.940
And how does it look in code?

00:01:59.940 --> 00:02:04.220
So Espresso has this
simple, really fluent API

00:02:04.220 --> 00:02:07.220
that lets you express these
kinds of tests in an easy way,

00:02:07.220 --> 00:02:08.389
in code.

00:02:08.389 --> 00:02:11.570
So let's do a quick run-through.

00:02:11.570 --> 00:02:14.370
So first of all, like I
said, we need to find a view.

00:02:14.370 --> 00:02:17.740
And here we are looking for
a view with the ID addNote.

00:02:17.740 --> 00:02:19.720
It's the fab.

00:02:19.720 --> 00:02:21.250
When Espresso finds
the view, I want

00:02:21.250 --> 00:02:22.375
to perform an action on it.

00:02:22.375 --> 00:02:25.430
I want to click on it.

00:02:25.430 --> 00:02:28.060
And then, on the second
screen, again, I'm

00:02:28.060 --> 00:02:31.040
finding views, in this
case, the input fields,

00:02:31.040 --> 00:02:32.650
and I'm performing
another action.

00:02:32.650 --> 00:02:33.620
It's typeText.

00:02:33.620 --> 00:02:36.210
So I'm typing text
into them again,

00:02:36.210 --> 00:02:38.840
clicking on a fab
to save the note.

00:02:38.840 --> 00:02:40.560
And here in this final.

00:02:40.560 --> 00:02:42.880
last line of code, you see
things are a little bit

00:02:42.880 --> 00:02:43.471
different.

00:02:43.471 --> 00:02:44.970
I don't want to do
any more actions.

00:02:44.970 --> 00:02:47.380
I want to verify the
result of my tests.

00:02:47.380 --> 00:02:49.520
So instead of
performing an action,

00:02:49.520 --> 00:02:51.960
I'm actually doing a check.

00:02:51.960 --> 00:02:55.080
I'm trying to match
the note that I added,

00:02:55.080 --> 00:02:56.920
if the text that I
added with the note

00:02:56.920 --> 00:02:58.510
is actually displayed
on the screen.

00:02:58.510 --> 00:03:02.720
So that's the basic
Espresso test.

00:03:02.720 --> 00:03:04.500
And one nice thing
about Espresso

00:03:04.500 --> 00:03:08.130
is, you might notice that,
apart from those basic building

00:03:08.130 --> 00:03:11.040
blocks, these onView
calls, these viewMatches

00:03:11.040 --> 00:03:13.360
and viewActions, and
assertions at the end,

00:03:13.360 --> 00:03:15.006
there's nothing
really in between.

00:03:15.006 --> 00:03:16.380
And that's the
magic of Espresso.

00:03:16.380 --> 00:03:19.460
This is the whole point
of using this framework.

00:03:19.460 --> 00:03:22.810
Notice how in the previous
test that I displayed,

00:03:22.810 --> 00:03:25.510
we went through another
activity and back.

00:03:25.510 --> 00:03:27.920
We went through three
different screens.

00:03:27.920 --> 00:03:29.490
We performed typing.

00:03:29.490 --> 00:03:31.860
We had to wait for the
screens to change, and finally

00:03:31.860 --> 00:03:34.960
to display the final result.
But there was no code in between

00:03:34.960 --> 00:03:37.620
to wait for those events.

00:03:37.620 --> 00:03:38.920
That's Espresso.

00:03:38.920 --> 00:03:42.510
But when people come from
different backgrounds,

00:03:42.510 --> 00:03:44.737
from the different
testing frameworks, maybe,

00:03:44.737 --> 00:03:46.570
and they try to use
Espresso for their apps,

00:03:46.570 --> 00:03:48.361
I see a lot of questions
on Stack Overflow,

00:03:48.361 --> 00:03:51.240
and answers that try to
work against that API.

00:03:53.770 --> 00:03:57.310
So let's look at
something that I've

00:03:57.310 --> 00:03:59.020
seen in answers on
Stack Overflow that

00:03:59.020 --> 00:04:00.470
is not entirely correct.

00:04:00.470 --> 00:04:02.440
So instead of working
with Espresso,

00:04:02.440 --> 00:04:04.250
and using the constructs
that I've just

00:04:04.250 --> 00:04:07.910
discussed, like viewMatches,
people usually ask a question,

00:04:07.910 --> 00:04:09.240
"how do I get the view?"

00:04:09.240 --> 00:04:13.360
How do I get that view object
to do things to it, to change

00:04:13.360 --> 00:04:14.964
properties and verify things?

00:04:14.964 --> 00:04:16.089
Well, you really shouldn't.

00:04:16.089 --> 00:04:17.610
This is a very obscure API.

00:04:17.610 --> 00:04:20.630
This is not meant
for you to use.

00:04:20.630 --> 00:04:23.550
This will just not work.

00:04:23.550 --> 00:04:26.260
The other thing that is a
little bit more dangerous

00:04:26.260 --> 00:04:29.890
is getting the
activity and finding

00:04:29.890 --> 00:04:31.270
stuff in the view hierarchy.

00:04:31.270 --> 00:04:33.495
This line of code
would actually work,

00:04:33.495 --> 00:04:36.320
but it's not really
what you want to do.

00:04:36.320 --> 00:04:40.620
I mean, it will work as in it
will not throw an exception,

00:04:40.620 --> 00:04:45.090
but again, this is
working against Espresso.

00:04:45.090 --> 00:04:51.730
And one question for you--
this is something I've seen.

00:04:51.730 --> 00:04:56.565
How many people think this
test will actually pass?

00:04:56.565 --> 00:04:58.940
No?

00:04:58.940 --> 00:05:01.830
Well, it will, because
it doesn't do anything.

00:05:04.900 --> 00:05:07.390
OnView doesn't run any
real Espresso actions.

00:05:07.390 --> 00:05:10.040
It just returns a
viewInteraction object,

00:05:10.040 --> 00:05:15.510
which you can act upon next, and
cue actions, or do assertions.

00:05:15.510 --> 00:05:18.590
This doesn't even look for
the view in the hierarchy.

00:05:18.590 --> 00:05:22.410
So coming back at a
proper Espresso test.

00:05:22.410 --> 00:05:26.680
Like I said, this just returns
a viewInteraction object.

00:05:26.680 --> 00:05:29.000
And only when you
actually act on that,

00:05:29.000 --> 00:05:31.250
this is where the
Espresso magic starts.

00:05:31.250 --> 00:05:33.330
And so in this first part
of this presentation,

00:05:33.330 --> 00:05:36.120
I just wanted to talk to you
a little bit about internals,

00:05:36.120 --> 00:05:38.470
so that you have the
knowledge that will help you

00:05:38.470 --> 00:05:41.320
in building your
tests, and finding

00:05:41.320 --> 00:05:44.850
all the different scenarios,
and different ways

00:05:44.850 --> 00:05:48.270
that your tests can fail.

00:05:48.270 --> 00:05:50.610
So let's look at the
viewInteraction class.

00:05:50.610 --> 00:05:53.520
This is source
code from Espresso.

00:05:53.520 --> 00:05:54.440
It's open source.

00:05:54.440 --> 00:05:55.430
You can go look it up.

00:05:55.430 --> 00:05:56.554
You can open it yourselves.

00:05:56.554 --> 00:05:57.447
You can dig into it.

00:05:57.447 --> 00:05:58.780
I really encourage you to do it.

00:05:58.780 --> 00:06:04.050
It's not that big, and it can
give you a better understanding

00:06:04.050 --> 00:06:06.620
of what happens under the hood.

00:06:06.620 --> 00:06:10.220
So when I perform an action
on the viewInteraction

00:06:10.220 --> 00:06:12.490
object, this method,
doPerform, it's called.

00:06:12.490 --> 00:06:14.860
And the first very
important thing that happens

00:06:14.860 --> 00:06:18.375
is, it starts running
everything that it

00:06:18.375 --> 00:06:20.705
does on the main thread.

00:06:20.705 --> 00:06:23.450
So the test method
that you write,

00:06:23.450 --> 00:06:24.950
it's actually on a
different thread.

00:06:24.950 --> 00:06:28.330
If you want to work with views,
work with a view hierarchy,

00:06:28.330 --> 00:06:31.500
we have to switch to
the main thread first.

00:06:31.500 --> 00:06:34.890
Then this is a very,
very important thing.

00:06:34.890 --> 00:06:38.190
UI controller is the most
important part of Espresso,

00:06:38.190 --> 00:06:39.080
I would say.

00:06:39.080 --> 00:06:45.175
This is an internal
class in Espresso

00:06:45.175 --> 00:06:48.750
that has this method called
loopMainThreadUntilIIdle.

00:06:48.750 --> 00:06:51.590
And this is where
all the magic happens

00:06:51.590 --> 00:06:52.660
that I mentioned before.

00:06:52.660 --> 00:06:58.490
This is the place where Espresso
waits for your app to be idle.

00:06:58.490 --> 00:07:00.800
And I will discuss in a
second what it actually

00:07:00.800 --> 00:07:02.410
means for your app to be idle.

00:07:02.410 --> 00:07:05.230
And only then, only after
Espresso finds that it can run,

00:07:05.230 --> 00:07:07.190
it can actually run
your actions safely

00:07:07.190 --> 00:07:09.610
when the app is not
doing anything, will

00:07:09.610 --> 00:07:13.160
it actually kick off
traversing the view hierarchy,

00:07:13.160 --> 00:07:16.040
finding the view, and matching
it against your matter.

00:07:16.040 --> 00:07:17.317
Only then.

00:07:17.317 --> 00:07:19.150
And then, when it finds
the view, of course,

00:07:19.150 --> 00:07:20.655
it performs the
action and passes it

00:07:20.655 --> 00:07:21.613
into the UI controller.

00:07:21.613 --> 00:07:23.300
So if you're writing
any custom actions,

00:07:23.300 --> 00:07:27.090
you can use it again
instead of trying

00:07:27.090 --> 00:07:30.690
to do things without Espresso.

00:07:30.690 --> 00:07:33.490
So UI controller
loopMainThreadUntilIdle,

00:07:33.490 --> 00:07:36.290
a long name, but--
So what it does?

00:07:36.290 --> 00:07:38.360
It first sets up conditions.

00:07:38.360 --> 00:07:40.920
It looks at AsyncTasks
in your app.

00:07:40.920 --> 00:07:44.450
It also looks at AsyncTasks
from the support library, which

00:07:44.450 --> 00:07:45.940
use a different thread pool.

00:07:45.940 --> 00:07:48.790
So it needs to look
at both of those.

00:07:48.790 --> 00:07:50.800
Then it looks at all
the idlingResources,

00:07:50.800 --> 00:07:52.760
which is a custom
mechanism to tell Espresso

00:07:52.760 --> 00:07:56.380
that your app is not idle, which
I will discuss in a second.

00:07:56.380 --> 00:07:59.330
It sets up all these conditions,
waiting for all these things

00:07:59.330 --> 00:08:02.540
to be idle, and then
runs another method,

00:08:02.540 --> 00:08:06.340
which just loops and waits
until these conditions are met.

00:08:06.340 --> 00:08:08.810
And what's important
in the end, it also

00:08:08.810 --> 00:08:09.970
looks at the main looper.

00:08:09.970 --> 00:08:12.680
The main looper is something
associated with your thread

00:08:12.680 --> 00:08:13.930
that has a message queue.

00:08:13.930 --> 00:08:15.990
So it basically looks
in the message queue

00:08:15.990 --> 00:08:19.910
if there are any events that are
still pending, still preventing

00:08:19.910 --> 00:08:21.400
Espresso from running safely.

00:08:21.400 --> 00:08:25.230
And there is one common
misconception about this.

00:08:25.230 --> 00:08:29.370
So if I have a handler that's
attached to the main thread,

00:08:29.370 --> 00:08:31.130
so I'm posting to
the main looper.

00:08:31.130 --> 00:08:33.780
If I post a message, post
a runnable that's delayed

00:08:33.780 --> 00:08:36.720
500 milliseconds,
what do you think?

00:08:36.720 --> 00:08:39.169
Is the app idle now, after I
run this line of code or not?

00:08:39.169 --> 00:08:42.620
Who thinks the app is idle?

00:08:42.620 --> 00:08:43.830
It's not, and you're right.

00:08:43.830 --> 00:08:45.730
You must be really
advanced Espresso experts

00:08:45.730 --> 00:08:48.460
since you came to this talk.

00:08:48.460 --> 00:08:51.320
So when the queue is empty-- so
this is again part of Espresso.

00:08:51.320 --> 00:08:54.090
This is part of a class that
looks at the message queue,

00:08:54.090 --> 00:08:56.230
and determines if
it's safe to run.

00:08:56.230 --> 00:08:58.320
So the first condition is
pretty straightforward.

00:08:58.320 --> 00:08:59.360
If the queue is
empty, if there are

00:08:59.360 --> 00:09:00.860
no events on the
main thread that

00:09:00.860 --> 00:09:04.030
are waiting to be executed,
then, of course, we can run.

00:09:04.030 --> 00:09:06.406
But then there is this
other part of the condition.

00:09:06.406 --> 00:09:09.040
And what is this TASK_DUE_LONG?

00:09:09.040 --> 00:09:12.220
Basically, it's a task that's
a long time in the future.

00:09:15.074 --> 00:09:18.390
And if you look at
another piece of code that

00:09:18.390 --> 00:09:22.910
looks at the queue state,
there's actually a constant

00:09:22.910 --> 00:09:26.190
that we came up
with when working

00:09:26.190 --> 00:09:27.962
with Espresso for a
long time, and testing

00:09:27.962 --> 00:09:28.795
different scenarios.

00:09:28.795 --> 00:09:31.850
And basically, we found
that if we look only

00:09:31.850 --> 00:09:36.420
at messages in the message queue
that are up to 15 milliseconds

00:09:36.420 --> 00:09:40.830
in the future, then this will
work for many, many scenarios.

00:09:40.830 --> 00:09:42.880
So it's just one
thing to be aware of,

00:09:42.880 --> 00:09:45.620
because that's a common
misconception I've seen online.

00:09:48.140 --> 00:09:51.100
So if I post something
really far in the future,

00:09:51.100 --> 00:09:54.250
Espresso can run.

00:09:54.250 --> 00:09:56.390
And switching back
to idlingResource.

00:09:56.390 --> 00:10:00.910
So idlingResource ia a pretty
simple but powerful concept

00:10:00.910 --> 00:10:03.860
that you can use, if you
have long running operations

00:10:03.860 --> 00:10:05.390
on different
threads in your app,

00:10:05.390 --> 00:10:09.860
on threads that are not using
AsyncTask or AsyncTaskCompat,

00:10:09.860 --> 00:10:12.010
because Espresso can
synchronize on those.

00:10:12.010 --> 00:10:14.050
But if you have some kind
of network operation,

00:10:14.050 --> 00:10:15.460
or some kind of
long computation,

00:10:15.460 --> 00:10:18.350
something you have to wait
for until your app is actually

00:10:18.350 --> 00:10:21.800
considered idle, you can just
implement this interface.

00:10:21.800 --> 00:10:25.750
And again, it looks
pretty simple,

00:10:25.750 --> 00:10:29.060
but lots of developers,
especially in the beginning,

00:10:29.060 --> 00:10:33.160
and everyone is a beginner
at some point, of course,

00:10:33.160 --> 00:10:35.560
people actually do a
lot of computation,

00:10:35.560 --> 00:10:39.470
or figuring out if the app is
idle and in the isIdle method.

00:10:39.470 --> 00:10:42.030
And I really encourage you to
make it as simple as possible.

00:10:42.030 --> 00:10:44.700
This would be just
returning a Boolean flag

00:10:44.700 --> 00:10:46.320
if your app is idle or not.

00:10:46.320 --> 00:10:49.740
Don't call on transitionIdle
in the isIdle method.

00:10:49.740 --> 00:10:52.512
Instead, when your app
actually becomes idle,

00:10:52.512 --> 00:10:53.970
when your network
request finishes,

00:10:53.970 --> 00:10:56.730
your computation
finishes, then remember

00:10:56.730 --> 00:10:58.960
to call onTransitionToIdle
on the callback

00:10:58.960 --> 00:11:00.480
that Espresso supplied to you.

00:11:00.480 --> 00:11:02.840
Because that's really
telling Espresso "I'm

00:11:02.840 --> 00:11:04.380
going to be idle now.

00:11:04.380 --> 00:11:09.400
Check my state, maybe
Espresso can run now."

00:11:09.400 --> 00:11:12.750
And I just want to mention
another powerful method

00:11:12.750 --> 00:11:14.330
on the UI controller.

00:11:14.330 --> 00:11:16.260
If you're ever writing
any custom interaction

00:11:16.260 --> 00:11:19.590
and custom actions,
whenever you feel

00:11:19.590 --> 00:11:21.380
like you want to
use threadSleep,

00:11:21.380 --> 00:11:25.060
because you sometimes need
to pass between an event

00:11:25.060 --> 00:11:29.260
that you want to happen,
don't use threadSleep, please.

00:11:29.260 --> 00:11:32.290
Instead, use the construct
we give you in Espresso.

00:11:32.290 --> 00:11:33.360
Use this method.

00:11:33.360 --> 00:11:35.070
It sets up a condition.

00:11:35.070 --> 00:11:38.160
It waits until the time
passes, and then, again,

00:11:38.160 --> 00:11:41.270
with loopUntil, you get
all the same guarantees

00:11:41.270 --> 00:11:43.930
about the message queue
about the app being idle.

00:11:43.930 --> 00:11:45.520
So please use those
things if you're

00:11:45.520 --> 00:11:49.288
doing more advanced stuff.

00:11:49.288 --> 00:11:51.760
And moving on, in
the second part,

00:11:51.760 --> 00:11:53.962
I just want to talk
to you about tips

00:11:53.962 --> 00:11:55.910
and various pieces
of advice that I

00:11:55.910 --> 00:11:59.380
gathered from internal teams of
Google working with Espresso.

00:11:59.380 --> 00:12:03.070
Hopefully it'll help make
your test better, less flaky,

00:12:03.070 --> 00:12:05.130
and maintainable.

00:12:05.130 --> 00:12:11.170
So I'm going to go one
by one through them.

00:12:11.170 --> 00:12:13.500
I mean, do you care about
your code structure,

00:12:13.500 --> 00:12:16.190
your apps architecture,
your good quality

00:12:16.190 --> 00:12:18.500
overall for your app?

00:12:18.500 --> 00:12:19.510
Probably, yes.

00:12:19.510 --> 00:12:21.560
Well, then, why
shouldn't you care

00:12:21.560 --> 00:12:23.650
about the same for your tests?

00:12:23.650 --> 00:12:26.210
Let me just show a very,
very simple example,

00:12:26.210 --> 00:12:27.990
if you're still not convinced.

00:12:27.990 --> 00:12:29.800
So with Espresso,
sometimes, you need

00:12:29.800 --> 00:12:32.450
to code pretty close
to the implementation.

00:12:32.450 --> 00:12:35.200
so for example, if
you use onData to look

00:12:35.200 --> 00:12:38.810
for views in your adapter
views in a list view.

00:12:38.810 --> 00:12:41.500
The simplest example
of this-- you

00:12:41.500 --> 00:12:46.990
have a list view, an
adapter backed by map items.

00:12:46.990 --> 00:12:49.290
And so you write
this line of code.

00:12:49.290 --> 00:12:51.289
Your test passes,
and then you need

00:12:51.289 --> 00:12:53.580
to use it in another test,
and another test, and so on.

00:12:53.580 --> 00:12:55.290
So you copy paste it everywhere.

00:12:55.290 --> 00:12:57.410
And then imagine you
change the adapter.

00:12:57.410 --> 00:13:00.370
You change the data that's
backing your list view.

00:13:00.370 --> 00:13:03.400
You're starting to use a
cursor, or whatever else.

00:13:03.400 --> 00:13:05.540
And suddenly, you have
to go and change it

00:13:05.540 --> 00:13:10.010
in every test in your code,
which is pretty daunting.

00:13:10.010 --> 00:13:14.510
So instead, just try to
abstract away any more

00:13:14.510 --> 00:13:19.146
complicated matters, any more
complicated pieces of code.

00:13:19.146 --> 00:13:20.270
Again, this is very simple.

00:13:20.270 --> 00:13:26.840
You can write your own robots,
or more sophisticated ways

00:13:26.840 --> 00:13:30.389
to abstract away working
with screens in Espresso.

00:13:30.389 --> 00:13:32.180
But then you just need
to change one place,

00:13:32.180 --> 00:13:35.480
and your test will pass again.

00:13:35.480 --> 00:13:38.940
Then one thing I want to stress
throughout this presentation--

00:13:38.940 --> 00:13:41.990
please use the available
APIs and classes

00:13:41.990 --> 00:13:43.710
that we give you in Espresso.

00:13:43.710 --> 00:13:45.290
Use the available matchers.

00:13:45.290 --> 00:13:50.690
We provide a lot of matcher
for pretty much every view

00:13:50.690 --> 00:13:52.960
that's in the framework,
for most properties that

00:13:52.960 --> 00:13:54.000
are in the framework.

00:13:54.000 --> 00:13:57.210
And if something is missing,
then maybe we omitted it.

00:13:57.210 --> 00:14:00.460
Maybe it should be there,
and it would be nice

00:14:00.460 --> 00:14:01.880
if you find this
kind of situation

00:14:01.880 --> 00:14:03.250
to please file a bug with us.

00:14:06.390 --> 00:14:08.957
But on the other hand,
we can't know everything

00:14:08.957 --> 00:14:10.290
about the custom views you make.

00:14:10.290 --> 00:14:12.415
So definitely there are
moments when you would like

00:14:12.415 --> 00:14:14.120
to write your own matchers.

00:14:14.120 --> 00:14:16.310
And another instance
of that is if you

00:14:16.310 --> 00:14:20.110
find that you are combining
lots and lots of matters

00:14:20.110 --> 00:14:20.890
for your actions.

00:14:20.890 --> 00:14:25.480
Maybe it's nice abstract
away this complexity,

00:14:25.480 --> 00:14:28.100
and write a custom matcher,
compound matcher that

00:14:28.100 --> 00:14:29.020
does that.

00:14:29.020 --> 00:14:32.572
I just want to point out
that, again, there are classes

00:14:32.572 --> 00:14:33.780
that will help you with that.

00:14:33.780 --> 00:14:35.680
So for the simplest
matchers, you

00:14:35.680 --> 00:14:40.490
want to just extend the
typeSafe matcher that

00:14:40.490 --> 00:14:41.920
work on the onViews.

00:14:41.920 --> 00:14:47.610
You don't have to do casting
and things like that.

00:14:47.610 --> 00:14:49.280
This is very similar,
but if you want

00:14:49.280 --> 00:14:51.500
to filter out just
certain types of views,

00:14:51.500 --> 00:14:55.180
just subclasses of certain
views, use the bounded matcher.

00:14:55.180 --> 00:14:57.120
Again, you will not have
to do the filtering.

00:14:57.120 --> 00:15:00.240
You will not have to do
casting and matches safely.

00:15:00.240 --> 00:15:03.000
You will just get the views of
the type that you care about.

00:15:08.150 --> 00:15:09.290
Again, reuse.

00:15:09.290 --> 00:15:12.260
we provide
countingIdlingResource.

00:15:12.260 --> 00:15:13.440
Use it if you can.

00:15:13.440 --> 00:15:15.030
You don't need to
write your own.

00:15:15.030 --> 00:15:18.370
Many people try, again,
like I said, writing custom

00:15:18.370 --> 00:15:19.580
idling resources.

00:15:19.580 --> 00:15:22.460
They get tangled up in
those, where should I

00:15:22.460 --> 00:15:25.250
call which method?

00:15:25.250 --> 00:15:26.440
When am I idle?

00:15:26.440 --> 00:15:28.810
And so on.

00:15:28.810 --> 00:15:32.620
CountingIdlingResouce as
a very, very small API.

00:15:32.620 --> 00:15:34.830
It's basically you call
Increment and Decrement.

00:15:34.830 --> 00:15:39.970
So you call Increment before you
start a long running operation.

00:15:39.970 --> 00:15:41.690
And you call Decrement
when it's ended.

00:15:41.690 --> 00:15:44.330
And whenever the
counter is at 0,

00:15:44.330 --> 00:15:47.960
so that means no long running
operations are running,

00:15:47.960 --> 00:15:50.190
and Espresso can
consider it idle.

00:15:50.190 --> 00:15:52.810
So please use it, if you
don't have a better reason

00:15:52.810 --> 00:15:55.410
to write your own.

00:15:55.410 --> 00:15:58.150
And on the topic
of idlingResources,

00:15:58.150 --> 00:16:00.280
sometimes, for example,
when using counting,

00:16:00.280 --> 00:16:02.590
when you use one kind of
idlingResource resource

00:16:02.590 --> 00:16:05.010
for everything, you might
find that, in your app,

00:16:05.010 --> 00:16:08.640
there are times when the app
is not idle for a long time.

00:16:08.640 --> 00:16:11.570
And Espresso has some
sane defaults for timeouts

00:16:11.570 --> 00:16:15.210
for such situations.

00:16:15.210 --> 00:16:17.210
But if you find
that your app is not

00:16:17.210 --> 00:16:19.830
idle for a really long
time, and it's actually

00:16:19.830 --> 00:16:22.050
working as intended,
then you might have

00:16:22.050 --> 00:16:24.600
to adjust the idling policies.

00:16:24.600 --> 00:16:26.100
So there's an API for that.

00:16:26.100 --> 00:16:28.600
If you have something that's
running for a really long time,

00:16:28.600 --> 00:16:30.491
and you still want
that test to run,

00:16:30.491 --> 00:16:31.990
then, you might
have to adjust that.

00:16:36.000 --> 00:16:41.180
Next, pretty much
testing basics,

00:16:41.180 --> 00:16:44.500
but focus on testing behavior,
not layout properties.

00:16:44.500 --> 00:16:46.830
And still, a lot
of developers are

00:16:46.830 --> 00:16:51.310
trying to use Espresso to
test the pixel perfectness

00:16:51.310 --> 00:16:52.680
their layouts.

00:16:52.680 --> 00:16:55.500
And while it's
technically possible,

00:16:55.500 --> 00:16:58.860
it will make your tests
really unmaintainable.

00:16:58.860 --> 00:17:01.970
So if you're trying to
assert that a certain view is

00:17:01.970 --> 00:17:05.890
displayed at position
x and y and pixels,

00:17:05.890 --> 00:17:08.399
and then you work with different
screen sizes and so on,

00:17:08.399 --> 00:17:10.190
and then your designer
comes and tells you,

00:17:10.190 --> 00:17:12.810
move that to the right, you
have to redo all your tests.

00:17:12.810 --> 00:17:14.780
So please don't do that.

00:17:14.780 --> 00:17:16.390
But at the same
time, if you really

00:17:16.390 --> 00:17:20.900
want to check that a certain
view is displayed somewhere

00:17:20.900 --> 00:17:22.710
on the screen relative
to another view,

00:17:22.710 --> 00:17:24.816
we do provide
position assertions.

00:17:24.816 --> 00:17:25.690
But they're relative.

00:17:25.690 --> 00:17:26.869
They're easier to maintain.

00:17:26.869 --> 00:17:28.785
If you just need to make
sure that a button is

00:17:28.785 --> 00:17:31.167
next to a text
field or below it,

00:17:31.167 --> 00:17:32.875
then you can use the
position assertions.

00:17:35.500 --> 00:17:40.540
Write many small tests
instead of large ones.

00:17:40.540 --> 00:17:43.950
And to explain this,
I like to think

00:17:43.950 --> 00:17:46.020
about the whole
development process.

00:17:46.020 --> 00:17:48.980
As you start with
working on single screens

00:17:48.980 --> 00:17:51.520
and single features
of your app, you

00:17:51.520 --> 00:17:53.510
start writing tests
for those single,

00:17:53.510 --> 00:17:57.230
contained pieces of your
app, a single screen,

00:17:57.230 --> 00:17:58.825
a single feature, then.

00:17:58.825 --> 00:18:02.440
And these things, during
development, change a lot.

00:18:02.440 --> 00:18:05.610
So you will go and redo your
tests, sometimes, and just

00:18:05.610 --> 00:18:07.160
make everything work together.

00:18:07.160 --> 00:18:10.205
But then, as your app gets
bigger and more mature,

00:18:10.205 --> 00:18:12.937
it stabilizes as you're
close to release,

00:18:12.937 --> 00:18:15.020
things are probably not
going to change that much.

00:18:15.020 --> 00:18:17.870
You're going to
fix small details,

00:18:17.870 --> 00:18:21.490
but the overall flow of
the app will not change.

00:18:21.490 --> 00:18:27.662
And that's when you might start
getting longer user flow tests.

00:18:27.662 --> 00:18:29.100
But just don't overdo it.

00:18:29.100 --> 00:18:31.940
Again, the real value
is in the small tests

00:18:31.940 --> 00:18:36.710
that test every screen,
every state of your app.

00:18:36.710 --> 00:18:39.246
And on the same
page, launch directly

00:18:39.246 --> 00:18:40.495
into the desired screen state.

00:18:40.495 --> 00:18:44.960
So again, when testing
these self-contained screens

00:18:44.960 --> 00:18:47.390
and states, launch
directly into them.

00:18:47.390 --> 00:18:49.400
Don't do deep navigation before.

00:18:49.400 --> 00:18:51.650
If you want to test
an activity that's

00:18:51.650 --> 00:18:53.250
not the first
activity in our app,

00:18:53.250 --> 00:18:57.460
and you need to traverse five
different screens to get there.

00:18:57.460 --> 00:18:59.640
something can just
break along the way.

00:18:59.640 --> 00:19:01.176
And then you're
not really testing

00:19:01.176 --> 00:19:02.300
the thing you want to test.

00:19:02.300 --> 00:19:04.633
You're getting errors about
something totally different,

00:19:04.633 --> 00:19:07.320
totally another
part of your code.

00:19:07.320 --> 00:19:09.230
So don't do deep navigation.

00:19:09.230 --> 00:19:12.120
There's ways you can
easily achieve that.

00:19:12.120 --> 00:19:16.030
So if you just override
the activity test rule,

00:19:16.030 --> 00:19:19.290
you can override the
getActivityIntent method.

00:19:19.290 --> 00:19:20.740
Just provide a custom intent.

00:19:20.740 --> 00:19:23.390
If you have an activity
that gets some kind of data,

00:19:23.390 --> 00:19:25.300
and then displays
a different state,

00:19:25.300 --> 00:19:28.580
you can just provide
that data in the intent.

00:19:28.580 --> 00:19:32.560
And just remember, if you use
this, every test in your class

00:19:32.560 --> 00:19:34.760
will have the activity
started this way.

00:19:34.760 --> 00:19:39.290
If you need some more
custom fine grained control,

00:19:39.290 --> 00:19:41.430
just use the free
argument constructor.

00:19:41.430 --> 00:19:44.970
And if you parse false
as the last argument,

00:19:44.970 --> 00:19:47.440
the activity will not be
launched automatically

00:19:47.440 --> 00:19:48.700
for your tests.

00:19:48.700 --> 00:19:52.100
And then, in every test, you
can just prepare the intent

00:19:52.100 --> 00:19:52.780
that you want.

00:19:52.780 --> 00:19:55.238
And just remember you have to
launch the activity manually.

00:19:57.890 --> 00:20:01.860
Most UI tests should be
as hermetic as possible.

00:20:01.860 --> 00:20:04.150
So again, you want
to test your app.

00:20:04.150 --> 00:20:06.154
You want to test the
screen of your app.

00:20:06.154 --> 00:20:08.070
You don't want to test
the network conditions.

00:20:08.070 --> 00:20:10.575
You don't want to test
if the server is working.

00:20:10.575 --> 00:20:13.200
You're testing the features that
you're coding inside your app,

00:20:13.200 --> 00:20:15.580
and in your UI.

00:20:15.580 --> 00:20:17.920
So make your test as
hermetic as possible.

00:20:17.920 --> 00:20:19.670
There's tools that can
help you with that.

00:20:19.670 --> 00:20:21.000
There's Espresso Intent.

00:20:21.000 --> 00:20:23.590
There's Mockito for mocking.

00:20:23.590 --> 00:20:26.716
Remember about dependency
injection, and Dagger 2.

00:20:26.716 --> 00:20:29.310
And basically just
make sure you're

00:20:29.310 --> 00:20:33.820
isolated from all the layers
that you don't care about.

00:20:33.820 --> 00:20:37.870
Because that's not really
UI testing then, is it?

00:20:37.870 --> 00:20:40.470
And speaking of
Espresso intents,

00:20:40.470 --> 00:20:42.230
I don't know if
you've used it before.

00:20:42.230 --> 00:20:44.880
It's a really nice thing
that we've added to Espresso.

00:20:44.880 --> 00:20:47.900
It's a very small API.

00:20:47.900 --> 00:20:50.930
Basically, it lets
you verify intents

00:20:50.930 --> 00:20:55.260
that are sent from your app, or
stub the responses to intents

00:20:55.260 --> 00:20:58.360
that you send to
other applications.

00:20:58.360 --> 00:21:00.360
So here, in the
screen, you can see.

00:21:00.360 --> 00:21:04.780
And before I'm setting up
response stubbing for an intent

00:21:04.780 --> 00:21:06.450
that I sent out
to the camera app.

00:21:06.450 --> 00:21:08.907
And below at the
bottom, I'm just

00:21:08.907 --> 00:21:10.740
very verifying that
when I click the button,

00:21:10.740 --> 00:21:12.360
my app sends out the intent.

00:21:12.360 --> 00:21:16.040
I encourage you to use
it to isolate your test

00:21:16.040 --> 00:21:17.680
from external applications.

00:21:20.537 --> 00:21:22.370
Learn how to handle
long running animations.

00:21:22.370 --> 00:21:28.070
That's been a common
problem in Espresso.

00:21:28.070 --> 00:21:31.030
We try to synchronize on a
lot of things, like I said,

00:21:31.030 --> 00:21:32.760
on AsyncTasks and so on.

00:21:32.760 --> 00:21:34.690
But sometimes,
Espresso just simply

00:21:34.690 --> 00:21:38.910
can't run because something
is keeps animating in your UI.

00:21:38.910 --> 00:21:41.060
And there's two
types of animations I

00:21:41.060 --> 00:21:42.690
want to call out, specifically.

00:21:42.690 --> 00:21:46.475
So on the left, you can
see-- oh, it's not animating.

00:21:46.475 --> 00:21:47.100
That's curious.

00:21:47.100 --> 00:21:48.790
Oh, it's animating now.

00:21:48.790 --> 00:21:51.240
Let's say you have
some kind of drawable.

00:21:51.240 --> 00:21:52.040
It's your own.

00:21:52.040 --> 00:21:53.320
It's your own animation.

00:21:53.320 --> 00:21:54.790
You created it.

00:21:54.790 --> 00:21:56.330
You control it.

00:21:56.330 --> 00:21:59.630
It's all up to you,
if it runs or not.

00:21:59.630 --> 00:22:02.180
And on the other hand,
you have animations that

00:22:02.180 --> 00:22:04.510
are embedded in the framework.

00:22:04.510 --> 00:22:06.919
So for example, a
progress bar is something

00:22:06.919 --> 00:22:07.960
you don't really control.

00:22:07.960 --> 00:22:10.830
It's just a system widget.

00:22:10.830 --> 00:22:14.170
It animates, and there's not
much you can do about it.

00:22:14.170 --> 00:22:17.370
And there's a way to actually
deal with the animations

00:22:17.370 --> 00:22:18.990
that you control.

00:22:18.990 --> 00:22:21.040
So for running
Espresso, anyway, we

00:22:21.040 --> 00:22:23.390
tell you to disable
animations in the system.

00:22:23.390 --> 00:22:26.450
So system wide, we disable
the layout animations,

00:22:26.450 --> 00:22:27.890
transitions, and so on.

00:22:27.890 --> 00:22:30.350
And you can actually
leverage that setting,

00:22:30.350 --> 00:22:33.370
and read it in your
applications code,

00:22:33.370 --> 00:22:37.120
and decide if the
animations are disabled,

00:22:37.120 --> 00:22:39.440
maybe I should also
disable my own animations.

00:22:39.440 --> 00:22:41.260
Because, really, that's
what the user said

00:22:41.260 --> 00:22:44.310
when they adjusted the setting.

00:22:44.310 --> 00:22:47.680
So it's the right
thing to do, anyway.

00:22:47.680 --> 00:22:50.390
And on the other
hand, like I said,

00:22:50.390 --> 00:22:52.400
some things, like
the progress bar,

00:22:52.400 --> 00:22:55.250
are not very easy to work with.

00:22:55.250 --> 00:22:58.410
So you have you will just have
to find other ways, like maybe

00:22:58.410 --> 00:23:00.020
having a separate
flavor for your test

00:23:00.020 --> 00:23:02.260
when the drawable
for that progress bar

00:23:02.260 --> 00:23:05.892
is just not animated.

00:23:05.892 --> 00:23:07.350
There are some
tools that can help.

00:23:07.350 --> 00:23:09.420
So for example, in
developer tools,

00:23:09.420 --> 00:23:13.470
you can switch a setting
called Show Surface Updates.

00:23:13.470 --> 00:23:16.460
This might help you identify
some of those animations

00:23:16.460 --> 00:23:19.800
that you were not aware of,
but are somewhere in your UI,

00:23:19.800 --> 00:23:23.350
and keep posting events that
keep Espresso from running.

00:23:25.990 --> 00:23:29.910
And next, how to
handle test failures.

00:23:29.910 --> 00:23:31.830
So your test will
fail sometimes.

00:23:31.830 --> 00:23:36.810
And it's obviously not intended,
but maybe the test is wrong.

00:23:36.810 --> 00:23:40.090
Maybe you need to write
in some other way.

00:23:40.090 --> 00:23:41.930
So the good thing
is, Espresso aims

00:23:41.930 --> 00:23:44.760
to tell you exactly what
went wrong in the test,

00:23:44.760 --> 00:23:46.080
and how to fix it.

00:23:46.080 --> 00:23:49.400
So we have really
descriptive error messages.

00:23:49.400 --> 00:23:52.710
We provide a message that
tells you what went wrong.

00:23:52.710 --> 00:23:55.900
And moreover, we provide a
dump of the view hierarchy,

00:23:55.900 --> 00:23:58.310
so you can look at the exact
views and their properties,

00:23:58.310 --> 00:24:00.980
and maybe find the culprit.

00:24:00.980 --> 00:24:03.650
But if that's not
enough, it's very easy

00:24:03.650 --> 00:24:07.480
to implement your
own failure handler.

00:24:07.480 --> 00:24:10.200
You can attach your own handler,
and just log out more data.

00:24:10.200 --> 00:24:13.970
If you have some information
that you think would be useful,

00:24:13.970 --> 00:24:16.380
you can just add it to the log.

00:24:16.380 --> 00:24:20.320
One very interesting use of
that that I've seen online

00:24:20.320 --> 00:24:24.010
is someone said that Espresso
was actually giving him

00:24:24.010 --> 00:24:26.580
too much data about
the view hierarchy

00:24:26.580 --> 00:24:29.370
for a very, very complex screen.

00:24:29.370 --> 00:24:31.440
And so he created
a failure handler

00:24:31.440 --> 00:24:35.010
that actually made
the logs smaller,

00:24:35.010 --> 00:24:38.050
to only concentrate on the
parts that they care about.

00:24:38.050 --> 00:24:41.170
It's an interesting use.

00:24:41.170 --> 00:24:43.654
And then there's more
developer tools that

00:24:43.654 --> 00:24:44.820
can help you with debugging.

00:24:44.820 --> 00:24:47.580
So you can enable
showing touches,

00:24:47.580 --> 00:24:49.300
pointer location, layer bounds.

00:24:49.300 --> 00:24:51.380
Those basically let
you inspect better

00:24:51.380 --> 00:24:53.820
what's happening on the
screen when Espresso runs.

00:24:53.820 --> 00:24:55.220
And also use the
Hierarchy Viewer

00:24:55.220 --> 00:24:57.940
if you just want to
interactively explore

00:24:57.940 --> 00:25:00.980
the hierarchy, for example,
find out the IDs of views

00:25:00.980 --> 00:25:03.780
or their relative positions
in the view hierarchy.

00:25:06.400 --> 00:25:08.590
There's one more setting,
not in Developer Tools,

00:25:08.590 --> 00:25:10.180
but in Accessibility.

00:25:10.180 --> 00:25:12.900
So on some devices,
they're really slow,

00:25:12.900 --> 00:25:16.280
or some emulators,
especially the older ones.

00:25:16.280 --> 00:25:18.480
Single taps are not
registered correctly.

00:25:18.480 --> 00:25:20.610
I mean single taps
coming from Espresso.

00:25:20.610 --> 00:25:22.780
I don't want to go into
details, but we really

00:25:22.780 --> 00:25:25.820
try to hide away the complexity
of actually simulating

00:25:25.820 --> 00:25:28.460
a tap in Espresso.

00:25:28.460 --> 00:25:31.280
But every tap is actually
two actions-- down and up.

00:25:31.280 --> 00:25:33.520
And if a device is
really slow, if it's

00:25:33.520 --> 00:25:35.840
bogged down by some kind
of background operations,

00:25:35.840 --> 00:25:37.970
or the system is
just not keeping up,

00:25:37.970 --> 00:25:40.580
these two operations can
happen too far apart.

00:25:40.580 --> 00:25:43.000
And then the system
thinks it's a long press.

00:25:43.000 --> 00:25:44.970
So basically, if you
change the delay to long,

00:25:44.970 --> 00:25:46.220
that might help the situation.

00:25:49.260 --> 00:25:54.090
And finally, enable testing
for Accessibility issues.

00:25:54.090 --> 00:25:57.480
So that's something
many developers still

00:25:57.480 --> 00:25:59.671
don't think about, sadly.

00:25:59.671 --> 00:26:01.140
But really, you
want to make sure

00:26:01.140 --> 00:26:04.082
that your applications are
accessible to all people who

00:26:04.082 --> 00:26:04.790
want to use them.

00:26:04.790 --> 00:26:08.520
And Espresso gives
you a very easy way.

00:26:08.520 --> 00:26:10.920
Just enable the
Accessibility Validator.

00:26:10.920 --> 00:26:13.560
It's a very easy way to
start testing for very

00:26:13.560 --> 00:26:15.770
common Accessibility issues.

00:26:15.770 --> 00:26:18.120
So please enable that,
and fix your apps,

00:26:18.120 --> 00:26:23.850
fix your views to make sure
the app can be used by anyone.

00:26:23.850 --> 00:26:25.510
And what's next?

00:26:25.510 --> 00:26:28.200
I really encourage you to look
at the Espresso documentation.

00:26:28.200 --> 00:26:31.650
There's a section called
Advanced Espresso, or Advanced

00:26:31.650 --> 00:26:33.075
Sample, something like that.

00:26:33.075 --> 00:26:36.900
And you will see lots and
lots of more tips and tricks

00:26:36.900 --> 00:26:39.927
on how to use Espresso, how
to use the more unknown APIs

00:26:39.927 --> 00:26:42.232
of Espresso.

00:26:42.232 --> 00:26:44.170
Do check out the
Android Testing codelab.

00:26:44.170 --> 00:26:45.770
It's not only about Espresso.

00:26:45.770 --> 00:26:49.050
It's also about how to structure
your app to be more testable.

00:26:49.050 --> 00:26:53.890
It gives a great overview
of all the testing

00:26:53.890 --> 00:26:55.960
offerings that we have.

00:26:55.960 --> 00:26:58.120
Finally, we have
greatest testing samples.

00:26:58.120 --> 00:26:59.967
We have a testing blueprint.

00:26:59.967 --> 00:27:02.550
And like I said before, remember
that Espresso is open source.

00:27:02.550 --> 00:27:07.080
So if you find anyplace where
it's not working the best

00:27:07.080 --> 00:27:09.460
it could, if we're missing
some kind of matchers,

00:27:09.460 --> 00:27:11.490
if there's a source of
flakiness for your test

00:27:11.490 --> 00:27:14.310
that we were not aware of,
file bugs, or better yet,

00:27:14.310 --> 00:27:18.420
file pull requests, and help
us to make it even better.

00:27:18.420 --> 00:27:32.570
[MUSIC PLAYING]

