WEBVTT
Kind: captions
Language: en

00:00:00.480 --> 00:00:02.036
All right. You're done.

00:00:02.036 --> 00:00:03.827
Let's look at the solution.

00:00:03.877 --> 00:00:06.538
All right. We'll move to WeatherProvider.

00:00:07.008 --> 00:00:09.110
We start by creating
a third selection query

00:00:09.110 --> 00:00:10.830
up at the top of our provider,

00:00:10.830 --> 00:00:14.590
much like the second query except that
we search for the exact date

00:00:14.590 --> 00:00:16.730
rather than a greater than or equal date.

00:00:16.730 --> 00:00:19.800
We then add a function
that uses the weather contract functions

00:00:19.800 --> 00:00:22.810
to get the date
and postal code from the URI.

00:00:22.810 --> 00:00:25.560
We use the new query we just wrote.

00:00:25.560 --> 00:00:28.513
And the same SQLI query builder
we used before,

00:00:28.513 --> 00:00:30.766
since it only defines the join.

00:00:31.966 --> 00:00:34.280
And then we just call
this function in the weather

00:00:34.280 --> 00:00:37.420
with location and date switch statement
in our query.

00:00:37.420 --> 00:00:39.300
That's it.

00:00:39.300 --> 00:00:42.060
Those are all the queries we
plan to use for Sunshine,

00:00:42.060 --> 00:00:44.370
but we still need to test.

00:00:44.370 --> 00:00:46.670
Let's go back to test provider.

00:00:46.670 --> 00:00:51.930
As you can see, our test
has a very, very good model already.

00:00:51.930 --> 00:00:54.870
Let's fix up some of these old tests
and close the weather cursor.

00:00:55.500 --> 00:00:58.400
Now, we can simply copy this test over.

00:00:58.400 --> 00:01:02.730
It turns out that the exact same data
is required for our new URI.

00:01:03.520 --> 00:01:06.350
All we have to do
is to build weather location with date,

00:01:06.350 --> 00:01:08.790
instead of saying weather location
with start date,

00:01:09.930 --> 00:01:12.880
and we should get the same result.

00:01:12.880 --> 00:01:15.414
Let's see if that's really true
by running our tests.

00:01:16.834 --> 00:01:18.605
And our test passed.

00:01:18.605 --> 00:01:21.076
So we've now implemented
all of the queries,

00:01:21.076 --> 00:01:23.877
but we're not done
with our content provider yet.

00:01:23.877 --> 00:01:26.670
After all, we're not writing any data
into the database

00:01:26.670 --> 00:01:28.590
through our content provider.

