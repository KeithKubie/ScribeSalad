WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.936
[MUSIC PLAYING]

00:00:01.936 --> 00:00:04.000
MALE SPEAKER: Shanghai
GDG is a very

00:00:04.000 --> 00:00:05.800
interesting developer community.

00:00:05.800 --> 00:00:06.930
FEMALE SPEAKER: I'm
glad somebody

00:00:06.930 --> 00:00:07.950
has asked this question.

00:00:07.950 --> 00:00:09.040
MALE SPEAKER: --GDG is a very

00:00:09.040 --> 00:00:10.830
interesting developer community.

00:00:10.830 --> 00:00:11.960
FEMALE SPEAKER: I'm
glad somebody

00:00:11.960 --> 00:00:12.805
has asked this question.

00:00:12.805 --> 00:00:13.842
MALE SPEAKER: This is where
the magic happens.

00:00:13.842 --> 00:00:15.820
FEMALE SPEAKER: This is
primarily a question and

00:00:15.820 --> 00:00:17.510
answer show, so if any
of you out there

00:00:17.510 --> 00:00:18.920
would like to ask questions.

00:00:23.810 --> 00:00:25.400
IKAI LAN: Good morning
from New York.

00:00:25.400 --> 00:00:29.700
Welcome to yet another edition
of Apps Script Live.

00:00:29.700 --> 00:00:32.340
My name is Ikai Lan, and
this is Kalyan Reddy.

00:00:32.340 --> 00:00:33.700
He's a new member of our team.

00:00:33.700 --> 00:00:34.050
Kalyan.

00:00:34.050 --> 00:00:34.865
KALYAN REDDY: Hi, guys.

00:00:34.865 --> 00:00:37.130
IKAI LAN: Why don't you tell
us a little about yourself?

00:00:37.130 --> 00:00:39.470
KALYAN REDDY: I started here at
Google about two and a half

00:00:39.470 --> 00:00:44.590
weeks ago on the Apps Script
team, and I'm very excited to

00:00:44.590 --> 00:00:46.340
start working here.

00:00:46.340 --> 00:00:48.700
Seems like a great product,
and I'm learning more

00:00:48.700 --> 00:00:49.430
and more every day.

00:00:49.430 --> 00:00:50.945
I hope to share that
with you guys.

00:00:50.945 --> 00:00:53.240
IKAI LAN: Kalyan's a new member
of our team, so you're

00:00:53.240 --> 00:00:55.970
going to start seeing him more
in these office hours, as well

00:00:55.970 --> 00:01:00.440
as the Stack Overflow
Issues Tracker.

00:01:00.440 --> 00:01:03.330
You'll be seeing a lot more of
his face and his remarks.

00:01:03.330 --> 00:01:05.489
So Kalyan, tell us a little
bit about yourself.

00:01:05.489 --> 00:01:06.710
Tell us a little bit about
yourself technically.

00:01:06.710 --> 00:01:08.760
What's your favorite programming
language?

00:01:08.760 --> 00:01:11.040
KALYAN REDDY: I work mostly with
Java, but if I want to

00:01:11.040 --> 00:01:14.450
whip up something quick, I like
to go the Python route.

00:01:14.450 --> 00:01:17.640
IKAI LAN: Anything in
particular, any libraries or

00:01:17.640 --> 00:01:19.360
frameworks that you like
in Java in particular?

00:01:19.360 --> 00:01:20.260
KALYAN REDDY: I like
them all, man.

00:01:20.260 --> 00:01:21.030
IKAI LAN: You like them all!

00:01:21.030 --> 00:01:21.410
Wow.

00:01:21.410 --> 00:01:23.775
Because, man, I can name
some monstrosities.

00:01:26.380 --> 00:01:28.310
KALYAN REDDY: I've been living
for the last two years in the

00:01:28.310 --> 00:01:31.480
cold, cold land of Minnesota,
so there wasn't much to do

00:01:31.480 --> 00:01:34.910
except for go online
and program.

00:01:34.910 --> 00:01:36.270
So, hey, that's my background.

00:01:36.270 --> 00:01:36.580
IKAI LAN: Cool.

00:01:36.580 --> 00:01:38.310
Well, welcome to
New York City.

00:01:38.310 --> 00:01:40.610
New York City's happy to have
you, and you're going to have

00:01:40.610 --> 00:01:42.230
a blast out here.

00:01:42.230 --> 00:01:44.530
So we've got a great show
for you guys today.

00:01:44.530 --> 00:01:47.920
Before we start, I am always
plugging events.

00:01:47.920 --> 00:01:50.850
We're doing an Apps Script
Hackathon in Los Angeles.

00:01:50.850 --> 00:01:52.310
We had such a great
time in Austin.

00:01:52.310 --> 00:01:55.990
We announced it a few weeks ago,
and I will be plugging it

00:01:55.990 --> 00:01:59.250
every time on this show, because
I'm going to be there.

00:01:59.250 --> 00:02:01.520
I don't think we've decided if
you're going to go or not.

00:02:01.520 --> 00:02:02.140
KALYAN REDDY: I'd like to go.

00:02:02.140 --> 00:02:04.230
IKAI LAN: Hey, we'd
love to have you.

00:02:04.230 --> 00:02:06.230
And we're going to have Arun,
who you saw on the show a few

00:02:06.230 --> 00:02:08.880
weeks ago, will be attending,
as well as we'll be having

00:02:08.880 --> 00:02:10.449
some members of the
[INAUDIBLE] team.

00:02:10.449 --> 00:02:13.600
So go on Google and search
for Apps Script

00:02:13.600 --> 00:02:15.180
Hackathon, Los Angeles.

00:02:15.180 --> 00:02:16.280
It should be one of
the first results.

00:02:16.280 --> 00:02:19.670
And if Google's working
correctly, my face should show

00:02:19.670 --> 00:02:21.060
up next to the blog post.

00:02:21.060 --> 00:02:24.320
It's happening on Tuesday,
November 3, in our Google

00:02:24.320 --> 00:02:26.450
Venice Beach office.

00:02:26.450 --> 00:02:29.490
Venice Beach is where Arnold
Schwarzenegger used to work

00:02:29.490 --> 00:02:32.010
out, and that's where he got his
career before he had his

00:02:32.010 --> 00:02:33.980
breakout hit in Conan.

00:02:33.980 --> 00:02:36.550
So maybe we'll have
a break out there.

00:02:36.550 --> 00:02:37.005
KALYAN REDDY: Maybe.

00:02:37.005 --> 00:02:39.420
IKAI LAN: Hit the beach,
and maybe some famous--

00:02:39.420 --> 00:02:40.060
KALYAN REDDY: Of course.

00:02:40.060 --> 00:02:43.170
We're going to film some slow
motion montages, and upload

00:02:43.170 --> 00:02:44.340
that to the developer
[INAUDIBLE].

00:02:44.340 --> 00:02:47.480
IKAI LAN: Slow motion montages
of us coding.

00:02:47.480 --> 00:02:48.260
That's great.

00:02:48.260 --> 00:02:48.690
You know what?

00:02:48.690 --> 00:02:51.890
One day they're going to make
a movie of people actually

00:02:51.890 --> 00:02:53.620
programming, instead
of when you see

00:02:53.620 --> 00:02:54.240
these movies of people.

00:02:54.240 --> 00:02:55.980
Oh my God, so exciting!

00:02:55.980 --> 00:02:58.330
They have these three worlds.

00:02:58.330 --> 00:02:59.245
KALYAN REDDY: They can
have the music

00:02:59.245 --> 00:03:01.200
from Chariots Of Fire.

00:03:01.200 --> 00:03:02.520
IKAI LAN: It's going
to be so terrible.

00:03:02.520 --> 00:03:03.330
It's just going to be switching

00:03:03.330 --> 00:03:06.410
windows and using Vim.

00:03:06.410 --> 00:03:07.990
But enough procrastinating.

00:03:07.990 --> 00:03:09.230
We're making Eric
laugh too much.

00:03:09.230 --> 00:03:11.290
So Eric, who I'm usually on this
show if he's producing

00:03:11.290 --> 00:03:12.140
for us today.

00:03:12.140 --> 00:03:13.300
Eric, say hi.

00:03:13.300 --> 00:03:14.170
ERIC: Hi.

00:03:14.170 --> 00:03:14.930
IKAI LAN: I don't know
if you heard that.

00:03:14.930 --> 00:03:16.080
He's shy, anyway.

00:03:16.080 --> 00:03:17.570
No, he's not shy.

00:03:17.570 --> 00:03:19.550
So we've got that Hackathon
coming up.

00:03:19.550 --> 00:03:21.230
Just go on Google, search
for Apps Script

00:03:21.230 --> 00:03:22.540
Hackathon Los Angeles.

00:03:22.540 --> 00:03:23.980
It's in our office.

00:03:23.980 --> 00:03:26.410
We're going to have
food and drinks.

00:03:26.410 --> 00:03:28.010
It's going to be a lot
of fun, right?

00:03:28.010 --> 00:03:31.370
So why don't we go ahead
and get started.

00:03:31.370 --> 00:03:33.890
We're going to talk a little
bit about a recent release.

00:03:33.890 --> 00:03:37.270
We'll go through some of the
Q&amp;A, and if we have any live

00:03:37.270 --> 00:03:39.910
audience members, let's talk.

00:03:39.910 --> 00:03:42.905
So let's start with some
of the release notes.

00:03:42.905 --> 00:03:44.210
KALYAN REDDY: All right.

00:03:44.210 --> 00:03:46.090
Can you guys see this?

00:03:46.090 --> 00:03:47.425
IKAI LAN: There it is.

00:03:47.425 --> 00:03:50.620
KALYAN REDDY: So I think for
these release notes, the only

00:03:50.620 --> 00:03:52.670
thing I'd like to really
stress is that we are

00:03:52.670 --> 00:03:55.350
validating HTTP as
certificates now.

00:03:55.350 --> 00:03:59.570
So if your app is doing a lot of
URL fetch requests, and you

00:03:59.570 --> 00:04:03.412
see some flakiness, you would
want to set that to false.

00:04:03.412 --> 00:04:05.130
IKAI LAN: Set the
value to false.

00:04:05.130 --> 00:04:06.190
KALYAN REDDY: Set the
value to false.

00:04:06.190 --> 00:04:06.480
IKAI LAN: Yeah.

00:04:06.480 --> 00:04:09.710
So what's happening is we had
a recent release last week.

00:04:09.710 --> 00:04:11.240
Was the 21st last week?

00:04:11.240 --> 00:04:12.900
Yeah, it's last Thursday.

00:04:12.900 --> 00:04:16.519
And there's a couple of new
features, so check them out on

00:04:16.519 --> 00:04:17.870
search for Apps Script
release notes.

00:04:17.870 --> 00:04:20.070
But there's one thing that's
very important that everyone

00:04:20.070 --> 00:04:23.670
should know is that if you're
using URL fetch app at all, we

00:04:23.670 --> 00:04:25.790
were not validating HTTPS
certificates.

00:04:25.790 --> 00:04:28.710
So a lot of places, they let
their HTTPS certificates

00:04:28.710 --> 00:04:30.540
expire, and this is
not intentional.

00:04:33.060 --> 00:04:37.930
I have been at places where we
ask people, I'm like, wait, do

00:04:37.930 --> 00:04:39.400
we have to renew this cert?

00:04:39.400 --> 00:04:43.040
And the guy next to me goes,
oh, I think we do.

00:04:43.040 --> 00:04:44.210
KALYAN REDDY: We should do
that one of these days.

00:04:44.210 --> 00:04:45.200
IKAI LAN: Oh, yeah.

00:04:45.200 --> 00:04:48.210
It's so common that a
certificate will, like, you'll

00:04:48.210 --> 00:04:49.220
forget to renew your
certificate.

00:04:49.220 --> 00:04:50.130
It's a human error.

00:04:50.130 --> 00:04:53.060
And I remember one time we
didn't do it, because we put

00:04:53.060 --> 00:04:55.320
it on our calendar, and we're
like, oh, we're not going to

00:04:55.320 --> 00:04:55.850
forget this.

00:04:55.850 --> 00:04:59.980
Then the company made us switch
calendaring systems.

00:04:59.980 --> 00:05:02.070
So we're like, why isn't
it in our calendar?

00:05:02.070 --> 00:05:03.360
And it's very common.

00:05:03.360 --> 00:05:05.985
But if you're seeing that
you're making a call,

00:05:05.985 --> 00:05:07.790
obviously it's not secure,
because you're opening

00:05:07.790 --> 00:05:10.170
yourself up to what's called
a man in the middle attack.

00:05:10.170 --> 00:05:12.030
And a man in the middle attack
is if I'm sending you a

00:05:12.030 --> 00:05:13.710
message and Eric intercepts
it, and he

00:05:13.710 --> 00:05:14.870
rewrites stuff, right?

00:05:14.870 --> 00:05:17.530
Because Eric is very
mischievous.

00:05:17.530 --> 00:05:19.340
Very mischievous guy.

00:05:19.340 --> 00:05:21.805
He can actually intercept and
read the messages, and pass

00:05:21.805 --> 00:05:22.930
them back and forth.

00:05:22.930 --> 00:05:25.116
KALYAN REDDY: I really
don't trust Eric.

00:05:25.116 --> 00:05:27.030
IKAI LAN: Wow.

00:05:27.030 --> 00:05:30.050
I think there's a line there
that you just crossed.

00:05:30.050 --> 00:05:30.360
No.

00:05:30.360 --> 00:05:34.130
But the HTTP certificates,
definitely the default is

00:05:34.130 --> 00:05:36.370
safe, which is validate
your certificates.

00:05:36.370 --> 00:05:39.080
But if there is a site that you
know you can trust, you

00:05:39.080 --> 00:05:41.720
could set to false, because
sometimes you just want to.

00:05:41.720 --> 00:05:43.800
Sometimes you don't care if
there's a man in the middle.

00:05:43.800 --> 00:05:45.870
You're just getting some data,
and it's like public, right?

00:05:45.870 --> 00:05:50.070
But we leave that up to you
to make that choice.

00:05:50.070 --> 00:05:52.430
So, how do you feel
about some Q&amp;A?

00:05:52.430 --> 00:05:53.550
KALYAN REDDY: Sounds good.

00:05:53.550 --> 00:05:53.790
Let's get to it.

00:05:53.790 --> 00:05:54.420
IKAI LAN: Let's do it.

00:05:54.420 --> 00:05:57.917
I love your enthusiasm That's
why I'm happy to have you on

00:05:57.917 --> 00:06:02.078
this team, because of your
enthusiasm for Q&amp;A.

00:06:02.078 --> 00:06:04.100
KALYAN REDDY: Let's see here.

00:06:04.100 --> 00:06:07.010
So, the first question we have
is, I have a library

00:06:07.010 --> 00:06:09.800
containing a webApp
(UIApp/doGet) intended to work

00:06:09.800 --> 00:06:11.790
with each user's spreadsheet.

00:06:11.790 --> 00:06:15.090
How can a user of that library
pass the ID of his own

00:06:15.090 --> 00:06:17.370
spreadsheet to the library?

00:06:17.370 --> 00:06:20.410
So there are a couple ways to do
this, and I quickly coded--

00:06:20.410 --> 00:06:22.900
IKAI LAN: Let's clarify
the question first.

00:06:22.900 --> 00:06:24.830
When I read this, I initially
misunderstood.

00:06:24.830 --> 00:06:30.820
I thought he was asking us if I
am building UIApp, how can I

00:06:30.820 --> 00:06:32.710
ask the user for
a spreadsheet?

00:06:32.710 --> 00:06:34.730
And that's why I misrepresented
the question to

00:06:34.730 --> 00:06:36.000
Kalyan when I was talking
to him earlier.

00:06:36.000 --> 00:06:39.130
I said, oh, yeah, because it
really sucks to have to

00:06:39.130 --> 00:06:42.780
copy-paste an ID from a URL
bar and take it into this

00:06:42.780 --> 00:06:44.290
webApp and put it into
a text field.

00:06:44.290 --> 00:06:44.600
KALYAN REDDY: Right.

00:06:44.600 --> 00:06:46.000
That would be a bad
user experience.

00:06:46.000 --> 00:06:46.310
IKAI LAN: Yeah.

00:06:46.310 --> 00:06:48.920
I mean, if you're whipping up
something fast-- like, we have

00:06:48.920 --> 00:06:50.830
a bunch of scripts in-house
that do that, but that's

00:06:50.830 --> 00:06:53.410
because we're, like, I run the
script once a month and I know

00:06:53.410 --> 00:06:55.090
how to use this thing, right?

00:06:55.090 --> 00:06:59.730
But it doesn't look like that's
what you're asking.

00:06:59.730 --> 00:07:06.320
It looks like you're building
a UIApp to get in a library,

00:07:06.320 --> 00:07:10.160
and you want a user to be
able to use that UIApp.

00:07:10.160 --> 00:07:11.770
I think that's my
understanding.

00:07:11.770 --> 00:07:12.760
Is it yours?

00:07:12.760 --> 00:07:14.530
KALYAN REDDY: That's
why I got as well.

00:07:14.530 --> 00:07:18.890
And so, if that's what you'd
like to do, there's several

00:07:18.890 --> 00:07:19.520
ways to do this.

00:07:19.520 --> 00:07:24.720
One of the things is I quickly
coded up a script here that'll

00:07:24.720 --> 00:07:25.240
accomplish it.

00:07:25.240 --> 00:07:28.560
Obviously, you can link to the
library here, and then once

00:07:28.560 --> 00:07:30.680
you do that, in order to get
your docs list, you can just

00:07:30.680 --> 00:07:33.720
use our docs list API, and you
do get files by type, and you

00:07:33.720 --> 00:07:36.330
pass in the enumerated type
for a spreadsheet.

00:07:36.330 --> 00:07:36.890
It'll get all your

00:07:36.890 --> 00:07:38.070
spreadsheets and this variable.

00:07:38.070 --> 00:07:39.940
You iterate over it,
and you can get ID.

00:07:39.940 --> 00:07:43.840
Or there's also functions where
you can search by name.

00:07:43.840 --> 00:07:45.610
You can query for the actual
spreadsheet that you're

00:07:45.610 --> 00:07:49.030
looking for, and once you have
that ID, you can just go ahead

00:07:49.030 --> 00:07:51.870
and pass it into whatever
library function, let it to do

00:07:51.870 --> 00:07:54.790
its thing, come back, and
it presents the results.

00:07:54.790 --> 00:07:58.040
Other things that you can
potentially do is you don't

00:07:58.040 --> 00:08:00.970
necessarily need to have
this be done in code.

00:08:00.970 --> 00:08:02.920
You can call these same
functions and have the results

00:08:02.920 --> 00:08:07.100
display in a list, a Dropbox,
something that people can

00:08:07.100 --> 00:08:10.250
visually see and select, and
that would make it easier for

00:08:10.250 --> 00:08:12.740
them to just take whatever
file name that they want.

00:08:12.740 --> 00:08:17.890
You can correspond that file
name to an ID, and then do

00:08:17.890 --> 00:08:18.660
your thing in the background.

00:08:18.660 --> 00:08:19.850
IKAI LAN: Right.

00:08:19.850 --> 00:08:20.640
That's good.

00:08:20.640 --> 00:08:24.820
But from a library perspective,
my assumption is

00:08:24.820 --> 00:08:28.210
that you're trying to build a UI
and return it, and return a

00:08:28.210 --> 00:08:29.280
UI app instance.

00:08:29.280 --> 00:08:32.960
So you would likely
create a method.

00:08:32.960 --> 00:08:35.990
We call these builder methods
inside your library that says

00:08:35.990 --> 00:08:38.020
build a UI from spreadsheet
ID.

00:08:38.020 --> 00:08:42.860
And from that, if you're
building this library, I would

00:08:42.860 --> 00:08:46.520
call this library, and inside
this builder as a parameter, I

00:08:46.520 --> 00:08:47.900
would pass the spreadsheet ID.

00:08:47.900 --> 00:08:49.050
That is how I would do that.

00:08:49.050 --> 00:08:52.950
Or I would say what's containing
spreadsheet, right?

00:08:52.950 --> 00:08:54.620
There's a bunch of different
ways of doing this, and I

00:08:54.620 --> 00:08:58.250
think what Kalyan is saying is
that it depends on what it is

00:08:58.250 --> 00:08:58.830
you're trying to do.

00:08:58.830 --> 00:09:01.650
If you really want to build a UI
as a library, I think there

00:09:01.650 --> 00:09:05.156
are a lot of challenges when
it happens, right?

00:09:05.156 --> 00:09:09.940
KALYAN REDDY: Yeah, you don't
generally want to do that.

00:09:09.940 --> 00:09:12.580
I think it would be cleaner to
do it just the other way,

00:09:12.580 --> 00:09:13.350
externally.

00:09:13.350 --> 00:09:19.420
Just use the library to just
have functions that you can

00:09:19.420 --> 00:09:23.094
query and get results and
responses quickly.

00:09:23.094 --> 00:09:26.620
And do you have any examples
to clarify that?

00:09:26.620 --> 00:09:29.930
IKAI LAN: A good example is if
you should be able to build

00:09:29.930 --> 00:09:34.960
like a widget, and add
it to your UI, right?

00:09:34.960 --> 00:09:36.972
Custom widgets and whatnot.

00:09:36.972 --> 00:09:38.220
Yeah.

00:09:38.220 --> 00:09:40.815
So, let's go on to some
more questions.

00:09:40.815 --> 00:09:41.550
KALYAN REDDY: All right.

00:09:41.550 --> 00:09:43.630
IKAI LAN: Let's see, is there
anyone live on the

00:09:43.630 --> 00:09:45.600
Hangout right now?

00:09:45.600 --> 00:09:47.000
We've got a different set up.

00:09:47.000 --> 00:09:48.250
Hi, there.

00:09:50.650 --> 00:09:52.510
I guess we'll come back to it.

00:09:52.510 --> 00:09:53.900
I just wanted to see
if people were on.

00:09:53.900 --> 00:09:54.645
AUDIENCE: Hi.

00:09:54.645 --> 00:09:55.590
IKAI LAN: Oh, hi.

00:09:55.590 --> 00:09:56.990
KALYAN REDDY: There we go.

00:09:56.990 --> 00:09:57.835
AUDIENCE: Hi there.

00:09:57.835 --> 00:09:59.146
IKAI LAN: How are you?

00:09:59.146 --> 00:10:00.394
AUDIENCE: Pretty good.

00:10:00.394 --> 00:10:03.460
I actually had a related
question to that question.

00:10:03.460 --> 00:10:04.900
IKAI LAN: Yeah, why
don't we take it?

00:10:04.900 --> 00:10:07.330
Because it seems
to make sense.

00:10:07.330 --> 00:10:09.890
AUDIENCE: I've been using the
new library functionality a

00:10:09.890 --> 00:10:15.060
lot, and we have scripts that
go into our corporate

00:10:15.060 --> 00:10:17.510
database, pull out data,
display that, make

00:10:17.510 --> 00:10:19.750
charts, and so forth.

00:10:19.750 --> 00:10:22.415
And we do a lot of setting what
we did before the script

00:10:22.415 --> 00:10:22.670
properties.

00:10:22.670 --> 00:10:24.520
We would set the name
of the database.

00:10:24.520 --> 00:10:27.240
We'd set the name of the
table, and so forth.

00:10:27.240 --> 00:10:31.930
The user would go into a UIApp
and select what data source

00:10:31.930 --> 00:10:32.930
they would want.

00:10:32.930 --> 00:10:35.340
But now, if I'm using a library,
and I moved all of my

00:10:35.340 --> 00:10:39.240
functionality, the JDBC
functionality, in the library,

00:10:39.240 --> 00:10:42.910
I don't know where it's now
stored, those values for each

00:10:42.910 --> 00:10:46.600
user in the calling
spreadsheet.

00:10:46.600 --> 00:10:48.990
I can't use script properties
anymore, because that will set

00:10:48.990 --> 00:10:51.880
it one time for the
whole library.

00:10:51.880 --> 00:10:52.480
Right?

00:10:52.480 --> 00:10:57.110
If I set the database name, for
example, I have functions

00:10:57.110 --> 00:11:00.125
which build queries, then put in
the database name into the

00:11:00.125 --> 00:11:02.990
queries, the JDBC call.

00:11:02.990 --> 00:11:06.910
So if I do it as a script
property, then every user

00:11:06.910 --> 00:11:13.030
would overwrite each other's
database name, right?

00:11:13.030 --> 00:11:15.900
IKAI LAN: So script properties,
there are a couple

00:11:15.900 --> 00:11:16.960
different things.

00:11:16.960 --> 00:11:19.250
There's a script property which
is global to the script

00:11:19.250 --> 00:11:22.750
itself, and there's also this
concept of the user property,

00:11:22.750 --> 00:11:25.900
which is, I think, what you
may be looking for.

00:11:25.900 --> 00:11:27.340
Now, the tricky thing is--

00:11:27.340 --> 00:11:29.150
yeah, the user property
will work fine.

00:11:29.150 --> 00:11:32.430
So if you set something using
user property, that's

00:11:32.430 --> 00:11:35.150
something that's only set for
me running the script.

00:11:35.150 --> 00:11:37.990
So I could set a user property
that says here's my JDBC

00:11:37.990 --> 00:11:39.970
information, go to town
on my database.

00:11:39.970 --> 00:11:42.270
And Kaylan could have a
different one that says

00:11:42.270 --> 00:11:44.720
userproperty.set or
userproperty.get.

00:11:44.720 --> 00:11:47.240
Now, it's still in the
same properties UI.

00:11:47.240 --> 00:11:49.590
You go to the UI, and you'll
see that, OK, I have the

00:11:49.590 --> 00:11:51.610
script properties that are
global to the entire script,

00:11:51.610 --> 00:11:53.870
as well as user properties
which are just

00:11:53.870 --> 00:11:55.450
local to just me.

00:11:55.450 --> 00:11:58.380
And that's what you probably
want to do in this instance.

00:11:58.380 --> 00:12:00.490
AUDIENCE: Had a problem
with that, too.

00:12:00.490 --> 00:12:03.030
That's what I was just trying
half an hour ago.

00:12:03.030 --> 00:12:04.915
IKAI LAN: What was the
problem you ran into?

00:12:04.915 --> 00:12:08.080
AUDIENCE: User properties are
global to that user across all

00:12:08.080 --> 00:12:10.443
of their scripts in our
domain, it looks like.

00:12:10.443 --> 00:12:16.660
But I have a set of 12
different, similar scripts, so

00:12:16.660 --> 00:12:22.280
when a person goes and uses
another spreadsheet, it

00:12:22.280 --> 00:12:23.150
overwrites it on there.

00:12:23.150 --> 00:12:25.350
So I kind of need the
combination this

00:12:25.350 --> 00:12:26.960
user for this script.

00:12:26.960 --> 00:12:27.740
IKAI LAN: I see.

00:12:27.740 --> 00:12:34.520
So this functionality is going
to get a bit more complex.

00:12:34.520 --> 00:12:38.740
If you want to do it per user,
per spreadsheet, or script

00:12:38.740 --> 00:12:39.000
[INAUDIBLE]

00:12:39.000 --> 00:12:42.420
whatever it is you're doing, and
this is where ScriptDb is

00:12:42.420 --> 00:12:43.340
going to be useful.

00:12:43.340 --> 00:12:46.890
So we're working on an article
about ScriptDb how to do this,

00:12:46.890 --> 00:12:49.240
how to do get by key
and set by key.

00:12:49.240 --> 00:12:52.230
But what you want to do is
you can at any time call

00:12:52.230 --> 00:12:53.480
session.geteffectiveuser.

00:12:55.130 --> 00:12:56.750
Not activeuser,
geteffectiveuser.

00:12:56.750 --> 00:12:58.970
The reason you want to use
effectiveuser is because

00:12:58.970 --> 00:13:01.560
geteffectiveuser will return
the user that the script is

00:13:01.560 --> 00:13:04.740
running as, and you could do
getemail and key off the

00:13:04.740 --> 00:13:05.490
user's email.

00:13:05.490 --> 00:13:08.700
And what you do is you build a
script to be instanced where

00:13:08.700 --> 00:13:12.860
you say here's the user, here
is the spreadsheet ID, and

00:13:12.860 --> 00:13:13.190
[INAUDIBLE].

00:13:13.190 --> 00:13:16.460
You store that inside ScriptDb,
and you pull that up

00:13:16.460 --> 00:13:17.990
whenever you need this
information.

00:13:17.990 --> 00:13:19.510
So you've got a lot of
different options for

00:13:19.510 --> 00:13:20.680
persistence.

00:13:20.680 --> 00:13:24.900
ScriptDb, think of it as it's
kind of like a document store

00:13:24.900 --> 00:13:27.240
for your entire script,
but because you can

00:13:27.240 --> 00:13:30.590
programmatically control what
data you want from it, you can

00:13:30.590 --> 00:13:34.860
say, well, this user is Eric,
and the spreadsheet ID is 123,

00:13:34.860 --> 00:13:39.180
so I want the database that
corresponds to Eric and script

00:13:39.180 --> 00:13:42.920
123, and that's where you
can pull back your JDBC

00:13:42.920 --> 00:13:43.395
information.

00:13:43.395 --> 00:13:44.470
AUDIENCE: Great.

00:13:44.470 --> 00:13:47.280
And then in my library, I
would just need to use a

00:13:47.280 --> 00:13:50.960
function that pulls out what
is the ID of the calling

00:13:50.960 --> 00:13:52.605
spreadsheet, right?

00:13:52.605 --> 00:13:53.425
IKAI LAN: Yes.

00:13:53.425 --> 00:13:56.456
AUDIENCE: How would I do that?

00:13:56.456 --> 00:13:58.810
IKAI LAN: I don't know this
off the top of my head.

00:13:58.810 --> 00:14:00.255
AUDIENCE: But it exists?

00:14:00.255 --> 00:14:01.110
IKAI LAN: What's that?

00:14:01.110 --> 00:14:02.490
AUDIENCE: But it exists?

00:14:02.490 --> 00:14:04.630
That function exists?

00:14:04.630 --> 00:14:06.730
IKAI LAN: I think so, but
I need to double check.

00:14:09.760 --> 00:14:10.960
It's not
getcontainingspreadsheet.

00:14:10.960 --> 00:14:12.860
It wouldn't be named what I
think it's named, because I

00:14:12.860 --> 00:14:14.950
name my stuff weird.

00:14:14.950 --> 00:14:17.320
I think there should be a
method that calls that,

00:14:17.320 --> 00:14:20.460
because your script is running
inside the spreadsheet.

00:14:20.460 --> 00:14:24.020
You can find the containing
spreadsheet, and you should be

00:14:24.020 --> 00:14:27.660
able to find the container,
as we call it,

00:14:27.660 --> 00:14:29.730
and dig out the ID.

00:14:29.730 --> 00:14:32.450
But I'll need to double
check on that for you.

00:14:32.450 --> 00:14:36.741
So, if you want, post on Stack
Overflow and I'll follow up on

00:14:36.741 --> 00:14:37.466
that question.

00:14:37.466 --> 00:14:39.120
AUDIENCE: Great, thanks a lot.

00:14:39.120 --> 00:14:39.500
Excellent.

00:14:39.500 --> 00:14:41.150
IKAI LAN: Is there anyone
that's live?

00:14:41.150 --> 00:14:44.650
And if you're not live, feel
free to jump onto our Hangout,

00:14:44.650 --> 00:14:48.950
developers.google.com, and
click on the Events tab.

00:14:48.950 --> 00:14:50.910
You'll see Apps Script Office
Hours, and there should be a

00:14:50.910 --> 00:14:52.745
button to jump on the Hangout,
or watch the broadcast.

00:14:55.410 --> 00:14:58.670
Let's move on to some of the
questions in the Moderator.

00:14:58.670 --> 00:15:00.320
KALYAN REDDY: All right,
here we go.

00:15:00.320 --> 00:15:00.880
Let's refresh and see.

00:15:00.880 --> 00:15:03.452
IKAI LAN: I just heard a sound
like someone jumped on

00:15:03.452 --> 00:15:05.230
[INAUDIBLE].

00:15:05.230 --> 00:15:07.565
He's playing, like, the
William Tell Overture.

00:15:10.520 --> 00:15:11.765
I like classical music.

00:15:11.765 --> 00:15:13.636
KALYAN REDDY: Prequel
to our [INAUDIBLE]

00:15:13.636 --> 00:15:15.034
Los Angeles.

00:15:15.034 --> 00:15:16.505
IKAI LAN: What do we got?

00:15:16.505 --> 00:15:17.150
KALYAN REDDY: All right.

00:15:17.150 --> 00:15:20.780
So, the next question we have
is, to reduce round trips,

00:15:20.780 --> 00:15:23.700
original values can be read
from the sheet to array.

00:15:23.700 --> 00:15:26.790
When he played it in script,
written from array to sheet.

00:15:26.790 --> 00:15:29.130
What about cell format settings
on certain cells

00:15:29.130 --> 00:15:31.300
identified in my script?

00:15:31.300 --> 00:15:33.180
Can I bundle those
into a single

00:15:33.180 --> 00:15:34.555
round trip is the question?

00:15:34.555 --> 00:15:37.030
IKAI LAN: Cell format settings
on certain cells.

00:15:37.030 --> 00:15:39.620
So, I guess what you're asking
is is there a way you can

00:15:39.620 --> 00:15:44.360
batch formats on
certain cells?

00:15:44.360 --> 00:15:45.280
I don't think so.

00:15:45.280 --> 00:15:49.510
I mean, I haven't seen
an API for this.

00:15:49.510 --> 00:15:53.190
I mean, I have to look what the
API are calling now, but

00:15:53.190 --> 00:15:57.360
if there's no API for doing a
batch setting or batch format

00:15:57.360 --> 00:15:59.265
fetch, then there isn't
necessarily an

00:15:59.265 --> 00:16:00.610
easy way to do this.

00:16:00.610 --> 00:16:04.490
So I guess the question is why
are you trying to reduce the

00:16:04.490 --> 00:16:04.990
round trips?

00:16:04.990 --> 00:16:07.650
I understand that round trips
do add some overhead, and

00:16:07.650 --> 00:16:09.990
sometimes you can't get around
it because of the API

00:16:09.990 --> 00:16:13.310
limitations, so what you end up
needing to do is figure out

00:16:13.310 --> 00:16:15.925
how to make your script run
faster, because it's important

00:16:15.925 --> 00:16:17.950
that your script appears
to run fast.

00:16:17.950 --> 00:16:23.110
So if you want to reduce the
number round trips, obviously

00:16:23.110 --> 00:16:24.950
you want to reduce that as much
as possible, but when you

00:16:24.950 --> 00:16:28.530
find that you can't, a common
pattern that some people do is

00:16:28.530 --> 00:16:29.750
they'll start trigger.

00:16:29.750 --> 00:16:31.970
Because a trigger will be
running in the background, and

00:16:31.970 --> 00:16:33.100
that'll just make something
happen.

00:16:33.100 --> 00:16:35.600
And with triggers, what you can
do is you can effectively

00:16:35.600 --> 00:16:39.080
get around various deadlines
by what we call chaining

00:16:39.080 --> 00:16:39.770
triggers, right?

00:16:39.770 --> 00:16:43.065
So you create a trigger, it runs
some code, and after it

00:16:43.065 --> 00:16:45.250
does some certain amount of
executions, it creates a new

00:16:45.250 --> 00:16:47.740
trigger 10 minutes later that
follows up and just keeps

00:16:47.740 --> 00:16:48.520
running this code.

00:16:48.520 --> 00:16:50.440
So this is effectively how
you would do a very

00:16:50.440 --> 00:16:51.840
long running job.

00:16:51.840 --> 00:16:54.250
Now, we're looking at ways of
making it so that we can

00:16:54.250 --> 00:16:56.950
remove deadlines for things in
general, because that'd be

00:16:56.950 --> 00:16:57.440
really cool.

00:16:57.440 --> 00:17:00.025
I mean, managing triggers, and
rescheduling, and dealing with

00:17:00.025 --> 00:17:02.690
the fault tolerance, it's
really annoying.

00:17:02.690 --> 00:17:04.849
But that's one way to
get around this.

00:17:04.849 --> 00:17:07.849
So I guess that what we want to
do is we figure out what it

00:17:07.849 --> 00:17:11.530
is you're trying to do here, and
yeah, see if we can help

00:17:11.530 --> 00:17:13.575
you make your app run
buttery smooth.

00:17:13.575 --> 00:17:15.670
I stole that from the
Android guys.

00:17:15.670 --> 00:17:16.920
Buttery smooth.

00:17:20.222 --> 00:17:21.060
KALYAN REDDY: All right.

00:17:21.060 --> 00:17:21.790
So do you want to--

00:17:21.790 --> 00:17:22.119
IKAI LAN: Sure.

00:17:22.119 --> 00:17:26.075
Let's see, we've got a question
from Denmark.

00:17:26.075 --> 00:17:26.970
KALYAN REDDY: OK.

00:17:26.970 --> 00:17:30.620
So, I'm using a tool to export
spreadsheet data to OpenOffice

00:17:30.620 --> 00:17:33.710
spreadsheet files, which
used at a later

00:17:33.710 --> 00:17:36.100
time in XML/XMLT toolchain.

00:17:36.100 --> 00:17:38.260
Unfortunately, it seems that the
export function of dates

00:17:38.260 --> 00:17:40.765
does not work properly since the
dates are saved as floats.

00:17:40.765 --> 00:17:43.120
IKAI LAN: Dates are
saved as floats.

00:17:43.120 --> 00:17:47.300
Well, I mean, they should be
saved as milliseconds since a

00:17:47.300 --> 00:17:50.780
Unix epoch, which is universally
understood.

00:17:50.780 --> 00:17:51.960
KALYAN REDDY: [INAUDIBLE]
standard.

00:17:51.960 --> 00:17:52.400
IKAI LAN: Yeah.

00:17:52.400 --> 00:17:54.880
And let's see, the
export function--

00:17:54.880 --> 00:17:56.480
using a tool--

00:17:56.480 --> 00:17:59.170
is this an Apps Script
tool or--

00:17:59.170 --> 00:18:04.890
I don't know what exactly this
is, but if you export as

00:18:04.890 --> 00:18:07.430
milliseconds since epoch,
every single programming

00:18:07.430 --> 00:18:09.310
language in the world
understands this and has a way

00:18:09.310 --> 00:18:11.760
to convert this back
into a data object.

00:18:11.760 --> 00:18:14.090
So for instance, in JavaScript,
you would say new

00:18:14.090 --> 00:18:18.180
date, and you would pass it the
seconds since epoch, this

00:18:18.180 --> 00:18:19.470
number, and it would work.

00:18:19.470 --> 00:18:20.550
And you could try this out.

00:18:20.550 --> 00:18:21.840
You can say new date zero,
and you'll find it's

00:18:21.840 --> 00:18:23.240
like January 1, 1970.

00:18:23.240 --> 00:18:24.720
It's like 1979 to '69.

00:18:24.720 --> 00:18:25.900
I never remember--

00:18:25.900 --> 00:18:27.195
KALYAN REDDY: 1970, I believe.

00:18:27.195 --> 00:18:28.740
IKAI LAN: Yeah.

00:18:28.740 --> 00:18:33.040
Epoch is one of these really
funny things that if you're

00:18:33.040 --> 00:18:36.430
not a programmer, it causes all
these problems for you.

00:18:36.430 --> 00:18:39.520
Like, I was using I think it
was MongoDb, and I didn't

00:18:39.520 --> 00:18:42.210
realize that you can save date
before 1970, and I was using

00:18:42.210 --> 00:18:43.970
this for like a birth
dates database.

00:18:43.970 --> 00:18:46.020
So I was wondering, why is this
guy who's like 40 years

00:18:46.020 --> 00:18:48.700
old, why does it only crash for
people who are over 40?

00:18:48.700 --> 00:18:52.470
And it turns out that it's
milliseconds since epoch.

00:18:52.470 --> 00:18:55.870
So that is what that
float number is.

00:18:55.870 --> 00:18:59.360
It probably is working
correctly, because otherwise,

00:18:59.360 --> 00:19:00.610
how would you export a date?

00:19:00.610 --> 00:19:01.865
There are a million--

00:19:01.865 --> 00:19:03.780
oh, your bad.

00:19:03.780 --> 00:19:05.340
KALYAN REDDY: Let me post
on a little bit.

00:19:05.340 --> 00:19:08.160
IKAI LAN: Because dates can
be represented in lots of

00:19:08.160 --> 00:19:08.690
different formats.

00:19:08.690 --> 00:19:11.400
In the US, for instance, we
say month, day, year, but

00:19:11.400 --> 00:19:16.220
pretty much internationally,
people say--

00:19:16.220 --> 00:19:17.910
KALYAN REDDY: It's
other formats.

00:19:17.910 --> 00:19:20.510
There's a lot of confusion
that can exist.

00:19:20.510 --> 00:19:23.310
So in order to get around that,
we can simply have a

00:19:23.310 --> 00:19:26.930
float number that counts
one long number.

00:19:26.930 --> 00:19:29.532
You can format it however
you want.

00:19:29.532 --> 00:19:31.086
Universal language math.

00:19:31.086 --> 00:19:34.070
IKAI LAN: And there's a lot of
background on dates and times,

00:19:34.070 --> 00:19:36.640
so I'm sorry if I bored
a bunch of people.

00:19:36.640 --> 00:19:41.630
It's very important, though,
because time zones are the

00:19:41.630 --> 00:19:44.320
source of so many bugs
in the world.

00:19:44.320 --> 00:19:45.535
KALYAN REDDY: They're
important.

00:19:45.535 --> 00:19:47.020
IKAI LAN: [INAUDIBLE]
understand it.

00:19:47.020 --> 00:19:48.480
All right, let's see
if there's someone

00:19:48.480 --> 00:19:49.290
that's jumped on live.

00:19:49.290 --> 00:19:50.940
I heard someone jump on.

00:19:50.940 --> 00:19:52.980
It sounded like rock
music, or--

00:19:52.980 --> 00:19:56.260
nope, just a bunch
of black screens.

00:19:56.260 --> 00:20:00.120
OK, well, let's go back to the
Q&amp;A then, unless someone on

00:20:00.120 --> 00:20:02.930
the black screen
has a question.

00:20:02.930 --> 00:20:06.080
So just so you know, we are
not looking at the chats.

00:20:06.080 --> 00:20:07.350
We're not looking
at chat screens.

00:20:07.350 --> 00:20:09.660
So if you're typing something
to chat, we're probably

00:20:09.660 --> 00:20:11.320
missing it.

00:20:11.320 --> 00:20:13.210
Sorry about that.

00:20:13.210 --> 00:20:15.520
KALYAN REDDY: OK, So you want
to head to this question?

00:20:15.520 --> 00:20:16.595
IKAI LAN: Yeah, sure.

00:20:16.595 --> 00:20:18.590
KALYAN REDDY: John from
Washington, DC, asks, can

00:20:18.590 --> 00:20:21.260
conditional formatting be
applied from script?

00:20:21.260 --> 00:20:24.790
I don't see a method under
the Range class.

00:20:24.790 --> 00:20:27.780
IKAI LAN: Is this conditional
formatting for--

00:20:27.780 --> 00:20:30.615
OK, this is conditional
formatting for spreadsheets.

00:20:33.290 --> 00:20:35.400
Right?

00:20:35.400 --> 00:20:37.050
Is conditional formatting--

00:20:37.050 --> 00:20:38.980
OK, I know what you're asking.

00:20:38.980 --> 00:20:43.560
So, I think what you're asking
is conditional formatting is I

00:20:43.560 --> 00:20:46.050
have this spreadsheet my
friends, where if you owe

00:20:46.050 --> 00:20:47.960
someone money, you put it in the
spreadsheet, and if you're

00:20:47.960 --> 00:20:49.890
owed money, you put
a positive number.

00:20:49.890 --> 00:20:52.460
So it's very simple that we have
a conditional formatting

00:20:52.460 --> 00:20:54.605
there, where I say if it's
negative, you're red.

00:20:54.605 --> 00:20:55.290
KALYAN REDDY: Exactly.

00:20:55.290 --> 00:20:57.510
So you can change the formatting
of the cell based

00:20:57.510 --> 00:20:58.230
on the values.

00:20:58.230 --> 00:21:00.840
IKAI LAN: Right.

00:21:00.840 --> 00:21:05.300
Yeah, you should be able to
set a background color.

00:21:05.300 --> 00:21:05.940
There's some other things
you can do.

00:21:05.940 --> 00:21:07.180
KALYAN REDDY: You can get the
cell, and you can change the

00:21:07.180 --> 00:21:08.080
properties of it.

00:21:08.080 --> 00:21:09.165
So I believe you can do that.

00:21:09.165 --> 00:21:11.940
IKAI LAN: And in fact, running
it from Apps Script, it should

00:21:11.940 --> 00:21:14.410
be much more powerful than what
conditional formatting

00:21:14.410 --> 00:21:16.610
allows you, because you could
write it in code, and you

00:21:16.610 --> 00:21:19.370
could say do this, or
do this, or do this.

00:21:19.370 --> 00:21:21.320
But is there something
specifically

00:21:21.320 --> 00:21:22.180
you're trying to do?

00:21:22.180 --> 00:21:25.290
And just a thing for our
viewers, these types of code

00:21:25.290 --> 00:21:28.650
questions, they tend to be a
little bit better in Stack

00:21:28.650 --> 00:21:31.170
Overflow for a bunch
of reasons.

00:21:31.170 --> 00:21:33.070
When I'm answering these
questions, the first thing I

00:21:33.070 --> 00:21:36.150
want to do is go to our API
reference, because, man, we've

00:21:36.150 --> 00:21:37.730
got so many APIs now.

00:21:37.730 --> 00:21:39.690
KALYAN REDDY: We've got a
pretty extensive API.

00:21:39.690 --> 00:21:43.890
IKAI LAN: So, we try to answer
questions about how to design

00:21:43.890 --> 00:21:47.350
things, and how to do things
in Apps Script, but when it

00:21:47.350 --> 00:21:50.670
comes to individual API
questions, I am not Eric.

00:21:50.670 --> 00:21:52.510
I do not have the API reference
in my head.

00:21:52.510 --> 00:21:52.980
Eric's laughing.

00:21:52.980 --> 00:21:55.170
He actually does have the API
reference in his head.

00:21:55.170 --> 00:21:57.230
I've turned and I've asked him
questions, and he goes, oh

00:21:57.230 --> 00:21:59.540
yeah, it's set number format,
and you've got three

00:21:59.540 --> 00:21:59.970
parameters.

00:21:59.970 --> 00:22:02.580
I go, I don't know
how you do that.

00:22:02.580 --> 00:22:06.150
I'm just going to go back to
being a normal human person

00:22:06.150 --> 00:22:09.790
that doesn't have a superhuman
capability.

00:22:09.790 --> 00:22:11.230
KALYAN REDDY: So I think
specifically for this

00:22:11.230 --> 00:22:15.130
question, it's asking is there
one particular API function

00:22:15.130 --> 00:22:17.630
that'll accomplish
this for them?

00:22:17.630 --> 00:22:20.070
We'll have to go back and see if
that's the case or not, but

00:22:20.070 --> 00:22:23.630
if not, there's a two-step way
that's just as easy and maybe

00:22:23.630 --> 00:22:26.570
more powerful than any of the
already existing condition

00:22:26.570 --> 00:22:28.840
formatting tools that
you can do.

00:22:28.840 --> 00:22:31.580
And yes, if you can ask in the
Stack Overflow, we can provide

00:22:31.580 --> 00:22:33.400
some code examples, something
like that, too.

00:22:33.400 --> 00:22:34.340
IKAI LAN: OK.

00:22:34.340 --> 00:22:36.670
So, yeah, definitely ask in
Stack Overflow what it is

00:22:36.670 --> 00:22:38.330
you're trying to do, and
we can see if we

00:22:38.330 --> 00:22:40.355
can help you out.

00:22:40.355 --> 00:22:41.380
KALYAN REDDY: Let's
see if there's any

00:22:41.380 --> 00:22:42.630
more questions here.

00:22:44.746 --> 00:22:47.170
IKAI LAN: I don't think you
need to refresh this page,

00:22:47.170 --> 00:22:51.010
because I'm pretty sure it's
updating whenever there's like

00:22:51.010 --> 00:22:52.390
a live update.

00:22:52.390 --> 00:22:53.480
It's kind of a cool tool.

00:22:53.480 --> 00:22:58.090
I wish that we saw more
use of this outside.

00:22:58.090 --> 00:22:59.290
Google Moderator, use it.

00:22:59.290 --> 00:23:01.230
It's cool stuff.

00:23:01.230 --> 00:23:04.100
So let's go back to the
Hangout and see

00:23:04.100 --> 00:23:05.135
what's going on.

00:23:05.135 --> 00:23:07.270
Anyone in the Hangout have
anything they want to ask us

00:23:07.270 --> 00:23:09.486
about or talk about?

00:23:09.486 --> 00:23:11.225
AUDIENCE: Just the same
guy that asked before,

00:23:11.225 --> 00:23:12.970
if that's all right.

00:23:12.970 --> 00:23:14.290
IKAI LAN: If you don't
mind us asking--

00:23:14.290 --> 00:23:18.360
I mean, some people, they like
anonymity, but you're not

00:23:18.360 --> 00:23:19.760
wearing like a ski
mask or anything.

00:23:19.760 --> 00:23:22.650
So where are you from,
what's your name?

00:23:22.650 --> 00:23:24.580
Hey, I see a little fella.

00:23:24.580 --> 00:23:26.265
AUDIENCE: My son's here, too.

00:23:26.265 --> 00:23:32.880
Actually I'm in Croatia,
and we build

00:23:32.880 --> 00:23:33.900
lots of internal apps.

00:23:33.900 --> 00:23:36.990
We build lots of stuff on the
Google entire infrastructure,

00:23:36.990 --> 00:23:39.870
but build a lot about business
intelligence and business

00:23:39.870 --> 00:23:43.650
management apps right inside
Google Apps, using Google Apps

00:23:43.650 --> 00:23:44.780
Script and lots of stuff.

00:23:44.780 --> 00:23:47.190
Now we're moving on to Google
App Engine for more advanced

00:23:47.190 --> 00:23:49.160
stuff, really interested.

00:23:49.160 --> 00:23:51.710
But there's a few things driving
me crazy, so I just

00:23:51.710 --> 00:23:54.765
wanted to ask one
more question.

00:23:54.765 --> 00:23:56.580
And I think this is maybe
something that may be an

00:23:56.580 --> 00:24:01.340
upgrade, may be an actual bug,
but the cell limits for

00:24:01.340 --> 00:24:04.000
spreadsheets?

00:24:04.000 --> 00:24:07.690
I had scripts that were working
for a year, JDBC

00:24:07.690 --> 00:24:11.515
again, and I started getting
back too much data, can not

00:24:11.515 --> 00:24:13.270
retrieve, too much data.

00:24:13.270 --> 00:24:17.670
And I do the math, and it turns
out it's 62,000 cells in

00:24:17.670 --> 00:24:22.160
the sheet, and it's
only 33 columns.

00:24:22.160 --> 00:24:27.140
So is there some other level of
limitation for JDBC calls?

00:24:27.140 --> 00:24:29.060
IKAI LAN: JDBC calls--
so, wait.

00:24:29.060 --> 00:24:33.575
So you're saying it's getting
back too much data from JDBC?

00:24:33.575 --> 00:24:36.370
AUDIENCE: Well, the error
is not descriptive.

00:24:36.370 --> 00:24:37.990
When I take the record set--

00:24:37.990 --> 00:24:39.760
I take the JDBC record
set, and I

00:24:39.760 --> 00:24:43.790
apply it into the range--

00:24:43.790 --> 00:24:46.260
that's where the error kicks
off, is when I try to take

00:24:46.260 --> 00:24:48.660
that record set from
JDBC and actually

00:24:48.660 --> 00:24:50.140
apply it into the range.

00:24:50.140 --> 00:24:51.390
IKAI LAN: Interesting.

00:24:54.225 --> 00:24:57.850
AUDIENCE: What's really strange,
for example, it was a

00:24:57.850 --> 00:24:59.800
production script, so
I had to change it.

00:24:59.800 --> 00:25:04.530
I broke it down into four
smaller queries by status, for

00:25:04.530 --> 00:25:08.130
example, and the four smaller
ones would work.

00:25:08.130 --> 00:25:11.610
So overall, the number of cells
that were being used

00:25:11.610 --> 00:25:13.290
were the same.

00:25:13.290 --> 00:25:15.220
But have you guys
run across that?

00:25:15.220 --> 00:25:17.540
I don't know what it can be.

00:25:17.540 --> 00:25:20.150
IKAI LAN: I haven't run across
specifically 62,000.

00:25:20.150 --> 00:25:22.220
I'm not terribly surprised.

00:25:22.220 --> 00:25:24.750
My guess is that something's
happening where we're holding

00:25:24.750 --> 00:25:26.880
the data in memory somewhere.

00:25:26.880 --> 00:25:30.660
In general, there are
upper bounds.

00:25:30.660 --> 00:25:33.210
I want to believe that Google
has a supercomputer that has

00:25:33.210 --> 00:25:34.990
unlimited RAM, but
I don't know if

00:25:34.990 --> 00:25:38.100
that's necessarily true.

00:25:38.100 --> 00:25:41.230
If you can break it up, and do
your jobs as broken up, it

00:25:41.230 --> 00:25:45.200
does add more programmer
overhead, but if it works, I

00:25:45.200 --> 00:25:47.682
wouldn't be surprised if it
works better overall.

00:25:47.682 --> 00:25:48.446
AUDIENCE: OK.

00:25:48.446 --> 00:25:51.694
So some things are just not
number of cells, but the

00:25:51.694 --> 00:25:53.220
amount of memory needed
to hold that object.

00:25:53.220 --> 00:25:54.130
IKAI LAN: It could be.

00:25:54.130 --> 00:25:54.980
It's hard to say.

00:25:54.980 --> 00:25:57.750
KALYAN REDDY: How it ties in
the back, I'm not exactly

00:25:57.750 --> 00:25:59.305
familiar with those details.

00:25:59.305 --> 00:26:03.096
IKAI LAN: Hold on, my leg's
falling asleep.

00:26:03.096 --> 00:26:03.590
Yeah.

00:26:03.590 --> 00:26:06.140
I got a standing desk recently
at work, and I love it.

00:26:06.140 --> 00:26:07.420
Side tangent.

00:26:07.420 --> 00:26:13.160
But yeah, 62,000 is not
a magic number.

00:26:13.160 --> 00:26:15.510
Like if you told me, yeah, for
some reason, every time I go

00:26:15.510 --> 00:26:21.730
over 65,335, 65,336, whatever,
and I'd be like, I think I

00:26:21.730 --> 00:26:25.070
know what's going on, but it
doesn't sound like that's the

00:26:25.070 --> 00:26:26.510
number you're tripping.

00:26:26.510 --> 00:26:28.610
It's probably some kind of
limitation you're hitting.

00:26:28.610 --> 00:26:32.660
I do know that spreadsheets,
when they go above a certain

00:26:32.660 --> 00:26:34.950
amount of data inside
spreadsheets, things start to

00:26:34.950 --> 00:26:37.640
slow down, but the number's
not 60,000.

00:26:37.640 --> 00:26:38.540
It's much higher than that.

00:26:38.540 --> 00:26:41.650
I don't know the exact number.

00:26:41.650 --> 00:26:42.400
AUDIENCE: OK.

00:26:42.400 --> 00:26:45.090
One other little question I had
that I think will interest

00:26:45.090 --> 00:26:49.165
a lot of people is about the new
library's functionality,

00:26:49.165 --> 00:26:55.620
and it seems to me that users
have to have read and write

00:26:55.620 --> 00:27:00.050
access to those libraries in
order to be able to use them.

00:27:00.050 --> 00:27:02.570
IKAI LAN: I don't think
that's true, actually.

00:27:02.570 --> 00:27:06.010
So, yeah, I don't think
that's true because--

00:27:06.010 --> 00:27:06.970
KALYAN REDDY: [INAUDIBLE].

00:27:06.970 --> 00:27:09.370
IKAI LAN: Yeah, because when
you publish a library, what

00:27:09.370 --> 00:27:09.810
you can do is--

00:27:09.810 --> 00:27:11.080
Eric's giving me a time
check, we've got

00:27:11.080 --> 00:27:12.960
about two minutes left--

00:27:12.960 --> 00:27:17.700
is when you publish a library,
and if the library is just

00:27:17.700 --> 00:27:20.650
code, then I just need the key
of the library, put in my

00:27:20.650 --> 00:27:22.240
project as include libraries,
and the

00:27:22.240 --> 00:27:23.080
library should just work.

00:27:23.080 --> 00:27:25.870
Now, I'm wondering if you need
additional permissions to do

00:27:25.870 --> 00:27:28.390
things, like maybe your library
does a thing with a

00:27:28.390 --> 00:27:29.900
specific spreadsheet?

00:27:29.900 --> 00:27:33.170
But even then, if the library's
executing as you, I

00:27:33.170 --> 00:27:36.195
don't think that that should
cause a problem.

00:27:36.195 --> 00:27:39.190
AUDIENCE: Maybe it's touching
script properties or something

00:27:39.190 --> 00:27:42.460
like that, and it needs write
privileges to touch script

00:27:42.460 --> 00:27:43.715
properties.

00:27:43.715 --> 00:27:44.980
IKAI LAN: OK.

00:27:44.980 --> 00:27:45.850
That may be.

00:27:45.850 --> 00:27:49.970
I'll need to investigate a
little bit more about this.

00:27:49.970 --> 00:27:51.130
In general, you should not.

00:27:51.130 --> 00:27:53.190
There's a library that I was
using for a while, which was

00:27:53.190 --> 00:27:56.040
the Picasa app library, and I
didn't need read or write

00:27:56.040 --> 00:27:56.560
access to that.

00:27:56.560 --> 00:27:58.670
It was just open
to the public.

00:27:58.670 --> 00:28:01.680
So, it might be because of your
editing script properties

00:28:01.680 --> 00:28:02.370
or things like that.

00:28:02.370 --> 00:28:04.970
But even, I know, the ScriptDB,
you should be able

00:28:04.970 --> 00:28:08.410
to access your own ScriptDb if
you're in a library and not

00:28:08.410 --> 00:28:09.990
need read or write access.

00:28:09.990 --> 00:28:12.670
Like, you don't need read or
write access to my library, is

00:28:12.670 --> 00:28:14.843
what I'm saying.

00:28:14.843 --> 00:28:16.110
AUDIENCE: Cool.

00:28:16.110 --> 00:28:16.900
Thanks guys.

00:28:16.900 --> 00:28:17.580
IKAI LAN: No problem.

00:28:17.580 --> 00:28:19.590
In fact, we'd love to talk to
you more about what you're

00:28:19.590 --> 00:28:23.210
doing and cool stuff that's
going on in App Engine and App

00:28:23.210 --> 00:28:25.250
Script, and all the cool things
you're doing, but we're

00:28:25.250 --> 00:28:28.710
running out of time,
unfortunately.

00:28:28.710 --> 00:28:31.290
So, was there anything else that
you wanted to say to our

00:28:31.290 --> 00:28:32.870
wonderful audience today?

00:28:32.870 --> 00:28:34.690
IKAI LAN: I'm really excited
to start working on the

00:28:34.690 --> 00:28:36.220
product and supporting
you guys.

00:28:36.220 --> 00:28:36.840
IKAI LAN: To start?

00:28:36.840 --> 00:28:38.305
You've been working.

00:28:38.305 --> 00:28:40.010
KALYAN REDDY: Yes, yes.

00:28:40.010 --> 00:28:41.060
Really get started.

00:28:41.060 --> 00:28:42.630
Get some exciting
things coming.

00:28:42.630 --> 00:28:44.100
IKAI LAN: OK.

00:28:44.100 --> 00:28:44.520
All right.

00:28:44.520 --> 00:28:46.920
So, thank you guys for
hanging out with us.

00:28:46.920 --> 00:28:48.040
We really do appreciate it.

00:28:48.040 --> 00:28:50.130
Tell your friends, right?

00:28:50.130 --> 00:28:50.750
KALYAN REDDY: Definitely.

00:28:50.750 --> 00:28:53.016
And the Hackathon.

00:28:53.016 --> 00:28:54.180
IKAI LAN: Los Angeles
Hackathon.

00:28:54.180 --> 00:28:55.200
But tell your friends
about this show.

00:28:55.200 --> 00:28:56.340
Tell your friends about
Apps Script.

00:28:56.340 --> 00:28:59.570
I mean, this is some seriously
cool stuff, and you can build

00:28:59.570 --> 00:29:02.120
some really cool things
really fast.

00:29:02.120 --> 00:29:03.990
scripts.google.com, nothing
to install, you

00:29:03.990 --> 00:29:05.480
just get things going.

00:29:05.480 --> 00:29:06.600
I call it cloud scripting.

00:29:06.600 --> 00:29:07.620
KALYAN REDDY: No need to worry
about maintenance,

00:29:07.620 --> 00:29:08.510
anything like that.

00:29:08.510 --> 00:29:10.770
IKAI LAN: Cloud scripting.

00:29:10.770 --> 00:29:13.520
So guys, thank you guys for
joining our show, and we'll

00:29:13.520 --> 00:29:14.330
see you guys next time.

00:29:14.330 --> 00:29:16.750
So, this is good bye from
me, Eric, and Kalyan.

