WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.302
[MUSIC PLAYING]

00:00:07.170 --> 00:00:09.440
FLORINA MUNTENESCU: Hello,
and welcome to I/O life.

00:00:09.440 --> 00:00:11.130
I'm Florina Muntenescu,
and I'm here

00:00:11.130 --> 00:00:13.680
with Chet Haase, the
Android Toolkit [INAUDIBLE]..

00:00:13.680 --> 00:00:14.640
Hi, Chet.

00:00:14.640 --> 00:00:16.192
CHET HAASE: Hello, Florina.

00:00:16.192 --> 00:00:18.650
FLORINA MUNTENESCU: Tell me,
Chet, what's new in Android B?

00:00:18.650 --> 00:00:20.025
CHET HAASE: Are
there new things?

00:00:20.025 --> 00:00:20.832
Let me think.

00:00:20.832 --> 00:00:21.510
Uh, yes.

00:00:21.510 --> 00:00:22.800
In fact, there are.

00:00:22.800 --> 00:00:25.111
So there's a few new things.

00:00:25.111 --> 00:00:27.610
One of the important ones that
we heard about in the keynote

00:00:27.610 --> 00:00:30.950
too was about
dynamic app bundles.

00:00:30.950 --> 00:00:32.700
But I think there's
another video on that.

00:00:32.700 --> 00:00:35.520
So I'm going to leave people to
do their own research on that.

00:00:35.520 --> 00:00:39.580
Something else that was
big was Slices and Actions.

00:00:39.580 --> 00:00:43.960
So both of these are ways
of propagating intents

00:00:43.960 --> 00:00:48.150
that your application
can take care of deeply

00:00:48.150 --> 00:00:49.400
in other applications.

00:00:49.400 --> 00:00:51.420
So you can propagate
this information in a way

00:00:51.420 --> 00:00:52.920
that maybe the
Assistant or Search

00:00:52.920 --> 00:00:57.630
can take advantage of that and
perform that action via, like,

00:00:57.630 --> 00:00:58.350
a button.

00:00:58.350 --> 00:00:58.590
Right?

00:00:58.590 --> 00:00:59.340
So it can say, oh.

00:00:59.340 --> 00:01:00.730
I can handle this.

00:01:00.730 --> 00:01:02.760
You put it in an
actions.xml file.

00:01:02.760 --> 00:01:06.120
And then Search or
some application--

00:01:06.120 --> 00:01:09.780
Assistant or whatever-- can
propagate a button into the UI

00:01:09.780 --> 00:01:12.030
so the user can click on
that to perform that debatch.

00:01:12.030 --> 00:01:13.567
And slices is kind of like that.

00:01:13.567 --> 00:01:15.150
It allows you to
perform these actions

00:01:15.150 --> 00:01:17.100
but with a much richer UI.

00:01:17.100 --> 00:01:18.930
Basically it's a way
for an application

00:01:18.930 --> 00:01:22.560
to propagate rich UI to
perform all kinds of things

00:01:22.560 --> 00:01:23.352
in another process.

00:01:23.352 --> 00:01:25.101
FLORINA MUNTENESCU:
How about the battery?

00:01:25.101 --> 00:01:27.090
Is there anything else,
finally, for battery?

00:01:27.090 --> 00:01:28.548
CHET HAASE: How
about that battery?

00:01:28.548 --> 00:01:31.920
Well, we are all power
users, unfortunately,

00:01:31.920 --> 00:01:34.650
which means we need to
keep working on things

00:01:34.650 --> 00:01:36.390
that we can do at
a platform level

00:01:36.390 --> 00:01:39.340
to preserve battery for users
to get longer battery life.

00:01:39.340 --> 00:01:41.340
A couple of the things
that are interesting that

00:01:41.340 --> 00:01:48.120
are going on in this release
includes App Standby Buckets.

00:01:48.120 --> 00:01:50.910
So we determine the
level of activity

00:01:50.910 --> 00:01:53.220
that a user has
with an application.

00:01:53.220 --> 00:01:55.110
And based on that
activity level,

00:01:55.110 --> 00:01:57.750
we expose capabilities
of the platform

00:01:57.750 --> 00:01:59.650
to that application or not.

00:01:59.650 --> 00:02:01.890
It may not be appropriate
for an application

00:02:01.890 --> 00:02:04.410
that the user hasn't
actually run for a while

00:02:04.410 --> 00:02:06.591
to be taking up CPU
and battery doing

00:02:06.591 --> 00:02:09.090
this thing in the background
that, probably, the user didn't

00:02:09.090 --> 00:02:10.397
want them to be doing.

00:02:10.397 --> 00:02:11.230
So that's one thing.

00:02:11.230 --> 00:02:13.890
Another is Background
Restrictions.

00:02:13.890 --> 00:02:17.820
So if we notice that
applications have bad behavior

00:02:17.820 --> 00:02:20.100
characteristics, things
like holding wakelocks

00:02:20.100 --> 00:02:23.760
for a very long period,
which means the system can't

00:02:23.760 --> 00:02:27.810
go to sleep, or waking up
frequently or using services

00:02:27.810 --> 00:02:30.480
when they're not on
power that they shouldn't

00:02:30.480 --> 00:02:32.136
be as frequently
as they are, then

00:02:32.136 --> 00:02:33.510
they'll be propagated
into a list

00:02:33.510 --> 00:02:35.460
that the user can
see through Settings

00:02:35.460 --> 00:02:37.680
and then disable background
capabilities for that app

00:02:37.680 --> 00:02:40.200
to make sure that the user has
control with how much battery

00:02:40.200 --> 00:02:40.959
is being used.

00:02:40.959 --> 00:02:42.000
FLORINA MUNTENESCU: Cool.

00:02:42.000 --> 00:02:44.160
So we have our Slices, Battery.

00:02:44.160 --> 00:02:45.570
Anything else exciting in P?

00:02:46.505 --> 00:02:48.880
CHET HAASE: Well, there's
exciting and there's necessary.

00:02:48.880 --> 00:02:51.210
One of the necessary
things that's there is that

00:02:51.210 --> 00:02:56.070
we're preventing applications
from calling private API's.

00:02:56.070 --> 00:02:58.199
It is possible now
to call API's, which

00:02:58.199 --> 00:02:59.490
are not in the public platform.

00:02:59.490 --> 00:03:02.790
But through reflection or JNI
you can get to these methods

00:03:02.790 --> 00:03:03.750
anyway.

00:03:03.750 --> 00:03:06.720
And we allow that
because we didn't

00:03:06.720 --> 00:03:08.042
have a way to really stop that.

00:03:08.042 --> 00:03:09.750
You can sort of query
this and go for it.

00:03:09.750 --> 00:03:11.820
Well, now, in the
arc runtime, we

00:03:11.820 --> 00:03:14.070
can detect that you are
calling these methods

00:03:14.070 --> 00:03:16.120
from an application
when they shouldn't be.

00:03:16.120 --> 00:03:17.380
And we can prevent that.

00:03:17.380 --> 00:03:19.680
So in the preview release,
which we encourage everybody

00:03:19.680 --> 00:03:22.170
to pick up and play with,
we have these methods

00:03:22.170 --> 00:03:25.290
in a light gray or
dark gray list, which

00:03:25.290 --> 00:03:27.870
means that you're going to get
either a warning in the log

00:03:27.870 --> 00:03:29.890
or a toast popping
up on the screen.

00:03:29.890 --> 00:03:32.310
So if your application is
calling these and shouldn't be,

00:03:32.310 --> 00:03:33.480
you're going to get
a warning about it.

00:03:33.480 --> 00:03:36.030
But when that release comes
out, it will be on a black list,

00:03:36.030 --> 00:03:37.840
and we'll simply stop
it from being called.

00:03:37.840 --> 00:03:41.490
So the call to action
would be, go run

00:03:41.490 --> 00:03:44.100
with the preview release
for P, and make sure

00:03:44.100 --> 00:03:46.530
that your application
is safe from these.

00:03:46.530 --> 00:03:48.900
And if it's not, then
either fix your application.

00:03:48.900 --> 00:03:52.260
Or if it is some facility
that you absolutely need,

00:03:52.260 --> 00:03:54.150
then maybe it's something
that we can work on

00:03:54.150 --> 00:03:56.104
and we can put it on
a white list instead,

00:03:56.104 --> 00:03:58.020
but you need to tell us
that information which

00:03:58.020 --> 00:03:59.144
is why we have the preview.

00:03:59.144 --> 00:04:00.240
So give us that feedback.

00:04:00.240 --> 00:04:01.490
FLORINA MUNTENESCU: All right.

00:04:01.490 --> 00:04:04.292
There is this Android--

00:04:04.292 --> 00:04:05.250
CHET HAASE: No, no, no.

00:04:05.250 --> 00:04:06.570
That's a totally
different object.

00:04:06.570 --> 00:04:07.830
I think we need to
talk about text.

00:04:07.830 --> 00:04:08.180
FLORINA MUNTENESCU: Yeah.

00:04:08.180 --> 00:04:09.264
What about text?

00:04:09.264 --> 00:04:11.430
CHET HAASE: Text happened
in my larger toolkit tape,

00:04:11.430 --> 00:04:13.350
so I understand that.

00:04:13.350 --> 00:04:14.580
In fact, you understand that.

00:04:14.580 --> 00:04:16.320
I want to ask you about text.

00:04:16.320 --> 00:04:18.120
So what happened in text?

00:04:18.120 --> 00:04:21.750
FLORINA MUNTENESCU: So in text,
we released a few new APIs.

00:04:21.750 --> 00:04:23.580
Now, you can pre-measure text.

00:04:23.580 --> 00:04:26.820
So this means you can move
all of that measuring work

00:04:26.820 --> 00:04:30.150
that takes quite a lot of time
from rendering a character

00:04:30.150 --> 00:04:31.353
to a background threat.

00:04:31.700 --> 00:04:33.200
CHET HAASE: And why
is that helpful?

00:04:33.755 --> 00:04:35.338
FLORINA MUNTENESCU:
Well, because then

00:04:35.338 --> 00:04:37.860
the text is displayed
faster, so faster rendering

00:04:37.860 --> 00:04:40.650
means less frames skipped.

00:04:40.650 --> 00:04:41.910
CHET HAASE: Sure.

00:04:41.910 --> 00:04:44.505
So it's also good
because, like, if it's

00:04:44.505 --> 00:04:46.380
time for you to display
the text and then you

00:04:46.380 --> 00:04:47.830
have to measure it,
it's not very helpful.

00:04:47.830 --> 00:04:49.710
But a lot of times,
you know ahead of time

00:04:49.710 --> 00:04:51.120
when you're going to need that.

00:04:51.120 --> 00:04:52.410
So you can actually,
ahead of time,

00:04:52.410 --> 00:04:53.580
shove it off to a
background thread.

00:04:53.580 --> 00:04:55.440
So that by the time
you need it, then you

00:04:55.440 --> 00:04:57.430
can display the text,
which is awesome.

00:04:57.430 --> 00:04:59.180
FLORINA MUNTENESCU:
We added a new feature

00:04:59.180 --> 00:05:02.380
for the user, the Magnifier, and
we also added an API for that.

00:05:02.380 --> 00:05:05.090
So we now have three methods.

00:05:05.090 --> 00:05:08.260
Magnifier, Show Updates,
and I think Dismiss.

00:05:08.260 --> 00:05:11.850
And this means that, if you're
developing your own custom

00:05:11.850 --> 00:05:13.630
views that also
display text, you

00:05:13.630 --> 00:05:16.515
can also show that
Magnifier in your cost view.

00:05:16.515 --> 00:05:18.804
CHET HAASE: Also, it's
not limited to text.

00:05:18.804 --> 00:05:19.720
That's the cool thing.

00:05:19.720 --> 00:05:21.802
We are using it for
text, because we

00:05:21.802 --> 00:05:23.260
wanted to make it
easier for people

00:05:23.260 --> 00:05:24.582
to manipulate the cursor.

00:05:24.582 --> 00:05:26.290
But you can use it
for whatever you want.

00:05:26.290 --> 00:05:29.656
If you need a zoomed in view,
that API is general purpose.

00:05:29.656 --> 00:05:31.030
FLORINA MUNTENESCU:
That's right.

00:05:31.030 --> 00:05:32.620
And I think we also
added some more

00:05:32.620 --> 00:05:35.250
improvements on Smart Linkify.

00:05:35.250 --> 00:05:36.670
Do you know more about that?

00:05:36.670 --> 00:05:37.570
CHET HAASE: I do.

00:05:37.570 --> 00:05:41.290
Smart Linkify is like
Linkify, except it's smarter.

00:05:41.290 --> 00:05:45.550
So we already had the ability to
create links in a block of text

00:05:45.550 --> 00:05:48.400
for you if we detect things like
phone numbers and addresses.

00:05:48.400 --> 00:05:49.785
That's been there forever.

00:05:49.785 --> 00:05:51.160
But now, through
machine learning

00:05:51.160 --> 00:05:53.090
models that we have
on the system--

00:05:53.090 --> 00:05:55.298
which are used for things
like smart text selection--

00:05:55.298 --> 00:05:57.520
we can detect more
complex entities there.

00:05:57.520 --> 00:05:59.680
Like you may select
a word which is

00:05:59.680 --> 00:06:02.780
part of a larger phrase, which
we detect because of the entity

00:06:02.780 --> 00:06:04.360
detection in the model.

00:06:04.360 --> 00:06:09.824
You can ask Linkify to detect
those as entity links as well.

00:06:09.824 --> 00:06:11.740
FLORINA MUNTENESCU: Can
I now go back to this?

00:06:11.740 --> 00:06:14.640
Because it feels like it's
looking over our shoulder.

00:06:14.640 --> 00:06:15.690
CHET HAASE: Ah!

00:06:15.690 --> 00:06:17.280
Yes.

00:06:17.280 --> 00:06:17.780
OK.

00:06:17.780 --> 00:06:19.696
FLORINA MUNTENESCU: So
what's with the Android

00:06:19.696 --> 00:06:20.800
with the jetpack?

00:06:20.800 --> 00:06:24.270
CHET HAASE: So Android
Jetpack is a set of components

00:06:24.270 --> 00:06:25.740
as well as
architectural guidance

00:06:25.740 --> 00:06:29.970
for helping developers build
better Android applications.

00:06:29.970 --> 00:06:32.490
Most-- I would say all
Android developers--

00:06:32.490 --> 00:06:35.310
are familiar with a lot of
what is in Android Jetpack

00:06:35.310 --> 00:06:38.190
already because we have taken
all the goodness of Support

00:06:38.190 --> 00:06:40.770
Library and put it
under this banner.

00:06:40.770 --> 00:06:44.250
And we are going to continue
to add to that, specifically

00:06:44.250 --> 00:06:46.440
with the intent of making
Android development better

00:06:46.440 --> 00:06:47.130
and easier.

00:06:47.130 --> 00:06:49.150
So I'll give you some examples.

00:06:49.150 --> 00:06:50.650
One of the big ones--

00:06:50.650 --> 00:06:52.608
one of my favorite things
about Support Library

00:06:52.608 --> 00:06:54.060
is App Compact and
the way that we

00:06:54.060 --> 00:06:58.710
baked in the releases
for certain APIs

00:06:58.710 --> 00:07:00.150
into the package names.

00:07:00.150 --> 00:07:03.540
So now we have package
names like V4 and V9

00:07:03.540 --> 00:07:04.950
with some of the APIs.

00:07:04.950 --> 00:07:07.750
We don't even support
those releases anymore.

00:07:07.750 --> 00:07:09.617
So I think all of the
existing developers

00:07:09.617 --> 00:07:10.700
don't even think about it.

00:07:10.700 --> 00:07:13.760
That's just noise at
the top of their file.

00:07:13.760 --> 00:07:14.260
Right?

00:07:14.260 --> 00:07:16.320
It's one of those imports
they never look at.

00:07:16.320 --> 00:07:18.080
But I think if
you're new to Android

00:07:18.080 --> 00:07:19.830
or if you're looking
at the documentation,

00:07:19.830 --> 00:07:21.600
I think it's terribly confusing.

00:07:21.600 --> 00:07:24.120
So we're doing a
major refactor where

00:07:24.120 --> 00:07:28.590
we turn all those package names
into AndroidX dot whatever.

00:07:28.590 --> 00:07:31.776
The other part of it is
the existing Architecture

00:07:31.776 --> 00:07:33.150
Components are a
big piece of it.

00:07:33.150 --> 00:07:37.497
Things like Lifecycle,
Support, and Room, View Model.

00:07:37.497 --> 00:07:38.580
All of that stuff is good.

00:07:38.580 --> 00:07:42.750
Also, the new Paging Library,
which went 1.0 this week--

00:07:42.750 --> 00:07:44.400
Paging and Recycler View.

00:07:44.400 --> 00:07:47.040
And we have two new things.

00:07:47.040 --> 00:07:50.610
Actually there are two sides
here at the demo table.

00:07:50.610 --> 00:07:53.690
We have Navigation Controller,
and we have Work Manager.

00:07:53.690 --> 00:07:56.070
Navigation Controller
makes it easier

00:07:56.070 --> 00:08:00.600
to create the links of the
flow of your application.

00:08:00.600 --> 00:08:03.600
It makes things like
up versus back easier.

00:08:03.600 --> 00:08:06.270
And we also have a
tool in Android Studio,

00:08:06.270 --> 00:08:09.000
where you can visualize
this and create those links.

00:08:09.000 --> 00:08:10.950
So it's sort of an
integration of the APIs

00:08:10.950 --> 00:08:14.340
as well as the tool for making
this complex application

00:08:14.340 --> 00:08:16.110
flow a lot easier to develop.

00:08:16.110 --> 00:08:20.250
And then Work Manager is about
an easier way for creating

00:08:20.250 --> 00:08:22.830
and executing background tasks.

00:08:22.830 --> 00:08:25.530
So before, we would recommend--

00:08:25.530 --> 00:08:28.170
well, JobScheduler is really
good for scheduling things

00:08:28.170 --> 00:08:29.160
in particular times.

00:08:29.160 --> 00:08:32.070
You know, when Wi-Fi is there or
when you're charging, whatever.

00:08:32.070 --> 00:08:35.839
And that works really well if
you're on Kit-kat and above.

00:08:35.839 --> 00:08:37.380
What if you're on
an earlier release?

00:08:37.380 --> 00:08:40.440
Well we also have
JobDispatcher, which

00:08:40.440 --> 00:08:42.480
is in the Play Services APIs.

00:08:42.480 --> 00:08:43.980
Well what if you're
on a device that

00:08:43.980 --> 00:08:45.104
doesn't have Play Services?

00:08:45.104 --> 00:08:47.670
Well, then you're probably
rolling your own solution.

00:08:47.670 --> 00:08:50.670
So applications would need
to do all three of these.

00:08:50.670 --> 00:08:54.180
Work Manager is an attempt to
have a simpler, more elegant,

00:08:54.180 --> 00:08:56.070
fluent API for
doing all this stuff

00:08:56.070 --> 00:08:57.727
that handles all
of that for you.

00:08:57.727 --> 00:08:58.810
FLORINA MUNTENESCU: Right.

00:08:58.810 --> 00:09:03.150
So lots of new things, both in
Android but also with Jetpack.

00:09:05.310 --> 00:09:07.500
So check out all
the videos that we

00:09:07.500 --> 00:09:10.230
have from Google
I/O. And also check

00:09:10.230 --> 00:09:13.320
out the documentation on
Developer.Android.com.

00:09:13.320 --> 00:09:14.490
Thank you, Chet.

00:09:14.490 --> 00:09:15.960
CHET HAASE: Thank you, Florina.

00:09:15.960 --> 00:09:19.448
FLORINA MUNTENESCU: This
is Florina from I/O Live.

00:09:19.448 --> 00:09:24.474
[MUSIC PLAYING]

