WEBVTT
Kind: captions
Language: en

00:00:12.330 --> 00:00:14.660
ILYA GRIGORIK: Hello everyone,
and welcome to our Make the

00:00:14.660 --> 00:00:17.350
Web Fast series on Google
Developers Live.

00:00:17.350 --> 00:00:19.850
Today, we're going to talk about
an awesome new image

00:00:19.850 --> 00:00:22.800
format called WebP, and with
us today, we have Stephen

00:00:22.800 --> 00:00:25.330
Konig from the WebP team.

00:00:25.330 --> 00:00:25.700
STEPHEN KONIG: Great.

00:00:25.700 --> 00:00:25.830
Thanks, Ilya.

00:00:25.830 --> 00:00:28.400
It's great to be here and update
all of you on what

00:00:28.400 --> 00:00:31.020
we've been working with WebP
and hopefully convince you

00:00:31.020 --> 00:00:33.140
that it's a great alternative.

00:00:33.140 --> 00:00:35.570
ILYA GRIGORIK: So speaking of
convincing, let's get this

00:00:35.570 --> 00:00:36.620
right off the bat, right?

00:00:36.620 --> 00:00:37.530
I'm a busy person.

00:00:37.530 --> 00:00:40.050
I'm a developer, I
got features to

00:00:40.050 --> 00:00:43.320
build, code to write.

00:00:43.320 --> 00:00:44.190
Images.

00:00:44.190 --> 00:00:45.980
Why should I care about
images, first of all?

00:00:45.980 --> 00:00:49.410
And second of all, I have a
buddy designer who's great.

00:00:49.410 --> 00:00:51.590
He does awesome work,
and he tells me that

00:00:51.590 --> 00:00:53.000
he optimizes images.

00:00:53.000 --> 00:00:55.860
I'm not sure what he's using,
but I trust him.

00:00:55.860 --> 00:00:57.050
So why do we care?

00:00:57.050 --> 00:00:57.880
STEPHEN KONIG: Why do we care?

00:00:57.880 --> 00:01:00.280
One of the reasons we care is
that images make up a huge

00:01:00.280 --> 00:01:02.690
proportion of the amount of
bytes that we send in most web

00:01:02.690 --> 00:01:05.410
pages, and I think we've got
some data to talk about that.

00:01:05.410 --> 00:01:07.640
But if we're looking at ways of
making the web faster, it's

00:01:07.640 --> 00:01:10.580
one of the most obvious things
we need to look at as far as

00:01:10.580 --> 00:01:11.940
how we can optimize.

00:01:11.940 --> 00:01:15.670
And in terms of image
optimization, there's lots of

00:01:15.670 --> 00:01:18.950
different aspects of that, but
ultimately it comes down to

00:01:18.950 --> 00:01:20.710
how we can produce
the smallest size

00:01:20.710 --> 00:01:22.290
for the best quality.

00:01:22.290 --> 00:01:25.280
And we think WebP offers some
unique advantages in that way,

00:01:25.280 --> 00:01:29.540
and we think it plays an
important part in how people

00:01:29.540 --> 00:01:30.280
use the web.

00:01:30.280 --> 00:01:30.690
ILYA GRIGORIK: Interesting.

00:01:30.690 --> 00:01:34.810
OK, so speaking of data, as
we were preparing for this

00:01:34.810 --> 00:01:36.982
presentation, I checked some
data on the HTTP archive, and

00:01:36.982 --> 00:01:40.370
I specifically looked at mobile
because mobile is an

00:01:40.370 --> 00:01:43.090
exploding topic, traffic
going through the roof.

00:01:43.090 --> 00:01:46.030
So this is data across a couple
thousand of the most

00:01:46.030 --> 00:01:47.180
popular mobile sites.

00:01:47.180 --> 00:01:49.380
And when I look at the overall
size of the page, first of

00:01:49.380 --> 00:01:51.750
all, an average page is
about 700 kilobytes.

00:01:51.750 --> 00:01:53.670
So it's actually a little bit
less than a desktop version,

00:01:53.670 --> 00:01:55.140
which is good news.

00:01:55.140 --> 00:01:57.820
But then, this number
actually shocked me.

00:01:57.820 --> 00:02:00.120
When I look at the breakdown
between the different content

00:02:00.120 --> 00:02:05.860
types, images are basically 70%
of the data on the wire.

00:02:05.860 --> 00:02:06.600
STEPHEN KONIG: That's
pretty typical.

00:02:06.600 --> 00:02:08.229
It's actually a little bit
higher on mobile than what we

00:02:08.229 --> 00:02:11.030
see on desktop, but the fact
that it's the single largest

00:02:11.030 --> 00:02:13.470
component of the page size is
very consistent with what we

00:02:13.470 --> 00:02:15.390
see across desktop as well.

00:02:15.390 --> 00:02:18.160
The other thing I noticed for
mobile, in addition to just

00:02:18.160 --> 00:02:20.680
the raw bandwidth we're
consuming, typically users are

00:02:20.680 --> 00:02:22.470
more bandwidth constrained on
mobile than they are on

00:02:22.470 --> 00:02:24.870
desktop, and in some cases
having to pay for that.

00:02:24.870 --> 00:02:26.970
So think about it from the
perspective of what you're

00:02:26.970 --> 00:02:29.400
asking your users to pay when
you're designing your web

00:02:29.400 --> 00:02:32.240
pages and images are such
an important and sizable

00:02:32.240 --> 00:02:32.910
component of that.

00:02:32.910 --> 00:02:34.870
ILYA GRIGORIK: I would love
for my browser to have a

00:02:34.870 --> 00:02:37.950
sidebar on the side saying,
you've paid this much to

00:02:37.950 --> 00:02:38.250
download this page.

00:02:38.250 --> 00:02:39.150
STEPHEN KONIG: How
much you spent.

00:02:39.150 --> 00:02:40.025
Exactly.

00:02:40.025 --> 00:02:42.040
ILYA GRIGORIK: We should build
an extension for that.

00:02:42.040 --> 00:02:43.690
That would be awesome.

00:02:43.690 --> 00:02:45.730
And then I guess the other thing
to point out, especially

00:02:45.730 --> 00:02:49.130
in mobile today, it's become
a hiDPI world.

00:02:49.130 --> 00:02:53.770
And in fact, it only recently
occurred to me that we really

00:02:53.770 --> 00:02:57.270
need to shift the conversation
away from should I be doing

00:02:57.270 --> 00:03:00.070
hiDPI towards basically
every device you

00:03:00.070 --> 00:03:02.230
buy nowadays is hiDPI.

00:03:02.230 --> 00:03:05.720
Certainly maybe a year ago, or
a year and a half ago, it was

00:03:05.720 --> 00:03:08.410
still a novelty item, like you
had to pay extra to get your

00:03:08.410 --> 00:03:10.240
retina experience
kind of thing.

00:03:10.240 --> 00:03:13.100
And today, if you look across
the board, you're getting

00:03:13.100 --> 00:03:14.820
hiDPI devices no matter what.

00:03:14.820 --> 00:03:15.840
STEPHEN KONIG: Exactly.

00:03:15.840 --> 00:03:18.050
They're definitely
proliferating, and I think as

00:03:18.050 --> 00:03:19.700
users begin experience
these devices, they

00:03:19.700 --> 00:03:20.860
don't want to go back.

00:03:20.860 --> 00:03:24.340
So we're going to see increasing
demand on the part

00:03:24.340 --> 00:03:27.500
of consumers for more
hiDPI devices.

00:03:27.500 --> 00:03:30.680
And the unfortunate thing is
most images today are designed

00:03:30.680 --> 00:03:32.460
for a low DPI environment.

00:03:32.460 --> 00:03:34.040
So when you translate
those to hiDPI, they

00:03:34.040 --> 00:03:35.210
don't look so good.

00:03:35.210 --> 00:03:37.540
And so it's putting a lot of
pressure on publishers to

00:03:37.540 --> 00:03:40.710
update their sites and their
images to look better on these

00:03:40.710 --> 00:03:41.600
hiDPI devices.

00:03:41.600 --> 00:03:43.020
ILYA GRIGORIK: And that's a
really hard one, right?

00:03:43.020 --> 00:03:46.880
Because to your point earlier,
my bandwidth is not going to

00:03:46.880 --> 00:03:50.400
up magically by four, or latency
decrease by four, but

00:03:50.400 --> 00:03:53.710
all of a sudden, the images are
getting four times bigger.

00:03:53.710 --> 00:03:54.130
STEPHEN KONIG: Exactly.

00:03:54.130 --> 00:03:55.540
ILYA GRIGORIK: And I think,
actually, the four is worth

00:03:55.540 --> 00:03:56.190
explaining.

00:03:56.190 --> 00:03:59.430
When we say hiDPI, we usually
mean twice the size of the

00:03:59.430 --> 00:04:01.410
image, but you need to remember
that it's twice the

00:04:01.410 --> 00:04:03.040
width and twice the height,
which means

00:04:03.040 --> 00:04:04.300
four times the pixels.

00:04:04.300 --> 00:04:04.650
STEPHEN KONIG: Correct.

00:04:04.650 --> 00:04:06.770
ILYA GRIGORIK: So if we just
take whatever we were doing

00:04:06.770 --> 00:04:11.090
and apply it to hiDPI images,
we're going to get file sizes,

00:04:11.090 --> 00:04:13.140
instead of 600 kilobytes
for mobile,

00:04:13.140 --> 00:04:14.650
it'll be several megabytes.

00:04:14.650 --> 00:04:15.220
STEPHEN KONIG: Exactly.

00:04:15.220 --> 00:04:17.160
And that's just even at the
same quality level.

00:04:17.160 --> 00:04:19.910
So if you're using a lossy
format like JPEG, in addition

00:04:19.910 --> 00:04:21.870
to that, what you're probably
going to see is a demand for

00:04:21.870 --> 00:04:24.780
higher quality images with your
compression artifacts.

00:04:24.780 --> 00:04:27.460
So that in itself will
also play a part in

00:04:27.460 --> 00:04:28.240
increasing the size.

00:04:28.240 --> 00:04:28.540
ILYA GRIGORIK: Right.

00:04:28.540 --> 00:04:31.610
So there's probably no magic
bullet to say we can have both

00:04:31.610 --> 00:04:35.100
hiDPI and a lower file size, but
perhaps there's a middle

00:04:35.100 --> 00:04:36.170
road somewhere in between.

00:04:36.170 --> 00:04:37.360
STEPHEN KONIG: Exactly.

00:04:37.360 --> 00:04:38.940
ILYA GRIGORIK: Such that
it's not just a

00:04:38.940 --> 00:04:40.420
4x across the board.

00:04:40.420 --> 00:04:41.430
STEPHEN KONIG: Correct.

00:04:41.430 --> 00:04:44.000
ILYA GRIGORIK: And I guess the
other thing that I find when I

00:04:44.000 --> 00:04:47.160
talk to a lot of developers is
just picking the right image

00:04:47.160 --> 00:04:48.200
format is actually
a challenge.

00:04:48.200 --> 00:04:48.720
STEPHEN KONIG: It is.

00:04:48.720 --> 00:04:50.800
ILYA GRIGORIK: So as I mentioned
earlier, when I

00:04:50.800 --> 00:04:53.130
talked to a lot of web
developers and designers, they

00:04:53.130 --> 00:04:56.590
say, great, I took my image,
I optimized it.

00:04:56.590 --> 00:04:59.840
I saved it as a JPEG or as a
PNG, and I ran it through some

00:04:59.840 --> 00:05:03.730
tool that optimizes that format,
which is great except

00:05:03.730 --> 00:05:05.120
that you're probably
optimizing the

00:05:05.120 --> 00:05:06.700
wrong thing, right?

00:05:06.700 --> 00:05:07.250
STEPHEN KONIG: Exactly.

00:05:07.250 --> 00:05:09.580
ILYA GRIGORIK: So picking the
right image format is actually

00:05:09.580 --> 00:05:10.820
very tricky problem.

00:05:10.820 --> 00:05:12.280
STEPHEN KONIG: It is.

00:05:12.280 --> 00:05:14.620
You have JPEG, which is quite
common, but you have PNG for

00:05:14.620 --> 00:05:17.030
lossless, you've got
GIFs for animation.

00:05:17.030 --> 00:05:19.720
And unfortunately, we see still
some confusion among

00:05:19.720 --> 00:05:22.140
some developers in terms of what
those different formats,

00:05:22.140 --> 00:05:23.830
and how they should be used,
and what context

00:05:23.830 --> 00:05:24.770
you should use them.

00:05:24.770 --> 00:05:27.390
So we see things like people
taking JPEGs and then

00:05:27.390 --> 00:05:29.280
recompressing them as PNGs.

00:05:29.280 --> 00:05:31.420
So you have a nice, lossless
representation of your lossy

00:05:31.420 --> 00:05:35.170
format, which really doesn't
help so much in the end.

00:05:35.170 --> 00:05:37.490
But it does put you as a
developer in the position of

00:05:37.490 --> 00:05:39.260
having to understand what are
the characteristics of the

00:05:39.260 --> 00:05:40.380
different image formats?

00:05:40.380 --> 00:05:42.400
When should I use one
over the other?

00:05:42.400 --> 00:05:44.990
And how should I mix
and match those?

00:05:44.990 --> 00:05:45.380
ILYA GRIGORIK: Yeah.

00:05:45.380 --> 00:05:47.310
And I should mention that this
is actually one of the core

00:05:47.310 --> 00:05:49.980
optimizations that we have in
our Page Speed product, so Mod

00:05:49.980 --> 00:05:53.410
PageSpeed, Nginx PageSpeed, and
PageSpeed service where we

00:05:53.410 --> 00:05:55.650
take the image that you
provide us with,

00:05:55.650 --> 00:05:56.420
whatever that may be--

00:05:56.420 --> 00:05:57.730
JPEG or PNG--

00:05:57.730 --> 00:05:59.970
and then we actually try to
transcode it into other

00:05:59.970 --> 00:06:01.480
formats in the background.

00:06:01.480 --> 00:06:03.730
And then we figure out that,
hey, this image file is

00:06:03.730 --> 00:06:05.320
actually much better
compressed if we

00:06:05.320 --> 00:06:07.010
use JPEG, for example.

00:06:07.010 --> 00:06:10.890
So we don't assume anything
about your decisions.

00:06:10.890 --> 00:06:15.720
And it sounds like WebP could
actually be the one to rule

00:06:15.720 --> 00:06:16.850
them all, if you will?

00:06:16.850 --> 00:06:19.790
STEPHEN KONIG: That's part of
our goal for WebP is finding a

00:06:19.790 --> 00:06:22.830
way to encompass the different
kinds of attributes that you

00:06:22.830 --> 00:06:25.590
want to see from your images,
and offering you one format

00:06:25.590 --> 00:06:28.150
that you can use across the
board and to support those

00:06:28.150 --> 00:06:29.930
different kinds of use cases.

00:06:29.930 --> 00:06:31.930
So whether you want to do a
lossy format, whether you want

00:06:31.930 --> 00:06:34.190
to do lossless, whether you want
to do animation, you can

00:06:34.190 --> 00:06:36.860
do all those up with WebP, and
so now you don't have to face

00:06:36.860 --> 00:06:37.580
this choice.

00:06:37.580 --> 00:06:38.830
ILYA GRIGORIK: Awesome.

00:06:40.950 --> 00:06:42.430
So maybe a little bit
about the history.

00:06:42.430 --> 00:06:43.530
Were did it come from?

00:06:43.530 --> 00:06:44.400
What is it?

00:06:44.400 --> 00:06:47.420
STEPHEN KONIG: So we announced
WebP about two years ago.

00:06:47.420 --> 00:06:51.990
It's actually derived from the
WebM video format, so it

00:06:51.990 --> 00:06:53.480
derives from VP8 video codec.

00:06:53.480 --> 00:06:58.520
So it's basically taking a key
frame from the VP8 video codec

00:06:58.520 --> 00:07:01.260
and using that as an image
representation.

00:07:01.260 --> 00:07:03.280
So it is fully open source,
royalty free.

00:07:03.280 --> 00:07:04.550
All the source code is
out there, all the

00:07:04.550 --> 00:07:05.490
libraries are out there.

00:07:05.490 --> 00:07:08.780
It's free to use,
free to deploy.

00:07:08.780 --> 00:07:09.800
No issues there.

00:07:09.800 --> 00:07:10.460
ILYA GRIGORIK: Right.

00:07:10.460 --> 00:07:12.280
And actually, just
a quick tip.

00:07:12.280 --> 00:07:15.320
Last week, we had a great
episode on WebM and some of

00:07:15.320 --> 00:07:18.750
the future of WebM with the
VP9 work that the team is

00:07:18.750 --> 00:07:19.990
doing at YouTube and
all the rest.

00:07:19.990 --> 00:07:23.160
So if you're interested, I
really recommend just going

00:07:23.160 --> 00:07:28.670
back in the History for GDL
and checking that out.

00:07:28.670 --> 00:07:31.390
STEPHEN KONIG: So a little brief
history on the timeline.

00:07:31.390 --> 00:07:33.990
So as I mentioned, we did an
initial release and launch of

00:07:33.990 --> 00:07:36.730
that back in 2010, which
initially just had support for

00:07:36.730 --> 00:07:38.250
lossy compression.

00:07:38.250 --> 00:07:40.840
In October of 2011, we followed
that up with support

00:07:40.840 --> 00:07:44.170
for color profiles
and XMP metadata.

00:07:44.170 --> 00:07:48.870
Last year, we added lossless,
which was the support for PNG

00:07:48.870 --> 00:07:51.470
type formats, as well
as transparency.

00:07:51.470 --> 00:07:54.100
And in terms of what we're
working on, we've actually got

00:07:54.100 --> 00:07:56.610
a couple things coming that
are really exciting.

00:07:56.610 --> 00:07:58.180
You'll actually see a new
release coming out in about a

00:07:58.180 --> 00:07:59.770
week or two that will
add support for

00:07:59.770 --> 00:08:01.340
animation and metadata.

00:08:01.340 --> 00:08:04.230
So that will replace
the GIF use case.

00:08:04.230 --> 00:08:07.090
Longer term, we're looking at
ways of improving performance

00:08:07.090 --> 00:08:09.070
on the encode and decode side,
so we're always looking at

00:08:09.070 --> 00:08:10.440
optimizations we can do there.

00:08:10.440 --> 00:08:10.830
ILYA GRIGORIK: And we're
actually going

00:08:10.830 --> 00:08:11.220
to talk about that.

00:08:11.220 --> 00:08:12.900
STEPHEN KONIG: We're going to
talk a little bit about that.

00:08:12.900 --> 00:08:14.530
Better support for RN mobile.

00:08:14.530 --> 00:08:16.830
So those platforms are supported
today, but there's

00:08:16.830 --> 00:08:19.380
work we know we can do to
make them even faster.

00:08:19.380 --> 00:08:21.620
And then in the future, we'll be
thinking about things like

00:08:21.620 --> 00:08:24.700
adding support for layers, so
for 3D images, as well as high

00:08:24.700 --> 00:08:26.460
color depth images.

00:08:26.460 --> 00:08:30.370
ILYA GRIGORIK: So just before
the GDL, we were joking about

00:08:30.370 --> 00:08:33.600
we have the hiDPI, and then
we're going to get to the 3D

00:08:33.600 --> 00:08:34.940
images in high def.

00:08:34.940 --> 00:08:36.059
STEPHEN KONIG: In high
def color depth.

00:08:36.059 --> 00:08:36.809
Exactly.

00:08:36.809 --> 00:08:38.450
ILYA GRIGORIK: This sounds
like a disaster from

00:08:38.450 --> 00:08:39.720
performance.

00:08:39.720 --> 00:08:40.570
It's going to be beautiful.

00:08:40.570 --> 00:08:42.510
STEPHEN KONIG: It's going to be
absolutely beautiful, and

00:08:42.510 --> 00:08:44.190
we're going to work hard to
make it performant, too.

00:08:44.190 --> 00:08:45.350
ILYA GRIGORIK: It is going
to be a beautiful web.

00:08:45.350 --> 00:08:46.710
So a couple of questions,
actually.

00:08:46.710 --> 00:08:49.660
What is the difference between
XMP metadata and the metadata

00:08:49.660 --> 00:08:52.090
support that's coming up?

00:08:52.090 --> 00:08:54.160
STEPHEN KONIG: So the XMP was
sort of basic metadata.

00:08:54.160 --> 00:08:58.380
What we're doing with the
release that's coming up now

00:08:58.380 --> 00:09:00.950
is adding additional properties
and support, very

00:09:00.950 --> 00:09:02.810
similar to what you find
today with JPEG.

00:09:02.810 --> 00:09:03.090
ILYA GRIGORIK: OK.

00:09:03.090 --> 00:09:04.900
And just maybe to clarify
the difference

00:09:04.900 --> 00:09:06.510
between lossy and lossless.

00:09:06.510 --> 00:09:10.140
So originally, it was basically
competing with JPEG.

00:09:10.140 --> 00:09:11.490
STEPHEN KONIG: Correct.

00:09:11.490 --> 00:09:13.230
ILYA GRIGORIK: And with
lossless, we're saying you can

00:09:13.230 --> 00:09:16.220
also now use WebP for cases
where we were using PNGs.

00:09:16.220 --> 00:09:16.900
STEPHEN KONIG: PNG before.

00:09:16.900 --> 00:09:17.240
Correct.

00:09:17.240 --> 00:09:19.560
ILYA GRIGORIK: Not only that,
but we also support the alpha

00:09:19.560 --> 00:09:21.590
channel, which is the
transparency in your images.

00:09:21.590 --> 00:09:22.250
STEPHEN KONIG: Correct.

00:09:22.250 --> 00:09:24.110
ILYA GRIGORIK: And really,
up until--

00:09:24.110 --> 00:09:27.480
so I guess GIFs also
had transparency.

00:09:27.480 --> 00:09:30.670
But you kind of had
this weird choice.

00:09:30.670 --> 00:09:35.090
For photos, I'm going to use a
JPEG, for lossless, I need to

00:09:35.090 --> 00:09:38.770
use PNG, but if I want
animation, I need to use GIF.

00:09:38.770 --> 00:09:41.330
And now, at least in theory, we
should be able to get all

00:09:41.330 --> 00:09:42.520
of these capabilities in one.

00:09:42.520 --> 00:09:42.900
STEPHEN KONIG: Correct.

00:09:42.900 --> 00:09:44.680
And I think the challenge there,
too, is that each of

00:09:44.680 --> 00:09:46.770
those different formats
introduces its

00:09:46.770 --> 00:09:49.590
own pluses and minuses.

00:09:49.590 --> 00:09:51.960
GIF and JPEG behave very
differently from an artifact

00:09:51.960 --> 00:09:53.230
perspective.

00:09:53.230 --> 00:09:56.770
And so it sort of required the
web developer to be aware of

00:09:56.770 --> 00:09:58.430
all those things and understand
what are the

00:09:58.430 --> 00:10:01.010
implications of using this
format over that format?

00:10:01.010 --> 00:10:03.850
With WebP, you get one common
characteristic set of

00:10:03.850 --> 00:10:04.700
properties.

00:10:04.700 --> 00:10:07.550
ILYA GRIGORIK: So at least in
theory in the long term, as a

00:10:07.550 --> 00:10:09.530
person who's authoring this
content, as a designer, for

00:10:09.530 --> 00:10:12.670
example, it actually it makes
my job a lot simpler.

00:10:12.670 --> 00:10:13.040
STEPHEN KONIG: Correct.

00:10:13.040 --> 00:10:14.350
ILYA GRIGORIK: I just
save it as--

00:10:14.350 --> 00:10:16.500
I'll probably still need some
toggles to say, this is the

00:10:16.500 --> 00:10:17.930
use case I want you to
optimize it for.

00:10:17.930 --> 00:10:18.790
STEPHEN KONIG: Correct.

00:10:18.790 --> 00:10:20.865
ILYA GRIGORIK: Or does the
encoder actually figure that

00:10:20.865 --> 00:10:21.930
out by itself?

00:10:21.930 --> 00:10:24.050
STEPHEN KONIG: So we certainly
have a variety of knobs and

00:10:24.050 --> 00:10:25.750
switches you can tune
on the encoder.

00:10:25.750 --> 00:10:27.470
I think you still need to
understand whether you're

00:10:27.470 --> 00:10:31.560
targeting a lossless or lossy
kind of use case, and you need

00:10:31.560 --> 00:10:33.840
to look at quality levels
depending on the use case you

00:10:33.840 --> 00:10:38.300
have if you're doing lossy.

00:10:38.300 --> 00:10:43.550
But definitely, the case that
you're using one image encoder

00:10:43.550 --> 00:10:44.940
with a common set of
characteristics I

00:10:44.940 --> 00:10:46.650
think helps a lot.

00:10:46.650 --> 00:10:47.900
ILYA GRIGORIK: OK, awesome.

00:10:52.330 --> 00:10:54.780
STEPHEN KONIG: So
some results.

00:10:54.780 --> 00:10:56.970
ILYA GRIGORIK: So these are
studies that were done back in

00:10:56.970 --> 00:10:58.470
2008, or have these--

00:10:58.470 --> 00:11:00.130
STEPHEN KONIG: So these are
actually studies that we did

00:11:00.130 --> 00:11:02.205
in 2011 and 2012.

00:11:02.205 --> 00:11:03.000
ILYA GRIGORIK: Sorry,
'11, yes.

00:11:03.000 --> 00:11:04.330
STEPHEN KONIG: 2011-2012.

00:11:04.330 --> 00:11:06.930
We didn't have WebP in 2008.

00:11:06.930 --> 00:11:11.300
So we've done a bunch of studies
and analyses to do

00:11:11.300 --> 00:11:15.200
comparisons between WebP
versus JPEG and PNG.

00:11:15.200 --> 00:11:16.510
So on the left, what
you see is a

00:11:16.510 --> 00:11:19.160
comparison of WebP to PNG.

00:11:19.160 --> 00:11:22.860
So basically, this chart is a
representation of the ratio of

00:11:22.860 --> 00:11:24.710
the WebP file size to
the PNG file size.

00:11:24.710 --> 00:11:29.210
So the one is PNG, obviously,
it's just a ratio of one.

00:11:29.210 --> 00:11:32.200
And then for WebP, we have two
versions of that, one with

00:11:32.200 --> 00:11:34.550
alpha and one with lossless.

00:11:34.550 --> 00:11:37.420
And obviously, what you see
there is that for almost all

00:11:37.420 --> 00:11:39.850
images, the WebP is
significantly

00:11:39.850 --> 00:11:40.890
smaller than PNG.

00:11:40.890 --> 00:11:44.750
There are a handful of cases,
less than 2%, where it's

00:11:44.750 --> 00:11:46.450
slightly higher than one.

00:11:46.450 --> 00:11:46.870
ILYA GRIGORIK: So that's
this peak right here?

00:11:46.870 --> 00:11:48.720
STEPHEN KONIG: That's that
little peak right there.

00:11:48.720 --> 00:11:53.260
But overall, across, in this
case, 1,000 images, 98% of

00:11:53.260 --> 00:11:55.680
them were smaller, and in most
cases by a significant

00:11:55.680 --> 00:11:56.620
degree, than PNG.

00:11:56.620 --> 00:11:58.650
ILYA GRIGORIK: So it seems like,
especially for lossy

00:11:58.650 --> 00:12:03.330
with alpha, if I look at, half
of the distribution here, it's

00:12:03.330 --> 00:12:05.250
significantly less,
like 80%, 90%.

00:12:05.250 --> 00:12:05.890
STEPHEN KONIG: You're
looking at

00:12:05.890 --> 00:12:07.550
between 70% and 80% smaller.

00:12:07.550 --> 00:12:08.830
ILYA GRIGORIK: Which is actually
representative of

00:12:08.830 --> 00:12:12.270
kind of the larger number that
we saw, which is for certain

00:12:12.270 --> 00:12:16.910
images, with alpha channel and
PNGs, we can get on average,

00:12:16.910 --> 00:12:19.600
70% to 80% improvement
in byte size.

00:12:19.600 --> 00:12:20.190
STEPHEN KONIG: Yep.

00:12:20.190 --> 00:12:21.370
ILYA GRIGORIK: Which is huge.

00:12:21.370 --> 00:12:23.390
STEPHEN KONIG: Which
is phenomenal.

00:12:23.390 --> 00:12:24.820
And then on the right,
we did a comparison

00:12:24.820 --> 00:12:27.160
between WebP and JPEG.

00:12:27.160 --> 00:12:28.900
And there you see, in this
case, we're looking at

00:12:28.900 --> 00:12:31.050
different levels of JPEG
quality, so all the way from

00:12:31.050 --> 00:12:33.920
about 25 all the way
up to 90, and the

00:12:33.920 --> 00:12:34.950
differences in file size.

00:12:34.950 --> 00:12:36.150
So the red is JPEG.

00:12:36.150 --> 00:12:38.650
But what you see there is that
again, consistently, WebP is

00:12:38.650 --> 00:12:41.100
smaller for each
quality level.

00:12:41.100 --> 00:12:45.240
But what you notice on the right
hand tail of that graph,

00:12:45.240 --> 00:12:48.660
JPEG spikes up once you get
above quality about 75,

00:12:48.660 --> 00:12:55.110
whereas WebP has a much more
static increase in file size.

00:12:55.110 --> 00:12:57.790
So what that really tells you
is that as you get higher

00:12:57.790 --> 00:12:59.260
quality images--

00:12:59.260 --> 00:13:00.870
which hearkens back to what
we were discussing

00:13:00.870 --> 00:13:02.120
before about hiDPI--

00:13:04.300 --> 00:13:06.520
the gains you're getting from
WebP become even more

00:13:06.520 --> 00:13:07.610
significant.

00:13:07.610 --> 00:13:08.230
ILYA GRIGORIK: Right.

00:13:08.230 --> 00:13:12.570
So I think it's worth pointing
out that it's a non-linear

00:13:12.570 --> 00:13:14.570
relationship between quality
and file size.

00:13:14.570 --> 00:13:18.200
You get the most benefit on the
high quality, and then it

00:13:18.200 --> 00:13:20.420
kind of decays, if
you will, or the

00:13:20.420 --> 00:13:21.650
gains actually decrease.

00:13:21.650 --> 00:13:22.220
STEPHEN KONIG: Correct.

00:13:22.220 --> 00:13:25.350
ILYA GRIGORIK: So if nothing
else, going from a JPEG or

00:13:25.350 --> 00:13:28.970
WebP from quality 100 to 90 is
going to give you more benefit

00:13:28.970 --> 00:13:30.350
than going lower.

00:13:30.350 --> 00:13:32.795
You should consider going lower,
but you're not going to

00:13:32.795 --> 00:13:32.990
get as much.

00:13:32.990 --> 00:13:34.510
STEPHEN KONIG: Yeah, you get
diminishing returns as you go

00:13:34.510 --> 00:13:35.710
lower quickly.

00:13:35.710 --> 00:13:36.740
ILYA GRIGORIK: So I think
that's a point

00:13:36.740 --> 00:13:39.350
worth pointing out.

00:13:39.350 --> 00:13:41.130
And maybe just one more thing.

00:13:41.130 --> 00:13:44.460
So coming back to these tails,
right before the show we were

00:13:44.460 --> 00:13:47.380
talking about-- so one of the
cases where this could happen,

00:13:47.380 --> 00:13:50.710
because if you're curious, why
would WebP ever be bigger--

00:13:50.710 --> 00:13:53.710
is actually for very small
images where the actual

00:13:53.710 --> 00:13:57.080
container of WebP file is larger
than the image itself.

00:13:57.080 --> 00:13:59.150
We're talking about one
by one pixels and

00:13:59.150 --> 00:14:00.490
silly things like that.

00:14:00.490 --> 00:14:01.790
STEPHEN KONIG: Exactly.

00:14:01.790 --> 00:14:04.090
ILYA GRIGORIK: If you're serving
one by one pixels in

00:14:04.090 --> 00:14:07.203
hiDPI, keep serving
them as GIFs.

00:14:07.203 --> 00:14:07.566
STEPHEN KONIG: That's right.

00:14:07.566 --> 00:14:09.270
ILYA GRIGORIK: For everything
else, use WebP.

00:14:09.270 --> 00:14:10.520
STEPHEN KONIG: Correct.

00:14:12.340 --> 00:14:14.480
ILYA GRIGORIK: So another topic
that comes up frequently

00:14:14.480 --> 00:14:20.100
is, great, WebP is smaller, but
I hear that it takes a lot

00:14:20.100 --> 00:14:22.120
more time to compress
and decompress.

00:14:22.120 --> 00:14:22.670
STEPHEN KONIG: Yep, it does.

00:14:22.670 --> 00:14:24.290
ILYA GRIGORIK: And
that is true.

00:14:24.290 --> 00:14:25.250
There's no free lunch.

00:14:25.250 --> 00:14:26.530
STEPHEN KONIG: Correct.

00:14:26.530 --> 00:14:28.960
ILYA GRIGORIK: More or fewer
bytes means we need to spend

00:14:28.960 --> 00:14:30.070
more CPU cycles.

00:14:30.070 --> 00:14:30.890
STEPHEN KONIG: Correct.

00:14:30.890 --> 00:14:34.320
ILYA GRIGORIK: So how big is
that difference, and does it

00:14:34.320 --> 00:14:36.800
affect my web pages,
the loading

00:14:36.800 --> 00:14:38.000
times and all the rest?

00:14:38.000 --> 00:14:39.400
STEPHEN KONIG: That's
a good question.

00:14:39.400 --> 00:14:40.840
So you're absolutely right.

00:14:40.840 --> 00:14:44.040
The reason we get smaller file
sizes from WebP is because we

00:14:44.040 --> 00:14:46.330
spend more time doing
the encoding work.

00:14:46.330 --> 00:14:48.870
And so what we typically see
on average is that on the

00:14:48.870 --> 00:14:52.165
encode side, it takes about 10
times as long to encode an

00:14:52.165 --> 00:14:53.580
image in WebP as it
does in JPEG.

00:14:53.580 --> 00:14:54.950
ILYA GRIGORIK: So that's
with the current--

00:14:54.950 --> 00:14:55.420
STEPHEN KONIG: With
the current.

00:14:55.420 --> 00:14:56.020
ILYA GRIGORIK: I think
it's a number that

00:14:56.020 --> 00:14:57.140
actually improved, right?

00:14:57.140 --> 00:14:57.900
STEPHEN KONIG: It
has improved.

00:14:57.900 --> 00:15:00.730
It has improved steadily as
we've been developing the

00:15:00.730 --> 00:15:02.980
encoder and the format,
and we expect it

00:15:02.980 --> 00:15:03.910
to continue to improve.

00:15:03.910 --> 00:15:07.760
We will never get to one to
one, even two to one.

00:15:07.760 --> 00:15:10.340
2x is probably ambitious, but
we think we can certainly

00:15:10.340 --> 00:15:13.250
bring this down more into
the range of 5x.

00:15:13.250 --> 00:15:16.780
On the decoding side, we're
about 1.4, 1.5 times slower

00:15:16.780 --> 00:15:18.850
than JPEG to decode an image.

00:15:18.850 --> 00:15:21.480
But as you note here, one of
the things we see is that

00:15:21.480 --> 00:15:27.650
consistently, the bandwidth
savings more than make up for

00:15:27.650 --> 00:15:31.080
the increase in decoding time
on the client side.

00:15:31.080 --> 00:15:31.380
ILYA GRIGORIK: Right.

00:15:31.380 --> 00:15:32.800
So I guess there's a couple
points to make here.

00:15:32.800 --> 00:15:34.080
So first of all, these
numbers are

00:15:34.080 --> 00:15:35.550
decoding on the CPU, right?

00:15:35.550 --> 00:15:35.890
STEPHEN KONIG: Correct.

00:15:35.890 --> 00:15:37.590
ILYA GRIGORIK: So there's
hardware out there that will

00:15:37.590 --> 00:15:41.460
do hardware acceleration, for
example, for JPEG decodes.

00:15:41.460 --> 00:15:44.645
Nothing stops hardware from
being developed for the same

00:15:44.645 --> 00:15:44.750
thing for WebP.

00:15:44.750 --> 00:15:45.780
STEPHEN KONIG: Absolutely not.

00:15:45.780 --> 00:15:47.070
ILYA GRIGORIK: So it's a
question of adoption.

00:15:47.070 --> 00:15:48.140
It's the chicken and the egg.

00:15:48.140 --> 00:15:48.460
STEPHEN KONIG: It is.

00:15:48.460 --> 00:15:49.840
ILYA GRIGORIK: The more people
deploy WebP, the more

00:15:49.840 --> 00:15:52.710
incentive there is for device
manufacturers and chip makers

00:15:52.710 --> 00:15:54.490
to actually make those
really fast.

00:15:54.490 --> 00:15:56.755
And once they put it on silicon,
this thing's going to

00:15:56.755 --> 00:15:57.300
be really fast.

00:15:57.300 --> 00:15:58.400
STEPHEN KONIG: It's
going to scream.

00:15:58.400 --> 00:15:59.260
Absolutely.

00:15:59.260 --> 00:16:00.630
ILYA GRIGORIK: So there's
nothing that

00:16:00.630 --> 00:16:03.280
stops that moving forward.

00:16:03.280 --> 00:16:04.910
So there's one case here
that I think it's

00:16:04.910 --> 00:16:05.920
interesting to point out.

00:16:05.920 --> 00:16:09.540
So it does take a lot more
time to encode images.

00:16:09.540 --> 00:16:12.310
So if I have a service which is
generating a lot of dynamic

00:16:12.310 --> 00:16:14.550
images and I put Google Maps
here as a good example, right?

00:16:14.550 --> 00:16:15.790
STEPHEN KONIG: Great example.

00:16:15.790 --> 00:16:17.160
ILYA GRIGORIK: Generates
a lot of dynamic

00:16:17.160 --> 00:16:18.560
tiles, customized tiles.

00:16:18.560 --> 00:16:19.860
STEPHEN KONIG: Correct.

00:16:19.860 --> 00:16:21.890
So the important thing to note
about the encoding time is

00:16:21.890 --> 00:16:24.270
that that's a cost you're going
to spend once, versus

00:16:24.270 --> 00:16:26.210
the bandwidth savings you're
going to recoup on every

00:16:26.210 --> 00:16:27.660
single request.

00:16:27.660 --> 00:16:30.550
So in most cases, you're dealing
with static images and

00:16:30.550 --> 00:16:33.210
so to take a little bit extra
time to encode your images

00:16:33.210 --> 00:16:36.450
once is a cost that's
easy to pay for.

00:16:36.450 --> 00:16:38.190
There are cases, though, if
you're generating images

00:16:38.190 --> 00:16:40.550
dynamically, and Maps is
an example of that.

00:16:40.550 --> 00:16:43.010
They don't have static
map tile images.

00:16:43.010 --> 00:16:45.810
They generate those on the fly
based on your request.

00:16:45.810 --> 00:16:48.940
Where that cost can be pretty
significant and can be a

00:16:48.940 --> 00:16:50.110
barrier to adoption.

00:16:50.110 --> 00:16:52.200
So we think for the vast
majority of use cases out

00:16:52.200 --> 00:16:55.370
there where you have static
content, WebP is a perfect

00:16:55.370 --> 00:16:57.550
choice, but if you are doing
something a little more

00:16:57.550 --> 00:16:59.740
unique, you do have
to factor that in.

00:16:59.740 --> 00:17:01.850
ILYA GRIGORIK: As all things
performance, the answer is

00:17:01.850 --> 00:17:03.950
always measure it.

00:17:03.950 --> 00:17:06.849
So actually, in Chrome Dev
Tools, we've recently added

00:17:06.849 --> 00:17:09.890
support or in a Timeline Panel,
you can actually now

00:17:09.890 --> 00:17:15.010
see the JPEG and I think WebP
decoding times within there.

00:17:15.010 --> 00:17:16.330
So previously, that was
not available so

00:17:16.330 --> 00:17:17.190
you didn't even know.

00:17:17.190 --> 00:17:18.800
And sometimes you'd
be surprised.

00:17:18.800 --> 00:17:21.619
Decoding a large image can take
on the order of tens of

00:17:21.619 --> 00:17:23.140
milliseconds.

00:17:23.140 --> 00:17:25.680
So you can actually measure this
on your application and

00:17:25.680 --> 00:17:30.120
figure out if this is indeed
a problem for you.

00:17:30.120 --> 00:17:32.760
So we have actually a great
study which addresses this.

00:17:32.760 --> 00:17:35.160
But before we get there, I think
you made a very, very

00:17:35.160 --> 00:17:38.300
important point, which is it is
absolutely true that your

00:17:38.300 --> 00:17:41.380
mobile device may need more CPU
cycles to decode a WebP

00:17:41.380 --> 00:17:45.320
image versus a JPEG, which
that's slower.

00:17:45.320 --> 00:17:46.980
That's objectively slower.

00:17:46.980 --> 00:17:47.850
We can show that.

00:17:47.850 --> 00:17:53.000
But the fact that you ship fewer
bytes and the image is

00:17:53.000 --> 00:17:57.710
available to decode quicker on
the device actually outweighs

00:17:57.710 --> 00:17:58.200
the benefits.

00:17:58.200 --> 00:17:59.990
And in fact, for a lot
of people, data

00:17:59.990 --> 00:18:01.890
compression is a big deal.

00:18:01.890 --> 00:18:04.970
Data is literally expensive for
a lot of people, right?

00:18:04.970 --> 00:18:07.210
And that is a huge, huge win.

00:18:07.210 --> 00:18:09.130
STEPHEN KONIG: Especially in
emerging markets in areas

00:18:09.130 --> 00:18:14.280
where infrastructure is not
quite as built out, that's a

00:18:14.280 --> 00:18:16.320
huge issue for a
lot of people.

00:18:16.320 --> 00:18:19.180
And so that's definitely
something to be aware of.

00:18:19.180 --> 00:18:20.300
ILYA GRIGORIK: Exactly.

00:18:20.300 --> 00:18:24.630
So this is an awesome case study
that the eBay guys did,

00:18:24.630 --> 00:18:26.980
actually just recently, I think
a couple of weeks ago or

00:18:26.980 --> 00:18:30.100
last week even, where they
looked at a number of

00:18:30.100 --> 00:18:33.000
suggestions for, how do
we optimize images.

00:18:33.000 --> 00:18:35.800
And one of the things they
considered was WebP.

00:18:35.800 --> 00:18:38.910
So they set up this test where
they basically had just 50

00:18:38.910 --> 00:18:44.970
images on one page, and they
had JPEGs and WebPs.

00:18:44.970 --> 00:18:47.950
And then they used WebPagetest
to show how the

00:18:47.950 --> 00:18:49.150
page is being rendered.

00:18:49.150 --> 00:18:51.570
So this graph on the left here
actually shows you the visual

00:18:51.570 --> 00:18:52.840
rendering progress.

00:18:52.840 --> 00:18:57.640
And you can see that WebP
actually beats JPEG across the

00:18:57.640 --> 00:19:00.310
board such that the images are
actually visible quicker.

00:19:00.310 --> 00:19:02.850
So let me actually switch
to this view.

00:19:02.850 --> 00:19:04.650
And if you guys are not familiar
with WebPagetest, I

00:19:04.650 --> 00:19:06.420
would definitely encourage
you to play with it.

00:19:06.420 --> 00:19:07.780
So let's go to the beginning.

00:19:07.780 --> 00:19:11.720
Basically, we're seeing a
100-milisecond frame by frame,

00:19:11.720 --> 00:19:13.050
as the browser renders it.

00:19:13.050 --> 00:19:14.920
So we start loading images.

00:19:14.920 --> 00:19:17.650
About a half second in, we start
rendering something.

00:19:17.650 --> 00:19:20.680
And so far, it looks like it's
they're competitive,

00:19:20.680 --> 00:19:22.090
both WebP and JPEG.

00:19:22.090 --> 00:19:25.160
But you scroll a little bit
further, like 200 milliseconds

00:19:25.160 --> 00:19:27.760
later, and you can see that a
whole bunch of WebP images

00:19:27.760 --> 00:19:31.650
have fully loaded, more getting
pulled in, et cetera.

00:19:35.070 --> 00:19:38.440
That's what this graph
here is showing you.

00:19:38.440 --> 00:19:42.340
Yes, you spent more CPU time,
but the actual time to glass,

00:19:42.340 --> 00:19:46.200
if you will, pixels visible on
the screen for WebP is better

00:19:46.200 --> 00:19:47.810
because we're transferring
fewer bytes.

00:19:47.810 --> 00:19:48.370
STEPHEN KONIG: Exactly.

00:19:48.370 --> 00:19:50.990
And I think it's important
to note there that what's

00:19:50.990 --> 00:19:53.220
important to be able to measure
is what the end user

00:19:53.220 --> 00:19:54.470
perception as.

00:19:54.470 --> 00:19:57.720
End users don't care about how
much time is taken up in CPU

00:19:57.720 --> 00:19:59.390
versus how much time is taken
up transmitting bytes.

00:19:59.390 --> 00:20:01.970
What they care about is, how
fast does this thing load, and

00:20:01.970 --> 00:20:03.730
how fast can I see it?

00:20:03.730 --> 00:20:07.140
And that's where WebP clearly,
in this example, shines.

00:20:07.140 --> 00:20:08.900
Even though we're spending a
little more time on one part

00:20:08.900 --> 00:20:11.130
of the process, we're spending
far less in another and the

00:20:11.130 --> 00:20:12.480
net effect is definitely
positive.

00:20:12.480 --> 00:20:15.220
ILYA GRIGORIK: So hopefully by
shipping fewer bytes and

00:20:15.220 --> 00:20:18.206
making the decoding faster in
the future, especially if we

00:20:18.206 --> 00:20:20.400
can offload it to the
hardware, it's a

00:20:20.400 --> 00:20:21.160
win across the board.

00:20:21.160 --> 00:20:21.680
STEPHEN KONIG: Correct.

00:20:21.680 --> 00:20:23.050
ILYA GRIGORIK: So I definitely
encourage you guys.

00:20:23.050 --> 00:20:26.950
I'll share the slides after or
just go to eBay tech blog--

00:20:26.950 --> 00:20:30.640
I think it's still one of their
top posts, and look

00:20:30.640 --> 00:20:33.770
through this example.

00:20:33.770 --> 00:20:36.800
So where are we in terms
of adoption?

00:20:36.800 --> 00:20:38.000
STEPHEN KONIG: So we're
seeing really

00:20:38.000 --> 00:20:39.150
good progress on adoption.

00:20:39.150 --> 00:20:40.900
Keeping in mind that we started
this a little over two

00:20:40.900 --> 00:20:43.410
years ago with nothing,
I think we're

00:20:43.410 --> 00:20:45.210
making really good progress.

00:20:45.210 --> 00:20:47.970
So on mobile, I think we have
a really great story across

00:20:47.970 --> 00:20:49.230
Android and iOS.

00:20:49.230 --> 00:20:52.710
So Android supports
WebP today.

00:20:52.710 --> 00:20:57.025
We added lossy support in Ice
Cream Sandwich release, and

00:20:57.025 --> 00:21:00.340
then lossless has been
added in Jelly Bean.

00:21:00.340 --> 00:21:03.170
In addition with iOS, we have
libraries available.

00:21:03.170 --> 00:21:06.810
So if you're building a native
app for iOS, you can take

00:21:06.810 --> 00:21:09.340
advantage of WebP in
your native app.

00:21:09.340 --> 00:21:13.070
On the desktop side, Chrome and
Opera both support WebP.

00:21:13.070 --> 00:21:16.470
And then for IE, Safari, and
Firefox, we're working with

00:21:16.470 --> 00:21:19.580
them and we hope to get to
support it natively in the

00:21:19.580 --> 00:21:20.630
near future.

00:21:20.630 --> 00:21:22.180
But in the meantime, there
are solutions available.

00:21:22.180 --> 00:21:27.340
So for IE, you can use Chrome
Frame or JavaScript, and then

00:21:27.340 --> 00:21:28.950
Safari, either a plug-in
or JavaScript.

00:21:28.950 --> 00:21:31.250
And then Firefox, we've
submitted a patch to Mozilla.

00:21:31.250 --> 00:21:32.690
We continue to discuss
with them about

00:21:32.690 --> 00:21:33.845
adding support for WebP.

00:21:33.845 --> 00:21:35.750
I think they're receptive
to it.

00:21:35.750 --> 00:21:40.890
They're sort of waiting for
indications of further

00:21:40.890 --> 00:21:43.360
adoption on the community,
which we're making great

00:21:43.360 --> 00:21:43.860
progress on.

00:21:43.860 --> 00:21:47.500
So I'm hopeful we'll see that
adopted natively there in the

00:21:47.500 --> 00:21:48.290
near future.

00:21:48.290 --> 00:21:48.640
ILYA GRIGORIK: Right.

00:21:48.640 --> 00:21:51.830
So I think an important point
to make here is something we

00:21:51.830 --> 00:21:54.260
were talking about with the WebP
team, which is for the

00:21:54.260 --> 00:21:56.780
last two years, you guys have
been focused on developing the

00:21:56.780 --> 00:21:58.530
format first and foremost,
right?

00:21:58.530 --> 00:22:01.650
It's been basically engineers
heads down, like we need these

00:22:01.650 --> 00:22:04.060
features to meet
these criteria.

00:22:04.060 --> 00:22:04.840
STEPHEN KONIG: Exactly.

00:22:04.840 --> 00:22:08.410
ILYA GRIGORIK: And although we
have built some tooling and

00:22:08.410 --> 00:22:10.950
infrastructure, that wasn't
the number one priority.

00:22:10.950 --> 00:22:14.090
Basically, we needed to get the
format to a place where it

00:22:14.090 --> 00:22:15.650
fulfilled its role, right?

00:22:15.650 --> 00:22:16.030
STEPHEN KONIG: Correct.

00:22:16.030 --> 00:22:18.580
ILYA GRIGORIK: And I think we've
kind of arrived at that

00:22:18.580 --> 00:22:20.140
by the end of 2012.

00:22:20.140 --> 00:22:21.430
STEPHEN KONIG: I think we
exactly have, and that's a

00:22:21.430 --> 00:22:23.290
great way to characterize it.

00:22:23.290 --> 00:22:26.330
The initial years of WebP were
really focused on building out

00:22:26.330 --> 00:22:28.450
the feature set and making sure
that we had something

00:22:28.450 --> 00:22:31.160
that was a good replacement
option for these different

00:22:31.160 --> 00:22:32.150
image formats.

00:22:32.150 --> 00:22:34.990
We've done that work now, and
so really the focus for us

00:22:34.990 --> 00:22:37.585
this year is pushing hard on
adoption and optimization.

00:22:37.585 --> 00:22:38.040
ILYA GRIGORIK: Right.

00:22:38.040 --> 00:22:40.440
So it sounds like there's a new
release coming, literally

00:22:40.440 --> 00:22:41.280
maybe a couple weeks away.

00:22:41.280 --> 00:22:43.070
STEPHEN KONIG: A week to two.

00:22:43.070 --> 00:22:44.330
ILYA GRIGORIK: Fingers
crossed.

00:22:44.330 --> 00:22:47.460
And following that, I'm hoping
that we'll actually invest

00:22:47.460 --> 00:22:51.250
into more of the infrastructure,
the tooling,

00:22:51.250 --> 00:22:53.740
and everything to make authoring
WebP easier,

00:22:53.740 --> 00:22:54.670
employing it easier.

00:22:54.670 --> 00:22:56.660
STEPHEN KONIG: Exactly.

00:22:56.660 --> 00:23:01.220
ILYA GRIGORIK: So we have, I
guess, a couple of points to

00:23:01.220 --> 00:23:01.830
make here as well.

00:23:01.830 --> 00:23:03.080
We'll talk about tooling
in a second.

00:23:03.080 --> 00:23:06.580
But Android and iOS,
ready to go.

00:23:06.580 --> 00:23:08.690
In fact, it's actually probably
easier to deploy WebP

00:23:08.690 --> 00:23:13.680
today on native platforms, on
Android and iOS, than it is on

00:23:13.680 --> 00:23:16.330
the web to some degree, although
it's still definitely

00:23:16.330 --> 00:23:20.710
doable on the web, and we will
talk about how to do that.

00:23:20.710 --> 00:23:24.570
There is kind of a crazy
plug-in in JavaScript.

00:23:24.570 --> 00:23:27.010
So we talked about
slower decoding.

00:23:27.010 --> 00:23:30.990
So in fact, you can pull in this
JavaScript snippet which

00:23:30.990 --> 00:23:33.240
will do WebP decoding
on the client.

00:23:33.240 --> 00:23:38.560
So if you absolutely must have a
fall back for a browser that

00:23:38.560 --> 00:23:40.810
does not understand WebP,
you can always use that.

00:23:40.810 --> 00:23:41.800
STEPHEN KONIG: Correct.

00:23:41.800 --> 00:23:45.570
And I think that's an option
that even if Microsoft

00:23:45.570 --> 00:23:47.980
tomorrow decides to support
WebP, that's probably going to

00:23:47.980 --> 00:23:49.420
be in IE 11.

00:23:49.420 --> 00:23:51.600
And so for some long period of
time, you're going to have all

00:23:51.600 --> 00:23:53.260
these older IE versions
that don't.

00:23:53.260 --> 00:23:56.230
And so even when we get to
native support across all

00:23:56.230 --> 00:23:58.860
these different browsers, as a
web developer, you still have

00:23:58.860 --> 00:24:01.060
to be conscious of the fact
there are going to be users on

00:24:01.060 --> 00:24:03.630
older browsers that can't
support WebP, and so you do

00:24:03.630 --> 00:24:05.360
need a fallback option.

00:24:05.360 --> 00:24:08.330
ILYA GRIGORIK: And maybe the
last point to make here is

00:24:08.330 --> 00:24:10.485
Opera has been supporting this
for a long time because

00:24:10.485 --> 00:24:11.790
they've actually been
using WebP.

00:24:11.790 --> 00:24:15.070
So if you guys are familiar with
the Opera Turbo browser,

00:24:15.070 --> 00:24:17.810
which does content optimization,
in fact, one of

00:24:17.810 --> 00:24:20.270
the main things it does
is optimize images.

00:24:20.270 --> 00:24:24.990
And by optimize images, I mean
transcode everything to WebP.

00:24:24.990 --> 00:24:28.990
And that gives you huge savings,
which is why Opera

00:24:28.990 --> 00:24:31.470
Turbo is such a great browser
for a lot of people.

00:24:31.470 --> 00:24:32.960
Bandwidth is expensive.

00:24:32.960 --> 00:24:33.840
WebP helps.

00:24:33.840 --> 00:24:34.500
STEPHEN KONIG: Correct.

00:24:34.500 --> 00:24:37.480
ILYA GRIGORIK: And then on the
Firefox side, I've been

00:24:37.480 --> 00:24:39.000
following the conversation
there and

00:24:39.000 --> 00:24:40.680
it seems very promising.

00:24:40.680 --> 00:24:43.790
I think we're going to see
something happen in 2013,

00:24:43.790 --> 00:24:45.580
especially as we focus
more on adoption.

00:24:45.580 --> 00:24:46.080
STEPHEN KONIG: Correct.

00:24:46.080 --> 00:24:49.520
I think that's really the key
thing that they've asked for,

00:24:49.520 --> 00:24:51.560
and I think we're going
to deliver that.

00:24:51.560 --> 00:24:52.980
As I said, they've been
very receptive

00:24:52.980 --> 00:24:54.480
to it, so I'm hopeful.

00:24:54.480 --> 00:24:57.650
ILYA GRIGORIK: So speaking
of adoption, Google.

00:24:57.650 --> 00:24:58.440
WebP.

00:24:58.440 --> 00:24:59.585
Where are we?

00:24:59.585 --> 00:25:00.600
Are we dog fooding?

00:25:00.600 --> 00:25:02.230
STEPHEN KONIG: Eating our own
dog food, as it were.

00:25:02.230 --> 00:25:03.240
Yes, we are.

00:25:03.240 --> 00:25:05.690
So as we talked about adoption,
one of the things

00:25:05.690 --> 00:25:07.890
that we've really been gearing
up over the past couple

00:25:07.890 --> 00:25:10.340
months-- and you'll see us
making a lot of progress on

00:25:10.340 --> 00:25:11.680
this throughout the
rest of this year

00:25:11.680 --> 00:25:13.020
and into early next--

00:25:13.020 --> 00:25:15.850
is adopting WebP across
all Google properties.

00:25:15.850 --> 00:25:19.060
So we have it adopted across a
number today, and in fact,

00:25:19.060 --> 00:25:22.350
Chrome Web Store launched not
too long ago with WebP Images.

00:25:22.350 --> 00:25:24.660
There's a great blog post out
on the Chromium blog about

00:25:24.660 --> 00:25:27.100
some of the results that
we saw from that.

00:25:27.100 --> 00:25:32.030
But literally, we're saving
many terabytes per day of

00:25:32.030 --> 00:25:35.110
bytes by using WebP over JPEG.

00:25:35.110 --> 00:25:39.060
We were able to cut the page
load time by about a third, so

00:25:39.060 --> 00:25:42.030
it was a huge win for
that team and makes

00:25:42.030 --> 00:25:43.550
a great case study.

00:25:43.550 --> 00:25:46.670
Across the rest of Google, we
have support today in Gmail,

00:25:46.670 --> 00:25:49.310
Drive, and Docs, Picasa.

00:25:49.310 --> 00:25:50.230
G+ supports it.

00:25:50.230 --> 00:25:52.650
If you upload WebP, you'll
get WebP back.

00:25:52.650 --> 00:25:55.850
And then we're going to be
launching the Google Play

00:25:55.850 --> 00:25:56.740
Magazines Reader soon.

00:25:56.740 --> 00:25:58.600
That's going to support WebP.

00:25:58.600 --> 00:26:01.650
So there's a number of things
that are supporting it.

00:26:01.650 --> 00:26:03.600
And we're working actively with
a bunch of other teams.

00:26:03.600 --> 00:26:06.580
So for example, we're working
with Image Search and doing an

00:26:06.580 --> 00:26:08.120
evaluation and experiment
right now.

00:26:08.120 --> 00:26:11.030
As you can imagine, it's a
pretty heavily used production

00:26:11.030 --> 00:26:13.410
service so you don't
just flip a switch.

00:26:13.410 --> 00:26:16.890
We have to go through a whole
process of validating that

00:26:16.890 --> 00:26:18.990
everything's going to work well,
but we're working very

00:26:18.990 --> 00:26:20.700
well with that team, and I think
you'll see that rolling

00:26:20.700 --> 00:26:21.360
out later this year.

00:26:21.360 --> 00:26:23.400
ILYA GRIGORIK: So it sounds like
in a year's time, if we

00:26:23.400 --> 00:26:27.690
were to have a 2014 episode of
this, looking back, I think

00:26:27.690 --> 00:26:29.710
we'll look back on all the
Google properties and we'll

00:26:29.710 --> 00:26:31.660
say, yes, all of them
support WebP.

00:26:31.660 --> 00:26:34.600
Or at least that is our goal, or
the goal for the team, and

00:26:34.600 --> 00:26:36.020
we're working with
all of them.

00:26:36.020 --> 00:26:37.400
STEPHEN KONIG: We're
working hard.

00:26:37.400 --> 00:26:40.320
And so far, we're seeing great
results across the board.

00:26:40.320 --> 00:26:41.900
ILYA GRIGORIK: I think every
single team that has deployed

00:26:41.900 --> 00:26:44.850
it always has a case study for
us, which is we either saved a

00:26:44.850 --> 00:26:47.700
ton of bandwidth, or we
decreased page load time.

00:26:47.700 --> 00:26:49.730
Usually it's both because
they go hand in hand.

00:26:49.730 --> 00:26:50.900
STEPHEN KONIG: Correct.

00:26:50.900 --> 00:26:51.460
ILYA GRIGORIK: That's awesome.

00:26:51.460 --> 00:26:53.890
And I guess it's also worth
pointing out that there's

00:26:53.890 --> 00:26:56.160
actually quite a few third
party services and sites

00:26:56.160 --> 00:26:58.490
outside of Google that
are using WebP today.

00:26:58.490 --> 00:27:02.160
So one example that I'm most
familiar with is, of course,

00:27:02.160 --> 00:27:03.310
the PageSpeed products.

00:27:03.310 --> 00:27:06.070
So PageSpeed Service and the
open source projects, the Mod

00:27:06.070 --> 00:27:09.420
PageSpeed and NginX PageSpeed
will actually optimize your

00:27:09.420 --> 00:27:11.700
images for you if you
install it in your

00:27:11.700 --> 00:27:13.290
Apache or NginX server.

00:27:13.290 --> 00:27:16.910
And we have over 300,000 sites
that are using these products.

00:27:16.910 --> 00:27:19.920
So the users to those sites
are actually getting WebP

00:27:19.920 --> 00:27:22.480
files, and we'll talk about
how that's actually

00:27:22.480 --> 00:27:23.530
done under the hood.

00:27:23.530 --> 00:27:28.130
So that's open source, and
there are also commercial

00:27:28.130 --> 00:27:31.820
vendors like Torbit and
EdgeCast, so commercial CDNs,

00:27:31.820 --> 00:27:35.520
which will do this WebP
optimization for you as well.

00:27:35.520 --> 00:27:37.100
So there's growing adoption
for this thing.

00:27:37.100 --> 00:27:43.220
And I think it very much
goes into the general

00:27:43.220 --> 00:27:44.980
offering of any CDN.

00:27:44.980 --> 00:27:47.980
They want to optimize the
web for their customers.

00:27:47.980 --> 00:27:52.080
And optimizing images, as we
saw, 70% of the bytes, is the

00:27:52.080 --> 00:27:54.620
number one area.

00:27:54.620 --> 00:27:56.380
So I think we're going to see
more and more of this.

00:27:56.380 --> 00:27:58.500
And I think automation is
actually one of the easiest

00:27:58.500 --> 00:28:01.980
ways to get there, which is why
if you haven't looked at

00:28:01.980 --> 00:28:04.700
something like PageSpeed or
EdgeCast or one of these

00:28:04.700 --> 00:28:07.920
products, definitely
check it out.

00:28:07.920 --> 00:28:10.150
So let's talk about tooling
and deployment, right?

00:28:10.150 --> 00:28:11.200
Great.

00:28:11.200 --> 00:28:12.380
Format's awesome.

00:28:12.380 --> 00:28:15.230
I've got a whole lot
of JPEGs and PNGs.

00:28:15.230 --> 00:28:19.720
How does one go about
creating WebPs?

00:28:19.720 --> 00:28:22.100
STEPHEN KONIG: Well, the fastest
[INAUDIBLE] way to do

00:28:22.100 --> 00:28:26.380
it is to download the WebP
libraries, and you just run a

00:28:26.380 --> 00:28:28.020
command line and basically
give it a whole bunch of

00:28:28.020 --> 00:28:30.350
source images and some parameter
options, and it's

00:28:30.350 --> 00:28:31.870
going to spit out
WebP for you.

00:28:31.870 --> 00:28:33.490
So that's the quick and
dirty way to do it.

00:28:33.490 --> 00:28:36.990
ILYA GRIGORIK: So that's the C
WebP, so the encoder, I guess.

00:28:36.990 --> 00:28:39.500
And if I just want to
run this on, like, I

00:28:39.500 --> 00:28:42.210
have a folder of files.

00:28:42.210 --> 00:28:45.190
Do I need to worry about
a whole bunch of knobs?

00:28:45.190 --> 00:28:47.150
Do you provide sane defaults?

00:28:47.150 --> 00:28:48.590
Basically, what should
I be considering?

00:28:48.590 --> 00:28:50.270
STEPHEN KONIG: We definitely
provide sane defaults.

00:28:50.270 --> 00:28:53.220
If you want to just run it
blindly on a bunch of images

00:28:53.220 --> 00:28:55.760
you have in a folder, you're
more than welcome to do that.

00:28:55.760 --> 00:28:57.660
It's definitely the case that if
you want to dive and tweak

00:28:57.660 --> 00:28:59.870
and adjust things, you're
welcome do that, too.

00:28:59.870 --> 00:29:01.760
But we try to make it
as easy as possible.

00:29:01.760 --> 00:29:02.980
ILYA GRIGORIK: So there's
actually a couple of tools to

00:29:02.980 --> 00:29:03.950
experiment with these files.

00:29:03.950 --> 00:29:07.700
And maybe one thing worth
calling out is for example,

00:29:07.700 --> 00:29:10.240
JPEGs have their own artifacts
when you compress them.

00:29:10.240 --> 00:29:12.570
You get funny behaviors or
funny look in the image.

00:29:12.570 --> 00:29:14.360
WebP is a different compression
format, which

00:29:14.360 --> 00:29:16.680
means that you're going to get
slightly different artifacts,

00:29:16.680 --> 00:29:20.020
and those could work in your
favor or against you.

00:29:20.020 --> 00:29:22.900
So it's probably worth
experimenting in a little bit

00:29:22.900 --> 00:29:25.270
and seeing what is the
quality that, for

00:29:25.270 --> 00:29:26.580
example, I should be using?

00:29:26.580 --> 00:29:27.500
What is acceptable?

00:29:27.500 --> 00:29:28.130
STEPHEN KONIG: Definitely.

00:29:28.130 --> 00:29:29.590
Well, it's one of the things
you want to look at because

00:29:29.590 --> 00:29:31.950
obviously, with lower quality,
you get smaller file sizes.

00:29:31.950 --> 00:29:35.420
So as you're trying to improve
speed, that's a knob you can

00:29:35.420 --> 00:29:37.540
tweak that will definitely
have an impact.

00:29:37.540 --> 00:29:38.070
But you're right.

00:29:38.070 --> 00:29:39.590
As you lower the quality,
you're going to get more

00:29:39.590 --> 00:29:41.140
compression artifacts.

00:29:41.140 --> 00:29:43.610
And the kinds of artifacts you
see between JPEG and WebP are

00:29:43.610 --> 00:29:45.650
different, especially as you get
into lower quality levels.

00:29:45.650 --> 00:29:48.980
So you do need to do visual
comparison at that level to

00:29:48.980 --> 00:29:53.310
understand, am I comfortable
with the kinds of artifacts

00:29:53.310 --> 00:29:54.750
I'm seeing in these images?

00:29:54.750 --> 00:29:56.550
ILYA GRIGORIK: So that's
something to experiment with.

00:29:56.550 --> 00:29:58.010
And I guess the one link--

00:29:58.010 --> 00:30:00.940
I put a couple of examples here
of the different plug-ins

00:30:00.940 --> 00:30:03.170
that you can install, for
example, the WebP Codec for

00:30:03.170 --> 00:30:05.960
Windows, which was developed
by you guys, right?

00:30:05.960 --> 00:30:09.250
Which means you can just view
your WebP files natively

00:30:09.250 --> 00:30:10.990
within Explorer and
all the rest.

00:30:10.990 --> 00:30:12.240
There's Photoshop plug-ins.

00:30:12.240 --> 00:30:15.370
But first and foremost,
actually, the WebP page on

00:30:15.370 --> 00:30:18.700
Wikipedia has a fairly extensive
list of all the

00:30:18.700 --> 00:30:19.600
tools that support it.

00:30:19.600 --> 00:30:22.540
So if you're not sure, go there
and just search for

00:30:22.540 --> 00:30:24.480
whatever tool you're using.

00:30:24.480 --> 00:30:26.500
So that's a good tip.

00:30:26.500 --> 00:30:29.980
And then the other thing is if
you go on GitHub and just

00:30:29.980 --> 00:30:31.650
search for WebP, you'll
actually find language

00:30:31.650 --> 00:30:35.110
bindings for virtually every
major platform that I've

00:30:35.110 --> 00:30:36.510
looked for, at least.

00:30:36.510 --> 00:30:39.970
So if you have a build step or
some sort of automation, you

00:30:39.970 --> 00:30:42.160
can pull that in, and you can
actually automate this

00:30:42.160 --> 00:30:44.270
entirely on the back end such
that you don't even have to

00:30:44.270 --> 00:30:45.890
worry about it, which
is great.

00:30:45.890 --> 00:30:49.990
And then kind of a fun tool that
popped up just recently,

00:30:49.990 --> 00:30:51.720
so IMG2WebP.net.

00:30:51.720 --> 00:30:55.200
So this is not something that
you should use for like, I'm

00:30:55.200 --> 00:30:57.110
going to convert all my
images using this.

00:30:57.110 --> 00:31:01.070
But if you're just curious and
without downloading the WebP

00:31:01.070 --> 00:31:03.790
libraries or what have you, you
just want to play with it,

00:31:03.790 --> 00:31:04.870
this is a good tool.

00:31:04.870 --> 00:31:06.530
So I'll show you an example.

00:31:06.530 --> 00:31:10.120
I have an image file here,
so just a photo which

00:31:10.120 --> 00:31:12.470
I saved as a PNG.

00:31:12.470 --> 00:31:16.160
This is my lossless
lossy format.

00:31:16.160 --> 00:31:17.920
Beautiful image.

00:31:17.920 --> 00:31:21.870
I'm just going to grab it and
drag it into this page.

00:31:21.870 --> 00:31:24.005
And it is actually doing
the optimization.

00:31:24.005 --> 00:31:26.240
So it actually picked a bunch
of defaults for me.

00:31:26.240 --> 00:31:28.640
You can actually click on Band
Settings and play with the

00:31:28.640 --> 00:31:29.700
different filters.

00:31:29.700 --> 00:31:31.900
So it gives you this
.WebP file.

00:31:31.900 --> 00:31:33.230
Let's open that.

00:31:33.230 --> 00:31:35.820
And that looks the same,
so that's good.

00:31:39.430 --> 00:31:41.710
And what I want to see
is the file size.

00:31:41.710 --> 00:31:45.280
So the file size is 42 kilobytes
for this file.

00:31:45.280 --> 00:31:47.520
Let's go back to the original.

00:31:47.520 --> 00:31:49.760
837.

00:31:49.760 --> 00:31:50.770
That's a bit of a
a difference.

00:31:50.770 --> 00:31:52.140
STEPHEN KONIG: It's a
bit of a difference.

00:31:52.140 --> 00:31:54.660
ILYA GRIGORIK: So this is an
example of both picking the

00:31:54.660 --> 00:31:59.810
right format for the file, and
also having a format that

00:31:59.810 --> 00:32:00.610
compresses well.

00:32:00.610 --> 00:32:01.610
STEPHEN KONIG: Exactly.

00:32:01.610 --> 00:32:04.760
ILYA GRIGORIK: So I'm sure if we
compared a JPEG version to

00:32:04.760 --> 00:32:06.970
WebP, it wouldn't be as dramatic
of a difference, but

00:32:06.970 --> 00:32:10.750
nonetheless, WebP would give
you a nice byte savings.

00:32:10.750 --> 00:32:13.230
So unfortunately, this is a very
common pattern, people

00:32:13.230 --> 00:32:17.440
saving what should be a JPEG,
or ideally WebP, as a PNG.

00:32:17.440 --> 00:32:18.790
STEPHEN KONIG: Yes,
it happens a lot.

00:32:23.010 --> 00:32:24.320
ILYA GRIGORIK: So let's
talk a little bit

00:32:24.320 --> 00:32:25.940
about Android and iOS.

00:32:25.940 --> 00:32:28.020
We're not going to go into
too much detail.

00:32:28.020 --> 00:32:29.410
As I said, I'm going to share
the slides later.

00:32:29.410 --> 00:32:31.540
So this is more as
a reference.

00:32:31.540 --> 00:32:34.080
I just wanted to show that it's
actually very simple if

00:32:34.080 --> 00:32:36.630
you're writing a native
app to integrate WebP.

00:32:36.630 --> 00:32:40.660
So we mentioned that Android 4.0
ships natively with WebP

00:32:40.660 --> 00:32:44.110
support, so you load
the library and

00:32:44.110 --> 00:32:44.910
you decode the image.

00:32:44.910 --> 00:32:46.220
Is just a bitmap.

00:32:46.220 --> 00:32:47.610
And that's it.

00:32:47.610 --> 00:32:48.710
That's effectively all
there is to it.

00:32:48.710 --> 00:32:51.200
It's identical to
anything else.

00:32:51.200 --> 00:32:55.290
One thing that's worth
mentioning is we ship native

00:32:55.290 --> 00:32:59.560
support in 4.0 plus, but there's
a great project on

00:32:59.560 --> 00:33:01.850
GitHub where somebody did a back
port, so for the older

00:33:01.850 --> 00:33:02.960
versions of Android.

00:33:02.960 --> 00:33:04.890
So you can pull that
in if you need to.

00:33:04.890 --> 00:33:08.020
And there's a lot older Android
devices out there,

00:33:08.020 --> 00:33:11.670
unfortunately, so that's
a handy thing to have.

00:33:11.670 --> 00:33:13.380
And then for iOS, same thing.

00:33:13.380 --> 00:33:15.670
You guys actually provide
the iOS framework.

00:33:15.670 --> 00:33:16.190
STEPHEN KONIG: We do.

00:33:16.190 --> 00:33:21.290
ILYA GRIGORIK: So if you
download the library, I guess,

00:33:21.290 --> 00:33:23.700
you can actually compile
it, and you get the

00:33:23.700 --> 00:33:26.760
WebP.framework, which you can
include in your iOS project

00:33:26.760 --> 00:33:28.260
and then go from there.

00:33:28.260 --> 00:33:30.020
And if you look at the code,
it's effectively the same

00:33:30.020 --> 00:33:32.570
thing as we saw previously.

00:33:32.570 --> 00:33:34.360
There's a great tutorial
on this.

00:33:34.360 --> 00:33:36.400
If you just search for
WebP iOS, there's a

00:33:36.400 --> 00:33:37.670
couple great write ups.

00:33:37.670 --> 00:33:41.530
And likewise, there is a really
nice project sitting on

00:33:41.530 --> 00:33:48.280
GitHub, which is actually a
pre-built, or pre-made iOS app

00:33:48.280 --> 00:33:49.360
which includes WebP.

00:33:49.360 --> 00:33:52.130
So you can just download that,
build it, run it, see how it

00:33:52.130 --> 00:33:56.340
works, and adjust it as you
need it kind of thing.

00:33:59.000 --> 00:34:01.770
So that's the native side.

00:34:01.770 --> 00:34:04.270
I'm going to claim that that
one is actually easier.

00:34:04.270 --> 00:34:05.090
STEPHEN KONIG: It is today.

00:34:05.090 --> 00:34:06.110
You're right.

00:34:06.110 --> 00:34:08.870
ILYA GRIGORIK: WebP on the
web is a little bit more

00:34:08.870 --> 00:34:10.960
complicated, but it's
still doable.

00:34:10.960 --> 00:34:14.440
So there's a couple different
strategies basically.

00:34:14.440 --> 00:34:18.940
There is client side and server
side, and there are

00:34:18.940 --> 00:34:21.860
cons and pros to each
one, unfortunately.

00:34:21.860 --> 00:34:25.170
And ideally, you probably need
both to make them work well.

00:34:25.170 --> 00:34:28.090
So let's work through
an example.

00:34:28.090 --> 00:34:32.040
We have an awesome WebP file
which we want to serve, and

00:34:32.040 --> 00:34:35.260
basically, the difference here
is that some user agents-- for

00:34:35.260 --> 00:34:36.600
example, Internet Explorer--

00:34:36.600 --> 00:34:38.880
does not natively
understand WebP.

00:34:38.880 --> 00:34:41.170
If the user has Chrome
Frame installed,

00:34:41.170 --> 00:34:42.290
they will render WebP.

00:34:42.290 --> 00:34:44.179
But if they don't, they
can't do that.

00:34:44.179 --> 00:34:45.530
Same thing for Firefox.

00:34:45.530 --> 00:34:49.670
So basically, depending on which
browser comes to our

00:34:49.670 --> 00:34:52.460
page or loads an image, we need
to decide which image

00:34:52.460 --> 00:34:55.710
we're going to serve,
a JPEG or a WebP.

00:34:55.710 --> 00:34:58.630
So this in itself actually
creates another concern for

00:34:58.630 --> 00:35:02.060
some people, which is I also
need to duplicate my storage.

00:35:02.060 --> 00:35:05.380
I need to have both files,
which is true.

00:35:05.380 --> 00:35:09.380
But we find, at least in all of
our case studies at Google,

00:35:09.380 --> 00:35:12.420
that this is definitely a
worthwhile investment because

00:35:12.420 --> 00:35:14.270
it gives such a better
experience to the user.

00:35:14.270 --> 00:35:14.680
STEPHEN KONIG: Correct.

00:35:14.680 --> 00:35:16.680
And I think the thing I'd point
out on that is it's a

00:35:16.680 --> 00:35:21.020
question of who should be paying
the cost and where is

00:35:21.020 --> 00:35:22.220
that best paid for?

00:35:22.220 --> 00:35:24.780
And I would argue that it's
better paid for on the part of

00:35:24.780 --> 00:35:27.650
the web developer and
the site author.

00:35:27.650 --> 00:35:30.830
It's better for them to pay for
a little bit more storage

00:35:30.830 --> 00:35:33.580
and some more memory for the
cache than it is to ask every

00:35:33.580 --> 00:35:36.080
single user who hits your
page to spend more time

00:35:36.080 --> 00:35:38.190
downloading, and potentially
more money on bandwidth if

00:35:38.190 --> 00:35:39.035
they're on mobile.

00:35:39.035 --> 00:35:39.350
ILYA GRIGORIK: Exactly.

00:35:39.350 --> 00:35:42.640
And of course, as the adoption
grows, this also becomes less

00:35:42.640 --> 00:35:45.590
of a problem.

00:35:45.590 --> 00:35:50.050
So for example, for client side
detection, Modernizer

00:35:50.050 --> 00:35:51.500
actually has a test for WebP.

00:35:51.500 --> 00:35:54.110
So if you have your client side
code, you can actually

00:35:54.110 --> 00:35:58.720
just say, Modernizer.webp, and
then if it's enabled, you can

00:35:58.720 --> 00:36:00.790
schedule an image download
that way.

00:36:00.790 --> 00:36:05.330
And if the test fails, you can
actually fall back even to the

00:36:05.330 --> 00:36:10.780
JavaScript include, or you
can schedule your JPEGs.

00:36:10.780 --> 00:36:12.660
So either one works.

00:36:12.660 --> 00:36:15.270
And the benefits of
this is it'll

00:36:15.270 --> 00:36:17.360
work across all browsers.

00:36:17.360 --> 00:36:20.500
This code will run in Chrome
just as well as in IE and

00:36:20.500 --> 00:36:21.590
everything else.

00:36:21.590 --> 00:36:26.000
The trouble with this is because
in this example here

00:36:26.000 --> 00:36:28.890
I'm actually creating the image
tag via JavaScript, it

00:36:28.890 --> 00:36:32.850
means that I need to download
the HTML, download this

00:36:32.850 --> 00:36:34.960
JavaScript, execute JavaScript,
and only then will

00:36:34.960 --> 00:36:38.120
the image be scheduled, whereas
the browsers today are

00:36:38.120 --> 00:36:40.590
very, very good at scheduling
things as quickly

00:36:40.590 --> 00:36:42.540
as possible up front.

00:36:42.540 --> 00:36:45.120
So that's kind of the trade
off that we have here.

00:36:45.120 --> 00:36:46.900
So that's one thing
to keep in mind.

00:36:46.900 --> 00:36:47.960
It's one strategy.

00:36:47.960 --> 00:36:50.630
The other is to do server side
detection, which basically

00:36:50.630 --> 00:36:53.620
means that a request comes into
your web server and your

00:36:53.620 --> 00:36:56.820
web server looks at the user
agent header that your browser

00:36:56.820 --> 00:36:59.680
sends and it says, hey,
this is Chrome.

00:36:59.680 --> 00:37:03.380
Chrome indeed supports WebP, so
I'm going to serve you this

00:37:03.380 --> 00:37:07.270
version of the file, which
actually has .webp in it.

00:37:07.270 --> 00:37:11.740
And this is actually what
PageSpeed and Torbit and other

00:37:11.740 --> 00:37:12.730
products do.

00:37:12.730 --> 00:37:15.020
They do this server side
detection, and they actually

00:37:15.020 --> 00:37:19.100
serve different HTML files,
which doesn't incur any of the

00:37:19.100 --> 00:37:21.530
JavaScript cost, but
it has a slightly

00:37:21.530 --> 00:37:23.880
different negative side.

00:37:23.880 --> 00:37:27.860
Which is because the file itself
is different between

00:37:27.860 --> 00:37:31.230
browsers, we need to declare it
as cache control private,

00:37:31.230 --> 00:37:36.600
which means that this file can
still be cached by the client

00:37:36.600 --> 00:37:38.630
for however long you
specify, but it is

00:37:38.630 --> 00:37:40.360
private to this client.

00:37:40.360 --> 00:37:43.370
You can't share this file
between all the browsers,

00:37:43.370 --> 00:37:46.960
which may or may not be an issue
depending on how your

00:37:46.960 --> 00:37:49.420
cache or CDN strategy works.

00:37:49.420 --> 00:37:55.020
So in PageSpeed, we actually
mark the base HTML file as

00:37:55.020 --> 00:37:57.450
cache control private, which
means it's cached by the

00:37:57.450 --> 00:38:00.200
client but not by the
intermediate cache, but then

00:38:00.200 --> 00:38:05.260
all of the images are cached
for a year, which is where

00:38:05.260 --> 00:38:06.840
most of your cost is.

00:38:06.840 --> 00:38:09.800
Because if we go back to that
very first slide that I have,

00:38:09.800 --> 00:38:10.960
HTML is like--

00:38:10.960 --> 00:38:13.950
there's 40 kilobytes of it, and
then there's 800 kilobytes

00:38:13.950 --> 00:38:15.430
of the rest.

00:38:15.430 --> 00:38:16.980
So the 800 kilobytes
are cached.

00:38:16.980 --> 00:38:19.940
So pros and cons once again.

00:38:19.940 --> 00:38:22.810
Take a look at Mod PageSpeed
or how it does it under the

00:38:22.810 --> 00:38:26.170
hood, or you can write this
function yourself.

00:38:26.170 --> 00:38:27.530
It's actually pretty simple.

00:38:27.530 --> 00:38:29.050
Basically you're saying,
if user agent is

00:38:29.050 --> 00:38:31.540
Chrome or Opera, great.

00:38:31.540 --> 00:38:32.790
Serve WebP.

00:38:35.620 --> 00:38:39.560
So I think that's basically
us at the end.

00:38:39.560 --> 00:38:42.610
So we have a couple
of questions.

00:38:42.610 --> 00:38:45.250
But before we get to the
questions, you mentioned some

00:38:45.250 --> 00:38:48.110
of the things that
are coming ahead.

00:38:48.110 --> 00:38:51.050
What can we expect in 2013?

00:38:51.050 --> 00:38:52.520
STEPHEN KONIG: I think by and
large, what you're going to

00:38:52.520 --> 00:38:55.300
see in 2013 is lots of
progress on adoption.

00:38:55.300 --> 00:38:56.740
We've talked about that.

00:38:56.740 --> 00:38:59.140
And as we make more progress
on that, we're going to be

00:38:59.140 --> 00:39:01.530
shouting from the rooftops
about all the great case

00:39:01.530 --> 00:39:04.220
studies that we're confident
we'll see, and some of the

00:39:04.220 --> 00:39:06.580
data that we're starting to
see already working with a

00:39:06.580 --> 00:39:09.640
bunch of internal
Google teams.

00:39:09.640 --> 00:39:11.200
We're working with one
now that does a lot

00:39:11.200 --> 00:39:12.960
of serving of photos.

00:39:12.960 --> 00:39:13.720
ILYA GRIGORIK: I wonder
who that could be.

00:39:13.720 --> 00:39:14.490
STEPHEN KONIG: I don't know.

00:39:14.490 --> 00:39:16.680
I can't imagine who
it might be.

00:39:16.680 --> 00:39:19.580
But in that case, we're seeing
upwards of 50% to 60%

00:39:19.580 --> 00:39:22.950
reduction in image sizes, so
you can imagine the kind of

00:39:22.950 --> 00:39:25.830
impact that has on the
user experience.

00:39:25.830 --> 00:39:27.810
So we're excited about that.

00:39:27.810 --> 00:39:29.580
We'll hopefully launch
that very soon.

00:39:29.580 --> 00:39:31.410
You'll see many more
examples like that.

00:39:31.410 --> 00:39:33.560
And then alongside that, we're
going to continue to focus on

00:39:33.560 --> 00:39:37.090
optimization and trying to bring
that encode and decode

00:39:37.090 --> 00:39:39.530
time down even further.

00:39:39.530 --> 00:39:41.950
But you know, we're at a point
today, we're ready to really

00:39:41.950 --> 00:39:45.300
push the gas pedal and make some
great progress with WebP.

00:39:45.300 --> 00:39:45.670
ILYA GRIGORIK: Awesome.

00:39:45.670 --> 00:39:47.920
OK, so maybe one thing to point
out before we head to

00:39:47.920 --> 00:39:50.880
questions is we do have the
public WebP Discuss group

00:39:50.880 --> 00:39:52.800
where you can ask questions,
follow up.

00:39:52.800 --> 00:39:55.665
If we didn't cover something
here or we're not going to get

00:39:55.665 --> 00:39:57.710
to your question, then
just head there

00:39:57.710 --> 00:40:00.930
and drop us a question.

00:40:00.930 --> 00:40:02.180
So let's see.

00:40:06.930 --> 00:40:09.610
So we talked about the adoption
of WebP from other

00:40:09.610 --> 00:40:10.240
vendors, right?

00:40:10.240 --> 00:40:13.110
So we're working with
Firefox, there are

00:40:13.110 --> 00:40:14.240
plug-ins for other browsers.

00:40:14.240 --> 00:40:15.960
There are ways you can basically
provide this

00:40:15.960 --> 00:40:16.800
functionality in there.

00:40:16.800 --> 00:40:18.820
And then I guess there's
user agent section

00:40:18.820 --> 00:40:20.410
and a few other things.

00:40:20.410 --> 00:40:22.410
So there's a great question here
about what's the current

00:40:22.410 --> 00:40:23.450
progress of animated WebP?

00:40:23.450 --> 00:40:24.700
So it sounds like that's
coming in weeks.

00:40:24.700 --> 00:40:25.430
STEPHEN KONIG: We talked
about that.

00:40:25.430 --> 00:40:26.950
That's going to be very soon.

00:40:26.950 --> 00:40:29.390
ILYA GRIGORIK: And are there
any plans to eventually use

00:40:29.390 --> 00:40:33.110
predictive features of VP8 to
keep animated WebP small?

00:40:33.110 --> 00:40:33.680
STEPHEN KONIG: Good question.

00:40:33.680 --> 00:40:35.400
It's definitely something
we're thinking about and

00:40:35.400 --> 00:40:36.860
looking into.

00:40:36.860 --> 00:40:38.980
There's also going to be
improvements down the road to

00:40:38.980 --> 00:40:42.060
the VP video format, so we're
going to be taking a look at

00:40:42.060 --> 00:40:43.155
those and seeing how
we might be able to

00:40:43.155 --> 00:40:43.970
adopt those as well.

00:40:43.970 --> 00:40:46.100
ILYA GRIGORIK: Right, OK.

00:40:46.100 --> 00:40:48.370
What is the current process
for third party support?

00:40:48.370 --> 00:40:48.930
We talked about that.

00:40:48.930 --> 00:40:52.550
I'd like to see digital cameras
and phones saving high

00:40:52.550 --> 00:40:55.140
quality photos as WebPs.

00:40:55.140 --> 00:40:56.360
STEPHEN KONIG: Yeah,
we'd love that too.

00:40:56.360 --> 00:40:59.370
I think it's important
understand that adoption is a

00:40:59.370 --> 00:41:01.130
bit of a progression.

00:41:01.130 --> 00:41:03.580
So today, if we go talk to a
camera manufacturer, they're

00:41:03.580 --> 00:41:05.670
going to say, well, why should
I spit out WebP images from

00:41:05.670 --> 00:41:06.460
the camera?

00:41:06.460 --> 00:41:09.090
I can't upload those
a lot of places.

00:41:09.090 --> 00:41:12.900
So we have to sort of work this
in a stepwise manner.

00:41:12.900 --> 00:41:15.460
And so getting WebP adopted
across the web will make it a

00:41:15.460 --> 00:41:17.930
lot easier for us to go to
consumer electronic device

00:41:17.930 --> 00:41:18.980
manufacturers--

00:41:18.980 --> 00:41:20.660
camera makers, phones,
et cetera--

00:41:20.660 --> 00:41:22.490
and say, you really should store
this natively in WebP.

00:41:22.490 --> 00:41:24.200
And the story there
is the same.

00:41:24.200 --> 00:41:27.360
It's wow, for the same compact
SD card that I have in my

00:41:27.360 --> 00:41:30.760
camera, I get essentially one
and a half or two times as

00:41:30.760 --> 00:41:31.430
many images.

00:41:31.430 --> 00:41:33.090
ILYA GRIGORIK: So just to
reiterate the example you just

00:41:33.090 --> 00:41:37.120
gave, this one shall be unnamed
product, Android

00:41:37.120 --> 00:41:41.625
product, that serves a lot of
photos, you grab the photo off

00:41:41.625 --> 00:41:45.900
your camera-- probably a JPEG,
probably a couple megabytes.

00:41:45.900 --> 00:41:48.360
They then transcode it to WebP
and upload the WebP because

00:41:48.360 --> 00:41:50.070
it's so much more efficient.

00:41:50.070 --> 00:41:51.260
STEPHEN KONIG: That would
be the way to do it.

00:41:51.260 --> 00:41:51.660
Absolutely.

00:41:51.660 --> 00:41:54.380
ILYA GRIGORIK: So yeah, if the
camera saved it directly as

00:41:54.380 --> 00:41:55.090
WebP, that would be great.

00:41:55.090 --> 00:41:55.280
STEPHEN KONIG: Even better.

00:41:55.280 --> 00:41:56.410
ILYA GRIGORIK: But it'll
probably take some time before

00:41:56.410 --> 00:41:57.505
we get there.

00:41:57.505 --> 00:41:58.755
STEPHEN KONIG: Yep.

00:42:00.600 --> 00:42:03.270
ILYA GRIGORIK: So WebP can be
a more efficient compression

00:42:03.270 --> 00:42:06.290
algorithm than JPEG
and PNG but it

00:42:06.290 --> 00:42:08.110
uses more CPU resources.

00:42:08.110 --> 00:42:08.870
Please keep that in mind.

00:42:08.870 --> 00:42:09.120
Yep.

00:42:09.120 --> 00:42:13.430
So that's a legitimate point,
and measure it.

00:42:13.430 --> 00:42:16.770
We actually have the tools now
in Chrome Dev Tools, so take a

00:42:16.770 --> 00:42:17.540
look at that.

00:42:17.540 --> 00:42:19.370
And you saw the eBay example.

00:42:19.370 --> 00:42:23.050
So there's bandwidth costs and
there's CPU costs, and it

00:42:23.050 --> 00:42:25.150
really depends on your
application.

00:42:25.150 --> 00:42:26.190
I think for a majority,

00:42:26.190 --> 00:42:28.980
bandwidth is far more important.

00:42:28.980 --> 00:42:30.370
MALE SPEAKER: Ilya, we actually
had a fun question

00:42:30.370 --> 00:42:31.330
from YouTube.

00:42:31.330 --> 00:42:33.770
Josh was asking, because
everyone's excited about

00:42:33.770 --> 00:42:34.435
Project Glass.

00:42:34.435 --> 00:42:37.320
He wants to know if Project
Glass is going to save in WebP

00:42:37.320 --> 00:42:39.450
automatically to save on
mobile data usage.

00:42:39.450 --> 00:42:41.090
What's your insight into that,
and are you going to break

00:42:41.090 --> 00:42:42.970
something confidential?

00:42:42.970 --> 00:42:45.280
STEPHEN KONIG: As soon as I can
start dog fooding a Glass

00:42:45.280 --> 00:42:47.180
device, I will make sure that's
the first feature we

00:42:47.180 --> 00:42:47.630
put in there.

00:42:47.630 --> 00:42:50.470
How is that?

00:42:50.470 --> 00:42:52.340
ILYA GRIGORIK: Fair enough.

00:42:52.340 --> 00:42:57.830
So Francois actually asked a
great question, which is

00:42:57.830 --> 00:43:00.810
Chrome itself, internally, for
all the images and Dev Tools

00:43:00.810 --> 00:43:02.220
and all the rest uses PNG.

00:43:02.220 --> 00:43:04.010
I guess not a question, it's
more of a comment.

00:43:04.010 --> 00:43:05.120
Why aren't we using WebP?

00:43:05.120 --> 00:43:06.100
STEPHEN KONIG: We should
be, and we're

00:43:06.100 --> 00:43:08.310
going to fixing that.

00:43:08.310 --> 00:43:09.560
Absolutely.

00:43:13.080 --> 00:43:15.160
ILYA GRIGORIK: And actually,
Addy replied to that and said,

00:43:15.160 --> 00:43:16.330
yes, open a bug about this.

00:43:16.330 --> 00:43:17.500
We should fix it.

00:43:17.500 --> 00:43:18.510
So we're on it.

00:43:18.510 --> 00:43:19.940
STEPHEN KONIG: In fact, I opened
a bug about this not

00:43:19.940 --> 00:43:22.263
too long ago, so we'll
get it fixed.

00:43:25.340 --> 00:43:27.240
ILYA GRIGORIK: JNG could have
been used to produce JPEG

00:43:27.240 --> 00:43:29.500
images with Alpha Channel.

00:43:29.500 --> 00:43:32.100
Not actually familiar with that
format, but I think maybe

00:43:32.100 --> 00:43:35.900
the point here to make is I said
WebP, kind of one to rule

00:43:35.900 --> 00:43:38.150
them all, but I actually believe
that we need many

00:43:38.150 --> 00:43:39.510
different image formats
on the web.

00:43:39.510 --> 00:43:41.320
We have this artificial
limit of three today

00:43:41.320 --> 00:43:42.290
for whatever reason.

00:43:42.290 --> 00:43:45.530
We've all somehow agreed that
that's all we need.

00:43:45.530 --> 00:43:48.470
Thou shalt use a GIF, a PNG,
and a JPEG, and there's no

00:43:48.470 --> 00:43:49.300
reason for it.

00:43:49.300 --> 00:43:51.853
We could optimize things
much better.

00:43:51.853 --> 00:43:52.560
STEPHEN KONIG: Exactly.

00:43:52.560 --> 00:43:55.250
And we see this sometimes when
we go out and talk to folks

00:43:55.250 --> 00:43:55.840
about adoption.

00:43:55.840 --> 00:43:57.160
They say, well, what about
this format or

00:43:57.160 --> 00:43:57.930
what about that format?

00:43:57.930 --> 00:44:00.910
And our view is that there's
room on the web for lots of

00:44:00.910 --> 00:44:02.730
different formats, and
ultimately, they all should

00:44:02.730 --> 00:44:06.800
stand on their own and
prove themselves.

00:44:06.800 --> 00:44:11.370
We don't view it as an exclusion
to other options.

00:44:11.370 --> 00:44:13.470
ILYA GRIGORIK: So is there any
way to use WebP in Android

00:44:13.470 --> 00:44:14.820
less than 4x?

00:44:14.820 --> 00:44:15.220
Yes.

00:44:15.220 --> 00:44:17.900
So there's that backport, and
I'll share the slides later so

00:44:17.900 --> 00:44:20.590
you can find the link to it.

00:44:20.590 --> 00:44:24.080
Wouldn't just using a PNG file
be faster than converting WebP

00:44:24.080 --> 00:44:26.090
with a plug-in?

00:44:26.090 --> 00:44:29.310
I am not sure what this
is actually asking.

00:44:29.310 --> 00:44:30.460
STEPHEN KONIG: Well,
I guess it depends.

00:44:30.460 --> 00:44:32.400
If you're using, so say Safari
with a plug-in--

00:44:32.400 --> 00:44:33.625
ILYA GRIGORIK: Oh, I mean
for browsers that

00:44:33.625 --> 00:44:34.090
don't support it.

00:44:34.090 --> 00:44:36.320
STEPHEN KONIG: For browsers
that don't support it.

00:44:36.320 --> 00:44:37.600
Potentially.

00:44:37.600 --> 00:44:40.420
I think again, you have to
measure that in terms of what

00:44:40.420 --> 00:44:44.450
is the bandwidth savings from
the smaller file size.

00:44:44.450 --> 00:44:46.140
Obviously, plug-ins aren't
perfect either because they

00:44:46.140 --> 00:44:48.540
introduce a little bit of user
friction into the experience,

00:44:48.540 --> 00:44:50.180
and the user has to install
the plug-in and so on.

00:44:50.180 --> 00:44:52.210
So that's something to
bear in mind as well.

00:44:52.210 --> 00:44:52.560
ILYA GRIGORIK: OK.

00:44:52.560 --> 00:44:53.770
So Aaron Peters here.

00:44:53.770 --> 00:44:56.920
So if you serve static images
off a CDN and you want to

00:44:56.920 --> 00:44:59.890
support all the usual browsers,
including all of the

00:44:59.890 --> 00:45:03.230
IEs and Firefox browsers that
don't support WebP, then how

00:45:03.230 --> 00:45:06.770
to get WebP served off the
CDN to Chrome and Opera?

00:45:06.770 --> 00:45:09.680
So this is a great question,
and I think this actually

00:45:09.680 --> 00:45:13.280
boils down to support
at the CDN level at

00:45:13.280 --> 00:45:14.960
the edge for WebP.

00:45:14.960 --> 00:45:17.290
So as an example, PageSpeed
Service, which is the Google

00:45:17.290 --> 00:45:22.880
hosted PageSpeed libraries, we
actually do the user agent

00:45:22.880 --> 00:45:25.210
detection at the Edge
on our Edge servers.

00:45:25.210 --> 00:45:27.530
And actually, that's the same
strategy that EdgeCast uses.

00:45:27.530 --> 00:45:30.530
So EdgeCast actually uses
PageSpeed open source

00:45:30.530 --> 00:45:32.900
libraries under the hood, they
deploy it at the Edge, they

00:45:32.900 --> 00:45:35.570
run this user agent detection,
and then they serve the

00:45:35.570 --> 00:45:36.630
correct file.

00:45:36.630 --> 00:45:41.130
So unfortunately, that means
that the CDN itself has to

00:45:41.130 --> 00:45:45.160
support WebP, but I think from
my conversations with a lot of

00:45:45.160 --> 00:45:48.730
the major CDNs out there, it's
definitely something that

00:45:48.730 --> 00:45:52.170
everybody's considering just
because the mobile web is

00:45:52.170 --> 00:45:53.920
shooting through the roof.

00:45:53.920 --> 00:45:55.070
Pages are getting bigger.

00:45:55.070 --> 00:45:57.140
You saw the number of
bytes on the wire.

00:45:57.140 --> 00:46:00.550
So they're all looking at this
in some way or another.

00:46:00.550 --> 00:46:02.260
So I think we're going
to get there.

00:46:02.260 --> 00:46:04.110
And that's not to say that
user agent is the

00:46:04.110 --> 00:46:05.010
only way to do it.

00:46:05.010 --> 00:46:06.130
I think there are better ways.

00:46:06.130 --> 00:46:09.480
In fact, we've been talking
with the Chrome team about

00:46:09.480 --> 00:46:12.470
fixing some of the accept
headers and making this easier

00:46:12.470 --> 00:46:15.040
such that you don't have to
write these crazy user agent

00:46:15.040 --> 00:46:16.500
detection functions.

00:46:16.500 --> 00:46:18.730
Instead, you should be able to
look at the accept header and

00:46:18.730 --> 00:46:21.855
it should say, yes, I really
do support WebP.

00:46:21.855 --> 00:46:23.040
Give me a WebP file.

00:46:23.040 --> 00:46:23.260
STEPHEN KONIG: Yeah.

00:46:23.260 --> 00:46:25.030
That's a great solution in
the long term, and I

00:46:25.030 --> 00:46:26.080
think we'll get there.

00:46:26.080 --> 00:46:27.760
The advantage to that is you
don't have these hard coded

00:46:27.760 --> 00:46:30.490
rules about user agents and
which ones support WebP,

00:46:30.490 --> 00:46:32.200
because as more support them,
then you have to go change

00:46:32.200 --> 00:46:33.000
that logic.

00:46:33.000 --> 00:46:35.150
Whereas if you just look at the
accept header, if a new

00:46:35.150 --> 00:46:37.080
browser comes along it
supports WebP, great.

00:46:37.080 --> 00:46:38.060
You're going to serve
WebP to it.

00:46:38.060 --> 00:46:39.480
No change needed.

00:46:39.480 --> 00:46:41.000
So we'll get there.

00:46:41.000 --> 00:46:42.790
MALE SPEAKER: So Ilya,
back on YouTube.

00:46:42.790 --> 00:46:44.710
Zachary asks about encryption.

00:46:44.710 --> 00:46:47.380
Would it be possible to encrypt
WebP images so nobody

00:46:47.380 --> 00:46:50.440
can intercept them, two
examples being profile

00:46:50.440 --> 00:46:52.570
pictures or personal things?

00:46:52.570 --> 00:46:54.420
ILYA GRIGORIK: So the short
answer is yes, you can deliver

00:46:54.420 --> 00:46:58.950
them over SSL, and I think
that's all there is to it.

00:46:58.950 --> 00:46:59.840
STEPHEN KONIG: I think
that's probably the

00:46:59.840 --> 00:47:01.460
best way to do it.

00:47:01.460 --> 00:47:03.030
ILYA GRIGORIK: Unless you guys
are working to on a secret new

00:47:03.030 --> 00:47:03.880
feature for--

00:47:03.880 --> 00:47:05.360
STEPHEN KONIG: We are not
planning on doing any secret

00:47:05.360 --> 00:47:06.460
new compression algorithms.

00:47:06.460 --> 00:47:07.170
No.

00:47:07.170 --> 00:47:07.820
ILYA GRIGORIK: OK.

00:47:07.820 --> 00:47:10.060
Yes, so I think that one's
actually pretty simple.

00:47:10.060 --> 00:47:11.580
SSL, that's the answer there.

00:47:14.240 --> 00:47:16.970
Compared to JPEG Mini--

00:47:16.970 --> 00:47:19.350
are you familiar with JPEG
Mini by any chance?

00:47:19.350 --> 00:47:21.620
STEPHEN KONIG: A little bit.

00:47:21.620 --> 00:47:26.210
Again, I would just say, as a
site author, I think you need

00:47:26.210 --> 00:47:27.930
to look at different
options and decide

00:47:27.930 --> 00:47:28.960
what's best for you.

00:47:28.960 --> 00:47:32.850
I think we're very confident in
how WebP stacks up against

00:47:32.850 --> 00:47:37.200
alternative formats, but if you
find JPEG Mini is a good

00:47:37.200 --> 00:47:39.090
choice, then that's fine.

00:47:39.090 --> 00:47:41.785
We think WebP offers a much
better alternative for the

00:47:41.785 --> 00:47:43.940
vast majority of use cases
that are out there today.

00:47:43.940 --> 00:47:46.060
ILYA GRIGORIK: At the end the
day, make the web fast.

00:47:46.060 --> 00:47:47.730
If you make it faster,
we're happy.

00:47:47.730 --> 00:47:49.530
If you use WebP, great.

00:47:49.530 --> 00:47:53.310
If you find some other magic
bullet, awesome.

00:47:53.310 --> 00:47:55.640
As long as it's faster.

00:47:55.640 --> 00:47:56.720
I guess a comment from Max.

00:47:56.720 --> 00:47:58.700
The fire didn't look realistic
in that WebP

00:47:58.700 --> 00:48:00.260
version versus PNG.

00:48:00.260 --> 00:48:03.320
So maybe, I don't know.

00:48:03.320 --> 00:48:07.660
But I think this actually points
out an important point.

00:48:07.660 --> 00:48:10.020
It's all about your own
decision making

00:48:10.020 --> 00:48:11.610
and your art direction.

00:48:11.610 --> 00:48:15.270
So you need to find the
right quality level.

00:48:15.270 --> 00:48:16.580
I'm not even sure what
the default was.

00:48:16.580 --> 00:48:17.840
STEPHEN KONIG: There were
defaults that were set on

00:48:17.840 --> 00:48:19.310
there that you probably
needed to tweak.

00:48:19.310 --> 00:48:22.100
ILYA GRIGORIK: So don't just
look at, here's an image,

00:48:22.100 --> 00:48:24.190
here's an output from
some tool I got.

00:48:24.190 --> 00:48:27.200
There's a whole bunch of knobs,
and you can tweak those

00:48:27.200 --> 00:48:29.270
knobs and optimize
for your case.

00:48:29.270 --> 00:48:34.010
So if you absolutely must have
a certain quality and detail

00:48:34.010 --> 00:48:37.140
in your images, we give
you those knobs.

00:48:37.140 --> 00:48:38.430
If anything, there's
too many knobs.

00:48:43.720 --> 00:48:45.710
I wrote a batch script
called Script WebP.

00:48:45.710 --> 00:48:50.060
It converts PNG and JPEG files
to WebP using cwebp using

00:48:50.060 --> 00:48:51.210
simple drag and drop.

00:48:51.210 --> 00:48:51.630
Awesome.

00:48:51.630 --> 00:48:52.350
STEPHEN KONIG: That's great.

00:48:52.350 --> 00:48:55.360
ILYA GRIGORIK: So definitely
check that out.

00:48:55.360 --> 00:48:58.080
What is the adoption rate of
WebP format on internet pages?

00:48:58.080 --> 00:49:00.380
So I shared some data previously
about the PageSpeed

00:49:00.380 --> 00:49:02.990
server, so that's the one that
I'm most familiar with.

00:49:02.990 --> 00:49:06.320
There's over 300 sites using
those products today, and they

00:49:06.320 --> 00:49:09.040
are serving WebP to clients
that support it.

00:49:09.040 --> 00:49:10.920
So that's the ones I know of.

00:49:10.920 --> 00:49:12.330
There are also commercial
vendors that

00:49:12.330 --> 00:49:13.180
provide this service.

00:49:13.180 --> 00:49:17.570
So there's a lot of sites,
actually, that are using it.

00:49:17.570 --> 00:49:23.190
And as we said, we're going to
see a lot more Google sites

00:49:23.190 --> 00:49:23.910
and third party.

00:49:23.910 --> 00:49:25.920
STEPHEN KONIG: And third
party sites.

00:49:25.920 --> 00:49:27.440
ILYA GRIGORIK: Hopes
for PictureTag.

00:49:27.440 --> 00:49:31.040
So the PictureTag conversation,
I think, is

00:49:31.040 --> 00:49:32.290
orthogonal to this.

00:49:35.640 --> 00:49:38.020
PictureTag has a lot more other
things going for it, and

00:49:38.020 --> 00:49:40.150
I hope that it will
actually come.

00:49:40.150 --> 00:49:42.720
I think it's something
that we need.

00:49:42.720 --> 00:49:48.240
It's a question of, can we
actually pick some--

00:49:48.240 --> 00:49:50.740
there are many things that
PictureTag could be, and we

00:49:50.740 --> 00:49:54.420
may need to cut some corners and
cut out some use cases to

00:49:54.420 --> 00:49:56.650
actually make it happen.

00:49:56.650 --> 00:50:00.410
Do we get improvement for
black and white images?

00:50:00.410 --> 00:50:01.420
STEPHEN KONIG: I believe so.

00:50:01.420 --> 00:50:02.670
There's no reason
why we wouldn't.

00:50:07.250 --> 00:50:08.250
ILYA GRIGORIK: Will Google
Drive and Android

00:50:08.250 --> 00:50:10.210
support WebP soon?

00:50:10.210 --> 00:50:11.780
STEPHEN KONIG: Yes, hopefully.

00:50:11.780 --> 00:50:13.740
We will make sure it does.

00:50:13.740 --> 00:50:16.370
ILYA GRIGORIK: So it sounds
like you guys are working.

00:50:16.370 --> 00:50:19.010
So thanks for your answer, but
UA detection on the Edge that

00:50:19.010 --> 00:50:21.600
is part of the CDNs, expensive,
dynamic content

00:50:21.600 --> 00:50:22.880
acceleration products.

00:50:22.880 --> 00:50:25.510
Most sites serve HTML off their
own servers and static

00:50:25.510 --> 00:50:25.960
off the CDN.

00:50:25.960 --> 00:50:28.550
So I guess you need to
do the UA detection.

00:50:28.550 --> 00:50:29.470
Yes.

00:50:29.470 --> 00:50:34.830
So for example, the strategy
that Mod PageSpeed and the

00:50:34.830 --> 00:50:39.230
NginX PageSpeed service uses
is we generate a different

00:50:39.230 --> 00:50:45.470
HTML file, and that file
contains different links.

00:50:45.470 --> 00:50:48.130
So one contains links to WebP,
and the other contains a link

00:50:48.130 --> 00:50:49.980
to, for example, JPEG.

00:50:49.980 --> 00:50:52.740
And then those files can be just
statically linked to any

00:50:52.740 --> 00:50:56.270
CDN and everything is fine.

00:50:56.270 --> 00:51:01.060
So you don't need cooperation of
your CDN provider for that.

00:51:01.060 --> 00:51:06.890
So that solution also has some
caveats, but that's what a lot

00:51:06.890 --> 00:51:11.870
of sites have been doing today,
and it is workable.

00:51:11.870 --> 00:51:13.070
Is the format patent free?

00:51:13.070 --> 00:51:14.250
STEPHEN KONIG: Absolutely.

00:51:14.250 --> 00:51:18.470
ILYA GRIGORIK: So free open
source, BSD licensed.

00:51:18.470 --> 00:51:21.350
I think if you actually go to
the WebM project, they also

00:51:21.350 --> 00:51:24.880
even give you schematics for
building chips, which I think

00:51:24.880 --> 00:51:27.270
is awesome.

00:51:27.270 --> 00:51:29.980
So I think we've answered
everything that's been here.

00:51:29.980 --> 00:51:33.910
If you guys have more questions,
WebP Discuss, but

00:51:33.910 --> 00:51:34.240
otherwise--

00:51:34.240 --> 00:51:36.450
MALE SPEAKER: One last
question on YouTube.

00:51:36.450 --> 00:51:38.490
So Josh loves this
show, by the way.

00:51:38.490 --> 00:51:40.670
So he's asking about Android
cameras getting the ability to

00:51:40.670 --> 00:51:43.110
convert to WebP on the fly.

00:51:43.110 --> 00:51:46.240
If they're running Android 4.x,
maybe they can save in

00:51:46.240 --> 00:51:49.330
Raw and WebP.

00:51:49.330 --> 00:51:52.270
STEPHEN KONIG: Yeah, that's
certainly something I think we

00:51:52.270 --> 00:51:53.960
will see over time.

00:51:53.960 --> 00:51:58.130
It gets back to the challenge
today would be if you spit

00:51:58.130 --> 00:52:01.420
them out as WebP, it would
restrict where you could

00:52:01.420 --> 00:52:02.880
upload those photos today.

00:52:02.880 --> 00:52:06.940
So as we get more adoption on
sites that support WebP

00:52:06.940 --> 00:52:09.690
uploads, then something like
what you're describing makes a

00:52:09.690 --> 00:52:11.860
lot of sense, and I think we
will see that over time.

00:52:11.860 --> 00:52:13.490
ILYA GRIGORIK: So if
you're a service--

00:52:13.490 --> 00:52:16.920
if you run the service to where
you're uploading and you

00:52:16.920 --> 00:52:20.420
support WebP, and let's say-- so
this actually could work, I

00:52:20.420 --> 00:52:22.310
think both for native
and web apps.

00:52:22.310 --> 00:52:25.460
So for native, you request
your camera, you grab the

00:52:25.460 --> 00:52:28.120
bytes, and then you can--

00:52:28.120 --> 00:52:29.210
STEPHEN KONIG: Convert them.

00:52:29.210 --> 00:52:31.160
ILYA GRIGORIK: Convert that
into WebP and upload it to

00:52:31.160 --> 00:52:31.960
your service.

00:52:31.960 --> 00:52:33.810
You can do the same
thing on the web

00:52:33.810 --> 00:52:34.680
today, actually, right?

00:52:34.680 --> 00:52:37.060
You have access to the camera
API, you get your basically

00:52:37.060 --> 00:52:41.180
buffer, you convert that to WebP
and send that back up.

00:52:41.180 --> 00:52:47.380
So if you're trying to upload
WebP to, I don't know, Flickr.

00:52:47.380 --> 00:52:50.560
I've actually talked to Flickr
and we had a conversation with

00:52:50.560 --> 00:52:52.070
them, but they don't currently
support it.

00:52:52.070 --> 00:52:54.810
So if you just throw that
out to Flickr, they'll

00:52:54.810 --> 00:52:55.550
say, I have no idea.

00:52:55.550 --> 00:52:57.150
STEPHEN KONIG: I don't know
what you're giving me.

00:52:57.150 --> 00:52:57.960
ILYA GRIGORIK: Exactly.

00:52:57.960 --> 00:52:59.910
MALE SPEAKER: What about
OS support for WebP?

00:52:59.910 --> 00:53:01.850
I mean, if people download it
from their browsers and they

00:53:01.850 --> 00:53:04.150
view their images, do they need
to download the codec for

00:53:04.150 --> 00:53:05.980
the OS as well?

00:53:05.980 --> 00:53:07.150
ILYA GRIGORIK: That's
a good question.

00:53:07.150 --> 00:53:10.260
So on Windows, we actually
provide a plug-in.

00:53:10.260 --> 00:53:11.000
STEPHEN KONIG: There
is a plug-in.

00:53:11.000 --> 00:53:12.710
And for OSX, there's a
third party plug-in

00:53:12.710 --> 00:53:13.820
that does the same.

00:53:13.820 --> 00:53:14.660
ILYA GRIGORIK: So

00:53:14.660 --> 00:53:17.750
unfortunately, it's not native.

00:53:17.750 --> 00:53:22.010
If the user just drags in the
file, they won't be able to

00:53:22.010 --> 00:53:24.740
view it, but there are plug-ins
for both platforms.

00:53:24.740 --> 00:53:27.200
And is there anything
for Linux?

00:53:27.200 --> 00:53:28.350
STEPHEN KONIG: I believe so.

00:53:28.350 --> 00:53:30.300
If you go to the Wikipedia site,
there are definitely

00:53:30.300 --> 00:53:30.610
[INAUDIBLE].

00:53:30.610 --> 00:53:32.580
ILYA GRIGORIK: So actually,
that's a good point.

00:53:32.580 --> 00:53:34.090
Go to the Wikipedia
site and you can

00:53:34.090 --> 00:53:35.230
download those plug-ins.

00:53:35.230 --> 00:53:37.770
And I hope, as we said, we're
going to make the tooling

00:53:37.770 --> 00:53:41.780
better in 2013.

00:53:41.780 --> 00:53:44.270
All right, I think that's it.

00:53:44.270 --> 00:53:44.540
Awesome.

00:53:44.540 --> 00:53:44.960
STEPHEN KONIG: Awesome.

00:53:44.960 --> 00:53:46.380
ILYA GRIGORIK: Thank you guys.

00:53:46.380 --> 00:53:47.370
Thanks, Stephen.

00:53:47.370 --> 00:53:48.620
STEPHEN KONIG: Thank you, Ilya.

