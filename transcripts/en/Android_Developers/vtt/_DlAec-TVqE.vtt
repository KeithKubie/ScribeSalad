WEBVTT
Kind: captions
Language: en

00:00:00.070 --> 00:00:01.170
RICH HYNDMAN: --few minutes
later, hopefully with your

00:00:01.170 --> 00:00:03.750
ticket in hand.

00:00:03.750 --> 00:00:08.010
Says the optimistic Googler
in the group.

00:00:08.010 --> 00:00:10.470
As usual, we've been discussing
Android development

00:00:10.470 --> 00:00:12.980
topics prioritized from the
moderator, so please get your

00:00:12.980 --> 00:00:15.690
questions into the moderator
each week as early as you can

00:00:15.690 --> 00:00:17.260
so we get a chance
to look at them.

00:00:17.260 --> 00:00:20.940
I'm Rich Hyndman, and I'm joined
here in London by--

00:00:20.940 --> 00:00:23.180
CHRIS BANES: Chris Banes.

00:00:23.180 --> 00:00:23.700
MATT GAUNT: Matt Gaunt.

00:00:23.700 --> 00:00:25.010
Hi.

00:00:25.010 --> 00:00:28.110
STEPHAN LINZNER: And
Stephan Linzner.

00:00:28.110 --> 00:00:31.450
RICH HYNDMAN: Yeah, Matt,
Chris, Stephan, myself.

00:00:31.450 --> 00:00:34.290
And on the Hangout, we've
already got Yossi.

00:00:34.290 --> 00:00:35.320
YOSSI ELKRIEF: Hi, guys.

00:00:35.320 --> 00:00:36.275
RICH HYNDMAN: And Al.

00:00:36.275 --> 00:00:38.690
AL SUTTON: Hey, guys.

00:00:38.690 --> 00:00:41.625
RICH HYNDMAN: And Leonid.

00:00:41.625 --> 00:00:43.170
Are you there?

00:00:43.170 --> 00:00:44.830
Are you in the ooVoo
office as well?

00:00:44.830 --> 00:00:46.860
You've got a remarkably similar
background to Yossi.

00:00:46.860 --> 00:00:48.350
LEONID OLEVSKY: Yeah.

00:00:48.350 --> 00:00:50.090
It's similar like Yossi.

00:00:50.090 --> 00:00:51.566
MALE SPEAKER: Yeah.

00:00:51.566 --> 00:00:53.380
YOSSI ELKRIEF: That
was my avatar.

00:00:53.380 --> 00:00:56.060
RICH HYNDMAN: Lego Batman has
just joined us as well.

00:00:56.060 --> 00:00:57.030
MATT GAUNT: That is
a good avatar.

00:00:57.030 --> 00:01:00.420
RICH HYNDMAN: Wow, and a whole
room of people from the

00:01:00.420 --> 00:01:02.150
Co-Creation Hub in Nigeria.

00:01:02.150 --> 00:01:02.560
Hey there.

00:01:02.560 --> 00:01:03.785
Good to see you guys.

00:01:03.785 --> 00:01:04.830
STEPHAN LINZNER: Hi, guys.

00:01:04.830 --> 00:01:05.813
RICH HYNDMAN: Thanks
for joining.

00:01:05.813 --> 00:01:09.458
OK, does anybody in the Hangout
have a question not

00:01:09.458 --> 00:01:11.090
related to Google I/O tickets?

00:01:11.090 --> 00:01:13.110
AL SUTTON: I've got
a question.

00:01:13.110 --> 00:01:17.380
If I've got multiple APKs, and I
have a service in one that I

00:01:17.380 --> 00:01:21.100
want to make use of in the
others, is it better to export

00:01:21.100 --> 00:01:25.940
the service in the manifest, or
should I just use AIDL and

00:01:25.940 --> 00:01:29.240
embed the AIDL file
in the other APKs?

00:01:29.240 --> 00:01:30.280
RICH HYNDMAN: This is
multiple, separate

00:01:30.280 --> 00:01:32.810
applications on the same device,
as opposed to multiple

00:01:32.810 --> 00:01:34.080
APKs in the developer console?

00:01:34.080 --> 00:01:36.340
AL SUTTON: Yeah.

00:01:36.340 --> 00:01:37.450
MATT GAUNT: Depends how much
control you want of the

00:01:37.450 --> 00:01:37.890
service, really.

00:01:37.890 --> 00:01:40.010
If you want to start calling
methods on the service, you

00:01:40.010 --> 00:01:41.164
have to use AIDL.

00:01:41.164 --> 00:01:43.590
If you just want to start
and stop it--

00:01:43.590 --> 00:01:45.570
in fact, you can't
do that, can you?

00:01:45.570 --> 00:01:46.506
YOSSI ELKRIEF: No, no.

00:01:46.506 --> 00:01:47.900
MALE SPEAKER: You can't.

00:01:47.900 --> 00:01:49.380
STEPHAN LINZNER: Are they
signed with the same

00:01:49.380 --> 00:01:51.150
certificate, I guess?

00:01:51.150 --> 00:01:52.430
AL SUTTON: No, they're going
to be signed with different

00:01:52.430 --> 00:01:53.915
certificates is the thing.

00:01:57.620 --> 00:01:59.690
MATT GAUNT: Yeah, I'd say
AIDL's your only bet.

00:01:59.690 --> 00:02:00.770
RICH HYNDMAN: And you're always
going to guarantee that

00:02:00.770 --> 00:02:03.870
the first app is on there when
the second app is running?

00:02:03.870 --> 00:02:06.170
AL SUTTON: Yeah, the first app's
going to be on there

00:02:06.170 --> 00:02:08.419
when the second ones
are running.

00:02:08.419 --> 00:02:11.270
It's whether to use AIDL to use
the method call through,

00:02:11.270 --> 00:02:15.450
or just try and have separate
intent services that handle

00:02:15.450 --> 00:02:18.500
individual calls.

00:02:18.500 --> 00:02:20.320
RICH HYNDMAN: Yeah, if you can
guarantee the first one's on

00:02:20.320 --> 00:02:21.837
there, and then maybe there's
going to be multiple other

00:02:21.837 --> 00:02:24.120
ones, I would go with
the AIDL myself.

00:02:24.120 --> 00:02:25.410
AL SUTTON: Cool.

00:02:25.410 --> 00:02:26.660
Thanks.

00:02:29.940 --> 00:02:32.620
RICH HYNDMAN: Any others from
the Hangout floor before we

00:02:32.620 --> 00:02:33.870
jump into the Moderator?

00:02:37.070 --> 00:02:37.310
I'll take that as a no.

00:02:37.310 --> 00:02:40.210
Welcome to the other six people
that just joined us.

00:02:40.210 --> 00:02:42.460
I need to zoom in on the Chat
window again because we always

00:02:42.460 --> 00:02:46.120
do this, and I can't
read it at all.

00:02:46.120 --> 00:02:49.682
YOSSI ELKRIEF: Yeah, nothing
in there for now.

00:02:49.682 --> 00:02:50.813
RICH HYNDMAN: How do
you even see that

00:02:50.813 --> 00:02:51.980
there's nothing in there?

00:02:51.980 --> 00:02:55.410
There we go.

00:02:55.410 --> 00:02:59.740
Jan, Clemens, Stephen, and J.
Miguel all joined us recently.

00:02:59.740 --> 00:03:01.628
OK, should we grab one off
the Moderator, and

00:03:01.628 --> 00:03:02.372
I'll make sure that's--

00:03:02.372 --> 00:03:03.050
MATT GAUNT: Yeah, let's do it.

00:03:03.050 --> 00:03:05.525
So Mike has asked about theming,
and specifically

00:03:05.525 --> 00:03:07.260
about theming EdgeEffect.

00:03:07.260 --> 00:03:09.370
So that's the glow you get when
you overscroll a List

00:03:09.370 --> 00:03:11.510
View or any sort of scrolling
container.

00:03:11.510 --> 00:03:14.500
And he's asked why can't you
style it by asking why can't

00:03:14.500 --> 00:03:16.310
you change the color or
anything like that.

00:03:16.310 --> 00:03:19.690
And the main reason for that
really is that EdgeEffect is

00:03:19.690 --> 00:03:22.400
supposed to be consistent
across all apps.

00:03:22.400 --> 00:03:25.290
It's for the user then to have
different colors and different

00:03:25.290 --> 00:03:27.110
styles that you can
easily change.

00:03:27.110 --> 00:03:28.700
It becomes a bit jarring.

00:03:28.700 --> 00:03:30.210
So that's the real reason,
really, just to keep

00:03:30.210 --> 00:03:31.790
consistency.

00:03:31.790 --> 00:03:35.690
You can change it, but you'd
have to import the container

00:03:35.690 --> 00:03:36.560
yourself and then
change out the

00:03:36.560 --> 00:03:38.662
EdgeEffect and the drawables.

00:03:41.430 --> 00:03:41.863
RICH HYNDMAN: Excellent.

00:03:41.863 --> 00:03:44.530
I'm supposed to be taking
notes as well, aren't I?

00:03:44.530 --> 00:03:48.450
STEPHAN LINZNER: We have another
question from Ram.

00:03:48.450 --> 00:03:51.320
He's asking, when a service gets
restarted, will it reset

00:03:51.320 --> 00:03:55.150
the timer under the App Settings
for its service?

00:03:55.150 --> 00:03:57.380
I think it will, but
I cannot guarantee.

00:03:57.380 --> 00:03:59.606
Maybe you just try it out.

00:03:59.606 --> 00:04:02.130
Some of you guys know
about this behavior?

00:04:02.130 --> 00:04:04.320
MATT GAUNT: I don't know.

00:04:04.320 --> 00:04:05.420
It doesn't really make
a difference

00:04:05.420 --> 00:04:07.370
anyway, because the timers--

00:04:07.370 --> 00:04:09.380
STEPHAN LINZNER: Maybe he wants,
if the user goes in

00:04:09.380 --> 00:04:12.440
there, so the user can see it.

00:04:12.440 --> 00:04:16.000
But regarding the second part
of your question, what will

00:04:16.000 --> 00:04:18.649
happen to static objects
referenced

00:04:18.649 --> 00:04:21.970
inside the service class?

00:04:21.970 --> 00:04:25.280
Any static object that lives
on the heap will be there

00:04:25.280 --> 00:04:27.400
until your process terminates.

00:04:27.400 --> 00:04:32.935
So of course, static objects
will be there, I also wrote in

00:04:32.935 --> 00:04:33.120
the answer.

00:04:33.120 --> 00:04:35.420
But you have to be very,
very careful.

00:04:35.420 --> 00:04:39.500
If one of your static objects
keeps a reference on a service

00:04:39.500 --> 00:04:42.980
or any other object that keeps
a reference on a service, you

00:04:42.980 --> 00:04:45.590
will actually leak that service
when it's restarted.

00:04:45.590 --> 00:04:51.360
So you have to be very careful
there because sometimes, it's

00:04:51.360 --> 00:04:57.250
easy to create a memory
leak if you're

00:04:57.250 --> 00:04:59.190
using a static object.

00:04:59.190 --> 00:05:03.113
So you can do it, but
be very careful.

00:05:07.140 --> 00:05:09.750
LEONID OLEVSKY: OK, can
I ask a question?

00:05:09.750 --> 00:05:11.930
STEPHAN LINZNER: Of course.

00:05:11.930 --> 00:05:15.500
LEONID OLEVSKY: I've played
with billing a service of

00:05:15.500 --> 00:05:22.460
Version Three, and want to check
to get the SKU details

00:05:22.460 --> 00:05:34.310
from Google Play, and the
list that I received was

00:05:34.310 --> 00:05:37.010
blank with no items.

00:05:37.010 --> 00:05:40.520
Does it work, or maybe I was
doing something wrong?

00:05:43.210 --> 00:05:45.460
MATT GAUNT: Had you recently
updated the list on the

00:05:45.460 --> 00:05:46.890
Developer Console?

00:05:46.890 --> 00:05:49.120
LEONID OLEVSKY: I updated the
list, but the check that I was

00:05:49.120 --> 00:05:54.980
doing was two or three
hovers after it.

00:05:54.980 --> 00:05:58.970
And the list was empty.

00:05:58.970 --> 00:06:00.115
MATT GAUNT: That's
interesting.

00:06:00.115 --> 00:06:01.830
RICH HYNDMAN: The list
of prices, was that?

00:06:01.830 --> 00:06:02.820
LEONID OLEVSKY: I did everything
that you have

00:06:02.820 --> 00:06:06.400
written in the Developers
Android, and [INAUDIBLE].

00:06:06.400 --> 00:06:07.700
RICH HYNDMAN: Two or three
hours is really

00:06:07.700 --> 00:06:08.780
close to the wire.

00:06:08.780 --> 00:06:11.040
It can take more than two or
three hours for these changes

00:06:11.040 --> 00:06:14.110
to go through, the same
as when you publish an

00:06:14.110 --> 00:06:14.630
application.

00:06:14.630 --> 00:06:18.710
I've seen updates to
descriptions and graphics and

00:06:18.710 --> 00:06:23.490
in-app billing take longer
than three hours before.

00:06:23.490 --> 00:06:26.920
LEONID OLEVSKY: OK, but if
I call it, it works.

00:06:26.920 --> 00:06:30.620
I don't have any problems
subsequently.

00:06:30.620 --> 00:06:33.350
I will get the list of the
items, and I have published it

00:06:33.350 --> 00:06:36.280
in Google Play.

00:06:36.280 --> 00:06:38.730
OK, I will try another time.

00:06:38.730 --> 00:06:40.485
MATT GAUNT: Yeah, because with
Version Three, it all gets

00:06:40.485 --> 00:06:46.645
cached in the Market app,
Play app [INAUDIBLE], so

00:06:46.645 --> 00:06:47.450
[INAUDIBLE]

00:06:47.450 --> 00:06:49.871
is like a cache threshold.

00:06:49.871 --> 00:06:52.260
If it hasn't been refreshed in
four hours, it will sort of

00:06:52.260 --> 00:06:53.000
[INAUDIBLE] itself.

00:06:53.000 --> 00:06:55.460
That's a guess.

00:06:55.460 --> 00:06:59.090
RICH HYNDMAN: We hear a lot of
billing issues like this due

00:06:59.090 --> 00:07:00.780
to not waiting long enough.

00:07:00.780 --> 00:07:04.430
Unfortunately, we don't have an
exact, precise time for how

00:07:04.430 --> 00:07:07.455
long it takes for the in-app
billing items to filter

00:07:07.455 --> 00:07:11.640
through to your nearest cache
server for Play, but it

00:07:11.640 --> 00:07:15.200
certainly can take
a few hours.

00:07:15.200 --> 00:07:20.550
LEONID OLEVSKY: And can you
maybe make an example in the

00:07:20.550 --> 00:07:27.280
code that you send, maybe for
checking the items for that

00:07:27.280 --> 00:07:34.360
way, because the examples that
are going with the code is

00:07:34.360 --> 00:07:40.220
only for buy items and
not for checking.

00:07:42.938 --> 00:07:43.850
RICH HYNDMAN: OK.

00:07:43.850 --> 00:07:46.210
I thought we did have sample
code for that in the--

00:07:46.210 --> 00:07:47.950
we have a full sample
application that goes along

00:07:47.950 --> 00:07:50.255
with it, as opposed to just the
sample code on the in-app

00:07:50.255 --> 00:07:52.460
billing site, and the
application should have all

00:07:52.460 --> 00:07:54.060
the sample code inside it.

00:07:54.060 --> 00:07:56.440
MATT GAUNT: There's also demo
SKUs that you can check.

00:07:56.440 --> 00:07:58.340
So you can change your Merchant
ID, and you'll get

00:07:58.340 --> 00:07:59.250
all the demo ones.

00:07:59.250 --> 00:08:01.860
So that's how you test if it
works, and then obviously, you

00:08:01.860 --> 00:08:05.520
can then shift over to your
specific SKUs and test your

00:08:05.520 --> 00:08:07.675
actual items.

00:08:07.675 --> 00:08:12.560
So yeah, I'd just
wait, I guess.

00:08:12.560 --> 00:08:14.070
LEONID OLEVSKY: OK, thanks.

00:08:14.070 --> 00:08:17.360
RICH HYNDMAN: Have you found
the test application?

00:08:17.360 --> 00:08:17.930
LEONID OLEVSKY: Sorry?

00:08:17.930 --> 00:08:19.260
RICH HYNDMAN: Have you found
the sample in-app billing

00:08:19.260 --> 00:08:19.760
application?

00:08:19.760 --> 00:08:23.070
LEONID OLEVSKY: Yeah, I check
it, it's working fine, but

00:08:23.070 --> 00:08:27.040
there is no sample for getting
a list from the Google Play.

00:08:27.040 --> 00:08:36.299
You can only buy items or check
a subscription, not

00:08:36.299 --> 00:08:37.559
getting the list.

00:08:37.559 --> 00:08:38.500
RICH HYNDMAN: I thought it had
been updated to include

00:08:38.500 --> 00:08:41.559
getting the list and finding
the prices, but I'll

00:08:41.559 --> 00:08:42.760
definitely check it.

00:08:42.760 --> 00:08:45.066
LEONID OLEVSKY: OK, thanks.

00:08:45.066 --> 00:08:47.630
AL SUTTON: I've just done a
quick look into the source

00:08:47.630 --> 00:08:51.520
code for the running time for
a service, and it's based on

00:08:51.520 --> 00:08:55.260
the amount of time since that
process was started.

00:08:55.260 --> 00:08:58.200
So if the service is restarted,
but the process

00:08:58.200 --> 00:09:01.720
that service is in isn't
restarted, then the time under

00:09:01.720 --> 00:09:04.670
the App Settings
won't be reset.

00:09:04.670 --> 00:09:05.920
MATT GAUNT: OK, cool.

00:09:08.740 --> 00:09:10.993
RICH HYNDMAN: OK.

00:09:10.993 --> 00:09:12.490
What's up next?

00:09:16.430 --> 00:09:17.140
Anybody got one?

00:09:17.140 --> 00:09:18.440
I'll check the-- yeah?

00:09:21.852 --> 00:09:24.600
STEPHAN LINZNER: Yeah, we had
a question regarding--

00:09:24.600 --> 00:09:27.300
this might be an
important one--

00:09:27.300 --> 00:09:29.860
regarding cursors.

00:09:29.860 --> 00:09:31.540
Yeah, from Montano in Brazil.

00:09:31.540 --> 00:09:36.020
He asked us, how can I don't
commit a cursor leak?

00:09:36.020 --> 00:09:39.060
I'm using Content Provider and
AsyncQueryHandler to do a

00:09:39.060 --> 00:09:41.270
simple query, but a cursor
leak happens.

00:09:41.270 --> 00:09:44.470
Should I close the
cursor manually?

00:09:44.470 --> 00:09:47.110
In general, you should always
close your cursors.

00:09:47.110 --> 00:09:50.020
You should be really careful
about not leaking cursors.

00:09:53.600 --> 00:09:56.940
Back on old APIs there,
you would call

00:09:56.940 --> 00:10:00.660
Activity.startManagingCursor
and stopManagingCursor, and

00:10:00.660 --> 00:10:04.960
then the activity or Android
would take over and manage the

00:10:04.960 --> 00:10:09.080
cursor for you corresponding
to the life cycle.

00:10:09.080 --> 00:10:12.700
But to be honest, you shouldn't
use any of these

00:10:12.700 --> 00:10:14.220
classes anymore.

00:10:14.220 --> 00:10:16.450
You should rely on
LoaderManager and

00:10:16.450 --> 00:10:17.170
CursorLoader.

00:10:17.170 --> 00:10:22.830
So take a look at them, and
they should help you out.

00:10:22.830 --> 00:10:25.480
And also, take care of all
the life cycle stuff and

00:10:25.480 --> 00:10:28.420
configuration changes and
all kinds of things.

00:10:28.420 --> 00:10:31.700
So you should generally use
LoaderManager and CursorLoader

00:10:31.700 --> 00:10:35.330
or other loaders.

00:10:35.330 --> 00:10:37.720
MATT GAUNT: I've got a question
that Rich can answer.

00:10:37.720 --> 00:10:41.450
Mr. J-R-E, MrJre, has
asked a question

00:10:41.450 --> 00:10:44.070
about widget cell sizes.

00:10:44.070 --> 00:10:48.445
So he said that on ICS
and Jelly Bean, the

00:10:48.445 --> 00:10:49.970
cell size is 70--

00:10:49.970 --> 00:10:52.800
you calculate it
a certain way--

00:10:52.800 --> 00:10:56.050
and then on a tablet, you use
the same size, but it's only

00:10:56.050 --> 00:10:57.060
three cells instead of four.

00:10:57.060 --> 00:11:01.130
How would you combat that, the
different cell sizes on

00:11:01.130 --> 00:11:02.520
different devices?

00:11:02.520 --> 00:11:03.170
RICH HYNDMAN: The cell
size is the same on

00:11:03.170 --> 00:11:06.220
all devices in dips.

00:11:06.220 --> 00:11:08.970
Other than the fact we put
padding in Ice Cream

00:11:08.970 --> 00:11:10.860
Sandwich and above.

00:11:10.860 --> 00:11:12.285
Where was the question?

00:11:12.285 --> 00:11:13.540
MATT GAUNT: It's the
second page.

00:11:13.540 --> 00:11:14.080
YOSSI ELKRIEF: Second page.

00:11:14.080 --> 00:11:15.330
MATT GAUNT: MrJre.

00:11:24.060 --> 00:11:26.240
RICH HYNDMAN: The formula for
JB, [INAUDIBLE], why is it

00:11:26.240 --> 00:11:29.605
that 250dp width still
only spans three

00:11:29.605 --> 00:11:30.855
cells instead of four?

00:11:32.870 --> 00:11:34.300
I wasn't aware that it did.

00:11:34.300 --> 00:11:35.550
I'm pretty sure--

00:11:40.830 --> 00:11:42.760
on what device?

00:11:42.760 --> 00:11:47.120
MrJre, if you're watching, what
device are you seeing a

00:11:47.120 --> 00:11:52.203
four-cell, 250dp width widget
is only spanning three cells

00:11:52.203 --> 00:11:55.250
and not four?

00:11:55.250 --> 00:11:58.066
MATT GAUNT: Are you
sure it is--

00:11:58.066 --> 00:12:03.220
goes to three cells, but
the cells are smaller?

00:12:03.220 --> 00:12:07.800
Because of the padding, maybe
the cells are smaller?

00:12:07.800 --> 00:12:10.100
YOSSI ELKRIEF: No, maybe
it's a custom launcher?

00:12:10.100 --> 00:12:11.990
MATT GAUNT: Yeah, maybe.

00:12:11.990 --> 00:12:13.290
RICH HYNDMAN: Yeah, it should
definitely be spanning four

00:12:13.290 --> 00:12:18.900
cells at 250dp of width.

00:12:18.900 --> 00:12:19.760
So it's a bit of
a strange one.

00:12:19.760 --> 00:12:21.716
If you have any more details
on it, then please put them

00:12:21.716 --> 00:12:23.990
through about the device that
you're using, and I'll test it

00:12:23.990 --> 00:12:27.310
over here as well, but I've not
seen that behavior before.

00:12:33.880 --> 00:12:36.750
MATT GAUNT: So Jay in India
has asked about face

00:12:36.750 --> 00:12:37.980
recognition.

00:12:37.980 --> 00:12:43.900
He saw the OpenCV, which is
a popular native library.

00:12:43.900 --> 00:12:46.110
It's been included in the
Android Source Tree for

00:12:46.110 --> 00:12:48.230
awhile, and he's asking is
there any way he can get

00:12:48.230 --> 00:12:51.110
access to that via the NDK?

00:12:51.110 --> 00:12:52.830
Not that I'm aware of.

00:12:52.830 --> 00:12:54.870
You can include an OpenCV
quite easily in your own

00:12:54.870 --> 00:12:55.490
application.

00:12:55.490 --> 00:12:57.560
There are some Java bindings
which I've released.

00:12:57.560 --> 00:13:00.892
YOSSI ELKRIEF: Yeah, it's better
to use it as an import

00:13:00.892 --> 00:13:01.796
but not a--

00:13:01.796 --> 00:13:03.605
MATT GAUNT: The only trouble
with using the Java binding is

00:13:03.605 --> 00:13:05.692
that you're constantly doing
JNI calls, so it's going to

00:13:05.692 --> 00:13:08.770
have a performance impact.

00:13:08.770 --> 00:13:13.670
So you're better off doing all
the OpenCV calls in native,

00:13:13.670 --> 00:13:17.210
and then only calling through
when you need to in JNI.

00:13:17.210 --> 00:13:20.990
But I don't know an easy way
where you can easily use the

00:13:20.990 --> 00:13:22.950
supplied OpenCV lib.

00:13:25.600 --> 00:13:28.304
I don't really know.

00:13:28.304 --> 00:13:28.730
RICH HYNDMAN: No.

00:13:28.730 --> 00:13:29.980
CHRIS BANES: Me neither.

00:13:36.300 --> 00:13:38.330
AL SUTTON: How about embedding
it in the application using

00:13:38.330 --> 00:13:41.020
JNI to call through, so
recompile it and put it in an

00:13:41.020 --> 00:13:41.750
application?

00:13:41.750 --> 00:13:45.070
MATT GAUNT: Yeah, that's
what I said.

00:13:45.070 --> 00:13:48.550
They supply a loaded sort of JNI
bindings, which are quite

00:13:48.550 --> 00:13:50.800
nice, with OpenCV.

00:13:50.800 --> 00:13:52.780
I've used it before.

00:13:52.780 --> 00:13:54.355
RICH HYNDMAN: The other thing,
back on the widget sizing, of

00:13:54.355 --> 00:13:57.045
course, is the Android Design
in Action last Friday, or

00:13:57.045 --> 00:13:59.860
Thursday, or Monday, whenever
they published it, was on

00:13:59.860 --> 00:14:01.560
designing widgets as well.

00:14:01.560 --> 00:14:03.890
So if you are looking at
designing widgets for Android

00:14:03.890 --> 00:14:06.490
applications, it's a great place
to go and check out.

00:14:06.490 --> 00:14:10.060
On the Android Developers
YouTube channel, look for

00:14:10.060 --> 00:14:13.176
Design in Action, and you'll see
all of their shows there.

00:14:13.176 --> 00:14:15.990
And last week's was all about
designing widgets, and it did

00:14:15.990 --> 00:14:18.820
have a section on the sizing
and the padding you have to

00:14:18.820 --> 00:14:21.300
put on for the Gingerbread ones
and not for the Ice Cream

00:14:21.300 --> 00:14:23.300
Sandwich and above.

00:14:23.300 --> 00:14:27.860
Also, we have the AOSP ADT
template for widgets maybe

00:14:27.860 --> 00:14:30.660
live now, or if not, it's
going live very soon.

00:14:30.660 --> 00:14:33.600
So we got to do, from inside a
project, just right click for

00:14:33.600 --> 00:14:38.122
a New Android Object, and choose
Widget, and then you

00:14:38.122 --> 00:14:39.845
can choose what size, whether
it's configurable, whether

00:14:39.845 --> 00:14:42.510
it's re-sizable, all
that sort of stuff.

00:14:42.510 --> 00:14:45.812
YOSSI ELKRIEF: We've got a reply
on the widget sizes.

00:14:45.812 --> 00:14:51.340
He has a Nexus 7, Moto Xoom,
Galaxy Nexus with default

00:14:51.340 --> 00:14:54.594
launchers, all the same issue.

00:14:54.594 --> 00:14:56.454
RICH HYNDMAN: Hm, interesting.

00:14:56.454 --> 00:14:58.010
I just checked widgets
on here.

00:14:58.010 --> 00:15:00.540
They are coming up with four
cells when they say they're

00:15:00.540 --> 00:15:03.322
four cells.

00:15:03.322 --> 00:15:07.510
AL SUTTON: Is the 250dp what's
being specified as the minimum

00:15:07.510 --> 00:15:09.350
width, or is he just
specifying that

00:15:09.350 --> 00:15:11.030
as a maximum width?

00:15:15.110 --> 00:15:16.966
MATT GAUNT: Doesn't say.

00:15:16.966 --> 00:15:20.980
YOSSI ELKRIEF: But it should,
on both cases, inflate four

00:15:20.980 --> 00:15:23.943
cells and not three?

00:15:23.943 --> 00:15:26.140
RICH HYNDMAN: Yeah, I mean, I'm
running a Nexus 10 here,

00:15:26.140 --> 00:15:28.700
and you've got a Nexus
7, is that right?

00:15:28.700 --> 00:15:29.316
CHRIS BANES: Yeah.

00:15:29.316 --> 00:15:30.940
RICH HYNDMAN: If you look at a
widget that says four cells,

00:15:30.940 --> 00:15:32.190
is it a four-cell widget?

00:15:35.420 --> 00:15:37.270
Some of the social network
buttons or the [INAUDIBLE]?

00:15:47.260 --> 00:15:48.690
That's four cells there?

00:15:48.690 --> 00:15:49.940
CHRIS BANES: Yes.

00:15:51.950 --> 00:15:54.160
STEPHAN LINZNER:
It should be--

00:15:54.160 --> 00:15:54.440
RICH HYNDMAN: Strange.

00:15:54.440 --> 00:15:55.130
What's next?

00:15:55.130 --> 00:15:56.800
We'll keep looking at that
at the same time.

00:16:05.895 --> 00:16:06.877
CHRIS BANES: Four cells.

00:16:06.877 --> 00:16:07.370
RICH HYNDMAN: Four cells.

00:16:07.370 --> 00:16:11.190
MATT GAUNT: Marius has asked,
what do you recommend for use

00:16:11.190 --> 00:16:15.220
in ListView, having rows with
multiple widgets, so you've

00:16:15.220 --> 00:16:20.040
got two TextViews, a button,
et cetera, et cetera.

00:16:20.040 --> 00:16:24.155
Do you recommend a CursorAdapter
or a space

00:16:24.155 --> 00:16:29.140
Adapter with an ArrayList store
of a collection as its

00:16:29.140 --> 00:16:31.330
data source?

00:16:31.330 --> 00:16:32.890
RICH HYNDMAN: Has he got
a database behind it?

00:16:32.890 --> 00:16:34.650
MATT GAUNT: Doesn't say.

00:16:34.650 --> 00:16:37.660
So yeah, it totally depends on
what your data source is

00:16:37.660 --> 00:16:39.132
previously.

00:16:39.132 --> 00:16:41.910
If it's all in a database, it's
probably easier to use a

00:16:41.910 --> 00:16:44.130
CursorAdapter with a
CursorLoader, and then you'll

00:16:44.130 --> 00:16:47.020
get all the freeness, all the
goodness from having it

00:16:47.020 --> 00:16:49.280
automatically update itself.

00:16:49.280 --> 00:16:52.260
If you've got objects, then
creating a BaseAdapter is

00:16:52.260 --> 00:16:53.910
probably the way to go.

00:16:53.910 --> 00:16:55.870
It depends on your data source,
really, what model

00:16:55.870 --> 00:16:57.120
objects you've got.

00:16:58.960 --> 00:17:00.380
RICH HYNDMAN: Yeah, if you want
to do any custom caching,

00:17:00.380 --> 00:17:03.310
just stick a BaseAdapter in and
put some code in there.

00:17:03.310 --> 00:17:04.530
It depends what objects
you're doing.

00:17:04.530 --> 00:17:07.355
If you're doing lots and lots
of bitmaps, it's a good idea

00:17:07.355 --> 00:17:09.339
to at least hold the references
to those bitmaps

00:17:09.339 --> 00:17:13.569
and as they go off the top and
you get them passed back in

00:17:13.569 --> 00:17:17.780
again, load the new images
into the current bitmaps

00:17:17.780 --> 00:17:19.700
instead of recycling the old
ones and loading new ones,

00:17:19.700 --> 00:17:21.605
because you don't want your
heap to get fragmented.

00:17:24.500 --> 00:17:27.640
STEPHAN LINZNER: Yeah, but you
also have to be careful.

00:17:27.640 --> 00:17:29.460
Use a load cache or something.

00:17:34.300 --> 00:17:37.030
Yeah, but I think that it
depends on your data source.

00:17:42.400 --> 00:17:43.650
Do we have any other
questions?

00:17:45.670 --> 00:17:47.310
RICH HYNDMAN: We kind of rocked
through them all in 16

00:17:47.310 --> 00:17:51.240
minutes, or 18 minutes.

00:17:51.240 --> 00:17:52.490
STEPHAN LINZNER: Any questions
in the Hangout?

00:17:55.780 --> 00:17:57.030
RICH HYNDMAN: No.

00:17:58.840 --> 00:17:59.985
YOSSI ELKRIEF: So,
how you doing?

00:17:59.985 --> 00:18:00.620
No, just joking.

00:18:00.620 --> 00:18:02.610
RICH HYNDMAN: Do the guys from
the Co-Creation Hub in Nigeria

00:18:02.610 --> 00:18:05.360
have any questions for us?

00:18:05.360 --> 00:18:06.120
MALE SPEAKER: No, no.

00:18:06.120 --> 00:18:08.340
Not now.

00:18:08.340 --> 00:18:10.340
RICH HYNDMAN: The quality is
much better today than the

00:18:10.340 --> 00:18:11.240
previous time.

00:18:11.240 --> 00:18:13.340
We can hear what you're
saying today.

00:18:13.340 --> 00:18:14.590
MALE SPEAKER: [INAUDIBLE].

00:18:18.500 --> 00:18:19.500
RICH HYNDMAN: OK, we'll
carry on then.

00:18:19.500 --> 00:18:20.690
I'll check the G+ thread.

00:18:20.690 --> 00:18:22.380
I won't check the YouTube
comments because they're

00:18:22.380 --> 00:18:23.185
always useless.

00:18:23.185 --> 00:18:28.060
STEPHAN LINZNER: Yeah, there
are only comments on I/O.

00:18:28.060 --> 00:18:29.580
RICH HYNDMAN: Apparently we're
being cruel doing a Hangout

00:18:29.580 --> 00:18:31.810
whilst some people are suffering
over 500 server

00:18:31.810 --> 00:18:33.210
errors and timeout.

00:18:33.210 --> 00:18:36.310
Sorry about that, Rob, but
consistency is more

00:18:36.310 --> 00:18:37.560
important to us.

00:18:41.290 --> 00:18:43.120
Well, we just didn't want to
shift it by half an hour so

00:18:43.120 --> 00:18:46.360
you could all just come
on and complain to us.

00:18:46.360 --> 00:18:46.980
MATT GAUNT: That's
the real reason.

00:18:46.980 --> 00:18:48.530
RICH HYNDMAN: That's the
real reason, yeah.

00:18:48.530 --> 00:18:49.780
We could have done it half
an hour early, I guess.

00:18:54.210 --> 00:18:56.520
MATT GAUNT: Kitesurfer has
asked, what are the do's and

00:18:56.520 --> 00:18:58.740
don'ts when implementing
a custom

00:18:58.740 --> 00:19:03.290
view group, like ViewPager?

00:19:03.290 --> 00:19:07.990
It's a complex issue to
do this kind of stuff.

00:19:07.990 --> 00:19:09.695
There's no do's and
don'ts to it.

00:19:09.695 --> 00:19:11.010
Have a look at ViewPager.

00:19:11.010 --> 00:19:12.480
It's very, very readable.

00:19:12.480 --> 00:19:17.470
It's a very good example of how
to do a custom view groups

00:19:17.470 --> 00:19:19.570
with an adapter base.

00:19:19.570 --> 00:19:24.010
So I would learn from the
frameworks classes, rather

00:19:24.010 --> 00:19:27.530
than trying to read books or
whatever, because they are

00:19:27.530 --> 00:19:28.320
very readable.

00:19:28.320 --> 00:19:31.130
Well, most are.

00:19:31.130 --> 00:19:33.240
RICH HYNDMAN: Michell Bak has
chimed in saying that actually

00:19:33.240 --> 00:19:36.410
if he uses 250 dps for min
height and min width, he's

00:19:36.410 --> 00:19:39.962
getting three columns
on an SW600 device.

00:19:39.962 --> 00:19:45.590
And he's actually put up 280
to get four columns.

00:19:45.590 --> 00:19:47.090
If multiple people say
it, it's definitely

00:19:47.090 --> 00:19:48.510
worth checking out.

00:19:48.510 --> 00:19:50.780
STEPHAN LINZNER: Yeah, we have
to investigate on it.

00:19:50.780 --> 00:19:52.990
MATT GAUNT: I was under the
impression that the cell sizes

00:19:52.990 --> 00:19:56.720
change based on device
[INAUDIBLE].

00:19:56.720 --> 00:19:58.660
STEPHAN LINZNER: You have
different cell sizes if you're

00:19:58.660 --> 00:20:01.660
in Portrait and if you're
in Landscape.

00:20:01.660 --> 00:20:03.090
RICH HYNDMAN: But the minimum
should always be the

00:20:03.090 --> 00:20:05.100
same, the min width.

00:20:05.100 --> 00:20:07.420
Should be number of cells
[INAUDIBLE] dps.

00:20:11.110 --> 00:20:14.270
We shall investigate and
get back to you.

00:20:14.270 --> 00:20:16.230
MATT GAUNT: Thorsten in Germany
has asked about the

00:20:16.230 --> 00:20:21.180
Geocoder API, specifically
getFromLocation.

00:20:21.180 --> 00:20:23.660
And he seems to be seeing
that you're getting some

00:20:23.660 --> 00:20:26.705
intermittent issues with not
getting any results back or

00:20:26.705 --> 00:20:30.270
500 issues.

00:20:30.270 --> 00:20:30.750
Yeah.

00:20:30.750 --> 00:20:33.890
There's not much
to say, really.

00:20:33.890 --> 00:20:37.660
That server, I seem to remember
there being something

00:20:37.660 --> 00:20:41.860
in the docs about you won't
always get replies.

00:20:41.860 --> 00:20:43.950
RICH HYNDMAN: Yeah, we've had
a few cases of this before.

00:20:43.950 --> 00:20:47.270
And the recommendation has often
been to use the Android

00:20:47.270 --> 00:20:51.920
Geocoder API, and then if you
don't get a response, or you

00:20:51.920 --> 00:20:54.240
get an unsatisfactory response,
use the web API as a

00:20:54.240 --> 00:20:56.070
backup mechanism.

00:20:56.070 --> 00:20:58.400
There's definitely some cases,
I can't remember what the

00:20:58.400 --> 00:21:00.500
exact cases are, that you'll
just fall back on the web.

00:21:05.540 --> 00:21:07.220
MATT GAUNT: It's quite an old
API, though, isn't it?

00:21:07.220 --> 00:21:07.410
RICH HYNDMAN: It is.

00:21:07.410 --> 00:21:09.720
Reverse lookup for addresses
and things.

00:21:09.720 --> 00:21:10.970
MATT GAUNT: Yeah.

00:21:13.250 --> 00:21:13.830
What was the case?

00:21:13.830 --> 00:21:16.126
RICH HYNDMAN: It was something
to do with Wi-Fi or cell

00:21:16.126 --> 00:21:19.650
networks, can't remember
which one.

00:21:19.650 --> 00:21:20.770
MATT GAUNT: Sorry, we can't
really answer that.

00:21:20.770 --> 00:21:22.940
RICH HYNDMAN: No, but there is
the web API, which is more

00:21:22.940 --> 00:21:25.590
reliable and worth
falling back on.

00:21:25.590 --> 00:21:26.370
MATT GAUNT: Google Maps.

00:21:26.370 --> 00:21:27.620
RICH HYNDMAN: Yep.

00:21:35.650 --> 00:21:36.900
Anything else?

00:21:42.400 --> 00:21:45.360
Anything else from inside the
Hangout, as we're seeing what

00:21:45.360 --> 00:21:45.730
new has appeared?

00:21:45.730 --> 00:21:47.030
We've got 19 questions now.

00:21:47.030 --> 00:21:50.235
We started the session with nine
questions, and 10 more

00:21:50.235 --> 00:21:51.730
have appeared during
the session.

00:21:51.730 --> 00:21:52.920
So you'll have to--

00:21:52.920 --> 00:21:54.170
MATT GAUNT: It's all
the I/O people.

00:21:56.840 --> 00:21:58.030
RICH HYNDMAN: Jacek's asked
me if there's any way of

00:21:58.030 --> 00:21:59.850
customizing the included
Google apps--

00:21:59.850 --> 00:22:01.360
Google Talk, Google
Play Store--

00:22:01.360 --> 00:22:03.390
with customized look to feel
more like commercial Android

00:22:03.390 --> 00:22:03.780
powered devices?

00:22:03.780 --> 00:22:05.130
No, unfortunately not.

00:22:05.130 --> 00:22:07.100
Of course, Google Talk, we have
a full API for Google

00:22:07.100 --> 00:22:09.560
Talk, Yammer-based or
whatever it is.

00:22:09.560 --> 00:22:09.850
MATT GAUNT: Jabber.

00:22:09.850 --> 00:22:10.500
RICH HYNDMAN: Jabber?

00:22:10.500 --> 00:22:12.340
So you can write your
own Google Talk

00:22:12.340 --> 00:22:13.360
client if you want.

00:22:13.360 --> 00:22:17.170
There are several out there, and
make it look nice themed.

00:22:17.170 --> 00:22:20.580
Play Store doesn't have an API,
so you have to use the

00:22:20.580 --> 00:22:22.329
Google branded Play Store.

00:22:26.730 --> 00:22:29.050
But for all these kind of
questions where you asked who

00:22:29.050 --> 00:22:34.370
to contact to talk about
support, it is if you go to

00:22:34.370 --> 00:22:37.740
source.Android.c
om/compatibility, there's a

00:22:37.740 --> 00:22:40.790
link at the bottom of the page
for joining the ecosystem, and

00:22:40.790 --> 00:22:46.500
all of these things fall under
manufacturers that have passed

00:22:46.500 --> 00:22:48.170
the Compatibility Test Suite
and become part of the

00:22:48.170 --> 00:22:53.030
ecosystem, and then can talk
to their Partner Manager,

00:22:53.030 --> 00:22:54.280
which is also nontrivial.

00:22:57.520 --> 00:23:00.710
Did you find any more whilst
I was jabbering on?

00:23:00.710 --> 00:23:02.380
MATT GAUNT: I've got one, and
Stephan will read it.

00:23:02.380 --> 00:23:03.630
You've got anything, Stephan?

00:23:06.280 --> 00:23:07.810
STEPHAN LINZNER: We have
a question right here.

00:23:07.810 --> 00:23:11.260
I have two singleTask
activities, A and B. B is

00:23:11.260 --> 00:23:16.720
started from A, and I want
from B to kill the app.

00:23:16.720 --> 00:23:19.550
System.exit and
Process.killProcess will

00:23:19.550 --> 00:23:23.250
result in closing B and
restarting A. Is there a way

00:23:23.250 --> 00:23:25.850
to kill the whole app?

00:23:25.850 --> 00:23:29.250
I think we've said this
multiple times before.

00:23:29.250 --> 00:23:32.540
It's very, very bad practice to
kill your app because the

00:23:32.540 --> 00:23:38.280
run time is actually managing
your app, and your app is only

00:23:38.280 --> 00:23:42.513
killed in the case that there
are no resources and we have

00:23:42.513 --> 00:23:43.840
to kill the process.

00:23:43.840 --> 00:23:49.240
So you have to have a very
good reason to call the

00:23:49.240 --> 00:23:51.030
functions you just
mentioned here.

00:23:51.030 --> 00:23:58.160
So in general, you should find
a way for it and really not

00:23:58.160 --> 00:24:01.130
kill your process or
exiting your app.

00:24:01.130 --> 00:24:04.200
AL SUTTON: One of the ways of
doing it is if both A and B

00:24:04.200 --> 00:24:06.850
register a broadcast listener,
and then you broadcast an

00:24:06.850 --> 00:24:09.340
intent when you want to shut
down and just call Finish in

00:24:09.340 --> 00:24:10.380
each activity.

00:24:10.380 --> 00:24:12.720
That way, you're not killing
the actual process, you're

00:24:12.720 --> 00:24:13.970
just killing off
the activities.

00:24:17.430 --> 00:24:18.950
STEPHAN LINZNER: Just a
normal way you do it.

00:24:18.950 --> 00:24:22.745
You would just call Finish on
both of the activities.

00:24:26.231 --> 00:24:27.550
RICH HYNDMAN: All right, we have
a question from Constance

00:24:27.550 --> 00:24:29.290
at the Co-Creation Hub.

00:24:33.070 --> 00:24:33.630
CONSTANCE: Hello.

00:24:33.630 --> 00:24:35.480
RICH HYNDMAN: Hi.

00:24:35.480 --> 00:24:37.650
CONSTANCE: Constance.

00:24:37.650 --> 00:24:41.920
I wanted to find out, what's
your take on using

00:24:41.920 --> 00:24:45.584
table-oriented architecture for
data centric Android apps?

00:24:45.584 --> 00:24:49.440
I just read an article about
it, and talking about this

00:24:49.440 --> 00:24:51.015
[INAUDIBLE]

00:24:51.015 --> 00:24:53.590
when [INAUDIBLE]

00:24:53.590 --> 00:24:54.840
apps for [INAUDIBLE].

00:24:56.970 --> 00:24:59.550
We have an app that [INAUDIBLE],
and we're

00:24:59.550 --> 00:25:04.030
thinking of [INAUDIBLE],
considering if it would be

00:25:04.030 --> 00:25:09.010
nice to switch and use
table-oriented architecture.

00:25:09.010 --> 00:25:14.640
[INAUDIBLE] if it's possible
for mobile applications, or

00:25:14.640 --> 00:25:17.532
what's your take on it?

00:25:17.532 --> 00:25:19.350
RICH HYNDMAN: After what I said
before, we are having a

00:25:19.350 --> 00:25:20.750
little trouble hearing.

00:25:20.750 --> 00:25:22.090
MATT GAUNT: [INAUDIBLE].

00:25:22.090 --> 00:25:23.990
STEPHAN LINZNER: Can you repeat
the question, or write

00:25:23.990 --> 00:25:25.786
it as a comment?

00:25:25.786 --> 00:25:27.510
RICH HYNDMAN: Yeah, could you
just put the gist of the

00:25:27.510 --> 00:25:30.880
message in a comment for us, and
we'll read it out, unless

00:25:30.880 --> 00:25:31.840
anyone else in the Hangout
picked it up?

00:25:31.840 --> 00:25:35.000
STEPHAN LINZNER: Can you scroll
down on the right?

00:25:35.000 --> 00:25:36.610
RICH HYNDMAN: You were looking
into something, and you're

00:25:36.610 --> 00:25:37.830
writing an application.

00:25:37.830 --> 00:25:38.940
MATT GAUNT: Oh, there we go.

00:25:38.940 --> 00:25:39.440
STEPHAN LINZNER: What's
your take on--

00:25:39.440 --> 00:25:41.345
RICH HYNDMAN: Using
table-oriented architecture

00:25:41.345 --> 00:25:45.080
for data centric Android apps?

00:25:45.080 --> 00:25:46.550
MATT GAUNT: I don't even know
what table-oriented

00:25:46.550 --> 00:25:49.850
architecture is.

00:25:49.850 --> 00:25:51.900
STEPHAN LINZNER: You should
always provide the best user

00:25:51.900 --> 00:25:54.160
experience per form factor.

00:25:54.160 --> 00:25:59.660
So if you have a data centric
app and showing some content,

00:25:59.660 --> 00:26:04.640
you should always make sure it
runs across all the devices,

00:26:04.640 --> 00:26:09.020
from your smart phone to the
tablet, and use different

00:26:09.020 --> 00:26:13.830
layouts for that, and think
about what is the best way I

00:26:13.830 --> 00:26:18.240
could present my content
to the user.

00:26:18.240 --> 00:26:22.880
So was this your
question, or--

00:26:22.880 --> 00:26:24.130
CONSTANCE: Yeah.

00:26:27.855 --> 00:26:31.890
When writing data centric apps,
how do you go about it,

00:26:31.890 --> 00:26:34.600
personally?

00:26:34.600 --> 00:26:37.960
MATT GAUNT: So table-centric
apps.

00:26:37.960 --> 00:26:39.190
RICH HYNDMAN: How do you go
about writing data centric

00:26:39.190 --> 00:26:41.086
apps, personally?

00:26:41.086 --> 00:26:42.917
CONSTANCE: Your experiences
with that.

00:26:45.720 --> 00:26:48.780
CHRIS BANES: It does depend
on what the use case is.

00:26:48.780 --> 00:26:53.308
You'll have some where it's
fine to cache [INAUDIBLE].

00:26:53.308 --> 00:26:56.755
You'll have other scenarios, if
you look at stock exchange,

00:26:56.755 --> 00:27:00.970
the information is stale as soon
as you've got it almost.

00:27:00.970 --> 00:27:04.970
So again, it's a case of you've
got to think of, what's

00:27:04.970 --> 00:27:06.520
the best way of transferring
the data?

00:27:06.520 --> 00:27:07.780
What time can you store it?

00:27:07.780 --> 00:27:09.000
Does it ever need updating?

00:27:09.000 --> 00:27:13.500
At what point does it become
useless, kind of, to the user?

00:27:13.500 --> 00:27:17.300
It does depend on the use case,
and there's a lot of

00:27:17.300 --> 00:27:19.310
variation in that,
in my opinion.

00:27:19.310 --> 00:27:21.370
RICH HYNDMAN: Is the data in
your application static data,

00:27:21.370 --> 00:27:23.720
or is it very dynamic?

00:27:23.720 --> 00:27:26.580
CONSTANCE: Dynamic, so the data
will have to be stored on

00:27:26.580 --> 00:27:28.870
the device [INAUDIBLE].

00:27:28.870 --> 00:27:30.590
RICH HYNDMAN: So you'll be
frequently updating the data,

00:27:30.590 --> 00:27:33.390
storing it on the device, and
showing it to the user?

00:27:33.390 --> 00:27:36.105
CONSTANCE: Yes.

00:27:36.105 --> 00:27:38.240
RICH HYNDMAN: And there's a
lot of data, I take it?

00:27:43.080 --> 00:27:45.080
CONSTANCE: Sorry, I didn't
hear what you said.

00:27:45.080 --> 00:27:47.070
Can you repeat the statement?

00:27:47.070 --> 00:27:48.530
STEPHAN LINZNER: I think
Matt is right.

00:27:48.530 --> 00:27:51.450
You have to come up with a
strategy on how you cache

00:27:51.450 --> 00:27:54.135
data, when are you fetching
data, and all

00:27:54.135 --> 00:27:55.510
these kind of things.

00:27:55.510 --> 00:27:59.170
So what you can do in your
case, maybe if you have a

00:27:59.170 --> 00:28:03.300
widget or something, you can
think about a strategy using

00:28:03.300 --> 00:28:08.385
some exponential backup
logarithm and pull the data.

00:28:11.740 --> 00:28:14.880
I don't know how often you have
to refresh your data, but

00:28:14.880 --> 00:28:18.170
you can use a service in the
background and pull data from

00:28:18.170 --> 00:28:19.420
time to time.

00:28:25.630 --> 00:28:28.630
But in general, you have to look
at your requirements and

00:28:28.630 --> 00:28:34.390
then from there, judge on your
strategy for caching when

00:28:34.390 --> 00:28:37.150
you're loading data, when you're
doing pre-fetching, and

00:28:37.150 --> 00:28:37.830
all this kind of thing.

00:28:37.830 --> 00:28:41.210
It's important because it also
affects battery life, so you

00:28:41.210 --> 00:28:42.760
also have to be careful there.

00:28:45.754 --> 00:28:47.750
CONSTANCE: Thank
you very much.

00:28:47.750 --> 00:28:48.200
RICH HYNDMAN: No problem.

00:28:48.200 --> 00:28:50.690
And one minute before we finish
today, Mr. Terrence

00:28:50.690 --> 00:28:51.950
Eden has joined the chat.

00:28:51.950 --> 00:28:52.550
Hey there, Terrence.

00:28:52.550 --> 00:28:54.651
Good to see you.

00:28:54.651 --> 00:28:56.150
No microphone enabled today.

00:28:56.150 --> 00:28:57.450
TERRENCE: Oh well, never mind.

00:28:57.450 --> 00:28:59.450
RICH HYNDMAN: Oh no,
there you go.

00:28:59.450 --> 00:29:01.680
Did you have a question you
wanted to sneak in in the last

00:29:01.680 --> 00:29:03.140
minute of the conversation?

00:29:03.140 --> 00:29:03.650
TERRENCE EDEN: I did.

00:29:03.650 --> 00:29:06.890
I'm investigating using
Bluetooth, so I've got a new

00:29:06.890 --> 00:29:09.570
DB port in my car so I can plug
a Bluetooth thing into

00:29:09.570 --> 00:29:11.590
that, and I can communicate
with Android.

00:29:11.590 --> 00:29:15.600
What I can't do is use AVRCP,
which allows me to update the

00:29:15.600 --> 00:29:16.810
head end of my phone.

00:29:16.810 --> 00:29:19.220
Now, I've seen some devices,
like some Samsungs and some

00:29:19.220 --> 00:29:22.650
HDCs, have a Bluetooth stack
which do have that.

00:29:22.650 --> 00:29:26.440
I just wondered if there's any
official way in stock Android

00:29:26.440 --> 00:29:30.850
of doing anything useful
with Bluetooth.

00:29:30.850 --> 00:29:32.350
RICH HYNDMAN: If you go to the
Bluetooth page in the API

00:29:32.350 --> 00:29:35.190
docs, it shows you which
profiles are officially

00:29:35.190 --> 00:29:37.140
supported in which versions
of Android.

00:29:37.140 --> 00:29:40.525
We have a doc which
lists those.

00:29:40.525 --> 00:29:43.740
So the audio profile, A2DP, is
supported, but you're only

00:29:43.740 --> 00:29:48.220
guaranteed to have that lowest
quality audio supported.

00:29:48.220 --> 00:29:48.830
MATT GAUNT: Yeah, I can't
remember what the codec's

00:29:48.830 --> 00:29:50.570
called, but [INAUDIBLE].

00:29:50.570 --> 00:29:53.180
RICH HYNDMAN: Yeah, you can ask
the device if there are

00:29:53.180 --> 00:29:55.160
better codecs on there, and
most of them will have.

00:29:55.160 --> 00:29:57.710
But in terms of video,
there's no default

00:29:57.710 --> 00:29:59.280
support in Android 4.

00:29:59.280 --> 00:30:02.710
TERRENCE EDEN: I'm sorry, not
for video, but AVRCP allows

00:30:02.710 --> 00:30:07.040
you to send messages, like the
track that you're playing.

00:30:07.040 --> 00:30:10.285
I mean, we've been asking for
this since 2009 on the Google

00:30:10.285 --> 00:30:13.160
bug thing, and haven't
heard any response.

00:30:13.160 --> 00:30:17.560
My six-year-old BlackBerry can
do it, so I'm just wondering

00:30:17.560 --> 00:30:21.190
if there's any way to get
that into Android.

00:30:21.190 --> 00:30:22.850
STEPHAN LINZNER: Have you always
tried to use the Blues

00:30:22.850 --> 00:30:27.880
library directly
in native code?

00:30:27.880 --> 00:30:30.970
MATT GAUNT: I think it's been
compiled in there as a module.

00:30:30.970 --> 00:30:34.250
STEPHAN LINZNER: It must be in
there because we are using.

00:30:34.250 --> 00:30:37.570
Have you tried if you can do it
from native code, or is it

00:30:37.570 --> 00:30:40.210
just not supported?

00:30:40.210 --> 00:30:41.820
TERRENCE EDEN: If you look in
the Source Code for Android,

00:30:41.820 --> 00:30:47.430
it says, using the Blues API
version 1.0 for now, and that

00:30:47.430 --> 00:30:48.360
was a couple of years ago.

00:30:48.360 --> 00:30:51.340
So the native Blues doesn't
have it, which is why I'm

00:30:51.340 --> 00:30:53.780
wondering if there's any way to
go directly to Bluetooth.

00:30:53.780 --> 00:30:59.610
If Google can't support a
five-year-old standard, what

00:30:59.610 --> 00:31:02.790
else can we do?

00:31:02.790 --> 00:31:04.220
AL SUTTON: Make a contribution
to the

00:31:04.220 --> 00:31:06.120
Android Open Source project?

00:31:06.120 --> 00:31:08.010
RICH HYNDMAN: Bingo.

00:31:08.010 --> 00:31:10.560
TERRENCE EDEN: So it is in
CyanogenMod, so it has been

00:31:10.560 --> 00:31:12.570
submitted to AOSP about
two years ago.

00:31:12.570 --> 00:31:16.380
AL SUTTON: No, that's not
necessarily right.

00:31:16.380 --> 00:31:19.770
CyanogenMod is a separate
fork-off of AOSP, so there may

00:31:19.770 --> 00:31:22.935
not have been a contribution
given to the AOSP guys.

00:31:22.935 --> 00:31:24.285
TERRENCE EDEN: I will
check and see if I

00:31:24.285 --> 00:31:25.880
can push it on them.

00:31:30.744 --> 00:31:33.620
RICH HYNDMAN: Yeah, we'll just
have to wait and see, I guess,

00:31:33.620 --> 00:31:36.060
what the next version of Android
holds for Bluetooth,

00:31:36.060 --> 00:31:39.630
but we clearly can't
pre-announce anything or talk

00:31:39.630 --> 00:31:42.954
about future releases,
so I have no idea.

00:31:42.954 --> 00:31:45.180
I hope that somebody
has picked up your

00:31:45.180 --> 00:31:46.910
six-year-old issue.

00:31:46.910 --> 00:31:48.910
From the day that Android
started, you are clearly

00:31:48.910 --> 00:31:51.210
banging on for this one.

00:31:51.210 --> 00:31:53.280
Thanks for joining us and asking
our final question of

00:31:53.280 --> 00:31:55.410
the day, Terrence.

00:31:55.410 --> 00:31:57.500
At least the profile
of the issue has

00:31:57.500 --> 00:31:59.980
been raised even higher.

00:31:59.980 --> 00:32:00.840
Thanks everyone else
for joining us

00:32:00.840 --> 00:32:02.040
in the Hangout today.

00:32:02.040 --> 00:32:03.900
We'll be back at
the same time--

00:32:03.900 --> 00:32:06.040
will we be back at the
same time next week?

00:32:06.040 --> 00:32:07.250
That's a good question.

00:32:07.250 --> 00:32:10.264
The team is traveling next week,
and two o'clock is a

00:32:10.264 --> 00:32:11.175
very awkward time in America.

00:32:11.175 --> 00:32:13.100
We'll make an announcement
sometime soon about whether

00:32:13.100 --> 00:32:17.070
we'll be at the same time next
week, and that's all for us.

00:32:17.070 --> 00:32:18.180
Thanks very much for joining.

00:32:18.180 --> 00:32:18.760
MATT GAUNT: Cheers, guys.

00:32:18.760 --> 00:32:19.710
CHRIS BANES: Thanks, guys.

00:32:19.710 --> 00:32:20.916
AL SUTTON: Bye.

00:32:20.916 --> 00:32:22.166
LEONID OLEVSKY: Bye.

