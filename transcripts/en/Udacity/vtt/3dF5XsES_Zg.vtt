WEBVTT
Kind: captions
Language: en

00:00:00.240 --> 00:00:03.110
So the first step of Tomasulo's algorithm that we will consider is issue.

00:00:03.110 --> 00:00:08.070
So what happens during issue? We take the next instruction in program order

00:00:08.070 --> 00:00:11.540
from the instruction queue. This has to be done in program order for

00:00:11.540 --> 00:00:15.570
register renaming to work correctly. We then need to determine where the inputs

00:00:15.570 --> 00:00:18.740
of the instructions are going to come from. Are they already in the register

00:00:18.740 --> 00:00:22.470
file or are they going to be produced by some of the instructions that still

00:00:22.470 --> 00:00:27.280
hasn't broadcast its result? And if we need to wait for instruction, which one?

00:00:28.520 --> 00:00:34.140
So there will be some sort of RAT table there. We're then going to get a free or

00:00:34.140 --> 00:00:36.870
available reservation station of the correct kind.

00:00:36.870 --> 00:00:39.580
Note that there are some reservation stations that are for the adder,

00:00:39.580 --> 00:00:42.890
some of them are for the multiplier. So if this is an add instruction,

00:00:42.890 --> 00:00:46.879
then we really need to find a available reservation station in front of

00:00:46.879 --> 00:00:50.920
the other. If all of the reservation stations are busy at this point,

00:00:50.920 --> 00:00:54.000
meaning they're already used by some other instructions and they're, those

00:00:54.000 --> 00:00:57.840
instructions haven't left yet, then we simply don't issue anything this cycle.

00:00:57.840 --> 00:01:01.100
And in Tomasulo's algorithm, they were issuing one instruction at a time, so,

00:01:01.100 --> 00:01:03.780
so they, they would just issue one instruction per cycle.

00:01:03.780 --> 00:01:06.690
We would put the instruction in the reservation station then.

00:01:06.690 --> 00:01:09.920
And we will tag the destination register of the instruction so

00:01:09.920 --> 00:01:12.970
that the result, when it's produced, goes there and also so

00:01:12.970 --> 00:01:17.470
that instructions that want that register in the future will know which

00:01:17.470 --> 00:01:20.522
instruction is going to produce this value if it has already not been produced.

