WEBVTT
Kind: captions
Language: en

00:00:03.980 --> 00:00:05.700
VIJAY BANGARU: Good
morning everyone.

00:00:05.700 --> 00:00:06.960
Welcome to our session.

00:00:06.400 --> 00:00:07.880
My name is Vijay Bangaru.

00:00:07.500 --> 00:00:10.618
I'm a Product Manager
on Google Docs.

00:00:10.618 --> 00:00:12.460
And with me today I have one of
my colleagues, Eric Bidelman,

00:00:12.460 --> 00:00:14.918
who will also speak.

00:00:14.918 --> 00:00:17.720
And we also have a friend of
ours, Matt Tonkin from Memeo,

00:00:17.720 --> 00:00:21.640
who will also help you
understand new ways that you

00:00:21.640 --> 00:00:24.018
can connect your enterprise
applications with

00:00:24.018 --> 00:00:25.038
Google Docs and sites.

00:00:25.980 --> 00:00:29.778
So before we jump into it we
are our usual live notes and

00:00:29.778 --> 00:00:32.478
questions are going to be at
the Wave, so pull that up.

00:00:32.478 --> 00:00:35.220
Get your questions in there
and get them voted on.

00:00:35.220 --> 00:00:40.440
We'll address all of those
at the end of the talk.

00:00:40.440 --> 00:00:44.940
So today we are talking about
the Documents List API, which

00:00:44.940 --> 00:00:48.080
is the programmatic way
for you to access your

00:00:48.080 --> 00:00:49.180
user Google documents.

00:00:49.180 --> 00:00:51.680
And how many people here
have used the API or are

00:00:51.680 --> 00:00:53.880
somewhat familiar with it?

00:00:53.880 --> 00:00:54.380
All right, good.

00:00:54.380 --> 00:00:55.580
A pretty good bunch.

00:00:55.580 --> 00:00:58.500
We're also going to talk about
the sites data API, which again

00:00:58.500 --> 00:01:01.780
is the programmatic way to
access Google Sites and this is

00:01:01.780 --> 00:01:03.140
fairly new, it came
out in September.

00:01:03.140 --> 00:01:06.480
And how many folks
have used that one?

00:01:06.480 --> 00:01:09.360
OK, good so we got a
good mix of people.

00:01:09.620 --> 00:01:13.298
And as you probably know these
are both part of the family of

00:01:13.298 --> 00:01:15.860
Google APIs, the GData APIs.

00:01:16.420 --> 00:01:18.040
So were going to start
with a little bit of

00:01:18.040 --> 00:01:19.278
an overview on those.

00:01:19.278 --> 00:01:22.958
So this is a common
standard for Google.

00:01:23.700 --> 00:01:26.900
A ton of our applications
offer this API and it ranges

00:01:26.900 --> 00:01:28.480
in terms of offering.

00:01:28.480 --> 00:01:31.518
In addition to the Docs and
Sites ones you have your

00:01:31.518 --> 00:01:34.318
YouTube one, you have your
Analytics one and so on.

00:01:34.318 --> 00:01:36.920
So there's a lot of
great things here.

00:01:37.440 --> 00:01:40.400
The protocol itself is all
based off of common standards

00:01:40.400 --> 00:01:43.658
and open protocols that we
all know and love already.

00:01:43.658 --> 00:01:47.600
So you have your restful API
with your get/post/put/delete

00:01:47.600 --> 00:01:49.200
for your full CRUD operations.

00:01:49.200 --> 00:01:52.318
You have the ATOM publishing
protocol and we do

00:01:52.318 --> 00:01:53.540
extend it in a few ways.

00:01:53.540 --> 00:01:57.060
Most importantly where you're
extending the opposition and

00:01:57.060 --> 00:02:01.620
versioning into that protocol
so that that tricky stuff is

00:02:01.620 --> 00:02:04.400
just built into the standard
already and you guys don't have

00:02:04.400 --> 00:02:06.400
to waste your time building it.

00:02:06.400 --> 00:02:10.298
The protocol itself of course
is XML based, but we provide

00:02:10.298 --> 00:02:13.058
client libraries in just about
every flavor you could want.

00:02:13.058 --> 00:02:16.058
And we find most of the
developers are just using these

00:02:16.058 --> 00:02:18.618
libraries instead of speaking
the protocol directly.

00:02:18.400 --> 00:02:21.460
And Memeo is a good example of
this and they'll talk about

00:02:21.460 --> 00:02:22.678
that in a little bit as well.

00:02:22.678 --> 00:02:25.098
And in addition to the
libraries that you can find at

00:02:25.098 --> 00:02:28.858
code.google.com we got the
documentation and samples.

00:02:28.858 --> 00:02:30.998
So we hope we have it set up
so you can hit the ground

00:02:30.998 --> 00:02:31.758
running on these APIs.

00:02:33.578 --> 00:02:37.438
So once you do have the APIs
you ask yourself, what

00:02:37.438 --> 00:02:38.458
can I build with them?

00:02:38.458 --> 00:02:41.560
And really the answer is
pretty much anything.

00:02:42.900 --> 00:02:45.560
Especially with Docs and Sites
we try really hard to make it

00:02:45.560 --> 00:02:48.860
so that if you wanted for
whatever reason, you could

00:02:48.860 --> 00:02:51.380
rebuild our applications
completely on the API.

00:02:51.438 --> 00:02:54.400
The same functionality you get
in the app you're going to

00:02:54.400 --> 00:02:56.180
be able to get in the API.

00:02:56.180 --> 00:02:58.098
So that means you can
start building various

00:02:58.098 --> 00:02:59.900
mashups and stuff.

00:02:59.900 --> 00:03:02.540
And one I thought of this
morning that I wish I had is

00:03:02.540 --> 00:03:05.458
you know, when I look at my
weeks calendar and there's

00:03:05.458 --> 00:03:07.110
several meetings in there I
wish there was a button where

00:03:07.110 --> 00:03:11.320
it just auto-generated meeting
notes and agendas

00:03:11.320 --> 00:03:12.100
and stuff for me.

00:03:12.100 --> 00:03:16.080
So it looks, it'll find my
appointments, it'll find the

00:03:16.080 --> 00:03:19.140
contacts in there, it'll
create a docs, set the title

00:03:19.140 --> 00:03:22.604
appropriate with the same name
as the calendar invite, share

00:03:22.604 --> 00:03:24.898
it to everyone and we're done.

00:03:24.718 --> 00:03:28.480
And if that does it for my
entire weeks of meetings I

00:03:28.480 --> 00:03:30.680
just saved 30, 40 minutes
of work probably.

00:03:30.680 --> 00:03:34.000
And so that's a very simple
case of things you can do

00:03:34.000 --> 00:03:38.618
combining these apps to provide
nice experience for your users.

00:03:38.618 --> 00:03:40.638
So why Docs and Sites?

00:03:40.638 --> 00:03:44.598
You guys probably know this
already, but when you get down

00:03:44.598 --> 00:03:46.680
to it in terms of a
productivity suite that gives

00:03:46.680 --> 00:03:49.058
you collaboration and
accessibility this

00:03:49.058 --> 00:03:50.518
is one of the best.

00:03:50.518 --> 00:03:54.438
In terms of collaboration, we
keep a single copy that is the

00:03:54.438 --> 00:03:57.000
master copy in the cloud so
you don't have to e-mail

00:03:57.000 --> 00:03:58.020
versions back and forth.

00:03:58.020 --> 00:04:00.760
You don't have to worry about
if you have the right version.

00:04:00.760 --> 00:04:02.798
All that's going to
be managed for you.

00:04:02.798 --> 00:04:05.038
And in terms of accessibility,
it's in the cloud.

00:04:05.038 --> 00:04:06.638
If you can access the
cloud it doesn't matter

00:04:06.638 --> 00:04:08.858
which device you have.

00:04:08.858 --> 00:04:09.078
Doesn't matter where you are.

00:04:09.078 --> 00:04:12.498
It doesn't matter what time it
is, you have your content.

00:04:12.498 --> 00:04:17.500
And that simplifies even
mundane decisions like when I'm

00:04:17.500 --> 00:04:21.138
about to get on the plane,
which of these seven laptops

00:04:21.138 --> 00:04:23.160
tablets, iPads and
phones do I pick?

00:04:23.160 --> 00:04:23.638
It doesn't matter.

00:04:23.638 --> 00:04:25.958
They can all access it,
so you just pick one

00:04:25.958 --> 00:04:27.680
and you're good to go.

00:04:27.778 --> 00:04:31.740
And you combine into that that
these are web applications.

00:04:31.740 --> 00:04:34.720
So the great thing about web
applications is you have a

00:04:34.720 --> 00:04:36.818
really nice feature
development cycle.

00:04:36.818 --> 00:04:38.018
We push features all the time.

00:04:38.018 --> 00:04:40.460
We push bugs fixes
all the time.

00:04:40.460 --> 00:04:44.860
The pace is much, much faster
than a traditional client app.

00:04:44.860 --> 00:04:48.120
And then you add in the cost
and you put all those things

00:04:48.120 --> 00:04:51.552
together including the low
cost, we're finding that a ton

00:04:51.552 --> 00:04:53.220
of users are gravitating here.

00:04:53.220 --> 00:04:55.100
More are coming each day.

00:04:55.100 --> 00:04:57.600
So as developers, this is a
great platform for you guys

00:04:57.600 --> 00:05:02.300
to develop on to capture
some of these users.

00:05:02.300 --> 00:05:05.778
So we'll jump into a bit on the
Documents List API itself.

00:05:07.198 --> 00:05:09.258
Last year when we were here we
announced a bunch of features.

00:05:09.558 --> 00:05:13.600
We had folder management,
sharing, some more metadata,

00:05:13.600 --> 00:05:17.480
some export capabilities,
advanced queries and in that

00:05:17.480 --> 00:05:21.600
year we've been really busy and
a big milestone we had was

00:05:21.600 --> 00:05:23.698
Version 3.0, which came
out in September.

00:05:23.698 --> 00:05:28.338
So in addition to features and
bug fixes we added speed for

00:05:28.338 --> 00:05:31.920
both you, the developer and we
also did refactoring for

00:05:31.920 --> 00:05:34.798
ourselves to make it easier to
launch more features and this

00:05:34.798 --> 00:05:36.480
should be apparent hopefully as
I walk through some

00:05:36.480 --> 00:05:38.258
of these slides.

00:05:38.258 --> 00:05:39.798
So 3.0 this was in September.

00:05:39.798 --> 00:05:43.898
Some of the headline features
here is additional support for

00:05:43.898 --> 00:05:45.740
people writing sync clients and
when Matt's up here he'll

00:05:45.740 --> 00:05:47.458
tell you all about that.

00:05:47.720 --> 00:05:50.498
The ability to upload
and download PDFs.

00:05:52.940 --> 00:05:54.898
And so those are some
of the features.

00:05:54.180 --> 00:05:58.180
we included shared folders and
in terms of sort of bug fixes

00:05:58.180 --> 00:06:02.378
and rounding out the corners
you used to just be able to

00:06:02.378 --> 00:06:05.898
move a document to the trash in
the API, you couldn't actually

00:06:05.898 --> 00:06:09.558
get it out of the trash can and
away for good, so we added

00:06:09.558 --> 00:06:12.840
permanently deleting documents
and then the nicest feature

00:06:12.840 --> 00:06:15.100
there, speed. 40% faster.

00:06:15.100 --> 00:06:16.938
So we're very proud of that.

00:06:16.938 --> 00:06:18.878
Well we didn't really
rest on that.

00:06:18.878 --> 00:06:21.300
So since then we've added
a bunch of more stuff and

00:06:21.300 --> 00:06:23.120
we're going to go into
a lot of these details.

00:06:23.120 --> 00:06:28.018
We added OCR, we added
translations, we added

00:06:28.018 --> 00:06:31.660
resumable uploads, so you can
upload large files to the

00:06:31.660 --> 00:06:33.698
cloud and then the ability to
store those files there.

00:06:33.698 --> 00:06:38.198
So upload any file, which is
one of our headline features.

00:06:38.198 --> 00:06:41.098
So before we go into the
details on those features

00:06:41.098 --> 00:06:43.198
we should talk about
where the magic happens.

00:06:43.198 --> 00:06:46.898
And the magic for this API all
happens at the feeds level.

00:06:46.898 --> 00:06:48.120
So docs.google.com/feeds.

00:06:50.078 --> 00:06:52.178
And basically we have a set of
feeds that'll give you

00:06:52.178 --> 00:06:54.418
different bits of functionality
and it's all pretty

00:06:54.418 --> 00:06:55.138
straightforward.

00:06:55.138 --> 00:07:00.600
So the main feed is going
to let you create batch,

00:07:00.600 --> 00:07:01.980
update all your documents.

00:07:01.980 --> 00:07:04.080
Your basics CRUD
operations are there.

00:07:04.080 --> 00:07:07.738
The ACL feed is just
like it sounds like.

00:07:07.738 --> 00:07:10.618
This is going to let you do
all the sharing operations

00:07:10.618 --> 00:07:11.018
that you'd like to do.

00:07:11.018 --> 00:07:15.060
The media feed lets you update
the documents content.

00:07:15.060 --> 00:07:17.720
The revisions feed,
surprisingly enough.

00:07:17.720 --> 00:07:19.018
It lets you access
the revisions.

00:07:19.018 --> 00:07:21.198
So pretty straightforward
stuff here.

00:07:21.198 --> 00:07:23.578
Foldering stuff's going
to let you folder.

00:07:23.860 --> 00:07:27.318
The export feed is going to let
you point at a particular item

00:07:27.318 --> 00:07:30.480
and export it in the format
that the user wants, so we have

00:07:30.480 --> 00:07:33.838
a variety of formats for
each of those types.

00:07:33.838 --> 00:07:37.580
And the metadata feed is going
to give you information on what

00:07:37.580 --> 00:07:40.100
features are enabled
for that user.

00:07:40.100 --> 00:07:41.820
And Eric's going to go
into detail on that

00:07:41.820 --> 00:07:44.498
one in a little bit.

00:07:44.498 --> 00:07:46.698
So jumping into the
advanced features.

00:07:46.698 --> 00:07:49.938
The first one I wanted to talk
about is document translations.

00:07:49.938 --> 00:07:53.298
So when you're uploading a
document you can specify source

00:07:53.298 --> 00:07:55.578
language and target language
and we're going to translate it

00:07:55.578 --> 00:07:58.504
so the copy you get on the
server is going to be

00:07:58.504 --> 00:08:00.360
the translated version.

00:08:00.360 --> 00:08:03.438
If you choose you can just omit
the source language and in

00:08:03.438 --> 00:08:05.440
most cases we can detect it.

00:08:05.440 --> 00:08:07.660
And the rare case we can't we
throw an error and of course,

00:08:07.660 --> 00:08:10.240
this is all documented
up on code.google.com.

00:08:11.500 --> 00:08:16.700
And not every source target
pair is supported today, so I

00:08:16.700 --> 00:08:19.920
think if you're trying Estonian
to simplified Chinese you

00:08:19.920 --> 00:08:21.120
might be out of luck for now.

00:08:21.120 --> 00:08:23.078
But you know, we're
working on that.

00:08:24.480 --> 00:08:27.860
Next one, upload any file, so
this is one of my favorite

00:08:27.860 --> 00:08:30.240
features, which we
launched back in January.

00:08:30.240 --> 00:08:33.720
And in a way this is a natural
progression for Google Docs.

00:08:33.720 --> 00:08:37.858
We started with having our own
native formats for documents,

00:08:37.858 --> 00:08:40.958
spreadsheets, presentations and
we added the ability to upload

00:08:40.958 --> 00:08:43.818
and download PDFs and we
added shared folders.

00:08:43.818 --> 00:08:46.738
And we found in our internal
use and talking to customers

00:08:46.738 --> 00:08:49.898
and developers that a lot of
people have built their entire

00:08:49.898 --> 00:08:52.480
team collaboration around
the shared folder.

00:08:52.480 --> 00:08:54.760
All the stuff for the project
is there and then they're

00:08:54.760 --> 00:08:55.940
running into hurdles.

00:08:55.280 --> 00:08:58.120
So we talked to an architect
who said, look, all my plans

00:08:58.120 --> 00:09:01.940
and stuff are there, but I have
pictures of the build site.

00:09:01.940 --> 00:09:04.018
It'd be really nice if I could
put those pictures there.

00:09:04.018 --> 00:09:06.018
And we talked to people who
were in mixed deployment setups

00:09:06.018 --> 00:09:09.098
where half the company uses
Google Docs and some are still

00:09:09.098 --> 00:09:12.820
using Microsoft Office and
they're like, look, I've got

00:09:12.820 --> 00:09:15.340
this sales deck, it's our
master sales deck,

00:09:15.340 --> 00:09:16.360
it's 90 megs.

00:09:16.360 --> 00:09:17.200
No one wants to
touch it anymore.

00:09:17.200 --> 00:09:20.380
We'd really like to just put
it up there and be done.

00:09:20.380 --> 00:09:22.880
And so to support those
scenarios we said, yeah,

00:09:22.880 --> 00:09:23.940
that makes sense.

00:09:23.940 --> 00:09:26.880
Let's make it so you can
host files up in the cloud.

00:09:26.880 --> 00:09:29.480
And like I said, we did
that in January and we've

00:09:29.480 --> 00:09:31.160
gotten great usage.

00:09:31.160 --> 00:09:34.760
And the usage falls into
three models and this gets

00:09:34.760 --> 00:09:36.220
interesting when you start
thinking about what kind of

00:09:36.220 --> 00:09:37.240
apps you want to build.

00:09:37.240 --> 00:09:41.660
First is a simple collaborative
model where previously with

00:09:41.660 --> 00:09:43.460
your team you'd e-mail the
document back and forth and

00:09:43.460 --> 00:09:45.960
edit it and have to keep it in
sync and someone's working

00:09:45.960 --> 00:09:49.840
on the old version and
everything gets complicated.

00:09:49.840 --> 00:09:51.140
That's kind of gone
out the window now.

00:09:51.140 --> 00:09:53.140
People are just uploading
it into the cloud.

00:09:53.140 --> 00:09:54.660
There's one place.

00:09:54.660 --> 00:09:55.640
It's always up to date.

00:09:55.640 --> 00:09:57.260
The other thing is
non-collaborative.

00:09:57.660 --> 00:10:00.778
So it's just me and I'm
thinking, man I'd really

00:10:00.778 --> 00:10:03.538
like to work on this
file when I get home.

00:10:03.538 --> 00:10:06.580
So I e-mail it to myself
and then access my e-mail.

00:10:06.580 --> 00:10:08.760
Well, that's just
kind of stupid.

00:10:08.760 --> 00:10:12.440
The other case is I have files
I'm worried about losing so I

00:10:12.440 --> 00:10:15.840
stick them on a thumb drive or
I e-mail it to myself as the

00:10:15.840 --> 00:10:18.480
back-up, just in case,
which again is silly.

00:10:18.658 --> 00:10:20.058
Upload it to the
cloud, you're done.

00:10:20.058 --> 00:10:22.500
That's what we kind
of built this for.

00:10:22.500 --> 00:10:26.180
The third case we're seeing is
a lot of developers like you

00:10:26.180 --> 00:10:29.298
guys building synchronization
clients, which are synching my

00:10:29.298 --> 00:10:33.460
cloud content to my PC, to
multiple PCs, to different

00:10:33.460 --> 00:10:37.220
devices and Matt's going to go
into that use case quite a bit.

00:10:37.220 --> 00:10:41.800
We found that that's a
very compelling use case.

00:10:41.800 --> 00:10:45.100
Some details on this, so while
you are uploading, normally

00:10:45.100 --> 00:10:48.478
things are uploaded, they get
converted to Google

00:10:48.478 --> 00:10:49.978
Docs format.

00:10:49.978 --> 00:10:53.284
If you specify the convert
equals false flag we're just

00:10:53.284 --> 00:10:54.460
going to upload it as is.

00:10:54.460 --> 00:10:58.340
So the exact ones and zeros
you give us, we'll give back.

00:10:58.340 --> 00:11:01.240
These files do take up quota,
so it's not free storage.

00:11:01.680 --> 00:11:03.300
And there's a few limitations.

00:11:03.300 --> 00:11:07.740
And one of those is the API
access for this is for the

00:11:07.740 --> 00:11:08.580
premier customers only.

00:11:09.660 --> 00:11:11.520
The max file size
is one gigabyte.

00:11:12.360 --> 00:11:15.920
And everyone gets one gig free
quota and beyond that you can

00:11:15.920 --> 00:11:19.740
pay more at fairly
reasonable rates.

00:11:19.740 --> 00:11:23.520
Next feature I want to talk
about is OCR, so the same idea.

00:11:23.520 --> 00:11:25.840
It's a feature flag on upload.

00:11:25.840 --> 00:11:29.500
If you're uploading a photo and
you want to extract the text

00:11:29.500 --> 00:11:32.378
you can call this option and
it's a simple, in the post

00:11:32.378 --> 00:11:35.280
URI, you say OCR equals true.

00:11:35.280 --> 00:11:37.558
And instead of giving you a
photo on the server side we're

00:11:37.558 --> 00:11:39.040
going to give you a Google
Document with the

00:11:39.040 --> 00:11:40.360
extracted text.

00:11:40.360 --> 00:11:44.220
There's some limitations here.

00:11:44.220 --> 00:11:47.000
First OCR is fairly
expensive to do.

00:11:47.000 --> 00:11:49.500
So it does take awhile
and you want to program

00:11:49.500 --> 00:11:51.360
around that constraint.

00:11:51.360 --> 00:11:55.780
In general, OCR is garbage in,
garbage out so the better

00:11:55.780 --> 00:11:58.418
quality image with the more
readable characters, the

00:11:58.418 --> 00:12:00.018
better your results will be.

00:12:00.618 --> 00:12:04.640
For now this works only with
the Latin character set and it

00:12:04.640 --> 00:12:08.480
is an experimental feature, so
we do have it throttled a bit.

00:12:08.480 --> 00:12:12.240
But your paying apps users
have a much higher throttle

00:12:12.240 --> 00:12:14.960
point, so we don't expect
to see any problems there.

00:12:14.960 --> 00:12:19.018
So for this one I'll do a quick
demo on this and this is up on

00:12:19.018 --> 00:12:20.980
the codes samples page as well.

00:12:21.020 --> 00:12:26.660
So I pulled up the demo page
and I'll go through my usual

00:12:26.660 --> 00:12:31.312
sign in process and yep,
I'll grant access.

00:12:32.280 --> 00:12:36.520
OK, and so now I will choose a
file and if you want to play

00:12:36.520 --> 00:12:40.480
with this we actually have the
file right here for you so you

00:12:40.480 --> 00:12:43.240
can download it and try it out.

00:12:43.240 --> 00:12:44.920
Pull that up.
276
00:12:44,92 --&gt; 00:12:44,84
OK.

00:12:44.840 --> 00:12:46.200
And we'll say start.

00:12:46.200 --> 00:12:48.280
And so like I said, it's going
to take a little bit of

00:12:48.280 --> 00:12:51.260
time because it is an
expensive operation.

00:12:51.260 --> 00:12:53.160
But I think you can see some
of the neat things you

00:12:53.160 --> 00:12:54.780
can build around this.

00:12:54.780 --> 00:12:57.300
If you were for example,
building an expense report

00:12:57.300 --> 00:13:00.620
system you can set it up so
that people can just

00:13:00.620 --> 00:13:01.040
scan their receipts.

00:13:01.040 --> 00:13:06.080
You can extract the text
and toss it into the

00:13:06.080 --> 00:13:08.320
program for you.

00:13:08.320 --> 00:13:09.060
So here you see what
we pulled out.

00:13:11.400 --> 00:13:14.740
It's pretty good if you compare
the photo and what came out and

00:13:14.740 --> 00:13:17.580
it even calls out places
specifically where it was

00:13:17.580 --> 00:13:20.120
unable to find or figure
out what it was.

00:13:20.120 --> 00:13:22.860
We think that'll be really
useful as you build

00:13:22.860 --> 00:13:25.260
some of these apps.

00:13:25.260 --> 00:13:28.700
And with that I'm actually
going to hand it over to Eric.

00:13:28.700 --> 00:13:31.200
He's going to walk you through
more of these features and then

00:13:31.200 --> 00:13:33.960
we'll call up Matt and he's
going to go into some

00:13:33.960 --> 00:13:34.800
details on Memeo.

00:13:34.800 --> 00:13:39.340
So, Eric.

00:13:39.340 --> 00:13:42.680
ERIC BIDELMAN: Thank you Vijay.

00:13:42.680 --> 00:13:45.600
Great, so some more advanced
features for V3 of the API.

00:13:46.260 --> 00:13:48.600
One thing that we launched in
regards to the arbitrary file

00:13:48.600 --> 00:13:50.920
upload that happened in
January was a metadata feed.

00:13:51.900 --> 00:13:54.238
And this really came out
of third-party requests

00:13:54.238 --> 00:13:55.900
from our developers.

00:13:55.900 --> 00:13:57.020
They wanted to be able to
determine what type of

00:13:57.020 --> 00:13:58.060
count a user was using.

00:13:58.060 --> 00:14:01.420
As Vijay mentioned the upload
any file is restricted

00:14:01.420 --> 00:14:04.830
in regards to the API to
apps premier accounts.

00:14:04.830 --> 00:14:07.218
And we didn't really have a
great way to determine that.

00:14:07.898 --> 00:14:09.078
But what we launched
recently is a metadata

00:14:09.078 --> 00:14:10.960
feed and it's read-only.

00:14:11.240 --> 00:14:12.880
And what you get back you
can see it's fairly simple.

00:14:12.880 --> 00:14:15.640
You send a post request to
the metadata feed URI.

00:14:16.400 --> 00:14:19.200
It's a private feed so
you're going to include an

00:14:19.200 --> 00:14:20.320
authorization header and
then a version number.

00:14:20.320 --> 00:14:22.020
So we're talking to version
3 the API with that

00:14:22.020 --> 00:14:24.120
GData version header.

00:14:24.120 --> 00:14:27.346
And what you get back is just
an entry with a bunch of

00:14:27.346 --> 00:14:29.378
metadata and properties and
features of the account.

00:14:29.378 --> 00:14:31.018
So there's things like
quota bytes used.

00:14:31.138 --> 00:14:33.940
You know, how much
quota is it taking up.

00:14:33.940 --> 00:14:35.540
Is the OCR rate limiting.

00:14:35.540 --> 00:14:37.740
This particular account that
made it's request you can tell

00:14:37.740 --> 00:14:40.540
is a premier account because it
has the upload any

00:14:40.540 --> 00:14:41.880
feature name set.

00:14:41.880 --> 00:14:44.020
Then you get other properties
such as the upload size

00:14:44.020 --> 00:14:45.500
for each type of document.

00:14:45.500 --> 00:14:47.860
There's also, what's not
pictured here is the export

00:14:47.860 --> 00:14:48.200
formats for each document.

00:14:48.200 --> 00:14:51.080
So as you know, Google Docs
allows you to export documents

00:14:51.080 --> 00:14:53.000
and spreadsheets into
different formats.

00:14:53.000 --> 00:14:54.878
PDFs, Microsoft Word formats.

00:14:54.878 --> 00:14:59.300
So, very useful for customizing
a client UI based on the

00:14:59.300 --> 00:15:01.880
feature set that's
making that call.

00:15:01.880 --> 00:15:04.660
Another great feature and very
useful future if you're going

00:15:04.660 --> 00:15:06.060
to upload gigabyte files to
Google Docs you're going to

00:15:06.060 --> 00:15:07.940
need a reliable upload method.

00:15:08.180 --> 00:15:11.660
So there's the 250 megabyte
limit on the normal upload

00:15:11.660 --> 00:15:13.840
path if you've ever
used the API before.

00:15:13.840 --> 00:15:16.140
But what we actually launched
recently was a resemble upload

00:15:16.140 --> 00:15:19.340
protocol for the Google Data
APIs, so right now the YouTube

00:15:19.340 --> 00:15:22.700
API and the Google Docs
List API implement this.

00:15:22.700 --> 00:15:25.060
And this is just a more
reliable, more robust feature

00:15:25.060 --> 00:15:27.360
for uploading large mush files.

00:15:27.360 --> 00:15:30.500
And what your client does is
actually make a post request

00:15:30.500 --> 00:15:32.120
saying I want to start this
process and then you get

00:15:32.120 --> 00:15:35.178
back a URI to upload
chunks of a file to.

00:15:35.178 --> 00:15:36.458
So you can upload a
megabyte at a time.

00:15:36.458 --> 00:15:38.780
You can upload 10
megabytes at a time.

00:15:38.780 --> 00:15:41.900
It's really up to you
and your client.

00:15:41.740 --> 00:15:43.320
And I'll lastly just say that
the client libraries support

00:15:43.320 --> 00:15:44.860
for this is really great.

00:15:44.860 --> 00:15:47.278
So we actually implemented this
in all the client libraries so

00:15:47.278 --> 00:15:49.028
you don't have to go into
the raw protocol itself.

00:15:49.028 --> 00:15:53.980
But let's just take a look and
see what that looks like.

00:15:53.980 --> 00:15:55.400
So bare bones, the raw protocol
the, the GData protocol for

00:15:55.400 --> 00:15:57.600
this is you make
a post request.

00:15:57.600 --> 00:15:59.788
You say I want to start
this process to the

00:15:59.788 --> 00:15:59.960
create session URI.

00:15:59.960 --> 00:16:02.600
We'll include the
version header and the
360
00:16:02,6 --&gt; 00:16:02,06
authorization header.

00:16:03.220 --> 00:16:06.880
And then the two or three
important parts of this

00:16:06.880 --> 00:16:09.700
particular request here are the
x upload content type and the

00:16:09.700 --> 00:16:10.680
x upload contnet length.

00:16:11.800 --> 00:16:12.080
So this is the file.

00:16:12.080 --> 00:16:15.438
We're going to creat a Zip
file in Google Docs and we'll

00:16:15.438 --> 00:16:17.520
tell it the file size and
the applications type.

00:16:17.520 --> 00:16:20.320
And then the title of the
file will be my title

00:16:20.320 --> 00:16:21.400
when it's done uploading.

00:16:21.400 --> 00:16:25.398
So like I say, what you get
back is this unique location.

00:16:25.398 --> 00:16:29.080
It's a token based session URI
that you're going to send the

00:16:29.080 --> 00:16:31.700
chunks of the file to so
you'll make multiple put

00:16:31.700 --> 00:16:32.480
requests to this URI.

00:16:32.480 --> 00:16:35.518
You'll send a constant type
just so the server knows you're

00:16:35.518 --> 00:16:37.340
still talking about a Zip
file and the important bit of

00:16:37.340 --> 00:16:38.100
this is the content range.

00:16:38.440 --> 00:16:41.060
So this is the first 10,000
bytes of this Zip file.

00:16:41.060 --> 00:16:44.480
And then of course the body is
the 10,000 bytes that you're

00:16:44.480 --> 00:16:46.580
talking about of the file.

00:16:46.580 --> 00:16:47.760
You'll keep doing that.

00:16:47.760 --> 00:16:49.960
The server will
respond with a 308.

00:16:49.960 --> 00:16:50.960
It'll tell you it's
not complete.

00:16:50.960 --> 00:16:52.678
It'll tell you the content
length and the range that it

00:16:52.678 --> 00:16:54.898
knows about so maybe just
because you sent the first

00:16:54.898 --> 00:16:57.460
10,000 bytes doesn't mean the
server actually processed that.

00:16:57.460 --> 00:17:00.538
So you'll want to continue the
file with the range header

00:17:00.538 --> 00:17:02.660
that you could back.

00:17:02.660 --> 00:17:04.880
And so what you get back
eventually when the

00:17:04.880 --> 00:17:06.600
file's all done, you've
uploaded the total file.

00:17:06.600 --> 00:17:09.858
You'll get back a 201 created
with the ATOM entry, the title

00:17:09.858 --> 00:17:11.940
and the quota bytse used.

00:17:11.940 --> 00:17:13.580
There is quota bytes used in
this case because it's a Zip

00:17:13.580 --> 00:17:15.378
file, it's an arbitrary file.

00:17:15.138 --> 00:17:17.740
If it was just a regular
doc file that we converted

00:17:17.740 --> 00:17:21.378
that would be set to zero.

00:17:21.378 --> 00:17:24.158
So that's the protocol, but
everything's easier in Python

00:17:24.158 --> 00:17:26.326
if you're a Python fan.

00:17:27.400 --> 00:17:28.660
So let's dive into
this a little bit.

00:17:28.660 --> 00:17:29.160
This a what this looks like.

00:17:29.160 --> 00:17:31.760
I mentioned client library
support, so the first thing

00:17:31.760 --> 00:17:33.720
you're going to want to do is
of course import the Google

00:17:33.720 --> 00:17:35.920
Data Docs client library.

00:17:35.920 --> 00:17:37.800
Both the client and the
data portions of that.

00:17:38.660 --> 00:17:40.760
And the process is really
the same for all the

00:17:40.760 --> 00:17:41.120
client libraries.

00:17:41.120 --> 00:17:44.380
You'll create a Docs client
and you'll pass in your

00:17:44.380 --> 00:17:45.940
applications name.

00:17:45.940 --> 00:17:48.460
You'll need to authenticate and
authorize this app to share

00:17:48.460 --> 00:17:50.540
data with Docs, so you'll
either use oauth or

00:17:50.540 --> 00:17:52.140
authsub for that.

00:17:52.140 --> 00:17:54.100
And I left that as a to do.

00:17:54.100 --> 00:17:55.820
Then we'll do some file I/Os.

00:17:55.820 --> 00:17:57.920
So we'll read an mpeg file.

00:17:57.920 --> 00:18:00.860
We'll get the file size
information from the operating

00:18:00.860 --> 00:18:03.620
system and then the client
library provides this really

00:18:03.620 --> 00:18:05.380
nice robust resumable
uploader object.

00:18:05.380 --> 00:18:07.240
So you're going to create that.

00:18:07.240 --> 00:18:09.700
Pass in the client and file
handle will tell it the

00:18:09.700 --> 00:18:11.640
MIME type, will tell
it the file size.

00:18:11.640 --> 00:18:14.660
This has a nice property, so
you can set the chunk size.

00:18:14.660 --> 00:18:16.520
So this is the content
range bytes that I was

00:18:16.520 --> 00:18:17.040
explaining before.

00:18:17.040 --> 00:18:20.080
And then the desired class
is just the type of ATOM

00:18:20.080 --> 00:18:22.720
entry, the GData ATOM entry
that we're expecting.

00:18:22.720 --> 00:18:24.600
So we're talking to
the Doc List API.

00:18:24.600 --> 00:18:26.260
You'll expected a Google Docs
entry If you're talking to

00:18:26.260 --> 00:18:28.920
YouTube you would expect
a YouTube entry.

00:18:31.200 --> 00:18:34.280
The next thing we do is we can
set the title via the ATOM

00:18:34.280 --> 00:18:37.820
title and then call the
uploader.upload file method.

00:18:37.820 --> 00:18:40.100
And really in the background
all this is doing is it's

00:18:40.100 --> 00:18:42.680
making that initial post
request that you saw in the

00:18:42.680 --> 00:18:43.780
previous couple slides.

00:18:43.780 --> 00:18:47.180
You're passing in the entry and
it'll literally just in a four

00:18:47.180 --> 00:18:49.240
loop make those put request and
chunk the file up into

00:18:49.240 --> 00:18:52.820
different pieces based on
your chunk size there.

00:18:53.060 --> 00:18:56.500
So about 15 lines of Python
to get the resumable

00:18:56.500 --> 00:18:58.598
upload protocol within
your application.

00:18:58.598 --> 00:19:01.420
Really simple, but really
robust and definitely the way

00:19:01.420 --> 00:19:04.180
to go if you're uploading
large files to Docs.

00:19:04.180 --> 00:19:07.812
Lastly I just printed out
the title and the quota

00:19:07.812 --> 00:19:09.040
used for that file.

00:19:09.040 --> 00:19:12.040
So next I'd like to invite up
Matt Tonkin from Memeo who has

00:19:12.040 --> 00:19:15.440
some really great real world
experience implementing some of

00:19:15.440 --> 00:19:18.040
these protocols and he can tell
you some challenges and

00:19:18.040 --> 00:19:18.240
some tips and tricks.

00:19:22.920 --> 00:19:26.220
MATTHEW TONKIN: Thanks Eric.

00:19:26.220 --> 00:19:28.740
So what we've heard about is
the ability to be able to

00:19:28.740 --> 00:19:32.120
upload arbitrary files
to Google Docs.

00:19:32.120 --> 00:19:35.440
Now that's a great feature,
but you can't edit all
451
00:19:35,44 --&gt; 00:19:35,36
those files online.

00:19:35.360 --> 00:19:38.600
There simply aren't the
online editors for it.

00:19:38.600 --> 00:19:42.980
So Memeo Connect we designed as
being the bridge between that

00:19:42.980 --> 00:19:44.940
storage that's available in
Google Docs and your

00:19:44.940 --> 00:19:45.120
desktop software.

00:19:46.340 --> 00:19:49.820
You know, so if you drag and
drop a Photoshop file over into

00:19:49.820 --> 00:19:52.640
Memeo Connect you can edit
in Photoshop locally.

00:19:52.640 --> 00:19:54.820
And when you edit it
those edits are then

00:19:54.820 --> 00:19:56.380
pushed up online.

00:19:56.380 --> 00:19:59.280
And if something's been edited
by somebody else that can

00:19:59.280 --> 00:20:01.278
actually edit with you that
gets taken down from online and

00:20:01.278 --> 00:20:02.618
sent back to your client.

00:20:05.300 --> 00:20:07.720
It's available for
Windows and for Mac.

00:20:09.120 --> 00:20:13.960
And we have an iPad
reader as well.

00:20:13.960 --> 00:20:16.680
But the big challenge
for us was sync.

00:20:16.680 --> 00:20:20.440
It's not just about getting
documents up into the cloud

00:20:20.440 --> 00:20:22.240
and bringing documents
back down again.

00:20:22.240 --> 00:20:27.580
You have to know
when to do that.

00:20:28.680 --> 00:20:31.660
As soon as there's an edit
locally in the document,

00:20:31.660 --> 00:20:32.940
what we need to do is then
go and upload that and

00:20:32.940 --> 00:20:34.060
replace the document.

00:20:34.060 --> 00:20:36.540
And then download if somebody's
edited the document, like I

00:20:36.540 --> 00:20:38.500
said, download it back
to the client again.

00:20:38.500 --> 00:20:41.880
Now in Google Docs there's
no set way to be able

00:20:41.880 --> 00:20:43.360
to handle conflicts.

00:20:43.360 --> 00:20:46.520
And there is the
potential for conflicts.

00:20:46.520 --> 00:20:50.318
And the last thing you really
want to do is lose users data

00:20:50.318 --> 00:20:54.184
because they tend to not like
that very much at all, but it

00:20:54.184 --> 00:20:56.400
comes down to how it is that
you're going to deal with it.

00:20:56.400 --> 00:20:59.680
That's a challenge your
application to be able to

00:20:59.680 --> 00:21:01.300
figure out how you're going
to handle conflicts in

00:21:01.300 --> 00:21:06.520
the context of your app.

00:21:07.300 --> 00:21:10.720
A lot of the solutions that we
used were really pretty

00:21:10.720 --> 00:21:14.098
straight out of the box as far
as the API is concerned.

00:21:14.098 --> 00:21:15.460
Etags.

00:21:15.460 --> 00:21:18.320
So Etags are like a little
string that's attached to a

00:21:18.320 --> 00:21:21.780
document and that Etag will
change, it'll cycle, do its

00:21:21.780 --> 00:21:23.460
thing, change every time
there's a change

00:21:23.460 --> 00:21:24.960
on the document.

00:21:24.960 --> 00:21:26.960
So if there's any metadata
changes, if there's a title

00:21:26.960 --> 00:21:31.880
change, if it gets starred, if
there's an ACL change your

00:21:31.880 --> 00:21:32.760
Etag will always change.

00:21:32.760 --> 00:21:36.480
The thing that doesn't
change is the updated date.

00:21:36.480 --> 00:21:40.998
The updated date will only ever
change when the actual content

00:21:40.998 --> 00:21:44.000
of the document changes.

00:21:44.000 --> 00:21:46.200
So between those things you can
pretty much figure out, OK,

00:21:46.200 --> 00:21:48.880
when do I actually need to
download the file again and

00:21:48.880 --> 00:21:50.640
when I just need to go and
update the metadata

00:21:50.640 --> 00:21:54.500
for the file?

00:21:54.500 --> 00:21:57.440
The document feeds, when we
talk to the API the document

00:21:57.440 --> 00:22:03.140
feeds pretty much just gives a
list of documents that we have

00:22:03.140 --> 00:22:04.040
available in Google Docs.

00:22:04.040 --> 00:22:06.520
But that list is growing
and it's growing at a

00:22:06.520 --> 00:22:07.858
very, very rapid rate.

00:22:07.858 --> 00:22:09.380
Thanks to things like
arbitrary file upload.

00:22:10.680 --> 00:22:16.560
Thankfully the Document
Feed API is a rich

00:22:16.560 --> 00:22:17.240
querying language.

00:22:17.240 --> 00:22:20.940
So we can specify parameters
and get back just a list

00:22:20.940 --> 00:22:21.818
of matching documents.

00:22:21.818 --> 00:22:23.858
And that's really quite
powerful because what

00:22:23.858 --> 00:22:25.140
we can do is say, OK.

00:22:25.140 --> 00:22:27.060
We're going to just look at
the documents that have

00:22:27.060 --> 00:22:29.540
been changed since
a particular date.

00:22:29.540 --> 00:22:32.040
So since we last went and
refreshed that document feed

00:22:32.040 --> 00:22:34.078
let's just grab those
challenges and bring that

00:22:34.078 --> 00:22:39.400
down to our client.

00:22:39.400 --> 00:22:43.200
So a few tips and tricks, a few
things that we learned while we

00:22:43.200 --> 00:22:44.760
were developing Memeo Connect.

00:22:44.760 --> 00:22:48.540
One is that Google Docs
is not intended to

00:22:48.540 --> 00:22:49.440
be a file hierarchy.

00:22:49.440 --> 00:22:53.080
It's really a document library
much like iTunes is a

00:22:53.080 --> 00:22:54.624
library for your music.

00:22:55.400 --> 00:22:56.700
Folders are like playlists.

00:22:57.600 --> 00:22:58.820
They're virtual entities.

00:22:58.820 --> 00:23:01.840
So an individual file or
a document can exist

00:23:01.840 --> 00:23:07.760
in multiple folders.

00:23:07.760 --> 00:23:09.998
The problem there is that
basically it doesn't map

00:23:09.998 --> 00:23:10.858
to a local file system.

00:23:10.858 --> 00:23:13.098
You can't just sort of go
OK, we're going to take

00:23:13.098 --> 00:23:14.558
this and we're going
to mirror this online.

00:23:14.558 --> 00:23:16.126
We're going to take this
old file system and

00:23:16.126 --> 00:23:17.380
mirror it online.

00:23:17.380 --> 00:23:19.300
It just doesn't work that way.

00:23:19.300 --> 00:23:24.960
And basically you shouldn't
try and force it to do that.

00:23:24.960 --> 00:23:27.440
I mean, you can look at your
cat and expect it to bark, but

00:23:27.440 --> 00:23:30.840
it's just not going to bark and
it's just not there to be a

00:23:30.840 --> 00:23:32.580
hierarchical file system.

00:23:32.580 --> 00:23:33.780
It's just not.

00:23:33.780 --> 00:23:34.700
The next thing is list size.

00:23:34.700 --> 00:23:40.380
We had a customer who
originally like back when we

00:23:40.380 --> 00:23:43.440
first launched the client,
said OK, we've got this

00:23:43.440 --> 00:23:44.500
arbitrary file storage.

00:23:44.500 --> 00:23:47.540
I'm going to grab my whole life
and upload it, so you know,

00:23:47.540 --> 00:23:51.000
like six gigs, and four and a
half thousand files and it got

00:23:51.000 --> 00:23:54.620
85% of the way through and had
a bit of a hiccup and we all

00:23:54.620 --> 00:23:56.140
thought gee that's really good.

00:23:56.140 --> 00:23:57.818
We did really well on that one.

00:23:57.818 --> 00:24:00.778
But you know, ultimately it
just means that people are

00:24:00.778 --> 00:24:03.260
uploading more and more files.

00:24:03.260 --> 00:24:08.260
Now that they can upload
arbitrary files the

00:24:08.260 --> 00:24:11.640
documents list is getting
much, much larger.

00:24:11.640 --> 00:24:13.738
And it can take some time
to go and get that initial

00:24:13.738 --> 00:24:15.318
feed of the documents.

00:24:15.318 --> 00:24:19.578
So optimizing the list size,
optimizing your feed request

00:24:19.578 --> 00:24:20.660
is really important.

00:24:20.660 --> 00:24:23.620
So just bring down, you know,
figure out what queries you

00:24:23.620 --> 00:24:27.080
need to do to bring down the
smallest feed possible.

00:24:27.080 --> 00:24:29.660
Persistence was a big
one for us as well.

00:24:30.860 --> 00:24:34.360
If you do have a large number
of documents you really want

00:24:34.360 --> 00:24:35.620
your client to launch quickly.

00:24:35.620 --> 00:24:38.280
So again, that comes down to
optimizing your feed requests,

00:24:38.280 --> 00:24:40.780
but if you can persist all
that information, persist it.

00:24:41.900 --> 00:24:45.180
So the next time you go and
launch your application the

00:24:45.180 --> 00:24:47.080
things going to launch quickly
because there is a bit of a

00:24:47.080 --> 00:24:49.020
delay as it's updating
the documents list.

00:24:53.780 --> 00:24:55.400
I suppose get lazy.

00:24:55.400 --> 00:24:58.420
Your users generally don't
need to know everything

00:24:58.420 --> 00:25:01.880
that exists by the APIs.

00:25:02.360 --> 00:25:05.118
Get lazy is really just
lazy load with the things

00:25:05.118 --> 00:25:07.200
that you don't need.

00:25:07.200 --> 00:25:15.340
You know, these servers they
respond pretty quickly, but if

00:25:15.340 --> 00:25:17.270
you don't need it at startup
then just grab it

00:25:17.270 --> 00:25:17.780
when you need it.

00:25:17.780 --> 00:25:20.798
So a user clicks on a file then
just go and update the stuff

00:25:20.798 --> 00:25:24.940
that you need in your
GUI at that time.

00:25:25.040 --> 00:25:26.820
Flexibility was a big
one for as well.

00:25:26.820 --> 00:25:30.800
We found that there just
simply isn't a standard

00:25:30.800 --> 00:25:32.700
Google Docs user.

00:25:32.700 --> 00:25:35.720
No two Google Docs users are
the same from what we can tell.

00:25:35.720 --> 00:25:37.300
Some people have 10 documents.

00:25:37.300 --> 00:25:39.340
Some people have
10,000 documents.

00:25:39.680 --> 00:25:41.160
Some people want to
see everything.

00:25:41.160 --> 00:25:43.060
Some people just
want to search.

00:25:43.060 --> 00:25:44.060
Some people want to
share everything.

00:25:44.060 --> 00:25:48.220
Some people don't share
anything at all.

00:25:48.220 --> 00:25:50.760
So the trick is just to never
assume that you know how

00:25:50.760 --> 00:25:52.400
a user's going to use it.

00:25:52.400 --> 00:25:55.640
We even found this
internally with Google.

00:25:55.640 --> 00:25:59.340
In that the feedback we got
some groups are we really love

00:25:59.340 --> 00:26:02.480
this picture and some other
group said, oh, we really

00:26:02.480 --> 00:26:03.760
love this feature.

00:26:03.760 --> 00:26:06.280
We even found that within
Google they don't use the

00:26:06.280 --> 00:26:09.650
Google Docs in the same way.

00:26:09.700 --> 00:26:13.058
And now with this arbitrary
file upload we can expect a

00:26:13.058 --> 00:26:17.500
lot more aggressive usage of
arbitrary files in the future.

00:26:18.440 --> 00:26:21.360
You might be using the Google
Docs List with some purpose,

00:26:21.360 --> 00:26:24.598
but the user might have
thousands and thousands and

00:26:24.598 --> 00:26:27.280
thousands of files, so it's
something to be aware of.

00:26:27.280 --> 00:26:27.800
Informative UI.

00:26:29.838 --> 00:26:32.680
I mean, there's some lag in
dealing with the servers.

00:26:33.800 --> 00:26:35.540
These things aren't local.

00:26:35.540 --> 00:26:38.580
So the server interactions can
take some time and it's good

00:26:38.580 --> 00:26:40.400
to keep your users informed.

00:26:40.400 --> 00:26:44.520
You know, it's really important
for a great user experience

00:26:44.520 --> 00:26:45.400
to keep your users informed.

00:26:45.400 --> 00:26:48.040
So you know, if you're updating
a feed, if you're downloading a

00:26:48.040 --> 00:26:50.780
document, if you're uploading a
document keep the users

00:26:50.780 --> 00:26:53.860
informed all of the time.

00:26:53.860 --> 00:26:54.460
And the last point is
client libraries rock.

00:26:57.100 --> 00:27:00.800
I mean, for us what we used
mainly was the .NET and

00:27:00.800 --> 00:27:01.978
objective C client libraries.

00:27:01.978 --> 00:27:05.298
And they're essentially object
orientated wrappers for all the

00:27:05.298 --> 00:27:06.600
things that exist
in Google online.

00:27:08.920 --> 00:27:11.528
And they're wrappers, meaning
that you then don't have

00:27:11.528 --> 00:27:13.100
to write all that code.

00:27:13.100 --> 00:27:15.180
You know, the client libraries
gave us a really, really

00:27:15.180 --> 00:27:18.618
advanced starting point.

00:27:18.618 --> 00:27:20.480
And one of the great things
that we found in doing both our

00:27:20.480 --> 00:27:24.520
Mac client and our iPad client
is that there's this underlying

00:27:24.520 --> 00:27:26.140
library that goes between
those two platforms.

00:27:26.140 --> 00:27:29.420
So we were able to write an
engine, a Memeo Connect engine

00:27:29.420 --> 00:27:33.330
that sits on top of that and
we're able to bring that form

00:27:33.330 --> 00:27:38.480
when we launched Memeo
Connect for Mac.

00:27:38.480 --> 00:27:41.148
Then the iPad came out.

00:27:41.148 --> 00:27:42.112
We thought, oh great.

00:27:43.100 --> 00:27:44.500
Because it's written on the
same library we just picked up

00:27:44.500 --> 00:27:48.780
the same code base, brought it
across to the iPad and we had

00:27:48.780 --> 00:27:49.340
an application up and running
in a very, very short

00:27:49.340 --> 00:27:51.000
period of time.

00:27:51.000 --> 00:27:54.358
So the client libraries we have
found have been really great

00:27:54.358 --> 00:27:58.086
and really, really good
support for the Doc List.

00:27:59.122 --> 00:28:01.940
A couple of other points is
that this stuff was really

00:28:01.940 --> 00:28:04.760
built for the web and not
so much for the desktop.

00:28:04.760 --> 00:28:06.358
And throughout the course
of development we did

00:28:06.358 --> 00:28:08.560
have a few challenges.

00:28:08.780 --> 00:28:11.740
We went back to Google a few
times and we really found

00:28:11.740 --> 00:28:14.500
that the API team was
very, very responsive.

00:28:14.338 --> 00:28:16.300
Particularly when you're
talking about you know,

00:28:16.300 --> 00:28:19.080
sometimes you think you open a
bug online, what happens to it?

00:28:19.080 --> 00:28:20.400
It goes into nowhere.

00:28:20.980 --> 00:28:22.318
Well, it certainly
doesn't go into nowhere.

00:28:22.318 --> 00:28:23.580
It exists.

00:28:24.500 --> 00:28:27.600
And we found that the Google
Docs List team very,

00:28:27.600 --> 00:28:28.920
very responsive.

00:28:28.920 --> 00:28:30.618
And the rules are there,
if you don't ask, you

00:28:30.618 --> 00:28:32.500
won't get, so ask.

00:28:32.500 --> 00:28:35.598
It's like a lot of things that
we've seen come out have been

00:28:35.598 --> 00:28:40.298
from, we really push it and ask
for a lot of new features and

00:28:40.298 --> 00:28:43.180
found them to be
very responsive.

00:28:43.180 --> 00:28:47.740
So we're at today, really, and
this is the call to action that

00:28:47.740 --> 00:28:49.998
you can now store arbitrary
files in Google Docs.

00:28:49.998 --> 00:28:53.640
You can store any file you want
in Google Docs and that's

00:28:53.640 --> 00:28:54.760
a pretty powerful feature.

00:28:54.760 --> 00:28:57.558
So Memeo Connect is just the
way that we have chosen

00:28:57.558 --> 00:28:57.760
to use that API.

00:28:57.760 --> 00:29:02.180
When you go to the developers
and essentially now this is

00:29:02.180 --> 00:29:06.340
arbitrary file storage in the
cloud, so the world is really

00:29:06.340 --> 00:29:08.080
your oyster in that sense.

00:29:08.080 --> 00:29:10.760
You've got to look at what your
applications are and how you

00:29:10.760 --> 00:29:11.420
can make use of this API.

00:29:11.740 --> 00:29:14.444
It's very flexible and there's
a lot you can do with it.

00:29:15.560 --> 00:29:19.020
And to close off we will be
launching Memeo Connect 2 in

00:29:19.020 --> 00:29:21.880
beta form quite shortly.

00:29:22.240 --> 00:29:25.860
And that has our number one
most requested feature,

00:29:25.860 --> 00:29:27.080
which is some integration
into the [? ice ?].

00:29:27.520 --> 00:29:31.300
So you know, we see essentially
a drive that's for Google

00:29:31.300 --> 00:29:35.278
Docs and we can drag and drop
things into it and out of it.

00:29:35.998 --> 00:29:37.020
It's going to be a closed
beta to start with.

00:29:37.020 --> 00:29:39.480
So if you want to get a hold of
this software and help us to

00:29:39.480 --> 00:29:43.640
squash out show some of the
final bugs, you can go to
673
00:29:43,64 --&gt; 00:29:43,52
memoconnect.com/beta.

00:29:44.420 --> 00:29:44.558
All right.

00:29:47.662 --> 00:29:48.716
Back to Eric.

00:29:56.980 --> 00:29:59.180
ERIC BIDELMAN: Great,
so thank you Matt.

00:29:59.180 --> 00:30:03.360
So before we jump into and sort
of switch gears and talk about

00:30:03.360 --> 00:30:05.738
the Sites API I just want to
show you-- Memeo is a great

00:30:05.738 --> 00:30:08.660
example of a desktop client
that talks to the API.

00:30:08.660 --> 00:30:10.870
I'd like to show you what a
third-party developer did and

00:30:10.870 --> 00:30:12.278
he came to me in the forums.

00:30:12.900 --> 00:30:15.680
In his spare time he's used
the Java client library.

00:30:15.680 --> 00:30:17.968
He's used Google Web Toolkit
and App Engine to create a

00:30:17.968 --> 00:30:23.840
really interesting use case
for the Doc List API.

00:30:23.840 --> 00:30:26.440
So Vijay mentioned this API and
gave you some of the features.

00:30:26.440 --> 00:30:27.440
That it's very full-fledged.

00:30:27.440 --> 00:30:37.360
Let me just sign
into App Engine.

00:30:37.360 --> 00:30:39.860
He mentioned it's very
full-fledged and you can

00:30:39.860 --> 00:30:43.678
literally rebuild Google Docs
on top of the API itself

00:30:43.678 --> 00:30:45.980
and this is what this
gentleman has done.

00:30:45.980 --> 00:30:48.140
So you can tell, if you've ever
used Google Docs before, I'm

00:30:48.140 --> 00:30:51.500
sure a majority of you have,
but this looks and feels

00:30:51.500 --> 00:30:51.980
exactly like Google Docs.

00:30:53.118 --> 00:30:54.660
He's customized the UI.

00:30:54.660 --> 00:30:56.780
He's added widgets, Google
Web Toolkit widgets.

00:30:57.338 --> 00:31:00.160
You can have operations like
save, you can create new

00:31:00.160 --> 00:31:01.838
documents, you can delete
documents, the revision

00:31:01.838 --> 00:31:05.180
history, everything available
in the API as you'd expect.

00:31:05.180 --> 00:31:08.078
But the really cool integration
here is that he's created a

00:31:08.078 --> 00:31:11.598
latex or LaTeX, depending on
where you're from, compiler.

00:31:11.598 --> 00:31:13.618
So he's using Google Docs
as a storage platform

00:31:13.618 --> 00:31:15.420
for his application.

00:31:15.420 --> 00:31:17.260
So I can make edits
in his application.

00:31:17.260 --> 00:31:19.678
Just to show you this
works it does compile

00:31:19.678 --> 00:31:21.358
the latex file here.

00:31:21.358 --> 00:31:28.200
But if I save this and open my
Google Docs it's using Docs as

00:31:28.200 --> 00:31:31.920
a repository for his data.

00:31:31.920 --> 00:31:33.860
So there's his file,
it's in Google Docs.

00:31:33.860 --> 00:31:36.040
I can come in here as the
different user, maybe

00:31:36.040 --> 00:31:37.200
share this further
with somebody else.

00:31:37.200 --> 00:31:39.038
They can make changes and
then his application

00:31:39.038 --> 00:31:39.598
will pick that up.

00:31:39.598 --> 00:31:40.880
Just a really
interesting use case.

00:31:40.880 --> 00:31:43.160
If you take anything away from
this it's that the APIs

00:31:43.160 --> 00:31:46.780
extremely full-featured and you
can literally rewrite Docs or a

00:31:46.780 --> 00:31:57.000
different use case for
your application.

00:31:57.000 --> 00:32:00.128
So switching gears a little bit
I'd like to dive into the sites

00:32:00.128 --> 00:32:02.578
API, but before we do that
here's the bit.yl URL for the

00:32:02.578 --> 00:32:05.240
Google Wave if you do have any
questions on either API or

00:32:05.240 --> 00:32:08.460
anything that we're talking
about or questions for Memeo as

00:32:08.460 --> 00:32:11.720
well, please do fill those out.

00:32:11.720 --> 00:32:14.940
So the Sites API, how many
people have ever used

00:32:14.940 --> 00:32:15.000
Google Sites before?
726
00:32:16,818 --&gt; 00:32:16,758
Great.

00:32:16.758 --> 00:32:17.698
Awesome.

00:32:18.578 --> 00:32:22.020
So the API itself has full
access to a Google Site.

00:32:22.520 --> 00:32:24.460
This is something we'd launched
back in September with

00:32:24.460 --> 00:32:25.240
all these features.

00:32:25.240 --> 00:32:26.058
It's very robust.

00:32:26.058 --> 00:32:29.840
So you can create, modify,
move, delete all content in a

00:32:29.840 --> 00:32:32.900
site and we'll take a look at
what that means in a second.

00:32:32.900 --> 00:32:35.280
Similar to the dock list API
it's got very similar features.

00:32:36.318 --> 00:32:37.220
You can have sharing
permissions.

00:32:37.380 --> 00:32:41.818
You can share further with the
site or different attachments,

00:32:41.818 --> 00:32:45.280
arbitrary file uploads for
sites, file cabinets or

00:32:45.280 --> 00:32:47.740
attachments to pages as well.

00:32:47.740 --> 00:32:50.002
There's revision history and
activity streams so you can

00:32:50.002 --> 00:32:52.718
actually audit who's doing what
and what they're changing

00:32:52.718 --> 00:32:53.818
on a Google Site.

00:32:54.000 --> 00:32:56.424
You can create and provision
new sites if you're
743
00:32:56,424 --&gt; 00:32:56,22
a Google Apps user.

00:32:56.220 --> 00:32:58.800
You can copy then from an
existing site, so you don't

00:32:58.800 --> 00:33:00.358
have to start from scratch.

00:33:00.358 --> 00:33:01.780
There's other features,
more advanced features.

00:33:02.480 --> 00:33:03.500
Page-level templates, there's
site-level templates,

00:33:03.500 --> 00:33:05.318
web address mapping.

00:33:05.318 --> 00:33:08.958
This is really cool if you want
a map a sub-domain, an actual

00:33:08.958 --> 00:33:11.538
sub-domain you have on your
account to a Google Site and it

00:33:11.538 --> 00:33:13.540
looks very seamless, right?

00:33:13.540 --> 00:33:16.040
You couldn't even tell that
it was a Google Site.

00:33:16.040 --> 00:33:16.900
Couple more things.

00:33:16.900 --> 00:33:17.318
Gadgets.

00:33:17.980 --> 00:33:19.618
This is the data API that
we'll talk about today.

00:33:19.618 --> 00:33:23.520
But there's also gadgets, so
you can have an iGoogle gadget,

00:33:23.520 --> 00:33:26.020
Sites itself is a gadget
container, so you can run a

00:33:26.020 --> 00:33:28.780
gadget the talks to the sites
API or does something

00:33:28.780 --> 00:33:29.620
interesting for users.

00:33:30.220 --> 00:33:34.440
And there's also Google Apps
Scripts, so it's JavaScript

00:33:34.440 --> 00:33:37.900
that's run on a server site
within Google Spreadsheets

00:33:37.900 --> 00:33:40.858
that you can use to
interact with Google Sites.

00:33:40.858 --> 00:33:43.600
So a use case there might be
you have a Google Spreadsheet

00:33:43.600 --> 00:33:45.700
with a bunch of user names and
a list of data and you could

00:33:45.700 --> 00:33:48.840
with one click import that into
a Google Site and into

00:33:48.840 --> 00:33:52.360
a Google List page.

00:33:52.360 --> 00:33:55.360
So just as Vijay pointed out
for the data API for the Doc

00:33:55.360 --> 00:33:58.318
List all the magic happens
at sites.google.com/feeds.

00:33:59.718 --> 00:34:01.900
So a couple feeds worth
mentioning are the

00:34:01.900 --> 00:34:02.720
site feed itself.

00:34:02.720 --> 00:34:04.780
This is how you're going to
create sites, this is how

00:34:04.780 --> 00:34:06.800
you're going to copy sites
and modify the titles

00:34:06.800 --> 00:34:09.698
and URLs for a site.

00:34:09.698 --> 00:34:10.520
There's the content feed.

00:34:10.520 --> 00:34:12.980
So you're going to be creating
content, different types

00:34:12.980 --> 00:34:14.120
of pages and sites.

00:34:14.120 --> 00:34:16.040
It all happens at the
content feed level.

00:34:16.040 --> 00:34:17.678
There's full CRUD for that.

00:34:17.678 --> 00:34:19.878
The two parameters here
are domain and site name.

00:34:19.338 --> 00:34:23.178
The domain is your Google Apps
domain or literally the string

00:34:23.178 --> 00:34:25.380
site, if you're on just a
regular Google account.

00:34:26.078 --> 00:34:28.938
Site name is the URL web space
name of the site as you would

00:34:28.938 --> 00:34:32.238
see in the browser if
you opened up a site.

00:34:32.238 --> 00:34:35.100
ACL feed, very similar
to Google Docs, right?

00:34:35.100 --> 00:34:37.960
You're going to sharing
at the site level now.

00:34:37.960 --> 00:34:39.378
Hopefully the page
will eventually.

00:34:41.798 --> 00:34:44.818
Activity feed, I mentioned,
this is read-only.

00:34:44.938 --> 00:34:46.958
The revision feed, same
as the Google Docs API.

00:34:48.398 --> 00:34:50.058
So just a ton of stuff there.

00:34:50.058 --> 00:34:52.498
So content, what kind of
content just so we're all

00:34:52.498 --> 00:34:54.478
on the same page, what
am I talking about here?

00:34:54.478 --> 00:34:56.578
Well, this is a public
site that I set up prior

00:34:56.578 --> 00:34:57.798
to the presentation.

00:34:57.798 --> 00:35:01.498
You can feel free to visit it,
but this is an example of

00:35:01.498 --> 00:35:02.558
a webpage in Google Sites.

00:35:02.738 --> 00:35:06.058
So you have access to
the HTML of the page.

00:35:06.058 --> 00:35:08.238
There's the attachments
at the page level.

00:35:08.238 --> 00:35:10.060
You can add comments,
change comments.

00:35:10.060 --> 00:35:12.280
The activity stream, this
is how it manifests itself

00:35:12.280 --> 00:35:13.780
within the Google Sites UI.

00:35:14.478 --> 00:35:18.378
And that maps to the
activity feed in the API.

00:35:18.378 --> 00:35:19.198
But there's not just
webpages, right?

00:35:19.998 --> 00:35:23.060
There is list pages, so
tabular and arbitrary

00:35:23.060 --> 00:35:25.340
storage structured data.

00:35:25.340 --> 00:35:26.998
There's announcement pages.

00:35:27.738 --> 00:35:29.418
There's file cabinet pages
where you can upload

00:35:29.418 --> 00:35:35.538
arbitrary files in a
section of a certain site.

00:35:35.538 --> 00:35:38.978
In order to do, we'll take
a look at Java example.

00:35:38.978 --> 00:35:40.998
Creating content
is very simple.

00:35:40.998 --> 00:35:44.478
So the first thing, just with
the resumable upload example

00:35:44.478 --> 00:35:47.706
you're going to be creating a
site service object to talk to

00:35:47.706 --> 00:35:49.738
the sites API and we'll need
to use oauth or authsub to

00:35:49.738 --> 00:35:52.438
authorize that access because
we're actually writing data.

00:35:53.038 --> 00:35:55.840
And the first thing you can do
is create a skeleton function,

00:35:55.840 --> 00:35:58.980
so we'll make a create webpage
function that takes a string

00:35:58.980 --> 00:36:01.600
for the title of the page and
we'll take an HTML string

00:36:01.600 --> 00:36:03.678
for the body, the HTML
content of that page.

00:36:03.678 --> 00:36:05.238
And what we're expecting
back is a webpage entry.

00:36:05.238 --> 00:36:10.852
This is something if you've
ever used the Java library that
821
00:36:10,852 --&gt; 00:36:10,838
you're very familiar with.

00:36:10.838 --> 00:36:12.898
So the process for all these
different types of pages

00:36:12.898 --> 00:36:13.258
and content is the same.

00:36:13.258 --> 00:36:15.218
We'll create a blank object.

00:36:15.218 --> 00:36:18.998
This case, a webpage entry
object to store our data

00:36:18.998 --> 00:36:20.960
and create in Google Site.

00:36:20.960 --> 00:36:23.800
We'll set an XML blob, we'll
set the content and the title

00:36:23.800 --> 00:36:26.718
on the entry, the ATOM entry.

00:36:26.718 --> 00:36:28.738
Lastly, it's just a matter
of calling the client

00:36:28.738 --> 00:36:29.418
insert method.

00:36:29.418 --> 00:36:31.800
This will create that post
request and actually

00:36:31.800 --> 00:36:34.540
upload the entry to the
content feed URI there.

00:36:34.540 --> 00:36:36.700
And for this public site,
in my example, this is

00:36:36.700 --> 00:36:37.060
the content feed URI.

00:36:37.060 --> 00:36:39.438
It's fairly straightforward.

00:36:42.798 --> 00:36:43.058
Great.

00:36:43.058 --> 00:36:46.578
So once you create site, create
content, you're going to

00:36:46.578 --> 00:36:48.340
want to be able to fetch it.

00:36:48.340 --> 00:36:51.178
And the sites API itself
has a really robust query

00:36:51.178 --> 00:36:51.938
structured language.

00:36:51.938 --> 00:36:54.800
So you can imagine using
the kind parameter,

00:36:54.800 --> 00:36:55.780
getting just webpages.

00:36:55.300 --> 00:36:58.300
If I want to get at webpages
and list page entries,

00:36:58.300 --> 00:36:59.698
absolutely possible.

00:36:59.698 --> 00:37:03.418
If you know the URL of a site
you can use the path parameter

00:37:03.418 --> 00:37:05.398
to drill down into that
actaul entry itself.

00:37:05.398 --> 00:37:08.858
The parent parameter can be
used for fetching children

00:37:08.858 --> 00:37:09.218
of a certain page.

00:37:09.218 --> 00:37:11.378
So you have a list of files
in a file cabinet, you can

00:37:11.378 --> 00:37:13.958
get at all those entries.

00:37:13.958 --> 00:37:16.218
And then just lastly,
there's metadata properties

00:37:16.218 --> 00:37:17.518
for all of these.

00:37:17.518 --> 00:37:20.678
So if you mark an entry or an
announcement or comment as

00:37:20.678 --> 00:37:23.300
draft or if it's a deleted
entry you can include those

00:37:23.300 --> 00:37:25.378
as part of your query.

00:37:25.378 --> 00:37:26.798
So once have content in
it's absolutely your data.

00:37:26.798 --> 00:37:29.378
You can get it out in
any way, shape or form.

00:37:30.278 --> 00:37:32.578
So in Java this is pretty
straightforward as well.

00:37:32.578 --> 00:37:33.498
We're still talking to
the content feed URI.

00:37:34.360 --> 00:37:37.040
And I just changed the URI to
include the kind parameter so

00:37:37.040 --> 00:37:39.800
we'll get at the file cabinet
pages and the lis

00:37:39.800 --> 00:37:40.158
pages on a site.

00:37:40.158 --> 00:37:43.538
We'll call the get feed
with that URI and expect

00:37:43.538 --> 00:37:46.618
a content feedback.

00:37:46.618 --> 00:37:48.518
And then we'll just loop
through and printout the file

00:37:48.518 --> 00:37:51.160
cabinet entries and we'll print
our the list page entries that

00:37:51.160 --> 00:37:52.638
are returned to us
from that query.

00:37:53.858 --> 00:37:56.234
Certain content types are
actually going to have

00:37:56.234 --> 00:37:56.780
different metadata properties.

00:37:56.780 --> 00:38:00.470
So for example, the list page
entries have the column name in

00:38:00.470 --> 00:38:02.346
the column name and the index,
so we can just print those out

00:38:02.346 --> 00:38:05.860
as well looping through
the column items.

00:38:08.998 --> 00:38:10.618
So instead of throwing more
code at you I kind of want to

00:38:10.618 --> 00:38:13.858
just demonstrate on how easy
and quick it is to create a

00:38:13.858 --> 00:38:14.418
Google Site from scratch.

00:38:14.418 --> 00:38:23.338
So what we can do is actually
I'll fire up Eclipse.

00:38:23.338 --> 00:38:26.900
And even before I do that I'll
just show you-- this a test

00:38:26.900 --> 00:38:28.980
domain app, testdomain.com
that I'm using.

00:38:29.858 --> 00:38:33.318
Like I said, creating Sites is
only something you can do with

00:38:33.318 --> 00:38:34.540
an apps domain at this point.

00:38:34.540 --> 00:38:35.020
So I have three
test sites here.

00:38:35.340 --> 00:38:37.178
Let's go ahead and create
a new one from scratch.

00:38:37.178 --> 00:38:38.458
It'll be kind of
boring at first.

00:38:38.458 --> 00:38:39.820
We'll change the theme.

00:38:39.820 --> 00:38:41.860
We'll add some users.

00:38:41.860 --> 00:38:42.470
We'll share and
collaborate the site.

00:38:42.470 --> 00:38:43.638
We'll make it public.

00:38:43.638 --> 00:38:46.698
We'll share it to the domain
and make it public and then

00:38:46.698 --> 00:38:54.098
add a bunch of content
and upload some files.

00:38:54.098 --> 00:38:56.218
So I have some helper logic
here-- and I'll scroll in

00:38:56.218 --> 00:38:59.760
for you guys-- that
sets all this up.

00:38:59.760 --> 00:39:02.400
You know, I renamed a bunch
of command line options.

00:39:02.400 --> 00:39:03.160
Basically I'm setting
up an Auth subtoken.

00:39:04.978 --> 00:39:06.918
I'm setting the domain and site
name that I'm going to be

00:39:06.918 --> 00:39:09.278
talking to via the
command line.

00:39:09.278 --> 00:39:13.800
I have a couple methods here to
build the content feed URI and

00:39:13.800 --> 00:39:16.718
the site feed URI to
pull the site data.

00:39:16.718 --> 00:39:19.858
But if I scroll down here to
this section this is actually

00:39:19.858 --> 00:39:21.538
where we can create a site.

00:39:21.538 --> 00:39:23.698
So just as in creating a
webpage entry you're going

00:39:23.698 --> 00:39:24.398
to want to start off
with a blank site entry.

00:39:25.778 --> 00:39:28.138
We can set a title for this
site, a summary, a description.

00:39:28.138 --> 00:39:31.298
The site name itself is
the URL, what we want

00:39:31.298 --> 00:39:33.218
it to appear under.

00:39:33.218 --> 00:39:35.598
And then we'll make that post
request using the insert method

00:39:35.598 --> 00:39:38.518
just as we did with creating
the webpage content.

00:39:38.518 --> 00:39:40.398
It's going to be boring at
first, so the next thing I can

00:39:40.398 --> 00:39:43.900
do is after the server returns
this new site entry here to me

00:39:43.900 --> 00:39:46.138
I can call the update method.

00:39:46.138 --> 00:39:48.438
I can set a theme and call the
update method, which would make

00:39:48.438 --> 00:39:50.860
a put request and change
that theme of the site.

00:39:50.860 --> 00:39:52.464
So let's just see what
this looks like.

00:39:55.478 --> 00:39:56.598
So we go here and authenticate.

00:39:56.598 --> 00:39:58.538
I'm just setting an Auth
subtoken then I set up
918
00:39:58,538 --&gt; 00:39:58,058
prior to this show.

00:40:00.440 --> 00:40:01.320
So we create a site.

00:40:01.320 --> 00:40:03.958
If I hit return we can
change the theme, make it

00:40:03.958 --> 00:40:06.938
a little more interesting.

00:40:06.938 --> 00:40:10.458
So if I refresh my list of
sites this is the title

00:40:10.458 --> 00:40:14.158
of the presentation.

00:40:14.158 --> 00:40:14.358
So there we go.

00:40:14.358 --> 00:40:16.478
We created a new site from
scratch, a few lines of

00:40:16.478 --> 00:40:17.878
code and I actually
changed the theme.

00:40:17.878 --> 00:40:19.178
So before was just a
cookie-cutter blank theme

00:40:19.178 --> 00:40:22.378
and we made it a little
more interesting.

00:40:22.378 --> 00:40:25.558
Let's just go to show you what
it looks like to add certain

00:40:25.558 --> 00:40:28.604
people and share this outside
of our domain and make

00:40:28.604 --> 00:40:29.260
this site public.

00:40:29.260 --> 00:40:30.518
So by default, Sites
has this set up.

00:40:31.958 --> 00:40:33.318
The permissions associated
with this site.

00:40:34.558 --> 00:40:36.478
So we can add everyone at
Apps Test domain to be a

00:40:36.478 --> 00:40:38.938
collaborator in the site and we
can also make the site public.

00:40:38.938 --> 00:40:40.440
So you in the audience can
actually view the site after

00:40:40.440 --> 00:40:45.238
I finish that process.

00:40:45.238 --> 00:40:47.592
So that code is very
straightforward.

00:40:49.792 --> 00:40:53.760
Here we're creating an ACL
entry and to share it with the

00:40:53.760 --> 00:40:56.478
domain we'll use the ACL type
scope for the domain and pass

00:40:56.478 --> 00:41:00.218
in the Apps Test domain as our
value for that right here.

00:41:00.218 --> 00:41:02.678
We'll set the roles writer
to mean collaborator.

00:41:03.780 --> 00:41:07.438
We'll set a link, we'll call
the ACL link and call insert on

00:41:07.438 --> 00:41:10.518
that, which is the site ACL
link for that particular entry.

00:41:10.518 --> 00:41:12.898
To make the site public
is very similar.

00:41:12.898 --> 00:41:15.898
So instead of using the domain
type we'll use the default

00:41:15.898 --> 00:41:16.458
type meaning everyone.

00:41:16.698 --> 00:41:23.880
And we'll add them as
readers and call insert.

00:41:23.880 --> 00:41:27.738
So we'll press enter a
couple times and the site

00:41:27.738 --> 00:41:29.138
should now be public.

00:41:29.138 --> 00:41:33.638
So if I refresh this indeed
those things have changed.

00:41:33.638 --> 00:41:35.978
So if you actually want to
visit this site it's

00:41:35.978 --> 00:41:40.718
sites.google.com
/a/appstestdomain.com Google

00:41:40.718 --> 00:41:42.898
I/O 2010 in the URL here.

00:41:42.898 --> 00:41:43.038
So that's great.

00:41:43.038 --> 00:41:44.538
Well, I don't want to
work on this myself.

00:41:44.538 --> 00:41:45.718
I've added collaborators.

00:41:45.718 --> 00:41:46.898
Let's actually add
some content.

00:41:46.898 --> 00:41:48.978
Right now I had the
home page by default.

00:41:55.438 --> 00:41:58.378
So to do that I can use
the same processes you

00:41:58.378 --> 00:41:59.140
saw on the slidees.

00:41:59.140 --> 00:42:00.640
I'll create webpage entry.

00:42:00.640 --> 00:42:02.100
I'll create a comment
on the page.

00:42:02.100 --> 00:42:05.238
And an important note here for
the comment is that the webpage

00:42:05.238 --> 00:42:07.358
is going to be the parent
element for that page.

00:42:08.038 --> 00:42:09.878
So we need you to
include the link.

00:42:09.878 --> 00:42:12.538
You see the site's
link real parent.

00:42:13.398 --> 00:42:15.698
Let me call that out.

00:42:15.698 --> 00:42:18.018
Here, so this is setting an
ATOM link telling yes, I want

00:42:18.018 --> 00:42:20.720
this webpage to be the parent
page of this comment

00:42:20.720 --> 00:42:22.678
and that'll make it a
child of that page.

00:42:22.678 --> 00:42:24.800
Again, we'll call answer
and then we'll create a

00:42:24.800 --> 00:42:27.118
file cabinet as well.

00:42:27.118 --> 00:42:32.838
The last thing I can
do is-- jump ahead.

00:42:32.838 --> 00:42:33.618
We'll create a
couple attachments.

00:42:33.838 --> 00:42:35.718
I'll actually upload this
presentation, PDF version of

00:42:35.718 --> 00:42:37.958
this presentation and all the
code snippets you saw in the

00:42:37.958 --> 00:42:40.964
presentation to this and I did
share it publicly so you should

00:42:40.964 --> 00:42:41.078
be able to access that.

00:42:41.078 --> 00:42:44.400
I'll just read a file of a
bunch of directories, a

00:42:44.400 --> 00:42:46.960
directory of files and create
a couple attachment entries.

00:42:47.938 --> 00:42:50.298
Setting the media source to
that file and media type.

00:42:51.898 --> 00:42:54.018
Set a summary and
description in the parent.

00:42:54.018 --> 00:42:59.158
So we'll do that really quick.

00:42:59.158 --> 00:43:00.218
Comments posted.

00:43:00.218 --> 00:43:01.438
File cabinets created.

00:43:02.858 --> 00:43:06.058
Moving the page to be a subpage
of the webpage I'll upload

00:43:06.058 --> 00:43:23.218
a bunch of attachments.

00:43:23.218 --> 00:43:26.978
So you can see I have a new
webpage here, I set the

00:43:26.978 --> 00:43:27.280
title and the content.

00:43:27.280 --> 00:43:28.840
The blink tag doesn't
work in sites.

00:43:28.840 --> 00:43:29.618
Oh, well.

00:43:29.618 --> 00:43:29.998
Nobody likes the
blink tag anyway.

00:43:29.998 --> 00:43:34.218
I posted a comment, created
a subpage with the

00:43:34.218 --> 00:43:36.438
file cabinet page.

00:43:36.438 --> 00:43:38.058
Unfortunately it doesn't look
like my attachments are being

00:43:38.058 --> 00:43:41.538
uploaded, but I'll definitely
get those up there because they

00:43:41.538 --> 00:43:43.894
do have the code snippets
for all the presentation.

00:43:43.894 --> 00:43:45.886
There they go.

00:43:45.886 --> 00:43:46.876
One by one.

00:43:49.862 --> 00:43:50.658
So there's the example.

00:43:50.658 --> 00:43:53.478
I'm just uploading a single
file to a file cabinet.

00:43:53.478 --> 00:43:55.678
So if we take anything away
from that it's that it's very,

00:43:55.678 --> 00:43:58.658
very easy to work with the
Sites Data API and you really

00:43:58.658 --> 00:44:01.728
have access to all the content
within a Google Site.

00:44:06.178 --> 00:44:07.978
So I think now I'm going to
throw it back to Vijay.

00:44:07.978 --> 00:44:10.098
He's going to wrap things
up for us and we'll take

00:44:10.098 --> 00:44:13.958
questions after that.

00:44:13.958 --> 00:44:14.718
VIJAY BANGARU:
Great, thanks Eric.

00:44:14.718 --> 00:44:18.980
So I asked this sort of at the
beginning of the talk, what

00:44:18.980 --> 00:44:19.100
can you build with them?

00:44:19.100 --> 00:44:21.940
And so we're going to revisit
that and hopefully you've seen

00:44:21.940 --> 00:44:25.800
with the APIs that you can
build really rich, compelling

00:44:25.800 --> 00:44:28.318
experiences for your users that
will hopefully delight them

00:44:28.318 --> 00:44:31.260
and make you guys some money.

00:44:31.260 --> 00:44:33.698
There's some more things
we want to do in the near

00:44:33.698 --> 00:44:34.320
future to make this better.

00:44:34.320 --> 00:44:38.078
We want to make it a richer
platform for both the

00:44:38.078 --> 00:44:39.398
developer and the user.

00:44:39.260 --> 00:44:42.300
So the first thing we're
looking into is better

00:44:42.300 --> 00:44:43.280
integration with the
Apps Marketplace.

00:44:43.280 --> 00:44:45.878
Of course, today you guys
can put your apps in the

00:44:45.878 --> 00:44:47.018
Marketplace and they're there.

00:44:47.018 --> 00:44:49.760
Domain admins can find them and
install them and all of that,

00:44:49.760 --> 00:44:51.298
but we want to go
a bit further.

00:44:51.298 --> 00:44:54.738
We want it so the app you
write, it's file content,

00:44:54.738 --> 00:44:58.860
whatever data it stores, that
state is visible in the

00:44:58.860 --> 00:44:59.140
users Doc List, right?

00:44:59.140 --> 00:45:02.718
And then from there they
can access it and give

00:45:02.718 --> 00:45:05.358
you more hooks like that.

00:45:05.358 --> 00:45:09.260
And so a screenshot example of
one thing we're thinking of is

00:45:09.260 --> 00:45:13.318
when a user goes into his Doc
List and sees your type, in the

00:45:13.318 --> 00:45:15.398
context menu there's a new open
with feature and he's going to

00:45:15.398 --> 00:45:19.078
see all the applications
installed to his domain that

00:45:19.078 --> 00:45:21.308
are eligible to edit
that MIME type.

00:45:21.308 --> 00:45:25.420
Whether it's a facts service,
your own editor or a

00:45:25.420 --> 00:45:26.518
converter service.

00:45:26.518 --> 00:45:29.098
And then if he goes to more, he
can go to the Apps Marketplace

00:45:29.098 --> 00:45:30.880
and see what else is available.

00:45:30.880 --> 00:45:33.380
So we're hoping with Apps
Marketplace and some UI

00:45:33.380 --> 00:45:36.760
integrations like this there's
going to be some really nice

00:45:36.760 --> 00:45:38.678
things for you guys
moving forward.

00:45:38.678 --> 00:45:41.458
And on the topic of moving
forward, you know,

00:45:41.458 --> 00:45:42.858
where is this going?

00:45:43.198 --> 00:45:48.778
We're hoping that with your
help we can build a platform

00:45:48.778 --> 00:45:51.598
where users documents and
files, they just never

00:45:51.598 --> 00:45:52.438
leave the cloud.

00:45:52.438 --> 00:45:55.638
End to end that's where they
are because you can create them

00:45:55.638 --> 00:45:58.064
there, you can edit them, you
can collaborate on them, you

00:45:58.064 --> 00:45:59.680
can store them and share them.

00:45:59.680 --> 00:46:03.440
It's all in the cloud and then
you add in the access from

00:46:03.440 --> 00:46:04.800
anywhere and your kind of set.

00:46:04.800 --> 00:46:07.778
And if we build this platform
correctly anyone can

00:46:07.778 --> 00:46:08.868
play in the cloud.

00:46:08.868 --> 00:46:11.360
So all the new web apps you
guys write, all the new client

00:46:11.360 --> 00:46:13.560
apps that you guys write,
those are all available.

00:46:13.560 --> 00:46:15.400
And it's not just new stuff.

00:46:15.400 --> 00:46:19.680
It's the legacy stuff that we
can together bring all the

00:46:19.680 --> 00:46:20.620
legacy stuff into the present.

00:46:20.620 --> 00:46:24.658
So if you look at something
like Memeo Connect that's a

00:46:24.658 --> 00:46:28.898
great way to turn Windows XP
into knowing about the cloud.

00:46:28.338 --> 00:46:31.178
It brings stuff that doesn't
even know about it, doesn't

00:46:31.178 --> 00:46:33.898
even get the cloud into
the future where we are.

00:46:33.898 --> 00:46:35.478
And same at the
application level.

00:46:35.478 --> 00:46:38.998
If you look at an application
like DocVerse, which is a

00:46:38.998 --> 00:46:43.218
company we recently acquired,
it's an application that turns

00:46:43.218 --> 00:46:46.300
Office 2003 into a
web compliant app.

00:46:46.300 --> 00:46:50.860
So that those files as you're
editing them in Office 2003

00:46:50.860 --> 00:46:52.158
they're stored up in Google
Docs and they're shared

00:46:52.158 --> 00:46:55.678
in Google Docs and is
available to everyone.

00:46:55.678 --> 00:46:58.518
So that's the platform we want
to build and a key component

00:46:58.518 --> 00:46:59.898
of this platform is sharing.

00:47:00.078 --> 00:47:04.038
We know sharing is key and
people want good collaboration.

00:47:04.038 --> 00:47:06.078
That's something
we're committed to.

00:47:06.078 --> 00:47:09.498
And then in general, Google
Docs and Sites, these are web

00:47:09.498 --> 00:47:13.398
apps, we're innovating as fast
as we can and hopefully you saw

00:47:13.398 --> 00:47:17.240
that with just the API
progression in one year.

00:47:17.240 --> 00:47:18.080
We're committed to this.

00:47:18.080 --> 00:47:20.740
We want this to work and
with your help we can make

00:47:20.740 --> 00:47:22.098
some great things here.

00:47:22.098 --> 00:47:24.578
And specifically with Google
sites we do have a lot of

00:47:24.578 --> 00:47:26.240
more stuff coming here also.

00:47:26.240 --> 00:47:28.798
In terms of work spaces.

00:47:28.798 --> 00:47:31.138
Two things people have asked
for and it make lots of sense

00:47:31.138 --> 00:47:33.660
and we're going after is
a publishing workflow.

00:47:33.660 --> 00:47:37.720
So if you want workflow in your
work space that's something

00:47:37.720 --> 00:47:39.018
we're going to support.

00:47:39.018 --> 00:47:42.218
We also want deeper integration
with the core Doc product

00:47:42.218 --> 00:47:43.978
because there's always
been this weird division.

00:47:43.978 --> 00:47:46.300
We want to get away with
that so it just makes

00:47:46.300 --> 00:47:47.518
sense as one core suite.

00:47:48.438 --> 00:47:50.120
Additionally, we're going
to do more themes,

00:47:50.120 --> 00:47:52.280
more extensibility.

00:47:52.280 --> 00:47:54.578
There's going to be some great
stuff coming in this space.

00:47:54.578 --> 00:47:57.398
So with that I want to move
to your guys' questions.

00:47:57.638 --> 00:47:59.718
So we have two
microphones here.

00:47:59.998 --> 00:48:01.518
They're like within 10
feet of each other.

00:48:01.518 --> 00:48:04.318
I don't know why'd we
need 2, but we got them.

00:48:04.318 --> 00:48:06.778
We also have the questions
up on the Google Wave.

00:48:06.778 --> 00:48:10.898
So go up there and take a
look at the questions.

00:48:10.898 --> 00:48:12.348
Vote up the ones that
you think are good and

00:48:12.348 --> 00:48:12.638
we'll address them.

00:48:12.638 --> 00:48:15.280
And I want Eric and Matt to
come up and join me and

00:48:15.280 --> 00:48:18.378
we're also going to
have Scott Johnston.

00:48:18.378 --> 00:48:19.880
Our special guest.

00:48:19.880 --> 00:48:22.920
The PM of Google Sites.

00:48:22.920 --> 00:48:24.818
So he'll be able to
answer stuff as well.

00:48:24.818 --> 00:48:27.438
Before we go to questions
though a quick

00:48:27.438 --> 00:48:28.358
mention of resources.

00:48:28.438 --> 00:48:29.418
Everything you'd want,
code.google.com.

00:48:31.718 --> 00:48:33.858
I think you guys know the links
and of course the samples

00:48:33.858 --> 00:48:35.238
are at the samples page.

00:48:35.238 --> 00:48:37.158
Eric's going to pull up the
wave so we can take questions

00:48:37.158 --> 00:48:39.820
off of there and we'll start
with the first question

00:48:39.820 --> 00:48:42.998
from the mic.

00:48:42.998 --> 00:48:46.658
AUDIENCE: Hi, my company in the
Netherlands uses a lot of XML

00:48:46.658 --> 00:48:50.260
and I was wondering whether
we could use Google

00:48:50.260 --> 00:48:51.800
Docs to upload XML?

00:48:53.578 --> 00:48:57.438
And that Google Docs
validates it against an XSD.

00:48:57.438 --> 00:49:02.998
And we would really like to
have the option that when a

00:49:02.998 --> 00:49:08.758
user clicks their XML document
that we uploaded into Google

00:49:08.758 --> 00:49:11.618
Docs, to be able to
automatically open

00:49:11.618 --> 00:49:13.958
it with our app.

00:49:13.958 --> 00:49:15.238
So what about the XML?

00:49:15.238 --> 00:49:18.498
Would it be available in Google
Docs or is it not something

00:49:18.498 --> 00:49:19.418
that Google wants?

00:49:19.418 --> 00:49:22.018
VIJAY BANGARU: Yes so the XML
file today of course you can

00:49:22.018 --> 00:49:23.818
upload and store with those.

00:49:23.818 --> 00:49:25.938
Some of the integration points
that we're trying to work on

00:49:25.938 --> 00:49:29.738
with Apps marketplace and
third-party apps would

00:49:29.738 --> 00:49:30.240
support that exactly.

00:49:30.240 --> 00:49:35.018
Where a user could register
your app as the app that opens

00:49:35.018 --> 00:49:36.298
XML types in Google Docs.

00:49:36.298 --> 00:49:39.898
And every time they click on
that your app is launched.

00:49:39.898 --> 00:49:43.598
AUDIENCE: But is it already
possible to upload XML and that

00:49:43.598 --> 00:49:47.118
Google Docs recognizes it as
XML or is it just like

00:49:47.118 --> 00:49:51.698
the LaTeX example?

00:49:51.698 --> 00:49:53.038
VIJAY BANGARU: So you can go
ahead and upload the file

00:49:53.038 --> 00:49:54.058
and it's going to show up
there as filename.xml.

00:49:55.860 --> 00:49:59.280
For the files today we don't do
any type specific activities,

00:49:59.280 --> 00:50:01.458
so the user will see
.xml in their UI.

00:50:01.458 --> 00:50:06.598
We don't do any special
things yet for that type.

00:50:06.598 --> 00:50:07.818
AUDIENCE: Are you planning to?

00:50:07.578 --> 00:50:09.658
VIJAY BANGARU: We want to and
we're hoping this third-party

00:50:09.658 --> 00:50:12.660
integration is going to help
us do a lot of that stuff.

00:50:12.660 --> 00:50:15.920
AUDIENCE: OK, thanks.

00:50:15.920 --> 00:50:18.498
VIJAY BANGARU: Let's take
the next one from the mic.

00:50:18.498 --> 00:50:23.798
AUDIENCE: I work with the
spreadsheet feeds and I

00:50:23.798 --> 00:50:24.538
have everything working.

00:50:24.538 --> 00:50:29.438
I can pull in the content of
cells from a spreadsheet.

00:50:29.438 --> 00:50:34.860
However, it was mentioned that
different Docs users use the

00:50:34.860 --> 00:50:37.598
different tools differently.

00:50:37.598 --> 00:50:42.090
The formatting within
Spreadsheets is something that

00:50:42.090 --> 00:50:45.498
users use a lot to communicate
information and right now I'm

00:50:45.498 --> 00:50:49.498
not able to read the formatting
of each cell off of the API, is

00:50:49.498 --> 00:50:52.958
there any plan to introduce
that into the Spreadsheets API?

00:50:52.958 --> 00:50:53.698
VIJAY BANGARU: I'm sorry.

00:50:53.698 --> 00:50:55.178
I couldn't hear
the second half.

00:50:55.178 --> 00:50:57.500
A plan to do what specifically?

00:50:57.500 --> 00:50:59.480
AUDIENCE: I'm unable to
read the formatting.

00:50:59.820 --> 00:51:06.158
For example, the cell shading
or underlining from--

00:51:06.158 --> 00:51:08.498
VIJAY BANGARU: I see.

00:51:08.498 --> 00:51:10.478
So that's a very reasonable
feature requests.

00:51:10.478 --> 00:51:13.740
And I personally don't
know what's in the pipe.

00:51:13.740 --> 00:51:15.498
But it seems like
something that should be.

00:51:15.498 --> 00:51:17.538
ERIC BIDELMAN: I think at this
point the Spreadsheets API

00:51:17.538 --> 00:51:20.160
itself is more about getting at
the data and querying
1170
00:51:20,16 --&gt; 00:51:20,14
for your data.

00:51:21.320 --> 00:51:23.180
It's the same thing
with the Doc List API.

00:51:23.180 --> 00:51:26.120
So it's more about file
management, sort of actually

00:51:26.120 --> 00:51:29.578
getting in and editing a Google
Doc, but absolutely a great

00:51:29.578 --> 00:51:31.358
feature request that
we should consider.

00:51:33.298 --> 00:51:35.838
VIJAY BANGARU: OK, so the first
question off the [? dory, ?]

00:51:35.838 --> 00:51:37.058
are there any plans to expose
Google Drawing through

00:51:37.058 --> 00:51:39.018
the APIs right now?

00:51:39.278 --> 00:51:39.338
There isn't.

00:51:40.378 --> 00:51:42.998
I think basically
the same answer.

00:51:42.998 --> 00:51:45.178
It's something we definitely
need to do and we

00:51:45.178 --> 00:51:45.858
hope to address--

00:51:45.858 --> 00:51:48.798
ERIC BIDELMAN: Yeah, I would
just say that as features

00:51:48.798 --> 00:51:50.698
become available in Google Docs
we'd liked to have them in the

00:51:50.698 --> 00:51:51.640
API at one point or another.

00:51:52.980 --> 00:51:55.180
A good example is the OCR
feature was something available

00:51:55.180 --> 00:51:56.740
in the API, but not in Docs.

00:51:56.740 --> 00:51:59.420
You know, folder sharing
came to the API before
1188
00:51:59,42 --&gt; 00:51:59,4
it was in Docs.

00:51:59.400 --> 00:52:01.900
So there's this different
back and back and

00:52:01.900 --> 00:52:02.738
forth that happens.

00:52:02.540 --> 00:52:06.498
But yeah, we do like to keep
those up to speed and as users

00:52:06.498 --> 00:52:09.610
prioritize that in our issue
tracker we'll take a look.

00:52:11.798 --> 00:52:15.140
AUDIENCE: Question related to
the OCR piece of the Docs, any

00:52:15.140 --> 00:52:19.398
plans to include something like
forms processing that only

00:52:19.398 --> 00:52:21.798
certain parts of the
docs can be scanned?

00:52:21.798 --> 00:52:24.538
Or the images that are being
uploaded rather than the

00:52:24.538 --> 00:52:25.418
whole image being OCR?

00:52:25.298 --> 00:52:31.760
VIJAY BANGARU:
That's a good idea.

00:52:32.478 --> 00:52:34.544
We will definitely get
that feedback back

00:52:34.544 --> 00:52:35.898
to the forums team.

00:52:35.898 --> 00:52:38.218
Let's take the next one
from the [? dory arc. ?]

00:52:38.218 --> 00:52:39.238
Eric, this looks like
a question for you.

00:52:39.238 --> 00:52:42.358
ERIC BIDELMAN: So are there
any plans to provide ODBC

00:52:42.358 --> 00:52:45.460
connectivity for Docs and Site
scripts to have direct access--

00:52:45.460 --> 00:52:47.960
SCOTT JOHNSTON: There's an
app scripts session this

00:52:47.960 --> 00:52:49.718
afternoon that I definitely
recommend coming to.

00:52:49.718 --> 00:52:52.040
That's possible now and we'll
be spending a lot of time this

00:52:52.040 --> 00:52:57.278
year in beefing up app scripts
and Docs and Sites integration.
1209
00:52:57,278 --&gt; 00:52:57,058
So the answer's yes.

00:52:57.058 --> 00:52:59.340
More detail later
this afternoon.

00:52:59.340 --> 00:53:00.980
ERIC BIDELMAN: He did link to a
post that we just made that

00:53:00.980 --> 00:53:03.618
announces JDBC support
for app scripts.

00:53:03.618 --> 00:53:05.518
VIJAY BANGARU: So this
afternoon more detail.

00:53:05.518 --> 00:53:06.118
ERIC BIDELMAN: 3 o'clock.

00:53:06.218 --> 00:53:08.578
VIJAY BANGARU: So thank
you guys for coming and

00:53:08.578 --> 00:53:10.338
especially thank you
for waiting into lunch.

00:53:10.338 --> 00:53:15.338
ERIC BIDELMAN: Yeah,
[UNINTELLIGIBLE PHRASE]

