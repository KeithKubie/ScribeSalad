WEBVTT
Kind: captions
Language: en

00:00:00.510 --> 00:00:02.790
Here's an example of what
a Gradle build script looks like.

00:00:03.810 --> 00:00:05.350
Even without any explanation,

00:00:05.350 --> 00:00:07.400
it's reasonably easy to
figure out what's going on.

00:00:08.440 --> 00:00:12.370
We have what kind of looks like
a stripped down JSON syntax.

00:00:12.370 --> 00:00:15.990
However, down here, where it
looks like we're creating a task,

00:00:15.990 --> 00:00:17.800
there's what looks like
a Java print line statement.

00:00:18.870 --> 00:00:20.320
What's going on here?

00:00:20.320 --> 00:00:23.760
Is this script just structured
data like JSON or XML?

00:00:23.760 --> 00:00:25.040
Or is this actual Java code?

00:00:26.230 --> 00:00:29.770
Well, the answer is that Gradle scripts
are written in a special purpose build

00:00:29.770 --> 00:00:31.250
language provided by Gradle.

00:00:32.520 --> 00:00:34.800
But it's not a language
that's developed by scratch.

00:00:34.800 --> 00:00:38.160
It sits on top of a generic
scripting language called Groovy.

00:00:38.160 --> 00:00:41.200
Groovy has a lot of syntactic sugar in
other features to allow us to write

00:00:41.200 --> 00:00:44.480
build scripts that look a lot more like
natural language when compared to using

00:00:44.480 --> 00:00:45.210
something like Java.

00:00:46.400 --> 00:00:49.270
Second Groovy integrates
perfectly with java,

00:00:49.270 --> 00:00:52.150
which is the language that
Gradle platform is written in.

00:00:52.150 --> 00:00:54.980
The main thing you need to learn when
using Gradle is the Gradle build

00:00:54.980 --> 00:00:59.320
language which is where the keywords
like Android and task are coming from.

00:00:59.320 --> 00:01:02.580
But it also helps a lot to understand
how this build language sits on top of

00:01:02.580 --> 00:01:03.360
Groovy and Java.

00:01:04.800 --> 00:01:08.070
The entire build script has
what we call a delegate object,

00:01:08.070 --> 00:01:11.250
which exposes the Gradle build language
to Groovy scripting language within

00:01:11.250 --> 00:01:12.780
the build script.

00:01:12.780 --> 00:01:15.860
If you write a Gradle plugin,
you could write it in any language and

00:01:15.860 --> 00:01:17.220
use the same delegate object.

00:01:18.240 --> 00:01:21.180
The Gradle build language is
also called the Gradle DSL, or

00:01:21.180 --> 00:01:23.320
Domain Specific Language.

00:01:23.320 --> 00:01:26.160
A domain specific language is
a language that is finely tailored for

00:01:26.160 --> 00:01:27.540
a specific task.

00:01:27.540 --> 00:01:30.980
In this case the domain we're
talking about is an Android build.

00:01:30.980 --> 00:01:34.160
Note, there's a big difference
between describing your build and

00:01:34.160 --> 00:01:38.190
providing explicit instructions on how
to actually make the build happen.

00:01:38.190 --> 00:01:41.210
The Gradle DSL declared in so
you're only responsible for

00:01:41.210 --> 00:01:45.160
describing your build and Gradle
itself knows how to make it happen.

00:01:45.160 --> 00:01:47.160
That means your build scripts
can be much shorter and

00:01:47.160 --> 00:01:49.280
much easier to understand.

00:01:49.280 --> 00:01:52.270
However, within the build script
you have a full blown powerful

00:01:52.270 --> 00:01:54.430
programming language at your disposal.

00:01:54.430 --> 00:01:57.240
We do recommend that you keep
build scripts declarative, and

00:01:57.240 --> 00:02:00.010
try not to pollute it
with low-level logic.

00:02:00.010 --> 00:02:01.680
That's what Gradle plugins are for.

00:02:01.680 --> 00:02:05.010
You can write them in any JVM
language like Java, Groovy or Scala.

