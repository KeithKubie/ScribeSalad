WEBVTT
Kind: captions
Language: en

00:00:02.090 --> 00:00:06.170
 
dear bald guy I watched your threading

00:00:06.170 --> 00:00:06.180
dear bald guy I watched your threading
 

00:00:06.180 --> 00:00:09.049
dear bald guy I watched your threading
videos I spawned a hundred threads to do

00:00:09.049 --> 00:00:09.059
videos I spawned a hundred threads to do
 

00:00:09.059 --> 00:00:13.400
videos I spawned a hundred threads to do
my work and my app got slower you're a

00:00:13.400 --> 00:00:13.410
my work and my app got slower you're a
 

00:00:13.410 --> 00:00:16.480
my work and my app got slower you're a
horrible person and you should feel bad

00:00:16.480 --> 00:00:16.490
horrible person and you should feel bad
 

00:00:16.490 --> 00:00:22.519
horrible person and you should feel bad
hashtag enums matter my name is Colt

00:00:22.519 --> 00:00:22.529
hashtag enums matter my name is Colt
 

00:00:22.529 --> 00:00:25.130
hashtag enums matter my name is Colt
McAnlis and yes technically you can

00:00:25.130 --> 00:00:25.140
McAnlis and yes technically you can
 

00:00:25.140 --> 00:00:26.689
McAnlis and yes technically you can
spawn hundreds of threads for your app

00:00:26.689 --> 00:00:26.699
spawn hundreds of threads for your app
 

00:00:26.699 --> 00:00:29.089
spawn hundreds of threads for your app
but as you guessed it that might not be

00:00:29.089 --> 00:00:29.099
but as you guessed it that might not be
 

00:00:29.099 --> 00:00:31.400
but as you guessed it that might not be
the best idea for performance see

00:00:31.400 --> 00:00:31.410
the best idea for performance see
 

00:00:31.410 --> 00:00:32.900
the best idea for performance see
cramming too many threads into not

00:00:32.900 --> 00:00:32.910
cramming too many threads into not
 

00:00:32.910 --> 00:00:35.720
cramming too many threads into not
enough CPUs is an old problem and for

00:00:35.720 --> 00:00:35.730
enough CPUs is an old problem and for
 

00:00:35.730 --> 00:00:38.330
enough CPUs is an old problem and for
decades now thread scheduling has solved

00:00:38.330 --> 00:00:38.340
decades now thread scheduling has solved
 

00:00:38.340 --> 00:00:39.770
decades now thread scheduling has solved
this by using various metrics to

00:00:39.770 --> 00:00:39.780
this by using various metrics to
 

00:00:39.780 --> 00:00:41.270
this by using various metrics to
determine which thread gets the next

00:00:41.270 --> 00:00:41.280
determine which thread gets the next
 

00:00:41.280 --> 00:00:44.389
determine which thread gets the next
slice of CPU time basically every thread

00:00:44.389 --> 00:00:44.399
slice of CPU time basically every thread
 

00:00:44.399 --> 00:00:45.860
slice of CPU time basically every thread
is assigned a priority

00:00:45.860 --> 00:00:45.870
is assigned a priority
 

00:00:45.870 --> 00:00:47.540
is assigned a priority
the scheduler then gives preference to

00:00:47.540 --> 00:00:47.550
the scheduler then gives preference to
 

00:00:47.550 --> 00:00:48.860
the scheduler then gives preference to
threads that are more important

00:00:48.860 --> 00:00:48.870
threads that are more important
 

00:00:48.870 --> 00:00:50.090
threads that are more important
balancing that with the need to

00:00:50.090 --> 00:00:50.100
balancing that with the need to
 

00:00:50.100 --> 00:00:52.130
balancing that with the need to
eventually get all of its work done now

00:00:52.130 --> 00:00:52.140
eventually get all of its work done now
 

00:00:52.140 --> 00:00:54.110
eventually get all of its work done now
priorities are assigned in a couple of

00:00:54.110 --> 00:00:54.120
priorities are assigned in a couple of
 

00:00:54.120 --> 00:00:56.450
priorities are assigned in a couple of
ways firstly Android assigns thread

00:00:56.450 --> 00:00:56.460
ways firstly Android assigns thread
 

00:00:56.460 --> 00:00:59.180
ways firstly Android assigns thread
priority based on the lifecycle activity

00:00:59.180 --> 00:00:59.190
priority based on the lifecycle activity
 

00:00:59.190 --> 00:01:02.270
priority based on the lifecycle activity
state of your app active and visible

00:01:02.270 --> 00:01:02.280
state of your app active and visible
 

00:01:02.280 --> 00:01:03.619
state of your app active and visible
apps are assigned to the foreground

00:01:03.619 --> 00:01:03.629
apps are assigned to the foreground
 

00:01:03.629 --> 00:01:05.509
apps are assigned to the foreground
group where the rest are assigned to the

00:01:05.509 --> 00:01:05.519
group where the rest are assigned to the
 

00:01:05.519 --> 00:01:07.310
group where the rest are assigned to the
background group and threads in the

00:01:07.310 --> 00:01:07.320
background group and threads in the
 

00:01:07.320 --> 00:01:09.140
background group and threads in the
foreground group get about 90 to 95

00:01:09.140 --> 00:01:09.150
foreground group get about 90 to 95
 

00:01:09.150 --> 00:01:10.670
foreground group get about 90 to 95
percent of total execution time for the

00:01:10.670 --> 00:01:10.680
percent of total execution time for the
 

00:01:10.680 --> 00:01:12.289
percent of total execution time for the
device where the background group only

00:01:12.289 --> 00:01:12.299
device where the background group only
 

00:01:12.299 --> 00:01:14.630
device where the background group only
gets about five to ten percent which of

00:01:14.630 --> 00:01:14.640
gets about five to ten percent which of
 

00:01:14.640 --> 00:01:16.760
gets about five to ten percent which of
course makes sense right I mean visible

00:01:16.760 --> 00:01:16.770
course makes sense right I mean visible
 

00:01:16.770 --> 00:01:18.410
course makes sense right I mean visible
applications on the screen should get

00:01:18.410 --> 00:01:18.420
applications on the screen should get
 

00:01:18.420 --> 00:01:19.999
applications on the screen should get
more processor allocation than apps

00:01:19.999 --> 00:01:20.009
more processor allocation than apps
 

00:01:20.009 --> 00:01:22.550
more processor allocation than apps
which aren't visible secondly it's

00:01:22.550 --> 00:01:22.560
which aren't visible secondly it's
 

00:01:22.560 --> 00:01:24.109
which aren't visible secondly it's
important to note that when a thread is

00:01:24.109 --> 00:01:24.119
important to note that when a thread is
 

00:01:24.119 --> 00:01:26.420
important to note that when a thread is
created by default it's given the same

00:01:26.420 --> 00:01:26.430
created by default it's given the same
 

00:01:26.430 --> 00:01:28.550
created by default it's given the same
priority and group memberships as the

00:01:28.550 --> 00:01:28.560
priority and group memberships as the
 

00:01:28.560 --> 00:01:30.830
priority and group memberships as the
spawning thread as such it competes on

00:01:30.830 --> 00:01:30.840
spawning thread as such it competes on
 

00:01:30.840 --> 00:01:32.270
spawning thread as such it competes on
equal terms for processor time

00:01:32.270 --> 00:01:32.280
equal terms for processor time
 

00:01:32.280 --> 00:01:34.520
equal terms for processor time
allocation so for your UI thread spawns

00:01:34.520 --> 00:01:34.530
allocation so for your UI thread spawns
 

00:01:34.530 --> 00:01:36.920
allocation so for your UI thread spawns
20 other high priority work threads they

00:01:36.920 --> 00:01:36.930
20 other high priority work threads they
 

00:01:36.930 --> 00:01:39.109
20 other high priority work threads they
will all compete equally for CPU

00:01:39.109 --> 00:01:39.119
will all compete equally for CPU
 

00:01:39.119 --> 00:01:41.149
will all compete equally for CPU
resources which pretty much ruins your

00:01:41.149 --> 00:01:41.159
resources which pretty much ruins your
 

00:01:41.159 --> 00:01:42.679
resources which pretty much ruins your
chance of getting all of your UI work

00:01:42.679 --> 00:01:42.689
chance of getting all of your UI work
 

00:01:42.689 --> 00:01:45.440
chance of getting all of your UI work
done in 16 milliseconds to fix this you

00:01:45.440 --> 00:01:45.450
done in 16 milliseconds to fix this you
 

00:01:45.450 --> 00:01:47.450
done in 16 milliseconds to fix this you
should explicitly set thread priority

00:01:47.450 --> 00:01:47.460
should explicitly set thread priority
 

00:01:47.460 --> 00:01:49.130
should explicitly set thread priority
for any threads you create in your

00:01:49.130 --> 00:01:49.140
for any threads you create in your
 

00:01:49.140 --> 00:01:51.800
for any threads you create in your
application this helps the system to

00:01:51.800 --> 00:01:51.810
application this helps the system to
 

00:01:51.810 --> 00:01:53.600
application this helps the system to
schedule competing threads in the same

00:01:53.600 --> 00:01:53.610
schedule competing threads in the same
 

00:01:53.610 --> 00:01:55.850
schedule competing threads in the same
control group on Android this is

00:01:55.850 --> 00:01:55.860
control group on Android this is
 

00:01:55.860 --> 00:01:58.160
control group on Android this is
accomplished using the Handy process set

00:01:58.160 --> 00:01:58.170
accomplished using the Handy process set
 

00:01:58.170 --> 00:02:01.010
accomplished using the Handy process set
thread priority API now just to be

00:02:01.010 --> 00:02:01.020
thread priority API now just to be
 

00:02:01.020 --> 00:02:03.170
thread priority API now just to be
confusing this function takes an integer

00:02:03.170 --> 00:02:03.180
confusing this function takes an integer
 

00:02:03.180 --> 00:02:06.050
confusing this function takes an integer
value between negative 20 and 20 where a

00:02:06.050 --> 00:02:06.060
value between negative 20 and 20 where a
 

00:02:06.060 --> 00:02:09.729
value between negative 20 and 20 where a
lower value indicates a higher priority

00:02:09.729 --> 00:02:09.739
lower value indicates a higher priority
 

00:02:09.739 --> 00:02:11.420
lower value indicates a higher priority
technically speaking this number is

00:02:11.420 --> 00:02:11.430
technically speaking this number is
 

00:02:11.430 --> 00:02:12.290
technically speaking this number is
actually supposed to represent how

00:02:12.290 --> 00:02:12.300
actually supposed to represent how
 

00:02:12.300 --> 00:02:12.900
actually supposed to represent how
friendly

00:02:12.900 --> 00:02:12.910
friendly
 

00:02:12.910 --> 00:02:14.610
friendly
this thread is was sharing its time so

00:02:14.610 --> 00:02:14.620
this thread is was sharing its time so
 

00:02:14.620 --> 00:02:17.190
this thread is was sharing its time so
negative numbers means it's more hostile

00:02:17.190 --> 00:02:17.200
negative numbers means it's more hostile
 

00:02:17.200 --> 00:02:20.340
negative numbers means it's more hostile
to sharing its time but whatever to make

00:02:20.340 --> 00:02:20.350
to sharing its time but whatever to make
 

00:02:20.350 --> 00:02:22.170
to sharing its time but whatever to make
us a little clearer Android has provided

00:02:22.170 --> 00:02:22.180
us a little clearer Android has provided
 

00:02:22.180 --> 00:02:23.850
us a little clearer Android has provided
some named values for you to work with

00:02:23.850 --> 00:02:23.860
some named values for you to work with
 

00:02:23.860 --> 00:02:26.340
some named values for you to work with
these values are defined by Android OS

00:02:26.340 --> 00:02:26.350
these values are defined by Android OS
 

00:02:26.350 --> 00:02:28.590
these values are defined by Android OS
process and can be used as base States

00:02:28.590 --> 00:02:28.600
process and can be used as base States
 

00:02:28.600 --> 00:02:31.440
process and can be used as base States
to work against a default of course is

00:02:31.440 --> 00:02:31.450
to work against a default of course is
 

00:02:31.450 --> 00:02:33.600
to work against a default of course is
what your threads are generally given in

00:02:33.600 --> 00:02:33.610
what your threads are generally given in
 

00:02:33.610 --> 00:02:34.980
what your threads are generally given in
addition to that there's a couple

00:02:34.980 --> 00:02:34.990
addition to that there's a couple
 

00:02:34.990 --> 00:02:36.900
addition to that there's a couple
quantized values to help you increment

00:02:36.900 --> 00:02:36.910
quantized values to help you increment
 

00:02:36.910 --> 00:02:38.940
quantized values to help you increment
or decrement the priority to get a

00:02:38.940 --> 00:02:38.950
or decrement the priority to get a
 

00:02:38.950 --> 00:02:41.070
or decrement the priority to get a
little bit more fine-grained control for

00:02:41.070 --> 00:02:41.080
little bit more fine-grained control for
 

00:02:41.080 --> 00:02:42.990
little bit more fine-grained control for
example the UI thread is always assigned

00:02:42.990 --> 00:02:43.000
example the UI thread is always assigned
 

00:02:43.000 --> 00:02:45.540
example the UI thread is always assigned
priority default and any threads it

00:02:45.540 --> 00:02:45.550
priority default and any threads it
 

00:02:45.550 --> 00:02:47.160
priority default and any threads it
spawned will also be given that same

00:02:47.160 --> 00:02:47.170
spawned will also be given that same
 

00:02:47.170 --> 00:02:49.200
spawned will also be given that same
value but in reality worker threads

00:02:49.200 --> 00:02:49.210
value but in reality worker threads
 

00:02:49.210 --> 00:02:51.060
value but in reality worker threads
should be lower priority which you can

00:02:51.060 --> 00:02:51.070
should be lower priority which you can
 

00:02:51.070 --> 00:02:52.770
should be lower priority which you can
set by adding priority default and

00:02:52.770 --> 00:02:52.780
set by adding priority default and
 

00:02:52.780 --> 00:02:55.890
set by adding priority default and
priority less favorable this way you can

00:02:55.890 --> 00:02:55.900
priority less favorable this way you can
 

00:02:55.900 --> 00:02:57.660
priority less favorable this way you can
control which of your spawn threads

00:02:57.660 --> 00:02:57.670
control which of your spawn threads
 

00:02:57.670 --> 00:03:00.300
control which of your spawn threads
might be more or less important than

00:03:00.300 --> 00:03:00.310
might be more or less important than
 

00:03:00.310 --> 00:03:00.750
might be more or less important than
others

00:03:00.750 --> 00:03:00.760
others
 

00:03:00.760 --> 00:03:02.880
others
and in truth setting these priorities

00:03:02.880 --> 00:03:02.890
and in truth setting these priorities
 

00:03:02.890 --> 00:03:04.740
and in truth setting these priorities
yourself can be cumbersome and that's

00:03:04.740 --> 00:03:04.750
yourself can be cumbersome and that's
 

00:03:04.750 --> 00:03:06.930
yourself can be cumbersome and that's
why classes like async task or intense

00:03:06.930 --> 00:03:06.940
why classes like async task or intense
 

00:03:06.940 --> 00:03:09.630
why classes like async task or intense
services do this on your behalf so you

00:03:09.630 --> 00:03:09.640
services do this on your behalf so you
 

00:03:09.640 --> 00:03:11.730
services do this on your behalf so you
don't have to deal with it but if you're

00:03:11.730 --> 00:03:11.740
don't have to deal with it but if you're
 

00:03:11.740 --> 00:03:13.560
don't have to deal with it but if you're
using threading and not using one of

00:03:13.560 --> 00:03:13.570
using threading and not using one of
 

00:03:13.570 --> 00:03:14.940
using threading and not using one of
these fancy primitives then of course

00:03:14.940 --> 00:03:14.950
these fancy primitives then of course
 

00:03:14.950 --> 00:03:16.290
these fancy primitives then of course
you'll have to set prior to yourself so

00:03:16.290 --> 00:03:16.300
you'll have to set prior to yourself so
 

00:03:16.300 --> 00:03:18.660
you'll have to set prior to yourself so
keep an eye out on that which is always

00:03:18.660 --> 00:03:18.670
keep an eye out on that which is always
 

00:03:18.670 --> 00:03:20.010
keep an eye out on that which is always
the weird thing about performance

00:03:20.010 --> 00:03:20.020
the weird thing about performance
 

00:03:20.020 --> 00:03:22.500
the weird thing about performance
there's many ways to do one thing which

00:03:22.500 --> 00:03:22.510
there's many ways to do one thing which
 

00:03:22.510 --> 00:03:23.520
there's many ways to do one thing which
is why you should check out the rest of

00:03:23.520 --> 00:03:23.530
is why you should check out the rest of
 

00:03:23.530 --> 00:03:24.840
is why you should check out the rest of
the Android performance patterns videos

00:03:24.840 --> 00:03:24.850
the Android performance patterns videos
 

00:03:24.850 --> 00:03:26.730
the Android performance patterns videos
to get a better sense of all the options

00:03:26.730 --> 00:03:26.740
to get a better sense of all the options
 

00:03:26.740 --> 00:03:28.530
to get a better sense of all the options
you have and don't forget to join the

00:03:28.530 --> 00:03:28.540
you have and don't forget to join the
 

00:03:28.540 --> 00:03:30.570
you have and don't forget to join the
Google+ community to ask questions to

00:03:30.570 --> 00:03:30.580
Google+ community to ask questions to
 

00:03:30.580 --> 00:03:33.060
Google+ community to ask questions to
other great developers so keep calm

00:03:33.060 --> 00:03:33.070
other great developers so keep calm
 

00:03:33.070 --> 00:03:34.920
other great developers so keep calm
profile your code and always remember

00:03:34.920 --> 00:03:34.930
profile your code and always remember
 

00:03:34.930 --> 00:03:37.770
profile your code and always remember
perf matters

