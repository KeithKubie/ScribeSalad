WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.304
[MUSIC PLAYING]

00:00:06.140 --> 00:00:09.120
IAN LAKE: So welcome to "Forget
the Storage Permission."

00:00:09.120 --> 00:00:11.290
It's not often we go
to a tech conference

00:00:11.290 --> 00:00:13.500
and get to go to a talk for
where we're specifically

00:00:13.500 --> 00:00:14.750
going to be forgetting things.

00:00:14.750 --> 00:00:16.440
But it's the end
of the Barbecue,

00:00:16.440 --> 00:00:21.140
so hopefully we'll actually
learn a few new techniques

00:00:21.140 --> 00:00:23.330
which will just
replace that knowledge

00:00:23.330 --> 00:00:25.070
rather than totally void it out.

00:00:25.070 --> 00:00:27.740
We'll save that one for later.

00:00:27.740 --> 00:00:31.030
But really trying to reduce when
we actually need the storage

00:00:31.030 --> 00:00:33.200
permission, so this
would be write and read

00:00:33.200 --> 00:00:36.090
external storage.

00:00:36.090 --> 00:00:38.022
So a little bit about myself.

00:00:38.022 --> 00:00:39.480
I've been doing
Android development

00:00:39.480 --> 00:00:41.940
for just about five years now.

00:00:41.940 --> 00:00:45.640
I kind of started on my
own, but then got a job

00:00:45.640 --> 00:00:49.890
doing it full time at Phunware
and then joined Facebook.

00:00:49.890 --> 00:00:51.740
So I didn't fix
everything I want.

00:00:51.740 --> 00:00:54.635
But [INAUDIBLE] a lot better.

00:00:54.635 --> 00:00:56.760
But for this last year,
I've been working at Google

00:00:56.760 --> 00:01:01.430
as a developer advocate, kind of
working both with the community

00:01:01.430 --> 00:01:04.450
and with the internal
engineering teams.

00:01:04.450 --> 00:01:07.660
Primarily, I've been focused
on an advanced Android Udacity

00:01:07.660 --> 00:01:08.160
course.

00:01:08.160 --> 00:01:10.570
This is online learning,
kind of taking your app

00:01:10.570 --> 00:01:14.150
to really be production ready,
although those little things

00:01:14.150 --> 00:01:16.580
that really make an
app that much better.

00:01:16.580 --> 00:01:18.610
And then of course,
just recently

00:01:18.610 --> 00:01:20.240
launched Android
development patterns

00:01:20.240 --> 00:01:24.890
with Joanna Smith, best
practices in Android

00:01:24.890 --> 00:01:27.790
covering a lot of the APIs
as well as the reasons why

00:01:27.790 --> 00:01:29.640
behind some of these things.

00:01:29.640 --> 00:01:33.960
My focus primarily has been
Android framework and Android

00:01:33.960 --> 00:01:34.640
support library.

00:01:34.640 --> 00:01:39.220
And we'll be talking about
a lot of those things today.

00:01:39.220 --> 00:01:43.340
So we're going to be
forgetting things.

00:01:43.340 --> 00:01:45.950
We're going to forget
the storage permission.

00:01:45.950 --> 00:01:49.410
But to really forget it, we need
to know, what was it giving us

00:01:49.410 --> 00:01:51.090
in the first place?

00:01:51.090 --> 00:01:52.890
So let's start at the beginning.

00:01:52.890 --> 00:01:56.820
Where can we
actually store data?

00:01:56.820 --> 00:02:01.680
So first there's this concept
of app-specific storage space.

00:02:01.680 --> 00:02:04.550
So as you'd expect,
these are our directories

00:02:04.550 --> 00:02:09.638
which are specific to
your app and to each user.

00:02:09.638 --> 00:02:11.054
Now, one important
thing about all

00:02:11.054 --> 00:02:13.310
of these directories
that'll be covered here

00:02:13.310 --> 00:02:16.350
is that they're all completely
emptied and destroyed

00:02:16.350 --> 00:02:18.110
when your app is uninstalled.

00:02:18.110 --> 00:02:21.170
So it's really easy
to say, OK, well.

00:02:21.170 --> 00:02:23.290
I've now completely
uninstalled the app,

00:02:23.290 --> 00:02:25.650
and now all of the
data associated with it

00:02:25.650 --> 00:02:29.170
isn't left lingering
on my device.

00:02:29.170 --> 00:02:32.230
There's kind of two main
types of these directories.

00:02:32.230 --> 00:02:36.160
There's private directories
stored on internal storage.

00:02:36.160 --> 00:02:40.370
So these are accessible via
getFileDir and getCacheDir.

00:02:40.370 --> 00:02:43.070
So as you can
imagine, getFileDir

00:02:43.070 --> 00:02:46.490
are for kind of actual,
real files, user data,

00:02:46.490 --> 00:02:50.290
while getCacheDir is
more for caching files.

00:02:50.290 --> 00:02:53.520
Say if you were to download
large images from the internet,

00:02:53.520 --> 00:02:55.440
this would be a good
place to store them.

00:02:55.440 --> 00:02:58.350
Because when we
run low on memory,

00:02:58.350 --> 00:03:00.540
this space can be
cleared without actually

00:03:00.540 --> 00:03:02.070
harming users' data.

00:03:04.950 --> 00:03:07.920
Now, the other side of
things are these concept

00:03:07.920 --> 00:03:10.430
of "external" directories.

00:03:10.430 --> 00:03:14.370
And I'll use air quotes because
they're not actually external.

00:03:14.370 --> 00:03:16.940
On many devices,
like Nexus devices,

00:03:16.940 --> 00:03:20.040
they're actually
on the same flash

00:03:20.040 --> 00:03:23.070
drive as the internal storage.

00:03:23.070 --> 00:03:26.350
It's simply just a different
partition of the same space.

00:03:26.350 --> 00:03:31.800
But in all cases, it's actually
that those external directories

00:03:31.800 --> 00:03:34.680
are the ones that are
readable by all apps that

00:03:34.680 --> 00:03:36.890
have the storage permissions.

00:03:36.890 --> 00:03:40.160
So you don't necessarily want
to put sensitive information

00:03:40.160 --> 00:03:43.600
in those folders because
they are world readable.

00:03:43.600 --> 00:03:47.950
However, for our cases, you can
actually do a little bit more

00:03:47.950 --> 00:03:49.050
with them.

00:03:49.050 --> 00:03:54.760
So these come in the face of
external files directory, which

00:03:54.760 --> 00:03:57.470
is very similar to our file
directory for user data

00:03:57.470 --> 00:03:59.780
on this external partition.

00:03:59.780 --> 00:04:04.130
And in KitKat, we actually
introduced the ability

00:04:04.130 --> 00:04:06.690
to have multiple external
files directories.

00:04:06.690 --> 00:04:09.170
So in this case, you could
have one external file

00:04:09.170 --> 00:04:12.190
on that internal
slash external storage

00:04:12.190 --> 00:04:14.830
and another on
like your SD card.

00:04:14.830 --> 00:04:19.640
So this would be returned by the
pluralized form of the method.

00:04:19.640 --> 00:04:22.400
Similarly, for our cache
directories, same type

00:04:22.400 --> 00:04:23.960
of thing.

00:04:23.960 --> 00:04:26.820
And then also in Lollipop,
we added external media

00:04:26.820 --> 00:04:28.310
directories.

00:04:28.310 --> 00:04:30.670
These are directories
where you can write files

00:04:30.670 --> 00:04:35.050
to that are then read
by the media scanner.

00:04:35.050 --> 00:04:36.710
So this is what
allows other apps

00:04:36.710 --> 00:04:40.740
to get all of the images
and videos and pictures

00:04:40.740 --> 00:04:42.500
that are in that
folder and then make

00:04:42.500 --> 00:04:46.570
them available to other apps
via the media store API.

00:04:46.570 --> 00:04:50.320
Now, the best part about
all of these directories

00:04:50.320 --> 00:04:53.450
is that they don't actually
require permissions

00:04:53.450 --> 00:04:56.160
on newer devices.

00:04:56.160 --> 00:04:58.180
So the other directory--
which I really

00:04:58.180 --> 00:05:02.000
want to mention also for
game developers, especially--

00:05:02.000 --> 00:05:05.450
is the extension file
directory, the OBB directory.

00:05:05.450 --> 00:05:08.980
This is where apps that are
larger than the 50 or now 100

00:05:08.980 --> 00:05:11.580
megabyte limit can
store expansion files.

00:05:11.580 --> 00:05:14.100
These are actually
shared across all users.

00:05:14.100 --> 00:05:16.892
So if you have a huge,
large game on a tablet,

00:05:16.892 --> 00:05:18.725
it's actually shared
across all the storage.

00:05:18.725 --> 00:05:22.210
You're not penalized for having
the same huge app installed

00:05:22.210 --> 00:05:22.880
multiple times.

00:05:26.170 --> 00:05:30.170
So the other part of this, those
are app specific directories.

00:05:30.170 --> 00:05:32.840
The next part is public storage.

00:05:32.840 --> 00:05:36.980
So these are the permanent
files that survive

00:05:36.980 --> 00:05:39.590
your app being uninstalled.

00:05:39.590 --> 00:05:42.110
Now, for many
users, this actually

00:05:42.110 --> 00:05:45.010
means that those files are
never going to be touched,

00:05:45.010 --> 00:05:48.260
never going to be deleted,
and may be orphaned forever

00:05:48.260 --> 00:05:51.910
because the chances of many
users actually using a file

00:05:51.910 --> 00:05:54.780
manager or going in or
even plugging their Android

00:05:54.780 --> 00:05:58.920
phone into a computer
are actually fairly rare.

00:05:58.920 --> 00:06:01.770
Many more users are just
using the apps on their phone

00:06:01.770 --> 00:06:04.530
and don't actually realize that
this public storage exists.

00:06:07.060 --> 00:06:10.040
Now from that
perspective, again, this

00:06:10.040 --> 00:06:13.120
is stored on kind of that
external but maybe not

00:06:13.120 --> 00:06:14.480
external space.

00:06:14.480 --> 00:06:17.230
It's called external.

00:06:17.230 --> 00:06:21.930
And the root of it can be get
by getExternalStorageDirectory.

00:06:21.930 --> 00:06:23.750
But you probably
shouldn't actually

00:06:23.750 --> 00:06:25.920
write file so that
root directory, right?

00:06:25.920 --> 00:06:29.810
It's like writing to C:/ or the
beginning of another directory

00:06:29.810 --> 00:06:31.630
like, maybe not the best idea.

00:06:31.630 --> 00:06:34.730
You can do it, but
you'd much rather,

00:06:34.730 --> 00:06:37.490
if you were writing to this
public external storage,

00:06:37.490 --> 00:06:39.940
use one of the directories
that we've created.

00:06:39.940 --> 00:06:44.030
So there's one for pictures and
notifications and ring tones

00:06:44.030 --> 00:06:46.560
and various other media
types which auto sort

00:06:46.560 --> 00:06:48.005
into these public directories.

00:06:50.650 --> 00:06:52.220
Now, an important
part about this

00:06:52.220 --> 00:06:56.300
is, if you have multiple users
on the same phone, which is now

00:06:56.300 --> 00:06:59.050
possible-- or on tablets,
which has been possible

00:06:59.050 --> 00:07:03.280
back a number of versions--
all of the external storage

00:07:03.280 --> 00:07:05.940
is actually sandboxed
for each user.

00:07:05.940 --> 00:07:08.550
There's no way for your
app running as one user

00:07:08.550 --> 00:07:12.480
to ever see data that's
in another user's

00:07:12.480 --> 00:07:13.550
public directories.

00:07:13.550 --> 00:07:17.980
Even though it's called public,
it's still sandbox user, right?

00:07:17.980 --> 00:07:21.086
That's more of an SELinux
thing than anything else.

00:07:21.086 --> 00:07:22.960
But it's actually really
important for things

00:07:22.960 --> 00:07:25.930
like Android for Work,
where that separate user

00:07:25.930 --> 00:07:28.730
is, of course, totally
self-contained and separate

00:07:28.730 --> 00:07:32.680
from your private data.

00:07:32.680 --> 00:07:36.180
So we talked about what
all these directories mean

00:07:36.180 --> 00:07:37.460
for the storage permission.

00:07:37.460 --> 00:07:40.890
So for those internal
directories-- the getFileDir,

00:07:40.890 --> 00:07:45.300
getCacheDir-- those can always
be read with no permissions

00:07:45.300 --> 00:07:45.987
whatsoever.

00:07:45.987 --> 00:07:47.820
They're always going
to be available to you.

00:07:47.820 --> 00:07:49.520
You can always write to them.

00:07:49.520 --> 00:07:50.337
They're great.

00:07:50.337 --> 00:07:51.920
And of course, they're
auto cleaned up

00:07:51.920 --> 00:07:53.003
when your app's installed.

00:07:53.003 --> 00:07:55.610
So it's really nice for users.

00:07:55.610 --> 00:08:02.070
Now, the external app-specific
external storage has changed.

00:08:02.070 --> 00:08:04.920
In KitKat, we actually
removed the need

00:08:04.920 --> 00:08:07.270
to use the storage
permissions to read and write

00:08:07.270 --> 00:08:09.000
those directories.

00:08:09.000 --> 00:08:12.000
So if you were
targeting pre-KitKat,

00:08:12.000 --> 00:08:13.690
you actually needed
those permissions,

00:08:13.690 --> 00:08:16.520
even though they were
app-specific directories.

00:08:16.520 --> 00:08:19.400
And we've listed that
restriction as of KitKat,

00:08:19.400 --> 00:08:21.150
so now you no longer need that.

00:08:21.150 --> 00:08:22.350
Awesome.

00:08:22.350 --> 00:08:28.500
Now, that external user storage,
that public storage, that

00:08:28.500 --> 00:08:31.630
always requires the
storage permission, right?

00:08:31.630 --> 00:08:34.490
We very much want
users to be aware

00:08:34.490 --> 00:08:38.440
that apps are writing to the
space that may potentially

00:08:38.440 --> 00:08:41.309
be taking up a very large
percentage of their device's

00:08:41.309 --> 00:08:45.160
space, but are not actually
attributed to that user.

00:08:45.160 --> 00:08:49.440
If a user goes in says
clear data or clear cache,

00:08:49.440 --> 00:08:52.010
those external files
are not deleted.

00:08:52.010 --> 00:08:56.100
So a unless user is
using a file manager,

00:08:56.100 --> 00:08:58.930
those files are not ever
going to be cleaned up.

00:08:58.930 --> 00:09:00.530
And from the user's
perspective, they

00:09:00.530 --> 00:09:02.930
might not know which
files go to which app

00:09:02.930 --> 00:09:05.610
or which ones they can delete.

00:09:05.610 --> 00:09:09.090
Now, the storage permission
is even more important

00:09:09.090 --> 00:09:11.810
in Marshmallow because
in Marshmallow,

00:09:11.810 --> 00:09:14.300
with the runtime
permissions model,

00:09:14.300 --> 00:09:15.820
the storage permission
is considered

00:09:15.820 --> 00:09:17.470
a dangerous permission.

00:09:17.470 --> 00:09:20.280
That means if you're targeting
Marshmallow and running

00:09:20.280 --> 00:09:22.820
on a 6.0 device,
you'll actually need

00:09:22.820 --> 00:09:27.210
to request access to the
storage permissions at run time.

00:09:27.210 --> 00:09:32.140
You get this nice, mildly scary
looking dialogue that says,

00:09:32.140 --> 00:09:35.490
can they access all of
your photos and videos?

00:09:35.490 --> 00:09:38.890
Everything you've ever done
in external storage, right?

00:09:38.890 --> 00:09:40.390
Which yeah, that's true.

00:09:40.390 --> 00:09:43.600
That's part of the user's
public external storage.

00:09:43.600 --> 00:09:47.110
But you have to think really
long and hard of whether that's

00:09:47.110 --> 00:09:50.500
actually the right choice.

00:09:50.500 --> 00:09:52.600
Now, if you're
saying, well, I only

00:09:52.600 --> 00:09:54.740
write to those
app-specific directories.

00:09:54.740 --> 00:09:55.870
I'm good.

00:09:55.870 --> 00:09:57.330
There's actually
a super easy way

00:09:57.330 --> 00:09:59.440
to remove storage permissions.

00:09:59.440 --> 00:10:02.830
You can use max SDK version.

00:10:02.830 --> 00:10:06.600
Now, max SDK version just says,
I want to use this permission.

00:10:06.600 --> 00:10:11.490
But as of KitKat, I
don't need it anymore.

00:10:11.490 --> 00:10:14.590
I can safely remove
it from my manifest.

00:10:14.590 --> 00:10:17.200
Users won't be bothered
by it at install time.

00:10:17.200 --> 00:10:20.580
I don't need to worry about
it for runtime permissions.

00:10:20.580 --> 00:10:24.180
You do this just by setting the
max SDK version in your user's

00:10:24.180 --> 00:10:26.410
permission in the manifest.

00:10:26.410 --> 00:10:29.960
And that's all you need to do to
remove the storage permission.

00:10:29.960 --> 00:10:31.900
But still keep it
around for those cases

00:10:31.900 --> 00:10:33.810
where you're running
on an older device.

00:10:33.810 --> 00:10:36.930
But [? min ?] SDK KitKat?

00:10:36.930 --> 00:10:39.030
That's not totally
unreasonable, right?

00:10:42.101 --> 00:10:42.600
Maybe?

00:10:42.600 --> 00:10:44.140
Maybe one day.

00:10:44.140 --> 00:10:45.786
AUDIENCE: 21.

00:10:45.786 --> 00:10:46.910
IAN LAKE: [? Min ?] SDK 21.

00:10:46.910 --> 00:10:48.980
That's even better.

00:10:48.980 --> 00:10:52.160
Now this isn't to actually
make your life more difficult,

00:10:52.160 --> 00:10:55.700
but really to just make it so
that you can balance your needs

00:10:55.700 --> 00:11:00.610
as a developer to save files to
a user's storage and their need

00:11:00.610 --> 00:11:04.260
for privacy and
control, when really

00:11:04.260 --> 00:11:07.050
giving your app the
storage permission

00:11:07.050 --> 00:11:09.190
is asking for a lot of trust.

00:11:09.190 --> 00:11:12.520
Those are all of the pictures,
all the videos that that person

00:11:12.520 --> 00:11:15.430
has ever done on that device.

00:11:15.430 --> 00:11:17.655
And sometimes those are a
little bit more sensitive.

00:11:21.220 --> 00:11:25.920
And part of that is that
it's really all or nothing.

00:11:25.920 --> 00:11:29.040
There's not necessarily that
requirement of saying, oh.

00:11:29.040 --> 00:11:33.700
Well, I would really like access
to this specific directory

00:11:33.700 --> 00:11:36.990
because of this all encompassing
nature of the storage

00:11:36.990 --> 00:11:38.350
permission.

00:11:38.350 --> 00:11:41.820
Now, part of this is just a
complexity kind of reason.

00:11:41.820 --> 00:11:44.881
Users don't really understand
what kinds of storage

00:11:44.881 --> 00:11:45.380
there are.

00:11:45.380 --> 00:11:48.130
Like if you asked a
typical user, all right.

00:11:48.130 --> 00:11:51.140
Out of these ten directories,
which four of them

00:11:51.140 --> 00:11:53.500
would you like the app
to be able to read to?

00:11:53.500 --> 00:11:56.920
That's a little bit harder
than just a yes or no kind

00:11:56.920 --> 00:11:59.500
of an answer.

00:11:59.500 --> 00:12:04.077
Now, the one thing
is that you really

00:12:04.077 --> 00:12:05.160
want to avoid this, right?

00:12:05.160 --> 00:12:07.220
That's the whole
reason we're here.

00:12:07.220 --> 00:12:10.350
So let's talk through some away
is where we can really actually

00:12:10.350 --> 00:12:14.050
get a lot of this functionality,
a lot of that communication

00:12:14.050 --> 00:12:16.610
between apps, without actually
needing these permissions.

00:12:19.230 --> 00:12:22.110
So what is this better way?

00:12:22.110 --> 00:12:25.070
Is there a different
thing to do?

00:12:25.070 --> 00:12:28.510
And it turns out that we have
a whole permissions model just

00:12:28.510 --> 00:12:33.290
for sharing individual
files via URIs.

00:12:33.290 --> 00:12:38.570
Now, a URI, you might think of
it as kind of like a file path.

00:12:38.570 --> 00:12:40.280
But it's actually a
little bit different,

00:12:40.280 --> 00:12:44.880
because you can apply
URI-based permissions to it.

00:12:44.880 --> 00:12:48.490
Now, it really started back
in the beginning of Android

00:12:48.490 --> 00:12:50.460
with our intent system.

00:12:50.460 --> 00:12:53.780
That's the way of sending
information or calls

00:12:53.780 --> 00:12:55.590
between different apps.

00:12:55.590 --> 00:12:59.800
You may say like a start
activity and pass in an intent,

00:12:59.800 --> 00:13:02.160
and that's how you would
then trigger another app

00:13:02.160 --> 00:13:03.290
to do things.

00:13:03.290 --> 00:13:05.810
These URI-based
permissions are attached

00:13:05.810 --> 00:13:07.860
to that same infrastructure.

00:13:07.860 --> 00:13:11.260
Allowing one app that
does have the permission

00:13:11.260 --> 00:13:14.520
to access a file or
resource the ability

00:13:14.520 --> 00:13:20.230
to then kind of forward, grant,
a permission to another app

00:13:20.230 --> 00:13:22.820
that doesn't have
permission by itself.

00:13:22.820 --> 00:13:24.610
But via that intent
system, they're

00:13:24.610 --> 00:13:26.400
able to then suddenly
get permission

00:13:26.400 --> 00:13:29.600
to just that specific file.

00:13:29.600 --> 00:13:31.310
So this sounds like
exactly what we

00:13:31.310 --> 00:13:33.905
need to do many of the
operations between files--

00:13:33.905 --> 00:13:40.000
say, sharing or something else--
that we normally use files for.

00:13:40.000 --> 00:13:41.880
So there's actually
two different ways

00:13:41.880 --> 00:13:44.500
of using URI-based permissions.

00:13:44.500 --> 00:13:49.030
One is just adding a simple flag
to your start activity or start

00:13:49.030 --> 00:13:51.020
service intent.

00:13:51.020 --> 00:13:55.060
And these flags just say, yeah,
any URI that's attached to this

00:13:55.060 --> 00:13:57.910
can actually be read
by the receiving app

00:13:57.910 --> 00:14:03.090
or even written to
by the receiving app.

00:14:03.090 --> 00:14:06.150
So this could be
something, for example,

00:14:06.150 --> 00:14:12.150
like you include an image URI
as well as the read permission.

00:14:12.150 --> 00:14:14.080
Now all of a sudden,
the other app

00:14:14.080 --> 00:14:17.720
can then read that image without
actually requiring access

00:14:17.720 --> 00:14:22.010
to wherever that file
is actually stored.

00:14:22.010 --> 00:14:24.690
In addition, you can
actually programmatically

00:14:24.690 --> 00:14:27.150
grant and revoke
these permissions.

00:14:27.150 --> 00:14:30.960
You can call grantUriPermission
with a specific package

00:14:30.960 --> 00:14:33.940
and say, this package
is always good to read

00:14:33.940 --> 00:14:37.240
any URI that's included.

00:14:37.240 --> 00:14:40.380
Similarly, you can actually
revoke a URI permission.

00:14:40.380 --> 00:14:42.310
So this would be
useful if like you're

00:14:42.310 --> 00:14:46.800
deleting an internal file and
other apps have a URI to it.

00:14:46.800 --> 00:14:50.300
You may want to revoke all
URI permissions to that file

00:14:50.300 --> 00:14:54.140
just so that it
doesn't linger on.

00:14:54.140 --> 00:14:57.740
So let's look at one of those
common examples, the Share

00:14:57.740 --> 00:14:59.900
button that you've
seen hopefully

00:14:59.900 --> 00:15:01.830
in many apps, the
actual Share button

00:15:01.830 --> 00:15:05.280
not some fake share button.

00:15:05.280 --> 00:15:07.050
And this is very
common for using, say,

00:15:07.050 --> 00:15:09.640
sharing an image
from your camera

00:15:09.640 --> 00:15:12.580
app to, say, a social media app.

00:15:12.580 --> 00:15:16.490
Now if we were able to
use external storage,

00:15:16.490 --> 00:15:19.950
the sending app might
write it to someplace

00:15:19.950 --> 00:15:22.080
in a public directory.

00:15:22.080 --> 00:15:23.740
And then the reading
app would then

00:15:23.740 --> 00:15:26.650
need to have the read storage
permission to then read

00:15:26.650 --> 00:15:27.780
the app.

00:15:27.780 --> 00:15:29.360
And of course, this
will never work

00:15:29.360 --> 00:15:32.570
in Android for Work scenarios
where the actual receiving

00:15:32.570 --> 00:15:37.610
app and the sending app
are on two different users.

00:15:37.610 --> 00:15:40.280
So maybe we can use
something else to actually

00:15:40.280 --> 00:15:42.210
get this across.

00:15:42.210 --> 00:15:44.020
And you'd think maybe, oh.

00:15:44.020 --> 00:15:48.280
We just pass in our grant flag
and we pass in our file URI,

00:15:48.280 --> 00:15:50.060
and we're golden.

00:15:50.060 --> 00:15:54.150
One problem-- file
URIs don't work

00:15:54.150 --> 00:15:56.660
with URI-based permissions.

00:15:56.660 --> 00:16:00.790
File URIs are always protected
by the underlying storage

00:16:00.790 --> 00:16:01.870
permissions.

00:16:01.870 --> 00:16:04.230
You're directly
accessing a file,

00:16:04.230 --> 00:16:06.920
and therefore you're going
through that file system which

00:16:06.920 --> 00:16:09.800
is the storage permission.

00:16:09.800 --> 00:16:14.060
So instead, we need to add just
a little bit of indirection

00:16:14.060 --> 00:16:16.980
between our files
and the other app's.

00:16:16.980 --> 00:16:19.970
And we can do that via
a Support.v4 library

00:16:19.970 --> 00:16:23.020
class called FileProvider.

00:16:23.020 --> 00:16:26.980
While this is built on top
of ContentProvider-- which

00:16:26.980 --> 00:16:31.770
you may have heard of and
dislike or like in some cases--

00:16:31.770 --> 00:16:35.780
you don't actually need to write
any ContentProvider code, which

00:16:35.780 --> 00:16:36.330
is great.

00:16:36.330 --> 00:16:38.050
There's actually
very little code

00:16:38.050 --> 00:16:41.440
to actually write
in the FileProvider.

00:16:41.440 --> 00:16:43.400
What this allows you
to do is actually

00:16:43.400 --> 00:16:48.520
give apps access to files
in your getFiles directory,

00:16:48.520 --> 00:16:51.170
your getCache directory,
or any of the get

00:16:51.170 --> 00:16:52.740
external directories.

00:16:52.740 --> 00:16:54.640
So these would be
places where you

00:16:54.640 --> 00:16:58.780
can write without the
storage permission,

00:16:58.780 --> 00:17:01.230
especially on KitKat and above.

00:17:01.230 --> 00:17:04.950
But through FileProvider,
now other apps

00:17:04.950 --> 00:17:06.890
can read those files.

00:17:06.890 --> 00:17:11.710
That breaks the need for any
of the storage permission,

00:17:11.710 --> 00:17:17.650
because what we are sending is a
URI and not a direct file path.

00:17:17.650 --> 00:17:22.250
And that allows us to use
URI-based permissions.

00:17:22.250 --> 00:17:26.010
Now, there is some set
up for FileProvider.

00:17:26.010 --> 00:17:29.570
Specifically, every one
of those FileProvider URIs

00:17:29.570 --> 00:17:33.640
has kind of a unique prefix,
which we'll call the authority.

00:17:33.640 --> 00:17:37.690
Now, you can just define it
as a static string somewhere.

00:17:37.690 --> 00:17:40.400
But I like to be a
little bit more fancy.

00:17:40.400 --> 00:17:44.370
This is the limit of
my Gradle knowledge.

00:17:44.370 --> 00:17:47.100
And actually define
it in our Gradle file

00:17:47.100 --> 00:17:48.660
based on our application ID.

00:17:48.660 --> 00:17:51.270
So this would be kind of the
package name in your app.

00:17:51.270 --> 00:17:54.980
And we can actually define
it as a manifest placeholder.

00:17:54.980 --> 00:17:57.260
So now we can actually use
it in our manifest file

00:17:57.260 --> 00:17:59.760
without having to reference
the actual string.

00:17:59.760 --> 00:18:03.050
And we can reference it in
our build config directories

00:18:03.050 --> 00:18:05.010
if any of our Java classes.

00:18:05.010 --> 00:18:07.360
And now it's always in sync.

00:18:07.360 --> 00:18:09.100
We only have one
place to change it.

00:18:09.100 --> 00:18:12.790
And if we have multiple
versions and build configs,

00:18:12.790 --> 00:18:15.340
it just works.

00:18:15.340 --> 00:18:19.800
So our manifest entry just
defines our file provider.

00:18:19.800 --> 00:18:21.850
We're not writing
any code so far.

00:18:21.850 --> 00:18:25.900
It's just a little bit of XML
that you can paste right in.

00:18:25.900 --> 00:18:28.200
Because all of the
configuration is actually

00:18:28.200 --> 00:18:33.480
done by the FileProvider's
path metadata.

00:18:33.480 --> 00:18:36.930
So this metadata is just
a really simple XML file

00:18:36.930 --> 00:18:39.960
that you put in your
res XML directory that

00:18:39.960 --> 00:18:42.380
just says what directories
you're actually

00:18:42.380 --> 00:18:45.990
providing through FileProvider.

00:18:45.990 --> 00:18:48.220
What we don't want is
we don't want every app

00:18:48.220 --> 00:18:52.830
to be able to read every file in
getFiles directory and getCache

00:18:52.830 --> 00:18:53.330
directory.

00:18:53.330 --> 00:18:55.450
You may want to just
have one directory

00:18:55.450 --> 00:18:58.570
that you make available-- or,
in this case, three directories.

00:18:58.570 --> 00:19:01.000
You can have it read from
the getFiles directory using

00:19:01.000 --> 00:19:04.740
the files path, getCache
directory via the cache path,

00:19:04.740 --> 00:19:08.960
and any of the get external
directories via external path.

00:19:08.960 --> 00:19:12.800
And the path is kind of that
unique substring or subfolder

00:19:12.800 --> 00:19:16.300
within those directories.

00:19:16.300 --> 00:19:17.990
So that's all the
one time setup.

00:19:17.990 --> 00:19:21.050
You only need to do that once
and then never touch it again,

00:19:21.050 --> 00:19:26.130
no matter how many share buttons
you have throughout your app.

00:19:26.130 --> 00:19:27.810
Now we can actually
share a file.

00:19:27.810 --> 00:19:31.600
So just like before, we'll have
a file that we want to share.

00:19:31.600 --> 00:19:34.140
And then we can just use one
method from FileProvider,

00:19:34.140 --> 00:19:36.920
or get URI for file method.

00:19:36.920 --> 00:19:40.230
And this takes in our
build config and the file

00:19:40.230 --> 00:19:44.580
and then spits out a
special content URI.

00:19:44.580 --> 00:19:47.250
We construct our share
intent, and then actually

00:19:47.250 --> 00:19:51.800
provide read access by calling
set data with our content URI

00:19:51.800 --> 00:19:54.580
and then adding the read flag.

00:19:54.580 --> 00:19:56.570
Now, the important
thing to note here

00:19:56.570 --> 00:20:01.830
is that that add flag of
grant read only applies,

00:20:01.830 --> 00:20:06.180
in this case, to URIs
we've set in set data.

00:20:06.180 --> 00:20:09.340
So if we leave out that
line, our grant flag

00:20:09.340 --> 00:20:11.820
won't actually
apply to any URIs.

00:20:11.820 --> 00:20:14.970
So it's really important
that those things kind of go

00:20:14.970 --> 00:20:18.640
together in almost all cases.

00:20:18.640 --> 00:20:22.870
On the receiving side,
we can extract the URI.

00:20:22.870 --> 00:20:26.020
And then getting out the
actual data out of URI

00:20:26.020 --> 00:20:30.060
has a very simple method,
get content resolver

00:20:30.060 --> 00:20:32.520
openInputStream.

00:20:32.520 --> 00:20:34.190
Now, the nice part
about openInputStream

00:20:34.190 --> 00:20:37.630
is it works for practically
any URI you pass in,

00:20:37.630 --> 00:20:41.480
whether it's one of our
FileProvider URI's, a file URI,

00:20:41.480 --> 00:20:42.990
or an Android resource URI.

00:20:42.990 --> 00:20:45.566
It's all the exact same code.

00:20:45.566 --> 00:20:46.940
From your receiver's
perspective,

00:20:46.940 --> 00:20:50.760
it shouldn't matter how
the sending app is sending

00:20:50.760 --> 00:20:53.130
that file across,
because you can parse it

00:20:53.130 --> 00:20:54.870
all in the same method.

00:20:54.870 --> 00:20:56.440
So here, we just
use BitmapFactory

00:20:56.440 --> 00:21:01.190
to extract a bitmap from it.

00:21:01.190 --> 00:21:03.130
Now, the other thing
that's nice about this

00:21:03.130 --> 00:21:08.320
is that you can actually daisy
chain those permissions along.

00:21:08.320 --> 00:21:11.070
Say this is a
receiving activity,

00:21:11.070 --> 00:21:13.050
but it's actually a
service that needs

00:21:13.050 --> 00:21:15.260
to upload that file across.

00:21:15.260 --> 00:21:19.720
You can call the same set data
and add the grant flag URI

00:21:19.720 --> 00:21:22.820
to your start service,
and that permission

00:21:22.820 --> 00:21:25.720
will continue to daisy chain
through different components--

00:21:25.720 --> 00:21:27.940
or if you want to send
it to another app,

00:21:27.940 --> 00:21:30.000
you can continue
to pass it along

00:21:30.000 --> 00:21:34.330
as long as you continue
to use the grant flag URI.

00:21:34.330 --> 00:21:37.480
Now, you may have noticed
the FileNotFoundException.

00:21:37.480 --> 00:21:40.140
So here's where things
go horribly wrong.

00:21:40.140 --> 00:21:45.460
But it's also the most
important part of sharing,

00:21:45.460 --> 00:21:48.620
and that's cooperation.

00:21:48.620 --> 00:21:49.800
It's a two-sided street.

00:21:49.800 --> 00:21:52.550
There's a sending app and
there's a receiving app.

00:21:52.550 --> 00:21:56.030
Like I said, a lot
of this relies on,

00:21:56.030 --> 00:22:00.030
in this case, the sending app
to store it in the right place,

00:22:00.030 --> 00:22:05.340
to use FileProvider so that
the receiving app doesn't

00:22:05.340 --> 00:22:07.790
need the storage permission.

00:22:07.790 --> 00:22:10.750
All right, if the sending
app isn't doing a good job,

00:22:10.750 --> 00:22:13.530
it is writing it out
to a directory that

00:22:13.530 --> 00:22:16.460
assumes that everyone
has read storage,

00:22:16.460 --> 00:22:18.080
there's not actually
a whole lot you

00:22:18.080 --> 00:22:21.990
can do here except have read
storage to read the file.

00:22:21.990 --> 00:22:26.730
Now, many Google Apps
employ a strategy where,

00:22:26.730 --> 00:22:30.290
if it fails, then post
a message saying, hey,

00:22:30.290 --> 00:22:31.530
I can't read that file.

00:22:31.530 --> 00:22:33.980
Like the other app
is trying to send me

00:22:33.980 --> 00:22:36.390
something that I can't read.

00:22:36.390 --> 00:22:41.160
Now, that definitely
pushes the requirement back

00:22:41.160 --> 00:22:43.890
onto the sending app
to do it correctly.

00:22:43.890 --> 00:22:49.180
So if you have a sending
app that's doing it wrong,

00:22:49.180 --> 00:22:53.040
please fix it, because that's
breaking everyone else.

00:22:53.040 --> 00:22:56.210
Now hopefully, apps are
testing with things like Gmail

00:22:56.210 --> 00:22:58.520
and other apps that are
already installed on the system

00:22:58.520 --> 00:23:00.680
to make sure that it works.

00:23:00.680 --> 00:23:03.750
But at the same point,
you can actually

00:23:03.750 --> 00:23:07.310
do that where we're setting
the onus on the sending app.

00:23:07.310 --> 00:23:09.650
Now, you can take a
different approach.

00:23:09.650 --> 00:23:13.500
Use that FileNotFoundException
as actually a requirement

00:23:13.500 --> 00:23:16.720
to say, oh, let me get
the file permission.

00:23:16.720 --> 00:23:18.650
Say you're running
on Marshmallow

00:23:18.650 --> 00:23:21.000
and using runtime permissions.

00:23:21.000 --> 00:23:21.830
Now, that works.

00:23:21.830 --> 00:23:24.630
It would get the number
of shares up to a higher

00:23:24.630 --> 00:23:27.610
percentage because you would
be able to then say, oh,

00:23:27.610 --> 00:23:28.930
I don't have access to this.

00:23:28.930 --> 00:23:31.310
Let me see if adding
storage permission

00:23:31.310 --> 00:23:33.570
helps me work around
some of the bad apps

00:23:33.570 --> 00:23:36.801
that we're all fixing,
like right now.

00:23:36.801 --> 00:23:37.300
Yeah.

00:23:37.300 --> 00:23:37.800
No?

00:23:37.800 --> 00:23:39.100
OK.

00:23:39.100 --> 00:23:41.670
We'll give it a
few more minutes.

00:23:41.670 --> 00:23:43.990
So that's one way to do it.

00:23:43.990 --> 00:23:47.310
But unfortunately, that means
that your app then appears

00:23:47.310 --> 00:23:48.890
as using storage permission.

00:23:48.890 --> 00:23:51.360
When you install the
app, it says, hey,

00:23:51.360 --> 00:23:53.340
these guys are using
the storage permission.

00:23:53.340 --> 00:23:55.140
Even in runtime model,
you need to have

00:23:55.140 --> 00:23:57.230
a second dialog that pops up.

00:23:57.230 --> 00:24:01.560
The users may not know, oh, well
I'm sharing a file over, right?

00:24:01.560 --> 00:24:03.460
And this works for other apps.

00:24:03.460 --> 00:24:04.930
But this app is
saying now it wants

00:24:04.930 --> 00:24:07.141
to read all of my
photos and videos?

00:24:07.141 --> 00:24:08.640
Like, I thought I
was just giving it

00:24:08.640 --> 00:24:11.740
access to that one photo.

00:24:11.740 --> 00:24:15.220
So you have to deal with
that different privacy model

00:24:15.220 --> 00:24:17.920
where maybe it makes
more sense to say,

00:24:17.920 --> 00:24:20.050
I don't want the
storage permission.

00:24:20.050 --> 00:24:22.510
I want to say, well,
there's probably

00:24:22.510 --> 00:24:24.650
a different app on your
phone that can give me

00:24:24.650 --> 00:24:26.050
that same information.

00:24:26.050 --> 00:24:27.910
Or maybe there are
some cases where

00:24:27.910 --> 00:24:30.400
you can use a different
technique which actually

00:24:30.400 --> 00:24:32.930
reverses the situation.

00:24:32.930 --> 00:24:35.770
And that's ACTION_GET_CONTENT.

00:24:35.770 --> 00:24:37.830
Now, GET_CONTENT's
kind of the reverse

00:24:37.830 --> 00:24:41.880
where we're asking for a
file from a different app.

00:24:41.880 --> 00:24:44.200
And you do this simply
by requesting it

00:24:44.200 --> 00:24:47.070
by a MIME type-- say,
image slash star,

00:24:47.070 --> 00:24:48.604
to get any kind of image.

00:24:48.604 --> 00:24:49.520
I just want a picture.

00:24:49.520 --> 00:24:51.820
Just give me
anything you've got.

00:24:51.820 --> 00:24:54.900
And then you want to immediately
use that result in your app--

00:24:54.900 --> 00:24:59.040
say, attach it to
an email or send it

00:24:59.040 --> 00:25:03.290
to a friend via
messenger, what have you.

00:25:03.290 --> 00:25:05.890
Now, much of the
logic here is actually

00:25:05.890 --> 00:25:10.700
exactly the same as ACTION_SEND,
just in a reverse manner.

00:25:10.700 --> 00:25:14.530
You'll call ACTION_GET_CONTENT,
passing in a request.

00:25:14.530 --> 00:25:18.410
And then the providing app, the
one who the user has selected,

00:25:18.410 --> 00:25:20.020
will use FileProvider.

00:25:20.020 --> 00:25:23.360
Surprise, like who
would have guessed?

00:25:23.360 --> 00:25:25.870
They'll use FileProvider,
get URI for file,

00:25:25.870 --> 00:25:30.870
and then send that file
back to the requesting app.

00:25:30.870 --> 00:25:34.820
And then openInputStream
to open the file, right?

00:25:34.820 --> 00:25:38.380
Very similar, but just in
the kind of reverse model.

00:25:38.380 --> 00:25:42.930
Now, note-- none of this code
requires a storage permission.

00:25:42.930 --> 00:25:46.220
We're still asking from
one file to the other.

00:25:46.220 --> 00:25:48.210
But it still works, right?

00:25:48.210 --> 00:25:50.970
We're using URI-based
permissions.

00:25:50.970 --> 00:25:56.370
And because the user is actively
included in the selection

00:25:56.370 --> 00:26:00.860
process, there doesn't have
to be a blanket storage

00:26:00.860 --> 00:26:01.520
permission.

00:26:01.520 --> 00:26:04.630
Just by selecting, "I only
want to share these two

00:26:04.630 --> 00:26:08.250
pictures" or something,
then the user knows, oh,

00:26:08.250 --> 00:26:12.210
I'm giving this other app
access to these two pictures.

00:26:12.210 --> 00:26:16.760
So we don't need a separate set
of permissions on top of this.

00:26:16.760 --> 00:26:19.120
Now, the nice part
about GET_CONTENT

00:26:19.120 --> 00:26:22.250
is you can actually do
it with multiple files.

00:26:22.250 --> 00:26:27.350
So EXTRA_ALLOW_MULTIPLE
true, and all of a sudden,

00:26:27.350 --> 00:26:29.300
assuming the providing
app supports it,

00:26:29.300 --> 00:26:31.520
you can actually
select multiple files.

00:26:31.520 --> 00:26:35.180
On the providing side, you can
actually add all these URIs

00:26:35.180 --> 00:26:37.440
to what's called clip data.

00:26:37.440 --> 00:26:41.000
So this was introduced
in API 16, that

00:26:41.000 --> 00:26:46.090
allows you to have multiple URIs
covered by that same grant read

00:26:46.090 --> 00:26:47.530
permission.

00:26:47.530 --> 00:26:51.090
So before we had set
data for a single URI,

00:26:51.090 --> 00:26:53.620
and now we have clip
data for multiple URIs.

00:26:53.620 --> 00:26:55.830
Now, you may be
thinking, oh, API 16?

00:26:55.830 --> 00:26:57.880
I support Gingerbread
because I hate myself.

00:27:00.820 --> 00:27:03.130
Or I really love
my users, right?

00:27:03.130 --> 00:27:05.060
There are lots of
Gingerbread users out there.

00:27:05.060 --> 00:27:06.730
We love them too.

00:27:06.730 --> 00:27:09.080
And it turns out that
EXTRA_ALLOW_MULTIPLE

00:27:09.080 --> 00:27:13.440
was added in API 18, so not
a problem for this case.

00:27:13.440 --> 00:27:16.370
In most cases, for
earlier APIs, they

00:27:16.370 --> 00:27:20.540
didn't have a concept
of reading multiple URIs

00:27:20.540 --> 00:27:22.660
until after API 16.

00:27:22.660 --> 00:27:25.200
So in most cases, the
set data is actually

00:27:25.200 --> 00:27:29.070
enough for the cases where
you're not on API 16.

00:27:33.050 --> 00:27:36.470
So from our chart
at the beginning,

00:27:36.470 --> 00:27:38.830
KitKat kind of changed
a lot of things.

00:27:38.830 --> 00:27:44.020
It actually added a new action
call to ACTION_OPEN_DOCUMENT.

00:27:44.020 --> 00:27:47.560
This is part of what we call the
storage access framework, which

00:27:47.560 --> 00:27:51.340
is a really big, scary,
easy to Google name

00:27:51.340 --> 00:27:55.040
if you need more
information about it.

00:27:55.040 --> 00:27:59.090
But it works very similar to
ACTION_GET_CONTENT via API.

00:27:59.090 --> 00:28:01.010
It's still intent.

00:28:01.010 --> 00:28:04.430
It actually covers many of the
allow multiple and category

00:28:04.430 --> 00:28:07.960
openable that we
saw for GET_CONTENT.

00:28:07.960 --> 00:28:10.540
And of course, no
storage permissions

00:28:10.540 --> 00:28:12.760
attached to any of the
storage access framework.

00:28:12.760 --> 00:28:14.383
I wouldn't really
be talking about it

00:28:14.383 --> 00:28:15.770
if it had storage permissions.

00:28:15.770 --> 00:28:20.490
That would defeat the
whole purpose of my talk.

00:28:20.490 --> 00:28:22.650
But what it does allow
you to do is actually

00:28:22.650 --> 00:28:26.000
additional APIs is on
top of that GET_CONTENT

00:28:26.000 --> 00:28:28.550
openInputStream kind
of API that we already

00:28:28.550 --> 00:28:30.440
have through DocumentContract.

00:28:30.440 --> 00:28:34.260
So here we have different APIs
of getting additional metadata

00:28:34.260 --> 00:28:37.180
about files, when it
was last modified,

00:28:37.180 --> 00:28:40.670
lots of good information
you'd expect from a file.

00:28:40.670 --> 00:28:43.430
But we're not
providing file paths.

00:28:43.430 --> 00:28:48.140
We're providing
access to documents.

00:28:48.140 --> 00:28:51.490
And better yet,
all of these URIs

00:28:51.490 --> 00:28:54.040
actually have the
ability to be persistent.

00:28:54.040 --> 00:28:58.700
So it's not just a one time, oh,
I want to read this one file,

00:28:58.700 --> 00:29:00.730
and then I have to
create a copy of it

00:29:00.730 --> 00:29:03.230
and then keep a separate
copy for myself.

00:29:03.230 --> 00:29:07.610
You can actually say, I want to
persist these URI permissions

00:29:07.610 --> 00:29:11.240
from anything included from
the storage access framework.

00:29:11.240 --> 00:29:13.250
That allows you
actually have a list

00:29:13.250 --> 00:29:17.820
of things that go on forever,
or track what things you've

00:29:17.820 --> 00:29:19.690
actually ever accessed.

00:29:19.690 --> 00:29:24.000
So we supposed to just always
switch to OPEN_DOCUMENT?

00:29:24.000 --> 00:29:28.620
Like everyone's running
KitKat, so we're fine.

00:29:28.620 --> 00:29:31.610
Now, pre-KitKat, you don't
really have a choice.

00:29:31.610 --> 00:29:33.830
It is still GET_CONTENT.

00:29:33.830 --> 00:29:35.230
OPEN_DOCUMENT won't work.

00:29:35.230 --> 00:29:38.900
You won't find any apps that
[? do it. ?] It doesn't exist.

00:29:38.900 --> 00:29:42.240
But they really have
slightly different purposes.

00:29:42.240 --> 00:29:48.430
So GET_CONTENT is that temporary
access to a file, to a URI.

00:29:48.430 --> 00:29:52.380
So consider the case of
an image editing app.

00:29:52.380 --> 00:29:56.890
GET_CONTENT could still be
used for importing clip art

00:29:56.890 --> 00:30:00.860
or adding layers to an
existing editing session.

00:30:00.860 --> 00:30:02.790
In that case, it
doesn't really matter

00:30:02.790 --> 00:30:05.930
that you have direct
access to the file forever.

00:30:05.930 --> 00:30:08.140
It's more that you want
to kind of at one time,

00:30:08.140 --> 00:30:10.470
oh, I'm going to paste
this into the file,

00:30:10.470 --> 00:30:12.680
but I don't want
the user to have

00:30:12.680 --> 00:30:14.290
to pick from a predefined list.

00:30:14.290 --> 00:30:18.010
I can use any file
on their device.

00:30:18.010 --> 00:30:22.440
But for accessing the
image for our image apping,

00:30:22.440 --> 00:30:25.340
we may want to
use OPEN_DOCUMENT,

00:30:25.340 --> 00:30:28.230
because then we would
have persistent read

00:30:28.230 --> 00:30:32.200
and write access to
that edited file.

00:30:32.200 --> 00:30:36.370
This also allows us to actually
save the edits directly

00:30:36.370 --> 00:30:40.390
to the file, overriding
it, actually saving it

00:30:40.390 --> 00:30:44.120
where the user expects to find
the file at a later point--

00:30:44.120 --> 00:30:46.470
which is great, because if
you've ever done editing that

00:30:46.470 --> 00:30:49.450
has different copies,
you'll somehow never

00:30:49.450 --> 00:30:52.160
find that edited photo
ever again if you actually

00:30:52.160 --> 00:30:53.910
look for it.

00:30:53.910 --> 00:30:56.210
But if you have
OPEN_DOCUMENT, now you

00:30:56.210 --> 00:30:58.760
can actually save it
directly over the file.

00:30:58.760 --> 00:31:00.280
You can also do
really cool things.

00:31:00.280 --> 00:31:03.770
Like, say your editor
wants a recently used list

00:31:03.770 --> 00:31:04.640
when you open it up.

00:31:04.640 --> 00:31:09.020
Like, let me show you the last
five images that you edited.

00:31:09.020 --> 00:31:12.100
Well, if you've persisted
access to those URIs,

00:31:12.100 --> 00:31:14.420
now you can have a
list of all the images

00:31:14.420 --> 00:31:17.940
that you've had recently without
having to figure out, OK.

00:31:17.940 --> 00:31:20.880
Well, the user selected
this file from somewhere,

00:31:20.880 --> 00:31:22.480
let me hope it's there.

00:31:22.480 --> 00:31:26.280
I can just use the URI
that I already have.

00:31:26.280 --> 00:31:31.080
Now, one thing is that if
that file that they selected

00:31:31.080 --> 00:31:35.400
something from was uninstalled--
or, say, the image was removed

00:31:35.400 --> 00:31:40.890
from the source app-- then when
you call give me the URI again,

00:31:40.890 --> 00:31:42.390
it's not going to
return anything.

00:31:42.390 --> 00:31:43.610
The file is gone, right?

00:31:43.610 --> 00:31:46.990
That's the whole reason
behind the URI thing.

00:31:46.990 --> 00:31:50.260
But in many cases, that's
exactly what you want, right?

00:31:50.260 --> 00:31:53.040
You don't necessarily want,
from a user perspective,

00:31:53.040 --> 00:31:55.710
for them to say, oh, I
deleted this from my gallery.

00:31:55.710 --> 00:31:58.280
But there's still that
app that has a copy of it,

00:31:58.280 --> 00:32:00.640
and that app has
another copy of it.

00:32:00.640 --> 00:32:02.390
And then that second
app doesn't even

00:32:02.390 --> 00:32:04.680
have a delete
button or anything.

00:32:04.680 --> 00:32:09.160
So now I have this data that I
don't really want on my device.

00:32:09.160 --> 00:32:14.060
But in fact, OPEN_DOCUMENT
also allows document providers

00:32:14.060 --> 00:32:17.200
to provide delete
access to other files.

00:32:17.200 --> 00:32:19.440
You may not even need to
go back into the gallery

00:32:19.440 --> 00:32:22.220
and delete the app if
you're using OPEN_DOCUMENT.

00:32:22.220 --> 00:32:24.500
You may actually be able
to delete it directly

00:32:24.500 --> 00:32:26.630
from that app and say,
oh, well, you know what?

00:32:26.630 --> 00:32:28.790
Like, I don't think we
actually need this file.

00:32:28.790 --> 00:32:30.460
Now, you will
probably want to check

00:32:30.460 --> 00:32:32.876
to make sure you actually have
delete access before trying

00:32:32.876 --> 00:32:34.820
to just delete users' files.

00:32:34.820 --> 00:32:36.590
It may not always be the case.

00:32:39.130 --> 00:32:41.410
But there's one thing to
be sure-- OPEN_DOCUMENT

00:32:41.410 --> 00:32:42.790
is just better.

00:32:42.790 --> 00:32:49.190
So it provides all of the same
functionality as GET_CONTENT,

00:32:49.190 --> 00:32:51.180
in addition to this
new functionality

00:32:51.180 --> 00:32:52.660
we've talked
about-- and frankly,

00:32:52.660 --> 00:32:55.190
a lot more functionality.

00:32:55.190 --> 00:32:57.130
So when you call
OPEN_DOCUMENT, you're

00:32:57.130 --> 00:33:01.130
only going to get apps that
support ACTION_OPEN_DOCUMENT,

00:33:01.130 --> 00:33:04.960
that have a document provider,
the class that they would need,

00:33:04.960 --> 00:33:06.360
on their side.

00:33:06.360 --> 00:33:09.300
Now, this means that you may get
a more limited number of apps.

00:33:09.300 --> 00:33:11.510
But obviously, when you're
using OPEN_DOCUMENT,

00:33:11.510 --> 00:33:14.305
maybe you're expecting that
persistence or those new APIs.

00:33:17.150 --> 00:33:21.430
However, if you're on KitKat and
above and you call GET_CONTENT,

00:33:21.430 --> 00:33:23.340
you'll actually get both.

00:33:23.340 --> 00:33:27.700
You'll get all of the apps that
support GET_CONTENT as well

00:33:27.700 --> 00:33:31.230
as all the apps that
support OPEN_DOCUMENT,

00:33:31.230 --> 00:33:34.450
because anything you
can do with GET_CONTENT

00:33:34.450 --> 00:33:37.310
can also be done
on a document URI

00:33:37.310 --> 00:33:39.320
that you've retrieved
via OPEN_DOCUMENT--

00:33:39.320 --> 00:33:44.540
the same opening, the same
checking things on either one.

00:33:44.540 --> 00:33:47.910
Now, this does allow us to do
some optionally cool things.

00:33:47.910 --> 00:33:51.535
There's actually a document
contract is document URI.

00:33:51.535 --> 00:33:54.600
So you can check to see if
your return result is actually

00:33:54.600 --> 00:33:55.480
a document URI.

00:33:55.480 --> 00:33:57.720
And then you can
use those new APIs.

00:33:57.720 --> 00:33:59.180
And if they've
selected something

00:33:59.180 --> 00:34:02.850
from a GET_CONTENT app, then you
can just use just the default

00:34:02.850 --> 00:34:04.890
functionality.

00:34:04.890 --> 00:34:07.800
Now, the nice part is
that even though you're

00:34:07.800 --> 00:34:12.520
getting these URIs, you can use
a document file class, which

00:34:12.520 --> 00:34:15.170
is part of the Android
Support Library v4,

00:34:15.170 --> 00:34:17.300
which kind of gives
you a very similar API

00:34:17.300 --> 00:34:20.610
to a file for a document URI.

00:34:20.610 --> 00:34:22.877
So you can check, do
I have read access?

00:34:22.877 --> 00:34:23.835
Do I have write access?

00:34:23.835 --> 00:34:25.500
Do I have delete access?

00:34:25.500 --> 00:34:30.409
All in a very simple API, and
use it simultaneously for files

00:34:30.409 --> 00:34:32.280
and simultaneously
for these document

00:34:32.280 --> 00:34:35.429
URIs, which is really nice.

00:34:35.429 --> 00:34:36.989
Very handy.

00:34:36.989 --> 00:34:39.460
Now, that does
mean that if you're

00:34:39.460 --> 00:34:45.670
an app that supports GET_CONTENT
and you support OPEN_DOCUMENT,

00:34:45.670 --> 00:34:49.354
you need to disable your
GET_CONTENT on API 19

00:34:49.354 --> 00:34:50.500
and above.

00:34:50.500 --> 00:34:53.510
Otherwise, users will
see GET_CONTENT one

00:34:53.510 --> 00:34:58.190
in the list and your storage
provider in the same list.

00:34:58.190 --> 00:35:01.020
So you disable one and
say, well, OPEN_DOCUMENT

00:35:01.020 --> 00:35:03.190
can do everything
that GET_CONTENT does,

00:35:03.190 --> 00:35:05.385
so I'll just have that
appear in the list.

00:35:05.385 --> 00:35:08.110
You no longer need GET_CONTENT
if you're using OPEN_DOCUMENT.

00:35:10.760 --> 00:35:13.750
So what does accessing the
storage access framework

00:35:13.750 --> 00:35:16.580
look like from a
user's perspective?

00:35:16.580 --> 00:35:19.400
So from their
perspective, they're

00:35:19.400 --> 00:35:22.200
in an app-- say,
our Photo Editor.

00:35:22.200 --> 00:35:25.190
And they hit the button
saying, get me a file.

00:35:25.190 --> 00:35:30.620
Well, unlike GET_CONTENT,
where they have to pick an app

00:35:30.620 --> 00:35:34.000
and then go into that app and
have some custom UI where they

00:35:34.000 --> 00:35:36.795
select things and then that app
doesn't support multi-select

00:35:36.795 --> 00:35:40.180
and then they're clicking on
one and hitting load and then

00:35:40.180 --> 00:35:42.120
clicking on a second
one and hitting load,

00:35:42.120 --> 00:35:45.170
all of the UI for
storage access framework

00:35:45.170 --> 00:35:48.040
is done by the system.

00:35:48.040 --> 00:35:52.571
You don't need to write any UI
to support the storage access

00:35:52.571 --> 00:35:53.070
framework.

00:35:53.070 --> 00:35:56.900
You can just do just
the data part of things.

00:35:56.900 --> 00:35:58.649
So this is really
nice, because then when

00:35:58.649 --> 00:36:00.190
the new version of
Android comes out,

00:36:00.190 --> 00:36:03.750
you get even more
functionality for free.

00:36:03.750 --> 00:36:05.860
You don't have to say,
oh, I'm going to support

00:36:05.860 --> 00:36:08.260
this new stuff as much.

00:36:08.260 --> 00:36:10.700
Because what's
happening is the system

00:36:10.700 --> 00:36:14.500
is the one who's reading
from the document providers

00:36:14.500 --> 00:36:16.700
and giving new functionality.

00:36:16.700 --> 00:36:23.380
So for example, in KitKat and
above, coming with the system

00:36:23.380 --> 00:36:26.760
you get internal storage,
a document provider

00:36:26.760 --> 00:36:28.760
provided by the system.

00:36:28.760 --> 00:36:33.360
As well as if you plugged
in a removable hard drive

00:36:33.360 --> 00:36:36.460
or something, you'd actually
get a document provider

00:36:36.460 --> 00:36:39.230
for that removable hard
drive automatically.

00:36:39.230 --> 00:36:41.750
As soon as you unplugged
it, that document provider

00:36:41.750 --> 00:36:43.070
would disappear.

00:36:43.070 --> 00:36:43.620
It's great.

00:36:43.620 --> 00:36:45.670
Now people can
select those files.

00:36:45.670 --> 00:36:48.450
In Marshmallow, we've
extended that, so now

00:36:48.450 --> 00:36:51.250
when you have an SD card,
you can do the same thing,

00:36:51.250 --> 00:36:53.420
and the storage provider
will just instantly appear

00:36:53.420 --> 00:36:55.300
for the SD card.

00:36:55.300 --> 00:36:58.340
So now all of a sudden, you
can get write, read, and read

00:36:58.340 --> 00:37:01.920
directory access to the SD card
for practically the first time

00:37:01.920 --> 00:37:02.420
ever.

00:37:05.610 --> 00:37:09.050
So we mentioned our
ACTION_OPEN_DOCUMENT

00:37:09.050 --> 00:37:10.770
for accessing a document.

00:37:10.770 --> 00:37:13.625
Now, I keep calling
it a document.

00:37:13.625 --> 00:37:19.270
It's not necessarily a
file on your local storage.

00:37:19.270 --> 00:37:22.860
It could be piped directly
across from the internet.

00:37:22.860 --> 00:37:26.680
It could be in an encrypted
blob on a specific hard drive.

00:37:26.680 --> 00:37:30.610
It doesn't particularly matter,
because from the readings app

00:37:30.610 --> 00:37:34.220
perspective, all you're getting
is an input stream or a file

00:37:34.220 --> 00:37:37.160
descriptor that then you can
stream the contents from.

00:37:37.160 --> 00:37:40.340
And all the metadata
is handled separately.

00:37:40.340 --> 00:37:43.840
So you'll also get
some other new ones.

00:37:43.840 --> 00:37:46.580
ACTION_CREATE_DOCUMENT
is kind of

00:37:46.580 --> 00:37:49.540
like the Save button
in an app, right?

00:37:49.540 --> 00:37:51.279
Where instead of
you saying, oh, I'm

00:37:51.279 --> 00:37:53.070
just going to save it
to this one directory

00:37:53.070 --> 00:37:56.400
that the user knows no
idea of where that is,

00:37:56.400 --> 00:37:59.670
they can instead save
it to Google Drive

00:37:59.670 --> 00:38:02.630
or save it to their
removable storage.

00:38:02.630 --> 00:38:07.280
It doesn't actually matter where
they save it, because again,

00:38:07.280 --> 00:38:08.920
you'll have access to that URI.

00:38:08.920 --> 00:38:12.480
You can get back to
that file at any point.

00:38:12.480 --> 00:38:14.410
This is very
different from the, I

00:38:14.410 --> 00:38:17.100
want to save it always
in this one directory.

00:38:17.100 --> 00:38:20.130
Now users can use
different storage providers

00:38:20.130 --> 00:38:21.570
and switch between them.

00:38:21.570 --> 00:38:24.090
And then, if they want
to select a file that

00:38:24.090 --> 00:38:26.782
may be on a different device,
they saved it to Google Drive.

00:38:26.782 --> 00:38:28.240
You go on to their
other drive, now

00:38:28.240 --> 00:38:31.550
they can OPEN_DOCUMENT,
select Google Drive,

00:38:31.550 --> 00:38:33.960
and suddenly get
access to that file

00:38:33.960 --> 00:38:37.600
without you having to
integrate with any SDKs

00:38:37.600 --> 00:38:40.980
or do any extra work because
storage access framework

00:38:40.980 --> 00:38:46.510
kind of separates you from where
the files are actually stored.

00:38:46.510 --> 00:38:50.510
Now, my personal favorite
was added in Lollipop.

00:38:50.510 --> 00:38:53.300
And that's OPEN_DOCUMENT_TREE.

00:38:53.300 --> 00:38:56.400
So this, instead of giving
access to an individual file,

00:38:56.400 --> 00:38:59.410
now you get access to
a whole document tree-

00:38:59.410 --> 00:39:03.680
or let's call it just a folder,
because that's a nice name.

00:39:03.680 --> 00:39:07.530
You get access to the whole
folder and all of its children.

00:39:07.530 --> 00:39:09.990
Right, so in this
case, you can actually

00:39:09.990 --> 00:39:12.030
say like, oh, well, where
do you want me to save

00:39:12.030 --> 00:39:13.780
these backups of your app?

00:39:13.780 --> 00:39:16.320
And you can say, well, I want
to store them on Google Drive,

00:39:16.320 --> 00:39:19.650
and give them access to just
one particular folder-- not

00:39:19.650 --> 00:39:21.710
your entire Google Drive,
because that's maybe

00:39:21.710 --> 00:39:25.180
a little scary and
terabytes of data, maybe?

00:39:25.180 --> 00:39:26.580
But just one directory.

00:39:26.580 --> 00:39:29.900
And then throughout the
entire lifetime of your app,

00:39:29.900 --> 00:39:33.420
you can then read and
write to that directory

00:39:33.420 --> 00:39:35.680
without additionally
bothering the user with,

00:39:35.680 --> 00:39:38.980
oh, hey-- where did you want
me to put this file every time?

00:39:38.980 --> 00:39:42.160
You can have a default
save location for new edits

00:39:42.160 --> 00:39:43.940
that could go into this file.

00:39:43.940 --> 00:39:46.980
The choices are really very
limitless when you're actually

00:39:46.980 --> 00:39:47.980
in that kind of setting.

00:39:50.570 --> 00:39:53.760
So implementing a
DocumentProvider,

00:39:53.760 --> 00:39:55.820
kind of a few methods.

00:39:55.820 --> 00:39:58.040
Not any ContentProvider
methods, even

00:39:58.040 --> 00:40:00.370
though it's actually
a ContentProvider

00:40:00.370 --> 00:40:02.000
underneath the covers.

00:40:02.000 --> 00:40:05.582
You'll notice we do that a lot.

00:40:05.582 --> 00:40:08.040
Because ContentProviders are
really great at providing URIs

00:40:08.040 --> 00:40:12.180
to other systems, it's how we
do communication between devices

00:40:12.180 --> 00:40:13.890
or between apps.

00:40:13.890 --> 00:40:16.740
Instead, you'll implement
four methods-- queryRoots,

00:40:16.740 --> 00:40:19.240
which is kind of the
top level like, I

00:40:19.240 --> 00:40:22.420
am an app that provides storage
access framework controls.

00:40:22.420 --> 00:40:24.400
And this is my name.

00:40:24.400 --> 00:40:26.040
I want to be called
Google Drive.

00:40:26.040 --> 00:40:29.660
That's a good name for
the app, Google Drive.

00:40:29.660 --> 00:40:31.679
Now normally, you
just have one root.

00:40:31.679 --> 00:40:33.470
But you can actually
return multiple roots.

00:40:33.470 --> 00:40:35.560
Say if you're logged
into multiple users

00:40:35.560 --> 00:40:39.170
at the same time, you could
have different accounts in here

00:40:39.170 --> 00:40:41.860
so that the user, without
having to go into your app

00:40:41.860 --> 00:40:44.950
and select an account and
then select which file,

00:40:44.950 --> 00:40:46.490
they would just
appear as top level

00:40:46.490 --> 00:40:50.410
directories in the storage
access framework UI.

00:40:50.410 --> 00:40:53.040
Now, queryChildDocuments
and queryDocuments

00:40:53.040 --> 00:40:55.310
are kind of what you
expect-- information

00:40:55.310 --> 00:40:57.940
about all the things within
a folder and information

00:40:57.940 --> 00:41:00.200
about a particular document.

00:41:00.200 --> 00:41:03.220
And then openDocuments,
really kind of the main key

00:41:03.220 --> 00:41:07.400
is the give me the bytes,
gives me the information

00:41:07.400 --> 00:41:08.570
about this file, right?

00:41:08.570 --> 00:41:10.800
And it may just be
loading the file itself,

00:41:10.800 --> 00:41:12.300
or it may be doing
something totally

00:41:12.300 --> 00:41:14.258
different like streaming
it across the internet

00:41:14.258 --> 00:41:17.260
and opening up a socket
that persists forever.

00:41:17.260 --> 00:41:18.820
And that's the thing.

00:41:18.820 --> 00:41:22.000
From the app's perspective,
it doesn't matter, right?

00:41:22.000 --> 00:41:25.400
From someone who's
reading it in-- again,

00:41:25.400 --> 00:41:28.460
it doesn't particularly
matter what the API is doing.

00:41:28.460 --> 00:41:34.102
It's just that OPEN_DOCUMENT
exists, and suddenly it works.

00:41:34.102 --> 00:41:35.810
So there's actually
quite a few resources

00:41:35.810 --> 00:41:39.170
about implementing it, if
you're one of those things who

00:41:39.170 --> 00:41:42.770
run Dropbox or Box
or Google Drive

00:41:42.770 --> 00:41:45.620
or really anything you want.

00:41:45.620 --> 00:41:48.530
There's information on
developer.android.com.

00:41:48.530 --> 00:41:52.320
I've built a sample app called
LocalStorage which gives you

00:41:52.320 --> 00:41:56.690
kind of both a simple UI to
test out all of these actions

00:41:56.690 --> 00:42:01.070
that we've talked about as well
as give you a sample storage

00:42:01.070 --> 00:42:03.100
provider which you
can build upon.

00:42:03.100 --> 00:42:06.540
And then Jeff Sharkey, the
storage framework engineer

00:42:06.540 --> 00:42:11.790
who's responsible for
just about all this stuff,

00:42:11.790 --> 00:42:15.560
wrote an example provider called
Vault, which actually encrypts

00:42:15.560 --> 00:42:18.660
all the files and
then auto decrypts it

00:42:18.660 --> 00:42:20.480
when you use them
in storage provider.

00:42:20.480 --> 00:42:22.970
So very nice example
of going a little bit

00:42:22.970 --> 00:42:25.310
beyond just a
simple OPEN_DOCUMENT

00:42:25.310 --> 00:42:29.040
opens the file
underneath the covers.

00:42:29.040 --> 00:42:32.380
So to recap, what do we need
the storage permission for?

00:42:32.380 --> 00:42:35.450
Accessing our internal
app's specific directories?

00:42:35.450 --> 00:42:37.260
Nope, nothing there.

00:42:37.260 --> 00:42:40.370
External apps or
apps-specific directories?

00:42:40.370 --> 00:42:42.190
Not above Lollipop.

00:42:42.190 --> 00:42:44.690
So we can use max SDK 18.

00:42:44.690 --> 00:42:47.245
For sending files
via ACTION_SEND?

00:42:47.245 --> 00:42:48.920
No, we've got FileProvider.

00:42:48.920 --> 00:42:49.850
We're good.

00:42:49.850 --> 00:42:53.320
For receiving files
or requesting files

00:42:53.320 --> 00:42:54.660
from other apps?

00:42:54.660 --> 00:42:58.680
No, not if everyone's
doing their job right.

00:42:58.680 --> 00:43:02.510
But if you really do want to
have that fallback of asking

00:43:02.510 --> 00:43:05.800
for the storage permission,
really, really consider,

00:43:05.800 --> 00:43:08.900
at most, max SDK 22.

00:43:08.900 --> 00:43:11.330
Don't specifically ask
for storage permissions

00:43:11.330 --> 00:43:14.960
on runtime permissions model
just because you want access

00:43:14.960 --> 00:43:16.125
to one file.

00:43:16.125 --> 00:43:18.390
In theory, hopefully
Marshmallow will kind of

00:43:18.390 --> 00:43:22.150
push apps to be a little
bit better in this range,

00:43:22.150 --> 00:43:25.140
because really we want
everyone to be playing nicely.

00:43:25.140 --> 00:43:27.850
They don't need access to every
one of the photos and videos

00:43:27.850 --> 00:43:30.370
that you guys have shot,
especially if they're

00:43:30.370 --> 00:43:31.860
videos from Big Android BBQ.

00:43:31.860 --> 00:43:35.050
Don't share any of those ones.

00:43:35.050 --> 00:43:37.780
You know the ones
I'm talking about.

00:43:37.780 --> 00:43:40.450
But really, we want to
make the storage permission

00:43:40.450 --> 00:43:42.670
the exception, right?

00:43:42.670 --> 00:43:44.580
If you booted up a
Marshmallow phone

00:43:44.580 --> 00:43:46.560
and you look at the
number of permissions,

00:43:46.560 --> 00:43:49.100
you'll note that storage
permission is generally

00:43:49.100 --> 00:43:52.810
the highest one in count,
and I would rather it

00:43:52.810 --> 00:43:54.810
be the lowest one in count.

00:43:54.810 --> 00:43:59.040
Because really, that means
that those apps, unless you're

00:43:59.040 --> 00:44:02.490
a specific app
like File Explorer

00:44:02.490 --> 00:44:04.910
or something like
that that needs access

00:44:04.910 --> 00:44:06.980
to all those files, you
probably don't actually

00:44:06.980 --> 00:44:08.210
need access to all of them.

00:44:08.210 --> 00:44:10.900
So we've actually
done a lot of work

00:44:10.900 --> 00:44:13.490
on that even
internally in Google.

00:44:13.490 --> 00:44:16.850
Like runtime permissions are
still a really big deal inside

00:44:16.850 --> 00:44:18.550
of Google as well.

00:44:18.550 --> 00:44:22.885
So for example, the next release
of Google Maps Android's SDK

00:44:22.885 --> 00:44:25.340
is removing storage entirely.

00:44:25.340 --> 00:44:27.760
No longer needed the storage
permission to run any

00:44:27.760 --> 00:44:31.570
the Maps stuff, which
previously they were using.

00:44:31.570 --> 00:44:34.730
And even right now
in 8.1, you don't

00:44:34.730 --> 00:44:37.777
need the storage permission
on Marshmallow devices.

00:44:37.777 --> 00:44:40.110
So there's actually a lot of
documentation on the Google

00:44:40.110 --> 00:44:43.320
Maps site that tells you exactly
when those things are happening

00:44:43.320 --> 00:44:46.510
and will surely be updated when
the next version of Google Play

00:44:46.510 --> 00:44:49.120
services comes out.

00:44:49.120 --> 00:44:51.670
So thank you all for your time.

00:44:51.670 --> 00:44:52.590
My name's Ian Lake.

00:44:52.590 --> 00:44:55.600
You can catch me on
Google+ or Twitter.

00:44:55.600 --> 00:44:57.210
Happy to help at all times.

00:44:57.210 --> 00:44:58.890
So I'll be down
here for questions.

00:44:58.890 --> 00:45:01.290
[APPLAUSE]

00:45:01.290 --> 00:45:05.240
[MUSIC PLAYING]

