WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:06.700
[MUSIC PLAYING]

00:00:06.700 --> 00:00:08.790
MALE SPEAKER: Shanghai
GDG is a very

00:00:08.790 --> 00:00:10.575
interesting developer community.

00:00:10.575 --> 00:00:11.700
FEMALE SPEAKER: I'm
glad somebody

00:00:11.700 --> 00:00:12.740
has asked this question.

00:00:12.740 --> 00:00:13.730
MALE SPEAKER: This is where
the magic happens.

00:00:13.730 --> 00:00:15.750
FEMALE SPEAKER: This is
primarily a question and

00:00:15.750 --> 00:00:17.340
answer show, so if any
of you out there

00:00:17.340 --> 00:00:18.650
would like to ask questions.

00:00:22.890 --> 00:00:24.890
VIC FRYZEL: Hey guys, welcome
back to Google Developer Live.

00:00:24.890 --> 00:00:26.250
I'm Vic.

00:00:26.250 --> 00:00:28.920
I work on the Google
Drive SDK team.

00:00:28.920 --> 00:00:31.750
Today, what I'm going to be
doing is walking through the

00:00:31.750 --> 00:00:36.570
Quickstart sample for the
Drive SDK and Ruby.

00:00:36.570 --> 00:00:38.720
So today I'm going to show you
how to write a command line

00:00:38.720 --> 00:00:43.300
application that will upload
a file to Google Drive.

00:00:43.300 --> 00:00:45.030
So this is pretty
straightforward.

00:00:45.030 --> 00:00:48.380
The entire tutorial takes five
minutes or less to really run

00:00:48.380 --> 00:00:49.500
through yourself.

00:00:49.500 --> 00:00:51.820
There's just a few key steps
that we have to do.

00:00:51.820 --> 00:00:56.140
So here on my screen, I've
got the Google Drive SDK

00:00:56.140 --> 00:00:57.570
documentation open,
specifically

00:00:57.570 --> 00:01:00.400
our Quickstart guide.

00:01:00.400 --> 00:01:03.270
And there's a lot of text here,
but the primary points

00:01:03.270 --> 00:01:06.610
are that you need to enable the
Drive API for a Google API

00:01:06.610 --> 00:01:09.410
Console project.

00:01:09.410 --> 00:01:11.460
That pretty much lets your
application just

00:01:11.460 --> 00:01:13.570
access the Drive API.

00:01:13.570 --> 00:01:17.560
You need to install the Google
Ruby client library, set up

00:01:17.560 --> 00:01:19.910
the sample, and run
the sample.

00:01:19.910 --> 00:01:22.000
So let's just dive in.

00:01:22.000 --> 00:01:26.240
The first thing is open the
Google API Console, and then

00:01:26.240 --> 00:01:26.880
create a new project.

00:01:26.880 --> 00:01:28.540
So I'm going to create
one here.

00:01:28.540 --> 00:01:30.070
I'm going to call this
Google Developers

00:01:30.070 --> 00:01:33.570
Live, and Create Project.

00:01:33.570 --> 00:01:38.010
This just takes a second to
create the new project.

00:01:38.010 --> 00:01:38.970
And here it is.

00:01:38.970 --> 00:01:42.030
So you'll notice that most
of the services are off.

00:01:42.030 --> 00:01:45.535
What we have to do is enable
the Drive API.

00:01:45.535 --> 00:01:46.810
Click this.

00:01:46.810 --> 00:01:48.410
And then, that's it
for that section.

00:01:48.410 --> 00:01:51.760
The other thing that we have
to do in the API Console is

00:01:51.760 --> 00:01:54.290
create an OAuth 2.0 client ID,
and what this is going to do

00:01:54.290 --> 00:01:56.950
is allow our command line
application to actually make

00:01:56.950 --> 00:02:00.800
requests to the API that have
been authorized by a user.

00:02:00.800 --> 00:02:01.910
So I'm going to create
the client ID.

00:02:01.910 --> 00:02:05.340
Again, I'm going to call it
Google Developers Live.

00:02:05.340 --> 00:02:08.380
And then I'm going
to click Next.

00:02:08.380 --> 00:02:09.810
So this is important.

00:02:09.810 --> 00:02:11.570
We're not writing a
web application.

00:02:11.570 --> 00:02:14.690
We're writing an installed
application, so this is an

00:02:14.690 --> 00:02:17.420
application that doesn't
run in a web browser.

00:02:17.420 --> 00:02:19.190
So let's select this.

00:02:19.190 --> 00:02:21.370
And then it's not an Android
or iOS application, it's

00:02:21.370 --> 00:02:24.320
Other, and then I'm going
to create the client ID.

00:02:24.320 --> 00:02:25.030
All right, so here it is.

00:02:25.030 --> 00:02:27.010
This is our client ID, and this
is our client secret.

00:02:27.010 --> 00:02:29.540
We're going to need these
in just a minute.

00:02:29.540 --> 00:02:31.080
Coming back to the
documentation, the next thing

00:02:31.080 --> 00:02:34.025
that we have to do is install
the Google API

00:02:34.025 --> 00:02:35.940
client library for Ruby.

00:02:35.940 --> 00:02:37.930
So this is pretty much
just a Ruby gem.

00:02:37.930 --> 00:02:40.580
I'm going to come here
and paste it.

00:02:40.580 --> 00:02:42.350
I've actually already got
it installed, and I need

00:02:42.350 --> 00:02:44.460
superuser permissions to install
it and stuff, so I'm

00:02:44.460 --> 00:02:47.370
not going to run that command,
but just trust me

00:02:47.370 --> 00:02:48.890
that I've run it.

00:02:48.890 --> 00:02:51.740
And once that's installed, we
need to set up the sample.

00:02:51.740 --> 00:02:55.650
So, under Ruby here, the only
thing that we need to do is

00:02:55.650 --> 00:03:00.510
copy and paste this source code
into quickstart.rb, which

00:03:00.510 --> 00:03:02.570
is the name of the file that
we're going to run.

00:03:02.570 --> 00:03:05.820
So I've got that here locally.

00:03:05.820 --> 00:03:08.710
You can see, this is
the exact same.

00:03:08.710 --> 00:03:13.180
And then the next thing that we
have to do is replace these

00:03:13.180 --> 00:03:19.540
templates with an actual
client ID in secret.

00:03:19.540 --> 00:03:22.250
So these are in the API Console
for the installed

00:03:22.250 --> 00:03:28.640
application, so let me select
this one, and there's the

00:03:28.640 --> 00:03:33.010
client ID, and then we
replace this one

00:03:33.010 --> 00:03:34.260
with the client secret.

00:03:36.880 --> 00:03:37.560
And that's it.

00:03:37.560 --> 00:03:39.830
So I'm going to save it, and
then we'll run it, and after

00:03:39.830 --> 00:03:42.530
we run it once, we're going to
walk through the source code.

00:03:42.530 --> 00:03:44.510
So to run it-- this is also
in the documentation--

00:03:44.510 --> 00:03:46.570
we just come down a little bit
further, and you can see all

00:03:46.570 --> 00:03:49.090
you have to do is run
Ruby quickstart.rb.

00:03:49.090 --> 00:03:51.370
So paste to that--

00:03:51.370 --> 00:03:52.490
oh, oops.

00:03:52.490 --> 00:03:55.910
Before I forget, let me also
go into the fact that we're

00:03:55.910 --> 00:03:57.960
going to upload a file, so
we need a file to upload.

00:03:57.960 --> 00:04:01.690
I actually have one here
called document.txt.

00:04:01.690 --> 00:04:03.230
It says "Hello world" inside.

00:04:03.230 --> 00:04:05.250
Nothing fancy.

00:04:05.250 --> 00:04:09.400
So again, let me run
the quickstart.

00:04:09.400 --> 00:04:10.490
So you see some warnings
appear.

00:04:10.490 --> 00:04:11.570
Just ignore those.

00:04:11.570 --> 00:04:14.920
Those are because my Ruby
installation is a

00:04:14.920 --> 00:04:16.470
little messed up.

00:04:16.470 --> 00:04:17.630
But no big deal.

00:04:17.630 --> 00:04:19.339
It's still functioning fine.

00:04:19.339 --> 00:04:23.760
So here, what we need to
do is paste this URL

00:04:23.760 --> 00:04:25.710
into our web browser.

00:04:25.710 --> 00:04:28.760
So I come here, and I paste.

00:04:28.760 --> 00:04:34.350
So here we see the OAuth 2.0
authorization page for our API

00:04:34.350 --> 00:04:36.810
project, Google Developers Live,
and it's asking me to

00:04:36.810 --> 00:04:39.690
view and manage the files and
documents in Google Drive.

00:04:39.690 --> 00:04:42.010
If a user's curious, they can
expand this and see what else

00:04:42.010 --> 00:04:43.380
is going on.

00:04:43.380 --> 00:04:46.510
So I'm going to click Allow
Access, and because this is

00:04:46.510 --> 00:04:48.750
for an installed application,
what it's going to do is give

00:04:48.750 --> 00:04:51.620
me an authorization code that I
have to take from this text

00:04:51.620 --> 00:04:53.530
box and paste back to
the application.

00:04:53.530 --> 00:04:57.780
So once I paste that here and
hit Enter, that's it.

00:04:57.780 --> 00:05:02.560
So here, we have the document
ID for our file

00:05:02.560 --> 00:05:04.980
and then the title.

00:05:04.980 --> 00:05:09.410
These were returned from the
Drive SDK back to the Ruby

00:05:09.410 --> 00:05:11.490
client library, and then we
printed them out in our

00:05:11.490 --> 00:05:12.690
application.

00:05:12.690 --> 00:05:16.980
So let's take a look at Google
Drive, and I'll show you that

00:05:16.980 --> 00:05:18.160
that actually worked.

00:05:18.160 --> 00:05:20.530
So here, I'm searching for my
document, which is the name of

00:05:20.530 --> 00:05:22.010
the document we uploaded,
and there's nothing.

00:05:22.010 --> 00:05:24.640
But if I refresh, here it is.

00:05:24.640 --> 00:05:29.220
So I click on this and
give it a second.

00:05:29.220 --> 00:05:31.200
It says "Hello world." So that's
the content of our text

00:05:31.200 --> 00:05:33.810
file, so we know
that it works.

00:05:33.810 --> 00:05:36.190
Let's just now take a look
through the source code and

00:05:36.190 --> 00:05:37.440
see what's going on.

00:05:37.440 --> 00:05:38.530
So if I--

00:05:38.530 --> 00:05:41.010
then quickstart.rb.

00:05:41.010 --> 00:05:44.810
So at the top here, we're just
importing some libraries, and

00:05:44.810 --> 00:05:48.520
then setting some constants here
primarily the client ID

00:05:48.520 --> 00:05:50.900
in secret, and then the
OAuth scope that

00:05:50.900 --> 00:05:52.510
we're going to request.

00:05:52.510 --> 00:05:56.030
Here, we requested the full
drive scope, so this allows us

00:05:56.030 --> 00:05:58.860
to pretty much access any
part of the Drive API.

00:05:58.860 --> 00:06:02.210
There are other scopes that are
probably more appropriate,

00:06:02.210 --> 00:06:06.330
but because hypothetically this
application might in the

00:06:06.330 --> 00:06:09.510
future download files or
something like that, or work

00:06:09.510 --> 00:06:13.500
with a user's entire
drive corpus, we

00:06:13.500 --> 00:06:15.790
request the full scope.

00:06:15.790 --> 00:06:18.260
And then also we need the
redirect URI, which is

00:06:18.260 --> 00:06:20.600
currently set to out of band,
which is why we had to copy

00:06:20.600 --> 00:06:23.370
and paste that authorization
code.

00:06:23.370 --> 00:06:26.690
Then we create a new API client
and load the drive API.

00:06:26.690 --> 00:06:28.210
Pretty straightforward.

00:06:28.210 --> 00:06:30.370
We request authorization, so
we set up some parameters

00:06:30.370 --> 00:06:33.385
here, and then we get the URI
from client.authoriza

00:06:33.385 --> 00:06:35.940
tion.authorizationuri.

00:06:35.940 --> 00:06:37.090
We print that to the screen.

00:06:37.090 --> 00:06:39.540
This is the thing that the user
will copy and paste into

00:06:39.540 --> 00:06:42.910
their web browser, and once they
paste it, we're going to

00:06:42.910 --> 00:06:45.940
request that they enter the
authorization code, and

00:06:45.940 --> 00:06:50.170
client.authorization.code equals
what they gave, and

00:06:50.170 --> 00:06:52.360
then we're going to fetch
the access token.

00:06:52.360 --> 00:06:53.750
Pretty straightforward.

00:06:53.750 --> 00:06:55.850
The last thing that we have
to do is actually

00:06:55.850 --> 00:06:57.100
just insert the file.

00:06:57.100 --> 00:07:01.740
So here, we're creating the new
file with this metadata.

00:07:01.740 --> 00:07:04.930
So here's the title and the
description and the MIME type.

00:07:04.930 --> 00:07:06.800
And then, here's the media
content that we're going to

00:07:06.800 --> 00:07:08.410
attach to that metadata.

00:07:08.410 --> 00:07:11.020
So document.txt, and we're
saying that its

00:07:11.020 --> 00:07:13.730
type is text plain.

00:07:13.730 --> 00:07:14.740
And here's the result.

00:07:14.740 --> 00:07:16.600
Here is where we actually
upload this

00:07:16.600 --> 00:07:18.350
file to Google Drive.

00:07:18.350 --> 00:07:20.815
We're just doing client.execute,
and we're

00:07:20.815 --> 00:07:23.500
doing drive.files.insert, and
we're attaching some extra

00:07:23.500 --> 00:07:25.470
parameters here.

00:07:25.470 --> 00:07:29.720
Once we do that, result contains
a JSON object or a

00:07:29.720 --> 00:07:36.340
JSON representation of the API
response, and result.data dot

00:07:36.340 --> 00:07:39.745
whatever is going to have
metadata about the individual

00:07:39.745 --> 00:07:41.430
file that we uploaded.

00:07:41.430 --> 00:07:46.030
So result.data.id is the ID of
the file, and title is title

00:07:46.030 --> 00:07:46.590
of the file.

00:07:46.590 --> 00:07:49.930
There's other stuff in here
that's not too important at

00:07:49.930 --> 00:07:51.130
the moment.

00:07:51.130 --> 00:07:53.940
So that's pretty much it
for the application.

00:07:53.940 --> 00:07:58.920
So once we've got that done,
we can actually improve the

00:07:58.920 --> 00:08:00.340
sample quite a bit.

00:08:00.340 --> 00:08:04.850
We could do some other things,
primarily this stuff, like

00:08:04.850 --> 00:08:08.400
copying and pasting this URL
into the browser, then

00:08:08.400 --> 00:08:10.460
clicking Allow Access, then
copying and pasting the

00:08:10.460 --> 00:08:12.850
authorization code back
into the application.

00:08:12.850 --> 00:08:16.330
That's just tedious for the
user, so there are a couple of

00:08:16.330 --> 00:08:18.060
ways around that.

00:08:18.060 --> 00:08:22.950
What we want to do usually is
open the web browser for the

00:08:22.950 --> 00:08:26.410
user, firstly, so that they land
on the authorization page

00:08:26.410 --> 00:08:28.560
without having to copy
and paste the URL.

00:08:28.560 --> 00:08:31.460
The other thing we usually want
to do is spin up a web

00:08:31.460 --> 00:08:35.820
server locally on the user's
computer just for a few

00:08:35.820 --> 00:08:40.870
minutes while the user browses
to the authorization URL.

00:08:40.870 --> 00:08:44.370
And then what we can do is set
a redirect URI so that when

00:08:44.370 --> 00:08:51.050
Google receives the Allow Access
click from the user,

00:08:51.050 --> 00:08:52.990
Google will redirect
the user's browser

00:08:52.990 --> 00:08:55.070
back to local host.

00:08:55.070 --> 00:09:00.100
And once they do that, you can
land here on your own web

00:09:00.100 --> 00:09:03.470
browser and get the URI of
the request which has the

00:09:03.470 --> 00:09:05.870
authorization code in it.

00:09:05.870 --> 00:09:08.480
And with that authorization
code, you can use that to then

00:09:08.480 --> 00:09:12.430
upgrade to a request and
an access token.

00:09:12.430 --> 00:09:15.470
So that's a much better user
experience where the user

00:09:15.470 --> 00:09:17.960
doesn't have to copy and paste
some stuff that they might not

00:09:17.960 --> 00:09:20.050
necessarily understand.

00:09:20.050 --> 00:09:21.720
Some other stuff that you
could do is make this

00:09:21.720 --> 00:09:25.390
application work for more file
types besides text files.

00:09:25.390 --> 00:09:29.040
So at the moment, if we come
back to quickstart.rb, you can

00:09:29.040 --> 00:09:31.850
see here that we manually set
the MIME type, but you could

00:09:31.850 --> 00:09:34.770
do some more intelligent
determination of what the MIME

00:09:34.770 --> 00:09:38.250
type of the file is before
uploading it.

00:09:38.250 --> 00:09:40.750
Another thing we can do is
extend just the general

00:09:40.750 --> 00:09:42.680
functionality of this
command line sample.

00:09:42.680 --> 00:09:45.290
We could do things like allow
the user to download a file

00:09:45.290 --> 00:09:48.830
with the command line sample, or
we do things like cache the

00:09:48.830 --> 00:09:54.620
refresh and access tokens into a
secure data store locally on

00:09:54.620 --> 00:09:56.860
the user's computer.

00:09:56.860 --> 00:10:01.110
So in Linux, you might use
a keystore, for instance.

00:10:01.110 --> 00:10:03.090
So those are just a couple of
things that we could do.

00:10:03.090 --> 00:10:06.720
If you're really looking more
towards writing a web app that

00:10:06.720 --> 00:10:09.890
integrates with the Google Drive
user interface, then I

00:10:09.890 --> 00:10:13.790
highly recommend you take a
look at our other samples,

00:10:13.790 --> 00:10:16.540
which are back here in
the documentation

00:10:16.540 --> 00:10:18.200
under Example Apps.

00:10:18.200 --> 00:10:21.430
So here, we have a full
set of example apps.

00:10:21.430 --> 00:10:25.780
So here's the Ruby one for
writing an example application

00:10:25.780 --> 00:10:30.230
called DrEdit, which is a
text editor for the web.

00:10:30.230 --> 00:10:33.430
And that's very much more
advanced in that it allows you

00:10:33.430 --> 00:10:35.850
to integrate your application
into the Google Drive user

00:10:35.850 --> 00:10:40.500
interface so that a user can
interact with individual files

00:10:40.500 --> 00:10:44.020
using your application, and it
does a few more advanced

00:10:44.020 --> 00:10:48.670
things that just take a little
bit longer to get started.

00:10:48.670 --> 00:10:50.490
Certainly more than
five minutes.

00:10:50.490 --> 00:10:54.080
So that would be a
good next step.

00:10:54.080 --> 00:10:55.410
That's pretty much it, though.

00:10:55.410 --> 00:10:59.790
So this has been the Google
Drive SDK Quickstart for Ruby.

00:10:59.790 --> 00:11:00.550
I'm Vic.

00:11:00.550 --> 00:11:01.800
Thanks for watching.

00:11:05.074 --> 00:11:18.033
[MUSIC PLAYING]

