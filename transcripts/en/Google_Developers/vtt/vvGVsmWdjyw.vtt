WEBVTT
Kind: captions
Language: en

00:00:00.390 --> 00:00:02.056
You know, I think
drop shadows-- they're

00:00:02.056 --> 00:00:03.730
like the singletons
of the design world.

00:00:03.730 --> 00:00:05.634
They're easy to make,
but as a result,

00:00:05.634 --> 00:00:07.050
they can be overused
by people who

00:00:07.050 --> 00:00:08.880
don't know what they're doing.

00:00:08.880 --> 00:00:09.570
Guilty.

00:00:09.570 --> 00:00:12.340
And therefore, it's kind of
trendy to make fun of them.

00:00:12.340 --> 00:00:14.140
But when done
right, drop shadows

00:00:14.140 --> 00:00:15.512
can be incredibly useful.

00:00:15.512 --> 00:00:17.720
They can be a great way to
draw your user's attention

00:00:17.720 --> 00:00:19.590
to the usable elements
on the screen,

00:00:19.590 --> 00:00:21.990
and they can add a nice
tactile feel to your app.

00:00:21.990 --> 00:00:23.470
And as you also
probably noticed,

00:00:23.470 --> 00:00:25.830
they play a significant role
in Google's material design

00:00:25.830 --> 00:00:26.799
guidelines.

00:00:26.799 --> 00:00:28.840
So for us, applying shadows
in the correct manner

00:00:28.840 --> 00:00:29.750
is important.

00:00:29.750 --> 00:00:31.270
Not just from a
design standpoint,

00:00:31.270 --> 00:00:33.580
but from an engineering
standpoint as well.

00:00:33.580 --> 00:00:36.430
You see, drop shadows
can also be expensive.

00:00:36.430 --> 00:00:39.510
Do them wrong, and you can
waste precious CPU cycles.

00:00:39.510 --> 00:00:41.000
But if you do them
right, your app

00:00:41.000 --> 00:00:43.590
can still look nice while
keeping that silky smooth frame

00:00:43.590 --> 00:00:44.110
rate.

00:00:44.110 --> 00:00:47.170
Let's find out how on this
episode of "Route 85."

00:00:47.170 --> 00:00:51.130
[MUSIC PLAYING]

00:00:51.130 --> 00:00:53.880
So, I want to start by
thanking Jeremy Goldberg, a UX

00:00:53.880 --> 00:00:55.865
designer working on
the Google app for iOS

00:00:55.865 --> 00:00:58.140
for providing me with all
this great information.

00:00:58.140 --> 00:00:59.380
Thanks, Jeremy.

00:00:59.380 --> 00:01:01.610
Now, there are many ways
to draw shadows on iOS,

00:01:01.610 --> 00:01:04.040
each with its own advantages
and disadvantages.

00:01:04.040 --> 00:01:06.350
But today, we're going
to look at two of them.

00:01:06.350 --> 00:01:09.120
First up-- drawing shadows
in a core animation layer.

00:01:09.120 --> 00:01:11.410
Now, this method is great
because it's simple.

00:01:11.410 --> 00:01:13.160
You just define all
your shadow properties

00:01:13.160 --> 00:01:15.660
in code, which also means that
tweaking or messing with them

00:01:15.660 --> 00:01:18.230
later is simply a matter
of adjusting a few numbers.

00:01:18.230 --> 00:01:20.410
Plus, it's easy to change
your shadow dynamically

00:01:20.410 --> 00:01:22.424
if that's the kind
of thing you're into.

00:01:22.424 --> 00:01:24.090
Here, for instance,
you can see that I'm

00:01:24.090 --> 00:01:26.680
animating the shape of my view
and the offset of my shadow,

00:01:26.680 --> 00:01:30.070
all in code, and iOS is drawing
the shadow appropriately

00:01:30.070 --> 00:01:31.160
in real time.

00:01:31.160 --> 00:01:32.700
Pretty neat, huh?

00:01:32.700 --> 00:01:35.040
Now, you can access the
CALayer of any UIView

00:01:35.040 --> 00:01:37.676
by accessing its layer
property, just like so.

00:01:37.676 --> 00:01:39.300
Then adding a shadow
is simply a matter

00:01:39.300 --> 00:01:42.382
of adding a shadow radius,
offset, color, and an opacity.

00:01:42.382 --> 00:01:44.590
I'm not going to go into
too much detail around these

00:01:44.590 --> 00:01:46.370
since you can probably
figure them out on your own,

00:01:46.370 --> 00:01:47.911
but I do encourage
you to play around

00:01:47.911 --> 00:01:50.660
with them, if for no other
reason than it's kind of fun.

00:01:50.660 --> 00:01:53.470
So all this is great, but
drawing a shadow in a CALayer

00:01:53.470 --> 00:01:54.415
can be slow.

00:01:54.415 --> 00:01:55.790
And if you have
a lot of elements

00:01:55.790 --> 00:01:57.270
onscreen with a
lot of shadows, it

00:01:57.270 --> 00:01:58.970
can really hurt
your performance.

00:01:58.970 --> 00:02:00.290
So what can you do?

00:02:00.290 --> 00:02:02.230
Well, one tip is
to use Bezier paths

00:02:02.230 --> 00:02:04.150
to define your shadow's shape.

00:02:04.150 --> 00:02:06.480
You see, iOS is calculating
the shape of your view

00:02:06.480 --> 00:02:08.854
on the fly in order to
determine its shadow.

00:02:08.854 --> 00:02:10.520
This does let you do
really cool things,

00:02:10.520 --> 00:02:12.320
like have your
UIImageView include

00:02:12.320 --> 00:02:14.210
an image with transparency.

00:02:14.210 --> 00:02:16.150
IOS will accurately
draw the shadow

00:02:16.150 --> 00:02:18.330
based on the opaque
parts of this image.

00:02:18.330 --> 00:02:19.460
Pretty neat, huh?

00:02:19.460 --> 00:02:22.450
But this process does
require some work.

00:02:22.450 --> 00:02:25.130
And if your view
is, say, a square,

00:02:25.130 --> 00:02:27.740
all this calculation
is really unnecessary.

00:02:27.740 --> 00:02:29.490
Yeah, you know, iOS,
I could have told you

00:02:29.490 --> 00:02:30.930
that my view is a square.

00:02:30.930 --> 00:02:32.800
In fact, I think I will.

00:02:32.800 --> 00:02:35.140
You see, you can explicitly
define your shadow's shape

00:02:35.140 --> 00:02:37.020
by using a Bezier path.

00:02:37.020 --> 00:02:39.360
To do this, first create
a CGPath ref to represent

00:02:39.360 --> 00:02:42.240
your shadow, and you can do this
using any Bezier path drawing

00:02:42.240 --> 00:02:45.500
code, but probably drawing
a rectangle is a good start.

00:02:45.500 --> 00:02:48.580
Then set your path reference
as the shadowPath property

00:02:48.580 --> 00:02:49.964
of your CALayer.

00:02:49.964 --> 00:02:51.880
All your other code can
be the same as before.

00:02:51.880 --> 00:02:54.260
You've just short-circuited
the very expensive step

00:02:54.260 --> 00:02:57.496
of having iOS calculate
the shape of your shadow.

00:02:57.496 --> 00:02:58.870
Incidentally, this
also means you

00:02:58.870 --> 00:03:01.492
can create a shadow that's not
the same shape as your view.

00:03:01.492 --> 00:03:02.950
Why would you ever
want to do this?

00:03:02.950 --> 00:03:05.235
Well, you probably never
actually want to do this.

00:03:05.235 --> 00:03:07.740
This is weird, but there
are some more practical

00:03:07.740 --> 00:03:08.892
applications.

00:03:08.892 --> 00:03:10.350
For instance, adding
a curve shadow

00:03:10.350 --> 00:03:13.052
underneath a square image
gives it that curved paper look

00:03:13.052 --> 00:03:15.510
without your having to actually
warp anything in your view.

00:03:15.510 --> 00:03:17.710
And you can go with
convex here or concave,

00:03:17.710 --> 00:03:19.512
and they both look kind of nice.

00:03:19.512 --> 00:03:21.470
If you had an oval shadow
underneath your view,

00:03:21.470 --> 00:03:22.950
you can give it
a, hey, my object

00:03:22.950 --> 00:03:24.860
is standing up in 3D
space over a floor

00:03:24.860 --> 00:03:27.139
kind of look, which is cool.

00:03:27.139 --> 00:03:29.430
And if you have a complicated
shape that would normally

00:03:29.430 --> 00:03:33.400
use a complicated shadow-- like,
say, this postage stamp image--

00:03:33.400 --> 00:03:36.330
you can give it a simple shadow
instead, like this rectangle,

00:03:36.330 --> 00:03:38.930
and greatly simplify
your rendering.

00:03:38.930 --> 00:03:41.210
Now, another trick you
could try, with caution,

00:03:41.210 --> 00:03:42.970
is to rasterize your layer.

00:03:42.970 --> 00:03:45.090
Doing so takes a
snapshot of your layer,

00:03:45.090 --> 00:03:47.840
including its shadow, as
a bitmap and caches it.

00:03:47.840 --> 00:03:50.900
Which means iOS won't have to
recalculate at every frame.

00:03:50.900 --> 00:03:54.100
It's really easy to do, just set
your CALayers shouldRasterize

00:03:54.100 --> 00:03:57.500
property to true,
or, yes, depending.

00:03:57.500 --> 00:03:58.850
But you need to be careful here.

00:03:58.850 --> 00:04:01.790
Rasterizing a layer means your
device is doing extra work

00:04:01.790 --> 00:04:03.234
copying your layer to memory.

00:04:03.234 --> 00:04:04.650
It also means
you're using up some

00:04:04.650 --> 00:04:06.380
of that precious,
precious memory.

00:04:06.380 --> 00:04:07.930
And so if the
contents of your layer

00:04:07.930 --> 00:04:09.621
change on a regular
basis, you're

00:04:09.621 --> 00:04:11.620
going to be doing more
work turning more memory,

00:04:11.620 --> 00:04:15.000
and this technique could
backfire on you spectacularly.

00:04:15.000 --> 00:04:16.510
And I will say
that in practice, I

00:04:16.510 --> 00:04:19.029
found that Google tends to not
use this technique as often

00:04:19.029 --> 00:04:20.889
as the Bezier path one.

00:04:20.889 --> 00:04:23.180
But if you have a view where
the content doesn't change

00:04:23.180 --> 00:04:24.846
but the view itself
animates-- maybe you

00:04:24.846 --> 00:04:26.940
have items in a
UICollectionView or you

00:04:26.940 --> 00:04:30.250
think a bouncing logo is a good
idea for some reason-- those

00:04:30.250 --> 00:04:32.350
might be good candidates
for rasterization.

00:04:32.350 --> 00:04:35.022
Just be sure to use the core
animation instrument in Xcode

00:04:35.022 --> 00:04:37.230
to confirm that it's giving
you the performance boost

00:04:37.230 --> 00:04:39.400
that you are expecting.

00:04:39.400 --> 00:04:40.980
But if none of these
techniques work

00:04:40.980 --> 00:04:43.313
for you-- say you've got a
really big view with a really

00:04:43.313 --> 00:04:45.940
big shadow-- well, then it's
time to break out the big guns

00:04:45.940 --> 00:04:48.505
and build your shadow
as a graphic asset.

00:04:48.505 --> 00:04:50.130
See, the theory behind
this is that you

00:04:50.130 --> 00:04:52.490
create an image to
represent your view's shadow

00:04:52.490 --> 00:04:54.497
and 9-slice it for easy scaling.

00:04:54.497 --> 00:04:56.330
Now, if you're not
familiar with the concept

00:04:56.330 --> 00:04:58.120
of 9-slicing an
image, it basically

00:04:58.120 --> 00:05:00.020
means you would take
an image like this one

00:05:00.020 --> 00:05:03.440
and slice it in a tic-tac-toe
pattern, like this.

00:05:03.440 --> 00:05:05.980
Now, if you were to
resize this image,

00:05:05.980 --> 00:05:07.712
those corners would
stay unchanged.

00:05:07.712 --> 00:05:09.170
But you can see
the side sections--

00:05:09.170 --> 00:05:10.390
they stretch vertically.

00:05:10.390 --> 00:05:12.970
These top and bottom sections
will stretch horizontally.

00:05:12.970 --> 00:05:15.290
And the center can stretch
in both dimensions.

00:05:15.290 --> 00:05:17.860
And this allows you to resize
your image in such a way

00:05:17.860 --> 00:05:20.610
that nothing looks too
stretched out or funky.

00:05:20.610 --> 00:05:23.300
People often use this technique
in creating resizable buttons

00:05:23.300 --> 00:05:26.970
or dialog boxes, but it can
also be used for shadows.

00:05:26.970 --> 00:05:27.670
Neat, huh?

00:05:27.670 --> 00:05:29.830
You can see where
we're going with this.

00:05:29.830 --> 00:05:32.030
Now, there are two ways
you can create this image.

00:05:32.030 --> 00:05:35.110
One-- create it using a
tool like Photoshop, Sketch,

00:05:35.110 --> 00:05:37.300
whatever, and
export it as a file

00:05:37.300 --> 00:05:40.150
and then just import it
into your Xcode project.

00:05:40.150 --> 00:05:43.230
The other way is you can create
a UIImage directly in code.

00:05:43.230 --> 00:05:46.120
Turns out this is pretty easy
to do since CGContext lets

00:05:46.120 --> 00:05:47.850
you draw with a drop shadow.

00:05:47.850 --> 00:05:50.660
Either way, you want to end up
with a fairly small image that

00:05:50.660 --> 00:05:52.687
is ready for 9-slicing.

00:05:52.687 --> 00:05:54.270
Now, to 9-slice an
image, you're going

00:05:54.270 --> 00:05:57.210
to call the UIImage resizable
image with cap insets,

00:05:57.210 --> 00:05:59.940
and this basically tells
iOS where your slices are

00:05:59.940 --> 00:06:01.304
for resizing purposes.

00:06:01.304 --> 00:06:03.470
Oh, and do make sure that
you set your resizing mode

00:06:03.470 --> 00:06:06.350
to stretch-- that's important.

00:06:06.350 --> 00:06:08.610
Then you just change the
frame of your shadow image,

00:06:08.610 --> 00:06:11.450
and iOS will resize it
based on these cap insets

00:06:11.450 --> 00:06:14.120
to scale everything in
a nice 9-sliced way.

00:06:14.120 --> 00:06:16.510
Add this view as a
subview to your content,

00:06:16.510 --> 00:06:18.380
iOS scales it, and
ta-da, you've got

00:06:18.380 --> 00:06:20.060
yourself a nice little shadow.

00:06:20.060 --> 00:06:23.130
Now, this technique does
have a couple of drawbacks.

00:06:23.130 --> 00:06:26.010
One-- it really only works on
rectangles, rounded rectangles,

00:06:26.010 --> 00:06:29.540
or other shapes that work well
with 9-scaling, or 9-slicing.

00:06:29.540 --> 00:06:32.310
It doesn't work so well with
stars or irregular shapes.

00:06:32.310 --> 00:06:34.520
Two-- you have now complicated
your view hierarchy

00:06:34.520 --> 00:06:36.400
because you've added a
new subview everywhere

00:06:36.400 --> 00:06:38.399
to represent your shadow,
and that can sometimes

00:06:38.399 --> 00:06:39.570
get a little messy.

00:06:39.570 --> 00:06:42.080
And three-- you've either
added more process to your app

00:06:42.080 --> 00:06:44.480
if you're generating your
shadow using graphics tool,

00:06:44.480 --> 00:06:45.990
or more code to
your app if you're

00:06:45.990 --> 00:06:48.239
drawing your shadow in code
which means there are more

00:06:48.239 --> 00:06:50.520
places where things
can go wrong.

00:06:50.520 --> 00:06:53.620
But if you have a lot of large
views with large shadows,

00:06:53.620 --> 00:06:55.700
and you're smart about
reusing this code,

00:06:55.700 --> 00:06:57.160
it's probably worth
the trade-off.

00:06:57.160 --> 00:06:58.710
At least for us, we think it is.

00:06:58.710 --> 00:07:00.410
If you look at the
Google app on iOS

00:07:00.410 --> 00:07:03.400
and look at either the Google
Now cards or our recent pages

00:07:03.400 --> 00:07:06.100
list, these are all examples
of views that have shadows

00:07:06.100 --> 00:07:08.110
supplied using images.

00:07:08.110 --> 00:07:10.705
So these are just a handful of
tricks we use to draw shadows.

00:07:10.705 --> 00:07:11.580
Do you have your own?

00:07:11.580 --> 00:07:13.496
Feel free to share them
in the comments below,

00:07:13.496 --> 00:07:14.660
and I'll read them.

00:07:14.660 --> 00:07:15.900
Thanks again for watching.

00:07:15.900 --> 00:07:17.180
So did you find this useful?

00:07:17.180 --> 00:07:19.140
If so, click here
to see more videos

00:07:19.140 --> 00:07:22.180
from "Route 85," our show
for you iOS developers.

00:07:22.180 --> 00:07:25.070
And until next time, dear
viewers, who knows what evil

00:07:25.070 --> 00:07:26.590
lurks in the hearts of men.

00:07:26.590 --> 00:07:30.080
The-- actually these days, it's
probably the incognito mode

00:07:30.080 --> 00:07:30.820
guy.

00:07:30.820 --> 00:07:32.610
He's seen some stuff
you wouldn't believe.

00:07:32.610 --> 00:07:34.720
It's a good thing you
can't talk, buddy.

00:07:34.720 --> 00:07:36.790
All right, I'll
see you all later.

00:07:36.790 --> 00:07:38.340
[MUSIC PLAYING]

