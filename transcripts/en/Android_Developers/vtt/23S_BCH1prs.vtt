WEBVTT
Kind: captions
Language: en

00:00:00.519 --> 00:00:02.810
DAN GALPIN: We're actually
deviating from our schedule.

00:00:02.810 --> 00:00:04.851
You were going to be
hearing from Tim Murray, who

00:00:04.851 --> 00:00:06.900
was going to give an
amazing talk on in-depth

00:00:06.900 --> 00:00:08.052
of how to use systrace.

00:00:08.052 --> 00:00:09.635
But before you hear
that, you're going

00:00:09.635 --> 00:00:12.320
to hear from me, who's
going to give a much less

00:00:12.320 --> 00:00:15.210
exciting and technical talk
about new Android features

00:00:15.210 --> 00:00:17.210
that are important for
games, or at least that's

00:00:17.210 --> 00:00:19.730
what it says in the schedule.

00:00:19.730 --> 00:00:24.010
That's actually going to
be covered by this talk,

00:00:24.010 --> 00:00:26.880
but you know, the truth
is what I realized is,

00:00:26.880 --> 00:00:30.250
as I was coming up with
this talk, that most of you

00:00:30.250 --> 00:00:33.820
are not all that interested
in new Android features.

00:00:33.820 --> 00:00:37.420
Because basically you're
interested in targeting

00:00:37.420 --> 00:00:39.940
90% of the devices out there,
and the new Android features

00:00:39.940 --> 00:00:43.090
are going to be on a fairly
small amount of them.

00:00:43.090 --> 00:00:45.880
So what I really should do is
come back to you in like a year

00:00:45.880 --> 00:00:49.185
and be like, OK, here are
the new Android features.

00:00:49.185 --> 00:00:51.310
And as soon as I can actually
find my mouse pointer

00:00:51.310 --> 00:00:52.643
on one of these screens-- there.

00:00:52.643 --> 00:00:53.370
It's there.

00:00:53.370 --> 00:00:54.110
It's there.

00:00:54.110 --> 00:00:54.610
It's there.

00:00:54.610 --> 00:00:55.460
It's there.

00:00:57.990 --> 00:01:00.380
That's incredible.

00:01:00.380 --> 00:01:04.820
Somewhere it thinks
this monitor is hiding.

00:01:04.820 --> 00:01:06.756
Gotta love it.

00:01:06.756 --> 00:01:08.210
All right, there we are.

00:01:08.210 --> 00:01:08.810
OK, good.

00:01:08.810 --> 00:01:10.059
That's where I thought it was.

00:01:10.059 --> 00:01:13.619
All right, so instead of
actually talking about this,

00:01:13.619 --> 00:01:15.160
what I'm actually
going to talk about

00:01:15.160 --> 00:01:16.700
is migrating your
established game

00:01:16.700 --> 00:01:20.480
to target Android O and beyond,
and why is this actually

00:01:20.480 --> 00:01:21.212
relevant to you.

00:01:21.212 --> 00:01:23.420
Well, I don't know how many
people actually saw this,

00:01:23.420 --> 00:01:26.750
but back about
six months ago, we

00:01:26.750 --> 00:01:31.530
announced that all apps
and games on Google Play

00:01:31.530 --> 00:01:36.260
will have to target the latest
SDK version of about a year ago

00:01:36.260 --> 00:01:40.640
in order to be able to
continue updating on Play,

00:01:40.640 --> 00:01:45.010
and all new titles
have to actually target

00:01:45.010 --> 00:01:49.640
SDK 26 or higher as of August if
they want to be on Play at all.

00:01:49.640 --> 00:01:52.569
And you'll notice if you
upload something today,

00:01:52.569 --> 00:01:54.860
you'll actually get a warning
that looks like this that

00:01:54.860 --> 00:01:56.700
says exactly what I put here.

00:01:56.700 --> 00:01:58.860
So you don't have to read it.

00:01:58.860 --> 00:02:02.630
So the real question is,
what does this actually mean?

00:02:02.630 --> 00:02:06.060
OK, first of all, let's go
over the real basics of what

00:02:06.060 --> 00:02:08.330
SDK versions are,
and that SDK version

00:02:08.330 --> 00:02:11.090
is the lowest version your
app is going to support,

00:02:11.090 --> 00:02:13.280
and you usually tie
this into this grid

00:02:13.280 --> 00:02:17.840
of what the latest device's
platform distribution is like.

00:02:17.840 --> 00:02:20.990
The compile SDK is literally
the headers and libraries

00:02:20.990 --> 00:02:24.147
that the app links against,
and the target SDK version

00:02:24.147 --> 00:02:25.730
is this really
important one, and this

00:02:25.730 --> 00:02:27.110
is the platform's
way of ensuring

00:02:27.110 --> 00:02:28.490
backwards compatibility.

00:02:28.490 --> 00:02:30.740
And this really
says to the world,

00:02:30.740 --> 00:02:35.800
I have tested my game on
this platform release.

00:02:35.800 --> 00:02:38.420
And what happens
is the system only

00:02:38.420 --> 00:02:40.820
applies certain kinds
of behavior changes

00:02:40.820 --> 00:02:43.770
to target these
specific SDK versions.

00:02:43.770 --> 00:02:47.540
And so technically,
your compile SDK

00:02:47.540 --> 00:02:51.050
needs to be at least as great
as your target SDK and minsdk,

00:02:51.050 --> 00:02:52.820
but usually, obviously,
you're actually

00:02:52.820 --> 00:02:55.640
thinking about wanting
to target a very

00:02:55.640 --> 00:02:57.287
large swath of the ecosystem.

00:02:57.287 --> 00:02:59.120
So you're actually going
to make the compile

00:02:59.120 --> 00:03:02.690
SDK equal to the target
SDK version, which

00:03:02.690 --> 00:03:05.270
is going to be much greater
than the minimum SDK version.

00:03:05.270 --> 00:03:08.560
All right, that was
probably confusing.

00:03:08.560 --> 00:03:10.800
And it impacts a
whole bunch of things.

00:03:10.800 --> 00:03:14.630
If you haven't gone
beyond, let's say, M,

00:03:14.630 --> 00:03:16.880
you have to deal with changes
in runtime permissions--

00:03:16.880 --> 00:03:19.610
so AlarmManager,
manifest-declared

00:03:19.610 --> 00:03:21.590
BroadcastReceivers, and
background services.

00:03:21.590 --> 00:03:23.900
And you might be saying,
OK, well, look, I'm

00:03:23.900 --> 00:03:25.250
using one of these.

00:03:25.250 --> 00:03:27.560
I don't care about
this stuff at all.

00:03:27.560 --> 00:03:30.050
They're just going to handle
all that for me, right?

00:03:30.050 --> 00:03:30.860
I mean, how is this relevant?

00:03:30.860 --> 00:03:32.220
You're talking about
hand-writing APIs

00:03:32.220 --> 00:03:33.470
to a bunch of game developers.

00:03:33.470 --> 00:03:35.660
Well, first of all,
there's a possibility

00:03:35.660 --> 00:03:40.690
that you might have something
else beyond that in your app.

00:03:40.690 --> 00:03:45.650
And these things might not
be compatible with the latest

00:03:45.650 --> 00:03:47.120
version of Android.

00:03:47.120 --> 00:03:49.784
And so you have to look
at all of these plugins,

00:03:49.784 --> 00:03:51.950
and what they do, and how
they are impacting things.

00:03:51.950 --> 00:03:53.866
And of course, it's very
possible we will also

00:03:53.866 --> 00:03:56.480
have to update the version
of the platform for one

00:03:56.480 --> 00:04:00.750
of those two big things,
which can be a lot of work.

00:04:00.750 --> 00:04:02.960
So let's talk a little
about runtime permissions.

00:04:02.960 --> 00:04:04.880
If you're still targeting L,
which hopefully most of you

00:04:04.880 --> 00:04:07.005
aren't, this is something
you'll have to deal with.

00:04:07.005 --> 00:04:08.380
And this is actually
really good.

00:04:08.380 --> 00:04:10.754
I think Runtime Version is
one of the best things we ever

00:04:10.754 --> 00:04:13.400
did because it allows you to
ask for sensitive permissions

00:04:13.400 --> 00:04:15.152
in context.

00:04:15.152 --> 00:04:16.610
And not all
permissions are runtime

00:04:16.610 --> 00:04:20.510
ones, just this really simple
and easy-to-remember list.

00:04:20.510 --> 00:04:25.190
But the good news is that that's
not the way the user sees it.

00:04:25.190 --> 00:04:27.110
Users actually
see it like this--

00:04:27.110 --> 00:04:29.510
so calender, phone,
camera, sensors, contacts.

00:04:29.510 --> 00:04:33.500
None of you guys ever need
any of this stuff, right?

00:04:33.500 --> 00:04:36.210
And of course, just because your
game isn't yet targeting M--

00:04:36.210 --> 00:04:38.174
admittedly this is
not a game, but it's

00:04:38.174 --> 00:04:39.840
an example of something
that doesn't yet

00:04:39.840 --> 00:04:43.140
target M. The user can
still go on these devices,

00:04:43.140 --> 00:04:45.350
and they can shut
all that stuff off.

00:04:45.350 --> 00:04:47.870
So it's still good to actually
understand how this works,

00:04:47.870 --> 00:04:49.435
because--

00:04:49.435 --> 00:04:51.560
and you might think, all
right, well, this is easy.

00:04:51.560 --> 00:04:53.660
What I'm going to do is just
prompt all of these things

00:04:53.660 --> 00:04:54.980
right up front, right
when my game starts.

00:04:54.980 --> 00:04:56.750
I'll have, like, five
permissions that I'm

00:04:56.750 --> 00:04:58.320
going to go ask for it.

00:04:58.320 --> 00:05:00.770
And this is a really good
way to make someone never

00:05:00.770 --> 00:05:02.200
run your game again.

00:05:02.200 --> 00:05:04.700
They're like, why does it want
to have access to my contacts

00:05:04.700 --> 00:05:05.600
right now?

00:05:05.600 --> 00:05:06.980
That makes no sense.

00:05:06.980 --> 00:05:08.570
That's really scary.

00:05:08.570 --> 00:05:10.770
Go away.

00:05:10.770 --> 00:05:13.940
So if it only needs the camera
permission when it's actually

00:05:13.940 --> 00:05:15.830
doing some cool
stuff with AR mode,

00:05:15.830 --> 00:05:18.820
then ask for the camera
permission then, OK.

00:05:18.820 --> 00:05:20.460
It's really, really important.

00:05:20.460 --> 00:05:22.085
I know there's some
work involved here,

00:05:22.085 --> 00:05:24.054
but it's so important
when someone getting

00:05:24.054 --> 00:05:26.470
the first impression of your
game, the first thing you see

00:05:26.470 --> 00:05:28.100
is, like, I want to
know all about you

00:05:28.100 --> 00:05:30.719
and everything you do.

00:05:30.719 --> 00:05:33.260
So another thing with that that
is going to change is alarms.

00:05:33.260 --> 00:05:35.010
And alarms are actually
my favorite APIs,

00:05:35.010 --> 00:05:37.315
because it's just hilarious.

00:05:37.315 --> 00:05:39.189
Now they take two
different forms.

00:05:39.189 --> 00:05:40.730
They have literal
alarms, and we have

00:05:40.730 --> 00:05:42.870
schedulers for background work.

00:05:42.870 --> 00:05:45.380
And this was
originally really how

00:05:45.380 --> 00:05:47.080
you did background
work on Android

00:05:47.080 --> 00:05:48.080
in early versions of it.

00:05:48.080 --> 00:05:50.496
You would schedule an alarm,
or you would wake up your app

00:05:50.496 --> 00:05:51.920
in the future.

00:05:51.920 --> 00:05:54.124
And what we decided was
that was a bad thing,

00:05:54.124 --> 00:05:56.540
because a lot of apps were all
waking up at the same time,

00:05:56.540 --> 00:05:58.317
or even waking up
at various times,

00:05:58.317 --> 00:06:00.650
and it wasn't allowing us to
prioritize system resources

00:06:00.650 --> 00:06:01.149
well.

00:06:01.149 --> 00:06:04.400
So back in KitKat we decided,
OK, we're going to make it

00:06:04.400 --> 00:06:06.810
so the alarms, by
default, are not exact

00:06:06.810 --> 00:06:08.310
unless they're
explicitly requested.

00:06:08.310 --> 00:06:10.730
And this is all stuff that
only happens if your target SDK

00:06:10.730 --> 00:06:12.510
version changes.

00:06:12.510 --> 00:06:15.980
So we've added this
thing called, well, set

00:06:15.980 --> 00:06:18.116
means that it will
happen around the time

00:06:18.116 --> 00:06:19.740
that you said it
would happen, and then

00:06:19.740 --> 00:06:21.870
we have set exact,
which means it's really

00:06:21.870 --> 00:06:23.850
going to happen at that
time that you really

00:06:23.850 --> 00:06:25.650
said it was going to happen.

00:06:25.650 --> 00:06:28.200
So this is how APIs evolve.

00:06:28.200 --> 00:06:30.130
And the thing is
that this is actually

00:06:30.130 --> 00:06:31.380
code from the Support Library.

00:06:31.380 --> 00:06:32.839
So if you're using
Support Library,

00:06:32.839 --> 00:06:34.004
you have to care about this.

00:06:34.004 --> 00:06:34.800
You call set exact.

00:06:34.800 --> 00:06:36.090
On older versions, you call set.

00:06:36.090 --> 00:06:37.673
On newer versions,
you call set exact,

00:06:37.673 --> 00:06:40.720
and it works the same way.

00:06:40.720 --> 00:06:45.960
Now, the alarm manager
then had more changes

00:06:45.960 --> 00:06:49.260
when we went to Doze,
which had to happen

00:06:49.260 --> 00:06:51.800
in Android M, along with
runtime permissions.

00:06:51.800 --> 00:06:53.640
And we realized,
oh, well, now we've

00:06:53.640 --> 00:06:56.190
got this problem that the
device could be asleep,

00:06:56.190 --> 00:06:59.160
and we're only allowing apps
to run during these maintenance

00:06:59.160 --> 00:07:00.630
windows during that time.

00:07:00.630 --> 00:07:02.760
So we said, well, set
exact isn't good enough,

00:07:02.760 --> 00:07:03.960
because set exact
still isn't going

00:07:03.960 --> 00:07:05.668
to fire during these
maintenance windows,

00:07:05.668 --> 00:07:08.670
and we now added set exact
and allow while idle.

00:07:08.670 --> 00:07:11.855
Just to be really explicit,
we like long function names.

00:07:11.855 --> 00:07:15.000
It's very self-documenting,
and these actually

00:07:15.000 --> 00:07:16.800
can wake the device from Doze.

00:07:16.800 --> 00:07:19.170
And again, here's what
the compatibility story

00:07:19.170 --> 00:07:20.320
looks like here.

00:07:20.320 --> 00:07:22.770
And once again, there
we are, and it actually

00:07:22.770 --> 00:07:25.380
just calls into the previous
function we just showed you

00:07:25.380 --> 00:07:27.000
if you're on older versions.

00:07:27.000 --> 00:07:30.424
So very, very, very,
very simple, and yes,

00:07:30.424 --> 00:07:32.340
this allows you to fire
in the middle of Doze.

00:07:32.340 --> 00:07:33.450
You might not want to
do this, because it's

00:07:33.450 --> 00:07:35.491
pretty bad for battery
life, but it does give you

00:07:35.491 --> 00:07:36.630
a way of doing it.

00:07:36.630 --> 00:07:38.790
So after all of
this, if you're going

00:07:38.790 --> 00:07:40.790
to be running a bunch of
work in the background,

00:07:40.790 --> 00:07:42.480
you probably don't
use alarms at all.

00:07:42.480 --> 00:07:45.690
Actually, consider using
like something like--

00:07:45.690 --> 00:07:49.460
well, actually, yeah, probably
Firebase Job Dispatcher

00:07:49.460 --> 00:07:51.960
at this point, although we've
got some news coming tomorrow.

00:07:51.960 --> 00:07:53.220
So stay tuned.

00:07:56.280 --> 00:07:58.050
So BroadcastReceivers
also changed,

00:07:58.050 --> 00:07:59.790
and these have been
used by the platform

00:07:59.790 --> 00:08:02.040
to know if my app is responsive
to system-wide events.

00:08:02.040 --> 00:08:03.720
And what a lot of
apps used to do

00:08:03.720 --> 00:08:05.680
was they used to hang
around, and you'd say,

00:08:05.680 --> 00:08:07.200
oh, I want to wait
for Wi-Fi so I

00:08:07.200 --> 00:08:09.408
can download a whole bunch
of stuff in the background

00:08:09.408 --> 00:08:14.166
and not actually impact the
data of the user all that much.

00:08:14.166 --> 00:08:16.665
Which is good because users,
when they see an app using tons

00:08:16.665 --> 00:08:18.850
of data, they un-install it.

00:08:18.850 --> 00:08:24.630
So we have like 10 apps all fire
at once as soon as the device

00:08:24.630 --> 00:08:26.310
got on Wi-Fi.

00:08:26.310 --> 00:08:28.770
You plug the device in, and
then the device would heat up,

00:08:28.770 --> 00:08:31.647
and it's a really bad
user experience, honestly.

00:08:31.647 --> 00:08:33.480
And whatever they're
doing in the foreground

00:08:33.480 --> 00:08:35.010
gets completely trashed.

00:08:35.010 --> 00:08:36.618
So we decided this
is a bad thing.

00:08:36.618 --> 00:08:38.909
So we said, all right, this
is one of these things that

00:08:38.909 --> 00:08:42.120
gave developers great
power, and with great power

00:08:42.120 --> 00:08:43.246
comes great responsibility.

00:08:43.246 --> 00:08:45.453
And in response to the way
these endpoints were used,

00:08:45.453 --> 00:08:46.890
we took all the power away.

00:08:46.890 --> 00:08:49.560
So you can't actually
launch the app anymore

00:08:49.560 --> 00:08:51.030
when network changes happen.

00:08:51.030 --> 00:08:54.660
However, we did actually,
at least once you target O.

00:08:54.660 --> 00:08:58.220
Now, the good news is, first of
all, some of these broadcasts

00:08:58.220 --> 00:09:00.470
other than network actually
still work because there's

00:09:00.470 --> 00:09:01.770
simply no other way to do it.

00:09:01.770 --> 00:09:04.352
So if locale changes--

00:09:04.352 --> 00:09:06.060
well, a bunch of people
are like, really?

00:09:06.060 --> 00:09:07.893
There's a broadcast for
when locale changes?

00:09:07.893 --> 00:09:08.940
That's cool.

00:09:08.940 --> 00:09:12.120
But yes, when locale
changes or accessories

00:09:12.120 --> 00:09:13.690
are attached-- a
lot of these things

00:09:13.690 --> 00:09:16.106
are just the kind of thing
that doesn't happen very often.

00:09:16.106 --> 00:09:18.070
Boot completed,
you can still use,

00:09:18.070 --> 00:09:20.200
so if you need to have
alarms or the things

00:09:20.200 --> 00:09:22.533
that you have to register
during that, that still works.

00:09:22.533 --> 00:09:24.850
But for the most part,
these don't work anymore.

00:09:24.850 --> 00:09:26.475
So for network
broadcasts, however, you

00:09:26.475 --> 00:09:28.860
can use JobScheduler,
Firebase JobDispatcher,

00:09:28.860 --> 00:09:31.720
or some other things, and that
allows you to actually say,

00:09:31.720 --> 00:09:34.469
hey, I want to make sure that
my job gets run when I actually

00:09:34.469 --> 00:09:35.010
have network.

00:09:35.010 --> 00:09:35.551
This is cool.

00:09:35.551 --> 00:09:37.920
You can be downloading new
stuff in the background.

00:09:37.920 --> 00:09:39.670
This is what hopefully
all of your SDKs

00:09:39.670 --> 00:09:41.775
are using that are
doing things like ads.

00:09:41.775 --> 00:09:43.680
If they're not
using this, they're

00:09:43.680 --> 00:09:46.410
not going to work really
well when you go and target

00:09:46.410 --> 00:09:47.590
Android O.

00:09:47.590 --> 00:09:48.480
And this is cool.

00:09:48.480 --> 00:09:51.180
You can actually set
all sorts of information

00:09:51.180 --> 00:09:53.110
about the network type,
for example, here.

00:09:53.110 --> 00:09:54.610
So you can actually
say, hey, I want

00:09:54.610 --> 00:09:56.460
to only have this
running when I actually

00:09:56.460 --> 00:09:57.790
have network, which is cool.

00:09:57.790 --> 00:10:00.360
So it can actually let
you know that there

00:10:00.360 --> 00:10:04.290
is a network available, and more
importantly, it can also say,

00:10:04.290 --> 00:10:07.160
I only want to run in
unmetered networks, which

00:10:07.160 --> 00:10:08.160
is kind of a cool thing.

00:10:08.160 --> 00:10:09.800
So you can say, hey--

00:10:09.800 --> 00:10:12.660
and you can even do
cool stuff, like, I

00:10:12.660 --> 00:10:14.426
want to run on
unmetered networks,

00:10:14.426 --> 00:10:16.800
but I want to have a watchdog
that hangs around and says,

00:10:16.800 --> 00:10:18.670
if my job hasn't
run within 24 hours,

00:10:18.670 --> 00:10:20.420
let's run it anyways--
that kind of thing.

00:10:20.420 --> 00:10:24.100
So you have a lot
of options here.

00:10:24.100 --> 00:10:25.740
And if you do have
to use something

00:10:25.740 --> 00:10:28.156
for backwards compatibility
for an old version of Android,

00:10:28.156 --> 00:10:30.342
like have some
connectivity change thing,

00:10:30.342 --> 00:10:31.800
one of things that's
really cool is

00:10:31.800 --> 00:10:33.216
you can actually
leave it disabled

00:10:33.216 --> 00:10:35.040
by default, which is cool.

00:10:35.040 --> 00:10:36.540
I didn't even know
you could do this

00:10:36.540 --> 00:10:37.380
in earlier versions of Android.

00:10:37.380 --> 00:10:39.330
I'm like, oh, that's awesome,
but it's been always there.

00:10:39.330 --> 00:10:41.020
And you can actually
then turn it back on.

00:10:41.020 --> 00:10:42.300
So you can say,
OK, well, now I'm

00:10:42.300 --> 00:10:43.770
on this ancient
version of Android.

00:10:43.770 --> 00:10:44.770
Let's turn this back on.

00:10:44.770 --> 00:10:49.230
That will allow me to still
be launched on an old version

00:10:49.230 --> 00:10:51.897
and still use the old APIs.

00:10:51.897 --> 00:10:53.730
Another thing that
people want to know about

00:10:53.730 --> 00:10:56.036
is when their package gets
uninstalled and re-installed

00:10:56.036 --> 00:10:56.910
with the new version.

00:10:56.910 --> 00:10:58.470
That's actually kind
of a useful thing.

00:10:58.470 --> 00:10:59.928
And a lot of them
would go and say,

00:10:59.928 --> 00:11:02.640
let's look to see all of
the packages on the system.

00:11:02.640 --> 00:11:05.220
And when that happens,
and that's really bad--

00:11:05.220 --> 00:11:07.690
a lot of apps were
actually doing that.

00:11:07.690 --> 00:11:09.580
And so you can no
longer do that,

00:11:09.580 --> 00:11:12.070
but you can actually use
MY_PACKAGE_REPLACED to find out

00:11:12.070 --> 00:11:16.012
when your own specific package
gets replaced, which is good.

00:11:16.012 --> 00:11:17.470
There's also actually
an API if you

00:11:17.470 --> 00:11:20.890
do want to find out when other
packages are being replaced

00:11:20.890 --> 00:11:21.700
on a regular basis.

00:11:21.700 --> 00:11:23.770
You can actually pull for
them with a sequence number.

00:11:23.770 --> 00:11:25.260
So you can say, oh,
has anything happened

00:11:25.260 --> 00:11:26.343
since the last time I run?

00:11:26.343 --> 00:11:28.840
So if you have other
apps that you're

00:11:28.840 --> 00:11:31.767
trying to check to see that are
companions to the one you have

00:11:31.767 --> 00:11:33.850
or just wanted to check
to see how that's going on

00:11:33.850 --> 00:11:35.860
in the system, you can still
do that without actually

00:11:35.860 --> 00:11:37.609
having to have your
app wake up every time

00:11:37.609 --> 00:11:38.960
another app is installed.

00:11:38.960 --> 00:11:40.130
It's much better.

00:11:40.130 --> 00:11:42.820
OK, so let's talk about
background limits as well.

00:11:42.820 --> 00:11:47.155
This is also something that
has changed with Android O.

00:11:47.155 --> 00:11:51.430
Probably the biggest
change is that when

00:11:51.430 --> 00:11:53.050
you're in the
background, you can't

00:11:53.050 --> 00:11:54.175
do a whole bunch of things.

00:11:54.175 --> 00:11:55.630
You can't launch
services anymore.

00:11:55.630 --> 00:11:57.629
And this is a big change
for a lot of these SDKs

00:11:57.629 --> 00:12:00.407
that just kind of assumed,
oh, I could always do this.

00:12:00.407 --> 00:12:02.740
And so what does it really
mean to be in the foreground?

00:12:02.740 --> 00:12:04.060
Well, it means your
app is visible.

00:12:04.060 --> 00:12:05.230
It means it has a
foreground service.

00:12:05.230 --> 00:12:06.646
Foreground service
is that service

00:12:06.646 --> 00:12:10.270
that actually has a notification
associated with it all

00:12:10.270 --> 00:12:12.922
the time, so the user knows
that it's always running.

00:12:12.922 --> 00:12:14.380
Sometimes it may
kind of annoyingly

00:12:14.380 --> 00:12:17.301
show up in this thing that's
running in your notification

00:12:17.301 --> 00:12:17.800
list.

00:12:17.800 --> 00:12:20.060
But it's really important
that it's visible to the user.

00:12:20.060 --> 00:12:22.393
Your app is essentially in
the foreground at that point,

00:12:22.393 --> 00:12:24.740
or if it's bound to an app
that's in the foreground.

00:12:24.740 --> 00:12:26.740
Also, if you're doing one
of these things, which

00:12:26.740 --> 00:12:28.573
I don't think any game
developers are using,

00:12:28.573 --> 00:12:31.000
except maybe a
wallpaper service,

00:12:31.000 --> 00:12:33.670
you're also in the foreground.

00:12:33.670 --> 00:12:36.040
And you're in the background
when you're not visible

00:12:36.040 --> 00:12:37.840
and when you're not running
a foreground service,

00:12:37.840 --> 00:12:39.423
and if you're running
one of these job

00:12:39.423 --> 00:12:41.620
things or BroadcasterReceiver.

00:12:41.620 --> 00:12:45.250
And if you're running on
O plus, starting a service

00:12:45.250 --> 00:12:47.680
in the background throws
an IllegalStateException

00:12:47.680 --> 00:12:48.972
if you're targeting O.

00:12:48.972 --> 00:12:50.180
So this is a pretty big deal.

00:12:50.180 --> 00:12:53.470
This actually affected
some of my code.

00:12:53.470 --> 00:12:55.256
And this really
changed the way Android

00:12:55.256 --> 00:12:57.880
dealt with running stuff in the
background in a really good way

00:12:57.880 --> 00:13:00.046
for users, and a way that
makes things slightly more

00:13:00.046 --> 00:13:03.280
challenging for developers.

00:13:03.280 --> 00:13:05.494
So you can still
start services that

00:13:05.494 --> 00:13:06.910
are running in the
background when

00:13:06.910 --> 00:13:08.780
your game is in the foreground.

00:13:08.780 --> 00:13:11.440
And those will continue
to run for about a minute

00:13:11.440 --> 00:13:13.959
after your game is exited.

00:13:13.959 --> 00:13:16.000
And it doesn't mean that
your code stops running.

00:13:16.000 --> 00:13:19.780
Remember, Android--
these are hints

00:13:19.780 --> 00:13:22.687
to the OS for how to schedule
things more than anything else.

00:13:22.687 --> 00:13:24.520
So it doesn't mean that
your app immediately

00:13:24.520 --> 00:13:26.103
gets closed after
it gets backgrounded

00:13:26.103 --> 00:13:27.190
and that your code stops.

00:13:27.190 --> 00:13:29.230
What it does mean,
however, on Android O,

00:13:29.230 --> 00:13:32.260
is that you'll actually
lose your wakelocks,

00:13:32.260 --> 00:13:34.480
and this happens for everyone.

00:13:34.480 --> 00:13:37.210
So once your app no longer has
a running service on Android O,

00:13:37.210 --> 00:13:40.420
your wakelocks will
automatically be cut off.

00:13:40.420 --> 00:13:43.030
Or if you don't have an
activity, or a service,

00:13:43.030 --> 00:13:46.676
or a BroadcastReceiver, or
a content provider running,

00:13:46.676 --> 00:13:47.800
your wakelocks get cut off.

00:13:47.800 --> 00:13:48.970
And that's actually
a good thing.

00:13:48.970 --> 00:13:49.990
We had a lot of
apps that were just

00:13:49.990 --> 00:13:51.950
hanging around all the time,
and keeping wakelocks open,

00:13:51.950 --> 00:13:53.158
and wasting a lot of battery.

00:13:53.158 --> 00:13:55.960
And so this is actually
something that affects you on O

00:13:55.960 --> 00:13:58.584
regardless of whether or not
you're actually targeting O.

00:13:58.584 --> 00:14:01.000
But on earlier versions you
can keep a service running all

00:14:01.000 --> 00:14:04.441
the time, and on O you can't.

00:14:04.441 --> 00:14:06.940
And there are still a few cases
where you can actually still

00:14:06.940 --> 00:14:08.570
launch background services.

00:14:08.570 --> 00:14:11.500
So you can actually do this
when your app is responding

00:14:11.500 --> 00:14:14.589
to a notification that the
system still thinks of your app

00:14:14.589 --> 00:14:15.505
as being foregrounded.

00:14:15.505 --> 00:14:17.020
So that's kind of good.

00:14:17.020 --> 00:14:20.470
High-priority Firebase
Cloud message also

00:14:20.470 --> 00:14:22.450
is considered being
in the foreground,

00:14:22.450 --> 00:14:23.999
and that also wakes
you up from Doze.

00:14:23.999 --> 00:14:25.540
So don't use it very
often unless you

00:14:25.540 --> 00:14:29.250
have to, like really
important, timely things.

00:14:29.250 --> 00:14:31.540
And SMS and MMS delivery,
which hopefully no one here

00:14:31.540 --> 00:14:34.150
is going to be that provider.

00:14:34.150 --> 00:14:36.420
And then we also have
behavior changes.

00:14:36.420 --> 00:14:38.152
And you might not have
noticed these yet,

00:14:38.152 --> 00:14:39.610
depending on how
many of your users

00:14:39.610 --> 00:14:42.670
are actually running Oreo.

00:14:42.670 --> 00:14:46.630
But we have a lot of limits
on background location, which

00:14:46.630 --> 00:14:47.516
are good.

00:14:47.516 --> 00:14:48.640
This actually is important.

00:14:48.640 --> 00:14:50.140
A lot of apps are just
hanging around all the time,

00:14:50.140 --> 00:14:51.460
like, where are my users?

00:14:51.460 --> 00:14:54.010
And so you can't
do that anymore.

00:14:54.010 --> 00:14:56.800
You'll get much less, even
if you request tons and tons

00:14:56.800 --> 00:14:57.640
of location updates.

00:14:57.640 --> 00:14:59.348
If your app is running
in the background,

00:14:59.348 --> 00:15:01.000
it does not have a
foreground service,

00:15:01.000 --> 00:15:03.862
then you only get a couple of
results an hour by comparison.

00:15:03.862 --> 00:15:05.320
It's actually a
lot more than that,

00:15:05.320 --> 00:15:07.870
but it's a lot less than it was.

00:15:07.870 --> 00:15:10.339
Even Wi-Fi scans
are actually cached.

00:15:10.339 --> 00:15:12.130
So if you keep scanning
Wi-Fi over and over

00:15:12.130 --> 00:15:13.546
in the background,
it's only going

00:15:13.546 --> 00:15:16.180
to give you a few
updates every hour

00:15:16.180 --> 00:15:18.520
by comparison to what
it was doing before.

00:15:18.520 --> 00:15:20.199
So you use things
like Geofencing.

00:15:20.199 --> 00:15:21.740
For example, if you
need to know when

00:15:21.740 --> 00:15:23.920
the user reaches a
specific location,

00:15:23.920 --> 00:15:25.090
you can do things like use--

00:15:25.090 --> 00:15:26.214
you only have 100 of those.

00:15:26.214 --> 00:15:29.776
You can use things like dynamic
geofencing with regions.

00:15:29.776 --> 00:15:31.150
These are all
really cool things.

00:15:31.150 --> 00:15:32.920
You want to do cool
stuff with your game.

00:15:32.920 --> 00:15:35.800
If you want to have
hardware beacons in places,

00:15:35.800 --> 00:15:36.890
that's pretty cool, too.

00:15:36.890 --> 00:15:38.820
That's another way of
using the nearby APIs.

00:15:38.820 --> 00:15:41.780
There's a lot of ways
to get around that.

00:15:41.780 --> 00:15:44.389
You use batching if you want
to track people's location.

00:15:44.389 --> 00:15:46.180
Hopefully a lot of
games aren't doing this,

00:15:46.180 --> 00:15:48.221
but location-based games
are getting more popular

00:15:48.221 --> 00:15:49.460
all the time.

00:15:49.460 --> 00:15:52.640
So you can just check
this max wait time here,

00:15:52.640 --> 00:15:57.280
and that will allow you to
batch location updates for you.

00:15:57.280 --> 00:15:59.210
And then you can also
use passive locations.

00:15:59.210 --> 00:16:00.730
This fastest interval
here actually

00:16:00.730 --> 00:16:03.236
will mean that I'm not
requesting getting updated

00:16:03.236 --> 00:16:04.360
all the time with location.

00:16:04.360 --> 00:16:06.590
But if someone else
is using Google Maps

00:16:06.590 --> 00:16:11.652
or using activity tracking
somehow for sports or something

00:16:11.652 --> 00:16:13.610
like that, that I still
get those updates, too.

00:16:13.610 --> 00:16:16.580
So it's kind of a cool
way of doing that.

00:16:16.580 --> 00:16:18.080
So another thing I
wanted to mention

00:16:18.080 --> 00:16:19.455
is that Android
keeps introducing

00:16:19.455 --> 00:16:21.620
battery optimizations
that are based

00:16:21.620 --> 00:16:23.820
on deferring and restricting
background tasks.

00:16:23.820 --> 00:16:27.150
So again, I talked a
little bit about Doze.

00:16:27.150 --> 00:16:29.390
This limits app activity
to maintenance windows,

00:16:29.390 --> 00:16:31.730
when things are
unplugged or stationary--

00:16:31.730 --> 00:16:33.630
that kind of thing.

00:16:33.630 --> 00:16:35.750
And then we actually
added Doze on the Go.

00:16:35.750 --> 00:16:37.791
I guess that's not really
what we're calling it--

00:16:37.791 --> 00:16:38.390
Doze Light.

00:16:38.390 --> 00:16:40.160
But it's for when--

00:16:40.160 --> 00:16:43.820
it still limits most things
to maintenance windows

00:16:43.820 --> 00:16:46.530
when the device is unplugged
and the screen is off, like when

00:16:46.530 --> 00:16:47.740
the user's in the pockets.

00:16:47.740 --> 00:16:49.490
It does allow for a
few things that aren't

00:16:49.490 --> 00:16:51.700
allowed during regular Doze.

00:16:51.700 --> 00:16:54.980
And then we also did this
thing called App Standby.

00:16:54.980 --> 00:16:58.550
So if someone doesn't
use an app very often,

00:16:58.550 --> 00:17:02.532
it starts slowly limiting
what the app can do.

00:17:02.532 --> 00:17:04.240
And that's really good
because a lot of--

00:17:04.240 --> 00:17:06.656
I install apps that I only use
when I'm in certain places,

00:17:06.656 --> 00:17:10.217
and this allows me to make sure
that they're not constantly

00:17:10.217 --> 00:17:11.050
draining my battery.

00:17:11.050 --> 00:17:12.089
But for a game
developer, it doesn't

00:17:12.089 --> 00:17:14.060
mean that if someone is not
using your app all the time,

00:17:14.060 --> 00:17:15.810
and you're trying to
do all sorts of stuff

00:17:15.810 --> 00:17:19.480
in the background, they'll
stop seeing these things.

00:17:19.480 --> 00:17:20.730
And then stay tuned.

00:17:20.730 --> 00:17:22.430
We have a lot more
stuff coming in P

00:17:22.430 --> 00:17:25.040
that we'll be talking
about tomorrow.

00:17:25.040 --> 00:17:27.004
So how do you test these things?

00:17:27.004 --> 00:17:28.170
It's pretty straightforward.

00:17:28.170 --> 00:17:30.706
You can test Doze this
way using an adb command.

00:17:30.706 --> 00:17:33.080
And this allows you to see
how your app actually performs

00:17:33.080 --> 00:17:34.880
when it's running in Doze mode.

00:17:34.880 --> 00:17:36.590
You can test App
Standby by doing this.

00:17:36.590 --> 00:17:39.170
You have to unplug the
battery, but you can do that

00:17:39.170 --> 00:17:40.910
with this nice
command that makes

00:17:40.910 --> 00:17:43.250
the system think the
battery is unplugged

00:17:43.250 --> 00:17:45.506
before you start doing that.

00:17:45.506 --> 00:17:46.880
OK, and then I
did mention that I

00:17:46.880 --> 00:17:48.504
was going to talk
about modern features

00:17:48.504 --> 00:17:50.159
you could take advantage of.

00:17:50.159 --> 00:17:51.950
One of things you have
to take advantage of

00:17:51.950 --> 00:17:53.130
is notification channels.

00:17:53.130 --> 00:17:55.130
Because if you don't have
notification channels,

00:17:55.130 --> 00:17:57.590
and you're targeting O, your
notifications don't appear.

00:17:57.590 --> 00:17:58.589
They just don't show up.

00:17:58.589 --> 00:18:00.086
So you really want
to turn this on.

00:18:00.086 --> 00:18:01.460
And this is actually
really cool.

00:18:01.460 --> 00:18:05.690
Because if you actually
give the user good channels

00:18:05.690 --> 00:18:08.155
and explain this is a really
high-priority notification,

00:18:08.155 --> 00:18:09.530
and these are
things you might be

00:18:09.530 --> 00:18:11.510
interested in these
categories, it

00:18:11.510 --> 00:18:13.940
prevents them from actually
disabling all notifications

00:18:13.940 --> 00:18:14.845
to your game.

00:18:14.845 --> 00:18:16.220
And so this is
actually something

00:18:16.220 --> 00:18:20.321
I definitely recommend really
thinking about and trying

00:18:20.321 --> 00:18:22.070
to make a user scenario
where you're like,

00:18:22.070 --> 00:18:24.920
OK, well, actually I really
do want to know when there's

00:18:24.920 --> 00:18:26.930
a cool free offer
here, but I don't

00:18:26.930 --> 00:18:30.710
want to be notified every single
time that one of my friends

00:18:30.710 --> 00:18:31.449
comes on--

00:18:31.449 --> 00:18:32.240
that sort of thing.

00:18:32.240 --> 00:18:35.259
And so you can really make the
user make good choices that

00:18:35.259 --> 00:18:36.050
say, you know what?

00:18:36.050 --> 00:18:38.670
I don't want to disable all
the notifications for your app,

00:18:38.670 --> 00:18:40.010
because the app means
something to me,

00:18:40.010 --> 00:18:41.593
but I can actually
use these channels.

00:18:41.593 --> 00:18:44.360
So I recommend really
thinking about this.

00:18:44.360 --> 00:18:46.410
It actually has helped us, too.

00:18:46.410 --> 00:18:48.364
In devices that have
notification channels,

00:18:48.364 --> 00:18:50.780
we actually see less people
turning off all notifications.

00:18:50.780 --> 00:18:53.310
So it does actually work.

00:18:53.310 --> 00:18:55.060
One of things you also
have to think about

00:18:55.060 --> 00:18:57.710
is if your app is
using immersive mode.

00:18:57.710 --> 00:19:01.315
Or some games actually do
use this translucent status

00:19:01.315 --> 00:19:02.440
bar, which is kind of cool.

00:19:02.440 --> 00:19:04.460
I wish more did.

00:19:04.460 --> 00:19:06.380
You have to think about
this display cutout,

00:19:06.380 --> 00:19:09.800
because a lot of apps and games
assume that the status bar was

00:19:09.800 --> 00:19:14.480
like 28 density-independent
pixels tall, and turns out

00:19:14.480 --> 00:19:17.270
it's not true if you
had these cutouts.

00:19:17.270 --> 00:19:20.840
And you can also simulate a
cutout using the P developer

00:19:20.840 --> 00:19:21.960
preview image.

00:19:21.960 --> 00:19:23.930
So that's useful.

00:19:23.930 --> 00:19:25.260
Probably not a lot of things.

00:19:25.260 --> 00:19:26.960
Make sure-- probably the biggest
thing for game developers,

00:19:26.960 --> 00:19:29.180
actually, that some
games aren't still doing,

00:19:29.180 --> 00:19:32.060
is dealing well with long
aspect ratio screens.

00:19:32.060 --> 00:19:34.130
This has gotten a
lot better recently.

00:19:34.130 --> 00:19:36.380
I can't imagine why.

00:19:36.380 --> 00:19:38.240
But I guess long
aspect ratio screens

00:19:38.240 --> 00:19:40.650
are getting important--
are getting more common.

00:19:40.650 --> 00:19:42.650
But there are still games
that will occasionally

00:19:42.650 --> 00:19:45.050
have content that's cut
off, because a lot of people

00:19:45.050 --> 00:19:47.730
really think of
things in terms of--

00:19:47.730 --> 00:19:49.790
think of the layout
of their HUD in terms

00:19:49.790 --> 00:19:52.730
of having a fairly limited
set of aspect ratios.

00:19:52.730 --> 00:19:55.160
So this is something it's
definitely worth testing for,

00:19:55.160 --> 00:19:58.760
and these are going to be
even more common this year.

00:19:58.760 --> 00:20:00.526
You can letterbox
things if you want.

00:20:00.526 --> 00:20:02.400
Another thing I haven't
seen any games doing,

00:20:02.400 --> 00:20:04.191
but I'm sort of waiting
for it, is actually

00:20:04.191 --> 00:20:05.606
supporting picture in picture.

00:20:05.606 --> 00:20:06.980
Obviously people
use it for chat,

00:20:06.980 --> 00:20:08.780
but I'm sort of waiting
for some-- especially--

00:20:08.780 --> 00:20:10.820
I mean, honestly I want
Pokémon Go to do this,

00:20:10.820 --> 00:20:12.410
because it would be kind of
awesome to have my little

00:20:12.410 --> 00:20:14.210
Pokémon character running around
in the corner while I'm doing

00:20:14.210 --> 00:20:15.090
other things.

00:20:15.090 --> 00:20:17.900
So I put it there.

00:20:17.900 --> 00:20:19.957
Also, we do have Vulkan.

00:20:19.957 --> 00:20:21.290
Think of taking advantage of it.

00:20:21.290 --> 00:20:23.630
These are the new changes
that are in Vulkan 1.1, which

00:20:23.630 --> 00:20:26.920
is actually part of Android P,
which were finally implementing

00:20:26.920 --> 00:20:28.720
multi-view, which I'm
really excited about.

00:20:28.720 --> 00:20:33.230
For VR we also have
all the memory models

00:20:33.230 --> 00:20:36.470
that are necessary to have much
better compatibility with HLSL;

00:20:36.470 --> 00:20:39.170
shaders, which is cool if
people who are sharing those;

00:20:39.170 --> 00:20:41.840
as well as some cool
things for video processing

00:20:41.840 --> 00:20:44.090
and for open CLC compatibility.

00:20:44.090 --> 00:20:46.220
So again, there's a lot
of cool stuff there.

00:20:46.220 --> 00:20:47.801
So consider using Vulkan.

00:20:47.801 --> 00:20:49.550
Another thing that I
really, really like--

00:20:49.550 --> 00:20:51.341
and this isn't part of
P. This was actually

00:20:51.341 --> 00:20:55.010
added in Android O, is AAaudio,
which is our new audio API.

00:20:55.010 --> 00:20:57.440
It's really
straightforward to use--

00:20:57.440 --> 00:21:00.022
really simple by
comparison to using OpenSL.

00:21:00.022 --> 00:21:01.730
And the best part
about it is we actually

00:21:01.730 --> 00:21:05.630
have this library called Oboe
that wraps AAudio and wraps

00:21:05.630 --> 00:21:09.410
OpenSL, turns and uses one API.

00:21:09.410 --> 00:21:11.410
With AAudio, you
also can get access

00:21:11.410 --> 00:21:14.680
to something called
sharing mode exclusive,

00:21:14.680 --> 00:21:17.930
which actually gives you super,
super, super low latency.

00:21:17.930 --> 00:21:20.990
So it's really for
hardcore rhythm games.

00:21:20.990 --> 00:21:24.110
It gets you down to
sub-10-millisecond output

00:21:24.110 --> 00:21:26.230
on devices that support it--

00:21:26.230 --> 00:21:27.850
at least our devices.

00:21:27.850 --> 00:21:29.005
And it's pretty cool.

00:21:29.005 --> 00:21:30.880
I definitely recommend
taking a look at Oboe.

00:21:30.880 --> 00:21:33.451
Here's a project you can go to.

00:21:33.451 --> 00:21:34.380
Oh, yeah.

00:21:34.380 --> 00:21:39.640
There is one more thing
that we did in Android P

00:21:39.640 --> 00:21:42.820
that I wanted to make
sure that you knew about,

00:21:42.820 --> 00:21:46.360
and that is that we actually
got rid of the ability

00:21:46.360 --> 00:21:49.390
to call most private APIs.

00:21:49.390 --> 00:21:52.540
Now, if you've been following
us, we actually, in the NDK,

00:21:52.540 --> 00:21:57.730
we stopped people from calling
most private APIs in Android O.

00:21:57.730 --> 00:21:59.770
In Android P, we
actually stopped people

00:21:59.770 --> 00:22:01.960
from calling most
of the APIs that

00:22:01.960 --> 00:22:04.750
are running in the native
sort of Java level.

00:22:04.750 --> 00:22:10.660
And there actually are quite
a few that are still allowed.

00:22:10.660 --> 00:22:12.994
We're in the process of
trying to go through the SDK,

00:22:12.994 --> 00:22:14.410
make sure that all
the things that

00:22:14.410 --> 00:22:18.460
are really useful and
relevant and not scary

00:22:18.460 --> 00:22:23.350
are turned into proper APIs,
and so that we're trying really

00:22:23.350 --> 00:22:25.601
hard not to actually
hurt people's

00:22:25.601 --> 00:22:26.600
functionality with this.

00:22:26.600 --> 00:22:29.560
But what I want everyone
to do is test your game

00:22:29.560 --> 00:22:30.850
on the Developer Preview 2.

00:22:30.850 --> 00:22:33.100
Because if your game
doesn't work on that,

00:22:33.100 --> 00:22:35.860
it might be because one of
these APIs is no longer allowed.

00:22:35.860 --> 00:22:38.149
And it could be one
of the libraries

00:22:38.149 --> 00:22:40.690
that you're bundling, in one of
the plug-ins you're bundling,

00:22:40.690 --> 00:22:42.670
one of the SDKs that
you're bundling along

00:22:42.670 --> 00:22:43.753
with it that's causing it.

00:22:43.753 --> 00:22:46.060
So I highly, highly
recommend testing on DP2.

00:22:46.060 --> 00:22:47.606
With DP1, we would
throw up a toast

00:22:47.606 --> 00:22:48.730
when these things happened.

00:22:48.730 --> 00:22:52.000
With DP2 it will get logged
in logcat and the Apple Crash.

00:22:52.000 --> 00:22:54.040
And what will happen
in the released version

00:22:54.040 --> 00:22:56.070
is probably
something in between.

00:22:56.070 --> 00:22:58.420
So I'm not guaranteeing--
just because something crashes

00:22:58.420 --> 00:23:00.194
in DP2 doesn't mean
it's going to crash.

00:23:00.194 --> 00:23:02.360
So if you have a problem
with it, and you're saying,

00:23:02.360 --> 00:23:05.440
hey, this middleware doesn't
work, report it to us.

00:23:05.440 --> 00:23:06.340
File an issue.

00:23:06.340 --> 00:23:08.920
And we might not
actually make that crash

00:23:08.920 --> 00:23:10.040
in the final version.

00:23:10.040 --> 00:23:11.650
But if no one
files these issues,

00:23:11.650 --> 00:23:13.170
it's likely to go out as it is.

00:23:13.170 --> 00:23:14.920
So this is just something
you should know.

00:23:14.920 --> 00:23:16.570
Please, please,
please, please, please

00:23:16.570 --> 00:23:18.070
test it against
Developer Preview 2.

00:23:18.070 --> 00:23:20.720
It will be coming
out very shortly.

00:23:20.720 --> 00:23:22.780
You can also use this
strict mode VM policy

00:23:22.780 --> 00:23:26.462
to actually detect whether your
app is doing any non-SDK usage.

00:23:26.462 --> 00:23:27.170
So this is great.

00:23:27.170 --> 00:23:28.545
Even if you don't
have the source

00:23:28.545 --> 00:23:31.340
code for a bunch of the
plug-ins, you can run this.

00:23:31.340 --> 00:23:34.510
This will work on
Android P Preview 2,

00:23:34.510 --> 00:23:37.130
and this will allow you
to actually see, OK,

00:23:37.130 --> 00:23:39.610
does my game actually do this
even though I don't really

00:23:39.610 --> 00:23:41.440
realize it is?

00:23:41.440 --> 00:23:43.660
We also have this
site we've put up

00:23:43.660 --> 00:23:47.500
on DAC to help you
transform your app or game

00:23:47.500 --> 00:23:50.460
to the new target SDK rules.

00:23:50.460 --> 00:23:53.314
It's a pretty good
thing to check out.

00:23:53.314 --> 00:23:54.480
We've spent some time on it.

00:23:54.480 --> 00:23:56.563
So hopefully most of the
information I shared here

00:23:56.563 --> 00:23:57.460
is review for you.

00:23:57.460 --> 00:23:58.834
Hopefully most of
you are already

00:23:58.834 --> 00:24:01.180
targeting relatively
recent SDK versions,

00:24:01.180 --> 00:24:03.570
but if you haven't, this
should hopefully help.

00:24:03.570 --> 00:24:07.870
And that's it for me.

00:24:07.870 --> 00:24:12.940
So I hope this was informative,
and thank you very much.

00:24:12.940 --> 00:24:15.119
And I can--

00:24:15.119 --> 00:24:17.160
I've got a couple of
minutes for questions, yeah.

00:24:17.160 --> 00:24:18.368
If we could get the mic over.

00:24:18.368 --> 00:24:19.849
Yes?

00:24:19.849 --> 00:24:22.390
AUDIENCE: One thing to add for
the target SDK version is also

00:24:22.390 --> 00:24:23.944
the 64-bit in 2019.

00:24:23.944 --> 00:24:24.610
DAN GALPIN: Yes.

00:24:24.610 --> 00:24:26.220
So I'm actually
going to have-- yeah,

00:24:26.220 --> 00:24:27.970
so this is another
really important thing.

00:24:27.970 --> 00:24:29.020
I'm going to have
my colleague, Dan,

00:24:29.020 --> 00:24:31.090
who's going to come later,
who's from the NDK team,

00:24:31.090 --> 00:24:33.215
is going to talk about
this, is that this year it's

00:24:33.215 --> 00:24:39.830
targeting O. Next year it will
be targeting P and targeting--

00:24:39.830 --> 00:24:41.640
every app that has
a native component

00:24:41.640 --> 00:24:45.560
will have to have a
64-bit binary shipped

00:24:45.560 --> 00:24:48.610
alongside any other
binaries you want to ship.

00:24:48.610 --> 00:24:51.850
So if you want to just ship
64-bit, you can do that,

00:24:51.850 --> 00:24:53.950
but it's something that's
been needed to happen.

00:24:53.950 --> 00:24:56.225
A lot of-- the future is 64-bit.

00:24:56.225 --> 00:24:57.850
AUDIENCE: And then
the other question I

00:24:57.850 --> 00:24:59.790
had was about
notification channels.

00:24:59.790 --> 00:25:02.590
Are we going to see a
way to actually prompt

00:25:02.590 --> 00:25:05.650
those categories within the
actual notification system

00:25:05.650 --> 00:25:08.590
OS, within the app itself,
as opposed to directing users

00:25:08.590 --> 00:25:10.870
to Settings to customize those?

00:25:10.870 --> 00:25:13.830
DAN GALPIN: That's
a good question.

00:25:13.830 --> 00:25:15.030
I don't think so.

00:25:15.030 --> 00:25:16.160
Not yet.

00:25:16.160 --> 00:25:18.726
But I know that
they're going to talk

00:25:18.726 --> 00:25:20.100
a little bit about
notifications,

00:25:20.100 --> 00:25:21.390
how they're revamping this--

00:25:21.390 --> 00:25:23.190
the notification channel stuff--

00:25:23.190 --> 00:25:23.790
tomorrow.

00:25:23.790 --> 00:25:27.360
So I definitely recommend
watching a little bit

00:25:27.360 --> 00:25:32.027
on that in the What's
New in Android talk.

00:25:32.027 --> 00:25:32.610
Anything else?

00:25:32.610 --> 00:25:34.060
Yes.

00:25:34.060 --> 00:25:35.778
I can repeat the question, too.

00:25:35.778 --> 00:25:39.349
AUDIENCE: Any chance we
can get a link to that?

00:25:39.349 --> 00:25:40.140
DAN GALPIN: A link?

00:25:40.140 --> 00:25:42.610
AUDIENCE: To the slideshow?

00:25:42.610 --> 00:25:44.080
DAN GALPIN: Oh, sorry.

00:25:44.080 --> 00:25:45.910
Actually, this one
got recorded, too.

00:25:45.910 --> 00:25:49.300
So we'll have that up later--

00:25:49.300 --> 00:25:50.890
soon, hopefully.

00:25:50.890 --> 00:25:52.990
But also, I'm giving a
version of this talk which

00:25:52.990 --> 00:25:56.801
is slightly less focused on game
developers at I/O on Thursday.

00:25:56.801 --> 00:25:58.300
So there'll be a
livestream to that,

00:25:58.300 --> 00:25:59.883
and that will actually
probably get up

00:25:59.883 --> 00:26:01.570
even faster than this one.

00:26:01.570 --> 00:26:03.220
It'll have a few other--

00:26:03.220 --> 00:26:04.950
it'll have a bunch
of corny jokes,

00:26:04.950 --> 00:26:08.170
and it will have
a few other things

00:26:08.170 --> 00:26:09.706
that I can't talk about now.

00:26:09.706 --> 00:26:11.080
So it might be
worth checking out

00:26:11.080 --> 00:26:14.137
as well, the I/O presentation.

