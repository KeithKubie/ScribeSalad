WEBVTT
Kind: captions
Language: en

00:00:07.000 --> 00:00:09.790
DAVE BACON: A quantum computer
is a new type of computer

00:00:09.790 --> 00:00:12.640
that stores and acts on
information in its quantum

00:00:12.640 --> 00:00:13.570
form.

00:00:13.570 --> 00:00:16.739
Today, we are entering
into an exciting era

00:00:16.739 --> 00:00:18.280
where quantum
computers are beginning

00:00:18.280 --> 00:00:21.190
to be large enough
and performant enough

00:00:21.190 --> 00:00:24.040
to execute tasks in
less than a second that

00:00:24.040 --> 00:00:26.920
would take years to execute
on a normal computer.

00:00:26.920 --> 00:00:29.630
Here is Google's own
Bristlecone chip.

00:00:29.630 --> 00:00:33.280
This is a quantum computer made
of superconducting circuits

00:00:33.280 --> 00:00:35.440
with 72 quantum bits.

00:00:35.440 --> 00:00:38.650
Google's researchers are using
this chip to attempt to achieve

00:00:38.650 --> 00:00:42.070
a task that cannot be solved
in years on a supercomputer.

00:00:42.070 --> 00:00:42.880
Hi.

00:00:42.880 --> 00:00:44.777
I'm Dave Bacon from Google.

00:00:44.777 --> 00:00:47.110
I run the team that builds
software for Google's quantum

00:00:47.110 --> 00:00:48.220
computers.

00:00:48.220 --> 00:00:50.590
And today, I'd like to tell
you a little bit about how

00:00:50.590 --> 00:00:53.470
we program Google's
quantum computers.

00:00:53.470 --> 00:00:57.230
We do this using an open
source framework called Cirq.

00:00:57.230 --> 00:01:01.090
A quantum computer stores its
information using quantum bits,

00:01:01.090 --> 00:01:03.380
or qubits.

00:01:03.380 --> 00:01:05.129
The information in
these qubits is then

00:01:05.129 --> 00:01:09.100
maneuvered around using the
laws of quantum physics.

00:01:09.100 --> 00:01:11.440
To describe an algorithm
on a quantum computer,

00:01:11.440 --> 00:01:15.190
you would use what is called
the quantum circuit model.

00:01:15.190 --> 00:01:17.020
The quantum circuit
model is essentially

00:01:17.020 --> 00:01:20.980
a diagram describing how to
perform a quantum computation.

00:01:20.980 --> 00:01:23.870
Here is an example
of a quantum circuit.

00:01:23.870 --> 00:01:26.330
You read this diagram
like a sheet of music

00:01:26.330 --> 00:01:28.460
from left to right.

00:01:28.460 --> 00:01:30.140
Each of the qubits
in a quantum computer

00:01:30.140 --> 00:01:32.540
corresponds to a
single horizontal wire

00:01:32.540 --> 00:01:34.329
in the quantum circuit.

00:01:34.329 --> 00:01:35.870
Here we see that
this quantum circuit

00:01:35.870 --> 00:01:39.090
operates on four qubits.

00:01:39.090 --> 00:01:41.080
The boxes in the
diagram correspond

00:01:41.080 --> 00:01:45.250
to quantum gates that are
applied to one or more qubits,

00:01:45.250 --> 00:01:49.160
depending on how many wires
the box is connected to.

00:01:49.160 --> 00:01:51.370
Here's a single qubit gate.

00:01:51.370 --> 00:01:54.250
And here is a two qubit gate.

00:01:54.250 --> 00:01:57.250
Quantum gates are instructions
to send control signals

00:01:57.250 --> 00:02:00.280
to the quantum computer to
perform a certain quantum

00:02:00.280 --> 00:02:03.540
action on the qubits.

00:02:03.540 --> 00:02:06.090
Finally, one has
instructions for reading out

00:02:06.090 --> 00:02:07.920
the quantum information.

00:02:07.920 --> 00:02:11.280
This corresponds to quantum
gates that perform measurements

00:02:11.280 --> 00:02:14.340
and turn quantum bits
into classical bits.

00:02:14.340 --> 00:02:16.200
If we have a quantum
circuit diagram,

00:02:16.200 --> 00:02:18.810
we can use this diagram
to send microwave pulses

00:02:18.810 --> 00:02:21.480
and instructions to our
quantum computing hardware

00:02:21.480 --> 00:02:23.190
to execute the quantum
gates, and then

00:02:23.190 --> 00:02:24.720
read out the result
of the circuit,

00:02:24.720 --> 00:02:26.100
like reading a sheet of music.

00:02:26.100 --> 00:02:29.550
As we sweep from left to
right, we play the given gates

00:02:29.550 --> 00:02:30.570
as they appear.

00:02:30.570 --> 00:02:32.910
The quantum circuit
diagram is cool looking.

00:02:32.910 --> 00:02:36.330
But of course, if we had to
draw a diagram to do this,

00:02:36.330 --> 00:02:39.360
and we are writing really
long quantum programs,

00:02:39.360 --> 00:02:43.679
this would quickly become
very challenging to do.

00:02:43.679 --> 00:02:45.095
To solve this
problem, researchers

00:02:45.095 --> 00:02:47.690
have developed frameworks,
or programming languages,

00:02:47.690 --> 00:02:49.820
to write more traditional
looking programs that

00:02:49.820 --> 00:02:52.400
represent the quantum circuit.

00:02:52.400 --> 00:02:55.460
An open source framework that
we use at Google for this effort

00:02:55.460 --> 00:02:57.450
is called Cirq.

00:02:57.450 --> 00:03:01.300
Welcome to the [? Cirqus. ?]
Let's write a simple circuit.

00:03:01.300 --> 00:03:03.780
Cirq is a Python framework.

00:03:03.780 --> 00:03:06.690
This means you can use
all the goodness of Python

00:03:06.690 --> 00:03:10.060
in helping to write
your quantum program.

00:03:10.060 --> 00:03:13.810
The central object in
Cirq is a circuit object.

00:03:13.810 --> 00:03:18.140
Here we show creating
a circuit object.

00:03:18.140 --> 00:03:21.320
Another key set of
objects are qubits.

00:03:21.320 --> 00:03:25.610
Let's define two qubits
with simple names.

00:03:25.610 --> 00:03:29.600
Now we can perform some
quantum gates on these qubits.

00:03:29.600 --> 00:03:33.110
Let's apply a single qubit
Hadamard gate denoted by H

00:03:33.110 --> 00:03:36.470
to one of the qubits, followed
by a two qubit controlled

00:03:36.470 --> 00:03:40.270
NOT, or CNOT gate,
between the qubits.

00:03:40.270 --> 00:03:44.510
Finally, let's measure
the quantum bits.

00:03:44.510 --> 00:03:46.280
What circuit have we produced?

00:03:46.280 --> 00:03:49.780
Simply use Print
to see the circuit.

00:03:49.780 --> 00:03:51.990
No, it's not 1993.

00:03:51.990 --> 00:03:54.720
But ASCII diagrams are useful
for seeing the quantum circuit

00:03:54.720 --> 00:03:59.150
that you've built. Here we
see the H gate for a Hadamard,

00:03:59.150 --> 00:04:02.570
followed by the controlled NOT
gate with the ampersand symbol

00:04:02.570 --> 00:04:04.130
and the x symbol.

00:04:04.130 --> 00:04:08.320
And finally, the measurements
represented by M.

00:04:08.320 --> 00:04:11.920
Once we've constructed a quantum
circuit, what do we do with it?

00:04:11.920 --> 00:04:13.660
In Cirq right now,
you can perform

00:04:13.660 --> 00:04:16.209
a simulation of the circuit.

00:04:16.209 --> 00:04:19.050
Here we run the circuit 10
times and see the measurement

00:04:19.050 --> 00:04:20.874
results.

00:04:20.874 --> 00:04:22.540
Measurement results
in quantum computers

00:04:22.540 --> 00:04:25.500
don't always give the
same values of bits.

00:04:25.500 --> 00:04:28.930
One run of the circuit may
result in the output being 0,

00:04:28.930 --> 00:04:31.670
and another in it being 1.

00:04:31.670 --> 00:04:33.800
Here we see that the
measurement results differ

00:04:33.800 --> 00:04:37.150
for each run of the simulation.

00:04:37.150 --> 00:04:40.140
Cirq also contains an interface
for running the quantum circuit

00:04:40.140 --> 00:04:42.540
against actual quantum hardware.

00:04:42.540 --> 00:04:44.970
Now that you've seen a simple
quantum circuit in Cirq,

00:04:44.970 --> 00:04:46.440
you might think, great.

00:04:46.440 --> 00:04:49.325
Now I can write really
large quantum programs.

00:04:49.325 --> 00:04:51.450
For example, it is known
that quantum computers can

00:04:51.450 --> 00:04:54.270
efficiently factor numbers,
something that breaks

00:04:54.270 --> 00:04:57.030
modern public key cryptography.

00:04:57.030 --> 00:04:58.560
That's pretty scary.

00:04:58.560 --> 00:05:00.360
Today's quantum
computers, however,

00:05:00.360 --> 00:05:04.310
are very far from being
able to perform this task.

00:05:04.310 --> 00:05:07.460
This is because essentially,
quantum computers can only

00:05:07.460 --> 00:05:10.730
perform so much quantum
computation before the quantum

00:05:10.730 --> 00:05:12.950
computation falls apart.

00:05:12.950 --> 00:05:15.410
Consider again a
quantum circuit.

00:05:15.410 --> 00:05:17.210
Every gate that you
apply in this circuit

00:05:17.210 --> 00:05:20.720
corresponds to some pretty
complicated electronics,

00:05:20.720 --> 00:05:22.940
shaping and setting of
electromagnetic fields

00:05:22.940 --> 00:05:24.940
to the quantum computer.

00:05:24.940 --> 00:05:27.010
These pulses are
not always perfect,

00:05:27.010 --> 00:05:29.320
and so every single one
of the gates you perform

00:05:29.320 --> 00:05:32.290
has some effective
chance of failing.

00:05:32.290 --> 00:05:33.220
Boom!

00:05:33.220 --> 00:05:35.830
One of our single
qubit gates has failed.

00:05:35.830 --> 00:05:38.950
In addition to not being able
to execute gates exactly,

00:05:38.950 --> 00:05:42.880
quantum computers also have
a problem just doing nothing.

00:05:42.880 --> 00:05:45.760
That is, if you leave quantum
bits around, over time,

00:05:45.760 --> 00:05:49.600
the quantum information stored
in them will decay away.

00:05:49.600 --> 00:05:52.800
We call this
process decoherence.

00:05:52.800 --> 00:05:53.700
Boom!

00:05:53.700 --> 00:05:56.280
While waiting to execute the
next gate, one of our qubits

00:05:56.280 --> 00:05:58.680
has failed due to decoherence.

00:05:58.680 --> 00:06:01.020
Today's quantum computers
don't perform exactly

00:06:01.020 --> 00:06:04.140
as we specify them in the
quantum circuit model.

00:06:04.140 --> 00:06:07.620
We call this the problem of
noise in quantum computers.

00:06:07.620 --> 00:06:10.440
Because of noise, the size
of our quantum computation

00:06:10.440 --> 00:06:13.440
is limited for today's
quantum computers.

00:06:13.440 --> 00:06:16.050
It is limited both in
the number of qubits

00:06:16.050 --> 00:06:20.320
and the number of operations
we can perform on these qubits.

00:06:20.320 --> 00:06:22.690
If quantum computers
are noisy, can we ever

00:06:22.690 --> 00:06:26.530
build a really large
quantum computer?

00:06:26.530 --> 00:06:28.530
The answer to this is yes.

00:06:28.530 --> 00:06:32.460
Using a magic protocol called
quantum error correction.

00:06:32.460 --> 00:06:34.680
We won't focus on
error correction here,

00:06:34.680 --> 00:06:38.790
but it is a procedure for
turning a bunch of noisy qubits

00:06:38.790 --> 00:06:43.440
into a fewer number of
much less noisy qubits.

00:06:43.440 --> 00:06:46.770
Since today's quantum computers
cannot perform arbitrary large

00:06:46.770 --> 00:06:50.500
or long quantum computation,
an important question is,

00:06:50.500 --> 00:06:51.780
what can they do?

00:06:51.780 --> 00:06:56.310
This is the main question of
what people call the NISQ era.

00:06:56.310 --> 00:07:00.390
NISQ stands for Noisy
Intermediate-Scale Quantum.

00:07:00.390 --> 00:07:03.240
And it is used to distinguish
today's quantum computers

00:07:03.240 --> 00:07:06.720
from future error corrected
quantum computers.

00:07:06.720 --> 00:07:08.640
Are there algorithms
of practical value

00:07:08.640 --> 00:07:09.870
in the NISQ era?

00:07:09.870 --> 00:07:13.380
We do not know the
answer to this question.

00:07:13.380 --> 00:07:15.496
On the other hand,
we also know that we

00:07:15.496 --> 00:07:17.370
are starting to build
quantum computers which

00:07:17.370 --> 00:07:20.370
exceed the capabilities
of classical computers,

00:07:20.370 --> 00:07:24.240
the so-called
supremacy frontier.

00:07:24.240 --> 00:07:26.450
Because of this, there
is tremendous excitement

00:07:26.450 --> 00:07:28.130
in quantum computing.

00:07:28.130 --> 00:07:30.260
We are entering
into the unknown,

00:07:30.260 --> 00:07:34.800
an era where there is potential
for important discovery.

00:07:34.800 --> 00:07:40.720
We built Cirq for NISQ computers
and to aid in this discovery.

00:07:40.720 --> 00:07:43.120
Because Cirq is focused
on NISQ computers

00:07:43.120 --> 00:07:45.520
and not on quantum error
corrected computers,

00:07:45.520 --> 00:07:47.080
we made some choices
that we believe

00:07:47.080 --> 00:07:50.500
are important for these
near-term devices.

00:07:50.500 --> 00:07:52.600
As an example,
one choice we made

00:07:52.600 --> 00:07:54.460
is that we believe
that the programmer who

00:07:54.460 --> 00:07:56.770
is coding for NISQ
algorithms needs

00:07:56.770 --> 00:08:00.460
to be very aware of the
idiosyncrasies of the hardware

00:08:00.460 --> 00:08:03.550
upon which the quantum
computation is run.

00:08:03.550 --> 00:08:07.530
Hardware is not
abstracted away in Cirq.

00:08:07.530 --> 00:08:10.950
In Cirq, this is captured
by device objects.

00:08:10.950 --> 00:08:15.377
Here is the device object
for our Bristlecone device.

00:08:15.377 --> 00:08:16.960
Printed out, it gives
a representation

00:08:16.960 --> 00:08:19.600
of the layout of the
qubits on the device.

00:08:19.600 --> 00:08:22.470
We see that it is a
strange grid of qubits.

00:08:22.470 --> 00:08:25.210
The qubits are
represented by pluses.

00:08:25.210 --> 00:08:27.820
The lines between the
qubits represents the fact

00:08:27.820 --> 00:08:32.559
that only adjacent qubits can be
subjected to a two qubit gate.

00:08:32.559 --> 00:08:35.100
For example, we can
perform a two qubit

00:08:35.100 --> 00:08:37.870
gate between these
qubits, but not

00:08:37.870 --> 00:08:42.330
these, which are too far
apart to directly interact.

00:08:42.330 --> 00:08:45.146
Another subtlety of
the Bristlecone device

00:08:45.146 --> 00:08:46.770
is that there are
important constraints

00:08:46.770 --> 00:08:51.510
on when you can simultaneously
perform two qubit gates.

00:08:51.510 --> 00:08:55.320
If you apply a two qubit
gate to two adjacent qubits,

00:08:55.320 --> 00:08:58.800
then you cannot simultaneously
apply a two qubit gate to any

00:08:58.800 --> 00:09:03.100
of the adjacent qubits
of this two qubit gate.

00:09:03.100 --> 00:09:05.620
Because the hardware isn't
abstracted away in Cirq,

00:09:05.620 --> 00:09:07.516
we can use the device
objects directly

00:09:07.516 --> 00:09:08.890
when building our
quantum program

00:09:08.890 --> 00:09:11.540
to enforce these constraints.

00:09:11.540 --> 00:09:15.640
For example, here we try to
perform two two-qubit z gates

00:09:15.640 --> 00:09:18.280
at the same time
on adjacent qubits.

00:09:18.280 --> 00:09:21.280
But because we had passed in the
device object to the circuit,

00:09:21.280 --> 00:09:24.610
it is aware of the
Bristlecone constraint.

00:09:24.610 --> 00:09:26.230
And when we print
out the circuit,

00:09:26.230 --> 00:09:30.010
we see that the circuit has
correctly moved one of the cz's

00:09:30.010 --> 00:09:32.200
to a later time slice
in order to avoid

00:09:32.200 --> 00:09:34.000
violating the constraint.

00:09:34.000 --> 00:09:36.220
Cirq is an open
source project license

00:09:36.220 --> 00:09:38.860
under the Apache 2 license.

00:09:38.860 --> 00:09:41.140
If you want to install the
latest release of Cirq,

00:09:41.140 --> 00:09:43.600
you can simply run
"pip install cirq"

00:09:43.600 --> 00:09:45.700
in most properly
configured environments

00:09:45.700 --> 00:09:47.800
for running Python.

00:09:47.800 --> 00:09:49.780
Cirq is an alpha release.

00:09:49.780 --> 00:09:52.810
That is, it is under
constant and active change.

00:09:52.810 --> 00:09:55.340
We welcome contributions.

00:09:55.340 --> 00:09:58.880
To do this, you can go
to Cirq's GitHub repo,

00:09:58.880 --> 00:10:01.500
and follow the instructions
for contributing.

00:10:01.500 --> 00:10:03.920
The GitHub repo
also contains links

00:10:03.920 --> 00:10:07.230
to further
documentation for Cirq.

00:10:07.230 --> 00:10:10.380
I'm excited by the next few
years of quantum computers.

00:10:10.380 --> 00:10:12.870
Are there NISQ algorithms
that can perform problems

00:10:12.870 --> 00:10:15.030
of practical importance?

00:10:15.030 --> 00:10:16.770
Cirq is a tool we
are using to help

00:10:16.770 --> 00:10:20.420
explore this exciting question.

00:10:20.420 --> 00:10:22.750
We hope that you've enjoyed
this brief introduction

00:10:22.750 --> 00:10:25.450
to programming a NISQ computer.

00:10:25.450 --> 00:10:27.910
For more information about
Google's efforts in quantum

00:10:27.910 --> 00:10:29.890
computing, I encourage
you to check out

00:10:29.890 --> 00:10:32.160
Google's Quantum page.

