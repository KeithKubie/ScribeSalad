WEBVTT
Kind: captions
Language: en

00:00:06.240 --> 00:00:09.012
SPEAKER: I guess unless RJ
does something crazy impulsive

00:00:09.012 --> 00:00:10.470
over the next 20
minutes, this will

00:00:10.470 --> 00:00:12.590
be our last bald
speaker of the day.

00:00:12.590 --> 00:00:14.615
And rounding out the trifecta--

00:00:14.615 --> 00:00:15.820
COLT MCANLIS: Rounding out.

00:00:15.820 --> 00:00:17.218
That's very punny of you.

00:00:17.218 --> 00:00:18.174
Get it?

00:00:18.174 --> 00:00:18.652
Rounding, rounding out?

00:00:18.652 --> 00:00:19.985
SPEAKER: Oh, it's unintentional.

00:00:19.985 --> 00:00:21.810
So yes.

00:00:21.810 --> 00:00:25.070
I'm welcoming Colt McAnlis,
who is going to be showing you

00:00:25.070 --> 00:00:30.280
some mind-bogglingly awesome
tech around textures, which

00:00:30.280 --> 00:00:33.930
I did not think would be as
fascinating is as it was,

00:00:33.930 --> 00:00:36.279
but I learned a
lot in the speech

00:00:36.279 --> 00:00:37.570
like mostly I'm not very smart.

00:00:37.570 --> 00:00:39.861
COLT MCANLIS: You learned
that I get very angry easily.

00:00:39.861 --> 00:00:40.550
SPEAKER: Yes.

00:00:40.550 --> 00:00:43.590
Colt gets angry at bad
texture compression,

00:00:43.590 --> 00:00:45.620
and he might be
getting mad at you

00:00:45.620 --> 00:00:47.620
if you don't stay
and watch this talk.

00:00:47.620 --> 00:00:48.128
COLT MCANLIS: People
are leaving already

00:00:48.128 --> 00:00:48.630
because they realize
this is going to be--

00:00:48.630 --> 00:00:50.680
SPEAKER: Alex, I see you.

00:00:50.680 --> 00:00:53.630
Don't-- you got to take notes.

00:00:53.630 --> 00:00:54.200
All right.

00:00:54.200 --> 00:00:55.490
Well, then I'll
guess we'll just--

00:00:55.490 --> 00:00:55.536
COLT MCANLIS: You
know what, Alex?

00:00:55.536 --> 00:00:57.205
I'm not giving you any
free internet searches.

00:00:57.205 --> 00:00:58.000
SPEAKER: That's it.

00:00:58.000 --> 00:00:59.740
No free internet for you.

00:00:59.740 --> 00:01:00.240
Searches.

00:01:00.240 --> 00:01:02.114
COLT MCANLIS: Is that
guy's name really Alex?

00:01:02.114 --> 00:01:04.970
SPEAKER: Yeah, he's
on the Games Team.

00:01:04.970 --> 00:01:05.500
All right.

00:01:05.500 --> 00:01:08.480
Well, before too many other
people get scared away,

00:01:08.480 --> 00:01:11.481
let's welcome Colt to the stage.

00:01:11.481 --> 00:01:11.980
Thank you.

00:01:11.980 --> 00:01:15.739
[APPLAUSE]

00:01:15.739 --> 00:01:17.030
COLT MCANLIS: Hello, everybody.

00:01:19.680 --> 00:01:22.860
It's getting to the
end of the day, yes?

00:01:22.860 --> 00:01:25.300
Who's excited for beer?

00:01:25.300 --> 00:01:27.800
You know, that's the most energy
we've got out of this crowd

00:01:27.800 --> 00:01:28.460
today.

00:01:28.460 --> 00:01:29.740
Caffeine, swag.

00:01:29.740 --> 00:01:30.240
nothing.

00:01:30.240 --> 00:01:32.300
Beer-- boom!

00:01:32.300 --> 00:01:33.160
All right.

00:01:33.160 --> 00:01:34.890
I will be short and sweet today.

00:01:34.890 --> 00:01:37.990
Hello, I am Colt McAnlis, and
I am a games developer advocate

00:01:37.990 --> 00:01:41.480
at Google, which means while
everyone else is off running,

00:01:41.480 --> 00:01:43.810
creating the next protein
folder or search engine

00:01:43.810 --> 00:01:47.134
or trying to find ways to
cure malaria in the Congo,

00:01:47.134 --> 00:01:49.300
I basically sit around and
play "Bejeweled" all day,

00:01:49.300 --> 00:01:51.130
which is fantastic.

00:01:51.130 --> 00:01:56.860
This is a talk about wrangling
your textures because, well, I

00:01:56.860 --> 00:01:58.540
got angry one day.

00:01:58.540 --> 00:02:02.670
You see, I found that the more
and more games I downloaded,

00:02:02.670 --> 00:02:04.270
the more and more
games did this stuff

00:02:04.270 --> 00:02:06.930
to me, which quite
frankly is insulting.

00:02:06.930 --> 00:02:09.479
You end up downloading a
game, some free game that

00:02:09.479 --> 00:02:12.142
advertises that the download
is about 1.2 megs or 3 megs--

00:02:12.142 --> 00:02:13.725
and then all of a
sudden you hit this,

00:02:13.725 --> 00:02:15.360
and your phone
turns into a brick

00:02:15.360 --> 00:02:18.030
for the next hour and a half
while it downloads something,

00:02:18.030 --> 00:02:18.530
right?

00:02:18.530 --> 00:02:21.270
Of course, for most of you-- who
has had this experience lately?

00:02:21.270 --> 00:02:21.770
Everyone.

00:02:21.770 --> 00:02:22.740
Look around in here.

00:02:22.740 --> 00:02:24.700
No. keep your hands
up, keep your hands up.

00:02:24.700 --> 00:02:27.210
Look around.

00:02:27.210 --> 00:02:29.370
If you're developing
a game that does this,

00:02:29.370 --> 00:02:31.899
these people are upset with you.

00:02:31.899 --> 00:02:33.940
Your intentions are bad,
and you should feel bad.

00:02:36.530 --> 00:02:39.070
#Zoidberg.

00:02:39.070 --> 00:02:42.070
So the question-- So I didn't
understand this, right?

00:02:42.070 --> 00:02:46.040
Most games on the
stores are 2D games.

00:02:46.040 --> 00:02:49.740
I should not have to download
50 megabytes worth of content

00:02:49.740 --> 00:02:52.355
to find some oscillation
frequency for a bird.

00:02:54.890 --> 00:02:57.030
This is wrong.

00:02:57.030 --> 00:03:01.800
So I had to ask the question,
what are you people doing?

00:03:01.800 --> 00:03:02.300
Right?

00:03:02.300 --> 00:03:03.690
I've been in the games
industry for a long time,

00:03:03.690 --> 00:03:06.180
and I do understand that
a large bulk of content

00:03:06.180 --> 00:03:09.260
does come from textures, but
this is a little bit insane.

00:03:09.260 --> 00:03:11.630
So rather than just making
guesses about things,

00:03:11.630 --> 00:03:13.430
I proposed a test.

00:03:13.430 --> 00:03:16.250
And I actually wrote
a very large framework

00:03:16.250 --> 00:03:19.670
to analyze the top
games in Google Play.

00:03:19.670 --> 00:03:22.380
So I actually downloaded
a horde of the top free,

00:03:22.380 --> 00:03:24.890
top paid, and
top-grossing games.

00:03:24.890 --> 00:03:27.790
I ran them through a
large analyzation suite,

00:03:27.790 --> 00:03:29.880
which effectively
opened each one of them,

00:03:29.880 --> 00:03:33.130
de-compiled the assets, and
then did an analysis on them

00:03:33.130 --> 00:03:35.715
to figure out where the
content was actually going.

00:03:35.715 --> 00:03:37.840
Because, again, what the
hell are you people doing?

00:03:37.840 --> 00:03:39.190
Let's figure this out, right?

00:03:39.190 --> 00:03:41.190
This, of course, dumped
out into files and files

00:03:41.190 --> 00:03:43.630
and files of data that I
have scraped on your behalf

00:03:43.630 --> 00:03:47.000
to present today, and
here's what I found.

00:03:47.000 --> 00:03:48.270
No big surprise.

00:03:48.270 --> 00:03:50.900
Across the top free, top
paid, and top-grossing games,

00:03:50.900 --> 00:03:56.230
over 50% of the content
comes from textures.

00:03:56.230 --> 00:03:56.980
Ta-da!

00:03:56.980 --> 00:03:57.750
OK, I'm done.

00:03:57.750 --> 00:04:00.270
We can go.

00:04:00.270 --> 00:04:02.560
Followed up there, number
two is actually code,

00:04:02.560 --> 00:04:04.290
but this isn't a
talk about code.

00:04:04.290 --> 00:04:05.520
That's going to be next time.

00:04:05.520 --> 00:04:07.270
You know what, just
watch my Twitter feed.

00:04:07.270 --> 00:04:08.920
You'll see more about
that in the future.

00:04:08.920 --> 00:04:10.336
Anyhow, the weird
thing about this

00:04:10.336 --> 00:04:14.610
is that top paid had way
more images than free,

00:04:14.610 --> 00:04:16.410
and, of course,
gross is some sort

00:04:16.410 --> 00:04:18.441
of weird mix between those two.

00:04:18.441 --> 00:04:19.899
So we'll get into
that in a second.

00:04:19.899 --> 00:04:23.850
If we sort of drill down and
we take a look at the image

00:04:23.850 --> 00:04:28.350
section by itself, this is what
really started disturbing me.

00:04:28.350 --> 00:04:32.110
Is that if you look at textures
across all of these APKs,

00:04:32.110 --> 00:04:35.784
they're PNG files.

00:04:35.784 --> 00:04:37.450
Please raise your
hand if you understand

00:04:37.450 --> 00:04:39.780
why this is a bad thing.

00:04:39.780 --> 00:04:41.200
Yay!

00:04:41.200 --> 00:04:43.040
Y'all my people.

00:04:43.040 --> 00:04:44.024
This is great.

00:04:44.024 --> 00:04:45.440
I'm speaking to a
crowd of my own.

00:04:45.440 --> 00:04:49.664
This is all PNG data, which
to me is just mind-blowing

00:04:49.664 --> 00:04:51.580
because I don't want to
see a graph like this.

00:04:51.580 --> 00:04:54.920
What I hoped to see when
analyzing the top games

00:04:54.920 --> 00:04:58.510
in Google Play, was a graph
that looked like this.

00:04:58.510 --> 00:05:03.120
That 98% of them were
GPU formatted textures,

00:05:03.120 --> 00:05:06.070
and only some small percentage
that you have to use for icons,

00:05:06.070 --> 00:05:10.620
or some UI element that's in
JDK code, is actually PNG files.

00:05:10.620 --> 00:05:14.680
If your asset allocation
doesn't look like this,

00:05:14.680 --> 00:05:18.440
let's have a little
chat, you and I. You see,

00:05:18.440 --> 00:05:22.860
non-GPU formatted textures
hurt you in two primary ways.

00:05:22.860 --> 00:05:24.700
The first one is load time cost.

00:05:24.700 --> 00:05:26.290
When you have your
assets textured

00:05:26.290 --> 00:05:31.240
compress in PNG or JPEG or GIF
or any of the other formats,

00:05:31.240 --> 00:05:35.019
you have to incur a cost to
load that texture into memory.

00:05:35.019 --> 00:05:37.560
And you have to remember, these
devices that we're running on

00:05:37.560 --> 00:05:40.970
are not powerhouses
of modern computing.

00:05:40.970 --> 00:05:45.220
If anything, they're a nice
focal lens into 10 years ago.

00:05:45.220 --> 00:05:47.990
These are low power chips
that run low frequency code,

00:05:47.990 --> 00:05:50.350
and you're having them run
through tons of deflate

00:05:50.350 --> 00:05:53.780
and JPEG codecs to get your
images into main memory.

00:05:53.780 --> 00:05:55.822
That's not going to result
in a very awesome user

00:05:55.822 --> 00:05:58.363
experience for your user when
they have to wait to load this.

00:05:58.363 --> 00:06:01.170
In fact, how many of you have
profiled how long image-loading

00:06:01.170 --> 00:06:03.130
takes in your code?

00:06:03.130 --> 00:06:05.820
Did it make you sad?

00:06:05.820 --> 00:06:06.740
AUDIENCE: Very.

00:06:06.740 --> 00:06:08.770
COLT MCANLIS: The
room has spoken.

00:06:08.770 --> 00:06:12.030
The second problem here
is GPU residency costs.

00:06:12.030 --> 00:06:15.040
So yes, congratulations,
your artist

00:06:15.040 --> 00:06:17.530
has exported a JPEG texture.

00:06:17.530 --> 00:06:18.410
Woo-hoo!

00:06:18.410 --> 00:06:21.190
That doesn't help you at all
when your game is actually

00:06:21.190 --> 00:06:21.690
running.

00:06:21.690 --> 00:06:23.330
When the texture
is decompressed,

00:06:23.330 --> 00:06:25.980
it's actually uploaded
into memory in full 32 bits

00:06:25.980 --> 00:06:26.889
per pixel.

00:06:26.889 --> 00:06:28.430
And then it gets to
the GPU, and it's

00:06:28.430 --> 00:06:30.906
residing in 32 bits per pixel.

00:06:30.906 --> 00:06:32.780
So all of that compression
that you're doing,

00:06:32.780 --> 00:06:35.420
your pipelines, your chains,
doesn't help you at all

00:06:35.420 --> 00:06:36.650
once the game's into memory.

00:06:36.650 --> 00:06:39.636
And quite frankly, that's
the most important part.

00:06:39.636 --> 00:06:41.010
For those of you
actually writing

00:06:41.010 --> 00:06:43.730
code that runs on a plethora
of devices out there,

00:06:43.730 --> 00:06:47.580
you know the difference
in 100 mbs of RAM

00:06:47.580 --> 00:06:50.090
can actually exclude you
from entering a region

00:06:50.090 --> 00:06:51.874
or marketplace altogether.

00:06:51.874 --> 00:06:53.790
We're talking about not
being able to run code

00:06:53.790 --> 00:06:58.380
on Google Glass because you
have too many textures, right?

00:06:58.380 --> 00:07:00.570
Think about that.

00:07:00.570 --> 00:07:03.175
And I understand
the GPU formats are

00:07:03.175 --> 00:07:05.090
a little daunting
to a lot of people.

00:07:05.090 --> 00:07:07.330
It's this weird sort
of cryptic setup,

00:07:07.330 --> 00:07:09.950
and it's GPU specific
a lot of the times.

00:07:09.950 --> 00:07:12.410
And this is what people normally
think about when you say,

00:07:12.410 --> 00:07:14.200
I want a GPU formatted texture.

00:07:14.200 --> 00:07:17.727
They see ETC and ATC
and PVRTC and DXT1,

00:07:17.727 --> 00:07:19.560
and their brain starts
going, wait a minute,

00:07:19.560 --> 00:07:21.690
I don't know how to
set up my distribution

00:07:21.690 --> 00:07:22.860
to make all that work.

00:07:22.860 --> 00:07:24.576
Listen, it doesn't
have to start there.

00:07:24.576 --> 00:07:25.950
What most people
don't understand

00:07:25.950 --> 00:07:27.920
is that there's
actually very usable,

00:07:27.920 --> 00:07:30.340
low-bit density
formats on the GPU.

00:07:30.340 --> 00:07:32.890
And most of them are
actually 16 bits per pixel.

00:07:32.890 --> 00:07:35.025
So we have our basic
32-bit per pixel.

00:07:35.025 --> 00:07:36.400
Oh and by the way,
you don't have

00:07:36.400 --> 00:07:37.920
to use alpha on everything.

00:07:37.920 --> 00:07:39.470
Just so you guys know that.

00:07:39.470 --> 00:07:42.900
24 bits per pixels is
actually pretty good.

00:07:42.900 --> 00:07:45.530
Following up with that,
we have 4444, right?

00:07:45.530 --> 00:07:47.300
So 4 bits per
pixel each channel.

00:07:47.300 --> 00:07:48.580
Still 16 bits.

00:07:48.580 --> 00:07:49.630
5551.

00:07:49.630 --> 00:07:51.540
I would actually
like everyone in your

00:07:51.540 --> 00:07:53.410
to do a test across
your assets for me.

00:07:53.410 --> 00:07:56.420
In fact, tell you what,
if you guys do this test

00:07:56.420 --> 00:07:58.450
and tweet me the
results, I will happily

00:07:58.450 --> 00:07:59.780
re-tweet it to everyone else.

00:07:59.780 --> 00:08:02.190
Go to your asset
folder for your game

00:08:02.190 --> 00:08:04.730
and find out how many
of them would be fine

00:08:04.730 --> 00:08:07.880
using binary-only alpha.

00:08:07.880 --> 00:08:08.400
Let me know.

00:08:08.400 --> 00:08:08.900
Good?

00:08:08.900 --> 00:08:10.450
Yes?

00:08:10.450 --> 00:08:12.670
I see some really puzzled
faces and some people

00:08:12.670 --> 00:08:15.580
leaning over, going,
will PR let us do that?

00:08:15.580 --> 00:08:16.166
I don't know.

00:08:16.166 --> 00:08:17.540
And then, of
course, we have 565.

00:08:17.540 --> 00:08:18.760
Let's look at what these do.

00:08:18.760 --> 00:08:21.170
So obviously, we're looking
at a modified bit format.

00:08:21.170 --> 00:08:23.250
16-bit formats are
really easy to do.

00:08:23.250 --> 00:08:25.800
In fact, get this, you can
actually save your format,

00:08:25.800 --> 00:08:28.100
still as PNG, but
you can actually

00:08:28.100 --> 00:08:33.480
use a 16-bit header to
load it into memory.

00:08:33.480 --> 00:08:36.940
Keep your pipeline the same--
my analysis will still be wrong

00:08:36.940 --> 00:08:40.247
because it will still say PNG,
but hey, that's cool, right?

00:08:40.247 --> 00:08:41.830
So let's look at the
quality of these.

00:08:41.830 --> 00:08:43.870
So matched up here
is 32-bit per pixel.

00:08:43.870 --> 00:08:45.020
8 bits a channel.

00:08:45.020 --> 00:08:47.730
565, 5551, and 4444.

00:08:47.730 --> 00:08:50.730
The only one you can actually
see any visible difference on

00:08:50.730 --> 00:08:51.884
is 4444.

00:08:51.884 --> 00:08:53.550
And the only place
you can really see it

00:08:53.550 --> 00:08:55.310
is in the gradient
behind the parrot.

00:08:55.310 --> 00:08:57.310
The reason for this, of
course, is the human eye

00:08:57.310 --> 00:08:59.920
picks up very well on
patterns and smooth gradients,

00:08:59.920 --> 00:09:02.420
and the quantization going
from 8 bits to 4 bits

00:09:02.420 --> 00:09:03.470
actually picks that up.

00:09:03.470 --> 00:09:05.980
However, if you will
put up your thumb

00:09:05.980 --> 00:09:08.112
and just block out that
gradient part-- Yep.

00:09:08.112 --> 00:09:10.320
Everybody thumbs up, thumbs
up, everybody, everybody.

00:09:10.320 --> 00:09:10.820
C'mon.

00:09:10.820 --> 00:09:11.870
Beer's coming soon.

00:09:11.870 --> 00:09:13.212
Just play along.

00:09:13.212 --> 00:09:14.670
Block out that
gradient part, and I

00:09:14.670 --> 00:09:17.930
want you to look at the
noise inside of that parrot.

00:09:17.930 --> 00:09:19.721
You can't tell a difference.

00:09:19.721 --> 00:09:21.970
There's so much noise and
so many edges in that parrot

00:09:21.970 --> 00:09:23.469
that you can't
actually tell there's

00:09:23.469 --> 00:09:26.144
only 4 bits per
channel in that area.

00:09:26.144 --> 00:09:27.560
This is what we
should be thinking

00:09:27.560 --> 00:09:30.740
of when we're talking
about 16 bits per pixel.

00:09:30.740 --> 00:09:32.240
The quality is
actually really good.

00:09:32.240 --> 00:09:34.115
And of course, on the
other side of the coin,

00:09:34.115 --> 00:09:36.880
here is our GPU specific formats
that scare a lot of people,

00:09:36.880 --> 00:09:37.380
right?

00:09:37.380 --> 00:09:38.326
DXT, ETC, and PVR.

00:09:38.326 --> 00:09:40.570
And of course,
these don't really

00:09:40.570 --> 00:09:42.582
look any different
than the 8888,

00:09:42.582 --> 00:09:45.040
and that's of course because
they're engineered to do that.

00:09:45.040 --> 00:09:47.270
They rely on very
human perceptual models

00:09:47.270 --> 00:09:48.300
for visualization.

00:09:48.300 --> 00:09:50.759
A lot of very smart people
are paid a lot of smart money

00:09:50.759 --> 00:09:51.800
to figure this stuff out.

00:09:51.800 --> 00:09:54.370
People who have much more
hair than I do and quite

00:09:54.370 --> 00:09:56.600
frankly are a lot
better-looking than I am.

00:09:56.600 --> 00:09:59.560
Hopefully they will give
talks like this in the future.

00:09:59.560 --> 00:10:01.747
And the so here's
the problem-- here's

00:10:01.747 --> 00:10:03.830
what I hear from developers
when I tell them this.

00:10:03.830 --> 00:10:06.270
Like, hey, you don't have
to use 32 bits per pixel.

00:10:06.270 --> 00:10:07.520
You don't have to use PNG.

00:10:07.520 --> 00:10:10.230
They always draw me a diagram
like this and say, hey,

00:10:10.230 --> 00:10:11.640
I'm a small indie developer.

00:10:11.640 --> 00:10:13.500
Quite frankly, I don't
have the resources

00:10:13.500 --> 00:10:16.910
to manage all of the
APKs that this requires.

00:10:16.910 --> 00:10:19.100
I don't want to have
to create a APK for ETC

00:10:19.100 --> 00:10:21.520
and then one for
PVR because the GPU

00:10:21.520 --> 00:10:24.340
chip sets change per device.

00:10:24.340 --> 00:10:27.685
And my answer to you
is you don't have to.

00:10:27.685 --> 00:10:30.640
You see, if you actually take
the PNG files-- Let's take

00:10:30.640 --> 00:10:32.270
just a cropping of
that parrot's head.

00:10:32.270 --> 00:10:35.410
That's a 256 by 256
by 3 channel texture.

00:10:35.410 --> 00:10:37.100
So just RGB.

00:10:37.100 --> 00:10:40.150
The PNG output for that is 192k.

00:10:40.150 --> 00:10:43.510
The DXT1, PVR, and ETC are of
course much lower than that.

00:10:43.510 --> 00:10:45.280
They're fixed bit,
channel block formats.

00:10:45.280 --> 00:10:46.290
No big deal.

00:10:46.290 --> 00:10:50.010
If you add them
together, it's only 80k.

00:10:50.010 --> 00:10:51.630
I'm going to say that again.

00:10:51.630 --> 00:10:53.530
If you add them
together, it's only 80k.

00:10:53.530 --> 00:10:56.450
If there's nothing anyone
learns from this or tweets

00:10:56.450 --> 00:11:01.010
from this talk, I want it to
be that point right there, OK?

00:11:01.010 --> 00:11:04.470
Is that you can actually add
up and distribute all three

00:11:04.470 --> 00:11:08.410
GPU-compressed texture
formats for your PNG file

00:11:08.410 --> 00:11:11.900
into a single APK and
it's still cheaper

00:11:11.900 --> 00:11:13.350
than distributing
the single PNG.

00:11:13.350 --> 00:11:14.975
Can I get a round of
applause for that?

00:11:14.975 --> 00:11:18.220
[APPLAUSE]

00:11:18.220 --> 00:11:18.930
Tweet that.

00:11:18.930 --> 00:11:19.980
Tell your friends about.

00:11:19.980 --> 00:11:21.610
Shame your artist into that.

00:11:21.610 --> 00:11:23.790
Shame your creative
directors into that, right?

00:11:23.790 --> 00:11:26.260
There's no reason to
view APKs as having

00:11:26.260 --> 00:11:27.660
to be tied to the GPUs.

00:11:27.660 --> 00:11:30.437
These are intentionally
GPU-specific formats.

00:11:30.437 --> 00:11:31.520
They're meant to be small.

00:11:31.520 --> 00:11:32.686
They're meant to be awesome.

00:11:32.686 --> 00:11:35.220
Please embrace them.

00:11:35.220 --> 00:11:38.520
But if you can't,
and I know sometimes

00:11:38.520 --> 00:11:41.560
you won't because
sometimes you don't,

00:11:41.560 --> 00:11:44.579
if you have to have the PNGs,
let's be smart about it.

00:11:44.579 --> 00:11:45.870
You guys like that, by the way?

00:11:45.870 --> 00:11:47.940
I gave that a little bit of
time so everybody can see that.

00:11:47.940 --> 00:11:48.910
There's a TM on there.

00:11:48.910 --> 00:11:49.580
I read the news.

00:11:52.210 --> 00:11:53.960
I'm safe.

00:11:53.960 --> 00:11:56.680
Can't say that word.

00:11:56.680 --> 00:11:59.379
So if you have to use PNGs,
let's be smart about it, folks.

00:11:59.379 --> 00:12:01.170
I want to show you
something that hopefully

00:12:01.170 --> 00:12:02.640
will scare every one of you.

00:12:02.640 --> 00:12:04.540
I want you all to
be afraid of this.

00:12:04.540 --> 00:12:07.320
So here is a 16 pixel.

00:12:07.320 --> 00:12:10.490
Or 16 by 16 pixel red image.

00:12:10.490 --> 00:12:12.170
Just a red square.

00:12:12.170 --> 00:12:14.480
Three channels,
24 bits per pixel.

00:12:14.480 --> 00:12:17.120
I just went into Photoshop,
and I just hit File, Save As.

00:12:17.120 --> 00:12:17.620
Boom.

00:12:17.620 --> 00:12:18.810
That's it, done.

00:12:18.810 --> 00:12:22.660
2.74k.

00:12:22.660 --> 00:12:24.230
16 by 16.

00:12:24.230 --> 00:12:26.310
This is an icon.

00:12:26.310 --> 00:12:27.050
File, Save As.

00:12:27.050 --> 00:12:28.400
2.74k.

00:12:28.400 --> 00:12:30.940
Now, if I do the smart
thing and actually go File,

00:12:30.940 --> 00:12:33.770
Save for Web-- everyone
know that button is there?

00:12:33.770 --> 00:12:36.025
Please tell me you know
that button is there.

00:12:36.025 --> 00:12:38.265
I actually get down to 121
bytes, which quite frankly

00:12:38.265 --> 00:12:41.810
is something I would
expect to see, right?

00:12:41.810 --> 00:12:46.250
So this should scare you because
how many of you are absolutely

00:12:46.250 --> 00:12:49.180
sure that your artists
are hitting Export for Web

00:12:49.180 --> 00:12:52.990
on every single one
of your PNG files?

00:12:52.990 --> 00:12:55.260
One person, and you have
a hat, so you know what?

00:12:55.260 --> 00:12:57.290
I don't trust your opinion.

00:12:57.290 --> 00:12:58.265
Gotta let it show.

00:12:58.265 --> 00:12:59.015
Gotta let it show.

00:12:59.015 --> 00:13:01.519
I'm bald, I own it.

00:13:01.519 --> 00:13:03.060
So for those of you
who aren't aware,

00:13:03.060 --> 00:13:05.340
PNG is actually a
pretty complex format.

00:13:05.340 --> 00:13:06.940
It's actually a
chunked file format,

00:13:06.940 --> 00:13:08.619
which means it's
broken up into regions

00:13:08.619 --> 00:13:10.910
of data that have a little
bit of header that describes

00:13:10.910 --> 00:13:12.130
what information is in it.

00:13:12.130 --> 00:13:13.940
And this, quite frankly,
can be anything.

00:13:13.940 --> 00:13:15.370
It could be RGB data.

00:13:15.370 --> 00:13:17.710
It can actually contain
meta information

00:13:17.710 --> 00:13:19.640
about where the
picture was taken.

00:13:19.640 --> 00:13:21.930
Like some phones actually
embed the GPS location

00:13:21.930 --> 00:13:24.360
of where the picture was
taken in the PNG format.

00:13:24.360 --> 00:13:26.630
In addition to that, it's
an alternate pixel format.

00:13:26.630 --> 00:13:30.570
So you could have a 1 bit per
channel, 3 channel or 2 bit

00:13:30.570 --> 00:13:33.822
per channel, 4 channel or some
weird combination of that.

00:13:33.822 --> 00:13:35.530
And finally, all of
that data is actually

00:13:35.530 --> 00:13:37.100
thrown into deflate algorithm.

00:13:37.100 --> 00:13:39.630
Or I'll use GZIP for
the common term of it.

00:13:39.630 --> 00:13:42.110
And all of this is bundled
together as a single PNG file.

00:13:42.110 --> 00:13:47.260
Here's why Photoshop actually
had us do 2.7k for that single

00:13:47.260 --> 00:13:50.090
image, and that's because photo
editing tools like to hide

00:13:50.090 --> 00:13:52.080
stuff in that chunked format.

00:13:52.080 --> 00:13:54.050
If you guys actually
open up half the PNGs,

00:13:54.050 --> 00:13:56.550
you'll find just
all sorts of stuff.

00:13:56.550 --> 00:13:58.070
Just crazy things in there.

00:13:58.070 --> 00:13:59.990
I found in one
PNG file there was

00:13:59.990 --> 00:14:03.830
a menu to the local
Chinese restaurant.

00:14:03.830 --> 00:14:06.774
That may not be true, but
if it is, it's pretty cool.

00:14:06.774 --> 00:14:08.690
I'm going to run this
analysis in like a month

00:14:08.690 --> 00:14:10.150
and find that block somewhere.

00:14:10.150 --> 00:14:12.030
I know one of you
are going to do it.

00:14:12.030 --> 00:14:14.300
One of you are
going to do it now.

00:14:14.300 --> 00:14:16.160
Like, I wonder if
Colt will find this.

00:14:16.160 --> 00:14:18.980
I'll re-tweet that, too.

00:14:18.980 --> 00:14:21.890
Now, obviously we at Android
realize this is a problem.

00:14:21.890 --> 00:14:24.190
We realize that stuff is
hidden inside of these chunks,

00:14:24.190 --> 00:14:26.310
and we try to do the right
thing on your behalf.

00:14:26.310 --> 00:14:29.930
The AAP tool, or Android
Asset Packaging tool,

00:14:29.930 --> 00:14:31.420
when you actually
do your builds,

00:14:31.420 --> 00:14:33.552
will go through in an
attempt to try to strip out

00:14:33.552 --> 00:14:35.260
a lot of this information
on your behalf.

00:14:35.260 --> 00:14:37.343
And you see it when you
run the Command Line tool.

00:14:37.343 --> 00:14:39.160
You'll see packing
all this information,

00:14:39.160 --> 00:14:40.743
and it does some fun
stuff over there.

00:14:40.743 --> 00:14:43.270
But what is the AAPT
tool actually doing?

00:14:43.270 --> 00:14:45.120
Not as much as you
would hope, actually.

00:14:45.120 --> 00:14:47.180
This is actually taken
from our documentation.

00:14:47.180 --> 00:14:49.120
Effectively what
AAPT will do is it

00:14:49.120 --> 00:14:52.940
will create a lossless
optimization to your image.

00:14:52.940 --> 00:14:58.330
Only if your image uses
less than 256 unique colors,

00:14:58.330 --> 00:15:02.700
will it then convert it
to a palettized image.

00:15:02.700 --> 00:15:06.052
Only if there's less
than 256 colors.

00:15:06.052 --> 00:15:08.260
And when you think about
all the images in your game,

00:15:08.260 --> 00:15:09.805
that might work.

00:15:09.805 --> 00:15:11.180
I didn't know how
many times this

00:15:11.180 --> 00:15:14.160
was running because this seems
like a pretty important step.

00:15:14.160 --> 00:15:16.640
But I wanted to see the
effect of it on our ecosystem.

00:15:16.640 --> 00:15:18.210
So I went back to the data.

00:15:18.210 --> 00:15:21.550
I re-ran all of my tests where
each one opened up the PNG file

00:15:21.550 --> 00:15:23.300
and checked the format.

00:15:23.300 --> 00:15:25.420
If this is running a lot,
we would hypothetically

00:15:25.420 --> 00:15:27.600
see tons and tons
and tons and tons

00:15:27.600 --> 00:15:31.400
of palettized indexed
images, right?

00:15:31.400 --> 00:15:32.360
Let's look at it.

00:15:32.360 --> 00:15:33.720
This is what I found.

00:15:33.720 --> 00:15:36.550
Of a sampling, I'm not going
to say how many files I opened

00:15:36.550 --> 00:15:37.560
or what it was.

00:15:37.560 --> 00:15:40.210
But of a sampling, here
was the basic counts.

00:15:40.210 --> 00:15:45.920
So the first one, of course,
is 32-bit RGB at 30,000 images.

00:15:45.920 --> 00:15:50.240
That tells me that 30,000
images were not-- they

00:15:50.240 --> 00:15:52.970
had more than 256 unique colors.

00:15:52.970 --> 00:15:55.010
It also told me that
there's a lot of alpha

00:15:55.010 --> 00:15:56.630
being used in our
games out there.

00:15:56.630 --> 00:15:59.330
You can see from the second
row this is the index textures.

00:15:59.330 --> 00:16:01.440
These are the ones
that AAPT converted.

00:16:01.440 --> 00:16:02.899
Or your artist did
the bright thing

00:16:02.899 --> 00:16:04.606
and actually ran
through the entire chain

00:16:04.606 --> 00:16:06.150
to convert it out the right way.

00:16:06.150 --> 00:16:06.800
OK?

00:16:06.800 --> 00:16:08.800
But of course, this
is still only 18,000.

00:16:08.800 --> 00:16:09.940
It's almost half.

00:16:09.940 --> 00:16:12.040
Only half of this
analysis was actually

00:16:12.040 --> 00:16:13.200
categorized the right way.

00:16:13.200 --> 00:16:15.050
What scares me
about this analysis

00:16:15.050 --> 00:16:17.140
is this column down here--
or this row down here.

00:16:17.140 --> 00:16:18.780
24 bits per pixel.

00:16:18.780 --> 00:16:21.420
Only 1,000 images were
24 bits per pixel.

00:16:21.420 --> 00:16:23.840
Listen, I've looked at a lot
of your guys' data assets.

00:16:23.840 --> 00:16:26.280
There is a lot more textures
that don't need alpha

00:16:26.280 --> 00:16:28.760
that you guys are throwing
in your Texture Packer

00:16:28.760 --> 00:16:31.450
output that's getting
bundled with alpha.

00:16:31.450 --> 00:16:33.490
And what we're seeing
here is a result of that.

00:16:33.490 --> 00:16:36.520
Not accurately separating
out images into their opacity

00:16:36.520 --> 00:16:37.750
and non-opacity variance.

00:16:37.750 --> 00:16:39.500
And the problem is
that you're then

00:16:39.500 --> 00:16:41.890
bloating your assets
because of it.

00:16:41.890 --> 00:16:43.639
Anyone guilty of that?

00:16:43.639 --> 00:16:44.930
Ah, you didn't raise your hand.

00:16:44.930 --> 00:16:45.430
Smart.

00:16:45.430 --> 00:16:46.000
One guy.

00:16:46.000 --> 00:16:46.980
Props, dude.

00:16:46.980 --> 00:16:49.797
I would hit my chest
but there's a mic there.

00:16:49.797 --> 00:16:51.880
And of course, a bunch of
other stuff under there.

00:16:51.880 --> 00:16:53.296
So basically, we
can see from this

00:16:53.296 --> 00:16:56.104
that the AAP tool is doing
a good job of catching

00:16:56.104 --> 00:16:57.770
these outliers and
actually turning them

00:16:57.770 --> 00:17:00.570
into palettized index
textures, which is great.

00:17:00.570 --> 00:17:02.410
But there's still more to do.

00:17:02.410 --> 00:17:03.870
You can't just rely on that.

00:17:03.870 --> 00:17:05.650
Everybody knows
that if you really

00:17:05.650 --> 00:17:07.894
want to compress-- tweet
this, someone tweet this.

00:17:07.894 --> 00:17:09.060
Please, somebody tweet this.

00:17:09.060 --> 00:17:10.601
I'll wait for you
to get a phone out.

00:17:10.601 --> 00:17:12.180
Everybody knows
that if you really

00:17:12.180 --> 00:17:15.869
want to compress a PNG file,
you got to do something crazy.

00:17:15.869 --> 00:17:17.520
You have to start
with your input image

00:17:17.520 --> 00:17:20.150
and apply a Lossy Preprocessor.

00:17:20.150 --> 00:17:23.957
Effectively, you have to take
PNG and make it like a JPEG.

00:17:23.957 --> 00:17:25.790
You apply a Lossy
Preprocessor, and then you

00:17:25.790 --> 00:17:27.450
pass it off to an
algorithm that's

00:17:27.450 --> 00:17:30.010
going to produce a
smaller GZIP file.

00:17:30.010 --> 00:17:32.740
Believe it or not, GZIP is
actually not the only way

00:17:32.740 --> 00:17:34.870
to generate GZIP files,
and, quite frankly,

00:17:34.870 --> 00:17:37.460
it actually does a pretty bad
job of generating GZIP files.

00:17:37.460 --> 00:17:38.770
There's actually other
algorithms out there.

00:17:38.770 --> 00:17:39.270
7-Zip.

00:17:39.270 --> 00:17:40.770
Fans of 7-Zip,
round of applause?

00:17:40.770 --> 00:17:42.380
[APPLAUSE]

00:17:42.380 --> 00:17:47.610
7-Zip will regularly output GZIP
files smaller than GZIP does.

00:17:47.610 --> 00:17:48.490
That's pretty cool.

00:17:48.490 --> 00:17:51.140
Anyone heard of Zopfli?

00:17:51.140 --> 00:17:53.040
Wow.

00:17:53.040 --> 00:17:54.670
We got to work on that.

00:17:54.670 --> 00:17:57.610
Zopfli is a tool, released from
Google a couple years ago now,

00:17:57.610 --> 00:18:05.347
that regularly produces
smaller GZIP files than 7-zip.

00:18:05.347 --> 00:18:06.680
AUDIENCE: How do you spell that?

00:18:06.680 --> 00:18:11.290
COLT MCANLIS: Z-O-P-H Z- Z-O-F?

00:18:11.290 --> 00:18:12.300
You know what?

00:18:12.300 --> 00:18:13.510
I found our problem.

00:18:13.510 --> 00:18:16.810
I found our problem.

00:18:16.810 --> 00:18:17.820
I found our problem.

00:18:17.820 --> 00:18:18.620
Zopfli.

00:18:18.620 --> 00:18:21.070
It's like the
Russian bread Zopfli?

00:18:21.070 --> 00:18:21.920
Dan will get it.

00:18:21.920 --> 00:18:23.320
Great question.

00:18:23.320 --> 00:18:25.160
No more questions
from the audience.

00:18:25.160 --> 00:18:26.410
I just want to point that out.

00:18:26.410 --> 00:18:29.450
I'll be in the back
when that time happens.

00:18:29.450 --> 00:18:32.504
Anyhow, you want to apply
a Lossy Precompressor.

00:18:32.504 --> 00:18:34.420
What this is going to
do is effectively reduce

00:18:34.420 --> 00:18:36.170
the amount of dynamic
range in your image.

00:18:36.170 --> 00:18:38.720
It's going to create a
more quantized image that

00:18:38.720 --> 00:18:40.190
have similar colors.

00:18:40.190 --> 00:18:42.790
This, of course, is going
to be eaten and take apart

00:18:42.790 --> 00:18:45.795
by a better deflate algorithm
giving you a big explosion--

00:18:45.795 --> 00:18:47.820
a better small, compressed file.

00:18:47.820 --> 00:18:49.199
The best part of
this is that you

00:18:49.199 --> 00:18:51.240
don't have to write any
of this code by yourself.

00:18:51.240 --> 00:18:53.680
If you just do a
simple Google-- here,

00:18:53.680 --> 00:18:54.940
let me Google that for you.

00:18:54.940 --> 00:18:59.140
You will get a plethora, an
overflow, a flood of tools

00:18:59.140 --> 00:19:01.270
out there that already
do all of this for you.

00:19:01.270 --> 00:19:02.840
Round of applause
if you're already

00:19:02.840 --> 00:19:04.631
using one of these
tools in your pipeline.

00:19:04.631 --> 00:19:07.060
[APPLAUSE]

00:19:07.060 --> 00:19:07.560
OK.

00:19:07.560 --> 00:19:08.510
I'm going to come
back next year.

00:19:08.510 --> 00:19:09.843
I'm going to give the same talk.

00:19:09.843 --> 00:19:13.306
I expect the whole audience to
be clapping when we do that.

00:19:13.306 --> 00:19:14.180
Can we agree to that?

00:19:14.180 --> 00:19:15.230
Round of applause?

00:19:15.230 --> 00:19:18.042
[APPLAUSE]

00:19:18.042 --> 00:19:19.750
And there will still
be no more questions

00:19:19.750 --> 00:19:22.109
at the live stream
on that talk, either.

00:19:22.109 --> 00:19:23.900
So the cool thing is
just go out, just pick

00:19:23.900 --> 00:19:25.470
any one of these,
any one of these

00:19:25.470 --> 00:19:26.710
and add it to your
pipeline, and you're

00:19:26.710 --> 00:19:29.335
going to get better compression
than already what you're doing.

00:19:29.335 --> 00:19:32.670
The analysis I'm seeing already
shows that a lot of people

00:19:32.670 --> 00:19:33.560
aren't using this.

00:19:33.560 --> 00:19:35.685
Because these tools are
going to accurately analyze

00:19:35.685 --> 00:19:36.320
your content.

00:19:36.320 --> 00:19:38.778
It's going to figure out how
many channels you really need.

00:19:38.778 --> 00:19:40.920
It's going to apply
Lossy Preprocessors.

00:19:40.920 --> 00:19:42.010
Better compressors.

00:19:42.010 --> 00:19:44.790
In fact, you'll
see the ZopfliPNG.

00:19:44.790 --> 00:19:45.640
Where did it go?

00:19:45.640 --> 00:19:46.680
Where did it go?

00:19:46.680 --> 00:19:47.330
There it goes.

00:19:47.330 --> 00:19:48.830
That's how you spell Zopfli.

00:19:51.610 --> 00:19:54.400
You know, let me
file a bug on that.

00:19:54.400 --> 00:19:55.540
So that's ZopfliPNG.

00:19:55.540 --> 00:19:57.230
That's actually
going to apply Zopfli

00:19:57.230 --> 00:20:00.730
to the deflate section
of your PNG compression.

00:20:00.730 --> 00:20:03.190
Of course, if that's too crazy
because each one of those

00:20:03.190 --> 00:20:05.150
has little variants
and whatnot, I highly

00:20:05.150 --> 00:20:08.850
recommend just starting with
a tool called ScriptPNG.

00:20:08.850 --> 00:20:11.230
What ScriptPNG will do is
it will provide a directory

00:20:11.230 --> 00:20:14.300
for you that you can download
all of those other PNG

00:20:14.300 --> 00:20:15.000
compressors.

00:20:15.000 --> 00:20:16.930
And what it will do
is given an image,

00:20:16.930 --> 00:20:19.890
it will find the one that
produces the best output.

00:20:19.890 --> 00:20:23.030
So it will actually run your
image through all 50 of those

00:20:23.030 --> 00:20:26.700
if you want to, to produce
and find the best compression,

00:20:26.700 --> 00:20:29.250
and that's the PNG file
that will get shipped out.

00:20:29.250 --> 00:20:30.390
You don't even got
to do the hard work.

00:20:30.390 --> 00:20:32.806
You just got to set it up, and
the artist hits the button,

00:20:32.806 --> 00:20:34.232
and it goes off its way.

00:20:34.232 --> 00:20:35.690
Round of applause
for lazy artists.

00:20:35.690 --> 00:20:38.582
[APPLAUSE]

00:20:38.582 --> 00:20:40.452
See, I know when I'm
talking to my people

00:20:40.452 --> 00:20:42.160
when they applaud at
lazy artists, right?

00:20:42.160 --> 00:20:44.890
This is the programmers
in the house.

00:20:44.890 --> 00:20:47.630
So this is--
everything I've talked

00:20:47.630 --> 00:20:48.847
about before this was OK.

00:20:48.847 --> 00:20:50.680
This is where I'm going
to get really nerdy.

00:20:50.680 --> 00:20:52.410
Just letting you guys know.

00:20:52.410 --> 00:20:54.117
So let's say you do all this.

00:20:54.117 --> 00:20:55.700
I'm going to let you
know you're going

00:20:55.700 --> 00:20:57.434
to hit a point of
diminishing return.

00:20:57.434 --> 00:20:59.350
It doesn't matter how
much compressing you add

00:20:59.350 --> 00:21:02.927
or how much Lossy Preproccessing
or what format you do to it,

00:21:02.927 --> 00:21:05.010
you're going to hit a point
of diminishing return.

00:21:05.010 --> 00:21:07.385
That if you're only
thinking in terms of images,

00:21:07.385 --> 00:21:09.010
you're never going
to break that point.

00:21:09.010 --> 00:21:10.930
You have to think about
the data that you're

00:21:10.930 --> 00:21:14.220
using, how you're using
it, to get better results.

00:21:14.220 --> 00:21:17.650
So I did some tests.

00:21:17.650 --> 00:21:20.420
This is a sprite sheet
I grabbed off the web.

00:21:20.420 --> 00:21:21.620
This is from Glitch.

00:21:21.620 --> 00:21:24.125
It was a game, it was
a big MMO game online,

00:21:24.125 --> 00:21:26.750
and they actually went under and
open-sourced all their assets.

00:21:26.750 --> 00:21:28.124
So thank you to
the Glitch people

00:21:28.124 --> 00:21:30.590
for open-sourcing your content
so I can use it in my talk.

00:21:30.590 --> 00:21:31.860
Round of applause for that.

00:21:31.860 --> 00:21:34.000
[APPLAUSE]

00:21:34.000 --> 00:21:35.950
Beer got more applause,
unfortunately.

00:21:35.950 --> 00:21:39.059
So anyhow, we see in our games
lots of spreadsheets like this.

00:21:39.059 --> 00:21:40.850
The artists have hand
drawn some animation,

00:21:40.850 --> 00:21:43.800
and they export it out in this
large matrix of information.

00:21:43.800 --> 00:21:46.470
And we see this over and
over and over again, right?

00:21:46.470 --> 00:21:48.370
You've got a talking
tiki head, or you

00:21:48.370 --> 00:21:50.450
have someone getting hit
in the face with a pie.

00:21:50.450 --> 00:21:52.180
They just render
out this content,

00:21:52.180 --> 00:21:54.200
and sometimes,
each of the frames

00:21:54.200 --> 00:21:56.680
actually differ by
a very small margin

00:21:56.680 --> 00:21:57.847
between the previous frames.

00:21:57.847 --> 00:22:00.096
And when you look at a sprite
sheet like this, you go,

00:22:00.096 --> 00:22:02.670
well, It's good that they've at
least packed it into an Atlas

00:22:02.670 --> 00:22:04.610
so we know they're not
wasting too many sprites,

00:22:04.610 --> 00:22:06.110
but there's still
a lot of data here

00:22:06.110 --> 00:22:08.460
that we're not able to
compress even with GPU formats.

00:22:08.460 --> 00:22:11.510
And the problem is there's
lots of duplicate wasted pixels

00:22:11.510 --> 00:22:14.276
that sort of act as the border
or the transparent area.

00:22:14.276 --> 00:22:15.650
In addition to
this, there's lots

00:22:15.650 --> 00:22:18.340
of duplicate pixels
between frames.

00:22:18.340 --> 00:22:21.329
This image moves very
little between two frames.

00:22:21.329 --> 00:22:23.370
The question you should
really be asking yourself

00:22:23.370 --> 00:22:25.828
is well, wait a minute, this
is effectively just a flipbook

00:22:25.828 --> 00:22:26.530
animation.

00:22:26.530 --> 00:22:29.730
Aren't there already compression
formats out there that do that?

00:22:29.730 --> 00:22:30.840
And you're right.

00:22:30.840 --> 00:22:31.470
There's GIF.

00:22:31.470 --> 00:22:32.620
Or "jif."

00:22:32.620 --> 00:22:34.790
I'm not getting into that war.

00:22:34.790 --> 00:22:36.730
There's H264, and of
course, there's WEBM.

00:22:36.730 --> 00:22:39.400
These are codecs that are
built to of course compress

00:22:39.400 --> 00:22:42.160
animated content, and they
do one helluva job at it.

00:22:42.160 --> 00:22:43.070
Except for GIF.

00:22:43.070 --> 00:22:43.970
You just don't.

00:22:43.970 --> 00:22:45.450
Just don't.

00:22:45.450 --> 00:22:46.640
WEBM, that's pretty good.

00:22:46.640 --> 00:22:47.750
The problem with
these, though, is

00:22:47.750 --> 00:22:49.060
you can't really
use them in game.

00:22:49.060 --> 00:22:50.520
So first off, once
again, we're talking

00:22:50.520 --> 00:22:52.561
about lower-rent hardware
here, and unless you're

00:22:52.561 --> 00:22:54.820
using the H264 hardware
decoder for everything,

00:22:54.820 --> 00:22:57.420
you're going to hit a
pretty hard burden decoding

00:22:57.420 --> 00:22:58.530
each one of your frames.

00:22:58.530 --> 00:23:01.800
Because every single frame of
your animation has to be CPU

00:23:01.800 --> 00:23:05.600
decoded to a Raw 32-bit
texture in the CPU

00:23:05.600 --> 00:23:08.300
and then uploaded
back to the GPU.

00:23:08.300 --> 00:23:12.320
So again, these only
help you in distribution.

00:23:12.320 --> 00:23:15.030
They don't help you
at all on the GPU

00:23:15.030 --> 00:23:16.710
where the problem really exists.

00:23:16.710 --> 00:23:18.440
Where the stability
is really a problem.

00:23:18.440 --> 00:23:20.950
What you really want is a
format that looks like this.

00:23:20.950 --> 00:23:22.670
You have some
hyper-compressed format,

00:23:22.670 --> 00:23:24.360
and you can load it
right into the CPU

00:23:24.360 --> 00:23:26.416
and maybe do some
compression there.

00:23:26.416 --> 00:23:28.040
But really you want
it to go to the GPU

00:23:28.040 --> 00:23:30.210
in a super-compressed
form that has

00:23:30.210 --> 00:23:32.250
some information about
these sprite sheets

00:23:32.250 --> 00:23:34.760
in its hyper-compact,
decompressable form.

00:23:34.760 --> 00:23:37.620
So you can actually decompress
it in the pixel shader

00:23:37.620 --> 00:23:39.787
as you're rasterizing
your quads.

00:23:39.787 --> 00:23:41.120
So there's no interim step here.

00:23:41.120 --> 00:23:42.078
There's no middle step.

00:23:42.078 --> 00:23:44.590
Everything happens
in the pixel shader.

00:23:44.590 --> 00:23:47.490
There wasn't one out there,
so I built one of these.

00:23:47.490 --> 00:23:49.140
It's called Crabby.

00:23:49.140 --> 00:23:50.594
it's on my GitHub page.

00:23:50.594 --> 00:23:52.010
You can see the
URL at the bottom.

00:23:52.010 --> 00:23:53.490
It's going to be at
the end of every slide.

00:23:53.490 --> 00:23:55.890
Effectively what Crabby is is
a compressed texture format

00:23:55.890 --> 00:23:57.680
for GPU reconstruction.

00:23:57.680 --> 00:24:00.300
It's effectively
built to minimize

00:24:00.300 --> 00:24:02.742
the amount of duplicate
pixels in a sprite sheet,

00:24:02.742 --> 00:24:04.450
and the results are
actually pretty cool,

00:24:04.450 --> 00:24:06.240
if I do say so myself.

00:24:06.240 --> 00:24:06.994
So how it works.

00:24:06.994 --> 00:24:08.910
We effectively taken an
input image like this,

00:24:08.910 --> 00:24:12.210
and we actually store
unique 4 by 4 pixel blocks

00:24:12.210 --> 00:24:14.750
so any duplicate blocks
get completely removed.

00:24:14.750 --> 00:24:17.280
We only create a pixel
block palette from this.

00:24:17.280 --> 00:24:19.200
In addition to that,
each one of the frames

00:24:19.200 --> 00:24:21.430
actually creates a
frame texture that's

00:24:21.430 --> 00:24:23.990
a quarter resolution that
provides an index to what

00:24:23.990 --> 00:24:26.650
pixel block that's
actually going to use.

00:24:26.650 --> 00:24:27.420
So pretty simple.

00:24:27.420 --> 00:24:29.980
We're effectively doing
palettized indexing,

00:24:29.980 --> 00:24:31.910
but we're using it
on blocks of pixels

00:24:31.910 --> 00:24:33.602
instead of single pixels.

00:24:33.602 --> 00:24:34.560
Pretty straightforward.

00:24:34.560 --> 00:24:35.500
I'm not a genius here, guys.

00:24:35.500 --> 00:24:35.910
I'm bald.

00:24:35.910 --> 00:24:36.410
Look at me.

00:24:36.410 --> 00:24:37.810
I don't do great things.

00:24:37.810 --> 00:24:39.642
I just read books.

00:24:39.642 --> 00:24:41.350
And the results are
actually pretty good.

00:24:41.350 --> 00:24:43.590
So take this input image.

00:24:43.590 --> 00:24:47.660
So the source 32-bit per
pixel image in distribution.

00:24:47.660 --> 00:24:49.710
So this is the PNG
version of this file

00:24:49.710 --> 00:24:52.092
that has then been GZIPed.

00:24:52.092 --> 00:24:54.300
So there's two compression
algorithms going on there.

00:24:54.300 --> 00:24:56.290
207k.

00:24:56.290 --> 00:24:59.050
However, when it's decompressed
into CPU memory-- so the minute

00:24:59.050 --> 00:25:02.840
you decompress that, 2.48
megs uploaded to your GPU.

00:25:02.840 --> 00:25:04.300
2.4 megs.

00:25:04.300 --> 00:25:04.970
OK?

00:25:04.970 --> 00:25:07.220
When you run this
through Crabby,

00:25:07.220 --> 00:25:12.618
you get 129k distribution,
364k in the GPU.

00:25:12.618 --> 00:25:13.361
[CLAPPING]

00:25:13.361 --> 00:25:13.860
Thank you.

00:25:13.860 --> 00:25:14.359
Yes.

00:25:14.359 --> 00:25:16.123
[APPLAUSE]

00:25:16.123 --> 00:25:16.622
Yes.

00:25:16.622 --> 00:25:18.480
That guy.

00:25:18.480 --> 00:25:20.260
I'm going to swag you.

00:25:20.260 --> 00:25:22.140
All the swag I have.

00:25:22.140 --> 00:25:24.030
Do we have swag left?

00:25:24.030 --> 00:25:26.350
Still, you're awesome.

00:25:26.350 --> 00:25:27.410
Let's dig deeper.

00:25:27.410 --> 00:25:30.620
The way I actually output
texture information from Crabby

00:25:30.620 --> 00:25:33.799
allows you to add further
compression to it.

00:25:33.799 --> 00:25:36.340
So that raw-- let me show you
that raw palette texture again.

00:25:36.340 --> 00:25:37.640
See that raw palette texture?

00:25:37.640 --> 00:25:39.245
That's just output
as a TGA file.

00:25:39.245 --> 00:25:40.620
You can actually
then compress it

00:25:40.620 --> 00:25:44.324
with DXT or PVR or JPEG or
GIF or whatever you want to.

00:25:44.324 --> 00:25:46.240
And the result for that
gets you even smaller.

00:25:46.240 --> 00:25:49.200
So if we took just the raw
32 bit per pixel image,

00:25:49.200 --> 00:25:53.390
and we just ran it
through DXT1 just raw,

00:25:53.390 --> 00:25:56.710
we end up with about
319 in CPU memory.

00:25:56.710 --> 00:26:00.660
However, if we combine DXT
compression plus the Crabby

00:26:00.660 --> 00:26:03.050
output, we hit 84k.

00:26:03.050 --> 00:26:04.490
[APPLAUSE]

00:26:04.490 --> 00:26:07.304
Thank you.

00:26:07.304 --> 00:26:08.970
What I really hope
comes out of Crabby--

00:26:08.970 --> 00:26:10.340
right now it's sort of
a research project--

00:26:10.340 --> 00:26:11.880
I want all of you to go test it.

00:26:11.880 --> 00:26:12.680
Break it.

00:26:12.680 --> 00:26:14.671
Please, dear god,
break the code.

00:26:14.671 --> 00:26:16.170
What I really hope
comes out of this

00:26:16.170 --> 00:26:18.160
is we start looking
at different ways

00:26:18.160 --> 00:26:20.394
to attack our texture problem.

00:26:20.394 --> 00:26:21.810
It's not just about
block formats.

00:26:21.810 --> 00:26:24.420
We can actually recompose
all the stuff in the GPU,

00:26:24.420 --> 00:26:26.520
and quite frankly, the
tests I have show it's

00:26:26.520 --> 00:26:29.130
still running very performantly
on all sorts of devices.

00:26:29.130 --> 00:26:30.780
And actually, if you guys
would like to run tests,

00:26:30.780 --> 00:26:32.988
I'd love to hear your feedback
on where it's falling.

00:26:32.988 --> 00:26:36.390
But 2.48 megs to 84k,
that's a huge savings.

00:26:36.390 --> 00:26:39.310
That's the difference in
running on every device

00:26:39.310 --> 00:26:42.427
and only devices
in North America.

00:26:42.427 --> 00:26:44.260
If you listened to Bob
Meese's talk earlier,

00:26:44.260 --> 00:26:47.840
it's the difference in a
lot of potential users.

00:26:47.840 --> 00:26:50.270
And the fact is that
distribution and size

00:26:50.270 --> 00:26:54.430
of your assets do correlate
to conversions and downloads.

00:26:54.430 --> 00:26:57.420
So with my analysis, these
were the numbers I found.

00:26:57.420 --> 00:27:02.950
On average, the top free
game was around 34 megs.

00:27:02.950 --> 00:27:06.182
Now, for those of you who
know, the size of APK limits

00:27:06.182 --> 00:27:07.890
is around 50 megs
right now, and then you

00:27:07.890 --> 00:27:10.139
can use the OBB files if
want to get larger than that.

00:27:10.139 --> 00:27:12.140
And you see the OBBs
down in top paid.

00:27:12.140 --> 00:27:16.300
On average, the top
paid game is 125 megs.

00:27:16.300 --> 00:27:17.862
Average.

00:27:17.862 --> 00:27:20.320
If you just look at this graph,
there's some pretty numbers

00:27:20.320 --> 00:27:20.440
here.

00:27:20.440 --> 00:27:21.940
But what you should
really take away

00:27:21.940 --> 00:27:25.400
from this is that there is
in fact a correlation of size

00:27:25.400 --> 00:27:29.050
of the assets the user has to
load and the ability for it

00:27:29.050 --> 00:27:31.260
to be successful
at a price point.

00:27:31.260 --> 00:27:35.140
Users who are expecting free
content want to click a button

00:27:35.140 --> 00:27:37.450
and play now.

00:27:37.450 --> 00:27:40.090
They don't want to wait 20
minutes for a loading screen.

00:27:40.090 --> 00:27:42.552
And because of that, the
content's got to be small.

00:27:42.552 --> 00:27:44.510
It's got to be tightly
packed, and dear god, it

00:27:44.510 --> 00:27:47.050
has got to be awesome.

00:27:47.050 --> 00:27:48.960
Crabby allows you to hit that.

00:27:48.960 --> 00:27:50.920
Using GPU textures
allows you to hit that.

00:27:50.920 --> 00:27:55.620
Doing better GPU compression
allows you to hit that.

00:27:55.620 --> 00:27:58.730
If you only tweet three
things from this talk today,

00:27:58.730 --> 00:28:00.631
tweet these three things.

00:28:00.631 --> 00:28:01.130
Number one.

00:28:01.130 --> 00:28:03.880
Replace your PNGs
with GPU textures.

00:28:03.880 --> 00:28:05.202
Do it.

00:28:05.202 --> 00:28:06.910
Distribute all three
of them in your APK.

00:28:06.910 --> 00:28:08.660
It's still going to
be smaller than a PNG.

00:28:08.660 --> 00:28:10.070
Your users will thank you.

00:28:10.070 --> 00:28:10.570
Number two.

00:28:10.570 --> 00:28:13.810
Use advanced PNG compression
for those that you cannot turn

00:28:13.810 --> 00:28:15.400
into GPU textures.

00:28:15.400 --> 00:28:18.590
Just go pick any from that
matrix or use ScriptPNG.

00:28:18.590 --> 00:28:19.130
Trust me.

00:28:19.130 --> 00:28:20.610
It's going to be awesome.

00:28:20.610 --> 00:28:23.610
And when in doubt, look
for unique and awesome ways

00:28:23.610 --> 00:28:25.460
to compress your
texture data further.

00:28:25.460 --> 00:28:28.820
Please, for the love of all that
is holy, go to my GitHub page,

00:28:28.820 --> 00:28:30.500
grab Crabby.

00:28:30.500 --> 00:28:31.360
Check it out.

00:28:31.360 --> 00:28:32.576
My name is Colt McAnlis.

00:28:32.576 --> 00:28:33.950
This is how you
get a hold of me.

00:28:33.950 --> 00:28:35.610
I want to hear from you, and
I'm going to be in the back

00:28:35.610 --> 00:28:36.370
after all of this.

00:28:36.370 --> 00:28:36.930
Come find me.

00:28:36.930 --> 00:28:37.430
Let's talk.

00:28:37.430 --> 00:28:39.040
Thank you.

