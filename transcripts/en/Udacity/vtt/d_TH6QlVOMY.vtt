WEBVTT
Kind: captions
Language: en

00:00:00.310 --> 00:00:02.550
let's look at the solution to a RAS full quiz.

00:00:02.550 --> 00:00:05.790
So the question was, is it better to not push anything

00:00:05.790 --> 00:00:08.886
anymore once the RAS is full, or simply wrap around

00:00:08.886 --> 00:00:12.620
and keep on writing all the addresses with new ones. It

00:00:12.620 --> 00:00:15.330
turns out that the wrap around approach is much better

00:00:15.330 --> 00:00:18.320
than the don't push approach. To see why, keep in mind

00:00:18.320 --> 00:00:21.712
that our program would look like this. We have the main

00:00:21.712 --> 00:00:26.740
function that executes for a while, then calls some other function.

00:00:26.740 --> 00:00:29.570
This results in pushing something onto the RAS.

00:00:29.570 --> 00:00:32.762
Our high-level function here will do a lot of

00:00:32.762 --> 00:00:36.857
work, occasionally calling other functions and so on.

00:00:36.857 --> 00:00:40.337
We push to see what happens here without running

00:00:40.337 --> 00:00:42.410
out of space. Let's say that our RAS

00:00:42.410 --> 00:00:45.130
only has two entries. The first entry will be

00:00:45.130 --> 00:00:48.470
consumed by pushing the return address when main

00:00:48.470 --> 00:00:51.964
calls do it. The second one, will be consumed

00:00:51.964 --> 00:00:55.740
when we call the function func from do it. At this

00:00:55.740 --> 00:01:00.580
point, we're calling the function dolesss, and it might call, for example,

00:01:00.580 --> 00:01:03.000
the add function, many, many times. So, we're getting to the

00:01:03.000 --> 00:01:06.482
place where functions are really small. And ideally we would, you know,

00:01:06.482 --> 00:01:09.040
push each diamond and pop when we return and so on.

00:01:09.040 --> 00:01:12.176
If we only have one entry, then really our entire rest will

00:01:12.176 --> 00:01:14.416
be used just when we call do it and as long as

00:01:14.416 --> 00:01:17.296
we stay and do it, which might be a very large function

00:01:17.296 --> 00:01:19.728
because it might be doing most of the actual work in

00:01:19.728 --> 00:01:22.736
the program, all of the function calls that we are doing

00:01:22.736 --> 00:01:25.808
really end up being mispredicted because we ran out of ram

00:01:25.808 --> 00:01:28.368
space and the one time that we will have a correct

00:01:28.368 --> 00:01:32.470
prediction, is when finally return from do it. If we have

00:01:32.470 --> 00:01:35.960
two entries, a similar thing will happen. We will consume the

00:01:35.960 --> 00:01:39.220
first entry by basically pushing the first thing. So pretty much

00:01:39.220 --> 00:01:42.450
we are kind of using an entry here just to save

00:01:42.450 --> 00:01:46.200
one missed prediction at the final return. Here again,

00:01:46.200 --> 00:01:48.840
we are using the second entry just to save

00:01:48.840 --> 00:01:51.740
the return from func, whenever that happens. And func

00:01:51.740 --> 00:01:54.098
itself could be calling a lot of functions. So

00:01:54.098 --> 00:01:57.617
the don't push approach basically spending entries on kind

00:01:57.617 --> 00:02:00.515
of long-term things that need to be remembered so

00:02:00.515 --> 00:02:03.275
that we can finally save a misprediction once we

00:02:03.275 --> 00:02:07.954
reached the return point from the large function. In contrast,

00:02:07.954 --> 00:02:10.738
the wrap around approach is going to push

00:02:10.738 --> 00:02:14.479
this, push this, push this thus overwriting this

00:02:14.479 --> 00:02:16.901
entry. So now what we are doing, is

00:02:16.901 --> 00:02:20.366
we are basically going to be correctly predicting calls

00:02:20.366 --> 00:02:23.138
to small functions and returns, and we can

00:02:23.138 --> 00:02:26.218
have many of those, in return for inaccurately

00:02:26.218 --> 00:02:30.222
predicting the final returns from large functions, because

00:02:30.222 --> 00:02:32.994
we have many more small function calls than

00:02:32.994 --> 00:02:36.620
large function calls. In the end, we are more

00:02:36.620 --> 00:02:39.702
effectively using the few entries we have. Pretty much here,

00:02:39.702 --> 00:02:41.934
we are kind of using the entry to save a

00:02:41.934 --> 00:02:45.318
misprediction over a very short period of time does this

00:02:45.318 --> 00:02:49.670
entry get utilized, and then, it relieves very quickly. Whereas

00:02:49.670 --> 00:02:52.590
here we're using an entry for a long time to

00:02:52.590 --> 00:02:55.210
save a single misprediction, and in the end we want

00:02:55.210 --> 00:02:58.320
to save as many mispredictions as we can. So that's

00:02:58.320 --> 00:03:01.120
why the wrap around approach works better

00:03:01.120 --> 00:03:04.720
because it ends up correctly predicting causal small

00:03:04.720 --> 00:03:07.200
functions, many of which we can have

00:03:07.200 --> 00:03:10.560
in return for not correctly predicting the return

00:03:10.560 --> 00:03:16.270
from large functions to main, et cetera. Another thing to keep in mind with the

00:03:16.270 --> 00:03:20.080
RAS is that it is a predictor, so

00:03:20.080 --> 00:03:23.190
either way we will be having some mispredictions.

00:03:23.190 --> 00:03:25.990
We are allowed to have mispredictions. All that will happen is

00:03:25.990 --> 00:03:28.590
that there will be a branch misprediction. Basically we will fetch the

00:03:28.590 --> 00:03:31.600
wrong instructions and have to recover from that. So, in the

00:03:31.600 --> 00:03:34.800
end, the discussion about what to do with the RAS, has to

00:03:34.800 --> 00:03:39.180
do with achieving a larger number of correct predictions. But neither

00:03:39.180 --> 00:03:42.538
of these two ways can actually do things perfectly. So, in the

00:03:42.538 --> 00:03:44.982
end we need to just choose which one gives us more correct

00:03:44.982 --> 00:03:48.362
predictions, and it turns out that the wrap around approach predicts better

00:03:48.362 --> 00:03:50.520
than the don't push approach. While

00:03:50.520 --> 00:03:52.830
both of them, result in mispredictions, anyway.

