WEBVTT
Kind: captions
Language: en-GB

00:00:00.000 --> 00:00:03.540
Yes, we've done a lot of stuff about
error correction in the past but it's

00:00:03.540 --> 00:00:08.340
been in a fairly crude way. You might
remember we did a cube, with two good

00:00:08.340 --> 00:00:13.710
codes on and some correction points
around it and all that. That was fine we

00:00:13.710 --> 00:00:18.300
had it like majority voting - you know -
the correct things you could 

00:00:18.300 --> 00:00:22.380
receive were either three 0s or three
1s. So [if] you get 011. What do

00:00:22.380 --> 00:00:27.539
you do? Well majority voting says it must
be the 111 option, but in doing

00:00:27.539 --> 00:00:31.980
that we didn't take account of *where* the
1s were in the code. There was no

00:00:31.980 --> 00:00:36.300
weighting as to whether the ones are on
the left or at the tail end on the right.

00:00:36.300 --> 00:00:41.399
I mean 101 would have been just the same,
you see, two 1s and one 0. And a lot of

00:00:41.399 --> 00:00:44.879
what we're going to talk about today is
very simply this: is if you look at your

00:00:44.879 --> 00:00:50.820
bit-pattern as having mathematical
structure underneath it and being powers

00:00:50.820 --> 00:00:57.030
of 2. Or that the positioning of the
things in the pattern matters. That's

00:00:57.030 --> 00:01:02.730
what we're going to find is the way to
developing more powerful codes and one

00:01:02.730 --> 00:01:08.790
very good way actually to show that and
you've all seen these is to use an example

00:01:08.790 --> 00:01:16.229
it's not based on modulo 2 it's based
on dividing by 11.  [The] International Standard

00:01:16.229 --> 00:01:24.689
Book Numbers [ISBNs] . Eleven is a prime number and,
believe me, by looking at those digits in

00:01:24.689 --> 00:01:29.610
the ISBN number - but weighting them
according to their position - it means

00:01:29.610 --> 00:01:33.479
that if one of them gets clobbered
- preferably not more than one - then you

00:01:33.479 --> 00:01:38.880
can say: "I can work out what it must have
been". Not by majority voting but by

00:01:38.880 --> 00:01:43.890
saying "Ah! it's damaged, and I know but
it's at position 6 counting from the left".

00:01:43.890 --> 00:01:47.700
That's the secret.
This is a system based on the prime

00:01:47.700 --> 00:01:51.899
number eleven. Now prime numbers as we
know are completely magic because every

00:01:51.899 --> 00:01:56.909
time you divide something into them
it won't divide - because prime numbers

00:01:56.909 --> 00:02:01.500
don't have factors! So, you divide 3
into 11 and you get "three 3s are 9

00:02:01.500 --> 00:02:07.680
remainder 2". You divide 5s into
11, you get "two 5s are 10, remainder 1"

00:02:07.680 --> 00:02:14.620
So, by dividing every
number less than 11, into 11, you generate

00:02:14.620 --> 00:02:19.390
all the possible remainders. don't you?
You might have a remainder of 0, if

00:02:19.390 --> 00:02:24.100
it really is 11. You might have a
remainder of 1, 2, 3, 4...  So, everything from

00:02:24.100 --> 00:02:30.240
0 to 10 is a possible remainder of
trying to divide things into [or by] 11.

00:02:30.240 --> 00:02:34.090
Mathematicians like to formalize
everything and give wonderful names. And

00:02:34.090 --> 00:02:38.170
once you've learnt about them of course
you can show off fearfully in the pub -

00:02:38.170 --> 00:02:41.710
until put in your place by a proper
mathematician - and say that you know what

00:02:41.710 --> 00:02:47.590
a 'field' is. Well, I'm going to be talking
about integers but including 0 at the

00:02:47.590 --> 00:02:59.880
bottom end. All the positive [integer] numbers 0 1
2 3 .... potentially going on for ever. 

00:02:59.880 --> 00:03:04.180
Right, what can we do with those integers? Can
we add them?  Yes.

00:03:04.180 --> 00:03:07.510
Can we subtract them - can we take one
from the other?

00:03:07.510 --> 00:03:15.670
Yes. Can we multiply - that's not too much
of a problem. And of course in the

00:03:15.670 --> 00:03:21.670
infinite set of integers you can do all
of these things but the one thing you

00:03:21.670 --> 00:03:27.180
can't do reliably is divide. Because
if [for example] you do 5/3

00:03:27.180 --> 00:03:34.990
it's not an integer! So, divide is a
problem, because very often you send

00:03:34.990 --> 00:03:40.960
yourself on a magical mystery tour
outside the field of integers. And you

00:03:40.960 --> 00:03:45.850
end up with a real number! So, what you can say,
then, is that if you want to play around

00:03:45.850 --> 00:03:51.610
with these things you really do need to
be able to do all four [operations]. But you'd like to

00:03:51.610 --> 00:03:57.760
be able to do all 4 things but still
stay within integer numbers.

00:03:57.760 --> 00:04:03.970
How can you rule out getting things like
3/5 or 1/7 and stuff like that?

00:04:03.970 --> 00:04:10.000
How can you focus in on those integer
divisions and make them always yield 

00:04:10.000 --> 00:04:15.490
something back in the original set? And
this comes out quite happily - so long as

00:04:15.490 --> 00:04:22.380
you're using primes - with modular
arithmetic. So, OK then,

00:04:22.380 --> 00:04:29.220
let's take not the infinite set of
primes plus zero, let's just do it - because

00:04:29.220 --> 00:04:34.940
ISBN works like this - modulo 11. 
Suppose we say we want to add

00:04:34.940 --> 00:04:47.010
7 plus 6, modulo 11. In other words it's
13 mod 11 and the rule is when you say

00:04:47.010 --> 00:04:52.920
'modulo 11' it means you divide 11 into it
take the remainder. 13 modulo 11 is of

00:04:52.920 --> 00:05:01.350
course 2. So it turns out for prime numbers
like 11 where you can generate every

00:05:01.350 --> 00:05:08.870
remainder from 0 up to 10 it's dead
easy to do. Certainly dead easy to do 'add'

00:05:08.870 --> 00:05:14.130
[and] 'subtract' because you just get, like,
clocks. You're, like, going around the circle,

00:05:14.130 --> 00:05:20.220
except it's an 11-position clock, not a
12-position clock. And everything is

00:05:20.220 --> 00:05:27.830
absolutely hunky-dory. It works just fine
for 'add' and 'subtract' and even 'multiply'.

00:05:27.830 --> 00:05:42.090
But, OK then, how does ... [whispers] how can 
you 'divide'? And does it work? And the answer

00:05:42.090 --> 00:05:46.230
is: "yes, you can make it work", but only if
it's a prime number you're using as your

00:05:46.230 --> 00:05:51.000
base of everything. And so what we ...
and this is relevant to understanding

00:05:51.000 --> 00:05:59.160
ISBNs, believe me. What you need
to be able to do is to say: "I want to be

00:05:59.160 --> 00:06:06.090
able for any two integers that I'm
looking at in here, to do 'a divided by b' ".

00:06:06.090 --> 00:06:09.930
And I want a meaningful answer and I
want an answer to come out in the

00:06:09.930 --> 00:06:16.440
range 0 - 10. How can I arrange to
do that? Well, the answer is to say that

00:06:16.440 --> 00:06:22.380
'a divided by b' is the same as a - and I'm
going to use dot for multiply, OK?

00:06:22.380 --> 00:06:29.040
Now would you agree with that?  'a divided by b'
is the same thing as 'a multiplied by 1/b'.

00:06:29.040 --> 00:06:34.080
OK, so when you multiply out it's
a/b. So what the problem comes down

00:06:34.080 --> 00:06:39.410
to, then, is: " ...  can you find the inverse of any

00:06:39.410 --> 00:06:43.010
number"?  What does that mean? 
Well, yes you can.

00:06:43.010 --> 00:06:50.960
Let's take some number x in the range 1
to 11. Actually the range [is] 1 to 10 because

00:06:50.960 --> 00:06:55.370
it's just the remainders that you can
get, if you see what I mean. For every one

00:06:55.370 --> 00:07:01.580
of these things I want to find a
meaningful inverse, so that when x and

00:07:01.580 --> 00:07:08.780
1/x are multiplied together they will
make 1, modulo this 11 thing. Well, if

00:07:08.780 --> 00:07:15.770
you've got the number 1 it is its own
inverse. That's dead easy. OK, but you've

00:07:15.770 --> 00:07:22.910
got 2. How would you do 1/2 ?  Well
the answer is - looking back at this thing

00:07:22.910 --> 00:07:28.040
where it's 'a'  times '1/b',  we are
trying to find that. We're saying what

00:07:28.040 --> 00:07:36.680
for the given 'a' what can we multiply it
by such that when we work it out, modulo

00:07:36.680 --> 00:07:47.540
11, it will yield a remainder of 2 ?
[correction: a remainder of 1]
Think about it. If I put in 6 here I'm

00:07:47.540 --> 00:07:57.110
gonna multiply and then divide by 11. 
6 x 2 [is] 12. Divide by 11?
&gt;&gt; Sean: It's gonna be 1 remainder ...

00:07:57.110 --> 00:08:02.240
&gt;&gt; DFB: That's what you want!  You want
a remainder of 1. We got a remainder

00:08:02.240 --> 00:08:09.650
of 1 - out of 2 - by multiplying it by 6 to
make it 12 then dividing by 11. That's a

00:08:09.650 --> 00:08:13.670
remainder of 1. But that's the definition
of the inverse, right? We're trying to

00:08:13.670 --> 00:08:18.350
find '1/b' and by definition 'b' times
'1/b'is going to come to be 1.

00:08:18.350 --> 00:08:23.510
These are all the possible remainders
that you have in modulo-11 arithmetic.

00:08:23.510 --> 00:08:29.330
If you say: "Well, I've got 2 but what's
the something to multiply 2 by such that when I

00:08:29.330 --> 00:08:37.130
divide by 11, in the end, it comes out to
be to be 1 ?".  6 * 2 = 12;  12 / 11 goes once

00:08:37.130 --> 00:08:42.560
remainder 1. So it's the `remainder 1' that matters. 
What about 3? How would we turn 3 into being 12?

00:08:42.560 --> 00:08:46.480
&gt;&gt; Sean: How do you turn 3 into being 12 ?

00:08:46.480 --> 00:08:53.410
&gt;&gt; DFB: what do you multiply it by?
&gt;&gt; Sean: 4 ?
&gt;&gt; DFB:  Yep! so do you agree that if you 
multiply 3 by 4 you get 12?

00:08:53.410 --> 00:08:57.579
Divide it by 11 - it's got a remainder of 1. 
We're inverting things you see.  The

00:08:57.579 --> 00:09:03.040
remainder is 1. How do you turn 4 into 12?
&gt;&gt; Sean:  3
&gt;&gt; DFB: 3.  Well, of course, you see this property

00:09:03.040 --> 00:09:06.519
straight away: if 3 inverts as 4 then 4 inverts as 3.

00:09:06.519 --> 00:09:13.209
Ah! now come on: 5.  How can you turn 5 into
12?  You can't.
&gt;&gt; Sean: So, you've got to go higher?

00:09:13.209 --> 00:09:19.360
&gt;&gt; DFB: Yes!
&gt;&gt; Sean: Right - so you go to what ... ?
&gt;&gt; DFB: You've got to make it be one more 
than a multiple of 11.

00:09:19.360 --> 00:09:35.980
&gt;&gt; Sean: [calculating] 25,  30, 35, 45 ... is 
that too far?  If we got to 45 that would have a 
remainder of 1, wouldn't it?
&gt;&gt; DFB: It would indeed! So how many 5s

00:09:35.980 --> 00:09:44.439
are there in 45?  
&gt;&gt; Sean: 9. 
&gt;&gt; DFB: Sean, You're an undiscovered maths genius, mate!
Look at that! That's it! It says 9 *  5s are 45 works!

00:09:44.439 --> 00:09:48.819
Because if you divide back by 11
4 * 11s are 44 - remainder 1.

00:09:48.819 --> 00:09:52.990
It's the remainder 1 you want.  to know that you've
inverted it correctly. Next one:

00:09:52.990 --> 00:10:05.160
how do you make 6 work?
&gt;&gt; Sean: Well, we'll invert a 2 ?
&gt;&gt; DFB: Yes, exactly. You have done [it].  If 2 becomes 6 
[then] 6 becomes 2.  [What about] 7 ?

00:10:05.160 --> 00:10:15.250
&gt;&gt; Sean: [calculates] 14, 21, 28, 35, 42, 49, 56
&gt;&gt; DFB:  This one's quite a tough one. Keep going!
Seven eights are 56 but if you divide that by

00:10:15.250 --> 00:10:24.160
the 11 it goes 5.  5 * 11 = 55 remainder 1. So the
answer there is 7 goes to 8. [So] 8 goes

00:10:24.160 --> 00:10:33.279
to 7. What about 9?
&gt;&gt; Sean: Yes, 9 has got to be 5, right?
&gt;&gt; DFB: Yes 9 has got to be 5, because 5 was 9 .
And 10?  That's its own inverse.

00:10:33.279 --> 00:10:39.910
Because 10 into 11 ? It goes once
remainder 1. What you're saying is that

00:10:39.910 --> 00:10:45.430
there is a way to find the inverse of
something, so therefore you can do

00:10:45.430 --> 00:10:54.790
division within a finite field.
And it will work so long as it's a prime.

00:10:54.790 --> 00:10:58.570
&gt;&gt; Sean: so, at the moment because I'm just trying to
tie this back into the computer science

00:10:58.570 --> 00:11:02.860
angle.  Would this be connected to
making sure your program can actually do

00:11:02.860 --> 00:11:07.870
what it's being asked to do?
&gt;&gt; DFB: it's connected to being able, using this

00:11:07.870 --> 00:11:14.620
kind of structures, to muck about with
the codes that you allocate to something

00:11:14.620 --> 00:11:20.340
and depending on the nature of the
remainders and are the remainders correct

00:11:20.340 --> 00:11:25.360
then you can do error correction. If the
remainder of something or other you've

00:11:25.360 --> 00:11:28.630
done doesn't come to be 0, something's
gone wrong.

00:11:28.630 --> 00:11:32.470
And this is all part and parcel of it. I think
the easiest way now in is to say:

00:11:32.470 --> 00:11:38.290
"Do you really need this for ISBN?" 
Yes, you do. [The]  first thing to remember about

00:11:38.290 --> 00:11:43.990
ISBN is the publishers who use
them put arbitrary hyphens in for their

00:11:43.990 --> 00:11:49.540
own purposes. You don't need to bother
about the hyphens, as far as the maths is

00:11:49.540 --> 00:11:54.280
concerned! Now,  what I'm going to do here
is instead of doing one that works

00:11:54.280 --> 00:11:59.770
straight away, I'm going to put one here
where I'm just using x to mean "I can't

00:11:59.770 --> 00:12:06.550
read that digit - it's been printed badly".
[Or] they put a tick mark there, that can't

00:12:06.550 --> 00:12:11.110
be right; Oh no! they put a square black
blob in there, I don't know what the heck ...

00:12:11.110 --> 00:12:16.690
it's just got damaged. Can we put the
damage right and like I say, don't worry

00:12:16.690 --> 00:12:23.800
at all about the hyphens.
I think 0 means it's English language

00:12:23.800 --> 00:12:27.340
and then every publisher has a two digit
code of their own, and all that kind of stuff.

00:12:27.340 --> 00:12:32.470
So here it is but the way that this
works, and is just an example of using an

00:12:32.470 --> 00:12:38.290
underlying structure, this does not mean
I mean ... well, how many things do we have

00:12:38.290 --> 00:12:42.850
here? 10, 11 digits? I mean, it's not
twenty billion or anything like that

00:12:42.850 --> 00:12:47.350
reading left to right. It doesn't ... it's
not powers of 10 [that] it's based on. You go

00:12:47.350 --> 00:12:56.010
from the left and you, basically, say this
has a weight of 1, 2, 3, 4, 5, 6 ...

00:12:56.010 --> 00:13:02.180
5 has a weight of 7; 8, 9, 10

00:13:02.180 --> 00:13:11.000
OK -so what we now do is we say there's a
0 with a weight of 1. [So] 1 * 0

00:13:11.000 --> 00:13:18.870
plus the 2 with a weight of 2, plus
0 with a weight of 3, plus 1 with

00:13:18.870 --> 00:13:26.850
a weight of 4, plus 1 with a weight
of 5, plus x with a weight of 6. 
x [is] the digit we don't know.

00:13:26.850 --> 00:13:41.430
Plus 7 * 5, plus 8 * 0 plus 9 * 2, plus 10 * 7.

00:13:41.430 --> 00:13:48.000
Due to earlier pre-calculation I can tell
you that when you add all that up, and

00:13:48.000 --> 00:13:58.830
you take the answer modulo 11, you will
end up with 6x + 4, And we know that

00:13:58.830 --> 00:14:04.140
if an International Standard Book Number
is correct, then you do this weighted

00:14:04.140 --> 00:14:08.880
addition. You take it modulo eleven and
the answer will be 0, if it hasn't been

00:14:08.880 --> 00:14:13.860
damaged. Well, this has been damaged we
don't know what x is so we can say

00:14:13.860 --> 00:14:21.510
straight away 6x + 4 must equal 0,
to make it right modulo 11. So, what you

00:14:21.510 --> 00:14:30.600
have to say then is 6x = -4, so
x = -4/6 (all modulo 11) so

00:14:30.600 --> 00:14:35.790
what does -4 mean? Well, you look about
what you have to do with that to make it

00:14:35.790 --> 00:14:47.040
work modulo 11 [click back 4 notches on 
the modulo-11 clockface on screen]
It's 7. OK,  so this is the
same as 7 * 6 ^ (-1).

00:14:47.040 --> 00:14:51.690
Now, don't you dare tell me you don't need to
be able to invert integers even to do an

00:14:51.690 --> 00:14:57.450
ISBN! Remember we did all that inversion
table thing and if I can look back on to

00:14:57.450 --> 00:15:07.140
my previous sheet, 1 / 6 is 2 (mod 11)
7 * 2 = 14, divided by 11 it gives

00:15:07.140 --> 00:15:12.670
you the 3. So, x = 3. 
&gt;&gt; Sean: Going back to that original

00:15:12.670 --> 00:15:18.070
equation there 6x * 4, so that
would be 18 + 4, which is 22 which

00:15:18.070 --> 00:15:22.180
is basically 11. 
&gt;&gt; DFB: Oh yes yes!
Divided by it,  it's two, goes twice

00:15:22.180 --> 00:15:26.230
remainder 0.  Yeah, thanks for that.
That's the way to check it out. It does come

00:15:26.230 --> 00:15:30.310
to 22 which is exactly divisible by 11.
The remainder is zero.

00:15:30.310 --> 00:15:36.220
End of story. It's now correct. So here was
a wonderful example, really - although it

00:15:36.220 --> 00:15:42.820
came later than other developments - of
how just putting some structure on the

00:15:42.820 --> 00:15:48.790
digits and saying: "Oh! it's not only just
that it's x - it's in position, you know,

00:15:48.790 --> 00:15:54.940
position number 6 counting from one
from the left, and by giving a different

00:15:54.940 --> 00:15:58.779
weighting to the integers, according to
where they are in the left-to-right

00:15:58.779 --> 00:16:02.709
sequence. Even at the very least it will
tell you if an error has occurred. If

00:16:02.709 --> 00:16:06.880
you just interchange two digits - which
is a classic thing to get wrong - if you

00:16:06.880 --> 00:16:11.079
swap over two digits then the weights
become wrong, compared to what it should

00:16:11.079 --> 00:16:15.160
be, and it won't have a remainder of 0
any more. This situation we're doing here

00:16:15.160 --> 00:16:22.360
it will detect an error but it can't
correct it - unless you know where the

00:16:22.360 --> 00:16:28.300
problem place is, that you're not sure
about. Well, we do know where the problem

00:16:28.300 --> 00:16:32.170
place is that we're not sure about!. It's at
the 6th position counting from the left

00:16:32.170 --> 00:16:36.579
and we knew it had been clobbered! So,
you can correct so long as you know 

00:16:36.579 --> 00:16:41.140
which position it is that that has been
clobbered. Technically, this is known in

00:16:41.140 --> 00:16:45.519
the coding theory trade as an 'erasure'.
What it means is that the proper value has

00:16:45.519 --> 00:16:50.769
been clobbered. Basically we can wrap up
now and say: "Well, more or less, we're well

00:16:50.769 --> 00:16:57.550
on the way to finding the answer. You can
put structures on modulo certain prime

00:16:57.550 --> 00:17:01.269
numbers and you can do the most amazing
recovery tricks!" And it's all down to

00:17:01.269 --> 00:17:08.760
prime numbers. But then you say: "Well this
stuff about being able to

00:17:08.760 --> 00:17:14.230
divide - being able to invert things. Does
that only work with finite fields at the

00:17:14.230 --> 00:17:21.400
prime numbers. Not quite. There is a let-out
clause which is wonderful.

00:17:21.400 --> 00:17:25.190
Which makes life heaven 
for Coding Theorists and indeed for

00:17:25.190 --> 00:17:29.480
Computer Scientists. It comes something
like this:  it's saying prime numbers

00:17:29.480 --> 00:17:35.660
certainly work - will always work. Can you
do any better? An undiscovered genius in

00:17:35.660 --> 00:17:40.910
1820 - long before Babbage was even doing the
Analytical Engine - was looking at all

00:17:40.910 --> 00:17:46.880
this stuff saying: "Could I find a meaningful 
inverse for something

00:17:46.880 --> 00:17:53.930
that's not a prime, but is almost like a
prime?" And after much work this guy - very

00:17:53.930 --> 00:17:59.450
sad - he got himself shot in a duel.
Pistols at Dawn. Evariste Galois. And what

00:17:59.450 --> 00:18:05.660
he said was: "I can make this work and
find you an inverse, not just for primes

00:18:05.660 --> 00:18:11.240
but for anything that's a *power* of a
prime. I'm not gonna call that an ordinary

00:18:11.240 --> 00:18:15.500
field I'm going to call it a 'Galois Field' ".
So just think: "What's the smallest

00:18:15.500 --> 00:18:23.960
possible real prime - no!  not real prime! - 
'genuine prime'. Two! In the old days - the really

00:18:23.960 --> 00:18:27.650
old days - one would have  thought: "Well, two's prime
but that's all you can do ... You can't do

00:18:27.650 --> 00:18:34.370
anything else with it because it's .... Galois said 'No -
any power of two I can

00:18:34.370 --> 00:18:41.200
make it be magic. 2 cubed; 2  to the fourth
any positive integer power of two. And

00:18:41.200 --> 00:18:45.020
computer scientists, not yet born, if
they'd been there in 1820, you would

00:18:45.020 --> 00:18:48.380
have said: "Oh right so  can use a whole byte!
I can use 2 ^8 . Yeah?!

00:18:48.380 --> 00:18:54.140
Ad you'll find me an inverse and all that? 
Yes! yes! yes! yes! yes!

00:18:54.140 --> 00:18:58.310
And of course real mathematicians  say: "Boring!
boring! you know - computer scienctists

00:18:58.310 --> 00:19:03.320
obsessing about powers of two. But it is
magic. Because it doesn't matter whether

00:19:03.320 --> 00:19:08.230
you're taking hex nibbles, 2 to the power
4, whether you're taking bytes as you

00:19:08.230 --> 00:19:13.840
commonly want to do. You can have your
byte as being your  unit of currency' and

00:19:13.840 --> 00:19:18.710
instead of it not working - because it's
an even number - you can make it work

00:19:18.710 --> 00:19:25.370
using Galois techniques  because it's a *power*
of 2. So that, really, is the baseline

00:19:25.370 --> 00:19:29.480
knowledge you need. Because Reed-Solomon
codes and everything. They're done in

00:19:29.480 --> 00:19:37.010
computers, they involve powers of 2. 
2^8 th is 256. It can be made to work

00:19:37.010 --> 00:19:44.320
but at the expense of an enormous amount
of modular arithmetic to do inverses on

00:19:44.320 --> 00:19:49.310
everything from 0 to 255. Using
Galois techniques you end up with great

00:19:49.310 --> 00:19:54.860
tables. Instead of just saying: modulo q, where q is a power 
[correction: where q is a prime] Galois said: I am

00:19:54.860 --> 00:19:58.820
now letting you have q = p ^ h. Of course
the prime on its won is a special case.

00:19:58.820 --> 00:20:03.520
That's p ^ 1. Yeah? So p ^h,
where h is any integer power.

00:20:03.520 --> 00:20:10.520
Wonderful, but like I say the expense
that comes in with this is  huge, huge,

00:20:10.520 --> 00:20:16.430
huge amounts of modular arithmetic beinng
done on very large numbers. But we have

00:20:16.430 --> 00:20:20.900
computers! Do we care? With this paradise
opened up to us now

00:20:20.900 --> 00:20:25.220
Galois is saying: " I can make any power of
2 work. And I can give you a

00:20:25.220 --> 00:20:30.470
multiplicative inverse - which is what you
want to make all your calculations work

00:20:30.470 --> 00:20:34.370
correctly in this closed space". And you
say: "Well even for 2 ^ 8 = 256

00:20:34.370 --> 00:20:39.620
and we're using a byte?" Yes, yes
that works fine! There's a lot of it.  this

00:20:39.620 --> 00:20:44.990
leads to Reed-Solomon codes for CD error
correction. It also leads to QR codes

00:20:44.990 --> 00:20:49.580
which are just stuck on everything now. They
use methods involving this sort of

00:20:49.580 --> 00:20:55.490
manipulation. Like a scuff on a QR code
- can you recover from it? - and an even bigger scuff

00:20:55.490 --> 00:20:59.000
on a CD.
&gt;&gt; Sean: Yeah I think we need to look at
a CD. Are you gonna get one out of the car?

00:20:59.000 --> 00:21:07.940
&gt;&gt; DFB: I think that's a good idea. Right - hey
ho - this is gonna sort out ... oh dear! I wonder

00:21:07.940 --> 00:21:13.270
what age group who are gonna love this: 
"The Very Best of Little Feat" :-)

