WEBVTT
Kind: captions
Language: en

00:00:02.840 --> 00:00:04.265
Batch, batch, batch!

00:00:04.265 --> 00:00:06.140
It's really all you hear
the networking folks

00:00:06.140 --> 00:00:07.679
ramble on about nowadays.

00:00:07.679 --> 00:00:09.720
Almost like they're trying
to tell you something.

00:00:09.720 --> 00:00:13.100
My name is Colt McAnlis, and
well, the truth is, they are.

00:00:13.100 --> 00:00:14.850
We all know that
networking is the biggest

00:00:14.850 --> 00:00:16.239
offender when it
comes to battery

00:00:16.239 --> 00:00:17.750
drain on mobile devices.

00:00:17.750 --> 00:00:20.730
I mean, consider the cellular
radio in any of your phones.

00:00:20.730 --> 00:00:22.510
After a request,
it'll still wait

00:00:22.510 --> 00:00:24.790
around for about an
extra 20 to 60 seconds,

00:00:24.790 --> 00:00:26.920
keeping the chip awake,
drawing power just

00:00:26.920 --> 00:00:28.920
in case a server
response comes in.

00:00:28.920 --> 00:00:31.740
If nothing comes in, only
then will it go back to sleep.

00:00:31.740 --> 00:00:33.426
And in the super
worst case scenario,

00:00:33.426 --> 00:00:34.800
your app can end
up in a position

00:00:34.800 --> 00:00:36.830
where each one of
its network requests

00:00:36.830 --> 00:00:39.040
wakes up the cell
radio and pays the cost

00:00:39.040 --> 00:00:40.760
to keep it awake over time.

00:00:40.760 --> 00:00:43.720
Batching is the ideal way
to coalesce these requests

00:00:43.720 --> 00:00:45.990
together so you only have
to pay the wake up and keep

00:00:45.990 --> 00:00:47.310
alive penalties once.

00:00:47.310 --> 00:00:49.310
But the big question
here is, how do you go

00:00:49.310 --> 00:00:51.560
about actually doing batching?

00:00:51.560 --> 00:00:53.475
Well, first understand
that any requests that

00:00:53.475 --> 00:00:56.100
are generated as a result
of a user action, generally

00:00:56.100 --> 00:00:57.940
need to be handled right now.

00:00:57.940 --> 00:01:00.320
Everything else though,
is completely fair game.

00:01:00.320 --> 00:01:02.630
Basically, if there is
even a slight chance that

00:01:02.630 --> 00:01:04.501
delaying a request
won't cause the user

00:01:04.501 --> 00:01:06.000
to throw their phone
out the window,

00:01:06.000 --> 00:01:07.710
then you should
be considering it.

00:01:07.710 --> 00:01:10.060
Now from a code
perspective, the easiest way

00:01:10.060 --> 00:01:12.210
to implement batching is
to basically intercept

00:01:12.210 --> 00:01:14.870
any outbound requests and
rather than executing them

00:01:14.870 --> 00:01:18.750
immediately, store them in a
pending list of actions to be

00:01:18.750 --> 00:01:19.970
made in the future.

00:01:19.970 --> 00:01:23.360
This could be simple as a
queue object or as complex

00:01:23.360 --> 00:01:25.959
as a content provider
for serializing them

00:01:25.959 --> 00:01:28.000
to disk in case you're
worried about them getting

00:01:28.000 --> 00:01:29.610
lost when the app is terminated.

00:01:29.610 --> 00:01:31.020
But here is the tricky part.

00:01:31.020 --> 00:01:34.060
How do we know when to send
these pending requests?

00:01:34.060 --> 00:01:36.414
Well, you could just wait
until some threshold has

00:01:36.414 --> 00:01:38.330
been reached-- like 10
requests or something--

00:01:38.330 --> 00:01:40.130
and then purge your
list, waking up the radio

00:01:40.130 --> 00:01:41.210
and sending out the data.

00:01:41.210 --> 00:01:43.970
Which is a completely fine
way to approach the problem.

00:01:43.970 --> 00:01:46.800
But the truth is the system
is doing a ton of other things

00:01:46.800 --> 00:01:48.570
in the background,
and chances are

00:01:48.570 --> 00:01:50.210
that before your
threshold is reached,

00:01:50.210 --> 00:01:52.110
the cellular radio will
be turned on in order

00:01:52.110 --> 00:01:54.000
to complete some other task.

00:01:54.000 --> 00:01:55.490
Therefore, it makes
a lot of sense

00:01:55.490 --> 00:01:58.540
to try and piggyback these
operations when they happen.

00:01:58.540 --> 00:02:00.350
Basically, you can
set up this code

00:02:00.350 --> 00:02:02.021
to give your app
a callback anytime

00:02:02.021 --> 00:02:03.770
the networking hardware
has been fired up.

00:02:03.770 --> 00:02:06.340
When this happens, go ahead
and purge your pending queue.

00:02:06.340 --> 00:02:08.869
But things might get a little
bit more complex than that.

00:02:08.869 --> 00:02:10.910
So what if you want to
wait until you're on Wi-Fi

00:02:10.910 --> 00:02:12.460
or plugged into a power source?

00:02:12.460 --> 00:02:13.890
Or something crazy,
like you want

00:02:13.890 --> 00:02:16.300
to wait until the user isn't
riding a bike or in a car

00:02:16.300 --> 00:02:17.160
anymore.

00:02:17.160 --> 00:02:20.970
This is exactly why you need
to use GCM network manager.

00:02:20.970 --> 00:02:23.290
This is a Google
Play services API

00:02:23.290 --> 00:02:25.660
which helps to schedule
network oriented tasks

00:02:25.660 --> 00:02:27.410
and handle batching for you.

00:02:27.410 --> 00:02:29.550
This greatly simplifies
the implementation

00:02:29.550 --> 00:02:31.450
of common patterns
such as waiting

00:02:31.450 --> 00:02:34.437
for networking connectivity,
network retries and backoff.

00:02:34.437 --> 00:02:36.020
Basically, all the
good stuff you need

00:02:36.020 --> 00:02:38.502
with one single helpful API.

00:02:38.502 --> 00:02:40.960
Now, if you don't know what
your request profile looks like

00:02:40.960 --> 00:02:44.260
or you're in a bad spot, check
out the networking monitor tool

00:02:44.260 --> 00:02:45.670
inside of Android Studio.

00:02:45.670 --> 00:02:47.860
This tool will help
you see how often

00:02:47.860 --> 00:02:49.770
inbound and outbound
requests happen

00:02:49.770 --> 00:02:51.980
and the size of each request.

00:02:51.980 --> 00:02:54.110
Batching is one of the
fundamental techniques that

00:02:54.110 --> 00:02:56.450
can improve your application
performance for users,

00:02:56.450 --> 00:02:59.170
but it's not the only networking
technique you need to know.

00:02:59.170 --> 00:03:01.586
Which is why you need to check
out the rest of the Android

00:03:01.586 --> 00:03:03.910
Performance Patterns content
and don't forget to join

00:03:03.910 --> 00:03:05.760
the Google+ community as well.

00:03:05.760 --> 00:03:08.480
So keep calm, profile your
code, and always remember--

00:03:08.480 --> 00:03:09.310
perf matters.

00:03:09.310 --> 00:03:12.360
[MUSIC PLAYING]

