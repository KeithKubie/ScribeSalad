WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.039
[MUSIC PLAYING]

00:00:02.039 --> 00:00:03.580
When it comes to
performance, there's

00:00:03.580 --> 00:00:05.730
some stuff you can
control, and then there's

00:00:05.730 --> 00:00:08.631
other stuff that you just have
to be aware of and work around.

00:00:08.631 --> 00:00:09.630
My name is Colt McAnlis.

00:00:09.630 --> 00:00:12.790
And CPU frequency scaling is
one of those harsh realities

00:00:12.790 --> 00:00:15.290
of mobile development that
you can't control, but can

00:00:15.290 --> 00:00:17.580
have a significant impact
on your application.

00:00:17.580 --> 00:00:19.760
See, in order to
conserve battery,

00:00:19.760 --> 00:00:21.450
Android devices can
reduce the amount

00:00:21.450 --> 00:00:24.120
of voltage supplied to the CPU.

00:00:24.120 --> 00:00:26.480
This means that the processor
will draw less energy

00:00:26.480 --> 00:00:29.370
to execute code, with the
side effect of slowing down

00:00:29.370 --> 00:00:30.530
your CPU in the process.

00:00:30.530 --> 00:00:33.310
Essentially, your code
will take longer to run.

00:00:33.310 --> 00:00:35.640
And this is a very
regular occurrence.

00:00:35.640 --> 00:00:37.900
Your Android device
is constantly

00:00:37.900 --> 00:00:39.600
trying to throttle
voltage to the CPU

00:00:39.600 --> 00:00:41.720
to save as much
energy as possible.

00:00:41.720 --> 00:00:45.680
The interactive CPU
governor that Android uses

00:00:45.680 --> 00:00:47.470
constantly checks
the CPU workload

00:00:47.470 --> 00:00:49.640
to determine if the
frequency can be scaled back

00:00:49.640 --> 00:00:51.270
or if it needs to be ramped up.

00:00:51.270 --> 00:00:54.680
The ramifications of such
are a little weird to you,

00:00:54.680 --> 00:00:55.500
as a developer.

00:00:55.500 --> 00:00:57.750
Firstly, when the
frequency gets throttled,

00:00:57.750 --> 00:00:59.790
you'll notice that normal
operations take longer

00:00:59.790 --> 00:01:00.480
to execute.

00:01:00.480 --> 00:01:03.150
So don't be surprised if,
suddenly, your frame time

00:01:03.150 --> 00:01:05.360
spikes start to shoot
above 16 milliseconds.

00:01:05.360 --> 00:01:07.490
And secondly,
changes in frequency

00:01:07.490 --> 00:01:10.120
take about 20
milliseconds to occur,

00:01:10.120 --> 00:01:13.110
meaning that if you come right
out of a low-frequency state,

00:01:13.110 --> 00:01:16.030
the first frame of rendering
may be slower due to the fact

00:01:16.030 --> 00:01:18.371
that the CPU hasn't had
a chance to ramp up yet.

00:01:18.371 --> 00:01:20.120
In general, you need
to remember that this

00:01:20.120 --> 00:01:21.725
is working as intended.

00:01:21.725 --> 00:01:24.910
A battery is everything
on mobile development.

00:01:24.910 --> 00:01:27.940
And to the Android system,
it does a really good job

00:01:27.940 --> 00:01:30.040
of balancing processing
speed versus battery

00:01:30.040 --> 00:01:31.912
drain on your
behalf, so you really

00:01:31.912 --> 00:01:33.120
don't need to worry about it.

00:01:33.120 --> 00:01:34.380
And in fact, there's
a whole bunch

00:01:34.380 --> 00:01:36.180
of things it does to
avoid this problem,

00:01:36.180 --> 00:01:38.097
where performance is
critical, like bringing

00:01:38.097 --> 00:01:40.430
the frequency all the way up
as soon as the user touches

00:01:40.430 --> 00:01:41.070
the screen.

00:01:41.070 --> 00:01:43.670
But other times, like if
you're using a service

00:01:43.670 --> 00:01:46.500
or responding to an event,
you can see these issues

00:01:46.500 --> 00:01:47.440
manifest themselves.

00:01:47.440 --> 00:01:51.060
Just keep in mind that if you
start seeing frame rate spikes

00:01:51.060 --> 00:01:53.700
or things taking longer than
they should be for no reason,

00:01:53.700 --> 00:01:57.070
that frequency use scaling
could be the culprit.

00:01:57.070 --> 00:01:59.490
To confirm this, you can
run a Systrace profile,

00:01:59.490 --> 00:02:02.110
enabling the CPU frequency flag.

00:02:02.110 --> 00:02:04.370
You'll notice a
nice bar at the top

00:02:04.370 --> 00:02:06.760
that details what the
current frequency values are,

00:02:06.760 --> 00:02:08.520
so you can see
how, overall, it's

00:02:08.520 --> 00:02:10.288
impacting your performance.

00:02:10.288 --> 00:02:12.300
And performance is all
about understanding

00:02:12.300 --> 00:02:14.450
what the hardware is doing
and how your code should

00:02:14.450 --> 00:02:15.650
react accordingly.

00:02:15.650 --> 00:02:18.090
In this case, there's not
really much you can do.

00:02:18.090 --> 00:02:21.100
But in all the other cases,
there's a ton of things

00:02:21.100 --> 00:02:21.976
that you can work on.

00:02:21.976 --> 00:02:24.558
So make sure you check out the
rest of the Android Performance

00:02:24.558 --> 00:02:25.240
Patterns videos.

00:02:25.240 --> 00:02:28.110
And don't forget to join our
Google+ community for other

00:02:28.110 --> 00:02:30.050
great tips and tricks.

00:02:30.050 --> 00:02:32.920
So keep calm, profile your
code, and always remember,

00:02:32.920 --> 00:02:35.020
perf matters.

00:02:35.020 --> 00:02:38.070
[MUSIC PLAYING]

