WEBVTT
Kind: captions
Language: en

00:00:01.420 --> 00:00:03.690
[Music]

00:00:03.690 --> 00:00:03.700
[Music]
 

00:00:03.700 --> 00:00:07.090
[Music]
hello everyone and welcome to cotton

00:00:07.090 --> 00:00:07.100
hello everyone and welcome to cotton
 

00:00:07.100 --> 00:00:10.780
hello everyone and welcome to cotton
under the covers under the hood we've

00:00:10.780 --> 00:00:10.790
under the covers under the hood we've
 

00:00:10.790 --> 00:00:13.120
under the covers under the hood we've
called it many many names we'll call it

00:00:13.120 --> 00:00:13.130
called it many many names we'll call it
 

00:00:13.130 --> 00:00:15.310
called it many many names we'll call it
this one right now we want to look at

00:00:15.310 --> 00:00:15.320
this one right now we want to look at
 

00:00:15.320 --> 00:00:17.650
this one right now we want to look at
the way some of the futures in Colin

00:00:17.650 --> 00:00:17.660
the way some of the futures in Colin
 

00:00:17.660 --> 00:00:19.720
the way some of the futures in Colin
work I'm Chet Haase and I'm all Maggie

00:00:19.720 --> 00:00:19.730
work I'm Chet Haase and I'm all Maggie
 

00:00:19.730 --> 00:00:22.480
work I'm Chet Haase and I'm all Maggie
and let's do this thing

00:00:22.480 --> 00:00:22.490
and let's do this thing
 

00:00:22.490 --> 00:00:24.400
and let's do this thing
yeah and we gave this talk before or

00:00:24.400 --> 00:00:24.410
yeah and we gave this talk before or
 

00:00:24.410 --> 00:00:26.290
yeah and we gave this talk before or
like a few weeks ago in France the

00:00:26.290 --> 00:00:26.300
like a few weeks ago in France the
 

00:00:26.300 --> 00:00:27.970
like a few weeks ago in France the
difference is today we have people from

00:00:27.970 --> 00:00:27.980
difference is today we have people from
 

00:00:27.980 --> 00:00:30.820
difference is today we have people from
JetBrains in the audience so a polygon I

00:00:30.820 --> 00:00:30.830
JetBrains in the audience so a polygon I
 

00:00:30.830 --> 00:00:32.350
JetBrains in the audience so a polygon I
said something very stupid so feel free

00:00:32.350 --> 00:00:32.360
said something very stupid so feel free
 

00:00:32.360 --> 00:00:35.130
said something very stupid so feel free
to yell at us it's fine

00:00:35.130 --> 00:00:35.140
to yell at us it's fine
 

00:00:35.140 --> 00:00:37.300
to yell at us it's fine
yeah so we'll see if we were actually

00:00:37.300 --> 00:00:37.310
yeah so we'll see if we were actually
 

00:00:37.310 --> 00:00:40.090
yeah so we'll see if we were actually
correct when we wrote the talks so Colin

00:00:40.090 --> 00:00:40.100
correct when we wrote the talks so Colin
 

00:00:40.100 --> 00:00:42.280
correct when we wrote the talks so Colin
very awesome language very cool lots of

00:00:42.280 --> 00:00:42.290
very awesome language very cool lots of
 

00:00:42.290 --> 00:00:43.870
very awesome language very cool lots of
interesting features you're doing it

00:00:43.870 --> 00:00:43.880
interesting features you're doing it
 

00:00:43.880 --> 00:00:44.139
interesting features you're doing it
again

00:00:44.139 --> 00:00:44.149
again
 

00:00:44.149 --> 00:00:46.569
again
you're taking my slide are you gonna go

00:00:46.569 --> 00:00:46.579
you're taking my slide are you gonna go
 

00:00:46.579 --> 00:00:48.580
you're taking my slide are you gonna go
Chet has this issue in the speaker notes

00:00:48.580 --> 00:00:48.590
Chet has this issue in the speaker notes
 

00:00:48.590 --> 00:00:50.500
Chet has this issue in the speaker notes
right here it says my name and he starts

00:00:50.500 --> 00:00:50.510
right here it says my name and he starts
 

00:00:50.510 --> 00:00:52.479
right here it says my name and he starts
talking and he keeps telling my slide

00:00:52.479 --> 00:00:52.489
talking and he keeps telling my slide
 

00:00:52.489 --> 00:00:54.220
talking and he keeps telling my slide
every time all right

00:00:54.220 --> 00:00:54.230
every time all right
 

00:00:54.230 --> 00:00:55.870
every time all right
so cartoon is awesome who's using cut in

00:00:55.870 --> 00:00:55.880
so cartoon is awesome who's using cut in
 

00:00:55.880 --> 00:00:58.990
so cartoon is awesome who's using cut in
here all right so we don't really have

00:00:58.990 --> 00:00:59.000
here all right so we don't really have
 

00:00:59.000 --> 00:01:00.639
here all right so we don't really have
to convince you that cutting is great

00:01:00.639 --> 00:01:00.649
to convince you that cutting is great
 

00:01:00.649 --> 00:01:03.130
to convince you that cutting is great
but just in case it's concise you have

00:01:03.130 --> 00:01:03.140
but just in case it's concise you have
 

00:01:03.140 --> 00:01:05.049
but just in case it's concise you have
less boilerplate you get powerful

00:01:05.049 --> 00:01:05.059
less boilerplate you get powerful
 

00:01:05.059 --> 00:01:06.760
less boilerplate you get powerful
extension libraries we write our own

00:01:06.760 --> 00:01:06.770
extension libraries we write our own
 

00:01:06.770 --> 00:01:08.859
extension libraries we write our own
there's a bunch of Android X or jetpack

00:01:08.859 --> 00:01:08.869
there's a bunch of Android X or jetpack
 

00:01:08.869 --> 00:01:10.870
there's a bunch of Android X or jetpack
extension libraries for various api is

00:01:10.870 --> 00:01:10.880
extension libraries for various api is
 

00:01:10.880 --> 00:01:13.419
extension libraries for various api is
platform or not fully compatible with

00:01:13.419 --> 00:01:13.429
platform or not fully compatible with
 

00:01:13.429 --> 00:01:14.679
platform or not fully compatible with
the java programming language and

00:01:14.679 --> 00:01:14.689
the java programming language and
 

00:01:14.689 --> 00:01:16.779
the java programming language and
therefore the android api s which makes

00:01:16.779 --> 00:01:16.789
therefore the android api s which makes
 

00:01:16.789 --> 00:01:18.160
therefore the android api s which makes
it very easy for you to adapt in your

00:01:18.160 --> 00:01:18.170
it very easy for you to adapt in your
 

00:01:18.170 --> 00:01:20.080
it very easy for you to adapt in your
application and it has a lot of modern

00:01:20.080 --> 00:01:20.090
application and it has a lot of modern
 

00:01:20.090 --> 00:01:21.879
application and it has a lot of modern
language features like co-routines check

00:01:21.879 --> 00:01:21.889
language features like co-routines check
 

00:01:21.889 --> 00:01:26.639
language features like co-routines check
what our core routines things alright

00:01:26.639 --> 00:01:26.649
what our core routines things alright
 

00:01:26.649 --> 00:01:31.870
what our core routines things alright
and it's always evolving but some of

00:01:31.870 --> 00:01:31.880
and it's always evolving but some of
 

00:01:31.880 --> 00:01:35.019
and it's always evolving but some of
these magical things in Kotlin really

00:01:35.019 --> 00:01:35.029
these magical things in Kotlin really
 

00:01:35.029 --> 00:01:37.239
these magical things in Kotlin really
are magical and mysterious how do those

00:01:37.239 --> 00:01:37.249
are magical and mysterious how do those
 

00:01:37.249 --> 00:01:39.370
are magical and mysterious how do those
things work especially since we're

00:01:39.370 --> 00:01:39.380
things work especially since we're
 

00:01:39.380 --> 00:01:41.289
things work especially since we're
compiling down to the same byte code

00:01:41.289 --> 00:01:41.299
compiling down to the same byte code
 

00:01:41.299 --> 00:01:43.839
compiling down to the same byte code
that runs other languages that don't

00:01:43.839 --> 00:01:43.849
that runs other languages that don't
 

00:01:43.849 --> 00:01:45.159
that runs other languages that don't
have these features so how does that

00:01:45.159 --> 00:01:45.169
have these features so how does that
 

00:01:45.169 --> 00:01:47.169
have these features so how does that
stuff work so that's the whole point of

00:01:47.169 --> 00:01:47.179
stuff work so that's the whole point of
 

00:01:47.179 --> 00:01:49.359
stuff work so that's the whole point of
the talk take a look on the inside and

00:01:49.359 --> 00:01:49.369
the talk take a look on the inside and
 

00:01:49.369 --> 00:01:50.589
the talk take a look on the inside and
see what's going on we're gonna take a

00:01:50.589 --> 00:01:50.599
see what's going on we're gonna take a
 

00:01:50.599 --> 00:01:53.190
see what's going on we're gonna take a
look at two different things right now

00:01:53.190 --> 00:01:53.200
look at two different things right now
 

00:01:53.200 --> 00:01:55.089
look at two different things right now
today we're going to look at how these

00:01:55.089 --> 00:01:55.099
today we're going to look at how these
 

00:01:55.099 --> 00:01:56.529
today we're going to look at how these
things work and we're also going to show

00:01:56.529 --> 00:01:56.539
things work and we're also going to show
 

00:01:56.539 --> 00:01:58.359
things work and we're also going to show
you some tools to use to get this

00:01:58.359 --> 00:01:58.369
you some tools to use to get this
 

00:01:58.369 --> 00:02:00.129
you some tools to use to get this
information basically the tools that we

00:02:00.129 --> 00:02:00.139
information basically the tools that we
 

00:02:00.139 --> 00:02:02.109
information basically the tools that we
use to discover this stuff we're not

00:02:02.109 --> 00:02:02.119
use to discover this stuff we're not
 

00:02:02.119 --> 00:02:03.370
use to discover this stuff we're not
going to do it in that order we're going

00:02:03.370 --> 00:02:03.380
going to do it in that order we're going
 

00:02:03.380 --> 00:02:05.289
going to do it in that order we're going
to do it in this order instead so first

00:02:05.289 --> 00:02:05.299
to do it in this order instead so first
 

00:02:05.299 --> 00:02:06.639
to do it in this order instead so first
we'll talk about the tools and then

00:02:06.639 --> 00:02:06.649
we'll talk about the tools and then
 

00:02:06.649 --> 00:02:10.550
we'll talk about the tools and then
we'll talk about the features so tools

00:02:10.550 --> 00:02:10.560
we'll talk about the features so tools
 

00:02:10.560 --> 00:02:12.590
we'll talk about the features so tools
alright so there are two tools you can

00:02:12.590 --> 00:02:12.600
alright so there are two tools you can
 

00:02:12.600 --> 00:02:14.059
alright so there are two tools you can
use the first one is looking at the

00:02:14.059 --> 00:02:14.069
use the first one is looking at the
 

00:02:14.069 --> 00:02:15.559
use the first one is looking at the
cutting byte code there's a special tool

00:02:15.559 --> 00:02:15.569
cutting byte code there's a special tool
 

00:02:15.569 --> 00:02:17.600
cutting byte code there's a special tool
for that in IntelliJ and Android studio

00:02:17.600 --> 00:02:17.610
for that in IntelliJ and Android studio
 

00:02:17.610 --> 00:02:19.790
for that in IntelliJ and Android studio
and the second one part of the same tool

00:02:19.790 --> 00:02:19.800
and the second one part of the same tool
 

00:02:19.800 --> 00:02:21.410
and the second one part of the same tool
is you can convert the byte code back to

00:02:21.410 --> 00:02:21.420
is you can convert the byte code back to
 

00:02:21.420 --> 00:02:23.210
is you can convert the byte code back to
the Java programming language which

00:02:23.210 --> 00:02:23.220
the Java programming language which
 

00:02:23.220 --> 00:02:25.340
the Java programming language which
sometimes is very helpful to understand

00:02:25.340 --> 00:02:25.350
sometimes is very helpful to understand
 

00:02:25.350 --> 00:02:26.630
sometimes is very helpful to understand
what's going on so you don't have to

00:02:26.630 --> 00:02:26.640
what's going on so you don't have to
 

00:02:26.640 --> 00:02:29.750
what's going on so you don't have to
decipher byte code yourself finally the

00:02:29.750 --> 00:02:29.760
decipher byte code yourself finally the
 

00:02:29.760 --> 00:02:31.670
decipher byte code yourself finally the
memory profiler so not about the byte

00:02:31.670 --> 00:02:31.680
memory profiler so not about the byte
 

00:02:31.680 --> 00:02:33.199
memory profiler so not about the byte
code itself but sometimes you know some

00:02:33.199 --> 00:02:33.209
code itself but sometimes you know some
 

00:02:33.209 --> 00:02:34.850
code itself but sometimes you know some
of those languages features may create

00:02:34.850 --> 00:02:34.860
of those languages features may create
 

00:02:34.860 --> 00:02:36.800
of those languages features may create
allocations which may or may not matter

00:02:36.800 --> 00:02:36.810
allocations which may or may not matter
 

00:02:36.810 --> 00:02:38.330
allocations which may or may not matter
depending on what you're doing what kind

00:02:38.330 --> 00:02:38.340
depending on what you're doing what kind
 

00:02:38.340 --> 00:02:39.890
depending on what you're doing what kind
of code you're writing which is a useful

00:02:39.890 --> 00:02:39.900
of code you're writing which is a useful
 

00:02:39.900 --> 00:02:41.690
of code you're writing which is a useful
tool to know about in general not just

00:02:41.690 --> 00:02:41.700
tool to know about in general not just
 

00:02:41.700 --> 00:02:44.870
tool to know about in general not just
in the context of this talk so here's an

00:02:44.870 --> 00:02:44.880
in the context of this talk so here's an
 

00:02:44.880 --> 00:02:47.870
in the context of this talk so here's an
example primitive types are handled a

00:02:47.870 --> 00:02:47.880
example primitive types are handled a
 

00:02:47.880 --> 00:02:50.090
example primitive types are handled a
little bit differently so in cutting

00:02:50.090 --> 00:02:50.100
little bit differently so in cutting
 

00:02:50.100 --> 00:02:52.490
little bit differently so in cutting
when you say this VAR i 0 equals 5

00:02:52.490 --> 00:02:52.500
when you say this VAR i 0 equals 5
 

00:02:52.500 --> 00:02:55.160
when you say this VAR i 0 equals 5
obviously you'd occurring in int so

00:02:55.160 --> 00:02:55.170
obviously you'd occurring in int so
 

00:02:55.170 --> 00:02:57.440
obviously you'd occurring in int so
capital I ain't it's not knowable so it

00:02:57.440 --> 00:02:57.450
capital I ain't it's not knowable so it
 

00:02:57.450 --> 00:02:59.870
capital I ain't it's not knowable so it
cannot be no and it's equivalent to the

00:02:59.870 --> 00:02:59.880
cannot be no and it's equivalent to the
 

00:02:59.880 --> 00:03:02.420
cannot be no and it's equivalent to the
lower case in the Java programming

00:03:02.420 --> 00:03:02.430
lower case in the Java programming
 

00:03:02.430 --> 00:03:04.009
lower case in the Java programming
language so it is still a primitive type

00:03:04.009 --> 00:03:04.019
language so it is still a primitive type
 

00:03:04.019 --> 00:03:06.170
language so it is still a primitive type
now if you specify the type yourself

00:03:06.170 --> 00:03:06.180
now if you specify the type yourself
 

00:03:06.180 --> 00:03:08.420
now if you specify the type yourself
same thing it's an int it's a primitive

00:03:08.420 --> 00:03:08.430
same thing it's an int it's a primitive
 

00:03:08.430 --> 00:03:10.210
same thing it's an int it's a primitive
type in the java programming language

00:03:10.210 --> 00:03:10.220
type in the java programming language
 

00:03:10.220 --> 00:03:13.100
type in the java programming language
but if you declare it as knowable the

00:03:13.100 --> 00:03:13.110
but if you declare it as knowable the
 

00:03:13.110 --> 00:03:14.600
but if you declare it as knowable the
only way we can handle that with the

00:03:14.600 --> 00:03:14.610
only way we can handle that with the
 

00:03:14.610 --> 00:03:15.410
only way we can handle that with the
current runtimes

00:03:15.410 --> 00:03:15.420
current runtimes
 

00:03:15.420 --> 00:03:17.660
current runtimes
is that it has to become the in question

00:03:17.660 --> 00:03:17.670
is that it has to become the in question
 

00:03:17.670 --> 00:03:19.370
is that it has to become the in question
mark type in Catalan which becomes the

00:03:19.370 --> 00:03:19.380
mark type in Catalan which becomes the
 

00:03:19.380 --> 00:03:21.440
mark type in Catalan which becomes the
capital I integer type in the Java

00:03:21.440 --> 00:03:21.450
capital I integer type in the Java
 

00:03:21.450 --> 00:03:23.030
capital I integer type in the Java
programming language and certainly it's

00:03:23.030 --> 00:03:23.040
programming language and certainly it's
 

00:03:23.040 --> 00:03:24.500
programming language and certainly it's
not a primitive type anymore it's a

00:03:24.500 --> 00:03:24.510
not a primitive type anymore it's a
 

00:03:24.510 --> 00:03:24.949
not a primitive type anymore it's a
full-blown

00:03:24.949 --> 00:03:24.959
full-blown
 

00:03:24.959 --> 00:03:28.009
full-blown
object and this can have consequences so

00:03:28.009 --> 00:03:28.019
object and this can have consequences so
 

00:03:28.019 --> 00:03:29.479
object and this can have consequences so
how do we find out stuff like that as

00:03:29.479 --> 00:03:29.489
how do we find out stuff like that as
 

00:03:29.489 --> 00:03:31.850
how do we find out stuff like that as
well as he said one of the ways that we

00:03:31.850 --> 00:03:31.860
well as he said one of the ways that we
 

00:03:31.860 --> 00:03:33.319
well as he said one of the ways that we
can do that is by looking at byte code

00:03:33.319 --> 00:03:33.329
can do that is by looking at byte code
 

00:03:33.329 --> 00:03:38.010
can do that is by looking at byte code
so let's look at some now

00:03:38.010 --> 00:03:38.020
 

00:03:38.020 --> 00:03:40.030
that's pretty self-explanatory

00:03:40.030 --> 00:03:40.040
that's pretty self-explanatory
 

00:03:40.040 --> 00:03:43.120
that's pretty self-explanatory
so let's move on to something else so in

00:03:43.120 --> 00:03:43.130
so let's move on to something else so in
 

00:03:43.130 --> 00:03:45.100
so let's move on to something else so in
IntelliJ there are different ways to

00:03:45.100 --> 00:03:45.110
IntelliJ there are different ways to
 

00:03:45.110 --> 00:03:46.660
IntelliJ there are different ways to
look at byte code but fortunately we

00:03:46.660 --> 00:03:46.670
look at byte code but fortunately we
 

00:03:46.670 --> 00:03:49.050
look at byte code but fortunately we
have tools integrated directly into

00:03:49.050 --> 00:03:49.060
have tools integrated directly into
 

00:03:49.060 --> 00:03:52.120
have tools integrated directly into
Android studio into the IDE if you go up

00:03:52.120 --> 00:03:52.130
Android studio into the IDE if you go up
 

00:03:52.130 --> 00:03:53.920
Android studio into the IDE if you go up
in the menu you can say yeah show me

00:03:53.920 --> 00:03:53.930
in the menu you can say yeah show me
 

00:03:53.930 --> 00:03:55.720
in the menu you can say yeah show me
that byte code and then you get this

00:03:55.720 --> 00:03:55.730
that byte code and then you get this
 

00:03:55.730 --> 00:03:57.400
that byte code and then you get this
viewer over here so if you look

00:03:57.400 --> 00:03:57.410
viewer over here so if you look
 

00:03:57.410 --> 00:03:58.990
viewer over here so if you look
carefully in the editor on the left

00:03:58.990 --> 00:03:59.000
carefully in the editor on the left
 

00:03:59.000 --> 00:04:00.880
carefully in the editor on the left
you'll see that the cursor is on a

00:04:00.880 --> 00:04:00.890
you'll see that the cursor is on a
 

00:04:00.890 --> 00:04:02.350
you'll see that the cursor is on a
particular line of code and then it

00:04:02.350 --> 00:04:02.360
particular line of code and then it
 

00:04:02.360 --> 00:04:04.450
particular line of code and then it
highlights the equivalent byte code on

00:04:04.450 --> 00:04:04.460
highlights the equivalent byte code on
 

00:04:04.460 --> 00:04:06.040
highlights the equivalent byte code on
the right to show you what's going on

00:04:06.040 --> 00:04:06.050
the right to show you what's going on
 

00:04:06.050 --> 00:04:07.420
the right to show you what's going on
some of the information in the byte code

00:04:07.420 --> 00:04:07.430
some of the information in the byte code
 

00:04:07.430 --> 00:04:09.700
some of the information in the byte code
it gets a little noisy in there there's

00:04:09.700 --> 00:04:09.710
it gets a little noisy in there there's
 

00:04:09.710 --> 00:04:11.410
it gets a little noisy in there there's
metadata to tell you what line that's

00:04:11.410 --> 00:04:11.420
metadata to tell you what line that's
 

00:04:11.420 --> 00:04:13.600
metadata to tell you what line that's
associated with a little extra

00:04:13.600 --> 00:04:13.610
associated with a little extra
 

00:04:13.610 --> 00:04:15.190
associated with a little extra
information but there's a couple of

00:04:15.190 --> 00:04:15.200
information but there's a couple of
 

00:04:15.200 --> 00:04:17.380
information but there's a couple of
instructions in particular which are the

00:04:17.380 --> 00:04:17.390
instructions in particular which are the
 

00:04:17.390 --> 00:04:19.780
instructions in particular which are the
actual byte code instructions so for the

00:04:19.780 --> 00:04:19.790
actual byte code instructions so for the
 

00:04:19.790 --> 00:04:21.190
actual byte code instructions so for the
stuff oh yeah then then there's another

00:04:21.190 --> 00:04:21.200
stuff oh yeah then then there's another
 

00:04:21.200 --> 00:04:23.080
stuff oh yeah then then there's another
way of doing this on the command line

00:04:23.080 --> 00:04:23.090
way of doing this on the command line
 

00:04:23.090 --> 00:04:24.970
way of doing this on the command line
you can use Java P instead and that will

00:04:24.970 --> 00:04:24.980
you can use Java P instead and that will
 

00:04:24.980 --> 00:04:27.700
you can use Java P instead and that will
spit out a file you can take a look at

00:04:27.700 --> 00:04:27.710
spit out a file you can take a look at
 

00:04:27.710 --> 00:04:29.830
spit out a file you can take a look at
nicely formatted bytecode different way

00:04:29.830 --> 00:04:29.840
nicely formatted bytecode different way
 

00:04:29.840 --> 00:04:31.330
nicely formatted bytecode different way
to do it that's not integrated into the

00:04:31.330 --> 00:04:31.340
to do it that's not integrated into the
 

00:04:31.340 --> 00:04:33.850
to do it that's not integrated into the
IDE so for the code that we're looking

00:04:33.850 --> 00:04:33.860
IDE so for the code that we're looking
 

00:04:33.860 --> 00:04:35.980
IDE so for the code that we're looking
at before you have this far Iza we

00:04:35.980 --> 00:04:35.990
at before you have this far Iza we
 

00:04:35.990 --> 00:04:37.390
at before you have this far Iza we
haven't told it it's going to use type

00:04:37.390 --> 00:04:37.400
haven't told it it's going to use type
 

00:04:37.400 --> 00:04:39.130
haven't told it it's going to use type
inference but it's set to be this

00:04:39.130 --> 00:04:39.140
inference but it's set to be this
 

00:04:39.140 --> 00:04:41.410
inference but it's set to be this
integer value so what's going on we have

00:04:41.410 --> 00:04:41.420
integer value so what's going on we have
 

00:04:41.420 --> 00:04:42.820
integer value so what's going on we have
a little bit of metadata about the line

00:04:42.820 --> 00:04:42.830
a little bit of metadata about the line
 

00:04:42.830 --> 00:04:45.070
a little bit of metadata about the line
numbers and then it says byte push of

00:04:45.070 --> 00:04:45.080
numbers and then it says byte push of
 

00:04:45.080 --> 00:04:47.530
numbers and then it says byte push of
the value of 25 so it's going to take

00:04:47.530 --> 00:04:47.540
the value of 25 so it's going to take
 

00:04:47.540 --> 00:04:49.510
the value of 25 so it's going to take
that value of 25 extend it to an integer

00:04:49.510 --> 00:04:49.520
that value of 25 extend it to an integer
 

00:04:49.520 --> 00:04:51.340
that value of 25 extend it to an integer
push it onto the stack then it's gonna

00:04:51.340 --> 00:04:51.350
push it onto the stack then it's gonna
 

00:04:51.350 --> 00:04:53.140
push it onto the stack then it's gonna
pull it back off the stack and it's

00:04:53.140 --> 00:04:53.150
pull it back off the stack and it's
 

00:04:53.150 --> 00:04:55.300
pull it back off the stack and it's
gonna store an integer into the first

00:04:55.300 --> 00:04:55.310
gonna store an integer into the first
 

00:04:55.310 --> 00:04:58.990
gonna store an integer into the first
variable so integer store and then we go

00:04:58.990 --> 00:04:59.000
variable so integer store and then we go
 

00:04:59.000 --> 00:05:00.850
variable so integer store and then we go
on the second line we're not using type

00:05:00.850 --> 00:05:00.860
on the second line we're not using type
 

00:05:00.860 --> 00:05:02.500
on the second line we're not using type
inference we've actually said no no we

00:05:02.500 --> 00:05:02.510
inference we've actually said no no we
 

00:05:02.510 --> 00:05:04.690
inference we've actually said no no we
want you to be an int we're gonna assign

00:05:04.690 --> 00:05:04.700
want you to be an int we're gonna assign
 

00:05:04.700 --> 00:05:07.000
want you to be an int we're gonna assign
you the value 78 same thing happens

00:05:07.000 --> 00:05:07.010
you the value 78 same thing happens
 

00:05:07.010 --> 00:05:08.980
you the value 78 same thing happens
we're gonna push a 78 extend it to an

00:05:08.980 --> 00:05:08.990
we're gonna push a 78 extend it to an
 

00:05:08.990 --> 00:05:10.240
we're gonna push a 78 extend it to an
integer onto the stack we're going to

00:05:10.240 --> 00:05:10.250
integer onto the stack we're going to
 

00:05:10.250 --> 00:05:12.340
integer onto the stack we're going to
pull that off store it into the second

00:05:12.340 --> 00:05:12.350
pull that off store it into the second
 

00:05:12.350 --> 00:05:15.340
pull that off store it into the second
integer variable and then for the third

00:05:15.340 --> 00:05:15.350
integer variable and then for the third
 

00:05:15.350 --> 00:05:17.410
integer variable and then for the third
case where we have is knowable type

00:05:17.410 --> 00:05:17.420
case where we have is knowable type
 

00:05:17.420 --> 00:05:20.050
case where we have is knowable type
we've got got I - that's going to be a

00:05:20.050 --> 00:05:20.060
we've got got I - that's going to be a
 

00:05:20.060 --> 00:05:22.900
we've got got I - that's going to be a
nullable int of the value of 14 first

00:05:22.900 --> 00:05:22.910
nullable int of the value of 14 first
 

00:05:22.910 --> 00:05:24.250
nullable int of the value of 14 first
step is going to be the same we're gonna

00:05:24.250 --> 00:05:24.260
step is going to be the same we're gonna
 

00:05:24.260 --> 00:05:26.710
step is going to be the same we're gonna
push byte extended integer

00:05:26.710 --> 00:05:26.720
push byte extended integer
 

00:05:26.720 --> 00:05:29.170
push byte extended integer
onto the stack but then we're gonna call

00:05:29.170 --> 00:05:29.180
onto the stack but then we're gonna call
 

00:05:29.180 --> 00:05:31.210
onto the stack but then we're gonna call
a method we're gonna call integer value

00:05:31.210 --> 00:05:31.220
a method we're gonna call integer value
 

00:05:31.220 --> 00:05:33.910
a method we're gonna call integer value
of which looks like this it takes in an

00:05:33.910 --> 00:05:33.920
of which looks like this it takes in an
 

00:05:33.920 --> 00:05:36.400
of which looks like this it takes in an
int a primitive int type and it returns

00:05:36.400 --> 00:05:36.410
int a primitive int type and it returns
 

00:05:36.410 --> 00:05:38.410
int a primitive int type and it returns
an integer so in the middle of that it's

00:05:38.410 --> 00:05:38.420
an integer so in the middle of that it's
 

00:05:38.420 --> 00:05:40.060
an integer so in the middle of that it's
going to box it into an integer type

00:05:40.060 --> 00:05:40.070
going to box it into an integer type
 

00:05:40.070 --> 00:05:42.490
going to box it into an integer type
creating that object on the fly and then

00:05:42.490 --> 00:05:42.500
creating that object on the fly and then
 

00:05:42.500 --> 00:05:44.650
creating that object on the fly and then
return the integer type and then instead

00:05:44.650 --> 00:05:44.660
return the integer type and then instead
 

00:05:44.660 --> 00:05:46.510
return the integer type and then instead
of storing an integer into a variable

00:05:46.510 --> 00:05:46.520
of storing an integer into a variable
 

00:05:46.520 --> 00:05:48.550
of storing an integer into a variable
it's going to store a reference to the

00:05:48.550 --> 00:05:48.560
it's going to store a reference to the
 

00:05:48.560 --> 00:05:50.640
it's going to store a reference to the
object that we've curry

00:05:50.640 --> 00:05:50.650
object that we've curry
 

00:05:50.650 --> 00:05:54.070
object that we've curry
so if you don't enjoy reading bytecode

00:05:54.070 --> 00:05:54.080
so if you don't enjoy reading bytecode
 

00:05:54.080 --> 00:05:55.629
so if you don't enjoy reading bytecode
it's really not that complicated doing

00:05:55.629 --> 00:05:55.639
it's really not that complicated doing
 

00:05:55.639 --> 00:05:57.309
it's really not that complicated doing
it again what's that my name on the

00:05:57.309 --> 00:05:57.319
it again what's that my name on the
 

00:05:57.319 --> 00:05:58.540
it again what's that my name on the
speaker notes that's why I was

00:05:58.540 --> 00:05:58.550
speaker notes that's why I was
 

00:05:58.550 --> 00:06:00.249
speaker notes that's why I was
introducing you my mouse I'm gonna tell

00:06:00.249 --> 00:06:00.259
introducing you my mouse I'm gonna tell
 

00:06:00.259 --> 00:06:01.510
introducing you my mouse I'm gonna tell
you what to do

00:06:01.510 --> 00:06:01.520
you what to do
 

00:06:01.520 --> 00:06:05.140
you what to do
keep going you started it so if you

00:06:05.140 --> 00:06:05.150
keep going you started it so if you
 

00:06:05.150 --> 00:06:06.820
keep going you started it so if you
don't want to read all of that bytecode

00:06:06.820 --> 00:06:06.830
don't want to read all of that bytecode
 

00:06:06.830 --> 00:06:07.899
don't want to read all of that bytecode
it's actually pretty straightforward

00:06:07.899 --> 00:06:07.909
it's actually pretty straightforward
 

00:06:07.909 --> 00:06:09.879
it's actually pretty straightforward
there's some simple reference Docs out

00:06:09.879 --> 00:06:09.889
there's some simple reference Docs out
 

00:06:09.889 --> 00:06:11.140
there's some simple reference Docs out
there that you can take a look at you're

00:06:11.140 --> 00:06:11.150
there that you can take a look at you're
 

00:06:11.150 --> 00:06:13.689
there that you can take a look at you're
pushing your pop in your setting but if

00:06:13.689 --> 00:06:13.699
pushing your pop in your setting but if
 

00:06:13.699 --> 00:06:14.800
pushing your pop in your setting but if
you don't want to deal with that there

00:06:14.800 --> 00:06:14.810
you don't want to deal with that there
 

00:06:14.810 --> 00:06:16.450
you don't want to deal with that there
is an easier way especially a more

00:06:16.450 --> 00:06:16.460
is an easier way especially a more
 

00:06:16.460 --> 00:06:18.189
is an easier way especially a more
concise way to see what's actually going

00:06:18.189 --> 00:06:18.199
concise way to see what's actually going
 

00:06:18.199 --> 00:06:21.730
concise way to see what's actually going
on and for that you would use the byte

00:06:21.730 --> 00:06:21.740
on and for that you would use the byte
 

00:06:21.740 --> 00:06:25.029
on and for that you would use the byte
code you want me to keep going all right

00:06:25.029 --> 00:06:25.039
code you want me to keep going all right
 

00:06:25.039 --> 00:06:27.070
code you want me to keep going all right
rest of the presentation is mine here we

00:06:27.070 --> 00:06:27.080
rest of the presentation is mine here we
 

00:06:27.080 --> 00:06:28.469
rest of the presentation is mine here we
go I'll stop over there

00:06:28.469 --> 00:06:28.479
go I'll stop over there
 

00:06:28.479 --> 00:06:30.969
go I'll stop over there
what's that I'll be over there all right

00:06:30.969 --> 00:06:30.979
what's that I'll be over there all right
 

00:06:30.979 --> 00:06:34.480
what's that I'll be over there all right
so let's say you've got this code could

00:06:34.480 --> 00:06:34.490
so let's say you've got this code could
 

00:06:34.490 --> 00:06:36.370
so let's say you've got this code could
you go a little bit further actually so

00:06:36.370 --> 00:06:36.380
you go a little bit further actually so
 

00:06:36.380 --> 00:06:38.529
you go a little bit further actually so
you've got this code you have the byte

00:06:38.529 --> 00:06:38.539
you've got this code you have the byte
 

00:06:38.539 --> 00:06:40.089
you've got this code you have the byte
code representation over there and if

00:06:40.089 --> 00:06:40.099
code representation over there and if
 

00:06:40.099 --> 00:06:41.529
code representation over there and if
you look at the top of that window

00:06:41.529 --> 00:06:41.539
you look at the top of that window
 

00:06:41.539 --> 00:06:42.520
you look at the top of that window
you've got this button that says

00:06:42.520 --> 00:06:42.530
you've got this button that says
 

00:06:42.530 --> 00:06:45.370
you've got this button that says
decompile so you click on that thing and

00:06:45.370 --> 00:06:45.380
decompile so you click on that thing and
 

00:06:45.380 --> 00:06:47.350
decompile so you click on that thing and
then you'll in your editor window you'll

00:06:47.350 --> 00:06:47.360
then you'll in your editor window you'll
 

00:06:47.360 --> 00:06:49.839
then you'll in your editor window you'll
be shown some some java programming

00:06:49.839 --> 00:06:49.849
be shown some some java programming
 

00:06:49.849 --> 00:06:51.640
be shown some some java programming
language code that looks more like this

00:06:51.640 --> 00:06:51.650
language code that looks more like this
 

00:06:51.650 --> 00:06:54.399
language code that looks more like this
right so you got the byte code fairly

00:06:54.399 --> 00:06:54.409
right so you got the byte code fairly
 

00:06:54.409 --> 00:06:56.439
right so you got the byte code fairly
verbose all the things going on you know

00:06:56.439 --> 00:06:56.449
verbose all the things going on you know
 

00:06:56.449 --> 00:06:58.450
verbose all the things going on you know
each of the lines of Kotlin code may

00:06:58.450 --> 00:06:58.460
each of the lines of Kotlin code may
 

00:06:58.460 --> 00:07:00.430
each of the lines of Kotlin code may
expand to several lines about byte code

00:07:00.430 --> 00:07:00.440
expand to several lines about byte code
 

00:07:00.440 --> 00:07:02.499
expand to several lines about byte code
along with the metadata or you can see

00:07:02.499 --> 00:07:02.509
along with the metadata or you can see
 

00:07:02.509 --> 00:07:05.290
along with the metadata or you can see
this fairly terse Java code instead you

00:07:05.290 --> 00:07:05.300
this fairly terse Java code instead you
 

00:07:05.300 --> 00:07:07.029
this fairly terse Java code instead you
see basically straightforward things

00:07:07.029 --> 00:07:07.039
see basically straightforward things
 

00:07:07.039 --> 00:07:08.769
see basically straightforward things
going on there you have some int values

00:07:08.769 --> 00:07:08.779
going on there you have some int values
 

00:07:08.779 --> 00:07:10.390
going on there you have some int values
you have some integer values that got

00:07:10.390 --> 00:07:10.400
you have some integer values that got
 

00:07:10.400 --> 00:07:12.790
you have some integer values that got
Auto boxed and then we're printing out

00:07:12.790 --> 00:07:12.800
Auto boxed and then we're printing out
 

00:07:12.800 --> 00:07:18.309
Auto boxed and then we're printing out
the values there just like that you want

00:07:18.309 --> 00:07:18.319
the values there just like that you want
 

00:07:18.319 --> 00:07:19.510
the values there just like that you want
to talk about the memory profile where

00:07:19.510 --> 00:07:19.520
to talk about the memory profile where
 

00:07:19.520 --> 00:07:21.999
to talk about the memory profile where
it says you'll name it does I'm going to

00:07:21.999 --> 00:07:22.009
it says you'll name it does I'm going to
 

00:07:22.009 --> 00:07:23.290
it says you'll name it does I'm going to
talk about the memory profile where

00:07:23.290 --> 00:07:23.300
talk about the memory profile where
 

00:07:23.300 --> 00:07:25.269
talk about the memory profile where
there the third approach that we have

00:07:25.269 --> 00:07:25.279
there the third approach that we have
 

00:07:25.279 --> 00:07:27.490
there the third approach that we have
using the tools to find out what's going

00:07:27.490 --> 00:07:27.500
using the tools to find out what's going
 

00:07:27.500 --> 00:07:29.050
using the tools to find out what's going
on is to actually see what's going on

00:07:29.050 --> 00:07:29.060
on is to actually see what's going on
 

00:07:29.060 --> 00:07:30.790
on is to actually see what's going on
with allocations and collections in the

00:07:30.790 --> 00:07:30.800
with allocations and collections in the
 

00:07:30.800 --> 00:07:34.059
with allocations and collections in the
system so one of my favorite tools when

00:07:34.059 --> 00:07:34.069
system so one of my favorite tools when
 

00:07:34.069 --> 00:07:35.260
system so one of my favorite tools when
I joined the team and for many years

00:07:35.260 --> 00:07:35.270
I joined the team and for many years
 

00:07:35.270 --> 00:07:38.499
I joined the team and for many years
after that was oh is this proof I'm

00:07:38.499 --> 00:07:38.509
after that was oh is this proof I'm
 

00:07:38.509 --> 00:07:39.310
after that was oh is this proof I'm
gonna tweet that

00:07:39.310 --> 00:07:39.320
gonna tweet that
 

00:07:39.320 --> 00:07:41.540
gonna tweet that
[Laughter]

00:07:41.540 --> 00:07:41.550
[Laughter]
 

00:07:41.550 --> 00:07:44.279
[Laughter]
allocation tracker allocation tracker

00:07:44.279 --> 00:07:44.289
allocation tracker allocation tracker
 

00:07:44.289 --> 00:07:46.109
allocation tracker allocation tracker
was a tool that you would run in DDMS

00:07:46.109 --> 00:07:46.119
was a tool that you would run in DDMS
 

00:07:46.119 --> 00:07:48.839
was a tool that you would run in DDMS
and you would start it at some point in

00:07:48.839 --> 00:07:48.849
and you would start it at some point in
 

00:07:48.849 --> 00:07:50.219
and you would start it at some point in
time and you would use the app for a

00:07:50.219 --> 00:07:50.229
time and you would use the app for a
 

00:07:50.229 --> 00:07:51.359
time and you would use the app for a
while and then you would stop it and it

00:07:51.359 --> 00:07:51.369
while and then you would stop it and it
 

00:07:51.369 --> 00:07:52.919
while and then you would stop it and it
would say here are all the objects that

00:07:52.919 --> 00:07:52.929
would say here are all the objects that
 

00:07:52.929 --> 00:07:55.649
would say here are all the objects that
were allocated on the fly and then you

00:07:55.649 --> 00:07:55.659
were allocated on the fly and then you
 

00:07:55.659 --> 00:07:56.909
were allocated on the fly and then you
could click on any of those instances

00:07:56.909 --> 00:07:56.919
could click on any of those instances
 

00:07:56.919 --> 00:07:58.559
could click on any of those instances
and it would show you the call stack

00:07:58.559 --> 00:07:58.569
and it would show you the call stack
 

00:07:58.569 --> 00:08:00.570
and it would show you the call stack
really powerful really useful wasn't

00:08:00.570 --> 00:08:00.580
really powerful really useful wasn't
 

00:08:00.580 --> 00:08:02.249
really powerful really useful wasn't
integrated in with any of the rest of

00:08:02.249 --> 00:08:02.259
integrated in with any of the rest of
 

00:08:02.259 --> 00:08:04.079
integrated in with any of the rest of
the tools so kind of a pain to get to a

00:08:04.079 --> 00:08:04.089
the tools so kind of a pain to get to a
 

00:08:04.089 --> 00:08:05.279
the tools so kind of a pain to get to a
lot of people didn't even know it was

00:08:05.279 --> 00:08:05.289
lot of people didn't even know it was
 

00:08:05.289 --> 00:08:07.679
lot of people didn't even know it was
there because actually finding it was a

00:08:07.679 --> 00:08:07.689
there because actually finding it was a
 

00:08:07.689 --> 00:08:10.169
there because actually finding it was a
little bit tricky so now we have memory

00:08:10.169 --> 00:08:10.179
little bit tricky so now we have memory
 

00:08:10.179 --> 00:08:12.540
little bit tricky so now we have memory
profiling directly integrated into the

00:08:12.540 --> 00:08:12.550
profiling directly integrated into the
 

00:08:12.550 --> 00:08:14.730
profiling directly integrated into the
ID with the rest of the profilers that

00:08:14.730 --> 00:08:14.740
ID with the rest of the profilers that
 

00:08:14.740 --> 00:08:16.320
ID with the rest of the profilers that
have come online in studio in the last

00:08:16.320 --> 00:08:16.330
have come online in studio in the last
 

00:08:16.330 --> 00:08:19.260
have come online in studio in the last
few years so this also allows you to

00:08:19.260 --> 00:08:19.270
few years so this also allows you to
 

00:08:19.270 --> 00:08:21.149
few years so this also allows you to
track memory usage over time you can see

00:08:21.149 --> 00:08:21.159
track memory usage over time you can see
 

00:08:21.159 --> 00:08:23.249
track memory usage over time you can see
how big the keep is at any given time

00:08:23.249 --> 00:08:23.259
how big the keep is at any given time
 

00:08:23.259 --> 00:08:25.019
how big the keep is at any given time
you can see when garbage collections

00:08:25.019 --> 00:08:25.029
you can see when garbage collections
 

00:08:25.029 --> 00:08:26.909
you can see when garbage collections
happen and what happened because of

00:08:26.909 --> 00:08:26.919
happen and what happened because of
 

00:08:26.919 --> 00:08:29.339
happen and what happened because of
those and you can catch leaks which is

00:08:29.339 --> 00:08:29.349
those and you can catch leaks which is
 

00:08:29.349 --> 00:08:30.809
those and you can catch leaks which is
really powerful this is another thing

00:08:30.809 --> 00:08:30.819
really powerful this is another thing
 

00:08:30.819 --> 00:08:32.699
really powerful this is another thing
that yes we allowed you to do it on

00:08:32.699 --> 00:08:32.709
that yes we allowed you to do it on
 

00:08:32.709 --> 00:08:35.100
that yes we allowed you to do it on
Android but oh man did we require you to

00:08:35.100 --> 00:08:35.110
Android but oh man did we require you to
 

00:08:35.110 --> 00:08:37.620
Android but oh man did we require you to
jump through a lot of Hoops a lot of

00:08:37.620 --> 00:08:37.630
jump through a lot of Hoops a lot of
 

00:08:37.630 --> 00:08:40.559
jump through a lot of Hoops a lot of
heaps you would you know dump a heap and

00:08:40.559 --> 00:08:40.569
heaps you would you know dump a heap and
 

00:08:40.569 --> 00:08:41.699
heaps you would you know dump a heap and
you would transcode that into a

00:08:41.699 --> 00:08:41.709
you would transcode that into a
 

00:08:41.709 --> 00:08:43.139
you would transcode that into a
different format you would use some

00:08:43.139 --> 00:08:43.149
different format you would use some
 

00:08:43.149 --> 00:08:45.449
different format you would use some
external tool and then you walk through

00:08:45.449 --> 00:08:45.459
external tool and then you walk through
 

00:08:45.459 --> 00:08:47.429
external tool and then you walk through
this amazingly complex set of

00:08:47.429 --> 00:08:47.439
this amazingly complex set of
 

00:08:47.439 --> 00:08:49.650
this amazingly complex set of
information now all of that stuff is

00:08:49.650 --> 00:08:49.660
information now all of that stuff is
 

00:08:49.660 --> 00:08:51.499
information now all of that stuff is
integrated directly and in the ID and

00:08:51.499 --> 00:08:51.509
integrated directly and in the ID and
 

00:08:51.509 --> 00:08:53.939
integrated directly and in the ID and
after all of this it allows you to track

00:08:53.939 --> 00:08:53.949
after all of this it allows you to track
 

00:08:53.949 --> 00:08:55.350
after all of this it allows you to track
allocations and that's what we care

00:08:55.350 --> 00:08:55.360
allocations and that's what we care
 

00:08:55.360 --> 00:08:58.920
allocations and that's what we care
about today so I wrote this code all by

00:08:58.920 --> 00:08:58.930
about today so I wrote this code all by
 

00:08:58.930 --> 00:09:02.129
about today so I wrote this code all by
myself really simple thing we've got

00:09:02.129 --> 00:09:02.139
myself really simple thing we've got
 

00:09:02.139 --> 00:09:03.960
myself really simple thing we've got
this nullable int value you've got a

00:09:03.960 --> 00:09:03.970
this nullable int value you've got a
 

00:09:03.970 --> 00:09:05.670
this nullable int value you've got a
tight loop in there in the method we're

00:09:05.670 --> 00:09:05.680
tight loop in there in the method we're
 

00:09:05.680 --> 00:09:08.129
tight loop in there in the method we're
going G Rho to 10,000 so 10,000 and 1

00:09:08.129 --> 00:09:08.139
going G Rho to 10,000 so 10,000 and 1
 

00:09:08.139 --> 00:09:09.269
going G Rho to 10,000 so 10,000 and 1
times it's going to whip through the

00:09:09.269 --> 00:09:09.279
times it's going to whip through the
 

00:09:09.279 --> 00:09:11.970
times it's going to whip through the
loop and it's going to set we know that

00:09:11.970 --> 00:09:11.980
loop and it's going to set we know that
 

00:09:11.980 --> 00:09:13.710
loop and it's going to set we know that
that's going to end up being a capital I

00:09:13.710 --> 00:09:13.720
that's going to end up being a capital I
 

00:09:13.720 --> 00:09:17.600
that's going to end up being a capital I
integer value set from the primitive I

00:09:17.600 --> 00:09:17.610
integer value set from the primitive I
 

00:09:17.610 --> 00:09:21.360
integer value set from the primitive I
loop value that we've got so we can

00:09:21.360 --> 00:09:21.370
loop value that we've got so we can
 

00:09:21.370 --> 00:09:23.189
loop value that we've got so we can
click on this in the lower left of the

00:09:23.189 --> 00:09:23.199
click on this in the lower left of the
 

00:09:23.199 --> 00:09:25.040
click on this in the lower left of the
IDE you've got this little

00:09:25.040 --> 00:09:25.050
IDE you've got this little
 

00:09:25.050 --> 00:09:27.480
IDE you've got this little
toolbar of little tools you can run if

00:09:27.480 --> 00:09:27.490
toolbar of little tools you can run if
 

00:09:27.490 --> 00:09:28.530
toolbar of little tools you can run if
you click on the profiler

00:09:28.530 --> 00:09:28.540
you click on the profiler
 

00:09:28.540 --> 00:09:30.360
you click on the profiler
you'll get something that looks like

00:09:30.360 --> 00:09:30.370
you'll get something that looks like
 

00:09:30.370 --> 00:09:32.910
you'll get something that looks like
this it shows you all the profilers that

00:09:32.910 --> 00:09:32.920
this it shows you all the profilers that
 

00:09:32.920 --> 00:09:34.829
this it shows you all the profilers that
we currently offer you've got CPU you

00:09:34.829 --> 00:09:34.839
we currently offer you've got CPU you
 

00:09:34.839 --> 00:09:36.840
we currently offer you've got CPU you
got the memory that woke into you've got

00:09:36.840 --> 00:09:36.850
got the memory that woke into you've got
 

00:09:36.850 --> 00:09:38.340
got the memory that woke into you've got
networking and you give out battery

00:09:38.340 --> 00:09:38.350
networking and you give out battery
 

00:09:38.350 --> 00:09:40.829
networking and you give out battery
power usage so if you click on the

00:09:40.829 --> 00:09:40.839
power usage so if you click on the
 

00:09:40.839 --> 00:09:42.509
power usage so if you click on the
memory one it expands to take over the

00:09:42.509 --> 00:09:42.519
memory one it expands to take over the
 

00:09:42.519 --> 00:09:44.309
memory one it expands to take over the
whole screen there and you can see heap

00:09:44.309 --> 00:09:44.319
whole screen there and you can see heap
 

00:09:44.319 --> 00:09:46.050
whole screen there and you can see heap
usage over time now what we really care

00:09:46.050 --> 00:09:46.060
usage over time now what we really care
 

00:09:46.060 --> 00:09:48.480
usage over time now what we really care
about here is what happened there right

00:09:48.480 --> 00:09:48.490
about here is what happened there right
 

00:09:48.490 --> 00:09:50.129
about here is what happened there right
I don't care when it's not changing what

00:09:50.129 --> 00:09:50.139
I don't care when it's not changing what
 

00:09:50.139 --> 00:09:52.139
I don't care when it's not changing what
I care is what caused it to actually

00:09:52.139 --> 00:09:52.149
I care is what caused it to actually
 

00:09:52.149 --> 00:09:53.310
I care is what caused it to actually
bump up

00:09:53.310 --> 00:09:53.320
bump up
 

00:09:53.320 --> 00:09:56.730
bump up
and keep usage and why was that so you

00:09:56.730 --> 00:09:56.740
and keep usage and why was that so you
 

00:09:56.740 --> 00:09:58.530
and keep usage and why was that so you
can drag the cursor along there you can

00:09:58.530 --> 00:09:58.540
can drag the cursor along there you can
 

00:09:58.540 --> 00:10:00.180
can drag the cursor along there you can
select this window of time to see what's

00:10:00.180 --> 00:10:00.190
select this window of time to see what's
 

00:10:00.190 --> 00:10:01.950
select this window of time to see what's
going on and just like allocation

00:10:01.950 --> 00:10:01.960
going on and just like allocation
 

00:10:01.960 --> 00:10:03.480
going on and just like allocation
tracker you can see all of the things

00:10:03.480 --> 00:10:03.490
tracker you can see all of the things
 

00:10:03.490 --> 00:10:06.420
tracker you can see all of the things
that were allocated down below and you

00:10:06.420 --> 00:10:06.430
that were allocated down below and you
 

00:10:06.430 --> 00:10:08.550
that were allocated down below and you
can see that in fact there are a bunch

00:10:08.550 --> 00:10:08.560
can see that in fact there are a bunch
 

00:10:08.560 --> 00:10:10.770
can see that in fact there are a bunch
of capital I integers they got allocated

00:10:10.770 --> 00:10:10.780
of capital I integers they got allocated
 

00:10:10.780 --> 00:10:13.890
of capital I integers they got allocated
in fact there are exactly nine thousand

00:10:13.890 --> 00:10:13.900
in fact there are exactly nine thousand
 

00:10:13.900 --> 00:10:16.170
in fact there are exactly nine thousand
eight hundred and seventy-three which is

00:10:16.170 --> 00:10:16.180
eight hundred and seventy-three which is
 

00:10:16.180 --> 00:10:18.600
eight hundred and seventy-three which is
weird we're in a loop going through ten

00:10:18.600 --> 00:10:18.610
weird we're in a loop going through ten
 

00:10:18.610 --> 00:10:20.550
weird we're in a loop going through ten
thousand and one times why do we not

00:10:20.550 --> 00:10:20.560
thousand and one times why do we not
 

00:10:20.560 --> 00:10:22.440
thousand and one times why do we not
have ten thousand and one allocations

00:10:22.440 --> 00:10:22.450
have ten thousand and one allocations
 

00:10:22.450 --> 00:10:26.960
have ten thousand and one allocations
going on so there's the loop and that

00:10:26.960 --> 00:10:26.970
going on so there's the loop and that
 

00:10:26.970 --> 00:10:29.970
going on so there's the loop and that
for some reason didn't equal ten

00:10:29.970 --> 00:10:29.980
for some reason didn't equal ten
 

00:10:29.980 --> 00:10:31.770
for some reason didn't equal ten
thousand and one allocations and it's

00:10:31.770 --> 00:10:31.780
thousand and one allocations and it's
 

00:10:31.780 --> 00:10:33.720
thousand and one allocations and it's
because of the value of more

00:10:33.720 --> 00:10:33.730
because of the value of more
 

00:10:33.730 --> 00:10:35.310
because of the value of more
particularly because of this caching

00:10:35.310 --> 00:10:35.320
particularly because of this caching
 

00:10:35.320 --> 00:10:37.140
particularly because of this caching
logic that we have when the run time

00:10:37.140 --> 00:10:37.150
logic that we have when the run time
 

00:10:37.150 --> 00:10:39.500
logic that we have when the run time
starts up it knows that most

00:10:39.500 --> 00:10:39.510
starts up it knows that most
 

00:10:39.510 --> 00:10:41.430
starts up it knows that most
applications are going to need some

00:10:41.430 --> 00:10:41.440
applications are going to need some
 

00:10:41.440 --> 00:10:44.490
applications are going to need some
manager values and so it caches values

00:10:44.490 --> 00:10:44.500
manager values and so it caches values
 

00:10:44.500 --> 00:10:48.570
manager values and so it caches values
from negative 128 up to 127 puts them in

00:10:48.570 --> 00:10:48.580
from negative 128 up to 127 puts them in
 

00:10:48.580 --> 00:10:50.220
from negative 128 up to 127 puts them in
a cache and now when everybody anybody

00:10:50.220 --> 00:10:50.230
a cache and now when everybody anybody
 

00:10:50.230 --> 00:10:52.560
a cache and now when everybody anybody
asks for a value of for one of those

00:10:52.560 --> 00:10:52.570
asks for a value of for one of those
 

00:10:52.570 --> 00:10:54.630
asks for a value of for one of those
it's just gonna return that it's already

00:10:54.630 --> 00:10:54.640
it's just gonna return that it's already
 

00:10:54.640 --> 00:10:56.370
it's just gonna return that it's already
been created as not integer it's not

00:10:56.370 --> 00:10:56.380
been created as not integer it's not
 

00:10:56.380 --> 00:10:58.140
been created as not integer it's not
being boxed and allocated on the fly

00:10:58.140 --> 00:10:58.150
being boxed and allocated on the fly
 

00:10:58.150 --> 00:11:00.090
being boxed and allocated on the fly
which means the only values that are

00:11:00.090 --> 00:11:00.100
which means the only values that are
 

00:11:00.100 --> 00:11:02.010
which means the only values that are
going to be allocator are outside of

00:11:02.010 --> 00:11:02.020
going to be allocator are outside of
 

00:11:02.020 --> 00:11:04.680
going to be allocator are outside of
that region which turns out ten thousand

00:11:04.680 --> 00:11:04.690
that region which turns out ten thousand
 

00:11:04.690 --> 00:11:07.800
that region which turns out ten thousand
and one minus 128 is going to be nine

00:11:07.800 --> 00:11:07.810
and one minus 128 is going to be nine
 

00:11:07.810 --> 00:11:10.680
and one minus 128 is going to be nine
thousand 873 has nothing to do with this

00:11:10.680 --> 00:11:10.690
thousand 873 has nothing to do with this
 

00:11:10.690 --> 00:11:14.190
thousand 873 has nothing to do with this
talk I thought it was interesting so the

00:11:14.190 --> 00:11:14.200
talk I thought it was interesting so the
 

00:11:14.200 --> 00:11:16.470
talk I thought it was interesting so the
one that we care about are the capital I

00:11:16.470 --> 00:11:16.480
one that we care about are the capital I
 

00:11:16.480 --> 00:11:19.140
one that we care about are the capital I
integer allocations so we're going to

00:11:19.140 --> 00:11:19.150
integer allocations so we're going to
 

00:11:19.150 --> 00:11:20.700
integer allocations so we're going to
click on that and that brings up another

00:11:20.700 --> 00:11:20.710
click on that and that brings up another
 

00:11:20.710 --> 00:11:22.080
click on that and that brings up another
window that shows each of those

00:11:22.080 --> 00:11:22.090
window that shows each of those
 

00:11:22.090 --> 00:11:24.450
window that shows each of those
individual allocations when they happen

00:11:24.450 --> 00:11:24.460
individual allocations when they happen
 

00:11:24.460 --> 00:11:26.070
individual allocations when they happen
in what was going on we can click on one

00:11:26.070 --> 00:11:26.080
in what was going on we can click on one
 

00:11:26.080 --> 00:11:27.840
in what was going on we can click on one
of those and just like allocation

00:11:27.840 --> 00:11:27.850
of those and just like allocation
 

00:11:27.850 --> 00:11:30.000
of those and just like allocation
tracker it pops up the call stack and

00:11:30.000 --> 00:11:30.010
tracker it pops up the call stack and
 

00:11:30.010 --> 00:11:32.100
tracker it pops up the call stack and
from that we determined that in fact

00:11:32.100 --> 00:11:32.110
from that we determined that in fact
 

00:11:32.110 --> 00:11:33.960
from that we determined that in fact
that was being allocated because of the

00:11:33.960 --> 00:11:33.970
that was being allocated because of the
 

00:11:33.970 --> 00:11:35.520
that was being allocated because of the
boxing operation that was happening in

00:11:35.520 --> 00:11:35.530
boxing operation that was happening in
 

00:11:35.530 --> 00:11:38.010
boxing operation that was happening in
that tight loop let's talk about

00:11:38.010 --> 00:11:38.020
that tight loop let's talk about
 

00:11:38.020 --> 00:11:41.020
that tight loop let's talk about
language feature

00:11:41.020 --> 00:11:41.030
 

00:11:41.030 --> 00:11:44.200
I appreciate this thank you for the

00:11:44.200 --> 00:11:44.210
I appreciate this thank you for the
 

00:11:44.210 --> 00:11:46.680
I appreciate this thank you for the
cheers but maybe you wait until the end

00:11:46.680 --> 00:11:46.690
cheers but maybe you wait until the end
 

00:11:46.690 --> 00:11:49.750
cheers but maybe you wait until the end
do you mind if I take this one yeah I do

00:11:49.750 --> 00:11:49.760
do you mind if I take this one yeah I do
 

00:11:49.760 --> 00:11:50.530
do you mind if I take this one yeah I do
actually

00:11:50.530 --> 00:11:50.540
actually
 

00:11:50.540 --> 00:11:53.050
actually
I can just leave if you want anyway

00:11:53.050 --> 00:11:53.060
I can just leave if you want anyway
 

00:11:53.060 --> 00:11:54.130
I can just leave if you want anyway
enums

00:11:54.130 --> 00:11:54.140
enums
 

00:11:54.140 --> 00:11:56.950
enums
your favorite topic so please using them

00:11:56.950 --> 00:11:56.960
your favorite topic so please using them
 

00:11:56.960 --> 00:11:58.030
your favorite topic so please using them
but we're going to talk about them

00:11:58.030 --> 00:11:58.040
but we're going to talk about them
 

00:11:58.040 --> 00:12:00.670
but we're going to talk about them
anyway so here's an enum our roads all

00:12:00.670 --> 00:12:00.680
anyway so here's an enum our roads all
 

00:12:00.680 --> 00:12:02.680
anyway so here's an enum our roads all
by myself as well called blend mode we

00:12:02.680 --> 00:12:02.690
by myself as well called blend mode we
 

00:12:02.690 --> 00:12:03.970
by myself as well called blend mode we
have some values doesn't really matter

00:12:03.970 --> 00:12:03.980
have some values doesn't really matter
 

00:12:03.980 --> 00:12:06.250
have some values doesn't really matter
what they are in here I'm how I'm using

00:12:06.250 --> 00:12:06.260
what they are in here I'm how I'm using
 

00:12:06.260 --> 00:12:08.410
what they are in here I'm how I'm using
the UNAM I'm using a when statement and

00:12:08.410 --> 00:12:08.420
the UNAM I'm using a when statement and
 

00:12:08.420 --> 00:12:10.330
the UNAM I'm using a when statement and
effectively the equivalent of a switch

00:12:10.330 --> 00:12:10.340
effectively the equivalent of a switch
 

00:12:10.340 --> 00:12:12.730
effectively the equivalent of a switch
in the Java programming language and for

00:12:12.730 --> 00:12:12.740
in the Java programming language and for
 

00:12:12.740 --> 00:12:14.260
in the Java programming language and for
every value of genome I call function

00:12:14.260 --> 00:12:14.270
every value of genome I call function
 

00:12:14.270 --> 00:12:16.090
every value of genome I call function
that doesn't remember what we do what's

00:12:16.090 --> 00:12:16.100
that doesn't remember what we do what's
 

00:12:16.100 --> 00:12:17.650
that doesn't remember what we do what's
interesting is what happens when we look

00:12:17.650 --> 00:12:17.660
interesting is what happens when we look
 

00:12:17.660 --> 00:12:19.480
interesting is what happens when we look
at the jarred byte code so here's what

00:12:19.480 --> 00:12:19.490
at the jarred byte code so here's what
 

00:12:19.490 --> 00:12:22.630
at the jarred byte code so here's what
it looks like the first thing it does is

00:12:22.630 --> 00:12:22.640
it looks like the first thing it does is
 

00:12:22.640 --> 00:12:25.030
it looks like the first thing it does is
called this this gets tagged static up

00:12:25.030 --> 00:12:25.040
called this this gets tagged static up
 

00:12:25.040 --> 00:12:28.540
called this this gets tagged static up
code it accesses a interest so that's

00:12:28.540 --> 00:12:28.550
code it accesses a interest so that's
 

00:12:28.550 --> 00:12:30.850
code it accesses a interest so that's
the square bracket with the capital I at

00:12:30.850 --> 00:12:30.860
the square bracket with the capital I at
 

00:12:30.860 --> 00:12:33.970
the square bracket with the capital I at
the end so it's a field in a class

00:12:33.970 --> 00:12:33.980
the end so it's a field in a class
 

00:12:33.980 --> 00:12:36.850
the end so it's a field in a class
called bling link $80 when mappings dot

00:12:36.850 --> 00:12:36.860
called bling link $80 when mappings dot
 

00:12:36.860 --> 00:12:39.190
called bling link $80 when mappings dot
dollar enum switch mapping dollar zero I

00:12:39.190 --> 00:12:39.200
dollar enum switch mapping dollar zero I
 

00:12:39.200 --> 00:12:41.710
dollar enum switch mapping dollar zero I
never wrote a class called code this in

00:12:41.710 --> 00:12:41.720
never wrote a class called code this in
 

00:12:41.720 --> 00:12:42.880
never wrote a class called code this in
my code but there it is

00:12:42.880 --> 00:12:42.890
my code but there it is
 

00:12:42.890 --> 00:12:44.440
my code but there it is
and then what's interesting is after it

00:12:44.440 --> 00:12:44.450
and then what's interesting is after it
 

00:12:44.450 --> 00:12:46.720
and then what's interesting is after it
gets disarray it invokes the ordinal

00:12:46.720 --> 00:12:46.730
gets disarray it invokes the ordinal
 

00:12:46.730 --> 00:12:49.600
gets disarray it invokes the ordinal
method on the in value itself and then

00:12:49.600 --> 00:12:49.610
method on the in value itself and then
 

00:12:49.610 --> 00:12:52.180
method on the in value itself and then
it does an eye a load so I allowed text

00:12:52.180 --> 00:12:52.190
it does an eye a load so I allowed text
 

00:12:52.190 --> 00:12:54.280
it does an eye a load so I allowed text
the output of the ordinal method call

00:12:54.280 --> 00:12:54.290
the output of the ordinal method call
 

00:12:54.290 --> 00:12:56.950
the output of the ordinal method call
and then use that as an index in the

00:12:56.950 --> 00:12:56.960
and then use that as an index in the
 

00:12:56.960 --> 00:12:59.650
and then use that as an index in the
array that we just fetched so and

00:12:59.650 --> 00:12:59.660
array that we just fetched so and
 

00:12:59.660 --> 00:13:01.300
array that we just fetched so and
finally does the actual switch so it

00:13:01.300 --> 00:13:01.310
finally does the actual switch so it
 

00:13:01.310 --> 00:13:02.829
finally does the actual switch so it
doesn't switch on the enum value itself

00:13:02.829 --> 00:13:02.839
doesn't switch on the enum value itself
 

00:13:02.839 --> 00:13:04.960
doesn't switch on the enum value itself
it first goes through another array and

00:13:04.960 --> 00:13:04.970
it first goes through another array and
 

00:13:04.970 --> 00:13:06.640
it first goes through another array and
intermediate array and we're gonna look

00:13:06.640 --> 00:13:06.650
intermediate array and we're gonna look
 

00:13:06.650 --> 00:13:09.070
intermediate array and we're gonna look
at what this already looks like and then

00:13:09.070 --> 00:13:09.080
at what this already looks like and then
 

00:13:09.080 --> 00:13:10.450
at what this already looks like and then
that's our code so here's what the code

00:13:10.450 --> 00:13:10.460
that's our code so here's what the code
 

00:13:10.460 --> 00:13:12.579
that's our code so here's what the code
what the jury could looks like so what

00:13:12.579 --> 00:13:12.589
what the jury could looks like so what
 

00:13:12.589 --> 00:13:14.320
what the jury could looks like so what
is interesting here is that this is not

00:13:14.320 --> 00:13:14.330
is interesting here is that this is not
 

00:13:14.330 --> 00:13:16.720
is interesting here is that this is not
specific to cut in the java programming

00:13:16.720 --> 00:13:16.730
specific to cut in the java programming
 

00:13:16.730 --> 00:13:18.370
specific to cut in the java programming
language compiler will also do the same

00:13:18.370 --> 00:13:18.380
language compiler will also do the same
 

00:13:18.380 --> 00:13:20.350
language compiler will also do the same
thing but you know it's still

00:13:20.350 --> 00:13:20.360
thing but you know it's still
 

00:13:20.360 --> 00:13:21.820
thing but you know it's still
interesting to look at it so the code

00:13:21.820 --> 00:13:21.830
interesting to look at it so the code
 

00:13:21.830 --> 00:13:23.200
interesting to look at it so the code
that gets generated is this there's this

00:13:23.200 --> 00:13:23.210
that gets generated is this there's this
 

00:13:23.210 --> 00:13:25.390
that gets generated is this there's this
special mapping class that contains an

00:13:25.390 --> 00:13:25.400
special mapping class that contains an
 

00:13:25.400 --> 00:13:27.640
special mapping class that contains an
array that has the same length as the

00:13:27.640 --> 00:13:27.650
array that has the same length as the
 

00:13:27.650 --> 00:13:29.410
array that has the same length as the
number of enums that you're Indian

00:13:29.410 --> 00:13:29.420
number of enums that you're Indian
 

00:13:29.420 --> 00:13:30.579
number of enums that you're Indian
values that we have in the ingham

00:13:30.579 --> 00:13:30.589
values that we have in the ingham
 

00:13:30.589 --> 00:13:32.290
values that we have in the ingham
classic to declare and then in the

00:13:32.290 --> 00:13:32.300
classic to declare and then in the
 

00:13:32.300 --> 00:13:35.590
classic to declare and then in the
static initialization code this array is

00:13:35.590 --> 00:13:35.600
static initialization code this array is
 

00:13:35.600 --> 00:13:37.840
static initialization code this array is
populated with the values of genomes and

00:13:37.840 --> 00:13:37.850
populated with the values of genomes and
 

00:13:37.850 --> 00:13:39.820
populated with the values of genomes and
some special constants generated by the

00:13:39.820 --> 00:13:39.830
some special constants generated by the
 

00:13:39.830 --> 00:13:43.150
some special constants generated by the
compiler so what happens if we create

00:13:43.150 --> 00:13:43.160
compiler so what happens if we create
 

00:13:43.160 --> 00:13:44.740
compiler so what happens if we create
another method in our code that does

00:13:44.740 --> 00:13:44.750
another method in our code that does
 

00:13:44.750 --> 00:13:47.800
another method in our code that does
another when on the enum so we do a when

00:13:47.800 --> 00:13:47.810
another when on the enum so we do a when
 

00:13:47.810 --> 00:13:49.870
another when on the enum so we do a when
in the same order we we switch over all

00:13:49.870 --> 00:13:49.880
in the same order we we switch over all
 

00:13:49.880 --> 00:13:50.230
in the same order we we switch over all
the

00:13:50.230 --> 00:13:50.240
the
 

00:13:50.240 --> 00:13:52.299
the
of Jinan if we go back to the giant

00:13:52.299 --> 00:13:52.309
of Jinan if we go back to the giant
 

00:13:52.309 --> 00:13:53.739
of Jinan if we go back to the giant
class we can see there's a second array

00:13:53.739 --> 00:13:53.749
class we can see there's a second array
 

00:13:53.749 --> 00:13:55.780
class we can see there's a second array
that was generated and also populated

00:13:55.780 --> 00:13:55.790
that was generated and also populated
 

00:13:55.790 --> 00:13:57.519
that was generated and also populated
with enum values and some magic

00:13:57.519 --> 00:13:57.529
with enum values and some magic
 

00:13:57.529 --> 00:13:59.439
with enum values and some magic
constants by the compiler and actually

00:13:59.439 --> 00:13:59.449
constants by the compiler and actually
 

00:13:59.449 --> 00:14:01.389
constants by the compiler and actually
you can see that those two arrays are

00:14:01.389 --> 00:14:01.399
you can see that those two arrays are
 

00:14:01.399 --> 00:14:02.799
you can see that those two arrays are
exactly the same they are the same

00:14:02.799 --> 00:14:02.809
exactly the same they are the same
 

00:14:02.809 --> 00:14:04.509
exactly the same they are the same
length and they contain exactly the same

00:14:04.509 --> 00:14:04.519
length and they contain exactly the same
 

00:14:04.519 --> 00:14:07.869
length and they contain exactly the same
mappings but if we generate if we used

00:14:07.869 --> 00:14:07.879
mappings but if we generate if we used
 

00:14:07.879 --> 00:14:10.119
mappings but if we generate if we used
in once again in a when and this time we

00:14:10.119 --> 00:14:10.129
in once again in a when and this time we
 

00:14:10.129 --> 00:14:12.160
in once again in a when and this time we
used we declare the enum values in a

00:14:12.160 --> 00:14:12.170
used we declare the enum values in a
 

00:14:12.170 --> 00:14:13.660
used we declare the enum values in a
different order and we look at the

00:14:13.660 --> 00:14:13.670
different order and we look at the
 

00:14:13.670 --> 00:14:15.429
different order and we look at the
generate code we have a third array as

00:14:15.429 --> 00:14:15.439
generate code we have a third array as
 

00:14:15.439 --> 00:14:17.499
generate code we have a third array as
expected also the same length but the

00:14:17.499 --> 00:14:17.509
expected also the same length but the
 

00:14:17.509 --> 00:14:20.319
expected also the same length but the
mappings are different I believe the

00:14:20.319 --> 00:14:20.329
mappings are different I believe the
 

00:14:20.329 --> 00:14:22.269
mappings are different I believe the
reason the compilers do this is that if

00:14:22.269 --> 00:14:22.279
reason the compilers do this is that if
 

00:14:22.279 --> 00:14:25.179
reason the compilers do this is that if
you change the enum the code that that

00:14:25.179 --> 00:14:25.189
you change the enum the code that that
 

00:14:25.189 --> 00:14:26.499
you change the enum the code that that
was compiled before with the old version

00:14:26.499 --> 00:14:26.509
was compiled before with the old version
 

00:14:26.509 --> 00:14:28.720
was compiled before with the old version
of genome will still work so they need

00:14:28.720 --> 00:14:28.730
of genome will still work so they need
 

00:14:28.730 --> 00:14:29.559
of genome will still work so they need
this indirection

00:14:29.559 --> 00:14:29.569
this indirection
 

00:14:29.569 --> 00:14:31.150
this indirection
but what becomes interesting is

00:14:31.150 --> 00:14:31.160
but what becomes interesting is
 

00:14:31.160 --> 00:14:32.559
but what becomes interesting is
obviously most of the time you will

00:14:32.559 --> 00:14:32.569
obviously most of the time you will
 

00:14:32.569 --> 00:14:34.449
obviously most of the time you will
never need to care about this if you

00:14:34.449 --> 00:14:34.459
never need to care about this if you
 

00:14:34.459 --> 00:14:36.340
never need to care about this if you
have a lot of wounds on enums in

00:14:36.340 --> 00:14:36.350
have a lot of wounds on enums in
 

00:14:36.350 --> 00:14:38.079
have a lot of wounds on enums in
performance-critical code you're gonna

00:14:38.079 --> 00:14:38.089
performance-critical code you're gonna
 

00:14:38.089 --> 00:14:39.939
performance-critical code you're gonna
have extra code that gets initialized

00:14:39.939 --> 00:14:39.949
have extra code that gets initialized
 

00:14:39.949 --> 00:14:42.579
have extra code that gets initialized
that runs at initialization time and you

00:14:42.579 --> 00:14:42.589
that runs at initialization time and you
 

00:14:42.589 --> 00:14:44.679
that runs at initialization time and you
have this extra help in memory but most

00:14:44.679 --> 00:14:44.689
have this extra help in memory but most
 

00:14:44.689 --> 00:14:45.999
have this extra help in memory but most
of the time you don't need to care about

00:14:45.999 --> 00:14:46.009
of the time you don't need to care about
 

00:14:46.009 --> 00:14:47.850
of the time you don't need to care about
this usiness

00:14:47.850 --> 00:14:47.860
this usiness
 

00:14:47.860 --> 00:14:50.530
this usiness
all right let's talk about laziness I

00:14:50.530 --> 00:14:50.540
all right let's talk about laziness I
 

00:14:50.540 --> 00:14:52.749
all right let's talk about laziness I
know a lot about this very common

00:14:52.749 --> 00:14:52.759
know a lot about this very common
 

00:14:52.759 --> 00:14:55.359
know a lot about this very common
pattern in software to say I may need to

00:14:55.359 --> 00:14:55.369
pattern in software to say I may need to
 

00:14:55.369 --> 00:14:57.069
pattern in software to say I may need to
allocate this thing but it's gonna cause

00:14:57.069 --> 00:14:57.079
allocate this thing but it's gonna cause
 

00:14:57.079 --> 00:14:58.689
allocate this thing but it's gonna cause
a lot of work and maybe I don't want

00:14:58.689 --> 00:14:58.699
a lot of work and maybe I don't want
 

00:14:58.699 --> 00:15:00.340
a lot of work and maybe I don't want
those allocations in the background work

00:15:00.340 --> 00:15:00.350
those allocations in the background work
 

00:15:00.350 --> 00:15:02.530
those allocations in the background work
to to happen to do that because maybe

00:15:02.530 --> 00:15:02.540
to to happen to do that because maybe
 

00:15:02.540 --> 00:15:04.840
to to happen to do that because maybe
the code won't need it so we'll we'll do

00:15:04.840 --> 00:15:04.850
the code won't need it so we'll we'll do
 

00:15:04.850 --> 00:15:06.220
the code won't need it so we'll we'll do
it lazily we'll do it sometime later

00:15:06.220 --> 00:15:06.230
it lazily we'll do it sometime later
 

00:15:06.230 --> 00:15:09.609
it lazily we'll do it sometime later
right so manual approach looks like this

00:15:09.609 --> 00:15:09.619
right so manual approach looks like this
 

00:15:09.619 --> 00:15:12.639
right so manual approach looks like this
so caveat really stupid example nobody

00:15:12.639 --> 00:15:12.649
so caveat really stupid example nobody
 

00:15:12.649 --> 00:15:14.169
so caveat really stupid example nobody
should ever do this just to avoid

00:15:14.169 --> 00:15:14.179
should ever do this just to avoid
 

00:15:14.179 --> 00:15:16.150
should ever do this just to avoid
allocating and no matter how it's

00:15:16.150 --> 00:15:16.160
allocating and no matter how it's
 

00:15:16.160 --> 00:15:17.980
allocating and no matter how it's
implemented on a very stupid example it

00:15:17.980 --> 00:15:17.990
implemented on a very stupid example it
 

00:15:17.990 --> 00:15:19.960
implemented on a very stupid example it
is a very stupid example there is a very

00:15:19.960 --> 00:15:19.970
is a very stupid example there is a very
 

00:15:19.970 --> 00:15:22.269
is a very stupid example there is a very
real example that is almost as stupid

00:15:22.269 --> 00:15:22.279
real example that is almost as stupid
 

00:15:22.279 --> 00:15:24.639
real example that is almost as stupid
which is code that we actually saw which

00:15:24.639 --> 00:15:24.649
which is code that we actually saw which
 

00:15:24.649 --> 00:15:27.369
which is code that we actually saw which
I which did lazy allocation for a rect

00:15:27.369 --> 00:15:27.379
I which did lazy allocation for a rect
 

00:15:27.379 --> 00:15:30.309
I which did lazy allocation for a rect
object which is just four times less

00:15:30.309 --> 00:15:30.319
object which is just four times less
 

00:15:30.319 --> 00:15:33.129
object which is just four times less
stupid than this right so allocating for

00:15:33.129 --> 00:15:33.139
stupid than this right so allocating for
 

00:15:33.139 --> 00:15:35.049
stupid than this right so allocating for
integers but for some reason they wanted

00:15:35.049 --> 00:15:35.059
integers but for some reason they wanted
 

00:15:35.059 --> 00:15:36.939
integers but for some reason they wanted
to do it lazily because why allocate if

00:15:36.939 --> 00:15:36.949
to do it lazily because why allocate if
 

00:15:36.949 --> 00:15:39.069
to do it lazily because why allocate if
you don't need to write so bear with me

00:15:39.069 --> 00:15:39.079
you don't need to write so bear with me
 

00:15:39.079 --> 00:15:41.499
you don't need to write so bear with me
so we have this inch we're gonna set it

00:15:41.499 --> 00:15:41.509
so we have this inch we're gonna set it
 

00:15:41.509 --> 00:15:44.769
so we have this inch we're gonna set it
equal to 573 but maybe nobody's gonna

00:15:44.769 --> 00:15:44.779
equal to 573 but maybe nobody's gonna
 

00:15:44.779 --> 00:15:46.569
equal to 573 but maybe nobody's gonna
need this so we're gonna make it lazy

00:15:46.569 --> 00:15:46.579
need this so we're gonna make it lazy
 

00:15:46.579 --> 00:15:47.919
need this so we're gonna make it lazy
instead so we're gonna have a private

00:15:47.919 --> 00:15:47.929
instead so we're gonna have a private
 

00:15:47.929 --> 00:15:50.199
instead so we're gonna have a private
member variable that's knowable now part

00:15:50.199 --> 00:15:50.209
member variable that's knowable now part
 

00:15:50.209 --> 00:15:51.730
member variable that's knowable now part
of the problem here is we know from the

00:15:51.730 --> 00:15:51.740
of the problem here is we know from the
 

00:15:51.740 --> 00:15:53.650
of the problem here is we know from the
earlier example is well now we have

00:15:53.650 --> 00:15:53.660
earlier example is well now we have
 

00:15:53.660 --> 00:15:54.789
earlier example is well now we have
something that could have been a

00:15:54.789 --> 00:15:54.799
something that could have been a
 

00:15:54.799 --> 00:15:56.679
something that could have been a
primitive but now all of a sudden we've

00:15:56.679 --> 00:15:56.689
primitive but now all of a sudden we've
 

00:15:56.689 --> 00:15:58.329
primitive but now all of a sudden we've
made it an object type instead just

00:15:58.329 --> 00:15:58.339
made it an object type instead just
 

00:15:58.339 --> 00:16:00.150
made it an object type instead just
because we want to set it to no but

00:16:00.150 --> 00:16:00.160
because we want to set it to no but
 

00:16:00.160 --> 00:16:02.860
because we want to set it to no but
anyway you've got this private member

00:16:02.860 --> 00:16:02.870
anyway you've got this private member
 

00:16:02.870 --> 00:16:04.000
anyway you've got this private member
variable

00:16:04.000 --> 00:16:04.010
variable
 

00:16:04.010 --> 00:16:05.290
variable
and then you have the actual thing that

00:16:05.290 --> 00:16:05.300
and then you have the actual thing that
 

00:16:05.300 --> 00:16:08.080
and then you have the actual thing that
they're gonna access and you say okay

00:16:08.080 --> 00:16:08.090
they're gonna access and you say okay
 

00:16:08.090 --> 00:16:09.580
they're gonna access and you say okay
when they actually call the getter we'll

00:16:09.580 --> 00:16:09.590
when they actually call the getter we'll
 

00:16:09.590 --> 00:16:10.990
when they actually call the getter we'll
see if it's null and that's the trigger

00:16:10.990 --> 00:16:11.000
see if it's null and that's the trigger
 

00:16:11.000 --> 00:16:12.880
see if it's null and that's the trigger
to say okay now actually set the value

00:16:12.880 --> 00:16:12.890
to say okay now actually set the value
 

00:16:12.890 --> 00:16:14.320
to say okay now actually set the value
to this thing and return the value and

00:16:14.320 --> 00:16:14.330
to this thing and return the value and
 

00:16:14.330 --> 00:16:16.510
to this thing and return the value and
you're done next time they ask for it's

00:16:16.510 --> 00:16:16.520
you're done next time they ask for it's
 

00:16:16.520 --> 00:16:17.950
you're done next time they ask for it's
already allocated and set and you don't

00:16:17.950 --> 00:16:17.960
already allocated and set and you don't
 

00:16:17.960 --> 00:16:19.300
already allocated and set and you don't
have to worry about it that's the

00:16:19.300 --> 00:16:19.310
have to worry about it that's the
 

00:16:19.310 --> 00:16:20.920
have to worry about it that's the
general approach I'm sure we've all done

00:16:20.920 --> 00:16:20.930
general approach I'm sure we've all done
 

00:16:20.930 --> 00:16:22.840
general approach I'm sure we've all done
this hundreds of times hopefully for a

00:16:22.840 --> 00:16:22.850
this hundreds of times hopefully for a
 

00:16:22.850 --> 00:16:24.880
this hundreds of times hopefully for a
less stupid examples than this one all

00:16:24.880 --> 00:16:24.890
less stupid examples than this one all
 

00:16:24.890 --> 00:16:27.880
less stupid examples than this one all
right this is what it looks like at Java

00:16:27.880 --> 00:16:27.890
right this is what it looks like at Java
 

00:16:27.890 --> 00:16:29.800
right this is what it looks like at Java
level like this is essentially what it

00:16:29.800 --> 00:16:29.810
level like this is essentially what it
 

00:16:29.810 --> 00:16:31.540
level like this is essentially what it
compiles to if we look at the decompiled

00:16:31.540 --> 00:16:31.550
compiles to if we look at the decompiled
 

00:16:31.550 --> 00:16:34.120
compiles to if we look at the decompiled
bytecode it looks exactly as what you

00:16:34.120 --> 00:16:34.130
bytecode it looks exactly as what you
 

00:16:34.130 --> 00:16:35.950
bytecode it looks exactly as what you
would expect it to you've got the same

00:16:35.950 --> 00:16:35.960
would expect it to you've got the same
 

00:16:35.960 --> 00:16:37.480
would expect it to you've got the same
thing going on

00:16:37.480 --> 00:16:37.490
thing going on
 

00:16:37.490 --> 00:16:40.030
thing going on
with in some integers and it's doing the

00:16:40.030 --> 00:16:40.040
with in some integers and it's doing the
 

00:16:40.040 --> 00:16:42.280
with in some integers and it's doing the
right thing there okay but there's a

00:16:42.280 --> 00:16:42.290
right thing there okay but there's a
 

00:16:42.290 --> 00:16:44.050
right thing there okay but there's a
better way to do this with Kotlin

00:16:44.050 --> 00:16:44.060
better way to do this with Kotlin
 

00:16:44.060 --> 00:16:45.550
better way to do this with Kotlin
there's an automatic approach that takes

00:16:45.550 --> 00:16:45.560
there's an automatic approach that takes
 

00:16:45.560 --> 00:16:48.010
there's an automatic approach that takes
exactly one line of code isn't that much

00:16:48.010 --> 00:16:48.020
exactly one line of code isn't that much
 

00:16:48.020 --> 00:16:51.250
exactly one line of code isn't that much
better to use say bye lazy will set it

00:16:51.250 --> 00:16:51.260
better to use say bye lazy will set it
 

00:16:51.260 --> 00:16:53.890
better to use say bye lazy will set it
to 574 so it doesn't get set to anything

00:16:53.890 --> 00:16:53.900
to 574 so it doesn't get set to anything
 

00:16:53.900 --> 00:16:55.570
to 574 so it doesn't get set to anything
until someone asked for the first time

00:16:55.570 --> 00:16:55.580
until someone asked for the first time
 

00:16:55.580 --> 00:16:58.270
until someone asked for the first time
and then it goes through some operations

00:16:58.270 --> 00:16:58.280
and then it goes through some operations
 

00:16:58.280 --> 00:17:00.400
and then it goes through some operations
to actually allocate and return this

00:17:00.400 --> 00:17:00.410
to actually allocate and return this
 

00:17:00.410 --> 00:17:02.800
to actually allocate and return this
value of 574 and the question is what

00:17:02.800 --> 00:17:02.810
value of 574 and the question is what
 

00:17:02.810 --> 00:17:06.060
value of 574 and the question is what
operations does it go through so I

00:17:06.060 --> 00:17:06.070
operations does it go through so I
 

00:17:06.070 --> 00:17:09.280
operations does it go through so I
should explain first lazy is implemented

00:17:09.280 --> 00:17:09.290
should explain first lazy is implemented
 

00:17:09.290 --> 00:17:12.610
should explain first lazy is implemented
using property delegates in Kotlin and

00:17:12.610 --> 00:17:12.620
using property delegates in Kotlin and
 

00:17:12.620 --> 00:17:15.040
using property delegates in Kotlin and
it's at this generic mechanism they have

00:17:15.040 --> 00:17:15.050
it's at this generic mechanism they have
 

00:17:15.050 --> 00:17:17.770
it's at this generic mechanism they have
for delegating logic somewhere else so I

00:17:17.770 --> 00:17:17.780
for delegating logic somewhere else so I
 

00:17:17.780 --> 00:17:19.810
for delegating logic somewhere else so I
want when someone asks for this variable

00:17:19.810 --> 00:17:19.820
want when someone asks for this variable
 

00:17:19.820 --> 00:17:21.490
want when someone asks for this variable
I want you to run this logic over here

00:17:21.490 --> 00:17:21.500
I want you to run this logic over here
 

00:17:21.500 --> 00:17:23.530
I want you to run this logic over here
and return other information from there

00:17:23.530 --> 00:17:23.540
and return other information from there
 

00:17:23.540 --> 00:17:25.030
and return other information from there
the other background piece of

00:17:25.030 --> 00:17:25.040
the other background piece of
 

00:17:25.040 --> 00:17:27.790
the other background piece of
information is properties properties in

00:17:27.790 --> 00:17:27.800
information is properties properties in
 

00:17:27.800 --> 00:17:30.370
information is properties properties in
Kotlin do much more than properties in

00:17:30.370 --> 00:17:30.380
Kotlin do much more than properties in
 

00:17:30.380 --> 00:17:32.080
Kotlin do much more than properties in
the java programming language which

00:17:32.080 --> 00:17:32.090
the java programming language which
 

00:17:32.090 --> 00:17:33.520
the java programming language which
means if you're going to access

00:17:33.520 --> 00:17:33.530
means if you're going to access
 

00:17:33.530 --> 00:17:35.350
means if you're going to access
information on a property using

00:17:35.350 --> 00:17:35.360
information on a property using
 

00:17:35.360 --> 00:17:37.150
information on a property using
reflection well how does that work

00:17:37.150 --> 00:17:37.160
reflection well how does that work
 

00:17:37.160 --> 00:17:39.130
reflection well how does that work
through the bytecode since Java

00:17:39.130 --> 00:17:39.140
through the bytecode since Java
 

00:17:39.140 --> 00:17:40.810
through the bytecode since Java
programming language doesn't have that

00:17:40.810 --> 00:17:40.820
programming language doesn't have that
 

00:17:40.820 --> 00:17:41.470
programming language doesn't have that
capability

00:17:41.470 --> 00:17:41.480
capability
 

00:17:41.480 --> 00:17:43.360
capability
all right well colin needed to add

00:17:43.360 --> 00:17:43.370
all right well colin needed to add
 

00:17:43.370 --> 00:17:45.100
all right well colin needed to add
capabilities so that when you use a

00:17:45.100 --> 00:17:45.110
capabilities so that when you use a
 

00:17:45.110 --> 00:17:47.050
capabilities so that when you use a
reflection it will go through there

00:17:47.050 --> 00:17:47.060
reflection it will go through there
 

00:17:47.060 --> 00:17:49.720
reflection it will go through there
extra or additional stuff to actually

00:17:49.720 --> 00:17:49.730
extra or additional stuff to actually
 

00:17:49.730 --> 00:17:51.790
extra or additional stuff to actually
get that extra bit of information from

00:17:51.790 --> 00:17:51.800
get that extra bit of information from
 

00:17:51.800 --> 00:17:53.290
get that extra bit of information from
their property so they created this

00:17:53.290 --> 00:17:53.300
their property so they created this
 

00:17:53.300 --> 00:17:56.110
their property so they created this
class called kay property and now if you

00:17:56.110 --> 00:17:56.120
class called kay property and now if you
 

00:17:56.120 --> 00:17:58.240
class called kay property and now if you
use reflection on a colin property it

00:17:58.240 --> 00:17:58.250
use reflection on a colin property it
 

00:17:58.250 --> 00:18:00.310
use reflection on a colin property it
can go through the kay property and get

00:18:00.310 --> 00:18:00.320
can go through the kay property and get
 

00:18:00.320 --> 00:18:02.220
can go through the kay property and get
that extra information that it needs so

00:18:02.220 --> 00:18:02.230
that extra information that it needs so
 

00:18:02.230 --> 00:18:04.330
that extra information that it needs so
that's the background here's what's

00:18:04.330 --> 00:18:04.340
that's the background here's what's
 

00:18:04.340 --> 00:18:06.280
that's the background here's what's
going on inside of lazy first of all

00:18:06.280 --> 00:18:06.290
going on inside of lazy first of all
 

00:18:06.290 --> 00:18:08.620
going on inside of lazy first of all
when you say by lazy it automatically

00:18:08.620 --> 00:18:08.630
when you say by lazy it automatically
 

00:18:08.630 --> 00:18:11.560
when you say by lazy it automatically
creates an array allocation brain should

00:18:11.560 --> 00:18:11.570
creates an array allocation brain should
 

00:18:11.570 --> 00:18:12.549
creates an array allocation brain should
say oh there's a now

00:18:12.549 --> 00:18:12.559
say oh there's a now
 

00:18:12.559 --> 00:18:14.739
say oh there's a now
ocation so you've got this K property

00:18:14.739 --> 00:18:14.749
ocation so you've got this K property
 

00:18:14.749 --> 00:18:16.029
ocation so you've got this K property
array where it's going to set up the

00:18:16.029 --> 00:18:16.039
array where it's going to set up the
 

00:18:16.039 --> 00:18:18.310
array where it's going to set up the
information for getting things from this

00:18:18.310 --> 00:18:18.320
information for getting things from this
 

00:18:18.320 --> 00:18:20.320
information for getting things from this
Kotlin specific property reflection

00:18:20.320 --> 00:18:20.330
Kotlin specific property reflection
 

00:18:20.330 --> 00:18:21.999
Kotlin specific property reflection
mechanism that they have so we've got

00:18:21.999 --> 00:18:22.009
mechanism that they have so we've got
 

00:18:22.009 --> 00:18:23.860
mechanism that they have so we've got
the array and the array consists of one

00:18:23.860 --> 00:18:23.870
the array and the array consists of one
 

00:18:23.870 --> 00:18:25.869
the array and the array consists of one
item which is this K property that

00:18:25.869 --> 00:18:25.879
item which is this K property that
 

00:18:25.879 --> 00:18:27.759
item which is this K property that
they've set up specifically for this

00:18:27.759 --> 00:18:27.769
they've set up specifically for this
 

00:18:27.769 --> 00:18:29.350
they've set up specifically for this
lazy property that you've told it about

00:18:29.350 --> 00:18:29.360
lazy property that you've told it about
 

00:18:29.360 --> 00:18:31.060
lazy property that you've told it about
you've got the class name you've got the

00:18:31.060 --> 00:18:31.070
you've got the class name you've got the
 

00:18:31.070 --> 00:18:34.029
you've got the class name you've got the
type and that's basically it you've got

00:18:34.029 --> 00:18:34.039
type and that's basically it you've got
 

00:18:34.039 --> 00:18:35.499
type and that's basically it you've got
the name of the thing right so it sets

00:18:35.499 --> 00:18:35.509
the name of the thing right so it sets
 

00:18:35.509 --> 00:18:35.950
the name of the thing right so it sets
this up

00:18:35.950 --> 00:18:35.960
this up
 

00:18:35.960 --> 00:18:38.169
this up
array plus an allocation of the K

00:18:38.169 --> 00:18:38.179
array plus an allocation of the K
 

00:18:38.179 --> 00:18:40.840
array plus an allocation of the K
property inside of it then it sets up

00:18:40.840 --> 00:18:40.850
property inside of it then it sets up
 

00:18:40.850 --> 00:18:42.460
property inside of it then it sets up
this call internally this is sort of

00:18:42.460 --> 00:18:42.470
this call internally this is sort of
 

00:18:42.470 --> 00:18:44.320
this call internally this is sort of
initialization time code it says okay

00:18:44.320 --> 00:18:44.330
initialization time code it says okay
 

00:18:44.330 --> 00:18:45.999
initialization time code it says okay
there's this lazy thing that's going to

00:18:45.999 --> 00:18:46.009
there's this lazy thing that's going to
 

00:18:46.009 --> 00:18:48.489
there's this lazy thing that's going to
return a class of type lazy and from

00:18:48.489 --> 00:18:48.499
return a class of type lazy and from
 

00:18:48.499 --> 00:18:51.430
return a class of type lazy and from
that we can get the value so when you

00:18:51.430 --> 00:18:51.440
that we can get the value so when you
 

00:18:51.440 --> 00:18:53.919
that we can get the value so when you
call together on that property it's

00:18:53.919 --> 00:18:53.929
call together on that property it's
 

00:18:53.929 --> 00:18:55.299
call together on that property it's
going to call into this code which is

00:18:55.299 --> 00:18:55.309
going to call into this code which is
 

00:18:55.309 --> 00:18:57.190
going to call into this code which is
going to call a get value on that lazy

00:18:57.190 --> 00:18:57.200
going to call a get value on that lazy
 

00:18:57.200 --> 00:18:58.690
going to call a get value on that lazy
object and then it's going to call in

00:18:58.690 --> 00:18:58.700
object and then it's going to call in
 

00:18:58.700 --> 00:19:02.200
object and then it's going to call in
value on that all of this could bottom

00:19:02.200 --> 00:19:02.210
value on that all of this could bottom
 

00:19:02.210 --> 00:19:04.989
value on that all of this could bottom
out in reflection code to go get it from

00:19:04.989 --> 00:19:04.999
out in reflection code to go get it from
 

00:19:04.999 --> 00:19:07.239
out in reflection code to go get it from
K property which is like even worse than

00:19:07.239 --> 00:19:07.249
K property which is like even worse than
 

00:19:07.249 --> 00:19:09.430
K property which is like even worse than
the allocations we've seen so far like

00:19:09.430 --> 00:19:09.440
the allocations we've seen so far like
 

00:19:09.440 --> 00:19:12.009
the allocations we've seen so far like
at at the end of all of this you may end

00:19:12.009 --> 00:19:12.019
at at the end of all of this you may end
 

00:19:12.019 --> 00:19:13.749
at at the end of all of this you may end
up in reflection code just to get an

00:19:13.749 --> 00:19:13.759
up in reflection code just to get an
 

00:19:13.759 --> 00:19:15.850
up in reflection code just to get an
integer value however because of

00:19:15.850 --> 00:19:15.860
integer value however because of
 

00:19:15.860 --> 00:19:17.350
integer value however because of
extension methods they're more clever

00:19:17.350 --> 00:19:17.360
extension methods they're more clever
 

00:19:17.360 --> 00:19:19.119
extension methods they're more clever
than that and they actually spit out

00:19:19.119 --> 00:19:19.129
than that and they actually spit out
 

00:19:19.129 --> 00:19:22.239
than that and they actually spit out
this extension method that says oh if

00:19:22.239 --> 00:19:22.249
this extension method that says oh if
 

00:19:22.249 --> 00:19:24.340
this extension method that says oh if
it's a lazy thing if they're using the

00:19:24.340 --> 00:19:24.350
it's a lazy thing if they're using the
 

00:19:24.350 --> 00:19:25.810
it's a lazy thing if they're using the
lazy class then we're just going to call

00:19:25.810 --> 00:19:25.820
lazy class then we're just going to call
 

00:19:25.820 --> 00:19:27.730
lazy class then we're just going to call
this function instead so no need for

00:19:27.730 --> 00:19:27.740
this function instead so no need for
 

00:19:27.740 --> 00:19:29.830
this function instead so no need for
reflection even though K property stuff

00:19:29.830 --> 00:19:29.840
reflection even though K property stuff
 

00:19:29.840 --> 00:19:31.930
reflection even though K property stuff
was set up and has reflection

00:19:31.930 --> 00:19:31.940
was set up and has reflection
 

00:19:31.940 --> 00:19:33.850
was set up and has reflection
capabilities we're not using that aspect

00:19:33.850 --> 00:19:33.860
capabilities we're not using that aspect
 

00:19:33.860 --> 00:19:35.889
capabilities we're not using that aspect
of it instead it'll just call into this

00:19:35.889 --> 00:19:35.899
of it instead it'll just call into this
 

00:19:35.899 --> 00:19:38.249
of it instead it'll just call into this
method and get the value which is this

00:19:38.249 --> 00:19:38.259
method and get the value which is this
 

00:19:38.259 --> 00:19:41.080
method and get the value which is this
simpler than reflection however a couple

00:19:41.080 --> 00:19:41.090
simpler than reflection however a couple
 

00:19:41.090 --> 00:19:42.580
simpler than reflection however a couple
of conditions to check and a

00:19:42.580 --> 00:19:42.590
of conditions to check and a
 

00:19:42.590 --> 00:19:44.680
of conditions to check and a
synchronized Block in there just to get

00:19:44.680 --> 00:19:44.690
synchronized Block in there just to get
 

00:19:44.690 --> 00:19:46.480
synchronized Block in there just to get
this int value from this very stupid

00:19:46.480 --> 00:19:46.490
this int value from this very stupid
 

00:19:46.490 --> 00:19:48.310
this int value from this very stupid
example I've written in addition to that

00:19:48.310 --> 00:19:48.320
example I've written in addition to that
 

00:19:48.320 --> 00:19:50.909
example I've written in addition to that
when all of this is set up we go through

00:19:50.909 --> 00:19:50.919
when all of this is set up we go through
 

00:19:50.919 --> 00:19:52.869
when all of this is set up we go through
initialization code which in bytecode

00:19:52.869 --> 00:19:52.879
initialization code which in bytecode
 

00:19:52.879 --> 00:19:54.430
initialization code which in bytecode
looks something like this so basically

00:19:54.430 --> 00:19:54.440
looks something like this so basically
 

00:19:54.440 --> 00:19:56.859
looks something like this so basically
whenever you get into this and

00:19:56.859 --> 00:19:56.869
whenever you get into this and
 

00:19:56.869 --> 00:19:59.259
whenever you get into this and
initialize this object this is what gets

00:19:59.259 --> 00:19:59.269
initialize this object this is what gets
 

00:19:59.269 --> 00:20:01.060
initialize this object this is what gets
emitted on your behalf under the hood

00:20:01.060 --> 00:20:01.070
emitted on your behalf under the hood
 

00:20:01.070 --> 00:20:03.369
emitted on your behalf under the hood
just to save an allocation of an integer

00:20:03.369 --> 00:20:03.379
just to save an allocation of an integer
 

00:20:03.379 --> 00:20:05.830
just to save an allocation of an integer
object as I said stupid example but real

00:20:05.830 --> 00:20:05.840
object as I said stupid example but real
 

00:20:05.840 --> 00:20:07.659
object as I said stupid example but real
example is people doing it for small

00:20:07.659 --> 00:20:07.669
example is people doing it for small
 

00:20:07.669 --> 00:20:10.119
example is people doing it for small
data structures like rep so lazy is

00:20:10.119 --> 00:20:10.129
data structures like rep so lazy is
 

00:20:10.129 --> 00:20:11.950
data structures like rep so lazy is
awesome it's really cool that you can do

00:20:11.950 --> 00:20:11.960
awesome it's really cool that you can do
 

00:20:11.960 --> 00:20:13.840
awesome it's really cool that you can do
this in one line of code and if you have

00:20:13.840 --> 00:20:13.850
this in one line of code and if you have
 

00:20:13.850 --> 00:20:16.119
this in one line of code and if you have
a complicated data structure or a lot of

00:20:16.119 --> 00:20:16.129
a complicated data structure or a lot of
 

00:20:16.129 --> 00:20:17.649
a complicated data structure or a lot of
complicated object when it gets set up

00:20:17.649 --> 00:20:17.659
complicated object when it gets set up
 

00:20:17.659 --> 00:20:19.090
complicated object when it gets set up
and if it's not going to be used very

00:20:19.090 --> 00:20:19.100
and if it's not going to be used very
 

00:20:19.100 --> 00:20:19.509
and if it's not going to be used very
often

00:20:19.509 --> 00:20:19.519
often
 

00:20:19.519 --> 00:20:22.450
often
totally worth considering for avoiding

00:20:22.450 --> 00:20:22.460
totally worth considering for avoiding
 

00:20:22.460 --> 00:20:24.520
totally worth considering for avoiding
the allocation of a simple int

00:20:24.520 --> 00:20:24.530
the allocation of a simple int
 

00:20:24.530 --> 00:20:27.430
the allocation of a simple int
why not so now let's take a look at

00:20:27.430 --> 00:20:27.440
why not so now let's take a look at
 

00:20:27.440 --> 00:20:28.990
why not so now let's take a look at
unsigned numbers so this is a new

00:20:28.990 --> 00:20:29.000
unsigned numbers so this is a new
 

00:20:29.000 --> 00:20:30.820
unsigned numbers so this is a new
experimental features that was

00:20:30.820 --> 00:20:30.830
experimental features that was
 

00:20:30.830 --> 00:20:35.440
experimental features that was
introduced in curtain 1.3 so Java has

00:20:35.440 --> 00:20:35.450
introduced in curtain 1.3 so Java has
 

00:20:35.450 --> 00:20:39.250
introduced in curtain 1.3 so Java has
mostly signed numbers and kirtland is

00:20:39.250 --> 00:20:39.260
mostly signed numbers and kirtland is
 

00:20:39.260 --> 00:20:41.080
mostly signed numbers and kirtland is
finally bringing unsigned numbers which

00:20:41.080 --> 00:20:41.090
finally bringing unsigned numbers which
 

00:20:41.090 --> 00:20:43.060
finally bringing unsigned numbers which
can be very useful when you do graphics

00:20:43.060 --> 00:20:43.070
can be very useful when you do graphics
 

00:20:43.070 --> 00:20:44.380
can be very useful when you do graphics
code for instance when you have a width

00:20:44.380 --> 00:20:44.390
code for instance when you have a width
 

00:20:44.390 --> 00:20:46.480
code for instance when you have a width
and a height you want them to be

00:20:46.480 --> 00:20:46.490
and a height you want them to be
 

00:20:46.490 --> 00:20:48.340
and a height you want them to be
unsigned it's very useful as you know as

00:20:48.340 --> 00:20:48.350
unsigned it's very useful as you know as
 

00:20:48.350 --> 00:20:50.020
unsigned it's very useful as you know as
a type check that you're not going to

00:20:50.020 --> 00:20:50.030
a type check that you're not going to
 

00:20:50.030 --> 00:20:51.430
a type check that you're not going to
get a negative value which will make no

00:20:51.430 --> 00:20:51.440
get a negative value which will make no
 

00:20:51.440 --> 00:20:53.830
get a negative value which will make no
sense for dimension so if you enable

00:20:53.830 --> 00:20:53.840
sense for dimension so if you enable
 

00:20:53.840 --> 00:20:55.390
sense for dimension so if you enable
this experimental feature here's how you

00:20:55.390 --> 00:20:55.400
this experimental feature here's how you
 

00:20:55.400 --> 00:20:58.060
this experimental feature here's how you
can use the unsigned numbers you can use

00:20:58.060 --> 00:20:58.070
can use the unsigned numbers you can use
 

00:20:58.070 --> 00:21:01.240
can use the unsigned numbers you can use
the U suffix to declare a type to be

00:21:01.240 --> 00:21:01.250
the U suffix to declare a type to be
 

00:21:01.250 --> 00:21:03.280
the U suffix to declare a type to be
unsigned and under the hood they are

00:21:03.280 --> 00:21:03.290
unsigned and under the hood they are
 

00:21:03.290 --> 00:21:04.750
unsigned and under the hood they are
implemented using another experimental

00:21:04.750 --> 00:21:04.760
implemented using another experimental
 

00:21:04.760 --> 00:21:06.340
implemented using another experimental
feature called inline classes and we're

00:21:06.340 --> 00:21:06.350
feature called inline classes and we're
 

00:21:06.350 --> 00:21:07.540
feature called inline classes and we're
going to take a closer look at the nine

00:21:07.540 --> 00:21:07.550
going to take a closer look at the nine
 

00:21:07.550 --> 00:21:09.340
going to take a closer look at the nine
classes in a little bit but first let's

00:21:09.340 --> 00:21:09.350
classes in a little bit but first let's
 

00:21:09.350 --> 00:21:10.750
classes in a little bit but first let's
take a look at this example so I declare

00:21:10.750 --> 00:21:10.760
take a look at this example so I declare
 

00:21:10.760 --> 00:21:13.120
take a look at this example so I declare
two unsigned numbers and then then and

00:21:13.120 --> 00:21:13.130
two unsigned numbers and then then and
 

00:21:13.130 --> 00:21:16.690
two unsigned numbers and then then and
then I just add them so what happens so

00:21:16.690 --> 00:21:16.700
then I just add them so what happens so
 

00:21:16.700 --> 00:21:19.360
then I just add them so what happens so
every unsigned number is just an integer

00:21:19.360 --> 00:21:19.370
every unsigned number is just an integer
 

00:21:19.370 --> 00:21:21.010
every unsigned number is just an integer
that's pushed on the stack and store in

00:21:21.010 --> 00:21:21.020
that's pushed on the stack and store in
 

00:21:21.020 --> 00:21:22.500
that's pushed on the stack and store in
a variable so here there's nothing

00:21:22.500 --> 00:21:22.510
a variable so here there's nothing
 

00:21:22.510 --> 00:21:24.970
a variable so here there's nothing
interesting to see and when we add them

00:21:24.970 --> 00:21:24.980
interesting to see and when we add them
 

00:21:24.980 --> 00:21:27.460
interesting to see and when we add them
we just load those two variables we call

00:21:27.460 --> 00:21:27.470
we just load those two variables we call
 

00:21:27.470 --> 00:21:30.430
we just load those two variables we call
the I add operation code embed code

00:21:30.430 --> 00:21:30.440
the I add operation code embed code
 

00:21:30.440 --> 00:21:32.580
the I add operation code embed code
which is just the addition of two

00:21:32.580 --> 00:21:32.590
which is just the addition of two
 

00:21:32.590 --> 00:21:35.800
which is just the addition of two
integers which are normally sign but gel

00:21:35.800 --> 00:21:35.810
integers which are normally sign but gel
 

00:21:35.810 --> 00:21:36.970
integers which are normally sign but gel
rounds that were very clever and they

00:21:36.970 --> 00:21:36.980
rounds that were very clever and they
 

00:21:36.980 --> 00:21:38.890
rounds that were very clever and they
realized that because of the way that

00:21:38.890 --> 00:21:38.900
realized that because of the way that
 

00:21:38.900 --> 00:21:40.330
realized that because of the way that
sine numbers and signed integers are

00:21:40.330 --> 00:21:40.340
sine numbers and signed integers are
 

00:21:40.340 --> 00:21:42.430
sine numbers and signed integers are
encoded it actually works with unsigned

00:21:42.430 --> 00:21:42.440
encoded it actually works with unsigned
 

00:21:42.440 --> 00:21:43.600
encoded it actually works with unsigned
as well so they didn't have to create

00:21:43.600 --> 00:21:43.610
as well so they didn't have to create
 

00:21:43.610 --> 00:21:46.570
as well so they didn't have to create
any anything new you can just use the

00:21:46.570 --> 00:21:46.580
any anything new you can just use the
 

00:21:46.580 --> 00:21:48.130
any anything new you can just use the
existing byte code everything happens at

00:21:48.130 --> 00:21:48.140
existing byte code everything happens at
 

00:21:48.140 --> 00:21:49.810
existing byte code everything happens at
the language level the only thing that

00:21:49.810 --> 00:21:49.820
the language level the only thing that
 

00:21:49.820 --> 00:21:51.490
the language level the only thing that
so do bizarre here is that we invoke a

00:21:51.490 --> 00:21:51.500
so do bizarre here is that we invoke a
 

00:21:51.500 --> 00:21:53.790
so do bizarre here is that we invoke a
static function called you int that

00:21:53.790 --> 00:21:53.800
static function called you int that
 

00:21:53.800 --> 00:21:56.470
static function called you int that
constructor - in pole you can see that

00:21:56.470 --> 00:21:56.480
constructor - in pole you can see that
 

00:21:56.480 --> 00:21:58.360
constructor - in pole you can see that
it takes an integer and returns an

00:21:58.360 --> 00:21:58.370
it takes an integer and returns an
 

00:21:58.370 --> 00:22:01.060
it takes an integer and returns an
integer so if we look at this particular

00:22:01.060 --> 00:22:01.070
integer so if we look at this particular
 

00:22:01.070 --> 00:22:03.250
integer so if we look at this particular
function to see what it does that's

00:22:03.250 --> 00:22:03.260
function to see what it does that's
 

00:22:03.260 --> 00:22:05.170
function to see what it does that's
where things get a real surprising and

00:22:05.170 --> 00:22:05.180
where things get a real surprising and
 

00:22:05.180 --> 00:22:07.180
where things get a real surprising and
I'm sure the JetBrains folks we know why

00:22:07.180 --> 00:22:07.190
I'm sure the JetBrains folks we know why
 

00:22:07.190 --> 00:22:10.150
I'm sure the JetBrains folks we know why
it does this I have no idea so we have

00:22:10.150 --> 00:22:10.160
it does this I have no idea so we have
 

00:22:10.160 --> 00:22:12.340
it does this I have no idea so we have
this function takes an integer returns

00:22:12.340 --> 00:22:12.350
this function takes an integer returns
 

00:22:12.350 --> 00:22:14.050
this function takes an integer returns
an integer and here's the implementation

00:22:14.050 --> 00:22:14.060
an integer and here's the implementation
 

00:22:14.060 --> 00:22:16.270
an integer and here's the implementation
it loads the parameter that you give it

00:22:16.270 --> 00:22:16.280
it loads the parameter that you give it
 

00:22:16.280 --> 00:22:20.710
it loads the parameter that you give it
and then it returns it and that's it so

00:22:20.710 --> 00:22:20.720
and then it returns it and that's it so
 

00:22:20.720 --> 00:22:23.560
and then it returns it and that's it so
I don't know why why it's there it's

00:22:23.560 --> 00:22:23.570
I don't know why why it's there it's
 

00:22:23.570 --> 00:22:25.420
I don't know why why it's there it's
maybe for the debugger so you can break

00:22:25.420 --> 00:22:25.430
maybe for the debugger so you can break
 

00:22:25.430 --> 00:22:28.390
maybe for the debugger so you can break
on it but other than that you know I

00:22:28.390 --> 00:22:28.400
on it but other than that you know I
 

00:22:28.400 --> 00:22:30.130
on it but other than that you know I
know the digits or the ahead of time

00:22:30.130 --> 00:22:30.140
know the digits or the ahead of time
 

00:22:30.140 --> 00:22:31.690
know the digits or the ahead of time
compiler will get rid of it or probably

00:22:31.690 --> 00:22:31.700
compiler will get rid of it or probably
 

00:22:31.700 --> 00:22:33.040
compiler will get rid of it or probably
all right so you don't need to worry

00:22:33.040 --> 00:22:33.050
all right so you don't need to worry
 

00:22:33.050 --> 00:22:34.210
all right so you don't need to worry
about this it's just a little strange

00:22:34.210 --> 00:22:34.220
about this it's just a little strange
 

00:22:34.220 --> 00:22:36.340
about this it's just a little strange
that we have this extra byte code for no

00:22:36.340 --> 00:22:36.350
that we have this extra byte code for no
 

00:22:36.350 --> 00:22:37.090
that we have this extra byte code for no
reason

00:22:37.090 --> 00:22:37.100
reason
 

00:22:37.100 --> 00:22:38.440
reason
so if you look at the other operators we

00:22:38.440 --> 00:22:38.450
so if you look at the other operators we
 

00:22:38.450 --> 00:22:39.940
so if you look at the other operators we
saw that the addition is just

00:22:39.940 --> 00:22:39.950
saw that the addition is just
 

00:22:39.950 --> 00:22:41.620
saw that the addition is just
implemented with the existing opcode add

00:22:41.620 --> 00:22:41.630
implemented with the existing opcode add
 

00:22:41.630 --> 00:22:43.720
implemented with the existing opcode add
same thing for the subtraction something

00:22:43.720 --> 00:22:43.730
same thing for the subtraction something
 

00:22:43.730 --> 00:22:45.430
same thing for the subtraction something
with the multiplication it's only when

00:22:45.430 --> 00:22:45.440
with the multiplication it's only when
 

00:22:45.440 --> 00:22:47.890
with the multiplication it's only when
you do a division that Katrina has to

00:22:47.890 --> 00:22:47.900
you do a division that Katrina has to
 

00:22:47.900 --> 00:22:50.980
you do a division that Katrina has to
invoke a special static method because

00:22:50.980 --> 00:22:50.990
invoke a special static method because
 

00:22:50.990 --> 00:22:53.650
invoke a special static method because
the dajun's works differently so there's

00:22:53.650 --> 00:22:53.660
the dajun's works differently so there's
 

00:22:53.660 --> 00:22:54.970
the dajun's works differently so there's
more code that runs here so most of the

00:22:54.970 --> 00:22:54.980
more code that runs here so most of the
 

00:22:54.980 --> 00:22:56.830
more code that runs here so most of the
time you know the unsigned numbers are

00:22:56.830 --> 00:22:56.840
time you know the unsigned numbers are
 

00:22:56.840 --> 00:22:59.140
time you know the unsigned numbers are
basically free so if you should feel

00:22:59.140 --> 00:22:59.150
basically free so if you should feel
 

00:22:59.150 --> 00:23:01.630
basically free so if you should feel
free to use them now let's look at what

00:23:01.630 --> 00:23:01.640
free to use them now let's look at what
 

00:23:01.640 --> 00:23:03.010
free to use them now let's look at what
happens when you try to print one of

00:23:03.010 --> 00:23:03.020
happens when you try to print one of
 

00:23:03.020 --> 00:23:04.270
happens when you try to print one of
those numbers basically when you try to

00:23:04.270 --> 00:23:04.280
those numbers basically when you try to
 

00:23:04.280 --> 00:23:05.950
those numbers basically when you try to
call to string on it so here I have a

00:23:05.950 --> 00:23:05.960
call to string on it so here I have a
 

00:23:05.960 --> 00:23:08.049
call to string on it so here I have a
signed number and an unsigned number and

00:23:08.049 --> 00:23:08.059
signed number and an unsigned number and
 

00:23:08.059 --> 00:23:10.659
signed number and an unsigned number and
I print them both so first let's look at

00:23:10.659 --> 00:23:10.669
I print them both so first let's look at
 

00:23:10.669 --> 00:23:12.730
I print them both so first let's look at
the sign number so we have this variable

00:23:12.730 --> 00:23:12.740
the sign number so we have this variable
 

00:23:12.740 --> 00:23:14.590
the sign number so we have this variable
called Z is equal to 42 and we call

00:23:14.590 --> 00:23:14.600
called Z is equal to 42 and we call
 

00:23:14.600 --> 00:23:18.730
called Z is equal to 42 and we call
println on it so that's exactly what we

00:23:18.730 --> 00:23:18.740
println on it so that's exactly what we
 

00:23:18.740 --> 00:23:20.140
println on it so that's exactly what we
expect but when we use the unsigned

00:23:20.140 --> 00:23:20.150
expect but when we use the unsigned
 

00:23:20.150 --> 00:23:22.299
expect but when we use the unsigned
number instead of printing it directly

00:23:22.299 --> 00:23:22.309
number instead of printing it directly
 

00:23:22.309 --> 00:23:25.419
number instead of printing it directly
because the default print a line in the

00:23:25.419 --> 00:23:25.429
because the default print a line in the
 

00:23:25.429 --> 00:23:27.279
because the default print a line in the
run time does not know about unsigned

00:23:27.279 --> 00:23:27.289
run time does not know about unsigned
 

00:23:27.289 --> 00:23:29.110
run time does not know about unsigned
numbers we have to go through something

00:23:29.110 --> 00:23:29.120
numbers we have to go through something
 

00:23:29.120 --> 00:23:29.440
numbers we have to go through something
else

00:23:29.440 --> 00:23:29.450
else
 

00:23:29.450 --> 00:23:31.270
else
and because the unsigned numbers are

00:23:31.270 --> 00:23:31.280
and because the unsigned numbers are
 

00:23:31.280 --> 00:23:33.010
and because the unsigned numbers are
implemented using in line classes we

00:23:33.010 --> 00:23:33.020
implemented using in line classes we
 

00:23:33.020 --> 00:23:34.930
implemented using in line classes we
have to box so because call this

00:23:34.930 --> 00:23:34.940
have to box so because call this
 

00:23:34.940 --> 00:23:37.149
have to box so because call this
function called box - in pole it takes

00:23:37.149 --> 00:23:37.159
function called box - in pole it takes
 

00:23:37.159 --> 00:23:39.610
function called box - in pole it takes
our unsigned integers and wrap it into

00:23:39.610 --> 00:23:39.620
our unsigned integers and wrap it into
 

00:23:39.620 --> 00:23:41.620
our unsigned integers and wrap it into
an instance of a class called EWTN's and

00:23:41.620 --> 00:23:41.630
an instance of a class called EWTN's and
 

00:23:41.630 --> 00:23:44.080
an instance of a class called EWTN's and
that gets passed to println because you

00:23:44.080 --> 00:23:44.090
that gets passed to println because you
 

00:23:44.090 --> 00:23:45.789
that gets passed to println because you
int has a two string method that's

00:23:45.789 --> 00:23:45.799
int has a two string method that's
 

00:23:45.799 --> 00:23:47.470
int has a two string method that's
implementing and then there's the right

00:23:47.470 --> 00:23:47.480
implementing and then there's the right
 

00:23:47.480 --> 00:23:49.240
implementing and then there's the right
thing so even if you use unsigned

00:23:49.240 --> 00:23:49.250
thing so even if you use unsigned
 

00:23:49.250 --> 00:23:51.039
thing so even if you use unsigned
numbers and there are most of the time

00:23:51.039 --> 00:23:51.049
numbers and there are most of the time
 

00:23:51.049 --> 00:23:52.990
numbers and there are most of the time
free you can end up doing boxing and

00:23:52.990 --> 00:23:53.000
free you can end up doing boxing and
 

00:23:53.000 --> 00:23:55.149
free you can end up doing boxing and
therefore allocation fairly easily if

00:23:55.149 --> 00:23:55.159
therefore allocation fairly easily if
 

00:23:55.159 --> 00:23:56.770
therefore allocation fairly easily if
you just add them to a string for

00:23:56.770 --> 00:23:56.780
you just add them to a string for
 

00:23:56.780 --> 00:23:59.710
you just add them to a string for
instance talk about ranges one of the

00:23:59.710 --> 00:23:59.720
instance talk about ranges one of the
 

00:23:59.720 --> 00:24:02.049
instance talk about ranges one of the
curious things that a lot of programmers

00:24:02.049 --> 00:24:02.059
curious things that a lot of programmers
 

00:24:02.059 --> 00:24:03.789
curious things that a lot of programmers
hit when they see Colin for the first

00:24:03.789 --> 00:24:03.799
hit when they see Colin for the first
 

00:24:03.799 --> 00:24:05.890
hit when they see Colin for the first
time is - for loops they kind of look

00:24:05.890 --> 00:24:05.900
time is - for loops they kind of look
 

00:24:05.900 --> 00:24:07.390
time is - for loops they kind of look
for the syntax that they always knew

00:24:07.390 --> 00:24:07.400
for the syntax that they always knew
 

00:24:07.400 --> 00:24:10.240
for the syntax that they always knew
from Java or C or C++ or other languages

00:24:10.240 --> 00:24:10.250
from Java or C or C++ or other languages
 

00:24:10.250 --> 00:24:13.060
from Java or C or C++ or other languages
and it's not that instead all of the for

00:24:13.060 --> 00:24:13.070
and it's not that instead all of the for
 

00:24:13.070 --> 00:24:16.330
and it's not that instead all of the for
loops work with ranges and there are

00:24:16.330 --> 00:24:16.340
loops work with ranges and there are
 

00:24:16.340 --> 00:24:18.399
loops work with ranges and there are
many ways to do this so you could say

00:24:18.399 --> 00:24:18.409
many ways to do this so you could say
 

00:24:18.409 --> 00:24:21.610
many ways to do this so you could say
for I in this range of 0 to 10 inclusive

00:24:21.610 --> 00:24:21.620
for I in this range of 0 to 10 inclusive
 

00:24:21.620 --> 00:24:25.000
for I in this range of 0 to 10 inclusive
or exclusive until you get to 10 or you

00:24:25.000 --> 00:24:25.010
or exclusive until you get to 10 or you
 

00:24:25.010 --> 00:24:26.289
or exclusive until you get to 10 or you
could just say repeat the following

00:24:26.289 --> 00:24:26.299
could just say repeat the following
 

00:24:26.299 --> 00:24:28.659
could just say repeat the following
operation give it the lambda there or

00:24:28.659 --> 00:24:28.669
operation give it the lambda there or
 

00:24:28.669 --> 00:24:30.250
operation give it the lambda there or
you could put the range on the front

00:24:30.250 --> 00:24:30.260
you could put the range on the front
 

00:24:30.260 --> 00:24:32.919
you could put the range on the front
these all look the same to me modulo

00:24:32.919 --> 00:24:32.929
these all look the same to me modulo
 

00:24:32.929 --> 00:24:34.779
these all look the same to me modulo
that off by one error that we have in

00:24:34.779 --> 00:24:34.789
that off by one error that we have in
 

00:24:34.789 --> 00:24:38.020
that off by one error that we have in
the second one right so it turns out

00:24:38.020 --> 00:24:38.030
the second one right so it turns out
 

00:24:38.030 --> 00:24:39.610
the second one right so it turns out
they're kind of different under the hood

00:24:39.610 --> 00:24:39.620
they're kind of different under the hood
 

00:24:39.620 --> 00:24:41.260
they're kind of different under the hood
so that first one works the way that we

00:24:41.260 --> 00:24:41.270
so that first one works the way that we
 

00:24:41.270 --> 00:24:43.060
so that first one works the way that we
would think it's basically equivalent of

00:24:43.060 --> 00:24:43.070
would think it's basically equivalent of
 

00:24:43.070 --> 00:24:46.180
would think it's basically equivalent of
the for loop we would expect in Java

00:24:46.180 --> 00:24:46.190
the for loop we would expect in Java
 

00:24:46.190 --> 00:24:48.130
the for loop we would expect in Java
second ones same thing except we're not

00:24:48.130 --> 00:24:48.140
second ones same thing except we're not
 

00:24:48.140 --> 00:24:49.539
second ones same thing except we're not
going all the way to the last value

00:24:49.539 --> 00:24:49.549
going all the way to the last value
 

00:24:49.549 --> 00:24:50.220
going all the way to the last value
there

00:24:50.220 --> 00:24:50.230
there
 

00:24:50.230 --> 00:24:51.600
there
same thing for the third like all

00:24:51.600 --> 00:24:51.610
same thing for the third like all
 

00:24:51.610 --> 00:24:53.789
same thing for the third like all
straightforward iterations but the way

00:24:53.789 --> 00:24:53.799
straightforward iterations but the way
 

00:24:53.799 --> 00:24:56.640
straightforward iterations but the way
the last one is implemented is a little

00:24:56.640 --> 00:24:56.650
the last one is implemented is a little
 

00:24:56.650 --> 00:24:58.320
the last one is implemented is a little
different instead we're gonna create an

00:24:58.320 --> 00:24:58.330
different instead we're gonna create an
 

00:24:58.330 --> 00:25:00.180
different instead we're gonna create an
iterable object we're gonna create an in

00:25:00.180 --> 00:25:00.190
iterable object we're gonna create an in
 

00:25:00.190 --> 00:25:01.770
iterable object we're gonna create an in
range object and then we're gonna use

00:25:01.770 --> 00:25:01.780
range object and then we're gonna use
 

00:25:01.780 --> 00:25:04.260
range object and then we're gonna use
the iteration mechanism which seems a

00:25:04.260 --> 00:25:04.270
the iteration mechanism which seems a
 

00:25:04.270 --> 00:25:05.940
the iteration mechanism which seems a
little bit heavyweight for just having

00:25:05.940 --> 00:25:05.950
little bit heavyweight for just having
 

00:25:05.950 --> 00:25:08.789
little bit heavyweight for just having
flips the range to the front they're not

00:25:08.789 --> 00:25:08.799
flips the range to the front they're not
 

00:25:08.799 --> 00:25:10.620
flips the range to the front they're not
a big deal but kind of curious that

00:25:10.620 --> 00:25:10.630
a big deal but kind of curious that
 

00:25:10.630 --> 00:25:12.390
a big deal but kind of curious that
they're all quite different under the

00:25:12.390 --> 00:25:12.400
they're all quite different under the
 

00:25:12.400 --> 00:25:17.640
they're all quite different under the
hood yes so in the traditional for loop

00:25:17.640 --> 00:25:17.650
hood yes so in the traditional for loop
 

00:25:17.650 --> 00:25:19.110
hood yes so in the traditional for loop
with other languages you can easily

00:25:19.110 --> 00:25:19.120
with other languages you can easily
 

00:25:19.120 --> 00:25:21.299
with other languages you can easily
increment the counter by more than one

00:25:21.299 --> 00:25:21.309
increment the counter by more than one
 

00:25:21.309 --> 00:25:22.799
increment the counter by more than one
so doing plus plus you can say plus

00:25:22.799 --> 00:25:22.809
so doing plus plus you can say plus
 

00:25:22.809 --> 00:25:24.480
so doing plus plus you can say plus
equal to and the way you do this in

00:25:24.480 --> 00:25:24.490
equal to and the way you do this in
 

00:25:24.490 --> 00:25:27.480
equal to and the way you do this in
cutting is you can use the step operator

00:25:27.480 --> 00:25:27.490
cutting is you can use the step operator
 

00:25:27.490 --> 00:25:29.610
cutting is you can use the step operator
or in fixed function so in that case

00:25:29.610 --> 00:25:29.620
or in fixed function so in that case
 

00:25:29.620 --> 00:25:31.890
or in fixed function so in that case
we're going to go from 0 to 10 inclusive

00:25:31.890 --> 00:25:31.900
we're going to go from 0 to 10 inclusive
 

00:25:31.900 --> 00:25:33.960
we're going to go from 0 to 10 inclusive
and we inclusive and we want it to

00:25:33.960 --> 00:25:33.970
and we inclusive and we want it to
 

00:25:33.970 --> 00:25:36.090
and we inclusive and we want it to
increment by 2 it says step through and

00:25:36.090 --> 00:25:36.100
increment by 2 it says step through and
 

00:25:36.100 --> 00:25:38.310
increment by 2 it says step through and
I would expect the code to look exactly

00:25:38.310 --> 00:25:38.320
I would expect the code to look exactly
 

00:25:38.320 --> 00:25:40.169
I would expect the code to look exactly
the same as before but we get this

00:25:40.169 --> 00:25:40.179
the same as before but we get this
 

00:25:40.179 --> 00:25:43.590
the same as before but we get this
instead so just by adding step an

00:25:43.590 --> 00:25:43.600
instead so just by adding step an
 

00:25:43.600 --> 00:25:45.090
instead so just by adding step an
optimization the compiler basically

00:25:45.090 --> 00:25:45.100
optimization the compiler basically
 

00:25:45.100 --> 00:25:47.250
optimization the compiler basically
disappears and said we have to create a

00:25:47.250 --> 00:25:47.260
disappears and said we have to create a
 

00:25:47.260 --> 00:25:48.990
disappears and said we have to create a
range we have to create this in

00:25:48.990 --> 00:25:49.000
range we have to create this in
 

00:25:49.000 --> 00:25:50.850
range we have to create this in
progression and then the compiler calls

00:25:50.850 --> 00:25:50.860
progression and then the compiler calls
 

00:25:50.860 --> 00:25:53.130
progression and then the compiler calls
get first get less and get step which

00:25:53.130 --> 00:25:53.140
get first get less and get step which
 

00:25:53.140 --> 00:25:55.049
get first get less and get step which
are in dispatcher paste constant so it's

00:25:55.049 --> 00:25:55.059
are in dispatcher paste constant so it's
 

00:25:55.059 --> 00:25:57.090
are in dispatcher paste constant so it's
not entirely necessary and then we have

00:25:57.090 --> 00:25:57.100
not entirely necessary and then we have
 

00:25:57.100 --> 00:25:58.770
not entirely necessary and then we have
a while loop that makes sure that we

00:25:58.770 --> 00:25:58.780
a while loop that makes sure that we
 

00:25:58.780 --> 00:26:00.539
a while loop that makes sure that we
iterate the right number of times and it

00:26:00.539 --> 00:26:00.549
iterate the right number of times and it
 

00:26:00.549 --> 00:26:02.730
iterate the right number of times and it
also happens if you said step 1

00:26:02.730 --> 00:26:02.740
also happens if you said step 1
 

00:26:02.740 --> 00:26:04.440
also happens if you said step 1
which makes no sense to me without

00:26:04.440 --> 00:26:04.450
which makes no sense to me without
 

00:26:04.450 --> 00:26:05.970
which makes no sense to me without
zooming so missing optimization in the

00:26:05.970 --> 00:26:05.980
zooming so missing optimization in the
 

00:26:05.980 --> 00:26:08.460
zooming so missing optimization in the
compiler that first step is a doozy

00:26:08.460 --> 00:26:08.470
compiler that first step is a doozy
 

00:26:08.470 --> 00:26:10.799
compiler that first step is a doozy
right so in nine classes I touched on

00:26:10.799 --> 00:26:10.809
right so in nine classes I touched on
 

00:26:10.809 --> 00:26:12.390
right so in nine classes I touched on
those a little bit when I talked about

00:26:12.390 --> 00:26:12.400
those a little bit when I talked about
 

00:26:12.400 --> 00:26:14.400
those a little bit when I talked about
unsigned numbers so in line classes are

00:26:14.400 --> 00:26:14.410
unsigned numbers so in line classes are
 

00:26:14.410 --> 00:26:16.799
unsigned numbers so in line classes are
where to wrap a type one field

00:26:16.799 --> 00:26:16.809
where to wrap a type one field
 

00:26:16.809 --> 00:26:19.110
where to wrap a type one field
effectively and the point of needing

00:26:19.110 --> 00:26:19.120
effectively and the point of needing
 

00:26:19.120 --> 00:26:20.909
effectively and the point of needing
classes as the name suggests is that the

00:26:20.909 --> 00:26:20.919
classes as the name suggests is that the
 

00:26:20.919 --> 00:26:22.530
classes as the name suggests is that the
disappear at compile time we saw that

00:26:22.530 --> 00:26:22.540
disappear at compile time we saw that
 

00:26:22.540 --> 00:26:24.390
disappear at compile time we saw that
with unsigned numbers there are class

00:26:24.390 --> 00:26:24.400
with unsigned numbers there are class
 

00:26:24.400 --> 00:26:26.039
with unsigned numbers there are class
called EWTN's but really when you look

00:26:26.039 --> 00:26:26.049
called EWTN's but really when you look
 

00:26:26.049 --> 00:26:27.480
called EWTN's but really when you look
at the bytecode all you see in the end

00:26:27.480 --> 00:26:27.490
at the bytecode all you see in the end
 

00:26:27.490 --> 00:26:29.580
at the bytecode all you see in the end
is just an integer so here I created my

00:26:29.580 --> 00:26:29.590
is just an integer so here I created my
 

00:26:29.590 --> 00:26:32.130
is just an integer so here I created my
own in nine class called color and it

00:26:32.130 --> 00:26:32.140
own in nine class called color and it
 

00:26:32.140 --> 00:26:33.690
own in nine class called color and it
could it writes it perhaps an integer

00:26:33.690 --> 00:26:33.700
could it writes it perhaps an integer
 

00:26:33.700 --> 00:26:35.430
could it writes it perhaps an integer
because colors are often defined as an

00:26:35.430 --> 00:26:35.440
because colors are often defined as an
 

00:26:35.440 --> 00:26:37.230
because colors are often defined as an
integer on Android and I've created

00:26:37.230 --> 00:26:37.240
integer on Android and I've created
 

00:26:37.240 --> 00:26:39.810
integer on Android and I've created
custom properties to be able to extract

00:26:39.810 --> 00:26:39.820
custom properties to be able to extract
 

00:26:39.820 --> 00:26:41.340
custom properties to be able to extract
the right green blue and alpha channels

00:26:41.340 --> 00:26:41.350
the right green blue and alpha channels
 

00:26:41.350 --> 00:26:43.650
the right green blue and alpha channels
from the int without having to do that

00:26:43.650 --> 00:26:43.660
from the int without having to do that
 

00:26:43.660 --> 00:26:47.070
from the int without having to do that
that dense myself every time so now if

00:26:47.070 --> 00:26:47.080
that dense myself every time so now if
 

00:26:47.080 --> 00:26:49.140
that dense myself every time so now if
you try to use that that inline class

00:26:49.140 --> 00:26:49.150
you try to use that that inline class
 

00:26:49.150 --> 00:26:50.610
you try to use that that inline class
ourselves I created a print function

00:26:50.610 --> 00:26:50.620
ourselves I created a print function
 

00:26:50.620 --> 00:26:52.740
ourselves I created a print function
that just you know formats a string

00:26:52.740 --> 00:26:52.750
that just you know formats a string
 

00:26:52.750 --> 00:26:54.390
that just you know formats a string
using the different channels of the

00:26:54.390 --> 00:26:54.400
using the different channels of the
 

00:26:54.400 --> 00:26:56.640
using the different channels of the
color create an instance at the bottom

00:26:56.640 --> 00:26:56.650
color create an instance at the bottom
 

00:26:56.650 --> 00:26:58.409
color create an instance at the bottom
in my main function I call the print the

00:26:58.409 --> 00:26:58.419
in my main function I call the print the
 

00:26:58.419 --> 00:27:00.899
in my main function I call the print the
print collection I just declare and

00:27:00.899 --> 00:27:00.909
print collection I just declare and
 

00:27:00.909 --> 00:27:02.339
print collection I just declare and
the bytecode looks like in the main

00:27:02.339 --> 00:27:02.349
the bytecode looks like in the main
 

00:27:02.349 --> 00:27:04.320
the bytecode looks like in the main
function so first we push a consent on

00:27:04.320 --> 00:27:04.330
function so first we push a consent on
 

00:27:04.330 --> 00:27:07.080
function so first we push a consent on
the stack is that weird long number that

00:27:07.080 --> 00:27:07.090
the stack is that weird long number that
 

00:27:07.090 --> 00:27:08.759
the stack is that weird long number that
comes corresponds to the hexadecimal

00:27:08.759 --> 00:27:08.769
comes corresponds to the hexadecimal
 

00:27:08.769 --> 00:27:10.799
comes corresponds to the hexadecimal
value that you saw in the code and then

00:27:10.799 --> 00:27:10.809
value that you saw in the code and then
 

00:27:10.809 --> 00:27:12.810
value that you saw in the code and then
we invoke that color that constructor -

00:27:12.810 --> 00:27:12.820
we invoke that color that constructor -
 

00:27:12.820 --> 00:27:14.430
we invoke that color that constructor -
import function and you can see it's

00:27:14.430 --> 00:27:14.440
import function and you can see it's
 

00:27:14.440 --> 00:27:16.139
import function and you can see it's
signature it takes an int which is

00:27:16.139 --> 00:27:16.149
signature it takes an int which is
 

00:27:16.149 --> 00:27:18.210
signature it takes an int which is
expected because we wrap an integer and

00:27:18.210 --> 00:27:18.220
expected because we wrap an integer and
 

00:27:18.220 --> 00:27:20.430
expected because we wrap an integer and
it returns an integer so it's exactly

00:27:20.430 --> 00:27:20.440
it returns an integer so it's exactly
 

00:27:20.440 --> 00:27:22.619
it returns an integer so it's exactly
what was happening with unsigned before

00:27:22.619 --> 00:27:22.629
what was happening with unsigned before
 

00:27:22.629 --> 00:27:24.299
what was happening with unsigned before
we saw that this constructor actually

00:27:24.299 --> 00:27:24.309
we saw that this constructor actually
 

00:27:24.309 --> 00:27:26.190
we saw that this constructor actually
doesn't do anything just text the input

00:27:26.190 --> 00:27:26.200
doesn't do anything just text the input
 

00:27:26.200 --> 00:27:27.779
doesn't do anything just text the input
and returns it directly so there's

00:27:27.779 --> 00:27:27.789
and returns it directly so there's
 

00:27:27.789 --> 00:27:29.460
and returns it directly so there's
nothing to see here what's interesting

00:27:29.460 --> 00:27:29.470
nothing to see here what's interesting
 

00:27:29.470 --> 00:27:30.869
nothing to see here what's interesting
is what happened to my print color

00:27:30.869 --> 00:27:30.879
is what happened to my print color
 

00:27:30.879 --> 00:27:33.089
is what happened to my print color
function so in my source code it takes

00:27:33.089 --> 00:27:33.099
function so in my source code it takes
 

00:27:33.099 --> 00:27:35.129
function so in my source code it takes
the color instance but you can see here

00:27:35.129 --> 00:27:35.139
the color instance but you can see here
 

00:27:35.139 --> 00:27:37.259
the color instance but you can see here
now it's called print color - some weird

00:27:37.259 --> 00:27:37.269
now it's called print color - some weird
 

00:27:37.269 --> 00:27:38.849
now it's called print color - some weird
name it's a it's probably a hash of

00:27:38.849 --> 00:27:38.859
name it's a it's probably a hash of
 

00:27:38.859 --> 00:27:40.769
name it's a it's probably a hash of
something instead of taking an instance

00:27:40.769 --> 00:27:40.779
something instead of taking an instance
 

00:27:40.779 --> 00:27:43.349
something instead of taking an instance
of color it takes an integer directly so

00:27:43.349 --> 00:27:43.359
of color it takes an integer directly so
 

00:27:43.359 --> 00:27:45.210
of color it takes an integer directly so
the compiler rewrote the function to

00:27:45.210 --> 00:27:45.220
the compiler rewrote the function to
 

00:27:45.220 --> 00:27:47.039
the compiler rewrote the function to
work to work dark beyond the primitive

00:27:47.039 --> 00:27:47.049
work to work dark beyond the primitive
 

00:27:47.049 --> 00:27:49.979
work to work dark beyond the primitive
type type I was rapping that said

00:27:49.979 --> 00:27:49.989
type type I was rapping that said
 

00:27:49.989 --> 00:27:52.169
type type I was rapping that said
sometimes in our classes are not free we

00:27:52.169 --> 00:27:52.179
sometimes in our classes are not free we
 

00:27:52.179 --> 00:27:54.299
sometimes in our classes are not free we
saw that with two string earlier and the

00:27:54.299 --> 00:27:54.309
saw that with two string earlier and the
 

00:27:54.309 --> 00:27:56.009
saw that with two string earlier and the
same thing can happen with the equal

00:27:56.009 --> 00:27:56.019
same thing can happen with the equal
 

00:27:56.019 --> 00:27:58.169
same thing can happen with the equal
equal operator so here are create two

00:27:58.169 --> 00:27:58.179
equal operator so here are create two
 

00:27:58.179 --> 00:28:00.989
equal operator so here are create two
instances of my color class and I just

00:28:00.989 --> 00:28:00.999
instances of my color class and I just
 

00:28:00.999 --> 00:28:02.489
instances of my color class and I just
called you know I want to print whether

00:28:02.489 --> 00:28:02.499
called you know I want to print whether
 

00:28:02.499 --> 00:28:04.440
called you know I want to print whether
or not they are equal and I do it in two

00:28:04.440 --> 00:28:04.450
or not they are equal and I do it in two
 

00:28:04.450 --> 00:28:06.149
or not they are equal and I do it in two
different ways first we use equal equal

00:28:06.149 --> 00:28:06.159
different ways first we use equal equal
 

00:28:06.159 --> 00:28:08.219
different ways first we use equal equal
and then we do dot equals and those

00:28:08.219 --> 00:28:08.229
and then we do dot equals and those
 

00:28:08.229 --> 00:28:10.589
and then we do dot equals and those
should be equivalent there should be the

00:28:10.589 --> 00:28:10.599
should be equivalent there should be the
 

00:28:10.599 --> 00:28:12.839
should be equivalent there should be the
same thing however when we look at the

00:28:12.839 --> 00:28:12.849
same thing however when we look at the
 

00:28:12.849 --> 00:28:14.729
same thing however when we look at the
bytecode here's what happens so when I

00:28:14.729 --> 00:28:14.739
bytecode here's what happens so when I
 

00:28:14.739 --> 00:28:17.639
bytecode here's what happens so when I
do a equal equals B first we load one of

00:28:17.639 --> 00:28:17.649
do a equal equals B first we load one of
 

00:28:17.649 --> 00:28:18.239
do a equal equals B first we load one of
the variables

00:28:18.239 --> 00:28:18.249
the variables
 

00:28:18.249 --> 00:28:21.749
the variables
I think it's B then we call boxed at -

00:28:21.749 --> 00:28:21.759
I think it's B then we call boxed at -
 

00:28:21.759 --> 00:28:23.369
I think it's B then we call boxed at -
in pole and you can see that we are

00:28:23.369 --> 00:28:23.379
in pole and you can see that we are
 

00:28:23.379 --> 00:28:26.369
in pole and you can see that we are
generating a color instance from that

00:28:26.369 --> 00:28:26.379
generating a color instance from that
 

00:28:26.379 --> 00:28:28.889
generating a color instance from that
integer then we do the same thing again

00:28:28.889 --> 00:28:28.899
integer then we do the same thing again
 

00:28:28.899 --> 00:28:31.139
integer then we do the same thing again
for the a variable and then finally we

00:28:31.139 --> 00:28:31.149
for the a variable and then finally we
 

00:28:31.149 --> 00:28:32.999
for the a variable and then finally we
invoke a static function called are

00:28:32.999 --> 00:28:33.009
invoke a static function called are
 

00:28:33.009 --> 00:28:35.639
invoke a static function called are
equal that's part of that that's an

00:28:35.639 --> 00:28:35.649
equal that's part of that that's an
 

00:28:35.649 --> 00:28:37.619
equal that's part of that that's an
intrinsic in the cut in standard library

00:28:37.619 --> 00:28:37.629
intrinsic in the cut in standard library
 

00:28:37.629 --> 00:28:39.539
intrinsic in the cut in standard library
so just to be able to compare our two

00:28:39.539 --> 00:28:39.549
so just to be able to compare our two
 

00:28:39.549 --> 00:28:41.639
so just to be able to compare our two
integers that we know are there because

00:28:41.639 --> 00:28:41.649
integers that we know are there because
 

00:28:41.649 --> 00:28:42.989
integers that we know are there because
we saw that the compiler sometimes it's

00:28:42.989 --> 00:28:42.999
we saw that the compiler sometimes it's
 

00:28:42.999 --> 00:28:44.729
we saw that the compiler sometimes it's
smart enough to get rid of the class we

00:28:44.729 --> 00:28:44.739
smart enough to get rid of the class we
 

00:28:44.739 --> 00:28:46.979
smart enough to get rid of the class we
just boxed it back into actual objects

00:28:46.979 --> 00:28:46.989
just boxed it back into actual objects
 

00:28:46.989 --> 00:28:48.810
just boxed it back into actual objects
we created two allocations just to be

00:28:48.810 --> 00:28:48.820
we created two allocations just to be
 

00:28:48.820 --> 00:28:51.109
we created two allocations just to be
able to compare those two integer values

00:28:51.109 --> 00:28:51.119
able to compare those two integer values
 

00:28:51.119 --> 00:28:54.690
able to compare those two integer values
if you call a dot equals B things are a

00:28:54.690 --> 00:28:54.700
if you call a dot equals B things are a
 

00:28:54.700 --> 00:28:55.469
if you call a dot equals B things are a
little different

00:28:55.469 --> 00:28:55.479
little different
 

00:28:55.479 --> 00:28:58.200
little different
we load one of the variables and we

00:28:58.200 --> 00:28:58.210
we load one of the variables and we
 

00:28:58.210 --> 00:29:00.570
we load one of the variables and we
bucks the other one so instead of in two

00:29:00.570 --> 00:29:00.580
bucks the other one so instead of in two
 

00:29:00.580 --> 00:29:02.279
bucks the other one so instead of in two
locations we have only one allocation

00:29:02.279 --> 00:29:02.289
locations we have only one allocation
 

00:29:02.289 --> 00:29:04.320
locations we have only one allocation
and instead here we're calling a method

00:29:04.320 --> 00:29:04.330
and instead here we're calling a method
 

00:29:04.330 --> 00:29:06.749
and instead here we're calling a method
called equals - in pull on the color

00:29:06.749 --> 00:29:06.759
called equals - in pull on the color
 

00:29:06.759 --> 00:29:08.669
called equals - in pull on the color
class and you can see takes an integer

00:29:08.669 --> 00:29:08.679
class and you can see takes an integer
 

00:29:08.679 --> 00:29:11.369
class and you can see takes an integer
and an object so if you're gonna use the

00:29:11.369 --> 00:29:11.379
and an object so if you're gonna use the
 

00:29:11.379 --> 00:29:13.379
and an object so if you're gonna use the
nine classes and you don't care about in

00:29:13.379 --> 00:29:13.389
nine classes and you don't care about in
 

00:29:13.389 --> 00:29:13.900
nine classes and you don't care about in
a liability

00:29:13.900 --> 00:29:13.910
a liability
 

00:29:13.910 --> 00:29:16.090
a liability
in the doctor in Central Connecticut

00:29:16.090 --> 00:29:16.100
in the doctor in Central Connecticut
 

00:29:16.100 --> 00:29:18.310
in the doctor in Central Connecticut
half as many objects if you say a dot

00:29:18.310 --> 00:29:18.320
half as many objects if you say a dot
 

00:29:18.320 --> 00:29:20.790
half as many objects if you say a dot
equals B instead of a equals equals me

00:29:20.790 --> 00:29:20.800
equals B instead of a equals equals me
 

00:29:20.800 --> 00:29:24.010
equals B instead of a equals equals me
take a quick look at arrays the

00:29:24.010 --> 00:29:24.020
take a quick look at arrays the
 

00:29:24.020 --> 00:29:27.600
take a quick look at arrays the
implementation depends very much on

00:29:27.600 --> 00:29:27.610
implementation depends very much on
 

00:29:27.610 --> 00:29:29.740
implementation depends very much on
little subtle differences in how you

00:29:29.740 --> 00:29:29.750
little subtle differences in how you
 

00:29:29.750 --> 00:29:31.840
little subtle differences in how you
declare things so here we're gonna call

00:29:31.840 --> 00:29:31.850
declare things so here we're gonna call
 

00:29:31.850 --> 00:29:34.090
declare things so here we're gonna call
int array of and we pass in these things

00:29:34.090 --> 00:29:34.100
int array of and we pass in these things
 

00:29:34.100 --> 00:29:36.280
int array of and we pass in these things
and it's gonna say yep here's a

00:29:36.280 --> 00:29:36.290
and it's gonna say yep here's a
 

00:29:36.290 --> 00:29:37.810
and it's gonna say yep here's a
primitive array that contains those

00:29:37.810 --> 00:29:37.820
primitive array that contains those
 

00:29:37.820 --> 00:29:40.690
primitive array that contains those
things or we could say array of and

00:29:40.690 --> 00:29:40.700
things or we could say array of and
 

00:29:40.700 --> 00:29:41.890
things or we could say array of and
we're gonna pass these things and we

00:29:41.890 --> 00:29:41.900
we're gonna pass these things and we
 

00:29:41.900 --> 00:29:43.300
we're gonna pass these things and we
know that Kotlin is really good at type

00:29:43.300 --> 00:29:43.310
know that Kotlin is really good at type
 

00:29:43.310 --> 00:29:45.640
know that Kotlin is really good at type
inference and these are obviously int

00:29:45.640 --> 00:29:45.650
inference and these are obviously int
 

00:29:45.650 --> 00:29:47.560
inference and these are obviously int
and it says yep here's your integer

00:29:47.560 --> 00:29:47.570
and it says yep here's your integer
 

00:29:47.570 --> 00:29:50.830
and it says yep here's your integer
array or we could say give me an int

00:29:50.830 --> 00:29:50.840
array or we could say give me an int
 

00:29:50.840 --> 00:29:53.200
array or we could say give me an int
array and actually ask for this thing

00:29:53.200 --> 00:29:53.210
array and actually ask for this thing
 

00:29:53.210 --> 00:29:57.460
array and actually ask for this thing
specifically and then it does the right

00:29:57.460 --> 00:29:57.470
specifically and then it does the right
 

00:29:57.470 --> 00:29:58.900
specifically and then it does the right
thing with a little bit more code

00:29:58.900 --> 00:29:58.910
thing with a little bit more code
 

00:29:58.910 --> 00:30:00.580
thing with a little bit more code
we're basically initializing it inside

00:30:00.580 --> 00:30:00.590
we're basically initializing it inside
 

00:30:00.590 --> 00:30:02.800
we're basically initializing it inside
the lambda there and it creates the

00:30:02.800 --> 00:30:02.810
the lambda there and it creates the
 

00:30:02.810 --> 00:30:04.890
the lambda there and it creates the
primitive int array to whip through that

00:30:04.890 --> 00:30:04.900
primitive int array to whip through that
 

00:30:04.900 --> 00:30:08.260
primitive int array to whip through that
alright so we'd land us there's a one

00:30:08.260 --> 00:30:08.270
alright so we'd land us there's a one
 

00:30:08.270 --> 00:30:09.640
alright so we'd land us there's a one
party release case that can be

00:30:09.640 --> 00:30:09.650
party release case that can be
 

00:30:09.650 --> 00:30:11.620
party release case that can be
definitely of tricky and we just

00:30:11.620 --> 00:30:11.630
definitely of tricky and we just
 

00:30:11.630 --> 00:30:13.090
definitely of tricky and we just
recorded the podcast this morning with

00:30:13.090 --> 00:30:13.100
recorded the podcast this morning with
 

00:30:13.100 --> 00:30:15.940
recorded the podcast this morning with
the pocket casts folks and tour mention

00:30:15.940 --> 00:30:15.950
the pocket casts folks and tour mention
 

00:30:15.950 --> 00:30:17.290
the pocket casts folks and tour mention
that you just like that

00:30:17.290 --> 00:30:17.300
that you just like that
 

00:30:17.300 --> 00:30:19.270
that you just like that
yeah so what you're gonna see is a

00:30:19.270 --> 00:30:19.280
yeah so what you're gonna see is a
 

00:30:19.280 --> 00:30:21.070
yeah so what you're gonna see is a
possible programming mistake thankfully

00:30:21.070 --> 00:30:21.080
possible programming mistake thankfully
 

00:30:21.080 --> 00:30:22.840
possible programming mistake thankfully
we have a lint check in androids view

00:30:22.840 --> 00:30:22.850
we have a lint check in androids view
 

00:30:22.850 --> 00:30:25.120
we have a lint check in androids view
that wants you against it so here's a

00:30:25.120 --> 00:30:25.130
that wants you against it so here's a
 

00:30:25.130 --> 00:30:27.370
that wants you against it so here's a
for instance a class written in the Java

00:30:27.370 --> 00:30:27.380
for instance a class written in the Java
 

00:30:27.380 --> 00:30:29.500
for instance a class written in the Java
programming language it's a widget of

00:30:29.500 --> 00:30:29.510
programming language it's a widget of
 

00:30:29.510 --> 00:30:31.600
programming language it's a widget of
some kind and you can register listener

00:30:31.600 --> 00:30:31.610
some kind and you can register listener
 

00:30:31.610 --> 00:30:33.130
some kind and you can register listener
so we have this interface it has a

00:30:33.130 --> 00:30:33.140
so we have this interface it has a
 

00:30:33.140 --> 00:30:36.130
so we have this interface it has a
single abstract method - Sam you can add

00:30:36.130 --> 00:30:36.140
single abstract method - Sam you can add
 

00:30:36.140 --> 00:30:37.780
single abstract method - Sam you can add
a listener you can remove the listener

00:30:37.780 --> 00:30:37.790
a listener you can remove the listener
 

00:30:37.790 --> 00:30:40.270
a listener you can remove the listener
and you can ask how many listeners are

00:30:40.270 --> 00:30:40.280
and you can ask how many listeners are
 

00:30:40.280 --> 00:30:42.910
and you can ask how many listeners are
registered now let's try to use this fun

00:30:42.910 --> 00:30:42.920
registered now let's try to use this fun
 

00:30:42.920 --> 00:30:44.710
registered now let's try to use this fun
cutting so first of all we instantiate

00:30:44.710 --> 00:30:44.720
cutting so first of all we instantiate
 

00:30:44.720 --> 00:30:47.170
cutting so first of all we instantiate
our widgets then I create my listener as

00:30:47.170 --> 00:30:47.180
our widgets then I create my listener as
 

00:30:47.180 --> 00:30:49.750
our widgets then I create my listener as
well lambda and it follows the if we go

00:30:49.750 --> 00:30:49.760
well lambda and it follows the if we go
 

00:30:49.760 --> 00:30:52.450
well lambda and it follows the if we go
back our single abstract method taxi

00:30:52.450 --> 00:30:52.460
back our single abstract method taxi
 

00:30:52.460 --> 00:30:54.970
back our single abstract method taxi
widget instance as a parameter so we

00:30:54.970 --> 00:30:54.980
widget instance as a parameter so we
 

00:30:54.980 --> 00:30:56.530
widget instance as a parameter so we
create a lambda that matches this

00:30:56.530 --> 00:30:56.540
create a lambda that matches this
 

00:30:56.540 --> 00:30:59.110
create a lambda that matches this
signature text text widget and then we

00:30:59.110 --> 00:30:59.120
signature text text widget and then we
 

00:30:59.120 --> 00:31:01.330
signature text text widget and then we
do something with it we print it then I

00:31:01.330 --> 00:31:01.340
do something with it we print it then I
 

00:31:01.340 --> 00:31:03.280
do something with it we print it then I
call add listener on my widget and I

00:31:03.280 --> 00:31:03.290
call add listener on my widget and I
 

00:31:03.290 --> 00:31:05.920
call add listener on my widget and I
print the number of listeners that are

00:31:05.920 --> 00:31:05.930
print the number of listeners that are
 

00:31:05.930 --> 00:31:09.040
print the number of listeners that are
registered and finally I try to remove

00:31:09.040 --> 00:31:09.050
registered and finally I try to remove
 

00:31:09.050 --> 00:31:10.480
registered and finally I try to remove
that listener and a print the number of

00:31:10.480 --> 00:31:10.490
that listener and a print the number of
 

00:31:10.490 --> 00:31:12.580
that listener and a print the number of
listeners that are registered what's

00:31:12.580 --> 00:31:12.590
listeners that are registered what's
 

00:31:12.590 --> 00:31:16.360
listeners that are registered what's
gonna happen is sorry let me do yeah so

00:31:16.360 --> 00:31:16.370
gonna happen is sorry let me do yeah so
 

00:31:16.370 --> 00:31:17.590
gonna happen is sorry let me do yeah so
what's gonna happen is that when we

00:31:17.590 --> 00:31:17.600
what's gonna happen is that when we
 

00:31:17.600 --> 00:31:18.760
what's gonna happen is that when we
print the number of listeners after

00:31:18.760 --> 00:31:18.770
print the number of listeners after
 

00:31:18.770 --> 00:31:20.320
print the number of listeners after
adding it it's gonna set this one inner

00:31:20.320 --> 00:31:20.330
adding it it's gonna set this one inner
 

00:31:20.330 --> 00:31:21.790
adding it it's gonna set this one inner
that's completely expected but after

00:31:21.790 --> 00:31:21.800
that's completely expected but after
 

00:31:21.800 --> 00:31:23.620
that's completely expected but after
calling remove the number of listeners

00:31:23.620 --> 00:31:23.630
calling remove the number of listeners
 

00:31:23.630 --> 00:31:24.880
calling remove the number of listeners
is still 1

00:31:24.880 --> 00:31:24.890
is still 1
 

00:31:24.890 --> 00:31:27.070
is still 1
to remove did not work and to understand

00:31:27.070 --> 00:31:27.080
to remove did not work and to understand
 

00:31:27.080 --> 00:31:28.960
to remove did not work and to understand
why doesn't work we have to look at the

00:31:28.960 --> 00:31:28.970
why doesn't work we have to look at the
 

00:31:28.970 --> 00:31:30.790
why doesn't work we have to look at the
code that's generated by the compiler so

00:31:30.790 --> 00:31:30.800
code that's generated by the compiler so
 

00:31:30.800 --> 00:31:32.890
code that's generated by the compiler so
here's what it looks like we create our

00:31:32.890 --> 00:31:32.900
here's what it looks like we create our
 

00:31:32.900 --> 00:31:34.990
here's what it looks like we create our
listener because it's a lambda it

00:31:34.990 --> 00:31:35.000
listener because it's a lambda it
 

00:31:35.000 --> 00:31:37.390
listener because it's a lambda it
becomes a function one type internally

00:31:37.390 --> 00:31:37.400
becomes a function one type internally
 

00:31:37.400 --> 00:31:38.800
becomes a function one type internally
and a function one is effectively your

00:31:38.800 --> 00:31:38.810
and a function one is effectively your
 

00:31:38.810 --> 00:31:41.170
and a function one is effectively your
lambda that has one parameter but

00:31:41.170 --> 00:31:41.180
lambda that has one parameter but
 

00:31:41.180 --> 00:31:42.850
lambda that has one parameter but
because that that type is function one

00:31:42.850 --> 00:31:42.860
because that that type is function one
 

00:31:42.860 --> 00:31:44.770
because that that type is function one
it is not the listener type data which

00:31:44.770 --> 00:31:44.780
it is not the listener type data which
 

00:31:44.780 --> 00:31:46.840
it is not the listener type data which
it expects so the compiler generates

00:31:46.840 --> 00:31:46.850
it expects so the compiler generates
 

00:31:46.850 --> 00:31:48.460
it expects so the compiler generates
this extra class called widget

00:31:48.460 --> 00:31:48.470
this extra class called widget
 

00:31:48.470 --> 00:31:50.710
this extra class called widget
underscore listener that is of the type

00:31:50.710 --> 00:31:50.720
underscore listener that is of the type
 

00:31:50.720 --> 00:31:53.650
underscore listener that is of the type
listener that we expect and it passes it

00:31:53.650 --> 00:31:53.660
listener that we expect and it passes it
 

00:31:53.660 --> 00:31:56.290
listener that we expect and it passes it
our function one our lambda so it wraps

00:31:56.290 --> 00:31:56.300
our function one our lambda so it wraps
 

00:31:56.300 --> 00:31:58.810
our function one our lambda so it wraps
it into something else and it's that

00:31:58.810 --> 00:31:58.820
it into something else and it's that
 

00:31:58.820 --> 00:32:01.000
it into something else and it's that
other object that gets passed to add

00:32:01.000 --> 00:32:01.010
other object that gets passed to add
 

00:32:01.010 --> 00:32:02.710
other object that gets passed to add
listener and you can probably guess

00:32:02.710 --> 00:32:02.720
listener and you can probably guess
 

00:32:02.720 --> 00:32:04.540
listener and you can probably guess
what's coming up next when we could

00:32:04.540 --> 00:32:04.550
what's coming up next when we could
 

00:32:04.550 --> 00:32:07.000
what's coming up next when we could
remove listener with our lambda it gets

00:32:07.000 --> 00:32:07.010
remove listener with our lambda it gets
 

00:32:07.010 --> 00:32:09.100
remove listener with our lambda it gets
wrapped again it's a different instance

00:32:09.100 --> 00:32:09.110
wrapped again it's a different instance
 

00:32:09.110 --> 00:32:10.630
wrapped again it's a different instance
so we're trying to remove a different

00:32:10.630 --> 00:32:10.640
so we're trying to remove a different
 

00:32:10.640 --> 00:32:12.730
so we're trying to remove a different
listener and so we actually leaked our

00:32:12.730 --> 00:32:12.740
listener and so we actually leaked our
 

00:32:12.740 --> 00:32:14.350
listener and so we actually leaked our
listener and this is the kind of stuff

00:32:14.350 --> 00:32:14.360
listener and this is the kind of stuff
 

00:32:14.360 --> 00:32:17.020
listener and this is the kind of stuff
that Android Co will warn you against

00:32:17.020 --> 00:32:17.030
that Android Co will warn you against
 

00:32:17.030 --> 00:32:19.360
that Android Co will warn you against
and the fix is fairly easy you just have

00:32:19.360 --> 00:32:19.370
and the fix is fairly easy you just have
 

00:32:19.370 --> 00:32:21.640
and the fix is fairly easy you just have
to be specific about the type of your

00:32:21.640 --> 00:32:21.650
to be specific about the type of your
 

00:32:21.650 --> 00:32:23.440
to be specific about the type of your
lambda just say it is a widget that

00:32:23.440 --> 00:32:23.450
lambda just say it is a widget that
 

00:32:23.450 --> 00:32:25.390
lambda just say it is a widget that
listener and don't just use the naked

00:32:25.390 --> 00:32:25.400
listener and don't just use the naked
 

00:32:25.400 --> 00:32:28.210
listener and don't just use the naked
lambda form so let's take a look at how

00:32:28.210 --> 00:32:28.220
lambda form so let's take a look at how
 

00:32:28.220 --> 00:32:30.640
lambda form so let's take a look at how
extension functions actually work under

00:32:30.640 --> 00:32:30.650
extension functions actually work under
 

00:32:30.650 --> 00:32:33.190
extension functions actually work under
the hood so you have this simple class

00:32:33.190 --> 00:32:33.200
the hood so you have this simple class
 

00:32:33.200 --> 00:32:34.930
the hood so you have this simple class
that I've defined again I wrote this

00:32:34.930 --> 00:32:34.940
that I've defined again I wrote this
 

00:32:34.940 --> 00:32:37.360
that I've defined again I wrote this
code all by myself we have a superclass

00:32:37.360 --> 00:32:37.370
code all by myself we have a superclass
 

00:32:37.370 --> 00:32:38.920
code all by myself we have a superclass
and then we have a subclass which

00:32:38.920 --> 00:32:38.930
and then we have a subclass which
 

00:32:38.930 --> 00:32:41.950
and then we have a subclass which
extends that superclass awesome then we

00:32:41.950 --> 00:32:41.960
extends that superclass awesome then we
 

00:32:41.960 --> 00:32:43.750
extends that superclass awesome then we
have a couple of extension methods that

00:32:43.750 --> 00:32:43.760
have a couple of extension methods that
 

00:32:43.760 --> 00:32:45.400
have a couple of extension methods that
we've defined one on the superclass one

00:32:45.400 --> 00:32:45.410
we've defined one on the superclass one
 

00:32:45.410 --> 00:32:47.290
we've defined one on the superclass one
of the subclass and they print out this

00:32:47.290 --> 00:32:47.300
of the subclass and they print out this
 

00:32:47.300 --> 00:32:48.970
of the subclass and they print out this
value or they return the string value

00:32:48.970 --> 00:32:48.980
value or they return the string value
 

00:32:48.980 --> 00:32:51.640
value or they return the string value
that indicates which one was actually

00:32:51.640 --> 00:32:51.650
that indicates which one was actually
 

00:32:51.650 --> 00:32:53.950
that indicates which one was actually
called so the super instance we say yep

00:32:53.950 --> 00:32:53.960
called so the super instance we say yep
 

00:32:53.960 --> 00:32:55.630
called so the super instance we say yep
give me one of those super class objects

00:32:55.630 --> 00:32:55.640
give me one of those super class objects
 

00:32:55.640 --> 00:32:57.400
give me one of those super class objects
subclass give me one of those subclass

00:32:57.400 --> 00:32:57.410
subclass give me one of those subclass
 

00:32:57.410 --> 00:33:00.370
subclass give me one of those subclass
objects and then we have one where it is

00:33:00.370 --> 00:33:00.380
objects and then we have one where it is
 

00:33:00.380 --> 00:33:02.800
objects and then we have one where it is
a subclass but we cast it to a

00:33:02.800 --> 00:33:02.810
a subclass but we cast it to a
 

00:33:02.810 --> 00:33:05.710
a subclass but we cast it to a
superclass and then the question is what

00:33:05.710 --> 00:33:05.720
superclass and then the question is what
 

00:33:05.720 --> 00:33:07.690
superclass and then the question is what
happens when we call get identifier on

00:33:07.690 --> 00:33:07.700
happens when we call get identifier on
 

00:33:07.700 --> 00:33:09.940
happens when we call get identifier on
each of these things and then we have

00:33:09.940 --> 00:33:09.950
each of these things and then we have
 

00:33:09.950 --> 00:33:11.290
each of these things and then we have
one more example where instead of

00:33:11.290 --> 00:33:11.300
one more example where instead of
 

00:33:11.300 --> 00:33:13.090
one more example where instead of
precasting it we're casting it at run

00:33:13.090 --> 00:33:13.100
precasting it we're casting it at run
 

00:33:13.100 --> 00:33:15.220
precasting it we're casting it at run
time to a superclass so the question is

00:33:15.220 --> 00:33:15.230
time to a superclass so the question is
 

00:33:15.230 --> 00:33:17.710
time to a superclass so the question is
when we call the get identifier on the

00:33:17.710 --> 00:33:17.720
when we call the get identifier on the
 

00:33:17.720 --> 00:33:22.550
when we call the get identifier on the
super Val we get anybody awake

00:33:22.550 --> 00:33:22.560
super Val we get anybody awake
 

00:33:22.560 --> 00:33:25.250
super Val we get anybody awake
there we go what a super answer all

00:33:25.250 --> 00:33:25.260
there we go what a super answer all
 

00:33:25.260 --> 00:33:28.580
there we go what a super answer all
right how about the next one all right

00:33:28.580 --> 00:33:28.590
right how about the next one all right
 

00:33:28.590 --> 00:33:33.680
right how about the next one all right
thank you and number three wrong sorry

00:33:33.680 --> 00:33:33.690
thank you and number three wrong sorry
 

00:33:33.690 --> 00:33:35.780
thank you and number three wrong sorry
super so this is the one that's a little

00:33:35.780 --> 00:33:35.790
super so this is the one that's a little
 

00:33:35.790 --> 00:33:37.730
super so this is the one that's a little
bit surprising and finally the last one

00:33:37.730 --> 00:33:37.740
bit surprising and finally the last one
 

00:33:37.740 --> 00:33:40.280
bit surprising and finally the last one
is the same so it is a subclass what is

00:33:40.280 --> 00:33:40.290
is the same so it is a subclass what is
 

00:33:40.290 --> 00:33:41.930
is the same so it is a subclass what is
actually going on like shouldn't it be

00:33:41.930 --> 00:33:41.940
actually going on like shouldn't it be
 

00:33:41.940 --> 00:33:44.960
actually going on like shouldn't it be
calling that method on the subclass it's

00:33:44.960 --> 00:33:44.970
calling that method on the subclass it's
 

00:33:44.970 --> 00:33:47.660
calling that method on the subclass it's
because of these the implementation of

00:33:47.660 --> 00:33:47.670
because of these the implementation of
 

00:33:47.670 --> 00:33:48.890
because of these the implementation of
these things so if we look at the

00:33:48.890 --> 00:33:48.900
these things so if we look at the
 

00:33:48.900 --> 00:33:50.990
these things so if we look at the
decompiled bytecode this is what we've

00:33:50.990 --> 00:33:51.000
decompiled bytecode this is what we've
 

00:33:51.000 --> 00:33:51.170
decompiled bytecode this is what we've
got

00:33:51.170 --> 00:33:51.180
got
 

00:33:51.180 --> 00:33:53.180
got
get identifier is now a static method

00:33:53.180 --> 00:33:53.190
get identifier is now a static method
 

00:33:53.190 --> 00:33:56.360
get identifier is now a static method
and it takes an instance of superclass

00:33:56.360 --> 00:33:56.370
and it takes an instance of superclass
 

00:33:56.370 --> 00:33:59.870
and it takes an instance of superclass
same thing for sub the get identifier on

00:33:59.870 --> 00:33:59.880
same thing for sub the get identifier on
 

00:33:59.880 --> 00:34:01.730
same thing for sub the get identifier on
the subclass object so that means that

00:34:01.730 --> 00:34:01.740
the subclass object so that means that
 

00:34:01.740 --> 00:34:04.340
the subclass object so that means that
when we call it with a superclass object

00:34:04.340 --> 00:34:04.350
when we call it with a superclass object
 

00:34:04.350 --> 00:34:06.830
when we call it with a superclass object
we end up in the one that takes a

00:34:06.830 --> 00:34:06.840
we end up in the one that takes a
 

00:34:06.840 --> 00:34:07.910
we end up in the one that takes a
superclass type

00:34:07.910 --> 00:34:07.920
superclass type
 

00:34:07.920 --> 00:34:10.640
superclass type
same thing for sub and same thing for

00:34:10.640 --> 00:34:10.650
same thing for sub and same thing for
 

00:34:10.650 --> 00:34:12.860
same thing for sub and same thing for
sub cast as super we have told the type

00:34:12.860 --> 00:34:12.870
sub cast as super we have told the type
 

00:34:12.870 --> 00:34:14.990
sub cast as super we have told the type
system this is a superclass no matter

00:34:14.990 --> 00:34:15.000
system this is a superclass no matter
 

00:34:15.000 --> 00:34:17.270
system this is a superclass no matter
how we actually created it so it's going

00:34:17.270 --> 00:34:17.280
how we actually created it so it's going
 

00:34:17.280 --> 00:34:19.100
how we actually created it so it's going
to call the get identifier that takes a

00:34:19.100 --> 00:34:19.110
to call the get identifier that takes a
 

00:34:19.110 --> 00:34:20.990
to call the get identifier that takes a
superclass instead and same thing for

00:34:20.990 --> 00:34:21.000
superclass instead and same thing for
 

00:34:21.000 --> 00:34:23.860
superclass instead and same thing for
the thing that's passed at runtime

00:34:23.860 --> 00:34:23.870
the thing that's passed at runtime
 

00:34:23.870 --> 00:34:26.360
the thing that's passed at runtime
default parameters it's a very handy

00:34:26.360 --> 00:34:26.370
default parameters it's a very handy
 

00:34:26.370 --> 00:34:28.100
default parameters it's a very handy
function in Kirkland you can specify a

00:34:28.100 --> 00:34:28.110
function in Kirkland you can specify a
 

00:34:28.110 --> 00:34:29.330
function in Kirkland you can specify a
default value for your parameters and

00:34:29.330 --> 00:34:29.340
default value for your parameters and
 

00:34:29.340 --> 00:34:31.040
default value for your parameters and
then you can use either name parameters

00:34:31.040 --> 00:34:31.050
then you can use either name parameters
 

00:34:31.050 --> 00:34:32.300
then you can use either name parameters
to invoke them or just omit the

00:34:32.300 --> 00:34:32.310
to invoke them or just omit the
 

00:34:32.310 --> 00:34:34.340
to invoke them or just omit the
parameters and rely on the compiler to

00:34:34.340 --> 00:34:34.350
parameters and rely on the compiler to
 

00:34:34.350 --> 00:34:36.200
parameters and rely on the compiler to
do the right thing so here I have a very

00:34:36.200 --> 00:34:36.210
do the right thing so here I have a very
 

00:34:36.210 --> 00:34:38.210
do the right thing so here I have a very
useful method it takes two floats and

00:34:38.210 --> 00:34:38.220
useful method it takes two floats and
 

00:34:38.220 --> 00:34:40.250
useful method it takes two floats and
you just adds them and returns the

00:34:40.250 --> 00:34:40.260
you just adds them and returns the
 

00:34:40.260 --> 00:34:44.659
you just adds them and returns the
results where did the rest of the

00:34:44.659 --> 00:34:44.669
results where did the rest of the
 

00:34:44.669 --> 00:34:49.490
results where did the rest of the
oh sorry wrong sighs all right so here's

00:34:49.490 --> 00:34:49.500
oh sorry wrong sighs all right so here's
 

00:34:49.500 --> 00:34:51.290
oh sorry wrong sighs all right so here's
the code that get generated so from that

00:34:51.290 --> 00:34:51.300
the code that get generated so from that
 

00:34:51.300 --> 00:34:52.700
the code that get generated so from that
code that we have that takes default

00:34:52.700 --> 00:34:52.710
code that we have that takes default
 

00:34:52.710 --> 00:34:55.070
code that we have that takes default
parameter values we have a new static

00:34:55.070 --> 00:34:55.080
parameter values we have a new static
 

00:34:55.080 --> 00:34:56.360
parameter values we have a new static
function that was created that the

00:34:56.360 --> 00:34:56.370
function that was created that the
 

00:34:56.370 --> 00:34:58.460
function that was created that the
stakes are two floats without default

00:34:58.460 --> 00:34:58.470
stakes are two floats without default
 

00:34:58.470 --> 00:35:00.320
stakes are two floats without default
values because no we generated bytecode

00:35:00.320 --> 00:35:00.330
values because no we generated bytecode
 

00:35:00.330 --> 00:35:02.420
values because no we generated bytecode
and just returns it just adds them and

00:35:02.420 --> 00:35:02.430
and just returns it just adds them and
 

00:35:02.430 --> 00:35:05.060
and just returns it just adds them and
returns the result but here's there's

00:35:05.060 --> 00:35:05.070
returns the result but here's there's
 

00:35:05.070 --> 00:35:07.040
returns the result but here's there's
another method that was created so it

00:35:07.040 --> 00:35:07.050
another method that was created so it
 

00:35:07.050 --> 00:35:09.110
another method that was created so it
takes two floats as we expect and then

00:35:09.110 --> 00:35:09.120
takes two floats as we expect and then
 

00:35:09.120 --> 00:35:10.910
takes two floats as we expect and then
it also takes an integer and an object

00:35:10.910 --> 00:35:10.920
it also takes an integer and an object
 

00:35:10.920 --> 00:35:13.070
it also takes an integer and an object
as far as I can tell the object is

00:35:13.070 --> 00:35:13.080
as far as I can tell the object is
 

00:35:13.080 --> 00:35:14.600
as far as I can tell the object is
always said to know so I'm natural white

00:35:14.600 --> 00:35:14.610
always said to know so I'm natural white
 

00:35:14.610 --> 00:35:16.310
always said to know so I'm natural white
stairs probably to tag those methods in

00:35:16.310 --> 00:35:16.320
stairs probably to tag those methods in
 

00:35:16.320 --> 00:35:17.630
stairs probably to tag those methods in
a way or another I should I straight

00:35:17.630 --> 00:35:17.640
a way or another I should I straight
 

00:35:17.640 --> 00:35:18.650
a way or another I should I straight
brains they will probably know the

00:35:18.650 --> 00:35:18.660
brains they will probably know the
 

00:35:18.660 --> 00:35:21.350
brains they will probably know the
answer and the integer is actually a big

00:35:21.350 --> 00:35:21.360
answer and the integer is actually a big
 

00:35:21.360 --> 00:35:25.070
answer and the integer is actually a big
field where every bit tells the method

00:35:25.070 --> 00:35:25.080
field where every bit tells the method
 

00:35:25.080 --> 00:35:27.470
field where every bit tells the method
which parameters you did not specify at

00:35:27.470 --> 00:35:27.480
which parameters you did not specify at
 

00:35:27.480 --> 00:35:29.540
which parameters you did not specify at
the call site so you can see here when

00:35:29.540 --> 00:35:29.550
the call site so you can see here when
 

00:35:29.550 --> 00:35:30.990
the call site so you can see here when
we check the first bit

00:35:30.990 --> 00:35:31.000
we check the first bit
 

00:35:31.000 --> 00:35:33.630
we check the first bit
two and one if it's set that means that

00:35:33.630 --> 00:35:33.640
two and one if it's set that means that
 

00:35:33.640 --> 00:35:36.480
two and one if it's set that means that
we did not specify a value so we use the

00:35:36.480 --> 00:35:36.490
we did not specify a value so we use the
 

00:35:36.490 --> 00:35:37.950
we did not specify a value so we use the
default value that we specified on the

00:35:37.950 --> 00:35:37.960
default value that we specified on the
 

00:35:37.960 --> 00:35:39.359
default value that we specified on the
cutting side and then we do this for

00:35:39.359 --> 00:35:39.369
cutting side and then we do this for
 

00:35:39.369 --> 00:35:41.400
cutting side and then we do this for
every parameters parameter and at the

00:35:41.400 --> 00:35:41.410
every parameters parameter and at the
 

00:35:41.410 --> 00:35:43.890
every parameters parameter and at the
end we invoke the actual function that's

00:35:43.890 --> 00:35:43.900
end we invoke the actual function that's
 

00:35:43.900 --> 00:35:46.290
end we invoke the actual function that's
at the top

00:35:46.290 --> 00:35:46.300
at the top
 

00:35:46.300 --> 00:35:48.960
at the top
what's interesting because it's an

00:35:48.960 --> 00:35:48.970
what's interesting because it's an
 

00:35:48.970 --> 00:35:50.910
what's interesting because it's an
integer I was wondering you know there's

00:35:50.910 --> 00:35:50.920
integer I was wondering you know there's
 

00:35:50.920 --> 00:35:52.920
integer I was wondering you know there's
only 32 bits so what happens when you

00:35:52.920 --> 00:35:52.930
only 32 bits so what happens when you
 

00:35:52.930 --> 00:35:54.960
only 32 bits so what happens when you
have 33 parameters and we're going to

00:35:54.960 --> 00:35:54.970
have 33 parameters and we're going to
 

00:35:54.970 --> 00:35:56.370
have 33 parameters and we're going to
take a look at that in a moment

00:35:56.370 --> 00:35:56.380
take a look at that in a moment
 

00:35:56.380 --> 00:35:58.440
take a look at that in a moment
but just here are some examples of how

00:35:58.440 --> 00:35:58.450
but just here are some examples of how
 

00:35:58.450 --> 00:35:59.970
but just here are some examples of how
it works so if I called my function

00:35:59.970 --> 00:35:59.980
it works so if I called my function
 

00:35:59.980 --> 00:36:01.859
it works so if I called my function
directly without specific specifically

00:36:01.859 --> 00:36:01.869
directly without specific specifically
 

00:36:01.869 --> 00:36:03.810
directly without specific specifically
any values the curtain compiler would

00:36:03.810 --> 00:36:03.820
any values the curtain compiler would
 

00:36:03.820 --> 00:36:05.700
any values the curtain compiler would
just use the default value 0 and then

00:36:05.700 --> 00:36:05.710
just use the default value 0 and then
 

00:36:05.710 --> 00:36:07.589
just use the default value 0 and then
for the bit field it will set 3 so the

00:36:07.589 --> 00:36:07.599
for the bit field it will set 3 so the
 

00:36:07.599 --> 00:36:09.810
for the bit field it will set 3 so the
bit 1 and 2 are set and it's going to

00:36:09.810 --> 00:36:09.820
bit 1 and 2 are set and it's going to
 

00:36:09.820 --> 00:36:11.550
bit 1 and 2 are set and it's going to
use the default values if I specify the

00:36:11.550 --> 00:36:11.560
use the default values if I specify the
 

00:36:11.560 --> 00:36:14.220
use the default values if I specify the
first parameter we see our value as the

00:36:14.220 --> 00:36:14.230
first parameter we see our value as the
 

00:36:14.230 --> 00:36:15.690
first parameter we see our value as the
first parameter which is 0 for the

00:36:15.690 --> 00:36:15.700
first parameter which is 0 for the
 

00:36:15.700 --> 00:36:17.430
first parameter which is 0 for the
second one the bid field is set to 2

00:36:17.430 --> 00:36:17.440
second one the bid field is set to 2
 

00:36:17.440 --> 00:36:19.260
second one the bid field is set to 2
because the second parameter is not set

00:36:19.260 --> 00:36:19.270
because the second parameter is not set
 

00:36:19.270 --> 00:36:21.300
because the second parameter is not set
same thing when you specify only the

00:36:21.300 --> 00:36:21.310
same thing when you specify only the
 

00:36:21.310 --> 00:36:23.099
same thing when you specify only the
second parameter and then of course if

00:36:23.099 --> 00:36:23.109
second parameter and then of course if
 

00:36:23.109 --> 00:36:24.750
second parameter and then of course if
you specify the two parameters we call

00:36:24.750 --> 00:36:24.760
you specify the two parameters we call
 

00:36:24.760 --> 00:36:26.460
you specify the two parameters we call
directly the function that does the

00:36:26.460 --> 00:36:26.470
directly the function that does the
 

00:36:26.470 --> 00:36:27.990
directly the function that does the
actual work and we skip all those checks

00:36:27.990 --> 00:36:28.000
actual work and we skip all those checks
 

00:36:28.000 --> 00:36:30.750
actual work and we skip all those checks
so we have only 32 bits what happened we

00:36:30.750 --> 00:36:30.760
so we have only 32 bits what happened we
 

00:36:30.760 --> 00:36:32.310
so we have only 32 bits what happened we
will create a function that has 33

00:36:32.310 --> 00:36:32.320
will create a function that has 33
 

00:36:32.320 --> 00:36:34.920
will create a function that has 33
parameters you should probably not do

00:36:34.920 --> 00:36:34.930
parameters you should probably not do
 

00:36:34.930 --> 00:36:36.930
parameters you should probably not do
that in your code but just in case that

00:36:36.930 --> 00:36:36.940
that in your code but just in case that
 

00:36:36.940 --> 00:36:38.370
that in your code but just in case that
double check for you what happened

00:36:38.370 --> 00:36:38.380
double check for you what happened
 

00:36:38.380 --> 00:36:39.810
double check for you what happened
honestly I was waiting for I was

00:36:39.810 --> 00:36:39.820
honestly I was waiting for I was
 

00:36:39.820 --> 00:36:41.370
honestly I was waiting for I was
expecting the compiler to just send up

00:36:41.370 --> 00:36:41.380
expecting the compiler to just send up
 

00:36:41.380 --> 00:36:43.770
expecting the compiler to just send up
too many parameters I can do that what

00:36:43.770 --> 00:36:43.780
too many parameters I can do that what
 

00:36:43.780 --> 00:36:46.079
too many parameters I can do that what
it does it creates two integers so it

00:36:46.079 --> 00:36:46.089
it does it creates two integers so it
 

00:36:46.089 --> 00:36:48.060
it does it creates two integers so it
just adds a second bit field and going

00:36:48.060 --> 00:36:48.070
just adds a second bit field and going
 

00:36:48.070 --> 00:36:49.980
just adds a second bit field and going
to look at the bits in both bit fields

00:36:49.980 --> 00:36:49.990
to look at the bits in both bit fields
 

00:36:49.990 --> 00:36:52.040
to look at the bits in both bit fields
because what's better than a bit field

00:36:52.040 --> 00:36:52.050
because what's better than a bit field
 

00:36:52.050 --> 00:36:55.890
because what's better than a bit field
two bit fields all right finally

00:36:55.890 --> 00:36:55.900
two bit fields all right finally
 

00:36:55.900 --> 00:36:57.000
two bit fields all right finally
co-routines we only have three minutes

00:36:57.000 --> 00:36:57.010
co-routines we only have three minutes
 

00:36:57.010 --> 00:36:58.320
co-routines we only have three minutes
left so we're gonna go through this very

00:36:58.320 --> 00:36:58.330
left so we're gonna go through this very
 

00:36:58.330 --> 00:37:00.589
left so we're gonna go through this very
quickly how many of you use co-routines

00:37:00.589 --> 00:37:00.599
quickly how many of you use co-routines
 

00:37:00.599 --> 00:37:03.750
quickly how many of you use co-routines
okay so sorry for the for those of you

00:37:03.750 --> 00:37:03.760
okay so sorry for the for those of you
 

00:37:03.760 --> 00:37:05.160
okay so sorry for the for those of you
who don't know how proteins work without

00:37:05.160 --> 00:37:05.170
who don't know how proteins work without
 

00:37:05.170 --> 00:37:06.420
who don't know how proteins work without
I'm gonna gonna explain that too much

00:37:06.420 --> 00:37:06.430
I'm gonna gonna explain that too much
 

00:37:06.430 --> 00:37:08.010
I'm gonna gonna explain that too much
but basically so you have a suspend

00:37:08.010 --> 00:37:08.020
but basically so you have a suspend
 

00:37:08.020 --> 00:37:09.510
but basically so you have a suspend
function that means you can do heavy

00:37:09.510 --> 00:37:09.520
function that means you can do heavy
 

00:37:09.520 --> 00:37:12.690
function that means you can do heavy
work in there and here I call a function

00:37:12.690 --> 00:37:12.700
work in there and here I call a function
 

00:37:12.700 --> 00:37:14.730
work in there and here I call a function
called delay we're simulating heavy work

00:37:14.730 --> 00:37:14.740
called delay we're simulating heavy work
 

00:37:14.740 --> 00:37:17.220
called delay we're simulating heavy work
then I'll launch a curve routine so we

00:37:17.220 --> 00:37:17.230
then I'll launch a curve routine so we
 

00:37:17.230 --> 00:37:19.200
then I'll launch a curve routine so we
print that I'm launching a curry team

00:37:19.200 --> 00:37:19.210
print that I'm launching a curry team
 

00:37:19.210 --> 00:37:21.300
print that I'm launching a curry team
then I call launch I call my suspend

00:37:21.300 --> 00:37:21.310
then I call launch I call my suspend
 

00:37:21.310 --> 00:37:23.070
then I call launch I call my suspend
function twice so compute and compute

00:37:23.070 --> 00:37:23.080
function twice so compute and compute
 

00:37:23.080 --> 00:37:25.140
function twice so compute and compute
and finally I print exiting crow routine

00:37:25.140 --> 00:37:25.150
and finally I print exiting crow routine
 

00:37:25.150 --> 00:37:27.450
and finally I print exiting crow routine
so if we don't run this program we're

00:37:27.450 --> 00:37:27.460
so if we don't run this program we're
 

00:37:27.460 --> 00:37:28.380
so if we don't run this program we're
gonna see the following output

00:37:28.380 --> 00:37:28.390
gonna see the following output
 

00:37:28.390 --> 00:37:30.450
gonna see the following output
relaunching the recording we're

00:37:30.450 --> 00:37:30.460
relaunching the recording we're
 

00:37:30.460 --> 00:37:32.250
relaunching the recording we're
computing that our suspend function

00:37:32.250 --> 00:37:32.260
computing that our suspend function
 

00:37:32.260 --> 00:37:33.690
computing that our suspend function
we're computing again that's our suspend

00:37:33.690 --> 00:37:33.700
we're computing again that's our suspend
 

00:37:33.700 --> 00:37:36.329
we're computing again that's our suspend
function wigs it's curtains are

00:37:36.329 --> 00:37:36.339
function wigs it's curtains are
 

00:37:36.339 --> 00:37:38.190
function wigs it's curtains are
implemented using state machines so if

00:37:38.190 --> 00:37:38.200
implemented using state machines so if
 

00:37:38.200 --> 00:37:39.950
implemented using state machines so if
you look at the code that's generated

00:37:39.950 --> 00:37:39.960
you look at the code that's generated
 

00:37:39.960 --> 00:37:42.630
you look at the code that's generated
it's gonna look something like this

00:37:42.630 --> 00:37:42.640
it's gonna look something like this
 

00:37:42.640 --> 00:37:43.260
it's gonna look something like this
there's going to be

00:37:43.260 --> 00:37:43.270
there's going to be
 

00:37:43.270 --> 00:37:44.970
there's going to be
vogue suspend function generates

00:37:44.970 --> 00:37:44.980
vogue suspend function generates
 

00:37:44.980 --> 00:37:47.490
vogue suspend function generates
somewhere in at the top does a switch on

00:37:47.490 --> 00:37:47.500
somewhere in at the top does a switch on
 

00:37:47.500 --> 00:37:49.290
somewhere in at the top does a switch on
an intro field so that function is

00:37:49.290 --> 00:37:49.300
an intro field so that function is
 

00:37:49.300 --> 00:37:51.359
an intro field so that function is
inside the class and it switches on the

00:37:51.359 --> 00:37:51.369
inside the class and it switches on the
 

00:37:51.369 --> 00:37:53.700
inside the class and it switches on the
field code label and ylabel is basically

00:37:53.700 --> 00:37:53.710
field code label and ylabel is basically
 

00:37:53.710 --> 00:37:56.130
field code label and ylabel is basically
where you are in the current state

00:37:56.130 --> 00:37:56.140
where you are in the current state
 

00:37:56.140 --> 00:37:58.020
where you are in the current state
machine so every suspend function you

00:37:58.020 --> 00:37:58.030
machine so every suspend function you
 

00:37:58.030 --> 00:38:00.420
machine so every suspend function you
call in the core routine will be a state

00:38:00.420 --> 00:38:00.430
call in the core routine will be a state
 

00:38:00.430 --> 00:38:02.609
call in the core routine will be a state
in a state machine so here you can see

00:38:02.609 --> 00:38:02.619
in a state machine so here you can see
 

00:38:02.619 --> 00:38:06.000
in a state machine so here you can see
we switch on label and in the case 0 we

00:38:06.000 --> 00:38:06.010
we switch on label and in the case 0 we
 

00:38:06.010 --> 00:38:07.620
we switch on label and in the case 0 we
set the label to 1 that means we advance

00:38:07.620 --> 00:38:07.630
set the label to 1 that means we advance
 

00:38:07.630 --> 00:38:10.170
set the label to 1 that means we advance
to the next state and we call our first

00:38:10.170 --> 00:38:10.180
to the next state and we call our first
 

00:38:10.180 --> 00:38:12.120
to the next state and we call our first
instance of the compute function when

00:38:12.120 --> 00:38:12.130
instance of the compute function when
 

00:38:12.130 --> 00:38:14.280
instance of the compute function when
those suspend functions return a magic

00:38:14.280 --> 00:38:14.290
those suspend functions return a magic
 

00:38:14.290 --> 00:38:16.530
those suspend functions return a magic
value called suspended we return from

00:38:16.530 --> 00:38:16.540
value called suspended we return from
 

00:38:16.540 --> 00:38:18.180
value called suspended we return from
the state machine that means that the

00:38:18.180 --> 00:38:18.190
the state machine that means that the
 

00:38:18.190 --> 00:38:19.560
the state machine that means that the
core routine has to be paused and will

00:38:19.560 --> 00:38:19.570
core routine has to be paused and will
 

00:38:19.570 --> 00:38:21.330
core routine has to be paused and will
have to come back later when we cannot

00:38:21.330 --> 00:38:21.340
have to come back later when we cannot
 

00:38:21.340 --> 00:38:23.520
have to come back later when we cannot
resume execution and again if you look

00:38:23.520 --> 00:38:23.530
resume execution and again if you look
 

00:38:23.530 --> 00:38:25.140
resume execution and again if you look
at the other state so when the state is

00:38:25.140 --> 00:38:25.150
at the other state so when the state is
 

00:38:25.150 --> 00:38:27.510
at the other state so when the state is
1 we advance the state to 2 we call

00:38:27.510 --> 00:38:27.520
1 we advance the state to 2 we call
 

00:38:27.520 --> 00:38:29.040
1 we advance the state to 2 we call
compute sorry we call computer set a

00:38:29.040 --> 00:38:29.050
compute sorry we call computer set a
 

00:38:29.050 --> 00:38:30.359
compute sorry we call computer set a
second time in a return if you're

00:38:30.359 --> 00:38:30.369
second time in a return if you're
 

00:38:30.369 --> 00:38:32.970
second time in a return if you're
suspended so what I did is I took the

00:38:32.970 --> 00:38:32.980
suspended so what I did is I took the
 

00:38:32.980 --> 00:38:35.430
suspended so what I did is I took the
bytecode of that and the bytecode starts

00:38:35.430 --> 00:38:35.440
bytecode of that and the bytecode starts
 

00:38:35.440 --> 00:38:38.130
bytecode of that and the bytecode starts
like this and I hacked it to add this

00:38:38.130 --> 00:38:38.140
like this and I hacked it to add this
 

00:38:38.140 --> 00:38:39.480
like this and I hacked it to add this
you don't need to understand what it's

00:38:39.480 --> 00:38:39.490
you don't need to understand what it's
 

00:38:39.490 --> 00:38:40.890
you don't need to understand what it's
doing but basically all I wanted to do

00:38:40.890 --> 00:38:40.900
doing but basically all I wanted to do
 

00:38:40.900 --> 00:38:43.290
doing but basically all I wanted to do
was print the current state of the of

00:38:43.290 --> 00:38:43.300
was print the current state of the of
 

00:38:43.300 --> 00:38:45.000
was print the current state of the of
the coding of the state machine and

00:38:45.000 --> 00:38:45.010
the coding of the state machine and
 

00:38:45.010 --> 00:38:46.950
the coding of the state machine and
rerun the program to see what's going on

00:38:46.950 --> 00:38:46.960
rerun the program to see what's going on
 

00:38:46.960 --> 00:38:49.530
rerun the program to see what's going on
so this was the original output and when

00:38:49.530 --> 00:38:49.540
so this was the original output and when
 

00:38:49.540 --> 00:38:51.810
so this was the original output and when
I print this label field this is what it

00:38:51.810 --> 00:38:51.820
I print this label field this is what it
 

00:38:51.820 --> 00:38:52.230
I print this label field this is what it
looks like

00:38:52.230 --> 00:38:52.240
looks like
 

00:38:52.240 --> 00:38:54.540
looks like
so we launch the Karoo teen we enter

00:38:54.540 --> 00:38:54.550
so we launch the Karoo teen we enter
 

00:38:54.550 --> 00:38:56.670
so we launch the Karoo teen we enter
that state machine the state is 0 we

00:38:56.670 --> 00:38:56.680
that state machine the state is 0 we
 

00:38:56.680 --> 00:38:58.440
that state machine the state is 0 we
call compute our first suspend function

00:38:58.440 --> 00:38:58.450
call compute our first suspend function
 

00:38:58.450 --> 00:39:00.780
call compute our first suspend function
where we return because we're suspended

00:39:00.780 --> 00:39:00.790
where we return because we're suspended
 

00:39:00.790 --> 00:39:03.810
where we return because we're suspended
and then at some point later we re-enter

00:39:03.810 --> 00:39:03.820
and then at some point later we re-enter
 

00:39:03.820 --> 00:39:05.670
and then at some point later we re-enter
the state machine now the state is 1

00:39:05.670 --> 00:39:05.680
the state machine now the state is 1
 

00:39:05.680 --> 00:39:07.980
the state machine now the state is 1
when we compute we return again we come

00:39:07.980 --> 00:39:07.990
when we compute we return again we come
 

00:39:07.990 --> 00:39:09.210
when we compute we return again we come
back into the state machine with the

00:39:09.210 --> 00:39:09.220
back into the state machine with the
 

00:39:09.220 --> 00:39:10.740
back into the state machine with the
live state and the finally we exit the

00:39:10.740 --> 00:39:10.750
live state and the finally we exit the
 

00:39:10.750 --> 00:39:12.930
live state and the finally we exit the
origin so again you shouldn't worry not

00:39:12.930 --> 00:39:12.940
origin so again you shouldn't worry not
 

00:39:12.940 --> 00:39:14.280
origin so again you shouldn't worry not
worry about this too much in your code

00:39:14.280 --> 00:39:14.290
worry about this too much in your code
 

00:39:14.290 --> 00:39:16.140
worry about this too much in your code
use co-routines they are amazing it was

00:39:16.140 --> 00:39:16.150
use co-routines they are amazing it was
 

00:39:16.150 --> 00:39:17.490
use co-routines they are amazing it was
very interesting to go look at the byte

00:39:17.490 --> 00:39:17.500
very interesting to go look at the byte
 

00:39:17.500 --> 00:39:19.170
very interesting to go look at the byte
code at the generate code to better

00:39:19.170 --> 00:39:19.180
code at the generate code to better
 

00:39:19.180 --> 00:39:20.940
code at the generate code to better
understand how they work how old that

00:39:20.940 --> 00:39:20.950
understand how they work how old that
 

00:39:20.950 --> 00:39:22.980
understand how they work how old that
what looks magical how it works under

00:39:22.980 --> 00:39:22.990
what looks magical how it works under
 

00:39:22.990 --> 00:39:26.340
what looks magical how it works under
the hood and with that you have 30

00:39:26.340 --> 00:39:26.350
the hood and with that you have 30
 

00:39:26.350 --> 00:39:28.830
the hood and with that you have 30
seconds Chet so wrap up so the question

00:39:28.830 --> 00:39:28.840
seconds Chet so wrap up so the question
 

00:39:28.840 --> 00:39:31.080
seconds Chet so wrap up so the question
is should you actually care about this

00:39:31.080 --> 00:39:31.090
is should you actually care about this
 

00:39:31.090 --> 00:39:32.940
is should you actually care about this
stuff we've given a couple of talks in

00:39:32.940 --> 00:39:32.950
stuff we've given a couple of talks in
 

00:39:32.950 --> 00:39:34.080
stuff we've given a couple of talks in
the last couple of years and said you

00:39:34.080 --> 00:39:34.090
the last couple of years and said you
 

00:39:34.090 --> 00:39:35.400
the last couple of years and said you
know what the run time has gotten so

00:39:35.400 --> 00:39:35.410
know what the run time has gotten so
 

00:39:35.410 --> 00:39:37.530
know what the run time has gotten so
much better stop worrying about all the

00:39:37.530 --> 00:39:37.540
much better stop worrying about all the
 

00:39:37.540 --> 00:39:40.050
much better stop worrying about all the
allocation and de-allocation stuff we

00:39:40.050 --> 00:39:40.060
allocation and de-allocation stuff we
 

00:39:40.060 --> 00:39:42.120
allocation and de-allocation stuff we
told you early days of Android avoid

00:39:42.120 --> 00:39:42.130
told you early days of Android avoid
 

00:39:42.130 --> 00:39:44.670
told you early days of Android avoid
allocations now do the right thing for

00:39:44.670 --> 00:39:44.680
allocations now do the right thing for
 

00:39:44.680 --> 00:39:46.800
allocations now do the right thing for
your code in your API so the question is

00:39:46.800 --> 00:39:46.810
your code in your API so the question is
 

00:39:46.810 --> 00:39:48.870
your code in your API so the question is
did we lie to you and the answer is no

00:39:48.870 --> 00:39:48.880
did we lie to you and the answer is no
 

00:39:48.880 --> 00:39:50.550
did we lie to you and the answer is no
actually we were telling the truth that

00:39:50.550 --> 00:39:50.560
actually we were telling the truth that
 

00:39:50.560 --> 00:39:54.630
actually we were telling the truth that
is still good advice however oh yeah and

00:39:54.630 --> 00:39:54.640
is still good advice however oh yeah and
 

00:39:54.640 --> 00:39:56.359
is still good advice however oh yeah and
there's the advice yep yep alakay

00:39:56.359 --> 00:39:56.369
there's the advice yep yep alakay
 

00:39:56.369 --> 00:39:58.220
there's the advice yep yep alakay
and Collections always fine but it's

00:39:58.220 --> 00:39:58.230
and Collections always fine but it's
 

00:39:58.230 --> 00:39:59.870
and Collections always fine but it's
good to actually understand what's going

00:39:59.870 --> 00:39:59.880
good to actually understand what's going
 

00:39:59.880 --> 00:40:01.370
good to actually understand what's going
on in the hood if you are trying to be

00:40:01.370 --> 00:40:01.380
on in the hood if you are trying to be
 

00:40:01.380 --> 00:40:03.559
on in the hood if you are trying to be
lazy about allocating even a rect object

00:40:03.559 --> 00:40:03.569
lazy about allocating even a rect object
 

00:40:03.569 --> 00:40:06.410
lazy about allocating even a rect object
that's not the right approach right it

00:40:06.410 --> 00:40:06.420
that's not the right approach right it
 

00:40:06.420 --> 00:40:08.569
that's not the right approach right it
probably doesn't matter but isn't it

00:40:08.569 --> 00:40:08.579
probably doesn't matter but isn't it
 

00:40:08.579 --> 00:40:09.980
probably doesn't matter but isn't it
nice to actually know what's going on

00:40:09.980 --> 00:40:09.990
nice to actually know what's going on
 

00:40:09.990 --> 00:40:13.309
nice to actually know what's going on
and especially if you're in an inner

00:40:13.309 --> 00:40:13.319
and especially if you're in an inner
 

00:40:13.319 --> 00:40:15.140
and especially if you're in an inner
loop somewhere maybe you actually don't

00:40:15.140 --> 00:40:15.150
loop somewhere maybe you actually don't
 

00:40:15.150 --> 00:40:16.400
loop somewhere maybe you actually don't
want that overhead maybe it doesn't

00:40:16.400 --> 00:40:16.410
want that overhead maybe it doesn't
 

00:40:16.410 --> 00:40:18.349
want that overhead maybe it doesn't
matter on the other hand if you can save

00:40:18.349 --> 00:40:18.359
matter on the other hand if you can save
 

00:40:18.359 --> 00:40:19.880
matter on the other hand if you can save
it in a case where it actually matters

00:40:19.880 --> 00:40:19.890
it in a case where it actually matters
 

00:40:19.890 --> 00:40:22.099
it in a case where it actually matters
in an inner loop that's probably a good

00:40:22.099 --> 00:40:22.109
in an inner loop that's probably a good
 

00:40:22.109 --> 00:40:25.610
in an inner loop that's probably a good
thing and that is it thank you

00:40:25.610 --> 00:40:25.620
thing and that is it thank you
 

00:40:25.620 --> 00:40:43.269
thing and that is it thank you
[Music]

00:40:43.269 --> 00:40:43.279
[Music]
 

00:40:43.279 --> 00:40:43.980
[Music]
you

00:40:43.980 --> 00:40:43.990
you
 

00:40:43.990 --> 00:40:47.000
you
[Music]

