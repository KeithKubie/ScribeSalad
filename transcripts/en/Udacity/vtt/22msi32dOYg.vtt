WEBVTT
Kind: captions
Language: en

00:00:00.390 --> 00:00:03.360
We can get Live Input, Audio and Video, directly

00:00:03.360 --> 00:00:07.260
under our App by using an API called getUserMedia. This

00:00:07.260 --> 00:00:10.540
is a simple example where we just call getUserMedia,

00:00:10.540 --> 00:00:14.530
passing some constraints that say we want video, and then

00:00:14.530 --> 00:00:17.480
we assign the resulting stream to a video element

00:00:17.480 --> 00:00:19.710
in the page. Of course, this just gives us a

00:00:19.710 --> 00:00:22.790
rectangle with live Video Input. We probably want to

00:00:22.790 --> 00:00:26.070
do something with it. If we want to grab Snapshots

00:00:26.070 --> 00:00:29.120
like if we want to implement a Camera Application, we can

00:00:29.120 --> 00:00:32.900
do this with a canvas context and DrawImage. Whenever we want

00:00:32.900 --> 00:00:35.890
to take a Snapshot, we simply grab the image from

00:00:35.890 --> 00:00:39.480
the video and we draw it to the camera with DrawImage.

00:00:39.480 --> 00:00:41.860
Of course a canvas in different than an image. You

00:00:41.860 --> 00:00:45.490
can't directly copy a canvas and paste it somewhere else, or

00:00:45.490 --> 00:00:47.520
download it your hard drive or post it to your

00:00:47.520 --> 00:00:51.409
social networks. Or any of the other typical User flows centred

00:00:51.409 --> 00:00:53.920
around images, but it turns out, canvas has a

00:00:53.920 --> 00:00:57.580
handy function to encode itself as an image. The canvas

00:00:57.580 --> 00:01:02.930
toDataURL method. Here, instead of displaying the canvas itself,

00:01:02.930 --> 00:01:05.860
we're copying the canvas contents as a data earl to

00:01:05.860 --> 00:01:08.340
the source of an image tag. And if you

00:01:08.340 --> 00:01:11.170
want to save these images to the Mobile's local storage,

00:01:11.170 --> 00:01:13.440
you can do that, too, by forcing a download of

00:01:13.440 --> 00:01:16.800
a link using the download attribute on an anchor element.

00:01:17.840 --> 00:01:21.070
This isn't really downloading the data per se, it's encoded in

00:01:21.070 --> 00:01:24.320
the link itself, so you're not really transferring things over the network.

