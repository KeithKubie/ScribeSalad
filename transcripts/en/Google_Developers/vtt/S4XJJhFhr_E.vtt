WEBVTT
Kind: captions
Language: en

00:00:05.560 --> 00:00:07.770
STEVEN BAZYL: Hi everyone,
I'm Steven Bazyl.

00:00:07.770 --> 00:00:09.150
ALI AFSHAR: And I'm
Ali Afshar.

00:00:09.150 --> 00:00:12.200
STEVEN BAZYL: And we're here
for another Google Drive

00:00:12.200 --> 00:00:14.480
question time to talk about
what's new, and this is

00:00:14.480 --> 00:00:18.086
actually our first one since a
very successful Google I/O.

00:00:18.086 --> 00:00:19.770
ALI AFSHAR: So whoever came
to I/O, thank you

00:00:19.770 --> 00:00:21.020
very much for coming.

00:00:21.020 --> 00:00:23.500
If you've checked out our
videos online of the

00:00:23.500 --> 00:00:26.070
presentations, thank
you for that.

00:00:26.070 --> 00:00:28.380
If you haven't, please by all
means go and do that.

00:00:28.380 --> 00:00:30.370
STEVEN BAZYL: There's a lot of
great sessions on everything

00:00:30.370 --> 00:00:32.990
about what's new, to
working on Android,

00:00:32.990 --> 00:00:34.680
lots of great content.

00:00:34.680 --> 00:00:37.110
Today we're going to go through
some of the unanswered

00:00:37.110 --> 00:00:40.810
questions on Stack Overflow and
maybe talk about some of

00:00:40.810 --> 00:00:45.560
the newer features that we
launched about two weeks ago.

00:00:45.560 --> 00:00:47.650
So I want to jump on to
the first one here.

00:00:47.650 --> 00:00:48.180
ALI AFSHAR: Let's start.

00:00:48.180 --> 00:00:53.240
The first question says, can one
add additional metadata to

00:00:53.240 --> 00:00:57.390
Drive files, excluding the
description field?

00:00:57.390 --> 00:00:58.710
STEVEN BAZYL: That's
a good question.

00:00:58.710 --> 00:00:59.575
It's a good feature request.

00:00:59.575 --> 00:01:02.450
It is unfortunately not
something that we have right

00:01:02.450 --> 00:01:05.760
now, but it is definitely
something that we have talked

00:01:05.760 --> 00:01:09.640
about internally, something I
personally would like to see

00:01:09.640 --> 00:01:11.380
us add to the API.

00:01:11.380 --> 00:01:14.350
But right now, the only things
you can do are the

00:01:14.350 --> 00:01:19.360
description, or indexable text
is a way that you could attach

00:01:19.360 --> 00:01:22.170
some data in a way that's
somewhat useful.

00:01:22.170 --> 00:01:24.500
ALI AFSHAR: So can you
just mention--

00:01:24.500 --> 00:01:25.820
you said using the
description.

00:01:25.820 --> 00:01:27.490
I mean, this question
says excluding

00:01:27.490 --> 00:01:28.310
the description field.

00:01:28.310 --> 00:01:32.140
But how would someone use
that, for example?

00:01:32.140 --> 00:01:34.832
STEVEN BAZYL: Description
is just arbitrary text.

00:01:34.832 --> 00:01:35.880
It's not the file name.

00:01:35.880 --> 00:01:40.050
It doesn't affect how it syncs,
but it does show up in

00:01:40.050 --> 00:01:41.510
our previewer.

00:01:41.510 --> 00:01:44.800
It is something that a client
could read out, so they can

00:01:44.800 --> 00:01:47.090
put some structured data in
there, or at least some

00:01:47.090 --> 00:01:49.830
meaningful data that
they can parse out.

00:01:49.830 --> 00:01:54.290
It is user visible, though, so
you can't put in anything that

00:01:54.290 --> 00:01:58.870
would come across as too
technical or gibberish.

00:01:58.870 --> 00:02:01.310
ALI AFSHAR: Or some kind of data
format, like JSON, that

00:02:01.310 --> 00:02:02.340
would be a struggle.

00:02:02.340 --> 00:02:04.855
But indexable text,
on the other hand.

00:02:04.855 --> 00:02:06.390
STEVEN BAZYL: Yeah, indexable
text is an

00:02:06.390 --> 00:02:07.640
interesting option for that.

00:02:07.640 --> 00:02:12.050
So you can write text, and if
there's information that you

00:02:12.050 --> 00:02:16.300
think would be useful for
search that might not be

00:02:16.300 --> 00:02:19.730
easily extracted from
the actual file

00:02:19.730 --> 00:02:21.160
itself, you can add that.

00:02:21.160 --> 00:02:23.680
The problem though is I think in
this particular case, it's

00:02:23.680 --> 00:02:25.580
probably not the right solution,
because you can't

00:02:25.580 --> 00:02:28.480
read that information back.

00:02:28.480 --> 00:02:31.430
You could do some very clever
hacks around searching and

00:02:31.430 --> 00:02:35.340
testing for existence, but not
something I would actually

00:02:35.340 --> 00:02:38.450
encourage anyone
to actually do.

00:02:38.450 --> 00:02:39.190
ALI AFSHAR: OK, so great.

00:02:39.190 --> 00:02:41.870
So to summarize, unfortunately
not right now.

00:02:41.870 --> 00:02:46.220
Something we're looking at
very, very strongly.

00:02:46.220 --> 00:02:50.260
And there are some slight
workarounds, but just hold

00:02:50.260 --> 00:02:51.090
that thought.

00:02:51.090 --> 00:02:52.760
We'll get on that one.

00:02:52.760 --> 00:02:54.900
STEVEN BAZYL: But I'd be very
happy when that's added.

00:02:54.900 --> 00:02:56.515
A lot of really cool things
you can do once

00:02:56.515 --> 00:02:57.765
you have that feature.

00:03:00.000 --> 00:03:02.600
This looks like a Documents
List question.

00:03:02.600 --> 00:03:05.745
And a fairly long one.

00:03:05.745 --> 00:03:07.680
Commenter roles.

00:03:07.680 --> 00:03:10.610
ALI AFSHAR: So the Documents
List API has been pretty much

00:03:10.610 --> 00:03:13.150
replaced by the Drive
API, would you say?

00:03:13.150 --> 00:03:13.930
STEVEN BAZYL: That is true.

00:03:13.930 --> 00:03:19.630
As of Google I/O and Version
2 of the SDK and the API,

00:03:19.630 --> 00:03:23.240
everything that was possible in
the Documents List API is

00:03:23.240 --> 00:03:27.580
now possible, and I think
personally a lot easier to do,

00:03:27.580 --> 00:03:29.060
in the Drive API.

00:03:29.060 --> 00:03:31.735
ALI AFSHAR: So all of our
questions about the Documents

00:03:31.735 --> 00:03:34.590
List API, our answer would
be, why don't you

00:03:34.590 --> 00:03:35.630
use the Drive API?

00:03:35.630 --> 00:03:37.320
STEVEN BAZYL: Exactly.

00:03:37.320 --> 00:03:42.080
ALI AFSHAR: So the question
is ACL role for commenter.

00:03:42.080 --> 00:03:45.490
So this user would like to share
a document with some

00:03:45.490 --> 00:03:49.230
users but only to allow them
to comment on a document.

00:03:49.230 --> 00:03:51.420
Now, if you've used Google Docs,
you know there's the

00:03:51.420 --> 00:03:53.290
commenting system in the
right-hand side.

00:03:53.290 --> 00:03:56.270
You add a comment, and they get
emailed out, and they get

00:03:56.270 --> 00:03:58.650
observed, and you can resolve
these comments.

00:03:58.650 --> 00:04:02.040
Really powerful collaborative
feature.

00:04:02.040 --> 00:04:06.540
So how would you do that
with the Drive API?

00:04:06.540 --> 00:04:10.490
STEVEN BAZYL: I haven't actually
tried it, but in the

00:04:10.490 --> 00:04:14.090
ACLs and the roles, there are is
additional roles, I think,

00:04:14.090 --> 00:04:16.149
is where commenter is.

00:04:16.149 --> 00:04:18.570
So you should be able to update
the metadata, adding in

00:04:18.570 --> 00:04:23.690
the commenter role into the
additional role set, and in

00:04:23.690 --> 00:04:27.150
theory, that should enable
that for that user.

00:04:27.150 --> 00:04:29.160
ALI AFSHAR: So that's a
fine-grained kind of

00:04:29.160 --> 00:04:31.160
permission tweak.

00:04:31.160 --> 00:04:33.450
Our major permissions are either
you're the owner of a

00:04:33.450 --> 00:04:36.460
file, you can write a file,
or you can read a file.

00:04:36.460 --> 00:04:41.190
But the commenter additional
role allows readers to also be

00:04:41.190 --> 00:04:42.030
able to comment.

00:04:42.030 --> 00:04:44.580
So it gives just this slight
additional role.

00:04:44.580 --> 00:04:47.840
So the answer to this would be
just to add the ACL, well, the

00:04:47.840 --> 00:04:50.520
permission as we now
call it, with the

00:04:50.520 --> 00:04:52.700
additional commenter role.

00:04:52.700 --> 00:04:55.580
STEVEN BAZYL: And what's the
next one that we have?

00:04:55.580 --> 00:04:58.954
ALI AFSHAR: The next question.

00:04:58.954 --> 00:05:00.250
STEVEN BAZYL: Oh,
this is good.

00:05:00.250 --> 00:05:01.280
It's already been answered.

00:05:01.280 --> 00:05:02.390
That was a good one, though.

00:05:02.390 --> 00:05:05.110
ALI AFSHAR: Well, let's
have a look at it.

00:05:05.110 --> 00:05:07.720
Display images which are stored
in Google Drive on a

00:05:07.720 --> 00:05:08.820
public website.

00:05:08.820 --> 00:05:11.980
Is it possible to access display
files, like images,

00:05:11.980 --> 00:05:15.570
which are stored in Google Drive
on a public website?

00:05:15.570 --> 00:05:17.100
So, good question.

00:05:17.100 --> 00:05:17.570
STEVEN BAZYL: Yeah.

00:05:17.570 --> 00:05:17.810
So there are.

00:05:17.810 --> 00:05:22.400
I mean you can certainly
make files public.

00:05:22.400 --> 00:05:26.430
Displaying the actual image,
though, is a little bit more

00:05:26.430 --> 00:05:26.980
complicated.

00:05:26.980 --> 00:05:29.560
If you want to just put it in
an image tag, because of the

00:05:29.560 --> 00:05:30.810
way the images are served.

00:05:32.980 --> 00:05:35.820
Thumbnails, on the other hand,
could be displayed publicly,

00:05:35.820 --> 00:05:43.170
but they are short-lived URLs,
mostly for security reasons.

00:05:43.170 --> 00:05:46.860
But with a little bit of work,
you could make it work.

00:05:46.860 --> 00:05:49.040
ALI AFSHAR: Say if you had an
image, and it was publicly

00:05:49.040 --> 00:05:50.892
shared, how would you
go about embedding

00:05:50.892 --> 00:05:53.980
that in your web app?

00:05:53.980 --> 00:05:55.230
STEVEN BAZYL: That's
a good question.

00:05:58.154 --> 00:05:59.200
That's a very good question.

00:05:59.200 --> 00:06:02.750
The download URL for that, I
think even if it's public,

00:06:02.750 --> 00:06:04.590
though, still requires
authentication.

00:06:09.090 --> 00:06:11.430
Actually, the API does
now support cores.

00:06:11.430 --> 00:06:15.150
You could load the image with
JavaScript and create the

00:06:15.150 --> 00:06:17.570
image tags dynamically.

00:06:17.570 --> 00:06:20.050
Just setting it as a source
attribute I don't think will

00:06:20.050 --> 00:06:21.050
work with that.

00:06:21.050 --> 00:06:22.370
ALI AFSHAR: And you could
do it on your back end.

00:06:22.370 --> 00:06:22.770
STEVEN BAZYL: That's true.

00:06:22.770 --> 00:06:23.010
You're right.

00:06:23.010 --> 00:06:25.450
You could always proxy it
through a server, cache those

00:06:25.450 --> 00:06:29.510
images on your own systems,
and so on.

00:06:29.510 --> 00:06:32.512
ALI AFSHAR: So a bit of
programming using the API.

00:06:32.512 --> 00:06:34.740
STEVEN BAZYL: Something
we could make easier.

00:06:34.740 --> 00:06:35.390
ALI AFSHAR: And something we're

00:06:35.390 --> 00:06:36.540
looking at making easier.

00:06:36.540 --> 00:06:39.370
It would be really nice for
a public image if--

00:06:39.370 --> 00:06:41.750
I mean, how would you feel
about that feature, if we

00:06:41.750 --> 00:06:42.730
could just have a URI?

00:06:42.730 --> 00:06:43.650
STEVEN BAZYL: I think
that would be

00:06:43.650 --> 00:06:44.990
a very useful feature.

00:06:44.990 --> 00:06:48.130
I mean, you could do the same
thing for HTML pages, for

00:06:48.130 --> 00:06:51.460
anything that is a
public resource.

00:06:51.460 --> 00:06:53.740
ALI AFSHAR: Exactly.

00:06:53.740 --> 00:06:55.390
Something I think we can
definitely do better.

00:07:02.040 --> 00:07:03.810
STEVEN BAZYL: This one was
already answered, but there

00:07:03.810 --> 00:07:05.350
are a couple more--

00:07:05.350 --> 00:07:05.900
ALI AFSHAR: Unanswered
questions.

00:07:05.900 --> 00:07:08.070
STEVEN BAZYL: Unanswered ones
that we probably should take a

00:07:08.070 --> 00:07:10.080
look at first.

00:07:10.080 --> 00:07:13.090
ALI AFSHAR: Oh, here's Steve's
favorite question.

00:07:13.090 --> 00:07:16.970
Getting a list of files by
folder on Drive SDK.

00:07:16.970 --> 00:07:20.050
I'm trying to build a web UI
for users to navigate the

00:07:20.050 --> 00:07:22.460
Google Drive and select one
or more documents to be

00:07:22.460 --> 00:07:26.060
referenced later on a website
from a database.

00:07:26.060 --> 00:07:29.420
I'm currently building the
web interface in PHP.

00:07:29.420 --> 00:07:31.750
The problem I'm facing, I can't
find a single function

00:07:31.750 --> 00:07:34.460
to get a list of files
by folder ID.

00:07:34.460 --> 00:07:38.510
So a list of all the files that
are children of a folder.

00:07:38.510 --> 00:07:39.980
STEVEN BAZYL: Yeah, and he
actually does point out in the

00:07:39.980 --> 00:07:43.930
question, there is a child
collection that does let you

00:07:43.930 --> 00:07:46.880
get all the items in a folder.

00:07:46.880 --> 00:07:49.750
But as he points out,
it only returns back

00:07:49.750 --> 00:07:51.990
the ID of the item.

00:07:51.990 --> 00:07:53.880
So if you actually want to get
any information about that,

00:07:53.880 --> 00:07:57.250
you then have to do a separate
request for each file to get

00:07:57.250 --> 00:07:58.960
the metadata.

00:07:58.960 --> 00:08:03.390
So I think as of yesterday,
there is actually a new search

00:08:03.390 --> 00:08:06.900
parameter that you can use
in the files collection.

00:08:06.900 --> 00:08:10.470
And you can query for folders
within a particular parent.

00:08:10.470 --> 00:08:16.590
And I think the format is just
the expression, the ID of the

00:08:16.590 --> 00:08:21.370
parent folder, and
then in parents.

00:08:21.370 --> 00:08:24.300
And that will return back every
item in that parent

00:08:24.300 --> 00:08:28.570
folder with all the metadata
included in a single request.

00:08:28.570 --> 00:08:30.760
Something I actually ran into,
and something I was playing

00:08:30.760 --> 00:08:33.605
with, and I'm very happy
that feature got added.

00:08:36.360 --> 00:08:38.140
ALI AFSHAR: Our query format's
pretty cool, so you can

00:08:38.140 --> 00:08:39.150
combine these things.

00:08:39.150 --> 00:08:41.710
So if you just want folders
that are within a certain

00:08:41.710 --> 00:08:44.370
folder, you ask for that.

00:08:44.370 --> 00:08:47.970
So it's quite powerful, and this
is the latest feature as

00:08:47.970 --> 00:08:49.530
of yesterday.

00:08:49.530 --> 00:08:52.800
And we should bring
attention to this.

00:08:52.800 --> 00:08:54.990
We're really keen about telling
you about our least

00:08:54.990 --> 00:08:56.520
feature and what's changing
in the API.

00:08:56.520 --> 00:09:00.460
So we do have a release notes
that we usually publish every

00:09:00.460 --> 00:09:02.970
week or every other week
with the changes.

00:09:02.970 --> 00:09:05.040
And that that's in our
documentation, so if you've

00:09:05.040 --> 00:09:08.620
got any doubts or any interest
in what's changed recently, or

00:09:08.620 --> 00:09:11.270
what the recent features have
been, please, by all means, go

00:09:11.270 --> 00:09:12.320
and check that out.

00:09:12.320 --> 00:09:13.350
STEVEN BAZYL: Yeah, and
things are still

00:09:13.350 --> 00:09:14.470
moving pretty quickly.

00:09:14.470 --> 00:09:19.370
None of these are changes that
break anything, but as we get

00:09:19.370 --> 00:09:21.720
more feedback from developers,
particularly because the API

00:09:21.720 --> 00:09:24.405
is so new, we are adding
features at

00:09:24.405 --> 00:09:25.990
a pretty good pace.

00:09:25.990 --> 00:09:28.715
So definitely something
to keep a watch on.

00:09:31.330 --> 00:09:32.450
What else do we have?

00:09:32.450 --> 00:09:33.700
ALI AFSHAR: Let's have a look.

00:09:39.700 --> 00:09:41.760
A Documents List API question.

00:09:41.760 --> 00:09:44.770
How to get the field type
from AtomFeed returned

00:09:44.770 --> 00:09:48.250
by Google list URL?

00:09:48.250 --> 00:09:50.920
I guess that means the Google
Documents List API.

00:09:50.920 --> 00:09:56.400
Whatever AtomFeed returned by
Google URL, I'm able to fetch

00:09:56.400 --> 00:09:58.490
for column name but
not its type.

00:09:58.490 --> 00:10:01.895
Is there any way to get the
data type of this column?

00:10:01.895 --> 00:10:03.500
Do you know what that means?

00:10:03.500 --> 00:10:08.390
I think it means the actual
type that the chunk of XML

00:10:08.390 --> 00:10:09.780
would map to.

00:10:09.780 --> 00:10:11.015
How did you do that?

00:10:11.015 --> 00:10:12.110
STEVEN BAZYL: Yeah, it's
a good question.

00:10:12.110 --> 00:10:15.200
That would probably just
be in the schema for

00:10:15.200 --> 00:10:17.670
that particular API.

00:10:17.670 --> 00:10:19.250
ALI AFSHAR: It's kind of more
interesting with the Drive

00:10:19.250 --> 00:10:21.040
API, because you would have
the same problem if

00:10:21.040 --> 00:10:21.890
you just parse it.

00:10:21.890 --> 00:10:25.110
Of course it's JSON rather than
XML by default, but each

00:10:25.110 --> 00:10:32.105
of these resources has a kind
field that's called.

00:10:32.105 --> 00:10:34.360
STEVEN BAZYL: Yeah, each of the
JSON objects has a kind,

00:10:34.360 --> 00:10:37.010
which basically is
the object type.

00:10:37.010 --> 00:10:41.300
Basically with JSON, it's
roughly, loosely typed.

00:10:41.300 --> 00:10:45.550
Integers are integers, but
some of the string types,

00:10:45.550 --> 00:10:48.310
there's a lot of nuances
in-- is it a URL?

00:10:48.310 --> 00:10:51.540
Is it just arbitrary text?

00:10:51.540 --> 00:10:54.340
But the Atom stuff, all that
information about typing would

00:10:54.340 --> 00:10:59.442
be in the schema itself for
that particular API.

00:10:59.442 --> 00:11:02.880
ALI AFSHAR: Yeah, as much
as we really want

00:11:02.880 --> 00:11:04.770
to say on that one.

00:11:04.770 --> 00:11:06.980
Some of the client libraries use
this type of information,

00:11:06.980 --> 00:11:08.515
some of them don't.

00:11:08.515 --> 00:11:11.830
Let me think of one that does.

00:11:11.830 --> 00:11:16.820
So that the object of C library
actually registers a

00:11:16.820 --> 00:11:19.690
programming type for each of
the JSON types, and then it

00:11:19.690 --> 00:11:20.420
does it like that.

00:11:20.420 --> 00:11:23.580
But the Python one totally
ignores it, for example.

00:11:23.580 --> 00:11:24.500
STEVEN BAZYL: That's true.

00:11:24.500 --> 00:11:28.920
Actually, I think the Ruby one
is a little bit more flexible.

00:11:28.920 --> 00:11:31.680
It will do either format,
strings or integers, or

00:11:31.680 --> 00:11:33.760
whatever type you
want to give it.

00:11:33.760 --> 00:11:36.120
But that's one of the cool
things with the new API is the

00:11:36.120 --> 00:11:38.300
discovery information.

00:11:38.300 --> 00:11:42.160
The old Atom one was based on
XML schema, the new API, the

00:11:42.160 --> 00:11:46.220
Drive API in particular, it does
have a schema document,

00:11:46.220 --> 00:11:47.730
but it's in JSON.

00:11:47.730 --> 00:11:51.430
And you can actually look at
those for the API and get very

00:11:51.430 --> 00:11:56.050
detailed information about the
structure of each item in

00:11:56.050 --> 00:11:58.080
there, what the types
are, and so on.

00:11:58.080 --> 00:12:00.490
And some of our client libraries
will actually use

00:12:00.490 --> 00:12:04.200
that to give nice, strongly
typed representations for all

00:12:04.200 --> 00:12:05.850
the objects.

00:12:05.850 --> 00:12:08.050
ALI AFSHAR: We're not just
trying to be inconsistent with

00:12:08.050 --> 00:12:08.940
the client libraries.

00:12:08.940 --> 00:12:13.080
I think they're built to suit
the language specifically.

00:12:13.080 --> 00:12:18.600
So Java would be crazy without
this static typing.

00:12:18.600 --> 00:12:23.905
STEVEN BAZYL: Java, .NET,
Objective C, those are all a

00:12:23.905 --> 00:12:25.560
little bit more strongly
typed.

00:12:25.560 --> 00:12:26.510
ALI AFSHAR: Go.

00:12:26.510 --> 00:12:27.000
STEVEN BAZYL: Gp.

00:12:27.000 --> 00:12:28.560
ALI AFSHAR: But to do that
in the JavaScript

00:12:28.560 --> 00:12:30.290
library would be insane.

00:12:30.290 --> 00:12:31.710
STEVEN BAZYL: You're not going
to have that in JavaScript or

00:12:31.710 --> 00:12:33.990
Python, or even Ruby,
or some of the

00:12:33.990 --> 00:12:35.065
other dynamic languages.

00:12:35.065 --> 00:12:37.210
ALI AFSHAR: So you may notice
we have client libraries for

00:12:37.210 --> 00:12:39.070
all these languages.

00:12:39.070 --> 00:12:40.320
Please go ahead and use them.

00:12:42.708 --> 00:12:45.320
All right, a question about
resumable upload.

00:12:45.320 --> 00:12:48.570
While resuming upload, getting
the size of data that had been

00:12:48.570 --> 00:12:53.110
uploaded always fails with a
500 Internal Server error.

00:12:53.110 --> 00:12:54.330
I was looking at this today.

00:12:54.330 --> 00:12:58.660
I think it's a bug, actually,
so we should look at that.

00:12:58.660 --> 00:13:01.840
But the cool thing about
resumable upload is that if

00:13:01.840 --> 00:13:06.060
your upload fails during
uploading a file, at any point

00:13:06.060 --> 00:13:09.620
you can then later query the
server and ask, how much have

00:13:09.620 --> 00:13:10.650
I uploaded?

00:13:10.650 --> 00:13:12.430
And we will return an answer.

00:13:12.430 --> 00:13:16.180
And this is a question of, how
do we perform that query?

00:13:16.180 --> 00:13:18.510
The client libraries
have it built in.

00:13:18.510 --> 00:13:22.060
He's actually using the Java
library, which is doing the

00:13:22.060 --> 00:13:22.530
right thing.

00:13:22.530 --> 00:13:26.090
And I tried it today, and I
can't reproduce this error.

00:13:26.090 --> 00:13:28.900
So it's either a bug or
something we're not doing

00:13:28.900 --> 00:13:30.140
quite right.

00:13:30.140 --> 00:13:32.020
STEVEN BAZYL: And it is a 500
error, which does indicate

00:13:32.020 --> 00:13:35.630
there was something probably
wrong with that particular

00:13:35.630 --> 00:13:38.060
request or that file, but
something to look at.

00:13:38.060 --> 00:13:40.950
ALI AFSHAR: So in general, if
you get 500 errors doing stuff

00:13:40.950 --> 00:13:45.110
like this, the recommendation
is to retry.

00:13:45.110 --> 00:13:47.780
STEVEN BAZYL: Could be just
a transient error.

00:13:47.780 --> 00:13:50.560
And usually, if it is something
wrong with the

00:13:50.560 --> 00:13:54.410
request itself, you'll get back
an error message in the

00:13:54.410 --> 00:13:59.270
body itself that it is actually
pretty indicative of

00:13:59.270 --> 00:14:00.190
what the issue is.

00:14:00.190 --> 00:14:01.900
ALI AFSHAR: So it
should be a 400.

00:14:01.900 --> 00:14:03.060
STEVEN BAZYL: It should
be, yeah.

00:14:03.060 --> 00:14:06.100
ALI AFSHAR: And we're trying to
get better at giving useful

00:14:06.100 --> 00:14:07.160
error messages.

00:14:07.160 --> 00:14:10.860
We just had some changes last
week to try and just trying to

00:14:10.860 --> 00:14:12.870
explain what you're doing
wrong in the request.

00:14:12.870 --> 00:14:15.270
And we do appreciate this is
something we haven't been

00:14:15.270 --> 00:14:18.070
entirely great at, so we're
trying to improve.

00:14:18.070 --> 00:14:21.550
One word, if you do get a 400
error with no information on

00:14:21.550 --> 00:14:24.430
why, please get in touch with
us, because that's the kind of

00:14:24.430 --> 00:14:27.460
error that we want to tag some
useful information so you know

00:14:27.460 --> 00:14:29.060
what you're doing wrong.

00:14:29.060 --> 00:14:31.460
Of course, 500s should never
really happen, should they?

00:14:31.460 --> 00:14:32.510
STEVEN BAZYL: No.

00:14:32.510 --> 00:14:35.780
On the resumable uploads,
you mentioned if

00:14:35.780 --> 00:14:37.880
it does fail, retry.

00:14:37.880 --> 00:14:41.390
But there is a set period
of time, though, right?

00:14:41.390 --> 00:14:42.760
You can't just keep
retrying forever.

00:14:42.760 --> 00:14:44.130
ALI AFSHAR: Right.

00:14:44.130 --> 00:14:47.600
STEVEN BAZYL: Do you happen to
know how long those uploads

00:14:47.600 --> 00:14:49.360
are resumable for?

00:14:49.360 --> 00:14:50.470
ALI AFSHAR: I don't
know exactly.

00:14:50.470 --> 00:14:53.170
I believe it's in the order
of hours, where that

00:14:53.170 --> 00:14:54.310
session will remain.

00:14:54.310 --> 00:14:58.330
But I certainly wouldn't
try the next day.

00:14:58.330 --> 00:14:59.690
STEVEN BAZYL: That, most
likely, will fail.

00:14:59.690 --> 00:15:00.535
ALI AFSHAR: Yeah.

00:15:00.535 --> 00:15:02.930
But they stick around
for a bit.

00:15:02.930 --> 00:15:04.670
And that's so that you
can upload huge

00:15:04.670 --> 00:15:07.980
files, up to 10 gigabytes.

00:15:07.980 --> 00:15:09.610
STEVEN BAZYL: There was
another interesting

00:15:09.610 --> 00:15:13.690
conversation on the resumable
stuff, that I'm not entirely

00:15:13.690 --> 00:15:16.410
sure if each of the client
libraries does this the way

00:15:16.410 --> 00:15:19.070
that it's really meant
to be used.

00:15:21.920 --> 00:15:23.750
Some people tend to
use resumable for

00:15:23.750 --> 00:15:25.660
chunking their uploads.

00:15:25.660 --> 00:15:27.480
But it turns out that's
actually not the

00:15:27.480 --> 00:15:28.660
way that we'd recommend.

00:15:28.660 --> 00:15:32.500
We'd actually recommend trying
to upload the entire file in

00:15:32.500 --> 00:15:36.610
one shot, and then only resuming
in the case it fails.

00:15:36.610 --> 00:15:39.280
But I do there's a couple of
the libraries that don't

00:15:39.280 --> 00:15:41.000
actually do that by default.

00:15:41.000 --> 00:15:41.700
ALI AFSHAR: That's right.

00:15:41.700 --> 00:15:45.120
And chunking is really useful in
situations where you have a

00:15:45.120 --> 00:15:48.130
limited amount of time, or you
have to defer the upload to a

00:15:48.130 --> 00:15:52.540
task queue, or this kind of
thing, web server platforms,

00:15:52.540 --> 00:15:53.900
that kind of thing.

00:15:53.900 --> 00:15:56.810
But actually, we don't
recommend it's done.

00:15:56.810 --> 00:15:59.390
I think Python is one
library which

00:15:59.390 --> 00:16:00.860
uses chunking by default.

00:16:00.860 --> 00:16:01.120
STEVEN BAZYL: Yeah.

00:16:01.120 --> 00:16:03.636
And I know the Ruby one
as well does that.

00:16:03.636 --> 00:16:05.960
Something on my to
do list to fix.

00:16:05.960 --> 00:16:08.120
ALI AFSHAR: So Steve is the
maintainer for the Ruby

00:16:08.120 --> 00:16:10.210
library, so if you have
any problems with it.

00:16:10.210 --> 00:16:11.070
STEVEN BAZYL: That's right.

00:16:11.070 --> 00:16:12.994
You can come and just
yell at me.

00:16:12.994 --> 00:16:14.244
That's all right.

00:16:16.368 --> 00:16:17.270
Let's see.

00:16:17.270 --> 00:16:19.360
Can't retrieve--

00:16:19.360 --> 00:16:21.710
ALI AFSHAR: Can't retrieve
file metadata from Google

00:16:21.710 --> 00:16:23.800
Drive, comma, 404.

00:16:23.800 --> 00:16:26.120
I'm having some seriously
weird issues with the

00:16:26.120 --> 00:16:27.240
Google Drive API.

00:16:27.240 --> 00:16:29.270
We're sorry about that
to start with.

00:16:29.270 --> 00:16:30.130
Bear with me here.

00:16:30.130 --> 00:16:31.360
There's a lot to explain.

00:16:31.360 --> 00:16:33.090
Oh, goodness.

00:16:33.090 --> 00:16:33.450
STEVEN BAZYL: All right.

00:16:33.450 --> 00:16:34.590
So he has an account.

00:16:34.590 --> 00:16:35.490
ALI AFSHAR: He has an account.

00:16:35.490 --> 00:16:37.150
He got the API working.

00:16:42.730 --> 00:16:43.320
All right.

00:16:43.320 --> 00:16:44.760
STEVEN BAZYL: I think I know
what the issue is.

00:16:44.760 --> 00:16:46.160
ALI AFSHAR: I know what the
issue is already as well,

00:16:46.160 --> 00:16:47.580
actually, and I think
I've actually

00:16:47.580 --> 00:16:49.230
commented on this one.

00:16:49.230 --> 00:16:51.860
So using the picker?

00:16:56.220 --> 00:16:58.013
Well go on then, if you
know what it is.

00:16:58.013 --> 00:17:00.330
STEVEN BAZYL: Well I didn't read
the whole thing, but I'm

00:17:00.330 --> 00:17:02.290
guessing he's using
the file scope.

00:17:02.290 --> 00:17:06.089
I saw a comment in there about
changing his app ID.

00:17:06.089 --> 00:17:08.900
ALI AFSHAR: So he was using the
file scope, and when he

00:17:08.900 --> 00:17:13.230
changed it to the full scope,
it started to work.

00:17:13.230 --> 00:17:17.890
But actually, he's
using the picker.

00:17:17.890 --> 00:17:20.630
So before we go into this one--
and this might take the

00:17:20.630 --> 00:17:22.240
full of our time remaining--

00:17:22.240 --> 00:17:24.260
but can you explain the
difference between the file

00:17:24.260 --> 00:17:25.849
scope and the full scope?

00:17:25.849 --> 00:17:27.510
STEVEN BAZYL: Sure.

00:17:27.510 --> 00:17:29.790
So the file scope is something
that we added when we first

00:17:29.790 --> 00:17:32.080
launched the Drive API
a few months ago.

00:17:32.080 --> 00:17:36.300
And it's something that we
actually encourage people to

00:17:36.300 --> 00:17:40.680
use if it's their use cases,
and actually try to make it

00:17:40.680 --> 00:17:42.900
for their use cases
as best they can.

00:17:42.900 --> 00:17:44.910
But the idea is simple.

00:17:44.910 --> 00:17:49.290
Rather than have all your
applications request access to

00:17:49.290 --> 00:17:51.360
everything that a user has in
their Drive account, which

00:17:51.360 --> 00:17:54.360
could be a lot of things which
aren't relevant to that

00:17:54.360 --> 00:17:54.670
application.

00:17:54.670 --> 00:17:56.085
It could be a lot of files that

00:17:56.085 --> 00:17:57.620
are potentially sensitive.

00:17:57.620 --> 00:18:00.310
It could be financial
records or so on.

00:18:00.310 --> 00:18:03.920
The file scope allows the user
to give access only to those

00:18:03.920 --> 00:18:07.650
files that they choose to share
with that application or

00:18:07.650 --> 00:18:10.650
that that application
created by itself.

00:18:10.650 --> 00:18:14.140
So it's much more restrictive,
much more secure for users,

00:18:14.140 --> 00:18:18.060
because they know that that
application only has access to

00:18:18.060 --> 00:18:19.385
a very limited set
of information.

00:18:21.950 --> 00:18:24.390
For that to work, however, there
are some things that

00:18:24.390 --> 00:18:25.310
have to happen.

00:18:25.310 --> 00:18:30.870
So for us to be able to mark a
file as being openable by an

00:18:30.870 --> 00:18:35.620
app, we need some action to
tell us, and that's either

00:18:35.620 --> 00:18:40.070
when the user clicks on a file
in the Drive UI, and they say,

00:18:40.070 --> 00:18:43.780
open this file in an app, or
if it's something that was

00:18:43.780 --> 00:18:47.730
created in the API, or in this
other, what we call a picker,

00:18:47.730 --> 00:18:50.200
which is an embeddable
Drive UI.

00:18:50.200 --> 00:18:52.500
It's a JavaScript component.

00:18:52.500 --> 00:18:55.280
Any of those things give us an
indication that that user

00:18:55.280 --> 00:18:59.500
decided it's OK for this
app to read that file.

00:18:59.500 --> 00:19:00.490
So that's the scope.

00:19:00.490 --> 00:19:03.630
The other is, of course, the
full Drive scope, which gives

00:19:03.630 --> 00:19:07.040
you access to anything, whether
or not the user

00:19:07.040 --> 00:19:10.200
explicitly made that
action or not.

00:19:10.200 --> 00:19:15.280
ALI AFSHAR: And so in this case,
the developer is using

00:19:15.280 --> 00:19:18.350
the picker, but then once he's
used the picker to select a

00:19:18.350 --> 00:19:20.840
file, he's not actually
getting access

00:19:20.840 --> 00:19:22.090
with the file scope.

00:19:24.190 --> 00:19:27.290
So that thing that you've just
described is not happening.

00:19:27.290 --> 00:19:30.060
Now this is usually because
of one of two reasons.

00:19:30.060 --> 00:19:32.760
And the first one is that
there's a bug, which I don't

00:19:32.760 --> 00:19:34.100
think it is in this case.

00:19:34.100 --> 00:19:37.150
The second reason is the
picker is a JavaScript

00:19:37.150 --> 00:19:39.730
component that runs inside your
browser, so that's really

00:19:39.730 --> 00:19:42.740
subject to what cookies you've
got, if you're multiply logged

00:19:42.740 --> 00:19:44.460
in with multiple users.

00:19:44.460 --> 00:19:46.460
And that's what I think
has happened here.

00:19:46.460 --> 00:19:49.300
This file that he's testing
with is actually shared

00:19:49.300 --> 00:19:52.440
between both users.

00:19:52.440 --> 00:19:55.450
And I think the JavaScript
component is being loaded with

00:19:55.450 --> 00:19:58.550
the wrong user or using the
wrong cookies, so he's

00:19:58.550 --> 00:20:00.360
actually giving access
so the wrong user.

00:20:00.360 --> 00:20:02.190
Now, there is a way
around that.

00:20:02.190 --> 00:20:06.057
STEVEN BAZYL: There is an option
to explicitly share the

00:20:06.057 --> 00:20:08.640
picker for a user, and they
can just set user.

00:20:08.640 --> 00:20:10.000
ALI AFSHAR: Set auth
user, maybe?

00:20:10.000 --> 00:20:10.685
STEVEN BAZYL: Yeah,
that's right.

00:20:10.685 --> 00:20:15.290
Set auth user, which you
just give it, is

00:20:15.290 --> 00:20:15.960
it the email address?

00:20:15.960 --> 00:20:17.310
ALI AFSHAR: I think you can give
it the email address or

00:20:17.310 --> 00:20:20.790
the user ID, as we call it,
and soon we'll be able to

00:20:20.790 --> 00:20:23.236
parse in an OAuth
token as well.

00:20:23.236 --> 00:20:26.110
STEVEN BAZYL: That's a
good feature then.

00:20:26.110 --> 00:20:27.510
There's a couple other
things that could go

00:20:27.510 --> 00:20:29.430
wrong with the picker.

00:20:29.430 --> 00:20:32.640
So in addition to multi-logon
issues, where you're logged in

00:20:32.640 --> 00:20:34.277
with two accounts and you might
be showing the wrong

00:20:34.277 --> 00:20:39.710
one, also, you do need to set
your app ID in the JavaScript

00:20:39.710 --> 00:20:40.980
when you build a picker.

00:20:40.980 --> 00:20:43.910
So if you're not setting the
correct app ID or omitted it,

00:20:43.910 --> 00:20:47.440
then we don't know which
app we should actually

00:20:47.440 --> 00:20:48.920
set that bit for.

00:20:48.920 --> 00:20:50.930
So there's a couple things
you have to get right.

00:20:50.930 --> 00:20:55.350
Make sure it's the right user,
make sure it's the right app,

00:20:55.350 --> 00:20:58.590
and I don't think there's
any origin issues,

00:20:58.590 --> 00:21:00.190
but there may be.

00:21:00.190 --> 00:21:02.040
I know that we actually
have a--

00:21:02.040 --> 00:21:05.920
a a component to this, we have
a sharing dialogue, which

00:21:05.920 --> 00:21:08.900
actually just launched
about two weeks ago.

00:21:08.900 --> 00:21:12.040
And I know that one, actually,
is very sensitive to

00:21:12.040 --> 00:21:17.360
JavaScript origins, making sure
that the URL of the page

00:21:17.360 --> 00:21:21.450
that's showing that dialogue
matches either the open or the

00:21:21.450 --> 00:21:24.850
create URLS for the app.

00:21:24.850 --> 00:21:27.720
Picker may be sensitive
to that as well.

00:21:27.720 --> 00:21:28.730
ALI AFSHAR: Right, I
didn't know that.

00:21:28.730 --> 00:21:31.440
See, the picker, of course, we
can use with other things it's

00:21:31.440 --> 00:21:34.000
not just Drive you can
use with images and--

00:21:34.000 --> 00:21:35.720
STEVEN BAZYL: Actually, it's a
really cool little component.

00:21:35.720 --> 00:21:40.880
You can do image search, maps,
even, a whole bunch of things

00:21:40.880 --> 00:21:42.220
that it supports.

00:21:42.220 --> 00:21:44.330
ALI AFSHAR: With a good
customizable UI, you can show

00:21:44.330 --> 00:21:48.310
a list or thumbnails,
and you can turn off

00:21:48.310 --> 00:21:51.070
the menu on the side.

00:21:51.070 --> 00:21:54.430
It's a good, well-styled
component that I think just

00:21:54.430 --> 00:21:57.040
shows that your application
is using Google

00:21:57.040 --> 00:21:58.550
Drive in a good way.

00:21:58.550 --> 00:21:59.810
So we like it.

00:21:59.810 --> 00:22:01.060
Please use it.

00:22:03.130 --> 00:22:05.062
Should we end there?

00:22:05.062 --> 00:22:06.730
STEVEN BAZYL: Yeah, seems
like a good--

00:22:06.730 --> 00:22:07.410
ALI AFSHAR: Good place to end?

00:22:07.410 --> 00:22:08.780
STEVEN BAZYL: Good
stopping point.

00:22:08.780 --> 00:22:12.250
Of course we'll go back and
actually answer all of these

00:22:12.250 --> 00:22:13.160
on Stack Overflow.

00:22:13.160 --> 00:22:14.910
ALI AFSHAR: Unless someone wants
lots of points, in which

00:22:14.910 --> 00:22:16.970
case you would have
taken notes and go

00:22:16.970 --> 00:22:17.630
and answer them now.

00:22:17.630 --> 00:22:18.245
STEVEN BAZYL: That's right.

00:22:18.245 --> 00:22:21.660
You can jump in right now before
we go and get yourself

00:22:21.660 --> 00:22:24.140
some Stack Overflow cred.

00:22:24.140 --> 00:22:26.430
ALI AFSHAR: So please, please,
if you do have questions,

00:22:26.430 --> 00:22:28.460
please ask them on
Stack Overflow.

00:22:28.460 --> 00:22:32.340
We do take a lot of time
and attention to this,

00:22:32.340 --> 00:22:34.820
so please do that.

00:22:34.820 --> 00:22:38.270
That's the best way of getting
things solved.

00:22:38.270 --> 00:22:38.770
STEVEN BAZYL: Yeah.

00:22:38.770 --> 00:22:41.780
And we'll be back for another
one of these, is it later this

00:22:41.780 --> 00:22:43.400
week, or next week?

00:22:43.400 --> 00:22:43.820
ALI AFSHAR: Next week.

00:22:43.820 --> 00:22:45.050
STEVEN BAZYL: Next week.

00:22:45.050 --> 00:22:48.280
So we'll hopefully
see everyone.

00:22:48.280 --> 00:22:50.620
Well, we won't see you, but
hopefully you'll see us.

00:22:50.620 --> 00:22:55.430
And maybe one of these, we'll
have an interactive Hangout,

00:22:55.430 --> 00:22:59.130
invite some people in, some
other developers, and people

00:22:59.130 --> 00:23:01.415
to talk about what they've
been doing with Drive.

00:23:01.415 --> 00:23:02.870
ALI AFSHAR: That
would be great.

00:23:02.870 --> 00:23:03.190
STEVEN BAZYL: All right.

00:23:03.190 --> 00:23:03.770
Thank you very much.

00:23:03.770 --> 00:23:04.440
ALI AFSHAR: Thank
you very much.

00:23:04.440 --> 00:23:05.690
Take care.

