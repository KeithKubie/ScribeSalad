WEBVTT
Kind: captions
Language: en

00:00:00.470 --> 00:00:02.410
MANDY WAITE: I want to develop
a RESTful web service using

00:00:02.410 --> 00:00:05.223
Google App Engine that's
consumed by my web application

00:00:05.223 --> 00:00:05.970
[? management in a ?]

00:00:05.970 --> 00:00:07.750
different domain.

00:00:07.750 --> 00:00:10.520
How do I restrict the calls only
to my web application?

00:00:10.520 --> 00:00:12.360
What are the best practices?

00:00:12.360 --> 00:00:13.280
FRED SAUER: OK.

00:00:13.280 --> 00:00:18.170
So this is a question of cross
domain, or what standards like

00:00:18.170 --> 00:00:21.400
to refer to, cross
origin requests.

00:00:21.400 --> 00:00:24.340
So if you look on the W3C
webpages, you'll find

00:00:24.340 --> 00:00:27.630
something called CORS, C-O-R-S,
and it stands for

00:00:27.630 --> 00:00:34.330
Cross Origin Request Source.

00:00:34.330 --> 00:00:37.360
I forget the abbreviation,
I use it too much.

00:00:37.360 --> 00:00:38.100
MANDY WAITE: It's called
CORS, isn't it?

00:00:38.100 --> 00:00:40.220
FRED SAUER: Cross Origin
Requests Sharing, I believe,

00:00:40.220 --> 00:00:42.310
is what the actual
abbreviation is.

00:00:42.310 --> 00:00:45.410
And basically, this is a
mechanism whereby servers and

00:00:45.410 --> 00:00:50.070
browsers agree on how to
communicate the domain of the

00:00:50.070 --> 00:00:53.660
website that is making the
request to the server, and for

00:00:53.660 --> 00:00:56.170
the server to either grant
access to that

00:00:56.170 --> 00:00:58.250
content or forbid it.

00:00:58.250 --> 00:01:02.190
And what you do is when you set
up simple resources, like

00:01:02.190 --> 00:01:06.230
even images in an image tag, or
when you make an XML HTTP

00:01:06.230 --> 00:01:09.360
request, you can specify
that that request is a

00:01:09.360 --> 00:01:10.550
cross origin request.

00:01:10.550 --> 00:01:13.990
So it's headed for a domain
other than the one that the

00:01:13.990 --> 00:01:15.620
website's running on.

00:01:15.620 --> 00:01:20.730
So maybe your website's on
migrateapp.com, and the back

00:01:20.730 --> 00:01:22.680
end service that you're
connecting to in App Engine is

00:01:22.680 --> 00:01:24.265
actually on
migratebackendservice.com.

00:01:26.862 --> 00:01:30.510
And you can do that, but you
have to set this extra flag in

00:01:30.510 --> 00:01:33.920
your HTML, in your JavaScript to
make cross origin request.

00:01:33.920 --> 00:01:38.330
And then on the server for a
get request, there'll be an

00:01:38.330 --> 00:01:41.910
extra HTTP header coming in,
that's the origin header.

00:01:41.910 --> 00:01:44.900
And this is an indication to the
server that this request

00:01:44.900 --> 00:01:46.070
came from another origin.

00:01:46.070 --> 00:01:48.620
And right then you can make the
decision in your request

00:01:48.620 --> 00:01:52.040
handler whether or not you want
to allow that request.

00:01:52.040 --> 00:01:55.060
And you do that by sending
another response back, which

00:01:55.060 --> 00:02:00.650
is the access control cross
origin allow, and you can

00:02:00.650 --> 00:02:03.600
specify the domains
that are allowed.

00:02:03.600 --> 00:02:07.220
If you make a post request or
a put request, then the

00:02:07.220 --> 00:02:09.410
browser will do something even
smarter than that, it will

00:02:09.410 --> 00:02:12.710
send what's called a pre-flag
request, and will send a

00:02:12.710 --> 00:02:15.880
request in advance and get
permission before it actually

00:02:15.880 --> 00:02:17.560
does the submission.

00:02:17.560 --> 00:02:21.610
So the short answer to this
question is there are existing

00:02:21.610 --> 00:02:24.620
standards to do this, it's
very easy to do.

00:02:24.620 --> 00:02:28.050
Just look up or CORS,
C-O-R-S, and

00:02:28.050 --> 00:02:29.280
implement the details there.

00:02:29.280 --> 00:02:31.230
You can do that in your request
handler and your HTML

00:02:31.230 --> 00:02:33.110
app, and you should
be good to go.

