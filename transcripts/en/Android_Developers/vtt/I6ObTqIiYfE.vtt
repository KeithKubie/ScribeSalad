WEBVTT
Kind: captions
Language: en

00:00:00.269 --> 00:00:05.120
&gt;&gt; MORRILL: Hi. I'm Dan Morrill with Google
developer programs. I bet by now you've seen

00:00:05.120 --> 00:00:09.030
the application demos that we've posted online,
and I hope you're as excited by them as we

00:00:09.030 --> 00:00:14.170
are. But if you are a developer, you know
there's more to it than just a fancy demo.

00:00:14.170 --> 00:00:18.580
It has to be easy to build those applications
as well. And that's what I'm here today to

00:00:18.580 --> 00:00:23.580
show you. I'm going to build an application
for Android using nothing but the tools that

00:00:23.580 --> 00:00:28.650
are included in our SDK. Let's get started.
The first thing we have to do is create a

00:00:28.650 --> 00:00:34.090
new project. See, I'm using Eclipse, and to
create the project, I just go to file, project.

00:00:34.090 --> 00:00:38.880
And the project I'm going to create is an
Android project. The project name can be whatever

00:00:38.880 --> 00:00:44.210
you want. In this case I'm going to call it,
HelloAndroid. The package name, I am today

00:00:44.210 --> 00:00:49.730
entering as com.google.android.hello, but
of course that's in our company's name space

00:00:49.730 --> 00:00:53.480
and you should feel free to use whatever name
space is appropriate for your organization.

00:00:53.480 --> 00:01:00.570
The activity name is going to be HelloAndroid
as well. The application name is the human

00:01:00.570 --> 00:01:04.609
readable name of your application and this
is what will appear in the title bar and window

00:01:04.609 --> 00:01:08.859
and so on. So once we've entered that data,
we go ahead and click finish and there's our

00:01:08.859 --> 00:01:14.359
application. What did this create? Well, if
you look in the tree over here, you'll see

00:01:14.359 --> 00:01:19.969
that we have a source directory, including
the file, HelloAndroid.java. This is the entry

00:01:19.969 --> 00:01:23.859
point file to the application. This is the
class that Android runs when you start the

00:01:23.859 --> 00:01:28.249
application. Let's build an application that
knows how to dial the phone. Specifically,

00:01:28.249 --> 00:01:32.509
let's build an application that lists everyone
in my contact list, lets me scroll around,

00:01:32.509 --> 00:01:36.279
choose one, and then when I select it, it
goes ahead and dials that phone number. Let's

00:01:36.279 --> 00:01:40.969
see how that's built. The first thing that
we want to do is check out this file over

00:01:40.969 --> 00:01:47.829
here called main.xml in the layout directory.
This file is what we refer to as an XML-based

00:01:47.829 --> 00:01:54.159
layout. So, in this file, as you can see right
now, it has only a single text view that just

00:01:54.159 --> 00:01:58.060
displays some Hello World text. So the first
thing we want to do is change that text so

00:01:58.060 --> 00:02:04.060
that it no longer says, "Hello World" and
instead has this label instead called Name.

00:02:04.060 --> 00:02:09.430
Then we're going to copy that, because we
want two of these. And then once we've copied

00:02:09.430 --> 00:02:13.890
that, we're going to move down a little bit
and paste it and now we've got two copies

00:02:13.890 --> 00:02:17.600
of it. For the second copy, we're going to
remove this text because we don't want it

00:02:17.600 --> 00:02:22.250
to have fixed text. In this case, we want
it to have an ID instead because we're going

00:02:22.250 --> 00:02:28.780
to refer to the ID from our source code. And
so there we are. Now, we've got our XML-based

00:02:28.780 --> 00:02:32.180
layout file. Well, first thing that we need
to do is come up here to the HelloAndroid

00:02:32.180 --> 00:02:37.920
class. Currently, it implements or extends
the class activity. We actually need it to

00:02:37.920 --> 00:02:43.940
extend a different class called ListActivity.
ListActivity is a convenient subclass that

00:02:43.940 --> 00:02:48.110
really just says, "I'm going to display a
list or any information." And it's got a whole

00:02:48.110 --> 00:02:52.790
bunch of useful methods that we can take advantage
of for this application so that we don't have

00:02:52.790 --> 00:02:57.500
to write them ourselves. The first thing that
we're going to do is get access to some data.

00:02:57.500 --> 00:03:02.390
The Android way of doing that is to use what's
known as a content provider. We get access

00:03:02.390 --> 00:03:06.620
to the content provider system via this method
call here. And what that does is it lets us

00:03:06.620 --> 00:03:11.560
issue a query. In this case, we're querying
the system for the entire list of contacts

00:03:11.560 --> 00:03:17.250
that are available on the phone. In response,
we get a Cursor. The Cursor is what we use

00:03:17.250 --> 00:03:23.110
to actually access specific data from the
query that we requested. Now, we have to tell

00:03:23.110 --> 00:03:27.140
the UI exactly what we want to display because,
of course, the contact list consists of a

00:03:27.140 --> 00:03:30.670
lot more than just, say, first name and the
phone number. It might also have an email

00:03:30.670 --> 00:03:36.100
address or a mobile phone number and a home
phone number and so on. So what we're going

00:03:36.100 --> 00:03:45.569
to do is create a mapping. And the mapping
tells us which column or name in the content

00:03:45.569 --> 00:03:50.710
provider that we want to map to which UI element.
And so, in this specific case, we want to

00:03:50.710 --> 00:03:57.569
say "people.name," which is to say the person's
name gets mapped to the entry that we called

00:03:57.569 --> 00:04:01.930
row entry in our XML layout. And so just to
refresh your memory, I'll switch back to that

00:04:01.930 --> 00:04:08.010
file and show you right here. You can see
that we have an ID that we created and called

00:04:08.010 --> 00:04:15.430
row entry. And then, we call this method setListAdapter
and the ListAdapter itself is an instance

00:04:15.430 --> 00:04:19.509
of another class called SimpleCursorAdapter
and that's a class that really has all the

00:04:19.509 --> 00:04:24.129
smarts and all the logic in it to make use
of the mapping that we just declared. So to

00:04:24.129 --> 00:04:29.580
summarize this method real quick, first, we
get the data. Then we map the data from the

00:04:29.580 --> 00:04:34.060
data source to the user interface. Then we
create a class that knows how to actually

00:04:34.060 --> 00:04:39.310
accomplish that mapping and then we set that
to be our current adapter. Once we've done

00:04:39.310 --> 00:04:42.930
that, that will display things, you know,
it will show us a list of all our contacts.

00:04:42.930 --> 00:04:47.229
But what it won't do is it won't let us click
on any of them. To click on them we have to

00:04:47.229 --> 00:04:55.419
come over here and do one last thing. We need
to go to the source and then override a method.

00:04:55.419 --> 00:05:01.909
The method that we want to override is down
here towards the bottom and it's called onListItemClick.

00:05:01.909 --> 00:05:05.999
Click OK and there, we've got a method body.
What this method does is, this is the method

00:05:05.999 --> 00:05:10.270
that's called every time the user actually
clicks something in the user interface. In

00:05:10.270 --> 00:05:14.909
this specific case, we want it to dial the
phone. And so the first thing that we need

00:05:14.909 --> 00:05:22.610
to do is create a class called Intent. And
an Intent is really almost kind of a generic

00:05:22.610 --> 00:05:27.139
concept. What it means is it's a reflection
of an application's "intention" to perform

00:05:27.139 --> 00:05:31.979
some activity. So I create an Intent object
and I say that the specific activity that

00:05:31.979 --> 00:05:36.180
I want it to perform is call_action, which
means dial the phone. Obviously, I need to

00:05:36.180 --> 00:05:42.599
tell it what number to dial and so I got to
the Cursor that I got from the content provider.

00:05:42.599 --> 00:05:49.759
I query the adapter for the specific row that
the user clicked on. I extract a little bit

00:05:49.759 --> 00:05:55.180
of data from it. I set that data on the Intents
so that now the Intent knows what it's suppose

00:05:55.180 --> 00:06:00.249
to do, and then, finally, I call this method
startActivity. So, when we call startActivity,

00:06:00.249 --> 00:06:03.699
that's what will actually cause the dialer
to appear on the screen and initiate the phone

00:06:03.699 --> 00:06:09.749
call. But certain operations that the device
supports, such as dialing the phone and accessing

00:06:09.749 --> 00:06:14.430
the users contact list, are protected and
the user needs to grant permission before

00:06:14.430 --> 00:06:20.729
an application can access them. And so we
have to request that permission via our Android

00:06:20.729 --> 00:06:25.919
manifest. So if we come over here and double
click on this Android manifest file, you'll

00:06:25.919 --> 00:06:31.159
see that there's already in here a definition
of what the contents of our application are,

00:06:31.159 --> 00:06:34.650
which is what Android manifest does. It's
sort of the traffic cop of your application.

00:06:34.650 --> 00:06:40.029
It specifies its contents as well as what
it does. So what we need to do is add two

00:06:40.029 --> 00:06:46.749
lines to this file. The first line that we
need to add is a request for a permission

00:06:46.749 --> 00:06:52.089
called read_contacts. This permission, if
the user chooses to grant it, will allow the

00:06:52.089 --> 00:06:57.689
application to access the user's contact list.
Similarly, we also need to create or request

00:06:57.689 --> 00:07:02.839
a permission called call_phone. And what that
will do is request that the user allow this

00:07:02.839 --> 00:07:06.830
application to dial a phone. Now that we've
done that, we go ahead and save that file,

00:07:06.830 --> 00:07:15.819
and if we come back up here and run the application
again, then, hey, there we are. As you can

00:07:15.819 --> 00:07:24.319
see, it contains all the entries in my contact
list and hey, let's dial my wife. Well, it's

00:07:24.319 --> 00:07:31.240
an emulator so it's not actually going to
do anything, but that is how it works. So

00:07:31.240 --> 00:07:35.719
this is a surprisingly sophisticated example
for the number of lines of code that we've

00:07:35.719 --> 00:07:40.129
done. And throughout the entire application
framework, we've really tried to make it this

00:07:40.129 --> 00:07:45.259
easy to use. And I think that as, you know,
explore Android, you'll find it to be very

00:07:45.259 --> 00:07:49.149
easy and pleasant to develop for. I hope that
you've enjoyed this and I hope that you think

00:07:49.149 --> 00:07:53.279
this was time well spent. I thank you for
your time and I hope to see you online.

