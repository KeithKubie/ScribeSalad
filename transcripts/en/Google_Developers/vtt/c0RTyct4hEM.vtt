WEBVTT
Kind: captions
Language: en

00:00:00.434 --> 00:00:01.901
[applause]

00:00:01.901 --> 00:00:03.767
Gibbs: Thanks, guys.

00:00:03.767 --> 00:00:06.667
Well, you know, thus far
I've told you about two parts

00:00:06.667 --> 00:00:09.667
of our end to end Java story
this far tonight.

00:00:09.667 --> 00:00:11.234
I've told you about
our Eclipse integration,

00:00:11.234 --> 00:00:12.868
which allows you
to build all of this

00:00:12.868 --> 00:00:14.267
in one single location.

00:00:14.267 --> 00:00:16.000
And I told you about
our Java language support

00:00:16.000 --> 00:00:18.334
for App Engine, which gives you
a place to deploy it.

00:00:18.334 --> 00:00:21.133
But that's only actually
told you about half the story,

00:00:21.133 --> 00:00:23.400
building the back end
of your application.

00:00:23.400 --> 00:00:25.734
The other half,
building your front end,

00:00:25.734 --> 00:00:28.100
has some
serious challenges too.

00:00:28.100 --> 00:00:30.367
If you've ever built
a modern web application before,

00:00:30.367 --> 00:00:31.634
you know you have to deal

00:00:31.634 --> 00:00:33.634
with a lot of different
browser quirks.

00:00:33.634 --> 00:00:35.567
Different browsers
have different ways

00:00:35.567 --> 00:00:37.467
of running different
JavaScript code.

00:00:37.467 --> 00:00:39.334
Once you've solved all those
different browser quirks,

00:00:39.334 --> 00:00:41.400
then you have to worry
about how large

00:00:41.400 --> 00:00:43.100
your JavaScript code base gets.

00:00:43.100 --> 00:00:45.033
When you have a lot
of JavaScript code,

00:00:45.033 --> 00:00:46.667
it's not only
difficult to manage,

00:00:46.667 --> 00:00:48.100
but it can become fragile.

00:00:48.100 --> 00:00:49.767
Just a few changes
in one place or another

00:00:49.767 --> 00:00:52.133
can cause it to be upset.

00:00:52.133 --> 00:00:53.968
Once you have
the app working then,

00:00:53.968 --> 00:00:55.901
you usually
have to optimize it.

00:00:55.901 --> 00:00:57.133
You have to optimize it

00:00:57.133 --> 00:00:58.868
to get the JavaScript
to be faster,

00:00:58.868 --> 00:01:00.667
to get your download
to be smaller,

00:01:00.667 --> 00:01:03.300
to reduce your bandwidth
and so on.

00:01:03.300 --> 00:01:05.100
In short,
all of this becomes

00:01:05.100 --> 00:01:07.367
a tedious,
error-prone process,

00:01:07.367 --> 00:01:09.400
and each bug you encounter
takes you further away

00:01:09.400 --> 00:01:11.067
from what you actually
wanted to do

00:01:11.067 --> 00:01:13.534
which was build
a great web application.

00:01:13.534 --> 00:01:16.100
So Google Web Toolkit,
the last chapter

00:01:16.100 --> 00:01:17.767
in tonight's end to end
Java story,

00:01:17.767 --> 00:01:20.067
addresses precisely this.

00:01:20.067 --> 00:01:21.434
Now for those of you

00:01:21.434 --> 00:01:22.801
who are not familiar
with Google Web Toolkit,

00:01:22.801 --> 00:01:24.434
the premise is simple.

00:01:24.434 --> 00:01:27.033
It allows you to write
your application in Java,

00:01:27.033 --> 00:01:28.667
both the client
and the server,

00:01:28.667 --> 00:01:30.601
and then it compiles
that Java code

00:01:30.601 --> 00:01:32.601
down to JavaScript.

00:01:32.601 --> 00:01:35.601
Now when you do this,
you gain a number of benefits.

00:01:35.601 --> 00:01:37.901
Since your code was completely
written in Java,

00:01:37.901 --> 00:01:40.534
you can test
and debug that locally

00:01:40.534 --> 00:01:42.467
using a standard
Java debugger

00:01:42.467 --> 00:01:45.334
for both your front end
and your back end code.

00:01:45.334 --> 00:01:47.267
Then when
your app is complete,

00:01:47.267 --> 00:01:50.200
you can compile
that Java code to JavaScript.

00:01:50.200 --> 00:01:53.133
And that JavaScript is in
a standard JavaScript file.

00:01:53.133 --> 00:01:56.133
You can serve
from any web server.

00:01:56.133 --> 00:01:58.000
Now when it's doing
that compilation,

00:01:58.000 --> 00:02:00.567
it also does a number
of optimizations to your code

00:02:00.567 --> 00:02:03.701
to make it as small
and as fast as possible.

00:02:03.701 --> 00:02:05.567
It also takes into account

00:02:05.567 --> 00:02:07.634
every major browser
on the market,

00:02:07.634 --> 00:02:10.767
including IE, Firefox,
Chrome and more,

00:02:10.767 --> 00:02:13.868
so that your code accounts
for all those browser quirks

00:02:13.868 --> 00:02:15.367
that I mentioned.

00:02:15.367 --> 00:02:17.234
That means you can spend
a lot less time in QA

00:02:17.234 --> 00:02:19.968
and worrying if your app
is blown up.

00:02:19.968 --> 00:02:21.901
And finally,
Google Web Toolkit

00:02:21.901 --> 00:02:25.534
generates the source code
for each browser independently.

00:02:25.534 --> 00:02:27.801
That means that when you use
a Google Web Toolkit app,

00:02:27.801 --> 00:02:30.267
you only download
exactly the code that you need

00:02:30.267 --> 00:02:33.300
to run on your browser
for that app.

00:02:33.300 --> 00:02:35.200
And we think taken together

00:02:35.200 --> 00:02:37.234
these increases
in developer productivity

00:02:37.234 --> 00:02:39.234
and making better code
for your application

00:02:39.234 --> 00:02:42.000
and making it more portable
and running on more browsers,

00:02:42.000 --> 00:02:44.434
is a win, win, win
that's tough to beat

00:02:44.434 --> 00:02:47.434
with handwritten JavaScript.

00:02:47.434 --> 00:02:49.467
Now you might be wondering,
why am I telling you

00:02:49.467 --> 00:02:51.334
about GWT tonight?

00:02:51.334 --> 00:02:52.834
GWT's been around
for a while.

00:02:52.834 --> 00:02:56.901
In fact, we open sourced
all of GWT back in 2006.

00:02:56.901 --> 00:02:58.501
Well, I'm talking
about it tonight

00:02:58.501 --> 00:03:00.033
because for the first time

00:03:00.033 --> 00:03:02.067
we've been able to bring
Google Web Toolkit

00:03:02.067 --> 00:03:03.734
and App Engine together

00:03:03.734 --> 00:03:05.767
so that you can write
a single application,

00:03:05.767 --> 00:03:07.100
both the front and the--

00:03:07.100 --> 00:03:09.133
front end and the back end
together.

00:03:09.133 --> 00:03:10.467
It's fast.

00:03:10.467 --> 00:03:12.734
The applications
you create are fast,

00:03:12.734 --> 00:03:15.434
standards based,
and can be deployed anywhere,

00:03:15.434 --> 00:03:17.734
on-site or on App Engine.

00:03:17.734 --> 00:03:20.834
And they're all written
in Java, a single language.

00:03:20.834 --> 00:03:23.200
Now many of you
probably haven't seen

00:03:23.200 --> 00:03:25.434
Google Web Toolkit
in action before.

00:03:25.434 --> 00:03:27.133
So to help with that,

00:03:27.133 --> 00:03:29.100
I'm gonna invite Andrew
back onstage,

00:03:29.100 --> 00:03:30.868
and he's gonna take
the guest book application

00:03:30.868 --> 00:03:32.501
that you've already seen

00:03:32.501 --> 00:03:34.734
and he's gonna inject
some Ajaxy goodness

00:03:34.734 --> 00:03:36.601
using Google Web Toolkit.

00:03:36.601 --> 00:03:40.000
Andrew.

00:03:40.000 --> 00:03:41.634
Andrew: Thanks, Kevin.

00:03:41.634 --> 00:03:43.000
Well, it's hard to imagine

00:03:43.000 --> 00:03:44.868
how I could improve
my guest book application.

00:03:44.868 --> 00:03:46.033
[laughter]

00:03:46.033 --> 00:03:48.167
But I'm gonna try.

00:03:48.167 --> 00:03:51.968
So here I want to bring
my web application,

00:03:51.968 --> 00:03:53.701
my guest book application
into the modern world

00:03:53.701 --> 00:03:55.100
with an Ajax running

00:03:55.100 --> 00:03:56.834
'cause I hear
it's all the rage.

00:03:56.834 --> 00:03:59.634
And I'm gonna do that
with Google Web Toolkit.

00:03:59.634 --> 00:04:01.567
And I'm gonna inject,
as Kevin calls it,

00:04:01.567 --> 00:04:02.934
the Ajaxy goodness.

00:04:02.934 --> 00:04:04.234
And what this is going to be

00:04:04.234 --> 00:04:06.200
is no longer it's going
to be a JSP page

00:04:06.200 --> 00:04:08.801
submitting to a servlet
and then redirecting back.

00:04:08.801 --> 00:04:11.133
It's going to be here.
It's going to have JavaScript.

00:04:11.133 --> 00:04:13.801
It's going to submit
my entries to the server

00:04:13.801 --> 00:04:16.901
on the back end
and then list out entries here

00:04:16.901 --> 00:04:18.567
without ever leaving the page.

00:04:18.567 --> 00:04:23.901
So similar experience
to most web apps these days.

00:04:23.901 --> 00:04:25.701
So I'm gonna go
back into Eclipse.

00:04:25.701 --> 00:04:28.534
And I've actually created
that project already.

00:04:28.534 --> 00:04:30.567
And I'm just gonna show you
what it looks like

00:04:30.567 --> 00:04:32.367
and what
it looks like to work

00:04:32.367 --> 00:04:34.501
with Google Web Toolkit
on top of App Engine.

00:04:34.501 --> 00:04:36.167
So let me close out
the other one,

00:04:36.167 --> 00:04:38.968
and let me open up this.

00:04:38.968 --> 00:04:41.300
Now if you tried to build
an Ajax application,

00:04:41.300 --> 00:04:43.334
you'll know
that you have to worry

00:04:43.334 --> 00:04:44.567
about a lot
of different things.

00:04:44.567 --> 00:04:45.868
You have to know
about JavaScript

00:04:45.868 --> 00:04:48.100
for many different browsers
and all the quirks.

00:04:48.100 --> 00:04:50.234
Luckily, you're not gonna
have to do that here.

00:04:50.234 --> 00:04:51.534
There are a few different--

00:04:51.534 --> 00:04:53.334
There's some changes
you'll notice

00:04:53.334 --> 00:04:54.868
from the last project,

00:04:54.868 --> 00:04:56.934
notably in the package
structure.

00:04:56.934 --> 00:04:58.200
So if I look here,

00:04:58.200 --> 00:05:00.300
I have client, server,
and shared packages.

00:05:00.300 --> 00:05:02.234
Everything
in my client directory

00:05:02.234 --> 00:05:04.534
is going to create
my user interface

00:05:04.534 --> 00:05:06.834
on the browser in JavaScript.

00:05:06.834 --> 00:05:09.367
So the Java files are going
to be cross-compiled

00:05:09.367 --> 00:05:10.767
into JavaScript

00:05:10.767 --> 00:05:13.834
and run
in my user's browser here.

00:05:13.834 --> 00:05:15.267
My user interfaces
is built

00:05:15.267 --> 00:05:19.000
here in the user interface
Java class.

00:05:19.000 --> 00:05:21.000
And you can see
I'm using widgets,

00:05:21.000 --> 00:05:23.033
creating text boxes
and buttons.

00:05:23.033 --> 00:05:25.033
And I'm using click handlers

00:05:25.033 --> 00:05:27.701
just like I would
in desktop programming.

00:05:27.701 --> 00:05:29.534
What this is doing
is providing--

00:05:29.534 --> 00:05:31.934
excuse me, providing
a higher level of abstraction

00:05:31.934 --> 00:05:35.100
on top of JavaScript
across all browsers

00:05:35.100 --> 00:05:37.868
so that you can focus
on the application logic

00:05:37.868 --> 00:05:41.100
and not the browser quirks.

00:05:41.100 --> 00:05:43.601
So this code is going
to run as JavaScript.

00:05:43.601 --> 00:05:45.400
In my server package,

00:05:45.400 --> 00:05:47.267
that code is going to run
as Java bytecode

00:05:47.267 --> 00:05:48.634
on the server.

00:05:48.634 --> 00:05:50.734
Now remember, on the client,
it's just JavaScript.

00:05:50.734 --> 00:05:52.000
There are no applets.

00:05:52.000 --> 00:05:53.968
On the server it's bytecode.

00:05:53.968 --> 00:05:55.300
And then shared,

00:05:55.300 --> 00:05:57.901
because we're using Java
to model our client code,

00:05:57.901 --> 00:05:59.801
it's going to be JavaScript,

00:05:59.801 --> 00:06:03.434
we can actually share objects
across both client and server.

00:06:03.434 --> 00:06:05.234
So if you remember,
we had the entry object

00:06:05.234 --> 00:06:07.000
that we annotated earlier.

00:06:07.000 --> 00:06:08.334
I'm actually using this

00:06:08.334 --> 00:06:10.334
across both the JavaScript
on my client

00:06:10.334 --> 00:06:11.968
and my server.

00:06:11.968 --> 00:06:13.767
Now you're hearing
a lot about compilation.

00:06:13.767 --> 00:06:16.334
And you may be wondering,
am I going to have to compile

00:06:16.334 --> 00:06:18.901
every time I want to make
a change and see what happens?

00:06:18.901 --> 00:06:20.968
Luckily, you won't
have to do that.

00:06:20.968 --> 00:06:23.434
So if I bring up
my development environment here,

00:06:23.434 --> 00:06:25.467
I have the guest book
application running.

00:06:25.467 --> 00:06:26.934
And let's say, uh--

00:06:26.934 --> 00:06:32.400
So you can see I have another
long-winded post here.

00:06:32.400 --> 00:06:35.467
I changed my post here
to another long-winded post

00:06:35.467 --> 00:06:37.601
by someone.

00:06:37.601 --> 00:06:39.734
And I don't like that.

00:06:39.734 --> 00:06:41.567
I want to change it back
to "posted by."

00:06:41.567 --> 00:06:45.601
So I'll go back here
and I'll find that text,

00:06:45.601 --> 00:06:49.100
go into my user interface.

00:06:53.167 --> 00:06:58.167
We'll just say "another
long-winded and pointless post."

00:06:58.167 --> 00:06:59.767
Just click "refresh"

00:06:59.767 --> 00:07:01.601
just like I would
with JavaScript.

00:07:01.601 --> 00:07:03.701
And so I made
the change in Java,

00:07:03.701 --> 00:07:05.167
reflected in the JavaScript

00:07:05.167 --> 00:07:07.100
here in my development
environment.

00:07:07.100 --> 00:07:08.501
Now the next thing we can do

00:07:08.501 --> 00:07:10.868
because we're using Java
across the entire application,

00:07:10.868 --> 00:07:12.667
is we can debug

00:07:12.667 --> 00:07:14.667
with the standard Java tools
that we're used to.

00:07:14.667 --> 00:07:16.167
So let's say
I'm having a problem

00:07:16.167 --> 00:07:18.367
with this list here,
and I wanna debug that.

00:07:18.367 --> 00:07:21.834
So I can go back into
my Java source.

00:07:21.834 --> 00:07:24.133
I can go into this
on success method,

00:07:24.133 --> 00:07:27.934
and I'll set
a break point here on "list."

00:07:27.934 --> 00:07:30.300
Then I'll go back
and I'll create an entry.

00:07:30.300 --> 00:07:31.801
When I create an entry,

00:07:31.801 --> 00:07:34.167
that's going to trigger
a refresh of the list.

00:07:44.167 --> 00:07:47.167
Well, let's see, it should
trigger a break point.

00:07:47.167 --> 00:07:50.400
Let's--I probably
started it not in debug.

00:07:50.400 --> 00:07:51.667
So let's try that again.

00:07:51.667 --> 00:07:54.467
I'm gonna start it up
in debug.

00:07:54.467 --> 00:07:56.167
Now it's important to note

00:07:56.167 --> 00:07:59.033
that you're not
just debugging the--

00:07:59.033 --> 00:08:00.868
Oh, looks like
we still had it running.

00:08:00.868 --> 00:08:03.567
You're not just debugging
on the client or the server.

00:08:03.567 --> 00:08:07.400
You can debug across both.

00:08:07.400 --> 00:08:10.167
So I can debug
that same Java--

00:08:10.167 --> 00:08:14.100
that same entry.Java file
across both the server

00:08:14.100 --> 00:08:18.234
and then go and look at it
across the client as well.

00:08:18.234 --> 00:08:23.234
So let's see
if we have that going now.

00:08:23.234 --> 00:08:25.367
So now it's
started up the page,

00:08:25.367 --> 00:08:27.601
and then it triggered
my break point.

00:08:27.601 --> 00:08:30.634
This means I can step
through the code

00:08:30.634 --> 00:08:33.601
just like I would
in any Java application.

00:08:33.601 --> 00:08:35.868
I can inspect variables

00:08:35.868 --> 00:08:40.434
and see what's going
on up here.

00:08:40.434 --> 00:08:43.000
Now you may think
that's not very--

00:08:43.000 --> 00:08:45.434
not very amazing,
but remember

00:08:45.434 --> 00:08:47.400
that this is JavaScript
that we're debugging.

00:08:47.400 --> 00:08:51.000
This is Ajax code
that we're actually debugging.

00:08:51.000 --> 00:08:53.100
So the last point
I want to make

00:08:53.100 --> 00:08:55.067
is just a glimpse
under the hood

00:08:55.067 --> 00:08:57.267
of Google Web Toolkit

00:08:57.267 --> 00:08:59.567
and also a little bit about
the performance aspects.

00:08:59.567 --> 00:09:01.167
So if you want to see--

00:09:01.167 --> 00:09:02.634
Let's say I wanted to see

00:09:02.634 --> 00:09:05.200
what the actual JavaScript
for this method looked like.

00:09:05.200 --> 00:09:06.534
I could do that.

00:09:06.534 --> 00:09:08.300
I could go into
the web archive directory.

00:09:08.300 --> 00:09:13.501
This is where the JavaScript's
going to be stored.

00:09:13.501 --> 00:09:15.300
And I could look for that.

00:09:15.300 --> 00:09:17.000
So let's see,
I think it's called

00:09:17.000 --> 00:09:21.834
"function onsuccess."

00:09:21.834 --> 00:09:23.367
And so here's that method,

00:09:23.367 --> 00:09:25.367
and I can see the JavaScript,

00:09:25.367 --> 00:09:29.434
which is created
from the Java.

00:09:29.434 --> 00:09:32.634
Now it's not just Java
to JavaScript compilation

00:09:32.634 --> 00:09:35.200
that's going on here, though,
or cross-compilation.

00:09:35.200 --> 00:09:37.868
Because we're using Java,
which is a static language,

00:09:37.868 --> 00:09:40.701
we can do a lot of analysis
across the code base

00:09:40.701 --> 00:09:42.567
for compiler optimizations.

00:09:42.567 --> 00:09:44.234
I won't go into those here,

00:09:44.234 --> 00:09:46.834
but the point is that
your app gets faster

00:09:46.834 --> 00:09:50.601
every time a new version
of Google Web Toolkit comes out.

00:09:50.601 --> 00:09:53.067
So the end result
of using Google Web Toolkit

00:09:53.067 --> 00:09:54.567
on App Engine is, one,

00:09:54.567 --> 00:09:57.033
it's a very tightly
integrated environment,

00:09:57.033 --> 00:09:59.300
so it's very easy
to use both together.

00:09:59.300 --> 00:10:01.767
You can use them separately
as well if you want.

00:10:01.767 --> 00:10:05.434
But its productivity gains,
as a developer,

00:10:05.434 --> 00:10:07.901
but for your in user
it's also performance gains

00:10:07.901 --> 00:10:09.868
because your code's
going to be a lot smaller

00:10:09.868 --> 00:10:11.267
that the user
has to download,

00:10:11.267 --> 00:10:12.901
and the actual JavaScript's

00:10:12.901 --> 00:10:14.667
going to be
a lot faster as well.

00:10:14.667 --> 00:10:15.868
Thanks, Kevin.

00:10:15.868 --> 00:10:17.300
[applause]

