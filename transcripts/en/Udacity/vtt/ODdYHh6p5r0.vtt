WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.000
Let's look right now at the analysis of the algorithm.

00:00:03.000 --> 00:00:07.000
What's the running time of Dijkstra in terms of the number of nodes (n)

00:00:07.000 --> 00:00:09.000
and edges (m) when heaps are used?

00:00:09.000 --> 00:00:12.000
The kinds of heaps we've been talking about to be able to find

00:00:12.000 --> 00:00:17.000
the shortest distance so far so we can lock that down and run.

00:00:17.000 --> 00:00:19.000
Here's the sketch of the algorithm again.

00:00:19.000 --> 00:00:22.000
For each node, you find the shortest distance so far.

00:00:22.000 --> 00:00:24.000
Remove it from the set because that one's now done

00:00:24.000 --> 00:00:26.000
and we actually know the distance to that node.

00:00:26.000 --> 00:00:29.000
Then we check each of its neighbors possibly reducing the distance

00:00:29.000 --> 00:00:35.000
which wasn't a really big deal before, but it actually matters in the heap of limitation

00:00:35.000 --> 00:00:38.000
because once we reduced the value associated with the node,

00:00:38.000 --> 00:00:41.000
it needs to maybe be some place different in the heap.

00:00:41.000 --> 00:00:45.000
In your implementation, the thing you're going to have to really watch out for is

00:00:45.000 --> 00:00:50.000
making sure that when you update the value of the neighbor, you can find it in the heap.

00:00:50.000 --> 00:00:53.000
Update the heap so the heap property is restored

00:00:53.000 --> 00:00:56.000
and all of this information is communicated back and forth.

00:00:56.000 --> 00:00:58.000
All right, let's imagine that we can do that and in fact,

00:00:58.000 --> 00:01:05.000
reducing the distance of a value turns out to be, you can use up-heapify to do that

00:01:05.000 --> 00:01:08.000
because the value, here let me draw.

00:01:08.000 --> 00:01:12.000
If we have some value in the heap and we know that the heap property is satisfied

00:01:12.000 --> 00:01:15.000
and what does that mean? That means that this node has to have a bigger value

00:01:15.000 --> 00:01:21.000
or no smaller value than it's parent and it has to, itself, be smaller than both of its children.

00:01:21.000 --> 00:01:26.000
Let's take a closer look at the issues that arise in a heap if one of the values,

00:01:26.000 --> 00:01:29.000
let's say, we have this one, is suddenly reduced.

00:01:29.000 --> 00:01:33.000
They get smaller, so let's just use a concrete example. The heap property is satisfied.

00:01:33.000 --> 00:01:36.000
That means that whatever value this guy has, let's say it's 10,

00:01:36.000 --> 00:01:42.000
have to be smaller than both of it's children but bigger or no smaller than it's parent.

00:01:42.000 --> 00:01:46.000
What can happen if this node has its value reduced?

00:01:46.000 --> 00:01:50.000
Well, let's take it to reduce a lot. Let's take it's reduced all the way to 1.

00:01:50.000 --> 00:01:56.000
The heap property is no longer necessarily satisfied. It's actually fine from this node down.

00:01:56.000 --> 00:02:02.000
This is fine. The problem is that this node, to it's parent, might no longer satisfy the heap property.

00:02:02.000 --> 00:02:06.000
But the good news is, we talked about an operation that fixes exactly this problem.

00:02:06.000 --> 00:02:11.000
If this is node (I). If we run up-heapify on this heap with a pointer to (I),

00:02:11.000 --> 00:02:15.000
what it's going to do is bubble this small value up as high as it needs to be in the tree.

00:02:15.000 --> 00:02:20.000
It's going to take Î˜(log n) time and then the heap property will be restored and all will be well.

00:02:20.000 --> 00:02:23.000
That's actually not a big problem unless you already have implemented.

00:02:23.000 --> 00:02:26.000
The thing that makes this tricky is when you're talking about

00:02:26.000 --> 00:02:30.000
some particular node, let's say, node (R).

00:02:30.000 --> 00:02:36.000
You need to be able to find out very quickly the constant time where node (R) is in the heap

00:02:36.000 --> 00:02:39.000
and as things get moved around in the heap, we have to keep that information updated.

00:02:39.000 --> 00:02:44.000
That's really just that bookkeeping is actually the main thing that makes this challenging.

00:02:44.000 --> 00:02:48.000
But let's take a look at the running time given that we can do this

00:02:48.000 --> 00:02:51.000
distance reduction operation in logarithmic time.

00:02:51.000 --> 00:02:56.000
For each node, we find the shortest distance and then for each node and each of its neighbors,

00:02:56.000 --> 00:03:00.000
that is to say for each edge, we possibly reduce it's distance of a node.

00:03:00.000 --> 00:03:03.000
What does that give us for a running time for this entire algorithm?

00:03:03.000 --> 00:03:08.000
I want you to think it through and when you think you understand what the running time is,

00:03:08.000 --> 00:03:10.000
find it in this list and check it off.

