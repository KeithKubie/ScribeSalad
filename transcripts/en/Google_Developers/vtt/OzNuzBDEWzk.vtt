WEBVTT
Kind: captions
Language: en

00:00:00.360 --> 00:00:00.860
Hi.

00:00:00.860 --> 00:00:03.960
I'm Brad, the lead engineer on
our new InBrowser Native Client

00:00:03.960 --> 00:00:05.350
development environment.

00:00:05.350 --> 00:00:07.710
I'm going to demonstrate
how easy it is to use that

00:00:07.710 --> 00:00:10.110
environment to check
out, edit, build,

00:00:10.110 --> 00:00:13.860
and debug a C++ application
all in your desktop web browser

00:00:13.860 --> 00:00:15.370
or on a Chromebook.

00:00:15.370 --> 00:00:19.130
Also, with this environment,
you can even work while offline.

00:00:19.130 --> 00:00:21.640
Visit this page to follow along.

00:00:21.640 --> 00:00:23.610
You'll need to
install our new tools.

00:00:23.610 --> 00:00:25.880
I've already done that, so
I'll go ahead and fire up

00:00:25.880 --> 00:00:28.910
the new dev environment.

00:00:28.910 --> 00:00:30.900
It looks a lot like a
Unix command line bash

00:00:30.900 --> 00:00:33.150
prompt, because it is.

00:00:33.150 --> 00:00:35.970
Running inside the secure
Native Client sandbox.

00:00:35.970 --> 00:00:37.510
So what you do in
this environment

00:00:37.510 --> 00:00:39.080
stays in this environment.

00:00:39.080 --> 00:00:40.970
Let me create a work directory.

00:00:40.970 --> 00:00:44.680
Our new environment works
like its own mini Unix system.

00:00:44.680 --> 00:00:47.650
Files you create are retained
in local web storage, securely

00:00:47.650 --> 00:00:50.130
separate from your
computer's main file system.

00:00:50.130 --> 00:00:52.910
I'll download a zip file
containing my project using

00:00:52.910 --> 00:00:55.760
a command line
program called cURL.

00:00:55.760 --> 00:00:58.670
Once I have my project, I no
longer need network access

00:00:58.670 --> 00:01:01.540
and can work offline if I like.

00:01:01.540 --> 00:01:03.296
Here's my zip file.

00:01:03.296 --> 00:01:04.430
I'll extract it.

00:01:09.330 --> 00:01:10.930
Let's look at what we got.

00:01:10.930 --> 00:01:12.930
My project uses a bunch
of different programming

00:01:12.930 --> 00:01:13.970
languages.

00:01:13.970 --> 00:01:17.690
The core application is in a
C++ file called voronoi.cc,

00:01:17.690 --> 00:01:20.360
which is combined with
several C++ libraries.

00:01:20.360 --> 00:01:23.200
These are then built with
NaCl's GCC-based compiler

00:01:23.200 --> 00:01:26.580
yielding a NaCl executable,
voronoi.nexe, all of which

00:01:26.580 --> 00:01:29.000
is driven by a
bash build script.

00:01:29.000 --> 00:01:32.300
Voronoi.nexe is then
combined with some HTML

00:01:32.300 --> 00:01:35.040
and some JavaScript, which
creates a NaCl DOM element

00:01:35.040 --> 00:01:37.580
and routes UI actions
to voronoi.nexe,

00:01:37.580 --> 00:01:39.890
yielding the complete web app.

00:01:39.890 --> 00:01:42.050
Which is then served up
locally by a Python script

00:01:42.050 --> 00:01:45.370
once again running
in the NaCl sandbox.

00:01:45.370 --> 00:01:47.840
Before we get going, I'd
like to track my changes,

00:01:47.840 --> 00:01:50.500
so let's create
a Git repository.

00:01:50.500 --> 00:01:53.130
Then add all the files here.

00:01:53.130 --> 00:01:55.750
Now I'll commit
the starting state.

00:01:55.750 --> 00:01:56.950
Great, now let's build.

00:02:03.380 --> 00:02:04.430
Oh, that isn't right.

00:02:04.430 --> 00:02:06.080
It isn't building at the moment.

00:02:06.080 --> 00:02:08.190
Looks like the problem
is on line 506.

00:02:08.190 --> 00:02:10.380
Let's open it up in Vim.

00:02:10.380 --> 00:02:12.910
We have a port of Vim to
Native Client, but fear not,

00:02:12.910 --> 00:02:13.700
Emacs users.

00:02:13.700 --> 00:02:15.820
Emacs is coming soon too.

00:02:15.820 --> 00:02:17.434
The problem was on line 506.

00:02:17.434 --> 00:02:18.350
Let's go check it out.

00:02:23.130 --> 00:02:24.890
There's the problem.

00:02:24.890 --> 00:02:26.160
I've misspelled "height."

00:02:26.160 --> 00:02:28.050
I'll fix it.

00:02:28.050 --> 00:02:30.010
Then save.

00:02:30.010 --> 00:02:30.660
Compile again.

00:02:36.510 --> 00:02:37.810
Victory.

00:02:37.810 --> 00:02:39.870
I can look at the
diff using git.

00:02:39.870 --> 00:02:43.000
I should really commit that fix.

00:02:43.000 --> 00:02:45.560
Now, I'll fire up a
local Python test server,

00:02:45.560 --> 00:02:48.995
using our NaCl sandbox Python,
and navigate to my test page.

00:02:57.600 --> 00:03:01.910
The Python server lets me view
my entire virtual file system.

00:03:01.910 --> 00:03:05.110
In the /mnt directory is
an HTML5 local storage mnt,

00:03:05.110 --> 00:03:07.460
which is where my
home directory lives.

00:03:07.460 --> 00:03:10.814
Let's go into the work
directory we created before.

00:03:10.814 --> 00:03:12.980
Then we can navigate to the
voronoi directory, which

00:03:12.980 --> 00:03:15.575
will load our app because
it has an index HTML page.

00:03:20.910 --> 00:03:23.310
Here's the sample running
just on the main thread.

00:03:23.310 --> 00:03:24.860
Kind of slow.

00:03:24.860 --> 00:03:27.395
Let's crank it up to 32
threads and use all our cores.

00:03:29.970 --> 00:03:31.060
Uh-oh.

00:03:31.060 --> 00:03:32.490
It stopped.

00:03:32.490 --> 00:03:33.180
No worries.

00:03:33.180 --> 00:03:37.460
Let's debug it using NaCl's new
InBrowser GDB-based debugger.

00:03:37.460 --> 00:03:39.180
I simply open the
Developer Console

00:03:39.180 --> 00:03:41.150
and select the
NaCl Debugger tab.

00:03:41.150 --> 00:03:43.110
Our port of GDB
allows you to attach

00:03:43.110 --> 00:03:45.790
to a running application, but
will also automatically connect

00:03:45.790 --> 00:03:47.100
to a crashing one.

00:03:47.100 --> 00:03:49.990
GDB allows us to inspect the
state of each thread including

00:03:49.990 --> 00:03:52.840
local variables and call frame
to help us track down bugs in C

00:03:52.840 --> 00:03:54.330
and C++ applications.

00:03:54.330 --> 00:03:55.420
Let's get a stack trace.

00:03:58.630 --> 00:04:01.537
Bad things happened at
line 485 in voronoi.cc.

00:04:01.537 --> 00:04:03.120
Let's go back to Vim
and check it out.

00:04:06.910 --> 00:04:07.570
I see it.

00:04:07.570 --> 00:04:09.260
Do you?

00:04:09.260 --> 00:04:10.300
I botched "value."

00:04:10.300 --> 00:04:12.570
Spelling is clearly
not my strong area.

00:04:12.570 --> 00:04:14.210
Let me fix it.

00:04:14.210 --> 00:04:15.950
Save.

00:04:15.950 --> 00:04:16.450
Rebuild.

00:04:23.400 --> 00:04:24.350
Double-check the diff.

00:04:31.820 --> 00:04:33.680
Let's commit that too.

00:04:33.680 --> 00:04:35.370
Let's look at my
commit history as well.

00:04:39.740 --> 00:04:41.580
There are all my changes.

00:04:41.580 --> 00:04:43.040
Let's give this
new version a go.

00:04:48.690 --> 00:04:49.689
Works like before.

00:04:49.689 --> 00:04:50.980
Now let's add some more points.

00:04:57.590 --> 00:04:58.930
That's really janky slow.

00:04:58.930 --> 00:05:00.570
Let's try our 32 threads again.

00:05:05.550 --> 00:05:06.530
Much better.

00:05:06.530 --> 00:05:09.800
Use Native Client and our new
development tools to bring high

00:05:09.800 --> 00:05:11.760
performance
applications to the web,

00:05:11.760 --> 00:05:15.140
whether your application is
written in C, C++, Python, Lua,

00:05:15.140 --> 00:05:18.640
or Ruby, with more languages
and portable NaCl support coming

00:05:18.640 --> 00:05:20.010
soon.

00:05:20.010 --> 00:05:21.990
Try this tutorial
at the link above

00:05:21.990 --> 00:05:24.260
or visit our developer
site for more information

00:05:24.260 --> 00:05:27.630
on how to use Native Client
to supercharge the web.

00:05:27.630 --> 00:05:29.590
Thanks for watching.

