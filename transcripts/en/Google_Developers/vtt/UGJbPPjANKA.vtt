WEBVTT
Kind: captions
Language: en

00:00:01.130 --> 00:00:02.560
CHRIS DIBONA: Hi, my name
is Chris DiBona.

00:00:02.560 --> 00:00:05.850
I look after a lot of open
source stuff at Google.

00:00:05.850 --> 00:00:07.140
But you're not here for me.

00:00:07.140 --> 00:00:10.440
You're here for the incredibly
large number of people we have

00:00:10.440 --> 00:00:11.970
on this stage.

00:00:11.970 --> 00:00:13.830
And we're gonna start
from the far left--

00:00:13.830 --> 00:00:15.590
my left your right--

00:00:15.590 --> 00:00:16.489
with Dan.

00:00:16.489 --> 00:00:19.000
Dan, introduce yourself
and pass it down.

00:00:19.000 --> 00:00:20.310
DAN MORRILL: Hello.

00:00:20.310 --> 00:00:23.150
I would like to, first, thank
you on behalf of the entire

00:00:23.150 --> 00:00:25.990
Android team for being here to
hear us speak today instead of

00:00:25.990 --> 00:00:27.620
being downstairs collecting
your free hardware.

00:00:27.620 --> 00:00:29.630
So thank you for that.

00:00:29.630 --> 00:00:30.350
I'm Dan Morrill.

00:00:30.350 --> 00:00:32.155
I do things.

00:00:35.340 --> 00:00:36.250
RETO MEIER: I'm Reto Meier.

00:00:36.250 --> 00:00:39.976
I'm the tech lead for the
developer relations team.

00:00:39.976 --> 00:00:41.390
REBECCA ZAVIN: Hi I'm
Rebecca Zavin.

00:00:41.390 --> 00:00:45.800
I'm the tech lead for the
Android systems team.

00:00:45.800 --> 00:00:47.630
FICUS KIRKPATRICK: My name is
Ficus Kirkpatrick and I'm a

00:00:47.630 --> 00:00:50.096
software engineer
on Google Play.

00:00:50.096 --> 00:00:52.600
DIANNE HACKBORN: My name is
Dianne Hackborn and I work on

00:00:52.600 --> 00:00:55.110
the application framework.

00:00:55.110 --> 00:00:55.900
XAVIER DUCROHET: I'm
Xavier Duchrohet.

00:00:55.900 --> 00:00:59.560
I'm the tech lead for the
SDK and developer tools.

00:00:59.560 --> 00:01:00.450
FRED CONTADA: I'm
Fred Contada.

00:01:00.450 --> 00:01:02.830
I'm the tech lead
manager for sync

00:01:02.830 --> 00:01:06.030
accounts and data messaging.

00:01:06.030 --> 00:01:07.180
MICHAEL SALISKY: I'm
Michael Salisky.

00:01:07.180 --> 00:01:10.630
I'm a product manager
on Google Play.

00:01:10.630 --> 00:01:12.670
DAVE BURKE: I'm Dave Burke,
engineering director for

00:01:12.670 --> 00:01:14.820
platform software and
most accurately

00:01:14.820 --> 00:01:16.070
described as overhead.

00:01:19.230 --> 00:01:21.410
JAMES: Hi my name is James.

00:01:21.410 --> 00:01:23.350
I'm the tech lead
for media team.

00:01:23.350 --> 00:01:25.602
CHRIS DIBONA: You can just keep
hold of that and pass it

00:01:25.602 --> 00:01:26.840
amongst yourselves.

00:01:26.840 --> 00:01:28.850
So the way this is going to
work, we have a number of

00:01:28.850 --> 00:01:32.010
questions from the moderator
instance, which I'm going to

00:01:32.010 --> 00:01:35.570
draw from in between your going
to the microphones and

00:01:35.570 --> 00:01:36.830
asking questions.

00:01:36.830 --> 00:01:40.450
It is a fireside chat,
hence the fire.

00:01:40.450 --> 00:01:44.160
This is a YouTube video called
"98 Minutes of Fire." I

00:01:44.160 --> 00:01:47.530
scrubbed through it to see if
there was anything gross, but

00:01:47.530 --> 00:01:48.850
you're all adults, you know.

00:01:51.400 --> 00:01:53.630
Because YouTube would
never let you down.

00:01:53.630 --> 00:01:55.190
That's what I've learned.

00:01:55.190 --> 00:01:57.870
So if you guys want to
come to the mics and

00:01:57.870 --> 00:01:58.980
line up, that's great.

00:01:58.980 --> 00:02:02.030
I have no idea how many of
you we will get to today.

00:02:02.030 --> 00:02:05.350
We have 57 minutes
and 41 seconds.

00:02:05.350 --> 00:02:06.390
So I'm going to start
with some of

00:02:06.390 --> 00:02:07.600
the moderator questions.

00:02:07.600 --> 00:02:09.500
Are you guys actually lined up
for questions or are you just

00:02:09.500 --> 00:02:10.190
standing around?

00:02:10.190 --> 00:02:11.470
I can't tell.

00:02:11.470 --> 00:02:12.270
There's no mic back there.

00:02:12.270 --> 00:02:13.280
OK, so you're a questioner
guy.

00:02:13.280 --> 00:02:14.520
Why don't you kick us off.

00:02:14.520 --> 00:02:16.260
Someone here in the room.

00:02:16.260 --> 00:02:18.656
AUDIENCE: I have a question.

00:02:18.656 --> 00:02:23.650
There seems to be a gap between
the build environment

00:02:23.650 --> 00:02:27.350
for Eclipse and Ant.

00:02:27.350 --> 00:02:33.890
I have, let's say, a plain Java
project that I want to

00:02:33.890 --> 00:02:36.700
use in other Java projects,
not just Android projects.

00:02:36.700 --> 00:02:38.660
But I also want to use
them in Android.

00:02:38.660 --> 00:02:42.460
And it's always kind of a battle
keeping the references

00:02:42.460 --> 00:02:47.050
in Eclipse up to date and in
sync with the references in

00:02:47.050 --> 00:02:47.760
the Ant file.

00:02:47.760 --> 00:02:51.250
So I'm wondering if there's any
way to streamline that or

00:02:51.250 --> 00:02:56.320
plans to kind of make them
one in the same.

00:02:56.320 --> 00:02:56.980
Xavier Duchrohet: Yes.

00:02:56.980 --> 00:03:00.320
In your particular case, since
you have a regular Java

00:03:00.320 --> 00:03:03.380
project, you should be able to
just add some custom root to

00:03:03.380 --> 00:03:06.040
you Ant file to just reference
that and generate the Java

00:03:06.040 --> 00:03:07.620
file and drop it somewhere.

00:03:07.620 --> 00:03:09.130
And the project then needs it.

00:03:09.130 --> 00:03:10.120
It's kind of crappy.

00:03:10.120 --> 00:03:11.370
We are well aware of that.

00:03:11.370 --> 00:03:15.150
And we actually looking
currently at revamping the

00:03:15.150 --> 00:03:17.940
whole thing to have one single
root system that's shared

00:03:17.940 --> 00:03:24.170
across command line, or boot
server, and Eclipse.

00:03:24.170 --> 00:03:26.880
AUDIENCE: Cool, that's what
I wanted to know.

00:03:26.880 --> 00:03:29.350
CHRIS DIBONA: Let's go for
this fellow over here.

00:03:29.350 --> 00:03:31.050
This one's empty, this mic
over here, by the way.

00:03:31.050 --> 00:03:31.403
Just so you know.

00:03:31.403 --> 00:03:33.440
That one's got 20 people on it.

00:03:33.440 --> 00:03:34.700
Go ahead.

00:03:34.700 --> 00:03:37.590
AUDIENCE: With the Chrome
browser now coming on Android,

00:03:37.590 --> 00:03:41.510
on Jelly Bean, what happens to
the original Android browser?

00:03:41.510 --> 00:03:44.740
Does that get taken out of
the Android open source?

00:03:44.740 --> 00:03:47.500
And also, what happens
with WebView?

00:03:47.500 --> 00:03:51.010
DAVE BURKE: So the Nexus 7 is
the first device that we

00:03:51.010 --> 00:03:52.510
actually pre-installed Chrome.

00:03:56.860 --> 00:03:58.855
With the Galaxy Nexus, when you
get an upgrade from Ice

00:03:58.855 --> 00:04:00.640
Cream Sandwich to Jelly Bean,
we're not actually going to

00:04:00.640 --> 00:04:01.660
pre-install Chrome.

00:04:01.660 --> 00:04:04.780
Because some users prefer using
the Android browser,

00:04:04.780 --> 00:04:07.890
which has flash support,
for example.

00:04:07.890 --> 00:04:12.340
What we are doing is actually
converting the web view that's

00:04:12.340 --> 00:04:14.780
in Android to the Chromium-based
code.

00:04:14.780 --> 00:04:16.800
So we're actually working on
upstreaming the code right now

00:04:16.800 --> 00:04:18.579
into chromium.org.

00:04:18.579 --> 00:04:22.630
And so then that WebView will
become one single browser.

00:04:22.630 --> 00:04:24.430
And then organizationally,
internally we

00:04:24.430 --> 00:04:25.290
sort of combined teams.

00:04:25.290 --> 00:04:27.746
So we have Android engineers and
Chrome engineers working

00:04:27.746 --> 00:04:28.480
on it together.

00:04:28.480 --> 00:04:31.750
So it's a grand unification
in theory.

00:04:31.750 --> 00:04:35.810
AUDIENCE: What happens when,
like in the old Android

00:04:35.810 --> 00:04:39.920
platform, you couldn't actually
update your browser?

00:04:39.920 --> 00:04:41.390
And you couldn't
update WebView.

00:04:41.390 --> 00:04:43.720
So does that mean WebView now
will get updated regularly?

00:04:43.720 --> 00:04:43.970
DAVE BURKE: No.

00:04:43.970 --> 00:04:47.740
Actually, it's a really
good question.

00:04:47.740 --> 00:04:51.380
So when a new version of Android
comes out, the WebView

00:04:51.380 --> 00:04:54.940
and the Chrome browser will
be one and the same.

00:04:54.940 --> 00:04:56.390
They'll use the same WebView.

00:04:56.390 --> 00:04:59.500
Then every six weeks, or
whatever it is, that we update

00:04:59.500 --> 00:05:02.060
Chrome, we'll update the
Chrome browser APK.

00:05:02.060 --> 00:05:04.470
But we won't change
the WebView.

00:05:04.470 --> 00:05:05.810
So it will actually be a larger

00:05:05.810 --> 00:05:07.300
install because of that.

00:05:07.300 --> 00:05:09.440
And the reason we want to do
that is we don't want to risk

00:05:09.440 --> 00:05:12.210
any compatibility issues with
people's applications who are

00:05:12.210 --> 00:05:13.330
using WebView.

00:05:13.330 --> 00:05:15.820
Chrome works really hard to make
sure that every update

00:05:15.820 --> 00:05:17.560
that you get is not only on your
desktop, it's backwardly

00:05:17.560 --> 00:05:18.090
compatible.

00:05:18.090 --> 00:05:20.830
But we're just going to
play very careful.

00:05:20.830 --> 00:05:23.680
So they're kind of separated.

00:05:23.680 --> 00:05:27.030
CHRIS DIBONA: So I'll take
one from the moderator.

00:05:27.030 --> 00:05:29.620
Google Maps SDK for Android is
getting long in the tooth.

00:05:29.620 --> 00:05:30.980
Memory leaks, no fragment
support, only a

00:05:30.980 --> 00:05:32.260
single map per app.

00:05:32.260 --> 00:05:33.510
Any word on improvements?

00:05:36.760 --> 00:05:38.270
You got it, Dave.

00:05:38.270 --> 00:05:41.050
DAVE BURKE: What can
I say about this?

00:05:41.050 --> 00:05:42.840
Yes, we're working on it.

00:05:42.840 --> 00:05:44.350
No ETA on launching it.

00:05:44.350 --> 00:05:47.160
But totally understood that
the version that's out

00:05:47.160 --> 00:05:48.630
there's quite old.

00:05:48.630 --> 00:05:51.010
We're just trying to figure out
exactly what it is we're

00:05:51.010 --> 00:05:52.770
launching and when we're
launching it.

00:05:52.770 --> 00:05:55.520
So I think I just dodged
that question.

00:05:55.520 --> 00:05:58.060
Sorry.

00:05:58.060 --> 00:06:00.520
AUDIENCE: Say that my app uses
the support library.

00:06:00.520 --> 00:06:04.000
Is there any work to
automatically have that use

00:06:04.000 --> 00:06:05.740
the native version
of the APIs?

00:06:08.480 --> 00:06:10.543
DIANNE HACKBORN: Some parts of
the support library switch to

00:06:10.543 --> 00:06:12.080
the native versions,
some don't.

00:06:12.080 --> 00:06:15.800
And that's done based on
what makes most sense.

00:06:15.800 --> 00:06:17.780
For example, fragments always
use one of the support

00:06:17.780 --> 00:06:20.210
libraries because you really
don't want to get the

00:06:20.210 --> 00:06:22.440
different behavior that's
in the platform.

00:06:22.440 --> 00:06:25.130
It doesn't really have an impact
on how it runs on the

00:06:25.130 --> 00:06:27.900
newer versions, so we decided
that it was best to always use

00:06:27.900 --> 00:06:30.430
the one in the support
library.

00:06:30.430 --> 00:06:32.070
There's a bunch of other stuff,
though, that lets you

00:06:32.070 --> 00:06:35.120
selectively use newer things
in the platform.

00:06:35.120 --> 00:06:36.370
AUDIENCE: Thank you.

00:06:37.870 --> 00:06:39.550
AUDIENCE: How can we
install multiple

00:06:39.550 --> 00:06:41.250
versions of the same APK?

00:06:41.250 --> 00:06:43.620
Like a product build, a QA
build, and a dev build.

00:06:49.630 --> 00:06:50.900
DIANNE HACKBORN: Give them
different package names, I

00:06:50.900 --> 00:06:55.100
guess, is the only
answer for that.

00:06:55.100 --> 00:06:57.450
AUDIENCE: But that generally
screws up our

00:06:57.450 --> 00:07:01.130
version control because--

00:07:01.130 --> 00:07:04.040
CHRIS DIBONA: Get better
version control.

00:07:04.040 --> 00:07:05.290
AUDIENCE: Thank you.

00:07:08.510 --> 00:07:10.730
CHRIS DIBONA: Will the ability
to back up our entire phone to

00:07:10.730 --> 00:07:12.040
a computer or some other
local storage be

00:07:12.040 --> 00:07:13.100
possible in Jelly Bean?

00:07:13.100 --> 00:07:13.880
As I understand, this
is possible

00:07:13.880 --> 00:07:14.790
in Ice Cream Sandwich.

00:07:14.790 --> 00:07:16.940
Will I be able to
use Android ABB?

00:07:16.940 --> 00:07:17.960
So if we're going to answer
that, I'm going to say I'm

00:07:17.960 --> 00:07:20.540
going to pick things are more
developer focused going

00:07:20.540 --> 00:07:21.680
forward, just so you know.

00:07:21.680 --> 00:07:23.270
As opposed to this very--
what I consider a very

00:07:23.270 --> 00:07:24.610
user-focused thing.

00:07:24.610 --> 00:07:27.730
Users are great, but go ahead.

00:07:27.730 --> 00:07:29.990
DIANNE HACKBORN: So the ADD
backup stuff that was put into

00:07:29.990 --> 00:07:32.590
Ice Cream Sandwich is
still in Jelly Bean.

00:07:32.590 --> 00:07:35.060
There were no changes really
done to it in Jelly Bean.

00:07:35.060 --> 00:07:36.110
CHRIS DIBONA: OK, great.

00:07:36.110 --> 00:07:38.610
I think I go this
direction here.

00:07:38.610 --> 00:07:41.220
AUDIENCE: So my question's about
app discovery on the

00:07:41.220 --> 00:07:42.810
Google Play store.

00:07:42.810 --> 00:07:46.420
So about one month ago,
I released my app

00:07:46.420 --> 00:07:48.310
for the first time.

00:07:48.310 --> 00:07:49.870
I only got like 30 downloads.

00:07:49.870 --> 00:07:51.710
It's a free app.

00:07:51.710 --> 00:07:54.540
If you compare that to releasing
iOS on the first

00:07:54.540 --> 00:07:57.330
time, I got like 4,000
downloads.

00:07:57.330 --> 00:07:59.310
It's because, I didn't actually
realize, but you guys

00:07:59.310 --> 00:08:01.280
removed the 'What's
New' section from

00:08:01.280 --> 00:08:02.780
the Google Play store.

00:08:02.780 --> 00:08:07.240
So there's no way that users
can find fresh new apps.

00:08:07.240 --> 00:08:09.645
So any plans to bring
back 'What's New'?

00:08:09.645 --> 00:08:12.220
I know you were getting spammed
a little bit, but

00:08:12.220 --> 00:08:14.620
maybe you could fix
the spam somehow.

00:08:14.620 --> 00:08:17.570
Get rid of the spam.

00:08:17.570 --> 00:08:20.380
MICHAEL SALISKY: The 'What's
New' on a per category basis

00:08:20.380 --> 00:08:22.560
is something that we're actively
looking at bringing

00:08:22.560 --> 00:08:24.310
back in the future.

00:08:24.310 --> 00:08:27.600
For app discovery in general,
that's something that we care

00:08:27.600 --> 00:08:28.270
very deeply about.

00:08:28.270 --> 00:08:30.980
We know that you all care very
deeply about as well.

00:08:30.980 --> 00:08:36.010
So improving, I think, the
storefront and making the apps

00:08:36.010 --> 00:08:39.300
that get featured there, making
a much broader and

00:08:39.300 --> 00:08:41.179
deeper list, is something
we're looking at.

00:08:41.179 --> 00:08:44.270
We also, just today, launched
Recommendations.

00:08:44.270 --> 00:08:46.510
And so doing personalized and
social recommedations is

00:08:46.510 --> 00:08:48.970
something that we hope will get
a lot more apps in front

00:08:48.970 --> 00:08:50.810
of people in a lot more
places as well.

00:08:54.800 --> 00:08:58.190
AUDIENCE: So with recent phones
that are running high

00:08:58.190 --> 00:09:03.790
resolutions like 1280 by 800,
is there a way to easily

00:09:03.790 --> 00:09:07.170
identify if the user device
is a phone or tablet?

00:09:07.170 --> 00:09:09.580
Because right now, I couldn't
find a way to do that.

00:09:12.990 --> 00:09:17.800
DIANNE HACKBORN: Resolution
doesn't matter, it's DP units.

00:09:17.800 --> 00:09:18.660
Actually it's kind of funny.

00:09:18.660 --> 00:09:23.240
We have Zoom, Galaxy Nexus,
and now the Nexus 7.

00:09:23.240 --> 00:09:26.560
There are all basically 1280
by 800 resolution screens.

00:09:26.560 --> 00:09:28.400
But they're very different
devices, and it's because they

00:09:28.400 --> 00:09:29.350
had different densities.

00:09:29.350 --> 00:09:32.540
So if you convert those to DP
units, then you see that

00:09:32.540 --> 00:09:35.090
they're actually very different
screen sizes.

00:09:35.090 --> 00:09:37.895
And that's why a lot of the
newer stuff the platform for

00:09:37.895 --> 00:09:39.830
selecting different
layouts and stuff

00:09:39.830 --> 00:09:42.490
is based on DP units.

00:09:42.490 --> 00:09:43.855
AUDIENCE: Can I ask
one more question?

00:09:46.730 --> 00:09:50.220
So we really like the new
smart app update when we

00:09:50.220 --> 00:09:52.632
update the delta of the app.

00:09:52.632 --> 00:09:56.600
Is there a way going forward for
the user to only download

00:09:56.600 --> 00:10:00.580
the scheduled image drivers for
his own phone resolutions

00:10:00.580 --> 00:10:02.920
instead of downloading the
whole applications?

00:10:02.920 --> 00:10:05.830
Because there's only one
resolution that will work for

00:10:05.830 --> 00:10:08.760
that device, which is kind of
a waste to the user and also

00:10:08.760 --> 00:10:10.010
the bandwidth.

00:10:15.420 --> 00:10:16.860
FICUS KIRKPATRICK: Yeah, I think
that's something that we

00:10:16.860 --> 00:10:17.910
want to look at doing.

00:10:17.910 --> 00:10:19.880
Right now, we found we got the
most bang for the buck by

00:10:19.880 --> 00:10:22.130
doing the deltas
like you said.

00:10:22.130 --> 00:10:28.610
The good news there is that the
delta kind of eats up most

00:10:28.610 --> 00:10:30.850
of the download that used
to have to take place.

00:10:30.850 --> 00:10:32.910
I think you could see a lot less
disk footprint, you're

00:10:32.910 --> 00:10:34.650
right, if we scale
things down.

00:10:34.650 --> 00:10:37.350
The problem is that we're seeing
a lot of these devices

00:10:37.350 --> 00:10:38.860
that can operate in multiple
densities.

00:10:38.860 --> 00:10:40.410
Like you plug it in
a TV or something.

00:10:40.410 --> 00:10:42.230
So it's a little trickier than
you might think at first

00:10:42.230 --> 00:10:46.090
glance, but it's definitely
something we're looking at.

00:10:46.090 --> 00:10:47.870
CHRIS DIBONA: Gifting and promo
codes for paid apps and

00:10:47.870 --> 00:10:49.700
in-apps purchases please.

00:10:49.700 --> 00:10:53.430
One use case is paid gift apps
to people who get to read the

00:10:53.430 --> 00:10:54.170
development without a hassle.

00:10:54.170 --> 00:10:55.380
[? This is reading ?] updates
outside of Google Play.

00:10:55.380 --> 00:10:59.030
So that's sort of update
to Google Play.

00:10:59.030 --> 00:11:00.120
MICHAEL SALISKY: Feature
request?

00:11:00.120 --> 00:11:00.930
CHRIS DIBONA: Yeah it's
a feature request.

00:11:00.930 --> 00:11:01.650
MICHAEL SALISKY: I think
that would be great.

00:11:01.650 --> 00:11:02.300
CHRIS DIBONA: There you go.

00:11:02.300 --> 00:11:06.381
OK, so find that and
start at it.

00:11:06.381 --> 00:11:08.960
So we go to you.

00:11:08.960 --> 00:11:11.200
AUDIENCE: This kind of ventures
away from being an

00:11:11.200 --> 00:11:14.700
app developer, but what would be
the best thing to focus on

00:11:14.700 --> 00:11:16.960
learning to eventually become
part of your team?

00:11:21.430 --> 00:11:22.490
DAVE BURKE: Skydiving.

00:11:22.490 --> 00:11:25.787
[AUDIENCE LAUGHTER]

00:11:25.787 --> 00:11:27.680
AUDIENCE: Thank you.

00:11:27.680 --> 00:11:28.840
CHRIS DIBONA: Or rappelling.

00:11:28.840 --> 00:11:29.600
Yeah.

00:11:29.600 --> 00:11:30.420
AUDIENCE: Hi.

00:11:30.420 --> 00:11:34.940
So as a developer, WebGL is
really, really exciting.

00:11:34.940 --> 00:11:40.140
Firefox and Opera on Android
offer WebGL support today.

00:11:40.140 --> 00:11:44.250
In iOS, you can flip a bit and
get WebGL in any WebView.

00:11:44.250 --> 00:11:46.720
But for Chrome for Android
and the Android browser,

00:11:46.720 --> 00:11:47.330
we don't have it.

00:11:47.330 --> 00:11:49.730
So when can we expect it?

00:11:49.730 --> 00:11:50.670
DAVE BURKE: Good question.

00:11:50.670 --> 00:11:52.200
Internally, I've seen
it working.

00:11:52.200 --> 00:11:56.870
I think the basic issue with
WebGL is denial of service and

00:11:56.870 --> 00:11:58.160
GPU stability.

00:11:58.160 --> 00:12:01.580
So the concern is, you're on
the drive-by web, you hit a

00:12:01.580 --> 00:12:03.960
web page, and then
it pegs your GPU.

00:12:03.960 --> 00:12:06.160
Either because it's a bug or
because it's malicious.

00:12:06.160 --> 00:12:09.830
Or worse it, exposes a GPU bug
and your phone reboots.

00:12:09.830 --> 00:12:13.860
And so there's some work
in Chronos to try to

00:12:13.860 --> 00:12:14.790
sanatize it, I guess.

00:12:14.790 --> 00:12:16.110
Make it safer.

00:12:16.110 --> 00:12:17.750
And so we're just kind of
looking at that right now and

00:12:17.750 --> 00:12:20.280
trying to figure out if we can
release it in a safe way.

00:12:20.280 --> 00:12:23.360
And again, Android's platform
software has to run across

00:12:23.360 --> 00:12:25.450
lots and lots of devices.

00:12:25.450 --> 00:12:28.250
And some devices have better,
more stable GPUs than others.

00:12:28.250 --> 00:12:30.260
So we're just being a little
bit cautious about it.

00:12:30.260 --> 00:12:32.010
So I think I just dodged
that puddle again.

00:12:32.010 --> 00:12:34.210
We're working on it, I don't
have an ETA, though.

00:12:34.210 --> 00:12:35.460
AUDIENCE: Thank you.

00:12:37.910 --> 00:12:39.220
AUDIENCE: Hey.

00:12:39.220 --> 00:12:42.740
So, very exciting stuff
announced this morning.

00:12:42.740 --> 00:12:46.810
However, that's Jelly Bean, and
last time I checked, 7% of

00:12:46.810 --> 00:12:48.390
people have still not--

00:12:48.390 --> 00:12:50.830
that's the only amount
of people we have

00:12:50.830 --> 00:12:52.470
on Ice Cream Sandwich.

00:12:52.470 --> 00:12:56.210
So my question is, how are we
going to get more people on

00:12:56.210 --> 00:12:58.865
Jelly Bean so that we can
use those features?

00:13:04.610 --> 00:13:06.960
DAVE BURKE: Well, we're going to
first give you free devices

00:13:06.960 --> 00:13:09.460
for Jelly Bean.

00:13:09.460 --> 00:13:10.470
That's one quick way to start.

00:13:10.470 --> 00:13:12.850
CHRIS DIBONA: How many
people are at I/O?

00:13:12.850 --> 00:13:14.960
DAVE BURKE: So it's a really
good question.

00:13:14.960 --> 00:13:18.795
I actually think the
acceleration of ICS, Ice Cream

00:13:18.795 --> 00:13:21.230
Sandwich, has been
pretty good.

00:13:21.230 --> 00:13:25.550
Because we only released it,
like, literally months ago.

00:13:25.550 --> 00:13:26.590
One of the things
we're doing--

00:13:26.590 --> 00:13:27.180
I'm going to answer
at the keynote--

00:13:27.180 --> 00:13:29.560
is the PDK, so the platform
development kit.

00:13:29.560 --> 00:13:33.290
And so what we're trying to do
is get device manufacturers

00:13:33.290 --> 00:13:36.610
access to the source that we're
working on earlier.

00:13:36.610 --> 00:13:39.210
So that they can actually work
in parallel to us to speed up

00:13:39.210 --> 00:13:42.420
the time it takes to get
out a new device.

00:13:42.420 --> 00:13:44.150
So that's one of
the initiatives

00:13:44.150 --> 00:13:44.970
we're trying to do.

00:13:44.970 --> 00:13:49.600
The other thing we're noticing
is there's is a really great

00:13:49.600 --> 00:13:51.060
ecosystem built up
around Android.

00:13:51.060 --> 00:13:53.080
We're seeing device
manufacturers getting more

00:13:53.080 --> 00:13:54.280
Android savvy.

00:13:54.280 --> 00:13:54.960
They're really sharp.

00:13:54.960 --> 00:13:55.930
They really know what
they're doing.

00:13:55.930 --> 00:13:57.440
And so they're actually getting

00:13:57.440 --> 00:14:00.460
faster at building devices.

00:14:00.460 --> 00:14:03.970
So I think it's going to get
better because of that.

00:14:03.970 --> 00:14:07.490
I don't have a silver bullet
to offer other than that.

00:14:07.490 --> 00:14:09.930
The other thing is,
I've seen some

00:14:09.930 --> 00:14:11.250
distribution curves of versions.

00:14:11.250 --> 00:14:13.240
And you've got to remember that
we sort of had that weird

00:14:13.240 --> 00:14:15.500
stage where we had Gingerbread
and Honeycomb.

00:14:15.500 --> 00:14:17.730
We were kind of like two
versions as we did the tablet

00:14:17.730 --> 00:14:20.010
and then we kind of came
back together in ICS.

00:14:20.010 --> 00:14:22.460
And so I think that sometimes
skews data

00:14:22.460 --> 00:14:23.150
when you look at that.

00:14:23.150 --> 00:14:25.320
I think what you're going
to see is ICS

00:14:25.320 --> 00:14:26.410
ramp up quite quickly.

00:14:26.410 --> 00:14:29.230
And then the delta from ICS to
Jelly Bean, from a device

00:14:29.230 --> 00:14:30.640
manufacturer is actually
quite small.

00:14:30.640 --> 00:14:32.700
So I think you'll see, then,
the ICS flip to Jelly Bean

00:14:32.700 --> 00:14:34.220
more quickly.

00:14:34.220 --> 00:14:35.352
That's a prediction.

00:14:35.352 --> 00:14:36.602
AUDIENCE: Thank you.

00:14:39.230 --> 00:14:42.740
[FEEDBACK]

00:14:42.740 --> 00:14:44.610
AUDIENCE: How much time
do we have to

00:14:44.610 --> 00:14:47.006
transition from CT to C--

00:14:47.006 --> 00:14:48.900
CD--

00:14:48.900 --> 00:14:50.150
Help me out here.

00:14:50.150 --> 00:14:51.950
DAVE BURKE: C2DM?

00:14:51.950 --> 00:14:53.920
AUDIENCE: Right, to the Google
cloud messaging.

00:14:53.920 --> 00:14:57.480
At what point is the new device
registration just going

00:14:57.480 --> 00:15:00.370
to stop working on C2DM?

00:15:00.370 --> 00:15:01.470
FRED CONTADA: It'll
be a long time.

00:15:01.470 --> 00:15:03.370
We'll give you plenty
of heads' up

00:15:03.370 --> 00:15:04.280
before that will happen.

00:15:04.280 --> 00:15:05.010
AUDIENCE: Like a year?

00:15:05.010 --> 00:15:06.260
FRED CONTADA: Like a year.

00:15:09.240 --> 00:15:10.960
AUDIENCE: Is there anyone
here who can answer a

00:15:10.960 --> 00:15:12.210
render script question?

00:15:15.230 --> 00:15:18.170
DAVE BURKE: I can answer
easy ones.

00:15:18.170 --> 00:15:21.990
AUDIENCE: Regarding shaders
and variable packing.

00:15:21.990 --> 00:15:24.160
DAVE BURKE: Getting nervous.

00:15:24.160 --> 00:15:29.014
AUDIENCE: So in writing my
program, I've discovered that

00:15:29.014 --> 00:15:33.090
in the data structures that I
create, the render script

00:15:33.090 --> 00:15:36.830
seems to be converting Boolean
and int values into floats.

00:15:36.830 --> 00:15:40.160
So if I try and execute an if
statement on the structure

00:15:40.160 --> 00:15:44.020
member, I end up with an error
message saying that it has to

00:15:44.020 --> 00:15:46.890
be a Boolean value.

00:15:46.890 --> 00:15:50.140
Obviously I can type cast it in
the shader to fix that, but

00:15:50.140 --> 00:15:52.940
the real issue becomes, it
makes it difficult to

00:15:52.940 --> 00:15:55.320
properly pack data.

00:15:55.320 --> 00:15:56.690
DAVE BURKE: Yeah, I don't
know the answer, but I

00:15:56.690 --> 00:15:57.470
know a man who does.

00:15:57.470 --> 00:15:59.660
So it just come up to me
afterwards, I'll get your

00:15:59.660 --> 00:16:01.380
details and I'll
connect you up.

00:16:01.380 --> 00:16:03.810
AUDIENCE: OK, thank you.

00:16:03.810 --> 00:16:04.920
AUDIENCE: Hi.

00:16:04.920 --> 00:16:07.730
We've seen a lot of the exciting
stuff from the Google

00:16:07.730 --> 00:16:09.460
Maps team today.

00:16:09.460 --> 00:16:13.510
And a lot of the stuff is
focused on desktop usage

00:16:13.510 --> 00:16:15.080
through a browser.

00:16:15.080 --> 00:16:19.960
Now when running that on an
Android smartphone or tablet

00:16:19.960 --> 00:16:23.450
you see that from a user
experience point of view, it's

00:16:23.450 --> 00:16:26.450
kind of lacking as opposed to
the native MapView component

00:16:26.450 --> 00:16:28.430
in Android, up to the
point where it

00:16:28.430 --> 00:16:30.770
becomes barely usable.

00:16:30.770 --> 00:16:34.910
What is the way forward in that
respect and what should

00:16:34.910 --> 00:16:38.680
we do as developers that want
to leverage Google Maps

00:16:38.680 --> 00:16:40.915
technologies on Android
devices?

00:16:47.520 --> 00:16:50.055
DAN MORRILL: So yeah, let me
just rephrase the question and

00:16:50.055 --> 00:16:50.850
make sure I understand
what you're saying.

00:16:50.850 --> 00:16:53.270
You're basically pointing out
that there's a lot of features

00:16:53.270 --> 00:16:55.860
in maps that are not necessarily
available to

00:16:55.860 --> 00:16:58.420
developers via WebView?

00:16:58.420 --> 00:17:00.480
AUDIENCE: They are available
via WebView,

00:17:00.480 --> 00:17:01.605
but it's really slow.

00:17:01.605 --> 00:17:04.690
DAN MORRILL: I'm sorry, not
a WebView, a MapView.

00:17:04.690 --> 00:17:05.970
AUDIENCE: Correct.

00:17:05.970 --> 00:17:08.050
DAN MORRILL: Yeah, it's
absolutely the case that the

00:17:08.050 --> 00:17:10.790
MapView is getting kind
of long in the tooth.

00:17:10.790 --> 00:17:12.480
It came from Android 1.0.

00:17:12.480 --> 00:17:13.869
The API has not changed
significantly

00:17:13.869 --> 00:17:15.210
really since then.

00:17:15.210 --> 00:17:17.160
That is, in fact, something
that we're looking at.

00:17:17.160 --> 00:17:21.520
We're aware that there's this
increasing functionality gap.

00:17:21.520 --> 00:17:23.990
It's just one of those things
as a being kind of a tricky

00:17:23.990 --> 00:17:26.829
problem to solve because it's
possible to build a cool, new

00:17:26.829 --> 00:17:29.080
version, but then how do
you maintain backwards

00:17:29.080 --> 00:17:29.980
compatibility?

00:17:29.980 --> 00:17:32.290
Do you maintain backwards
compatibility?

00:17:32.290 --> 00:17:35.850
So we don't have a ready answer,
but it actually came

00:17:35.850 --> 00:17:39.590
up relatively recently with us
and we're working with GEO

00:17:39.590 --> 00:17:41.300
team to figure out what the
right way forward there is.

00:17:41.300 --> 00:17:44.020
So we're definitely aware of
that problem and we're looking

00:17:44.020 --> 00:17:46.070
into it, but we recognize
it's an issue.

00:17:46.070 --> 00:17:47.670
AUDIENCE: And what would
be the guidelines for

00:17:47.670 --> 00:17:49.440
developers right now?

00:17:49.440 --> 00:17:53.650
DAN MORRILL: For now, if you
can make it work with the

00:17:53.650 --> 00:17:57.920
current MapView, go
ahead and do that.

00:17:57.920 --> 00:17:59.920
But do whatever works
for your app.

00:17:59.920 --> 00:18:04.460
We don't really have a best
practice at this time for what

00:18:04.460 --> 00:18:05.545
you should do instead.

00:18:05.545 --> 00:18:06.970
AUDIENCE: OK, thanks.

00:18:06.970 --> 00:18:08.480
CHRIS DIBONA: So on
the [? dory ?]

00:18:08.480 --> 00:18:10.865
it says, on the Nexus 7, the
notification bar and the

00:18:10.865 --> 00:18:12.870
system bar are split similar
to phones, rather than

00:18:12.870 --> 00:18:14.870
combined such as on current
HCIS devices.

00:18:17.910 --> 00:18:19.210
Is a similar setup going
to be used for 10

00:18:19.210 --> 00:18:21.220
inch tablets as well?

00:18:21.220 --> 00:18:24.770
So this is sort of like, what
happens when the DP

00:18:24.770 --> 00:18:26.230
units are to small?

00:18:26.230 --> 00:18:26.670
AUDIENCE: What was
the question?

00:18:26.670 --> 00:18:28.430
Yeah, could you read
them slower?

00:18:28.430 --> 00:18:29.400
CHRIS DIBONA: Sure.

00:18:29.400 --> 00:18:30.290
Maybe.

00:18:30.290 --> 00:18:33.540
On the Nexus 7, the notification
bar and the

00:18:33.540 --> 00:18:36.900
system bar are split similar
to phones, rather than

00:18:36.900 --> 00:18:39.730
combined, as on the Zoom.

00:18:39.730 --> 00:18:41.770
Is a similar setup going
to be used on future

00:18:41.770 --> 00:18:45.030
10-inch devices as well?

00:18:45.030 --> 00:18:46.790
DIANNE HACKBORN: Jelly Bean on
a 10-inch tablet uses the

00:18:46.790 --> 00:18:48.256
system bar like before.

00:18:48.256 --> 00:18:50.030
CHRIS DIBONA: Ok,
so there you go.

00:18:50.030 --> 00:18:51.280
Alright.

00:18:53.190 --> 00:18:55.428
I talk slowly, they get
really pissed off.

00:18:55.428 --> 00:18:56.880
Go ahead.

00:18:56.880 --> 00:18:58.310
AUDIENCE: I had a
question about--

00:18:58.310 --> 00:19:06.010
more of a hardware question
slash viewpoint from you guys.

00:19:06.010 --> 00:19:09.240
Most of my organization uses
iPhones, and I've basically

00:19:09.240 --> 00:19:13.550
been persuading them to start
letting people use Android

00:19:13.550 --> 00:19:14.520
based phones.

00:19:14.520 --> 00:19:17.180
And one of the problems that
we've run into is with all the

00:19:17.180 --> 00:19:19.290
different manufacturers and
phone types out there, some

00:19:19.290 --> 00:19:22.470
have external media, or external
storage capabilities

00:19:22.470 --> 00:19:23.520
and some don't.

00:19:23.520 --> 00:19:25.520
And the Nexus doesn't.

00:19:25.520 --> 00:19:29.100
And of the other things that's
really been a barrier to entry

00:19:29.100 --> 00:19:32.060
for my management team people is
that you can't just plug it

00:19:32.060 --> 00:19:35.610
in and mount it like you
can most other--

00:19:35.610 --> 00:19:38.440
like the Droid you can,
or the Razr Max.

00:19:38.440 --> 00:19:41.840
If you plug it in, it just shows
up like a USB drive.

00:19:41.840 --> 00:19:45.670
And with the Nexus, you have to
go into a PTP or MTP mode.

00:19:45.670 --> 00:19:49.180
And if you're a Linux user,
that's even more of a headache

00:19:49.180 --> 00:19:52.030
than it is on Windows and Mac.

00:19:52.030 --> 00:19:55.800
So is there a reason why you
guys chose to do non-block USB

00:19:55.800 --> 00:19:56.330
connection?

00:19:56.330 --> 00:20:00.110
Or can you to speak to why
that is, and if that's

00:20:00.110 --> 00:20:01.360
something that you're going
to continue to move

00:20:01.360 --> 00:20:02.080
forward with that?

00:20:02.080 --> 00:20:06.470
Or will be a day where it just
mounts like a USB drive?

00:20:12.000 --> 00:20:13.950
REBECCA ZAVIN: I think some of
that has to do with, a little

00:20:13.950 --> 00:20:17.760
bit, about user experience
around having that mount as a

00:20:17.760 --> 00:20:19.790
USB key, essentially.

00:20:19.790 --> 00:20:21.190
I don't know that we
have a concrete

00:20:21.190 --> 00:20:22.730
plan for moving forward.

00:20:22.730 --> 00:20:23.340
I'm looking at Dave.

00:20:23.340 --> 00:20:24.480
Yeah.

00:20:24.480 --> 00:20:25.635
But I think--

00:20:25.635 --> 00:20:27.080
AUDIENCE: Has it been something
that anybody else

00:20:27.080 --> 00:20:27.950
has mentioned to you?

00:20:27.950 --> 00:20:29.730
Or has that even come up?

00:20:29.730 --> 00:20:31.660
REBECCA ZAVIN: We definitely
know that there are some

00:20:31.660 --> 00:20:34.070
devices that do USB mass
storage, which is what you're

00:20:34.070 --> 00:20:35.820
talking about, and
some that don't.

00:20:35.820 --> 00:20:38.080
And that we haven't done it on
our Nexus products recently.

00:20:38.080 --> 00:20:41.460
I think there are some really
great user experiences around

00:20:41.460 --> 00:20:43.470
PTP, your PPTP and MTP.

00:20:43.470 --> 00:20:44.700
But you're right.

00:20:44.700 --> 00:20:48.650
You need, like, MTP on Linux
and stuff to get it going.

00:20:48.650 --> 00:20:51.040
There are some good tools, but
like doing anything from

00:20:51.040 --> 00:20:54.190
desktop Linux, it's a little
bit more complex.

00:20:54.190 --> 00:20:56.840
DIANNE HACKBORN: USB mass
storage is kind of crummy.

00:20:56.840 --> 00:20:59.930
I don't think we really
want to do it.

00:20:59.930 --> 00:21:04.250
It requires, for example, if you
have a 32-gig phone, you

00:21:04.250 --> 00:21:06.470
have to partition it into a
hard partition between the

00:21:06.470 --> 00:21:07.960
part that would be USB
mass storage and

00:21:07.960 --> 00:21:08.730
the part that's not.

00:21:08.730 --> 00:21:13.780
And so being able to not have a
FAT file system that has all

00:21:13.780 --> 00:21:16.750
the negatives to it that forces
you to do a partition

00:21:16.750 --> 00:21:18.590
makes a lot things better.

00:21:18.590 --> 00:21:22.390
So we've kind of tended to not
do those in the newer devices.

00:21:22.390 --> 00:21:25.210
AUDIENCE: It seems like that's
how the external storage is

00:21:25.210 --> 00:21:26.520
like what the Droid does.

00:21:26.520 --> 00:21:28.570
That's your USB mass
key is that thing.

00:21:28.570 --> 00:21:31.030
Whether you pull it out and
plug it directly into your

00:21:31.030 --> 00:21:33.910
machine or you leave it mounted
into your phone, it

00:21:33.910 --> 00:21:36.100
just makes it very difficult
for me to convince somebody

00:21:36.100 --> 00:21:39.110
that they can't drag and
drop stuff onto it.

00:21:39.110 --> 00:21:40.360
So I was curious.

00:21:43.240 --> 00:21:45.730
DIANNE HACKBORN: Dragging and
dropping, I think, is probably

00:21:45.730 --> 00:21:47.410
the host side's software
problem.

00:21:47.410 --> 00:21:49.540
There's no reason why you
wouldn't be able to have it

00:21:49.540 --> 00:21:51.230
all working.

00:21:51.230 --> 00:21:53.875
The iPhone does not use USB mass
storage, I don't think.

00:21:57.830 --> 00:21:59.980
CHRIS DIBONA: There's no way
to create an x86 emulator

00:21:59.980 --> 00:22:03.390
using, quote, "API level 15 or
any other API level." This

00:22:03.390 --> 00:22:05.430
prevents us from using an Intel
emulator to develop apps

00:22:05.430 --> 00:22:06.640
that use maps, for example.

00:22:06.640 --> 00:22:10.750
Is support for the Google APIs
coming to that architecture?

00:22:10.750 --> 00:22:13.020
AUDIENCE: What was
the question?

00:22:13.020 --> 00:22:15.530
CHRIS DIBONA: Sorry.

00:22:15.530 --> 00:22:22.390
Basically, support of x86 for
the APIs and the emulator.

00:22:22.390 --> 00:22:24.750
XAVIER DUCROHET: So
we are aware that.

00:22:24.750 --> 00:22:28.710
Intel is actually the one who
worked a lot on making the

00:22:28.710 --> 00:22:31.310
kernel for the emulator
work on x86 well.

00:22:31.310 --> 00:22:33.710
And so they've been
contributing some

00:22:33.710 --> 00:22:35.490
patches back to us.

00:22:35.490 --> 00:22:38.450
So at some point, we do intend
to see if we can actually

00:22:38.450 --> 00:22:39.750
release that.

00:22:39.750 --> 00:22:42.050
Something we haven't released,
a Jelly Bean system image

00:22:42.050 --> 00:22:45.290
running x86, we're working
with Intel to be able to

00:22:45.290 --> 00:22:46.640
release that.

00:22:46.640 --> 00:22:49.200
But right now, it's kind of
like we're not in total

00:22:49.200 --> 00:22:51.570
control, because we
depend on them on

00:22:51.570 --> 00:22:53.660
helping us fix some issues.

00:22:53.660 --> 00:22:55.730
But as soon as we can do
it, we'll release that.

00:22:59.600 --> 00:23:00.430
AUDIENCE: I do Android

00:23:00.430 --> 00:23:03.440
development on atypical devices.

00:23:03.440 --> 00:23:06.440
Not tablets, not phones.

00:23:06.440 --> 00:23:07.550
CHRIS DIBONA: Pacemakers?

00:23:07.550 --> 00:23:08.160
AUDIENCE: Say what?

00:23:08.160 --> 00:23:09.410
CHRIS DIBONA: Pacemakers?

00:23:11.170 --> 00:23:13.320
AUDIENCE: Media set-top boxes.

00:23:13.320 --> 00:23:16.680
Specifically for
entertainment-based apps and

00:23:16.680 --> 00:23:18.970
digital signage, that
sort of thing.

00:23:18.970 --> 00:23:24.270
And one of my biggest headaches
is the media player.

00:23:24.270 --> 00:23:28.470
I'm aware, for technical and
legal reasons, that you can't

00:23:28.470 --> 00:23:30.660
just have one beautiful
media player that

00:23:30.660 --> 00:23:32.990
works across all devices.

00:23:32.990 --> 00:23:35.780
Anyway, so I get all these
different devices, and they

00:23:35.780 --> 00:23:39.060
always have some different media
player under the hood

00:23:39.060 --> 00:23:40.410
that works different.

00:23:40.410 --> 00:23:42.970
The performance is
weird, scales

00:23:42.970 --> 00:23:44.880
weird, it buffers weird.

00:23:44.880 --> 00:23:46.930
There's something I have to--

00:23:46.930 --> 00:23:51.190
whatever shipment of boxes has
to work very differently.

00:23:51.190 --> 00:23:56.840
I've tried several open-source
media players that use NDK and

00:23:56.840 --> 00:24:00.510
they've been buggy and also
had performance problems.

00:24:00.510 --> 00:24:03.510
And so I was wondering, with
your greater awareness of the

00:24:03.510 --> 00:24:07.020
Android world, if you are aware
of any open-source media

00:24:07.020 --> 00:24:12.740
player projects that could
possibly reduce my headache.

00:24:12.740 --> 00:24:15.520
DAVE BURKE: So what version
of Android is this?

00:24:15.520 --> 00:24:17.380
AUDIENCE: 4.0.

00:24:17.380 --> 00:24:18.290
Or yeah, 4.0.2.

00:24:18.290 --> 00:24:21.160
DAVE BURKE: So it really comes
down to the hardware decoders

00:24:21.160 --> 00:24:23.840
and encoders that you're
struggling with.

00:24:23.840 --> 00:24:26.180
The Android framework, the media
framework's built on

00:24:26.180 --> 00:24:28.160
something called Stagefright and
then the media player sits

00:24:28.160 --> 00:24:29.510
on top of that.

00:24:29.510 --> 00:24:31.590
We just introduced some new
Jelly Bean APIs called

00:24:31.590 --> 00:24:32.240
MediaCodec.

00:24:32.240 --> 00:24:34.030
Actually, James just came
from a talk on that.

00:24:34.030 --> 00:24:35.040
AUDIENCE: I was in that talk.

00:24:35.040 --> 00:24:36.780
DAVE BURKE: Cool, ok
so you got it.

00:24:36.780 --> 00:24:42.400
The issue, though, is that we
just mandate different codecs,

00:24:42.400 --> 00:24:44.950
different profiles, but after
that it's really up to the

00:24:44.950 --> 00:24:45.950
implementations.

00:24:45.950 --> 00:24:48.280
And so it is true that there's
some variability on the

00:24:48.280 --> 00:24:49.580
hardware codecs.

00:24:49.580 --> 00:24:51.970
If we could standardize on them
and just go, here's the

00:24:51.970 --> 00:24:52.790
codec, we would.

00:24:52.790 --> 00:24:54.890
But that would mean it would be
software and you wouldn't

00:24:54.890 --> 00:24:57.060
have the performance.

00:24:57.060 --> 00:25:00.160
But I think, maybe the right
answer is getting more tests

00:25:00.160 --> 00:25:02.320
on our side to make sure
that issues you

00:25:02.320 --> 00:25:05.920
run into we can control.

00:25:05.920 --> 00:25:07.450
AUDIENCE: I was just curious,
are you aware of any

00:25:07.450 --> 00:25:11.950
open-source projects
out there for it?

00:25:11.950 --> 00:25:13.760
CHRIS DIBONA: Not any of the
ones that you haven't already

00:25:13.760 --> 00:25:15.580
checked out, like
MPlayer and VLC.

00:25:15.580 --> 00:25:17.320
We know you're looking
at that, right.

00:25:17.320 --> 00:25:19.100
And they're having
their issues.

00:25:19.100 --> 00:25:20.480
DAVE BURKE: And open
source will be

00:25:20.480 --> 00:25:22.200
software-based codecs, probably.

00:25:22.200 --> 00:25:24.240
And so you won't get
the performance.

00:25:24.240 --> 00:25:27.360
CHRIS DIBONA: They tie in to
the GPUs a little bit, but

00:25:27.360 --> 00:25:28.610
it's a pretty challenging
area.

00:25:31.790 --> 00:25:35.140
Yeah, I haven't heard of any
special program just for

00:25:35.140 --> 00:25:38.510
Android in the open source world
that's addressed this

00:25:38.510 --> 00:25:41.762
any better than, say feel
VLC or MPlayer.

00:25:41.762 --> 00:25:44.300
REBECCA ZAVIN: If it makes you
feel any better, James and I

00:25:44.300 --> 00:25:46.420
both spend a significant amount
of our time making this

00:25:46.420 --> 00:25:48.440
work well on the devices
that we ship.

00:25:48.440 --> 00:25:51.550
So you're not alone.

00:25:51.550 --> 00:25:53.080
AUDIENCE: That's good to know.

00:25:53.080 --> 00:25:55.470
Thank you.

00:25:55.470 --> 00:25:59.160
AUDIENCE: I work on a Scala
plug-in to make it easy to run

00:25:59.160 --> 00:26:01.700
Scala code on Android devices.

00:26:01.700 --> 00:26:04.300
And one of the things that has
to happen is the shrink step

00:26:04.300 --> 00:26:07.293
in ProGuard so you get something
that can be dexed.

00:26:07.293 --> 00:26:10.900
But I end up with the full Scala
library that I'd like to

00:26:10.900 --> 00:26:14.300
use at code completion time, and
then a minified version of

00:26:14.300 --> 00:26:16.630
that but I want you to dex.

00:26:16.630 --> 00:26:19.040
Is there a way to hook into the
Eclipse build tool to do

00:26:19.040 --> 00:26:20.920
that so I could make this a
really nice experience for

00:26:20.920 --> 00:26:24.230
someone just starting out of the
box not using Ant or Maven

00:26:24.230 --> 00:26:25.910
or something like that?

00:26:25.910 --> 00:26:28.490
XAVIER DUCROHET: Not at the
moment, but we can talk after

00:26:28.490 --> 00:26:31.550
and we can open up some
extension point for you to do

00:26:31.550 --> 00:26:32.470
that if you want.

00:26:32.470 --> 00:26:35.250
AUDIENCE: Great, thanks.

00:26:35.250 --> 00:26:35.740
AUDIENCE: Hi.

00:26:35.740 --> 00:26:38.690
So in the radio interface layer
with the Android source

00:26:38.690 --> 00:26:41.510
code, there's references
made to RIL

00:26:41.510 --> 00:26:44.260
version 4 of the interface.

00:26:44.260 --> 00:26:46.600
And then it says at the current
version is version 6

00:26:46.600 --> 00:26:48.870
and I assume it goes all
the way back to 1.

00:26:48.870 --> 00:26:51.640
But I haven't been able to find
any references to the

00:26:51.640 --> 00:26:54.820
documentation specifically
for this interface.

00:26:54.820 --> 00:26:58.570
And by proxy, the AT command set
that the radio interface

00:26:58.570 --> 00:27:02.910
supports, can we just assume
that that's a subset of the

00:27:02.910 --> 00:27:06.360
standard AT commands, or are
any of the newer commands

00:27:06.360 --> 00:27:08.435
supported for SMS or MMS?

00:27:11.860 --> 00:27:13.700
DAVE BURKE: You're looking
for documentation?

00:27:13.700 --> 00:27:14.830
AUDIENCE: Yeah, basically.

00:27:14.830 --> 00:27:15.980
DAVE BURKE: Oh.

00:27:15.980 --> 00:27:18.980
[AUDIENCE LAUGHTER]

00:27:18.980 --> 00:27:21.060
DAVE BURKE: Yeah, we don't have
as much documentation.

00:27:21.060 --> 00:27:23.120
Actually, for the PDK, we're
trying to build more

00:27:23.120 --> 00:27:23.620
documentation.

00:27:23.620 --> 00:27:25.370
Because what you're talking
about the real level is really

00:27:25.370 --> 00:27:27.300
PDK-level stuff.

00:27:27.300 --> 00:27:31.380
To your question about the Hayes
commands, I don't know

00:27:31.380 --> 00:27:31.590
the answer.

00:27:31.590 --> 00:27:32.870
I'm not sure if anyone else--

00:27:32.870 --> 00:27:34.730
Rebecca, if you know?

00:27:34.730 --> 00:27:37.470
REBECCA ZAVIN: I think it is
a subset, but I don't know.

00:27:37.470 --> 00:27:39.910
DAVE BURKE: I think it's also
very radio-dependent, as well.

00:27:39.910 --> 00:27:41.430
REBECCA ZAVIN: We do
support a subset of

00:27:41.430 --> 00:27:43.000
AT commands, I think.

00:27:43.000 --> 00:27:44.390
AUDIENCE: I guess the question,
basically, for the

00:27:44.390 --> 00:27:47.360
AT stuff was, can we assume that
the AT commands that work

00:27:47.360 --> 00:27:50.230
across all devices are on
Android and that there aren't

00:27:50.230 --> 00:27:53.160
any special ones for Android?

00:27:53.160 --> 00:27:54.760
REBECCA ZAVIN: I think that's
probably a safe assumption

00:27:54.760 --> 00:27:58.400
based on the way that we
interact with our partners who

00:27:58.400 --> 00:27:59.220
build radios.

00:27:59.220 --> 00:28:00.810
But I don't know for sure.

00:28:00.810 --> 00:28:02.550
That's a good question to ask
on the mailing lists.

00:28:02.550 --> 00:28:05.400
AUDIENCE: OK, thank you.

00:28:05.400 --> 00:28:06.470
AUDIENCE: Hi.

00:28:06.470 --> 00:28:11.230
I downloaded the last Google+
version and it's actually

00:28:11.230 --> 00:28:13.670
really cool with that
menu that opens up.

00:28:13.670 --> 00:28:18.420
And I was wondering, it's a UI
pattern that was first seen in

00:28:18.420 --> 00:28:19.910
the Facebook application.

00:28:19.910 --> 00:28:22.830
I was wondering, if at some
point, we might get something

00:28:22.830 --> 00:28:25.440
like that in the support
library.

00:28:25.440 --> 00:28:28.470
Because it's really cool and it
has been implemented across

00:28:28.470 --> 00:28:30.820
different apps in
different ways.

00:28:30.820 --> 00:28:34.620
And I'm just waiting
for one standard.

00:28:34.620 --> 00:28:35.970
DIANNE HACKBORN: No plans
at this point.

00:28:35.970 --> 00:28:36.680
AUDIENCE: OK.

00:28:36.680 --> 00:28:38.900
DAVE BURKE: It's a good
idea, though.

00:28:38.900 --> 00:28:42.520
[APPLAUSE]

00:28:42.520 --> 00:28:43.860
DAVE BURKE: Spotify does
it really well.

00:28:43.860 --> 00:28:44.735
Have you seen the spotify app?

00:28:44.735 --> 00:28:46.350
Yeah, it's good.

00:28:46.350 --> 00:28:47.430
So does YouTube, actually.

00:28:47.430 --> 00:28:49.090
The latest version.

00:28:49.090 --> 00:28:51.210
No, not YouTube, Google+.

00:28:51.210 --> 00:28:52.090
Oh, and YouTube.

00:28:52.090 --> 00:28:54.680
So we do, yeah good idea.

00:28:58.270 --> 00:29:01.040
AUDIENCE: Regarding the PDK
that's being released, is that

00:29:01.040 --> 00:29:02.220
going to be targeting
the Android

00:29:02.220 --> 00:29:04.580
open-source platform as well?

00:29:04.580 --> 00:29:07.310
Or is that primarily for OEM?

00:29:07.310 --> 00:29:08.260
DAVE BURKE: Right now
it's targeted

00:29:08.260 --> 00:29:09.510
towards OPMs, basically.

00:29:12.240 --> 00:29:16.700
One of the problems is we're
kind of a finite-sized team,

00:29:16.700 --> 00:29:18.880
and so we have to be careful.

00:29:18.880 --> 00:29:21.950
If we were interacting with
everybody while developing, we

00:29:21.950 --> 00:29:22.640
would just slow down.

00:29:22.640 --> 00:29:26.270
And so we decided we would try
this approach where we make it

00:29:26.270 --> 00:29:27.950
available to device
manufacturers.

00:29:27.950 --> 00:29:30.820
The explicit goal is to speed up
getting devices to market.

00:29:30.820 --> 00:29:32.266
That's our first goal.

00:29:32.266 --> 00:29:35.720
AUDIENCE: Is there going to be
any increased support, I

00:29:35.720 --> 00:29:39.650
guess, on the Android
open-source side of things?

00:29:39.650 --> 00:29:42.760
DAVE BURKE: That's kind
of [? orthogonal ?]

00:29:42.760 --> 00:29:44.010
to the PDK.

00:29:46.850 --> 00:29:50.350
AUDIENCE: All right, I know
you addressed the Android

00:29:50.350 --> 00:29:51.440
software updates earlier.

00:29:51.440 --> 00:29:54.510
But I was wondering, whatever
happened to the Android update

00:29:54.510 --> 00:29:58.900
alliance which guaranteed, with
OEMs, upgrades in two

00:29:58.900 --> 00:30:01.491
months after release
of device?

00:30:01.491 --> 00:30:08.230
[APPLAUSE]

00:30:08.230 --> 00:30:10.330
DAVE BURKE: Did we
say two months?

00:30:10.330 --> 00:30:12.880
CHRIS DIBONA: I think that might
have been in base-10.

00:30:12.880 --> 00:30:15.560
Thought it was base-16.

00:30:15.560 --> 00:30:17.540
DAVE BURKE: It was 18 months.

00:30:17.540 --> 00:30:20.310
So I think what we
said last year--

00:30:20.310 --> 00:30:21.630
and I wasn't here last year--

00:30:21.630 --> 00:30:24.400
what we said last year was, we
would make sure that devices

00:30:24.400 --> 00:30:26.970
got supported for 18 months,
and so we're

00:30:26.970 --> 00:30:28.185
certainly doing that.

00:30:28.185 --> 00:30:31.610
It hasn't been 18 months since
last year, so you can't prove

00:30:31.610 --> 00:30:33.190
or disprove if it's
working yet.

00:30:36.930 --> 00:30:39.040
It's an important thing.

00:30:39.040 --> 00:30:40.120
CHRIS DIBONA: They're going
to call you in December.

00:30:40.120 --> 00:30:40.720
You know that, right?

00:30:40.720 --> 00:30:41.970
DAVE BURKE: Really?

00:30:44.660 --> 00:30:45.440
It's a good question.

00:30:45.440 --> 00:30:49.040
It's something we're working
with partners hard on.

00:30:49.040 --> 00:30:51.000
AUDIENCE: In Jelly Bean you have
the ability to disable

00:30:51.000 --> 00:30:53.080
notifications per application
base.

00:30:53.080 --> 00:30:55.090
Do you have any plans to extend
it to more permissions?

00:30:55.090 --> 00:30:57.150
Like, say I don't want a certain
application to have

00:30:57.150 --> 00:31:00.410
internet access anymore.

00:31:00.410 --> 00:31:01.980
DIANNE HACKBORN: No.

00:31:01.980 --> 00:31:03.230
No, we don't.

00:31:05.330 --> 00:31:07.410
CHRIS DIBONA: So the
answer's no.

00:31:07.410 --> 00:31:10.670
AUDIENCE: One thing I find
difficult to do is create

00:31:10.670 --> 00:31:15.200
package UI components to share
among different applications.

00:31:15.200 --> 00:31:16.495
Are there any plans to
make that easier?

00:31:20.610 --> 00:31:22.710
XAVIER DUCROHET: Do you want
to show them just at the

00:31:22.710 --> 00:31:25.200
compilation level, or
do you want it to be

00:31:25.200 --> 00:31:26.490
installed on the device?

00:31:26.490 --> 00:31:28.410
Because we're doing that.

00:31:28.410 --> 00:31:30.360
You have Android library
projects.

00:31:30.360 --> 00:31:33.680
So that second one, I
don't think Dianne

00:31:33.680 --> 00:31:34.900
will say yes to that.

00:31:34.900 --> 00:31:38.540
But the first one, we support
that at the compilation level.

00:31:38.540 --> 00:31:42.250
If you look up Android library
project, you can share code

00:31:42.250 --> 00:31:43.050
and resources.

00:31:43.050 --> 00:31:46.710
AUDIENCE: Right, but you have
to actually, at least as far

00:31:46.710 --> 00:31:49.440
as I know, you have to
include that in your

00:31:49.440 --> 00:31:50.370
workspace in Eclipse.

00:31:50.370 --> 00:31:52.620
Or, it's very difficult to
package that off and give it

00:31:52.620 --> 00:31:54.720
to someone as just a
jar, for example.

00:31:54.720 --> 00:31:56.850
XAVIER DUCROHET: Right, so we
do want to go with binary

00:31:56.850 --> 00:31:58.866
distribution of that.

00:31:58.866 --> 00:32:06.690
[SIDE CONVERSATION]

00:32:06.690 --> 00:32:08.020
XAVIER DUCROHET: So, apparently,
IntelliJ allows

00:32:08.020 --> 00:32:11.050
you to do that, so you
should look it up.

00:32:11.050 --> 00:32:12.300
Or Maven.

00:32:14.260 --> 00:32:17.040
We do want to support that
directly, natively in the SDK

00:32:17.040 --> 00:32:18.040
build system.

00:32:18.040 --> 00:32:20.930
But, yes there are third
parties, support that do that

00:32:20.930 --> 00:32:21.670
and you should try them.

00:32:21.670 --> 00:32:23.550
AUDIENCE: So is there any plans
to support natively?

00:32:23.550 --> 00:32:24.520
XAVIER DUCROHET: Yes.

00:32:24.520 --> 00:32:25.380
AUDIENCE: OK.

00:32:25.380 --> 00:32:27.380
Thanks.

00:32:27.380 --> 00:32:30.630
CHRIS DIBONA: There are two
questions in the moderator

00:32:30.630 --> 00:32:31.790
that are very, very similar.

00:32:31.790 --> 00:32:36.510
And they come down to support
for the Now cards, which is

00:32:36.510 --> 00:32:38.230
what they call them.

00:32:38.230 --> 00:32:41.160
Basically, support for user
applications you get into the

00:32:41.160 --> 00:32:46.730
Now stream, and tying into
Android side navigation.

00:32:46.730 --> 00:32:49.490
Asking if there's going to be
support in the future SDKs for

00:32:49.490 --> 00:32:51.533
some of the new elements.

00:32:51.533 --> 00:32:52.520
Make sense?

00:32:52.520 --> 00:32:54.390
DAVE BURKE: We have no
plans at the moment.

00:32:54.390 --> 00:32:55.242
CHRIS DIBONA: No plans
at the moment.

00:32:55.242 --> 00:32:57.010
OK.

00:32:57.010 --> 00:32:57.440
AUDIENCE: Hi.

00:32:57.440 --> 00:33:01.470
So the biggest thing that I find
that people coming into

00:33:01.470 --> 00:33:04.070
the platform as developers from
other systems, and as

00:33:04.070 --> 00:33:07.920
well as demands coming from
clients, is to show a lot of

00:33:07.920 --> 00:33:09.650
downloaded URLs as images.

00:33:09.650 --> 00:33:12.740
So dealing with bitmaps, and
image views, and list views,

00:33:12.740 --> 00:33:14.250
and all that kind of stuff.

00:33:14.250 --> 00:33:18.760
And staying within the memory
allowment that we have, as

00:33:18.760 --> 00:33:23.290
well as dealing with the fact
that images are built in on

00:33:23.290 --> 00:33:26.320
the native side and then brought
over to the Java side

00:33:26.320 --> 00:33:27.790
and all that kind of stuff.

00:33:27.790 --> 00:33:30.270
Anyways, the point is, it's a
really hard problem to solve.

00:33:30.270 --> 00:33:31.770
And I look at your apps
and they're fantastic.

00:33:31.770 --> 00:33:34.510
And you've solved them in
some really clever ways.

00:33:34.510 --> 00:33:36.110
So are you guys going
to open-source that?

00:33:36.110 --> 00:33:37.252
Well, not open-source
that, because it's

00:33:37.252 --> 00:33:37.880
already open source.

00:33:37.880 --> 00:33:41.960
But more bring it to a level
where beginner developers can

00:33:41.960 --> 00:33:46.310
have access to that kind of
reliability of a, caching, b,

00:33:46.310 --> 00:33:50.250
having nice crisp images and
not having to downsample.

00:33:50.250 --> 00:33:52.700
And also speed when it comes
to downloading and all that

00:33:52.700 --> 00:33:53.950
kind of stuff.

00:33:57.140 --> 00:33:59.996
RETO MEIER: So one thing which
we are trying to do is pick up

00:33:59.996 --> 00:34:02.230
a lot of these best practices
and make them available as

00:34:02.230 --> 00:34:04.240
development training on
the newly redesigned

00:34:04.240 --> 00:34:06.260
developer.android.com site.

00:34:06.260 --> 00:34:07.920
So if you have a look at the
training section there, I

00:34:07.920 --> 00:34:10.940
think we have a class now
which talks about how to

00:34:10.940 --> 00:34:12.560
download bitmaps efficiently.

00:34:12.560 --> 00:34:14.010
If not, then I guess
that's something

00:34:14.010 --> 00:34:15.110
which is coming soon.

00:34:15.110 --> 00:34:16.870
We're definitely trying to
collect up that knowledge,

00:34:16.870 --> 00:34:21.940
that best practice, and make it
more readily available to

00:34:21.940 --> 00:34:23.800
developers which don't want to
have to troll through all of

00:34:23.800 --> 00:34:25.050
the open-source code
themselves.

00:34:27.679 --> 00:34:30.190
FICUS KIRKPATRICK: We actually
also have a ready-made jar for

00:34:30.190 --> 00:34:32.560
exactly this thing that's
coming soon.

00:34:32.560 --> 00:34:33.489
It's just not ready yet.

00:34:33.489 --> 00:34:36.489
But the idea is that a really
typical pattern is you have a

00:34:36.489 --> 00:34:38.449
list view and an adapter and it
has thumbnails and you're

00:34:38.449 --> 00:34:40.320
getting them from the network
and you need to deal with

00:34:40.320 --> 00:34:42.820
recycling the views
and everything.

00:34:42.820 --> 00:34:44.940
We're hoping to have something
kind of plug and play you can

00:34:44.940 --> 00:34:48.940
link in your app soon, it
just wasn't ready today.

00:34:48.940 --> 00:34:52.870
[APPLAUSE]

00:34:52.870 --> 00:34:55.100
AUDIENCE: Is it anywhere in your
site to just increase the

00:34:55.100 --> 00:34:56.949
amount of memory we have
access to as an app?

00:35:00.040 --> 00:35:01.910
DIANNE HACKBORN: The memory
has been increasing pretty

00:35:01.910 --> 00:35:04.630
regularly, especially as the
screen sizes increase.

00:35:04.630 --> 00:35:07.350
There also was added in--

00:35:07.350 --> 00:35:10.100
Honeycomb was the option to
set a large memory size.

00:35:10.100 --> 00:35:13.010
So if you have applications
that do need a lot of RAM,

00:35:13.010 --> 00:35:16.690
they can say that they want to
have a higher memory limit.

00:35:16.690 --> 00:35:19.270
It's always a trade-off between
the RAM for that

00:35:19.270 --> 00:35:22.360
application and, it could be
used elsewhere to keep other

00:35:22.360 --> 00:35:25.920
applications around so you don't
have slow switches to

00:35:25.920 --> 00:35:26.780
other applications.

00:35:26.780 --> 00:35:31.216
So we do want developers to pay
a lot of attention to the

00:35:31.216 --> 00:35:34.500
RAM use and not just gratiously
go, I'm going to

00:35:34.500 --> 00:35:36.860
use a bunch of RAM because
it's easier.

00:35:36.860 --> 00:35:39.780
AUDIENCE: Thank you.

00:35:39.780 --> 00:35:42.150
AUDIENCE: I might have missed
this during the keynote, but

00:35:42.150 --> 00:35:47.380
are there going to be any APIs
for the new Voice Search and

00:35:47.380 --> 00:35:50.060
Google Now that we can access?

00:35:50.060 --> 00:35:52.410
DAVE BURKE: That was a question
that you read out,

00:35:52.410 --> 00:35:54.890
but no one understood you.

00:35:54.890 --> 00:35:57.180
No.

00:35:57.180 --> 00:36:00.180
AUDIENCE: And also, just kind
of off-topic, that I was

00:36:00.180 --> 00:36:03.140
reminded of on my way here
from Sacramento.

00:36:03.140 --> 00:36:07.320
I used to have separate volumes
for navigation and

00:36:07.320 --> 00:36:10.190
that disappeared after
Gingerbread .

00:36:10.190 --> 00:36:14.620
Is there any way to have
something like that back?

00:36:14.620 --> 00:36:16.040
CHRIS DIBONA: We found people
just weren't listening.

00:36:19.140 --> 00:36:19.860
DAVE BURKE: James
is saying no.

00:36:19.860 --> 00:36:22.010
I'm going to hand you
over to James.

00:36:22.010 --> 00:36:23.714
JAMES: No.

00:36:23.714 --> 00:36:24.172
[LAUGHTER]

00:36:24.172 --> 00:36:27.050
DAVE BURKE: Thank you.

00:36:27.050 --> 00:36:28.470
AUDIENCE: One of the things
that I've liked that was

00:36:28.470 --> 00:36:31.570
introduced in one of the more
recent Android developer tools

00:36:31.570 --> 00:36:33.430
was the Lint error checking.

00:36:33.430 --> 00:36:37.460
And is there any thoughts on
allowing the developers to

00:36:37.460 --> 00:36:40.600
have their own test
cases, basically?

00:36:40.600 --> 00:36:43.700
For instance, to make sure that
a texture always has a

00:36:43.700 --> 00:36:45.760
color set, or something
like that.

00:36:45.760 --> 00:36:46.440
XAVIER DUCROHET: Yes.

00:36:46.440 --> 00:36:48.340
We actually have
an API for it.

00:36:48.340 --> 00:36:53.070
We just haven't actually
finished integrating that into

00:36:53.070 --> 00:36:55.760
the Lint tool so that it picks
up jar coming from you.

00:36:55.760 --> 00:36:56.730
But it's ready.

00:36:56.730 --> 00:36:59.510
We just need to finish that.

00:36:59.510 --> 00:37:00.760
But it's ready.

00:37:03.790 --> 00:37:07.320
AUDIENCE: What is the best way
of merging the data from your

00:37:07.320 --> 00:37:10.600
own content provider with
data from other

00:37:10.600 --> 00:37:12.460
content providers available?

00:37:12.460 --> 00:37:17.540
Performing some computation on
that data beyond simple joins,

00:37:17.540 --> 00:37:21.685
and then feeding that data
into an adapter, cursor

00:37:21.685 --> 00:37:24.875
adapter, for instance, and
displaying a place view or

00:37:24.875 --> 00:37:27.940
something What do
you recommend?

00:37:27.940 --> 00:37:29.470
Because I've been struggling
with this.

00:37:32.250 --> 00:37:33.640
DIANNE HACKBORN: It
depends a lot on

00:37:33.640 --> 00:37:36.490
exactly what you're doing.

00:37:36.490 --> 00:37:39.070
AUDIENCE: For instance, I know
there is CursorJoiner,

00:37:39.070 --> 00:37:42.300
MagicCursor, MergeCursor,
or something like that.

00:37:42.300 --> 00:37:47.140
But I don't know which is the
best way of integrating data

00:37:47.140 --> 00:37:48.890
from multiple providers
on the fly.

00:37:52.080 --> 00:37:54.480
DIANNE HACKBORN: I don't know
the details of all those

00:37:54.480 --> 00:37:55.520
different helper classes.

00:37:55.520 --> 00:37:58.270
Basically you're going to want
to do something so that, as

00:37:58.270 --> 00:38:01.220
you iterate through the
different cursors, that you

00:38:01.220 --> 00:38:02.690
don't have to look ahead.

00:38:02.690 --> 00:38:05.160
ideally, you'd want to be able
to basically keep a position

00:38:05.160 --> 00:38:09.910
for each of the cursors and just
returned the next result.

00:38:09.910 --> 00:38:11.400
Because if you start to look
ahead, then you're going to

00:38:11.400 --> 00:38:14.150
have to do big queries
across all of them.

00:38:14.150 --> 00:38:16.860
And if you have a lot of data,
then you have to re-query as

00:38:16.860 --> 00:38:20.010
you go down the cursor.

00:38:20.010 --> 00:38:22.790
AUDIENCE: Yeah, but how do I--

00:38:22.790 --> 00:38:26.100
For instance, I want to merge
something from my own provider

00:38:26.100 --> 00:38:31.040
with something from the
contact's contract and display

00:38:31.040 --> 00:38:32.710
that in a list view.

00:38:32.710 --> 00:38:36.780
So far, what I did is manually
doing that and putting all the

00:38:36.780 --> 00:38:41.430
data in MagicCursor, and then
feeding that to CursorAdapter.

00:38:41.430 --> 00:38:44.960
But what I found strange is that
you can put anything in

00:38:44.960 --> 00:38:48.340
MagicCursor, you can put any
kind of object, but you can

00:38:48.340 --> 00:38:52.130
only take out primitives
and strings, basically.

00:38:52.130 --> 00:38:53.696
Why is that?

00:38:53.696 --> 00:38:56.182
Why is it this limitation?

00:38:56.182 --> 00:38:58.180
DIANNE HACKBORN: I
don't know that.

00:38:58.180 --> 00:39:00.200
DAVE BURKE: We have office
hours, actually.

00:39:00.200 --> 00:39:01.500
I think they're on
tomorrow as well.

00:39:01.500 --> 00:39:03.520
So this is kind of like an
in-depth question, but if you

00:39:03.520 --> 00:39:04.775
go there I'm sure there's
somebody who

00:39:04.775 --> 00:39:05.400
can probably help.

00:39:05.400 --> 00:39:07.425
So I think it's on the third
floor, Android office hours.

00:39:07.425 --> 00:39:07.760
AUDIENCE: OK.

00:39:07.760 --> 00:39:09.010
Thanks.

00:39:10.990 --> 00:39:11.880
AUDIENCE: Hi.

00:39:11.880 --> 00:39:14.560
Can an Android APK package
be signed with multiple

00:39:14.560 --> 00:39:15.810
certificates?

00:39:18.450 --> 00:39:22.800
DIANNE HACKBORN: You can do it,
but you really should not.

00:39:22.800 --> 00:39:24.420
DAVE BURKE: That's
Dianne saying no.

00:39:24.420 --> 00:39:28.000
DIANNE HACKBORN: The model is,
you have your own self-signed

00:39:28.000 --> 00:39:30.680
certificate, and that is your
identity, and that is the one

00:39:30.680 --> 00:39:32.520
you should use to
sign your APK.

00:39:32.520 --> 00:39:35.070
AUDIENCE: Let's say I have a
dependency on some third-party

00:39:35.070 --> 00:39:38.500
vendor, and so I'll have to
get it signed by them.

00:39:38.500 --> 00:39:41.380
So say my version one doesn't
have that, and say my version

00:39:41.380 --> 00:39:44.320
one has a certificate
that is what I own.

00:39:44.320 --> 00:39:46.980
And my version two, I depend
on some third-party vendor

00:39:46.980 --> 00:39:50.080
because I'll have to give
it to them for signing.

00:39:50.080 --> 00:39:54.600
How do you manage that, or is
that manageable at all?

00:39:54.600 --> 00:39:55.580
DIANNE HACKBORN: If you're
signing it with a different

00:39:55.580 --> 00:39:58.330
certificate, then it is
a different identity.

00:39:58.330 --> 00:40:02.610
It's a completely different
application, and so you can't

00:40:02.610 --> 00:40:03.570
treat it as the same thing.

00:40:03.570 --> 00:40:05.780
You should give it a different
package name.

00:40:05.780 --> 00:40:07.350
AUDIENCE: OK.

00:40:07.350 --> 00:40:08.730
One more question.

00:40:08.730 --> 00:40:12.790
Is there an in-build WebView
kind of a thing that can

00:40:12.790 --> 00:40:15.720
render or open documents
securely within your

00:40:15.720 --> 00:40:16.970
application?

00:40:19.120 --> 00:40:21.340
DAVE BURKE: I think it's
intent-based right?

00:40:21.340 --> 00:40:22.270
AUDIENCE: Yeah, it's
intent-based.

00:40:22.270 --> 00:40:25.710
So I don't want to give the
documents that are there

00:40:25.710 --> 00:40:28.640
within my application to some
other application for opening,

00:40:28.640 --> 00:40:30.310
because they can do anything
with their document.

00:40:30.310 --> 00:40:33.820
I want the security of opening
or viewing the document.

00:40:33.820 --> 00:40:36.270
Other than [INAUDIBLE]

00:40:36.270 --> 00:40:39.460
a document viewer, is there
any other way that I can

00:40:39.460 --> 00:40:43.250
somehow render a document
in my--

00:40:43.250 --> 00:40:44.930
DIANNE HACKBORN: There's
just WebView.

00:40:44.930 --> 00:40:48.110
And of course, TextView.

00:40:48.110 --> 00:40:50.180
AUDIENCE: Well, for TextView
even, you have to write your

00:40:50.180 --> 00:40:52.950
parses for whatever format
is directed.

00:40:52.950 --> 00:40:55.252
Say you have a PDF document,
then you'll have to write your

00:40:55.252 --> 00:40:56.630
parses for extracting
the text and then

00:40:56.630 --> 00:40:57.940
rendering it in TextView.

00:40:57.940 --> 00:41:02.010
So apart from [? breaking ?]
that, is there something?

00:41:02.010 --> 00:41:03.790
DAVE BURKE: Not today.

00:41:03.790 --> 00:41:05.560
AUDIENCE: Thanks.

00:41:05.560 --> 00:41:06.150
AUDIENCE: Hi.

00:41:06.150 --> 00:41:08.350
I'm a big fan of library
projects,

00:41:08.350 --> 00:41:10.120
which are quite awesome.

00:41:10.120 --> 00:41:12.960
But my workspace got really
messy lately with have

00:41:12.960 --> 00:41:16.920
ActionBarSherlock having version
four, version 3.5.

00:41:16.920 --> 00:41:20.440
And I tried to solve if with
Android maven again, but IDT

00:41:20.440 --> 00:41:26.350
doesn't take the dot ApkLib file
as a library project, so

00:41:26.350 --> 00:41:31.600
I have to switch again
the library from

00:41:31.600 --> 00:41:32.840
one version to another.

00:41:32.840 --> 00:41:37.980
So do you plan to manage
that kind of file?

00:41:37.980 --> 00:41:39.960
XAVIER DUCROHET: Yes we do want
to support the binary

00:41:39.960 --> 00:41:41.520
distribution similar
to ApkLib.

00:41:41.520 --> 00:41:43.590
I don't know if it will be
exactly the same, but it's

00:41:43.590 --> 00:41:44.100
pretty simple.

00:41:44.100 --> 00:41:45.910
So we will would probably
support that at some point in

00:41:45.910 --> 00:41:47.260
the future but not right now.

00:41:47.260 --> 00:41:47.600
AUDIENCE: OK.

00:41:47.600 --> 00:41:49.970
Thank you.

00:41:49.970 --> 00:41:51.270
AUDIENCE: Hi.

00:41:51.270 --> 00:41:54.230
In terms of portability and
performance, it's hard to beat

00:41:54.230 --> 00:41:55.320
native code.

00:41:55.320 --> 00:41:57.580
But here at Google I/O,
it doesn't seem to be

00:41:57.580 --> 00:41:59.240
getting much love.

00:41:59.240 --> 00:42:01.600
Why is that?

00:42:01.600 --> 00:42:03.470
DAVE BURKE: In terms of
portability, it's hard

00:42:03.470 --> 00:42:06.650
to beat Java code.

00:42:06.650 --> 00:42:09.390
AUDIENCE: Not on iOS.

00:42:09.390 --> 00:42:10.810
DAVE BURKE: That's because
you don't have all

00:42:10.810 --> 00:42:13.660
the different hardware.

00:42:13.660 --> 00:42:15.610
It's a good question.

00:42:15.610 --> 00:42:17.990
The problem is that Android is
a program that runs across

00:42:17.990 --> 00:42:19.960
lots of different types
of hardware.

00:42:19.960 --> 00:42:24.240
And so we favor Java because it
gives you that portability.

00:42:24.240 --> 00:42:27.465
The problem is if you write
everything in native, then you

00:42:27.465 --> 00:42:28.370
have different types
of ARM CPUs.

00:42:28.370 --> 00:42:31.123
You now have x86 CPUs.

00:42:31.123 --> 00:42:33.130
You're going to have new
architectures in the future,

00:42:33.130 --> 00:42:37.220
and so it's not as portable.

00:42:37.220 --> 00:42:39.870
DIANNE HACKBORN: And there's
a render script, too, as an

00:42:39.870 --> 00:42:41.120
alternative.

00:42:43.190 --> 00:42:44.550
AUDIENCE: I was wondering
have you guys

00:42:44.550 --> 00:42:47.810
considered buying Swipe?

00:42:47.810 --> 00:42:50.340
DAVE BURKE: Let me open up the
financial statements at Google

00:42:50.340 --> 00:42:52.000
and explain where we are.

00:42:52.000 --> 00:42:53.470
What?

00:42:53.470 --> 00:42:57.060
AUDIENCE: I just think it's
the greatest keyboard.

00:42:57.060 --> 00:43:01.400
My dad, who's technically
not into it, if you

00:43:01.400 --> 00:43:03.560
will, to put it nicely.

00:43:03.560 --> 00:43:05.290
He loves and he uses
it every day.

00:43:05.290 --> 00:43:08.045
So if he can use it, I think it
just kind of speaks to how

00:43:08.045 --> 00:43:09.970
great a keyboard it is.

00:43:09.970 --> 00:43:10.620
DAVE BURKE: It's funny.

00:43:10.620 --> 00:43:13.540
I see some people really love
it, and other people like the

00:43:13.540 --> 00:43:14.490
more traditional ones.

00:43:14.490 --> 00:43:18.290
But, yeah, I definitely
shouldn't talk about

00:43:18.290 --> 00:43:18.860
acquisitions.

00:43:18.860 --> 00:43:19.656
AUDIENCE: Yeah.

00:43:19.656 --> 00:43:20.548
OK.

00:43:20.548 --> 00:43:21.440
Good.

00:43:21.440 --> 00:43:24.380
DIANNE HACKBORN: We put a lot
of work into the implemented

00:43:24.380 --> 00:43:27.360
framework to allow you to
replace the keyboard.

00:43:27.360 --> 00:43:30.610
And so I think it's actually
great that they have a great

00:43:30.610 --> 00:43:33.730
keyboard that you go and buy,
and support them, and use it

00:43:33.730 --> 00:43:34.890
if you want to.

00:43:34.890 --> 00:43:36.030
AUDIENCE: Yeah, but
they're not in

00:43:36.030 --> 00:43:38.060
the market and they're--

00:43:38.060 --> 00:43:40.487
DIANNE HACKBORN: So you should
talk with them about going

00:43:40.487 --> 00:43:40.750
into the market.

00:43:40.750 --> 00:43:42.610
AUDIENCE: That's why I'm telling
you guys to buy them.

00:43:45.865 --> 00:43:48.660
AUDIENCE: Hi.

00:43:48.660 --> 00:43:52.280
I have a question related
to enterprise apps.

00:43:52.280 --> 00:43:56.980
I was wondering if the panel can
share if there is any plan

00:43:56.980 --> 00:44:02.450
to open up API to manage
802.1x key management?

00:44:02.450 --> 00:44:04.825
And I'm especially interested
in on-campus networks.

00:44:15.460 --> 00:44:16.030
DAVE BURKE: I think you

00:44:16.030 --> 00:44:18.360
successfully stumped the panel.

00:44:18.360 --> 00:44:19.860
Sorry, we don't have
anyone from our

00:44:19.860 --> 00:44:22.500
enterprise group here.

00:44:22.500 --> 00:44:26.510
DAN MORRILL: That's actually a
different group within Google.

00:44:26.510 --> 00:44:28.930
So we don't really have
an answer to that.

00:44:28.930 --> 00:44:30.810
CHRIS DIBONA: Is this the
Cisco thing again?

00:44:30.810 --> 00:44:33.040
The Cisco 802.1x stuff?

00:44:33.040 --> 00:44:35.500
AUDIENCE: 802.11 on-campus
networks.

00:44:35.500 --> 00:44:36.940
So, whereby--

00:44:36.940 --> 00:44:40.050
CHRIS DIBONA: I think Cisco
actually did some drivers.

00:44:40.050 --> 00:44:41.660
I'm not vouching for them.

00:44:41.660 --> 00:44:43.410
But you might want
to talk to them.

00:44:43.410 --> 00:44:45.360
They might have something
for you.

00:44:45.360 --> 00:44:47.710
Like I said, I haven't used it
myself, but I remember them

00:44:47.710 --> 00:44:49.303
having a similar problem.

00:44:49.303 --> 00:44:50.030
AUDIENCE: Understood,
thank you.

00:44:50.030 --> 00:44:52.670
CHRIS DIBONA: Yeah, so I would
look for them online.

00:44:52.670 --> 00:44:56.010
AUDIENCE: I'm really excited
about the announcement about

00:44:56.010 --> 00:44:59.680
the PDK this morning as
a device manufacturer.

00:44:59.680 --> 00:45:01.960
And I have a question
about it.

00:45:01.960 --> 00:45:05.780
They say it took two to three
months to apply to release it

00:45:05.780 --> 00:45:07.090
open-source.

00:45:07.090 --> 00:45:10.025
And the other question is, in
case we look at the two to

00:45:10.025 --> 00:45:12.090
three months that's
before release, it

00:45:12.090 --> 00:45:14.810
must be immature Android.

00:45:14.810 --> 00:45:18.590
And how can you describe the
difference between current

00:45:18.590 --> 00:45:20.970
Jelly Bean and two, three
months before?

00:45:20.970 --> 00:45:24.470
How can you describe it?

00:45:24.470 --> 00:45:26.250
DAVE BURKE: So it's still
really early.

00:45:26.250 --> 00:45:28.810
What we're going to try
to do is, let me see

00:45:28.810 --> 00:45:30.750
if I have this right.

00:45:30.750 --> 00:45:34.860
We want to get into a rhythm
where let's say you have a

00:45:34.860 --> 00:45:36.230
device brought up
on Jelly Bean.

00:45:36.230 --> 00:45:38.470
So you've got the Jelly
Bean open-source.

00:45:38.470 --> 00:45:41.390
And we're working on K,
whatever that is.

00:45:41.390 --> 00:45:42.986
Any suggestions for
names, by the way?

00:45:42.986 --> 00:45:44.890
AUDIENCE: Key lime,
key lime pie.

00:45:44.890 --> 00:45:45.890
DAVE BURKE: What?

00:45:45.890 --> 00:45:46.600
Keyline?

00:45:46.600 --> 00:45:47.840
OK.

00:45:47.840 --> 00:45:48.260
Keyli--

00:45:48.260 --> 00:45:49.210
Keyline.

00:45:49.210 --> 00:45:51.280
So, we're working on Keylah--

00:45:51.280 --> 00:45:51.790
What?

00:45:51.790 --> 00:45:52.725
MICHAEL SALISKY: Key lime.

00:45:52.725 --> 00:45:53.220
Key lime pie.

00:45:53.220 --> 00:45:55.030
DAVE BURKE: Oh, key lime pie.

00:45:55.030 --> 00:45:55.270
OK.

00:45:55.270 --> 00:45:59.120
So we're working on Key Lime--
it's not official, everybody.

00:45:59.120 --> 00:46:01.310
So imagine we're
working on 'K'.

00:46:01.310 --> 00:46:03.670
What we want to do is make sure
that your device that's

00:46:03.670 --> 00:46:07.180
already running on Jelly Bean
can actually start running on

00:46:07.180 --> 00:46:09.790
an early version of K. So we
want to make sure that the

00:46:09.790 --> 00:46:13.090
HAL, the hardware abstraction
layer, is forward compatible.

00:46:13.090 --> 00:46:14.630
Did I get that right, Rebecca?

00:46:14.630 --> 00:46:16.170
I think I did.

00:46:16.170 --> 00:46:19.830
And so the result is that it
should be much quicker to

00:46:19.830 --> 00:46:22.190
bring up your device on
the next version.

00:46:22.190 --> 00:46:25.830
And then we finally drop the
full source and open-source,

00:46:25.830 --> 00:46:27.760
your device should basically
be up and running.

00:46:27.760 --> 00:46:28.660
That's the idea.

00:46:28.660 --> 00:46:31.530
The specifics of how this all
works and the exact timing,

00:46:31.530 --> 00:46:33.390
like is it two months, is it
three months et cetera, we're

00:46:33.390 --> 00:46:34.150
still working that out.

00:46:34.150 --> 00:46:36.940
This is our first cycle
through it.

00:46:36.940 --> 00:46:39.090
I think we mentioned this
morning we've already given

00:46:39.090 --> 00:46:40.620
some of our partners the PDK.

00:46:40.620 --> 00:46:43.940
So it's very much a work in
progress, but it's looking

00:46:43.940 --> 00:46:45.450
kind of promising, so far.

00:46:45.450 --> 00:46:47.950
REBECCA ZAVIN: And to be clear,
that doesn't work

00:46:47.950 --> 00:46:48.660
today, the forward

00:46:48.660 --> 00:46:49.790
compatibility of the HAL layers.

00:46:49.790 --> 00:46:52.280
That's something that
we're working on.

00:46:52.280 --> 00:46:57.530
But the goal is for you to
someday be able to run your

00:46:57.530 --> 00:47:00.350
JBSB, if you're a [? southern ?]
vendor, against

00:47:00.350 --> 00:47:02.300
K and vice versa.

00:47:02.300 --> 00:47:05.540
But, like I said,
that's a goal.

00:47:05.540 --> 00:47:08.570
AUDIENCE: And in case of,
talking about the hardware

00:47:08.570 --> 00:47:11.260
abstraction layer, the
participation of the chipset

00:47:11.260 --> 00:47:12.770
vendor is very important.

00:47:12.770 --> 00:47:15.980
And in case the device is, for
example, our chipset is not

00:47:15.980 --> 00:47:19.110
the one for use for
the Nexus devices.

00:47:19.110 --> 00:47:22.500
Do you see the major
chipset vendors

00:47:22.500 --> 00:47:25.560
participating in the program?

00:47:25.560 --> 00:47:27.560
REBECCA ZAVIN: We've already
taken some feedback on things

00:47:27.560 --> 00:47:29.870
in the PDK, or things that were
missing from the PDK,

00:47:29.870 --> 00:47:31.380
from some of the partners
we've shared with.

00:47:31.380 --> 00:47:34.720
And the Nexus devices are
not all on one chip set.

00:47:34.720 --> 00:47:39.410
So I think we have some
experience, now, with making

00:47:39.410 --> 00:47:40.740
these kinds of effort
to work across

00:47:40.740 --> 00:47:42.730
different kinds of hardware.

00:47:42.730 --> 00:47:44.960
That's something that, in the
beginning, we were kind of a

00:47:44.960 --> 00:47:46.660
Qualcomm house, and we didn't
know how to do that.

00:47:46.660 --> 00:47:48.730
But I think we've gotten
a lot better at it.

00:47:48.730 --> 00:47:51.580
So we're definitely going to
be taking feedback on it.

00:47:51.580 --> 00:47:54.900
The systems team is interested
on making your life easier and

00:47:54.900 --> 00:47:56.580
making it easier to
bring up Android.

00:47:56.580 --> 00:47:58.305
It makes our lives easier,
because we bring up Android on

00:47:58.305 --> 00:47:59.810
new hardware, too.

00:47:59.810 --> 00:48:04.240
So we're actively interested
in what are the holes, what

00:48:04.240 --> 00:48:06.060
needs to be that isn't there,
what's there that you wish

00:48:06.060 --> 00:48:08.060
weren't there, things
like that.

00:48:08.060 --> 00:48:10.840
And how your time to bringing
up a new Android release on

00:48:10.840 --> 00:48:13.564
your hardware can
be shortened.

00:48:13.564 --> 00:48:14.460
AUDIENCE: I see.

00:48:14.460 --> 00:48:15.060
Thank you.

00:48:15.060 --> 00:48:17.500
CHRIS DIBONA: Just so you know,
Key Lime's not official.

00:48:17.500 --> 00:48:19.990
I think we should let Krispy
Kreme and Kit Kat bid against

00:48:19.990 --> 00:48:21.980
each other.

00:48:21.980 --> 00:48:22.950
It would be auction-based.

00:48:22.950 --> 00:48:23.960
It would be very Google-y.

00:48:23.960 --> 00:48:25.210
DAVE BURKE: I like Key Lime.

00:48:29.660 --> 00:48:33.660
AUDIENCE: When will the
'requires smallest width DP'

00:48:33.660 --> 00:48:37.190
attribute in the manifest
actually be used for filtering

00:48:37.190 --> 00:48:38.440
in Google Play?

00:48:44.040 --> 00:48:45.290
FICUS KIRKPATRICK: Soon.

00:48:48.720 --> 00:48:52.670
I don't have a good answer for
you on that right now.

00:48:52.670 --> 00:48:55.530
It's been kind of a trial
migrating from the old screen

00:48:55.530 --> 00:49:00.510
size buckets to the newer and
better smallest-width stuff.

00:49:00.510 --> 00:49:03.610
But, soon.

00:49:03.610 --> 00:49:05.750
It's on our radar.

00:49:05.750 --> 00:49:07.510
AUDIENCE: I just thought it
was odd that it was--

00:49:07.510 --> 00:49:11.770
I saw it there, and I thought,
oh great I can not have it be

00:49:11.770 --> 00:49:13.090
downloadable on certain
devices.

00:49:13.090 --> 00:49:15.430
And then I put it in and
it didn't seem to work.

00:49:15.430 --> 00:49:17.660
And then I realized that
it's not actually

00:49:17.660 --> 00:49:19.270
being used for filtering.

00:49:19.270 --> 00:49:20.324
FICUS KIRKPATRICK:
I agree with you.

00:49:20.324 --> 00:49:22.100
AUDIENCE: OK.

00:49:22.100 --> 00:49:22.710
But

00:49:22.710 --> 00:49:23.810
DAVE BURKE: I was thinking
more about the desserts.

00:49:23.810 --> 00:49:25.600
What if we started
going backwards?

00:49:25.600 --> 00:49:30.350
Like, we go like J and then go
I and then start going to H.

00:49:30.350 --> 00:49:33.430
That would kind of be fun.

00:49:33.430 --> 00:49:34.830
Do you think I threw them off?

00:49:34.830 --> 00:49:35.810
CHRIS DIBONA: No, I'm
actually all for it.

00:49:35.810 --> 00:49:38.390
I think we're going to be really
stuck at Z, and then

00:49:38.390 --> 00:49:39.720
we'll just have to go
backwards anyway.

00:49:39.720 --> 00:49:42.050
Switch over to umlauts,
you know.

00:49:42.050 --> 00:49:43.450
DAN MORRILL: Sooner or later,
we have a modular problem.

00:49:43.450 --> 00:49:45.320
So we might as well just the
bullet now and start--

00:49:45.320 --> 00:49:46.850
CHRIS DIBONA: There's probably
some German desserts that have

00:49:46.850 --> 00:49:49.180
umlauts that we could use.

00:49:49.180 --> 00:49:49.760
DAVE BURKE: That could work.

00:49:49.760 --> 00:49:51.130
CHRIS DIBONA: But that's
not they're here for.

00:49:55.260 --> 00:49:59.040
AUDIENCE: Asking about the audio
manager APIs within ICS.

00:49:59.040 --> 00:50:02.710
It seems the notification stream
and the ringer stream

00:50:02.710 --> 00:50:05.780
have kind of combined into one,
even though they're not

00:50:05.780 --> 00:50:07.650
combined in the API.

00:50:07.650 --> 00:50:09.660
You get a lot of users who
complain about that.

00:50:09.660 --> 00:50:12.500
Maybe you could explain the
thought behind that.

00:50:15.270 --> 00:50:18.300
DAVE BURKE: It was a user
experience decision.

00:50:18.300 --> 00:50:20.240
Do we have anyone
from UX here?

00:50:20.240 --> 00:50:21.490
Nope.

00:50:24.900 --> 00:50:27.410
AUDIENCE: I've got a lot of
users who don't like the

00:50:27.410 --> 00:50:28.385
experience.

00:50:28.385 --> 00:50:31.630
I prefer the experience, but
when it was a configuration

00:50:31.630 --> 00:50:33.700
option before, you left
it up to the user.

00:50:33.700 --> 00:50:35.120
And now they don't
have a choice.

00:50:35.120 --> 00:50:37.660
DAVE BURKE: We have an internal
meme, which, whenever

00:50:37.660 --> 00:50:39.280
this topic comes up--

00:50:39.280 --> 00:50:41.805
and somebody will always post
a picture, which is, 'add

00:50:41.805 --> 00:50:43.460
another setting.' And then they
show this picture of this

00:50:43.460 --> 00:50:46.090
huge mixing desk.

00:50:46.090 --> 00:50:49.080
So I think the UX guys were
basically trying to simplify

00:50:49.080 --> 00:50:49.890
the experience.

00:50:49.890 --> 00:50:53.500
I think there are some group of
people who want that extra

00:50:53.500 --> 00:50:55.240
level of control.

00:50:55.240 --> 00:50:57.160
I don't know what the right
answer is, but, yeah, we're

00:50:57.160 --> 00:50:58.320
aware of the feedback.

00:50:58.320 --> 00:50:59.120
AUDIENCE: Thanks.

00:50:59.120 --> 00:51:01.240
DAN MORRILL: Another thing to
point out there is, yeah, you

00:51:01.240 --> 00:51:03.140
get you get complaints from
users who want the

00:51:03.140 --> 00:51:04.510
flexibility.

00:51:04.510 --> 00:51:07.290
We got, probably, even more
complaints from users who

00:51:07.290 --> 00:51:09.160
didn't understand what
was going on.

00:51:09.160 --> 00:51:12.650
And so we totally hear where
you're coming from on UX

00:51:12.650 --> 00:51:13.600
decisions like that.

00:51:13.600 --> 00:51:20.550
But our decision making process
includes the broadest

00:51:20.550 --> 00:51:22.060
number of users possible.

00:51:22.060 --> 00:51:25.365
And so I'm just putting that
out, just to kind of consider

00:51:25.365 --> 00:51:26.920
both sides of the
coin as well.

00:51:29.850 --> 00:51:32.750
AUDIENCE: Hi, just a statement
and a question.

00:51:32.750 --> 00:51:33.390
First the statement.

00:51:33.390 --> 00:51:35.380
I think Key Lime Pie
is a great name.

00:51:35.380 --> 00:51:37.290
They're very delicious.

00:51:37.290 --> 00:51:38.200
DAN MORRILL: We decided
we're going backwards.

00:51:38.200 --> 00:51:41.240
It's I next now.

00:51:41.240 --> 00:51:45.010
AUDIENCE: So my question is, I'm
working on a suite of apps

00:51:45.010 --> 00:51:47.090
that are not for consumer use.

00:51:47.090 --> 00:51:49.280
We want to control what
applications you're running on

00:51:49.280 --> 00:51:50.350
the device.

00:51:50.350 --> 00:51:52.460
In particular, we want to
prevent users from getting to

00:51:52.460 --> 00:51:55.920
the browser in the settings,
and possibly Angry Birds.

00:51:55.920 --> 00:51:58.230
Because people shouldn't be
doing that at this time.

00:51:58.230 --> 00:52:00.660
Anyways, digressing.

00:52:00.660 --> 00:52:03.380
We have a service that is
running a thread that is

00:52:03.380 --> 00:52:08.052
scanning the log rapidly to see
when an application has

00:52:08.052 --> 00:52:08.660
been started.

00:52:08.660 --> 00:52:11.860
And if one of the blacklisted
applications is started, we

00:52:11.860 --> 00:52:14.360
switch out of it and kill it.

00:52:14.360 --> 00:52:15.720
I feel it's a really
clunky way.

00:52:15.720 --> 00:52:17.850
It's probably going to drain
the battery really quickly.

00:52:17.850 --> 00:52:20.710
Is there a more elegant
way to do this?

00:52:20.710 --> 00:52:22.510
DIANNE HACKBORN: Yeah, so from
the platforms perspective,

00:52:22.510 --> 00:52:23.760
that's a malicious
application.

00:52:26.820 --> 00:52:29.040
AUDIENCE: That's why I said
not for consumer use.

00:52:29.040 --> 00:52:30.615
DIANNE HACKBORN: Yeah, so you'll
find, over time that

00:52:30.615 --> 00:52:32.690
the platform has gotten much
more aggressive about finding

00:52:32.690 --> 00:52:34.980
things doing that kind of stuff
and stopping them from

00:52:34.980 --> 00:52:37.040
disrupting the user experience
like that.

00:52:37.040 --> 00:52:40.330
The answer, at this point, is
that you need to do your own

00:52:40.330 --> 00:52:41.840
build of Android that has
these restrictions.

00:52:41.840 --> 00:52:44.910
We don't have an application API
to do that kind of thing.

00:52:44.910 --> 00:52:46.650
AUDIENCE: So are you saying
that our solution will

00:52:46.650 --> 00:52:49.360
probably stop working
in future?

00:52:49.360 --> 00:52:50.540
DIANNE HACKBORN: I would
not count on

00:52:50.540 --> 00:52:52.810
it to continue working.

00:52:52.810 --> 00:52:54.060
AUDIENCE: Awesome, thanks.

00:52:56.270 --> 00:52:57.310
DAN MORRILL: Actually,
I think it probably

00:52:57.310 --> 00:52:59.440
broke in Jelly Bean.

00:52:59.440 --> 00:53:01.390
DAVE BURKE: Now that you tell
Dianne about it, it's

00:53:01.390 --> 00:53:03.480
definitely not going
to keep working.

00:53:03.480 --> 00:53:05.830
CHRIS DIBONA: It sounds like
he wants to start his own

00:53:05.830 --> 00:53:08.920
build team, so.

00:53:08.920 --> 00:53:10.220
AUDIENCE: Hi.

00:53:10.220 --> 00:53:14.120
Just wondering if anybody on
the panel can speak to any

00:53:14.120 --> 00:53:15.720
upcoming changes in Dalvik.

00:53:15.720 --> 00:53:20.090
Maybe some optimizations in
the Git, JC optimizations

00:53:20.090 --> 00:53:21.340
coming up in Jelly Bean.

00:53:26.040 --> 00:53:28.590
DAVE BURKE: Not right now.

00:53:28.590 --> 00:53:29.116
AUDIENCE: No answer?

00:53:29.116 --> 00:53:29.910
OK.

00:53:29.910 --> 00:53:31.320
CHRIS DIBONA: I don't think we
have the right people up here.

00:53:31.320 --> 00:53:32.730
DAVE BURKE: We don't have anyone
from the Dalvik team

00:53:32.730 --> 00:53:33.990
today, sorry.

00:53:33.990 --> 00:53:34.950
CHRIS DIBONA: I would find them
during the office hours

00:53:34.950 --> 00:53:38.320
and hammer them on that.

00:53:38.320 --> 00:53:40.990
Please.

00:53:40.990 --> 00:53:42.475
AUDIENCE: Hi.

00:53:42.475 --> 00:53:44.715
Very nice to meet you.

00:53:44.715 --> 00:53:49.760
I do, in fact, have one kind
of performance issue.

00:53:49.760 --> 00:53:51.740
Sometimes, we've found
that one's system

00:53:51.740 --> 00:53:54.530
memory is very low.

00:53:54.530 --> 00:53:58.560
I think it is less
than two megs.

00:53:58.560 --> 00:54:03.360
It's very easy to find that
the tablet could reset.

00:54:03.360 --> 00:54:06.240
We checked the logs.

00:54:06.240 --> 00:54:10.455
It's always matching the
widget or codec in the

00:54:10.455 --> 00:54:12.060
[? detector. ?]

00:54:12.060 --> 00:54:15.410
The response from, for example,
the activity manager

00:54:15.410 --> 00:54:17.720
service, some core service.

00:54:22.970 --> 00:54:25.350
I want to know, is it
normal behavior?

00:54:25.350 --> 00:54:32.710
Or do you encounter this kind
of issue on your side?

00:54:37.940 --> 00:54:39.930
DIANNE HACKBORN: You mean two
megs of RAM across the entire

00:54:39.930 --> 00:54:41.180
system is free?

00:54:43.460 --> 00:54:44.710
AUDIENCE: Yes.

00:54:46.910 --> 00:54:51.020
The result is, the system
server was killed.

00:54:53.830 --> 00:54:54.940
DIANNE HACKBORN: That sounds
like a device that doesn't

00:54:54.940 --> 00:54:56.190
have enough RAM.

00:55:01.770 --> 00:55:04.550
There's the out of memory
killer that has these

00:55:04.550 --> 00:55:06.520
parameters for when it kills
processes and stuff.

00:55:06.520 --> 00:55:09.140
And it will not kill the system
process unless it's

00:55:09.140 --> 00:55:10.670
very, very, very--

00:55:10.670 --> 00:55:12.450
It should never kill
the system process.

00:55:12.450 --> 00:55:17.370
So there's something going wrong
there, that, either the

00:55:17.370 --> 00:55:18.380
out of memory killer
is not working or

00:55:18.380 --> 00:55:19.630
something like that.

00:55:21.680 --> 00:55:23.360
This is kind of a debugging
thing that we probably can't

00:55:23.360 --> 00:55:24.610
really address here.

00:55:28.250 --> 00:55:30.730
AUDIENCE: I feel a
little strange.

00:55:30.730 --> 00:55:38.030
Normally, this program is
awkward when we play the

00:55:38.030 --> 00:55:39.280
[? peak ?] game.

00:55:39.280 --> 00:55:42.540
And so normally, no memory
kill should work.

00:55:46.110 --> 00:55:47.380
It's very strange.

00:55:47.380 --> 00:55:49.150
DIANNE HACKBORN: Could you find
me after this and I can

00:55:49.150 --> 00:55:50.420
talk with you about it.

00:55:50.420 --> 00:55:51.240
AUDIENCE: OK.

00:55:51.240 --> 00:55:53.240
No problem, thank you.

00:55:53.240 --> 00:55:56.360
AUDIENCE: So on the Honeycomb
tablet, we found a lot of

00:55:56.360 --> 00:56:01.450
issues with video playback and
segmentation for issues.

00:56:01.450 --> 00:56:04.310
So we found the same issue
addressed in the Ice Cream

00:56:04.310 --> 00:56:05.580
Sandwich and also
the [? Eclair ?]

00:56:05.580 --> 00:56:05.950
[? beta ?].

00:56:05.950 --> 00:56:11.340
Is there a way for you guys to
push the Ice Cream Sandwich

00:56:11.340 --> 00:56:16.000
for an old device to make sure
the future one is updated to

00:56:16.000 --> 00:56:16.590
the same level.

00:56:16.590 --> 00:56:20.040
Because it was very difficult
to develop when Honeycomb

00:56:20.040 --> 00:56:22.530
stopped doing so well.

00:56:22.530 --> 00:56:26.280
JAMES: Well the different
devices have different

00:56:26.280 --> 00:56:29.480
hardware accelerated
codecs on it.

00:56:29.480 --> 00:56:34.700
So that's difficulty for us to
enforce, say, the same level

00:56:34.700 --> 00:56:37.310
of performance across
different devices.

00:56:37.310 --> 00:56:40.280
But one thing we probably can
improve is, in the future, we

00:56:40.280 --> 00:56:44.250
will probably provide somthing
like a profile based CTS test,

00:56:44.250 --> 00:56:48.270
so that we can say this device
passes this profile.

00:56:48.270 --> 00:56:54.650
Meaning like a medium
performance, or another one

00:56:54.650 --> 00:56:56.540
passes another profile.

00:56:56.540 --> 00:57:04.210
So that we probably can provide
guidance to the user

00:57:04.210 --> 00:57:05.870
of the device.

00:57:05.870 --> 00:57:09.380
AUDIENCE: But I think it's a bug
in the system for my case.

00:57:09.380 --> 00:57:12.440
Because it is running into a
segmentation fault when I have

00:57:12.440 --> 00:57:13.720
a continuous playback.

00:57:13.720 --> 00:57:16.690
So I assume there's a
bug fix to the older

00:57:16.690 --> 00:57:18.510
device or the tablet.

00:57:18.510 --> 00:57:22.090
Or making sure they updated Ice
Cream Sandwich, because it

00:57:22.090 --> 00:57:23.690
seems to fix it.

00:57:23.690 --> 00:57:24.130
JAMES: OK.

00:57:24.130 --> 00:57:27.930
Then that probably seems like
a bug in a driver, maybe.

00:57:27.930 --> 00:57:30.790
AUDIENCE: So, you guys don't
have a plan for, for example,

00:57:30.790 --> 00:57:33.340
the Zoom or like an older
Galaxy to fix that?

00:57:33.340 --> 00:57:36.600
JAMES: Well for the Jelly Bean
release, we actually have a

00:57:36.600 --> 00:57:38.640
refresh to Zoom device.

00:57:38.640 --> 00:57:43.407
Also, even for a
Nexus S device.

00:57:43.407 --> 00:57:44.657
AUDIENCE: OK.

00:57:47.628 --> 00:57:49.040
AUDIENCE: Hi.

00:57:49.040 --> 00:57:52.720
I like doing library
apps a lot.

00:57:52.720 --> 00:57:55.600
But sometimes, you can have a
suite of apps and they all

00:57:55.600 --> 00:57:56.830
have the same core.

00:57:56.830 --> 00:58:00.280
And it seems like including the
library in every single

00:58:00.280 --> 00:58:03.560
one of them is excessive, it's
just bloating each one.

00:58:03.560 --> 00:58:08.040
Is there any plans of allowing
something like a dependency on

00:58:08.040 --> 00:58:09.320
application someplace?

00:58:09.320 --> 00:58:13.740
So that if you want to install
one APK it depends on another

00:58:13.740 --> 00:58:15.700
one or it can just
download both.

00:58:15.700 --> 00:58:18.350
And then if I install a second
one, which is also depending

00:58:18.350 --> 00:58:21.270
on that APK, it's already there,
it doesn't have to

00:58:21.270 --> 00:58:22.520
download it.

00:58:24.450 --> 00:58:25.790
FICUS KIRKPATRICK:
I'll take this.

00:58:25.790 --> 00:58:27.330
Short answer, no.

00:58:27.330 --> 00:58:29.780
I think that if you look back
at something like Windows,

00:58:29.780 --> 00:58:33.020
with all the VB runtime deals or
whatever, you can see where

00:58:33.020 --> 00:58:34.370
this ends up, right.

00:58:34.370 --> 00:58:37.730
And we're trying to learn from
the previous mistakes of

00:58:37.730 --> 00:58:38.600
others, right.

00:58:38.600 --> 00:58:41.680
You end up with app A and app B,
and one of them depends on

00:58:41.680 --> 00:58:43.310
some particular bug
compatibility

00:58:43.310 --> 00:58:44.400
mode and that thing.

00:58:44.400 --> 00:58:46.320
So it is a trade-off, right?

00:58:46.320 --> 00:58:51.530
You trade a little bloat for
statically linking, versus

00:58:51.530 --> 00:58:53.910
knowing that the thing that you
shipped with stays that

00:58:53.910 --> 00:58:55.270
way forever.

00:58:55.270 --> 00:58:58.360
Now again, I think there are
things where we make that

00:58:58.360 --> 00:58:59.360
trade off in the platform.

00:58:59.360 --> 00:59:02.490
We add new APIs and things like
that, and it's expected

00:59:02.490 --> 00:59:03.430
be backward compatible.

00:59:03.430 --> 00:59:06.200
But the short version is,
we think it would

00:59:06.200 --> 00:59:08.160
just become a mess.

00:59:08.160 --> 00:59:08.470
AUDIENCE: OK.

00:59:08.470 --> 00:59:09.330
Thanks.

00:59:09.330 --> 00:59:11.000
CHRIS DIBONA: So this is
probably our last question.

00:59:11.000 --> 00:59:12.250
AUDIENCE: Excellent.

00:59:12.250 --> 00:59:14.090
So, low latency audio.

00:59:14.090 --> 00:59:17.300
We've heard quite a bit
about it today.

00:59:17.300 --> 00:59:20.290
What kind of improvements are
we seeing in Jelly Bean?

00:59:20.290 --> 00:59:22.050
What percentage?

00:59:22.050 --> 00:59:22.960
How fast?

00:59:22.960 --> 00:59:27.720
And also, beyond that, the low
latency manifest flag and when

00:59:27.720 --> 00:59:29.680
it's actually going to be,
maybe, useful or anyone's

00:59:29.680 --> 00:59:31.530
going to use it or care.

00:59:31.530 --> 00:59:32.940
DAVE BURKE: So what
did you hear about

00:59:32.940 --> 00:59:34.610
audio latency today?

00:59:34.610 --> 00:59:36.680
AUDIENCE: They'd been mentioning
it in the Android

00:59:36.680 --> 00:59:37.610
chat this morning.

00:59:37.610 --> 00:59:39.240
DAVE BURKE: Yeah, it's
a work in progress.

00:59:39.240 --> 00:59:42.810
So to give you a bit
of color on it--

00:59:45.930 --> 00:59:47.865
We introduced [? Micala ?]
fast mixer.

00:59:47.865 --> 00:59:51.740
So for soundpool, tone
generator, and open SL, will

00:59:51.740 --> 00:59:53.900
actually run through
a fast mixer, which

00:59:53.900 --> 00:59:54.840
will reduce the latency.

00:59:54.840 --> 00:59:58.230
Now it turns out the latency
targets we're going for,

00:59:58.230 --> 01:00:02.270
they're sub 10 milliseconds
on warm audio playback.

01:00:02.270 --> 01:00:05.260
Once you start getting into that
level, anything at all

01:00:05.260 --> 01:00:08.500
that's in the system that's
preempting you becomes

01:00:08.500 --> 01:00:09.480
problematic.

01:00:09.480 --> 01:00:13.610
And so we're now at the level
of devic-dependent issues.

01:00:13.610 --> 01:00:18.050
So on the Galaxy Nexus, I think
or latency's gone from

01:00:18.050 --> 01:00:23.120
about 100 milliseconds in Ice
Cream Sandwich down to about

01:00:23.120 --> 01:00:25.340
12 milliseconds.

01:00:25.340 --> 01:00:28.100
But that's not good enough.

01:00:28.100 --> 01:00:29.920
We want it to be below 10,
and we want all our

01:00:29.920 --> 01:00:30.930
devices below 10.

01:00:30.930 --> 01:00:33.560
And all our other devices they
we're updating to Jelly Bean

01:00:33.560 --> 01:00:36.540
are not as good as that, for
various reasons that we're

01:00:36.540 --> 01:00:37.190
working on.

01:00:37.190 --> 01:00:40.910
And so I think you'll see,
in the next update

01:00:40.910 --> 01:00:42.200
we'll do even better.

01:00:42.200 --> 01:00:45.560
We want to get to a point where
we mandate a minimum,

01:00:45.560 --> 01:00:47.730
excuse me, a maximum latency.

01:00:47.730 --> 01:00:49.920
And we're just not quite there
yet, but we're making good

01:00:49.920 --> 01:00:50.870
progress toward it.

01:00:50.870 --> 01:00:52.480
AUDIENCE: And are you going
to be working with any

01:00:52.480 --> 01:00:55.730
manufacturers in particular to
encourage the drivers to be

01:00:55.730 --> 01:00:57.630
fast and this type of--

01:00:57.630 --> 01:00:59.910
DAVE BURKE: Yeah, definitely.

01:00:59.910 --> 01:01:01.670
One of the tools I mentioned
at the keynote this morning

01:01:01.670 --> 01:01:04.090
was Systrace, where you can
actually look into the system

01:01:04.090 --> 01:01:05.310
and see what's happening.

01:01:05.310 --> 01:01:07.760
We originally built that for--

01:01:07.760 --> 01:01:09.580
We call it jack busting,
not butter, by the way.

01:01:09.580 --> 01:01:11.330
That was a marketing term.

01:01:11.330 --> 01:01:15.190
So we built that for jack
busting, and it turns out

01:01:15.190 --> 01:01:17.560
that's actually really good
or audio as well.

01:01:17.560 --> 01:01:19.545
If you had a glitch in audio,
you can see what happened in

01:01:19.545 --> 01:01:20.020
the system.

01:01:20.020 --> 01:01:23.760
Like, maybe Wi-Fi driver thread
was running at a higher

01:01:23.760 --> 01:01:27.290
priority than the auido thread
and starved it, et cetera.

01:01:27.290 --> 01:01:29.840
Or there was a hot-swap
of a CPU in or out.

01:01:29.840 --> 01:01:33.050
And so we're working
through all the

01:01:33.050 --> 01:01:34.220
different issues, basically.

01:01:34.220 --> 01:01:36.300
So watch the space, it
will get better.

01:01:36.300 --> 01:01:36.790
AUDIENCE: Awesome.

01:01:36.790 --> 01:01:37.800
Thank you.

01:01:37.800 --> 01:01:41.752
CHRIS DIBONA: And that's all
of our time for today.

01:01:41.752 --> 01:01:42.700
Thanks to the panel.

01:01:42.700 --> 01:01:49.350
[APPLAUSE]

01:01:49.350 --> 01:01:50.680
CHRIS DIBONA: If you have any
further questions, there will

01:01:50.680 --> 01:01:52.910
be office hours tomorrow, it
sounds like, as well as people

01:01:52.910 --> 01:01:54.710
milling about to help you.

