WEBVTT
Kind: captions
Language: en-GB

00:00:00.000 --> 00:00:03.240
Today we're going to do some live coding,
and we're going to do something which

00:00:03.240 --> 00:00:07.440
sounds impossible, but is actually
quite natural and practical, and that's

00:00:07.440 --> 00:00:10.950
programming with infinite data
structures. And we're going to be using

00:00:10.950 --> 00:00:13.349
Haskell for this, but it doesn't
matter if you don't know anything about

00:00:13.349 --> 00:00:16.529
Haskell, because I'm going to explain
everything in a simple way as we go

00:00:16.529 --> 00:00:22.020
along. The first thing we're going to do,
is we're going to start up the Haskell

00:00:22.020 --> 00:00:25.080
system which we're going to be
using, which is called GHCi.

00:00:25.080 --> 00:00:28.529
And if you'd like to try this stuff out
for yourself, this is freely available

00:00:28.529 --> 00:00:31.830
online - just search for the obvious thing.
Before we start thinking about infinite

00:00:31.830 --> 00:00:35.100
data structures, we're going to do a
little bit of computation with a simple

00:00:35.100 --> 00:00:41.070
finite data structure, which is a finite
list. So here's a finite list in Haskell.

00:00:41.070 --> 00:00:46.230
It's just a list of numbers between 1
and 20, and it's written 1..20. And if

00:00:46.230 --> 00:00:50.370
we ask the Haskell system to evaluate
that, and we'll just expand it out, to

00:00:50.370 --> 00:00:54.539
give the numbers between 1 and 20. And
then we can think, well what can we

00:00:54.539 --> 00:00:58.980
actually do with the finite list? So, for
example, we could sum the list up, and we

00:00:58.980 --> 00:01:03.390
get the expected answer 210. We could say,
well maybe we want to square all the

00:01:03.390 --> 00:01:09.030
numbers between 1 and 20. So we can "map"
the squaring function over the list from

00:01:09.030 --> 00:01:14.340
1 to 20, and we get the first 20 squares.
What else could we do? Well, maybe we want

00:01:14.340 --> 00:01:19.200
to filter out the even numbers from the
list between 1 and 20, and we can do that.

00:01:19.200 --> 00:01:22.770
We just write "filter even" from 1 to 20.
Or if we want to be a little bit more

00:01:22.770 --> 00:01:26.100
fancy, we could combine everything we've
done up to this point, and we could say:

00:01:26.100 --> 00:01:34.909
what is the sum, of the squares, of all
the even numbers between 1 and 20? And

00:01:34.909 --> 00:01:40.470
hopefully 1,540 is the correct answer. So
here's a little example of a finite list,

00:01:40.470 --> 00:01:45.869
1 up to 20, and then we've seen four small
examples of simple kinds of computation

00:01:45.869 --> 00:01:50.280
which we could do on that finite list.
But the video today is about infinite

00:01:50.280 --> 00:01:53.549
data structures. In particular, we're
going to be talking about infinite lists.

00:01:53.549 --> 00:01:57.270
So how do we do infinite lists in a
language like Haskell? Well, it's very

00:01:57.270 --> 00:02:02.670
simple. Rather than writing something
like 1..20, we just say 1.., and when

00:02:02.670 --> 00:02:07.200
I press return, this will be the infinite
list of all the natural numbers

00:02:07.200 --> 00:02:11.879
beginning with 1. And this is going to go
on forever, but I can interrupt and you

00:02:11.879 --> 00:02:16.520
can see we've already got up to
about 196,000 here. Okay, so it runs,

00:02:16.520 --> 00:02:20.480
it runs quite quickly. So this is an
infinite list. So what can we actually do

00:02:20.480 --> 00:02:24.620
with an infinite list? So let's try some
of the things which we tried before

00:02:24.620 --> 00:02:29.300
first of all. So maybe we can sum it? So
let's try summing the infinite list of

00:02:29.300 --> 00:02:33.650
all the numbers beginning with one. And I
press that, and of course this doesn't

00:02:33.650 --> 00:02:37.730
actually work, because there's an
infinite number of values in this list,

00:02:37.730 --> 00:02:41.030
and we try and sum them - it's never
going to finish. So I need to

00:02:41.030 --> 00:02:46.040
interrupt this one here. Let's try
something else. Maybe I can try filtering

00:02:46.040 --> 00:02:50.300
the even numbers from an infinite list,
and hopefully this will work?

00:02:50.300 --> 00:02:56.569
And yes it does. What we get this time, is
we get the infinite list of all the even

00:02:56.569 --> 00:03:00.620
numbers. Okay so you can see there's no
odd numbers in the list here. What we're

00:03:00.620 --> 00:03:03.799
actually doing, is we're taking an
infinite data structure as an input,

00:03:03.799 --> 00:03:07.130
we're taking an infinite list, and we're
processing it, and we're giving an

00:03:07.130 --> 00:03:10.970
infinite data structure as an output.
We're taking an infinite list in, and

00:03:10.970 --> 00:03:15.200
giving an infinite list out, which is
quite an interesting idea. So let's try

00:03:15.200 --> 00:03:19.970
another example. Let's try filtering all
the numbers less than 100, from the

00:03:19.970 --> 00:03:24.200
infinite list beginning with 1. And this
kind of works, but not quite. There's a

00:03:24.200 --> 00:03:29.390
little problem at the end. So we get all
the numbers from 1 up to 99, which is

00:03:29.390 --> 00:03:32.750
exactly what we expect, But now it's just
sitting here, and that's because it's

00:03:32.750 --> 00:03:37.160
basically trying to find another number
which is less than 100. And it will never

00:03:37.160 --> 00:03:40.850
succeed with that, but it doesn't know
it's not going to find one, so it will go

00:03:40.850 --> 00:03:45.320
on forever. Ok, so I have to break out of
this one. And this again illustrates the

00:03:45.320 --> 00:03:48.320
idea that when you're programming with
infinite data structures, you need to be

00:03:48.320 --> 00:03:52.010
careful. We tried to sum an infinite data
structure, and it didn't work,

00:03:52.010 --> 00:03:54.829
it just went immediately into an
infinite loop. We're trying to filter

00:03:54.829 --> 00:03:58.940
here from an infinite data structure, and
it gave us the expected results, but in

00:03:58.940 --> 00:04:02.660
the end it just hung. So you need to be
careful with this kind of thing. Let's

00:04:02.660 --> 00:04:08.150
try one more example. Let's try taking 20
elements, from the infinite list

00:04:08.150 --> 00:04:12.950
beginning with 1. And this of course
works. We just get exactly what we expect,

00:04:12.950 --> 00:04:17.269
we get the numbers between 1 and 20.
We're taking an infinite data structure

00:04:17.269 --> 00:04:20.570
as an input, we're taking the infinite
list of all the values from 1 onwards,

00:04:20.570 --> 00:04:23.750
and we're getting a finite data
structure as the output, we're getting a

00:04:23.750 --> 00:04:26.950
finite list of all the numbers
between 1 and 20. How does

00:04:26.950 --> 00:04:31.480
this kind of behavior actually work? And
it's to do with the evaluation order

00:04:31.480 --> 00:04:35.440
which you have in your programming
language. Most languages are what's

00:04:35.440 --> 00:04:39.880
called strict, or eager. And that means
when you have a parameter, like this

00:04:39.880 --> 00:04:42.760
infinite list, you completely
evaluate that parameter

00:04:42.760 --> 00:04:46.930
before you try and do anything with it.
So if you're in an eager, or strict,

00:04:46.930 --> 00:04:52.030
language and you try and run "take 20" of
an infinite list, it's never going to get

00:04:52.030 --> 00:04:56.080
anywhere, because it will just attempt to
evaluate the infinite list, and that will

00:04:56.080 --> 00:05:00.280
never stop, and you'll never actually get
any result. But languages like Haskell are

00:05:00.280 --> 00:05:05.440
lazy. When you have a parameter in
Haskell, you only evaluate it on demand.

00:05:05.440 --> 00:05:10.570
So, the demand here, is that we want to
take 20 elements from the infinite list.

00:05:10.570 --> 00:05:16.090
So the two parts here, "take 20" and the
infinite list, they kind of collaborate

00:05:16.090 --> 00:05:19.780
together and say, well, we only actually
need to generate 20 elements to proceed,

00:05:19.780 --> 00:05:24.550
so we don't actually generate the entire
infinite list. So in Haskell, when we

00:05:24.550 --> 00:05:28.570
write one up to infinity, it's not really
an infinite list, it's a *potentially*

00:05:28.570 --> 00:05:33.280
infinite list, which gets evaluated as
much as required by the context in which

00:05:33.280 --> 00:05:37.510
we use it. There's some small little
examples. Let's maybe trying something a

00:05:37.510 --> 00:05:42.160
bit more interesting now. Let's try and
write a program which generates all the

00:05:42.160 --> 00:05:46.750
prime numbers - the infinite list of all
prime numbers. So let's remind yourself

00:05:46.750 --> 00:05:51.730
what a prime number is. So a number is
prime if it's only factors, so that's the

00:05:51.730 --> 00:05:57.490
numbers that divide into it exactly, are
1 and itself. So for example 7 is prime,

00:05:57.490 --> 00:06:01.600
because it's got two factors, 1 and 7, but
15 is not prime, because it's got four

00:06:01.600 --> 00:06:06.220
factors. So let's write a program to do
this. So first of all, we're going to

00:06:06.220 --> 00:06:10.930
write a small function called "factors",
which is going to return all the numbers

00:06:10.930 --> 00:06:15.580
which divide exactly into a number. So if
I give it a number like n, I'm going to

00:06:15.580 --> 00:06:20.860
return all the values x, such the x comes
from the list 1 up to n. And if I take

00:06:20.860 --> 00:06:26.440
the remainder when I divide n by x, then
that had better be 0. So this is just

00:06:26.440 --> 00:06:30.010
running over all the numbers between 1
and the given number, and I could be

00:06:30.010 --> 00:06:33.310
clever here and write square root of n,
but let's just keep it simple - you run

00:06:33.310 --> 00:06:36.640
over all the numbers between 1 and the
given number, and you just check is the

00:06:36.640 --> 00:06:40.930
remainder when I divide one by the other
zero. So for example, if I say what's the

00:06:40.930 --> 00:06:44.710
factors of 7, I just get two factors
one and 7, so that's a prime number.

00:06:44.710 --> 00:06:49.870
And if I say what's the factors of 15, I
get four factors, 1, 3, 5 and 15,

00:06:49.870 --> 00:06:53.770
so that's not a prime number. And
this tells us basically how we can

00:06:53.770 --> 00:06:59.409
define a very simple program to check if
a number is prime. I can say, a number n

00:06:59.409 --> 00:07:06.099
is prime, if and only if, if I look at its
factors, if I get back exactly the list 1

00:07:06.099 --> 00:07:09.940
and n. So that's my definition of what it
means to be a prime number. Now I can

00:07:09.940 --> 00:07:14.889
check that this actually works. I can say
is 7 a prime number? And it says true,

00:07:14.889 --> 00:07:20.650
because it has exactly two factors. And I
can say is 15 a prime number? And I get

00:07:20.650 --> 00:07:24.580
false, because it's got more than two
factors. Now we've got all we need to

00:07:24.580 --> 00:07:28.960
actually generate the infinite list of
all prime numbers. And we can use, you can

00:07:28.960 --> 00:07:33.159
do this simply using the filter function.
If we just now filter, all the prime

00:07:33.159 --> 00:07:37.870
numbers from the infinite list beginning
with one, then as soon as I hit return,

00:07:37.870 --> 00:07:43.210
this thing will start generating the
infinite list of all prime numbers, ok.

00:07:43.210 --> 00:07:46.960
And you can see here, it's already gone
quite far, we've got up to about 16,000,

00:07:46.960 --> 00:07:49.870
and you can check that all of these
numbers are actually prime. But actually

00:07:49.870 --> 00:07:53.830
this is quite a modern laptop, we'd
expect this program to run much faster

00:07:53.830 --> 00:07:58.120
than this, so what we'd like to do now is
see how we can take this simple means of

00:07:58.120 --> 00:08:01.719
producing the infinite list of all the
prime numbers, and actually make it go a

00:08:01.719 --> 00:08:05.529
lot faster, by using a 2000 year
old algorithm. &lt;Sean&gt; Did they

00:08:05.529 --> 00:08:08.830
have algorithms 2000 years ago?  Yes they
did, the ancient Greeks discovered

00:08:08.830 --> 00:08:13.930
many things, including many interesting
algorithms. So here is a 2000 

00:08:13.930 --> 00:08:18.039
year old algorithm, which is called the
sieve of Eratosthenes, after a Greek

00:08:18.039 --> 00:08:21.909
mathematician, and this is a very very
simple algorithm for generating the

00:08:21.909 --> 00:08:26.319
infinite list of all the prime numbers.
So let's see how it actually works. The

00:08:26.319 --> 00:08:31.539
first step, is we write down the infinite
list, 2, 3, 4, all the way up to infinity.

00:08:31.539 --> 00:08:36.519
The second step, is we mark the first
value p, so that's going to be 2, as being

00:08:36.519 --> 00:08:40.779
a prime number. And the third step is
to remove all the multiples of p, so

00:08:40.779 --> 00:08:44.740
initially that will be 2, from the list.
And the fourth step, is that we go back

00:08:44.740 --> 00:08:49.480
to the second step. So it's a very simple,
four step process, for generating all the

00:08:49.480 --> 00:08:52.030
prime numbers. And an interesting
observation here, is that

00:08:52.030 --> 00:08:56.290
infinity occurs all over the place in
this algorithm. We're writing down an

00:08:56.290 --> 00:09:00.700
infinite list at the beginning; we're
removing an infinite number of elements

00:09:00.700 --> 00:09:05.590
from an infinite list in step 3; and then,
we're having an infinite loop in step 4,

00:09:05.590 --> 00:09:09.280
because we're looping around here,
forever. So let's see how this 2,000 year

00:09:09.280 --> 00:09:14.590
old algorithm actually works in practice,
with a little example. So the first step

00:09:14.590 --> 00:09:18.580
in the algorithm was we write down all
the numbers from 2 up to infinity. So

00:09:18.580 --> 00:09:22.510
let's stop at 12, but of course, in
principle, we go on forever here. Then the

00:09:22.510 --> 00:09:26.890
next step is, we mark the first value in
the list as being a prime number. So

00:09:26.890 --> 00:09:32.980
we'll say 2 is our first prime number.
Then we need to remove all the multiples

00:09:32.980 --> 00:09:37.330
of 2 from the list, and let's do this by
putting a small barrier under all the

00:09:37.330 --> 00:09:42.370
multiples of 2, so that's the even
numbers - oops, forgot 11 - and we'll think

00:09:42.370 --> 00:09:46.480
of these barriers as kind of stopping
these numbers falling down the page. So

00:09:46.480 --> 00:09:49.720
we imagine the numbers trying to fall
down the page now. So the 3 will fall

00:09:49.720 --> 00:09:53.320
down, the 5 will fall down, and in general
all the odd numbers will fall down,

00:09:53.320 --> 00:09:57.190
because the even numbers are stopped by
a little barrier. And you can think of

00:09:57.190 --> 00:10:00.430
this as being a sieve. This is why it's
called the sieve of Eratosthenes, because

00:10:00.430 --> 00:10:04.630
you're blocking some numbers from coming
down the page. And now we go back to the

00:10:04.630 --> 00:10:10.360
start again. So 3 is a prime number, and
then we put a small barrier under all

00:10:10.360 --> 00:10:15.220
the multiples of 3. So 6 is already gone,
9 and 12, and then the numbers that are

00:10:15.220 --> 00:10:20.260
not stopped by the barrier, or sieved out,
they come down the page. So 5 comes down,

00:10:20.260 --> 00:10:26.020
7 comes down, 11 comes down. And we continue.
5 is a prime number. We remove all the

00:10:26.020 --> 00:10:30.700
multiples of 5; the numbers come down the
page, and so on. So you can see the basic

00:10:30.700 --> 00:10:35.410
idea here - we're generating, in a very
simple way, all the prime numbers. We're

00:10:35.410 --> 00:10:40.600
getting 2, 3, 5, 7, and eventually 11, and
so on. So that's the algorithm. What we're

00:10:40.600 --> 00:10:44.380
going to do now, is think how can we
actually implement this in our a

00:10:44.380 --> 00:10:47.620
programming language. And we'll see
that we actually only need a two-line

00:10:47.620 --> 00:10:51.730
program to implement this. It's a
very direct translation of the

00:10:51.730 --> 00:10:55.780
2000 year old algorithm into an actual
working program. So let me start

00:10:55.780 --> 00:10:59.560
up an editor, and we're going to write a
program now. So we're going to generate

00:10:59.560 --> 00:11:03.790
the infinite list of all the prime
numbers, and I'm going to define that by

00:11:03.790 --> 00:11:07.920
sieving the infinite
list starting from 2.

00:11:07.920 --> 00:11:12.089
So the first step of the algorithm, was
we write down all numbers from 2 onwards.

00:11:12.089 --> 00:11:14.760
So that's what we've got here, and then
we're going to pass it into a function

00:11:14.760 --> 00:11:17.700
called "sieve", which we haven't written
yet, which is going to do all the other

00:11:17.700 --> 00:11:23.250
steps for us. So what does sieve do? Well,
sieve is going to take the list apart. So

00:11:23.250 --> 00:11:27.839
p will be the first thing in the list, so
that's initially going to be 2. And ps

00:11:27.839 --> 00:11:32.820
will be everything else, so that's 3, 4, 5
etc, all the way up to infinity. And then

00:11:32.820 --> 00:11:36.450
what we're going to do, on the right hand
side, is we'll keep the first value, so

00:11:36.450 --> 00:11:40.019
that's like marking the first number as
being prime. And then we're going to

00:11:40.019 --> 00:11:45.329
recursively sieve something. So what we're
going to do, is we're going to sieve out

00:11:45.329 --> 00:11:51.899
all the numbers which are multiples of p.
What this part in the brackets here

00:11:51.899 --> 00:11:56.399
does is, is it takes the infinite list of
all the remaining numbers - so 3 all the

00:11:56.399 --> 00:12:00.870
way up to infinity - and it's going to
remove all the multiples of 2. So it's

00:12:00.870 --> 00:12:04.500
just running over the list, and it's
removing all the numbers which are

00:12:04.500 --> 00:12:08.760
multiples of 2. So this will remove
the 4, the 6, the 8, and the so on.

00:12:08.760 --> 00:12:12.450
And then we just call ourselves
recursively again. And this is the entire

00:12:12.450 --> 00:12:17.070
program. So actually, the program is
shorter than the English description we

00:12:17.070 --> 00:12:20.550
had of the algorithm. It's useful to
actually think, how does each step

00:12:20.550 --> 00:12:24.930
actually get represented here? Well the
first step was, we write down the numbers

00:12:24.930 --> 00:12:29.790
from 2 up to infinity, which is here. The
second step is, we mark the first value

00:12:29.790 --> 00:12:35.670
as being prime, so that's the value p
here. The third step is, we remove all the

00:12:35.670 --> 00:12:39.089
multiples of p, so all the multiples of
two initially from the list, and that's

00:12:39.089 --> 00:12:43.860
the part here. And then the final step is,
we run the algorithm again from step 2,

00:12:43.860 --> 00:12:47.760
and that's calling the sieve function. So
we've got our program here, so let's see

00:12:47.760 --> 00:12:53.730
it actually working. So let me start up
the Haskell system again. Good, we've got

00:12:53.730 --> 00:12:58.829
no errors, which is good. So let's run the
prime number program. And here we get all

00:12:58.829 --> 00:13:01.769
the prime numbers again. So it gives
exactly the same results as the simpler

00:13:01.769 --> 00:13:05.790
algorithm, which we wrote before, but it
does so a lot more quickly. And if you do

00:13:05.790 --> 00:13:09.570
some simple experiments, for numbers
up this kind of size, it runs about 10

00:13:09.570 --> 00:13:13.529
times faster than the simple algorithm
which we had previously. So what could we

00:13:13.529 --> 00:13:17.579
do with this? Well we could do a whole
bunch of things. So, for example, if I

00:13:17.579 --> 00:13:19.620
wanted a hundred prime
numbers, I don't now 

00:13:19.620 --> 00:13:22.980
need to write a program which generates
100 prime numbers, I just take the

00:13:22.980 --> 00:13:27.720
infinite list of all the prime numbers,
and I take a hundred. So I've kind of

00:13:27.720 --> 00:13:32.130
separated my "control" part, which is
taking a hundred numbers, from my "data"

00:13:32.130 --> 00:13:35.460
part, which is having an infinite list of
primes. And this idea of separating

00:13:35.460 --> 00:13:39.720
control and data, using infinite data
structures, is a very powerful way of

00:13:39.720 --> 00:13:42.900
thinking about programming.
And I can do other things as well.

00:13:42.900 --> 00:13:48.270
So for example if I wanted to say, give
me all the prime numbers less than 100,

00:13:48.270 --> 00:13:52.950
I don't need to write a separate program
for that now. I just take my infinite

00:13:52.950 --> 00:13:58.380
list, of all the prime numbers, and I say
"takeWhile" less than 100, and I get that.

00:13:58.380 --> 00:14:02.280
And in many languages, if you wanted to
write these two separate programs, you'd

00:14:02.280 --> 00:14:06.270
need to write some separate programs,
basically. But if you can manipulate

00:14:06.270 --> 00:14:09.750
infinite data structures, you just have
your infinite list of primes, and then

00:14:09.750 --> 00:14:12.540
you can do whatever you want with them
afterwards: you can select what parts you

00:14:12.540 --> 00:14:16.620
like. Just to conclude, let me do one
final little example, to do with what's

00:14:16.620 --> 00:14:20.280
called twin primes.
So twin primes, are primes

00:14:20.280 --> 00:14:25.950
which differ by two -- so 3 and 5 are twins,
because they differ by two; 5 and 7 are

00:14:25.950 --> 00:14:29.430
twins, because they differ by two; 7 and 11
are not twins, because they differ by four.

00:14:29.430 --> 00:14:33.570
So how do we write a program, using what
we've already done, that generates all

00:14:33.570 --> 00:14:39.120
the twin primes. So first of all, let me say
what it means to be a twin. So, I'll say a

00:14:39.120 --> 00:14:46.950
pair (x,y) is a twin, if y is x+2. So
for example, if I say is 3 and 5 a twin,

00:14:46.950 --> 00:14:52.710
it will say true; and if I say is 7 and 11
a twin, then I get no. So how do I use

00:14:52.710 --> 00:14:56.010
this to write a program that generates
all the twin primes. Well what I'm going

00:14:56.010 --> 00:14:59.730
to do, is I'm going to generate the
infinite list of all the twins, and I'm

00:14:59.730 --> 00:15:05.370
going to simply filter twin, from "zip"
of primes and "tail" primes. So there's a

00:15:05.370 --> 00:15:09.180
couple of bits we haven't seen before
here. What does tail do? So tail takes a

00:15:09.180 --> 00:15:13.980
list, which could be infinite, and removes
the first thing. So if we write tail of

00:15:13.980 --> 00:15:17.280
primes, what we're going to do is take
the infinite list of all prime numbers,

00:15:17.280 --> 00:15:23.190
and throw the 2 away. So we'll get 3, 5,
7, 11, etc. What zip does is it takes two

00:15:23.190 --> 00:15:26.250
lists, and they can be finite or infinite.
So suppose I've got two lists of five

00:15:26.250 --> 00:15:30.720
numbers. What zip does, is it pairs up the
corresponding elements in the two lists.

00:15:30.720 --> 00:15:33.000
So it pairs up the first thing,
the second, third, fourth

00:15:33.000 --> 00:15:36.390
and fifth. So what it's going to do here
with the infinite lists, is we're going

00:15:36.390 --> 00:15:41.220
to zip, the infinite list of all the
prime numbers, with the infinite list of

00:15:41.220 --> 00:15:44.910
all the prime numbers apart from the
first one. So what we're going to get

00:15:44.910 --> 00:15:49.710
coming out of this zip, is an infinite
list of pairs, of each prime number and

00:15:49.710 --> 00:15:54.990
the next prime number. So we'll get
2 and 3, 3 and 5, and so on, and so on.

00:15:54.990 --> 00:15:58.410
And then all we're going to do, is take
that infinite list of all of those pairs,

00:15:58.410 --> 00:16:02.580
and filter the twins out of it. And this
is enough to generate all the twin

00:16:02.580 --> 00:16:06.420
primes. So I can test this out. Here's 
the infinite list of twin primes. And

00:16:06.420 --> 00:16:10.380
this is a one-line program to do this,
based on a two-line program which we had,

00:16:10.380 --> 00:16:13.680
to generate the infinite list of all the
prime numbers. Going back to where I

00:16:13.680 --> 00:16:18.000
started, programming with infinite data
structures sounds impossible, but as

00:16:18.000 --> 00:16:21.060
we've seen today, and I hope to have
convinced you, it's actually quite simple,

00:16:21.060 --> 00:16:26.040
and natural, and practical.
&lt;Sean&gt; That's all because Haskell is lazy?

00:16:26.040 --> 00:16:30.120
Yeah it's because of laziness. So you can
do this in other programming languages,

00:16:30.120 --> 00:16:34.710
but essentially you need to fake lazy
evaluation in some way. And languages are

00:16:34.710 --> 00:16:40.490
providing a bit more support these days
for doing that and there's...

