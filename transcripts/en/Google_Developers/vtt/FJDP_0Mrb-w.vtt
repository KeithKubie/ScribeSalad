WEBVTT
Kind: captions
Language: en

00:00:02.334 --> 00:00:04.000
Green: Hi, everybody.

00:00:04.000 --> 00:00:07.000
I'm Travis Green, product
manager on the Prediction API.

00:00:07.000 --> 00:00:10.000
We're here to talk to you today
about smart application design,

00:00:10.000 --> 00:00:13.000
uh, but first, I want to do
a little survey of the audience.

00:00:13.000 --> 00:00:15.667
So how many of you have ever
built or wanted to build

00:00:15.667 --> 00:00:18.667
a recommendation system
for one of your applications?

00:00:18.667 --> 00:00:20.667
Not bad. Okay.

00:00:20.667 --> 00:00:22.667
I got a hand wave up here.
[laughs]

00:00:22.667 --> 00:00:25.100
Uh, how many of you
have ever wanted to do

00:00:25.100 --> 00:00:27.100
a sentiment analysis
on one of your app--

00:00:27.100 --> 00:00:29.100
in one of your applications?
Okay.

00:00:29.100 --> 00:00:32.501
How many of you have ever had to
do something really repetitive

00:00:32.501 --> 00:00:35.434
to make one of
your applications work?

00:00:35.434 --> 00:00:37.100
Okay.

00:00:37.100 --> 00:00:39.100
So we're here today
to talk to you about

00:00:39.100 --> 00:00:42.434
how you can stop doing some
of those more repetitive things.

00:00:42.434 --> 00:00:44.434
Um--oop--

00:00:44.434 --> 00:00:46.434
there we go.

00:00:46.434 --> 00:00:49.434
So first, we should think about,
what is a smart application?

00:00:49.434 --> 00:00:52.434
Um, the screen here shows you
three themes that we talk about,

00:00:52.434 --> 00:00:54.434
and some examples
of smart applications.

00:00:54.434 --> 00:00:56.434
I'm gonna walk through
each of them.

00:00:56.434 --> 00:00:58.434
Then we'll move into, um,

00:00:58.434 --> 00:01:00.434
talking about how all these
sorts of things work,

00:01:00.434 --> 00:01:02.901
then we'll show off how
the Prediction API works.

00:01:02.901 --> 00:01:05.901
Um, my colleagues Max and Robert
will give a demo of--

00:01:05.901 --> 00:01:07.400
live coding demo

00:01:07.400 --> 00:01:09.400
of how the system
can be built from scratch.

00:01:09.400 --> 00:01:12.400
And then Johannes
and Ryan over there from Ford

00:01:12.400 --> 00:01:14.400
will talk about how
they've been using the API,

00:01:14.400 --> 00:01:16.901
and then we'll talk about
some of the really cool things

00:01:16.901 --> 00:01:19.400
that we announced yesterday,
and show them off to you.

00:01:19.400 --> 00:01:21.400
So first, what is
a smart application?

00:01:21.400 --> 00:01:23.901
Um, we think about
smart applications with--

00:01:23.901 --> 00:01:25.567
at the Prediction API team

00:01:25.567 --> 00:01:27.567
as things that automate
the repetitive,

00:01:27.567 --> 00:01:30.567
extract the essential,
and recommend the useful.

00:01:30.567 --> 00:01:32.567
So things that automate
the repetitive

00:01:32.567 --> 00:01:35.067
are things like
content moderation.

00:01:35.067 --> 00:01:37.067
So let's imagine
you're running a blog,

00:01:37.067 --> 00:01:39.067
and you have a forum
on that blog,

00:01:39.067 --> 00:01:41.734
and you get a lot of spam,
you know, say, spam about, um,

00:01:41.734 --> 00:01:43.901
certain drugs you don't
want to see on your blog.

00:01:43.901 --> 00:01:45.901
Filtering those out
is really frustrating

00:01:45.901 --> 00:01:47.567
and really complicated, um,

00:01:47.567 --> 00:01:49.567
because sometimes the patterns
that you'll be seeing

00:01:49.567 --> 00:01:51.234
from that spam will change.

00:01:51.234 --> 00:01:54.067
And so with the Prediction API,
you can go and you can say,

00:01:54.067 --> 00:01:57.100
"Well, I have all this data
that I've used in the past,

00:01:57.100 --> 00:01:59.067
"so I have labeled
all these comments

00:01:59.067 --> 00:02:01.133
"as things that
should be posted

00:02:01.133 --> 00:02:03.133
"or things that
shouldn't be posted,

00:02:03.133 --> 00:02:05.133
"and I can take those lessons
and apply them 

00:02:05.133 --> 00:02:06.801
to new comments coming in."

00:02:06.801 --> 00:02:08.801
So I can say,
"All right, well, these,

00:02:08.801 --> 00:02:11.300
"the ones that score very high,
are automatically posted.

00:02:11.300 --> 00:02:13.300
"The ones that scores--
that score very low

00:02:13.300 --> 00:02:15.300
"are automatically rejected,
and the small group

00:02:15.300 --> 00:02:17.300
in the middle,
I will look at myself."

00:02:17.300 --> 00:02:18.801
So something that--

00:02:18.801 --> 00:02:20.801
now moving on to things
that extract the essential--

00:02:20.801 --> 00:02:22.801
a great example of this
is GMAIL'S priority inbox.

00:02:22.801 --> 00:02:24.801
It takes the patterns
that you have shown

00:02:24.801 --> 00:02:26.634
by looking at messages
over time,

00:02:26.634 --> 00:02:29.133
and then applies those patterns
to incoming messages,

00:02:29.133 --> 00:02:30.767
so that you know--

00:02:30.767 --> 00:02:33.267
you can see the most important
ones right at the top.

00:02:33.267 --> 00:02:35.868
Now things that recommend
the useful.

00:02:35.868 --> 00:02:38.868
The example onscreen is, um,
an apps recommender

00:02:38.868 --> 00:02:41.868
written by one of the developer
relations people here at Google,

00:02:41.868 --> 00:02:43.868
that takes
certain characteristics

00:02:43.868 --> 00:02:46.400
about a business, you fill out
these five questions,

00:02:46.400 --> 00:02:48.400
and then it
predicts applications

00:02:48.400 --> 00:02:50.400
you're most likely
to be interested in.

00:02:50.400 --> 00:02:52.100
That's a very simple form,

00:02:52.100 --> 00:02:54.601
but you can imagine things
getting much more complicated.

00:02:54.601 --> 00:02:56.601
Um, some of the more
complicated things

00:02:56.601 --> 00:02:58.267
would be things like Pandora,

00:02:58.267 --> 00:03:00.267
which gives you an infinite
stream of music

00:03:00.267 --> 00:03:02.334
from pieces of music
people have liked,

00:03:02.334 --> 00:03:04.634
and also things that--
the intrinsic characteristics

00:03:04.634 --> 00:03:06.234
of the music itself.

00:03:06.234 --> 00:03:08.234
Another example--
this team's from New York,

00:03:08.234 --> 00:03:10.534
so we always are trying to get
cabs late at night,

00:03:10.534 --> 00:03:12.534
and one of the great
applications in New York

00:03:12.534 --> 00:03:14.534
is called CabSense,
which, you know,

00:03:14.534 --> 00:03:16.534
depending on where
you're standing in the city,

00:03:16.534 --> 00:03:19.200
will look at all of
the cab rides, uh, for years,

00:03:19.200 --> 00:03:20.767
millions of cab rides,

00:03:20.767 --> 00:03:22.767
and tell you which corner
to stand on

00:03:22.767 --> 00:03:24.767
to catch a cab most quickly.

00:03:24.767 --> 00:03:26.767
So you can think about
these sorts of applications

00:03:26.767 --> 00:03:30.100
as being the forefront of a new
generation of applications.

00:03:30.100 --> 00:03:31.767
But we're left
with the question of,

00:03:31.767 --> 00:03:33.767
how do you
build these things?

00:03:33.767 --> 00:03:36.601
You know, um, they may seem
like magic on the front,

00:03:36.601 --> 00:03:38.601
but there's gotta be
something behind them.

00:03:38.601 --> 00:03:41.334
So machine learning
is a great way to do this.

00:03:41.334 --> 00:03:43.901
Um, It's something

00:03:43.901 --> 00:03:46.901
that many people seem to think
you need a PhD in statistics,

00:03:46.901 --> 00:03:49.467
or a PhD in complex
mathematics to do.

00:03:49.467 --> 00:03:51.734
But we make it really easy.

00:03:51.734 --> 00:03:53.734
So the screen here shows you

00:03:53.734 --> 00:03:55.734
just conceptually
how all that works.

00:03:55.734 --> 00:03:57.734
You take a set of inputs,
a set of examples,

00:03:57.734 --> 00:04:00.000
look at them, see how, um--

00:04:00.000 --> 00:04:02.801
see what things have indicated,
a certain kind of behavior,

00:04:02.801 --> 00:04:04.801
learn patterns

00:04:04.801 --> 00:04:07.801
and create
a model of that input set,

00:04:07.801 --> 00:04:10.801
and then use that when you have
a new example coming in

00:04:10.801 --> 00:04:15.167
to predict characteristics
about it as an output.

00:04:15.167 --> 00:04:17.167
So now this slide shows you
how the Prediction API

00:04:17.167 --> 00:04:18.734
makes that really easy.

00:04:18.734 --> 00:04:20.968
Um, we talk about three
simple HTTP calls,

00:04:20.968 --> 00:04:23.634
the first being that you want
to upload a predictive mo--

00:04:23.634 --> 00:04:26.667
or, upload data for your
predictive model to learn from.

00:04:26.667 --> 00:04:28.267
Then you say to the API,

00:04:28.267 --> 00:04:30.267
"Well, I want to train
a predictive model

00:04:30.267 --> 00:04:32.467
from my data," so then we
go out and we apply

00:04:32.467 --> 00:04:35.467
many different algorithms to try
to find the best possible one.

00:04:35.467 --> 00:04:37.934
Then when you have
a new example come in,

00:04:37.934 --> 00:04:40.934
say, a new piece of text you
want to know the sentiment of,

00:04:40.934 --> 00:04:42.934
of a new user who you want
to recommend, uh,

00:04:42.934 --> 00:04:45.634
different content to,
the system will then apply

00:04:45.634 --> 00:04:48.133
the lessons its learned,
the patterns its learned,

00:04:48.133 --> 00:04:50.133
to that new example,
and show you an output

00:04:50.133 --> 00:04:52.133
that indicates, you know,
what sorts of content

00:04:52.133 --> 00:04:53.801
that user is interested in,

00:04:53.801 --> 00:04:56.300
or what the sentiment
of that specific post is.

00:04:56.300 --> 00:04:58.834
Now this system was available

00:04:58.834 --> 00:05:01.434
to preview developers
before yesterday,

00:05:01.434 --> 00:05:03.434
so we're very,
very happy to announce

00:05:03.434 --> 00:05:06.434
that all of you here
and everyone across the world

00:05:06.434 --> 00:05:08.033
can try it out.

00:05:08.033 --> 00:05:10.033
Uh, we are both offering
a free quota

00:05:10.033 --> 00:05:12.033
for anyone to try out
the system,

00:05:12.033 --> 00:05:13.701
and then also an SLA

00:05:13.701 --> 00:05:16.267
for users who want to make
bigger applications,

00:05:16.267 --> 00:05:18.267
um, and that
will be a paid tier,

00:05:18.267 --> 00:05:21.334
so you can see that we have
a 3 9's service level agreement.

00:05:21.334 --> 00:05:23.334
That is to ensure
that you guys

00:05:23.334 --> 00:05:25.334
can be sure you
can depend on us,

00:05:25.334 --> 00:05:28.000
that the system will always
be there when you need it.

00:05:28.000 --> 00:05:30.000
[applause]

00:05:30.000 --> 00:05:32.000
Green: Um, thank you.

00:05:32.000 --> 00:05:34.501
I'd like to now turn it over
to Max and Robert,

00:05:34.501 --> 00:05:36.501
who will show you
with some live code,

00:05:36.501 --> 00:05:38.868
how you build one of these
applications yourself.

00:05:46.000 --> 00:05:48.968
Lin: Hi, everyone.
My name's Max Lin.

00:05:48.968 --> 00:05:51.734
Uh, I'm a server engineer
on the Prediction API team.

00:05:51.734 --> 00:05:54.701
Uh, this is
my colleague Robert.

00:05:54.701 --> 00:05:57.167
Um, so as Travis said,

00:05:57.167 --> 00:05:59.167
today at the I/O,

00:05:59.167 --> 00:06:01.734
we are going to make
this Prediction API

00:06:01.734 --> 00:06:04.734
generally available,
so what does that mean to you?

00:06:04.734 --> 00:06:07.734
That means everyone
that is in this room,

00:06:07.734 --> 00:06:10.734
and also the people seeing this
presentation through the video,

00:06:10.734 --> 00:06:13.734
you can sign up right now
and use the Prediction API

00:06:13.734 --> 00:06:17.734
to make your, uh, apps smarter.

00:06:17.734 --> 00:06:19.734
So let me show you how you--

00:06:19.734 --> 00:06:22.734
how easy you can sign out
the Prediction API now.

00:06:22.734 --> 00:06:24.734
So we are going to use a tool

00:06:24.734 --> 00:06:27.400
called Google APIs console,

00:06:27.400 --> 00:06:30.400
so in case you haven't noticed,
this is a new, uh,

00:06:30.400 --> 00:06:34.300
like, a one-stop place for you
to use various Google APIs.

00:06:34.300 --> 00:06:37.300
So here, I'm going
to show you, um,

00:06:37.300 --> 00:06:40.300
you can go
to Google APIs console,

00:06:40.300 --> 00:06:42.300
or go to the URL
on the screen.

00:06:42.300 --> 00:06:47.300
It's
code.google.com/apis/console.

00:06:47.300 --> 00:06:49.300
And so let me just show you

00:06:49.300 --> 00:06:51.300
how you can sign out
Prediction API.

00:06:51.300 --> 00:06:53.300
So for the first time,

00:06:53.300 --> 00:06:55.300
you go to APIs console.

00:06:55.300 --> 00:06:58.334
On the screen,
you will see a list of APIs,

00:06:58.334 --> 00:07:01.367
and Google Prediction API
is one of them.

00:07:01.367 --> 00:07:03.367
So how do you sign up?

00:07:03.367 --> 00:07:06.367
How do you, uh,
and sign-up is pretty easy.

00:07:06.367 --> 00:07:08.868
It's just one
simple mouse click,

00:07:08.868 --> 00:07:10.868
and if you go to Prediction API,

00:07:10.868 --> 00:07:12.868
yeah, and click,
and that come up,

00:07:12.868 --> 00:07:15.868
and then you can start to use
Prediction API.

00:07:15.868 --> 00:07:18.968
Just one simple mouse click,
you can use.

00:07:18.968 --> 00:07:21.868
Uh, on the top, you will see
a yellow bar.

00:07:21.868 --> 00:07:23.868
It kind of reminds you
to sign up

00:07:23.868 --> 00:07:25.868
Google Storage for Developers.

00:07:25.868 --> 00:07:28.868
Uh, I'm going to explain to you
why you need to sign up this.

00:07:28.868 --> 00:07:31.868
Uh, in a very simple sense,

00:07:31.868 --> 00:07:34.868
Prediction API is all about

00:07:34.868 --> 00:07:36.868
learning from historical data,

00:07:36.868 --> 00:07:39.234
and how do you pass
the historical data

00:07:39.234 --> 00:07:41.734
to Google Prediction API?

00:07:41.734 --> 00:07:44.734
You upload the data
to Google storage.

00:07:44.734 --> 00:07:46.734
Uh, Google storage

00:07:46.734 --> 00:07:49.234
is a storage service
running on a cloud,

00:07:49.234 --> 00:07:51.234
and again,
it's very easy to sign up

00:07:51.234 --> 00:07:53.067
Google storage for developers.

00:07:53.067 --> 00:07:55.067
Uh, if you scroll down,

00:07:55.067 --> 00:07:57.067
you will see storage--
that is there,

00:07:57.067 --> 00:08:00.067
and you just, again,
single mouse click,

00:08:00.067 --> 00:08:03.133
and you can sign up
Google storage, too.

00:08:03.133 --> 00:08:05.000
And that's it.

00:08:05.000 --> 00:08:07.634
Um, and we already signed up
the Prediction API,

00:08:07.634 --> 00:08:09.634
and we are ready
to start use.

00:08:09.634 --> 00:08:12.467
So for the following
presentation, um,

00:08:12.467 --> 00:08:15.968
I'm going to run--
give you running examples

00:08:15.968 --> 00:08:19.167
of monitoring such a media.

00:08:19.167 --> 00:08:21.167
So suppose you are a company,

00:08:21.167 --> 00:08:23.167
and you are interested in, uh,

00:08:23.167 --> 00:08:25.000
various social media,

00:08:25.000 --> 00:08:27.501
and you are interested--
like, for me,

00:08:27.501 --> 00:08:29.968
I like, uh, three topics.

00:08:29.968 --> 00:08:31.968
So whenever people mention

00:08:31.968 --> 00:08:34.968
App Engine, Android, or Chrome,

00:08:34.968 --> 00:08:36.968
I want to automatically
detect that,

00:08:36.968 --> 00:08:39.467
and try to kind of
give me alert.

00:08:39.467 --> 00:08:41.467
So how do you do that?

00:08:41.467 --> 00:08:44.467
So you can, he mentioned,
you have some input,

00:08:44.467 --> 00:08:47.467
and you want to generate
some output.

00:08:47.467 --> 00:08:50.234
And input here
will be a piece of text.

00:08:50.234 --> 00:08:52.234
So it's a piece of text

00:08:52.234 --> 00:08:54.234
you find on a social media.

00:08:54.234 --> 00:08:56.667
And what's the output we want?

00:08:56.667 --> 00:08:59.434
We want to automatically detect
this is--

00:08:59.434 --> 00:09:01.501
that this piece of text

00:09:01.501 --> 00:09:04.000
is about App Engine,
Android, or Chrome.

00:09:04.000 --> 00:09:05.634
That's what we want.

00:09:05.634 --> 00:09:08.300
We want some output
in three categories.

00:09:08.300 --> 00:09:09.968
So how do you do that?

00:09:09.968 --> 00:09:12.968
So imagine you sit down,
you want to write this function,

00:09:12.968 --> 00:09:15.968
a very simple input and output
mapping yourself,

00:09:15.968 --> 00:09:17.634
which is pretty hard,

00:09:17.634 --> 00:09:19.634
because it's hard
to figure out the rules.

00:09:19.634 --> 00:09:21.634
The rules can be complex.

00:09:21.634 --> 00:09:24.634
So I'm going to show you how you
can use Prediction API,

00:09:24.634 --> 00:09:27.634
uh, to learn the mappings,

00:09:27.634 --> 00:09:30.634
um, using machine learning
technologies

00:09:30.634 --> 00:09:32.634
we use internally at Google,

00:09:32.634 --> 00:09:35.634
and we open it up, and it's
a Prediction API for you to use,

00:09:35.634 --> 00:09:37.634
and hopefully then,

00:09:37.634 --> 00:09:40.133
you can leverage this
Prediction API

00:09:40.133 --> 00:09:42.133
to make your apps smarter.

00:09:42.133 --> 00:09:45.133
So the first step
is called "upload,"

00:09:45.133 --> 00:09:47.133
and this basically
boils down to

00:09:47.133 --> 00:09:49.133
collect a bunch of examples.

00:09:49.133 --> 00:09:51.133
And those examples
I show on the screen--

00:09:51.133 --> 00:09:54.133
Uh, in a minute,
you will see two lines

00:09:54.133 --> 00:09:57.133
in a very simple, common,
separated value format,

00:09:57.133 --> 00:10:00.133
and one example per line,

00:10:00.133 --> 00:10:02.133
and the first line,

00:10:02.133 --> 00:10:05.133
you will see the first
column is, uh, #appengine.

00:10:05.133 --> 00:10:08.133
In the second column
is a piece of text,

00:10:08.133 --> 00:10:11.133
the python library, uh,

00:10:11.133 --> 00:10:13.133
for hosted SQL.

00:10:13.133 --> 00:10:14.968
So one example per line,

00:10:14.968 --> 00:10:17.968
and you collect
as many examples as you can.

00:10:17.968 --> 00:10:19.968
So what do we want to do
with this?

00:10:19.968 --> 00:10:21.968
We basically collect
historical data,

00:10:21.968 --> 00:10:24.968
how people talk about
App Engine, Android, or Chrome.

00:10:24.968 --> 00:10:27.968
We collect as many examples
as we can.

00:10:27.968 --> 00:10:30.968
Um, so you put these examples

00:10:30.968 --> 00:10:32.968
as a file,
so you see here,

00:10:32.968 --> 00:10:36.400
we save this one examples,
two examples,

00:10:36.400 --> 00:10:38.968
and many, many examples,
in a file,

00:10:38.968 --> 00:10:41.200
in this very simple CSV format.

00:10:41.200 --> 00:10:43.400
And to, uh,

00:10:43.400 --> 00:10:46.200
how do we pass this file
to Google storage?

00:10:46.200 --> 00:10:48.200
Uh, we are going to show you,

00:10:48.200 --> 00:10:51.234
using a very simple tool
called GSUtil.

00:10:51.234 --> 00:10:54.200
And this tool, it's just
one of the many tools

00:10:54.200 --> 00:10:57.200
you can upload file
to Google storage.

00:10:57.200 --> 00:10:59.200
And I'm gonna show--

00:10:59.200 --> 00:11:01.801
this is a common line tool
called GSUtil,

00:11:01.801 --> 00:11:04.300
and, uh, we do "cp."

00:11:04.300 --> 00:11:06.300
I'm going to copy
the training file

00:11:06.300 --> 00:11:08.133
"my_data,"

00:11:08.133 --> 00:11:10.801
and this file consists
of many, many lines

00:11:10.801 --> 00:11:13.801
of the social media tags

00:11:13.801 --> 00:11:16.801
talking about App Engine,
Android, or Chrome,

00:11:16.801 --> 00:11:19.701
that we already know for sure.

00:11:19.701 --> 00:11:22.200
Then we upload
to Google storage,

00:11:22.200 --> 00:11:26.200
and the syntax is gs://io11,

00:11:26.200 --> 00:11:29.200
and io11 is just a bucket, uh,

00:11:29.200 --> 00:11:32.200
it's the way how Google storage
organize your files.

00:11:32.200 --> 00:11:35.200
And inside this bucket,
we are going to call this file

00:11:35.200 --> 00:11:38.200
/my_data,
and that's it.

00:11:38.200 --> 00:11:40.200
So let's, uh, run it.

00:11:40.200 --> 00:11:43.200
And so what happened
behind the scene here, you see,

00:11:43.200 --> 00:11:46.200
is the file, the historical data

00:11:46.200 --> 00:11:48.200
about the social media,

00:11:48.200 --> 00:11:51.200
uh, actually copied
from this ledger

00:11:51.200 --> 00:11:54.200
to the Google storage
in the cloud now.

00:11:54.200 --> 00:11:57.200
And that's it. That's
just a simple first step.

00:11:57.200 --> 00:11:59.200
You collect a bunch of data,

00:11:59.200 --> 00:12:01.267
you collect historical data,

00:12:01.267 --> 00:12:03.267
you upload to Google storage.

00:12:03.267 --> 00:12:05.267
So let's look
at the second step.

00:12:05.267 --> 00:12:06.767
It's called "training."

00:12:06.767 --> 00:12:10.601
And in this step, we want
to tell Prediction API,

00:12:10.601 --> 00:12:13.934
"Hey, go over
my historical data,

00:12:13.934 --> 00:12:15.934
"learn the mappings

00:12:15.934 --> 00:12:18.601
between inputs and outputs."

00:12:18.601 --> 00:12:21.100
And though it may sound simple,

00:12:21.100 --> 00:12:23.100
but behind the scenes,
we do a very--

00:12:23.100 --> 00:12:25.100
uh, various optimizations

00:12:25.100 --> 00:12:28.267
and use the technology
we use internally at Google.

00:12:28.267 --> 00:12:29.767
We run that

00:12:29.767 --> 00:12:33.434
and run many, many different
machinery algorithms

00:12:33.434 --> 00:12:36.100
and pick the one that's best
for your own data.

00:12:36.100 --> 00:12:39.934
And so how do you interact
with Prediction API?

00:12:39.934 --> 00:12:42.601
So in the middle, you will see,

00:12:42.601 --> 00:12:46.100
um, it's a simple HTTP call.

00:12:46.100 --> 00:12:49.601
So Prediction API--
it's a RESTful service.

00:12:49.601 --> 00:12:53.100
And the way you interact
with Prediction API

00:12:53.100 --> 00:12:54.601
is through the network,

00:12:54.601 --> 00:12:57.100
through the HTTP protocol.

00:12:57.100 --> 00:12:59.934
So here, in order to ask
for Prediction API

00:12:59.934 --> 00:13:01.501
to start training,

00:13:01.501 --> 00:13:03.167
you make a POST call.

00:13:03.167 --> 00:13:05.033
And the URL is pretty simple.

00:13:05.033 --> 00:13:08.834
It's just
prediction/v1.2/training.

00:13:08.834 --> 00:13:10.834
Inside the body

00:13:10.834 --> 00:13:12.834
of this HTTP POST call

00:13:12.834 --> 00:13:15.334
you specify the name

00:13:15.334 --> 00:13:17.834
you just uploaded
to Google storage.

00:13:17.834 --> 00:13:19.334
And that's it.

00:13:19.334 --> 00:13:21.167
You just tell
Google Prediction API,

00:13:21.167 --> 00:13:23.667
um, to start a training job

00:13:23.667 --> 00:13:26.334
and look over
this historical data

00:13:26.334 --> 00:13:30.000
that you specify in the body
of the HTTP call.

00:13:30.000 --> 00:13:32.334
And the training
is running asynchronously.

00:13:32.334 --> 00:13:35.000
So when you make a call
and training starts--

00:13:35.000 --> 00:13:38.200
and it depends on the size.
It can take a while.

00:13:38.200 --> 00:13:40.501
So how do you know
the training is finished?

00:13:40.501 --> 00:13:43.000
Uh, in order to know
the training is finished or not,

00:13:43.000 --> 00:13:45.000
you'd make another GET call,

00:13:45.000 --> 00:13:47.000
and the syntax is very similar.

00:13:47.000 --> 00:13:48.667
It's the URL.

00:13:48.667 --> 00:13:51.834
And instead of POST call,
you make a GET call.

00:13:51.834 --> 00:13:53.501
So let me show you, uh,

00:13:53.501 --> 00:13:56.334
how we can actually do
the training right now,

00:13:56.334 --> 00:13:58.834
uh, using a tool

00:13:58.834 --> 00:14:02.067
called, uh,
Google APIs Explorer.

00:14:02.067 --> 00:14:05.567
So just in case, uh,
you haven't seen this,

00:14:05.567 --> 00:14:08.567
it's a web app
for you to explore

00:14:08.567 --> 00:14:11.100
various Google APIs.

00:14:11.100 --> 00:14:13.067
So Google Prediction API
is one of them.

00:14:13.067 --> 00:14:15.067
So when you, uh--

00:14:15.067 --> 00:14:18.234
uh, the APIs for--
um, on the le--

00:14:18.234 --> 00:14:19.601
first column you will see

00:14:19.601 --> 00:14:22.100
a bunch
of different Google APIs.

00:14:22.100 --> 00:14:24.767
So you click "Prediction API."

00:14:24.767 --> 00:14:27.100
Uh, right now,
our version is v1.2.

00:14:27.100 --> 00:14:29.434
That will show
in the second column.

00:14:29.434 --> 00:14:32.267
And the third column is
the various methods

00:14:32.267 --> 00:14:34.767
Google Prediction API provides.

00:14:34.767 --> 00:14:37.767
So every URL is one method.

00:14:37.767 --> 00:14:39.434
You can try them out.

00:14:39.434 --> 00:14:41.100
So if you want to try that out--

00:14:41.100 --> 00:14:42.934
say we want to make
a training call.

00:14:42.934 --> 00:14:46.100
Let's try
the training.insert.

00:14:46.100 --> 00:14:48.267
So you click "training.insert,"
and we can--

00:14:48.267 --> 00:14:51.601
you can start to, uh,
fill the body.

00:14:51.601 --> 00:14:53.601
So here, we want to make
a training call

00:14:53.601 --> 00:14:56.100
against the file
of historical data

00:14:56.100 --> 00:14:57.934
we just upload to.

00:14:57.934 --> 00:14:59.767
So we're inside the body.

00:14:59.767 --> 00:15:02.167
We open up this text box,

00:15:02.167 --> 00:15:05.167
and we type the input
in JSON format.

00:15:05.167 --> 00:15:07.667
And there's only one field
you have to provide.

00:15:07.667 --> 00:15:10.167
It's the name
of the historical data

00:15:10.167 --> 00:15:12.000
you uploaded to Google storage.

00:15:12.000 --> 00:15:15.000
So here is io11/my_data,

00:15:15.000 --> 00:15:16.667
and that's the name

00:15:16.667 --> 00:15:20.000
we want Prediction API
to look at.

00:15:20.000 --> 00:15:22.667
That's it.
So that's just, uh,

00:15:22.667 --> 00:15:24.501
making this call right now

00:15:24.501 --> 00:15:27.667
from the Google APIs Explorer.

00:15:27.667 --> 00:15:30.167
And the path that you would
see this as a response--

00:15:30.167 --> 00:15:33.334
returned by Prediction API.

00:15:33.334 --> 00:15:35.334
Again, on the top request,

00:15:35.334 --> 00:15:38.167
you will see
it's a simple POST call

00:15:38.167 --> 00:15:41.167
to the, uh, URL
you see on the screen.

00:15:41.167 --> 00:15:43.501
In the path
in the response section,

00:15:43.501 --> 00:15:45.501
you will see that's a response

00:15:45.501 --> 00:15:48.667
returned by Prediction API
over the network

00:15:48.667 --> 00:15:50.501
through the APIs Explorer.

00:15:50.501 --> 00:15:52.667
So the response--
uh, the first you see

00:15:52.667 --> 00:15:56.501
is "200 OK."
That's HTTP status code,

00:15:56.501 --> 00:15:59.667
so that means our call
is successful.

00:15:59.667 --> 00:16:03.067
And the path that you
will see the response body--

00:16:03.067 --> 00:16:04.734
it's JSON.

00:16:04.734 --> 00:16:08.400
And you will see, um,
returner kind

00:16:08.400 --> 00:16:10.234
and what's the I.D.

00:16:10.234 --> 00:16:11.734
And everything looks fine,

00:16:11.734 --> 00:16:14.234
so that means our training
already starts

00:16:14.234 --> 00:16:17.567
and starts in the background
running in the cloud.

00:16:17.567 --> 00:16:19.567
And Prediciton API

00:16:19.567 --> 00:16:21.901
starts to parse
your historical data,

00:16:21.901 --> 00:16:23.567
running multiple,

00:16:23.567 --> 00:16:25.100
different machinery algorithms

00:16:25.100 --> 00:16:27.734
and try to learn
the relationship

00:16:27.734 --> 00:16:29.567
in your data.

00:16:29.567 --> 00:16:32.567
And that's it.
You finished the second step,

00:16:32.567 --> 00:16:34.067
the training step.

00:16:34.067 --> 00:16:36.234
Now let's look
at the third step,

00:16:36.234 --> 00:16:37.734
uh, called "predict."

00:16:37.734 --> 00:16:39.834
and this is probably the...

00:16:44.834 --> 00:16:46.834
This is probably
the most frequent step

00:16:46.834 --> 00:16:48.834
you are going to do in, um,

00:16:48.834 --> 00:16:50.834
in your--
in your applications.

00:16:50.834 --> 00:16:54.167
In this step, you--
you get a new piece of text,

00:16:54.167 --> 00:16:57.667
a new piece of input,
and you don't know the category.

00:16:57.667 --> 00:16:59.834
And in our case, we don't know--
we want to predict--

00:16:59.834 --> 00:17:02.367
we want to identify this
as our App Engine,

00:17:02.367 --> 00:17:04.534
Android, or Chrome?

00:17:04.534 --> 00:17:07.200
So we want to make a prediction

00:17:07.200 --> 00:17:09.367
against this new piece of text.

00:17:09.367 --> 00:17:12.200
So again, um, in this--
the URL--

00:17:12.200 --> 00:17:14.534
the syntax is similar,

00:17:14.534 --> 00:17:18.200
and it's still one URL
you have to call.

00:17:18.200 --> 00:17:20.868
And you have to specify the name
after the--

00:17:20.868 --> 00:17:23.367
so if you read the--
the call is

00:17:23.367 --> 00:17:28.367
POST prediction/v1.2/
training/io11--

00:17:28.367 --> 00:17:30.667
uh, my_data.

00:17:30.667 --> 00:17:34.167
And that's the--
again, it's the same file name

00:17:34.167 --> 00:17:36.000
you upload to Google storage.

00:17:36.000 --> 00:17:38.000
After that, you append
the predict.

00:17:38.000 --> 00:17:40.334
That means you want
to make a prediction

00:17:40.334 --> 00:17:44.167
against that particular set
of historical data.

00:17:44.167 --> 00:17:47.000
So inside the body, we specify

00:17:47.000 --> 00:17:50.501
the new piece of text
we want to make a prediction.

00:17:50.501 --> 00:17:52.501
So here, uh, the body again--

00:17:52.501 --> 00:17:54.834
it's in simple JSON format.

00:17:54.834 --> 00:17:57.834
And you have
to only specify, um,

00:17:57.834 --> 00:18:02.501
the new piece of text
in a field called, um...

00:18:04.501 --> 00:18:06.834
The I.D. is, uh--

00:18:06.834 --> 00:18:08.667
this is called csvInstance.

00:18:08.667 --> 00:18:12.501
CSV stands for
comma-separated values instance.

00:18:12.501 --> 00:18:14.834
And inside that field,
you populate

00:18:14.834 --> 00:18:17.167
the piece of text
you want to send over

00:18:17.167 --> 00:18:19.834
to Prediction API
over the network.

00:18:19.834 --> 00:18:22.667
So here, we just, uh,
have an example.

00:18:22.667 --> 00:18:24.834
"What's a smart Android app?"

00:18:24.834 --> 00:18:26.667
So that's a new piece of text.

00:18:26.667 --> 00:18:28.834
You don't know
what they're talking about.

00:18:28.834 --> 00:18:30.501
But you want Prediction API,

00:18:30.501 --> 00:18:33.167
based on your historical data,

00:18:33.167 --> 00:18:34.667
and make a prediction,

00:18:34.667 --> 00:18:37.501
and return what's
the most likely hashtag

00:18:37.501 --> 00:18:41.000
or category it's about.

00:18:41.000 --> 00:18:44.334
Um, and here,
I-I give you example

00:18:44.334 --> 00:18:46.334
of a categorization,

00:18:46.334 --> 00:18:48.334
and Prediction API
also supports regression.

00:18:48.334 --> 00:18:51.167
And by "regression," we mean if
you want to predict something,

00:18:51.167 --> 00:18:52.834
it's real values.

00:18:52.834 --> 00:18:54.334
So here for classification,

00:18:54.334 --> 00:18:56.334
it's all discrete categories--

00:18:56.334 --> 00:18:59.334
App Engine or Android or Chrome.

00:18:59.334 --> 00:19:01.400
But for regression problems,

00:19:01.400 --> 00:19:03.400
you want to predict something
with real values,

00:19:03.400 --> 00:19:05.234
like given
the people's height,

00:19:05.234 --> 00:19:07.067
you want to predict
their weight.

00:19:07.067 --> 00:19:09.067
And weight is not discrete.

00:19:09.067 --> 00:19:10.901
Weight is continuous numbers.

00:19:10.901 --> 00:19:14.567
And Prediction API
also supports that.

00:19:14.567 --> 00:19:17.234
Um, so I'm going to show
how we're going to make

00:19:17.234 --> 00:19:19.067
a Prediction API call--

00:19:19.067 --> 00:19:20.734
a prediction call

00:19:20.734 --> 00:19:22.734
in a simple web app demo.

00:19:22.734 --> 00:19:25.067
So I've been talking, um,

00:19:25.067 --> 00:19:26.734
about monitoring social media.

00:19:26.734 --> 00:19:28.734
So this is
a very simple web app.

00:19:28.734 --> 00:19:31.067
We're gonna make
this source code available,

00:19:31.067 --> 00:19:32.901
so don't worry about that.

00:19:32.901 --> 00:19:36.734
And inside this simple web app,

00:19:36.734 --> 00:19:39.400
uh, in the middle,
you see a text box.

00:19:39.400 --> 00:19:41.234
And that piece of text box is--

00:19:41.234 --> 00:19:43.400
we are going to type some text.

00:19:43.400 --> 00:19:46.734
And when we click
the "Predict" button,

00:19:46.734 --> 00:19:49.234
we are going to make
a prediction call

00:19:49.234 --> 00:19:51.067
to Prediction API.

00:19:51.067 --> 00:19:54.234
We are going to pass the text
inside the text box

00:19:54.234 --> 00:19:57.567
over the network
to Prediction API.

00:19:57.567 --> 00:19:59.234
When we get a response,

00:19:59.234 --> 00:20:01.067
we are going to show the result

00:20:01.067 --> 00:20:03.400
on the right
of that "Predict" button

00:20:03.400 --> 00:20:07.067
in the blue--you see,
right now, it's "tag" there,

00:20:07.067 --> 00:20:09.067
and that's the response

00:20:09.067 --> 00:20:12.067
we get from Prediction API.

00:20:12.067 --> 00:20:14.067
Uh, before I show you the codes,

00:20:14.067 --> 00:20:16.701
I just want to have
a quick of hands--

00:20:16.701 --> 00:20:20.200
um, how many of you have written
any web apps before?

00:20:20.200 --> 00:20:22.534
Okay, I see a lot of you.

00:20:22.534 --> 00:20:24.534
Uh, how many--
how many of you

00:20:24.534 --> 00:20:27.701
have, uh, written
any JavaScripts?

00:20:27.701 --> 00:20:30.200
Okay, I see pretty much
almost all of you.

00:20:30.200 --> 00:20:33.200
For those minority
in this room, don't worry.

00:20:33.200 --> 00:20:37.200
Uh, so I'm going to show you
the examples in JavaScript.

00:20:37.200 --> 00:20:40.367
But underlying Prediction API,

00:20:40.367 --> 00:20:42.200
it's a RESTful service.

00:20:42.200 --> 00:20:45.367
So we also provide
Java libraries,

00:20:45.367 --> 00:20:47.868
Python libraries,
Ruby libraries.

00:20:47.868 --> 00:20:50.033
So don't worry about JavaScript.

00:20:50.033 --> 00:20:51.701
Uh, this is just one example.

00:20:51.701 --> 00:20:53.701
But Prediction API
can be called

00:20:53.701 --> 00:20:55.701
from many,
many current libraries,

00:20:55.701 --> 00:20:59.033
because underlying,
it's all HTTP code,

00:20:59.033 --> 00:21:01.601
and it can be called

00:21:01.601 --> 00:21:05.434
from pretty much every
programming language you want.

00:21:05.434 --> 00:21:07.434
So let's bring up the--

00:21:07.434 --> 00:21:09.734
the HTML.

00:21:09.734 --> 00:21:13.267
And so here, the first step
you need to do

00:21:13.267 --> 00:21:15.934
is to include
the JavaScript library,

00:21:15.934 --> 00:21:18.267
which also we announced today.

00:21:18.267 --> 00:21:20.267
And this JavaScript library--

00:21:20.267 --> 00:21:22.267
the way to use it--
just include that.

00:21:22.267 --> 00:21:24.100
And you can see highlight here--

00:21:24.100 --> 00:21:27.434
it's just one simple HTML
you have to do.

00:21:27.434 --> 00:21:29.100
Just add this one line,

00:21:29.100 --> 00:21:30.934
and you'll include
the JavaScript library

00:21:30.934 --> 00:21:33.267
for a Prediction API.

00:21:33.267 --> 00:21:35.601
Now let's look
at the JavaScript.

00:21:35.601 --> 00:21:37.601
So you see on the screen,

00:21:37.601 --> 00:21:40.934
there's a function
called "predict."

00:21:40.934 --> 00:21:43.100
And this function,
this JavaScript function--

00:21:43.100 --> 00:21:44.767
it's going to be called

00:21:44.767 --> 00:21:47.100
when we click
that "Predict" button.

00:21:47.100 --> 00:21:49.434
So I'm going to show you

00:21:49.434 --> 00:21:52.100
how easy to use JavaScript

00:21:52.100 --> 00:21:54.100
to make a predict call,

00:21:54.100 --> 00:21:56.767
uh, in just one single line.

00:21:56.767 --> 00:21:58.934
So here, as you see
on the screen,

00:21:58.934 --> 00:22:00.767
it looks like four lines,

00:22:00.767 --> 00:22:03.334
but it's just one
simple function call.

00:22:03.334 --> 00:22:05.334
And if you look
at this function call,

00:22:05.334 --> 00:22:09.167
the name of the function
is called prediction.predict.

00:22:09.167 --> 00:22:12.334
And you remember,
we see this in APIs for--

00:22:12.334 --> 00:22:13.834
the same name there.

00:22:13.834 --> 00:22:15.334
And this function

00:22:15.334 --> 00:22:17.501
is just one single function
you need to call.

00:22:17.501 --> 00:22:20.501
And inside the body
of this--the arguments--

00:22:20.501 --> 00:22:23.000
just two--just put
my two ingredients.

00:22:23.000 --> 00:22:25.000
First is the name--
again, it's the name

00:22:25.000 --> 00:22:28.834
of the historical data
you uploaded to Google storage.

00:22:28.834 --> 00:22:32.534
So here, we put io11/my_data.

00:22:32.534 --> 00:22:34.834
And the second argument
is the input,

00:22:34.834 --> 00:22:38.334
and this input, again,
is the new piece of text

00:22:38.334 --> 00:22:41.501
you want to send
to Prediction API

00:22:41.501 --> 00:22:44.000
and want to make a prediction
against it.

00:22:44.000 --> 00:22:46.667
So here on the screen, you see
we get this piece of text

00:22:46.667 --> 00:22:50.000
from a particular HTML element,

00:22:50.000 --> 00:22:53.000
but it's easy--very easy
for you to adapt this.

00:22:53.000 --> 00:22:56.667
You just grab whatever
on your web app

00:22:56.667 --> 00:22:59.834
and put it inside
this "csvInstance" field.

00:22:59.834 --> 00:23:02.901
And you can--
you can send this piece of data

00:23:02.901 --> 00:23:04.901
to Google Prediction API.

00:23:04.901 --> 00:23:08.067
So at the end,
when a response is returned,

00:23:08.067 --> 00:23:10.067
we are going to call a callback

00:23:10.067 --> 00:23:13.734
called predictionCallback,
as we highlight here,

00:23:13.734 --> 00:23:17.567
and this callback is
a basic JavaScript function.

00:23:17.567 --> 00:23:19.400
Inside the function,

00:23:19.400 --> 00:23:22.400
we just update the web page.

00:23:22.400 --> 00:23:26.067
So let's save this file
and see this in action.

00:23:26.067 --> 00:23:28.901
So we are gonna save
this JavaScript file,

00:23:28.901 --> 00:23:30.734
and we go back to our web app,

00:23:30.734 --> 00:23:33.567
and we are going
to reload the page.

00:23:33.567 --> 00:23:37.567
So remember, all we do
is just include one line,

00:23:37.567 --> 00:23:39.934
and we include
the JavaScript library,

00:23:39.934 --> 00:23:43.734
and we add one function call
to make a prediction.

00:23:43.734 --> 00:23:45.734
Uh, so let's type something,

00:23:45.734 --> 00:23:48.234
um, in the box.

00:23:48.234 --> 00:23:52.067
Say, "I gave my mom
a new Nexus S phone

00:23:52.067 --> 00:23:55.067
for Mother's Day."

00:23:55.067 --> 00:23:58.400
So this is a new piece of text
we get from social media.

00:23:58.400 --> 00:24:00.734
And we want--want to--

00:24:00.734 --> 00:24:03.801
want Prediction API
to look at it

00:24:03.801 --> 00:24:06.467
based on relationship
with our historical data,

00:24:06.467 --> 00:24:09.133
and try to predict,
is this about Android,

00:24:09.133 --> 00:24:10.801
App Engine, or Chrome?

00:24:10.801 --> 00:24:12.734
So let's hit
the "Predict" button.

00:24:17.033 --> 00:24:19.567
Ooh, so now it works.
Uh, it's Android.

00:24:19.567 --> 00:24:23.367
So--and this Android is--
as you can see on the--

00:24:23.367 --> 00:24:27.200
on the input, there is not--
no word like "Android" there.

00:24:27.200 --> 00:24:29.534
But if you--
based on your historical--

00:24:29.534 --> 00:24:31.367
like if you, um--

00:24:31.367 --> 00:24:33.367
if you collect enough examples,
and you--

00:24:33.367 --> 00:24:35.701
Prediction API
can try to figure out

00:24:35.701 --> 00:24:38.200
why this piece of text
is about Android.

00:24:38.200 --> 00:24:42.033
So let's try something else.

00:24:42.033 --> 00:24:44.701
Uh, "Where can I find,

00:24:44.701 --> 00:24:48.033
say, extensions for educators?"

00:24:48.033 --> 00:24:49.534
So I'm a teacher.

00:24:49.534 --> 00:24:52.467
I want to find,
uh, Chrome extensions.

00:24:54.868 --> 00:24:58.234
Okay, let's send this piece
of text to Prediction API.

00:25:01.701 --> 00:25:03.701
Oh, so now you see the update.

00:25:03.701 --> 00:25:06.367
It's now--Prediction API thinks,
based on your history,

00:25:06.367 --> 00:25:09.367
this is most likely Chrome,

00:25:09.367 --> 00:25:12.868
and you return this
as a Chrome, uh--

00:25:12.868 --> 00:25:15.868
this belongs
to the category Chrome.

00:25:15.868 --> 00:25:17.868
So I want you--
I want you to remember

00:25:17.868 --> 00:25:19.901
that all we do is just add

00:25:19.901 --> 00:25:23.534
one include source code
in our HTML,

00:25:23.534 --> 00:25:25.534
and we'll add just--
add just one function

00:25:25.534 --> 00:25:28.367
using JavaScript library.

00:25:28.367 --> 00:25:30.200
So I hope every one of you here

00:25:30.200 --> 00:25:31.868
can start to think,

00:25:31.868 --> 00:25:34.868
how can I make my apps smarter?

00:25:34.868 --> 00:25:37.200
How can I make
my web apps smarter?

00:25:37.200 --> 00:25:39.033
Because it's very easy to use.

00:25:39.033 --> 00:25:42.200
So now you, as developers,

00:25:42.200 --> 00:25:44.200
it's, um--you should think
that you have

00:25:44.200 --> 00:25:47.868
these tools at your hands,
and it's very easy to use,

00:25:47.868 --> 00:25:50.300
and you can start
to make your apps smarter.

00:25:50.300 --> 00:25:53.133
And this is not
just about JavaScripts.

00:25:53.133 --> 00:25:55.801
It's--we have--
Prediction API

00:25:55.801 --> 00:25:57.968
offers different
kinds of libraries,

00:25:57.968 --> 00:26:01.200
so it doesn't matter if you
are writing Android apps

00:26:01.200 --> 00:26:02.701
or desktop apps.

00:26:02.701 --> 00:26:06.367
It doesn't matter if your apps
run in, um, Android

00:26:06.367 --> 00:26:09.701
or tablets or TV
or even in Chrome.

00:26:09.701 --> 00:26:12.534
It's--it's everything--
once in the cloud,

00:26:12.534 --> 00:26:15.033
you can make a prediction call
over the network.

00:26:15.033 --> 00:26:18.033
You can use Prediction API.

00:26:18.033 --> 00:26:22.033
Um, with that, I'm very happy
to have, uh,

00:26:22.033 --> 00:26:26.067
Ryan and Johannes
from Ford research

00:26:26.067 --> 00:26:29.033
to tell you how they can use
machine learning

00:26:29.033 --> 00:26:30.868
and Prediction API

00:26:30.868 --> 00:26:33.534
to make cars smarter.

00:26:33.534 --> 00:26:36.467
[applause]

00:26:38.534 --> 00:26:41.868
McGee: So as they mentioned,
uh, I'm with Ford research,

00:26:41.868 --> 00:26:43.701
and we're using
the Prediction API

00:26:43.701 --> 00:26:46.033
to do some interesting things
with our vehicles.

00:26:46.033 --> 00:26:49.033
So Ford's been connecting
drivers with their vehicles

00:26:49.033 --> 00:26:51.701
for some time now
using our SYNC system.

00:26:51.701 --> 00:26:53.868
And the next step, which we're
gonna talk about today,

00:26:53.868 --> 00:26:56.534
is to connect the vehicle
to the cloud,

00:26:56.534 --> 00:26:58.200
and we think
that's gonna open up

00:26:58.200 --> 00:27:01.934
all sorts of
interesting possibilities.

00:27:01.934 --> 00:27:04.934
The cloud's gonna give us access
to real-time data,

00:27:04.934 --> 00:27:06.934
such as traffic and weather.

00:27:06.934 --> 00:27:08.501
It allows us to leverage

00:27:08.501 --> 00:27:10.501
large-scale
computational capabilities.

00:27:10.501 --> 00:27:12.267
And if we take that
and couple it

00:27:12.267 --> 00:27:14.167
with some intelligent
machine learning,

00:27:14.167 --> 00:27:17.100
what we can do is really develop
personalized control systems

00:27:17.100 --> 00:27:18.767
that are gonna be optimized

00:27:18.767 --> 00:27:22.100
for your individual
driving habits.

00:27:22.100 --> 00:27:24.601
The application
that we're talking about today

00:27:24.601 --> 00:27:26.267
is a plug-in hybrid.

00:27:26.267 --> 00:27:28.100
Now a plug-in hybrid
is an extension

00:27:28.100 --> 00:27:30.934
of a normal hybrid vehicle
with two key differences.

00:27:30.934 --> 00:27:33.601
First, it has
a much bigger battery,

00:27:33.601 --> 00:27:36.100
and secondly,
you can recharge that battery

00:27:36.100 --> 00:27:39.934
using the electric grid system.

00:27:39.934 --> 00:27:41.934
Now you need to imagine a future

00:27:41.934 --> 00:27:44.267
where there are
some geographical areas

00:27:44.267 --> 00:27:45.767
that have been defined.

00:27:45.767 --> 00:27:48.267
Maybe it's your neighborhood.
Maybe it's near a school,

00:27:48.267 --> 00:27:50.767
and maybe it's a government
that's defined this area.

00:27:50.767 --> 00:27:53.267
In fact, there was an article
in "The New York Times"

00:27:53.267 --> 00:27:55.267
earlier this week
about the French government

00:27:55.267 --> 00:27:57.934
looking at this for some
of their biggest cities.

00:27:57.934 --> 00:28:00.434
And the idea is that this area--

00:28:00.434 --> 00:28:02.334
you want to limit your engine.

00:28:02.334 --> 00:28:04.334
You want to try to drive
as an electric vehicle

00:28:04.334 --> 00:28:05.834
in those areas.

00:28:05.834 --> 00:28:07.667
So our job is to save energy,

00:28:07.667 --> 00:28:09.501
so that when you get there,

00:28:09.501 --> 00:28:13.167
you can operate that vehicle
as an electric vehicle.

00:28:13.167 --> 00:28:15.334
So let's talk about a use case.
I go down to my car.

00:28:15.334 --> 00:28:17.334
It's Tuesday, time to go home.

00:28:17.334 --> 00:28:20.334
Car says,
"Good afternoon, Ryan.

00:28:20.334 --> 00:28:22.667
Are you headed home?"
And I say, "Yes, I am."

00:28:22.667 --> 00:28:24.667
It says, "I noticed
there's an EV driving zone

00:28:24.667 --> 00:28:27.667
along your route. Would you like
to save some energy for it?"

00:28:27.667 --> 00:28:30.000
And I say,
"Yes, that would be great."

00:28:30.000 --> 00:28:31.667
So how are we gonna do this?

00:28:31.667 --> 00:28:33.667
Well, as you can guess,
we're gonna try to make use

00:28:33.667 --> 00:28:35.167
of this Prediction API.

00:28:35.167 --> 00:28:38.167
And what we do
is we have driving history.

00:28:38.167 --> 00:28:40.667
So this is the personal data
about how you use your car.

00:28:40.667 --> 00:28:44.501
Then using that, Prediction API
is gonna build a model,

00:28:44.501 --> 00:28:46.667
and we're gonna ask
that API a question.

00:28:46.667 --> 00:28:49.167
We're gonna say, "Where's
this driver gonna go to next?"

00:28:49.167 --> 00:28:51.000
And then once we know that,

00:28:51.000 --> 00:28:54.834
we can optimize the powertrain
for that specific route.

00:28:54.834 --> 00:28:57.167
So now I'm gonna turn it over
to my colleague Johannes,

00:28:57.167 --> 00:28:59.000
who's gonna take a look
under the hood

00:28:59.000 --> 00:29:01.434
and try to explain
exactly how we're doing this.

00:29:03.367 --> 00:29:05.367
Yeah, we were gonna use that.

00:29:05.367 --> 00:29:07.701
Kristinsson: So before we can
make any prediction,

00:29:07.701 --> 00:29:10.367
we need to have data
to predict on.

00:29:10.367 --> 00:29:12.734
And since we are gonna predict
where you will be going,

00:29:12.734 --> 00:29:15.200
we need to know
where you've been.

00:29:15.200 --> 00:29:16.868
And to get that data,

00:29:16.868 --> 00:29:18.701
we've asked a few
of our colleagues

00:29:18.701 --> 00:29:21.033
to install data loggers
on their vehicles.

00:29:21.033 --> 00:29:23.033
Data loggers record
the vehicle's position--

00:29:23.033 --> 00:29:25.534
GPS positions, date, time,

00:29:25.534 --> 00:29:29.367
and other important
vehicle parameters for us.

00:29:29.367 --> 00:29:32.367
Once we've collected that data,
we analyze it

00:29:32.367 --> 00:29:35.701
to identify the locations
for each trip--

00:29:35.701 --> 00:29:37.367
the origin, the destination,

00:29:37.367 --> 00:29:40.701
the time the trip started,
and the date.

00:29:40.701 --> 00:29:42.367
We then reformat this

00:29:42.367 --> 00:29:45.701
into a format
that's suitable for prediction.

00:29:45.701 --> 00:29:47.701
That means that we take
the locations

00:29:47.701 --> 00:29:49.367
and convert them to tags,

00:29:49.367 --> 00:29:53.200
and we take date and time
and make them scalar variables.

00:29:53.200 --> 00:29:56.200
We then upload everything
to the cloud,

00:29:56.200 --> 00:29:58.734
just as was shown for us.

00:30:01.234 --> 00:30:04.501
This is our, um,

00:30:04.501 --> 00:30:07.334
prediction research platform.

00:30:07.334 --> 00:30:09.334
It contains
the same functionality

00:30:09.334 --> 00:30:11.667
as we have
in our prototype cars,

00:30:11.667 --> 00:30:15.000
but allows us to see what's
going on behind the scenes.

00:30:15.000 --> 00:30:17.334
The first time--
first thing that happens

00:30:17.334 --> 00:30:20.167
is that the vehicle receives
a GPS position,

00:30:20.167 --> 00:30:22.834
and since GPS reception
in here is pretty bad,

00:30:22.834 --> 00:30:26.501
I will manually inject
a position

00:30:26.501 --> 00:30:28.667
that corresponds
to my own home.

00:30:28.667 --> 00:30:31.667
Um, say it's it's 6:45
in the morning,

00:30:31.667 --> 00:30:34.667
when I'm normally
heading to work.

00:30:34.667 --> 00:30:38.167
The application will take
this information,

00:30:38.167 --> 00:30:42.000
identify that this belongs
to a location for me--home.

00:30:42.000 --> 00:30:44.000
And since the GPS

00:30:44.000 --> 00:30:46.667
also contains, uh,

00:30:46.667 --> 00:30:48.667
information about date and time,

00:30:48.667 --> 00:30:51.501
we have everything we need
in order to make a prediction.

00:30:51.501 --> 00:30:53.667
We ask the Google Prediction API

00:30:53.667 --> 00:30:56.000
for a categorization request,

00:30:56.000 --> 00:30:58.000
namely to reach the location tag

00:30:58.000 --> 00:31:01.067
that this input data belongs to.

00:31:01.067 --> 00:31:02.567
And as shown here,

00:31:02.567 --> 00:31:04.734
it detects that I'm going
to Ryan in the morning,

00:31:04.734 --> 00:31:08.734
which is pretty true,
since I'm carpooling with him.

00:31:08.734 --> 00:31:12.234
Knowing where we are,
knowing where we're going,

00:31:12.234 --> 00:31:14.567
we can also calculate the route.

00:31:14.567 --> 00:31:16.567
And we cross-reference that

00:31:16.567 --> 00:31:18.901
with a list of our EV zones

00:31:18.901 --> 00:31:21.901
in order to create
an optimized strategy

00:31:21.901 --> 00:31:25.567
for how to drive this route
as Ryan just told us.

00:31:25.567 --> 00:31:28.734
Now everybody's
not 100% predictable.

00:31:28.734 --> 00:31:30.734
It's great that you predict
where you're going,

00:31:30.734 --> 00:31:32.567
but there might be alternatives.

00:31:32.567 --> 00:31:35.234
For example,
this application now believes

00:31:35.234 --> 00:31:37.901
that days when I'm not
carpooling with Ryan,

00:31:37.901 --> 00:31:41.400
I might be working from home
or from somewhere else.

00:31:41.400 --> 00:31:45.067
And, um, just as that,
I can get an optimized strategy

00:31:45.067 --> 00:31:47.067
for that route.

00:31:47.067 --> 00:31:50.067
This is a research platform,

00:31:50.067 --> 00:31:52.901
so I can also change
my input variables.

00:31:52.901 --> 00:31:55.400
Say that I want to see
what I'm doing

00:31:55.400 --> 00:31:57.934
on--on a Sunday morning
at 10:30.

00:32:01.801 --> 00:32:05.133
And a new question is generated
to the Google Prediction API,

00:32:05.133 --> 00:32:07.133
and directly,
I get an answer back

00:32:07.133 --> 00:32:10.968
and can act on that.

00:32:10.968 --> 00:32:12.634
McGee: Thanks, Johannes.

00:32:12.634 --> 00:32:14.801
Um, this isn't vaporware.

00:32:14.801 --> 00:32:16.801
This is actually Johannes and I
driving the vehicle--

00:32:16.801 --> 00:32:18.801
uh, prototype vehicle
just last week

00:32:18.801 --> 00:32:20.801
around the Ford campus,

00:32:20.801 --> 00:32:23.300
uh, proving out this technology.

00:32:23.300 --> 00:32:24.968
So where do we want to go next?

00:32:24.968 --> 00:32:27.968
Well, our own driving habits
change over time,

00:32:27.968 --> 00:32:29.801
so it's important
that these models

00:32:29.801 --> 00:32:31.801
that we're having to predict
future behavior

00:32:31.801 --> 00:32:33.467
are gonna change over time.

00:32:33.467 --> 00:32:35.300
So that's one element
we want to work on.

00:32:35.300 --> 00:32:37.133
And then secondly,
this EV driving zone

00:32:37.133 --> 00:32:40.300
is just one example about how
we could use this technology.

00:32:40.300 --> 00:32:42.133
But we have a whole list
of other ideas

00:32:42.133 --> 00:32:44.467
that we're pursuing, also.

00:32:44.467 --> 00:32:46.968
And then taking it back
to the big picture,

00:32:46.968 --> 00:32:48.968
really, what we want to do
is use the cloud

00:32:48.968 --> 00:32:50.968
to empower the car,
to make it smarter.

00:32:50.968 --> 00:32:52.801
And the intersection
of connectivity

00:32:52.801 --> 00:32:54.467
and powertrain electrification

00:32:54.467 --> 00:32:56.467
I think is really ripe
for innovation.

00:32:56.467 --> 00:32:58.467
And the Prediction API
is just one step

00:32:58.467 --> 00:33:00.801
to really unlock
that technology.

00:33:00.801 --> 00:33:04.701
Now I'd like to turn it
back over to the Google team.

00:33:04.701 --> 00:33:07.634
[applause]

00:33:10.400 --> 00:33:12.300
Kaplow: Hi, everybody.
I'm Robert Kaplow.

00:33:12.300 --> 00:33:14.634
I'm a software engineer
with the Google Prediction API,

00:33:14.634 --> 00:33:16.467
and I'm really happy
to be here today

00:33:16.467 --> 00:33:18.300
to talk to you guys
about some of the cool stuff

00:33:18.300 --> 00:33:19.968
we've been working on.

00:33:19.968 --> 00:33:21.968
I want to thank Ryan
and Johannes from Ford research

00:33:21.968 --> 00:33:23.968
who are here showing you guys
some of the cool uses

00:33:23.968 --> 00:33:26.133
they've been making
with the Prediction API.

00:33:26.133 --> 00:33:28.801
And hopefully, you know,
looking at this kind of stuff,

00:33:28.801 --> 00:33:31.634
you guys can get some ideas for
some of the really cool things

00:33:31.634 --> 00:33:34.133
you guys can do
in your own applications.

00:33:34.133 --> 00:33:36.634
Um, so Max has been
talking to you

00:33:36.634 --> 00:33:39.334
about the current paradigm
for the Google Prediction API.

00:33:39.334 --> 00:33:41.467
You gather a bunch of data
from your users.

00:33:41.467 --> 00:33:44.801
Um, you put them
into Google storage.

00:33:44.801 --> 00:33:46.968
Store them on the--
on the cloud.

00:33:46.968 --> 00:33:48.634
Um, you train a model,

00:33:48.634 --> 00:33:50.467
and then you make
predictions on it.

00:33:50.467 --> 00:33:52.300
And for a lot of people,
this is great.

00:33:52.300 --> 00:33:55.300
You actually have this
big batch of data up front,

00:33:55.300 --> 00:33:58.634
which you want to make
predictions on continuously.

00:33:58.634 --> 00:34:00.801
But a lot of people
have been asking,

00:34:00.801 --> 00:34:04.200
um, what happens if my data's
changing over time?

00:34:04.200 --> 00:34:06.200
I'm constantly getting
new data in.

00:34:06.200 --> 00:34:08.200
And, you know,
right now, what you have to do

00:34:08.200 --> 00:34:10.200
is actually put the--
take the new data,

00:34:10.200 --> 00:34:11.868
put it in
comma-separated value format

00:34:11.868 --> 00:34:14.234
with the old training sets,
and retrain.

00:34:14.234 --> 00:34:17.033
And then you can take, uh,
newer, fresher predictions.

00:34:17.033 --> 00:34:19.200
Um, but a lot of people

00:34:19.200 --> 00:34:21.367
get data in real time.

00:34:21.367 --> 00:34:23.534
They're running their
applications on the web,

00:34:23.534 --> 00:34:25.534
on mobile devices,

00:34:25.534 --> 00:34:28.367
and users are buying products
and clicking on links.

00:34:28.367 --> 00:34:30.367
And your application
is getting tons of data

00:34:30.367 --> 00:34:31.868
just flowing in.

00:34:31.868 --> 00:34:34.367
And what you'd really like is
a way to have a predictive model

00:34:34.367 --> 00:34:37.033
that's actually gonna respond
in real time

00:34:37.033 --> 00:34:39.033
as, uh, as your users
are changing and as--

00:34:39.033 --> 00:34:41.534
I know--as your data
is changing.

00:34:41.534 --> 00:34:43.868
And so today, we're really happy
to announce, uh,

00:34:43.868 --> 00:34:46.734
we're launching a new feature
called "Streaming Training."

00:34:46.734 --> 00:34:48.534
Um, and this is going
to allow you

00:34:48.534 --> 00:34:50.534
to add real-time data
to your predictive model.

00:34:50.534 --> 00:34:54.367
So, um, this is
a new API feature.

00:34:54.367 --> 00:34:57.367
It's implemented
as a RESTful HTTP call.

00:34:57.367 --> 00:34:59.367
And the best way to think
about this is

00:34:59.367 --> 00:35:01.601
it's an update
to your predictive model.

00:35:01.601 --> 00:35:03.434
So you're not retraining
from scratch.

00:35:03.434 --> 00:35:05.267
You're taking your current
predictive model,

00:35:05.267 --> 00:35:07.100
adding a new batch of data,

00:35:07.100 --> 00:35:10.434
and then it's gonna be,
you know, updated.

00:35:10.434 --> 00:35:12.267
So there's a few--
you can imagine,

00:35:12.267 --> 00:35:14.100
there's a few advantages
of using this.

00:35:14.100 --> 00:35:16.434
First off, it's gonna
quickly adapt to new data.

00:35:16.434 --> 00:35:19.767
So say, um, you're doing, um,

00:35:19.767 --> 00:35:21.767
categorization of hashtags

00:35:21.767 --> 00:35:23.267
of the conference,

00:35:23.267 --> 00:35:25.267
so, like App Engine or Chrome.

00:35:25.267 --> 00:35:28.267
And all of a sudden, people
are doing hashtags of a new--

00:35:28.267 --> 00:35:31.267
a new track, and you really
want to be, like, "okay,

00:35:31.267 --> 00:35:33.767
I want to be able to categorize
this very quickly, too,"

00:35:33.767 --> 00:35:35.767
and, you know,
using streaming training,

00:35:35.767 --> 00:35:38.767
you actually are able to
categorize this new information

00:35:38.767 --> 00:35:41.767
without having to manually
update your model.

00:35:41.767 --> 00:35:43.767
A second reason
you may want to use this

00:35:43.767 --> 00:35:46.267
is it'll automatically improve
performance over time.

00:35:46.267 --> 00:35:49.267
In machine learning, the more
data you have, the better.

00:35:49.267 --> 00:35:50.934
The more data there is,

00:35:50.934 --> 00:35:53.300
the better reflection
it is upon the real world.

00:35:53.300 --> 00:35:55.601
Uh, if your data's sparse,
or it's missing pieces,

00:35:55.601 --> 00:35:57.601
it won't necessarily do as well.

00:35:57.601 --> 00:35:59.601
So even if the underlying
world doesn't change,

00:35:59.601 --> 00:36:01.667
and even if there's
no new categories,

00:36:01.667 --> 00:36:03.667
and there isn't much change
in the underlying thing

00:36:03.667 --> 00:36:05.667
you're trying to track
with your predictive model,

00:36:05.667 --> 00:36:07.667
if you're just adding more data,
as it comes in,

00:36:07.667 --> 00:36:09.267
as quickly as possible,

00:36:09.267 --> 00:36:11.767
this is gonna make your model
as fresh as possible,

00:36:11.767 --> 00:36:14.534
and let you apply
the freshest predictions.

00:36:14.534 --> 00:36:17.033
Um, so this isn't really, uh,

00:36:17.033 --> 00:36:19.701
we'd like you to think about
this as an alternative way

00:36:19.701 --> 00:36:21.334
to train predictive models.

00:36:21.334 --> 00:36:23.334
We're not deprecating,
uh, training.

00:36:23.334 --> 00:36:26.367
In a lot of cases, you actually
may have a fixed amount of data

00:36:26.367 --> 00:36:28.667
up front, which you can train
and do predictions on,

00:36:28.667 --> 00:36:30.667
and that's great--
if that works for you,

00:36:30.667 --> 00:36:32.434
then we definitely recommend it.

00:36:32.434 --> 00:36:34.434
But if you have the use case,
we're actually getting

00:36:34.434 --> 00:36:37.000
a lot of data in real time,
you know, in an application,

00:36:37.000 --> 00:36:39.801
in a web app, in a mobile app,
in a desktop app, um,

00:36:39.801 --> 00:36:41.534
and it's constantly
coming to you,

00:36:41.534 --> 00:36:44.200
I would really recommend you try
using streaming training.

00:36:44.200 --> 00:36:47.200
So let's look a little bit more
how, uh, streaming training

00:36:47.200 --> 00:36:50.200
is actually implemented
in the Google prediction API.

00:36:50.200 --> 00:36:52.200
So we're calling this
"Step 4: Adapt,"

00:36:52.200 --> 00:36:54.534
and this will stream new data
to your predictive model.

00:36:54.534 --> 00:36:57.200
So this is actually implemented
as a put call in HTTP.

00:36:57.200 --> 00:36:59.734
Um, the path is similar
to what we've seen before.

00:36:59.734 --> 00:37:02.234
It's training/, uh,
the name of the model

00:37:02.234 --> 00:37:05.334
that you want to update
with the streaming training.

00:37:05.334 --> 00:37:07.334
And so there's a couple pieces
of information

00:37:07.334 --> 00:37:09.334
you have to put into the body.

00:37:09.334 --> 00:37:11.100
Uh, think of this as a piece of

00:37:11.100 --> 00:37:13.601
the common separate value format
you did at the beginning.

00:37:13.601 --> 00:37:15.601
The first piece
is the class label.

00:37:15.601 --> 00:37:18.167
For example, we're doing,
uh, you know, #youtube.

00:37:18.167 --> 00:37:21.167
This is a new piece of data
someone's posted with #youtube.

00:37:21.167 --> 00:37:23.167
This is the true label
of the data.

00:37:23.167 --> 00:37:25.167
This is what you're
trying to say,

00:37:25.167 --> 00:37:27.167
"Okay, this is what the data
should look like."

00:37:27.167 --> 00:37:29.167
In future predictions,
this is the kind of--

00:37:29.167 --> 00:37:31.167
the class label that's
associated with this.

00:37:31.167 --> 00:37:34.167
So this is really like one line
in the original training set.

00:37:34.167 --> 00:37:37.067
So you'd want to make this, uh,
this update,

00:37:37.067 --> 00:37:40.067
um, every time you get
a new piece of true data.

00:37:40.067 --> 00:37:43.067
The second piece is the common
separate value instance.

00:37:43.067 --> 00:37:45.567
This is the features
of the new piece of data.

00:37:45.567 --> 00:37:47.567
In this case,
it's a single text feature.

00:37:47.567 --> 00:37:50.067
Uh, I just saw this
wicked cool video.

00:37:50.067 --> 00:37:53.067
So somebody made a, um,
a social media post with this,

00:37:53.067 --> 00:37:55.067
with #youtube,

00:37:55.067 --> 00:37:57.067
and so since it's marked
as #youtube,

00:37:57.067 --> 00:37:59.067
we actually know
this is a real piece of data.

00:37:59.067 --> 00:38:02.133
So we're gonna use this
to update our predictive model.

00:38:02.133 --> 00:38:04.133
And when we do enough data
like this,

00:38:04.133 --> 00:38:07.133
when people start posting stuff,
you know, about YouTube,

00:38:07.133 --> 00:38:09.133
but it's not necessarily
tagged as YouTube,

00:38:09.133 --> 00:38:10.868
we'll be able to predict this--

00:38:10.868 --> 00:38:13.534
okay, this actually should be
categorized under the YouTube.

00:38:13.534 --> 00:38:16.167
And then after that, we see,
uh, the response from the HTTP.

00:38:16.167 --> 00:38:19.167
So let's look at how we can use,
uh, streaming training

00:38:19.167 --> 00:38:21.834
in our content tagger
application.

00:38:21.834 --> 00:38:24.334
So, um,
first, we're going to--

00:38:24.334 --> 00:38:26.834
so this is the "Adapt" part
of the application.

00:38:26.834 --> 00:38:28.834
Uh, as before,
you have text inputs,

00:38:28.834 --> 00:38:30.834
which we're trying
to make a prediction off,

00:38:30.834 --> 00:38:32.834
and we're gonna
have a new function there

00:38:32.834 --> 00:38:34.834
called "Learn New Hashtag."

00:38:34.834 --> 00:38:36.834
So first, let's, uh,
put a piece of text.

00:38:36.834 --> 00:38:38.834
Um, this channel's video
has a lot of hits.

00:38:38.834 --> 00:38:41.834
And so keep in mind, this is
with our old predictor model.

00:38:41.834 --> 00:38:43.834
We actually haven't
done any updating yet.

00:38:43.834 --> 00:38:45.834
This is with the predictive
model we trained,

00:38:45.834 --> 00:38:47.667
uh, just before.

00:38:47.667 --> 00:38:50.667
So let's see what we get.

00:38:50.667 --> 00:38:53.167
So, uh, we get #android.

00:38:53.167 --> 00:38:56.167
This actually has very little
to do with Android,

00:38:56.167 --> 00:38:58.167
but remember,
the only tags we have so far

00:38:58.167 --> 00:39:00.167
are Android, Chrome,
and App Engine.

00:39:00.167 --> 00:39:02.567
So this looks as much like
Android as anything else.

00:39:02.567 --> 00:39:04.567
The predictor model
really has no way

00:39:04.567 --> 00:39:06.234
of knowing this is YouTube.

00:39:06.234 --> 00:39:08.234
We never even told it
YouTube exists.

00:39:08.234 --> 00:39:10.234
So let's see how we can modify
your application

00:39:10.234 --> 00:39:12.234
to quickly adapt
to new, uh, data,

00:39:12.234 --> 00:39:15.234
and this will allow us
to get better predictions.

00:39:15.234 --> 00:39:17.734
So we have, uh, a function,
"Send Update,"

00:39:17.734 --> 00:39:19.734
which takes in a text snippet.

00:39:19.734 --> 00:39:21.400
This is gonna send, uh--

00:39:21.400 --> 00:39:24.400
we want this to send an update
to the prediction API

00:39:24.400 --> 00:39:27.734
to make an update call with
a new piece of, uh, text input.

00:39:27.734 --> 00:39:29.400
And so, um,

00:39:29.400 --> 00:39:32.400
we're gonna use
the JavaScript library,

00:39:32.400 --> 00:39:34.400
uh, and the function call

00:39:34.400 --> 00:39:36.901
is called, uh,
prediction.training.update.

00:39:36.901 --> 00:39:39.400
And so let's look at this
a little bit more closely.

00:39:39.400 --> 00:39:41.400
You'll notice this
resembles a lot like

00:39:41.400 --> 00:39:43.234
the underlying HTTP request,

00:39:43.234 --> 00:39:45.234
um, and in any
client library you use,

00:39:45.234 --> 00:39:47.234
it's gonna look
something like this.

00:39:47.234 --> 00:39:49.734
This is the JavaScript library,
but as Max mentioned,

00:39:49.734 --> 00:39:52.734
we have a lot of client
libraries already available.

00:39:52.734 --> 00:39:55.734
Um, so the first piece is
the, uh, the name of the data,

00:39:55.734 --> 00:39:58.734
uh, the predictive model
that you want to update.

00:39:58.734 --> 00:40:00.734
So we're still using
the same model

00:40:00.734 --> 00:40:03.234
that I just trained before,
io11/my_data.

00:40:03.234 --> 00:40:05.400
Then the next piece,
the class label--

00:40:05.400 --> 00:40:08.400
this is where we're seeing
the true label is,

00:40:08.400 --> 00:40:11.400
um,, so we're gonna grab that
from the topic field.

00:40:11.400 --> 00:40:14.400
This is the piece
on the, uh, HTML form

00:40:14.400 --> 00:40:16.400
we're gonna fill in ourselves.

00:40:16.400 --> 00:40:18.901
And finally, the common
separate value of instance,

00:40:18.901 --> 00:40:20.901
and we're just putting in
that text snippet,

00:40:20.901 --> 00:40:22.901
which is the input
to the function.

00:40:22.901 --> 00:40:25.901
And finally, we--we execute
an update callback.

00:40:25.901 --> 00:40:28.934
So, uh, let's save.
We're modifying our application.

00:40:28.934 --> 00:40:31.934
Um, and let's go back
to the content tagger demo

00:40:31.934 --> 00:40:33.934
and, uh, see what happens.

00:40:33.934 --> 00:40:35.934
So we want to learn
a new hashtag

00:40:35.934 --> 00:40:37.934
based on a whole
bunch of new data,

00:40:37.934 --> 00:40:40.434
so we've actually, uh, written
a whole bunch of comments

00:40:40.434 --> 00:40:42.434
that look like YouTube comments.

00:40:42.434 --> 00:40:44.434
Uh, we're gonna put #youtube,

00:40:44.434 --> 00:40:46.434
and then update.

00:40:46.434 --> 00:40:49.434
So we're gonna quickly skim
through the comments.

00:40:49.434 --> 00:40:51.434
This is--we're just putting
a whole bunch of data

00:40:51.434 --> 00:40:53.033
into the system.

00:40:53.033 --> 00:40:55.000
So for us, it was
a little bit trickier--

00:40:55.000 --> 00:40:58.000
we actually wanted to put
it all up in ahead of time,

00:40:58.000 --> 00:41:00.000
but--and so we actually
did a little bit of work

00:41:00.000 --> 00:41:03.067
to actually list through them
and do an update for each one.

00:41:03.067 --> 00:41:05.067
For your application,
it's actually much simpler.

00:41:05.067 --> 00:41:06.868
As soon as the data is created,

00:41:06.868 --> 00:41:09.701
as soon as the user's clicked
on the link or bought the item,

00:41:09.701 --> 00:41:11.701
you say, "Okay,
this is a real prediction,"

00:41:11.701 --> 00:41:13.701
and you can just
put that together,

00:41:13.701 --> 00:41:15.701
put the--you know,
put it into a JSON,

00:41:15.701 --> 00:41:18.200
and call your client library,
and away it'll go.

00:41:18.200 --> 00:41:21.200
Um, so we've updated our--
our, uh, predictive model

00:41:21.200 --> 00:41:23.200
using this new hashtag,

00:41:23.200 --> 00:41:25.868
so let's try the same, um,
string again.

00:41:25.868 --> 00:41:28.868
Uh, this channel's video
has a lot of hits.

00:41:28.868 --> 00:41:31.868
So we're going to, uh,
run prediction,

00:41:31.868 --> 00:41:35.000
and before, we got #android.

00:41:37.534 --> 00:41:40.534
Um, did you update?

00:41:40.534 --> 00:41:43.534
Oh, you have to refresh
the page, I think.

00:41:43.534 --> 00:41:46.534
So, uh, we didn't actually
refresh the page,

00:41:46.534 --> 00:41:49.534
um, and so notice,
he actually live-coded this,

00:41:49.534 --> 00:41:52.534
so we're gonna try this again.

00:41:52.534 --> 00:41:55.033
Okay, so as I said,
we've done an update,

00:41:55.033 --> 00:41:57.868
so we've gone through all
these pieces of new text,

00:41:57.868 --> 00:42:00.400
and, um, now that all the text
has been--

00:42:00.400 --> 00:42:03.434
so each piece gets sent
to the prediction API,

00:42:03.434 --> 00:42:05.434
and we say,
"This is a new instance,"

00:42:05.434 --> 00:42:07.434
and we're really updating
our predictive model.

00:42:07.434 --> 00:42:10.434
So let's try again
on the text string.

00:42:10.434 --> 00:42:12.434
Great.

00:42:12.434 --> 00:42:14.434
So we've, uh, got--

00:42:14.434 --> 00:42:16.434
[applause]

00:42:16.434 --> 00:42:18.934
Kaplow: So we've predicted,
uh, the new hashtag, #youtube.

00:42:18.934 --> 00:42:21.434
Remember, the predictive model,
before we did this update,

00:42:21.434 --> 00:42:23.267
didn't even know
what YouTube was,

00:42:23.267 --> 00:42:25.267
so we can actually
add new class labels

00:42:25.267 --> 00:42:27.033
as you're updating your model.

00:42:27.033 --> 00:42:29.534
And that's not the only reason
you would want to do this.

00:42:29.534 --> 00:42:32.033
Even if there's no new
class labels, as I've mentioned,

00:42:32.033 --> 00:42:34.067
um, you can just keep
on putting more data,

00:42:34.067 --> 00:42:36.033
and the model's just gonna
learn more and more

00:42:36.033 --> 00:42:38.033
about the world,
and it's just gonna improve.

00:42:38.033 --> 00:42:40.033
It'll, you know,
work better for more users.

00:42:40.033 --> 00:42:42.033
It's just gonna get
better over time.

00:42:42.033 --> 00:42:44.033
Um, so you can see how
you can use this

00:42:44.033 --> 00:42:45.701
to improve your application.

00:42:45.701 --> 00:42:47.701
I just want to give
a couple of comments

00:42:47.701 --> 00:42:49.501
on how you may want to use, uh,

00:42:49.501 --> 00:42:51.501
streaming training
in your application.

00:42:51.501 --> 00:42:53.934
Uh, first of all, um,
when you're adding new data,

00:42:53.934 --> 00:42:56.200
you really should add
all the data that, um,

00:42:56.200 --> 00:42:57.868
represents the world,

00:42:57.868 --> 00:43:00.200
so you shouldn't actually
just be putting one piece

00:43:00.200 --> 00:43:02.434
in your data, like, one
new class label, or whatever.

00:43:02.434 --> 00:43:04.434
You really want to be throwing
all the data,

00:43:04.434 --> 00:43:06.467
as much as possible, um,
together, so don't just say,

00:43:06.467 --> 00:43:08.434
"I want to learn this
new type of information,"

00:43:08.434 --> 00:43:10.434
because that could
really bias the model.

00:43:10.434 --> 00:43:12.100
The models' gonna
start thinking,

00:43:12.100 --> 00:43:14.100
oh, okay, this is what
it looks like now.

00:43:14.100 --> 00:43:16.434
So you really want to have
as good of representation

00:43:16.434 --> 00:43:18.767
as possible, and that actually
makes your life easier,

00:43:18.767 --> 00:43:20.767
'cause you really just
want to naively just send--

00:43:20.767 --> 00:43:22.634
you know, put the information
in there.

00:43:22.634 --> 00:43:24.467
And a second, uh,
bit of information

00:43:24.467 --> 00:43:26.467
about when you're using
streaming training is, um,

00:43:26.467 --> 00:43:28.133
the predictive model
isn't only--

00:43:28.133 --> 00:43:30.801
isn't going to work with a very,
very small amount of data.

00:43:30.801 --> 00:43:33.300
Especially, the larger
your model is, um,

00:43:33.300 --> 00:43:36.300
you need more and more
information for it to learn.

00:43:36.300 --> 00:43:38.801
So don't just, you know,
send a couple instances,

00:43:38.801 --> 00:43:41.200
and expect it's gonna work,
you know, magically,

00:43:41.200 --> 00:43:43.200
you know, over, across
all YouTube comments.

00:43:43.200 --> 00:43:45.200
If you want it to recognize
YouTube really well,

00:43:45.200 --> 00:43:47.200
you have to give
a lot of comments.

00:43:47.200 --> 00:43:49.200
So really give as much
comments as you can--

00:43:49.200 --> 00:43:51.567
or, as much input as you can
across all the type--

00:43:51.567 --> 00:43:53.234
different types of data,

00:43:53.234 --> 00:43:55.734
and, uh, streaming training's
gonna work much better.

00:43:55.734 --> 00:43:58.400
Uh, and with that,
I'm gonna turn it over to Max,

00:43:58.400 --> 00:44:01.067
who's gonna talk about another
really exciting new feature,

00:44:01.067 --> 00:44:03.467
um, we're talking about today.
Thanks a lot.

00:44:03.467 --> 00:44:06.400
[applause]

00:44:08.901 --> 00:44:10.901
Lin: So I hope that
you are all excited

00:44:10.901 --> 00:44:13.434
about this new feature
we just announced,

00:44:13.434 --> 00:44:15.000
the streaming training.

00:44:15.000 --> 00:44:17.000
It makes your life much easier

00:44:17.000 --> 00:44:20.000
to adapt whatever the users--

00:44:20.000 --> 00:44:22.000
a user can change,
data can change,

00:44:22.000 --> 00:44:25.000
but this really make it easier
to incorporate predictions

00:44:25.000 --> 00:44:27.000
and make your app smarter.

00:44:27.000 --> 00:44:28.968
Uh, before I tell you
another new feature,

00:44:28.968 --> 00:44:31.968
I want to get,
have a quick of hands, like,

00:44:31.968 --> 00:44:34.968
how many of you are already
in our Beta group,

00:44:34.968 --> 00:44:37.968
and have used Prediction API?

00:44:37.968 --> 00:44:39.968
Okay, some of you.

00:44:39.968 --> 00:44:41.968
Um, I'd like to take this chance

00:44:41.968 --> 00:44:44.534
and really thank you
for using Prediction API.

00:44:44.534 --> 00:44:47.534
Beta users, we get a lot
of good feedback from you guys,

00:44:47.534 --> 00:44:49.534
and--and we--

00:44:49.534 --> 00:44:51.534
one of the feedback is, uh,

00:44:51.534 --> 00:44:54.534
they want to make apps smarter,

00:44:54.534 --> 00:44:56.534
and also faster.

00:44:56.534 --> 00:44:58.534
So Prediction API
is easy to use,

00:44:58.534 --> 00:45:01.601
just simple three steps.
It sounds easy.

00:45:01.601 --> 00:45:03.601
But say I'm a--I'm a--

00:45:03.601 --> 00:45:06.267
I'm an ice cream
e-commerce web site.

00:45:06.267 --> 00:45:09.267
I know how to sell
ice cream sandwiches.

00:45:09.267 --> 00:45:11.267
I know people--
when they buy vanilla,

00:45:11.267 --> 00:45:12.934
they also like chocolate.

00:45:12.934 --> 00:45:14.901
I can learn this,
use Prediction API.

00:45:14.901 --> 00:45:16.901
But I know nothing
about sentiment.

00:45:16.901 --> 00:45:18.901
Uh, but what if I want--

00:45:18.901 --> 00:45:21.901
when people talk about my
ice cream sandwich web site,

00:45:21.901 --> 00:45:23.901
I want to know,
are they excited or not,

00:45:23.901 --> 00:45:25.901
are they happy or not?

00:45:25.901 --> 00:45:28.901
So how can I incorporate
this in our e-commerce web site,

00:45:28.901 --> 00:45:31.901
or my social media monitoring?

00:45:31.901 --> 00:45:34.901
So today, we are very happy

00:45:34.901 --> 00:45:37.901
to announce a new feature
in Prediction API

00:45:37.901 --> 00:45:40.567
called
Hosted Model Subscriptions.

00:45:40.567 --> 00:45:42.567
And the idea is that

00:45:42.567 --> 00:45:44.567
at Google Prediction API,

00:45:44.567 --> 00:45:47.567
we are going to host
a bunch of different models,

00:45:47.567 --> 00:45:49.567
and those models--

00:45:49.567 --> 00:45:52.567
those predictive models
are pretrained,

00:45:52.567 --> 00:45:55.567
and you just subscribe to them,
and you can use.

00:45:55.567 --> 00:45:58.567
So that's why the name
is "Hosted Models,"

00:45:58.567 --> 00:46:00.567
and you subscribe
to the hosted models.

00:46:00.567 --> 00:46:03.634
So what that means to you--
so let's go back

00:46:03.634 --> 00:46:06.133
to the ice cream sandwich
e-commerce web site.

00:46:06.133 --> 00:46:08.133
So you don't have expertise,

00:46:08.133 --> 00:46:11.133
you don't know how to do
sentiment analysis--that's fine.

00:46:11.133 --> 00:46:14.133
But there are a lot of people
who are experts

00:46:14.133 --> 00:46:17.133
in analyze piece of text,
they already collect the data,

00:46:17.133 --> 00:46:20.133
so why can't you just
stand on their shoulders

00:46:20.133 --> 00:46:22.133
and leverage their efforts?

00:46:22.133 --> 00:46:25.934
So if there is a hosted model

00:46:25.934 --> 00:46:27.534
about sentiment analysis

00:46:27.534 --> 00:46:30.167
you can right now subscribe to,

00:46:30.167 --> 00:46:32.167
it's much, much easier for you.

00:46:32.167 --> 00:46:35.133
Right now, you can just
add that functionality

00:46:35.133 --> 00:46:37.567
in your web apps
or Android apps,

00:46:37.567 --> 00:46:40.601
and make your apps--
can do sentiment analysis.

00:46:40.601 --> 00:46:43.601
So that's--we really want
to offer this feature

00:46:43.601 --> 00:46:47.000
to make your apps smarter
and faster just right now.

00:46:47.000 --> 00:46:48.601
So the--

00:46:48.601 --> 00:46:51.601
so there are several, uh,
the reason we wanted to do this.

00:46:51.601 --> 00:46:54.601
So first, we want to build this
Hosted Model subscription,

00:46:54.601 --> 00:46:58.601
uh, it's mostly of developers.

00:46:58.601 --> 00:47:00.634
It's--today, we are going
to give you

00:47:00.634 --> 00:47:03.667
some examples of hosted models,

00:47:03.667 --> 00:47:05.667
but really, we want to hope

00:47:05.667 --> 00:47:08.667
this is a marketplace
for developers.

00:47:08.667 --> 00:47:10.667
Uh, that's--the model's--

00:47:10.667 --> 00:47:13.167
the hosted model should provide

00:47:13.167 --> 00:47:15.334
and develop by the developers.

00:47:15.334 --> 00:47:18.334
And also, what we really want
these hosted models--

00:47:18.334 --> 00:47:21.334
um, it's driven by
the developers' needs.

00:47:21.334 --> 00:47:23.334
So if you--

00:47:23.334 --> 00:47:25.901
if you develop some apps,

00:47:25.901 --> 00:47:28.667
and you're really looking
for some hosted models,

00:47:28.667 --> 00:47:31.000
some pretrained model
for your needs,

00:47:31.000 --> 00:47:32.667
say, for example,

00:47:32.667 --> 00:47:35.667
I really want a good spam
detector that can filter out

00:47:35.667 --> 00:47:38.667
all the inappropriate content
on my forum,

00:47:38.667 --> 00:47:41.667
so I really want a detector
that can do that.

00:47:41.667 --> 00:47:43.334
So really want--

00:47:43.334 --> 00:47:45.834
if you have those needs,
would you let us know--

00:47:45.834 --> 00:47:48.834
there's a sign-off form
on our document web site,

00:47:48.834 --> 00:47:51.834
and you can tell us, "I really
want this hosting model."

00:47:51.834 --> 00:47:53.667
On the other hand,

00:47:53.667 --> 00:47:56.167
if you have a hosted model
you developed for yourself,

00:47:56.167 --> 00:47:59.167
say, you already
have a very good, uh,

00:47:59.167 --> 00:48:02.234
spam detectors, working very
well for yourself, and you--

00:48:02.234 --> 00:48:04.734
now this is a chance for you

00:48:04.734 --> 00:48:07.434
to share with other developers,

00:48:07.434 --> 00:48:10.400
and you can also monetize
on these hosting models,

00:48:10.400 --> 00:48:13.400
on the models you develop
using Prediction API.

00:48:13.400 --> 00:48:15.400
So as you can see, there's a--

00:48:15.400 --> 00:48:18.400
this should be a marketplace
for people looking for models

00:48:18.400 --> 00:48:20.901
and for people to want
to sell their models.

00:48:20.901 --> 00:48:22.567
And the third point is,

00:48:22.567 --> 00:48:24.567
the whole reason
we want to do this

00:48:24.567 --> 00:48:26.400
is for the developers.

00:48:26.400 --> 00:48:29.400
We really want to--
want to make your apps smarter,

00:48:29.400 --> 00:48:31.901
but we also want
to make it very easy.

00:48:31.901 --> 00:48:34.567
Right now, you don't have
to collect training data.

00:48:34.567 --> 00:48:36.901
You can stand
on other people's shoulder.

00:48:36.901 --> 00:48:38.901
They already do
the heavy liftings,

00:48:38.901 --> 00:48:40.901
why can't you just
stand on their shoulders

00:48:40.901 --> 00:48:42.534
and use hosting models?

00:48:42.534 --> 00:48:44.534
and you can start to use, um,

00:48:44.534 --> 00:48:47.534
you can make a prediction
right now in your apps.

00:48:47.534 --> 00:48:49.534
So I'm going to show you, uh--

00:48:49.534 --> 00:48:52.067
let's go back to
our web app examples.

00:48:52.067 --> 00:48:54.067
Uh--oh, before I do that,

00:48:54.067 --> 00:48:56.067
I forgot to tell you the syntax.

00:48:56.067 --> 00:48:59.067
Uh, the syntax, again,
is very simple HTTP call,

00:48:59.067 --> 00:49:01.534
and the syntax similar
to the prediction call

00:49:01.534 --> 00:49:03.534
we just introduced before.

00:49:03.534 --> 00:49:05.534
Uh, the only difference that--

00:49:05.534 --> 00:49:07.534
uh, instead of saying training,

00:49:07.534 --> 00:49:10.534
here, the syntax
is prediction/v1.2.

00:49:10.534 --> 00:49:13.567
That's the version number,
and /hostedmodels,

00:49:13.567 --> 00:49:16.033
so instead of saying training,

00:49:16.033 --> 00:49:19.033
you specify, hey,
I want to make a prediction

00:49:19.033 --> 00:49:22.033
against a particular
hosted model,

00:49:22.033 --> 00:49:25.033
and you just append the
hosted model name after that,

00:49:25.033 --> 00:49:27.033
and at the end,
you append predict.

00:49:27.033 --> 00:49:29.033
That means you want
to make a prediction

00:49:29.033 --> 00:49:31.033
against a particular
hosted model.

00:49:31.033 --> 00:49:33.534
Inside the body,
it's just the same as before.

00:49:33.534 --> 00:49:35.534
When you make a prediction,

00:49:35.534 --> 00:49:37.534
you just pass, uh,
a new data point,

00:49:37.534 --> 00:49:39.200
a new piece of text,

00:49:39.200 --> 00:49:41.701
and you send over
to Prediction API,

00:49:41.701 --> 00:49:44.701
and Prediction API
will take your input,

00:49:44.701 --> 00:49:47.701
uh, look up the hosted models
you specify,

00:49:47.701 --> 00:49:49.701
and give you a response.

00:49:49.701 --> 00:49:51.701
So you--as you can see,

00:49:51.701 --> 00:49:55.400
there's no training
and, uh, collection data phase.

00:49:55.400 --> 00:49:57.801
You can just right now
make a prediction

00:49:57.801 --> 00:49:59.701
against a hosting model.

00:49:59.701 --> 00:50:01.701
So I'm going to show you, uh,

00:50:01.701 --> 00:50:03.701
how we can incorporate
hosted model

00:50:03.701 --> 00:50:05.701
in our web app demo.

00:50:05.701 --> 00:50:08.701
So remember, we collect a bunch
of data on a social media

00:50:08.701 --> 00:50:10.701
and try to detect when people

00:50:10.701 --> 00:50:13.200
talk about App Engine,
Android, or Chrome,

00:50:13.200 --> 00:50:15.200
but I know nothing
about sentiment.

00:50:15.200 --> 00:50:18.200
I really want to know when
people talk about App Engine,

00:50:18.200 --> 00:50:19.868
or Chrome,

00:50:19.868 --> 00:50:22.868
uh, are they excited,
uh, or not?

00:50:22.868 --> 00:50:25.868
So I really want to, uh,
do a sentiment analysis.

00:50:25.868 --> 00:50:27.534
So when I--

00:50:27.534 --> 00:50:30.033
uh, as you can see
in the middle of the box,

00:50:30.033 --> 00:50:32.033
uh, I--when I type
something there,

00:50:32.033 --> 00:50:35.033
I really want to send
to Prediction API.

00:50:35.033 --> 00:50:38.033
Uh, first, I want to know
what category, uh,

00:50:38.033 --> 00:50:40.033
this piece of text is about,

00:50:40.033 --> 00:50:42.033
but I also want to know,

00:50:42.033 --> 00:50:45.033
is this piece of text
expressing any positive

00:50:45.033 --> 00:50:47.033
or negative sentiment?

00:50:47.033 --> 00:50:49.033
So how can we do that?

00:50:49.033 --> 00:50:51.033
Let's, uh, go back
to our JavaScript,

00:50:51.033 --> 00:50:53.501
uh, examples.

00:50:53.501 --> 00:50:56.000
Uh, again, I want to emphasize,

00:50:56.000 --> 00:50:59.000
this is not just--not just
working for JavaScripts.

00:50:59.000 --> 00:51:01.067
We have Java, Python, Ruby,

00:51:01.067 --> 00:51:03.067
and various libraries
for you to use.

00:51:03.067 --> 00:51:05.067
Um, so here, uh,

00:51:05.067 --> 00:51:07.067
again, it's a very simple,

00:51:07.067 --> 00:51:10.067
one function call
you have to make.

00:51:10.067 --> 00:51:13.067
Uh, it looks like four lines,
but it's just one function call,

00:51:13.067 --> 00:51:15.067
and the name
of the function call

00:51:15.067 --> 00:51:18.067
is called
prediction.hostedmodels.predict.

00:51:18.067 --> 00:51:20.067
So inside this function call,

00:51:20.067 --> 00:51:22.067
you just pass two arguments.

00:51:22.067 --> 00:51:24.067
First, obviously,

00:51:24.067 --> 00:51:26.067
is the name of the hosted model

00:51:26.067 --> 00:51:28.567
you want to make
a prediction against,

00:51:28.567 --> 00:51:31.067
so here, we want to do
a sentiment analysis,

00:51:31.067 --> 00:51:33.567
and today, we provide
a simple example

00:51:33.567 --> 00:51:35.934
called simple.sentiment.

00:51:35.934 --> 00:51:38.434
So the name--
this simple.sentiment

00:51:38.434 --> 00:51:40.100
is a hosted model,

00:51:40.100 --> 00:51:43.100
hosted right now at
Prediction API for you to use.

00:51:43.100 --> 00:51:45.100
You don't have to collect data,

00:51:45.100 --> 00:51:48.100
you can right now make
a prediction against it.

00:51:48.100 --> 00:51:50.100
And the second piece of argument

00:51:50.100 --> 00:51:52.601
is the input field
in the JSON format,

00:51:52.601 --> 00:51:54.601
and that's basically the input

00:51:54.601 --> 00:51:56.601
you want to send
to Prediction API,

00:51:56.601 --> 00:51:59.601
a piece of text you want
to detect a sentiment.

00:51:59.601 --> 00:52:02.667
So again, inside this predict
function, JavaScript function,

00:52:02.667 --> 00:52:04.667
you see we make two calls--

00:52:04.667 --> 00:52:06.667
one is the one we make

00:52:06.667 --> 00:52:09.167
against our own
historical data,

00:52:09.167 --> 00:52:12.167
the second one
is the prediction call,

00:52:12.167 --> 00:52:15.167
but it's against
a particular hosted model,

00:52:15.167 --> 00:52:16.834
um,

00:52:16.834 --> 00:52:19.167
and we want to get a sentiment.

00:52:19.167 --> 00:52:22.167
And, uh, save it, and, uh,
go back to our web app

00:52:22.167 --> 00:52:25.167
and reload,
and see how it works.

00:52:25.167 --> 00:52:27.167
So this is the "Subscribe" phase

00:52:27.167 --> 00:52:29.667
of our web, uh, demo,

00:52:29.667 --> 00:52:32.667
so we are going to type a piece
of text inside this box.

00:52:32.667 --> 00:52:35.334
Say, uh, "I gave my mom

00:52:35.334 --> 00:52:38.334
a new Nexus S phone,

00:52:38.334 --> 00:52:40.868
and she really liked it."

00:52:45.501 --> 00:52:48.767
And let's press the "Predict."

00:52:51.033 --> 00:52:53.033
And it works.

00:52:53.033 --> 00:52:55.033
So on the right
of the "Predict" button,

00:52:55.033 --> 00:52:57.033
first, you see there
is an Android,

00:52:57.033 --> 00:53:00.033
and that's come from
our own historical data

00:53:00.033 --> 00:53:02.100
we collect ourself,

00:53:02.100 --> 00:53:05.100
and you also see another
response from Prediction API.

00:53:05.100 --> 00:53:08.100
It's positive,
and that's the response--

00:53:08.100 --> 00:53:11.100
the category return
by Prediction API

00:53:11.100 --> 00:53:14.100
against the hosted models

00:53:14.100 --> 00:53:16.100
that we don't have
to collect data,

00:53:16.100 --> 00:53:19.100
but we can, right now,
very easily incorporate this

00:53:19.100 --> 00:53:21.501
in our web app
with just one function call.

00:53:21.501 --> 00:53:24.601
You don't have to collect data,
and you can use right away.

00:53:24.601 --> 00:53:26.601
Um, let's just try
something else.

00:53:26.601 --> 00:53:28.601
Um, um, say,

00:53:28.601 --> 00:53:31.601
"I really don't like
this music video."

00:53:31.601 --> 00:53:34.100
So suppose you get
this piece of text

00:53:34.100 --> 00:53:35.767
from social media,

00:53:35.767 --> 00:53:38.434
and you want to know,
what is this about,

00:53:38.434 --> 00:53:41.434
and are people excited or not?

00:53:41.434 --> 00:53:44.434
And it works, again.

00:53:44.434 --> 00:53:47.434
Um, so the tag you see here
is YouTube,

00:53:47.434 --> 00:53:50.434
and remember, the reason
we can get YouTube

00:53:50.434 --> 00:53:52.434
is because Robert
just showed you,

00:53:52.434 --> 00:53:54.434
we adapt to
the new piece of data.

00:53:54.434 --> 00:53:56.434
Before, we know
nothing about Android

00:53:56.434 --> 00:53:58.434
in the beginning
of this demo.

00:53:58.434 --> 00:54:01.501
Now we learn this is about--
probably related to YouTube.

00:54:01.501 --> 00:54:04.000
And we also get a response
from hosted models,

00:54:04.000 --> 00:54:05.667
and this is negative,

00:54:05.667 --> 00:54:08.167
somehow expressing
a negative sentiment

00:54:08.167 --> 00:54:11.934
uh, and the hosted model
detect this in a hosted model.

00:54:11.934 --> 00:54:13.501
Um,

00:54:13.501 --> 00:54:16.501
so I hope by this point, uh,
you all feel very excited,

00:54:16.501 --> 00:54:18.167
and start to think,

00:54:18.167 --> 00:54:21.167
how I can incorporate
hosted models--in your apps.

00:54:21.167 --> 00:54:24.501
If there's any hosting models
you really want,

00:54:24.501 --> 00:54:26.167
please let us know.

00:54:26.167 --> 00:54:29.167
If you have hosted models
you really want to share

00:54:29.167 --> 00:54:32.167
with other developers,
please also let us know.

00:54:32.167 --> 00:54:35.667
With that, I'm gonna
hand back to, uh, Travis.

00:54:37.734 --> 00:54:41.567
[applause]

00:54:41.567 --> 00:54:44.367
Green: So some of you may
actually have models

00:54:44.367 --> 00:54:46.667
that are built outside
of the prediction API,

00:54:46.667 --> 00:54:49.334
and we have one final thing
that we want to announce,

00:54:49.334 --> 00:54:51.334
which is that we're also
starting to support

00:54:51.334 --> 00:54:52.968
an open standard,

00:54:52.968 --> 00:54:55.467
called the Predictive Model
Markup Language,

00:54:55.467 --> 00:54:58.467
which enables you to import
predictive models from elsewhere

00:54:58.467 --> 00:55:00.467
and then bring them
into the API,

00:55:00.467 --> 00:55:03.033
either to share with others,
or for your own use.

00:55:03.033 --> 00:55:05.033
So you can see onscreen
how all this works.

00:55:05.033 --> 00:55:07.033
You bring in your model, uh,
via the PMML mark--

00:55:07.033 --> 00:55:09.033
PMML syntax,

00:55:09.033 --> 00:55:12.167
and then we will make it
available to you.

00:55:12.167 --> 00:55:15.167
So that's the end
of our announcements,

00:55:15.167 --> 00:55:17.667
but I just want to get
you guys thinking about

00:55:17.667 --> 00:55:19.667
some other ways
you can use this system.

00:55:19.667 --> 00:55:22.667
So I know we talked you through
a sentiment analysis example.

00:55:22.667 --> 00:55:24.334
Um, you can also imagine,

00:55:24.334 --> 00:55:26.334
as we've also
been talking about,

00:55:26.334 --> 00:55:29.000
having an e-commerce site,
and as people buy things,

00:55:29.000 --> 00:55:31.501
building a large
recommendation engine

00:55:31.501 --> 00:55:34.501
to show them other things
they might be interested in.

00:55:34.501 --> 00:55:37.501
You can also imagine filtering
inappropriate content,

00:55:37.501 --> 00:55:40.000
sexual content,
other sorts of, um,

00:55:40.000 --> 00:55:42.000
things that you don't
want on your site.

00:55:42.000 --> 00:55:44.501
Whether users are gonna stay
with your site or leave it--

00:55:44.501 --> 00:55:46.000
churn prediction.

00:55:46.000 --> 00:55:48.801
Uh, the examples go on and on,
so you can see 15 here,

00:55:48.801 --> 00:55:50.801
but there are many,
many, many more.

00:55:50.801 --> 00:55:52.801
Um, and I also just
want to close

00:55:52.801 --> 00:55:54.834
by telling you
what we've told you,

00:55:54.834 --> 00:55:57.801
which is that we've made it
so anyone can access the API.

00:55:57.801 --> 00:56:00.801
We've shown you how you can make
even fresher models

00:56:00.801 --> 00:56:03.367
through the streaming updates
that Rob showed you.

00:56:03.367 --> 00:56:05.367
We've shown you that
you can just drop in

00:56:05.367 --> 00:56:08.367
really expert predictive models
using our forthcoming gallery,

00:56:08.367 --> 00:56:10.868
and you can try
all these things today.

00:56:10.868 --> 00:56:13.033
So we look forward to both
your questions,

00:56:13.033 --> 00:56:15.534
and to seeing the applications
you build with the API.

00:56:15.534 --> 00:56:18.534
Thank you all so much.
We have--thank you.

00:56:18.534 --> 00:56:21.534
[applause]

00:56:21.534 --> 00:56:24.200
Green: We have microphones
on both sides of the room.

00:56:24.200 --> 00:56:26.601
Uh, please speak into them
to ask a question,

00:56:26.601 --> 00:56:28.934
so that the people
on the video can hear you,

00:56:28.934 --> 00:56:30.934
and everyone across the room
can hear you.

00:56:30.934 --> 00:56:32.634
Um, I'll take one
from there first,

00:56:32.634 --> 00:56:34.467
'cause you were
the first one up.

00:56:34.467 --> 00:56:36.467
man: Okay, um, this is awesome.
Green: Great.

00:56:36.467 --> 00:56:38.968
man: I was there at the talk,
you know, last year,

00:56:38.968 --> 00:56:41.467
and I was trying
to figure out how to do it.

00:56:41.467 --> 00:56:43.467
A couple of questions--
Green: Sure.

00:56:43.467 --> 00:56:45.067
man: One is that, do you have--

00:56:45.067 --> 00:56:46.968
uh, can you,
or have you used this

00:56:46.968 --> 00:56:49.968
for ADT extraction--
for example, if I take--

00:56:49.968 --> 00:56:52.467
let me give you an example.
Green: Mm-hmm.

00:56:52.467 --> 00:56:55.467
man: If I go into,
um, TechCrunch,

00:56:55.467 --> 00:56:57.467
I feed all the--
take analysis feed,

00:56:57.467 --> 00:56:59.467
feed all the articles--
that's my learning data...

00:56:59.467 --> 00:57:00.467
Green: Mm-hmm.

00:57:00.467 --> 00:57:02.534
man: Then I take
the crunch base,

00:57:02.534 --> 00:57:05.033
and take all the list of
companies that are represented

00:57:05.033 --> 00:57:07.033
and products that are there,
and then that is my--

00:57:07.033 --> 00:57:09.033
you know,
the identification

00:57:09.033 --> 00:57:11.033
of what this learning data
is about.

00:57:11.033 --> 00:57:13.033
Now I throw in a new article...
Green: Mm-hmm.

00:57:13.033 --> 00:57:15.534
man: Let's say from
"New York Times,"

00:57:15.534 --> 00:57:18.534
or from "Ink" magazine,
or something like that,

00:57:18.534 --> 00:57:20.534
can it come back and give me
a list of companies

00:57:20.534 --> 00:57:22.534
from this article?
[speaking indistinctly]

00:57:22.534 --> 00:57:24.300
Green: So--yeah, sorry.

00:57:24.300 --> 00:57:26.701
Yeah, so the way you would
structure that sort of problem

00:57:26.701 --> 00:57:28.701
would be you would take
the TechCrunch text,

00:57:28.701 --> 00:57:31.601
and have the output,
the prediction you're making,

00:57:31.601 --> 00:57:34.300
in the training set
be the actual companies

00:57:34.300 --> 00:57:35.934
contained within that article.

00:57:35.934 --> 00:57:37.934
We can talk more about
how exactly that goes through,

00:57:37.934 --> 00:57:39.934
but that's conceptually
how it would work.

00:57:39.934 --> 00:57:42.434
man: Okay, and similar things
can be done for products...

00:57:42.434 --> 00:57:44.000
Green: Yes, yes.

00:57:44.000 --> 00:57:46.000
man: And technologies and events
and stuff like that.

00:57:46.000 --> 00:57:48.000
Green: Yeah, we'll be here
all at the end,

00:57:48.000 --> 00:57:50.000
and I'm happy to talk you
through that all in detail,

00:57:50.000 --> 00:57:52.000
if you don't mind.
man: That's great.

00:57:52.000 --> 00:57:53.601
Green: Great, awesome.

00:57:53.601 --> 00:57:55.601
man: So this changes search
quite a bit, right, you know,

00:57:55.601 --> 00:57:57.601
there is the interesting
implications on search for this.

00:57:57.601 --> 00:57:59.100
Green: It changes
a lot of things,

00:57:59.100 --> 00:58:01.167
so we look forward to seeing
what you guys can build.

00:58:01.167 --> 00:58:02.667
I'll take the question
here next,

00:58:02.667 --> 00:58:04.434
and bounce back and forth
from there.

00:58:04.434 --> 00:58:06.434
man: So, uh, will there be,
like, complex data types,

00:58:06.434 --> 00:58:08.434
or, like, video
or sound or music?

00:58:08.434 --> 00:58:10.434
Green: [laughs]
You guys want so much.

00:58:10.434 --> 00:58:12.434
[laughs]
Um, we're working on it.

00:58:12.434 --> 00:58:15.000
Um, it would be great to hear
how exactly you want to use it,

00:58:15.000 --> 00:58:17.000
so that we know which ones
to prioritize first,

00:58:17.000 --> 00:58:18.801
um, yeah, so let's
talk at the end,

00:58:18.801 --> 00:58:21.067
and we can talk through how
exactly you want to use it,

00:58:21.067 --> 00:58:22.934
if you don't mind.
man: Okay, thanks.

00:58:22.934 --> 00:58:24.501
Green: Great, thanks.
Over there.

00:58:24.501 --> 00:58:27.000
man: Uh, yes, is there, like,
a feedback mechanism,

00:58:27.000 --> 00:58:30.334
so you show, like,
a list of, uh, results--

00:58:30.334 --> 00:58:32.334
well, actually don't show
a list of results--

00:58:32.334 --> 00:58:35.334
but you show if it's positive,
negative, or you show a tag--

00:58:35.334 --> 00:58:37.334
what if the user
feels it's wrong?

00:58:37.334 --> 00:58:38.501
Green: Yes.

00:58:38.501 --> 00:58:40.501
man: Does it go back
to the system?

00:58:40.501 --> 00:58:42.501
Green: So a few things--
we actually do show

00:58:42.501 --> 00:58:44.501
a distribution across
all possible categories,

00:58:44.501 --> 00:58:46.667
so we didn't show that here,
because, uh,

00:58:46.667 --> 00:58:49.000
you actually have to look
at the syntax of the JSON,

00:58:49.000 --> 00:58:50.601
it's sometimes hard to parse.

00:58:50.601 --> 00:58:52.734
We actually show distribution,
so if you have three categories,

00:58:52.734 --> 00:58:54.934
"A," "B," and "C,"
there is, you know,

00:58:54.934 --> 00:58:57.000
"A" is .5, "B" is .3,
"C" is .2,

00:58:57.000 --> 00:59:00.133
that sort of thing.
Um, and you had a second part

00:59:00.133 --> 00:59:02.200
to your question
I blanked on, I'm sorry.

00:59:02.200 --> 00:59:05.200
man: Yeah, if the user doesn't
think your prediction is right,

00:59:05.200 --> 00:59:07.200
does it go back
to the system?

00:59:07.200 --> 00:59:09.200
Green: Yes. So that's why we--
one of the many reasons

00:59:09.200 --> 00:59:11.033
why we enabled
streaming updates, uh,

00:59:11.033 --> 00:59:14.067
is so that you can then do that
and say, "Hey, this was wrong."

00:59:14.067 --> 00:59:16.534
You know, we tagged
this piece of comment--

00:59:16.534 --> 00:59:18.534
or this comment improperly,

00:59:18.534 --> 00:59:21.033
um, please retag it
in this training set

00:59:21.033 --> 00:59:23.534
as being something else,
so you--what you can do,

00:59:23.534 --> 00:59:26.534
is you can take what the user
has told you as being a label,

00:59:26.534 --> 00:59:28.534
and reapply it
through the update

00:59:28.534 --> 00:59:30.534
into the predictive model.
man: Oh, okay.

00:59:30.534 --> 00:59:32.033
Green: Yeah.
man: Also, another question...

00:59:32.033 --> 00:59:33.534
Green: Sure.

00:59:33.534 --> 00:59:35.033
man: So the examples
you have shown

00:59:35.033 --> 00:59:37.033
kind of just show
classification, I guess...

00:59:37.033 --> 00:59:38.534
Green: Yes.

00:59:38.534 --> 00:59:40.200
man: But, uh, is there,
like, prediction

00:59:40.200 --> 00:59:42.501
on the, like--uh, yeah, I guess
Max kind of mentioned it--

00:59:42.501 --> 00:59:44.501
a continuous value...
Green: Yes, yes, there is.

00:59:44.501 --> 00:59:46.501
Yeah, it's all documented
on the web site.

00:59:46.501 --> 00:59:48.100
Feel free to look there.
It's--yeah.

00:59:48.100 --> 00:59:50.067
man: Okay. Okay, thank you.
Green: Great. Oh, no worries.

00:59:50.067 --> 00:59:51.734
I think we have time
for one more question.

00:59:51.734 --> 00:59:53.334
Again, as I said, we'll
actually be up here,

00:59:53.334 --> 00:59:55.000
so please come up
and ask them. Yes, sir?

00:59:55.000 --> 00:59:56.801
man: I was gonna ask
the same question,

00:59:56.801 --> 00:59:58.434
but I rephrased it
a little bit.

00:59:58.434 --> 01:00:00.434
Green: Sure.
man: If a user thinks

01:00:00.434 --> 01:00:02.434
it's wrong,
or he may think it's right...

01:00:02.434 --> 01:00:04.434
Green: Mm-hmm.
man: Can the system learn?

01:00:04.434 --> 01:00:06.434
'Cause retagging
is a little different.

01:00:06.434 --> 01:00:08.934
Can the current tagging
be marked as saying

01:00:08.934 --> 01:00:12.267
you guys--you didn't do a good
job, it's wrong--or it's right?

01:00:12.267 --> 01:00:14.934
Green: Yeah, so the system
runs on, um--

01:00:14.934 --> 01:00:16.934
well, I'll refer you
to the engineering team,

01:00:16.934 --> 01:00:19.234
so you can get a specific answer
as to how it works,

01:00:19.234 --> 01:00:21.767
but basically, there's no way
currently to provide through

01:00:21.767 --> 01:00:23.734
that negative reinforcement
you're talking about.

01:00:23.734 --> 01:00:25.734
man: Like supervised learning,
that's what I'm talking about.

01:00:25.734 --> 01:00:27.501
Green: Yeah,
we're primarily focused.

01:00:27.501 --> 01:00:29.000
on positive reinforcement.

01:00:29.000 --> 01:00:31.000
man: Okay, okay, okay, I see.
Green: Great.

01:00:31.000 --> 01:00:33.000
man: And second question,
it's great that you allow,

01:00:33.000 --> 01:00:35.033
uh, to import our current model
into yours...

01:00:35.033 --> 01:00:36.534
Green: Yes.

01:00:36.534 --> 01:00:38.200
man: Would you allow
to export?

01:00:38.200 --> 01:00:40.200
Green: So we use, um,
both publicly available

01:00:40.200 --> 01:00:43.200
and proprietary models, so we
don't currently support export.

01:00:43.200 --> 01:00:45.200
Um, if you do want
to export your model,

01:00:45.200 --> 01:00:46.868
we can talk about that.

01:00:46.868 --> 01:00:48.534
That's something we've talked
about internally.

01:00:48.534 --> 01:00:50.534
But we'll have to be sure to
pull out the proprietary ones.

01:00:50.534 --> 01:00:52.033
man: All right, thanks.

01:00:52.033 --> 01:00:54.067
Green: Oh, no worries.
Um, thank you all so much.

01:00:54.067 --> 01:00:55.667
Um, those of you
who are still here,

01:00:55.667 --> 01:00:58.000
we would be happy to answer your
questions up here at the end.

01:00:58.000 --> 01:01:00.000
Um, thank you again for coming.

01:01:00.000 --> 01:01:02.934
[applause]

