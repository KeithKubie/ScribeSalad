WEBVTT
Kind: captions
Language: en

00:00:00.916 --> 00:00:03.340
LEE DENISON: Hello,
and welcome.

00:00:03.340 --> 00:00:06.800
Thanks for coming to this talk
on Google+ Sign-In for Android

00:00:06.800 --> 00:00:07.840
Developers.

00:00:07.840 --> 00:00:09.160
My name is Lee Denison.

00:00:09.160 --> 00:00:12.375
I am a Developer Programs
Engineer on the Google+

00:00:12.375 --> 00:00:13.890
Developer Relations team.

00:00:13.890 --> 00:00:16.970
And with me on stage, I have Wes
Tarle, who is a software

00:00:16.970 --> 00:00:20.830
engineer on the Google+
platform.

00:00:20.830 --> 00:00:24.060
So eight weeks ago, we announced
Google+ Sign-In as

00:00:24.060 --> 00:00:27.210
the way for developers to
integrate Google as a social

00:00:27.210 --> 00:00:28.420
identity platform.

00:00:28.420 --> 00:00:31.610
And with it, we launched some
amazing features for Android

00:00:31.610 --> 00:00:34.650
developers which help you to
create a more engaging

00:00:34.650 --> 00:00:37.940
experience for your users, and
to grow your audience by

00:00:37.940 --> 00:00:41.035
providing new ways to do sharing
that make it easy for

00:00:41.035 --> 00:00:46.060
your users and their circles
to reengage with your app.

00:00:46.060 --> 00:00:48.420
So out of interest, how many
people in the audience are

00:00:48.420 --> 00:00:50.530
Android developers?

00:00:50.530 --> 00:00:51.130
Great.

00:00:51.130 --> 00:00:53.760
I'm in the right place.

00:00:53.760 --> 00:00:56.790
And how many of you have
integrated a Google API with

00:00:56.790 --> 00:00:58.940
your Android app?

00:00:58.940 --> 00:00:59.160
OK.

00:00:59.160 --> 00:00:59.630
A bunch of you.

00:00:59.630 --> 00:01:00.180
Excellent.

00:01:00.180 --> 00:01:00.900
OK, final question.

00:01:00.900 --> 00:01:03.690
How many people have already
integrated Google+ Sign-In

00:01:03.690 --> 00:01:05.750
with your app?

00:01:05.750 --> 00:01:06.060
OK.

00:01:06.060 --> 00:01:06.870
A couple.

00:01:06.870 --> 00:01:07.580
Not many.

00:01:07.580 --> 00:01:07.970
That's fine.

00:01:07.970 --> 00:01:08.400
Great.

00:01:08.400 --> 00:01:10.900
So I think there's something
in this talk for everybody.

00:01:10.900 --> 00:01:13.120
I'm going to introduce you,
along with where's the new

00:01:13.120 --> 00:01:15.880
features in Google+ Sign-In, and
then we're going to show

00:01:15.880 --> 00:01:17.920
you just how simple it is
to integrate Google+

00:01:17.920 --> 00:01:19.660
Sign-In into your app.

00:01:19.660 --> 00:01:22.130
And along the way, we'll point
out some of the things that

00:01:22.130 --> 00:01:23.330
you might want to think
about when you come

00:01:23.330 --> 00:01:24.580
to do this for real.

00:01:26.890 --> 00:01:30.270
So Google+ Sign-In is available
on the web,

00:01:30.270 --> 00:01:33.280
Android, and iOS.

00:01:33.280 --> 00:01:36.130
And although I'm going to focus
on Android in this talk,

00:01:36.130 --> 00:01:38.480
I want to start with a feature
which is actually implemented

00:01:38.480 --> 00:01:41.160
as part of web sign in, and
that's the ability for you to

00:01:41.160 --> 00:01:44.230
offer your Android app as part
of the web sign in flow.

00:01:44.230 --> 00:01:47.280
And we call that over
the air installs.

00:01:47.280 --> 00:01:50.620
So in this example, which is
TuneIn that have integrated

00:01:50.620 --> 00:01:53.170
Google+ Sign-In, it's
a cool service.

00:01:53.170 --> 00:01:55.310
It lets me listen to my favorite
radio stations on the

00:01:55.310 --> 00:01:58.080
web and mobile platforms.

00:01:58.080 --> 00:01:59.490
But let's imagine
that I discover

00:01:59.490 --> 00:02:01.290
TuneIn via their website.

00:02:01.290 --> 00:02:04.070
They, of course, are going to
want to offer me their Android

00:02:04.070 --> 00:02:06.890
app as part of the
sign in flow.

00:02:06.890 --> 00:02:09.900
And with Google+ Sign-In, they
can do exactly that.

00:02:09.900 --> 00:02:12.960
So seamlessly, as part of the
sign in flow, when I come to

00:02:12.960 --> 00:02:17.570
their site for the very first
time, Google will show me a

00:02:17.570 --> 00:02:22.010
dialog box which looks just like
this, but only if I have

00:02:22.010 --> 00:02:24.840
a compatible Android device,
and only if I don't already

00:02:24.840 --> 00:02:27.110
have TuneIn installed.

00:02:27.110 --> 00:02:28.750
Importantly, if I--

00:02:53.530 --> 00:02:54.780
It'll be waiting for me.

00:02:58.940 --> 00:03:01.490
I will already be signed
in to that device.

00:03:01.490 --> 00:03:03.490
When I launch TuneIn for the
first time, I'll already be

00:03:03.490 --> 00:03:06.250
signed in without having
to do anything.

00:03:06.250 --> 00:03:09.580
And that's because Google+
Sign-In authenticates the user

00:03:09.580 --> 00:03:13.690
to the service, and not
to individual devices.

00:03:13.690 --> 00:03:18.730
That makes this process probably
the most seamless app

00:03:18.730 --> 00:03:19.920
install process that
you've seen.

00:03:19.920 --> 00:03:23.320
And from the user's perspective,
it's completely

00:03:23.320 --> 00:03:26.260
like magic.

00:03:26.260 --> 00:03:30.110
Just to show you how simple it
is to integrate over the air

00:03:30.110 --> 00:03:32.960
installs with your web service,
if you've already

00:03:32.960 --> 00:03:36.170
added the web sign in button
to your website, it's

00:03:36.170 --> 00:03:39.660
literally a one line change to
add an Android package that

00:03:39.660 --> 00:03:41.320
you want to install as
part of the over

00:03:41.320 --> 00:03:43.385
the air install process.

00:03:43.385 --> 00:03:47.010
You literally just say which
package you want to install.

00:03:47.010 --> 00:03:49.200
Now, I'm not going to talk more
about how to integrate

00:03:49.200 --> 00:03:51.180
Google+ Sign-In with
websites here.

00:03:51.180 --> 00:03:53.710
But if you get a chance
to catch [INAUDIBLE]

00:03:53.710 --> 00:03:55.840
talk later on this afternoon,
he'll be covering

00:03:55.840 --> 00:03:57.090
that in more detail.

00:03:59.130 --> 00:04:00.890
So let's cover some
of the basics.

00:04:00.890 --> 00:04:04.000
Google+ Sign-In is provided as
part of Google Play Services,

00:04:04.000 --> 00:04:06.340
which means it already
enjoys a huge install

00:04:06.340 --> 00:04:08.560
base of Android devices.

00:04:08.560 --> 00:04:11.270
And you as a developer can get
hold of the libraries you need

00:04:11.270 --> 00:04:14.410
directly from the Android SDK.

00:04:14.410 --> 00:04:17.519
As well as providing the APIs
for Google+ Sign-In, Google

00:04:17.519 --> 00:04:21.380
Play Services also provides
native API access for the

00:04:21.380 --> 00:04:24.060
Google+ APIs, and a growing
number of other Google APIs.

00:04:27.760 --> 00:04:30.260
Google+ Sign-In integrates
with the Android account

00:04:30.260 --> 00:04:32.730
manager, which means it uses
the user accounts that are

00:04:32.730 --> 00:04:35.330
already on the device.

00:04:35.330 --> 00:04:37.810
And that means that the user
doesn't have to keep typing

00:04:37.810 --> 00:04:40.330
their username and password,
because they authenticate with

00:04:40.330 --> 00:04:42.890
the device, and not with
each individual app.

00:04:42.890 --> 00:04:45.260
That's great for them, because
we all know that if you've

00:04:45.260 --> 00:04:47.260
chosen a strong password, then,
by definition, it's

00:04:47.260 --> 00:04:49.270
difficult to type on
a mobile keyboard.

00:04:49.270 --> 00:04:51.810
And it's great for your app,
because it means more of your

00:04:51.810 --> 00:04:55.150
users are signed in.

00:04:55.150 --> 00:04:59.500
Google+ Sign-In is implemented
on top of OAuth 2.0, but it

00:04:59.500 --> 00:05:02.240
really is the easiest
implementation of OAuth 2.0

00:05:02.240 --> 00:05:03.310
that you'll come across.

00:05:03.310 --> 00:05:06.530
It does all the heavy lifting
for you, and it takes care of

00:05:06.530 --> 00:05:09.530
all of the OAuth 2.0 exchanges
that you need to do, and all

00:05:09.530 --> 00:05:11.500
of the token management-- so
the token caching and the

00:05:11.500 --> 00:05:13.650
refreshing.

00:05:13.650 --> 00:05:17.720
And if you do you want to use a
Google API which is not part

00:05:17.720 --> 00:05:20.450
of Google Play Services,
you can still do that.

00:05:20.450 --> 00:05:24.480
All you need to do is include
the scopes when you set up the

00:05:24.480 --> 00:05:26.960
+ client in the first place,
and then you can grab that

00:05:26.960 --> 00:05:29.700
token and use it with
rest APIs and

00:05:29.700 --> 00:05:30.950
other client libraries.

00:05:33.420 --> 00:05:36.000
So I just want to show you
quickly what it looks like

00:05:36.000 --> 00:05:38.840
when the user signs in with
Google+ Sign-In for the first

00:05:38.840 --> 00:05:40.030
time on an Android device.

00:05:40.030 --> 00:05:41.520
And I'm going to use this
example from Banjo.

00:05:44.550 --> 00:05:47.390
When I click the Sign In button,
I get this native

00:05:47.390 --> 00:05:48.290
consent dialog.

00:05:48.290 --> 00:05:50.120
Now, as a developer, you don't
need to worry about that.

00:05:50.120 --> 00:05:54.250
That's implemented as part
of Google Play Services.

00:05:54.250 --> 00:05:58.200
And because it's native, it
keeps the user in the app, and

00:05:58.200 --> 00:06:01.380
it shows the user in a clear
and consistent fashion what

00:06:01.380 --> 00:06:03.690
permissions are being
requested by

00:06:03.690 --> 00:06:06.790
the app from them.

00:06:06.790 --> 00:06:09.090
Now, when we were creating
Google+ Sign-In, we asked

00:06:09.090 --> 00:06:11.840
users what they were most
interested in from a social

00:06:11.840 --> 00:06:12.680
identity provider.

00:06:12.680 --> 00:06:15.620
And they came back to us with
two major concerns.

00:06:15.620 --> 00:06:18.850
Firstly, they wanted to be sure
that when they sign into

00:06:18.850 --> 00:06:21.690
an app with a social identity
provider that it wouldn't

00:06:21.690 --> 00:06:24.220
result in their friends
getting spammed.

00:06:24.220 --> 00:06:28.330
And second, they wanted to be
sure that the app activities

00:06:28.330 --> 00:06:30.890
that were written by the app
they were signing in to, they

00:06:30.890 --> 00:06:33.480
would have control over
who gets to see those.

00:06:33.480 --> 00:06:35.860
So we worked really hard with
Google+ Sign-In to make sure

00:06:35.860 --> 00:06:38.490
that the user stays in control,
and that's what this

00:06:38.490 --> 00:06:39.710
dialog is about.

00:06:39.710 --> 00:06:43.500
So the line items that appear
on this permissions dialog

00:06:43.500 --> 00:06:46.200
will depend on which scopes
you've asked of the user.

00:06:46.200 --> 00:06:48.360
What we're showing here is the
default scope, which is

00:06:48.360 --> 00:06:52.020
plus.login, and that gives your
app access to the user's

00:06:52.020 --> 00:06:54.680
basic profile information, which
means their name, their

00:06:54.680 --> 00:06:57.860
ID, their profile picture, and
any information they've chosen

00:06:57.860 --> 00:07:00.580
to make public on
their profile.

00:07:00.580 --> 00:07:04.010
It also gives you access
to their social graph.

00:07:06.880 --> 00:07:10.130
But of course, although that
defaults to the user's entire

00:07:10.130 --> 00:07:12.350
social graph, they have the
option to customize that.

00:07:12.350 --> 00:07:14.430
So if they click the link that
says change who this app can

00:07:14.430 --> 00:07:18.135
see, they get to customize which
circles are provided to

00:07:18.135 --> 00:07:20.040
the graph to the app.

00:07:20.040 --> 00:07:24.920
And although the app doesn't
actually get to see the names

00:07:24.920 --> 00:07:27.570
of the circles themselves, it'll
get a list of all the

00:07:27.570 --> 00:07:30.200
users in those.

00:07:30.200 --> 00:07:34.040
Lastly, the item at the bottom
there allows us to control who

00:07:34.040 --> 00:07:37.110
gets to see app activities which
are written by this app.

00:07:37.110 --> 00:07:40.150
And again, it defaults to your
circles, but there's a really

00:07:40.150 --> 00:07:42.500
clear up front option there that
allows you to keep them

00:07:42.500 --> 00:07:44.620
private if you select
only you.

00:07:44.620 --> 00:07:46.520
Of course, you can
customize those.

00:07:46.520 --> 00:07:51.110
If I have climbing buddies and
I have a climbing app, then

00:07:51.110 --> 00:07:52.940
this allows me to
keep those app

00:07:52.940 --> 00:07:55.790
activities focused and relevant.

00:07:55.790 --> 00:07:58.850
So Google+ Sign-In gives
you access to all that

00:07:58.850 --> 00:08:01.650
information, but what I'm going
to do now is hand over

00:08:01.650 --> 00:08:04.270
to Wes, and he's going to show
us just how easy it is to

00:08:04.270 --> 00:08:08.240
implement it in our app.

00:08:08.240 --> 00:08:12.300
WESLEY TARLE: So let's see how
we add the Sign-In with Google

00:08:12.300 --> 00:08:15.260
to our existing Android app.

00:08:15.260 --> 00:08:18.310
We're going to add a Sign In
button to our layout, and then

00:08:18.310 --> 00:08:22.795
we'll add to our activity a Plus
client and bind that to

00:08:22.795 --> 00:08:25.720
the activities life cycle.

00:08:25.720 --> 00:08:28.960
So to add the button, we're
just going to make a plain

00:08:28.960 --> 00:08:30.120
layout change.

00:08:30.120 --> 00:08:32.960
The Sign In button is just a
plain Android view that you

00:08:32.960 --> 00:08:36.390
can add to any layout, but it
has inside it all of the

00:08:36.390 --> 00:08:40.500
resources and assets that you
need to match Google branding

00:08:40.500 --> 00:08:45.560
guidelines, and it has
translated text, so that you

00:08:45.560 --> 00:08:50.280
can launch the button
on any language.

00:08:50.280 --> 00:08:53.830
In our activity, we'll add a
Plus client, and this is going

00:08:53.830 --> 00:08:58.310
to be our main context for
interacting with Google+ APIs

00:08:58.310 --> 00:08:59.310
on Android.

00:08:59.310 --> 00:09:03.570
So we recommend that each
activity has a Plus client so

00:09:03.570 --> 00:09:05.970
that you can be sure that
while the Plus client

00:09:05.970 --> 00:09:08.930
resources are in use, that
you have an actual user

00:09:08.930 --> 00:09:10.180
engaged in your app.

00:09:13.690 --> 00:09:17.430
So let's tie that Plus client
to or activity life cycle.

00:09:17.430 --> 00:09:20.840
In OnCreate, we'll
initialize it.

00:09:20.840 --> 00:09:23.030
And then in OnStart,
we'll connect.

00:09:23.030 --> 00:09:24.405
And in OnStop, we'll
disconnect.

00:09:28.060 --> 00:09:30.430
We'll use the Plus client
builder to initialize it.

00:09:30.430 --> 00:09:33.670
So this is where you can figure
how you're going to use

00:09:33.670 --> 00:09:35.690
Google APIs with the
Plus client.

00:09:35.690 --> 00:09:37.920
And here we'll declare a couple
different kinds of

00:09:37.920 --> 00:09:40.130
activities that we'd
like to send on the

00:09:40.130 --> 00:09:41.885
user's behalf to Google.

00:09:41.885 --> 00:09:45.400
Now, these will show up in the
consent dialog, so you'll want

00:09:45.400 --> 00:09:48.260
to make sure that you only
choose the types of activity

00:09:48.260 --> 00:09:51.430
that your app's going to send,
so you don't confuse the user

00:09:51.430 --> 00:09:53.190
when they see the consent.

00:09:53.190 --> 00:09:57.010
If you're using other Google
APIs like Drive or YouTube,

00:09:57.010 --> 00:10:01.040
this is where you'd specify
their OAuth scopes.

00:10:01.040 --> 00:10:02.990
And you'll notice that
we don't mention an

00:10:02.990 --> 00:10:04.470
account name here.

00:10:04.470 --> 00:10:08.180
Google Play services takes care
of keeping the user's

00:10:08.180 --> 00:10:11.380
identity for your app so that
you don't have to show an

00:10:11.380 --> 00:10:15.270
account chooser unless
you want to.

00:10:15.270 --> 00:10:18.270
Once we have the Plus
client initialized,

00:10:18.270 --> 00:10:20.160
we'll connect an OnStart.

00:10:20.160 --> 00:10:21.890
And this does two things.

00:10:21.890 --> 00:10:25.440
First, it sets up a service
connection between your app

00:10:25.440 --> 00:10:31.850
and Google Play services, and
then it auto logs in the user

00:10:31.850 --> 00:10:36.410
in case you signed in before
on the web or to your app.

00:10:36.410 --> 00:10:40.170
So you'll want to make sure to
call connect in OnStart so you

00:10:40.170 --> 00:10:43.310
can capture all of those users
that came to your app from our

00:10:43.310 --> 00:10:48.050
sign in and OTA flow who are
already signed in to Google.

00:10:48.050 --> 00:10:52.900
This will let them sign into
your app just seamlessly.

00:10:52.900 --> 00:10:55.050
In OnStop, we'll call
disconnect, and this is

00:10:55.050 --> 00:10:58.420
important to clean up any
resources that are used, both

00:10:58.420 --> 00:11:01.290
by the Plus client and
your activity.

00:11:01.290 --> 00:11:04.530
So you'll be releasing the
service connections here, and

00:11:04.530 --> 00:11:05.810
the service connection
will also be

00:11:05.810 --> 00:11:06.840
releasing your activity.

00:11:06.840 --> 00:11:09.960
So you really have to call
disconnect every time you call

00:11:09.960 --> 00:11:11.710
connect so that you
don't leak.

00:11:15.260 --> 00:11:18.450
Now, the connect call
doesn't show any UI.

00:11:18.450 --> 00:11:19.970
That's sort of up to you.

00:11:19.970 --> 00:11:22.150
We wanted to make sure that you
could send the user to the

00:11:22.150 --> 00:11:24.060
consent screen when
you wanted.

00:11:26.580 --> 00:11:30.150
When you call connect, you can
expect one of two callbacks.

00:11:30.150 --> 00:11:33.450
If the user is already signed in
on the web or to your app,

00:11:33.450 --> 00:11:36.570
you'll get OnConnected, and here
we can start using all of

00:11:36.570 --> 00:11:40.120
the Google+ APIs provided
by the Plus client.

00:11:40.120 --> 00:11:43.950
So we get the current person,
and we can update our UI right

00:11:43.950 --> 00:11:46.140
here on the main thread.

00:11:46.140 --> 00:11:49.700
If the user's not signed in yet,
then generally, that's

00:11:49.700 --> 00:11:52.660
because they need a
consent screen.

00:11:52.660 --> 00:11:55.520
And we tell you about that
consent screen by giving you a

00:11:55.520 --> 00:11:58.600
pending intent wrapped inside
this connection result.

00:12:01.270 --> 00:12:04.360
So we'll call you back with
OnConnectionFailed with the

00:12:04.360 --> 00:12:05.440
connection result.

00:12:05.440 --> 00:12:07.710
And since we have a sign in
button, we're just going to

00:12:07.710 --> 00:12:10.870
stash that connection result
away until the user clicks it.

00:12:10.870 --> 00:12:13.040
But if you were showing a
loading screen or a splash

00:12:13.040 --> 00:12:16.370
screen, you could start it
directly here to show the user

00:12:16.370 --> 00:12:18.280
the consent and get signed
into the app.

00:12:22.360 --> 00:12:24.920
So the sign in button is a plain
Android view, and we've

00:12:24.920 --> 00:12:27.730
attached our activity as
an OnClick listener.

00:12:27.730 --> 00:12:30.450
When the user clicks the button,
we're going to start

00:12:30.450 --> 00:12:33.450
the resolution, and then expect
a call to OnActivity

00:12:33.450 --> 00:12:36.520
result with whether the user
signed in or not in the

00:12:36.520 --> 00:12:37.770
consent screen.

00:12:40.440 --> 00:12:44.740
So in our OnClick method, if we
have a connection result,

00:12:44.740 --> 00:12:47.430
because we've got the
OnConnectionFailed callback,

00:12:47.430 --> 00:12:49.940
we'll call
StartResolutionForResult.

00:12:49.940 --> 00:12:52.680
And this just wraps the call to
the pending intent so that

00:12:52.680 --> 00:12:56.280
you don't have to understand how
to call a pending intent.

00:12:56.280 --> 00:12:59.620
It's kind of rough syntax.

00:12:59.620 --> 00:13:02.840
Then we'll get a callback to
OnActivityResult, and if the

00:13:02.840 --> 00:13:06.520
user consented, we'll
get a result OK.

00:13:06.520 --> 00:13:08.960
We'll connect the Plus client
again, and expect an

00:13:08.960 --> 00:13:12.250
OnConnected callback.

00:13:12.250 --> 00:13:16.530
If the user canceled, then we'll
get a result cancel, and

00:13:16.530 --> 00:13:18.120
we'll just hang out and
wait until they click

00:13:18.120 --> 00:13:20.100
on the button again.

00:13:20.100 --> 00:13:23.640
So you can see it's just a few
lines of code on top of what

00:13:23.640 --> 00:13:26.720
you've already got in your
activity to get a user signed

00:13:26.720 --> 00:13:28.685
in and get access to
our Google+ APIs.

00:13:31.430 --> 00:13:32.180
LEE DENISON: Awesome.

00:13:32.180 --> 00:13:34.500
So now we've got the
user signed in.

00:13:34.500 --> 00:13:38.430
What can we do to enhance their
experience in our app?

00:13:38.430 --> 00:13:40.640
Well, there's a few answers
to that question, and the

00:13:40.640 --> 00:13:43.830
simplest, from a Google+
perspective, would be to take

00:13:43.830 --> 00:13:46.060
the user's name and profile
picture andmake them feel at

00:13:46.060 --> 00:13:47.732
home in our app.

00:13:47.732 --> 00:13:50.500
Well, something you can do which
is even more powerful

00:13:50.500 --> 00:13:53.420
would be to take the user's
social graph and integrate it

00:13:53.420 --> 00:13:56.840
with your own data model,
and use that to provide

00:13:56.840 --> 00:14:02.650
interesting or useful insights
into your data for the user.

00:14:02.650 --> 00:14:05.620
That's often termed in the
industry social proof.

00:14:05.620 --> 00:14:08.840
So here we have a great
example from Fancy.

00:14:08.840 --> 00:14:12.100
They have a stream which pulls
in stuff from all over the

00:14:12.100 --> 00:14:14.610
world that people find
cool and interesting,

00:14:14.610 --> 00:14:15.710
and show it to me.

00:14:15.710 --> 00:14:18.190
Now, that's a potentially
huge data set.

00:14:18.190 --> 00:14:23.070
But if they integrate that
stream with my social graph to

00:14:23.070 --> 00:14:26.260
filter it and to order it, then
not only am I much more

00:14:26.260 --> 00:14:29.560
likely to see things that I find
cool and interesting, but

00:14:29.560 --> 00:14:32.460
I'm also much more likely to
engage when I see that one of

00:14:32.460 --> 00:14:34.360
my friends has engaged.

00:14:34.360 --> 00:14:35.440
If [INAUDIBLE]

00:14:35.440 --> 00:14:38.580
thinks that these shoes are
cool, they must be cool.

00:14:38.580 --> 00:14:41.680
So Google+ Sign-In gives
you access to the

00:14:41.680 --> 00:14:43.360
user's social graph.

00:14:43.360 --> 00:14:45.450
And what I'm going to do now
is I'll had it over to Wes,

00:14:45.450 --> 00:14:47.950
and he'll show us after we've
got the user signed in how we

00:14:47.950 --> 00:14:49.200
get access to that
information.

00:14:51.840 --> 00:14:53.510
WESLEY TARLE: So once the user's
signed in and you have

00:14:53.510 --> 00:14:57.800
a connected Plus client, it's
really easy to get access to

00:14:57.800 --> 00:14:58.940
their social graph.

00:14:58.940 --> 00:15:03.750
What we're going to do is call
LoadPeople, and then expect a

00:15:03.750 --> 00:15:05.000
call back to OnPeopleLoaded.

00:15:07.960 --> 00:15:09.230
And that's it.

00:15:09.230 --> 00:15:12.550
This pattern of making a request
directly from your

00:15:12.550 --> 00:15:15.390
activity and then getting a
call back later with the

00:15:15.390 --> 00:15:18.460
result is common to all the
APIs across Google Play

00:15:18.460 --> 00:15:21.140
Services, and you'll see this
in all of our Google+ APIs.

00:15:24.590 --> 00:15:28.110
So we'll call LoadPeople and
pass the visible collection.

00:15:28.110 --> 00:15:32.270
This is the set of people that
your app is allowed to see in

00:15:32.270 --> 00:15:34.170
the user's social circles.

00:15:34.170 --> 00:15:38.280
If we were configuring it for
best ordering, if you wanted

00:15:38.280 --> 00:15:41.500
to get close ties, you would set
that here, or alphabetical

00:15:41.500 --> 00:15:43.800
ordering, if you care.

00:15:43.800 --> 00:15:46.730
Then we get a call to
OnPeopleLoaded.

00:15:46.730 --> 00:15:50.080
And here, if we're successful,
then we'll get the people

00:15:50.080 --> 00:15:52.440
directly in a person buffer.

00:15:52.440 --> 00:15:56.350
Now, a person buffer is a lot
like a cursor in terms of

00:15:56.350 --> 00:15:59.400
efficiency, so it's important
that you close

00:15:59.400 --> 00:16:00.220
it when you're done.

00:16:00.220 --> 00:16:03.750
So you'll see here that we have
the regular try finally

00:16:03.750 --> 00:16:08.320
block the you'd expect from a
cursor, where we close the

00:16:08.320 --> 00:16:09.570
cursor in the finally.

00:16:13.420 --> 00:16:16.750
It's better than a cursor,
though, because you get actual

00:16:16.750 --> 00:16:20.570
native typed access to
the data inside it.

00:16:20.570 --> 00:16:23.040
So you can iterate through these
people, and they're just

00:16:23.040 --> 00:16:25.350
exposed as a person
model object.

00:16:25.350 --> 00:16:28.520
So you can get their display
name and their image in a very

00:16:28.520 --> 00:16:30.530
natural Java way.

00:16:30.530 --> 00:16:34.130
And this really points to the
power of Google Play Services

00:16:34.130 --> 00:16:39.070
to deliver an API to your app,
since you didn't have to

00:16:39.070 --> 00:16:45.230
decide what kind of HTTP stack
you wanted or JSON parsing.

00:16:45.230 --> 00:16:50.050
Google handles Auth and offline
and caching and

00:16:50.050 --> 00:16:54.840
batching so that you really
just have access to this

00:16:54.840 --> 00:16:58.800
online data in a very native
way, directly in your activity

00:16:58.800 --> 00:17:01.450
where you need to
update your UI.

00:17:01.450 --> 00:17:02.700
And I think that's
really cool.

00:17:06.069 --> 00:17:08.420
LEE DENISON: So it really is
very simple to integrate

00:17:08.420 --> 00:17:10.270
Google+ Sign-In with your app.

00:17:10.270 --> 00:17:12.569
But of course, when you come to
do this for real, there'll

00:17:12.569 --> 00:17:14.790
be a bunch of broader concerns
that you need to take into

00:17:14.790 --> 00:17:17.609
account for your app.

00:17:17.609 --> 00:17:20.260
So, for example, if your app
integrates with a back end

00:17:20.260 --> 00:17:23.010
service, as many of them will,
then you need to consider

00:17:23.010 --> 00:17:25.190
issues like, how do you
pass the user's

00:17:25.190 --> 00:17:26.560
identity between them?

00:17:26.560 --> 00:17:28.940
And if you're going to make
calls to third party APIs,

00:17:28.940 --> 00:17:31.070
Google or otherwise, where
are they made from?

00:17:31.070 --> 00:17:31.860
Are they made service side?

00:17:31.860 --> 00:17:33.460
Are they made client side?

00:17:33.460 --> 00:17:36.210
If you choose to integrate
multiple identity providers,

00:17:36.210 --> 00:17:38.870
as many of you will, then you
need to think about how you

00:17:38.870 --> 00:17:42.540
harmonize the data models
between them, and also how you

00:17:42.540 --> 00:17:44.930
deal with some of the special
cases that arise when a user

00:17:44.930 --> 00:17:47.200
can present multiple identities
to your app.

00:17:47.200 --> 00:17:49.570
Now, I'm not going to go into
details of those here, but

00:17:49.570 --> 00:17:52.040
what I do want to do is call
out some of the other talks

00:17:52.040 --> 00:17:53.790
that are going on at Google IO
this year, where we cover

00:17:53.790 --> 00:17:54.960
those issues in greater
detail.

00:17:54.960 --> 00:17:59.870
So if you're interested in
those, check those out.

00:17:59.870 --> 00:18:01.580
Now, for the stats
geeks, we haven't

00:18:01.580 --> 00:18:03.270
forgotten about the analytics.

00:18:03.270 --> 00:18:06.240
So when you create your app,
you create a project which

00:18:06.240 --> 00:18:10.300
allows you to use the Google+
APIs and the Sign In API, and

00:18:10.300 --> 00:18:12.310
you have the option, at that
point, to associate your

00:18:12.310 --> 00:18:14.300
project with a Plus page.

00:18:14.300 --> 00:18:17.070
If you do that, then you'll get
access to analytics for

00:18:17.070 --> 00:18:18.780
Google+ Sign-In.

00:18:18.780 --> 00:18:20.340
Now, this is a sample
app of mine.

00:18:20.340 --> 00:18:22.610
And clearly, I can see I need to
do a bit more work, because

00:18:22.610 --> 00:18:24.420
I've only got 83 users
signing in.

00:18:24.420 --> 00:18:28.280
But here, you can see how many
people are signing into your

00:18:28.280 --> 00:18:29.810
app using Google+ Sign-In.

00:18:29.810 --> 00:18:32.010
You can see how many versions
of your app have been

00:18:32.010 --> 00:18:35.120
installed via over the air
installs, and who's using some

00:18:35.120 --> 00:18:37.190
of the new features that we're
about to talk about-- so app

00:18:37.190 --> 00:18:39.670
activities and interactive
posts.

00:18:39.670 --> 00:18:41.400
So check this out.

00:18:41.400 --> 00:18:44.000
It's a really great tool to see
the impact of integrating

00:18:44.000 --> 00:18:45.807
Google+ Sign-In in your app.

00:18:49.630 --> 00:18:52.030
So now I want to talk about one
of the new features that

00:18:52.030 --> 00:18:53.570
we've launched with Google+
Sign-In, which

00:18:53.570 --> 00:18:55.930
is interactive posts.

00:18:55.930 --> 00:19:00.290
Interactive posts add action to
Google+ posts in a way that

00:19:00.290 --> 00:19:03.610
makes it easy for users and
their circles to re-engage

00:19:03.610 --> 00:19:05.850
with your app.

00:19:05.850 --> 00:19:08.610
So we're used to the idea, with
a traditional Google+

00:19:08.610 --> 00:19:10.510
post, of having a
content target.

00:19:10.510 --> 00:19:13.770
So if you include a content
target with your post, then

00:19:13.770 --> 00:19:15.780
Google will go and fetch
some metadata, a title,

00:19:15.780 --> 00:19:18.630
description, a picture, and
create a target in your post

00:19:18.630 --> 00:19:20.570
which is clickable and
takes the user to

00:19:20.570 --> 00:19:22.660
the original content.

00:19:22.660 --> 00:19:26.050
With interactive posts, we've
added an action target-- a

00:19:26.050 --> 00:19:28.970
second target in the form of
a call to action button.

00:19:28.970 --> 00:19:32.240
And that takes the user not only
to the content, but also,

00:19:32.240 --> 00:19:34.380
then, performs an action
when they get there.

00:19:34.380 --> 00:19:38.490
So if I see a post like this in
my stream on mobile, and I

00:19:38.490 --> 00:19:42.510
click that button, it will
launch your app, it will

00:19:42.510 --> 00:19:44.560
provide your app with the
information it needs to take

00:19:44.560 --> 00:19:46.440
me to the content I've
requested, and then it will

00:19:46.440 --> 00:19:48.330
tell it that I want to perform
an action, and

00:19:48.330 --> 00:19:50.460
your app can do that.

00:19:50.460 --> 00:19:53.110
So that, for me as a user,
is a seamless experience.

00:19:53.110 --> 00:19:55.330
It takes me directly where I
want to go, and it makes it

00:19:55.330 --> 00:19:57.420
incredibly easy for me to act.

00:19:57.420 --> 00:20:01.180
So we're seeing huge increases
in levels of user interaction

00:20:01.180 --> 00:20:03.700
rate with these posts, so I
would really encourage you to

00:20:03.700 --> 00:20:04.830
check them out.

00:20:04.830 --> 00:20:07.860
If a traditional post inspires
user curiosity, then

00:20:07.860 --> 00:20:11.480
interactive posts get
their attention.

00:20:11.480 --> 00:20:12.720
So I'll walk you through
an example.

00:20:12.720 --> 00:20:15.150
Let's imagine that I'm using
TuneIn in on my Android

00:20:15.150 --> 00:20:16.410
device, and I want to--

00:20:21.635 --> 00:20:22.590
with him.

00:20:22.590 --> 00:20:26.275
In TuneIn, I click the Share
button as I would anyway, and

00:20:26.275 --> 00:20:29.120
it fires an intent which
launches the share dialog

00:20:29.120 --> 00:20:32.100
within the Google+
app as normal.

00:20:32.100 --> 00:20:35.080
Now, when they do that, they
would provide some extra

00:20:35.080 --> 00:20:38.876
information that includes in the
intent that they want to

00:20:38.876 --> 00:20:41.400
include a call to action
button-- in this case, listen.

00:20:41.400 --> 00:20:45.570
So you can see, as normal,
they're able to pre-populate

00:20:45.570 --> 00:20:48.490
the text, and you can see that
I get the preview, including

00:20:48.490 --> 00:20:50.120
the listen button.

00:20:50.120 --> 00:20:54.380
Now, because I'm sharing that
directly with Wes, he will get

00:20:54.380 --> 00:20:57.710
a notification via the Google
notifier, not just on his

00:20:57.710 --> 00:21:00.380
mobile device, but across
all Google properties.

00:21:00.380 --> 00:21:02.550
So on search, on
Gmail, on Maps.

00:21:05.240 --> 00:21:07.220
Let's imagine that he clicks
the notification

00:21:07.220 --> 00:21:08.290
on his mobile device.

00:21:08.290 --> 00:21:13.080
So he's taken in, and he sees
the post on the G+ stream on

00:21:13.080 --> 00:21:14.630
his Android device.

00:21:14.630 --> 00:21:17.900
There, he can see the listen
button, and when he clicks it,

00:21:17.900 --> 00:21:21.520
that fires an intent which will
start the TuneIn app, and

00:21:21.520 --> 00:21:24.070
it will include the information
which was inserted

00:21:24.070 --> 00:21:26.870
right at the beginning that
tells the TuneIn app how to

00:21:26.870 --> 00:21:28.300
get to the content, and
the fact that I

00:21:28.300 --> 00:21:29.110
want to start listening.

00:21:29.110 --> 00:21:31.050
So the next thing that
happens, from Wes's

00:21:31.050 --> 00:21:33.750
perspective, is that he's
listening to the music and

00:21:33.750 --> 00:21:35.870
trying to understand why he
ever listens to me when it

00:21:35.870 --> 00:21:37.640
comes to my taste.

00:21:37.640 --> 00:21:40.920
So that's all great.

00:21:40.920 --> 00:21:43.930
What happens if he doesn't have
the TuneIn app installed?

00:21:43.930 --> 00:21:47.840
Well, instead, he's taken to the
app store, to the TuneIn

00:21:47.840 --> 00:21:51.470
page, and he has the ability
to install that app.

00:21:51.470 --> 00:21:53.680
When he clicks install, it
downloads and installs as

00:21:53.680 --> 00:21:56.230
normal, and he gets an Android
notification that allows him

00:21:56.230 --> 00:21:59.450
to complete the action that he
started in the first place.

00:21:59.450 --> 00:22:02.150
He clicks on that, and again,
from his perspective, the next

00:22:02.150 --> 00:22:05.340
thing that happens is he's
listening to the music.

00:22:05.340 --> 00:22:07.960
So that Play store flow only
happens if he doesn't have the

00:22:07.960 --> 00:22:10.250
app installed, but it's really
powerful, because it gives

00:22:10.250 --> 00:22:13.420
your users the tools when
they're most excited about

00:22:13.420 --> 00:22:16.210
your service to share their
excitement in a way that makes

00:22:16.210 --> 00:22:18.480
it easy for new users
and their circles to

00:22:18.480 --> 00:22:19.730
engage with your app.

00:22:22.400 --> 00:22:24.420
So I'm now going to hand back to
Wes, and he's going to show

00:22:24.420 --> 00:22:26.190
us how to add an interactive
post to our app.

00:22:28.770 --> 00:22:31.800
WESLEY TARLE: So first I'll
show you how to generate

00:22:31.800 --> 00:22:36.250
interactive posts with deep link
IDs, and then I'll show

00:22:36.250 --> 00:22:40.740
you how to handle clicks on
those posts on Android to take

00:22:40.740 --> 00:22:42.455
the user deep into your app.

00:22:45.580 --> 00:22:48.680
So you might be familiar with
the standard actions send

00:22:48.680 --> 00:22:49.850
intent on Android.

00:22:49.850 --> 00:22:53.290
That's the standard way to send
snippets of text and URLs

00:22:53.290 --> 00:22:56.150
and images and everything
else from app to app.

00:22:56.150 --> 00:22:58.130
So we built on top of
action send in a

00:22:58.130 --> 00:23:00.120
couple important ways.

00:23:00.120 --> 00:23:04.020
First, we added support
for deep link IDs.

00:23:04.020 --> 00:23:08.440
And just like a web URL can
link deeply to a page on a

00:23:08.440 --> 00:23:13.830
website, a deep link ID can link
directly into an activity

00:23:13.830 --> 00:23:17.340
and action inside your
Android app.

00:23:17.340 --> 00:23:21.900
Second, we added support
to specify a

00:23:21.900 --> 00:23:23.800
call to action button.

00:23:23.800 --> 00:23:27.090
Now, this is that button that
drives engagement on your

00:23:27.090 --> 00:23:34.050
posts that takes the user to
some action inside your app.

00:23:34.050 --> 00:23:38.190
So to create that interactive
post, let's say that I want to

00:23:38.190 --> 00:23:44.960
share some music with Lee to
improve his taste in music.

00:23:44.960 --> 00:23:49.080
I'm going to create a post by
first setting up the content,

00:23:49.080 --> 00:23:52.250
and I'll set a URL like
I did before, and I'll

00:23:52.250 --> 00:23:55.160
set a deep link ID.

00:23:55.160 --> 00:23:58.380
This deep link ID, when Lee
interacts with the post, will

00:23:58.380 --> 00:24:01.400
be sent back to your app
and round tripped.

00:24:01.400 --> 00:24:04.130
So you want to make sure that
it uniquely identifies some

00:24:04.130 --> 00:24:08.370
content in your app, and that
it's meaningful to anyone who

00:24:08.370 --> 00:24:09.620
might see the post.

00:24:12.570 --> 00:24:15.510
Now that we've got the content
configured, we'll add the call

00:24:15.510 --> 00:24:17.000
to action button.

00:24:17.000 --> 00:24:19.200
And here, I choose listen,
because I want Lee to listen

00:24:19.200 --> 00:24:20.950
to the song.

00:24:20.950 --> 00:24:24.130
But there are a hundred or so
other actions that you could

00:24:24.130 --> 00:24:28.870
choose and apply to the same
button from your app.

00:24:28.870 --> 00:24:33.970
So depending on what your app
does with that action target,

00:24:33.970 --> 00:24:37.970
we're going to choose
the verb.

00:24:37.970 --> 00:24:42.150
Now, similarly to the content,
I'll choose a URL for the web

00:24:42.150 --> 00:24:47.570
and a deep link ID for mobile,
and that's iOS and Android.

00:24:47.570 --> 00:24:51.580
I build an intent by calling
GetIntent, and then call

00:24:51.580 --> 00:24:56.240
StartActivityForResult to
launch the share box.

00:24:56.240 --> 00:24:59.530
Then the user can configure who
it's going to share to.

00:24:59.530 --> 00:25:03.410
I would include Lee,
and then hit post.

00:25:03.410 --> 00:25:06.950
So now that we have interactive
posts with deep

00:25:06.950 --> 00:25:10.980
links in the Google+
stream, how do you

00:25:10.980 --> 00:25:14.550
handle clicks on Android?

00:25:14.550 --> 00:25:19.070
We're going to export exactly
one activity that exists only

00:25:19.070 --> 00:25:24.410
as a control to parse the deep
link ID, and then choose the

00:25:24.410 --> 00:25:29.590
right activity and action inside
our app, and then send

00:25:29.590 --> 00:25:30.530
the user there.

00:25:30.530 --> 00:25:32.570
And that's it.

00:25:32.570 --> 00:25:37.120
So we'll declare it in our
Android manifest, and set

00:25:37.120 --> 00:25:39.200
exported equals true.

00:25:39.200 --> 00:25:41.520
Then we'll add this
intent filter.

00:25:41.520 --> 00:25:43.740
This intent filter comes
directly from our developer

00:25:43.740 --> 00:25:47.060
documentation, and you just
paste it in here.

00:25:47.060 --> 00:25:50.820
And the intent filter plus
your package name is what

00:25:50.820 --> 00:25:53.570
tells Google that your app's
installed and ready to handle

00:25:53.570 --> 00:25:56.210
deep link IDs.

00:25:56.210 --> 00:25:56.650
Let's look at the

00:25:56.650 --> 00:25:59.820
implementation of this activity.

00:25:59.820 --> 00:26:03.870
In OnCreate, we're going to
parse the deep link ID, and

00:26:03.870 --> 00:26:08.840
then decide, was this deep link
from a content or from a

00:26:08.840 --> 00:26:10.800
call to action button?

00:26:10.800 --> 00:26:13.850
So if it was from a call to
action button, we'll include

00:26:13.850 --> 00:26:20.940
an extra in our intent that we
can tell our song activity to

00:26:20.940 --> 00:26:25.550
go ahead and start playing when
it receives the intent.

00:26:25.550 --> 00:26:29.580
Then we call StartActivity on
the intent that we built.

00:26:29.580 --> 00:26:31.970
And this is the important part--
that we call Finish

00:26:31.970 --> 00:26:33.640
directly here in OnCreate.

00:26:33.640 --> 00:26:36.080
And that way, this activity
won't show any flicker to the

00:26:36.080 --> 00:26:39.390
user, and the user won't
know it was there.

00:26:39.390 --> 00:26:42.920
So everything else, including
generating notifications

00:26:42.920 --> 00:26:45.940
across Google properties and
installing your app from the

00:26:45.940 --> 00:26:49.380
Play store is all handled by
Google, so it kind of gets it

00:26:49.380 --> 00:26:52.820
out of the way, and it lets you
create posts that are more

00:26:52.820 --> 00:26:55.120
engaging for your users and
focus on what you're going to

00:26:55.120 --> 00:26:56.370
do with that.

00:27:00.380 --> 00:27:00.640
LEE DENISON: Awesome.

00:27:00.640 --> 00:27:04.280
So I want to finish up by
talking about one last feature

00:27:04.280 --> 00:27:06.650
that we've launched with Google+
Sign-In, and that is

00:27:06.650 --> 00:27:08.400
app activities.

00:27:08.400 --> 00:27:11.820
So app activities allow you,
with your app, with user

00:27:11.820 --> 00:27:14.870
consent, to write activity
to Google.

00:27:14.870 --> 00:27:18.010
So that might be music that the
users listen to, movies

00:27:18.010 --> 00:27:20.410
they've watched, places they've
checked in, or on

00:27:20.410 --> 00:27:22.580
Shazam, songs that
I've discovered.

00:27:22.580 --> 00:27:25.020
Now, the first place that
we chose to surface app

00:27:25.020 --> 00:27:27.760
activities was on the
user's profile.

00:27:27.760 --> 00:27:31.880
So if someone in my circles
takes a look at my profile,

00:27:31.880 --> 00:27:34.120
because I've given them
permission, they can see the

00:27:34.120 --> 00:27:36.230
songs that I've discovered
on Shazam.

00:27:36.230 --> 00:27:38.640
And if they click those links,
it will take them through to

00:27:38.640 --> 00:27:40.200
the original content
on Shazam.

00:27:40.200 --> 00:27:45.710
So the moment those activities
contain deep links as well.

00:27:45.710 --> 00:27:48.040
Two weeks ago, we announced a
new place that we're going to

00:27:48.040 --> 00:27:50.450
start surfacing app activities,
and that's on

00:27:50.450 --> 00:27:51.700
Google Search.

00:27:53.710 --> 00:27:57.730
So if, for example, I search on
Google Search for Fandango,

00:27:57.730 --> 00:28:00.960
in this case, then I get the
normal organic search results

00:28:00.960 --> 00:28:04.080
on the left, and on the right,
I'll see a social card.

00:28:04.080 --> 00:28:05.680
Now, that already appears.

00:28:05.680 --> 00:28:09.560
And as now, because Fandango
have an active Google+

00:28:09.560 --> 00:28:12.280
presence, I'll see there how
many people are following

00:28:12.280 --> 00:28:16.320
their Plus page, and I'll have
the ability to follow their

00:28:16.320 --> 00:28:18.570
Plus page directly from
that social card.

00:28:18.570 --> 00:28:20.690
The bit that we're going to
add is the next bit-- the

00:28:20.690 --> 00:28:22.570
Popular With Google+ Users.

00:28:22.570 --> 00:28:26.650
So this is an aggregated
anonymized context for

00:28:26.650 --> 00:28:29.320
Fandango that tells me what's
going on based on the app

00:28:29.320 --> 00:28:33.740
activities that their users are
writing from their app.

00:28:33.740 --> 00:28:36.020
Now, that's great for the user,
because it means that

00:28:36.020 --> 00:28:39.570
when I search for Fandango, I
get extra context before I've

00:28:39.570 --> 00:28:41.160
even clicked through
to their site.

00:28:41.160 --> 00:28:43.810
And from Fandango's point of
view, it's great for them

00:28:43.810 --> 00:28:47.550
because users that click on that
content in that social

00:28:47.550 --> 00:28:49.910
card will have already chosen
that they want to interact

00:28:49.910 --> 00:28:51.150
with one of their pieces
of content.

00:28:51.150 --> 00:28:53.020
So they're getting highly
qualified users coming through

00:28:53.020 --> 00:28:55.530
to their app.

00:28:55.530 --> 00:28:58.110
So we're really excited at
Google about app activities,

00:28:58.110 --> 00:28:59.880
and this really just represents
the start.

00:28:59.880 --> 00:29:03.110
So I would encourage you to take
a look at them and watch

00:29:03.110 --> 00:29:05.070
this space.

00:29:05.070 --> 00:29:06.750
So I'm going to give you back to
Wes, and he's going to show

00:29:06.750 --> 00:29:11.590
us how easy it is to add app
activities to our app.

00:29:11.590 --> 00:29:14.800
WESLEY TARLE: So once you have
a signed in user, it's really

00:29:14.800 --> 00:29:17.120
simple to send app activity
to Google.

00:29:19.840 --> 00:29:25.310
So let's say, in this case,
I've sent Lee a post about

00:29:25.310 --> 00:29:28.790
listening to some music,
and he's started to

00:29:28.790 --> 00:29:30.720
listen to the music.

00:29:30.720 --> 00:29:34.730
And now, we're going to record
app activities that are Listen

00:29:34.730 --> 00:29:37.450
activities to record the fact
that he is listening to music

00:29:37.450 --> 00:29:38.700
in our app.

00:29:41.690 --> 00:29:45.260
First, we want to configure
the content.

00:29:45.260 --> 00:29:48.630
This is going to be a target,
for the moment.

00:29:48.630 --> 00:29:51.660
On Android, app activities
are called moments.

00:29:51.660 --> 00:29:55.200
I don't know if you've ever
tried to name a model class

00:29:55.200 --> 00:29:59.730
activity on Android, but
it's not a good idea.

00:29:59.730 --> 00:30:03.440
So we specify the content
using this item scope.

00:30:03.440 --> 00:30:06.110
And item scope is a really wide
interface, because it's

00:30:06.110 --> 00:30:09.920
meant to support any type of
content that your might write.

00:30:09.920 --> 00:30:12.510
But the important bits
here are the ID.

00:30:12.510 --> 00:30:14.990
That's going to be a deep link
ID, just like we had in the

00:30:14.990 --> 00:30:16.650
interactive post case.

00:30:16.650 --> 00:30:19.650
It's going to have some
meaning to your app.

00:30:19.650 --> 00:30:21.020
And then the type.

00:30:21.020 --> 00:30:24.170
In our case, the tape
is music recording.

00:30:24.170 --> 00:30:26.970
So we're listening to a song.

00:30:26.970 --> 00:30:30.170
Then, given that type, we'll
set some metadata here.

00:30:30.170 --> 00:30:33.020
We'll set the title, and the
description, and the

00:30:33.020 --> 00:30:34.420
thumbnail, so that
Google knows how

00:30:34.420 --> 00:30:37.310
to render this thing.

00:30:37.310 --> 00:30:40.000
Now that we have the content
configured, we'll create a

00:30:40.000 --> 00:30:44.680
moment that has an activity
and the content.

00:30:44.680 --> 00:30:47.710
So since we listened
to the song, we can

00:30:47.710 --> 00:30:49.650
write a listen activity.

00:30:49.650 --> 00:30:52.460
Now, it's really important that
this listen activity--

00:30:52.460 --> 00:30:56.155
we mentioned it on an earlier
slide when we were configuring

00:30:56.155 --> 00:30:58.120
our Plus client.

00:30:58.120 --> 00:31:01.760
This way, Lee has already
consented to send listen

00:31:01.760 --> 00:31:04.790
activities to Google, so we know
that we can write these

00:31:04.790 --> 00:31:08.580
activities in a passive way.

00:31:08.580 --> 00:31:14.300
We build the moment, and then
we call WriteMoment.

00:31:14.300 --> 00:31:19.730
And WriteMoment is really cool,
because the same way

00:31:19.730 --> 00:31:23.150
that you called LoadPeople and
Google Play Services took care

00:31:23.150 --> 00:31:26.960
of everything, WriteMoment
takes care of offline.

00:31:26.960 --> 00:31:29.650
So if you have assigned
a user, and you call

00:31:29.650 --> 00:31:32.980
WriteMoment, and the user's
offline, the next time they go

00:31:32.980 --> 00:31:37.130
online, the moment
will be written.

00:31:37.130 --> 00:31:42.470
And this is really cool, because
with Google Play

00:31:42.470 --> 00:31:50.700
Services, we can offer the sort
of deeper integration and

00:31:50.700 --> 00:31:52.045
more complex stuff.

00:32:00.090 --> 00:32:00.750
LEE DENISON: Cool.

00:32:00.750 --> 00:32:01.200
Thanks very much.

00:32:01.200 --> 00:32:06.190
So as you can see, integrating
Google+ Sign-In is incredibly

00:32:06.190 --> 00:32:09.230
easy, and it includes a bunch of
great features for Android

00:32:09.230 --> 00:32:10.220
developers.

00:32:10.220 --> 00:32:13.530
It helps you to enhance the
experience for users in your

00:32:13.530 --> 00:32:16.370
app by providing personalization
data and

00:32:16.370 --> 00:32:18.040
access to their social graph.

00:32:18.040 --> 00:32:20.140
It helps you to grow your
audience through targeted

00:32:20.140 --> 00:32:22.620
sharing-- any features in
interactive posts--

00:32:22.620 --> 00:32:25.800
and it makes it really easy for
users to get your app with

00:32:25.800 --> 00:32:28.120
features like over
the air install.

00:32:28.120 --> 00:32:31.810
So if you'd like to know more,
we're going to hold a panel

00:32:31.810 --> 00:32:34.490
discussion upstairs right after
this session with some

00:32:34.490 --> 00:32:37.220
of the partners that have
integrated Google+ Sign-In

00:32:37.220 --> 00:32:38.220
into their Android apps.

00:32:38.220 --> 00:32:42.550
So please come up and have
a chat with us up there.

00:32:42.550 --> 00:32:43.800
But thank you very much
for listening.

00:32:43.800 --> 00:32:47.320
If you want to find out more,
take a look at our developer

00:32:47.320 --> 00:32:50.380
documentation at
developers.google.com/plus.

00:32:50.380 --> 00:32:52.510
There you'll find great
documentation, but also

00:32:52.510 --> 00:32:54.740
samples, including our quick
starts that'll get you up and

00:32:54.740 --> 00:32:57.310
running with this stuff
in just five minutes.

00:32:57.310 --> 00:33:00.870
We're going to hold a code lab
tomorrow, where we take you

00:33:00.870 --> 00:33:04.670
from nothing to a server side
component and an Android

00:33:04.670 --> 00:33:05.945
client which has integrated
Google+

00:33:05.945 --> 00:33:08.200
Sign-In in just two hours.

00:33:08.200 --> 00:33:10.760
I'll be running that along with
my colleague, Gus Class.

00:33:10.760 --> 00:33:12.160
And Wes will be there as well.

00:33:12.160 --> 00:33:15.170
So if you're interested, please
come along to that.

00:33:15.170 --> 00:33:19.170
And we would very much like your
feedback, so use the QR

00:33:19.170 --> 00:33:21.630
code on the slide or the one
over by the door, and you can

00:33:21.630 --> 00:33:23.190
give us feedback about
this session.

00:33:23.190 --> 00:33:25.290
Wes and I would love
to hear from you.

00:33:25.290 --> 00:33:28.290
We've got a few minutes to take
some questions, so if you

00:33:28.290 --> 00:33:30.010
would like to ask a question,
please do so, but

00:33:30.010 --> 00:33:31.380
come up to the mics.

00:33:31.380 --> 00:33:32.860
Thank you very much
for your time.

00:33:43.430 --> 00:33:44.302
AUDIENCE: Hello.

00:33:44.302 --> 00:33:46.710
I have a quick question.

00:33:46.710 --> 00:33:49.630
If you want your app to use
another scope-- like, to get

00:33:49.630 --> 00:33:51.030
tasks or something else--

00:33:51.030 --> 00:33:52.090
LEE DENISON: Can I get you
to speak up slightly?

00:33:52.090 --> 00:33:53.340
Sorry.

00:33:55.080 --> 00:33:55.930
AUDIENCE: You hear me?

00:33:55.930 --> 00:33:56.050
LEE DENISON: Yep.

00:33:56.050 --> 00:33:56.220
That's great.

00:33:56.220 --> 00:33:58.670
AUDIENCE: So if you want your
app to use something like

00:33:58.670 --> 00:33:59.900
another scope--

00:33:59.900 --> 00:34:04.470
like Tasks or something that,
how do you handle the token?

00:34:04.470 --> 00:34:08.250
Do you have to cache it,
or how does it work?

00:34:08.250 --> 00:34:10.469
LEE DENISON: So that will
depend on your app.

00:34:10.469 --> 00:34:13.120
As you saw in the examples, you
create this Plus client,

00:34:13.120 --> 00:34:15.409
and you have the option to add
scopes at the point that you

00:34:15.409 --> 00:34:17.219
create the Plus client.

00:34:17.219 --> 00:34:20.440
Once you've done that, you can
use Google Auth Utils to pull

00:34:20.440 --> 00:34:22.480
out the token.

00:34:22.480 --> 00:34:25.550
And that's an access token, so
it's long lived for the length

00:34:25.550 --> 00:34:28.340
of an access token.

00:34:28.340 --> 00:34:30.800
Depending on how you want to
access it, you may need to

00:34:30.800 --> 00:34:31.530
cache it yourself.

00:34:31.530 --> 00:34:34.239
At the point that you've pulled
the token out, you do

00:34:34.239 --> 00:34:35.270
have to manage it yourself.

00:34:35.270 --> 00:34:39.000
So at some point, you may start
to get 401s or 403s,

00:34:39.000 --> 00:34:41.870
because the token has expired,
at which point you'll need to

00:34:41.870 --> 00:34:44.699
use Google Play Services
to get another token.

00:34:44.699 --> 00:34:45.209
And then if you want
to add anything--

00:34:45.209 --> 00:34:47.699
AUDIENCE: So it works exactly
the same way as the Google

00:34:47.699 --> 00:34:51.409
Authentication Service like
Play services right now?

00:34:51.409 --> 00:34:54.250
Like, you don't want to use
Google+, but you just use the

00:34:54.250 --> 00:34:57.920
authentication service like
the usual dialog with the

00:34:57.920 --> 00:34:59.240
Google accounts and
stuff like that?

00:34:59.240 --> 00:34:59.345
WESLEY TARLE: Yeah.

00:34:59.345 --> 00:35:02.010
So once you connect to your
Plus client with the state

00:35:02.010 --> 00:35:03.670
where you have all
of your scopes

00:35:03.670 --> 00:35:06.200
specified, the user's consented.

00:35:06.200 --> 00:35:09.920
So when you use Google Auth Util
to get a token, you get

00:35:09.920 --> 00:35:13.710
one without any kind of user
interaction required.

00:35:13.710 --> 00:35:15.440
So there won't be any
notifications or anything

00:35:15.440 --> 00:35:17.780
after that.

00:35:17.780 --> 00:35:20.320
That token's cached for an hour
on the client for you, so

00:35:20.320 --> 00:35:24.470
anytime you make a call
to GetToken, you

00:35:24.470 --> 00:35:27.470
can use that token.

00:35:27.470 --> 00:35:28.856
Does that answer
your question?

00:35:28.856 --> 00:35:29.730
AUDIENCE: Yeah, sure.

00:35:29.730 --> 00:35:32.000
And my other quick question is
what's the flow if the user's

00:35:32.000 --> 00:35:33.940
not registered in
Google+ at all?

00:35:33.940 --> 00:35:36.360
What do you show when you--

00:35:36.360 --> 00:35:38.880
LEE DENISON: So if the user's
not registered in Google+,

00:35:38.880 --> 00:35:41.590
then they'll be taken to the
Google+ app, and they'll have

00:35:41.590 --> 00:35:43.400
the option to upgrade.

00:35:43.400 --> 00:35:44.935
So there is an upgrade flow.

00:35:44.935 --> 00:35:45.420
AUDIENCE: OK.

00:35:45.420 --> 00:35:46.910
Thank you.

00:35:46.910 --> 00:35:47.750
AUDIENCE: So does this work?

00:35:47.750 --> 00:35:48.860
Yeah.

00:35:48.860 --> 00:35:51.133
My question is, are we required
to use the Google+

00:35:51.133 --> 00:35:55.830
Sign-In for our layouts, or
can we just make our own

00:35:55.830 --> 00:35:57.920
button without the
Google+ branding?

00:35:57.920 --> 00:36:01.660
LEE DENISON: So the Google+
button is provided really for

00:36:01.660 --> 00:36:02.400
convenience.

00:36:02.400 --> 00:36:05.100
I mean, from your perspective,
one of the things that you

00:36:05.100 --> 00:36:08.570
need to consider is that a lot
of reasons why people want to

00:36:08.570 --> 00:36:11.870
use Google as a social identity
provider is because

00:36:11.870 --> 00:36:13.030
they trust it.

00:36:13.030 --> 00:36:16.520
And so by using our branding,
you help to confer the level

00:36:16.520 --> 00:36:18.250
of trust to the user.

00:36:18.250 --> 00:36:20.590
But if you want to use your own
button, you're entirely

00:36:20.590 --> 00:36:21.670
welcome to do so.

00:36:21.670 --> 00:36:24.770
One of the main advantages of
using the Google+ button is

00:36:24.770 --> 00:36:27.290
that it provides all the
localization for you.

00:36:27.290 --> 00:36:28.790
So that makes it very easy.

00:36:28.790 --> 00:36:31.310
But no, there's absolutely no
reason why you can't use your

00:36:31.310 --> 00:36:31.720
own button.

00:36:31.720 --> 00:36:34.520
AUDIENCE: OK, thank you.

00:36:34.520 --> 00:36:38.570
AUDIENCE: So segueing on that a
little bit, what I find that

00:36:38.570 --> 00:36:42.410
I'm experiencing is I'm trying
to integrate Google+ within

00:36:42.410 --> 00:36:44.900
Enterprise.

00:36:44.900 --> 00:36:48.400
But I kind of don't want to
make it seem too social,

00:36:48.400 --> 00:36:51.690
because I wouldn't want the
client to feel like they're

00:36:51.690 --> 00:36:54.410
exposing their internal
communications.

00:36:54.410 --> 00:36:54.740
LEE DENISON: Sure.

00:36:54.740 --> 00:36:58.050
AUDIENCE: But the infrastructure
of Google+ is

00:36:58.050 --> 00:37:02.470
well done, very good to
associate the users and create

00:37:02.470 --> 00:37:05.470
a great experience for what
we're trying to do in terms of

00:37:05.470 --> 00:37:10.730
getting a company who has
individuals on different

00:37:10.730 --> 00:37:13.910
coasts to integrate within
an experience.

00:37:13.910 --> 00:37:17.850
Is there anything or anywhere or
anyone you can suggest that

00:37:17.850 --> 00:37:22.150
can provide some guidelines for
Google+ within Enterprise

00:37:22.150 --> 00:37:25.240
without it seeming
too playful, for

00:37:25.240 --> 00:37:26.430
lack of a better word?

00:37:26.430 --> 00:37:29.330
LEE DENISON: So that's quite
a broad question.

00:37:29.330 --> 00:37:31.900
What I'd encourage you to do,
actually, is to come over to

00:37:31.900 --> 00:37:33.820
the sandbox after the
session, and we can

00:37:33.820 --> 00:37:34.750
talk in more detail.

00:37:34.750 --> 00:37:37.690
We've only got a minute, so it's
quite a broad question to

00:37:37.690 --> 00:37:38.420
answer right now.

00:37:38.420 --> 00:37:38.795
AUDIENCE: All right.

00:37:38.795 --> 00:37:39.440
Cool beans.

00:37:39.440 --> 00:37:40.690
LEE DENISON: Thanks.

00:37:43.344 --> 00:37:46.790
AUDIENCE: What if a user had
multiple account and he switch

00:37:46.790 --> 00:37:50.200
between this account,
if your application

00:37:50.200 --> 00:37:52.990
can know about that?

00:37:52.990 --> 00:37:54.980
LEE DENISON: Sorry, can I get
you to speak up slightly?

00:37:54.980 --> 00:37:58.920
AUDIENCE: What if user have
multiple accounts and he

00:37:58.920 --> 00:38:03.580
switch between this account,
if there's any chance

00:38:03.580 --> 00:38:06.260
application know about that?

00:38:06.260 --> 00:38:09.050
LEE DENISON: So the question is,
how do you handle multiple

00:38:09.050 --> 00:38:11.020
accounts with Google+ Sign-In?

00:38:11.020 --> 00:38:16.170
So in the case of Android
specifically, if the device

00:38:16.170 --> 00:38:20.510
has multiple accounts on it,
then the very first time

00:38:20.510 --> 00:38:23.820
someone tries to sign in, the
pending intent-- so the

00:38:23.820 --> 00:38:25.980
connection result that we
saw in the examples--

00:38:25.980 --> 00:38:27.690
will contain a pending
intent that

00:38:27.690 --> 00:38:29.360
displays an account chooser.

00:38:29.360 --> 00:38:32.050
So the user gets to pick which
account they want to sign in

00:38:32.050 --> 00:38:33.450
with at that point.

00:38:33.450 --> 00:38:38.250
Now, at that point, a default
account for the app be

00:38:38.250 --> 00:38:41.600
decided, and that will stay the
default account every time

00:38:41.600 --> 00:38:44.460
they open the app until they
choose to sign out.

00:38:44.460 --> 00:38:46.580
So if you take a look at our
examples, one of the things

00:38:46.580 --> 00:38:48.790
that we recommend you do is that
when the user signs out,

00:38:48.790 --> 00:38:52.420
you clear the default account
for that app, at which point,

00:38:52.420 --> 00:38:54.650
the next time someone tries to
sign in, you'll, again, get

00:38:54.650 --> 00:38:56.090
the account chooser, and
they can pick the one

00:38:56.090 --> 00:38:56.860
they want to use.

00:38:56.860 --> 00:38:58.530
I don't know if you have
anything to add to that.

00:38:58.530 --> 00:39:00.980
WESLEY TARLE: No,
that's about it.

00:39:00.980 --> 00:39:02.982
AUDIENCE: OK, thank you.

00:39:02.982 --> 00:39:04.670
LEE DENISON: OK, we've got
one more question.

00:39:04.670 --> 00:39:05.550
AUDIENCE: This one's
pretty easy.

00:39:05.550 --> 00:39:09.510
I didn't notice, when you're
first coming into the app,

00:39:09.510 --> 00:39:12.120
what can I use to determine
if I should even

00:39:12.120 --> 00:39:13.110
show the sign in button?

00:39:13.110 --> 00:39:14.950
How do I know if they're
already signed in?

00:39:14.950 --> 00:39:16.120
LEE DENISON: How do you know
they're already signed in?

00:39:16.120 --> 00:39:18.060
AUDIENCE: Yeah, so you're
saying, here's how you show

00:39:18.060 --> 00:39:19.060
the sign in button.

00:39:19.060 --> 00:39:20.600
If they're already signed
in, I don't need to.

00:39:20.600 --> 00:39:23.640
LEE DENISON: So if you tie the
life cycle of the Plus client

00:39:23.640 --> 00:39:27.640
object to your activity, the
way we suggested here, then

00:39:27.640 --> 00:39:33.530
when you call start or you call
ConnectOnStart, the Plus

00:39:33.530 --> 00:39:35.690
client will actually try to
authenticate the user

00:39:35.690 --> 00:39:36.740
immediately.

00:39:36.740 --> 00:39:38.930
And if they are signed in, it
will return you straightaway

00:39:38.930 --> 00:39:40.170
to OnConnected.

00:39:40.170 --> 00:39:43.130
So if you've built your flow
so that when you get

00:39:43.130 --> 00:39:45.650
OnConnected back, you've
displayed the sign in

00:39:45.650 --> 00:39:48.300
experience, then as soon as they
come into the app, you'll

00:39:48.300 --> 00:39:48.930
get that call.

00:39:48.930 --> 00:39:52.290
So it should work from
your app's design.

00:39:52.290 --> 00:39:53.130
AUDIENCE: OK, thanks.

00:39:53.130 --> 00:39:53.400
LEE DENISON: Sure.

00:39:53.400 --> 00:39:54.020
No problem.

00:39:54.020 --> 00:39:55.100
All right, thanks
very much, guys.

00:39:55.100 --> 00:39:56.790
If you've got any more
questions, please come over

00:39:56.790 --> 00:39:58.760
and have a chat in
the sandbox area.

00:39:58.760 --> 00:40:00.010
Thank you.

