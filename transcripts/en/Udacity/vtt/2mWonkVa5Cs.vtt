WEBVTT
Kind: captions
Language: en

00:00:00.412 --> 00:00:02.913
[NOISE] This is the Earth.

00:00:02.914 --> 00:00:04.713
Okay, lesson over.

00:00:04.713 --> 00:00:07.047
Just kidding.

00:00:07.046 --> 00:00:10.487
You're going to render your own
map in your site in just a moment.

00:00:10.487 --> 00:00:13.637
Google Maps are made up of lots
of different types of data.

00:00:13.637 --> 00:00:17.865
Imagery, road networks,
points of interest, more things.

00:00:17.865 --> 00:00:20.961
You'll use pieces and
combinations of that data,

00:00:20.961 --> 00:00:23.559
to build a user experience
that has value.

00:00:23.559 --> 00:00:28.048
When you render a map, you can control
what type of information you get.

00:00:28.048 --> 00:00:31.992
One of the most basic things you can
control when you render your map,

00:00:31.992 --> 00:00:32.952
is the map type.

00:00:32.953 --> 00:00:35.429
We have four preconfigured map types.

00:00:35.429 --> 00:00:38.256
You're probably most
familiar with the road map,

00:00:38.256 --> 00:00:41.484
map type which you've seen as
the default in Google Maps.

00:00:41.484 --> 00:00:45.315
We also have satellite if you
want real images of the world, or

00:00:45.314 --> 00:00:50.192
hybrid in which we overlay features such
as roads on top of satellite imagery.

00:00:50.192 --> 00:00:54.067
And finally, we have terrain,
which emphasises shaded relief and

00:00:54.067 --> 00:00:56.317
other physical terrain information.

00:00:56.317 --> 00:00:59.037
Now that you understand
what you're seeing,

00:00:59.037 --> 00:01:01.139
let's load the map into your site.

00:01:01.140 --> 00:01:04.131
I'm starting off with
just a basic HTML site.

00:01:04.131 --> 00:01:05.971
It’s blank right now.

00:01:05.971 --> 00:01:10.307
You can load a Google Map into your
site simply by adding three things into

00:01:10.307 --> 00:01:11.028
your code.

00:01:11.028 --> 00:01:16.126
The first is a script line into
your HTML to load the API.

00:01:16.126 --> 00:01:19.853
This loads the JavaScript definitions
when the page starts loading in

00:01:19.852 --> 00:01:20.616
the browser.

00:01:20.617 --> 00:01:24.353
We're loading the Java Script here
asynchronously which means that the rest

00:01:24.353 --> 00:01:27.054
of the page will render while
the Java Script API loads,

00:01:27.054 --> 00:01:30.637
and then our call back function will
execute when the API is done loading.

00:01:30.637 --> 00:01:33.956
If you're not immediately
using the API's functionality,

00:01:33.956 --> 00:01:36.826
you can put the same instruction
inside a function and

00:01:36.825 --> 00:01:38.760
call it only when you plan to use it.

00:01:38.760 --> 00:01:43.006
Loading the API asynchronously gives you
more speed as it let's your page load

00:01:43.006 --> 00:01:45.471
without having to wait for
the JavaScript.

00:01:45.471 --> 00:01:50.783
Maps.Googleapis.com is the endpoint
that we're loading the JavaScript from.

00:01:50.783 --> 00:01:53.742
The parameter v=3 indicates
that we're calling

00:01:53.742 --> 00:01:57.466
version three of the api which is
the version that we want to use.

00:01:57.466 --> 00:02:01.611
Next, you must include the API
key that you just created.

00:02:01.611 --> 00:02:03.234
Use the key perimeter and

00:02:03.234 --> 00:02:07.643
simply paste in the browser key
that you generated in your project.

00:02:07.643 --> 00:02:11.764
Alternatively, you can use the client
ID if you're a Max API Premium Plan

00:02:11.764 --> 00:02:12.439
customer.

00:02:12.439 --> 00:02:15.165
We’ll learn more about
that later in the course.

00:02:15.165 --> 00:02:19.850
The next thing that you need is
a div element in your html body

00:02:19.850 --> 00:02:21.919
with the ID of map, easy.

00:02:21.919 --> 00:02:26.238
I'm also adding some css to specify
that I want our map to be 100 percent of

00:02:26.239 --> 00:02:27.599
the height of the page.

00:02:27.598 --> 00:02:30.604
Finally, we'll need
some more JavaScript,

00:02:30.604 --> 00:02:35.240
a map variable and an initialized
JavaScript function to load the map.

00:02:35.241 --> 00:02:38.576
Something to note, I'm putting all of
this in one file, but you can also

00:02:38.575 --> 00:02:41.649
separate out your JavaScript into
a separate file to keep it neat.

00:02:41.649 --> 00:02:45.182
This initialize function will contain
everything that will happen after

00:02:45.182 --> 00:02:48.099
the page loads, but
before the user interacts with the map.

00:02:49.300 --> 00:02:52.260
For now,
its only job is to make a map appear.

00:02:52.259 --> 00:02:54.693
We're creating a new map instance here.

00:02:54.693 --> 00:02:59.861
And we must specify two things, where in
the HTML to load the map, which is going

00:02:59.861 --> 00:03:04.354
to be that map div that we created,
and what part of the world to show.

00:03:04.354 --> 00:03:06.111
We have to give it a center and

00:03:06.111 --> 00:03:10.233
a zoom value so it knows what imagery
to show and in how much detail.

00:03:10.234 --> 00:03:11.893
The center is a latitude and

00:03:11.893 --> 00:03:15.510
longitude in the form of what's
called a lat long literal.

00:03:15.510 --> 00:03:18.141
We'll use this all the time
throughout the course.

00:03:18.141 --> 00:03:19.847
The zoom is just a number.

00:03:19.847 --> 00:03:22.242
The higher the number, the more detail.

00:03:22.241 --> 00:03:24.546
You can go up to level 21.

00:03:24.546 --> 00:03:29.097
All right, you've made a beautiful
dynamic map of your very own.

00:03:29.097 --> 00:03:33.700
This map is centered on the lovely
Google office in New York City.

00:03:33.699 --> 00:03:37.412
Notice that all classes live
within the google.maps namespace.

00:03:37.413 --> 00:03:42.256
We just saw an example of this when we
used the google.maps.map class to create

00:03:42.256 --> 00:03:43.133
a map object.

00:03:43.133 --> 00:03:44.907
As you learn more about the classes,

00:03:44.907 --> 00:03:47.377
you'll see this naming
convention over and over.

00:03:47.377 --> 00:03:48.419
Now you try.

