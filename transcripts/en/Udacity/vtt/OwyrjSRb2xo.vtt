WEBVTT
Kind: captions
Language: en

00:00:00.410 --> 00:00:05.030
Shrinking the two window back and clearing the console output.

00:00:05.030 --> 00:00:10.530
Since with such a narrow window, the table becomes unreadable,

00:00:10.530 --> 00:00:13.470
let's start inspecting what gets returned from each of

00:00:13.470 --> 00:00:17.640
the function calls in the D3 data binding chain.

00:00:17.640 --> 00:00:23.360
As you can see here, d3.select passing in SVGselects the SVG

00:00:23.360 --> 00:00:28.220
element on the page, which in our case is at the bottom of the window,

00:00:28.220 --> 00:00:32.800
below the image of the data binding process which I'll be talking through.

00:00:32.800 --> 00:00:36.080
And currently there's no elements contained in it.

00:00:36.080 --> 00:00:38.300
Correspondingly in the image,

00:00:38.300 --> 00:00:43.470
we have an SVG element on the page that's not bound to any data.

00:00:43.470 --> 00:00:48.560
And we have our data variable which contains all the data in worldcup.tsv.

00:00:48.560 --> 00:00:53.230
Running the next function here, the select all circle, which is a sub select,

00:00:54.230 --> 00:00:58.190
looking for circle SVG elements contained within the SVG,

00:00:59.490 --> 00:01:02.560
we can see here that actually returns an empty selection.

00:01:02.560 --> 00:01:07.300
And this should make perfect sense since we haven't added any circles,

00:01:07.300 --> 00:01:10.970
to our page, and our SVG is empty.

00:01:10.970 --> 00:01:16.050
What happens next with the call to the .data function, passing in our

00:01:16.050 --> 00:01:21.990
data JavaScript variable, representing all the rows in our world_cup.tsv,

00:01:21.990 --> 00:01:26.930
is where D3 binds the rows of our data file to the elements on the page.

00:01:26.930 --> 00:01:30.980
But what I've just said, probably doesn't make a whole lot of sense.

00:01:30.980 --> 00:01:34.310
How can we bind data to an empty selection,

00:01:34.310 --> 00:01:36.740
since there aren't any circles on the page?

00:01:36.740 --> 00:01:39.290
And even stranger, is what gets returned.

00:01:39.290 --> 00:01:42.930
Here we see we have an array of 836 elements.

00:01:42.930 --> 00:01:45.500
Which got returned from the data bind.

00:01:45.500 --> 00:01:46.750
What are those elements?

00:01:46.750 --> 00:01:48.020
Where did they come from?

00:01:48.020 --> 00:01:51.300
And where does the data reside that we've bound to it?

00:01:51.300 --> 00:01:54.250
Well, this is where things get strange and magical.

00:01:54.250 --> 00:01:57.240
I've updated diagram to reflect this process.

00:01:57.240 --> 00:02:00.985
Since there are not yet any elements on the page corresponding to

00:02:00.985 --> 00:02:05.370
either our rows of the data or circles on the page, which are bound to data.

00:02:06.510 --> 00:02:11.390
D3 essentially creates empty placeholder nodes, which you can think of

00:02:11.390 --> 00:02:17.180
something like a virtual HTML node that exists in our JavaScript scope or

00:02:17.180 --> 00:02:22.630
in the console but is not yet visible on the page, as an SVG element.

00:02:22.630 --> 00:02:25.540
And each one of these virtual placeholders,

00:02:25.540 --> 00:02:28.750
gets associated with one row in the data file.

00:02:28.750 --> 00:02:32.878
So this mysterious array that got returned is actually an array of

00:02:32.878 --> 00:02:37.169
placeholder elements, that have been associated with some data.

00:02:37.169 --> 00:02:43.247
In my graphic, I've only shown four for clarity but this essentially

00:02:43.247 --> 00:02:49.336
has all 836 rows of our data bound to 836 placeholder elements.

00:02:49.336 --> 00:02:51.458
And to prove if there aren't yet

00:02:51.458 --> 00:02:56.253
any circle elements on the page, I rerun the select statement, again,

00:02:56.253 --> 00:03:02.950
d3.select("svg").selectAll("circles"), and again, an empty selection returns.

00:03:04.050 --> 00:03:11.130
So while we have told D3 we're going to be inserting 836 of some element,

00:03:11.130 --> 00:03:15.690
associated with some data, D3 has not yet added anything to the page.

00:03:16.700 --> 00:03:21.010
Well you might be asking yourself, now that we have some data bound to

00:03:21.010 --> 00:03:25.970
some virtual or placeholder elements, how do we actually draw them on the page?

00:03:27.030 --> 00:03:30.885
Well, this is where the mysterious .enter selection comes into play.

00:03:30.885 --> 00:03:37.110
.enter corresponds to a D3 selection of all the virtual nodes,

00:03:37.110 --> 00:03:42.350
or placeholders, bound to some data, which aren't yet on the page.

00:03:42.350 --> 00:03:46.600
In our case, since there isn't anything already on the page,

00:03:46.600 --> 00:03:51.470
this enter selection simply corresponds to every placeholder bound to

00:03:51.470 --> 00:03:53.460
every row of our data.

00:03:53.460 --> 00:03:57.340
And if we inspect what's contained in the enter selection, we get

00:03:57.340 --> 00:04:02.250
returned something even more interesting than what gets returned from .data.

00:04:02.250 --> 00:04:05.020
Here we see we have an array of 836 elements,

00:04:05.020 --> 00:04:10.810
but instead of corresponding to these mysterious placeholders,

00:04:10.810 --> 00:04:15.190
the enter selection corresponds to actual JavaScript objects,

00:04:15.190 --> 00:04:20.430
which contain a data field, which represents a single row of our data file.

