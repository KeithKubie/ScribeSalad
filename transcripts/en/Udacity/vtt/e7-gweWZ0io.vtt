WEBVTT
Kind: captions
Language: en

00:00:00.200 --> 00:00:01.890
So we need to figure out something different. There's no

00:00:01.890 --> 00:00:05.747
sensible base case that gives us a good recursive definition.

00:00:05.747 --> 00:00:08.630
What we're do, going to do instead is what's called a

00:00:08.630 --> 00:00:12.550
relaxation algorithm. And the basic idea is pretty simple. We're

00:00:12.550 --> 00:00:15.670
going to start with a guess and then we're going to have

00:00:15.670 --> 00:00:19.270
some loop where we keep going. We'll just say, while

00:00:19.270 --> 00:00:21.420
we're not done, we'll figure out how to decide when

00:00:21.420 --> 00:00:24.070
we're done. We're going to do something that makes a guess better.

00:00:25.270 --> 00:00:28.260
So, that's the basic idea. That we don't have a good

00:00:28.260 --> 00:00:31.260
stopping point and we don't have a clear starting point of saying

00:00:31.260 --> 00:00:34.050
Alice's popularity is one, and we're going to define everything in that.

00:00:34.050 --> 00:00:36.858
What we're going to do instead is we're going to start with a guess,

00:00:36.858 --> 00:00:40.290
and our guess could be, well, let's assume everyone's initial popularity

00:00:40.290 --> 00:00:44.270
is one. And then we're going to keep refining the guess. We're going to

00:00:44.270 --> 00:00:47.740
have some process that updates the guess based on what we've learned.

00:00:47.740 --> 00:00:50.130
And each time we do this, we're going to get better and better.

00:00:51.130 --> 00:00:53.195
And at some point we're going to stop and we're

00:00:53.195 --> 00:00:56.380
going to say well that's the result we want. So let's

00:00:56.380 --> 00:00:58.390
think about how to do that for popularity scores.

00:00:58.390 --> 00:01:02.590
So, instead of just having one input to popularity now,

00:01:02.590 --> 00:01:04.750
there's going to be two. It's going to take the

00:01:04.750 --> 00:01:08.470
time step, that's the number of times we've tried to

00:01:08.470 --> 00:01:12.482
guess. And it's going to take the person, and it's

00:01:12.482 --> 00:01:16.310
still going to output a score. And now we can define

00:01:16.310 --> 00:01:18.270
this in a way that we do have a starting

00:01:18.270 --> 00:01:21.870
point, which is the equivalent to having a stopping point in

00:01:21.870 --> 00:01:26.020
a recursive definition. We'll define what the value is at

00:01:26.020 --> 00:01:30.245
step zero. For any person, we'll say that the score is

00:01:30.245 --> 00:01:33.240
1. And it didn't work to have a base case,

00:01:33.240 --> 00:01:35.460
in terms of the person, because there's no clear ordering of

00:01:35.460 --> 00:01:38.050
the people. We had a graph, we had lots of different

00:01:38.050 --> 00:01:41.490
friendship connections, there was no clear starting point. We're going to add

00:01:41.490 --> 00:01:43.820
an extra parameter which is our, our time step, and

00:01:43.820 --> 00:01:46.000
that's going to be our base case. And if we think

00:01:46.000 --> 00:01:47.860
of our time step as our base case, it's easy

00:01:47.860 --> 00:01:51.740
to say that time step zero is our base case. And

00:01:51.740 --> 00:01:54.570
at step zero, we're going to say everyone's popularity score is

00:01:54.570 --> 00:01:58.190
one. And now we can have our update rule, which

00:01:58.190 --> 00:02:01.390
says, we can figure out the popularity at any time

00:02:01.390 --> 00:02:05.310
step t, where t is greater than 0 for any person,

00:02:06.470 --> 00:02:09.710
and we're going to define that as the sum

00:02:09.710 --> 00:02:11.936
over all their friends. So we're going to pick a

00:02:11.936 --> 00:02:16.266
friend in their set of friends. So we're

00:02:16.266 --> 00:02:20.170
going to go through each friend summing up the popularity

00:02:20.170 --> 00:02:26.145
score of the friend. But instead of at time t, we're going to use time t minus

00:02:26.145 --> 00:02:28.330
1. So that means we're looking for the

00:02:28.330 --> 00:02:32.180
popularity of the friend in the previous step and

00:02:32.180 --> 00:02:34.650
we're using that to compute the popularity of

00:02:34.650 --> 00:02:39.100
the person they're friends with in this step. So

00:02:39.100 --> 00:02:42.890
let me write out that more in pseudocode. If

00:02:42.890 --> 00:02:44.810
we think of this as the Python procedure, it's

00:02:44.810 --> 00:02:46.840
going to be something where we're taking in two

00:02:46.840 --> 00:02:51.900
imports now, the time and the person. And now

00:02:51.900 --> 00:02:53.770
we have the base case, if the time is

00:02:53.770 --> 00:02:57.450
0, we're going to return the score is always 1.

00:02:57.450 --> 00:03:02.420
If the time is not 0, well, we can compute the score similar to how we did

00:03:02.420 --> 00:03:04.990
before. We're going to have the score at 0, we're

00:03:04.990 --> 00:03:08.500
going to sum over the friends. We're summing over the

00:03:08.500 --> 00:03:13.020
friends, updating the score, by adding the friends' popularity

00:03:13.020 --> 00:03:16.880
score at the previous step. And when we're done,

00:03:16.880 --> 00:03:19.770
the value of score is the result. So now

00:03:19.770 --> 00:03:22.640
we have our new definition. We have it written

00:03:22.640 --> 00:03:25.030
in mathematical notation at the top, and in the

00:03:25.030 --> 00:03:27.440
Python code here. So the question is, is this a

00:03:27.440 --> 00:03:30.120
good recursive definition? And I don't mean to ask whether

00:03:30.120 --> 00:03:32.410
it's a good definition of popularity, let's hope it's not.

00:03:33.620 --> 00:03:36.150
What I mean to ask is, for all possible inputs,

00:03:36.150 --> 00:03:38.070
so all values we can pass in as t and

00:03:38.070 --> 00:03:41.610
p, does the way we've defined popularity give us a

00:03:41.610 --> 00:03:47.640
result? So here the possible choices. So, yes, it's only

00:03:47.640 --> 00:03:50.950
good if people can't be friends with themself. It's good

00:03:50.950 --> 00:03:53.850
only if everyone has at least one friend. Hopefully, everyone

00:03:53.850 --> 00:03:57.010
does. But it's only a good definition if that's the

00:03:57.010 --> 00:04:01.420
case. Or only if everyone is more popular than Alice.

