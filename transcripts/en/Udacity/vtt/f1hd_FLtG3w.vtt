WEBVTT
Kind: captions
Language: en

00:00:00.930 --> 00:00:05.370
So here I'd like to start making some observations about what we kind of

00:00:05.370 --> 00:00:06.040
just did.

00:00:06.040 --> 00:00:10.077
We did it in very kind of a specific step by step way.

00:00:10.077 --> 00:00:12.804
But we want to come up with some general methods to help us

00:00:12.804 --> 00:00:14.580
understand how to do this.

00:00:14.580 --> 00:00:18.580
Well simply put, what we did was we took a small image.

00:00:18.580 --> 00:00:23.310
So, a small three by three, and we rubbed it over a bigger image.

00:00:24.320 --> 00:00:27.910
And when we rubbed it, basically we did some calculations at each and

00:00:27.910 --> 00:00:32.030
every center point relating to this point and that point.

00:00:32.030 --> 00:00:34.760
And we put that in a newer data structure.

00:00:34.760 --> 00:00:39.110
The new value, which basically took the information from this three by three,

00:00:39.110 --> 00:00:42.210
plus this three by three and replacing this value.

00:00:42.210 --> 00:00:45.200
So let's see what we can come up with as a general approach to looking at that.

00:00:45.200 --> 00:00:48.280
Just to help us with terminology, and I used that term again in a previous

00:00:48.280 --> 00:00:54.280
slides too, is imagine this to be a function h ij, just a small matrix.

00:00:54.280 --> 00:00:58.160
And we'll refer to this as a kernel image.

00:00:58.160 --> 00:01:01.300
This kernel image in this instance is a three by three.

00:01:01.300 --> 00:01:04.849
And the area around each original pixel is with the one that we actually,

00:01:04.849 --> 00:01:06.860
the neighborhood is around one pixel.

00:01:06.860 --> 00:01:10.100
In this one, my neighborhood is of the size one.

00:01:11.460 --> 00:01:14.190
So my k is equal to 1.

00:01:14.190 --> 00:01:18.690
Again, k equal to 1 allows me to create a three by three neighborhood.

00:01:19.870 --> 00:01:22.220
I can imagine if the k was equal to 2,

00:01:22.220 --> 00:01:27.760
we would be able to generate a five by five neighborhood, and so on.

00:01:27.760 --> 00:01:29.940
again, the size of the neighborhood is important because,

00:01:29.940 --> 00:01:32.870
again, you want to use that to generalize our observation and

00:01:32.870 --> 00:01:37.010
how we go about creating these types of filters.

00:01:37.010 --> 00:01:40.300
And now basically looking at that equation what you can say is well,

00:01:40.300 --> 00:01:43.840
the window size will therefor be 2k plus 1.

00:01:43.840 --> 00:01:51.650
k was 1, 2k plus 1 equals 3.

00:01:52.800 --> 00:01:56.656
If k is equal to 2,

00:01:56.656 --> 00:02:02.840
2k plus 1, is equal to 5.

00:02:02.840 --> 00:02:03.360
And so on.

00:02:03.360 --> 00:02:07.810
So this is an important, parameter that we need to remember is,

00:02:07.810 --> 00:02:09.840
we need to always remember the neighborhood size, and

00:02:09.840 --> 00:02:12.410
this will allow us to start figuring out the size of a kernel.

00:02:12.410 --> 00:02:15.570
In this case, our kernel is 3 by 3.

00:02:15.570 --> 00:02:19.570
Again, we will see that many of times these kernels will be rather big.

00:02:19.570 --> 00:02:23.300
Or again, depending on how big a neighborhood we want to smooth over we will

00:02:23.300 --> 00:02:25.920
employ different types of sizes of these images.

00:02:25.920 --> 00:02:28.960
Important to note that in doing this kind stuff we are basically again taking

00:02:28.960 --> 00:02:32.644
a three by three kernel, applying it to a three by three window here, and

00:02:32.644 --> 00:02:34.520
then move one after the other.

00:02:34.520 --> 00:02:37.280
And that's what I mean by rubbing an image over,

00:02:37.280 --> 00:02:38.680
rubbing a kernel over a bigger image.

