WEBVTT
Kind: captions
Language: en

00:00:07.210 --> 00:00:07.820
CHET HAASE: Hello.

00:00:07.820 --> 00:00:09.880
I am not Romain Guy.

00:00:09.880 --> 00:00:12.870
ROMAIN GUY: And I am
not Chet Haase.

00:00:12.870 --> 00:00:14.796
That's a good thing, actually.

00:00:14.796 --> 00:00:16.280
CHET HAASE: That's
what I think.

00:00:16.280 --> 00:00:19.350
Welcome to "A Moving
Experience."

00:00:19.350 --> 00:00:22.870
ROMAIN GUY: So we're going
to talk about animations.

00:00:22.870 --> 00:00:24.790
CHET HAASE: Why are we going
to talk about animation?

00:00:24.790 --> 00:00:26.140
So one of the questions
that people--

00:00:26.140 --> 00:00:26.780
ROMAIN GUY: I know why.

00:00:26.780 --> 00:00:29.250
That's because you cannot shut
up about animations.

00:00:29.250 --> 00:00:30.480
CHET HAASE: I'm going to talk
about them because I--

00:00:30.480 --> 00:00:30.930
ROMAIN GUY: You should
see him at work.

00:00:30.930 --> 00:00:31.980
He's always like, animations,
animations, animations,

00:00:31.980 --> 00:00:33.360
animations, animations,
animations.

00:00:33.360 --> 00:00:33.580
OK.

00:00:33.580 --> 00:00:35.930
Now you can talk.

00:00:35.930 --> 00:00:36.230
CHET HAASE: OK.

00:00:36.230 --> 00:00:39.610
So I'm going to talk about them
because I enjoy talking

00:00:39.610 --> 00:00:40.160
about them.

00:00:40.160 --> 00:00:41.370
You are going to listen
to them--

00:00:41.370 --> 00:00:42.880
Actually, I don't know why
you're listening them.

00:00:42.880 --> 00:00:46.950
You should listen about
animations because I believe

00:00:46.950 --> 00:00:50.330
they help create more compelling
applications.

00:00:50.330 --> 00:00:52.600
They make applications maybe
more fun, but that's not the

00:00:52.600 --> 00:00:55.310
real reason why it's actually
worth spending effort on.

00:00:55.310 --> 00:00:56.700
ROMAIN GUY: They also
justify your salary.

00:00:56.700 --> 00:00:58.190
CHET HAASE: They do
justify my salary.

00:00:58.190 --> 00:01:00.360
So I wish you would write more
and more and require more

00:01:00.360 --> 00:01:03.310
feature requests in the Android
platform, specifically

00:01:03.310 --> 00:01:04.090
around animations.

00:01:04.090 --> 00:01:05.440
Thank you.

00:01:05.440 --> 00:01:08.110
One of the most important
reasons is to engage your

00:01:08.110 --> 00:01:11.130
user, to actually connect them
to the application, make them

00:01:11.130 --> 00:01:14.080
feel good about it, give them
a dynamic experience instead

00:01:14.080 --> 00:01:17.090
of just some random
poorly-written page that they

00:01:17.090 --> 00:01:19.180
click through in some
form that they hate.

00:01:19.180 --> 00:01:21.860
Give them an experience from
your application that lets

00:01:21.860 --> 00:01:24.350
them remember your application,
the experience

00:01:24.350 --> 00:01:27.890
itself, and the precious quality
time that they spent

00:01:27.890 --> 00:01:29.600
with it on their device.

00:01:29.600 --> 00:01:33.930
In addition, it can help them
understand what can be a very

00:01:33.930 --> 00:01:36.560
confusing user interface
experience, especially for

00:01:36.560 --> 00:01:38.360
people like my mother.

00:01:38.360 --> 00:01:42.450
If you can use animations to
help the user understand that

00:01:42.450 --> 00:01:45.020
transitions and changes that are
actually happening in the

00:01:45.020 --> 00:01:48.130
application and on the screen,
then it can be a very helpful

00:01:48.130 --> 00:01:50.800
way to not only engage them and
keep them connected but

00:01:50.800 --> 00:01:54.055
help them understand the flow of
your application in the way

00:01:54.055 --> 00:01:57.610
that you want them to, alert
them in a way that they can

00:01:57.610 --> 00:01:59.550
see on the screen of information
that they need to

00:01:59.550 --> 00:02:02.380
know about, help them transition
from state to state

00:02:02.380 --> 00:02:04.540
so they understand where they
came from and how they got

00:02:04.540 --> 00:02:06.870
there so that they can stay
connected to the different

00:02:06.870 --> 00:02:10.190
states in the application as
you're going through them.

00:02:10.190 --> 00:02:11.760
ROMAIN GUY: So first we're
going to get started, and

00:02:11.760 --> 00:02:15.840
we're going to talk about four
principles that are behind all

00:02:15.840 --> 00:02:17.120
good animations.

00:02:17.120 --> 00:02:19.780
The first one is keep your
animations short.

00:02:19.780 --> 00:02:22.670
There is nothing more annoying
than when use an app and you

00:02:22.670 --> 00:02:24.320
push a button, maybe
by mistake, and

00:02:24.320 --> 00:02:26.180
then something happens.

00:02:26.180 --> 00:02:28.870
We are a very impatient being.

00:02:28.870 --> 00:02:32.630
Something that feels like it
takes 10 years on screen

00:02:32.630 --> 00:02:35.410
actually might last for half
a second or just a second.

00:02:35.410 --> 00:02:37.590
But when you didn't want that
animation, it's going to be

00:02:37.590 --> 00:02:38.410
very painful.

00:02:38.410 --> 00:02:41.220
Actually, it happened to us
in our previous session.

00:02:41.220 --> 00:02:43.870
I was a little too impatient
because I had a slow animation

00:02:43.870 --> 00:02:44.550
on one of the slides.

00:02:44.550 --> 00:02:47.760
And I hit the arrow again, and
that skipped it to another

00:02:47.760 --> 00:02:50.100
animation right after that.

00:02:50.100 --> 00:02:53.460
So it can be very painful for
the users and can be very

00:02:53.460 --> 00:02:55.260
painful for you as a developer,
because you'll have

00:02:55.260 --> 00:02:57.770
to see that animation over
and over and over again.

00:02:57.770 --> 00:03:01.310
I like to justify our principles
in that way.

00:03:01.310 --> 00:03:04.140
Developers, that's going
to be painful for you.

00:03:04.140 --> 00:03:05.180
Make it good for you,
it's going to be

00:03:05.180 --> 00:03:05.950
good for the users.

00:03:05.950 --> 00:03:06.420
CHET HAASE: Good.

00:03:06.420 --> 00:03:06.890
Good.

00:03:06.890 --> 00:03:09.140
ROMAIN GUY: To give you
an idea when you use a

00:03:09.140 --> 00:03:11.520
ViewPropertyAnimator on Android,
we have a default

00:03:11.520 --> 00:03:13.915
duration that, I think, is set
as, what, 300 milliseconds?

00:03:13.915 --> 00:03:15.220
CHET HAASE: Yeah.

00:03:15.220 --> 00:03:17.220
ROMAIN GUY: So 300 milliseconds
is a good

00:03:17.220 --> 00:03:20.740
direction for a lot of
animations on a mobile device.

00:03:20.740 --> 00:03:22.320
It's pretty short.

00:03:22.320 --> 00:03:25.420
It's not too short that we won't
have enough frames to

00:03:25.420 --> 00:03:28.170
see the entirety of
the animation.

00:03:28.170 --> 00:03:30.900
And for most animation, it's not
going to annoy the user.

00:03:30.900 --> 00:03:33.560
CHET HAASE: So one of the
dynamics here, actually with a

00:03:33.560 --> 00:03:35.910
lot of this stuff, we don't
have an answer.

00:03:35.910 --> 00:03:38.460
We can't say 300 milliseconds
is the duration that you

00:03:38.460 --> 00:03:40.100
should use for all animations,
because that

00:03:40.100 --> 00:03:41.960
answer would be stupid.

00:03:41.960 --> 00:03:43.680
Because it really depends
on the situation.

00:03:43.680 --> 00:03:46.620
If you're moving a view a very
short distance, I would expect

00:03:46.620 --> 00:03:48.230
that animation to
be far shorter.

00:03:48.230 --> 00:03:50.480
If it's something that you
expect to be almost an atomic

00:03:50.480 --> 00:03:53.540
action, I would expect it
to be almost immediate.

00:03:53.540 --> 00:03:56.230
But if you're moving a view, and
it's a large complex view,

00:03:56.230 --> 00:03:58.500
and you're moving it from one
side of the screen on a large

00:03:58.500 --> 00:04:00.520
tablet device down to the other
side of the screen,

00:04:00.520 --> 00:04:02.700
bottom corner, well, maybe that

00:04:02.700 --> 00:04:04.010
duration should be longer.

00:04:04.010 --> 00:04:07.360
Make the duration appropriate
to the animation that's

00:04:07.360 --> 00:04:09.230
actually happening
and no longer.

00:04:09.230 --> 00:04:11.850
A really good example of this
is the window animation that

00:04:11.850 --> 00:04:13.190
we use on the platform.

00:04:13.190 --> 00:04:15.620
When you switch activities or
when you launch activities, we

00:04:15.620 --> 00:04:17.250
have a scaling fading
animation.

00:04:17.250 --> 00:04:18.800
Well, there's a lot of
movement in that.

00:04:18.800 --> 00:04:21.399
If you're scaling out from zero
and you're fading in from

00:04:21.399 --> 00:04:23.860
zero to all the way opaque,
you need to make it long

00:04:23.860 --> 00:04:25.905
enough that it actually makes
sense and it's not stuttery

00:04:25.905 --> 00:04:27.840
and discontinuous, because
it's trying to

00:04:27.840 --> 00:04:29.160
cover a lot of distance.

00:04:29.160 --> 00:04:31.830
But if we did a really long
duration, you would end up

00:04:31.830 --> 00:04:34.280
waiting a long time for
that smooth animation.

00:04:34.280 --> 00:04:35.130
It would be really annoying.

00:04:35.130 --> 00:04:38.330
So what we do instead is we
start a really long animation

00:04:38.330 --> 00:04:39.290
most of the way through.

00:04:39.290 --> 00:04:42.910
I think it's like 80% of the way
opaque and 80% of the way

00:04:42.910 --> 00:04:43.910
scaled out.

00:04:43.910 --> 00:04:45.140
And then we finish
the animation.

00:04:45.140 --> 00:04:48.040
So you get the implication of
a very great distance being

00:04:48.040 --> 00:04:49.660
covered, but we do it in
small enough duration

00:04:49.660 --> 00:04:50.920
that it's not annoying.

00:04:50.920 --> 00:04:51.830
ROMAIN GUY: And what's very
interesting is that the

00:04:51.830 --> 00:04:55.790
duration you choose will also
depend very much on what kind

00:04:55.790 --> 00:04:57.050
of animation you're running.

00:04:57.050 --> 00:04:59.615
The best example of that is if
you move something on screen.

00:04:59.615 --> 00:05:04.940
If it's a small button, you can
use a very long duration,

00:05:04.940 --> 00:05:06.440
and it will still feel
pretty good.

00:05:06.440 --> 00:05:08.370
But if you use something that's
really big and really

00:05:08.370 --> 00:05:11.230
large and you have the same
direction as with that small

00:05:11.230 --> 00:05:14.710
item, that small button, it will
feel longer because the

00:05:14.710 --> 00:05:16.400
object will feel heavier.

00:05:16.400 --> 00:05:17.670
You can try that yourself.

00:05:17.670 --> 00:05:20.290
Write an application and try to
move a really big rectangle

00:05:20.290 --> 00:05:22.570
versus a small rectangle with
the same duration and the same

00:05:22.570 --> 00:05:25.510
distance, in the feel will be
very different as a user.

00:05:25.510 --> 00:05:28.270
CHET HAASE: That's actually why
Galileo did the experiment

00:05:28.270 --> 00:05:30.420
with the stone and the feather,
because he was

00:05:30.420 --> 00:05:31.670
testing animation durations.

00:05:35.550 --> 00:05:37.720
Another important principle--
we'll try to bring up a lot of

00:05:37.720 --> 00:05:41.630
classical science lessons
for you in this talk--

00:05:41.630 --> 00:05:45.000
is to make your animations
smooth.

00:05:45.000 --> 00:05:48.100
If you have a really complicated
animation that

00:05:48.100 --> 00:05:50.630
does a lot of really cool stuff
and then it stutters in

00:05:50.630 --> 00:05:53.160
the middle, your user
will hate you.

00:05:53.160 --> 00:05:55.010
What you want is a
smooth experience

00:05:55.010 --> 00:05:56.400
from start to finish.

00:05:56.400 --> 00:05:58.710
Now sometimes it's not possible
for you to get all

00:05:58.710 --> 00:06:02.140
the information that you need
to create the animation

00:06:02.140 --> 00:06:04.520
without doing something like a
layout that might be a little

00:06:04.520 --> 00:06:05.220
too expensive.

00:06:05.220 --> 00:06:05.500
OK.

00:06:05.500 --> 00:06:06.770
Two tips about that.

00:06:06.770 --> 00:06:08.880
Don't run layout during
the animation.

00:06:08.880 --> 00:06:11.850
We'll bring this up later just
to drive the point home.

00:06:11.850 --> 00:06:14.740
And the other is go ahead and
run that layout or do that

00:06:14.740 --> 00:06:16.720
expensive operation at
the beginning before

00:06:16.720 --> 00:06:17.760
the animation starts.

00:06:17.760 --> 00:06:19.980
When it's done, get the
information you need and then

00:06:19.980 --> 00:06:21.100
start the animation.

00:06:21.100 --> 00:06:23.500
And do whatever you can to keep
the animation running

00:06:23.500 --> 00:06:26.620
smooth and performant for the
duration of the animation so

00:06:26.620 --> 00:06:28.770
that that experience is
smooth to the user.

00:06:28.770 --> 00:06:31.300
Otherwise, your animation's
going to get super annoying.

00:06:31.300 --> 00:06:32.640
They're going to notice
the animation.

00:06:32.640 --> 00:06:34.460
They're going to notice
it because it's bad.

00:06:34.460 --> 00:06:36.080
ROMAIN GUY: So performance--

00:06:36.080 --> 00:06:38.680
we've talked about performance
in many other talks before--

00:06:38.680 --> 00:06:41.920
is very, very important to
having smooth animations.

00:06:41.920 --> 00:06:43.720
But it's not just about
performance.

00:06:43.720 --> 00:06:47.150
If you change animations, the
way you're going to change the

00:06:47.150 --> 00:06:49.340
animations, like the
acceleration curves you're

00:06:49.340 --> 00:06:51.490
going to use, will also be very
important to keep the

00:06:51.490 --> 00:06:53.030
animations smooth.

00:06:53.030 --> 00:06:55.340
And I think we have an example
later on where we have a

00:06:55.340 --> 00:06:56.560
bouncing button.

00:06:56.560 --> 00:06:59.090
And if you don't do the bouncing
right, it will feel

00:06:59.090 --> 00:07:00.620
like the animations
is stuttering.

00:07:00.620 --> 00:07:01.620
It's not a performance issue.

00:07:01.620 --> 00:07:02.860
It's just a timing issue.

00:07:02.860 --> 00:07:05.510
So be also very careful
with how you tie

00:07:05.510 --> 00:07:06.760
your animations together.

00:07:09.120 --> 00:07:10.830
CHET HAASE: Here's another one
with a beautiful organic

00:07:10.830 --> 00:07:11.540
picture behind it.

00:07:11.540 --> 00:07:13.420
Make them feel natural.

00:07:13.420 --> 00:07:15.960
Make the user not even notice
the animation because it just

00:07:15.960 --> 00:07:17.190
feels like it needs
to be there.

00:07:17.190 --> 00:07:19.900
This is the interaction that
makes sense for the

00:07:19.900 --> 00:07:23.160
application, not just a whizzy
animation that you thought

00:07:23.160 --> 00:07:24.890
looked cool at the time.

00:07:24.890 --> 00:07:28.350
The idea is to allow the user
to interact with your

00:07:28.350 --> 00:07:30.720
application in a way that they
enjoy and which feels very

00:07:30.720 --> 00:07:33.870
organic and natural to them, not
which just feels cool to

00:07:33.870 --> 00:07:35.645
the developer that happened to
write the whizzy animation.

00:07:38.600 --> 00:07:41.370
And finally, you should
make your

00:07:41.370 --> 00:07:45.010
applications not arbitrary.

00:07:45.010 --> 00:07:48.210
One of my favorite examples, it
was some release of Linux?

00:07:48.210 --> 00:07:48.970
ROMAIN GUY: Yeah.

00:07:48.970 --> 00:07:52.090
On Linux Desktops, there was
something called Compiz or--

00:07:52.090 --> 00:07:53.930
There are window managers that
when you close the window it's

00:07:53.930 --> 00:07:54.490
really cool.

00:07:54.490 --> 00:07:56.910
The window catches on
fire and disappears

00:07:56.910 --> 00:07:58.370
in a burst of smoke.

00:07:58.370 --> 00:07:58.610
Yeah.

00:07:58.610 --> 00:08:00.770
Don't do that.

00:08:00.770 --> 00:08:02.720
We could show you how to write
the code to do that.

00:08:02.720 --> 00:08:04.690
Oh, also there was this
awesome application,

00:08:04.690 --> 00:08:05.360
[? MyQuest 10. ?]

00:08:05.360 --> 00:08:08.720
When you burn a CD, the
window would smoke.

00:08:08.720 --> 00:08:11.560
There would smoke coming out
of the window like you're

00:08:11.560 --> 00:08:12.410
burning the CD.

00:08:12.410 --> 00:08:14.110
It's really cool.

00:08:14.110 --> 00:08:15.310
Don't do it.

00:08:15.310 --> 00:08:17.180
CHET HAASE: It's really
fun the first

00:08:17.180 --> 00:08:18.260
time and after that--

00:08:18.260 --> 00:08:20.005
ROMAIN GUY: There's one
situation where you can do it

00:08:20.005 --> 00:08:22.870
is when you're on stage at the
conference and you show cool

00:08:22.870 --> 00:08:25.910
stuff to people and then you
tell them to not do that.

00:08:25.910 --> 00:08:27.670
CHET HAASE: We'll try to
do some of that today.

00:08:27.670 --> 00:08:29.460
Don't do what we're doing.

00:08:29.460 --> 00:08:29.870
Yes.

00:08:29.870 --> 00:08:31.030
So make them make sense.

00:08:31.030 --> 00:08:32.340
Give them a purpose.

00:08:32.340 --> 00:08:34.789
Show the user what's going on
in the UI, indicate some

00:08:34.789 --> 00:08:37.539
important action to them, help
them during transitions in the

00:08:37.539 --> 00:08:38.400
experience, whatever.

00:08:38.400 --> 00:08:40.409
There's a reason for the
animation to be there.

00:08:40.409 --> 00:08:42.100
Make that be the reason
and not because you

00:08:42.100 --> 00:08:44.110
thought it was cool.

00:08:44.110 --> 00:08:47.730
So let's see a couple
of examples.

00:08:47.730 --> 00:08:50.160
Actually, someone was just in
office hours a few minutes ago

00:08:50.160 --> 00:08:52.230
asking, hey, I have a
quick question for

00:08:52.230 --> 00:08:53.040
you if you have time.

00:08:53.040 --> 00:08:55.690
What is the correct way to
do a ListView animation?

00:08:55.690 --> 00:08:56.440
ROMAIN GUY: Here's the answer.

00:08:56.440 --> 00:08:58.770
CHET HAASE: So we wrote some
quick code, and we developed

00:08:58.770 --> 00:08:59.680
some slides.

00:08:59.680 --> 00:09:02.820
So we thought we would show you
what we think would be the

00:09:02.820 --> 00:09:04.800
correct way to do this.

00:09:04.800 --> 00:09:07.700
A correct way do this.

00:09:07.700 --> 00:09:13.170
The example here is we're going
to swipe an item out.

00:09:13.170 --> 00:09:15.420
And as we swipe it,
it's doing a fade.

00:09:15.420 --> 00:09:18.270
And you can see behind it we've
got a little backdrop

00:09:18.270 --> 00:09:20.170
there, and we've got some
drop shadow there.

00:09:20.170 --> 00:09:23.630
And then when we let go, it
moves the rest of the way off.

00:09:23.630 --> 00:09:24.790
Or if you don't move
it enough, it

00:09:24.790 --> 00:09:26.220
snaps back into place.

00:09:26.220 --> 00:09:28.060
So we've got the animation
of the swipe.

00:09:28.060 --> 00:09:30.370
And then after the item is gone,
if we swiped it out,

00:09:30.370 --> 00:09:32.620
then the rest of the items
animate into place.

00:09:32.620 --> 00:09:34.950
Fairly common for people
to want to do this.

00:09:34.950 --> 00:09:38.550
Fairly common for people to not
understand how to do this.

00:09:38.550 --> 00:09:39.950
So the interesting
part might be--

00:09:39.950 --> 00:09:42.520
ROMAIN GUY: How many of you
have tried to do this?

00:09:42.520 --> 00:09:45.790
How many of you have
failed to do it?

00:09:45.790 --> 00:09:46.350
CHET HAASE: Come on.

00:09:46.350 --> 00:09:47.830
Don't be shy.

00:09:47.830 --> 00:09:48.900
ROMAIN GUY: Sorry about that.

00:09:48.900 --> 00:09:51.600
It's mostly our fault.

00:09:51.600 --> 00:09:51.900
CHET HAASE: OK.

00:09:51.900 --> 00:09:54.720
ROMAIN GUY: So here's
the answer.

00:09:54.720 --> 00:09:55.930
CHET HAASE: Let's take
a look at the code.

00:09:55.930 --> 00:09:57.270
This might get a little bogged
down, because, of course,

00:09:57.270 --> 00:09:58.210
there's a bunch of
code in there.

00:09:58.210 --> 00:10:00.810
We have a callback of code on
the slide calling out the

00:10:00.810 --> 00:10:01.450
important parts.

00:10:01.450 --> 00:10:04.110
ROMAIN GUY: Is the form big
enough for everybody?

00:10:04.110 --> 00:10:05.120
People in the back?

00:10:05.120 --> 00:10:05.900
Or they don't care.

00:10:05.900 --> 00:10:06.175
They're asleep.

00:10:06.175 --> 00:10:06.450
OK.

00:10:06.450 --> 00:10:07.160
CHET HAASE: They are asleep.

00:10:07.160 --> 00:10:09.000
ROMAIN GUY: One guy said yes.

00:10:09.000 --> 00:10:10.520
CHET HAASE: All right.

00:10:10.520 --> 00:10:11.280
All right.

00:10:11.280 --> 00:10:13.132
So here we are.

00:10:13.132 --> 00:10:16.090
We are in ListView Removal
Animation.

00:10:16.090 --> 00:10:17.120
Actually, I want to
take a look at the

00:10:17.120 --> 00:10:18.000
ArrayAdapter first.

00:10:18.000 --> 00:10:19.950
We create a stable ArrayAdapter,
because I don't

00:10:19.950 --> 00:10:21.710
want my items to move
out from under me.

00:10:21.710 --> 00:10:23.190
I don't want the content
to change.

00:10:23.190 --> 00:10:27.710
So we will subclass ArrayAdapter
and return back

00:10:27.710 --> 00:10:29.760
static item IDs.

00:10:29.760 --> 00:10:30.450
That's important.

00:10:30.450 --> 00:10:33.770
The other thing that we do in
this very simple subclass is

00:10:33.770 --> 00:10:37.250
we set a listener, because I
want to track the motion on

00:10:37.250 --> 00:10:39.660
each of the individual items as
we're swiping out, because

00:10:39.660 --> 00:10:41.980
that's the indication that
we want to remove them.

00:10:41.980 --> 00:10:44.440
ROMAIN GUY: The stable IDs is
a way for ListView to keep

00:10:44.440 --> 00:10:48.605
track of what data belongs
to what row on screen.

00:10:48.605 --> 00:10:50.230
It works without it.

00:10:50.230 --> 00:10:52.370
But for this purpose, it's going
to be a lot easier with

00:10:52.370 --> 00:10:53.420
stable IDs.

00:10:53.420 --> 00:10:54.730
CHET HAASE: The
BackgroundContainer is where

00:10:54.730 --> 00:10:56.900
we manage the graphics that
are going to draw the

00:10:56.900 --> 00:10:59.580
background behind the item
that's being swept away as

00:10:59.580 --> 00:11:01.630
well as the drop shadow in front
of that background to

00:11:01.630 --> 00:11:04.280
sort of give the sense of depth,
the difference between

00:11:04.280 --> 00:11:06.140
the layer that you're
swiping from and the

00:11:06.140 --> 00:11:07.030
background behind it.

00:11:07.030 --> 00:11:09.820
Now I could've, and did in the
first version of this, simply

00:11:09.820 --> 00:11:11.450
have a background for
the ListView itself.

00:11:11.450 --> 00:11:14.080
And then I ran some of the
overdraw tools that we talked

00:11:14.080 --> 00:11:15.840
about in a previous
session today.

00:11:15.840 --> 00:11:17.730
And I could see that, in fact,
we're drawing the background

00:11:17.730 --> 00:11:19.310
and then we're drawing
all the list items.

00:11:19.310 --> 00:11:20.920
That's a complete waste
of rendering time.

00:11:20.920 --> 00:11:23.020
All I really wanted was a
background behind the item

00:11:23.020 --> 00:11:24.510
that was going away.

00:11:24.510 --> 00:11:26.910
So I did that.

00:11:26.910 --> 00:11:30.050
So we have some code in here,
some initialization code that

00:11:30.050 --> 00:11:31.410
creates two drop shadows.

00:11:31.410 --> 00:11:34.670
This could also just be a single
9-patch that draws both

00:11:34.670 --> 00:11:38.040
the upper and the lower drop
shadow in that space.

00:11:38.040 --> 00:11:40.600
When we're told to show the
background, that trips a flag,

00:11:40.600 --> 00:11:41.320
an we say, OK.

00:11:41.320 --> 00:11:42.880
We're going to be drawing
stuff here.

00:11:42.880 --> 00:11:44.850
Call our drawing routine.

00:11:44.850 --> 00:11:48.160
And then we set up the area in
the container where we're

00:11:48.160 --> 00:11:50.030
going to draw this
information.

00:11:50.030 --> 00:11:52.870
On size change, we set
information about the shadows.

00:11:52.870 --> 00:11:54.400
And then we override onDraw.

00:11:54.400 --> 00:11:57.760
And in onDraw, we translate the
canvas where we need to.

00:11:57.760 --> 00:11:59.040
We draw the background color.

00:11:59.040 --> 00:11:59.980
We draw the drop shadows.

00:11:59.980 --> 00:12:00.960
We're done.

00:12:00.960 --> 00:12:04.170
But all the animation logic is
in ListView Removal Animation,

00:12:04.170 --> 00:12:04.900
which is here.

00:12:04.900 --> 00:12:06.820
I should point out too, I'm
going to be doing some

00:12:06.820 --> 00:12:08.050
DevBytes episodes on these.

00:12:08.050 --> 00:12:10.180
And we'll upload all of the
projects for the code that

00:12:10.180 --> 00:12:11.350
you're going to see
here today.

00:12:11.350 --> 00:12:12.920
So I'm going really quickly
through the code.

00:12:12.920 --> 00:12:14.960
The code will eventually be
available so that you can

00:12:14.960 --> 00:12:19.550
through it with better
quality time later.

00:12:19.550 --> 00:12:19.770
OK.

00:12:19.770 --> 00:12:20.890
So we have a bunch of choices.

00:12:20.890 --> 00:12:21.740
We add them to the list.

00:12:21.740 --> 00:12:24.320
We create our stable array
adapter, and we set the

00:12:24.320 --> 00:12:25.100
adapter on the list.

00:12:25.100 --> 00:12:27.290
All straightforward stuff
for ListView stuff.

00:12:27.290 --> 00:12:30.600
onTouchListener, what we want
to do is track the action as

00:12:30.600 --> 00:12:33.240
we're swiping, because we want
a little bit of not animated

00:12:33.240 --> 00:12:35.420
behavior but different
drawing behavior.

00:12:35.420 --> 00:12:38.850
We want to turn it translucent
as it swipes back and forth.

00:12:38.850 --> 00:12:42.790
But most importantly, when we
lift our finger up, we want to

00:12:42.790 --> 00:12:44.790
determine whether it's going to
snap back into place if we

00:12:44.790 --> 00:12:46.960
didn't drag it far enough or
whether it's going to snap off

00:12:46.960 --> 00:12:47.750
the screen.

00:12:47.750 --> 00:12:51.550
So we calculate how far I
went before we let go.

00:12:51.550 --> 00:12:54.420
And then we either snap it
back or snap it farther.

00:12:54.420 --> 00:12:57.430
If we're snapping it off the
screen, then we're going to

00:12:57.430 --> 00:12:58.940
animate the rest of
the way here.

00:12:58.940 --> 00:13:01.850
So we're going to get a
ViewPropertyAnimator, and

00:13:01.850 --> 00:13:04.440
we're going to animate the
alpha to all the way

00:13:04.440 --> 00:13:07.330
transparent, and we're going to
animate translation to x.

00:13:07.330 --> 00:13:09.940
So slide it all the way off.

00:13:09.940 --> 00:13:12.460
And then when that animation
is done, so with an end

00:13:12.460 --> 00:13:16.120
action, we're going to restore
some values here.

00:13:16.120 --> 00:13:18.290
And then we're going to
animateOtherViews.

00:13:18.290 --> 00:13:20.700
And that's where all
the magic happens.

00:13:20.700 --> 00:13:22.580
So on to our next example.

00:13:22.580 --> 00:13:23.700
No.

00:13:23.700 --> 00:13:25.960
OK. animateOtherViews.

00:13:25.960 --> 00:13:27.940
There's a couple of techniques
here which you're going to see

00:13:27.940 --> 00:13:29.980
over and over again in these
examples, as well as some

00:13:29.980 --> 00:13:32.140
other ones, where we
get information

00:13:32.140 --> 00:13:34.700
before a layout happens.

00:13:34.700 --> 00:13:36.620
And then we set a predraw
listener.

00:13:36.620 --> 00:13:38.910
Then we get the information
from the views after the

00:13:38.910 --> 00:13:40.140
layout occurred.

00:13:40.140 --> 00:13:43.390
So we've already removed our
item from the adapter, which

00:13:43.390 --> 00:13:45.380
means the layout is going to
run, and it's going to

00:13:45.380 --> 00:13:49.560
reposition all the other views
in the layout according to the

00:13:49.560 --> 00:13:51.600
change that just happened
in the ListView, right?

00:13:51.600 --> 00:13:52.950
Standard ListView stuff.

00:13:52.950 --> 00:13:55.690
What we want to do before
that layout happens--

00:13:55.690 --> 00:13:56.680
this is synchronous--

00:13:56.680 --> 00:13:59.600
we remove from the adapter, and
then immediately we go in

00:13:59.600 --> 00:14:01.030
and we do two things.

00:14:01.030 --> 00:14:04.310
We get information about where
each of those views is.

00:14:04.310 --> 00:14:06.780
So where are you in the
current container?

00:14:06.780 --> 00:14:10.060
And then we're going to store
that in a map here, and we'll

00:14:10.060 --> 00:14:11.060
retrieve it later.

00:14:11.060 --> 00:14:13.210
And we're also going to use a
property that's new in Jelly

00:14:13.210 --> 00:14:14.470
Bean called transient state.

00:14:14.470 --> 00:14:17.000
We're going to say
setHasTransientState true.

00:14:17.000 --> 00:14:20.310
This is an important indicator
to ListView to not mess with

00:14:20.310 --> 00:14:23.230
the view's content until I
set it to false again.

00:14:23.230 --> 00:14:25.860
This is a ref counted
flag that we note.

00:14:25.860 --> 00:14:29.090
And next time we go in to do
a recycling pass, we don't

00:14:29.090 --> 00:14:31.630
recycle the views that have
this flag set on them.

00:14:31.630 --> 00:14:33.800
And the reason this is important
for animating items

00:14:33.800 --> 00:14:36.160
in ListViews is it means that
we're not going to change the

00:14:36.160 --> 00:14:39.260
content in views that you may
be potentially moving around

00:14:39.260 --> 00:14:39.710
on the screen.

00:14:39.710 --> 00:14:41.840
If you don't set that
flag, who knows

00:14:41.840 --> 00:14:42.880
what's going to happen?

00:14:42.880 --> 00:14:45.800
In particular, what's going to
happen immediately, it's going

00:14:45.800 --> 00:14:46.790
to run layout.

00:14:46.790 --> 00:14:48.270
It's going to recycle
everything.

00:14:48.270 --> 00:14:50.060
And it's going to repopulate
it in whatever

00:14:50.060 --> 00:14:52.390
order it deemed necessary.

00:14:52.390 --> 00:14:55.000
And that's probably not the
effect you're looking for.

00:14:55.000 --> 00:14:57.830
So setHasTransientState true to
all of the views that are

00:14:57.830 --> 00:14:59.360
currently in the ListView.

00:14:59.360 --> 00:15:02.060
We set an OnPreDraw listener.

00:15:02.060 --> 00:15:04.360
Layout is magically going to
run, because we're going to

00:15:04.360 --> 00:15:07.410
return back to the UI thread.

00:15:07.410 --> 00:15:10.760
And then before we draw the
results of that layout pass,

00:15:10.760 --> 00:15:13.610
we're going to get a call to
our OnPreDraw function.

00:15:13.610 --> 00:15:16.780
In here, we're going to remove
the PreDraw listener.

00:15:16.780 --> 00:15:18.320
We don't want to
listen anymore.

00:15:18.320 --> 00:15:19.960
And then we're going to go
in and find out where

00:15:19.960 --> 00:15:21.390
everything is now.

00:15:21.390 --> 00:15:22.740
This is where it used to be.

00:15:22.740 --> 00:15:24.500
This is the cached value
that we had before.

00:15:24.500 --> 00:15:26.520
This is where each
child is now.

00:15:26.520 --> 00:15:28.110
We're going to find out
the difference.

00:15:28.110 --> 00:15:29.330
We're going to calculate
the delta.

00:15:29.330 --> 00:15:32.080
We're going to set that as the
translation Y property.

00:15:32.080 --> 00:15:33.850
So basically, we knew
it came from here.

00:15:33.850 --> 00:15:35.270
We know it's now there.

00:15:35.270 --> 00:15:37.950
We're going to back translate it
to where it was before, and

00:15:37.950 --> 00:15:39.610
we're going to animate zero.

00:15:39.610 --> 00:15:41.590
So all we're doing is
backtranslating and then

00:15:41.590 --> 00:15:44.290
animating to zero into the real
position that that view

00:15:44.290 --> 00:15:46.550
occupies now.

00:15:46.550 --> 00:15:49.050
The only other thing that we
need to do here is we need to

00:15:49.050 --> 00:15:51.150
animate the new view that's
going to be coming in from the

00:15:51.150 --> 00:15:53.450
bottom, or coming down
from on top.

00:15:53.450 --> 00:15:55.460
We know where that
new view is now.

00:15:55.460 --> 00:15:57.940
We just need to calculate where
we want it to appear

00:15:57.940 --> 00:16:01.370
from, and then we slide that in
along with everything else.

00:16:01.370 --> 00:16:03.720
When we're all done, we set
the hasTransientState to

00:16:03.720 --> 00:16:05.080
false, and we're finished.

00:16:05.080 --> 00:16:06.850
One other note about
TransientState,

00:16:06.850 --> 00:16:09.220
ViewPropertyAnimator actually
sets this property

00:16:09.220 --> 00:16:10.250
automatically.

00:16:10.250 --> 00:16:13.160
So during a
ViewPropertyAnimation, you

00:16:13.160 --> 00:16:13.980
views are safe.

00:16:13.980 --> 00:16:15.980
They're not going to be recycled
out from under you.

00:16:15.980 --> 00:16:18.830
The reason that we had to set it
manually, even in addition

00:16:18.830 --> 00:16:21.290
to the ViewPropertyAnimator is
we didn't want to the views to

00:16:21.290 --> 00:16:24.400
change during the layout pass,
which happens prior to the

00:16:24.400 --> 00:16:27.330
animation that we run.

00:16:27.330 --> 00:16:28.950
And that's it.

00:16:28.950 --> 00:16:29.580
ROMAIN GUY: Was that clear?

00:16:29.580 --> 00:16:32.260
You got all that?

00:16:32.260 --> 00:16:35.640
We will give you the code.

00:16:35.640 --> 00:16:36.490
CHET HAASE: I think
I've pretty much

00:16:36.490 --> 00:16:38.640
walked through this.

00:16:38.640 --> 00:16:40.940
ROMAIN GUY: Yeah.

00:16:40.940 --> 00:16:41.385
CHET HAASE: There you go.

00:16:41.385 --> 00:16:42.040
It's like that.

00:16:42.040 --> 00:16:42.740
ROMAIN GUY: New demo.

00:16:42.740 --> 00:16:43.280
CHET HAASE: Easy.

00:16:43.280 --> 00:16:43.820
All right.

00:16:43.820 --> 00:16:45.530
Activity animations.

00:16:45.530 --> 00:16:47.980
So here's another one that
has become common.

00:16:47.980 --> 00:16:52.070
We have two things in the window
in activity changes

00:16:52.070 --> 00:16:53.040
that are available to you.

00:16:53.040 --> 00:16:57.230
One is the standard activity
animations that occur already.

00:16:57.230 --> 00:17:01.080
You get fade-y, scale-y stuff
as activities launch.

00:17:01.080 --> 00:17:05.329
And they scale and
fade into view.

00:17:05.329 --> 00:17:05.930
That's fine.

00:17:05.930 --> 00:17:08.000
And that's actually great
for an activity launch.

00:17:08.000 --> 00:17:09.730
It's a nice consistent approach

00:17:09.730 --> 00:17:11.119
to running any activity.

00:17:11.119 --> 00:17:13.099
But let's say you're running a
subactivity and you want to do

00:17:13.099 --> 00:17:14.430
something customized.

00:17:14.430 --> 00:17:17.900
We also offer the ability to
customize window animations.

00:17:17.900 --> 00:17:20.000
But it's very constrained
animations.

00:17:20.000 --> 00:17:23.280
We added to that recently so
you could do a scale and a

00:17:23.280 --> 00:17:27.200
cross-fade from a thumbnail
in Jelly Bean 4.2.

00:17:27.200 --> 00:17:27.770
ROMAIN GUY: Yes.

00:17:27.770 --> 00:17:28.460
4.1.

00:17:28.460 --> 00:17:29.870
CHET HAASE: 4.1.

00:17:29.870 --> 00:17:31.010
And that's great.

00:17:31.010 --> 00:17:33.390
But you still can't really
customize that.

00:17:33.390 --> 00:17:36.340
You can do exactly that
thumbnail scale, and you can't

00:17:36.340 --> 00:17:38.720
scale back to the thumbnail,
for instance.

00:17:38.720 --> 00:17:41.550
So there's sort of hard
limitations to what you can do

00:17:41.550 --> 00:17:42.940
with window animations.

00:17:42.940 --> 00:17:44.880
So the recommendation is--

00:17:44.880 --> 00:17:45.700
ROMAIN GUY: We have
a trick for you.

00:17:45.700 --> 00:17:46.790
So this is an animation.

00:17:46.790 --> 00:17:48.070
And actually, Hugo Barra--

00:17:48.070 --> 00:17:50.210
who you've seen at the keynote,
sitting right here--

00:17:50.210 --> 00:17:51.830
told us it would be really
cool if we could do it.

00:17:51.830 --> 00:17:54.100
And why is it not possible
to do it on Android?

00:17:54.100 --> 00:17:56.240
And we're like, well,
of course we can.

00:17:56.240 --> 00:17:57.575
So we did it.

00:17:57.575 --> 00:17:59.270
Actually, Chet did it.

00:17:59.270 --> 00:18:00.690
So I'm going to tap
on a picture.

00:18:00.690 --> 00:18:03.900
And we'll animate from that
picture into a new activity.

00:18:03.900 --> 00:18:06.660
So this is not just a view
that we put on top of the

00:18:06.660 --> 00:18:07.510
first activity.

00:18:07.510 --> 00:18:10.075
It's actually a new activity
that's showing details.

00:18:10.075 --> 00:18:13.280
And we can go back and forth
between the two.

00:18:13.280 --> 00:18:15.250
And let me slow down the
animation for you so you see

00:18:15.250 --> 00:18:16.540
exactly what's happening.

00:18:16.540 --> 00:18:17.980
There's a drop shadow.

00:18:17.980 --> 00:18:20.010
We scale up the image, we
fade the background, and

00:18:20.010 --> 00:18:21.270
we bring the text.

00:18:21.270 --> 00:18:22.870
And it's actually pretty
easy to implement.

00:18:22.870 --> 00:18:24.830
The trick is the new activity
is actually

00:18:24.830 --> 00:18:26.410
a transparent activity.

00:18:26.410 --> 00:18:29.280
And all the animations are view
animations inside that

00:18:29.280 --> 00:18:30.230
transparent activity.

00:18:30.230 --> 00:18:31.480
So we're going to take
a look at the code.

00:18:34.540 --> 00:18:36.220
And it's going to be
a little easier.

00:18:36.220 --> 00:18:37.720
Let's get rid of
all that stuff.

00:18:42.089 --> 00:18:42.870
There we go.

00:18:42.870 --> 00:18:44.010
So we have two activities.

00:18:44.010 --> 00:18:45.710
We have Activity Animations.

00:18:45.710 --> 00:18:47.570
That's the main activity
of the application.

00:18:47.570 --> 00:18:49.540
And we have Picture
Details Activity.

00:18:49.540 --> 00:18:51.420
And there's another interesting
class called

00:18:51.420 --> 00:18:52.320
Shadow Layout.

00:18:52.320 --> 00:18:54.100
We'll take a look at that
a little later.

00:18:54.100 --> 00:18:56.040
So the main activity
doesn't do much.

00:18:56.040 --> 00:18:57.970
It sets a grid.

00:18:57.970 --> 00:19:01.140
We use a color matrix filter
to make all the images be

00:19:01.140 --> 00:19:04.050
greyscale, because we also
animate from greyscale to

00:19:04.050 --> 00:19:06.270
color when we scale
up the image.

00:19:06.270 --> 00:19:07.700
Then we just set
up our adaptor.

00:19:07.700 --> 00:19:08.993
So that's not very
interesting.

00:19:08.993 --> 00:19:12.970
The interesting part is what
happens when you click on one

00:19:12.970 --> 00:19:14.360
of the thumbnails.

00:19:14.360 --> 00:19:19.400
So what we do is we're going
to start the next activity,

00:19:19.400 --> 00:19:22.640
and we're going to add a lot of
extras to the intent that

00:19:22.640 --> 00:19:24.360
we use to start the activity.

00:19:24.360 --> 00:19:27.650
So what we want to send to the
new activity is the position

00:19:27.650 --> 00:19:29.460
on screen of the thumbnail.

00:19:29.460 --> 00:19:31.530
So to do this on View, there's
a method called

00:19:31.530 --> 00:19:33.170
getLocationOnScreen.

00:19:33.170 --> 00:19:35.200
You give it an array, and we're
going to fill the array

00:19:35.200 --> 00:19:37.670
with the x and y position
of that view in screen

00:19:37.670 --> 00:19:38.350
coordinates.

00:19:38.350 --> 00:19:39.960
So it's not in parent
coordinates.

00:19:39.960 --> 00:19:41.610
It's different from getLeft
and getTop.

00:19:41.610 --> 00:19:43.100
It's not in window
coordinates.

00:19:43.100 --> 00:19:44.580
There's another method
for that.

00:19:44.580 --> 00:19:46.180
It's in screen coordinates.

00:19:46.180 --> 00:19:49.240
We create our new intent.

00:19:49.240 --> 00:19:51.790
We remembered your
orientation.

00:19:51.790 --> 00:19:53.390
We'll talk about that later.

00:19:53.390 --> 00:19:54.740
And then we store the
width and the

00:19:54.740 --> 00:19:55.845
height of the thumbnail.

00:19:55.845 --> 00:19:58.230
We store the position
on screen.

00:19:58.230 --> 00:20:01.410
We store the resource idea of
the thumbnail, like what big

00:20:01.410 --> 00:20:05.550
image should we be showing, as
well as the description.

00:20:05.550 --> 00:20:08.080
And finally, at the end,
we call this method

00:20:08.080 --> 00:20:10.040
overridePendingTransitions.

00:20:10.040 --> 00:20:13.190
And by pressing 00, we tell the
Window Manager that we do

00:20:13.190 --> 00:20:14.850
not want a new window
animation.

00:20:14.850 --> 00:20:18.230
We're going to take care of
everything, and we're going to

00:20:18.230 --> 00:20:20.630
do our view animations.

00:20:20.630 --> 00:20:24.490
So then we launch the Picture
Details activity.

00:20:24.490 --> 00:20:28.030
An in onCreate, we just extract
all the data we need

00:20:28.030 --> 00:20:31.920
from the bundle in the intent.

00:20:31.920 --> 00:20:34.410
And here's what happens when
we run the animation.

00:20:34.410 --> 00:20:36.710
So we checked the
savedInstanceState.

00:20:36.710 --> 00:20:39.020
So if we have a
savedInstanceState, that means

00:20:39.020 --> 00:20:40.320
there was a configuration
change.

00:20:40.320 --> 00:20:42.400
And most of the time, it's
going to be a rotation.

00:20:42.400 --> 00:20:45.130
In that case, we do not want
to run the animation again.

00:20:45.130 --> 00:20:47.960
So we only run the animation
when the first time we bring

00:20:47.960 --> 00:20:48.600
up the activity.

00:20:48.600 --> 00:20:51.240
So the savedInstanceState
is null.

00:20:51.240 --> 00:20:53.010
So we set the viewTreeObserver.

00:20:53.010 --> 00:20:54.730
And the viewTreeObserver--

00:20:54.730 --> 00:20:55.320
sorry--

00:20:55.320 --> 00:20:56.740
will use an [INAUDIBLE]

00:20:56.740 --> 00:20:59.430
listener.

00:20:59.430 --> 00:21:02.730
Because we're on the onCreate
method, that callback will be

00:21:02.730 --> 00:21:06.150
invoked before we draw the
first frame but after the

00:21:06.150 --> 00:21:09.700
layout, so after all the items
are positioned in the window.

00:21:09.700 --> 00:21:11.480
So they have their widths, they
have their height, and

00:21:11.480 --> 00:21:13.570
they have their position.

00:21:13.570 --> 00:21:15.710
First thing we do is we remove
the listener because we don't

00:21:15.710 --> 00:21:17.600
need it anymore.

00:21:17.600 --> 00:21:20.530
And then we had our image with
the big version of the image.

00:21:20.530 --> 00:21:21.820
It's not the thumbnail
anymore.

00:21:21.820 --> 00:21:22.980
We're in the new activity.

00:21:22.980 --> 00:21:25.180
And we do what we've done in
the previous activity.

00:21:25.180 --> 00:21:28.610
We look at the location on
screen of the image.

00:21:28.610 --> 00:21:32.690
So we know where we came from
the previous activity in the

00:21:32.690 --> 00:21:35.660
intent, and we know where
we want to go.

00:21:35.660 --> 00:21:37.710
We also compute the
scale factor.

00:21:37.710 --> 00:21:41.010
So what is the difference in
size between the big version

00:21:41.010 --> 00:21:42.950
of the image and the
small thumbnail?

00:21:42.950 --> 00:21:45.100
And finally, we start
our animation.

00:21:45.100 --> 00:21:47.460
The animation itself
is very simple.

00:21:47.460 --> 00:21:51.845
We have our image that's been
laid out at its final size, so

00:21:51.845 --> 00:21:54.630
it's taking most of the
space on screen.

00:21:54.630 --> 00:21:58.140
We change its position and its
scale so that it matches

00:21:58.140 --> 00:22:00.630
exactly the position
of the thumbnail in

00:22:00.630 --> 00:22:01.430
the previous activity.

00:22:01.430 --> 00:22:03.840
And remember, because we're a
transparent activity, it will

00:22:03.840 --> 00:22:07.340
look like we're in the
same activity.

00:22:07.340 --> 00:22:08.620
The text is a special case.

00:22:08.620 --> 00:22:10.170
We make it invisible.

00:22:10.170 --> 00:22:12.490
And then, all we do is we
animate the ImageView, and we

00:22:12.490 --> 00:22:16.280
tell it to scale back to its
normal size, so 100% scale x

00:22:16.280 --> 00:22:19.070
and scale y and 0 for
the translation.

00:22:19.070 --> 00:22:22.160
At the end of the animation, we
just animate the text, but

00:22:22.160 --> 00:22:23.640
just for the nice effect.

00:22:23.640 --> 00:22:25.340
We have secondary animations.

00:22:25.340 --> 00:22:27.020
And we're going to talk
about secondary

00:22:27.020 --> 00:22:28.840
animations a little later.

00:22:28.840 --> 00:22:31.400
But we fade in the
black background.

00:22:31.400 --> 00:22:36.080
We turn the image from greyscale
to colors, and we're

00:22:36.080 --> 00:22:37.170
going to show you
how to do this.

00:22:37.170 --> 00:22:40.860
As you can see here, we're
modifying a property called

00:22:40.860 --> 00:22:43.140
Saturation on our
own activity.

00:22:43.140 --> 00:22:45.240
So we've created a
custom property.

00:22:45.240 --> 00:22:46.440
It's not a feature of view.

00:22:46.440 --> 00:22:47.690
It's not a future
of the UI token.

00:22:47.690 --> 00:22:49.870
It's something we've
built ourselves.

00:22:49.870 --> 00:22:51.830
And you're going to see, if
you've never done that, it's

00:22:51.830 --> 00:22:54.600
extremely simple to create
your own properties.

00:22:54.600 --> 00:22:57.400
And we'll also animate the
shadow of the picture.

00:22:57.400 --> 00:22:59.750
We have this property
called shadowDepth

00:22:59.750 --> 00:23:03.170
on our shadow layout.

00:23:03.170 --> 00:23:06.450
And here is our custom
property.

00:23:06.450 --> 00:23:08.900
So we need a setSaturation
method We also have a

00:23:08.900 --> 00:23:10.310
getSaturation method.

00:23:10.310 --> 00:23:12.890
And all we do is we change the
situation in our color matrix,

00:23:12.890 --> 00:23:15.530
we create a new filter, and we
set that filter on the image.

00:23:15.530 --> 00:23:18.010
And you're automatically going
to get that nice greyscale to

00:23:18.010 --> 00:23:19.610
color effect.

00:23:19.610 --> 00:23:21.750
One interesting trick
here is that we

00:23:21.750 --> 00:23:24.690
override the finish method.

00:23:24.690 --> 00:23:25.640
CHET HAASE: Specifically
for the

00:23:25.640 --> 00:23:26.890
overridePendingTransitions.

00:23:26.890 --> 00:23:29.700
Because, like we did on the way
in, we don't want to run

00:23:29.700 --> 00:23:32.370
window animations and have them
get in the way and be

00:23:32.370 --> 00:23:34.630
parallel to the things that
we're trying to do in our

00:23:34.630 --> 00:23:36.390
customized activity
animations.

00:23:36.390 --> 00:23:38.280
So as soon as we're actually
finishing, then we

00:23:38.280 --> 00:23:40.540
overridePendingTransitions,
window animations get out of

00:23:40.540 --> 00:23:42.370
the way, and we customize
the return

00:23:42.370 --> 00:23:43.620
back to the main activity.

00:23:43.620 --> 00:23:48.300
ROMAIN GUY: And we also trap
the Back key events.

00:23:48.300 --> 00:23:50.140
So when the Back key is pressed,
by default we're

00:23:50.140 --> 00:23:51.340
going to finish the activity.

00:23:51.340 --> 00:23:53.300
That's the default behavior
of the Toolkit.

00:23:53.300 --> 00:23:54.990
Here, we're prevented
from doing that.

00:23:54.990 --> 00:23:57.380
What we want is we first want
to run our animations.

00:23:57.380 --> 00:24:00.010
So we call runExitAnimation,
which is very similar to the

00:24:00.010 --> 00:24:02.890
animation we saw for the
enter animation.

00:24:02.890 --> 00:24:05.260
And at the end of the exit
animation, we're going to

00:24:05.260 --> 00:24:06.720
execute this runable, and
it's just going to

00:24:06.720 --> 00:24:09.500
call the finish method.

00:24:09.500 --> 00:24:11.200
Do you want to show
the shadow layout?

00:24:11.200 --> 00:24:11.460
CHET HAASE: Sure.

00:24:11.460 --> 00:24:14.100
So shadow layout, is it's a
very simple view group.

00:24:14.100 --> 00:24:17.360
I wanted the ability for a
container to put shadows

00:24:17.360 --> 00:24:19.360
behind all of its children.

00:24:19.360 --> 00:24:21.990
It has one property, which is
the depth, which gets animated

00:24:21.990 --> 00:24:25.360
over time as that thumbnail
scales into the nice colorized

00:24:25.360 --> 00:24:28.400
large version of the picture.

00:24:28.400 --> 00:24:29.860
And as that animates,
it's going to

00:24:29.860 --> 00:24:31.710
animate its depth property.

00:24:31.710 --> 00:24:33.960
The depth property is then used
to determine two things

00:24:33.960 --> 00:24:35.760
about the shadow,
the opacity--

00:24:35.760 --> 00:24:37.650
so we're going to be
animating alpha--

00:24:37.650 --> 00:24:38.860
as well as the offsets.

00:24:38.860 --> 00:24:41.080
So we're basically going to draw
a shadow that gets larger

00:24:41.080 --> 00:24:44.320
and more translucent as the
image comes into place in its

00:24:44.320 --> 00:24:46.170
large version.

00:24:46.170 --> 00:24:49.740
We're going to set up the
shadow itself here.

00:24:49.740 --> 00:24:51.670
Some rendering details
about creating a

00:24:51.670 --> 00:24:54.430
nice blurred shadow.

00:24:54.430 --> 00:24:54.780
ROMAIN GUY: Yeah.

00:24:54.780 --> 00:24:56.330
We don't have much time
to talk about it.

00:24:56.330 --> 00:24:56.420
CHET HAASE: OK.

00:24:56.420 --> 00:24:58.420
ROMAIN GUY: But if you're
interested in how to create a

00:24:58.420 --> 00:25:00.810
blurry shadow without
using a 9-patch--

00:25:00.810 --> 00:25:01.970
You could be using a 9-patch.

00:25:01.970 --> 00:25:03.590
That's a great way of doing
it, if you want to do it

00:25:03.590 --> 00:25:04.840
programmatically.

00:25:04.840 --> 00:25:06.620
You can refer to that
piece of code here.

00:25:06.620 --> 00:25:07.810
CHET HAASE: We set the
shadow depth here.

00:25:07.810 --> 00:25:09.550
This is called by
the animation.

00:25:09.550 --> 00:25:12.110
Then we invalidate when the
depth is change so that we'll

00:25:12.110 --> 00:25:13.450
actually redraw this
container.

00:25:13.450 --> 00:25:16.970
And then we override on draw,
which processes through all

00:25:16.970 --> 00:25:18.370
the children of this
container.

00:25:18.370 --> 00:25:20.700
In this case, there's just one,
and it draws the shadow

00:25:20.700 --> 00:25:21.950
appropriately.

00:25:24.900 --> 00:25:26.850
All right.

00:25:26.850 --> 00:25:29.040
This is callouts to the
various details there.

00:25:29.040 --> 00:25:30.890
I think we went through
enough details on how

00:25:30.890 --> 00:25:31.640
to make that work.

00:25:31.640 --> 00:25:34.430
Again, the slides and the code
will be posted later for the

00:25:34.430 --> 00:25:35.440
real details.

00:25:35.440 --> 00:25:37.540
We also wanted to talk about
some cartoon animation

00:25:37.540 --> 00:25:37.970
techniques.

00:25:37.970 --> 00:25:40.540
It turns out that there were
some people back in the '20s

00:25:40.540 --> 00:25:43.190
and '30s and Disney who thought
really hard about how

00:25:43.190 --> 00:25:45.590
to make engaging animations.

00:25:45.590 --> 00:25:47.870
And they had a couple of very
important constraints that

00:25:47.870 --> 00:25:50.380
were important to them and are
still important to us, which

00:25:50.380 --> 00:25:54.190
is there's a very little
amount of time and a

00:25:54.190 --> 00:25:58.100
potentially complex scene on the
screen which the user has

00:25:58.100 --> 00:25:59.350
to understand.

00:26:01.950 --> 00:26:05.270
They developed these 12
principles of animation.

00:26:05.270 --> 00:26:08.970
And a lot of them focus around
focusing the user's attention

00:26:08.970 --> 00:26:12.460
on exactly what they need them
to understand, simplifying

00:26:12.460 --> 00:26:14.950
that action as much as possible,
and indicating and

00:26:14.950 --> 00:26:17.860
exaggerating around that action
so that they can get

00:26:17.860 --> 00:26:20.370
all the information to quickly
understand the important

00:26:20.370 --> 00:26:22.650
information about exactly
how Mickey was

00:26:22.650 --> 00:26:24.320
running on the screen.

00:26:24.320 --> 00:26:25.990
ROMAIN GUY: So we're not going
to talk about all the

00:26:25.990 --> 00:26:28.820
principles of cartoon
animations, because they don't

00:26:28.820 --> 00:26:30.600
all apply to UIs.

00:26:30.600 --> 00:26:32.590
And there's a lot of overlap
between the different

00:26:32.590 --> 00:26:33.440
techniques.

00:26:33.440 --> 00:26:35.570
But we're going to show
you a few of them.

00:26:35.570 --> 00:26:37.940
And we'll have demos showing you
how to implement those in

00:26:37.940 --> 00:26:39.390
your applications.

00:26:39.390 --> 00:26:41.670
So the first one is squash
and stretch.

00:26:41.670 --> 00:26:44.970
And remember, one of the
principles of good animations

00:26:44.970 --> 00:26:47.720
is that your animation
should feel natural.

00:26:47.720 --> 00:26:51.950
And this is one way of making
your animations feel natural.

00:26:51.950 --> 00:26:54.520
When you move something, instead
of just moving the

00:26:54.520 --> 00:26:57.250
object, you can try to elongate
the object to squash

00:26:57.250 --> 00:27:00.160
it and stretch it, pretty much,
to give it this more

00:27:00.160 --> 00:27:00.740
natural feel.

00:27:00.740 --> 00:27:03.260
This is not quite what
happens in real life.

00:27:03.260 --> 00:27:06.760
But I'm sure you've all seen
cartoons where someone kicks

00:27:06.760 --> 00:27:09.690
in a soccer bowl and the
soccer ball becomes an

00:27:09.690 --> 00:27:12.570
ellipse, pretty much.

00:27:12.570 --> 00:27:17.380
And this is something that we
can do very easily in our UIs.

00:27:17.380 --> 00:27:19.110
CHET HAASE: Another important
principle is timing.

00:27:19.110 --> 00:27:21.200
And this refers to a couple of
different elements of timing.

00:27:21.200 --> 00:27:23.730
There's a non-linear timing,
which is important for

00:27:23.730 --> 00:27:25.250
conveying natural motion.

00:27:25.250 --> 00:27:29.070
People and objects in our real
world don't move linearly.

00:27:29.070 --> 00:27:31.490
You don't start at the speed
that you're going to be

00:27:31.490 --> 00:27:34.240
traveling the entire time
linearly and then stop

00:27:34.240 --> 00:27:34.720
immediately.

00:27:34.720 --> 00:27:37.980
Instead, you accelerate into a
pace and decelerate out of it,

00:27:37.980 --> 00:27:41.510
in general, unless
you hit a wall.

00:27:41.510 --> 00:27:43.120
ROMAIN GUY: Or if you're
really weird.

00:27:43.120 --> 00:27:46.310
CHET HAASE: Unless you're
really weird or a robot.

00:27:46.310 --> 00:27:48.700
The other important element of
timing is to choose timing

00:27:48.700 --> 00:27:50.210
that is appropriate
to the action.

00:27:50.210 --> 00:27:54.230
We talked about short durations
before, the

00:27:54.230 --> 00:27:56.670
animations being as short
as they need to be.

00:27:56.670 --> 00:28:00.640
But there's other elements
of duration as well.

00:28:00.640 --> 00:28:02.380
As Steve Martin said,
the important

00:28:02.380 --> 00:28:05.250
thing here is timing.

00:28:05.250 --> 00:28:08.940
So let's take a look at a
quick demo of squash and

00:28:08.940 --> 00:28:11.470
stretch and a little
bit of code.

00:28:14.820 --> 00:28:18.070
So the idea here is you click
the button, and we're going to

00:28:18.070 --> 00:28:20.350
bounce it off the bottom
of the screen.

00:28:20.350 --> 00:28:24.260
We can slow that down
so you can see

00:28:24.260 --> 00:28:25.870
what's actually happening.

00:28:25.870 --> 00:28:26.990
So there's a couple of things.

00:28:26.990 --> 00:28:30.965
The down animation is a little
more subtle than you might

00:28:30.965 --> 00:28:32.060
have suspected at first.

00:28:32.060 --> 00:28:33.960
You can see it's actually
elongating a little

00:28:33.960 --> 00:28:34.680
bit on the way down.

00:28:34.680 --> 00:28:37.100
It's very subtle, but you kind
of pick up that change.

00:28:37.100 --> 00:28:39.260
And it gives the indication that
this button is actually

00:28:39.260 --> 00:28:42.170
kind of a rubbery material that
changes and is affected

00:28:42.170 --> 00:28:45.070
by gravity is also affected
by hitting the floor.

00:28:45.070 --> 00:28:47.460
Maybe not something you want
to do in your UIs.

00:28:47.460 --> 00:28:49.190
I would not recommend
it, in general.

00:28:49.190 --> 00:28:52.000
But in some situations, adding
a little bit of organic

00:28:52.000 --> 00:28:54.120
properties to an object
is appropriate.

00:28:54.120 --> 00:28:55.800
ROMAIN GUY: Actually, we'll
have an example of an

00:28:55.800 --> 00:28:59.110
application on the Play Store,
a pretty serious application

00:28:59.110 --> 00:29:02.380
that uses some of these
animation techniques.

00:29:06.560 --> 00:29:09.230
CHET HAASE: So actually, the
code for this, it's basically

00:29:09.230 --> 00:29:10.440
the same details
over and over.

00:29:10.440 --> 00:29:12.590
This is just a sequenced
animation

00:29:12.590 --> 00:29:13.810
where we run it down.

00:29:13.810 --> 00:29:17.310
We run a reversing animation,
and squashes and stretches

00:29:17.310 --> 00:29:19.270
out, squashes and stretches
back, and then

00:29:19.270 --> 00:29:20.020
it runs back up.

00:29:20.020 --> 00:29:22.580
And this is just pure
application of

00:29:22.580 --> 00:29:27.310
PropertyValuesHolder creating an
ObjectAnimator object that

00:29:27.310 --> 00:29:29.850
can animate multiple properties
at the same time.

00:29:29.850 --> 00:29:32.500
We set specific interpolaters
to get an accelerated feel

00:29:32.500 --> 00:29:36.710
down, to get a deceleration
feel as it squashes and

00:29:36.710 --> 00:29:38.520
stretches, and then the
reverse behavior on

00:29:38.520 --> 00:29:39.940
the way back up.

00:29:39.940 --> 00:29:41.000
We stretch.

00:29:41.000 --> 00:29:42.360
It's just the same thing
over and over again.

00:29:42.360 --> 00:29:44.440
PropertyValuesHolder,
ObjectAnimator,

00:29:44.440 --> 00:29:45.750
they're your friend.

00:29:45.750 --> 00:29:49.550
We repeat the animation on the
squash and the stretch, and we

00:29:49.550 --> 00:29:51.720
set the duration very carefully
to sort of give the

00:29:51.720 --> 00:29:54.450
right feeling between all these
different dynamics here.

00:29:54.450 --> 00:29:56.660
And then we create an animator
set to run these different

00:29:56.660 --> 00:29:58.660
animations sequentially.

00:29:58.660 --> 00:30:00.950
Pretty straightforward.

00:30:00.950 --> 00:30:01.700
Moving on.

00:30:01.700 --> 00:30:05.250
Next principle, anticipation.

00:30:08.240 --> 00:30:13.320
This was important for the
animators to indicate what was

00:30:13.320 --> 00:30:14.970
about to happen.

00:30:14.970 --> 00:30:16.790
ROMAIN GUY: For instance, if I
want to punch Chet, I will

00:30:16.790 --> 00:30:18.010
start by doing this.

00:30:18.010 --> 00:30:20.520
CHET HAASE: And I might
start by doing this.

00:30:20.520 --> 00:30:24.250
If Mickey is about to run, he
wouldn't just start running.

00:30:24.250 --> 00:30:25.860
Instead, he would rear
back and run.

00:30:25.860 --> 00:30:28.570
And this was an important
indicator to the viewer that

00:30:28.570 --> 00:30:30.480
something was about to happen,
a running action

00:30:30.480 --> 00:30:31.290
was about to happen.

00:30:31.290 --> 00:30:33.940
So when it actually happened,
they would be clued into that

00:30:33.940 --> 00:30:37.730
exactly going on, instead of he
runs, he's off the screen

00:30:37.730 --> 00:30:40.210
immediately, they blinked in
that instant, and they don't

00:30:40.210 --> 00:30:41.420
know where Mickey went.

00:30:41.420 --> 00:30:44.640
So anticipation can be used to
help the user understand an

00:30:44.640 --> 00:30:47.040
action that is about to occur.

00:30:47.040 --> 00:30:48.720
So if we switch over
to the demo--

00:30:54.540 --> 00:30:55.680
So That's right.

00:30:55.680 --> 00:30:57.230
I was going to run this
on the next one.

00:30:57.230 --> 00:30:59.840
So we have this AnticiButton.

00:30:59.840 --> 00:31:01.090
This is a custom button.

00:31:03.780 --> 00:31:05.630
There's a couple of different
things going on here.

00:31:05.630 --> 00:31:06.820
One is the anticipation.

00:31:06.820 --> 00:31:09.490
As I click on it, it's rearing
back, indicating that it's

00:31:09.490 --> 00:31:13.640
going to do that run to the
other side of the screen.

00:31:13.640 --> 00:31:15.690
So when I release it, then
it actually moves.

00:31:15.690 --> 00:31:18.340
And then when it hits the other
side it's going to do

00:31:18.340 --> 00:31:20.660
the other principle that we're
going to talk about on the

00:31:20.660 --> 00:31:21.910
next slide.

00:31:24.710 --> 00:31:27.090
ROMAIN GUY: So this is the
source code for this demo.

00:31:27.090 --> 00:31:29.350
So before we run the animation,
we need a way to be

00:31:29.350 --> 00:31:31.130
able to do that deformation
on the button.

00:31:31.130 --> 00:31:33.190
It's actually very easy to do.

00:31:33.190 --> 00:31:35.740
We have our custom
class right here.

00:31:35.740 --> 00:31:38.520
So we extend the button class.

00:31:38.520 --> 00:31:39.380
We are a small constructor.

00:31:39.380 --> 00:31:41.150
Structure just set the
ClickListener.

00:31:41.150 --> 00:31:43.600
We also set a TouchListener,
because what we want to do is

00:31:43.600 --> 00:31:47.180
on the down event we want
to be able to start the

00:31:47.180 --> 00:31:49.670
anticipation, and on the
up event we want to

00:31:49.670 --> 00:31:51.660
run our click animation.

00:31:51.660 --> 00:31:54.880
So to do this skew here we're
going to do something that I

00:31:54.880 --> 00:31:56.600
said it was not possible
yesterday.

00:31:56.600 --> 00:31:57.810
CHET HAASE: He lied.

00:31:57.810 --> 00:31:58.000
ROMAIN GUY: No.

00:31:58.000 --> 00:32:00.140
I was misguided.

00:32:00.140 --> 00:32:01.740
I misremembered.

00:32:01.740 --> 00:32:03.330
The draw method is not final.

00:32:03.330 --> 00:32:04.600
You can override it.

00:32:04.600 --> 00:32:07.860
But if you do, make sure you
call the super.draw method.

00:32:07.860 --> 00:32:10.240
CHET HAASE: And point of fact,
it's the only way that you can

00:32:10.240 --> 00:32:12.090
do this effect on
some widgets.

00:32:12.090 --> 00:32:15.320
You can do the skew effect on
a TextView by overriding on

00:32:15.320 --> 00:32:17.170
draw, which is a safer
thing to override.

00:32:17.170 --> 00:32:20.290
But you actually need to
override draw for the button,

00:32:20.290 --> 00:32:22.840
because that's where some of the
stuff happens that you--

00:32:22.840 --> 00:32:24.000
ROMAIN GUY: For instance,
the background.

00:32:24.000 --> 00:32:24.240
CHET HAASE: Right.

00:32:24.240 --> 00:32:24.490
ROMAIN GUY: So the

00:32:24.490 --> 00:32:26.130
implementation is pretty simple.

00:32:26.130 --> 00:32:26.990
We have our canvas.

00:32:26.990 --> 00:32:28.380
We have a skew factor.

00:32:28.380 --> 00:32:30.760
That's what we're going
to animate.

00:32:30.760 --> 00:32:32.930
And we just call the
canvas.skew method.

00:32:32.930 --> 00:32:34.470
So you don't have much to do.

00:32:34.470 --> 00:32:37.590
The translation here is just so
that we can do this skew in

00:32:37.590 --> 00:32:38.970
the right place.

00:32:38.970 --> 00:32:41.150
And then we call the
super.draw method.

00:32:41.150 --> 00:32:44.722
Then, when we run the
click animation--

00:32:44.722 --> 00:32:45.070
Let's see.

00:32:45.070 --> 00:32:45.275
No.

00:32:45.275 --> 00:32:47.610
We have the anticipation
animation first.

00:32:47.610 --> 00:32:53.710
So on the down event, when you
push the button, we want to

00:32:53.710 --> 00:32:54.840
start doing the anticipation.

00:32:54.840 --> 00:32:56.800
So this is where we run
this animation.

00:32:56.800 --> 00:32:58.530
So we just skew to the left.

00:32:58.530 --> 00:33:00.110
It's a normal animation.

00:33:00.110 --> 00:33:02.970
And if you let go of the button
and the animation is

00:33:02.970 --> 00:33:06.410
not over, we're going to finish
this animation when I

00:33:06.410 --> 00:33:12.000
cancel it and go back
to the origin.

00:33:12.000 --> 00:33:15.470
And then when we let go, we're
going to create the move

00:33:15.470 --> 00:33:18.120
animation, so we're going to
have it translate the button.

00:33:18.120 --> 00:33:20.400
And at the same time,
we want to do the

00:33:20.400 --> 00:33:21.940
overshoot at the end.

00:33:21.940 --> 00:33:24.150
So when we reach the end of the
animation, we're going to

00:33:24.150 --> 00:33:27.160
skew to the left and skew to
the right back and forth.

00:33:27.160 --> 00:33:30.120
And the easiest way to do it is
to use something called the

00:33:30.120 --> 00:33:31.920
overshoot interpolater.

00:33:31.920 --> 00:33:34.400
So if you look at the
interpolation curves, a linear

00:33:34.400 --> 00:33:36.140
curve is just a straight line.

00:33:36.140 --> 00:33:38.790
We also have the accelerate
and decelerate curves.

00:33:38.790 --> 00:33:42.200
They look like S's or like an
F. And the overshoot looks

00:33:42.200 --> 00:33:44.260
like, basically, a bounce.

00:33:44.260 --> 00:33:46.910
So this wobble effect, there's
nothing for you to do.

00:33:46.910 --> 00:33:48.700
All you do is you animate
this skewx.

00:33:48.700 --> 00:33:51.380
You set the overshoot
interpolater on the animation,

00:33:51.380 --> 00:33:53.250
and that's what's
going to happen.

00:33:53.250 --> 00:33:56.870
And finally, we use an animator
set to sequence all

00:33:56.870 --> 00:33:57.620
this animation.

00:33:57.620 --> 00:33:58.880
So we're going to do the move.

00:33:58.880 --> 00:34:01.950
We're going to do the skew
at the end when we

00:34:01.950 --> 00:34:02.800
run against the wall.

00:34:02.800 --> 00:34:04.070
And then we're going
to run the wobble.

00:34:14.159 --> 00:34:16.870
CHET HAASE: So next principle,
which you also saw in that

00:34:16.870 --> 00:34:19.104
demo, is follow through and
overlapping action.

00:34:19.104 --> 00:34:21.980
When the button hits the
right-hand side, we want it to

00:34:21.980 --> 00:34:23.780
have this feeling that
it actually is a

00:34:23.780 --> 00:34:25.540
more organic material.

00:34:25.540 --> 00:34:29.380
So when it hits that wall, it
can't just stop immediately.

00:34:29.380 --> 00:34:31.659
Instead, part of it
would carry on.

00:34:31.659 --> 00:34:35.449
When we hit a wall, then part
of our body will not hit the

00:34:35.449 --> 00:34:37.310
wall all at the same
time and not stop.

00:34:37.310 --> 00:34:39.550
Instead, it's going to
wrap around the solid

00:34:39.550 --> 00:34:40.699
parts that did stop.

00:34:40.699 --> 00:34:42.239
So how can you indicate
that with a button?

00:34:42.239 --> 00:34:44.060
Well, we actually continued
the skew.

00:34:44.060 --> 00:34:47.210
So as soon as it stops on the
right, the skew continues and

00:34:47.210 --> 00:34:51.179
goes past, indicating that may
be it had a little too much

00:34:51.179 --> 00:34:53.540
for lunch and it's going to
carry on where the rest of the

00:34:53.540 --> 00:34:54.150
button stopped.

00:34:54.150 --> 00:34:56.210
And then once it gets to that
final point, then it's going

00:34:56.210 --> 00:34:58.880
to wobble back to
the end point.

00:34:58.880 --> 00:34:59.750
So we saw that demo.

00:34:59.750 --> 00:35:01.330
I think we're going to skip
the live button demo.

00:35:01.330 --> 00:35:03.810
It was another thing
about anticipation.

00:35:03.810 --> 00:35:06.840
Instead, we're going to
do non-linear motion.

00:35:06.840 --> 00:35:07.840
We'll show the demo.

00:35:07.840 --> 00:35:12.680
This actually comes from code
that I posted on my blog,

00:35:12.680 --> 00:35:14.580
curved animation in Android.

00:35:14.580 --> 00:35:16.450
So we'll post to DevBytes
about this as well.

00:35:16.450 --> 00:35:20.050
But I'll save the code for the
article for doing this.

00:35:20.050 --> 00:35:25.160
The idea here is that we want
to be able to move things

00:35:25.160 --> 00:35:26.640
naturally on the screen.

00:35:26.640 --> 00:35:29.660
Just like timing shouldn't be
linear, in general motion

00:35:29.660 --> 00:35:31.120
shouldn't be linear either.

00:35:31.120 --> 00:35:34.120
There's a more natural feel to
things settling into place,

00:35:34.120 --> 00:35:35.570
which is not moving
in a direct line.

00:35:35.570 --> 00:35:39.070
It's moving like people and real
things in the world move.

00:35:39.070 --> 00:35:43.810
So sometimes curved motion
make sense instead.

00:35:43.810 --> 00:35:46.670
And as I said, we'll skip
that code for now.

00:35:46.670 --> 00:35:49.890
Let me talk a little bit
about exaggeration.

00:35:49.890 --> 00:35:53.680
And that's another technique
that the original animators

00:35:53.680 --> 00:35:56.090
used to help indicate
what was going on.

00:35:56.090 --> 00:35:58.470
If you're going to have a big
nose, make it a really big

00:35:58.470 --> 00:36:01.790
nose, indicate that this
is one honking schnoz.

00:36:01.790 --> 00:36:04.730
You want to make everything
bigger than life to help the

00:36:04.730 --> 00:36:07.540
user understand things even
clearer and more quickly than

00:36:07.540 --> 00:36:08.830
they would otherwise.

00:36:08.830 --> 00:36:12.580
And in animation, that can help
as well to exaggerate

00:36:12.580 --> 00:36:15.900
behavior, to either make things
sort of hyperreal or

00:36:15.900 --> 00:36:19.060
just hyper accentuate what's
going on to help them

00:36:19.060 --> 00:36:21.330
understand quickly
what's happening.

00:36:21.330 --> 00:36:23.190
For this, we're going
to run a demo.

00:36:23.190 --> 00:36:25.130
Again, I'm not going to go into
the code on this, because

00:36:25.130 --> 00:36:25.820
there's a lot of code.

00:36:25.820 --> 00:36:27.030
There's a lot of different
pieces.

00:36:27.030 --> 00:36:30.700
We've actually seen all the
different elements of this

00:36:30.700 --> 00:36:33.110
throughout the other
little microdemos.

00:36:33.110 --> 00:36:36.690
We've got custom activity
animations as we launch from

00:36:36.690 --> 00:36:39.920
this activity into
the next one.

00:36:39.920 --> 00:36:41.850
So that's actually going
into a subactivity.

00:36:41.850 --> 00:36:43.260
We didn't use window
animations.

00:36:43.260 --> 00:36:45.890
We used custom activity
animations where we came in

00:36:45.890 --> 00:36:47.950
immediately with the white
background and then animated

00:36:47.950 --> 00:36:49.420
the elements in that view.

00:36:49.420 --> 00:36:52.550
We have a couple of different
things going on here.

00:36:52.550 --> 00:36:55.120
One is that the buttons actually
popped in, so they

00:36:55.120 --> 00:36:57.830
sort of did an overshoot as they
faded and popped onto the

00:36:57.830 --> 00:37:00.580
screen, to give a feeling of
engagement, some feeling of

00:37:00.580 --> 00:37:03.540
fun to the kid that they want
to attract and engage in the

00:37:03.540 --> 00:37:04.120
application.

00:37:04.120 --> 00:37:06.290
They want to be very
interactive.

00:37:06.290 --> 00:37:08.970
And then the text skews
to give that

00:37:08.970 --> 00:37:12.450
anticipation feeling.

00:37:12.450 --> 00:37:14.570
Engagement is very important
in monetization.

00:37:14.570 --> 00:37:15.820
ROMAIN GUY: What's the number?

00:37:17.780 --> 00:37:19.730
CHET HAASE: So that's
the entire activity.

00:37:19.730 --> 00:37:21.830
We won't enter the credit
card right now.

00:37:21.830 --> 00:37:23.960
But another one is just you've
got the button there.

00:37:23.960 --> 00:37:24.530
You know what?

00:37:24.530 --> 00:37:26.890
You really want the kid
to start playing.

00:37:26.890 --> 00:37:29.020
So this is a little bit funny.

00:37:29.020 --> 00:37:32.150
We're probably not all writing
cartoon applications, and it

00:37:32.150 --> 00:37:34.090
may be easy to write this off.

00:37:34.090 --> 00:37:36.870
But we've actually seen cartoon
effects in other

00:37:36.870 --> 00:37:40.930
applications, again, used for
the idea of engagement, of

00:37:40.930 --> 00:37:43.140
being fun, of being attractive,
and being

00:37:43.140 --> 00:37:44.160
enjoyable to use.

00:37:44.160 --> 00:37:46.970
So here's the Path
application.

00:37:46.970 --> 00:37:49.060
ROMAIN GUY: In this application,
look, there's my

00:37:49.060 --> 00:37:50.010
avatar right here.

00:37:50.010 --> 00:37:52.870
Focus on the little circle
just under the avatar.

00:37:52.870 --> 00:37:55.440
So I'm going to start scrolling
the list, and you

00:37:55.440 --> 00:37:57.066
can see there's this
anticipation.

00:37:57.066 --> 00:37:59.850
It's stretching and stretching
and stretching.

00:37:59.850 --> 00:38:01.340
There's the wobble.

00:38:01.340 --> 00:38:01.880
CHET HAASE: Yeah.

00:38:01.880 --> 00:38:06.810
It stretches organically, just
like our button did when it

00:38:06.810 --> 00:38:08.870
squashed and stretched.

00:38:08.870 --> 00:38:09.990
And then it snapped down.

00:38:09.990 --> 00:38:11.370
And it didn't just
snap into place.

00:38:11.370 --> 00:38:12.010
It did a wobble.

00:38:12.010 --> 00:38:15.520
So it's got this feeling that
it's rubbery, it's organic,

00:38:15.520 --> 00:38:17.090
and, even more so, it's fun.

00:38:17.090 --> 00:38:18.315
ROMAIN GUY: You know,
that animation is

00:38:18.315 --> 00:38:20.860
pretty annoying, actually.

00:38:20.860 --> 00:38:22.300
CHET HAASE: Doesn't it make
you want to enter a credit

00:38:22.300 --> 00:38:22.680
card, though?

00:38:22.680 --> 00:38:23.380
It does me.

00:38:23.380 --> 00:38:24.750
ROMAIN GUY: It makes me want
to turn off the phone.

00:38:30.700 --> 00:38:31.100
CHET HAASE: All right.

00:38:31.100 --> 00:38:32.150
Some quick tips here.

00:38:32.150 --> 00:38:33.560
We've seen some of these
along the way.

00:38:33.560 --> 00:38:35.810
It's worth calling them out.

00:38:35.810 --> 00:38:36.190
ROMAIN GUY: Really quick.

00:38:36.190 --> 00:38:39.180
CHET HAASE: Very quick tips,
in 1 minute and 32.

00:38:39.180 --> 00:38:40.190
Avoid layout.

00:38:40.190 --> 00:38:42.640
If you want to have smooth
animations, don't run layout

00:38:42.640 --> 00:38:43.700
on every frame.

00:38:43.700 --> 00:38:45.290
We've seen people trying
to do ListView

00:38:45.290 --> 00:38:46.950
animations with this approach.

00:38:46.950 --> 00:38:48.700
Sometimes that's the only
way to accomplish it.

00:38:48.700 --> 00:38:51.620
But frankly, if you can't run
the animation smoothly because

00:38:51.620 --> 00:38:54.340
it's doing too much work, such
as laying out a really complex

00:38:54.340 --> 00:38:58.540
container, maybe an animation is
not the right solution for

00:38:58.540 --> 00:38:59.730
that problem.

00:38:59.730 --> 00:39:00.530
Avoid layout.

00:39:00.530 --> 00:39:02.890
If you have to run layout to get
the after positions that

00:39:02.890 --> 00:39:04.650
you're going to animate
into, that's fine.

00:39:04.650 --> 00:39:05.420
Run layout.

00:39:05.420 --> 00:39:06.820
Then run your animation.

00:39:06.820 --> 00:39:08.730
Make sure you don't run layout
during the animation.

00:39:08.730 --> 00:39:09.890
ROMAIN GUY: But it's pretty much
guaranteed that if you

00:39:09.890 --> 00:39:12.280
run a layout on every frame
your animation will be

00:39:12.280 --> 00:39:14.560
stuttering.

00:39:14.560 --> 00:39:17.160
ViewTreeObserver, you
saw it real briefly.

00:39:17.160 --> 00:39:19.280
If you don't know about this
class, I really encourage you

00:39:19.280 --> 00:39:20.560
to take a look at it.

00:39:20.560 --> 00:39:22.500
It can be used to
listen to global

00:39:22.500 --> 00:39:24.430
events in the view hierarchy.

00:39:24.430 --> 00:39:27.910
So you can get an event when we
are about to draw a frame.

00:39:27.910 --> 00:39:30.450
You can get an event when we're
about to layout a frame.

00:39:30.450 --> 00:39:32.460
You can also know when the
touch mode has changed.

00:39:32.460 --> 00:39:35.760
So if you have a device with a
keyboard, you'll be notified

00:39:35.760 --> 00:39:38.520
when the keyboard becomes active
versus the touchscreen.

00:39:38.520 --> 00:39:40.480
There's global focus changes.

00:39:40.480 --> 00:39:42.940
A lot of very useful information
comes from the

00:39:42.940 --> 00:39:43.680
ViewTreeObserver.

00:39:43.680 --> 00:39:46.730
And we actually use it quite
a bit internally.

00:39:46.730 --> 00:39:49.030
CHET HAASE: And layers is more
of a performance tip.

00:39:49.030 --> 00:39:51.680
If you have a complex view or a
complex view hierarchy that

00:39:51.680 --> 00:39:54.750
you want to animate, consider
setting a hardware layer on it

00:39:54.750 --> 00:39:56.040
during the animation.

00:39:56.040 --> 00:39:58.180
Don't set a layer on something
that is actually changing,

00:39:58.180 --> 00:39:59.420
because we're going to
have to recreate that

00:39:59.420 --> 00:40:00.860
layer on every frame.

00:40:00.860 --> 00:40:03.980
But do set it on a complex view
whose alpha that you want

00:40:03.980 --> 00:40:06.630
to animate or that you want to
translate on the screen.

00:40:06.630 --> 00:40:08.720
ROMAIN GUY: So if you want to
know more, we gave a talk

00:40:08.720 --> 00:40:11.310
called "Animation Rules"
at Devoxx 2009.

00:40:11.310 --> 00:40:13.336
It's available online
at parleys.com.

00:40:13.336 --> 00:40:17.490
Chet has an awesome series of
DevBytes on YouTube about

00:40:17.490 --> 00:40:19.170
animations.

00:40:19.170 --> 00:40:21.500
You can also check out "The
Illusion of Life".

00:40:21.500 --> 00:40:23.080
It's the book that we
are referring to.

00:40:23.080 --> 00:40:25.760
It's a great book, if you manage
to carry it back home,

00:40:25.760 --> 00:40:27.250
because it's pretty big.

00:40:27.250 --> 00:40:28.190
CHET HAASE: It's a coffee
table book.

00:40:28.190 --> 00:40:29.960
It is the size of
a coffee table.

00:40:29.960 --> 00:40:32.650
ROMAIN GUY: I use it as a
coffee table, actually.

00:40:32.650 --> 00:40:32.780
No.

00:40:32.780 --> 00:40:33.550
It's a fantastic book.

00:40:33.550 --> 00:40:34.280
It's very interesting.

00:40:34.280 --> 00:40:36.990
The parts about the principal of
animation is really short,

00:40:36.990 --> 00:40:40.030
but there's a great history of
Disney and how they came up

00:40:40.030 --> 00:40:42.430
with all those fantastic
cartoons.

00:40:42.430 --> 00:40:43.510
So check it out.

00:40:43.510 --> 00:40:44.260
Our websites.

00:40:44.260 --> 00:40:45.820
And we're out of time.

00:40:45.820 --> 00:40:48.490
So if you have questions for us,
we'll be at the Sandbox--

00:40:48.490 --> 00:40:49.750
CHET HAASE: After the
fireside chat.

00:40:49.750 --> 00:40:50.560
ROMAIN GUY: --after
the fireside chat.

00:40:50.560 --> 00:40:50.720
Yes.

00:40:50.720 --> 00:40:52.120
There's that.

00:40:52.120 --> 00:40:54.380
And before you exit the room,
if you want to rate this

00:40:54.380 --> 00:40:57.090
session, you can scan the
QR codes by the doors.

00:40:57.090 --> 00:40:57.760
Thank you very much.

00:40:57.760 --> 00:40:59.010
CHET HAASE: Thanks.

