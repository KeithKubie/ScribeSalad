WEBVTT
Kind: captions
Language: en

00:00:00.270 --> 00:00:05.330
Thus far, I've given you a general idea of how an

00:00:05.330 --> 00:00:10.330
individual site that hosts computation resources and handles

00:00:10.330 --> 00:00:15.020
a whole bunch of incoming client requests may handle these incoming client

00:00:15.020 --> 00:00:20.960
requests in terms of load management. This brings us to the DQ principle.

00:00:20.960 --> 00:00:26.050
The server has all the data that is required

00:00:26.050 --> 00:00:28.770
for dealing with incoming client queries. So this

00:00:28.770 --> 00:00:30.580
the full data set, or DF if the

00:00:30.580 --> 00:00:33.600
full data set, that is required for handling

00:00:33.600 --> 00:00:37.800
any incoming queries to the server. Now clients

00:00:37.800 --> 00:00:45.080
come in with their queries and we will call Q0 as the offered load to the

00:00:45.080 --> 00:00:49.150
server, meaning this is the amount of requests

00:00:49.150 --> 00:00:52.050
that are hitting the unit per server time.

00:00:52.050 --> 00:00:57.200
Even though the offered load is still Q0, maybe the server

00:00:57.200 --> 00:01:02.200
could only manage to serve a portion of this incoming requests. And

00:01:02.200 --> 00:01:07.130
that portion of the incoming requests that is completed by

00:01:07.130 --> 00:01:12.430
the server is Qc. These are the completed requests. We define the yield Q

00:01:12.430 --> 00:01:17.590
as the ratio. Qc over Qo. That is the ratio

00:01:17.590 --> 00:01:21.360
of completed requests to the offered load. So, Q

00:01:21.360 --> 00:01:24.190
is going to be a fraction between zero and one.

00:01:24.190 --> 00:01:26.220
Ideally you want it to be one so that

00:01:26.220 --> 00:01:28.970
all the client requests are serviced, but if the server

00:01:28.970 --> 00:01:31.550
is not able to deal with the offered load

00:01:31.550 --> 00:01:34.070
entirely, then the yield is going to be less than

00:01:34.070 --> 00:01:37.660
one. Now each query that is coming into the server

00:01:37.660 --> 00:01:43.200
May require processing all of the data that's available in

00:01:43.200 --> 00:01:45.810
the server to answer this particular query. For

00:01:45.810 --> 00:01:48.810
instance, if there's a Google search and the

00:01:48.810 --> 00:01:52.760
search requires looking at all the corpus of

00:01:52.760 --> 00:01:55.450
data that the server has to answer the query,

00:01:55.450 --> 00:02:02.000
then you want to look at the full data set DF. However, it may be that because

00:02:02.000 --> 00:02:08.620
of either failures of some of the data servers or the load on the server, it is

00:02:08.620 --> 00:02:14.890
only able to process the query using a portion of the total data set, Dv. Dv is

00:02:14.890 --> 00:02:18.150
the available data. That is used in processing the

00:02:18.150 --> 00:02:22.670
query, in that case the harvest D is defined

00:02:22.670 --> 00:02:26.020
as the ratio Dv over Df. That is harvest

00:02:26.020 --> 00:02:29.130
is defined as the ratio of the available data

00:02:29.130 --> 00:02:32.190
to the full corpus of data. Again, this is

00:02:32.190 --> 00:02:34.540
going to be a ratio between zero and one.

00:02:34.540 --> 00:02:37.090
Ideally, you want to make sure that the harvest is

00:02:37.090 --> 00:02:42.320
one, meaning that incoming requests is completely served with all

00:02:42.320 --> 00:02:44.830
the data that it wants. Depending on the service I

00:02:44.830 --> 00:02:47.580
can give you different examples. So for instance if the

00:02:47.580 --> 00:02:50.890
incoming request is a search, you want to look at

00:02:50.890 --> 00:02:54.690
the whole corpus of data that is available to you

00:02:54.690 --> 00:02:56.990
to answer that search. But if you are not able

00:02:56.990 --> 00:02:59.570
to do that and the server is only using a

00:02:59.570 --> 00:03:04.270
portion of the full data in the harvest in terms of the quality of

00:03:04.270 --> 00:03:08.770
the results that is being given out to a particular client is less than one.

