WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.400
 Android patterns for performance 

00:00:02.400 --> 00:00:04.800
 One of the most common performance issues 

00:00:04.800 --> 00:00:06.927
 Which your users will notice is the reaction of your app 

00:00:06.927 --> 00:00:08.800
 When you go from a great network connection 

00:00:08.800 --> 00:00:10.060
 To a bad connection. 

00:00:10.060 --> 00:00:11.240
 My name is Colt McCannless. 

00:00:11.240 --> 00:00:14.630
 If your app does not adequately adapt to the network response time of the day, 

00:00:14.630 --> 00:00:18.210
 Your users will app your app instead of connecting. 

00:00:18.426 --> 00:00:22.540
 In fact, the Internet consists of a group of crazy moving parts, 

00:00:22.540 --> 00:00:25.170
 Or a set of pipes if you are a senator. 

00:00:25.520 --> 00:00:29.600
 However, requests sent from your phone must collide with a local cellular tower 

00:00:29.600 --> 00:00:32.299
 Which it then directs to the server of the service provider. 

00:00:32.299 --> 00:00:35.060
 You may then encounter a local data agent of that provider 

00:00:35.060 --> 00:00:37.920
 Before accessing the Internet and connecting to the main data server 

00:00:37.920 --> 00:00:41.000
 Which then needs to decode the response and fetch the data 

00:00:41.000 --> 00:00:43.810
 Then resend it, all just to return the data 

00:00:43.810 --> 00:00:47.080
 To the ISP server for the cache, and then finally to the phone itself. 

00:00:47.710 --> 00:00:49.530
 As you can see, there are lots of moving parts, 

00:00:49.530 --> 00:00:51.570
 A problem may arise at any stage. 

00:00:51.570 --> 00:00:53.830
 Since you do not control all those stages, 

00:00:53.830 --> 00:00:57.550
 The best you can do is make sure that your app adapts correctly 

00:00:57.550 --> 00:00:59.990
 With a device-based way of doing it. 

00:01:00.390 --> 00:01:02.050
 This includes two things: 

00:01:02.050 --> 00:01:05.330
 First, get information about the speed and performance of the network, 

00:01:05.330 --> 00:01:08.870
 Second, design your application to respond to changes 

00:01:08.870 --> 00:01:11.000
 In environments with poor response time. 

00:01:11.260 --> 00:01:13.710
 Unlike your expectations, it is easy to do the first point. 

00:01:14.680 --> 00:01:16.430
 All you have to do is bring the contact manager 

00:01:16.430 --> 00:01:18.280
 And determine whether you are on a mobile network. 

00:01:18.560 --> 00:01:21.520
 From there, with a quick connection to bring the subnet type, 

00:01:21.520 --> 00:01:24.800
 You get an enumeration list for the type of network you are connecting to. 

00:01:24.800 --> 00:01:28.940
 A practical search table shows you which type of network you are using 

00:01:28.940 --> 00:01:32.750
 And what can be expected as the best frequency bands and possible response times. 

00:01:32.750 --> 00:01:36.930
 But in fact, that value gives you the best scenario. 

00:01:36.930 --> 00:01:39.670
 The results are worse in the real world. 

00:01:39.670 --> 00:01:42.260
 Although your LTE user can be used, 

00:01:42.260 --> 00:01:44.890
 A problem may occur because the data server is slow, 

00:01:44.890 --> 00:01:46.960
 Which may lead to a doubling of time 

00:01:46.960 --> 00:01:49.690
 Which the server normally takes on that network for that application. 

00:01:49.690 --> 00:01:52.430
 The most precise solution, despite its great complexity 

00:01:52.430 --> 00:01:55.310
 In estimating the time it takes for the server to bring responses 

00:01:55.310 --> 00:01:56.310
 From your network. 

00:01:56.310 --> 00:01:58.740
 For example, if you learn that all your thumbnails 

00:01:58.740 --> 00:02:01.080
 In displaying your list of dimensions 128 in 128 pixels, 

00:02:01.420 --> 00:02:04.290
 You will have a general sense that the size must be in the alpha 

00:02:04.290 --> 00:02:08.220
 This takes only a certain amount of time to download on a particular network. 

00:02:08.428 --> 00:02:11.606
 You can then estimate the actual average cost of attaching over time 

00:02:11.606 --> 00:02:13.970
 To give you a better overview of real network settings 

00:02:13.970 --> 00:02:16.770
 And how it changes as the user navigates during his or her day. 

00:02:16.770 --> 00:02:18.210
 After obtaining this information, 

00:02:18.210 --> 00:02:21.030
 You need to decide how to design your application to handle the situation. 

00:02:21.200 --> 00:02:23.855
 As a simple approach, you can specify two thresholds 

00:02:23.855 --> 00:02:25.950
 And three containers of classification. 

00:02:25.950 --> 00:02:27.330
 If the response time 

00:02:27.330 --> 00:02:30.420
 Less than a small threshold of 60 milliseconds to bring an origin, 

00:02:30.420 --> 00:02:32.470
 Your user has a great connection. 

00:02:32.470 --> 00:02:35.420
 You may be able to increase the amount of data you prepare in advance 

00:02:35.420 --> 00:02:37.870
 Unlike things like caching. 

00:02:38.190 --> 00:02:40.810
 But if it takes less than the upper threshold, 

00:02:40.810 --> 00:02:42.994
 You may not be in the best position. 

00:02:42.994 --> 00:02:45.710
 So be careful to increase the transmission in batches and buffering 

00:02:45.710 --> 00:02:48.165
 And take advantage of the number of times your request for data. 

00:02:48.495 --> 00:02:50.160
 If they are greater than the maximum threshold, 

00:02:50.160 --> 00:02:53.090
 You should look for ways to postpone your requests until later, 

00:02:53.090 --> 00:02:55.090
 When there is probably better network connectivity, 

00:02:55.090 --> 00:02:56.280
 Or non-user interface 

00:02:56.280 --> 00:03:00.500
 So not bringing all the thumbnails is not a big trouble. 

00:03:00.810 --> 00:03:01.810
 But in fact, 

00:03:01.810 --> 00:03:03.805
 These thresholds will not work for each user. 

00:03:03.805 --> 00:03:06.390
 It will indeed need some effort 

00:03:06.390 --> 00:03:07.960
 To find the correct thresholds 

00:03:07.960 --> 00:03:11.560
 50, 90 and 99 percent 

00:03:11.560 --> 00:03:13.870
 Of the communications your users use. 

00:03:14.240 --> 00:03:17.180
 This is indeed a major engineering project 

00:03:17.180 --> 00:03:19.870
 But it is very important to your application 

00:03:19.870 --> 00:03:23.429
 So that it remains responsive in environments with high response times. 

00:03:23.429 --> 00:03:27.110
 Instead of waiting for users to complain about slow connections, 

00:03:27.367 --> 00:03:29.890
 It is best to start design and test the bad data transfer rate 

00:03:29.890 --> 00:03:30.990
 On your application in advance. 

00:03:31.300 --> 00:03:33.880
 You can test the impact of large response time on your applications 

00:03:33.880 --> 00:03:36.930
 By restricting the data transfer rate when running Android Emulator. 

00:03:36.930 --> 00:03:39.040
 Or you can check the external applications, 

00:03:39.040 --> 00:03:41.080
 Such as AT &amp; T's Network Attenuator. 

00:03:41.080 --> 00:03:44.160
 In both cases, you can follow how your app responds 

00:03:44.160 --> 00:03:48.700
 When response time increases a lot, you should do this with everything, in fact. 

00:03:48.700 --> 00:03:50.660
 The performance test is the slowest hardware 

00:03:50.660 --> 00:03:52.960
 The worst networks and the most insane situations 

00:03:52.960 --> 00:03:56.650
 Is the best way to ensure stable and consistent performance of users. 

00:03:56.810 --> 00:03:59.620
 Of course, watch the other Android Performance Patterns videos 

00:03:59.620 --> 00:04:00.680
 To identify and solve problems. 

00:04:00.680 --> 00:04:02.241
 I invite you to join the Google+ community 

00:04:02.241 --> 00:04:04.100
 For advice from other developers like you. 

00:04:04.100 --> 00:04:05.770
 Your users will definitely thank you. 

00:04:05.770 --> 00:04:07.810
 So keep calm, collect your code information 

00:04:07.810 --> 00:04:09.330
 Always remember that performance is important. 

