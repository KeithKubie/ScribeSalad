WEBVTT
Kind: captions
Language: en

00:00:11.760 --> 00:00:14.510
In this tutorial, we'll be
talking about how to run the

00:00:14.510 --> 00:00:16.149
Java sample code.

00:00:16.149 --> 00:00:18.320
To run the YouTube Java samples,
we'll need the

00:00:18.320 --> 00:00:19.410
following--

00:00:19.410 --> 00:00:23.230
Java 1.6, Apache Maven,
access to a command

00:00:23.230 --> 00:00:25.520
line, and a text editor.

00:00:25.520 --> 00:00:28.280
In a future segment, we'll walk
through the process of

00:00:28.280 --> 00:00:31.990
running and modifying the Java
samples from an IDE such as

00:00:31.990 --> 00:00:34.590
Eclipse or IntelliJ IDE.

00:00:34.590 --> 00:00:36.940
For this tutorial, we'll be
running our samples from the

00:00:36.940 --> 00:00:39.120
command line.

00:00:39.120 --> 00:00:42.300
The first thing I want to do is
download the code from this

00:00:42.300 --> 00:00:44.310
site on Project Hosting.

00:00:44.310 --> 00:00:45.560
Browse to code.google.com/
p/youtube-api-samples.

00:00:50.910 --> 00:00:54.110
You can also search for
"YouTube-api-samples" in your

00:00:54.110 --> 00:00:55.850
favorite search engine
and click on

00:00:55.850 --> 00:00:57.900
the link to the samples.

00:00:57.900 --> 00:00:59.986
Click on the download link.

00:00:59.986 --> 00:01:02.180
This will take us to the page
where you can download the

00:01:02.180 --> 00:01:04.920
code samples.

00:01:04.920 --> 00:01:09.020
We'll save the zip file
to our local disk.

00:01:09.020 --> 00:01:11.040
Now let's go ahead and
unzip the zip file.

00:01:14.990 --> 00:01:17.310
It's now in my Downloads
directory.

00:01:17.310 --> 00:01:19.140
I'm going to go ahead and browse
to this directory from

00:01:19.140 --> 00:01:20.390
the command line.

00:01:24.048 --> 00:01:27.790
I'm opening this up in Sublime
Text, but you can use any text

00:01:27.790 --> 00:01:29.040
editor that works for you.

00:01:35.510 --> 00:01:36.970
We're running two samples.

00:01:36.970 --> 00:01:38.870
The first sample we're
going to run is going

00:01:38.870 --> 00:01:41.000
to be a search sample.

00:01:41.000 --> 00:01:43.200
Browse to search.java
in the YouTube

00:01:43.200 --> 00:01:45.270
command line search project.

00:01:45.270 --> 00:01:50.780
This is under Samples, Java,
YouTube Command Line Search,

00:01:50.780 --> 00:01:56.580
Source, Main, Java,
Com, Google, API,

00:01:56.580 --> 00:01:58.580
Services, Sample, YouTube.

00:01:58.580 --> 00:01:59.720
There's a whole hierarchy.

00:01:59.720 --> 00:02:00.690
I won't get too much into it.

00:02:00.690 --> 00:02:02.790
But you want to go all the
way to the bottom of

00:02:02.790 --> 00:02:04.040
the directory structure.

00:02:07.350 --> 00:02:09.550
Open up the source code.

00:02:09.550 --> 00:02:11.250
We'll see that this file
makes a reference to

00:02:11.250 --> 00:02:16.550
YouTube.properties file, which
it loads when it starts up in

00:02:16.550 --> 00:02:18.410
the main function.

00:02:18.410 --> 00:02:21.400
It then uses the developer
key from this file.

00:02:21.400 --> 00:02:23.960
This allows the specify
developer key and change

00:02:23.960 --> 00:02:27.200
developer key without having
to recompile the project.

00:02:29.940 --> 00:02:33.480
Let's browse to this
YouTube.properties file.

00:02:33.480 --> 00:02:35.540
Right now this has
a placeholder.

00:02:35.540 --> 00:02:38.370
We'll need to copy the API key
into this file so we can run

00:02:38.370 --> 00:02:40.940
the sample.

00:02:40.940 --> 00:02:43.660
Let's browse back to
the API console.

00:02:43.660 --> 00:02:46.230
If you've seen the first
tutorial about how to do this,

00:02:46.230 --> 00:02:48.190
it will explain how to
create this API key.

00:02:53.362 --> 00:02:54.940
Let's copy the API key.

00:02:57.540 --> 00:02:59.520
Switching back, let's
go ahead and paste

00:02:59.520 --> 00:03:01.456
over the place holder.

00:03:01.456 --> 00:03:04.590
Now let's save the file.

00:03:04.590 --> 00:03:07.770
We're now ready to compile
and run this code.

00:03:07.770 --> 00:03:11.475
Open up the command
line again.

00:03:11.475 --> 00:03:13.260
We're browsing the samples,
and we're

00:03:13.260 --> 00:03:14.510
drilling all the way down.

00:03:20.086 --> 00:03:22.600
We're now going to use the Maven
tool to build and run

00:03:22.600 --> 00:03:23.520
this product.

00:03:23.520 --> 00:03:26.010
Type in mvn to make sure you
have a working Maven

00:03:26.010 --> 00:03:27.260
installation.

00:03:30.730 --> 00:03:34.840
Now let's go ahead and
type mvn compile.

00:03:34.840 --> 00:03:37.450
This will download any
dependencies and compile the

00:03:37.450 --> 00:03:38.700
project for us.

00:03:51.030 --> 00:03:55.190
We're looking for "build
success." This ran fairly

00:03:55.190 --> 00:03:57.440
quickly on my machine, but
that's because I've run this

00:03:57.440 --> 00:03:58.790
sample before.

00:03:58.790 --> 00:04:01.680
Your very first time running
Maven Compile on any Google

00:04:01.680 --> 00:04:04.640
API project will take a little
bit longer, because you need

00:04:04.640 --> 00:04:05.890
to download the dependencies.

00:04:15.760 --> 00:04:18.560
Now let's go ahead
and run the code.

00:04:18.560 --> 00:04:28.340
To do this, type
mvn exec:java.

00:04:28.340 --> 00:04:31.540
This will run the
correct project.

00:04:31.540 --> 00:04:33.640
In this case, I'm going to
search for the term "dogs

00:04:33.640 --> 00:04:38.380
dancing."

00:04:38.380 --> 00:04:39.980
This will output a list
of videos that

00:04:39.980 --> 00:04:42.870
match my search query.

00:04:42.870 --> 00:04:45.950
I can now go back to search.java
and make changes

00:04:45.950 --> 00:04:51.060
to learn about the API,
recompile using mvn compile,

00:04:51.060 --> 00:04:55.660
and run using mvn exec:java.

00:04:55.660 --> 00:04:58.210
The second sample we're going
to run is going to

00:04:58.210 --> 00:05:01.610
authenticate and authorize
using OAuth 2.0.

00:05:01.610 --> 00:05:03.085
We're going to run the
My Upload Sample.

00:05:08.400 --> 00:05:11.370
Browse to the My Upload Sample
in your YouTube Samples

00:05:11.370 --> 00:05:13.840
directory, and drill all
the way down, as we

00:05:13.840 --> 00:05:15.090
did in the last step.

00:05:23.420 --> 00:05:26.570
This one loads a different
configuration file called

00:05:26.570 --> 00:05:29.500
client_secrets.json.

00:05:29.500 --> 00:05:33.320
Let's go ahead and
open that file.

00:05:33.320 --> 00:05:36.430
This makes use of client ID and
the client secret, which

00:05:36.430 --> 00:05:38.720
we created in a previous
tutorial.

00:05:38.720 --> 00:05:41.100
Let's go back to the API console
and copy and paste

00:05:41.100 --> 00:05:43.680
these values.

00:05:43.680 --> 00:05:46.280
We're no longer using
simple API access.

00:05:46.280 --> 00:05:48.810
We want to use the client
ID and client secret.

00:05:53.000 --> 00:05:59.850
Let's go ahead copy the client
ID, paste it into the value

00:05:59.850 --> 00:06:01.470
for client ID in our
client_secrets.json.

00:06:04.120 --> 00:06:05.670
Let's go ahead and copy
client secret.

00:06:09.520 --> 00:06:10.770
We'll paste that in as well.

00:06:18.970 --> 00:06:22.460
Let's go ahead and
save this file.

00:06:22.460 --> 00:06:25.030
There's one more thing
we need to do.

00:06:25.030 --> 00:06:27.480
When we run the sample,
it's going to

00:06:27.480 --> 00:06:30.630
create a local server.

00:06:30.630 --> 00:06:33.120
This is going to accept
the browser redirect.

00:06:33.120 --> 00:06:36.220
I'll show you what this
means in a second.

00:06:36.220 --> 00:06:39.450
For now, what we need to do is
go back to the API console,

00:06:39.450 --> 00:06:43.590
and we need to set a redirect
URI for our client ID.

00:06:43.590 --> 00:06:45.870
I already have this set up, but
you probably won't have

00:06:45.870 --> 00:06:48.940
this, so you want to go ahead
and click Edit Settings and

00:06:48.940 --> 00:06:57.310
add the value
http://localhost:8080/Callback.

00:06:57.310 --> 00:06:59.870
Click update.

00:06:59.870 --> 00:07:02.650
I'll show you what this means.

00:07:02.650 --> 00:07:03.900
Browse to your command
line again.

00:07:07.550 --> 00:07:09.230
Let's enter the My Uploads
directory.

00:07:14.440 --> 00:07:17.965
Again, we compile using mvn
compile, Maven Compile.

00:07:21.260 --> 00:07:24.010
It goes ahead and installs all
of our dependencies, and it

00:07:24.010 --> 00:07:26.880
compiles the code.

00:07:26.880 --> 00:07:39.060
Now let's run the code
with mvn exec:java.

00:07:39.060 --> 00:07:41.720
Notice that it automatically
redirects my browser and it

00:07:41.720 --> 00:07:44.990
closes it if you authorized
in the past.

00:07:44.990 --> 00:07:48.190
If I hadn't authorized this in
the past, I would be presented

00:07:48.190 --> 00:07:51.110
with a screen that says, this
application is requesting

00:07:51.110 --> 00:07:54.650
permission to your
YouTube account.

00:07:54.650 --> 00:07:58.260
You'll need to click Allow
Access for this to work.

00:07:58.260 --> 00:08:01.650
Going back to the command line,
we'll see that this has

00:08:01.650 --> 00:08:04.480
appropriately listed out the
videos that I've uploaded.

00:08:12.050 --> 00:08:14.700
Going back to our text editor,
we can see that we can make

00:08:14.700 --> 00:08:19.140
changes to myuploads.java, save
them, and, using Maven

00:08:19.140 --> 00:08:23.690
Compile and mvn exec:java, learn
about the API and OAuth

00:08:23.690 --> 00:08:27.170
2.0 authorized API calls.

00:08:27.170 --> 00:08:28.560
That concludes this tutorial.

00:08:28.560 --> 00:08:31.710
In a future segment, we'll talk
about how to integrate

00:08:31.710 --> 00:08:32.960
with an IDE.

