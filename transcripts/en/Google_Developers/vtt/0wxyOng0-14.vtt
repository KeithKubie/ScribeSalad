WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.791
JEREMY WALKER: Hi, my
name's Jeremy Walker.

00:00:01.791 --> 00:00:03.610
I'm a developer
advocate here at Google.

00:00:03.610 --> 00:00:05.700
Welcome back to our
series on the Three

00:00:05.700 --> 00:00:09.440
Flaws of Software Design
with Max Kanat-Alexander.

00:00:09.440 --> 00:00:11.960
This is on the third
flaw, so why don't we

00:00:11.960 --> 00:00:13.267
just jump right into it?

00:00:13.267 --> 00:00:14.350
MAX KANAT-ALEXANDER: Sure.

00:00:14.350 --> 00:00:17.990
So this is the third of our
Three Flaws of Software Design.

00:00:17.990 --> 00:00:21.430
And this third one
is, being too generic.

00:00:21.430 --> 00:00:23.370
Often, this is called
over-engineering.

00:00:23.370 --> 00:00:27.770
It's an attempt to accommodate
every future requirement now

00:00:27.770 --> 00:00:30.270
even though you
can't actually know

00:00:30.270 --> 00:00:31.940
all the future requirements now.

00:00:31.940 --> 00:00:35.060
This is a flaw that senior
developers frequently

00:00:35.060 --> 00:00:35.760
fall into.

00:00:35.760 --> 00:00:38.776
So junior developers often
fall into our previous flaw,

00:00:38.776 --> 00:00:40.400
which is writing code
that is too rigid

00:00:40.400 --> 00:00:42.730
or that doesn't
have enough design.

00:00:42.730 --> 00:00:44.970
But senior developers
have done that,

00:00:44.970 --> 00:00:46.370
and they've been bitten by it.

00:00:46.370 --> 00:00:47.460
They've been bitten by change.

00:00:47.460 --> 00:00:48.918
And they want to
try to accommodate

00:00:48.918 --> 00:00:50.260
every possible change now.

00:00:50.260 --> 00:00:52.680
And this sounds a little
bit like our first flaw,

00:00:52.680 --> 00:00:56.360
which was writing code
that you don't need.

00:00:56.360 --> 00:00:58.860
And it's sort of a
specialized case of that.

00:00:58.860 --> 00:01:01.030
But there's a little bit
more to know about it,

00:01:01.030 --> 00:01:03.950
so I pulled it out
as its own flaw.

00:01:03.950 --> 00:01:06.560
The problem that it
has is that you've

00:01:06.560 --> 00:01:10.936
put in a ton of effort
for very little value.

00:01:10.936 --> 00:01:13.060
Basically, like when you've
design something that's

00:01:13.060 --> 00:01:20.150
very, very generic, you're
not delivering the value

00:01:20.150 --> 00:01:21.935
of the code that you
wrote to the user.

00:01:21.935 --> 00:01:24.060
The amount of work you did,
and the amount of value

00:01:24.060 --> 00:01:25.660
that the user actually
gets out of it,

00:01:25.660 --> 00:01:27.566
are not proportional
to each other.

00:01:27.566 --> 00:01:28.940
Because you've
done a lot of work

00:01:28.940 --> 00:01:31.210
that doesn't actually deliver
any value to the user.

00:01:31.210 --> 00:01:33.390
Now, sometimes that's
OK, because you're

00:01:33.390 --> 00:01:34.610
doing good design.

00:01:34.610 --> 00:01:37.790
But over-engineering,
or being too generic,

00:01:37.790 --> 00:01:40.030
trying to meet requirements,
future requirements,

00:01:40.030 --> 00:01:44.590
that you don't know about
yet is not good design.

00:01:44.590 --> 00:01:46.960
Developers do this all the
time by trying to be good.

00:01:46.960 --> 00:01:48.370
They've been taught
certain practices,

00:01:48.370 --> 00:01:49.960
and they want to
follow these practices.

00:01:49.960 --> 00:01:51.543
But they don't
understand that there's

00:01:51.543 --> 00:01:54.180
certain times when you don't
need to follow those practices.

00:01:54.180 --> 00:01:55.824
People want to catch
every exception,

00:01:55.824 --> 00:01:57.240
but there are some
exceptions that

00:01:57.240 --> 00:01:59.220
don't need to be caught that you
really should just let bubble

00:01:59.220 --> 00:02:01.636
up to the surface, because
otherwise you're hiding errors.

00:02:01.636 --> 00:02:04.099
And it actually makes it
harder to debug the system.

00:02:04.099 --> 00:02:05.890
When you try to handle
input that you never

00:02:05.890 --> 00:02:08.840
get-- when we did our code
review for the first flaw,

00:02:08.840 --> 00:02:11.250
you saw some of that.

00:02:11.250 --> 00:02:12.920
Handling situations
you're never in,

00:02:12.920 --> 00:02:14.751
like trying to make
thread safe code that

00:02:14.751 --> 00:02:16.750
doesn't need to be thread
safe-- I've done this.

00:02:16.750 --> 00:02:17.320
It's a nightmare.

00:02:17.320 --> 00:02:19.194
You're adding locks
everywhere, and it really

00:02:19.194 --> 00:02:21.490
just adds a week of
work to a project

00:02:21.490 --> 00:02:23.900
that should have taken a day.

00:02:23.900 --> 00:02:26.390
Or dependency injection,
when there's only one choice

00:02:26.390 --> 00:02:28.452
that there could ever
be-- this is probably

00:02:28.452 --> 00:02:30.910
most common in the Java world,
because dependency injection

00:02:30.910 --> 00:02:31.634
is very popular.

00:02:31.634 --> 00:02:33.800
And I'm not saying that
dependency injection is bad.

00:02:33.800 --> 00:02:35.675
But I'm saying that
dependency injection when

00:02:35.675 --> 00:02:36.740
you don't need it is bad.

00:02:36.740 --> 00:02:38.390
You shouldn't be doing
speculative dependency

00:02:38.390 --> 00:02:39.264
injection, basically.

00:02:39.264 --> 00:02:41.730
Like, you shouldn't be guessing,
oh, well, in the future,

00:02:41.730 --> 00:02:44.410
we might need to do
dependency injection,

00:02:44.410 --> 00:02:46.460
so I should just do it now.

00:02:46.460 --> 00:02:48.760
In general, these can all
be summed up as, one day,

00:02:48.760 --> 00:02:53.230
we might need to do foo
so I should do foo now.

00:02:53.230 --> 00:02:54.590
Let's give an example.

00:02:54.590 --> 00:02:56.970
So let's say that I want to
write an HTTP server that

00:02:56.970 --> 00:02:59.120
communicates over a TCP socket.

00:02:59.120 --> 00:03:01.960
And I have a bunch
of time on my hands.

00:03:01.960 --> 00:03:06.020
And I think that I am the
world's best developer,

00:03:06.020 --> 00:03:08.789
and I just want to do an
awesome, awesome job on this.

00:03:08.789 --> 00:03:10.580
So what I do is, I'm
going to be, like, OK,

00:03:10.580 --> 00:03:12.610
I'm going to really, really
design this, super design this,

00:03:12.610 --> 00:03:13.460
but I'm going to
over-engineer it.

00:03:13.460 --> 00:03:14.835
What I'm going to
do is I'm going

00:03:14.835 --> 00:03:16.600
to have multiple--
you know, there might

00:03:16.600 --> 00:03:19.430
be other types of sockets, other
than TCP sockets in the future.

00:03:19.430 --> 00:03:22.500
So we have a socket,
and a socket type,

00:03:22.500 --> 00:03:25.850
and a socket factory
to make our sockets,

00:03:25.850 --> 00:03:27.000
and then have a TCP socket.

00:03:27.000 --> 00:03:28.860
So by the way, any
time you see a factory

00:03:28.860 --> 00:03:31.690
they can only produce
one object, that

00:03:31.690 --> 00:03:33.140
is something to be suspect of.

00:03:35.457 --> 00:03:37.040
Or we want to say,
oh, but maybe we'll

00:03:37.040 --> 00:03:39.050
support other protocols,
other than HTTP.

00:03:39.050 --> 00:03:41.580
So we should have an abstract
request class, and then

00:03:41.580 --> 00:03:44.500
a type for the request, and then
a request factory, and an HTTP

00:03:44.500 --> 00:03:46.640
request, and the same
thing for the responses.

00:03:46.640 --> 00:03:49.150
And then, that means
also that the request

00:03:49.150 --> 00:03:50.866
has to understand the
response it creates

00:03:50.866 --> 00:03:52.490
and the socket type
that it came in on.

00:03:52.490 --> 00:03:54.948
So there's going to be all this
complexity in implementing,

00:03:54.948 --> 00:03:58.360
sort of, generic socket
handling and generic request

00:03:58.360 --> 00:04:02.740
handling in your
generic response,

00:04:02.740 --> 00:04:05.070
and also in your
generic request.

00:04:05.070 --> 00:04:06.640
And then, you know
what, everybody

00:04:06.640 --> 00:04:08.080
likes configuration files.

00:04:08.080 --> 00:04:11.059
So instead of writing code to
make our HTTP server behave

00:04:11.059 --> 00:04:13.100
a different way, let's
write configuration files,

00:04:13.100 --> 00:04:14.540
not because we need
them, just because we

00:04:14.540 --> 00:04:16.164
think we might need
them in the future.

00:04:18.779 --> 00:04:21.680
And specifically, let's
make it so that the sockets

00:04:21.680 --> 00:04:23.111
can configure themselves.

00:04:23.111 --> 00:04:25.110
Because we want to have
different configurations

00:04:25.110 --> 00:04:25.630
of sockets.

00:04:25.630 --> 00:04:26.790
I don't know why.

00:04:26.790 --> 00:04:28.498
But, you know, you
just want to configure

00:04:28.498 --> 00:04:31.100
them to have different
time outs, or something.

00:04:31.100 --> 00:04:34.959
And so, we need to be able to
read socket types from files,

00:04:34.959 --> 00:04:36.750
basically, not like a
serialization format,

00:04:36.750 --> 00:04:38.555
but just a configuration.

00:04:38.555 --> 00:04:42.290
And you know, because
we like being efficient,

00:04:42.290 --> 00:04:44.280
in production, we want
to have a binary version

00:04:44.280 --> 00:04:46.590
for this configuration,
but binary configurations

00:04:46.590 --> 00:04:47.580
are hard to debug.

00:04:47.580 --> 00:04:48.996
So in development,
we want to have

00:04:48.996 --> 00:04:50.930
a text version of this
configuration file.

00:04:50.930 --> 00:04:53.730
And then, in
production, we probably

00:04:53.730 --> 00:04:56.165
want to store this configuration
file in a database,

00:04:56.165 --> 00:04:57.540
but in development,
we might want

00:04:57.540 --> 00:04:58.831
to store it in the file system.

00:04:58.831 --> 00:05:01.380
So we should have different
ways to store this HTTP server.

00:05:01.380 --> 00:05:04.730
So, what's wrong
with this picture?

00:05:04.730 --> 00:05:07.590
It required 15 classes.

00:05:07.590 --> 00:05:11.910
And HTTP is a complex protocol
to implement, particularly

00:05:11.910 --> 00:05:16.010
if you also have to implement
a lot of TCP underneath it.

00:05:16.010 --> 00:05:18.380
So I would say that
all that complexity

00:05:18.380 --> 00:05:21.340
is going to make it take
one person-year to do this

00:05:21.340 --> 00:05:24.450
and maybe 30,000 lines of code.

00:05:24.450 --> 00:05:26.760
And also, you're going
to have to write way,

00:05:26.760 --> 00:05:28.600
way more tests
than you would have

00:05:28.600 --> 00:05:29.480
to, otherwise,
because you're going

00:05:29.480 --> 00:05:31.563
to have all these generic
situations that you have

00:05:31.563 --> 00:05:33.920
to make sure are actually valid.

00:05:33.920 --> 00:05:35.990
But, let's say that we
did this more simply.

00:05:35.990 --> 00:05:37.970
What's the non-generic
implementation?

00:05:37.970 --> 00:05:40.680
The non-generic implementation
is three classes--

00:05:40.680 --> 00:05:44.810
socket, request, and response.

00:05:44.810 --> 00:05:46.520
How long is that going to take?

00:05:46.520 --> 00:05:50.740
I don't know, maybe two to three
person-months, maybe even less

00:05:50.740 --> 00:05:52.800
if you don't implement
the entire HTTP spec.

00:05:52.800 --> 00:05:54.591
And the reason it's
going to take that long

00:05:54.591 --> 00:05:57.590
is because HTTP is genuinely
a complex thing to implement.

00:05:57.590 --> 00:06:00.590
But the work you'll
be doing is all work

00:06:00.590 --> 00:06:03.250
that actually delivers
value to the user.

00:06:03.250 --> 00:06:05.210
Those two to three months
are all valuable time

00:06:05.210 --> 00:06:07.876
spent working, as opposed to the
other eight or nine months that

00:06:07.876 --> 00:06:09.960
would have been spent
making this thing generic,

00:06:09.960 --> 00:06:13.140
which, ultimately, the
product is identical.

00:06:13.140 --> 00:06:15.480
The product that you're
delivering is identical.

00:06:15.480 --> 00:06:17.650
I'm not encouraging
bad design and saying

00:06:17.650 --> 00:06:19.350
you should hack
things out quickly.

00:06:19.350 --> 00:06:24.340
What I'm saying is, I'm
discouraging over-design.

00:06:24.340 --> 00:06:27.190
And the rule that you can
apply to get out of this flaw,

00:06:27.190 --> 00:06:29.550
to resolve this flaw,
is be only as generic

00:06:29.550 --> 00:06:31.450
as you need to be right now.

00:06:31.450 --> 00:06:32.790
And how generic is that?

00:06:32.790 --> 00:06:34.373
Well, you need to
be generic enough so

00:06:34.373 --> 00:06:37.780
that you never duplicate code,
so that your design is simple,

00:06:37.780 --> 00:06:41.170
and so that your
system is stable.

00:06:41.170 --> 00:06:46.157
So my rule for duplication
is that two is too many.

00:06:46.157 --> 00:06:48.490
Once I want to basically copy
and paste a piece of code,

00:06:48.490 --> 00:06:51.330
ever, even once, then
I start to think, OK,

00:06:51.330 --> 00:06:52.740
how can I have a super class?

00:06:52.740 --> 00:06:54.650
Or how can I have
a utility function,

00:06:54.650 --> 00:06:56.320
or something like that?

00:06:56.320 --> 00:06:58.994
You want to keep it simple,
so that it's understandable.

00:06:58.994 --> 00:07:00.660
So sometimes you want
to abstract things

00:07:00.660 --> 00:07:01.900
out of the classes,
because otherwise it

00:07:01.900 --> 00:07:04.150
would be very difficult
to understand the code.

00:07:04.150 --> 00:07:06.275
Or you want to abstract
thing out of the functions,

00:07:06.275 --> 00:07:08.649
because it makes it easier
to understand the code.

00:07:08.649 --> 00:07:10.190
And you want the
system to be stable.

00:07:10.190 --> 00:07:11.250
So sometimes there's
a certain amount

00:07:11.250 --> 00:07:13.270
of complexity in handling
error conditions,

00:07:13.270 --> 00:07:16.620
and you need to handle
those error conditions,

00:07:16.620 --> 00:07:20.460
even if you haven't seen
them already in production.

00:07:20.460 --> 00:07:22.760
The fact that somebody
sends you a bad HTTP request

00:07:22.760 --> 00:07:24.960
should not be a
security vulnerability.

00:07:24.960 --> 00:07:28.650
So you might have
to handle that.

00:07:28.650 --> 00:07:31.380
And that sort of wraps
it up for our third flaw.

00:07:31.380 --> 00:07:32.660
Any questions?

00:07:32.660 --> 00:07:35.680
JEREMY WALKER: Yeah, so again,
just like the other videos,

00:07:35.680 --> 00:07:37.450
you had a great
example in the book--

00:07:37.450 --> 00:07:39.580
I think it was related
to email-- that I

00:07:39.580 --> 00:07:40.880
was hoping you would cover.

00:07:40.880 --> 00:07:41.450
MAX KANAT-ALEXANDER:
Sure, so this

00:07:41.450 --> 00:07:43.033
was actually another
Bugzilla example.

00:07:46.150 --> 00:07:48.680
So what we wanted to do was
every time that you change

00:07:48.680 --> 00:07:51.580
a bug, Bugzilla sends
out a bunch of emails.

00:07:51.580 --> 00:07:53.514
And this is very
slow, because Bugzilla

00:07:53.514 --> 00:07:54.680
used to do it synchronously.

00:07:54.680 --> 00:07:57.732
It would actually update
the bug, then send an email.

00:07:57.732 --> 00:07:59.940
And if you were updating a
bunch of bugs all at once,

00:07:59.940 --> 00:08:01.810
it would update the first
bug, send the first email,

00:08:01.810 --> 00:08:03.390
update the next bug,
send the next email,

00:08:03.390 --> 00:08:04.920
update the next bug,
send the next email.

00:08:04.920 --> 00:08:06.630
And email sending is
actually very slow.

00:08:06.630 --> 00:08:08.588
Like talking to Send
Mail, and actually getting

00:08:08.588 --> 00:08:10.860
it to acknowledge that
the email has been queued,

00:08:10.860 --> 00:08:13.190
actually, it can take
a couple seconds.

00:08:13.190 --> 00:08:16.080
So if you were
changing 1,000 bugs,

00:08:16.080 --> 00:08:18.420
literally, people would
just open a browser tab

00:08:18.420 --> 00:08:20.080
and leave it there all day.

00:08:20.080 --> 00:08:21.157
JEREMY WALKER: Oh, wow.

00:08:21.157 --> 00:08:22.240
MAX KANAT-ALEXANDER: Yeah.

00:08:22.240 --> 00:08:25.260
And so, one of our big
feature requests was,

00:08:25.260 --> 00:08:27.150
can we do this asynchronously?

00:08:27.150 --> 00:08:32.250
And so we found a little
demon that could do it for us,

00:08:32.250 --> 00:08:35.350
a little queuing demon,
that could do it for us.

00:08:35.350 --> 00:08:38.289
And it could store little
blobs in the database

00:08:38.289 --> 00:08:41.174
that you could read back
out and send an email.

00:08:41.174 --> 00:08:43.049
So basically, there was
an asynchronous demon

00:08:43.049 --> 00:08:45.450
that sat alongside and would
just pull all the database

00:08:45.450 --> 00:08:48.310
for emails that
needed to be sent.

00:08:48.310 --> 00:08:49.810
And we had this all spec'd out.

00:08:49.810 --> 00:08:51.270
And then, the developer
who actually came around

00:08:51.270 --> 00:08:52.940
to implement it said,
well, maybe people

00:08:52.940 --> 00:08:55.780
are going to want to use
some other queuing system.

00:08:55.780 --> 00:08:57.724
Maybe they have their
own queuing system.

00:08:57.724 --> 00:08:59.640
And they don't want to
use our queuing system.

00:08:59.640 --> 00:09:03.130
So he made the whole thing able
to have plug-ins, basically,

00:09:03.130 --> 00:09:05.940
to have plug-ins for other
queue management systems, other

00:09:05.940 --> 00:09:08.440
than the queue management
system that we had chosen.

00:09:08.440 --> 00:09:11.250
And even in the code
review, I was like,

00:09:11.250 --> 00:09:12.730
I can't understand this code.

00:09:12.730 --> 00:09:14.350
I can't understand this change.

00:09:14.350 --> 00:09:16.090
I can't review this change.

00:09:16.090 --> 00:09:21.010
And eventually, he got
called off to do other work,

00:09:21.010 --> 00:09:23.350
and another developer
took it over.

00:09:23.350 --> 00:09:28.530
And that developer ripped
out all of the generic bits

00:09:28.530 --> 00:09:32.350
and the change became 100
lines of code or less, maybe

00:09:32.350 --> 00:09:35.280
like 75 lines of
code, to implement

00:09:35.280 --> 00:09:36.770
this super-critical feature.

00:09:36.770 --> 00:09:39.120
And I immediately
approved it, basically.

00:09:39.120 --> 00:09:40.717
I was like, this is really easy.

00:09:40.717 --> 00:09:41.550
It's going to go in.

00:09:41.550 --> 00:09:44.670
And the fact of the matter
is that in the three years

00:09:44.670 --> 00:09:47.200
after that that I worked
on the Bugzilla project,

00:09:47.200 --> 00:09:51.300
nobody ever requested to
use another queuing system.

00:09:51.300 --> 00:09:53.300
And if they had,
they were probably

00:09:53.300 --> 00:09:56.160
bright enough developers to
write custom code themselves,

00:09:56.160 --> 00:09:58.090
because this was an
open source project.

00:09:58.090 --> 00:10:03.140
So it ultimately ended
up not being necessary

00:10:03.140 --> 00:10:07.107
and way, way simpler just
to have non-generic code.

00:10:07.107 --> 00:10:08.190
JEREMY WALKER: Wow, great.

00:10:08.190 --> 00:10:11.542
Well, that covers our
third flaw in the series.

00:10:11.542 --> 00:10:13.000
We have one more
video, where we're

00:10:13.000 --> 00:10:15.690
going to talk a little bit more
about some stuff and some wrap

00:10:15.690 --> 00:10:16.340
up materials.

00:10:16.340 --> 00:10:18.180
So make sure you
tune in for that.

00:10:18.180 --> 00:10:19.980
Thank you.

