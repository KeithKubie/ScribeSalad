WEBVTT
Kind: captions
Language: en

00:00:05.313 --> 00:00:07.270
CHET HAASE: Hi, I'm Chet Haase,
an engineer on the

00:00:07.270 --> 00:00:09.310
Android team at Google.

00:00:09.310 --> 00:00:11.950
One of the principles of cartoon
animation that we

00:00:11.950 --> 00:00:15.100
spoke about recently at a Google
I/O talk called "A

00:00:15.100 --> 00:00:20.540
Moving Experience" is the idea
that motion in our real world

00:00:20.540 --> 00:00:21.660
is not linear.

00:00:21.660 --> 00:00:25.980
So if you want a UI to feel more
natural to the user, more

00:00:25.980 --> 00:00:29.320
organic, more like it's a
real-world application, then

00:00:29.320 --> 00:00:31.390
maybe the motion in your
application shouldn't be

00:00:31.390 --> 00:00:32.640
linear either.

00:00:32.640 --> 00:00:35.910
Now, we already offer this
by default in all of the

00:00:35.910 --> 00:00:39.840
animations in the platform in
terms of time interpolators,

00:00:39.840 --> 00:00:41.660
because you can set deceleration
motion,

00:00:41.660 --> 00:00:45.400
acceleration motion,
overshooting.

00:00:45.400 --> 00:00:49.000
By default, you accelerate into
and out of any animation.

00:00:49.000 --> 00:00:50.940
So the time aspect is
already handled.

00:00:50.940 --> 00:00:53.460
So that feels a little bit
more natural than simple

00:00:53.460 --> 00:00:54.680
linear interpolation.

00:00:54.680 --> 00:00:57.120
However, the motion on the
screen is not handled

00:00:57.120 --> 00:00:57.710
automatically.

00:00:57.710 --> 00:01:00.390
If you want to move, let's say,
a view from the upper

00:01:00.390 --> 00:01:02.870
left side of the screen down to
the lower right side of the

00:01:02.870 --> 00:01:04.950
screen, and you want it to
follow a curve instead of a

00:01:04.950 --> 00:01:07.550
straight line, it may
not be immediately

00:01:07.550 --> 00:01:09.520
obvious how to do that.

00:01:09.520 --> 00:01:11.140
So this is why I wrote
an article a

00:01:11.140 --> 00:01:12.650
while ago on my blog.

00:01:12.650 --> 00:01:15.440
My blog is at
graphics-geek.blogspot.com.

00:01:15.440 --> 00:01:19.350
The article is called "Curved
Motion in Android."

00:01:19.350 --> 00:01:20.880
So you can go check
out that article.

00:01:20.880 --> 00:01:23.380
It's basically most of what I'm
going to be showing today.

00:01:23.380 --> 00:01:25.230
So you can go read that
for more information.

00:01:25.230 --> 00:01:27.850
But I wanted to give a brief
glimpse of how you would do

00:01:27.850 --> 00:01:30.830
that using the existing
animation APIs that we already

00:01:30.830 --> 00:01:32.350
offer in the platform.

00:01:32.350 --> 00:01:33.720
So we can take a look at
the following demo.

00:01:33.720 --> 00:01:34.640
Very simple--

00:01:34.640 --> 00:01:38.340
we have a boring button on the
upper left side of the screen.

00:01:38.340 --> 00:01:40.610
And now, it's a boring
button on the lower

00:01:40.610 --> 00:01:41.880
right side of the screen.

00:01:41.880 --> 00:01:44.710
So these are two different
layouts where we determine

00:01:44.710 --> 00:01:47.450
where the button needs to
be in the two positions.

00:01:47.450 --> 00:01:49.520
And we basically just
toggle between them.

00:01:49.520 --> 00:01:52.900
But as we toggle between them,
we animate the position change

00:01:52.900 --> 00:01:55.130
using the approach that
I'll go over in the

00:01:55.130 --> 00:01:57.470
code starting now.

00:01:57.470 --> 00:02:01.830
OK, so in our click listener,
we call this method called

00:02:01.830 --> 00:02:02.700
Move Button here.

00:02:02.700 --> 00:02:06.010
This simply sets the layout
parameters to tell the button

00:02:06.010 --> 00:02:08.650
to be either at the upper
left or lower right--

00:02:08.650 --> 00:02:10.520
very straightforward.

00:02:10.520 --> 00:02:12.740
Then we add an
OnPreDrawListener, which is a

00:02:12.740 --> 00:02:16.840
technique that I use a lot
in animation demos, which

00:02:16.840 --> 00:02:19.940
basically allows layout to run
from the previous change.

00:02:19.940 --> 00:02:23.410
In this case, we set the layout
parameters on the view.

00:02:23.410 --> 00:02:25.130
Layout is going to run.

00:02:25.130 --> 00:02:27.060
And then it's going to change
the position of the button.

00:02:27.060 --> 00:02:29.940
But before we draw that change
on the screen, we're going to

00:02:29.940 --> 00:02:31.870
figure out where the
button is now.

00:02:31.870 --> 00:02:34.850
We know where it was before,
because we track that in these

00:02:34.850 --> 00:02:37.660
oldLeft and oldTop properties
up here.

00:02:37.660 --> 00:02:40.790
And now we can figure out the
delta between those, between

00:02:40.790 --> 00:02:43.430
the x and the y values, and
animate the change.

00:02:43.430 --> 00:02:46.170
Now, if all we did was set up an
animation to animate x and

00:02:46.170 --> 00:02:48.446
animate y, it's very
easy to set up.

00:02:48.446 --> 00:02:50.230
But it's going to give you the
linear motion that simply

00:02:50.230 --> 00:02:52.650
moves the button linearly
from the upper left

00:02:52.650 --> 00:02:53.490
to the lower right.

00:02:53.490 --> 00:02:56.180
And we really wanted the
curved motion instead.

00:02:56.180 --> 00:02:58.500
So we're going to use some
helper classes in here.

00:02:58.500 --> 00:03:00.790
We're going to use this Animator
Path class that I've

00:03:00.790 --> 00:03:05.390
defined that's similar to, but
much simpler than, the path

00:03:05.390 --> 00:03:07.140
object that we provide
in the framework.

00:03:07.140 --> 00:03:10.220
It also has a query capability
that will return this array of

00:03:10.220 --> 00:03:12.450
points, which is sort
of important for the

00:03:12.450 --> 00:03:14.410
interpolation that I needed
to do with it.

00:03:14.410 --> 00:03:17.840
So in the Animator Path, you can
basically use one of three

00:03:17.840 --> 00:03:19.030
methods to set up your path.

00:03:19.030 --> 00:03:21.610
You can do a Move To, a Line
To, and a Curve To.

00:03:21.610 --> 00:03:25.400
So I'm going to tell the path to
move to the old position of

00:03:25.400 --> 00:03:27.510
the button, and then
curve to the new

00:03:27.510 --> 00:03:28.760
position of the button.

00:03:28.760 --> 00:03:31.920
And the arguments to the Curve
To are both the end position

00:03:31.920 --> 00:03:34.790
as well as a couple of control
points in the middle.

00:03:34.790 --> 00:03:38.090
And this is basically defining
a cubic Bezier spline between

00:03:38.090 --> 00:03:38.610
the two points.

00:03:38.610 --> 00:03:41.370
We have anchor points at the end
and control points in the

00:03:41.370 --> 00:03:45.350
middle that determine the motion
of that object along

00:03:45.350 --> 00:03:46.060
this curve.

00:03:46.060 --> 00:03:49.800
In this case, it's a simple
curve that's just going to go

00:03:49.800 --> 00:03:53.240
in a simple arc down to the
lower right and then back to

00:03:53.240 --> 00:03:55.010
the upper left.

00:03:55.010 --> 00:03:59.400
We create an Object Animator
on our objects.

00:03:59.400 --> 00:04:02.150
And we're going to animate
this property called

00:04:02.150 --> 00:04:05.400
buttonLoc, which I've defined
a property setter for, which

00:04:05.400 --> 00:04:06.340
we'll see below.

00:04:06.340 --> 00:04:08.920
We're going to use this path
evaluator, which is a class I

00:04:08.920 --> 00:04:10.810
defined to evaluate
between these

00:04:10.810 --> 00:04:12.660
different types of objects.

00:04:12.660 --> 00:04:14.600
One of the nice things about the
property animation system

00:04:14.600 --> 00:04:16.979
is, sure, you can animate
floats and ints.

00:04:16.979 --> 00:04:19.070
But sometimes, you have
a more complex data

00:04:19.070 --> 00:04:20.829
structure like a [? rept ?]

00:04:20.829 --> 00:04:24.920
or a point, or in this case,
these path objects, these path

00:04:24.920 --> 00:04:26.500
points along the curve.

00:04:26.500 --> 00:04:28.410
Then how would you interpolate
along those?

00:04:28.410 --> 00:04:30.030
Well, the system doesn't
know how to.

00:04:30.030 --> 00:04:32.940
But you can tell it how to by
providing one of these type

00:04:32.940 --> 00:04:36.460
evaluators to get a callback
on every frame.

00:04:36.460 --> 00:04:38.660
And then you simply do the
interpolation for the system

00:04:38.660 --> 00:04:40.540
and pass back the appropriate
values.

00:04:40.540 --> 00:04:42.700
And then finally, for the points
that we're going to

00:04:42.700 --> 00:04:45.270
animate between, we do a query
into our animator path.

00:04:45.270 --> 00:04:48.040
And that's going to return
this array of points that

00:04:48.040 --> 00:04:49.470
define the animation.

00:04:49.470 --> 00:04:51.220
We set an interpolator
on this thing.

00:04:51.220 --> 00:04:52.140
And we start.

00:04:52.140 --> 00:04:53.190
And we're all good to go.

00:04:53.190 --> 00:04:54.680
So we can take a look
at the bottom.

00:04:54.680 --> 00:04:56.910
We have this property setter
that we need to find called

00:04:56.910 --> 00:04:57.860
setButtonLoc.

00:04:57.860 --> 00:05:01.670
This is going to get this object
called PathPoint, which

00:05:01.670 --> 00:05:03.830
is a data structure that
holds the information.

00:05:03.830 --> 00:05:06.600
And then we simply set the
TranslationX and TranslationY

00:05:06.600 --> 00:05:09.620
property of the view according
to what was in

00:05:09.620 --> 00:05:11.310
that PathPoint object.

00:05:11.310 --> 00:05:13.900
We can take a look at
the PathPoints.

00:05:13.900 --> 00:05:16.360
This is simply a data structure
that says, what kind

00:05:16.360 --> 00:05:17.200
of point is this?

00:05:17.200 --> 00:05:19.710
It's a move or a line or
a curve, and then has

00:05:19.710 --> 00:05:22.650
information about those
points internally.

00:05:22.650 --> 00:05:25.990
The animator path that we saw
before allows you to build up

00:05:25.990 --> 00:05:30.660
this path of successive points
and then query the points once

00:05:30.660 --> 00:05:33.190
you're done so we can actually
set up the animation on it.

00:05:33.190 --> 00:05:35.490
And then finally, we have
the type evaluator.

00:05:35.490 --> 00:05:38.520
And the one that we defined
is called Path Evaluator.

00:05:38.520 --> 00:05:41.530
And it just uses this
straightforward calculation.

00:05:41.530 --> 00:05:43.420
So it looks like a lot of
garbage going on in here.

00:05:43.420 --> 00:05:44.845
This is actually a really
simple calculation.

00:05:44.845 --> 00:05:47.300
It's a standard spline
calculation.

00:05:47.300 --> 00:05:51.250
So given a value t, the time
in this animation, we can

00:05:51.250 --> 00:05:53.790
calculate the x and y
values on the curve.

00:05:53.790 --> 00:05:56.740
One caveat that I mention in the
article as well is this is

00:05:56.740 --> 00:05:59.710
not necessarily the motion along
the curve that you want.

00:05:59.710 --> 00:06:04.070
What you really want is, in
general, to take the t value

00:06:04.070 --> 00:06:07.440
of how far along the curve is,
and use that to extract your x

00:06:07.440 --> 00:06:08.320
and y values.

00:06:08.320 --> 00:06:09.620
That requires a little
bit more code.

00:06:09.620 --> 00:06:12.470
I didn't want to get into it
in this simple example.

00:06:12.470 --> 00:06:14.910
The effect that you'd get by
using this simplistic approach

00:06:14.910 --> 00:06:18.180
here is, on hairpin turns,
you'd go a lot faster.

00:06:18.180 --> 00:06:20.090
So you really want to spread
out that motion

00:06:20.090 --> 00:06:21.600
evenly along the curve.

00:06:21.600 --> 00:06:22.590
Kind of a detail--

00:06:22.590 --> 00:06:24.530
maybe it'll matter in
some of your curves.

00:06:24.530 --> 00:06:25.920
So you should know about it.

00:06:25.920 --> 00:06:29.140
But if you want a simple
approach, here's one.

00:06:29.140 --> 00:06:31.720
So curved motion-- in general,
if you're moving stuff on the

00:06:31.720 --> 00:06:35.050
screen that's not just going in
one axis, consider moving

00:06:35.050 --> 00:06:38.740
it in a curve to give the user
more of a natural and organic

00:06:38.740 --> 00:06:40.130
feeling for your application.

00:06:40.130 --> 00:06:42.240
Make them feel like they're
actually interacting with

00:06:42.240 --> 00:06:44.450
something in the real world
instead of just some user

00:06:44.450 --> 00:06:45.720
interface on a boring screen.

00:06:45.720 --> 00:06:46.970
Thanks.

