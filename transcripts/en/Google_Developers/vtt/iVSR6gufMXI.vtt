WEBVTT
Kind: captions
Language: en

00:00:09.818 --> 00:00:10.578
BRIAN KENNISH: Hey everyone.

00:00:10.578 --> 00:00:11.138
My name is Brian Kennish.

00:00:11.138 --> 00:00:14.880
I'm a developer advocate on the
Google Chrome Team and the name

00:00:14.880 --> 00:00:16.960
of this session is, Google
Chrome Extensions How-to.

00:00:18.418 --> 00:00:21.418
So I wanted to do a quick
survey here and figure out how

00:00:21.418 --> 00:00:27.898
many of you have already built
a Google Chrome Extension.

00:00:27.898 --> 00:00:29.260
Well, I see people on my
team raising their hands

00:00:29.260 --> 00:00:31.498
which is a good sign.

00:00:31.498 --> 00:00:33.280
And how many of you
have built a browser

00:00:33.280 --> 00:00:35.200
extension of any sort?

00:00:35.200 --> 00:00:36.080
Oh, wow.

00:00:36.080 --> 00:00:37.620
Awesome, so a fair
number of you.

00:00:37.620 --> 00:00:38.260
Great.

00:00:38.260 --> 00:00:41.960
So in this talk I'm going to do
a little intro material, what

00:00:41.960 --> 00:00:45.580
Google Chrome Extensions are
and what the extension

00:00:45.580 --> 00:00:48.440
ecosystem looks like and then
I'll spend the bulk of the hour

00:00:48.440 --> 00:00:50.840
talking about the technical
bits of how you actually

00:00:50.840 --> 00:00:52.240
implement these things.

00:00:52.240 --> 00:00:55.438
And for those of you that are
already experienced extension

00:00:55.438 --> 00:00:58.720
developers I picked some new
extensions as examples and I'm

00:00:58.720 --> 00:01:00.118
going to pick them apart and
show you how they work, so

00:01:00.118 --> 00:01:02.680
there should be some new
content in there

00:01:02.680 --> 00:01:04.200
for you as well.

00:01:04.200 --> 00:01:06.640
All right, a couple of
housekeeping items

00:01:06.640 --> 00:01:08.520
before I dive in here.

00:01:08.520 --> 00:01:11.600
We have a wave channel
available for this talk, which

00:01:11.600 --> 00:01:14.520
you can get to you by going to
jump that's j.mp/chrome6.

00:01:18.238 --> 00:01:20.920
There's a moderator gadget in
there where you can cue up

00:01:20.920 --> 00:01:23.640
questions for me and I will
try to take some of those in

00:01:23.640 --> 00:01:26.180
addition to live questions
at the end of the talk.

00:01:26.180 --> 00:01:28.100
As a bit of foreshadowing I'm
actually going to be talking

00:01:28.100 --> 00:01:31.640
about a bunch about Google Wave
in this talk and how you can

00:01:31.640 --> 00:01:32.640
match it up with Chrome.

00:01:32.640 --> 00:01:37.740
And the second item is that we
had a suggested hashtag, which

00:01:37.740 --> 00:01:41.620
is also chrome6 to use with
your favorite microblogging

00:01:41.620 --> 00:01:45.340
service such as Google
Buzz, hint hint.

00:01:46.060 --> 00:01:49.500
So I've organized this talk
somewhat along the lines of

00:01:49.500 --> 00:01:51.280
a typical programming book.

00:01:51.840 --> 00:01:53.580
Like I said, I'm going to
start with some intro.

00:01:53.580 --> 00:01:56.100
Then I'm going to do the
canonical Hello World thing

00:01:56.100 --> 00:01:59.360
and live code the Hello
World of extension.

00:01:59.360 --> 00:02:02.400
Then I'm going to go through a
series of deeper dive technical

00:02:02.400 --> 00:02:06.358
topics, So I'll start by
talking about webbiness which

00:02:06.358 --> 00:02:08.758
is a fun word to say, but also
extensions happen to be webby

00:02:08.758 --> 00:02:11.038
and I'll talk about how so.

00:02:11.038 --> 00:02:13.318
Then I will get into
the feature set of

00:02:13.318 --> 00:02:16.618
the extension system.

00:02:16.618 --> 00:02:19.158
Next I'll talk about HTML5,
which is obviously a big topic

00:02:19.158 --> 00:02:22.658
of this years conference and
show you how you can integrate

00:02:22.658 --> 00:02:26.018
some HTML5 features
in your extensions.

00:02:26.018 --> 00:02:28.798
Then I'll talk about the
experimental stuff that were

00:02:28.798 --> 00:02:32.338
tinkering with in the extension
system and finally like I said,

00:02:32.338 --> 00:02:33.838
we'll do some Q and
A, time permitting.

00:02:35.558 --> 00:02:36.598
So this thing is awesome,
but I'm going to go over to

00:02:36.598 --> 00:02:43.838
the podium to drive now.

00:02:43.838 --> 00:02:48.258
So what are Google
Chrome extensions?

00:02:48.258 --> 00:02:50.318
So you already know what
browser extensions are of

00:02:50.318 --> 00:02:55.860
course, they're programs,
usually small that add some

00:02:55.860 --> 00:03:00.718
features to the core feature
set of the browser.

00:03:00.398 --> 00:03:03.318
If your browser has a healthy
extension ecosystem it means

00:03:03.318 --> 00:03:05.820
that there are thousands of
these extensions of these

00:03:05.820 --> 00:03:09.520
optional features that
are available to users.

00:03:09.520 --> 00:03:12.438
So essentially you can create
your own custom browser.

00:03:12.438 --> 00:03:14.218
So all of us are running
Chrome, we all have different

00:03:14.218 --> 00:03:15.398
sets of extensions installed.

00:03:16.638 --> 00:03:20.238
Essentially, we all have a
different and unique browser.

00:03:20.898 --> 00:03:24.820
When it came time to design an
extension system for Google

00:03:24.820 --> 00:03:27.840
Chrome, of course, we wanted to
apply some Chrome like thinking

00:03:27.840 --> 00:03:29.118
to how extensions should work.

00:03:29.118 --> 00:03:32.358
So we made it so that Chrome
extensions are simple,

00:03:32.358 --> 00:03:34.578
stable, and secure.

00:03:34.578 --> 00:03:39.500
In terms of simplicity, as I
hope I'll show later extensions

00:03:39.500 --> 00:03:42.318
are really easy to create.

00:03:42.318 --> 00:03:43.580
They're also simple in
terms of the UI that

00:03:43.580 --> 00:03:46.338
they present to users.

00:03:46.338 --> 00:03:49.098
So Chrome is obviously a
very streamlined browser.

00:03:49.098 --> 00:03:52.960
Even the name, Google Chrome is
an ironic play on the fact that

00:03:52.960 --> 00:03:55.860
there isn't much
browser chrome.

00:03:55.860 --> 00:03:59.000
And we want extensions to
work in the same vein.

00:03:59.000 --> 00:04:02.020
So our goal is to give
extensions all the UI that

00:04:02.020 --> 00:04:06.958
they need to do what they
want to do, but no more.

00:04:06.958 --> 00:04:10.538
In terms of stability, you
probably know that webpages

00:04:10.538 --> 00:04:13.018
in Chrome all run in
a separate process.

00:04:13.018 --> 00:04:16.680
So they can only have a limited
impact on the overall browser

00:04:16.680 --> 00:04:19.418
performance and we do the
same thing with extensions.

00:04:19.418 --> 00:04:23.340
So each extension will run its
own process and a poorly

00:04:23.340 --> 00:04:26.340
performing extension can only
have a limited impact on the

00:04:26.340 --> 00:04:29.998
browser performance as a whole.

00:04:29.998 --> 00:04:31.898
And in terms of security, we
make it so that extensions have

00:04:31.898 --> 00:04:36.160
to be really clear about
declaring their permissions

00:04:36.160 --> 00:04:37.458
within the browser to users.

00:04:37.458 --> 00:04:43.220
We've also worked hard to
isolate regular webpages from

00:04:43.220 --> 00:04:46.698
the extension system so that
it's very difficult for a

00:04:46.698 --> 00:04:49.528
malicious webpage to gain the
extra privileges that

00:04:49.528 --> 00:04:52.518
an extension has.

00:04:52.518 --> 00:04:55.458
And then we have a gallery
for extensions, which

00:04:55.458 --> 00:05:01.920
I'll pull up here.

00:05:01.920 --> 00:05:03.738
So this is our
extension gallery.

00:05:03.738 --> 00:05:07.498
We also tried to do some Chrome
like things with the gallery.

00:05:07.498 --> 00:05:10.878
We want it to be really fast
for developers to get their

00:05:10.878 --> 00:05:12.940
extensions live and
available to users.

00:05:12.940 --> 00:05:15.940
So almost all extensions are
automatically reviewed and

00:05:15.940 --> 00:05:18.200
approved and literally
available to the entire Chrome

00:05:18.200 --> 00:05:20.698
user base within minutes.

00:05:20.698 --> 00:05:23.438
We also want to make it easy
for users to stay up to date

00:05:23.438 --> 00:05:26.558
with the extensions that
they've installed and since

00:05:26.558 --> 00:05:30.720
there's nothing really easier
than automatic we've made it so

00:05:30.720 --> 00:05:34.720
that extensions that are in the
gallery can auto-update just

00:05:34.720 --> 00:05:36.778
like Chrome itself
auto-updates.

00:05:37.980 --> 00:05:41.778
So as a developer you add a new
version of your extension into

00:05:41.778 --> 00:05:44.760
the gallery and users, once
they're online get it

00:05:44.760 --> 00:05:53.580
within a couple of hours.

00:05:53.580 --> 00:05:56.220
Now I want to talk about the
health of the Google Chrome

00:05:56.220 --> 00:06:01.000
extension system and
show you some numbers.

00:06:02.120 --> 00:06:07.240
The gallery the I just showed,
we launched back in December,

00:06:07.240 --> 00:06:09.058
almost 6 months ago.

00:06:09.058 --> 00:06:12.880
And we were really blown away
by the fact that on launch day

00:06:12.880 --> 00:06:14.800
developers who up to that point
just had access to the

00:06:14.800 --> 00:06:16.600
extension system in the Chrome
dev channel had already

00:06:16.600 --> 00:06:20.418
uploaded more than 300
extensions to the gallery.

00:06:20.418 --> 00:06:24.178
We continue to be blown away
by how many great extensions

00:06:24.178 --> 00:06:26.618
developers have been creating.

00:06:26.618 --> 00:06:29.600
On average we're getting more
than 750 new extensions

00:06:29.600 --> 00:06:32.600
uploaded to the
gallery every month.

00:06:32.600 --> 00:06:34.778
If you think about that that's
actually more hours than there

00:06:34.778 --> 00:06:39.418
are in a month, so on average
every single hour a non

00:06:39.418 --> 00:06:42.918
Google developer is adding a
new feature to Chrome.

00:06:42.918 --> 00:06:45.398
It's pretty amazing.

00:06:45.398 --> 00:06:49.360
The usage numbers of Chrome
extensions have been

00:06:49.360 --> 00:06:51.758
equally impressive.

00:06:51.758 --> 00:06:55.358
More than 10 million extension
installs are happening

00:06:55.358 --> 00:06:57.860
every month.

00:06:57.860 --> 00:07:00.698
And that represents more
than 15% of the total

00:07:00.698 --> 00:07:02.838
Chrome user base.

00:07:02.838 --> 00:07:05.658
So more than 15% of Chrome
users right now have at

00:07:05.658 --> 00:07:07.538
least one Google Chrome
extension installed.

00:07:10.958 --> 00:07:15.220
All right, so let's talk about
some technical stuff now.

00:07:15.220 --> 00:07:17.160
So I should give you the caveat
that I am the world's worst

00:07:17.160 --> 00:07:21.758
typer, but extensions are so
simple that I thought it'd be a

00:07:21.758 --> 00:07:22.518
shame not to do some live
coding and show you how

00:07:22.518 --> 00:07:25.180
easy it is to create an
extension from scratch.

00:07:25.180 --> 00:07:27.638
If you see me make mistakes
though don't be afraid

00:07:27.638 --> 00:07:31.138
to call them out.

00:07:31.138 --> 00:07:33.858
So I've given myself
a set of steps here.

00:07:33.858 --> 00:07:37.798
So step one to creating a
Google Chrome extension,

00:07:37.798 --> 00:07:40.678
we just create a
plain, old directory.

00:07:40.678 --> 00:07:43.550
So I'm going to navigate to my
desktop here and I'm going

00:07:43.550 --> 00:07:48.698
to create a new folder.

00:07:48.698 --> 00:07:50.258
And since we're doing a
Hello World I'm just

00:07:50.258 --> 00:07:54.378
going to call this hello.

00:07:54.378 --> 00:07:55.258
There we go.

00:07:55.258 --> 00:07:56.000
Already a typo.

00:07:56.198 --> 00:08:00.220
And I'm going to open
up this directory.

00:08:00.220 --> 00:08:01.060
That's step one.

00:08:01.060 --> 00:08:02.500
Next I'm going to create
something called

00:08:02.500 --> 00:08:04.658
a manifest file.

00:08:04.578 --> 00:08:06.838
So I'm going to go back
to this directory and

00:08:06.838 --> 00:08:09.228
create a new text file.

00:08:11.458 --> 00:08:15.158
And the manifest file is the
one file in the extension

00:08:15.158 --> 00:08:17.278
system that has to have a
particular name and that

00:08:17.278 --> 00:08:17.898
name is manifest.json.

00:08:25.818 --> 00:08:28.040
Then I'm going to pull this
file into my text editor.

00:08:28.040 --> 00:08:29.938
I'm just using an
ordinary text editor.

00:08:29.938 --> 00:08:35.440
I could literally be
using anything here.

00:08:35.440 --> 00:08:38.860
And as you've probably already
deduced from the name this

00:08:38.860 --> 00:08:40.120
is a JSON formated file.

00:08:40.120 --> 00:08:44.520
And the manifest file is a
descriptive file that tells

00:08:44.520 --> 00:08:46.380
the extension system all
about your extension.

00:08:46.380 --> 00:08:49.880
Things like its name, what
permissions it has within the

00:08:49.880 --> 00:08:54.080
extension system and pointers
to its other components.

00:08:54.080 --> 00:08:57.300
So I'm going to create a
JavaScript object here and

00:08:57.300 --> 00:09:00.900
then I'm going to give it
a series of required and

00:09:00.900 --> 00:09:02.580
optional properties.

00:09:02.580 --> 00:09:08.280
So the first will be a name and
I'm going to be real clever

00:09:08.280 --> 00:09:11.800
here and call this hello I/O.

00:09:15.960 --> 00:09:20.720
Next I'm going to give
it a version string.

00:09:20.720 --> 00:09:21.720
And I'm just going to
give this a value of 1.

00:09:21.720 --> 00:09:24.960
So this version string is
actually a key piece of data.

00:09:24.960 --> 00:09:27.378
I mentioned earlier that
extensions can auto-update and

00:09:27.378 --> 00:09:30.658
this is the mechanism by which
the extension system does that.

00:09:30.658 --> 00:09:33.638
So it'll examine the version
string of the extension and

00:09:33.638 --> 00:09:39.280
it'll know whether or not
an update needs to occur.

00:09:39.280 --> 00:09:45.340
Next I'm going to give this
extension a description.

00:09:45.340 --> 00:09:53.086
And I'll just say, I like
to say hi and try to

00:09:53.086 --> 00:09:54.504
spell that right.

00:09:55.440 --> 00:09:58.500
And then I'm going to give
it a series of icons.

00:09:58.500 --> 00:10:02.460
So this will be used at various
points by the extension system.

00:10:02.460 --> 00:10:04.860
This is going to take a hash.

00:10:04.860 --> 00:10:09.540
The first one is going to
be a 48 by 48 pixel icon.

00:10:09.540 --> 00:10:14.440
And this is used on the
extension management page.

00:10:14.440 --> 00:10:16.040
We'll look at that
in just a second.

00:10:16.040 --> 00:10:20.180
And the next will be
128 by 128, which gets

00:10:20.180 --> 00:10:29.900
used at install time.

00:10:29.900 --> 00:10:32.518
And then finally I'm going to
give this extension some UI and

00:10:32.518 --> 00:10:39.660
the UI I'm going to use is
called a browser action.

00:10:39.660 --> 00:10:43.160
This is also going
to take an object.

00:10:43.160 --> 00:10:46.180
I'm only going to partially
fill this in for now because

00:10:46.180 --> 00:10:49.360
I want to get this extension
to a runnable state.

00:10:49.360 --> 00:10:51.840
So I'm going to add
a default icon.

00:10:54.720 --> 00:10:58.660
So browser action is a little
piece of UI that appears in the

00:10:58.660 --> 00:11:03.820
Google Chrome toolbar and it
can take an icon up to 19 by 19

00:11:03.820 --> 00:11:10.060
pixels, so I'm going to give
this things a 19 pixel icon.

00:11:10.060 --> 00:11:11.500
And I should be good
to go for now.

00:11:11.500 --> 00:11:14.096
So I'm going to save this.

00:11:18.360 --> 00:11:21.540
All right, one more thing
I have to do before I run

00:11:21.540 --> 00:11:25.720
this us add those icons
that I just specified.

00:11:25.720 --> 00:11:29.080
So you guys probably don't want
to see me mess with stuff in

00:11:29.080 --> 00:11:31.460
Photoshop for the next 30
minutes so I premade these.

00:11:31.460 --> 00:11:36.160
I'm going to go back to
my desktop here and I'm

00:11:36.160 --> 00:11:50.520
just going to copy these
icons into my folder.

00:11:50.520 --> 00:11:52.680
All right, at this
point I should have a

00:11:52.680 --> 00:11:54.140
runnable extension.

00:11:54.140 --> 00:11:59.160
Let me just clean
up a little here.

00:11:59.160 --> 00:12:03.340
So I'm going to go to a new
browser window and I'm going

00:12:03.340 --> 00:12:06.420
to go to the extension
management page.

00:12:06.420 --> 00:12:09.380
And open developer mode here
and I'm going to say load

00:12:09.380 --> 00:12:10.260
unpacked extensions.

00:12:10.260 --> 00:12:13.800
This extension is unpacked
because it's not all

00:12:13.800 --> 00:12:16.800
packaged for users yet.

00:12:16.800 --> 00:12:18.900
And I'm going to navigate
to the folder I just

00:12:18.900 --> 00:12:21.400
created and say, OK.

00:12:21.400 --> 00:12:22.818
And boom, there we go.

00:12:22.818 --> 00:12:26.420
So we've created an
extension here.

00:12:26.420 --> 00:12:28.538
Now you can see here
is the browser action

00:12:28.538 --> 00:12:29.238
that I just created.

00:12:29.238 --> 00:12:33.800
Let me zoom in there for you
since it's a little small.

00:12:33.800 --> 00:12:35.960
This is that 19 by
19 pixel icon.

00:12:39.080 --> 00:12:42.740
Now you can see if I click on
this thing, which is what I'm

00:12:42.740 --> 00:12:44.040
doing now, nothing
actually happens.

00:12:44.040 --> 00:12:49.120
So I managed to create a Hello
World program that does

00:12:49.120 --> 00:12:51.560
everything except
say, hello world.

00:12:51.560 --> 00:12:57.540
So let me actually add in
that Hello World part.

00:12:57.540 --> 00:13:00.620
So to do that I'm going to
create a popup and this is

00:13:00.620 --> 00:13:03.640
going to be a piece of UI that
appears when a user clicks

00:13:03.640 --> 00:13:06.060
on that browser action.

00:13:06.060 --> 00:13:08.580
I'm going to go back
to my folder here and

00:13:08.580 --> 00:13:14.360
create a new file.

00:13:14.360 --> 00:13:15.580
And I'm going to call
this popup.html.

00:13:22.560 --> 00:13:25.200
And before I can actually
use this I have to point

00:13:25.200 --> 00:13:26.500
to it in my manifest file.

00:13:26.500 --> 00:13:28.740
So I'm going to add a
couple more things into my

00:13:28.740 --> 00:13:30.178
browser action UI here.

00:13:31.580 --> 00:13:37.420
The first is going to
be a default title.

00:13:37.420 --> 00:13:40.000
This is going to be a tool tip
that will appear when the

00:13:40.000 --> 00:13:43.960
user mouses over the
browser action icon.

00:13:43.960 --> 00:13:47.680
And I'll just say, click
for a special message.

00:13:51.700 --> 00:13:53.020
And then I'm going to add one
more thing, which is that popup

00:13:53.020 --> 00:13:54.880
file that I just created.

00:13:55.200 --> 00:13:59.100
So I'm going to say popup
and point to popup.html.

00:14:00.000 --> 00:14:03.640
And then I'll save here.

00:14:06.720 --> 00:14:09.000
So this popup file is just
an arbitrary html file.

00:14:09.000 --> 00:14:13.080
I'm going to drag
it into my editor.

00:14:13.800 --> 00:14:17.470
For those of you that are big
proponents of valid html you

00:14:17.470 --> 00:14:19.280
might want to look away for the
next 2 minutes and plug your

00:14:19.280 --> 00:14:23.360
ears because I'm not going
to concentrate on that.

00:14:23.360 --> 00:14:25.200
So I'm just going to create a
very simple html file here.

00:14:25.560 --> 00:14:28.460
I'm going to create a
paragraph, give it a little

00:14:28.460 --> 00:14:37.660
style and say white
space, no wrap.

00:14:37.660 --> 00:14:41.440
Just so this thing
doesn't break.

00:14:41.440 --> 00:14:47.980
And I'm going to say my hello
world thing here and close

00:14:47.980 --> 00:14:50.440
out that paragraph and
I should be good to go.

00:14:50.440 --> 00:14:52.380
So I'm going to save this.

00:14:53.180 --> 00:14:56.600
Now all I have to do to see the
results in my change is go to

00:14:56.600 --> 00:15:04.840
my extension management page
and reload this extension.

00:15:04.840 --> 00:15:09.440
Expand this here.

00:15:09.720 --> 00:15:15.900
Now you can see when I
mouseover it I get that

00:15:15.900 --> 00:15:19.420
tool tip that I created.

00:15:19.420 --> 00:15:23.080
And when I click, voila,
we have our Hello World.

00:15:23.080 --> 00:15:25.400
So now we're done
with our extension.

00:15:25.400 --> 00:15:30.140
I could stop there, but since
we have this nice gallery let

00:15:30.140 --> 00:15:38.500
me go ahead and actually
upload this to the gallery.

00:15:38.500 --> 00:15:40.100
So to do that I just hit
publisher extensions

00:15:40.100 --> 00:15:43.520
in the gallery.

00:15:43.520 --> 00:15:56.240
I'm going to log-in to my Gmail
account and I'm going to

00:15:56.240 --> 00:16:02.080
click add a new item here.

00:16:02.080 --> 00:16:04.540
So this takes a zip file.

00:16:04.540 --> 00:16:17.520
So I'm going to just zip us
this directory that we created.

00:16:17.520 --> 00:16:22.460
So we now have the zip and
I'm going to choose a file.

00:16:22.460 --> 00:16:32.618
I'm going to navigate over
to it and hit upload.

00:16:40.760 --> 00:16:43.460
Now at this point I could add
some nice text that describes

00:16:43.460 --> 00:16:45.680
the extension, some
pretty icons.

00:16:45.680 --> 00:16:48.180
Maybe even a video that shows
you how to use it since it's

00:16:48.180 --> 00:16:50.758
very complex, but I'm not
going to do that for now

00:16:50.758 --> 00:16:52.000
for time considerations.

00:16:52.000 --> 00:16:58.220
I'll just go ahead
and publish this.

00:16:58.220 --> 00:16:58.820
And say, yes.

00:16:58.820 --> 00:17:04.800
So for those of you that have
laptops with you-- uh oh, I

00:17:04.800 --> 00:17:06.600
have to specify a
language here.

00:17:07.520 --> 00:17:10.360
Let's try that again.

00:17:10.360 --> 00:17:13.260
As I was saying, for those of
you that have laptops you can

00:17:13.260 --> 00:17:15.440
actually go into the extension
gallery now, which is that

00:17:15.440 --> 00:17:18.298
chrome.google.com/extensions
and download this

00:17:18.298 --> 00:17:27.440
awesome extensions that
we just created.

00:17:27.440 --> 00:17:31.980
All right, so I originally
concluded this slide with a

00:17:31.980 --> 00:17:36.820
little joke here, but the thing
is we launched a web store

00:17:36.820 --> 00:17:38.340
yesterday as you guys probably
all know and soon you'll be

00:17:38.340 --> 00:17:41.340
able to sell your apps
including extensions online and

00:17:41.340 --> 00:17:43.500
it'll be really easy to
actually make money
312
00:17:43,5 --&gt; 00:17:43,3
from your apps.

00:17:43.300 --> 00:17:47.838
Of course, even last week you
could make money from your

00:17:47.838 --> 00:17:50.520
extensions, but our goal with
this web store is to really

00:17:50.520 --> 00:17:53.380
reduce the friction for
developers making money.

00:17:53.380 --> 00:17:56.118
Doing things like collecting
money from different countries

00:17:56.118 --> 00:17:59.738
and in different currencies is
not easy and we want to take

00:17:59.738 --> 00:18:02.360
that burden on for developers,
so this is a nice thing to

00:18:02.360 --> 00:18:09.760
have if you're interested in
monetizing your extensions.

00:18:09.760 --> 00:18:11.100
So next I'm going to go
through that series

00:18:11.100 --> 00:18:13.660
of technical topics.

00:18:13.660 --> 00:18:17.920
And I'll start by talking about
well, if you only take

00:18:17.920 --> 00:18:19.858
one thing away from this
presentation I think it should

00:18:19.858 --> 00:18:22.500
be this fact, which is
extensions are webpages.

00:18:22.500 --> 00:18:26.260
It is a little bit of an
oversimplification, so I'm

00:18:26.260 --> 00:18:29.420
going to correct this
slightly to say extensions

00:18:29.420 --> 00:18:30.580
are mostly webpages.

00:18:31.220 --> 00:18:34.820
And the reason I say that this
is the most important nothing

00:18:34.820 --> 00:18:38.080
to take away from this talk is
that you already know how to

00:18:38.080 --> 00:18:42.060
develop webpages, therefore you
already know mostly how

00:18:42.060 --> 00:18:44.220
to develop extensions.

00:18:44.220 --> 00:18:49.380
So in particular, just like
webpages, extensions are made

00:18:49.380 --> 00:18:51.540
out of standard web technology.

00:18:51.540 --> 00:18:55.580
So html, CSS, JavaScript
and so forth.

00:18:55.580 --> 00:18:58.760
Pretty much anything that you
can get Google Chrome to

00:18:58.760 --> 00:19:03.760
render, images, Flash movies,
Java Applets and so on, you

00:19:03.760 --> 00:19:06.140
can put into your extension.

00:19:06.140 --> 00:19:10.220
Secondly, as we just saw the
development and debugging

00:19:10.220 --> 00:19:12.140
process is very similar for
extensions and webpages.

00:19:13.220 --> 00:19:16.518
So when you're developing your
extension you just edit it

00:19:16.518 --> 00:19:19.618
in any text editor, save
your changes and reload.

00:19:19.618 --> 00:19:20.540
Just like you do
with a webpage.

00:19:22.400 --> 00:19:24.840
In the same way you can use
Google Chrome's developer

00:19:24.840 --> 00:19:26.598
tools to debug.

00:19:26.598 --> 00:19:30.720
If you haven't used Google
Chromes developer tools at all

00:19:30.720 --> 00:19:32.240
or haven't used them for
awhile, they've gotten

00:19:32.240 --> 00:19:34.380
extremely powerful in the last
6 months and I highly

00:19:34.380 --> 00:19:35.078
recommend them.

00:19:35.078 --> 00:19:36.640
I'll show you some tricks
that you can do with

00:19:36.640 --> 00:19:38.780
them in a little bit.

00:19:38.780 --> 00:19:42.040
And finally, extensions have
access to all the other handy

00:19:42.040 --> 00:19:43.960
APIs that webpages
have access to.

00:19:43.960 --> 00:19:46.860
So you can use DOM to traverse
and manipulate your extensions.

00:19:47.140 --> 00:19:50.060
You can use XHR to make cross
origin requests, which

00:19:50.060 --> 00:19:51.900
we'll look at in a second.

00:19:52.640 --> 00:19:56.178
Since extensions don't have to
be cross browser compatible you

00:19:56.178 --> 00:19:58.078
can use more cutting edge
features that are only

00:19:58.078 --> 00:20:02.440
available in some browsers, you
know obviously Chrome.

00:20:02.440 --> 00:20:05.498
Things like HTML5, which
we'll talk about later.

00:20:05.498 --> 00:20:08.940
There's amazing amount of HTML5
features packed into Chrome.

00:20:08.940 --> 00:20:11.240
You can also use WebKit
vendor experiments.

00:20:11.240 --> 00:20:14.220
There's some really nice CS
things in particular for doing

00:20:14.220 --> 00:20:15.140
filters and animations.

00:20:15.140 --> 00:20:19.520
And finally, the V8 JavaScript
engine that Chrome uses has a

00:20:19.520 --> 00:20:22.460
built-in JSON library, which is
very nice if you're doing

00:20:22.460 --> 00:20:24.318
any kind of XHR work.

00:20:24.318 --> 00:20:26.758
You can just parse and string
a file without having to

00:20:26.758 --> 00:20:30.120
pull in any extra code.

00:20:30.120 --> 00:20:33.780
Now I said extensions are
mostly like webpages.

00:20:33.720 --> 00:20:35.620
Here's the part that's
not covered by mostly.

00:20:35.620 --> 00:20:38.080
There are some extra things
that extensions can do that

00:20:38.080 --> 00:20:41.660
a regular webpage can not.

00:20:41.660 --> 00:20:43.440
The first thing is that
extensions as we've seen,

00:20:43.440 --> 00:20:45.838
have some more access
to more UI surfaces.

00:20:48.080 --> 00:20:50.060
The first, which we've already
looked at is that browser

00:20:50.060 --> 00:20:54.320
action, which is this icon that
installs in the Chrome toolbar.

00:20:55.200 --> 00:20:57.880
And like we saw it can
optionally have a

00:20:57.880 --> 00:20:59.560
popup attached to it.

00:20:59.560 --> 00:21:03.140
Next we have a page action,
which is an icon of similar

00:21:03.140 --> 00:21:06.298
size, but unlike a browser
action which appears in the

00:21:06.298 --> 00:21:09.660
Chrome toolbar and always
appears on every single tab

00:21:09.660 --> 00:21:12.160
that the user has, a
page action appears in

00:21:12.160 --> 00:21:12.380
the Chrome omnibox.

00:21:13.560 --> 00:21:15.940
And it can appear selectively.

00:21:15.940 --> 00:21:18.820
So it can be toggled on and off
depending on the page that

00:21:18.820 --> 00:21:20.338
the user is visiting.

00:21:20.338 --> 00:21:23.900
And this can also have a
popup attached to it.

00:21:23.900 --> 00:21:27.200
Next we have content scripts,
which are similar to grease

00:21:27.200 --> 00:21:28.118
monkey or user scripts.

00:21:28.118 --> 00:21:32.260
They let you inject arbitrary
CSS and JavaScript into any

00:21:32.260 --> 00:21:34.800
matching page that you want to.

00:21:34.800 --> 00:21:40.318
And then we have a bunch of UI
surfaces that are not available

00:21:40.318 --> 00:21:41.618
in all versions of Chrome yet.

00:21:41.618 --> 00:21:45.078
I'll start with the ones that
are most available and move to

00:21:45.078 --> 00:21:47.358
the ones that are
lesser available.

00:21:47.520 --> 00:21:49.400
The first is desktop
notifications.

00:21:49.400 --> 00:21:53.358
So this is available everywhere
except in the stable

00:21:53.358 --> 00:21:54.980
channel of Chrome.

00:21:54.980 --> 00:21:58.358
It will be available, actually
let me clarify a little bit.

00:21:58.358 --> 00:22:01.500
So desktop notifications you
can use in every version

00:22:01.500 --> 00:22:02.300
of Chrome right now.

00:22:02.300 --> 00:22:05.778
There's a special hook into the
extension system where you

00:22:05.778 --> 00:22:08.238
don't have to explicitly ask
the user for permission every

00:22:08.238 --> 00:22:11.460
time you want to show an
extension that isn't yet

00:22:11.460 --> 00:22:12.520
available in the stable
version of Chrome.

00:22:12.520 --> 00:22:14.980
But it's available everywhere
else and it will be available

00:22:14.980 --> 00:22:16.060
in the next stable version.

00:22:16.060 --> 00:22:21.098
So these are little info
bubbles that appear on the

00:22:21.098 --> 00:22:23.980
bottom of the user or
top of the user screen.

00:22:24.200 --> 00:22:27.140
Next we have a couple of
experimental UI surfaces.

00:22:27.798 --> 00:22:32.460
The first is infobars, which
are the things you see for

00:22:32.460 --> 00:22:35.710
example when you enter a
password into Google Chrome and

00:22:35.710 --> 00:22:39.780
it asks you if you want to
remember, save your password,

00:22:39.780 --> 00:22:41.800
which you saw earlier when
I plugged in my password.

00:22:42.040 --> 00:22:44.040
So you can actually initiate
these and generate

00:22:44.040 --> 00:22:47.760
these on your own.

00:22:47.760 --> 00:22:50.620
And we also have an
experimental context menu

00:22:50.620 --> 00:22:56.260
future that lets you add items
to the users context menu.

00:22:56.260 --> 00:22:58.100
Next we have three special
components that an

00:22:58.100 --> 00:22:59.560
extension can have.

00:22:59.560 --> 00:23:04.840
The first we already saw,
it's a manifest file.

00:23:04.840 --> 00:23:08.100
Next an extension can have a
background page, which is a

00:23:08.100 --> 00:23:12.760
page that runs for the entire
lifetime of the extension, but

00:23:12.760 --> 00:23:13.140
it's not shown to the user.

00:23:13.140 --> 00:23:16.660
It's useful for doing things
like coordinating tasks if

00:23:16.660 --> 00:23:19.880
you have a complex extension
or remembering state

00:23:19.880 --> 00:23:20.118
that sort of thing.

00:23:20.118 --> 00:23:23.020
We'll look at some background
pages in a little bit.

00:23:23.020 --> 00:23:25.980
And finally, you can have an
options page, which lets you

00:23:25.980 --> 00:23:29.810
give the user the ability to
configure your extension.

00:23:30.700 --> 00:23:33.260
Next we have a set of
privileged APIs that

00:23:33.260 --> 00:23:35.640
extensions can hook into.

00:23:35.640 --> 00:23:40.898
This is a cool diagram of the
extension APIs that a non

00:23:40.898 --> 00:23:43.700
Google developer created.

00:23:43.700 --> 00:23:48.640
So there are four APIs for
doing things in the browser.

00:23:48.640 --> 00:23:51.020
Things like manipulating
Windows tabs and then history

00:23:51.020 --> 00:23:53.780
and bookmarks as well.

00:23:53.780 --> 00:23:57.838
And then we also have four APIs
that are extension specific.

00:23:57.838 --> 00:23:59.540
So they let you manage
your browser actions

00:23:59.540 --> 00:24:00.720
and page actions.

00:24:00.720 --> 00:24:06.360
We also have a utility class
for sending messages within an

00:24:06.360 --> 00:24:09.258
extension and we had an i18n
class for localizing

00:24:09.258 --> 00:24:11.380
your extension into
different languages.

00:24:11.380 --> 00:24:14.900
So I should say that
automatically your extension

00:24:14.900 --> 00:24:19.120
gets this Chrome object and all
of these APIs are modules

00:24:19.120 --> 00:24:21.440
underneath that Chrome
object that you can

00:24:21.440 --> 00:24:23.640
automatically access.

00:24:23.640 --> 00:24:26.260
All right, so next I want to
take a look at some examples

00:24:26.260 --> 00:24:28.680
that implement this stuff.

00:24:28.680 --> 00:24:30.420
And I've put together some
these cases of things

00:24:30.420 --> 00:24:33.380
that you might want to
do with extensions.

00:24:33.380 --> 00:24:35.480
The first I'm calling
the notifier pattern.

00:24:35.480 --> 00:24:38.580
This is quite a common
pattern for an extension.

00:24:38.580 --> 00:24:44.200
So the scenario is you have
some sort of data that

00:24:44.200 --> 00:24:47.360
you want to manage and
display for the user.

00:24:47.960 --> 00:24:49.500
It could be local data.

00:24:49.500 --> 00:24:54.780
For example, you might want to
keep track of how much the

00:24:54.780 --> 00:24:57.118
users is spending on the
internet and showing it to them

00:24:57.118 --> 00:25:01.300
or showing them what pages
they visit most often.

00:25:01.300 --> 00:25:03.160
But more likely it's going to
be some kind of remote data.

00:25:03.160 --> 00:25:06.980
A good example of this would be
one of the more popular

00:25:06.980 --> 00:25:09.180
extensions is the Gmail checker
which shows you a count

00:25:09.180 --> 00:25:12.680
of your unread messages.

00:25:12.680 --> 00:25:15.400
So once you have this thing and
what we're talking about here

00:25:15.400 --> 00:25:18.260
is generally smallish data that
you could display with a few

00:25:18.260 --> 00:25:19.520
characters or a number.

00:25:19.520 --> 00:25:21.300
You're going to want
to show some kind of

00:25:21.300 --> 00:25:23.700
counter to the user.

00:25:23.700 --> 00:25:27.740
And further you might want to
add some more details, so if a

00:25:27.740 --> 00:25:31.420
user initiates some click on
the counter you can show

00:25:31.420 --> 00:25:33.420
them additional details.

00:25:33.420 --> 00:25:37.718
So the way we can implement
something like this is first

00:25:37.718 --> 00:25:40.140
to pull down data we can
use cross origin XHR.

00:25:40.598 --> 00:25:42.440
So the Chrome extension
system lets you make

00:25:42.440 --> 00:25:43.800
cross origin requests.

00:25:43.800 --> 00:25:45.040
I should probably explain XHR.

00:25:46.338 --> 00:25:48.160
For those of you that aren't
familiar with this XHR

00:25:48.160 --> 00:25:50.920
is XML HCP request.

00:25:50.920 --> 00:25:55.840
It's sort of the flux
capacitor of AJAX.

00:25:55.840 --> 00:26:00.240
It's what makes AJAX possible.

00:26:00.240 --> 00:26:03.060
So once you have this data in
order to display it we can

00:26:03.060 --> 00:26:05.660
use something called a
browser action badge.

00:26:05.660 --> 00:26:07.280
So this is a little piece
of UI that I didn't

00:26:07.280 --> 00:26:09.120
talk about earlier.

00:26:09.120 --> 00:26:13.098
You can overlay some characters
automatically on top of

00:26:13.098 --> 00:26:14.960
your browser action badge.

00:26:15.920 --> 00:26:18.060
These characters are variable
with font so you can fit

00:26:18.060 --> 00:26:21.360
somewhere between 4 and
6 characters in there.

00:26:21.360 --> 00:26:25.140
So it's good for things like
showing a number especially or

00:26:25.140 --> 00:26:27.180
small amount of written text.

00:26:28.020 --> 00:26:31.876
And finally we can attach a
popup to this so that if the

00:26:31.876 --> 00:26:34.500
user clicks on our browser
action badge and wants more

00:26:34.500 --> 00:26:36.818
information we can show them
more information about the

00:26:36.818 --> 00:26:38.760
items that we're displaying.

00:26:38.760 --> 00:26:43.220
So the example extension that
I'm going to show here, I'm

00:26:43.220 --> 00:26:52.920
going to navigate back
to the gallery here.

00:26:52.920 --> 00:26:55.320
And I'm going to show you this
Google Wave Notifier that

00:26:55.320 --> 00:26:57.160
we just released yesterday.

00:26:57.160 --> 00:27:00.180
We worked in tandem with
the Wave team on this.

00:27:00.180 --> 00:27:03.380
They've created a new
JSON-based API that lets you

00:27:03.380 --> 00:27:08.040
get a snapshot of a users inbox
provided that they authorized

00:27:08.040 --> 00:27:12.526
you to do so and I'm going
to install this thing.

00:27:14.400 --> 00:27:17.400
You'll notice that it's telling
me what permissions this

00:27:17.400 --> 00:27:21.960
extension has first of all.

00:27:21.960 --> 00:27:25.960
And you'll see that it added
this browser action badge here.

00:27:25.960 --> 00:27:27.660
Right now it's grayed out
and has a question mark.

00:27:27.660 --> 00:27:31.980
I'll zoom in there so you can
see it a little bit better.

00:27:31.980 --> 00:27:33.960
And I'm taken to an
oauth page here.

00:27:33.960 --> 00:27:36.060
So I'm going to go through
the typical oauth dance

00:27:36.060 --> 00:27:38.098
and authenticate here.

00:27:38.098 --> 00:27:41.418
Once I hit grant access here if
you pay attention to the badge

00:27:41.418 --> 00:27:44.240
up here it's going to change
colors, animate, and then it

00:27:44.240 --> 00:27:47.494
will eventually show the count
of my unread Wave messages.

00:27:53.242 --> 00:27:54.838
So there we go.

00:27:54.838 --> 00:28:01.340
It's now in color and I see
that I have 7 unread Waves.

00:28:01.340 --> 00:28:04.720
And I can click on this
thing to show those Waves.

00:28:04.358 --> 00:28:08.800
I'm seeing 5 of them
by default here.

00:28:08.800 --> 00:28:11.580
I can actually configure it
so it shows me all of them.

00:28:11.580 --> 00:28:16.140
If I go to the options page
here I can say show me up

00:28:16.140 --> 00:28:22.760
to 20 and then I'll see
all of my Waves here.

00:28:22.760 --> 00:28:24.020
That's basically a pretty
common pattern among

00:28:24.020 --> 00:28:25.760
extensions, so let's
take a look at how this

00:28:25.760 --> 00:28:31.560
thing is implemented.

00:28:33.480 --> 00:28:35.420
First we'll talk
about the XHR part.

00:28:35.420 --> 00:28:42.220
I'm going to start by pulling
up the manifest file here.

00:28:42.220 --> 00:28:46.720
And this looks pretty similar
to the manifest file that we

00:28:46.720 --> 00:28:48.598
created even though this is a
much more complex extension.

00:28:48.598 --> 00:28:53.040
One thing that's new in here
is this permissions property.

00:28:53.040 --> 00:28:57.160
So the first thing that we have
in here is the tabs permission.

00:28:57.480 --> 00:29:00.720
For some of the APIs, those
privileged APIs that I talked

00:29:00.720 --> 00:29:03.180
about they require some extra
permission and the tabs

00:29:03.180 --> 00:29:04.040
API is one of them.

00:29:04.040 --> 00:29:07.800
So we're using the tabs
API in this extension

00:29:07.800 --> 00:29:09.740
to create new windows.

00:29:09.740 --> 00:29:12.798
For example, that oauth page
opened up a new window

00:29:12.798 --> 00:29:13.538
in the users browser.

00:29:13.538 --> 00:29:15.720
We need the tabs
API to do that.

00:29:15.720 --> 00:29:18.098
Also, when you click on those
Waves in the popup it'll open

00:29:18.098 --> 00:29:21.940
up the Wave client and a new
tab and we need the tabs

00:29:21.940 --> 00:29:22.480
API to do that as well.

00:29:22.480 --> 00:29:29.160
In terms of XHR we have these 2
URLs specified here and this is

00:29:29.160 --> 00:29:31.078
telling the extension system
that we're allowed to make

00:29:31.078 --> 00:29:33.918
cross origin requests
to these URLs.

00:29:36.420 --> 00:29:41.818
So inside our extension could
we would just make, once we had

00:29:41.818 --> 00:29:45.278
those permissions, we would do
XHR work just as we

00:29:45.278 --> 00:29:46.180
normally would.

00:29:46.180 --> 00:29:48.560
Now I'm not going to show it to
you in this extension because

00:29:48.560 --> 00:29:50.530
it's kind of buried in a
library, but I'll point you to

00:29:50.530 --> 00:29:52.098
the library that it uses
because it's quite useful if

00:29:52.098 --> 00:29:55.600
you're doing any oauth work.

00:29:55.600 --> 00:29:59.980
We provide this oauth
library that makes doing

00:29:59.980 --> 00:30:00.340
oauth quite simple.

00:30:00.340 --> 00:30:05.578
So there's not a whole lot
of knowing of what the

00:30:05.578 --> 00:30:07.960
bits and pieces of
oauth are to use this.

00:30:07.960 --> 00:30:10.580
You can just use it
pretty seamlessly.

00:30:10.580 --> 00:30:13.880
So next let's talk about how we
go about, once we have this

00:30:13.880 --> 00:30:15.060
data pull in how we go about
actually displaying

00:30:15.060 --> 00:30:19.740
it for the user.

00:30:19.740 --> 00:30:22.858
So I'm going to open this
library file where the

00:30:22.858 --> 00:30:30.240
displaying is done and we have
a function in here where we set

00:30:30.240 --> 00:30:33.446
our browser action badge.

00:30:33.446 --> 00:30:36.400
And the first thing that we do
it is we set a color on that

00:30:36.400 --> 00:30:43.640
badge and we do this by calling
the chrome.browseraction API

00:30:43.640 --> 00:30:48.680
and using a method called
set badge background color.

00:30:48.680 --> 00:30:52.580
That just takes a color
property, which is an

00:30:52.580 --> 00:30:57.338
array of RGBA values.

00:30:57.338 --> 00:31:01.900
And then we have another
function in here for actually

00:31:01.900 --> 00:31:02.600
setting the badge text.

00:31:02.600 --> 00:31:08.560
This is that same API and we
call the set badge text method,

00:31:08.560 --> 00:31:11.500
which takes a text property
and then a string.

00:31:11.500 --> 00:31:13.118
And that's how we
set the badge text.

00:31:13.118 --> 00:31:16.598
Finally, we have this popup
that we display when

00:31:16.598 --> 00:31:18.120
the user clicks on the
browser action badge.

00:31:18.700 --> 00:31:26.420
Look at how that's implemented.

00:31:26.420 --> 00:31:29.960
So a common pattern that I
often do when I'm creating

00:31:29.960 --> 00:31:33.298
these popups, especially things
that are displaying a lot of

00:31:33.298 --> 00:31:38.400
data, as you can see this is
all the HTML for the

00:31:38.400 --> 00:31:43.798
popup, is that I'll
just create a template.

00:31:43.798 --> 00:31:47.358
So here I have a template
called Digest, which

00:31:47.358 --> 00:31:49.680
will contain each of
those wave digests.

00:31:49.680 --> 00:31:54.240
And it has two pieces of
data within it, a title

00:31:54.240 --> 00:31:58.580
and then a snippet.

00:31:58.580 --> 00:32:02.300
You can see that I've given
this an ID of template.

00:32:02.300 --> 00:32:08.940
Then if we go over to my CSS
here all I'm doing is making

00:32:08.940 --> 00:32:11.680
that template invisible.

00:32:11.680 --> 00:32:16.180
So when I'm actually ready to
use the template I'm going to

00:32:16.180 --> 00:32:20.598
gather all my data together and
like I said, this is a frequent

00:32:20.598 --> 00:32:20.900
pattern that you'll do.

00:32:20.900 --> 00:32:23.160
You're going to loop through
your data and populate

00:32:23.160 --> 00:32:24.040
that template.

00:32:25.060 --> 00:32:30.300
So here we have our loop for
going through the data and then

00:32:30.300 --> 00:32:34.460
here's the key piece of code
that takes that template.

00:32:34.460 --> 00:32:42.660
You can see that it clones it
right here and then it appends

00:32:42.660 --> 00:32:47.280
the clone to the
body over here.

00:32:47.280 --> 00:32:49.800
And then once we have that
template appended to the body

00:32:49.800 --> 00:32:51.920
we just populate it with our
data and we just keep doing

00:32:51.920 --> 00:32:53.538
that over and over again
in that [? array. ?]

00:32:53.538 --> 00:32:56.058
So it's a really nice way to
have a very small amount

00:32:56.058 --> 00:33:05.100
code and easily fill up
a large amount of data.

00:33:05.400 --> 00:33:11.240
So the next use case that I'm
going to show you I call

00:33:11.240 --> 00:33:12.740
the Detector Pattern.

00:33:12.740 --> 00:33:16.440
It's also a frequent thing that
we see done with extensions.

00:33:16.440 --> 00:33:22.660
So the scenario here is that we
want to figure out if pages

00:33:22.660 --> 00:33:25.680
that the user is navigating to
contains some piece

00:33:25.680 --> 00:33:26.860
of key data.

00:33:26.860 --> 00:33:29.380
So we'll do some matching
against the pages that

00:33:29.380 --> 00:33:30.960
the user goes to.

00:33:30.960 --> 00:33:33.140
And then we just wanted to do a
simple indicator saying that

00:33:33.140 --> 00:33:37.078
yes or no that data does
or does not exist.

00:33:37.078 --> 00:33:40.660
The way we can do this is
with the content script.

00:33:40.660 --> 00:33:43.078
So we'll inject the content
script into all the pages that

00:33:43.078 --> 00:33:47.800
the user navigates to and then
we'll do some examination

00:33:47.800 --> 00:33:49.500
on those pages.

00:33:49.500 --> 00:33:53.840
And once we determine that one
of these pages has the content

00:33:53.840 --> 00:33:58.140
that we're looking for we
can send a message to a

00:33:58.140 --> 00:34:00.220
background page and say
put up a page action.

00:34:00.220 --> 00:34:03.278
So as a reminder a page action
was that small icon that

00:34:03.278 --> 00:34:06.120
appears in the Google
Chrome omnibox and can

00:34:06.120 --> 00:34:08.078
be toggled on and off.

00:34:08.078 --> 00:34:09.900
So let's look at an
example that does this.

00:34:14.858 --> 00:34:19.338
I'm going to open up a new
tab here and I have this
625
00:34:19,338 --&gt; 00:34:19,278
extension bookmarked.

00:34:21.718 --> 00:34:25.500
So this is a sandwich
detecting extension.

00:34:25.500 --> 00:34:28.138
Very important, especially
if you're hungry.

00:34:28.138 --> 00:34:30.300
So I'm going to install this.

00:34:32.960 --> 00:34:37.800
And what this expansion will do
is that when I navigate to a

00:34:37.800 --> 00:34:39.620
page that's talking about
sandwiches it's going to show

00:34:39.620 --> 00:34:43.078
me an icon like this that
you see right here.

00:34:43.078 --> 00:34:45.980
That indicates there's
sandwiches being talked

00:34:45.980 --> 00:34:47.398
about on that page.

00:34:47.398 --> 00:34:50.858
So I'll start out by doing
a Google search for

00:34:50.858 --> 00:34:54.678
let's say, puppies.

00:34:54.678 --> 00:34:58.478
And you can see nothing is
appearing in my Chrome omnibox

00:34:58.478 --> 00:35:01.698
here, which is a good sign.

00:35:01.698 --> 00:35:05.398
It means people aren't
making puppy sandwiches.

00:35:05.398 --> 00:35:13.558
If I searched for roast beef on
the other hand, there we go.

00:35:13.558 --> 00:35:17.458
We get our sandwich icon,
so this page is talking

00:35:17.458 --> 00:35:18.840
about sandwiches.

00:35:18.840 --> 00:35:20.432
Let's see how this
thing is implemented.

00:35:29.198 --> 00:35:33.568
So I'll start by looking at
our manifest file here.

00:35:34.518 --> 00:35:36.338
We're going to see another
new thing in here, which

00:35:36.338 --> 00:35:43.578
is that we are specifying
a content script here.

00:35:43.578 --> 00:35:47.338
And we give it a couple
of match patterns.

00:35:47.338 --> 00:35:53.018
You can see that these are wild
cards indicating that our

00:35:53.018 --> 00:35:58.938
content script will be injected
into every http and every https

00:35:58.938 --> 00:36:01.400
page that the user
navigates to.

00:36:01.400 --> 00:36:03.340
And then we're specifying
a JS file here.

00:36:03.340 --> 00:36:06.060
We could also specify a
CS file if we wanted to.

00:36:06.620 --> 00:36:07.220
It's not an either/or.

00:36:07.480 --> 00:36:11.618
You can inject both and even
inject multiple JavaScript

00:36:11.618 --> 00:36:13.978
and CSS files into any page.

00:36:13.978 --> 00:36:16.480
And we're specifying a file
called contentscript.js.

00:36:16.800 --> 00:36:21.198
So I'm going to
pull that up next.

00:36:21.198 --> 00:36:22.918
This is the file that's
actually going to

00:36:22.918 --> 00:36:25.878
do our detection.

00:36:25.878 --> 00:36:26.298
You can see it's a
very simple file.

00:36:26.298 --> 00:36:33.088
We have a regex here, which
probably not surprisingly is

00:36:33.088 --> 00:36:37.238
just a sandwich in there.

00:36:37.738 --> 00:36:43.218
If the regex successfully
detects that match we run a

00:36:43.218 --> 00:36:48.558
little function here and the
function we run is

00:36:48.558 --> 00:36:51.178
send a request.

00:36:51.178 --> 00:36:55.458
So content scripts don't have
as much permission as other

00:36:55.458 --> 00:36:58.898
parts of other extension
components have and we do

00:36:58.898 --> 00:37:01.298
that for security reasons.

00:37:01.958 --> 00:37:05.320
So in order for us to actually
display some UI we have to send

00:37:05.320 --> 00:37:07.580
this information that the
content script has gathered to

00:37:07.580 --> 00:37:09.338
another part of the extension.

00:37:09.338 --> 00:37:11.558
In this case we're going to
send it to a background page.

00:37:11.558 --> 00:37:15.718
So this function here,
which is in that utility

00:37:15.718 --> 00:37:19.438
chrome.extension API, it's
called send request.

00:37:19.438 --> 00:37:22.278
It's going to broadcast a
message and then other

00:37:22.278 --> 00:37:24.158
components within our
extensions can listen for

00:37:24.158 --> 00:37:26.458
that message if they want.

00:37:26.458 --> 00:37:28.218
So next I'll open up
our background page.

00:37:29.938 --> 00:37:32.238
In this particular extension
here's the component that's

00:37:32.238 --> 00:37:34.218
doing the listening.

00:37:34.218 --> 00:37:37.618
So we're gonna install
a listener here.

00:37:37.618 --> 00:37:43.360
Again, by using that
chrome.extension API.

00:37:43.360 --> 00:37:45.918
And you can see we have a
callback function called on

00:37:45.918 --> 00:37:48.058
request, which will be
triggered when the

00:37:48.058 --> 00:37:49.158
event happens.

00:37:50.260 --> 00:37:53.798
And here's that function.

00:37:53.798 --> 00:37:59.578
So we just have a simple method
call-in here to the page

00:37:59.578 --> 00:38:05.058
action API and it just says
show in the current ID.

00:38:06.098 --> 00:38:08.778
Sorry, in the current tab.

00:38:08.778 --> 00:38:13.558
That's all there is to that.

00:38:13.558 --> 00:38:17.280
So next I'm going to
talk a little bit and

00:38:17.280 --> 00:38:24.918
HTML5 integration.

00:38:24.918 --> 00:38:31.158
So I've listed out some of the
most useful features or some of

00:38:31.158 --> 00:38:33.698
them in any case of HTML5 that
you might want to pull

00:38:33.698 --> 00:38:34.338
into your extensions.

00:38:35.578 --> 00:38:37.298
I won't go through them all
because I think we're a

00:38:37.298 --> 00:38:38.638
little short on time.

00:38:38.638 --> 00:38:41.618
I want to leave a little
time for questions.

00:38:41.618 --> 00:38:45.508
We have obviously and I should
say when I say HTML5 what I'm

00:38:45.508 --> 00:38:49.780
really referring to is HTML5,
CSS3 and the new JavaScript

00:38:49.780 --> 00:38:53.558
APIs, so that collection of
new open web technology.

00:38:53.558 --> 00:38:57.378
So we have some new HTML5
tags that are available.

00:38:57.378 --> 00:39:01.858
There are also some really
nice new CSS properties,

00:39:01.858 --> 00:39:02.938
filters, and animation.

00:39:02.938 --> 00:39:05.538
And then there's some
JavaScript APIs for doing

00:39:05.538 --> 00:39:06.860
things like persistence.

00:39:06.860 --> 00:39:08.400
We're going to look at an
example of this as well

00:39:08.400 --> 00:39:09.340
as doing notifications.

00:39:09.340 --> 00:39:11.060
There's a whole lot more
of these I just wanted

00:39:11.060 --> 00:39:13.778
to give some examples.

00:39:13.778 --> 00:39:16.120
And when it comes to using
these things in your extensions

00:39:16.120 --> 00:39:19.260
since like I said, extensions
are webpages you can just use

00:39:19.260 --> 00:39:22.460
this all seamlessly just like
you could in a regular webpage.

00:39:22.460 --> 00:39:28.678
For a couple of these features
there are some little

00:39:28.678 --> 00:39:30.418
extra hooks into the
extension system.

00:39:30.418 --> 00:39:35.600
So for example, things like
desktop notifications require a

00:39:35.600 --> 00:39:38.780
permission and we give a hook
into the extension system so

00:39:38.780 --> 00:39:40.840
that you don't have to
explicitly ask the user for

00:39:40.840 --> 00:39:44.538
permission, you just do
it one time at install.

00:39:44.538 --> 00:39:46.918
So let's look at an example
of implementing some

00:39:46.918 --> 00:39:48.858
HTML5 features.

00:39:48.898 --> 00:39:51.458
I call this the
pushier-notifier pattern

00:39:51.458 --> 00:39:54.858
because I didn't really have a
good name for it, but we looked

00:39:54.858 --> 00:39:56.678
at some notifiers already.

00:39:56.118 --> 00:40:00.818
The scenario here is that
maybe we want to do some

00:40:00.818 --> 00:40:02.298
notifications with a
little more information.

00:40:03.098 --> 00:40:05.420
Something beyond just a
few characters of text.

00:40:05.420 --> 00:40:08.180
A good example of this would
be if you're doing some

00:40:08.180 --> 00:40:11.998
kind of news site, you
want to show news alerts.

00:40:11.998 --> 00:40:16.538
And maybe we also want to
let the user configure

00:40:16.538 --> 00:40:17.518
these notifications.

00:40:17.518 --> 00:40:22.778
So determine how frequently
they can appear or

00:40:22.778 --> 00:40:23.518
what they look like.

00:40:23.518 --> 00:40:25.478
That sort of thing.

00:40:25.478 --> 00:40:28.578
And then finally, let's persist
these notifications of

00:40:28.578 --> 00:40:31.438
these settings rather.

00:40:31.438 --> 00:40:33.158
So in order to do this
we're going to use

00:40:33.158 --> 00:40:34.038
desktop notifications.

00:40:34.038 --> 00:40:38.078
Like I said, any webpage can
use desktop notifications.

00:40:38.078 --> 00:40:41.178
There's a special hook for
extensions to use them though.

00:40:41.178 --> 00:40:43.438
And we're going to
add an options page.

00:40:43.438 --> 00:40:44.838
We already saw an options page
before, but we're going to look

00:40:44.838 --> 00:40:48.580
at how this one is implemented
that lets the user do some

00:40:48.580 --> 00:40:49.446
configuration on
these settings.

00:40:51.158 --> 00:40:54.798
And finally we're going to use
web storage, specifically local

00:40:54.798 --> 00:40:57.678
storage to save these settings
so that they run across

00:40:57.678 --> 00:40:58.018
browser sessions.

00:40:58.018 --> 00:41:02.148
So even after the user closes
their browser the next time

00:41:02.148 --> 00:41:06.260
they fire it up it will still
remember these settings.

00:41:06.260 --> 00:41:11.658
So for this particular example,
it's not in the gallery like

00:41:11.658 --> 00:41:15.340
the other ones I've been
showing you because it won't

00:41:15.340 --> 00:41:17.318
work for all users yet.

00:41:17.318 --> 00:41:26.118
So I'm going to load it as
an unpacked extension.

00:41:26.118 --> 00:41:32.118
And you'll see immediately when
I load it it pops up this

00:41:32.118 --> 00:41:34.018
desktop notification here.

00:41:34.018 --> 00:41:38.598
Doesn't say a whole lot, it's
just a demo and we also have an

00:41:38.598 --> 00:41:42.420
options page attached to this,
which I'll open up here.

00:41:42.420 --> 00:41:44.400
Just let's us set a couple
of things about this.

00:41:44.400 --> 00:41:47.738
So we can set how frequently
the notification will appear.

00:41:47.738 --> 00:41:50.938
By default this thing is going
to appear every minute and we

00:41:50.938 --> 00:41:52.778
can toggle it on or off here.

00:41:52.778 --> 00:41:56.598
So I'm going to reload this
extension a couple times so

00:41:56.598 --> 00:41:57.718
it shows more notifications.

00:41:57.718 --> 00:42:00.140
You can see what it looks like
in that case and I don't want

00:42:00.140 --> 00:42:03.418
to wait a couple minutes do
that so I'm just going to

00:42:03.418 --> 00:42:07.760
reload here and show a
couple more notifications.

00:42:07.760 --> 00:42:10.118
You can see those here.

00:42:10.118 --> 00:42:13.818
These notifications will stack
up I believe up to 5 of them

00:42:13.818 --> 00:42:17.620
will show and then they'll just
cue up behind the scenes and as

00:42:17.620 --> 00:42:19.518
you close them a new
one will appear.

00:42:19.518 --> 00:42:23.058
So I'm going to go back to this
option page and disable this

00:42:23.058 --> 00:42:25.198
thing because I don't want it
to keep showing up while I'm

00:42:25.198 --> 00:42:30.264
showing you code and I'll also
close a couple of these here.

00:42:30.264 --> 00:42:39.958
All right, so let's see how
this thing is implemented.

00:42:39.578 --> 00:42:44.478
First, we'll start with
our manifest file again.

00:42:44.478 --> 00:42:47.078
And again, looks pretty similar
to our other manifest files.

00:42:47.800 --> 00:42:50.798
One thing that we've
added here is this

00:42:50.798 --> 00:42:51.260
notification permission.

00:42:51.260 --> 00:42:55.158
So if you've seen notifications
in the wild before, you've

00:42:55.158 --> 00:42:57.898
probably noticed that when you
go to a webpage that wants to

00:42:57.898 --> 00:43:00.438
show you a notification you get
an infobar that says hey, is

00:43:00.438 --> 00:43:03.580
it OK for this webpage to
show you notifications?

00:43:03.580 --> 00:43:05.698
But you didn't see that with
this extension and the

00:43:05.698 --> 00:43:08.198
reason is because of this
notifications permission.

00:43:08.198 --> 00:43:09.418
I mentioned this
briefly earlier.

00:43:09.418 --> 00:43:12.658
This is not yet available in
the stable channel of Google

00:43:12.658 --> 00:43:14.340
Chrome, but it's available
everywhere else and it

00:43:14.340 --> 00:43:20.578
will be available in the
next stable version.

00:43:20.178 --> 00:43:22.140
So once we have that
notifications permission

00:43:22.140 --> 00:43:24.600
we can just go ahead
and show notifications.

00:43:24.600 --> 00:43:26.060
So I'm going to open up this
background page, which

00:43:26.060 --> 00:43:32.578
does the notifying.

00:43:32.578 --> 00:43:35.898
And you can see here we have an
if statement that tests to see

00:43:35.898 --> 00:43:40.278
whether the notification
is active.

00:43:40.278 --> 00:43:43.458
That's a setting that we'll
look at in a second.

00:43:43.458 --> 00:43:49.438
And if it is active it
calls this show function.

00:43:49.438 --> 00:43:53.138
Let's look at that
function now, here it is.

00:43:53.138 --> 00:43:55.278
You can see these
notifications.

00:43:55.278 --> 00:43:56.218
I'll zoom in again.

00:43:56.218 --> 00:43:59.738
They display a little time
and we just calculate

00:43:59.738 --> 00:44:03.260
the current time here.

00:44:03.260 --> 00:44:07.300
And then we create
a notification.

00:44:07.300 --> 00:44:10.268
We do this with a method
called webkitnotificati

00:44:10.268 --> 00:44:10.518
ons.createnotification.

00:44:16.038 --> 00:44:18.618
And we just supply a
couple of properties.

00:44:18.618 --> 00:44:21.278
This notification happens to
be a standard notification.

00:44:21.278 --> 00:44:26.378
You can also do HTML
notifications.

00:44:27.798 --> 00:44:30.638
Instead of just supplying text
like this we could actually

00:44:30.638 --> 00:44:32.658
supply a HTML file and
completely take over the

00:44:32.658 --> 00:44:34.458
rendering ourselves.

00:44:34.458 --> 00:44:37.178
And then once we've created our
notification object all we do

00:44:37.178 --> 00:44:41.218
is call show on it and
that'll display it.

00:44:41.218 --> 00:44:44.978
One more thing that I want
to look at here is this

00:44:44.978 --> 00:44:47.842
options page that I showed.

00:44:50.018 --> 00:44:58.800
So you'll see this is a very
simple HTML file here.

00:44:58.800 --> 00:45:01.998
And like we saw there
are just a couple of

00:45:01.998 --> 00:45:02.558
form inputs in here.

00:45:02.558 --> 00:45:05.518
We have one, a checkbox for
determining whether or not

00:45:05.518 --> 00:45:07.760
the notification is active.

00:45:07.760 --> 00:45:11.678
And then we have another for
setting how frequently those

00:45:11.678 --> 00:45:13.938
notifications will appear.

00:45:13.938 --> 00:45:20.878
We just attach event handlers
to each of these options and

00:45:20.878 --> 00:45:25.618
you'll see that when this thing
is triggered what we do is we

00:45:25.618 --> 00:45:29.480
save the value into a
local storage object.

00:45:29.480 --> 00:45:34.578
So local storage is
another HTML5 like API.

00:45:34.518 --> 00:45:37.518
By default, every page
will have a local storage

00:45:37.518 --> 00:45:39.698
object available to it.

00:45:39.698 --> 00:45:41.038
And you just treat it
like a regular object.

00:45:41.038 --> 00:45:45.778
So we're setting a property
called is activated on

00:45:45.778 --> 00:45:48.138
the local storage object
and giving it a value.

00:45:48.138 --> 00:45:51.838
Down here you'll see we're
setting a property called

00:45:51.838 --> 00:45:54.518
frequency and giving it the
value of that input field.

00:45:54.518 --> 00:46:01.918
Then if I go back to our
background page here we can

00:46:01.918 --> 00:46:05.380
just seamlessly use these
values as if they were

00:46:05.380 --> 00:46:07.038
declared in this page.

00:46:07.038 --> 00:46:10.478
So if I want to test the value
of the is activated field I

00:46:10.478 --> 00:46:13.320
just say local storage
is activated.

00:46:13.320 --> 00:46:15.498
If I want to look at
frequency I just say
841
00:46:15,498 --&gt; 00:46:15,238
localstorage.frequency.

00:46:17.498 --> 00:46:20.898
Couldn't really be simpler.

00:46:20.898 --> 00:46:22.438
All right, so I'm going to
wrap up here by talking

00:46:22.438 --> 00:46:24.658
about our experimental APIs.

00:46:24.658 --> 00:46:30.098
Let me close this notification.

00:46:30.458 --> 00:46:32.978
We currently have 5
experimental APIs.

00:46:32.978 --> 00:46:34.998
We'll just list them
out here quickly.

00:46:35.038 --> 00:46:39.318
So our philosophy with respect
to APIs is that we want our

00:46:39.318 --> 00:46:46.458
APIs to be very stable once
they're fully available, but we

00:46:46.458 --> 00:46:49.958
also want the ability to play
with stuff and have users give

00:46:49.958 --> 00:46:52.278
us feedback and suggestions.

00:46:52.278 --> 00:46:53.718
And we do that by
creating experiments.

00:46:53.718 --> 00:46:54.838
These experimental APIs.

00:46:55.820 --> 00:46:59.518
So we have stuff for doing
infobars, context menus,

00:46:59.518 --> 00:47:02.340
managing the clipboard as well
as cookies and processes

00:47:02.340 --> 00:47:05.718
within the browser.

00:47:05.718 --> 00:47:08.098
So in order to use these
experimental APIs there's

00:47:08.098 --> 00:47:11.938
a couple of tricks
that you need to do.

00:47:11.938 --> 00:47:14.840
The first is that you have
to be using a dev channel

00:47:14.840 --> 00:47:15.058
build of Google Chrome.

00:47:15.058 --> 00:47:20.438
And then you have to start-up
the browser with this

00:47:20.438 --> 00:47:23.320
experimental flag, it's called
enable experimental extension

00:47:23.320 --> 00:47:27.538
APIs, very difficult to say.

00:47:27.538 --> 00:47:31.218
And then finally you'll just
add an experimental permission

00:47:31.218 --> 00:47:33.498
to your manifest file and that
lets you plug into these

00:47:33.498 --> 00:47:35.458
experimental APIs.

00:47:35.458 --> 00:47:39.758
So let's look at an
example of that.

00:47:39.758 --> 00:47:43.898
Again, since this is not fully
available I'm going to be

00:47:43.898 --> 00:47:58.118
loading an unpacked
version of this.

00:47:58.118 --> 00:48:00.508
Actually, I should probably
run through my little

00:48:00.508 --> 00:48:01.478
use case here.

00:48:01.858 --> 00:48:04.100
So the scenario that we're
going to be talking about is

00:48:04.100 --> 00:48:09.768
that we want to take content
from one page and import

00:48:09.768 --> 00:48:11.600
it into another app.

00:48:11.260 --> 00:48:16.078
Maybe we're viewing that
content or editing it and we

00:48:16.078 --> 00:48:19.198
can either put this into a new
window or tab or just load it

00:48:19.198 --> 00:48:20.178
directly into that
current window.

00:48:22.038 --> 00:48:24.538
The way we can do this, we
can use the context menu.

00:48:24.538 --> 00:48:28.040
So we can make it so that the
user right clicks or the

00:48:28.040 --> 00:48:30.798
equivalent on some kind
of resource on a page.

00:48:30.798 --> 00:48:34.438
We can grab that and
pull it into our app

00:48:34.438 --> 00:48:37.398
using context menu.

00:48:37.398 --> 00:48:40.738
And then we're going to use the
Windows or tabs API to make it

00:48:40.738 --> 00:48:43.100
so that we open a new window or
reload the contents of

00:48:43.100 --> 00:48:44.718
the current window.

00:48:44.718 --> 00:48:46.878
Again, let me go back here
and install this thing.

00:48:46.878 --> 00:48:59.238
So you guys probably saw during
our keynote the amazing Mugtug

00:48:59.238 --> 00:49:01.578
Darkroom app, which is
a photo editing app.

00:49:01.578 --> 00:49:06.220
This is an extension that they
are experimenting with in

00:49:06.220 --> 00:49:09.618
conjunction with that app.

00:49:09.618 --> 00:49:11.360
It'll let me go to any page.

00:49:11.360 --> 00:49:16.178
I'm going to do that puppy
search again and let

00:49:16.178 --> 00:49:17.658
me look at images.

00:49:17.658 --> 00:49:19.638
So it's going to add a
context menu item for when

00:49:19.638 --> 00:49:20.538
I right click on an image.

00:49:20.538 --> 00:49:24.738
So if I happen to click
somewhere else you'll see

00:49:24.738 --> 00:49:29.478
there's nothing special in my
context menu here, but if I

00:49:29.478 --> 00:49:34.358
click on one of these images I
now get this edit in darkroom

00:49:34.358 --> 00:49:37.080
option and I can click on that
and it will open that image

00:49:37.080 --> 00:49:46.918
in the darkroom app.

00:49:46.918 --> 00:49:58.698
That seemed not to work,
so let me try that again.

00:49:58.698 --> 00:50:00.538
Well, let's pretend
that it works.

00:50:00.538 --> 00:50:02.318
It worked earlier, trust me.

00:50:02.318 --> 00:50:04.400
It is experimental though.

00:50:04.400 --> 00:50:05.598
Let's see how that's
implemented.

00:50:06.280 --> 00:50:13.238
So we're going to start with
the manifest file again.

00:50:13.238 --> 00:50:15.058
This is really simple
to implement.

00:50:15.058 --> 00:50:19.158
So as I mentioned, for using an
experiment API, all you do is

00:50:19.158 --> 00:50:24.398
add this experimental
permission.

00:50:24.398 --> 00:50:27.658
And then this extension has a
background page that will

00:50:27.658 --> 00:50:31.360
actually make the call to
the context menu API,

00:50:31.360 --> 00:50:34.358
which is right here.

00:50:34.358 --> 00:50:38.598
It's calling this create
function and then we give it

00:50:38.598 --> 00:50:42.858
the title of the menu item,
which resources to operate on.

00:50:42.858 --> 00:50:45.978
In this case images and then
we have a callback function.

00:50:45.978 --> 00:50:49.218
So in that callback
function we're reloading

00:50:49.218 --> 00:50:50.738
the current tab.

00:50:50.738 --> 00:50:54.458
Again, we're using
the tabs API.

00:50:54.458 --> 00:50:59.840
It's loading up there URL and
passing in as a parameter the

00:50:59.840 --> 00:51:01.968
image that was clicked on.

00:51:02.918 --> 00:51:04.278
That's a quick example
of what you can do with

00:51:04.278 --> 00:51:05.318
the experimental APIs.

00:51:05.318 --> 00:51:09.558
I should note that when you're
building an extension that uses

00:51:09.558 --> 00:51:10.898
experimental APIs you can't
actually upload them

00:51:10.898 --> 00:51:11.138
to the gallery.

00:51:11.138 --> 00:51:14.518
That's why I downloaded
a local copy.

00:51:14.518 --> 00:51:17.718
So these are more for tinkering
with stuff, trying out future

00:51:17.718 --> 00:51:19.098
stuff and especially
giving us feedback.

00:51:19.098 --> 00:51:21.418
We love to hear feedback
on these APIs.

00:51:21.778 --> 00:51:27.038
That's why we put
them out so early.

00:51:27.038 --> 00:51:28.098
All right, so now I'm going
to take some questions.

00:51:28.098 --> 00:51:31.298
I just want to show you
a couple of resources

00:51:31.298 --> 00:51:32.518
that we have.

00:51:32.518 --> 00:51:34.618
So all the code that I showed
and I went through it pretty

00:51:34.618 --> 00:51:36.198
quickly, but if you want
to examine it in more

00:51:36.198 --> 00:51:37.398
depth it's all online.

00:51:38.458 --> 00:51:42.740
The Wave notifier you can get
to by going to j.mp/wavecrxsrc

00:51:42.740 --> 00:51:46.218
and all the other extensions I
showed you can get to buy

00:51:46.218 --> 00:51:46.558
going to j.mp/crxsrc.

00:51:49.958 --> 00:51:51.978
And finally, we have some
additional resources that are

00:51:51.978 --> 00:51:55.938
really helpful as you get
started writing extensions.

00:51:55.938 --> 00:51:57.218
If you're goingt to start
anywhere definitely go to the

00:51:57.218 --> 00:51:58.118
docs at code.google.com/
chrome/extensions.

00:52:01.020 --> 00:52:03.700
These other resources, the
discussion group and blog

00:52:03.700 --> 00:52:06.280
are linked to from there.

00:52:06.280 --> 00:52:10.198
And again, here's our Wave
back channel and our hashtag.

00:52:10.358 --> 00:52:14.498
So I have about 5 or so
minutes for taking questions.

00:52:15.938 --> 00:52:20.980
And I'll take a live question
first and then I'll look in the

00:52:20.980 --> 00:52:21.860
moderator and see if there
are any questions in there.

00:52:21.860 --> 00:52:23.894
So any questions out there?
952
00:52:23,894 --&gt; 00:52:23,85
Yes?

00:52:27.658 --> 00:52:29.638
AUDIENCE: Are there any gotchas
to using standard JavaScript

00:52:29.638 --> 00:52:31.758
libraries like jQuery or other
things in your plug-ins?

00:52:32.718 --> 00:52:33.418
BRIAN KENNISH: Yeah,
great question.

00:52:35.018 --> 00:52:37.998
One thing that I didn't talk
about is that we have this

00:52:37.998 --> 00:52:43.258
concept in the extension system
called isolated worlds where we

00:52:43.258 --> 00:52:47.760
run content scripts in a
separate execution environment

00:52:47.760 --> 00:52:50.178
then the JavaScript
environment on the page.

00:52:50.818 --> 00:52:52.898
We do this for a
couple of reasons.

00:52:52.898 --> 00:52:53.260
One is security.

00:52:53.680 --> 00:52:59.018
I talked about regular webpages
being walled off from the

00:52:59.018 --> 00:53:00.878
extension systems, so
this helps us with that.

00:53:00.718 --> 00:53:02.218
But we also do it
for compatibility.

00:53:02.218 --> 00:53:06.998
So for example, let's say
that webpage is running

00:53:06.998 --> 00:53:08.238
one version of jQuery.

00:53:08.238 --> 00:53:10.918
And your extension is running
another version of jQuery.

00:53:10.918 --> 00:53:13.058
They're not compatible
with each other.

00:53:13.058 --> 00:53:15.638
That could potentially cause a
conflict, but because we have

00:53:15.638 --> 00:53:18.440
these isolated worlds they
don't interact with each other

00:53:18.440 --> 00:53:19.840
and you never get
that conflict.

00:53:20.380 --> 00:53:24.078
And also any additional
JavaScript libraries or

00:53:24.078 --> 00:53:26.458
framework you can just add into
your extension directory just

00:53:26.458 --> 00:53:27.998
like you would on a
regular website.

00:53:27.998 --> 00:53:28.940
Yes?

00:53:31.598 --> 00:53:34.058
AUDIENCE: So you talked about
XHR and that there's a

00:53:34.058 --> 00:53:36.078
permission model you have to
declare which sites

00:53:36.078 --> 00:53:37.658
you want to go to.

00:53:37.658 --> 00:53:41.978
I know that once you inject a
code inside the main page it

00:53:41.978 --> 00:53:44.938
behaves a little differently
than what's running as an

00:53:44.938 --> 00:53:47.878
extension and it does not have
direct access to go to the

00:53:47.878 --> 00:53:52.038
sites which you include in the
permission list, is that

00:53:52.038 --> 00:53:54.578
intentional and is there
a plan to change that?

00:53:54.578 --> 00:53:56.018
BRIAN KENNISH: So I think if
I'm understanding you right

00:53:56.018 --> 00:53:58.338
that's the issue I just
talked about, which is

00:53:58.338 --> 00:53:59.458
this isolated worlds.

00:53:59.818 --> 00:54:02.678
So you're actually not in the
JavaScript environment of the

00:54:02.678 --> 00:54:04.418
page, you're in a separate
JavaScript environment.

00:54:04.418 --> 00:54:08.478
AUDIENCE: That is correct, but
even if it is running as a

00:54:08.478 --> 00:54:12.198
separate entity it still does
not have access to go to

00:54:12.198 --> 00:54:14.558
the sites which are listed
in the permissions tab.

00:54:14.558 --> 00:54:17.878
You can only communicate with
the extension, is that correct?

00:54:17.878 --> 00:54:18.998
Or at least that
was my experience.

00:54:19.298 --> 00:54:22.618
BRIAN KENNISH: So you're
talking about doing XHR work

00:54:22.618 --> 00:54:24.678
from the content script?

00:54:24.678 --> 00:54:25.758
AUDIENCE: That's right.

00:54:25.758 --> 00:54:28.258
BRIAN KENNISH: So I very
briefly mentioned that content

00:54:28.258 --> 00:54:31.918
scripts don't have all the
access that other extension

00:54:31.918 --> 00:54:32.698
components have.

00:54:33.658 --> 00:54:35.298
In particular, they
cannot do XHR.

00:54:35.338 --> 00:54:39.018
So what you have to do in that
case is from your content

00:54:39.018 --> 00:54:41.398
script, you send a message like
I showed and then your

00:54:41.398 --> 00:54:43.918
background page or whatever
makes the XHR and sends

00:54:43.918 --> 00:54:45.600
it back and so forth.

00:54:45.400 --> 00:54:48.740
Before I take the next question
let me be a little meta here

00:54:48.740 --> 00:54:51.618
and I'm going to open up my
Wave notifier here and go to

00:54:51.618 --> 00:54:55.258
this Wave just to make sure,
see if there's any cued up

00:54:55.258 --> 00:54:56.578
moderator questions in there.

00:54:56.578 --> 00:54:57.778
OK, while we're waiting
for [UNINTELLIGIBLE]

00:54:57.778 --> 00:54:58.888
to load, go ahead.

00:54:59.898 --> 00:55:02.980
AUDIENCE: Do you have any
suggestions for the automation

00:55:02.980 --> 00:55:06.178
test for the Chrome extension?

00:55:06.178 --> 00:55:07.820
BRIAN KENNISH:
Automated testing?

00:55:07.820 --> 00:55:08.218
That's a really good question.

00:55:08.218 --> 00:55:14.998
I've seen some internal threads
about that and people have been

00:55:14.998 --> 00:55:18.478
trying some stuff out, but I
haven't really seen a good

00:55:18.478 --> 00:55:20.260
solution that I could
recommend at this point.

00:55:20.260 --> 00:55:22.958
But it's definitely a good
question to ask and I'd love to

00:55:22.958 --> 00:55:25.760
see you throw that up maybe
on our discussion group.

00:55:26.398 --> 00:55:29.438
Probably other developers would
maybe have some input on stuff

00:55:29.438 --> 00:55:35.378
that they've tried,
successfully of not.

00:55:35.378 --> 00:55:36.558
Oh, sorry are there
questions on this side?

00:55:36.558 --> 00:55:36.858
AUDIENCE: Yes.

00:55:36.858 --> 00:55:43.918
On your Google Wave notifier
you used authentication, is

00:55:43.918 --> 00:55:46.378
there any reason why we can't
use other oauth authenticators

00:55:46.378 --> 00:55:48.860
or do we have to stick
to using the Google one?

00:55:48.860 --> 00:55:51.078
BRIAN KENNISH: Nope, that's
just a library that we provide.

00:55:51.078 --> 00:55:53.280
You could definitely do
it all on your own or

00:55:53.280 --> 00:55:54.418
use another library.

00:55:54.098 --> 00:55:55.238
This is just one--

00:55:55.238 --> 00:55:57.138
AUDIENCE: No, use another
service provider?

00:55:57.138 --> 00:55:58.618
BRIAN KENNISH: Oh, yes.

00:55:58.618 --> 00:55:59.458
Absolutely.

00:55:59.058 --> 00:56:01.138
With that library you can use
any service provider you want.

00:56:02.538 --> 00:56:06.138
We showed a Tweet deck demo
that for example uses a similar

00:56:06.138 --> 00:56:12.238
library and authenticates
against Twitter.

00:56:12.478 --> 00:56:15.758
Let me just take a moderator
question in here.

00:56:17.418 --> 00:56:24.738
I think I answered this one
with the isolated worlds one.

00:56:24.738 --> 00:56:26.478
We got that one.

00:56:26.478 --> 00:56:29.898
Are there any books you
recommend for diving deeper

00:56:29.898 --> 00:56:32.418
into Chrome extensions?

00:56:32.418 --> 00:56:33.238
Well, extensions
are pretty new.

00:56:33.238 --> 00:56:36.658
There's not books out
there that I know of yet.

00:56:36.438 --> 00:56:39.760
Certainty, our documentation
I would highly recommend.

00:56:39.760 --> 00:56:43.558
I think it's really
comprehensive.

00:56:43.938 --> 00:56:45.338
That's another good question
for the discussions group.

00:56:45.338 --> 00:56:48.718
I don't know, maybe someone's
found a book out there.

00:56:48.718 --> 00:56:50.738
Yes, go ahead.

00:56:50.738 --> 00:56:53.458
AUDIENCE: Is there any way to
make the NPAPI extension,

00:56:53.458 --> 00:56:57.478
NPAPI communicate with any of
those Chrome extensions?

00:56:57.478 --> 00:57:00.280
BRIAN KENNISH: Yep, so the
Google Chrome extension

00:57:00.280 --> 00:57:01.238
system supports NPAPI.

00:57:02.098 --> 00:57:04.698
So you can create
NPAPI plug-ins.

00:57:06.898 --> 00:57:10.838
There's security issues with
NPAPI because you're creating

00:57:10.838 --> 00:57:12.578
native code that will run on
the user machines so we

00:57:12.578 --> 00:57:16.838
definitely prefer it if you can
do this in the extension

00:57:16.838 --> 00:57:19.400
system, but we understand that
the extension system can't

00:57:19.400 --> 00:57:22.718
account for all use cases yet
and so we do support NPAPI.

00:57:22.858 --> 00:57:26.280
AUDIENCE: But the question is
more is it possible to

00:57:26.280 --> 00:57:29.078
communicate or trigger any of
the Chrome extensions

00:57:29.078 --> 00:57:30.078
from NPAPI?

00:57:30.078 --> 00:57:32.358
Like the background pages, or?

00:57:32.358 --> 00:57:33.080
BRIAN KENNISH: Yes.

00:57:33.460 --> 00:57:36.388
AUDIENCE: So you can trigger
the action pages of the

00:57:36.388 --> 00:57:39.258
Chrome pages from the NPAPI?

00:57:39.218 --> 00:57:42.178
BRIAN KENNISH: You can interact
with your NPAPI plug-in and the

00:57:42.178 --> 00:57:44.502
other components within
your extension.

00:57:45.390 --> 00:57:49.318
AUDIENCE: How is it
exactly to be done?

00:57:49.318 --> 00:57:50.698
Is it a JavaScript
call like that?

00:57:50.698 --> 00:57:52.158
BRIAN KENNISH: Yeah, you can
do it through JavaScript.

00:57:52.158 --> 00:57:57.060
It's kind of a big topic
though, so talk to me offline

00:57:57.060 --> 00:57:59.320
and I'll point you to some
resources for doing that.

00:57:59.320 --> 00:58:00.038
AUDIENCE: All right,
thank you very much.

00:58:00.038 --> 00:58:00.798
BRIAN KENNISH: Sure.

00:58:01.218 --> 00:58:02.998
Any other questions?

00:58:02.998 --> 00:58:05.040
We have probably time for one
more so let me take some

00:58:05.040 --> 00:58:07.260
from moderator here.

00:58:07.260 --> 00:58:09.578
All right, how can an extension
launch an executable

00:58:09.578 --> 00:58:10.958
on the user's machine.

00:58:10.538 --> 00:58:13.960
For example, launch thin
to edit a text area.

00:58:13.960 --> 00:58:16.080
That actually goes back
to that NPAPI question.

00:58:16.300 --> 00:58:19.388
You can do that with
an NPAPI plug-in.

00:58:19.388 --> 00:58:22.178
I mentioned way back in the
beginning of this talk that

00:58:22.178 --> 00:58:25.278
we automatically review and
approve almost every extension

00:58:25.278 --> 00:58:27.238
that's uploaded to the gallery.

00:58:27.238 --> 00:58:32.520
The one exception, or not the
one exception-- one of the

00:58:32.520 --> 00:58:36.558
exceptions is that if you use
an NPAPI plug-in we have to do

00:58:36.558 --> 00:58:40.380
a manual review on that because
you're creating code that

00:58:40.380 --> 00:58:42.858
executes directly on
the users machine.

00:58:42.858 --> 00:58:45.098
So I'm going to answer
this last question and

00:58:45.098 --> 00:58:46.578
then we'll wrap up.

00:58:46.578 --> 00:58:49.618
Is there a set of UI guidelines
that you would like

00:58:49.618 --> 00:58:50.138
extensions to follow?

00:58:50.858 --> 00:58:56.138
So I think we impose this UI
restrictions a little bit

00:58:56.138 --> 00:58:58.078
with the extension API.

00:58:58.078 --> 00:59:01.980
So for example, you can
only use one UI surface

00:59:01.980 --> 00:59:02.740
in your extension.

00:59:02.740 --> 00:59:04.440
For example, you can't
have an extension that

00:59:04.440 --> 00:59:08.438
is both a browser action
and a page action.

00:59:08.438 --> 00:59:12.438
So we kind of want these UI
guidelines to just work.

00:59:12.438 --> 00:59:16.578
There are not UI guidelines
that I know of, but I would not

00:59:16.578 --> 00:59:18.098
be surprised if someone out
there wrote a best practices.

00:59:18.098 --> 00:59:21.618
Another good question for
our discussion group.

00:59:21.618 --> 00:59:23.800
So with that we are almost
exactly out of time.

00:59:23.800 --> 00:59:25.338
I have three seconds left.

00:59:25.558 --> 00:59:26.398
Thank you all for coming.

00:59:26.398 --> 00:59:29.340
I really enjoyed this and
if you have any questions

00:59:29.340 --> 00:59:34.340
after just let me know.

