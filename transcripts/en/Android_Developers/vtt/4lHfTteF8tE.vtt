WEBVTT
Kind: captions
Language: en

00:00:03.400 --> 00:00:06.320
Flipkart is India's leading
e-commerce player.

00:00:06.840 --> 00:00:08.680
Its mission statement 
has always been

00:00:08.680 --> 00:00:09.880
how do we enhance

00:00:09.880 --> 00:00:13.040
the living experience,
the lifestyle of Indian users,

00:00:13.200 --> 00:00:15.320
by bringing the most affordable

00:00:15.320 --> 00:00:17.160
and most quality products

00:00:17.160 --> 00:00:19.200
to all sections of the country,

00:00:19.600 --> 00:00:20.680
using technology.

00:00:21.640 --> 00:00:24.640
One of the biggest learnings
from our user base

00:00:24.640 --> 00:00:27.560
was a lot of these devices were
actually with less than

00:00:27.560 --> 00:00:31.480
1GBF RAM where people were
actually aborting their journey

00:00:31.480 --> 00:00:33.680
because their phones could not
handle the storage

00:00:33.680 --> 00:00:35.800
or the computation requirements.

00:00:36.240 --> 00:00:38.400
So we launched our
Android Go application.

00:00:39.720 --> 00:00:41.520
If I can load my pages faster,

00:00:41.520 --> 00:00:44.920
I can give those additional
milliseconds back to the user,

00:00:44.920 --> 00:00:46.520
which can actually give the user

00:00:46.520 --> 00:00:47.760
a much better experience

00:00:47.760 --> 00:00:49.680
in their shopping journey
on Flipkart.

00:00:49.680 --> 00:00:53.160
The app install size as per the
Android Go guidelines,

00:00:53.160 --> 00:00:54.480
needs to be less than 40Mb.

00:00:54.960 --> 00:00:57.360
And with some good guidance
from the Google team

00:00:57.360 --> 00:00:58.480
we have brought that down.

00:01:00.400 --> 00:01:02.840
We are using Android Studio
Refractor and ProGuard

00:01:02.840 --> 00:01:04.480
which are helpful for
reducing

00:01:04.480 --> 00:01:05.920
resources and code base.

00:01:05.920 --> 00:01:07.840
Apart from that we are
also using WebP

00:01:08.240 --> 00:01:10.160
which is giving us
20% reduction

00:01:10.160 --> 00:01:11.200
in the image download size.

00:01:12.480 --> 00:01:15.840
The guideline that we received
was the proportional set size

00:01:15.840 --> 00:01:17.720
should be less than 50Mb.

00:01:18.120 --> 00:01:20.480
So, we did a lot of resource
allocation changes

00:01:20.480 --> 00:01:21.440
in our code base.

00:01:21.440 --> 00:01:25.360
We reduced our memory cache size
from 2 screen to 0.5 screen.

00:01:25.360 --> 00:01:27.320
We reduced our bitmap
pool cache size

00:01:27.320 --> 00:01:29.240
from 4 screen to 1 screen.

00:01:30.360 --> 00:01:33.440
Working on the Android Go app
for Flipkart,

00:01:33.440 --> 00:01:35.160
our app has become much lighter,

00:01:35.160 --> 00:01:36.560
it has become more performant.

00:01:36.560 --> 00:01:38.280
The existing user base
we've actually seen

00:01:38.280 --> 00:01:40.480
the uninstall rates go
down by 34%.

00:01:40.480 --> 00:01:43.120
Our latest app versions now
crash almost

00:01:43.120 --> 00:01:45.720
ten times lesser as compared
to our older versions,

00:01:45.720 --> 00:01:48.520
with an average rating
of 4.4 plus.

00:01:48.520 --> 00:01:51.960
A lot of effort has gone behind
reaching that milestone.

00:01:51.960 --> 00:01:53.800
We are excited with Android Go,

00:01:53.800 --> 00:01:55.560
that we will be crossing the
200 million very,

00:01:55.560 --> 00:01:58.680
very easily and very, very soon
because we believe

00:01:58.680 --> 00:02:01.280
the next set of online users are
actually going to

00:02:01.280 --> 00:02:03.560
come on devices from which Android Go

00:02:03.560 --> 00:02:06.160
is the right medium to approach.

00:02:06.160 --> 00:02:07.600
So if you are an app developer

00:02:07.600 --> 00:02:09.800
and if you're building for
India, just go get out,

00:02:09.800 --> 00:02:11.040
understand your user.

00:02:11.040 --> 00:02:14.960
Try to make your technology
tailor to those needs

00:02:14.960 --> 00:02:16.960
and then you will have an app

00:02:16.960 --> 00:02:19.120
which will be loved by
your users.

