WEBVTT
Kind: captions
Language: en

00:00:00.380 --> 00:00:02.770
At this point, we've covered all of the essential pieces of

00:00:02.770 --> 00:00:05.410
the memory system. Now, let's step back and put it all together.

00:00:05.410 --> 00:00:08.890
To help us do this, I've written some pseudocode that captures the

00:00:08.890 --> 00:00:12.250
strategy for loading data into the CPU. You can imagine that we're

00:00:12.250 --> 00:00:14.750
writing an emulator if you like. The first thing that needs

00:00:14.750 --> 00:00:17.430
to happen to a virtual address is for it to be converted

00:00:17.430 --> 00:00:21.380
to a physical address. We'll postpone that until later. Then, if the

00:00:21.380 --> 00:00:25.900
data is in the cache, we simply read from the cache otherwise,

00:00:25.900 --> 00:00:28.820
we read from memory. Note that whenever we read from memory,

00:00:28.820 --> 00:00:32.240
we also write to the cache evicting some block if necessary.

00:00:32.240 --> 00:00:34.308
This process is, is what we talked about in the first

00:00:34.308 --> 00:00:37.110
half of the lesson. The second half of the lesson was

00:00:37.110 --> 00:00:41.140
largely concerned with address translation. The first place we check is

00:00:41.140 --> 00:00:44.960
the tlb. If the physical page frame is there, then we're

00:00:44.960 --> 00:00:48.440
done. If not, then we need to consult the page table.

00:00:48.440 --> 00:00:51.260
Notice that none of these procedures that access the page table

00:00:51.260 --> 00:00:54.100
should use the load procedure as it's defined here. The

00:00:54.100 --> 00:00:57.490
top level page table cannot be in a paging system itself.

00:00:57.490 --> 00:01:00.940
Otherwise, load would call translation, which would then end up

00:01:00.940 --> 00:01:04.069
calling load again, which would end up calling translation and so

00:01:04.069 --> 00:01:06.990
forth. We can imagine a fixed page being assigned to

00:01:06.990 --> 00:01:10.140
store the top level of page table, another good reason for

00:01:10.140 --> 00:01:12.810
making this small. I've made the check for the access

00:01:12.810 --> 00:01:16.420
violation explicit here, because it's in the page table that this

00:01:16.420 --> 00:01:18.710
is most likely to happen. It's possible that we would get

00:01:18.710 --> 00:01:21.480
an access violation in the tlb if we try to read

00:01:21.480 --> 00:01:24.350
a kernel page. But for the most part, the page simply

00:01:24.350 --> 00:01:27.670
won't be there. If the present or valid bit isn't set

00:01:27.670 --> 00:01:30.410
in the page table entry, that means that the page we

00:01:30.410 --> 00:01:34.140
want isn't in memory. So, we raise a page_fault. This will

00:01:34.140 --> 00:01:38.400
then be caught by the page handler, up here, and then

00:01:38.400 --> 00:01:41.500
we can re-run the load procedure, and this time we will

00:01:41.500 --> 00:01:45.962
find that it's in memory. And so we won't raise the page fault again. Obviously

00:01:45.962 --> 00:01:48.990
this pseudocode has its limitations. By using just

00:01:48.990 --> 00:01:51.310
software, we can't capture the interaction between the

00:01:51.310 --> 00:01:53.620
OS and the hardware and we're abstracting away

00:01:53.620 --> 00:01:55.930
many of the details. Nevertheless, if this makes

00:01:55.930 --> 00:01:57.065
sense to you then you have a good

00:01:57.065 --> 00:01:59.760
high-level idea of how a memory system operates.

