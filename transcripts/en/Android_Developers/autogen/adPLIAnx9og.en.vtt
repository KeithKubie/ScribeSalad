WEBVTT
Kind: captions
Language: en

00:00:01.760 --> 00:00:04.670
listen we know that you love threading

00:00:04.670 --> 00:00:04.680
listen we know that you love threading
 

00:00:04.680 --> 00:00:06.559
listen we know that you love threading
and we know that for 99% of your

00:00:06.559 --> 00:00:06.569
and we know that for 99% of your
 

00:00:06.569 --> 00:00:08.419
and we know that for 99% of your
threading needs async task is the right

00:00:08.419 --> 00:00:08.429
threading needs async task is the right
 

00:00:08.429 --> 00:00:10.040
threading needs async task is the right
solution but for the other work you

00:00:10.040 --> 00:00:10.050
solution but for the other work you
 

00:00:10.050 --> 00:00:11.810
solution but for the other work you
might need a different kind of threading

00:00:11.810 --> 00:00:11.820
might need a different kind of threading
 

00:00:11.820 --> 00:00:13.549
might need a different kind of threading
primitive my name is Colt McAnlis and

00:00:13.549 --> 00:00:13.559
primitive my name is Colt McAnlis and
 

00:00:13.559 --> 00:00:14.990
primitive my name is Colt McAnlis and
for the types of work that might not

00:00:14.990 --> 00:00:15.000
for the types of work that might not
 

00:00:15.000 --> 00:00:17.420
for the types of work that might not
deal with UI updates handler threads are

00:00:17.420 --> 00:00:17.430
deal with UI updates handler threads are
 

00:00:17.430 --> 00:00:19.580
deal with UI updates handler threads are
a nifty solution see when it comes to

00:00:19.580 --> 00:00:19.590
a nifty solution see when it comes to
 

00:00:19.590 --> 00:00:21.019
a nifty solution see when it comes to
threading work most devs have a

00:00:21.019 --> 00:00:21.029
threading work most devs have a
 

00:00:21.029 --> 00:00:23.300
threading work most devs have a
round-trip model now you've got some

00:00:23.300 --> 00:00:23.310
round-trip model now you've got some
 

00:00:23.310 --> 00:00:24.769
round-trip model now you've got some
work you want it tossed from the UI

00:00:24.769 --> 00:00:24.779
work you want it tossed from the UI
 

00:00:24.779 --> 00:00:26.179
work you want it tossed from the UI
thread to some other thread and then

00:00:26.179 --> 00:00:26.189
thread to some other thread and then
 

00:00:26.189 --> 00:00:27.800
thread to some other thread and then
when the work needs to come back to the

00:00:27.800 --> 00:00:27.810
when the work needs to come back to the
 

00:00:27.810 --> 00:00:29.419
when the work needs to come back to the
UI thread you've got to update some

00:00:29.419 --> 00:00:29.429
UI thread you've got to update some
 

00:00:29.429 --> 00:00:31.790
UI thread you've got to update some
visual thingamajigger or whatever for

00:00:31.790 --> 00:00:31.800
visual thingamajigger or whatever for
 

00:00:31.800 --> 00:00:34.430
visual thingamajigger or whatever for
these types of situations async task is

00:00:34.430 --> 00:00:34.440
these types of situations async task is
 

00:00:34.440 --> 00:00:36.650
these types of situations async task is
obviously the easiest solution for you I

00:00:36.650 --> 00:00:36.660
obviously the easiest solution for you I
 

00:00:36.660 --> 00:00:38.630
obviously the easiest solution for you I
mean it wraps up all the overhead of

00:00:38.630 --> 00:00:38.640
mean it wraps up all the overhead of
 

00:00:38.640 --> 00:00:40.190
mean it wraps up all the overhead of
pushing work from the UI thread to a

00:00:40.190 --> 00:00:40.200
pushing work from the UI thread to a
 

00:00:40.200 --> 00:00:41.330
pushing work from the UI thread to a
worker thread and then getting the

00:00:41.330 --> 00:00:41.340
worker thread and then getting the
 

00:00:41.340 --> 00:00:43.190
worker thread and then getting the
results back to the UI thread

00:00:43.190 --> 00:00:43.200
results back to the UI thread
 

00:00:43.200 --> 00:00:45.290
results back to the UI thread
but async task isn't the right threading

00:00:45.290 --> 00:00:45.300
but async task isn't the right threading
 

00:00:45.300 --> 00:00:47.959
but async task isn't the right threading
primitive for every situation consider

00:00:47.959 --> 00:00:47.969
primitive for every situation consider
 

00:00:47.969 --> 00:00:49.700
primitive for every situation consider
the challenge of getting preview frames

00:00:49.700 --> 00:00:49.710
the challenge of getting preview frames
 

00:00:49.710 --> 00:00:52.160
the challenge of getting preview frames
from your camera these previews are

00:00:52.160 --> 00:00:52.170
from your camera these previews are
 

00:00:52.170 --> 00:00:53.959
from your camera these previews are
given back to you via the on preview

00:00:53.959 --> 00:00:53.969
given back to you via the on preview
 

00:00:53.969 --> 00:00:55.939
given back to you via the on preview
frame callback which is a vocht on the

00:00:55.939 --> 00:00:55.949
frame callback which is a vocht on the
 

00:00:55.949 --> 00:00:57.650
frame callback which is a vocht on the
same thread that the camera dot open

00:00:57.650 --> 00:00:57.660
same thread that the camera dot open
 

00:00:57.660 --> 00:01:00.200
same thread that the camera dot open
function was called on so if this

00:01:00.200 --> 00:01:00.210
function was called on so if this
 

00:01:00.210 --> 00:01:01.639
function was called on so if this
callback were invoked on the UI thread

00:01:01.639 --> 00:01:01.649
callback were invoked on the UI thread
 

00:01:01.649 --> 00:01:03.950
callback were invoked on the UI thread
then the task of dealing with those huge

00:01:03.950 --> 00:01:03.960
then the task of dealing with those huge
 

00:01:03.960 --> 00:01:05.750
then the task of dealing with those huge
pixel arrays would be interfering with

00:01:05.750 --> 00:01:05.760
pixel arrays would be interfering with
 

00:01:05.760 --> 00:01:07.850
pixel arrays would be interfering with
rendering and event processing work and

00:01:07.850 --> 00:01:07.860
rendering and event processing work and
 

00:01:07.860 --> 00:01:10.490
rendering and event processing work and
same thing goes for async tasks remember

00:01:10.490 --> 00:01:10.500
same thing goes for async tasks remember
 

00:01:10.500 --> 00:01:12.980
same thing goes for async tasks remember
that by default these execute serially

00:01:12.980 --> 00:01:12.990
that by default these execute serially
 

00:01:12.990 --> 00:01:14.690
that by default these execute serially
on another thread which means that

00:01:14.690 --> 00:01:14.700
on another thread which means that
 

00:01:14.700 --> 00:01:16.999
on another thread which means that
dealing with an 8 megapixels block of

00:01:16.999 --> 00:01:17.009
dealing with an 8 megapixels block of
 

00:01:17.009 --> 00:01:19.310
dealing with an 8 megapixels block of
data might stall other async task

00:01:19.310 --> 00:01:19.320
data might stall other async task
 

00:01:19.320 --> 00:01:21.590
data might stall other async task
packets that the UI thread is waiting on

00:01:21.590 --> 00:01:21.600
packets that the UI thread is waiting on
 

00:01:21.600 --> 00:01:24.350
packets that the UI thread is waiting on
so really what you want is a non UI non

00:01:24.350 --> 00:01:24.360
so really what you want is a non UI non
 

00:01:24.360 --> 00:01:26.780
so really what you want is a non UI non
async task thread they can receive these

00:01:26.780 --> 00:01:26.790
async task thread they can receive these
 

00:01:26.790 --> 00:01:28.580
async task thread they can receive these
callbacks and potentially spend a long

00:01:28.580 --> 00:01:28.590
callbacks and potentially spend a long
 

00:01:28.590 --> 00:01:30.649
callbacks and potentially spend a long
time processing that work and this is

00:01:30.649 --> 00:01:30.659
time processing that work and this is
 

00:01:30.659 --> 00:01:33.679
time processing that work and this is
exactly what handler thread is for see a

00:01:33.679 --> 00:01:33.689
exactly what handler thread is for see a
 

00:01:33.689 --> 00:01:35.289
exactly what handler thread is for see a
handler thread is effectively a

00:01:35.289 --> 00:01:35.299
handler thread is effectively a
 

00:01:35.299 --> 00:01:37.910
handler thread is effectively a
long-running thread that grabs work from

00:01:37.910 --> 00:01:37.920
long-running thread that grabs work from
 

00:01:37.920 --> 00:01:39.740
long-running thread that grabs work from
a queue and operates on it it's a

00:01:39.740 --> 00:01:39.750
a queue and operates on it it's a
 

00:01:39.750 --> 00:01:41.420
a queue and operates on it it's a
combination of a few other Android

00:01:41.420 --> 00:01:41.430
combination of a few other Android
 

00:01:41.430 --> 00:01:43.850
combination of a few other Android
primitives namely a looper which keeps

00:01:43.850 --> 00:01:43.860
primitives namely a looper which keeps
 

00:01:43.860 --> 00:01:45.350
primitives namely a looper which keeps
the thread alive and holds a message

00:01:45.350 --> 00:01:45.360
the thread alive and holds a message
 

00:01:45.360 --> 00:01:48.050
the thread alive and holds a message
queue and a handler object which manages

00:01:48.050 --> 00:01:48.060
queue and a handler object which manages
 

00:01:48.060 --> 00:01:50.719
queue and a handler object which manages
how work is inserted into that message

00:01:50.719 --> 00:01:50.729
how work is inserted into that message
 

00:01:50.729 --> 00:01:53.300
how work is inserted into that message
queue anyhow getting back to our camera

00:01:53.300 --> 00:01:53.310
queue anyhow getting back to our camera
 

00:01:53.310 --> 00:01:55.310
queue anyhow getting back to our camera
example once you've created a handler

00:01:55.310 --> 00:01:55.320
example once you've created a handler
 

00:01:55.320 --> 00:01:57.020
example once you've created a handler
thread you can delegate the camera dot

00:01:57.020 --> 00:01:57.030
thread you can delegate the camera dot
 

00:01:57.030 --> 00:01:59.270
thread you can delegate the camera dot
open command to it and know that the on

00:01:59.270 --> 00:01:59.280
open command to it and know that the on
 

00:01:59.280 --> 00:02:01.100
open command to it and know that the on
preview frame callback will land on the

00:02:01.100 --> 00:02:01.110
preview frame callback will land on the
 

00:02:01.110 --> 00:02:03.020
preview frame callback will land on the
handler thread rather than the UI or

00:02:03.020 --> 00:02:03.030
handler thread rather than the UI or
 

00:02:03.030 --> 00:02:05.240
handler thread rather than the UI or
async task threads so if you're going to

00:02:05.240 --> 00:02:05.250
async task threads so if you're going to
 

00:02:05.250 --> 00:02:07.399
async task threads so if you're going to
be doing a long-running block of work on

00:02:07.399 --> 00:02:07.409
be doing a long-running block of work on
 

00:02:07.409 --> 00:02:10.100
be doing a long-running block of work on
those pixels this is ideal for you and

00:02:10.100 --> 00:02:10.110
those pixels this is ideal for you and
 

00:02:10.110 --> 00:02:11.809
those pixels this is ideal for you and
to be clear getting the results of that

00:02:11.809 --> 00:02:11.819
to be clear getting the results of that
 

00:02:11.819 --> 00:02:13.309
to be clear getting the results of that
work back to you

00:02:13.309 --> 00:02:13.319
work back to you
 

00:02:13.319 --> 00:02:14.989
work back to you
my thread is pretty straightforward just

00:02:14.989 --> 00:02:14.999
my thread is pretty straightforward just
 

00:02:14.999 --> 00:02:17.599
my thread is pretty straightforward just
pass it along with V run on UI thread

00:02:17.599 --> 00:02:17.609
pass it along with V run on UI thread
 

00:02:17.609 --> 00:02:19.759
pass it along with V run on UI thread
command so handler threads are obviously

00:02:19.759 --> 00:02:19.769
command so handler threads are obviously
 

00:02:19.769 --> 00:02:21.559
command so handler threads are obviously
helpful for other Android AP eyes that

00:02:21.559 --> 00:02:21.569
helpful for other Android AP eyes that
 

00:02:21.569 --> 00:02:23.119
helpful for other Android AP eyes that
follow a similar pattern but they can

00:02:23.119 --> 00:02:23.129
follow a similar pattern but they can
 

00:02:23.129 --> 00:02:25.759
follow a similar pattern but they can
also be useful for longer running non UI

00:02:25.759 --> 00:02:25.769
also be useful for longer running non UI
 

00:02:25.769 --> 00:02:28.309
also be useful for longer running non UI
work like a compressing a batch of user

00:02:28.309 --> 00:02:28.319
work like a compressing a batch of user
 

00:02:28.319 --> 00:02:29.869
work like a compressing a batch of user
metrics before uploading it to your

00:02:29.869 --> 00:02:29.879
metrics before uploading it to your
 

00:02:29.879 --> 00:02:32.300
metrics before uploading it to your
server if you've got other UI specific

00:02:32.300 --> 00:02:32.310
server if you've got other UI specific
 

00:02:32.310 --> 00:02:34.699
server if you've got other UI specific
tasks happening on async tasks then you

00:02:34.699 --> 00:02:34.709
tasks happening on async tasks then you
 

00:02:34.709 --> 00:02:36.379
tasks happening on async tasks then you
might not want this longer running

00:02:36.379 --> 00:02:36.389
might not want this longer running
 

00:02:36.389 --> 00:02:38.839
might not want this longer running
operation to stall that work so handler

00:02:38.839 --> 00:02:38.849
operation to stall that work so handler
 

00:02:38.849 --> 00:02:41.509
operation to stall that work so handler
threads are a good place for it oh by

00:02:41.509 --> 00:02:41.519
threads are a good place for it oh by
 

00:02:41.519 --> 00:02:43.129
threads are a good place for it oh by
the way when you create a hammer thread

00:02:43.129 --> 00:02:43.139
the way when you create a hammer thread
 

00:02:43.139 --> 00:02:45.229
the way when you create a hammer thread
don't forget to set its thread priority

00:02:45.229 --> 00:02:45.239
don't forget to set its thread priority
 

00:02:45.239 --> 00:02:46.849
don't forget to set its thread priority
based on the type of work it's doing I

00:02:46.849 --> 00:02:46.859
based on the type of work it's doing I
 

00:02:46.859 --> 00:02:49.159
based on the type of work it's doing I
mean remember CPUs can only handle a

00:02:49.159 --> 00:02:49.169
mean remember CPUs can only handle a
 

00:02:49.169 --> 00:02:51.349
mean remember CPUs can only handle a
small number of threads in parallel so

00:02:51.349 --> 00:02:51.359
small number of threads in parallel so
 

00:02:51.359 --> 00:02:53.119
small number of threads in parallel so
setting the priority helps the system

00:02:53.119 --> 00:02:53.129
setting the priority helps the system
 

00:02:53.129 --> 00:02:55.369
setting the priority helps the system
know the right ways to schedule this

00:02:55.369 --> 00:02:55.379
know the right ways to schedule this
 

00:02:55.379 --> 00:02:57.020
know the right ways to schedule this
work when the other threads are fighting

00:02:57.020 --> 00:02:57.030
work when the other threads are fighting
 

00:02:57.030 --> 00:02:59.270
work when the other threads are fighting
for attention and that's the whole thing

00:02:59.270 --> 00:02:59.280
for attention and that's the whole thing
 

00:02:59.280 --> 00:03:01.399
for attention and that's the whole thing
when it comes to performance coding you

00:03:01.399 --> 00:03:01.409
when it comes to performance coding you
 

00:03:01.409 --> 00:03:02.750
when it comes to performance coding you
have to understand enough about the

00:03:02.750 --> 00:03:02.760
have to understand enough about the
 

00:03:02.760 --> 00:03:04.429
have to understand enough about the
primitives to know how they help you and

00:03:04.429 --> 00:03:04.439
primitives to know how they help you and
 

00:03:04.439 --> 00:03:06.770
primitives to know how they help you and
how they might hurt you and if it's not

00:03:06.770 --> 00:03:06.780
how they might hurt you and if it's not
 

00:03:06.780 --> 00:03:08.809
how they might hurt you and if it's not
working move on to a better pattern

00:03:08.809 --> 00:03:08.819
working move on to a better pattern
 

00:03:08.819 --> 00:03:09.979
working move on to a better pattern
which is why you should check out the

00:03:09.979 --> 00:03:09.989
which is why you should check out the
 

00:03:09.989 --> 00:03:11.179
which is why you should check out the
rest of the Android performance patterns

00:03:11.179 --> 00:03:11.189
rest of the Android performance patterns
 

00:03:11.189 --> 00:03:13.580
rest of the Android performance patterns
videos and don't forget to ask the hard

00:03:13.580 --> 00:03:13.590
videos and don't forget to ask the hard
 

00:03:13.590 --> 00:03:15.770
videos and don't forget to ask the hard
threading questions on the Google+

00:03:15.770 --> 00:03:15.780
threading questions on the Google+
 

00:03:15.780 --> 00:03:18.409
threading questions on the Google+
community as well so keep calm profile

00:03:18.409 --> 00:03:18.419
community as well so keep calm profile
 

00:03:18.419 --> 00:03:19.879
community as well so keep calm profile
your code and always remember perf

00:03:19.879 --> 00:03:19.889
your code and always remember perf
 

00:03:19.889 --> 00:03:22.430
your code and always remember perf
matters

