WEBVTT
Kind: captions
Language: en

00:00:15.190 --> 00:00:16.990
BASTIEN LEGRAS: Hi, I guess
you can hear me.

00:00:16.990 --> 00:00:18.240
So my name is Bastien Legras.

00:00:20.980 --> 00:00:24.910
I am a cloud solution engineer
based in Google Paris office.

00:00:24.910 --> 00:00:29.960
I work with Christoph that
you just saw before me.

00:00:29.960 --> 00:00:33.450
And we cover together Southern
Europe, so France, Italy, and

00:00:33.450 --> 00:00:35.070
Spain, and Portugal.

00:00:35.070 --> 00:00:36.350
And in this session--

00:00:36.350 --> 00:00:38.590
it's a 20-minute session--

00:00:38.590 --> 00:00:40.810
we're going to cover mobile
from a more technical

00:00:40.810 --> 00:00:41.480
perspective.

00:00:41.480 --> 00:00:43.930
So we're going to cover
Cloud Endpoints.

00:00:43.930 --> 00:00:45.020
Maybe you heard about it.

00:00:45.020 --> 00:00:46.750
It's a feature of App Engine.

00:00:46.750 --> 00:00:50.230
And we're going to cover, as
well, Cloud Mobile Backends.

00:00:50.230 --> 00:00:53.160
That has been announced at
Google I/O. And I will show an

00:00:53.160 --> 00:00:59.770
extract of the video
of Google I/O.

00:00:59.770 --> 00:01:02.390
So first, Cloud Endpoints.

00:01:02.390 --> 00:01:05.304
For those who don't know
already, the idea with Cloud

00:01:05.304 --> 00:01:09.380
Endpoints is to accelerate the
time to market for your mobile

00:01:09.380 --> 00:01:12.010
applications, or web
applications as well, in

00:01:12.010 --> 00:01:18.850
HTML5, by autocoding the layer
that connects your mobile app

00:01:18.850 --> 00:01:20.420
to our backend.

00:01:20.420 --> 00:01:23.200
So you just have to focus
on the UI, on the user

00:01:23.200 --> 00:01:26.470
experience, and the features of
your game, and don't worry

00:01:26.470 --> 00:01:28.090
about the [INAUDIBLE]

00:01:28.090 --> 00:01:32.560
that will access the
backend services.

00:01:32.560 --> 00:01:34.825
And we do that for
Android and iOS.

00:01:38.010 --> 00:01:42.180
The other topic, the Mobile
Backend Starter, and we're

00:01:42.180 --> 00:01:46.350
going to go deep dive into these
features, is a set of

00:01:46.350 --> 00:01:50.790
APIs, of services in the App
Engine, that will also help

00:01:50.790 --> 00:01:55.780
you do stuff like
authentication, messaging--

00:01:55.780 --> 00:01:57.530
so push from the cloud--

00:01:57.530 --> 00:02:00.280
continuous queries-- we'll have
a short video on that--

00:02:00.280 --> 00:02:04.370
and, again, help you be more
productive and focus more on

00:02:04.370 --> 00:02:09.300
your app rather than on the
technical underground.

00:02:09.300 --> 00:02:14.550
So first this one minute
interview with Fred Sauer and

00:02:14.550 --> 00:02:17.460
Mandy Waite who are in developer
relations, also at

00:02:17.460 --> 00:02:22.090
Google, based in the US, and
she's in London, I guess.

00:02:22.090 --> 00:02:25.460
Telling what is the strategy
with cloud backend.

00:02:25.460 --> 00:02:29.020
So for that, because we don't
have an output, I will try to

00:02:29.020 --> 00:02:30.730
use the mic, hoping we
won't have feedback.

00:02:35.373 --> 00:02:37.920
FRED SAUER: So how viable or
recommended would it be to

00:02:37.920 --> 00:02:40.830
build a backend service for
mobile apps around Google

00:02:40.830 --> 00:02:42.774
Cloud Endpoints?

00:02:42.774 --> 00:02:47.230
MANDY WAITE: All right, I think,
really, that's probably

00:02:47.230 --> 00:02:49.755
the biggest use case for
Cloud Endpoints,

00:02:49.755 --> 00:02:51.679
building mobile backends.

00:02:51.679 --> 00:02:54.565
And we say backends, again,
we're talking about the

00:02:54.565 --> 00:02:56.265
general sense of it,
rather than the App

00:02:56.265 --> 00:02:57.210
Engine sense of backends.

00:02:57.210 --> 00:02:59.750
If you want to build an
application that will provide

00:02:59.750 --> 00:03:02.720
resources and services that
are consumed by mobile

00:03:02.720 --> 00:03:05.440
devices, then Cloud Endpoints
will do that for

00:03:05.440 --> 00:03:07.510
you out of the box.

00:03:07.510 --> 00:03:07.936
I think, pretty much,
we covered most

00:03:07.936 --> 00:03:09.565
of that in the slides.

00:03:09.565 --> 00:03:11.527
But the documentation is pretty
extensive, both for

00:03:11.527 --> 00:03:12.615
Java and for Python.

00:03:12.615 --> 00:03:16.665
So you can learn more about how
to use Cloud Endpoints.

00:03:16.665 --> 00:03:18.340
You can check that out.

00:03:18.340 --> 00:03:19.851
There was also Google I/O.

00:03:19.851 --> 00:03:21.200
FRED SAUER: There was, yes.

00:03:21.200 --> 00:03:22.775
MANDY WAITE: You can actually
get a lot of information from

00:03:22.775 --> 00:03:26.746
Google I/O sessions from
previous years.

00:03:26.746 --> 00:03:28.222
FRED SAUER: Very good.

00:03:28.222 --> 00:03:30.430
All right, your turn.

00:03:30.430 --> 00:03:33.040
MANDY WAITE: My turn.

00:03:33.040 --> 00:03:35.080
BASTIEN LEGRAS: I'm not sure you
have heard very well, but

00:03:35.080 --> 00:03:36.380
you have the captions.

00:03:36.380 --> 00:03:40.290
So as you understand, the idea
is to really help startups

00:03:40.290 --> 00:03:43.980
being more productive and so to
try more applications, more

00:03:43.980 --> 00:03:46.990
games, on Android and iOS.

00:03:50.840 --> 00:03:53.060
So let's talk about--

00:03:53.060 --> 00:03:54.440
sorry--

00:03:54.440 --> 00:03:57.360
so where Christoph left
you last, which

00:03:57.360 --> 00:03:59.460
is the Cloud Endpoints.

00:03:59.460 --> 00:04:04.560
So as I said, the idea is that
all the essential components

00:04:04.560 --> 00:04:10.040
that all mobile applications
need are, basically,

00:04:10.040 --> 00:04:10.710
autocoded--

00:04:10.710 --> 00:04:13.540
when I say autocoded, it's
like a wrapper is coded.

00:04:13.540 --> 00:04:15.160
So you just have to--

00:04:15.160 --> 00:04:19.230
if you are building your own
APIs, in the App Engine

00:04:19.230 --> 00:04:22.550
backend, then you will manage
with the cloud backend to

00:04:22.550 --> 00:04:27.280
expose these APIs, and also have
the client side that will

00:04:27.280 --> 00:04:31.250
be written by the App Engine
toolkit, so you can directly

00:04:31.250 --> 00:04:32.710
start from that.

00:04:32.710 --> 00:04:36.720
And the development process
is quite simple.

00:04:36.720 --> 00:04:39.210
So you write your API
backend first.

00:04:39.210 --> 00:04:42.950
That's where you need to start,
at the data design, and

00:04:42.950 --> 00:04:45.510
of course, the methods
you want to expose.

00:04:45.510 --> 00:04:49.440
And then, what you can do is
either annotate your API

00:04:49.440 --> 00:04:52.680
backend code, because this is
the annotation that will help

00:04:52.680 --> 00:04:57.710
the toolkit to generate the
wrapper, or you can use the

00:04:57.710 --> 00:05:00.030
plug-in for Eclipse, if you
are an Eclipse developer.

00:05:00.030 --> 00:05:01.840
And by the way, who is an
Eclipse developer here?

00:05:05.020 --> 00:05:06.480
Quite a number of you.

00:05:06.480 --> 00:05:09.270
So the two options are here.

00:05:09.270 --> 00:05:12.760
Then what you want to do is to
generate the client library,

00:05:12.760 --> 00:05:16.460
of course, from which you will
then write your mobile app.

00:05:16.460 --> 00:05:17.860
And again, two solutions.

00:05:17.860 --> 00:05:21.580
You can use the SH tool,
endpoints.sh, or use the

00:05:21.580 --> 00:05:25.070
plug-in directly
within Eclipse.

00:05:25.070 --> 00:05:28.450
And then, for the last step, you
can start working on your

00:05:28.450 --> 00:05:32.410
client app and, as I said,
focus on your UI, on the

00:05:32.410 --> 00:05:35.770
business logic on the client
side of your application.

00:05:38.290 --> 00:05:41.970
So now, some extract of the
Google I/O slides as well.

00:05:41.970 --> 00:05:45.570
So they were building an
application live in the demo.

00:05:45.570 --> 00:05:48.440
And I encourage you to go have
a look at this video.

00:05:48.440 --> 00:05:50.290
It's a 30-minute long video.

00:05:50.290 --> 00:05:54.330
And I'll show you after the
link, where geeks want to

00:05:54.330 --> 00:05:57.920
finally choose us for using
maps, et cetera.

00:05:57.920 --> 00:06:00.730
And the idea here, as you can
see, that application on the

00:06:00.730 --> 00:06:04.040
left is using the Mobile
Backend Starter Client,

00:06:04.040 --> 00:06:07.800
directly connected, and
the Android Client ID.

00:06:07.800 --> 00:06:11.300
So the ID that will also help
identify your application with

00:06:11.300 --> 00:06:13.540
the backend to connect
to each other.

00:06:16.850 --> 00:06:20.060
What you can do as well-- so now
I'm more focusing on the

00:06:20.060 --> 00:06:25.290
backend itself-- is that you
can directly store your

00:06:25.290 --> 00:06:28.430
application data in two
kinds of storage.

00:06:28.430 --> 00:06:30.700
I don't know if you can read,
but there is the App Engine

00:06:30.700 --> 00:06:34.960
data store, which we have now
renamed by the way, as Cloud

00:06:34.960 --> 00:06:39.330
Datastore, from which you can
connect from anywhere.

00:06:39.330 --> 00:06:43.580
And the idea is that we now
have even four storage

00:06:43.580 --> 00:06:46.390
mechanisms with Google
Cloud platform.

00:06:46.390 --> 00:06:49.930
You have this Cloud Datastore,
which is a NoSQL, [INAUDIBLE]

00:06:49.930 --> 00:06:50.370
datastore.

00:06:50.370 --> 00:06:53.190
You can store terabytes of
objects if you want.

00:06:53.190 --> 00:06:57.040
Here we have, also, the Google
Cloud storage, which is object

00:06:57.040 --> 00:06:58.680
storage, more like
a file system.

00:06:58.680 --> 00:07:00.830
And we will have a session
on that this

00:07:00.830 --> 00:07:02.520
afternoon at 3:00, I think.

00:07:02.520 --> 00:07:03.640
That will be me again.

00:07:03.640 --> 00:07:06.160
I'll do a quick demo.

00:07:06.160 --> 00:07:09.240
For those who don't know, there
is also CloudSQL, which

00:07:09.240 --> 00:07:14.190
is MySQL 5.5 managed in our
cloud data centers.

00:07:14.190 --> 00:07:19.010
And you can directly access
using SQL queries at the port

00:07:19.010 --> 00:07:23.110
3306 from Compute
Engine today.

00:07:23.110 --> 00:07:25.865
And at the end, because I
wanted to focus more on

00:07:25.865 --> 00:07:28.250
storage, there is also another
storage mechanism which is

00:07:28.250 --> 00:07:30.150
more in the Compute
Engine world.

00:07:30.150 --> 00:07:32.350
And we will discuss about
Compute Engine a lot.

00:07:32.350 --> 00:07:34.640
This afternoon, I will do
a demo of that as well.

00:07:34.640 --> 00:07:35.720
It's called the Persistent
Disk.

00:07:35.720 --> 00:07:39.120
So Persistent Disk is a
five-system mounted network

00:07:39.120 --> 00:07:42.180
share that you can share across
apps to 16 machines.

00:07:42.180 --> 00:07:44.410
And you can format yourself.

00:07:44.410 --> 00:07:46.280
And you can use that to
boot your machines--

00:07:46.280 --> 00:07:47.530
very convenient and scalable.

00:07:50.310 --> 00:07:54.350
Then other features that you
may need from the cloud

00:07:54.350 --> 00:07:57.930
backend for your application
is asynchronous processing.

00:07:57.930 --> 00:07:59.040
So you can use Task Queues.

00:07:59.040 --> 00:08:02.550
Task Queues is one of the top
components in App Engine.

00:08:02.550 --> 00:08:05.920
So you can directly create your
tasks, store them, and

00:08:05.920 --> 00:08:10.140
they will executive so you
can run your batches.

00:08:10.140 --> 00:08:12.990
I don't know why I am
using my keyboard.

00:08:12.990 --> 00:08:15.700
So then the push notification,
that's

00:08:15.700 --> 00:08:17.300
something also really key.

00:08:17.300 --> 00:08:21.260
This is something we've been
using a lot at Google since

00:08:21.260 --> 00:08:24.360
day one because for Android,
with Google Play--

00:08:24.360 --> 00:08:26.900
so former Android market--

00:08:26.900 --> 00:08:29.380
when we want to push application
updates so your

00:08:29.380 --> 00:08:32.860
phone is going to download them
automatically, the idea

00:08:32.860 --> 00:08:35.440
that we've been using that
type of technology.

00:08:35.440 --> 00:08:36.799
So cloud messaging--

00:08:36.799 --> 00:08:39.570
so the phone stays quite
connected, if you

00:08:39.570 --> 00:08:40.900
want, with the cloud.

00:08:40.900 --> 00:08:45.020
So you can push from your app's
backend to the users a

00:08:45.020 --> 00:08:46.010
notification.

00:08:46.010 --> 00:08:48.640
That's very useful.

00:08:48.640 --> 00:08:51.280
Let's say in a gaming
environment, or if people want

00:08:51.280 --> 00:08:54.450
to chat-- we use it as well
for Google Hangout--

00:08:54.450 --> 00:08:56.780
renamed, it was Google
Talk before.

00:08:56.780 --> 00:09:00.990
We cannot predict when the
notification will come.

00:09:00.990 --> 00:09:05.100
And cloud messaging is the
right toolkit for that.

00:09:05.100 --> 00:09:08.910
So you can really push messages,
technical messages,

00:09:08.910 --> 00:09:10.750
to the app instances you get.

00:09:10.750 --> 00:09:15.160
And we have also worked
on the iOS world.

00:09:15.160 --> 00:09:22.480
So as you can see here, Apple
push notification service,

00:09:22.480 --> 00:09:25.800
which is similar to VPN, similar
to push also with

00:09:25.800 --> 00:09:28.080
messages from the backend
to iOS instances.

00:09:31.110 --> 00:09:35.005
Another example-- so I hope, in
the next video, I will show

00:09:35.005 --> 00:09:36.760
and you can hear, so
you understand

00:09:36.760 --> 00:09:38.540
how it works as well.

00:09:38.540 --> 00:09:42.720
But you see, still, on the right
side, the Mobile Backend

00:09:42.720 --> 00:09:47.200
Starter and the Client Library
on the left, showing how you

00:09:47.200 --> 00:09:49.830
can do that kind of
registration and

00:09:49.830 --> 00:09:51.080
push messages directly.

00:09:53.760 --> 00:09:56.380
And then serving and
processing images.

00:09:56.380 --> 00:09:59.510
If you are developing, I don't
know, a camera for the phone,

00:09:59.510 --> 00:10:04.490
or a game that needs image
processing, like social

00:10:04.490 --> 00:10:07.820
network, that's also a
service we provide

00:10:07.820 --> 00:10:09.000
on the cloud platform.

00:10:09.000 --> 00:10:11.410
So something you directly use
from cloud storage to store

00:10:11.410 --> 00:10:13.520
the static images.

00:10:13.520 --> 00:10:17.320
And then you can process them
in the image service to

00:10:17.320 --> 00:10:20.730
convert them from a format to
another, to do, I don't know,

00:10:20.730 --> 00:10:23.820
color modifications, stuff like
this, or push lighter

00:10:23.820 --> 00:10:27.200
images to your phone, if, when
you're want to have a mosaics,

00:10:27.200 --> 00:10:29.380
family pictures.

00:10:29.380 --> 00:10:32.480
So that's the type, usually,
of usage we see

00:10:32.480 --> 00:10:35.750
on the image services.

00:10:35.750 --> 00:10:38.640
Another one is the search.

00:10:38.640 --> 00:10:41.090
So of course, we do a lot
of things in search.

00:10:41.090 --> 00:10:43.860
And now App Engine--

00:10:43.860 --> 00:10:46.860
so I think this was an App
Engine in the March version--

00:10:46.860 --> 00:10:49.480
we now provide full
text search.

00:10:49.480 --> 00:10:53.300
And that's also something very
useful in the mobile use case.

00:10:53.300 --> 00:10:56.830
So we can do full text search
on the backend directly from

00:10:56.830 --> 00:10:59.120
the phone as well.

00:10:59.120 --> 00:11:02.670
And geo proximity again, if
you wanted to search in a

00:11:02.670 --> 00:11:04.515
geolocalization context.

00:11:08.010 --> 00:11:10.340
The tasks we were talking about,
the Task Queues, now

00:11:10.340 --> 00:11:11.910
there's also the
schedule task.

00:11:11.910 --> 00:11:15.410
If you need to have schedule
task for your application,

00:11:15.410 --> 00:11:18.940
like, I don't know, recurrent
updates, or if there is a

00:11:18.940 --> 00:11:21.570
message that you need to pass at
the certain time of the day

00:11:21.570 --> 00:11:22.290
to your users.

00:11:22.290 --> 00:11:24.946
That's also a component of App
Engine you may want to use in

00:11:24.946 --> 00:11:26.196
a mobile scenario.

00:11:31.280 --> 00:11:34.180
Now I heard a question this
morning of someone asking

00:11:34.180 --> 00:11:36.020
what's the integration between
the App Engine

00:11:36.020 --> 00:11:37.170
and the Compute Engine?

00:11:37.170 --> 00:11:39.160
So we have been working
on that.

00:11:39.160 --> 00:11:42.300
And the idea is that if you
have a heavy task that you

00:11:42.300 --> 00:11:45.160
don't want to run using App
Engine backend, but you need

00:11:45.160 --> 00:11:49.150
really a sever to do that, or
rack of servers, you can do

00:11:49.150 --> 00:11:51.280
that from Compute Engine and

00:11:51.280 --> 00:11:52.690
orchestrate it from App Engine.

00:11:52.690 --> 00:11:55.980
So the idea here-- that's
what we call VM Engine--

00:11:55.980 --> 00:11:58.940
is that you can imagine
you create a task.

00:11:58.940 --> 00:12:02.320
And this task is going to be
sent to a cluster of GC

00:12:02.320 --> 00:12:05.300
machines that you can start from
App Engine, execute the

00:12:05.300 --> 00:12:07.260
task, send back the
result, and then

00:12:07.260 --> 00:12:08.780
shut down the mission.

00:12:08.780 --> 00:12:14.575
Maybe you've heard at I/O that
we now do [INAUDIBLE], so that

00:12:14.575 --> 00:12:15.230
is very useful.

00:12:15.230 --> 00:12:18.930
If you have really heavy video
processing task for which you

00:12:18.930 --> 00:12:21.640
need a heavy CPU server.

00:12:21.640 --> 00:12:24.705
You can really imagine that the
task is generated by App

00:12:24.705 --> 00:12:27.690
Engine, executed by Compute
Engine, result is sent back,

00:12:27.690 --> 00:12:29.940
and App Engine [INAUDIBLE].

00:12:29.940 --> 00:12:32.890
Very convenient,
and all that is

00:12:32.890 --> 00:12:36.810
integrated using Task Queues.

00:12:36.810 --> 00:12:39.850
Continuous Query also is
quite interesting.

00:12:39.850 --> 00:12:45.650
So I would like to show an
extract of the I/O session on

00:12:45.650 --> 00:12:51.100
that, so you can better
understand what was the use

00:12:51.100 --> 00:12:54.710
case, and how it works because
it's a five-step scenario.

00:12:54.710 --> 00:12:59.300
And that's, I think, very
interesting also for gaming or

00:12:59.300 --> 00:13:01.080
mobile apps in general.

00:13:01.080 --> 00:13:03.460
So we're going to try
with this one.

00:13:03.460 --> 00:13:05.320
But worse case is there
are captions, OK?

00:13:05.320 --> 00:13:09.100
So a two- or three-minute video,
there are captions .

00:13:09.100 --> 00:13:10.600
And I think I already--

00:13:10.600 --> 00:13:11.850
no, let's try that way.

00:13:20.310 --> 00:13:22.690
DAVID CHANDLER: Well, I'll tell
you about the Continuous

00:13:22.690 --> 00:13:26.830
Query capability that we're
going to use to do that.

00:13:26.830 --> 00:13:29.690
So this is a feature of the
Mobile Backend Starter project

00:13:29.690 --> 00:13:33.260
that uses several App Engine
features as well.

00:13:33.260 --> 00:13:36.410
There's a API and preview called
Prospective Search.

00:13:36.410 --> 00:13:39.360
And what that does is, anytime
data comes in that matches the

00:13:39.360 --> 00:13:42.930
parameters of your query, then
App Engine will notify your

00:13:42.930 --> 00:13:46.620
app on the server side
that some matching

00:13:46.620 --> 00:13:48.090
data has been found.

00:13:48.090 --> 00:13:50.310
So we're going to use that
to our advantage here.

00:13:50.310 --> 00:13:54.180
Any time a new location update
gets posted, then our app will

00:13:54.180 --> 00:13:55.840
get notified on the
server side.

00:13:55.840 --> 00:13:59.000
And the Mobile Backend Starter
project takes that further and

00:13:59.000 --> 00:14:02.490
will send a GCM message
to our app running on

00:14:02.490 --> 00:14:03.910
the phone as well.

00:14:03.910 --> 00:14:05.210
So the flow looks like this.

00:14:05.210 --> 00:14:09.120
In step one, a new location
update comes from the phone,

00:14:09.120 --> 00:14:10.770
gets put in the server.

00:14:10.770 --> 00:14:14.880
In step two, the App Engine
Prospective Search API

00:14:14.880 --> 00:14:17.530
notifies the server side
part of our Mobile

00:14:17.530 --> 00:14:18.950
Backend Starter app.

00:14:18.950 --> 00:14:23.020
That sends a GCM message, Google
Cloud Messaging, to the

00:14:23.020 --> 00:14:25.610
client in step three.

00:14:25.610 --> 00:14:30.500
Then, in step four we re-query
to get the latest data from

00:14:30.500 --> 00:14:31.620
the server.

00:14:31.620 --> 00:14:36.090
And then, finally, step five, we
draw the markers on the map

00:14:36.090 --> 00:14:38.600
with that most recent data.

00:14:38.600 --> 00:14:42.140
So I'm going to go now write
the code that actually does

00:14:42.140 --> 00:14:43.780
this in our app.

00:14:43.780 --> 00:14:48.590
So we'll again take a look
into our map activity.

00:14:48.590 --> 00:14:51.940
And the first thing we want
to do is write a query--

00:14:51.940 --> 00:14:54.950
I'm just going to scroll down
a little bit here--

00:14:54.950 --> 00:14:59.120
that will go out and get
the geek locations.

00:14:59.120 --> 00:15:07.230
So we paste in some code here,
query geeks, and show you what

00:15:07.230 --> 00:15:10.080
that looks like.

00:15:10.080 --> 00:15:12.900
All the capability that I just
described on that slide is

00:15:12.900 --> 00:15:15.940
called Continuous Queries is
what we're calling it right

00:15:15.940 --> 00:15:17.400
now in this project.

00:15:17.400 --> 00:15:22.180
And so the first part of our
query is to write a handler

00:15:22.180 --> 00:15:24.660
that will receive the
results, so we have

00:15:24.660 --> 00:15:25.720
a OnComplete handler.

00:15:25.720 --> 00:15:29.340
And we're just going to draw
markers, simple enough.

00:15:29.340 --> 00:15:33.610
Then, to actually register
the query, we call

00:15:33.610 --> 00:15:34.860
getCloudBackend.
clearAllSubscription.

00:15:37.550 --> 00:15:40.570
Now the notion of a Continuous
Query, you can subscribe to

00:15:40.570 --> 00:15:41.760
queries on the server.

00:15:41.760 --> 00:15:43.870
So we want to clear any existing
subscriptions and

00:15:43.870 --> 00:15:45.640
then set up a new one.

00:15:45.640 --> 00:15:49.060
So we say a new Cloud
Query for kind geek.

00:15:49.060 --> 00:15:52.170
We're just going to get the top
50 geeks sorted in order

00:15:52.170 --> 00:15:54.610
of the most recent
location updates.

00:15:54.610 --> 00:15:57.620
And we're going to make the
scope future and past.

00:15:57.620 --> 00:16:00.320
So again, this is a feature of
the Mobile Backend Starter

00:16:00.320 --> 00:16:03.450
that lets you say, I want to be
notified of future matches

00:16:03.450 --> 00:16:06.030
to this query, as
well as present.

00:16:06.030 --> 00:16:08.150
And if you think about the
amount of code that you would

00:16:08.150 --> 00:16:11.670
have to write to do all
manually, setting up GCM,

00:16:11.670 --> 00:16:13.940
keeping track of this data,
is actually a very nice

00:16:13.940 --> 00:16:16.230
convenience.

00:16:16.230 --> 00:16:17.876
BASTIEN LEGRAS: It
stops there.

00:16:17.876 --> 00:16:21.250
So it was to better illustrate
this concept.

00:16:26.880 --> 00:16:29.970
So this is the slide Christoph
was showing before.

00:16:29.970 --> 00:16:33.290
But now, you maybe more
understand how all the pieces

00:16:33.290 --> 00:16:34.960
of the puzzle come together.

00:16:34.960 --> 00:16:40.680
So it's a recap of all these
features, as you can see.

00:16:40.680 --> 00:16:44.890
So we really believe with that
kind of architectures, App

00:16:44.890 --> 00:16:46.660
Engine is a great
orchestrater.

00:16:46.660 --> 00:16:50.360
So it's like the chef or puppet
if you use that kind of

00:16:50.360 --> 00:16:54.190
technology to talk to
all the services.

00:16:54.190 --> 00:16:57.680
We think that with
doing a lot of

00:16:57.680 --> 00:16:59.710
integration between the services--

00:16:59.710 --> 00:17:03.310
the team in Google, it's
hundreds of engineers we have

00:17:03.310 --> 00:17:06.980
in US and in Europe.

00:17:06.980 --> 00:17:09.380
But the idea is to have
a common set of APIs.

00:17:09.380 --> 00:17:13.079
And you will see in the demo
this afternoon on the Compute

00:17:13.079 --> 00:17:16.760
Engine, I will show what is a
project, how the console looks

00:17:16.760 --> 00:17:19.540
like, and how you can activate
your services, and how you can

00:17:19.540 --> 00:17:23.700
connect each together
when it comes to

00:17:23.700 --> 00:17:25.470
design and video projects.

00:17:25.470 --> 00:17:29.300
So in this capacity, App Engine
is talking to your

00:17:29.300 --> 00:17:32.760
devices, whether they
are Android or iOS.

00:17:32.760 --> 00:17:37.590
It can talk directly from here
and push to Android devices

00:17:37.590 --> 00:17:41.130
using Google Cloud Messaging
technology or using Apple push

00:17:41.130 --> 00:17:42.810
notification technology.

00:17:42.810 --> 00:17:45.450
So that's the two ways you can
communicate from the cloud to

00:17:45.450 --> 00:17:48.000
the devices.

00:17:48.000 --> 00:17:52.290
That was the monetization piece
AdMob that Christoph

00:17:52.290 --> 00:17:53.600
mentioned earlier.

00:17:53.600 --> 00:17:55.930
You have all these App
Engine features--

00:17:55.930 --> 00:17:58.380
we've been covering these in the
App Engine session-- that

00:17:58.380 --> 00:18:02.530
are, of course, useful in a
mobile development scenario.

00:18:02.530 --> 00:18:05.690
The Task Queries as I mentioned
earlier, and that

00:18:05.690 --> 00:18:10.230
you can use to do some batch
processing on Compute Engine

00:18:10.230 --> 00:18:15.335
for heavy loads, schedule tasks,
search APIs, and log

00:18:15.335 --> 00:18:18.210
the APIs as usual on App Engine
that you can also

00:18:18.210 --> 00:18:22.440
imagine, because now we are
plugging together BigQuery,

00:18:22.440 --> 00:18:26.680
which is our big data engine,
and some other parts of

00:18:26.680 --> 00:18:29.580
Google, like Google Analytics,
Google AdSense, the logs here

00:18:29.580 --> 00:18:30.560
from App Engine.

00:18:30.560 --> 00:18:35.580
So you can also analyze the way
all your users are playing

00:18:35.580 --> 00:18:39.000
or are using your application
to better understand what

00:18:39.000 --> 00:18:40.990
works, what doesn't work,
in an application.

00:18:40.990 --> 00:18:43.150
So you can optimize it,
whether it's difficult

00:18:43.150 --> 00:18:44.250
[? seniority ?]--

00:18:44.250 --> 00:18:47.065
and again, to make sure that
people are not stuck in level

00:18:47.065 --> 00:18:50.260
four because there's a challenge
that was maybe too

00:18:50.260 --> 00:18:52.110
much difficult for the user.

00:18:52.110 --> 00:18:54.460
Or if it's a feature
that no one uses.

00:18:54.460 --> 00:18:57.750
So that's a great way, using
the logs and BigQuery to

00:18:57.750 --> 00:19:00.370
detect that kind of optimization
you should do on

00:19:00.370 --> 00:19:01.620
your application.

00:19:03.380 --> 00:19:04.610
And if you are very hungry--

00:19:04.610 --> 00:19:06.750
[APPLAUSE]

00:19:06.750 --> 00:19:08.150
BASTIEN LEGRAS: Thank
you very much.

