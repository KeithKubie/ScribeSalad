WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.000
The first part here was easy.

00:00:02.000 --> 00:00:06.000
We want digits to be the same length as the number of letters,

00:00:06.000 --> 00:00:11.000
because we want to substitute them one for one--123 for ABC or whatever.

00:00:11.000 --> 00:00:18.000
We want to ask itertools.permutations to take permutations of the letters taken n at a time

00:00:18.000 --> 00:00:22.000
where n is the number of letters, the length of the letters. That part's easy.

00:00:22.000 --> 00:00:25.000
This part's a little bit more complicated--how do we find the letters.

00:00:25.000 --> 00:00:31.000
Here's what I did. I used the regular expression, the "re" module.

00:00:31.000 --> 00:00:37.000
I used the findall function so that says find all letters from A to Z,

00:00:37.000 --> 00:00:40.000
and I didn't specify here capitals before.

00:00:40.000 --> 00:00:45.000
My interpretation and the general rules for this type of cryptarithmetic problems

00:00:45.000 --> 00:00:49.000
is that they should be capitals, but if you allow lowercase as well, that's fine.

00:00:49.000 --> 00:00:54.000
Find them all within the formula, make a set of those, because if a letter

00:00:54.000 --> 00:00:57.000
occurs more than once we don't want multiple versions of it.

00:00:57.000 --> 00:00:59.000
We just want individual ones.

00:00:59.000 --> 00:01:01.000
Then join them together into a string.

00:01:01.000 --> 00:01:06.000
Now, I should say that I snuck in one piece of code here that you haven't seen before

00:01:06.000 --> 00:01:09.000
that may seem wild at first. That's the very first line.

00:01:09.000 --> 00:01:13.000
It says from future import division.

00:01:13.000 --> 00:01:17.000
That seems pretty amazing. Wow. Python has a built-in time machine.

00:01:17.000 --> 09:59:59.000
What does it mean to import division from the future?

