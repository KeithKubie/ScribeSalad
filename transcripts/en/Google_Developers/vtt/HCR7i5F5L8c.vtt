WEBVTT
Kind: captions
Language: en

00:00:00.130 --> 00:00:01.390
MISKO HEVERY: Hi, my name
is Misko Hevery.

00:00:01.390 --> 00:00:04.340
I'm the father of AngularJS.

00:00:04.340 --> 00:00:05.495
BRAD GREEN: And I'm Brad
Green, and I will play

00:00:05.495 --> 00:00:07.880
Angular's manager today.

00:00:07.880 --> 00:00:09.561
It's what I do.

00:00:09.561 --> 00:00:12.370
All right, so we wanted to take
some time in front of you

00:00:12.370 --> 00:00:15.220
folks-- thanks for coming, by
the way-- talking about what

00:00:15.220 --> 00:00:17.590
it is that drove us
to build Angular.

00:00:17.590 --> 00:00:19.480
Because we think, when people
come and look at the Angular

00:00:19.480 --> 00:00:22.720
framework, a lot of times they
see the features of Angular,

00:00:22.720 --> 00:00:24.520
and maybe we're not very clear
about what we meant.

00:00:24.520 --> 00:00:26.410
When they come to see the
features, they see what we

00:00:26.410 --> 00:00:28.480
call the three D's--

00:00:28.480 --> 00:00:32.350
directives, dependency
injection, and data-binding.

00:00:32.350 --> 00:00:34.690
But we're passionate about some
very different things.

00:00:34.690 --> 00:00:37.800
We just happened to arrive at
these features along the way.

00:00:37.800 --> 00:00:40.680
So Misko, why don't you talk
about what do you care the

00:00:40.680 --> 00:00:42.230
most about web development?

00:00:42.230 --> 00:00:43.240
MISKO HEVERY: So web
development, if you think

00:00:43.240 --> 00:00:45.682
about it, is all about getting
data to the browser, and then

00:00:45.682 --> 00:00:47.010
back to the database.

00:00:47.010 --> 00:00:49.320
And so one of the things that
you end up doing is a whole

00:00:49.320 --> 00:00:53.260
lot of boilerplate marshaling
of the data back and forth.

00:00:53.260 --> 00:00:55.310
And after you build a couple
of web applications, you're

00:00:55.310 --> 00:00:57.210
just getting tired of writing
the same thing

00:00:57.210 --> 00:00:58.695
over and over again.

00:00:58.695 --> 00:01:00.830
And it's kind of getting in the
way of just building the

00:01:00.830 --> 00:01:02.340
actual stuff.

00:01:02.340 --> 00:01:04.500
And so, the boilerplate is one
of the things that we really

00:01:04.500 --> 00:01:06.580
wanted to eliminate as
much as possible

00:01:06.580 --> 00:01:07.790
inside of our codebase.

00:01:07.790 --> 00:01:08.170
BRAD GREEN: Right.

00:01:08.170 --> 00:01:11.140
So we thought that if we can
distill our apps-- if we could

00:01:11.140 --> 00:01:12.540
boil them down, maybe--

00:01:12.540 --> 00:01:15.240
to their essence, about just
what adds value to the app,

00:01:15.240 --> 00:01:16.190
then it'd be very much--

00:01:16.190 --> 00:01:18.460
it's easier to build these
applications, but also easier

00:01:18.460 --> 00:01:19.220
to understand.

00:01:19.220 --> 00:01:21.750
We spend a lot more time reading
code than writing it.

00:01:21.750 --> 00:01:23.460
So we thought that
would be cool.

00:01:23.460 --> 00:01:25.100
MISKO HEVERY: So the next
thing is, every single

00:01:25.100 --> 00:01:27.070
application I've ever been
on, it was structured

00:01:27.070 --> 00:01:28.420
in some other way.

00:01:28.420 --> 00:01:31.310
And having a common way of
structuring the application

00:01:31.310 --> 00:01:33.080
means the developer
can easily bring--

00:01:33.080 --> 00:01:36.370
come up to speed on your
codebase, and we can easily

00:01:36.370 --> 00:01:37.270
move between projects.

00:01:37.270 --> 00:01:39.240
And so giving structure to the
applications is another

00:01:39.240 --> 00:01:40.060
important thing.

00:01:40.060 --> 00:01:42.290
BRAD GREEN: What is
that shape, Misko?

00:01:42.290 --> 00:01:44.010
MISKO HEVERY: That's
a scaffolding, sir.

00:01:44.010 --> 00:01:44.580
BRAD GREEN: Do you know how
to draw scaffolding?

00:01:44.580 --> 00:01:44.870
MISKO HEVERY: No.

00:01:44.870 --> 00:01:46.330
I do not get paid to draw.

00:01:46.330 --> 00:01:47.450
I get paid to write code.

00:01:47.450 --> 00:01:48.050
BRAD GREEN: OK, good thing.

00:01:48.050 --> 00:01:49.580
Good thing.

00:01:49.580 --> 00:01:52.090
MISKO HEVERY: And then lastly,
I'm a big fan of testability,

00:01:52.090 --> 00:01:54.940
and so we put a lot of testing
effort into our framework.

00:01:54.940 --> 00:01:57.680
But it's not enough to just
build a framework

00:01:57.680 --> 00:01:58.850
which itself is tested.

00:01:58.850 --> 00:02:00.970
It's all about making sure
that the people--

00:02:00.970 --> 00:02:03.820
developers writing code, using
the framework will have easy

00:02:03.820 --> 00:02:04.480
time testing.

00:02:04.480 --> 00:02:07.230
And so one of things we wanted
to make sure is the way the

00:02:07.230 --> 00:02:10.259
framework is structured
naturally leads you down the

00:02:10.259 --> 00:02:11.340
stability path

00:02:11.340 --> 00:02:11.730
BRAD GREEN: That's right.

00:02:11.730 --> 00:02:14.720
And we believe that if you're
shipping software, you better

00:02:14.720 --> 00:02:15.810
be shipping tested software.

00:02:15.810 --> 00:02:17.310
So we really wanted
to make that easy.

00:02:17.310 --> 00:02:20.920
So let's go back to a few years
to 2009, where I think I

00:02:20.920 --> 00:02:22.760
said, Misko, you should
go learn JavaScript.

00:02:22.760 --> 00:02:24.140
This seems like the new thing.

00:02:24.140 --> 00:02:25.100
And what did you do?

00:02:25.100 --> 00:02:27.810
What was your first inclination
as a newbie in the

00:02:27.810 --> 00:02:28.550
world of JavaScript?

00:02:28.550 --> 00:02:29.150
What did you do?

00:02:29.150 --> 00:02:29.960
MISKO HEVERY: Well,
write a framework.

00:02:29.960 --> 00:02:30.820
What else would you do?

00:02:30.820 --> 00:02:31.790
BRAD GREEN: That's right,
every newbie

00:02:31.790 --> 00:02:33.060
should write a framework.

00:02:33.060 --> 00:02:34.650
It's a good policy.

00:02:34.650 --> 00:02:36.910
MISKO HEVERY: So the idea behind
Angular-- the original

00:02:36.910 --> 00:02:39.210
Angular was actually a little
different, which was that

00:02:39.210 --> 00:02:41.640
there's a lot of web designers
out there, people who are not

00:02:41.640 --> 00:02:44.700
really programmers, developers
per se, but they know how to

00:02:44.700 --> 00:02:46.860
put HTML together because
it's so declarative, and

00:02:46.860 --> 00:02:48.260
it's easy to do.

00:02:48.260 --> 00:02:51.590
And so, could we enable the web
designers to be able to

00:02:51.590 --> 00:02:55.390
build a very trivial, simple
application just by a dropping

00:02:55.390 --> 00:02:58.620
little bit of extra markup
logic into the HTML?

00:02:58.620 --> 00:03:00.880
So you don't even have to
manage your backend.

00:03:00.880 --> 00:03:03.320
You have some database in the
cloud, and you include the

00:03:03.320 --> 00:03:05.910
script tag, put a little bit
of extra tags, and all of a

00:03:05.910 --> 00:03:09.370
sudden, your form becomes
persistable form and can send

00:03:09.370 --> 00:03:11.040
email, and things
of that sort.

00:03:11.040 --> 00:03:11.350
BRAD GREEN: That's right.

00:03:11.350 --> 00:03:13.140
You know, this eye-stabbingly
yellow logo, right?

00:03:13.140 --> 00:03:15.490
MISKO HEVERY: You have something
against yellow?

00:03:15.490 --> 00:03:16.160
BRAD GREEN: I got better.

00:03:16.160 --> 00:03:17.291
MISKO HEVERY: All right.

00:03:17.291 --> 00:03:20.510
BRAD GREEN: All right, so fast
forward just a little bit to--

00:03:20.510 --> 00:03:22.120
we were on a project together.

00:03:22.120 --> 00:03:23.850
And I remember Misko--
this was a project

00:03:23.850 --> 00:03:25.100
called Google Feedback.

00:03:25.100 --> 00:03:28.240
And Misko, you and the other
developers on the project were

00:03:28.240 --> 00:03:31.990
kind of unhappy with our
development pace?

00:03:31.990 --> 00:03:32.630
MISKO HEVERY: Yes.

00:03:32.630 --> 00:03:34.350
The velocity was not so great.

00:03:34.350 --> 00:03:37.310
We spent about six months, three
of us working on this

00:03:37.310 --> 00:03:38.340
particular project.

00:03:38.340 --> 00:03:42.870
17,000 lines of code later, we
were really not making the

00:03:42.870 --> 00:03:44.190
progress we wanted to make.

00:03:44.190 --> 00:03:45.130
And so we're frustrated.

00:03:45.130 --> 00:03:47.162
And so in my frustration, I went
to Brad, and I said, you

00:03:47.162 --> 00:03:49.190
know, Brad, I'm working on this
thing in my free time,

00:03:49.190 --> 00:03:50.320
kind of an open source
project.

00:03:50.320 --> 00:03:54.780
And I bet you I could rewrite
the whole thing in two weeks.

00:03:54.780 --> 00:03:56.660
BRAD GREEN: And I said, go for
it, because two weeks--

00:03:56.660 --> 00:03:57.890
whatever.

00:03:57.890 --> 00:03:59.450
But I don't think you quite
made it in two weeks.

00:03:59.450 --> 00:04:00.510
MISKO HEVERY: No, I didn't
make it in two weeks.

00:04:00.510 --> 00:04:02.280
It took me three weeks.

00:04:02.280 --> 00:04:06.540
And 1,500 lines of code later,
we actually have rewritten the

00:04:06.540 --> 00:04:07.820
whole application.

00:04:07.820 --> 00:04:08.990
BRAD GREEN: I was impressed.

00:04:08.990 --> 00:04:11.310
And this was kind of the start
where I though, well, Angular

00:04:11.310 --> 00:04:14.000
seems like it could be a thing
unto itself, not just a part

00:04:14.000 --> 00:04:15.690
of Google Feedback as
the way it was.

00:04:15.690 --> 00:04:18.540
And this is where we decided we
would spin it off into its

00:04:18.540 --> 00:04:20.540
own entity.

00:04:20.540 --> 00:04:23.630
MISKO HEVERY: So what exactly
is it to build a single-page

00:04:23.630 --> 00:04:24.170
application?

00:04:24.170 --> 00:04:26.450
Well, you have a database, and
you the browser, and the stuff

00:04:26.450 --> 00:04:28.610
in the middle is really what
we're talking about, right?

00:04:28.610 --> 00:04:31.710
And so to have a single-page
application is really all

00:04:31.710 --> 00:04:34.420
about modifying the DOM-- you
know, the divs, the spans, the

00:04:34.420 --> 00:04:36.490
uls, the lis, the tables,
and so forth.

00:04:36.490 --> 00:04:39.650
You need to transfer it from
one state to another state,

00:04:39.650 --> 00:04:41.160
because that essentially
is going to drive

00:04:41.160 --> 00:04:42.790
the rendering engine.

00:04:42.790 --> 00:04:44.860
But the thing that's different
between [? round-tree ?]

00:04:44.860 --> 00:04:46.870
applications and single-page
applications that you have to

00:04:46.870 --> 00:04:50.070
deal a lot of it about the
internal thing called RAM.

00:04:50.070 --> 00:04:50.620
BRAD GREEN: Memory.

00:04:50.620 --> 00:04:51.120
MISKO HEVERY: Memory.

00:04:51.120 --> 00:04:51.290
Memory, I see.

00:04:51.290 --> 00:04:52.250
BRAD GREEN: We call it
memory these days.

00:04:52.250 --> 00:04:54.050
MISKO HEVERY: So the heap
of the program, right?

00:04:54.050 --> 00:04:57.150
So instead of getting the data
in line with your HTML to get

00:04:57.150 --> 00:04:58.790
data separately, you load
it into the memory.

00:04:58.790 --> 00:05:01.860
And now the problem becomes once
we get it to memory, how

00:05:01.860 --> 00:05:03.530
do we get it to the DOM?

00:05:03.530 --> 00:05:06.070
And then back when the user
interacts into the memory, and

00:05:06.070 --> 00:05:07.090
into the database?

00:05:07.090 --> 00:05:11.320
And so our passion really became
how do we simplify this

00:05:11.320 --> 00:05:14.600
flow of data to the DOM, and
back to the database.

00:05:14.600 --> 00:05:16.730
And this is essentially
what became Angular.

00:05:16.730 --> 00:05:17.120
BRAD GREEN: Right.

00:05:17.120 --> 00:05:18.080
And we got a logo.

00:05:18.080 --> 00:05:20.460
But let's see how this works.

00:05:20.460 --> 00:05:24.590
And we're going to go to an
example of the basics of

00:05:24.590 --> 00:05:25.730
moving back and forth.

00:05:25.730 --> 00:05:27.330
And this is one of
those three D's--

00:05:27.330 --> 00:05:29.230
and we'll actually describe
them-- not our goals.

00:05:29.230 --> 00:05:31.190
But it's important.

00:05:31.190 --> 00:05:33.450
So data-binding, the
way this works.

00:05:33.450 --> 00:05:34.700
We've got a--

00:05:34.700 --> 00:05:36.970
just in a template, we're
actually able to express kind

00:05:36.970 --> 00:05:37.850
of an interesting case.

00:05:37.850 --> 00:05:39.640
Well, let's actually see how
this works before we

00:05:39.640 --> 00:05:41.000
dive into the code.

00:05:41.000 --> 00:05:44.170
So Misko's a text box here,
and you'll notice how he

00:05:44.170 --> 00:05:48.030
types, the words that he types
appears below, and the word

00:05:48.030 --> 00:05:49.790
"hi" appears when there's
something in the box.

00:05:49.790 --> 00:05:52.810
So if he deletes all the text in
the box, the word "hi" goes

00:05:52.810 --> 00:05:54.500
away, and we don't
see anything.

00:05:54.500 --> 00:05:57.470
So let's go back and take a
look at how this works.

00:05:57.470 --> 00:06:01.300
So at the top, you'll notice
in the HTML tag, we have an

00:06:01.300 --> 00:06:02.690
extra attribute that
is not actually

00:06:02.690 --> 00:06:05.280
part of the HTML spec.

00:06:05.280 --> 00:06:07.340
And there-- all these things
in green are--

00:06:07.340 --> 00:06:08.760
these are extensions
we've added.

00:06:08.760 --> 00:06:09.790
And we call them directives.

00:06:09.790 --> 00:06:11.770
But they allow us to assemble
the application

00:06:11.770 --> 00:06:12.830
in interesting ways.

00:06:12.830 --> 00:06:16.600
And here on the input field,
what we've said is that the

00:06:16.600 --> 00:06:18.830
model for our data-- the place
in memory where this lives--

00:06:18.830 --> 00:06:21.510
we're going to name it with an
object called "user," and we

00:06:21.510 --> 00:06:24.110
have a property called "name."
And that we want this thing

00:06:24.110 --> 00:06:28.020
synced up, so that whenever
somebody types that in memory,

00:06:28.020 --> 00:06:30.980
it should update this
user.name, and we

00:06:30.980 --> 00:06:31.820
can use that elsewhere.

00:06:31.820 --> 00:06:34.940
So right below it in the
paragraph tag, we want to

00:06:34.940 --> 00:06:35.770
place that text.

00:06:35.770 --> 00:06:37.280
So what we do in double
curlies-- we call this

00:06:37.280 --> 00:06:38.370
interpolation--

00:06:38.370 --> 00:06:40.800
we're able to place that text
right in there just by putting

00:06:40.800 --> 00:06:41.390
those double curlies in.

00:06:41.390 --> 00:06:43.770
This is a familiar syntax
that's used in other

00:06:43.770 --> 00:06:45.240
templatinig languages.

00:06:45.240 --> 00:06:48.550
But we're also able to use it
not only to modify what data

00:06:48.550 --> 00:06:51.230
is there, but to control whether
it's shown or hidden.

00:06:51.230 --> 00:06:55.300
So in the p tag, we have ng-show
equals username.

00:06:55.300 --> 00:06:57.680
Well, what this says is that
showing and hiding should be

00:06:57.680 --> 00:06:59.840
controlled by presence
of text in there.

00:06:59.840 --> 00:07:01.400
If there's no text, hide it.

00:07:01.400 --> 00:07:03.570
If there's text, show it.

00:07:03.570 --> 00:07:05.660
But we had an interesting eureka
moment in here, which

00:07:05.660 --> 00:07:09.470
is that our templating system
was actually HTML, which means

00:07:09.470 --> 00:07:12.590
you can use all your existing
HTML editors, such as

00:07:12.590 --> 00:07:15.510
Dreamweaver, or your HTML editor
inside of your IDE.

00:07:15.510 --> 00:07:19.010
And this is in stark contrast
to most other templating

00:07:19.010 --> 00:07:23.010
systems that happen to be
templating languages of their

00:07:23.010 --> 00:07:26.100
own, and just happen to produce
HTML on the end.

00:07:26.100 --> 00:07:28.980
This is actually HTML
all the way through.

00:07:28.980 --> 00:07:31.400
And that makes it easy for
people to pick up and learn,

00:07:31.400 --> 00:07:34.430
such as for web developers-- or,
for web designers who are

00:07:34.430 --> 00:07:37.855
already familiar with
the HTML paradigm.

00:07:37.855 --> 00:07:39.790
BRAD GREEN: That's right, but
data-binding isn't the whole

00:07:39.790 --> 00:07:40.450
story, right?

00:07:40.450 --> 00:07:43.730
So we also want to put in but
some other bits when we create

00:07:43.730 --> 00:07:44.720
an application.

00:07:44.720 --> 00:07:46.340
MISKO HEVERY: So at the
beginning, I mentioned the

00:07:46.340 --> 00:07:50.020
idea was, could I build a very
simple web application without

00:07:50.020 --> 00:07:52.530
having actually any kind
of logic inside--

00:07:52.530 --> 00:07:55.810
without having to write any
logic, any program just by

00:07:55.810 --> 00:07:56.700
using data-binding?

00:07:56.700 --> 00:07:59.530
And if you wanted to build a
real application, sooner or

00:07:59.530 --> 00:08:01.390
later you come to the situation
where, well, you

00:08:01.390 --> 00:08:02.620
have to put the logic
in there.

00:08:02.620 --> 00:08:05.140
And so it's not sufficient to
just have a good data-binding

00:08:05.140 --> 00:08:08.690
story, but also have a good
story about how do we manage

00:08:08.690 --> 00:08:10.960
all the code that has to be
written, and how does the code

00:08:10.960 --> 00:08:13.470
interact with the data-binding,
as well.

00:08:13.470 --> 00:08:13.840
BRAD GREEN: That's right.

00:08:13.840 --> 00:08:15.170
And let's take a look
at another example.

00:08:15.170 --> 00:08:19.000
So here we've got a slightly
more complex example where

00:08:19.000 --> 00:08:21.770
we've got two files-- one
index.html on the left, end

00:08:21.770 --> 00:08:24.190
UserController.js
on the right.

00:08:24.190 --> 00:08:25.900
And again, let's take a look
at how this works before we

00:08:25.900 --> 00:08:27.350
walk through the code.

00:08:27.350 --> 00:08:31.380
So Misko's going to open his
second tab, and we've got a

00:08:31.380 --> 00:08:32.120
text input.

00:08:32.120 --> 00:08:32.880
We've got the word
"Larry" in there.

00:08:32.880 --> 00:08:34.675
And when he clicks the word--

00:08:34.675 --> 00:08:38.909
the bye button, it says, "bye
Larry." Nothing too complex.

00:08:38.909 --> 00:08:43.549
But if he changes the text and
clicks bye, it updates to use

00:08:43.549 --> 00:08:44.720
"Google I/O" as the text.

00:08:44.720 --> 00:08:46.420
OK, let's take a look
at how we do this.

00:08:46.420 --> 00:08:47.480
So now, we've got--

00:08:47.480 --> 00:08:47.960
we need some logic.

00:08:47.960 --> 00:08:51.980
We need some way to take that
text that somebody typed, and

00:08:51.980 --> 00:08:56.760
move it somewhere where we can
use in our bye button.

00:08:56.760 --> 00:09:01.180
So our template on the left-hand
side, we're adding

00:09:01.180 --> 00:09:02.390
another piece to the template.

00:09:02.390 --> 00:09:06.010
We are now telling Angular to
construct a template that

00:09:06.010 --> 00:09:07.075
relates to some code.

00:09:07.075 --> 00:09:09.500
And in this case, we're
specifying that a class called

00:09:09.500 --> 00:09:11.840
UserController we're going
to use to manage

00:09:11.840 --> 00:09:13.790
this part of the DOM.

00:09:13.790 --> 00:09:16.690
And this is some new syntax,
so for people who have used

00:09:16.690 --> 00:09:20.170
Angular before, this is some new
syntactic sugar we'll be

00:09:20.170 --> 00:09:20.820
releasing tomorrow.

00:09:20.820 --> 00:09:23.760
But we're able to create an
alias for UserController.

00:09:23.760 --> 00:09:26.520
We're just going to call it
UControl and then we can refer

00:09:26.520 --> 00:09:27.670
to it later.

00:09:27.670 --> 00:09:32.430
And what we'll see is that we
can put attributes on UControl

00:09:32.430 --> 00:09:34.050
that we want to access
as part of our model.

00:09:34.050 --> 00:09:37.670
So the input will bind to
UControl.user.first.

00:09:37.670 --> 00:09:41.230
And for clicking the button--
when users click it-- it will

00:09:41.230 --> 00:09:43.910
specific an ng-click there that
UControl should call the

00:09:43.910 --> 00:09:48.270
bye function that we defined
there on the right-hand side.

00:09:48.270 --> 00:09:49.900
MISKO HEVERY: But I wanted to
point out something over here,

00:09:49.900 --> 00:09:52.890
which is that the UserController
has no access

00:09:52.890 --> 00:09:53.950
to the DOM.

00:09:53.950 --> 00:09:57.160
There's also no special thing
you have to inherit from, no

00:09:57.160 --> 00:10:00.475
special way that you have to
instantiate your model, other

00:10:00.475 --> 00:10:01.700
than regular object.

00:10:01.700 --> 00:10:04.190
And notice there is no API one
has to call inside of Angular.

00:10:04.190 --> 00:10:08.300
This is really just a plain
old JavaScript type that

00:10:08.300 --> 00:10:10.180
exists in JavaScript.

00:10:10.180 --> 00:10:10.655
BRAD GREEN: Right.

00:10:10.655 --> 00:10:12.410
And maybe even more importantly,
notice that

00:10:12.410 --> 00:10:15.490
there's no new-- we never call
new on UserController.

00:10:15.490 --> 00:10:16.430
We don't create it.

00:10:16.430 --> 00:10:20.210
Just by specifying in the
ng-controller tag, Angular

00:10:20.210 --> 00:10:21.990
knows enough to create it at
the right moment when this

00:10:21.990 --> 00:10:23.880
view comes into my
application.

00:10:23.880 --> 00:10:26.210
It creates a controller, and
attaches it-- or, it hands it

00:10:26.210 --> 00:10:27.760
the right things in the DOM.

00:10:27.760 --> 00:10:29.360
MISKO HEVERY: Right So when
you have a model-view

00:10:29.360 --> 00:10:33.400
controller, in Angular,
everything is driven by the

00:10:33.400 --> 00:10:35.870
view on the left-hand
side over here.

00:10:35.870 --> 00:10:38.750
And the view says I need the
controller, and so the

00:10:38.750 --> 00:10:40.710
instantiation of the controller
has to happen,

00:10:40.710 --> 00:10:43.190
which then goes ahead and
instantiates the model.

00:10:43.190 --> 00:10:46.150
Now the thing to notice over
here is that all of the arrows

00:10:46.150 --> 00:10:48.050
point away from the
view, and into the

00:10:48.050 --> 00:10:49.110
controller or the model.

00:10:49.110 --> 00:10:51.440
And because the arrows point in
this particular direction,

00:10:51.440 --> 00:10:53.770
it means that one doesn't have
to start with the view.

00:10:53.770 --> 00:10:56.760
One can start with instantiating
the controller

00:10:56.760 --> 00:10:58.380
and the model separately.

00:10:58.380 --> 00:11:00.590
And this is very wonderful
in tests.

00:11:00.590 --> 00:11:03.360
And also, this allows you to
easily reskin your application

00:11:03.360 --> 00:11:04.470
for different devices.

00:11:04.470 --> 00:11:05.090
BRAD GREEN: Right.

00:11:05.090 --> 00:11:08.510
And what this really means is
that my view and my controller

00:11:08.510 --> 00:11:11.530
and my model are decoupled,
meaning I could change the

00:11:11.530 --> 00:11:14.810
view with the same business
logic and the same model for

00:11:14.810 --> 00:11:18.390
maybe different devices,
or different use cases.

00:11:18.390 --> 00:11:20.690
So Misko, let's talk about
how this assembly of the

00:11:20.690 --> 00:11:22.750
application actually
works then.

00:11:22.750 --> 00:11:25.280
MISKO HEVERY: So here, we're
taking a simple case, which we

00:11:25.280 --> 00:11:27.140
just saw with the hello world,
and making it a little more

00:11:27.140 --> 00:11:30.120
complicated by saying instead
of popping up a dialog box,

00:11:30.120 --> 00:11:33.140
maybe we can use a voice
synthesis to actually say the

00:11:33.140 --> 00:11:36.900
words that we're about to
display in the LR box.

00:11:36.900 --> 00:11:39.290
So in this case, we again need
to have a UserController, but

00:11:39.290 --> 00:11:43.110
notice the UserController says
it needs VoiceSynth.

00:11:43.110 --> 00:11:45.250
And below, we have a definition
of what Voicesynth

00:11:45.250 --> 00:11:48.360
might look like, which then uses
the web audio to actually

00:11:48.360 --> 00:11:50.690
speak to-- to generate
the text, and speak

00:11:50.690 --> 00:11:51.800
it through the speakers.

00:11:51.800 --> 00:11:55.280
And a thing to notice over here
is that the view says it

00:11:55.280 --> 00:11:56.980
needs a UserController.

00:11:56.980 --> 00:11:58.720
And the dependency injection
system that tries to

00:11:58.720 --> 00:12:00.280
instantiate the controller,
but it notices--

00:12:00.280 --> 00:12:00.810
a-ha--

00:12:00.810 --> 00:12:03.060
but in order to get the
UserController going, I need

00:12:03.060 --> 00:12:04.370
to have a VoiceSynth object.

00:12:04.370 --> 00:12:06.830
So then it goes one level lower
and says, OK, let me

00:12:06.830 --> 00:12:08.160
make one of the voice synth.

00:12:08.160 --> 00:12:11.370
But again, it sees, well, I need
a web audio, so it goes

00:12:11.370 --> 00:12:13.860
one level further yet,
and it tries-- it

00:12:13.860 --> 00:12:14.720
instantiates web audio.

00:12:14.720 --> 00:12:16.280
Hopefully, that has
no dependencies.

00:12:16.280 --> 00:12:18.530
And then it takes the web audio
instance, puts it inside

00:12:18.530 --> 00:12:21.370
of the VoiceSynth instance,
which then is placed inside of

00:12:21.370 --> 00:12:22.760
the UserController instance.

00:12:22.760 --> 00:12:25.305
And the whole controller is then
handed over to the view.

00:12:25.305 --> 00:12:27.380
BRAD GREEN: But let's talk a
little bit about how this

00:12:27.380 --> 00:12:27.950
actually works.

00:12:27.950 --> 00:12:29.910
Like nowhere in my
UserController do I actually

00:12:29.910 --> 00:12:32.160
directly refer to VoiceSynth?

00:12:32.160 --> 00:12:32.750
MISKO HEVERY: That's right.

00:12:32.750 --> 00:12:35.390
So normally, when you have a
constructor parameter, such as

00:12:35.390 --> 00:12:37.110
over here, those don't matter.

00:12:37.110 --> 00:12:39.490
I mean, they're only there for
the user-- for the developer

00:12:39.490 --> 00:12:40.950
to kind of understand
what's going on.

00:12:40.950 --> 00:12:44.860
But in our case, we actually
look at the actual text, and

00:12:44.860 --> 00:12:48.330
we use the VoiceSynth key to
match it up against the

00:12:48.330 --> 00:12:50.810
VoiceSynth class so that
we can instantiate it.

00:12:50.810 --> 00:12:51.910
BRAD GREEN: Right, very cool.

00:12:51.910 --> 00:12:54.820
Now this is great for
building my app, and

00:12:54.820 --> 00:12:55.730
rearranging my app.

00:12:55.730 --> 00:12:57.440
If I go to refactor my
application, this is cool.

00:12:57.440 --> 00:12:58.795
But it's also great
in testing.

00:12:58.795 --> 00:12:59.870
MISKO HEVERY: That's right.

00:12:59.870 --> 00:13:01.640
So let's say we wanted
to test this thing.

00:13:01.640 --> 00:13:03.550
So first of all, we probably
don't want to instantiate the

00:13:03.550 --> 00:13:04.980
whole HTML5 DOM.

00:13:04.980 --> 00:13:05.690
That's expensive.

00:13:05.690 --> 00:13:08.840
So we'll start a layer lower,
and we're going to say, well,

00:13:08.840 --> 00:13:10.930
that's just instantiated
UserController.

00:13:10.930 --> 00:13:12.180
But tests don't hear.

00:13:12.180 --> 00:13:13.060
They don't have ears.

00:13:13.060 --> 00:13:14.490
BRAD GREEN: They hear
very poorly.

00:13:14.490 --> 00:13:15.860
MISKO HEVERY: Yes.

00:13:15.860 --> 00:13:19.830
And so we would really like to
do is replace the VoiceSynth--

00:13:19.830 --> 00:13:21.270
the actual voice synthesizer--

00:13:21.270 --> 00:13:22.740
with a VoiceSynthMock.

00:13:22.740 --> 00:13:24.490
And so what we're really
trying to tell to the

00:13:24.490 --> 00:13:26.570
dependency injection system is
that we're going to change the

00:13:26.570 --> 00:13:30.090
recipe by which you build the
application slightly so that

00:13:30.090 --> 00:13:33.140
we can get a subset of the
application going configured

00:13:33.140 --> 00:13:34.440
in a slightly different way.

00:13:34.440 --> 00:13:36.670
And once we get the subset,
it's very easy to apply

00:13:36.670 --> 00:13:39.650
stimulus to it, and assert that
the right methods get

00:13:39.650 --> 00:13:41.160
called on a VoiceSynth.

00:13:41.160 --> 00:13:41.301
BRAD GREEN: Right.

00:13:41.301 --> 00:13:43.330
OK, let's take minute and step
back, and talk about what do

00:13:43.330 --> 00:13:44.740
we got so far.

00:13:44.740 --> 00:13:46.670
MISKO HEVERY: So we have this
imperative world, and we have

00:13:46.670 --> 00:13:49.330
this declarative world,
imperative world being, let's

00:13:49.330 --> 00:13:51.910
say I wanted to center
something.

00:13:51.910 --> 00:13:54.400
In imperative world, you have
to compute the width of the

00:13:54.400 --> 00:13:57.090
page, the width of the thing you
want to center, divide it

00:13:57.090 --> 00:13:59.390
by half to get the midpoint,
align the midpoints, and then

00:13:59.390 --> 00:14:01.080
render the text that you want.

00:14:01.080 --> 00:14:04.870
The trouble with this way of
doing it is when somebody else

00:14:04.870 --> 00:14:07.470
comes afterwards and looks at
the code, and they're going to

00:14:07.470 --> 00:14:08.600
have to reverse-engineer.

00:14:08.600 --> 00:14:11.330
What is the side effect
of this piece of code?

00:14:11.330 --> 00:14:14.420
Declarative is, on the other
hand, if you simply say I want

00:14:14.420 --> 00:14:16.990
to center to this thing, and
it doesn't matter where the

00:14:16.990 --> 00:14:17.840
implementation is.

00:14:17.840 --> 00:14:20.470
And actually, the concept of
centering might actually be

00:14:20.470 --> 00:14:21.970
implemented slightly differently
in different

00:14:21.970 --> 00:14:25.890
browsers, as long as the end
result is the same thing.

00:14:25.890 --> 00:14:29.110
And so, up to now, usually when
you have a framework, the

00:14:29.110 --> 00:14:31.550
developers really are just, hand
it over, and say, you get

00:14:31.550 --> 00:14:34.150
to use this imperative thing--
this is you, you can play with

00:14:34.150 --> 00:14:35.410
it any way you want.

00:14:35.410 --> 00:14:38.350
But the declarative thing, well,
we'll have the framework

00:14:38.350 --> 00:14:41.440
give you some vocabulary for
the declarative stuff, but

00:14:41.440 --> 00:14:43.410
it's essentially fixed.

00:14:43.410 --> 00:14:45.880
So we thought, wouldn't it be
great if we could take this

00:14:45.880 --> 00:14:47.460
vocabulary and extend it.

00:14:47.460 --> 00:14:52.030
And this was our a-ha moment,
and saying, hm, why are we in

00:14:52.030 --> 00:14:54.180
some way special that we can
create vocabulary, but the

00:14:54.180 --> 00:14:54.890
developer can't?

00:14:54.890 --> 00:14:58.380
What if we gave the same tools
to the developer, as well?

00:14:58.380 --> 00:15:02.060
And so we have a change in
Angular in that the developer

00:15:02.060 --> 00:15:04.880
gets to use the imperative or
gets to use the declarative

00:15:04.880 --> 00:15:08.820
world, depending on what they
feel like is the best way to

00:15:08.820 --> 00:15:10.480
solve this particular problem.

00:15:10.480 --> 00:15:10.780
BRAD GREEN: That's right.

00:15:10.780 --> 00:15:11.925
Let's take a look at
some examples.

00:15:11.925 --> 00:15:14.990
So we've seen how directives can
be used to express the way

00:15:14.990 --> 00:15:17.380
we wire our application together
with ng-model and

00:15:17.380 --> 00:15:20.970
ng-controller, and the way we
change the structure of the

00:15:20.970 --> 00:15:23.035
DOM with ng-show, as we saw.

00:15:23.035 --> 00:15:26.030
But you can also use it to
create reusable components.

00:15:26.030 --> 00:15:29.700
For example, if I wanted maybe
a star rating component, I

00:15:29.700 --> 00:15:31.910
could, after implementing it,
then just use it in my

00:15:31.910 --> 00:15:33.990
template by saying,
angle-bracket-rating, and then

00:15:33.990 --> 00:15:38.600
pass the data to it that it
needs through its attributes.

00:15:38.600 --> 00:15:41.290
You can create more complex
things where you've got

00:15:41.290 --> 00:15:44.880
nested, or components that
need to collaborate.

00:15:44.880 --> 00:15:48.190
For example, a set of tabs
will have the information

00:15:48.190 --> 00:15:49.870
about which one is highlighted,
and which one

00:15:49.870 --> 00:15:51.460
should I paint with
a box around it.

00:15:51.460 --> 00:15:54.340
And then the individual tabs
inside will contain the title

00:15:54.340 --> 00:15:55.970
and the content.

00:15:55.970 --> 00:15:58.940
You could also do it not just
by element name, but also by

00:15:58.940 --> 00:15:59.680
attribute name.

00:15:59.680 --> 00:16:01.660
And so you can create things
like a tool tip, where you

00:16:01.660 --> 00:16:04.310
could place it on a span or on
a tab or in a rating, or

00:16:04.310 --> 00:16:06.340
anything else in the UI.

00:16:06.340 --> 00:16:09.060
OK, we've covered kind of
the basics in Angular.

00:16:09.060 --> 00:16:13.990
And now let's take it back to
the way we were kind of

00:16:13.990 --> 00:16:17.370
creating apps before we wrote
the Angular framework.

00:16:17.370 --> 00:16:19.460
We weren't using jQuery, but
we're going to use jQuery here

00:16:19.460 --> 00:16:21.090
because we feel like a
lot of folks know it.

00:16:21.090 --> 00:16:22.300
We've got a simple
application.

00:16:22.300 --> 00:16:23.790
Misko's going to show us.

00:16:23.790 --> 00:16:25.250
MISKO HEVERY: It says you're
going to tap dance, but you

00:16:25.250 --> 00:16:25.910
got no shoes.

00:16:25.910 --> 00:16:27.180
BRAD GREEN: I took them
off because I knew

00:16:27.180 --> 00:16:29.730
that line was in there.

00:16:29.730 --> 00:16:31.970
And then we're going to rewrite
the application in

00:16:31.970 --> 00:16:34.100
Angular, and show some
of the differences.

00:16:34.100 --> 00:16:36.000
MISKO HEVERY: So here's a
very simple application.

00:16:36.000 --> 00:16:39.170
All it really does is it shows
you a list of projects.

00:16:39.170 --> 00:16:41.690
And what you can do is you can
add, and it brings you to the

00:16:41.690 --> 00:16:42.600
detailed view.

00:16:42.600 --> 00:16:44.580
Notice when I click the Add,
it's a single-page

00:16:44.580 --> 00:16:46.730
application, the URL didn't
actually change.

00:16:46.730 --> 00:16:47.840
It's the same URL.

00:16:47.840 --> 00:16:51.350
I can say something over here,
hit Save, and now I have my

00:16:51.350 --> 00:16:53.180
new item inside of the list.

00:16:53.180 --> 00:16:55.970
I can further click on
it, and delete it.

00:16:55.970 --> 00:16:58.070
BRAD GREEN: I should mention,
there is a very simple RESTful

00:16:58.070 --> 00:17:01.700
server running a node on the
backend here that we used to

00:17:01.700 --> 00:17:03.360
persist the project.

00:17:03.360 --> 00:17:04.069
MISKO HEVERY: So really,
it's just an

00:17:04.069 --> 00:17:05.839
application with two views--

00:17:05.839 --> 00:17:06.650
very simple.

00:17:06.650 --> 00:17:09.250
And what's strange about this
thing is that it takes me two

00:17:09.250 --> 00:17:12.390
sentences to explain what it
does, yet it takes me about

00:17:12.390 --> 00:17:15.720
200 lines of both HTML and
JavaScript to actually

00:17:15.720 --> 00:17:16.839
implement this.

00:17:16.839 --> 00:17:19.599
And so there's a little bit of
a disconnect over there.

00:17:19.599 --> 00:17:20.520
So what does this look like?

00:17:20.520 --> 00:17:22.609
Well, so this is a
list of projects.

00:17:22.609 --> 00:17:26.329
And in this case, we have a
template, which is a table.

00:17:26.329 --> 00:17:28.920
And inside of the table head,
we have this plus on the

00:17:28.920 --> 00:17:30.000
right-hand side.

00:17:30.000 --> 00:17:31.640
And notice what we
have to do here.

00:17:31.640 --> 00:17:34.140
We have to say, well, there's a
link-- so that it looks like

00:17:34.140 --> 00:17:36.800
a link-- but actually, it
actually goes nowhere.

00:17:36.800 --> 00:17:39.280
Inside of JavaScript later on,
I'll show you, you basically

00:17:39.280 --> 00:17:42.910
have to set up a click listener,
and we have to

00:17:42.910 --> 00:17:44.880
prevent the default behavior of
the browser-- which is to

00:17:44.880 --> 00:17:46.470
navigate to a link--

00:17:46.470 --> 00:17:48.790
and actually just modify
the DOM to

00:17:48.790 --> 00:17:50.690
render the details page.

00:17:50.690 --> 00:17:54.150
And this kind of breaks the
paradigm of what a web

00:17:54.150 --> 00:17:56.240
application is supposed to be.

00:17:56.240 --> 00:17:58.960
And so we'll show you how
Angular can make better usage

00:17:58.960 --> 00:17:59.910
of this thing.

00:17:59.910 --> 00:18:03.180
The other thing is that in the
table row, the same kind of a

00:18:03.180 --> 00:18:06.130
click has to happen, but there's
no-- it isn't clear

00:18:06.130 --> 00:18:07.950
what the text goes
inside of here.

00:18:07.950 --> 00:18:10.870
And so we actually have to get
a hold of this thing from the

00:18:10.870 --> 00:18:12.710
JavaScript side, as well.

00:18:12.710 --> 00:18:15.350
We do something similar for the
form for the details view.

00:18:15.350 --> 00:18:17.480
So let's have a look at how
is this implemented in

00:18:17.480 --> 00:18:18.580
JavaScript.

00:18:18.580 --> 00:18:20.390
So the first thing you're
going to notice is that

00:18:20.390 --> 00:18:23.500
there's a tremendous number of
selectors that have to get

00:18:23.500 --> 00:18:25.620
executed in order to get
a hold of the right

00:18:25.620 --> 00:18:26.860
pieces of the DOM.

00:18:26.860 --> 00:18:29.310
And what the selectors
essentially end up doing is

00:18:29.310 --> 00:18:32.110
they are essentially creating
the arrow going in the

00:18:32.110 --> 00:18:35.350
opposite direction from the code
to the view that creates

00:18:35.350 --> 00:18:38.050
coupling, and it makes it
difficult for a web designer

00:18:38.050 --> 00:18:40.910
to come in and move things
around, and number break the

00:18:40.910 --> 00:18:42.660
CSS selectors that
select them.

00:18:42.660 --> 00:18:44.610
BRAD GREEN: Even if we're using
IDs, it's still fragile.

00:18:44.610 --> 00:18:47.000
It's still something that you
have to be careful about when

00:18:47.000 --> 00:18:47.960
you move things around.

00:18:47.960 --> 00:18:48.770
MISKO HEVERY: That's right.

00:18:48.770 --> 00:18:52.540
And so this basically shows you
how we rendered the page

00:18:52.540 --> 00:18:54.110
on the right-hand side.

00:18:54.110 --> 00:18:55.250
So we had this show method--

00:18:55.250 --> 00:18:56.950
what it does is, well, it has
to assume that there might

00:18:56.950 --> 00:18:59.360
have been a different page
before, so it has to remove

00:18:59.360 --> 00:19:00.880
the existing content.

00:19:00.880 --> 00:19:03.280
It has to add its
template to it.

00:19:03.280 --> 00:19:06.400
It has to remove any existing
projects that happened to be

00:19:06.400 --> 00:19:08.310
inside of the template before.

00:19:08.310 --> 00:19:10.650
And it has to set up this click
listener, which I talked

00:19:10.650 --> 00:19:13.820
to you-- mentioned briefly
before, which does the

00:19:13.820 --> 00:19:16.690
navigation for one
page to another.

00:19:16.690 --> 00:19:19.080
We then go and do an
Ajax to the server.

00:19:19.080 --> 00:19:22.900
And for each project, we
basically do clone of the

00:19:22.900 --> 00:19:26.690
table row, write the data into
the right locations.

00:19:26.690 --> 00:19:29.140
And again, we have to set up
a click listener which

00:19:29.140 --> 00:19:32.372
transitions us from the
detail to the--

00:19:32.372 --> 00:19:35.140
I'm sorry, from the list view
to the detail view.

00:19:35.140 --> 00:19:39.380
And so, what's lost in the
process over here is it's not

00:19:39.380 --> 00:19:41.110
clear what this thing
actually does.

00:19:41.110 --> 00:19:44.460
There's tons of DOM
manipulation, and the actual

00:19:44.460 --> 00:19:46.250
business logic of
this particulate

00:19:46.250 --> 00:19:49.710
page is lost in here.

00:19:49.710 --> 00:19:50.040
BRAD GREEN: Right.

00:19:50.040 --> 00:19:51.340
So let's fast forward,
and let's

00:19:51.340 --> 00:19:52.315
reimplement it in Angular.

00:19:52.315 --> 00:19:54.120
Let's see how it's different.

00:19:57.340 --> 00:19:58.680
MISKO HEVERY: So let's look
at the template again.

00:19:58.680 --> 00:20:00.530
What we have done is we have
removed the templates from

00:20:00.530 --> 00:20:03.700
index.html and replaced them
with something called a view.

00:20:03.700 --> 00:20:07.160
So this is essentially a hole
into which individual pages

00:20:07.160 --> 00:20:08.180
will be loaded.

00:20:08.180 --> 00:20:11.350
And the actual pages get moved
into a separate file.

00:20:11.350 --> 00:20:13.690
BRAD GREEN: Now this template,
the top of the template right

00:20:13.690 --> 00:20:15.770
now-- if this was a more complex
application, this is

00:20:15.770 --> 00:20:18.890
where we would put maybe are top
nav, or our left-hand nav.

00:20:18.890 --> 00:20:19.690
But here it's simple.

00:20:19.690 --> 00:20:22.160
We just have one view that
we swap in and out.

00:20:22.160 --> 00:20:22.850
MISKO HEVERY: Exactly.

00:20:22.850 --> 00:20:25.600
Now notice, instead of
registering a click listener

00:20:25.600 --> 00:20:30.480
for this href, we let the href
do what the web does best,

00:20:30.480 --> 00:20:31.550
which is create links.

00:20:31.550 --> 00:20:34.440
So this case, we're saying,
look, there is a sub-view of

00:20:34.440 --> 00:20:37.730
this particular page, which is
the slash project with no ID.

00:20:37.730 --> 00:20:39.330
And this is what's
tied to the URL.

00:20:39.330 --> 00:20:42.690
So now if I reload this
application, and I click on

00:20:42.690 --> 00:20:45.160
the plus, notice that
the URL has changed.

00:20:45.160 --> 00:20:48.200
Now a nice side effect of this
is all of a sudden, our back

00:20:48.200 --> 00:20:50.990
and forth button just work
without really any effort

00:20:50.990 --> 00:20:51.680
whatsoever.

00:20:51.680 --> 00:20:53.300
BRAD GREEN: Now, we could have
done that in the jQuery

00:20:53.300 --> 00:20:53.890
reversion--

00:20:53.890 --> 00:20:54.500
just a lot more work.

00:20:54.500 --> 00:20:55.340
MISKO HEVERY: We could have
done it, and it would

00:20:55.340 --> 00:20:56.140
be a lot more work.

00:20:56.140 --> 00:20:59.130
But this is a model that people
are very familiar with,

00:20:59.130 --> 00:21:00.940
that developers are familiar
with, because it's the kind of

00:21:00.940 --> 00:21:04.080
round-trip application model,
except the round-trip, it all

00:21:04.080 --> 00:21:05.470
happens in the browser.

00:21:05.470 --> 00:21:06.810
There's no actual
round-tripping.

00:21:06.810 --> 00:21:11.860
This is still a single-page
application that we have here.

00:21:11.860 --> 00:21:14.600
So the next thing to notice is
that, instead of manually

00:21:14.600 --> 00:21:17.280
making clones on the table
row, we have this other

00:21:17.280 --> 00:21:20.130
directive called an ng-repeat,
which basically says for each

00:21:20.130 --> 00:21:22.550
project in the list
of projects--

00:21:22.550 --> 00:21:23.680
and I'll explain where
the list of

00:21:23.680 --> 00:21:25.170
projects comes in a second--

00:21:25.170 --> 00:21:27.720
we just want to have a copy of
the TR, and this does the

00:21:27.720 --> 00:21:32.170
copying and cloning and managing
it automatically.

00:21:32.170 --> 00:21:35.870
The next thing is that all of
the double curlies shown over

00:21:35.870 --> 00:21:38.790
here naturally show us where
things belong, so we don't

00:21:38.790 --> 00:21:41.480
have to have selectors
to place them there.

00:21:41.480 --> 00:21:45.140
And finally, again, we have an
example of deep-linking where,

00:21:45.140 --> 00:21:48.080
if you want to click on an Edit
button, it just means

00:21:48.080 --> 00:21:51.910
that we want to update the URL
with a specific ID in the URL

00:21:51.910 --> 00:21:53.390
that becomes bookmarkable.

00:21:53.390 --> 00:21:55.800
And again, all the magic
of bookmarks happens

00:21:55.800 --> 00:21:57.820
automatically for us.

00:21:57.820 --> 00:22:01.210
So let's look at how this
changes inside of the

00:22:01.210 --> 00:22:02.440
JavaScript.

00:22:02.440 --> 00:22:05.530
And this is the goal that we
were more after, which was, if

00:22:05.530 --> 00:22:07.520
you want to explain to somebody
what this particular

00:22:07.520 --> 00:22:09.700
page does, it's just as
simple as saying, give

00:22:09.700 --> 00:22:10.740
me a list of projects.

00:22:10.740 --> 00:22:11.760
It's a single sentence.

00:22:11.760 --> 00:22:13.640
And I want this to be a single
statement inside

00:22:13.640 --> 00:22:15.000
of my code, as well.

00:22:15.000 --> 00:22:16.770
So in this case, we're saying
we have a project list

00:22:16.770 --> 00:22:18.840
controller that is a single
item in there.

00:22:18.840 --> 00:22:21.500
So how did we know to load this
particular controller?

00:22:21.500 --> 00:22:23.170
Well, if we look over
here, this is

00:22:23.170 --> 00:22:24.020
where we set up routes.

00:22:24.020 --> 00:22:26.530
We're saying we're emulating
kind of a round-trip

00:22:26.530 --> 00:22:28.040
application, but
in the browser.

00:22:28.040 --> 00:22:30.670
So we have to say that
when the URL--

00:22:30.670 --> 00:22:32.030
which is shown right here--

00:22:32.030 --> 00:22:35.230
is a regular slash, we activate
the project list

00:22:35.230 --> 00:22:37.880
controller and the project
list template.

00:22:37.880 --> 00:22:40.380
And so the project list
controller simply says, go to

00:22:40.380 --> 00:22:43.080
the database, and fetch
me a project query.

00:22:43.080 --> 00:22:43.720
BRAD GREEN: OK, so
there's something

00:22:43.720 --> 00:22:44.660
interesting going on here.

00:22:44.660 --> 00:22:46.090
We should explain.

00:22:46.090 --> 00:22:48.230
When we query, we're actually
connecting to the database,

00:22:48.230 --> 00:22:49.690
but you'll notice, there's
no call-backs there.

00:22:49.690 --> 00:22:51.390
What's really going on, Miska?

00:22:51.390 --> 00:22:52.980
MISKO HEVERY: So this is a place
where we get to take

00:22:52.980 --> 00:22:55.900
advantage of data-binding
in a very unique way.

00:22:55.900 --> 00:22:58.240
So project.query query does
essentially an XHR in the

00:22:58.240 --> 00:22:59.510
background.

00:22:59.510 --> 00:23:02.350
And the way it does this is that
it returns immediately,

00:23:02.350 --> 00:23:05.160
but it returns an empty set,
because the server will

00:23:05.160 --> 00:23:07.450
respond in some future
point in time with

00:23:07.450 --> 00:23:08.900
the actual data set.

00:23:08.900 --> 00:23:10.650
And it takes that ng-array,
and just

00:23:10.650 --> 00:23:11.880
assigns it to the project.

00:23:11.880 --> 00:23:15.100
So when the ng-repeat gets
notified to say, hey, I have a

00:23:15.100 --> 00:23:20.050
new data for you inside of the
projects, it simply says, oh,

00:23:20.050 --> 00:23:22.710
there's nothing there, and
therefore it renders nothing.

00:23:22.710 --> 00:23:25.370
But at some future point in
time, the data actually does

00:23:25.370 --> 00:23:28.290
show up, and updates the same
instance of the array, which

00:23:28.290 --> 00:23:32.450
then automatically causes the
ng-repeat to unroll itself and

00:23:32.450 --> 00:23:34.470
make as many copies of the
project as you have.

00:23:34.470 --> 00:23:37.040
So in the simple situation where
all you need is to fetch

00:23:37.040 --> 00:23:39.980
some data and render it, we can
actually bypass the whole

00:23:39.980 --> 00:23:42.380
need to have a call back.

00:23:42.380 --> 00:23:44.600
Now the second thing is, where
did the project come from?

00:23:44.600 --> 00:23:46.520
This is where dependency
injection comes in, and this

00:23:46.520 --> 00:23:48.760
is how the application actually
gets assembled, which

00:23:48.760 --> 00:23:50.460
we kind of mentioned
that earlier.

00:23:50.460 --> 00:23:54.840
So right above here, it says a
project can be made by using

00:23:54.840 --> 00:23:56.250
something called a resource.

00:23:56.250 --> 00:23:59.960
A resource is just a service in
Angular that we can use to

00:23:59.960 --> 00:24:04.160
build JavaScript types for the
RESTful backend services.

00:24:04.160 --> 00:24:07.980
So we're just saying, this is
going to be a standard RESTful

00:24:07.980 --> 00:24:11.010
object, which we can just
use query on to

00:24:11.010 --> 00:24:13.120
fetch the data set.

00:24:13.120 --> 00:24:16.310
And again, notice that the
application gets automatically

00:24:16.310 --> 00:24:17.340
assembled for us.

00:24:17.340 --> 00:24:20.290
So just simply by navigating
to the right URL causes the

00:24:20.290 --> 00:24:22.710
right route to be activated,
which then activates the right

00:24:22.710 --> 00:24:26.510
controller, which then knows to
go and make a new project,

00:24:26.510 --> 00:24:29.430
which then knows to build the
project using the resource.

00:24:29.430 --> 00:24:31.670
And the whole application gets
assembled without us ever

00:24:31.670 --> 00:24:34.020
having to do any
of this stuff.

00:24:34.020 --> 00:24:36.100
Similarly, inside of the
project [? details ?]

00:24:36.100 --> 00:24:39.630
controller, we can simply say,
show me an existing project or

00:24:39.630 --> 00:24:42.280
a new project, depending on
whether we have an ID or not.

00:24:42.280 --> 00:24:43.430
BRAD GREEN: So how many lines
of code do we have?

00:24:43.430 --> 00:24:45.720
MISKO HEVERY: So we are about
40 lines of code.

00:24:45.720 --> 00:24:48.210
And we actually added a new
behavior, because we have

00:24:48.210 --> 00:24:49.630
deep-linking available for us.

00:24:49.630 --> 00:24:50.780
BRAD GREEN: OK, that's
very cool.

00:24:50.780 --> 00:24:53.460
As your manager, however, I need
to ask you to add more

00:24:53.460 --> 00:24:54.730
features to this application.

00:24:54.730 --> 00:24:55.082
MISKO HEVERY: More features?

00:24:55.082 --> 00:24:55.170
OK

00:24:55.170 --> 00:24:56.760
BRAD GREEN: Miska, could you
please add more features?

00:24:56.760 --> 00:24:58.020
MISKO HEVERY: What feature
would you like to add?

00:24:58.020 --> 00:24:58.730
BRAD GREEN: OK, well, thanks.

00:24:58.730 --> 00:25:00.770
So this is a list
of projects--

00:25:00.770 --> 00:25:02.030
probably frameworks.

00:25:02.030 --> 00:25:04.000
People like to write frameworks,
as we know.

00:25:04.000 --> 00:25:04.850
It could get long.

00:25:04.850 --> 00:25:07.980
How about add the ability to
filter how many frameworks are

00:25:07.980 --> 00:25:10.040
there if I want to search
for the one I want.

00:25:10.040 --> 00:25:11.330
MISKO HEVERY: So the first thing
you need to add is an

00:25:11.330 --> 00:25:12.910
input box, right?

00:25:12.910 --> 00:25:15.360
So if I refresh now, I
have an input box.

00:25:15.360 --> 00:25:19.230
And if I type into it, this text
actually ends up in the

00:25:19.230 --> 00:25:22.310
memory location called
search text.

00:25:22.310 --> 00:25:24.320
Now we need to do something
with this particular case.

00:25:24.320 --> 00:25:26.200
Now one of things we have-- and
I'm sure you're familiar

00:25:26.200 --> 00:25:29.140
with in UNIX-- is the concept of
filters, which we have, as

00:25:29.140 --> 00:25:31.210
well as using a simple
pipe-character.

00:25:31.210 --> 00:25:33.710
And we can run it through kind
of a special [? mini-ask ?]

00:25:33.710 --> 00:25:34.640
functions.

00:25:34.640 --> 00:25:36.310
In this case, there's a function
called filter--

00:25:36.310 --> 00:25:37.660
I know the naming is
a bit confusing.

00:25:37.660 --> 00:25:39.010
BRAD GREEN: I see, yeah.

00:25:39.010 --> 00:25:40.560
MISKO HEVERY: But what a filter
does it just looks

00:25:40.560 --> 00:25:43.980
through the list of objects in
an array, and sees if any of

00:25:43.980 --> 00:25:47.300
the objects happen to have a
text inside of it that matches

00:25:47.300 --> 00:25:50.050
the search text criteria inside
of the input box.

00:25:50.050 --> 00:25:53.360
So now if I refresh this, you
will see that as I type the

00:25:53.360 --> 00:25:57.170
word "web," it will show only
those projects that actually

00:25:57.170 --> 00:26:00.510
have the word "web"
inside of them.

00:26:00.510 --> 00:26:02.650
Notice how the repeater
automatically grows and

00:26:02.650 --> 00:26:05.230
shrinks as the filtering
changes.

00:26:05.230 --> 00:26:06.490
BRAD GREEN: OK, very cool.

00:26:06.490 --> 00:26:10.485
However, modern applications use
animation to show me-- to

00:26:10.485 --> 00:26:11.810
give me a more intuitive
sense of what's going.

00:26:11.810 --> 00:26:13.980
Could you maybe animate
the items in the

00:26:13.980 --> 00:26:15.040
list in and out as--

00:26:15.040 --> 00:26:16.430
MISKO HEVERY: Do you understand
how complicated

00:26:16.430 --> 00:26:16.910
animations are?

00:26:16.910 --> 00:26:17.280
BRAD GREEN: I don't.

00:26:17.280 --> 00:26:18.350
I'm a manager.

00:26:18.350 --> 00:26:20.488
MISKO HEVERY: I see.

00:26:20.488 --> 00:26:23.470
[APPLAUSE]

00:26:23.470 --> 00:26:24.190
So animations--

00:26:24.190 --> 00:26:26.570
as you guys all know, I'm sure--
are complex things,

00:26:26.570 --> 00:26:29.500
because you have to add things
to the DOM before they

00:26:29.500 --> 00:26:31.690
actually come on to stage, then
you have to transition

00:26:31.690 --> 00:26:36.050
them to keep track of timers,
remove things, and so on.

00:26:36.050 --> 00:26:38.450
And this is where the power of
the declarative world really

00:26:38.450 --> 00:26:38.940
comes from.

00:26:38.940 --> 00:26:41.970
Because really, what I want to
express to when I'm building

00:26:41.970 --> 00:26:45.340
the application is there is
something called animation.

00:26:45.340 --> 00:26:48.350
And I want to animate this thing
using a slide animation.

00:26:48.350 --> 00:26:50.560
A slide animation is just
something I've declared inside

00:26:50.560 --> 00:26:54.580
of my CSS, as this is the set
of transitions we want to

00:26:54.580 --> 00:26:56.730
apply to the system.

00:26:56.730 --> 00:27:00.040
But actually managing the
DOM's add and removing,

00:27:00.040 --> 00:27:02.520
setting the classes at the right
time is actually managed

00:27:02.520 --> 00:27:05.050
by this ng-animate directive.

00:27:05.050 --> 00:27:06.480
So let's refresh this.

00:27:06.480 --> 00:27:12.470
And notice, as I type "web" now,
it removes and adds item

00:27:12.470 --> 00:27:15.715
in the correct way with just
a couple of keystrokes.

00:27:15.715 --> 00:27:21.540
[APPLAUSE]

00:27:21.540 --> 00:27:22.080
BRAD GREEN: Sassy.

00:27:22.080 --> 00:27:23.060
Very sassy.

00:27:23.060 --> 00:27:26.150
All right, so we're kind of at
the end of our coding portion.

00:27:26.150 --> 00:27:29.790
Miska has, however, added some
other interesting features

00:27:29.790 --> 00:27:31.450
also in sort of a
declarative way.

00:27:31.450 --> 00:27:32.320
But we'll just demo them.

00:27:32.320 --> 00:27:34.240
You can go to the GitHub
repository.

00:27:34.240 --> 00:27:36.390
We'll give you a link at
the end of the session.

00:27:36.390 --> 00:27:39.130
But you can also do things like
animate between views.

00:27:39.130 --> 00:27:40.830
So if I was on a mobile device,
I would want to be

00:27:40.830 --> 00:27:42.700
able to slide back and forth.

00:27:42.700 --> 00:27:46.140
We've also done form validation,
so you can have

00:27:46.140 --> 00:27:48.850
things that are required, or
that are not really required

00:27:48.850 --> 00:27:50.860
but they have to be in a
specific reg-x format, like

00:27:50.860 --> 00:27:53.150
something must be a URL.

00:27:53.150 --> 00:27:55.440
And these things, as I
mentioned, we can add in also

00:27:55.440 --> 00:27:56.430
a purely declarative way.

00:27:56.430 --> 00:27:57.710
These are well-understood
problems.

00:27:57.710 --> 00:28:00.730
We can just put them
in the template.

00:28:00.730 --> 00:28:03.620
So we should talk about a couple
of other things before

00:28:03.620 --> 00:28:05.250
we wrap up.

00:28:05.250 --> 00:28:08.500
One of the things that
people tell us is

00:28:08.500 --> 00:28:10.340
fantastic about Angular--

00:28:10.340 --> 00:28:11.630
besides the framework--

00:28:11.630 --> 00:28:12.830
is the community.

00:28:12.830 --> 00:28:16.340
And there thousands--

00:28:16.340 --> 00:28:19.850
hundreds of thousands of folks
in the community who do a

00:28:19.850 --> 00:28:22.640
great job of helping each other,
documenting new things

00:28:22.640 --> 00:28:25.400
in Angular, adding code,
all kinds of things.

00:28:25.400 --> 00:28:27.080
There are meet-ups that
happen regularly.

00:28:27.080 --> 00:28:30.840
There are-- on our Google group,
on Twitter, on Stack

00:28:30.840 --> 00:28:32.690
Overflow, and Google+.

00:28:32.690 --> 00:28:34.576
There's a tremendous
community.

00:28:34.576 --> 00:28:36.990
There's an IRC channel that's
very active, too.

00:28:36.990 --> 00:28:38.970
As you can see from the map,
there are actually still some

00:28:38.970 --> 00:28:41.420
places in the world where we
would love to see monthly

00:28:41.420 --> 00:28:44.073
meet-ups, and we'd love to help
you make these happen.

00:28:44.073 --> 00:28:46.890
Let's go next.

00:28:46.890 --> 00:28:52.800
So the rest of the ecosystem,
Angular kind of fits a small

00:28:52.800 --> 00:28:55.120
piece of the whole web
development puzzle.

00:28:55.120 --> 00:28:57.630
And I think this is kind of
cool, because it's made space

00:28:57.630 --> 00:29:00.560
for other people to create
things that fit in the world.

00:29:00.560 --> 00:29:02.870
We've developed some of them,
but a lot of other folks have

00:29:02.870 --> 00:29:03.700
created things, too.

00:29:03.700 --> 00:29:06.930
So in the world of tools, one of
the things we created is a

00:29:06.930 --> 00:29:10.140
Chrome Developer Tools plug-in
called Batarang.

00:29:10.140 --> 00:29:14.050
And Batarang lets you visualize
your application,

00:29:14.050 --> 00:29:20.180
visualize your data-bindings,
where your template is set up,

00:29:20.180 --> 00:29:22.480
optimize the performance,
and debug it--

00:29:22.480 --> 00:29:25.070
for all of the Angular-specific
concepts.

00:29:25.070 --> 00:29:28.560
The good folks over WebStorm
have created a plug-in that

00:29:28.560 --> 00:29:30.530
makes it Angular-syntax aware.

00:29:30.530 --> 00:29:33.560
And a lot of us use WebStorm
on the team because of it.

00:29:33.560 --> 00:29:36.460
We've been working with Addy
Osmani and Paul Irish and the

00:29:36.460 --> 00:29:39.810
other folks on Yeoman to make
it very easy to scaffold an

00:29:39.810 --> 00:29:42.490
Angular application, to update
its dependencies, and then to

00:29:42.490 --> 00:29:44.830
build and deploy it
when you're ready.

00:29:44.830 --> 00:29:48.210
And then, one of our team
members, Vojta, has done

00:29:48.210 --> 00:29:49.400
something I think is
extra special.

00:29:49.400 --> 00:29:51.090
We talk a lot about testing.

00:29:51.090 --> 00:29:53.040
But making the framework
testable was

00:29:53.040 --> 00:29:54.690
not the full story.

00:29:54.690 --> 00:29:57.700
He wrote a test-runner
called Karma.

00:29:57.700 --> 00:30:01.320
And Karma, we think, is the
fastest, most reliable,

00:30:01.320 --> 00:30:02.650
easiest test-runner
on the planet.

00:30:02.650 --> 00:30:04.650
Matter of fact, I would say
it would change your life.

00:30:04.650 --> 00:30:05.790
We should do a demo
of that later.

00:30:05.790 --> 00:30:06.660
But it's awesome.

00:30:06.660 --> 00:30:07.480
Go download it.

00:30:07.480 --> 00:30:09.720
Search for karma test-runner.

00:30:09.720 --> 00:30:10.860
It's awesome.

00:30:10.860 --> 00:30:15.230
Now when we were talking about
directives, we said that you

00:30:15.230 --> 00:30:18.050
can write your own things,
like star ratings and

00:30:18.050 --> 00:30:19.120
tabs and tool tips.

00:30:19.120 --> 00:30:21.560
And it turns out a lot you don't
want to be doing that.

00:30:21.560 --> 00:30:25.980
And so, there are a ton
of directives--

00:30:25.980 --> 00:30:26.690
web components--

00:30:26.690 --> 00:30:28.150
that you can just use.

00:30:28.150 --> 00:30:29.970
And we have things like the
Angular UI Project.

00:30:29.970 --> 00:30:33.530
It's not part of Angular but,
they've collected a number of

00:30:33.530 --> 00:30:35.250
the web components from
across the web.

00:30:35.250 --> 00:30:38.210
And they're specifically a
Twitter Bootstrap theme set of

00:30:38.210 --> 00:30:40.200
components.

00:30:40.200 --> 00:30:42.590
There are also commercial
versions, like KendoUI and

00:30:42.590 --> 00:30:46.430
Wijmo So you can come out of the
box with a whole bunch of

00:30:46.430 --> 00:30:47.840
components that you just
snap together like

00:30:47.840 --> 00:30:50.180
LEGOs in your template.

00:30:50.180 --> 00:30:53.360
In the rest of the world of
libraries, there are things

00:30:53.360 --> 00:30:57.920
like BreezeJS that gives you a
very rich set of tools for

00:30:57.920 --> 00:31:01.540
manipulating data that comes
from SQL and NoSQL databases.

00:31:01.540 --> 00:31:04.390
If you want a database in the
cloud, there's Firebase, who

00:31:04.390 --> 00:31:07.110
have created Angular-specific
binding so that you can use

00:31:07.110 --> 00:31:09.730
them with our data-binding
system.

00:31:09.730 --> 00:31:12.060
And the folks at Salesforce
recently created a developer

00:31:12.060 --> 00:31:14.950
tools pack that lets you create
Angular applications

00:31:14.950 --> 00:31:19.030
with Salesforce on the backend
on mobile devices.

00:31:19.030 --> 00:31:21.740
And then there's books.

00:31:21.740 --> 00:31:22.410
I actually--

00:31:22.410 --> 00:31:23.750
I wrote one of them, the
one with the fish.

00:31:23.750 --> 00:31:27.060
I think that is the most
handsome of the books.

00:31:27.060 --> 00:31:27.460
But there--

00:31:27.460 --> 00:31:29.570
I think last count, there
are seven books.

00:31:29.570 --> 00:31:31.400
Really, you should
buy them all.

00:31:31.400 --> 00:31:34.190
I could not choose.

00:31:34.190 --> 00:31:36.140
All right, so thank
you everybody.

00:31:36.140 --> 00:31:37.280
Thanks so much.

00:31:37.280 --> 00:31:38.190
We--

00:31:38.190 --> 00:31:42.210
at the lower right-hand side
is the link for our GitHub

00:31:42.210 --> 00:31:43.910
repository, for the demos
that you saw today.

00:31:43.910 --> 00:31:46.630
Misko and I are available on
Twitter and Google+ if you

00:31:46.630 --> 00:31:48.150
want to reach out to us.

00:31:48.150 --> 00:31:51.580
We're going to be in the Chrome
Sandbox upstairs for

00:31:51.580 --> 00:31:52.300
the next half hour.

00:31:52.300 --> 00:31:54.000
We've got a little bit of
time for questions.

00:31:54.000 --> 00:31:55.340
But we'll be there.

00:31:55.340 --> 00:31:56.390
We'd love to answer questions.

00:31:56.390 --> 00:32:00.180
We've got some stickers
to hand out upstairs.

00:32:00.180 --> 00:32:03.250
And then Angular books are going
to be in that Chrome

00:32:03.250 --> 00:32:06.940
Sandbox area on Thursday and
Friday all day long.

00:32:06.940 --> 00:32:07.960
Thank you for coming.

00:32:07.960 --> 00:32:09.212
Really appreciate it.

00:32:09.212 --> 00:32:17.510
[APPLAUSE]

00:32:17.510 --> 00:32:20.070
So, let's go over
here on the mic.

00:32:20.070 --> 00:32:22.670
AUDIENCE: So good to
see Angular at I/O.

00:32:22.670 --> 00:32:25.220
BRAD GREEN: Thank you.

00:32:25.220 --> 00:32:27.700
AUDIENCE: So my question is, how
do you configure the curly

00:32:27.700 --> 00:32:30.060
braces for data-binding?

00:32:30.060 --> 00:32:31.540
That is configurable, right?

00:32:31.540 --> 00:32:34.520
I'm using Jekyll with Liquid
templates, and there are curly

00:32:34.520 --> 00:32:35.730
braces used there as well.

00:32:35.730 --> 00:32:37.270
So I'd like to be able
to configure that.

00:32:37.270 --> 00:32:39.270
And do you recommend
against it?

00:32:39.270 --> 00:32:42.350
MISKO HEVERY: Yes, so there is a
interpolation provider which

00:32:42.350 --> 00:32:45.230
allows you to configure the
starting and ending set of

00:32:45.230 --> 00:32:47.616
sequence of characters
that will do this.

00:32:47.616 --> 00:32:49.180
And so you could use that.

00:32:49.180 --> 00:32:52.190
The caveat is that, if you're
using a third-party library or

00:32:52.190 --> 00:32:56.950
third-party widget library that
assumes curly braces, you

00:32:56.950 --> 00:32:59.200
might break them.

00:32:59.200 --> 00:33:00.230
It's not true?

00:33:00.230 --> 00:33:02.200
[INAUDIBLE]

00:33:02.200 --> 00:33:02.870
Oh, we compensate.

00:33:02.870 --> 00:33:04.255
Oh, we fixed it now.

00:33:04.255 --> 00:33:04.970
BRAD GREEN: OK, good.

00:33:04.970 --> 00:33:05.780
MISKO HEVERY: You can change
it using the--

00:33:05.780 --> 00:33:06.110
BRAD GREEN: It just works.

00:33:06.110 --> 00:33:06.820
It just works.

00:33:06.820 --> 00:33:07.830
Thank you, Igor.

00:33:07.830 --> 00:33:08.410
AUDIENCE: Great, thanks.

00:33:08.410 --> 00:33:10.560
BRAD GREEN: All right, sure.

00:33:10.560 --> 00:33:12.670
AUDIENCE: I come from China
as a [INAUDIBLE]

00:33:12.670 --> 00:33:13.250
[? TGD ?]

00:33:13.250 --> 00:33:14.040
organizer.

00:33:14.040 --> 00:33:21.045
So I notice that a map,
a pocket of all

00:33:21.045 --> 00:33:23.490
the Angular's community.

00:33:23.490 --> 00:33:26.980
But in fact, AngularJS
[? dot-send ?]

00:33:26.980 --> 00:33:29.880
is building just users
[INAUDIBLE].

00:33:29.880 --> 00:33:32.530
In fact, in China,
it is very--

00:33:32.530 --> 00:33:34.570
so many people like AngularJS.

00:33:34.570 --> 00:33:43.930
so my question is how make the
AngularJS community, and you

00:33:43.930 --> 00:33:48.270
can address--

00:33:48.270 --> 00:33:49.560
you can know it.

00:33:49.560 --> 00:33:52.550
I just want to--

00:33:52.550 --> 00:33:56.830
I think you [? might ?].

00:33:56.830 --> 00:33:58.970
You're not quite [? sure? ?]

00:33:58.970 --> 00:34:00.015
BRAD GREEN: I'm kind of
missing the question.

00:34:00.015 --> 00:34:00.570
AUDIENCE: I'm trying
to say [INAUDIBLE]

00:34:00.570 --> 00:34:00.700
[INTERPOSING VOICES]

00:34:00.700 --> 00:34:01.805
MISKO HEVERY: I think he's
saying there's an awesome

00:34:01.805 --> 00:34:02.660
[INAUDIBLE]

00:34:02.660 --> 00:34:03.060
AUDIENCE: [INAUDIBLE]

00:34:03.060 --> 00:34:04.730
BRAD GREEN: You're saying in
China, there's a fantastic

00:34:04.730 --> 00:34:07.130
JavaScript community, and
there's AngularJS going on.

00:34:07.130 --> 00:34:09.679
AUDIENCE: But we lost
it in your map.

00:34:09.679 --> 00:34:11.190
So I have a question, why--

00:34:11.190 --> 00:34:11.550
BRAD GREEN: Ah.

00:34:11.550 --> 00:34:13.880
Tell me where it should go,
and I'll put it on my map.

00:34:13.880 --> 00:34:15.393
AUDIENCE: OK, thank you.

00:34:15.393 --> 00:34:17.820
BRAD GREEN: Yeah, that
would be awesome.

00:34:17.820 --> 00:34:18.620
Thank you, thank you.

00:34:18.620 --> 00:34:22.260
AUDIENCE: How is Google using
AngularJS internally?

00:34:22.260 --> 00:34:24.175
Are there going to be
apps that we use?

00:34:24.175 --> 00:34:25.150
Or that consumers use?

00:34:25.150 --> 00:34:25.387
BRAD GREEN: Yeah.

00:34:25.387 --> 00:34:28.210
We've built a lot of internal
apps on Angular.

00:34:28.210 --> 00:34:30.449
Google Feedback was
one of them.

00:34:30.449 --> 00:34:33.409
The two big external
applications that we've built

00:34:33.409 --> 00:34:35.380
on top of it is DoubleClick,
which makes

00:34:35.380 --> 00:34:36.404
some money for Google.

00:34:36.404 --> 00:34:38.159
This is display advertising.

00:34:38.159 --> 00:34:39.790
I mean a lot, actually.

00:34:39.790 --> 00:34:44.969
And then YouTube has
built their--

00:34:44.969 --> 00:34:48.360
it's kind of like an embedded
in the PlayStation 3

00:34:48.360 --> 00:34:48.880
application.

00:34:48.880 --> 00:34:51.239
So the live player that you get
with PlayStation 3, that's

00:34:51.239 --> 00:34:52.280
built in Angular.

00:34:52.280 --> 00:34:53.394
There's some more stuff
on the way.

00:34:53.394 --> 00:34:54.460
Can't pre-announce it.

00:34:54.460 --> 00:34:56.030
AUDIENCE: Yeah, because that's
always a concern that you guys

00:34:56.030 --> 00:34:58.640
keep using it so that it
keeps growing, right?

00:34:58.640 --> 00:34:59.730
BRAD GREEN: Indeed, indeed.

00:34:59.730 --> 00:35:01.140
It's well-loved within Google.

00:35:01.140 --> 00:35:02.420
AUDIENCE: OK.

00:35:02.420 --> 00:35:03.680
BRAD GREEN: Thank you.

00:35:03.680 --> 00:35:04.830
And over here.

00:35:04.830 --> 00:35:06.810
AUDIENCE: First question
is, the query--

00:35:06.810 --> 00:35:09.230
it does have a call back,
though, right, if I need it?

00:35:09.230 --> 00:35:09.620
BRAD GREEN: That's right.

00:35:09.620 --> 00:35:11.010
You can have a call back
if you want to.

00:35:11.010 --> 00:35:11.520
AUDIENCE: OK.

00:35:11.520 --> 00:35:13.570
BRAD GREEN: Yeah, for catching
errors, and there's some other

00:35:13.570 --> 00:35:15.170
reasons you might want
[INAUDIBLE].

00:35:15.170 --> 00:35:16.830
AUDIENCE: And secondly, we think
Google-- is there any

00:35:16.830 --> 00:35:20.110
sort of internal fight
with Backbone?

00:35:20.110 --> 00:35:21.765
BRAD GREEN: There's actually
no fight with Backbone in

00:35:21.765 --> 00:35:24.470
terms of Google.

00:35:24.470 --> 00:35:24.660
No.

00:35:24.660 --> 00:35:25.586
There's none.

00:35:25.586 --> 00:35:27.130
None whatsoever.

00:35:27.130 --> 00:35:27.810
AUDIENCE: Thank you.

00:35:27.810 --> 00:35:28.460
BRAD GREEN: Yeah.

00:35:28.460 --> 00:35:29.200
Yes?

00:35:29.200 --> 00:35:30.020
AUDIENCE: Hi, yes.

00:35:30.020 --> 00:35:33.990
I just started using Angular for
the first time actually a

00:35:33.990 --> 00:35:34.700
couple of weeks ago.

00:35:34.700 --> 00:35:35.170
BRAD GREEN: Thank you.

00:35:35.170 --> 00:35:35.430
Awesome.

00:35:35.430 --> 00:35:37.670
AUDIENCE: And I absolutely
freaking love it.

00:35:37.670 --> 00:35:39.100
MISKO HEVERY: Thank you.

00:35:39.100 --> 00:35:39.980
AUDIENCE: So--

00:35:39.980 --> 00:35:40.740
BRAD GREEN: Next question.

00:35:40.740 --> 00:35:41.650
Awesome.

00:35:41.650 --> 00:35:42.330
No, go.

00:35:42.330 --> 00:35:42.680
AUDIENCE: The search

00:35:42.680 --> 00:35:44.660
functionality, it's really nice.

00:35:44.660 --> 00:35:47.930
But can you talk a little bit
about patterns to use when the

00:35:47.930 --> 00:35:50.930
data set is big, and it
needs to be paged in

00:35:50.930 --> 00:35:52.920
and out, and how--

00:35:52.920 --> 00:35:56.000
what's the right way of setting
up your services?

00:35:56.000 --> 00:35:57.740
MISKO HEVERY: I think that's
way beyond what we

00:35:57.740 --> 00:35:58.990
can answer on stage.

00:35:58.990 --> 00:35:59.380
BRAD GREEN: Yeah.

00:35:59.380 --> 00:36:02.740
I mean, I can point you-- there
are several services

00:36:02.740 --> 00:36:05.990
that help doing this, for help
doing the pagination, and

00:36:05.990 --> 00:36:08.300
doing sort of an infinite scroll
effect, which is what

00:36:08.300 --> 00:36:10.410
folks often want.

00:36:10.410 --> 00:36:12.155
AUDIENCE: The search, the
actual search, right?

00:36:12.155 --> 00:36:14.170
The ng-search stuff.

00:36:14.170 --> 00:36:16.210
Not just the scrolling,
but the actual--

00:36:16.210 --> 00:36:16.720
BRAD GREEN: Yeah.

00:36:16.720 --> 00:36:17.700
So that as you type.

00:36:17.700 --> 00:36:20.200
You want it like the Google
homepage search style thing.

00:36:20.200 --> 00:36:20.890
AUDIENCE: Yeah, even
if I set up like a

00:36:20.890 --> 00:36:22.630
backend search stuff.

00:36:22.630 --> 00:36:24.300
BRAD GREEN: As Misko said,
there are some details--

00:36:24.300 --> 00:36:27.290
maybe come up to the Chrome
Sandbox, and let's have

00:36:27.290 --> 00:36:27.320
a chat about it.

00:36:27.320 --> 00:36:27.419
MISKO HEVERY: Yes.

00:36:27.419 --> 00:36:28.080
That's a better way of-- yes.

00:36:28.080 --> 00:36:28.340
AUDIENCE: Thank you.

00:36:28.340 --> 00:36:29.850
BRAD GREEN: Yeah Over here?

00:36:29.850 --> 00:36:33.050
AUDIENCE: OK, first of all,
thank you for making Angular.

00:36:33.050 --> 00:36:36.210
You saved my bacon like two
months ago making a site.

00:36:36.210 --> 00:36:39.070
It's really awesome.

00:36:39.070 --> 00:36:40.910
Two questions.

00:36:40.910 --> 00:36:46.430
First, what are your
recommendations towards search

00:36:46.430 --> 00:36:50.070
engine optimization for sites
built with Angular?

00:36:50.070 --> 00:36:54.800
And the other one is, I'm
currently trying to get a site

00:36:54.800 --> 00:37:00.070
done in Angular, but the manager
is concerned about

00:37:00.070 --> 00:37:03.600
users who don't have JavaScript
enabled, or what--

00:37:03.600 --> 00:37:04.630
MISKO HEVERY: What year
is this again?

00:37:04.630 --> 00:37:08.010
BRAD GREEN: I think it's 2002.

00:37:08.010 --> 00:37:12.110
But no-- so I can't help your
manager, because he is living

00:37:12.110 --> 00:37:14.420
somewhere else.

00:37:14.420 --> 00:37:16.650
But as far as--

00:37:16.650 --> 00:37:17.630
what was the first question?

00:37:17.630 --> 00:37:18.150
AUDIENCE: SEO.

00:37:18.150 --> 00:37:19.190
BRAD GREEN: SEO, yeah.

00:37:19.190 --> 00:37:21.350
So there's a recipe for SEO.

00:37:21.350 --> 00:37:23.535
There's a website called
"Year Of Moo." It's

00:37:23.535 --> 00:37:25.450
this guy named Mateo.

00:37:25.450 --> 00:37:28.080
He worked with us on the
animation directive actually.

00:37:28.080 --> 00:37:30.270
And he is a very
good documented

00:37:30.270 --> 00:37:31.460
path for doing this.

00:37:31.460 --> 00:37:35.440
Search for "Year of
Moo" angular SEO.

00:37:35.440 --> 00:37:37.330
MISKO HEVERY: And it has to
do with the headless--

00:37:37.330 --> 00:37:39.840
BRAD GREEN: Using PhantomJS to
kind of render your pages.

00:37:39.840 --> 00:37:40.220
AUDIENCE: OK.

00:37:40.220 --> 00:37:44.310
And that wouldn't be penalized
by you guys, as Google?

00:37:44.310 --> 00:37:44.730
Because--

00:37:44.730 --> 00:37:45.060
BRAD GREEN: No.

00:37:45.060 --> 00:37:46.200
AUDIENCE: Since users are--

00:37:46.200 --> 00:37:48.180
BRAD GREEN: There's no way
for Google to know.

00:37:48.180 --> 00:37:49.530
We see what you finally
render.

00:37:49.530 --> 00:37:50.970
AUDIENCE: Oh, OK Thank you.

00:37:50.970 --> 00:37:51.270
BRAD GREEN: Sure.

00:37:51.270 --> 00:37:52.470
Yeah?

00:37:52.470 --> 00:37:55.290
AUDIENCE: So we already built a
map with Backbone and other

00:37:55.290 --> 00:37:59.600
stuff, and we don't have a--
it's like a financial app.

00:37:59.600 --> 00:38:03.580
So now, do you think I could
introduce Angular and, with

00:38:03.580 --> 00:38:07.650
it's help-- because it's a huge
app, a trading app, but

00:38:07.650 --> 00:38:10.740
lot of Backbone, and a
lot of stuff in it.

00:38:10.740 --> 00:38:12.610
BRAD GREEN: So what is the
core of the question?

00:38:12.610 --> 00:38:13.900
Could you rewrite in Angular?

00:38:13.900 --> 00:38:15.800
AUDIENCE: I mean, do I have
to only rewrite something?

00:38:15.800 --> 00:38:19.510
Or will it-- can I use
this as a part of it?

00:38:19.510 --> 00:38:20.440
Or how will this help--

00:38:20.440 --> 00:38:20.660
MISKO HEVERY: Yeah.

00:38:20.660 --> 00:38:21.990
I think [INAUDIBLE]

00:38:21.990 --> 00:38:23.060
is [INAUDIBLE] do a
full rewrite, or

00:38:23.060 --> 00:38:24.280
you can do it partially.

00:38:24.280 --> 00:38:25.790
And one of the things we wanted
to make sure that

00:38:25.790 --> 00:38:28.110
Angular plays nicely with other
frameworks so that you

00:38:28.110 --> 00:38:31.850
could rewrite an app one
page at a time, or

00:38:31.850 --> 00:38:32.450
something like that.

00:38:32.450 --> 00:38:33.720
So there's even--

00:38:33.720 --> 00:38:35.870
I've seen some blog posts about
people trying to get

00:38:35.870 --> 00:38:37.630
Angular to run together
with Backbone.

00:38:37.630 --> 00:38:39.490
So they'll use Backbone for the
models, and Angular for

00:38:39.490 --> 00:38:41.370
the data-binding
and rendering.

00:38:41.370 --> 00:38:42.640
So that should be possible.

00:38:42.640 --> 00:38:47.180
AUDIENCE: Yeah, because we use
data-binding of the Backbones.

00:38:47.180 --> 00:38:47.740
Thanks.

00:38:47.740 --> 00:38:48.970
MISKO HEVERY: I think we can
make time for one more

00:38:48.970 --> 00:38:50.220
question, and then time
is running out.

00:38:50.220 --> 00:38:50.540
BRAD GREEN: Yes.

00:38:50.540 --> 00:38:50.970
Right over here?

00:38:50.970 --> 00:38:54.320
And we'll hit the rest of
you up in the sandbox.

00:38:54.320 --> 00:38:56.050
AUDIENCE: All right,
score for me.

00:38:56.050 --> 00:38:58.030
So I actually have been using
it for the past half

00:38:58.030 --> 00:38:59.200
year, and loving it.

00:38:59.200 --> 00:39:02.110
I have two very specific
questions about ng-switch.

00:39:02.110 --> 00:39:05.590
So one of them is, lately I've
been doing a lot of nested

00:39:05.590 --> 00:39:06.320
ng-switches.

00:39:06.320 --> 00:39:07.380
One inside--

00:39:07.380 --> 00:39:10.140
like for instance, one is true,
and inside that another

00:39:10.140 --> 00:39:12.330
ng-switch, and sometimes
a third.

00:39:12.330 --> 00:39:15.050
Should I be concerned about
doing nested ng-switch?

00:39:15.050 --> 00:39:17.530
That's question number one.

00:39:17.530 --> 00:39:19.040
MISKO HEVERY: If you're just
going to nest just a few

00:39:19.040 --> 00:39:21.660
ng-switches, it shouldn't
be an issue.

00:39:21.660 --> 00:39:24.090
If you're gonna nest 50 of them,
then maybe you should

00:39:24.090 --> 00:39:25.140
look at a different
way of doing it.

00:39:25.140 --> 00:39:26.250
AUDIENCE: Yeah, OK.

00:39:26.250 --> 00:39:26.790
That's good to know.

00:39:26.790 --> 00:39:31.210
So the second one is, is there a
good way to do undefine with

00:39:31.210 --> 00:39:33.420
ng-switch, because I haven't
been able to do that very

00:39:33.420 --> 00:39:34.210
successfully.

00:39:34.210 --> 00:39:36.570
So what I always have been doing
is to actually have the

00:39:36.570 --> 00:39:38.240
wrapper do a return
true or false.

00:39:38.240 --> 00:39:40.980
And then have it go to web
[? branch ?] when true, and

00:39:40.980 --> 00:39:42.190
then when false--

00:39:42.190 --> 00:39:45.000
versus when I tried to do one
undefined, it just doesn't

00:39:45.000 --> 00:39:47.140
seem to fall to the
right branch.

00:39:47.140 --> 00:39:50.860
So not sure if anybody else has
seen this similar problem.

00:39:50.860 --> 00:39:51.610
BRAD GREEN: I didn't
quite get it.

00:39:51.610 --> 00:39:53.840
But maybe let's continue
this back upstairs.

00:39:53.840 --> 00:39:54.260
AUDIENCE: Yeah, OK.

00:39:54.260 --> 00:39:54.910
Cool.

00:39:54.910 --> 00:39:55.820
BRAD GREEN: Thank
you everybody.

00:39:55.820 --> 00:39:56.030
MISKO HEVERY: Thank you

00:39:56.030 --> 00:39:57.810
BRAD GREEN: Thanks so
much for coming

