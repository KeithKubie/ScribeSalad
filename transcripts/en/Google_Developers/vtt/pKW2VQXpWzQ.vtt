WEBVTT
Kind: captions
Language: en

00:00:08.455 --> 00:00:50.337
[MUSIC PLAYING]

00:01:04.430 --> 00:01:07.380
PAUL LEWIS: Well, hello
everyone and welcome to this GDL

00:01:07.380 --> 00:01:09.530
on Hobbit: A Journey
Through Middle-earth.

00:01:09.530 --> 00:01:11.390
Now I actually have
the team with me

00:01:11.390 --> 00:01:14.221
from North Kingdom in Sweden
who built the Chrome experiment.

00:01:14.221 --> 00:01:15.720
So I'll hand you
over to those guys,

00:01:15.720 --> 00:01:17.136
and they can
introduce themselves.

00:01:19.249 --> 00:01:20.082
DANIEL ISAKSSON: Hi.

00:01:20.082 --> 00:01:24.740
I'm Daniel Isaksson, technical
director on the project

00:01:24.740 --> 00:01:26.766
And this is my friend, Einar.

00:01:26.766 --> 00:01:28.864
EINAR OBERG: Yeah, developer.

00:01:28.864 --> 00:01:30.030
PAUL LEWIS: All right, guys.

00:01:30.030 --> 00:01:32.159
Thank you for joining us.

00:01:32.159 --> 00:01:33.700
So, I guess, the
first thing I wanted

00:01:33.700 --> 00:01:37.380
to ask is, for anybody who's
not actually been to the site

00:01:37.380 --> 00:01:39.220
or seen it yet,
what kind of things

00:01:39.220 --> 00:01:40.770
should they actually expect?

00:01:40.770 --> 00:01:43.910
What have you guys put
into that experience?

00:01:43.910 --> 00:01:45.660
DANIEL ISAKSSON: Well,
we wanted to create

00:01:45.660 --> 00:01:51.210
a very visual, multimedia
exploration of the characters,

00:01:51.210 --> 00:01:57.520
locations, and everything from
the first two "Hobbit" movies.

00:01:57.520 --> 00:02:04.120
And we're doing some small
games using WebGL and CSS.

00:02:04.120 --> 00:02:08.497
And some dramatizations of
different scenes and locations.

00:02:08.497 --> 00:02:09.830
PAUL LEWIS: That sounds awesome.

00:02:09.830 --> 00:02:14.480
So what kind of technologies
or libraries or frameworks

00:02:14.480 --> 00:02:18.260
did you have to use to bring
this whole thing together?

00:02:18.260 --> 00:02:19.710
EINAR OBERG: For
the experiences,

00:02:19.710 --> 00:02:27.310
we have both the WebGL-based
ones using three.js

00:02:27.310 --> 00:02:29.380
And we have a
couple of locations

00:02:29.380 --> 00:02:31.880
as well using CSS only.

00:02:31.880 --> 00:02:37.870
So it can be experienced
on other browsers

00:02:37.870 --> 00:02:41.200
than Chrome and
Firefox, on mobile.

00:02:41.200 --> 00:02:45.350
So we could reach more people
with the actual experiences

00:02:45.350 --> 00:02:46.100
as well.

00:02:46.100 --> 00:02:50.830
PAUL LEWIS: So is
a lot of the code

00:02:50.830 --> 00:02:54.450
specific to your own engine?

00:02:54.450 --> 00:02:56.170
I mean, you mentioned
three.js there.

00:02:56.170 --> 00:03:00.310
Did you have to craft a lot
of the engine for yourselves?

00:03:00.310 --> 00:03:03.880
EINAR OBERG: No,
actually we used,

00:03:03.880 --> 00:03:09.420
pretty much, three.js
as it is, which

00:03:09.420 --> 00:03:11.350
is pretty awesome already.

00:03:11.350 --> 00:03:15.640
And then we, for example, in
Lake-town, we had physics,

00:03:15.640 --> 00:03:21.870
and then we used the three.js
library and the branch

00:03:21.870 --> 00:03:24.130
with the animal.

00:03:24.130 --> 00:03:25.415
The animal branch in that one.

00:03:25.415 --> 00:03:26.040
PAUL LEWIS: OK.

00:03:26.040 --> 00:03:26.540
Awesome.

00:03:26.540 --> 00:03:28.330
OK, cool.

00:03:28.330 --> 00:03:29.970
So obviously with
something like this,

00:03:29.970 --> 00:03:31.550
you've got a lot
of moving parts.

00:03:31.550 --> 00:03:34.350
Like you said, there's
CSS 3D transforms.

00:03:34.350 --> 00:03:35.610
There's WebGL.

00:03:35.610 --> 00:03:36.640
There's audio.

00:03:36.640 --> 00:03:38.670
There's imagery.

00:03:38.670 --> 00:03:41.530
Just to name a few
of these things.

00:03:41.530 --> 00:03:45.750
What was the actual workflow for
building the whole experience?

00:03:45.750 --> 00:03:49.150
Because, as I say,
it's a complex beast.

00:03:49.150 --> 00:03:50.340
And it has to run well.

00:03:50.340 --> 00:03:52.310
So how did you actually
kind of build up

00:03:52.310 --> 00:03:55.590
to what we actually get to see?

00:03:55.590 --> 00:03:58.770
DANIEL ISAKSSON:
Well, I think it's

00:03:58.770 --> 00:04:01.526
made up of different
parts, as you say.

00:04:01.526 --> 00:04:06.140
And coming from the really
more creative side of it,

00:04:06.140 --> 00:04:10.290
we usually do a lot of
animatics in After Effects,

00:04:10.290 --> 00:04:17.570
pre-rendering 3D work from 3D
flows into each section, how

00:04:17.570 --> 00:04:20.390
we want it to feel and look.

00:04:20.390 --> 00:04:23.180
Then, from that, I
think it's very much

00:04:23.180 --> 00:04:25.425
going into early prototyping.

00:04:25.425 --> 00:04:27.300
Because when you sit
there in the room trying

00:04:27.300 --> 00:04:30.975
to discuss a game or a
project, without having

00:04:30.975 --> 00:04:33.100
an actual prototype
to play around with,

00:04:33.100 --> 00:04:34.550
it's very hard
for lots of people

00:04:34.550 --> 00:04:39.320
to get a common understanding
of what you're talking about.

00:04:39.320 --> 00:04:40.820
But that's--

00:04:40.820 --> 00:04:42.320
PAUL LEWIS: So did
you find that you

00:04:42.320 --> 00:04:45.560
were making a lot of
prototypes and iterating a lot,

00:04:45.560 --> 00:04:48.840
or did you find that you just
made one or two prototypes

00:04:48.840 --> 00:04:50.050
and that was good enough?

00:04:50.050 --> 00:04:53.710
I mean, how difficult was it
to arrive at something that you

00:04:53.710 --> 00:04:55.310
felt was creatively solid?

00:04:58.155 --> 00:05:00.280
DANIEL ISAKSSON: I think
for some of the locations,

00:05:00.280 --> 00:05:01.910
we've done way too
many prototypes.

00:05:05.250 --> 00:05:08.230
But it's a very
difficult experience

00:05:08.230 --> 00:05:16.260
to create stories around and to
get something creatively that

00:05:16.260 --> 00:05:23.190
works both to make
something as a tech demo.

00:05:23.190 --> 00:05:26.280
I mean, it's easy to make
something that's a good story,

00:05:26.280 --> 00:05:30.070
but maybe it doesn't suited
for a good tech demo.

00:05:30.070 --> 00:05:32.940
And on the other
hand, we're making--

00:05:32.940 --> 00:05:36.030
so it has been a challenge
to create stories

00:05:36.030 --> 00:05:38.657
that works in all dimensions.

00:05:38.657 --> 00:05:40.990
PAUL LEWIS: Yeah, I mean, for
anybody who's not seen it,

00:05:40.990 --> 00:05:43.687
I mean it is a phenomenal
piece of technology

00:05:43.687 --> 00:05:45.270
that you've actually
managed to craft.

00:05:45.270 --> 00:05:49.470
You know, the WebGL stuff,
the CSS 3D stuff, and so on.

00:05:49.470 --> 00:05:51.710
But actually, it is,
actually, a very interesting

00:05:51.710 --> 00:05:54.330
and fun sort of experience
from the story side,

00:05:54.330 --> 00:05:56.330
to actually go through
these parts of the story.

00:05:56.330 --> 00:05:58.880
And there are bits where
you scrub through the video

00:05:58.880 --> 00:06:01.470
back and forth and read
about the characters

00:06:01.470 --> 00:06:05.380
and the locations, and so on.

00:06:05.380 --> 00:06:09.840
I just want to sidestep into
a bit of a discussion of WebGL

00:06:09.840 --> 00:06:12.690
technology that I have
a lot of love for.

00:06:12.690 --> 00:06:15.560
But debugging
WebGL, particularly,

00:06:15.560 --> 00:06:19.560
is notoriously horrible and
difficult because sometimes

00:06:19.560 --> 00:06:21.800
all you get is
this black screen.

00:06:21.800 --> 00:06:25.670
And no errors, no warnings.

00:06:25.670 --> 00:06:28.610
Just the miserable black
screen of nothingness.

00:06:28.610 --> 00:06:33.330
So I'm curious-- kind of,
what was your, sort of,

00:06:33.330 --> 00:06:34.700
your tool chain?

00:06:34.700 --> 00:06:36.570
What did debugging
look like for you,

00:06:36.570 --> 00:06:40.634
in terms of finding,
fixing, and squashing bugs?

00:06:40.634 --> 00:06:42.440
EINAR OBERG: Yeah.

00:06:42.440 --> 00:06:45.970
As opposite to you, that
makes your own WebGL engines,

00:06:45.970 --> 00:06:50.880
sometimes, since we're using
the three.js, much of that

00:06:50.880 --> 00:06:52.090
is taken care of.

00:06:52.090 --> 00:06:58.280
And with a bit of experience,
it's quite straightforward

00:06:58.280 --> 00:07:02.680
work, I think, to set up the
initial scenes, at least,

00:07:02.680 --> 00:07:06.020
and avoiding that black
screen that I often

00:07:06.020 --> 00:07:09.060
get in the very
early stages when

00:07:09.060 --> 00:07:12.250
starting to implement
the 3D stuff.

00:07:12.250 --> 00:07:15.230
But, once you have pointed your
camera in the right direction,

00:07:15.230 --> 00:07:20.740
set up all the lights
and all that basic stuff,

00:07:20.740 --> 00:07:22.870
it's pretty straightforward.

00:07:22.870 --> 00:07:27.310
But then when moving
into debugging,

00:07:27.310 --> 00:07:32.000
I most often used
the WebGL Inspector,

00:07:32.000 --> 00:07:34.340
the Chrome extension.

00:07:34.340 --> 00:07:36.960
If I want to see,
for example, what's

00:07:36.960 --> 00:07:40.010
getting inside the
textures and, especially,

00:07:40.010 --> 00:07:43.220
if there's dynamic textures
and post effects and stuff

00:07:43.220 --> 00:07:47.180
like that you need to look at.

00:07:47.180 --> 00:07:51.840
But, otherwise, the console
log is-- the console output

00:07:51.840 --> 00:07:56.170
is pretty straightforward to
see if there's any shader issues

00:07:56.170 --> 00:07:59.010
and stuff like that that.

00:07:59.010 --> 00:08:01.010
PAUL LEWIS: Yeah, you
mentioned WebGL Inspector.

00:08:01.010 --> 00:08:05.530
If anybody's not actually used
that, it's a Chrome extension

00:08:05.530 --> 00:08:09.100
by one of the Chrome engineers--
sorry not Chrome engineers,

00:08:09.100 --> 00:08:11.790
a Maps engineer
called Ben Vanik.

00:08:11.790 --> 00:08:15.540
And it basically wraps
around all the WebGL context

00:08:15.540 --> 00:08:17.810
and gives you a lot
of insight into what's

00:08:17.810 --> 00:08:19.545
actually going on there.

00:08:19.545 --> 00:08:21.670
So definitely worth checking
out if you're actually

00:08:21.670 --> 00:08:24.120
trying to do any
work with WebGL.

00:08:24.120 --> 00:08:28.720
So I can open A Journey Through
Middle-earth on desktop,

00:08:28.720 --> 00:08:33.080
but I can also do it on phones
and tablets, which is, frankly,

00:08:33.080 --> 00:08:33.885
awesome.

00:08:33.885 --> 00:08:35.630
And this is one
of the first times

00:08:35.630 --> 00:08:38.730
I think I've seen an
experience of this quality

00:08:38.730 --> 00:08:41.010
available across platforms.

00:08:41.010 --> 00:08:44.820
So suppose the obvious
question, for me, initially,

00:08:44.820 --> 00:08:48.550
is, how did you find
the process of building

00:08:48.550 --> 00:08:50.480
a genuinely
multi-device experience?

00:08:54.000 --> 00:08:55.680
DANIEL ISAKSSON: Yeah.

00:08:55.680 --> 00:08:57.066
EINAR OBERG: It was a journey.

00:08:57.066 --> 00:08:58.690
DANIEL ISAKSSON: It
has been a journey.

00:08:58.690 --> 00:09:01.832
It has been a learning process
for us as well as the company

00:09:01.832 --> 00:09:07.050
because we haven't been
too much into that before.

00:09:07.050 --> 00:09:13.430
But, I mean, from
the beginning, it

00:09:13.430 --> 00:09:17.270
was a big hurdle to decide
what to do with platforms that

00:09:17.270 --> 00:09:20.770
didn't support
WebGL, for example.

00:09:20.770 --> 00:09:22.460
How to handle that.

00:09:22.460 --> 00:09:26.210
How to communicate with
all different kinds

00:09:26.210 --> 00:09:32.440
of mobile devices that couldn't
support the experience.

00:09:32.440 --> 00:09:36.590
But from that point,
I think we found

00:09:36.590 --> 00:09:41.790
it pretty similar to
normal web development,

00:09:41.790 --> 00:09:47.140
in terms of actually
building the website.

00:09:47.140 --> 00:09:51.590
Of course, there are
limitations to it

00:09:51.590 --> 00:09:53.582
that you have to abide to.

00:09:53.582 --> 00:09:55.040
PAUL LEWIS: Well,
that was actually

00:09:55.040 --> 00:09:56.248
going to be my next question.

00:09:56.248 --> 00:09:58.290
So, kind of, there are
obvious constraints.

00:09:58.290 --> 00:09:59.890
You know, on the
one hand, you've

00:09:59.890 --> 00:10:02.840
got these desktops
with these meaty GPUs.

00:10:02.840 --> 00:10:05.970
On the other hand, you've got
little handheld smartphones,

00:10:05.970 --> 00:10:07.690
which are going to
punish you if you

00:10:07.690 --> 00:10:09.170
do the slightest thing wrong.

00:10:11.829 --> 00:10:13.870
How did you actually deal
with those constraints?

00:10:13.870 --> 00:10:15.340
You sort of mentioned
that you had

00:10:15.340 --> 00:10:18.560
to decide what would go
in, what would go out.

00:10:18.560 --> 00:10:21.060
Can you just talk a bit
more about that process

00:10:21.060 --> 00:10:26.011
and how you decided what
to include where and so on?

00:10:26.011 --> 00:10:28.550
EINAR OBERG: Yeah, I guess the
biggest hurdle was the memory

00:10:28.550 --> 00:10:30.640
consumption.

00:10:30.640 --> 00:10:36.140
because you can pretty
much hit the roof

00:10:36.140 --> 00:10:40.650
and crash the device if you're
not really careful with that.

00:10:40.650 --> 00:10:43.630
So loading different
assets, for one thing.

00:10:43.630 --> 00:10:48.010
And not only for memory,
for performance as well.

00:10:48.010 --> 00:10:51.940
Because if you're using a
smaller asset and scale it up,

00:10:51.940 --> 00:10:55.350
it's less video
memory, as well, when

00:10:55.350 --> 00:10:56.995
you push big [? stuff ?] around.

00:11:00.360 --> 00:11:04.820
So that helps the GPU as well.

00:11:04.820 --> 00:11:07.930
PAUL LEWIS: You've sort
of taken a little bit

00:11:07.930 --> 00:11:09.860
of a wander into my
next question actually.

00:11:09.860 --> 00:11:11.234
Something I wanted
to talk to you

00:11:11.234 --> 00:11:14.050
about is the fact that this
thing's running fantastically

00:11:14.050 --> 00:11:16.250
well.

00:11:16.250 --> 00:11:19.620
Astonishing, actually,
just how well

00:11:19.620 --> 00:11:21.610
this thing runs
on mobile devices,

00:11:21.610 --> 00:11:23.864
in particular, where
you'd be a bit concerned--

00:11:23.864 --> 00:11:26.030
or I would definitely be a
bit concerned when you're

00:11:26.030 --> 00:11:29.420
talking WebGL and 3D transforms.

00:11:29.420 --> 00:11:32.520
Just generally that you want
to keep this stuff running fast

00:11:32.520 --> 00:11:34.710
because otherwise there's
no point in including it.

00:11:34.710 --> 00:11:36.300
It's just going to
frustrate the user.

00:11:36.300 --> 00:11:39.900
So what were your
performance considerations

00:11:39.900 --> 00:11:41.400
and how did you
actually make sure

00:11:41.400 --> 00:11:43.510
that you were going to
stay at 60 frames a second

00:11:43.510 --> 00:11:45.810
or as close as you
possibly could to that?

00:11:48.540 --> 00:11:51.610
EINAR OBERG: We thought
that-- we didn't really

00:11:51.610 --> 00:11:57.920
aim at reaching the 60
frames per second on mobile.

00:11:57.920 --> 00:11:59.870
We felt that it's
much more important

00:11:59.870 --> 00:12:03.420
that we keep a stable
frame rate at a lower frame

00:12:03.420 --> 00:12:07.330
rate than pushing it up to 60.

00:12:07.330 --> 00:12:12.070
So if it could be
like around 30,

00:12:12.070 --> 00:12:15.170
that's enough if you
don't have this jank where

00:12:15.170 --> 00:12:17.730
the frame skipping is going on.

00:12:17.730 --> 00:12:22.430
So I guess the eye is
much more forgiving

00:12:22.430 --> 00:12:25.074
if it's not glitches in there.

00:12:25.074 --> 00:12:27.240
DANIEL ISAKSSON: I mean,
that took a lot of testing.

00:12:27.240 --> 00:12:28.448
EINAR OBERG: Yeah, of course.

00:12:28.448 --> 00:12:30.950
A lot of iterations to
make running smooth.

00:12:30.950 --> 00:12:33.230
DANIEL ISAKSSON:
Lots of devices,

00:12:33.230 --> 00:12:36.350
running from quite
low-end devices

00:12:36.350 --> 00:12:40.250
to the newest, most
performance devices.

00:12:40.250 --> 00:12:41.900
EINAR OBERG: But
then, of course, we

00:12:41.900 --> 00:12:46.700
disabled stuff on
low-end devices.

00:12:46.700 --> 00:12:48.950
Post effects.

00:12:48.950 --> 00:12:52.810
We reduced the size of the
canvas that is drawn, too.

00:12:52.810 --> 00:12:57.160
And yeah, all the
tricks that needed.

00:12:57.160 --> 00:12:58.542
PAUL LEWIS: So did you--

00:12:58.542 --> 00:12:59.500
DANIEL ISAKSSON: Sorry.

00:12:59.500 --> 00:13:00.870
PAUL LEWIS: I was going
to ask, did you, then,

00:13:00.870 --> 00:13:02.411
have to keep a bunch
of these devices

00:13:02.411 --> 00:13:05.280
around in your studio to just
kind of step through and go,

00:13:05.280 --> 00:13:07.790
OK, now how is this
running on this device?

00:13:07.790 --> 00:13:09.880
And now, how is this
running on this device?

00:13:09.880 --> 00:13:14.270
I mean that seems like a
big process to go through.

00:13:14.270 --> 00:13:15.860
Were you able to automate?

00:13:15.860 --> 00:13:17.100
Or was this just something
that you actually

00:13:17.100 --> 00:13:18.660
had to step through
and do yourselves

00:13:18.660 --> 00:13:21.642
every time you made a release?

00:13:21.642 --> 00:13:23.100
DANIEL ISAKSSON:
Well, for once, we

00:13:23.100 --> 00:13:27.060
had a dedicated
tester that actually

00:13:27.060 --> 00:13:31.675
was responsible for constantly
testing out new versions

00:13:31.675 --> 00:13:32.880
that we released.

00:13:32.880 --> 00:13:36.370
But in development maybe
you can answer that?

00:13:36.370 --> 00:13:41.930
EINAR OBERG: Yeah, of course,
we used multiple devices

00:13:41.930 --> 00:13:43.190
during development.

00:13:43.190 --> 00:13:47.110
And there is so big
difference between them.

00:13:47.110 --> 00:13:52.130
And, for example, the LG
Metro with super tiny screen

00:13:52.130 --> 00:13:55.350
up to the Nexus 10.

00:13:55.350 --> 00:14:01.570
And also with different GPUs
and screen sizes and, I mean,

00:14:01.570 --> 00:14:03.570
the pixel density and stuff.

00:14:03.570 --> 00:14:06.950
So, of course, we
had many iterations

00:14:06.950 --> 00:14:09.216
of testing on different devices.

00:14:09.216 --> 00:14:11.340
DANIEL ISAKSSON: I guess
one of the biggest hurdles

00:14:11.340 --> 00:14:15.910
is the ratio between
amount of pixels,

00:14:15.910 --> 00:14:21.930
like density, and screen
size and the CPU and GPU.

00:14:21.930 --> 00:14:28.400
Because some devices had way too
many pixels for their own good.

00:14:28.400 --> 00:14:30.890
PAUL LEWIS: They look
amazing, but they're not

00:14:30.890 --> 00:14:33.780
as forgiving, I guess, when
it comes to performance.

00:14:33.780 --> 00:14:36.280
Yeah, OK.

00:14:36.280 --> 00:14:40.510
So what are you, looking
back over this project now,

00:14:40.510 --> 00:14:45.180
what would you say you're most
proud of from the whole thing?

00:14:45.180 --> 00:14:48.247
I guess both from a
creative point of view,

00:14:48.247 --> 00:14:49.705
but also a technical
point of view.

00:14:49.705 --> 00:14:51.430
You can, you know, go crazy.

00:14:51.430 --> 00:14:52.879
Whatever you like.

00:14:52.879 --> 00:14:54.170
DANIEL ISAKSSON: Should I talk?

00:14:54.170 --> 00:14:55.970
EINAR OBERG: Yeah.

00:14:55.970 --> 00:14:59.437
DANIEL ISAKSSON: I think
my thing I'm most proud of

00:14:59.437 --> 00:15:02.470
is that we managed to make the
experience feel very tight.

00:15:02.470 --> 00:15:08.240
Like an app that isn't glitchy.

00:15:08.240 --> 00:15:13.530
That really went that
extra mile to try to--

00:15:13.530 --> 00:15:19.440
even though we have to unload
each section between sections

00:15:19.440 --> 00:15:26.420
and load the next one, so on,
to keep memory consumption low.

00:15:26.420 --> 00:15:31.300
I think we managed that by
putting hard work with doing

00:15:31.300 --> 00:15:36.420
translation, transitions to and
from the different sections.

00:15:36.420 --> 00:15:39.340
Trying to keep this
audio as fluent

00:15:39.340 --> 00:15:41.530
throughout the
experience as possible.

00:15:41.530 --> 00:15:42.832
So I'm very--

00:15:42.832 --> 00:15:44.790
EINAR OBERG: Yeah, so
you don't feel it's a gap

00:15:44.790 --> 00:15:46.770
and then you have to
load and load and load.

00:15:46.770 --> 00:15:50.230
So we had-- it's, of course,
many loaders in this site

00:15:50.230 --> 00:15:52.720
as well because
it's pretty large.

00:15:52.720 --> 00:15:55.960
But since we load smaller
chunks and then we

00:15:55.960 --> 00:15:59.512
show a splash screen
and load the rest,

00:15:59.512 --> 00:16:07.490
it feels like you can let
the user be immersed instead

00:16:07.490 --> 00:16:09.710
of just sit around
waiting for a long time.

00:16:09.710 --> 00:16:12.290
PAUL LEWIS: It
does, to me-- I know

00:16:12.290 --> 00:16:16.750
North Kingdom has a very rich
history in Flash-- it actually

00:16:16.750 --> 00:16:19.100
feels a lot more like
the latter stages

00:16:19.100 --> 00:16:21.960
that we had with a
lot of the Flash work,

00:16:21.960 --> 00:16:27.130
where studios were getting very
experienced with when to unload

00:16:27.130 --> 00:16:29.220
and load to try and
keep the user engaged.

00:16:29.220 --> 00:16:32.050
And it feels like
a lot of that stuff

00:16:32.050 --> 00:16:34.420
is still very applicable today.

00:16:34.420 --> 00:16:37.150
Even though we're delivering
in HTML, JavaScript, CSS,

00:16:37.150 --> 00:16:38.800
WebGL, all those
technologies, it still

00:16:38.800 --> 00:16:41.000
feels like a lot
of those techniques

00:16:41.000 --> 00:16:42.990
are still valid and
still useful and helpful.

00:16:42.990 --> 00:16:44.444
What do you guys think?

00:16:44.444 --> 00:16:46.360
DANIEL ISAKSSON: Yeah,
I mean, often the brief

00:16:46.360 --> 00:16:47.510
is still the same.

00:16:47.510 --> 00:16:49.610
The brief from the
client and the goal

00:16:49.610 --> 00:16:50.720
you're trying to achieve.

00:16:50.720 --> 00:16:53.280
And so that's not changing.

00:16:53.280 --> 00:16:56.060
And that's why we
always have thought

00:16:56.060 --> 00:17:00.140
that, to get really
immersed into an experience,

00:17:00.140 --> 00:17:03.525
it has to really have
that love in every pixel.

00:17:07.660 --> 00:17:11.790
PAUL LEWIS: So before you
started on the whole project,

00:17:11.790 --> 00:17:17.220
did you have any assumptions
about how this was going

00:17:17.220 --> 00:17:18.910
to play out or what
it was going to be

00:17:18.910 --> 00:17:21.520
like that you, then, during
the project, you just thought,

00:17:21.520 --> 00:17:22.960
wow, we were so wrong with that.

00:17:22.960 --> 00:17:23.460
You know.

00:17:23.460 --> 00:17:25.869
Did you have any assumptions
that were basically

00:17:25.869 --> 00:17:28.910
blown to pieces
throughout the build

00:17:28.910 --> 00:17:31.950
and the creative
work that you did?

00:17:31.950 --> 00:17:35.860
EINAR OBERG: I guess one thing
is we didn't really thought

00:17:35.860 --> 00:17:39.720
that the performance would be
that good on devices, actually.

00:17:39.720 --> 00:17:44.950
So, early in the
project, we had a lot

00:17:44.950 --> 00:17:47.340
of discussions what
we actually could do.

00:17:47.340 --> 00:17:52.390
And we need to have super simple
version for mobile devices.

00:17:52.390 --> 00:17:57.800
But then, gradually, we could
add more and more and more.

00:17:57.800 --> 00:18:00.120
I'm personally
pretty amazed what

00:18:00.120 --> 00:18:02.360
you can do devices these days.

00:18:02.360 --> 00:18:04.700
And, right now, it
takes a really long time

00:18:04.700 --> 00:18:07.260
to make a site like this.

00:18:07.260 --> 00:18:12.480
But I think that in
a very short future,

00:18:12.480 --> 00:18:17.650
we will take this for granted,
that we use mobile in this way

00:18:17.650 --> 00:18:19.541
when making sites like this.

00:18:19.541 --> 00:18:21.540
DANIEL ISAKSSON: I think
one thing, for example,

00:18:21.540 --> 00:18:26.630
is the 3D models we used
in WebGL experiments.

00:18:26.630 --> 00:18:29.060
From the beginning,
we really set the aim

00:18:29.060 --> 00:18:35.120
on using much lower poly
counts, less complex models.

00:18:35.120 --> 00:18:42.390
But that is something that we
kept raising for some parts.

00:18:42.390 --> 00:18:43.394
It has worked.

00:18:43.394 --> 00:18:44.560
PAUL LEWIS: That is awesome.

00:18:44.560 --> 00:18:47.380
I asked the question having
no idea what you'd actually

00:18:47.380 --> 00:18:52.900
answer with and I'm so happy
that your answer is, things

00:18:52.900 --> 00:18:55.990
perform better than
we thought they would.

00:18:55.990 --> 00:18:58.000
But, on the other
side, if you could

00:18:58.000 --> 00:19:01.560
change one thing
about the web platform

00:19:01.560 --> 00:19:03.620
that would have perhaps
made this whole thing

00:19:03.620 --> 00:19:05.850
a bunch easier,
what would it be?

00:19:05.850 --> 00:19:10.100
What would you change
about building for the web?

00:19:10.100 --> 00:19:12.240
DANIEL ISAKSSON: I think
we really discussed hard

00:19:12.240 --> 00:19:14.410
when heard you were going
to put this question.

00:19:14.410 --> 00:19:18.430
And we don't really
have a good answer.

00:19:18.430 --> 00:19:22.450
One thing, that usually is the
big blocker and that always

00:19:22.450 --> 00:19:27.370
comes up in discussions is
integrated video on mobile.

00:19:27.370 --> 00:19:30.550
To be able to create
interactive video experiences.

00:19:30.550 --> 00:19:33.770
Because that's something
we're getting most every brief

00:19:33.770 --> 00:19:35.630
from our clients.

00:19:35.630 --> 00:19:39.730
But there's a reason
why that's the case.

00:19:39.730 --> 00:19:43.285
And I'm not sure it would be
a better world going that way.

00:19:43.285 --> 00:19:43.910
PAUL LEWIS: Ok.

00:19:43.910 --> 00:19:45.000
Awesome.

00:19:45.000 --> 00:19:48.730
EINAR OBERG: I would say
also that to have a better

00:19:48.730 --> 00:19:54.470
workflow with animations
and vector-based graphics,

00:19:54.470 --> 00:19:57.000
there's so many techniques
that you can use,

00:19:57.000 --> 00:20:00.590
and it's scattered
all over the place.

00:20:00.590 --> 00:20:04.810
Maybe not changing the platform,
but the workflow for us

00:20:04.810 --> 00:20:09.420
developers to get all those
techniques under the same roof.

00:20:12.640 --> 00:20:14.754
Use them easier.

00:20:14.754 --> 00:20:15.668
PAUL LEWIS: Awesome.

00:20:15.668 --> 00:20:18.410
OK.

00:20:18.410 --> 00:20:21.790
So something like this is--
an experience like A Journey

00:20:21.790 --> 00:20:23.900
Through Middle-earth
is naturally very

00:20:23.900 --> 00:20:26.100
cutting edge in what
it's trying to do

00:20:26.100 --> 00:20:27.640
and the techniques
that you used.

00:20:27.640 --> 00:20:30.310
Were there any resources
that you relied on

00:20:30.310 --> 00:20:34.237
or that you looked at
to help you build it

00:20:34.237 --> 00:20:35.320
as you were going through?

00:20:35.320 --> 00:20:36.820
Or was it just
something that you just

00:20:36.820 --> 00:20:38.236
had to iterate
through on your own

00:20:38.236 --> 00:20:41.850
and just kind of
hope for the best?

00:20:41.850 --> 00:20:48.610
EINAR OBERG: I think that how
the development community looks

00:20:48.610 --> 00:20:51.700
like now is we
haven't had it easier

00:20:51.700 --> 00:20:54.910
than this to find
answers and stuff.

00:20:54.910 --> 00:20:59.700
Because you use dependencies
and components and GitHub

00:20:59.700 --> 00:21:00.440
and Twitter.

00:21:00.440 --> 00:21:05.950
It's so easy to get access
to not only the ones

00:21:05.950 --> 00:21:08.120
that wrote the code
from the beginning,

00:21:08.120 --> 00:21:11.720
but all the communities behind.

00:21:11.720 --> 00:21:15.190
Like IRC channel on three.js.

00:21:15.190 --> 00:21:17.350
All these people
there are helpful,

00:21:17.350 --> 00:21:21.050
can just quickly answer
if you have anything.

00:21:21.050 --> 00:21:25.070
And so I think
it's a great place.

00:21:25.070 --> 00:21:27.910
PAUL LEWIS: It sounds like
people power is basically

00:21:27.910 --> 00:21:28.415
the answer.

00:21:28.415 --> 00:21:31.260
You know, IRC, Twitter, GitHub.

00:21:31.260 --> 00:21:32.630
Go to the people.

00:21:32.630 --> 00:21:34.790
There are loads of really
experienced and helpful

00:21:34.790 --> 00:21:37.020
developers that will
actually help you,

00:21:37.020 --> 00:21:39.440
kind of, get to
your end goal, yeah?

00:21:39.440 --> 00:21:40.210
EINAR OBERG: Yeah.

00:21:40.210 --> 00:21:44.200
PAUL LEWIS: Well,
there are two articles

00:21:44.200 --> 00:21:48.670
by you guys on HTML5 Rocks,
which I really recommend,

00:21:48.670 --> 00:21:51.230
that steps through, in
a bit more detail, some

00:21:51.230 --> 00:21:54.230
of the technical
challenges that you faced.

00:21:54.230 --> 00:21:56.695
And if you've not seen A Journey
Through Middle-earth yet,

00:21:56.695 --> 00:21:58.070
definitely go and
check that out.

00:21:58.070 --> 00:22:01.490
It's well worth the time to just
explore every nook and cranny.

00:22:01.490 --> 00:22:05.480
I had one heck of a time trying
to get all the correct answers

00:22:05.480 --> 00:22:08.132
to Smaug and not get
burned to a crisp.

00:22:08.132 --> 00:22:10.090
But that's definitely
worth your time, as well.

00:22:10.090 --> 00:22:13.500
It's plenty fun listening
to Benedict Cumberbatch.

00:22:13.500 --> 00:22:16.840
There is his dragon thing.

00:22:16.840 --> 00:22:18.930
But all the same,
in any case, guys,

00:22:18.930 --> 00:22:22.480
thank you so much for taking
some time out and catch you

00:22:22.480 --> 00:22:23.484
next time.

00:22:23.484 --> 00:22:24.900
EINAR OBERG: Thanks
for having us.

00:22:24.900 --> 00:22:26.450
DANIEL ISAKSSON: Thank you.

