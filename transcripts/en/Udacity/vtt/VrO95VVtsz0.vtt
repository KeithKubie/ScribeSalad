WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:05.000
Let's get started. The first thing I need is to come up with a dictionary of all the words.

00:00:05.000 --> 00:00:10.000
Now, we've created a small file with about 4,000 words in it, called "word4k.txt."

00:00:10.000 --> 00:00:14.000
Let's take that file, read it, convert it to uppercase,

00:00:14.000 --> 00:00:18.000
because Scrabble with Words with Friends use only uppercase letters,

00:00:18.000 --> 00:00:23.000
split it into a list of words, assign that to a global variable--

00:00:23.000 --> 00:00:27.000
we'll call it WORDS and put it in all uppercase, just make sure that it stands out.

00:00:27.000 --> 00:00:31.000
Let's make this a set so that access to it is easy.

00:00:31.000 --> 00:00:34.000
We can figure out very quickly whether a word is in the dictionary.

00:00:34.000 --> 00:00:37.000
Okay, so now we're done. We have our words.

00:00:37.000 --> 00:00:40.000
Then I want to find all the words within a hand.

00:00:40.000 --> 00:00:44.000
So the hand will be seven letters, and I want to find all the words

00:00:44.000 --> 00:00:46.000
of seven letters or less that can be made out of those letters.

00:00:46.000 --> 00:00:49.000
I'm going start with a very straightforward approach,

00:00:49.000 --> 00:00:51.000
and then we're going to refine it over time.

00:00:51.000 --> 00:00:54.000
Here is what I've done. I haven't worried about repeating myself

00:00:54.000 --> 00:00:58.000
and about making the code long. I just wanted to make it straightforward.

00:00:58.000 --> 00:01:02.000
Then I said, the first letter a can be any letter in the hand.

00:01:02.000 --> 00:01:07.000
If that's a work, then go ahead and add that to my set of results.

00:01:07.000 --> 00:01:10.000
I start off with an empty set of results, and I'm going to add as I go.

00:01:10.000 --> 00:01:16.000
Otherwise, b can be any letter in the result of removing a from the hand.

00:01:16.000 --> 00:01:21.000
Now the word that I'm building up is a + b--two-letter word.

00:01:21.000 --> 00:01:28.000
If that's a word, add it. Otherwise, c can be any letter in the hand without w in it--

00:01:28.000 --> 00:01:30.000
the remaining letters in the hand.

00:01:30.000 --> 00:01:33.000
A new word can is a + b + c.

00:01:33.000 --> 00:01:37.000
If that's in WORDS, then add it, and we just keep on going through,

00:01:37.000 --> 00:01:41.000
adding a letter each time, checking to see if that's in the WORDS, adding them up.

00:01:41.000 --> 00:01:43.000
Here's my definition of removed.

00:01:43.000 --> 00:01:50.000
It takes a hand or a sequence of letters and then the letter or letters to remove.

00:01:50.000 --> 00:01:56.000
For each of those letters just replace the letter in the collection of letters

00:01:56.000 --> 00:02:00.000
with the empty string and do that exactly once, so don't remove all of them.

00:02:00.000 --> 00:02:03.000
Then return the remaining letters. Does it work?

00:02:03.000 --> 00:02:07.000
Well, if I find words with this sequence of letters in my hand,

00:02:07.000 --> 00:02:09.000
it comes back with this list. That looks pretty good.

00:02:09.000 --> 00:02:14.000
It's hard for me to verify right now that I found everything that's in my dictionary,

00:02:14.000 --> 00:02:19.000
but it looks good, and I did a little bit of poking around in the dictionary for likely things,

00:02:19.000 --> 00:02:23.000
and all the words I could think of that weren't in this set were not in the dictionary.

00:02:23.000 --> 00:02:25.000
That's why they weren't included. That's looks pretty good.

00:02:25.000 --> 00:02:29.000
I'm going to be doing a lot of work here, and I'm going to be modifying this function

00:02:29.000 --> 09:59:59.000
and changing it. I'd like to have a better set of tests than just one test.

