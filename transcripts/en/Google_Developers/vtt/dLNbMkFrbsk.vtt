WEBVTT
Kind: captions
Language: en

00:00:07.087 --> 00:00:08.670
MARTIN GORNER: Hello,
and welcome back

00:00:08.670 --> 00:00:10.180
on "Root Access Berlin."

00:00:10.180 --> 00:00:12.770
We are again, recording
here from the Factory

00:00:12.770 --> 00:00:14.180
Studio in Berlin.

00:00:14.180 --> 00:00:19.980
And today, I have with me Jerome
Mouton, the CTO of SnapEngage.

00:00:19.980 --> 00:00:20.570
Hello, Jerome.

00:00:20.570 --> 00:00:21.730
JEROME MOUTON: Hello, Martin.

00:00:21.730 --> 00:00:23.440
MARTIN GORNER: Can you
please introduce yourself?

00:00:23.440 --> 00:00:24.731
JEROME MOUTON: Yes, absolutely.

00:00:24.731 --> 00:00:27.890
So I'm Jerome Mouton, the CTO
and co-founder of SnapEngage.

00:00:27.890 --> 00:00:31.550
We are a small company
providing software

00:00:31.550 --> 00:00:34.630
as a service on the
Google Cloud Platform.

00:00:34.630 --> 00:00:36.870
Our customers are
using SnapEngage

00:00:36.870 --> 00:00:39.430
to engage their visitors
on their website

00:00:39.430 --> 00:00:42.950
and to assist them
through a sales cycle

00:00:42.950 --> 00:00:44.870
or for customer service.

00:00:44.870 --> 00:00:46.500
MARTIN GORNER: So
let's see a demo.

00:00:46.500 --> 00:00:49.230
Let's see what this looks like.

00:00:49.230 --> 00:00:53.110
Here, we have the website
of one of your customers.

00:00:53.110 --> 00:00:56.510
And I have opened
this little live chat.

00:00:56.510 --> 00:00:57.040
We just--

00:00:57.040 --> 00:00:57.570
JEROME MOUTON: Mm-hm.

00:00:57.570 --> 00:00:59.714
MARTIN GORNER: That one
is provided by SnapEngage.

00:00:59.714 --> 00:01:00.672
JEROME MOUTON: Exactly.

00:01:00.672 --> 00:01:03.375
So these customers added the
SnapEngage JavaScript client

00:01:03.375 --> 00:01:04.506
on their website.

00:01:04.506 --> 00:01:08.535
And when you click on the
little button to open the chat,

00:01:08.535 --> 00:01:12.260
this window popped up and
provide you the option

00:01:12.260 --> 00:01:15.882
to leave a message or to
chat with this customer.

00:01:15.882 --> 00:01:17.340
MARTIN GORNER: And
so today, we are

00:01:17.340 --> 00:01:19.750
going to answer a question
that is a recurring

00:01:19.750 --> 00:01:20.910
question on App Engine.

00:01:20.910 --> 00:01:22.460
How much does this cost?

00:01:22.460 --> 00:01:24.160
Every time I talk
about App Engine

00:01:24.160 --> 00:01:27.500
with someone, that's a question
that comes again because it's

00:01:27.500 --> 00:01:31.450
not so easy to determine
how much you are going

00:01:31.450 --> 00:01:33.920
to pay for your application.

00:01:33.920 --> 00:01:35.775
In App Engine,
everything is metered,

00:01:35.775 --> 00:01:42.460
and you pay according to your
bandwidth usage, CPU usage,

00:01:42.460 --> 00:01:44.640
and so on.

00:01:44.640 --> 00:01:47.560
However, here,
with SnapEngage, we

00:01:47.560 --> 00:01:51.425
have an application that
has a significant traffic.

00:01:51.425 --> 00:01:52.300
JEROME MOUTON: Mm-hm.

00:01:52.300 --> 00:01:54.260
MARTIN GORNER: And
so Jerome is going

00:01:54.260 --> 00:01:59.640
to tell us about the associated
costs and how to optimize them.

00:01:59.640 --> 00:02:02.590
So first of all,
Jerome, how much traffic

00:02:02.590 --> 00:02:04.449
are we talking about?

00:02:04.449 --> 00:02:05.990
JEROME MOUTON: On
a month on average,

00:02:05.990 --> 00:02:08.610
we serve a few
billions of queries

00:02:08.610 --> 00:02:11.370
in App Engine for SnapEngage.

00:02:11.370 --> 00:02:16.250
And we use a fair amount
of instances at a time.

00:02:16.250 --> 00:02:18.602
We have a few
dozens of instances

00:02:18.602 --> 00:02:20.732
running for serving our queries.

00:02:20.732 --> 00:02:22.730
MARTIN GORNER: All right,
that's significant.

00:02:22.730 --> 00:02:26.400
And so can you tell us
what a typical query

00:02:26.400 --> 00:02:28.520
landing on your
application looks like,

00:02:28.520 --> 00:02:30.399
so that we understand
what's going on?

00:02:30.399 --> 00:02:31.940
JEROME MOUTON: Yes,
so you are seeing

00:02:31.940 --> 00:02:34.130
there's this chat window.

00:02:34.130 --> 00:02:38.360
And to do this display,
we have to figure out

00:02:38.360 --> 00:02:42.150
are someone in the company
able to answer the chat?

00:02:42.150 --> 00:02:43.360
Is the user there to chat?

00:02:43.360 --> 00:02:47.060
So the typical on PC, we do
on every customer web page

00:02:47.060 --> 00:02:52.720
like this one is to first bring
in things App Engine memory

00:02:52.720 --> 00:02:55.820
context the
configuration of the chat

00:02:55.820 --> 00:02:58.630
team-- so lot of
confidential details,

00:02:58.630 --> 00:03:02.680
including what is agent's
list for this team?

00:03:02.680 --> 00:03:05.140
What are the different
tiers of agent?

00:03:05.140 --> 00:03:08.280
what are in the rules
for assigning agents?

00:03:08.280 --> 00:03:10.680
Once we have that, we
need to bring, also

00:03:10.680 --> 00:03:13.920
in memory, what's the
status of each agent.

00:03:13.920 --> 00:03:16.050
Are they online,
closed, offline?

00:03:16.050 --> 00:03:20.030
How many chat does
each of them--

00:03:20.030 --> 00:03:21.790
is really handling,
so that we know

00:03:21.790 --> 00:03:25.240
how to best prioritize and route
the chat to the right person.

00:03:25.240 --> 00:03:27.825
MARTIN GORNER: So you
have first a batch

00:03:27.825 --> 00:03:29.886
of requests to the DataStore.

00:03:29.886 --> 00:03:30.760
JEROME MOUTON: Mm-hm.

00:03:30.760 --> 00:03:33.312
MARTIN GORNER: Sometimes
backed by memcache so as

00:03:33.312 --> 00:03:36.490
to optimize them to get
the status of your agents.

00:03:36.490 --> 00:03:40.800
And then you run a CPU
intensive computing algorithm

00:03:40.800 --> 00:03:43.502
that comes up with the best
agent to answer this query.

00:03:43.502 --> 00:03:44.710
JEROME MOUTON: Exactly, yeah.

00:03:44.710 --> 00:03:50.540
MARTIN GORNER: So let's see how
your cost breakdown looks like.

00:03:50.540 --> 00:03:53.070
And indeed, it
seems that the CPU

00:03:53.070 --> 00:03:58.530
is the most expensive part
of your App Engine cost.

00:03:58.530 --> 00:04:02.580
So what are you doing to
keep that under control?

00:04:02.580 --> 00:04:04.669
JEROME MOUTON: So
the first thing

00:04:04.669 --> 00:04:06.960
that come in mind, of course,
is to optimize your code.

00:04:06.960 --> 00:04:09.375
And if you run algorithms
which are inefficient,

00:04:09.375 --> 00:04:12.320
you're going to use
more CPU for that.

00:04:12.320 --> 00:04:15.940
Something else you
should do, if your team

00:04:15.940 --> 00:04:17.619
has the skills on
different language,

00:04:17.619 --> 00:04:21.910
is you should pick a language
that is also efficient on time.

00:04:21.910 --> 00:04:25.140
Typically, if you go with
an interpreted language,

00:04:25.140 --> 00:04:28.610
it will take more
resources at one time

00:04:28.610 --> 00:04:30.597
than if you take a
compile language.

00:04:30.597 --> 00:04:32.680
MARTIN GORNER: And so what
language are you using?

00:04:32.680 --> 00:04:34.780
JEROME MOUTON: We're
using Java, which

00:04:34.780 --> 00:04:37.210
I think your reader knows it.

00:04:37.210 --> 00:04:39.410
It's a compile combine code.

00:04:39.410 --> 00:04:42.039
So it's not exactly running
on the CPU [INAUDIBLE]

00:04:42.039 --> 00:04:44.330
[? procedures ?] machines as
a [? generally ?] [? am ?]

00:04:44.330 --> 00:04:45.060
between.

00:04:45.060 --> 00:04:46.979
But it's very efficient.

00:04:46.979 --> 00:04:48.520
MARTIN GORNER: So
it's certainly more

00:04:48.520 --> 00:04:53.050
efficient than an interpreted
language like Python.

00:04:53.050 --> 00:04:56.455
But you have another option
on App Engine, which is Go.

00:04:56.455 --> 00:04:57.330
JEROME MOUTON: Mm-hm.

00:04:57.330 --> 00:04:59.970
MARTIN GORNER: Which
is completely compiled.

00:04:59.970 --> 00:05:05.590
So with that, probably, you
would get almost an order

00:05:05.590 --> 00:05:13.580
of, well, almost a factor of two
of CPU saving compared to Java.

00:05:13.580 --> 00:05:15.160
But you haven't tried Go.

00:05:15.160 --> 00:05:15.520
JEROME MOUTON: We haven't.

00:05:15.520 --> 00:05:16.650
But I think you should.

00:05:16.650 --> 00:05:19.890
We-- that will be for the most
important services, something

00:05:19.890 --> 00:05:20.890
we should do.

00:05:20.890 --> 00:05:23.220
Let me just interject
something here.

00:05:23.220 --> 00:05:26.670
Now, with App Engine
supporting modules,

00:05:26.670 --> 00:05:29.080
in theory, we should
be able to have

00:05:29.080 --> 00:05:32.190
some part of the application
using the send [? to test ?]

00:05:32.190 --> 00:05:34.730
or send memcache that's
running a different language.

00:05:34.730 --> 00:05:36.604
That's something we're
planning to experiment

00:05:36.604 --> 00:05:37.660
using in the future.

00:05:37.660 --> 00:05:39.076
MARTIN GORNER: So,
indeed, modules

00:05:39.076 --> 00:05:40.590
have been introduced recently.

00:05:40.590 --> 00:05:44.420
And so they allow you to
split your application

00:05:44.420 --> 00:05:46.760
into different modules.

00:05:46.760 --> 00:05:51.070
But those modules have their
own version, their own language.

00:05:51.070 --> 00:05:53.250
However, it's still
the same application.

00:05:53.250 --> 00:05:55.530
So they hit the same DataStore.

00:05:55.530 --> 00:05:58.680
So that is a good idea,
actually, to experiment

00:05:58.680 --> 00:06:03.040
with one separate functionality
written in a different language

00:06:03.040 --> 00:06:07.452
and to see what the impact
of that on the CPU cost is.

00:06:07.452 --> 00:06:09.660
JEROME MOUTON: Something
else I would like to mention

00:06:09.660 --> 00:06:12.770
is like most cloud
platforms, you

00:06:12.770 --> 00:06:15.612
can pre-reserve some
number of instances

00:06:15.612 --> 00:06:17.070
that you're going
to use this week.

00:06:17.070 --> 00:06:20.840
So once your application,
which level of usage

00:06:20.840 --> 00:06:24.550
which is getting
more than basic,

00:06:24.550 --> 00:06:26.860
you can kind of look
at what is the history

00:06:26.860 --> 00:06:29.520
for the past few
weeks, decide that you

00:06:29.520 --> 00:06:32.585
know you're going to use at
least that many instances,

00:06:32.585 --> 00:06:34.960
and tell the App Engine
table that I want

00:06:34.960 --> 00:06:37.110
to reserve that many instances.

00:06:37.110 --> 00:06:40.120
You don't have to schedule
them over time, just saying

00:06:40.120 --> 00:06:43.190
for this week, I will
use at least this level.

00:06:43.190 --> 00:06:45.490
What you gain is
instead of paying,

00:06:45.490 --> 00:06:48.640
I think, $0.08 per
hour, you're going

00:06:48.640 --> 00:06:51.480
pay $0.05 per hour for
these reserved instances.

00:06:51.480 --> 00:06:52.730
Which is a significant saving.

00:06:52.730 --> 00:06:54.604
MARTIN GORNER: OK, so
it's almost half price.

00:06:54.604 --> 00:06:55.845
JEROME MOUTON: Yes, mm.

00:06:55.845 --> 00:06:58.330
MARTIN GORNER: All right,
let's go back to the list.

00:06:58.330 --> 00:07:04.430
So the second most expensive
item here are DataStore reads.

00:07:04.430 --> 00:07:08.680
Again, can you tell us
what you can do with that?

00:07:08.680 --> 00:07:11.570
JEROME MOUTON: Yes, so
reading to DataStore

00:07:11.570 --> 00:07:16.010
is expensive and also is not the
fastest operation you can do.

00:07:16.010 --> 00:07:20.380
So App Engine provide the
platform memcache service,

00:07:20.380 --> 00:07:24.930
which memcache, it's
just a key value pair

00:07:24.930 --> 00:07:28.690
in the memory on one system.

00:07:28.690 --> 00:07:33.010
So for free on the platform,
you get shared memcache service,

00:07:33.010 --> 00:07:36.830
which let you put in
there some cached content

00:07:36.830 --> 00:07:39.877
that you know you're going
to reuse quite a bit.

00:07:39.877 --> 00:07:41.210
MARTIN GORNER: But it's a cache.

00:07:41.210 --> 00:07:41.750
JEROME MOUTON: It's a cache.

00:07:41.750 --> 00:07:43.585
MARTIN GORNER: So
at any point it

00:07:43.585 --> 00:07:45.580
can tell you that it has
forgotten the content.

00:07:45.580 --> 00:07:47.830
And you still must have it
somewhere in the DataStore.

00:07:47.830 --> 00:07:49.538
JEROME MOUTON: That's
a true [INAUDIBLE].

00:07:49.538 --> 00:07:51.170
But your code should
be smart enough

00:07:51.170 --> 00:07:53.465
that if you don't find
the value in memcache,

00:07:53.465 --> 00:07:54.910
it will then hit the DataStore.

00:07:54.910 --> 00:07:58.510
But your hit ratio in
memcache should be sufficient

00:07:58.510 --> 00:08:03.430
for you to send it maybe one
of a third or more requests

00:08:03.430 --> 00:08:04.219
on the DataStore.

00:08:04.219 --> 00:08:05.760
MARTIN GORNER: The
typical difference

00:08:05.760 --> 00:08:08.730
between hitting the DataStore
and hitting the DataStore

00:08:08.730 --> 00:08:15.030
through memcache is a reduction
of cost of a factor of 10.

00:08:15.030 --> 00:08:17.383
JEROME MOUTON: 10 is just a
number I'm mentioning here.

00:08:17.383 --> 00:08:18.216
[INTERPOSING VOICES]

00:08:18.216 --> 00:08:19.630
MARTIN GORNER: But
it's significant.

00:08:19.630 --> 00:08:21.300
JEROME MOUTON: It's
significant, yes, yeah.

00:08:21.300 --> 00:08:21.800
Yeah.

00:08:21.800 --> 00:08:26.160
MARTIN GORNER: And so
this shared memcache

00:08:26.160 --> 00:08:28.000
has some capacity.

00:08:28.000 --> 00:08:29.870
It can handle some load.

00:08:29.870 --> 00:08:34.809
And when do you know that
you are exceeding that?

00:08:34.809 --> 00:08:37.429
JEROME MOUTON: So
yeah, shared memcache,

00:08:37.429 --> 00:08:39.770
there's no real numbers
that we can kind of see.

00:08:39.770 --> 00:08:43.200
We have about 100
megabytes of storage there.

00:08:43.200 --> 00:08:47.270
It's shared across several
apps on the same app server.

00:08:47.270 --> 00:08:52.080
What happens, though, if some of
your neighbors on the same app

00:08:52.080 --> 00:08:53.965
server are using
a lot of memcache,

00:08:53.965 --> 00:08:55.650
you could see some constraint.

00:08:55.650 --> 00:08:58.890
Your memcache lifetime
may be reduced.

00:08:58.890 --> 00:09:03.650
So when you see your cache hit
rate being reduced compared

00:09:03.650 --> 00:09:05.670
to your usual, it's
most likely because you

00:09:05.670 --> 00:09:08.960
are kind of hitting the
limit on the shared memcache.

00:09:08.960 --> 00:09:10.980
MARTIN GORNER: So the
shared memcache is free.

00:09:10.980 --> 00:09:14.450
It's normal that
it has some limits.

00:09:14.450 --> 00:09:16.650
What can you do to
use more memcache

00:09:16.650 --> 00:09:18.380
if that's what your
application needs?

00:09:18.380 --> 00:09:20.504
JEROME MOUTON: Yeah, so
application like SnapEngage

00:09:20.504 --> 00:09:22.790
having quite heavy
traffic, we are

00:09:22.790 --> 00:09:26.630
making good use of what Google
calls a dedicated memcache.

00:09:26.630 --> 00:09:30.340
So instead of having about
100 megabytes of storage,

00:09:30.340 --> 00:09:35.780
you rent instances
of 1 gigabyte.

00:09:35.780 --> 00:09:38.260
And I think the
instance is rated

00:09:38.260 --> 00:09:41.619
for up to 10,000
operations per second.

00:09:41.619 --> 00:09:43.410
MARTIN GORNER: So that's
quite significant.

00:09:43.410 --> 00:09:46.860
A gigabyte of data and
10,000 operations per second,

00:09:46.860 --> 00:09:48.984
you can handle a lot
of load with that.

00:09:48.984 --> 00:09:50.400
JEROME MOUTON:
Definitely, and you

00:09:50.400 --> 00:09:53.570
can get several of these
1 gigabyte instances

00:09:53.570 --> 00:09:56.630
if you need to get more,
more operation per second.

00:09:56.630 --> 00:10:01.640
So it's not something typical
for small starter product,

00:10:01.640 --> 00:10:04.750
but once you see that
there's a [INAUDIBLE],

00:10:04.750 --> 00:10:06.600
your content is being pressured.

00:10:06.600 --> 00:10:08.600
Then that's where you
can activate that.

00:10:08.600 --> 00:10:10.330
Cost-wise, it's not expensive.

00:10:10.330 --> 00:10:13.790
What you get it's
about $80 per months

00:10:13.790 --> 00:10:17.486
per 1 gigabyte instances.

00:10:17.486 --> 00:10:19.986
MARTIN GORNER: All right,
let's get back to this list.

00:10:19.986 --> 00:10:23.950
So next, are DataStore writes.

00:10:23.950 --> 00:10:27.555
Those you told me are even
more expensive and even slower.

00:10:27.555 --> 00:10:28.430
JEROME MOUTON: Mm-hm.

00:10:28.430 --> 00:10:31.977
MARTIN GORNER: So again, what
can you do to help there?

00:10:31.977 --> 00:10:34.310
JEROME MOUTON: So the one
thing you need to keep in mind

00:10:34.310 --> 00:10:38.270
is every time you process
an entity in the DataStore,

00:10:38.270 --> 00:10:42.055
you not only process every
attribute of this entity,

00:10:42.055 --> 00:10:44.742
like every field,
but you also ask

00:10:44.742 --> 00:10:49.246
App Engine to create an index
for each of these attributes.

00:10:49.246 --> 00:10:50.620
Like, typically,
you have a user.

00:10:50.620 --> 00:10:53.410
You have the name of the
person, the email address, maybe

00:10:53.410 --> 00:10:54.650
a phone number.

00:10:54.650 --> 00:10:59.430
Processing that will not have
three write, but will have six

00:10:59.430 --> 00:11:01.540
writes for each index, as well.

00:11:01.540 --> 00:11:04.920
On top of that, if you
need help with the indexes,

00:11:04.920 --> 00:11:08.520
like if you need to be able
to do queries to find people

00:11:08.520 --> 00:11:11.160
on phone number on email
address-- I'm not sure

00:11:11.160 --> 00:11:15.030
why you do that, but-- you
have to define an initial index

00:11:15.030 --> 00:11:17.640
in your object definition.

00:11:17.640 --> 00:11:22.560
That would be also on write
another write permission.

00:11:22.560 --> 00:11:27.220
MARTIN GORNER: So there is
a write amplification effect

00:11:27.220 --> 00:11:31.325
that when you write one entity,
every property in that entity

00:11:31.325 --> 00:11:34.120
that is indexed, that
uses an additional write.

00:11:34.120 --> 00:11:37.470
And also, every
pair of properties

00:11:37.470 --> 00:11:39.585
that is indexed in a
composite index, that

00:11:39.585 --> 00:11:41.829
also produces an
additional write.

00:11:41.829 --> 00:11:42.620
JEROME MOUTON: Yes.

00:11:42.620 --> 00:11:43.400
MARTIN GORNER: All
right, so you have

00:11:43.400 --> 00:11:44.657
to be very careful with that.

00:11:44.657 --> 00:11:46.030
JEROME MOUTON: You
have to be careful.

00:11:46.030 --> 00:11:46.696
Keep it in mind.

00:11:46.696 --> 00:11:50.290
And you have a way through some
properties, your definition

00:11:50.290 --> 00:11:53.040
of object to tell
App Engine, please,

00:11:53.040 --> 00:11:55.780
do no create an index
for this attribute.

00:11:55.780 --> 00:11:57.555
For example, the
name of the person

00:11:57.555 --> 00:11:59.140
may not be something
you search on.

00:11:59.140 --> 00:12:03.150
So you just say, make this
attribute not indexed.

00:12:03.150 --> 00:12:05.274
And that way you can
save significantly

00:12:05.274 --> 00:12:06.690
on the number of
write operations.

00:12:06.690 --> 00:12:08.356
MARTIN GORNER: But
that will prevent you

00:12:08.356 --> 00:12:10.825
from ever querying
by that property.

00:12:10.825 --> 00:12:12.866
JEROME MOUTON: Yes, that's
correct, Martin, yeah.

00:12:12.866 --> 00:12:15.583
MARTIN GORNER: All right,
but that's what you--

00:12:15.583 --> 00:12:18.124
JEROME MOUTON: It's a trade off,
yeah. [? Otherwise, ?] yeah,

00:12:18.124 --> 00:12:21.550
it's like cost
versus flexibility.

00:12:21.550 --> 00:12:23.550
MARTIN GORNER: And so the
last item on this list

00:12:23.550 --> 00:12:25.500
here is bandwidth.

00:12:25.500 --> 00:12:28.960
So it doesn't seem to be that
significant in your case,

00:12:28.960 --> 00:12:31.550
but you told me that you
optimized it quite well.

00:12:31.550 --> 00:12:36.337
What did you do to
achieve this low number?

00:12:36.337 --> 00:12:38.170
JEROME MOUTON: Similar
things here, as well.

00:12:38.170 --> 00:12:40.320
On App Engine, for
Java, for example,

00:12:40.320 --> 00:12:42.980
you are hosted on a
separated container.

00:12:42.980 --> 00:12:47.120
So you have complete access
to the HTTP serving headers.

00:12:47.120 --> 00:12:50.920
There are headers specific
for caching instruction,

00:12:50.920 --> 00:12:53.900
telling the browser
to keep your content

00:12:53.900 --> 00:12:56.450
for a certain amount of time.

00:12:56.450 --> 00:12:59.150
So by playing with these
cache control headers,

00:12:59.150 --> 00:13:03.820
you can leverage there's
a reduction of hit

00:13:03.820 --> 00:13:05.910
on your application,
telling the browser

00:13:05.910 --> 00:13:08.240
to reuse what they
have, so, yes.

00:13:08.240 --> 00:13:09.580
MARTIN GORNER: Right.

00:13:09.580 --> 00:13:13.380
And also, well, of
course, that's the basics.

00:13:13.380 --> 00:13:17.630
But you should be
careful of the resources

00:13:17.630 --> 00:13:21.500
that you use, images,
JavaScript resources, and so

00:13:21.500 --> 00:13:23.380
on-- the static resources.

00:13:23.380 --> 00:13:24.860
JEROME MOUTON: Right.

00:13:24.860 --> 00:13:27.000
Something else I can
mention here as well,

00:13:27.000 --> 00:13:29.070
not applicable for
everybody, but since we

00:13:29.070 --> 00:13:33.400
are using Java for our back-end,
our team is better with Java.

00:13:33.400 --> 00:13:36.200
And we also use Java to
create our Java Scripts

00:13:36.200 --> 00:13:39.350
with a GWT framework.

00:13:39.350 --> 00:13:43.090
So by doing that, it
offer a lot of flexibility

00:13:43.090 --> 00:13:47.410
for testing everything, but
also rely on the GWT compiler

00:13:47.410 --> 00:13:50.420
to create highly
optimized JavaScript

00:13:50.420 --> 00:13:52.270
code for each target.

00:13:52.270 --> 00:13:56.750
So we won't serve the same
JavaScript to a Firefox user

00:13:56.750 --> 00:14:00.750
or to Chrome user, which
means we serve the smallest

00:14:00.750 --> 00:14:06.168
possible amount of data
to each of our customers.

00:14:06.168 --> 00:14:08.570
MARTIN GORNER: All
right, thank you, Jerome.

00:14:08.570 --> 00:14:13.330
And there is one more point that
I would like you to touch upon.

00:14:13.330 --> 00:14:18.380
It's you told me
that you have started

00:14:18.380 --> 00:14:22.960
using App Engine before
it even had a name.

00:14:22.960 --> 00:14:25.840
Can you tell us a
bit more about that?

00:14:25.840 --> 00:14:29.610
JEROME MOUTON: Yeah, back I
think it was very early 2008,

00:14:29.610 --> 00:14:32.750
I was contracting for
Google for some gadget ads

00:14:32.750 --> 00:14:37.410
project, building these very
smart ads which show content,

00:14:37.410 --> 00:14:41.730
contextual to what the person
search, where they are located.

00:14:41.730 --> 00:14:44.100
And as part of doing
this contracting,

00:14:44.100 --> 00:14:47.390
I had early access
to the platform.

00:14:47.390 --> 00:14:51.440
I thought only at the
time, very limited to all

00:14:51.440 --> 00:14:53.560
the functionalities,
but it allowed

00:14:53.560 --> 00:14:57.580
me to see the value of having
a system that scales by itself.

00:14:57.580 --> 00:14:59.700
As you can imagine,
these ad campaigns

00:14:59.700 --> 00:15:04.530
spike very quickly when the
ad companies launch, and then

00:15:04.530 --> 00:15:06.060
scale down quickly,
as well, when

00:15:06.060 --> 00:15:07.590
the ad companies turn down.

00:15:07.590 --> 00:15:10.810
So the value proposition of
App Engine, to go to scale

00:15:10.810 --> 00:15:15.212
and just pay for what you use,
it's huge in this situation.

00:15:15.212 --> 00:15:18.270
MARTIN GORNER: And so
that was back in 2000 and?

00:15:18.270 --> 00:15:19.890
JEROME MOUTON: And
eight, early 2008.

00:15:19.890 --> 00:15:21.181
MARTIN GORNER: 2008, all right.

00:15:21.181 --> 00:15:25.820
So you have been an App
Engine expert since 2008?

00:15:25.820 --> 00:15:27.135
JEROME MOUTON: Yeah. [LAUGHS]

00:15:27.135 --> 00:15:28.510
MARTIN GORNER:
That's impressive.

00:15:28.510 --> 00:15:29.885
JEROME MOUTON:
Thank you, Martin.

00:15:29.885 --> 00:15:34.620
The thing is, when we decided
to launch SnapEngage in 2009,

00:15:34.620 --> 00:15:38.750
so one [INAUDIBLE] year
later, we were already

00:15:38.750 --> 00:15:40.940
convinced that the
platform was what

00:15:40.940 --> 00:15:43.000
we wanted to do
with a small team

00:15:43.000 --> 00:15:46.440
to have the capacity
to grow quickly.

00:15:46.440 --> 00:15:48.010
Let me mention
something else here,

00:15:48.010 --> 00:15:50.560
since we have a bit more time.

00:15:50.560 --> 00:15:52.810
Typically, when you
host application

00:15:52.810 --> 00:15:55.380
on an instance-based
platform, and you

00:15:55.380 --> 00:15:58.410
have to kind of provision
your instances yourself,

00:15:58.410 --> 00:16:01.740
you will grow by chunk.

00:16:01.740 --> 00:16:03.502
Where if you see your
traffic is growing,

00:16:03.502 --> 00:16:05.460
you will have to get a
new cluster of instances

00:16:05.460 --> 00:16:07.360
because of this traffic.

00:16:07.360 --> 00:16:09.830
Scaling down is
difficult at night

00:16:09.830 --> 00:16:11.370
when the traffic goes down.

00:16:11.370 --> 00:16:12.960
You typically don't
turn off instances

00:16:12.960 --> 00:16:15.000
because it's a lot
of work to do that.

00:16:15.000 --> 00:16:18.160
With App Engine, your
growth would be linear

00:16:18.160 --> 00:16:21.030
because you pay
for what you use.

00:16:21.030 --> 00:16:23.460
The platform will add
instances when needed.

00:16:23.460 --> 00:16:25.340
When the traffic
slows down at night,

00:16:25.340 --> 00:16:26.770
they will take down instances.

00:16:26.770 --> 00:16:28.240
And you won't be charged.

00:16:28.240 --> 00:16:30.580
So it's a huge difference
in the bottom line

00:16:30.580 --> 00:16:33.000
compared to traditional hosting.

00:16:33.000 --> 00:16:34.560
MARTIN GORNER: All right.

00:16:34.560 --> 00:16:36.260
Thank you very much, Jerome.

00:16:36.260 --> 00:16:41.160
Thank you for being with us
here at "Root Access Berlin."

00:16:41.160 --> 00:16:45.807
And we'll be seeing you in the
next episode of "Root Access

00:16:45.807 --> 00:16:46.307
Berlin."

00:16:46.307 --> 00:16:46.734
Thank you.

00:16:46.734 --> 00:16:48.109
JEROME MOUTON:
Thank you, Martin.

00:16:48.109 --> 00:16:49.740
Thank you for having me.

