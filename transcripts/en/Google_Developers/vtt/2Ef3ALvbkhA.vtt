WEBVTT
Kind: captions
Language: en

00:00:00.280 --> 00:00:01.140
KEVIN MOORE: You guys
have a good lunch?

00:00:01.140 --> 00:00:01.970
AUDIENCE: Yeah.

00:00:01.970 --> 00:00:04.220
KEVIN MOORE: I love having
the slot right after lunch.

00:00:04.220 --> 00:00:05.280
DAN GROVE: Right after
lunch is perfect.

00:00:05.280 --> 00:00:06.620
KEVIN MOORE: Everyone's
sufficiently caffeinated.

00:00:06.620 --> 00:00:08.840
Hopefully last 30 minutes
has all been coffee.

00:00:08.840 --> 00:00:11.050
Dan, we have three things
to talk about today.

00:00:11.050 --> 00:00:12.160
DAN GROVE: That's right.

00:00:12.160 --> 00:00:13.035
So what's number one?

00:00:13.035 --> 00:00:16.980
Number one, Dart for Web
is here to embrace the web

00:00:16.980 --> 00:00:18.300
rather than replace the web.

00:00:18.300 --> 00:00:19.740
KEVIN MOORE: Right,
despite all the rumors.

00:00:19.740 --> 00:00:20.180
DAN GROVE: Yeah.

00:00:20.180 --> 00:00:22.554
KEVIN MOORE: The second thing
is we've an amazing tooling

00:00:22.554 --> 00:00:26.140
story that we think will make
you amazingly productive.

00:00:26.140 --> 00:00:27.105
And three--

00:00:27.105 --> 00:00:29.050
DAN GROVE: We have a
great framework story.

00:00:29.050 --> 00:00:30.550
It'll make you even
more productive.

00:00:30.550 --> 00:00:33.590
KEVIN MOORE: Yes,
so let's dig in.

00:00:33.590 --> 00:00:34.710
[INTERPOSING VOICES]

00:00:34.710 --> 00:00:35.710
KEVIN MOORE: So perfect.

00:00:35.710 --> 00:00:37.030
You guys already with us?

00:00:37.030 --> 00:00:39.020
All right.

00:00:39.020 --> 00:00:40.820
So let's talk about
where we have this,

00:00:40.820 --> 00:00:42.489
you know, set of
three things going on,

00:00:42.489 --> 00:00:44.530
so we have three things
around embracing the web.

00:00:44.530 --> 00:00:47.160
One is it's JavaScript
all the time.

00:00:47.160 --> 00:00:49.760
The second is embracing
great canonical JavaScript

00:00:49.760 --> 00:00:51.630
and having a great
interop story.

00:00:51.630 --> 00:00:54.800
So Dan, tell us
about JavaScript.

00:00:54.800 --> 00:00:57.480
DAN GROVE: Let's talk a little
bit about how we got here.

00:00:57.480 --> 00:00:58.950
You guys may have
heard that we had

00:00:58.950 --> 00:01:03.760
a slight change in direction
in the last couple of months.

00:01:03.760 --> 00:01:04.840
Right?

00:01:04.840 --> 00:01:07.340
We've been pushing hard
to put the VM in Chrome.

00:01:07.340 --> 00:01:09.690
And while we were
doing that we actually

00:01:09.690 --> 00:01:12.730
noticed that a lot of stuff
had changed on the web,

00:01:12.730 --> 00:01:15.950
so JavaScript engines
have been getting faster.

00:01:15.950 --> 00:01:20.140
Where all kinds of neat features
going into things like ES6.

00:01:20.140 --> 00:01:24.102
And so we sat back and we really
rethought what the approach

00:01:24.102 --> 00:01:24.810
we're taking was.

00:01:24.810 --> 00:01:27.226
And we decided that rather
than targeting the VM in Chrome

00:01:27.226 --> 00:01:29.450
we're going to target,
essentially, all the world's

00:01:29.450 --> 00:01:30.290
modern browsers.

00:01:30.290 --> 00:01:32.776
And actually they're
all amazingly good.

00:01:32.776 --> 00:01:34.150
Things have gotten
so much better

00:01:34.150 --> 00:01:36.305
since we started the project.

00:01:36.305 --> 00:01:36.805
Go ahead.

00:01:36.805 --> 00:01:38.270
KEVIN MOORE: So I
think you know--

00:01:38.270 --> 00:01:39.470
besides being the voice of God.

00:01:39.470 --> 00:01:40.261
Wow that's amazing.

00:01:40.261 --> 00:01:42.210
[LAUGHTER]

00:01:42.210 --> 00:01:45.729
Talk about speaking with
authority right now.

00:01:45.729 --> 00:01:46.770
So yeah, it's two things.

00:01:46.770 --> 00:01:49.860
One is this is the
notion that for web apps,

00:01:49.860 --> 00:01:51.880
we realized that the
cost of a VM in Chrome

00:01:51.880 --> 00:01:52.870
meant a lot of things.

00:01:52.870 --> 00:01:55.110
Our users would have to
deploy two sets of code, Dart

00:01:55.110 --> 00:01:56.040
and JavaScript.

00:01:56.040 --> 00:01:57.706
You have to worry
about interop stories.

00:01:57.706 --> 00:02:00.560
And it meant that our Dart story
for the broad set of browsers,

00:02:00.560 --> 00:02:02.930
which most people would
have to target anyway,

00:02:02.930 --> 00:02:04.620
made a whole set of
things complicated.

00:02:04.620 --> 00:02:06.530
And so we realized it's a
great simplifying assumption

00:02:06.530 --> 00:02:09.280
for what the Dart team provides
and for our customers provide.

00:02:09.280 --> 00:02:10.600
And it lets us do a
lot of great things

00:02:10.600 --> 00:02:11.730
that we're excited
to talk about.

00:02:11.730 --> 00:02:13.570
DAN GROVE: It was
also something-- whoa.

00:02:13.570 --> 00:02:16.070
It was also something
that kind of

00:02:16.070 --> 00:02:18.640
scared our users when they
realized that their development

00:02:18.640 --> 00:02:21.090
path and their deployment
paths were so divergent.

00:02:21.090 --> 00:02:23.159
You know it was--
it really left them

00:02:23.159 --> 00:02:25.700
without the degree of confidence
that we wanted to give them.

00:02:25.700 --> 00:02:26.491
KEVIN MOORE: Right.

00:02:26.491 --> 00:02:28.810
And it lets us do cool things.

00:02:28.810 --> 00:02:31.700
For instance, we'll
still support this notion

00:02:31.700 --> 00:02:37.450
of a tree shaking, globally
analyzed, globally inferred

00:02:37.450 --> 00:02:39.414
output-- so you can give
one small output file.

00:02:39.414 --> 00:02:41.330
But we're also going to
add the option for you

00:02:41.330 --> 00:02:43.195
to generate
canonical JavaScript.

00:02:43.195 --> 00:02:46.550
So the idea is one Dart library
will produce one JavaScript

00:02:46.550 --> 00:02:47.220
file.

00:02:47.220 --> 00:02:49.090
That output JavaScript
will be readable.

00:02:49.090 --> 00:02:51.630
It'll be debuggable--
like basically a one

00:02:51.630 --> 00:02:52.940
to one correspondence.

00:02:52.940 --> 00:02:55.037
And it'll enable really
fast compilation.

00:02:55.037 --> 00:02:57.120
Because each library will
have a canonical output,

00:02:57.120 --> 00:02:59.251
and will not require us
to do global inference,

00:02:59.251 --> 00:03:01.250
that means if you change
a library we don't have

00:03:01.250 --> 00:03:02.600
to recompile your whole app.

00:03:02.600 --> 00:03:04.930
We'll need to recompile
the bits that you changed

00:03:04.930 --> 00:03:06.305
DAN GROVE: Yeah,
so we're talking

00:03:06.305 --> 00:03:07.749
about sub second recompilation.

00:03:07.749 --> 00:03:08.540
KEVIN MOORE: Right.

00:03:08.540 --> 00:03:09.620
And we can leverage
things, hopefully,

00:03:09.620 --> 00:03:11.410
like multi cores
and other things.

00:03:11.410 --> 00:03:13.076
So again for the
deployment you probably

00:03:13.076 --> 00:03:16.070
still want to have a large,
globally inferred tree shaking

00:03:16.070 --> 00:03:16.700
output.

00:03:16.700 --> 00:03:17.820
But during development
we're hoping

00:03:17.820 --> 00:03:19.880
that we can give you a
much faster turn around

00:03:19.880 --> 00:03:22.460
for your code, and give you a
much better debugging story.

00:03:22.460 --> 00:03:24.380
Because obviously just working
on Chrome is not enough.

00:03:24.380 --> 00:03:26.090
We all care about
supporting multiple browsers

00:03:26.090 --> 00:03:28.589
and being sure that Dart works
across all those experiences.

00:03:31.340 --> 00:03:32.290
As an example--

00:03:32.290 --> 00:03:32.956
DAN GROVE: Yeah.

00:03:32.956 --> 00:03:35.382
So let's talk about
the dev compiler, which

00:03:35.382 --> 00:03:37.340
is our current internal
working name that we're

00:03:37.340 --> 00:03:39.400
using for this kind of
lightweight JavaScript

00:03:39.400 --> 00:03:40.950
compilation.

00:03:40.950 --> 00:03:42.780
This code may look
familiar to some of you.

00:03:42.780 --> 00:03:45.790
This is the world's
best sample program.

00:03:45.790 --> 00:03:48.762
It's from Sunflower, which
I know we know and love

00:03:48.762 --> 00:03:49.470
on the Dart team.

00:03:49.470 --> 00:03:52.692
It's a sample that we've shipped
for an awfully long time.

00:03:52.692 --> 00:03:54.150
KEVIN MOORE: So
its canonical Dart.

00:03:54.150 --> 00:03:56.510
And actually we've made this
sample a little bit more

00:03:56.510 --> 00:03:58.370
complicated than we
ship with the editor.

00:03:58.370 --> 00:04:01.010
So we actually use mixins here.

00:04:01.010 --> 00:04:03.330
You see we're using Cascades.

00:04:03.330 --> 00:04:04.736
Canonical Dart code.

00:04:04.736 --> 00:04:06.110
And this is the
exact same output

00:04:06.110 --> 00:04:08.450
with our new dev compiler.

00:04:08.450 --> 00:04:10.780
DAN GROVE: It looks
very similar actually.

00:04:10.780 --> 00:04:12.280
KEVIN MOORE: So the
few things-- one

00:04:12.280 --> 00:04:14.960
is because we're targeting
development time for our dev

00:04:14.960 --> 00:04:17.300
compiler, this means we
can actually assume things

00:04:17.300 --> 00:04:19.070
like the latest ES6 features.

00:04:19.070 --> 00:04:20.570
So what we're
targeting is basically

00:04:20.570 --> 00:04:23.590
things that are not behind flags
in Chrome as our output model.

00:04:23.590 --> 00:04:25.090
So that you end up
with really-- you

00:04:25.090 --> 00:04:28.580
know we use things like class
and extends that exist in ES6.

00:04:28.580 --> 00:04:30.524
And this is very
debuggable JavaScript.

00:04:30.524 --> 00:04:31.190
DAN GROVE: Yeah.

00:04:31.190 --> 00:04:33.840
One way to think about this
is the competition for dev

00:04:33.840 --> 00:04:35.980
compiler today is Dartium.

00:04:35.980 --> 00:04:39.240
And so right now everyone
does their web development

00:04:39.240 --> 00:04:42.784
using-- in Dartium and so that
has the latest Chrome features.

00:04:42.784 --> 00:04:44.700
And we're really imagining
that people would--

00:04:44.700 --> 00:04:46.408
who are using the dev
compiler would just

00:04:46.408 --> 00:04:48.100
develop with tip
of Chrome and use

00:04:48.100 --> 00:04:49.350
the on flagged features there.

00:04:49.350 --> 00:04:49.640
KEVIN MOORE: Right.

00:04:49.640 --> 00:04:51.520
So our plan in the short
term is we'll continue

00:04:51.520 --> 00:04:52.840
to ship Dartium and support it.

00:04:52.840 --> 00:04:54.340
We know it's critical
for you folks.

00:04:54.340 --> 00:04:56.730
And our goal is on the slide
really ramping this up,

00:04:56.730 --> 00:04:59.313
which means we'll have a great
development story and debugging

00:04:59.313 --> 00:05:00.526
story in JavaScript.

00:05:00.526 --> 00:05:02.150
And our goal is to
hit the same refresh

00:05:02.150 --> 00:05:03.691
cycle, the same
productivity you have

00:05:03.691 --> 00:05:05.610
currently in Dartium,
but in a completely

00:05:05.610 --> 00:05:06.599
100% JavaScript model.

00:05:06.599 --> 00:05:07.265
DAN GROVE: Yeah.

00:05:07.265 --> 00:05:11.020
We will not rest until we're
at sub-second refresh with dev

00:05:11.020 --> 00:05:12.300
compiler.

00:05:12.300 --> 00:05:13.730
KEVIN MOORE: And there's people
here working on dev compiler

00:05:13.730 --> 00:05:14.230
now.

00:05:14.230 --> 00:05:15.910
DAN GROVE: Yeah.

00:05:15.910 --> 00:05:17.040
Did VJ actually sit down?

00:05:17.040 --> 00:05:18.510
KEVIN MOORE: No.

00:05:18.510 --> 00:05:20.965
AUDIENCE: [INAUDIBLE].

00:05:20.965 --> 00:05:21.590
DAN GROVE: So--

00:05:21.590 --> 00:05:22.290
KEVIN MOORE: He's
a technical lead.

00:05:22.290 --> 00:05:25.040
We've a number of other folks
working on the dev compiler

00:05:25.040 --> 00:05:25.630
here.

00:05:25.630 --> 00:05:27.300
And again, this is kind
of our proving ground.

00:05:27.300 --> 00:05:29.633
And we hope to roll most of
these features into Dart JS.

00:05:29.633 --> 00:05:32.080
So we'll still have a one--
a single tool chain model

00:05:32.080 --> 00:05:34.538
eventually, right now we have
a separate project, basically

00:05:34.538 --> 00:05:35.330
making [INAUDIBLE].

00:05:35.330 --> 00:05:36.954
But we can do other
things besides just

00:05:36.954 --> 00:05:38.330
generate beautiful JavaScript.

00:05:38.330 --> 00:05:39.000
Right?

00:05:39.000 --> 00:05:40.260
DAN GROVE: Yeah.

00:05:40.260 --> 00:05:43.500
I noticed when we sat down for
the Birds of a Feather session

00:05:43.500 --> 00:05:46.370
that there were a vast number
of questions about JS Interrupt.

00:05:46.370 --> 00:05:48.462
I also noticed that
on the moderator page,

00:05:48.462 --> 00:05:50.420
there were a ton of
questions about JS Interop.

00:05:50.420 --> 00:05:51.220
KEVIN MOORE: It's
like people care

00:05:51.220 --> 00:05:52.970
about using existing JavaScript
code for some reason.

00:05:52.970 --> 00:05:53.636
DAN GROVE: Yeah.

00:05:53.636 --> 00:05:54.750
I mean I wasn't kidding.

00:05:54.750 --> 00:05:57.200
Someone asked there at
the [INAUDIBLE] session

00:05:57.200 --> 00:06:00.100
like how you move
a project piecemeal

00:06:00.100 --> 00:06:01.105
from Dart to JavaScript.

00:06:01.105 --> 00:06:03.271
And I said, well you know
the old style approach was

00:06:03.271 --> 00:06:05.430
that we told you
step one was RM-RF

00:06:05.430 --> 00:06:08.200
and then you could start
typing your Dart project.

00:06:08.200 --> 00:06:12.079
And we found that was actually a
kind of large barrier to entry.

00:06:12.079 --> 00:06:12.870
KEVIN MOORE: Right.

00:06:12.870 --> 00:06:14.507
And so our idea
is basically this.

00:06:14.507 --> 00:06:16.590
And what's great is you
know-- Google has actually

00:06:16.590 --> 00:06:18.510
been on the forefront of type
JavaScript for a long time.

00:06:18.510 --> 00:06:21.150
Actually my gateway drug to Dart
was the Closure Compiler set

00:06:21.150 --> 00:06:23.380
of tools five years ago.

00:06:23.380 --> 00:06:26.890
And so we have a great
set of typed interfaces

00:06:26.890 --> 00:06:29.545
to existing JavaScript libraries
through the closure tools.

00:06:29.545 --> 00:06:31.170
And obviously TypeScript
and definitely

00:06:31.170 --> 00:06:32.086
typed it on [? Org ?].

00:06:32.086 --> 00:06:34.890
Did a bunch of work additionally
to add typed interfaces

00:06:34.890 --> 00:06:36.470
to existing JavaScript tools.

00:06:36.470 --> 00:06:39.635
So our goal here-- again,
this is nothing to show today,

00:06:39.635 --> 00:06:41.760
but I think Jacob will hint
to some of these things

00:06:41.760 --> 00:06:42.630
later tonight.

00:06:42.630 --> 00:06:44.838
Is that you can go from one
of these type interfaces,

00:06:44.838 --> 00:06:47.640
actually create a stub library
that looks and feels like Dart

00:06:47.640 --> 00:06:50.740
code, that the analyzer will
work against to get completion

00:06:50.740 --> 00:06:52.186
and errors and warnings.

00:06:52.186 --> 00:06:53.810
And then use that
and actually generate

00:06:53.810 --> 00:06:56.809
Dart code that interops very
cleanly with JavaScript.

00:06:56.809 --> 00:06:57.600
DAN GROVE: Exactly.

00:06:57.600 --> 00:06:59.600
And then we have a
longer term goal,

00:06:59.600 --> 00:07:02.320
which is we also want to be able
to take a nice annotated Dart

00:07:02.320 --> 00:07:06.620
library and export it in a good
usable way as a JS library.

00:07:06.620 --> 00:07:08.640
So the goal here is
that we want to enable

00:07:08.640 --> 00:07:10.770
component vendors, who are
building stuff in Dart,

00:07:10.770 --> 00:07:12.390
to be able to ship
those components

00:07:12.390 --> 00:07:15.480
as nice, readable JavaScript
without a ton of libraries,

00:07:15.480 --> 00:07:17.110
so that they can
actually vend them out

00:07:17.110 --> 00:07:18.970
to people, whether
those consumers are

00:07:18.970 --> 00:07:20.240
using Dart or JavaScript.

00:07:20.240 --> 00:07:23.090
So we think that will open
the market significantly

00:07:23.090 --> 00:07:24.810
for people building
components in Dart.

00:07:24.810 --> 00:07:26.150
KEVIN MOORE: What's great is
we can be super smart about how

00:07:26.150 --> 00:07:27.316
we generate that JavaScript.

00:07:27.316 --> 00:07:29.530
So things like documentation
tools for JavaScript

00:07:29.530 --> 00:07:31.850
and things-- we can generate
the right JavaScript so

00:07:31.850 --> 00:07:33.270
that documentation just works.

00:07:33.270 --> 00:07:34.360
Your customer
shouldn't have to know

00:07:34.360 --> 00:07:36.300
that you wrote your component
in Dart, except that they

00:07:36.300 --> 00:07:38.550
want to have the great
development experience that you

00:07:38.550 --> 00:07:39.180
had.

00:07:39.180 --> 00:07:39.846
DAN GROVE: Yeah.

00:07:39.846 --> 00:07:42.160
So funnily enough someone
was asking me this morning

00:07:42.160 --> 00:07:44.207
about d3 versus charted.

00:07:44.207 --> 00:07:45.415
I see [INAUDIBLE] back there.

00:07:45.415 --> 00:07:47.510
And it wasn't him, but
it wouldn't surprise me

00:07:47.510 --> 00:07:48.960
if he would ask me about this.

00:07:48.960 --> 00:07:51.200
And what you can see
on the upper left here

00:07:51.200 --> 00:07:54.320
is a use of d3 in JavaScript.

00:07:54.320 --> 00:07:56.630
And it looks sort of OK.

00:07:56.630 --> 00:07:59.910
And if you were using current
Dart JS Interop package

00:07:59.910 --> 00:08:02.530
you would see a vast
amount of boilerplate.

00:08:02.530 --> 00:08:04.310
But what you can see
on the lower right

00:08:04.310 --> 00:08:05.940
is the work of Jacob Richmond.

00:08:05.940 --> 00:08:06.745
Where is he?

00:08:06.745 --> 00:08:08.060
KEVIN MOORE: Is he here?

00:08:08.060 --> 00:08:08.950
DAN GROVE: No,
he's not even here.

00:08:08.950 --> 00:08:10.530
KEVIN MOORE: He's out working
on his lightning talk right now.

00:08:10.530 --> 00:08:11.950
DAN GROVE: Exactly.

00:08:11.950 --> 00:08:14.700
But it's work that he did
recently on JavaScript Interop.

00:08:14.700 --> 00:08:17.380
And the funny thing is
that actually the Dart code

00:08:17.380 --> 00:08:19.930
on the lower right
calling into JavaScript--

00:08:19.930 --> 00:08:22.680
heck it looks nicer than
the JavaScript code does.

00:08:22.680 --> 00:08:23.230
So--

00:08:23.230 --> 00:08:25.340
KEVIN MOORE: In our
completely unbiased opinion.

00:08:25.340 --> 00:08:26.923
DAN GROVE: It actually
does look nice.

00:08:26.923 --> 00:08:30.480
I saw one guy here nodding his
head, so it does look nicer.

00:08:30.480 --> 00:08:32.429
And the good thing is
that this will give you

00:08:32.429 --> 00:08:34.830
a really nice experience
with all the Dart tools.

00:08:34.830 --> 00:08:37.659
So we think we can do this
with very, very low or minimal

00:08:37.659 --> 00:08:39.997
overhead and make it look nice.

00:08:39.997 --> 00:08:41.580
KEVIN MOORE: So let's
embrace the web.

00:08:41.580 --> 00:08:43.621
JavaScript everywhere,
great canonical JavaScript

00:08:43.621 --> 00:08:46.580
for debugging, and a great story
for interop-- both JavaScript

00:08:46.580 --> 00:08:49.801
into Dart, and Dart
into a JavaScript world.

00:08:49.801 --> 00:08:52.050
DAN GROVE: We can actually
do better than that, right?

00:08:52.050 --> 00:08:53.099
KEVIN MOORE: I think so.

00:08:53.099 --> 00:08:54.640
So you know one of
the biggest things

00:08:54.640 --> 00:08:56.300
we pushed with Dart from
the beginning-- not only

00:08:56.300 --> 00:08:58.536
performance, but having
a great tooling story.

00:08:58.536 --> 00:09:00.410
And so we think we have
some great new things

00:09:00.410 --> 00:09:02.743
to show you here, and to show
you some of the directions

00:09:02.743 --> 00:09:03.880
we're going.

00:09:03.880 --> 00:09:05.030
The first is analysis.

00:09:05.030 --> 00:09:07.460
So obviously anyone doing
Dart realizes the benefit

00:09:07.460 --> 00:09:09.800
of having a full
IDE experience--

00:09:09.800 --> 00:09:11.755
hints, warnings, refactorings.

00:09:11.755 --> 00:09:13.630
We've done a bunch of
work over the past year

00:09:13.630 --> 00:09:15.526
to migrate all that
to Dart so that you

00:09:15.526 --> 00:09:17.860
can use it from Sublime,
or Eclipse, or IntelliJ

00:09:17.860 --> 00:09:18.680
as we discussed.

00:09:18.680 --> 00:09:20.480
But we go beyond that, right?

00:09:20.480 --> 00:09:22.355
What's great is we're
actually in the process

00:09:22.355 --> 00:09:25.080
of doing the work now to support
plug ability into our analysis.

00:09:25.080 --> 00:09:28.760
So no longer will we ship-- for
instance, the Angular plug-in

00:09:28.760 --> 00:09:30.907
as a deep part of
our Dart release.

00:09:30.907 --> 00:09:32.490
It'll actually be a
plug-in that ships

00:09:32.490 --> 00:09:34.230
as part of the Angular project.

00:09:34.230 --> 00:09:35.782
And so as Angular
evolves, they can

00:09:35.782 --> 00:09:37.490
evolve their plug-in--
and plug-in hints,

00:09:37.490 --> 00:09:40.787
warnings, refactorings
across JavaScript, HTML.

00:09:40.787 --> 00:09:42.620
So you should be able
to right click in HTML

00:09:42.620 --> 00:09:44.344
and go to definition in Dart.

00:09:44.344 --> 00:09:46.010
We think it'll be a
really smooth story.

00:09:46.010 --> 00:09:46.801
DAN GROVE: Exactly.

00:09:46.801 --> 00:09:48.710
One of the things that
we came to realize

00:09:48.710 --> 00:09:50.370
as part of this
embracing the web

00:09:50.370 --> 00:09:52.330
is that there are a
ton of other assets

00:09:52.330 --> 00:09:54.670
out there that the Dart team
is never going to have time

00:09:54.670 --> 00:09:55.840
to figure out how to analyze.

00:09:55.840 --> 00:09:56.060
Right?

00:09:56.060 --> 00:09:57.070
We're going to have
Angular, and we're

00:09:57.070 --> 00:09:59.130
going to have JavaScript
and TypeScript,

00:09:59.130 --> 00:10:01.870
and things like that we really
want to be able to plug into.

00:10:01.870 --> 00:10:04.240
And so this gives us a nice
framework for doing that

00:10:04.240 --> 00:10:06.407
and lets packages, essentially,
extend the analyzer.

00:10:06.407 --> 00:10:08.781
KEVIN MOORE: So if you're on
our Tooling Team here today,

00:10:08.781 --> 00:10:09.680
raise your hands.

00:10:09.680 --> 00:10:11.370
Who's working on analysis?

00:10:11.370 --> 00:10:12.712
Back in the back corner.

00:10:12.712 --> 00:10:14.420
We'd love to talk to
you more about that.

00:10:14.420 --> 00:10:15.550
We've done a bunch
of refactoring-- even

00:10:15.550 --> 00:10:17.470
over the last week-- to
really kick this off.

00:10:17.470 --> 00:10:19.011
And we're looking
forward to shipping

00:10:19.011 --> 00:10:22.100
this and the start of some
of these things very soon.

00:10:22.100 --> 00:10:23.194
But wait there's more.

00:10:23.194 --> 00:10:23.860
DAN GROVE: Yeah.

00:10:23.860 --> 00:10:26.640
So we talked-- Lars and
Casper talked this morning

00:10:26.640 --> 00:10:28.220
about IntelliJ and WebStorm.

00:10:28.220 --> 00:10:32.160
And you can see the
IntelliJ booth in the back.

00:10:32.160 --> 00:10:34.720
This is really the best of breed
for developing applications

00:10:34.720 --> 00:10:35.700
on the web today.

00:10:35.700 --> 00:10:38.700
And so we're in the process of
sun setting the Dart Editor.

00:10:38.700 --> 00:10:41.320
And IntelliJ is
really a first class

00:10:41.320 --> 00:10:44.500
way of building web applications
and will be fantastic.

00:10:44.500 --> 00:10:46.655
It already has
awesome support as you

00:10:46.655 --> 00:10:49.430
know-- for instance Martin could
tell you from the Angular team,

00:10:49.430 --> 00:10:52.240
they have awesome support for
a wide variety of different web

00:10:52.240 --> 00:10:52.740
assets.

00:10:52.740 --> 00:10:55.110
And so we can plug into that
and we can use the Dart analyzer

00:10:55.110 --> 00:10:55.280
there.

00:10:55.280 --> 00:10:56.510
And it'll be a really good fit.

00:10:56.510 --> 00:10:57.030
KEVIN MOORE: And
what's great is you

00:10:57.030 --> 00:10:59.540
don't want us working on get
integration for the editor.

00:10:59.540 --> 00:11:00.040
Right?

00:11:00.040 --> 00:11:01.460
We've other smart
people doing that work,

00:11:01.460 --> 00:11:02.836
and so we can
leverage that work.

00:11:02.836 --> 00:11:04.668
What's great is I
actually went through this

00:11:04.668 --> 00:11:06.290
where I was editing
a YAML file and I

00:11:06.290 --> 00:11:07.140
didn't have a YAML plug-in.

00:11:07.140 --> 00:11:08.570
It's like-- little
pop up comes--

00:11:08.570 --> 00:11:09.830
do you want to install
the YAML plug-in?

00:11:09.830 --> 00:11:12.520
And I clicked and it restarted
and now IntelliJ supports YAML.

00:11:12.520 --> 00:11:15.246
So we think it's a great
place to better future here.

00:11:15.246 --> 00:11:17.120
And again the way we're
building on top of it

00:11:17.120 --> 00:11:19.780
means that the underlying
infrastructure and the plug-ins

00:11:19.780 --> 00:11:21.897
for things like Angular
or the DDC, those

00:11:21.897 --> 00:11:22.980
are all at the Dart level.

00:11:22.980 --> 00:11:24.710
So regardless if you're
in Sublime, or IntelliJ,

00:11:24.710 --> 00:11:26.711
or Eclipse, you'll still
get all those features.

00:11:26.711 --> 00:11:27.710
DAN GROVE: That's right.

00:11:27.710 --> 00:11:30.130
KEVIN MOORE: And we'll do a
demo of this in just a second.

00:11:30.130 --> 00:11:34.290
But first, what's a tooling
story without great testing?

00:11:34.290 --> 00:11:36.970
Unit test has been kind
of the package for testing

00:11:36.970 --> 00:11:38.874
in the Dart ecosystem
for a very long time.

00:11:38.874 --> 00:11:40.290
Must of the other
tools that exist

00:11:40.290 --> 00:11:42.380
have ended up
building on unit test.

00:11:42.380 --> 00:11:43.880
We realized it got
very little love.

00:11:43.880 --> 00:11:45.046
They kind of got it working.

00:11:45.046 --> 00:11:46.639
And then once it
was kind of working,

00:11:46.639 --> 00:11:47.680
it really wasn't touched.

00:11:47.680 --> 00:11:48.970
DAN GROVE: Years ago.

00:11:48.970 --> 00:11:50.880
It got to the working state.

00:11:50.880 --> 00:11:53.200
KEVIN MOORE: So I gave
Natalie a challenge

00:11:53.200 --> 00:11:54.610
at the end of last year,
beginning of this year,

00:11:54.610 --> 00:11:56.950
to see if she could do something
spectacular in a quarter.

00:11:56.950 --> 00:11:58.100
And she's really delivered.

00:11:58.100 --> 00:11:59.940
So starting with
[? O.12 ?], which

00:11:59.940 --> 00:12:03.490
will be coming out very soon,
Unit Test is going away.

00:12:03.490 --> 00:12:05.269
Now it's just Test.

00:12:05.269 --> 00:12:07.560
The Test package will be the
future of testing in Dart.

00:12:07.560 --> 00:12:10.360
And so instead of talking about
it, I'll show you a quick demo.

00:12:13.024 --> 00:12:14.440
So first we'll
come into IntelliJ.

00:12:14.440 --> 00:12:17.940
I have a test package open here.

00:12:17.940 --> 00:12:19.985
I can do things like
scale the font size.

00:12:23.470 --> 00:12:26.250
And the analyzer
kicks in wonderfully.

00:12:26.250 --> 00:12:29.885
And do Command-7 to see
the structure of my app.

00:12:29.885 --> 00:12:32.010
So you can see that the
API is very similar to what

00:12:32.010 --> 00:12:32.926
you're already use to.

00:12:32.926 --> 00:12:37.310
You have set up, tear
down, test and group.

00:12:37.310 --> 00:12:39.160
The key verbs you've
already used in testing

00:12:39.160 --> 00:12:41.297
are already there.

00:12:41.297 --> 00:12:42.130
It's actually tough.

00:12:42.130 --> 00:12:43.463
I want to go back and show both.

00:12:43.463 --> 00:12:44.060
You know?

00:12:44.060 --> 00:12:44.805
When I was on the
IntelliJ side I

00:12:44.805 --> 00:12:47.559
could do things like Command-B
to go to the definition of map.

00:12:47.559 --> 00:12:49.100
And I can go read
the map definition,

00:12:49.100 --> 00:12:50.830
so it's really easy
to figure things out.

00:12:50.830 --> 00:12:52.496
I can say, who uses
linked map directly?

00:12:52.496 --> 00:12:54.670
And go find usages.

00:12:54.670 --> 00:12:57.100
And get very quick dump
out of all the usages.

00:12:57.100 --> 00:13:00.430
So the IDE experience
is really great.

00:13:00.430 --> 00:13:02.180
And the great thing
about the Test package

00:13:02.180 --> 00:13:04.280
that we're working on
is that it's actually

00:13:04.280 --> 00:13:05.340
designed for toolability.

00:13:05.340 --> 00:13:07.040
So we don't quite have a
story yet around IntelliJ.

00:13:07.040 --> 00:13:09.390
But because it's designed
to actually have a runner

00:13:09.390 --> 00:13:11.480
and reporter and have
these things be pluggable,

00:13:11.480 --> 00:13:13.220
we actually hope
that integration

00:13:13.220 --> 00:13:15.370
with things like IntelliJ
will be forthcoming.

00:13:15.370 --> 00:13:19.000
One of the great things
is an amazing experience

00:13:19.000 --> 00:13:20.820
running tests across platforms.

00:13:20.820 --> 00:13:23.740
So let's run a subset of
tests from the Test package.

00:13:23.740 --> 00:13:25.730
So I'll just pub run tests.

00:13:25.730 --> 00:13:28.160
I got into the test directory.

00:13:28.160 --> 00:13:30.450
You'll see there's a number
of tests here I could run.

00:13:30.450 --> 00:13:32.408
Let's just run all the
tests in that directory.

00:13:34.762 --> 00:13:36.720
And so you see we're
using the pub run command.

00:13:36.720 --> 00:13:41.100
And I can get an output of all
the test that I'm getting run.

00:13:41.100 --> 00:13:42.840
It actually supports
parallelization.

00:13:42.840 --> 00:13:44.620
So it actually uses--
it basically decides

00:13:44.620 --> 00:13:45.940
half the cores in your machine.

00:13:45.940 --> 00:13:50.390
So if I say I wanted to run
-j-- --how to run tests.

00:13:50.390 --> 00:13:51.935
I think I'd go -j8.

00:13:51.935 --> 00:13:55.200
And run across all of my cores
when it runs those tests.

00:13:55.200 --> 00:13:57.980
It'll fan out and do
things really fast.

00:13:57.980 --> 00:13:59.510
But it also has
platform support.

00:14:05.050 --> 00:14:07.615
So not do I run
on the VM-- let's

00:14:07.615 --> 00:14:13.450
say I run it on Content
Shell, or maybe Dartium.

00:14:13.450 --> 00:14:16.630
So 62 tests before-- uh-oh.

00:14:19.850 --> 00:14:21.700
I did something wrong.

00:14:21.700 --> 00:14:22.470
pub run test.

00:14:27.130 --> 00:14:29.420
Oh, the demo gods.

00:14:29.420 --> 00:14:30.790
Here we go.

00:14:30.790 --> 00:14:33.271
You can see in the
background there-- so

00:14:33.271 --> 00:14:34.854
if you watched very
quickly you should

00:14:34.854 --> 00:14:36.480
have seen Dartium pop up.

00:14:36.480 --> 00:14:38.710
But even better I actually
can pass in other browsers

00:14:38.710 --> 00:14:39.570
on my machine.

00:14:39.570 --> 00:14:41.220
This is where I get scared.

00:14:41.220 --> 00:14:47.940
I can do Chrome,
Firefox, Safari.

00:14:47.940 --> 00:14:50.690
And this will actually do the
work to spin up compilation--

00:14:50.690 --> 00:14:52.790
compile those tests only once.

00:14:52.790 --> 00:14:54.730
So it'll compile the
test once and run

00:14:54.730 --> 00:14:59.306
across Safari, Firefox, Chrome,
IE-- If we were on Windows.

00:14:59.306 --> 00:15:01.430
So we're going to compile
those all those tests up.

00:15:01.430 --> 00:15:03.910
And then spin those across
all those browsers and Content

00:15:03.910 --> 00:15:04.870
Shell and BM.

00:15:04.870 --> 00:15:06.620
I'm going to actually
specifying in a test

00:15:06.620 --> 00:15:08.620
and say this test should
only run in browsers,

00:15:08.620 --> 00:15:11.060
or only run in the VM, or
only run in Internet Explorer,

00:15:11.060 --> 00:15:12.650
for instance.

00:15:12.650 --> 00:15:13.982
It's a really compelling model.

00:15:13.982 --> 00:15:16.440
And the thing we're most excited
about with the test runner

00:15:16.440 --> 00:15:17.880
is the idea that it's pluggable.

00:15:17.880 --> 00:15:19.870
So you will be able to write
your own reporters here

00:15:19.870 --> 00:15:21.100
to give more detailed output.

00:15:21.100 --> 00:15:23.710
We talked to someone yesterday
about wanting to export,

00:15:23.710 --> 00:15:25.690
I think, xunit as a format.

00:15:25.690 --> 00:15:26.880
That'll be very easy.

00:15:26.880 --> 00:15:27.680
If you wanted to
have a web based

00:15:27.680 --> 00:15:29.221
runner or something
similar to Karma,

00:15:29.221 --> 00:15:30.810
all those things
will be supportable.

00:15:30.810 --> 00:15:31.710
So we're doing a
lot of work kind

00:15:31.710 --> 00:15:33.668
of on the core infrastructure,
the test runner,

00:15:33.668 --> 00:15:37.090
to make sure we nail kind
of the core infrastructure.

00:15:37.090 --> 00:15:38.870
And once that's
nailed down we're

00:15:38.870 --> 00:15:40.292
looking to expand this out.

00:15:40.292 --> 00:15:42.875
We're already talking to folks
are doing things like Guinness.

00:15:45.296 --> 00:15:46.170
What's the other one?

00:15:46.170 --> 00:15:48.360
WebDriver and a bunch
of other things.

00:15:48.360 --> 00:15:50.284
So I won't wait for all
these tests to finish.

00:15:50.284 --> 00:15:52.700
But you can see we're running
across a number of browsers.

00:15:52.700 --> 00:15:53.616
It works really great.

00:15:56.322 --> 00:15:58.310
[APPLAUSE]

00:15:58.310 --> 00:16:00.310
Yes.

00:16:00.310 --> 00:16:02.970
Testing's exciting.

00:16:02.970 --> 00:16:03.650
So find Natalie.

00:16:03.650 --> 00:16:05.320
She's here today
and tomorrow, too,

00:16:05.320 --> 00:16:07.330
if you have
questions about that.

00:16:07.330 --> 00:16:08.614
So some tooling story.

00:16:08.614 --> 00:16:09.280
DAN GROVE: Yeah.

00:16:09.280 --> 00:16:09.927
So--

00:16:09.927 --> 00:16:11.010
KEVIN MOORE: And finally--

00:16:11.010 --> 00:16:13.830
DAN GROVE: And
wait, there's more.

00:16:13.830 --> 00:16:14.610
Frameworks.

00:16:14.610 --> 00:16:16.822
KEVIN MOORE: We hear people
care about frameworks.

00:16:16.822 --> 00:16:18.530
I personally like to
write all of my code

00:16:18.530 --> 00:16:22.460
by hand just using Dom elements.

00:16:22.460 --> 00:16:23.475
DAN GROVE: Yeah.

00:16:23.475 --> 00:16:24.850
I think the other
part of this is

00:16:24.850 --> 00:16:26.810
that we've managed
to confuse people

00:16:26.810 --> 00:16:28.730
a great deal over
the past few years

00:16:28.730 --> 00:16:31.030
as we've experimented
with the frameworks story

00:16:31.030 --> 00:16:32.614
and tried to come
up with a good plan.

00:16:32.614 --> 00:16:34.488
KEVIN MOORE: Because
Angular's a great story,

00:16:34.488 --> 00:16:35.520
Polymer's a great story.

00:16:35.520 --> 00:16:37.320
We try to be clear about
kind of where to start.

00:16:37.320 --> 00:16:39.410
And we've been back and
forth a little the last year.

00:16:39.410 --> 00:16:40.333
What we're excited
about today is

00:16:40.333 --> 00:16:42.050
to say we kind of have
a more clear path.

00:16:42.050 --> 00:16:44.070
We can really talk to you.

00:16:44.070 --> 00:16:46.270
So first-- it is kind of
the elephant in the room.

00:16:46.270 --> 00:16:46.770
Right?

00:16:46.770 --> 00:16:48.500
Angular's just taking
off like crazy.

00:16:48.500 --> 00:16:49.230
DAN GROVE: Yeah.

00:16:49.230 --> 00:16:50.870
And not just externally.

00:16:50.870 --> 00:16:54.070
Internally-- for instance
all of Google's ads teams--

00:16:54.070 --> 00:16:56.880
which is-- they kind of
matter to the company.

00:16:56.880 --> 00:16:59.170
They're adopting Angular
across the board.

00:16:59.170 --> 00:17:00.920
KEVIN MOORE: And so
despite the confusion,

00:17:00.920 --> 00:17:02.628
we're actually excited
of the Angular 2.0

00:17:02.628 --> 00:17:05.410
story is meant to eliminate
a lot of confusion.

00:17:05.410 --> 00:17:07.260
So at Angular 1
we had Angular JS,

00:17:07.260 --> 00:17:09.736
which is a separate
project from Angular Dart.

00:17:09.736 --> 00:17:11.819
They didn't have consistent
API's that overlapped.

00:17:11.819 --> 00:17:13.550
They kind of iterated
to different models.

00:17:13.550 --> 00:17:13.780
DAN GROVE: Yeah.

00:17:13.780 --> 00:17:15.349
And that would've
made it really hard

00:17:15.349 --> 00:17:17.599
to do things like share
components between them, which

00:17:17.599 --> 00:17:19.960
we certainly want you to be able
to do with our new interops.

00:17:19.960 --> 00:17:21.225
KEVIN MOORE: Or
share documentation.

00:17:21.225 --> 00:17:21.480
DAN GROVE: Yeah.

00:17:21.480 --> 00:17:23.670
KEVIN MOORE: And so despite
some of the rumors and things,

00:17:23.670 --> 00:17:25.420
Angular 2 is designed
from the ground up

00:17:25.420 --> 00:17:28.089
to be a first class experience
in both JavaScript and Dart

00:17:28.089 --> 00:17:29.030
from day one.

00:17:29.030 --> 00:17:30.560
So it's a much cleaner story.

00:17:30.560 --> 00:17:33.750
And actually today we
were honored enough

00:17:33.750 --> 00:17:37.320
to announce that Angular
is now in dev preview.

00:17:37.320 --> 00:17:40.720
So the version number is not--
it doesn't really hint at it.

00:17:40.720 --> 00:17:44.316
It's alpha.21, which is
such an exciting thing.

00:17:44.316 --> 00:17:46.190
Someone said let's do
dev preview as a thing.

00:17:46.190 --> 00:17:46.570
I'm like, no.

00:17:46.570 --> 00:17:47.830
You'll break
semantic versioning,

00:17:47.830 --> 00:17:49.246
and then you can't
release a beta.

00:17:49.246 --> 00:17:51.370
And there's a whole
discussion about it.

00:17:51.370 --> 00:17:55.160
So it is alpha.21, but we
are considering this the dev

00:17:55.160 --> 00:17:55.780
preview.

00:17:55.780 --> 00:17:56.738
DAN GROVE: Not just us.

00:17:56.738 --> 00:17:58.590
The Angular team considers
it a dev preview.

00:17:58.590 --> 00:18:00.230
KEVIN MOORE: Actually
even more importantly they

00:18:00.230 --> 00:18:01.030
consider it the dev preview.

00:18:01.030 --> 00:18:02.960
It's easy for us to get
up here and you know--

00:18:02.960 --> 00:18:04.501
DAN GROVE: What the
dev preview means

00:18:04.501 --> 00:18:07.670
is that this is the point
at which the first really

00:18:07.670 --> 00:18:10.310
large scale project at Google
is starting to move from Angular

00:18:10.310 --> 00:18:11.120
one to Angular two.

00:18:11.120 --> 00:18:13.120
So this is actually a
pretty important milestone

00:18:13.120 --> 00:18:14.480
for the Angular team.

00:18:14.480 --> 00:18:16.020
And we're really
excited about it.

00:18:16.020 --> 00:18:17.050
KEVIN MOORE: And
so before you're

00:18:17.050 --> 00:18:18.966
used to having-- I think
there's AngularJS.org

00:18:18.966 --> 00:18:20.690
and AngularDart.org.

00:18:20.690 --> 00:18:22.450
The truth it's going
to be Angular.IO.

00:18:22.450 --> 00:18:24.200
And if you go there
and click around Docs,

00:18:24.200 --> 00:18:25.000
you'll see a drop down.

00:18:25.000 --> 00:18:26.916
And you can drop down
from JavaScript to Dart,

00:18:26.916 --> 00:18:29.340
and you'll see the same
documentation and examples

00:18:29.340 --> 00:18:30.190
in either language.

00:18:30.190 --> 00:18:32.750
So they're really trying to
offer a great story there

00:18:32.750 --> 00:18:33.480
from day one.

00:18:33.480 --> 00:18:36.310
And obviously, Angular Two
is a package on our pub site,

00:18:36.310 --> 00:18:37.640
so you can go play with it now.

00:18:37.640 --> 00:18:39.515
And then we have folks
in the room right now.

00:18:39.515 --> 00:18:42.054
We have Tim, who's been doing
a lot of work on Angular.

00:18:42.054 --> 00:18:43.720
And [? Jagor's ?]
here as well, I think.

00:18:43.720 --> 00:18:44.553
DAN GROVE: Right there.

00:18:44.553 --> 00:18:45.280
KEVIN MOORE: Yeah.

00:18:45.280 --> 00:18:46.904
Who actually works
on the Angular team.

00:18:46.904 --> 00:18:48.400
DAN GROVE: And Martin.

00:18:48.400 --> 00:18:49.900
KEVIN MOORE: Oh,
and Martin as well.

00:18:49.900 --> 00:18:51.320
This is great.

00:18:51.320 --> 00:18:53.622
So we're super excited
to represent Angular here

00:18:53.622 --> 00:18:54.830
and announce the dev preview.

00:18:54.830 --> 00:18:57.850
And we think it's going to
be a great story for folks

00:18:57.850 --> 00:19:00.420
doing a full application
framework for Dart.

00:19:00.420 --> 00:19:01.850
DAN GROVE: Yep.

00:19:01.850 --> 00:19:02.770
But--

00:19:02.770 --> 00:19:04.410
KEVIN MOORE: What
about Polymer, Dan?

00:19:04.410 --> 00:19:06.910
DAN GROVE: Well, I mean we've
done a ton of work on Polymer.

00:19:06.910 --> 00:19:10.490
And Polymer's actually making
a lot of progress, especially

00:19:10.490 --> 00:19:12.360
as a way of producing
custom elements.

00:19:12.360 --> 00:19:13.520
KEVIN MOORE: Right.

00:19:13.520 --> 00:19:15.770
I think we started talking
about this last year a lot.

00:19:15.770 --> 00:19:17.340
We have a few folks on our team.

00:19:17.340 --> 00:19:18.830
Jake's here.

00:19:18.830 --> 00:19:20.360
Where's Jake?

00:19:20.360 --> 00:19:21.660
BOTH: Way in the back.

00:19:21.660 --> 00:19:22.886
KEVIN MOORE: Yes.

00:19:22.886 --> 00:19:24.260
So and you might
have noticed you

00:19:24.260 --> 00:19:27.100
know that the beta to 0.5
release last year at I/O

00:19:27.100 --> 00:19:27.840
came out.

00:19:27.840 --> 00:19:29.020
And then things have
been kind of quiet.

00:19:29.020 --> 00:19:31.470
And they really did this big
reset in the Polymer world

00:19:31.470 --> 00:19:33.780
with a real big
focus on modularity,

00:19:33.780 --> 00:19:36.510
on kind of pay-for-play, and
on making sure performance is

00:19:36.510 --> 00:19:37.369
spectacular.

00:19:37.369 --> 00:19:38.160
DAN GROVE: Exactly.

00:19:38.160 --> 00:19:40.082
So we're going to keep
following Polymer,

00:19:40.082 --> 00:19:41.790
but one of the things
that we've realized

00:19:41.790 --> 00:19:44.090
is that following a
fast moving project

00:19:44.090 --> 00:19:48.240
fast is not necessarily the most
productive approach for anyone.

00:19:48.240 --> 00:19:50.170
I mean we can
definitely do this,

00:19:50.170 --> 00:19:51.977
but it's not really
what we want to do.

00:19:51.977 --> 00:19:53.560
So what we're doing
right now is we're

00:19:53.560 --> 00:19:55.880
kind of waiting for Polymer
to reach a point of stability.

00:19:55.880 --> 00:19:57.880
And I heard from one of
the Polymer team members

00:19:57.880 --> 00:20:00.190
at lunch that it's
fairly stable right now.

00:20:00.190 --> 00:20:02.730
So perhaps we're
actually getting close.

00:20:02.730 --> 00:20:05.850
But as it stabilizes, then we
will be catching Polymer Dart

00:20:05.850 --> 00:20:07.091
up with Polymer JS.

00:20:07.091 --> 00:20:08.590
And of course one
of the nice things

00:20:08.590 --> 00:20:10.540
is that since it's really
producing custom elements,

00:20:10.540 --> 00:20:13.050
and Angular is built-- Angular
Two is built from the ground up

00:20:13.050 --> 00:20:15.440
to support that-- there should
be nice interoperablility

00:20:15.440 --> 00:20:16.752
between these two frameworks.

00:20:16.752 --> 00:20:18.210
KEVIN MOORE: And
more importantly--

00:20:18.210 --> 00:20:20.620
and this is some of the work
that Jake has been doing--

00:20:20.620 --> 00:20:22.560
is that we've kind of
refactored the Polymer

00:20:22.560 --> 00:20:24.100
package into several things.

00:20:24.100 --> 00:20:25.910
One of those is a web
component package.

00:20:25.910 --> 00:20:27.530
And the idea is that
any web component

00:20:27.530 --> 00:20:29.939
written in JavaScript-- even
if it's using Mozilla's web

00:20:29.939 --> 00:20:32.480
component framework-- we have
a model for how you can consume

00:20:32.480 --> 00:20:34.090
those in a Dart application.

00:20:34.090 --> 00:20:37.200
So we really want that notion
of kind of the mobility

00:20:37.200 --> 00:20:39.000
and the modularity
of web components--

00:20:39.000 --> 00:20:40.880
regardless if they're written
in Dart or JavaScript--

00:20:40.880 --> 00:20:42.330
to play really nice
in your application.

00:20:42.330 --> 00:20:44.230
So that's a focus we've-- it's
actually been really good that

00:20:44.230 --> 00:20:46.080
Polymer has slowed down a
little bit, or gone off,

00:20:46.080 --> 00:20:48.320
because it's given us a chance
to really clean up our package

00:20:48.320 --> 00:20:48.820
story.

00:20:48.820 --> 00:20:52.104
And hopefully give you a
really functional story.

00:20:52.104 --> 00:20:52.770
DAN GROVE: Yeah.

00:20:52.770 --> 00:20:54.905
But this isn't
necessarily-- like we

00:20:54.905 --> 00:20:57.530
don't want this to feel like the
whole Cathedral and the Bazaar

00:20:57.530 --> 00:20:58.420
question.

00:20:58.420 --> 00:21:01.180
As we get JavaScript interop
working, and working really

00:21:01.180 --> 00:21:02.030
nicely, guess what?

00:21:02.030 --> 00:21:04.530
We want you to be able to bring
your own JavaScript library.

00:21:04.530 --> 00:21:06.234
So we don't want
to have you waiting

00:21:06.234 --> 00:21:07.650
for us to tell you
what frameworks

00:21:07.650 --> 00:21:09.100
are available in Dart.

00:21:09.100 --> 00:21:11.630
We want you to be able to make
really good use of JavaScript

00:21:11.630 --> 00:21:14.180
libraries that are
out there without even

00:21:14.180 --> 00:21:15.250
telling us about it.

00:21:15.250 --> 00:21:16.030
KEVIN MOORE: And the great
thing is if they already

00:21:16.030 --> 00:21:18.310
have type interfaces--
again, in Closure Compiler

00:21:18.310 --> 00:21:20.710
or TypeScript-- your
Dart experience should

00:21:20.710 --> 00:21:23.760
be something close to native
when you're using our tools.

00:21:23.760 --> 00:21:26.430
But even better than this
wonderful six letter--

00:21:26.430 --> 00:21:29.110
[LAUGHS]

00:21:29.110 --> 00:21:31.700
Is this my version or are you--
did you come up with this?

00:21:31.700 --> 00:21:32.240
DAN GROVE: I came up with that.

00:21:32.240 --> 00:21:33.710
KEVIN MOORE: This
is the new YOLO.

00:21:33.710 --> 00:21:35.750
It's too big for a license
plate, unfortunately.

00:21:35.750 --> 00:21:36.750
DAN GROVE: I don't know.

00:21:36.750 --> 00:21:39.160
California, you might be able to
get away with it, pull it off.

00:21:39.160 --> 00:21:40.870
KEVIN MOORE: But obviously
the goal we're getting to--

00:21:40.870 --> 00:21:42.490
and this is stuff we're
just starting to work on,

00:21:42.490 --> 00:21:44.573
but obviously as the dev
compiler and other things

00:21:44.573 --> 00:21:46.730
come along, this is really
the place we want to go.

00:21:46.730 --> 00:21:49.100
Where as you should be able
to annotate your Dart code,

00:21:49.100 --> 00:21:50.810
and say, I want to
ship this Dart code

00:21:50.810 --> 00:21:52.170
as a JavaScript library.

00:21:52.170 --> 00:21:53.840
And again, your
customers are people

00:21:53.840 --> 00:21:54.924
that consume that library.

00:21:54.924 --> 00:21:56.798
Don't need to know that
it's from Dart, other

00:21:56.798 --> 00:21:58.840
than it has really high
quality and few bugs.

00:21:58.840 --> 00:21:59.116
DAN GROVE: Yeah.

00:21:59.116 --> 00:21:59.210
Exactly.

00:21:59.210 --> 00:22:00.168
Other than it's better.

00:22:00.168 --> 00:22:02.370
KEVIN MOORE: Other
than it's better, yeah.

00:22:02.370 --> 00:22:03.370
So stay tuned for that.

00:22:03.370 --> 00:22:04.490
DAN GROVE: Yeah.

00:22:04.490 --> 00:22:06.900
KEVIN MOORE: So that's
our great framework story.

00:22:06.900 --> 00:22:08.430
Angular a great
end-to-end framework

00:22:08.430 --> 00:22:10.221
for building large
applications with things

00:22:10.221 --> 00:22:11.880
like dependency
injection and routing.

00:22:11.880 --> 00:22:14.100
Or tracking Polymer tightly
to make sure that once

00:22:14.100 --> 00:22:17.300
they're 1/0, we can ramp up and
support Polymer folks really

00:22:17.300 --> 00:22:17.910
well.

00:22:17.910 --> 00:22:19.700
And obviously since everything's
built on web components,

00:22:19.700 --> 00:22:21.510
we think those things
will interop really well.

00:22:21.510 --> 00:22:23.468
And keep an eye on us
for our JS interop story.

00:22:23.468 --> 00:22:25.100
We think that'll
be really powerful.

00:22:25.100 --> 00:22:26.120
DAN GROVE: Yep.

00:22:26.120 --> 00:22:26.620
Yes.

00:22:26.620 --> 00:22:29.320
So there's a bunch of stuff
that we want you to do today.

00:22:29.320 --> 00:22:31.210
First of all, we really
do want you to start

00:22:31.210 --> 00:22:32.376
using WebStorm and IntelliJ.

00:22:32.376 --> 00:22:35.060
We think that's going to
be a great story for web

00:22:35.060 --> 00:22:36.170
development in Dart.

00:22:36.170 --> 00:22:37.440
KEVIN MOORE: And I've been
using it every day now,

00:22:37.440 --> 00:22:38.773
and the people on our team have.

00:22:38.773 --> 00:22:39.760
And we really like it.

00:22:39.760 --> 00:22:41.480
File issues-- let us know
if you have problems.

00:22:41.480 --> 00:22:43.200
We think it's going
to be really great.

00:22:43.200 --> 00:22:45.840
The test package-- it
leases in RC today.

00:22:45.840 --> 00:22:48.459
So if you go to the pub
site just type in Test.

00:22:48.459 --> 00:22:50.000
We want you to start
playing with it.

00:22:50.000 --> 00:22:52.840
If you have test--
our code already--

00:22:52.840 --> 00:22:55.240
already using unit
test, make sure

00:22:55.240 --> 00:22:57.887
that you opt into it
intelligently as you migrate.

00:22:57.887 --> 00:22:59.720
But you'll see that the
features work great.

00:22:59.720 --> 00:23:01.050
And it's all on pub.

00:23:01.050 --> 00:23:02.870
All on GitHub, excuse me.

00:23:02.870 --> 00:23:06.295
So we want your bug fixes
and any issues you find.

00:23:06.295 --> 00:23:06.920
DAN GROVE: Yep.

00:23:06.920 --> 00:23:08.100
KEVIN MOORE: And then
obviously Angular Two,

00:23:08.100 --> 00:23:09.599
you can put with
that today as well.

00:23:09.599 --> 00:23:12.514
And with alpha.21, we're
now in a dev preview.

00:23:12.514 --> 00:23:13.180
DAN GROVE: Yeah.

00:23:13.180 --> 00:23:15.460
Today's a great day to use
it, because you can go bug

00:23:15.460 --> 00:23:16.920
[? Jagor ?] if it doesn't work.

00:23:16.920 --> 00:23:18.872
So it'll be perfect.

00:23:18.872 --> 00:23:21.080
And then there's a bunch of
stuff that's coming soon.

00:23:21.080 --> 00:23:23.080
So the Pluggable
Analyzer-- tons of CLs

00:23:23.080 --> 00:23:26.300
have been going in to
making this work recently.

00:23:26.300 --> 00:23:27.570
JS Interop's similar.

00:23:27.570 --> 00:23:29.220
I guess all this
stuff is red hot.

00:23:29.220 --> 00:23:30.730
Like Pluggable,
Analyzer's red hot.

00:23:30.730 --> 00:23:32.439
JS Interop is
definitely red hot.

00:23:32.439 --> 00:23:34.230
Lots of changes have
been coming in lately,

00:23:34.230 --> 00:23:36.286
and dev compiler's
absolutely like blazing hot.

00:23:36.286 --> 00:23:37.910
There's a ton of
stuff happening there.

00:23:37.910 --> 00:23:39.451
You can track that
project on GitHub.

00:23:39.451 --> 00:23:42.040
It's under dev compiler
on the dartlang.org.

00:23:42.040 --> 00:23:43.780
And you can see some
of the output that's

00:23:43.780 --> 00:23:44.530
coming from there.

00:23:44.530 --> 00:23:46.060
And Jacob will have
a talk this evening

00:23:46.060 --> 00:23:47.080
to talk more about that.

00:23:47.080 --> 00:23:47.746
DAN GROVE: Yeah.

00:23:47.746 --> 00:23:48.889
Exactly.

00:23:48.889 --> 00:23:50.180
KEVIN MOORE: Thank you so much.

00:23:50.180 --> 00:23:50.495
DAN GROVE: Yeah.

00:23:50.495 --> 00:23:50.995
Thanks.

00:23:50.995 --> 00:23:53.804
[APPLAUSE]

00:23:56.494 --> 00:23:58.910
SPEAKER 1: You guys have about
five minutes for questions,

00:23:58.910 --> 00:24:00.076
if you want to do questions.

00:24:00.076 --> 00:24:01.397
KEVIN MOORE: That's perfect.

00:24:01.397 --> 00:24:02.480
DAN GROVE: Right in front.

00:24:02.480 --> 00:24:04.021
AUDIENCE: Just a
real quick question.

00:24:04.021 --> 00:24:06.400
When we have comments or
feedback on use in WebStorm,

00:24:06.400 --> 00:24:08.360
do you want us to file
through [INAUDIBLE]?

00:24:08.360 --> 00:24:09.961
Or do you have a specific place
where you want those to go?

00:24:09.961 --> 00:24:11.036
SPEAKER 1: You're close
enough that I can just

00:24:11.036 --> 00:24:12.270
give you the mic.

00:24:12.270 --> 00:24:14.277
AUDIENCE: When we have
issue with WebStorm,

00:24:14.277 --> 00:24:15.860
where would you like
us to file those?

00:24:15.860 --> 00:24:17.230
Just straight through
[INAUDIBLE] or do you have

00:24:17.230 --> 00:24:17.850
a different place--

00:24:17.850 --> 00:24:18.645
DAN GROVE: Yeah,
in general those

00:24:18.645 --> 00:24:20.070
should go into the [INAUDIBLE].

00:24:20.070 --> 00:24:21.320
AUDIENCE: And the [INAUDIBLE]?

00:24:21.320 --> 00:24:22.361
DAN GROVE: Yeah, exactly.

00:24:22.361 --> 00:24:23.486
AUDIENCE: Great, thank you.

00:24:23.486 --> 00:24:25.027
KEVIN MOORE: And
then sometimes those

00:24:25.027 --> 00:24:27.210
end up being issues with
our analyzer, for instance,

00:24:27.210 --> 00:24:28.460
and we're good about
shuffling those around.

00:24:28.460 --> 00:24:28.873
DAN GROVE: Yep.

00:24:28.873 --> 00:24:29.147
AUDIENCE: OK.

00:24:29.147 --> 00:24:29.286
Great.

00:24:29.286 --> 00:24:29.700
Thank you.

00:24:29.700 --> 00:24:30.450
KEVIN MOORE: Make
sure you tag it.

00:24:30.450 --> 00:24:31.380
There's actually a way to tag.

00:24:31.380 --> 00:24:33.384
And you can tag it as a
Dart issue, if you can,

00:24:33.384 --> 00:24:34.550
and that helps us find them.

00:24:34.550 --> 00:24:35.022
Yep.

00:24:35.022 --> 00:24:35.376
AUDIENCE: Thank you.

00:24:35.376 --> 00:24:36.440
Just tag the Dart?

00:24:36.440 --> 00:24:36.710
KEVIN MOORE: Yep.

00:24:36.710 --> 00:24:37.251
AUDIENCE: OK.

00:24:37.251 --> 00:24:38.290
Great.

00:24:38.290 --> 00:24:40.435
SPEAKER 1: Anyone else?

00:24:40.435 --> 00:24:41.680
Oh, you're close too.

00:24:41.680 --> 00:24:42.900
Oh, that's awesome.

00:24:42.900 --> 00:24:45.320
AUDIENCE: So with
all the JS intro work

00:24:45.320 --> 00:24:47.601
that's going to
happen, would it be

00:24:47.601 --> 00:24:49.600
possible-- I don't know
if it's already possible

00:24:49.600 --> 00:24:51.920
or not but-- would it be
possible to use something

00:24:51.920 --> 00:24:54.547
like an NPM module in
a Dart application?

00:24:54.547 --> 00:24:55.130
DAN GROVE: Ha.

00:24:55.130 --> 00:24:56.760
You know we've definitely
talked about it.

00:24:56.760 --> 00:24:57.830
It's not high on
the list right now.

00:24:57.830 --> 00:24:59.520
But it is-- that's
not the first time

00:24:59.520 --> 00:25:00.997
that question has been asked.

00:25:00.997 --> 00:25:02.330
SPEAKER 1: I love that question.

00:25:02.330 --> 00:25:04.200
DAN GROVE: Maybe you were
the first person to ask it.

00:25:04.200 --> 00:25:06.370
KEVIN MOORE: So there
interesting thing with NPM,

00:25:06.370 --> 00:25:09.210
is that we have an interop
story around the Dom right now.

00:25:09.210 --> 00:25:11.240
But Dart I/O and
our BM story, we

00:25:11.240 --> 00:25:13.610
have our own set
of I/O primitives.

00:25:13.610 --> 00:25:16.130
And we don't have a support
for how you compile all of that

00:25:16.130 --> 00:25:18.510
into things that are
analogous in NPM.

00:25:18.510 --> 00:25:20.820
In theory, if we did you
know a clever thing--

00:25:20.820 --> 00:25:23.236
I mean I've actually done this
with a number of benchmarks

00:25:23.236 --> 00:25:25.207
where if all you do is
print in a benchmark,

00:25:25.207 --> 00:25:26.790
I've been able to
Dart to JS out and--

00:25:26.790 --> 00:25:27.965
[INTERPOSING VOICES]

00:25:27.965 --> 00:25:29.340
DAN GROVE: Dart
to JS [INAUDIBLE]

00:25:29.340 --> 00:25:32.470
has always supported producing
[INAUDIBLE] compatible outputs,

00:25:32.470 --> 00:25:33.999
so it's really a
bindings question.

00:25:33.999 --> 00:25:35.790
KEVIN MOORE: So if you
write Dart code that

00:25:35.790 --> 00:25:37.900
bounds to existing
node APIs-- FS

00:25:37.900 --> 00:25:39.930
or whatever else--
those will just work.

00:25:39.930 --> 00:25:42.180
DAN GROVE: This would be an
awesome community project.

00:25:42.180 --> 00:25:44.346
KEVIN MOORE: Although seeing
Observatory and things,

00:25:44.346 --> 00:25:46.996
you know I might push you more
to look at the Dart VM story.

00:25:46.996 --> 00:25:48.620
We think it's pretty
solid, but we want

00:25:48.620 --> 00:25:49.910
to be able to go either place.

00:25:49.910 --> 00:25:50.934
DAN GROVE: Yep.

00:25:50.934 --> 00:25:51.850
AUDIENCE: Anyone else?

00:25:51.850 --> 00:25:53.766
Preferably someone in
the first couple of rows

00:25:53.766 --> 00:25:56.325
but farther back is fine, too.

00:25:56.325 --> 00:25:58.700
KEVIN MOORE: What's great,
actually, is Steven's up next.

00:25:58.700 --> 00:26:00.450
And he's going to talk
a lot about the Dart

00:26:00.450 --> 00:26:02.590
to JS-- actually getting
really deep on Dart to JS.

00:26:02.590 --> 00:26:03.820
And the interesting--

00:26:03.820 --> 00:26:05.240
MALE SPEAKER: Don't give him too
much intro now because he's not

00:26:05.240 --> 00:26:07.120
setting up his stuff
yet, and you're--

00:26:07.120 --> 00:26:07.730
KEVIN MOORE: I'm
building him up.

00:26:07.730 --> 00:26:10.269
MALE SPEAKER: But it is
going to be very interesting.

00:26:10.269 --> 00:26:11.060
KEVIN MOORE: Right.

00:26:11.060 --> 00:26:12.059
So thanks for your time.

00:26:12.059 --> 00:26:13.410
Find us later tonight.

00:26:13.410 --> 00:26:16.160
[APPLAUSE]

