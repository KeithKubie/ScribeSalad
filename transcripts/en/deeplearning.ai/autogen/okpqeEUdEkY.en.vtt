WEBVTT
Kind: captions
Language: en

00:00:00.979 --> 00:00:03.110
we've talked about how vectorization

00:00:03.110 --> 00:00:03.120
we've talked about how vectorization
 

00:00:03.120 --> 00:00:04.610
we've talked about how vectorization
lets you speed up your code

00:00:04.610 --> 00:00:04.620
lets you speed up your code
 

00:00:04.620 --> 00:00:06.889
lets you speed up your code
significantly in this video we'll talk

00:00:06.889 --> 00:00:06.899
significantly in this video we'll talk
 

00:00:06.899 --> 00:00:08.240
significantly in this video we'll talk
about how you can vectorize your

00:00:08.240 --> 00:00:08.250
about how you can vectorize your
 

00:00:08.250 --> 00:00:10.820
about how you can vectorize your
implementation of logistic regression so

00:00:10.820 --> 00:00:10.830
implementation of logistic regression so
 

00:00:10.830 --> 00:00:12.620
implementation of logistic regression so
they can process the entire training set

00:00:12.620 --> 00:00:12.630
they can process the entire training set
 

00:00:12.630 --> 00:00:15.110
they can process the entire training set
that is implemented a single iteration

00:00:15.110 --> 00:00:15.120
that is implemented a single iteration
 

00:00:15.120 --> 00:00:16.910
that is implemented a single iteration
of gradient descent with respect to an

00:00:16.910 --> 00:00:16.920
of gradient descent with respect to an
 

00:00:16.920 --> 00:00:19.460
of gradient descent with respect to an
entire training set without using even a

00:00:19.460 --> 00:00:19.470
entire training set without using even a
 

00:00:19.470 --> 00:00:22.820
entire training set without using even a
single explicit for you I'm super

00:00:22.820 --> 00:00:22.830
single explicit for you I'm super
 

00:00:22.830 --> 00:00:24.500
single explicit for you I'm super
excited of this technique and when we

00:00:24.500 --> 00:00:24.510
excited of this technique and when we
 

00:00:24.510 --> 00:00:26.630
excited of this technique and when we
talk about neural network later without

00:00:26.630 --> 00:00:26.640
talk about neural network later without
 

00:00:26.640 --> 00:00:29.320
talk about neural network later without
using even a single exclusive full loop

00:00:29.320 --> 00:00:29.330
using even a single exclusive full loop
 

00:00:29.330 --> 00:00:32.389
using even a single exclusive full loop
let's get started let's first examine

00:00:32.389 --> 00:00:32.399
let's get started let's first examine
 

00:00:32.399 --> 00:00:35.120
let's get started let's first examine
the forward propagation step of logistic

00:00:35.120 --> 00:00:35.130
the forward propagation step of logistic
 

00:00:35.130 --> 00:00:37.010
the forward propagation step of logistic
regression so if you have M training

00:00:37.010 --> 00:00:37.020
regression so if you have M training
 

00:00:37.020 --> 00:00:39.619
regression so if you have M training
examples then to make a prediction on

00:00:39.619 --> 00:00:39.629
examples then to make a prediction on
 

00:00:39.629 --> 00:00:41.360
examples then to make a prediction on
the first example you need to compute

00:00:41.360 --> 00:00:41.370
the first example you need to compute
 

00:00:41.370 --> 00:00:44.630
the first example you need to compute
that and compute Z on using this

00:00:44.630 --> 00:00:44.640
that and compute Z on using this
 

00:00:44.640 --> 00:00:46.310
that and compute Z on using this
familiar formula then compute the

00:00:46.310 --> 00:00:46.320
familiar formula then compute the
 

00:00:46.320 --> 00:00:48.560
familiar formula then compute the
activation to compute y hat in the first

00:00:48.560 --> 00:00:48.570
activation to compute y hat in the first
 

00:00:48.570 --> 00:00:51.319
activation to compute y hat in the first
example then to make a prediction on the

00:00:51.319 --> 00:00:51.329
example then to make a prediction on the
 

00:00:51.329 --> 00:00:53.180
example then to make a prediction on the
second training example you need to

00:00:53.180 --> 00:00:53.190
second training example you need to
 

00:00:53.190 --> 00:00:55.700
second training example you need to
compute that then to make a prediction

00:00:55.700 --> 00:00:55.710
compute that then to make a prediction
 

00:00:55.710 --> 00:00:57.619
compute that then to make a prediction
on the third example you need to compute

00:00:57.619 --> 00:00:57.629
on the third example you need to compute
 

00:00:57.629 --> 00:01:00.049
on the third example you need to compute
that and so on and you might need to do

00:01:00.049 --> 00:01:00.059
that and so on and you might need to do
 

00:01:00.059 --> 00:01:03.009
that and so on and you might need to do
this M times of your M training examples

00:01:03.009 --> 00:01:03.019
this M times of your M training examples
 

00:01:03.019 --> 00:01:06.620
this M times of your M training examples
so it turns out that in order to carry

00:01:06.620 --> 00:01:06.630
so it turns out that in order to carry
 

00:01:06.630 --> 00:01:08.780
so it turns out that in order to carry
out the forward propagation step that is

00:01:08.780 --> 00:01:08.790
out the forward propagation step that is
 

00:01:08.790 --> 00:01:11.780
out the forward propagation step that is
to compute these predictions on all M

00:01:11.780 --> 00:01:11.790
to compute these predictions on all M
 

00:01:11.790 --> 00:01:14.420
to compute these predictions on all M
training examples there is a way to do

00:01:14.420 --> 00:01:14.430
training examples there is a way to do
 

00:01:14.430 --> 00:01:17.469
training examples there is a way to do
so without needing an explicit for loop

00:01:17.469 --> 00:01:17.479
so without needing an explicit for loop
 

00:01:17.479 --> 00:01:20.630
so without needing an explicit for loop
let's see how you can do it first

00:01:20.630 --> 00:01:20.640
let's see how you can do it first
 

00:01:20.640 --> 00:01:22.789
let's see how you can do it first
remember that we define the matrix

00:01:22.789 --> 00:01:22.799
remember that we define the matrix
 

00:01:22.799 --> 00:01:26.870
remember that we define the matrix
capital X to be your training inputs you

00:01:26.870 --> 00:01:26.880
capital X to be your training inputs you
 

00:01:26.880 --> 00:01:29.359
capital X to be your training inputs you
will stack together in different columns

00:01:29.359 --> 00:01:29.369
will stack together in different columns
 

00:01:29.369 --> 00:01:33.429
will stack together in different columns
like this all right so this is a matrix

00:01:33.429 --> 00:01:33.439
like this all right so this is a matrix
 

00:01:33.439 --> 00:01:39.080
like this all right so this is a matrix
that is a n X by M matrix so I'm writing

00:01:39.080 --> 00:01:39.090
that is a n X by M matrix so I'm writing
 

00:01:39.090 --> 00:01:42.230
that is a n X by M matrix so I'm writing
this as a Python numpy shape but this

00:01:42.230 --> 00:01:42.240
this as a Python numpy shape but this
 

00:01:42.240 --> 00:01:46.219
this as a Python numpy shape but this
just means that you know X is a and X by

00:01:46.219 --> 00:01:46.229
just means that you know X is a and X by
 

00:01:46.229 --> 00:01:51.050
just means that you know X is a and X by
M dimensional matrix now the first thing

00:01:51.050 --> 00:01:51.060
M dimensional matrix now the first thing
 

00:01:51.060 --> 00:01:53.660
M dimensional matrix now the first thing
I want to do is show how you can compute

00:01:53.660 --> 00:01:53.670
I want to do is show how you can compute
 

00:01:53.670 --> 00:01:58.580
I want to do is show how you can compute
Z 1 Z 2 Z 3 and so on all in one step is

00:01:58.580 --> 00:01:58.590
Z 1 Z 2 Z 3 and so on all in one step is
 

00:01:58.590 --> 00:02:02.090
Z 1 Z 2 Z 3 and so on all in one step is
act with one line of code so I'm going

00:02:02.090 --> 00:02:02.100
act with one line of code so I'm going
 

00:02:02.100 --> 00:02:08.499
act with one line of code so I'm going
to construct a 1 by M

00:02:08.499 --> 00:02:08.509
to construct a 1 by M
 

00:02:08.509 --> 00:02:11.740
to construct a 1 by M
matrix is really a row vector where I'm

00:02:11.740 --> 00:02:11.750
matrix is really a row vector where I'm
 

00:02:11.750 --> 00:02:15.880
matrix is really a row vector where I'm
going to compute Z 1 Z 2 and so on down

00:02:15.880 --> 00:02:15.890
going to compute Z 1 Z 2 and so on down
 

00:02:15.890 --> 00:02:19.809
going to compute Z 1 Z 2 and so on down
to ZM o at the same time it turns out

00:02:19.809 --> 00:02:19.819
to ZM o at the same time it turns out
 

00:02:19.819 --> 00:02:22.869
to ZM o at the same time it turns out
that this can be expressed as W

00:02:22.869 --> 00:02:22.879
that this can be expressed as W
 

00:02:22.879 --> 00:02:26.830
that this can be expressed as W
transpose the capital matrix X plus an

00:02:26.830 --> 00:02:26.840
transpose the capital matrix X plus an
 

00:02:26.840 --> 00:02:32.440
transpose the capital matrix X plus an
in this vector B B and so on beware this

00:02:32.440 --> 00:02:32.450
in this vector B B and so on beware this
 

00:02:32.450 --> 00:02:36.809
in this vector B B and so on beware this
thing this bbbbb thing is a 1 by m

00:02:36.809 --> 00:02:36.819
thing this bbbbb thing is a 1 by m
 

00:02:36.819 --> 00:02:41.670
thing this bbbbb thing is a 1 by m
vector or 1 by m matrix or that is is a

00:02:41.670 --> 00:02:41.680
vector or 1 by m matrix or that is is a
 

00:02:41.680 --> 00:02:48.099
vector or 1 by m matrix or that is is a
M dimensional row vector so developable

00:02:48.099 --> 00:02:48.109
M dimensional row vector so developable
 

00:02:48.109 --> 00:02:50.680
M dimensional row vector so developable
you are with matrix multiplication you

00:02:50.680 --> 00:02:50.690
you are with matrix multiplication you
 

00:02:50.690 --> 00:02:57.460
you are with matrix multiplication you
might see that w transpose x 1 x 2 and

00:02:57.460 --> 00:02:57.470
might see that w transpose x 1 x 2 and
 

00:02:57.470 --> 00:03:04.149
might see that w transpose x 1 x 2 and
so on through XM that W transpose would

00:03:04.149 --> 00:03:04.159
so on through XM that W transpose would
 

00:03:04.159 --> 00:03:06.339
so on through XM that W transpose would
then be a row vector right so this you

00:03:06.339 --> 00:03:06.349
then be a row vector right so this you
 

00:03:06.349 --> 00:03:08.699
then be a row vector right so this you
know W transpose will be a row vector

00:03:08.699 --> 00:03:08.709
know W transpose will be a row vector
 

00:03:08.709 --> 00:03:13.509
know W transpose will be a row vector
like that and so this first term will

00:03:13.509 --> 00:03:13.519
like that and so this first term will
 

00:03:13.519 --> 00:03:19.360
like that and so this first term will
evaluate to W transpose X 1 W transpose

00:03:19.360 --> 00:03:19.370
evaluate to W transpose X 1 W transpose
 

00:03:19.370 --> 00:03:25.119
evaluate to W transpose X 1 W transpose
X 2 and so on dot dot dot W transpose X

00:03:25.119 --> 00:03:25.129
X 2 and so on dot dot dot W transpose X
 

00:03:25.129 --> 00:03:29.439
X 2 and so on dot dot dot W transpose X
M and then when you add this second term

00:03:29.439 --> 00:03:29.449
M and then when you add this second term
 

00:03:29.449 --> 00:03:32.710
M and then when you add this second term
bbbb and so on you end up adding B to

00:03:32.710 --> 00:03:32.720
bbbb and so on you end up adding B to
 

00:03:32.720 --> 00:03:35.199
bbbb and so on you end up adding B to
each element so you end up with another

00:03:35.199 --> 00:03:35.209
each element so you end up with another
 

00:03:35.209 --> 00:03:38.470
each element so you end up with another
1 by n vector where that's the first

00:03:38.470 --> 00:03:38.480
1 by n vector where that's the first
 

00:03:38.480 --> 00:03:40.270
1 by n vector where that's the first
element that's the second element and so

00:03:40.270 --> 00:03:40.280
element that's the second element and so
 

00:03:40.280 --> 00:03:41.379
element that's the second element and so
on and that's the end

00:03:41.379 --> 00:03:41.389
on and that's the end
 

00:03:41.389 --> 00:03:43.960
on and that's the end
element and if you refer to the

00:03:43.960 --> 00:03:43.970
element and if you refer to the
 

00:03:43.970 --> 00:03:47.939
element and if you refer to the
definitions above this first element is

00:03:47.939 --> 00:03:47.949
definitions above this first element is
 

00:03:47.949 --> 00:03:51.819
definitions above this first element is
exactly the definition of Z 1 the second

00:03:51.819 --> 00:03:51.829
exactly the definition of Z 1 the second
 

00:03:51.829 --> 00:03:54.759
exactly the definition of Z 1 the second
element is exactly the direction of Z 2

00:03:54.759 --> 00:03:54.769
element is exactly the direction of Z 2
 

00:03:54.769 --> 00:03:59.379
element is exactly the direction of Z 2
and so on so just as X was what you

00:03:59.379 --> 00:03:59.389
and so on so just as X was what you
 

00:03:59.389 --> 00:04:01.960
and so on so just as X was what you
obtained when you took your training

00:04:01.960 --> 00:04:01.970
obtained when you took your training
 

00:04:01.970 --> 00:04:04.360
obtained when you took your training
examples and stack them next to each

00:04:04.360 --> 00:04:04.370
examples and stack them next to each
 

00:04:04.370 --> 00:04:04.990
examples and stack them next to each
other

00:04:04.990 --> 00:04:05.000
other
 

00:04:05.000 --> 00:04:07.809
other
stack them horizontally I'm going to

00:04:07.809 --> 00:04:07.819
stack them horizontally I'm going to
 

00:04:07.819 --> 00:04:11.319
stack them horizontally I'm going to
define capital Z to be this where you

00:04:11.319 --> 00:04:11.329
define capital Z to be this where you
 

00:04:11.329 --> 00:04:13.780
define capital Z to be this where you
take the little lowercase Z's and stack

00:04:13.780 --> 00:04:13.790
take the little lowercase Z's and stack
 

00:04:13.790 --> 00:04:17.379
take the little lowercase Z's and stack
them horizontally okay so we stack the

00:04:17.379 --> 00:04:17.389
them horizontally okay so we stack the
 

00:04:17.389 --> 00:04:19.420
them horizontally okay so we stack the
lowercase XS corresponding to different

00:04:19.420 --> 00:04:19.430
lowercase XS corresponding to different
 

00:04:19.430 --> 00:04:22.430
lowercase XS corresponding to different
training examples horizontally

00:04:22.430 --> 00:04:22.440
training examples horizontally
 

00:04:22.440 --> 00:04:24.740
training examples horizontally
this variable capital X in the same way

00:04:24.740 --> 00:04:24.750
this variable capital X in the same way
 

00:04:24.750 --> 00:04:26.330
this variable capital X in the same way
when you take these lowercase Z

00:04:26.330 --> 00:04:26.340
when you take these lowercase Z
 

00:04:26.340 --> 00:04:28.490
when you take these lowercase Z
variables and stack them horizontally

00:04:28.490 --> 00:04:28.500
variables and stack them horizontally
 

00:04:28.500 --> 00:04:32.060
variables and stack them horizontally
you get this variable which I'm going to

00:04:32.060 --> 00:04:32.070
you get this variable which I'm going to
 

00:04:32.070 --> 00:04:35.150
you get this variable which I'm going to
know by capital Z and it turns out that

00:04:35.150 --> 00:04:35.160
know by capital Z and it turns out that
 

00:04:35.160 --> 00:04:38.420
know by capital Z and it turns out that
in order to implement this the numpy

00:04:38.420 --> 00:04:38.430
in order to implement this the numpy
 

00:04:38.430 --> 00:04:44.500
in order to implement this the numpy
command is capital Z equals MP dot W dot

00:04:44.500 --> 00:04:44.510
command is capital Z equals MP dot W dot
 

00:04:44.510 --> 00:04:51.260
command is capital Z equals MP dot W dot
t w transpose x and then plus B now

00:04:51.260 --> 00:04:51.270
t w transpose x and then plus B now
 

00:04:51.270 --> 00:04:53.960
t w transpose x and then plus B now
there is a subtlety in Python which is

00:04:53.960 --> 00:04:53.970
there is a subtlety in Python which is
 

00:04:53.970 --> 00:04:56.660
there is a subtlety in Python which is
that here B is a row number or if you

00:04:56.660 --> 00:04:56.670
that here B is a row number or if you
 

00:04:56.670 --> 00:04:59.120
that here B is a row number or if you
want to say you know one by one matrix

00:04:59.120 --> 00:04:59.130
want to say you know one by one matrix
 

00:04:59.130 --> 00:05:01.940
want to say you know one by one matrix
was just a normal real number but when

00:05:01.940 --> 00:05:01.950
was just a normal real number but when
 

00:05:01.950 --> 00:05:05.870
was just a normal real number but when
you add this vector to this real number

00:05:05.870 --> 00:05:05.880
you add this vector to this real number
 

00:05:05.880 --> 00:05:08.240
you add this vector to this real number
Python automatically takes this real

00:05:08.240 --> 00:05:08.250
Python automatically takes this real
 

00:05:08.250 --> 00:05:11.150
Python automatically takes this real
number B and expand it out to this 1 by

00:05:11.150 --> 00:05:11.160
number B and expand it out to this 1 by
 

00:05:11.160 --> 00:05:14.750
number B and expand it out to this 1 by
M row vector so in case this operation

00:05:14.750 --> 00:05:14.760
M row vector so in case this operation
 

00:05:14.760 --> 00:05:17.470
M row vector so in case this operation
seems will be mysterious this is called

00:05:17.470 --> 00:05:17.480
seems will be mysterious this is called
 

00:05:17.480 --> 00:05:21.080
seems will be mysterious this is called
broadcasting in Python and you don't

00:05:21.080 --> 00:05:21.090
broadcasting in Python and you don't
 

00:05:21.090 --> 00:05:22.580
broadcasting in Python and you don't
have worry about the for now we'll talk

00:05:22.580 --> 00:05:22.590
have worry about the for now we'll talk
 

00:05:22.590 --> 00:05:25.000
have worry about the for now we'll talk
about this some more in the next video

00:05:25.000 --> 00:05:25.010
about this some more in the next video
 

00:05:25.010 --> 00:05:27.650
about this some more in the next video
but the takeaway is that with just one

00:05:27.650 --> 00:05:27.660
but the takeaway is that with just one
 

00:05:27.660 --> 00:05:29.240
but the takeaway is that with just one
line of code with this line of code you

00:05:29.240 --> 00:05:29.250
line of code with this line of code you
 

00:05:29.250 --> 00:05:32.930
line of code with this line of code you
can can calculate capital Z and capital

00:05:32.930 --> 00:05:32.940
can can calculate capital Z and capital
 

00:05:32.940 --> 00:05:35.150
can can calculate capital Z and capital
Z is going to be a 1 by n matrix that

00:05:35.150 --> 00:05:35.160
Z is going to be a 1 by n matrix that
 

00:05:35.160 --> 00:05:37.280
Z is going to be a 1 by n matrix that
contains all of the lowercase disease

00:05:37.280 --> 00:05:37.290
contains all of the lowercase disease
 

00:05:37.290 --> 00:05:41.840
contains all of the lowercase disease
lowercase Z 1 through lowercase Z M so

00:05:41.840 --> 00:05:41.850
lowercase Z 1 through lowercase Z M so
 

00:05:41.850 --> 00:05:44.720
lowercase Z 1 through lowercase Z M so
that was the hub of these on values you

00:05:44.720 --> 00:05:44.730
that was the hub of these on values you
 

00:05:44.730 --> 00:05:48.260
that was the hub of these on values you
know a write what we like to do next is

00:05:48.260 --> 00:05:48.270
know a write what we like to do next is
 

00:05:48.270 --> 00:05:55.460
know a write what we like to do next is
find a way to compute a 1 a 2 and so on

00:05:55.460 --> 00:05:55.470
find a way to compute a 1 a 2 and so on
 

00:05:55.470 --> 00:05:58.600
find a way to compute a 1 a 2 and so on
through a.m. or at the same time and

00:05:58.600 --> 00:05:58.610
through a.m. or at the same time and
 

00:05:58.610 --> 00:06:02.720
through a.m. or at the same time and
just as stacking lowercase X's resulted

00:06:02.720 --> 00:06:02.730
just as stacking lowercase X's resulted
 

00:06:02.730 --> 00:06:05.810
just as stacking lowercase X's resulted
in capital X and stacking means back in

00:06:05.810 --> 00:06:05.820
in capital X and stacking means back in
 

00:06:05.820 --> 00:06:08.270
in capital X and stacking means back in
horizontally locate these 2,000 Capital

00:06:08.270 --> 00:06:08.280
horizontally locate these 2,000 Capital
 

00:06:08.280 --> 00:06:11.090
horizontally locate these 2,000 Capital
Z stacking lowercase J's is going to

00:06:11.090 --> 00:06:11.100
Z stacking lowercase J's is going to
 

00:06:11.100 --> 00:06:12.800
Z stacking lowercase J's is going to
result in a new variable which we will

00:06:12.800 --> 00:06:12.810
result in a new variable which we will
 

00:06:12.810 --> 00:06:17.510
result in a new variable which we will
define as capital A and in the program

00:06:17.510 --> 00:06:17.520
define as capital A and in the program
 

00:06:17.520 --> 00:06:19.610
define as capital A and in the program
assignment you see how to implement a

00:06:19.610 --> 00:06:19.620
assignment you see how to implement a
 

00:06:19.620 --> 00:06:23.090
assignment you see how to implement a
vector-valued sigmoid function so that

00:06:23.090 --> 00:06:23.100
vector-valued sigmoid function so that
 

00:06:23.100 --> 00:06:27.740
vector-valued sigmoid function so that
the sigmoid function inputs this capital

00:06:27.740 --> 00:06:27.750
the sigmoid function inputs this capital
 

00:06:27.750 --> 00:06:29.750
the sigmoid function inputs this capital
Z as a variable and very efficiently

00:06:29.750 --> 00:06:29.760
Z as a variable and very efficiently
 

00:06:29.760 --> 00:06:33.680
Z as a variable and very efficiently
opus capital aids so you see the details

00:06:33.680 --> 00:06:33.690
opus capital aids so you see the details
 

00:06:33.690 --> 00:06:36.010
opus capital aids so you see the details
of that in the program design

00:06:36.010 --> 00:06:36.020
of that in the program design
 

00:06:36.020 --> 00:06:39.590
of that in the program design
so just a recap what we've seen on this

00:06:39.590 --> 00:06:39.600
so just a recap what we've seen on this
 

00:06:39.600 --> 00:06:42.080
so just a recap what we've seen on this
slide is that instead of needing to loop

00:06:42.080 --> 00:06:42.090
slide is that instead of needing to loop
 

00:06:42.090 --> 00:06:45.200
slide is that instead of needing to loop
over M training examples to compute the

00:06:45.200 --> 00:06:45.210
over M training examples to compute the
 

00:06:45.210 --> 00:06:48.020
over M training examples to compute the
lowercase V and lowercase a one at a

00:06:48.020 --> 00:06:48.030
lowercase V and lowercase a one at a
 

00:06:48.030 --> 00:06:48.470
lowercase V and lowercase a one at a
time

00:06:48.470 --> 00:06:48.480
time
 

00:06:48.480 --> 00:06:51.950
time
you can implement this one line of code

00:06:51.950 --> 00:06:51.960
you can implement this one line of code
 

00:06:51.960 --> 00:06:53.690
you can implement this one line of code
to compute all the Z's at the same time

00:06:53.690 --> 00:06:53.700
to compute all the Z's at the same time
 

00:06:53.700 --> 00:06:57.620
to compute all the Z's at the same time
and then this one line of code with them

00:06:57.620 --> 00:06:57.630
and then this one line of code with them
 

00:06:57.630 --> 00:06:59.510
and then this one line of code with them
appropriate implementation of lowercase

00:06:59.510 --> 00:06:59.520
appropriate implementation of lowercase
 

00:06:59.520 --> 00:07:02.750
appropriate implementation of lowercase
Sigma to compute all the lowercase s all

00:07:02.750 --> 00:07:02.760
Sigma to compute all the lowercase s all
 

00:07:02.760 --> 00:07:04.940
Sigma to compute all the lowercase s all
at the same time so this is how you

00:07:04.940 --> 00:07:04.950
at the same time so this is how you
 

00:07:04.950 --> 00:07:07.700
at the same time so this is how you
implement a vectorized implementation of

00:07:07.700 --> 00:07:07.710
implement a vectorized implementation of
 

00:07:07.710 --> 00:07:09.410
implement a vectorized implementation of
the forward propagation for all M

00:07:09.410 --> 00:07:09.420
the forward propagation for all M
 

00:07:09.420 --> 00:07:11.750
the forward propagation for all M
training examples at the same time so to

00:07:11.750 --> 00:07:11.760
training examples at the same time so to
 

00:07:11.760 --> 00:07:13.400
training examples at the same time so to
summarize you've just seen how you can

00:07:13.400 --> 00:07:13.410
summarize you've just seen how you can
 

00:07:13.410 --> 00:07:16.220
summarize you've just seen how you can
use vectorization to very efficiently

00:07:16.220 --> 00:07:16.230
use vectorization to very efficiently
 

00:07:16.230 --> 00:07:18.350
use vectorization to very efficiently
compute all the activations all the

00:07:18.350 --> 00:07:18.360
compute all the activations all the
 

00:07:18.360 --> 00:07:21.250
compute all the activations all the
lowercase a's so that at the same time

00:07:21.250 --> 00:07:21.260
lowercase a's so that at the same time
 

00:07:21.260 --> 00:07:23.570
lowercase a's so that at the same time
next it turns out you can also use

00:07:23.570 --> 00:07:23.580
next it turns out you can also use
 

00:07:23.580 --> 00:07:25.280
next it turns out you can also use
vectorization to very efficiently

00:07:25.280 --> 00:07:25.290
vectorization to very efficiently
 

00:07:25.290 --> 00:07:27.980
vectorization to very efficiently
compute the backward propagation to

00:07:27.980 --> 00:07:27.990
compute the backward propagation to
 

00:07:27.990 --> 00:07:30.050
compute the backward propagation to
compute the gradient let's see how you

00:07:30.050 --> 00:07:30.060
compute the gradient let's see how you
 

00:07:30.060 --> 00:07:33.440
compute the gradient let's see how you
can do that in the next video

