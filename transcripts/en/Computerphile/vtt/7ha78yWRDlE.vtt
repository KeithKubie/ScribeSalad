WEBVTT
Kind: captions
Language: en

00:00:00.060 --> 00:00:06.629
We want to talk in some depth about this language called Postscript and how important it is

00:00:07.750 --> 00:00:12.269
but it's in the very nature of Postscript that it uses a

00:00:13.150 --> 00:00:15.360
notation called Postfix and

00:00:16.390 --> 00:00:18.039
that in turn

00:00:18.039 --> 00:00:20.219
relies for its execution

00:00:20.770 --> 00:00:23.819
rnvironment on this notion of a stack.

00:00:23.820 --> 00:00:27.119
Now we haven't covered stacks so far in computerphile

00:00:27.519 --> 00:00:33.479
So before getting into postscript full-blown as it were I have got to tell you something about stacks

00:00:33.480 --> 00:00:38.610
And we may be in a position to put this out as a separate film in its own right

00:00:38.920 --> 00:00:42.809
Doing a bit about stacks first of all mentioning postscript from time to time

00:00:43.270 --> 00:00:49.649
But it's important that you realize that stacks have a much wider application

00:00:50.350 --> 00:00:52.919
in computer science than just Postscript

00:00:55.180 --> 00:00:56.110
A plus B

00:00:56.110 --> 00:01:03.479
What could be more commonplace than that in any language that you program then and that plus in the middle is an operator

00:01:03.790 --> 00:01:10.439
It takes in this case a couple of operands it combines them together it does the addition

00:01:11.080 --> 00:01:19.080
So these of course things like plus minus multiply divide raise [to] the power of our examples of arithmetic

00:01:19.630 --> 00:01:21.630
operators, but they need the

00:01:21.759 --> 00:01:23.710
Operands to work on

00:01:23.710 --> 00:01:29.790
notice that the operator the addition comes in between the

00:01:30.220 --> 00:01:36.720
Operands the a and the B and because it's inserted and inscribed inside the two operands

00:01:37.210 --> 00:01:40.799
That's why this is called an inner fix

00:01:41.560 --> 00:01:47.070
Use well, we're all very familiar with inner [fixit's] what we taught at high school and what we use most of the time

00:01:47.259 --> 00:01:54.749
It's perfectly possible to write like that using a prefix plus. [you'll] say plus a b

00:01:54.759 --> 00:01:56.500
That's prefix notation

00:01:56.500 --> 00:02:00.659
Basically if you read it out, you're saying add together a and B

00:02:01.149 --> 00:02:06.779
yeah, you're putting the plus at the start so it precedes the operands so it's prefix and

00:02:07.479 --> 00:02:14.639
Just to make it clear that this is something you are familiar with sometimes if you have a language that defines

00:02:15.610 --> 00:02:18.330
addition not so much with an operator, but with a

00:02:18.970 --> 00:02:23.940
function call you say add add a comma b and the

00:02:24.610 --> 00:02:31.229
Arguments or the operands are in parentheses? What happens if you write it so that it comes?

00:02:31.989 --> 00:02:38.549
after the Operands ah we're here at last this is Postfix a

00:02:41.230 --> 00:02:48.929
Gentleman who was a mathematical logician from poland called [triangular] spelling right? [I] think his name is pronounced on [and] like

00:02:49.690 --> 00:02:55.979
[yanukovych] because that [hell] becomes a faint soft w sound with the crossbar he was a

00:02:56.380 --> 00:03:03.539
Mathematical Logician and what he said was do you know if I write stuff out like this as either?

00:03:03.849 --> 00:03:05.380
Prefix or PoStfix

00:03:05.380 --> 00:03:11.699
It's so much easier [for] me [to] prove mathematical theorems with tell you [I] [know] [its]

00:03:12.010 --> 00:03:19.829
Net result of all this was that people being unable to pronounce his name correctly and getting all the stresses and accents wrong

00:03:20.410 --> 00:03:24.899
Decided that rather than pronouncing what they found hard they would call this

00:03:25.480 --> 00:03:27.400
Polish notation

00:03:27.400 --> 00:03:34.440
Now actually polish notation applies to using anything that isn't in fixed I've seen prefix notation being called

00:03:35.139 --> 00:03:39.359
Forward Polish notation I've seen this a B-Plus

00:03:40.180 --> 00:03:42.180
given its traditional name or of

00:03:42.760 --> 00:03:43.900
reverse

00:03:43.900 --> 00:03:45.730
Polish notation

00:03:45.730 --> 00:03:49.679
But that's where it came from the gentleman who invented it

00:03:50.560 --> 00:03:52.420
sometimes this is even

00:03:52.420 --> 00:03:57.329
Abbreviated to a thing you may also have seen [RPN] reverse polish notation

00:03:58.109 --> 00:04:04.138
It saves the interpreter or the compiler an awful lot of effort in actually

00:04:04.540 --> 00:04:09.989
Executing the expressions that you write write down. Let's keep very simple again [2a] plus b

00:04:11.109 --> 00:04:13.109
If [I] write a plus b

00:04:13.810 --> 00:04:19.139
Like that and let's say, we'll see what the C language compiler would do to it

00:04:20.500 --> 00:04:24.659
What would they have to do to it? How would it translate it into binary?

00:04:24.659 --> 00:04:27.449
I don't want to do strings of meaning as binary with you

00:04:27.690 --> 00:04:33.839
But I'll tell you what I will do I'll try and translate [that] as if I was the C compiler into assembly code

00:04:34.180 --> 00:04:38.820
now the assembly code will depend on whether on an arm chip and intel chip or whatever and

00:04:39.370 --> 00:04:41.610
Some of you will know the GCC compiler

00:04:41.860 --> 00:04:48.419
gives a flag on there as well [as] an option which says show me the assembler code that you would produce for this and

00:04:48.610 --> 00:04:54.269
Here goes. I'm making this up it might not correspond to any particular assembly you know, but I hope you'll get the idea

00:04:54.790 --> 00:04:56.999
Load register R1

00:04:58.750 --> 00:04:59.950
[with] a

00:04:59.950 --> 00:05:07.170
The compiler will store off the values of a and b in memory, but as you all know before they can be added together

00:05:07.360 --> 00:05:12.360
They've got to be lifted into the central processor unit of the computer

00:05:12.360 --> 00:05:19.500
And then when they're added you call up the arithmetic unit inside the CPU load register command

00:05:20.110 --> 00:05:22.140
Register - this time with B

00:05:22.660 --> 00:05:23.710
add

00:05:23.710 --> 00:05:30.210
What is in register [1] - what is in register 2 and put the answer in Register 3?

00:05:30.880 --> 00:05:38.070
Roughly similar to the last assembler language. I taught which was for the arm chip don't castigate here forgot some of the details wrong

00:05:38.080 --> 00:05:40.319
But I hope that's just to give you the idea

00:05:40.780 --> 00:05:44.880
Just look at what it has to do it has to get a get b

00:05:44.880 --> 00:05:46.270
And do the addition

00:05:46.270 --> 00:05:52.679
You have to do it that way because you can't do anything with something until you get them first and lift it into the cPU

00:05:52.680 --> 00:05:53.730
And put it in registers

00:05:53.730 --> 00:06:01.319
Just look at this what it does it gets a into a register it gets B into another register. It adds them together puts

00:06:01.320 --> 00:06:04.080
the answer somewhere in the third register a

00:06:05.980 --> 00:06:10.409
B add a [B] [plus] its Postfix notation

00:06:11.080 --> 00:06:17.219
For even more complicated things it has to convert it into reverse polish

00:06:18.010 --> 00:06:23.010
explicitly or implicitly in order to decide what code to generate and

00:06:24.280 --> 00:06:31.559
What the cache of it's really loved about this absolutely [thought] it was ace when he discovered it is the following

00:06:31.900 --> 00:06:38.520
Suppose we now write a plus b. Star C. Which one of these addition or multiplication

00:06:39.160 --> 00:06:46.669
operators takes precedence answer it's the multiply the multiply must be done first everybody knows that and

00:06:47.010 --> 00:06:50.239
If you don't want it to be done first you have to

00:06:51.570 --> 00:06:53.779
Deliberately force it to be done the other way

00:06:55.139 --> 00:06:58.759
So let's be clear this one says multiply the b by C

00:06:58.760 --> 00:07:04.819
Because multiply is more powerful than ad and when you've got the answer there add it to a this one

00:07:05.100 --> 00:07:11.899
Says I want you to add a and B, and then multiply by C. What will cash of each said this is fantastic

00:07:11.900 --> 00:07:13.370
He said in my proofs

00:07:13.370 --> 00:07:16.070
I hate parentheses they mess things up

00:07:16.410 --> 00:07:21.979
But you realize that you don't have to parentheses because in reverse polish

00:07:22.500 --> 00:07:25.459
this comes out to be a b c

00:07:26.729 --> 00:07:28.590
Star Plus

00:07:28.590 --> 00:07:33.619
Whereas this one comes out to be a b plus C

00:07:34.440 --> 00:07:37.699
Star [I'm] telling you that a plus [b]

00:07:37.699 --> 00:07:44.179
Times C or to translate that in Postfix reverse Polish whatever you want to call it

00:07:44.460 --> 00:07:47.060
The reason it does you've got to be careful here

00:07:47.160 --> 00:07:51.229
Let me remind you of what [you] will all have been taught at high school

00:07:51.229 --> 00:07:55.519
Is that multiply is a stronger operator than add?

00:07:56.880 --> 00:07:59.510
multiplication takes precedence as the phrase goes

00:08:00.090 --> 00:08:05.840
so in here to get the right answer you multiply b times C first of all and

00:08:06.330 --> 00:08:09.590
Then you do the add because it's of lower precedence

00:08:10.020 --> 00:08:15.530
So if all these are fives a being say they all represent the number 5 you get 5 times 5 is 25

00:08:16.320 --> 00:08:23.779
25 plus 5 is 30 [the] way that this is represented in a reverse polish is as follows a

00:08:24.539 --> 00:08:26.070
[b] [C]

00:08:26.070 --> 00:08:34.070
[multiply] [+] and the way that this works is [that] when you get an operator it is going to apply to the each foo

00:08:34.830 --> 00:08:35.940
immediately

00:08:35.940 --> 00:08:41.959
Preceding operands because that's what those fix is all about the more you look at that the more you realize

00:08:42.150 --> 00:08:47.389
And computer scientists when they looked at reverse polish notation in the late forties and early fifties

00:08:47.970 --> 00:08:54.019
Just thought all their christmases have come up once not only was this what we need did for

00:08:55.050 --> 00:09:00.079
Compiling stuff and getting use of usage of registers and cpus absolutely, right?

00:09:00.079 --> 00:09:06.589
But also, it related very much to a data structure that they're in the process of realizing its power

00:09:07.740 --> 00:09:09.240
the stack

00:09:09.240 --> 00:09:12.799
Now there's a lot of computer science depends on stacks

00:09:12.800 --> 00:09:19.039
[I] sometimes think that stacks and trees is just about all computer science is about but it's the first time we've mentioned them

00:09:19.040 --> 00:09:25.189
I think on computer file, so I'll try and go very very gently with you about this. This is a stack

00:09:26.129 --> 00:09:31.249
Why is it a snack? It's a start because you can [so-called] push things on it

00:09:32.730 --> 00:09:35.449
I'm going to push something else on to the top of the stack

00:09:36.209 --> 00:09:41.719
Notice that I can only access things by taking them off this Rod

00:09:42.149 --> 00:09:46.399
So therefore, it's a last thing in first thing out

00:09:47.550 --> 00:09:50.060
Storage mechanism, I'm going to push the light

00:09:50.879 --> 00:09:52.879
Able to stack with three objects on it

00:09:53.180 --> 00:09:58.039
The only easy one to get out is the top of the stack and if I take it off like that?

00:09:58.519 --> 00:10:00.619
That's called popping a stack

00:10:00.959 --> 00:10:06.679
So you push it on the top and you pop the top of the stack like that?

00:10:07.410 --> 00:10:12.680
Let's be clear in all of this [word] [that] I shall be doing now with disks and stacks

00:10:13.290 --> 00:10:15.800
I'm using these disks here to be of

00:10:16.589 --> 00:10:18.300
different sizes

00:10:18.300 --> 00:10:23.029
Simply so you can see which is which on the stack. I'm producing. There's no

00:10:23.579 --> 00:10:28.159
Implication that the biggest disk represents the biggest integer or anything like that

00:10:28.610 --> 00:10:34.370
I'll try and be clear as I as I go along as to which one represents a which one represents B

00:10:34.589 --> 00:10:38.808
Which one represents C or maybe which one represents some partial?

00:10:39.029 --> 00:10:43.638
Intermediate result William multiplied two things together or whatever so don't get mesmerized

00:10:43.970 --> 00:10:50.240
Too much by the size of these [things] this is a case where size doesn't matter [you've] just got to remember which is which

00:10:50.850 --> 00:10:55.879
Well if we're pushing and popping then how does that relate to this?

00:10:56.610 --> 00:11:03.050
reverse Polish this Postfix for that expression let's call this big one here the a

00:11:03.660 --> 00:11:11.339
And on to push a so the rule then for interpreting reverse polish notation is if it's an operand push it on the stack

00:11:11.830 --> 00:11:15.150
Be is that an operand yes, push it on the stack

00:11:18.310 --> 00:11:21.359
See another operand push it on the stack

00:11:23.380 --> 00:11:24.520
next one

00:11:24.520 --> 00:11:31.289
multiply our well the rule about interpreting reverse polish on a stack is to say if

00:11:31.450 --> 00:11:33.450
You hit an operator

00:11:34.600 --> 00:11:41.820
Think to yourself how many operands does this got then take them off the stack those two operands in this case?

00:11:42.370 --> 00:11:48.900
Do the operation and push the answer back so I take off C and I take off it B

00:11:50.170 --> 00:11:57.420
Multiply them together so I've got a b times C intermediate result now which I represent with this smaller one here

00:11:57.700 --> 00:12:01.259
remember this one is the b times C sub of result and

00:12:02.110 --> 00:12:08.010
Having done that multiply the rule is [you] push the intermediate answer back on the stack?

00:12:09.580 --> 00:12:16.349
Coming to the end of the reverse polish string here. You'll see as a final plus. What does plus mean plus means it's

00:12:17.500 --> 00:12:20.880
Expects two operands, and we're fortunate we've got it, right

00:12:20.880 --> 00:12:27.630
There's two things on the stack as our original a and as the intermediate result that we've pushed back on of doing B

00:12:27.630 --> 00:12:30.450
Times C. So for the plus you take them both off

00:12:31.390 --> 00:12:33.390
You do an ad like that

00:12:33.940 --> 00:12:37.830
you produce the final answer which is this very small disk here and

00:12:38.170 --> 00:12:44.640
In postscript and in most of the systems when you've got the final answer you leave it at the top of the stack like that

00:12:45.100 --> 00:12:48.600
so the answer for a plus b times C has been

00:12:49.240 --> 00:12:55.260
evaluated using a stack and reverse polish and the final answer has appeared on top of the stack, so

00:12:56.080 --> 00:13:00.210
[for] interpreted languages with expressions of this sort

00:13:01.150 --> 00:13:02.860
reverse Polish

00:13:02.860 --> 00:13:09.360
Postfix is its other name don't forget and stacks. They just go together perfectly

00:13:09.910 --> 00:13:12.989
They were built in heaven for one another without a question

00:13:17.150 --> 00:13:20.769
You've got a third a third a third we have coped with that

00:13:20.770 --> 00:13:25.900
We've cope with that if you get a choice of either that pair or that pair of thirds

00:13:26.060 --> 00:13:30.640
[it] doesn't matter which actually okay, so now we've got one sort of list

