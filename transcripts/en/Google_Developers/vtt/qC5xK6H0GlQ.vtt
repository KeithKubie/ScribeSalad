WEBVTT
Kind: captions
Language: en

00:00:00.330 --> 00:00:01.830
EIJI KITAMURA: Web
components enable

00:00:01.830 --> 00:00:04.380
you to build a great
website through the use

00:00:04.380 --> 00:00:06.590
of reusable components.

00:00:06.590 --> 00:00:10.340
But what does it take to
build a web component?

00:00:10.340 --> 00:00:12.590
My name is Eiji,
and today I'm going

00:00:12.590 --> 00:00:16.790
to give you an overview
of template element.

00:00:16.790 --> 00:00:19.840
The idea of templating
isn't a new thing.

00:00:19.840 --> 00:00:21.800
Starting from server
side, templating

00:00:21.800 --> 00:00:25.370
has been a widely used technique
for assigning variables,

00:00:25.370 --> 00:00:30.310
conditional behaviors, and
repeated contents inside HTML.

00:00:30.310 --> 00:00:32.240
On the browser side,
similar attempts

00:00:32.240 --> 00:00:36.010
have been made by various
libraries using JavaScript,

00:00:36.010 --> 00:00:39.790
such a Handlebars.js,
Underscore.js, AngularJS,

00:00:39.790 --> 00:00:41.500
to name a few.

00:00:41.500 --> 00:00:43.850
They all work well,
but approaches

00:00:43.850 --> 00:00:48.380
taken by those libraries
may have pitfalls.

00:00:48.380 --> 00:00:50.655
In this example, the
template is actually

00:00:50.655 --> 00:00:54.930
a div tag, which is
hidden with a bit of CSS.

00:00:54.930 --> 00:00:57.540
A downside of this approach
is that the browser

00:00:57.540 --> 00:01:00.080
will fetch resources
like this image element

00:01:00.080 --> 00:01:03.380
from inside the template, even
if those resources haven't

00:01:03.380 --> 00:01:05.280
been used yet.

00:01:05.280 --> 00:01:09.430
It's a waste of resources
and performance.

00:01:09.430 --> 00:01:12.290
Another technique involves
storing the template content

00:01:12.290 --> 00:01:14.440
inside of a script tag.

00:01:14.440 --> 00:01:18.020
The downside of this approach
is because this template

00:01:18.020 --> 00:01:22.180
will be converted into DOM
elements using inner HTML.

00:01:22.180 --> 00:01:25.600
It could introduce a cross
site scripting vulnerability

00:01:25.600 --> 00:01:30.170
if an adequate [INAUDIBLE]
check is not performed.

00:01:30.170 --> 00:01:33.280
The template element will
solve those programs.

00:01:33.280 --> 00:01:37.090
The template allows you to
declare fragments of markup

00:01:37.090 --> 00:01:40.900
which are parsed as HTML
but go unused at runtime,

00:01:40.900 --> 00:01:44.616
and can be instantiated
later when you need them.

00:01:44.616 --> 00:01:48.400
A template element won't
render its contents by itself,

00:01:48.400 --> 00:01:51.580
won't fetch any required
resources, including scripts,

00:01:51.580 --> 00:01:55.960
styles, or images, and also
won't excuse scripts inside

00:01:55.960 --> 00:01:58.770
of itself.

00:01:58.770 --> 00:02:00.650
Currently the
template element is

00:02:00.650 --> 00:02:03.940
supported in Chrome,
Firefox, and Opera.

00:02:03.940 --> 00:02:08.190
Safari is expected to
support it in version 8,

00:02:08.190 --> 00:02:11.090
but you guys know that
things change weekly,

00:02:11.090 --> 00:02:14.320
so check in on chromestatus.com.

00:02:14.320 --> 00:02:17.300
To detect availability
of the template tag,

00:02:17.300 --> 00:02:19.430
check if HTML
template element is

00:02:19.430 --> 00:02:22.390
available on the window object.

00:02:22.390 --> 00:02:25.690
For unsupported browsers,
you can use platform.js,

00:02:25.690 --> 00:02:28.340
a collection of web
components polyfills

00:02:28.340 --> 00:02:31.890
made available as part
of the polyfill library.

00:02:31.890 --> 00:02:34.200
This will automatically
detect availability

00:02:34.200 --> 00:02:39.160
of the template element,
and populate if necessary.

00:02:39.160 --> 00:02:43.850
It is really simple to add
your own template to HTML.

00:02:43.850 --> 00:02:47.670
Just wrap your template
markup with template tag.

00:02:47.670 --> 00:02:49.500
This will make
your markup inert,

00:02:49.500 --> 00:02:51.980
so if will no longer
render on the page

00:02:51.980 --> 00:02:54.910
until you stamp it out.

00:02:54.910 --> 00:02:56.860
To stamp out a
template, you need

00:02:56.860 --> 00:02:59.610
to write a bit of JavaScript.

00:02:59.610 --> 00:03:02.010
By using
document.importNode, you

00:03:02.010 --> 00:03:06.020
can create a clone of
the template content.

00:03:06.020 --> 00:03:08.770
Note that setting the
second argument as true

00:03:08.770 --> 00:03:11.960
makes it a deep copy.

00:03:11.960 --> 00:03:13.620
Once you've created
the copy, you

00:03:13.620 --> 00:03:15.570
can just append it
wherever you want.

00:03:18.250 --> 00:03:21.230
One thing you should note
before moving forward

00:03:21.230 --> 00:03:25.920
is that the template itself is
simply a container for markup.

00:03:25.920 --> 00:03:29.960
You might expect to have things
like placeholders, repeaters,

00:03:29.960 --> 00:03:32.490
or conditionals,
but they are not

00:03:32.490 --> 00:03:35.700
a part of template
element standard.

00:03:35.700 --> 00:03:38.310
If you want to use
those advanced features,

00:03:38.310 --> 00:03:41.650
I recommend you to use
web components frameworks,

00:03:41.650 --> 00:03:45.670
such as Polymer or X-Tag.

00:03:45.670 --> 00:03:48.300
So this is a template element.

00:03:48.300 --> 00:03:51.120
To learn more about
template elements in detail,

00:03:51.120 --> 00:03:53.160
make sure to read
the HTML5 Rocks

00:03:53.160 --> 00:03:56.530
article, written
by Eric Bidelman.

00:03:56.530 --> 00:03:58.090
Thank you for watching.

00:03:58.090 --> 00:04:00.320
See you in the next episode.

