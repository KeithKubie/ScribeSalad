WEBVTT
Kind: captions
Language: en

00:00:26.916 --> 00:00:28.290
HYUNYOUNG SONG:
Hello, everybody.

00:00:28.290 --> 00:00:32.790
Welcome to our session, Innovate
with the Glass Platform.

00:00:32.790 --> 00:00:34.010
My name is Hyunyoung Song.

00:00:34.010 --> 00:00:34.909
I also go by HY.

00:00:34.909 --> 00:00:36.950
PY LALIGAND: And my name
is Pierre-Yves Laligand,

00:00:36.950 --> 00:00:38.190
but I go by PY.

00:00:38.190 --> 00:00:40.440
HYUNYOUNG SONG: We're Google
Glass software engineers.

00:00:43.420 --> 00:00:45.380
Today, we're going to
first talk about some

00:00:45.380 --> 00:00:48.720
of the big changes that happened
to our platform, one of which

00:00:48.720 --> 00:00:51.800
is the GDK, short for
Glass Development Kit.

00:00:51.800 --> 00:00:54.370
And then we're going to talk a
little bit about what changes

00:00:54.370 --> 00:01:00.930
we made to the Android
to enable GDK to explore

00:01:00.930 --> 00:01:02.680
the wearable form
factor of glass

00:01:02.680 --> 00:01:06.170
so that developers can take
advantage of our platform.

00:01:06.170 --> 00:01:09.130
Lastly, we're going to
show you two demos that

00:01:09.130 --> 00:01:13.540
highlight some of the GDK
API and Android API on Glass.

00:01:20.120 --> 00:01:24.580
Around last November, we
released the GDK to the public,

00:01:24.580 --> 00:01:28.380
and as of this year, April,
GDK entered the Preview mode,

00:01:28.380 --> 00:01:33.010
which means that Glassware
that was built using GDK

00:01:33.010 --> 00:01:35.860
can now be submitted to
be listed on our Buy Glass

00:01:35.860 --> 00:01:36.360
website.

00:01:39.105 --> 00:01:44.310
GDK is a supplementary library
that you can use in addition

00:01:44.310 --> 00:01:47.790
to Android SDK to
build GDK Glassware.

00:01:47.790 --> 00:01:50.660
We wanted to upgrade our
platform so that everybody

00:01:50.660 --> 00:01:53.920
can use the latest Android API.

00:01:53.920 --> 00:01:56.905
Last year, when I was
giving a similar talk,

00:01:56.905 --> 00:02:02.030
our platform was based on Ice
Cream Sandwich 4.0.4, API level

00:02:02.030 --> 00:02:03.040
15.

00:02:03.040 --> 00:02:06.730
But as of this year,
April, our platform

00:02:06.730 --> 00:02:12.050
is based on KitKat 4.4.2 API 19.

00:02:12.050 --> 00:02:15.090
This upgrade brought
a new set of APIs

00:02:15.090 --> 00:02:17.340
available on Glass,
some of which

00:02:17.340 --> 00:02:21.760
will be showcased later on
during this talk during PY's

00:02:21.760 --> 00:02:22.355
and my demo.

00:02:25.620 --> 00:02:31.910
SDK Manager, inside IDE such
as Eclipse, Android Studio,

00:02:31.910 --> 00:02:35.630
allow you to seamlessly
download the GDK Jar

00:02:35.630 --> 00:02:38.600
so that you can create
your GDK Glassware.

00:02:38.600 --> 00:02:41.600
Along with it comes some
sample apps that you can also

00:02:41.600 --> 00:02:46.500
download to use as a template
to write your own GDK Glassware.

00:02:46.500 --> 00:02:49.610
As a matter of fact, a lot
of the screenshots and videos

00:02:49.610 --> 00:02:52.380
that you're going to see
later on in this talk

00:02:52.380 --> 00:02:56.340
are captured from
these sample apps.

00:02:56.340 --> 00:03:00.770
For those of you who have
not checked out the GDK yet,

00:03:00.770 --> 00:03:03.530
this is the web URL.

00:03:03.530 --> 00:03:06.010
And for developers who
already have a Glass and who

00:03:06.010 --> 00:03:12.800
have a GDK-based
Glassware, the first link

00:03:12.800 --> 00:03:15.450
lists all of the
checklists that you

00:03:15.450 --> 00:03:19.647
should check before
your submission-- oh,

00:03:19.647 --> 00:03:20.980
the checklist is the second one.

00:03:20.980 --> 00:03:22.730
The first one is the
form itself where

00:03:22.730 --> 00:03:24.060
you submit your GDK Glassware.

00:03:28.030 --> 00:03:29.420
Enough with the announcement.

00:03:29.420 --> 00:03:33.960
Let's talk about GDK
from a high level.

00:03:33.960 --> 00:03:36.240
One of the first things
that you can do with GDK

00:03:36.240 --> 00:03:39.820
is make your Glassware
integrate with the timeline.

00:03:39.820 --> 00:03:41.780
If you use the
voice trigger API,

00:03:41.780 --> 00:03:45.710
you can start your Glassware
from our clock screen,

00:03:45.710 --> 00:03:48.050
using either voice
or the touch pad.

00:03:52.520 --> 00:03:55.970
Using the LiveCard API, you
can draw into the timeline

00:03:55.970 --> 00:03:58.290
to the left of the clock screen.

00:03:58.290 --> 00:04:00.610
In this example, our
compass sample app

00:04:00.610 --> 00:04:04.550
is drawing the user's
orientation into the timeline.

00:04:07.200 --> 00:04:11.181
But if you do not
want to use LiveCard

00:04:11.181 --> 00:04:12.930
and do not want to
draw into the timeline,

00:04:12.930 --> 00:04:16.399
you can use CardScrollView
to create your own view

00:04:16.399 --> 00:04:18.910
or set of views
in Immersive mode

00:04:18.910 --> 00:04:21.589
so that it has
exactly the same swipe

00:04:21.589 --> 00:04:24.600
and flinging behavior,
just like the timeline

00:04:24.600 --> 00:04:26.070
and Glassware system apps.

00:04:29.080 --> 00:04:32.600
To create cards that goes
inside the CardScrollView that

00:04:32.600 --> 00:04:36.900
looks exactly a similar way
as the Glass system apps,

00:04:36.900 --> 00:04:38.790
you can use the Card API.

00:04:38.790 --> 00:04:41.900
This API is not public yet.

00:04:41.900 --> 00:04:44.030
It'll end this API demo.

00:04:44.030 --> 00:04:47.740
This will be rolled
out to you at the next

00:04:47.740 --> 00:04:49.645
or the following upcoming OTA.

00:04:59.070 --> 00:05:01.580
Contextual Voice
Menu API will allow

00:05:01.580 --> 00:05:07.310
you to enable the voice
flow within your own app,

00:05:07.310 --> 00:05:11.790
just like how we support the
voice flow from our clock

00:05:11.790 --> 00:05:12.290
screen.

00:05:16.070 --> 00:05:19.050
GestureDetector
API is the one that

00:05:19.050 --> 00:05:22.990
is optimized to work
best on Glass touch pad.

00:05:22.990 --> 00:05:24.920
As a matter of fact,
this is the API

00:05:24.920 --> 00:05:26.970
that is used within
our Glass system apps,

00:05:26.970 --> 00:05:29.920
and also some of our
framework services.

00:05:29.920 --> 00:05:33.960
If you want exactly the same
touch behavior as the system

00:05:33.960 --> 00:05:37.180
apps, this is the API
that will come in handy.

00:05:47.930 --> 00:05:49.590
There are some
APIs that allow you

00:05:49.590 --> 00:05:52.830
to listen to the state
changes within Glass.

00:05:52.830 --> 00:05:56.560
On-head detection is
a framework feature

00:05:56.560 --> 00:05:59.450
that uses the sensor
facing towards your eye

00:05:59.450 --> 00:06:02.200
so that the Glass will
know whether you're wearing

00:06:02.200 --> 00:06:05.120
your device or where
you took it off.

00:06:05.120 --> 00:06:10.440
This feature is used to
optimize the state of Glass.

00:06:10.440 --> 00:06:13.320
For example, if you're
not wearing the device,

00:06:13.320 --> 00:06:15.870
then it turns off some of the
services that doesn't really

00:06:15.870 --> 00:06:19.300
have to run to conserve power.

00:06:19.300 --> 00:06:23.700
There is a API
within-- this intent

00:06:23.700 --> 00:06:27.940
API, which is part of GDK,
is fired whenever they're

00:06:27.940 --> 00:06:31.080
on the transition edge so
that third party apps can also

00:06:31.080 --> 00:06:34.430
listen to it so that
they can turn off

00:06:34.430 --> 00:06:36.920
some of the services that
doesn't necessarily have to run

00:06:36.920 --> 00:06:38.745
when the user is not
wearing the device.

00:06:42.990 --> 00:06:46.450
There's more to the
GDK, but everybody

00:06:46.450 --> 00:06:48.770
can read it on the website.

00:06:48.770 --> 00:06:51.660
What I'm going to talk right now
is what are some of the changes

00:06:51.660 --> 00:06:54.040
that we've made to the
Android to enable GDK.

00:06:58.130 --> 00:07:01.290
This is a rough sketch of
what the typical Android

00:07:01.290 --> 00:07:03.290
vertical stack looks like.

00:07:03.290 --> 00:07:07.650
On top of Linux Kernel
runs the Dalvik runtime,

00:07:07.650 --> 00:07:08.560
native libraries.

00:07:08.560 --> 00:07:11.050
On top of it is the
framework, which

00:07:11.050 --> 00:07:12.740
is a set of services
that support

00:07:12.740 --> 00:07:18.415
the Android SDK and
applications sit top of it.

00:07:18.415 --> 00:07:20.040
These are some of
the commands that you

00:07:20.040 --> 00:07:24.310
can execute to inspect each
one of these vertical layers

00:07:24.310 --> 00:07:28.660
on both your Glass device
and on your mobile phone.

00:07:28.660 --> 00:07:30.500
As a matter of fact,
this is the command

00:07:30.500 --> 00:07:33.070
that I executed
when I first joined

00:07:33.070 --> 00:07:36.790
Glass to see what was there.

00:07:36.790 --> 00:07:40.620
If you execute these, instead
of the Android default launcher,

00:07:40.620 --> 00:07:45.450
inside Glass platform, there
is Glass something APKs

00:07:45.450 --> 00:07:47.180
that represent the
various features that

00:07:47.180 --> 00:07:49.120
are already available in Glass.

00:07:49.120 --> 00:07:52.920
In particular, GlassHome is
our version of the launcher

00:07:52.920 --> 00:07:55.665
that lets you insert your
own Glassware into our clock

00:07:55.665 --> 00:07:59.890
screen, and also the one
that renders the timeline.

00:07:59.890 --> 00:08:03.600
Boutique is the APK
that downloads Glassware

00:08:03.600 --> 00:08:05.800
that you turned on
the My Glass website.

00:08:08.560 --> 00:08:11.300
When you execute the
dumpsys-l command,

00:08:11.300 --> 00:08:15.020
you also see all of the standard
Android services, activity,

00:08:15.020 --> 00:08:18.830
window, power,
battery, and so forth.

00:08:18.830 --> 00:08:21.220
Two that we did
change in our Glass

00:08:21.220 --> 00:08:23.680
are the location and
the account service.

00:08:23.680 --> 00:08:27.180
Because compared
to default standard

00:08:27.180 --> 00:08:30.080
Android where everything
is done on the client,

00:08:30.080 --> 00:08:34.450
Glass does authentication
using the My Glass website.

00:08:34.450 --> 00:08:37.539
The GPS information is
piped through your companion

00:08:37.539 --> 00:08:39.019
app for better accuracy.

00:08:41.929 --> 00:08:45.430
There are some services
that we inserted.

00:08:45.430 --> 00:08:47.230
HeadGesture service
monitors when

00:08:47.230 --> 00:08:50.990
you are moving your head around,
so that when you look up,

00:08:50.990 --> 00:08:52.570
that screen turns on.

00:08:52.570 --> 00:08:55.450
The EyeGesture is
what I just talked

00:08:55.450 --> 00:08:59.010
about when I was describing
on-head detection card that

00:08:59.010 --> 00:09:02.230
monitors the movement of
your eye, that also enables

00:09:02.230 --> 00:09:05.860
Wink Feature for wink
to photo feature.

00:09:05.860 --> 00:09:07.940
And lastly, this
timeline manager

00:09:07.940 --> 00:09:09.860
is the service that
runs in the background

00:09:09.860 --> 00:09:12.410
so that you can draw
into the timeline

00:09:12.410 --> 00:09:18.330
from your remote Glassware
app using the LiveCard API.

00:09:18.330 --> 00:09:22.234
For the rest, we changed a
little bit of native libraries,

00:09:22.234 --> 00:09:23.650
we changed a little
bit of kernel,

00:09:23.650 --> 00:09:27.160
but we didn't touch Dalvik
virtual machine at all.

00:09:27.160 --> 00:09:29.920
All in all, we
didn't touch any part

00:09:29.920 --> 00:09:32.470
that a vendor building
a mobile phone or tablet

00:09:32.470 --> 00:09:33.940
would have kept untouched.

00:09:36.690 --> 00:09:40.770
At this point, I would like
a quick show of hands--

00:09:40.770 --> 00:09:43.190
how many of you
sitting in the audience

00:09:43.190 --> 00:09:44.860
have modified Android OSP?

00:09:47.840 --> 00:09:49.975
How many of you are
Android developers?

00:09:52.480 --> 00:09:58.060
Now, PY is going to further
your understanding of what

00:09:58.060 --> 00:10:00.240
we did on Glass platform.

00:10:00.240 --> 00:10:01.454
PY LALIGAND: Thank you, HY.

00:10:01.454 --> 00:10:03.370
I wanted to give you a
little more perspective

00:10:03.370 --> 00:10:07.180
on all the work we've
done on Android.

00:10:07.180 --> 00:10:10.150
The graph you see here
shows the relative size

00:10:10.150 --> 00:10:12.950
of the Android SDK
versus the GDK.

00:10:12.950 --> 00:10:16.536
And as you can see, the former
really dwarfs the latter.

00:10:16.536 --> 00:10:18.160
I think that illustrates
very well what

00:10:18.160 --> 00:10:20.110
we're trying to achieve
with the GDK, which

00:10:20.110 --> 00:10:23.950
is we're trying to build a
complement to the Android SDK,

00:10:23.950 --> 00:10:26.660
so that you guys can continue
building on a platform

00:10:26.660 --> 00:10:29.780
that you know and hopefully
love while at the same time

00:10:29.780 --> 00:10:34.360
taking advantage of what makes
Glass such a specific device.

00:10:34.360 --> 00:10:36.369
A lot of it has to do
with user interaction.

00:10:36.369 --> 00:10:38.660
And as you can see, by
comparing the first two columns,

00:10:38.660 --> 00:10:42.170
UI widgets make for a very
small part of the SDK.

00:10:42.170 --> 00:10:46.100
To replace those, we've added
our own widgets to the GDK,

00:10:46.100 --> 00:10:48.640
but you can still very
much take advantage

00:10:48.640 --> 00:10:54.010
of the vast majority
of the Android SDK.

00:10:54.010 --> 00:10:55.780
Under the hood, same story.

00:10:55.780 --> 00:10:58.890
We haven't added all that
much to the system server,

00:10:58.890 --> 00:11:01.050
just enough to
support the services

00:11:01.050 --> 00:11:06.030
that HY talked about earlier.

00:11:06.030 --> 00:11:09.140
All in all, at its
core, Glass is very much

00:11:09.140 --> 00:11:11.730
a standard Android device.

00:11:11.730 --> 00:11:14.050
We really believe in the
potential of this platform,

00:11:14.050 --> 00:11:16.870
and especially for
wearable devices.

00:11:16.870 --> 00:11:19.950
Under the circumstances,
what does it really

00:11:19.950 --> 00:11:23.900
mean to innovate on Glass?

00:11:23.900 --> 00:11:28.140
First, I'd like to take a very
short trip down memory lane.

00:11:28.140 --> 00:11:30.360
Not long ago, the
rise of mobile devices

00:11:30.360 --> 00:11:33.330
has opened up a lot
of new opportunities--

00:11:33.330 --> 00:11:36.440
touch screens, mobile
data, sensors for location,

00:11:36.440 --> 00:11:42.460
acceleration, sound, paved
the way for new experiences

00:11:42.460 --> 00:11:47.870
that were previously unfeasible
on older computing platforms.

00:11:50.480 --> 00:11:52.520
Well, we think
that a similar wave

00:11:52.520 --> 00:11:54.500
is coming with her
wearable devices,

00:11:54.500 --> 00:11:57.170
with Glass at its forefront.

00:11:57.170 --> 00:11:59.520
It's very important
to understand

00:11:59.520 --> 00:12:02.720
what makes those
devices different.

00:12:02.720 --> 00:12:05.630
In the case of
Glass, the location

00:12:05.630 --> 00:12:09.650
of the device on the
user's head greatly

00:12:09.650 --> 00:12:13.730
reduces the amount of time
between user intent and action.

00:12:13.730 --> 00:12:16.790
Likewise, the ability
of a heads-up display

00:12:16.790 --> 00:12:19.610
makes it so that you can very
quickly serve information

00:12:19.610 --> 00:12:21.830
to the user.

00:12:21.830 --> 00:12:23.800
All in all, of the
hands-free features,

00:12:23.800 --> 00:12:27.340
such as voice recognition,
eye gesture, hand gestures,

00:12:27.340 --> 00:12:29.270
enable the use of the
device in situations

00:12:29.270 --> 00:12:34.870
that require the user's full
attention and full skills.

00:12:34.870 --> 00:12:36.820
But that's not all
there is to Glass.

00:12:36.820 --> 00:12:39.890
As you can see on
this slide, there's

00:12:39.890 --> 00:12:43.830
a wealth of features packed in
this small and light device.

00:12:43.830 --> 00:12:45.600
You could just as
well take advantage

00:12:45.600 --> 00:12:47.890
of the BCT, that's
the Bone Conducting

00:12:47.890 --> 00:12:50.905
Transducer, the little speaker
in the back of the frame,

00:12:50.905 --> 00:12:53.460
to notify the user
instantly without even

00:12:53.460 --> 00:12:55.210
turning the screen on.

00:12:55.210 --> 00:12:58.020
Or you could re-purpose of the
button at the top of the frame

00:12:58.020 --> 00:13:01.270
to let the user give your app
a very clear and fast signal.

00:13:04.460 --> 00:13:07.620
I think there lies one of the
big principles for designing

00:13:07.620 --> 00:13:10.020
and innovating
with Glass-- really

00:13:10.020 --> 00:13:13.350
understand what makes the
device different-- its form

00:13:13.350 --> 00:13:15.320
factor and all its
components-- and learn

00:13:15.320 --> 00:13:17.920
to use all these features
and combine them smartly

00:13:17.920 --> 00:13:20.030
using all the platform APIs.

00:13:20.030 --> 00:13:22.710
This is very important,
not only to create

00:13:22.710 --> 00:13:24.870
new, compelling
experiences, but also

00:13:24.870 --> 00:13:27.700
to overcome some of the
challenges that inevitably

00:13:27.700 --> 00:13:30.140
come with new devices.

00:13:30.140 --> 00:13:32.190
And to illustrate
that last point,

00:13:32.190 --> 00:13:34.140
I'd like to walk you
through an example that's

00:13:34.140 --> 00:13:37.940
taken straight out
of your devices.

00:13:37.940 --> 00:13:41.370
I'd like to talk to
you about web browser.

00:13:41.370 --> 00:13:43.530
With a mobile
device, a touchscreen

00:13:43.530 --> 00:13:45.450
makes it very easy to
interact with the web.

00:13:45.450 --> 00:13:47.930
You can directly
manipulate the content.

00:13:47.930 --> 00:13:50.280
It feels very natural.

00:13:50.280 --> 00:13:54.390
Unless, of course, no
touchscreen, no such luck.

00:13:54.390 --> 00:13:58.110
But still, web browsing
is very important to us

00:13:58.110 --> 00:13:59.770
in the context of search.

00:13:59.770 --> 00:14:01.980
So unless you can perform
a search by saying,

00:14:01.980 --> 00:14:04.570
OK, Glass, search, and
then your search query.

00:14:04.570 --> 00:14:08.840
Sometimes, you get the result
whose snippet is good enough,

00:14:08.840 --> 00:14:10.370
but you need to dig
a little deeper.

00:14:10.370 --> 00:14:13.250
And that's where the web
browser comes into play.

00:14:13.250 --> 00:14:15.130
The first thing we
did is actually really

00:14:15.130 --> 00:14:17.820
focus on that use case
and get rid of things

00:14:17.820 --> 00:14:20.640
like tab browsing,
bookmarks, et cetera.

00:14:20.640 --> 00:14:23.790
It so happens that really
narrowing down your use cases

00:14:23.790 --> 00:14:26.180
is about 50% of the work.

00:14:26.180 --> 00:14:31.570
For the remaining 50%, let
me show you what we did.

00:14:31.570 --> 00:14:34.940
The context is you just
run a search query,

00:14:34.940 --> 00:14:37.820
you have the result
snippet, you tap twice

00:14:37.820 --> 00:14:40.830
to actually open the link, and
you're directed to a web page.

00:14:40.830 --> 00:14:43.940
At this point, if you put
two fingers on the touch pad,

00:14:43.940 --> 00:14:46.660
you're entering browse mode,
whereby moving your head

00:14:46.660 --> 00:14:48.820
around will pan around the page.

00:14:48.820 --> 00:14:51.100
Sliding the fingers up
and down the touch pad

00:14:51.100 --> 00:14:52.940
will control the zoom level.

00:14:52.940 --> 00:14:55.080
If you let go of the
two fingers and you're

00:14:55.080 --> 00:14:57.080
centered on the link,
you're just two steps away

00:14:57.080 --> 00:14:59.090
from actually
navigating that link.

00:14:59.090 --> 00:15:00.920
So there it is--
getting to a page,

00:15:00.920 --> 00:15:03.420
navigating, finding
some information,

00:15:03.420 --> 00:15:05.810
and optionally following a link.

00:15:05.810 --> 00:15:07.380
That's exactly
what we want to do.

00:15:07.380 --> 00:15:09.090
It turns out the
experience-- I invite

00:15:09.090 --> 00:15:12.300
you to try it-- is pretty cool.

00:15:12.300 --> 00:15:14.600
It works well.

00:15:14.600 --> 00:15:18.510
Now I'd like to show you
how we could build this,

00:15:18.510 --> 00:15:20.830
if we were to replicate it.

00:15:20.830 --> 00:15:22.980
The first thing
you need to do is

00:15:22.980 --> 00:15:25.260
to monitor the
movement of the head.

00:15:25.260 --> 00:15:29.620
This is done through a standard
Android SDK API, the sensor

00:15:29.620 --> 00:15:30.750
manager.

00:15:30.750 --> 00:15:34.010
You want to get a hold of
the rotation vector sensor

00:15:34.010 --> 00:15:36.880
and register for updates,
so that's the first snippet.

00:15:36.880 --> 00:15:38.630
And as you can see,
in the second snippet,

00:15:38.630 --> 00:15:42.610
whenever the orientation of the
device, and so of the user's

00:15:42.610 --> 00:15:46.150
head, changes, you get an update
with three angles describing

00:15:46.150 --> 00:15:48.070
the position of the device.

00:15:48.070 --> 00:15:51.470
That's how you would track
the user's movements.

00:15:51.470 --> 00:15:53.770
The second step is the
touch pad interaction.

00:15:53.770 --> 00:15:56.850
For this, we created
an API and a GDK,

00:15:56.850 --> 00:16:00.140
as HY mentioned, the
Gesture Detector.

00:16:00.140 --> 00:16:04.200
First, you want to add
a finger listener, which

00:16:04.200 --> 00:16:06.260
will allow you to get in
and out of Browse mode,

00:16:06.260 --> 00:16:07.676
depending on the
number of fingers

00:16:07.676 --> 00:16:10.060
that land on the touch pad.

00:16:10.060 --> 00:16:12.790
The second step is to
install a scroll listener,

00:16:12.790 --> 00:16:15.660
so that if you so happen
to be in Browse mode,

00:16:15.660 --> 00:16:21.310
you just control the zoom
level based on the delta.

00:16:21.310 --> 00:16:22.220
Very simple.

00:16:22.220 --> 00:16:24.630
There's one last
thing, too-- you

00:16:24.630 --> 00:16:27.230
need to pass touch events
to this gesture detector,

00:16:27.230 --> 00:16:31.200
and that's done by overriding
this method in your activity

00:16:31.200 --> 00:16:33.160
and just passing the
events to the detector.

00:16:33.160 --> 00:16:36.210
Very simple.

00:16:36.210 --> 00:16:38.450
What we've seen is
a way to combine

00:16:38.450 --> 00:16:41.470
some of Glass' very
unique features

00:16:41.470 --> 00:16:43.950
together to overcome
a challenge that

00:16:43.950 --> 00:16:46.410
is really specific to Glass.

00:16:46.410 --> 00:16:50.380
We've used a mixture of Android
APIs-- Activity SensorManager--

00:16:50.380 --> 00:16:52.520
as well as GDK APIs,
the GestureDetector.

00:16:55.160 --> 00:16:57.470
I think we've talked
enough right now,

00:16:57.470 --> 00:16:59.050
and it's time for some demos.

00:16:59.050 --> 00:17:02.154
Just one thing,
though-- this session

00:17:02.154 --> 00:17:03.820
is meant to be very
technical, and we're

00:17:03.820 --> 00:17:05.070
going to be showing more code.

00:17:05.070 --> 00:17:06.861
But if you're more
interested in the design

00:17:06.861 --> 00:17:09.270
aspects of innovating on Glass,
I invite you to check out

00:17:09.270 --> 00:17:11.980
the talk that happened yesterday
called Design for Wearables,

00:17:11.980 --> 00:17:12.700
I think.

00:17:12.700 --> 00:17:16.200
It will probably online
very soon, if not already.

00:17:16.200 --> 00:17:19.380
For our first demo, you'll
find it's very topical.

00:17:19.380 --> 00:17:22.880
You might have heard of this
little sporting event that's

00:17:22.880 --> 00:17:26.089
grabbing the attention of about
half of the planet these days,

00:17:26.089 --> 00:17:27.674
and that's the FIFA World Cup.

00:17:27.674 --> 00:17:30.090
If you so happen to be among
the other half of the planet,

00:17:30.090 --> 00:17:33.850
that's soccer we're
talking about.

00:17:33.850 --> 00:17:36.290
It so happens that
on the Glass team,

00:17:36.290 --> 00:17:38.180
we have a lot of
avid soccer fans.

00:17:38.180 --> 00:17:42.240
And recently, a device has
grabbed our attention, too.

00:17:46.100 --> 00:17:49.610
This is the Adidas
miCoach Smart Ball.

00:17:49.610 --> 00:17:52.830
This is Adidas' latest entry in
their line of personal coaching

00:17:52.830 --> 00:17:54.450
devices.

00:17:54.450 --> 00:17:56.380
This is not your
average soccer ball.

00:17:56.380 --> 00:17:58.430
It packs a lot of
sensors to give you

00:17:58.430 --> 00:18:00.270
feedback on your
dead ball kicks,

00:18:00.270 --> 00:18:03.080
so that you can understand
and ultimately improve

00:18:03.080 --> 00:18:04.184
your technique.

00:18:04.184 --> 00:18:06.600
We've got a couple of these
balls, and we had a lot of fun

00:18:06.600 --> 00:18:09.885
at practice competing over who
can kick the ball the hardest.

00:18:09.885 --> 00:18:12.400
I finished second.

00:18:12.400 --> 00:18:15.720
But very soon, the engineering
code started spinning,

00:18:15.720 --> 00:18:17.730
and realized, how
cool would this

00:18:17.730 --> 00:18:20.520
be to actually integrate
this with Glass

00:18:20.520 --> 00:18:22.070
for a totally
hands-free experience,

00:18:22.070 --> 00:18:27.760
like not having to carry a phone
or a tablet to get the results?

00:18:27.760 --> 00:18:30.270
We met with a couple
of Adidas engineers.

00:18:30.270 --> 00:18:32.200
We brainstormed for awhile.

00:18:32.200 --> 00:18:33.940
We decided to build
a quick prototype

00:18:33.940 --> 00:18:36.320
over the course of
not even a week.

00:18:36.320 --> 00:18:38.540
Let me show you what we did.

00:18:42.450 --> 00:18:47.665
First, we're going to switch
to a little program called

00:18:47.665 --> 00:18:49.790
ScreenCast that we showed
last year that will allow

00:18:49.790 --> 00:18:53.175
me to share with you what I'm
seeing on my Glass device.

00:19:07.967 --> 00:19:10.260
Let me try unplugging
and replugging it.

00:19:12.799 --> 00:19:13.465
The old recipes.

00:19:16.396 --> 00:19:17.097
Oh, yeah.

00:19:17.097 --> 00:19:17.930
We have two devices.

00:19:17.930 --> 00:19:20.830
That may be why.

00:19:20.830 --> 00:19:24.305
This is how you would use AGB,
in case you're not familiar.

00:19:24.305 --> 00:19:25.435
You can use it over Wi-Fi.

00:19:25.435 --> 00:19:27.060
We're trying to use
it over this cable.

00:19:27.060 --> 00:19:28.270
It's not working so well.

00:19:31.014 --> 00:19:31.680
Fingers crossed.

00:19:35.176 --> 00:19:35.675
Yay.

00:19:38.190 --> 00:19:39.100
This is the demo.

00:19:39.100 --> 00:19:40.990
No, I'm kidding.

00:19:40.990 --> 00:19:43.090
All right, so the first
step, what I'm going to do

00:19:43.090 --> 00:19:45.100
is actually start the app.

00:19:45.100 --> 00:19:46.750
OK, Glass?

00:19:46.750 --> 00:19:48.670
Start practicing.

00:19:48.670 --> 00:19:50.170
And so what this
does is it actually

00:19:50.170 --> 00:19:52.170
tries to connect to the
ball using Bluetooth LE.

00:19:52.170 --> 00:19:55.050
That's an API that
became available on Glass

00:19:55.050 --> 00:19:56.701
with the XE16 update.

00:19:56.701 --> 00:19:57.950
It looks like we're connected.

00:19:57.950 --> 00:19:59.630
That's truly a miracle.

00:19:59.630 --> 00:20:01.280
All right.

00:20:01.280 --> 00:20:02.410
We're ready.

00:20:02.410 --> 00:20:04.810
How about we take a kick?

00:20:04.810 --> 00:20:05.920
No?

00:20:05.920 --> 00:20:06.510
All right.

00:20:06.510 --> 00:20:07.010
I'll do it.

00:20:11.150 --> 00:20:14.350
I just have to tap
and I'm ready to kick.

00:20:17.100 --> 00:20:21.170
All right, let's see how I did.

00:20:21.170 --> 00:20:23.320
Now, basically what
the app is doing,

00:20:23.320 --> 00:20:25.760
it's communicating with the
ball to fetch some data.

00:20:25.760 --> 00:20:29.630
If you used this ball with the
provided app, what it does,

00:20:29.630 --> 00:20:32.100
it gives you feedback
on your speed,

00:20:32.100 --> 00:20:34.700
your point of impact on the
ball, the trajectory, launch

00:20:34.700 --> 00:20:37.710
angle, rotation, a lot
of very useful data.

00:20:37.710 --> 00:20:39.340
We'll see if worked
in that case.

00:20:39.340 --> 00:20:41.756
Oh my god, yeah,
it was a lame kick.

00:20:41.756 --> 00:20:43.650
[LAUGHTER]

00:20:43.650 --> 00:20:45.240
PY LALIGAND: So as
I mentioned, this

00:20:45.240 --> 00:20:47.810
was something we built
in a couple of days.

00:20:47.810 --> 00:20:51.010
Especially the mathematics
part is not that solid.

00:20:51.010 --> 00:20:53.080
It really needs a clean
trajectory to work.

00:20:53.080 --> 00:20:56.530
Unfortunately, the stage
is a little too small.

00:20:56.530 --> 00:20:58.550
But fortunately,
what we did is we

00:20:58.550 --> 00:21:01.210
built a demo mode
inside the demo.

00:21:01.210 --> 00:21:02.160
Let's try it again.

00:21:02.160 --> 00:21:02.660
Start.

00:21:06.160 --> 00:21:08.840
That was a kick.

00:21:08.840 --> 00:21:10.077
Let's see how it does.

00:21:10.077 --> 00:21:12.160
Hopefully it won't be as
lame as the previous one.

00:21:16.190 --> 00:21:18.760
Takes a little while,
because it's pretty slow.

00:21:18.760 --> 00:21:21.680
Oh my god, it's
51 miles per hour.

00:21:21.680 --> 00:21:23.600
So I have immediate
feedback, and I

00:21:23.600 --> 00:21:26.420
can keep going, just
trying another kick,

00:21:26.420 --> 00:21:28.690
and all the results
will accumulate

00:21:28.690 --> 00:21:32.944
so I can keep track of
my performance so far.

00:21:32.944 --> 00:21:33.860
That's pretty much it.

00:21:33.860 --> 00:21:35.830
Very simple demo.

00:21:35.830 --> 00:21:37.105
Let's go back to the slide.

00:21:40.340 --> 00:21:41.200
So again--

00:21:41.200 --> 00:21:43.088
[APPLAUSE]

00:21:46.259 --> 00:21:48.050
PY LALIGAND: So again,
I wanted to walk you

00:21:48.050 --> 00:21:51.816
through how you would go about
building something like this.

00:21:51.816 --> 00:21:53.190
And reading this
slide, I realize

00:21:53.190 --> 00:21:58.310
I forgot a part of the demo,
which is-- so you know,

00:21:58.310 --> 00:22:00.630
it's fine to start a kick
by tapping the touch pad,

00:22:00.630 --> 00:22:02.860
but when you're at
practice, you've

00:22:02.860 --> 00:22:07.300
have been running for awhile,
you're sweaty and everything,

00:22:07.300 --> 00:22:10.384
you don't want to have to reach
for a touch pad at every turn.

00:22:10.384 --> 00:22:12.800
What we did is we just hacked
the wink feature so that you

00:22:12.800 --> 00:22:14.841
could actually start
kicking every time you wink,

00:22:14.841 --> 00:22:16.420
and that's pretty cool.

00:22:16.420 --> 00:22:17.700
I wish I had been in on that.

00:22:17.700 --> 00:22:19.790
Anyway, moving on.

00:22:19.790 --> 00:22:23.010
Let's see how we built
that under the hood.

00:22:23.010 --> 00:22:26.080
The first API we used-- I
won't go into too much details,

00:22:26.080 --> 00:22:31.160
because that's a very well
documented GDK API which allows

00:22:31.160 --> 00:22:35.110
you to add an entry into
the voice menu, like HY

00:22:35.110 --> 00:22:36.280
showed you earlier.

00:22:36.280 --> 00:22:39.190
It's manifest-based, just
like the launcher API.

00:22:39.190 --> 00:22:40.310
Very simple.

00:22:40.310 --> 00:22:43.150
You can check out
documentation for this.

00:22:43.150 --> 00:22:46.290
Second step is to connect
to a Bluetooth LE device.

00:22:46.290 --> 00:22:49.190
This is done through the
standard Bluetooth Manager

00:22:49.190 --> 00:22:50.200
Android API.

00:22:50.200 --> 00:22:53.450
The first step is to
actually discover devices.

00:22:53.450 --> 00:22:57.440
That's the purpose of the
start LE scan method there.

00:22:57.440 --> 00:22:59.280
It takes an optional
argument, which

00:22:59.280 --> 00:23:01.295
is a list of services
you might use

00:23:01.295 --> 00:23:03.340
if you want to filter devices.

00:23:03.340 --> 00:23:07.540
But it turns out it's
a bit buggy in 4.4.2,

00:23:07.540 --> 00:23:09.460
but there are other
ways to work around

00:23:09.460 --> 00:23:13.340
this that are fairly well
documented on the web.

00:23:13.340 --> 00:23:16.549
You're searching for
devices and you found one.

00:23:16.549 --> 00:23:18.090
Then, what you need
to do is actually

00:23:18.090 --> 00:23:19.360
connect to that device.

00:23:19.360 --> 00:23:20.970
That's the role
of the connect gap

00:23:20.970 --> 00:23:22.690
method in the first snippet.

00:23:22.690 --> 00:23:25.030
The third argument
is a call back

00:23:25.030 --> 00:23:26.530
through which pretty
much everything

00:23:26.530 --> 00:23:27.820
will flow from that point on.

00:23:27.820 --> 00:23:31.230
This is a very asynchronous API.

00:23:31.230 --> 00:23:34.790
You start connecting,
and then if you're lucky,

00:23:34.790 --> 00:23:36.100
you get connected.

00:23:36.100 --> 00:23:39.020
The next step is to
discover services,

00:23:39.020 --> 00:23:40.890
so essentially
discover the API that's

00:23:40.890 --> 00:23:42.850
available on the remote device.

00:23:42.850 --> 00:23:45.880
And again, as I mentioned, this
is an asynchronous process,

00:23:45.880 --> 00:23:46.920
and you get a call back.

00:23:46.920 --> 00:23:49.360
Once you have discovered
services, what you need to do

00:23:49.360 --> 00:23:52.270
is grab a hold of
characteristics.

00:23:52.270 --> 00:23:55.670
Very simply, characteristics
are attributes

00:23:55.670 --> 00:23:58.790
of the remote devices that
you can read and write,

00:23:58.790 --> 00:24:02.650
and that's basically how you
interact with the device.

00:24:02.650 --> 00:24:04.500
The second part
of the slide shows

00:24:04.500 --> 00:24:06.260
how you read the
data, for example,

00:24:06.260 --> 00:24:08.280
from a device [INAUDIBLE].

00:24:08.280 --> 00:24:11.120
You just issue a read command,
and a little while later, you

00:24:11.120 --> 00:24:12.950
get data back.

00:24:12.950 --> 00:24:14.580
That's more of a pull model.

00:24:14.580 --> 00:24:19.600
But the Bluetooth LE API
also has a push model

00:24:19.600 --> 00:24:22.370
where you can
request notifications

00:24:22.370 --> 00:24:25.450
to be sent to you on a
given characteristic,

00:24:25.450 --> 00:24:27.890
so that's what this pretty
complicated first snippet

00:24:27.890 --> 00:24:28.700
does for you.

00:24:28.700 --> 00:24:31.090
And then later on, if
something like the state

00:24:31.090 --> 00:24:34.390
of the remote device
changes, you get a call back,

00:24:34.390 --> 00:24:37.250
and with the values
you're interested in.

00:24:37.250 --> 00:24:39.945
For that particular demo,
we used the mix of both push

00:24:39.945 --> 00:24:43.320
and pull, but that really
depends on the protocol

00:24:43.320 --> 00:24:48.560
that this remote device
chose to implement.

00:24:48.560 --> 00:24:50.190
Next up is showing some UIs.

00:24:50.190 --> 00:24:54.440
We've seen examples
of that shown by HY.

00:24:54.440 --> 00:24:57.010
The first API you want to
use is the CardScrollView.

00:24:57.010 --> 00:24:59.450
This is a very
standard adapter view.

00:24:59.450 --> 00:25:03.107
If you've ever used the likes
of ListView or GridView,

00:25:03.107 --> 00:25:04.190
you'll feel right at home.

00:25:04.190 --> 00:25:06.810
It's extremely similar.

00:25:06.810 --> 00:25:09.440
It extends AdapterView,
essentially.

00:25:09.440 --> 00:25:13.307
It'll give you this nice card
flipping and flinging behavior.

00:25:13.307 --> 00:25:15.640
The second API we used to
create those nice little cards

00:25:15.640 --> 00:25:20.170
is the Card API that
HY also talked about.

00:25:20.170 --> 00:25:23.060
You can view that
as a View Builder.

00:25:23.060 --> 00:25:25.554
You put your data
in there, and then

00:25:25.554 --> 00:25:27.220
you request a view,
and all of a sudden,

00:25:27.220 --> 00:25:31.350
you have this nice little
formatted view hierarchy.

00:25:31.350 --> 00:25:33.170
I invite you to use
the two together

00:25:33.170 --> 00:25:36.684
because we've optimized them,
memory wise and speed wise,

00:25:36.684 --> 00:25:38.100
and they work quite
well together,

00:25:38.100 --> 00:25:40.350
as you can see in
the last snippet that

00:25:40.350 --> 00:25:44.730
shows how, in your adapter, you
can defer to your card object

00:25:44.730 --> 00:25:49.520
and not have to worry about
things like recycling and such.

00:25:49.520 --> 00:25:52.970
Lastly, how do we
intercept winks?

00:25:52.970 --> 00:25:56.280
As you can see, this is
based on a broadcast intent.

00:25:56.280 --> 00:25:59.650
The only thing you need to do is
register a Broadcast Receiver.

00:25:59.650 --> 00:26:00.960
It's that simple.

00:26:00.960 --> 00:26:03.470
However, there are two things
that you shouldn't miss.

00:26:03.470 --> 00:26:05.400
The first one is
on the second line.

00:26:05.400 --> 00:26:08.290
You want to set the priority
to a very, very high number

00:26:08.290 --> 00:26:11.610
so that you have your object's
first shot at the event.

00:26:11.610 --> 00:26:15.320
Because this broadcast
is an ordered broadcast.

00:26:15.320 --> 00:26:18.280
The second thing is when
you receive the event,

00:26:18.280 --> 00:26:20.350
and you've decided OK,
I'm going to handle it,

00:26:20.350 --> 00:26:23.480
don't forget to actually
board the broadcast event,

00:26:23.480 --> 00:26:26.380
otherwise it's going to get
passed around to other apps.

00:26:26.380 --> 00:26:28.330
You'll probably end up
taking a picture which

00:26:28.330 --> 00:26:30.710
is probably not what you want.

00:26:30.710 --> 00:26:32.710
I now I would like to
direct your attention

00:26:32.710 --> 00:26:35.770
to the little passive aggressive
message at the bottom right

00:26:35.770 --> 00:26:37.950
of the slide that says
that this is a hack.

00:26:37.950 --> 00:26:40.880
This is a very
experimental feature.

00:26:40.880 --> 00:26:44.130
If you try to use it in an app
that you submit to My Glass,

00:26:44.130 --> 00:26:47.224
I'm afraid you won't go
through the review process.

00:26:47.224 --> 00:26:48.890
Sounds like we don't
want you to use it,

00:26:48.890 --> 00:26:51.880
but it's still very
much a work in progress.

00:26:51.880 --> 00:26:54.240
We have tons of work to
do on the detection side

00:26:54.240 --> 00:26:56.140
to make it way more reliable.

00:26:56.140 --> 00:27:00.452
The second part, also, is that
the API is not final at all.

00:27:00.452 --> 00:27:02.160
Right now, we're using
broadcast intents,

00:27:02.160 --> 00:27:04.120
but we have several
ideas to improve that.

00:27:04.120 --> 00:27:07.380
We really don't want to pull
the rug from under your feet.

00:27:07.380 --> 00:27:10.165
As a rule of thumb, if
you stick with the GDK,

00:27:10.165 --> 00:27:13.240
you'll be in a good spot.

00:27:13.240 --> 00:27:17.820
All right, so that's it for
the Adidas smart ball demo.

00:27:17.820 --> 00:27:21.870
Again, making use of
several components of Glass

00:27:21.870 --> 00:27:23.570
to provide that
experience, and again,

00:27:23.570 --> 00:27:27.680
a mixture of both Android APIs,
BluetoothManagers, and such, as

00:27:27.680 --> 00:27:30.680
well as GDK APIs, which
has CardScrollView, Card,

00:27:30.680 --> 00:27:31.730
and whatnot.

00:27:31.730 --> 00:27:34.870
Now we're going to show
you the second demo,

00:27:34.870 --> 00:27:38.000
and it looks like HY is going
to have some explaining to do.

00:27:44.964 --> 00:27:46.630
HYUNYOUNG SONG: The
second demo that I'm

00:27:46.630 --> 00:27:51.960
going to show you
also showcases how

00:27:51.960 --> 00:27:55.060
the hands-free nature
of Glass can improve

00:27:55.060 --> 00:27:57.530
outdoor activities-- and
in this case, cycling,

00:27:57.530 --> 00:28:01.950
that's back of my head
actually using this device.

00:28:01.950 --> 00:28:03.430
For the longest
time, what I want

00:28:03.430 --> 00:28:07.630
to have while cycling
was a rearview camera.

00:28:07.630 --> 00:28:11.360
As of last December, we
started rolling out some kernel

00:28:11.360 --> 00:28:15.120
features, and one of them OTG
mode-- that is, USB host mode.

00:28:19.150 --> 00:28:22.770
We're trying to start
my demo as I speak.

00:28:22.770 --> 00:28:23.530
Give me a second.

00:28:28.170 --> 00:28:29.530
That was connected.

00:28:29.530 --> 00:28:30.130
A miracle.

00:28:30.130 --> 00:28:32.190
You're an amazing audience.

00:28:32.190 --> 00:28:35.160
Everything's working.

00:28:35.160 --> 00:28:44.960
And so what I did-- so what
I did is I got a webcam,

00:28:44.960 --> 00:28:47.000
and then I connected
to my Glass device

00:28:47.000 --> 00:28:51.350
so that I can see the video
stream on my Glass device.

00:28:54.197 --> 00:28:56.280
Right now, we're using a
little bit different mode

00:28:56.280 --> 00:28:59.050
than PY's demo,
because as you can see,

00:28:59.050 --> 00:29:02.540
my USB port is taken
by my OTG cable.

00:29:02.540 --> 00:29:04.260
We're doing our ADB over Wi-Fi.

00:29:15.300 --> 00:29:16.800
We're not getting this screen.

00:29:20.520 --> 00:29:22.020
PY LALIGAND: They
told us not to use

00:29:22.020 --> 00:29:24.970
any wireless technology
for this demo.

00:29:24.970 --> 00:29:29.426
HYUNYOUNG SONG: So yes, I
can actually see all of you

00:29:29.426 --> 00:29:31.680
from the back of my head.

00:29:31.680 --> 00:29:34.170
But this is really unfortunate.

00:29:34.170 --> 00:29:35.930
Yes.

00:29:35.930 --> 00:29:40.120
I think the 2.4 gigahertz Wi-Fi
spectrum is really maxed out.

00:29:40.120 --> 00:29:41.980
This worked like five times.

00:29:46.790 --> 00:29:51.060
Because doing the demo
with Wi-Fi has always

00:29:51.060 --> 00:29:58.660
this trickiness, I did
record a video yesterday

00:29:58.660 --> 00:30:03.710
using this device while I was
cycling through our Google

00:30:03.710 --> 00:30:05.820
main campus.

00:30:05.820 --> 00:30:09.520
This was recorded using
the Screen Record, which

00:30:09.520 --> 00:30:12.330
was on another goodness
that we inherited

00:30:12.330 --> 00:30:14.120
by upgrading to KitKat.

00:30:14.120 --> 00:30:19.060
As you can see, I
am riding my bike,

00:30:19.060 --> 00:30:22.060
and this is what I capture
from my rearview camera.

00:30:22.060 --> 00:30:24.707
To demonstrate how easy it
is to switch between cameras,

00:30:24.707 --> 00:30:26.290
this is the camera
feed that is coming

00:30:26.290 --> 00:30:29.330
from the internal
camera, and yes, there's

00:30:29.330 --> 00:30:31.650
a little bit of lag.

00:30:31.650 --> 00:30:36.430
Then I'm going to switch to
my rearview camera again.

00:30:36.430 --> 00:30:39.650
Using the Options menu and
then the second Options menu

00:30:39.650 --> 00:30:41.950
is-- I can see a
shadow of myself riding

00:30:41.950 --> 00:30:45.690
my bike over there with
the [INAUDIBLE] head.

00:30:45.690 --> 00:30:50.230
A big disclaimer here
is that this I built

00:30:50.230 --> 00:30:55.980
over the course of a week, and
this is really ugly and big,

00:30:55.980 --> 00:30:58.730
and would have never seen
the light of a public camera

00:30:58.730 --> 00:31:02.200
if this was not an engineer
or developing session,

00:31:02.200 --> 00:31:05.540
but the idea is that I wanted to
show you that everybody in here

00:31:05.540 --> 00:31:09.270
can make this themselves, too.

00:31:09.270 --> 00:31:11.258
[APPLAUSE]

00:31:16.240 --> 00:31:17.670
HYUNYOUNG SONG:
So what did I do?

00:31:17.670 --> 00:31:21.720
What is exactly on
top of this helmet?

00:31:21.720 --> 00:31:23.940
In an ideal world, all
you would really need

00:31:23.940 --> 00:31:27.760
is a USB host
mode-enabled host device

00:31:27.760 --> 00:31:31.270
and an OTG cable and
a low-power webcam.

00:31:31.270 --> 00:31:33.920
But life is not that simple.

00:31:33.920 --> 00:31:36.140
Most of the webcam
that you get from Frys

00:31:36.140 --> 00:31:40.060
or your local electronics
store requires 500 milliamps

00:31:40.060 --> 00:31:44.340
when Glass can only provide
300 milliamps on a host mode.

00:31:44.340 --> 00:31:46.690
That's why I introduced
this USB hub.

00:31:46.690 --> 00:31:49.070
This USB hub serves
two purposes.

00:31:49.070 --> 00:31:52.090
First one, so that it
connects to the battery pack

00:31:52.090 --> 00:31:56.140
to charge the webcam so that I
can record as long as possible.

00:31:56.140 --> 00:31:59.440
The second important reason
is that the USB device driver

00:31:59.440 --> 00:32:01.200
will not establish
the connection

00:32:01.200 --> 00:32:03.470
if your peripheral
device says, oh, I

00:32:03.470 --> 00:32:06.560
need more power than
what you can provide me.

00:32:06.560 --> 00:32:10.320
This USB-powered hub
tells the Glass device,

00:32:10.320 --> 00:32:14.640
I don't need any power from
you, and hence, the Glass

00:32:14.640 --> 00:32:19.400
is OK with it, and then
establishes the connection.

00:32:19.400 --> 00:32:22.080
Some of the commands that you
can execute yourself to verify

00:32:22.080 --> 00:32:25.510
that everything has been
properly set up-- the first one

00:32:25.510 --> 00:32:26.400
is LS USB.

00:32:29.029 --> 00:32:31.320
it lists two additional
peripheral devices for my case,

00:32:31.320 --> 00:32:34.540
because I have the USB
hub and also the webcam.

00:32:34.540 --> 00:32:37.280
And if everything
worked correctly,

00:32:37.280 --> 00:32:42.790
we also modified the camera
hardware abstraction layer

00:32:42.790 --> 00:32:45.290
so that you don't have
to root your device.

00:32:47.830 --> 00:32:53.640
All this change will be
part of your upcoming OTA.

00:32:53.640 --> 00:32:55.950
If everything is
correctly mounted,

00:32:55.950 --> 00:33:00.910
you'll see that video 0 node
mounted on the dev partition.

00:33:00.910 --> 00:33:04.020
What you should look out for is
you should look at the kernel

00:33:04.020 --> 00:33:04.600
logs.

00:33:04.600 --> 00:33:06.980
If the kernel logs
say, oh, there's

00:33:06.980 --> 00:33:09.110
insufficient power
available on this test,

00:33:09.110 --> 00:33:12.090
then it means that that webcam
that you purchased that you

00:33:12.090 --> 00:33:14.590
thought was a low-power is
not actually a low power one,

00:33:14.590 --> 00:33:16.860
so get a new one,
or get a USB hub.

00:33:19.490 --> 00:33:22.620
The beauty of the Glassware
that I built over the week

00:33:22.620 --> 00:33:26.340
is that it's less than
300 lines of Java code.

00:33:26.340 --> 00:33:29.520
Because the webcam
can be accessed

00:33:29.520 --> 00:33:32.330
using standard
Android camera API.

00:33:32.330 --> 00:33:37.240
That gets a number of cameras'
method-- it'll return two.

00:33:37.240 --> 00:33:40.120
Camera index 0 will be
the internal camera,

00:33:40.120 --> 00:33:41.830
and 1 will be the webcam.

00:33:41.830 --> 00:33:45.100
And after you said
proper size and frames

00:33:45.100 --> 00:33:48.510
per second and pixel
format, and then attach

00:33:48.510 --> 00:33:50.850
a SurfaceHolder to
it, you can start

00:33:50.850 --> 00:33:53.150
a preview, which is
what you just saw.

00:33:55.900 --> 00:33:57.710
The direct rendering
callback that you're

00:33:57.710 --> 00:34:00.700
going to attack to
the LiveCard, it

00:34:00.700 --> 00:34:03.350
is a subclass of the
SurfaceHolder callback.

00:34:03.350 --> 00:34:06.750
It has one specific
Glass callback method,

00:34:06.750 --> 00:34:08.020
which is rendering paused.

00:34:08.020 --> 00:34:12.350
This is what partially
what made this demo work is

00:34:12.350 --> 00:34:15.900
that this response to
the visibility state

00:34:15.900 --> 00:34:16.980
of the LiveCards.

00:34:16.980 --> 00:34:19.150
When LiveCard is
no longer visible,

00:34:19.150 --> 00:34:24.440
that paused boolean
variable returned true.

00:34:24.440 --> 00:34:27.165
At that point, release
the expensive resources,

00:34:27.165 --> 00:34:29.040
such as camera, which
is what I'm doing here.

00:34:32.929 --> 00:34:35.230
The two quick snippets that
I showed you earlier on

00:34:35.230 --> 00:34:38.090
is part of that
MyCameraRender class, which

00:34:38.090 --> 00:34:44.000
I pass on to the
CardSurfaceHolder as a call

00:34:44.000 --> 00:34:45.090
back.

00:34:45.090 --> 00:34:48.900
If you remember from the
demo, I used Options menu.

00:34:48.900 --> 00:34:52.850
But in typical Android world,
you start your own activity

00:34:52.850 --> 00:34:55.780
and you draw a menu using it.

00:34:55.780 --> 00:34:59.100
But LiveCard is a
remote activity.

00:34:59.100 --> 00:35:04.850
The way that this works is that
thankfully, when you initiate

00:35:04.850 --> 00:35:09.500
a LiveCard, you can
assign a pending intent.

00:35:09.500 --> 00:35:14.570
In my case, I assign an
activity whose sole purpose

00:35:14.570 --> 00:35:19.000
is to draw the menu
activity, so that's

00:35:19.000 --> 00:35:22.160
when the LiveCard is tapped,
that pending intent gets fired

00:35:22.160 --> 00:35:25.050
and my own activity
starts my own menu logic.

00:35:31.030 --> 00:35:32.900
To put this demo
into perspective,

00:35:32.900 --> 00:35:35.970
all of the other
demos and PY's demo,

00:35:35.970 --> 00:35:40.910
it uses the USB port, and
some of Android's default APIs

00:35:40.910 --> 00:35:47.400
such as camera and the menu,
and the LiveCard GDK API

00:35:47.400 --> 00:35:51.480
to create this Glassware.

00:35:51.480 --> 00:35:54.530
I believe that this
setup doesn't stop here,

00:35:54.530 --> 00:35:56.670
but it can be used
in other application

00:35:56.670 --> 00:35:59.820
domains, such as
medical, as an endoscope,

00:35:59.820 --> 00:36:02.820
or for car mechanics-- they can
create a boroscope out of it.

00:36:02.820 --> 00:36:06.240
And for a computer vision
people-- folks out here--

00:36:06.240 --> 00:36:11.340
can use the second camera to
do their stereoscopic analysis.

00:36:11.340 --> 00:36:13.255
The sky's the limit, basically.

00:36:16.140 --> 00:36:18.620
In summary, today
we covered some

00:36:18.620 --> 00:36:22.480
of the APIs and tools
that are part of the GDK,

00:36:22.480 --> 00:36:26.180
and that what we did on
Android to enable all of this.

00:36:26.180 --> 00:36:29.350
We showed you two demos
and one existing feature

00:36:29.350 --> 00:36:32.000
that explores the
hardware components, GDK

00:36:32.000 --> 00:36:34.080
APIs, and Android APIs.

00:36:37.330 --> 00:36:38.910
That's it.

00:36:38.910 --> 00:36:40.550
Thank you for
coming to our talk.

00:36:50.100 --> 00:36:52.570
If you have any questions,
line up behind the microphones.

00:37:15.720 --> 00:37:16.630
Hello.

00:37:16.630 --> 00:37:21.200
AUDIENCE: Hello, Michael
Prentice from GDG Space Coast.

00:37:21.200 --> 00:37:25.850
Last year's demo showed using a
keyboard or other Bluetooth HID

00:37:25.850 --> 00:37:27.270
devices.

00:37:27.270 --> 00:37:30.160
Right now, that's
not working so well.

00:37:30.160 --> 00:37:32.100
Is there any plans
in the immediate time

00:37:32.100 --> 00:37:36.480
frame to solve that, and also
support for Bluetooth headset

00:37:36.480 --> 00:37:37.630
devices?

00:37:37.630 --> 00:37:39.380
HYUNYOUNG SONG: You
want to take this one?

00:37:39.380 --> 00:37:41.370
PY LALIGAND: Sure.

00:37:41.370 --> 00:37:44.960
Yes, so right now, we're aware
this doesn't work anymore.

00:37:44.960 --> 00:37:47.850
I don't if you remember,
but last year, the talk

00:37:47.850 --> 00:37:50.700
was Void Your Warranty-- more
of the hacking versions that

00:37:50.700 --> 00:37:55.100
came with no guarantee
that stuff would stick.

00:37:55.100 --> 00:37:57.300
But actually, we are
obviously interested

00:37:57.300 --> 00:38:01.220
in remote peripherals,
especially with Bluetooth.

00:38:01.220 --> 00:38:03.980
Functionally, right now
it's not a priority.

00:38:03.980 --> 00:38:07.070
When we get done fixing that,
we'll probably fix that.

00:38:07.070 --> 00:38:08.530
Same thing with
Bluetooth headsets.

00:38:08.530 --> 00:38:12.579
I think that's one of the
top-requested features.

00:38:12.579 --> 00:38:14.870
HYUNYOUNG SONG: It's one of
those things that I-- we're

00:38:14.870 --> 00:38:17.560
really working hard to
bring it back, as well.

00:38:17.560 --> 00:38:18.427
It'll come.

00:38:18.427 --> 00:38:20.760
PY LALIGAND: By the way,
there's a work around for this.

00:38:20.760 --> 00:38:23.135
If you really need a
keyboard, over ADB,

00:38:23.135 --> 00:38:27.972
you can just use the ADB
shell input key event comment.

00:38:27.972 --> 00:38:29.680
HYUNYOUNG SONG: 61,
I think, is the path.

00:38:29.680 --> 00:38:30.650
PY LALIGAND: Whatever.

00:38:30.650 --> 00:38:32.907
It's whatever key code
you can send to the app.

00:38:32.907 --> 00:38:34.490
So you don't really
need the keyboard.

00:38:37.420 --> 00:38:43.920
HYUNYOUNG SONG: So we'll
take one from the back.

00:38:43.920 --> 00:38:46.960
AUDIENCE: Are there
any plans to bring back

00:38:46.960 --> 00:38:50.779
Static Card Generation in
the timeline in the GDK.

00:38:50.779 --> 00:38:52.070
PY LALIGAND: Not at the moment.

00:38:57.244 --> 00:38:58.910
AUDIENCE: OK, I have
one quick question.

00:38:58.910 --> 00:39:00.870
Are you guys working
in line with Android

00:39:00.870 --> 00:39:04.770
to work with the L release?

00:39:04.770 --> 00:39:06.765
With the L release?

00:39:06.765 --> 00:39:07.880
HYUNYOUNG SONG: Yes.

00:39:07.880 --> 00:39:11.210
I think during the
Wearable Session,

00:39:11.210 --> 00:39:16.020
Timothy described
what we're working on,

00:39:16.020 --> 00:39:19.290
which is we're already working
with them to bring even

00:39:19.290 --> 00:39:23.300
AndroidWear API to Glass so
that from your phone, when

00:39:23.300 --> 00:39:25.030
you get a notification,
it doesn't only

00:39:25.030 --> 00:39:28.680
send it to your
watch, but also Glass.

00:39:28.680 --> 00:39:33.630
A lot of that needs
support from the L release.

00:39:36.240 --> 00:39:38.550
AUDIENCE: Mac Coffman, GDG LA.

00:39:38.550 --> 00:39:40.440
In the past, there's
been a lot of conflicts

00:39:40.440 --> 00:39:43.040
with Google Apps
device policies.

00:39:43.040 --> 00:39:44.866
Is that something that's
going to be worked

00:39:44.866 --> 00:39:46.490
on making this more
of a corporate tool

00:39:46.490 --> 00:39:47.760
than just a personal one?

00:39:50.940 --> 00:39:52.300
PY LALIGAND: Yes.

00:39:52.300 --> 00:39:55.820
I believe we recently
announced our AdWords program,

00:39:55.820 --> 00:39:57.620
and we have a
couple of partners.

00:39:57.620 --> 00:39:59.900
I think that's also one of
the top-requested features.

00:39:59.900 --> 00:40:02.070
It's still a very
early effort, but I

00:40:02.070 --> 00:40:03.980
believe device
admin policies are

00:40:03.980 --> 00:40:08.481
among the top things we need
to fix and make work on Glass.

00:40:08.481 --> 00:40:09.480
AUDIENCE: OK, thank you.

00:40:09.480 --> 00:40:12.420
Also, side question--
did you try two cameras?

00:40:12.420 --> 00:40:13.916
HYUNYOUNG SONG: Two cameras?

00:40:13.916 --> 00:40:17.380
AUDIENCE: Yeah, with a USB hub.

00:40:17.380 --> 00:40:18.896
HYUNYOUNG SONG: I did not.

00:40:18.896 --> 00:40:20.270
AUDIENCE: But you
will, I'm sure.

00:40:20.270 --> 00:40:21.748
HYUNYOUNG SONG:
Yes, yes, I will.

00:40:25.850 --> 00:40:28.670
AUDIENCE: I saw you all recently
added a contextual voice

00:40:28.670 --> 00:40:30.230
command, which is really cool.

00:40:30.230 --> 00:40:31.730
I was wondering if
you all are going

00:40:31.730 --> 00:40:33.780
to expand upon that,
where something

00:40:33.780 --> 00:40:37.020
like keyword spotting, where
a user can say something

00:40:37.020 --> 00:40:41.611
like Next or Back or something,
and they can navigate the app

00:40:41.611 --> 00:40:43.860
without having to change the
UI and actually give them

00:40:43.860 --> 00:40:47.989
options to speak.

00:40:47.989 --> 00:40:50.280
PY LALIGAND: Just to check,
if I understand correctly--

00:40:50.280 --> 00:40:52.770
you would want something where
you don't necessarily have

00:40:52.770 --> 00:40:54.830
to say OK, Glass, or
provide a visual cue,

00:40:54.830 --> 00:40:56.210
but you just say Next, and--

00:40:56.210 --> 00:40:56.940
AUDIENCE: Right.

00:40:56.940 --> 00:40:59.760
Very lightweight
keyword spotting

00:40:59.760 --> 00:41:02.020
that could navigate
through an application.

00:41:02.020 --> 00:41:03.770
HYUNYOUNG SONG: It is
definitely something

00:41:03.770 --> 00:41:05.510
that we are--
basically, figuring out

00:41:05.510 --> 00:41:08.990
what kind of voice sections are
within regular conversation is

00:41:08.990 --> 00:41:12.510
something that we are
actively working on.

00:41:16.850 --> 00:41:19.950
There can be a lot
of false positives

00:41:19.950 --> 00:41:21.110
to enable this feature.

00:41:24.061 --> 00:41:26.310
PY LALIGAND: That's why,
actually, in the first place,

00:41:26.310 --> 00:41:28.640
we added that
keyword, OK, Glass.

00:41:28.640 --> 00:41:32.820
It's to make sure that
the user intent is clear,

00:41:32.820 --> 00:41:34.610
that you want to
issue a command.

00:41:34.610 --> 00:41:38.700
Because otherwise this is
super noisy, really noisy.

00:41:38.700 --> 00:41:39.627
AUDIENCE: Thanks.

00:41:39.627 --> 00:41:41.210
HYUNYOUNG SONG:
Gentleman in the back.

00:41:41.210 --> 00:41:42.270
AUDIENCE: Hello.

00:41:42.270 --> 00:41:44.280
I'm interested in
the ScreenCast Viewer

00:41:44.280 --> 00:41:46.897
App you are using on your demo.

00:41:46.897 --> 00:41:49.480
Do you think you could make this
available to Glass explorers?

00:41:49.480 --> 00:41:50.750
It would be really helpful.

00:41:53.560 --> 00:41:57.040
PY LALIGAND: OK, we'll take
that request back to the team.

00:41:57.040 --> 00:41:59.140
I think it's a fair request.

00:41:59.140 --> 00:42:01.220
We're obviously making
heavy use of it,

00:42:01.220 --> 00:42:02.830
so let's see what we can do.

00:42:02.830 --> 00:42:04.330
HYUNYOUNG SONG: But
for now, there's

00:42:04.330 --> 00:42:06.756
an Android screen monitor
that you can download.

00:42:06.756 --> 00:42:08.380
PY LALIGAND: I know,
but it's much more

00:42:08.380 --> 00:42:10.217
lively than your software.

00:42:10.217 --> 00:42:11.175
HYUNYOUNG SONG: Oh, OK.

00:42:11.175 --> 00:42:12.630
Future request-- accepted.

00:42:12.630 --> 00:42:13.463
PY LALIGAND: Thanks.

00:42:16.060 --> 00:42:18.360
AUDIENCE: With USB On the
Go just over the horizon,

00:42:18.360 --> 00:42:21.699
are you planning to offer any
other USB devices besides just

00:42:21.699 --> 00:42:22.240
the earpiece?

00:42:26.130 --> 00:42:28.130
PY LALIGAND: I have no idea.

00:42:28.130 --> 00:42:29.939
We're the software people.

00:42:29.939 --> 00:42:31.230
AUDIENCE: How about a boom mic?

00:42:33.740 --> 00:42:34.811
A boom mic.

00:42:34.811 --> 00:42:35.935
HYUNYOUNG SONG: A boom mic.

00:42:35.935 --> 00:42:37.150
Yes, that's a great idea.

00:42:37.150 --> 00:42:38.983
PY LALIGAND: I don't
even know what that is.

00:42:41.710 --> 00:42:43.190
In the back?

00:42:43.190 --> 00:42:45.620
AUDIENCE: Could you
provide some timelines

00:42:45.620 --> 00:42:50.080
for this L release
support on Glass?

00:42:50.080 --> 00:42:52.380
I have had a lot of trouble
making Bluetooth LE totally

00:42:52.380 --> 00:42:54.570
work properly.

00:42:54.570 --> 00:42:56.580
I'm very much
interested in knowing

00:42:56.580 --> 00:43:01.870
when the notifications
will just work, basically.

00:43:01.870 --> 00:43:03.710
PY LALIGAND: Well,
actually, they.

00:43:03.710 --> 00:43:07.700
It requires some tricky bits.

00:43:07.700 --> 00:43:10.390
But, I mean, they work
certainly with that ball.

00:43:10.390 --> 00:43:12.810
That really depends
on what device

00:43:12.810 --> 00:43:14.310
you're working with, too.

00:43:14.310 --> 00:43:16.960
It's fairly tricky.

00:43:16.960 --> 00:43:20.770
As for the initial question on
the timeline for the L release,

00:43:20.770 --> 00:43:23.082
the short answer is no.

00:43:23.082 --> 00:43:25.290
Not because we don't really
want that-- I don't think

00:43:25.290 --> 00:43:28.450
we know at this point for sure.

00:43:28.450 --> 00:43:30.590
AUDIENCE: Thank you.

00:43:30.590 --> 00:43:31.800
AUDIENCE: Hi. [INAUDIBLE].

00:43:31.800 --> 00:43:34.090
I just wanted to
hear your thoughts

00:43:34.090 --> 00:43:37.410
on-- have you done any video
hardware acceleration using

00:43:37.410 --> 00:43:41.710
the H.264 hardware
accelerating Glass?

00:43:41.710 --> 00:43:46.690
If so, can you guys provide
examples at some point?

00:43:46.690 --> 00:43:47.490
PY LALIGAND: You.

00:43:47.490 --> 00:43:49.500
HYUNYOUNG SONG: 264.

00:43:49.500 --> 00:43:53.500
I think overall Google
is moving away from 264,

00:43:53.500 --> 00:43:58.762
and I believe the latest in
quarter that we have are VP8.

00:43:58.762 --> 00:44:00.470
AUDIENCE: Right, but
VP8 isn't hardware--

00:44:00.470 --> 00:44:04.124
there's no hardware
accelerator for Glass.

00:44:04.124 --> 00:44:06.040
Is there any way to get
a hardware accelerator

00:44:06.040 --> 00:44:07.977
video, then, for my Glass unit?

00:44:07.977 --> 00:44:09.310
PY LALIGAND: Not that I know of.

00:44:09.310 --> 00:44:12.360
For this kind of
stuff, I invite you

00:44:12.360 --> 00:44:16.750
to go to the Glass community
and try to get answers there.

00:44:16.750 --> 00:44:18.250
Because I know
more people monitor

00:44:18.250 --> 00:44:21.800
that than people who
come on stage at I/O.

00:44:21.800 --> 00:44:24.360
AUDIENCE: All right, thanks.

00:44:24.360 --> 00:44:27.150
PY LALIGAND: Yes.

00:44:27.150 --> 00:44:28.026
AUDIENCE: OK, thanks.

00:44:28.026 --> 00:44:29.858
I may have missed this
in the very beginning

00:44:29.858 --> 00:44:31.460
because I was late,
but have you guys

00:44:31.460 --> 00:44:34.970
given any kind of time frame for
updating Google Play Services

00:44:34.970 --> 00:44:37.650
on Glass to be relatively
standard, and not

00:44:37.650 --> 00:44:40.324
for the same API as
it is everywhere else?

00:44:40.324 --> 00:44:41.740
PY LALIGAND: That's
also something

00:44:41.740 --> 00:44:45.840
for which we have
a lot of requests.

00:44:45.840 --> 00:44:47.450
We're working on
it, as something.

00:44:47.450 --> 00:44:49.440
We can't really
provide timelines.

00:44:49.440 --> 00:44:51.190
I think in general
in the program,

00:44:51.190 --> 00:44:55.680
we prefer, in the words
of our software director,

00:44:55.680 --> 00:44:57.470
walk the walk,
then talk the talk.

00:44:57.470 --> 00:44:59.990
Meaning that we announce
things when they're ready,

00:44:59.990 --> 00:45:01.910
and we're not trying
to anticipate too much.

00:45:04.702 --> 00:45:06.160
HYUNYOUNG SONG:
All of these things

00:45:06.160 --> 00:45:08.880
bring the Default
GestureDetector, Google Play

00:45:08.880 --> 00:45:15.500
Services, features that we would
like to have ourselves, too.

00:45:15.500 --> 00:45:18.900
One of the priority was--
because bringing up the KitKat

00:45:18.900 --> 00:45:24.450
was the utmost priority, we
spent four months upgrading,

00:45:24.450 --> 00:45:25.680
and that was a lot of work.

00:45:25.680 --> 00:45:28.710
There's a lot of things that
are kind of behind that we want

00:45:28.710 --> 00:45:30.452
to get onto as soon as possible.

00:45:30.452 --> 00:45:31.910
PY LALIGAND:
Unfortunately, I think

00:45:31.910 --> 00:45:34.326
we're running out of time, so
we wanted to thank you again

00:45:34.326 --> 00:45:35.770
for coming to our talk.

00:45:35.770 --> 00:45:37.880
We'll maybe hang out
little bit outside

00:45:37.880 --> 00:45:40.030
if you have more questions.

00:45:40.030 --> 00:45:41.120
Thank you.

00:45:41.120 --> 00:45:42.670
HYUNYOUNG SONG: Thank you.

