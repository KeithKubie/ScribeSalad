WEBVTT
Kind: captions
Language: en

00:00:00.460 --> 00:00:04.780
So let's look at the solution to our
multicore versus single core quiz.

00:00:04.780 --> 00:00:07.440
This is what we had in
the old technology.

00:00:07.440 --> 00:00:12.080
In the new technology, one of these
cores is going to be half the size and

00:00:12.080 --> 00:00:13.740
half the power.

00:00:13.740 --> 00:00:17.330
So we have the option of either
replacing that with a better core that

00:00:17.330 --> 00:00:23.300
occupies the whole area, get us more
IPC, but consumes slightly more power.

00:00:23.300 --> 00:00:26.890
And then the question is, if we do
consume the whole power budget of

00:00:26.890 --> 00:00:31.690
the chip, which is a hundred watts,
how much can we increase this frequency.

00:00:31.690 --> 00:00:32.830
And with that frequency,

00:00:32.830 --> 00:00:37.670
what is the overall speed up versus
what we had in the old technology?

00:00:37.670 --> 00:00:42.950
The other options was just, put the two
cores that we can now fit on the chip.

00:00:42.950 --> 00:00:46.710
Each now gets us the same
IPC as the single core did.

00:00:46.710 --> 00:00:47.970
And together,

00:00:47.970 --> 00:00:51.970
they consume the whole power budget
of the chip at two gigahertz.

00:00:51.970 --> 00:00:53.052
So the question is,

00:00:53.052 --> 00:00:57.076
what's the speed up versus the old
technology with the two core approach?

00:00:57.076 --> 00:01:01.954
The first thing we need to figure out
here is how much can we raise this

00:01:01.954 --> 00:01:05.300
frequency here so
that we get to 100 watts.

00:01:05.300 --> 00:01:10.873
Well, we're allowed to increase
the power from 75 watts to 100 watts.

00:01:10.873 --> 00:01:14.320
That's a factor of 1.33.

00:01:14.320 --> 00:01:18.779
And remember that the dynamic power is
proportional to voltage squared times

00:01:18.779 --> 00:01:20.880
the frequency itself.

00:01:20.880 --> 00:01:25.010
And that we have to increase
the voltage in proportion to frequency.

00:01:25.010 --> 00:01:27.360
So if we are spending power
to increase the frequency,

00:01:27.360 --> 00:01:30.850
we have to proportionally get both
the voltage and the frequency up.

00:01:30.850 --> 00:01:34.060
And that means that we
will be spending power

00:01:34.060 --> 00:01:37.110
in proportion to the cube
of the frequency.

00:01:37.110 --> 00:01:42.635
That means that the frequency that
we can operate on is cubic root of

00:01:42.635 --> 00:01:48.740
1.33 times the old frequency,
and this is equal to 1.1.

00:01:48.740 --> 00:01:52.933
So our new frequency is 1.1
times the old frequency.

00:01:52.933 --> 00:01:57.040
The old frequency was 2 gigahertz.

00:01:57.040 --> 00:02:01.627
That means we can achieve 2.2 gigahertz
when we increase the power by

00:02:01.627 --> 00:02:03.085
a factor of 1.33.

00:02:03.085 --> 00:02:08.067
The speed up we achieve versus the old
technology will be the speed up we

00:02:08.067 --> 00:02:14.760
achieve because of a shorter clock cycle
time, and that speed up is 1.1 times.

00:02:14.760 --> 00:02:18.990
So we are 1.1 times faster now,
in terms of clock frequence,

00:02:18.990 --> 00:02:23.600
times the speed up we achieve
because our IPC's better.

00:02:23.600 --> 00:02:28.780
And if we divide 3.5 and 2.5, we get
a factor of 1.4 times the speed up which

00:02:29.920 --> 00:02:33.660
is because we have fewer instructions.

00:02:33.660 --> 00:02:38.550
But because we are executing exactly
the same code, that speed up is one.

00:02:38.550 --> 00:02:40.460
We don't speed up, really.

00:02:40.460 --> 00:02:42.880
So our overall speed up is just this.

00:02:42.880 --> 00:02:44.920
And it ends up being 1.54.

00:02:44.920 --> 00:02:48.580
Now, let us look at the two core option.

00:02:48.580 --> 00:02:51.040
We have the same IPC as before.

00:02:51.040 --> 00:02:53.150
But we now have two cores
that are doing that.

00:02:53.150 --> 00:02:56.760
So we are executing twice as
many instructions as before,

00:02:56.760 --> 00:03:00.710
at the same frequency and
at the same power.

00:03:00.710 --> 00:03:03.970
So the speed up versus the old
system here will simply be two.

00:03:03.970 --> 00:03:06.550
We are operating at the same frequency,

00:03:06.550 --> 00:03:11.370
splitting the same work into two pieces,
and each of the pieces is now

00:03:11.370 --> 00:03:15.750
done at the speed where we were
doing only one of the pieces.

00:03:15.750 --> 00:03:18.550
So overall we are getting
a speed up of two.

00:03:18.550 --> 00:03:22.560
As you can see, two cores are achieving
a better speed up relative to the old

00:03:22.560 --> 00:03:25.110
system, than a fancier core.

00:03:25.110 --> 00:03:29.150
Which means that if we indeed do have
programs that can use the two cored

00:03:29.150 --> 00:03:34.420
effectively, then this is the better
option than improving the core and

00:03:34.420 --> 00:03:36.020
consuming the cheap area that way.

