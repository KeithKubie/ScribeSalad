WEBVTT
Kind: captions
Language: en

00:00:00.500 --> 00:00:03.660
Hey game developers, are
you excited for Android L?

00:00:03.660 --> 00:00:07.220
My name is Shanee, and this
is what's new for games.

00:00:07.220 --> 00:00:09.220
Google I/O was just
a few months ago,

00:00:09.220 --> 00:00:10.900
and we have announced
some cool things

00:00:10.900 --> 00:00:14.900
like Android TV, which works
with a game controller.

00:00:14.900 --> 00:00:18.090
We also played with Cardboard
for virtual reality,

00:00:18.090 --> 00:00:22.160
which you can assemble on
your own from cardboard.

00:00:22.160 --> 00:00:24.760
While it would be really cool
to talk about bringing games

00:00:24.760 --> 00:00:28.770
to TV and virtual reality, I'm
going to focus on these topics

00:00:28.770 --> 00:00:30.100
here.

00:00:30.100 --> 00:00:33.050
If you're familiar with the
Google Play game services,

00:00:33.050 --> 00:00:36.710
it is interesting to note there
are a few changes coming in.

00:00:36.710 --> 00:00:39.300
First, we took the
Cloud Save feature

00:00:39.300 --> 00:00:42.580
and have given it a
facelift with Saved Games.

00:00:42.580 --> 00:00:45.940
Saved Games offers an
improved user experience,

00:00:45.940 --> 00:00:48.840
allowing you to upload
up to 3 megabytes of game

00:00:48.840 --> 00:00:52.930
data with an additional cover
image for the user to see,

00:00:52.930 --> 00:00:54.980
acting as a bookmark
and reminding them

00:00:54.980 --> 00:00:57.130
where they left your game.

00:00:57.130 --> 00:00:58.760
But that's not all.

00:00:58.760 --> 00:01:00.940
We are also adding
quests, which you

00:01:00.940 --> 00:01:03.650
can use to trigger
events in your game.

00:01:03.650 --> 00:01:05.920
Quests are a fun way
to make your game more

00:01:05.920 --> 00:01:10.840
alive and dynamic without having
to download a game update.

00:01:10.840 --> 00:01:15.290
For example, how about a
shiny sword for 50 zombie

00:01:15.290 --> 00:01:18.190
heads this weekend?

00:01:18.190 --> 00:01:19.330
Awesome.

00:01:19.330 --> 00:01:23.440
Simply go to the Developer
Console and declare a new quest

00:01:23.440 --> 00:01:25.830
and set up a reward
for your players.

00:01:25.830 --> 00:01:29.940
Use them to engage your
players and keep them active.

00:01:29.940 --> 00:01:32.220
For more information
about the new features,

00:01:32.220 --> 00:01:34.130
check out Duncan's
video on what's

00:01:34.130 --> 00:01:37.730
new in Google Play Games.

00:01:37.730 --> 00:01:39.530
The following
features are coming up

00:01:39.530 --> 00:01:41.740
with the Android L SDK.

00:01:41.740 --> 00:01:44.370
You can already find them
in the new [INAUDIBLE]

00:01:44.370 --> 00:01:46.740
and the Android L preview.

00:01:46.740 --> 00:01:50.400
We are adding support
for 64-bit architecture.

00:01:50.400 --> 00:01:53.400
64-bit hardware has twice
the number of registers

00:01:53.400 --> 00:01:56.820
and should boost our
game's performance.

00:01:56.820 --> 00:01:59.410
To compile for it, you
need to specify support

00:01:59.410 --> 00:02:01.350
for a target platform.

00:02:01.350 --> 00:02:06.300
We added explicit support
for arm, x86, and mips.

00:02:06.300 --> 00:02:09.259
Simply add the target ABIs
inside your application

00:02:09.259 --> 00:02:12.860
make file, and you
are good to go.

00:02:12.860 --> 00:02:15.330
A really cool addition
for graphic programmers

00:02:15.330 --> 00:02:20.855
is the new OpenGL ES 3.1 API
and the Android extension pack.

00:02:20.855 --> 00:02:24.440
We are really getting to
desktop level graphics here.

00:02:24.440 --> 00:02:26.360
This can be used to
enhance your game's

00:02:26.360 --> 00:02:28.490
features and performance.

00:02:28.490 --> 00:02:31.030
The biggest changes
is in the pipeline

00:02:31.030 --> 00:02:34.134
with the addition of
three new shadow stages.

00:02:34.134 --> 00:02:35.550
Let's take a more
determined look,

00:02:35.550 --> 00:02:37.390
starting with Tessellation.

00:02:37.390 --> 00:02:41.480
Tessellation shadows take
geometry and subdivide it,

00:02:41.480 --> 00:02:43.570
adding additional
triangles allowing

00:02:43.570 --> 00:02:47.500
you to increase the level of
detail dynamically on the GPU.

00:02:47.500 --> 00:02:50.670
[INAUDIBLE] for this video.

00:02:50.670 --> 00:02:53.890
Geometry Shadows, on the other
hand, take a single vertex

00:02:53.890 --> 00:02:57.450
and can output multiple new
vertices, making a new mesh

00:02:57.450 --> 00:02:59.320
or extending the existing one.

00:02:59.320 --> 00:03:03.380
These are great for particles,
glass, and even shadows.

00:03:03.380 --> 00:03:05.820
And finally, Compute Shadows.

00:03:05.820 --> 00:03:09.060
This video by Nvidia
shows Compute Shadows

00:03:09.060 --> 00:03:13.370
been used for creating complex
animations and effects entirely

00:03:13.370 --> 00:03:15.000
on the GPU.

00:03:15.000 --> 00:03:17.580
You can use Compute
Shadows for many things,

00:03:17.580 --> 00:03:21.150
from complex physics,
high-quantity lights, and even

00:03:21.150 --> 00:03:23.170
AI.

00:03:23.170 --> 00:03:24.890
The last we've
changed the graphics

00:03:24.890 --> 00:03:28.860
is the addition of ASTC
texture support on the GPU.

00:03:28.860 --> 00:03:31.790
This means you can copy the
textures by data straight

00:03:31.790 --> 00:03:34.260
to the graphics memory,
reducing the memory

00:03:34.260 --> 00:03:37.540
footprint of your application
and the loading times.

00:03:37.540 --> 00:03:40.480
Like all compressors,
ASTC ports as a texture

00:03:40.480 --> 00:03:42.810
and provides a
lower-sized output

00:03:42.810 --> 00:03:45.190
with some quality differences.

00:03:45.190 --> 00:03:47.480
The variety in the
difference of the image

00:03:47.480 --> 00:03:50.450
shows ASTC is quite
high quality, hopefully

00:03:50.450 --> 00:03:54.360
in a good exchange between
reduced size and speed compared

00:03:54.360 --> 00:03:56.500
to image quality loss.

00:03:56.500 --> 00:03:59.720
You can set different block
footprint for compression.

00:03:59.720 --> 00:04:02.510
The larger the block, the
smaller the image file.

00:04:02.510 --> 00:04:06.680
But more likely, the image
differences will be visible.

00:04:06.680 --> 00:04:10.670
Finally, we have improvements
to the OpenSL audio API.

00:04:10.670 --> 00:04:13.080
We have lowered the
audio input latency,

00:04:13.080 --> 00:04:15.770
offering reduced lag
between recording your audio

00:04:15.770 --> 00:04:17.779
and outputting it
back to the user.

00:04:17.779 --> 00:04:21.620
You can finally make that mobile
karaoke game you always wanted.

00:04:21.620 --> 00:04:24.460
We also added support
for multi-channel mixing,

00:04:24.460 --> 00:04:26.400
allowing you to send
your audio output

00:04:26.400 --> 00:04:28.150
to more than two channels.

00:04:28.150 --> 00:04:30.040
If you're expecting
your game to be played

00:04:30.040 --> 00:04:33.590
with a surround system--
for example on Android TV,

00:04:33.590 --> 00:04:36.640
maybe-- you should really
take a look at that.

00:04:36.640 --> 00:04:39.740
Finally, we added support
for floating point buffers.

00:04:39.740 --> 00:04:43.530
These provide high dynamic
range, consistent accuracy,

00:04:43.530 --> 00:04:44.890
and more head room.

00:04:44.890 --> 00:04:47.770
For more information on
floating point in audio,

00:04:47.770 --> 00:04:51.070
take a look at Glenn's
video, "Will it Float?"

00:04:51.070 --> 00:04:54.410
Check out the new NDK 64-bit
target from the Android

00:04:54.410 --> 00:04:57.380
Developers website to play
with the new features.

00:04:57.380 --> 00:05:00.180
And don't forget, use
Google Play Game Services

00:05:00.180 --> 00:05:03.230
to drive engagement
in your games.

00:05:03.230 --> 00:05:04.700
Thank you for watching.

00:05:04.700 --> 00:05:06.570
Now go ahead and
make your games even

00:05:06.570 --> 00:05:09.120
more fun and visually
stunning with the new features

00:05:09.120 --> 00:05:11.050
in Android L.

