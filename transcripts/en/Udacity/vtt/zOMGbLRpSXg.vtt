WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.000
Now that we remember what these operators do--this is actually doubling y

00:00:04.000 --> 00:00:07.000
by moving it one position to the left in binary.

00:00:07.000 --> 00:00:10.000
This is halving y or rounding down and halving y for x.

00:00:10.000 --> 00:00:14.000
You may recall that this percent sign is the modulus operator.

00:00:14.000 --> 00:00:18.000
What this is saying is take x, divide it by 2 and tell me what the remainder is.

00:00:18.000 --> 00:00:20.000
If it's 1 then do this.

00:00:20.000 --> 00:00:23.000
What does it mean for a remainder to be one? It means that it's an odd number.

00:00:23.000 --> 00:00:27.000
Whenever x is odd, it adds y to z.

00:00:27.000 --> 00:00:30.000
Then no matter what it doubles y, halves x, and goes back to the loop

00:00:30.000 --> 00:00:32.000
and continues doing this until x is 0.

00:00:32.000 --> 00:00:35.000
Unless this is obvious to you, this may seem a little bit magical again.

00:00:35.000 --> 00:00:38.000
Why would this actually be equivalent to naive?

00:00:38.000 --> 00:00:40.000
Why would this actually be computing multiplication?

00:00:40.000 --> 00:00:42.000
Let's just make sure that it does first.

00:00:42.000 --> 00:00:49.000
Let's print russian(14, 11).

00:00:49.000 --> 00:00:53.000
We'll run that and see what it gives us--154. All right.

00:00:53.000 --> 00:00:55.000
That is, in fact, 14 * 11.

00:00:55.000 --> 00:00:58.000
We're going to need to step through and try to understand why it works out the way that it does.

00:00:58.000 --> 00:01:01.000
If we give russian the input (14, 11),

00:01:01.000 --> 00:01:05.000
it's going to assign these to x and y and start off the z at 0.

00:01:05.000 --> 00:01:08.000
Let's take a look at that. Now it's going to go through the while loop.

00:01:08.000 --> 00:01:12.000
On each iteration, it's going to check to see whether x is odd or even.

00:01:12.000 --> 00:01:15.000
If it's odd, then it's going to add y to z.

00:01:15.000 --> 00:01:17.000
We start off at 14, which is not odd.

00:01:17.000 --> 00:01:21.000
What does it tell us to do? It tells us to double y and halve x.

00:01:21.000 --> 00:01:24.000
We get down to 7, 22, and 0 remains 0.

00:01:24.000 --> 00:01:26.000
The next time through we see that x is odd,

00:01:26.000 --> 00:01:28.000
so we add y into z. Makes it a 22.

00:01:28.000 --> 00:01:30.000
We halve x and double y.

00:01:30.000 --> 00:01:32.000
In this case halving and rounding down.

00:01:32.000 --> 00:01:35.000
That gets us a 3 and a 44.

00:01:35.000 --> 00:01:38.000
The next time through the while loop we see that x is 3, which is odd.

00:01:38.000 --> 00:01:42.000
That tells us to add 44 into z, giving it a total of 66.

00:01:42.000 --> 00:01:45.000
Then we halve x, rounding down and double y.

00:01:45.000 --> 00:01:48.000
Go back up to the top of the while loop, we see x is odd again.

00:01:48.000 --> 00:01:52.000
We add y into z. Then we halve x, rounding down and double y.

00:01:52.000 --> 00:01:55.000
At which point x becomes 0, and it returns the value of z,

00:01:55.000 --> 00:01:59.000
which lo and behold is 154. It seems to have done the right thing.

00:01:59.000 --> 00:02:03.000
What we've really done here is we've added several values of y.

00:02:03.000 --> 00:02:07.000
As x is counting down, each of the times x becomes odd we add those together.

00:02:07.000 --> 00:02:09.000
It ends up being the sum of those three numbers.

00:02:09.000 --> 00:02:11.000
You have to admit that's kind of cool, right?

00:02:11.000 --> 09:59:59.000
It's somehow doing the equivalent of 14 * 11, but not the way we would normally do it.

