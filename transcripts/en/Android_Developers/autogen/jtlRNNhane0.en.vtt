WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:05.180
Oh async tasks how we have a love/hate

00:00:05.180 --> 00:00:05.190
Oh async tasks how we have a love/hate
 

00:00:05.190 --> 00:00:07.220
Oh async tasks how we have a love/hate
relationship with you on the one hand

00:00:07.220 --> 00:00:07.230
relationship with you on the one hand
 

00:00:07.230 --> 00:00:08.870
relationship with you on the one hand
you make it really easy to get work off

00:00:08.870 --> 00:00:08.880
you make it really easy to get work off
 

00:00:08.880 --> 00:00:10.490
you make it really easy to get work off
the main thread but on the other hand

00:00:10.490 --> 00:00:10.500
the main thread but on the other hand
 

00:00:10.500 --> 00:00:12.200
the main thread but on the other hand
you make it really easy to do a bunch of

00:00:12.200 --> 00:00:12.210
you make it really easy to do a bunch of
 

00:00:12.210 --> 00:00:14.720
you make it really easy to do a bunch of
really bad stuff my name is Colt McAnlis

00:00:14.720 --> 00:00:14.730
really bad stuff my name is Colt McAnlis
 

00:00:14.730 --> 00:00:16.670
really bad stuff my name is Colt McAnlis
and while async task provides some easy

00:00:16.670 --> 00:00:16.680
and while async task provides some easy
 

00:00:16.680 --> 00:00:18.529
and while async task provides some easy
interfaces if you're not careful it can

00:00:18.529 --> 00:00:18.539
interfaces if you're not careful it can
 

00:00:18.539 --> 00:00:20.510
interfaces if you're not careful it can
hurt your apps performance and end up

00:00:20.510 --> 00:00:20.520
hurt your apps performance and end up
 

00:00:20.520 --> 00:00:22.580
hurt your apps performance and end up
causing memory leaks so here's a

00:00:22.580 --> 00:00:22.590
causing memory leaks so here's a
 

00:00:22.590 --> 00:00:24.590
causing memory leaks so here's a
familiar situation the user wipes the

00:00:24.590 --> 00:00:24.600
familiar situation the user wipes the
 

00:00:24.600 --> 00:00:26.480
familiar situation the user wipes the
screen kicking off some bitmap decoding

00:00:26.480 --> 00:00:26.490
screen kicking off some bitmap decoding
 

00:00:26.490 --> 00:00:28.550
screen kicking off some bitmap decoding
to it occur and because that work is

00:00:28.550 --> 00:00:28.560
to it occur and because that work is
 

00:00:28.560 --> 00:00:29.960
to it occur and because that work is
going to take a long time you need to

00:00:29.960 --> 00:00:29.970
going to take a long time you need to
 

00:00:29.970 --> 00:00:31.370
going to take a long time you need to
hand it off to another thread so you

00:00:31.370 --> 00:00:31.380
hand it off to another thread so you
 

00:00:31.380 --> 00:00:33.229
hand it off to another thread so you
don't cause hitching in your animations

00:00:33.229 --> 00:00:33.239
don't cause hitching in your animations
 

00:00:33.239 --> 00:00:34.880
don't cause hitching in your animations
but once the bitmaps have been decoded

00:00:34.880 --> 00:00:34.890
but once the bitmaps have been decoded
 

00:00:34.890 --> 00:00:36.440
but once the bitmaps have been decoded
you need to get them back to the UI

00:00:36.440 --> 00:00:36.450
you need to get them back to the UI
 

00:00:36.450 --> 00:00:38.540
you need to get them back to the UI
thread so that you can update your views

00:00:38.540 --> 00:00:38.550
thread so that you can update your views
 

00:00:38.550 --> 00:00:40.130
thread so that you can update your views
if this happens a lot in your

00:00:40.130 --> 00:00:40.140
if this happens a lot in your
 

00:00:40.140 --> 00:00:41.840
if this happens a lot in your
application then it's not worth writing

00:00:41.840 --> 00:00:41.850
application then it's not worth writing
 

00:00:41.850 --> 00:00:43.280
application then it's not worth writing
all the one-off code snippets to make

00:00:43.280 --> 00:00:43.290
all the one-off code snippets to make
 

00:00:43.290 --> 00:00:45.020
all the one-off code snippets to make
this happen the right way this is

00:00:45.020 --> 00:00:45.030
this happen the right way this is
 

00:00:45.030 --> 00:00:47.240
this happen the right way this is
exactly why async task was created it

00:00:47.240 --> 00:00:47.250
exactly why async task was created it
 

00:00:47.250 --> 00:00:49.190
exactly why async task was created it
wraps up all of this gnarliness with

00:00:49.190 --> 00:00:49.200
wraps up all of this gnarliness with
 

00:00:49.200 --> 00:00:51.799
wraps up all of this gnarliness with
three simple function calls basically

00:00:51.799 --> 00:00:51.809
three simple function calls basically
 

00:00:51.809 --> 00:00:53.869
three simple function calls basically
the on pre execute function will happen

00:00:53.869 --> 00:00:53.879
the on pre execute function will happen
 

00:00:53.879 --> 00:00:55.549
the on pre execute function will happen
on the main thread and allow you to set

00:00:55.549 --> 00:00:55.559
on the main thread and allow you to set
 

00:00:55.559 --> 00:00:57.619
on the main thread and allow you to set
up the work you're about to do then the

00:00:57.619 --> 00:00:57.629
up the work you're about to do then the
 

00:00:57.629 --> 00:00:59.119
up the work you're about to do then the
do in background function will execute

00:00:59.119 --> 00:00:59.129
do in background function will execute
 

00:00:59.129 --> 00:01:01.700
do in background function will execute
on a worker thread actually doing the

00:01:01.700 --> 00:01:01.710
on a worker thread actually doing the
 

00:01:01.710 --> 00:01:04.130
on a worker thread actually doing the
computation and finally on post execute

00:01:04.130 --> 00:01:04.140
computation and finally on post execute
 

00:01:04.140 --> 00:01:06.050
computation and finally on post execute
is called on the main thread along with

00:01:06.050 --> 00:01:06.060
is called on the main thread along with
 

00:01:06.060 --> 00:01:07.310
is called on the main thread along with
the results of the work that you've just

00:01:07.310 --> 00:01:07.320
the results of the work that you've just
 

00:01:07.320 --> 00:01:09.289
the results of the work that you've just
completed simply overload these three

00:01:09.289 --> 00:01:09.299
completed simply overload these three
 

00:01:09.299 --> 00:01:11.030
completed simply overload these three
functions in your own class and async

00:01:11.030 --> 00:01:11.040
functions in your own class and async
 

00:01:11.040 --> 00:01:12.289
functions in your own class and async
task will do the rest

00:01:12.289 --> 00:01:12.299
task will do the rest
 

00:01:12.299 --> 00:01:14.300
task will do the rest
now while this seems like an ideal

00:01:14.300 --> 00:01:14.310
now while this seems like an ideal
 

00:01:14.310 --> 00:01:16.640
now while this seems like an ideal
solution you need to be cautious there's

00:01:16.640 --> 00:01:16.650
solution you need to be cautious there's
 

00:01:16.650 --> 00:01:18.830
solution you need to be cautious there's
some nuances with async tasks that can

00:01:18.830 --> 00:01:18.840
some nuances with async tasks that can
 

00:01:18.840 --> 00:01:21.380
some nuances with async tasks that can
get you into trouble firstly all async

00:01:21.380 --> 00:01:21.390
get you into trouble firstly all async
 

00:01:21.390 --> 00:01:23.060
get you into trouble firstly all async
tasks that are created will share the

00:01:23.060 --> 00:01:23.070
tasks that are created will share the
 

00:01:23.070 --> 00:01:25.550
tasks that are created will share the
same thread and thus will execute in a

00:01:25.550 --> 00:01:25.560
same thread and thus will execute in a
 

00:01:25.560 --> 00:01:27.980
same thread and thus will execute in a
serial fashion from a single message

00:01:27.980 --> 00:01:27.990
serial fashion from a single message
 

00:01:27.990 --> 00:01:30.170
serial fashion from a single message
queue so if you kick off 20 work orders

00:01:30.170 --> 00:01:30.180
queue so if you kick off 20 work orders
 

00:01:30.180 --> 00:01:31.819
queue so if you kick off 20 work orders
and the third one takes an hour the

00:01:31.819 --> 00:01:31.829
and the third one takes an hour the
 

00:01:31.829 --> 00:01:33.859
and the third one takes an hour the
other 17 will block and wait until it's

00:01:33.859 --> 00:01:33.869
other 17 will block and wait until it's
 

00:01:33.869 --> 00:01:36.230
other 17 will block and wait until it's
done this is especially dangerous if you

00:01:36.230 --> 00:01:36.240
done this is especially dangerous if you
 

00:01:36.240 --> 00:01:38.090
done this is especially dangerous if you
kick off some work that's got a long

00:01:38.090 --> 00:01:38.100
kick off some work that's got a long
 

00:01:38.100 --> 00:01:40.429
kick off some work that's got a long
running while loop in it basically it'll

00:01:40.429 --> 00:01:40.439
running while loop in it basically it'll
 

00:01:40.439 --> 00:01:42.530
running while loop in it basically it'll
just freeze that thread from doing any

00:01:42.530 --> 00:01:42.540
just freeze that thread from doing any
 

00:01:42.540 --> 00:01:44.870
just freeze that thread from doing any
future work now to be fair there is a

00:01:44.870 --> 00:01:44.880
future work now to be fair there is a
 

00:01:44.880 --> 00:01:46.670
future work now to be fair there is a
way to force async tasks to execute in

00:01:46.670 --> 00:01:46.680
way to force async tasks to execute in
 

00:01:46.680 --> 00:01:48.830
way to force async tasks to execute in
the thread pooled fashion but in reality

00:01:48.830 --> 00:01:48.840
the thread pooled fashion but in reality
 

00:01:48.840 --> 00:01:50.420
the thread pooled fashion but in reality
if you're venturing into that area you

00:01:50.420 --> 00:01:50.430
if you're venturing into that area you
 

00:01:50.430 --> 00:01:51.770
if you're venturing into that area you
might just want to use the thread pool

00:01:51.770 --> 00:01:51.780
might just want to use the thread pool
 

00:01:51.780 --> 00:01:53.630
might just want to use the thread pool
primitive directly instead of all that

00:01:53.630 --> 00:01:53.640
primitive directly instead of all that
 

00:01:53.640 --> 00:01:56.480
primitive directly instead of all that
madness anyhow the second big problem

00:01:56.480 --> 00:01:56.490
madness anyhow the second big problem
 

00:01:56.490 --> 00:01:58.580
madness anyhow the second big problem
might be a little bit more familiar how

00:01:58.580 --> 00:01:58.590
might be a little bit more familiar how
 

00:01:58.590 --> 00:02:00.560
might be a little bit more familiar how
do you actually cancel a block of work I

00:02:00.560 --> 00:02:00.570
do you actually cancel a block of work I
 

00:02:00.570 --> 00:02:02.749
do you actually cancel a block of work I
mean async task has this handy cancel

00:02:02.749 --> 00:02:02.759
mean async task has this handy cancel
 

00:02:02.759 --> 00:02:05.569
mean async task has this handy cancel
function but does that really do well

00:02:05.569 --> 00:02:05.579
function but does that really do well
 

00:02:05.579 --> 00:02:07.069
function but does that really do well
remember that threads don't directly

00:02:07.069 --> 00:02:07.079
remember that threads don't directly
 

00:02:07.079 --> 00:02:08.630
remember that threads don't directly
contain the ability to interrupt the

00:02:08.630 --> 00:02:08.640
contain the ability to interrupt the
 

00:02:08.640 --> 00:02:11.390
contain the ability to interrupt the
current code being executed if you want

00:02:11.390 --> 00:02:11.400
current code being executed if you want
 

00:02:11.400 --> 00:02:13.160
current code being executed if you want
a threaded block of work to be able to

00:02:13.160 --> 00:02:13.170
a threaded block of work to be able to
 

00:02:13.170 --> 00:02:14.250
a threaded block of work to be able to
terminate early

00:02:14.250 --> 00:02:14.260
terminate early
 

00:02:14.260 --> 00:02:16.680
terminate early
you have to do two things number one add

00:02:16.680 --> 00:02:16.690
you have to do two things number one add
 

00:02:16.690 --> 00:02:18.690
you have to do two things number one add
some logic to check for a flag that says

00:02:18.690 --> 00:02:18.700
some logic to check for a flag that says
 

00:02:18.700 --> 00:02:20.880
some logic to check for a flag that says
the work has been canceled and number

00:02:20.880 --> 00:02:20.890
the work has been canceled and number
 

00:02:20.890 --> 00:02:23.039
the work has been canceled and number
two once the block of work is finished

00:02:23.039 --> 00:02:23.049
two once the block of work is finished
 

00:02:23.049 --> 00:02:24.720
two once the block of work is finished
let the other functions know that this

00:02:24.720 --> 00:02:24.730
let the other functions know that this
 

00:02:24.730 --> 00:02:26.910
let the other functions know that this
packets results are invalid and this is

00:02:26.910 --> 00:02:26.920
packets results are invalid and this is
 

00:02:26.920 --> 00:02:28.949
packets results are invalid and this is
exactly what the cancel function in a

00:02:28.949 --> 00:02:28.959
exactly what the cancel function in a
 

00:02:28.959 --> 00:02:31.050
exactly what the cancel function in a
sync task does it will set a flag and

00:02:31.050 --> 00:02:31.060
sync task does it will set a flag and
 

00:02:31.060 --> 00:02:33.210
sync task does it will set a flag and
allow the is canceled function to return

00:02:33.210 --> 00:02:33.220
allow the is canceled function to return
 

00:02:33.220 --> 00:02:35.100
allow the is canceled function to return
true so your code can check that

00:02:35.100 --> 00:02:35.110
true so your code can check that
 

00:02:35.110 --> 00:02:37.380
true so your code can check that
regularly to see if it should exit early

00:02:37.380 --> 00:02:37.390
regularly to see if it should exit early
 

00:02:37.390 --> 00:02:39.479
regularly to see if it should exit early
in addition after do and background

00:02:39.479 --> 00:02:39.489
in addition after do and background
 

00:02:39.489 --> 00:02:42.630
in addition after do and background
returns a canceled async task will call

00:02:42.630 --> 00:02:42.640
returns a canceled async task will call
 

00:02:42.640 --> 00:02:45.690
returns a canceled async task will call
on canceled on the UI thread instead of

00:02:45.690 --> 00:02:45.700
on canceled on the UI thread instead of
 

00:02:45.700 --> 00:02:48.000
on canceled on the UI thread instead of
on post execute this is so you can

00:02:48.000 --> 00:02:48.010
on post execute this is so you can
 

00:02:48.010 --> 00:02:49.680
on post execute this is so you can
properly update your UI or destroy

00:02:49.680 --> 00:02:49.690
properly update your UI or destroy
 

00:02:49.690 --> 00:02:51.569
properly update your UI or destroy
specific memory allocations that you

00:02:51.569 --> 00:02:51.579
specific memory allocations that you
 

00:02:51.579 --> 00:02:52.319
specific memory allocations that you
might not need anymore

00:02:52.319 --> 00:02:52.329
might not need anymore
 

00:02:52.329 --> 00:02:54.869
might not need anymore
yada-yada-yada and finally be aware that

00:02:54.869 --> 00:02:54.879
yada-yada-yada and finally be aware that
 

00:02:54.879 --> 00:02:57.839
yada-yada-yada and finally be aware that
it's really really easy to leak memory

00:02:57.839 --> 00:02:57.849
it's really really easy to leak memory
 

00:02:57.849 --> 00:02:59.309
it's really really easy to leak memory
with async tasks

00:02:59.309 --> 00:02:59.319
with async tasks
 

00:02:59.319 --> 00:03:01.380
with async tasks
check out this very common seeing all

00:03:01.380 --> 00:03:01.390
check out this very common seeing all
 

00:03:01.390 --> 00:03:03.449
check out this very common seeing all
the time code pattern in Android apps

00:03:03.449 --> 00:03:03.459
the time code pattern in Android apps
 

00:03:03.459 --> 00:03:05.789
the time code pattern in Android apps
where an async task is declared as an

00:03:05.789 --> 00:03:05.799
where an async task is declared as an
 

00:03:05.799 --> 00:03:08.699
where an async task is declared as an
inner class of some activity this is a

00:03:08.699 --> 00:03:08.709
inner class of some activity this is a
 

00:03:08.709 --> 00:03:11.339
inner class of some activity this is a
really big problem having async tasks

00:03:11.339 --> 00:03:11.349
really big problem having async tasks
 

00:03:11.349 --> 00:03:13.259
really big problem having async tasks
declared is an inner class creates an

00:03:13.259 --> 00:03:13.269
declared is an inner class creates an
 

00:03:13.269 --> 00:03:16.110
declared is an inner class creates an
implicit reference to the outer activity

00:03:16.110 --> 00:03:16.120
implicit reference to the outer activity
 

00:03:16.120 --> 00:03:17.910
implicit reference to the outer activity
which can then result in lete memory

00:03:17.910 --> 00:03:17.920
which can then result in lete memory
 

00:03:17.920 --> 00:03:20.099
which can then result in lete memory
which means it won't be destroyed until

00:03:20.099 --> 00:03:20.109
which means it won't be destroyed until
 

00:03:20.109 --> 00:03:22.650
which means it won't be destroyed until
the async task work completes obviously

00:03:22.650 --> 00:03:22.660
the async task work completes obviously
 

00:03:22.660 --> 00:03:24.180
the async task work completes obviously
this is less than ideal if you're trying

00:03:24.180 --> 00:03:24.190
this is less than ideal if you're trying
 

00:03:24.190 --> 00:03:26.039
this is less than ideal if you're trying
to load a new activity and you still

00:03:26.039 --> 00:03:26.049
to load a new activity and you still
 

00:03:26.049 --> 00:03:27.809
to load a new activity and you still
have several destroyed activities in

00:03:27.809 --> 00:03:27.819
have several destroyed activities in
 

00:03:27.819 --> 00:03:29.640
have several destroyed activities in
memory since their work hasn't been

00:03:29.640 --> 00:03:29.650
memory since their work hasn't been
 

00:03:29.650 --> 00:03:32.220
memory since their work hasn't been
completed the gist here is that while

00:03:32.220 --> 00:03:32.230
completed the gist here is that while
 

00:03:32.230 --> 00:03:34.620
completed the gist here is that while
async task makes it really easy to move

00:03:34.620 --> 00:03:34.630
async task makes it really easy to move
 

00:03:34.630 --> 00:03:36.900
async task makes it really easy to move
work off the UI thread it's far from

00:03:36.900 --> 00:03:36.910
work off the UI thread it's far from
 

00:03:36.910 --> 00:03:38.430
work off the UI thread it's far from
being a silver bullet so don't be afraid

00:03:38.430 --> 00:03:38.440
being a silver bullet so don't be afraid
 

00:03:38.440 --> 00:03:40.020
being a silver bullet so don't be afraid
to check out some of the other threading

00:03:40.020 --> 00:03:40.030
to check out some of the other threading
 

00:03:40.030 --> 00:03:41.909
to check out some of the other threading
primitives in Android in case you need a

00:03:41.909 --> 00:03:41.919
primitives in Android in case you need a
 

00:03:41.919 --> 00:03:44.129
primitives in Android in case you need a
little different use case for example

00:03:44.129 --> 00:03:44.139
little different use case for example
 

00:03:44.139 --> 00:03:46.440
little different use case for example
handler threads are great when you need

00:03:46.440 --> 00:03:46.450
handler threads are great when you need
 

00:03:46.450 --> 00:03:48.479
handler threads are great when you need
a dedicated thread for callbacks to land

00:03:48.479 --> 00:03:48.489
a dedicated thread for callbacks to land
 

00:03:48.489 --> 00:03:50.520
a dedicated thread for callbacks to land
on thread pools work best when you've

00:03:50.520 --> 00:03:50.530
on thread pools work best when you've
 

00:03:50.530 --> 00:03:53.009
on thread pools work best when you've
got a mountain of small work objects to

00:03:53.009 --> 00:03:53.019
got a mountain of small work objects to
 

00:03:53.019 --> 00:03:55.080
got a mountain of small work objects to
do and intent services are really ideal

00:03:55.080 --> 00:03:55.090
do and intent services are really ideal
 

00:03:55.090 --> 00:03:57.270
do and intent services are really ideal
for background tasks or when you need to

00:03:57.270 --> 00:03:57.280
for background tasks or when you need to
 

00:03:57.280 --> 00:03:59.550
for background tasks or when you need to
get intent work off of the UI thread and

00:03:59.550 --> 00:03:59.560
get intent work off of the UI thread and
 

00:03:59.560 --> 00:04:02.009
get intent work off of the UI thread and
see that's the whole thing when it comes

00:04:02.009 --> 00:04:02.019
see that's the whole thing when it comes
 

00:04:02.019 --> 00:04:03.390
see that's the whole thing when it comes
to performance coding you have to

00:04:03.390 --> 00:04:03.400
to performance coding you have to
 

00:04:03.400 --> 00:04:04.860
to performance coding you have to
understand enough about the primitives

00:04:04.860 --> 00:04:04.870
understand enough about the primitives
 

00:04:04.870 --> 00:04:06.659
understand enough about the primitives
to know how they might help you and how

00:04:06.659 --> 00:04:06.669
to know how they might help you and how
 

00:04:06.669 --> 00:04:08.009
to know how they might help you and how
they might hurt you and if it's not

00:04:08.009 --> 00:04:08.019
they might hurt you and if it's not
 

00:04:08.019 --> 00:04:09.930
they might hurt you and if it's not
working move on to a better pattern

00:04:09.930 --> 00:04:09.940
working move on to a better pattern
 

00:04:09.940 --> 00:04:11.129
working move on to a better pattern
which is why you should check out the

00:04:11.129 --> 00:04:11.139
which is why you should check out the
 

00:04:11.139 --> 00:04:12.360
which is why you should check out the
rest of the Android performance patterns

00:04:12.360 --> 00:04:12.370
rest of the Android performance patterns
 

00:04:12.370 --> 00:04:14.550
rest of the Android performance patterns
videos and don't forget to ask your hard

00:04:14.550 --> 00:04:14.560
videos and don't forget to ask your hard
 

00:04:14.560 --> 00:04:16.770
videos and don't forget to ask your hard
threading questions in the Google+

00:04:16.770 --> 00:04:16.780
threading questions in the Google+
 

00:04:16.780 --> 00:04:19.170
threading questions in the Google+
community as well so keep calm profile

00:04:19.170 --> 00:04:19.180
community as well so keep calm profile
 

00:04:19.180 --> 00:04:20.430
community as well so keep calm profile
your code and always remember perf

00:04:20.430 --> 00:04:20.440
your code and always remember perf
 

00:04:20.440 --> 00:04:22.979
your code and always remember perf
matters

