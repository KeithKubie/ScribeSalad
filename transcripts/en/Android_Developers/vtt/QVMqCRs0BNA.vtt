WEBVTT
Kind: captions
Language: en

00:00:04.200 --> 00:00:06.660
FLORINA MUNTENESCU: Many apps
work with large sets of data,

00:00:06.660 --> 00:00:08.400
but only need to
load and display

00:00:08.400 --> 00:00:11.054
a small portion
at any given time.

00:00:11.054 --> 00:00:12.720
If you're not careful,
you might request

00:00:12.720 --> 00:00:15.960
data you don't actually need,
wasting your user's battery

00:00:15.960 --> 00:00:17.400
and bandwidth.

00:00:17.400 --> 00:00:20.160
If the data you are displaying
is constantly updating,

00:00:20.160 --> 00:00:22.290
it can be difficult to
keep your UI in sync

00:00:22.290 --> 00:00:24.990
and still send only a
small amount of information

00:00:24.990 --> 00:00:26.680
over the network.

00:00:26.680 --> 00:00:28.470
The Paging Library--
part of Jetpack--

00:00:28.470 --> 00:00:31.020
tackles these problems,
enabling you to load data

00:00:31.020 --> 00:00:33.340
gradually and gracefully.

00:00:33.340 --> 00:00:36.600
The library supports both
large but bounded lists,

00:00:36.600 --> 00:00:38.810
as well as lists
of unbounded sites,

00:00:38.810 --> 00:00:42.120
such as
continuously-updating feeds.

00:00:42.120 --> 00:00:43.980
It offers integration
with RecyclerView,

00:00:43.980 --> 00:00:46.950
which is typically used
to display large data sets

00:00:46.950 --> 00:00:50.280
and plays nicely with
either LiveData or RxJava

00:00:50.280 --> 00:00:53.400
for observing new
data in your UI.

00:00:53.400 --> 00:00:56.010
The paging library is based
on the idea of sending lists

00:00:56.010 --> 00:00:59.520
to the UI with the live data
of a list that is observed

00:00:59.520 --> 00:01:00.940
by the RecyclerView adapter.

00:01:00.940 --> 00:01:04.260
It then builds up on this
idea by adding paging

00:01:04.260 --> 00:01:06.810
so you can load
content gradually.

00:01:06.810 --> 00:01:09.060
Let's go over the main
components of the library,

00:01:09.060 --> 00:01:13.230
and see how they fit in
your app's architecture.

00:01:13.230 --> 00:01:15.090
The core elements in
the Paging Library

00:01:15.090 --> 00:01:18.220
are the PagedList
and the DataSource.

00:01:18.220 --> 00:01:21.955
A PagedList is a collection
that loads data in chunks,

00:01:21.955 --> 00:01:24.505
known as pages, asynchronously.

00:01:24.505 --> 00:01:28.890
A DataSource is the base class
for loading snapshots of data

00:01:28.890 --> 00:01:31.020
into a give page list.

00:01:31.020 --> 00:01:34.200
Data sources can be backed by
the network, database, file,

00:01:34.200 --> 00:01:37.530
or anywhere you want
to retrieve data from.

00:01:37.530 --> 00:01:41.670
You create the DataSource using
a DataSource.Factory object.

00:01:41.670 --> 00:01:44.640
The Paging Library also
provides a PagedListAdapter

00:01:44.640 --> 00:01:47.340
which helps you present
data from PagedList

00:01:47.340 --> 00:01:49.170
in a RecyclerView.

00:01:49.170 --> 00:01:52.110
The PagedListAdapter is
notified when pages are loaded,

00:01:52.110 --> 00:01:55.140
and it uses DiffUtil to
compute fine grain updates

00:01:55.140 --> 00:01:57.690
as new data is received.

00:01:57.690 --> 00:02:01.130
The Paging Library provides
the LivePagedListBuilder class

00:02:01.130 --> 00:02:05.210
for getting a LiveData
object of type PagedList.

00:02:05.210 --> 00:02:07.140
To create a
LivePagedListBuilder,

00:02:07.140 --> 00:02:10.440
pass in the dataSourceFactory
object and a paging

00:02:10.440 --> 00:02:11.880
configuration.

00:02:11.880 --> 00:02:14.880
If you prefer working with
RxJava instead of LiveData,

00:02:14.880 --> 00:02:17.760
then just use the
RxPagedListBuilder.

00:02:17.760 --> 00:02:20.880
It's constructed similarly
to LivePagedListBuilder,

00:02:20.880 --> 00:02:22.730
but instead of a
live data object,

00:02:22.730 --> 00:02:25.110
it will return an
observable or flowable

00:02:25.110 --> 00:02:27.220
depending on what you need.

00:02:27.220 --> 00:02:29.640
Let's take a look at some
common scenarios of loading data

00:02:29.640 --> 00:02:33.090
from a database or a
retrofit-based network source,

00:02:33.090 --> 00:02:35.820
and see how the
Paging Library helps.

00:02:35.820 --> 00:02:38.580
So, first case, let's
say that the database

00:02:38.580 --> 00:02:40.140
is your DataSource.

00:02:40.140 --> 00:02:42.660
The Room Persistence library
provides native support

00:02:42.660 --> 00:02:45.190
for Paging Library data sources.

00:02:45.190 --> 00:02:47.070
For a given query,
Room allows you

00:02:47.070 --> 00:02:50.010
to return a DataSource.Factory
from the Dao,

00:02:50.010 --> 00:02:53.370
and handles the implementation
of the DataSource for you.

00:02:53.370 --> 00:02:54.450
Second case.

00:02:54.450 --> 00:02:56.700
Let's say that the
database is a cache

00:02:56.700 --> 00:02:59.050
for data loaded from network.

00:02:59.050 --> 00:03:01.380
So here you would still
return a DataSource.Factory

00:03:01.380 --> 00:03:03.240
from the Dao, but
you will also need

00:03:03.240 --> 00:03:07.770
to implement another paging
component, a boundary callback.

00:03:07.770 --> 00:03:09.720
The boundary callback
loads more data

00:03:09.720 --> 00:03:12.090
when the user gets near
the end of the data that's

00:03:12.090 --> 00:03:13.800
in the local cache.

00:03:13.800 --> 00:03:16.740
After the data is inserted, the
paging library automatically

00:03:16.740 --> 00:03:18.120
updates the UI.

00:03:18.120 --> 00:03:20.640
But don't forget to associate
the boundary callback

00:03:20.640 --> 00:03:23.640
with the live PagedListBuilder
you created earlier.

00:03:23.640 --> 00:03:26.520
That way it can be
used by the PagedList.

00:03:26.520 --> 00:03:27.510
Third case.

00:03:27.510 --> 00:03:30.640
Having only the network
as your DataSource.

00:03:30.640 --> 00:03:33.000
Here you will have to
create both your DataSource

00:03:33.000 --> 00:03:34.980
and your DataSource.Factory.

00:03:34.980 --> 00:03:37.650
But when choosing which
data source type to extend,

00:03:37.650 --> 00:03:40.710
consider what your
backend API looks like.

00:03:40.710 --> 00:03:43.860
If you need to request data from
your backend based on a key,

00:03:43.860 --> 00:03:47.050
you will extend from
ItemKeyedDataSource.

00:03:47.050 --> 00:03:48.370
Let's take an example.

00:03:48.370 --> 00:03:50.040
You might need to
get the first 100

00:03:50.040 --> 00:03:52.140
comments added to
a GitHub repository

00:03:52.140 --> 00:03:54.340
after a certain date.

00:03:54.340 --> 00:03:58.170
Then the date will be the
key for your DataSource.

00:03:58.170 --> 00:04:00.420
ItemKeyedDataSource
allows you to define

00:04:00.420 --> 00:04:02.460
how to load the
initial page, as well

00:04:02.460 --> 00:04:07.410
as how to load items both
after and before a keyed entry.

00:04:07.410 --> 00:04:10.750
If your backend exposes
APIs that work with pages,

00:04:10.750 --> 00:04:14.280
then you would extend
from PageKeyedDataSource.

00:04:14.280 --> 00:04:17.100
For example the search
repositories GitHub API

00:04:17.100 --> 00:04:19.440
returns paginated items.

00:04:19.440 --> 00:04:21.000
In the GitHub API
request, you need

00:04:21.000 --> 00:04:23.490
to specify the query,
which page you want,

00:04:23.490 --> 00:04:27.300
and optionally, the
number of items per page.

00:04:27.300 --> 00:04:29.880
And dependent on how you create
your network data source,

00:04:29.880 --> 00:04:32.850
you will need to implement a
DataSource.Factory that knows

00:04:32.850 --> 00:04:34.860
how to create your data source.

00:04:34.860 --> 00:04:37.620
For full examples of how to
implement all of these cases,

00:04:37.620 --> 00:04:41.340
including how to handle error
cases or retry mechanisms,

00:04:41.340 --> 00:04:43.590
check out our samples on GitHub.

00:04:43.590 --> 00:04:45.390
OK, let's sum it up.

00:04:45.390 --> 00:04:47.850
Here's what you'll need
to do to integrate paging.

00:04:47.850 --> 00:04:49.920
You'll need to define
your DataSource,

00:04:49.920 --> 00:04:52.090
create a boundary
callback if it's needed,

00:04:52.090 --> 00:04:54.660
create a LiveData of a
PagedList with the help

00:04:54.660 --> 00:04:58.050
of a LivePagedListBuilder,
update your adapter

00:04:58.050 --> 00:05:00.840
to be a PagedListAdapter,
and then finally observe

00:05:00.840 --> 00:05:03.290
the LiveData a
PagedList in your UI,

00:05:03.290 --> 00:05:05.960
and send the PagedList
to your adapter.

00:05:05.960 --> 00:05:06.640
That's it.

00:05:06.640 --> 00:05:07.970
Just five steps.

00:05:07.970 --> 00:05:10.840
Check out our documentation,
code samples, and collab,

00:05:10.840 --> 00:05:12.690
and start using
the Paging Library

00:05:12.690 --> 00:05:16.200
to provide smooth-performing
lists for your users.

