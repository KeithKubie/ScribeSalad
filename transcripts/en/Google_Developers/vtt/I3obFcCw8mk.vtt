WEBVTT
Kind: captions
Language: en

00:00:01.146 --> 00:00:02.655
Bluetooth is an
amazing technology

00:00:02.655 --> 00:00:05.830
that allows us to wirelessly
communicate with devices.

00:00:05.830 --> 00:00:07.910
Bluetooth has been
around for a long time.

00:00:07.910 --> 00:00:10.330
But since the introduction
of Bluetooth low energy,

00:00:10.330 --> 00:00:13.220
we've seen a massive rise in
the number of Bluetooth devices

00:00:13.220 --> 00:00:15.190
around us, everything
from headphones

00:00:15.190 --> 00:00:16.940
to heart rate monitors.

00:00:16.940 --> 00:00:19.760
BLE is cheap and consumes
very little power,

00:00:19.760 --> 00:00:21.810
which makes it great
for mobile devices.

00:00:21.810 --> 00:00:24.720
Soon, everything from parking
meters to vending machines

00:00:24.720 --> 00:00:26.630
will have a BLE chip inside.

00:00:26.630 --> 00:00:28.680
But there is one common problem.

00:00:28.680 --> 00:00:30.800
To interact with any
of these devices,

00:00:30.800 --> 00:00:34.110
users need to install a native
app-- an app for the San

00:00:34.110 --> 00:00:36.900
Francisco parking meter, an
app for the Palo Alto parking

00:00:36.900 --> 00:00:39.660
meter, an app for the
Mountain View parking meter.

00:00:39.660 --> 00:00:43.080
Each app adds massive
amounts of friction

00:00:43.080 --> 00:00:44.910
for users that just
want to interact

00:00:44.910 --> 00:00:46.490
with the device
in front of them.

00:00:46.490 --> 00:00:48.630
Soon, the number of
apps in our cellphones

00:00:48.630 --> 00:00:51.070
will become unmanageable.

00:00:51.070 --> 00:00:54.000
More importantly, why should
you download an app for things

00:00:54.000 --> 00:00:56.090
that you're going to
use once or twice?

00:00:56.090 --> 00:00:57.800
Wouldn't it be great
if all of these

00:00:57.800 --> 00:01:00.680
just worked directly
from a web page?

00:01:00.680 --> 00:01:03.200
My name is Giovanni, and I'm
an engineer on the Chrome team.

00:01:03.200 --> 00:01:06.120
And I'm here today to talk to
you about Bluetooth on the web

00:01:06.120 --> 00:01:08.540
and how the Web Bluetooth
API that we're implementing

00:01:08.540 --> 00:01:11.890
in Chrome, combined
with the Physical Web,

00:01:11.890 --> 00:01:15.620
will change the way you interact
with the devices around you.

00:01:15.620 --> 00:01:17.410
Let's take a step
back for a moment

00:01:17.410 --> 00:01:20.160
and talk about the Physical Web.

00:01:20.160 --> 00:01:23.400
The Physical Web is an early
stage experimental project

00:01:23.400 --> 00:01:26.620
that allows users to
discover devices around them.

00:01:26.620 --> 00:01:29.380
Using BLE, objects
can work as a URL

00:01:29.380 --> 00:01:32.430
that the Physical Web picks
up and presents to the user.

00:01:32.430 --> 00:01:35.640
For example, a movie poster can
broadcast a link to the movie

00:01:35.640 --> 00:01:38.860
trailer, or a parking meter can
broadcast a link to a website

00:01:38.860 --> 00:01:40.810
where you can pay for parking.

00:01:40.810 --> 00:01:42.830
In a way, the
Physical Web concept

00:01:42.830 --> 00:01:46.020
is similar to that of QR
codes, but the Physical Web

00:01:46.020 --> 00:01:48.270
offers some key advantages.

00:01:48.270 --> 00:01:50.540
First, the Physical
Web will eventually

00:01:50.540 --> 00:01:53.110
be part of your smartphone,
so there is no need for users

00:01:53.110 --> 00:01:54.580
to download an app.

00:01:54.580 --> 00:01:57.510
Furthermore, the Physical
Web is more convenient.

00:01:57.510 --> 00:01:59.940
Users shouldn't need to climb
on a ladder to snap a QR

00:01:59.940 --> 00:02:02.530
code on their small detector.

00:02:02.530 --> 00:02:04.300
With the Physical
Web, you can similarly

00:02:04.300 --> 00:02:06.520
discover devices and
objects around you.

00:02:06.520 --> 00:02:09.750
But the question remains,
how do you connect with them?

00:02:09.750 --> 00:02:12.250
This is where Web
Bluetooth comes in.

00:02:12.250 --> 00:02:14.670
Web Bluetooth will allow
users to seamlessly connect

00:02:14.670 --> 00:02:16.570
to the devices around
them without the need

00:02:16.570 --> 00:02:20.860
to start an app and will
enable developers to build

00:02:20.860 --> 00:02:23.540
cross-platform web apps.

00:02:23.540 --> 00:02:26.480
For example, users
would be able to walk up

00:02:26.480 --> 00:02:29.980
to any parking meter in any city
and then use the Physical Web

00:02:29.980 --> 00:02:32.410
to navigate to the
corresponding web app.

00:02:32.410 --> 00:02:34.890
Once a user pays for
parking, the websites

00:02:34.890 --> 00:02:38.730
can then notify the parking
meter directly, using BLE.

00:02:38.730 --> 00:02:41.250
The same concept can be
applied to many devices

00:02:41.250 --> 00:02:43.250
where power consumption
is an issue and internet

00:02:43.250 --> 00:02:46.420
connectivity is not viable.

00:02:46.420 --> 00:02:48.190
We are currently
working on the API

00:02:48.190 --> 00:02:51.240
to make all this
available to developers.

00:02:51.240 --> 00:02:55.710
But before we show you how the
current proposed API works,

00:02:55.710 --> 00:02:58.240
let's review some BLE concepts.

00:02:58.240 --> 00:03:04.260
A characteristic contains
a value and descriptors

00:03:04.260 --> 00:03:05.840
that describe that value.

00:03:05.840 --> 00:03:07.400
You can think of
a characteristic

00:03:07.400 --> 00:03:10.370
as a type analogous to a class.

00:03:10.370 --> 00:03:14.390
Services, a service is just a
collection of characteristics.

00:03:14.390 --> 00:03:16.560
For example, a
heart rate monitor

00:03:16.560 --> 00:03:18.450
has a heart rate service.

00:03:18.450 --> 00:03:21.080
The heart rate service
contains a characteristic,

00:03:21.080 --> 00:03:23.400
called heart rate
measurement, which

00:03:23.400 --> 00:03:26.140
calls a value of the
user's heart rate.

00:03:26.140 --> 00:03:28.190
A website could then
connect to the device

00:03:28.190 --> 00:03:30.480
to read and write
to characteristics

00:03:30.480 --> 00:03:33.330
or subscribe notifications
from characteristics.

00:03:33.330 --> 00:03:34.960
It's pretty simple.

00:03:34.960 --> 00:03:37.720
The developer will request
access to a device filter

00:03:37.720 --> 00:03:38.860
by service.

00:03:38.860 --> 00:03:41.240
In this case, heart rate.

00:03:41.240 --> 00:03:42.826
The system will
then ask the user

00:03:42.826 --> 00:03:44.200
to confirm that
they want the web

00:03:44.200 --> 00:03:45.970
app to pair with the device.

00:03:45.970 --> 00:03:48.120
Once the user has
granted access,

00:03:48.120 --> 00:03:51.340
the developer will then be
able to get direct access

00:03:51.340 --> 00:03:55.140
to the service on the device,
which means that now you

00:03:55.140 --> 00:03:58.110
can get access to the services
characteristics, which

00:03:58.110 --> 00:04:02.830
in this case, will let you read
the heart rate from the device.

00:04:02.830 --> 00:04:05.090
And it's a very similar
process for writing data

00:04:05.090 --> 00:04:06.630
to a Bluetooth device.

00:04:06.630 --> 00:04:09.350
You get access to the
device, to the service

00:04:09.350 --> 00:04:12.640
and the characteristic, and
then you called writeValue.

00:04:12.640 --> 00:04:15.280
It's really that simple.

00:04:15.280 --> 00:04:17.399
And a slight more
enhanced use case

00:04:17.399 --> 00:04:20.310
is the ability to be notified
when data on a characteristic

00:04:20.310 --> 00:04:21.160
changes.

00:04:21.160 --> 00:04:24.840
For example, the heart rate
measurement characteristic

00:04:24.840 --> 00:04:27.560
allows you to subscribe
to notifications.

00:04:27.560 --> 00:04:32.010
Now, every time the heart rate
changes, the website updates

00:04:32.010 --> 00:04:34.290
the value shown to the user.

00:04:34.290 --> 00:04:36.570
Now that you've seen
what the API looks like,

00:04:36.570 --> 00:04:38.980
you probably want to
get your hands on it.

00:04:38.980 --> 00:04:40.810
While we work on
finishing up the API

00:04:40.810 --> 00:04:42.980
and integrating
it into Chrome, we

00:04:42.980 --> 00:04:45.190
have built a Chrome
apps polyfill

00:04:45.190 --> 00:04:47.800
that you can use
to try out the API.

00:04:47.800 --> 00:04:51.290
You can embed the
polyfill in a Chrome app

00:04:51.290 --> 00:04:53.920
and use it in a Chromebook
to scan for devices,

00:04:53.920 --> 00:04:56.720
connect to them, read and
write characteristics,

00:04:56.720 --> 00:04:59.350
and subscribe to
notifications in the same way

00:04:59.350 --> 00:05:03.180
you would using the
Web Bluetooth API.

00:05:03.180 --> 00:05:05.210
Don't have a BLE
peripheral available?

00:05:05.210 --> 00:05:06.030
Fret not.

00:05:06.030 --> 00:05:08.400
We have built an
Android app that

00:05:08.400 --> 00:05:11.750
lets you simulate a BLE
peripheral with services

00:05:11.750 --> 00:05:15.080
and characteristics that
you can read, write, or get

00:05:15.080 --> 00:05:16.390
notifications from.

00:05:16.390 --> 00:05:19.160
By using both, we are sure
you will be able to try out

00:05:19.160 --> 00:05:21.480
the Web Bluetooth API.

00:05:21.480 --> 00:05:24.370
Today, we have given you
a quick glimpse into what

00:05:24.370 --> 00:05:26.060
we are enabling on the web.

00:05:26.060 --> 00:05:31.140
You can find out more about how
to play with it at this URL.

00:05:31.140 --> 00:05:33.560
We look forward to getting
your feedback on the API

00:05:33.560 --> 00:05:37.580
specification in the W3C group
and learning about your use

00:05:37.580 --> 00:05:38.395
cases.

00:05:38.395 --> 00:05:39.270
Thanks, for watching.

00:05:39.270 --> 00:05:40.478
And remember, stay connected.

00:05:40.478 --> 00:05:42.920
[MUSIC PLAYING]

