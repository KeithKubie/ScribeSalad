WEBVTT
Kind: captions
Language: en

00:00:00.500 --> 00:00:03.790
[MUSIC PLAYING]

00:00:03.790 --> 00:00:05.040
MATTHEW PEGULA: Hi, everybody.

00:00:05.040 --> 00:00:05.430
MARY CHEN: Hi.

00:00:05.430 --> 00:00:06.130
Happy Thursday.

00:00:09.320 --> 00:00:11.390
MATTHEW PEGULA: We made
it to day three here.

00:00:11.390 --> 00:00:13.737
OSCAR PROM: How about that
concert last night, huh?

00:00:13.737 --> 00:00:16.070
MATTHEW PEGULA: Who knew
that's what fruit sounded like?

00:00:16.070 --> 00:00:18.240
OSCAR PROM: Those
bananas can slap.

00:00:18.240 --> 00:00:19.620
MARY CHEN: Attack of the fruits.

00:00:19.620 --> 00:00:22.230
Well, we're super excited
you're here with us today.

00:00:22.230 --> 00:00:23.590
Thank you so much for coming.

00:00:23.590 --> 00:00:27.295
And hi to everyone
watching on livestream.

00:00:27.295 --> 00:00:29.860
My name is Mary, and I'm part
of the Google Assistant team

00:00:29.860 --> 00:00:32.290
that put together this
year's I/O. Hope you're

00:00:32.290 --> 00:00:35.410
having a lot of fun, meeting
a lot of cool people,

00:00:35.410 --> 00:00:38.000
and leave inspired to build
new actions for the Google

00:00:38.000 --> 00:00:38.985
Assistant.

00:00:38.985 --> 00:00:40.360
OSCAR PROM: And
my name is Oscar.

00:00:40.360 --> 00:00:42.250
I'm the software team
lead at Deeplocal

00:00:42.250 --> 00:00:44.770
and a four-year
Google I/O attendee.

00:00:44.770 --> 00:00:48.033
I'm really excited to share all
of these demos with you today.

00:00:48.033 --> 00:00:49.450
MATTHEW PEGULA:
My name's Matthew.

00:00:49.450 --> 00:00:52.210
I lead up the Creative
Technology team at Deeplocal.

00:00:52.210 --> 00:00:54.850
And as a little
background, Deeplocal

00:00:54.850 --> 00:00:57.072
is an innovation studio
based in Pittsburgh.

00:00:57.072 --> 00:00:59.530
And we've been lucky enough to
work with the Assistant team

00:00:59.530 --> 00:01:02.320
for a while now
showcasing new Assistant

00:01:02.320 --> 00:01:04.110
features in fun, creative ways.

00:01:04.110 --> 00:01:06.370
So to that end, a
couple of quick examples

00:01:06.370 --> 00:01:07.760
of what that looks like.

00:01:07.760 --> 00:01:09.720
On the left here is
the Mocktails Mixer

00:01:09.720 --> 00:01:10.470
you may have seen.

00:01:10.470 --> 00:01:11.590
It's been at I/O before.

00:01:11.590 --> 00:01:13.115
It's gone to the
Cannes Festival.

00:01:13.115 --> 00:01:15.490
It's been pretty popular at
some our holiday parties back

00:01:15.490 --> 00:01:17.440
at the office as well.

00:01:17.440 --> 00:01:20.980
In the center here is a
collaborative drawing robot

00:01:20.980 --> 00:01:23.950
we had at I/O last year where
you use voice to tell it,

00:01:23.950 --> 00:01:26.260
hey, use the red
color now, or I want

00:01:26.260 --> 00:01:27.940
you to draw circles or squares.

00:01:27.940 --> 00:01:29.920
So you work together
with this machine

00:01:29.920 --> 00:01:33.460
using your voice to create this
cool take-home piece of art.

00:01:33.460 --> 00:01:36.130
And then finally, on the
right, this year at CES,

00:01:36.130 --> 00:01:38.530
we created an interactive
ride to show how Assistant

00:01:38.530 --> 00:01:40.120
fits into your daily life.

00:01:40.120 --> 00:01:41.830
And it was this
over-the-top theme park

00:01:41.830 --> 00:01:45.130
ride with animatronics and a
theme song and smoke and sound

00:01:45.130 --> 00:01:45.630
effects.

00:01:45.630 --> 00:01:47.800
So it was really cool
to bring Assistant

00:01:47.800 --> 00:01:50.278
into the world in that
really extreme way.

00:01:50.278 --> 00:01:51.820
MARY CHEN: And that
was an epic ride.

00:01:51.820 --> 00:01:53.603
MATTHEW PEGULA:
Yeah, definitely.

00:01:53.603 --> 00:01:54.270
MARY CHEN: Cool.

00:01:54.270 --> 00:01:56.940
So I also want to say it's
a lot of fun collaborating

00:01:56.940 --> 00:01:59.640
with the Deeplocal team, and
this year is no different.

00:01:59.640 --> 00:02:02.340
Here we have a picture
of our Assistant Sandbox.

00:02:02.340 --> 00:02:04.590
Thanks, Johnny, for
the great picture.

00:02:04.590 --> 00:02:07.270
This year-- oh, for those
of you watching at home,

00:02:07.270 --> 00:02:10.830
the sandbox is a physical place
attendees can come and learn

00:02:10.830 --> 00:02:12.750
more about our
new features, chat

00:02:12.750 --> 00:02:16.680
with the teams who made them,
and try out interactive demos.

00:02:16.680 --> 00:02:18.510
This year, our team
wanted to make sure

00:02:18.510 --> 00:02:20.430
that you get to see
the end results of what

00:02:20.430 --> 00:02:23.710
you can build using these
cool features and tools.

00:02:23.710 --> 00:02:26.040
We want to make sure you
leave inspired to build

00:02:26.040 --> 00:02:27.660
the same things or even better.

00:02:30.255 --> 00:02:32.880
OSCAR PROM: So this is what the
inside of the Assistant Sandbox

00:02:32.880 --> 00:02:33.870
looks like.

00:02:33.870 --> 00:02:35.460
As you'll see,
there are a handful

00:02:35.460 --> 00:02:37.980
of awesome interactive demos
that we'll talk through

00:02:37.980 --> 00:02:39.329
during this session.

00:02:39.329 --> 00:02:43.321
[MUSIC PLAYING]

00:04:15.150 --> 00:04:16.750
MARY CHEN: Cool, a VIP tour.

00:04:16.750 --> 00:04:20.829
[APPLAUSE]

00:04:20.829 --> 00:04:21.329
All right.

00:04:21.329 --> 00:04:23.160
So let's dive right in.

00:04:23.160 --> 00:04:25.830
The very first demo, we
have interactive guides

00:04:25.830 --> 00:04:29.200
on how to fold really
pretty or origami flowers.

00:04:29.200 --> 00:04:32.310
These are made with our new
how-to templates and schema.org

00:04:32.310 --> 00:04:33.480
markup.

00:04:33.480 --> 00:04:35.520
Now, if you're a webmaster
or content creator,

00:04:35.520 --> 00:04:38.220
Schema.org is very
familiar to you,

00:04:38.220 --> 00:04:40.770
basically highlighting rich
content on your website

00:04:40.770 --> 00:04:43.270
to display on search results.

00:04:43.270 --> 00:04:45.660
Now, templates is
actually even easier.

00:04:45.660 --> 00:04:48.360
All you have to do is fill out
some information on a Google

00:04:48.360 --> 00:04:52.290
Sheet, and your content will
be available on Google Search.

00:04:52.290 --> 00:04:53.850
There's no coding needed.

00:04:53.850 --> 00:04:55.390
It's really that easy.

00:04:55.390 --> 00:04:57.690
We already have
templates for quizzes,

00:04:57.690 --> 00:05:00.310
making flashcards,
games, you name it.

00:05:00.310 --> 00:05:02.250
But I'm particularly
excited about these

00:05:02.250 --> 00:05:05.010
how to templates because
there's a lot of great

00:05:05.010 --> 00:05:06.240
how to content out there.

00:05:06.240 --> 00:05:08.250
I watch a lot of
instructional videos

00:05:08.250 --> 00:05:11.770
on YouTube, recipes
on websites and such.

00:05:11.770 --> 00:05:14.010
So I'm super excited
to see all this content

00:05:14.010 --> 00:05:17.070
accessible by voice on
the Google Assistant.

00:05:17.070 --> 00:05:18.895
Matthew, can you tell
us about these demos?

00:05:18.895 --> 00:05:20.020
MATTHEW PEGULA: Absolutely.

00:05:22.720 --> 00:05:25.090
So we created this
origami how-to guide

00:05:25.090 --> 00:05:27.385
to utilize the new
how-to template.

00:05:27.385 --> 00:05:28.840
You see in this
little video what

00:05:28.840 --> 00:05:30.430
that ended up looking like.

00:05:30.430 --> 00:05:31.930
Really, what we
wanted to do is show

00:05:31.930 --> 00:05:34.390
how easy it is to
take YouTube content

00:05:34.390 --> 00:05:37.000
and make it perfect for
use with smart displays.

00:05:37.000 --> 00:05:38.650
So we chose origami
because it really

00:05:38.650 --> 00:05:40.450
shows how powerful
Assistant can be

00:05:40.450 --> 00:05:41.867
when you're trying
to do something

00:05:41.867 --> 00:05:43.670
when you have your hands full.

00:05:43.670 --> 00:05:47.490
So to make this demo, we
had to do three things,

00:05:47.490 --> 00:05:49.020
and none of them
involved writing

00:05:49.020 --> 00:05:51.000
even a single line of code.

00:05:51.000 --> 00:05:52.950
First we created
our YouTube video.

00:05:52.950 --> 00:05:54.690
In our case, we created
one from scratch

00:05:54.690 --> 00:05:57.930
with this origami content, but
you could reuse existing videos

00:05:57.930 --> 00:05:59.040
that you already have.

00:05:59.040 --> 00:06:02.550
And it's a great way to get
even more functionality out

00:06:02.550 --> 00:06:05.580
of content that you've
already worked to create.

00:06:05.580 --> 00:06:07.710
The next thing we did was
go to the Actions console

00:06:07.710 --> 00:06:10.702
and told it we wanted to create
a new template-based how-to.

00:06:10.702 --> 00:06:12.660
To do that, all we have
to do is give it a name

00:06:12.660 --> 00:06:15.230
and tell Google how we
want to invoke that action.

00:06:15.230 --> 00:06:16.980
And then what's really
cool is after that,

00:06:16.980 --> 00:06:19.140
a Google Sheet is
automatically created for you

00:06:19.140 --> 00:06:21.570
that we can then use as a
template to fill in all our

00:06:21.570 --> 00:06:23.800
how to information.

00:06:23.800 --> 00:06:25.200
So that's the third step here.

00:06:25.200 --> 00:06:26.760
We take that template.

00:06:26.760 --> 00:06:30.330
We give it some information like
the URL to our YouTube video.

00:06:30.330 --> 00:06:32.410
And then for each
step in our how to,

00:06:32.410 --> 00:06:35.940
all we have to do is add
a new row to the sheet.

00:06:35.940 --> 00:06:38.850
And we say, step one is
at the 10-second mark,

00:06:38.850 --> 00:06:41.040
and it is fold
the paper in half.

00:06:41.040 --> 00:06:43.320
Step two is at the
23-second mark,

00:06:43.320 --> 00:06:45.900
and it's turn it 90 degrees
and fold it diagonally.

00:06:45.900 --> 00:06:47.840
So for each step in
our how-to, we just

00:06:47.840 --> 00:06:50.240
add a new row to that sheet.

00:06:50.240 --> 00:06:51.740
And then when we're
done, here's how

00:06:51.740 --> 00:06:52.990
it looks on our smart display.

00:06:52.990 --> 00:06:56.270
You can see we get the video
of the current step we're on,

00:06:56.270 --> 00:06:59.180
an outline on the left of
where we are in the process.

00:06:59.180 --> 00:07:02.152
We can invoke this just like
we can any other action.

00:07:02.152 --> 00:07:04.610
And then you can say things
like, hey, go to the next step,

00:07:04.610 --> 00:07:06.890
or repeat that step,
so really great

00:07:06.890 --> 00:07:08.810
bringing that how
to content in a way

00:07:08.810 --> 00:07:11.343
that you can use it while
you're actually doing it.

00:07:11.343 --> 00:07:13.760
What's also nice is you can
use Action Simulator, like you

00:07:13.760 --> 00:07:16.220
can with other
actions, to really test

00:07:16.220 --> 00:07:17.360
and tune this content.

00:07:17.360 --> 00:07:23.230
So really easy to get this
YouTube video into this format.

00:07:23.230 --> 00:07:26.470
So that was the how-to
templates for videos.

00:07:26.470 --> 00:07:28.220
And along with that,
we wanted to show you

00:07:28.220 --> 00:07:31.810
how you can use schema.org
how-to types for web content.

00:07:31.810 --> 00:07:34.440
So this video gives a quick
overview about what we did.

00:07:34.440 --> 00:07:37.740
You can check this out in the
sandbox and some of the code

00:07:37.740 --> 00:07:39.090
examples at the end.

00:07:39.090 --> 00:07:40.590
But basically, we're
adding metadata

00:07:40.590 --> 00:07:43.830
to web pages that
explicitly calls out that it

00:07:43.830 --> 00:07:46.440
contains how-to content.

00:07:46.440 --> 00:07:48.240
So for this demo, we
had to do two things.

00:07:48.240 --> 00:07:49.800
We had to make a
website, and then we

00:07:49.800 --> 00:07:51.570
had to add our markup to it.

00:07:51.570 --> 00:07:53.130
Pretty simple.

00:07:53.130 --> 00:07:55.800
So here's an example of what
we built for the website.

00:07:55.800 --> 00:07:58.980
In this case, we were
making origami succulents.

00:07:58.980 --> 00:08:01.440
This is all normal
markup, but just wanted

00:08:01.440 --> 00:08:03.270
to call it a little
bit of the content.

00:08:03.270 --> 00:08:06.320
You can see it's more than just
step one, step two, step three.

00:08:06.320 --> 00:08:09.180
Schema.org how-to
capabilities have

00:08:09.180 --> 00:08:10.620
things like the
tools you'll need,

00:08:10.620 --> 00:08:12.810
or the materials
it's going to take,

00:08:12.810 --> 00:08:15.690
how long it's going to take, how
much money it's going to take.

00:08:15.690 --> 00:08:17.730
So you don't have to
do that, but it just

00:08:17.730 --> 00:08:20.850
shows how rich
this content can be

00:08:20.850 --> 00:08:24.150
and that the scheme can support.

00:08:24.150 --> 00:08:26.280
So after that, all we have
to do is add our markup

00:08:26.280 --> 00:08:27.557
to our web page.

00:08:27.557 --> 00:08:29.640
And you can see here we
do that with a script tag.

00:08:29.640 --> 00:08:33.260
It's of type application
LD plus JSON.

00:08:33.260 --> 00:08:35.789
In this case, LD
stands for Link Data.

00:08:35.789 --> 00:08:39.382
And you can see it's as simple
as defining this is a how-to.

00:08:39.382 --> 00:08:40.590
Here's the description of it.

00:08:40.590 --> 00:08:42.150
Here's some of those
estimated costs

00:08:42.150 --> 00:08:45.125
and things like
that I talked about.

00:08:45.125 --> 00:08:46.500
Another little
chunk of it-- this

00:08:46.500 --> 00:08:48.310
is for some actual
how-to content,

00:08:48.310 --> 00:08:50.220
so this is a step in the how-to.

00:08:50.220 --> 00:08:51.120
It's got a title.

00:08:51.120 --> 00:08:52.240
It's got an order.

00:08:52.240 --> 00:08:53.860
We can have an
image, a thumbnail,

00:08:53.860 --> 00:08:55.090
any of that sort of stuff.

00:08:55.090 --> 00:08:57.600
So all this data
then gets processed,

00:08:57.600 --> 00:08:59.230
and here's what it looks like.

00:08:59.230 --> 00:09:01.800
On the left, you can
see a normal search

00:09:01.800 --> 00:09:04.200
if our web page didn't
have this metadata in it.

00:09:04.200 --> 00:09:07.690
And it just is a normal title
snippet, pretty standard stuff.

00:09:07.690 --> 00:09:09.600
But on the right,
you can see we get

00:09:09.600 --> 00:09:14.070
this nice carousel of the steps
involved in making our how-to.

00:09:14.070 --> 00:09:16.110
It has even the
materials you'll need.

00:09:16.110 --> 00:09:18.210
So for users looking for
content, when they see

00:09:18.210 --> 00:09:19.572
this one, it's way more rich.

00:09:19.572 --> 00:09:21.780
They're going to see, oh,
this spells it out exactly.

00:09:21.780 --> 00:09:22.967
It tells me what I need.

00:09:22.967 --> 00:09:24.300
I can see what I'm getting into.

00:09:24.300 --> 00:09:29.140
It's going to be great
for all your visitors.

00:09:29.140 --> 00:09:32.770
So we had to create a lot
of origami-based content

00:09:32.770 --> 00:09:34.390
for this demo, so
that meant we needed

00:09:34.390 --> 00:09:36.070
to create a lot of origami.

00:09:36.070 --> 00:09:37.480
Here's a lot of--

00:09:37.480 --> 00:09:40.122
some of our misfires
or failed attempts.

00:09:40.122 --> 00:09:41.830
And luckily, some of
this work overlapped

00:09:41.830 --> 00:09:43.247
with Bring Your
Child to Work Day,

00:09:43.247 --> 00:09:46.930
so we had a lot of hands-- a
lot of helpers to tell us where

00:09:46.930 --> 00:09:48.820
our how-tos were falling short.

00:09:48.820 --> 00:09:53.720
So that was an interesting
day in the office.

00:09:53.720 --> 00:09:55.990
So here's some resources
to get you started as well.

00:09:55.990 --> 00:09:57.320
MARY CHEN: Thanks, Matthew.

00:09:57.320 --> 00:09:59.830
So as a web developer
myself, everything you said

00:09:59.830 --> 00:10:00.855
sounded really easy.

00:10:00.855 --> 00:10:02.230
MATTHEW PEGULA:
Definitely, yeah.

00:10:02.230 --> 00:10:03.688
MARY CHEN: How long
did it take you

00:10:03.688 --> 00:10:06.160
to get the templates up and
running, and also the markup?

00:10:06.160 --> 00:10:08.350
MATTHEW PEGULA: If you already
have the YouTube videos,

00:10:08.350 --> 00:10:09.725
if you already
have the web page,

00:10:09.725 --> 00:10:12.257
you could probably add
all that in an hour.

00:10:12.257 --> 00:10:13.340
MARY CHEN: That's awesome.

00:10:13.340 --> 00:10:15.850
So for everyone who creates
content online, whether it's

00:10:15.850 --> 00:10:19.690
on YouTube or as websites,
definitely check out our docs

00:10:19.690 --> 00:10:21.110
for more information.

00:10:21.110 --> 00:10:23.740
And we also had a talk yesterday
from the product managers

00:10:23.740 --> 00:10:27.120
on these topics, so give
that a view as well.

00:10:27.120 --> 00:10:27.620
All right.

00:10:27.620 --> 00:10:29.560
So let's go on to
demo number two.

00:10:29.560 --> 00:10:31.450
This is a really tasty one.

00:10:31.450 --> 00:10:33.040
It's our S'mores
app, and it's made

00:10:33.040 --> 00:10:35.240
with app actions and slices.

00:10:35.240 --> 00:10:39.600
These are new ways where you can
take your existing Android app

00:10:39.600 --> 00:10:42.070
and integrate it with
a Google Assistant.

00:10:42.070 --> 00:10:44.830
That way, users can access
the key functionalities

00:10:44.830 --> 00:10:46.810
of your app seamlessly
with their voice

00:10:46.810 --> 00:10:48.982
by talking to the
Google Assistant.

00:10:48.982 --> 00:10:49.690
All right, Oscar.

00:10:49.690 --> 00:10:51.023
Can you tell us about this demo?

00:10:51.023 --> 00:10:52.232
OSCAR PROM: Yeah, definitely.

00:10:52.232 --> 00:10:53.260
Thanks, Mary.

00:10:53.260 --> 00:10:55.330
This was a really
fun demo to cook up

00:10:55.330 --> 00:10:57.150
over the last few weeks.

00:10:57.150 --> 00:11:00.010
In the sandbox, we have a
few user journeys for people

00:11:00.010 --> 00:11:01.180
to try.

00:11:01.180 --> 00:11:03.640
First you can order through
the S'mores app using

00:11:03.640 --> 00:11:05.890
a standard clickthrough flow.

00:11:05.890 --> 00:11:08.910
The screen cap shows a user
selecting a few ingredients,

00:11:08.910 --> 00:11:13.510
the toast level, the quantity
before confirming their order.

00:11:13.510 --> 00:11:17.050
The next user journey is that
same flow using the new feature

00:11:17.050 --> 00:11:18.370
App Actions.

00:11:18.370 --> 00:11:21.520
The user speaks their order
via the Assistant, which

00:11:21.520 --> 00:11:24.370
opens the S'mores app
with a populated order

00:11:24.370 --> 00:11:25.960
ready to confirm.

00:11:25.960 --> 00:11:28.180
As you can see, this
is a quicker route

00:11:28.180 --> 00:11:32.520
to the desired action than the
standard clickthrough flow.

00:11:32.520 --> 00:11:36.270
Finally, you can check your
order status with a slice.

00:11:36.270 --> 00:11:40.230
Slices allow you to serve a
custom UI within the Assistant

00:11:40.230 --> 00:11:43.230
instead of searching for
that info in the app.

00:11:43.230 --> 00:11:46.830
With this feature, a user can
check the last order status

00:11:46.830 --> 00:11:48.630
with little overhead.

00:11:48.630 --> 00:11:51.450
As you can see, app
actions and slices

00:11:51.450 --> 00:11:54.690
allow for a more seamless
experience between an Android

00:11:54.690 --> 00:11:56.310
app and the Assistant.

00:11:56.310 --> 00:11:59.160
Let's see how the app was made.

00:11:59.160 --> 00:12:01.530
The sample was built
using Android Studio

00:12:01.530 --> 00:12:05.100
for the app in Firebase
for cloud processing.

00:12:05.100 --> 00:12:07.750
We first built out the
basic app functionality,

00:12:07.750 --> 00:12:11.220
including an ordering flow,
user handling, a previous orders

00:12:11.220 --> 00:12:13.630
list, and so on.

00:12:13.630 --> 00:12:17.490
Next, we set up Cloud Firestore
to hold order and user

00:12:17.490 --> 00:12:22.170
information and a cloud function
to process any incoming orders.

00:12:22.170 --> 00:12:25.860
Then we implemented deep links
to navigate into specific parts

00:12:25.860 --> 00:12:28.380
of the app via a URL.

00:12:28.380 --> 00:12:30.870
As a side note, if this isn't
a feature you're already

00:12:30.870 --> 00:12:33.150
using in your Android
app, it's definitely

00:12:33.150 --> 00:12:35.100
something you want
to take advantage of,

00:12:35.100 --> 00:12:39.250
as it helps you drive external
traffic into your application.

00:12:39.250 --> 00:12:41.190
Finally, we had to
implement the app

00:12:41.190 --> 00:12:44.490
actions and slice-specific
pieces of the code.

00:12:44.490 --> 00:12:47.270
Let's see what that looks like.

00:12:47.270 --> 00:12:51.430
Here's the app actions flow
from a user query into the app.

00:12:51.430 --> 00:12:53.830
The query flows into
the Assistant backend

00:12:53.830 --> 00:12:57.040
which determines the
built-in intent, if any.

00:12:57.040 --> 00:12:59.755
In this case, the user
says, order a dark chocolate

00:12:59.755 --> 00:13:02.800
s'more from the S'mores app,
which the Assistant maps

00:13:02.800 --> 00:13:05.500
to the order menu item intent.

00:13:05.500 --> 00:13:08.530
If there's an app on the device
that can handle that intent,

00:13:08.530 --> 00:13:11.200
the apps open with any
relevant parameters,

00:13:11.200 --> 00:13:13.690
completing the app actions flow.

00:13:13.690 --> 00:13:18.170
Let's dig into the code to see
how easy this is to implement.

00:13:18.170 --> 00:13:22.420
Here's an actions.xml file
that exposes, as you'd expect,

00:13:22.420 --> 00:13:24.170
an app's actions.

00:13:24.170 --> 00:13:27.050
The action tag identifies
any built-in intents

00:13:27.050 --> 00:13:28.850
that your app can handle.

00:13:28.850 --> 00:13:31.410
There are currently
intents for food ordering,

00:13:31.410 --> 00:13:35.600
ridesharing,
fitness, and finance.

00:13:35.600 --> 00:13:37.610
As a result of deep
linking, you'll

00:13:37.610 --> 00:13:42.620
notice the URL schema and query
parameters in some of the tags.

00:13:42.620 --> 00:13:45.200
We've defined many
unique ordering queries.

00:13:45.200 --> 00:13:48.140
But in the future, you'll
be able to use parameters

00:13:48.140 --> 00:13:50.600
with a query to simplify things.

00:13:50.600 --> 00:13:53.090
This means you could use
something like a cracker type

00:13:53.090 --> 00:13:56.660
variable in the query definition
and then define those string

00:13:56.660 --> 00:13:59.660
options elsewhere.

00:13:59.660 --> 00:14:02.120
Next, in our
Android manifest, we

00:14:02.120 --> 00:14:05.300
register the actions for our
application using a metadata

00:14:05.300 --> 00:14:07.130
tag.

00:14:07.130 --> 00:14:09.980
You'll also notice some
deep linking intent filters

00:14:09.980 --> 00:14:15.490
within the activity tag with
the URL that matches our action.

00:14:15.490 --> 00:14:17.290
Now, when your app
launches, how do you

00:14:17.290 --> 00:14:21.240
know if it was a normal run
or triggered by App Actions?

00:14:21.240 --> 00:14:24.640
In the main activity, we attempt
to pull out any relevant data

00:14:24.640 --> 00:14:26.830
from the incoming intent.

00:14:26.830 --> 00:14:31.510
If order information is found,
we populate the pending order

00:14:31.510 --> 00:14:34.030
and move directly to
the Order Review screen,

00:14:34.030 --> 00:14:36.640
completing the App Actions flow.

00:14:36.640 --> 00:14:38.740
So with a few small
code additions,

00:14:38.740 --> 00:14:41.560
you can enable App Actions
as another entry point

00:14:41.560 --> 00:14:43.980
into your app.

00:14:43.980 --> 00:14:46.160
Now let's take a look at slices.

00:14:46.160 --> 00:14:48.290
Here's the flow of
a slice from a user

00:14:48.290 --> 00:14:51.140
query to an embedded response.

00:14:51.140 --> 00:14:54.530
First, the Assistant backend
determines the built-in intent,

00:14:54.530 --> 00:14:57.260
the same as we just
saw with App Actions.

00:14:57.260 --> 00:15:02.020
A query like check my order
maps to the get order intent.

00:15:02.020 --> 00:15:04.830
As you can see, all
of the available items

00:15:04.830 --> 00:15:07.590
are available online in
the doc, so check those out

00:15:07.590 --> 00:15:10.380
if you want to see what
other intents are available.

00:15:10.380 --> 00:15:12.510
After determining if
an app is installed

00:15:12.510 --> 00:15:14.880
that can handle that
intent, the Assistant

00:15:14.880 --> 00:15:19.080
again requests and displays
the slice from the Android app.

00:15:19.080 --> 00:15:22.800
This simple flow helps users
get information more quickly

00:15:22.800 --> 00:15:24.430
from your application.

00:15:24.430 --> 00:15:26.840
Now let's dive into code.

00:15:26.840 --> 00:15:31.010
Again, this intent needs to
appear in our actions.xml file

00:15:31.010 --> 00:15:33.290
with a URL from the deep link.

00:15:33.290 --> 00:15:35.960
However, the fulfillment
is defined as a slice

00:15:35.960 --> 00:15:39.430
rather than opening
the full application.

00:15:39.430 --> 00:15:43.080
And to create a slice, we need
to implement a slice provider.

00:15:43.080 --> 00:15:46.110
A slice provider builds
and populates a simple UI

00:15:46.110 --> 00:15:48.420
to reveal to the user.

00:15:48.420 --> 00:15:51.690
The intent's URI can be used
to implement different slices

00:15:51.690 --> 00:15:53.130
for different paths.

00:15:53.130 --> 00:15:56.190
You might also have a slice for
when the nearest s'more shop is

00:15:56.190 --> 00:16:00.670
open or if the s'more of
the day is sold out yet.

00:16:00.670 --> 00:16:02.530
You can also define
an action for when

00:16:02.530 --> 00:16:04.750
the user taps on a slice.

00:16:04.750 --> 00:16:06.820
You can even use a
broadcast receiver

00:16:06.820 --> 00:16:10.000
to update a slice's
content dynamically.

00:16:10.000 --> 00:16:12.100
Our app has the order
status advancing

00:16:12.100 --> 00:16:14.530
every 20 seconds,
which is reflected

00:16:14.530 --> 00:16:17.490
when viewing the slice.

00:16:17.490 --> 00:16:20.820
In our Android manifest, we
register an intent filter

00:16:20.820 --> 00:16:23.160
on the activity and
a slice provider

00:16:23.160 --> 00:16:27.180
in the application to expose
those to the operating system.

00:16:27.180 --> 00:16:31.770
The intent filter uses that
same s'mores last order URL

00:16:31.770 --> 00:16:34.590
to connect it to the action.

00:16:34.590 --> 00:16:37.020
Let's look at the
main activity again.

00:16:37.020 --> 00:16:39.600
We look for any relevant
data from the incoming intent

00:16:39.600 --> 00:16:42.560
to determine if the app
was open from a slice.

00:16:42.560 --> 00:16:44.820
In the order status case,
we'll direct the user

00:16:44.820 --> 00:16:47.220
to the previous orders list.

00:16:47.220 --> 00:16:48.220
And that's really it.

00:16:48.220 --> 00:16:50.700
It's that easy to
provide quick information

00:16:50.700 --> 00:16:55.270
to the user with slices
within your Android app.

00:16:55.270 --> 00:16:58.830
As you can see, implementing
app actions and slices allow

00:16:58.830 --> 00:17:02.250
for a cleaner user experience,
which will definitely leave

00:17:02.250 --> 00:17:04.680
your users wanting s'more.

00:17:04.680 --> 00:17:07.072
Here's some resources
to help you get started.

00:17:07.072 --> 00:17:09.030
MARY CHEN: Oscar, I feel
like you made everyone

00:17:09.030 --> 00:17:10.452
in the room super hungry now.

00:17:10.452 --> 00:17:11.160
OSCAR PROM: Yeah.

00:17:11.160 --> 00:17:13.243
Imagine how I felt with a
few weeks of development

00:17:13.243 --> 00:17:14.130
and no s'mores.

00:17:14.130 --> 00:17:15.005
MARY CHEN: All right.

00:17:15.005 --> 00:17:16.760
So you talked about
how easy it is.

00:17:16.760 --> 00:17:18.599
Same question as I
gave to Matthew--

00:17:18.599 --> 00:17:20.682
how long did it take you
to implement all of this?

00:17:20.682 --> 00:17:22.141
OSCAR PROM: Yeah,
so if you already

00:17:22.141 --> 00:17:24.599
have an existing Android
app, it would probably

00:17:24.599 --> 00:17:27.810
take you less than a workday
to add your first App Action

00:17:27.810 --> 00:17:29.777
and slice.

00:17:29.777 --> 00:17:30.860
MARY CHEN: That's awesome.

00:17:30.860 --> 00:17:31.360
All right.

00:17:31.360 --> 00:17:33.950
So as a very quick recap,
the first two demos,

00:17:33.950 --> 00:17:37.190
we showed you how easy it
is for content creators, web

00:17:37.190 --> 00:17:40.610
developers, webmasters,
and Android app developers

00:17:40.610 --> 00:17:42.890
to take your existing
content and integrate it

00:17:42.890 --> 00:17:43.950
with Assistant.

00:17:43.950 --> 00:17:46.580
And that's a theme that you've
been hearing across I/O talks

00:17:46.580 --> 00:17:47.960
this year.

00:17:47.960 --> 00:17:49.250
Definitely check out the docs.

00:17:49.250 --> 00:17:51.600
We have a lot of
great content for you.

00:17:51.600 --> 00:17:53.620
And in the next two
demos, we're going

00:17:53.620 --> 00:17:56.210
to show you how to build
engaging and rich actions

00:17:56.210 --> 00:17:57.372
from scratch.

00:17:57.372 --> 00:17:59.330
So this is going to
require a little more work,

00:17:59.330 --> 00:18:00.330
a little more learning.

00:18:00.330 --> 00:18:02.750
But you're going to build
really cool demos or really

00:18:02.750 --> 00:18:06.000
cool actions, and we're going
to show you some of that.

00:18:06.000 --> 00:18:06.500
All right.

00:18:06.500 --> 00:18:09.520
So demo number three is a
game called Jungle Dream.

00:18:09.520 --> 00:18:12.160
This is made with our new
interactive canvas which

00:18:12.160 --> 00:18:14.170
we announced in our keynote.

00:18:14.170 --> 00:18:15.730
Basically, this
is a way to build

00:18:15.730 --> 00:18:18.130
very visual and
interactive experiences

00:18:18.130 --> 00:18:21.190
on smart displays,
essentially a way

00:18:21.190 --> 00:18:23.860
to have a web view
on a smart display.

00:18:23.860 --> 00:18:27.520
By using only HTML,
CSS, and JavaScript,

00:18:27.520 --> 00:18:32.020
you can create a full screen and
customizable images, layouts,

00:18:32.020 --> 00:18:35.488
video playbacks, animations,
transitions, you name it.

00:18:35.488 --> 00:18:36.280
All right, Matthew.

00:18:36.280 --> 00:18:37.870
Can you tell us about this game?

00:18:37.870 --> 00:18:38.470
MATTHEW PEGULA: Absolutely.

00:18:38.470 --> 00:18:40.510
This is-- I know we're not
supposed to have favorites,

00:18:40.510 --> 00:18:42.093
but this is probably
my favorite demo.

00:18:42.093 --> 00:18:44.590
So you could see a video
here of what we ended up

00:18:44.590 --> 00:18:47.050
building, some pretty
standard chainsaw

00:18:47.050 --> 00:18:49.762
stuff on your smart display.

00:18:49.762 --> 00:18:51.970
But we're all really big
fans of the Google Home Hub.

00:18:51.970 --> 00:18:53.950
So when we heard about
interactive canvas

00:18:53.950 --> 00:18:56.050
and the capabilities it
was going to provide,

00:18:56.050 --> 00:18:58.010
we were really excited about it.

00:18:58.010 --> 00:18:59.800
So what we did was
built a multiplayer,

00:18:59.800 --> 00:19:02.410
voice-controlled game
called Jungle Dream.

00:19:02.410 --> 00:19:04.720
We took inspiration from
old school adventure games

00:19:04.720 --> 00:19:07.690
where you got to navigate
your hero through a bunch

00:19:07.690 --> 00:19:08.780
of different situations.

00:19:08.780 --> 00:19:11.140
But we got to reimagine it
through the use of voice,

00:19:11.140 --> 00:19:13.810
which was really cool
and a fun challenge.

00:19:13.810 --> 00:19:16.570
So in ours, you help your
character navigate a jungle

00:19:16.570 --> 00:19:19.210
by answering some pretty
nerdy programming trivia.

00:19:19.210 --> 00:19:23.530
And this is all powered by the
new interactive Canvas APIs.

00:19:23.530 --> 00:19:26.690
So for this demo, there's
two main components.

00:19:26.690 --> 00:19:28.150
First there's a
conversational app

00:19:28.150 --> 00:19:30.370
that was built with
Dialogflow, and the second

00:19:30.370 --> 00:19:32.803
is a web app that could
be built with anything.

00:19:32.803 --> 00:19:34.720
And what's really cool
is both of those things

00:19:34.720 --> 00:19:36.940
are pretty familiar
territory at this point.

00:19:36.940 --> 00:19:38.980
We know how to make these
conversational apps.

00:19:38.980 --> 00:19:41.260
We know all the powers
that Dialogflow gives us,

00:19:41.260 --> 00:19:44.210
and we can write web apps
in a million different ways.

00:19:44.210 --> 00:19:47.230
And what's really exciting here
is the interactive Canvas APIs

00:19:47.230 --> 00:19:48.920
bring those two things together.

00:19:48.920 --> 00:19:51.620
So we get the power of the
conversational interface

00:19:51.620 --> 00:19:54.730
with the flexibility of what
web apps provide us to do

00:19:54.730 --> 00:19:57.270
the visual side of things.

00:19:57.270 --> 00:20:00.040
So part one on the
Dialogflow side

00:20:00.040 --> 00:20:03.830
is we now have the capability
to send an immersive response.

00:20:03.830 --> 00:20:06.110
That's an update in
the conversation API.

00:20:06.110 --> 00:20:08.130
And basically, now we
can create an intent

00:20:08.130 --> 00:20:10.700
that instead of sending
a string or some text

00:20:10.700 --> 00:20:13.730
to be spoken to your user, we
can send an immersive response,

00:20:13.730 --> 00:20:15.770
which basically
allows us to deliver

00:20:15.770 --> 00:20:18.960
a data payload to our web app.

00:20:18.960 --> 00:20:20.760
So here's what that looks like.

00:20:20.760 --> 00:20:21.763
This one is an example.

00:20:21.763 --> 00:20:23.180
It's part of a
cloud function that

00:20:23.180 --> 00:20:25.083
sends an immersive response.

00:20:25.083 --> 00:20:26.750
If you've done anything
with Dialogflow,

00:20:26.750 --> 00:20:28.830
this probably looks
pretty familiar.

00:20:28.830 --> 00:20:31.333
The highlighted line here is
what we're really focusing on.

00:20:31.333 --> 00:20:32.750
That's where you
may, in the past,

00:20:32.750 --> 00:20:35.450
have just sent a string
back, and that string would

00:20:35.450 --> 00:20:37.120
have been spoken to your user.

00:20:37.120 --> 00:20:38.620
Instead of that,
in this case, we're

00:20:38.620 --> 00:20:40.020
sending this immersive response.

00:20:40.020 --> 00:20:42.530
And you can see we're
passing it the state data.

00:20:42.530 --> 00:20:45.410
Whatever is in that state
is completely up to us.

00:20:45.410 --> 00:20:48.050
In this case, we're sending
that it's a player action,

00:20:48.050 --> 00:20:50.720
and its value is cut the
vines because we're responding

00:20:50.720 --> 00:20:53.960
to a cut the vines intent.

00:20:53.960 --> 00:20:58.640
So that's from the Dialogflow
side getting an intent,

00:20:58.640 --> 00:21:00.380
being triggered, and
then sending it down

00:21:00.380 --> 00:21:01.940
to the web app side.

00:21:01.940 --> 00:21:05.870
On the web app side, we now have
access to the Assistant Canvas

00:21:05.870 --> 00:21:07.490
JavaScript interface.

00:21:07.490 --> 00:21:09.980
What that does is it allows
us to receive those messages

00:21:09.980 --> 00:21:11.840
that we're sending
down from Dialogflow

00:21:11.840 --> 00:21:15.090
and also to send messages back
to our conversational app.

00:21:15.090 --> 00:21:18.620
This is all done just
by registering callbacks

00:21:18.620 --> 00:21:22.118
in JavaScript and then handling
these events that come in.

00:21:22.118 --> 00:21:23.410
So here's what this looks like.

00:21:23.410 --> 00:21:25.770
This is a super
pared-down version

00:21:25.770 --> 00:21:30.940
of creating that callback
and setting it up.

00:21:30.940 --> 00:21:34.290
But basically, any time we
receive an immersive response,

00:21:34.290 --> 00:21:36.480
this on update function
is going to be called,

00:21:36.480 --> 00:21:38.790
and we're going to receive
that data that we sent down.

00:21:38.790 --> 00:21:40.530
So you can see here
we're checking,

00:21:40.530 --> 00:21:44.040
is the player action value in
this data that was sent down?

00:21:44.040 --> 00:21:45.510
If so, we're going to handle it.

00:21:45.510 --> 00:21:49.080
In our case, we play the
scene of cutting the vines.

00:21:49.080 --> 00:21:50.173
So it's that simple.

00:21:50.173 --> 00:21:52.590
What's really nice is that the
Assistant Canvas Interfaces

00:21:52.590 --> 00:21:56.940
is just brought in through
a script include tag.

00:21:56.940 --> 00:22:00.060
It's attached to the window
object, so it's pretty basic.

00:22:00.060 --> 00:22:01.710
But that means you
have the flexibility

00:22:01.710 --> 00:22:04.080
of probably any framework
that you may want.

00:22:04.080 --> 00:22:06.270
So you could either
write stuff from scratch,

00:22:06.270 --> 00:22:08.187
or if you're doing
things with react or view

00:22:08.187 --> 00:22:10.020
that are already handling
a lot of the state

00:22:10.020 --> 00:22:12.090
management for you,
this works really well

00:22:12.090 --> 00:22:14.880
because there's no reloading
of URLs or anything like that.

00:22:14.880 --> 00:22:16.290
We send these state updates.

00:22:16.290 --> 00:22:18.000
You can super quickly
and responsibly

00:22:18.000 --> 00:22:21.240
update them and
then respond back.

00:22:21.240 --> 00:22:23.860
So in summary, the
interactive Canvas APIs

00:22:23.860 --> 00:22:26.400
are a powerful bridge that
allow us to create visually

00:22:26.400 --> 00:22:29.745
interactive experiences
using familiar technologies.

00:22:29.745 --> 00:22:32.370
So we're really excited to play
with this more and build stuff.

00:22:32.370 --> 00:22:36.612
We're really excited to see
what other people build as well.

00:22:36.612 --> 00:22:38.320
Here's some resources
to get you started.

00:22:38.320 --> 00:22:42.058
I really do want to plug the
Google Interactive Canvas Docs.

00:22:42.058 --> 00:22:43.600
It will get you up
and running really

00:22:43.600 --> 00:22:46.870
quickly from the conversational
side, set up that bridge

00:22:46.870 --> 00:22:49.330
and have the receiving
messages from the web app side.

00:22:49.330 --> 00:22:51.550
So you can build out this
really quick skeleton.

00:22:51.550 --> 00:22:53.050
And once you do
that, I think you're

00:22:53.050 --> 00:22:55.910
going to really be inspired
to try some new stuff.

00:22:55.910 --> 00:22:57.160
MARY CHEN: All right, Matthew.

00:22:57.160 --> 00:22:59.500
I have a very important
question for you--

00:22:59.500 --> 00:23:01.800
tabs or spaces?

00:23:01.800 --> 00:23:03.830
MATTHEW PEGULA:
I'm a spaces guy,

00:23:03.830 --> 00:23:06.340
but I don't want any trouble
from those tabs people

00:23:06.340 --> 00:23:08.140
out there, so I'm
trying to keep it cool.

00:23:08.140 --> 00:23:08.460
MARY CHEN: All right.

00:23:08.460 --> 00:23:10.377
So if you don't know
what we're talking about,

00:23:10.377 --> 00:23:14.090
play this game in our
sandbox, and you'll find out.

00:23:14.090 --> 00:23:16.630
I also want to point out the
importance of good conversation

00:23:16.630 --> 00:23:18.370
design practices here.

00:23:18.370 --> 00:23:20.890
As you're building very rich
and engaging interactions

00:23:20.890 --> 00:23:24.970
with your users, understand how
to build really rich dialogue

00:23:24.970 --> 00:23:26.110
is important.

00:23:26.110 --> 00:23:28.270
We have a lot of great
resources on our website,

00:23:28.270 --> 00:23:30.760
so definitely check those
out and learn the foundations

00:23:30.760 --> 00:23:33.110
of good conversation design.

00:23:33.110 --> 00:23:33.610
All right.

00:23:33.610 --> 00:23:35.800
So last but not least,
let's take a look

00:23:35.800 --> 00:23:37.330
at demo number four.

00:23:37.330 --> 00:23:40.420
This is a really cool herb
garden made with Smart Home.

00:23:40.420 --> 00:23:42.550
And our Google Smart
Home APIs allow

00:23:42.550 --> 00:23:45.070
you to interact with
a Google Assistant

00:23:45.070 --> 00:23:48.250
using your hardware
or IoT devices.

00:23:48.250 --> 00:23:50.470
This year we launched
a few new traits,

00:23:50.470 --> 00:23:52.120
and we built a really
cool herb garden

00:23:52.120 --> 00:23:54.490
to demonstrate
these capabilities.

00:23:54.490 --> 00:23:58.442
Oscar, our [? plum ?] master
here, is going to tell us more.

00:23:58.442 --> 00:23:59.650
OSCAR PROM: Sure thing, Mary.

00:23:59.650 --> 00:24:01.680
We don't have much
time left, but I don't

00:24:01.680 --> 00:24:03.250
want to leaf everyone hanging.

00:24:03.250 --> 00:24:05.010
Let's watch the demo video.

00:24:05.010 --> 00:24:06.940
NARRATOR: We use
the dispense trait

00:24:06.940 --> 00:24:12.180
to feed our plants the exact
amount of water and humidity

00:24:12.180 --> 00:24:15.040
to keep the soil moist.

00:24:15.040 --> 00:24:17.470
All plants need a
little sunshine.

00:24:17.470 --> 00:24:20.110
Our plants were
looking a bit haggard,

00:24:20.110 --> 00:24:23.170
so we used the rotate
trait to help us trim

00:24:23.170 --> 00:24:25.690
those hard-to-reach places.

00:24:25.690 --> 00:24:26.770
OK, Google.

00:24:26.770 --> 00:24:28.135
Rotate 20 degrees.

00:24:37.270 --> 00:24:40.710
OSCAR PROM: So here is
a Smart Home overview.

00:24:40.710 --> 00:24:44.040
I bet you couldn't tell that
was my voice in the video there.

00:24:44.040 --> 00:24:46.650
Anyways, here's a
high-level overview

00:24:46.650 --> 00:24:50.580
of how a Smart Home query
turns into a physical action.

00:24:50.580 --> 00:24:53.730
A user query is processed
by the Assistant backend

00:24:53.730 --> 00:24:56.160
and then pushed to
your partner server.

00:24:56.160 --> 00:24:58.770
That partner server
determines the device

00:24:58.770 --> 00:25:01.290
to fulfill that intent
and a relative request

00:25:01.290 --> 00:25:04.480
to the particular
smart home device.

00:25:04.480 --> 00:25:07.110
There are two custom
components here-- the partner

00:25:07.110 --> 00:25:09.630
server in the cloud
and the local device

00:25:09.630 --> 00:25:11.430
with hardware and code.

00:25:11.430 --> 00:25:15.050
Let's dig into each one
to see how they work.

00:25:15.050 --> 00:25:18.850
Let's start with the smart home
traits that we plan to support.

00:25:18.850 --> 00:25:21.950
The herb garden highlights
a handful of new traits,

00:25:21.950 --> 00:25:25.540
including humidity,
rotation, and dispense.

00:25:25.540 --> 00:25:29.200
We've also included zones, which
is a new property of the start

00:25:29.200 --> 00:25:30.610
stop trait.

00:25:30.610 --> 00:25:33.970
You can think of zones as
subsections of a single device,

00:25:33.970 --> 00:25:37.510
such as areas of your lawn
or left and right sides

00:25:37.510 --> 00:25:39.460
of a garage.

00:25:39.460 --> 00:25:42.490
The highlight here is that
Smart Home traits are constantly

00:25:42.490 --> 00:25:46.000
evolving to support new
types of devices and actions

00:25:46.000 --> 00:25:48.780
that you can take in your home.

00:25:48.780 --> 00:25:52.030
The partner server communicates
with the Assistant ecosystem

00:25:52.030 --> 00:25:54.910
to expose devices,
including their traits

00:25:54.910 --> 00:25:56.650
and current status.

00:25:56.650 --> 00:26:00.310
It also implements OAuth 2.0
to authenticate and verify

00:26:00.310 --> 00:26:01.668
your identity.

00:26:01.668 --> 00:26:03.460
The good thing is you
don't have to spin up

00:26:03.460 --> 00:26:05.780
a new instance for
different devices.

00:26:05.780 --> 00:26:08.620
The same partner server can
handle many devices and device

00:26:08.620 --> 00:26:09.910
types.

00:26:09.910 --> 00:26:12.520
Our implementation was
deployed to App Engine,

00:26:12.520 --> 00:26:16.940
but any publicly accessible
server should work.

00:26:16.940 --> 00:26:19.100
After deploying the
Smart Home server,

00:26:19.100 --> 00:26:20.810
you'll need to
create an associated

00:26:20.810 --> 00:26:23.030
action in the Actions console.

00:26:23.030 --> 00:26:24.980
When defining your
action, you'll

00:26:24.980 --> 00:26:30.120
input the URL where your
Smart Home fulfillment lives.

00:26:30.120 --> 00:26:31.820
Now that your partner
server is active,

00:26:31.820 --> 00:26:34.850
how does it actually
receive a request?

00:26:34.850 --> 00:26:37.550
Smart Home devices talk
to your cloud fulfillment

00:26:37.550 --> 00:26:42.480
via WebSockets to handle any
incoming requests from a user.

00:26:42.480 --> 00:26:44.900
But it's not enough to
just receive that request.

00:26:44.900 --> 00:26:47.420
We need to control hardware
to complete the action

00:26:47.420 --> 00:26:49.430
that the user asked for.

00:26:49.430 --> 00:26:53.480
The photo on the left shows
the herb gardens project box.

00:26:53.480 --> 00:26:55.790
Let's take a look at
the full wiring diagram

00:26:55.790 --> 00:26:59.010
to see what's inside.

00:26:59.010 --> 00:27:02.250
In the center of the diagram,
we see a Raspberry Pi

00:27:02.250 --> 00:27:04.410
attached to a motor
driver hat to control

00:27:04.410 --> 00:27:06.810
the plant's rotational motors.

00:27:06.810 --> 00:27:09.510
Relays are used to dispense
water from the pumps

00:27:09.510 --> 00:27:13.085
and start the off-the-shelf
soil humidifier.

00:27:13.085 --> 00:27:14.460
The brightness of
the grow lights

00:27:14.460 --> 00:27:16.950
are controlled by a
pulse width modulation

00:27:16.950 --> 00:27:20.310
from the Raspberry
Pi's GPO pins.

00:27:20.310 --> 00:27:22.770
And finally, what would the
system be without power?

00:27:22.770 --> 00:27:25.680
And we use transformers
to pull it from wall power

00:27:25.680 --> 00:27:28.250
down to usable voltage levels.

00:27:28.250 --> 00:27:29.520
Just a note here--

00:27:29.520 --> 00:27:32.160
the Smart Home platform
is hardware agnostic.

00:27:32.160 --> 00:27:33.890
So while we use
the Raspberry Pi,

00:27:33.890 --> 00:27:35.870
you could use almost
any hardware that

00:27:35.870 --> 00:27:38.990
allows for a web connection.

00:27:38.990 --> 00:27:42.980
To summarize, a Smart Home query
travels from the user's device

00:27:42.980 --> 00:27:46.070
to the Assistant backend
through your Smart Home

00:27:46.070 --> 00:27:49.210
fulfillment server and
down to the local device.

00:27:49.210 --> 00:27:51.800
Our fulfillment server was
deployed to App Engine,

00:27:51.800 --> 00:27:55.780
and we used the Raspberry Pi
to control external hardware.

00:27:55.780 --> 00:27:59.380
As an extension of this project,
we could use the new local home

00:27:59.380 --> 00:28:03.400
SDK to bypass the fulfillment
server entirely for a more

00:28:03.400 --> 00:28:06.420
streamlined local path.

00:28:06.420 --> 00:28:08.130
To help you get
started, there are

00:28:08.130 --> 00:28:11.170
full build instructions and
code available in the GitHub

00:28:11.170 --> 00:28:12.053
read me.

00:28:12.053 --> 00:28:14.220
We can't wait to see what
kind of Smart Home devices

00:28:14.220 --> 00:28:15.382
you all create.

00:28:15.382 --> 00:28:17.340
MARY CHEN: I actually
just want the herb garden

00:28:17.340 --> 00:28:18.150
for my own place.

00:28:18.150 --> 00:28:19.380
MATTHEW PEGULA: Yeah, it
would be super convenient.

00:28:19.380 --> 00:28:20.840
OSCAR PROM: Nice in
the kitchen for sure.

00:28:20.840 --> 00:28:21.840
MARY CHEN: Yeah, right?

00:28:21.840 --> 00:28:22.080
All right.

00:28:22.080 --> 00:28:23.140
So there you have it.

00:28:23.140 --> 00:28:27.060
We just went over four really
cool actions in our sandbox

00:28:27.060 --> 00:28:29.870
with four very different
development journeys.

00:28:29.870 --> 00:28:31.620
As you can see, and
the things that you've

00:28:31.620 --> 00:28:35.200
been hearing at this I/O, we
have something for everybody.

00:28:35.200 --> 00:28:38.250
So if you're a content creator
or you are a webmaster or a web

00:28:38.250 --> 00:28:41.990
developer, check out our new
how-to templates and schema.org

00:28:41.990 --> 00:28:43.560
markups so that
your content can be

00:28:43.560 --> 00:28:47.400
easily accessible to new
users on the Google Assistant.

00:28:47.400 --> 00:28:49.170
And if you're an
Android app developer,

00:28:49.170 --> 00:28:50.880
think of all the
key functionalities

00:28:50.880 --> 00:28:53.220
of your app you want to
make available on the Google

00:28:53.220 --> 00:28:56.580
Assistant, such as a
toothbrush moment or things

00:28:56.580 --> 00:28:58.630
where users can re-engage.

00:28:58.630 --> 00:29:00.600
And if you're itching
to build something new,

00:29:00.600 --> 00:29:02.738
check out our new
interactive Canvas.

00:29:02.738 --> 00:29:04.530
We can't wait to see
what kind of fun games

00:29:04.530 --> 00:29:06.430
you all come up with.

00:29:06.430 --> 00:29:09.150
And then finally, if you
to build cool hardware,

00:29:09.150 --> 00:29:13.530
check out our new Smart Home
traits and our Smart Home docs.

00:29:13.530 --> 00:29:15.960
We're excited to see what
awesome actions you all build,

00:29:15.960 --> 00:29:18.420
so if you publish
anything, definitely let

00:29:18.420 --> 00:29:22.170
us know by tagging us on Twitter
or checking out our new Reddit

00:29:22.170 --> 00:29:23.460
community.

00:29:23.460 --> 00:29:26.100
We're really excited for
everything that is in store,

00:29:26.100 --> 00:29:28.950
and we hope that you leave
with a great foundation

00:29:28.950 --> 00:29:31.230
to build really awesome actions.

00:29:31.230 --> 00:29:34.440
And if you see something cool,
check back with our sandbox.

00:29:34.440 --> 00:29:36.510
You have a couple of hours left.

00:29:36.510 --> 00:29:40.900
So thanks for joining us, and
have a great rest of the day.

00:29:40.900 --> 00:29:42.150
OSCAR PROM: Thanks, everybody.

00:29:42.150 --> 00:29:43.025
MARY CHEN: Thank you.

00:29:43.025 --> 00:29:45.450
[APPLAUSE]

00:29:45.450 --> 00:29:50.000
[MUSIC PLAYING]

