WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:06.909
[Music]

00:00:06.909 --> 00:00:06.919
[Music]
 

00:00:06.919 --> 00:00:09.799
[Music]
hello welcome I'm Jerome do--she I'm a

00:00:09.799 --> 00:00:09.809
hello welcome I'm Jerome do--she I'm a
 

00:00:09.809 --> 00:00:12.770
hello welcome I'm Jerome do--she I'm a
software engineer at Google I'm Chris

00:00:12.770 --> 00:00:12.780
software engineer at Google I'm Chris
 

00:00:12.780 --> 00:00:15.169
software engineer at Google I'm Chris
Herrington I'm more social engineer and

00:00:15.169 --> 00:00:15.179
Herrington I'm more social engineer and
 

00:00:15.179 --> 00:00:18.470
Herrington I'm more social engineer and
I'm also a software engineer hi guys I'm

00:00:18.470 --> 00:00:18.480
I'm also a software engineer hi guys I'm
 

00:00:18.480 --> 00:00:22.519
I'm also a software engineer hi guys I'm
Leo I'm a product manager and so we're

00:00:22.519 --> 00:00:22.529
Leo I'm a product manager and so we're
 

00:00:22.529 --> 00:00:24.400
Leo I'm a product manager and so we're
here to talk about their Gradle plugin

00:00:24.400 --> 00:00:24.410
here to talk about their Gradle plugin
 

00:00:24.410 --> 00:00:27.349
here to talk about their Gradle plugin
but first I wanted to talk about Bill

00:00:27.349 --> 00:00:27.359
but first I wanted to talk about Bill
 

00:00:27.359 --> 00:00:27.830
but first I wanted to talk about Bill
speed

00:00:27.830 --> 00:00:27.840
speed
 

00:00:27.840 --> 00:00:29.990
speed
you've probably heard from Karen this

00:00:29.990 --> 00:00:30.000
you've probably heard from Karen this
 

00:00:30.000 --> 00:00:32.030
you've probably heard from Karen this
morning we recently looked at our data

00:00:32.030 --> 00:00:32.040
morning we recently looked at our data
 

00:00:32.040 --> 00:00:34.490
morning we recently looked at our data
and had some interesting findings that I

00:00:34.490 --> 00:00:34.500
and had some interesting findings that I
 

00:00:34.500 --> 00:00:36.170
and had some interesting findings that I
wanted to share with you today in old

00:00:36.170 --> 00:00:36.180
wanted to share with you today in old
 

00:00:36.180 --> 00:00:39.500
wanted to share with you today in old
transparency the metrics that are gonna

00:00:39.500 --> 00:00:39.510
transparency the metrics that are gonna
 

00:00:39.510 --> 00:00:42.650
transparency the metrics that are gonna
see comes from developer we opted into

00:00:42.650 --> 00:00:42.660
see comes from developer we opted into
 

00:00:42.660 --> 00:00:44.869
see comes from developer we opted into
sharing their data with us so if that's

00:00:44.869 --> 00:00:44.879
sharing their data with us so if that's
 

00:00:44.879 --> 00:00:48.520
sharing their data with us so if that's
your case thank you very much all right

00:00:48.520 --> 00:00:48.530
your case thank you very much all right
 

00:00:48.530 --> 00:00:52.700
your case thank you very much all right
so first we looked at Bill time change a

00:00:52.700 --> 00:00:52.710
so first we looked at Bill time change a
 

00:00:52.710 --> 00:00:54.500
so first we looked at Bill time change a
little bit across a couple bill times

00:00:54.500 --> 00:00:54.510
little bit across a couple bill times
 

00:00:54.510 --> 00:00:57.680
little bit across a couple bill times
before and right after an Android Gradle

00:00:57.680 --> 00:00:57.690
before and right after an Android Gradle
 

00:00:57.690 --> 00:01:00.380
before and right after an Android Gradle
plug-in upgrade and so what you see here

00:01:00.380 --> 00:01:00.390
plug-in upgrade and so what you see here
 

00:01:00.390 --> 00:01:04.219
plug-in upgrade and so what you see here
is the median improvement in speed in

00:01:04.219 --> 00:01:04.229
is the median improvement in speed in
 

00:01:04.229 --> 00:01:06.740
is the median improvement in speed in
percents and you can see that outside of

00:01:06.740 --> 00:01:06.750
percents and you can see that outside of
 

00:01:06.750 --> 00:01:08.770
percents and you can see that outside of
a minor regression in three one two

00:01:08.770 --> 00:01:08.780
a minor regression in three one two
 

00:01:08.780 --> 00:01:11.510
a minor regression in three one two
we've been pretty consistent at seven or

00:01:11.510 --> 00:01:11.520
we've been pretty consistent at seven or
 

00:01:11.520 --> 00:01:14.030
we've been pretty consistent at seven or
eight percent and even 20 percent with

00:01:14.030 --> 00:01:14.040
eight percent and even 20 percent with
 

00:01:14.040 --> 00:01:19.219
eight percent and even 20 percent with
three 200 so we thought okay if everyone

00:01:19.219 --> 00:01:19.229
three 200 so we thought okay if everyone
 

00:01:19.229 --> 00:01:21.950
three 200 so we thought okay if everyone
upgrades to the latest three two or the

00:01:21.950 --> 00:01:21.960
upgrades to the latest three two or the
 

00:01:21.960 --> 00:01:24.289
upgrades to the latest three two or the
latest release build speed should be

00:01:24.289 --> 00:01:24.299
latest release build speed should be
 

00:01:24.299 --> 00:01:29.090
latest release build speed should be
getting faster and faster right well not

00:01:29.090 --> 00:01:29.100
getting faster and faster right well not
 

00:01:29.100 --> 00:01:30.010
getting faster and faster right well not
exactly

00:01:30.010 --> 00:01:30.020
exactly
 

00:01:30.020 --> 00:01:32.270
exactly
turns out that when we looked at Bill

00:01:32.270 --> 00:01:32.280
turns out that when we looked at Bill
 

00:01:32.280 --> 00:01:35.569
turns out that when we looked at Bill
speed over time it is getting slower and

00:01:35.569 --> 00:01:35.579
speed over time it is getting slower and
 

00:01:35.579 --> 00:01:39.050
speed over time it is getting slower and
slower and I don't want to coalesce to

00:01:39.050 --> 00:01:39.060
slower and I don't want to coalesce to
 

00:01:39.060 --> 00:01:40.969
slower and I don't want to coalesce to
build speed conundrum but it got us a

00:01:40.969 --> 00:01:40.979
build speed conundrum but it got us a
 

00:01:40.979 --> 00:01:44.060
build speed conundrum but it got us a
little bit puzzled how is it possible

00:01:44.060 --> 00:01:44.070
little bit puzzled how is it possible
 

00:01:44.070 --> 00:01:46.010
little bit puzzled how is it possible
that on one end we kid we keep improving

00:01:46.010 --> 00:01:46.020
that on one end we kid we keep improving
 

00:01:46.020 --> 00:01:48.920
that on one end we kid we keep improving
with every release and on the other end

00:01:48.920 --> 00:01:48.930
with every release and on the other end
 

00:01:48.930 --> 00:01:51.289
with every release and on the other end
we keep seeing bill speed gets slower

00:01:51.289 --> 00:01:51.299
we keep seeing bill speed gets slower
 

00:01:51.299 --> 00:01:55.219
we keep seeing bill speed gets slower
and slower so after some exploration we

00:01:55.219 --> 00:01:55.229
and slower so after some exploration we
 

00:01:55.229 --> 00:01:57.620
and slower so after some exploration we
realized that the build ecosystem is

00:01:57.620 --> 00:01:57.630
realized that the build ecosystem is
 

00:01:57.630 --> 00:02:00.260
realized that the build ecosystem is
very complex and I'm a new guy and enjoy

00:02:00.260 --> 00:02:00.270
very complex and I'm a new guy and enjoy
 

00:02:00.270 --> 00:02:02.030
very complex and I'm a new guy and enjoy
it so I can tell you it is very complex

00:02:02.030 --> 00:02:02.040
it so I can tell you it is very complex
 

00:02:02.040 --> 00:02:05.420
it so I can tell you it is very complex
for me and it's rapidly evolving with so

00:02:05.420 --> 00:02:05.430
for me and it's rapidly evolving with so
 

00:02:05.430 --> 00:02:07.900
for me and it's rapidly evolving with so
many things that can impact your build

00:02:07.900 --> 00:02:07.910
many things that can impact your build
 

00:02:07.910 --> 00:02:12.500
many things that can impact your build
for example your apps are growing your

00:02:12.500 --> 00:02:12.510
for example your apps are growing your
 

00:02:12.510 --> 00:02:13.790
for example your apps are growing your
writing more code that's great

00:02:13.790 --> 00:02:13.800
writing more code that's great
 

00:02:13.800 --> 00:02:16.250
writing more code that's great
it can slow down you your bill a little

00:02:16.250 --> 00:02:16.260
it can slow down you your bill a little
 

00:02:16.260 --> 00:02:19.940
it can slow down you your bill a little
bit but that's not the lion chair turns

00:02:19.940 --> 00:02:19.950
bit but that's not the lion chair turns
 

00:02:19.950 --> 00:02:23.150
bit but that's not the lion chair turns
out that 96% of you use some form of

00:02:23.150 --> 00:02:23.160
out that 96% of you use some form of
 

00:02:23.160 --> 00:02:25.190
out that 96% of you use some form of
Gradle plugin outside of the Android

00:02:25.190 --> 00:02:25.200
Gradle plugin outside of the Android
 

00:02:25.200 --> 00:02:26.750
Gradle plugin outside of the Android
Gradle plugin whether it's another

00:02:26.750 --> 00:02:26.760
Gradle plugin whether it's another
 

00:02:26.760 --> 00:02:29.060
Gradle plugin whether it's another
Google plug-in or third-party plug-in or

00:02:29.060 --> 00:02:29.070
Google plug-in or third-party plug-in or
 

00:02:29.070 --> 00:02:30.320
Google plug-in or third-party plug-in or
even something that you wrote for your

00:02:30.320 --> 00:02:30.330
even something that you wrote for your
 

00:02:30.330 --> 00:02:32.900
even something that you wrote for your
own app or your own company and when we

00:02:32.900 --> 00:02:32.910
own app or your own company and when we
 

00:02:32.910 --> 00:02:34.220
own app or your own company and when we
took a look at some of those plugins

00:02:34.220 --> 00:02:34.230
took a look at some of those plugins
 

00:02:34.230 --> 00:02:38.080
took a look at some of those plugins
they were not all super optimized

00:02:38.080 --> 00:02:38.090
they were not all super optimized
 

00:02:38.090 --> 00:02:41.180
they were not all super optimized
there's also a lot of annotation process

00:02:41.180 --> 00:02:41.190
there's also a lot of annotation process
 

00:02:41.190 --> 00:02:43.340
there's also a lot of annotation process
are out there and they sometime lacked

00:02:43.340 --> 00:02:43.350
are out there and they sometime lacked
 

00:02:43.350 --> 00:02:45.710
are out there and they sometime lacked
incrementality so when you do a tiny

00:02:45.710 --> 00:02:45.720
incrementality so when you do a tiny
 

00:02:45.720 --> 00:02:47.420
incrementality so when you do a tiny
change it has to recompile everything

00:02:47.420 --> 00:02:47.430
change it has to recompile everything
 

00:02:47.430 --> 00:02:52.010
change it has to recompile everything
and your build speed goes away some new

00:02:52.010 --> 00:02:52.020
and your build speed goes away some new
 

00:02:52.020 --> 00:02:54.530
and your build speed goes away some new
languages like Java 8 for example or

00:02:54.530 --> 00:02:54.540
languages like Java 8 for example or
 

00:02:54.540 --> 00:02:56.750
languages like Java 8 for example or
Kotlin can have some impact on your

00:02:56.750 --> 00:02:56.760
Kotlin can have some impact on your
 

00:02:56.760 --> 00:02:59.360
Kotlin can have some impact on your
speed with Java 8 we mitigated some of

00:02:59.360 --> 00:02:59.370
speed with Java 8 we mitigated some of
 

00:02:59.370 --> 00:03:01.610
speed with Java 8 we mitigated some of
the impact by merging the dexing and the

00:03:01.610 --> 00:03:01.620
the impact by merging the dexing and the
 

00:03:01.620 --> 00:03:03.350
the impact by merging the dexing and the
sugaring together in one step with the

00:03:03.350 --> 00:03:03.360
sugaring together in one step with the
 

00:03:03.360 --> 00:03:05.570
sugaring together in one step with the
eight and working a lot with JetBrains

00:03:05.570 --> 00:03:05.580
eight and working a lot with JetBrains
 

00:03:05.580 --> 00:03:07.910
eight and working a lot with JetBrains
whim to improve the cutline compiler and

00:03:07.910 --> 00:03:07.920
whim to improve the cutline compiler and
 

00:03:07.920 --> 00:03:11.870
whim to improve the cutline compiler and
annotation processor there's also some

00:03:11.870 --> 00:03:11.880
annotation processor there's also some
 

00:03:11.880 --> 00:03:13.400
annotation processor there's also some
resource scaling issues if you have a

00:03:13.400 --> 00:03:13.410
resource scaling issues if you have a
 

00:03:13.410 --> 00:03:15.170
resource scaling issues if you have a
lot of modules some of our existing

00:03:15.170 --> 00:03:15.180
lot of modules some of our existing
 

00:03:15.180 --> 00:03:17.150
lot of modules some of our existing
resource pipeline is not necessarily

00:03:17.150 --> 00:03:17.160
resource pipeline is not necessarily
 

00:03:17.160 --> 00:03:20.330
resource pipeline is not necessarily
optimized so you can see that that's a

00:03:20.330 --> 00:03:20.340
optimized so you can see that that's a
 

00:03:20.340 --> 00:03:23.750
optimized so you can see that that's a
lot and when you add all of this it can

00:03:23.750 --> 00:03:23.760
lot and when you add all of this it can
 

00:03:23.760 --> 00:03:25.580
lot and when you add all of this it can
have a pretty significant impact on your

00:03:25.580 --> 00:03:25.590
have a pretty significant impact on your
 

00:03:25.590 --> 00:03:29.360
have a pretty significant impact on your
bill and to top it off a recent survey

00:03:29.360 --> 00:03:29.370
bill and to top it off a recent survey
 

00:03:29.370 --> 00:03:31.430
bill and to top it off a recent survey
that we did show that that 60% of

00:03:31.430 --> 00:03:31.440
that we did show that that 60% of
 

00:03:31.440 --> 00:03:34.130
that we did show that that 60% of
developer either do not analyze build

00:03:34.130 --> 00:03:34.140
developer either do not analyze build
 

00:03:34.140 --> 00:03:37.699
developer either do not analyze build
speed at all or do not know how to so

00:03:37.699 --> 00:03:37.709
speed at all or do not know how to so
 

00:03:37.709 --> 00:03:39.949
speed at all or do not know how to so
there's definitely an awareness problem

00:03:39.949 --> 00:03:39.959
there's definitely an awareness problem
 

00:03:39.959 --> 00:03:42.470
there's definitely an awareness problem
as well around what can cause delay to

00:03:42.470 --> 00:03:42.480
as well around what can cause delay to
 

00:03:42.480 --> 00:03:46.000
as well around what can cause delay to
your build alright so what can we do

00:03:46.000 --> 00:03:46.010
your build alright so what can we do
 

00:03:46.010 --> 00:03:49.490
your build alright so what can we do
well first I want to recognize that some

00:03:49.490 --> 00:03:49.500
well first I want to recognize that some
 

00:03:49.500 --> 00:03:51.949
well first I want to recognize that some
of what I just mentioned comes directly

00:03:51.949 --> 00:03:51.959
of what I just mentioned comes directly
 

00:03:51.959 --> 00:03:54.650
of what I just mentioned comes directly
from us Google at large and we're really

00:03:54.650 --> 00:03:54.660
from us Google at large and we're really
 

00:03:54.660 --> 00:03:56.120
from us Google at large and we're really
serious about improving this we're

00:03:56.120 --> 00:03:56.130
serious about improving this we're
 

00:03:56.130 --> 00:03:57.560
serious about improving this we're
taking step internally to improve

00:03:57.560 --> 00:03:57.570
taking step internally to improve
 

00:03:57.570 --> 00:04:00.580
taking step internally to improve
existing features as well as the new one

00:04:00.580 --> 00:04:00.590
existing features as well as the new one
 

00:04:00.590 --> 00:04:03.500
existing features as well as the new one
but as I mentioned there's also an

00:04:03.500 --> 00:04:03.510
but as I mentioned there's also an
 

00:04:03.510 --> 00:04:06.580
but as I mentioned there's also an
awareness problem in tooling issue and

00:04:06.580 --> 00:04:06.590
awareness problem in tooling issue and
 

00:04:06.590 --> 00:04:10.490
awareness problem in tooling issue and
we want to launch new features and new

00:04:10.490 --> 00:04:10.500
we want to launch new features and new
 

00:04:10.500 --> 00:04:12.199
we want to launch new features and new
attribution features that can help you

00:04:12.199 --> 00:04:12.209
attribution features that can help you
 

00:04:12.209 --> 00:04:13.610
attribution features that can help you
better understand what's going on with

00:04:13.610 --> 00:04:13.620
better understand what's going on with
 

00:04:13.620 --> 00:04:16.159
better understand what's going on with
your build and what is really impacting

00:04:16.159 --> 00:04:16.169
your build and what is really impacting
 

00:04:16.169 --> 00:04:18.380
your build and what is really impacting
your build and we'll cover this in a

00:04:18.380 --> 00:04:18.390
your build and we'll cover this in a
 

00:04:18.390 --> 00:04:22.219
your build and we'll cover this in a
little bit we're also really doubling

00:04:22.219 --> 00:04:22.229
little bit we're also really doubling
 

00:04:22.229 --> 00:04:25.250
little bit we're also really doubling
down on performance features working

00:04:25.250 --> 00:04:25.260
down on performance features working
 

00:04:25.260 --> 00:04:27.560
down on performance features working
together with Gradle and there's a lot

00:04:27.560 --> 00:04:27.570
together with Gradle and there's a lot
 

00:04:27.570 --> 00:04:27.920
together with Gradle and there's a lot
of new

00:04:27.920 --> 00:04:27.930
of new
 

00:04:27.930 --> 00:04:29.570
of new
features that'll let jerome chris and

00:04:29.570 --> 00:04:29.580
features that'll let jerome chris and
 

00:04:29.580 --> 00:04:36.350
features that'll let jerome chris and
isabella sure with you thank you alright

00:04:36.350 --> 00:04:36.360
isabella sure with you thank you alright
 

00:04:36.360 --> 00:04:39.080
isabella sure with you thank you alright
so let's get started what did we add in

00:04:39.080 --> 00:04:39.090
so let's get started what did we add in
 

00:04:39.090 --> 00:04:42.830
so let's get started what did we add in
the latest 3.2 release so the first

00:04:42.830 --> 00:04:42.840
the latest 3.2 release so the first
 

00:04:42.840 --> 00:04:44.379
the latest 3.2 release so the first
thing i want to talk about is

00:04:44.379 --> 00:04:44.389
thing i want to talk about is
 

00:04:44.389 --> 00:04:46.730
thing i want to talk about is
incrementality in a notation processor

00:04:46.730 --> 00:04:46.740
incrementality in a notation processor
 

00:04:46.740 --> 00:04:50.360
incrementality in a notation processor
that Leo alluded before as you probably

00:04:50.360 --> 00:04:50.370
that Leo alluded before as you probably
 

00:04:50.370 --> 00:04:53.029
that Leo alluded before as you probably
know Java C and even cotton C has been

00:04:53.029 --> 00:04:53.039
know Java C and even cotton C has been
 

00:04:53.039 --> 00:04:55.430
know Java C and even cotton C has been
incremental for quite some time however

00:04:55.430 --> 00:04:55.440
incremental for quite some time however
 

00:04:55.440 --> 00:04:57.680
incremental for quite some time however
if you have annotation processors all of

00:04:57.680 --> 00:04:57.690
if you have annotation processors all of
 

00:04:57.690 --> 00:05:00.080
if you have annotation processors all of
these incrementality goes out of the

00:05:00.080 --> 00:05:00.090
these incrementality goes out of the
 

00:05:00.090 --> 00:05:03.650
these incrementality goes out of the
door and so it's a big problem and so it

00:05:03.650 --> 00:05:03.660
door and so it's a big problem and so it
 

00:05:03.660 --> 00:05:05.360
door and so it's a big problem and so it
has enormous performance ramifications

00:05:05.360 --> 00:05:05.370
has enormous performance ramifications
 

00:05:05.370 --> 00:05:06.680
has enormous performance ramifications
because when we look at our internal

00:05:06.680 --> 00:05:06.690
because when we look at our internal
 

00:05:06.690 --> 00:05:08.810
because when we look at our internal
dashboards we can see that the JVM

00:05:08.810 --> 00:05:08.820
dashboards we can see that the JVM
 

00:05:08.820 --> 00:05:11.150
dashboards we can see that the JVM
bytecode production tasks are the most

00:05:11.150 --> 00:05:11.160
bytecode production tasks are the most
 

00:05:11.160 --> 00:05:13.010
bytecode production tasks are the most
consuming task of our build times so

00:05:13.010 --> 00:05:13.020
consuming task of our build times so
 

00:05:13.020 --> 00:05:14.420
consuming task of our build times so
basically being a non incremental is a

00:05:14.420 --> 00:05:14.430
basically being a non incremental is a
 

00:05:14.430 --> 00:05:17.900
basically being a non incremental is a
huge problem so glad all with Groupon

00:05:17.900 --> 00:05:17.910
huge problem so glad all with Groupon
 

00:05:17.910 --> 00:05:20.629
huge problem so glad all with Groupon
and with Google has come up with incap

00:05:20.629 --> 00:05:20.639
and with Google has come up with incap
 

00:05:20.639 --> 00:05:23.360
and with Google has come up with incap
which is aimed as making annotation

00:05:23.360 --> 00:05:23.370
which is aimed as making annotation
 

00:05:23.370 --> 00:05:25.460
which is aimed as making annotation
processors incremental now there's

00:05:25.460 --> 00:05:25.470
processors incremental now there's
 

00:05:25.470 --> 00:05:27.650
processors incremental now there's
really two level of supports that we are

00:05:27.650 --> 00:05:27.660
really two level of supports that we are
 

00:05:27.660 --> 00:05:29.570
really two level of supports that we are
aiming for the first one is called

00:05:29.570 --> 00:05:29.580
aiming for the first one is called
 

00:05:29.580 --> 00:05:31.219
aiming for the first one is called
aggregating which basically means that

00:05:31.219 --> 00:05:31.229
aggregating which basically means that
 

00:05:31.229 --> 00:05:33.800
aggregating which basically means that
if you change a class which is annotated

00:05:33.800 --> 00:05:33.810
if you change a class which is annotated
 

00:05:33.810 --> 00:05:36.710
if you change a class which is annotated
with an annotation of interest we will

00:05:36.710 --> 00:05:36.720
with an annotation of interest we will
 

00:05:36.720 --> 00:05:38.629
with an annotation of interest we will
have to recompile all the classes which

00:05:38.629 --> 00:05:38.639
have to recompile all the classes which
 

00:05:38.639 --> 00:05:40.279
have to recompile all the classes which
are annotated with the same annotations

00:05:40.279 --> 00:05:40.289
are annotated with the same annotations
 

00:05:40.289 --> 00:05:42.230
are annotated with the same annotations
so it's not exactly incremental but it's

00:05:42.230 --> 00:05:42.240
so it's not exactly incremental but it's
 

00:05:42.240 --> 00:05:43.159
so it's not exactly incremental but it's
better than we implement then

00:05:43.159 --> 00:05:43.169
better than we implement then
 

00:05:43.169 --> 00:05:45.890
better than we implement then
recompiling everything the other one

00:05:45.890 --> 00:05:45.900
recompiling everything the other one
 

00:05:45.900 --> 00:05:47.659
recompiling everything the other one
which is called isolating which is much

00:05:47.659 --> 00:05:47.669
which is called isolating which is much
 

00:05:47.669 --> 00:05:50.390
which is called isolating which is much
better much more fine-grained will allow

00:05:50.390 --> 00:05:50.400
better much more fine-grained will allow
 

00:05:50.400 --> 00:05:52.219
better much more fine-grained will allow
you to recompile only what has changed

00:05:52.219 --> 00:05:52.229
you to recompile only what has changed
 

00:05:52.229 --> 00:05:54.529
you to recompile only what has changed
right so there's this different level of

00:05:54.529 --> 00:05:54.539
right so there's this different level of
 

00:05:54.539 --> 00:05:56.749
right so there's this different level of
support what is important to realize for

00:05:56.749 --> 00:05:56.759
support what is important to realize for
 

00:05:56.759 --> 00:05:59.029
support what is important to realize for
some of you is that if you have

00:05:59.029 --> 00:05:59.039
some of you is that if you have
 

00:05:59.039 --> 00:06:01.010
some of you is that if you have
annotation processes yourself that you

00:06:01.010 --> 00:06:01.020
annotation processes yourself that you
 

00:06:01.020 --> 00:06:02.870
annotation processes yourself that you
developed in-house it would be your

00:06:02.870 --> 00:06:02.880
developed in-house it would be your
 

00:06:02.880 --> 00:06:04.760
developed in-house it would be your
responsibility to make those annotation

00:06:04.760 --> 00:06:04.770
responsibility to make those annotation
 

00:06:04.770 --> 00:06:07.640
responsibility to make those annotation
processors incap compliant we are

00:06:07.640 --> 00:06:07.650
processors incap compliant we are
 

00:06:07.650 --> 00:06:09.439
processors incap compliant we are
working hard internally to make the most

00:06:09.439 --> 00:06:09.449
working hard internally to make the most
 

00:06:09.449 --> 00:06:11.990
working hard internally to make the most
popular annotation processors incap

00:06:11.990 --> 00:06:12.000
popular annotation processors incap
 

00:06:12.000 --> 00:06:13.909
popular annotation processors incap
compliant so we're gonna do dagger and

00:06:13.909 --> 00:06:13.919
compliant so we're gonna do dagger and
 

00:06:13.919 --> 00:06:15.350
compliant so we're gonna do dagger and
we're gonna do unit data binding and all

00:06:15.350 --> 00:06:15.360
we're gonna do unit data binding and all
 

00:06:15.360 --> 00:06:17.029
we're gonna do unit data binding and all
this kind of stuff but if you have your

00:06:17.029 --> 00:06:17.039
this kind of stuff but if you have your
 

00:06:17.039 --> 00:06:18.379
this kind of stuff but if you have your
own you're gonna have to work on it

00:06:18.379 --> 00:06:18.389
own you're gonna have to work on it
 

00:06:18.389 --> 00:06:22.490
own you're gonna have to work on it
yourself and if you don't we also plan

00:06:22.490 --> 00:06:22.500
yourself and if you don't we also plan
 

00:06:22.500 --> 00:06:25.010
yourself and if you don't we also plan
to make it very very clear that if we

00:06:25.010 --> 00:06:25.020
to make it very very clear that if we
 

00:06:25.020 --> 00:06:28.040
to make it very very clear that if we
have to revert our compilation to not be

00:06:28.040 --> 00:06:28.050
have to revert our compilation to not be
 

00:06:28.050 --> 00:06:29.779
have to revert our compilation to not be
incremental we're going to make it very

00:06:29.779 --> 00:06:29.789
incremental we're going to make it very
 

00:06:29.789 --> 00:06:32.089
incremental we're going to make it very
clear which annotation processors are

00:06:32.089 --> 00:06:32.099
clear which annotation processors are
 

00:06:32.099 --> 00:06:34.070
clear which annotation processors are
making forcing us to not be incremental

00:06:34.070 --> 00:06:34.080
making forcing us to not be incremental
 

00:06:34.080 --> 00:06:37.250
making forcing us to not be incremental
so if you're providing those expect to

00:06:37.250 --> 00:06:37.260
so if you're providing those expect to
 

00:06:37.260 --> 00:06:38.779
so if you're providing those expect to
have some bad publicity coming from us

00:06:38.779 --> 00:06:38.789
have some bad publicity coming from us
 

00:06:38.789 --> 00:06:40.190
have some bad publicity coming from us
saying yeah we are running on

00:06:40.190 --> 00:06:40.200
saying yeah we are running on
 

00:06:40.200 --> 00:06:40.730
saying yeah we are running on
incremental

00:06:40.730 --> 00:06:40.740
incremental
 

00:06:40.740 --> 00:06:43.420
incremental
because of those annotation processors

00:06:43.420 --> 00:06:43.430
because of those annotation processors
 

00:06:43.430 --> 00:06:45.740
because of those annotation processors
the second thing I want to talk about is

00:06:45.740 --> 00:06:45.750
the second thing I want to talk about is
 

00:06:45.750 --> 00:06:48.620
the second thing I want to talk about is
a bundle so you must have heard about it

00:06:48.620 --> 00:06:48.630
a bundle so you must have heard about it
 

00:06:48.630 --> 00:06:49.279
a bundle so you must have heard about it
by now

00:06:49.279 --> 00:06:49.289
by now
 

00:06:49.289 --> 00:06:51.320
by now
in the past when people wanted to reduce

00:06:51.320 --> 00:06:51.330
in the past when people wanted to reduce
 

00:06:51.330 --> 00:06:53.719
in the past when people wanted to reduce
they pick a size they had to do multi

00:06:53.719 --> 00:06:53.729
they pick a size they had to do multi
 

00:06:53.729 --> 00:06:55.999
they pick a size they had to do multi
apk which risotto there's a lot of

00:06:55.999 --> 00:06:56.009
apk which risotto there's a lot of
 

00:06:56.009 --> 00:06:59.029
apk which risotto there's a lot of
manual steps related to deployments was

00:06:59.029 --> 00:06:59.039
manual steps related to deployments was
 

00:06:59.039 --> 00:07:01.129
manual steps related to deployments was
very complicated so now what you can do

00:07:01.129 --> 00:07:01.139
very complicated so now what you can do
 

00:07:01.139 --> 00:07:02.600
very complicated so now what you can do
is basically create this app bundle

00:07:02.600 --> 00:07:02.610
is basically create this app bundle
 

00:07:02.610 --> 00:07:04.730
is basically create this app bundle
which is a glorified zip file with a

00:07:04.730 --> 00:07:04.740
which is a glorified zip file with a
 

00:07:04.740 --> 00:07:07.700
which is a glorified zip file with a
universal apk in a specific format which

00:07:07.700 --> 00:07:07.710
universal apk in a specific format which
 

00:07:07.710 --> 00:07:10.670
universal apk in a specific format which
cannot be immediately installed on a

00:07:10.670 --> 00:07:10.680
cannot be immediately installed on a
 

00:07:10.680 --> 00:07:13.010
cannot be immediately installed on a
device but can be used by the Play Store

00:07:13.010 --> 00:07:13.020
device but can be used by the Play Store
 

00:07:13.020 --> 00:07:15.680
device but can be used by the Play Store
to pre create all these different apks

00:07:15.680 --> 00:07:15.690
to pre create all these different apks
 

00:07:15.690 --> 00:07:17.689
to pre create all these different apks
for all the different devices that

00:07:17.689 --> 00:07:17.699
for all the different devices that
 

00:07:17.699 --> 00:07:19.850
for all the different devices that
you're targeting so you've got fast

00:07:19.850 --> 00:07:19.860
you're targeting so you've got fast
 

00:07:19.860 --> 00:07:21.860
you're targeting so you've got fast
delivery all this nice feature without

00:07:21.860 --> 00:07:21.870
delivery all this nice feature without
 

00:07:21.870 --> 00:07:24.290
delivery all this nice feature without
having to do it yourself now one of the

00:07:24.290 --> 00:07:24.300
having to do it yourself now one of the
 

00:07:24.300 --> 00:07:25.339
having to do it yourself now one of the
thing you need to understand as a

00:07:25.339 --> 00:07:25.349
thing you need to understand as a
 

00:07:25.349 --> 00:07:28.790
thing you need to understand as a
developer using the Android kernel

00:07:28.790 --> 00:07:28.800
developer using the Android kernel
 

00:07:28.800 --> 00:07:30.230
developer using the Android kernel
plug-in is that there are things which

00:07:30.230 --> 00:07:30.240
plug-in is that there are things which
 

00:07:30.240 --> 00:07:31.640
plug-in is that there are things which
have changed because of that right for

00:07:31.640 --> 00:07:31.650
have changed because of that right for
 

00:07:31.650 --> 00:07:33.620
have changed because of that right for
instance you know you can define if you

00:07:33.620 --> 00:07:33.630
instance you know you can define if you
 

00:07:33.630 --> 00:07:35.360
instance you know you can define if you
use modality and you have feature

00:07:35.360 --> 00:07:35.370
use modality and you have feature
 

00:07:35.370 --> 00:07:37.100
use modality and you have feature
modules for instance you can define a

00:07:37.100 --> 00:07:37.110
modules for instance you can define a
 

00:07:37.110 --> 00:07:40.370
modules for instance you can define a
number of things inside those which are

00:07:40.370 --> 00:07:40.380
number of things inside those which are
 

00:07:40.380 --> 00:07:43.610
number of things inside those which are
modules yet the base module is the one

00:07:43.610 --> 00:07:43.620
modules yet the base module is the one
 

00:07:43.620 --> 00:07:47.480
modules yet the base module is the one
that will actually be providing some

00:07:47.480 --> 00:07:47.490
that will actually be providing some
 

00:07:47.490 --> 00:07:49.370
that will actually be providing some
information even for the future modules

00:07:49.370 --> 00:07:49.380
information even for the future modules
 

00:07:49.380 --> 00:07:51.950
information even for the future modules
so for instance the application ID the

00:07:51.950 --> 00:07:51.960
so for instance the application ID the
 

00:07:51.960 --> 00:07:54.560
so for instance the application ID the
version code soon the signing

00:07:54.560 --> 00:07:54.570
version code soon the signing
 

00:07:54.570 --> 00:07:56.749
version code soon the signing
information all of those comes from the

00:07:56.749 --> 00:07:56.759
information all of those comes from the
 

00:07:56.759 --> 00:07:58.730
information all of those comes from the
base ID in theory we would want to

00:07:58.730 --> 00:07:58.740
base ID in theory we would want to
 

00:07:58.740 --> 00:08:01.850
base ID in theory we would want to
reduce the dsl per module type so that

00:08:01.850 --> 00:08:01.860
reduce the dsl per module type so that
 

00:08:01.860 --> 00:08:04.580
reduce the dsl per module type so that
you could only you could only provide on

00:08:04.580 --> 00:08:04.590
you could only you could only provide on
 

00:08:04.590 --> 00:08:06.560
you could only you could only provide on
on the Builder girdle of each of this

00:08:06.560 --> 00:08:06.570
on the Builder girdle of each of this
 

00:08:06.570 --> 00:08:08.510
on the Builder girdle of each of this
feature module the exact information

00:08:08.510 --> 00:08:08.520
feature module the exact information
 

00:08:08.520 --> 00:08:11.089
feature module the exact information
that we know we will be using but we

00:08:11.089 --> 00:08:11.099
that we know we will be using but we
 

00:08:11.099 --> 00:08:12.800
that we know we will be using but we
don't have time so it's the same DSL

00:08:12.800 --> 00:08:12.810
don't have time so it's the same DSL
 

00:08:12.810 --> 00:08:14.300
don't have time so it's the same DSL
everywhere and you have to be aware that

00:08:14.300 --> 00:08:14.310
everywhere and you have to be aware that
 

00:08:14.310 --> 00:08:16.520
everywhere and you have to be aware that
some of it will be ignored in the future

00:08:16.520 --> 00:08:16.530
some of it will be ignored in the future
 

00:08:16.530 --> 00:08:18.709
some of it will be ignored in the future
modules also for instance the mapping

00:08:18.709 --> 00:08:18.719
modules also for instance the mapping
 

00:08:18.719 --> 00:08:21.589
modules also for instance the mapping
file for bundled file will also be for

00:08:21.589 --> 00:08:21.599
file for bundled file will also be for
 

00:08:21.599 --> 00:08:25.459
file for bundled file will also be for
the for the base module now when you add

00:08:25.459 --> 00:08:25.469
the for the base module now when you add
 

00:08:25.469 --> 00:08:29.059
the for the base module now when you add
module IIT inside your application it's

00:08:29.059 --> 00:08:29.069
module IIT inside your application it's
 

00:08:29.069 --> 00:08:31.820
module IIT inside your application it's
relatively easy at the build level all

00:08:31.820 --> 00:08:31.830
relatively easy at the build level all
 

00:08:31.830 --> 00:08:33.050
relatively easy at the build level all
you have to do is to use the right

00:08:33.050 --> 00:08:33.060
you have to do is to use the right
 

00:08:33.060 --> 00:08:35.240
you have to do is to use the right
plugin as I described in this slide in

00:08:35.240 --> 00:08:35.250
plugin as I described in this slide in
 

00:08:35.250 --> 00:08:36.920
plugin as I described in this slide in
the base module you have the base

00:08:36.920 --> 00:08:36.930
the base module you have the base
 

00:08:36.930 --> 00:08:39.319
the base module you have the base
functionality and then you apply the

00:08:39.319 --> 00:08:39.329
functionality and then you apply the
 

00:08:39.329 --> 00:08:42.170
functionality and then you apply the
application plug-in which you have used

00:08:42.170 --> 00:08:42.180
application plug-in which you have used
 

00:08:42.180 --> 00:08:44.960
application plug-in which you have used
for years in the future module you can

00:08:44.960 --> 00:08:44.970
for years in the future module you can
 

00:08:44.970 --> 00:08:49.430
for years in the future module you can
apply the dynamic feature now we have to

00:08:49.430 --> 00:08:49.440
apply the dynamic feature now we have to
 

00:08:49.440 --> 00:08:51.380
apply the dynamic feature now we have to
declare out special dependency from the

00:08:51.380 --> 00:08:51.390
declare out special dependency from the
 

00:08:51.390 --> 00:08:52.790
declare out special dependency from the
base module to all of the different

00:08:52.790 --> 00:08:52.800
base module to all of the different
 

00:08:52.800 --> 00:08:53.870
base module to all of the different
feature

00:08:53.870 --> 00:08:53.880
feature
 

00:08:53.880 --> 00:08:55.910
feature
and I will explain you later why this is

00:08:55.910 --> 00:08:55.920
and I will explain you later why this is
 

00:08:55.920 --> 00:08:57.290
and I will explain you later why this is
necessary but it is something that you

00:08:57.290 --> 00:08:57.300
necessary but it is something that you
 

00:08:57.300 --> 00:08:59.030
necessary but it is something that you
need to understand is that obviously you

00:08:59.030 --> 00:08:59.040
need to understand is that obviously you
 

00:08:59.040 --> 00:09:00.650
need to understand is that obviously you
have a dependency from the Future module

00:09:00.650 --> 00:09:00.660
have a dependency from the Future module
 

00:09:00.660 --> 00:09:02.300
have a dependency from the Future module
to the base but you also need to make a

00:09:02.300 --> 00:09:02.310
to the base but you also need to make a
 

00:09:02.310 --> 00:09:06.070
to the base but you also need to make a
dependency from the base to the features

00:09:06.070 --> 00:09:06.080
dependency from the base to the features
 

00:09:06.080 --> 00:09:10.850
dependency from the base to the features
so as an example here we've got the

00:09:10.850 --> 00:09:10.860
so as an example here we've got the
 

00:09:10.860 --> 00:09:13.310
so as an example here we've got the
coach ranking flow and I'm going to show

00:09:13.310 --> 00:09:13.320
coach ranking flow and I'm going to show
 

00:09:13.320 --> 00:09:15.470
coach ranking flow and I'm going to show
how these changes when you start

00:09:15.470 --> 00:09:15.480
how these changes when you start
 

00:09:15.480 --> 00:09:17.420
how these changes when you start
introducing feature modules and

00:09:17.420 --> 00:09:17.430
introducing feature modules and
 

00:09:17.430 --> 00:09:19.670
introducing feature modules and
modularity inside your application so

00:09:19.670 --> 00:09:19.680
modularity inside your application so
 

00:09:19.680 --> 00:09:21.170
modularity inside your application so
here you've got a simple example you've

00:09:21.170 --> 00:09:21.180
here you've got a simple example you've
 

00:09:21.180 --> 00:09:23.060
here you've got a simple example you've
got a base module you've got three

00:09:23.060 --> 00:09:23.070
got a base module you've got three
 

00:09:23.070 --> 00:09:24.710
got a base module you've got three
feature modules module a module beam and

00:09:24.710 --> 00:09:24.720
feature modules module a module beam and
 

00:09:24.720 --> 00:09:26.780
feature modules module a module beam and
you'll see so far nothing's too specific

00:09:26.780 --> 00:09:26.790
you'll see so far nothing's too specific
 

00:09:26.790 --> 00:09:28.250
you'll see so far nothing's too specific
of course each of these future modules

00:09:28.250 --> 00:09:28.260
of course each of these future modules
 

00:09:28.260 --> 00:09:31.430
of course each of these future modules
depend on the base now by adding this

00:09:31.430 --> 00:09:31.440
depend on the base now by adding this
 

00:09:31.440 --> 00:09:34.370
depend on the base now by adding this
DSL declaration we are declaring now the

00:09:34.370 --> 00:09:34.380
DSL declaration we are declaring now the
 

00:09:34.380 --> 00:09:36.230
DSL declaration we are declaring now the
dependency or the fact that those

00:09:36.230 --> 00:09:36.240
dependency or the fact that those
 

00:09:36.240 --> 00:09:39.170
dependency or the fact that those
feature does Muto's module a B and C are

00:09:39.170 --> 00:09:39.180
feature does Muto's module a B and C are
 

00:09:39.180 --> 00:09:41.690
feature does Muto's module a B and C are
feature modules ok so far simple but you

00:09:41.690 --> 00:09:41.700
feature modules ok so far simple but you
 

00:09:41.700 --> 00:09:44.300
feature modules ok so far simple but you
can see that now we have this dependency

00:09:44.300 --> 00:09:44.310
can see that now we have this dependency
 

00:09:44.310 --> 00:09:49.100
can see that now we have this dependency
going both ways so when we go through

00:09:49.100 --> 00:09:49.110
going both ways so when we go through
 

00:09:49.110 --> 00:09:50.810
going both ways so when we go through
the build flow the first thing that we

00:09:50.810 --> 00:09:50.820
the build flow the first thing that we
 

00:09:50.820 --> 00:09:53.780
the build flow the first thing that we
do obviously is that we build normally

00:09:53.780 --> 00:09:53.790
do obviously is that we build normally
 

00:09:53.790 --> 00:09:55.580
do obviously is that we build normally
all the Java source files we compile all

00:09:55.580 --> 00:09:55.590
all the Java source files we compile all
 

00:09:55.590 --> 00:09:57.200
all the Java source files we compile all
the Java source files into classes that

00:09:57.200 --> 00:09:57.210
the Java source files into classes that
 

00:09:57.210 --> 00:09:59.840
the Java source files into classes that
jar that's so normal that's the normal

00:09:59.840 --> 00:09:59.850
jar that's so normal that's the normal
 

00:09:59.850 --> 00:10:02.060
jar that's so normal that's the normal
process that we go through when we build

00:10:02.060 --> 00:10:02.070
process that we go through when we build
 

00:10:02.070 --> 00:10:05.570
process that we go through when we build
each of these different modules but the

00:10:05.570 --> 00:10:05.580
each of these different modules but the
 

00:10:05.580 --> 00:10:07.250
each of these different modules but the
thing that really starts to differ when

00:10:07.250 --> 00:10:07.260
thing that really starts to differ when
 

00:10:07.260 --> 00:10:09.650
thing that really starts to differ when
you're dealing with with future modules

00:10:09.650 --> 00:10:09.660
you're dealing with with future modules
 

00:10:09.660 --> 00:10:12.230
you're dealing with with future modules
is that we are publishing back all of

00:10:12.230 --> 00:10:12.240
is that we are publishing back all of
 

00:10:12.240 --> 00:10:15.680
is that we are publishing back all of
these Java files back to the main module

00:10:15.680 --> 00:10:15.690
these Java files back to the main module
 

00:10:15.690 --> 00:10:17.840
these Java files back to the main module
and that's absolutely necessary because

00:10:17.840 --> 00:10:17.850
and that's absolutely necessary because
 

00:10:17.850 --> 00:10:19.970
and that's absolutely necessary because
when we do the code shrinking you need

00:10:19.970 --> 00:10:19.980
when we do the code shrinking you need
 

00:10:19.980 --> 00:10:21.380
when we do the code shrinking you need
to have a global view of the application

00:10:21.380 --> 00:10:21.390
to have a global view of the application
 

00:10:21.390 --> 00:10:23.570
to have a global view of the application
you can't do a shrinking just on the

00:10:23.570 --> 00:10:23.580
you can't do a shrinking just on the
 

00:10:23.580 --> 00:10:25.430
you can't do a shrinking just on the
future module because you will not know

00:10:25.430 --> 00:10:25.440
future module because you will not know
 

00:10:25.440 --> 00:10:28.940
future module because you will not know
how and what the use of the base class

00:10:28.940 --> 00:10:28.950
how and what the use of the base class
 

00:10:28.950 --> 00:10:32.060
how and what the use of the base class
was for instance so once you have those

00:10:32.060 --> 00:10:32.070
was for instance so once you have those
 

00:10:32.070 --> 00:10:34.910
was for instance so once you have those
published to the base you can feed it to

00:10:34.910 --> 00:10:34.920
published to the base you can feed it to
 

00:10:34.920 --> 00:10:37.400
published to the base you can feed it to
the chancre and the splitter and

00:10:37.400 --> 00:10:37.410
the chancre and the splitter and
 

00:10:37.410 --> 00:10:38.690
the chancre and the splitter and
eventually it's going to create

00:10:38.690 --> 00:10:38.700
eventually it's going to create
 

00:10:38.700 --> 00:10:43.100
eventually it's going to create
equivalent Dex files as you can guess

00:10:43.100 --> 00:10:43.110
equivalent Dex files as you can guess
 

00:10:43.110 --> 00:10:44.540
equivalent Dex files as you can guess
there is more or less a one-to-one

00:10:44.540 --> 00:10:44.550
there is more or less a one-to-one
 

00:10:44.550 --> 00:10:46.760
there is more or less a one-to-one
mapping between the original Java file

00:10:46.760 --> 00:10:46.770
mapping between the original Java file
 

00:10:46.770 --> 00:10:48.650
mapping between the original Java file
containing the class files and the Dex

00:10:48.650 --> 00:10:48.660
containing the class files and the Dex
 

00:10:48.660 --> 00:10:51.440
containing the class files and the Dex
files containing the textures but it's

00:10:51.440 --> 00:10:51.450
files containing the textures but it's
 

00:10:51.450 --> 00:10:53.420
files containing the textures but it's
not exactly a one-to-one so for instance

00:10:53.420 --> 00:10:53.430
not exactly a one-to-one so for instance
 

00:10:53.430 --> 00:10:54.890
not exactly a one-to-one so for instance
let's say that you had classes that were

00:10:54.890 --> 00:10:54.900
let's say that you had classes that were
 

00:10:54.900 --> 00:10:57.110
let's say that you had classes that were
in your base module that you thought

00:10:57.110 --> 00:10:57.120
in your base module that you thought
 

00:10:57.120 --> 00:10:58.850
in your base module that you thought
would be shared by a different feature

00:10:58.850 --> 00:10:58.860
would be shared by a different feature
 

00:10:58.860 --> 00:11:01.520
would be shared by a different feature
but only end up being used by say module

00:11:01.520 --> 00:11:01.530
but only end up being used by say module
 

00:11:01.530 --> 00:11:04.400
but only end up being used by say module
B then it's perfectly legal for the

00:11:04.400 --> 00:11:04.410
B then it's perfectly legal for the
 

00:11:04.410 --> 00:11:06.020
B then it's perfectly legal for the
splitter to decide that he wants to move

00:11:06.020 --> 00:11:06.030
splitter to decide that he wants to move
 

00:11:06.030 --> 00:11:07.250
splitter to decide that he wants to move
those classes into

00:11:07.250 --> 00:11:07.260
those classes into
 

00:11:07.260 --> 00:11:09.560
those classes into
Dex beaded jaw instead of keeping them

00:11:09.560 --> 00:11:09.570
Dex beaded jaw instead of keeping them
 

00:11:09.570 --> 00:11:12.350
Dex beaded jaw instead of keeping them
inside the main Dexter jar of the main

00:11:12.350 --> 00:11:12.360
inside the main Dexter jar of the main
 

00:11:12.360 --> 00:11:16.190
inside the main Dexter jar of the main
module but otherwise you can more or

00:11:16.190 --> 00:11:16.200
module but otherwise you can more or
 

00:11:16.200 --> 00:11:17.810
module but otherwise you can more or
less image in that there is a one-to-one

00:11:17.810 --> 00:11:17.820
less image in that there is a one-to-one
 

00:11:17.820 --> 00:11:20.360
less image in that there is a one-to-one
mapping so once this is done you've got

00:11:20.360 --> 00:11:20.370
mapping so once this is done you've got
 

00:11:20.370 --> 00:11:21.860
mapping so once this is done you've got
all these Dex files which are still

00:11:21.860 --> 00:11:21.870
all these Dex files which are still
 

00:11:21.870 --> 00:11:25.010
all these Dex files which are still
residing in the base module now they're

00:11:25.010 --> 00:11:25.020
residing in the base module now they're
 

00:11:25.020 --> 00:11:28.310
residing in the base module now they're
going to flow back into the originating

00:11:28.310 --> 00:11:28.320
going to flow back into the originating
 

00:11:28.320 --> 00:11:31.580
going to flow back into the originating
module dynamic feature module and that

00:11:31.580 --> 00:11:31.590
module dynamic feature module and that
 

00:11:31.590 --> 00:11:33.620
module dynamic feature module and that
we do that so that we can have as much

00:11:33.620 --> 00:11:33.630
we do that so that we can have as much
 

00:11:33.630 --> 00:11:35.330
we do that so that we can have as much
parallelism in your build so as you can

00:11:35.330 --> 00:11:35.340
parallelism in your build so as you can
 

00:11:35.340 --> 00:11:38.180
parallelism in your build so as you can
see at the beginning we had the

00:11:38.180 --> 00:11:38.190
see at the beginning we had the
 

00:11:38.190 --> 00:11:40.130
see at the beginning we had the
compilation happening in each of the sim

00:11:40.130 --> 00:11:40.140
compilation happening in each of the sim
 

00:11:40.140 --> 00:11:42.860
compilation happening in each of the sim
modules it was potentially parallelized

00:11:42.860 --> 00:11:42.870
modules it was potentially parallelized
 

00:11:42.870 --> 00:11:44.780
modules it was potentially parallelized
depends on the machine you have but if

00:11:44.780 --> 00:11:44.790
depends on the machine you have but if
 

00:11:44.790 --> 00:11:46.160
depends on the machine you have but if
you have a powerful machine all of those

00:11:46.160 --> 00:11:46.170
you have a powerful machine all of those
 

00:11:46.170 --> 00:11:48.200
you have a powerful machine all of those
would run in parallel then we moved

00:11:48.200 --> 00:11:48.210
would run in parallel then we moved
 

00:11:48.210 --> 00:11:50.420
would run in parallel then we moved
everything to the base then it becomes

00:11:50.420 --> 00:11:50.430
everything to the base then it becomes
 

00:11:50.430 --> 00:11:51.860
everything to the base then it becomes
kind of a bottleneck for the build

00:11:51.860 --> 00:11:51.870
kind of a bottleneck for the build
 

00:11:51.870 --> 00:11:53.840
kind of a bottleneck for the build
system because it has to wait for all

00:11:53.840 --> 00:11:53.850
system because it has to wait for all
 

00:11:53.850 --> 00:11:55.880
system because it has to wait for all
the modules to be ready to be able to do

00:11:55.880 --> 00:11:55.890
the modules to be ready to be able to do
 

00:11:55.890 --> 00:11:58.820
the modules to be ready to be able to do
the shrinking but once this is done we

00:11:58.820 --> 00:11:58.830
the shrinking but once this is done we
 

00:11:58.830 --> 00:12:01.040
the shrinking but once this is done we
can move back the processing to each of

00:12:01.040 --> 00:12:01.050
can move back the processing to each of
 

00:12:01.050 --> 00:12:03.430
can move back the processing to each of
the sub modules so you can see that

00:12:03.430 --> 00:12:03.440
the sub modules so you can see that
 

00:12:03.440 --> 00:12:05.900
the sub modules so you can see that
adding modularity to your application

00:12:05.900 --> 00:12:05.910
adding modularity to your application
 

00:12:05.910 --> 00:12:07.610
adding modularity to your application
maybe you're good software practice but

00:12:07.610 --> 00:12:07.620
maybe you're good software practice but
 

00:12:07.620 --> 00:12:09.110
maybe you're good software practice but
it's also a good practice in terms of

00:12:09.110 --> 00:12:09.120
it's also a good practice in terms of
 

00:12:09.120 --> 00:12:10.520
it's also a good practice in terms of
the build because we're going to get

00:12:10.520 --> 00:12:10.530
the build because we're going to get
 

00:12:10.530 --> 00:12:13.160
the build because we're going to get
much faster over time we move as much

00:12:13.160 --> 00:12:13.170
much faster over time we move as much
 

00:12:13.170 --> 00:12:16.370
much faster over time we move as much
stuff as we can towards the the lives of

00:12:16.370 --> 00:12:16.380
stuff as we can towards the the lives of
 

00:12:16.380 --> 00:12:18.290
stuff as we can towards the the lives of
all of these modules and we can run all

00:12:18.290 --> 00:12:18.300
all of these modules and we can run all
 

00:12:18.300 --> 00:12:22.570
all of these modules and we can run all
of those in parallel as much as possible

00:12:22.570 --> 00:12:22.580
of those in parallel as much as possible
 

00:12:22.580 --> 00:12:25.280
of those in parallel as much as possible
once this is done in parallel we once

00:12:25.280 --> 00:12:25.290
once this is done in parallel we once
 

00:12:25.290 --> 00:12:27.650
once this is done in parallel we once
this is pushed back to achieve a future

00:12:27.650 --> 00:12:27.660
this is pushed back to achieve a future
 

00:12:27.660 --> 00:12:29.060
this is pushed back to achieve a future
module we can then resume the normal

00:12:29.060 --> 00:12:29.070
module we can then resume the normal
 

00:12:29.070 --> 00:12:30.980
module we can then resume the normal
processing and eventually we will you

00:12:30.980 --> 00:12:30.990
processing and eventually we will you
 

00:12:30.990 --> 00:12:33.170
processing and eventually we will you
know create all the necessary apks or

00:12:33.170 --> 00:12:33.180
know create all the necessary apks or
 

00:12:33.180 --> 00:12:36.050
know create all the necessary apks or
all the necessary artifacts to be able

00:12:36.050 --> 00:12:36.060
all the necessary artifacts to be able
 

00:12:36.060 --> 00:12:38.330
all the necessary artifacts to be able
to create the app bundle all right so

00:12:38.330 --> 00:12:38.340
to create the app bundle all right so
 

00:12:38.340 --> 00:12:40.130
to create the app bundle all right so
all of those again is in parallel now

00:12:40.130 --> 00:12:40.140
all of those again is in parallel now
 

00:12:40.140 --> 00:12:42.470
all of those again is in parallel now
obviously the shrinker the fact it's a

00:12:42.470 --> 00:12:42.480
obviously the shrinker the fact it's a
 

00:12:42.480 --> 00:12:43.760
obviously the shrinker the fact it's a
little bit of a bottleneck like I

00:12:43.760 --> 00:12:43.770
little bit of a bottleneck like I
 

00:12:43.770 --> 00:12:45.230
little bit of a bottleneck like I
explained earlier is usually not a

00:12:45.230 --> 00:12:45.240
explained earlier is usually not a
 

00:12:45.240 --> 00:12:47.660
explained earlier is usually not a
problem because not a problem for debug

00:12:47.660 --> 00:12:47.670
problem because not a problem for debug
 

00:12:47.670 --> 00:12:49.400
problem because not a problem for debug
build at least because usually people do

00:12:49.400 --> 00:12:49.410
build at least because usually people do
 

00:12:49.410 --> 00:12:51.800
build at least because usually people do
not use shrinker cut drinking during the

00:12:51.800 --> 00:12:51.810
not use shrinker cut drinking during the
 

00:12:51.810 --> 00:12:53.900
not use shrinker cut drinking during the
debug builds it's only done through for

00:12:53.900 --> 00:12:53.910
debug builds it's only done through for
 

00:12:53.910 --> 00:12:56.450
debug builds it's only done through for
the release builds but we really try to

00:12:56.450 --> 00:12:56.460
the release builds but we really try to
 

00:12:56.460 --> 00:12:59.120
the release builds but we really try to
limit this bottlenecks as much as we can

00:12:59.120 --> 00:12:59.130
limit this bottlenecks as much as we can
 

00:12:59.130 --> 00:13:00.830
limit this bottlenecks as much as we can
and Chris with explained also how we

00:13:00.830 --> 00:13:00.840
and Chris with explained also how we
 

00:13:00.840 --> 00:13:03.260
and Chris with explained also how we
have enhanced a lot the resource

00:13:03.260 --> 00:13:03.270
have enhanced a lot the resource
 

00:13:03.270 --> 00:13:05.770
have enhanced a lot the resource
processing with this type of

00:13:05.770 --> 00:13:05.780
processing with this type of
 

00:13:05.780 --> 00:13:10.430
processing with this type of
improvements another thing that we added

00:13:10.430 --> 00:13:10.440
improvements another thing that we added
 

00:13:10.440 --> 00:13:11.240
improvements another thing that we added
in 3.2

00:13:11.240 --> 00:13:11.250
in 3.2
 

00:13:11.250 --> 00:13:15.710
in 3.2
was d8 so d8 is the new JVM bytecode to

00:13:15.710 --> 00:13:15.720
was d8 so d8 is the new JVM bytecode to
 

00:13:15.720 --> 00:13:18.590
was d8 so d8 is the new JVM bytecode to
Dex file translation translator we will

00:13:18.590 --> 00:13:18.600
Dex file translation translator we will
 

00:13:18.600 --> 00:13:20.330
Dex file translation translator we will
eventually remove the old one which was

00:13:20.330 --> 00:13:20.340
eventually remove the old one which was
 

00:13:20.340 --> 00:13:21.139
eventually remove the old one which was
called DX

00:13:21.139 --> 00:13:21.149
called DX
 

00:13:21.149 --> 00:13:24.079
called DX
if you still using Dax you really need

00:13:24.079 --> 00:13:24.089
if you still using Dax you really need
 

00:13:24.089 --> 00:13:26.090
if you still using Dax you really need
to stop panicking because we are going

00:13:26.090 --> 00:13:26.100
to stop panicking because we are going
 

00:13:26.100 --> 00:13:28.160
to stop panicking because we are going
to remove it and once we removed it you

00:13:28.160 --> 00:13:28.170
to remove it and once we removed it you
 

00:13:28.170 --> 00:13:29.689
to remove it and once we removed it you
will not be able to upgrade any longer

00:13:29.689 --> 00:13:29.699
will not be able to upgrade any longer
 

00:13:29.699 --> 00:13:32.600
will not be able to upgrade any longer
so if you are using DX because you have

00:13:32.600 --> 00:13:32.610
so if you are using DX because you have
 

00:13:32.610 --> 00:13:35.449
so if you are using DX because you have
issues with d8 you must file by a bug

00:13:35.449 --> 00:13:35.459
issues with d8 you must file by a bug
 

00:13:35.459 --> 00:13:37.009
issues with d8 you must file by a bug
immediately and follow through to figure

00:13:37.009 --> 00:13:37.019
immediately and follow through to figure
 

00:13:37.019 --> 00:13:38.749
immediately and follow through to figure
out what's is wrong if it's with your

00:13:38.749 --> 00:13:38.759
out what's is wrong if it's with your
 

00:13:38.759 --> 00:13:40.569
out what's is wrong if it's with your
build or if it's with d8 itself

00:13:40.569 --> 00:13:40.579
build or if it's with d8 itself
 

00:13:40.579 --> 00:13:42.410
build or if it's with d8 itself
otherwise you're going to get stuck in

00:13:42.410 --> 00:13:42.420
otherwise you're going to get stuck in
 

00:13:42.420 --> 00:13:44.840
otherwise you're going to get stuck in
the past our eight is going to follow

00:13:44.840 --> 00:13:44.850
the past our eight is going to follow
 

00:13:44.850 --> 00:13:46.790
the past our eight is going to follow
more or less the same path meaning like

00:13:46.790 --> 00:13:46.800
more or less the same path meaning like
 

00:13:46.800 --> 00:13:49.670
more or less the same path meaning like
it's available right now to try we are

00:13:49.670 --> 00:13:49.680
it's available right now to try we are
 

00:13:49.680 --> 00:13:52.460
it's available right now to try we are
very happy with the with the results we

00:13:52.460 --> 00:13:52.470
very happy with the with the results we
 

00:13:52.470 --> 00:13:54.170
very happy with the with the results we
are getting so far so it's very stable

00:13:54.170 --> 00:13:54.180
are getting so far so it's very stable
 

00:13:54.180 --> 00:13:57.079
are getting so far so it's very stable
you should definitely try it eventually

00:13:57.079 --> 00:13:57.089
you should definitely try it eventually
 

00:13:57.089 --> 00:13:59.900
you should definitely try it eventually
it will become stable and you can guess

00:13:59.900 --> 00:13:59.910
it will become stable and you can guess
 

00:13:59.910 --> 00:14:01.340
it will become stable and you can guess
what's going to happen to the old code

00:14:01.340 --> 00:14:01.350
what's going to happen to the old code
 

00:14:01.350 --> 00:14:03.710
what's going to happen to the old code
shrinker to plug out eventually we will

00:14:03.710 --> 00:14:03.720
shrinker to plug out eventually we will
 

00:14:03.720 --> 00:14:05.809
shrinker to plug out eventually we will
also remove it and completely replace it

00:14:05.809 --> 00:14:05.819
also remove it and completely replace it
 

00:14:05.819 --> 00:14:08.720
also remove it and completely replace it
with our eight if you want more details

00:14:08.720 --> 00:14:08.730
with our eight if you want more details
 

00:14:08.730 --> 00:14:09.980
with our eight if you want more details
there is a session tomorrow that will

00:14:09.980 --> 00:14:09.990
there is a session tomorrow that will
 

00:14:09.990 --> 00:14:11.749
there is a session tomorrow that will
give you a lot more technical details

00:14:11.749 --> 00:14:11.759
give you a lot more technical details
 

00:14:11.759 --> 00:14:13.790
give you a lot more technical details
about how these two these two libraries

00:14:13.790 --> 00:14:13.800
about how these two these two libraries
 

00:14:13.800 --> 00:14:17.179
about how these two these two libraries
are implemented ok let's talk a little

00:14:17.179 --> 00:14:17.189
are implemented ok let's talk a little
 

00:14:17.189 --> 00:14:21.110
are implemented ok let's talk a little
bit about what's next in 3.3 so the

00:14:21.110 --> 00:14:21.120
bit about what's next in 3.3 so the
 

00:14:21.120 --> 00:14:22.369
bit about what's next in 3.3 so the
first time first thing I want to talk

00:14:22.369 --> 00:14:22.379
first time first thing I want to talk
 

00:14:22.379 --> 00:14:27.769
first time first thing I want to talk
about is lazy tasks so God has

00:14:27.769 --> 00:14:27.779
about is lazy tasks so God has
 

00:14:27.779 --> 00:14:29.600
about is lazy tasks so God has
introduced the concept of lazy tasks and

00:14:29.600 --> 00:14:29.610
introduced the concept of lazy tasks and
 

00:14:29.610 --> 00:14:31.480
introduced the concept of lazy tasks and
a lazy task is you should really

00:14:31.480 --> 00:14:31.490
a lazy task is you should really
 

00:14:31.490 --> 00:14:34.189
a lazy task is you should really
understand it as a task that will only

00:14:34.189 --> 00:14:34.199
understand it as a task that will only
 

00:14:34.199 --> 00:14:36.889
understand it as a task that will only
get initialized and configured if it is

00:14:36.889 --> 00:14:36.899
get initialized and configured if it is
 

00:14:36.899 --> 00:14:39.590
get initialized and configured if it is
on the execution tasks graph so that

00:14:39.590 --> 00:14:39.600
on the execution tasks graph so that
 

00:14:39.600 --> 00:14:42.199
on the execution tasks graph so that
means for instance if you got let's keep

00:14:42.199 --> 00:14:42.209
means for instance if you got let's keep
 

00:14:42.209 --> 00:14:43.699
means for instance if you got let's keep
it simple you've got two variants the

00:14:43.699 --> 00:14:43.709
it simple you've got two variants the
 

00:14:43.709 --> 00:14:46.400
it simple you've got two variants the
debug variant the release variant if you

00:14:46.400 --> 00:14:46.410
debug variant the release variant if you
 

00:14:46.410 --> 00:14:49.280
debug variant the release variant if you
if you're calling Istanbul debug there's

00:14:49.280 --> 00:14:49.290
if you're calling Istanbul debug there's
 

00:14:49.290 --> 00:14:52.610
if you're calling Istanbul debug there's
no need to crew to initialize or to

00:14:52.610 --> 00:14:52.620
no need to crew to initialize or to
 

00:14:52.620 --> 00:14:54.829
no need to crew to initialize or to
configure any of the tasks or later to

00:14:54.829 --> 00:14:54.839
configure any of the tasks or later to
 

00:14:54.839 --> 00:14:57.499
configure any of the tasks or later to
the release violent and so what's what

00:14:57.499 --> 00:14:57.509
the release violent and so what's what
 

00:14:57.509 --> 00:14:59.480
the release violent and so what's what
what we used to do unfortunately so this

00:14:59.480 --> 00:14:59.490
what we used to do unfortunately so this
 

00:14:59.490 --> 00:15:01.220
what we used to do unfortunately so this
was done before in this particular

00:15:01.220 --> 00:15:01.230
was done before in this particular
 

00:15:01.230 --> 00:15:03.559
was done before in this particular
example where we used to create all the

00:15:03.559 --> 00:15:03.569
example where we used to create all the
 

00:15:03.569 --> 00:15:05.509
example where we used to create all the
tasks we still have to do that but add

00:15:05.509 --> 00:15:05.519
tasks we still have to do that but add
 

00:15:05.519 --> 00:15:06.829
tasks we still have to do that but add
the creation time we were also

00:15:06.829 --> 00:15:06.839
the creation time we were also
 

00:15:06.839 --> 00:15:08.840
the creation time we were also
configuring them so we're ending up

00:15:08.840 --> 00:15:08.850
configuring them so we're ending up
 

00:15:08.850 --> 00:15:10.819
configuring them so we're ending up
configuring all the tasks for debug

00:15:10.819 --> 00:15:10.829
configuring all the tasks for debug
 

00:15:10.829 --> 00:15:12.379
configuring all the tasks for debug
variants and all that that's for release

00:15:12.379 --> 00:15:12.389
variants and all that that's for release
 

00:15:12.389 --> 00:15:14.689
variants and all that that's for release
variant even though only the debug were

00:15:14.689 --> 00:15:14.699
variant even though only the debug were
 

00:15:14.699 --> 00:15:17.989
variant even though only the debug were
eventually going to be executed with

00:15:17.989 --> 00:15:17.999
eventually going to be executed with
 

00:15:17.999 --> 00:15:19.970
eventually going to be executed with
lazy tasks the huddle is giving us the

00:15:19.970 --> 00:15:19.980
lazy tasks the huddle is giving us the
 

00:15:19.980 --> 00:15:22.249
lazy tasks the huddle is giving us the
tool to basically delay all of the

00:15:22.249 --> 00:15:22.259
tool to basically delay all of the
 

00:15:22.259 --> 00:15:25.369
tool to basically delay all of the
simulation initialization until it knows

00:15:25.369 --> 00:15:25.379
simulation initialization until it knows
 

00:15:25.379 --> 00:15:28.129
simulation initialization until it knows
that those tasks will be executed now

00:15:28.129 --> 00:15:28.139
that those tasks will be executed now
 

00:15:28.139 --> 00:15:29.900
that those tasks will be executed now
when I say executed it's not entirely

00:15:29.900 --> 00:15:29.910
when I say executed it's not entirely
 

00:15:29.910 --> 00:15:31.699
when I say executed it's not entirely
true because what it really means is

00:15:31.699 --> 00:15:31.709
true because what it really means is
 

00:15:31.709 --> 00:15:34.970
true because what it really means is
that it's it's going to be up to the

00:15:34.970 --> 00:15:34.980
that it's it's going to be up to the
 

00:15:34.980 --> 00:15:37.069
that it's it's going to be up to the
checked meaning it's going to look if

00:15:37.069 --> 00:15:37.079
checked meaning it's going to look if
 

00:15:37.079 --> 00:15:39.530
checked meaning it's going to look if
the task needs to be run or not by

00:15:39.530 --> 00:15:39.540
the task needs to be run or not by
 

00:15:39.540 --> 00:15:41.449
the task needs to be run or not by
running it's up to date checks but

00:15:41.449 --> 00:15:41.459
running it's up to date checks but
 

00:15:41.459 --> 00:15:43.400
running it's up to date checks but
potentially at least the task is on the

00:15:43.400 --> 00:15:43.410
potentially at least the task is on the
 

00:15:43.410 --> 00:15:45.530
potentially at least the task is on the
execution task graph and maybe executed

00:15:45.530 --> 00:15:45.540
execution task graph and maybe executed
 

00:15:45.540 --> 00:15:50.660
execution task graph and maybe executed
if it's out of date so how do you do

00:15:50.660 --> 00:15:50.670
if it's out of date so how do you do
 

00:15:50.670 --> 00:15:54.199
if it's out of date so how do you do
lazy tasks it's basically very similar

00:15:54.199 --> 00:15:54.209
lazy tasks it's basically very similar
 

00:15:54.209 --> 00:15:56.420
lazy tasks it's basically very similar
to the old to the old style instead of

00:15:56.420 --> 00:15:56.430
to the old to the old style instead of
 

00:15:56.430 --> 00:15:58.430
to the old to the old style instead of
doing create you could register but you

00:15:58.430 --> 00:15:58.440
doing create you could register but you
 

00:15:58.440 --> 00:16:00.710
doing create you could register but you
can see that now the configuration code

00:16:00.710 --> 00:16:00.720
can see that now the configuration code
 

00:16:00.720 --> 00:16:01.970
can see that now the configuration code
which is in blue here where you

00:16:01.970 --> 00:16:01.980
which is in blue here where you
 

00:16:01.980 --> 00:16:03.949
which is in blue here where you
initialize the input field value will

00:16:03.949 --> 00:16:03.959
initialize the input field value will
 

00:16:03.959 --> 00:16:06.800
initialize the input field value will
only be called if the task is on the

00:16:06.800 --> 00:16:06.810
only be called if the task is on the
 

00:16:06.810 --> 00:16:09.230
only be called if the task is on the
execution task graph now we use to

00:16:09.230 --> 00:16:09.240
execution task graph now we use to
 

00:16:09.240 --> 00:16:12.110
execution task graph now we use to
really pay a lot of attention for all of

00:16:12.110 --> 00:16:12.120
really pay a lot of attention for all of
 

00:16:12.120 --> 00:16:14.810
really pay a lot of attention for all of
our configuration tasks to make this

00:16:14.810 --> 00:16:14.820
our configuration tasks to make this
 

00:16:14.820 --> 00:16:16.850
our configuration tasks to make this
configuration block as lean as possible

00:16:16.850 --> 00:16:16.860
configuration block as lean as possible
 

00:16:16.860 --> 00:16:18.860
configuration block as lean as possible
because they were always executed so if

00:16:18.860 --> 00:16:18.870
because they were always executed so if
 

00:16:18.870 --> 00:16:20.329
because they were always executed so if
you were to do you know god--all tasks

00:16:20.329 --> 00:16:20.339
you were to do you know god--all tasks
 

00:16:20.339 --> 00:16:22.220
you were to do you know god--all tasks
it would always execute all of this

00:16:22.220 --> 00:16:22.230
it would always execute all of this
 

00:16:22.230 --> 00:16:24.079
it would always execute all of this
configuration so we try to keep it as

00:16:24.079 --> 00:16:24.089
configuration so we try to keep it as
 

00:16:24.089 --> 00:16:26.509
configuration so we try to keep it as
lean as possible with no access to disk

00:16:26.509 --> 00:16:26.519
lean as possible with no access to disk
 

00:16:26.519 --> 00:16:29.720
lean as possible with no access to disk
no access to network for instance now

00:16:29.720 --> 00:16:29.730
no access to network for instance now
 

00:16:29.730 --> 00:16:31.819
no access to network for instance now
it's probably a little bit more okay to

00:16:31.819 --> 00:16:31.829
it's probably a little bit more okay to
 

00:16:31.829 --> 00:16:36.410
it's probably a little bit more okay to
do more work in those configuration if

00:16:36.410 --> 00:16:36.420
do more work in those configuration if
 

00:16:36.420 --> 00:16:37.819
do more work in those configuration if
you really have to but you have to

00:16:37.819 --> 00:16:37.829
you really have to but you have to
 

00:16:37.829 --> 00:16:42.439
you really have to but you have to
remember two things first if you do real

00:16:42.439 --> 00:16:42.449
remember two things first if you do real
 

00:16:42.449 --> 00:16:45.170
remember two things first if you do real
work it will still impact your build

00:16:45.170 --> 00:16:45.180
work it will still impact your build
 

00:16:45.180 --> 00:16:48.230
work it will still impact your build
time because the the configuration time

00:16:48.230 --> 00:16:48.240
time because the the configuration time
 

00:16:48.240 --> 00:16:49.939
time because the the configuration time
is still a mono threaded event in

00:16:49.939 --> 00:16:49.949
is still a mono threaded event in
 

00:16:49.949 --> 00:16:51.769
is still a mono threaded event in
Caudill meaning all of the configuration

00:16:51.769 --> 00:16:51.779
Caudill meaning all of the configuration
 

00:16:51.779 --> 00:16:53.030
Caudill meaning all of the configuration
will happen one after the other so the

00:16:53.030 --> 00:16:53.040
will happen one after the other so the
 

00:16:53.040 --> 00:16:54.829
will happen one after the other so the
more you do the longer it will take and

00:16:54.829 --> 00:16:54.839
more you do the longer it will take and
 

00:16:54.839 --> 00:16:56.809
more you do the longer it will take and
you already know today that you know

00:16:56.809 --> 00:16:56.819
you already know today that you know
 

00:16:56.819 --> 00:16:58.730
you already know today that you know
configuration time happens all the time

00:16:58.730 --> 00:16:58.740
configuration time happens all the time
 

00:16:58.740 --> 00:17:01.519
configuration time happens all the time
it's very annoying we are really trying

00:17:01.519 --> 00:17:01.529
it's very annoying we are really trying
 

00:17:01.529 --> 00:17:03.379
it's very annoying we are really trying
to reduce it to the bare minimum but any

00:17:03.379 --> 00:17:03.389
to reduce it to the bare minimum but any
 

00:17:03.389 --> 00:17:06.289
to reduce it to the bare minimum but any
time is really annoying the second thing

00:17:06.289 --> 00:17:06.299
time is really annoying the second thing
 

00:17:06.299 --> 00:17:09.710
time is really annoying the second thing
is to not look up tasks anymore so when

00:17:09.710 --> 00:17:09.720
is to not look up tasks anymore so when
 

00:17:09.720 --> 00:17:11.059
is to not look up tasks anymore so when
you have like builder Gradle

00:17:11.059 --> 00:17:11.069
you have like builder Gradle
 

00:17:11.069 --> 00:17:12.740
you have like builder Gradle
customization a lot of people are like

00:17:12.740 --> 00:17:12.750
customization a lot of people are like
 

00:17:12.750 --> 00:17:14.870
customization a lot of people are like
you know doing project get tasks by name

00:17:14.870 --> 00:17:14.880
you know doing project get tasks by name
 

00:17:14.880 --> 00:17:17.600
you know doing project get tasks by name
or kind of stuff like that this will

00:17:17.600 --> 00:17:17.610
or kind of stuff like that this will
 

00:17:17.610 --> 00:17:19.370
or kind of stuff like that this will
actually look up the tasks and

00:17:19.370 --> 00:17:19.380
actually look up the tasks and
 

00:17:19.380 --> 00:17:22.640
actually look up the tasks and
initialize it and configure it and if

00:17:22.640 --> 00:17:22.650
initialize it and configure it and if
 

00:17:22.650 --> 00:17:24.650
initialize it and configure it and if
you do that it will not only do that for

00:17:24.650 --> 00:17:24.660
you do that it will not only do that for
 

00:17:24.660 --> 00:17:25.880
you do that it will not only do that for
the task itself but all of its

00:17:25.880 --> 00:17:25.890
the task itself but all of its
 

00:17:25.890 --> 00:17:27.679
the task itself but all of its
transitive dependencies as well all the

00:17:27.679 --> 00:17:27.689
transitive dependencies as well all the
 

00:17:27.689 --> 00:17:29.840
transitive dependencies as well all the
tasks its uses and all the output and

00:17:29.840 --> 00:17:29.850
tasks its uses and all the output and
 

00:17:29.850 --> 00:17:31.100
tasks its uses and all the output and
all this kind of stuff so you basically

00:17:31.100 --> 00:17:31.110
all this kind of stuff so you basically
 

00:17:31.110 --> 00:17:32.659
all this kind of stuff so you basically
have a good chance of initializing the

00:17:32.659 --> 00:17:32.669
have a good chance of initializing the
 

00:17:32.669 --> 00:17:35.690
have a good chance of initializing the
entire world instead of doing that you

00:17:35.690 --> 00:17:35.700
entire world instead of doing that you
 

00:17:35.700 --> 00:17:39.230
entire world instead of doing that you
should get a provider and and get a lazy

00:17:39.230 --> 00:17:39.240
should get a provider and and get a lazy
 

00:17:39.240 --> 00:17:42.830
should get a provider and and get a lazy
object of the task itself and use that

00:17:42.830 --> 00:17:42.840
object of the task itself and use that
 

00:17:42.840 --> 00:17:45.890
object of the task itself and use that
to register your dependency now what you

00:17:45.890 --> 00:17:45.900
to register your dependency now what you
 

00:17:45.900 --> 00:17:47.870
to register your dependency now what you
can also do if you want to have access

00:17:47.870 --> 00:17:47.880
can also do if you want to have access
 

00:17:47.880 --> 00:17:48.680
can also do if you want to have access
to the out

00:17:48.680 --> 00:17:48.690
to the out
 

00:17:48.690 --> 00:17:51.320
to the out
put of a task is used at provider and

00:17:51.320 --> 00:17:51.330
put of a task is used at provider and
 

00:17:51.330 --> 00:17:55.220
put of a task is used at provider and
map the output using this type of API to

00:17:55.220 --> 00:17:55.230
map the output using this type of API to
 

00:17:55.230 --> 00:17:57.830
map the output using this type of API to
get to provider so it's basically a

00:17:57.830 --> 00:17:57.840
get to provider so it's basically a
 

00:17:57.840 --> 00:18:00.470
get to provider so it's basically a
promise on a folder or promise of a

00:18:00.470 --> 00:18:00.480
promise on a folder or promise of a
 

00:18:00.480 --> 00:18:02.060
promise on a folder or promise of a
regular file that the tasks that may

00:18:02.060 --> 00:18:02.070
regular file that the tasks that may
 

00:18:02.070 --> 00:18:04.039
regular file that the tasks that may
execute will give you letter you can see

00:18:04.039 --> 00:18:04.049
execute will give you letter you can see
 

00:18:04.049 --> 00:18:05.570
execute will give you letter you can see
how the level of interactions you're

00:18:05.570 --> 00:18:05.580
how the level of interactions you're
 

00:18:05.580 --> 00:18:07.580
how the level of interactions you're
getting here but eventually it will give

00:18:07.580 --> 00:18:07.590
getting here but eventually it will give
 

00:18:07.590 --> 00:18:10.129
getting here but eventually it will give
you the idea that you can get an object

00:18:10.129 --> 00:18:10.139
you the idea that you can get an object
 

00:18:10.139 --> 00:18:13.159
you the idea that you can get an object
which represent the output of a task and

00:18:13.159 --> 00:18:13.169
which represent the output of a task and
 

00:18:13.169 --> 00:18:15.289
which represent the output of a task and
that object does not initialize the task

00:18:15.289 --> 00:18:15.299
that object does not initialize the task
 

00:18:15.299 --> 00:18:17.389
that object does not initialize the task
itself getting this this this provider

00:18:17.389 --> 00:18:17.399
itself getting this this this provider
 

00:18:17.399 --> 00:18:19.100
itself getting this this this provider
does not initialize the task does not

00:18:19.100 --> 00:18:19.110
does not initialize the task does not
 

00:18:19.110 --> 00:18:22.240
does not initialize the task does not
force it to run and it's really lazy and

00:18:22.240 --> 00:18:22.250
force it to run and it's really lazy and
 

00:18:22.250 --> 00:18:24.710
force it to run and it's really lazy and
it contains also the dependency

00:18:24.710 --> 00:18:24.720
it contains also the dependency
 

00:18:24.720 --> 00:18:26.119
it contains also the dependency
information means you don't have to

00:18:26.119 --> 00:18:26.129
information means you don't have to
 

00:18:26.129 --> 00:18:27.889
information means you don't have to
register yourself as a dependent of the

00:18:27.889 --> 00:18:27.899
register yourself as a dependent of the
 

00:18:27.899 --> 00:18:30.619
register yourself as a dependent of the
task producing this output folder just

00:18:30.619 --> 00:18:30.629
task producing this output folder just
 

00:18:30.629 --> 00:18:32.389
task producing this output folder just
holding the object itself the provider

00:18:32.389 --> 00:18:32.399
holding the object itself the provider
 

00:18:32.399 --> 00:18:34.310
holding the object itself the provider
will allow you to not only get the

00:18:34.310 --> 00:18:34.320
will allow you to not only get the
 

00:18:34.320 --> 00:18:36.200
will allow you to not only get the
object but also register your dependency

00:18:36.200 --> 00:18:36.210
object but also register your dependency
 

00:18:36.210 --> 00:18:38.240
object but also register your dependency
on whoever is producing it eventually

00:18:38.240 --> 00:18:38.250
on whoever is producing it eventually
 

00:18:38.250 --> 00:18:41.119
on whoever is producing it eventually
you can do a get and I will give you the

00:18:41.119 --> 00:18:41.129
you can do a get and I will give you the
 

00:18:41.129 --> 00:18:43.430
you can do a get and I will give you the
actual task at the actual object that

00:18:43.430 --> 00:18:43.440
actual task at the actual object that
 

00:18:43.440 --> 00:18:45.379
actual task at the actual object that
you can use to configure your own tasks

00:18:45.379 --> 00:18:45.389
you can use to configure your own tasks
 

00:18:45.389 --> 00:18:47.360
you can use to configure your own tasks
so here when bao is getting configured

00:18:47.360 --> 00:18:47.370
so here when bao is getting configured
 

00:18:47.370 --> 00:18:49.940
so here when bao is getting configured
foo gets configured and eventually all

00:18:49.940 --> 00:18:49.950
foo gets configured and eventually all
 

00:18:49.950 --> 00:18:51.049
foo gets configured and eventually all
the dependency of food will get

00:18:51.049 --> 00:18:51.059
the dependency of food will get
 

00:18:51.059 --> 00:18:52.970
the dependency of food will get
configured and so on and so forth so you

00:18:52.970 --> 00:18:52.980
configured and so on and so forth so you
 

00:18:52.980 --> 00:18:55.159
configured and so on and so forth so you
can say are lazy this is becoming we are

00:18:55.159 --> 00:18:55.169
can say are lazy this is becoming we are
 

00:18:55.169 --> 00:18:57.190
can say are lazy this is becoming we are
retrofitting all of our tasks to become

00:18:57.190 --> 00:18:57.200
retrofitting all of our tasks to become
 

00:18:57.200 --> 00:18:59.930
retrofitting all of our tasks to become
using providers and stuff like that so

00:18:59.930 --> 00:18:59.940
using providers and stuff like that so
 

00:18:59.940 --> 00:19:01.970
using providers and stuff like that so
if you use customization a lot you

00:19:01.970 --> 00:19:01.980
if you use customization a lot you
 

00:19:01.980 --> 00:19:03.470
if you use customization a lot you
really need to look into these two api's

00:19:03.470 --> 00:19:03.480
really need to look into these two api's
 

00:19:03.480 --> 00:19:06.710
really need to look into these two api's
in three three and now Chris will talk

00:19:06.710 --> 00:19:06.720
in three three and now Chris will talk
 

00:19:06.720 --> 00:19:08.149
in three three and now Chris will talk
about some of the other improvements

00:19:08.149 --> 00:19:08.159
about some of the other improvements
 

00:19:08.159 --> 00:19:13.279
about some of the other improvements
we've made yes another optimization to

00:19:13.279 --> 00:19:13.289
we've made yes another optimization to
 

00:19:13.289 --> 00:19:14.810
we've made yes another optimization to
the build pressure is coming up in 303

00:19:14.810 --> 00:19:14.820
the build pressure is coming up in 303
 

00:19:14.820 --> 00:19:19.039
the build pressure is coming up in 303
and is like art classes so previously

00:19:19.039 --> 00:19:19.049
and is like art classes so previously
 

00:19:19.049 --> 00:19:21.139
and is like art classes so previously
the under Gradle plugin will generate an

00:19:21.139 --> 00:19:21.149
the under Gradle plugin will generate an
 

00:19:21.149 --> 00:19:23.090
the under Gradle plugin will generate an
auto Java for every single dependency in

00:19:23.090 --> 00:19:23.100
auto Java for every single dependency in
 

00:19:23.100 --> 00:19:25.369
auto Java for every single dependency in
every sub project and then compile them

00:19:25.369 --> 00:19:25.379
every sub project and then compile them
 

00:19:25.379 --> 00:19:28.310
every sub project and then compile them
alongside your actual classes in under

00:19:28.310 --> 00:19:28.320
alongside your actual classes in under
 

00:19:28.320 --> 00:19:30.259
alongside your actual classes in under
Gradle plug-in 2.3 it just generates a

00:19:30.259 --> 00:19:30.269
Gradle plug-in 2.3 it just generates a
 

00:19:30.269 --> 00:19:33.499
Gradle plug-in 2.3 it just generates a
jar containing the class directly and

00:19:33.499 --> 00:19:33.509
jar containing the class directly and
 

00:19:33.509 --> 00:19:35.419
jar containing the class directly and
especially for those with many library

00:19:35.419 --> 00:19:35.429
especially for those with many library
 

00:19:35.429 --> 00:19:37.580
especially for those with many library
sub projects and lots of Defense's this

00:19:37.580 --> 00:19:37.590
sub projects and lots of Defense's this
 

00:19:37.590 --> 00:19:40.779
sub projects and lots of Defense's this
avoids a lot of compilation a lot of ia

00:19:40.779 --> 00:19:40.789
avoids a lot of compilation a lot of ia
 

00:19:40.789 --> 00:19:43.850
avoids a lot of compilation a lot of ia
for some large multi module builds and

00:19:43.850 --> 00:19:43.860
for some large multi module builds and
 

00:19:43.860 --> 00:19:45.289
for some large multi module builds and
we actually saw double digit percentage

00:19:45.289 --> 00:19:45.299
we actually saw double digit percentage
 

00:19:45.299 --> 00:19:48.169
we actually saw double digit percentage
and speed ups and when building from

00:19:48.169 --> 00:19:48.179
and speed ups and when building from
 

00:19:48.179 --> 00:19:51.440
and speed ups and when building from
clean due to this change so the our

00:19:51.440 --> 00:19:51.450
clean due to this change so the our
 

00:19:51.450 --> 00:19:54.440
clean due to this change so the our
class system in Android studio 3.3 has

00:19:54.440 --> 00:19:54.450
class system in Android studio 3.3 has
 

00:19:54.450 --> 00:19:56.299
class system in Android studio 3.3 has
been rewritten to simulate all of these

00:19:56.299 --> 00:19:56.309
been rewritten to simulate all of these
 

00:19:56.309 --> 00:19:58.399
been rewritten to simulate all of these
are classes in memory rather than

00:19:58.399 --> 00:19:58.409
are classes in memory rather than
 

00:19:58.409 --> 00:20:02.120
are classes in memory rather than
relying the ones on disk happily this

00:20:02.120 --> 00:20:02.130
relying the ones on disk happily this
 

00:20:02.130 --> 00:20:03.620
relying the ones on disk happily this
well as enabling this optimization of

00:20:03.620 --> 00:20:03.630
well as enabling this optimization of
 

00:20:03.630 --> 00:20:05.810
well as enabling this optimization of
the build it actually speeds up indexing

00:20:05.810 --> 00:20:05.820
the build it actually speeds up indexing
 

00:20:05.820 --> 00:20:08.720
the build it actually speeds up indexing
in Android studio as well even 40s with

00:20:08.720 --> 00:20:08.730
in Android studio as well even 40s with
 

00:20:08.730 --> 00:20:11.690
in Android studio as well even 40s with
all degradable plugins this does however

00:20:11.690 --> 00:20:11.700
all degradable plugins this does however
 

00:20:11.700 --> 00:20:13.940
all degradable plugins this does however
break some Gradle for our plugins that

00:20:13.940 --> 00:20:13.950
break some Gradle for our plugins that
 

00:20:13.950 --> 00:20:15.890
break some Gradle for our plugins that
depend on reading that alpha directly

00:20:15.890 --> 00:20:15.900
depend on reading that alpha directly
 

00:20:15.900 --> 00:20:17.690
depend on reading that alpha directly
including by the knife which I'm working

00:20:17.690 --> 00:20:17.700
including by the knife which I'm working
 

00:20:17.700 --> 00:20:21.080
including by the knife which I'm working
on fixing and it's implemented for

00:20:21.080 --> 00:20:21.090
on fixing and it's implemented for
 

00:20:21.090 --> 00:20:23.150
on fixing and it's implemented for
libraries in three dots free and we're

00:20:23.150 --> 00:20:23.160
libraries in three dots free and we're
 

00:20:23.160 --> 00:20:24.050
libraries in three dots free and we're
working on implementing it for

00:20:24.050 --> 00:20:24.060
working on implementing it for
 

00:20:24.060 --> 00:20:28.130
working on implementing it for
applications and tests you as jerome

00:20:28.130 --> 00:20:28.140
applications and tests you as jerome
 

00:20:28.140 --> 00:20:30.080
applications and tests you as jerome
mentioned earlier great honor how

00:20:30.080 --> 00:20:30.090
mentioned earlier great honor how
 

00:20:30.090 --> 00:20:31.790
mentioned earlier great honor how
support for incremental annotation

00:20:31.790 --> 00:20:31.800
support for incremental annotation
 

00:20:31.800 --> 00:20:34.220
support for incremental annotation
processing but it does need support from

00:20:34.220 --> 00:20:34.230
processing but it does need support from
 

00:20:34.230 --> 00:20:35.950
processing but it does need support from
the annotation processes themselves and

00:20:35.950 --> 00:20:35.960
the annotation processes themselves and
 

00:20:35.960 --> 00:20:38.540
the annotation processes themselves and
yeah he said that we're working to

00:20:38.540 --> 00:20:38.550
yeah he said that we're working to
 

00:20:38.550 --> 00:20:40.370
yeah he said that we're working to
support the most popular annotation

00:20:40.370 --> 00:20:40.380
support the most popular annotation
 

00:20:40.380 --> 00:20:42.950
support the most popular annotation
processes including dagger room glide

00:20:42.950 --> 00:20:42.960
processes including dagger room glide
 

00:20:42.960 --> 00:20:46.070
processes including dagger room glide
auto value and some others we're also

00:20:46.070 --> 00:20:46.080
auto value and some others we're also
 

00:20:46.080 --> 00:20:47.930
auto value and some others we're also
working to react you to data binding to

00:20:47.930 --> 00:20:47.940
working to react you to data binding to
 

00:20:47.940 --> 00:20:49.940
working to react you to data binding to
allow it to be an isolated annotation

00:20:49.940 --> 00:20:49.950
allow it to be an isolated annotation
 

00:20:49.950 --> 00:20:52.040
allow it to be an isolated annotation
processor speeding up your incremental

00:20:52.040 --> 00:20:52.050
processor speeding up your incremental
 

00:20:52.050 --> 00:20:55.190
processor speeding up your incremental
recognition even more we also want to

00:20:55.190 --> 00:20:55.200
recognition even more we also want to
 

00:20:55.200 --> 00:20:56.480
recognition even more we also want to
help you understand that bill time

00:20:56.480 --> 00:20:56.490
help you understand that bill time
 

00:20:56.490 --> 00:20:59.300
help you understand that bill time
impact of annotation processes so we

00:20:59.300 --> 00:20:59.310
impact of annotation processes so we
 

00:20:59.310 --> 00:21:01.760
impact of annotation processes so we
want to report to you like which and

00:21:01.760 --> 00:21:01.770
want to report to you like which and
 

00:21:01.770 --> 00:21:04.430
want to report to you like which and
visited was time spent in and how much

00:21:04.430 --> 00:21:04.440
visited was time spent in and how much
 

00:21:04.440 --> 00:21:08.750
visited was time spent in and how much
did they cost on the theme there are

00:21:08.750 --> 00:21:08.760
did they cost on the theme there are
 

00:21:08.760 --> 00:21:10.460
did they cost on the theme there are
several other areas we want to give you

00:21:10.460 --> 00:21:10.470
several other areas we want to give you
 

00:21:10.470 --> 00:21:12.260
several other areas we want to give you
better insight into your build easily

00:21:12.260 --> 00:21:12.270
better insight into your build easily
 

00:21:12.270 --> 00:21:14.690
better insight into your build easily
and simply so there if you're using

00:21:14.690 --> 00:21:14.700
and simply so there if you're using
 

00:21:14.700 --> 00:21:17.180
and simply so there if you're using
annotation processors it's really

00:21:17.180 --> 00:21:17.190
annotation processors it's really
 

00:21:17.190 --> 00:21:18.440
annotation processors it's really
critical that you have that insight

00:21:18.440 --> 00:21:18.450
critical that you have that insight
 

00:21:18.450 --> 00:21:20.900
critical that you have that insight
because they're often a bottleneck for

00:21:20.900 --> 00:21:20.910
because they're often a bottleneck for
 

00:21:20.910 --> 00:21:22.730
because they're often a bottleneck for
internal worlds for a lot of builds that

00:21:22.730 --> 00:21:22.740
internal worlds for a lot of builds that
 

00:21:22.740 --> 00:21:25.940
internal worlds for a lot of builds that
we see when a greater task causes you

00:21:25.940 --> 00:21:25.950
we see when a greater task causes you
 

00:21:25.950 --> 00:21:27.890
we see when a greater task causes you
trouble it's really helpful to know the

00:21:27.890 --> 00:21:27.900
trouble it's really helpful to know the
 

00:21:27.900 --> 00:21:29.870
trouble it's really helpful to know the
Gradle plugin or the script where it was

00:21:29.870 --> 00:21:29.880
Gradle plugin or the script where it was
 

00:21:29.880 --> 00:21:33.440
Gradle plugin or the script where it was
created and what triggered it to run and

00:21:33.440 --> 00:21:33.450
created and what triggered it to run and
 

00:21:33.450 --> 00:21:35.420
created and what triggered it to run and
we're working to make finding about more

00:21:35.420 --> 00:21:35.430
we're working to make finding about more
 

00:21:35.430 --> 00:21:39.410
we're working to make finding about more
easy we also want to help you find these

00:21:39.410 --> 00:21:39.420
easy we also want to help you find these
 

00:21:39.420 --> 00:21:41.150
easy we also want to help you find these
types of issues even if you're not

00:21:41.150 --> 00:21:41.160
types of issues even if you're not
 

00:21:41.160 --> 00:21:43.810
types of issues even if you're not
actively looking for them so longer term

00:21:43.810 --> 00:21:43.820
actively looking for them so longer term
 

00:21:43.820 --> 00:21:46.490
actively looking for them so longer term
we want under studio to flag if there is

00:21:46.490 --> 00:21:46.500
we want under studio to flag if there is
 

00:21:46.500 --> 00:21:49.100
we want under studio to flag if there is
an issue or if something changed and

00:21:49.100 --> 00:21:49.110
an issue or if something changed and
 

00:21:49.110 --> 00:21:51.650
an issue or if something changed and
regressed and will point you towards the

00:21:51.650 --> 00:21:51.660
regressed and will point you towards the
 

00:21:51.660 --> 00:21:53.720
regressed and will point you towards the
Gradle build scan which is a powerful

00:21:53.720 --> 00:21:53.730
Gradle build scan which is a powerful
 

00:21:53.730 --> 00:21:56.030
Gradle build scan which is a powerful
tool for getting a bit of insight into

00:21:56.030 --> 00:21:56.040
tool for getting a bit of insight into
 

00:21:56.040 --> 00:22:01.430
tool for getting a bit of insight into
how your build is working ok so on from

00:22:01.430 --> 00:22:01.440
how your build is working ok so on from
 

00:22:01.440 --> 00:22:02.930
how your build is working ok so on from
the user kind of better insights to

00:22:02.930 --> 00:22:02.940
the user kind of better insights to
 

00:22:02.940 --> 00:22:05.600
the user kind of better insights to
complete rewrites Android resource

00:22:05.600 --> 00:22:05.610
complete rewrites Android resource
 

00:22:05.610 --> 00:22:09.560
complete rewrites Android resource
namespacing resource namespacing is a

00:22:09.560 --> 00:22:09.570
namespacing resource namespacing is a
 

00:22:09.570 --> 00:22:11.630
namespacing resource namespacing is a
completely new pipeline for compiling

00:22:11.630 --> 00:22:11.640
completely new pipeline for compiling
 

00:22:11.640 --> 00:22:14.450
completely new pipeline for compiling
and linking android resources so we're

00:22:14.450 --> 00:22:14.460
and linking android resources so we're
 

00:22:14.460 --> 00:22:16.010
and linking android resources so we're
actually doing this for two reasons

00:22:16.010 --> 00:22:16.020
actually doing this for two reasons
 

00:22:16.020 --> 00:22:18.770
actually doing this for two reasons
firstly speed up the build and make it

00:22:18.770 --> 00:22:18.780
firstly speed up the build and make it
 

00:22:18.780 --> 00:22:21.740
firstly speed up the build and make it
easier to understand and secondly we

00:22:21.740 --> 00:22:21.750
easier to understand and secondly we
 

00:22:21.750 --> 00:22:24.580
easier to understand and secondly we
want a better support dynamic features

00:22:24.580 --> 00:22:24.590
want a better support dynamic features
 

00:22:24.590 --> 00:22:27.560
want a better support dynamic features
looking at think how things work now in

00:22:27.560 --> 00:22:27.570
looking at think how things work now in
 

00:22:27.570 --> 00:22:29.570
looking at think how things work now in
the existing resource pipeline there are

00:22:29.570 --> 00:22:29.580
the existing resource pipeline there are
 

00:22:29.580 --> 00:22:31.640
the existing resource pipeline there are
two namespaces the Android platform and

00:22:31.640 --> 00:22:31.650
two namespaces the Android platform and
 

00:22:31.650 --> 00:22:34.820
two namespaces the Android platform and
everything else that means that if you

00:22:34.820 --> 00:22:34.830
everything else that means that if you
 

00:22:34.830 --> 00:22:36.710
everything else that means that if you
have two libraries there define a

00:22:36.710 --> 00:22:36.720
have two libraries there define a
 

00:22:36.720 --> 00:22:38.060
have two libraries there define a
resource of the same name and the same

00:22:38.060 --> 00:22:38.070
resource of the same name and the same
 

00:22:38.070 --> 00:22:40.430
resource of the same name and the same
type the results manager has to pick one

00:22:40.430 --> 00:22:40.440
type the results manager has to pick one
 

00:22:40.440 --> 00:22:42.800
type the results manager has to pick one
and it's not always clear what the right

00:22:42.800 --> 00:22:42.810
and it's not always clear what the right
 

00:22:42.810 --> 00:22:44.900
and it's not always clear what the right
thing to do is or even that this is

00:22:44.900 --> 00:22:44.910
thing to do is or even that this is
 

00:22:44.910 --> 00:22:47.420
thing to do is or even that this is
happening at all this actually also

00:22:47.420 --> 00:22:47.430
happening at all this actually also
 

00:22:47.430 --> 00:22:49.700
happening at all this actually also
makes splitting your apk up into several

00:22:49.700 --> 00:22:49.710
makes splitting your apk up into several
 

00:22:49.710 --> 00:22:52.310
makes splitting your apk up into several
dynamic features much more difficult as

00:22:52.310 --> 00:22:52.320
dynamic features much more difficult as
 

00:22:52.320 --> 00:22:54.020
dynamic features much more difficult as
each dynamic feature is shipped

00:22:54.020 --> 00:22:54.030
each dynamic feature is shipped
 

00:22:54.030 --> 00:22:54.710
each dynamic feature is shipped
separately

00:22:54.710 --> 00:22:54.720
separately
 

00:22:54.720 --> 00:22:56.570
separately
where those resources come from and

00:22:56.570 --> 00:22:56.580
where those resources come from and
 

00:22:56.580 --> 00:22:59.960
where those resources come from and
where they go is really important so

00:22:59.960 --> 00:22:59.970
where they go is really important so
 

00:22:59.970 --> 00:23:01.910
where they go is really important so
with resource namespacing each library

00:23:01.910 --> 00:23:01.920
with resource namespacing each library
 

00:23:01.920 --> 00:23:04.010
with resource namespacing each library
is compiled and linked separately and

00:23:04.010 --> 00:23:04.020
is compiled and linked separately and
 

00:23:04.020 --> 00:23:07.000
is compiled and linked separately and
then linked together into the final apks

00:23:07.000 --> 00:23:07.010
then linked together into the final apks
 

00:23:07.010 --> 00:23:09.530
then linked together into the final apks
the r-class in applications will no

00:23:09.530 --> 00:23:09.540
the r-class in applications will no
 

00:23:09.540 --> 00:23:12.170
the r-class in applications will no
longer have final IDs and then when

00:23:12.170 --> 00:23:12.180
longer have final IDs and then when
 

00:23:12.180 --> 00:23:14.240
longer have final IDs and then when
you're using resources from both xml and

00:23:14.240 --> 00:23:14.250
you're using resources from both xml and
 

00:23:14.250 --> 00:23:16.460
you're using resources from both xml and
from java you need to be explicit about

00:23:16.460 --> 00:23:16.470
from java you need to be explicit about
 

00:23:16.470 --> 00:23:17.420
from java you need to be explicit about
where they came from

00:23:17.420 --> 00:23:17.430
where they came from
 

00:23:17.430 --> 00:23:19.610
where they came from
so each resources only listed in the

00:23:19.610 --> 00:23:19.620
so each resources only listed in the
 

00:23:19.620 --> 00:23:21.380
so each resources only listed in the
archives for the library that defined it

00:23:21.380 --> 00:23:21.390
archives for the library that defined it
 

00:23:21.390 --> 00:23:23.240
archives for the library that defined it
and an XML you need to use the namespace

00:23:23.240 --> 00:23:23.250
and an XML you need to use the namespace
 

00:23:23.250 --> 00:23:26.810
and an XML you need to use the namespace
of the resource to refer to it this also

00:23:26.810 --> 00:23:26.820
of the resource to refer to it this also
 

00:23:26.820 --> 00:23:29.120
of the resource to refer to it this also
means the resources no longer implicitly

00:23:29.120 --> 00:23:29.130
means the resources no longer implicitly
 

00:23:29.130 --> 00:23:31.040
means the resources no longer implicitly
override one another just because they

00:23:31.040 --> 00:23:31.050
override one another just because they
 

00:23:31.050 --> 00:23:33.680
override one another just because they
had the same name for cases where you

00:23:33.680 --> 00:23:33.690
had the same name for cases where you
 

00:23:33.690 --> 00:23:34.760
had the same name for cases where you
needed these overrides in the

00:23:34.760 --> 00:23:34.770
needed these overrides in the
 

00:23:34.770 --> 00:23:36.860
needed these overrides in the
application we rockin a new way to do

00:23:36.860 --> 00:23:36.870
application we rockin a new way to do
 

00:23:36.870 --> 00:23:40.340
application we rockin a new way to do
that explicitly ARS that we generate

00:23:40.340 --> 00:23:40.350
that explicitly ARS that we generate
 

00:23:40.350 --> 00:23:41.750
that explicitly ARS that we generate
from main space libraries will be backed

00:23:41.750 --> 00:23:41.760
from main space libraries will be backed
 

00:23:41.760 --> 00:23:43.460
from main space libraries will be backed
as compatible so you can have all the

00:23:43.460 --> 00:23:43.470
as compatible so you can have all the
 

00:23:43.470 --> 00:23:46.040
as compatible so you can have all the
benefits of namespacing yourself and but

00:23:46.040 --> 00:23:46.050
benefits of namespacing yourself and but
 

00:23:46.050 --> 00:23:47.810
benefits of namespacing yourself and but
not impose it on your consumers until

00:23:47.810 --> 00:23:47.820
not impose it on your consumers until
 

00:23:47.820 --> 00:23:52.070
not impose it on your consumers until
they're ready to switch ok passing on to

00:23:52.070 --> 00:23:52.080
they're ready to switch ok passing on to
 

00:23:52.080 --> 00:23:53.390
they're ready to switch ok passing on to
Isabela to tell you a bit more about the

00:23:53.390 --> 00:23:53.400
Isabela to tell you a bit more about the
 

00:23:53.400 --> 00:23:57.320
Isabela to tell you a bit more about the
details thank you okay now that we know

00:23:57.320 --> 00:23:57.330
details thank you okay now that we know
 

00:23:57.330 --> 00:23:59.720
details thank you okay now that we know
what resource namespacing is let's move

00:23:59.720 --> 00:23:59.730
what resource namespacing is let's move
 

00:23:59.730 --> 00:24:02.480
what resource namespacing is let's move
on to how to in the future namespace

00:24:02.480 --> 00:24:02.490
on to how to in the future namespace
 

00:24:02.490 --> 00:24:05.210
on to how to in the future namespace
your app or library you might find

00:24:05.210 --> 00:24:05.220
your app or library you might find
 

00:24:05.220 --> 00:24:07.760
your app or library you might find
yourself asking questions like where is

00:24:07.760 --> 00:24:07.770
yourself asking questions like where is
 

00:24:07.770 --> 00:24:10.310
yourself asking questions like where is
that resource coming from or what is the

00:24:10.310 --> 00:24:10.320
that resource coming from or what is the
 

00:24:10.320 --> 00:24:14.120
that resource coming from or what is the
proper syntax or how do I even they

00:24:14.120 --> 00:24:14.130
proper syntax or how do I even they
 

00:24:14.130 --> 00:24:16.940
proper syntax or how do I even they
speak my dependencies well the answer to

00:24:16.940 --> 00:24:16.950
speak my dependencies well the answer to
 

00:24:16.950 --> 00:24:19.310
speak my dependencies well the answer to
all these questions is we'll fix it for

00:24:19.310 --> 00:24:19.320
all these questions is we'll fix it for
 

00:24:19.320 --> 00:24:23.000
all these questions is we'll fix it for
you

00:24:23.000 --> 00:24:23.010
 

00:24:23.010 --> 00:24:26.120
so yes so the solution is automatic

00:24:26.120 --> 00:24:26.130
so yes so the solution is automatic
 

00:24:26.130 --> 00:24:28.280
so yes so the solution is automatic
named spacing or out on name spacing for

00:24:28.280 --> 00:24:28.290
named spacing or out on name spacing for
 

00:24:28.290 --> 00:24:29.310
named spacing or out on name spacing for
short

00:24:29.310 --> 00:24:29.320
short
 

00:24:29.320 --> 00:24:31.799
short
there are two main parts here first is

00:24:31.799 --> 00:24:31.809
there are two main parts here first is
 

00:24:31.809 --> 00:24:34.409
there are two main parts here first is
the automatic rewriting tool in the IDE

00:24:34.409 --> 00:24:34.419
the automatic rewriting tool in the IDE
 

00:24:34.419 --> 00:24:36.930
the automatic rewriting tool in the IDE
which will help you migrate your local

00:24:36.930 --> 00:24:36.940
which will help you migrate your local
 

00:24:36.940 --> 00:24:39.779
which will help you migrate your local
modules to be namespace and the second

00:24:39.779 --> 00:24:39.789
modules to be namespace and the second
 

00:24:39.789 --> 00:24:43.769
modules to be namespace and the second
one are the transforms and tasks in the

00:24:43.769 --> 00:24:43.779
one are the transforms and tasks in the
 

00:24:43.779 --> 00:24:45.930
one are the transforms and tasks in the
Gradle plugin that will rewrite your the

00:24:45.930 --> 00:24:45.940
Gradle plugin that will rewrite your the
 

00:24:45.940 --> 00:24:48.779
Gradle plugin that will rewrite your the
remote dependencies under the hood no

00:24:48.779 --> 00:24:48.789
remote dependencies under the hood no
 

00:24:48.789 --> 00:24:52.799
remote dependencies under the hood no
actions required here it's a example

00:24:52.799 --> 00:24:52.809
actions required here it's a example
 

00:24:52.809 --> 00:24:56.430
actions required here it's a example
dependency graph the blue not the blue

00:24:56.430 --> 00:24:56.440
dependency graph the blue not the blue
 

00:24:56.440 --> 00:24:58.529
dependency graph the blue not the blue
notes are local modules that can be

00:24:58.529 --> 00:24:58.539
notes are local modules that can be
 

00:24:58.539 --> 00:25:02.369
notes are local modules that can be
rewritten using the IDE tool the three

00:25:02.369 --> 00:25:02.379
rewritten using the IDE tool the three
 

00:25:02.379 --> 00:25:05.279
rewritten using the IDE tool the three
orange notes are not namespaced classic

00:25:05.279 --> 00:25:05.289
orange notes are not namespaced classic
 

00:25:05.289 --> 00:25:07.499
orange notes are not namespaced classic
remote libraries that will be

00:25:07.499 --> 00:25:07.509
remote libraries that will be
 

00:25:07.509 --> 00:25:10.529
remote libraries that will be
automatically rewritten by the AGP this

00:25:10.529 --> 00:25:10.539
automatically rewritten by the AGP this
 

00:25:10.539 --> 00:25:13.379
automatically rewritten by the AGP this
means all the resources classes the

00:25:13.379 --> 00:25:13.389
means all the resources classes the
 

00:25:13.389 --> 00:25:15.690
means all the resources classes the
manifests will be rewritten to use the

00:25:15.690 --> 00:25:15.700
manifests will be rewritten to use the
 

00:25:15.700 --> 00:25:19.019
manifests will be rewritten to use the
full resource space and finally the

00:25:19.019 --> 00:25:19.029
full resource space and finally the
 

00:25:19.029 --> 00:25:21.629
full resource space and finally the
green notes are they represent

00:25:21.629 --> 00:25:21.639
green notes are they represent
 

00:25:21.639 --> 00:25:23.249
green notes are they represent
dependencies that are already named

00:25:23.249 --> 00:25:23.259
dependencies that are already named
 

00:25:23.259 --> 00:25:25.350
dependencies that are already named
spaced so they will not be modified at

00:25:25.350 --> 00:25:25.360
spaced so they will not be modified at
 

00:25:25.360 --> 00:25:29.460
spaced so they will not be modified at
all let's see what types of changes we

00:25:29.460 --> 00:25:29.470
all let's see what types of changes we
 

00:25:29.470 --> 00:25:31.940
all let's see what types of changes we
can see after this migration takes place

00:25:31.940 --> 00:25:31.950
can see after this migration takes place
 

00:25:31.950 --> 00:25:34.460
can see after this migration takes place
in the bytecode or cotton in Java

00:25:34.460 --> 00:25:34.470
in the bytecode or cotton in Java
 

00:25:34.470 --> 00:25:38.039
in the bytecode or cotton in Java
sources you can see that now there will

00:25:38.039 --> 00:25:38.049
sources you can see that now there will
 

00:25:38.049 --> 00:25:40.529
sources you can see that now there will
be different our classes present if a

00:25:40.529 --> 00:25:40.539
be different our classes present if a
 

00:25:40.539 --> 00:25:42.060
be different our classes present if a
resource was defined in a different

00:25:42.060 --> 00:25:42.070
resource was defined in a different
 

00:25:42.070 --> 00:25:44.789
resource was defined in a different
module or a remote library you will see

00:25:44.789 --> 00:25:44.799
module or a remote library you will see
 

00:25:44.799 --> 00:25:47.100
module or a remote library you will see
the package of the our class will change

00:25:47.100 --> 00:25:47.110
the package of the our class will change
 

00:25:47.110 --> 00:25:51.240
the package of the our class will change
to match that package in the XML

00:25:51.240 --> 00:25:51.250
to match that package in the XML
 

00:25:51.250 --> 00:25:53.820
to match that package in the XML
resource references like in the values

00:25:53.820 --> 00:25:53.830
resource references like in the values
 

00:25:53.830 --> 00:25:56.159
resource references like in the values
files or in the manifest you will see

00:25:56.159 --> 00:25:56.169
files or in the manifest you will see
 

00:25:56.169 --> 00:25:58.049
files or in the manifest you will see
the new name space appear between the at

00:25:58.049 --> 00:25:58.059
the new name space appear between the at
 

00:25:58.059 --> 00:25:59.850
the new name space appear between the at
symbol and the type of the resource

00:25:59.850 --> 00:25:59.860
symbol and the type of the resource
 

00:25:59.860 --> 00:26:03.419
symbol and the type of the resource
similar to the android namespace and

00:26:03.419 --> 00:26:03.429
similar to the android namespace and
 

00:26:03.429 --> 00:26:05.519
similar to the android namespace and
finally another way resources can be

00:26:05.519 --> 00:26:05.529
finally another way resources can be
 

00:26:05.529 --> 00:26:08.159
finally another way resources can be
referenced is in attributes for example

00:26:08.159 --> 00:26:08.169
referenced is in attributes for example
 

00:26:08.169 --> 00:26:11.999
referenced is in attributes for example
in layouts here the xml namespace will

00:26:11.999 --> 00:26:12.009
in layouts here the xml namespace will
 

00:26:12.009 --> 00:26:14.100
in layouts here the xml namespace will
be modified to point to the correct

00:26:14.100 --> 00:26:14.110
be modified to point to the correct
 

00:26:14.110 --> 00:26:17.159
be modified to point to the correct
package instead of res auto and the

00:26:17.159 --> 00:26:17.169
package instead of res auto and the
 

00:26:17.169 --> 00:26:19.230
package instead of res auto and the
attribute will use this new namespace as

00:26:19.230 --> 00:26:19.240
attribute will use this new namespace as
 

00:26:19.240 --> 00:26:22.320
attribute will use this new namespace as
well and since we already on the topic

00:26:22.320 --> 00:26:22.330
well and since we already on the topic
 

00:26:22.330 --> 00:26:24.480
well and since we already on the topic
of resources let's talk about research

00:26:24.480 --> 00:26:24.490
of resources let's talk about research
 

00:26:24.490 --> 00:26:27.649
of resources let's talk about research
visibility so probably many of you

00:26:27.649 --> 00:26:27.659
visibility so probably many of you
 

00:26:27.659 --> 00:26:30.480
visibility so probably many of you
created an android library with a lot of

00:26:30.480 --> 00:26:30.490
created an android library with a lot of
 

00:26:30.490 --> 00:26:32.460
created an android library with a lot of
effort into declaring which resources

00:26:32.460 --> 00:26:32.470
effort into declaring which resources
 

00:26:32.470 --> 00:26:35.129
effort into declaring which resources
are public and then publish this aar

00:26:35.129 --> 00:26:35.139
are public and then publish this aar
 

00:26:35.139 --> 00:26:39.060
are public and then publish this aar
with a public txt only for consumers to

00:26:39.060 --> 00:26:39.070
with a public txt only for consumers to
 

00:26:39.070 --> 00:26:42.749
with a public txt only for consumers to
ignore it this currently is only a

00:26:42.749 --> 00:26:42.759
ignore it this currently is only a
 

00:26:42.759 --> 00:26:45.810
ignore it this currently is only a
Lindt warning this code compiles and

00:26:45.810 --> 00:26:45.820
Lindt warning this code compiles and
 

00:26:45.820 --> 00:26:48.659
Lindt warning this code compiles and
runs fine at runtime completely ignoring

00:26:48.659 --> 00:26:48.669
runs fine at runtime completely ignoring
 

00:26:48.669 --> 00:26:50.930
runs fine at runtime completely ignoring
the intended visibility of the resource

00:26:50.930 --> 00:26:50.940
the intended visibility of the resource
 

00:26:50.940 --> 00:26:53.759
the intended visibility of the resource
I'm sure many you actually ignore these

00:26:53.759 --> 00:26:53.769
I'm sure many you actually ignore these
 

00:26:53.769 --> 00:26:57.839
I'm sure many you actually ignore these
warnings as well great so to combat this

00:26:57.839 --> 00:26:57.849
warnings as well great so to combat this
 

00:26:57.849 --> 00:27:00.149
warnings as well great so to combat this
we want to introduce stricter resource

00:27:00.149 --> 00:27:00.159
we want to introduce stricter resource
 

00:27:00.159 --> 00:27:04.199
we want to introduce stricter resource
visibility so these violations will now

00:27:04.199 --> 00:27:04.209
visibility so these violations will now
 

00:27:04.209 --> 00:27:06.479
visibility so these violations will now
become build errors instead so it will

00:27:06.479 --> 00:27:06.489
become build errors instead so it will
 

00:27:06.489 --> 00:27:08.969
become build errors instead so it will
catch them early and we want to use

00:27:08.969 --> 00:27:08.979
catch them early and we want to use
 

00:27:08.979 --> 00:27:12.209
catch them early and we want to use
three levels of visibility one public

00:27:12.209 --> 00:27:12.219
three levels of visibility one public
 

00:27:12.219 --> 00:27:14.579
three levels of visibility one public
this means these resources will be

00:27:14.579 --> 00:27:14.589
this means these resources will be
 

00:27:14.589 --> 00:27:17.069
this means these resources will be
present both in a public art classes of

00:27:17.069 --> 00:27:17.079
present both in a public art classes of
 

00:27:17.079 --> 00:27:18.719
present both in a public art classes of
the consumers and the private art

00:27:18.719 --> 00:27:18.729
the consumers and the private art
 

00:27:18.729 --> 00:27:23.009
the consumers and the private art
classes or for that local module private

00:27:23.009 --> 00:27:23.019
classes or for that local module private
 

00:27:23.019 --> 00:27:25.949
classes or for that local module private
resources only present in private art

00:27:25.949 --> 00:27:25.959
resources only present in private art
 

00:27:25.959 --> 00:27:30.119
resources only present in private art
classes and last private XML only

00:27:30.119 --> 00:27:30.129
classes and last private XML only
 

00:27:30.129 --> 00:27:32.579
classes and last private XML only
resources they will be not present in

00:27:32.579 --> 00:27:32.589
resources they will be not present in
 

00:27:32.589 --> 00:27:35.699
resources they will be not present in
any art classes at all instead they will

00:27:35.699 --> 00:27:35.709
any art classes at all instead they will
 

00:27:35.709 --> 00:27:39.059
any art classes at all instead they will
be only you can only reference them from

00:27:39.059 --> 00:27:39.069
be only you can only reference them from
 

00:27:39.069 --> 00:27:42.449
be only you can only reference them from
Auto X other XML files within that

00:27:42.449 --> 00:27:42.459
Auto X other XML files within that
 

00:27:42.459 --> 00:27:46.289
Auto X other XML files within that
module this will result in smaller art

00:27:46.289 --> 00:27:46.299
module this will result in smaller art
 

00:27:46.299 --> 00:27:49.639
module this will result in smaller art
classes both compile and run time and

00:27:49.639 --> 00:27:49.649
classes both compile and run time and
 

00:27:49.649 --> 00:27:53.189
classes both compile and run time and
also resource hermit ization similar to

00:27:53.189 --> 00:27:53.199
also resource hermit ization similar to
 

00:27:53.199 --> 00:27:55.559
also resource hermit ization similar to
the class or method hermit ization

00:27:55.559 --> 00:27:55.569
the class or method hermit ization
 

00:27:55.569 --> 00:27:58.859
the class or method hermit ization
currently in Java or Kotlin so if that's

00:27:58.859 --> 00:27:58.869
currently in Java or Kotlin so if that's
 

00:27:58.869 --> 00:28:07.529
currently in Java or Kotlin so if that's
you thank you all right so as you can

00:28:07.529 --> 00:28:07.539
you thank you all right so as you can
 

00:28:07.539 --> 00:28:09.569
you thank you all right so as you can
see we're working on a lot of things and

00:28:09.569 --> 00:28:09.579
see we're working on a lot of things and
 

00:28:09.579 --> 00:28:12.059
see we're working on a lot of things and
many of which we hope would help with

00:28:12.059 --> 00:28:12.069
many of which we hope would help with
 

00:28:12.069 --> 00:28:14.519
many of which we hope would help with
beat speed but going back to my point

00:28:14.519 --> 00:28:14.529
beat speed but going back to my point
 

00:28:14.529 --> 00:28:16.499
beat speed but going back to my point
around awareness and tooling I want to

00:28:16.499 --> 00:28:16.509
around awareness and tooling I want to
 

00:28:16.509 --> 00:28:17.669
around awareness and tooling I want to
assure some of the things that you can

00:28:17.669 --> 00:28:17.679
assure some of the things that you can
 

00:28:17.679 --> 00:28:20.729
assure some of the things that you can
do today to understand your build better

00:28:20.729 --> 00:28:20.739
do today to understand your build better
 

00:28:20.739 --> 00:28:24.629
do today to understand your build better
and improve its performances so the

00:28:24.629 --> 00:28:24.639
and improve its performances so the
 

00:28:24.639 --> 00:28:27.930
and improve its performances so the
first things is to upgrade if you recall

00:28:27.930 --> 00:28:27.940
first things is to upgrade if you recall
 

00:28:27.940 --> 00:28:30.839
first things is to upgrade if you recall
my first graph we do improve with every

00:28:30.839 --> 00:28:30.849
my first graph we do improve with every
 

00:28:30.849 --> 00:28:33.569
my first graph we do improve with every
release and so if you really care about

00:28:33.569 --> 00:28:33.579
release and so if you really care about
 

00:28:33.579 --> 00:28:35.639
release and so if you really care about
your bill speed the best thing to do is

00:28:35.639 --> 00:28:35.649
your bill speed the best thing to do is
 

00:28:35.649 --> 00:28:38.699
your bill speed the best thing to do is
to upgrade to the latest stable beta

00:28:38.699 --> 00:28:38.709
to upgrade to the latest stable beta
 

00:28:38.709 --> 00:28:40.649
to upgrade to the latest stable beta
canary whichever you feel most

00:28:40.649 --> 00:28:40.659
canary whichever you feel most
 

00:28:40.659 --> 00:28:45.989
canary whichever you feel most
comfortable with down to toolings

00:28:45.989 --> 00:28:45.999
comfortable with down to toolings
 

00:28:45.999 --> 00:28:48.089
comfortable with down to toolings
there's a some tools out there that you

00:28:48.089 --> 00:28:48.099
there's a some tools out there that you
 

00:28:48.099 --> 00:28:49.409
there's a some tools out there that you
can start leveraging to better

00:28:49.409 --> 00:28:49.419
can start leveraging to better
 

00:28:49.419 --> 00:28:52.919
can start leveraging to better
understand your builds one that I really

00:28:52.919 --> 00:28:52.929
understand your builds one that I really
 

00:28:52.929 --> 00:28:55.210
understand your builds one that I really
like is - - scan

00:28:55.210 --> 00:28:55.220
like is - - scan
 

00:28:55.220 --> 00:28:58.270
like is - - scan
it's a free tool from Gradle it applauds

00:28:58.270 --> 00:28:58.280
it's a free tool from Gradle it applauds
 

00:28:58.280 --> 00:29:00.340
it's a free tool from Gradle it applauds
some of your build data into Gradle

00:29:00.340 --> 00:29:00.350
some of your build data into Gradle
 

00:29:00.350 --> 00:29:02.830
some of your build data into Gradle
servers and then provide a very

00:29:02.830 --> 00:29:02.840
servers and then provide a very
 

00:29:02.840 --> 00:29:05.650
servers and then provide a very
comprehensive dashboards around task

00:29:05.650 --> 00:29:05.660
comprehensive dashboards around task
 

00:29:05.660 --> 00:29:08.770
comprehensive dashboards around task
durations plugins dependencies and many

00:29:08.770 --> 00:29:08.780
durations plugins dependencies and many
 

00:29:08.780 --> 00:29:11.080
durations plugins dependencies and many
many more things so if you're trying to

00:29:11.080 --> 00:29:11.090
many more things so if you're trying to
 

00:29:11.090 --> 00:29:12.430
many more things so if you're trying to
understand what's going on with your Bo

00:29:12.430 --> 00:29:12.440
understand what's going on with your Bo
 

00:29:12.440 --> 00:29:15.550
understand what's going on with your Bo
why is it slow this is a very very

00:29:15.550 --> 00:29:15.560
why is it slow this is a very very
 

00:29:15.560 --> 00:29:21.130
why is it slow this is a very very
useful resource to use if sharing some

00:29:21.130 --> 00:29:21.140
useful resource to use if sharing some
 

00:29:21.140 --> 00:29:22.630
useful resource to use if sharing some
of your build data with Gradle is not

00:29:22.630 --> 00:29:22.640
of your build data with Gradle is not
 

00:29:22.640 --> 00:29:24.430
of your build data with Gradle is not
something you feel comfortable doing

00:29:24.430 --> 00:29:24.440
something you feel comfortable doing
 

00:29:24.440 --> 00:29:26.800
something you feel comfortable doing
there's the poor's men's version of it

00:29:26.800 --> 00:29:26.810
there's the poor's men's version of it
 

00:29:26.810 --> 00:29:30.490
there's the poor's men's version of it
which is - - profile - - profile we'll

00:29:30.490 --> 00:29:30.500
which is - - profile - - profile we'll
 

00:29:30.500 --> 00:29:32.890
which is - - profile - - profile we'll
create a local HTML file that you can

00:29:32.890 --> 00:29:32.900
create a local HTML file that you can
 

00:29:32.900 --> 00:29:34.990
create a local HTML file that you can
open in a browser to show some

00:29:34.990 --> 00:29:35.000
open in a browser to show some
 

00:29:35.000 --> 00:29:37.300
open in a browser to show some
information about your bill it's

00:29:37.300 --> 00:29:37.310
information about your bill it's
 

00:29:37.310 --> 00:29:39.460
information about your bill it's
definitely not as rich as the - - gun

00:29:39.460 --> 00:29:39.470
definitely not as rich as the - - gun
 

00:29:39.470 --> 00:29:41.260
definitely not as rich as the - - gun
but it provides some information and

00:29:41.260 --> 00:29:41.270
but it provides some information and
 

00:29:41.270 --> 00:29:44.590
but it provides some information and
remains local you can combine it with -

00:29:44.590 --> 00:29:44.600
remains local you can combine it with -
 

00:29:44.600 --> 00:29:47.620
remains local you can combine it with -
- info which gives you information on

00:29:47.620 --> 00:29:47.630
- info which gives you information on
 

00:29:47.630 --> 00:29:53.710
- info which gives you information on
why a given task right another tip which

00:29:53.710 --> 00:29:53.720
why a given task right another tip which
 

00:29:53.720 --> 00:29:56.110
why a given task right another tip which
is more of a continuous request is to

00:29:56.110 --> 00:29:56.120
is more of a continuous request is to
 

00:29:56.120 --> 00:29:59.920
is more of a continuous request is to
file bug we really try to tests oliver

00:29:59.920 --> 00:29:59.930
file bug we really try to tests oliver
 

00:29:59.930 --> 00:30:02.650
file bug we really try to tests oliver
releases on as many environment and use

00:30:02.650 --> 00:30:02.660
releases on as many environment and use
 

00:30:02.660 --> 00:30:04.660
releases on as many environment and use
cases that we can can but there's always

00:30:04.660 --> 00:30:04.670
cases that we can can but there's always
 

00:30:04.670 --> 00:30:06.070
cases that we can can but there's always
edge cases and different configurations

00:30:06.070 --> 00:30:06.080
edge cases and different configurations
 

00:30:06.080 --> 00:30:09.670
edge cases and different configurations
out there so please file bugs when you

00:30:09.670 --> 00:30:09.680
out there so please file bugs when you
 

00:30:09.680 --> 00:30:12.160
out there so please file bugs when you
encounter issues and when you do file

00:30:12.160 --> 00:30:12.170
encounter issues and when you do file
 

00:30:12.170 --> 00:30:15.520
encounter issues and when you do file
about please include an scan with it it

00:30:15.520 --> 00:30:15.530
about please include an scan with it it
 

00:30:15.530 --> 00:30:18.850
about please include an scan with it it
really helped us deep go deeper into the

00:30:18.850 --> 00:30:18.860
really helped us deep go deeper into the
 

00:30:18.860 --> 00:30:23.100
really helped us deep go deeper into the
issue and understand what's going on

00:30:23.100 --> 00:30:23.110
 

00:30:23.110 --> 00:30:26.140
last but not least if you're writing

00:30:26.140 --> 00:30:26.150
last but not least if you're writing
 

00:30:26.150 --> 00:30:29.170
last but not least if you're writing
plug-ins whether it's for you to publish

00:30:29.170 --> 00:30:29.180
plug-ins whether it's for you to publish
 

00:30:29.180 --> 00:30:30.640
plug-ins whether it's for you to publish
them or it's just or even just

00:30:30.640 --> 00:30:30.650
them or it's just or even just
 

00:30:30.650 --> 00:30:32.680
them or it's just or even just
customized a little bit your build file

00:30:32.680 --> 00:30:32.690
customized a little bit your build file
 

00:30:32.690 --> 00:30:36.880
customized a little bit your build file
here is a set of tips to follow so first

00:30:36.880 --> 00:30:36.890
here is a set of tips to follow so first
 

00:30:36.890 --> 00:30:40.750
here is a set of tips to follow so first
as jerome alluded to configuration is

00:30:40.750 --> 00:30:40.760
as jerome alluded to configuration is
 

00:30:40.760 --> 00:30:43.120
as jerome alluded to configuration is
really just to set up tasks not really

00:30:43.120 --> 00:30:43.130
really just to set up tasks not really
 

00:30:43.130 --> 00:30:45.850
really just to set up tasks not really
do anything else and as when as was

00:30:45.850 --> 00:30:45.860
do anything else and as when as was
 

00:30:45.860 --> 00:30:47.500
do anything else and as when as was
mentioned earlier remember if you need

00:30:47.500 --> 00:30:47.510
mentioned earlier remember if you need
 

00:30:47.510 --> 00:30:49.660
mentioned earlier remember if you need
to compute things for up-to-date shaykhs

00:30:49.660 --> 00:30:49.670
to compute things for up-to-date shaykhs
 

00:30:49.670 --> 00:30:51.880
to compute things for up-to-date shaykhs
checks you can always use provider and

00:30:51.880 --> 00:30:51.890
checks you can always use provider and
 

00:30:51.890 --> 00:30:54.070
checks you can always use provider and
suppliers to only run those checks if

00:30:54.070 --> 00:30:54.080
suppliers to only run those checks if
 

00:30:54.080 --> 00:30:57.240
suppliers to only run those checks if
your task is part of the active graph

00:30:57.240 --> 00:30:57.250
your task is part of the active graph
 

00:30:57.250 --> 00:31:01.480
your task is part of the active graph
for example in configuration you should

00:31:01.480 --> 00:31:01.490
for example in configuration you should
 

00:31:01.490 --> 00:31:05.680
for example in configuration you should
not do things like query get read a file

00:31:05.680 --> 00:31:05.690
not do things like query get read a file
 

00:31:05.690 --> 00:31:08.560
not do things like query get read a file
search for a connected device or compute

00:31:08.560 --> 00:31:08.570
search for a connected device or compute
 

00:31:08.570 --> 00:31:09.720
search for a connected device or compute
anything

00:31:09.720 --> 00:31:09.730
anything
 

00:31:09.730 --> 00:31:11.980
anything
configuration is really just a place to

00:31:11.980 --> 00:31:11.990
configuration is really just a place to
 

00:31:11.990 --> 00:31:14.680
configuration is really just a place to
set up tasks and it's the place to set

00:31:14.680 --> 00:31:14.690
set up tasks and it's the place to set
 

00:31:14.690 --> 00:31:18.280
set up tasks and it's the place to set
up old tasks because bill doesn't really

00:31:18.280 --> 00:31:18.290
up old tasks because bill doesn't really
 

00:31:18.290 --> 00:31:20.049
up old tasks because bill doesn't really
know what pass is gonna take in advance

00:31:20.049 --> 00:31:20.059
know what pass is gonna take in advance
 

00:31:20.059 --> 00:31:21.640
know what pass is gonna take in advance
so really try to set up all of your

00:31:21.640 --> 00:31:21.650
so really try to set up all of your
 

00:31:21.650 --> 00:31:25.500
so really try to set up all of your
tasks in the configuration step

00:31:25.500 --> 00:31:25.510
 

00:31:25.510 --> 00:31:28.990
regarding tasks make sure that each

00:31:28.990 --> 00:31:29.000
regarding tasks make sure that each
 

00:31:29.000 --> 00:31:32.200
regarding tasks make sure that each
tasks declare declare all input and

00:31:32.200 --> 00:31:32.210
tasks declare declare all input and
 

00:31:32.210 --> 00:31:34.780
tasks declare declare all input and
outputs even if it's non file ones and

00:31:34.780 --> 00:31:34.790
outputs even if it's non file ones and
 

00:31:34.790 --> 00:31:36.549
outputs even if it's non file ones and
make sure that their incremental and

00:31:36.549 --> 00:31:36.559
make sure that their incremental and
 

00:31:36.559 --> 00:31:40.840
make sure that their incremental and
cacheable if you're working with a

00:31:40.840 --> 00:31:40.850
cacheable if you're working with a
 

00:31:40.850 --> 00:31:44.230
cacheable if you're working with a
complex step try to split it into

00:31:44.230 --> 00:31:44.240
complex step try to split it into
 

00:31:44.240 --> 00:31:46.930
complex step try to split it into
multiple tasks this really helped with

00:31:46.930 --> 00:31:46.940
multiple tasks this really helped with
 

00:31:46.940 --> 00:31:48.820
multiple tasks this really helped with
the increment allottee because some

00:31:48.820 --> 00:31:48.830
the increment allottee because some
 

00:31:48.830 --> 00:31:51.580
the increment allottee because some
tasks could be up to date what other do

00:31:51.580 --> 00:31:51.590
tasks could be up to date what other do
 

00:31:51.590 --> 00:31:53.530
tasks could be up to date what other do
work and if you have multiple tasks they

00:31:53.530 --> 00:31:53.540
work and if you have multiple tasks they
 

00:31:53.540 --> 00:31:55.780
work and if you have multiple tasks they
could run in parallel so it helps with

00:31:55.780 --> 00:31:55.790
could run in parallel so it helps with
 

00:31:55.790 --> 00:32:01.630
could run in parallel so it helps with
incrementality and parallelism a third

00:32:01.630 --> 00:32:01.640
incrementality and parallelism a third
 

00:32:01.640 --> 00:32:04.090
incrementality and parallelism a third
best practice sounds obvious but I still

00:32:04.090 --> 00:32:04.100
best practice sounds obvious but I still
 

00:32:04.100 --> 00:32:05.980
best practice sounds obvious but I still
want to put it out there just make sure

00:32:05.980 --> 00:32:05.990
want to put it out there just make sure
 

00:32:05.990 --> 00:32:07.750
want to put it out there just make sure
your tasks don't write into or delete

00:32:07.750 --> 00:32:07.760
your tasks don't write into or delete
 

00:32:07.760 --> 00:32:13.900
your tasks don't write into or delete
any other task output when you rent at

00:32:13.900 --> 00:32:13.910
any other task output when you rent at
 

00:32:13.910 --> 00:32:15.909
any other task output when you rent at
Trask live I'm sorry when you write

00:32:15.909 --> 00:32:15.919
Trask live I'm sorry when you write
 

00:32:15.919 --> 00:32:18.460
Trask live I'm sorry when you write
tasks use Java and Kotlin instead of

00:32:18.460 --> 00:32:18.470
tasks use Java and Kotlin instead of
 

00:32:18.470 --> 00:32:20.830
tasks use Java and Kotlin instead of
groovy and put them in a plugin slash

00:32:20.830 --> 00:32:20.840
groovy and put them in a plugin slash
 

00:32:20.840 --> 00:32:26.409
groovy and put them in a plugin slash
build SRC file folder and last but not

00:32:26.409 --> 00:32:26.419
build SRC file folder and last but not
 

00:32:26.419 --> 00:32:27.900
build SRC file folder and last but not
least as you've heard from jerome

00:32:27.900 --> 00:32:27.910
least as you've heard from jerome
 

00:32:27.910 --> 00:32:31.330
least as you've heard from jerome
leverage the new worker api why we

00:32:31.330 --> 00:32:31.340
leverage the new worker api why we
 

00:32:31.340 --> 00:32:33.250
leverage the new worker api why we
didn't talk about this no but leverage

00:32:33.250 --> 00:32:33.260
didn't talk about this no but leverage
 

00:32:33.260 --> 00:32:35.140
didn't talk about this no but leverage
the new worker api i did talk about that

00:32:35.140 --> 00:32:35.150
the new worker api i did talk about that
 

00:32:35.150 --> 00:32:38.530
the new worker api i did talk about that
and stuff yeah that really helps with

00:32:38.530 --> 00:32:38.540
and stuff yeah that really helps with
 

00:32:38.540 --> 00:32:42.010
and stuff yeah that really helps with
proble ism alright if you didn't get

00:32:42.010 --> 00:32:42.020
proble ism alright if you didn't get
 

00:32:42.020 --> 00:32:44.590
proble ism alright if you didn't get
clear pictures of all of what I just

00:32:44.590 --> 00:32:44.600
clear pictures of all of what I just
 

00:32:44.600 --> 00:32:47.890
clear pictures of all of what I just
said don't worry we're working on a full

00:32:47.890 --> 00:32:47.900
said don't worry we're working on a full
 

00:32:47.900 --> 00:32:49.900
said don't worry we're working on a full
write-up covering everything that we

00:32:49.900 --> 00:32:49.910
write-up covering everything that we
 

00:32:49.910 --> 00:32:52.030
write-up covering everything that we
talked about around speed around the

00:32:52.030 --> 00:32:52.040
talked about around speed around the
 

00:32:52.040 --> 00:32:53.620
talked about around speed around the
findings that I shared the tooling the

00:32:53.620 --> 00:32:53.630
findings that I shared the tooling the
 

00:32:53.630 --> 00:32:59.169
findings that I shared the tooling the
best practices and more so stay tuned to

00:32:59.169 --> 00:32:59.179
best practices and more so stay tuned to
 

00:32:59.179 --> 00:33:02.110
best practices and more so stay tuned to
recap here's the takeaway from this

00:33:02.110 --> 00:33:02.120
recap here's the takeaway from this
 

00:33:02.120 --> 00:33:05.770
recap here's the takeaway from this
session first which we shared some

00:33:05.770 --> 00:33:05.780
session first which we shared some
 

00:33:05.780 --> 00:33:07.780
session first which we shared some
finding on speed and that we're

00:33:07.780 --> 00:33:07.790
finding on speed and that we're
 

00:33:07.790 --> 00:33:10.120
finding on speed and that we're
basically a little bit outpaced by some

00:33:10.120 --> 00:33:10.130
basically a little bit outpaced by some
 

00:33:10.130 --> 00:33:12.159
basically a little bit outpaced by some
of the features the plugins and all the

00:33:12.159 --> 00:33:12.169
of the features the plugins and all the
 

00:33:12.169 --> 00:33:13.480
of the features the plugins and all the
other things that are impacting build

00:33:13.480 --> 00:33:13.490
other things that are impacting build
 

00:33:13.490 --> 00:33:14.500
other things that are impacting build
speed but we're taking this very

00:33:14.500 --> 00:33:14.510
speed but we're taking this very
 

00:33:14.510 --> 00:33:17.470
speed but we're taking this very
seriously and so we're doubling down our

00:33:17.470 --> 00:33:17.480
seriously and so we're doubling down our
 

00:33:17.480 --> 00:33:19.630
seriously and so we're doubling down our
effort on better tooling and attribution

00:33:19.630 --> 00:33:19.640
effort on better tooling and attribution
 

00:33:19.640 --> 00:33:21.789
effort on better tooling and attribution
that you heard as well as continuing to

00:33:21.789 --> 00:33:21.799
that you heard as well as continuing to
 

00:33:21.799 --> 00:33:23.600
that you heard as well as continuing to
improve performance

00:33:23.600 --> 00:33:23.610
improve performance
 

00:33:23.610 --> 00:33:27.840
improve performance
we share the new features in 3d - and I

00:33:27.840 --> 00:33:27.850
we share the new features in 3d - and I
 

00:33:27.850 --> 00:33:29.730
we share the new features in 3d - and I
definitely encourage you to upgrade to

00:33:29.730 --> 00:33:29.740
definitely encourage you to upgrade to
 

00:33:29.740 --> 00:33:32.850
definitely encourage you to upgrade to
3.2 if you haven't already and we

00:33:32.850 --> 00:33:32.860
3.2 if you haven't already and we
 

00:33:32.860 --> 00:33:34.020
3.2 if you haven't already and we
mentioned some of the things that were

00:33:34.020 --> 00:33:34.030
mentioned some of the things that were
 

00:33:34.030 --> 00:33:36.390
mentioned some of the things that were
working for 3.3 and beyond and by the

00:33:36.390 --> 00:33:36.400
working for 3.3 and beyond and by the
 

00:33:36.400 --> 00:33:40.740
working for 3.3 and beyond and by the
way 3 beta is available so I encourage

00:33:40.740 --> 00:33:40.750
way 3 beta is available so I encourage
 

00:33:40.750 --> 00:33:42.690
way 3 beta is available so I encourage
you to try it it has all some of the

00:33:42.690 --> 00:33:42.700
you to try it it has all some of the
 

00:33:42.700 --> 00:33:44.150
you to try it it has all some of the
things that we mentioned like lazy tasks

00:33:44.150 --> 00:33:44.160
things that we mentioned like lazy tasks
 

00:33:44.160 --> 00:33:51.030
things that we mentioned like lazy tasks
and others and last I talked about some

00:33:51.030 --> 00:33:51.040
and others and last I talked about some
 

00:33:51.040 --> 00:33:53.340
and others and last I talked about some
of the tools that he can use - - can - -

00:33:53.340 --> 00:33:53.350
of the tools that he can use - - can - -
 

00:33:53.350 --> 00:33:55.980
of the tools that he can use - - can - -
profile today to understand your bill

00:33:55.980 --> 00:33:55.990
profile today to understand your bill
 

00:33:55.990 --> 00:33:57.960
profile today to understand your bill
and share some of the best practice if

00:33:57.960 --> 00:33:57.970
and share some of the best practice if
 

00:33:57.970 --> 00:33:59.520
and share some of the best practice if
you're writing plug-ins or customizing

00:33:59.520 --> 00:33:59.530
you're writing plug-ins or customizing
 

00:33:59.530 --> 00:34:03.840
you're writing plug-ins or customizing
your build speed that's it for today I

00:34:03.840 --> 00:34:03.850
your build speed that's it for today I
 

00:34:03.850 --> 00:34:06.180
your build speed that's it for today I
want to make a bad joke but unlike Biel

00:34:06.180 --> 00:34:06.190
want to make a bad joke but unlike Biel
 

00:34:06.190 --> 00:34:07.950
want to make a bad joke but unlike Biel
that we finished earlier than expected

00:34:07.950 --> 00:34:07.960
that we finished earlier than expected
 

00:34:07.960 --> 00:34:09.950
that we finished earlier than expected
so

00:34:09.950 --> 00:34:09.960
so
 

00:34:09.960 --> 00:34:26.039
so
[Music]

