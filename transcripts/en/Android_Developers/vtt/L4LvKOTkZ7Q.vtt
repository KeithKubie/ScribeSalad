WEBVTT
Kind: captions
Language: en

00:00:01.317 --> 00:00:02.150
WAYNE PIEKARSKI: Hi.

00:00:02.150 --> 00:00:03.524
My name is Wayne
Piekarski, and I

00:00:03.524 --> 00:00:05.680
work as a developer
advocate at Google.

00:00:05.680 --> 00:00:07.670
Today I'm going to
talk about Android Wear

00:00:07.670 --> 00:00:11.880
and how you can take advantage
of stacking notifications.

00:00:11.880 --> 00:00:14.870
Existing notifications,
such as inbox style or those

00:00:14.870 --> 00:00:16.784
that use similar
summary information,

00:00:16.784 --> 00:00:18.950
can be easily modified with
just a few small changes

00:00:18.950 --> 00:00:20.320
to your code.

00:00:20.320 --> 00:00:22.350
This allows you to show
additional information

00:00:22.350 --> 00:00:26.220
on a wearable device
that's easily glancable.

00:00:26.220 --> 00:00:28.210
These notifications
will appear as a stack

00:00:28.210 --> 00:00:30.480
on the wearable, allowing
the user to view and take

00:00:30.480 --> 00:00:32.210
actions on each
one individually,

00:00:32.210 --> 00:00:36.260
or without having to pull
your phone out of your pocket.

00:00:36.260 --> 00:00:39.080
Before we get started, make sure
you viewed the previous videos

00:00:39.080 --> 00:00:41.090
introducing development
of Android Wear.

00:00:41.090 --> 00:00:42.790
There's more
information and access

00:00:42.790 --> 00:00:45.240
to the developer preview
available from our website

00:00:45.240 --> 00:00:46.710
here.

00:00:46.710 --> 00:00:48.690
So now, I'm going to
work through an example

00:00:48.690 --> 00:00:51.310
of a simple messaging
system for your pets.

00:00:51.310 --> 00:00:55.190
So these are my two awesome
dogs, Mila and Dillon here,

00:00:55.190 --> 00:00:57.242
and they're going to be
starring in this video.

00:00:57.242 --> 00:00:59.200
So let's say the dogs
are wearing smart collars

00:00:59.200 --> 00:01:02.860
during the day which can
send notifications to you.

00:01:02.860 --> 00:01:05.370
On the phone, the notifications
are shown together

00:01:05.370 --> 00:01:08.640
with the total number showing in
the phone's notification area.

00:01:08.640 --> 00:01:10.410
When you click on
the notification,

00:01:10.410 --> 00:01:14.210
this brings up the application
to show all the details.

00:01:14.210 --> 00:01:15.900
On a wearable, it
would be really cool

00:01:15.900 --> 00:01:18.430
if we could look at each one
separately and perhaps take

00:01:18.430 --> 00:01:21.220
some specific action or
ignore it until later.

00:01:21.220 --> 00:01:24.670
Then there's no need to pull
the phone out of our pocket.

00:01:24.670 --> 00:01:27.040
So in this demo, you
can see both the phone

00:01:27.040 --> 00:01:29.270
and a wearable emulator
running together.

00:01:29.270 --> 00:01:31.920
On the phone, a
notification is showing.

00:01:31.920 --> 00:01:33.630
And on the wearable,
you can see there's

00:01:33.630 --> 00:01:37.870
a stack notification made
up from multiple events.

00:01:37.870 --> 00:01:39.750
You can touch the
notification and it

00:01:39.750 --> 00:01:41.960
will expand into
separate messages.

00:01:41.960 --> 00:01:44.030
You can touch the
specific notification

00:01:44.030 --> 00:01:47.030
and then swipe it to the
side to see possible actions.

00:01:47.030 --> 00:01:49.430
And when you use an
action, that notification

00:01:49.430 --> 00:01:51.520
will be dismissed, if
it's been specified

00:01:51.520 --> 00:01:53.030
to do that in your code.

00:01:53.030 --> 00:01:54.880
You can then take
a similar action

00:01:54.880 --> 00:01:56.702
on any remaining notifications.

00:01:56.702 --> 00:01:59.160
And remember, this can all be
done while your phone remains

00:01:59.160 --> 00:02:03.252
in your pocket by interacting
with your wearable device.

00:02:03.252 --> 00:02:04.710
So let's work
through the code that

00:02:04.710 --> 00:02:06.509
was used to create this example.

00:02:06.509 --> 00:02:08.509
Firstly, this is the code
that you would already

00:02:08.509 --> 00:02:10.539
be using to create a
notification appearing

00:02:10.539 --> 00:02:11.520
on your phone.

00:02:11.520 --> 00:02:14.235
One of the nice things
about the Android Wear API

00:02:14.235 --> 00:02:17.760
is that it leverages much
of your existing code.

00:02:17.760 --> 00:02:21.310
Now, we create a notification
that uses a group key string.

00:02:21.310 --> 00:02:24.050
This is a global identifier
that Android uses to know,

00:02:24.050 --> 00:02:26.020
which notification should
be grouped together

00:02:26.020 --> 00:02:26.880
on the wearable.

00:02:26.880 --> 00:02:29.440
It can be any string
that you want.

00:02:29.440 --> 00:02:31.020
This is the first
notification that

00:02:31.020 --> 00:02:32.510
will appear on the wearable.

00:02:32.510 --> 00:02:35.450
You start off by creating the
intent and the pending intent

00:02:35.450 --> 00:02:37.219
with whatever result you want.

00:02:37.219 --> 00:02:38.760
This is exactly the
same as you would

00:02:38.760 --> 00:02:41.970
do for your existing
notifications.

00:02:41.970 --> 00:02:44.610
You then create the notification
with the specific details

00:02:44.610 --> 00:02:46.550
of the message, in
exactly the same way

00:02:46.550 --> 00:02:48.930
that you would have done
it with your existing code.

00:02:48.930 --> 00:02:50.530
Note that this
notification is never

00:02:50.530 --> 00:02:53.370
meant to appear on the
phone, only on the wearable.

00:02:53.370 --> 00:02:55.050
And we use the
code of said action

00:02:55.050 --> 00:02:57.930
to indicate an intent for
when an action icon is

00:02:57.930 --> 00:03:00.502
touched on the wearable display.

00:03:00.502 --> 00:03:03.250
You then need to build a
notification for the wearable

00:03:03.250 --> 00:03:06.540
with a code of setGroup, which
puts it in the group specified

00:03:06.540 --> 00:03:09.750
previously with the
string constant.

00:03:09.750 --> 00:03:12.470
This is the second notification
that appears on the wearable.

00:03:12.470 --> 00:03:14.810
The code's basically the
same except the message text

00:03:14.810 --> 00:03:16.890
and the action are different.

00:03:16.890 --> 00:03:18.840
And finally, we issue
the notifications

00:03:18.840 --> 00:03:22.160
to Android so they appear on
the phone and the wearable.

00:03:22.160 --> 00:03:25.190
We issue all three of them
separately with unique ID

00:03:25.190 --> 00:03:27.260
numbers.

00:03:27.260 --> 00:03:29.970
This part of the code issues
the group notification appearing

00:03:29.970 --> 00:03:31.990
on the phone and
would probably already

00:03:31.990 --> 00:03:34.330
be in your existing code.

00:03:34.330 --> 00:03:37.020
Make sure you use a
NotificationManagerCompat

00:03:37.020 --> 00:03:38.570
instead of the
notificationManager

00:03:38.570 --> 00:03:42.270
from the framework when you're
dealing with wearable devices.

00:03:42.270 --> 00:03:44.080
And now, we can issue
the notifications

00:03:44.080 --> 00:03:45.490
for the wearable device.

00:03:45.490 --> 00:03:46.250
And that's it.

00:03:46.250 --> 00:03:48.510
We're done with this example.

00:03:48.510 --> 00:03:51.190
So you can see how easy it
is to add stack notifications

00:03:51.190 --> 00:03:52.590
to your applications.

00:03:52.590 --> 00:03:55.467
Most of your code and APIs
used remains the same,

00:03:55.467 --> 00:03:57.050
and you can just add
a little bit more

00:03:57.050 --> 00:03:58.700
to specify the grouping.

00:03:58.700 --> 00:04:01.110
You can use stacks in
any application that

00:04:01.110 --> 00:04:03.420
might generate many
notifications that you'd

00:04:03.420 --> 00:04:04.510
want to group together.

00:04:04.510 --> 00:04:06.790
So some examples could
be an email client,

00:04:06.790 --> 00:04:10.590
an instant messaging
application, and so forth.

00:04:10.590 --> 00:04:12.340
There are so many other
cool possibilities

00:04:12.340 --> 00:04:13.339
of what you can do here.

00:04:13.339 --> 00:04:15.640
This is really just the start
of what I've shown here.

00:04:15.640 --> 00:04:17.680
Android Wear is really
exciting new technology,

00:04:17.680 --> 00:04:20.370
that's going to allow all kinds
of really neat applications

00:04:20.370 --> 00:04:22.660
from developers just like you.

00:04:22.660 --> 00:04:26.040
So you can find out more about
Android Wear, and the developer

00:04:26.040 --> 00:04:28.510
preview, by visiting
our website.

00:04:28.510 --> 00:04:31.470
You should also join our Google+
community and share your ideas

00:04:31.470 --> 00:04:33.095
with everyone there.

00:04:33.095 --> 00:04:35.220
I'm Wayne Piekarski, and
I'm really looking forward

00:04:35.220 --> 00:04:37.670
to seeing what kinds of awesome
ideas you'll come up with.

00:04:37.670 --> 00:04:38.900
So thanks for watching.

00:04:38.900 --> 00:04:40.739
And I'll see you next time.

