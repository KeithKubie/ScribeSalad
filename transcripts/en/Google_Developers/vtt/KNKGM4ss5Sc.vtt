WEBVTT
Kind: captions
Language: en

00:00:00.710 --> 00:00:02.100
FABIAN TAMP: Hi, I'm Fabian.

00:00:02.100 --> 00:00:05.107
I'm a software engineer on the
Android and Google Maps teams.

00:00:05.107 --> 00:00:06.940
My team's been working
on getting the Google

00:00:06.940 --> 00:00:09.230
Apps that you know and
love into your car.

00:00:09.230 --> 00:00:11.070
And we're really excited
about Android Auto,

00:00:11.070 --> 00:00:13.403
because it combines the best
of the hardware in your car

00:00:13.403 --> 00:00:14.990
with the upgradability,
connectivity,

00:00:14.990 --> 00:00:17.590
and personalization of
your Android smartphone.

00:00:17.590 --> 00:00:19.677
Your car is by far the
most complicated accessory

00:00:19.677 --> 00:00:21.510
that we've ever attached
to an Android phone

00:00:21.510 --> 00:00:23.410
before, with a vast
number of sensors

00:00:23.410 --> 00:00:26.360
and some serious
audiovisual capabilities.

00:00:26.360 --> 00:00:28.410
Let's start with the
Android Auto protocol,

00:00:28.410 --> 00:00:30.610
which enables your
phone to talk to a car.

00:00:30.610 --> 00:00:32.590
One of the biggest features
of the architecture

00:00:32.590 --> 00:00:34.800
is that Android apps and
services run entirely

00:00:34.800 --> 00:00:37.770
on your phone whilst being
controlled using your car.

00:00:37.770 --> 00:00:39.800
We run the applications
into a compressed video

00:00:39.800 --> 00:00:41.410
stream and audio
streams and send them

00:00:41.410 --> 00:00:42.900
across to the head unit.

00:00:42.900 --> 00:00:44.624
Typically, cars
are kept for longer

00:00:44.624 --> 00:00:47.040
and get software updates less
frequently than smartphones.

00:00:47.040 --> 00:00:48.940
So by shifting the
processing and rendering over

00:00:48.940 --> 00:00:51.000
to the phone, we can take
advantage of the latest

00:00:51.000 --> 00:00:53.820
mobile technology and keep
your Android Auto experience

00:00:53.820 --> 00:00:56.570
up-to-date over the
life of your car.

00:00:56.570 --> 00:00:59.150
We wanted to make the Android
Auto protocol easy to integrate

00:00:59.150 --> 00:01:01.650
with cars, so we provide
manufacturers with a portable

00:01:01.650 --> 00:01:04.290
C++ library that runs
on Linux, Android,

00:01:04.290 --> 00:01:06.950
and QNX within the
car's head unit.

00:01:06.950 --> 00:01:09.275
The core metaphor that the
Android Auto protocol uses

00:01:09.275 --> 00:01:11.022
is [? one ?] to
prioritize channels.

00:01:11.022 --> 00:01:13.230
Different channels are open
for the different aspects

00:01:13.230 --> 00:01:15.438
of your car that the phone
needs to communicate with.

00:01:15.438 --> 00:01:18.050
Channels are open for audio,
for display data, user input

00:01:18.050 --> 00:01:20.785
and location data, like
GPS and wheel speed.

00:01:20.785 --> 00:01:22.160
These channels
multiplex together

00:01:22.160 --> 00:01:23.980
over the USB
connection, which allows

00:01:23.980 --> 00:01:25.940
us to give priority to
the channels that affect

00:01:25.940 --> 00:01:27.390
the experience the most.

00:01:27.390 --> 00:01:30.150
We've built this protocol on top
of the Android Open Accessory

00:01:30.150 --> 00:01:32.520
protocol, but designed it
to be transport agnostic.

00:01:32.520 --> 00:01:34.730
So we can open it up to
other forms of connectivity,

00:01:34.730 --> 00:01:37.290
such as Wi-Fi Direct,
in the future.

00:01:37.290 --> 00:01:40.570
To format data, we use
protocol buffers extensively.

00:01:40.570 --> 00:01:42.890
Protocol buffers are an open
source Google technology

00:01:42.890 --> 00:01:45.015
that makes it really
convenient to add new features

00:01:45.015 --> 00:01:48.020
in the future whilst retaining
backwards compatibility.

00:01:48.020 --> 00:01:49.670
A key design goal
for us was to make

00:01:49.670 --> 00:01:52.740
Android Auto feel like it fits
in with the rest of your car.

00:01:52.740 --> 00:01:54.290
In version one,
we've got support

00:01:54.290 --> 00:01:56.770
for different input methods,
specifically for touch screens

00:01:56.770 --> 00:01:59.390
and for hard rotary
controllers, in a similar way

00:01:59.390 --> 00:02:01.870
to how the standard Android
UI supports both touch

00:02:01.870 --> 00:02:03.075
and controller modes.

00:02:03.075 --> 00:02:04.870
We're also supporting
turn instructions

00:02:04.870 --> 00:02:07.520
on instrument clusters that
can display them and integrate

00:02:07.520 --> 00:02:09.186
with the buttons on
your steering wheel,

00:02:09.186 --> 00:02:10.590
where they're available.

00:02:10.590 --> 00:02:13.120
We also support routing
audio to different speakers

00:02:13.120 --> 00:02:15.170
within the car, based
on the type of audio.

00:02:15.170 --> 00:02:17.240
For example, navigation
instructions in Google

00:02:17.240 --> 00:02:19.440
Now can be targeted
just to the driver,

00:02:19.440 --> 00:02:22.290
whilst music gets played over
all the speakers in the car.

00:02:22.290 --> 00:02:24.220
There's invariably going to
be times when you're listening

00:02:24.220 --> 00:02:26.680
to the radio and want to ask
Google Now to read a message,

00:02:26.680 --> 00:02:27.240
for example.

00:02:27.240 --> 00:02:29.860
So the car and the phone
negotiate audio focus

00:02:29.860 --> 00:02:33.100
in a similar way to how apps
negotiate on an Android phone.

00:02:33.100 --> 00:02:35.600
The car has the ultimate say
on when Android Auto is visible

00:02:35.600 --> 00:02:37.280
or playing audio,
so it can ensure

00:02:37.280 --> 00:02:38.800
that safety critical
notifications

00:02:38.800 --> 00:02:42.450
and the reversing camera,
for example, get priority.

00:02:42.450 --> 00:02:44.900
On the phone side, we're
building the Android Auto code

00:02:44.900 --> 00:02:47.120
into Google Play services,
so your experience

00:02:47.120 --> 00:02:48.630
can be kept up-to-date.

00:02:48.630 --> 00:02:51.510
The Android Auto system uses
the Android virtual display API

00:02:51.510 --> 00:02:52.390
extensively.

00:02:52.390 --> 00:02:55.520
Let's dive in and take a
look at the rendering system.

00:02:55.520 --> 00:02:58.430
In Android Auto, rendering
occurs across app process

00:02:58.430 --> 00:03:00.920
boundaries onto a common
surface for the car screen.

00:03:00.920 --> 00:03:03.110
We use XML to define
a layout of windows

00:03:03.110 --> 00:03:04.580
to be rendered by
different apps.

00:03:04.580 --> 00:03:06.080
There is a window
for the navigation

00:03:06.080 --> 00:03:08.790
rail, for the main content
area, for the notification area,

00:03:08.790 --> 00:03:10.710
and one for the
search space as well.

00:03:10.710 --> 00:03:12.110
Each of these
windows is actually

00:03:12.110 --> 00:03:14.570
an android.view.TextureView.

00:03:14.570 --> 00:03:17.130
The Android Auto service
takes the TextureViews back

00:03:17.130 --> 00:03:19.730
into SurfaceTexture, wraps
it in a surface object,

00:03:19.730 --> 00:03:22.150
and passes it to the client
process over a [? binary ?]

00:03:22.150 --> 00:03:22.950
interface.

00:03:22.950 --> 00:03:25.340
Within the client library,
a private virtual display

00:03:25.340 --> 00:03:27.680
is created from that surface,
and the applications UI

00:03:27.680 --> 00:03:30.070
is inflated into
the virtual display.

00:03:30.070 --> 00:03:32.750
We then render the XML layout
to compress frames using

00:03:32.750 --> 00:03:35.670
another virtual display, backed
by the phone's hardware video

00:03:35.670 --> 00:03:38.720
encoder, and send the
output to the head unit.

00:03:38.720 --> 00:03:41.060
There's two core principles
behind this architecture.

00:03:41.060 --> 00:03:42.740
The first is flexibility.

00:03:42.740 --> 00:03:44.590
Using TextureViews
in an XML layout

00:03:44.590 --> 00:03:46.742
allows us to lay out
the windows arbitrarily.

00:03:46.742 --> 00:03:49.200
That means we can take advantage
of the full Android layout

00:03:49.200 --> 00:03:51.190
system, including animations.

00:03:51.190 --> 00:03:53.427
The second is security
and stability.

00:03:53.427 --> 00:03:55.510
By keeping clients rendering
in their own process,

00:03:55.510 --> 00:03:58.270
we can isolate problems from the
rest of the system and ensure

00:03:58.270 --> 00:04:01.780
the apps don't have access to
any data that they shouldn't.

00:04:01.780 --> 00:04:04.327
Also, we want to make sure
that existing apps on the phone

00:04:04.327 --> 00:04:06.660
can take advantage of the
improved location signals that

00:04:06.660 --> 00:04:07.837
are available from the car.

00:04:07.837 --> 00:04:10.170
So we've rolled these signals
into Google Play Services'

00:04:10.170 --> 00:04:11.930
Fused Location Provider.

00:04:11.930 --> 00:04:14.670
The Fused Location Provider
combines the different location

00:04:14.670 --> 00:04:17.140
technologies available on
an Android smartphone--

00:04:17.140 --> 00:04:19.560
cellular signal,
Wi-Fi, and GPS--

00:04:19.560 --> 00:04:22.360
into a single high-level
API that allows developers

00:04:22.360 --> 00:04:25.360
to specify accuracy requirements
and update frequencies,

00:04:25.360 --> 00:04:28.140
instead of dealing with
individual location sources.

00:04:28.140 --> 00:04:30.010
By adding location
sources from the car,

00:04:30.010 --> 00:04:32.795
we're enhancing the accuracy
of location data using APIs

00:04:32.795 --> 00:04:34.890
that apps are already using.

00:04:34.890 --> 00:04:36.760
So now, I'm going to
talk to you about how

00:04:36.760 --> 00:04:38.900
we've used Android Auto
and the Google Maps app

00:04:38.900 --> 00:04:41.300
to enhance the
in-car experience.

00:04:41.300 --> 00:04:43.577
First of all, Google
Maps is so much easier

00:04:43.577 --> 00:04:45.910
to use for navigation when
it's on a large screen, front

00:04:45.910 --> 00:04:47.493
and center, instead
of on a tiny phone

00:04:47.493 --> 00:04:49.282
screen in a mount
on your dashboard.

00:04:49.282 --> 00:04:50.990
We've redesigned Maps
to work beautifully

00:04:50.990 --> 00:04:53.750
in a horizontal aspect ratio,
and optimized the UI for use

00:04:53.750 --> 00:04:56.650
in car-- for example, by
minimizing task completion

00:04:56.650 --> 00:04:59.190
times and making the
touch targets easy to hit.

00:04:59.190 --> 00:05:01.540
One of the biggest advantages
of automotive Google Maps

00:05:01.540 --> 00:05:03.860
is that using the Fused
Location Provider,

00:05:03.860 --> 00:05:06.395
we can use the GPS data from
your car, which vastly improves

00:05:06.395 --> 00:05:09.260
the location quality when
city driving, for example.

00:05:09.260 --> 00:05:11.840
We can also use your car's
compass, gyroscopes, wheel

00:05:11.840 --> 00:05:13.880
speed, and other positioning
sensors to work out

00:05:13.880 --> 00:05:16.030
which way you're facing,
and exactly how far you've

00:05:16.030 --> 00:05:17.500
traveled through that tunnel.

00:05:17.500 --> 00:05:19.870
All of this allows us to
give you much more accurate

00:05:19.870 --> 00:05:22.640
driving directions to get you
to your destination with less

00:05:22.640 --> 00:05:23.910
hassle.

00:05:23.910 --> 00:05:26.080
So that's an overview
of how Android Auto uses

00:05:26.080 --> 00:05:28.340
the technology on your
Android phone and in your car

00:05:28.340 --> 00:05:30.707
together to create a
great driving experience.

00:05:30.707 --> 00:05:32.290
We're really excited
for the potential

00:05:32.290 --> 00:05:34.500
that Android Auto has to
make in-car entertainment

00:05:34.500 --> 00:05:37.720
and navigation more seamless,
connected, and safe.

00:05:37.720 --> 00:05:39.550
Thanks for watching.

