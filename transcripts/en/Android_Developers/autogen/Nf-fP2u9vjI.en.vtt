WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.930
MURAT YENER: With
Android Q, apps

00:00:01.930 --> 00:00:05.020
can offer a full edge-to-edge
screen experience,

00:00:05.020 --> 00:00:07.510
regardless of whether
gestures or buttons are

00:00:07.510 --> 00:00:10.550
enabled for navigation.

00:00:10.550 --> 00:00:13.310
All apps targeting
Q in the Play Store

00:00:13.310 --> 00:00:16.219
should move to implementing
an edge-to-edge experience

00:00:16.219 --> 00:00:19.160
by drawing app content
from the top screen

00:00:19.160 --> 00:00:21.410
edge to the bottom screen edge.

00:00:21.410 --> 00:00:23.390
The recommended
way to achieve this

00:00:23.390 --> 00:00:27.810
is to render the app content
under a transparent nav bar.

00:00:27.810 --> 00:00:31.260
In order to make your app render
content under the nav bar,

00:00:31.260 --> 00:00:34.710
start by making the
navigation bar transparent.

00:00:34.710 --> 00:00:37.560
You can also make the status
bar transparent to get

00:00:37.560 --> 00:00:39.970
the full height of the screen.

00:00:39.970 --> 00:00:43.640
You can do this by setting
your theme as shown here.

00:00:43.640 --> 00:00:47.510
For API 29, it's heavily
encouraged to implement this.

00:00:47.510 --> 00:00:49.400
And note that apps
can optionally

00:00:49.400 --> 00:00:52.400
do this before API 29.

00:00:52.400 --> 00:00:54.920
Alternatively, you can
make the navigation bar

00:00:54.920 --> 00:00:57.230
transparent
programmatically by setting

00:00:57.230 --> 00:01:02.340
navigation bar color and status
bar color on a window object.

00:01:02.340 --> 00:01:04.319
Starting with
Android Q, the system

00:01:04.319 --> 00:01:07.170
is responsible for providing
background protection

00:01:07.170 --> 00:01:10.350
of navbar elements, such
as buttons and bars,

00:01:10.350 --> 00:01:13.100
against app contents.

00:01:13.100 --> 00:01:15.260
On higher-end
devices, this means

00:01:15.260 --> 00:01:18.890
if an app requests a
transparent nav bar, the system

00:01:18.890 --> 00:01:21.680
will adjust the nav
bar's UI color based

00:01:21.680 --> 00:01:24.450
on the content drawn behind it.

00:01:24.450 --> 00:01:27.080
For example, if you
have a dark background,

00:01:27.080 --> 00:01:30.260
the system will
provide a light UI.

00:01:30.260 --> 00:01:32.460
On devices with
lower performance,

00:01:32.460 --> 00:01:35.780
the system is still responsible
for drawing a translucent nav

00:01:35.780 --> 00:01:36.770
bar.

00:01:36.770 --> 00:01:40.490
It draws a light or dark
screen behind the system UI

00:01:40.490 --> 00:01:44.090
depending on whether the app
requested light or dark system

00:01:44.090 --> 00:01:46.230
buttons in the nav bar.

00:01:46.230 --> 00:01:50.300
You also need to set the system
UI visibility flags to extend

00:01:50.300 --> 00:01:53.970
underneath the system bars so
your app can render content

00:01:53.970 --> 00:01:56.270
under the nav bar.

00:01:56.270 --> 00:01:59.390
The system UI visibility
APIs on the view objects

00:01:59.390 --> 00:02:02.390
allows a number of
flags to be set.

00:02:02.390 --> 00:02:05.570
The most common flags you will
use for edge-to-edge experience

00:02:05.570 --> 00:02:07.515
are shown here.

00:02:07.515 --> 00:02:10.160
When these flags are
specified together,

00:02:10.160 --> 00:02:11.720
you're telling the
system that you

00:02:11.720 --> 00:02:14.460
want your app to be
displayed full screen,

00:02:14.460 --> 00:02:18.110
as if the navigation and
status bars are not there.

00:02:18.110 --> 00:02:21.500
Set these flags on
onCreate, or at any point

00:02:21.500 --> 00:02:23.570
after that in the lifecycle.

00:02:23.570 --> 00:02:26.870
This lays out your
view from edge-to-edge.

00:02:26.870 --> 00:02:30.150
By the way, if your app
users coordinator layout,

00:02:30.150 --> 00:02:33.230
drawer layout, or a
similar layout, and sets

00:02:33.230 --> 00:02:37.370
fit system windows true,
then the LAYOUT_STABLE

00:02:37.370 --> 00:02:41.340
and LAYOUT_FULLSCREEN flags
are set automatically.

00:02:41.340 --> 00:02:46.820
However, those views do not set
the LAYOUT_HEIGHT_NAVIGATION

00:02:46.820 --> 00:02:48.000
flag.

00:02:48.000 --> 00:02:50.960
Now, just to be safe, you
can set all three flags

00:02:50.960 --> 00:02:52.530
all the time.

00:02:52.530 --> 00:02:55.580
Also, if you're already
setting a combination of flags

00:02:55.580 --> 00:02:59.090
on your layout, make sure you
don't wipe out your existing

00:02:59.090 --> 00:03:00.500
flags.

00:03:00.500 --> 00:03:03.560
For more details, watch the
"Becoming a Master Window

00:03:03.560 --> 00:03:06.690
Fitter" talk by Chris Baines,
which I linked in the notes

00:03:06.690 --> 00:03:07.880
below.

00:03:07.880 --> 00:03:08.990
And that's it.

00:03:08.990 --> 00:03:11.220
To ensure the best
user experience,

00:03:11.220 --> 00:03:15.080
make sure your app
offers an edge-to-edge.

00:03:15.080 --> 00:03:16.700
And watch the
gestural navigation

00:03:16.700 --> 00:03:19.940
Dev Bite to learn more
about gestural navigation

00:03:19.940 --> 00:03:23.210
and how to avoid conflicts
with the system home and back

00:03:23.210 --> 00:03:24.170
gestures.

00:03:24.170 --> 00:03:25.490
Thank you for watching.

00:03:25.490 --> 00:03:28.250
Don't forget to subscribe
to the channel for more

00:03:28.250 --> 00:03:29.960
awesome Android videos.

00:03:29.960 --> 00:03:30.710
See you next time.

00:03:30.710 --> 00:03:34.360
[MUSIC PLAYING]

