WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.365
 Android patterns for performance 

00:00:02.365 --> 00:00:05.850
 Do you know the fastest and most effective way to download specific content? 

00:00:05.850 --> 00:00:07.245
 Do not download it at all. 

00:00:07.245 --> 00:00:08.620
 My name is Colt McCannless. 

00:00:08.620 --> 00:00:10.140
 When it comes to network performance, 

00:00:10.140 --> 00:00:13.930
 The correct buffering of your network data is one of the most important performance gains 

00:00:13.930 --> 00:00:15.660
 Which you can create. 

00:00:15.660 --> 00:00:18.640
 Basically, reading data from your device is always faster 

00:00:18.640 --> 00:00:21.439
 From reading the same data from a network connection. 

00:00:21.439 --> 00:00:24.720
 If you notice that this data segment will be used multiple times, 

00:00:24.720 --> 00:00:27.280
 You'll see it makes sense to bring it from the network 

00:00:27.280 --> 00:00:28.890
 Then store it on the machine 

00:00:28.890 --> 00:00:31.870
 So future requests do not have to re-download the file. 

00:00:31.870 --> 00:00:33.710
 But there is a simple problem here. 

00:00:33.710 --> 00:00:36.914
 It is that the cache for HTTP responses 

00:00:36.914 --> 00:00:39.704
 Disabled by default for Android apps. 

00:00:39.704 --> 00:00:43.320
 This means that you've lost everything you've requested directly in your app 

00:00:43.320 --> 00:00:44.810
 After bringing it. 

00:00:44.810 --> 00:00:46.790
 It means running the cache 

00:00:46.790 --> 00:00:49.980
 Use the cache class for HTTP responses 

00:00:49.980 --> 00:00:53.310
 Which allows you to locate a device as a physical storage location for files 

00:00:53.310 --> 00:00:56.180
 As well as providing the maximum size for the scheduled cache. 

00:00:56.180 --> 00:01:00.270
 When enabled, all HTTP responses to your app will be stored 

00:01:00.270 --> 00:01:02.030
 On the file system. 

00:01:02.030 --> 00:01:05.510
 This applies to API interfaces, such as a URL connection 

00:01:05.510 --> 00:01:08.990
 HTTP URL connections and all the wonderful code parts 

00:01:08.990 --> 00:01:11.420
 Which you copy and paste from stack overflow examples. 

00:01:11.420 --> 00:01:15.510
 Remember, this also applies to any HTTP request 

00:01:15.510 --> 00:01:19.010
 From the libraries you have compiled in your application package. 

00:01:19.270 --> 00:01:22.130
 Now, it should be noted that when caching HTTP responses 

00:01:22.130 --> 00:01:24.500
 Data is expelled from the device in two ways. 

00:01:24.500 --> 00:01:26.590
 First, if the cache is full, 

00:01:26.590 --> 00:01:29.320
 The system will delete the oldest unused files 

00:01:29.320 --> 00:01:30.730
 To save space for new data. 

00:01:30.730 --> 00:01:32.920
 Second, the files will be removed 

00:01:32.920 --> 00:01:37.900
 According to the Cache-Control header information included with the server response. 

00:01:38.300 --> 00:01:40.480
 Then for HTTP 1.1 standards 

00:01:40.480 --> 00:01:44.270
 The server will pass a stop signal with your required data 

00:01:44.270 --> 00:01:47.920
 Which tells the device how long it takes to cache information. 

00:01:48.100 --> 00:01:51.087
 Therefore, if the server says, for example, a three-day buffer, 

00:01:51.087 --> 00:01:54.240
 The device will save the file for three days before disposing of it. 

00:01:54.780 --> 00:01:56.690
 If the server says, "no buffering", 

00:01:56.690 --> 00:01:59.090
 The file will never be stored on the device. 

00:01:59.090 --> 00:02:02.410
 The HTTP response cache places all control capabilities 

00:02:02.410 --> 00:02:05.000
 In the way content is cached in the hands of the server, 

00:02:05.000 --> 00:02:07.950
 Assuming it is better to know what kinds of data you are requesting 

00:02:07.950 --> 00:02:09.930
 And how the device should be used. 

00:02:09.930 --> 00:02:13.420
 There is nothing wrong with simple communication 

00:02:13.420 --> 00:02:15.410
 Or if you somehow control the server 

00:02:15.410 --> 00:02:19.390
 You have the ability to set the cache for each type of data. 

00:02:19.390 --> 00:02:22.259
 But otherwise there may be major problems 

00:02:22.259 --> 00:02:24.050
 Especially if you do not control the server. 

00:02:24.050 --> 00:02:26.950
 What if the server, for example, does not specify the cache duration at all, 

00:02:26.950 --> 00:02:29.460
 Nothing is stored temporarily on your device, 

00:02:29.460 --> 00:02:33.170
 Or what if the cache values ​​conflict with the physical resources of the device, 

00:02:33.170 --> 00:02:36.020
 Such as misjudging the amount of free space available for temporary storage, 

00:02:36.020 --> 00:02:39.270
 Or what if your customer is trying to adapt to the needs of environments 

00:02:39.270 --> 00:02:40.540
 With high transition times 

00:02:40.540 --> 00:02:43.060
 And is actually trying to modify the cache method 

00:02:43.060 --> 00:02:44.300
 Because of those environments, 

00:02:44.300 --> 00:02:45.650
 But the server does not allow it 

00:02:45.650 --> 00:02:48.000
 Because it assumes that you are using a 4G network? 

00:02:48.360 --> 00:02:50.450
 Well, in essence, these situations require advanced from you 

00:02:50.450 --> 00:02:53.070
 Depending on the cache for HTTP responses, 

00:02:53.070 --> 00:02:55.610
 Instead, set up your own buffering buffer 

00:02:55.610 --> 00:02:57.370
 Which includes two elements, 

00:02:57.370 --> 00:02:59.910
 First write your manager for the cache 

00:02:59.910 --> 00:03:01.820
 And bring in resources from the disk on demand. 

00:03:01.820 --> 00:03:06.040
 And second, the creation of a temporary storage policy based on the data type 

00:03:06.050 --> 00:03:07.760
 And the status of the device itself. 

00:03:08.250 --> 00:03:10.950
 Programming your disk cache may be difficult. 

00:03:10.950 --> 00:03:12.710
 So unless you need something dedicated, 

00:03:12.710 --> 00:03:17.390
 It may be better to steal the implementation of DiskLRUCache.Java 

00:03:17.390 --> 00:03:18.770
 From your Android source 

00:03:18.770 --> 00:03:20.360
 And re-employ it for your needs. 

00:03:20.360 --> 00:03:23.080
 One of our sample software packages has done this for you 

00:03:23.080 --> 00:03:24.490
 If you want to take a look. 

00:03:24.950 --> 00:03:28.669
 The most complicated thing is to specify a policy for cache types 

00:03:28.669 --> 00:03:31.340
 Which should be done for the types of assets you bring from the server. 

00:03:31.641 --> 00:03:33.510
 You need thumbnails 

00:03:33.510 --> 00:03:36.060
 To lower cache times of high-resolution images, 

00:03:36.060 --> 00:03:39.650
 And other things, such as server checks that may not be buffered. 

00:03:39.660 --> 00:03:44.760
 You may want to keep server responses that describe UI data for much longer. 

00:03:45.380 --> 00:03:47.909
 In fact, this is very complicated. 

00:03:47.909 --> 00:03:49.700
 Fortunately there are libraries 

00:03:49.700 --> 00:03:50.850
 To help facilitate this. 

00:03:50.850 --> 00:03:54.790
 Bring the Volley or okHTTP libraries to a good start 

00:03:54.790 --> 00:03:57.020
 With more stable implementation of networks 

00:03:57.020 --> 00:04:00.460
 Although you will have to dodge a bit with the source code instructions 

00:04:00.460 --> 00:04:03.210
 To make it call the cache logic. 

00:04:03.210 --> 00:04:08.650
 Incidentally, Picasso's built-in photo library comes with a custom image cache management 

00:04:08.650 --> 00:04:09.910
 for you. 

00:04:10.780 --> 00:04:13.910
 Now, if you are not sure about the effect of buffering or not 

00:04:13.910 --> 00:04:15.010
 On your app, 

00:04:15.010 --> 00:04:18.010
 Be sure to check the Network Monitor tool 

00:04:18.010 --> 00:04:19.899
 Within Android Studio. 

00:04:19.899 --> 00:04:22.089
 The tool provides a great visual representation 

00:04:22.089 --> 00:04:25.030
 For types of outgoing and incoming orders. 

00:04:25.040 --> 00:04:27.000
 If you see some requests for content occur 

00:04:27.000 --> 00:04:28.424
 While they should be stored temporarily, 

00:04:28.424 --> 00:04:30.840
 This may be a good sign that you have to go deeper. 

00:04:30.840 --> 00:04:34.400
 That's why I like using AT &amp; T's ARO. 

00:04:34.400 --> 00:04:36.470
 It allows this precisely; 

00:04:36.470 --> 00:04:38.470
 Deeply penetrate each network request 

00:04:38.470 --> 00:04:40.720
 And even check the header data of the network 

00:04:40.720 --> 00:04:42.220
 That was sent to the device. 

00:04:42.220 --> 00:04:44.397
 But caching your data is just the beginning. 

00:04:44.397 --> 00:04:47.680
 Check the rest of your Android Performance Patterns 

00:04:47.680 --> 00:04:49.908
 Do not miss joining the Google+ community 

00:04:49.908 --> 00:04:51.720
 For tips from other developers. 

00:04:51.720 --> 00:04:53.920
 So keep calm, collect your code information 

00:04:53.920 --> 00:04:55.600
 Always remember that performance is important. 

