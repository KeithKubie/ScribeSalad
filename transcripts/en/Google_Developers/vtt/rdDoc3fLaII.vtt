WEBVTT
Kind: captions
Language: en

00:00:00.810 --> 00:00:03.600
SETH LADD: OK, awesome.

00:00:03.600 --> 00:00:06.260
So I am truly humbled to see
this crowd here, and I want to

00:00:06.260 --> 00:00:08.160
thank everyone for joining
us this morning.

00:00:08.160 --> 00:00:09.550
This is really, really cool.

00:00:09.550 --> 00:00:12.390
Disclaimer, there's only one
slide with Java on it, so

00:00:12.390 --> 00:00:14.380
hopefully that's OK.

00:00:14.380 --> 00:00:17.710
Just to get my bearings just a
little bit, I like understand

00:00:17.710 --> 00:00:18.260
who's in the room.

00:00:18.260 --> 00:00:19.870
But I asked a bunch of
questions earlier.

00:00:19.870 --> 00:00:23.220
The last one that I'm really
curious about is who would

00:00:23.220 --> 00:00:26.090
say, and to some degree that
they are a web developer?

00:00:26.090 --> 00:00:28.410
Like, who would use
that title?

00:00:28.410 --> 00:00:29.830
All right, cool.

00:00:29.830 --> 00:00:31.920
And there was a big crowd that
also said that they were

00:00:31.920 --> 00:00:35.210
server side developers, so
that's pretty interesting.

00:00:35.210 --> 00:00:36.930
There was a big overlap there,
and we'll talk a little bit

00:00:36.930 --> 00:00:38.180
about that.

00:00:40.400 --> 00:00:42.050
OK, so welcome.

00:00:42.050 --> 00:00:43.040
My name is Seth Ladd.

00:00:43.040 --> 00:00:45.840
I'm a developer advocate with
the Chrome team focusing on

00:00:45.840 --> 00:00:49.190
Dart these days, and we'll talk
a little bit about that.

00:00:49.190 --> 00:00:51.690
This is really cool for me
because I feel like this is

00:00:51.690 --> 00:00:53.140
kind of a hometown crowd.

00:00:53.140 --> 00:00:55.905
I have many, many, many, many
years programming in Java on

00:00:55.905 --> 00:00:56.840
the server side for me.

00:00:56.840 --> 00:00:59.420
That's really where I think I
got my start and spent many

00:00:59.420 --> 00:01:02.440
years, so it's very cool to come
back to a conference like

00:01:02.440 --> 00:01:05.120
this and talk to you guys.

00:01:05.120 --> 00:01:07.855
But then I spent a little bit
with Ruby on Rails, but then I

00:01:07.855 --> 00:01:10.580
was lucky enough to get this gig
at Google working for the

00:01:10.580 --> 00:01:11.960
Chrome team.

00:01:11.960 --> 00:01:13.590
Little did they know, I
was not a JavaScript

00:01:13.590 --> 00:01:14.720
ninja, if you will.

00:01:14.720 --> 00:01:17.340
Again, having a lot of
experience on the server side.

00:01:17.340 --> 00:01:18.990
But it was really cool learning
all about JavaScript

00:01:18.990 --> 00:01:21.940
and HTML5, and the modern
browser and what's going on

00:01:21.940 --> 00:01:22.430
there today.

00:01:22.430 --> 00:01:24.290
And I spent the past
couple years

00:01:24.290 --> 00:01:26.320
programming client side stuff.

00:01:26.320 --> 00:01:28.255
So it's been neat for me to have
kind of the experience

00:01:28.255 --> 00:01:32.780
and exposure across
the full spectrum.

00:01:32.780 --> 00:01:37.300
But when I was programming the
browser, I always felt like I

00:01:37.300 --> 00:01:40.080
wasn't quite getting my
expectations met the way that

00:01:40.080 --> 00:01:40.820
I wanted to.

00:01:40.820 --> 00:01:43.930
I think especially I was spoiled
a little bit working

00:01:43.930 --> 00:01:47.110
with the tools and the languages
we have building--

00:01:47.110 --> 00:01:50.470
Java is a good example, or C# is
another good one, in terms

00:01:50.470 --> 00:01:53.055
of being structured
nature classes.

00:01:53.055 --> 00:01:55.240
You know, libraries, packages,
et cetera.

00:01:55.240 --> 00:01:57.360
And then tools allow you
to bounce around

00:01:57.360 --> 00:01:58.320
the code really easily.

00:01:58.320 --> 00:02:01.420
Refactor, rename, extract
method, all that good stuff.

00:02:01.420 --> 00:02:03.840
And I really, really missed that
when I was programming

00:02:03.840 --> 00:02:04.300
the browser.

00:02:04.300 --> 00:02:07.470
Even though this is a super
exciting platform, I always

00:02:07.470 --> 00:02:10.250
wanted to, I think,
program the way I

00:02:10.250 --> 00:02:11.060
kind of grew up with.

00:02:11.060 --> 00:02:13.690
And then so when I heard about
this project Dart, which

00:02:13.690 --> 00:02:16.690
brings structured programming
with great tool ability to the

00:02:16.690 --> 00:02:19.900
browser, so I get kind of the
best of both worlds, I jumped

00:02:19.900 --> 00:02:21.170
all over it.

00:02:21.170 --> 00:02:22.930
But then there was still this
kind of piece that was

00:02:22.930 --> 00:02:27.750
missing, which was certainly
Dart as a language gives me

00:02:27.750 --> 00:02:32.530
structure at the language and
runtime level, and the library

00:02:32.530 --> 00:02:33.130
certainly as well.

00:02:33.130 --> 00:02:36.560
But when kind of the rubber hits
the road in the browser

00:02:36.560 --> 00:02:41.170
itself, I lost some of that
encapsulation, or structure,

00:02:41.170 --> 00:02:43.490
reusability that again, I think
we all kind of take for

00:02:43.490 --> 00:02:46.030
granted programming in

00:02:46.030 --> 00:02:49.210
traditional structured languages.

00:02:49.210 --> 00:02:50.920
And so when I heard about this
cool thing called web

00:02:50.920 --> 00:02:53.880
components, I jumped all over
that as well, because that

00:02:53.880 --> 00:02:55.960
allowed me to get the
encapsulation, the true

00:02:55.960 --> 00:02:59.260
reusable widgets or components
that, frankly, almost every

00:02:59.260 --> 00:03:02.620
other system out there already
has, and brings it via

00:03:02.620 --> 00:03:05.630
actually the platform
into the browser.

00:03:05.630 --> 00:03:06.580
I was very, very excited.

00:03:06.580 --> 00:03:10.690
So I'm here to share both web
components and how the Dart

00:03:10.690 --> 00:03:14.930
runtime and libraries bring all
this stuff alive today.

00:03:14.930 --> 00:03:16.020
And by the way, I really
like it when

00:03:16.020 --> 00:03:17.040
you guys ask questions.

00:03:17.040 --> 00:03:19.770
So if something's not clicking,
please let me know.

00:03:19.770 --> 00:03:21.660
And it gets a lot more
interesting when it gets

00:03:21.660 --> 00:03:24.140
interactive, so don't be shy.

00:03:24.140 --> 00:03:28.440
So today we're here to talk
about web components and Dart.

00:03:28.440 --> 00:03:30.160
OK, so first we always
have to start off

00:03:30.160 --> 00:03:31.290
with a demo, of course.

00:03:31.290 --> 00:03:33.280
Now, here's x-gangnam-style.

00:03:33.280 --> 00:03:34.270
That's a tag.

00:03:34.270 --> 00:03:35.200
OK, so--

00:03:35.200 --> 00:03:36.800
[MUSIC PLAYING]

00:03:36.800 --> 00:03:37.270
Cool.

00:03:37.270 --> 00:03:39.556
So of course this works.

00:03:39.556 --> 00:03:41.570
I feel a little cliche doing
this a little bit.

00:03:41.570 --> 00:03:44.550
But I'm illustrating a point,
so just bear with me here.

00:03:44.550 --> 00:03:48.700
So we see this fancy tag up
here, x-gangnam-style, which

00:03:48.700 --> 00:03:51.560
looks like a fancy
HTML element.

00:03:51.560 --> 00:03:53.815
Well of course, HTML doesn't
allow me to just introduce new

00:03:53.815 --> 00:03:55.970
tags, or does it?

00:03:55.970 --> 00:03:57.770
So I'm going to right
click on this.

00:03:57.770 --> 00:03:58.590
Whoops.

00:03:58.590 --> 00:04:00.000
Sorry, that's going to get
annoying real quick.

00:04:03.380 --> 00:04:05.290
That's only seven more times
in the presentation.

00:04:05.290 --> 00:04:06.805
So here we go.

00:04:06.805 --> 00:04:07.970
You can see that.

00:04:07.970 --> 00:04:11.430
Let me zoom in a little
bit here for you.

00:04:11.430 --> 00:04:11.910
Sorry.

00:04:11.910 --> 00:04:12.840
Let's scroll up again.

00:04:12.840 --> 00:04:16.870
So actually in the DOM, in the
HTML explicitly is that

00:04:16.870 --> 00:04:19.209
x-gangnam-style tag.

00:04:19.209 --> 00:04:19.860
Which is great.

00:04:19.860 --> 00:04:22.900
So I've introduced now into the
browser, or sorry, into

00:04:22.900 --> 00:04:27.270
this page slash app a brand
new term into the lexicon

00:04:27.270 --> 00:04:29.110
that's available
to me in HTML.

00:04:29.110 --> 00:04:30.790
So you might say, well, what's
going on inside?

00:04:30.790 --> 00:04:33.220
Well, actually, that's it.

00:04:33.220 --> 00:04:34.150
That is the tag.

00:04:34.150 --> 00:04:36.060
Now, there is this thing called
the document fragment,

00:04:36.060 --> 00:04:38.770
and we can jump inside here to
see these sort of hidden

00:04:38.770 --> 00:04:39.680
elements in here.

00:04:39.680 --> 00:04:41.860
We'll talk about what these are,
but you can see the color

00:04:41.860 --> 00:04:43.100
difference.

00:04:43.100 --> 00:04:45.380
What I'm highlighting here,
x-gangnam-style, this is the

00:04:45.380 --> 00:04:48.860
actual tag that the browser
and the DOM sees.

00:04:48.860 --> 00:04:52.830
Inside of it is this hidden
shadow world of other DOM

00:04:52.830 --> 00:04:55.360
nodes and elements and
attributes that actually make

00:04:55.360 --> 00:04:58.740
up the implementation
of that tag.

00:04:58.740 --> 00:05:00.670
And right away you're starting
to see some encapsulation,

00:05:00.670 --> 00:05:03.020
you're already starting to hear
these word implementation

00:05:03.020 --> 00:05:04.310
boundaries.

00:05:04.310 --> 00:05:06.930
And so we're starting to bring
in this kind of declarative

00:05:06.930 --> 00:05:09.990
nature of encapsulation into
the modern platform.

00:05:09.990 --> 00:05:11.950
We'll see how we do this
in a little bit, but

00:05:11.950 --> 00:05:13.630
that's really awesome.

00:05:13.630 --> 00:05:14.430
And it's not just static.

00:05:14.430 --> 00:05:15.900
We saw the animation, we saw
the sound, et cetera.

00:05:19.380 --> 00:05:22.460
OK, something probably not as
totally hackneyed as "Gangnam

00:05:22.460 --> 00:05:26.140
Style," but here we see an
example of x-megabutton, a new

00:05:26.140 --> 00:05:29.530
tag that we've created which
shows off that you can

00:05:29.530 --> 00:05:31.050
actually start composing
these things.

00:05:31.050 --> 00:05:33.600
So this has a text node inside
of it, so they don't have to

00:05:33.600 --> 00:05:36.140
be just kind of obtuse
elements.

00:05:36.140 --> 00:05:39.350
You can start to interlace the
elements that you've defined

00:05:39.350 --> 00:05:42.210
with the elements or attributes
of the page itself.

00:05:42.210 --> 00:05:43.510
So if we hover over it here.

00:05:46.449 --> 00:05:48.630
[MOOING]

00:05:48.630 --> 00:05:49.510
OK.

00:05:49.510 --> 00:05:50.820
But anyway, so it's funny.

00:05:50.820 --> 00:05:54.340
It's funny because it's a moo.

00:05:54.340 --> 00:05:56.280
But what I like about this
example here is the previous

00:05:56.280 --> 00:05:59.660
example was just like, a random
element that I created,

00:05:59.660 --> 00:06:01.750
although quite cool, and you
guys can go and use that.

00:06:01.750 --> 00:06:05.150
But this element here shows the
inheritance capabilities

00:06:05.150 --> 00:06:06.740
of these new custom elements.

00:06:06.740 --> 00:06:09.560
This one actually is a button.

00:06:09.560 --> 00:06:11.450
And one of the things that I've
always wanted to do on

00:06:11.450 --> 00:06:14.160
the web platform since the
time that I started

00:06:14.160 --> 00:06:16.250
was extend a button.

00:06:16.250 --> 00:06:18.300
And now, and I see some nods,
they're like, yes,

00:06:18.300 --> 00:06:19.190
why can't I do that?

00:06:19.190 --> 00:06:21.090
Well, some of the capabilities
we're going to talk about

00:06:21.090 --> 00:06:23.840
today shows us we can actually
start to do that.

00:06:23.840 --> 00:06:26.895
Not just introduce new terms
into our lexicon, but extend

00:06:26.895 --> 00:06:30.640
the existing behavior and
capabilities of the browser.

00:06:30.640 --> 00:06:32.100
Pretty excited by that.

00:06:32.100 --> 00:06:35.320
So many of you guys are like OK,
this is cool, but why do

00:06:35.320 --> 00:06:35.970
we need to do this?

00:06:35.970 --> 00:06:37.350
And hopefully a lot of you
guys are like, yes,

00:06:37.350 --> 00:06:38.320
we need to do this.

00:06:38.320 --> 00:06:41.690
But the thing that illustrates
this, the problem to me the

00:06:41.690 --> 00:06:44.520
most is this slide right here.

00:06:44.520 --> 00:06:48.450
Your left is viewing
source on Gmail.

00:06:48.450 --> 00:06:52.460
Now, Gmail is by all accounts
a very complex, modern, full

00:06:52.460 --> 00:06:54.040
featured application.

00:06:54.040 --> 00:06:58.100
To pull that off, you need
something like this.

00:06:58.100 --> 00:06:59.680
Now what I would want to see--

00:06:59.680 --> 00:07:01.370
semantically what we're
trying to say is

00:07:01.370 --> 00:07:04.170
what's on your right.

00:07:04.170 --> 00:07:07.490
There's a list of messages, they
have subject and dates.

00:07:07.490 --> 00:07:09.400
I don't know about you guys, but
the version over there on

00:07:09.400 --> 00:07:12.950
the right, that is a much better
way to program the web

00:07:12.950 --> 00:07:14.840
than the version over
here on the left.

00:07:14.840 --> 00:07:17.260
Now what I'm not saying is that
divs are bad or anything

00:07:17.260 --> 00:07:19.500
like that, but the version
over here, this is

00:07:19.500 --> 00:07:20.750
implementation details.

00:07:20.750 --> 00:07:22.750
This should be hidden, this
should be encapsulated.

00:07:22.750 --> 00:07:26.300
There's no need for the DOM
itself to actually display

00:07:26.300 --> 00:07:28.640
this, present this as the
structure of the page.

00:07:28.640 --> 00:07:30.860
No, we want to talk about
a world where you

00:07:30.860 --> 00:07:32.070
say what you mean.

00:07:32.070 --> 00:07:35.410
We want to help usher in a
declarative renaissance and

00:07:35.410 --> 00:07:38.780
help bring along the
world over there.

00:07:38.780 --> 00:07:42.750
So that, to me, says
it loud enough.

00:07:42.750 --> 00:07:46.060
So let's talk about web
components, as a way to bring

00:07:46.060 --> 00:07:48.590
about this kind of declarative
renaissance in modern web

00:07:48.590 --> 00:07:49.900
programming.

00:07:49.900 --> 00:07:51.460
So there's a couple
parts of it.

00:07:51.460 --> 00:07:54.060
The word web components is
really just a family of new

00:07:54.060 --> 00:07:55.990
specifications and
functionalities getting

00:07:55.990 --> 00:07:58.500
introduced actually at
the platform level.

00:07:58.500 --> 00:08:01.630
The first one is a template tag,
which is the scaffolding,

00:08:01.630 --> 00:08:02.910
or blueprints.

00:08:02.910 --> 00:08:05.950
You could think of this as like,
inert chunks of DOM.

00:08:05.950 --> 00:08:07.700
Once you have these inert
chunks, of course, you can

00:08:07.700 --> 00:08:09.530
start doing things like
integrating over them and

00:08:09.530 --> 00:08:12.220
putting them conditionals, and
interleaving, et cetera.

00:08:12.220 --> 00:08:16.480
But you need a way to actually
have templates in your system.

00:08:16.480 --> 00:08:18.370
Then you have this concept
of shadow DOM.

00:08:18.370 --> 00:08:21.240
Now once you have templates,
you have to somehow inject

00:08:21.240 --> 00:08:22.810
them into your page.

00:08:22.810 --> 00:08:27.160
Now with the shadow DOM, you can
create that hidden shadow

00:08:27.160 --> 00:08:31.180
world of implementation details
and bind it to a node

00:08:31.180 --> 00:08:35.490
that actually does manifest
itself on the page.

00:08:35.490 --> 00:08:37.809
And then finally, it kind of
all comes together with the

00:08:37.809 --> 00:08:38.530
element tag.

00:08:38.530 --> 00:08:41.860
And this is how you define new
custom elements and extend the

00:08:41.860 --> 00:08:45.115
vocabulary of HTML today.

00:08:45.115 --> 00:08:46.940
And again, bringing about
that say what you

00:08:46.940 --> 00:08:48.550
mean programming style.

00:08:51.830 --> 00:08:56.050
So let's start here by looking
in detail at templates.

00:08:56.050 --> 00:08:58.350
Now of course, templates
are not a new concept.

00:08:58.350 --> 00:09:01.740
And that's one of the themes
here of today's talk is that a

00:09:01.740 --> 00:09:04.360
lot of this work with web
components is paving the cow

00:09:04.360 --> 00:09:05.490
paths, if you will.

00:09:05.490 --> 00:09:07.420
A lot of web developments have
been trying to do a lot of

00:09:07.420 --> 00:09:08.770
these things for awhile.

00:09:08.770 --> 00:09:11.350
And if you can bake it into the
platform, then of course

00:09:11.350 --> 00:09:14.450
it becomes standard and native,
and you no longer need

00:09:14.450 --> 00:09:15.930
to kind of reinvent the wheel.

00:09:15.930 --> 00:09:18.740
And then more interesting
libraries and frameworks can

00:09:18.740 --> 00:09:20.200
come about.

00:09:20.200 --> 00:09:22.090
So we've of course been trying
to do this for a long time.

00:09:22.090 --> 00:09:24.850
Here's method number one,
off screen DOM.

00:09:24.850 --> 00:09:26.850
That is, you create a
DOM and you hide it.

00:09:26.850 --> 00:09:29.450
But this has some certain
problems.

00:09:29.450 --> 00:09:32.840
The first one is that this DOM
that's inside your hidden tag

00:09:32.840 --> 00:09:37.090
is interpreted like every other
bit of DOM in your page.

00:09:37.090 --> 00:09:39.530
So for instance, images
are loaded, scripts

00:09:39.530 --> 00:09:42.020
are loaded and parsed.

00:09:42.020 --> 00:09:44.490
And that's often not what you
want with a template.

00:09:44.490 --> 00:09:46.580
For instance, think about if
you load up a template that

00:09:46.580 --> 00:09:48.940
has some images but you don't
display that template for 10

00:09:48.940 --> 00:09:51.330
minutes, why take the
hit to go get those

00:09:51.330 --> 00:09:52.690
images right away?

00:09:52.690 --> 00:09:54.990
The other problem with this
is this is all flat

00:09:54.990 --> 00:09:56.260
within the same DOM.

00:09:56.260 --> 00:09:58.550
And so it's very, very difficult
to create these

00:09:58.550 --> 00:10:03.720
styling boundaries with a
template system like this.

00:10:03.720 --> 00:10:05.840
And the list of problems
goes on and on.

00:10:05.840 --> 00:10:06.950
OK.

00:10:06.950 --> 00:10:07.560
Was there a question?

00:10:07.560 --> 00:10:09.680
No?

00:10:09.680 --> 00:10:10.620
OK, there's another way.

00:10:10.620 --> 00:10:11.200
There's many ways.

00:10:11.200 --> 00:10:12.790
There's another way that people
try to accomplish the

00:10:12.790 --> 00:10:14.190
same thing, and they
do it through

00:10:14.190 --> 00:10:15.840
overloading the script tag.

00:10:15.840 --> 00:10:18.860
Well, we think that this has
problems because you're

00:10:18.860 --> 00:10:21.880
completely bastardizing the
use of the script tag.

00:10:21.880 --> 00:10:24.680
You're parsing a bunch of
text here as script.

00:10:24.680 --> 00:10:28.610
You can easily introduce XSS
issues, and runtime string

00:10:28.610 --> 00:10:32.030
parsing is always not
a good thing.

00:10:32.030 --> 00:10:34.960
So we said OK, clearly people
want to do templates.

00:10:34.960 --> 00:10:37.700
How do we bring those about and
into the platform itself?

00:10:37.700 --> 00:10:40.370
Well, introduce a
template tag.

00:10:40.370 --> 00:10:42.660
It's an inert set of markups.

00:10:42.660 --> 00:10:45.330
So even if you do have things
like images in here, the

00:10:45.330 --> 00:10:49.570
content inside the template tag
is parsed and created into

00:10:49.570 --> 00:10:51.930
kind of an inert document
fragment, but it doesn't

00:10:51.930 --> 00:10:55.860
activate it or execute it.

00:10:55.860 --> 00:10:58.310
Now of course, once you have
this template tag in itself--

00:10:58.310 --> 00:11:00.660
or the contents of the template
tag is itself a

00:11:00.660 --> 00:11:04.250
document fragment, it's very
easy to then treat it like any

00:11:04.250 --> 00:11:06.360
other thing you would in your
DOM or your web browser.

00:11:06.360 --> 00:11:08.540
And this is another great
thing about these new

00:11:08.540 --> 00:11:10.340
capabilities we're adding
to the platform.

00:11:10.340 --> 00:11:13.450
You can play off and extend
things already baked into the

00:11:13.450 --> 00:11:15.660
browser, things just move
a lot more smoothly.

00:11:15.660 --> 00:11:19.320
So while these ideas and
concepts may be pretty

00:11:19.320 --> 00:11:22.070
revolutionary, I think the
actual implementation of this

00:11:22.070 --> 00:11:24.320
stuff and the actual kind of
delta between what you're

00:11:24.320 --> 00:11:26.485
doing now and the new concepts
you're going to have to learn

00:11:26.485 --> 00:11:28.320
are actually pretty small.

00:11:28.320 --> 00:11:29.210
So here's a good example.

00:11:29.210 --> 00:11:31.050
You can just go ahead and clone
the node like you could

00:11:31.050 --> 00:11:33.780
clone any other node and attach
that template content

00:11:33.780 --> 00:11:35.250
right into your DOM.

00:11:35.250 --> 00:11:36.500
Pretty straightforward.

00:11:38.970 --> 00:11:42.270
So we think that's
kind of money.

00:11:42.270 --> 00:11:43.820
I could just stare into
those eyes all day.

00:11:43.820 --> 00:11:45.990
OK.

00:11:45.990 --> 00:11:47.480
All right, so those
are templates.

00:11:47.480 --> 00:11:48.680
Inert set of DOM.

00:11:48.680 --> 00:11:50.570
The next up is shadow DOM.

00:11:50.570 --> 00:11:54.250
Now this is probably the most
complex concept, so we're

00:11:54.250 --> 00:11:55.680
going to try to ease
into this.

00:11:55.680 --> 00:11:58.600
So it turns out that browser
vendors have actually been

00:11:58.600 --> 00:11:59.640
holding out on us.

00:11:59.640 --> 00:12:02.010
It turns out that browser
vendors today actually have

00:12:02.010 --> 00:12:05.400
this kind of concept of the
shadow netherworld that's

00:12:05.400 --> 00:12:07.110
underneath your DOM.

00:12:07.110 --> 00:12:09.210
And they use it to build--

00:12:09.210 --> 00:12:12.760
here we go, there we go.

00:12:12.760 --> 00:12:14.840
They use it to build some of
the components that we

00:12:14.840 --> 00:12:16.180
actually use today.

00:12:16.180 --> 00:12:19.430
So the perfect example here
is this video player.

00:12:19.430 --> 00:12:22.420
If you're familiar with HTML5,
you'll know that this is a

00:12:22.420 --> 00:12:23.700
just video tag.

00:12:23.700 --> 00:12:25.800
So bracket video.

00:12:25.800 --> 00:12:26.850
Which is great.

00:12:26.850 --> 00:12:28.390
I just want to declare there's
a video in here.

00:12:28.390 --> 00:12:31.530
But actually underneath the
covers, if we dive in, this is

00:12:31.530 --> 00:12:35.150
just the dev tools which has a
flag turned on that says show

00:12:35.150 --> 00:12:36.540
me the shadow DOM.

00:12:36.540 --> 00:12:38.650
Underneath the covers there's
actually a set of divs in

00:12:38.650 --> 00:12:41.450
here, and some of these divs
deal with the button.

00:12:41.450 --> 00:12:44.570
And so we're actually able to
render the more higher level

00:12:44.570 --> 00:12:47.640
composed widgets like the video
player out of what the

00:12:47.640 --> 00:12:49.340
browser already gives you.

00:12:49.340 --> 00:12:51.170
That is divs and buttons
and inputs.

00:12:51.170 --> 00:12:52.320
And that's fantastic.

00:12:52.320 --> 00:12:55.450
So browsers have been doing
this, and why wouldn't they?

00:12:55.450 --> 00:12:58.330
I mean, it's a lot easier to
use the divs in here and

00:12:58.330 --> 00:13:00.180
buttons in here than it is, I
think, to write a whole bunch

00:13:00.180 --> 00:13:01.430
of C++ code.

00:13:05.030 --> 00:13:06.326
Sorry, this is annoying.

00:13:06.326 --> 00:13:08.311
There we go.

00:13:08.311 --> 00:13:11.620
OK, and then so uses it in other
cases here, like the

00:13:11.620 --> 00:13:13.330
date, widgets and
selectors, too.

00:13:13.330 --> 00:13:16.220
So the browsers already have
this concept of reusing the

00:13:16.220 --> 00:13:19.210
divs and elements and buttons,
et cetera, to build out higher

00:13:19.210 --> 00:13:20.280
level functions.

00:13:20.280 --> 00:13:23.230
So the shadow DOM just actually
exposes this to us,

00:13:23.230 --> 00:13:28.680
so we ourselves can build
higher, more complex elements

00:13:28.680 --> 00:13:30.130
that are made out of
the basic building

00:13:30.130 --> 00:13:32.150
blocks of the browser.

00:13:32.150 --> 00:13:34.850
And of course this means
encapsulation, which again, is

00:13:34.850 --> 00:13:35.480
nothing new.

00:13:35.480 --> 00:13:36.510
It's not a new concept.

00:13:36.510 --> 00:13:37.950
But the fact that we're actually
getting in the

00:13:37.950 --> 00:13:40.030
browser is going to completely
change the way

00:13:40.030 --> 00:13:41.930
we build this stuff.

00:13:41.930 --> 00:13:42.640
So let's look at this.

00:13:42.640 --> 00:13:46.220
So the green nodes here-- the
actual document tree-- this is

00:13:46.220 --> 00:13:49.240
the DOM that you're familiar
with, and you would walk with

00:13:49.240 --> 00:13:50.930
your tools, et cetera.

00:13:50.930 --> 00:13:53.390
The pink nodes, this
is the shadow DOM.

00:13:53.390 --> 00:13:56.530
And individual elements from the
green, the normal or the

00:13:56.530 --> 00:14:00.940
light DOM, can they themselves
host a shadow DOM

00:14:00.940 --> 00:14:05.090
or subtree of nodes?

00:14:05.090 --> 00:14:08.000
So yes.

00:14:08.000 --> 00:14:11.000
This just shows that even though
the DOM that we all

00:14:11.000 --> 00:14:13.590
see, the green node underneath
might have a shadow DOM, it's

00:14:13.590 --> 00:14:16.620
the shadow DOM that's actually
rendered, much like we saw

00:14:16.620 --> 00:14:18.740
with the video tag, even though
there's all those divs

00:14:18.740 --> 00:14:20.935
and buttons in the video tag,
even though they're hidden in

00:14:20.935 --> 00:14:23.490
the shadow DOM, they still
make up the rendering and

00:14:23.490 --> 00:14:24.910
display of the element.

00:14:24.910 --> 00:14:27.540
And this just highlights it
again, if you have a shadow

00:14:27.540 --> 00:14:30.270
root, which is the green node,
itself has a shadow DOM, a

00:14:30.270 --> 00:14:31.460
bunch of pink elements.

00:14:31.460 --> 00:14:33.270
Underneath that shadow
root, there's a whole

00:14:33.270 --> 00:14:34.520
bunch of those elements.

00:14:37.150 --> 00:14:37.440
OK.

00:14:37.440 --> 00:14:39.500
So it turns out it's very easy
to create shadow DOMs.

00:14:39.500 --> 00:14:41.450
Again, you could do it off
of any other element.

00:14:41.450 --> 00:14:44.250
We typically call those the
host elements because they

00:14:44.250 --> 00:14:46.000
host the shadow DOM.

00:14:46.000 --> 00:14:48.220
Simply create a shadow route,
and then off of that root,

00:14:48.220 --> 00:14:50.660
again, you have this little
document fragment, and you can

00:14:50.660 --> 00:14:53.110
assign some HTML to it, whatever
you would like.

00:14:53.110 --> 00:14:55.740
In this case, remember the
shadow DOM is what's actually

00:14:55.740 --> 00:14:56.620
rendered out.

00:14:56.620 --> 00:14:59.200
So the top example here
is the DOM that's

00:14:59.200 --> 00:15:00.910
statically in the HTML page.

00:15:00.910 --> 00:15:03.410
Notice how it says my title
and my subtitle.

00:15:03.410 --> 00:15:07.750
But the JavaScript area in the
middle creates the shadow

00:15:07.750 --> 00:15:11.310
root, attaches a bunch of HTML
to it, and that itself is what

00:15:11.310 --> 00:15:12.060
is being rendered.

00:15:12.060 --> 00:15:16.170
So we replace any static
elements from the original

00:15:16.170 --> 00:15:17.420
host element.

00:15:19.470 --> 00:15:22.170
And I realize it's ironic that
this slide is probably the

00:15:22.170 --> 00:15:25.890
least sexy, unstyled slide
ever, but I have a point.

00:15:25.890 --> 00:15:29.460
And the point is once you have
these nice boundaries, they're

00:15:29.460 --> 00:15:31.820
not just great for encapsulation
of the structure

00:15:31.820 --> 00:15:34.550
of the element, they're great
for encapsulation of the

00:15:34.550 --> 00:15:36.530
styles of the element as well.

00:15:36.530 --> 00:15:39.980
And so the shadow DOM really
does a nice job with CSS

00:15:39.980 --> 00:15:42.890
styles in terms that you
can assign styles here.

00:15:42.890 --> 00:15:44.420
You can see it right there
in the inner HTML

00:15:44.420 --> 00:15:46.330
for this shadow DOM.

00:15:46.330 --> 00:15:49.990
And those styles are only
applied to the shadow DOM of

00:15:49.990 --> 00:15:51.060
that element.

00:15:51.060 --> 00:15:53.540
And now you're encapsulating
styles at the shadow DOM

00:15:53.540 --> 00:15:54.980
boundary, which I think
is fantastic.

00:15:54.980 --> 00:15:57.220
And notice how it doesn't
bleed out into

00:15:57.220 --> 00:15:58.790
the rest of the page.

00:15:58.790 --> 00:16:01.580
This is, I think, one of the
problems with some of the

00:16:01.580 --> 00:16:04.120
earlier template systems
that we showed earlier.

00:16:04.120 --> 00:16:08.160
It doesn't have that nice
styling boundary.

00:16:08.160 --> 00:16:11.440
Now it turns out that it's much
more than just a simple

00:16:11.440 --> 00:16:15.020
kind of brick wall boundary.

00:16:15.020 --> 00:16:18.170
With the shadow DOM and its
scope style sheets, you can

00:16:18.170 --> 00:16:21.050
interlace styles as well.

00:16:21.050 --> 00:16:22.630
And that, I think, is
the real power.

00:16:22.630 --> 00:16:24.090
Because up to this point, you're
like, yeah, I could do

00:16:24.090 --> 00:16:26.015
this with iframes, sort of.

00:16:26.015 --> 00:16:27.870
You know, there's a lot of
issues with iframes.

00:16:27.870 --> 00:16:29.810
But what you can't do with
iframes, and what's really

00:16:29.810 --> 00:16:32.190
slick about this stuff is you
can start to mix and match the

00:16:32.190 --> 00:16:35.040
styles of the host page with the
styles of the shadow DOM.

00:16:35.040 --> 00:16:37.020
And there's a couple different
triggers there.

00:16:37.020 --> 00:16:40.200
One is reset style inheritance,
which says if you

00:16:40.200 --> 00:16:42.320
set that to true, you say forget
about anything the page

00:16:42.320 --> 00:16:46.070
is saying, let me just start
to control all this stuff.

00:16:46.070 --> 00:16:49.630
And then apply author styles,
apply styles that the author

00:16:49.630 --> 00:16:53.000
itself specifies in the host
page and kind of interlace it,

00:16:53.000 --> 00:16:54.920
or let it bleed into
your element.

00:16:54.920 --> 00:16:57.300
Now, the really neat thing about
this is that you as a

00:16:57.300 --> 00:17:00.770
custom element author can
dictate the amount of control

00:17:00.770 --> 00:17:04.880
and interlacing that you want to
allow your embedder of your

00:17:04.880 --> 00:17:09.250
custom element to use, giving
you utmost control, but the

00:17:09.250 --> 00:17:14.750
embedder authors utmost
style and flexibility.

00:17:14.750 --> 00:17:15.089
OK.

00:17:15.089 --> 00:17:17.050
So I'm going to skip over some
of these things here.

00:17:17.050 --> 00:17:18.720
OK.

00:17:18.720 --> 00:17:20.609
It turns out also that the
browser has been doing this

00:17:20.609 --> 00:17:25.310
other tricky thing here called
custom pseudo elements.

00:17:25.310 --> 00:17:29.430
Now for instance, here's
a range slider.

00:17:29.430 --> 00:17:32.030
One of the great banes of CSS
development is how do you

00:17:32.030 --> 00:17:36.390
style the browsers like the
more fancy kind of input

00:17:36.390 --> 00:17:38.140
elements like dates
and range sliders?

00:17:38.140 --> 00:17:40.390
Well if you really dig into the
actual source code, you'll

00:17:40.390 --> 00:17:42.090
find that there's these
pseudo elements like

00:17:42.090 --> 00:17:43.720
webkit slider thumb.

00:17:43.720 --> 00:17:46.920
Firefox has some similar ones as
well that allows you to go

00:17:46.920 --> 00:17:50.980
ahead and style things like the
range slider to be very

00:17:50.980 --> 00:17:53.200
specific to your application.

00:17:53.200 --> 00:17:55.050
Now, this is great because
this technique has been

00:17:55.050 --> 00:17:57.630
applied to the shadow
DOM as well.

00:17:57.630 --> 00:18:02.660
So you as a shadow DOM author
can declare the presence of

00:18:02.660 --> 00:18:03.870
pseudo selectors.

00:18:03.870 --> 00:18:07.560
Again, that's what's down in
here, which allows the

00:18:07.560 --> 00:18:11.430
implementer of your custom
element, say, to style deep

00:18:11.430 --> 00:18:15.380
inside of your shadow DOM
without understanding the

00:18:15.380 --> 00:18:16.940
structure of your shadow DOM.

00:18:16.940 --> 00:18:18.170
Again, encapsulation.

00:18:18.170 --> 00:18:19.490
Bringing this to the
web platform,

00:18:19.490 --> 00:18:20.740
super powerful stuff.

00:18:27.070 --> 00:18:27.480
OK.

00:18:27.480 --> 00:18:30.850
Another great hook
is CSS variables.

00:18:30.850 --> 00:18:33.020
I really like this one because
it makes theming really,

00:18:33.020 --> 00:18:33.890
really easy.

00:18:33.890 --> 00:18:37.050
The bottom example here
is a bunch of CSS.

00:18:37.050 --> 00:18:39.800
Am I saying this right?

00:18:39.800 --> 00:18:40.080
Sorry.

00:18:40.080 --> 00:18:42.180
The one at the top, let's
start with that one.

00:18:42.180 --> 00:18:45.040
The one at the top says OK, as a
shadow DOM author, I can say

00:18:45.040 --> 00:18:48.500
OK, there is some color defined
by some variable, and

00:18:48.500 --> 00:18:52.090
I'll let the person who's using
me define what that

00:18:52.090 --> 00:18:52.650
variable is.

00:18:52.650 --> 00:18:54.520
And then of course the embedder,
or the person who

00:18:54.520 --> 00:18:56.820
uses your shadow DOM can then
say OK, I'm going to set a

00:18:56.820 --> 00:18:59.985
bunch of these variables, and
then that's how you can impact

00:18:59.985 --> 00:19:02.900
the actual style declarations
of the shadow DOM.

00:19:02.900 --> 00:19:06.330
Again allowing the author of the
shadow DOM to define the

00:19:06.330 --> 00:19:09.820
right kind of points and
abilities for interlacing and

00:19:09.820 --> 00:19:13.075
overriding these styles without
actually violating any

00:19:13.075 --> 00:19:15.830
of the encapsulation principles,
which is, I think,

00:19:15.830 --> 00:19:16.990
really, really fantastic.

00:19:16.990 --> 00:19:20.760
So this brings us back to the
host node that we're talking

00:19:20.760 --> 00:19:22.210
about, that top example.

00:19:22.210 --> 00:19:25.740
When we assigned a shadow DOM to
the host node, we wiped out

00:19:25.740 --> 00:19:27.820
completely his contents.

00:19:27.820 --> 00:19:29.740
And I've been talking about this
whole interlacing concept

00:19:29.740 --> 00:19:30.370
with styles.

00:19:30.370 --> 00:19:33.320
Well, it turns out that we can
also do an interlacing concept

00:19:33.320 --> 00:19:36.560
with the structure elements
of the shadow DOM as well.

00:19:36.560 --> 00:19:39.210
So it is a way for us to
say hey, you know what?

00:19:39.210 --> 00:19:41.370
I'm going to define a shadow
DOM, but I'm going to set

00:19:41.370 --> 00:19:44.340
their particular insertion
points, or just kind of

00:19:44.340 --> 00:19:48.630
markers for me to go back out to
the host's DOM's children,

00:19:48.630 --> 00:19:50.740
pull then in, and slide them
into my shadow DOM so I can

00:19:50.740 --> 00:19:53.700
interlace appropriately.

00:19:53.700 --> 00:19:55.590
That was a lot, so let
me see if I can show

00:19:55.590 --> 00:19:56.690
an example of that.

00:19:56.690 --> 00:20:02.220
OK, so the version on your left
here, the host has the

00:20:02.220 --> 00:20:03.820
H1, the H2 and the div.

00:20:03.820 --> 00:20:06.330
Now, I'm going to implement a
shadow DOM over on your right,

00:20:06.330 --> 00:20:08.830
and I'm going to define
content tags.

00:20:08.830 --> 00:20:11.300
And they might have selectors,
like select H2.

00:20:11.300 --> 00:20:13.380
These content tags are
the insertion points.

00:20:13.380 --> 00:20:15.890
That's why I want to say OK,
I know I'm defining my own

00:20:15.890 --> 00:20:18.590
structure that's encapsulated
inside the shadow DOM, but I'm

00:20:18.590 --> 00:20:20.990
going to go ahead and pull out
particular elements and their

00:20:20.990 --> 00:20:23.140
values from the host node.

00:20:23.140 --> 00:20:24.760
Well, why is important?

00:20:24.760 --> 00:20:27.420
Well, you may not know all
the details when you're

00:20:27.420 --> 00:20:28.400
implementing a shadow DOM.

00:20:28.400 --> 00:20:31.990
You may want to say, go ahead
and use my custom element, but

00:20:31.990 --> 00:20:34.150
you may know what your title
is supposed to be.

00:20:34.150 --> 00:20:36.700
So I'm going to go ahead and set
up a content, or insertion

00:20:36.700 --> 00:20:39.120
point for the title, and I'll
take care of everything else.

00:20:39.120 --> 00:20:41.260
Again, allowing you as the
author to define exactly how

00:20:41.260 --> 00:20:43.800
these things are interlaced
without violating any

00:20:43.800 --> 00:20:46.210
encapsulation.

00:20:46.210 --> 00:20:47.290
So, yeah.

00:20:47.290 --> 00:20:48.430
Cha-ching.

00:20:48.430 --> 00:20:50.170
And also, when I always look
at these things, I always

00:20:50.170 --> 00:20:51.130
stare in the background.

00:20:51.130 --> 00:20:53.410
Like, there's a dude making
pizza back there.

00:20:53.410 --> 00:20:54.510
What's his story?

00:20:54.510 --> 00:20:56.930
I don't know.

00:20:56.930 --> 00:20:57.900
I want to meet him some day.

00:20:57.900 --> 00:20:59.820
OK, so now we talk about
some of these

00:20:59.820 --> 00:21:02.770
elements, like, elements.

00:21:02.770 --> 00:21:05.370
Like the template tag and
scope style sheets, and

00:21:05.370 --> 00:21:07.250
insertion points
and shadow DOM.

00:21:07.250 --> 00:21:10.190
That's all kind of the low level
infrastructure getting

00:21:10.190 --> 00:21:11.100
added to the platform.

00:21:11.100 --> 00:21:13.530
And you could certainly use that
low level infrastructure,

00:21:13.530 --> 00:21:15.860
but where it all kind of comes
together in a really

00:21:15.860 --> 00:21:19.520
delicious, layered lasagna
is custom elements.

00:21:19.520 --> 00:21:22.660
And custom elements, you can
encapsulate three things.

00:21:22.660 --> 00:21:24.750
You can encapsulate the
structure, that's

00:21:24.750 --> 00:21:25.980
the template tag.

00:21:25.980 --> 00:21:29.205
You can encapsulate the style,
that's the scope style sheets.

00:21:29.205 --> 00:21:31.390
And you can encapsulate
the behavior.

00:21:31.390 --> 00:21:33.380
This is any script tags
you may define.

00:21:33.380 --> 00:21:37.110
And this all rolls up into a
nice new element that you get

00:21:37.110 --> 00:21:40.440
to create and encapsulate
all this great stuff.

00:21:40.440 --> 00:21:43.360
So it turns out that again, if
we're in HTML we can add a new

00:21:43.360 --> 00:21:45.070
HTML element called element.

00:21:45.070 --> 00:21:47.310
And this is how we can
define new tags.

00:21:47.310 --> 00:21:49.920
So in this one, it's a
very simple example.

00:21:49.920 --> 00:21:53.400
Element name x-tabs.

00:21:53.400 --> 00:21:58.930
And note here the agreement with
the HTML spec guys, any

00:21:58.930 --> 00:22:02.810
custom element names you guys
create will require a dash

00:22:02.810 --> 00:22:03.900
somewhere in there.

00:22:03.900 --> 00:22:07.480
So that's how you can sort of
visually distinguish between

00:22:07.480 --> 00:22:10.100
custom elements and those
baked into the platform.

00:22:10.100 --> 00:22:13.800
Regardless, custom elements
can define a template.

00:22:13.800 --> 00:22:14.850
That's their structure.

00:22:14.850 --> 00:22:15.660
Now, how do you use it?

00:22:15.660 --> 00:22:17.800
Again, this is HTML and
this is the DOM.

00:22:17.800 --> 00:22:20.310
And if we already have a bunch
of capabilities, let's not

00:22:20.310 --> 00:22:22.390
reinvent anything, let's
use what we have.

00:22:22.390 --> 00:22:25.020
So we have this great link tag
in HTML, and you can have

00:22:25.020 --> 00:22:26.550
different relationship
type links.

00:22:26.550 --> 00:22:29.440
Well, why not use that
for components?

00:22:29.440 --> 00:22:33.106
So if you have the top element
tag in an HTML file, go ahead

00:22:33.106 --> 00:22:36.630
and link that into your kind
of host page, and boom, now

00:22:36.630 --> 00:22:39.950
you have access to new custom
elements, and you just define

00:22:39.950 --> 00:22:41.710
them like you would any
other DOM node.

00:22:41.710 --> 00:22:47.390
x-tabs, and it all just works,
which is very, very cool.

00:22:47.390 --> 00:22:49.620
Now, OK, so I talked about
encapsulating structure,

00:22:49.620 --> 00:22:51.490
style, and behavior.

00:22:51.490 --> 00:22:52.570
Let's talk about behavior.

00:22:52.570 --> 00:22:56.290
So custom elements can extend
existing elements, so you can

00:22:56.290 --> 00:22:58.880
add fancy button,
extends button.

00:22:58.880 --> 00:22:59.400
Which is fine.

00:22:59.400 --> 00:23:01.520
You can interact with it like
a button, but you may also

00:23:01.520 --> 00:23:04.000
want to interact with a
custom imperative API.

00:23:04.000 --> 00:23:05.630
Well, you can do that as well.

00:23:05.630 --> 00:23:07.300
It all works pretty
straightforwardly in

00:23:07.300 --> 00:23:08.720
JavaScript here.

00:23:08.720 --> 00:23:11.510
You can define a constructor,
and then you can define new

00:23:11.510 --> 00:23:14.340
APIs you might call on
that actual element.

00:23:14.340 --> 00:23:17.170
And this, I think, this totally
drives the point home

00:23:17.170 --> 00:23:19.910
for me, which this is
totally what I want.

00:23:19.910 --> 00:23:20.840
Well, this too.

00:23:20.840 --> 00:23:23.060
Actually, all of it.

00:23:23.060 --> 00:23:25.020
It's all really good.

00:23:25.020 --> 00:23:29.080
So again, if they themselves are
elements, they themselves

00:23:29.080 --> 00:23:29.680
are objects.

00:23:29.680 --> 00:23:32.080
You can instantiate them
with nice constructors.

00:23:32.080 --> 00:23:35.070
And remember, it really is an
element as far as the browser

00:23:35.070 --> 00:23:37.200
is concerned, so you can work
with these things like you

00:23:37.200 --> 00:23:38.340
would any other element.

00:23:38.340 --> 00:23:40.570
And then you can call methods on
it like you would any other

00:23:40.570 --> 00:23:41.240
element, too.

00:23:41.240 --> 00:23:42.880
And it's just so fantastic
to finally be

00:23:42.880 --> 00:23:46.380
able to extend button.

00:23:46.380 --> 00:23:47.870
Just that one little thing.

00:23:47.870 --> 00:23:49.290
OK, this drives the
point home.

00:23:49.290 --> 00:23:52.230
You can extend elements
as well.

00:23:52.230 --> 00:23:55.290
OK, so I'm doing OK.

00:23:55.290 --> 00:23:57.620
So this is all awesome, and of
course, you guys are like, how

00:23:57.620 --> 00:23:59.220
do I get access to
this right now?

00:23:59.220 --> 00:24:01.840
I want to start encapsulating,
I want to start creating

00:24:01.840 --> 00:24:04.940
templates and new elements, and
actually say what I mean.

00:24:04.940 --> 00:24:07.530
And I want to bring forth the
declarative renaissance.

00:24:07.530 --> 00:24:09.700
So the good news is that a lot
of this functionality like the

00:24:09.700 --> 00:24:12.530
shadow DOM and the template
tag, these are coming to

00:24:12.530 --> 00:24:14.310
Chrome really soon.

00:24:14.310 --> 00:24:16.250
The other really good
news is this is not

00:24:16.250 --> 00:24:17.140
just a Chrome thing.

00:24:17.140 --> 00:24:20.470
These things are on the spec
track, and the other browser

00:24:20.470 --> 00:24:22.970
vendors are very interested
in this work.

00:24:22.970 --> 00:24:27.200
In fact, Firefox, Mozilla has
this great x tags project as

00:24:27.200 --> 00:24:28.230
well, which you can look at.

00:24:28.230 --> 00:24:33.980
And I have a very good,
optimistic feeling about this.

00:24:33.980 --> 00:24:38.420
But there is another option to
bring this stuff alive today.

00:24:38.420 --> 00:24:41.630
And of course one new family
of exciting features?

00:24:41.630 --> 00:24:43.180
Why not two.

00:24:43.180 --> 00:24:44.800
Let's up the ante.

00:24:44.800 --> 00:24:47.720
So this is where we start
to talk about Dart.

00:24:47.720 --> 00:24:50.570
Now, Dart is our
batteries-included platform

00:24:50.570 --> 00:24:52.660
for building structured,
scalable web apps.

00:24:52.660 --> 00:24:53.760
It's much more than
a language.

00:24:53.760 --> 00:24:57.840
There's libraries, tools, a
virtual machine, an editor, a

00:24:57.840 --> 00:24:59.380
package manager.

00:24:59.380 --> 00:25:02.270
And it all compiles to
JavaScript, so it deploys

00:25:02.270 --> 00:25:03.960
across the modern web.

00:25:03.960 --> 00:25:05.890
But there's another really cool
thing about this, though.

00:25:05.890 --> 00:25:08.660
The fact that we have this
compile step to compile

00:25:08.660 --> 00:25:11.870
everything to JavaScript, we can
actually also compile all

00:25:11.870 --> 00:25:15.100
the great web components work
that you might build with

00:25:15.100 --> 00:25:17.480
custom elements and custom
templates all that stuff.

00:25:17.480 --> 00:25:20.400
We can actually also compile
that all back down to vanilla

00:25:20.400 --> 00:25:23.560
JavaScript and vanilla
HTML, which is great.

00:25:23.560 --> 00:25:26.440
So that means that via the Dart
tool chain, you get to

00:25:26.440 --> 00:25:29.170
use, actually, all the stuff
we're talking about today in

00:25:29.170 --> 00:25:31.050
app that run across
modern browsers.

00:25:31.050 --> 00:25:34.010
And you don't have to wait for
them all to implement with

00:25:34.010 --> 00:25:35.970
these really cool features.

00:25:35.970 --> 00:25:38.460
So it's very cool, and this
audience, I think, will

00:25:38.460 --> 00:25:41.820
appreciate the design
of Dart as well.

00:25:41.820 --> 00:25:44.350
So the question we always get
with Dart is why are you guys

00:25:44.350 --> 00:25:45.330
building a new language?

00:25:45.330 --> 00:25:47.420
And to which we say,
why progress?

00:25:47.420 --> 00:25:48.670
Why innovation?

00:25:51.000 --> 00:25:53.830
But really, it's about we
really want to help more

00:25:53.830 --> 00:25:57.970
developers for more platforms
build more complex,

00:25:57.970 --> 00:26:00.680
interesting, full-featured
offline enabled 60 frames per

00:26:00.680 --> 00:26:04.030
second modern HTML5 apps
for the modern web.

00:26:04.030 --> 00:26:06.020
And these are just some of the
screen shots of the types of

00:26:06.020 --> 00:26:09.510
apps I think should be able to
be built by anybody in this

00:26:09.510 --> 00:26:12.620
room with relative ease
and happiness today.

00:26:12.620 --> 00:26:14.310
This should be possible.

00:26:14.310 --> 00:26:17.560
And we're building Dart to
help make that possible.

00:26:17.560 --> 00:26:19.550
So I'm going to try to blow
through this Dart stuff as

00:26:19.550 --> 00:26:21.680
quickly as I can to get back to
the how do you actually the

00:26:21.680 --> 00:26:22.450
web component stuff?

00:26:22.450 --> 00:26:25.300
So forgive me if I
go a little fast.

00:26:25.300 --> 00:26:28.340
OK, so there's one Java slide,
so I don't feel so bad.

00:26:28.340 --> 00:26:29.700
Now of course, you probably
wouldn't write this code

00:26:29.700 --> 00:26:30.930
exactly like this,
but I need to

00:26:30.930 --> 00:26:32.240
illustrate a couple of points.

00:26:32.240 --> 00:26:37.250
And so here is an equivalent,
yet more of the Dart code.

00:26:37.250 --> 00:26:40.460
Now right away, you can say,
oh, OK, that's cool.

00:26:40.460 --> 00:26:42.860
In fact, that actually looks a
little bit boring, which is

00:26:42.860 --> 00:26:44.130
exactly the point.

00:26:44.130 --> 00:26:46.010
We took a little flak when
we launched Dart.

00:26:46.010 --> 00:26:47.770
People were like, why didn't
you build the next HasCl?

00:26:47.770 --> 00:26:49.910
And we said, well, we wanted
more than five users.

00:26:49.910 --> 00:26:52.530
So we knew that we needed
to have curly braces and

00:26:52.530 --> 00:26:53.280
semicolons.

00:26:53.280 --> 00:26:55.240
But as all you guys I
think can attest,

00:26:55.240 --> 00:26:56.130
you're probably OK.

00:26:56.130 --> 00:26:58.020
I think I can read that.

00:26:58.020 --> 00:27:01.680
But we don't have to just
completely make it just

00:27:01.680 --> 00:27:02.970
totally pedestrian.

00:27:02.970 --> 00:27:06.150
We can say, hey, this is a
chance to, I think, clean up

00:27:06.150 --> 00:27:07.520
some of the stuff that we
might be dealing with.

00:27:07.520 --> 00:27:11.250
So I'm going to point out
a couple of features.

00:27:11.250 --> 00:27:11.670
Yeah.

00:27:11.670 --> 00:27:12.810
I'll just use this.

00:27:12.810 --> 00:27:14.870
Couple feature that I think
really sell it.

00:27:14.870 --> 00:27:17.860
So right away, we have full
support for classes.

00:27:17.860 --> 00:27:19.920
So that's really cool.

00:27:19.920 --> 00:27:20.650
OK.

00:27:20.650 --> 00:27:22.250
What do we always do
in constructors?

00:27:22.250 --> 00:27:24.260
This dot x equals x, this
dot y equals y.

00:27:24.260 --> 00:27:26.300
This is getting really boring.

00:27:26.300 --> 00:27:30.040
And we always name the method
parameters the same as the

00:27:30.040 --> 00:27:31.390
fields for your class.

00:27:31.390 --> 00:27:33.630
And Dart starts says, hey, if
they're the same, then just

00:27:33.630 --> 00:27:36.600
simply put this dot in front of
the constructor parameter.

00:27:36.600 --> 00:27:40.000
And this is syntactic sugar for
we'll take care of this

00:27:40.000 --> 00:27:41.480
dot amount equals amount.

00:27:41.480 --> 00:27:42.840
So I love that.

00:27:42.840 --> 00:27:45.850
The next great thing is
named constructors.

00:27:45.850 --> 00:27:50.440
Now, Dart is an optionally typed
dynamic language, which

00:27:50.440 --> 00:27:52.390
means you don't have
method overloading.

00:27:52.390 --> 00:27:54.895
Which is not a big deal in
methods, because of course you

00:27:54.895 --> 00:27:57.350
can create any named methods
that you want.

00:27:57.350 --> 00:27:59.720
But in constructors, typically,
in traditional

00:27:59.720 --> 00:28:02.470
structure languages, the name of
the constructor is the name

00:28:02.470 --> 00:28:03.890
of the class.

00:28:03.890 --> 00:28:06.080
So we introduced named
constructors here to help to

00:28:06.080 --> 00:28:08.860
differentiate the different
types of constructors and what

00:28:08.860 --> 00:28:09.590
they may do.

00:28:09.590 --> 00:28:11.670
Which I love, because for
instance, you might think of

00:28:11.670 --> 00:28:15.630
an object, you might have that
can take a string that might

00:28:15.630 --> 00:28:17.630
be either be XML or JSON.

00:28:17.630 --> 00:28:21.650
So in Dart, you can easily say
person dot from JSON, or

00:28:21.650 --> 00:28:24.680
person dot from XML, even though
they both take strings.

00:28:24.680 --> 00:28:27.500
So the call site itself gets
really, really clear.

00:28:27.500 --> 00:28:28.590
We're going to jump down here.

00:28:28.590 --> 00:28:32.265
We have method overriding,
so you can do

00:28:32.265 --> 00:28:34.340
plus, minus, et cetera.

00:28:34.340 --> 00:28:37.380
And then actually this and the
two string here use the fat

00:28:37.380 --> 00:28:39.895
arrow syntax for simple,
one line functions.

00:28:43.450 --> 00:28:44.270
Excuse me.

00:28:44.270 --> 00:28:47.300
So this is just syntactic sugar
for return amount dot

00:28:47.300 --> 00:28:48.520
two string, et cetera.

00:28:48.520 --> 00:28:51.330
Now, these simple, fat arrow,
one line functions are perfect

00:28:51.330 --> 00:28:54.990
for things like event handling
when you want to kind of in

00:28:54.990 --> 00:28:58.370
line the handling of callbacks
or events.

00:28:58.370 --> 00:29:00.040
And then one other thing I think
just to point out here

00:29:00.040 --> 00:29:03.140
in the syntax, this bad boy
right here wrapped in curly

00:29:03.140 --> 00:29:05.820
braces is an optional
parameter.

00:29:05.820 --> 00:29:08.490
So you may or may not,
or you can or cannot

00:29:08.490 --> 00:29:10.080
pass in charge tax.

00:29:10.080 --> 00:29:11.820
And because it's an optional
parameter, we also have

00:29:11.820 --> 00:29:12.535
default values.

00:29:12.535 --> 00:29:14.140
In this case, faults.

00:29:14.140 --> 00:29:16.510
So hopefully it looks familiar,
but also cleans up

00:29:16.510 --> 00:29:20.060
and adds a little bit nice
syntactic sugar and terseness.

00:29:20.060 --> 00:29:24.010
OK, who knows JavaScript, and
who knows what this would do

00:29:24.010 --> 00:29:26.850
if this was JavaScript?

00:29:26.850 --> 00:29:28.315
This would blow up.

00:29:28.315 --> 00:29:31.330
In Dart, we have lexical this,
which is fantastic.

00:29:31.330 --> 00:29:33.210
So in Dart, what you see
is what you get.

00:29:33.210 --> 00:29:36.440
How you write the code,
statically analyzable.

00:29:36.440 --> 00:29:38.380
Everything's lexical scope,
including this.

00:29:38.380 --> 00:29:40.870
And so everything just
works, and, oh,

00:29:40.870 --> 00:29:41.810
this is the old syntax.

00:29:41.810 --> 00:29:44.610
So I'll change that.

00:29:44.610 --> 00:29:45.530
Note to self.

00:29:45.530 --> 00:29:46.830
OK.

00:29:46.830 --> 00:29:50.630
Now, I mentioned earlier that
Dart was a dynamic, optionally

00:29:50.630 --> 00:29:51.680
typed language.

00:29:51.680 --> 00:29:52.390
Now, what does that mean?

00:29:52.390 --> 00:29:55.140
You can start writing your
programs without the use of

00:29:55.140 --> 00:29:58.220
static type annotations, which
is great because at the very

00:29:58.220 --> 00:30:00.570
beginning when I'm just starting
out my brand new idea

00:30:00.570 --> 00:30:02.590
that I'm going to sell to Y
Combinator for a jillion

00:30:02.590 --> 00:30:06.160
dollars, I don't have to worry
about cumbersome, complex

00:30:06.160 --> 00:30:08.840
class hierarchies right
when I get started.

00:30:08.840 --> 00:30:10.380
I don't have to worry about
abstract class factory, class

00:30:10.380 --> 00:30:11.610
factories, and all that stuff.

00:30:11.610 --> 00:30:13.770
I just want to start writing
code that works.

00:30:13.770 --> 00:30:17.190
Once I get comfortable with the
design and things start to

00:30:17.190 --> 00:30:19.710
lock down, then I start adding
the type annotations in.

00:30:19.710 --> 00:30:21.310
So when we say it's a scalable
language, that's

00:30:21.310 --> 00:30:22.690
kind of what we mean.

00:30:22.690 --> 00:30:25.790
Now, of course you could write
code like the top, but then

00:30:25.790 --> 00:30:28.440
you better pray somebody wrote
comments in there.

00:30:28.440 --> 00:30:30.390
But then even if they did write
comments, then the tools

00:30:30.390 --> 00:30:31.350
don't know how to read it.

00:30:31.350 --> 00:30:34.350
And so what we generally
recommend is use the type

00:30:34.350 --> 00:30:37.270
annotations like this and
like this, et cetera.

00:30:37.270 --> 00:30:38.990
Here's the return type.

00:30:38.990 --> 00:30:42.910
Use the type annotations at the
surface area of your code.

00:30:42.910 --> 00:30:44.700
So any code that you're going to
give to another developer,

00:30:44.700 --> 00:30:47.410
say interact with, use the type
annotations, and I think

00:30:47.410 --> 00:30:50.250
we all can attest to
why that is good.

00:30:50.250 --> 00:30:52.990
OK, so back to the browser.

00:30:52.990 --> 00:30:55.110
Making our way back to kind
of web components here.

00:30:55.110 --> 00:30:58.380
When you build a new language
and new libraries like with

00:30:58.380 --> 00:31:02.290
full collections, et cetera,
we want to take this

00:31:02.290 --> 00:31:04.710
opportunity to also make
programming the browser feel

00:31:04.710 --> 00:31:07.480
very natural and native to
Dart programming as well.

00:31:07.480 --> 00:31:10.330
Everyone knows the DOM, the
DOM is language agnostic,

00:31:10.330 --> 00:31:12.760
which means it never feels
very natural to anybody

00:31:12.760 --> 00:31:15.180
programming in an actual
language, which partly

00:31:15.180 --> 00:31:18.470
explains why JQuery is so
popular, and made programming

00:31:18.470 --> 00:31:20.640
the DOM feel like JavaScript.

00:31:20.640 --> 00:31:22.870
So we can make programming
the DOM feel like Dart.

00:31:22.870 --> 00:31:25.710
And again, if we have actual
support baked into the

00:31:25.710 --> 00:31:28.860
platform for real collections,
then why not use those same

00:31:28.860 --> 00:31:30.140
collections and their
semantics and

00:31:30.140 --> 00:31:31.740
APIs for the browser?

00:31:31.740 --> 00:31:34.500
So we can use real constructors
like new button

00:31:34.500 --> 00:31:38.730
element, and if classes is
just a collection of CSS

00:31:38.730 --> 00:31:41.830
classes, then this is
an actual Dart list.

00:31:41.830 --> 00:31:43.770
And you can interact with those
CSS classes like you

00:31:43.770 --> 00:31:44.850
would any other Dart list.

00:31:44.850 --> 00:31:48.170
Add, remove, index, all
that good stuff.

00:31:48.170 --> 00:31:51.570
Here's a good example of how
you might have an on click.

00:31:51.570 --> 00:31:53.380
So a done on click dot listen.

00:31:53.380 --> 00:31:56.850
Now what's going on here, this
is using our Streams API for a

00:31:56.850 --> 00:31:58.380
stream of events.

00:31:58.380 --> 00:32:00.675
When you bake into the platform
these abstractions

00:32:00.675 --> 00:32:06.610
that everyone can use, now HTML
events, file I/O, network

00:32:06.610 --> 00:32:09.290
I/O, all these things can
now all use exactly the

00:32:09.290 --> 00:32:10.330
same type of API.

00:32:10.330 --> 00:32:13.020
So programming the browser feels
like programming Dart.

00:32:13.020 --> 00:32:16.460
And even child nodes can be
themselves Dart collections.

00:32:16.460 --> 00:32:19.150
So I guess the point here is
if you know how to program

00:32:19.150 --> 00:32:22.290
Dart, then you'll know how
to program the browser.

00:32:22.290 --> 00:32:26.150
But we seem to be repeating
button here all the time.

00:32:26.150 --> 00:32:28.590
So again, I think we can be a
little bit more terse and

00:32:28.590 --> 00:32:31.700
helpful, and for all you small
talkers in the room, we

00:32:31.700 --> 00:32:34.190
brought along method
cascades as well.

00:32:34.190 --> 00:32:36.760
And so what I like about this
is it's really fantastic for

00:32:36.760 --> 00:32:38.550
builder-type APIs.

00:32:38.550 --> 00:32:39.530
Like the DOM--

00:32:39.530 --> 00:32:41.640
you're always doing DOM stuff
like set the ID, set the

00:32:41.640 --> 00:32:43.920
classes, set the display
property,

00:32:43.920 --> 00:32:45.652
et cetera, et cetera.

00:32:45.652 --> 00:32:48.120
The neat thing about the double
dot syntax here is they

00:32:48.120 --> 00:32:50.980
all apply to the first
expression before that first

00:32:50.980 --> 00:32:52.110
double dot dot.

00:32:52.110 --> 00:32:54.700
But then the really neat thing
is what's actually returned

00:32:54.700 --> 00:32:58.740
from this whole thing here is
that first expression, which

00:32:58.740 --> 00:33:00.950
is why button is equal to a
new button element, which

00:33:00.950 --> 00:33:03.520
happens to have text classes,
et cetera, et cetera.

00:33:03.520 --> 00:33:04.130
So I like this.

00:33:04.130 --> 00:33:04.710
I really like this.

00:33:04.710 --> 00:33:07.310
It's nice syntactic sugar.

00:33:07.310 --> 00:33:10.140
OK, we're getting close.

00:33:10.140 --> 00:33:11.880
So now that you're writing
browser programming, you might

00:33:11.880 --> 00:33:13.370
be saying, well, how
do I get-- oh, yes.

00:33:13.370 --> 00:33:14.675
Question at the top?

00:33:14.675 --> 00:33:15.925
[INAUDIBLE]

00:33:20.615 --> 00:33:23.430
Is there someone in the
back can drop the

00:33:23.430 --> 00:33:24.400
spots on the screen?

00:33:24.400 --> 00:33:25.650
Is the font hard to see?

00:33:28.220 --> 00:33:28.800
I don't know.

00:33:28.800 --> 00:33:29.870
Sorry.

00:33:29.870 --> 00:33:31.240
I'm not sure.

00:33:31.240 --> 00:33:32.990
I can try to--

00:33:32.990 --> 00:33:35.450
yeah, sorry.

00:33:35.450 --> 00:33:36.000
OK.

00:33:36.000 --> 00:33:38.490
We'll see what I can do when
I pull up another slide.

00:33:38.490 --> 00:33:40.830
OK, so we think compile all this
stuff to JavaScript via

00:33:40.830 --> 00:33:42.570
our Dart JS compiler.

00:33:42.570 --> 00:33:44.450
So everything we're talking
about here today gets deployed

00:33:44.450 --> 00:33:47.070
across the modern web,
mobile, and desktop.

00:33:47.070 --> 00:33:48.540
Now, that's all cool.

00:33:48.540 --> 00:33:51.600
But of course, the compilers
like GWT or Dart to JS are

00:33:51.600 --> 00:33:55.410
spitting out code generated by
machines for machines, which

00:33:55.410 --> 00:33:58.440
means they've been obfuscated
and minified, et cetera.

00:33:58.440 --> 00:34:02.130
Now, that is hell on people
that want to debug stuff.

00:34:02.130 --> 00:34:06.790
So our Dart to JS compiler also
spits out a source map.

00:34:06.790 --> 00:34:09.260
Now, a source map is a really
cool file that says OK, take

00:34:09.260 --> 00:34:13.940
the input, the Dart code and map
it to the output, which is

00:34:13.940 --> 00:34:14.989
JavaScript.

00:34:14.989 --> 00:34:17.239
And so that you can say OK, this
line over here actually

00:34:17.239 --> 00:34:19.400
maps to these lines, et
cetera, et cetera.

00:34:19.400 --> 00:34:20.820
Now, why is this important?

00:34:20.820 --> 00:34:24.170
Well we can go over to the
Dart Editor, and this

00:34:24.170 --> 00:34:25.290
hopefully looks really
familiar.

00:34:25.290 --> 00:34:29.800
So part of the Dart project is
an editor that's been built to

00:34:29.800 --> 00:34:30.850
help you edit Dart code.

00:34:30.850 --> 00:34:33.330
Also, IntelliJ has an Dart
plug-in as well.

00:34:33.330 --> 00:34:34.525
But what I'm going to illustrate
here, I'm just

00:34:34.525 --> 00:34:36.860
pulling up one of the samples.

00:34:36.860 --> 00:34:39.090
And we're going to run
as JavaScript.

00:34:39.090 --> 00:34:42.270
So it's compiling the Dart code
into JavaScript here.

00:34:42.270 --> 00:34:42.860
OK.

00:34:42.860 --> 00:34:43.280
Kind of cool.

00:34:43.280 --> 00:34:44.730
We got some solar
system stuff.

00:34:44.730 --> 00:34:47.370
But again, so this
is stock Chrome.

00:34:47.370 --> 00:34:49.920
This knows nothing about the
Dart language or the Dart

00:34:49.920 --> 00:34:50.870
virtual machine, or anything.

00:34:50.870 --> 00:34:54.080
So we're going to open up dev
tools, and we're going to

00:34:54.080 --> 00:34:56.429
break this out.

00:34:56.429 --> 00:34:59.550
And we're going to
go to source.

00:34:59.550 --> 00:35:02.110
And already here, listing in
the sources of dev tools we

00:35:02.110 --> 00:35:03.620
see Dart, Dart, Dart,
Dart, Dart.

00:35:03.620 --> 00:35:05.340
Which is actually kind of cool,
because that means my

00:35:05.340 --> 00:35:07.250
dev tools, even though it
doesn't know anything

00:35:07.250 --> 00:35:13.330
intrinsically about Dart, it's
being told via the source map

00:35:13.330 --> 00:35:16.325
that hey, hide the JavaScript
that's generated and present

00:35:16.325 --> 00:35:20.150
to the developer, the debugger
all the great Dart code.

00:35:20.150 --> 00:35:21.900
So let's just scroll down to--

00:35:27.570 --> 00:35:29.020
there's kind of a
good place here.

00:35:29.020 --> 00:35:29.240
Yeah, OK.

00:35:29.240 --> 00:35:31.020
So let's set a break point.

00:35:31.020 --> 00:35:35.740
So I set a break point on Dart
code in Chrome dev tools,

00:35:35.740 --> 00:35:38.490
which via the source maps
actually sets the right break

00:35:38.490 --> 00:35:39.850
point in the JavaScript.

00:35:39.850 --> 00:35:42.930
And you can see that the program
itself stops running.

00:35:42.930 --> 00:35:46.140
And we can use traditional kind
of debugging as well, as

00:35:46.140 --> 00:35:47.150
we can move through this.

00:35:47.150 --> 00:35:49.870
OK, we see the planets changed,
and all the cool x

00:35:49.870 --> 00:35:50.670
and y stuff.

00:35:50.670 --> 00:35:52.890
So I guess the point here
is that yes, we're

00:35:52.890 --> 00:35:53.720
writing Dart code.

00:35:53.720 --> 00:35:55.650
Yes, we're compiling JavaScript,
but the debugging

00:35:55.650 --> 00:35:58.620
story is still really good.

00:35:58.620 --> 00:35:59.870
Let's kill that.

00:36:02.562 --> 00:36:03.050
Oh, here.

00:36:03.050 --> 00:36:04.060
OK.

00:36:04.060 --> 00:36:06.255
So another really neat feature,
if you've got a

00:36:06.255 --> 00:36:09.690
statically analyzable language
with optional types and a

00:36:09.690 --> 00:36:12.390
strong tool set is you get to
deal with a problem that

00:36:12.390 --> 00:36:14.390
plagues web development today.

00:36:14.390 --> 00:36:18.020
So to set it up here, size,
of course, is incredibly

00:36:18.020 --> 00:36:21.840
important to any web
app developer.

00:36:21.840 --> 00:36:24.460
Now this is why if you go to
any, say, JavaScript library

00:36:24.460 --> 00:36:27.970
out there, the top marketing
material they always have is

00:36:27.970 --> 00:36:29.880
how small they are, you know?

00:36:29.880 --> 00:36:33.040
JQuery gets to Zepto, Zepto
goes to Dojo, which has

00:36:33.040 --> 00:36:36.280
literally I think something
they call Nano.

00:36:36.280 --> 00:36:37.160
Well, that's good.

00:36:37.160 --> 00:36:38.900
Of course you want to pay
attention to the library, but

00:36:38.900 --> 00:36:41.350
you're still paying the complete
library tax every

00:36:41.350 --> 00:36:44.800
time you include one of these
libraries in there.

00:36:44.800 --> 00:36:46.300
Well, it turns out that,
again, if you have a

00:36:46.300 --> 00:36:48.860
statically analyzable language,
you can perform a

00:36:48.860 --> 00:36:52.530
technique called tree shaking,
which takes a holistic look, a

00:36:52.530 --> 00:36:55.230
whole world look at your
program, follows it from the

00:36:55.230 --> 00:36:58.570
start all the way through the
possible paths, including all

00:36:58.570 --> 00:37:01.650
of the linked in or imported
libraries, and generates a

00:37:01.650 --> 00:37:05.070
pruned, or tree shaken
conversion of that application

00:37:05.070 --> 00:37:08.030
such that it only contains the
code and the function, the

00:37:08.030 --> 00:37:11.310
classes that you actually
use in your program.

00:37:11.310 --> 00:37:13.660
So this here illustrates it.

00:37:13.660 --> 00:37:16.500
We're importing a library which
itself has some methods,

00:37:16.500 --> 00:37:19.420
and even our program has some
methods that are never used.

00:37:19.420 --> 00:37:22.800
And what's generated in the
output is simply just the main

00:37:22.800 --> 00:37:25.380
function and the two functions
that we actually call.

00:37:25.380 --> 00:37:27.970
And our Dart tool chain actually
does this for you, so

00:37:27.970 --> 00:37:30.850
you can now start looking at
libraries and packages that

00:37:30.850 --> 00:37:34.710
people make in terms of how good
they are, instead of how

00:37:34.710 --> 00:37:36.170
Femto they are.

00:37:36.170 --> 00:37:38.300
So I think that's
kind of cool.

00:37:38.300 --> 00:37:42.170
OK, one last demo of the Dart
ecosystem here is our package

00:37:42.170 --> 00:37:43.020
management.

00:37:43.020 --> 00:37:45.230
We affectionately call
it Pub, because you

00:37:45.230 --> 00:37:46.840
play darts in a pub.

00:37:46.840 --> 00:37:50.480
But the neat thing about this is
just like Node has NPM and

00:37:50.480 --> 00:37:54.140
Java has Maven, and Ruby has
Gems, we have a neat system

00:37:54.140 --> 00:37:55.370
called Pub, and I'll just

00:37:55.370 --> 00:37:57.170
illustrate that really quickly.

00:37:57.170 --> 00:37:58.550
Let's load up an app here.

00:37:58.550 --> 00:38:01.010
I've only written seven lines
of code, but I've imported

00:38:01.010 --> 00:38:02.460
three different packages.

00:38:02.460 --> 00:38:04.990
Each of these packages I didn't
write, but I was able

00:38:04.990 --> 00:38:08.410
to go ahead and use a simple
YAML file to declare those

00:38:08.410 --> 00:38:09.730
dependencies.

00:38:09.730 --> 00:38:11.750
And if we go up here,
the tool chain.

00:38:11.750 --> 00:38:13.300
And don't be fooled.

00:38:13.300 --> 00:38:15.430
You can run all this stuff on
the command line too, I just

00:38:15.430 --> 00:38:17.120
happen to like running
all the stuff.

00:38:17.120 --> 00:38:19.485
So now it's going on to the
interwebs, and it's

00:38:19.485 --> 00:38:21.770
downloading all the packages,
symlinks, everything.

00:38:21.770 --> 00:38:23.220
So when we go back--

00:38:23.220 --> 00:38:25.160
that's a bug.

00:38:25.160 --> 00:38:25.390
OK.

00:38:25.390 --> 00:38:26.360
Now they're gone.

00:38:26.360 --> 00:38:28.320
OK.

00:38:28.320 --> 00:38:33.150
And now we can run the
program, and here.

00:38:33.150 --> 00:38:35.170
Everything just works.

00:38:35.170 --> 00:38:37.840
They're so cute.

00:38:37.840 --> 00:38:39.650
But what's really awesome about
this is I only wrote

00:38:39.650 --> 00:38:40.240
seven lines of code.

00:38:40.240 --> 00:38:43.340
And of course, again, talking,
I think to Java, of course

00:38:43.340 --> 00:38:44.820
this should just
work like this.

00:38:44.820 --> 00:38:47.300
But the widget itself
is a package.

00:38:47.300 --> 00:38:49.060
The frame itself as a package.

00:38:49.060 --> 00:38:50.660
The cat pic itself
as a package.

00:38:50.660 --> 00:38:53.650
And because you have classes and
libraries all baked into

00:38:53.650 --> 00:38:57.070
the language, you can compose
these things very, very simply

00:38:57.070 --> 00:38:59.730
and know while you're editing
if it's going to work.

00:38:59.730 --> 00:39:01.130
So I really like it.

00:39:01.130 --> 00:39:03.400
And you can go onto Pub, you
can see database drivers on

00:39:03.400 --> 00:39:06.830
there and crypto stuff, and
all this neat stuff.

00:39:06.830 --> 00:39:08.290
OK.

00:39:08.290 --> 00:39:11.560
Oh, and we have a virtual
machine to

00:39:11.560 --> 00:39:12.950
run Dart code natively.

00:39:12.950 --> 00:39:14.130
There's no compile step.

00:39:14.130 --> 00:39:17.150
It's much more like Ruby or
Python, you just run the code.

00:39:17.150 --> 00:39:19.460
And of course, if you're
building a new VM, and the

00:39:19.460 --> 00:39:24.570
guys that are building the Dart
VM and leading the Dart

00:39:24.570 --> 00:39:26.170
project are actually
also the guys that

00:39:26.170 --> 00:39:28.090
built V8 and HotSpot.

00:39:28.090 --> 00:39:29.750
So if anyone knows how
to make stuff fast, I

00:39:29.750 --> 00:39:30.610
think it's these guys.

00:39:30.610 --> 00:39:33.790
And it's still early, but I
think we have a good runway

00:39:33.790 --> 00:39:35.250
here for us.

00:39:35.250 --> 00:39:36.450
OK, cool.

00:39:36.450 --> 00:39:37.955
So that's the short, short,
short, short,

00:39:37.955 --> 00:39:38.990
short version of Dart.

00:39:38.990 --> 00:39:41.540
Let's bring it back to Dart
with web components.

00:39:41.540 --> 00:39:43.570
It's like peanut butter
and chocolate.

00:39:43.570 --> 00:39:46.510
But for me, it's about
programming with tools, and

00:39:46.510 --> 00:39:50.170
the library and languages that
exactly meet and exceed my

00:39:50.170 --> 00:39:52.650
expectations, especially coming
from my background.

00:39:52.650 --> 00:39:55.320
And also building with these
encapsulated, reusable

00:39:55.320 --> 00:39:59.140
components and widgets
on the web today.

00:39:59.140 --> 00:40:01.150
OK, so that brings us
to Dart Web UI.

00:40:01.150 --> 00:40:03.390
This is really where the
rubber hits the road.

00:40:03.390 --> 00:40:07.780
The Dart Web UI package is a
web components polyfill.

00:40:07.780 --> 00:40:12.250
A polyfill is library or code
that makes a new feature

00:40:12.250 --> 00:40:14.670
available to developers today.

00:40:14.670 --> 00:40:16.105
So you don't have to wait
for everyone to go

00:40:16.105 --> 00:40:17.170
implement the stuff.

00:40:17.170 --> 00:40:19.100
But on top of the web component
stuff, the stuff

00:40:19.100 --> 00:40:21.510
that we saw earlier, which was
the declarative a new elements

00:40:21.510 --> 00:40:25.650
and templates, the web UI also
has declarative dynamic data

00:40:25.650 --> 00:40:28.250
driven two-way live
data mining.

00:40:28.250 --> 00:40:30.760
I think that was a lot of buzz
words, but we'll see an

00:40:30.760 --> 00:40:32.690
example of that in a moment.

00:40:32.690 --> 00:40:34.610
This is very similar, I think,
to angular, if you guys are

00:40:34.610 --> 00:40:36.800
familiar with angular.

00:40:36.800 --> 00:40:38.550
And something that's very
important to us is very fast

00:40:38.550 --> 00:40:39.770
developers cycles.

00:40:39.770 --> 00:40:41.320
One thing I want to make crystal
clear, and we'll see

00:40:41.320 --> 00:40:43.600
in a minute is that because
we're talking about a compile

00:40:43.600 --> 00:40:45.246
step, does not mean you have
to wait for any of

00:40:45.246 --> 00:40:46.150
this stuff to happen.

00:40:46.150 --> 00:40:48.910
In fact, right now it's on
the order of hundreds of

00:40:48.910 --> 00:40:51.900
milliseconds to make all
this stuff work.

00:40:51.900 --> 00:40:54.670
And as is the common theme with
all this stuff, it all

00:40:54.670 --> 00:40:57.120
compiles on vanilla JavaScript
and HTML, and works across

00:40:57.120 --> 00:40:59.250
modern browsers today.

00:40:59.250 --> 00:40:59.670
Cool.

00:40:59.670 --> 00:41:00.520
Let's get to the demo.

00:41:00.520 --> 00:41:02.170
So the very first thing
we're going to show

00:41:02.170 --> 00:41:03.570
is simple data binding.

00:41:07.010 --> 00:41:09.220
How are we doing so far?

00:41:09.220 --> 00:41:09.840
OK.

00:41:09.840 --> 00:41:10.170
Cool.

00:41:10.170 --> 00:41:11.420
All right.

00:41:13.790 --> 00:41:14.580
Let's do the first one here.

00:41:14.580 --> 00:41:17.790
So this is data binding.

00:41:17.790 --> 00:41:19.400
How's that?

00:41:19.400 --> 00:41:20.678
OK?

00:41:20.678 --> 00:41:22.100
OK.

00:41:22.100 --> 00:41:25.310
This is an HTML file,
a Hello World.

00:41:25.310 --> 00:41:26.680
Couple things I want to
point out to you.

00:41:26.680 --> 00:41:27.890
The double curly braces.

00:41:27.890 --> 00:41:30.250
This defines the data binding.

00:41:30.250 --> 00:41:33.670
So I have some variable called
superlative that I want its

00:41:33.670 --> 00:41:36.550
value to appear here, and I
want not only its value to

00:41:36.550 --> 00:41:39.130
appear here once, I want
it to be live bound.

00:41:39.130 --> 00:41:41.260
So any time I update
superlative, I want the

00:41:41.260 --> 00:41:44.280
infrastructure to go update
this point in

00:41:44.280 --> 00:41:46.030
the HTML right here.

00:41:46.030 --> 00:41:48.920
Another neat bit here is the
declarative event handling, on

00:41:48.920 --> 00:41:51.720
dash click equals change it.

00:41:51.720 --> 00:41:52.650
Does what it says.

00:41:52.650 --> 00:41:56.880
So let's look at
the code here.

00:41:56.880 --> 00:41:59.780
I think one of the important
points about this is very

00:41:59.780 --> 00:42:02.420
declarative embracing
the DOM, right?

00:42:02.420 --> 00:42:04.610
So it's all just in the HTML.

00:42:04.610 --> 00:42:07.510
Here's the Dart code that you
would write to make this work.

00:42:07.510 --> 00:42:09.280
Here's the superlative
variable that

00:42:09.280 --> 00:42:11.260
we're talking about.

00:42:11.260 --> 00:42:13.660
Here's the change it
top level function.

00:42:13.660 --> 00:42:16.150
Neat thing about Dart, top level
functions just work.

00:42:16.150 --> 00:42:18.500
So you don't have to wrap
everything in classes.

00:42:18.500 --> 00:42:21.140
And when this runs, it simply
says set the superlative

00:42:21.140 --> 00:42:23.930
variable from some random
set of alternatives.

00:42:23.930 --> 00:42:25.180
OK.

00:42:26.800 --> 00:42:30.240
So let's go up to the compiled
version, and

00:42:30.240 --> 00:42:33.610
let's just run this.

00:42:33.610 --> 00:42:34.650
OK, MDV.

00:42:34.650 --> 00:42:36.580
MDV stands for Model
Driven Views.

00:42:36.580 --> 00:42:39.705
It's a series of techniques and
behavior to do basically

00:42:39.705 --> 00:42:40.170
what it says.

00:42:40.170 --> 00:42:42.450
Take your models and drive
the views dynamically.

00:42:42.450 --> 00:42:44.820
Let's go ahead and click that
button, and of course it's all

00:42:44.820 --> 00:42:47.460
working, and of course the
random, it sometimes picks the

00:42:47.460 --> 00:42:47.850
same number.

00:42:47.850 --> 00:42:49.300
But you get the idea.

00:42:49.300 --> 00:42:51.920
But the neat thing here is that
I only declaratively set

00:42:51.920 --> 00:42:53.400
up the button, and I said
when it's clicked,

00:42:53.400 --> 00:42:54.660
go call this method.

00:42:54.660 --> 00:42:57.450
And then the other thing I
declared is hey, put whatever

00:42:57.450 --> 00:42:59.410
is in superlative here.

00:42:59.410 --> 00:43:03.870
But the web UI package, which is
what's driving all this has

00:43:03.870 --> 00:43:05.980
all the data binding watchers.

00:43:05.980 --> 00:43:09.800
It has the dispatcher and sets
up all the generated code for

00:43:09.800 --> 00:43:11.730
us to make all this
stuff work.

00:43:14.270 --> 00:43:16.230
So that's cool.

00:43:16.230 --> 00:43:18.110
Let's skip over this because I'm
running out of time here.

00:43:18.110 --> 00:43:18.730
Conditionals.

00:43:18.730 --> 00:43:19.980
OK, this is a good one.

00:43:25.730 --> 00:43:26.210
OK.

00:43:26.210 --> 00:43:27.510
So here's another HTML file.

00:43:27.510 --> 00:43:29.870
Again, it all really starts in
HTML, which is hopefully a

00:43:29.870 --> 00:43:30.610
common theme here.

00:43:30.610 --> 00:43:33.640
Just be very declarative,
work with the DOM.

00:43:33.640 --> 00:43:34.250
Here we go.

00:43:34.250 --> 00:43:38.150
So we've got a div here that I
want itself to be a template,

00:43:38.150 --> 00:43:41.910
but I want this template to only
render if language choice

00:43:41.910 --> 00:43:44.010
is not null, and language
choice is not empty.

00:43:44.010 --> 00:43:45.610
So again, I'm just being
very declarative

00:43:45.610 --> 00:43:46.260
about all this stuff.

00:43:46.260 --> 00:43:48.980
But remember, the templates from
earlier, this is exactly

00:43:48.980 --> 00:43:50.670
what we're talking about here.

00:43:50.670 --> 00:43:54.760
And then we also have one way
data binding here from the

00:43:54.760 --> 00:43:57.710
selects value to set this
language choice.

00:43:57.710 --> 00:44:00.890
So you can reason about this
application simply by looking

00:44:00.890 --> 00:44:02.690
only at the HTML, which
is really cool.

00:44:02.690 --> 00:44:04.240
If the select ever changes,
update the

00:44:04.240 --> 00:44:05.830
value to language choice.

00:44:05.830 --> 00:44:09.600
And then if language choice is
ever not null or not empty,

00:44:09.600 --> 00:44:11.950
render the contents
in this template.

00:44:11.950 --> 00:44:14.830
So we can do this one really
quickly as well.

00:44:14.830 --> 00:44:16.690
Now, this stuff's been
all-- actually, here.

00:44:16.690 --> 00:44:19.590
I'm going to show a demo.

00:44:19.590 --> 00:44:22.290
OK, so this is the Dart
code for person.

00:44:22.290 --> 00:44:24.260
And then notice how I have
nothing selected, so the

00:44:24.260 --> 00:44:25.220
template isn't rendered.

00:44:25.220 --> 00:44:26.560
And when I do have something
selected, the

00:44:26.560 --> 00:44:27.750
template does render.

00:44:27.750 --> 00:44:31.450
But let me just show you how
fast this workflow is.

00:44:31.450 --> 00:44:32.590
Hello.

00:44:32.590 --> 00:44:33.550
Jfokus.

00:44:33.550 --> 00:44:34.900
OK, ready?

00:44:34.900 --> 00:44:38.800
Saving the file, going back
over here, reload.

00:44:38.800 --> 00:44:39.060
Boom.

00:44:39.060 --> 00:44:40.180
It's that fast.

00:44:40.180 --> 00:44:43.330
And what happens is the editor
is watching for changes to all

00:44:43.330 --> 00:44:44.270
these files.

00:44:44.270 --> 00:44:46.650
If it notices any of my source
files change, it kicks off

00:44:46.650 --> 00:44:50.670
this build script, itself run
in Dart, which runs the

00:44:50.670 --> 00:44:52.530
compiler to all the
[INAUDIBLE]

00:44:52.530 --> 00:44:52.620
JavaScript.

00:44:52.620 --> 00:44:56.060
And by the time they get back
over and reload the page, it's

00:44:56.060 --> 00:44:56.810
all working.

00:44:56.810 --> 00:44:59.240
And so that's what we mean by
really fast developer time,

00:44:59.240 --> 00:45:00.900
which is really important
to web development.

00:45:00.900 --> 00:45:02.500
Web development is much--

00:45:02.500 --> 00:45:04.860
the reload is your compiler.

00:45:04.860 --> 00:45:10.920
OK, I am so out of time, so

00:45:10.920 --> 00:45:11.660
OK, let's do one more.

00:45:11.660 --> 00:45:14.580
Let's show the custom
elements here.

00:45:14.580 --> 00:45:17.460
And we're going to look at the
ludicrously simple to-do.

00:45:17.460 --> 00:45:19.480
I think to do is like
the new, or do you

00:45:19.480 --> 00:45:20.150
always hit the right.

00:45:20.150 --> 00:45:22.030
But this is a little bit
more complex than that.

00:45:22.030 --> 00:45:22.970
It kind of pulls it
all together.

00:45:22.970 --> 00:45:27.010
So here's my ludicrously
simple to-do app.

00:45:27.010 --> 00:45:29.600
Let's just put this in here
so it makes it quieter.

00:45:29.600 --> 00:45:30.220
Let's see.

00:45:30.220 --> 00:45:32.230
I've got a button to create
new to-do items.

00:45:32.230 --> 00:45:34.950
I've got a list of to-do,
and here's my custom

00:45:34.950 --> 00:45:36.080
element to-do item.

00:45:36.080 --> 00:45:39.760
And I'm binding in the Dart
object, the model object that

00:45:39.760 --> 00:45:42.760
is a to-do item into this
new custom element here.

00:45:42.760 --> 00:45:44.460
So let's just look
at what this is.

00:45:44.460 --> 00:45:45.700
Here's our custom element.

00:45:45.700 --> 00:45:48.920
It has a name, it has a
template, it has a script that

00:45:48.920 --> 00:45:51.400
points back over to
the behavior.

00:45:51.400 --> 00:45:53.980
Here's where we define the
actual behavior of the element

00:45:53.980 --> 00:45:56.340
that we are creating
in our world.

00:45:56.340 --> 00:45:59.020
And notice that this is very
much like an MVVM, pattern so

00:45:59.020 --> 00:46:01.950
we have our models, and then we
have our view models, which

00:46:01.950 --> 00:46:04.510
are essentially the
custom tags.

00:46:04.510 --> 00:46:06.170
So let's just go ahead
and run this.

00:46:06.170 --> 00:46:09.540
We see all this running.

00:46:09.540 --> 00:46:11.550
And I'm running in Dartium,
which is a build of Chromium

00:46:11.550 --> 00:46:14.570
with the Dart VM in it, which
makes testing even faster.

00:46:14.570 --> 00:46:16.540
So learn Dart.

00:46:16.540 --> 00:46:18.120
OK, you've attended my talk.

00:46:18.120 --> 00:46:19.420
So, whoops.

00:46:19.420 --> 00:46:20.410
Check, done.

00:46:20.410 --> 00:46:24.340
So anyway, custom elements,
data binding, real nested

00:46:24.340 --> 00:46:27.090
models, all that stuff
just works.

00:46:27.090 --> 00:46:30.150
OK, cool.

00:46:30.150 --> 00:46:30.410
OK.

00:46:30.410 --> 00:46:32.380
I think I can squeeze this in.

00:46:32.380 --> 00:46:34.640
If you've ever seen the
TodoMVC, we have an

00:46:34.640 --> 00:46:35.660
implementation of that.

00:46:35.660 --> 00:46:39.260
Everyone's implemented this, but
what I really like here is

00:46:39.260 --> 00:46:41.820
who's familiar with
Twitter Bootstrap?

00:46:41.820 --> 00:46:42.630
OK, awesome.

00:46:42.630 --> 00:46:46.400
So Bootstrap is a very easy to
use set of CSS conventions,

00:46:46.400 --> 00:46:48.200
but also some dynamic widgets.

00:46:48.200 --> 00:46:50.100
So of course the light bulb
should be going off and saying

00:46:50.100 --> 00:46:53.010
hey, dynamic widgets, we
have web components.

00:46:53.010 --> 00:46:55.840
And so we've implemented almost
all, if not all, the

00:46:55.840 --> 00:47:00.160
dynamic widgets in bootstrap
actually as reusable web

00:47:00.160 --> 00:47:03.120
components, and now the dream
has finally come true, right?

00:47:03.120 --> 00:47:04.190
This is really, really cool.

00:47:04.190 --> 00:47:06.040
So you can actually deal with
it in terms of custom

00:47:06.040 --> 00:47:10.080
elements, x-accordion,
x-collapse, and it just all

00:47:10.080 --> 00:47:12.040
works, and it's just
so beautiful.

00:47:12.040 --> 00:47:12.850
You say what you mean.

00:47:12.850 --> 00:47:14.010
You don't have to deal
with any of that.

00:47:14.010 --> 00:47:16.950
And then the custom element
itself implements the dynamic

00:47:16.950 --> 00:47:18.730
code required to make the stuff
work, so you don't have

00:47:18.730 --> 00:47:20.105
to go get this other
JavaScript file

00:47:20.105 --> 00:47:20.860
and include it in.

00:47:20.860 --> 00:47:25.650
It just all is encapsulated
very, very nicely.

00:47:25.650 --> 00:47:27.660
OK, so the summary here.

00:47:27.660 --> 00:47:28.190
Web components.

00:47:28.190 --> 00:47:29.690
They're coming to the
web platform.

00:47:29.690 --> 00:47:32.200
Composable, declarative,
and reusable.

00:47:32.200 --> 00:47:34.920
You can of course build with
them without Dart, as you saw

00:47:34.920 --> 00:47:37.990
on all the earlier stuff,
it's JavaScript as well.

00:47:37.990 --> 00:47:40.180
But we also think you might be
interested in this thing we

00:47:40.180 --> 00:47:43.110
call Dart for structured,
scalable, and familiar web

00:47:43.110 --> 00:47:43.780
programming.

00:47:43.780 --> 00:47:46.280
And we think they go really,
really well together.

00:47:46.280 --> 00:47:48.890
In fact, it's one of the only
ways to bring a lot of the

00:47:48.890 --> 00:47:52.480
stuff alive today and deploy
it across modern browsers.

00:47:52.480 --> 00:47:54.070
So hopefully you give
everything a try.

00:47:54.070 --> 00:47:55.940
All this Dart stuff
is open source,

00:47:55.940 --> 00:47:58.350
very permissive license.

00:47:58.350 --> 00:48:00.860
Everything you saw today is all
available in the package

00:48:00.860 --> 00:48:03.600
manager, and we crave
feedback.

00:48:03.600 --> 00:48:04.140
We love it.

00:48:04.140 --> 00:48:05.880
We're an open source
project on purpose.

00:48:05.880 --> 00:48:09.050
And so please do let us know
what you think, and again, I

00:48:09.050 --> 00:48:10.620
really appreciate
everyone's time.

00:48:10.620 --> 00:48:14.480
I'll be hanging around here
for questions afterwards.

00:48:14.480 --> 00:48:15.270
Thanks very much.

00:48:15.270 --> 00:48:16.660
That's all I got.

00:48:16.660 --> 00:48:21.460
[APPLAUSE]

