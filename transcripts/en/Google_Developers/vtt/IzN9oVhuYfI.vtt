WEBVTT
Kind: captions
Language: en

00:00:09.770 --> 00:00:10.770
Ali Afshar: Hi everyone.

00:00:10.770 --> 00:00:12.260
Welcome to Google
Developers Live.

00:00:12.260 --> 00:00:13.950
My name's Ali Afshar.

00:00:13.950 --> 00:00:17.030
Today, I'm going to be talking
to you about to the new Google

00:00:17.030 --> 00:00:21.040
sign in button, along
with Google Drive.

00:00:21.040 --> 00:00:22.710
Now, I'm really excited
about this.

00:00:22.710 --> 00:00:27.420
So this week, we launched a way
for users to sign in to

00:00:27.420 --> 00:00:29.870
your application, authorize
their data with your

00:00:29.870 --> 00:00:33.810
application, that comes in the
form of a button, OK, and has

00:00:33.810 --> 00:00:37.000
a number of awesome features.

00:00:37.000 --> 00:00:40.700
Mostly, it's a well trusted
and good thing to

00:00:40.700 --> 00:00:41.480
have on your site.

00:00:41.480 --> 00:00:43.030
It's branded to Google.

00:00:43.030 --> 00:00:45.220
And when users see it, they
know that what they're

00:00:45.220 --> 00:00:47.560
getting, the way they're logging
in, that's official

00:00:47.560 --> 00:00:48.540
and that's good.

00:00:48.540 --> 00:00:49.240
OK.

00:00:49.240 --> 00:00:51.690
So it was primarily launched
for Google+.

00:00:51.690 --> 00:00:56.440
It provides some features of
knowing the user's profile,

00:00:56.440 --> 00:01:00.200
and also provides a really cool
feature of allowing you

00:01:00.200 --> 00:01:04.620
to initiate an over the air
install of your application on

00:01:04.620 --> 00:01:07.580
a mobile device when the user
is logged into the web.

00:01:07.580 --> 00:01:10.020
So all those features
are cool.

00:01:10.020 --> 00:01:12.890
I'm just going to show you,
quickly, today, how to get it

00:01:12.890 --> 00:01:17.000
running for your Google
Drive API application.

00:01:17.000 --> 00:01:22.660
So the process I'm going to
do, well, the Plus team

00:01:22.660 --> 00:01:25.140
produced a set of really
great quick starts.

00:01:25.140 --> 00:01:27.800
So they're just quick start
applications, which you can

00:01:27.800 --> 00:01:29.350
clone the code from GitHub.

00:01:29.350 --> 00:01:32.620
And you can get the code in your
language and start it.

00:01:32.620 --> 00:01:34.560
So today we're going
to be using Python.

00:01:34.560 --> 00:01:36.310
We're going to be using
Python and JavaScript.

00:01:36.310 --> 00:01:39.140
Obviously, there are JavaScript
components to this.

00:01:39.140 --> 00:01:41.387
So I'm just going to go to their
page, developers.googl

00:01:41.387 --> 00:01:47.890
e.com/plus/quickstartpython, and
I'm going to see how we're

00:01:47.890 --> 00:01:48.510
going to do this.

00:01:48.510 --> 00:01:53.280
So the first thing it tells me
is that I need to install some

00:01:53.280 --> 00:01:55.230
requirements to get
this running.

00:01:55.230 --> 00:01:58.560
This uses the flask web
application framework, which

00:01:58.560 --> 00:02:00.900
is something I've hacked
on a lot at this.

00:02:00.900 --> 00:02:03.600
Like probably my favorite web
application framework.

00:02:03.600 --> 00:02:07.590
It's very simple to get started,
and from a Google

00:02:07.590 --> 00:02:10.370
point of view, if you something
like App Engine, you

00:02:10.370 --> 00:02:12.350
can easily host it there.

00:02:12.350 --> 00:02:14.840
This is just very nice because
I can run stuff from the

00:02:14.840 --> 00:02:15.440
command line.

00:02:15.440 --> 00:02:19.180
So as with any online,
live demos

00:02:19.180 --> 00:02:20.910
everything could go wrong.

00:02:20.910 --> 00:02:23.150
If that happens, that would be
really exciting and fun, so

00:02:23.150 --> 00:02:24.150
I'm looking forward to it.

00:02:24.150 --> 00:02:25.160
So let's have a look.

00:02:25.160 --> 00:02:27.930
So here, we've got a shell.

00:02:27.930 --> 00:02:29.850
Let's just clear it
and have a look.

00:02:29.850 --> 00:02:32.010
What I've done is I've cloned
the repository.

00:02:32.010 --> 00:02:32.350
OK.

00:02:32.350 --> 00:02:34.330
So I haven't done it
in exactly the

00:02:34.330 --> 00:02:36.290
order they've said.

00:02:36.290 --> 00:02:37.190
I'm a geek.

00:02:37.190 --> 00:02:38.620
I don't like to follow
directions.

00:02:38.620 --> 00:02:39.510
That's fine.

00:02:39.510 --> 00:02:41.410
So I've cloned this
repository.

00:02:41.410 --> 00:02:44.900
And I've done a couple of the
steps at the start where I've

00:02:44.900 --> 00:02:47.570
put in my own client ID
and client secret.

00:02:47.570 --> 00:02:49.775
I've set my authorized
JavaScript origins.

00:02:49.775 --> 00:02:54.070
And I've set them up to work,
already, for this.

00:02:54.070 --> 00:02:56.510
Otherwise, we'd be going through
a few forms worth of

00:02:56.510 --> 00:02:58.830
clicking stuff, and if you've
ever done that before, you

00:02:58.830 --> 00:02:59.300
know how to do it.

00:02:59.300 --> 00:03:00.440
It's very simple.

00:03:00.440 --> 00:03:03.580
So this takes you
through that.

00:03:03.580 --> 00:03:04.700
And let's have a look.

00:03:04.700 --> 00:03:05.810
What's in our repository?

00:03:05.810 --> 00:03:08.280
Well we've got a client
secrets dot JSON file.

00:03:08.280 --> 00:03:10.900
That contains information about
your client, your client

00:03:10.900 --> 00:03:14.670
ID, your client secret, any
redirect URIs, any origins.

00:03:14.670 --> 00:03:17.770
All of that is configured in the
client secrets dot JSON.

00:03:17.770 --> 00:03:21.000
You can download that directly
from the API console if you'd

00:03:21.000 --> 00:03:22.900
like, if you don't want
to create yours.

00:03:22.900 --> 00:03:25.400
But one is provided with a quick
start, and you just need

00:03:25.400 --> 00:03:27.280
to modify your information.

00:03:27.280 --> 00:03:30.050
Then we've got a script,
signin.py.

00:03:30.050 --> 00:03:30.410
OK.

00:03:30.410 --> 00:03:33.010
That runs the entire web app.

00:03:33.010 --> 00:03:35.060
And then, we have some
templates, and inside

00:03:35.060 --> 00:03:37.820
templates, there's a single
template that is the index.

00:03:37.820 --> 00:03:38.080
OK.

00:03:38.080 --> 00:03:41.280
So that's a bit of a mish of
HTML and JavaScript, but

00:03:41.280 --> 00:03:43.270
really good for getting
you up and running.

00:03:43.270 --> 00:03:47.490
I expect when your application
is working, or you have a

00:03:47.490 --> 00:03:50.690
prototype built, you would
actually extract the bits into

00:03:50.690 --> 00:03:54.440
separate JavaScript files,
just to be a bit neater.

00:03:54.440 --> 00:03:56.320
But it's perfect for now,
for what we're doing.

00:03:58.990 --> 00:04:00.480
Well, let's just run
it at the moment.

00:04:00.480 --> 00:04:02.870
For now, all it does
is it makes calls

00:04:02.870 --> 00:04:05.310
against the plus API.

00:04:05.310 --> 00:04:07.650
We're going to extend it
slightly to make calls against

00:04:07.650 --> 00:04:10.550
the drive API, but you see it's
exactly the same thing.

00:04:10.550 --> 00:04:15.750
So right, firstly, let's install
a virtual environment.

00:04:15.750 --> 00:04:17.620
You should really do this if
you're testing stuff out.

00:04:17.620 --> 00:04:20.269
I don't want to install flask
for the whole system.

00:04:20.269 --> 00:04:21.140
That would be bad.

00:04:21.140 --> 00:04:25.730
So we've create call it ve, and
we're going to run pip,

00:04:25.730 --> 00:04:28.050
the installer, from inside there
to make sure that it's

00:04:28.050 --> 00:04:30.090
installed in the right place.

00:04:30.090 --> 00:04:31.450
Install flask.

00:04:31.450 --> 00:04:32.740
OK.

00:04:32.740 --> 00:04:37.690
So this goes off to py py, and
it will install flask for you.

00:04:37.690 --> 00:04:39.530
Really ignore the
warnings, OK.

00:04:39.530 --> 00:04:42.920
There's lots of them, but
just ignore them.

00:04:42.920 --> 00:04:49.120
Then we also want to install the
Google API Python client.

00:04:49.120 --> 00:04:50.840
So we can install
that, as well.

00:04:50.840 --> 00:04:53.300
And now these are installed
in my virtual environment.

00:04:53.300 --> 00:04:55.290
And I'm actually ready to
run the quick start.

00:04:55.290 --> 00:04:57.450
So, ve/bin/python.

00:04:57.450 --> 00:05:01.000
I'm running Python from inside
the virtual em, this ensures

00:05:01.000 --> 00:05:03.010
that it has the right
environment, the right Python

00:05:03.010 --> 00:05:04.430
part, for the libraries.

00:05:04.430 --> 00:05:07.615
So ve/bin/python, signin.py.

00:05:07.615 --> 00:05:08.510
OK.

00:05:08.510 --> 00:05:13.360
And you see that starts it on
all ports, on all hosts on

00:05:13.360 --> 00:05:15.130
port four, five, six, seven.

00:05:15.130 --> 00:05:15.660
OK.

00:05:15.660 --> 00:05:16.910
So let's have a look at that.

00:05:19.490 --> 00:05:20.970
And there we go.

00:05:20.970 --> 00:05:22.650
So I don't know if
you can see that.

00:05:22.650 --> 00:05:26.580
There's a beautiful sign
in button there.

00:05:26.580 --> 00:05:28.630
I really like the red
button, but that's

00:05:28.630 --> 00:05:31.680
actually for dark themes.

00:05:31.680 --> 00:05:35.770
So we have a kind of a light
theme on this blank page.

00:05:35.770 --> 00:05:37.540
So, first thing we'll
do is we'll

00:05:37.540 --> 00:05:39.180
start to tweak it slightly.

00:05:39.180 --> 00:05:39.490
OK.

00:05:39.490 --> 00:05:42.620
So let's look at the
source code where

00:05:42.620 --> 00:05:44.280
this button is defined.

00:05:44.280 --> 00:05:47.700
Well, we know it's going to
be in the HTML somewhere.

00:05:47.700 --> 00:05:50.720
Not in their head,
in the body.

00:05:50.720 --> 00:05:55.160
And there, we can see it.

00:05:55.160 --> 00:05:55.490
OK.

00:05:55.490 --> 00:05:56.900
So how do you do it?

00:05:56.900 --> 00:05:59.490
Well, you just this chunk
of HTML in your page.

00:05:59.490 --> 00:06:00.890
It's remarkably simple.

00:06:00.890 --> 00:06:03.320
You have to make sure you've
loaded the library, and the

00:06:03.320 --> 00:06:05.990
library will go through and
convert this stuff.

00:06:05.990 --> 00:06:07.210
So let's have a look.

00:06:07.210 --> 00:06:10.800
Well, one first thing we notice
here is the data scope.

00:06:10.800 --> 00:06:12.980
Now, I've been a bit cheeky,
and I went through and I

00:06:12.980 --> 00:06:14.240
edited this.

00:06:14.240 --> 00:06:17.880
So this is saying, when you sign
in, please, in addition

00:06:17.880 --> 00:06:22.510
to asking for the scope for the
profile, ask for the drive

00:06:22.510 --> 00:06:23.380
file scope.

00:06:23.380 --> 00:06:26.630
So applications will be
authorized to use and access

00:06:26.630 --> 00:06:28.700
files in the user's drive.

00:06:28.700 --> 00:06:28.990
OK.

00:06:28.990 --> 00:06:30.450
So that's the first thing.

00:06:30.450 --> 00:06:30.680
OK.

00:06:30.680 --> 00:06:33.400
Secondly, we'll look
at the access type.

00:06:33.400 --> 00:06:34.900
This is offline access.

00:06:34.900 --> 00:06:37.730
So this may be ringing like,
we have scopes, we have an

00:06:37.730 --> 00:06:38.740
access type.

00:06:38.740 --> 00:06:42.900
This is OAuth 2, essentially,
but with a nice front end to

00:06:42.900 --> 00:06:44.090
start using it.

00:06:44.090 --> 00:06:44.680
OK.

00:06:44.680 --> 00:06:45.590
And configurable.

00:06:45.590 --> 00:06:48.300
So we see the theme
is there, dark.

00:06:48.300 --> 00:06:50.522
So let's set it to light.

00:06:50.522 --> 00:06:52.840
And let's refresh this page.

00:06:52.840 --> 00:06:53.420
And there we go.

00:06:53.420 --> 00:06:54.940
So we have a nice,
white button.

00:06:54.940 --> 00:07:02.098
Actually, you know what, even on
this white page, I think I

00:07:02.098 --> 00:07:03.640
prefer the dark one.

00:07:03.640 --> 00:07:06.450
So there are many, many
parameters for this.

00:07:06.450 --> 00:07:08.450
And it's really configurable
how you like.

00:07:08.450 --> 00:07:09.880
I like the Google branding.

00:07:09.880 --> 00:07:11.010
I think that looks
really nice.

00:07:11.010 --> 00:07:12.980
So we just going to leave
that on our page.

00:07:12.980 --> 00:07:14.230
And there it is.

00:07:14.230 --> 00:07:15.590
So let's start it.

00:07:15.590 --> 00:07:16.240
Let's run it.

00:07:16.240 --> 00:07:18.190
Let's see what happens.

00:07:18.190 --> 00:07:22.180
So the first thing I see is,
I get this pop up button.

00:07:22.180 --> 00:07:23.410
OK.

00:07:23.410 --> 00:07:25.890
Google Drive sign in app, that's
what I've described

00:07:25.890 --> 00:07:28.090
this app as in the API
developer console.

00:07:28.090 --> 00:07:31.740
And you can see it's beautiful,
it's really nice.

00:07:31.740 --> 00:07:37.190
In addition to the regular OAuth
2 descriptions, where we

00:07:37.190 --> 00:07:40.140
have, here, view and manage
files and documents in your

00:07:40.140 --> 00:07:41.920
Google Drive-- that's what
you would show if you

00:07:41.920 --> 00:07:43.010
used regular OAuth--

00:07:43.010 --> 00:07:45.260
we have these extra two parts.

00:07:45.260 --> 00:07:50.270
And these two parts, the first
one is allowing your user

00:07:50.270 --> 00:07:54.430
information and your circle
information to be accessed by

00:07:54.430 --> 00:07:55.360
the application.

00:07:55.360 --> 00:07:57.460
So the application doesn't
know what you circles are

00:07:57.460 --> 00:07:58.780
named, or anything like this.

00:07:58.780 --> 00:08:00.900
They just know the list of
people in that profile.

00:08:00.900 --> 00:08:02.070
And I can edit that list.

00:08:02.070 --> 00:08:03.870
And you can see that I've
used this button before.

00:08:03.870 --> 00:08:05.980
And I'm quite tight
on privacy.

00:08:05.980 --> 00:08:08.560
I don't like anyone to know
anything about me.

00:08:08.560 --> 00:08:10.520
I certainly don't want this
application to know who's in

00:08:10.520 --> 00:08:11.490
my circles.

00:08:11.490 --> 00:08:12.250
That's fine.

00:08:12.250 --> 00:08:13.100
So I've unselected these.

00:08:13.100 --> 00:08:14.100
And this is really nice.

00:08:14.100 --> 00:08:16.160
This is actually sticky,
and it remembers

00:08:16.160 --> 00:08:17.320
what I did last time.

00:08:17.320 --> 00:08:20.100
So I have no circles selected.

00:08:20.100 --> 00:08:20.380
OK.

00:08:20.380 --> 00:08:25.140
The other part is allowing
people in the circles to see

00:08:25.140 --> 00:08:26.620
that I use this application.

00:08:26.620 --> 00:08:29.590
Again, I don't really want
people to know, so

00:08:29.590 --> 00:08:31.260
I've put only me.

00:08:31.260 --> 00:08:32.070
OK.

00:08:32.070 --> 00:08:34.620
So this will get my profile
information, but

00:08:34.620 --> 00:08:35.669
nothing else, really.

00:08:35.669 --> 00:08:39.090
Now, I'm very privacy
conscious myself.

00:08:39.090 --> 00:08:42.740
I've told you I hate giving my
information out to people.

00:08:42.740 --> 00:08:46.150
And as my friend, Vick Friezel
says, I don't know of an

00:08:46.150 --> 00:08:49.250
application that isn't made
better, that cannot be

00:08:49.250 --> 00:08:52.860
improved, by knowing something
about the user.

00:08:52.860 --> 00:08:53.490
OK.

00:08:53.490 --> 00:08:55.260
That is just, I think,
inherent.

00:08:55.260 --> 00:08:58.590
So a quality application will
know about the user.

00:08:58.590 --> 00:09:00.090
It will be tailored to them.

00:09:00.090 --> 00:09:03.300
It will be socially applicable
to them.

00:09:03.300 --> 00:09:05.950
So I think that's a really
useful thing.

00:09:05.950 --> 00:09:07.960
Let's press accept and
see what happens.

00:09:07.960 --> 00:09:11.150
So we accept, and a number
of things happen.

00:09:11.150 --> 00:09:11.450
OK.

00:09:11.450 --> 00:09:15.460
So, again, this page is showing
what happened on the

00:09:15.460 --> 00:09:18.990
authorization, and it's showing
a bit of information

00:09:18.990 --> 00:09:19.760
about my profile.

00:09:19.760 --> 00:09:23.960
As I say, the app, whatever your
app is, will be better if

00:09:23.960 --> 00:09:25.430
it knows about the user.

00:09:25.430 --> 00:09:26.710
So how does this work?

00:09:26.710 --> 00:09:29.890
Well I've got the Python
Quickstart.

00:09:29.890 --> 00:09:32.650
And this is something we
call the hybrid flow

00:09:32.650 --> 00:09:35.030
for the sign in.

00:09:35.030 --> 00:09:38.860
I've managed to authorize on
the client, in the browser,

00:09:38.860 --> 00:09:42.880
and also send a code over
to the server to

00:09:42.880 --> 00:09:44.500
exchange for a token.

00:09:44.500 --> 00:09:47.380
So I've now got offline access
on the server, and I've got

00:09:47.380 --> 00:09:50.080
online access in the browser.

00:09:50.080 --> 00:09:51.130
So that's really cool.

00:09:51.130 --> 00:09:52.960
I've authorized in
both places.

00:09:52.960 --> 00:09:54.550
Now, I like to make
my API calls from

00:09:54.550 --> 00:09:55.700
Python, from the server.

00:09:55.700 --> 00:09:56.910
That's absolutely fine.

00:09:56.910 --> 00:09:58.920
I'm going to do that.

00:09:58.920 --> 00:10:02.360
So this loads the Plus library,
makes a JavaScript

00:10:02.360 --> 00:10:06.470
call to fetch this profile
information--

00:10:06.470 --> 00:10:09.440
and let's have a look
at the code--

00:10:09.440 --> 00:10:13.650
and then, goes through and
calls, eventually, after

00:10:13.650 --> 00:10:19.090
loading the stuff, a function
called connectServer.

00:10:19.090 --> 00:10:20.340
OK.

00:10:22.790 --> 00:10:26.000
And here it is.

00:10:26.000 --> 00:10:27.800
So what does connectServer do?

00:10:27.800 --> 00:10:31.440
Well, it's got the token.

00:10:31.440 --> 00:10:33.660
It will send me the token,
the code that I can

00:10:33.660 --> 00:10:34.560
exchange for a token.

00:10:34.560 --> 00:10:35.025
That's here.

00:10:35.025 --> 00:10:36.180
So it's going to post.

00:10:36.180 --> 00:10:38.840
And in the body of the post,
it's got the code.

00:10:38.840 --> 00:10:41.070
And at the same time, it's going
to pass some state, that

00:10:41.070 --> 00:10:43.410
actually, that's built into the
Quickstart really good.

00:10:43.410 --> 00:10:46.280
So the Quickstart is using state
to make sure that the

00:10:46.280 --> 00:10:48.710
person who's making the request
is actually the person

00:10:48.710 --> 00:10:50.510
who initiated it in
the first place.

00:10:50.510 --> 00:10:53.750
So that's really good to prevent
all kinds of forgery

00:10:53.750 --> 00:10:56.650
and stealing, this.

00:10:56.650 --> 00:10:59.520
So it just sends that
to the connect

00:10:59.520 --> 00:11:01.180
endpoint on the server.

00:11:01.180 --> 00:11:01.540
OK.

00:11:01.540 --> 00:11:05.110
So switching back over to the
web application, we can see--

00:11:05.110 --> 00:11:07.560
and this is beautiful, this
is why flask is so nice--

00:11:07.560 --> 00:11:10.010
we have this route that
is on connect.

00:11:10.010 --> 00:11:11.980
And it accepts posts.

00:11:11.980 --> 00:11:12.080
OK.

00:11:12.080 --> 00:11:15.800
So at some point in this
function, we're going to go

00:11:15.800 --> 00:11:19.110
through, and we're going
to make an auth flow.

00:11:19.110 --> 00:11:19.405
OK.

00:11:19.405 --> 00:11:21.340
And how's it going to do that?

00:11:21.340 --> 00:11:26.610
It's going to create an auth
flow in Python, and it's going

00:11:26.610 --> 00:11:28.990
to exchange the code.

00:11:28.990 --> 00:11:31.430
Just like you would do if you
had initiated the flow

00:11:31.430 --> 00:11:33.390
yourself by redirecting
someone somewhere.

00:11:33.390 --> 00:11:35.850
So it's basic OAuth.

00:11:35.850 --> 00:11:38.090
Uses the same libraries,
but it does the

00:11:38.090 --> 00:11:39.270
first half for you.

00:11:39.270 --> 00:11:40.370
So that's really great.

00:11:40.370 --> 00:11:41.440
So we've got the code.

00:11:41.440 --> 00:11:43.410
This will store in a session.

00:11:43.410 --> 00:11:44.300
OK.

00:11:44.300 --> 00:11:47.290
And eventually, this
will get around to

00:11:47.290 --> 00:11:51.090
calling the people endpoint.

00:11:51.090 --> 00:11:52.350
OK.

00:11:52.350 --> 00:11:54.890
The people endpoint is just a
dummy, there, to show you how

00:11:54.890 --> 00:11:56.820
to make an API call
from the server.

00:11:56.820 --> 00:11:59.730
So the people endpoint
gets called.

00:11:59.730 --> 00:12:03.290
And it adds some information
to the page when it

00:12:03.290 --> 00:12:05.390
responds with that.

00:12:05.390 --> 00:12:05.700
OK.

00:12:05.700 --> 00:12:08.430
So let's have a look at
the people endpoint.

00:12:08.430 --> 00:12:10.250
It's a lot shorter,
and a lot simpler.

00:12:10.250 --> 00:12:12.080
So we're fetching the
session for the

00:12:12.080 --> 00:12:13.670
credentials from the session.

00:12:13.670 --> 00:12:17.700
That's where you stored them
from the connectServer point.

00:12:17.700 --> 00:12:20.210
And then, as we go down--

00:12:20.210 --> 00:12:22.440
this should be familiar to you
if you've ever used the Python

00:12:22.440 --> 00:12:23.430
client library before--

00:12:23.430 --> 00:12:27.150
it builds a service, it makes
a request, and it gets the

00:12:27.150 --> 00:12:28.240
results of that.

00:12:28.240 --> 00:12:28.580
OK.

00:12:28.580 --> 00:12:31.810
And pumps it back into the
page as a bit of JSON.

00:12:31.810 --> 00:12:32.080
OK.

00:12:32.080 --> 00:12:33.150
So that's perfect.

00:12:33.150 --> 00:12:35.070
So this looks like a good place
where we're going to

00:12:35.070 --> 00:12:36.720
start writing our code.

00:12:36.720 --> 00:12:36.960
OK.

00:12:36.960 --> 00:12:40.090
So firstly, let's build
a drive service.

00:12:40.090 --> 00:12:42.610
Drive equals build.

00:12:42.610 --> 00:12:44.460
So the name of the API,
which is Drive.

00:12:44.460 --> 00:12:46.510
The version of the a API,
v2 is the latest.

00:12:49.620 --> 00:12:53.320
And we pass out authorized
HTTP instance in there.

00:12:53.320 --> 00:12:55.390
Then, what shall we do?

00:12:55.390 --> 00:12:57.490
Well, a simple call just
to get-- let's

00:12:57.490 --> 00:12:59.150
get the about feed.

00:12:59.150 --> 00:12:59.960
OK.

00:12:59.960 --> 00:13:04.060
So I'm going to import the
[INAUDIBLE] printer.

00:13:04.060 --> 00:13:06.040
So you can see what happens.

00:13:06.040 --> 00:13:14.900
So about equals drive dot about
dot get dot execute.

00:13:14.900 --> 00:13:17.300
OK.

00:13:17.300 --> 00:13:19.520
And we'll print that
to the screen.

00:13:19.520 --> 00:13:20.010
OK.

00:13:20.010 --> 00:13:23.300
So that's every time this thing
connects, every time it

00:13:23.300 --> 00:13:25.770
asks for the people, then
it should do this.

00:13:25.770 --> 00:13:26.670
OK.

00:13:26.670 --> 00:13:30.060
So let's try that out.

00:13:30.060 --> 00:13:31.370
So we're still signed in.

00:13:31.370 --> 00:13:32.310
The app's really nice.

00:13:32.310 --> 00:13:33.730
It recognizes that
you're signed in.

00:13:33.730 --> 00:13:36.420
It doesn't offer you
the button again.

00:13:36.420 --> 00:13:40.310
And if we look, on the output,
you see our about feed.

00:13:40.310 --> 00:13:44.210
Now they about feed is something
that happens for all

00:13:44.210 --> 00:13:45.500
users in Google Drive.

00:13:45.500 --> 00:13:48.300
There's metadata about the user
itself, what roles they

00:13:48.300 --> 00:13:52.670
have, what kind of files they
can format, what formats they

00:13:52.670 --> 00:13:56.410
can export or import their files
from, their quota, other

00:13:56.410 --> 00:13:58.080
information about their
applications,

00:13:58.080 --> 00:13:59.370
their permission ID.

00:13:59.370 --> 00:14:01.270
This kind of thing that is
useful for your application.

00:14:01.270 --> 00:14:02.460
So there we go.

00:14:02.460 --> 00:14:04.990
We've just made an API call.

00:14:04.990 --> 00:14:07.400
So let's disconnect.

00:14:07.400 --> 00:14:08.550
And let's show you.

00:14:08.550 --> 00:14:11.660
So, small bit of HTML
to do this.

00:14:11.660 --> 00:14:20.370
Calls Google's flow, sends
the code to the server.

00:14:20.370 --> 00:14:23.790
The server exchanges the code
for a token and saves the

00:14:23.790 --> 00:14:25.660
token in the session.

00:14:25.660 --> 00:14:30.770
Then, the front end makes an
Ajax call to the server, and

00:14:30.770 --> 00:14:33.320
we see output again.

00:14:33.320 --> 00:14:33.580
OK.

00:14:33.580 --> 00:14:36.990
So getting the about feed,
that's not that useful.

00:14:36.990 --> 00:14:40.190
What if you want to do something
else like, I guess,

00:14:40.190 --> 00:14:42.240
make a file.

00:14:42.240 --> 00:14:43.520
So file equals--

00:14:43.520 --> 00:14:45.530
or let's not call it file,
because that's a

00:14:45.530 --> 00:14:48.090
Python built in--

00:14:48.090 --> 00:14:52.470
drive dot files dot insert.

00:14:52.470 --> 00:14:54.490
And let's see.

00:14:54.490 --> 00:15:03.300
Body equals title "Hello
GDL!!" There we go.

00:15:03.300 --> 00:15:05.752
Drive dot files dot execute.

00:15:05.752 --> 00:15:09.830
And [INAUDIBLE]

00:15:09.830 --> 00:15:11.080
that.

00:15:11.080 --> 00:15:13.800
So let's do that again.

00:15:13.800 --> 00:15:16.606
And this time, it should
be making a file.

00:15:16.606 --> 00:15:19.086
Let's have a look there.

00:15:19.086 --> 00:15:19.880
That's that.

00:15:19.880 --> 00:15:20.730
And then we go.

00:15:20.730 --> 00:15:22.860
There's the file that
it's created.

00:15:22.860 --> 00:15:25.090
It should have the
right title.

00:15:25.090 --> 00:15:26.420
But that's the metadata
output.

00:15:26.420 --> 00:15:28.210
Now, in the real world,
what would you do.

00:15:28.210 --> 00:15:31.050
Well, you'd pump this back to
the front end, then you'd

00:15:31.050 --> 00:15:32.150
display it in a nice way.

00:15:32.150 --> 00:15:34.170
Or whatever you wanted
to do with it.

00:15:34.170 --> 00:15:36.874
Or whatever your application
does do with Google Drive.

00:15:36.874 --> 00:15:40.050
There are 101 use cases there.

00:15:40.050 --> 00:15:41.660
So let's have a look in
the Google Drive.

00:15:41.660 --> 00:15:43.514
Here's my Drive.

00:15:43.514 --> 00:15:45.820
Let's refresh that.

00:15:45.820 --> 00:15:46.870
And there we go.

00:15:46.870 --> 00:15:49.160
There's our file empty.

00:15:49.160 --> 00:15:51.930
Doesn't have anything
in there but

00:15:51.930 --> 00:15:53.920
"Hello GDL!!" OK.

00:15:53.920 --> 00:15:55.560
So what have we done
here today?

00:15:55.560 --> 00:15:59.550
We've shown how you can use the
sign in button for your

00:15:59.550 --> 00:16:01.530
Google Drive API application.

00:16:01.530 --> 00:16:01.770
OK.

00:16:01.770 --> 00:16:04.390
Whether it be on the client,
because this authorizes into

00:16:04.390 --> 00:16:06.660
the client, or whether
it's on the server.

00:16:06.660 --> 00:16:09.450
Which your application might
be one or the other.

00:16:09.450 --> 00:16:12.980
What we haven't talked about
is on the mobile device, on

00:16:12.980 --> 00:16:15.680
Android, and iOS, this is
also covered there.

00:16:15.680 --> 00:16:18.740
And maybe, soon, we'll have a
GDL showing you how to do

00:16:18.740 --> 00:16:19.680
that, as well.

00:16:19.680 --> 00:16:22.280
So key points to take away.

00:16:22.280 --> 00:16:25.000
Google+ sign in button isn't
just for Google+.

00:16:25.000 --> 00:16:27.950
It's for all Google APIs
that use OAuth 2.

00:16:27.950 --> 00:16:29.950
And that includes
the Drive API.

00:16:29.950 --> 00:16:30.280
OK.

00:16:30.280 --> 00:16:31.180
That's the first one.

00:16:31.180 --> 00:16:33.070
Second one, it's really
easy to use.

00:16:33.070 --> 00:16:34.470
Grab the quick start
for your language.

00:16:37.150 --> 00:16:38.700
You will be able
to get started,

00:16:38.700 --> 00:16:40.190
literally, in 10 minutes.

00:16:40.190 --> 00:16:45.460
I cut a few steps, so it was
even shorter than that.

00:16:45.460 --> 00:16:47.460
So yeah, really good.

00:16:47.460 --> 00:16:48.190
Please use it.

00:16:48.190 --> 00:16:50.230
We recommend that it's the
best way to do it.

00:16:50.230 --> 00:16:51.160
It's a nice, branded button.

00:16:51.160 --> 00:16:53.660
And we recommend you do that
with your application.

00:16:53.660 --> 00:16:54.260
OK.

00:16:54.260 --> 00:16:56.210
So thanks very much for
joining me today.

00:16:56.210 --> 00:16:57.240
Been really great.

00:16:57.240 --> 00:16:58.730
And if you have any
questions, please

00:16:58.730 --> 00:17:00.290
follow up on stack overflow.

00:17:00.290 --> 00:17:01.030
Thanks very much.

00:17:01.030 --> 00:17:02.280
Bye bye.

00:17:09.430 --> 00:17:25.222
[MUSIC PLAYING]

