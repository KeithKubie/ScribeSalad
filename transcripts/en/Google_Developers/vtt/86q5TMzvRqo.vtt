WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.157
[MUSIC PLAYING]

00:00:03.764 --> 00:00:04.430
WESLEY CHUN: Hi.

00:00:04.430 --> 00:00:06.630
This is Wesley Chun,
engineer here at Google.

00:00:06.630 --> 00:00:07.610
Today we're going
to show you how

00:00:07.610 --> 00:00:08.984
to do something
you've never been

00:00:08.984 --> 00:00:11.780
able to do before-- format
spreadsheet cells using Google

00:00:11.780 --> 00:00:13.010
Sheets API.

00:00:13.010 --> 00:00:13.910
Yeah, that's right.

00:00:13.910 --> 00:00:16.020
You couldn't do this
in older API releases.

00:00:16.020 --> 00:00:19.580
And I've got a stack of Stack
Overflow questions to prove it.

00:00:19.580 --> 00:00:21.302
So I hope you're
excited as I am.

00:00:21.302 --> 00:00:22.760
To keep it short
and sweet, I won't

00:00:22.760 --> 00:00:26.149
be discussing reading or writing
a Sheet, nor import export.

00:00:26.149 --> 00:00:28.190
Those are covered in other
episodes, one of which

00:00:28.190 --> 00:00:31.040
is where we show you how to
migrate toy orders from a SQL

00:00:31.040 --> 00:00:32.810
database to a Google Sheet.

00:00:32.810 --> 00:00:35.600
We're going to reuse the same
Sheet created in that video.

00:00:35.600 --> 00:00:38.547
So check it out and
run that script first.

00:00:38.547 --> 00:00:40.130
Check out the Sheet
that it's created.

00:00:40.130 --> 00:00:41.605
Doesn't that look totally bland?

00:00:41.605 --> 00:00:42.980
Well, today you're
going to learn

00:00:42.980 --> 00:00:45.720
how to format those cells
to make it more presentable.

00:00:45.720 --> 00:00:46.700
What do you think?

00:00:46.700 --> 00:00:48.200
Way better, right?

00:00:48.200 --> 00:00:49.700
To get the sheet
to look like this,

00:00:49.700 --> 00:00:52.220
you have to send formatting
commands to the API.

00:00:52.220 --> 00:00:54.230
For this sample, there are four.

00:00:54.230 --> 00:00:56.420
One, freeze the top row.

00:00:56.420 --> 00:00:58.480
Two, bold the top row.

00:00:58.480 --> 00:01:01.820
Three, format the prices in
column E as financial values.

00:01:01.820 --> 00:01:04.754
And then lastly, adding
a fixed values and cell

00:01:04.754 --> 00:01:09.110
validation for the order
status in column F.

00:01:09.110 --> 00:01:10.540
What do those
commands look like?

00:01:10.540 --> 00:01:13.130
Well, each request is a JSON
structure represented here

00:01:13.130 --> 00:01:15.320
in this pseudo code as
a Python dictionary.

00:01:15.320 --> 00:01:17.660
You can group as many of them
as desired into an array,

00:01:17.660 --> 00:01:20.090
like a Python list, and
send them together in one

00:01:20.090 --> 00:01:23.162
API call to
spreadsheets.batchUpdate.

00:01:23.162 --> 00:01:25.370
Let's look at each of the
four requests for our Sheet

00:01:25.370 --> 00:01:28.340
now, but more generically
in JavaScript.

00:01:28.340 --> 00:01:30.150
Frozen rows are
a Sheet property.

00:01:30.150 --> 00:01:32.720
So we need a command that
updates Sheet properties.

00:01:32.720 --> 00:01:34.730
After much research
we decided to name

00:01:34.730 --> 00:01:37.700
it updateSheetProperties.

00:01:37.700 --> 00:01:40.550
More specifically, set the
frozen row count attribute

00:01:40.550 --> 00:01:42.380
of a Sheet's grid
properties to freeze

00:01:42.380 --> 00:01:44.210
the top n rows of the sheet.

00:01:44.210 --> 00:01:46.040
For us, n is one.

00:01:46.040 --> 00:01:47.780
Before moving on
let's talk about Sheet

00:01:47.780 --> 00:01:51.380
ranges because we need them
for the remaining requests.

00:01:51.380 --> 00:01:55.400
First, a range is made up
of a Sheet ID and indexes.

00:01:55.400 --> 00:01:57.335
Next, when you create a
brand new spreadsheet,

00:01:57.335 --> 00:02:00.860
the default Sheet that's created
for you has an ID of zero.

00:02:00.860 --> 00:02:02.690
Like most programming
languages, counting

00:02:02.690 --> 00:02:04.430
starts at zero, not one.

00:02:04.430 --> 00:02:07.430
So here, you can see column
names and row numbers

00:02:07.430 --> 00:02:10.460
and mentally convert them
to zero-based indexes.

00:02:10.460 --> 00:02:14.390
Also, ranges are exclusive
of all end indexes.

00:02:14.390 --> 00:02:16.460
That means that they
go up to but do not

00:02:16.460 --> 00:02:18.860
include the end index value.

00:02:18.860 --> 00:02:20.360
Lastly, know that
you can leave out

00:02:20.360 --> 00:02:22.430
an index when you want
to take the default.

00:02:22.430 --> 00:02:25.400
We'll discuss each
situation as it comes up.

00:02:25.400 --> 00:02:26.750
Time for a quiz.

00:02:26.750 --> 00:02:29.700
See the blue highlighted
range in the Sheet?

00:02:29.700 --> 00:02:32.780
Now, this range JSON
object you see here?

00:02:32.780 --> 00:02:35.570
Well, what should we
fill in for each value?

00:02:35.570 --> 00:02:37.610
We'll start with the
Sheet ID, assuming

00:02:37.610 --> 00:02:39.680
this is the default Sheet.

00:02:39.680 --> 00:02:40.730
That's right.

00:02:40.730 --> 00:02:42.300
The ID is 0.

00:02:42.300 --> 00:02:44.870
In fact, if you know you're
accessing this default Sheet,

00:02:44.870 --> 00:02:47.840
you can leave out the
Sheet ID completely.

00:02:47.840 --> 00:02:51.930
The range starts at column D,
which is at index zero, one,

00:02:51.930 --> 00:02:53.990
two, three.

00:02:53.990 --> 00:02:56.720
It ends at column
E, which is four.

00:02:56.720 --> 00:02:58.760
But since the end
index is excluded,

00:02:58.760 --> 00:03:01.940
we need to bump that up to five.

00:03:01.940 --> 00:03:07.220
Similarly, the starting row is
three, but that's at index two.

00:03:07.220 --> 00:03:11.510
Finally, it ends at row
four, which is at three.

00:03:11.510 --> 00:03:14.420
But we need to bump
that up to four.

00:03:14.420 --> 00:03:15.470
Good job.

00:03:15.470 --> 00:03:17.750
Now you know how
to set up ranges.

00:03:17.750 --> 00:03:20.480
To see more examples and
learn more about grid ranges,

00:03:20.480 --> 00:03:22.100
see the documentation.

00:03:22.100 --> 00:03:24.710
Now we can talk about
the other three requests,

00:03:24.710 --> 00:03:27.530
starting with bolding
that frozen row.

00:03:27.530 --> 00:03:30.200
The verb is repeat cell,
meaning apply this format

00:03:30.200 --> 00:03:32.420
to all cells in a
given range, which

00:03:32.420 --> 00:03:34.790
is the first row
in the first Sheet.

00:03:34.790 --> 00:03:36.364
Now that you know
all about ranges,

00:03:36.364 --> 00:03:38.780
you can see that these are the
correct values representing

00:03:38.780 --> 00:03:40.080
the first row.

00:03:40.080 --> 00:03:43.460
However, we recommend you
drop both column indexes.

00:03:43.460 --> 00:03:45.590
Hard coding columns
is a bad idea

00:03:45.590 --> 00:03:48.500
because if you add more columns
they're not going to be bolded.

00:03:48.500 --> 00:03:50.350
By leaving them
out the entire row

00:03:50.350 --> 00:03:53.079
will be bolded, regardless
of the number of columns.

00:03:53.079 --> 00:03:54.620
If you're accessing
the first default

00:03:54.620 --> 00:03:56.420
Sheet, meaning its
ID is zero, you

00:03:56.420 --> 00:03:58.580
can leave off the Sheet ID too.

00:03:58.580 --> 00:04:01.860
Finally, all start
indices default to zero,

00:04:01.860 --> 00:04:03.710
so we can also drop
start row index.

00:04:03.710 --> 00:04:07.550
The only one you really
need is endRowIndex.

00:04:07.550 --> 00:04:10.400
Next is what you want
changed in the cells.

00:04:10.400 --> 00:04:12.020
In our case, it's
the textFormat.

00:04:12.020 --> 00:04:16.010
Specifically, its bold
property, toggling it to True.

00:04:16.010 --> 00:04:19.850
Finally, Fields specifies
which field should be effected.

00:04:19.850 --> 00:04:22.580
Think of it like a
bitmask or a field mask.

00:04:22.580 --> 00:04:24.320
Here we don't want to
change any existing

00:04:24.320 --> 00:04:26.720
formatting other than
the cell's bold setting.

00:04:26.720 --> 00:04:29.780
For example, if you only had
user entered format without

00:04:29.780 --> 00:04:32.750
the .textFormat.bold
as your Fields element,

00:04:32.750 --> 00:04:35.540
you're going to lose things like
the cell's background color,

00:04:35.540 --> 00:04:38.120
the vertical alignment,
and other properties.

00:04:38.120 --> 00:04:40.370
Check our docs to see
other formatting examples,

00:04:40.370 --> 00:04:43.400
as well as to find out
more about field masks.

00:04:43.400 --> 00:04:47.720
Now let's format the toy unit
costs in column E. For range,

00:04:47.720 --> 00:04:50.270
I left off the Sheet ID
because we know it's zero.

00:04:50.270 --> 00:04:52.100
We're formatting
rows two through six,

00:04:52.100 --> 00:04:55.520
meaning start and end
indexes of one and six.

00:04:55.520 --> 00:04:58.040
But we should drop the
endRowIndex for the same reason

00:04:58.040 --> 00:05:01.220
as described before-- to
bold all of the first row.

00:05:01.220 --> 00:05:03.340
Instead of omitting
the endColumnIndex,

00:05:03.340 --> 00:05:05.900
we leave off the
endRowIndex so as to format

00:05:05.900 --> 00:05:09.380
the rest of the column,
even if new rows are added.

00:05:09.380 --> 00:05:13.700
Column E indexes are four and
five, and both are needed.

00:05:13.700 --> 00:05:16.400
Now, we're changing the
user entered format also.

00:05:16.400 --> 00:05:19.780
But this time, it's number
format instead of text format,

00:05:19.780 --> 00:05:21.680
giving the US Dollar
currency format

00:05:21.680 --> 00:05:24.530
with a dollar sign, comma
separated thousands, and two

00:05:24.530 --> 00:05:25.920
decimal places.

00:05:25.920 --> 00:05:28.490
The Fields mask is what
you expect, changing only

00:05:28.490 --> 00:05:29.910
the cell's number format.

00:05:29.910 --> 00:05:31.260
Getting easier?

00:05:31.260 --> 00:05:32.150
All right.

00:05:32.150 --> 00:05:34.220
More on date, time,
and number formats

00:05:34.220 --> 00:05:36.920
can be found in
the documentation.

00:05:36.920 --> 00:05:40.160
The last formatting request
is setDataValidation,

00:05:40.160 --> 00:05:42.860
adding fixed fields for
toy order status and cell

00:05:42.860 --> 00:05:45.170
validation of those values.

00:05:45.170 --> 00:05:49.490
Range is as before,
but now for column F.

00:05:49.490 --> 00:05:52.460
As before, we want to
format the entire column so

00:05:52.460 --> 00:05:54.800
leave off the endRowIndex.

00:05:54.800 --> 00:05:57.260
The rule is that the
cell should or must

00:05:57.260 --> 00:05:59.870
contain one of a list
of valid values pending

00:05:59.870 --> 00:06:01.850
shipped or delivered.

00:06:01.850 --> 00:06:04.730
Should means weak
enforcement, while must

00:06:04.730 --> 00:06:06.830
is strict enforcement.

00:06:06.830 --> 00:06:09.880
That means that if a user enters
something other than these,

00:06:09.880 --> 00:06:12.440
you'll get an alert like this.

00:06:12.440 --> 00:06:15.290
Enforcement is controlled by
the strict variable, which

00:06:15.290 --> 00:06:17.990
if you omit defaults to
false, which we did here

00:06:17.990 --> 00:06:20.150
and in the Python script.

00:06:20.150 --> 00:06:23.600
Use the inputMessage attribute
if you want a custom message

00:06:23.600 --> 00:06:25.349
when users go to the cell.

00:06:25.349 --> 00:06:27.140
It's not important to
me, so I'm leaving it

00:06:27.140 --> 00:06:29.300
out using the system default.

00:06:29.300 --> 00:06:31.710
If you choose strict
enforcement with inputMessage

00:06:31.710 --> 00:06:34.670
set to what we have
here and uncommented,

00:06:34.670 --> 00:06:37.070
users will get this message.

00:06:37.070 --> 00:06:38.690
If you take the
default, like I did,

00:06:38.690 --> 00:06:41.900
users will get this
dialog text instead.

00:06:41.900 --> 00:06:44.930
The showCustomUi flag causes
a pull-down list of options

00:06:44.930 --> 00:06:46.590
to be displayed.

00:06:46.590 --> 00:06:48.470
Now, it's a pretty poor
experience without it

00:06:48.470 --> 00:06:50.150
because users are
not going to know

00:06:50.150 --> 00:06:52.880
what available choices
are, so I recommend

00:06:52.880 --> 00:06:54.830
you always use it too.

00:06:54.830 --> 00:06:56.210
OK, that's it.

00:06:56.210 --> 00:06:59.510
Now you know how to format cells
using the Google Sheets API.

00:06:59.510 --> 00:07:01.610
For a change, we won't
be going to the computer

00:07:01.610 --> 00:07:04.070
today since constructing
the JSON payload makes up

00:07:04.070 --> 00:07:07.310
most of our short,
70-line Python script.

00:07:07.310 --> 00:07:09.200
If you take a look at
the code deep dive,

00:07:09.200 --> 00:07:11.490
you can confirm that,
other than the boilerplate

00:07:11.490 --> 00:07:14.420
and a single call to the
API, all the heavy lifting

00:07:14.420 --> 00:07:17.060
is done in constructing
these four requests, which

00:07:17.060 --> 00:07:20.360
consist of a Python
list of dictionaries.

00:07:20.360 --> 00:07:23.060
Check out the first link to
see more on JSON payloads,

00:07:23.060 --> 00:07:26.360
specifically common operations
that you will do with the API.

00:07:26.360 --> 00:07:28.250
The second link takes
you to the Sheets API

00:07:28.250 --> 00:07:31.970
concepts, quickstarts, and other
guides to help you get started.

00:07:31.970 --> 00:07:35.390
The last link takes you
directly to the reference docs.

00:07:35.390 --> 00:07:38.540
Once you get this sample working
and want another challenge,

00:07:38.540 --> 00:07:41.660
use the API to create a
Column G with the total cost

00:07:41.660 --> 00:07:43.790
header in cell G1.

00:07:43.790 --> 00:07:46.280
Set the cell G2 with
the formula to calculate

00:07:46.280 --> 00:07:49.640
the costs based on the toys
ordered and cost in columns D

00:07:49.640 --> 00:07:53.300
and E. And then use the
Autofill command to copy

00:07:53.300 --> 00:07:56.450
that formula down Column
G. Hint-- you only

00:07:56.450 --> 00:07:58.030
need the range attribute.

00:07:58.030 --> 00:08:00.080
More on this challenge
in the code review post

00:08:00.080 --> 00:08:01.714
mentioned earlier.

00:08:01.714 --> 00:08:04.130
We hope you learned a lot about
formatting with the Sheets

00:08:04.130 --> 00:08:05.870
API in this video
and have gotten

00:08:05.870 --> 00:08:07.265
a taste of how
much more powerful

00:08:07.265 --> 00:08:10.071
this API is compared
to previous versions.

00:08:10.071 --> 00:08:11.570
Now you can build
those awesome apps

00:08:11.570 --> 00:08:13.612
that you weren't able
to do in the past.

00:08:13.612 --> 00:08:15.320
This is Wesley Chun
from Google reminding

00:08:15.320 --> 00:08:18.290
you to subscribe to our channel
and leave any comments below.

00:08:18.290 --> 00:08:20.960
Have fun with the Sheets API
and we'll see you next time.

00:08:20.960 --> 00:08:24.310
[MUSIC PLAYING]

