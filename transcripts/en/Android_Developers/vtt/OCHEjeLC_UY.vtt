WEBVTT
Kind: captions
Language: en

00:00:04.395 --> 00:00:06.770
NICK BUTCHER: Hello, good
morning, everyone, and welcome.

00:00:06.770 --> 00:00:08.170
Thank you for
coming to our talk.

00:00:08.170 --> 00:00:12.200
Today we're going to talk
about two very highly requested

00:00:12.200 --> 00:00:14.630
user features which
are new in Android Q,

00:00:14.630 --> 00:00:18.080
and that is dark theme
and gesture navigation.

00:00:18.080 --> 00:00:20.900
My name is Nick Butcher, I'm
an engineer on the Android

00:00:20.900 --> 00:00:22.208
Developer Relations Team.

00:00:22.208 --> 00:00:23.750
CHRIS BANES: My name
is Chris Baines,

00:00:23.750 --> 00:00:25.730
and I'm also an engineer on
the Android Developer Relations

00:00:25.730 --> 00:00:26.240
Team.

00:00:26.240 --> 00:00:27.323
ROHAN SHAH: And I'm Rohan.

00:00:27.323 --> 00:00:31.630
I'm a PM on the Android
System UI and Launcher Team.

00:00:31.630 --> 00:00:34.320
NICK BUTCHER: We got a lot to
go today, so let's get started.

00:00:34.320 --> 00:00:36.762
First up, we want to talk
about the dark theme.

00:00:36.762 --> 00:00:41.090
Wait, that's better, dark theme.

00:00:41.090 --> 00:00:43.280
So why is dark theme important?

00:00:43.280 --> 00:00:45.270
We think there's
three major reasons.

00:00:45.270 --> 00:00:47.960
The first up is supporting
using your applications

00:00:47.960 --> 00:00:49.730
in darker environments.

00:00:49.730 --> 00:00:52.940
How often have you used your
phone in a darkened room

00:00:52.940 --> 00:00:55.160
and been blinded by a
bright white screen, which

00:00:55.160 --> 00:00:56.360
is not what you want?

00:00:56.360 --> 00:00:59.480
Supporting a dark theme enables
usage of your app in many wider

00:00:59.480 --> 00:01:01.320
situations.

00:01:01.320 --> 00:01:04.980
Secondly, by lighting up
less pixels on the screen,

00:01:04.980 --> 00:01:07.610
we've seen significant
reductions in power usage.

00:01:07.610 --> 00:01:09.380
In fact, in our
tests we've seen up

00:01:09.380 --> 00:01:11.540
to 60% reduction
in power usage when

00:01:11.540 --> 00:01:13.430
the app is in the
foreground, which

00:01:13.430 --> 00:01:16.220
can be a real user benefit.

00:01:16.220 --> 00:01:19.040
And lastly, dark themes
can support accessibility

00:01:19.040 --> 00:01:21.680
while maintaining
sufficient contrast ratios.

00:01:21.680 --> 00:01:24.240
They have less eye
strain on the user

00:01:24.240 --> 00:01:26.240
so that could be used by
certain classes of user

00:01:26.240 --> 00:01:29.310
much more comfortably.

00:01:29.310 --> 00:01:32.910
So for those reasons, we've
introduced a new system

00:01:32.910 --> 00:01:34.860
setting in Android Q.

00:01:34.860 --> 00:01:37.350
So now under the devices
display settings,

00:01:37.350 --> 00:01:40.410
you can choose between
a light or a dark theme.

00:01:40.410 --> 00:01:43.110
You can also use a new
Quick Settings toggle

00:01:43.110 --> 00:01:44.970
to quickly flip
between those modes

00:01:44.970 --> 00:01:46.410
and the device
will automatically

00:01:46.410 --> 00:01:50.310
kick into dark theme when your
device enters Battery Saver.

00:01:50.310 --> 00:01:53.340
Now it's important to note the
dark theme is actually a system

00:01:53.340 --> 00:01:55.590
wide setting, not
just to the system UI,

00:01:55.590 --> 00:01:59.100
but it applies to all apps
running on the device.

00:01:59.100 --> 00:02:00.660
And as such we
think that users are

00:02:00.660 --> 00:02:03.750
going to increasingly expect
your applications that you're

00:02:03.750 --> 00:02:07.680
writing to respond when
they set this system toggle.

00:02:07.680 --> 00:02:10.570
So here for example I've got two
apps running in split screen,

00:02:10.570 --> 00:02:12.570
and when I toggle
into a dark theme,

00:02:12.570 --> 00:02:15.260
we can see that only
one of them responds.

00:02:15.260 --> 00:02:18.000
And we think the users are
going to increasingly expect

00:02:18.000 --> 00:02:21.000
your application to follow this.

00:02:21.000 --> 00:02:23.790
Now I've picked on Google
Drive here because they're not

00:02:23.790 --> 00:02:26.280
currently supporting theme,
but all Google applications

00:02:26.280 --> 00:02:28.470
are actually committed
to update to support

00:02:28.470 --> 00:02:31.060
dark theme by the time
Android Q rolls out.

00:02:31.060 --> 00:02:33.570
So this is only going to
increase the user expectations.

00:02:33.570 --> 00:02:35.550
So as such, we
strongly recommend

00:02:35.550 --> 00:02:39.012
that you look at supporting
dark theme in your applications.

00:02:39.012 --> 00:02:41.220
Now we recognize that's
going to be some work for you

00:02:41.220 --> 00:02:44.100
developers, us developers,
and so as such,

00:02:44.100 --> 00:02:46.260
we're introducing something
new in Android Q which

00:02:46.260 --> 00:02:48.760
is a feature called Force Dark.

00:02:48.760 --> 00:02:52.320
Now Force Dark attempts
to automatically apply

00:02:52.320 --> 00:02:56.670
a dark theme to a light
theme application.

00:02:56.670 --> 00:02:57.670
Well, let's take a look.

00:02:57.670 --> 00:02:59.440
So here's the Google
I/O application

00:02:59.440 --> 00:03:02.460
and here it is with Force
Dark being applied to it.

00:03:02.460 --> 00:03:05.490
And it does so in a
kind of intelligent way.

00:03:05.490 --> 00:03:09.040
It runs at rendering time and
actually inspects the views

00:03:09.040 --> 00:03:11.940
that it's rendering and
tries to smartly work out

00:03:11.940 --> 00:03:14.510
which ones should be inverted
in order to run dark.

00:03:14.510 --> 00:03:17.820
It even does some clever stuff
like looking bitmap drawables

00:03:17.820 --> 00:03:20.377
and tries to work out if
there's a variation in the hue,

00:03:20.377 --> 00:03:21.960
is this some kind
of photographic data

00:03:21.960 --> 00:03:24.280
and not invert certain
kind of images.

00:03:24.280 --> 00:03:27.524
So it's got some smart
heuristics in it.

00:03:27.524 --> 00:03:30.240
Force Dark is opt in,
you have to turn it

00:03:30.240 --> 00:03:31.590
on for your application.

00:03:31.590 --> 00:03:33.900
And you do so like
this, by setting

00:03:33.900 --> 00:03:35.570
Force Dark allowed to true.

00:03:35.570 --> 00:03:38.820
Here I'm setting it at the theme
level for my entire application

00:03:38.820 --> 00:03:41.052
theme so it will apply
everywhere throughout the app.

00:03:41.052 --> 00:03:42.510
But you can choose
where to turn it

00:03:42.510 --> 00:03:45.480
on so you could turn on just
for one or two activities

00:03:45.480 --> 00:03:47.640
and use it almost as
a kind of migration

00:03:47.640 --> 00:03:49.690
to help you rapidly
adopt a dark theme.

00:03:53.070 --> 00:03:55.990
So Force Dark can help you
to rapidly adopt dark theme,

00:03:55.990 --> 00:03:57.810
but we still actually
recommend that you

00:03:57.810 --> 00:04:02.220
look into designing a custom
dark theme, which you can do so

00:04:02.220 --> 00:04:04.203
using themes and styles.

00:04:04.203 --> 00:04:05.620
The reason for
this, well, there's

00:04:05.620 --> 00:04:07.620
two main reasons this really.

00:04:07.620 --> 00:04:11.010
The first one is that Force Dark
is only available on Android Q,

00:04:11.010 --> 00:04:14.800
so it's only going to
benefit users on Q forward.

00:04:14.800 --> 00:04:17.190
Whereas implementing
a custom dark theme

00:04:17.190 --> 00:04:20.079
is actually using the standard
Android styling techniques.

00:04:20.079 --> 00:04:23.700
You can roll out your dark
theme into all kind of major API

00:04:23.700 --> 00:04:25.975
levels.

00:04:25.975 --> 00:04:27.850
The second reason why
we think it's important

00:04:27.850 --> 00:04:30.870
go custom is it gives you
utmost control over exactly

00:04:30.870 --> 00:04:34.110
how your app renders, which
is what you want, right?

00:04:34.110 --> 00:04:36.120
You don't actually
get to hook into how

00:04:36.120 --> 00:04:38.040
Force Dark will darken
your applications

00:04:38.040 --> 00:04:40.060
or how it will
change the colors.

00:04:40.060 --> 00:04:42.360
So if you want control
over, if your designers

00:04:42.360 --> 00:04:44.610
wants to be able to control
the exact shades of blue

00:04:44.610 --> 00:04:46.777
that they're [INAUDIBLE]
here is going to change to,

00:04:46.777 --> 00:04:51.400
for example, then a custom
theme is the way to go.

00:04:51.400 --> 00:04:53.610
So to help you to
design for dark themes,

00:04:53.610 --> 00:04:56.460
we've just released this
week some updated guidance

00:04:56.460 --> 00:04:59.280
on the material.io
website, which

00:04:59.280 --> 00:05:03.290
covers how to generally design
a dark themed application.

00:05:03.290 --> 00:05:05.400
With specific guidance
around important areas

00:05:05.400 --> 00:05:08.580
such as accessibility
and guidance on how

00:05:08.580 --> 00:05:12.990
to adapt your apps color system
to work under a dark palette.

00:05:12.990 --> 00:05:15.360
In fact, there's another
session at Google I/O right

00:05:15.360 --> 00:05:17.820
after this one on
stage one which

00:05:17.820 --> 00:05:22.700
is all about how to
design for the dark theme.

00:05:22.700 --> 00:05:24.590
So to implement a dark
theme, we recommend

00:05:24.590 --> 00:05:27.020
that you take a look at the
AppCompat material design

00:05:27.020 --> 00:05:30.680
components libraries which Chris
is going to talk about now.

00:05:30.680 --> 00:05:32.720
CHRIS BANES: Thanks
Nick, so DayNight

00:05:32.720 --> 00:05:34.670
is a feature in
AppCompact which we've

00:05:34.670 --> 00:05:36.590
had for a number
of years now, which

00:05:36.590 --> 00:05:38.750
allows you to easily
implement one of those custom

00:05:38.750 --> 00:05:40.650
themes in your app.

00:05:40.650 --> 00:05:43.400
Now the way it works is by
enabling the Night Resource

00:05:43.400 --> 00:05:48.802
Qualifier, and it works back
to API 14, which Android 4.0.

00:05:48.802 --> 00:05:51.010
We've been hard at work for
the past couple of months

00:05:51.010 --> 00:05:54.290
to improve it and that is
available in AppCompact

00:05:54.290 --> 00:05:55.880
1.1, which is available now.

00:05:58.235 --> 00:06:01.430
To implement a theme
using DayNight,

00:06:01.430 --> 00:06:04.010
the first thing you need to
do is change your theme parent

00:06:04.010 --> 00:06:05.870
to be one of the themes that
are compatible with DayNight

00:06:05.870 --> 00:06:06.370
variance.

00:06:08.593 --> 00:06:10.260
If you're using
materials on components,

00:06:10.260 --> 00:06:12.420
which I'd recommend
you do, it also

00:06:12.420 --> 00:06:16.360
provides a DayNight theme in its
version 1.1, again, available

00:06:16.360 --> 00:06:16.860
now.

00:06:22.190 --> 00:06:24.170
As we mentioned
earlier, AppCompat

00:06:24.170 --> 00:06:27.290
enables the -night
resource qualifier to work.

00:06:27.290 --> 00:06:29.990
And that is exactly how
the theme is implemented.

00:06:29.990 --> 00:06:31.850
You can see in our
default configuration

00:06:31.850 --> 00:06:34.460
that DayNight points to
Theme.AppCompat.Light, which

00:06:34.460 --> 00:06:36.500
means that when the
light theme is selected,

00:06:36.500 --> 00:06:37.990
we'll use a light theme.

00:06:37.990 --> 00:06:40.450
And when in our
night configuration,

00:06:40.450 --> 00:06:43.730
in values-night, it points to
a Theme.AppCompat, which means

00:06:43.730 --> 00:06:44.330
we'll go dark.

00:06:46.940 --> 00:06:48.560
The next thing we
need to do is tell

00:06:48.560 --> 00:06:50.480
AppCompat what mode to use.

00:06:50.480 --> 00:06:52.140
Now we have two APIs for that.

00:06:52.140 --> 00:06:54.150
The first is
setDefaultNightMode,

00:06:54.150 --> 00:06:55.580
which is used when
you want to set

00:06:55.580 --> 00:06:59.840
a mode across your entire app,
so all of your activities.

00:06:59.840 --> 00:07:02.360
If you need a local override
in a specific activity,

00:07:02.360 --> 00:07:05.593
we have setLocalNightMode.

00:07:05.593 --> 00:07:07.260
Now one thing to note
is that the values

00:07:07.260 --> 00:07:10.220
you set on these APIs
are not persisted.

00:07:10.220 --> 00:07:12.740
So therefore, you need to set--

00:07:12.740 --> 00:07:15.407
use the method whenever your
app process is brought up.

00:07:15.407 --> 00:07:17.240
Usually you'll do in
you application object.

00:07:20.270 --> 00:07:22.220
Using those APIs, you
need to give it a mode.

00:07:22.220 --> 00:07:24.240
And we offer four main modes.

00:07:24.240 --> 00:07:27.980
The first is MODE_NIGHT_YES,
which means always dark.

00:07:27.980 --> 00:07:30.840
MODE_NIGHT_NO, which
is always light.

00:07:30.840 --> 00:07:33.810
FOLLOW_SYSTEM, which will follow
the current system setting.

00:07:33.810 --> 00:07:36.990
Now on Q because we have a new
system setting, which is great,

00:07:36.990 --> 00:07:38.120
it will do that basically.

00:07:38.120 --> 00:07:39.745
Whenever the system
setting is changed,

00:07:39.745 --> 00:07:41.960
your app will follow it.

00:07:41.960 --> 00:07:45.170
When your running on devices
before Q, so Pie or earlier,

00:07:45.170 --> 00:07:46.890
it will usually default
to a white theme.

00:07:49.810 --> 00:07:51.820
The next new mode is
called AUTO_BATTERY, which

00:07:51.820 --> 00:07:54.220
we've added in AppCompat 1.1.

00:07:54.220 --> 00:07:56.290
And that goes dark whenever
battery saver feature

00:07:56.290 --> 00:07:57.220
is enabled.

00:07:57.220 --> 00:07:59.430
And it works back to API 21.

00:07:59.430 --> 00:08:01.510
So you can see an
example where a device is

00:08:01.510 --> 00:08:03.940
going into battery saving mode.

00:08:03.940 --> 00:08:07.330
When that happens, your app
will automatically go dark.

00:08:07.330 --> 00:08:09.010
When the user plugs
the device back in,

00:08:09.010 --> 00:08:10.760
it goes back to charging,
and therefore we

00:08:10.760 --> 00:08:13.342
leave battery saver
mode, like so.

00:08:13.342 --> 00:08:14.800
We'll automatically
go light again.

00:08:17.543 --> 00:08:19.210
The final thing to
check is to make sure

00:08:19.210 --> 00:08:20.585
that your activities
are extended

00:08:20.585 --> 00:08:21.902
from AppCompat activity.

00:08:21.902 --> 00:08:23.860
This may sound super
obvious, but its something

00:08:23.860 --> 00:08:25.215
which is easily forgotten.

00:08:27.535 --> 00:08:29.410
So as I said earlier,
we've been hard at work

00:08:29.410 --> 00:08:31.690
over the past couple of
months to improve the DayNight

00:08:31.690 --> 00:08:32.706
feature.

00:08:32.706 --> 00:08:35.289
And so I'd like to take through
some of the things we've done.

00:08:35.289 --> 00:08:37.929
So one key change is that
setDefaultNightMode now

00:08:37.929 --> 00:08:39.940
recreates any
visible activities.

00:08:39.940 --> 00:08:41.440
It previously didn't
do this and you

00:08:41.440 --> 00:08:42.815
had to do all that
work yourself,

00:08:42.815 --> 00:08:44.690
whereas we now do it for you.

00:08:44.690 --> 00:08:46.712
We also have an
incompatibility with WebView.

00:08:46.712 --> 00:08:48.670
Whereas if you're using
DayNight and then later

00:08:48.670 --> 00:08:50.680
inflated WebView,
we'd reset the theme

00:08:50.680 --> 00:08:52.280
and then things
would go very wrong.

00:08:52.280 --> 00:08:53.155
And that's now fixed.

00:08:53.155 --> 00:08:56.650
[AUDIENCE CHEERING]

00:08:56.650 --> 00:08:59.350
The final thing is that
MODE_NIGHT_AUTO_TIME is now

00:08:59.350 --> 00:09:01.516
that deprecated.

00:09:01.516 --> 00:09:04.030
As I said earlier,
we've been hard at work

00:09:04.030 --> 00:09:08.230
over fixing many, many bug
fixes, which you've all raised.

00:09:08.230 --> 00:09:13.760
So hopefully, if you've had
any issues, they're fixed.

00:09:13.760 --> 00:09:17.630
That leads into an
app theme setting.

00:09:17.630 --> 00:09:19.617
So to support user
customization,

00:09:19.617 --> 00:09:21.200
we recommend providing
a way for users

00:09:21.200 --> 00:09:24.930
to choose the theme that
they want in your app.

00:09:24.930 --> 00:09:26.660
An example could be
an e-book reader.

00:09:26.660 --> 00:09:28.160
If a user knows
that they are always

00:09:28.160 --> 00:09:30.080
going to use the app at
night, and they always

00:09:30.080 --> 00:09:32.030
want it to be dark,
you want to find a way

00:09:32.030 --> 00:09:34.370
for the user to select that.

00:09:34.370 --> 00:09:35.960
We recommend there
be three options

00:09:35.960 --> 00:09:38.420
when we're [INAUDIBLE]
Android Q. Light, dark,

00:09:38.420 --> 00:09:41.360
and then system default. System
default being the default

00:09:41.360 --> 00:09:44.250
option for your app.

00:09:44.250 --> 00:09:46.030
If you're running
it on Android P

00:09:46.030 --> 00:09:48.590
or before, because we don't
have that system setting,

00:09:48.590 --> 00:09:50.240
the options are
slightly different.

00:09:50.240 --> 00:09:54.335
They're now light, dark,
and set by battery saver.

00:09:54.335 --> 00:09:55.960
Now the keen-eyed
among you will notice

00:09:55.960 --> 00:09:57.480
that those options
map pre-directly

00:09:57.480 --> 00:09:59.860
to some of the AppCompat modes
and that's totally on purpose.

00:09:59.860 --> 00:10:02.020
There's a 1-to-1 correlation
between those options

00:10:02.020 --> 00:10:04.803
and the modes we actually
have and we offer you.

00:10:04.803 --> 00:10:06.470
So now I'm going to
hand it over to Nick

00:10:06.470 --> 00:10:10.500
to talk about how elevation
works with dark theme.

00:10:10.500 --> 00:10:11.500
NICK BUTCHER: Elevation.

00:10:11.500 --> 00:10:15.070
So in material design,
elevation is a key concept

00:10:15.070 --> 00:10:18.400
for showing the
importance of some content

00:10:18.400 --> 00:10:21.490
in your application, by changing
the elevation of the surface

00:10:21.490 --> 00:10:24.160
and for hinting at
interaction cues.

00:10:24.160 --> 00:10:27.400
Now in light themes, this is
represented with a shadow.

00:10:27.400 --> 00:10:29.440
And as the elevation
raises up, the shadow

00:10:29.440 --> 00:10:31.390
becomes more diffuse.

00:10:31.390 --> 00:10:34.210
But when you have a dark
background, like in dark theme,

00:10:34.210 --> 00:10:35.950
this can be harder to see.

00:10:35.950 --> 00:10:40.300
And as such, we're introducing
the idea of elevation overlays.

00:10:40.300 --> 00:10:43.450
The idea here being that,
as the surface raises up

00:10:43.450 --> 00:10:45.700
to get closer to the
virtual light source,

00:10:45.700 --> 00:10:48.250
the actual surface
color itself changes,

00:10:48.250 --> 00:10:50.260
as if there was a
semi-opaque white layer

00:10:50.260 --> 00:10:53.290
on top of it, which gets
more opaque as you raise up

00:10:53.290 --> 00:10:54.830
in elevation.

00:10:54.830 --> 00:10:55.330
Don't worry.

00:10:55.330 --> 00:10:56.705
We're not actually
doing overdraw

00:10:56.705 --> 00:10:57.880
of the white layer on top.

00:10:57.880 --> 00:11:00.340
This is actually, we kind
of blend down the color

00:11:00.340 --> 00:11:04.190
and use it as a tint on
the background color.

00:11:04.190 --> 00:11:06.495
So to use elevation
overlays, then

00:11:06.495 --> 00:11:08.620
all of the components in
material design components

00:11:08.620 --> 00:11:11.463
version 1.1 onwards will
support this out the box.

00:11:11.463 --> 00:11:12.880
These are the
components which use

00:11:12.880 --> 00:11:15.340
the color surface attribute
for the background color

00:11:15.340 --> 00:11:16.848
and support elevation.

00:11:16.848 --> 00:11:19.390
And as such, just by setting
the elevation on the components,

00:11:19.390 --> 00:11:21.942
you'll get this surface
overlay behavior.

00:11:21.942 --> 00:11:24.400
But if you want to build this
behavior into your own custom

00:11:24.400 --> 00:11:26.920
components, there's
a couple of options.

00:11:26.920 --> 00:11:29.243
Firstly, you could use
the MaterialShapeDrawable,

00:11:29.243 --> 00:11:30.910
which is the kind of
background drawable

00:11:30.910 --> 00:11:32.800
which powers a lot of materials.

00:11:32.800 --> 00:11:36.460
Shape theming, as well as this
material elevation overlays.

00:11:36.460 --> 00:11:38.600
And you can use these in
your overviews as well.

00:11:38.600 --> 00:11:40.000
It's been augmented
with new API,

00:11:40.000 --> 00:11:42.430
such as
createWithElevationOverlay or

00:11:42.430 --> 00:11:45.993
setElevation or setTranslationZ,
which will give you

00:11:45.993 --> 00:11:46.910
this overlay behavior.

00:11:49.600 --> 00:11:51.730
If you can't use the
MaterialShapeDrawable

00:11:51.730 --> 00:11:53.770
for some reason, you
can instead take a look

00:11:53.770 --> 00:11:55.612
at the
ElevationOverlayProvider class,

00:11:55.612 --> 00:11:57.070
which is what
MaterialShapeDrawable

00:11:57.070 --> 00:11:58.970
uses under the hood.

00:11:58.970 --> 00:12:00.790
This gives you
lower level methods,

00:12:00.790 --> 00:12:03.370
such as working out the
surface color for a given

00:12:03.370 --> 00:12:08.330
elevation, which you can then
use in custom drawing the same.

00:12:08.330 --> 00:12:10.080
Now, implementing dark
themes, as we said,

00:12:10.080 --> 00:12:13.770
comes down a lot to good hygiene
with your applications, themes,

00:12:13.770 --> 00:12:14.310
and styles.

00:12:14.310 --> 00:12:16.740
And we've given you some
specific tips and gotchas

00:12:16.740 --> 00:12:19.170
when implementing dark modes.

00:12:19.170 --> 00:12:21.037
Quite commonly,
we've seen an issue

00:12:21.037 --> 00:12:22.620
where applications,
which are designed

00:12:22.620 --> 00:12:24.530
like this for a
light screen, where

00:12:24.530 --> 00:12:26.880
they might have dark text
on the light background.

00:12:26.880 --> 00:12:29.538
When they apply a
dark theme to the app,

00:12:29.538 --> 00:12:31.830
you see an issue like this,
where you end up with, say,

00:12:31.830 --> 00:12:33.930
dark text on a dark
background, which you end up

00:12:33.930 --> 00:12:35.640
not being able to read.

00:12:35.640 --> 00:12:38.130
Or perhaps the text
correctly inverts to light,

00:12:38.130 --> 00:12:40.710
but your background
remains light.

00:12:40.710 --> 00:12:43.100
So these are common issues
that we see in applications

00:12:43.100 --> 00:12:44.573
supporting dark theme.

00:12:44.573 --> 00:12:45.990
And generally when
this happens is

00:12:45.990 --> 00:12:49.410
you've made some assumption
that somewhere in your layouts

00:12:49.410 --> 00:12:51.330
about being running
under a light theme.

00:12:51.330 --> 00:12:53.070
And you've kind of
hardcoded some colors,

00:12:53.070 --> 00:12:55.350
like hardcoded a white
background or black text

00:12:55.350 --> 00:12:56.462
in this case.

00:12:56.462 --> 00:12:58.170
Now you're probably
not hardcoding things

00:12:58.170 --> 00:12:59.640
like this in your layout,
but you're probably using

00:12:59.640 --> 00:13:01.025
some kind of color resource.

00:13:01.025 --> 00:13:02.400
And this is
essentially the same.

00:13:02.400 --> 00:13:06.158
If you only provide color value
in the default configuration,

00:13:06.158 --> 00:13:07.950
this is essentially
the same, that it's not

00:13:07.950 --> 00:13:11.430
going to respond when
running under dark theme.

00:13:11.430 --> 00:13:13.920
What you need to do is
provide an alternative color

00:13:13.920 --> 00:13:15.750
when running under the
night configuration

00:13:15.750 --> 00:13:17.890
here in the values-night folder.

00:13:17.890 --> 00:13:19.410
And as such, these
colors will then

00:13:19.410 --> 00:13:21.810
respond to the theme change.

00:13:21.810 --> 00:13:24.990
Better yet, you can take a
look at using theme attributes.

00:13:24.990 --> 00:13:27.270
Theme attributes are
essentially semantically named

00:13:27.270 --> 00:13:30.030
colors, which have different
values when running

00:13:30.030 --> 00:13:32.255
under a light or a dark theme.

00:13:32.255 --> 00:13:33.630
So here for example,
I'm changing

00:13:33.630 --> 00:13:37.260
that hardcoded background
from white to materials color

00:13:37.260 --> 00:13:40.190
surface color, which is a
kind of background color.

00:13:40.190 --> 00:13:42.450
And so that will flip from
white in a light theme

00:13:42.450 --> 00:13:45.960
to a very dark gray when
running under dark theme.

00:13:45.960 --> 00:13:48.930
Or likewise, I'm using the
platforms text color primary

00:13:48.930 --> 00:13:50.790
here for the text color,
which will give you

00:13:50.790 --> 00:13:51.623
the inverse of that.

00:13:51.623 --> 00:13:53.190
So it will be dark
in a light theme

00:13:53.190 --> 00:13:55.765
and light in the dark theme.

00:13:55.765 --> 00:13:58.140
In fact, if you take a look
at the material color system,

00:13:58.140 --> 00:14:00.098
it has lots of these
semantically named colors,

00:14:00.098 --> 00:14:03.925
which are super useful
for using in your designs.

00:14:03.925 --> 00:14:05.550
So you're probably
familiar with things

00:14:05.550 --> 00:14:07.675
like color primary, color
secondary, color accents,

00:14:07.675 --> 00:14:08.610
and so on.

00:14:08.610 --> 00:14:10.860
But here's the surface color
that we looked at before.

00:14:10.860 --> 00:14:14.250
But they also provide a
series of on colors, so colors

00:14:14.250 --> 00:14:16.810
which will contrast on
top of the relevant color.

00:14:16.810 --> 00:14:19.540
So On Primary, On
Secondary, On Surface.

00:14:19.540 --> 00:14:21.408
So for example, the
On Surface color

00:14:21.408 --> 00:14:22.950
is a color which
will always contrast

00:14:22.950 --> 00:14:26.380
on top of that
background Surface color.

00:14:26.380 --> 00:14:28.020
So we can use this
in combination

00:14:28.020 --> 00:14:30.780
with a neat trick that
colors state list provides

00:14:30.780 --> 00:14:33.360
to great effect
during dark theme.

00:14:33.360 --> 00:14:35.610
So for example here,
I am using the fact

00:14:35.610 --> 00:14:37.530
that color state list
lets you separate out

00:14:37.530 --> 00:14:40.830
the color from the alpha channel
and define them separately.

00:14:40.830 --> 00:14:42.690
So I'm grabbing the
colorOnSurface, so

00:14:42.690 --> 00:14:44.940
something that will always
contrast the surface color,

00:14:44.940 --> 00:14:47.440
and applying an alpha
modification to it.

00:14:47.440 --> 00:14:49.620
So this can be
super useful if you

00:14:49.620 --> 00:14:52.560
want avoid having 50 different
shades of gray in your colors

00:14:52.560 --> 00:14:54.690
XML file that you are
scared to kind of update,

00:14:54.690 --> 00:14:56.430
because you don't know
where they're going to use.

00:14:56.430 --> 00:14:58.805
Instead of that, if you can
reference these colors always

00:14:58.805 --> 00:15:00.750
guaranteed to be the
right color to contrast,

00:15:00.750 --> 00:15:02.430
given a different theme.

00:15:02.430 --> 00:15:04.200
And just apply an
alpha modification.

00:15:04.200 --> 00:15:06.060
It can be super useful.

00:15:06.060 --> 00:15:09.000
One caveat is this alpha
kind of modification

00:15:09.000 --> 00:15:11.160
was introduced in
API 23, Marshmallow.

00:15:11.160 --> 00:15:12.660
So if you want to
use it beforehand,

00:15:12.660 --> 00:15:15.360
make sure you're using the
AppCompat resources path,

00:15:15.360 --> 00:15:18.468
or loading it like this in code.

00:15:18.468 --> 00:15:20.760
Similarly, whenever you're
loading colors in code using

00:15:20.760 --> 00:15:23.070
context compact,
.getColor, for example,

00:15:23.070 --> 00:15:25.950
be wary that you want to ensure
that those colors as well have

00:15:25.950 --> 00:15:26.825
night configurations.

00:15:26.825 --> 00:15:28.700
Or better yet, you might
want to do something

00:15:28.700 --> 00:15:31.050
like this code here, which
is querying the current theme

00:15:31.050 --> 00:15:31.967
for a theme attribute.

00:15:31.967 --> 00:15:33.342
So this is how
you can get access

00:15:33.342 --> 00:15:35.250
to something like text
color primary or color

00:15:35.250 --> 00:15:38.138
surface in your code.

00:15:38.138 --> 00:15:40.430
Another class of issues we've
seen is around drawables.

00:15:40.430 --> 00:15:42.140
So if you have
drawables, you probably

00:15:42.140 --> 00:15:44.270
want them to be showing up,
like these light drawables here,

00:15:44.270 --> 00:15:45.895
but you might encounter
similar issues,

00:15:45.895 --> 00:15:49.310
as we saw before, where you
might end up with dark-on-dark.

00:15:49.310 --> 00:15:52.010
Or you could look at providing
completely separate versions

00:15:52.010 --> 00:15:55.135
of the drawables under the
drawable-night configurations.

00:15:55.135 --> 00:15:56.510
A better way is
actually probably

00:15:56.510 --> 00:15:58.340
to look at tinting,
because usually these

00:15:58.340 --> 00:16:00.770
are monochrome icons that
you just want them to change

00:16:00.770 --> 00:16:02.337
the entire color of them.

00:16:02.337 --> 00:16:03.920
So you can tint at
a couple of levels.

00:16:03.920 --> 00:16:05.940
You can either tint at
the view level here.

00:16:05.940 --> 00:16:08.240
So here I am going
to tint whatever

00:16:08.240 --> 00:16:10.370
drawables giving me with
whatever colorSecondary

00:16:10.370 --> 00:16:12.090
is for the current theme.

00:16:12.090 --> 00:16:14.630
So it'll update it
depending on the theme.

00:16:14.630 --> 00:16:16.970
Or hopefully you're
using vector drawables

00:16:16.970 --> 00:16:18.920
throughout your
app assets, which

00:16:18.920 --> 00:16:21.600
natively support tinting on
the root element of the vector.

00:16:21.600 --> 00:16:24.140
So here I'm setting the
colorControlNormal theme

00:16:24.140 --> 00:16:27.420
attribute, which is the standard
kind of gray icon color.

00:16:27.420 --> 00:16:29.390
So setting this means
your icons will always

00:16:29.390 --> 00:16:32.215
be the exactly right color.

00:16:32.215 --> 00:16:33.590
Or if you're
working in code, you

00:16:33.590 --> 00:16:35.690
could also use the
DrawableCompat class,

00:16:35.690 --> 00:16:38.660
which can apply a tint
dynamically to a drawable

00:16:38.660 --> 00:16:40.690
as well.

00:16:40.690 --> 00:16:44.390
And lastly, it can be handy to
work out if you're currently

00:16:44.390 --> 00:16:45.830
running under a
dark theme, which

00:16:45.830 --> 00:16:48.205
you can do with some code like
this, which actually looks

00:16:48.205 --> 00:16:50.810
at the configuration's
UI mode and checks

00:16:50.810 --> 00:16:52.577
whether this is
currently in night mode.

00:16:52.577 --> 00:16:55.160
So this is useful for querying
whether you're under night mode

00:16:55.160 --> 00:16:57.800
and maybe branching your logic
or setting a different tint

00:16:57.800 --> 00:17:00.563
on a drawable or some such.

00:17:00.563 --> 00:17:03.230
Those were just quick tips about
working with themes and styles.

00:17:03.230 --> 00:17:05.160
We could spend the whole
talk talking about--

00:17:05.160 --> 00:17:07.400
well, you could-- talking
about themes and styles.

00:17:07.400 --> 00:17:09.700
But we've actually already
done that a couple of times.

00:17:09.700 --> 00:17:10.910
So I highly recommend
you check out

00:17:10.910 --> 00:17:12.220
these with resources on that.

00:17:14.950 --> 00:17:16.450
Lastly, I want to
revisit Force Dark

00:17:16.450 --> 00:17:20.440
and talk about how it can help
you to migrate to a dark theme.

00:17:20.440 --> 00:17:22.030
So here's an
application designed

00:17:22.030 --> 00:17:23.901
for a light presentation.

00:17:23.901 --> 00:17:25.359
And when we apply
Force Dark to it,

00:17:25.359 --> 00:17:27.651
we can see it's generally
done a pretty good job of it.

00:17:27.651 --> 00:17:29.900
It's is generally inverted
a lot of the colors.

00:17:29.900 --> 00:17:31.110
There's a few opportunities.

00:17:31.110 --> 00:17:32.920
It could be better
in my opinion.

00:17:32.920 --> 00:17:36.410
In fact, if we compare it to
a custom dark theme, which

00:17:36.410 --> 00:17:39.310
I designed, you can see a few
things which force dark hasn't

00:17:39.310 --> 00:17:40.790
done quite right.

00:17:40.790 --> 00:17:42.760
For example, if we zoom
in on this drawable

00:17:42.760 --> 00:17:44.710
on the left, which is
indicating the depth

00:17:44.710 --> 00:17:47.200
of a threaded conversation,
Force Dark has made it a bit

00:17:47.200 --> 00:17:49.390
too light for my tastes.

00:17:49.390 --> 00:17:51.100
What you can do in
these situations, is

00:17:51.100 --> 00:17:54.790
you can set the
forceDarkAllowed to false

00:17:54.790 --> 00:17:57.240
on any given view or view
group and disable the Force

00:17:57.240 --> 00:18:00.932
Dark behavior just for
that part of the hierarchy.

00:18:00.932 --> 00:18:02.890
But remember, when you
set Force Dark to false,

00:18:02.890 --> 00:18:04.420
the general
configuration is still

00:18:04.420 --> 00:18:06.140
running under the night mode.

00:18:06.140 --> 00:18:08.410
And as such, we can use
things like tinting.

00:18:08.410 --> 00:18:10.328
And this tint
color will give you

00:18:10.328 --> 00:18:12.370
the right color for a
theme, so this will respond

00:18:12.370 --> 00:18:14.590
to the night configuration.

00:18:14.590 --> 00:18:16.640
So check out Force Dark.

00:18:16.640 --> 00:18:18.738
Like I said, it's one
line change in your theme

00:18:18.738 --> 00:18:20.030
to set it for your application.

00:18:20.030 --> 00:18:22.960
Or we've actually introduced
a new developer option

00:18:22.960 --> 00:18:26.240
where you can force the
entire device into this Force

00:18:26.240 --> 00:18:26.870
Dark mode.

00:18:26.870 --> 00:18:27.760
So if you want to
check it out now,

00:18:27.760 --> 00:18:29.200
if you're running
Beta 3 or newer,

00:18:29.200 --> 00:18:32.783
you can see how your app
responds to Force Dark.

00:18:32.783 --> 00:18:35.200
So next up, Chris going to
introduce some common scenarios

00:18:35.200 --> 00:18:36.970
we're seeing with dark mode.

00:18:36.970 --> 00:18:38.053
CHRIS BANES: Thanks, Nick.

00:18:38.053 --> 00:18:40.012
So the first thing we're
going to to talk about

00:18:40.012 --> 00:18:40.640
is web content.

00:18:40.640 --> 00:18:42.760
Now the good news is that
WebView works seamlessly

00:18:42.760 --> 00:18:43.860
with Force Dark.

00:18:43.860 --> 00:18:45.490
So if you're opted
into Force Dark

00:18:45.490 --> 00:18:48.407
when you're running under Q
and you have an example here.

00:18:48.407 --> 00:18:49.990
So we have an app
here, which you load

00:18:49.990 --> 00:18:51.690
into Google.com in a WebView.

00:18:51.690 --> 00:18:53.620
And we've enabled
Force Dark on this app.

00:18:53.620 --> 00:18:56.800
And when we go into night mode,
it changes the WebView as well.

00:19:00.770 --> 00:19:03.280
It also works in Chrome,
Chromium-based browsers,

00:19:03.280 --> 00:19:04.510
and WebView.

00:19:04.510 --> 00:19:06.130
So soon actual web
content will be

00:19:06.130 --> 00:19:08.160
able to support dark theme
natively, using their

00:19:08.160 --> 00:19:13.380
the CSS media query called
prefers-color-scheme.

00:19:13.380 --> 00:19:16.780
We've also added dark theme
support in custom browser tabs.

00:19:16.780 --> 00:19:18.640
And by that, we mean
the UI around it.

00:19:18.640 --> 00:19:20.400
So we have a new
method on Custom Tabs

00:19:20.400 --> 00:19:22.510
intent called setColorScheme.

00:19:22.510 --> 00:19:24.327
It takes one of
these three options.

00:19:24.327 --> 00:19:26.910
Now when-- here, we're in light
theme, but when we go to dark,

00:19:26.910 --> 00:19:28.700
it looks a little bit like this.

00:19:28.700 --> 00:19:31.230
Now you'll notice that
the content itself

00:19:31.230 --> 00:19:33.810
doesn't have Force Dark
applied or anything like that.

00:19:33.810 --> 00:19:35.435
That's because we're
aligned on the web

00:19:35.435 --> 00:19:38.650
content itself to use that
media query we just spoke about.

00:19:38.650 --> 00:19:42.360
Now MapView itself doesn't
support dark theme out

00:19:42.360 --> 00:19:44.070
of the box, but
we can easily make

00:19:44.070 --> 00:19:47.370
it do so by using its custom
map styling functionality.

00:19:47.370 --> 00:19:49.140
Now custom map
styling allows you

00:19:49.140 --> 00:19:51.120
to specify the colors
and text and stuff

00:19:51.120 --> 00:19:53.932
of a map via JSON file.

00:19:53.932 --> 00:19:55.890
You can see a link to a
website we can actually

00:19:55.890 --> 00:19:58.248
download some map styles
that we provide for you.

00:19:58.248 --> 00:19:59.790
I think there's nine
styles on there.

00:19:59.790 --> 00:20:01.748
Some are light, some are
dark, but you can also

00:20:01.748 --> 00:20:03.670
customize it to your needs.

00:20:03.670 --> 00:20:05.280
Now, we can actually
use that feature

00:20:05.280 --> 00:20:07.500
by using the -night
resource qualifier

00:20:07.500 --> 00:20:10.035
that we spoke about earlier
to make MapView sport dark

00:20:10.035 --> 00:20:11.197
theme natively.

00:20:11.197 --> 00:20:12.780
So in our default
configuration, we'll

00:20:12.780 --> 00:20:18.040
put a light-styled map in
the JSON file in res/raw.

00:20:18.040 --> 00:20:22.015
And then in res/raw-night, we'll
put a dark-styled JSON file.

00:20:22.015 --> 00:20:23.640
And that way MapView
will automatically

00:20:23.640 --> 00:20:26.950
load the correct map style and
then use the correct colors.

00:20:29.570 --> 00:20:32.070
NICK BUTCHER: Another issue we
see when adopting dark themes

00:20:32.070 --> 00:20:33.903
is with illustrations,
which you're probably

00:20:33.903 --> 00:20:36.080
using in empty states or
maybe onboarding or closing

00:20:36.080 --> 00:20:37.488
your applications.

00:20:37.488 --> 00:20:39.030
If you just use the
same illustration

00:20:39.030 --> 00:20:41.580
design for light theme
under a dark theme,

00:20:41.580 --> 00:20:43.202
you can see too
high contrast, where

00:20:43.202 --> 00:20:44.910
these colors are,
like, way too saturated

00:20:44.910 --> 00:20:47.760
and they contrast very highly
on these darkened backgrounds.

00:20:47.760 --> 00:20:50.100
We recommend that you
provide an alternate version

00:20:50.100 --> 00:20:52.530
when running under
a dark theme, which

00:20:52.530 --> 00:20:55.540
is more harmonious with
the darker backgrounds.

00:20:55.540 --> 00:20:58.040
Now again, you could just
provide an alternate version

00:20:58.040 --> 00:20:59.790
of this drawable, so
you have two versions

00:20:59.790 --> 00:21:01.865
of very similar drawables
in your application,

00:21:01.865 --> 00:21:03.240
but a better way
to do this might

00:21:03.240 --> 00:21:06.540
be to use an effective
drawables ability to reference

00:21:06.540 --> 00:21:08.820
color resources.

00:21:08.820 --> 00:21:11.370
The individual fills
or strokes of paths.

00:21:11.370 --> 00:21:15.570
And as such, you can vary
just the colors, when running

00:21:15.570 --> 00:21:16.830
under a night configuration.

00:21:16.830 --> 00:21:18.390
So this way, you
only have to ship

00:21:18.390 --> 00:21:20.100
one version of the
drawable, but have

00:21:20.100 --> 00:21:25.140
the colors respond to when it's
running under a dark theme.

00:21:25.140 --> 00:21:26.610
Next up is notifications.

00:21:26.610 --> 00:21:29.940
So notifications, when
running under a dark theme,

00:21:29.940 --> 00:21:32.022
will respond and go dark.

00:21:32.022 --> 00:21:34.230
So if you're using any of
the notification templates,

00:21:34.230 --> 00:21:36.540
these will work
just out of the box.

00:21:36.540 --> 00:21:38.987
But if you're using
a custom layout,

00:21:38.987 --> 00:21:41.070
you're setting a custom
layout, than all the rules

00:21:41.070 --> 00:21:43.660
we talked about before
about sliding still apply.

00:21:43.660 --> 00:21:45.660
So don't assume it's
running under a light mode.

00:21:45.660 --> 00:21:46.800
Don't hardcode colors.

00:21:46.800 --> 00:21:48.348
Use theme attributes.

00:21:48.348 --> 00:21:49.890
In fact, I'd encourage
you, if you're

00:21:49.890 --> 00:21:51.540
sliding any text in
particular, to look

00:21:51.540 --> 00:21:55.350
at the subclasses of the
notification text appearance,

00:21:55.350 --> 00:21:57.540
so that your text will
mirror that of the system's

00:21:57.540 --> 00:22:00.490
notifications as well.

00:22:00.490 --> 00:22:02.760
So that was dark mode.

00:22:02.760 --> 00:22:04.440
Our take aways
really are that users

00:22:04.440 --> 00:22:07.153
are going to increasingly
expect your applications

00:22:07.153 --> 00:22:08.820
to support dark theme,
so really, really

00:22:08.820 --> 00:22:12.120
do take a look at
supporting it as well.

00:22:12.120 --> 00:22:16.110
Use AppCompat, DayNight, and
material design components,

00:22:16.110 --> 00:22:17.700
which have lots of
built-in support

00:22:17.700 --> 00:22:20.100
for implementing this
in your applications.

00:22:20.100 --> 00:22:22.930
And be sure to look for these
latest versions, these 1.1.0,

00:22:22.930 --> 00:22:25.222
because there's been lots of
improvements and bug fixes

00:22:25.222 --> 00:22:26.400
in them.

00:22:26.400 --> 00:22:28.740
Consider Force Dark as
something to help you rapidly

00:22:28.740 --> 00:22:29.718
adopt a dark theme.

00:22:29.718 --> 00:22:31.260
And maybe use it as
a migration tool,

00:22:31.260 --> 00:22:33.052
so you can enable it
for certain activities

00:22:33.052 --> 00:22:35.820
and then roll out
custom themes gradually.

00:22:35.820 --> 00:22:37.470
And theme attribute
all the things.

00:22:37.470 --> 00:22:39.000
Don't think about
being hardcoded

00:22:39.000 --> 00:22:42.030
in a single configuration,
a single color scheme.

00:22:42.030 --> 00:22:42.870
Be very flexible.

00:22:42.870 --> 00:22:45.660
Whenever you see a
hardcoded color or color

00:22:45.660 --> 00:22:47.190
resource, if only
a single version,

00:22:47.190 --> 00:22:50.055
see that as a red flag.

00:22:50.055 --> 00:22:51.680
So now I'm going to
head over to Rohan,

00:22:51.680 --> 00:22:54.278
who's going to tell us
all about gesture nav.

00:22:54.278 --> 00:22:54.778
Cheers.

00:22:59.352 --> 00:23:01.810
ROHAN SHAH: All right, so I
have the benefit of telling you

00:23:01.810 --> 00:23:03.500
all about gesture nav.

00:23:03.500 --> 00:23:06.460
A few of you might have played
with it already on Beta 3.

00:23:06.460 --> 00:23:08.710
If you haven't, make
sure you give it a go.

00:23:08.710 --> 00:23:10.150
It's out there in settings.

00:23:10.150 --> 00:23:12.253
You can search for fully
gestural navigation.

00:23:12.253 --> 00:23:14.170
But I'll do a quick
refresher of what it looks

00:23:14.170 --> 00:23:17.020
like right now in Android Q.

00:23:17.020 --> 00:23:20.270
So we're adding a new nav mode,
if you haven't already heard,

00:23:20.270 --> 00:23:23.710
in Android Q that replaces
the beloved three buttons

00:23:23.710 --> 00:23:27.070
with three glorious gestures.

00:23:27.070 --> 00:23:29.540
And here's what they look like.

00:23:29.540 --> 00:23:32.470
On the left, you can see
that swipe up from the bottom

00:23:32.470 --> 00:23:34.990
will become the
gesture for home.

00:23:34.990 --> 00:23:37.180
Swiping up and
holding in the middle

00:23:37.180 --> 00:23:40.870
will take you to your
recent and/or overview.

00:23:40.870 --> 00:23:44.540
And on the left, you can see
that swiping in from an edge

00:23:44.540 --> 00:23:46.060
will take you back.

00:23:46.060 --> 00:23:48.970
Now the one thing that this
movie doesn't really do justice

00:23:48.970 --> 00:23:53.200
is that we're also introducing
swiping left and swiping

00:23:53.200 --> 00:23:54.970
right in order to go back.

00:23:54.970 --> 00:23:57.160
We think it's a super
awesome experience.

00:23:57.160 --> 00:23:58.180
Internally, we love it.

00:23:58.180 --> 00:23:59.740
We've heard really
great feedback.

00:23:59.740 --> 00:24:02.950
We definitely want to hear
how you feel about it.

00:24:02.950 --> 00:24:05.270
But definitely give it a try.

00:24:05.270 --> 00:24:07.570
So a big question
we've gotten is,

00:24:07.570 --> 00:24:11.380
we're introducing another nav
mode in Android, what do we do?

00:24:11.380 --> 00:24:14.015
Like, we're developers, what
are you trying to do in Android?

00:24:14.015 --> 00:24:16.390
So I want to talk about that
a little bit really quickly.

00:24:16.390 --> 00:24:18.400
In the future for
Android, we're going

00:24:18.400 --> 00:24:21.740
to be supporting two nav
modes moving forward.

00:24:21.740 --> 00:24:23.470
The first one is three buttons.

00:24:23.470 --> 00:24:25.900
You know, Android users
love three buttons.

00:24:25.900 --> 00:24:27.730
We know that it's super usable.

00:24:27.730 --> 00:24:31.180
And it also addresses a lot
of accessibility needs that

00:24:31.180 --> 00:24:33.250
gestures just cannot.

00:24:33.250 --> 00:24:35.350
On other hand, we also
know that there is

00:24:35.350 --> 00:24:37.240
a lot of desire for gestures.

00:24:37.240 --> 00:24:39.130
So we will be
supporting one gesture

00:24:39.130 --> 00:24:41.860
mode, which is what you saw,
moving forward in Android.

00:24:41.860 --> 00:24:44.540
And only that one.

00:24:44.540 --> 00:24:46.630
I want to take a quick
step back and talk

00:24:46.630 --> 00:24:49.330
about why we're doing this now,
before we dive into the details

00:24:49.330 --> 00:24:50.800
for developers.

00:24:50.800 --> 00:24:53.470
And talk about user trends here.

00:24:53.470 --> 00:24:55.880
So Dan Sandler talked
about this in his talk

00:24:55.880 --> 00:24:57.460
in what's new on Android.

00:24:57.460 --> 00:25:00.420
But users increasingly
want immersive experiences

00:25:00.420 --> 00:25:01.480
in Android.

00:25:01.480 --> 00:25:04.600
And one thing that
device makers have done

00:25:04.600 --> 00:25:08.260
is try to approach this
from a software side.

00:25:08.260 --> 00:25:10.840
And what they've done is
built their own gesture nav.

00:25:10.840 --> 00:25:13.660
And every device maker
has a different impression

00:25:13.660 --> 00:25:16.150
of how gesture nav should work.

00:25:16.150 --> 00:25:18.010
What we recognize,
on the platform side,

00:25:18.010 --> 00:25:21.220
is that kind of gets
insane for a developer,

00:25:21.220 --> 00:25:24.100
thinking about n different
gesture navs when

00:25:24.100 --> 00:25:25.710
you're trying to develop.

00:25:25.710 --> 00:25:31.480
Just design for, test for your
app, just kind of gets insane.

00:25:31.480 --> 00:25:34.370
So with that in mind, we
introduced this gesture nav

00:25:34.370 --> 00:25:36.760
in Q. And we're going
to be standardizing

00:25:36.760 --> 00:25:40.630
the ecosystem as of Q on
three buttons and our model

00:25:40.630 --> 00:25:42.880
moving forward.

00:25:42.880 --> 00:25:45.553
And just want to elaborate
the problem here.

00:25:45.553 --> 00:25:47.470
You know, there's a lot
of different gestures.

00:25:47.470 --> 00:25:49.060
These are just some of them.

00:25:49.060 --> 00:25:51.760
Dan's talk had
different swirl gestures

00:25:51.760 --> 00:25:54.830
and maybe a knock knock
does something different,

00:25:54.830 --> 00:25:57.250
but we do want to unify
that core set of gestures,

00:25:57.250 --> 00:26:01.220
back, home, and recents.

00:26:01.220 --> 00:26:03.240
Taking a slightly
different spin on this,

00:26:03.240 --> 00:26:05.380
why should you care as an app?

00:26:05.380 --> 00:26:08.160
I'm going to regurgitate
that immersion bit,

00:26:08.160 --> 00:26:10.980
but flipping this
a little bit, there

00:26:10.980 --> 00:26:12.690
is an opportunity
for you, as an app,

00:26:12.690 --> 00:26:15.510
to delight your user by bringing
this immersive experience

00:26:15.510 --> 00:26:16.500
to your app.

00:26:16.500 --> 00:26:18.780
And making sure that it's
compatible with this new nav

00:26:18.780 --> 00:26:19.980
mode.

00:26:19.980 --> 00:26:21.780
In terms of compatibility,
we recognize

00:26:21.780 --> 00:26:23.580
that there may be some
conflicts that you

00:26:23.580 --> 00:26:25.290
will need to handle as an app.

00:26:25.290 --> 00:26:28.180
And we'll talk about
that coming up.

00:26:28.180 --> 00:26:29.910
Cool.

00:26:29.910 --> 00:26:32.730
So how do you make
your app nav-ready?

00:26:32.730 --> 00:26:35.460
And nav just means, you
know, any nav mode, 3 button,

00:26:35.460 --> 00:26:36.570
gesture nav.

00:26:36.570 --> 00:26:38.670
How do you prepare for
this immersive experience?

00:26:38.670 --> 00:26:41.850
And more importantly, how do
you prepare for gesture nav?

00:26:41.850 --> 00:26:43.540
There are three
things you need to do.

00:26:43.540 --> 00:26:46.080
The first one is making
sure that your app

00:26:46.080 --> 00:26:50.410
goes edge-to-edge, which Chris
will explain a little bit more.

00:26:50.410 --> 00:26:53.400
The second thing you need to do
is leverage insets, old insets

00:26:53.400 --> 00:26:55.470
and new ones that we're
adding, to make sure

00:26:55.470 --> 00:26:58.380
that any kind of critical
content is in a safe place

00:26:58.380 --> 00:27:01.230
and is in optimal positioning.

00:27:01.230 --> 00:27:03.960
And the third and final
thing is handling conflicts.

00:27:03.960 --> 00:27:06.430
If you do have a conflict,
how do you handle it,

00:27:06.430 --> 00:27:08.980
and how can you override
certain gestures

00:27:08.980 --> 00:27:11.190
so you can bring a better
delightful experience

00:27:11.190 --> 00:27:13.060
to your app?

00:27:13.060 --> 00:27:13.560
Cool.

00:27:13.560 --> 00:27:17.170
So I'll hand it over to Chris
to talk about edge-to-edge.

00:27:17.170 --> 00:27:19.940
CHRIS BANES: Thanks, Rohan.

00:27:19.940 --> 00:27:21.720
Yeah, so what is
actually edge-to-edge?

00:27:21.720 --> 00:27:23.790
Well let's take a look
at a typical app when

00:27:23.790 --> 00:27:25.200
you're running Android Q today.

00:27:25.200 --> 00:27:26.910
So here you can see
the bounds of the app

00:27:26.910 --> 00:27:28.380
are actually below
the status bar

00:27:28.380 --> 00:27:31.230
and above the navigation bar.

00:27:31.230 --> 00:27:32.520
So what do you want on Q?

00:27:32.520 --> 00:27:34.380
Well simply, we want
the navigation bar

00:27:34.380 --> 00:27:36.690
to disappear, allowing
your apps content

00:27:36.690 --> 00:27:38.220
to be displayed
behind it, to create

00:27:38.220 --> 00:27:40.110
a more immersive experience.

00:27:40.110 --> 00:27:43.260
When it scrolls, it
looks a bit like this.

00:27:43.260 --> 00:27:45.720
So as recommendation, drawing
behind the navigation bar

00:27:45.720 --> 00:27:49.992
is now strongly recommended
on Q. It's optional before Q,

00:27:49.992 --> 00:27:51.950
but one thing to note is
that a lot of the APIs

00:27:51.950 --> 00:27:53.700
and how you do this
actually works back

00:27:53.700 --> 00:27:55.057
to previous versions of Android.

00:27:55.057 --> 00:27:56.890
So if you're going to
put the work in for Q,

00:27:56.890 --> 00:27:59.223
it's not that much more work
to do it for previous to Q,

00:27:59.223 --> 00:28:00.840
as well.

00:28:00.840 --> 00:28:02.600
Now let's take a look
at the status bar.

00:28:02.600 --> 00:28:04.530
Now similarly, we actually
want the status bar

00:28:04.530 --> 00:28:05.490
to go away as well.

00:28:05.490 --> 00:28:08.010
Again, allowing your app content
to be displayed behind it,

00:28:08.010 --> 00:28:09.670
creating a more
immersive experience.

00:28:09.670 --> 00:28:11.610
And you'll hear the
word immersive a lot

00:28:11.610 --> 00:28:14.050
in this presentation.

00:28:14.050 --> 00:28:17.730
So now our app looks a little
bit like this when it scrolls.

00:28:17.730 --> 00:28:20.580
Again, drawing behind the status
bar is now recommended on Q,

00:28:20.580 --> 00:28:25.970
and optional before Q. So if
we take a look at our bounds,

00:28:25.970 --> 00:28:28.310
they've come from
here to here, which is

00:28:28.310 --> 00:28:31.360
where we get edge-to-edge from.

00:28:31.360 --> 00:28:33.485
So let's take a look at
now about how much actually

00:28:33.485 --> 00:28:35.320
implement this stuff.

00:28:35.320 --> 00:28:37.320
So the good news is that
from Android Q onwards,

00:28:37.320 --> 00:28:40.110
the system is now responsible
for recoloring the system

00:28:40.110 --> 00:28:41.820
buttons and the handles.

00:28:41.820 --> 00:28:44.550
So you can see here, an
example, where as we scroll,

00:28:44.550 --> 00:28:46.288
that navigation bar
handle at the bottom

00:28:46.288 --> 00:28:48.330
is changing color based
on the content behind it.

00:28:50.870 --> 00:28:52.370
Now the recoloring
can take the form

00:28:52.370 --> 00:28:55.190
of both dynamic color adaption,
which you've just seen.

00:28:55.190 --> 00:28:58.815
Or it could be static coloring
on less powerful devices.

00:28:58.815 --> 00:29:00.440
When you're running
on older platforms,

00:29:00.440 --> 00:29:02.540
because that recurring
doesn't happen,

00:29:02.540 --> 00:29:05.110
we recommend that you set a
translucent nav bar color,

00:29:05.110 --> 00:29:09.473
so the user can actually
see those buttons.

00:29:09.473 --> 00:29:11.140
So to really make
your app go immersive,

00:29:11.140 --> 00:29:12.830
there are three
things you need to do.

00:29:12.830 --> 00:29:14.740
The first is change
your system bar colors.

00:29:14.740 --> 00:29:16.990
Second, request to be
laid out fullscreen.

00:29:16.990 --> 00:29:19.150
And then the final thing
is to avoid any overlaps

00:29:19.150 --> 00:29:20.780
with your views
with the system UI.

00:29:20.780 --> 00:29:22.550
So let's go for it.

00:29:22.550 --> 00:29:25.073
The first one is the change
in the navigation bar color.

00:29:25.073 --> 00:29:27.490
Now, we have this attribute
available in Lollipop onwards,

00:29:27.490 --> 00:29:28.390
which we can use.

00:29:28.390 --> 00:29:30.400
And we're just going to
set it to transparent.

00:29:30.400 --> 00:29:32.740
When you run on
Pie or before you

00:29:32.740 --> 00:29:36.715
should use a translucent
color as we just mentioned.

00:29:36.715 --> 00:29:38.340
The next thing we
need to do is request

00:29:38.340 --> 00:29:39.973
to be laid out fullscreen.

00:29:39.973 --> 00:29:42.390
Now we're going to use the
infamous set systemUiVisibility

00:29:42.390 --> 00:29:44.890
method, with a number of flags.

00:29:44.890 --> 00:29:47.540
The two flags we need
are FLAG_LAYOUT_HIDE,

00:29:47.540 --> 00:29:50.040
and that tells the system to
lay as out as if the navigation

00:29:50.040 --> 00:29:51.470
bar wasn't there.

00:29:51.470 --> 00:29:53.520
And a second is
LAYOUT_STABLE, which

00:29:53.520 --> 00:29:55.642
is special flag that
tells it to lay us out

00:29:55.642 --> 00:29:56.725
at it at our most extreme.

00:29:59.138 --> 00:30:01.430
If you also want to be
displayed behind the status bar,

00:30:01.430 --> 00:30:03.180
there's an additional
flag you need to use

00:30:03.180 --> 00:30:06.960
called LAYOUT_FULLSCREEN.

00:30:06.960 --> 00:30:08.500
Now when we lay
out fullscreen, we

00:30:08.500 --> 00:30:10.750
don't want our views to be
displayed behind the system

00:30:10.750 --> 00:30:11.330
bars.

00:30:11.330 --> 00:30:15.110
And that is where
insets come into play.

00:30:15.110 --> 00:30:17.380
Now insets are a collection
of values which tell you

00:30:17.380 --> 00:30:20.890
how much to move or
inset content by.

00:30:20.890 --> 00:30:23.650
Now what views you move,
how much you move it by,

00:30:23.650 --> 00:30:26.010
depends on the inset
and its purpose.

00:30:26.010 --> 00:30:30.340
And you might have seen
the in WindowInsets class.

00:30:30.340 --> 00:30:31.990
There are a number
of types of insets.

00:30:31.990 --> 00:30:34.330
The first type are called
system window insets

00:30:34.330 --> 00:30:36.040
and they tell you
where the system UI is

00:30:36.040 --> 00:30:38.783
being displayed over your app.

00:30:38.783 --> 00:30:41.200
They are commonly used to move
views that are not obscured

00:30:41.200 --> 00:30:43.120
by any of the system bars.

00:30:43.120 --> 00:30:46.030
So here you can see a
FAB at the bottom right.

00:30:46.030 --> 00:30:48.340
So we blow that up a little bit.

00:30:48.340 --> 00:30:51.560
Typically a FAB will have a
16 dip margin applied to it.

00:30:51.560 --> 00:30:54.170
And you can see that they are
denoted by these blue bars.

00:30:54.170 --> 00:30:56.383
So actually, in gesture
nav, it's not too bad.

00:30:56.383 --> 00:30:58.300
It's only obscured by
the bottom 2 dips or so.

00:31:01.060 --> 00:31:05.200
So we'll use the system window
inset to actually move that up.

00:31:05.200 --> 00:31:06.700
But in free button
navigation mode,

00:31:06.700 --> 00:31:08.742
it's actually a lot worse,
because the navigation

00:31:08.742 --> 00:31:11.595
bar is taller, our FAB
is a lot more obscured.

00:31:11.595 --> 00:31:12.970
So by using the
system insets, we

00:31:12.970 --> 00:31:17.200
can move out and make sure the
user can actually click it.

00:31:17.200 --> 00:31:19.240
So as a recap,
system window insets

00:31:19.240 --> 00:31:23.010
are used to move
clickable views.

00:31:23.010 --> 00:31:25.330
The next type are called
system gesturing insets.

00:31:25.330 --> 00:31:27.490
And they're new in
Q. Now they represent

00:31:27.490 --> 00:31:31.810
the areas of the window where
system gestures take priority.

00:31:31.810 --> 00:31:35.260
Visually, they look
a bit like this.

00:31:35.260 --> 00:31:37.120
So let's go through them.

00:31:37.120 --> 00:31:39.670
They include the vertical
edges for the back gesture.

00:31:39.670 --> 00:31:41.710
So if the user starts
dragging from an anywhere

00:31:41.710 --> 00:31:43.720
in the left and the
right hand zones,

00:31:43.720 --> 00:31:46.300
the back gesture will
start triggering.

00:31:46.300 --> 00:31:49.090
And again, on the bottom
side, where the home gesture

00:31:49.090 --> 00:31:51.560
takes place, again if the
user start dragging there,

00:31:51.560 --> 00:31:55.247
the home gesture will
take will take priority.

00:31:55.247 --> 00:31:56.830
Now as mentioned,
system window insets

00:31:56.830 --> 00:31:59.800
we use for clickable views,
system gesturing insets

00:31:59.800 --> 00:32:01.520
are used for draggable views.

00:32:01.520 --> 00:32:04.845
We'll go for
example a bit later.

00:32:04.845 --> 00:32:06.970
The next and final type
are called mandatory system

00:32:06.970 --> 00:32:07.810
gesturing insets.

00:32:07.810 --> 00:32:10.750
And they're a subset of system
gesture insets which define

00:32:10.750 --> 00:32:13.270
the areas which cannot be
used with exclusion APIs,

00:32:13.270 --> 00:32:15.060
which Rohan will talk
about in a minute.

00:32:15.060 --> 00:32:17.560
Now in Q, they are currently
only used for the home gesture,

00:32:17.560 --> 00:32:18.940
because that's a
protected gesture

00:32:18.940 --> 00:32:21.023
that users should always
be able to exit your app.

00:32:23.380 --> 00:32:24.130
ROHAN SHAH: Right.

00:32:24.130 --> 00:32:25.930
CHRIS BANES: Maybe
not over to Rohan.

00:32:25.930 --> 00:32:28.898
So as a quick overview, system
window insets are clickable.

00:32:28.898 --> 00:32:30.190
Gesturing insets are draggable.

00:32:30.190 --> 00:32:32.170
And mandatory system
gesture insets

00:32:32.170 --> 00:32:34.570
are used to check
the exclusion APIs.

00:32:34.570 --> 00:32:35.750
Now actually over to Rohan.

00:32:35.750 --> 00:32:37.325
ROHAN SHAH: There we go.

00:32:37.325 --> 00:32:39.700
So the third and final thing
in making your app nav ready

00:32:39.700 --> 00:32:41.530
is overwriting system gestures.

00:32:41.530 --> 00:32:43.030
So Chris already
talked a little bit

00:32:43.030 --> 00:32:45.358
about some of the system
gesture insets and ones

00:32:45.358 --> 00:32:46.150
that are mandatory.

00:32:46.150 --> 00:32:48.670
But I want to quickly talk
about what kinds of conflicts

00:32:48.670 --> 00:32:49.750
you may have to handle.

00:32:49.750 --> 00:32:52.730
And where you may
need to override.

00:32:52.730 --> 00:32:55.480
So any sort of horizontally
draggable content

00:32:55.480 --> 00:32:57.460
that resides in
those back zones,

00:32:57.460 --> 00:32:59.560
within those system
gesture insets,

00:32:59.560 --> 00:33:02.500
is an area where your
app may have conflict.

00:33:02.500 --> 00:33:04.180
I want to give a
quick example here.

00:33:04.180 --> 00:33:06.850
But I opened up a
photo in the Photos app

00:33:06.850 --> 00:33:09.940
and I wanted to crop a
picture and crop my buddy out.

00:33:09.940 --> 00:33:13.540
And you'll realize that the crop
handles, the little circles you

00:33:13.540 --> 00:33:16.450
can see on each
corner of that square,

00:33:16.450 --> 00:33:19.070
are awfully close to the edge.

00:33:19.070 --> 00:33:22.900
And unfortunately, those are
in the system gesture insets

00:33:22.900 --> 00:33:25.060
and in that back zone.

00:33:25.060 --> 00:33:28.660
So there are other examples like
this, you know with sliders,

00:33:28.660 --> 00:33:33.240
seek bars, video seek bars, for
example, other drag handles,

00:33:33.240 --> 00:33:37.640
et cetera, that your app
may need to be aware of.

00:33:37.640 --> 00:33:38.140
Great.

00:33:38.140 --> 00:33:41.290
So how do you override
some of these gestures?

00:33:41.290 --> 00:33:44.200
How do you make
sure that your user

00:33:44.200 --> 00:33:47.080
is able to use those
crop handles, et cetera?

00:33:47.080 --> 00:33:49.210
So there is a new
API available in Q

00:33:49.210 --> 00:33:53.380
that will allow you to opt out
of, at least the back gesture.

00:33:53.380 --> 00:33:55.060
Home is still a mandatory area.

00:33:55.060 --> 00:33:57.400
We know that's the only way
a user can leave your app,

00:33:57.400 --> 00:34:00.370
so we're not making
that opt-out-able.

00:34:00.370 --> 00:34:03.130
But basically how
the API works is

00:34:03.130 --> 00:34:07.330
that you can
specify a rectangles

00:34:07.330 --> 00:34:10.780
on screen where basically
you'll get touch events,

00:34:10.780 --> 00:34:13.449
instead of the system
consuming it for back,

00:34:13.449 --> 00:34:16.600
or for any gesture in that area.

00:34:16.600 --> 00:34:18.060
One quick word of caution.

00:34:18.060 --> 00:34:19.060
This is pretty powerful.

00:34:19.060 --> 00:34:20.650
One quick word of
caution here is

00:34:20.650 --> 00:34:23.710
that, be really careful
when using this.

00:34:23.710 --> 00:34:25.750
Users expect to be
able to go back.

00:34:25.750 --> 00:34:28.330
It is one of the most
frequently used system actions.

00:34:28.330 --> 00:34:31.000
I think it's used
twice as much as home.

00:34:31.000 --> 00:34:33.520
And if you suddenly
break that and decide

00:34:33.520 --> 00:34:35.889
to take over the entire
edge, for example,

00:34:35.889 --> 00:34:37.900
your users might get frustrated.

00:34:37.900 --> 00:34:39.550
So be really careful
when using this.

00:34:39.550 --> 00:34:42.820
And make sure that you have
very clear visual affordances,

00:34:42.820 --> 00:34:46.000
such as the drag handle, that
indicate that you can actually

00:34:46.000 --> 00:34:46.920
swipe there.

00:34:46.920 --> 00:34:49.630
And a user will start
interacting with app content

00:34:49.630 --> 00:34:52.270
instead of going back.

00:34:52.270 --> 00:34:54.400
Taking a quick look
at the API, it's

00:34:54.400 --> 00:34:55.659
going to be in the View class.

00:34:55.659 --> 00:34:59.010
And it's called
setSystemGestureExclusionRects.

00:34:59.010 --> 00:35:01.870
And it takes in a
list of rectangles

00:35:01.870 --> 00:35:07.450
where your app will get the
touch events first and only.

00:35:07.450 --> 00:35:10.960
You can use this in onLayout, if
you have kind of static content

00:35:10.960 --> 00:35:13.000
that isn't really shifting.

00:35:13.000 --> 00:35:16.510
Or you can set this
in onDraw, if you

00:35:16.510 --> 00:35:20.810
want more kind of real time
frame-by-frame updates.

00:35:20.810 --> 00:35:21.480
Cool.

00:35:21.480 --> 00:35:23.740
So let's talk about
some common scenarios

00:35:23.740 --> 00:35:26.270
with all of these three
pieces of guidance.

00:35:26.270 --> 00:35:27.520
And Chris will take over here.

00:35:29.472 --> 00:35:31.180
CHRIS BANES: Right,
so the first scenario

00:35:31.180 --> 00:35:33.138
we're going to look
through is scrolling views.

00:35:33.138 --> 00:35:34.600
Now, as you can
see here, content

00:35:34.600 --> 00:35:36.340
should be drawn behind
the navigation bar

00:35:36.340 --> 00:35:38.590
as the list scrolls,
but when they user

00:35:38.590 --> 00:35:40.540
reaches the end of that
list, that final item

00:35:40.540 --> 00:35:42.280
should still be above
the navigation bar,

00:35:42.280 --> 00:35:45.467
allowing the user
to interact with it.

00:35:45.467 --> 00:35:46.300
As you can see here.

00:35:46.300 --> 00:35:47.470
When we reach the
end of the list,

00:35:47.470 --> 00:35:49.553
we still want those bottom
items, lightning talks,

00:35:49.553 --> 00:35:52.360
in this instance, to still
be above the navigation bar,

00:35:52.360 --> 00:35:54.970
so that users can interact.

00:35:54.970 --> 00:35:57.515
So a common way to achieve
this would be through padding.

00:35:57.515 --> 00:36:00.140
And we'll pad our scrolling view
using the system window insets

00:36:00.140 --> 00:36:02.460
that we spoke about earlier.

00:36:02.460 --> 00:36:03.710
Here's a quick code example.

00:36:03.710 --> 00:36:05.690
We'll set an on apply
window insets listener,

00:36:05.690 --> 00:36:07.200
and then we'll
waive some insets.

00:36:07.200 --> 00:36:09.668
And then we'll just set the
pattern on the scrolling view,

00:36:09.668 --> 00:36:12.210
in this it's the recycler view,
using the system window inset

00:36:12.210 --> 00:36:13.800
pattern.

00:36:13.800 --> 00:36:16.110
And the final thing
we need to do here

00:36:16.110 --> 00:36:18.850
is something called
clip to padding.

00:36:18.850 --> 00:36:20.820
Now by default,
whenever a view group

00:36:20.820 --> 00:36:23.250
sets padding, or has
padding set on it,

00:36:23.250 --> 00:36:24.780
it will clip its children.

00:36:24.780 --> 00:36:27.100
Now that's because that's
the whole effect we want.

00:36:27.100 --> 00:36:29.720
We want our children to be
displayed behind our pattern.

00:36:29.720 --> 00:36:31.100
We need to turn
that feature off.

00:36:31.100 --> 00:36:33.030
So recycler view, list view, and
all the other scrolling views

00:36:33.030 --> 00:36:33.572
support this.

00:36:33.572 --> 00:36:36.797
So just need to set to false.

00:36:36.797 --> 00:36:38.880
The next scenario is all
about navigation drawers.

00:36:38.880 --> 00:36:40.100
Now if you've tried
Beta 3, you'll

00:36:40.100 --> 00:36:42.725
probably have noticed that a lot
of apps use navigation drawers

00:36:42.725 --> 00:36:44.380
and it can sometimes
get a bit funky.

00:36:44.380 --> 00:36:45.990
So DrawerLayout
will automatically

00:36:45.990 --> 00:36:48.398
exclude the correct
edges as necessary.

00:36:48.398 --> 00:36:50.190
So here you can see,
in the Google I/O App,

00:36:50.190 --> 00:36:53.760
that when the drawer is
closed, it will open.

00:36:53.760 --> 00:36:55.320
And the next gesture,
when it's open,

00:36:55.320 --> 00:36:58.000
the back gesture will
actually take preference.

00:36:58.000 --> 00:37:01.583
Now to use this, you need
updates on 1.1.0-alpha01,

00:37:01.583 --> 00:37:02.833
which just released this week.

00:37:06.290 --> 00:37:07.940
The bottom sheets,
generally, we want

00:37:07.940 --> 00:37:10.670
to avoid views near the
vertically scrolling gesture

00:37:10.670 --> 00:37:11.908
zones.

00:37:11.908 --> 00:37:14.450
But bottom sheets are obviously
a pattern which a lot of apps

00:37:14.450 --> 00:37:15.350
use.

00:37:15.350 --> 00:37:17.030
So for collapsible
bottom sheets,

00:37:17.030 --> 00:37:18.488
we want to make
sure there's enough

00:37:18.488 --> 00:37:20.780
content above the
navigation bar for the user

00:37:20.780 --> 00:37:22.072
to be able to actually drag it.

00:37:22.072 --> 00:37:23.530
So here we're
looking at an example

00:37:23.530 --> 00:37:24.920
where we haven't done that.

00:37:24.920 --> 00:37:27.710
And you can see that as the user
tries to drag the bottom sheet,

00:37:27.710 --> 00:37:30.780
actually the home gesture
is going to takeover.

00:37:30.780 --> 00:37:33.560
And we don't want
that obviously.

00:37:33.560 --> 00:37:35.230
So one way we get
around it is by using

00:37:35.230 --> 00:37:38.690
the system gesture insets to
increase our content size,

00:37:38.690 --> 00:37:43.910
allowing enough space for the
user to actually drag it as so.

00:37:46.690 --> 00:37:49.450
Since there's a code, here we're
using the bottom sheet behavior

00:37:49.450 --> 00:37:51.010
from material on components.

00:37:51.010 --> 00:37:52.340
And it provides peekHeight.

00:37:52.340 --> 00:37:55.640
So that's the amount of height
available when it's collapsed.

00:37:55.640 --> 00:37:58.623
So here, again, we're using on
apply window insets listener,

00:37:58.623 --> 00:38:00.290
we'll grab our system
gestures, and then

00:38:00.290 --> 00:38:03.930
we'll just increase
that peek height.

00:38:03.930 --> 00:38:05.650
Now it's also
available in ViewCompat

00:38:05.650 --> 00:38:07.587
in the core library in AndroidX.

00:38:07.587 --> 00:38:09.670
And again, we've released
a new version this week,

00:38:09.670 --> 00:38:13.570
called 1.2.0-alpha01.

00:38:13.570 --> 00:38:15.130
But remember, users
can always swipe

00:38:15.130 --> 00:38:17.240
to go home by swiping at
the bottom of the screen.

00:38:17.240 --> 00:38:18.907
So even though we've
done this and we've

00:38:18.907 --> 00:38:22.058
moved the peek high up, users
can still accidentally trigger

00:38:22.058 --> 00:38:22.600
this gesture.

00:38:25.900 --> 00:38:29.230
And that's obviously
annoying for users.

00:38:29.230 --> 00:38:31.660
So draggable content
near the gesture nav zone

00:38:31.660 --> 00:38:35.200
is possible, but be careful
if you're going to do it.

00:38:35.200 --> 00:38:37.270
One thing also to say
is to try and make

00:38:37.270 --> 00:38:39.445
the draggable content
more obvious to the user,

00:38:39.445 --> 00:38:40.800
so they drag the right bit.

00:38:40.800 --> 00:38:42.550
So here you can see
that the actual header

00:38:42.550 --> 00:38:44.590
bar is fully opaque,
the content below it

00:38:44.590 --> 00:38:46.720
actually has an
alpha effect applied,

00:38:46.720 --> 00:38:50.800
trying to guide the
user to the top section.

00:38:50.800 --> 00:38:52.350
The next scenario is carousels.

00:38:52.350 --> 00:38:53.890
What that would
mean, view pages,

00:38:53.890 --> 00:38:57.123
or any horizontally scrolling
lists, like recycler views.

00:38:57.123 --> 00:38:58.540
Now one thing we
don't really want

00:38:58.540 --> 00:39:01.390
is for apps to set
exclusion rects everywhere,

00:39:01.390 --> 00:39:03.820
because that's a
problem for users.

00:39:03.820 --> 00:39:06.580
If an app sets exclusion rects
all across the left and right

00:39:06.580 --> 00:39:09.160
zones, the user is not going
to know where they can actually

00:39:09.160 --> 00:39:09.880
trigger back.

00:39:13.078 --> 00:39:14.870
The final scenario is
what about landscape?

00:39:14.870 --> 00:39:18.323
So if you've gone edge-to-edge,
what we talked about earlier,

00:39:18.323 --> 00:39:20.740
in landscape, when in button
mode, what we'll actually get

00:39:20.740 --> 00:39:23.160
is, which obviously isn't great.

00:39:23.160 --> 00:39:25.510
So you can see that the
button options are actually

00:39:25.510 --> 00:39:27.253
obscured by our apps content.

00:39:27.253 --> 00:39:28.920
Now this doesn't
happen on gesture mode.

00:39:28.920 --> 00:39:32.270
You only have this
on button mode.

00:39:32.270 --> 00:39:35.080
So if you have content which
starts near a vertical edge,

00:39:35.080 --> 00:39:38.043
think about padding all of
the content in horizontally.

00:39:38.043 --> 00:39:39.460
And one thing to
note also is make

00:39:39.460 --> 00:39:42.050
sure you test your apps both
on button modes and also

00:39:42.050 --> 00:39:44.520
the gesture nav modes.

00:39:44.520 --> 00:39:46.707
As a code example,
it's pretty easy.

00:39:46.707 --> 00:39:48.790
You just need to find a
view somewhere [INAUDIBLE]

00:39:48.790 --> 00:39:52.000
near the top, set an on
apply window insets listener,

00:39:52.000 --> 00:39:53.890
and then set the left
and right padding based

00:39:53.890 --> 00:39:55.630
on the system window insets.

00:39:55.630 --> 00:39:57.670
And that's safe to use
in all our orientations,

00:39:57.670 --> 00:40:00.460
because it will always
give you the right values.

00:40:00.460 --> 00:40:03.913
And once you've done that,
you're looking a bit like this.

00:40:03.913 --> 00:40:05.830
I just want to say, we
are adding more support

00:40:05.830 --> 00:40:08.310
in our AndroidX libraries,
Jetpack libraries,

00:40:08.310 --> 00:40:10.000
to make this a lot
easier for you.

00:40:10.000 --> 00:40:11.620
The examples we've
just gone through

00:40:11.620 --> 00:40:14.170
are just trying to show you
how we've tried to implement

00:40:14.170 --> 00:40:15.973
this in our libraries.

00:40:15.973 --> 00:40:17.890
But if you have custom
views, obviously you're

00:40:17.890 --> 00:40:20.180
also going to need to
do something similar.

00:40:20.180 --> 00:40:22.690
Now if there's difficult
patterns that you're finding,

00:40:22.690 --> 00:40:25.420
please raise them, so we can
try and build better support

00:40:25.420 --> 00:40:27.960
for you via the bug tracker.

00:40:27.960 --> 00:40:30.930
So a quick TL;DR, users will
expect that to work on all

00:40:30.930 --> 00:40:31.750
navigation modes.

00:40:31.750 --> 00:40:33.250
Please support it.

00:40:33.250 --> 00:40:36.310
Try and create immersive UIs,
because it's giving your apps

00:40:36.310 --> 00:40:39.300
more real estate to display in.

00:40:39.300 --> 00:40:41.350
Proactively update the
Jetpack and MDC libraries,

00:40:41.350 --> 00:40:43.990
because we are going to add
more support as time goes.

00:40:43.990 --> 00:40:45.660
And only use the
gesture exclusion API

00:40:45.660 --> 00:40:46.660
if you really need them.

00:40:46.660 --> 00:40:49.078
They're really meant as an
escape hatch for your apps.

00:40:49.078 --> 00:40:51.245
And finally, let us know
about troublesome scenarios

00:40:51.245 --> 00:40:53.756
via the issue tracker
we just spoke about.

00:40:57.660 --> 00:40:58.760
Thank you very much.

00:40:58.760 --> 00:41:02.110
[MUSIC PLAYING]

