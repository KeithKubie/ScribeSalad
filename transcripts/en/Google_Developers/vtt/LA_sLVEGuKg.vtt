WEBVTT
Kind: captions
Language: en

00:01:02.900 --> 00:01:06.510
Hi, welcome to another Google
Maps Developers Live.

00:01:06.510 --> 00:01:09.300
I'm broadcasting today from
Sydney on this Australia Day

00:01:09.300 --> 00:01:11.740
special, hence the
ridiculous hat.

00:01:11.740 --> 00:01:14.820
Today I'll be speaking about
Android Photo Sphere-- give a

00:01:14.820 --> 00:01:16.460
little overview--

00:01:16.460 --> 00:01:20.680
and how to get those Photo
Sphere images and put them

00:01:20.680 --> 00:01:23.000
into Google Maps Street View.

00:01:23.000 --> 00:01:25.800
So first of all, a quick
overview of Photo Sphere.

00:01:25.800 --> 00:01:30.290
It's one of my favorite features
of Android 4.2.

00:01:30.290 --> 00:01:34.910
So Photo Sphere lets you take a
complete immersive panoramic

00:01:34.910 --> 00:01:38.390
image very, very easily,
assisted by the Android

00:01:38.390 --> 00:01:41.690
camera, and it's just awesome.

00:01:41.690 --> 00:01:45.810
So let me show you a
quick look at what

00:01:45.810 --> 00:01:47.470
the result is like.

00:01:47.470 --> 00:01:51.370
So this is when you've
shared in Google+.

00:01:51.370 --> 00:01:55.410
So going over to Google+, I've
got this awesome panorama that

00:01:55.410 --> 00:01:58.990
I took here in Sydney
a while ago.

00:01:58.990 --> 00:02:01.350
So this is the Sydney Harbor
Bridge, looking out over the

00:02:01.350 --> 00:02:04.140
harbor, all the way over to
Luna Park on the right.

00:02:04.140 --> 00:02:08.178
And you can see Balmain and
McMahon's Point in between.

00:02:08.178 --> 00:02:11.270
This is an awesome, awesome
day in Sydney.

00:02:11.270 --> 00:02:13.600
So you can pan around
in Google+.

00:02:13.600 --> 00:02:16.350
You've got this great immersive
experience.

00:02:16.350 --> 00:02:19.370
So in this case, the panorama
that I took wasn't a complete

00:02:19.370 --> 00:02:22.375
360-degree panorama.

00:02:22.375 --> 00:02:28.380
I think it was about 90
or 100 degrees or so.

00:02:28.380 --> 00:02:34.620
So the Google+ viewer lets me
pan in between that range, and

00:02:34.620 --> 00:02:35.410
it's very cool.

00:02:35.410 --> 00:02:38.280
And I think if I press this,
this is the flat

00:02:38.280 --> 00:02:40.620
image that's come back.

00:02:40.620 --> 00:02:42.800
So for those that know
anything about image

00:02:42.800 --> 00:02:46.490
projections, this is an
equirectangular projection.

00:02:46.490 --> 00:02:52.056
So from there it then gets
warped into this 3D view.

00:02:52.056 --> 00:02:56.780
And we can also go full screen,
which is quite nice.

00:03:03.590 --> 00:03:07.710
So over to Street View, why
would you be interested in

00:03:07.710 --> 00:03:09.940
bringing this image
into Street View?

00:03:09.940 --> 00:03:11.350
For a few reasons.

00:03:11.350 --> 00:03:13.940
You can share the image
on your own site.

00:03:13.940 --> 00:03:17.140
So if you'd like to keep your
panoramas private, or if you

00:03:17.140 --> 00:03:20.250
don't want to share it through
Google+, or for some reason

00:03:20.250 --> 00:03:23.520
your panorama hasn't been
accepted onto Google Maps, you

00:03:23.520 --> 00:03:25.650
can use this to embed
it on your own site.

00:03:25.650 --> 00:03:27.490
You can also customize
the panorama.

00:03:27.490 --> 00:03:31.095
So if you, for example, wanted
to do some post processing bit

00:03:31.095 --> 00:03:34.840
of image editing, you could
change the colors, maybe put

00:03:34.840 --> 00:03:36.920
some image overlays.

00:03:36.920 --> 00:03:39.950
And finally, Maps API Street
View's very powerful.

00:03:39.950 --> 00:03:42.740
You can link panoramas
together.

00:03:42.740 --> 00:03:45.340
So for example, if you've taken
a photo in the lobby of

00:03:45.340 --> 00:03:51.330
your business and you want to
link that through to a meeting

00:03:51.330 --> 00:03:54.370
room, or if you're in a
restaurant, the waiting area

00:03:54.370 --> 00:03:57.270
through to some of the tables,
you can do all of that using

00:03:57.270 --> 00:03:58.520
the Maps API.

00:04:01.010 --> 00:04:06.260
So a quick look at the
Photo Sphere format.

00:04:06.260 --> 00:04:07.970
You can download an image.

00:04:07.970 --> 00:04:10.410
You can obtain this
image directly

00:04:10.410 --> 00:04:12.360
through the Android gallery.

00:04:12.360 --> 00:04:14.760
If you've shared it through
Google+, you can download it

00:04:14.760 --> 00:04:16.829
from the options menu.

00:04:16.829 --> 00:04:21.430
And finally, some panoramas get
accepted on Google Maps,

00:04:21.430 --> 00:04:23.930
so you can obtain imagery
through there.

00:04:23.930 --> 00:04:26.270
I think the easiest and the most
foolproof way is through

00:04:26.270 --> 00:04:28.910
the Android camera, but if
you've already got one on

00:04:28.910 --> 00:04:30.970
Google+, that's quite
good, too.

00:04:30.970 --> 00:04:38.070
So in this case, the image
is 3,283 by 956 pixels.

00:04:38.070 --> 00:04:41.750
That becomes important later
on, and I'll show you why.

00:04:41.750 --> 00:04:44.750
Actually, first of all, let's
look at the end result--

00:04:44.750 --> 00:04:47.210
so a Photo Sphere inside
Google Maps.

00:04:47.210 --> 00:04:50.370
So this is a Google
Maps API map.

00:04:50.370 --> 00:04:52.260
I'll show you the
code later on.

00:04:52.260 --> 00:04:54.590
But you can see this is a very
similar experience to the one

00:04:54.590 --> 00:04:55.920
on Google+.

00:04:55.920 --> 00:04:59.430
You've got this nice warping, if
you've got a browser that's

00:04:59.430 --> 00:05:03.310
capable and fast enough
to support warping.

00:05:03.310 --> 00:05:06.425
So in this case I'm using
Chrome on a Mac.

00:05:10.560 --> 00:05:13.180
And you may notice that you can
actually scroll past the

00:05:13.180 --> 00:05:16.600
bounds, which you couldn't
do on Google+.

00:05:16.600 --> 00:05:21.130
This is just a fact that I'm
using the Maps API, but you

00:05:21.130 --> 00:05:24.060
could write some custom
code to prevent that.

00:05:24.060 --> 00:05:27.510
So if you look up, everything's
black around, and

00:05:27.510 --> 00:05:28.760
you'll see why in a moment.

00:05:31.770 --> 00:05:33.020
So going back--

00:05:35.270 --> 00:05:39.400
Photo Sphere embeds a whole
bunch of metadata into the

00:05:39.400 --> 00:05:42.090
image similar to how
Exif, if you're

00:05:42.090 --> 00:05:44.860
familiar with it, is embedded.

00:05:44.860 --> 00:05:49.810
So if I run the Strings Unix
utility over the JPEG file,

00:05:49.810 --> 00:05:52.530
you get back this interesting
information.

00:05:52.530 --> 00:05:56.960
So you can see here there's a
URL ns.adobe.com, but the

00:05:56.960 --> 00:05:59.800
really interesting part is
a little bit after that.

00:05:59.800 --> 00:06:05.470
It's some XML, it's an RDF
embedded metadata, and you can

00:06:05.470 --> 00:06:09.610
see we've got all these
important parts highlighted--

00:06:09.610 --> 00:06:13.650
the cropped area image height
pixels, image width pixels.

00:06:13.650 --> 00:06:19.520
You can see, if I format it a
little better, we've got the

00:06:19.520 --> 00:06:23.310
cropped area left top, image
height, image width, full

00:06:23.310 --> 00:06:26.300
panel width, and full
panel height.

00:06:26.300 --> 00:06:28.880
So if you're sharp, you would've
noticed that we

00:06:28.880 --> 00:06:34.500
didn't see 3283 or 956
anywhere there.

00:06:34.500 --> 00:06:38.590
This is because a scaling
factor's applied, so this is

00:06:38.590 --> 00:06:41.540
important later on.

00:06:41.540 --> 00:06:45.080
But this is basically what
all those numbers mean.

00:06:45.080 --> 00:06:51.740
The cropped area is the main
image that you've taken, and

00:06:51.740 --> 00:06:54.560
the full pano is the
full padded image.

00:06:54.560 --> 00:07:01.640
So if you imagine 360 degrees on
the x-axis, and 180 degrees

00:07:01.640 --> 00:07:05.700
on the y-axis, the image
width should be

00:07:05.700 --> 00:07:08.950
twice the image height.

00:07:08.950 --> 00:07:13.840
So the six important values that
come back from Android

00:07:13.840 --> 00:07:17.430
Photo Sphere metadata is the top
pixels, the left pixels,

00:07:17.430 --> 00:07:21.150
the image height and the image
width, and the full pano's

00:07:21.150 --> 00:07:23.510
height and width.

00:07:23.510 --> 00:07:26.980
So this scaling factor needs
to be applied to

00:07:26.980 --> 00:07:28.230
all of these numbers.

00:07:33.570 --> 00:07:36.970
The easiest way to make use of
all of these numbers is to hop

00:07:36.970 --> 00:07:39.650
over to your favorite
image editor.

00:07:39.650 --> 00:07:42.090
I'll show you an example
using Photoshop.

00:07:42.090 --> 00:07:45.020
And so essentially, you need to
take the photo that you've

00:07:45.020 --> 00:07:49.420
taken, pad some black
around it.

00:07:49.420 --> 00:07:54.310
So you basically move the image
down and to the right,

00:07:54.310 --> 00:07:56.970
and then pad it out so
that it fills up that

00:07:56.970 --> 00:07:59.310
full pano pixel values.

00:08:01.880 --> 00:08:05.340
Just looking here after scaling
those numbers, we take

00:08:05.340 --> 00:08:07.730
all of them and apply it
by that scale factor.

00:08:07.730 --> 00:08:11.490
So essentially you take that
cropped area image height and

00:08:11.490 --> 00:08:16.750
width, and compare them
to the actual values.

00:08:16.750 --> 00:08:19.610
And then you just
scale them down.

00:08:19.610 --> 00:08:24.160
In Photoshop you can see here
I've gone and added some

00:08:24.160 --> 00:08:28.370
padding to the left and the top,
using the relative canvas

00:08:28.370 --> 00:08:30.280
size option.

00:08:30.280 --> 00:08:35.610
And then I've just changed the
total image value, so the

00:08:35.610 --> 00:08:38.650
result of that is something
like this.

00:08:38.650 --> 00:08:43.830
So this is a full 360- and
180-degree panorama.

00:08:43.830 --> 00:08:48.630
So you see that the amount of
photos that I've taken is

00:08:48.630 --> 00:08:50.865
quite small in comparison
to the full panorama.

00:08:54.560 --> 00:08:57.380
So from here, we just have to
take that image and put it

00:08:57.380 --> 00:08:59.220
straight into Street View.

00:08:59.220 --> 00:09:01.640
So we've done a couple tutorials
on custom Street

00:09:01.640 --> 00:09:04.570
View before, but I'll take you
through it very quickly.

00:09:04.570 --> 00:09:06.110
It's really simple
to get started.

00:09:08.740 --> 00:09:12.210
You start with a Street View
panorama object, but you

00:09:12.210 --> 00:09:16.070
provide a pano provider object,
and this is where the

00:09:16.070 --> 00:09:18.060
custom thing comes in.

00:09:18.060 --> 00:09:21.720
So if I look at the Get Custom
Panorama function, it looks a

00:09:21.720 --> 00:09:23.670
little like this.

00:09:23.670 --> 00:09:25.800
You get a panorama ID--

00:09:25.800 --> 00:09:28.780
so in this case we've hard coded
it to Custom, and your

00:09:28.780 --> 00:09:32.170
returns in metadata are
about that panorama.

00:09:32.170 --> 00:09:36.840
So the important thing here is
the Get Tile URL function, and

00:09:36.840 --> 00:09:39.750
here we just return
static value.

00:09:39.750 --> 00:09:42.780
So you could cut up the image
and tile it if you like, if

00:09:42.780 --> 00:09:43.760
it's very large--

00:09:43.760 --> 00:09:46.040
in fact, it is very large.

00:09:46.040 --> 00:09:48.740
And you just provide the tile
size and the world size, so

00:09:48.740 --> 00:09:50.045
this is just the image
dimensions.

00:09:54.460 --> 00:09:57.120
OK so once we piece all of that
together, we get that

00:09:57.120 --> 00:10:00.430
beautiful Maps API custom
street view.

00:10:00.430 --> 00:10:03.430
So let's just take another look
at that very quickly.

00:10:03.430 --> 00:10:05.670
So all of that code
ends up something

00:10:05.670 --> 00:10:08.420
like this, just brilliant.

00:10:08.420 --> 00:10:11.630
And then from there you can
add links to other custom

00:10:11.630 --> 00:10:15.930
panoramas, which is great.

00:10:15.930 --> 00:10:19.260
OK so let's talk a little
bit more about

00:10:19.260 --> 00:10:21.780
this embedded format.

00:10:21.780 --> 00:10:28.580
If we inspect the bytes of this
image file, you'll see

00:10:28.580 --> 00:10:33.390
this FFE1 marker, which is
called an APP1 marker.

00:10:33.390 --> 00:10:38.910
So this is used for all sorts
of metadata, including Exif.

00:10:38.910 --> 00:10:44.150
So the next two bytes denote
how large this section is.

00:10:44.150 --> 00:10:46.820
So in this case, 03FE--

00:10:46.820 --> 00:10:48.860
that's something like
1,000 bytes.

00:10:48.860 --> 00:10:52.860
So all we need to do then is
to get the next 1,000 bytes

00:10:52.860 --> 00:10:56.000
and parse that as XML.

00:10:56.000 --> 00:10:58.570
So I'll show you some example
code using Go, but you could

00:10:58.570 --> 00:11:02.190
do this in any language
you like.

00:11:02.190 --> 00:11:07.280
So here I define an APP1
marker as E1, and we

00:11:07.280 --> 00:11:11.290
essentially scan through all of
the bytes until we get FF

00:11:11.290 --> 00:11:13.110
and then E1.

00:11:13.110 --> 00:11:16.630
And then from there we go and
call the Make Section

00:11:16.630 --> 00:11:18.630
function, which is
very simple.

00:11:18.630 --> 00:11:24.190
It just takes in the size and
then just returns the byte

00:11:24.190 --> 00:11:29.080
slice of that much of the file,
and then from there the

00:11:29.080 --> 00:11:30.330
file stops reading.

00:11:34.100 --> 00:11:38.050
So the code that sort of wraps
all of this is very simple.

00:11:38.050 --> 00:11:42.040
We continually call this next
section function looking for

00:11:42.040 --> 00:11:45.160
the APP1 markers until we
end up with something

00:11:45.160 --> 00:11:47.890
that is Adobe XMP.

00:11:47.890 --> 00:11:49.275
Once we've found something
that's Adobe

00:11:49.275 --> 00:11:50.920
XMP, we parse it--

00:11:50.920 --> 00:11:54.925
I'll show you in a second the
fields that we parse.

00:11:54.925 --> 00:11:59.600
But we use the Go's
XML parser.

00:11:59.600 --> 00:12:03.960
Extract the XMP, and then
check that it's a

00:12:03.960 --> 00:12:05.260
Photo Sphere panorama.

00:12:05.260 --> 00:12:08.190
If it's not a Photo Sphere
panorama, it's some other XMP

00:12:08.190 --> 00:12:09.800
metadata, so we just
keep looking.

00:12:12.750 --> 00:12:15.270
So from there, once we have all
that metadata, we can do

00:12:15.270 --> 00:12:17.510
these same image transformations
that I did in

00:12:17.510 --> 00:12:21.030
Photoshop using Go's
image libraries.

00:12:21.030 --> 00:12:22.295
I'll show you that
very quickly.

00:12:25.230 --> 00:12:29.910
So these are all the fields
defined as Go structs.

00:12:29.910 --> 00:12:36.710
So we have the XML name and
PanoOpts, which is the RDF

00:12:36.710 --> 00:12:38.300
description tag.

00:12:38.300 --> 00:12:40.720
So from there we just extract
the fields that we need,

00:12:40.720 --> 00:12:42.310
nothing extra.

00:12:42.310 --> 00:12:48.060
Go does not complain if it
gets fields that are

00:12:48.060 --> 00:12:50.730
unexpected.

00:12:50.730 --> 00:12:53.900
So from there we can resize
the image using the image

00:12:53.900 --> 00:12:57.640
library in Go, which
is very, very easy.

00:12:57.640 --> 00:13:01.070
We create some bounds, and these
are defined by the left

00:13:01.070 --> 00:13:05.520
top and the image's
width and height.

00:13:05.520 --> 00:13:09.230
And then we simply draw that
to an image of the correct

00:13:09.230 --> 00:13:11.970
dimensions, and then
output it as JPEG.

00:13:17.160 --> 00:13:20.070
I'll be making this
utility available.

00:13:20.070 --> 00:13:23.520
Hopefully I can convert it to an
App Engine app, and output

00:13:23.520 --> 00:13:27.000
all the required JavaScript
code, so look out for a post

00:13:27.000 --> 00:13:30.750
on the Google Maps
API Plus Page.

00:13:30.750 --> 00:13:33.810
You'll be able to read all of
the code and hopefully iterate

00:13:33.810 --> 00:13:36.460
on it and do some cool things.

00:13:36.460 --> 00:13:36.825
So that's it.

00:13:36.825 --> 00:13:39.470
That's a little overview of
Android Photo Sphere and

00:13:39.470 --> 00:13:40.720
Google Maps Street View.

