WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.015
IAN LAKE: Hi everyone.

00:00:02.015 --> 00:00:02.765
Let's get started.

00:00:07.642 --> 00:00:08.290
Come on.

00:00:08.290 --> 00:00:12.690
There's four more seats
right here in the front.

00:00:12.690 --> 00:00:13.330
I'm on stage.

00:00:13.330 --> 00:00:14.820
I'm not going to bite anymore.

00:00:14.820 --> 00:00:16.740
It's fine.

00:00:16.740 --> 00:00:17.240
Hi.

00:00:17.240 --> 00:00:18.300
My name is Ian Lake.

00:00:18.300 --> 00:00:20.750
I'm a developer
advocate at Google.

00:00:20.750 --> 00:00:24.190
I focus primarily on the Android
framework and support library,

00:00:24.190 --> 00:00:28.580
but more specifically on
the Android media framework.

00:00:28.580 --> 00:00:31.620
I'm here to talk to you
about best practices in media

00:00:31.620 --> 00:00:34.030
playback.

00:00:34.030 --> 00:00:37.210
So a very simple goal
today, and that's

00:00:37.210 --> 00:00:39.910
basically just to
tell you when to use

00:00:39.910 --> 00:00:44.570
the right APIs to build
the best audio or video

00:00:44.570 --> 00:00:48.170
playback app possible.

00:00:48.170 --> 00:00:49.800
So throughout this
talk, I'm going

00:00:49.800 --> 00:00:52.400
to be talking about a lot
of these things in terms

00:00:52.400 --> 00:00:56.330
of certain events in your
media playback life cycle.

00:00:56.330 --> 00:00:59.940
So you can imagine
any kind of media

00:00:59.940 --> 00:01:03.870
app is going to go through all
of these phases at some point.

00:01:03.870 --> 00:01:07.520
So created is obviously kind
of our one time initialization

00:01:07.520 --> 00:01:09.970
step, and then we
go into playing.

00:01:09.970 --> 00:01:13.680
And for playing, what we're
going to talk about in playing

00:01:13.680 --> 00:01:19.000
is actually outputting sound--
playing a video, playing audio.

00:01:19.000 --> 00:01:20.730
That's the playing state.

00:01:20.730 --> 00:01:23.380
And on the opposite
side is a paused.

00:01:23.380 --> 00:01:25.770
So pause is going to be
our shorthand for basically

00:01:25.770 --> 00:01:29.590
any temporary state where
we're not actually outputting

00:01:29.590 --> 00:01:32.530
any audio or any video.

00:01:32.530 --> 00:01:37.260
And at some point in our
life cycle, sad as it may be,

00:01:37.260 --> 00:01:39.900
the user may actually
exit out of our app.

00:01:39.900 --> 00:01:44.440
And at that point, you're going
to go into the stopped state.

00:01:44.440 --> 00:01:47.270
That's kind of the permanent
state where the user has moved

00:01:47.270 --> 00:01:49.710
on from your app to
maybe a different app,

00:01:49.710 --> 00:01:52.410
or they've just stopped
playback entirely.

00:01:52.410 --> 00:01:54.820
And of course,
that triggers then

00:01:54.820 --> 00:02:00.350
onDestroy which would then
clean up all of our resources.

00:02:00.350 --> 00:02:02.655
Now, I was talking
about media states.

00:02:02.655 --> 00:02:03.250
All right.

00:02:03.250 --> 00:02:06.490
And those are slightly different
than our Android lifecycle

00:02:06.490 --> 00:02:07.780
events.

00:02:07.780 --> 00:02:09.840
I know.

00:02:09.840 --> 00:02:11.860
So there's two cases.

00:02:11.860 --> 00:02:14.010
One, if you're a
video playing app--

00:02:14.010 --> 00:02:17.390
and how many people here
are doing video apps?

00:02:17.390 --> 00:02:17.890
All right.

00:02:17.890 --> 00:02:18.510
Quite a few.

00:02:18.510 --> 00:02:20.501
And audio apps?

00:02:20.501 --> 00:02:21.000
Nice.

00:02:21.000 --> 00:02:21.890
Nice.

00:02:21.890 --> 00:02:23.270
And both?

00:02:23.270 --> 00:02:24.321
Who's the overachievers?

00:02:24.321 --> 00:02:24.820
Yeah.

00:02:24.820 --> 00:02:25.760
You guys.

00:02:25.760 --> 00:02:27.510
Nicely done.

00:02:27.510 --> 00:02:30.120
So for video, you're
obviously kind of tied

00:02:30.120 --> 00:02:31.466
to the activity lifecycle.

00:02:31.466 --> 00:02:34.660
And in this case
of course, onCreate

00:02:34.660 --> 00:02:37.390
is a great place to do our
one time initialization

00:02:37.390 --> 00:02:39.780
onDestroy for our clean up.

00:02:39.780 --> 00:02:41.070
That makes sense.

00:02:41.070 --> 00:02:44.140
Things have changed slightly
with the introduction of Multi

00:02:44.140 --> 00:02:49.670
Window for Android N.
Here, previously to N,

00:02:49.670 --> 00:02:54.940
actually the onStop command
might not be called immediately

00:02:54.940 --> 00:02:56.520
after your activity ends.

00:02:56.520 --> 00:02:58.540
So some might hit
the Home button,

00:02:58.540 --> 00:03:02.340
and you might actually not
get onStop for five seconds

00:03:02.340 --> 00:03:03.750
afterwards.

00:03:03.750 --> 00:03:05.780
And if you're a
video playing app,

00:03:05.780 --> 00:03:10.120
you may not want to be
playing audio and assuming

00:03:10.120 --> 00:03:13.500
to play video for five
seconds while your app is

00:03:13.500 --> 00:03:14.620
in the background.

00:03:14.620 --> 00:03:16.370
So in this case, we
probably actually want

00:03:16.370 --> 00:03:19.001
to stop playback in onPause.

00:03:19.001 --> 00:03:19.500
Right?

00:03:19.500 --> 00:03:21.670
Because this will be
called immediately

00:03:21.670 --> 00:03:27.930
when you become not visible
or at least in the background.

00:03:27.930 --> 00:03:32.430
And plus, obviously that'd be a
disastrous idea because things

00:03:32.430 --> 00:03:36.160
running side by side, you'll
be paused but not stopped.

00:03:36.160 --> 00:03:38.960
Remember stopped is when
you become not visible.

00:03:38.960 --> 00:03:41.390
So we've actually
increased the guarantee

00:03:41.390 --> 00:03:43.480
that onStop will be
called immediately.

00:03:43.480 --> 00:03:45.610
So that makes it
the perfect place

00:03:45.610 --> 00:03:50.170
to actually stop
playback is onStop.

00:03:50.170 --> 00:03:52.630
Now, for audio apps
or if you're doing

00:03:52.630 --> 00:03:56.120
remote playback via
Google Cast, you're

00:03:56.120 --> 00:03:57.810
going to be in a service.

00:03:57.810 --> 00:04:00.380
That's kind of where we do
background work in Android.

00:04:00.380 --> 00:04:03.510
And here, we have kind
of onCreate for created,

00:04:03.510 --> 00:04:05.060
onDestroy for on destroy.

00:04:05.060 --> 00:04:09.650
So in all these cases, these
are Android lifecycle events

00:04:09.650 --> 00:04:13.010
that are going to be triggering
a change in your media

00:04:13.010 --> 00:04:14.450
playback.

00:04:14.450 --> 00:04:17.380
So you know we didn't
have anything in the play

00:04:17.380 --> 00:04:19.180
and paused states for this?

00:04:19.180 --> 00:04:20.680
That's because those
aren't actually

00:04:20.680 --> 00:04:22.660
tied to Android
lifecycle things.

00:04:22.660 --> 00:04:24.995
Those are tied to
user interactions.

00:04:24.995 --> 00:04:27.120
That's where we're going
to spend the vast majority

00:04:27.120 --> 00:04:30.660
of our time here today.

00:04:30.660 --> 00:04:33.580
So wouldn't be much
of a media playing app

00:04:33.580 --> 00:04:35.620
if it didn't
actually play media.

00:04:35.620 --> 00:04:38.151
So everyone went to
the ExoPlayer talk.

00:04:38.151 --> 00:04:38.650
No.

00:04:38.650 --> 00:04:39.971
The lines was huge.

00:04:39.971 --> 00:04:40.470
It's fine.

00:04:40.470 --> 00:04:42.390
I understand.

00:04:42.390 --> 00:04:45.300
It's OK because everything
else in this talk

00:04:45.300 --> 00:04:48.150
is not going to depend
on you knowing ExoPlayer.

00:04:48.150 --> 00:04:51.670
Actually everything
here is player agnostic.

00:04:51.670 --> 00:04:55.120
So from the Android media
framework perspective,

00:04:55.120 --> 00:04:58.270
it actually doesn't care if
you're using ExoPlayer or Media

00:04:58.270 --> 00:05:01.770
Player or some custom player
that you're forced to use.

00:05:01.770 --> 00:05:02.920
It's fine.

00:05:02.920 --> 00:05:04.710
They all work.

00:05:04.710 --> 00:05:07.730
So for example, if we were
using Media Player, mapping this

00:05:07.730 --> 00:05:12.250
onto kind of our states
for media playback,

00:05:12.250 --> 00:05:13.690
it's very simple.

00:05:13.690 --> 00:05:17.490
onCreate, we're going to then
create a new media player.

00:05:17.490 --> 00:05:19.460
Playing, we're going
to prepare pause.

00:05:19.460 --> 00:05:20.640
Pause, pause.

00:05:20.640 --> 00:05:21.950
Stop, stop.

00:05:21.950 --> 00:05:22.890
Destroy, release.

00:05:22.890 --> 00:05:23.390
Right?

00:05:23.390 --> 00:05:25.860
So in this case, it's
a very simple flow.

00:05:25.860 --> 00:05:29.340
And it kind of gets us in
the idea of what these media

00:05:29.340 --> 00:05:31.530
events are actually meaning.

00:05:31.530 --> 00:05:32.290
So woo.

00:05:32.290 --> 00:05:32.890
It plays.

00:05:32.890 --> 00:05:34.050
It paused.

00:05:34.050 --> 00:05:34.800
We're done, right?

00:05:34.800 --> 00:05:37.150
We can all go home.

00:05:37.150 --> 00:05:40.590
Well, like I said, everything
is player agnostic.

00:05:40.590 --> 00:05:44.030
So this actually doesn't
tell anyone anything

00:05:44.030 --> 00:05:46.100
about what you're doing.

00:05:46.100 --> 00:05:49.780
And really, we're trying
to do this the right way.

00:05:49.780 --> 00:05:52.140
This isn't just playing audio.

00:05:52.140 --> 00:05:55.230
This is making a great user
experience for users, right?

00:05:55.230 --> 00:05:58.390
We want all of our guys
to be happy like that guy.

00:05:58.390 --> 00:06:03.550
We don't want any sad, sunburned
faces here, but happy people.

00:06:03.550 --> 00:06:06.350
So let's do a little bit better.

00:06:06.350 --> 00:06:08.310
And there's actually a
whole bunch of things

00:06:08.310 --> 00:06:11.330
that we're going to cover
today that actually makes

00:06:11.330 --> 00:06:13.830
for a better user experience.

00:06:13.830 --> 00:06:15.830
Now, these first
two, Audio Focus

00:06:15.830 --> 00:06:17.980
and action_becoming_noisy,
are really

00:06:17.980 --> 00:06:19.830
important for local playback.

00:06:19.830 --> 00:06:23.920
So if you're playing a video
or audio on the device itself,

00:06:23.920 --> 00:06:25.390
these things are
the type of things

00:06:25.390 --> 00:06:28.220
that are going to make sure that
you're only actually putting

00:06:28.220 --> 00:06:30.850
out sound when you mean to.

00:06:30.850 --> 00:06:33.552
Now, the other two,
MediaSession and Notifications,

00:06:33.552 --> 00:06:35.010
are something you
should always do.

00:06:35.010 --> 00:06:37.210
Whether you're
playing on a device

00:06:37.210 --> 00:06:39.347
or if you're using
Google Cast, these

00:06:39.347 --> 00:06:40.930
are the things that
are actually going

00:06:40.930 --> 00:06:44.350
to tell the system what's
going on in your world

00:06:44.350 --> 00:06:46.730
so it can tell other
apps and other apps can

00:06:46.730 --> 00:06:52.840
do the type of controls that
Android provides by default.

00:06:52.840 --> 00:06:54.980
So the first thing
is Audio Focus.

00:06:54.980 --> 00:06:58.670
It's kind of the key to good
citizenship in Android when

00:06:58.670 --> 00:07:00.850
it comes to media playback.

00:07:00.850 --> 00:07:05.440
And it's really all about having
apps not talk over one another.

00:07:05.440 --> 00:07:08.370
If you could imagine
kind of the conch shell

00:07:08.370 --> 00:07:12.860
that you pass from app to app
saying, you shall now speak,

00:07:12.860 --> 00:07:14.210
and now you can speak.

00:07:14.210 --> 00:07:18.170
So this is very much a last
one wins kind of a model.

00:07:18.170 --> 00:07:20.890
So the last person who
requests audio focus

00:07:20.890 --> 00:07:24.710
should be the one that the
user is interacting with.

00:07:24.710 --> 00:07:29.860
Now, this is slightly different
than actually playing audio.

00:07:29.860 --> 00:07:32.830
We're actually going to want
to hold onto audio focus

00:07:32.830 --> 00:07:36.440
through both those playing
and paused state all the way

00:07:36.440 --> 00:07:38.850
until we're actually stopped.

00:07:38.850 --> 00:07:42.840
So really, you think of it
more of as an intent to play

00:07:42.840 --> 00:07:44.990
versus actually playing.

00:07:44.990 --> 00:07:47.540
A slight difference here.

00:07:47.540 --> 00:07:49.440
So I'm going to go
through a lot of code.

00:07:49.440 --> 00:07:50.890
I hope you're OK with that.

00:07:50.890 --> 00:07:51.630
I like code.

00:07:51.630 --> 00:07:52.854
It's nice and easy.

00:07:52.854 --> 00:07:54.520
The slides will be
available afterwards.

00:07:54.520 --> 00:07:57.890
So don't worry about
taking pictures.

00:07:57.890 --> 00:07:59.520
It's OK.

00:07:59.520 --> 00:08:00.260
You know.

00:08:00.260 --> 00:08:01.770
Pictures are great.

00:08:01.770 --> 00:08:03.880
I'm OK with pictures.

00:08:03.880 --> 00:08:05.380
But it'll all be
available online.

00:08:05.380 --> 00:08:06.400
Don't worry.

00:08:06.400 --> 00:08:08.690
And Audio Focus,
pretty straightforward.

00:08:08.690 --> 00:08:10.660
You call request
Audio Focus when you

00:08:10.660 --> 00:08:12.880
want to request Audio Focus.

00:08:12.880 --> 00:08:15.090
And then you'll really
want to check to make

00:08:15.090 --> 00:08:17.150
sure it's actually granted.

00:08:17.150 --> 00:08:20.970
Now, in 98% of the times
it will just be granted.

00:08:20.970 --> 00:08:25.200
And you're fine, and you can go
play music, play your videos.

00:08:25.200 --> 00:08:28.340
But there are a few special
cases where it actually

00:08:28.340 --> 00:08:29.320
isn't granted.

00:08:29.320 --> 00:08:32.880
So for example, if you
are in a phone call,

00:08:32.880 --> 00:08:36.780
other apps won't be
able to get Audio Focus.

00:08:36.780 --> 00:08:38.299
When you're in a
phone call, it's

00:08:38.299 --> 00:08:41.590
a very specific case
where there's generally

00:08:41.590 --> 00:08:44.090
a two way dialogue
going on hopefully

00:08:44.090 --> 00:08:47.730
the entire time-- no awkward
pauses or anything like that.

00:08:47.730 --> 00:08:49.570
So in that case, you're
actually not going

00:08:49.570 --> 00:08:51.020
to be granted Audio Focus.

00:08:51.020 --> 00:08:54.025
So make sure you actually
check the result at all times.

00:08:54.025 --> 00:08:55.650
And then of course,
when we're stopped,

00:08:55.650 --> 00:08:59.790
we're going to call
Abandon Audio Focus.

00:08:59.790 --> 00:09:03.480
Now, there's an
AudioFocusChangeListener.

00:09:03.480 --> 00:09:06.670
And the name should be
fairly self-explanatory,

00:09:06.670 --> 00:09:10.970
but it's all of the events
that happen around Audio Focus.

00:09:10.970 --> 00:09:15.990
So this is actually how other
apps tell you what's going on.

00:09:15.990 --> 00:09:21.040
So for example, if another
media has requested Audio Focus

00:09:21.040 --> 00:09:24.470
and said I want to gain
permanent Audio Focus,

00:09:24.470 --> 00:09:28.090
you'll actually get an
Audio Focus loss callback.

00:09:28.090 --> 00:09:32.120
And this is the hammer
that says you're done.

00:09:32.120 --> 00:09:33.550
The user has moved on.

00:09:33.550 --> 00:09:34.610
They're in a new app.

00:09:34.610 --> 00:09:37.060
They want to play
audio in that app.

00:09:37.060 --> 00:09:40.480
So in this case, we're just
going to stop playback.

00:09:40.480 --> 00:09:41.130
We're done.

00:09:41.130 --> 00:09:44.400
We want to respect the
user's wish to say, hey,

00:09:44.400 --> 00:09:47.560
they've moved onto a
different app that has said

00:09:47.560 --> 00:09:50.480
they're requesting Audio Focus.

00:09:50.480 --> 00:09:53.220
Now, it's not always
a permanent loss.

00:09:53.220 --> 00:09:53.720
Right?

00:09:53.720 --> 00:09:56.090
There's more transient losses.

00:09:56.090 --> 00:09:59.220
So in this case,
transient loss means

00:09:59.220 --> 00:10:03.510
that another app wants
access to play audio,

00:10:03.510 --> 00:10:06.320
and they want you to pause.

00:10:06.320 --> 00:10:09.170
They want you to not
play any more media.

00:10:09.170 --> 00:10:10.840
And just during
that time, you can

00:10:10.840 --> 00:10:12.760
imagine they had
something really important

00:10:12.760 --> 00:10:17.860
to say for a second
or the voice search

00:10:17.860 --> 00:10:20.650
and things like
use Loss Transient.

00:10:20.650 --> 00:10:24.300
So then you have kind of a
full dialogue with Google

00:10:24.300 --> 00:10:28.590
just temporarily without having
to have audio being output

00:10:28.590 --> 00:10:30.910
at the same time as you're
trying to give a voice

00:10:30.910 --> 00:10:33.430
query into Google.

00:10:33.430 --> 00:10:35.540
Now, the one you're
probably most familiar with,

00:10:35.540 --> 00:10:37.770
particularly from
a user perspective,

00:10:37.770 --> 00:10:40.010
is Transient_Can_Duck.

00:10:40.010 --> 00:10:42.190
Now, these aren't the
quack quack ducks.

00:10:42.190 --> 00:10:46.930
These are the lowering volume,
as in ducking your volume.

00:10:46.930 --> 00:10:49.270
So in this case,
you're actually going

00:10:49.270 --> 00:10:52.650
to just lower your volume,
but you can keep playing.

00:10:52.650 --> 00:10:55.530
Now, if you're an app that is
really important, that you're

00:10:55.530 --> 00:10:59.180
not missing any words,
say a podcast app.

00:10:59.180 --> 00:11:00.620
You can actually pause.

00:11:00.620 --> 00:11:03.440
It's OK to pause in these
cases-- if it's important,

00:11:03.440 --> 00:11:05.220
you have spoken words.

00:11:05.220 --> 00:11:10.100
This is just a suggestion
that you can duck.

00:11:10.100 --> 00:11:12.730
But in any case, whether
it's a Loss Transient

00:11:12.730 --> 00:11:16.170
or Transient_Can_Duck,
you'll get an Audio Focus

00:11:16.170 --> 00:11:20.400
gain when the other app
abandons Audio Focus.

00:11:20.400 --> 00:11:21.980
This kind of brings
you back to where

00:11:21.980 --> 00:11:23.850
you were, where you
can start playing

00:11:23.850 --> 00:11:27.480
audio or video at full speed.

00:11:27.480 --> 00:11:32.250
Now, for video, things are may
be slightly different in that

00:11:32.250 --> 00:11:34.166
pausing a video
every time you get

00:11:34.166 --> 00:11:37.390
a notification could be weird.

00:11:37.390 --> 00:11:40.280
So you might consider actually
just muting rather than

00:11:40.280 --> 00:11:41.160
pausing.

00:11:41.160 --> 00:11:43.070
Kind of depends
on your use case.

00:11:43.070 --> 00:11:45.980
If it's really important
that the words and audio are

00:11:45.980 --> 00:11:48.800
in sync, or if it's OK if
it cuts out for that Loss

00:11:48.800 --> 00:11:49.970
Transient.

00:11:49.970 --> 00:11:54.060
So a good way to test this
is say like, your OK Google,

00:11:54.060 --> 00:11:57.070
to your device while
a video's playing

00:11:57.070 --> 00:11:59.700
and try and decide what
makes more sense there.

00:11:59.700 --> 00:12:01.810
In a lot of cases, it is pause.

00:12:01.810 --> 00:12:04.580
But if you're doing
something on like Android TV,

00:12:04.580 --> 00:12:07.600
maybe muting temporarily
makes more sense.

00:12:10.880 --> 00:12:14.770
So the other one is
Action_Audio_Becoming_Noisy.

00:12:14.770 --> 00:12:16.730
And it's probably one
of my favorite names

00:12:16.730 --> 00:12:20.190
from a like totally
ridiculous kind of a name

00:12:20.190 --> 00:12:22.470
but actually is exactly
what's happening.

00:12:22.470 --> 00:12:25.680
So these are when you
have headphones plugged in

00:12:25.680 --> 00:12:28.050
and they become unplugged.

00:12:28.050 --> 00:12:30.880
And it's becoming noisy.

00:12:30.880 --> 00:12:33.440
This actually made sense when
you think about it, right?

00:12:33.440 --> 00:12:36.150
All of a sudden we're
switching from headphones

00:12:36.150 --> 00:12:39.800
to basically the
speaker on your device.

00:12:39.800 --> 00:12:43.800
Now, in this case, you would
rather not surprise your user.

00:12:43.800 --> 00:12:49.310
In almost all cases, this maybe
isn't an intentional thing.

00:12:49.310 --> 00:12:51.880
You can imagine someone
has it in their pocket,

00:12:51.880 --> 00:12:53.640
and it gets plugged.

00:12:53.640 --> 00:12:55.880
It's not necessarily the
best idea, especially

00:12:55.880 --> 00:12:58.220
if it's audio playback.

00:12:58.220 --> 00:13:00.410
So in this case, we're
just going to pause,

00:13:00.410 --> 00:13:03.890
and then they can hit the
Play button if they want.

00:13:03.890 --> 00:13:07.010
Now in this case, we're
creating this broadcast receiver

00:13:07.010 --> 00:13:08.320
programmatically.

00:13:08.320 --> 00:13:10.360
It's not in our
manifest, and actually we

00:13:10.360 --> 00:13:13.530
can't use manifest
ones for these.

00:13:13.530 --> 00:13:18.520
And that's OK because
audio, the Becoming_Noisy,

00:13:18.520 --> 00:13:23.200
is actually tied to when
you're outputting sound.

00:13:23.200 --> 00:13:26.700
So this is only in
the playing state.

00:13:26.700 --> 00:13:29.240
In this case, as
soon as we pause,

00:13:29.240 --> 00:13:35.110
we're not actually playing
any audio or video.

00:13:35.110 --> 00:13:38.610
Then it's OK to
unregister, right?

00:13:38.610 --> 00:13:41.570
Unplugging it when it's not
actually outputting anything

00:13:41.570 --> 00:13:45.280
is not something we
actually care about.

00:13:45.280 --> 00:13:46.830
So now we can update our chart.

00:13:46.830 --> 00:13:48.640
We have a few more
items in here.

00:13:48.640 --> 00:13:51.250
So we can see how the
lifecycle is slightly

00:13:51.250 --> 00:13:53.470
different between
Audio Focus, which

00:13:53.470 --> 00:13:55.490
goes all the way
until we're stopped,

00:13:55.490 --> 00:13:58.820
and Becoming_Noisy, which
is only when we're actually

00:13:58.820 --> 00:14:00.967
outputting sound.

00:14:00.967 --> 00:14:02.550
Now, at this point,
this is everything

00:14:02.550 --> 00:14:06.680
we need-- well, if we're
running on API 7 devices.

00:14:06.680 --> 00:14:09.140
Who has a 2.1 device?

00:14:09.140 --> 00:14:09.640
Yeah.

00:14:09.640 --> 00:14:11.110
Nobody.

00:14:11.110 --> 00:14:13.960
We have to do a little
bit more if you actually

00:14:13.960 --> 00:14:15.900
want to take advantage
of everything

00:14:15.900 --> 00:14:20.640
that Android's
offered since 2.1.

00:14:20.640 --> 00:14:23.490
And a lot of this is just
because user expectations

00:14:23.490 --> 00:14:24.280
have changed.

00:14:24.280 --> 00:14:25.770
Android's changed.

00:14:25.770 --> 00:14:27.120
Things have changed a lot.

00:14:27.120 --> 00:14:32.520
You can imagine now-- with
Android Wear and Android Auto

00:14:32.520 --> 00:14:36.060
and Bluetooth headsets--
actually taking your phone out

00:14:36.060 --> 00:14:40.350
of your pocket to pause might
actually not be the thing

00:14:40.350 --> 00:14:42.090
that users are used to.

00:14:42.090 --> 00:14:43.750
If they're out on
a run, it's not

00:14:43.750 --> 00:14:45.410
something they're going to do.

00:14:45.410 --> 00:14:49.810
Similarly, if you have controls
on the Android TV remote,

00:14:49.810 --> 00:14:53.340
they want that Play/Pause
button to actually work.

00:14:53.340 --> 00:14:56.480
Similarly, they may not actually
want to unlock their device.

00:14:56.480 --> 00:15:00.260
Aren't they expecting
controls on their lockscreen?

00:15:00.260 --> 00:15:03.280
Similarly, do they even need
to enter your app at all?

00:15:03.280 --> 00:15:05.140
If you have
notifications, there's

00:15:05.140 --> 00:15:09.480
actually little reason to go
into your app specifically just

00:15:09.480 --> 00:15:13.830
to pause or play or
skip to the next track.

00:15:13.830 --> 00:15:14.450
All right.

00:15:14.450 --> 00:15:17.760
None of this is even counting
Google Cast and remote playback

00:15:17.760 --> 00:15:21.730
which wasn't even close to being
a thing in the 2.1 [INAUDIBLE].

00:15:21.730 --> 00:15:24.730
So we have to go a
little bit farther.

00:15:24.730 --> 00:15:29.380
And in Lollipop-- despite
redoing the whole UI thing,

00:15:29.380 --> 00:15:32.780
which whatever, it's a minor
thing-- also introduced

00:15:32.780 --> 00:15:35.590
this fancy class
called MediaSession.

00:15:35.590 --> 00:15:40.600
So MediaSession is kind of the
one stop shop between your app

00:15:40.600 --> 00:15:43.960
and the rest of the
Android media framework.

00:15:43.960 --> 00:15:49.240
So it was so useful to have
just a single point for both

00:15:49.240 --> 00:15:53.460
sending commands to your app
from, say, Bluetooth headsets,

00:15:53.460 --> 00:15:57.040
as well as giving
information to the system,

00:15:57.040 --> 00:15:59.390
that we deprecated a
whole bunch of APIs.

00:15:59.390 --> 00:16:01.580
So no more remote
control client.

00:16:01.580 --> 00:16:03.760
Yay.

00:16:03.760 --> 00:16:04.260
All right.

00:16:04.260 --> 00:16:05.760
No one's excited about
more remote conrol.

00:16:05.760 --> 00:16:05.890
All right.

00:16:05.890 --> 00:16:07.140
Maybe it was before your time.

00:16:07.140 --> 00:16:08.510
It's OK.

00:16:08.510 --> 00:16:12.400
It's great, but we still
want to support older devices

00:16:12.400 --> 00:16:14.030
pre-Lollipop.

00:16:14.030 --> 00:16:16.940
So we built a
MediaSessionCompact.

00:16:16.940 --> 00:16:22.160
It Backward compatible back to
API 4, before any of this stuff

00:16:22.160 --> 00:16:23.620
actually existed.

00:16:23.620 --> 00:16:25.070
You could still
use MediaSession,

00:16:25.070 --> 00:16:26.230
and it does nothing.

00:16:26.230 --> 00:16:29.620
That's OK because it also
does all the translations

00:16:29.620 --> 00:16:32.070
to the remote
control client, which

00:16:32.070 --> 00:16:35.730
would be the Ice Cream Sandwich
through KitKat era of Android.

00:16:35.730 --> 00:16:38.110
It does all that
translation for you.

00:16:38.110 --> 00:16:42.980
So you get one API to write
across all Android versions,

00:16:42.980 --> 00:16:43.980
which is pretty sweet.

00:16:43.980 --> 00:16:48.290
That's kind of where we
want all of our APIs to be.

00:16:48.290 --> 00:16:51.850
So when you're actually
creating a MediaSessionCompat,

00:16:51.850 --> 00:16:56.440
it's actually doing a lot more
for you than you might think.

00:16:56.440 --> 00:17:00.580
So it's actually creating
what's called a token, which

00:17:00.580 --> 00:17:05.250
is actually just a parsable
wrapper around a binder

00:17:05.250 --> 00:17:10.319
but allows anyone, whether it's
the Android system or Android

00:17:10.319 --> 00:17:14.839
Wear or Android Auto or
even your own app, to build

00:17:14.839 --> 00:17:17.270
a MediaControllerCompats.

00:17:17.270 --> 00:17:19.800
And these instances
actually allow them

00:17:19.800 --> 00:17:23.430
to send media buttons to
you, to send controls to you,

00:17:23.430 --> 00:17:26.859
as well as read what kind of
metadata or playback state--

00:17:26.859 --> 00:17:29.450
like are you actually
playing something right now

00:17:29.450 --> 00:17:30.900
or are you buffering?

00:17:30.900 --> 00:17:33.400
These are the important
things that the system needs

00:17:33.400 --> 00:17:36.580
to know about and
things like Android Wear

00:17:36.580 --> 00:17:41.580
need to know about to actually
get your media everywhere.

00:17:41.580 --> 00:17:44.130
So this is also something
you can use in your own app

00:17:44.130 --> 00:17:46.630
for building your UI,
and we'll get back

00:17:46.630 --> 00:17:48.660
to that in a little bit.

00:17:48.660 --> 00:17:51.130
So when someone's
actually sending you

00:17:51.130 --> 00:17:53.150
a command through
this token, it's

00:17:53.150 --> 00:17:55.730
actually going through
your MediaSessionCompat

00:17:55.730 --> 00:17:59.810
and into your Callback class.

00:17:59.810 --> 00:18:03.940
Now, you can imagine with
all these events coming in,

00:18:03.940 --> 00:18:08.130
the Callback class is kind
of a big deal, and it is.

00:18:08.130 --> 00:18:13.540
It basically has all of the
onPlay, onPause, onSkipToNext,

00:18:13.540 --> 00:18:16.440
onPlay Track_From_Search.

00:18:16.440 --> 00:18:17.900
It's got all of
the methods you'd

00:18:17.900 --> 00:18:20.880
expect for every one of the
actions that could be sent

00:18:20.880 --> 00:18:24.180
to your app-- as well as even
custom actions-- all come

00:18:24.180 --> 00:18:26.640
in to your Callback class.

00:18:26.640 --> 00:18:29.540
So it's actually a really
great place in your app

00:18:29.540 --> 00:18:34.080
to encapsulate all of
the Media Player calls,

00:18:34.080 --> 00:18:37.600
all of the ExoPlayer calls,
all of the Google Cast calls,

00:18:37.600 --> 00:18:39.820
can all be put into
that one Callback class

00:18:39.820 --> 00:18:43.680
because you know when you get
an onPlay into your callback--

00:18:43.680 --> 00:18:45.990
no matter where it came
from, whether it was tapping

00:18:45.990 --> 00:18:47.880
on a button on your
device or hitting

00:18:47.880 --> 00:18:52.150
a Bluetooth headset-- it all is
going to go to that one place.

00:18:52.150 --> 00:18:55.530
This makes it really powerful
in a way to actually swap

00:18:55.530 --> 00:18:56.660
between these things.

00:18:56.660 --> 00:18:59.780
Say you have to support
less than API 16

00:18:59.780 --> 00:19:03.200
and you can't live in the
beautiful ExoPlayer world,

00:19:03.200 --> 00:19:05.910
you can actually
switch those callbacks

00:19:05.910 --> 00:19:10.052
or choose at run time what
callback you want to add.

00:19:10.052 --> 00:19:13.580
So that way, you can use Media
Player or something separate,

00:19:13.580 --> 00:19:18.000
pre-API 16 and then
ExoPlayer on 16+ and not have

00:19:18.000 --> 00:19:21.760
to re-architect your whole app
around just swapping between

00:19:21.760 --> 00:19:23.540
these two and
swapping out calls.

00:19:26.020 --> 00:19:28.460
So let's get started
with MediaSessionCompact.

00:19:28.460 --> 00:19:32.600
So we create it, and one thing
to keep in mind throughout all

00:19:32.600 --> 00:19:36.170
of MediaSessionCompact is
that it's very cautious.

00:19:36.170 --> 00:19:40.750
It assumes you support nothing
until you actually tell it.

00:19:40.750 --> 00:19:42.550
So we have to set a few flags.

00:19:42.550 --> 00:19:43.790
You have to say, yes.

00:19:43.790 --> 00:19:47.170
I actually do want media
buttons from Bluetooth headsets

00:19:47.170 --> 00:19:51.360
or wired headsets as well
as transport controls.

00:19:51.360 --> 00:19:55.160
So these would be things like
Android Wear and Android Auto.

00:19:55.160 --> 00:19:57.190
So we have to actually
tell it every time.

00:19:57.190 --> 00:19:59.260
Don't forget these two
lines or else things

00:19:59.260 --> 00:20:01.640
will magically fail, and
you will not know why.

00:20:01.640 --> 00:20:03.700
It's these two lines.

00:20:03.700 --> 00:20:09.590
And similar to Audio Focus,
this is an intent to play audio.

00:20:09.590 --> 00:20:11.800
So in this case,
we're actually going

00:20:11.800 --> 00:20:14.080
to call setActive,
which says hey!

00:20:14.080 --> 00:20:16.730
I actually do want to
receive media buttons now

00:20:16.730 --> 00:20:19.630
when we receive Audio Focus.

00:20:19.630 --> 00:20:22.300
And then once we've stopped,
we can actually say, no.

00:20:22.300 --> 00:20:25.010
I no longer need
any more events.

00:20:25.010 --> 00:20:25.580
I'm good.

00:20:25.580 --> 00:20:29.510
I'm not going to
playback anything else.

00:20:29.510 --> 00:20:33.370
So we haven't actually told
the system anything, right?

00:20:33.370 --> 00:20:35.150
Again, very cautious.

00:20:35.150 --> 00:20:39.840
So we actually do need to tell
the system what we're doing.

00:20:39.840 --> 00:20:43.660
And this comes first
across in PlaybackState.

00:20:43.660 --> 00:20:47.090
Now, PlaybackState is built
off of two separate pieces.

00:20:47.090 --> 00:20:50.090
One is the actual
setState itself.

00:20:50.090 --> 00:20:53.340
So these are like-- I am
playing, I am buffering,

00:20:53.340 --> 00:20:54.710
I am paused.

00:20:54.710 --> 00:20:58.590
And this is what gives kind
of the control to say, oh.

00:20:58.590 --> 00:21:02.210
By the way, you should display a
play button rather than a pause

00:21:02.210 --> 00:21:02.820
button.

00:21:02.820 --> 00:21:04.760
Or you should display
a buffering circle

00:21:04.760 --> 00:21:05.900
if your buffering.

00:21:05.900 --> 00:21:08.090
This all makes a
lot of sense to tell

00:21:08.090 --> 00:21:10.400
the system what's going on.

00:21:10.400 --> 00:21:14.010
Then the other half
of it is setActions.

00:21:14.010 --> 00:21:16.740
Now, here's where you
actually declare, yes.

00:21:16.740 --> 00:21:20.050
I do solemnly swear
I support play/pause

00:21:20.050 --> 00:21:22.430
or I support skip to next.

00:21:22.430 --> 00:21:26.030
Not every app needs to
have a Skip to Next button.

00:21:26.030 --> 00:21:29.170
So in this case, you
need to call setActions

00:21:29.170 --> 00:21:31.760
for each and every one
of the actions you want.

00:21:31.760 --> 00:21:35.030
Otherwise, that callback
for that specific class

00:21:35.030 --> 00:21:36.990
won't actually ever be called.

00:21:36.990 --> 00:21:40.340
So if you never say,
I support pausing,

00:21:40.340 --> 00:21:43.016
there will be no Pause
button event sent to you,

00:21:43.016 --> 00:21:44.890
which is probably not
actually what you want.

00:21:44.890 --> 00:21:48.670
But you have to just make
sure that these stay in sync.

00:21:48.670 --> 00:21:51.060
Now, of course, these are
kind of coupled together,

00:21:51.060 --> 00:21:52.260
which at first, you're like.

00:21:52.260 --> 00:21:52.760
OK.

00:21:52.760 --> 00:21:55.120
These are all coupled
together for some reason.

00:21:55.120 --> 00:21:57.104
It turns out that
many times when

00:21:57.104 --> 00:21:58.520
you're changing
your state, you're

00:21:58.520 --> 00:22:00.410
also changing your actions.

00:22:00.410 --> 00:22:03.380
Fast forwarding while
you're buffering probably

00:22:03.380 --> 00:22:05.440
actually doesn't make
a whole lot of sense.

00:22:05.440 --> 00:22:06.780
Maybe it does.

00:22:06.780 --> 00:22:10.350
But at any point, you can just
create these things together.

00:22:10.350 --> 00:22:12.110
This is a builder
kind of pattern.

00:22:12.110 --> 00:22:15.770
So you actually curate a
PlaybackStateCompact builder.

00:22:15.770 --> 00:22:18.500
So don't throw away
the builder every time.

00:22:18.500 --> 00:22:20.370
You can just reuse
the same builder

00:22:20.370 --> 00:22:22.760
and change just the
one thing you need to.

00:22:22.760 --> 00:22:26.800
You can just change setState
and not call setActions

00:22:26.800 --> 00:22:30.160
and then just call
build and call setState.

00:22:30.160 --> 00:22:33.311
So with this, all of
our media buttons work.

00:22:33.311 --> 00:22:35.570
Yay!

00:22:35.570 --> 00:22:36.710
Well, OK.

00:22:36.710 --> 00:22:37.710
I lied.

00:22:37.710 --> 00:22:40.690
It works great on API 21+.

00:22:40.690 --> 00:22:44.530
Turns out it fails
completely on pre-API 21

00:22:44.530 --> 00:22:47.230
with a nice handy
error message saying,

00:22:47.230 --> 00:22:51.390
MediaButtonReceiver
component may not be null.

00:22:51.390 --> 00:22:52.680
OK.

00:22:52.680 --> 00:22:54.920
I'll take your word on it.

00:22:54.920 --> 00:22:57.280
But what is a media
button receiver component?

00:22:57.280 --> 00:22:59.480
And why do I need it?

00:22:59.480 --> 00:23:02.470
Well, it turns out that
media button receivers have

00:23:02.470 --> 00:23:04.500
a long history in
Android, but it's

00:23:04.500 --> 00:23:06.530
something that's changed a lot.

00:23:06.530 --> 00:23:10.820
So it's just a BroadcastReceiver
in your manifest

00:23:10.820 --> 00:23:13.780
that receives the
media_button action.

00:23:13.780 --> 00:23:19.550
That's all it does, but
how it was used changed.

00:23:19.550 --> 00:23:22.180
Before Lollipop, it
was actually required

00:23:22.180 --> 00:23:27.020
for basically all of the
Android media framework APIs.

00:23:27.020 --> 00:23:30.170
So if you didn't say
I have a media button

00:23:30.170 --> 00:23:33.810
receiver with a component,
then all of the system

00:23:33.810 --> 00:23:35.605
wouldn't actually route
any buttons to you,

00:23:35.605 --> 00:23:37.680
you wouldn't show up
on the lockscreen.

00:23:37.680 --> 00:23:40.850
You basically weren't
using any of the system.

00:23:40.850 --> 00:23:44.870
Now, technically you could have
used PendingIntent on API 18

00:23:44.870 --> 00:23:50.230
and higher-- so like 18 and
19 and then it was all gone.

00:23:50.230 --> 00:23:54.580
But we actually didn't
add any CTS tests.

00:23:54.580 --> 00:23:58.540
So it fails on
certain manufacturers.

00:23:58.540 --> 00:24:02.020
So from MediaSessionCompat's
perspective,

00:24:02.020 --> 00:24:06.770
it'll always need a component
in your manifest registered

00:24:06.770 --> 00:24:08.630
if you want to use
MediaSessionCompat

00:24:08.630 --> 00:24:10.990
prior to API 21.

00:24:10.990 --> 00:24:15.770
Now, it's actually still kind of
useful in Lollipop+ even though

00:24:15.770 --> 00:24:20.700
we have a MediaSession-- which
Lollipop is going to be sending

00:24:20.700 --> 00:24:24.440
you media buttons
directly to your callback.

00:24:24.440 --> 00:24:27.500
In this case, the
actual component

00:24:27.500 --> 00:24:32.200
in your manifest kind of has
a secondary optional aspect

00:24:32.200 --> 00:24:35.780
where it's only used
to restart playback.

00:24:35.780 --> 00:24:39.010
So if you've ever listened
to Google Play Music

00:24:39.010 --> 00:24:42.610
and then stopped playback
and then got into your car

00:24:42.610 --> 00:24:45.450
and hit the Play button,
you'll note that Google Play

00:24:45.450 --> 00:24:48.610
Music was the one to start.

00:24:48.610 --> 00:24:51.600
It knew that it would
get a start command

00:24:51.600 --> 00:24:53.240
and actually start playback.

00:24:53.240 --> 00:24:55.870
And that's because it had
registered a media button

00:24:55.870 --> 00:24:56.940
receiver.

00:24:56.940 --> 00:25:00.220
So I really strongly
suggest if you're

00:25:00.220 --> 00:25:03.020
doing anything with background
playback or something

00:25:03.020 --> 00:25:06.570
that should restart,
you should still

00:25:06.570 --> 00:25:10.330
register a media button
receiver on Lollipop and higher.

00:25:10.330 --> 00:25:13.610
Because otherwise, it
will be Google Play Music

00:25:13.610 --> 00:25:15.820
that starts up
even though it may

00:25:15.820 --> 00:25:19.060
have been your app that the
user was last listening to.

00:25:19.060 --> 00:25:21.930
So just keep that in mind.

00:25:21.930 --> 00:25:24.560
So we want to make
this really easy.

00:25:24.560 --> 00:25:27.870
So we built a class for it
called MediaButtonReceiver,

00:25:27.870 --> 00:25:30.000
fancy enough.

00:25:30.000 --> 00:25:34.390
Again, also in the Support
v4 support library.

00:25:34.390 --> 00:25:36.490
And it has kind of
two main purposes.

00:25:36.490 --> 00:25:38.780
The first is kind
of specifically

00:25:38.780 --> 00:25:40.710
around that
background case where

00:25:40.710 --> 00:25:43.140
if you have a service
that's handling

00:25:43.140 --> 00:25:46.110
your MediaSession--
which is, of course, very

00:25:46.110 --> 00:25:50.320
common for audio apps--
it will auto forward

00:25:50.320 --> 00:25:54.670
any media button intents
onto your service

00:25:54.670 --> 00:25:57.860
where you can actually
do something with it.

00:25:57.860 --> 00:26:00.180
And it'll choose
between two things.

00:26:00.180 --> 00:26:03.610
One, if you have a media
browser service in your app,

00:26:03.610 --> 00:26:05.240
it'll choose that first.

00:26:05.240 --> 00:26:06.930
And if you don't
have one of those,

00:26:06.930 --> 00:26:10.110
you can actually add the same
media button intent filter

00:26:10.110 --> 00:26:12.780
to your service, and
MediaButtonReceiver will

00:26:12.780 --> 00:26:15.470
automatically route it to that.

00:26:15.470 --> 00:26:17.720
The nice part about this
is that you don't actually

00:26:17.720 --> 00:26:20.500
have to write any
MediaButtonReceiver code.

00:26:20.500 --> 00:26:23.820
You just add it to your
manifest, and that's it.

00:26:23.820 --> 00:26:25.470
You're done.

00:26:25.470 --> 00:26:29.701
That's pretty nice because
who wants to write code?

00:26:29.701 --> 00:26:30.200
Everyone.

00:26:30.200 --> 00:26:31.850
OK.

00:26:31.850 --> 00:26:33.800
But the important
part is once you

00:26:33.800 --> 00:26:38.010
get that intent in your service
or in your activity if you're

00:26:38.010 --> 00:26:42.710
doing video playback-- wherever
your actual MediaSession is--

00:26:42.710 --> 00:26:45.630
then we have a simple
one line command

00:26:45.630 --> 00:26:49.020
to actually take in
your MediaSessionCompat

00:26:49.020 --> 00:26:52.540
and the intent and
then go through all

00:26:52.540 --> 00:26:55.130
of the process of
extracting the key event,

00:26:55.130 --> 00:26:57.990
figuring out what event
that is, and then passing it

00:26:57.990 --> 00:27:00.460
on to your callback for you.

00:27:00.460 --> 00:27:04.810
So with just adding it to your
manifest and doing one line

00:27:04.810 --> 00:27:08.490
of handle intent, all of
a sudden you can now use

00:27:08.490 --> 00:27:11.980
your Callback class-- normally
something that would be API

00:27:11.980 --> 00:27:15.540
21+-- now for all API levels.

00:27:15.540 --> 00:27:18.910
So whether you're using
MediaButtonReceiver on older

00:27:18.910 --> 00:27:23.320
versions or the native
MediaSession stuff on 21+.

00:27:25.930 --> 00:27:30.970
Now, it's actually more code
to enable it on API 21+.

00:27:30.970 --> 00:27:34.160
So the 23 versions of
the support library

00:27:34.160 --> 00:27:36.220
actually did this for you.

00:27:36.220 --> 00:27:39.950
But as of the 24 versions of
support library, the Android N

00:27:39.950 --> 00:27:43.550
versions, you'll have to do this
manually if you want to do it.

00:27:43.550 --> 00:27:44.940
It's pretty straightforward.

00:27:44.940 --> 00:27:49.260
You create a PendingIntent
to your action

00:27:49.260 --> 00:27:51.870
MediaButtonReceiver.

00:27:51.870 --> 00:27:54.190
Then you call said
MediaButtonReceiver

00:27:54.190 --> 00:27:56.470
fancy enough.

00:27:56.470 --> 00:28:00.310
So now all of our
commands work, but there's

00:28:00.310 --> 00:28:03.400
more to just commands.

00:28:03.400 --> 00:28:05.370
There's another part
of MediaSessionCompat,

00:28:05.370 --> 00:28:07.550
and that's around metadata.

00:28:07.550 --> 00:28:10.020
Now, metadata comes in a
lot of different formats,

00:28:10.020 --> 00:28:13.990
but it's basically the what's
playing aspect of telling

00:28:13.990 --> 00:28:16.000
the system what's going on.

00:28:16.000 --> 00:28:18.400
So this is how
Android Wear gets all

00:28:18.400 --> 00:28:21.750
of your information on their
device or the lockscreen

00:28:21.750 --> 00:28:23.490
gets the background art.

00:28:23.490 --> 00:28:27.160
So at the bare minimum,
I'd suggest a few fields.

00:28:27.160 --> 00:28:34.570
First, title, artist, album if
you have albums, the duration.

00:28:34.570 --> 00:28:38.080
If it's a fixed length
track, having the duration

00:28:38.080 --> 00:28:42.300
actually allows it to display
how far along you are.

00:28:42.300 --> 00:28:47.480
And then of course, a bitmap
for the art or the album art.

00:28:47.480 --> 00:28:51.240
And now, this bitmap shouldn't
necessarily be too large.

00:28:51.240 --> 00:28:54.390
This is being sent across
processes and to the Android

00:28:54.390 --> 00:28:54.950
system.

00:28:54.950 --> 00:29:00.160
So no 4,000 by 4,000
pixel bitmaps please.

00:29:00.160 --> 00:29:03.570
But it is the only way to get
lockscreen backgrounds working.

00:29:03.570 --> 00:29:08.230
So probably should include
a smaller size like 640

00:29:08.230 --> 00:29:13.970
by 640 size, somewhere in that
kind of range or lower, just

00:29:13.970 --> 00:29:15.710
to get something on there.

00:29:15.710 --> 00:29:17.690
We are looking at a
future version of Android

00:29:17.690 --> 00:29:21.500
where the lockscreen stuff won't
actually need a bitmap itself,

00:29:21.500 --> 00:29:24.630
but you'll be able to use the
other part, which is a URI.

00:29:24.630 --> 00:29:28.890
So these allow you to give
a content URI to the app.

00:29:28.890 --> 00:29:32.100
So then instead of having
to keep that bitmap

00:29:32.100 --> 00:29:35.130
and send it around through
across multiple processes,

00:29:35.130 --> 00:29:37.430
you can just send a simple URI.

00:29:37.430 --> 00:29:40.140
And then this is what
things like Android Auto

00:29:40.140 --> 00:29:42.800
already use to get
really high quality

00:29:42.800 --> 00:29:44.720
artwork onto those devices.

00:29:48.340 --> 00:29:53.580
Now, while that's really nice
for a lockscreen background

00:29:53.580 --> 00:29:56.540
art, we don't actually have
lockscreen controls on Lollipop

00:29:56.540 --> 00:29:57.450
anymore.

00:29:57.450 --> 00:30:01.090
That all comes from
media notifications.

00:30:01.090 --> 00:30:03.800
Notifications are the
new hotness, guys.

00:30:03.800 --> 00:30:05.770
And it turns out
that you probably

00:30:05.770 --> 00:30:07.890
should have had a
notification all along

00:30:07.890 --> 00:30:09.960
because they're kind
of really useful.

00:30:09.960 --> 00:30:12.510
Now, they've come a long way
since the very beginning.

00:30:12.510 --> 00:30:16.790
If you can imagine like
back in the 2.1 era,

00:30:16.790 --> 00:30:20.860
you couldn't actually have
buttons in your notification.

00:30:20.860 --> 00:30:23.680
We take that so for granted
now that you can actually

00:30:23.680 --> 00:30:25.510
have multiple actions.

00:30:25.510 --> 00:30:29.140
But that only was
actually added in API 14.

00:30:29.140 --> 00:30:32.335
So there's a lot of kind
of compactness to this

00:30:32.335 --> 00:30:33.543
where you're like, all right.

00:30:33.543 --> 00:30:37.720
Well, which versions support
what things for media buttons

00:30:37.720 --> 00:30:38.690
and that type of thing?

00:30:38.690 --> 00:30:40.850
But you don't have
to do any of that

00:30:40.850 --> 00:30:43.820
because
NotificationCompat.MediaStyle

00:30:43.820 --> 00:30:45.650
does it all for you.

00:30:45.650 --> 00:30:49.260
Now, it's still more
boilerplate than I'd like.

00:30:49.260 --> 00:30:51.690
So I've created a
MediaHelper class

00:30:51.690 --> 00:30:55.290
that I personally like
quite a bit, which

00:30:55.290 --> 00:30:59.170
takes a context and
your MediaSession

00:30:59.170 --> 00:31:02.360
and then builds out all
of the things that you'd

00:31:02.360 --> 00:31:04.330
need from a notification.

00:31:04.330 --> 00:31:06.900
I'm going to post this link
in these spaces after the talk

00:31:06.900 --> 00:31:07.400
here.

00:31:07.400 --> 00:31:11.520
So keep an eye on that if
you want the link itself.

00:31:11.520 --> 00:31:14.030
But it actually is
using the getDescription

00:31:14.030 --> 00:31:16.480
from the MediaMetadata,
and this is actually

00:31:16.480 --> 00:31:19.520
the exact same thing
the Android Wear uses

00:31:19.520 --> 00:31:23.350
to figure out what text to
display on your device there.

00:31:23.350 --> 00:31:26.780
So it's a really nice
way of staying in sync

00:31:26.780 --> 00:31:31.850
and keeps the 27-ish fields
that are in MediaMetadata down

00:31:31.850 --> 00:31:33.990
to a much more
manageable number,

00:31:33.990 --> 00:31:38.090
which you can then use
for your notification.

00:31:38.090 --> 00:31:40.800
And then of course, the
other part that's sometimes

00:31:40.800 --> 00:31:43.680
really tricky for
notifications is actually

00:31:43.680 --> 00:31:47.020
getting the PendingIntents
for the Play/Pause button,

00:31:47.020 --> 00:31:48.390
for the Next button.

00:31:48.390 --> 00:31:52.010
And we still want to reuse all
of the things we've already

00:31:52.010 --> 00:31:57.660
built. We don't want yet another
custom path of PendingIntends

00:31:57.660 --> 00:31:59.350
to your callbacks.

00:31:59.350 --> 00:32:02.180
So in this case, we can
actually build these intents

00:32:02.180 --> 00:32:07.090
pretty simply just by using this
getActionIntent method which

00:32:07.090 --> 00:32:11.790
is actually going to reuse our
MediaButtonReceiver that we

00:32:11.790 --> 00:32:13.055
included in our app.

00:32:13.055 --> 00:32:15.990
We're going to reuse
that and kind of fake it

00:32:15.990 --> 00:32:18.710
so that it's like a
media button came in,

00:32:18.710 --> 00:32:21.410
but its in fact a notification.

00:32:21.410 --> 00:32:25.870
So this way, we actually get
all of the stuff already there.

00:32:25.870 --> 00:32:29.920
So we create our builder
using the MediaStyle helper.

00:32:29.920 --> 00:32:33.050
And then we use setSmallIcon
because we kind of need

00:32:33.050 --> 00:32:34.950
those for notifications.

00:32:34.950 --> 00:32:38.140
And then we need
to call setColor.

00:32:38.140 --> 00:32:43.160
Now, I'm not sure if you noticed
the Play Music and stuff did

00:32:43.160 --> 00:32:48.040
not actually use a bright
orange for their color

00:32:48.040 --> 00:32:52.410
because it turns out that on
the Lollipop through Marshmallow

00:32:52.410 --> 00:32:55.100
devices, this was
the full background

00:32:55.100 --> 00:32:56.700
for your notification.

00:32:56.700 --> 00:32:58.980
So the giant bright
pink that you

00:32:58.980 --> 00:33:01.720
use for your branding for
your app, probably not

00:33:01.720 --> 00:33:04.090
the best color to use here.

00:33:04.090 --> 00:33:07.340
You'll note in Android N it's
actually much more aligned

00:33:07.340 --> 00:33:09.340
with all of the other
styles where it's just

00:33:09.340 --> 00:33:13.590
used as an accent color, not
actually as the giant garish

00:33:13.590 --> 00:33:15.120
background for the notification.

00:33:15.120 --> 00:33:16.990
So baby steps.

00:33:16.990 --> 00:33:18.470
But keep in mind
for a color, this

00:33:18.470 --> 00:33:19.970
might actually be
something you want

00:33:19.970 --> 00:33:23.320
to check your API version on.

00:33:23.320 --> 00:33:26.340
And it wouldn't be a very
useful media notification

00:33:26.340 --> 00:33:28.450
if it didn't have any actions.

00:33:28.450 --> 00:33:30.900
So in this case, we're
adding a Pause button

00:33:30.900 --> 00:33:34.500
to our notification and using
getActionIntent-- in this case,

00:33:34.500 --> 00:33:39.450
just passing in the Play/Pause
key event, just to say,

00:33:39.450 --> 00:33:41.120
hey, this is a
Play/Pause button.

00:33:41.120 --> 00:33:43.910
And now this will trigger
all of the same logic

00:33:43.910 --> 00:33:45.960
as if someone had hit
the Play/Pause button

00:33:45.960 --> 00:33:49.860
on their headset so they don't
actually need to build any more

00:33:49.860 --> 00:33:53.690
code to support these actions.

00:33:53.690 --> 00:33:57.490
And then of course, we want to
our actual MediaStyle itself.

00:33:57.490 --> 00:33:59.920
So MediaStyle has
this great property

00:33:59.920 --> 00:34:04.420
where it supports both an
expanded style-- the two line

00:34:04.420 --> 00:34:09.179
style, where it has larger album
art and up to five actions-- as

00:34:09.179 --> 00:34:11.460
well as the compact
view where you

00:34:11.460 --> 00:34:15.710
could get only a max of two
actions on that compact view.

00:34:15.710 --> 00:34:17.600
But it still works.

00:34:17.600 --> 00:34:19.469
And so you'll need
to actually tell

00:34:19.469 --> 00:34:23.690
which actions you want to
support in that compact view.

00:34:23.690 --> 00:34:27.650
You can imagine if you had
Next Track and then Play/Pause

00:34:27.650 --> 00:34:30.699
and then Previous Track.

00:34:30.699 --> 00:34:33.659
You'd probably want to
support the Play/Pause action

00:34:33.659 --> 00:34:36.260
as the highest most action
because that's probably

00:34:36.260 --> 00:34:38.449
the one the users will
want to use the most.

00:34:38.449 --> 00:34:44.239
It's a zero base based on the
order you called addAction.

00:34:44.239 --> 00:34:47.519
Now, the other thing we
really-- really important.

00:34:47.519 --> 00:34:48.060
Don't forget.

00:34:48.060 --> 00:34:49.870
Again, this is another
this will break you

00:34:49.870 --> 00:34:54.030
if you forget it-- is
calling setMediaSession.

00:34:54.030 --> 00:34:58.840
Now, this adds our SessionToken
that we talked about before

00:34:58.840 --> 00:35:00.500
to the notification.

00:35:00.500 --> 00:35:02.840
So this is what things
like Android Wear

00:35:02.840 --> 00:35:06.930
are actually using to get
a reference to your token.

00:35:06.930 --> 00:35:09.240
So if you forget
this all of a sudden,

00:35:09.240 --> 00:35:11.920
you'll get things like, well,
the notification shows up

00:35:11.920 --> 00:35:14.870
on Wear because we added
the metadata and all that.

00:35:14.870 --> 00:35:18.324
But then you hit the button, and
it doesn't actually Play/Pause,

00:35:18.324 --> 00:35:20.740
which is probably the most
frustrating thing in the world.

00:35:20.740 --> 00:35:24.400
So don't forget this line again.

00:35:24.400 --> 00:35:26.870
So at this point,
we actually have

00:35:26.870 --> 00:35:29.266
what I would call the
minimum viable product.

00:35:29.266 --> 00:35:32.260
So this is kind of what I
would consider something

00:35:32.260 --> 00:35:34.290
that I won't yell at you for.

00:35:34.290 --> 00:35:36.810
So if you actually
do all these things,

00:35:36.810 --> 00:35:39.240
I'll be reasonably happy.

00:35:39.240 --> 00:35:42.410
And I would say this
applies to all apps.

00:35:42.410 --> 00:35:45.130
Whether you're video
or audio, these

00:35:45.130 --> 00:35:48.770
are things that you're
going to need to do.

00:35:48.770 --> 00:35:51.100
But of course, we're
much farther along,

00:35:51.100 --> 00:35:53.640
and we don't even know
how to build a Pause

00:35:53.640 --> 00:35:56.290
button for our UI.

00:35:56.290 --> 00:35:59.030
So we have to build a UI.

00:35:59.030 --> 00:36:01.220
It's kind of a
big deal for apps,

00:36:01.220 --> 00:36:03.560
and we mentioned
MediaControllerCompat

00:36:03.560 --> 00:36:05.640
is actually really
useful for this

00:36:05.640 --> 00:36:09.110
because it has access to all
of your metadata and everything

00:36:09.110 --> 00:36:10.870
else.

00:36:10.870 --> 00:36:14.410
So we can actually create
a media controller compact

00:36:14.410 --> 00:36:17.530
either from the token or
from the session itself,

00:36:17.530 --> 00:36:20.750
and FragmentActivity actually
has some really nice methods

00:36:20.750 --> 00:36:25.720
that make it easy to set and
then get the MediaController

00:36:25.720 --> 00:36:26.890
at some point.

00:36:26.890 --> 00:36:29.570
So here, we can use
just TransportControls

00:36:29.570 --> 00:36:30.900
and say pause.

00:36:30.900 --> 00:36:32.340
And we're using lambdas here.

00:36:32.340 --> 00:36:34.770
So it looks a little weird,
but it's a lot shorter

00:36:34.770 --> 00:36:37.300
on slides, which is awesome.

00:36:37.300 --> 00:36:40.480
But the TransportControls
is basically the one-to-one

00:36:40.480 --> 00:36:41.750
with your callbacks.

00:36:41.750 --> 00:36:44.980
So you can imagine
there's a Play, a Pause,

00:36:44.980 --> 00:36:47.970
and a Skip to Next,
which then triggers

00:36:47.970 --> 00:36:51.860
onPlay, onPause onSkiptoNext.

00:36:51.860 --> 00:36:53.690
One-to-one.

00:36:53.690 --> 00:36:56.550
But of course, just
having a Pause button

00:36:56.550 --> 00:36:58.740
doesn't actually do a
whole lot for your UI.

00:36:58.740 --> 00:37:01.510
You want to keep
these things in sync.

00:37:01.510 --> 00:37:03.450
So you can imagine
in the old days

00:37:03.450 --> 00:37:06.830
where you had a service
that was doing things

00:37:06.830 --> 00:37:09.920
and you had to create
some custom situation

00:37:09.920 --> 00:37:12.570
to actually pass
information back and forth.

00:37:12.570 --> 00:37:14.120
Now you don't need
to do that anymore

00:37:14.120 --> 00:37:17.190
because MediaControllerCompat
gives you all of the things

00:37:17.190 --> 00:37:17.910
you'd need.

00:37:17.910 --> 00:37:20.250
So get metadata to
get the metadata,

00:37:20.250 --> 00:37:23.150
getPlaybackState to
get the playback state.

00:37:23.150 --> 00:37:25.190
But all of these
things are one shot.

00:37:25.190 --> 00:37:28.850
So you probably also
want to use a callback.

00:37:28.850 --> 00:37:31.270
So here, you get a
onMetadataChanged

00:37:31.270 --> 00:37:34.010
onPlaybackStateChanged,
and this actually

00:37:34.010 --> 00:37:39.790
allows you to stay perfectly
in sync even across processes.

00:37:39.790 --> 00:37:43.790
So you'll actually be sent
the information immediately

00:37:43.790 --> 00:37:46.690
when you call setState or
when you call setMetadata,

00:37:46.690 --> 00:37:50.090
it comes across
on the other side.

00:37:50.090 --> 00:37:51.740
Now, all of what
I've talked about

00:37:51.740 --> 00:37:54.580
has been great for
video and audio.

00:37:54.580 --> 00:37:57.750
But if we're doing background
playback with a service,

00:37:57.750 --> 00:38:01.160
that adds some extra
complexity because we

00:38:01.160 --> 00:38:05.290
don't have our
MediaSession.Token in our UI.

00:38:05.290 --> 00:38:06.900
So we need to do
a little bit more,

00:38:06.900 --> 00:38:08.760
and we still need that token.

00:38:08.760 --> 00:38:09.260
Oh.

00:38:09.260 --> 00:38:09.759
OK.

00:38:09.759 --> 00:38:11.610
So we built a class for that to.

00:38:11.610 --> 00:38:13.650
Actually
MediaBrowserServiceCompat

00:38:13.650 --> 00:38:17.550
does a lot of this stuff for
you besides the actual browsing

00:38:17.550 --> 00:38:20.480
part-- which if you go to any
of the Android Auto talks,

00:38:20.480 --> 00:38:22.310
will be like the key for them.

00:38:22.310 --> 00:38:25.690
But we can actually do
this in our own app.

00:38:25.690 --> 00:38:29.604
So to actually build a
MediaBrowserServiceCompat,

00:38:29.604 --> 00:38:30.770
it's pretty straightforward.

00:38:30.770 --> 00:38:34.300
You add an intent action
to MediaBrowserService.

00:38:34.300 --> 00:38:37.400
This is what calls you
out as a media browser.

00:38:37.400 --> 00:38:38.740
And then you extend the class.

00:38:38.740 --> 00:38:40.920
And then there's one
method, which again,

00:38:40.920 --> 00:38:44.140
if you don't call it,
it breaks everything.

00:38:44.140 --> 00:38:46.730
That's setSessionToken
where, again, we

00:38:46.730 --> 00:38:49.660
kind of give the token
to MediaBrowserService.

00:38:52.190 --> 00:38:56.040
And there's two other methods,
onGetRoute and onLoadChildren,

00:38:56.040 --> 00:38:58.260
which are required
to be implemented.

00:38:58.260 --> 00:39:00.100
These are really important
for Android Auto.

00:39:00.100 --> 00:39:02.450
But for us, we just
need to know that you

00:39:02.450 --> 00:39:04.510
need to return
something not null

00:39:04.510 --> 00:39:08.680
in onGetRoute for any
connections to succeed.

00:39:08.680 --> 00:39:10.560
So in this case,
I'm just saying,

00:39:10.560 --> 00:39:12.030
am I calling myself good?

00:39:12.030 --> 00:39:12.530
All right.

00:39:12.530 --> 00:39:13.100
Great.

00:39:13.100 --> 00:39:16.120
Here's a route that gives
you no children back,

00:39:16.120 --> 00:39:19.290
and we're on with our life.

00:39:19.290 --> 00:39:23.710
So if MediaBrowserServiceCompat
was one side,

00:39:23.710 --> 00:39:25.740
MediaBrowserCompat
is the other side.

00:39:25.740 --> 00:39:28.300
So this is what you'd
actually use in your UI

00:39:28.300 --> 00:39:31.310
to connect to your service.

00:39:31.310 --> 00:39:33.830
So in this case, we pass
on the component name,

00:39:33.830 --> 00:39:36.370
and we just call connect.

00:39:36.370 --> 00:39:38.390
And it's actually
binding to your service

00:39:38.390 --> 00:39:40.570
and doing all that
stuff for you.

00:39:40.570 --> 00:39:42.240
But the important
part is when you

00:39:42.240 --> 00:39:45.570
get that connection callback,
it will call onConnected,

00:39:45.570 --> 00:39:48.480
and it will be able to
call getSessionToken and go

00:39:48.480 --> 00:39:49.980
about our wonderful
ways of hooking

00:39:49.980 --> 00:39:52.229
our whole UI up and getting
all of our own information

00:39:52.229 --> 00:39:56.390
and setting up our callback
and on and on and on and on.

00:39:56.390 --> 00:40:00.660
And like I mentioned, all of
this works across processes.

00:40:00.660 --> 00:40:06.900
So you have not had to touch
Android IPC or AIDLs or any

00:40:06.900 --> 00:40:08.630
of that fun stuff.

00:40:08.630 --> 00:40:10.960
But it turns out
that you can actually

00:40:10.960 --> 00:40:13.350
support multiple processes.

00:40:13.350 --> 00:40:16.670
And if you're doing audio
playback in a service,

00:40:16.670 --> 00:40:18.700
it's actually probably
a fairly good idea

00:40:18.700 --> 00:40:20.490
to have a separate process.

00:40:20.490 --> 00:40:23.680
So when you have very different
parts of your life cycle,

00:40:23.680 --> 00:40:26.840
it's really important to
keep the long-term memory

00:40:26.840 --> 00:40:29.380
usage as low as possible.

00:40:29.380 --> 00:40:32.360
If someone's going to be playing
audio for multiple hours,

00:40:32.360 --> 00:40:35.200
you don't want to be
taking up extra resources.

00:40:35.200 --> 00:40:38.260
And Android only kills
things at the process level.

00:40:38.260 --> 00:40:42.000
So if they ever open
your UI, that UI piece

00:40:42.000 --> 00:40:47.020
is going to stay in memory
as long as your service is.

00:40:47.020 --> 00:40:51.190
So using a separate service
is actually a really good idea

00:40:51.190 --> 00:40:54.050
for many reasons, including
things like the WebView

00:40:54.050 --> 00:40:56.190
process being updated.

00:40:56.190 --> 00:40:58.900
If you're using WebView
in your UI process,

00:40:58.900 --> 00:41:00.630
that's going to be
killed automatically.

00:41:00.630 --> 00:41:03.250
And we don't really want
to pause our music just

00:41:03.250 --> 00:41:05.040
because WebView updated.

00:41:05.040 --> 00:41:06.650
It seems kind of silly.

00:41:06.650 --> 00:41:08.290
And actually, we
never really want

00:41:08.290 --> 00:41:11.060
to pause our music if
it's actually playing.

00:41:11.060 --> 00:41:12.880
We want it to
continue on forever.

00:41:12.880 --> 00:41:17.290
So to do this on Android, we're
using a foreground service.

00:41:17.290 --> 00:41:19.270
Now, foreground services
have one property

00:41:19.270 --> 00:41:21.720
in that they require
notification,

00:41:21.720 --> 00:41:24.840
but that's OK because we
just built our notification.

00:41:24.840 --> 00:41:27.520
So for media, it actually
makes a lot of sense

00:41:27.520 --> 00:41:30.020
to use these things together.

00:41:30.020 --> 00:41:32.830
But there were some problems.

00:41:32.830 --> 00:41:34.730
The notification use
for foreground services

00:41:34.730 --> 00:41:38.620
are ongoing, i.e. they
can't be swiped away.

00:41:38.620 --> 00:41:41.280
So you can imagine how
frustrating it is to a user.

00:41:41.280 --> 00:41:43.460
You're trying to swipe
away that notification.

00:41:43.460 --> 00:41:45.160
I just want to stop playback.

00:41:45.160 --> 00:41:45.800
It's fine.

00:41:45.800 --> 00:41:47.320
I'm good.

00:41:47.320 --> 00:41:50.210
But they can't if you're
using a foreground service.

00:41:50.210 --> 00:41:55.940
And it turns out there's been
a bug for like six years where

00:41:55.940 --> 00:42:01.800
stopForeground(false) didn't
actually make it dismissible.

00:42:01.800 --> 00:42:04.690
Even though that was no
longer our foreground service

00:42:04.690 --> 00:42:06.590
and the notification
was still there,

00:42:06.590 --> 00:42:08.130
it would still be ongoing.

00:42:08.130 --> 00:42:10.930
And you still couldn't
swipe it away.

00:42:10.930 --> 00:42:13.950
So we fixed it as
part of a MediaStyle

00:42:13.950 --> 00:42:17.630
basically by adding a
little x in the corner.

00:42:17.630 --> 00:42:21.020
Very low tech
solution, but it allows

00:42:21.020 --> 00:42:26.110
users to hit that x button and
allows them to actually delete

00:42:26.110 --> 00:42:26.910
the service.

00:42:26.910 --> 00:42:29.920
In this case, we're just
sending a stop command.

00:42:29.920 --> 00:42:32.640
Now, on Lollipop
and higher, once you

00:42:32.640 --> 00:42:35.410
call stopForeground(false),
you can't actually

00:42:35.410 --> 00:42:37.450
swipe to dismiss
the notification.

00:42:37.450 --> 00:42:40.110
So this basically does nothing
on Lollipop and higher devices.

00:42:43.330 --> 00:42:46.610
Now, I also mentioned
that MediaBrowserService

00:42:46.610 --> 00:42:51.610
and MediaBrowserCompat are
binding to the service, which

00:42:51.610 --> 00:42:54.980
is great because that means that
your service and your process

00:42:54.980 --> 00:42:57.740
is already up when someone
hits the Play button.

00:42:57.740 --> 00:43:03.020
So you can instantaneously
use start playback,

00:43:03.020 --> 00:43:06.410
but it also means as
soon as your UI dies,

00:43:06.410 --> 00:43:09.265
your service is going to
die with it because it'll

00:43:09.265 --> 00:43:13.030
be unbound when there's no
unbound to it, and you're dead.

00:43:13.030 --> 00:43:14.030
But that's OK.

00:43:14.030 --> 00:43:16.130
We'll just need to
call StartService

00:43:16.130 --> 00:43:17.690
when we start playback.

00:43:17.690 --> 00:43:20.520
And that way, we make sure
our service will continue even

00:43:20.520 --> 00:43:23.110
when our activity dies.

00:43:23.110 --> 00:43:26.040
So you can see our
updated lifecycle

00:43:26.040 --> 00:43:29.750
of media playback specifically
for the service case.

00:43:29.750 --> 00:43:31.640
So in this case,
our notifications

00:43:31.640 --> 00:43:34.830
have been updated slightly
to start foreground

00:43:34.830 --> 00:43:37.610
when we hit Play,
stop foreground

00:43:37.610 --> 00:43:39.780
when we hit Pause
because we do want

00:43:39.780 --> 00:43:41.680
people to be able
to swipe it away

00:43:41.680 --> 00:43:44.100
when we're actually paused.

00:43:44.100 --> 00:43:47.350
And then on Stop, we're going
to remove our notification.

00:43:47.350 --> 00:43:50.080
And similarly for the
actual service itself,

00:43:50.080 --> 00:43:53.010
we really want to make sure
we call setSessionToken.

00:43:53.010 --> 00:43:55.560
We need to call StartService
when we start playback

00:43:55.560 --> 00:43:58.000
so we live as long as possible.

00:43:58.000 --> 00:44:01.770
But of course, when the user
hits the Stop button or x's

00:44:01.770 --> 00:44:03.740
out our notification,
we actually

00:44:03.740 --> 00:44:06.801
do want to call StopSelf
so the system can clean up

00:44:06.801 --> 00:44:07.300
our service.

00:44:09.990 --> 00:44:11.560
So what's next?

00:44:11.560 --> 00:44:14.380
There is a great
example app called

00:44:14.380 --> 00:44:17.870
UAMP, our Universal
Android Music Player,

00:44:17.870 --> 00:44:20.380
which is up on GitHub,
which uses basically

00:44:20.380 --> 00:44:24.970
all of these technologies all in
one including many, many more.

00:44:24.970 --> 00:44:28.930
It's a great app that you
can run on your devices.

00:44:28.930 --> 00:44:30.730
There's also a whole
bunch of other talks

00:44:30.730 --> 00:44:33.470
which I would suggest--
the ExoPlayer talk,

00:44:33.470 --> 00:44:35.520
which I believe
is already online.

00:44:35.520 --> 00:44:40.580
If you're free tonight,
after an after party.

00:44:40.580 --> 00:44:43.840
The Android Auto talks--
they're right out this way

00:44:43.840 --> 00:44:46.720
if you want to get hands on
with Android Auto-- as well

00:44:46.720 --> 00:44:51.130
as Google Cast, the Cast
SDK, and Android Wear

00:44:51.130 --> 00:44:53.420
for Standalone.

00:44:53.420 --> 00:44:54.610
So thanks for coming.

00:44:54.610 --> 00:44:56.950
I'll be out here for
questions afterwards.

00:44:56.950 --> 00:44:58.360
Thanks again.

00:44:58.360 --> 00:45:01.110
[MUSIC PLAYING]

