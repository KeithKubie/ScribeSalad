WEBVTT
Kind: captions
Language: en

00:00:00.968 --> 00:00:01.701
Papakipos:
So you've probably seen

00:00:01.701 --> 00:00:03.701
graphics like this before
in games

00:00:03.701 --> 00:00:05.133
or in other applications.

00:00:05.133 --> 00:00:06.601
What you haven't seen
is in--

00:00:06.601 --> 00:00:10.200
seen this running intrinsically
in the web browser.

00:00:13.868 --> 00:00:16.200
So the technology
clearly has great potential.

00:00:16.200 --> 00:00:18.200
Let me walk you through some
of the interesting aspects

00:00:18.200 --> 00:00:22.033
of--of this demo,
uh, to show you more about it.

00:00:22.033 --> 00:00:24.634
So first off,
notice the visual quality here.

00:00:24.634 --> 00:00:26.868
We have very high resolution
texture maps

00:00:26.868 --> 00:00:29.434
on the surfaces of the rocks,
of the trees,

00:00:29.434 --> 00:00:31.767
of the bottom,
uh, of the--the sea floor

00:00:31.767 --> 00:00:35.033
under the water,
and of the sky itself.

00:00:35.033 --> 00:00:36.701
We also have
what are called bump maps.

00:00:36.701 --> 00:00:38.868
So we have,
um, detailed textures

00:00:38.868 --> 00:00:41.868
on the surfaces that describe
the local surface texture--

00:00:41.868 --> 00:00:43.567
the physical shape
of the surface--

00:00:43.567 --> 00:00:45.534
which gives us
very realistic lighting

00:00:45.534 --> 00:00:47.133
as the light
bounces off the scene

00:00:47.133 --> 00:00:49.434
and--and,
uh, hits the viewer.

00:00:49.434 --> 00:00:50.834
We're also doing
some very advanced

00:00:50.834 --> 00:00:53.200
shading techniques,
uh, on the water.

00:00:53.200 --> 00:00:54.534
So you can see
that we've implemented

00:00:54.534 --> 00:00:56.267
reflection and refraction.

00:00:56.267 --> 00:00:57.834
And these are coded
right in the source code

00:00:57.834 --> 00:01:01.100
of the application
so the application can control

00:01:01.100 --> 00:01:02.601
the visual appearance
of the water

00:01:02.601 --> 00:01:04.934
or other attributes
of the scene.

00:01:08.367 --> 00:01:09.501
The next thing
that we focused on

00:01:09.501 --> 00:01:11.067
was performance.

00:01:11.067 --> 00:01:13.868
So you'll notice we're running
at a smooth 60 hertz here.

00:01:13.868 --> 00:01:16.234
It gives it this very smooth,
liquid feel

00:01:16.234 --> 00:01:18.601
like you're really there,
you're in the scene.

00:01:18.601 --> 00:01:20.734
Um, the same,
uh, level of performance

00:01:20.734 --> 00:01:22.000
that you would expect
to see

00:01:22.000 --> 00:01:24.501
from, uh,
from a native application

00:01:24.501 --> 00:01:25.801
running
on the operating system.

00:01:25.801 --> 00:01:28.434
And here we're seeing it
in the browser.

00:01:28.434 --> 00:01:29.601
The other interesting aspect

00:01:29.601 --> 00:01:30.934
is we're doing
all of the graphics

00:01:30.934 --> 00:01:33.367
on the graphics processor,
on the GPU.

00:01:33.367 --> 00:01:36.167
So the CPU load
as we run this application

00:01:36.167 --> 00:01:37.868
is less than 10%.

00:01:37.868 --> 00:01:40.033
So the CPU is still there
for you to use

00:01:40.033 --> 00:01:42.267
in your JavaScript code
and by the browser

00:01:42.267 --> 00:01:44.000
to implement
your application logic,

00:01:44.000 --> 00:01:47.133
which is extremely important.

00:01:47.133 --> 00:01:48.801
Uh, and then the last point
about the demo

00:01:48.801 --> 00:01:51.200
that's interesting
is it's all JavaScript code.

00:01:51.200 --> 00:01:52.901
So you have
all the nice attributes

00:01:52.901 --> 00:01:54.868
of JavaScript
for web development.

00:01:54.868 --> 00:01:56.601
You can edit the code
right on your machine,

00:01:56.601 --> 00:01:59.133
test it on your machine,
deploy it easily.

00:01:59.133 --> 00:02:00.934
Uh, no complicated
build process.

00:02:00.934 --> 00:02:03.400
It's just JavaScript.

00:02:03.400 --> 00:02:05.434
So this is very cool
technology.

00:02:05.434 --> 00:02:06.868
But we still have
a long way to go

00:02:06.868 --> 00:02:08.501
until we achieve our dream.

00:02:08.501 --> 00:02:09.901
Where we want to get to
is the point

00:02:09.901 --> 00:02:12.334
where you type a URL
in the address bar,

00:02:12.334 --> 00:02:15.400
uh, go to a web site,
and play a rich,

00:02:15.400 --> 00:02:18.434
uh, interesting 3-D graphics
application.

00:02:18.434 --> 00:02:20.100
In order for this to happen,

00:02:20.100 --> 00:02:22.801
we need this capability
to be built into the browsers

00:02:22.801 --> 00:02:23.801
by default.

00:02:23.801 --> 00:02:25.601
So we need a common set
of APIs

00:02:25.601 --> 00:02:28.000
that are implemented widely
by all the dominant--

00:02:28.000 --> 00:02:30.000
all the--
all the browser vendors

00:02:30.000 --> 00:02:32.701
so that your browser of choice
does this intrinsically.

00:02:32.701 --> 00:02:35.200
It becomes a feature
of the browser itself.

00:02:35.200 --> 00:02:37.200
The key here
is standardization.

00:02:37.200 --> 00:02:39.400
So we're--we at Google
are working very closely

00:02:39.400 --> 00:02:42.033
with Apple, Mozilla,
Opera, and others

00:02:42.033 --> 00:02:44.601
in the context
of the standards organizations,

00:02:44.601 --> 00:02:46.067
to make this a reality.

00:02:46.067 --> 00:02:47.534
So we still have
a ways to go.

00:02:47.534 --> 00:02:49.634
But we've begun the process
of standardization

00:02:49.634 --> 00:02:51.968
for how 3-D graphics
will work on the web.

00:02:51.968 --> 00:02:55.467
We invite you to join
that discussion.

00:02:55.467 --> 00:02:56.834
The other thing
is we have to put it

00:02:56.834 --> 00:02:58.167
in the browser itself.

00:02:58.167 --> 00:03:00.000
And so we're hard at work
at Google

00:03:00.000 --> 00:03:02.601
integrating 3-D graphics
capabilities like these

00:03:02.601 --> 00:03:04.467
into the Chromium code base

00:03:04.467 --> 00:03:06.801
so that Chrome has the ability
to do this

00:03:06.801 --> 00:03:09.033
without the need
of any plug-in whatsoever.

00:03:09.033 --> 00:03:10.901
So we're very excited
about the directions

00:03:10.901 --> 00:03:13.267
these are--this is going.

00:03:13.267 --> 00:03:14.767
So this is all very cool.
It looks neat.

00:03:14.767 --> 00:03:16.033
It's very fun.

00:03:16.033 --> 00:03:17.934
It's nice to see the web
gain these capabilities.

00:03:17.934 --> 00:03:19.601
Uh, but it's still just
a demo.

00:03:19.601 --> 00:03:21.200
We're still in
the very early phase.

00:03:21.200 --> 00:03:22.801
This is a plug-in today.

00:03:22.801 --> 00:03:24.868
We're very excited
about the future.

00:03:24.868 --> 00:03:27.467
The other key to the puzzle here
is applications.

00:03:27.467 --> 00:03:29.801
Uh, we want to see real world
applications emerge

00:03:29.801 --> 00:03:32.767
where you and people like you
make applications

00:03:32.767 --> 00:03:34.901
in web sites that use
these capabilities

00:03:34.901 --> 00:03:36.300
to their full advantage.

00:03:36.300 --> 00:03:38.934
What is the next killer
3-D graphics applications

00:03:38.934 --> 00:03:40.067
on your web site?

00:03:40.067 --> 00:03:42.267
Is it a game?
Is it data visualization?

00:03:42.267 --> 00:03:43.834
Is it an engineering
application?

00:03:43.834 --> 00:03:45.434
Is it something new?

00:03:45.434 --> 00:03:46.834
So we're very excited
about the prospects

00:03:46.834 --> 00:03:48.000
for the future.

00:03:48.000 --> 00:03:50.501
We hope you will check it out
and, uh, join us

00:03:50.501 --> 00:03:53.767
in, uh, pushing it
over the finish line.

00:03:53.767 --> 00:03:56.868
[applause]

00:03:59.767 --> 00:04:01.567
Gundrota: Obviously,
if you'd like to learn more

00:04:01.567 --> 00:04:02.767
about what Matt
just showed you,

00:04:02.767 --> 00:04:05.200
there's the URL and you can get
all the details

00:04:05.200 --> 00:04:07.767
in addition to the sessions
that we're having on it.

00:04:07.767 --> 00:04:09.801
Going back
to the canvas capability,

00:04:09.801 --> 00:04:12.567
remember, uh, developers
are not going to use canvas

00:04:12.567 --> 00:04:14.033
if it isn't
broadly available.

00:04:14.033 --> 00:04:15.667
And we're very happy
to report

00:04:15.667 --> 00:04:18.734
that across all modern,
open source browsers,

00:04:18.734 --> 00:04:21.033
uh, Chrome, Firefox, Safari,

00:04:21.033 --> 00:04:22.834
we have this capability.

00:04:22.834 --> 00:04:24.100
I hear some
of the laughter.

00:04:24.100 --> 00:04:26.000
You must be wondering
why I didn't mention

00:04:26.000 --> 00:04:27.601
Internet Explorer.

00:04:27.601 --> 00:04:29.868
Uh, let me talk
about that briefly.

00:04:29.868 --> 00:04:32.100
Obviously, Microsoft,

00:04:32.100 --> 00:04:34.534
with its very large
market share,

00:04:34.534 --> 00:04:38.033
could do much
to move the web forward.

00:04:38.033 --> 00:04:40.634
And so you can imagine
how excited we were

00:04:40.634 --> 00:04:42.701
to hear Microsoft's
public statements

00:04:42.701 --> 00:04:45.834
about their commitment
to the HTML 5 standards.

00:04:45.834 --> 00:04:48.300
And, uh, that very, very much
excites us.

00:04:48.300 --> 00:04:52.234
And we eagerly await
to see, uh, evidence of that.

00:04:52.234 --> 00:04:54.300
[audience laughs]

00:04:54.300 --> 00:04:56.634
That's all I'm going to mention
about IE today.

00:04:56.634 --> 00:04:58.200
Now that I've danced past
that elephant,

00:04:58.200 --> 00:04:59.868
let's move on.

00:04:59.868 --> 00:05:03.267
Uh, let's talk about video.

00:05:03.267 --> 00:05:05.167
Just like I asked you
with canvas,

00:05:05.167 --> 00:05:07.000
let me ask you with video.

00:05:07.000 --> 00:05:09.234
How do you play video
in a browser today?

00:05:09.234 --> 00:05:11.934
You know, as a developer,
you really have a tough job.

00:05:11.934 --> 00:05:13.901
You got to ensure
that your users

00:05:13.901 --> 00:05:16.400
have the correct plug-in
installed, uh,

00:05:16.400 --> 00:05:17.667
in their browser.

00:05:17.667 --> 00:05:19.400
In addition to having
a plug-in stalled,

00:05:19.400 --> 00:05:21.601
you got to ask yourself
"does that plug-in support

00:05:21.601 --> 00:05:23.467
"the appropriate codec
that's going to--

00:05:23.467 --> 00:05:25.400
that that video
is encoded in?"

00:05:25.400 --> 00:05:27.968
And there's some variables
that are outside of your control

00:05:27.968 --> 00:05:29.100
as a developer.

00:05:29.100 --> 00:05:31.934
So video is hard.

00:05:31.934 --> 00:05:33.701
You might ask yourself
if you were responsible

00:05:33.701 --> 00:05:36.667
for moving the web forward,
what would Occam do?

00:05:36.667 --> 00:05:40.267
Well, how about a video tag
as simple as image.

00:05:40.267 --> 00:05:42.934
That's exactly what HTML 5
video gives you.

00:05:42.934 --> 00:05:45.100
A simple tag where you point it
to the source

00:05:45.100 --> 00:05:47.100
and the browser handles
the rest.

00:05:47.100 --> 00:05:49.200
Let me show you
some examples.

00:05:49.200 --> 00:05:50.601
Let's go to machine one.

00:05:50.601 --> 00:05:53.434
man: Billy's been trying
to customize his web browser.

00:05:53.434 --> 00:05:56.300
man: This'll make it
go faster.

00:05:58.400 --> 00:05:59.801
Gundrota: Okay, that's--
that's one way

00:05:59.801 --> 00:06:01.234
to make the web go faster.

00:06:01.234 --> 00:06:03.968
Uh, it's a--it's a video
playing in the--in the browser.

00:06:03.968 --> 00:06:07.100
No big deal until you look
at the source code.

00:06:07.100 --> 00:06:08.434
And you look
at the source code here

00:06:08.434 --> 00:06:10.734
and you can see use
of the video tag

00:06:10.734 --> 00:06:12.000
to play that video

00:06:12.000 --> 00:06:14.534
and nothing more than JavaScript
to play and stop it.

00:06:14.534 --> 00:06:16.968
Of course,
because it's integrated

00:06:16.968 --> 00:06:19.968
right within the browser--
let's go back to that demo--

00:06:19.968 --> 00:06:21.167
one of the benefits
is, like, fo--

00:06:21.167 --> 00:06:22.434
I can start a rotate.

00:06:22.434 --> 00:06:25.000
This is just a simple
JavaScript CSS transform.

00:06:25.000 --> 00:06:26.767
And look, I'm rotating
the video.

00:06:26.767 --> 00:06:28.367
I can even play it
if I wanted to.

00:06:28.367 --> 00:06:30.801
But it gives you a sense
of--of the advantage

00:06:30.801 --> 00:06:32.601
of using something
that's intrinsic

00:06:32.601 --> 00:06:34.200
to that web
programming model.

00:06:34.200 --> 00:06:36.868
DOM manipulation
just like any other element

00:06:36.868 --> 00:06:38.133
with the video tag.

00:06:38.133 --> 00:06:40.868
Let's go on
to the next demonstration.

00:06:40.868 --> 00:06:43.033
This is an experiment.

00:06:43.033 --> 00:06:44.801
We are not announcing today
that YouTube

00:06:44.801 --> 00:06:46.133
is going to be built
this way.

00:06:46.133 --> 00:06:48.434
This is a demo that we just
wanted to show you

00:06:48.434 --> 00:06:50.701
to get the creative juices
going.

00:06:50.701 --> 00:06:52.868
Uh, obviously,
YouTube is a sight

00:06:52.868 --> 00:06:54.834
that you no doubt
know and love.

00:06:54.834 --> 00:06:56.434
Uh, this looks like YouTube.

00:06:56.434 --> 00:06:59.033
In fact, there's a--
one change

00:06:59.033 --> 00:07:00.400
that's pretty significant,

00:07:00.400 --> 00:07:02.200
which is if you actually look
at the source here,

00:07:02.200 --> 00:07:04.467
it's implemented using
the video tag.

00:07:04.467 --> 00:07:06.934
And because it's implemented
using the video tag,

00:07:06.934 --> 00:07:08.734
those videos play
and they're intrinsic

00:07:08.734 --> 00:07:11.067
to that, uh, HTML page.

00:07:11.067 --> 00:07:12.567
You see as he mouses
over the thumbnails,

00:07:12.567 --> 00:07:13.834
they just play.

00:07:13.834 --> 00:07:16.968
There are--those are not
1, 2, 3, 4, 5, 6 plug-ins.

00:07:16.968 --> 00:07:19.033
I'm not marshalling
across boundaries.

00:07:19.033 --> 00:07:22.300
This is JavaScript,
the video tag, and that's it.

00:07:22.300 --> 00:07:23.534
And it kind of gives you
an example

00:07:23.534 --> 00:07:25.901
of where we might be going,
uh, in the future.

00:07:25.901 --> 00:07:31.601
[applause]

00:07:31.601 --> 00:07:34.968
All right, let's--let's go back
to the slides.

00:07:37.501 --> 00:07:42.200
Once again, very happy to say,
across modern browsers,

00:07:42.200 --> 00:07:44.434
broad support
has been implemented

00:07:44.434 --> 00:07:46.033
for the video tag.

00:07:46.033 --> 00:07:48.033
Now let's talk
about geolocation.

00:07:48.033 --> 00:07:50.968
At Google, we believe
that almost all kinds of apps

00:07:50.968 --> 00:07:52.067
could be better

00:07:52.067 --> 00:07:53.901
if they had access
to geolocation.

00:07:53.901 --> 00:07:55.167
Everything
from business software

00:07:55.167 --> 00:07:56.567
to social software.

00:07:56.567 --> 00:07:59.133
Think about your CRM software
if you're a business.

00:07:59.133 --> 00:08:02.467
When your sales agent lands
in Denver,

00:08:02.467 --> 00:08:04.934
why doesn't the CRM software
recognize his location

00:08:04.934 --> 00:08:07.501
and show him or her
the current customers

00:08:07.501 --> 00:08:09.400
based on proximity?

00:08:09.400 --> 00:08:10.701
In social software,

00:08:10.701 --> 00:08:13.200
why isn't the photo
automatically geotagged?

00:08:13.200 --> 00:08:15.734
Why aren't my updates,
my tweets,

00:08:15.734 --> 00:08:18.601
uh, automatically tagged
with location?

00:08:18.601 --> 00:08:20.968
Well, the reality is
is that accessing location

00:08:20.968 --> 00:08:24.000
and using it is hard today.

00:08:24.000 --> 00:08:26.200
You might think, like,
what about GPS?

00:08:26.200 --> 00:08:28.400
GPS takes a long time
to get a fix.

00:08:28.400 --> 00:08:30.901
GPS may often not work
indoors.

00:08:30.901 --> 00:08:33.067
What about IP--
IP-based location?

00:08:33.067 --> 00:08:35.367
Well, it's too fuzzy.
It's not granular enough.

00:08:35.367 --> 00:08:37.767
I mean, heaven forbid
your users are AOL users

00:08:37.767 --> 00:08:40.000
where the IP has gone through
a proxy in Virginia

00:08:40.000 --> 00:08:42.334
and all the location reports
is Virginia.

00:08:42.334 --> 00:08:46.367
And so it hasn't been possible
to get good quality data sources

00:08:46.367 --> 00:08:48.100
until the last year.

00:08:48.100 --> 00:08:50.267
Companies like Skyhook--

00:08:50.267 --> 00:08:53.334
companies like Google
and others have created

00:08:53.334 --> 00:08:58.100
large databases of Wi-Fi data
and cell ID data

00:08:58.100 --> 00:09:02.567
and really have mapped
the entire world with coverage.

00:09:02.567 --> 00:09:05.567
These sources combined
with GPS and other sources

00:09:05.567 --> 00:09:09.767
have now given us the ability
to accurately triangulate

00:09:09.767 --> 00:09:12.033
or pinpoint
an individual's location

00:09:12.033 --> 00:09:14.734
with their consent.

00:09:14.734 --> 00:09:16.434
Of course,
you might be wondering,

00:09:16.434 --> 00:09:18.100
well, that's good--
that's great, Vic,

00:09:18.100 --> 00:09:20.400
but how do you get it
in the browser?

00:09:20.400 --> 00:09:22.200
Well, guess what,
the last year,

00:09:22.200 --> 00:09:24.601
we have seen
tremendous progress

00:09:24.601 --> 00:09:28.334
with standardization
of the W3C geolocation API,

00:09:28.334 --> 00:09:30.434
which is implemented
in these browsers.

00:09:30.434 --> 00:09:32.667
So you as a developer
can take advantage

00:09:32.667 --> 00:09:36.200
of these capabilities.

00:09:36.200 --> 00:09:38.767
To demonstrate these
and kind of talk about them,

00:09:38.767 --> 00:09:40.367
I'd like to invite up
Jay Sullivan,

00:09:40.367 --> 00:09:41.834
Vice President for Mozilla.

00:09:41.834 --> 00:09:42.901
Jay, welcome.

00:09:42.901 --> 00:09:44.801
Sullivan: Thanks, Vic.

00:09:44.801 --> 00:09:46.067
Good to see you.

00:09:46.067 --> 00:09:49.133
Gundrota: Jay...

00:09:49.133 --> 00:09:51.334
just one moment before you go
into your, uh, presentation

00:09:51.334 --> 00:09:52.634
and demo here.

00:09:52.634 --> 00:09:54.634
I did want to take a moment
and just say thank you

00:09:54.634 --> 00:09:56.267
to the Mozilla community.

00:09:56.267 --> 00:09:57.634
Uh, you know,
to a large extent,

00:09:57.634 --> 00:09:59.133
we have the luxury
this morning of talking

00:09:59.133 --> 00:10:00.467
about modern browsers,

