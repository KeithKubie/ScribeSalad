WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.976
[MUSIC PLAYING]

00:00:06.899 --> 00:00:07.940
TODD KERPELMAN: Hi there.

00:00:07.940 --> 00:00:09.120
Welcome to Route 85.

00:00:09.120 --> 00:00:10.850
So happy you could join us.

00:00:10.850 --> 00:00:13.010
Now for today, I'd like
to show you my fantastic

00:00:13.010 --> 00:00:16.780
new app sure to race its way up
the charts called Tickle Lift.

00:00:16.780 --> 00:00:18.770
It stars my little
square friend here.

00:00:18.770 --> 00:00:20.269
I think I'm going
to call him Teddy.

00:00:20.269 --> 00:00:20.860
Hi, Teddy.

00:00:20.860 --> 00:00:22.520
Now, using a
standard pan gesture,

00:00:22.520 --> 00:00:24.400
I can pick Teddy up
and drag him around.

00:00:24.400 --> 00:00:25.966
Oh, look at him fall.

00:00:25.966 --> 00:00:27.090
Don't worry, he'll be fine.

00:00:27.090 --> 00:00:28.940
He has his good
health insurance.

00:00:28.940 --> 00:00:30.780
But now using a
custom tickle gesture,

00:00:30.780 --> 00:00:33.100
I can move my finger back
and forth to tickle him.

00:00:33.100 --> 00:00:35.020
Teddy turns pink and
giggles, and then he

00:00:35.020 --> 00:00:37.270
notifies HR because this
is inappropriate behavior

00:00:37.270 --> 00:00:39.460
at the workplace.

00:00:39.460 --> 00:00:40.790
But wait, you say.

00:00:40.790 --> 00:00:43.440
How am I able to have both a
pan gesture drag Teddy around

00:00:43.440 --> 00:00:45.162
while also supporting
a tickle gesture?

00:00:45.162 --> 00:00:47.370
How come Teddy isn't moving
around left to right when

00:00:47.370 --> 00:00:48.360
I tickle him?

00:00:48.360 --> 00:00:50.660
Well, that leads us to
this episode's quick tip,

00:00:50.660 --> 00:00:54.720
sent in by Ronny Rozen,
founder and CEO of poccaDot.

00:00:54.720 --> 00:00:56.730
Ronny writes that when
you create a gesture,

00:00:56.730 --> 00:00:59.270
you can designate a class
to serve as that gesture's

00:00:59.270 --> 00:01:01.450
UIGestureRecognizerDelegate.

00:01:01.450 --> 00:01:04.989
One of these delegate methods
is gestureRecognizerShouldBegin.

00:01:04.989 --> 00:01:07.480
In this delegate method,
you can analyze the gesture

00:01:07.480 --> 00:01:09.610
and return yes or
no depending on

00:01:09.610 --> 00:01:11.530
whether or not you want
that gesture to switch

00:01:11.530 --> 00:01:12.930
to a begin state.

00:01:12.930 --> 00:01:15.750
In Tickle Drop, for instance,
my gestureRecognizerShouldBegin

00:01:15.750 --> 00:01:18.750
call first looks to see if the
gesture recognizer being passed

00:01:18.750 --> 00:01:21.010
in is a pan gesture recognizer.

00:01:21.010 --> 00:01:22.600
If it is, then my
delegate method

00:01:22.600 --> 00:01:25.090
checks to see if the
user is panning upwards

00:01:25.090 --> 00:01:27.806
and that they're mostly panning
in a vertical direction.

00:01:27.806 --> 00:01:29.180
If both of these
things are true,

00:01:29.180 --> 00:01:30.690
this method will return true.

00:01:30.690 --> 00:01:31.900
And otherwise it, won't.

00:01:31.900 --> 00:01:35.450
And then I can return true for
any other gesture recognizer.

00:01:35.450 --> 00:01:38.540
So if I start dragging my
finger sideways across Teddy,

00:01:38.540 --> 00:01:40.720
my gestureRecognizerShouldBegin
delegate method

00:01:40.720 --> 00:01:42.980
sees that this is a
mostly horizontal gesture,

00:01:42.980 --> 00:01:45.980
and it returns false for
my pan gesture recognizer,

00:01:45.980 --> 00:01:47.440
leaving other
gesture recognizers,

00:01:47.440 --> 00:01:50.590
such as my tickle one, free
to respond to that touch.

00:01:50.590 --> 00:01:53.056
Now, I'm sure you could think
of other areas besides just

00:01:53.056 --> 00:01:55.430
tickling things where you
might be able to take advantage

00:01:55.430 --> 00:01:56.660
of this technique.

00:01:56.660 --> 00:01:58.710
Maybe you have a tap
gesture or a pan gesture

00:01:58.710 --> 00:02:01.465
that's only valid if I touch
the top half of a view.

00:02:01.465 --> 00:02:02.840
Or maybe you have
a pinch gesture

00:02:02.840 --> 00:02:05.090
that only activates if
I'm pinching inwards

00:02:05.090 --> 00:02:07.200
or if I'm pinching in
at a particular speed.

00:02:07.200 --> 00:02:08.949
And so if you combine
this delegate method

00:02:08.949 --> 00:02:11.157
with some of these other
crazy delegate methods here,

00:02:11.157 --> 00:02:14.250
you can get some pretty
sophisticated touch behavior.

00:02:14.250 --> 00:02:16.350
So I asked around, and
there are a few places

00:02:16.350 --> 00:02:18.500
where we use gesture
recognizer delegate methods,

00:02:18.500 --> 00:02:21.030
including our
gestureRecognizerDidBegin one.

00:02:21.030 --> 00:02:23.290
One example is the
Google Photos app,

00:02:23.290 --> 00:02:26.090
which consists of three
vertical scroll views inside

00:02:26.090 --> 00:02:27.544
of a horizontal one.

00:02:27.544 --> 00:02:28.960
Now typically in
setups like this,

00:02:28.960 --> 00:02:30.990
you won't be able to
swipe horizontally

00:02:30.990 --> 00:02:33.150
until you've stopped
scrolling vertically.

00:02:33.150 --> 00:02:35.260
Well, the team found that
kind of awkward to use,

00:02:35.260 --> 00:02:37.350
particularly when you've
got a huge list of photos

00:02:37.350 --> 00:02:39.141
that you're scrolling
through all the time.

00:02:39.141 --> 00:02:41.870
So they addressed this, first
by allowing two pan gestures

00:02:41.870 --> 00:02:43.470
at once with the
gestureRecognizer

00:02:43.470 --> 00:02:44.844
shouldRecognizeS
imultaneouslyWit

00:02:44.844 --> 00:02:47.100
hGestureRecognizer
method, and then

00:02:47.100 --> 00:02:50.590
only recognizing horizontal pans
for the horizontal UIScrollView

00:02:50.590 --> 00:02:52.320
in the
gestureRecognizerShouldBegin

00:02:52.320 --> 00:02:53.132
method.

00:02:53.132 --> 00:02:54.590
And now I've got
a photos app where

00:02:54.590 --> 00:02:56.270
I can scroll through
all my photos,

00:02:56.270 --> 00:02:58.179
but also swipe
horizontally at any time.

00:02:58.179 --> 00:02:58.720
Look at that.

00:02:58.720 --> 00:03:00.410
Isn't that nice?

00:03:00.410 --> 00:03:02.630
So thanks again, Ronny,
for sending in that tip.

00:03:02.630 --> 00:03:05.210
As a thank you, she will be
getting this very stylish

00:03:05.210 --> 00:03:06.300
Google t-shirt.

00:03:06.300 --> 00:03:09.460
Also shout out to the iOS
tutorial site raywenderlich.com

00:03:09.460 --> 00:03:12.710
for their very nice tutorial
on how to write your own custom

00:03:12.710 --> 00:03:13.530
tickle gesture.

00:03:13.530 --> 00:03:14.689
Go check it out.

00:03:14.689 --> 00:03:15.980
But what about the rest of you?

00:03:15.980 --> 00:03:17.670
Jealous that you
didn't get a t-shirt?

00:03:17.670 --> 00:03:18.190
Don't be.

00:03:18.190 --> 00:03:21.090
Just email me your own
quick tip at this address.

00:03:21.090 --> 00:03:22.750
If you do and I
use it on the air,

00:03:22.750 --> 00:03:24.580
I will send a
t-shirt to you too.

00:03:24.580 --> 00:03:25.740
How easy is that?

00:03:25.740 --> 00:03:29.512
So thanks for watching, and I
will see you soon on Route 85.

00:03:29.512 --> 00:03:30.470
MALE SPEAKER: Hey Todd?

00:03:30.470 --> 00:03:32.660
I've gotten three
reports from HR

00:03:32.660 --> 00:03:35.030
that you've been
tickling your co-workers.

00:03:35.030 --> 00:03:36.080
Is that true?

00:03:36.080 --> 00:03:38.580
TODD KERPELMAN: You see, there's
a really simple explanation

00:03:38.580 --> 00:03:39.370
for this.

00:03:39.370 --> 00:03:41.620
You see, look out behind you!

00:03:41.620 --> 00:03:43.290
MALE SPEAKER: Huh?

00:03:43.290 --> 00:03:44.124
I can still see you.

00:03:44.124 --> 00:03:45.331
TODD KERPELMAN: No you can't.

00:03:45.331 --> 00:03:45.840
I'm hiding.

00:03:45.840 --> 00:03:46.631
MALE SPEAKER: Yeah.

00:03:46.631 --> 00:03:47.990
Yeah, I can.

