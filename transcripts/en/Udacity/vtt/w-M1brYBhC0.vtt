WEBVTT
Kind: captions
Language: en

00:00:00.150 --> 00:00:04.850
We return to our IPython Notebook to answer the question if we

00:00:04.850 --> 00:00:08.520
will have enough data for the chosen features.

00:00:08.520 --> 00:00:12.300
In this block of code, we draw some histograms.

00:00:12.300 --> 00:00:16.239
We have already seen what histograms represent.

00:00:16.239 --> 00:00:21.440
Let's first run the code, and then we will analyze the plots.

00:00:21.440 --> 00:00:26.030
Once it finishes running, you will see a histogram that looks like this.

00:00:26.030 --> 00:00:27.530
In this histogram,

00:00:27.530 --> 00:00:31.770
we're plotting the inter-sampling time in minutes in the X axis.

00:00:31.770 --> 00:00:37.240
The Y axis shows the frequency for each of these inter-sampling times.

00:00:37.240 --> 00:00:40.820
The bins here are bins of 60 minutes.

00:00:40.820 --> 00:00:47.500
You see the value between 0 and 60 has the maximum number of data points.

00:00:47.500 --> 00:00:49.200
If you scroll down,

00:00:49.200 --> 00:00:54.920
you will see the same histograms now drawn for each of the persons.

00:00:54.920 --> 00:00:58.640
In this case, this is the histogram for person A, and

00:00:58.640 --> 00:01:04.010
we see that most of person A's samples are also between 0 and 60 minutes.

00:01:04.010 --> 00:01:07.990
You can keep scrolling down and examine the histograms for

00:01:07.990 --> 00:01:09.620
each of these persons.

00:01:09.620 --> 00:01:14.800
In this case, this is person B, person C, person D, and so on.

00:01:14.800 --> 00:01:18.730
We ask the question, if we have enough data for

00:01:18.730 --> 00:01:21.600
the inter-sampling time of 60 minutes?

00:01:21.600 --> 00:01:24.690
The answer, in this case, is yes.

00:01:24.690 --> 00:01:27.040
So we asked a question and

00:01:27.040 --> 00:01:32.170
then validated it by showing that there's adequate frequency of data.

00:01:32.170 --> 00:01:34.150
Then we come to the next question.

00:01:34.150 --> 00:01:38.400
Is there enough data to distinguish pattern?

00:01:38.400 --> 00:01:41.830
This is a very important question because we

00:01:41.830 --> 00:01:45.960
want features with the most discriminating power.

00:01:45.960 --> 00:01:49.980
What that means is that the features that we use should be

00:01:49.980 --> 00:01:55.580
able to separate each individual in the best way possible.

00:01:55.580 --> 00:01:59.010
We have already seen in lesson two how we

00:01:59.010 --> 00:02:03.790
can select features that give us the most discriminating power.

00:02:03.790 --> 00:02:09.460
Here, we are going to do a simple visual inspection of the data patterns and

00:02:09.460 --> 00:02:14.610
not dive into any of the methods previously used to decorrelate features.

00:02:14.610 --> 00:02:20.770
However, we must verify that the selected traces that we are using are distinct.

