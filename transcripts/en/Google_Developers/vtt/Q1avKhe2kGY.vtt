WEBVTT
Kind: captions
Language: en

00:00:06.318 --> 00:00:09.234
ABE HASKINS: Hi, everyone.

00:00:09.234 --> 00:00:11.654
[APPLAUSE]

00:00:11.654 --> 00:00:13.570
I'm going to set my
bottle here, and I'm going

00:00:13.570 --> 00:00:16.345
to kick it off at some point.

00:00:16.345 --> 00:00:19.090
All right, my name
is Abe Haskins.

00:00:19.090 --> 00:00:22.180
I'm a developer engineer on
the Firebase team based out

00:00:22.180 --> 00:00:23.450
of San Francisco.

00:00:23.450 --> 00:00:25.323
I'm here with
Lauren, who is also

00:00:25.323 --> 00:00:26.905
an engineer on
the Firebase team.

00:00:26.905 --> 00:00:28.920
And today, we're
going to talk to you

00:00:28.920 --> 00:00:30.910
about how to build
an app with Firebase

00:00:30.910 --> 00:00:35.630
for go from nothing at a
completed app just using

00:00:35.630 --> 00:00:36.970
Firebase.

00:00:36.970 --> 00:00:39.880
So if you saw
Lawrence's introduction,

00:00:39.880 --> 00:00:42.490
how many people were here
for Lawrence's introduction

00:00:42.490 --> 00:00:44.050
to Firebase?

00:00:44.050 --> 00:00:44.830
Handful of people.

00:00:44.830 --> 00:00:45.330
All right.

00:00:45.330 --> 00:00:47.020
Not too Many.

00:00:47.020 --> 00:00:51.510
So this Firebase at
a 30,000 foot level.

00:00:51.510 --> 00:00:53.590
We see we have 12
products, and those

00:00:53.590 --> 00:00:56.070
are tools and that use
to build your product.

00:00:56.070 --> 00:00:58.190
So that's your database,
your user authentication,

00:00:58.190 --> 00:00:59.740
things like that.

00:00:59.740 --> 00:01:03.440
We have our growing tool to
help you grow, get more users,

00:01:03.440 --> 00:01:05.250
to engage with those better.

00:01:05.250 --> 00:01:08.800
And then we have the earn
section for monetization,

00:01:08.800 --> 00:01:12.550
making more money, and making
an actual successful business.

00:01:12.550 --> 00:01:14.490
At the core, we have
Firebase Analytics.

00:01:14.490 --> 00:01:17.970
Firebase Analytics is
how you know your users.

00:01:17.970 --> 00:01:20.940
Firebase Analytics is
the core of Firebase

00:01:20.940 --> 00:01:24.870
because Firebase is all
about helping your user.

00:01:24.870 --> 00:01:28.170
We've built Firebase to
try and help your users.

00:01:28.170 --> 00:01:30.130
And at the core of
Firebase, we have

00:01:30.130 --> 00:01:33.174
analytics because it relates to
everything about your business

00:01:33.174 --> 00:01:36.618
because your business
is all about users.

00:01:36.618 --> 00:01:40.730
So, in terms of how
Firebase works as a product,

00:01:40.730 --> 00:01:42.970
let's take a step back.

00:01:42.970 --> 00:01:45.400
Back in the day, if you were
building something, building

00:01:45.400 --> 00:01:48.617
a mobile app, for example,
you have a structure,

00:01:48.617 --> 00:01:49.450
something like this.

00:01:49.450 --> 00:01:53.862
It might vary, it might be
150 servers instead of one.

00:01:53.862 --> 00:01:56.369
Might be a thousand databases
or several different types

00:01:56.369 --> 00:01:56.910
of databases.

00:01:56.910 --> 00:01:59.251
But it's this general
structure, this what we

00:01:59.251 --> 00:02:01.050
call the client-server model.

00:02:01.050 --> 00:02:03.180
So we have client
device, in this case,

00:02:03.180 --> 00:02:05.290
it's that tablet-looking device.

00:02:05.290 --> 00:02:07.720
We have an intermediary
server that you run

00:02:07.720 --> 00:02:11.000
and you maintain and have
general control over.

00:02:11.000 --> 00:02:13.450
And then behind that,
you have some database

00:02:13.450 --> 00:02:16.850
that you've set up, using
Redis or Mongo or whatever.

00:02:16.850 --> 00:02:19.330
And that server interacts
with that database,

00:02:19.330 --> 00:02:22.590
and then proxies that
data to the client.

00:02:22.590 --> 00:02:24.340
And if you're setting
up an app like this,

00:02:24.340 --> 00:02:27.834
you're setting it up by writing
a lot of server-side code.

00:02:27.834 --> 00:02:29.750
And this code communicates
with your database,

00:02:29.750 --> 00:02:34.150
it defines the API that
your client device consumes.

00:02:34.150 --> 00:02:38.070
And just by the nature of this,
you already have [INAUDIBLE].

00:02:38.070 --> 00:02:41.510
You're not just focusing on
what your users care about,

00:02:41.510 --> 00:02:44.290
which is the actual
experience on the device.

00:02:44.290 --> 00:02:46.567
They don't really care how
your servers are set up,

00:02:46.567 --> 00:02:47.775
they just care that it works.

00:02:47.775 --> 00:02:51.404
And you, as the person
running this business,

00:02:51.404 --> 00:02:53.570
you have to put a ton of
focus on that middle chunk,

00:02:53.570 --> 00:02:55.567
and on the database
chunk, just keep it up

00:02:55.567 --> 00:02:57.400
and running just to
keep your company going,

00:02:57.400 --> 00:03:02.060
and it dilutes your focus away
from what the users care about.

00:03:02.060 --> 00:03:03.610
So when we started
building Firebase,

00:03:03.610 --> 00:03:06.640
we realized we could eliminate
a lot of these steps.

00:03:06.640 --> 00:03:10.060
You don't have to write custom
code for every database API

00:03:10.060 --> 00:03:12.490
endpoint, because they're
all pretty much the same.

00:03:12.490 --> 00:03:14.334
They're creating,
reading, they're updating,

00:03:14.334 --> 00:03:15.250
they're deleting data.

00:03:15.250 --> 00:03:17.541
You don't have to re-implement
an authentication system

00:03:17.541 --> 00:03:20.640
every single time you
add Twitter logins,

00:03:20.640 --> 00:03:22.970
or you want an email
password login.

00:03:22.970 --> 00:03:23.941
That's just silly.

00:03:23.941 --> 00:03:25.440
Every single one
of these things has

00:03:25.440 --> 00:03:27.360
a ton of concerns
that come with them

00:03:27.360 --> 00:03:31.002
and they only grow exponentially
as your company grows.

00:03:31.002 --> 00:03:32.710
So something simple
like a password reset

00:03:32.710 --> 00:03:36.469
becomes incredibly
complicated when you send out

00:03:36.469 --> 00:03:37.510
100,000 of those per day.

00:03:37.510 --> 00:03:40.136
So with Firebase, we wanted
it to not only be to get up

00:03:40.136 --> 00:03:40.940
and running.

00:03:40.940 --> 00:03:43.588
You step out of the door
with a completed great app.

00:03:43.588 --> 00:03:46.492
But as you grow, as your
business grows, and to help you

00:03:46.492 --> 00:03:47.866
do that, we want
to make sure you

00:03:47.866 --> 00:03:50.806
continue to be successful with
the least amount of concern

00:03:50.806 --> 00:03:53.572
about the servers, scaling,
and all of those things

00:03:53.572 --> 00:03:56.450
that your users
don't care about.

00:03:56.450 --> 00:03:58.540
So with that in mind,
let's look at the services,

00:03:58.540 --> 00:04:00.685
and remember a bit
about what these are.

00:04:00.685 --> 00:04:03.000
So to develop, like I said,
the real-time database

00:04:03.000 --> 00:04:05.823
is the way to synchronize
and store data,

00:04:05.823 --> 00:04:07.922
so it's an alternative to
a traditional database.

00:04:07.922 --> 00:04:10.082
But unlike a
traditional database,

00:04:10.082 --> 00:04:13.056
you're not writing a server
that interacts with Firebase.

00:04:13.056 --> 00:04:14.680
You interact with
the Firebase database

00:04:14.680 --> 00:04:16.490
directly from your client.

00:04:16.490 --> 00:04:19.381
So if you're writing an iOS code
or you're writing Android code,

00:04:19.381 --> 00:04:22.130
you import our SDK, you point
it at the real-time database,

00:04:22.130 --> 00:04:24.110
and you start
reading and writing.

00:04:24.110 --> 00:04:25.680
Similar with authentication.

00:04:25.680 --> 00:04:28.094
If you want to log in
via email password,

00:04:28.094 --> 00:04:30.090
you're not setting
up an endpoint

00:04:30.090 --> 00:04:31.990
that has a database behind it.

00:04:31.990 --> 00:04:34.250
You're just saying, I want
to log in on your client.

00:04:34.250 --> 00:04:36.375
And we run all the servers,
we maintain everything,

00:04:36.375 --> 00:04:38.600
so you just get a
secure user login

00:04:38.600 --> 00:04:41.290
system that'll work for you.

00:04:41.290 --> 00:04:42.690
And this is every
single product.

00:04:42.690 --> 00:04:44.189
I'm not going to
go through them now

00:04:44.189 --> 00:04:46.830
if you want to know more about
them, hit up the documentation

00:04:46.830 --> 00:04:51.070
or go ask Lawrence,
who is at the booth.

00:04:51.070 --> 00:04:53.200
He will tell you in detail
about every single one

00:04:53.200 --> 00:04:53.740
of these products.

00:04:53.740 --> 00:04:56.000
But this is the general
pattern It's taking something

00:04:56.000 --> 00:04:58.645
that you used to have to
writer server code for, spend

00:04:58.645 --> 00:05:01.123
a bunch of effort, spend a
bunch of operational costs,

00:05:01.123 --> 00:05:02.920
keeping your servers
up and running.

00:05:02.920 --> 00:05:04.557
We just simplified
it down and give you

00:05:04.557 --> 00:05:06.015
client side,
[INAUDIBLE] side, that

00:05:06.015 --> 00:05:08.275
feels natural in the
language of your choice

00:05:08.275 --> 00:05:11.530
to consume these features.

00:05:11.530 --> 00:05:14.330
So, back to our actual
goal here today.

00:05:14.330 --> 00:05:17.870
We want to go and build a
completed app just using

00:05:17.870 --> 00:05:18.800
Firebase.

00:05:18.800 --> 00:05:21.800
And since it's Firebase, that
means no server side code.

00:05:21.800 --> 00:05:23.914
We leverage all the
cool powers of the Cloud

00:05:23.914 --> 00:05:26.080
and we end up with something
that is actually usable

00:05:26.080 --> 00:05:27.980
and shipped to our users.

00:05:27.980 --> 00:05:30.320
And any time you want
to build anything,

00:05:30.320 --> 00:05:33.190
you pretty much have to
start out with an idea.

00:05:33.190 --> 00:05:36.590
So I do this game where I write
down a bunch of different words

00:05:36.590 --> 00:05:37.540
that I know.

00:05:37.540 --> 00:05:39.260
In this case I don't
know if these words

00:05:39.260 --> 00:05:41.650
because I don't
speak that language.

00:05:41.650 --> 00:05:44.464
But, if I did speak this
language, I would go

00:05:44.464 --> 00:05:46.130
and I would circle
some of these and I'd

00:05:46.130 --> 00:05:49.370
pick just a few random
ones that I like.

00:05:49.370 --> 00:05:53.000
So I could make a
social photo chat.

00:05:53.000 --> 00:05:55.220
And that sounds good.

00:05:55.220 --> 00:05:57.530
So this idea is
just an experiment.

00:05:57.530 --> 00:06:00.270
This is something I really
like about Firebase.

00:06:00.270 --> 00:06:02.210
We can go, we can pick
some random words,

00:06:02.210 --> 00:06:04.700
and we can start putting
it together into something

00:06:04.700 --> 00:06:05.450
very quickly.

00:06:05.450 --> 00:06:07.940
It's good for prototyping
and getting up and running.

00:06:07.940 --> 00:06:10.580
Like I said, we want it to
be quick, to get it building.

00:06:10.580 --> 00:06:12.920
And then once you've
built something,

00:06:12.920 --> 00:06:14.157
for it to be successful.

00:06:14.157 --> 00:06:15.990
Let's take this idea
and see what we can do.

00:06:15.990 --> 00:06:17.460
So imagine we have a user.

00:06:17.460 --> 00:06:19.960
We have this friendly fellow
who is very happy to be looking

00:06:19.960 --> 00:06:22.944
at his phone, and we have
these three concepts,

00:06:22.944 --> 00:06:24.360
we want to make
some sort of chat.

00:06:24.360 --> 00:06:26.315
We want it to interact
with his friend

00:06:26.315 --> 00:06:28.620
and we want to be
able to upload photos.

00:06:28.620 --> 00:06:31.010
So let's just build
a chat experience.

00:06:31.010 --> 00:06:34.259
Something where a user can
sign in with some provider

00:06:34.259 --> 00:06:36.050
that they like, maybe
Twitter login, Google

00:06:36.050 --> 00:06:38.180
login, something like that.

00:06:38.180 --> 00:06:40.220
They can find their
friends and chat with them.

00:06:40.220 --> 00:06:42.095
And then they can send
photos back and forth.

00:06:42.095 --> 00:06:45.030
This is a simple idea,
yes, but implementing

00:06:45.030 --> 00:06:47.900
this in a traditional
kind of server model

00:06:47.900 --> 00:06:49.970
is incredibly complicated.

00:06:49.970 --> 00:06:51.850
If you've ever
written any networking

00:06:51.850 --> 00:06:55.610
code, any socket code to deal
with real-time communication,

00:06:55.610 --> 00:06:58.430
that is a huge, huge, taking on.

00:06:58.430 --> 00:07:00.197
It is such a big problem.

00:07:00.197 --> 00:07:01.780
If you've ever dealt
with [INAUDIBLE],

00:07:01.780 --> 00:07:04.806
this is something that seems so
simple, taking some binary data

00:07:04.806 --> 00:07:05.430
and storing it.

00:07:05.430 --> 00:07:07.425
But there is so many
edge cases and issues,

00:07:07.425 --> 00:07:08.800
but Firebase solves
all of these.

00:07:08.800 --> 00:07:12.250
So this entire problem can be
solved in the next 20 minutes

00:07:12.250 --> 00:07:13.179
or so.

00:07:13.179 --> 00:07:15.470
And to give you some idea of
what we're trying to make,

00:07:15.470 --> 00:07:16.910
this is what it's going
to end up looking like.

00:07:16.910 --> 00:07:17.951
It's called FriendlyChat.

00:07:17.951 --> 00:07:19.990
It's going to let us to
send messages, upload

00:07:19.990 --> 00:07:22.765
pictures, everything like that.

00:07:22.765 --> 00:07:26.214
This is our goal, what
we're aspiring to.

00:07:26.214 --> 00:07:28.180
Next step, we need
to pick a platform.

00:07:28.180 --> 00:07:31.034
We've got an idea, now we've
got to figure out how are we

00:07:31.034 --> 00:07:32.729
going to distribute this?

00:07:32.729 --> 00:07:35.020
We have a lot of platforms
in Firebase that we support.

00:07:35.020 --> 00:07:36.750
In fact, this isn't
even all of them.

00:07:36.750 --> 00:07:39.090
This is all the first
class ones that we

00:07:39.090 --> 00:07:42.150
say are highest
quality SDKs that we

00:07:42.150 --> 00:07:43.380
have documentation about.

00:07:43.380 --> 00:07:45.980
But we have some
other beta SDKs,

00:07:45.980 --> 00:07:50.130
like Unity for C++ if you're
interested in development.

00:07:50.130 --> 00:07:54.120
But here we have Android,
iOS, C++, and Web.

00:07:54.120 --> 00:07:57.504
Today we're going to
focus just on Web.

00:07:57.504 --> 00:07:59.920
And the reason I'm doing this
is because the code snippets

00:07:59.920 --> 00:08:00.794
are a little shorter.

00:08:00.794 --> 00:08:03.060
There's a lot more boiler
plate to get an Android up

00:08:03.060 --> 00:08:03.910
and running.

00:08:03.910 --> 00:08:06.390
But Firebase works everywhere.

00:08:06.390 --> 00:08:08.530
So whatever we're
learning and doing today,

00:08:08.530 --> 00:08:11.520
changing it to work in
iOS will be just a matter

00:08:11.520 --> 00:08:13.530
of inputting the iOS
SDK and changing it

00:08:13.530 --> 00:08:15.500
to the right type of code.

00:08:15.500 --> 00:08:17.430
All the features,
all the functionality

00:08:17.430 --> 00:08:20.762
is there on Android,
iOS, Web, etc.

00:08:20.762 --> 00:08:22.720
So just because we're
talking about JavaScript,

00:08:22.720 --> 00:08:25.095
don't think that you have to
be building something in Web

00:08:25.095 --> 00:08:25.920
to be doing this.

00:08:25.920 --> 00:08:27.090
It's also worth
noting that if you're

00:08:27.090 --> 00:08:28.590
building something
cross-platform,

00:08:28.590 --> 00:08:30.000
you're building an iOS app.

00:08:30.000 --> 00:08:31.800
And an Android app,
that's going to work

00:08:31.800 --> 00:08:33.550
great with Firebase
because the same cloud

00:08:33.550 --> 00:08:36.500
services available to you
in one are available to you

00:08:36.500 --> 00:08:37.953
in the other.

00:08:37.953 --> 00:08:39.890
So let's actually
write some code.

00:08:39.890 --> 00:08:42.549
The first step to
actually building an app

00:08:42.549 --> 00:08:43.692
is writing code generally.

00:08:43.692 --> 00:08:45.650
I'm sure someone has
built an app without code,

00:08:45.650 --> 00:08:47.540
but I don't do that.

00:08:47.540 --> 00:08:49.630
So we need to include
in this library.

00:08:49.630 --> 00:08:52.880
And this is the only snippet
in here that is cross-platform.

00:08:52.880 --> 00:08:54.620
And I want to do
is to demonstrate

00:08:54.620 --> 00:08:58.040
that, in each environment,
although the code is similar,

00:08:58.040 --> 00:08:59.630
it feels natural
in it environment.

00:08:59.630 --> 00:09:01.870
So in iOS, we include
a Firebase core,

00:09:01.870 --> 00:09:05.660
which is that analytics core
plus another core Firebase

00:09:05.660 --> 00:09:07.924
aspect, and we call
up for app configure

00:09:07.924 --> 00:09:08.965
to say, hey, set this up.

00:09:08.965 --> 00:09:10.940
In Android, there's even code.

00:09:10.940 --> 00:09:14.000
We call it in our Gradle
file this plug-in,

00:09:14.000 --> 00:09:15.710
that's something for it.

00:09:15.710 --> 00:09:17.470
And in Web, we just
include JavaScript

00:09:17.470 --> 00:09:19.210
to call initialize app.

00:09:19.210 --> 00:09:21.197
As you can see, they're
all slightly different

00:09:21.197 --> 00:09:23.030
because they feel natural
in the environment

00:09:23.030 --> 00:09:25.283
that we're writing this code
in, but the functionality

00:09:25.283 --> 00:09:28.765
in each environment
will be the same.

00:09:28.765 --> 00:09:30.140
Now that we've
looked at this, we

00:09:30.140 --> 00:09:32.850
have our idea, a
social photo chat.

00:09:32.850 --> 00:09:34.820
And we know we're
using Firebase and we

00:09:34.820 --> 00:09:36.250
know we're focusing on Web.

00:09:36.250 --> 00:09:39.350
And we're going to say,
what do we want to use here?

00:09:39.350 --> 00:09:41.120
And this is an
overwhelming slide.

00:09:41.120 --> 00:09:42.950
There isn't a lot of
functionality here.

00:09:42.950 --> 00:09:45.350
We don't need all
of it for our app.

00:09:45.350 --> 00:09:46.486
We need to pick and choose.

00:09:46.486 --> 00:09:48.610
And this is one of the
great things about Firebase.

00:09:48.610 --> 00:09:51.370
Every feature on
here works alone.

00:09:51.370 --> 00:09:54.440
It can stand alone, it
can be useful alone.

00:09:54.440 --> 00:09:57.790
When you get more and more power
with every one you include.

00:09:57.790 --> 00:10:00.200
So by mixing and matching two
or three of these features,

00:10:00.200 --> 00:10:02.660
we're going to get a really
rich experience for our user.

00:10:02.660 --> 00:10:04.550
But if you only
want dynamic links,

00:10:04.550 --> 00:10:06.110
you only want crash
reporting, you

00:10:06.110 --> 00:10:08.000
can always just do that, too.

00:10:08.000 --> 00:10:11.850
So in this case, we're going
to focus on these four Firebase

00:10:11.850 --> 00:10:13.140
features.

00:10:13.140 --> 00:10:15.500
Firebase Authentication because
we need a way for people

00:10:15.500 --> 00:10:16.550
to be able to log in.

00:10:16.550 --> 00:10:18.820
We want them to
have authentication,

00:10:18.820 --> 00:10:20.680
so this is obvious.

00:10:20.680 --> 00:10:22.470
And we use Firebase
Storage to deal

00:10:22.470 --> 00:10:26.140
with offloading and
securing our uploaded files.

00:10:26.140 --> 00:10:27.560
We use Firebase
Realtime Databases

00:10:27.560 --> 00:10:30.230
to deal with synchronizing
of messages between users

00:10:30.230 --> 00:10:31.664
and between devices.

00:10:31.664 --> 00:10:33.455
And then we'll use
Firebase Cloud Messaging

00:10:33.455 --> 00:10:35.940
to unloading them with they
don't have the app open.

00:10:41.580 --> 00:10:46.108
Let's talk about
Firebase Authentication.

00:10:46.108 --> 00:10:47.260
LAUREN LONG: All right.

00:10:47.260 --> 00:10:48.075
Thank you.

00:10:48.075 --> 00:10:51.420
So as Abe mentioned, you're
building a social chatting

00:10:51.420 --> 00:10:53.080
photo app today.

00:10:53.080 --> 00:10:56.830
And first off, you want a way
for users to log into the app.

00:10:56.830 --> 00:11:00.100
You want to do this so that
we can display their username

00:11:00.100 --> 00:11:02.990
to themselves and to the people
that they are chatting with.

00:11:02.990 --> 00:11:05.470
We also want this for
security purposes,

00:11:05.470 --> 00:11:08.080
to ensure that me,
as a user, can only

00:11:08.080 --> 00:11:10.120
write to the part of the
database that contains

00:11:10.120 --> 00:11:13.290
my messages, not to the
part of the database that

00:11:13.290 --> 00:11:15.370
contains Abe's messages.

00:11:15.370 --> 00:11:18.220
So I don't know how many of you
have built an authentication

00:11:18.220 --> 00:11:20.090
system from scratch before.

00:11:20.090 --> 00:11:24.100
I've done this recently
and it was a huge headache.

00:11:24.100 --> 00:11:28.130
So I was just building a
simple email password login

00:11:28.130 --> 00:11:29.770
for an app I was creating.

00:11:29.770 --> 00:11:32.260
And I had to learn
about a lot of things,

00:11:32.260 --> 00:11:35.260
such as how to set cookies
when someone logs in,

00:11:35.260 --> 00:11:39.230
how to have those cookies expire
after a certain amount of time,

00:11:39.230 --> 00:11:41.140
revoke the cookies
when they log out.

00:11:41.140 --> 00:11:43.570
I had this issue where
a lot of my users

00:11:43.570 --> 00:11:45.400
couldn't log in for some reason.

00:11:45.400 --> 00:11:47.312
And after a lot of
debugging, I discovered

00:11:47.312 --> 00:11:49.270
it's because some of them
wrote capital letters

00:11:49.270 --> 00:11:50.770
in their emails.

00:11:50.770 --> 00:11:52.550
And that caused a
lot of problems.

00:11:52.550 --> 00:11:55.400
So I then had to sanitize
the entire database,

00:11:55.400 --> 00:11:57.830
lower case, everything,
removes spaces

00:11:57.830 --> 00:11:59.990
at the beginning
and the end emails.

00:11:59.990 --> 00:12:04.560
A lot of issues I didn't foresee
that ended up taking up my time

00:12:04.560 --> 00:12:06.520
and preventing me
from working on things

00:12:06.520 --> 00:12:08.100
that were really interesting.

00:12:08.100 --> 00:12:10.165
So with Firebase,
we make something

00:12:10.165 --> 00:12:12.790
like authentication
really simple

00:12:12.790 --> 00:12:16.330
to just put right into your app.

00:12:16.330 --> 00:12:19.720
So the things that we support,
this first email and password

00:12:19.720 --> 00:12:20.800
authentication.

00:12:20.800 --> 00:12:23.390
Second, we can do
custom authentication.

00:12:23.390 --> 00:12:26.260
So this says that if you
want to use something

00:12:26.260 --> 00:12:29.180
like a phone number plus
password authentication,

00:12:29.180 --> 00:12:31.720
you can build that
integration yourself.

00:12:31.720 --> 00:12:33.310
Or if you want to
use a provider we

00:12:33.310 --> 00:12:36.540
don't currently work
with, such as WeChat or QQ

00:12:36.540 --> 00:12:39.940
for people to be able to sign
in using those credentials.

00:12:39.940 --> 00:12:42.940
We also have built-in
providers that you

00:12:42.940 --> 00:12:47.410
can put into your app that are
commonly used around the world.

00:12:47.410 --> 00:12:51.269
Things such as Twitter,
Facebook, and Google.

00:12:51.269 --> 00:12:52.810
If someone has one
of those accounts,

00:12:52.810 --> 00:12:55.930
they can sign into your app.

00:12:55.930 --> 00:12:59.240
So the benefits of using
Firebase authentication,

00:12:59.240 --> 00:13:01.349
instead of building
your own, is taking

00:13:01.349 --> 00:13:03.390
care of a lot of the edge
cases I told you about.

00:13:03.390 --> 00:13:06.610
But also we make it very
easy to have the UI.

00:13:06.610 --> 00:13:08.680
So this site, you
see here a list

00:13:08.680 --> 00:13:11.780
of buttons where people can
pick how they want to log in.

00:13:11.780 --> 00:13:16.354
You can put this into your app
with just one line of code.

00:13:16.354 --> 00:13:19.850
Secondly, we make password
resets really easy.

00:13:19.850 --> 00:13:22.390
So this is something when I
was building my authentication

00:13:22.390 --> 00:13:24.610
system, didn't consider at all.

00:13:24.610 --> 00:13:27.910
And then I was getting users
calling me, saying, hey,

00:13:27.910 --> 00:13:29.310
I forgot my password.

00:13:29.310 --> 00:13:31.840
And then I had to
go into my database,

00:13:31.840 --> 00:13:34.360
make sure I delete
their current record,

00:13:34.360 --> 00:13:37.990
send them an email with a
link to reset their password,

00:13:37.990 --> 00:13:39.280
a real pain.

00:13:39.280 --> 00:13:40.930
And if you're
building an app that

00:13:40.930 --> 00:13:43.597
has thousands,
tens of thousands,

00:13:43.597 --> 00:13:45.180
hundreds of thousands
of users, you're

00:13:45.180 --> 00:13:47.170
going to be getting a
lot of these password

00:13:47.170 --> 00:13:49.030
resets every single day.

00:13:49.030 --> 00:13:51.860
And something that should be
really simple like sending

00:13:51.860 --> 00:13:54.610
an email with a
password or reset link

00:13:54.610 --> 00:13:56.720
actually becomes
really complicated.

00:13:56.720 --> 00:13:58.750
Because when you're
sending that many e-mails,

00:13:58.750 --> 00:14:01.000
you're going to be
caught by spam filters,

00:14:01.000 --> 00:14:02.910
your e-mails won't go
through, or they'll

00:14:02.910 --> 00:14:05.390
be very late in arriving
in your users' inbox,

00:14:05.390 --> 00:14:08.600
making the experience
very frustrating.

00:14:08.600 --> 00:14:12.730
So with Firebase authentication,
you can do password reset out.

00:14:12.730 --> 00:14:15.870
We even have email templates
you can use and modify

00:14:15.870 --> 00:14:17.530
to have your own branding.

00:14:17.530 --> 00:14:22.400
And we make this whole process
easy and secure to your users.

00:14:22.400 --> 00:14:26.920
Another thing that we do
that is anonymous accounts.

00:14:26.920 --> 00:14:29.230
So let's say you're
building a shopping app

00:14:29.230 --> 00:14:31.780
and someone might
just be trying it out

00:14:31.780 --> 00:14:34.150
and they browse around
for about half an hour.

00:14:34.150 --> 00:14:36.370
They might put some
things in their cart.

00:14:36.370 --> 00:14:38.050
And then they decide to buy it.

00:14:38.050 --> 00:14:40.620
And that point, you would ask
them to create an account.

00:14:40.620 --> 00:14:43.480
But you don't want them to lose
all the data they previously

00:14:43.480 --> 00:14:43.997
had.

00:14:43.997 --> 00:14:46.330
You don't want them to have
to go pick those items again

00:14:46.330 --> 00:14:47.920
and put them in the cart again.

00:14:47.920 --> 00:14:51.100
With anonymous accounts, even
when someone doesn't sign in,

00:14:51.100 --> 00:14:52.960
you create and
account for them right

00:14:52.960 --> 00:14:55.180
when they are on your webpage.

00:14:55.180 --> 00:14:57.610
And when they do
create a real account,

00:14:57.610 --> 00:14:59.680
you can link that
information and nothing

00:14:59.680 --> 00:15:01.590
gets lost in the process.

00:15:01.590 --> 00:15:04.830
So let's see how
we do this in code.

00:15:04.830 --> 00:15:09.580
As Abe mentioned, we already
initialized a Firebase

00:15:09.580 --> 00:15:10.630
instance.

00:15:10.630 --> 00:15:13.590
And next we align three
call Firebase.auth.

00:15:13.590 --> 00:15:16.050
This gives us an instance
of the authentication

00:15:16.050 --> 00:15:17.680
service of Firebase.

00:15:17.680 --> 00:15:20.920
And once that, there is a
lot of different functions

00:15:20.920 --> 00:15:23.720
and attributes that
we have access to.

00:15:23.720 --> 00:15:26.860
So let's say you have a web
form, where someone has filled

00:15:26.860 --> 00:15:28.450
out their email
and their password

00:15:28.450 --> 00:15:30.000
and you store those variables.

00:15:30.000 --> 00:15:31.980
You have an email and
a password variable.

00:15:31.980 --> 00:15:36.070
You want to now check to see
if their password is correct.

00:15:36.070 --> 00:15:39.160
So you call this function
online [INAUDIBLE], sign

00:15:39.160 --> 00:15:41.560
in with email and password,
provide it with these two

00:15:41.560 --> 00:15:43.870
parameters, and
this will tell you

00:15:43.870 --> 00:15:46.940
if it is a user that
has already signed up

00:15:46.940 --> 00:15:48.950
and if their
password is correct.

00:15:48.950 --> 00:15:51.110
This function returns a promise.

00:15:51.110 --> 00:15:53.810
So if you have used
promises before, it's

00:15:53.810 --> 00:15:56.910
a way to handle asynchronous
code in JavaScript,

00:15:56.910 --> 00:15:59.030
it is an alternative
to a callback.

00:15:59.030 --> 00:16:02.551
And with a promise, you get
a then function and a catch

00:16:02.551 --> 00:16:03.050
function.

00:16:03.050 --> 00:16:06.650
So in the then function,
this is the success case.

00:16:06.650 --> 00:16:09.050
When the password
is the correct one,

00:16:09.050 --> 00:16:12.040
you get, in the function
here, a result, which

00:16:12.040 --> 00:16:14.790
represents that sign-in user.

00:16:14.790 --> 00:16:17.650
And result.user
gives you everything

00:16:17.650 --> 00:16:19.280
that Firebase
authentication knows

00:16:19.280 --> 00:16:23.030
about that user, including
the universal ID, their email,

00:16:23.030 --> 00:16:25.940
their password, maybe a
picture associated with them.

00:16:25.940 --> 00:16:30.035
And you can store that in the
user variables to use later.

00:16:30.035 --> 00:16:32.360
And let's say they type
in the wrong password,

00:16:32.360 --> 00:16:34.670
the catch function
catches that error

00:16:34.670 --> 00:16:37.180
and we have code and
a message that you

00:16:37.180 --> 00:16:41.200
can choose to display to
the user, if you would like.

00:16:41.200 --> 00:16:44.360
Let's see how we do this with
one of our existing providers.

00:16:44.360 --> 00:16:46.730
We're using Google
Sign In in this case,

00:16:46.730 --> 00:16:49.150
so this is someone that
has a Google account

00:16:49.150 --> 00:16:51.550
and they want to use that
to sign in to your app,

00:16:51.550 --> 00:16:53.970
instead of creating
an additional account

00:16:53.970 --> 00:16:58.100
and another password just
to remember for your app.

00:16:58.100 --> 00:17:00.525
So here in line 4,
they create an instance

00:17:00.525 --> 00:17:02.870
of a Google auth provider.

00:17:02.870 --> 00:17:05.540
So you can do this
not only with Google,

00:17:05.540 --> 00:17:08.900
but also our other providers,
such as Twitter and Facebook,

00:17:08.900 --> 00:17:12.010
and you simply place
Google with those names.

00:17:12.010 --> 00:17:16.730
Next, they call the sign in with
pop up function on the Firebase

00:17:16.730 --> 00:17:20.540
auth service, and
pass in the parameter

00:17:20.540 --> 00:17:22.290
that we just is initialized.

00:17:22.290 --> 00:17:25.030
So what this does is
it creates a pop up

00:17:25.030 --> 00:17:29.140
that will have UI asking
for their Google credential.

00:17:29.140 --> 00:17:32.490
And all this then goes to Google
servers, not your servers.

00:17:32.490 --> 00:17:35.310
So you don't have to worry about
security and storing users'

00:17:35.310 --> 00:17:38.380
data or [INAUDIBLE] password
to their Google account.

00:17:38.380 --> 00:17:41.630
And once they type
in their credentials,

00:17:41.630 --> 00:17:43.820
the function again
returns a promise

00:17:43.820 --> 00:17:46.360
with a then and a catch.

00:17:46.360 --> 00:17:48.550
And in [INAUDIBLE], you
get the success case,

00:17:48.550 --> 00:17:51.470
you get the user object with
all the information you need.

00:17:51.470 --> 00:17:54.560
And if it fails, an
error code and message

00:17:54.560 --> 00:17:58.432
that you can choose to display
to the user if you like.

00:17:58.432 --> 00:18:01.700
Now let's talk about how you
do custom authentication.

00:18:01.700 --> 00:18:04.900
So this is useful if you
are, like I mentioned,

00:18:04.900 --> 00:18:07.370
trying to integrate with
a third party provider

00:18:07.370 --> 00:18:10.140
we haven't supported yet,
such as WeChat or QQ,

00:18:10.140 --> 00:18:13.490
or if you would like to
work with an existing auth

00:18:13.490 --> 00:18:16.460
system you already have
created for your app.

00:18:16.460 --> 00:18:20.590
So you call the sign in with
custom, token, function.

00:18:20.590 --> 00:18:24.270
Pass a function that was
created on your server,

00:18:24.270 --> 00:18:28.790
either through a third party
or your own custom auth flow.

00:18:28.790 --> 00:18:33.230
And in the success
case, you would

00:18:33.230 --> 00:18:35.340
have the same user
object you had earlier

00:18:35.340 --> 00:18:38.000
And the failure case would
have a message that you

00:18:38.000 --> 00:18:39.480
would display to the user.

00:18:39.480 --> 00:18:42.590
So now we figured out how
to get someone to sign in.

00:18:42.590 --> 00:18:45.389
I just wanted to know
that we here only

00:18:45.389 --> 00:18:46.430
looked at how to sign in.

00:18:46.430 --> 00:18:50.430
But for someone to sign
up is a very similar flow,

00:18:50.430 --> 00:18:52.927
and the code looks identical.

00:18:52.927 --> 00:18:54.760
You just have to replace
the function names.

00:18:54.760 --> 00:18:56.520
So instead of sign
in with custom auth,

00:18:56.520 --> 00:18:59.450
it would be something like
sign up in custom auth.

00:18:59.450 --> 00:19:02.010
Next, we're going to look
at how to let users upload

00:19:02.010 --> 00:19:04.040
the photos once
they've signed in,

00:19:04.040 --> 00:19:07.776
and Abe will chat
with you about that.

00:19:07.776 --> 00:19:10.450
ABE HASKINS: So we're going to
talk about Firebase Storage.

00:19:10.450 --> 00:19:13.300
Firebase Storage is the
solution for dealing

00:19:13.300 --> 00:19:16.880
with uploading files Once
the user has authenticated,

00:19:16.880 --> 00:19:19.830
we want to give them a way to
upload images, in this case.

00:19:19.830 --> 00:19:22.230
But in many cases,
this could be videos,

00:19:22.230 --> 00:19:25.020
it could be documents,
PDFs, anything.

00:19:25.020 --> 00:19:29.150
This is a general solution to
dealing with uploading files.

00:19:29.150 --> 00:19:31.292
Firebase storage is
really great because it's

00:19:31.292 --> 00:19:36.070
backed by a very powerful
system for storing files.

00:19:36.070 --> 00:19:38.300
And not only storing them,
but also securing them.

00:19:38.300 --> 00:19:40.200
You can know for
sure that a user who

00:19:40.200 --> 00:19:43.530
uploaded a file to their
folder on Firebase storage

00:19:43.530 --> 00:19:45.900
will only have access
to that folder,

00:19:45.900 --> 00:19:48.680
and no one else can read
or write to their folder.

00:19:48.680 --> 00:19:50.825
You can restrict how big
a file they can upload,

00:19:50.825 --> 00:19:53.200
you can check and make sure
they have the right MIME type

00:19:53.200 --> 00:19:54.616
so you know they're
only uploading

00:19:54.616 --> 00:19:55.870
the right type of file.

00:19:55.870 --> 00:19:59.200
You have a lot of options
and a lot of control here.

00:19:59.200 --> 00:20:01.330
So you get started
with this in HTML.

00:20:01.330 --> 00:20:04.700
We have two elements which
make up our simple upload form.

00:20:04.700 --> 00:20:06.175
We have the input type of file.

00:20:06.175 --> 00:20:08.450
So that's where they'll
actually select the file.

00:20:08.450 --> 00:20:10.877
We'll have a button
that just says Upload.

00:20:10.877 --> 00:20:11.835
And that's all we need.

00:20:11.835 --> 00:20:14.560
Once we get into JavaScript, we
just have some boilerplate here

00:20:14.560 --> 00:20:15.995
to select those two inputs.

00:20:15.995 --> 00:20:19.424
So the input file is
that type file input,

00:20:19.424 --> 00:20:22.162
and the button Submit
is our Submit button.

00:20:22.162 --> 00:20:23.870
The we have the Add
Event Click Listener.

00:20:23.870 --> 00:20:25.730
Again, this is just
normal JavaScript.

00:20:25.730 --> 00:20:28.660
This is not anything
special about Firebase.

00:20:28.660 --> 00:20:30.470
Once we get down
into this part, we

00:20:30.470 --> 00:20:32.611
get into all the
magic of Firebase.

00:20:32.611 --> 00:20:35.012
First thing we
want to do is draft

00:20:35.012 --> 00:20:37.690
the input file [INAUDIBLE].

00:20:37.690 --> 00:20:40.550
So this will be the first file
that the user has selected.

00:20:40.550 --> 00:20:42.740
Sometimes they can
upload multiple files

00:20:42.740 --> 00:20:45.080
if they have
multifileselect enabled.

00:20:45.080 --> 00:20:47.252
But in this case, we allow that.

00:20:47.252 --> 00:20:51.500
After that, we
have the reference

00:20:51.500 --> 00:20:53.920
to the Firebase
storage location.

00:20:53.920 --> 00:20:56.210
So Firebase storage
[INAUDIBLE] upload.jpeg.

00:20:56.210 --> 00:20:59.080
So we're saying that we want
to upload this to upload.jpeg.

00:20:59.080 --> 00:21:00.950
It's just a matter
of what the file is

00:21:00.950 --> 00:21:02.920
that the person is uploading.

00:21:02.920 --> 00:21:09.650
If it is named HelloWorld123, it
will be uploaded to upload.jpeg

00:21:09.650 --> 00:21:11.360
And then below,
we'll do [INAUDIBLE].

00:21:11.360 --> 00:21:13.565
And this is the actual
call to upload the file.

00:21:13.565 --> 00:21:16.658
This is all it takes to store
that file the user has selected

00:21:16.658 --> 00:21:17.300
on our server.

00:21:17.300 --> 00:21:21.840
Direct output file is a file
that the input has specified.

00:21:21.840 --> 00:21:24.590
And then with that
same comments function,

00:21:24.590 --> 00:21:26.690
we check to make
sure it's successful,

00:21:26.690 --> 00:21:28.464
and then we log out, upload it.

00:21:28.464 --> 00:21:30.630
And then below here, we've
assigned the download URL

00:21:30.630 --> 00:21:32.941
to this variable
[INAUDIBLE] URL.

00:21:32.941 --> 00:21:36.780
In this case, a download
URL is literally just

00:21:36.780 --> 00:21:37.910
a URL to the image.

00:21:37.910 --> 00:21:39.680
We could embed this
in an image tag,

00:21:39.680 --> 00:21:42.055
we could download it, save it
to the hard drive, whatever

00:21:42.055 --> 00:21:42.680
we want to do.

00:21:42.680 --> 00:21:44.721
In this case, we're just
storing it as a variable

00:21:44.721 --> 00:21:47.796
so we can later append it
to a message to send off.

00:21:52.160 --> 00:21:55.400
Next, we're going to talk
about the Firebase database.

00:21:55.400 --> 00:21:56.650
Lauren?

00:21:56.650 --> 00:21:59.600
LAUREN LONG: So let's think
about what we've done so far.

00:21:59.600 --> 00:22:03.410
We made it available for the
user to sign into the app.

00:22:03.410 --> 00:22:06.200
We then allow them
to upload a photo.

00:22:06.200 --> 00:22:08.180
Now let's allow them to chat.

00:22:08.180 --> 00:22:12.020
So Firebase Database is our
solution for storing data,

00:22:12.020 --> 00:22:14.630
and it's a very powerful one.

00:22:14.630 --> 00:22:17.410
It is a JSON-based
database, so if you've

00:22:17.410 --> 00:22:19.180
worked with JSON
before, anything

00:22:19.180 --> 00:22:21.336
that you can encode
in JSON, you can

00:22:21.336 --> 00:22:23.390
store within Firebase Storage.

00:22:23.390 --> 00:22:26.880
It is key value store, so it's
not an SQL-based database,

00:22:26.880 --> 00:22:30.620
it is a null
relational database.

00:22:30.620 --> 00:22:32.885
The very powerful thing
about Firebase Database

00:22:32.885 --> 00:22:34.950
is how it's real time.

00:22:34.950 --> 00:22:37.830
What this means is any
time one of your users

00:22:37.830 --> 00:22:41.600
puts something into the
database, all the other users

00:22:41.600 --> 00:22:43.700
that [INAUDIBLE] that
same database will

00:22:43.700 --> 00:22:45.500
get that changed instantly.

00:22:45.500 --> 00:22:48.100
No one needs to refresh their
page for this to happen.

00:22:48.100 --> 00:22:50.730
And this happens
within milliseconds.

00:22:50.730 --> 00:22:53.240
We also offer a really
great offline support.

00:22:53.240 --> 00:22:57.900
So if I'm typing a message
and my connectivity goes out

00:22:57.900 --> 00:23:02.460
because my Wi-Fi has stopped
working for some reason,

00:23:02.460 --> 00:23:05.060
then the chat I
sent gets cued up.

00:23:05.060 --> 00:23:08.154
And when I'm online again,
it gets sent to the database.

00:23:08.154 --> 00:23:09.820
Now this feature is
really key if you're

00:23:09.820 --> 00:23:12.290
trying to develop for
a market like India,

00:23:12.290 --> 00:23:14.015
where a lot of people
have smartphones,

00:23:14.015 --> 00:23:18.377
but good connectivity
is hard to find.

00:23:18.377 --> 00:23:20.210
So a lot of people have
very spotty networks

00:23:20.210 --> 00:23:23.060
and spotty Wi-Fi.

00:23:23.060 --> 00:23:25.700
This is how it would
store something.

00:23:25.700 --> 00:23:28.670
So this is what we're going
to use today for our chat app.

00:23:28.670 --> 00:23:30.950
As you can see, it is JSON.

00:23:30.950 --> 00:23:33.320
It is essentially
a tree of values,

00:23:33.320 --> 00:23:37.130
so we store everything in
this top level chats node.

00:23:37.130 --> 00:23:40.790
And within chats, we
have different chat IDs

00:23:40.790 --> 00:23:42.640
representing chat rooms.

00:23:42.640 --> 00:23:46.210
So today in our chat room,
we've got two messages so far.

00:23:46.210 --> 00:23:48.920
Each message has it own ID.

00:23:48.920 --> 00:23:51.200
And in the content
of that message,

00:23:51.200 --> 00:23:54.200
we have a UID, which
stands for User ID.

00:23:54.200 --> 00:23:57.590
This associate that message
with the user that sent it.

00:23:57.590 --> 00:24:03.440
We're also storing the content
of that message in plain text.

00:24:03.440 --> 00:24:05.600
And when someone
types in something,

00:24:05.600 --> 00:24:08.570
it goes to the Firebase
database in the Cloud.

00:24:08.570 --> 00:24:11.570
It then propagates to
every other device that's

00:24:11.570 --> 00:24:13.650
connected to that database.

00:24:13.650 --> 00:24:15.680
So this could be
if a user is using

00:24:15.680 --> 00:24:19.110
your app on both their phone
and computer at the same time.

00:24:19.110 --> 00:24:23.750
This could be people that
are using the same app.

00:24:23.750 --> 00:24:26.480
Not that user, but other people
that are in that chat room,

00:24:26.480 --> 00:24:29.120
trying to see what
messages are being sent.

00:24:29.120 --> 00:24:32.940
The synchronization
happens very fast.

00:24:32.940 --> 00:24:35.660
And it does not require
any of the users

00:24:35.660 --> 00:24:37.260
to refresh their page.

00:24:37.260 --> 00:24:38.720
So this is very powerful.

00:24:38.720 --> 00:24:42.050
This makes single page
apps really easy to build,

00:24:42.050 --> 00:24:44.960
this makes the experience
really magical and delightful

00:24:44.960 --> 00:24:45.981
for your users.

00:24:45.981 --> 00:24:48.230
And this is something that
would normally be very hard

00:24:48.230 --> 00:24:50.260
for you to build by yourself.

00:24:50.260 --> 00:24:52.550
But today, as you'll see
in the next few slides,

00:24:52.550 --> 00:24:55.780
it just takes a
few lines of code.

00:24:55.780 --> 00:24:59.620
So here we get an instance
of the Firebase Database

00:24:59.620 --> 00:25:00.920
on Line 1.

00:25:00.920 --> 00:25:03.650
Similar to how we set
up the auth in storage.

00:25:03.650 --> 00:25:07.010
We just call Firebase.databse.

00:25:07.010 --> 00:25:09.140
Next, we actually
want a reference

00:25:09.140 --> 00:25:10.970
to the place in the
database that we want

00:25:10.970 --> 00:25:13.020
to store in the next message.

00:25:13.020 --> 00:25:15.760
So as you remember from our
diagram that we went over,

00:25:15.760 --> 00:25:18.050
we have everything
stored inside chats,

00:25:18.050 --> 00:25:20.390
and we have a chat
ID for chat room.

00:25:20.390 --> 00:25:22.220
So we get a reference
to the place

00:25:22.220 --> 00:25:24.650
in the database
with the path chats

00:25:24.650 --> 00:25:28.610
slash the ID that
we're on right now.

00:25:28.610 --> 00:25:32.660
And here in Line 4, we
have a helper function

00:25:32.660 --> 00:25:34.220
called send chat app.

00:25:34.220 --> 00:25:37.180
And this function is called
whenever someone types

00:25:37.180 --> 00:25:40.610
in a message and clicks
on the Submit button.

00:25:40.610 --> 00:25:44.120
So when they've don that, we
call a function on the chat ref

00:25:44.120 --> 00:25:45.170
called push.

00:25:45.170 --> 00:25:47.750
And we give push the
content of what we

00:25:47.750 --> 00:25:49.380
want to store in the database.

00:25:49.380 --> 00:25:52.280
So this is the user ID,
we sent the message,

00:25:52.280 --> 00:25:55.280
and the message that
they just wrote.

00:25:55.280 --> 00:25:58.540
Now there's other functions
you can call on chat reference,

00:25:58.540 --> 00:26:01.140
such as set.

00:26:01.140 --> 00:26:03.160
And the difference between
these two functions

00:26:03.160 --> 00:26:06.020
is that set is if you
know the exact path

00:26:06.020 --> 00:26:09.350
to that place in the database,
whereas push is useful

00:26:09.350 --> 00:26:11.160
when you're adding
something to a list.

00:26:11.160 --> 00:26:15.090
And push also automatically
gives that new item

00:26:15.090 --> 00:26:16.402
a unique ID.

00:26:16.402 --> 00:26:18.110
So you don't have to
worry about setting,

00:26:18.110 --> 00:26:20.960
you don't need to figure
out how to randomize an ID

00:26:20.960 --> 00:26:23.490
and ensuring that they are
unique with each new message

00:26:23.490 --> 00:26:25.310
that you are storing.

00:26:25.310 --> 00:26:30.020
So we've pushed it so from the
lines that are highlighted,

00:26:30.020 --> 00:26:32.120
this is all the code
we would need to write

00:26:32.120 --> 00:26:33.520
something the in the database.

00:26:33.520 --> 00:26:35.510
Very simple.

00:26:35.510 --> 00:26:38.600
Next, we want to
then make sure we

00:26:38.600 --> 00:26:41.210
know when someone
has typed a message,

00:26:41.210 --> 00:26:44.090
and then display
that to the user.

00:26:44.090 --> 00:26:47.630
So Line 12 to 14 shows
us how we do that.

00:26:47.630 --> 00:26:50.360
So in the same chat ref
that we just wrote to,

00:26:50.360 --> 00:26:52.890
we add a listener
called child added.

00:26:52.890 --> 00:26:54.300
And give it a handler.

00:26:54.300 --> 00:26:57.350
So child added
listens to the event

00:26:57.350 --> 00:26:59.630
where something
new has been added

00:26:59.630 --> 00:27:02.310
to that list of chat messages.

00:27:02.310 --> 00:27:06.080
So if either me or someone
that I'm chatting to

00:27:06.080 --> 00:27:09.160
has wrote to the database,
this function will fire.

00:27:09.160 --> 00:27:11.570
And it will fire with a
parameter called snapshot,

00:27:11.570 --> 00:27:13.940
which contains everything
we need to know about

00:27:13.940 --> 00:27:16.160
that new database write event.

00:27:16.160 --> 00:27:20.450
So in this case, we can
call snapshot.val on Line 13

00:27:20.450 --> 00:27:24.600
to get us the content that
was sent to the database.

00:27:24.600 --> 00:27:27.170
We then have another function
called display chat message,

00:27:27.170 --> 00:27:28.670
which we didn't show you here.

00:27:28.670 --> 00:27:32.670
But this would just be a message
for you to actually display it

00:27:32.670 --> 00:27:34.670
in the HTML.

00:27:34.670 --> 00:27:35.690
So check it out.

00:27:35.690 --> 00:27:39.230
This is all the code we
have to achieve a real time

00:27:39.230 --> 00:27:42.500
synchronization of messages
across multiple devices

00:27:42.500 --> 00:27:45.750
in milliseconds.

00:27:45.750 --> 00:27:48.290
And another neat
thing we can do here

00:27:48.290 --> 00:27:51.530
is connect storage
and database together.

00:27:51.530 --> 00:27:54.050
So when Abe went
over the storage

00:27:54.050 --> 00:27:55.950
part of the
presentation, you might

00:27:55.950 --> 00:27:58.760
remember that we get back
a URL that we then use

00:27:58.760 --> 00:28:00.440
to download that image again.

00:28:00.440 --> 00:28:04.910
So if someone has sent an
image along with their message,

00:28:04.910 --> 00:28:07.540
we can write that URL
within the database.

00:28:07.540 --> 00:28:09.240
So when we display
that message again,

00:28:09.240 --> 00:28:12.650
we not only display the
message that they sent,

00:28:12.650 --> 00:28:16.250
we also display the
image that they uploaded.

00:28:16.250 --> 00:28:17.840
So this is how you
connect together

00:28:17.840 --> 00:28:21.360
the storage and the database.

00:28:21.360 --> 00:28:25.360
So now that we've given the user
the ability to sign in, write

00:28:25.360 --> 00:28:27.560
a message, upload
a photo, we want

00:28:27.560 --> 00:28:30.980
to notify them when they
want to know something

00:28:30.980 --> 00:28:32.966
about what's happening.

00:28:32.966 --> 00:28:35.820
ABE HASKINS: So if we
want to notify someone

00:28:35.820 --> 00:28:38.525
when they're online, when
they have the app open

00:28:38.525 --> 00:28:40.605
when it's in the foreground,
this is pretty easy.

00:28:40.605 --> 00:28:43.455
All we have to do
is say, nothing.

00:28:43.455 --> 00:28:44.137
We just did it.

00:28:44.137 --> 00:28:45.220
We wrote the code already.

00:28:45.220 --> 00:28:47.242
We wrote it with the
real time database.

00:28:47.242 --> 00:28:49.158
That's going to synchronize
every message that

00:28:49.158 --> 00:28:50.970
comes on when the app is open.

00:28:50.970 --> 00:28:54.300
But if they get a message
when they're offline,

00:28:54.300 --> 00:28:56.270
my code's not going
to be running, is it?

00:28:56.270 --> 00:28:58.604
That code's been shut off,
the app has been killed,

00:28:58.604 --> 00:28:59.770
they don't have to tap open.

00:28:59.770 --> 00:29:02.682
They will not get any
type of notification.

00:29:02.682 --> 00:29:05.210
This is where Firebase
Cloud Messaging comes in.

00:29:05.210 --> 00:29:08.911
So Firebase Cloud Messaging
is a generic push notification

00:29:08.911 --> 00:29:09.410
solution.

00:29:09.410 --> 00:29:12.796
So it can push to mobile
devices like Android and iOS.

00:29:12.796 --> 00:29:14.448
It can push to web
browsers, which

00:29:14.448 --> 00:29:15.777
is what we'll be doing here.

00:29:15.777 --> 00:29:18.640
You have a lot of options for
sending alerts to users who

00:29:18.640 --> 00:29:19.920
are not currently in your app.

00:29:19.920 --> 00:29:22.790
And you can even use it
for in-app notifications

00:29:22.790 --> 00:29:23.780
if you'd like.

00:29:23.780 --> 00:29:26.664
But in this case, we're
mostly focusing on the use of,

00:29:26.664 --> 00:29:30.080
I'm not in your app right now,
but somebody sent me a message

00:29:30.080 --> 00:29:31.666
and I want to know about it.

00:29:31.666 --> 00:29:33.082
So setting this
up is pretty easy,

00:29:33.082 --> 00:29:34.976
just like all the other
code we looked at.

00:29:34.976 --> 00:29:36.810
We can start it with
a messaging instance,

00:29:36.810 --> 00:29:39.310
so we get Firebase.messaging.

00:29:39.310 --> 00:29:41.810
And then we call
messaging.getToken.

00:29:41.810 --> 00:29:44.310
And this is going to
get us a unique ID

00:29:44.310 --> 00:29:47.190
token that is generally
set to refer to a device.

00:29:47.190 --> 00:29:50.970
In this instance, it actually
refers to a browser instance.

00:29:50.970 --> 00:29:53.191
But the important part
is that it is a machine,

00:29:53.191 --> 00:29:55.600
it is this user on this machine.

00:29:55.600 --> 00:29:58.920
Once we have this ID token
on our server, we can go

00:29:58.920 --> 00:30:02.960
and we can send any given push
ID for any given push we want.

00:30:02.960 --> 00:30:05.580
So we can say, hey,
your friend came online.

00:30:05.580 --> 00:30:07.390
Hey, you got a new message.

00:30:07.390 --> 00:30:09.650
Hey, you know, you're
billing expired.

00:30:09.650 --> 00:30:13.400
Anything like that we want to
do, we can do with this token.

00:30:13.400 --> 00:30:15.739
That's why when we
successfully get this token,

00:30:15.739 --> 00:30:16.780
we send it to our server.

00:30:16.780 --> 00:30:18.238
And this function
isn't shown here,

00:30:18.238 --> 00:30:21.620
but in actuality, this code
would send to the real time

00:30:21.620 --> 00:30:24.200
database probably, and we would
have an announcement saying,

00:30:24.200 --> 00:30:26.690
you logged in with
Twitter with this UID,

00:30:26.690 --> 00:30:31.430
and associate it with that
user ID this push token.

00:30:31.430 --> 00:30:33.170
Then, if for some
reason we weren't

00:30:33.170 --> 00:30:35.596
able to get the token, we
request permissions, we set up

00:30:35.596 --> 00:30:37.420
a dialogue for you
that says, hey,

00:30:37.420 --> 00:30:39.740
you need to do this so we
can have push notifications.

00:30:39.740 --> 00:30:42.410
And then that can allow it
to successfully get tokens.

00:30:42.410 --> 00:30:44.830
Actually, getting that
token is really easy.

00:30:44.830 --> 00:30:46.970
And then, like I said,
storing it, very easy.

00:30:46.970 --> 00:30:49.094
And then consuming that,
sending push notifications

00:30:49.094 --> 00:30:51.770
to this specific
user, very simple.

00:30:51.770 --> 00:30:53.682
If we want to
catch that message.

00:30:53.682 --> 00:30:55.265
If we don't want to
catch the message,

00:30:55.265 --> 00:30:57.350
and we just want push
notifications to show up,

00:30:57.350 --> 00:30:59.516
so they pop up on the top
of the screen and it says,

00:30:59.516 --> 00:31:02.540
hey, you got a new message, we
don't have to write any code.

00:31:02.540 --> 00:31:06.070
That's the default functionality
of Firebase Cloud messaging.

00:31:06.070 --> 00:31:07.719
So if I want that, we're good.

00:31:07.719 --> 00:31:09.510
We actually want to go
a little beyond that

00:31:09.510 --> 00:31:10.860
and customize it a little bit.

00:31:10.860 --> 00:31:13.760
So if I have the app open
and I'm chatting to Lauren,

00:31:13.760 --> 00:31:16.222
I don't want to know when I
got the message from Lauren

00:31:16.222 --> 00:31:17.680
in the form of a
push notification,

00:31:17.680 --> 00:31:19.180
because I already
have the app open.

00:31:19.180 --> 00:31:20.570
That would be really annoying.

00:31:20.570 --> 00:31:21.986
Every time she
sends me a message,

00:31:21.986 --> 00:31:23.800
I'm just getting
the same push twice,

00:31:23.800 --> 00:31:25.720
and that would be really weird.

00:31:25.720 --> 00:31:28.916
So what we do here is we say
messaging.onMessage and put

00:31:28.916 --> 00:31:32.220
on this callback and we say
any time I get a message,

00:31:32.220 --> 00:31:34.650
if I have the app open, this
code is going to catch it,

00:31:34.650 --> 00:31:37.780
and it won't show that
actual push modification

00:31:37.780 --> 00:31:38.810
in the browser.

00:31:38.810 --> 00:31:41.650
If we want to, in our chat
app, we can use this as a call

00:31:41.650 --> 00:31:44.120
to action and say,
change the channel chat

00:31:44.120 --> 00:31:45.540
to be focused on Lauren.

00:31:45.540 --> 00:31:49.140
Or wiggle her icon or
something like that to say,

00:31:49.140 --> 00:31:50.620
hey, you got a message.

00:31:50.620 --> 00:31:53.810
But we don't have to show
the native push notification

00:31:53.810 --> 00:31:55.151
you UI if we don't want to.

00:31:55.151 --> 00:31:56.850
And that's what this
is doing over here.

00:31:56.850 --> 00:31:59.097
So we are cheating
a little bit here.

00:31:59.097 --> 00:32:00.597
I'll admit there
is some server side

00:32:00.597 --> 00:32:02.930
code that would generally be
used with this to complete

00:32:02.930 --> 00:32:04.070
this example.

00:32:04.070 --> 00:32:07.140
But Lawrence is giving a
Firebase Cloud messaging

00:32:07.140 --> 00:32:11.120
and Firebase notifications
talk right after this.

00:32:11.120 --> 00:32:14.096
So if you have a lot of
interest in push notifications,

00:32:14.096 --> 00:32:15.470
definitely go to
that talk and he

00:32:15.470 --> 00:32:18.380
will explain in very
good detail everything

00:32:18.380 --> 00:32:22.150
about implementing this.

00:32:22.150 --> 00:32:25.241
So we have pretty much completed
our app with these four

00:32:25.241 --> 00:32:25.990
Firebase features.

00:32:25.990 --> 00:32:30.400
We put these into a chart that
kind of map the user's flow.

00:32:30.400 --> 00:32:32.042
The first thing they
do is say log in

00:32:32.042 --> 00:32:33.250
with Firebase authentication.

00:32:33.250 --> 00:32:35.250
And they're logged in
and we know who they are.

00:32:35.250 --> 00:32:37.270
Then they go to
take their picture,

00:32:37.270 --> 00:32:39.170
and we upload that
to Firebase storage.

00:32:39.170 --> 00:32:40.630
And then as soon
as they do that,

00:32:40.630 --> 00:32:42.590
we use Firebase Cloud
Messaging and Firebase

00:32:42.590 --> 00:32:45.300
database to send that
out to all their friends.

00:32:45.300 --> 00:32:47.020
And we have a
complete experience.

00:32:47.020 --> 00:32:49.020
This is everything you
need to build an app.

00:32:49.020 --> 00:32:52.090
So let's look at what
we actually made here,

00:32:52.090 --> 00:32:54.760
one you take this an add
a little but of polish.

00:32:54.760 --> 00:32:56.890
We have this original
app that we looked at.

00:32:56.890 --> 00:32:59.230
And if we step through this,
we have the Sign In button.

00:32:59.230 --> 00:33:00.210
We hit Sign In.

00:33:00.210 --> 00:33:02.890
We get that beautiful screen
of all the different provider

00:33:02.890 --> 00:33:04.540
options you can log in with.

00:33:04.540 --> 00:33:07.920
In this case, we would
sign in with Google,

00:33:07.920 --> 00:33:10.120
but any of these
providers are provided.

00:33:10.120 --> 00:33:12.850
And if you want to add
custom ones, like we said,

00:33:12.850 --> 00:33:15.760
WeChat or QQ or any
of these options,

00:33:15.760 --> 00:33:19.840
you can add those as Firebase
authentication login options.

00:33:19.840 --> 00:33:23.243
After we've logged in, we will
change our welcome message

00:33:23.243 --> 00:33:24.980
to say, hey, welcome, Ben.

00:33:24.980 --> 00:33:28.090
Welcome to our hashtag
#golang chat room.

00:33:28.090 --> 00:33:31.827
And the previous messages
that have already been sent

00:33:31.827 --> 00:33:32.910
will be displayed to that.

00:33:32.910 --> 00:33:35.410
And this is something really
interesting about the real time

00:33:35.410 --> 00:33:38.050
database that is often
kind of unexpected.

00:33:38.050 --> 00:33:39.550
It's a problem that
you don't really

00:33:39.550 --> 00:33:42.640
realize you have until you get
really far into development,

00:33:42.640 --> 00:33:46.780
which is that if we were
normally building a [INAUDIBLE]

00:33:46.780 --> 00:33:49.600
with sockets and all
of that painful stuff,

00:33:49.600 --> 00:33:51.370
we have to write a
bunch of code just

00:33:51.370 --> 00:33:56.100
to send users who just connected
all the historical messages.

00:33:56.100 --> 00:33:57.890
So Firebase is super simple.

00:33:57.890 --> 00:34:00.640
We can go in and we can
say, give us every message.

00:34:00.640 --> 00:34:02.070
And that's what
we did when we did

00:34:02.070 --> 00:34:03.278
that child added [INAUDIBLE].

00:34:03.278 --> 00:34:05.980
So a new user entering this
chat will automatically

00:34:05.980 --> 00:34:08.375
be caught up with every
previous message sent.

00:34:08.375 --> 00:34:10.000
Or if you change the
code a little bit,

00:34:10.000 --> 00:34:11.458
they might get the
last 10 messages

00:34:11.458 --> 00:34:13.109
or the last five or whatever.

00:34:13.109 --> 00:34:15.170
So you don't have to
worry about saying, oh,

00:34:15.170 --> 00:34:17.190
are they going to get
previous messages?

00:34:17.190 --> 00:34:20.488
Firebase takes care
of that for you.

00:34:20.488 --> 00:34:23.449
So let's actually send
a chat and look at this.

00:34:23.449 --> 00:34:26.250
Imagine we have another user,
this is one is named James.

00:34:26.250 --> 00:34:29.109
And he's somewhere
across the world from Ben

00:34:29.109 --> 00:34:30.150
and he's looking to chat.

00:34:30.150 --> 00:34:31.859
And Ben decides to
write a message.

00:34:31.859 --> 00:34:34.150
He doesn't really like that
we have a golang chat room,

00:34:34.150 --> 00:34:36.199
but not a C sharp chat room.

00:34:36.199 --> 00:34:38.050
So he decides to
write that in for us.

00:34:38.050 --> 00:34:39.699
And he sends this message.

00:34:39.699 --> 00:34:42.199
No as soon as he sends it,
imagine no time has passed.

00:34:42.199 --> 00:34:43.850
Mere milliseconds have passed.

00:34:43.850 --> 00:34:46.730
James has not gotten
an update yet.

00:34:46.730 --> 00:34:48.960
Nothing has happened,
but over the next 10,

00:34:48.960 --> 00:34:51.989
20, 30 milliseconds, we're going
to see that Firebase match.

00:34:51.989 --> 00:34:53.760
It's going to get
sent out to the Cloud

00:34:53.760 --> 00:34:55.820
and synchronized back down.

00:34:55.820 --> 00:34:59.340
And before James can blink,
probably literally before you

00:34:59.340 --> 00:35:01.590
can blink, that'll be
synchronized back to him,

00:35:01.590 --> 00:35:02.820
and he can get that message.

00:35:02.820 --> 00:35:05.652
And we do a little
cool client side

00:35:05.652 --> 00:35:07.360
logic to say on this
one it's sent by you

00:35:07.360 --> 00:35:10.355
and this one is sent by Ben, so
we're looking at the messages

00:35:10.355 --> 00:35:12.860
as they come in,
customizing UI a little bit.

00:35:12.860 --> 00:35:14.443
But this is all super
straightforward,

00:35:14.443 --> 00:35:17.340
and if you want the complete
code for an example,

00:35:17.340 --> 00:35:19.760
just like this, we have
them available on GitHub.

00:35:19.760 --> 00:35:21.630
We have full chat
applications where

00:35:21.630 --> 00:35:24.340
you can upload pictures
and invite people and chat

00:35:24.340 --> 00:35:26.613
with people, all
built on Firebase

00:35:26.613 --> 00:35:28.812
with little to no server
side code available

00:35:28.812 --> 00:35:30.395
online right now,
if you're interested

00:35:30.395 --> 00:35:32.578
in building [INAUDIBLE]

00:35:32.578 --> 00:35:35.290
And this is the important
part about Firebase.

00:35:35.290 --> 00:35:37.580
We just built this with no
server side [INAUDIBLE].

00:35:37.580 --> 00:35:40.952
We built an entire chat
experience just using Firebase.

00:35:40.952 --> 00:35:42.990
So you can imagine
if we take this

00:35:42.990 --> 00:35:46.330
and we ship it out to
our users, you will never

00:35:46.330 --> 00:35:49.240
get a call in the middle of
the night that says, hey,

00:35:49.240 --> 00:35:50.560
your chat is down.

00:35:50.560 --> 00:35:52.135
Because Firebase is handling it.

00:35:52.135 --> 00:35:55.455
And if something does happen,
if some outage does happen,

00:35:55.455 --> 00:35:58.980
we have a literal squad
of folks whose only

00:35:58.980 --> 00:36:00.826
job is to make sure
things get resolved.

00:36:00.826 --> 00:36:02.200
You won't be waking
up, you won't

00:36:02.200 --> 00:36:03.980
be getting disturbed
during dinner

00:36:03.980 --> 00:36:05.120
because your app is down.

00:36:05.120 --> 00:36:06.828
This is a wonderful
thing about Firebase,

00:36:06.828 --> 00:36:09.204
is once you've built this,
it's ready and it's out there

00:36:09.204 --> 00:36:10.620
and you don't have
to be concerned

00:36:10.620 --> 00:36:13.080
with all those ongoing
maintenance issues.

00:36:13.080 --> 00:36:15.660
You've just got a chat that
works, and works really,

00:36:15.660 --> 00:36:17.707
really well.

00:36:17.707 --> 00:36:18.540
So that's trying it.

00:36:18.540 --> 00:36:19.490
Let's ship it.

00:36:19.490 --> 00:36:21.880
Let's actually get
this into production

00:36:21.880 --> 00:36:26.675
and see how hard it is
to get this to our users.

00:36:26.675 --> 00:36:28.550
LAUREN LONG: So we're
are going to be talking

00:36:28.550 --> 00:36:30.760
about another product,
a fifth one actually,

00:36:30.760 --> 00:36:32.175
called Firebase Hosting.

00:36:32.175 --> 00:36:35.110
So Hosting is how you
get from your test app

00:36:35.110 --> 00:36:38.335
to an app that is
available across the world.

00:36:38.335 --> 00:36:40.210
And normally if you want
to get something out

00:36:40.210 --> 00:36:42.470
onto the internet, you
have to buy a domain,

00:36:42.470 --> 00:36:44.480
have to set up
DNS, you might have

00:36:44.480 --> 00:36:47.440
to wait about 24 hours
for it to propagate,

00:36:47.440 --> 00:36:49.000
and then maybe you can test it.

00:36:49.000 --> 00:36:52.270
If you want an SSL certificate,
that takes extra effort.

00:36:52.270 --> 00:36:55.990
You have to activate it and
integrate it with your website.

00:36:55.990 --> 00:36:58.680
With Firebase, we give
you very simple commands

00:36:58.680 --> 00:37:01.000
you can use right
within your terminal.

00:37:01.000 --> 00:37:03.940
So Firebase init is how you
initialize a Firebase project

00:37:03.940 --> 00:37:05.690
before you start developing.

00:37:05.690 --> 00:37:09.695
Firebase Serve opens up a
local port and a local server

00:37:09.695 --> 00:37:11.355
that you can use
to test your app.

00:37:11.355 --> 00:37:13.440
The really cool thing
about Firebase Serve

00:37:13.440 --> 00:37:15.300
is, even though
it's a local host,

00:37:15.300 --> 00:37:18.400
it talks to your real database
and your real storage packet

00:37:18.400 --> 00:37:22.180
so you can test all those
things while you're developing.

00:37:22.180 --> 00:37:23.680
And when you're
ready for your app

00:37:23.680 --> 00:37:25.870
to be logged into
the real world,

00:37:25.870 --> 00:37:28.960
all you do is Firebase
deploy in your terminal,

00:37:28.960 --> 00:37:31.370
and you get it out
on the internet.

00:37:31.370 --> 00:37:33.420
We give you a domain--

00:37:33.420 --> 00:37:36.560
your app ID dot firebaseapp.com.

00:37:36.560 --> 00:37:38.740
But if you would like to
connect a custom domain,

00:37:38.740 --> 00:37:42.130
you can do that as well.

00:37:42.130 --> 00:37:43.410
So we just shipped it.

00:37:43.410 --> 00:37:44.190
ABE HASKINS: Yeah.

00:37:44.190 --> 00:37:45.606
That was incredibly
easy, compared

00:37:45.606 --> 00:37:48.990
to any other solution for
shipping a product like this.

00:37:48.990 --> 00:37:50.855
Firebase hosting
is absurdly simple.

00:37:50.855 --> 00:37:53.114
And what I love about
our Firebase Hosting,

00:37:53.114 --> 00:37:54.780
I love all of Firebase,
but I especially

00:37:54.780 --> 00:38:00.260
love Firebase Hosting
because of how it came about.

00:38:00.260 --> 00:38:02.490
We did this thing at worked
called Experiment Week,

00:38:02.490 --> 00:38:05.249
and in Experiment Week, we said,
hey build something useful.

00:38:05.249 --> 00:38:07.540
Like we always have roadmaps
where we're planning years

00:38:07.540 --> 00:38:10.432
ahead, but if we want to
take a week to just try

00:38:10.432 --> 00:38:12.390
to build something that
we think might be cool,

00:38:12.390 --> 00:38:15.067
we don't know it's going
to be useful [INAUDIBLE]

00:38:15.067 --> 00:38:17.650
But we wanted to take that week
and try And one week, somebody

00:38:17.650 --> 00:38:19.350
said, you know what I can't do?

00:38:19.350 --> 00:38:21.534
I can't find a place
to put my HTML.

00:38:21.534 --> 00:38:22.950
That sounded like
a silly question

00:38:22.950 --> 00:38:24.700
because there are other
options out there,

00:38:24.700 --> 00:38:26.100
but they didn't
fill these needs.

00:38:26.100 --> 00:38:28.440
They weren't fast enough,
they weren't performant.

00:38:28.440 --> 00:38:31.510
So one of our engineers, Chris,
he went out and he spent a week

00:38:31.510 --> 00:38:35.040
and built a prototype of
Firebase Hosting just for fun.

00:38:35.040 --> 00:38:37.140
And what came out
of that was one

00:38:37.140 --> 00:38:39.310
of the coolest
Firebase products.

00:38:39.310 --> 00:38:42.780
All of Firebase hosting grew
out of that one week experiment.

00:38:42.780 --> 00:38:45.620
And I think this is my
favorite part about Firebase,

00:38:45.620 --> 00:38:47.190
and not only our
internal culture,

00:38:47.190 --> 00:38:50.525
but what we enable people
to do, is to experiment.

00:38:50.525 --> 00:38:53.530
When you don't have to think
about setting authentication

00:38:53.530 --> 00:38:55.905
and you don't have to think
about how to synchronize data

00:38:55.905 --> 00:38:58.154
in real time,you don't have
to have to think about all

00:38:58.154 --> 00:38:59.030
of these things.

00:38:59.030 --> 00:39:02.010
You get an entire
new realm of ideas

00:39:02.010 --> 00:39:04.610
you can implement in a weekend
or you can implement in a week,

00:39:04.610 --> 00:39:06.170
and you can pitch to someone.

00:39:06.170 --> 00:39:08.385
You just get so
many more options,

00:39:08.385 --> 00:39:10.970
and so this is what I encourage
you to go do is try this.

00:39:10.970 --> 00:39:13.260
Go be like Firebase
and experiment,

00:39:13.260 --> 00:39:15.165
play around, and see
what comes out of it.

00:39:15.165 --> 00:39:17.580
You never know what
little idea that Firebase

00:39:17.580 --> 00:39:18.930
enables you to do.

00:39:18.930 --> 00:39:21.391
It's going to become the
next billion dollar business

00:39:21.391 --> 00:39:23.810
because you really can just
do so much more than you've

00:39:23.810 --> 00:39:24.995
ever [INAUDIBLE]

00:39:24.995 --> 00:39:28.440
So with that, I want
to send you back

00:39:28.440 --> 00:39:30.329
to this slide of
the 15 products.

00:39:30.329 --> 00:39:32.370
Now that we have a little
more context, hopefully

00:39:32.370 --> 00:39:34.890
you have some idea about
which ones might interest you.

00:39:34.890 --> 00:39:36.980
Like I said, if you don't
want to use all of them,

00:39:36.980 --> 00:39:37.800
you don't have to.

00:39:37.800 --> 00:39:42.090
If you want to try Analytics
next to your existing solution,

00:39:42.090 --> 00:39:43.044
you can do that, too.

00:39:43.044 --> 00:39:45.210
You have a ton of choices
and a ton of freedom here.

00:39:45.210 --> 00:39:48.990
We don't want to limit
what you want to build.

00:39:48.990 --> 00:39:50.670
You can always check
under documentation

00:39:50.670 --> 00:39:54.070
for fine-grained details
on firebase.google.cn,

00:39:54.070 --> 00:39:54.960
newly launched.

00:39:54.960 --> 00:39:57.690
I believe it was launched today,
so definitely check that out.

00:39:57.690 --> 00:40:00.580
And one aside, if you're
interested in open source code,

00:40:00.580 --> 00:40:02.580
if you want to see what
it's like to build stuff

00:40:02.580 --> 00:40:06.320
inside Google, how we do things,
what it's like to be a Firebase

00:40:06.320 --> 00:40:10.360
developer, we have 90
open source projects

00:40:10.360 --> 00:40:11.690
at Firebase alone.

00:40:11.690 --> 00:40:13.150
Not even the rest of Google.

00:40:13.150 --> 00:40:14.692
If you want to come
check us out, see

00:40:14.692 --> 00:40:16.191
what Lauren's working
on day-to-day,

00:40:16.191 --> 00:40:17.499
there's a ton of open source.

00:40:17.499 --> 00:40:18.915
You can see our
command line post.

00:40:18.915 --> 00:40:19.847
See how we wrote that.

00:40:19.847 --> 00:40:21.930
You can see our framework,
see how we wrote those.

00:40:21.930 --> 00:40:24.080
That's all available
online, open source,

00:40:24.080 --> 00:40:26.150
for you to check out
and build off of.

00:40:26.150 --> 00:40:27.089
Thank you so much.

00:40:27.089 --> 00:40:28.255
It was great talking to you.

00:40:28.255 --> 00:40:34.885
[APPLAUSE]

00:40:34.885 --> 00:40:36.510
With that, we're
going to take a couple

00:40:36.510 --> 00:40:38.520
questions, so anyone
who has questions,

00:40:38.520 --> 00:40:42.544
feel free to yell them out.

00:40:42.544 --> 00:40:44.460
And if you have to be
going, that's fine, too.

00:40:44.460 --> 00:40:46.376
We have just a couple
of minutes for questions

00:40:46.376 --> 00:40:49.260
if anyone has anything
super-pressing.

00:40:49.260 --> 00:40:54.896
[SPEAKING CHINESE]

