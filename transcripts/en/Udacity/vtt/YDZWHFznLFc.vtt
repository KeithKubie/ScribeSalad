WEBVTT
Kind: captions
Language: en

00:00:00.620 --> 00:00:03.730
In addition to defining
the notion of a language itself,

00:00:03.730 --> 00:00:07.270
we want to find some operations on
languages, and establish some notation.

00:00:08.460 --> 00:00:13.150
We'll illustrate using these two
languages over the zero-one alphabet.

00:00:13.150 --> 00:00:18.071
Since languages are sets, we have the
usual operations of union, intersection,

00:00:18.071 --> 00:00:19.135
and complement.

00:00:19.135 --> 00:00:25.869
For example, A union B consists
of these three strings,

00:00:25.869 --> 00:00:31.771
0 from both A and B,
10 from A, and 11 from B.

00:00:31.771 --> 00:00:36.842
The intersection contains only
those strings in both languages,

00:00:36.842 --> 00:00:39.730
just the string 0 here.

00:00:39.730 --> 00:00:41.570
To define the complement of a language,

00:00:41.570 --> 00:00:44.410
we need to make clear what
it is that we're completing.

00:00:44.410 --> 00:00:47.680
It's not sufficient just to say
that it's everything not in A.

00:00:48.750 --> 00:00:49.530
For this particular A,

00:00:49.530 --> 00:00:54.240
that would include strings with
characters besides 0 and 1, or

00:00:54.240 --> 00:00:58.680
maybe even infinite sequences of 0s and
1s, which we don't want.

00:00:58.680 --> 00:01:02.870
The complement, therefore, Is designed
so as to complete the set of all strings

00:01:02.870 --> 00:01:07.170
over the relevant alphabet in
this case the binary alphabet.

00:01:07.170 --> 00:01:09.930
Usually the alphabet over
which the language is defined

00:01:09.930 --> 00:01:12.200
will be clear from context.

00:01:12.200 --> 00:01:16.903
In this case, the complement of A will
be infinite, including the empty string,

00:01:16.903 --> 00:01:17.865
not 0 however.

00:01:17.865 --> 00:01:19.594
It will include 1.

00:01:19.594 --> 00:01:21.093
It will include 00.

00:01:21.093 --> 00:01:23.391
It will include 01.

00:01:23.391 --> 00:01:26.154
It will not include 10 however.

00:01:26.154 --> 00:01:28.418
It will include 11.

00:01:28.418 --> 00:01:33.760
It will include 000, and so on and
so forth for all longer strings.

00:01:34.910 --> 00:01:37.090
In addition to the standard
set operations,

00:01:37.090 --> 00:01:41.080
we also define an operation for
concatenating two languages.

00:01:41.080 --> 00:01:45.880
The concatenation of A and B is just
all strings that you can form by taking

00:01:45.880 --> 00:01:51.300
a string from A, let's say x, and
appending to it a string y from B.

00:01:52.520 --> 00:01:57.460
In our examples, the set AB would be 00,

00:01:57.460 --> 00:02:01.124
the first 0 coming from A and
the second from B.

00:02:01.124 --> 00:02:07.900
011, with the 0 coming from A and
the 11 coming from B and so forth.

00:02:09.130 --> 00:02:12.460
Of course, we can also concatenate
a language with itself

00:02:12.460 --> 00:02:14.050
as I've done here in this example.

00:02:15.100 --> 00:02:18.600
Instead of writing AA,
we often write A squared.

00:02:18.600 --> 00:02:21.800
And in general, when we want to
concatenate the language with itself

00:02:21.800 --> 00:02:25.430
k times, we write A to the k power.

00:02:25.430 --> 00:02:27.320
Note that for k equals 0,

00:02:27.320 --> 00:02:31.840
this is defined as the language
containing exactly the empty string.

00:02:31.840 --> 00:02:35.400
When we want to concatenate any number
of strings from the language together

00:02:35.400 --> 00:02:40.160
to form a new language,
we use an operator known as Kleene star.

00:02:40.160 --> 00:02:45.150
This can be thought of as the union of
all possible powers of the language.

00:02:45.150 --> 00:02:48.480
When we want to exclude the empty
string, we use the plus

00:02:48.480 --> 00:02:53.635
operator instead, which insists that
at least one string from A be used.

00:02:53.635 --> 00:02:56.550
Notice the difference in
the starting indices.

00:02:56.550 --> 00:02:59.480
So, for example,
this string here is in A.

00:03:00.600 --> 00:03:06.010
There's a way that I can break it up so
that each part is in the language A.

00:03:06.010 --> 00:03:10.450
Note that A* doesn't include
infinite sequences of symbols.

00:03:10.450 --> 00:03:14.410
Each individual string from
a must be a finite length, and

00:03:14.410 --> 00:03:18.230
you're only allowed to concatenate
a finite number of those together.

00:03:18.230 --> 00:03:20.130
For those who have studied
regular expressions,

00:03:20.130 --> 00:03:22.080
this should seem quite familiar.

00:03:22.080 --> 00:03:23.730
In fact, one gets the notation for

00:03:23.730 --> 00:03:27.419
regular expressions by treating
individual symbols as languages.

00:03:27.419 --> 00:03:32.525
For example, 0* is the set of all
strings consisting entirely of 0s.

00:03:33.560 --> 00:03:35.925
We'll also commonly refer to sigma*,

00:03:35.925 --> 00:03:38.455
meaning all possible strings
over the alphabet sigma.

