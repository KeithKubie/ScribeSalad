WEBVTT
Kind: captions
Language: en

00:00:19.000 --> 00:00:19.350
Hi.

00:00:19.350 --> 00:00:20.360
Welcome.

00:00:20.360 --> 00:00:21.070
I'm Vijay Menon.

00:00:21.070 --> 00:00:23.410
I'm from the Dart team at
Google, and I'm going to be

00:00:23.410 --> 00:00:27.740
talking about Dart JavaScript
Interoperability.

00:00:27.740 --> 00:00:31.680
So Dart is a new programming
language that we're

00:00:31.680 --> 00:00:32.820
developing at Google.

00:00:32.820 --> 00:00:36.830
It's designed for structured
programming for the web, for

00:00:36.830 --> 00:00:40.315
writing large scale web
applications, and it runs on

00:00:40.315 --> 00:00:43.210
all modern browsers via
compilation to JavaScript, as

00:00:43.210 --> 00:00:46.250
well as Dartium, a developer
version of Chromium where we

00:00:46.250 --> 00:00:48.290
have native Dart support.

00:00:48.290 --> 00:00:49.780
I'm not going to talk
a lot in this

00:00:49.780 --> 00:00:51.460
presentation about Dart itself.

00:00:51.460 --> 00:00:55.600
You can get a lot of general
information at dartlang.org.

00:00:55.600 --> 00:00:57.900
So please take a look there.

00:00:57.900 --> 00:01:00.670
In this talk, I'm going to
be talking about Dart and

00:01:00.670 --> 00:01:01.970
JavaScript.

00:01:01.970 --> 00:01:05.390
So as I said just before, Dart
compiles to JavaScript.

00:01:05.390 --> 00:01:07.280
That lets us run Dart
applications on

00:01:07.280 --> 00:01:08.150
all existing browsers.

00:01:08.150 --> 00:01:10.160
But one of the questions that
we've been asked from the

00:01:10.160 --> 00:01:14.990
start is, how do I mix Dart
code, my new Dart code, with

00:01:14.990 --> 00:01:16.420
existing JavaScript code?

00:01:16.420 --> 00:01:17.940
How do I use existing
libraries like

00:01:17.940 --> 00:01:20.760
Google Maps and so on?

00:01:20.760 --> 00:01:22.680
And I'm going to talk about
how you can do that today.

00:01:22.680 --> 00:01:25.230
I'm going to give you examples
of how you can call existing

00:01:25.230 --> 00:01:28.940
JavaScript, like Google Maps
or so on, from your Dart

00:01:28.940 --> 00:01:30.460
application.

00:01:30.460 --> 00:01:32.980
I'm going to show you how you
can invoke Dart code from

00:01:32.980 --> 00:01:33.640
JavaScript.

00:01:33.640 --> 00:01:37.300
I'll go through an example
with Twitter doing that.

00:01:37.300 --> 00:01:39.460
And I'm going to show
all of this running

00:01:39.460 --> 00:01:42.160
on different places.

00:01:42.160 --> 00:01:44.450
And all of this works today.

00:01:44.450 --> 00:01:47.130
So first, let me just give
you a quick demo

00:01:47.130 --> 00:01:48.710
of what we can do.

00:01:48.710 --> 00:01:51.490
I mentioned Google Maps is one
of the things we want to play

00:01:51.490 --> 00:01:51.850
around with.

00:01:51.850 --> 00:01:55.640
Google Maps is a JavaScript API
that we published, that

00:01:55.640 --> 00:01:58.850
Google publishes, that you can
use, traditionally, from

00:01:58.850 --> 00:02:02.640
JavaScript to write neat map
applications that are tailored

00:02:02.640 --> 00:02:04.130
to your needs.

00:02:04.130 --> 00:02:06.450
And we wanted to be able to do
that in Dart, and we can.

00:02:06.450 --> 00:02:11.400
So here's an example of a simple
app based on one of the

00:02:11.400 --> 00:02:14.180
published examples of
the Google Maps API.

00:02:14.180 --> 00:02:15.250
Everything's written in Dart.

00:02:15.250 --> 00:02:18.910
This is running in Firefox,
by the way.

00:02:18.910 --> 00:02:20.640
And I can manipulate this.

00:02:20.640 --> 00:02:24.280
This happens to have the
different cities that the Dart

00:02:24.280 --> 00:02:25.780
team is based in.

00:02:25.780 --> 00:02:28.380
I'm based in Seattle, but I'm
in Mountain View today.

00:02:28.380 --> 00:02:31.150
So were I to go back, I can
run this little app

00:02:31.150 --> 00:02:33.600
and see my path back.

00:02:33.600 --> 00:02:36.800
If I want to go see my
colleagues in Denmark, well, I

00:02:36.800 --> 00:02:39.760
should probably try flying, but
if I happen to already be

00:02:39.760 --> 00:02:42.520
in London, I can navigate
to that.

00:02:42.520 --> 00:02:44.960
So you get all of the nice
responsiveness, but the code

00:02:44.960 --> 00:02:46.370
is all Dart.

00:02:46.370 --> 00:02:48.980
And again, it runs on Firefox.

00:02:48.980 --> 00:02:56.930
I can show you one other example
here on my Nexus 10.

00:02:56.930 --> 00:03:00.220
Where here we're running on
Android, and if I open up the

00:03:00.220 --> 00:03:05.260
browser here, you can see the
same application running here

00:03:05.260 --> 00:03:08.770
as well, where I can go ahead
and navigate and everything

00:03:08.770 --> 00:03:09.260
just works.

00:03:09.260 --> 00:03:11.750
And again, this is a pure Dart
program that's interfacing

00:03:11.750 --> 00:03:13.200
with a JavaScript API.

00:03:13.200 --> 00:03:16.950
In this case, running
on Android.

00:03:16.950 --> 00:03:19.030
So how does this work?

00:03:19.030 --> 00:03:21.550
Well, I will show you
Maps in a little bit

00:03:21.550 --> 00:03:22.800
more detail in a bit.

00:03:22.800 --> 00:03:26.720
But first, I want to start with
a simpler example but

00:03:26.720 --> 00:03:28.100
also using a real API.

00:03:28.100 --> 00:03:31.330
So this is the Google Charts
API, which lets me draw graphs

00:03:31.330 --> 00:03:33.920
and so on on my web page.

00:03:33.920 --> 00:03:38.860
And it's a pretty big API, but
we're just going to focus on

00:03:38.860 --> 00:03:40.020
some fairly simple things.

00:03:40.020 --> 00:03:42.950
So as a Dart programmer, there
just happens to be a few

00:03:42.950 --> 00:03:45.120
JavaScript APIs I'd like
to get access to.

00:03:45.120 --> 00:03:50.260
I'd like to be able to, first of
all, put the Charts API on

00:03:50.260 --> 00:03:50.840
my web page.

00:03:50.840 --> 00:03:52.640
And then I'd like to be
able to access it.

00:03:52.640 --> 00:03:56.900
And when you load up this
module, it loads into the page

00:03:56.900 --> 00:04:01.130
as JavaScript context, this
JavaScript variable called

00:04:01.130 --> 00:04:02.160
google.visualization.

00:04:02.160 --> 00:04:05.190
And that, essentially, is the
entry point to all of the

00:04:05.190 --> 00:04:07.850
JavaScript APIs dealing
with Charts.

00:04:07.850 --> 00:04:10.050
And the ones that we're
interested in, in particular,

00:04:10.050 --> 00:04:12.690
we're going to do a
bubble chart here.

00:04:12.690 --> 00:04:15.410
There's a class BubbleChart we'd
like to instantiate using

00:04:15.410 --> 00:04:17.459
the constructor that
you can see here.

00:04:17.459 --> 00:04:19.500
And there's also a Draw function
where we can actually

00:04:19.500 --> 00:04:21.660
feed it data that we want.

00:04:21.660 --> 00:04:24.150
And there's also another
function that lets us

00:04:24.150 --> 00:04:27.830
essentially massage data into
a format that is acceptable

00:04:27.830 --> 00:04:29.660
for the Charts API.

00:04:29.660 --> 00:04:33.830
So let's quickly see
what it looks like.

00:04:33.830 --> 00:04:37.260
This is actually the web page
that we're going to render.

00:04:37.260 --> 00:04:41.080
It's essentially setting up all
this data from Dart and

00:04:41.080 --> 00:04:44.510
configuring it on the web page
using the Charts API.

00:04:44.510 --> 00:04:46.450
So let's take a look at
how that was done.

00:04:46.450 --> 00:04:50.510
Here I'm in the Dart Editor,
and this is the HTML file.

00:04:50.510 --> 00:04:54.770
And we're including the Google
JavaScript APIs down here in

00:04:54.770 --> 00:04:55.790
this first script.

00:04:55.790 --> 00:05:00.510
That's a JavaScript script
and loading the JS API.

00:05:00.510 --> 00:05:03.990
And our entire user level
program is just in this Dart

00:05:03.990 --> 00:05:06.380
script, bubblechart.dart.

00:05:06.380 --> 00:05:09.450
And so there's no other
JavaScript code

00:05:09.450 --> 00:05:10.400
that we had to write.

00:05:10.400 --> 00:05:14.840
We could just use the JavaScript
APIs directly from

00:05:14.840 --> 00:05:16.650
our bubble chart example.

00:05:16.650 --> 00:05:20.710
So here I'm in Dart code, and
the work is mainly done by

00:05:20.710 --> 00:05:23.420
this function called
drawVisualization.

00:05:23.420 --> 00:05:27.290
So this is essentially what gets
launched when the Charts

00:05:27.290 --> 00:05:30.740
API's available, and I can go
ahead and populate the data.

00:05:30.740 --> 00:05:32.950
So to show how it works, what
I'm going do is actually step

00:05:32.950 --> 00:05:35.820
through this program
using the editor.

00:05:35.820 --> 00:05:37.500
So I'm running here.

00:05:37.500 --> 00:05:40.410
I'm launching an instance
of Dartium.

00:05:40.410 --> 00:05:45.040
And so this is actually Dart
running natively on our

00:05:45.040 --> 00:05:46.790
special version of Chromium.

00:05:46.790 --> 00:05:50.130
But JS Interop works here well
too, and I get the nice

00:05:50.130 --> 00:05:52.920
features of being able to step
through the browser.

00:05:52.920 --> 00:05:55.510
So here I've called
drawVisualization, and I've

00:05:55.510 --> 00:05:57.220
set a break point over here.

00:05:57.220 --> 00:06:00.530
And the first thing I want to
show attention to is first of

00:06:00.530 --> 00:06:03.850
all, before, at the very top,
in order to use JS Interop,

00:06:03.850 --> 00:06:06.850
I'm just importing this
package js.dart.

00:06:06.850 --> 00:06:08.905
And I'm prefixing it with JS.

00:06:08.905 --> 00:06:12.640
So you'll see calls to JS dot
something or other throughout

00:06:12.640 --> 00:06:13.470
this program.

00:06:13.470 --> 00:06:17.650
Those are calls to the
JavaScript Interop library.

00:06:17.650 --> 00:06:20.610
So the very first thing I do
in drawVisualization is,

00:06:20.610 --> 00:06:23.210
remember, I mentioned
google.visualization is a

00:06:23.210 --> 00:06:26.160
JavaScript package
that's loaded?

00:06:26.160 --> 00:06:30.230
We can get a handle to that
from the Dart side by just

00:06:30.230 --> 00:06:33.250
calling js.context.googl
e.visualization.

00:06:33.250 --> 00:06:37.150
What js.contest is, is it's
essentially a proxy, a handle

00:06:37.150 --> 00:06:42.370
to the global Dart context
of our web page.

00:06:42.370 --> 00:06:45.010
And off of that context, I can
now access anything, for

00:06:45.010 --> 00:06:47.050
example, Google Visualization.

00:06:47.050 --> 00:06:48.660
And I'm just storing
that in the local

00:06:48.660 --> 00:06:50.440
variable here called gviz.

00:06:50.440 --> 00:06:52.670
Now, if you look at the panel
over here, on the right you

00:06:52.670 --> 00:06:55.440
can see that the type
of gviz is proxy.

00:06:55.440 --> 00:06:59.060
Proxy's a type provided
by the JS library.

00:06:59.060 --> 00:07:01.990
So we get some sort of type
information, and that tells us

00:07:01.990 --> 00:07:04.900
that this is a proxy to a
JavaScript object that we can

00:07:04.900 --> 00:07:06.200
interact with.

00:07:06.200 --> 00:07:07.960
So let's step through
this program.

00:07:07.960 --> 00:07:09.960
So the very first thing we're
going to do is we actually

00:07:09.960 --> 00:07:12.740
have data that we want to
feed into the Chart.

00:07:12.740 --> 00:07:15.120
And we're creating
a regular Dart

00:07:15.120 --> 00:07:16.840
array here called listData.

00:07:16.840 --> 00:07:19.070
So if I just step over that,
you can see over here that

00:07:19.070 --> 00:07:21.590
listData is of type array.

00:07:21.590 --> 00:07:23.420
It's a regular Dart array.

00:07:23.420 --> 00:07:27.110
Now, to feed it over to the
JavaScript side, I actually

00:07:27.110 --> 00:07:30.570
need to convert the Dart array
to a JavaScript array, and

00:07:30.570 --> 00:07:31.820
that's very easy.

00:07:31.820 --> 00:07:34.530
I can just call this function
called js.array.

00:07:34.530 --> 00:07:37.230
And if I step through this,
you'll see while listData has

00:07:37.230 --> 00:07:46.270
the type array, arrayData is a
proxy to a JavaScript array.

00:07:46.270 --> 00:07:48.750
I'm kind of breaking this up
into steps, but actually what

00:07:48.750 --> 00:07:51.950
the Visualization Charts library
want you to do is

00:07:51.950 --> 00:07:56.520
convert your array, now, to a
data table that it can use

00:07:56.520 --> 00:07:57.770
with Charts.

00:07:57.770 --> 00:08:00.930
And so one more step here
is actually to call

00:08:00.930 --> 00:08:01.920
array to data table.

00:08:01.920 --> 00:08:04.220
That's another one of the APIs
that we want to use.

00:08:04.220 --> 00:08:09.180
And again, gviz is our handle
into the Visualization API.

00:08:09.180 --> 00:08:10.920
So we call this JavaScript
function

00:08:10.920 --> 00:08:12.410
arrayToDataTable here.

00:08:12.410 --> 00:08:17.220
We pass it in a proxy to a
JavaScript array, and what we

00:08:17.220 --> 00:08:19.730
get out is a proxy
to tableData.

00:08:19.730 --> 00:08:23.510
And you can see the type of
tableData is also a proxy.

00:08:23.510 --> 00:08:25.840
And so similarly, we
can create a map.

00:08:25.840 --> 00:08:29.470
So configuration options for a
chart are a JavaScript map,

00:08:29.470 --> 00:08:32.630
and we can easily create a
JavaScript map from a Dart map

00:08:32.630 --> 00:08:36.070
by just wrapping it
in js.map here.

00:08:36.070 --> 00:08:45.860
And now, we have options
that is also a proxy.

00:08:45.860 --> 00:08:47.510
So I showed two ways
of creating

00:08:47.510 --> 00:08:48.280
these proxies already.

00:08:48.280 --> 00:08:51.150
One, you could take an existing
Dart list and convert

00:08:51.150 --> 00:08:52.440
that to a JavaScript array.

00:08:52.440 --> 00:08:54.750
You could take an existing Dart
map and convert that to a

00:08:54.750 --> 00:08:55.790
JavaScript map.

00:08:55.790 --> 00:08:56.930
But sometimes you
want to actually

00:08:56.930 --> 00:08:58.090
instantiate a new object.

00:08:58.090 --> 00:09:02.260
So again, going back to the
Chart API, we want to invoke

00:09:02.260 --> 00:09:03.800
the bubble chart constructor
so we can

00:09:03.800 --> 00:09:05.350
create a bubble chart.

00:09:05.350 --> 00:09:09.770
And this syntax shows you how
you can use js.Proxy and

00:09:09.770 --> 00:09:12.580
create a new one, essentially,
given a JavaScript

00:09:12.580 --> 00:09:16.330
constructor, BubbleChart, and
an element on the DOM.

00:09:16.330 --> 00:09:17.970
So we're just looking
up an element.

00:09:17.970 --> 00:09:20.880
We're creating a bubble chart
with that element.

00:09:20.880 --> 00:09:27.190
And what we get back, again, is
another proxy to the chart

00:09:27.190 --> 00:09:28.320
in JavaScript.

00:09:28.320 --> 00:09:30.920
And now, we can manipulate
that pretty naturally.

00:09:30.920 --> 00:09:36.310
We can go ahead and draw the
data onto the chart that we've

00:09:36.310 --> 00:09:37.310
got all set up here.

00:09:37.310 --> 00:09:42.360
So I'm just going to continue,
and we can go ahead and look

00:09:42.360 --> 00:09:43.970
at Dartium, and we see
the same exact

00:09:43.970 --> 00:09:46.220
thing that we saw earlier.

00:09:46.220 --> 00:09:47.460
But now this is running
in Dartium.

00:09:47.460 --> 00:09:49.220
And again, here we're
mixing Dart and

00:09:49.220 --> 00:09:52.340
JavaScript code in Dartium.

00:09:52.340 --> 00:09:53.710
Just below here you can see--

00:09:53.710 --> 00:09:57.640
I'll show some more examples
here-- but the Google API

00:09:57.640 --> 00:09:59.780
actually provides many
things beyond Charts.

00:09:59.780 --> 00:10:01.770
And so you can actually see a
little bit more here that

00:10:01.770 --> 00:10:05.250
we're using to actually lazily
load the Visualization part of

00:10:05.250 --> 00:10:12.710
the Google API from Dart and
asking for the core Chart

00:10:12.710 --> 00:10:16.030
packages which actually
contains bubble chart.

00:10:16.030 --> 00:10:19.300
And we're also setting up
this callback here for

00:10:19.300 --> 00:10:20.390
drawVisualization.

00:10:20.390 --> 00:10:23.820
So this new js.Callback, and
I'll go into a little bit more

00:10:23.820 --> 00:10:28.020
detail on this in a moment,
is actually constructing a

00:10:28.020 --> 00:10:30.670
JavaScript callback that
forwards to our

00:10:30.670 --> 00:10:32.300
Dart function here.

00:10:32.300 --> 00:10:36.410
So this is what it allows the
Dart program to call back into

00:10:36.410 --> 00:10:38.950
JavaScript.

00:10:38.950 --> 00:10:39.830
Great.

00:10:39.830 --> 00:10:42.190
So that shows an
example again.

00:10:42.190 --> 00:10:45.340
Here's a recap of that API.

00:10:45.340 --> 00:10:48.070
One other example, very simple
example, I want to show where

00:10:48.070 --> 00:10:51.040
we can pick up on callback is
a very special use case we

00:10:51.040 --> 00:10:53.740
often get asked about
is JSONP.

00:10:53.740 --> 00:10:57.240
Now, that's the ability to make
a request to a server and

00:10:57.240 --> 00:11:00.140
have it send data in a format
that can be launched via

00:11:00.140 --> 00:11:00.760
JavaScript.

00:11:00.760 --> 00:11:02.390
And it's something that's--

00:11:02.390 --> 00:11:04.860
it's a convention that's
used by a lot of APIs.

00:11:04.860 --> 00:11:06.850
Twitter uses it.

00:11:06.850 --> 00:11:09.310
And we want to make that
work with Dart.

00:11:09.310 --> 00:11:12.710
And we can use Dart JS Interop
to make that work.

00:11:12.710 --> 00:11:16.680
So let me show you our
Twitter example here.

00:11:16.680 --> 00:11:18.440
And it's very, very simple.

00:11:18.440 --> 00:11:20.670
In this case, all we need to
do, again, is to create a

00:11:20.670 --> 00:11:24.080
callback to a display function,
but we need to give

00:11:24.080 --> 00:11:26.340
it a name in the JavaScript
side.

00:11:26.340 --> 00:11:30.350
So I showed on the last example
how you could read

00:11:30.350 --> 00:11:32.170
stuff off of the JavaScript
context.

00:11:32.170 --> 00:11:35.980
So for example, we had
js.context.google.visualization

00:11:35.980 --> 00:11:37.460
in the last example.

00:11:37.460 --> 00:11:40.480
Here you can see there's
also writables.

00:11:40.480 --> 00:11:43.930
So what this is actually going
to do is create a top level

00:11:43.930 --> 00:11:47.900
JavaScript variable, function
display, that's going to

00:11:47.900 --> 00:11:49.590
forward to a Dart callback.

00:11:49.590 --> 00:11:52.780
Callback here is creating
a callback out of a Dart

00:11:52.780 --> 00:11:55.530
function that's usable
in JavaScript.

00:11:55.530 --> 00:11:57.830
And once we have that,
everything else is easy.

00:11:57.830 --> 00:12:00.250
We've set up this callback in
JavaScript that forwards back

00:12:00.250 --> 00:12:04.720
to Dart, and now we can do the
standard JSONP of inserting a

00:12:04.720 --> 00:12:06.660
request into our document.

00:12:06.660 --> 00:12:08.670
And in this case, we're
going to Twitter.

00:12:08.670 --> 00:12:11.960
We're making a search query
on Twitter about

00:12:11.960 --> 00:12:14.330
things to do with Dart.

00:12:14.330 --> 00:12:17.880
We're getting 20 items back,
and we're asking Twitter to

00:12:17.880 --> 00:12:20.680
insert a callback to our
display function when

00:12:20.680 --> 00:12:22.650
the data comes in.

00:12:22.650 --> 00:12:28.310
And when the data comes in,
display is fired off from

00:12:28.310 --> 00:12:31.190
JavaScript, which ends up
forwarding to the Dart

00:12:31.190 --> 00:12:32.170
function here.

00:12:32.170 --> 00:12:33.450
And again, we'll step through.

00:12:33.450 --> 00:12:36.780
And even though this is
instantiated from the

00:12:36.780 --> 00:12:40.010
JavaScript side, we can step
through the Dart code in the

00:12:40.010 --> 00:12:40.990
editor here.

00:12:40.990 --> 00:12:44.070
And so now, we've made this
request to Twitter.

00:12:44.070 --> 00:12:45.120
It's come back.

00:12:45.120 --> 00:12:48.210
We're in display, which
is Dart code here.

00:12:48.210 --> 00:12:52.810
And data here is a proxy, as
we've seen before with other

00:12:52.810 --> 00:12:54.310
things that we got
the JavaScript.

00:12:54.310 --> 00:12:56.060
But we can manipulate
it pretty easily.

00:12:56.060 --> 00:12:58.580
So for example, we can get the
results out of it, which is

00:12:58.580 --> 00:12:59.880
another proxy object.

00:12:59.880 --> 00:13:00.840
We can get the length.

00:13:00.840 --> 00:13:04.090
In this case, it's a primitive
type, so we can actually type

00:13:04.090 --> 00:13:07.330
that as an integer, and we see
that we get a length of 20.

00:13:07.330 --> 00:13:08.780
We asked for 20 results.

00:13:08.780 --> 00:13:10.090
We got 20 results.

00:13:10.090 --> 00:13:13.270
And we can just iterate over
this fairly naturally now.

00:13:13.270 --> 00:13:14.870
So for example, we
can go ahead and

00:13:14.870 --> 00:13:17.350
get the first result.

00:13:17.350 --> 00:13:19.760
We can get the user from the
first result, and that's typed

00:13:19.760 --> 00:13:21.770
as a string.

00:13:21.770 --> 00:13:24.440
So we can see that the name of
the current user-- this is

00:13:24.440 --> 00:13:28.290
live data coming from Twitter so
I don't know what's on the

00:13:28.290 --> 00:13:29.580
page at this point.

00:13:29.580 --> 00:13:33.400
Linkify is just a Dart-specific
function that is

00:13:33.400 --> 00:13:37.180
essentially just processing
that text to put some nice

00:13:37.180 --> 00:13:38.350
links in there.

00:13:38.350 --> 00:13:39.420
And we get that result.

00:13:39.420 --> 00:13:42.190
And now we can render it on our
web page via Dart using

00:13:42.190 --> 00:13:46.630
some nice features in Dart's
HTML API that essentially let

00:13:46.630 --> 00:13:51.510
us very naturally build together
some HTML from that.

00:13:51.510 --> 00:13:52.480
So let's--

00:13:52.480 --> 00:13:54.720
now this would go ahead and
iterate 19 more times-- but

00:13:54.720 --> 00:13:56.990
let's just go ahead and
jump ahead and see

00:13:56.990 --> 00:13:58.050
what it looks like.

00:13:58.050 --> 00:13:59.610
So here it is.

00:13:59.610 --> 00:14:03.810
We've got the 20 different
Twitter results, and we've got

00:14:03.810 --> 00:14:07.130
what people have been talking
about recently on Twitter

00:14:07.130 --> 00:14:08.370
about Dart.

00:14:08.370 --> 00:14:10.520
And when I ran it this morning,
one of the first

00:14:10.520 --> 00:14:13.810
things I saw was a reference to
our Dart cookbook, which is

00:14:13.810 --> 00:14:17.590
a cool link you can check
out and see stuff there.

00:14:17.590 --> 00:14:21.470
But it's interesting to see
what people are doing.

00:14:21.470 --> 00:14:25.390
So let's go back to
a different--

00:14:25.390 --> 00:14:27.300
let's go back to our
slides here.

00:14:27.300 --> 00:14:31.780
So what we saw here were proxies
going back and forth

00:14:31.780 --> 00:14:33.260
between Dart and JavaScript.

00:14:33.260 --> 00:14:35.490
And these aren't all the
proxies, but here are a couple

00:14:35.490 --> 00:14:37.870
examples just showing what's
going on from our

00:14:37.870 --> 00:14:39.750
Visualization example.

00:14:39.750 --> 00:14:43.730
From our Charts example, we
actually had a Chart object on

00:14:43.730 --> 00:14:46.260
the JavaScript side, but we were
able to create a proxy on

00:14:46.260 --> 00:14:49.380
the Dart side to interact
with it.

00:14:49.380 --> 00:14:52.100
Going the other way, we had
this drawVisualization

00:14:52.100 --> 00:14:54.770
callback as well as the other
display callback in our

00:14:54.770 --> 00:14:57.090
Twitter one, which looks exactly
the same as here.

00:14:57.090 --> 00:14:59.410
And we were able to materialize
that as a proxy on

00:14:59.410 --> 00:15:00.260
the JavaScript side.

00:15:00.260 --> 00:15:02.620
So JavaScript can
call into Dart.

00:15:02.620 --> 00:15:04.800
Dart objects can reach
into JavaScript going

00:15:04.800 --> 00:15:07.940
the other way around.

00:15:07.940 --> 00:15:13.860
So recapping, to create a Dart
proxy to JavaScript, we saw

00:15:13.860 --> 00:15:15.100
three different ways
of doing that.

00:15:15.100 --> 00:15:17.290
First, you can invoke a
JavaScript instructor and

00:15:17.290 --> 00:15:20.090
create a proxy by creating
a new object.

00:15:20.090 --> 00:15:23.590
You can create a new array
given a Dart array.

00:15:23.590 --> 00:15:26.450
You can create a new map
given a Dart map.

00:15:26.450 --> 00:15:28.110
And you can also create
callbacks in

00:15:28.110 --> 00:15:29.810
JavaScript back to Dart.

00:15:29.810 --> 00:15:33.370
And you've noticed the two
syntaxes, Callback.once and

00:15:33.370 --> 00:15:35.950
Callback.many, and I'm going to
talk about that in a bit.

00:15:35.950 --> 00:15:39.180
But they both, essentially,
expose a Dart function to the

00:15:39.180 --> 00:15:41.710
JavaScript side.

00:15:41.710 --> 00:15:42.060
All right.

00:15:42.060 --> 00:15:46.580
Let's get back into a somewhat
more interactive example, the

00:15:46.580 --> 00:15:47.180
Maps example.

00:15:47.180 --> 00:15:49.230
And the Maps example is
interesting because it's more

00:15:49.230 --> 00:15:50.450
of an interactive application.

00:15:50.450 --> 00:15:52.370
I'm running things
many, many times.

00:15:52.370 --> 00:15:55.530
So it actually highlights some
stuff about proxies that you

00:15:55.530 --> 00:15:58.100
need to know about if you're
really pushing the boundaries

00:15:58.100 --> 00:16:00.420
of what JS Interop can do.

00:16:00.420 --> 00:16:03.890
So one of the things you have
to worry about JS Interop is

00:16:03.890 --> 00:16:06.540
memory management because we're
essentially dealing with

00:16:06.540 --> 00:16:07.790
two different heaps.

00:16:07.790 --> 00:16:11.390
And although these look like
pointers from Dart objects to

00:16:11.390 --> 00:16:14.150
JavaScript objects and vice
versa, that's kind of an

00:16:14.150 --> 00:16:16.850
abstraction that we give the
programmer to make it easier

00:16:16.850 --> 00:16:18.030
to write programs.

00:16:18.030 --> 00:16:21.140
What this really looks like
under the hood is you really

00:16:21.140 --> 00:16:23.210
have two disjointed heaps.

00:16:23.210 --> 00:16:25.250
You have a heap of JavaScript
objects over here on the

00:16:25.250 --> 00:16:27.260
right, and you have a
heap of Dart objects

00:16:27.260 --> 00:16:28.630
over here on the left.

00:16:28.630 --> 00:16:31.160
And we're doing the magic under
the hood to make it look

00:16:31.160 --> 00:16:33.820
like you've got references
from one to the other by

00:16:33.820 --> 00:16:36.550
essentially keeping these IDs
around and ensuring that you

00:16:36.550 --> 00:16:38.910
get a consistent mapping
between the two.

00:16:38.910 --> 00:16:42.470
One of the tricky issues here
is memory management.

00:16:42.470 --> 00:16:43.800
I can show that very clearly.

00:16:43.800 --> 00:16:48.210
If you look at this example
here, drawVisualization, for

00:16:48.210 --> 00:16:51.740
example, is a callback, is a
function on the Dart side.

00:16:51.740 --> 00:16:55.670
Now, normally the Dart VM will
garbage collect that out once

00:16:55.670 --> 00:16:57.400
we're no longer using it.

00:16:57.400 --> 00:17:01.000
But in our system, this id2 is
going to keep that call back

00:17:01.000 --> 00:17:06.579
alive forever, unless we
explicitly get rid of it.

00:17:06.579 --> 00:17:07.900
Or implicitly, I should say.

00:17:07.900 --> 00:17:08.599
Sorry.

00:17:08.599 --> 00:17:10.790
Unless we implicitly get rid
of it in some fashion.

00:17:10.790 --> 00:17:14.440
We have to do something either
in the JS Interop layer or the

00:17:14.440 --> 00:17:15.730
developer layer.

00:17:15.730 --> 00:17:19.680
So the Dart garbage collector
only sees Dart objects is

00:17:19.680 --> 00:17:21.130
essentially what the
problem is here.

00:17:21.130 --> 00:17:22.869
And the JavaScript garbage
collector only sees

00:17:22.869 --> 00:17:23.390
JavaScript.

00:17:23.390 --> 00:17:27.730
So we need to do something to
help these manage memory.

00:17:27.730 --> 00:17:33.550
So to show exactly the issues
here, let me go back to our

00:17:33.550 --> 00:17:35.610
Maps example.

00:17:35.610 --> 00:17:41.250
So Maps is a somewhat more
interesting example in that

00:17:41.250 --> 00:17:42.940
it's again, more interactive.

00:17:42.940 --> 00:17:46.120
As I showed you, you can
do many things with it.

00:17:46.120 --> 00:17:48.990
You can interact and do multiple
steps with this, not

00:17:48.990 --> 00:17:51.540
just one setting something
up and displaying it.

00:17:51.540 --> 00:17:54.460
So let's just walk through this
code really quickly, and

00:17:54.460 --> 00:17:56.770
then we can see it running.

00:17:56.770 --> 00:17:59.090
So first of all, Main is
the entry point here.

00:17:59.090 --> 00:18:02.650
And you'll notice like before
I have, instead of

00:18:02.650 --> 00:18:05.060
google.visualization,
I have google.maps.

00:18:05.060 --> 00:18:09.130
And js.context.google.maps is
giving me the proxy to the

00:18:09.130 --> 00:18:10.430
Maps object.

00:18:10.430 --> 00:18:14.780
But I want to use this Maps
object across multiple events.

00:18:14.780 --> 00:18:19.110
So what I have to
do is retain it.

00:18:19.110 --> 00:18:22.240
Now, if I don't retain this,
I'm essentially going to go

00:18:22.240 --> 00:18:23.560
ahead and collect it.

00:18:23.560 --> 00:18:25.400
Or the JS Interop layer is going
to go ahead and collect

00:18:25.400 --> 00:18:26.080
it at the end.

00:18:26.080 --> 00:18:27.970
It's going to de-allocate
all those handles so

00:18:27.970 --> 00:18:29.460
it can clear memory.

00:18:29.460 --> 00:18:32.590
So if I don't retain
it, I'll be able to

00:18:32.590 --> 00:18:33.720
use it in this method.

00:18:33.720 --> 00:18:36.730
But in some callback that
happens at some later point,

00:18:36.730 --> 00:18:38.520
it will be an invalid proxy.

00:18:38.520 --> 00:18:40.260
So retain keeps it around.

00:18:40.260 --> 00:18:43.460
And you'll notice this pattern
here of I have these global

00:18:43.460 --> 00:18:45.740
variables, maps,
directionsDisplay,

00:18:45.740 --> 00:18:46.940
directionsService.

00:18:46.940 --> 00:18:49.320
I want to use retain to make
sure that those global

00:18:49.320 --> 00:18:53.170
variables are valid beyond
a single event.

00:18:53.170 --> 00:18:55.600
So you can see here
that, again, I'm

00:18:55.600 --> 00:18:59.700
creating a map of options.

00:18:59.700 --> 00:19:03.840
So to create the options, I
populate it with this map.

00:19:03.840 --> 00:19:05.150
I can use--

00:19:05.150 --> 00:19:09.230
again, Maps here is referring
to the API.

00:19:09.230 --> 00:19:12.240
I can use ROADMAP to indicate
what kind of map.

00:19:12.240 --> 00:19:14.710
I can create a
latitude/longitude object,

00:19:14.710 --> 00:19:16.020
feed this all in.

00:19:16.020 --> 00:19:18.040
I don't have to use retain here
because these are all

00:19:18.040 --> 00:19:23.120
just used in the process of
constructing one Google map.

00:19:23.120 --> 00:19:26.810
This is the call to construct
a map on a

00:19:26.810 --> 00:19:28.350
certain canvas element.

00:19:28.350 --> 00:19:31.510
And then, display is a component
that actually

00:19:31.510 --> 00:19:32.680
displays the results.

00:19:32.680 --> 00:19:35.850
And that's updated
interactively, so I need to go

00:19:35.850 --> 00:19:37.290
ahead and retain that.

00:19:37.290 --> 00:19:38.960
That's one of my other
global variables.

00:19:38.960 --> 00:19:42.720
I'm using this across events,
so I need to retain it.

00:19:42.720 --> 00:19:45.820
And then finally,
directionsService is actually

00:19:45.820 --> 00:19:50.150
the bridge in the Maps
JavaScript API that goes and

00:19:50.150 --> 00:19:52.750
talks to Google servers and
actually gets the directions

00:19:52.750 --> 00:19:53.480
information.

00:19:53.480 --> 00:19:56.290
So again, we're going through
the JavaScript APIs, se we

00:19:56.290 --> 00:19:59.430
need to initialize this service,
and we need to retain

00:19:59.430 --> 00:20:04.200
it so we can use it
for new queries.

00:20:04.200 --> 00:20:08.210
So we're essentially setting up
our handlers here so when I

00:20:08.210 --> 00:20:12.200
go from Seattle to Mountain View
or Portland or whatever,

00:20:12.200 --> 00:20:13.960
it initiates a new request.

00:20:13.960 --> 00:20:17.010
So it's going to calculate
a route.

00:20:17.010 --> 00:20:20.070
It's going to figure out the
start and end based on the

00:20:20.070 --> 00:20:21.880
options I've given it.

00:20:21.880 --> 00:20:24.910
And it's going to
route a request.

00:20:24.910 --> 00:20:29.140
And again, the request here
is initiating a callback.

00:20:29.140 --> 00:20:33.380
So I'm calling into JavaScript
and saying, when this request

00:20:33.380 --> 00:20:36.670
is done, call back this
Dart function.

00:20:36.670 --> 00:20:39.620
And I use js.Callback.many
to set it up.

00:20:39.620 --> 00:20:42.120
And it's an anonymous
closure in here.

00:20:42.120 --> 00:20:43.690
So I don't actually have
to allocate a function.

00:20:43.690 --> 00:20:47.110
I can do this nicely in line,
which essentially says in Dart

00:20:47.110 --> 00:20:50.260
code, OK, when the request comes
back, well, either it's

00:20:50.260 --> 00:20:55.030
OK and I'm going to go ahead and
display the directions, or

00:20:55.030 --> 00:20:56.190
I wasn't able to compute.

00:20:56.190 --> 00:20:57.980
These are different continents,
and it's going to

00:20:57.980 --> 00:21:00.490
suggest that you fly instead.

00:21:00.490 --> 00:21:06.300
So let's go ahead and run
this from Dartium.

00:21:06.300 --> 00:21:09.430
It's the same app I showed you
before on both the Android

00:21:09.430 --> 00:21:11.370
device and Firefox.

00:21:11.370 --> 00:21:14.240
And here I'm starting
in Seattle.

00:21:14.240 --> 00:21:15.820
I go down to Portland.

00:21:15.820 --> 00:21:18.170
So notice that these are
different events.

00:21:18.170 --> 00:21:20.500
So every time I'm doing this,
I'm actually clearing out

00:21:20.500 --> 00:21:25.470
proxies and then allocating new
ones to make a new call.

00:21:25.470 --> 00:21:28.780
Now, in this case, you'll notice
everything's working as

00:21:28.780 --> 00:21:31.610
usual, but I have this
print message here.

00:21:31.610 --> 00:21:33.770
And it's calling this function
called proxyCount count.

00:21:33.770 --> 00:21:37.330
And that's more of a debugging
tool for you to tell if you're

00:21:37.330 --> 00:21:40.200
using this app in more of
an interactive way.

00:21:40.200 --> 00:21:42.620
If you're using this library in
a more interactive way, it

00:21:42.620 --> 00:21:45.650
tells you, essentially, how
much is live and whether

00:21:45.650 --> 00:21:47.840
you're leaking proxies.

00:21:47.840 --> 00:21:49.760
And you can see here that
the first time I

00:21:49.760 --> 00:21:51.170
called it, it was six.

00:21:51.170 --> 00:21:53.340
The next time I called
it, it was seven.

00:21:53.340 --> 00:21:57.900
Let's go ahead and do this
a few more times.

00:21:57.900 --> 00:22:03.370
We'll go from Denmark to Germany
to St. Petersburg.

00:22:03.370 --> 00:22:06.260
Now, every time I call this, I
see that the number of live

00:22:06.260 --> 00:22:09.420
proxies is increasing, so that
should be a warning sign.

00:22:09.420 --> 00:22:12.380
And in fact, I talked about
Callback.once and

00:22:12.380 --> 00:22:13.870
Callback.many.

00:22:13.870 --> 00:22:17.030
That's a tool here that you can
use to manage the proxies.

00:22:17.030 --> 00:22:19.750
Now, it turns out the difference
between this is

00:22:19.750 --> 00:22:22.530
that Callback.once is
essentially telling the

00:22:22.530 --> 00:22:24.090
system, I have a callback.

00:22:24.090 --> 00:22:25.960
It's only allocated--

00:22:25.960 --> 00:22:27.770
It's only invoked once.

00:22:27.770 --> 00:22:30.770
Callbacks, by definition, have
to live across events, so we

00:22:30.770 --> 00:22:32.380
don't clean them up
automatically.

00:22:32.380 --> 00:22:35.640
But if you do Callback.once, it
will fire once, and it will

00:22:35.640 --> 00:22:36.850
clean itself up.

00:22:36.850 --> 00:22:41.260
If you do Callback.many, it will
create that callback, and

00:22:41.260 --> 00:22:42.320
it will persist.

00:22:42.320 --> 00:22:44.880
So it's essentially a callback
that you might

00:22:44.880 --> 00:22:46.840
call many, many times.

00:22:46.840 --> 00:22:49.780
In this particular case, every
time I make a new request,

00:22:49.780 --> 00:22:53.790
every time I have a different
pair of cities, I'm making a

00:22:53.790 --> 00:22:55.420
new request with
a new callback.

00:22:55.420 --> 00:22:57.530
So I'm creating a callback
every time.

00:22:57.530 --> 00:22:59.940
And because I'm using
Callback.many, I have an extra

00:22:59.940 --> 00:23:01.870
proxy running every time.

00:23:01.870 --> 00:23:05.090
But in this case, this callback
only gets invoked

00:23:05.090 --> 00:23:10.530
once, so I can go ahead
and make this once.

00:23:10.530 --> 00:23:13.580
So even though the number of
live proxies is increasing

00:23:13.580 --> 00:23:16.450
very slowly, so unless you're
running this app for a long,

00:23:16.450 --> 00:23:18.840
long time, you wouldn't
necessarily notice this.

00:23:18.840 --> 00:23:21.500
We build large scale
apps that will--

00:23:21.500 --> 00:23:24.420
we want to be able to run these
apps for weeks and weeks

00:23:24.420 --> 00:23:26.820
without causing issues
in the browser.

00:23:26.820 --> 00:23:29.190
And so if you're writing that
kind of app, you really do

00:23:29.190 --> 00:23:30.790
want to make sure you don't
have these kind of leaks.

00:23:30.790 --> 00:23:34.970
And again, here, by using once,
we can get the effect we

00:23:34.970 --> 00:23:38.670
want even in this very
interactive application and

00:23:38.670 --> 00:23:39.630
clean up after ourselves.

00:23:39.630 --> 00:23:41.310
And in this case, we
have a nice small

00:23:41.310 --> 00:23:43.030
constant number of proxies.

00:23:43.030 --> 00:23:44.280
And that's what we
want to see.

00:23:44.280 --> 00:23:49.880
We want to see, as we use this
app, the number of proxies is

00:23:49.880 --> 00:23:51.620
some small constant.

00:23:51.620 --> 00:23:53.130
And in this case, 6.

00:23:53.130 --> 00:23:55.370
And, therefore, we know that
we're not leaking.

00:23:55.370 --> 00:23:56.690
Great.

00:23:56.690 --> 00:23:59.910
So again, the takeaway from this
is you do need to think a

00:23:59.910 --> 00:24:02.250
little bit about managing memory
carefully if you have

00:24:02.250 --> 00:24:03.830
an interactive application.

00:24:03.830 --> 00:24:06.930
You can keep a proxy alive
with js.retain.

00:24:06.930 --> 00:24:09.290
You can release it when you're
done with js.release.

00:24:09.290 --> 00:24:13.670
So the common pattern is you
have globals or such.

00:24:13.670 --> 00:24:16.690
We have single versus multiple
execution callback, so

00:24:16.690 --> 00:24:21.370
js.Callback.once, and this
should be js.Callback.many for

00:24:21.370 --> 00:24:22.840
multiple execution.

00:24:22.840 --> 00:24:25.470
And you can track the total
number of proxies for

00:24:25.470 --> 00:24:26.770
debugging by using proxyCount.

00:24:29.700 --> 00:24:30.110
So thanks.

00:24:30.110 --> 00:24:31.550
You can learn more about this.

00:24:31.550 --> 00:24:34.070
Learn more about Dart in
general by going to

00:24:34.070 --> 00:24:34.680
dartlang.org.

00:24:34.680 --> 00:24:37.800
And one of the new things that
we've put up there on

00:24:37.800 --> 00:24:40.590
dartlang.org is a cookbook that
will give you a lot of

00:24:40.590 --> 00:24:43.450
quick start recipes on
how to use Dart,

00:24:43.450 --> 00:24:46.510
including JavaScript Interop.

00:24:46.510 --> 00:24:47.790
We'll have some information
there.

00:24:47.790 --> 00:24:49.850
If you want to learn more about
the JavaScript Interop

00:24:49.850 --> 00:24:53.070
library and how to get started
with it and add it to your

00:24:53.070 --> 00:24:56.990
application, go to our
GitHub page that has

00:24:56.990 --> 00:24:57.940
the JavaScript package.

00:24:57.940 --> 00:25:00.120
It will show you how to get
started with a simple hello

00:25:00.120 --> 00:25:04.200
app, and they'll show you docs
on all the APIs we provided,

00:25:04.200 --> 00:25:07.510
as well as all the samples
that we've shown today.

00:25:07.510 --> 00:25:11.730
And Source Code, it's a
collaborative project, and we

00:25:11.730 --> 00:25:15.760
get updates from people both
inside and outside of Google

00:25:15.760 --> 00:25:19.110
who've made lots of big
contributions to it.

00:25:19.110 --> 00:25:20.360
Thank you.

