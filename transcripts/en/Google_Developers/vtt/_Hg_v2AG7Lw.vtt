WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.980
[MUSIC PLAYING]

00:00:05.445 --> 00:00:06.540
Hey, hey, everybody.

00:00:06.540 --> 00:00:09.451
I'm Andrew Brogdon, and welcome
back to the Mobile Ads Garage.

00:00:09.451 --> 00:00:11.700
Today, with the help of my
partner, Gary, the graphics

00:00:11.700 --> 00:00:15.960
guy, we're going to talk about
rewarded video, a full screen

00:00:15.960 --> 00:00:18.720
video format from AdMob
that can help you monetize

00:00:18.720 --> 00:00:20.987
while increasing
engagement with your users.

00:00:20.987 --> 00:00:23.445
We'll have screencasts and talk
implementation, but first--

00:00:26.620 --> 00:00:31.790
well, yeah, yeah, with
Katie-- super nice engineer,

00:00:31.790 --> 00:00:32.630
by the way--

00:00:32.630 --> 00:00:35.270
that covered reward video,
but only through mediation.

00:00:35.270 --> 00:00:38.870
But now, AdMob has launched
its own rewarded video demand.

00:00:38.870 --> 00:00:40.880
That means you can get
rewarded video ads right

00:00:40.880 --> 00:00:43.130
from Google's advertisers
with no mediation

00:00:43.130 --> 00:00:44.540
or third-party SDKs required.

00:00:47.790 --> 00:00:48.690
Well, yeah.

00:00:51.420 --> 00:00:52.470
Dude, I had a baby.

00:00:55.480 --> 00:00:57.102
I was in the room.

00:00:57.102 --> 00:00:59.560
Do you know what it's like to
chase a two-foot tall version

00:00:59.560 --> 00:01:00.740
of me around a house?

00:01:03.918 --> 00:01:07.710
All right, I'm going to get
back to talking to YouTube now.

00:01:07.710 --> 00:01:09.990
If you haven't used it
before, rewarded video

00:01:09.990 --> 00:01:12.750
is a full screen ad format
that gives users the option

00:01:12.750 --> 00:01:15.360
to watch a video in exchange
for something, usually

00:01:15.360 --> 00:01:16.830
an in-game reward.

00:01:16.830 --> 00:01:19.032
Because users have
the power of choice,

00:01:19.032 --> 00:01:21.240
they don't have to see ads
they're not interested in.

00:01:21.240 --> 00:01:24.330
And the ads they do see
are presented in full.

00:01:24.330 --> 00:01:27.000
That dynamic allows publishers
to build monetization

00:01:27.000 --> 00:01:28.770
into the mechanics
of their games,

00:01:28.770 --> 00:01:31.530
offering different paths
within an adventure or items

00:01:31.530 --> 00:01:32.940
that affect game play.

00:01:32.940 --> 00:01:34.140
And that's key.

00:01:34.140 --> 00:01:37.350
We've seen publishers who, after
integrating rewarded video,

00:01:37.350 --> 00:01:41.740
saw an increase of overall user
engagement and long-term value.

00:01:41.740 --> 00:01:43.680
All right, so that's
the what and the why.

00:01:43.680 --> 00:01:46.380
Let's get to our screencast
and implement rewarded video

00:01:46.380 --> 00:01:48.410
in Android Studio.

00:01:48.410 --> 00:01:50.700
OK, so I've got a real
basic Android app here.

00:01:50.700 --> 00:01:52.640
It's just got a button
to display an ad along

00:01:52.640 --> 00:01:55.520
with a text view that's going to
keep a log of events as we go.

00:01:55.520 --> 00:01:58.020
And I'm just to wired up
to load an ad and show it.

00:01:58.020 --> 00:02:00.000
So how do I do that?

00:02:00.000 --> 00:02:01.150
With these steps.

00:02:01.150 --> 00:02:03.477
So first, I'll make sure
that the SDK's initialized.

00:02:03.477 --> 00:02:05.310
Then I'll set up the
listener that will keep

00:02:05.310 --> 00:02:07.200
me wired into the ad lifecycle.

00:02:07.200 --> 00:02:09.090
And after that, it's
just loading the ad,

00:02:09.090 --> 00:02:10.590
showing it, and
making sure I catch

00:02:10.590 --> 00:02:12.920
the rewards that come out.

00:02:12.920 --> 00:02:15.940
So step one, initialize the SDK.

00:02:15.940 --> 00:02:17.440
Normally for these
videos, I start

00:02:17.440 --> 00:02:19.510
with the SDK already imported.

00:02:19.510 --> 00:02:21.820
But I wanted to be sure to
mention that Google recently

00:02:21.820 --> 00:02:24.250
started distributing the
SDK via Maven and not

00:02:24.250 --> 00:02:25.390
in the SDK manager.

00:02:25.390 --> 00:02:28.390
So I'm here in my apps
project level gradle file.

00:02:28.390 --> 00:02:30.830
And you can see this
Google line here.

00:02:30.830 --> 00:02:33.880
That's new for Android Studio
3.0, which will, hopefully,

00:02:33.880 --> 00:02:36.420
be released before this
video makes it to YouTube.

00:02:36.420 --> 00:02:38.470
If you're using version
two, though, you

00:02:38.470 --> 00:02:43.060
could just add the Maven
repo manually like this.

00:02:43.060 --> 00:02:44.320
Here we go.

00:02:44.320 --> 00:02:47.560
And the URL's just
maven.google.com.

00:02:47.560 --> 00:02:49.060
And this way, studio
will know which

00:02:49.060 --> 00:02:52.130
repo to use to go get the SDK.

00:02:52.130 --> 00:02:56.270
So once that's done, you can go
into the app level gradle file

00:02:56.270 --> 00:02:58.700
and add the mobile ads SDK
the same way you normally

00:02:58.700 --> 00:02:59.900
would before.

00:02:59.900 --> 00:03:04.412
It's just com.google.android.gms
and then Play Services ads.

00:03:04.412 --> 00:03:06.620
And always make sure you're
using the latest version.

00:03:06.620 --> 00:03:09.860
Right now, it's 11.4.2.

00:03:09.860 --> 00:03:11.280
All right, so with
that in place,

00:03:11.280 --> 00:03:13.280
let's head into my
activity file and make

00:03:13.280 --> 00:03:15.890
the call to initialize the SDK.

00:03:15.890 --> 00:03:18.410
You only need to do this once
in your app per execution.

00:03:18.410 --> 00:03:21.330
Although, if you do it more
than once, it's not a big deal.

00:03:21.330 --> 00:03:24.050
And I'm just going to call
the static method, initialize.

00:03:24.050 --> 00:03:27.662
And I'm giving it a
context and an app ID.

00:03:27.662 --> 00:03:29.870
Since this is just a test
app I'm messing around with

00:03:29.870 --> 00:03:31.244
and not a real
published app, I'm

00:03:31.244 --> 00:03:34.479
actually using the App ID from
our quickstart guide, which

00:03:34.479 --> 00:03:36.520
you can use as well if
you're just playing around

00:03:36.520 --> 00:03:37.400
with the SDK.

00:03:37.400 --> 00:03:39.430
So don't publish with
it, of course, but it's

00:03:39.430 --> 00:03:41.846
fun for testing if you're just
playing around with the SDK

00:03:41.846 --> 00:03:43.080
and it's API.

00:03:43.080 --> 00:03:44.650
All right, so step one, done.

00:03:44.650 --> 00:03:46.990
Let's move on to the listener.

00:03:46.990 --> 00:03:49.380
First, I'm going to come
up here and add to my class

00:03:49.380 --> 00:03:53.020
the rewarded video ad listener
interface so my activity can

00:03:53.020 --> 00:03:54.910
serve as the
listener for the ads

00:03:54.910 --> 00:03:57.710
and get callbacks for
events in the ad life cycle.

00:03:57.710 --> 00:04:00.940
Then I'm going to use Android
Studio's implement methods

00:04:00.940 --> 00:04:02.650
right there to do
some code generation.

00:04:02.650 --> 00:04:04.580
So it's going to stub
out these methods.

00:04:04.580 --> 00:04:06.380
And let's talk about them.

00:04:06.380 --> 00:04:08.170
So I've got the big seven here.

00:04:08.170 --> 00:04:10.540
Number one is the
ad loaded callback.

00:04:10.540 --> 00:04:13.490
This gets fired when an
ad loads successfully.

00:04:13.490 --> 00:04:14.720
Then I've got ad opened.

00:04:14.720 --> 00:04:17.860
That will get called when an
ad opens and covers the screen.

00:04:17.860 --> 00:04:20.610
Video started, of course,
for when the playback starts.

00:04:20.610 --> 00:04:22.450
Ad closed for when
the ad is closed,

00:04:22.450 --> 00:04:24.880
and you've returned
to your app's UI.

00:04:24.880 --> 00:04:27.220
Then on rewarded, this is
the reward item callback--

00:04:27.220 --> 00:04:30.300
we'll get back to this
toward the end in step five.

00:04:30.300 --> 00:04:31.990
Ad left application,
this is called

00:04:31.990 --> 00:04:34.420
when focus leaves your app
to go to the Play Store

00:04:34.420 --> 00:04:36.340
or destination URL.

00:04:36.340 --> 00:04:37.960
And then ad failed
to load, which

00:04:37.960 --> 00:04:39.430
has an error code
to let you know

00:04:39.430 --> 00:04:42.280
that a load add call failed.

00:04:42.280 --> 00:04:44.800
OK, so I'm just going to drop
some log statements in here,

00:04:44.800 --> 00:04:47.260
and I'm going to leave the
reward callback blank for now.

00:04:47.260 --> 00:04:50.377
Like I said, we'll come back
to that one in just a second.

00:04:50.377 --> 00:04:52.210
And I'm just going to
put some text in here,

00:04:52.210 --> 00:04:55.420
so I can see it
in that text view.

00:04:55.420 --> 00:04:57.586
OK, now I'm going
to scroll back up

00:04:57.586 --> 00:04:58.960
and make a member
variable that's

00:04:58.960 --> 00:05:02.134
going to hold a reference to
the rewarded video ad singleton.

00:05:02.134 --> 00:05:04.300
And here, I'm going to
retrieve that reference using

00:05:04.300 --> 00:05:06.637
a static method in
the mobile ads class.

00:05:06.637 --> 00:05:08.470
Unlike all the other
formats, rewarded video

00:05:08.470 --> 00:05:09.730
uses the singleton pattern.

00:05:09.730 --> 00:05:13.090
So rather than instantiating
individual objects yourself

00:05:13.090 --> 00:05:16.000
for each ad, you just need to
grab a reference in the SDK

00:05:16.000 --> 00:05:17.170
and hang onto it.

00:05:17.170 --> 00:05:20.060
All your calls are going to
go through as one object.

00:05:20.060 --> 00:05:22.180
And now that I have
that reference,

00:05:22.180 --> 00:05:25.150
I can set this activity as the
listener for rewarded video

00:05:25.150 --> 00:05:25.690
ads.

00:05:25.690 --> 00:05:27.291
And I'm wired up.

00:05:27.291 --> 00:05:27.790
Cool.

00:05:27.790 --> 00:05:29.070
So that's two steps down.

00:05:29.070 --> 00:05:31.030
Time to load an ad.

00:05:31.030 --> 00:05:33.040
Video ads are big,
so it's a good idea

00:05:33.040 --> 00:05:35.920
to load them well in advance
and make sure they're ready.

00:05:35.920 --> 00:05:38.410
I'm going to load mine as soon
as this activity's created

00:05:38.410 --> 00:05:39.740
by calling load ad.

00:05:39.740 --> 00:05:43.310
And I'm going to give it an ad
unit and a new request object.

00:05:43.310 --> 00:05:45.130
And that's the same
ad request class used

00:05:45.130 --> 00:05:47.770
for all the other formats, so
the usual methods for options

00:05:47.770 --> 00:05:50.920
and targeting and stuff, those
are right there in place.

00:05:50.920 --> 00:05:53.410
And the ad unit I'm using
here is a test unit.

00:05:53.410 --> 00:05:55.690
It will always return
test ads, which makes it

00:05:55.690 --> 00:05:58.200
safe to use while developing.

00:05:58.200 --> 00:06:00.400
You can find that same
ad unit right here

00:06:00.400 --> 00:06:01.590
in our rewarded video guide.

00:06:01.590 --> 00:06:03.070
And you're welcome to
use it in your apps.

00:06:03.070 --> 00:06:04.305
If you're just starting
out, you haven't registered

00:06:04.305 --> 00:06:07.230
an ad unit of your own, or
any time you're debugging

00:06:07.230 --> 00:06:09.360
and just want to make
sure you get test ads,

00:06:09.360 --> 00:06:11.721
you're welcome to use this one.

00:06:11.721 --> 00:06:12.560
All right.

00:06:12.560 --> 00:06:18.880
So if I launch my app now,
I should see it in ad loads.

00:06:18.880 --> 00:06:19.700
And there it is.

00:06:19.700 --> 00:06:21.032
Cool.

00:06:21.032 --> 00:06:24.210
All right, on to step
four, showing the ad.

00:06:24.210 --> 00:06:26.480
First, let me just slip
a little line in here

00:06:26.480 --> 00:06:29.260
to enable the button
when it loads.

00:06:29.260 --> 00:06:34.369
I'm going to put that into
the on ad loaded callback,

00:06:34.369 --> 00:06:35.410
so my button will be lit.

00:06:35.410 --> 00:06:36.460
Perfect.

00:06:36.460 --> 00:06:39.190
Now I'm going to go up to the
click listener for the button.

00:06:39.190 --> 00:06:41.300
And I'm going to disable
it when it's clicked,

00:06:41.300 --> 00:06:43.580
because we'll be showing an ad.

00:06:43.580 --> 00:06:46.490
And then I'm going to check
the page is loaded method

00:06:46.490 --> 00:06:49.719
to make sure I've got an
ad ready, and then show.

00:06:49.719 --> 00:06:51.260
Now, technically,
I don't really need

00:06:51.260 --> 00:06:53.210
to do the is loaded call
because I know, for a fact,

00:06:53.210 --> 00:06:53.930
I've got an ad.

00:06:53.930 --> 00:06:56.630
But it's a good practice to
get in the habit of doing,

00:06:56.630 --> 00:06:58.490
and so I do recommend it.

00:06:58.490 --> 00:07:01.077
All right, let's run it again.

00:07:01.077 --> 00:07:02.160
And I've got an ad loaded.

00:07:02.160 --> 00:07:02.760
Let's show it.

00:07:05.930 --> 00:07:08.981
And there's my test ad.

00:07:08.981 --> 00:07:09.480
All right.

00:07:09.480 --> 00:07:12.120
So one step left, and that's
to reward the user when

00:07:12.120 --> 00:07:14.160
they watch a video completely.

00:07:14.160 --> 00:07:17.250
For that, I'm going to pop down
to the on rewarded callback.

00:07:17.250 --> 00:07:20.160
So this is fired when a user
watches a video to completion.

00:07:20.160 --> 00:07:22.802
And it's how your app knows
to distribute a reward.

00:07:22.802 --> 00:07:24.510
And it comes with this
little reward item

00:07:24.510 --> 00:07:27.360
parameter that includes the
amount and type of reward.

00:07:27.360 --> 00:07:30.540
And those will have the data
that you put into the AdMob UI

00:07:30.540 --> 00:07:31.777
when you make your ad units.

00:07:31.777 --> 00:07:33.360
So depending on the
ad unit, you might

00:07:33.360 --> 00:07:36.000
want to have one that's
10 coins, for example,

00:07:36.000 --> 00:07:39.000
and another one that
rewards 37 sheep.

00:07:39.000 --> 00:07:41.640
Whatever you put in, you're
going to get out here.

00:07:41.640 --> 00:07:43.950
They come in the form
of a number and a string

00:07:43.950 --> 00:07:44.742
description.

00:07:44.742 --> 00:07:46.200
So I'm just going
to log the reward

00:07:46.200 --> 00:07:47.550
to show that it
happened, but you

00:07:47.550 --> 00:07:49.050
can do pretty much
whatever you want

00:07:49.050 --> 00:07:50.850
with this data in your own app.

00:07:50.850 --> 00:07:54.230
OK, so let's run one last time.

00:07:54.230 --> 00:07:55.030
There's my ad.

00:07:55.030 --> 00:07:56.830
So I'll go ahead and click show.

00:07:56.830 --> 00:07:59.800
And we just need to
wait for this to finish.

00:07:59.800 --> 00:08:01.690
Let me quickly say,
by the way, that when

00:08:01.690 --> 00:08:03.940
they asked me to record
the video for the test ad,

00:08:03.940 --> 00:08:06.064
I didn't think about the
fact that people are going

00:08:06.064 --> 00:08:08.210
to have to look at it,
like, 50 times while testing

00:08:08.210 --> 00:08:09.380
the rewarded code.

00:08:09.380 --> 00:08:12.220
So if you get to that 50th
go round and you're thinking,

00:08:12.220 --> 00:08:14.800
dear lord, if I have to look
at this guy one more time--

00:08:14.800 --> 00:08:15.640
don't feel bad.

00:08:15.640 --> 00:08:17.620
I completely understand.

00:08:17.620 --> 00:08:19.170
The good news is
we got the reward.

00:08:19.170 --> 00:08:22.700
We got our 10 coins, though,
so this implementation's done.

00:08:22.700 --> 00:08:24.570
That's all five
steps-- initialize,

00:08:24.570 --> 00:08:27.780
set up the listener,
load, show, and reward.

00:08:27.780 --> 00:08:30.090
All right, so that's rewarded
video in Android Studio.

00:08:32.919 --> 00:08:34.210
Actually, that's kind of true.

00:08:34.210 --> 00:08:36.100
Rewarded ads are a
lot like interstitials

00:08:36.100 --> 00:08:38.350
in that you load them in
advance and then show them

00:08:38.350 --> 00:08:40.210
at a pause in the
flow of your app.

00:08:40.210 --> 00:08:43.030
In fact, a rewarded ad is
really just a video interstitial

00:08:43.030 --> 00:08:45.670
with an extra callback
to reward the user.

00:08:45.670 --> 00:08:49.300
So with Android down, let's see
how rewarded ads work in iOS.

00:08:49.300 --> 00:08:51.820
For that, we're going
to head in to Xcode.

00:08:51.820 --> 00:08:54.260
All right, here's my iOS app
running on the simulator.

00:08:54.260 --> 00:08:56.140
I've got a button up
top to show an ad,

00:08:56.140 --> 00:08:58.360
and a log that will show
events as they come in.

00:08:58.360 --> 00:09:00.026
Now, how am I going
to get this wired up

00:09:00.026 --> 00:09:02.070
to show a rewarded video ad?

00:09:02.070 --> 00:09:03.630
Well, here are the
steps, and they're

00:09:03.630 --> 00:09:05.730
almost identical to
the ones for Android.

00:09:05.730 --> 00:09:07.710
First, I'll initialize
the SDK and set up

00:09:07.710 --> 00:09:09.150
a delegate that
will get callbacks

00:09:09.150 --> 00:09:10.890
for the events in
the ad lifecycle.

00:09:10.890 --> 00:09:15.200
And once that's done, it's
just load, show, and reward.

00:09:15.200 --> 00:09:17.860
So first up,
initialising the SDK.

00:09:17.860 --> 00:09:18.940
Here's my AppDelegate.

00:09:18.940 --> 00:09:20.710
And I've already
got the SDK building

00:09:20.710 --> 00:09:25.870
into this app via CocoaPods,
so I can import it right here.

00:09:25.870 --> 00:09:29.050
And then I'll hop down and call
the class method for configure

00:09:29.050 --> 00:09:30.370
on GADMobileAds.

00:09:30.370 --> 00:09:34.230
And I need to pass
that my application ID.

00:09:34.230 --> 00:09:35.129
There we go.

00:09:35.129 --> 00:09:37.670
Since this is just a sample app
that's not really registered,

00:09:37.670 --> 00:09:42.320
I'm using the sample app ID
from our Get Started Guide

00:09:42.320 --> 00:09:43.700
on the AdMob developer site.

00:09:43.700 --> 00:09:45.650
If you're just messing
around with the SDK,

00:09:45.650 --> 00:09:49.370
testing things out, you can use
this as well in your own test

00:09:49.370 --> 00:09:50.520
apps.

00:09:50.520 --> 00:09:51.020
Cool.

00:09:51.020 --> 00:09:52.310
So that's step one.

00:09:52.310 --> 00:09:55.130
Now, let's get the
delegate going.

00:09:55.130 --> 00:09:56.660
Here I am in my view controller.

00:09:56.660 --> 00:09:59.826
And the first thing I'm going
to do is import the SDK.

00:09:59.826 --> 00:10:01.840
Then I'll make a
property that'll

00:10:01.840 --> 00:10:04.030
store a reference to the
rewarded video singleton.

00:10:04.030 --> 00:10:06.010
So unlike the other
formats, rewarded video

00:10:06.010 --> 00:10:08.250
uses the singleton
pattern in iOS.

00:10:08.250 --> 00:10:10.840
So instead of creating your
own object for each ad,

00:10:10.840 --> 00:10:13.900
you just grab a reference to
the shared instance, which

00:10:13.900 --> 00:10:15.760
you'll see right
here, and then you

00:10:15.760 --> 00:10:17.260
use that to make all your calls.

00:10:17.260 --> 00:10:19.810
And that's all I'm
doing in this step.

00:10:19.810 --> 00:10:22.690
So next, I'm going to
assign this view controller

00:10:22.690 --> 00:10:25.750
as the delegate for that
rewarded video singleton.

00:10:25.750 --> 00:10:27.696
And Xcode's going to
yell at me, correctly,

00:10:27.696 --> 00:10:30.070
because my view controller
doesn't implement the delegate

00:10:30.070 --> 00:10:31.850
protocol.

00:10:31.850 --> 00:10:36.140
So I'll pop up here, and
I'll add that protocol.

00:10:36.140 --> 00:10:36.820
There we go.

00:10:36.820 --> 00:10:39.339
And I'm going to get a
new error, because I don't

00:10:39.339 --> 00:10:40.630
implement the required methods.

00:10:40.630 --> 00:10:42.350
Now, XCode 9 has
this new thing where

00:10:42.350 --> 00:10:44.600
it will stub out the
protocol for you,

00:10:44.600 --> 00:10:46.460
but it only does the
required methods.

00:10:46.460 --> 00:10:47.960
And I want all of
them, so I'm going

00:10:47.960 --> 00:10:51.491
to do it through the magic
of cutting and pasting.

00:10:51.491 --> 00:10:52.990
This is like in a
cooking show where

00:10:52.990 --> 00:10:54.520
they make a roast
turkey that has to go

00:10:54.520 --> 00:10:55.780
in the oven for three hours.

00:10:55.780 --> 00:10:57.310
And they put it in,
and then, like, I just

00:10:57.310 --> 00:10:59.390
happen to have this other
turkey I put in three hours ago.

00:10:59.390 --> 00:11:00.940
And they pull out
the finished one.

00:11:00.940 --> 00:11:02.791
So you can get these
method signatures

00:11:02.791 --> 00:11:03.790
from our reference docs.

00:11:03.790 --> 00:11:06.460
They also auto-complete if
you start typing them in.

00:11:06.460 --> 00:11:09.280
Let me go down a list, though,
and I'll cover each one.

00:11:09.280 --> 00:11:11.890
So, first we have
video ad did open.

00:11:11.890 --> 00:11:14.620
This is called when an ad
opens and covers the UI.

00:11:14.620 --> 00:11:15.790
Then we have ad did close.

00:11:15.790 --> 00:11:17.410
It's the opposite--
when an ad closes

00:11:17.410 --> 00:11:19.510
and you go back to your app.

00:11:19.510 --> 00:11:21.100
This is ad did receive.

00:11:21.100 --> 00:11:23.620
This is the ad loaded
callback, basically,

00:11:23.620 --> 00:11:26.120
so this is where you get an ad.

00:11:26.120 --> 00:11:30.170
Ad did start playing, that's
for when video playback begins.

00:11:30.170 --> 00:11:32.360
Ad will leave
application, that's

00:11:32.360 --> 00:11:34.220
when somebody clicks
through on the ad

00:11:34.220 --> 00:11:36.760
and goes to the app
store or destination URL,

00:11:36.760 --> 00:11:37.910
YOU get that one.

00:11:37.910 --> 00:11:39.899
This is did fail to
load, which is called

00:11:39.899 --> 00:11:40.940
when an ad fails to load.

00:11:40.940 --> 00:11:43.970
You get an error code
explaining the problem.

00:11:43.970 --> 00:11:46.779
And finally, did reward
user with reward--

00:11:46.779 --> 00:11:48.070
and that's the reward callback.

00:11:48.070 --> 00:11:51.221
We'll cover that in step five.

00:11:51.221 --> 00:11:51.720
Cool.

00:11:51.720 --> 00:11:53.400
So the view controller
is now set up

00:11:53.400 --> 00:11:55.260
as the delegate for
rewarded video ads.

00:11:55.260 --> 00:11:56.400
That's all the methods.

00:11:56.400 --> 00:11:57.700
Let's load an ad.

00:11:57.700 --> 00:11:59.580
I'm just going to
call the load method.

00:11:59.580 --> 00:12:04.290
First, I'll pass it
a GAD request object.

00:12:04.290 --> 00:12:06.880
And this is the same request
class used for other formats,

00:12:06.880 --> 00:12:09.570
so the same options and
targeting methods are there.

00:12:09.570 --> 00:12:12.190
And I'm also going to
give it an ad unit.

00:12:12.190 --> 00:12:13.810
And since I'm just
messing around here

00:12:13.810 --> 00:12:16.510
and need to use test ads, I'm
actually using the ad unit

00:12:16.510 --> 00:12:20.170
from our rewarded video
guide-- which you can use too.

00:12:20.170 --> 00:12:22.520
It's specially configured
to always return test ads.

00:12:22.520 --> 00:12:25.139
So you can mess around with
it, load ads, tap on them,

00:12:25.139 --> 00:12:26.930
click on them, whatever
you're going to do,

00:12:26.930 --> 00:12:29.040
and you don't have
to worry about it.

00:12:29.040 --> 00:12:29.540
Cool.

00:12:29.540 --> 00:12:36.820
So if I build this, I
should see an ad get loaded.

00:12:36.820 --> 00:12:37.720
And there it is.

00:12:37.720 --> 00:12:39.290
Cool.

00:12:39.290 --> 00:12:40.770
All right, so I've got an ad.

00:12:40.770 --> 00:12:42.140
Let's show it.

00:12:42.140 --> 00:12:43.910
First up, my button
for showing an ad

00:12:43.910 --> 00:12:45.800
starts off disabled,
so I'm going

00:12:45.800 --> 00:12:48.920
to need to enable it in the
did receive ad delegate method.

00:12:48.920 --> 00:12:50.820
This gets called
when an ad loads.

00:12:50.820 --> 00:12:54.284
And so I'll just enable that
button, so I can press it.

00:12:54.284 --> 00:12:56.200
Now, I'm going to scroll
back up to the action

00:12:56.200 --> 00:12:57.910
method for that button.

00:12:57.910 --> 00:12:59.320
And first, I'll disable it.

00:12:59.320 --> 00:13:02.470
Since we're going to show, we
want to disable the button.

00:13:02.470 --> 00:13:05.080
And then I'm going to
check the is ready property

00:13:05.080 --> 00:13:07.710
and call present.

00:13:07.710 --> 00:13:10.320
The is ready check here isn't
really necessary, since I know

00:13:10.320 --> 00:13:12.870
for a fact that I
just loaded an ad,

00:13:12.870 --> 00:13:15.147
but it's a good idea
to call it anyway.

00:13:15.147 --> 00:13:16.230
It doesn't take much time.

00:13:16.230 --> 00:13:18.881
It's a good thing to
check on each show.

00:13:18.881 --> 00:13:19.380
All right.

00:13:19.380 --> 00:13:23.910
So if I build and run this,
let's see what happens.

00:13:26.599 --> 00:13:27.640
All right, there's my ad.

00:13:27.640 --> 00:13:32.481
And we click the button,
and there's our test ad.

00:13:32.481 --> 00:13:32.980
Cool.

00:13:32.980 --> 00:13:34.630
So, just one step
left, and that's

00:13:34.630 --> 00:13:38.300
to reward the user when they
watch a video to completion.

00:13:38.300 --> 00:13:40.870
And that's done in a did reward
user with reward delegate

00:13:40.870 --> 00:13:41.990
method.

00:13:41.990 --> 00:13:43.780
This method is invoked
whenever a video is

00:13:43.780 --> 00:13:45.196
watched to completion
and the user

00:13:45.196 --> 00:13:46.760
needs to be given their award.

00:13:46.760 --> 00:13:49.161
So I'm just going
to log this info,

00:13:49.161 --> 00:13:51.160
but your app or game can
do pretty much whatever

00:13:51.160 --> 00:13:52.990
you want with the reward data.

00:13:52.990 --> 00:13:55.090
It arrives in a GAD
ad reward object,

00:13:55.090 --> 00:13:59.590
which has two properties,
amount and type, for the reward.

00:13:59.590 --> 00:14:02.440
It's going to be set to whatever
you entered when you created

00:14:02.440 --> 00:14:04.000
your ad unit in the AdMob UI.

00:14:04.000 --> 00:14:05.650
In this case, I
think it's 10 coins,

00:14:05.650 --> 00:14:08.020
but it's literally just
a number and a string.

00:14:08.020 --> 00:14:09.920
It can be almost
anything you want.

00:14:09.920 --> 00:14:10.420
All right.

00:14:10.420 --> 00:14:12.120
So now when I run this--

00:14:12.120 --> 00:14:13.220
get the simulator back up.

00:14:16.200 --> 00:14:17.265
And I'll click show ad.

00:14:17.265 --> 00:14:19.800
And we just need to
watch this to completion,

00:14:19.800 --> 00:14:22.020
and that reward
callback will be fired.

00:14:22.020 --> 00:14:25.810
So we're watching a video
of me in a video of me.

00:14:25.810 --> 00:14:27.030
I'm basically incepting.

00:14:29.630 --> 00:14:30.560
There we go.

00:14:30.560 --> 00:14:31.060
Cool.

00:14:31.060 --> 00:14:34.650
So if I close this,
there's my reward callback

00:14:34.650 --> 00:14:37.900
just before the
I close callback.

00:14:37.900 --> 00:14:39.400
All right, so that's
all five steps.

00:14:39.400 --> 00:14:41.740
Rewarded video ads
are finished for iOS.

00:14:41.740 --> 00:14:43.550
Job done.

00:14:43.550 --> 00:14:45.010
And that's rewarded video.

00:14:45.010 --> 00:14:48.010
For links to our guides for
Android, iOS, and Unity,

00:14:48.010 --> 00:14:50.951
plus samples on GitHub,
check the description below.

00:14:50.951 --> 00:14:53.200
We've also got a link down
there for our support forum

00:14:53.200 --> 00:14:54.920
if you run into any problems.

00:14:54.920 --> 00:14:57.820
And as always, if you've got
a question about this episode

00:14:57.820 --> 00:14:59.900
or an idea for something
you'd like us to cover,

00:14:59.900 --> 00:15:03.310
leave a comment below, and Gary
and I will see you next time.

00:15:03.310 --> 00:15:05.760
[MUSIC PLAYING]

