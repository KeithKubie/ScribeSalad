WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:05.000
All right. So let's think about this. So we have either ordered list or unordered list.

00:00:05.000 --> 00:00:09.000
We've got our list L. So let's first think about ordered list.

00:00:09.000 --> 00:00:12.000
An ordered list, let's say it goes from smallest to largest.

00:00:12.000 --> 00:00:18.000
Inserting a new element into the list and it has to stay ordered now because this is an ordered list

00:00:18.000 --> 00:00:22.000
that involves running to the list or possibly jumping around in the list.

00:00:22.000 --> 00:00:25.000
We could do what's called binary search to actually find the position

00:00:25.000 --> 00:00:29.000
where something needs to go quickly but then actually sticking it into the list

00:00:29.000 --> 00:00:33.000
involves copying all of the elements, moving them over, shifting them,

00:00:33.000 --> 00:00:35.000
and then sticking the new one in the list.

00:00:35.000 --> 00:00:40.000
This inserting into an ordered list is a linear time process.

00:00:40.000 --> 00:00:44.000
All right. We have to maintain this sortedness property.

00:00:44.000 --> 00:00:49.000
For an unordered list, it's actually quite a bit easier. Well, let's stick with ordered list for a moment.

00:00:49.000 --> 00:00:52.000
We're still with an ordered list. What about finding and removing the minimum?

00:00:52.000 --> 00:00:56.000
Finding the minimum in this sorted list is really easy. It's right there.

00:00:56.000 --> 00:01:01.000
Right in the first spot. So finding it is easy.

00:01:01.000 --> 00:01:06.000
And deleting it depending on exactly how we deal with this. We don't want to recopy the whole array.

00:01:06.000 --> 00:01:10.000
But if we could sort of just chop off the front and move over a little bit,

00:01:10.000 --> 00:01:16.000
then we can actually find and delete the min from an ordered list in constant time.

00:01:16.000 --> 00:01:19.000
That's really great--once it's sorted, we can actually find as

00:01:19.000 --> 00:01:22.000
many means as we want and it's very, very cheap.

00:01:22.000 --> 00:01:25.000
Alright. So now we consider the unordered case.

00:01:25.000 --> 00:01:30.000
In the unordered case, inserting into the list is so easy.

00:01:30.000 --> 00:01:35.000
We just stick it into the end and just extend the list a little bit. So that's a constant time operation.

00:01:35.000 --> 00:01:37.000
But what about finding and removing the min?

00:01:37.000 --> 00:01:40.000
Well, this is the problem that we're looking at earlier in the unit

00:01:40.000 --> 00:01:43.000
where we have to scan through to find where the mean is.

00:01:43.000 --> 00:01:47.000
And to remove it, we have to copy things over to fill in the whole.

00:01:47.000 --> 00:01:50.000
That is actually a linear time operation.

00:01:50.000 --> 00:01:54.000
We have these kind of two extreme choices that we can make.

00:01:54.000 --> 00:02:02.000
We can look at an ordered list where inserting is slow but removing the smallest is easy.

00:02:02.000 --> 00:02:10.000
Or we can use an unordered list where inserting is easy and finding and removing the min is hard.

00:02:10.000 --> 00:02:13.000
Notice we didn't use the sort of middle ground at all.

00:02:13.000 --> 00:02:18.000
What a heap is going to give us is a way of actually both doing inserts

00:02:18.000 --> 00:02:23.000
and finding and removing the min in a logarithmic time.

