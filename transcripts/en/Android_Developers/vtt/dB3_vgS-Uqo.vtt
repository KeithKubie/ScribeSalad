WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.417
Android - Performance Patterns

00:00:02.417 --> 00:00:04.782
Layouts are the core
of how you create a modern,

00:00:04.782 --> 00:00:06.870
beautiful Android application
for your users.

00:00:06.870 --> 00:00:09.060
But if you're not careful,
your amazing layouts

00:00:09.060 --> 00:00:10.920
can create a monster performance drain.

00:00:10.920 --> 00:00:12.074
My name is Colt McAnlis.

00:00:12.074 --> 00:00:14.704
And if you're using fancy features
on your view layouts,

00:00:14.704 --> 00:00:16.356
you might be getting into trouble.

00:00:16.356 --> 00:00:19.359
Remember that any time the position
or size of an object changes

00:00:19.359 --> 00:00:21.649
in the view hierarchy,
there may be ramifications

00:00:21.649 --> 00:00:23.649
with respect to other layouts in the view.

00:00:23.649 --> 00:00:26.209
For example, if a button
suddenly doubles in size,

00:00:26.209 --> 00:00:28.549
a neighboring view may need to be moved.

00:00:28.549 --> 00:00:32.349
And then, of course, the parent view
may need to be resized as a result.

00:00:32.349 --> 00:00:35.459
There's a small set of properties
of a view that, when changed,

00:00:35.459 --> 00:00:38.810
require the layout phase
of the rendering pipeline to occur

00:00:38.810 --> 00:00:40.155
before updating the screen.

00:00:40.155 --> 00:00:43.435
Basically this stage traverses
through the view hierarchy to calculate

00:00:43.435 --> 00:00:46.690
the correct positions and sizes
for all views impacted by the change.

00:00:46.690 --> 00:00:50.100
In general, this is
a reasonably fast process.

00:00:50.100 --> 00:00:53.500
But if you're not paying attention,
you can trigger an expensive cascade

00:00:53.500 --> 00:00:56.954
of layout operations, which can quickly
chip away at your frame time.

00:00:56.954 --> 00:01:00.160
A perfect example of this
is the relative layout container.

00:01:00.160 --> 00:01:03.255
Basically, this layout allows you
to define the position of a view

00:01:03.255 --> 00:01:06.354
with respect to the position
of some other view in the hierarchy.

00:01:06.354 --> 00:01:09.354
For example, always stay
to the right of the text box

00:01:09.354 --> 00:01:13.901
or at the top of the current container,
or stay at the top of the topmost sibling,

00:01:13.901 --> 00:01:16.640
but always to the right of
other siblings in my container.

00:01:16.640 --> 00:01:18.160
Weird stuff like that.

00:01:18.160 --> 00:01:20.890
The issue here is that in order
to properly position views

00:01:20.890 --> 00:01:24.380
in relation to one another, a container
must kick off a second layout pass

00:01:24.380 --> 00:01:27.350
before it can finalize positions
and move on to rendering.

00:01:27.350 --> 00:01:29.649
Basically, it works like this.

00:01:29.649 --> 00:01:33.010
The first pass will visit views and
calculate their positions and sizes

00:01:33.010 --> 00:01:34.920
based upon their personal request.

00:01:34.920 --> 00:01:38.410
The relative layout then uses this data
to figure out the proper positions

00:01:38.410 --> 00:01:41.140
of correlated views or any weight sizes

00:01:41.140 --> 00:01:43.870
and then makes
boundary adjustments accordingly.

00:01:43.870 --> 00:01:46.790
At this point, a second layout pass
is kicked off to determine

00:01:46.790 --> 00:01:48.970
the final positions to use for rendering.

00:01:48.970 --> 00:01:52.860
The result, two full layout operations
through the children in the container

00:01:52.860 --> 00:01:54.974
just to get things situated on the screen.

00:01:54.974 --> 00:01:59.490
And the trick is this happens every time
a change happens in a relative layout.

00:01:59.490 --> 00:02:00.960
But be warned here.

00:02:00.960 --> 00:02:04.500
It's not the only container that
can produce this double layout behavior.

00:02:04.500 --> 00:02:08.590
For example, linear layout generally
only issues a single layout request

00:02:08.590 --> 00:02:11.167
until you add the measure
with largest child parameter,

00:02:11.167 --> 00:02:14.406
in which case, it can end up needing
to kick off a second layout pass

00:02:14.406 --> 00:02:18.480
to resolve the proper sizes.
A grid layout has a very similar issue.

00:02:18.480 --> 00:02:21.960
This container allows relative positioning
but avoids the double taxation

00:02:21.960 --> 00:02:25.550
by preprocessing the child view
relationships, which is great, right?

00:02:25.550 --> 00:02:28.771
I mean, you get all the functionality
of a relative layout container

00:02:28.771 --> 00:02:31.990
without any of the performance costs.
You get all the functionality.

00:02:31.990 --> 00:02:35.423
This all gets thrown out the window
anytime the layout uses fill gravity,

00:02:35.423 --> 00:02:38.425
or in some cases,
if weights are used in the wrong spots.

00:02:38.425 --> 00:02:41.540
And then of course, you're
back into the same performance problem.

00:02:41.540 --> 00:02:44.220
Now by themselves,
multiple layouts from these containers

00:02:44.220 --> 00:02:46.060
won't be much of a performance burden.

00:02:46.060 --> 00:02:49.510
But put them in the wrong spot,
and you'll end up with some big problems.

00:02:49.510 --> 00:02:52.980
For example, any time there are
the root elements in your view hierarchy,

00:02:52.980 --> 00:02:55.787
or when the container
has a deep view hierarchy beneath it,

00:02:55.787 --> 00:02:59.298
or when there's lots of them
populating the screen like in a list view.

00:02:59.298 --> 00:03:03.062
Basically, this problem can then compound
throughout the hierarchy.

00:03:03.062 --> 00:03:06.032
Imagine a relative layout at the top
of your view hierarchy,

00:03:06.032 --> 00:03:08.580
which will then do two layout passes.

00:03:08.580 --> 00:03:11.190
And then later on,
you've got some list view below that

00:03:11.190 --> 00:03:13.940
that has a cascade of grid layouts
inside of it.

00:03:13.940 --> 00:03:17.670
Basically, the leaf nodes in this
configuration could end up having to do

00:03:17.670 --> 00:03:20.603
a layout phase run on them
eight times each.

00:03:20.603 --> 00:03:24.306
Obviously you've got better places that
you could be spending your frame time.

00:03:24.306 --> 00:03:26.600
So looking to avoid the
plague of double layouts?

00:03:26.600 --> 00:03:27.890
Here's a few helpful tips.

00:03:27.890 --> 00:03:31.522
Firstly you can track down whether layouts
are eating into your frame rate

00:03:31.522 --> 00:03:33.620
by taking a firm look
at the Systrace tool.

00:03:34.150 --> 00:03:37.190
If you see that the measure/layout
portions of a rendering frame

00:03:37.190 --> 00:03:39.369
are unusually high,
then there's a good chance

00:03:39.369 --> 00:03:42.010
that it's eating into frame rate
in a bad way.

00:03:42.030 --> 00:03:45.210
Secondly, take a swing at minimizing
the depth of your hierarchy.

00:03:45.210 --> 00:03:48.490
See, sometimes double layouts
are simply unavoidable.

00:03:48.490 --> 00:03:51.120
So reducing the amount of depth
in your view hierarchy

00:03:51.120 --> 00:03:54.439
will help reduce the impact
they have on your general frame rate.

00:03:54.439 --> 00:03:58.350
Thirdly, avoid calling layout requests
in any situations

00:03:58.350 --> 00:04:01.000
where it's absolutely
not critical to do so.

00:04:01.000 --> 00:04:05.865
When a view requests a layout, it's going
to trigger a layout in all of its parents.

00:04:05.865 --> 00:04:09.241
Now although there's extensive caching
in this part of the system to try

00:04:09.241 --> 00:04:13.114
to make this as fast as possible, it can
still be a very expensive operation.

00:04:13.470 --> 00:04:16.781
Fourthly, watch the rest of the
Android Performance Patterns videos.

00:04:16.820 --> 00:04:21.086
Fifthly, join the Google+ community and
ask questions to other performance gurus.

00:04:21.086 --> 00:04:23.797
And twelfthly, keep calm,
profile your code,

00:04:23.797 --> 00:04:25.880
and always remember,
perf matters.

00:04:25.880 --> 00:04:28.930
(music playing)

