WEBVTT
Kind: captions
Language: en

00:00:02.880 --> 00:00:06.519
 
[Music]

00:00:06.519 --> 00:00:06.529
[Music]
 

00:00:06.529 --> 00:00:09.860
[Music]
hello everyone I'm Matthew and this is

00:00:09.860 --> 00:00:09.870
hello everyone I'm Matthew and this is
 

00:00:09.870 --> 00:00:12.140
hello everyone I'm Matthew and this is
my colleague Colleen and today we're

00:00:12.140 --> 00:00:12.150
my colleague Colleen and today we're
 

00:00:12.150 --> 00:00:14.240
my colleague Colleen and today we're
going to be going over what's new with

00:00:14.240 --> 00:00:14.250
going to be going over what's new with
 

00:00:14.250 --> 00:00:16.430
going to be going over what's new with
the Android runtime on Android also

00:00:16.430 --> 00:00:16.440
the Android runtime on Android also
 

00:00:16.440 --> 00:00:23.420
the Android runtime on Android also
known as art so what is art well art is

00:00:23.420 --> 00:00:23.430
known as art so what is art well art is
 

00:00:23.430 --> 00:00:25.730
known as art so what is art well art is
the software layer in between the

00:00:25.730 --> 00:00:25.740
the software layer in between the
 

00:00:25.740 --> 00:00:28.640
the software layer in between the
applications and the operating system it

00:00:28.640 --> 00:00:28.650
applications and the operating system it
 

00:00:28.650 --> 00:00:31.370
applications and the operating system it
provides mechanisms for executing java

00:00:31.370 --> 00:00:31.380
provides mechanisms for executing java
 

00:00:31.380 --> 00:00:35.450
provides mechanisms for executing java
language and call in applications to

00:00:35.450 --> 00:00:35.460
language and call in applications to
 

00:00:35.460 --> 00:00:38.619
language and call in applications to
accomplish this art does two things it

00:00:38.619 --> 00:00:38.629
accomplish this art does two things it
 

00:00:38.629 --> 00:00:41.660
accomplish this art does two things it
executes text files the intermediate

00:00:41.660 --> 00:00:41.670
executes text files the intermediate
 

00:00:41.670 --> 00:00:43.790
executes text files the intermediate
representation of android applications

00:00:43.790 --> 00:00:43.800
representation of android applications
 

00:00:43.800 --> 00:00:46.479
representation of android applications
through a hybrid model consisting of

00:00:46.479 --> 00:00:46.489
through a hybrid model consisting of
 

00:00:46.489 --> 00:00:49.700
through a hybrid model consisting of
interpretation just-in-time compilation

00:00:49.700 --> 00:00:49.710
interpretation just-in-time compilation
 

00:00:49.710 --> 00:00:52.490
interpretation just-in-time compilation
and profile based ahead of time

00:00:52.490 --> 00:00:52.500
and profile based ahead of time
 

00:00:52.500 --> 00:00:56.810
and profile based ahead of time
compilation art also does memory

00:00:56.810 --> 00:00:56.820
compilation art also does memory
 

00:00:56.820 --> 00:00:58.520
compilation art also does memory
management for Android applications

00:00:58.520 --> 00:00:58.530
management for Android applications
 

00:00:58.530 --> 00:01:01.160
management for Android applications
through an automatic automatic

00:01:01.160 --> 00:01:01.170
through an automatic automatic
 

00:01:01.170 --> 00:01:04.539
through an automatic automatic
reclamation through a garbage collector

00:01:04.539 --> 00:01:04.549
reclamation through a garbage collector
 

00:01:04.549 --> 00:01:07.280
reclamation through a garbage collector
this is a concurrent compacting garbage

00:01:07.280 --> 00:01:07.290
this is a concurrent compacting garbage
 

00:01:07.290 --> 00:01:09.020
this is a concurrent compacting garbage
collector so that there is less jank for

00:01:09.020 --> 00:01:09.030
collector so that there is less jank for
 

00:01:09.030 --> 00:01:14.480
collector so that there is less jank for
your applications now let's look at how

00:01:14.480 --> 00:01:14.490
your applications now let's look at how
 

00:01:14.490 --> 00:01:16.429
your applications now let's look at how
art has changed over the last few years

00:01:16.429 --> 00:01:16.439
art has changed over the last few years
 

00:01:16.439 --> 00:01:19.429
art has changed over the last few years
over the years there have been many

00:01:19.429 --> 00:01:19.439
over the years there have been many
 

00:01:19.439 --> 00:01:22.550
over the years there have been many
improvements to art in new got we

00:01:22.550 --> 00:01:22.560
improvements to art in new got we
 

00:01:22.560 --> 00:01:25.100
improvements to art in new got we
introduced profile guided compilation to

00:01:25.100 --> 00:01:25.110
introduced profile guided compilation to
 

00:01:25.110 --> 00:01:27.710
introduced profile guided compilation to
improve applications startup time reduce

00:01:27.710 --> 00:01:27.720
improve applications startup time reduce
 

00:01:27.720 --> 00:01:29.840
improve applications startup time reduce
memory usage and reduce storage

00:01:29.840 --> 00:01:29.850
memory usage and reduce storage
 

00:01:29.850 --> 00:01:34.640
memory usage and reduce storage
requirements also in new got we added a

00:01:34.640 --> 00:01:34.650
requirements also in new got we added a
 

00:01:34.650 --> 00:01:38.090
requirements also in new got we added a
a gyp much like dalvik used to have this

00:01:38.090 --> 00:01:38.100
a gyp much like dalvik used to have this
 

00:01:38.100 --> 00:01:39.230
a gyp much like dalvik used to have this
was done to remove the need for

00:01:39.230 --> 00:01:39.240
was done to remove the need for
 

00:01:39.240 --> 00:01:42.050
was done to remove the need for
optimizing apps that was kind of a big

00:01:42.050 --> 00:01:42.060
optimizing apps that was kind of a big
 

00:01:42.060 --> 00:01:44.679
optimizing apps that was kind of a big
problem during Android system updates

00:01:44.679 --> 00:01:44.689
problem during Android system updates
 

00:01:44.689 --> 00:01:49.190
problem during Android system updates
and in Oreo we added a new concurrent

00:01:49.190 --> 00:01:49.200
and in Oreo we added a new concurrent
 

00:01:49.200 --> 00:01:51.710
and in Oreo we added a new concurrent
compacting garbage collector to reduce

00:01:51.710 --> 00:01:51.720
compacting garbage collector to reduce
 

00:01:51.720 --> 00:01:54.830
compacting garbage collector to reduce
ram requirements have less jank as well

00:01:54.830 --> 00:01:54.840
ram requirements have less jank as well
 

00:01:54.840 --> 00:01:58.340
ram requirements have less jank as well
as accelerate allocations as you can see

00:01:58.340 --> 00:01:58.350
as accelerate allocations as you can see
 

00:01:58.350 --> 00:02:00.679
as accelerate allocations as you can see
here on the slide this new garbage

00:02:00.679 --> 00:02:00.689
here on the slide this new garbage
 

00:02:00.689 --> 00:02:03.109
here on the slide this new garbage
collector and they build a new one

00:02:03.109 --> 00:02:03.119
collector and they build a new one
 

00:02:03.119 --> 00:02:05.810
collector and they build a new one
pointer allocator that is 17 times

00:02:05.810 --> 00:02:05.820
pointer allocator that is 17 times
 

00:02:05.820 --> 00:02:08.449
pointer allocator that is 17 times
faster than the allocator in dalvik or

00:02:08.449 --> 00:02:08.459
faster than the allocator in dalvik or
 

00:02:08.459 --> 00:02:11.260
faster than the allocator in dalvik or
in KitKat

00:02:11.260 --> 00:02:11.270
 
 

00:02:11.270 --> 00:02:14.240
 
now we talked about what happened in the

00:02:14.240 --> 00:02:14.250
now we talked about what happened in the
 

00:02:14.250 --> 00:02:18.050
now we talked about what happened in the
past the West Loop in Android P first of

00:02:18.050 --> 00:02:18.060
past the West Loop in Android P first of
 

00:02:18.060 --> 00:02:20.540
past the West Loop in Android P first of
all there are new compiler optimizations

00:02:20.540 --> 00:02:20.550
all there are new compiler optimizations
 

00:02:20.550 --> 00:02:22.910
all there are new compiler optimizations
to help accelerate the performance of

00:02:22.910 --> 00:02:22.920
to help accelerate the performance of
 

00:02:22.920 --> 00:02:26.240
to help accelerate the performance of
calling code in Android this is

00:02:26.240 --> 00:02:26.250
calling code in Android this is
 

00:02:26.250 --> 00:02:28.520
calling code in Android this is
especially important since Collin is a

00:02:28.520 --> 00:02:28.530
especially important since Collin is a
 

00:02:28.530 --> 00:02:31.040
especially important since Collin is a
first-class programming language for

00:02:31.040 --> 00:02:31.050
first-class programming language for
 

00:02:31.050 --> 00:02:35.210
first-class programming language for
Android development next up we have

00:02:35.210 --> 00:02:35.220
Android development next up we have
 

00:02:35.220 --> 00:02:38.180
Android development next up we have
memory and storage optimizations to help

00:02:38.180 --> 00:02:38.190
memory and storage optimizations to help
 

00:02:38.190 --> 00:02:40.640
memory and storage optimizations to help
entry-level devices such as Android Go

00:02:40.640 --> 00:02:40.650
entry-level devices such as Android Go
 

00:02:40.650 --> 00:02:43.130
entry-level devices such as Android Go
devices this is important to help

00:02:43.130 --> 00:02:43.140
devices this is important to help
 

00:02:43.140 --> 00:02:44.480
devices this is important to help
improve the performance for the next

00:02:44.480 --> 00:02:44.490
improve the performance for the next
 

00:02:44.490 --> 00:02:49.250
improve the performance for the next
billion users and finally we have cloud

00:02:49.250 --> 00:02:49.260
billion users and finally we have cloud
 

00:02:49.260 --> 00:02:53.000
billion users and finally we have cloud
profiles device collected profiles from

00:02:53.000 --> 00:02:53.010
profiles device collected profiles from
 

00:02:53.010 --> 00:02:55.250
profiles device collected profiles from
the just-in-time compiler are uploaded

00:02:55.250 --> 00:02:55.260
the just-in-time compiler are uploaded
 

00:02:55.260 --> 00:02:58.190
the just-in-time compiler are uploaded
and aggregated in the cloud to enable

00:02:58.190 --> 00:02:58.200
and aggregated in the cloud to enable
 

00:02:58.200 --> 00:03:00.290
and aggregated in the cloud to enable
faster performance directly after

00:03:00.290 --> 00:03:00.300
faster performance directly after
 

00:03:00.300 --> 00:03:06.080
faster performance directly after
installation of applications ok so let's

00:03:06.080 --> 00:03:06.090
installation of applications ok so let's
 

00:03:06.090 --> 00:03:09.920
installation of applications ok so let's
start with Collin last year we announced

00:03:09.920 --> 00:03:09.930
start with Collin last year we announced
 

00:03:09.930 --> 00:03:11.960
start with Collin last year we announced
Collin as a first class officially

00:03:11.960 --> 00:03:11.970
Collin as a first class officially
 

00:03:11.970 --> 00:03:13.580
Collin as a first class officially
supported programming language for

00:03:13.580 --> 00:03:13.590
supported programming language for
 

00:03:13.590 --> 00:03:15.140
supported programming language for
Android development and then we began to

00:03:15.140 --> 00:03:15.150
Android development and then we began to
 

00:03:15.150 --> 00:03:18.620
Android development and then we began to
investigate the performance why Collin

00:03:18.620 --> 00:03:18.630
investigate the performance why Collin
 

00:03:18.630 --> 00:03:21.100
investigate the performance why Collin
you might ask well Collin is a safe

00:03:21.100 --> 00:03:21.110
you might ask well Collin is a safe
 

00:03:21.110 --> 00:03:23.540
you might ask well Collin is a safe
expressive concise object-oriented

00:03:23.540 --> 00:03:23.550
expressive concise object-oriented
 

00:03:23.550 --> 00:03:26.360
expressive concise object-oriented
language that is designed to be

00:03:26.360 --> 00:03:26.370
language that is designed to be
 

00:03:26.370 --> 00:03:30.890
language that is designed to be
interoperable with Java language the

00:03:30.890 --> 00:03:30.900
interoperable with Java language the
 

00:03:30.900 --> 00:03:33.980
interoperable with Java language the
reason art focuses on optimizing Collin

00:03:33.980 --> 00:03:33.990
reason art focuses on optimizing Collin
 

00:03:33.990 --> 00:03:36.890
reason art focuses on optimizing Collin
so that the developers can leverage all

00:03:36.890 --> 00:03:36.900
so that the developers can leverage all
 

00:03:36.900 --> 00:03:38.780
so that the developers can leverage all
of these language features while still

00:03:38.780 --> 00:03:38.790
of these language features while still
 

00:03:38.790 --> 00:03:43.840
of these language features while still
having fast and jank-free applications

00:03:43.840 --> 00:03:43.850
 
 

00:03:43.850 --> 00:03:46.250
 
let's see how it Collin optimizations

00:03:46.250 --> 00:03:46.260
let's see how it Collin optimizations
 

00:03:46.260 --> 00:03:47.930
let's see how it Collin optimizations
are normally performed inside of the

00:03:47.930 --> 00:03:47.940
are normally performed inside of the
 

00:03:47.940 --> 00:03:51.350
are normally performed inside of the
Android runtime usually optimizations

00:03:51.350 --> 00:03:51.360
Android runtime usually optimizations
 

00:03:51.360 --> 00:03:53.120
Android runtime usually optimizations
are performed in an investigative manner

00:03:53.120 --> 00:03:53.130
are performed in an investigative manner
 

00:03:53.130 --> 00:03:55.310
are performed in an investigative manner
and there's an order of preference for

00:03:55.310 --> 00:03:55.320
and there's an order of preference for
 

00:03:55.320 --> 00:03:57.200
and there's an order of preference for
fixing performance issues so that the

00:03:57.200 --> 00:03:57.210
fixing performance issues so that the
 

00:03:57.210 --> 00:03:59.690
fixing performance issues so that the
most amount of Collin applications can

00:03:59.690 --> 00:03:59.700
most amount of Collin applications can
 

00:03:59.700 --> 00:04:02.380
most amount of Collin applications can
actually benefit from the optimization

00:04:02.380 --> 00:04:02.390
actually benefit from the optimization
 

00:04:02.390 --> 00:04:05.630
actually benefit from the optimization
the preferred option is fixing a

00:04:05.630 --> 00:04:05.640
the preferred option is fixing a
 

00:04:05.640 --> 00:04:07.520
the preferred option is fixing a
performance issue inside of call link

00:04:07.520 --> 00:04:07.530
performance issue inside of call link
 

00:04:07.530 --> 00:04:10.280
performance issue inside of call link
and calling is the compiler developed to

00:04:10.280 --> 00:04:10.290
and calling is the compiler developed to
 

00:04:10.290 --> 00:04:13.520
and calling is the compiler developed to
byte jetbrains Google and Jeff reigns of

00:04:13.520 --> 00:04:13.530
byte jetbrains Google and Jeff reigns of
 

00:04:13.530 --> 00:04:15.560
byte jetbrains Google and Jeff reigns of
course work closely together on all

00:04:15.560 --> 00:04:15.570
course work closely together on all
 

00:04:15.570 --> 00:04:17.750
course work closely together on all
kinds of optimizations and fixes for

00:04:17.750 --> 00:04:17.760
kinds of optimizations and fixes for
 

00:04:17.760 --> 00:04:20.720
kinds of optimizations and fixes for
issues if we fix a performance issue

00:04:20.720 --> 00:04:20.730
issues if we fix a performance issue
 

00:04:20.730 --> 00:04:22.909
issues if we fix a performance issue
here it'll be able to be deployed to the

00:04:22.909 --> 00:04:22.919
here it'll be able to be deployed to the
 

00:04:22.919 --> 00:04:23.750
here it'll be able to be deployed to the
most amount of

00:04:23.750 --> 00:04:23.760
most amount of
 

00:04:23.760 --> 00:04:27.500
most amount of
applications alternatively if that

00:04:27.500 --> 00:04:27.510
applications alternatively if that
 

00:04:27.510 --> 00:04:29.990
applications alternatively if that
doesn't work then we consider fixing the

00:04:29.990 --> 00:04:30.000
doesn't work then we consider fixing the
 

00:04:30.000 --> 00:04:31.640
doesn't work then we consider fixing the
performance issue inside of byte code

00:04:31.640 --> 00:04:31.650
performance issue inside of byte code
 

00:04:31.650 --> 00:04:34.880
performance issue inside of byte code
converters fixing in the by code

00:04:34.880 --> 00:04:34.890
converters fixing in the by code
 

00:04:34.890 --> 00:04:36.860
converters fixing in the by code
converter will enable existing versions

00:04:36.860 --> 00:04:36.870
converter will enable existing versions
 

00:04:36.870 --> 00:04:38.660
converter will enable existing versions
of the Android platform to get the

00:04:38.660 --> 00:04:38.670
of the Android platform to get the
 

00:04:38.670 --> 00:04:42.560
of the Android platform to get the
performance fix and if that option

00:04:42.560 --> 00:04:42.570
performance fix and if that option
 

00:04:42.570 --> 00:04:45.500
performance fix and if that option
doesn't work the last option is to fix

00:04:45.500 --> 00:04:45.510
doesn't work the last option is to fix
 

00:04:45.510 --> 00:04:47.120
doesn't work the last option is to fix
the performance issue and the Android

00:04:47.120 --> 00:04:47.130
the performance issue and the Android
 

00:04:47.130 --> 00:04:50.450
the performance issue and the Android
runtime also known as art so the reason

00:04:50.450 --> 00:04:50.460
runtime also known as art so the reason
 

00:04:50.460 --> 00:04:52.640
runtime also known as art so the reason
that we might not want to fix an art

00:04:52.640 --> 00:04:52.650
that we might not want to fix an art
 

00:04:52.650 --> 00:04:54.800
that we might not want to fix an art
right away is because art is updated as

00:04:54.800 --> 00:04:54.810
right away is because art is updated as
 

00:04:54.810 --> 00:04:57.110
right away is because art is updated as
part of the android platform so that

00:04:57.110 --> 00:04:57.120
part of the android platform so that
 

00:04:57.120 --> 00:04:59.060
part of the android platform so that
means that not all devices will get the

00:04:59.060 --> 00:04:59.070
means that not all devices will get the
 

00:04:59.070 --> 00:05:05.300
means that not all devices will get the
fix now let's look at an example one

00:05:05.300 --> 00:05:05.310
fix now let's look at an example one
 

00:05:05.310 --> 00:05:07.280
fix now let's look at an example one
example of the calling optimization is

00:05:07.280 --> 00:05:07.290
example of the calling optimization is
 

00:05:07.290 --> 00:05:10.400
example of the calling optimization is
the parameter null check as you can see

00:05:10.400 --> 00:05:10.410
the parameter null check as you can see
 

00:05:10.410 --> 00:05:12.770
the parameter null check as you can see
here this is a simple method that just

00:05:12.770 --> 00:05:12.780
here this is a simple method that just
 

00:05:12.780 --> 00:05:15.590
here this is a simple method that just
returns the length of a string but the

00:05:15.590 --> 00:05:15.600
returns the length of a string but the
 

00:05:15.600 --> 00:05:19.820
returns the length of a string but the
string is nullable so what this means is

00:05:19.820 --> 00:05:19.830
string is nullable so what this means is
 

00:05:19.830 --> 00:05:21.980
string is nullable so what this means is
that the compiler inserts a null check

00:05:21.980 --> 00:05:21.990
that the compiler inserts a null check
 

00:05:21.990 --> 00:05:25.610
that the compiler inserts a null check
into the function byte code to actually

00:05:25.610 --> 00:05:25.620
into the function byte code to actually
 

00:05:25.620 --> 00:05:27.290
into the function byte code to actually
verify that the string is not null and

00:05:27.290 --> 00:05:27.300
verify that the string is not null and
 

00:05:27.300 --> 00:05:29.150
verify that the string is not null and
throw the corresponding exception if

00:05:29.150 --> 00:05:29.160
throw the corresponding exception if
 

00:05:29.160 --> 00:05:31.490
throw the corresponding exception if
required implemented in the byte code

00:05:31.490 --> 00:05:31.500
required implemented in the byte code
 

00:05:31.500 --> 00:05:33.710
required implemented in the byte code
the first step is loading the name of

00:05:33.710 --> 00:05:33.720
the first step is loading the name of
 

00:05:33.720 --> 00:05:35.780
the first step is loading the name of
the parameter and then invoking a

00:05:35.780 --> 00:05:35.790
the parameter and then invoking a
 

00:05:35.790 --> 00:05:38.630
the parameter and then invoking a
separate function to do the actual null

00:05:38.630 --> 00:05:38.640
separate function to do the actual null
 

00:05:38.640 --> 00:05:41.630
separate function to do the actual null
check there's some extra overhead here

00:05:41.630 --> 00:05:41.640
check there's some extra overhead here
 

00:05:41.640 --> 00:05:43.370
check there's some extra overhead here
as you might see because the invocation

00:05:43.370 --> 00:05:43.380
as you might see because the invocation
 

00:05:43.380 --> 00:05:45.710
as you might see because the invocation
in the common case you do the extra

00:05:45.710 --> 00:05:45.720
in the common case you do the extra
 

00:05:45.720 --> 00:05:47.390
in the common case you do the extra
invocation that goes to the function to

00:05:47.390 --> 00:05:47.400
invocation that goes to the function to
 

00:05:47.400 --> 00:05:49.580
invocation that goes to the function to
do the null check in this function in

00:05:49.580 --> 00:05:49.590
do the null check in this function in
 

00:05:49.590 --> 00:05:51.590
do the null check in this function in
turns if required called the third

00:05:51.590 --> 00:05:51.600
turns if required called the third
 

00:05:51.600 --> 00:05:54.080
turns if required called the third
function the throw the actual parameter

00:05:54.080 --> 00:05:54.090
function the throw the actual parameter
 

00:05:54.090 --> 00:05:58.010
function the throw the actual parameter
is null exception checks such as these

00:05:58.010 --> 00:05:58.020
is null exception checks such as these
 

00:05:58.020 --> 00:06:00.170
is null exception checks such as these
are commonly required for Java language

00:06:00.170 --> 00:06:00.180
are commonly required for Java language
 

00:06:00.180 --> 00:06:02.450
are commonly required for Java language
and call an interoperability because

00:06:02.450 --> 00:06:02.460
and call an interoperability because
 

00:06:02.460 --> 00:06:03.860
and call an interoperability because
Java language does not have a non

00:06:03.860 --> 00:06:03.870
Java language does not have a non
 

00:06:03.870 --> 00:06:07.310
Java language does not have a non
nullable property now let's see how we

00:06:07.310 --> 00:06:07.320
nullable property now let's see how we
 

00:06:07.320 --> 00:06:10.610
nullable property now let's see how we
can optimize this if we look at the

00:06:10.610 --> 00:06:10.620
can optimize this if we look at the
 

00:06:10.620 --> 00:06:12.260
can optimize this if we look at the
bytecode one of the first things we can

00:06:12.260 --> 00:06:12.270
bytecode one of the first things we can
 

00:06:12.270 --> 00:06:14.420
bytecode one of the first things we can
do is actually inline the method that

00:06:14.420 --> 00:06:14.430
do is actually inline the method that
 

00:06:14.430 --> 00:06:16.900
do is actually inline the method that
does the null check into the caller

00:06:16.900 --> 00:06:16.910
does the null check into the caller
 

00:06:16.910 --> 00:06:20.420
does the null check into the caller
after inlining this improves performance

00:06:20.420 --> 00:06:20.430
after inlining this improves performance
 

00:06:20.430 --> 00:06:22.550
after inlining this improves performance
because there's one less invocation and

00:06:22.550 --> 00:06:22.560
because there's one less invocation and
 

00:06:22.560 --> 00:06:24.650
because there's one less invocation and
from here you can see one other thing we

00:06:24.650 --> 00:06:24.660
from here you can see one other thing we
 

00:06:24.660 --> 00:06:27.020
from here you can see one other thing we
can do is that the the name of the

00:06:27.020 --> 00:06:27.030
can do is that the the name of the
 

00:06:27.030 --> 00:06:28.850
can do is that the the name of the
parameter is not actually required

00:06:28.850 --> 00:06:28.860
parameter is not actually required
 

00:06:28.860 --> 00:06:32.060
parameter is not actually required
unless as argument is null so from here

00:06:32.060 --> 00:06:32.070
unless as argument is null so from here
 

00:06:32.070 --> 00:06:34.129
unless as argument is null so from here
we can do code syncing

00:06:34.129 --> 00:06:34.139
we can do code syncing
 

00:06:34.139 --> 00:06:36.050
we can do code syncing
to move loading of the parameter name

00:06:36.050 --> 00:06:36.060
to move loading of the parameter name
 

00:06:36.060 --> 00:06:39.379
to move loading of the parameter name
inside of the conditional so overall

00:06:39.379 --> 00:06:39.389
inside of the conditional so overall
 

00:06:39.389 --> 00:06:41.420
inside of the conditional so overall
these two optimizations help performance

00:06:41.420 --> 00:06:41.430
these two optimizations help performance
 

00:06:41.430 --> 00:06:43.550
these two optimizations help performance
by removing one indication and Wynonna

00:06:43.550 --> 00:06:43.560
by removing one indication and Wynonna
 

00:06:43.560 --> 00:06:48.429
by removing one indication and Wynonna
loadings of a string literal

00:06:48.429 --> 00:06:48.439
 
 

00:06:48.439 --> 00:06:50.869
 
apart from this optimization we also

00:06:50.869 --> 00:06:50.879
apart from this optimization we also
 

00:06:50.879 --> 00:06:52.730
apart from this optimization we also
track collin performance on various

00:06:52.730 --> 00:06:52.740
track collin performance on various
 

00:06:52.740 --> 00:06:55.489
track collin performance on various
benchmarks other improvements here

00:06:55.489 --> 00:06:55.499
benchmarks other improvements here
 

00:06:55.499 --> 00:06:57.739
benchmarks other improvements here
include improved auto vectorization of

00:06:57.739 --> 00:06:57.749
include improved auto vectorization of
 

00:06:57.749 --> 00:07:00.739
include improved auto vectorization of
loops also intrinsic methods that are

00:07:00.739 --> 00:07:00.749
loops also intrinsic methods that are
 

00:07:00.749 --> 00:07:02.989
loops also intrinsic methods that are
specifically tailored for call encode

00:07:02.989 --> 00:07:02.999
specifically tailored for call encode
 

00:07:02.999 --> 00:07:05.540
specifically tailored for call encode
help improve performance there so the

00:07:05.540 --> 00:07:05.550
help improve performance there so the
 

00:07:05.550 --> 00:07:06.890
help improve performance there so the
art team is always working on improving

00:07:06.890 --> 00:07:06.900
art team is always working on improving
 

00:07:06.900 --> 00:07:12.080
art team is always working on improving
this performance okay now that we're

00:07:12.080 --> 00:07:12.090
this performance okay now that we're
 

00:07:12.090 --> 00:07:13.610
this performance okay now that we're
done Colin what about memory and storage

00:07:13.610 --> 00:07:13.620
done Colin what about memory and storage
 

00:07:13.620 --> 00:07:15.219
done Colin what about memory and storage
improvements

00:07:15.219 --> 00:07:15.229
improvements
 

00:07:15.229 --> 00:07:17.839
improvements
so since art is responsible for Java

00:07:17.839 --> 00:07:17.849
so since art is responsible for Java
 

00:07:17.849 --> 00:07:20.420
so since art is responsible for Java
language and Colin applications also

00:07:20.420 --> 00:07:20.430
language and Colin applications also
 

00:07:20.430 --> 00:07:21.740
language and Colin applications also
pretty important to just kind of make

00:07:21.740 --> 00:07:21.750
pretty important to just kind of make
 

00:07:21.750 --> 00:07:23.029
pretty important to just kind of make
sure that the programs don't use too

00:07:23.029 --> 00:07:23.039
sure that the programs don't use too
 

00:07:23.039 --> 00:07:24.709
sure that the programs don't use too
much memory I'd take too much space on

00:07:24.709 --> 00:07:24.719
much memory I'd take too much space on
 

00:07:24.719 --> 00:07:27.079
much memory I'd take too much space on
the device there have been several

00:07:27.079 --> 00:07:27.089
the device there have been several
 

00:07:27.089 --> 00:07:29.140
the device there have been several
improvements focusing on this area

00:07:29.140 --> 00:07:29.150
improvements focusing on this area
 

00:07:29.150 --> 00:07:31.339
improvements focusing on this area
including reducing the amount of space

00:07:31.339 --> 00:07:31.349
including reducing the amount of space
 

00:07:31.349 --> 00:07:36.700
including reducing the amount of space
and memory usage required by Dex files

00:07:36.700 --> 00:07:36.710
 
 

00:07:36.710 --> 00:07:39.559
 
now why are a mass storage import up in

00:07:39.559 --> 00:07:39.569
now why are a mass storage import up in
 

00:07:39.569 --> 00:07:42.079
now why are a mass storage import up in
storage optimizations important well

00:07:42.079 --> 00:07:42.089
storage optimizations important well
 

00:07:42.089 --> 00:07:44.029
storage optimizations important well
recall a lot last year we introduced a

00:07:44.029 --> 00:07:44.039
recall a lot last year we introduced a
 

00:07:44.039 --> 00:07:44.990
recall a lot last year we introduced a
new initiative called

00:07:44.990 --> 00:07:45.000
new initiative called
 

00:07:45.000 --> 00:07:47.329
new initiative called
Android go aiming at running the latest

00:07:47.329 --> 00:07:47.339
Android go aiming at running the latest
 

00:07:47.339 --> 00:07:48.860
Android go aiming at running the latest
versions of Android on entry-level

00:07:48.860 --> 00:07:48.870
versions of Android on entry-level
 

00:07:48.870 --> 00:07:53.119
versions of Android on entry-level
devices since these devices typically

00:07:53.119 --> 00:07:53.129
devices since these devices typically
 

00:07:53.129 --> 00:07:55.399
devices since these devices typically
have one gigabyte or less of RAM and

00:07:55.399 --> 00:07:55.409
have one gigabyte or less of RAM and
 

00:07:55.409 --> 00:07:57.860
have one gigabyte or less of RAM and
eight gigabytes or or less of storage

00:07:57.860 --> 00:07:57.870
eight gigabytes or or less of storage
 

00:07:57.870 --> 00:07:59.839
eight gigabytes or or less of storage
it's kind of important to focus on

00:07:59.839 --> 00:07:59.849
it's kind of important to focus on
 

00:07:59.849 --> 00:08:02.629
it's kind of important to focus on
optimizing these areas so that the users

00:08:02.629 --> 00:08:02.639
optimizing these areas so that the users
 

00:08:02.639 --> 00:08:04.969
optimizing these areas so that the users
can run enough applications and install

00:08:04.969 --> 00:08:04.979
can run enough applications and install
 

00:08:04.979 --> 00:08:06.800
can run enough applications and install
as many applications as they or more

00:08:06.800 --> 00:08:06.810
as many applications as they or more
 

00:08:06.810 --> 00:08:08.779
as many applications as they or more
applications than they would otherwise

00:08:08.779 --> 00:08:08.789
applications than they would otherwise
 

00:08:08.789 --> 00:08:12.079
applications than they would otherwise
be able to now this isn't just for

00:08:12.079 --> 00:08:12.089
be able to now this isn't just for
 

00:08:12.089 --> 00:08:14.839
be able to now this isn't just for
Android go premium devices also benefit

00:08:14.839 --> 00:08:14.849
Android go premium devices also benefit
 

00:08:14.849 --> 00:08:16.339
Android go premium devices also benefit
from optimizations in these two areas

00:08:16.339 --> 00:08:16.349
from optimizations in these two areas
 

00:08:16.349 --> 00:08:18.309
from optimizations in these two areas
but since they have more resources

00:08:18.309 --> 00:08:18.319
but since they have more resources
 

00:08:18.319 --> 00:08:23.749
but since they have more resources
normally is to a lesser degree anyways

00:08:23.749 --> 00:08:23.759
normally is to a lesser degree anyways
 

00:08:23.759 --> 00:08:26.059
normally is to a lesser degree anyways
before we talk about RAM and storage

00:08:26.059 --> 00:08:26.069
before we talk about RAM and storage
 

00:08:26.069 --> 00:08:28.010
before we talk about RAM and storage
optimizations let's do a little bit of a

00:08:28.010 --> 00:08:28.020
optimizations let's do a little bit of a
 

00:08:28.020 --> 00:08:30.379
optimizations let's do a little bit of a
review about how applications work on

00:08:30.379 --> 00:08:30.389
review about how applications work on
 

00:08:30.389 --> 00:08:34.370
review about how applications work on
your Android devices an application

00:08:34.370 --> 00:08:34.380
your Android devices an application
 

00:08:34.380 --> 00:08:36.259
your Android devices an application
normally comes in an application package

00:08:36.259 --> 00:08:36.269
normally comes in an application package
 

00:08:36.269 --> 00:08:39.769
normally comes in an application package
kit also known as an apk inside of the

00:08:39.769 --> 00:08:39.779
kit also known as an apk inside of the
 

00:08:39.779 --> 00:08:41.959
kit also known as an apk inside of the
apk there are usually one or more dalvik

00:08:41.959 --> 00:08:41.969
apk there are usually one or more dalvik
 

00:08:41.969 --> 00:08:44.300
apk there are usually one or more dalvik
executable files also known as Dex files

00:08:44.300 --> 00:08:44.310
executable files also known as Dex files
 

00:08:44.310 --> 00:08:46.810
executable files also known as Dex files
that contain instructions that art

00:08:46.810 --> 00:08:46.820
that contain instructions that art
 

00:08:46.820 --> 00:08:48.370
that contain instructions that art
use this to either interpret or compile

00:08:48.370 --> 00:08:48.380
use this to either interpret or compile
 

00:08:48.380 --> 00:08:52.150
use this to either interpret or compile
your application this Dex files are

00:08:52.150 --> 00:08:52.160
your application this Dex files are
 

00:08:52.160 --> 00:08:54.010
your application this Dex files are
required to be quickly accessed during

00:08:54.010 --> 00:08:54.020
required to be quickly accessed during
 

00:08:54.020 --> 00:08:57.100
required to be quickly accessed during
execution they were mapped directly into

00:08:57.100 --> 00:08:57.110
execution they were mapped directly into
 

00:08:57.110 --> 00:09:00.160
execution they were mapped directly into
memory during applications startup so

00:09:00.160 --> 00:09:00.170
memory during applications startup so
 

00:09:00.170 --> 00:09:02.380
memory during applications startup so
that art can have quick access this

00:09:02.380 --> 00:09:02.390
that art can have quick access this
 

00:09:02.390 --> 00:09:04.060
that art can have quick access this
means that this there is a startup cost

00:09:04.060 --> 00:09:04.070
means that this there is a startup cost
 

00:09:04.070 --> 00:09:06.340
means that this there is a startup cost
as well as a ram cost proportional to

00:09:06.340 --> 00:09:06.350
as well as a ram cost proportional to
 

00:09:06.350 --> 00:09:08.580
as well as a ram cost proportional to
the size of the Dex file

00:09:08.580 --> 00:09:08.590
the size of the Dex file
 

00:09:08.590 --> 00:09:10.930
the size of the Dex file
finally Dex files are usually stored

00:09:10.930 --> 00:09:10.940
finally Dex files are usually stored
 

00:09:10.940 --> 00:09:13.750
finally Dex files are usually stored
twice on the device the first place they

00:09:13.750 --> 00:09:13.760
twice on the device the first place they
 

00:09:13.760 --> 00:09:14.830
twice on the device the first place they
are stored is inside of the application

00:09:14.830 --> 00:09:14.840
are stored is inside of the application
 

00:09:14.840 --> 00:09:17.410
are stored is inside of the application
package kit and then the second place

00:09:17.410 --> 00:09:17.420
package kit and then the second place
 

00:09:17.420 --> 00:09:19.180
package kit and then the second place
they are stored is in an extracted form

00:09:19.180 --> 00:09:19.190
they are stored is in an extracted form
 

00:09:19.190 --> 00:09:20.890
they are stored is in an extracted form
so that art can have faster access

00:09:20.890 --> 00:09:20.900
so that art can have faster access
 

00:09:20.900 --> 00:09:22.750
so that art can have faster access
during application startup without

00:09:22.750 --> 00:09:22.760
during application startup without
 

00:09:22.760 --> 00:09:24.160
during application startup without
needing to extract from the zip file

00:09:24.160 --> 00:09:24.170
needing to extract from the zip file
 

00:09:24.170 --> 00:09:28.510
needing to extract from the zip file
each time now let's take a closer look

00:09:28.510 --> 00:09:28.520
each time now let's take a closer look
 

00:09:28.520 --> 00:09:32.710
each time now let's take a closer look
at the contents of Dex files within a

00:09:32.710 --> 00:09:32.720
at the contents of Dex files within a
 

00:09:32.720 --> 00:09:34.030
at the contents of Dex files within a
Dex file there are several sections

00:09:34.030 --> 00:09:34.040
Dex file there are several sections
 

00:09:34.040 --> 00:09:35.620
Dex file there are several sections
containing different types of data

00:09:35.620 --> 00:09:35.630
containing different types of data
 

00:09:35.630 --> 00:09:39.520
containing different types of data
related to the applications but where is

00:09:39.520 --> 00:09:39.530
related to the applications but where is
 

00:09:39.530 --> 00:09:43.060
related to the applications but where is
the space going into Dex file one way to

00:09:43.060 --> 00:09:43.070
the space going into Dex file one way to
 

00:09:43.070 --> 00:09:44.860
the space going into Dex file one way to
do this is you can kind of calculate

00:09:44.860 --> 00:09:44.870
do this is you can kind of calculate
 

00:09:44.870 --> 00:09:46.390
do this is you can kind of calculate
where the space is going for you to Dex

00:09:46.390 --> 00:09:46.400
where the space is going for you to Dex
 

00:09:46.400 --> 00:09:49.030
where the space is going for you to Dex
file and average out the results this

00:09:49.030 --> 00:09:49.040
file and average out the results this
 

00:09:49.040 --> 00:09:50.950
file and average out the results this
chart here is for the top 99 most

00:09:50.950 --> 00:09:50.960
chart here is for the top 99 most
 

00:09:50.960 --> 00:09:52.630
chart here is for the top 99 most
downloaded applications in the Play

00:09:52.630 --> 00:09:52.640
downloaded applications in the Play
 

00:09:52.640 --> 00:09:54.790
downloaded applications in the Play
Store and you can see that the largest

00:09:54.790 --> 00:09:54.800
Store and you can see that the largest
 

00:09:54.800 --> 00:09:56.680
Store and you can see that the largest
section is the code item section

00:09:56.680 --> 00:09:56.690
section is the code item section
 

00:09:56.690 --> 00:09:58.900
section is the code item section
containing the Dex instructions used by

00:09:58.900 --> 00:09:58.910
containing the Dex instructions used by
 

00:09:58.910 --> 00:10:02.920
containing the Dex instructions used by
art the next largest section is the

00:10:02.920 --> 00:10:02.930
art the next largest section is the
 

00:10:02.930 --> 00:10:04.930
art the next largest section is the
string data section and this section

00:10:04.930 --> 00:10:04.940
string data section and this section
 

00:10:04.940 --> 00:10:06.940
string data section and this section
contains the string literals loaded from

00:10:06.940 --> 00:10:06.950
contains the string literals loaded from
 

00:10:06.950 --> 00:10:09.820
contains the string literals loaded from
code method names class names and field

00:10:09.820 --> 00:10:09.830
code method names class names and field
 

00:10:09.830 --> 00:10:13.990
code method names class names and field
names combined these two sections are

00:10:13.990 --> 00:10:14.000
names combined these two sections are
 

00:10:14.000 --> 00:10:16.960
names combined these two sections are
around 64% of the Dex file so they're

00:10:16.960 --> 00:10:16.970
around 64% of the Dex file so they're
 

00:10:16.970 --> 00:10:21.040
around 64% of the Dex file so they're
pretty important areas to optimise let's

00:10:21.040 --> 00:10:21.050
pretty important areas to optimise let's
 

00:10:21.050 --> 00:10:22.240
pretty important areas to optimise let's
see if there's a way we can reduce the

00:10:22.240 --> 00:10:22.250
see if there's a way we can reduce the
 

00:10:22.250 --> 00:10:26.080
see if there's a way we can reduce the
size of these sections one new feature

00:10:26.080 --> 00:10:26.090
size of these sections one new feature
 

00:10:26.090 --> 00:10:28.540
size of these sections one new feature
introduced in Android P is called

00:10:28.540 --> 00:10:28.550
introduced in Android P is called
 

00:10:28.550 --> 00:10:32.110
introduced in Android P is called
compact Dex the goal of compact Dex is

00:10:32.110 --> 00:10:32.120
compact Dex the goal of compact Dex is
 

00:10:32.120 --> 00:10:35.140
compact Dex the goal of compact Dex is
simple reduce the size of Dex files to

00:10:35.140 --> 00:10:35.150
simple reduce the size of Dex files to
 

00:10:35.150 --> 00:10:37.210
simple reduce the size of Dex files to
get memory and storage savings on the

00:10:37.210 --> 00:10:37.220
get memory and storage savings on the
 

00:10:37.220 --> 00:10:41.350
get memory and storage savings on the
device from the previous slide we saw

00:10:41.350 --> 00:10:41.360
device from the previous slide we saw
 

00:10:41.360 --> 00:10:42.760
device from the previous slide we saw
that some sections are larger than

00:10:42.760 --> 00:10:42.770
that some sections are larger than
 

00:10:42.770 --> 00:10:45.130
that some sections are larger than
others so it's important to just focus

00:10:45.130 --> 00:10:45.140
others so it's important to just focus
 

00:10:45.140 --> 00:10:46.630
others so it's important to just focus
on the large sections to get the most

00:10:46.630 --> 00:10:46.640
on the large sections to get the most
 

00:10:46.640 --> 00:10:51.070
on the large sections to get the most
savings where's our code items there are

00:10:51.070 --> 00:10:51.080
savings where's our code items there are
 

00:10:51.080 --> 00:10:52.870
savings where's our code items there are
more often deduplicated and there also

00:10:52.870 --> 00:10:52.880
more often deduplicated and there also
 

00:10:52.880 --> 00:10:55.420
more often deduplicated and there also
have their headers from save a space for

00:10:55.420 --> 00:10:55.430
have their headers from save a space for
 

00:10:55.430 --> 00:10:57.070
have their headers from save a space for
each method essentially inside of the

00:10:57.070 --> 00:10:57.080
each method essentially inside of the
 

00:10:57.080 --> 00:10:58.590
each method essentially inside of the
application

00:10:58.590 --> 00:10:58.600
application
 

00:10:58.600 --> 00:11:01.020
application
and another thing here worth noting

00:11:01.020 --> 00:11:01.030
and another thing here worth noting
 

00:11:01.030 --> 00:11:02.880
and another thing here worth noting
about the string Deena is that large

00:11:02.880 --> 00:11:02.890
about the string Deena is that large
 

00:11:02.890 --> 00:11:04.980
about the string Deena is that large
applications frequently shipped multiple

00:11:04.980 --> 00:11:04.990
applications frequently shipped multiple
 

00:11:04.990 --> 00:11:07.140
applications frequently shipped multiple
Dex files in their apk because of

00:11:07.140 --> 00:11:07.150
Dex files in their apk because of
 

00:11:07.150 --> 00:11:08.810
Dex files in their apk because of
dx-format limitations

00:11:08.810 --> 00:11:08.820
dx-format limitations
 

00:11:08.820 --> 00:11:11.880
dx-format limitations
specifically the 64k method limit means

00:11:11.880 --> 00:11:11.890
specifically the 64k method limit means
 

00:11:11.890 --> 00:11:13.860
specifically the 64k method limit means
that you can only have 64,000 kind of

00:11:13.860 --> 00:11:13.870
that you can only have 64,000 kind of
 

00:11:13.870 --> 00:11:15.480
that you can only have 64,000 kind of
method references in a single dex file

00:11:15.480 --> 00:11:15.490
method references in a single dex file
 

00:11:15.490 --> 00:11:17.040
method references in a single dex file
before needing to add another one to

00:11:17.040 --> 00:11:17.050
before needing to add another one to
 

00:11:17.050 --> 00:11:20.520
before needing to add another one to
your application and every time you add

00:11:20.520 --> 00:11:20.530
your application and every time you add
 

00:11:20.530 --> 00:11:22.620
your application and every time you add
another dex file this causes duplication

00:11:22.620 --> 00:11:22.630
another dex file this causes duplication
 

00:11:22.630 --> 00:11:24.750
another dex file this causes duplication
specifically a string data that could

00:11:24.750 --> 00:11:24.760
specifically a string data that could
 

00:11:24.760 --> 00:11:27.810
specifically a string data that could
otherwise be stored only once compact

00:11:27.810 --> 00:11:27.820
otherwise be stored only once compact
 

00:11:27.820 --> 00:11:29.790
otherwise be stored only once compact
Dex shrinks this by providing

00:11:29.790 --> 00:11:29.800
Dex shrinks this by providing
 

00:11:29.800 --> 00:11:31.890
Dex shrinks this by providing
deduplication across the Dex files in

00:11:31.890 --> 00:11:31.900
deduplication across the Dex files in
 

00:11:31.900 --> 00:11:36.180
deduplication across the Dex files in
the apk now let's go to the generation

00:11:36.180 --> 00:11:36.190
the apk now let's go to the generation
 

00:11:36.190 --> 00:11:41.280
the apk now let's go to the generation
process first let's look at how Dex

00:11:41.280 --> 00:11:41.290
process first let's look at how Dex
 

00:11:41.290 --> 00:11:44.820
process first let's look at how Dex
files are processed on android oreo the

00:11:44.820 --> 00:11:44.830
files are processed on android oreo the
 

00:11:44.830 --> 00:11:47.100
files are processed on android oreo the
first step run by Dex toad a head of

00:11:47.100 --> 00:11:47.110
first step run by Dex toad a head of
 

00:11:47.110 --> 00:11:49.140
first step run by Dex toad a head of
time compiler is that the Dex files are

00:11:49.140 --> 00:11:49.150
time compiler is that the Dex files are
 

00:11:49.150 --> 00:11:51.690
time compiler is that the Dex files are
extracted from the apk and stored in a

00:11:51.690 --> 00:11:51.700
extracted from the apk and stored in a
 

00:11:51.700 --> 00:11:54.360
extracted from the apk and stored in a
be Dex container the reason they are

00:11:54.360 --> 00:11:54.370
be Dex container the reason they are
 

00:11:54.370 --> 00:11:56.070
be Dex container the reason they are
extracted as I mentioned earlier is so

00:11:56.070 --> 00:11:56.080
extracted as I mentioned earlier is so
 

00:11:56.080 --> 00:11:57.450
extracted as I mentioned earlier is so
that they can be loaded more efficiently

00:11:57.450 --> 00:11:57.460
that they can be loaded more efficiently
 

00:11:57.460 --> 00:12:02.100
that they can be loaded more efficiently
during applications startup one other

00:12:02.100 --> 00:12:02.110
during applications startup one other
 

00:12:02.110 --> 00:12:03.840
during applications startup one other
thing here worth noting is the profile

00:12:03.840 --> 00:12:03.850
thing here worth noting is the profile
 

00:12:03.850 --> 00:12:06.510
thing here worth noting is the profile
the profile as introduced in nougat is

00:12:06.510 --> 00:12:06.520
the profile as introduced in nougat is
 

00:12:06.520 --> 00:12:09.660
the profile as introduced in nougat is
uh essentially data about the

00:12:09.660 --> 00:12:09.670
uh essentially data about the
 

00:12:09.670 --> 00:12:11.400
uh essentially data about the
application execution including which

00:12:11.400 --> 00:12:11.410
application execution including which
 

00:12:11.410 --> 00:12:14.040
application execution including which
methods are executed during startup what

00:12:14.040 --> 00:12:14.050
methods are executed during startup what
 

00:12:14.050 --> 00:12:15.900
methods are executed during startup what
methods are hot so compiled by the JIT

00:12:15.900 --> 00:12:15.910
methods are hot so compiled by the JIT
 

00:12:15.910 --> 00:12:19.440
methods are hot so compiled by the JIT
compiler and what classes are loaded on

00:12:19.440 --> 00:12:19.450
compiler and what classes are loaded on
 

00:12:19.450 --> 00:12:21.540
compiler and what classes are loaded on
Oreo we are we're already optimizing the

00:12:21.540 --> 00:12:21.550
Oreo we are we're already optimizing the
 

00:12:21.550 --> 00:12:23.310
Oreo we are we're already optimizing the
Dex file stored in the be Dex container

00:12:23.310 --> 00:12:23.320
Dex file stored in the be Dex container
 

00:12:23.320 --> 00:12:25.920
Dex file stored in the be Dex container
by late applying layout optimizations

00:12:25.920 --> 00:12:25.930
by late applying layout optimizations
 

00:12:25.930 --> 00:12:28.530
by late applying layout optimizations
and also we were deciding which methods

00:12:28.530 --> 00:12:28.540
and also we were deciding which methods
 

00:12:28.540 --> 00:12:30.780
and also we were deciding which methods
to compile based on what methods are hot

00:12:30.780 --> 00:12:30.790
to compile based on what methods are hot
 

00:12:30.790 --> 00:12:36.570
to compile based on what methods are hot
in the Dex file now let's look at Dex

00:12:36.570 --> 00:12:36.580
in the Dex file now let's look at Dex
 

00:12:36.580 --> 00:12:40.860
in the Dex file now let's look at Dex
processing on Android pee in Android pee

00:12:40.860 --> 00:12:40.870
processing on Android pee in Android pee
 

00:12:40.870 --> 00:12:42.810
processing on Android pee in Android pee
the out of time compiler now converts

00:12:42.810 --> 00:12:42.820
the out of time compiler now converts
 

00:12:42.820 --> 00:12:44.640
the out of time compiler now converts
the Dex files to a more efficient

00:12:44.640 --> 00:12:44.650
the Dex files to a more efficient
 

00:12:44.650 --> 00:12:47.340
the Dex files to a more efficient
compact Dex representation inside of the

00:12:47.340 --> 00:12:47.350
compact Dex representation inside of the
 

00:12:47.350 --> 00:12:50.820
compact Dex representation inside of the
container when the addition here is the

00:12:50.820 --> 00:12:50.830
container when the addition here is the
 

00:12:50.830 --> 00:12:52.880
container when the addition here is the
introduction of a shared data section

00:12:52.880 --> 00:12:52.890
introduction of a shared data section
 

00:12:52.890 --> 00:12:55.230
introduction of a shared data section
specifically data that's present in

00:12:55.230 --> 00:12:55.240
specifically data that's present in
 

00:12:55.240 --> 00:12:57.300
specifically data that's present in
multiple Dex files will be in the shared

00:12:57.300 --> 00:12:57.310
multiple Dex files will be in the shared
 

00:12:57.310 --> 00:12:59.130
multiple Dex files will be in the shared
data section only once so it kind of

00:12:59.130 --> 00:12:59.140
data section only once so it kind of
 

00:12:59.140 --> 00:13:01.500
data section only once so it kind of
deduplicate data that's commonly shared

00:13:01.500 --> 00:13:01.510
deduplicate data that's commonly shared
 

00:13:01.510 --> 00:13:03.600
deduplicate data that's commonly shared
and one of the most commonly shared

00:13:03.600 --> 00:13:03.610
and one of the most commonly shared
 

00:13:03.610 --> 00:13:05.910
and one of the most commonly shared
things here is the string data so this

00:13:05.910 --> 00:13:05.920
things here is the string data so this
 

00:13:05.920 --> 00:13:07.770
things here is the string data so this
is how we reduce the large string data

00:13:07.770 --> 00:13:07.780
is how we reduce the large string data
 

00:13:07.780 --> 00:13:08.590
is how we reduce the large string data
section that we saw

00:13:08.590 --> 00:13:08.600
section that we saw
 

00:13:08.600 --> 00:13:12.189
section that we saw
earlier finally since the conversion is

00:13:12.189 --> 00:13:12.199
earlier finally since the conversion is
 

00:13:12.199 --> 00:13:14.439
earlier finally since the conversion is
automatically done on device this means

00:13:14.439 --> 00:13:14.449
automatically done on device this means
 

00:13:14.449 --> 00:13:16.240
automatically done on device this means
that all existing applications can get

00:13:16.240 --> 00:13:16.250
that all existing applications can get
 

00:13:16.250 --> 00:13:18.009
that all existing applications can get
the benefits of compact decks without

00:13:18.009 --> 00:13:18.019
the benefits of compact decks without
 

00:13:18.019 --> 00:13:23.860
the benefits of compact decks without
needing to recompile their apks okay so

00:13:23.860 --> 00:13:23.870
needing to recompile their apks okay so
 

00:13:23.870 --> 00:13:25.389
needing to recompile their apks okay so
let's look at one example of how we

00:13:25.389 --> 00:13:25.399
let's look at one example of how we
 

00:13:25.399 --> 00:13:28.300
let's look at one example of how we
actually shrink the Dex code items apart

00:13:28.300 --> 00:13:28.310
actually shrink the Dex code items apart
 

00:13:28.310 --> 00:13:30.129
actually shrink the Dex code items apart
from the instructions each code item has

00:13:30.129 --> 00:13:30.139
from the instructions each code item has
 

00:13:30.139 --> 00:13:33.100
from the instructions each code item has
a 16 byte header and then most of the

00:13:33.100 --> 00:13:33.110
a 16 byte header and then most of the
 

00:13:33.110 --> 00:13:34.569
a 16 byte header and then most of the
values in the header are usually small

00:13:34.569 --> 00:13:34.579
values in the header are usually small
 

00:13:34.579 --> 00:13:38.680
values in the header are usually small
values so what we do here is we shrink

00:13:38.680 --> 00:13:38.690
values so what we do here is we shrink
 

00:13:38.690 --> 00:13:40.480
values so what we do here is we shrink
the fields in the header to be four bits

00:13:40.480 --> 00:13:40.490
the fields in the header to be four bits
 

00:13:40.490 --> 00:13:42.460
the fields in the header to be four bits
each and then we have an optional free

00:13:42.460 --> 00:13:42.470
each and then we have an optional free
 

00:13:42.470 --> 00:13:47.110
each and then we have an optional free
header to extend them as required the

00:13:47.110 --> 00:13:47.120
header to extend them as required the
 

00:13:47.120 --> 00:13:48.759
header to extend them as required the
pre header is 0 bytes in most of the

00:13:48.759 --> 00:13:48.769
pre header is 0 bytes in most of the
 

00:13:48.769 --> 00:13:50.680
pre header is 0 bytes in most of the
cases but can be up to 12 bytes in the

00:13:50.680 --> 00:13:50.690
cases but can be up to 12 bytes in the
 

00:13:50.690 --> 00:13:54.759
cases but can be up to 12 bytes in the
worst case so other than the pre header

00:13:54.759 --> 00:13:54.769
worst case so other than the pre header
 

00:13:54.769 --> 00:13:57.120
worst case so other than the pre header
we also shrink the instruction count

00:13:57.120 --> 00:13:57.130
we also shrink the instruction count
 

00:13:57.130 --> 00:13:59.559
we also shrink the instruction count
since the average method is not going to

00:13:59.559 --> 00:13:59.569
since the average method is not going to
 

00:13:59.569 --> 00:14:01.870
since the average method is not going to
be that large we shrink this down to 11

00:14:01.870 --> 00:14:01.880
be that large we shrink this down to 11
 

00:14:01.880 --> 00:14:04.300
be that large we shrink this down to 11
bits instead of 32 bits and use the five

00:14:04.300 --> 00:14:04.310
bits instead of 32 bits and use the five
 

00:14:04.310 --> 00:14:06.340
bits instead of 32 bits and use the five
remaining this four flags that are our

00:14:06.340 --> 00:14:06.350
remaining this four flags that are our
 

00:14:06.350 --> 00:14:10.960
remaining this four flags that are our
specific finally we move the debug

00:14:10.960 --> 00:14:10.970
specific finally we move the debug
 

00:14:10.970 --> 00:14:12.639
specific finally we move the debug
information into a separate space

00:14:12.639 --> 00:14:12.649
information into a separate space
 

00:14:12.649 --> 00:14:14.949
information into a separate space
sufficient table to help enable more

00:14:14.949 --> 00:14:14.959
sufficient table to help enable more
 

00:14:14.959 --> 00:14:18.249
sufficient table to help enable more
deduplication of the code items overall

00:14:18.249 --> 00:14:18.259
deduplication of the code items overall
 

00:14:18.259 --> 00:14:20.679
deduplication of the code items overall
this optimization saves around 12 bytes

00:14:20.679 --> 00:14:20.689
this optimization saves around 12 bytes
 

00:14:20.689 --> 00:14:25.350
this optimization saves around 12 bytes
per code item in the compact Dex file

00:14:25.350 --> 00:14:25.360
per code item in the compact Dex file
 

00:14:25.360 --> 00:14:29.769
per code item in the compact Dex file
and here are the results for the top 99

00:14:29.769 --> 00:14:29.779
and here are the results for the top 99
 

00:14:29.779 --> 00:14:32.829
and here are the results for the top 99
most outlet apks so the average space

00:14:32.829 --> 00:14:32.839
most outlet apks so the average space
 

00:14:32.839 --> 00:14:34.929
most outlet apks so the average space
required by the Dex files on a device is

00:14:34.929 --> 00:14:34.939
required by the Dex files on a device is
 

00:14:34.939 --> 00:14:37.679
required by the Dex files on a device is
around 11 point 6 percent smaller and

00:14:37.679 --> 00:14:37.689
around 11 point 6 percent smaller and
 

00:14:37.689 --> 00:14:40.179
around 11 point 6 percent smaller and
then also other than the storage savings

00:14:40.179 --> 00:14:40.189
then also other than the storage savings
 

00:14:40.189 --> 00:14:42.280
then also other than the storage savings
we also get memory savings because the

00:14:42.280 --> 00:14:42.290
we also get memory savings because the
 

00:14:42.290 --> 00:14:44.710
we also get memory savings because the
Dex files are resident in memory during

00:14:44.710 --> 00:14:44.720
Dex files are resident in memory during
 

00:14:44.720 --> 00:14:46.569
Dex files are resident in memory during
application usage at least partially

00:14:46.569 --> 00:14:46.579
application usage at least partially
 

00:14:46.579 --> 00:14:51.040
application usage at least partially
resident memory and one more thing here

00:14:51.040 --> 00:14:51.050
resident memory and one more thing here
 

00:14:51.050 --> 00:14:53.199
resident memory and one more thing here
let's go over the layout optimizations a

00:14:53.199 --> 00:14:53.209
let's go over the layout optimizations a
 

00:14:53.209 --> 00:14:56.230
let's go over the layout optimizations a
little bit so even though we had

00:14:56.230 --> 00:14:56.240
little bit so even though we had
 

00:14:56.240 --> 00:14:58.030
little bit so even though we had
introduced the JIT profiles in Android

00:14:58.030 --> 00:14:58.040
introduced the JIT profiles in Android
 

00:14:58.040 --> 00:14:59.740
introduced the JIT profiles in Android
and we did not have any layout

00:14:59.740 --> 00:14:59.750
and we did not have any layout
 

00:14:59.750 --> 00:15:02.350
and we did not have any layout
optimizations back then so what this

00:15:02.350 --> 00:15:02.360
optimizations back then so what this
 

00:15:02.360 --> 00:15:04.150
optimizations back then so what this
means the Dex is kind of randomly

00:15:04.150 --> 00:15:04.160
means the Dex is kind of randomly
 

00:15:04.160 --> 00:15:06.759
means the Dex is kind of randomly
ordered and not disregarding the usage

00:15:06.759 --> 00:15:06.769
ordered and not disregarding the usage
 

00:15:06.769 --> 00:15:11.590
ordered and not disregarding the usage
pattern in Android oh we added this type

00:15:11.590 --> 00:15:11.600
pattern in Android oh we added this type
 

00:15:11.600 --> 00:15:13.780
pattern in Android oh we added this type
of layout optimisation that groups the

00:15:13.780 --> 00:15:13.790
of layout optimisation that groups the
 

00:15:13.790 --> 00:15:15.400
of layout optimisation that groups the
methods used during applications start

00:15:15.400 --> 00:15:15.410
methods used during applications start
 

00:15:15.410 --> 00:15:17.379
methods used during applications start
up together and the message that are hot

00:15:17.379 --> 00:15:17.389
up together and the message that are hot
 

00:15:17.389 --> 00:15:19.179
up together and the message that are hot
so that means their code is frequently

00:15:19.179 --> 00:15:19.189
so that means their code is frequently
 

00:15:19.189 --> 00:15:20.110
so that means their code is frequently
accessed during

00:15:20.110 --> 00:15:20.120
accessed during
 

00:15:20.120 --> 00:15:23.140
accessed during
execution together this seems like a

00:15:23.140 --> 00:15:23.150
execution together this seems like a
 

00:15:23.150 --> 00:15:25.470
execution together this seems like a
pretty good a pretty big win so far

00:15:25.470 --> 00:15:25.480
pretty good a pretty big win so far
 

00:15:25.480 --> 00:15:30.400
pretty good a pretty big win so far
let's see what we did for Android P in

00:15:30.400 --> 00:15:30.410
let's see what we did for Android P in
 

00:15:30.410 --> 00:15:32.860
let's see what we did for Android P in
Android P we have more flexible profile

00:15:32.860 --> 00:15:32.870
Android P we have more flexible profile
 

00:15:32.870 --> 00:15:34.930
Android P we have more flexible profile
information which enables us to put the

00:15:34.930 --> 00:15:34.940
information which enables us to put the
 

00:15:34.940 --> 00:15:35.920
information which enables us to put the
methods that are used only during

00:15:35.920 --> 00:15:35.930
methods that are used only during
 

00:15:35.930 --> 00:15:38.710
methods that are used only during
startup together this helps reduce the

00:15:38.710 --> 00:15:38.720
startup together this helps reduce the
 

00:15:38.720 --> 00:15:40.480
startup together this helps reduce the
amount of memory used because the

00:15:40.480 --> 00:15:40.490
amount of memory used because the
 

00:15:40.490 --> 00:15:42.220
amount of memory used because the
application or the operating system can

00:15:42.220 --> 00:15:42.230
application or the operating system can
 

00:15:42.230 --> 00:15:43.630
application or the operating system can
remove those pages from memory after

00:15:43.630 --> 00:15:43.640
remove those pages from memory after
 

00:15:43.640 --> 00:15:47.260
remove those pages from memory after
startup we also put the hot code

00:15:47.260 --> 00:15:47.270
startup we also put the hot code
 

00:15:47.270 --> 00:15:48.910
startup we also put the hot code
together since it's frequently accessed

00:15:48.910 --> 00:15:48.920
together since it's frequently accessed
 

00:15:48.920 --> 00:15:52.420
together since it's frequently accessed
during execution and finally we put the

00:15:52.420 --> 00:15:52.430
during execution and finally we put the
 

00:15:52.430 --> 00:15:53.950
during execution and finally we put the
code I just never touched at all during

00:15:53.950 --> 00:15:53.960
code I just never touched at all during
 

00:15:53.960 --> 00:15:55.720
code I just never touched at all during
execution at the end so that is not

00:15:55.720 --> 00:15:55.730
execution at the end so that is not
 

00:15:55.730 --> 00:15:58.230
execution at the end so that is not
loaded into memory unless required and

00:15:58.230 --> 00:15:58.240
loaded into memory unless required and
 

00:15:58.240 --> 00:16:00.100
loaded into memory unless required and
the reason that these layout

00:16:00.100 --> 00:16:00.110
the reason that these layout
 

00:16:00.110 --> 00:16:01.960
the reason that these layout
optimizations are important is because

00:16:01.960 --> 00:16:01.970
optimizations are important is because
 

00:16:01.970 --> 00:16:03.970
optimizations are important is because
they improve locality and reduce how

00:16:03.970 --> 00:16:03.980
they improve locality and reduce how
 

00:16:03.980 --> 00:16:05.890
they improve locality and reduce how
many parts as a Dex file are actually

00:16:05.890 --> 00:16:05.900
many parts as a Dex file are actually
 

00:16:05.900 --> 00:16:08.680
many parts as a Dex file are actually
loaded into memory during an application

00:16:08.680 --> 00:16:08.690
loaded into memory during an application
 

00:16:08.690 --> 00:16:10.930
loaded into memory during an application
usage and startup so if you improve the

00:16:10.930 --> 00:16:10.940
usage and startup so if you improve the
 

00:16:10.940 --> 00:16:12.490
usage and startup so if you improve the
locality here you can get startup

00:16:12.490 --> 00:16:12.500
locality here you can get startup
 

00:16:12.500 --> 00:16:15.400
locality here you can get startup
benefits memory reduction and of

00:16:15.400 --> 00:16:15.410
benefits memory reduction and of
 

00:16:15.410 --> 00:16:18.579
benefits memory reduction and of
production and memory usage and now the

00:16:18.579 --> 00:16:18.589
production and memory usage and now the
 

00:16:18.589 --> 00:16:27.480
production and memory usage and now the
killeen or cloud profiles

00:16:27.480 --> 00:16:27.490
 
 

00:16:27.490 --> 00:16:30.810
 
Thank You Matthew hello everyone my name

00:16:30.810 --> 00:16:30.820
Thank You Matthew hello everyone my name
 

00:16:30.820 --> 00:16:33.060
Thank You Matthew hello everyone my name
is Colleen and I'm here today to present

00:16:33.060 --> 00:16:33.070
is Colleen and I'm here today to present
 

00:16:33.070 --> 00:16:36.000
is Colleen and I'm here today to present
you how we plan to improve and scale up

00:16:36.000 --> 00:16:36.010
you how we plan to improve and scale up
 

00:16:36.010 --> 00:16:37.950
you how we plan to improve and scale up
the Android runtime profiling

00:16:37.950 --> 00:16:37.960
the Android runtime profiling
 

00:16:37.960 --> 00:16:41.130
the Android runtime profiling
infrastructure however before we start

00:16:41.130 --> 00:16:41.140
infrastructure however before we start
 

00:16:41.140 --> 00:16:43.070
infrastructure however before we start
profiling is a rather overloaded term

00:16:43.070 --> 00:16:43.080
profiling is a rather overloaded term
 

00:16:43.080 --> 00:16:45.630
profiling is a rather overloaded term
when you speak about profiling in

00:16:45.630 --> 00:16:45.640
when you speak about profiling in
 

00:16:45.640 --> 00:16:47.550
when you speak about profiling in
today's presentation we're going to

00:16:47.550 --> 00:16:47.560
today's presentation we're going to
 

00:16:47.560 --> 00:16:49.440
today's presentation we're going to
refer to the metadata that they're on

00:16:49.440 --> 00:16:49.450
refer to the metadata that they're on
 

00:16:49.450 --> 00:16:51.570
refer to the metadata that they're on
droids runtime captures about the

00:16:51.570 --> 00:16:51.580
droids runtime captures about the
 

00:16:51.580 --> 00:16:54.030
droids runtime captures about the
application execution metadata that are

00:16:54.030 --> 00:16:54.040
application execution metadata that are
 

00:16:54.040 --> 00:16:55.890
application execution metadata that are
going to be feed into a profile guided

00:16:55.890 --> 00:16:55.900
going to be feed into a profile guided
 

00:16:55.900 --> 00:16:59.670
going to be feed into a profile guided
optimization process we're gonna see how

00:16:59.670 --> 00:16:59.680
optimization process we're gonna see how
 

00:16:59.680 --> 00:17:02.790
optimization process we're gonna see how
we extend the own device capabilities in

00:17:02.790 --> 00:17:02.800
we extend the own device capabilities in
 

00:17:02.800 --> 00:17:04.800
we extend the own device capabilities in
order to drive performance right at

00:17:04.800 --> 00:17:04.810
order to drive performance right at
 

00:17:04.810 --> 00:17:13.770
order to drive performance right at
install time before we jump into what is

00:17:13.770 --> 00:17:13.780
install time before we jump into what is
 

00:17:13.780 --> 00:17:16.230
install time before we jump into what is
new and how much it was let me briefly

00:17:16.230 --> 00:17:16.240
new and how much it was let me briefly
 

00:17:16.240 --> 00:17:18.390
new and how much it was let me briefly
remind you how Android uses profile

00:17:18.390 --> 00:17:18.400
remind you how Android uses profile
 

00:17:18.400 --> 00:17:20.790
remind you how Android uses profile
guided optimizations this is an

00:17:20.790 --> 00:17:20.800
guided optimizations this is an
 

00:17:20.800 --> 00:17:22.560
guided optimizations this is an
efficient technique that we introduced

00:17:22.560 --> 00:17:22.570
efficient technique that we introduced
 

00:17:22.570 --> 00:17:24.750
efficient technique that we introduced
in Android luga as part of a hybrid

00:17:24.750 --> 00:17:24.760
in Android luga as part of a hybrid
 

00:17:24.760 --> 00:17:27.660
in Android luga as part of a hybrid
execution model hybrid means that the

00:17:27.660 --> 00:17:27.670
execution model hybrid means that the
 

00:17:27.670 --> 00:17:29.850
execution model hybrid means that the
code being executed can be in three

00:17:29.850 --> 00:17:29.860
code being executed can be in three
 

00:17:29.860 --> 00:17:31.890
code being executed can be in three
different optimization States at the

00:17:31.890 --> 00:17:31.900
different optimization States at the
 

00:17:31.900 --> 00:17:34.920
different optimization States at the
same time the primary goal of this

00:17:34.920 --> 00:17:34.930
same time the primary goal of this
 

00:17:34.930 --> 00:17:37.800
same time the primary goal of this
technique is to improve all key metrics

00:17:37.800 --> 00:17:37.810
technique is to improve all key metrics
 

00:17:37.810 --> 00:17:39.900
technique is to improve all key metrics
of the application performance we're

00:17:39.900 --> 00:17:39.910
of the application performance we're
 

00:17:39.910 --> 00:17:42.060
of the application performance we're
talking about faster application startup

00:17:42.060 --> 00:17:42.070
talking about faster application startup
 

00:17:42.070 --> 00:17:45.600
talking about faster application startup
time reduce memory footprint a better

00:17:45.600 --> 00:17:45.610
time reduce memory footprint a better
 

00:17:45.610 --> 00:17:48.150
time reduce memory footprint a better
user experience by providing less junk

00:17:48.150 --> 00:17:48.160
user experience by providing less junk
 

00:17:48.160 --> 00:17:51.960
user experience by providing less junk
during usage less disk space used by the

00:17:51.960 --> 00:17:51.970
during usage less disk space used by the
 

00:17:51.970 --> 00:17:54.240
during usage less disk space used by the
compiler artifacts which means more disk

00:17:54.240 --> 00:17:54.250
compiler artifacts which means more disk
 

00:17:54.250 --> 00:17:56.970
compiler artifacts which means more disk
space for our users and nonetheless an

00:17:56.970 --> 00:17:56.980
space for our users and nonetheless an
 

00:17:56.980 --> 00:17:59.550
space for our users and nonetheless an
increased battery life because we do

00:17:59.550 --> 00:17:59.560
increased battery life because we do
 

00:17:59.560 --> 00:18:00.780
increased battery life because we do
heavy optimizations

00:18:00.780 --> 00:18:00.790
heavy optimizations
 

00:18:00.790 --> 00:18:02.580
heavy optimizations
when the device is not used rather than

00:18:02.580 --> 00:18:02.590
when the device is not used rather than
 

00:18:02.590 --> 00:18:08.100
when the device is not used rather than
at the use time how does this work it

00:18:08.100 --> 00:18:08.110
at the use time how does this work it
 

00:18:08.110 --> 00:18:10.380
at the use time how does this work it
all starts when the Play Store installs

00:18:10.380 --> 00:18:10.390
all starts when the Play Store installs
 

00:18:10.390 --> 00:18:13.440
all starts when the Play Store installs
the application but first we do very

00:18:13.440 --> 00:18:13.450
the application but first we do very
 

00:18:13.450 --> 00:18:15.810
the application but first we do very
very light optimizations and we have the

00:18:15.810 --> 00:18:15.820
very light optimizations and we have the
 

00:18:15.820 --> 00:18:19.050
very light optimizations and we have the
application ready to go for the user but

00:18:19.050 --> 00:18:19.060
application ready to go for the user but
 

00:18:19.060 --> 00:18:21.420
application ready to go for the user but
first launch the application we'll start

00:18:21.420 --> 00:18:21.430
first launch the application we'll start
 

00:18:21.430 --> 00:18:23.540
first launch the application we'll start
in what we call an interpretation mode

00:18:23.540 --> 00:18:23.550
in what we call an interpretation mode
 

00:18:23.550 --> 00:18:26.280
in what we call an interpretation mode
but the runtime execuse the application

00:18:26.280 --> 00:18:26.290
but the runtime execuse the application
 

00:18:26.290 --> 00:18:28.380
but the runtime execuse the application
code it discovers the most frequently

00:18:28.380 --> 00:18:28.390
code it discovers the most frequently
 

00:18:28.390 --> 00:18:30.150
code it discovers the most frequently
used methods and the most important

00:18:30.150 --> 00:18:30.160
used methods and the most important
 

00:18:30.160 --> 00:18:32.790
used methods and the most important
methods to be optimized that's when a

00:18:32.790 --> 00:18:32.800
methods to be optimized that's when a
 

00:18:32.800 --> 00:18:35.280
methods to be optimized that's when a
JIT System game kicks in and will

00:18:35.280 --> 00:18:35.290
JIT System game kicks in and will
 

00:18:35.290 --> 00:18:39.660
JIT System game kicks in and will
optimize the code during this time

00:18:39.660 --> 00:18:39.670
optimize the code during this time
 

00:18:39.670 --> 00:18:41.670
optimize the code during this time
the JIT system also records what he

00:18:41.670 --> 00:18:41.680
the JIT system also records what he
 

00:18:41.680 --> 00:18:44.850
the JIT system also records what he
called a profile information this

00:18:44.850 --> 00:18:44.860
called a profile information this
 

00:18:44.860 --> 00:18:46.620
called a profile information this
profile information essentially

00:18:46.620 --> 00:18:46.630
profile information essentially
 

00:18:46.630 --> 00:18:48.840
profile information essentially
encapsulates data about the methods that

00:18:48.840 --> 00:18:48.850
encapsulates data about the methods that
 

00:18:48.850 --> 00:18:51.060
encapsulates data about the methods that
are being executed and about the classes

00:18:51.060 --> 00:18:51.070
are being executed and about the classes
 

00:18:51.070 --> 00:18:54.270
are being executed and about the classes
that are being loaded every now and then

00:18:54.270 --> 00:18:54.280
that are being loaded every now and then
 

00:18:54.280 --> 00:18:56.760
that are being loaded every now and then
we dump this profile to disk so that we

00:18:56.760 --> 00:18:56.770
we dump this profile to disk so that we
 

00:18:56.770 --> 00:19:00.600
we dump this profile to disk so that we
can reuse it later once the device is

00:19:00.600 --> 00:19:00.610
can reuse it later once the device is
 

00:19:00.610 --> 00:19:03.660
can reuse it later once the device is
put aside and is not in used a state

00:19:03.660 --> 00:19:03.670
put aside and is not in used a state
 

00:19:03.670 --> 00:19:05.610
put aside and is not in used a state
which we call idle maintenance mode

00:19:05.610 --> 00:19:05.620
which we call idle maintenance mode
 

00:19:05.620 --> 00:19:08.520
which we call idle maintenance mode
we're gonna use that profile to drive

00:19:08.520 --> 00:19:08.530
we're gonna use that profile to drive
 

00:19:08.530 --> 00:19:10.910
we're gonna use that profile to drive
profile guided optimizations

00:19:10.910 --> 00:19:10.920
profile guided optimizations
 

00:19:10.920 --> 00:19:14.700
profile guided optimizations
the result is an optimized optimized app

00:19:14.700 --> 00:19:14.710
the result is an optimized optimized app
 

00:19:14.710 --> 00:19:16.890
the result is an optimized optimized app
it will eventually replace the original

00:19:16.890 --> 00:19:16.900
it will eventually replace the original
 

00:19:16.900 --> 00:19:20.820
it will eventually replace the original
state now when the user really launches

00:19:20.820 --> 00:19:20.830
state now when the user really launches
 

00:19:20.830 --> 00:19:22.770
state now when the user really launches
the app it will have a much snappier

00:19:22.770 --> 00:19:22.780
the app it will have a much snappier
 

00:19:22.780 --> 00:19:25.290
the app it will have a much snappier
start of time the much better steady

00:19:25.290 --> 00:19:25.300
start of time the much better steady
 

00:19:25.300 --> 00:19:28.260
start of time the much better steady
state performance execution and overall

00:19:28.260 --> 00:19:28.270
state performance execution and overall
 

00:19:28.270 --> 00:19:31.890
state performance execution and overall
the battery will drain last in this

00:19:31.890 --> 00:19:31.900
the battery will drain last in this
 

00:19:31.900 --> 00:19:34.520
the battery will drain last in this
state the application will be

00:19:34.520 --> 00:19:34.530
state the application will be
 

00:19:34.530 --> 00:19:37.380
state the application will be
interpreted just in time compound or

00:19:37.380 --> 00:19:37.390
interpreted just in time compound or
 

00:19:37.390 --> 00:19:42.420
interpreted just in time compound or
pre-optimized now just how efficient is

00:19:42.420 --> 00:19:42.430
pre-optimized now just how efficient is
 

00:19:42.430 --> 00:19:45.990
pre-optimized now just how efficient is
this technique we gather some data from

00:19:45.990 --> 00:19:46.000
this technique we gather some data from
 

00:19:46.000 --> 00:19:46.680
this technique we gather some data from
the field

00:19:46.680 --> 00:19:46.690
the field
 

00:19:46.690 --> 00:19:49.560
the field
for Google Maps application here you can

00:19:49.560 --> 00:19:49.570
for Google Maps application here you can
 

00:19:49.570 --> 00:19:53.220
for Google Maps application here you can
see two charts the left one presents

00:19:53.220 --> 00:19:53.230
see two charts the left one presents
 

00:19:53.230 --> 00:19:56.190
see two charts the left one presents
data from a marshmallow build you can

00:19:56.190 --> 00:19:56.200
data from a marshmallow build you can
 

00:19:56.200 --> 00:19:58.020
data from a marshmallow build you can
see that the startup time is pretty

00:19:58.020 --> 00:19:58.030
see that the startup time is pretty
 

00:19:58.030 --> 00:20:00.300
see that the startup time is pretty
constant over time it does not fluctuate

00:20:00.300 --> 00:20:00.310
constant over time it does not fluctuate
 

00:20:00.310 --> 00:20:03.030
constant over time it does not fluctuate
and this is pretty much expected you

00:20:03.030 --> 00:20:03.040
and this is pretty much expected you
 

00:20:03.040 --> 00:20:05.540
and this is pretty much expected you
don't want to have deviations here

00:20:05.540 --> 00:20:05.550
don't want to have deviations here
 

00:20:05.550 --> 00:20:08.130
don't want to have deviations here
however on the right hand side you can

00:20:08.130 --> 00:20:08.140
however on the right hand side you can
 

00:20:08.140 --> 00:20:10.440
however on the right hand side you can
see that in nuga the startup time drops

00:20:10.440 --> 00:20:10.450
see that in nuga the startup time drops
 

00:20:10.450 --> 00:20:14.010
see that in nuga the startup time drops
over time eventually it stabilizes off

00:20:14.010 --> 00:20:14.020
over time eventually it stabilizes off
 

00:20:14.020 --> 00:20:17.460
over time eventually it stabilizes off
of being about 25% faster than it will

00:20:17.460 --> 00:20:17.470
of being about 25% faster than it will
 

00:20:17.470 --> 00:20:19.800
of being about 25% faster than it will
used to be at install time and this is

00:20:19.800 --> 00:20:19.810
used to be at install time and this is
 

00:20:19.810 --> 00:20:22.650
used to be at install time and this is
great news it means that the more the

00:20:22.650 --> 00:20:22.660
great news it means that the more the
 

00:20:22.660 --> 00:20:24.660
great news it means that the more the
user uses the app the more we can

00:20:24.660 --> 00:20:24.670
user uses the app the more we can
 

00:20:24.670 --> 00:20:26.400
user uses the app the more we can
optimize it and over time the

00:20:26.400 --> 00:20:26.410
optimize it and over time the
 

00:20:26.410 --> 00:20:32.850
optimize it and over time the
performance gets better and better this

00:20:32.850 --> 00:20:32.860
performance gets better and better this
 

00:20:32.860 --> 00:20:35.340
performance gets better and better this
is great but we can do better and we

00:20:35.340 --> 00:20:35.350
is great but we can do better and we
 

00:20:35.350 --> 00:20:37.200
is great but we can do better and we
want to do better there shouldn't be

00:20:37.200 --> 00:20:37.210
want to do better there shouldn't be
 

00:20:37.210 --> 00:20:39.150
want to do better there shouldn't be
needy we shouldn't need to wait for

00:20:39.150 --> 00:20:39.160
needy we shouldn't need to wait for
 

00:20:39.160 --> 00:20:42.360
needy we shouldn't need to wait for
optimal performance and our goal is

00:20:42.360 --> 00:20:42.370
optimal performance and our goal is
 

00:20:42.370 --> 00:20:45.120
optimal performance and our goal is
called profiles is to deliver near

00:20:45.120 --> 00:20:45.130
called profiles is to deliver near
 

00:20:45.130 --> 00:20:47.010
called profiles is to deliver near
optimal performance - right after

00:20:47.010 --> 00:20:47.020
optimal performance - right after
 

00:20:47.020 --> 00:20:49.680
optimal performance - right after
install time without having to wait for

00:20:49.680 --> 00:20:49.690
install time without having to wait for
 

00:20:49.690 --> 00:20:53.000
install time without having to wait for
the application to be profile

00:20:53.000 --> 00:20:53.010
the application to be profile
 

00:20:53.010 --> 00:20:55.590
the application to be profile
so let's see how it's gonna how this is

00:20:55.590 --> 00:20:55.600
so let's see how it's gonna how this is
 

00:20:55.600 --> 00:20:56.960
so let's see how it's gonna how this is
gonna work

00:20:56.960 --> 00:20:56.970
gonna work
 

00:20:56.970 --> 00:20:59.520
gonna work
let me introduce you the idea of cloud

00:20:59.520 --> 00:20:59.530
let me introduce you the idea of cloud
 

00:20:59.530 --> 00:21:04.230
let me introduce you the idea of cloud
profiles this is based on made two key

00:21:04.230 --> 00:21:04.240
profiles this is based on made two key
 

00:21:04.240 --> 00:21:09.270
profiles this is based on made two key
observations first one is that usually

00:21:09.270 --> 00:21:09.280
observations first one is that usually
 

00:21:09.280 --> 00:21:12.180
observations first one is that usually
apps have many commonly used code paths

00:21:12.180 --> 00:21:12.190
apps have many commonly used code paths
 

00:21:12.190 --> 00:21:14.760
apps have many commonly used code paths
that are shared between a multitude of

00:21:14.760 --> 00:21:14.770
that are shared between a multitude of
 

00:21:14.770 --> 00:21:16.850
that are shared between a multitude of
users and devices

00:21:16.850 --> 00:21:16.860
users and devices
 

00:21:16.860 --> 00:21:19.410
users and devices
take for example classes loading the

00:21:19.410 --> 00:21:19.420
take for example classes loading the
 

00:21:19.420 --> 00:21:22.410
take for example classes loading the
restart up time eg device will have its

00:21:22.410 --> 00:21:22.420
restart up time eg device will have its
 

00:21:22.420 --> 00:21:25.980
restart up time eg device will have its
own specific set however globally we can

00:21:25.980 --> 00:21:25.990
own specific set however globally we can
 

00:21:25.990 --> 00:21:27.990
own specific set however globally we can
extract a common intersection of all

00:21:27.990 --> 00:21:28.000
extract a common intersection of all
 

00:21:28.000 --> 00:21:30.690
extract a common intersection of all
those classes and that's valuable data

00:21:30.690 --> 00:21:30.700
those classes and that's valuable data
 

00:21:30.700 --> 00:21:34.620
those classes and that's valuable data
for us to optimize upon second we know

00:21:34.620 --> 00:21:34.630
for us to optimize upon second we know
 

00:21:34.630 --> 00:21:37.230
for us to optimize upon second we know
that most app developers roll out their

00:21:37.230 --> 00:21:37.240
that most app developers roll out their
 

00:21:37.240 --> 00:21:40.020
that most app developers roll out their
apps incrementally starting with alpha

00:21:40.020 --> 00:21:40.030
apps incrementally starting with alpha
 

00:21:40.030 --> 00:21:43.260
apps incrementally starting with alpha
beta channels or for example 1 2 % of

00:21:43.260 --> 00:21:43.270
beta channels or for example 1 2 % of
 

00:21:43.270 --> 00:21:46.530
beta channels or for example 1 2 % of
the user base and the idea behind toad

00:21:46.530 --> 00:21:46.540
the user base and the idea behind toad
 

00:21:46.540 --> 00:21:49.530
the user base and the idea behind toad
profiles is to use this initial set of

00:21:49.530 --> 00:21:49.540
profiles is to use this initial set of
 

00:21:49.540 --> 00:21:52.380
profiles is to use this initial set of
alphabetic Channel users to bootstrap

00:21:52.380 --> 00:21:52.390
alphabetic Channel users to bootstrap
 

00:21:52.390 --> 00:21:56.220
alphabetic Channel users to bootstrap
performance for the rest of the users so

00:21:56.220 --> 00:21:56.230
performance for the rest of the users so
 

00:21:56.230 --> 00:22:01.350
performance for the rest of the users so
how is gonna work once we have an

00:22:01.350 --> 00:22:01.360
how is gonna work once we have an
 

00:22:01.360 --> 00:22:03.840
how is gonna work once we have an
initial set of devices we're gonna

00:22:03.840 --> 00:22:03.850
initial set of devices we're gonna
 

00:22:03.850 --> 00:22:06.120
initial set of devices we're gonna
extract the profile information about

00:22:06.120 --> 00:22:06.130
extract the profile information about
 

00:22:06.130 --> 00:22:09.090
extract the profile information about
your apk from those devices we're gonna

00:22:09.090 --> 00:22:09.100
your apk from those devices we're gonna
 

00:22:09.100 --> 00:22:13.200
your apk from those devices we're gonna
upload that information to play and then

00:22:13.200 --> 00:22:13.210
upload that information to play and then
 

00:22:13.210 --> 00:22:16.500
upload that information to play and then
we're gonna combine everything we're

00:22:16.500 --> 00:22:16.510
we're gonna combine everything we're
 

00:22:16.510 --> 00:22:18.570
we're gonna combine everything we're
going to aggregate whatever comes in and

00:22:18.570 --> 00:22:18.580
going to aggregate whatever comes in and
 

00:22:18.580 --> 00:22:20.490
going to aggregate whatever comes in and
we're gonna generate what we call a core

00:22:20.490 --> 00:22:20.500
we're gonna generate what we call a core
 

00:22:20.500 --> 00:22:24.960
we're gonna generate what we call a core
application profile this 4 profile will

00:22:24.960 --> 00:22:24.970
application profile this 4 profile will
 

00:22:24.970 --> 00:22:27.120
application profile this 4 profile will
contain information she's relevant

00:22:27.120 --> 00:22:27.130
contain information she's relevant
 

00:22:27.130 --> 00:22:30.300
contain information she's relevant
across all devices and not just a single

00:22:30.300 --> 00:22:30.310
across all devices and not just a single
 

00:22:30.310 --> 00:22:34.560
across all devices and not just a single
one when a new device requests for that

00:22:34.560 --> 00:22:34.570
one when a new device requests for that
 

00:22:34.570 --> 00:22:37.380
one when a new device requests for that
application to be installed we're gonna

00:22:37.380 --> 00:22:37.390
application to be installed we're gonna
 

00:22:37.390 --> 00:22:40.560
application to be installed we're gonna
deliver this core profile alongside the

00:22:40.560 --> 00:22:40.570
deliver this core profile alongside the
 

00:22:40.570 --> 00:22:44.150
deliver this core profile alongside the
main application apk to the device

00:22:44.150 --> 00:22:44.160
main application apk to the device
 

00:22:44.160 --> 00:22:47.370
main application apk to the device
locally the device will be able to use

00:22:47.370 --> 00:22:47.380
locally the device will be able to use
 

00:22:47.380 --> 00:22:49.890
locally the device will be able to use
that data to perform profile guided

00:22:49.890 --> 00:22:49.900
that data to perform profile guided
 

00:22:49.900 --> 00:22:53.400
that data to perform profile guided
optimizations right at install time that

00:22:53.400 --> 00:22:53.410
optimizations right at install time that
 

00:22:53.410 --> 00:22:55.500
optimizations right at install time that
will deliver an improved code startup

00:22:55.500 --> 00:22:55.510
will deliver an improved code startup
 

00:22:55.510 --> 00:22:57.870
will deliver an improved code startup
performance and much but it's better

00:22:57.870 --> 00:22:57.880
performance and much but it's better
 

00:22:57.880 --> 00:23:02.120
performance and much but it's better
steady-state performance over time

00:23:02.120 --> 00:23:02.130
 
 

00:23:02.130 --> 00:23:05.610
 
now having profiles in the cloud offers

00:23:05.610 --> 00:23:05.620
now having profiles in the cloud offers
 

00:23:05.620 --> 00:23:09.180
now having profiles in the cloud offers
much more opportunities than directly

00:23:09.180 --> 00:23:09.190
much more opportunities than directly
 

00:23:09.190 --> 00:23:11.730
much more opportunities than directly
influencing the app performance with a

00:23:11.730 --> 00:23:11.740
influencing the app performance with a
 

00:23:11.740 --> 00:23:14.850
influencing the app performance with a
profile guided optimizations the core

00:23:14.850 --> 00:23:14.860
profile guided optimizations the core
 

00:23:14.860 --> 00:23:18.060
profile guided optimizations the core
profiles offers available data for

00:23:18.060 --> 00:23:18.070
profiles offers available data for
 

00:23:18.070 --> 00:23:21.900
profiles offers available data for
examples were developers to act upon and

00:23:21.900 --> 00:23:21.910
examples were developers to act upon and
 

00:23:21.910 --> 00:23:23.220
examples were developers to act upon and
we believe there is enough information

00:23:23.220 --> 00:23:23.230
we believe there is enough information
 

00:23:23.230 --> 00:23:25.920
we believe there is enough information
there so that developers can tune their

00:23:25.920 --> 00:23:25.930
there so that developers can tune their
 

00:23:25.930 --> 00:23:28.590
there so that developers can tune their
own applications we're going to explore

00:23:28.590 --> 00:23:28.600
own applications we're going to explore
 

00:23:28.600 --> 00:23:34.140
own applications we're going to explore
how you can share this data later now

00:23:34.140 --> 00:23:34.150
how you can share this data later now
 

00:23:34.150 --> 00:23:36.780
how you can share this data later now
you can see in this workflow that to

00:23:36.780 --> 00:23:36.790
you can see in this workflow that to
 

00:23:36.790 --> 00:23:38.370
you can see in this workflow that to
deliver such a thing we need support

00:23:38.370 --> 00:23:38.380
deliver such a thing we need support
 

00:23:38.380 --> 00:23:41.360
deliver such a thing we need support
from Android platform and play a live in

00:23:41.360 --> 00:23:41.370
from Android platform and play a live in
 

00:23:41.370 --> 00:23:43.800
from Android platform and play a live in
today's presentation gonna focus on

00:23:43.800 --> 00:23:43.810
today's presentation gonna focus on
 

00:23:43.810 --> 00:23:51.000
today's presentation gonna focus on
language support so what did we do in P

00:23:51.000 --> 00:23:51.010
language support so what did we do in P
 

00:23:51.010 --> 00:23:54.450
language support so what did we do in P
to support this lifecycle we added new

00:23:54.450 --> 00:23:54.460
to support this lifecycle we added new
 

00:23:54.460 --> 00:23:57.930
to support this lifecycle we added new
interfaces that will allow us to extract

00:23:57.930 --> 00:23:57.940
interfaces that will allow us to extract
 

00:23:57.940 --> 00:23:59.940
interfaces that will allow us to extract
the profile and bootstrap the

00:23:59.940 --> 00:23:59.950
the profile and bootstrap the
 

00:23:59.950 --> 00:24:02.730
the profile and bootstrap the
information from the cloud the

00:24:02.730 --> 00:24:02.740
information from the cloud the
 

00:24:02.740 --> 00:24:04.920
information from the cloud the
functionality is available to all system

00:24:04.920 --> 00:24:04.930
functionality is available to all system
 

00:24:04.930 --> 00:24:07.770
functionality is available to all system
level apps which acquire the necessary

00:24:07.770 --> 00:24:07.780
level apps which acquire the necessary
 

00:24:07.780 --> 00:24:10.560
level apps which acquire the necessary
permissions and in our case play is just

00:24:10.560 --> 00:24:10.570
permissions and in our case play is just
 

00:24:10.570 --> 00:24:15.000
permissions and in our case play is just
a consumer the to ape IP is I'm talking

00:24:15.000 --> 00:24:15.010
a consumer the to ape IP is I'm talking
 

00:24:15.010 --> 00:24:17.310
a consumer the to ape IP is I'm talking
about our profile extractions and these

00:24:17.310 --> 00:24:17.320
about our profile extractions and these
 

00:24:17.320 --> 00:24:19.560
about our profile extractions and these
are exposed here a new platform manager

00:24:19.560 --> 00:24:19.570
are exposed here a new platform manager
 

00:24:19.570 --> 00:24:24.090
are exposed here a new platform manager
we call it art manager the second API is

00:24:24.090 --> 00:24:24.100
we call it art manager the second API is
 

00:24:24.100 --> 00:24:27.420
we call it art manager the second API is
profile installation and this is

00:24:27.420 --> 00:24:27.430
profile installation and this is
 

00:24:27.430 --> 00:24:29.430
profile installation and this is
seemingly integrated into the current

00:24:29.430 --> 00:24:29.440
seemingly integrated into the current
 

00:24:29.440 --> 00:24:32.700
seemingly integrated into the current
installer session what we did here is to

00:24:32.700 --> 00:24:32.710
installer session what we did here is to
 

00:24:32.710 --> 00:24:35.100
installer session what we did here is to
add a new kind of installation artifact

00:24:35.100 --> 00:24:35.110
add a new kind of installation artifact
 

00:24:35.110 --> 00:24:39.840
add a new kind of installation artifact
that the platform understands we call

00:24:39.840 --> 00:24:39.850
that the platform understands we call
 

00:24:39.850 --> 00:24:44.640
that the platform understands we call
this text metadata files essentially in

00:24:44.640 --> 00:24:44.650
this text metadata files essentially in
 

00:24:44.650 --> 00:24:46.980
this text metadata files essentially in
a similar way to the case the text

00:24:46.980 --> 00:24:46.990
a similar way to the case the text
 

00:24:46.990 --> 00:24:50.100
a similar way to the case the text
metadata files are archives which will

00:24:50.100 --> 00:24:50.110
metadata files are archives which will
 

00:24:50.110 --> 00:24:52.650
metadata files are archives which will
contain information in how the runtime

00:24:52.650 --> 00:24:52.660
contain information in how the runtime
 

00:24:52.660 --> 00:24:55.470
contain information in how the runtime
can optimize the application initially

00:24:55.470 --> 00:24:55.480
can optimize the application initially
 

00:24:55.480 --> 00:24:57.960
can optimize the application initially
this text metadata files will contain

00:24:57.960 --> 00:24:57.970
this text metadata files will contain
 

00:24:57.970 --> 00:25:00.120
this text metadata files will contain
the core profile that I mentioned about

00:25:00.120 --> 00:25:00.130
the core profile that I mentioned about
 

00:25:00.130 --> 00:25:04.050
the core profile that I mentioned about
earlier but install time play will

00:25:04.050 --> 00:25:04.060
earlier but install time play will
 

00:25:04.060 --> 00:25:05.910
earlier but install time play will
deliver these files if they are

00:25:05.910 --> 00:25:05.920
deliver these files if they are
 

00:25:05.920 --> 00:25:08.580
deliver these files if they are
available to the device where they will

00:25:08.580 --> 00:25:08.590
available to the device where they will
 

00:25:08.590 --> 00:25:10.740
available to the device where they will
be streamlined into the text optimizer

00:25:10.740 --> 00:25:10.750
be streamlined into the text optimizer
 

00:25:10.750 --> 00:25:13.670
be streamlined into the text optimizer
on device

00:25:13.670 --> 00:25:13.680
 
 

00:25:13.680 --> 00:25:17.220
 
it is worthwhile mentioning that we will

00:25:17.220 --> 00:25:17.230
it is worthwhile mentioning that we will
 

00:25:17.230 --> 00:25:19.440
it is worthwhile mentioning that we will
offer support for Google Play dynamic

00:25:19.440 --> 00:25:19.450
offer support for Google Play dynamic
 

00:25:19.450 --> 00:25:22.590
offer support for Google Play dynamic
delivery so if you plan to split the

00:25:22.590 --> 00:25:22.600
delivery so if you plan to split the
 

00:25:22.600 --> 00:25:24.840
delivery so if you plan to split the
functionality of your application of the

00:25:24.840 --> 00:25:24.850
functionality of your application of the
 

00:25:24.850 --> 00:25:28.080
functionality of your application of the
in different apks all DPS will have

00:25:28.080 --> 00:25:28.090
in different apks all DPS will have
 

00:25:28.090 --> 00:25:33.750
in different apks all DPS will have
their own text metadata files so let's

00:25:33.750 --> 00:25:33.760
their own text metadata files so let's
 

00:25:33.760 --> 00:25:35.460
their own text metadata files so let's
take a look how everything fits together

00:25:35.460 --> 00:25:35.470
take a look how everything fits together
 

00:25:35.470 --> 00:25:39.300
take a look how everything fits together
from the device perspective you remember

00:25:39.300 --> 00:25:39.310
from the device perspective you remember
 

00:25:39.310 --> 00:25:41.250
from the device perspective you remember
that I presented this diagram in the

00:25:41.250 --> 00:25:41.260
that I presented this diagram in the
 

00:25:41.260 --> 00:25:44.460
that I presented this diagram in the
beginning showing how the profiling

00:25:44.460 --> 00:25:44.470
beginning showing how the profiling
 

00:25:44.470 --> 00:25:49.140
beginning showing how the profiling
works locally let's focus here just on

00:25:49.140 --> 00:25:49.150
works locally let's focus here just on
 

00:25:49.150 --> 00:25:53.550
works locally let's focus here just on
the profile file on the application once

00:25:53.550 --> 00:25:53.560
the profile file on the application once
 

00:25:53.560 --> 00:25:55.500
the profile file on the application once
we will give once we managed to capture

00:25:55.500 --> 00:25:55.510
we will give once we managed to capture
 

00:25:55.510 --> 00:25:57.930
we will give once we managed to capture
a profile file we're going to add strip

00:25:57.930 --> 00:25:57.940
a profile file we're going to add strip
 

00:25:57.940 --> 00:26:02.550
a profile file we're going to add strip
this information to play on players that

00:26:02.550 --> 00:26:02.560
this information to play on players that
 

00:26:02.560 --> 00:26:04.890
this information to play on players that
mention will aggregate this data if many

00:26:04.890 --> 00:26:04.900
mention will aggregate this data if many
 

00:26:04.900 --> 00:26:07.230
mention will aggregate this data if many
many other profiles and only have a

00:26:07.230 --> 00:26:07.240
many other profiles and only have a
 

00:26:07.240 --> 00:26:09.330
many other profiles and only have a
called profiles we're going to deliver

00:26:09.330 --> 00:26:09.340
called profiles we're going to deliver
 

00:26:09.340 --> 00:26:14.960
called profiles we're going to deliver
it to our new users as a call profile

00:26:14.960 --> 00:26:14.970
it to our new users as a call profile
 

00:26:14.970 --> 00:26:18.510
it to our new users as a call profile
the idea of the core profile is not to

00:26:18.510 --> 00:26:18.520
the idea of the core profile is not to
 

00:26:18.520 --> 00:26:21.630
the idea of the core profile is not to
replace own device profiling it's only

00:26:21.630 --> 00:26:21.640
replace own device profiling it's only
 

00:26:21.640 --> 00:26:24.630
replace own device profiling it's only
to bootstrap the profile optimizations

00:26:24.630 --> 00:26:24.640
to bootstrap the profile optimizations
 

00:26:24.640 --> 00:26:27.330
to bootstrap the profile optimizations
so essentially instead of starting with

00:26:27.330 --> 00:26:27.340
so essentially instead of starting with
 

00:26:27.340 --> 00:26:29.280
so essentially instead of starting with
a completely blank state about your

00:26:29.280 --> 00:26:29.290
a completely blank state about your
 

00:26:29.290 --> 00:26:31.440
a completely blank state about your
application will already know what are

00:26:31.440 --> 00:26:31.450
application will already know what are
 

00:26:31.450 --> 00:26:33.210
application will already know what are
the most commonly executed cause paths

00:26:33.210 --> 00:26:33.220
the most commonly executed cause paths
 

00:26:33.220 --> 00:26:35.430
the most commonly executed cause paths
and we'll be able to start optimizations

00:26:35.430 --> 00:26:35.440
and we'll be able to start optimizations
 

00:26:35.440 --> 00:26:39.990
and we'll be able to start optimizations
from there so now essentially what was a

00:26:39.990 --> 00:26:40.000
from there so now essentially what was a
 

00:26:40.000 --> 00:26:43.800
from there so now essentially what was a
pure on device profile feedback loop it

00:26:43.800 --> 00:26:43.810
pure on device profile feedback loop it
 

00:26:43.810 --> 00:26:50.850
pure on device profile feedback loop it
gets extended if a cloud on onand

00:26:50.850 --> 00:26:50.860
 
 

00:26:50.860 --> 00:26:53.350
 
now I keep talking about this core

00:26:53.350 --> 00:26:53.360
now I keep talking about this core
 

00:26:53.360 --> 00:26:55.869
now I keep talking about this core
profile and I think it's important to

00:26:55.869 --> 00:26:55.879
profile and I think it's important to
 

00:26:55.879 --> 00:26:58.570
profile and I think it's important to
dedicate a bit more attention to it so

00:26:58.570 --> 00:26:58.580
dedicate a bit more attention to it so
 

00:26:58.580 --> 00:27:00.340
dedicate a bit more attention to it so
let's talk a bit how we're gonna build

00:27:00.340 --> 00:27:00.350
let's talk a bit how we're gonna build
 

00:27:00.350 --> 00:27:05.590
let's talk a bit how we're gonna build
it we already know that on device from

00:27:05.590 --> 00:27:05.600
it we already know that on device from
 

00:27:05.600 --> 00:27:08.440
it we already know that on device from
one execution to the other the profiles

00:27:08.440 --> 00:27:08.450
one execution to the other the profiles
 

00:27:08.450 --> 00:27:10.960
one execution to the other the profiles
aggregated quite well they reach a

00:27:10.960 --> 00:27:10.970
aggregated quite well they reach a
 

00:27:10.970 --> 00:27:14.560
aggregated quite well they reach a
stable point pretty fast that means that

00:27:14.560 --> 00:27:14.570
stable point pretty fast that means that
 

00:27:14.570 --> 00:27:16.539
stable point pretty fast that means that
it was not reoccupied the application

00:27:16.539 --> 00:27:16.549
it was not reoccupied the application
 

00:27:16.549 --> 00:27:20.019
it was not reoccupied the application
over and over and over again after a few

00:27:20.019 --> 00:27:20.029
over and over and over again after a few
 

00:27:20.029 --> 00:27:24.070
over and over and over again after a few
optimization steps will stop however

00:27:24.070 --> 00:27:24.080
optimization steps will stop however
 

00:27:24.080 --> 00:27:26.680
optimization steps will stop however
that's data from one device how well

00:27:26.680 --> 00:27:26.690
that's data from one device how well
 

00:27:26.690 --> 00:27:28.539
that's data from one device how well
does it work when you try to do it cross

00:27:28.539 --> 00:27:28.549
does it work when you try to do it cross
 

00:27:28.549 --> 00:27:31.180
does it work when you try to do it cross
devices how many samples you will need

00:27:31.180 --> 00:27:31.190
devices how many samples you will need
 

00:27:31.190 --> 00:27:33.100
devices how many samples you will need
in order to get to a robust reliable

00:27:33.100 --> 00:27:33.110
in order to get to a robust reliable
 

00:27:33.110 --> 00:27:39.820
in order to get to a robust reliable
profile we looked at our own Google

00:27:39.820 --> 00:27:39.830
profile we looked at our own Google
 

00:27:39.830 --> 00:27:41.470
profile we looked at our own Google
applications and we try to figure that

00:27:41.470 --> 00:27:41.480
applications and we try to figure that
 

00:27:41.480 --> 00:27:45.789
applications and we try to figure that
up here you can see a plot which

00:27:45.789 --> 00:27:45.799
up here you can see a plot which
 

00:27:45.799 --> 00:27:48.369
up here you can see a plot which
represents the amount of information the

00:27:48.369 --> 00:27:48.379
represents the amount of information the
 

00:27:48.379 --> 00:27:50.619
represents the amount of information the
core profiles relative to the total

00:27:50.619 --> 00:27:50.629
core profiles relative to the total
 

00:27:50.629 --> 00:27:56.200
core profiles relative to the total
number of aggregations the y axis

00:27:56.200 --> 00:27:56.210
number of aggregations the y axis
 

00:27:56.210 --> 00:27:58.180
number of aggregations the y axis
represents the amount of information and

00:27:58.180 --> 00:27:58.190
represents the amount of information and
 

00:27:58.190 --> 00:27:59.919
represents the amount of information and
the actual value

00:27:59.919 --> 00:27:59.929
the actual value
 

00:27:59.929 --> 00:28:02.619
the actual value
marek value is not important there what

00:28:02.619 --> 00:28:02.629
marek value is not important there what
 

00:28:02.629 --> 00:28:04.930
marek value is not important there what
is important from this graph is act

00:28:04.930 --> 00:28:04.940
is important from this graph is act
 

00:28:04.940 --> 00:28:10.149
is important from this graph is act
actually from 20 2014 and of a number of

00:28:10.149 --> 00:28:10.159
actually from 20 2014 and of a number of
 

00:28:10.159 --> 00:28:13.299
actually from 20 2014 and of a number of
profile aggregations the information in

00:28:13.299 --> 00:28:13.309
profile aggregations the information in
 

00:28:13.309 --> 00:28:17.049
profile aggregations the information in
the profile reaches a plateau and that's

00:28:17.049 --> 00:28:17.059
the profile reaches a plateau and that's
 

00:28:17.059 --> 00:28:19.869
the profile reaches a plateau and that's
very important it sends a very important

00:28:19.869 --> 00:28:19.879
very important it sends a very important
 

00:28:19.879 --> 00:28:22.359
very important it sends a very important
message it means that the alpha beta

00:28:22.359 --> 00:28:22.369
message it means that the alpha beta
 

00:28:22.369 --> 00:28:24.639
message it means that the alpha beta
Channel users will provide us with

00:28:24.639 --> 00:28:24.649
Channel users will provide us with
 

00:28:24.649 --> 00:28:27.850
Channel users will provide us with
enough data to build a poor profile and

00:28:27.850 --> 00:28:27.860
enough data to build a poor profile and
 

00:28:27.860 --> 00:28:30.249
enough data to build a poor profile and
it means that the majority of the

00:28:30.249 --> 00:28:30.259
it means that the majority of the
 

00:28:30.259 --> 00:28:32.190
it means that the majority of the
production users of your application

00:28:32.190 --> 00:28:32.200
production users of your application
 

00:28:32.200 --> 00:28:34.930
production users of your application
will always have the best possible

00:28:34.930 --> 00:28:34.940
will always have the best possible
 

00:28:34.940 --> 00:28:40.250
will always have the best possible
experience

00:28:40.250 --> 00:28:40.260
 
 

00:28:40.260 --> 00:28:42.470
 
so how do we actually aggregate the

00:28:42.470 --> 00:28:42.480
so how do we actually aggregate the
 

00:28:42.480 --> 00:28:47.240
so how do we actually aggregate the
information I mentioned before that in

00:28:47.240 --> 00:28:47.250
information I mentioned before that in
 

00:28:47.250 --> 00:28:48.440
information I mentioned before that in
the profile you will find information

00:28:48.440 --> 00:28:48.450
the profile you will find information
 

00:28:48.450 --> 00:28:53.000
the profile you will find information
about classes and methods on device this

00:28:53.000 --> 00:28:53.010
about classes and methods on device this
 

00:28:53.010 --> 00:28:55.190
about classes and methods on device this
is roughly how it looks like we're going

00:28:55.190 --> 00:28:55.200
is roughly how it looks like we're going
 

00:28:55.200 --> 00:28:57.260
is roughly how it looks like we're going
to take all the executions that we have

00:28:57.260 --> 00:28:57.270
to take all the executions that we have
 

00:28:57.270 --> 00:29:00.320
to take all the executions that we have
seen before and we'll create a union of

00:29:00.320 --> 00:29:00.330
seen before and we'll create a union of
 

00:29:00.330 --> 00:29:02.930
seen before and we'll create a union of
everything that you've seen in the

00:29:02.930 --> 00:29:02.940
everything that you've seen in the
 

00:29:02.940 --> 00:29:04.700
everything that you've seen in the
aggregated profile you will have

00:29:04.700 --> 00:29:04.710
aggregated profile you will have
 

00:29:04.710 --> 00:29:06.950
aggregated profile you will have
information about classes methods about

00:29:06.950 --> 00:29:06.960
information about classes methods about
 

00:29:06.960 --> 00:29:11.090
information about classes methods about
everything that you've seen on cloud

00:29:11.090 --> 00:29:11.100
everything that you've seen on cloud
 

00:29:11.100 --> 00:29:14.210
everything that you've seen on cloud
however we don't really want everything

00:29:14.210 --> 00:29:14.220
however we don't really want everything
 

00:29:14.220 --> 00:29:17.270
however we don't really want everything
we only want the common executed code

00:29:17.270 --> 00:29:17.280
we only want the common executed code
 

00:29:17.280 --> 00:29:21.500
we only want the common executed code
path and what we are doing instead of

00:29:21.500 --> 00:29:21.510
path and what we are doing instead of
 

00:29:21.510 --> 00:29:23.600
path and what we are doing instead of
having a union will have be having a

00:29:23.600 --> 00:29:23.610
having a union will have be having a
 

00:29:23.610 --> 00:29:26.750
having a union will have be having a
smart intersection with the only keeping

00:29:26.750 --> 00:29:26.760
smart intersection with the only keeping
 

00:29:26.760 --> 00:29:29.299
smart intersection with the only keeping
the information relevant to all

00:29:29.299 --> 00:29:29.309
the information relevant to all
 

00:29:29.309 --> 00:29:31.880
the information relevant to all
executions meaning we're going to filter

00:29:31.880 --> 00:29:31.890
executions meaning we're going to filter
 

00:29:31.890 --> 00:29:35.990
executions meaning we're going to filter
out all the outliers the result is what

00:29:35.990 --> 00:29:36.000
out all the outliers the result is what
 

00:29:36.000 --> 00:29:38.060
out all the outliers the result is what
we call the core profile which only

00:29:38.060 --> 00:29:38.070
we call the core profile which only
 

00:29:38.070 --> 00:29:40.520
we call the core profile which only
keeps the most commonly seen samples and

00:29:40.520 --> 00:29:40.530
keeps the most commonly seen samples and
 

00:29:40.530 --> 00:29:42.440
keeps the most commonly seen samples and
this is what's gonna gonna get

00:29:42.440 --> 00:29:42.450
this is what's gonna gonna get
 

00:29:42.450 --> 00:29:47.539
this is what's gonna gonna get
eventually to the device how will that

00:29:47.539 --> 00:29:47.549
eventually to the device how will that
 

00:29:47.549 --> 00:29:50.870
eventually to the device how will that
is work let's look again at data

00:29:50.870 --> 00:29:50.880
is work let's look again at data
 

00:29:50.880 --> 00:29:54.140
is work let's look again at data
captured from Google Apps we tasted this

00:29:54.140 --> 00:29:54.150
captured from Google Apps we tasted this
 

00:29:54.150 --> 00:29:56.270
captured from Google Apps we tasted this
across a variety of application and here

00:29:56.270 --> 00:29:56.280
across a variety of application and here
 

00:29:56.280 --> 00:29:58.100
across a variety of application and here
are the results of some representative

00:29:58.100 --> 00:29:58.110
are the results of some representative
 

00:29:58.110 --> 00:30:00.440
are the results of some representative
ones in this set you can find

00:30:00.440 --> 00:30:00.450
ones in this set you can find
 

00:30:00.450 --> 00:30:03.370
ones in this set you can find
application which relies on lated code

00:30:03.370 --> 00:30:03.380
application which relies on lated code
 

00:30:03.380 --> 00:30:06.710
application which relies on lated code
for example google camera or

00:30:06.710 --> 00:30:06.720
for example google camera or
 

00:30:06.720 --> 00:30:09.799
for example google camera or
applications which have much which are

00:30:09.799 --> 00:30:09.809
applications which have much which are
 

00:30:09.809 --> 00:30:12.530
applications which have much which are
much more java oriented say Google Maps

00:30:12.530 --> 00:30:12.540
much more java oriented say Google Maps
 

00:30:12.540 --> 00:30:15.919
much more java oriented say Google Maps
or Google Docs for google camera for

00:30:15.919 --> 00:30:15.929
or Google Docs for google camera for
 

00:30:15.929 --> 00:30:17.930
or Google Docs for google camera for
example get a start of time improvement

00:30:17.930 --> 00:30:17.940
example get a start of time improvement
 

00:30:17.940 --> 00:30:19.970
example get a start of time improvement
of about twelve point six percent and

00:30:19.970 --> 00:30:19.980
of about twelve point six percent and
 

00:30:19.980 --> 00:30:21.770
of about twelve point six percent and
that's excellent given that the

00:30:21.770 --> 00:30:21.780
that's excellent given that the
 

00:30:21.780 --> 00:30:24.080
that's excellent given that the
application itself doesn't have a lot of

00:30:24.080 --> 00:30:24.090
application itself doesn't have a lot of
 

00:30:24.090 --> 00:30:25.000
application itself doesn't have a lot of
Java code

00:30:25.000 --> 00:30:25.010
Java code
 

00:30:25.010 --> 00:30:27.710
Java code
however for maps or dogs which are

00:30:27.710 --> 00:30:27.720
however for maps or dogs which are
 

00:30:27.720 --> 00:30:30.620
however for maps or dogs which are
heavily Java based we can see that the

00:30:30.620 --> 00:30:30.630
heavily Java based we can see that the
 

00:30:30.630 --> 00:30:32.780
heavily Java based we can see that the
optimizations improves the startup time

00:30:32.780 --> 00:30:32.790
optimizations improves the startup time
 

00:30:32.790 --> 00:30:35.690
optimizations improves the startup time
by about twenty eight percent or forty

00:30:35.690 --> 00:30:35.700
by about twenty eight percent or forty
 

00:30:35.700 --> 00:30:38.930
by about twenty eight percent or forty
three percent across the board you can

00:30:38.930 --> 00:30:38.940
three percent across the board you can
 

00:30:38.940 --> 00:30:40.820
three percent across the board you can
see an average of about twenty percent

00:30:40.820 --> 00:30:40.830
see an average of about twenty percent
 

00:30:40.830 --> 00:30:43.700
see an average of about twenty percent
improvement and that obviously depends

00:30:43.700 --> 00:30:43.710
improvement and that obviously depends
 

00:30:43.710 --> 00:30:45.560
improvement and that obviously depends
with what the application is doing how

00:30:45.560 --> 00:30:45.570
with what the application is doing how
 

00:30:45.570 --> 00:30:51.730
with what the application is doing how
much Java code is being used and so on

00:30:51.730 --> 00:30:51.740
 
 

00:30:51.740 --> 00:30:55.220
 
now I mention in the beginning that

00:30:55.220 --> 00:30:55.230
now I mention in the beginning that
 

00:30:55.230 --> 00:30:57.200
now I mention in the beginning that
besides improving the application

00:30:57.200 --> 00:30:57.210
besides improving the application
 

00:30:57.210 --> 00:30:59.270
besides improving the application
performance directly via profile guided

00:30:59.270 --> 00:30:59.280
performance directly via profile guided
 

00:30:59.280 --> 00:31:02.870
performance directly via profile guided
optimizations the profile of also offer

00:31:02.870 --> 00:31:02.880
optimizations the profile of also offer
 

00:31:02.880 --> 00:31:06.530
optimizations the profile of also offer
much more opportunities I'm gonna

00:31:06.530 --> 00:31:06.540
much more opportunities I'm gonna
 

00:31:06.540 --> 00:31:09.380
much more opportunities I'm gonna
present a short use case study and walk

00:31:09.380 --> 00:31:09.390
present a short use case study and walk
 

00:31:09.390 --> 00:31:11.450
present a short use case study and walk
you through some important aspects that

00:31:11.450 --> 00:31:11.460
you through some important aspects that
 

00:31:11.460 --> 00:31:13.670
you through some important aspects that
the profiles can reveal about your

00:31:13.670 --> 00:31:13.680
the profiles can reveal about your
 

00:31:13.680 --> 00:31:17.120
the profiles can reveal about your
application during this use case study

00:31:17.120 --> 00:31:17.130
application during this use case study
 

00:31:17.130 --> 00:31:20.540
application during this use case study
I'm gonna focus on a single question are

00:31:20.540 --> 00:31:20.550
I'm gonna focus on a single question are
 

00:31:20.550 --> 00:31:22.400
I'm gonna focus on a single question are
we shipping unnecessary code to the

00:31:22.400 --> 00:31:22.410
we shipping unnecessary code to the
 

00:31:22.410 --> 00:31:30.980
we shipping unnecessary code to the
clients are you let's take a look at

00:31:30.980 --> 00:31:30.990
clients are you let's take a look at
 

00:31:30.990 --> 00:31:36.530
clients are you let's take a look at
some data again this case study reflects

00:31:36.530 --> 00:31:36.540
some data again this case study reflects
 

00:31:36.540 --> 00:31:38.720
some data again this case study reflects
the state of some Google Apps that it

00:31:38.720 --> 00:31:38.730
the state of some Google Apps that it
 

00:31:38.730 --> 00:31:42.410
the state of some Google Apps that it
tested we see that on average we profile

00:31:42.410 --> 00:31:42.420
tested we see that on average we profile
 

00:31:42.420 --> 00:31:46.160
tested we see that on average we profile
about 1415 percent of the code and about

00:31:46.160 --> 00:31:46.170
about 1415 percent of the code and about
 

00:31:46.170 --> 00:31:48.560
about 1415 percent of the code and about
85 percent of the code remains on

00:31:48.560 --> 00:31:48.570
85 percent of the code remains on
 

00:31:48.570 --> 00:31:51.470
85 percent of the code remains on
profile when you spread the distribution

00:31:51.470 --> 00:31:51.480
profile when you spread the distribution
 

00:31:51.480 --> 00:31:53.450
profile when you spread the distribution
you can see for example that in some

00:31:53.450 --> 00:31:53.460
you can see for example that in some
 

00:31:53.460 --> 00:31:55.310
you can see for example that in some
apps five to ten percent of the code

00:31:55.310 --> 00:31:55.320
apps five to ten percent of the code
 

00:31:55.320 --> 00:31:57.320
apps five to ten percent of the code
gets profiled in some otherwise even 50

00:31:57.320 --> 00:31:57.330
gets profiled in some otherwise even 50
 

00:31:57.330 --> 00:32:01.310
gets profiled in some otherwise even 50
percent of the code gets profile and

00:32:01.310 --> 00:32:01.320
percent of the code gets profile and
 

00:32:01.320 --> 00:32:05.260
percent of the code gets profile and
this is the rather intriguing result and

00:32:05.260 --> 00:32:05.270
this is the rather intriguing result and
 

00:32:05.270 --> 00:32:08.930
this is the rather intriguing result and
the reason for that is that if the code

00:32:08.930 --> 00:32:08.940
the reason for that is that if the code
 

00:32:08.940 --> 00:32:12.110
the reason for that is that if the code
is not profiled that most likely means

00:32:12.110 --> 00:32:12.120
is not profiled that most likely means
 

00:32:12.120 --> 00:32:13.790
is not profiled that most likely means
that it might not have ever been

00:32:13.790 --> 00:32:13.800
that it might not have ever been
 

00:32:13.800 --> 00:32:18.470
that it might not have ever been
executed obviously that's it for a good

00:32:18.470 --> 00:32:18.480
executed obviously that's it for a good
 

00:32:18.480 --> 00:32:21.740
executed obviously that's it for a good
case I mean the code for example can be

00:32:21.740 --> 00:32:21.750
case I mean the code for example can be
 

00:32:21.750 --> 00:32:24.800
case I mean the code for example can be
unexpected error code pass right we all

00:32:24.800 --> 00:32:24.810
unexpected error code pass right we all
 

00:32:24.810 --> 00:32:26.780
unexpected error code pass right we all
want the applications to be reliable in

00:32:26.780 --> 00:32:26.790
want the applications to be reliable in
 

00:32:26.790 --> 00:32:29.450
want the applications to be reliable in
a robust and the error handling must be

00:32:29.450 --> 00:32:29.460
a robust and the error handling must be
 

00:32:29.460 --> 00:32:32.780
a robust and the error handling must be
there or it never gets executed you may

00:32:32.780 --> 00:32:32.790
there or it never gets executed you may
 

00:32:32.790 --> 00:32:34.460
there or it never gets executed you may
have backwards compatibility code

00:32:34.460 --> 00:32:34.470
have backwards compatibility code
 

00:32:34.470 --> 00:32:37.640
have backwards compatibility code
support for previous API level and such

00:32:37.640 --> 00:32:37.650
support for previous API level and such
 

00:32:37.650 --> 00:32:40.490
support for previous API level and such
you may have features which are not used

00:32:40.490 --> 00:32:40.500
you may have features which are not used
 

00:32:40.500 --> 00:32:43.730
you may have features which are not used
on all devices may have very features

00:32:43.730 --> 00:32:43.740
on all devices may have very features
 

00:32:43.740 --> 00:32:47.060
on all devices may have very features
very targeted and you may also have a

00:32:47.060 --> 00:32:47.070
very targeted and you may also have a
 

00:32:47.070 --> 00:32:49.040
very targeted and you may also have a
lot of unnecessary code lying around

00:32:49.040 --> 00:32:49.050
lot of unnecessary code lying around
 

00:32:49.050 --> 00:32:51.200
lot of unnecessary code lying around
maybe by including libraries that you

00:32:51.200 --> 00:32:51.210
maybe by including libraries that you
 

00:32:51.210 --> 00:32:56.120
maybe by including libraries that you
don't really use now it's a bit hard to

00:32:56.120 --> 00:32:56.130
don't really use now it's a bit hard to
 

00:32:56.130 --> 00:32:58.430
don't really use now it's a bit hard to
break down the percentage for this disk

00:32:58.430 --> 00:32:58.440
break down the percentage for this disk
 

00:32:58.440 --> 00:32:59.600
break down the percentage for this disk
attacker is and there can be other

00:32:59.600 --> 00:32:59.610
attacker is and there can be other
 

00:32:59.610 --> 00:33:02.340
attacker is and there can be other
reasons why we didn't profile the code

00:33:02.340 --> 00:33:02.350
reasons why we didn't profile the code
 

00:33:02.350 --> 00:33:04.999
reasons why we didn't profile the code
but the skewed distribution here is a

00:33:04.999 --> 00:33:05.009
but the skewed distribution here is a
 

00:33:05.009 --> 00:33:08.129
but the skewed distribution here is a
strong indication there is a lot of room

00:33:08.129 --> 00:33:08.139
strong indication there is a lot of room
 

00:33:08.139 --> 00:33:11.120
strong indication there is a lot of room
to deal true of improvement for a decade

00:33:11.120 --> 00:33:11.130
to deal true of improvement for a decade
 

00:33:11.130 --> 00:33:14.879
to deal true of improvement for a decade
the code can be reorganized or trim down

00:33:14.879 --> 00:33:14.889
the code can be reorganized or trim down
 

00:33:14.889 --> 00:33:18.899
the code can be reorganized or trim down
for better efficiency for example Google

00:33:18.899 --> 00:33:18.909
for better efficiency for example Google
 

00:33:18.909 --> 00:33:22.590
for better efficiency for example Google
Play introduced dynamic delivery schemes

00:33:22.590 --> 00:33:22.600
Play introduced dynamic delivery schemes
 

00:33:22.600 --> 00:33:24.720
Play introduced dynamic delivery schemes
which may help you reduce the code that

00:33:24.720 --> 00:33:24.730
which may help you reduce the code that
 

00:33:24.730 --> 00:33:26.970
which may help you reduce the code that
you share by targeting features only to

00:33:26.970 --> 00:33:26.980
you share by targeting features only to
 

00:33:26.980 --> 00:33:28.919
you share by targeting features only to
certain users and that's something that

00:33:28.919 --> 00:33:28.929
certain users and that's something that
 

00:33:28.929 --> 00:33:30.180
certain users and that's something that
you might want to look at and take

00:33:30.180 --> 00:33:30.190
you might want to look at and take
 

00:33:30.190 --> 00:33:35.850
you might want to look at and take
advantage of so we believe that the

00:33:35.850 --> 00:33:35.860
advantage of so we believe that the
 

00:33:35.860 --> 00:33:37.919
advantage of so we believe that the
result quite a bit of unnecessary code

00:33:37.919 --> 00:33:37.929
result quite a bit of unnecessary code
 

00:33:37.929 --> 00:33:42.200
result quite a bit of unnecessary code
lying around at least in our own apks

00:33:42.200 --> 00:33:42.210
lying around at least in our own apks
 

00:33:42.210 --> 00:33:44.909
lying around at least in our own apks
now since we focus on the proof on the

00:33:44.909 --> 00:33:44.919
now since we focus on the proof on the
 

00:33:44.919 --> 00:33:46.549
now since we focus on the proof on the
code that actually doesn't get profile

00:33:46.549 --> 00:33:46.559
code that actually doesn't get profile
 

00:33:46.559 --> 00:33:48.899
code that actually doesn't get profile
is there anything that we can extract

00:33:48.899 --> 00:33:48.909
is there anything that we can extract
 

00:33:48.909 --> 00:33:55.560
is there anything that we can extract
out of the profile code to understand

00:33:55.560 --> 00:33:55.570
out of the profile code to understand
 

00:33:55.570 --> 00:33:58.470
out of the profile code to understand
this let me talk a bit about different

00:33:58.470 --> 00:33:58.480
this let me talk a bit about different
 

00:33:58.480 --> 00:34:02.970
this let me talk a bit about different
categories of profile code when the

00:34:02.970 --> 00:34:02.980
categories of profile code when the
 

00:34:02.980 --> 00:34:04.710
categories of profile code when the
application code is being profiled the

00:34:04.710 --> 00:34:04.720
application code is being profiled the
 

00:34:04.720 --> 00:34:06.840
application code is being profiled the
runtime will try to label it depending

00:34:06.840 --> 00:34:06.850
runtime will try to label it depending
 

00:34:06.850 --> 00:34:09.119
runtime will try to label it depending
on its stage and you will have a label

00:34:09.119 --> 00:34:09.129
on its stage and you will have a label
 

00:34:09.129 --> 00:34:11.579
on its stage and you will have a label
for the startup category for the post

00:34:11.579 --> 00:34:11.589
for the startup category for the post
 

00:34:11.589 --> 00:34:13.470
for the startup category for the post
startup Pat aghori and for the hot

00:34:13.470 --> 00:34:13.480
startup Pat aghori and for the hot
 

00:34:13.480 --> 00:34:15.540
startup Pat aghori and for the hot
category obviously these are pretty

00:34:15.540 --> 00:34:15.550
category obviously these are pretty
 

00:34:15.550 --> 00:34:16.460
category obviously these are pretty
self-explanatory

00:34:16.460 --> 00:34:16.470
self-explanatory
 

00:34:16.470 --> 00:34:18.869
self-explanatory
the hot category of the code is

00:34:18.869 --> 00:34:18.879
the hot category of the code is
 

00:34:18.879 --> 00:34:21.270
the hot category of the code is
essentially what the runtimes in to be

00:34:21.270 --> 00:34:21.280
essentially what the runtimes in to be
 

00:34:21.280 --> 00:34:25.040
essentially what the runtimes in to be
the most important part of your code

00:34:25.040 --> 00:34:25.050
 
 

00:34:25.050 --> 00:34:28.109
 
it's important to keep in mind that

00:34:28.109 --> 00:34:28.119
it's important to keep in mind that
 

00:34:28.119 --> 00:34:30.419
it's important to keep in mind that
these are not is joined say for example

00:34:30.419 --> 00:34:30.429
these are not is joined say for example
 

00:34:30.429 --> 00:34:32.280
these are not is joined say for example
that a method foo is being executed

00:34:32.280 --> 00:34:32.290
that a method foo is being executed
 

00:34:32.290 --> 00:34:34.829
that a method foo is being executed
this can be executing early startup can

00:34:34.829 --> 00:34:34.839
this can be executing early startup can
 

00:34:34.839 --> 00:34:36.599
this can be executing early startup can
be executing during post sort of time

00:34:36.599 --> 00:34:36.609
be executing during post sort of time
 

00:34:36.609 --> 00:34:39.240
be executing during post sort of time
and can also be marked as hot for

00:34:39.240 --> 00:34:39.250
and can also be marked as hot for
 

00:34:39.250 --> 00:34:40.680
and can also be marked as hot for
example if you have a very heavy

00:34:40.680 --> 00:34:40.690
example if you have a very heavy
 

00:34:40.690 --> 00:34:45.359
example if you have a very heavy
computation during that method now if

00:34:45.359 --> 00:34:45.369
computation during that method now if
 

00:34:45.369 --> 00:34:46.919
computation during that method now if
you know the code which is executing to

00:34:46.919 --> 00:34:46.929
you know the code which is executing to
 

00:34:46.929 --> 00:34:48.839
you know the code which is executing to
the in startup time if you focus on that

00:34:48.839 --> 00:34:48.849
the in startup time if you focus on that
 

00:34:48.849 --> 00:34:51.300
the in startup time if you focus on that
you'll be able to lower the startup time

00:34:51.300 --> 00:34:51.310
you'll be able to lower the startup time
 

00:34:51.310 --> 00:34:53.639
you'll be able to lower the startup time
of the application as such the first

00:34:53.639 --> 00:34:53.649
of the application as such the first
 

00:34:53.649 --> 00:34:55.589
of the application as such the first
impression that the users will have upon

00:34:55.589 --> 00:34:55.599
impression that the users will have upon
 

00:34:55.599 --> 00:35:00.180
impression that the users will have upon
your application will be very good if

00:35:00.180 --> 00:35:00.190
your application will be very good if
 

00:35:00.190 --> 00:35:02.730
your application will be very good if
you look at the post startup code it

00:35:02.730 --> 00:35:02.740
you look at the post startup code it
 

00:35:02.740 --> 00:35:05.520
you look at the post startup code it
will help you for example layout the

00:35:05.520 --> 00:35:05.530
will help you for example layout the
 

00:35:05.530 --> 00:35:07.950
will help you for example layout the
application text by code that will lead

00:35:07.950 --> 00:35:07.960
application text by code that will lead
 

00:35:07.960 --> 00:35:10.920
application text by code that will lead
to memory improvements and will be much

00:35:10.920 --> 00:35:10.930
to memory improvements and will be much
 

00:35:10.930 --> 00:35:16.080
to memory improvements and will be much
smoother on low-end devices

00:35:16.080 --> 00:35:16.090
 
 

00:35:16.090 --> 00:35:19.540
 
as for the hot code this is the code

00:35:19.540 --> 00:35:19.550
as for the hot code this is the code
 

00:35:19.550 --> 00:35:21.610
as for the hot code this is the code
that should get the most attention for

00:35:21.610 --> 00:35:21.620
that should get the most attention for
 

00:35:21.620 --> 00:35:23.970
that should get the most attention for
your optimization efforts

00:35:23.970 --> 00:35:23.980
your optimization efforts
 

00:35:23.980 --> 00:35:27.550
your optimization efforts
it's the code that is most heavily

00:35:27.550 --> 00:35:27.560
it's the code that is most heavily
 

00:35:27.560 --> 00:35:29.680
it's the code that is most heavily
optimized by the runtime and it might be

00:35:29.680 --> 00:35:29.690
optimized by the runtime and it might be
 

00:35:29.690 --> 00:35:32.350
optimized by the runtime and it might be
so because the runtime identified that

00:35:32.350 --> 00:35:32.360
so because the runtime identified that
 

00:35:32.360 --> 00:35:34.510
so because the runtime identified that
it is very beneficial to invest time

00:35:34.510 --> 00:35:34.520
it is very beneficial to invest time
 

00:35:34.520 --> 00:35:38.140
it is very beneficial to invest time
there and it's what if you for example

00:35:38.140 --> 00:35:38.150
there and it's what if you for example
 

00:35:38.150 --> 00:35:40.240
there and it's what if you for example
start to it try to improve the quality

00:35:40.240 --> 00:35:40.250
start to it try to improve the quality
 

00:35:40.250 --> 00:35:41.890
start to it try to improve the quality
and the performance of your app this is

00:35:41.890 --> 00:35:41.900
and the performance of your app this is
 

00:35:41.900 --> 00:35:43.960
and the performance of your app this is
where you should spend your effort or

00:35:43.960 --> 00:35:43.970
where you should spend your effort or
 

00:35:43.970 --> 00:35:47.290
where you should spend your effort or
your initial effort now for this is

00:35:47.290 --> 00:35:47.300
your initial effort now for this is
 

00:35:47.300 --> 00:35:49.030
your initial effort now for this is
important like how much code of your

00:35:49.030 --> 00:35:49.040
important like how much code of your
 

00:35:49.040 --> 00:35:50.680
important like how much code of your
applications actually being marked as

00:35:50.680 --> 00:35:50.690
applications actually being marked as
 

00:35:50.690 --> 00:35:53.770
applications actually being marked as
hot because if everything is hot then

00:35:53.770 --> 00:35:53.780
hot because if everything is hot then
 

00:35:53.780 --> 00:35:55.540
hot because if everything is hot then
everything can be optimized so that's

00:35:55.540 --> 00:35:55.550
everything can be optimized so that's
 

00:35:55.550 --> 00:36:01.090
everything can be optimized so that's
not really not really useful let me show

00:36:01.090 --> 00:36:01.100
not really not really useful let me show
 

00:36:01.100 --> 00:36:02.950
not really not really useful let me show
you the breakdown of these three

00:36:02.950 --> 00:36:02.960
you the breakdown of these three
 

00:36:02.960 --> 00:36:08.500
you the breakdown of these three
categories in this graph you can see on

00:36:08.500 --> 00:36:08.510
categories in this graph you can see on
 

00:36:08.510 --> 00:36:11.530
categories in this graph you can see on
the red columns the percentages for the

00:36:11.530 --> 00:36:11.540
the red columns the percentages for the
 

00:36:11.540 --> 00:36:13.720
the red columns the percentages for the
profile code and the knot profile code

00:36:13.720 --> 00:36:13.730
profile code and the knot profile code
 

00:36:13.730 --> 00:36:16.660
profile code and the knot profile code
this will sum up to 100% and it's what I

00:36:16.660 --> 00:36:16.670
this will sum up to 100% and it's what I
 

00:36:16.670 --> 00:36:18.790
this will sum up to 100% and it's what I
showed you earlier they are here just

00:36:18.790 --> 00:36:18.800
showed you earlier they are here just
 

00:36:18.800 --> 00:36:22.180
showed you earlier they are here just
for the reference the blue boxes show

00:36:22.180 --> 00:36:22.190
for the reference the blue boxes show
 

00:36:22.190 --> 00:36:24.640
for the reference the blue boxes show
the percentages of the startup code the

00:36:24.640 --> 00:36:24.650
the percentages of the startup code the
 

00:36:24.650 --> 00:36:26.550
the percentages of the startup code the
post startup code and the hot one

00:36:26.550 --> 00:36:26.560
post startup code and the hot one
 

00:36:26.560 --> 00:36:29.830
post startup code and the hot one
relative to the total text by code so

00:36:29.830 --> 00:36:29.840
relative to the total text by code so
 

00:36:29.840 --> 00:36:34.240
relative to the total text by code so
don't expect it to add 100% also one but

00:36:34.240 --> 00:36:34.250
don't expect it to add 100% also one but
 

00:36:34.250 --> 00:36:35.860
don't expect it to add 100% also one but
one piece of code can be in different

00:36:35.860 --> 00:36:35.870
one piece of code can be in different
 

00:36:35.870 --> 00:36:39.880
one piece of code can be in different
categories at the same time as you can

00:36:39.880 --> 00:36:39.890
categories at the same time as you can
 

00:36:39.890 --> 00:36:43.230
categories at the same time as you can
see here the average on average about

00:36:43.230 --> 00:36:43.240
see here the average on average about
 

00:36:43.240 --> 00:36:46.180
see here the average on average about
10% of the application Dex by code is

00:36:46.180 --> 00:36:46.190
10% of the application Dex by code is
 

00:36:46.190 --> 00:36:49.510
10% of the application Dex by code is
being marked as hot and this indicates

00:36:49.510 --> 00:36:49.520
being marked as hot and this indicates
 

00:36:49.520 --> 00:36:51.580
being marked as hot and this indicates
that when you focus on your app

00:36:51.580 --> 00:36:51.590
that when you focus on your app
 

00:36:51.590 --> 00:36:54.370
that when you focus on your app
optimizations you can dedicate the

00:36:54.370 --> 00:36:54.380
optimizations you can dedicate the
 

00:36:54.380 --> 00:36:56.320
optimizations you can dedicate the
attentional starting with just a small

00:36:56.320 --> 00:36:56.330
attentional starting with just a small
 

00:36:56.330 --> 00:36:58.650
attentional starting with just a small
part of your application code base you

00:36:58.650 --> 00:36:58.660
part of your application code base you
 

00:36:58.660 --> 00:37:01.510
part of your application code base you
can obviously spend time with all the

00:37:01.510 --> 00:37:01.520
can obviously spend time with all the
 

00:37:01.520 --> 00:37:04.060
can obviously spend time with all the
other partners world but probably this

00:37:04.060 --> 00:37:04.070
other partners world but probably this
 

00:37:04.070 --> 00:37:07.510
other partners world but probably this
is where you should start from let me go

00:37:07.510 --> 00:37:07.520
is where you should start from let me go
 

00:37:07.520 --> 00:37:09.400
is where you should start from let me go
over a quick review of what we presented

00:37:09.400 --> 00:37:09.410
over a quick review of what we presented
 

00:37:09.410 --> 00:37:14.710
over a quick review of what we presented
today and the main benefits we started

00:37:14.710 --> 00:37:14.720
today and the main benefits we started
 

00:37:14.720 --> 00:37:17.110
today and the main benefits we started
with Courtland and we described a few

00:37:17.110 --> 00:37:17.120
with Courtland and we described a few
 

00:37:17.120 --> 00:37:19.240
with Courtland and we described a few
new compiler optimizations that we added

00:37:19.240 --> 00:37:19.250
new compiler optimizations that we added
 

00:37:19.250 --> 00:37:22.750
new compiler optimizations that we added
that focus on coding performance we

00:37:22.750 --> 00:37:22.760
that focus on coding performance we
 

00:37:22.760 --> 00:37:25.810
that focus on coding performance we
describe briefly how we approach costing

00:37:25.810 --> 00:37:25.820
describe briefly how we approach costing
 

00:37:25.820 --> 00:37:26.900
describe briefly how we approach costing
optimizations

00:37:26.900 --> 00:37:26.910
optimizations
 

00:37:26.910 --> 00:37:28.549
optimizations
and that we first tried to seek

00:37:28.549 --> 00:37:28.559
and that we first tried to seek
 

00:37:28.559 --> 00:37:33.829
and that we first tried to seek
improvement in the cotton compiler we

00:37:33.829 --> 00:37:33.839
improvement in the cotton compiler we
 

00:37:33.839 --> 00:37:34.880
improvement in the cotton compiler we
moved to memory and storage

00:37:34.880 --> 00:37:34.890
moved to memory and storage
 

00:37:34.890 --> 00:37:37.640
moved to memory and storage
optimizations and my colleague mattress

00:37:37.640 --> 00:37:37.650
optimizations and my colleague mattress
 

00:37:37.650 --> 00:37:39.529
optimizations and my colleague mattress
introduced you to the concept of compact

00:37:39.529 --> 00:37:39.539
introduced you to the concept of compact
 

00:37:39.539 --> 00:37:43.220
introduced you to the concept of compact
X this is a new text format available

00:37:43.220 --> 00:37:43.230
X this is a new text format available
 

00:37:43.230 --> 00:37:46.220
X this is a new text format available
just own device and we will talk which

00:37:46.220 --> 00:37:46.230
just own device and we will talk which
 

00:37:46.230 --> 00:37:51.009
just own device and we will talk which
focuses on the memory savings and

00:37:51.009 --> 00:37:51.019
focuses on the memory savings and
 

00:37:51.019 --> 00:37:54.230
focuses on the memory savings and
finally I presented you the idea of

00:37:54.230 --> 00:37:54.240
finally I presented you the idea of
 

00:37:54.240 --> 00:37:57.380
finally I presented you the idea of
cloud profiles and we talked about how

00:37:57.380 --> 00:37:57.390
cloud profiles and we talked about how
 

00:37:57.390 --> 00:38:00.019
cloud profiles and we talked about how
we can bootstrap the profile guided

00:38:00.019 --> 00:38:00.029
we can bootstrap the profile guided
 

00:38:00.029 --> 00:38:03.049
we can bootstrap the profile guided
optimizations using a small percentage

00:38:03.049 --> 00:38:03.059
optimizations using a small percentage
 

00:38:03.059 --> 00:38:06.170
optimizations using a small percentage
of alpha beta channel users in order to

00:38:06.170 --> 00:38:06.180
of alpha beta channel users in order to
 

00:38:06.180 --> 00:38:09.289
of alpha beta channel users in order to
lead important performance improvement

00:38:09.289 --> 00:38:09.299
lead important performance improvement
 

00:38:09.299 --> 00:38:10.999
lead important performance improvement
right after install time for the

00:38:10.999 --> 00:38:11.009
right after install time for the
 

00:38:11.009 --> 00:38:14.630
right after install time for the
majority of the production users with

00:38:14.630 --> 00:38:14.640
majority of the production users with
 

00:38:14.640 --> 00:38:16.309
majority of the production users with
this I'd like to thank you for your

00:38:16.309 --> 00:38:16.319
this I'd like to thank you for your
 

00:38:16.319 --> 00:38:19.130
this I'd like to thank you for your
attention and for your presence and I

00:38:19.130 --> 00:38:19.140
attention and for your presence and I
 

00:38:19.140 --> 00:38:20.749
attention and for your presence and I
want to invite you all to Android

00:38:20.749 --> 00:38:20.759
want to invite you all to Android
 

00:38:20.759 --> 00:38:22.849
want to invite you all to Android
runtime office hours tomorrow where we

00:38:22.849 --> 00:38:22.859
runtime office hours tomorrow where we
 

00:38:22.859 --> 00:38:24.380
runtime office hours tomorrow where we
can answer any questions that you would

00:38:24.380 --> 00:38:24.390
can answer any questions that you would
 

00:38:24.390 --> 00:38:26.660
can answer any questions that you would
have about this presentation or about

00:38:26.660 --> 00:38:26.670
have about this presentation or about
 

00:38:26.670 --> 00:38:29.710
have about this presentation or about
the runtime in general we're gonna be at

00:38:29.710 --> 00:38:29.720
the runtime in general we're gonna be at
 

00:38:29.720 --> 00:38:33.680
the runtime in general we're gonna be at
half past five in Section a thank you so

00:38:33.680 --> 00:38:33.690
half past five in Section a thank you so
 

00:38:33.690 --> 00:38:34.620
half past five in Section a thank you so
much

00:38:34.620 --> 00:38:34.630
much
 

00:38:34.630 --> 00:38:37.020
much
[Applause]

00:38:37.020 --> 00:38:37.030
[Applause]
 

00:38:37.030 --> 00:38:59.550
[Applause]
[Music]

