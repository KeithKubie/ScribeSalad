WEBVTT
Kind: captions
Language: en

00:00:03.060 --> 00:00:05.900
Hi, I’m Carrie Anne, and welcome to CrashCourse
Computer Science!

00:00:05.910 --> 00:00:09.900
Last episode we discussed how writing programs
in native machine code, and having to contend

00:00:09.900 --> 00:00:14.610
with so many low level details, was a huge
impediment to writing complex programs.

00:00:14.610 --> 00:00:18.370
To abstract away many of these low-level details,
Programming Languages were developed that

00:00:18.370 --> 00:00:22.960
let programmers concentrate on solving a problem
with computation, and less on nitty gritty

00:00:22.960 --> 00:00:23.960
hardware details.

00:00:23.960 --> 00:00:28.730
So today, we’re going to continue that discussion,
and introduce some fundamental building blocks

00:00:28.730 --> 00:00:30.860
that almost all programming languages provide.

00:00:30.860 --> 00:00:40.160
INTRO

00:00:40.160 --> 00:00:43.530
Just like spoken languages, programming languages
have statements.

00:00:43.530 --> 00:00:47.219
These are individual complete thoughts, like
“I want tea” or “it is raining”.

00:00:47.219 --> 00:00:51.120
By using different words, we can change the
meaning; for example, “I want tea” to

00:00:51.120 --> 00:00:52.120
“I want unicorns”.

00:00:52.120 --> 00:00:54.891
But we can’t change “I want tea” to
“I want raining” - that doesn’t make

00:00:54.891 --> 00:00:55.891
grammatical sense.

00:00:55.891 --> 00:00:59.059
The set of rules that govern the structure
and composition of statements in a language

00:00:59.060 --> 00:01:00.360
is called syntax.

00:01:00.460 --> 00:01:03.440
The English language has syntax, and so do
all programming languages.

00:01:03.449 --> 00:01:06.060
“A equals 5” is a programming language
statement.

00:01:06.060 --> 00:01:10.000
In this case, the statement says a variable
named A has the number 5 stored in it.

00:01:10.000 --> 00:01:13.969
This is called an assignment statement because
we're assigning a value to a variable.

00:01:13.969 --> 00:01:18.469
To express more complex things, we need a
series of statements, like “A is 5, B is

00:01:18.469 --> 00:01:20.359
ten, C equals A plus B”

00:01:20.359 --> 00:01:25.469
This program tells the computer to set variable
‘A’ equal to 5, variable ‘B’ to 10,

00:01:25.469 --> 00:01:29.719
and finally to add ‘A’ and ‘B’ together,
and put that result, which is 15, into -- you

00:01:29.719 --> 00:01:31.240
guessed it -- variable C.

00:01:31.240 --> 00:01:33.090
Note that we can call variables whatever we
want.

00:01:33.090 --> 00:01:36.210
Instead of A, B and C, it could be apples,
pears, and fruits.

00:01:36.210 --> 00:01:39.310
The computer doesn’t care, as long as variables
are uniquely named.

00:01:39.310 --> 00:01:42.630
But it’s probably best practice to name
them things that make sense in case someone

00:01:42.630 --> 00:01:44.299
else is trying to understand your code.

00:01:44.299 --> 00:01:49.189
A program, which is a list of instructions,
is a bit like a recipe: boil water, add noodles,

00:01:49.189 --> 00:01:50.940
wait 10 minutes, drain and enjoy.

00:01:50.940 --> 00:01:55.070
In the same way, the program starts at the
first statement and runs down one at a time

00:01:55.070 --> 00:01:56.259
until it hits the end.

00:01:56.259 --> 00:01:58.090
So far, we’ve added two numbers together.

00:01:58.090 --> 00:01:59.090
Boring.

00:01:59.090 --> 00:02:00.609
Let’s make a video game instead!

00:02:00.609 --> 00:02:04.939
Of course, it’s way too early to think about
coding an entire game, so instead, we’ll

00:02:04.939 --> 00:02:08.940
use our example to write little snippets of
code that cover some programming fundamentals.

00:02:08.940 --> 00:02:12.390
Imagine we’re building an old-school arcade
game where Grace Hopper has to capture bugs

00:02:12.390 --> 00:02:15.620
before they get into the Harvard Mark 1 and
crash the computer!

00:02:15.620 --> 00:02:18.020
On every level, the number of bugs increases.

00:02:18.020 --> 00:02:21.280
Grace has to catch them before they wear out
any relays in the machine.

00:02:21.280 --> 00:02:24.410
Fortunately, she has a few extra relays for
repairs.

00:02:24.410 --> 00:02:27.950
To get started, we’ll need to keep track
of a bunch of values that are important for

00:02:27.950 --> 00:02:32.210
gameplay, like what level the player is on,
the score, the number of bugs remaining, as

00:02:32.210 --> 00:02:34.300
well as the number of spare relays in Grace’s
inventory.

00:02:34.300 --> 00:02:39.240
So, we must “initialize” our variables,
that is, set their initial value: “level

00:02:39.240 --> 00:02:45.150
equals 1, score equals 0, bugs equals 5, spare relays equals 4, and player name equals “Andre”.

00:02:45.150 --> 00:02:48.660
To create an interactive game, we need to
control the flow of the program beyond just

00:02:48.660 --> 00:02:50.210
running from top to bottom.

00:02:50.210 --> 00:02:52.790
To do this, we use Control Flow Statements.

00:02:52.790 --> 00:02:55.840
There are several types, but If Statements
are the most common.

00:02:55.840 --> 00:02:59.110
You can think of them as “If X is true,
then do Y”.

00:02:59.110 --> 00:03:02.560
An English language example is: “If I am
tired, then get tea”

00:03:02.560 --> 00:03:06.670
So if “I am tired” is a true statement,
then I will go get tea

00:03:06.670 --> 00:03:09.600
If “I am tired” is false, then I will
not go get tea.

00:03:09.600 --> 00:03:11.530
An IF statement is like a fork in the road.

00:03:11.530 --> 00:03:15.790
Which path you take is conditional on whether
the expression is true or false -- so these

00:03:15.790 --> 00:03:18.000
expressions are called Conditional Statements.

00:03:18.000 --> 00:03:21.920
In most programming languages, an if statement
looks something like …. “If, expression,

00:03:21.920 --> 00:03:24.570
then, some code, then end the if statement”.

00:03:24.570 --> 00:03:28.261
For example, if “level” is 1, then we
set the score to zero, because the player

00:03:28.261 --> 00:03:29.420
is just starting.

00:03:29.420 --> 00:03:32.400
We also set the number of bugs to 1, to keep
it easy for now.

00:03:32.400 --> 00:03:35.840
Notice the lines of code that are conditional
on the if-statement are nested between the

00:03:35.840 --> 00:03:37.040
IF and END IF.

00:03:37.040 --> 00:03:40.941
Of course, we can change the conditional expression
to whatever we want to test, like “is score

00:03:40.941 --> 00:03:43.560
greater than 10” 5 or “is bugs less than 1”.

00:03:43.560 --> 00:03:46.900
And If-Statements can be combined with an ELSE statement, which acts as a catch-all if the

00:03:46.910 --> 00:03:47.900
expression is false.

00:03:47.910 --> 00:03:51.370
If the level is not 1, the code inside the
ELSE block will be executed instead, and the

00:03:51.370 --> 00:03:55.150
number of bugs that Grace has to battle is
set to 3 times the level number.

00:03:55.150 --> 00:03:59.520
So on level 2, it would be six bugs, and on
level 3 there’s 9, and so on.

00:03:59.520 --> 00:04:03.260
Score isn’t modified in the ELSE block,
so Grace gets to keep any points earned.

00:04:03.260 --> 00:04:07.290
Here are some examples of if-then-else statements
from some popular programming languages -- you

00:04:07.290 --> 00:04:11.010
can see the syntax varies a little, but the
underlying structure is roughly the same.

00:04:11.010 --> 00:04:15.460
If-statements are executed once, a conditional
path is chosen, and the program moves on.

00:04:15.460 --> 00:04:19.260
To repeat some statements many times, we need
to create a conditional loop.

00:04:19.260 --> 00:04:22.340
One way is a while statement, also called
a while loop.

00:04:22.340 --> 00:04:25.940
As you might have guessed, this loops a piece
of code “while” a condition is true.

00:04:25.940 --> 00:04:28.660
Regardless of the programming language, they
look something like this:

00:04:28.660 --> 00:04:32.930
In our game, let’s say at certain points,
a friendly colleague restocks Grace with relays!

00:04:32.930 --> 00:04:33.660
Hooray!

00:04:33.660 --> 00:04:37.660
To animate him replenishing our stock back
up to a maximum of 4, we can use a while loop.

00:04:37.660 --> 00:04:39.120
Let’s walk through this code.

00:04:39.120 --> 00:04:43.500
First we’ll assume that Grace only has 1
tube left when her colleague enters.

00:04:43.500 --> 00:04:47.950
When we enter the while loop, the first thing
the computer does is test its conditional…is

00:04:47.950 --> 00:04:49.610
relays less than 4?

00:04:49.610 --> 00:04:52.160
Well, relays is currently 1, so yes.

00:04:52.160 --> 00:04:53.240
Now we enter the loop!

00:04:53.240 --> 00:04:56.520
Then, we hit the line of code: “relays equals
relays plus 1”.

00:04:56.520 --> 00:05:00.580
This is a bit confusing because the variable
is using itself in an assignment statement,

00:05:00.580 --> 00:05:01.600
so let's unpack it.

00:05:01.600 --> 00:05:05.880
You always start by figuring out the right
side of the equals sign first, so what does

00:05:05.880 --> 00:05:07.380
“relays plus 1” come out to be?

00:05:07.380 --> 00:05:11.580
Well, relays is currently the value 1, so
1 plus 1 equals 2.

00:05:11.580 --> 00:05:16.160
Then, this result gets saved back into the
variable relays, writing over the old value,

00:05:16.160 --> 00:05:17.770
so now relays stores the value 2.

00:05:17.770 --> 00:05:21.250
We’ve hit the end of the while loop, which
jumps the program back up.

00:05:21.250 --> 00:05:24.700
Just as before, we test the conditional to
see if we’re going to enter the loop.

00:05:24.700 --> 00:05:26.010
Is relays less than 4?

00:05:26.010 --> 00:05:29.400
Well, yes, relays now equals 2, so we enter
the loop again!

00:05:29.400 --> 00:05:30.710
2 plus 1 equals 3.

00:05:30.710 --> 00:05:32.660
So 3 is saved into relays.

00:05:32.660 --> 00:05:33.500
Loop again.

00:05:33.660 --> 00:05:34.660
Is 3 less than 4?

00:05:34.660 --> 00:05:35.440
Yes it is!

00:05:35.440 --> 00:05:36.380
Into the loop again.

00:05:36.460 --> 00:05:38.040
3 plus 1 equals 4.

00:05:38.040 --> 00:05:39.770
So we save 4 into relays.

00:05:39.770 --> 00:05:40.620
Loop again.

00:05:40.620 --> 00:05:41.920
Is 4 less than 4?....

00:05:41.920 --> 00:05:42.620
No!

00:05:42.620 --> 00:05:46.460
So the condition is now false, and thus we
exit the loop and move on to any remaining

00:05:46.460 --> 00:05:47.220
code.

00:05:47.220 --> 00:05:48.460
That’s how a while loop works!

00:05:48.470 --> 00:05:50.080
There’s also the common For Loop.

00:05:50.080 --> 00:05:53.670
Instead of being a condition-controlled loop
that can repeat forever until the condition

00:05:53.670 --> 00:05:58.490
is false, a FOR loop is count-controlled;
it repeats a specific number of times.

00:05:58.490 --> 00:05:59.950
They look something like this:

00:05:59.950 --> 00:06:01.990
Now, let’s put in some real values.

00:06:01.990 --> 00:06:05.850
This example loops 10 times, because we’ve
specified that variable ‘i’ starts at

00:06:05.850 --> 00:06:07.860
the value 1 and goes up to 10.

00:06:07.860 --> 00:06:11.960
The unique thing about a FOR loop is that
each time it hits NEXT, it adds one to ‘i’.

00:06:11.960 --> 00:06:15.960
When ‘i’ equals 10, the computer knows
it’s been looped 10 times, and the loop

00:06:15.960 --> 00:06:16.520
exits.

00:06:16.520 --> 00:06:20.600
We can set the number to whatever we want
-- 10, 42, or a billion -- it’s up to us.

00:06:20.600 --> 00:06:24.040
Let’s say we want to give the player a bonus
at the end of each level for the number of

00:06:24.040 --> 00:06:25.890
vacuum relays they have left over.

00:06:25.890 --> 00:06:30.040
As the game gets harder, it takes more skill
to have unused relays, so we want the bonus

00:06:30.040 --> 00:06:32.380
to go up exponentially based on the level.

00:06:32.380 --> 00:06:36.460
We need to write a piece of code that calculates exponents - that is, multiplying a number

00:06:36.460 --> 00:06:38.490
by itself a specific number of times.

00:06:38.490 --> 00:06:40.300
A loop is perfect for this!

00:06:40.300 --> 00:06:43.720
First lets initialize a new variable called
“bonus” and set it to 1.

00:06:43.720 --> 00:06:48.240
Then, we create a FOR loop starting at 1,
and looping up to the level number.

00:06:48.240 --> 00:06:52.700
Inside that loop, we multiply bonus times
the number of relays, and save that new value

00:06:52.710 --> 00:06:53.860
back into bonus.

00:06:53.870 --> 00:06:57.660
For example, let’s say relays equals 2,
and level equals 3.

00:06:57.660 --> 00:07:01.900
So the FOR loop will loop three times, which
means bonus is going to get multiplied by

00:07:01.900 --> 00:07:03.370
relays... by relays... by relays.

00:07:03.370 --> 00:07:07.230
Or in this case, times 2, times 2, times 2,
which is a bonus of 8!

00:07:07.230 --> 00:07:08.900
That’s 2 to the 3rd power!

00:07:08.900 --> 00:07:12.680
This exponent code is useful, and we might
want to use it in other parts of our code.

00:07:12.680 --> 00:07:15.850
It’d be annoying to copy and paste this
everywhere, and have to update the variable

00:07:15.850 --> 00:07:16.930
names each time.

00:07:16.930 --> 00:07:21.320
Also, if we found a bug, we’d have to hunt
around and update every place we used it.

00:07:21.320 --> 00:07:23.780
It also makes code more confusing to look at.

00:07:23.780 --> 00:07:24.720
Less is more!

00:07:24.800 --> 00:07:28.800
What we want is a way to package up our exponent
code so we can use it, get the result, and

00:07:28.810 --> 00:07:30.800
not have to see all the internal complexity.

00:07:30.810 --> 00:07:40.050
We’re once again moving up a new level of
abstraction!

00:07:40.050 --> 00:07:44.150
To compartmentalize and hide complexity, programming
languages can package pieces of code into

00:07:44.150 --> 00:07:49.180
named functions, also called methods or subroutines
in different programming languages.

00:07:49.180 --> 00:07:53.180
These functions can then be used by any other
part of that program just by calling its name.

00:07:53.180 --> 00:07:55.830
Let’s turn our exponent code into a function!

00:07:55.830 --> 00:07:57.420
First, we should name it.

00:07:57.420 --> 00:08:02.550
We can call it anything we want, like HappyUnicorn,
but since our code calculates exponents, let’s

00:08:02.550 --> 00:08:03.610
call it exponent.

00:08:03.610 --> 00:08:07.880
Also, instead of using specific variable names,
like “relays” and “levels”, we specify

00:08:07.880 --> 00:08:12.620
generic variable names, like Base and Exp,
whose initial values are going to be “passed”

00:08:12.620 --> 00:08:15.380
into our function from some other part of
the program.

00:08:15.380 --> 00:08:19.750
The rest of our code is the same as before,
now tucked into our function and with new

00:08:19.750 --> 00:08:20.750
variable names.

00:08:20.750 --> 00:08:24.211
Finally, we need to send the result of our
exponent code back to the part of the program

00:08:24.211 --> 00:08:25.260
that requested it.

00:08:25.260 --> 00:08:29.790
For this, we use a RETURN statement, and specify
that the value in ‘result’ be returned.

00:08:29.790 --> 00:08:32.019
So our full function code looks like this:

00:08:32.019 --> 00:08:36.159
Now we can use this function anywhere in our
program, simply by calling its name and passing

00:08:36.159 --> 00:08:37.159
in two numbers.

00:08:37.159 --> 00:08:41.680
For example, if we want to calculate 2 to
the 44th power, we can just call “exponent

00:08:41.680 --> 00:08:43.209
2 comma 44.”

00:08:43.209 --> 00:08:45.490
and like 18 trillion comes back.

00:08:45.490 --> 00:08:50.950
Behind the scenes, 2 and 44 get saved into
variables Base and Exp inside the function,

00:08:50.950 --> 00:08:54.810
it does all its loops as necessary, and then
the function returns with the result.

00:08:54.810 --> 00:08:58.139
Let’s use our newly minted function to calculate
a score bonus.

00:08:58.139 --> 00:09:00.680
First, we initialize bonus to 0.

00:09:00.680 --> 00:09:04.199
Then we check if the player has any remaining
relays with an if-statement.

00:09:04.199 --> 00:09:08.550
If they do, we call our exponent function,
passing in relays and level, which calculates

00:09:08.550 --> 00:09:12.800
relays to the power of level, and returns
the result, which we save into bonus.

00:09:12.800 --> 00:09:17.240
This bonus calculating code might be useful later, so let’s wrap it up as a function too!

00:09:17.320 --> 00:09:19.580
Yes, a function that calls a function!

00:09:19.589 --> 00:09:24.649
And then, wait for it…. we can use this
function in an even more complex function.

00:09:24.649 --> 00:09:27.949
Let’s write one that gets called everytime
the player finishes a level.

00:09:27.949 --> 00:09:32.269
We’ll call it “levelFinished” - it needs
to know the number of relays left, what level

00:09:32.269 --> 00:09:35.980
it was, and the current score; those values
have to get passed in.

00:09:35.980 --> 00:09:40.769
Inside our function, we’ll calculate the
bonus, using our calcBonus function, and add

00:09:40.769 --> 00:09:42.290
that to the running score.

00:09:42.290 --> 00:09:46.290
Also, if the current score is higher than
the game’s high score, we save the new high

00:09:46.290 --> 00:09:48.210
score and the players name.

00:09:48.210 --> 00:09:50.250
Finally, we return the current score.

00:09:50.250 --> 00:09:51.819
Now we’re getting pretty fancy.

00:09:51.819 --> 00:09:54.430
Functions are calling functions are calling
functions!

00:09:54.430 --> 00:09:57.910
When we call a single line of code, like this
the complexity is hidden.

00:09:57.910 --> 00:10:01.639
We don’t see all the internal loops and
variables, we just see the result come back

00:10:01.639 --> 00:10:04.269
as if by magic…. a total score of 53.

00:10:04.269 --> 00:10:07.259
But it’s not magic, it’s the power of
abstraction!

00:10:07.260 --> 00:10:11.760
If you understand this example, then you understand the power of functions, and the entire essence

00:10:11.760 --> 00:10:13.040
of modern programming.

00:10:13.040 --> 00:10:17.570
It’s not feasible to write, for example,
a web browser as one gigantically long list

00:10:17.570 --> 00:10:18.649
of statements.

00:10:18.649 --> 00:10:21.389
It would be millions of lines long and impossible
to comprehend!

00:10:21.389 --> 00:10:25.720
So instead, software consists of thousands
of smaller functions, each responsible for

00:10:25.720 --> 00:10:27.119
different features.

00:10:27.119 --> 00:10:30.470
In modern programming, it’s uncommon to
see functions longer than around 100 lines

00:10:30.470 --> 00:10:34.240
of code, because by then, there’s probably
something that should be pulled out and made

00:10:34.240 --> 00:10:35.550
into its own function.

00:10:35.550 --> 00:10:39.459
Modularizing programs into functions not only
allows a single programmer to write an entire

00:10:39.460 --> 00:10:44.160
app, but also allows teams of people to work
efficiently on even bigger programs.

00:10:44.160 --> 00:10:47.600
Different programmers can work on different
functions, and if everyone makes sure their

00:10:47.600 --> 00:10:51.120
code works correctly, then when everything
is put together, the whole program should

00:10:51.120 --> 00:10:51.840
work too!

00:10:51.840 --> 00:10:56.360
And in the real world, programmers aren’t
wasting time writing things like exponents.

00:10:56.360 --> 00:11:01.340
Modern programming languages come with huge
bundles of pre-written functions, called Libraries.

00:11:01.340 --> 00:11:06.760
These are written by expert coders, made efficient
and rigorously tested, and then given to everyone.

00:11:06.760 --> 00:11:10.259
There are libraries for almost everything,
including networking, graphics, and sound

00:11:10.260 --> 00:11:12.700
-- topics we’ll discuss in future episodes.

00:11:12.700 --> 00:11:16.040
But before we get to those, we need to talk
about Algorithms.

00:11:16.040 --> 00:11:17.180
Intrigued?

00:11:17.180 --> 00:11:18.180
You should be.

00:11:18.240 --> 00:11:19.240
I’ll see you next week.

