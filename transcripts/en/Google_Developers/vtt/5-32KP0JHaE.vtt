WEBVTT
Kind: captions
Language: en

00:00:00.240 --> 00:00:01.240
ERIC WOERNER: All right.

00:00:01.240 --> 00:00:02.240
My name is Eric Woerner.

00:00:02.240 --> 00:00:05.275
I'm the Director of Software
Architecture at Trustwave

00:00:05.275 --> 00:00:07.150
and today we're going
to talk about migrating

00:00:07.150 --> 00:00:11.025
Trustwave's large Customer
Portal over to Dart.

00:00:11.025 --> 00:00:12.650
So some of the things
we'll cover today

00:00:12.650 --> 00:00:14.350
as we're migrating
the UI that we

00:00:14.350 --> 00:00:16.079
built within Flex over to Dart.

00:00:16.079 --> 00:00:18.210
Similar to Workiva,
what they've done,

00:00:18.210 --> 00:00:20.610
but we'll explain
our journey, and what

00:00:20.610 --> 00:00:22.300
we've gotten to so far.

00:00:22.300 --> 00:00:24.660
At first we'll talk a little
bit about who Trustwave

00:00:24.660 --> 00:00:27.500
is as a company so you can
understand the services we

00:00:27.500 --> 00:00:30.020
offer to our customers, and
what the portal framework does

00:00:30.020 --> 00:00:31.269
today.

00:00:31.269 --> 00:00:33.060
And then we'll get into
a little bit of why

00:00:33.060 --> 00:00:34.445
we're migrating that this time.

00:00:34.445 --> 00:00:36.445
Why is it a good time for
us to get off of Flex,

00:00:36.445 --> 00:00:39.010
and start taking advantage
of Dart, and things

00:00:39.010 --> 00:00:40.105
that it offers.

00:00:40.105 --> 00:00:41.670
And as we go through
this journey,

00:00:41.670 --> 00:00:43.280
there was four
fundamental things

00:00:43.280 --> 00:00:44.738
that we wanted to
make sure that we

00:00:44.738 --> 00:00:46.940
accomplished when we started
looking into this in Q4

00:00:46.940 --> 00:00:48.040
last year.

00:00:48.040 --> 00:00:50.310
And we'll find out by
the end of this talk,

00:00:50.310 --> 00:00:52.310
and what you can discover
through our journey

00:00:52.310 --> 00:00:54.520
is we have increased
productivity

00:00:54.520 --> 00:00:57.000
with using Dart
Editor going forward.

00:00:57.000 --> 00:01:00.200
We can still use RPC
style calls within Dart

00:01:00.200 --> 00:01:03.200
for calling our
backend services.

00:01:03.200 --> 00:01:07.170
We have Application Development
with Angular and Polymer UI

00:01:07.170 --> 00:01:09.320
components for building
out our applications that

00:01:09.320 --> 00:01:11.040
load into our portal.

00:01:11.040 --> 00:01:12.790
And also, we wanted
to make sure that when

00:01:12.790 --> 00:01:16.160
we started migrating to the new
portal framework within Dart

00:01:16.160 --> 00:01:18.650
that we could still leverage
our Flex modules that we

00:01:18.650 --> 00:01:20.310
load in today to the portal.

00:01:20.310 --> 00:01:23.620
So let's get in a little bit
about who Trustwave is, and I

00:01:23.620 --> 00:01:25.780
promise this next slide
is the only slide I got

00:01:25.780 --> 00:01:28.460
from marketing, and so I'll go
through it pretty quick, so we

00:01:28.460 --> 00:01:30.080
get through it.

00:01:30.080 --> 00:01:33.300
Trustwave, they started as
a PCI compliance company.

00:01:33.300 --> 00:01:35.460
And PCI stands for the
payment card industry,

00:01:35.460 --> 00:01:37.860
and a set of controls
within a framework

00:01:37.860 --> 00:01:40.260
to make sure that your
credit card information done

00:01:40.260 --> 00:01:43.950
with companies that do credit
card payments is secure.

00:01:43.950 --> 00:01:46.210
And through that we've
grown, and now we

00:01:46.210 --> 00:01:47.910
have a portal-- an
on demand portal--

00:01:47.910 --> 00:01:51.380
that offer services for threat,
vulnerability, and compliance

00:01:51.380 --> 00:01:55.770
management to over 3 million
subscribers within the portal.

00:01:55.770 --> 00:01:59.590
We have support offices around
the globe in Manila, Warsaw,

00:01:59.590 --> 00:02:03.290
Chicago, and Denver, and we
support 12 different languages.

00:02:03.290 --> 00:02:07.045
And some of the applications,
and since we've gone forward,

00:02:07.045 --> 00:02:08.919
and they started as a
PCI compliance company,

00:02:08.919 --> 00:02:11.170
and we've grown from there, and
we have a portfolio of services

00:02:11.170 --> 00:02:13.044
that we offer to our
customers going forward.

00:02:13.044 --> 00:02:15.470
And some of those are
web application firewall,

00:02:15.470 --> 00:02:18.260
secure gateway, and
vulnerability scanning.

00:02:18.260 --> 00:02:20.020
So enough with the
marketing side,

00:02:20.020 --> 00:02:22.210
let's get into what the
Trustwave portal is.

00:02:22.210 --> 00:02:24.630
So we have this portal,
we have customers

00:02:24.630 --> 00:02:26.010
that log into our portal.

00:02:26.010 --> 00:02:29.800
At any time, it could be up
to 40,000 unique users that

00:02:29.800 --> 00:02:32.150
log into the portal
throughout the day,

00:02:32.150 --> 00:02:35.020
and those users come from
customers that have security

00:02:35.020 --> 00:02:36.419
needs that we offer to them.

00:02:36.419 --> 00:02:37.960
And when they come
to our portal they

00:02:37.960 --> 00:02:41.220
could be offered up one to
end different applications

00:02:41.220 --> 00:02:42.810
within the portal framework.

00:02:42.810 --> 00:02:45.260
So we needed a
portal that could be

00:02:45.260 --> 00:02:48.520
customizable to the
customer's needs.

00:02:48.520 --> 00:02:51.040
It's a common infrastructure
that we have of UI components

00:02:51.040 --> 00:02:53.610
with backing Java services,
and within the portal

00:02:53.610 --> 00:02:55.320
there's 35 different
applications

00:02:55.320 --> 00:02:56.295
that could be loaded.

00:02:56.295 --> 00:02:57.670
Now, for our normal
customer it'd

00:02:57.670 --> 00:03:00.790
be like close to one to
six different applications,

00:03:00.790 --> 00:03:03.915
but down below you see my
login, which is more support,

00:03:03.915 --> 00:03:05.550
and we offer up
more applications

00:03:05.550 --> 00:03:06.930
that they could get into.

00:03:06.930 --> 00:03:10.870
So my user, when I logged in,
up at the top in the header

00:03:10.870 --> 00:03:13.379
are separate applications
that are loaded on demand when

00:03:13.379 --> 00:03:15.420
you click on them, and
they come into the portal,

00:03:15.420 --> 00:03:16.570
and are loaded.

00:03:16.570 --> 00:03:18.760
We have 12 distributed
application teams

00:03:18.760 --> 00:03:21.710
that build out these
35 application modules.

00:03:21.710 --> 00:03:24.160
So you can imagine
we needed a need

00:03:24.160 --> 00:03:29.260
for a good framework for them
to be able to develop in.

00:03:29.260 --> 00:03:32.330
So what does that portal
framework look like today?

00:03:32.330 --> 00:03:34.500
What do we use for
this portal framework?

00:03:34.500 --> 00:03:36.920
Well, the front end, the
portal UI that we built out

00:03:36.920 --> 00:03:38.840
is all built out within Flex.

00:03:38.840 --> 00:03:41.670
It consists of UI
components, modules,

00:03:41.670 --> 00:03:44.470
and I'll speak about modules
within Flex in a minute,

00:03:44.470 --> 00:03:47.840
and the remote calls and
serialization using BlazeDS

00:03:47.840 --> 00:03:49.720
to our backend services.

00:03:49.720 --> 00:03:51.850
So Flex was fantastic for us.

00:03:51.850 --> 00:03:54.320
It's been fantastic
for us for a long time.

00:03:54.320 --> 00:03:57.580
It's proven language within
ActionScript and with an XML

00:03:57.580 --> 00:04:00.630
markup, it's really easy
to build UI components

00:04:00.630 --> 00:04:01.720
very quickly.

00:04:01.720 --> 00:04:03.970
It's very nice for
Java developers

00:04:03.970 --> 00:04:06.920
even on the backend can actually
get into the UI that sometimes

00:04:06.920 --> 00:04:09.660
don't like developing the
UI, but they pick up Flex

00:04:09.660 --> 00:04:14.600
very easily, because you can
see with an XML markup what

00:04:14.600 --> 00:04:16.290
your components
going to look like.

00:04:16.290 --> 00:04:18.889
So it's not like you're just
playing within JavaScript

00:04:18.889 --> 00:04:21.430
and the Dom and manipulating
and then seeing what it renders.

00:04:21.430 --> 00:04:25.040
You can actually see it
through the markup language.

00:04:25.040 --> 00:04:27.594
Flex has a vast UI
component library,

00:04:27.594 --> 00:04:29.510
so we've taken advantage
of all the components

00:04:29.510 --> 00:04:33.000
that brought along with Flex
like data grids, and drop

00:04:33.000 --> 00:04:34.930
downs, and the buttons.

00:04:34.930 --> 00:04:37.000
We've also grown that component.

00:04:37.000 --> 00:04:40.500
So it's very easily within Flex
to build your own custom UI

00:04:40.500 --> 00:04:41.820
components.

00:04:41.820 --> 00:04:44.580
And then we took advantage
on the backend with BlazeDS.

00:04:44.580 --> 00:04:48.210
BlazeDS allows us to do remote
calls to existing Java services

00:04:48.210 --> 00:04:49.510
that we have on the backend.

00:04:49.510 --> 00:04:52.390
And all our Java services
are built out within Spring.

00:04:52.390 --> 00:04:54.610
So the portal
framework gives you

00:04:54.610 --> 00:04:57.740
the ancillary services you
need for building applications.

00:04:57.740 --> 00:04:59.990
So our development
teams can concentrate

00:04:59.990 --> 00:05:02.420
on applications they need
to build for the customer

00:05:02.420 --> 00:05:05.680
needs, their set, and not
worry about security, session,

00:05:05.680 --> 00:05:08.190
auditing, logging, those
other services that

00:05:08.190 --> 00:05:10.380
are all part of the
portal framework,

00:05:10.380 --> 00:05:12.500
and also take advantage
of the UI components

00:05:12.500 --> 00:05:15.600
that we've built out.

00:05:15.600 --> 00:05:19.330
So as we start
moving over this is

00:05:19.330 --> 00:05:23.430
a graph that shows the number
of lines of code breakdown

00:05:23.430 --> 00:05:26.370
within some of our
main application

00:05:26.370 --> 00:05:29.900
blocks, compliant scan, and
MSS, and then we bucketed it

00:05:29.900 --> 00:05:31.750
off the other applications.

00:05:31.750 --> 00:05:33.780
And it's skewed to
the backend services.

00:05:33.780 --> 00:05:35.730
We have a lot of services
on the backend that

00:05:35.730 --> 00:05:38.390
are gathering up
information that we

00:05:38.390 --> 00:05:40.030
need to present through the UI.

00:05:40.030 --> 00:05:42.579
And those Java services, we're
not going to rewrite those.

00:05:42.579 --> 00:05:44.620
We need to take advantage
of those going forward,

00:05:44.620 --> 00:05:47.050
so as we started looking
for our new UI framework

00:05:47.050 --> 00:05:49.140
we had to make sure
that we accomplished

00:05:49.140 --> 00:05:51.681
certain needs to make sure that
we took advantage of the Java

00:05:51.681 --> 00:05:52.770
service on the backend.

00:05:52.770 --> 00:05:55.166
The front end, it's
ActionScript and MXML.

00:05:55.166 --> 00:05:56.540
That's all going
to be rewritten,

00:05:56.540 --> 00:05:58.490
so you can get an
idea from the graph

00:05:58.490 --> 00:06:00.709
here some of the
ActionScript and MXML

00:06:00.709 --> 00:06:02.000
that's going to be ported over.

00:06:02.000 --> 00:06:03.930
And it's not going to
be just a direct port.

00:06:03.930 --> 00:06:06.030
We're doing a rethinking
of some of these apps,

00:06:06.030 --> 00:06:09.174
and how it should be presented
in the portal going forward.

00:06:09.174 --> 00:06:10.590
So it's a great
opportunity for us

00:06:10.590 --> 00:06:14.220
as we start porting, start
rethinking some of our UI/UX

00:06:14.220 --> 00:06:16.560
decisions that we made in
the past, learn from them,

00:06:16.560 --> 00:06:20.190
and do it better within Dart.

00:06:20.190 --> 00:06:22.210
So why are we moving
away from Flex?

00:06:22.210 --> 00:06:23.570
It's been great for us.

00:06:23.570 --> 00:06:26.340
We chose it back in 2007,
because it was at a time

00:06:26.340 --> 00:06:30.500
that it was great and quick
to build out applications.

00:06:30.500 --> 00:06:33.670
But now with Flash is
there's the decreasing vendor

00:06:33.670 --> 00:06:36.770
interest within having a
Flash Player out there.

00:06:36.770 --> 00:06:39.510
And right now, you don't have
to use a Flash Player anymore

00:06:39.510 --> 00:06:42.060
to take advantage of
things that are now

00:06:42.060 --> 00:06:44.070
you can do through HTML5.

00:06:44.070 --> 00:06:46.900
So you can get a rich internet
application experience

00:06:46.900 --> 00:06:50.090
without actually using a Flash
Player within the browser

00:06:50.090 --> 00:06:54.365
like you had to do in the
past back in the late 2000s.

00:06:54.365 --> 00:06:56.490
There's also been a change
in the browser landscape

00:06:56.490 --> 00:06:59.230
that we really want to
take advantage of now.

00:06:59.230 --> 00:07:02.180
With web components coming up
big time within the industry

00:07:02.180 --> 00:07:04.140
we want to start taking
advantage of that now,

00:07:04.140 --> 00:07:06.473
and this is a good time for
us, because you can actually

00:07:06.473 --> 00:07:09.070
build out element tags,
and build them out.

00:07:09.070 --> 00:07:11.941
And it's going to have the same
feel that you have within Flex

00:07:11.941 --> 00:07:13.440
when you're doing
a markup language,

00:07:13.440 --> 00:07:15.231
now you can do that
within HTML, and that's

00:07:15.231 --> 00:07:17.700
a gradual, easy change
for our developers going

00:07:17.700 --> 00:07:19.510
into a new language.

00:07:19.510 --> 00:07:22.249
Flex is not a good
solution for mobile,

00:07:22.249 --> 00:07:24.540
and you can't load a Flash
Player on any mobile browser

00:07:24.540 --> 00:07:26.706
out there today that's going
to do anything for you,

00:07:26.706 --> 00:07:29.880
so as a company as we start
looking to go forward and have

00:07:29.880 --> 00:07:32.200
a mobile solution,
this is a good time

00:07:32.200 --> 00:07:34.937
to get off of Flex and Flash,
and start going forward

00:07:34.937 --> 00:07:37.145
as a company in thinking
about how we want to present

00:07:37.145 --> 00:07:39.615
the information to our users.

00:07:39.615 --> 00:07:40.990
And this is a
great chance for us

00:07:40.990 --> 00:07:44.300
to get productivity
from our developers.

00:07:44.300 --> 00:07:48.327
Right now, it's coming up soon,
I'll talk about our experience

00:07:48.327 --> 00:07:50.660
within Dart Editor, and it
hasn't been a good experience

00:07:50.660 --> 00:07:52.740
so far for our
developers within Flash,

00:07:52.740 --> 00:07:54.250
and now going
forward within Dart,

00:07:54.250 --> 00:07:55.730
we're going to have
great productivity

00:07:55.730 --> 00:07:56.563
from our developers.

00:07:58.900 --> 00:08:03.950
So it was about two years
ago, we're out at Adobe MAX,

00:08:03.950 --> 00:08:07.280
and Flex is really not
being talked about as much

00:08:07.280 --> 00:08:08.010
in the past.

00:08:08.010 --> 00:08:09.510
It was about two
or three years ago,

00:08:09.510 --> 00:08:10.850
I can't get my timing right.

00:08:10.850 --> 00:08:11.850
Time flies.

00:08:11.850 --> 00:08:14.970
But we'd start asking
questions, the presentations

00:08:14.970 --> 00:08:18.410
weren't as big, and we'd gone
to the event for two years,

00:08:18.410 --> 00:08:19.644
and this was our third year.

00:08:19.644 --> 00:08:21.060
So we knew something
was going on,

00:08:21.060 --> 00:08:23.160
and it was right after the
event they all of a sudden said,

00:08:23.160 --> 00:08:24.950
all right, Flex is
out of our boat.

00:08:24.950 --> 00:08:26.690
We're going to open
source with it,

00:08:26.690 --> 00:08:28.970
and Flash Player's
going away, so it

00:08:28.970 --> 00:08:31.360
started making us think,
OK, what's next for us?

00:08:31.360 --> 00:08:34.419
We got to start going
for newer technologies.

00:08:34.419 --> 00:08:35.985
So the one thing
that back in 2007

00:08:35.985 --> 00:08:37.490
when we decide to
go with Flex, it

00:08:37.490 --> 00:08:40.480
was great, because we didn't
want to jump into JavaScript.

00:08:40.480 --> 00:08:42.830
When we have that many
12 developer teams,

00:08:42.830 --> 00:08:45.370
I can only imagine all of
them designing all their code

00:08:45.370 --> 00:08:47.020
in JavaScript, and
bringing it together

00:08:47.020 --> 00:08:49.550
at run time and what spaghetti
code that would create.

00:08:49.550 --> 00:08:52.810
So Dart was a great framework
for us to choose going forward,

00:08:52.810 --> 00:08:55.800
and the first thing that
we thought about in Q4

00:08:55.800 --> 00:08:57.930
was looking at Angular
for our framework,

00:08:57.930 --> 00:09:00.480
and Polymer for
our UI components.

00:09:00.480 --> 00:09:02.837
Polymer has a great set of
the core and paper elements

00:09:02.837 --> 00:09:04.170
that we could take advantage of.

00:09:04.170 --> 00:09:05.690
And when we started doing
this in quarter four,

00:09:05.690 --> 00:09:07.523
these were the goals
that we're looking for.

00:09:07.523 --> 00:09:10.260
We wanted to make sure we had
a good development environment,

00:09:10.260 --> 00:09:12.450
we had support for
current Spring services

00:09:12.450 --> 00:09:14.491
going forward because
we've got to take advantage

00:09:14.491 --> 00:09:16.330
of all those services
that we have,

00:09:16.330 --> 00:09:17.260
we want to make
sure that we have

00:09:17.260 --> 00:09:19.343
a framework for building
those portal modules that

00:09:19.343 --> 00:09:20.157
are loaded in.

00:09:20.157 --> 00:09:21.740
And I forgot to touch
on this earlier,

00:09:21.740 --> 00:09:23.115
and I'm going to
touch on it now,

00:09:23.115 --> 00:09:25.650
but within Flex, they have
a concept of a module.

00:09:25.650 --> 00:09:27.960
That module can be
loaded in at run time.

00:09:27.960 --> 00:09:29.284
It's a SWF file.

00:09:29.284 --> 00:09:31.450
So all those applications
that you saw on our portal

00:09:31.450 --> 00:09:33.990
at the top those were
loaded in at run time when

00:09:33.990 --> 00:09:35.200
you clicked on those modules.

00:09:35.200 --> 00:09:38.290
The SWF was brought in, and it
would appear within the app.

00:09:38.290 --> 00:09:41.980
So it allowed our developers
to work on those independently

00:09:41.980 --> 00:09:45.637
of our portal framework,
which sped it up a lot,

00:09:45.637 --> 00:09:47.720
so going forward we want
to make sure we can still

00:09:47.720 --> 00:09:49.100
do that going forward.

00:09:49.100 --> 00:09:52.220
And we want to make sure we
can support our existing Flex

00:09:52.220 --> 00:09:54.476
modules in the Dart
portal going forward,

00:09:54.476 --> 00:09:55.600
because we have 35 of them.

00:09:55.600 --> 00:09:56.740
We can't port them all at once.

00:09:56.740 --> 00:09:57.948
It's going to take some time.

00:10:00.910 --> 00:10:02.930
So the common
development environment.

00:10:02.930 --> 00:10:04.830
With the use of
Dart Editor, we have

00:10:04.830 --> 00:10:08.900
seen great productivity going
forward for our developers.

00:10:08.900 --> 00:10:14.070
The graph on the right
shows within Flash Builder

00:10:14.070 --> 00:10:16.700
that we were using within
Eclipse building out

00:10:16.700 --> 00:10:19.970
a module that they were building
and loading into our portal.

00:10:19.970 --> 00:10:22.100
During development
time, the compile time

00:10:22.100 --> 00:10:24.290
was close to two
minutes, and that's

00:10:24.290 --> 00:10:25.382
being on the median edge.

00:10:25.382 --> 00:10:27.090
We have some are bigger
applications that

00:10:27.090 --> 00:10:29.220
were taking close to
three to four minutes

00:10:29.220 --> 00:10:32.040
before you could actually
see what was happening

00:10:32.040 --> 00:10:34.110
within your application.

00:10:34.110 --> 00:10:36.300
Incremental updates
were at 90 seconds.

00:10:36.300 --> 00:10:38.920
So it wasn't any quicker after
you had your server running

00:10:38.920 --> 00:10:41.830
and then make a change and then
publish it out to your server.

00:10:41.830 --> 00:10:44.460
So this was really
decreasing productivity

00:10:44.460 --> 00:10:47.317
from our developers, because
all developers at times has ADD,

00:10:47.317 --> 00:10:48.900
and all a sudden,
you're just waiting,

00:10:48.900 --> 00:10:50.400
you're looking at your phone,
you're looking at email,

00:10:50.400 --> 00:10:52.880
and then you forget what
you're actually working on it.

00:10:52.880 --> 00:10:56.420
So Dart, it's fantastic.

00:10:56.420 --> 00:10:58.510
These times are for
before we started

00:10:58.510 --> 00:11:01.115
using Polymer and Angular,
and our compile times

00:11:01.115 --> 00:11:02.570
and incremental updates.

00:11:02.570 --> 00:11:05.110
So now you can actually make
a change in the Dart Editor,

00:11:05.110 --> 00:11:06.690
first time the pub
server starts up,

00:11:06.690 --> 00:11:09.210
that's your time that it takes,
but the incremental updates

00:11:09.210 --> 00:11:11.220
are instantaneous, and
you can see your changes.

00:11:11.220 --> 00:11:14.592
And for building out UIs, this
is a really, really key part

00:11:14.592 --> 00:11:16.300
of building out your
UIs because you want

00:11:16.300 --> 00:11:18.700
to see your changes right away.

00:11:18.700 --> 00:11:20.600
We're still going
forward with Eclipse

00:11:20.600 --> 00:11:23.520
right now for our development
four our Java services.

00:11:23.520 --> 00:11:25.370
So right now, we have
a mixed environment,

00:11:25.370 --> 00:11:29.732
but with IntelliJ going forward
that's probably the next step

00:11:29.732 --> 00:11:31.190
that we'll go to
that we could have

00:11:31.190 --> 00:11:35.960
a mixed environment for building
out these UI and the services.

00:11:39.600 --> 00:11:41.000
Serialization within Dart.

00:11:41.000 --> 00:11:42.550
So we needed to
still take advantage

00:11:42.550 --> 00:11:45.307
of our backend services,
so this is the same slide

00:11:45.307 --> 00:11:47.890
that I showed earlier, but we're
changing out our technologies

00:11:47.890 --> 00:11:49.060
that are used here.

00:11:49.060 --> 00:11:52.414
So now the portal UI is going
to be built out within Dart.

00:11:52.414 --> 00:11:54.580
But how are we going to
call those backend services?

00:11:54.580 --> 00:11:56.910
How are we going to still
have that same remoting

00:11:56.910 --> 00:11:58.760
and that same feel
for our developers

00:11:58.760 --> 00:12:02.490
as they're coding out, calling
their backend services?

00:12:02.490 --> 00:12:05.780
Well, what we did is we built
out a layer within Dart that

00:12:05.780 --> 00:12:08.540
supports an RPC-style
service endpoints,

00:12:08.540 --> 00:12:12.159
and it uses our existing session
mechanism that we have today.

00:12:12.159 --> 00:12:14.700
So we have a session that goes
down on every service calling.

00:12:14.700 --> 00:12:17.910
All of our backend Java
services, remoted services

00:12:17.910 --> 00:12:21.061
on the backend are all
protected as well by sessions

00:12:21.061 --> 00:12:23.310
so we have to make sure we
handle that mechanism going

00:12:23.310 --> 00:12:24.300
forward.

00:12:24.300 --> 00:12:28.971
And everything is serialized
from the Dart models,

00:12:28.971 --> 00:12:30.720
our objects that we
have on the front end,

00:12:30.720 --> 00:12:33.080
to JSON to our backend services.

00:12:33.080 --> 00:12:35.464
And then on the backend, we
built a layer within Java

00:12:35.464 --> 00:12:36.880
that's going to
actually translate

00:12:36.880 --> 00:12:39.030
that JSON into our
Java objects, and then

00:12:39.030 --> 00:12:41.080
be able to call our
backend services.

00:12:41.080 --> 00:12:44.350
So you get the feel within
Dart that you're actually

00:12:44.350 --> 00:12:46.030
calling a service
that's within Dart,

00:12:46.030 --> 00:12:48.200
but it's actually remoting
to your backend service,

00:12:48.200 --> 00:12:50.120
so it's been fantastic.

00:12:50.120 --> 00:12:52.506
One of things that we
use on the portal UI side

00:12:52.506 --> 00:12:54.422
is we use the SourceGen
library that I'm going

00:12:54.422 --> 00:12:55.360
to talk about in a minute.

00:12:55.360 --> 00:12:57.370
Thanks to Kevin Moore
who built that library,

00:12:57.370 --> 00:12:59.394
and it's been fantastic for us.

00:12:59.394 --> 00:13:00.810
And on the backend
services, we're

00:13:00.810 --> 00:13:04.410
having direct mapping from our
Dart objects to our Java types.

00:13:08.650 --> 00:13:12.771
Here's a little bit of a sample
code of our simple user class.

00:13:12.771 --> 00:13:14.520
And I left out a little
bit of the middle,

00:13:14.520 --> 00:13:16.930
because we didn't want to have
all the values going down.

00:13:16.930 --> 00:13:20.490
So one of the complaints
when we were in Flex

00:13:20.490 --> 00:13:23.720
is having to do boilerplate
code over and over again.

00:13:23.720 --> 00:13:26.450
We used what was called
Cairngorm within Flex

00:13:26.450 --> 00:13:28.290
back in the day,
and you had to have

00:13:28.290 --> 00:13:31.060
so many different classes
for making one service

00:13:31.060 --> 00:13:32.300
call to the backend.

00:13:32.300 --> 00:13:34.540
And developers hate to
always create those classes

00:13:34.540 --> 00:13:35.880
over and over and over again.

00:13:35.880 --> 00:13:37.460
They're copying and pasting,
just creating the class.

00:13:37.460 --> 00:13:38.790
We wanted to get rid of that.

00:13:38.790 --> 00:13:40.950
And one of the things
that we have where we're

00:13:40.950 --> 00:13:44.520
taking a [INAUDIBLE] Dart
object that we've created,

00:13:44.520 --> 00:13:46.766
and we want to actually
serialize to the backend,

00:13:46.766 --> 00:13:48.890
you have to usually build
out two different methods

00:13:48.890 --> 00:13:50.794
for to JSON and from JSON.

00:13:50.794 --> 00:13:52.710
So you could have the
serialization going back

00:13:52.710 --> 00:13:54.490
from the JSON on
the communication.

00:13:54.490 --> 00:13:56.670
We didn't want to have
to have developers always

00:13:56.670 --> 00:13:58.800
doing the translations
in these model objects,

00:13:58.800 --> 00:14:00.600
because that's a waste of time.

00:14:00.600 --> 00:14:02.710
So by using the
SourceGen projects

00:14:02.710 --> 00:14:05.690
we're able to
annotate our classes,

00:14:05.690 --> 00:14:09.140
do a pre-build process
that creates a part file,

00:14:09.140 --> 00:14:11.970
and you can include that part
file within your model class,

00:14:11.970 --> 00:14:14.440
and you get these two
functions from the part file.

00:14:14.440 --> 00:14:16.460
It builds your
translation for you.

00:14:16.460 --> 00:14:19.760
So now you just add two methods
for the to JSON and from JSON,

00:14:19.760 --> 00:14:22.650
and it automatically gets
that serialization you want,

00:14:22.650 --> 00:14:25.740
and you didn't have to actually
build out those methods.

00:14:25.740 --> 00:14:26.999
So thank you, Kevin Moore.

00:14:26.999 --> 00:14:29.040
That's a great library
that we take advantage of,

00:14:29.040 --> 00:14:32.770
and it's been great for us.

00:14:32.770 --> 00:14:36.950
And then this is an example code
of our RPC layer within Dart.

00:14:36.950 --> 00:14:40.940
On the left side, it's
actually using the user service

00:14:40.940 --> 00:14:44.190
within one of our module
apps that we built out

00:14:44.190 --> 00:14:46.500
in Dart for actually
adding users to our portal.

00:14:46.500 --> 00:14:48.790
So we're taking some of
our admin apps early on

00:14:48.790 --> 00:14:51.270
and porting them over from Flex.

00:14:51.270 --> 00:14:54.080
On the right side is the
implementation of the user

00:14:54.080 --> 00:15:00.710
service class that's extending
underneath RPC service class,

00:15:00.710 --> 00:15:03.840
and it allows you to
do invokes on methods

00:15:03.840 --> 00:15:08.180
on the backend that are actually
tied to a Spring service.

00:15:08.180 --> 00:15:11.152
So when someone uses
the user service,

00:15:11.152 --> 00:15:12.610
they don't care
where it's calling,

00:15:12.610 --> 00:15:15.850
what URL backend it's going
to that can switch up on them.

00:15:15.850 --> 00:15:17.650
They're just guaranteed
on the front end

00:15:17.650 --> 00:15:21.260
that when I create a user
and I say create user,

00:15:21.260 --> 00:15:23.810
I'm going to create a user,
and it returns a future.

00:15:23.810 --> 00:15:26.460
So on that side there's
nothing on the return of it

00:15:26.460 --> 00:15:28.510
so they just went
on on their way.

00:15:28.510 --> 00:15:31.611
But on the bottom side we
take advantage of async await.

00:15:31.611 --> 00:15:33.360
So this is really nice
for our developers.

00:15:33.360 --> 00:15:35.540
Instead of within Flex,
we've been doing callbacks

00:15:35.540 --> 00:15:38.480
after callbacks after callbacks
after callbacks chaining them

00:15:38.480 --> 00:15:40.900
along, and it's
a lot easier when

00:15:40.900 --> 00:15:43.740
you can actually see your
code synchronously going down.

00:15:43.740 --> 00:15:47.560
So going forward it
calls the find all users.

00:15:47.560 --> 00:15:50.325
Right here when it passes down
this method within the JSON

00:15:50.325 --> 00:15:51.950
it actually puts the
method name you're

00:15:51.950 --> 00:15:53.699
calling on the backend
service so it knows

00:15:53.699 --> 00:15:55.750
how to translate that through.

00:15:55.750 --> 00:15:58.510
Put an await on it, and
you've got your return back

00:15:58.510 --> 00:15:59.150
synchronously.

00:15:59.150 --> 00:16:02.050
You don't have to have callback
after callback after callback.

00:16:02.050 --> 00:16:04.034
Async await has been a
great feature in Dart

00:16:04.034 --> 00:16:06.200
that we've been looking
forward to take advantage of

00:16:06.200 --> 00:16:07.910
and our engineers
really like it.

00:16:11.140 --> 00:16:14.430
Portal UI modules.

00:16:14.430 --> 00:16:16.830
So within Flex, our
application teams

00:16:16.830 --> 00:16:20.770
can build modules out, and
then bring it in at run time.

00:16:20.770 --> 00:16:22.990
It's been a fantastic
feature for us.

00:16:22.990 --> 00:16:25.180
It allows them to develop
on their own independent

00:16:25.180 --> 00:16:26.910
of the portal framework.

00:16:26.910 --> 00:16:30.220
Going forward, we need that same
type of concept going forward,

00:16:30.220 --> 00:16:32.600
so we started looking at
Angular Dart for our framework.

00:16:32.600 --> 00:16:34.284
That was the first
one, and we wanted

00:16:34.284 --> 00:16:36.450
to take advantage of the
dependency injection in it.

00:16:36.450 --> 00:16:39.530
We look at an Angular
Dart as the framework

00:16:39.530 --> 00:16:42.580
and Polymer as the UI components
that you can bring into it

00:16:42.580 --> 00:16:44.097
and you mesh those two together.

00:16:44.097 --> 00:16:46.180
So we didn't want to just
build it out on Polymer.

00:16:46.180 --> 00:16:48.060
So our first journey
was building out

00:16:48.060 --> 00:16:49.900
the entire framework
within Angular

00:16:49.900 --> 00:16:51.630
and having our
development teams use it,

00:16:51.630 --> 00:16:54.240
so we could take advantage of
the routing in Angular Dart.

00:16:54.240 --> 00:16:56.410
And we're on Angular
Dart 1.0 right now.

00:16:56.410 --> 00:16:59.470
And the routing is great for us
because currently in our portal

00:16:59.470 --> 00:17:01.990
we can't take advantage of
the back and forward button.

00:17:01.990 --> 00:17:03.000
We're in a Flash module.

00:17:03.000 --> 00:17:04.730
We didn't build the
integration between the two

00:17:04.730 --> 00:17:05.890
and keep track of
every screen they

00:17:05.890 --> 00:17:07.306
were moving to
because they didn't

00:17:07.306 --> 00:17:08.680
have anything built into it.

00:17:08.680 --> 00:17:10.930
So basically if someone tried
to push back or forward,

00:17:10.930 --> 00:17:12.020
we warned them,
hey, you're going

00:17:12.020 --> 00:17:13.520
to be getting out of our site.

00:17:13.520 --> 00:17:16.312
And that's a bad user
experience for our portal.

00:17:16.312 --> 00:17:18.020
We want to allow them
that if they switch

00:17:18.020 --> 00:17:19.790
through different views
they can go back and forth,

00:17:19.790 --> 00:17:21.206
so the routing
within Angular Dart

00:17:21.206 --> 00:17:23.329
was something we wanted
to take advantage of.

00:17:23.329 --> 00:17:26.010
But it was lacking in
some ways within 1.0.

00:17:26.010 --> 00:17:30.160
When we go to Views within
our rich internet application

00:17:30.160 --> 00:17:32.930
they're stateful views that
you transition through.

00:17:32.930 --> 00:17:35.010
In an Angular Dart
1.0 router right

00:17:35.010 --> 00:17:38.732
now doesn't have a
concept of stateful views.

00:17:38.732 --> 00:17:40.190
When you go through
the routes it's

00:17:40.190 --> 00:17:42.040
a new view that's
loaded in every time

00:17:42.040 --> 00:17:43.390
as you go through that route.

00:17:43.390 --> 00:17:45.470
So we're looking forward
to 2.0, the specs

00:17:45.470 --> 00:17:47.261
that are coming out
from there that they're

00:17:47.261 --> 00:17:49.800
solving part of that problem.

00:17:49.800 --> 00:17:52.170
That was the main problem
with it, excuse me.

00:17:52.170 --> 00:17:54.690
The next one was the deferred
loading of applications.

00:17:54.690 --> 00:17:56.860
So we have that right
now with module SWFs.

00:17:56.860 --> 00:17:59.740
With Angular Dart we've been
able to accomplish this.

00:17:59.740 --> 00:18:02.720
We have a base module that
people can extend off of,

00:18:02.720 --> 00:18:05.750
and we do deferred loading
of that library package

00:18:05.750 --> 00:18:07.980
within our portal
until the user clicks

00:18:07.980 --> 00:18:11.360
on the header to load in
that module application.

00:18:11.360 --> 00:18:15.290
So at that time, we call that
library, we say load library,

00:18:15.290 --> 00:18:18.330
and when we know we've
loaded it in, at that point,

00:18:18.330 --> 00:18:22.650
we bind the module from Angular,
so we can have that element

00:18:22.650 --> 00:18:26.430
tag, and then we use an Angular
compiler to compile that view

00:18:26.430 --> 00:18:29.030
in with that element
tag, and voila,

00:18:29.030 --> 00:18:32.160
it's loaded asynchronously
from the backend,

00:18:32.160 --> 00:18:34.140
and it's not there
at compile time.

00:18:34.140 --> 00:18:37.350
So we get the same feel that
we've gotten within Flex today

00:18:37.350 --> 00:18:39.990
with loading module
SWFs in a different way

00:18:39.990 --> 00:18:42.300
by using the deferred
loading within Dart,

00:18:42.300 --> 00:18:43.960
and then the Angular
library we're

00:18:43.960 --> 00:18:47.770
able to compile in
element tags at run time.

00:18:47.770 --> 00:18:49.362
That has been one
of the major goals

00:18:49.362 --> 00:18:50.570
that we needed to accomplish.

00:18:50.570 --> 00:18:51.860
It's one of the things
that we were thinking

00:18:51.860 --> 00:18:53.401
about when we were
going to port over

00:18:53.401 --> 00:18:55.110
to a new framework
is we still needed

00:18:55.110 --> 00:18:57.510
to keep that concept today,
because we don't want to have

00:18:57.510 --> 00:19:00.330
the user experience at the
beginning of our portal loading

00:19:00.330 --> 00:19:02.660
to be cumbersome to our users.

00:19:02.660 --> 00:19:05.770
We want it to be quick and
fast, have the tree shaking

00:19:05.770 --> 00:19:08.711
happening from Dart to GS,
and defer load those libraries

00:19:08.711 --> 00:19:09.210
at run time.

00:19:11.740 --> 00:19:13.410
Now, going forward
we also within Flex,

00:19:13.410 --> 00:19:16.310
we had a vast array
of UI components.

00:19:16.310 --> 00:19:19.880
We had data grids, we had
drop downs, we had splitterrs,

00:19:19.880 --> 00:19:22.240
sliders, you name it,
collapsible panels,

00:19:22.240 --> 00:19:23.940
it was all built into
the Flex library,

00:19:23.940 --> 00:19:25.856
and a lot of components
that we built out that

00:19:25.856 --> 00:19:27.100
were custom to us.

00:19:27.100 --> 00:19:29.070
So going forward it's
like what UI component

00:19:29.070 --> 00:19:30.560
are we going to build off of?

00:19:30.560 --> 00:19:33.680
Polymer UI has been a perfect
fit for us going forward

00:19:33.680 --> 00:19:36.370
Polymer UI, with the
core and paper elements,

00:19:36.370 --> 00:19:39.136
gives us all the base UI
components that we need,

00:19:39.136 --> 00:19:40.510
and then we can
build off of them

00:19:40.510 --> 00:19:42.950
going forward, and actually
following the web component

00:19:42.950 --> 00:19:44.075
standard.

00:19:44.075 --> 00:19:46.450
So we've actually gotten the
binding between Angular Dart

00:19:46.450 --> 00:19:49.760
and Polymer working
to a point, We're

00:19:49.760 --> 00:19:52.840
hoping going forward that
the two teams solve some

00:19:52.840 --> 00:19:54.700
of that between the
bindings and the events,

00:19:54.700 --> 00:19:57.490
but it's worked for us
right now going forward.

00:19:57.490 --> 00:20:00.290
And now we have the distributed
application development

00:20:00.290 --> 00:20:02.910
in the new portal going forward.

00:20:02.910 --> 00:20:05.710
But as we were
going through and we

00:20:05.710 --> 00:20:08.232
were using Angular and
Polymer we noticed something

00:20:08.232 --> 00:20:09.190
within the Dart Editor.

00:20:09.190 --> 00:20:12.040
The gains that we wanted to
see coming from Flex, which

00:20:12.040 --> 00:20:14.190
we still have because the
experience within Flex

00:20:14.190 --> 00:20:18.820
was so horrible, it was starting
to slow down the compile times

00:20:18.820 --> 00:20:22.140
within the development
of our modules.

00:20:22.140 --> 00:20:23.870
So we first started
off with Angular,

00:20:23.870 --> 00:20:25.400
and we're just going to
build out all our modules

00:20:25.400 --> 00:20:27.858
within Angular, we'll build
out UI components with Angular.

00:20:27.858 --> 00:20:30.610
We were just staying away from
Polymer for this last quarter,

00:20:30.610 --> 00:20:32.840
because Angular
was farther ahead,

00:20:32.840 --> 00:20:34.490
Polymer was a little bit behind.

00:20:34.490 --> 00:20:37.040
Well, at that time
we saw compile times

00:20:37.040 --> 00:20:41.550
for some of our modules, bigger
modules, taking 22 seconds,

00:20:41.550 --> 00:20:44.904
and the incremental updates
were taking around 12 seconds.

00:20:44.904 --> 00:20:47.320
So it's way better than what
we were experiencing in Flex,

00:20:47.320 --> 00:20:48.820
but it still wasn't
the quickness

00:20:48.820 --> 00:20:50.269
that we wanted to see.

00:20:50.269 --> 00:20:51.810
But then we went
through and we said,

00:20:51.810 --> 00:20:53.351
well, Polymer's
catching up, we still

00:20:53.351 --> 00:20:55.387
want to use Angular
for our framework,

00:20:55.387 --> 00:20:57.720
let's use them together, let's
start bringing in the web

00:20:57.720 --> 00:21:00.261
components from Polymer, take
advantage of the paper and core

00:21:00.261 --> 00:21:02.100
elements.

00:21:02.100 --> 00:21:05.170
And within the transformers that
we were seeing during dev time,

00:21:05.170 --> 00:21:07.540
we put the Polymer transformer
first and the Angular

00:21:07.540 --> 00:21:09.680
transformer second.

00:21:09.680 --> 00:21:12.250
All a sudden, it jumped
up to 40 and 28 seconds,

00:21:12.250 --> 00:21:14.270
and it was like, OK,
this is not what we want

00:21:14.270 --> 00:21:15.960
to see during development time.

00:21:15.960 --> 00:21:18.880
So just by chance, we
flipped the transformers

00:21:18.880 --> 00:21:21.820
and we saw a great increase
on it between the two.

00:21:21.820 --> 00:21:23.790
But then at that time
when we found that out,

00:21:23.790 --> 00:21:25.640
all of a sudden Angular
2.0's coming out,

00:21:25.640 --> 00:21:27.690
that's going to solve
a lot of our problems,

00:21:27.690 --> 00:21:29.850
and we started building
out now, and our teams

00:21:29.850 --> 00:21:32.700
are building out all their
views and UI components

00:21:32.700 --> 00:21:33.840
within Polymer.

00:21:33.840 --> 00:21:36.415
And the Polymer method
of going through it

00:21:36.415 --> 00:21:39.290
and actual compile times and
incremental updates is great.

00:21:39.290 --> 00:21:41.320
So our development teams
are going really fast,

00:21:41.320 --> 00:21:43.860
developing through, building
out these UI components,

00:21:43.860 --> 00:21:46.157
and now we're-- with
the announcement today,

00:21:46.157 --> 00:21:48.490
which made me very happy with
the dev release of Angular

00:21:48.490 --> 00:21:51.354
2.0-- we're going to go forward
building our portal framework

00:21:51.354 --> 00:21:53.520
out within Angular, taking
advantage of the routing,

00:21:53.520 --> 00:21:55.900
and be able to bring in
these web components,

00:21:55.900 --> 00:21:58.029
and get the binding and
the events between the two

00:21:58.029 --> 00:21:59.570
as the teams start
building them out.

00:22:04.880 --> 00:22:07.060
The last thing of the
goals that we needed was we

00:22:07.060 --> 00:22:10.640
need to support our existing
legacy applications that are

00:22:10.640 --> 00:22:13.440
within Flex within the portal.

00:22:13.440 --> 00:22:17.360
This was a big one, because
we have 35 application modules

00:22:17.360 --> 00:22:20.830
within the portal today that
we can't port simultaneously

00:22:20.830 --> 00:22:21.700
all at once.

00:22:21.700 --> 00:22:24.290
So we need to have a way
that we can load those Flex

00:22:24.290 --> 00:22:28.930
modules into our new Dart
portal Chrome portal framework.

00:22:28.930 --> 00:22:32.450
So what we've done is we've
used the Dart JS library,

00:22:32.450 --> 00:22:34.317
and built a JavaScript
bridge in between.

00:22:34.317 --> 00:22:36.650
And we're doing communication
between Flex and the Flash

00:22:36.650 --> 00:22:39.310
Player and to the Dart Chrome.

00:22:39.310 --> 00:22:41.860
So if you remember
on that first slide,

00:22:41.860 --> 00:22:44.769
we had the header at the top,
and we had all of our modules,

00:22:44.769 --> 00:22:45.560
now it's a mixture.

00:22:45.560 --> 00:22:48.900
So when a user logs into
the new portal Dart Chrome,

00:22:48.900 --> 00:22:50.540
you could have Dart
modules up there

00:22:50.540 --> 00:22:52.222
or you could have Flex modules.

00:22:52.222 --> 00:22:54.430
You don't know which is
which until you click on them

00:22:54.430 --> 00:22:56.984
and we know from just our
database as a user logged in

00:22:56.984 --> 00:22:58.900
and what they were
provisioned to whether it's

00:22:58.900 --> 00:23:00.840
a Dart module or a Flex module.

00:23:00.840 --> 00:23:03.230
And at that time, if
it's a Flex module,

00:23:03.230 --> 00:23:06.860
the stage loads just one
Flash Player, and that module

00:23:06.860 --> 00:23:07.740
comes into it.

00:23:07.740 --> 00:23:09.590
With the Dart module,
it swaps it out

00:23:09.590 --> 00:23:11.390
and the Dart module comes in.

00:23:11.390 --> 00:23:15.330
So now we have the communication
from our Dart portal

00:23:15.330 --> 00:23:19.050
through JavaScript to
our Flex applications.

00:23:19.050 --> 00:23:20.430
This was a big win for us.

00:23:20.430 --> 00:23:22.832
When we showed this
to our PM department,

00:23:22.832 --> 00:23:24.540
they were very happy
about it, because it

00:23:24.540 --> 00:23:28.977
made our timeline now coming
up to the third quarter

00:23:28.977 --> 00:23:31.060
this year that we can
actually accomplish building

00:23:31.060 --> 00:23:33.610
out our framework,
our portal framework,

00:23:33.610 --> 00:23:36.830
have new applications
coming in with Dart modules,

00:23:36.830 --> 00:23:40.460
but keep those legacy Flex
applications going forward.

00:23:40.460 --> 00:23:43.620
So now the timelines for other
applications being ported over

00:23:43.620 --> 00:23:46.110
fits within what PM wants
to see going forward.

00:23:46.110 --> 00:23:47.530
So that was a big win for us.

00:23:50.540 --> 00:23:52.720
So what are some of the
conclusions and what's next

00:23:52.720 --> 00:23:53.600
for us?

00:23:53.600 --> 00:23:56.820
Well, we saw the increase
productivity with Dart Editor,

00:23:56.820 --> 00:23:59.000
and going forward
now with Webstorm.

00:23:59.000 --> 00:24:01.650
We have the RPC-style
calls with Dart.

00:24:01.650 --> 00:24:05.280
We have application development
going on within Polymer right

00:24:05.280 --> 00:24:08.270
now and Angular with
the portal framework,

00:24:08.270 --> 00:24:10.330
and we have Dart and
Flex interoperability

00:24:10.330 --> 00:24:12.630
with the modules
loading into our portal.

00:24:12.630 --> 00:24:15.110
This is our new look and
feel within the portal.

00:24:15.110 --> 00:24:17.030
Example of what we
have today, and this

00:24:17.030 --> 00:24:20.250
is one of our Dart modules,
how it looks loading into it.

00:24:20.250 --> 00:24:26.180
So going forward now today, it
was users, what's been ported,

00:24:26.180 --> 00:24:28.770
it would be like assets
if it was a Flex module,

00:24:28.770 --> 00:24:30.980
it would load with
into this stage area

00:24:30.980 --> 00:24:33.550
and have that interoperability
between the two.

00:24:33.550 --> 00:24:34.810
The one thing that we're
still concentrating on

00:24:34.810 --> 00:24:37.476
on the Flex side is we've got to
change a little bit of the look

00:24:37.476 --> 00:24:38.990
and feel to match
what we have here

00:24:38.990 --> 00:24:42.200
so we don't see any clunkiness
for our users coming

00:24:42.200 --> 00:24:43.564
into the portal.

00:24:43.564 --> 00:24:45.980
We have multiple development
teams working on applications

00:24:45.980 --> 00:24:46.650
right now.

00:24:46.650 --> 00:24:48.481
A lot of them are
early adopters and also

00:24:48.481 --> 00:24:49.980
new applications
we're building out.

00:24:49.980 --> 00:24:51.400
We're not going to be
doing that within Flex,

00:24:51.400 --> 00:24:53.358
but we're doing that
within Dart, Angular Dart,

00:24:53.358 --> 00:24:54.340
and Polymer.

00:24:54.340 --> 00:24:56.130
And we're really
excited about 2.0.

00:24:56.130 --> 00:24:59.970
And 1.0, I put this on the slide
before I found out from Kevin

00:24:59.970 --> 00:25:01.800
that the news on that
was coming forward.

00:25:01.800 --> 00:25:04.536
So we're looking for
stability between those two,

00:25:04.536 --> 00:25:06.910
so we can take advantage of
some of the new functionality

00:25:06.910 --> 00:25:11.790
especially within the
routing within Angular 2.0.

00:25:11.790 --> 00:25:12.860
So thank you very much.

00:25:12.860 --> 00:25:14.990
I'm going to be here throughout
the rest of the summit.

00:25:14.990 --> 00:25:17.030
If anybody wants to talk
about our experience and some

00:25:17.030 --> 00:25:19.040
of the stuff we did, and I can
show a little bit more code

00:25:19.040 --> 00:25:20.640
than I showed on
the slides today.

00:25:20.640 --> 00:25:22.541
It's hard to condense
it within 30 minutes.

00:25:22.541 --> 00:25:24.040
And also, I'd love
to hear about any

00:25:24.040 --> 00:25:27.240
of your experiences you have
as well with using Angular Dart

00:25:27.240 --> 00:25:28.022
or Polymer.

00:25:28.022 --> 00:25:28.980
So thank you very much.

00:25:32.922 --> 00:25:34.880
MALE SPEAKER: Do you want
to do some questions?

00:25:34.880 --> 00:25:35.430
ERIC WOERNER: Sure.

00:25:35.430 --> 00:25:36.140
MALE SPEAKER: We have time.

00:25:36.140 --> 00:25:36.820
ERIC WOERNER: Yeah, let's do it.

00:25:36.820 --> 00:25:38.834
MALE SPEAKER: 5, 10
minutes actually.

00:25:38.834 --> 00:25:40.500
We were so afraid
that you guys wouldn't

00:25:40.500 --> 00:25:42.222
be able to fit
into the timeframe

00:25:42.222 --> 00:25:43.930
that we were like you
got to cut it down.

00:25:43.930 --> 00:25:45.570
ERIC WOERNER: You guys
coached us very well.

00:25:45.570 --> 00:25:46.470
MALE SPEAKER: Apparently,
we over-coached you,

00:25:46.470 --> 00:25:48.650
because everyone's
doing like 20 minutes.

00:25:48.650 --> 00:25:49.850
There's time for questions.

00:25:49.850 --> 00:25:50.380
Anyone?

00:25:50.380 --> 00:25:52.212
ERIC WOERNER: Fire away.

00:25:52.212 --> 00:25:54.420
MALE SPEAKER: As a bonus,
I will awkwardly run to you

00:25:54.420 --> 00:25:55.461
to hand you a microphone.

00:25:58.132 --> 00:25:59.590
AUDIENCE: Just
wanted to know I saw

00:25:59.590 --> 00:26:02.250
I think the same thing that
you saw with the Angular

00:26:02.250 --> 00:26:04.020
and Polymer times.

00:26:04.020 --> 00:26:06.182
And so what is it that
you said that you'd

00:26:06.182 --> 00:26:08.140
switched the [INAUDIBLE]
to the Polymers first?

00:26:08.140 --> 00:26:10.792
ERIC WOERNER: We first had,
we had the Polymer first.

00:26:10.792 --> 00:26:12.500
AUDIENCE: You started
with Angular first.

00:26:12.500 --> 00:26:12.572
ERIC WOERNER: Hold on.

00:26:12.572 --> 00:26:13.947
Let me check my
slide real quick.

00:26:13.947 --> 00:26:16.559
AUDIENCE: I've got Angular first
and I've got the slow times.

00:26:16.559 --> 00:26:18.600
ERIC WOERNER: It was
Polymer first, then Angular.

00:26:18.600 --> 00:26:20.720
Flip it.

00:26:20.720 --> 00:26:23.800
I saw it much increase time
going that way that it.

00:26:23.800 --> 00:26:24.810
AUDIENCE: And have you
tried it with Angular 2.0?

00:26:24.810 --> 00:26:25.870
ERIC WOERNER: In
my head, I don't

00:26:25.870 --> 00:26:28.021
know for sure, been looking
over the transformers,

00:26:28.021 --> 00:26:30.270
my thinking on it is whatever
happens with the Polymer

00:26:30.270 --> 00:26:31.770
and all of a sudden it gets
to the Angular transformer

00:26:31.770 --> 00:26:34.519
afterwards causes Angular
to go a little bit longer.

00:26:34.519 --> 00:26:35.060
AUDIENCE: OK.

00:26:35.060 --> 00:26:35.976
That was illuminating.

00:26:35.976 --> 00:26:36.640
Thanks.

00:26:36.640 --> 00:26:38.487
ERIC WOERNER: You bet.

00:26:38.487 --> 00:26:39.570
MALE SPEAKER: Anyone else?

00:26:43.400 --> 00:26:44.660
ERIC WOERNER: All right.

00:26:44.660 --> 00:26:45.820
MALE SPEAKER: Going, going.

00:26:49.080 --> 00:26:51.130
AUDIENCE: So I was curious,
Polymer and Angular

00:26:51.130 --> 00:26:53.670
both have an overlapping
feature set when it comes

00:26:53.670 --> 00:26:55.760
to binding and some UI stuff.

00:26:55.760 --> 00:26:57.950
I'm wondering what is it
that Angular is giving you

00:26:57.950 --> 00:27:00.100
that Polymer is not?

00:27:00.100 --> 00:27:01.520
ERIC WOERNER: I
look at Angular as

00:27:01.520 --> 00:27:03.800
with the dependency
injection, the routing that's

00:27:03.800 --> 00:27:05.900
involved in it as
the framework we

00:27:05.900 --> 00:27:08.290
want to use for building
out, for switching

00:27:08.290 --> 00:27:10.580
between our modules,
switching between our views,

00:27:10.580 --> 00:27:12.820
using the deferred loading,
bringing in the element

00:27:12.820 --> 00:27:15.020
tags, and the compile
time at that point.

00:27:15.020 --> 00:27:18.759
I look at Polymer as I want
to build a new data grid.

00:27:18.759 --> 00:27:20.300
I want to build a
UI component that I

00:27:20.300 --> 00:27:22.680
want to share with
other application teams

00:27:22.680 --> 00:27:23.430
within the portal.

00:27:23.430 --> 00:27:25.054
We'll build them all
out within Polymer

00:27:25.054 --> 00:27:28.070
and they can bring that
within an Angular Dart view

00:27:28.070 --> 00:27:30.487
or within another Polymer view.

00:27:30.487 --> 00:27:31.320
AUDIENCE: Thank you.

00:27:31.320 --> 00:27:32.236
ERIC WOERNER: You bet.

00:27:34.137 --> 00:27:35.220
MALE SPEAKER: Anyone else?

00:27:35.220 --> 00:27:38.115
Think we have time for one more.

00:27:38.115 --> 00:27:38.615
Yes?

00:27:38.615 --> 00:27:39.980
No?

00:27:39.980 --> 00:27:40.800
OK.

00:27:40.800 --> 00:27:41.510
Yes?

00:27:41.510 --> 00:27:42.715
AUDIENCE: I was curious.

00:27:42.715 --> 00:27:45.415
I can ask without
the microphone.

00:27:45.415 --> 00:27:46.790
If you weren't
going to use Dart,

00:27:46.790 --> 00:27:48.280
what else were you looking
at, because obviously

00:27:48.280 --> 00:27:50.660
the things moving forward,
but where else would you go?

00:27:50.660 --> 00:27:53.830
ERIC WOERNER: We looked
at TypeScript, CopyScript,

00:27:53.830 --> 00:27:56.710
and then it just
goes into all the JS

00:27:56.710 --> 00:27:58.387
libraries that are out there.

00:27:58.387 --> 00:27:59.970
For building something
like this where

00:27:59.970 --> 00:28:03.440
we have 12 distributed
teams, and it gave me

00:28:03.440 --> 00:28:06.170
nightmares to think that they
would be developing everything

00:28:06.170 --> 00:28:08.340
within JavaScript, and
bringing that all together.

00:28:11.610 --> 00:28:13.860
MALE SPEAKER 2: But with
Bob, you sleep well at night?

00:28:13.860 --> 00:28:15.193
ERIC WOERNER: Much, much better.

00:28:15.193 --> 00:28:15.810
Thank you.

00:28:15.810 --> 00:28:16.610
MALE SPEAKER 2: And
the whole Dart team.

00:28:16.610 --> 00:28:17.765
I didn't want to imply anything.

00:28:17.765 --> 00:28:19.140
ERIC WOERNER: No,
the whole Dart.

00:28:19.140 --> 00:28:22.130
It's been a
fantastic experience.

00:28:22.130 --> 00:28:25.170
We started, it was like two
years ago when we came back,

00:28:25.170 --> 00:28:29.130
and Larry Podmolik, our CTO,
put together a little training

00:28:29.130 --> 00:28:30.650
exercise for all the teams.

00:28:30.650 --> 00:28:33.830
And we had about 45 development
staff on the portal development

00:28:33.830 --> 00:28:36.450
team at that time, and it was
just a command line app calling

00:28:36.450 --> 00:28:38.790
out to a little WebSocket
bringing back information,

00:28:38.790 --> 00:28:41.214
and everybody got so
excited about using Dart,

00:28:41.214 --> 00:28:42.880
and then it's just
blossomed from there.

00:28:42.880 --> 00:28:43.942
So it's been fantastic.

00:28:43.942 --> 00:28:45.775
But we still have, every
once in awhile, you

00:28:45.775 --> 00:28:47.400
have those JavaScript
purists, and it's

00:28:47.400 --> 00:28:49.550
like, why don't use you
Bootstrap and Backbone,

00:28:49.550 --> 00:28:50.210
and build it from there?

00:28:50.210 --> 00:28:52.450
But it's like, do you
understand the portal framework

00:28:52.450 --> 00:28:53.366
we're trying to build?

00:28:53.366 --> 00:28:56.376
We can't build it with
just those two tools.

00:28:56.376 --> 00:28:57.750
MALE SPEAKER 2:
You convinced me.

00:28:57.750 --> 00:28:58.230
ERIC WOERNER: Thank you.

00:28:58.230 --> 00:28:58.720
MALE SPEAKER 2:
Thank you so much.

00:28:58.720 --> 00:28:59.200
ERIC WOERNER: You bet.

00:28:59.200 --> 00:28:59.800
MALE SPEAKER 2: Thanks, Eric.

00:28:59.800 --> 00:29:01.350
ERIC WOERNER: Thank you.

