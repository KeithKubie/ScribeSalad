WEBVTT
Kind: captions
Language: en

00:00:00.340 --> 00:00:03.560
In principle, a list ranking is a scan.

00:00:03.560 --> 00:00:06.939
The essential problem
is this data structure.

00:00:06.939 --> 00:00:09.060
It just has a single entry point,
which is the head.

00:00:09.060 --> 00:00:12.080
And the interface as we've
defined it leaves no

00:00:12.080 --> 00:00:16.340
option to get other elements of the list
without traversing them one by one.

00:00:16.340 --> 00:00:17.120
Now put another way,

00:00:17.120 --> 00:00:21.300
I could ask you the question what
made scans on arrays easier?

00:00:21.300 --> 00:00:24.080
Essentially, it was random access.

00:00:24.080 --> 00:00:27.250
So what you need to do is you need
to take this list representation and

00:00:27.250 --> 00:00:29.770
turn it on its head, so to speak.

00:00:30.770 --> 00:00:33.330
Let's imagine a different way
to represent a linked list

00:00:33.330 --> 00:00:35.310
based on what I'll call an array pool.

00:00:35.310 --> 00:00:38.750
And this representation
has two features.

00:00:38.750 --> 00:00:42.320
First, we'll find a way to
put the values in an array.

00:00:42.320 --> 00:00:45.650
And secondly, we'll replace
the concept of a pointer, or

00:00:45.650 --> 00:00:49.470
a next pointer,
with a next integer index.

00:00:49.470 --> 00:00:51.270
Let's see how this works.

00:00:51.270 --> 00:00:55.100
As an example, suppose I allocate
an array to hold the values.

00:00:55.100 --> 00:00:55.960
Let's call this array V.

00:00:57.240 --> 00:01:00.090
Now notice that our
input list has 12 nodes,

00:01:00.090 --> 00:01:03.880
even though the array has 14 spaces.

00:01:03.880 --> 00:01:07.470
So in general we'll let our array pool
representation be at least the size of

00:01:07.470 --> 00:01:09.100
our input list.

00:01:09.100 --> 00:01:12.000
Now below each node in the input list,
I've written an integer.

00:01:13.820 --> 00:01:19.100
Each integer will be the position of
the corresponding value in the V array.

00:01:19.100 --> 00:01:24.520
For example, a node with value zero
resides in position 13 of the V array.

00:01:25.530 --> 00:01:27.400
So let's put it there.

00:01:27.400 --> 00:01:31.660
As another example, let's take
the first node whose value is 1.

00:01:31.660 --> 00:01:34.730
Its position is 12 so
let's put it there.

00:01:34.730 --> 00:01:36.555
What about the second
node whose value is 1?

00:01:37.670 --> 00:01:40.800
Well that's in position 10,
so we put it there.

00:01:40.800 --> 00:01:44.740
You could of course go on and
on and maybe you should.

00:01:44.740 --> 00:01:46.850
Mm, smells quizzy.

00:01:46.850 --> 00:01:49.740
So that's our story for values,
but what about the next pointers?

00:01:50.750 --> 00:01:53.970
For that, let's allocate another array,
call it capital N.

00:01:54.980 --> 00:01:58.430
Now I've made the length the same
between N and V, so that for

00:01:58.430 --> 00:02:01.440
every value,
there's a corresponding next pointer.

00:02:01.440 --> 00:02:04.310
Now although I'm calling these pointers
what I'll put there is not a memory

00:02:04.310 --> 00:02:08.008
address but
rather the index of the node.

00:02:08.008 --> 00:02:10.060
For example look at this node.

00:02:10.060 --> 00:02:13.330
It points to the node
whose position is 9.

00:02:13.330 --> 00:02:15.895
So it's next pointer should also be 9.

00:02:17.240 --> 00:02:22.230
For the two nodes whose value is 1
the successors are at positions 5 and

00:02:22.230 --> 00:02:25.440
8, so we should put those
in capital N as well.

00:02:25.440 --> 00:02:28.150
This array pool
representation is critical

00:02:28.150 --> 00:02:32.370
because it give us a way to have
multiple entry points into the list.

00:02:32.370 --> 00:02:35.670
To do a list ranking you still
have to walk the list somehow.

00:02:35.670 --> 00:02:39.307
But at least we'll be able to do things
like data parallel operations because we

00:02:39.307 --> 00:02:41.220
basically stored everything as arrays.

