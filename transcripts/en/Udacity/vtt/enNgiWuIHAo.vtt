WEBVTT
Kind: captions
Language: en

00:00:00.240 --> 00:00:02.200
What are some of the properties of simulated amealing? No we

00:00:02.200 --> 00:00:04.900
already talked about two of them: this idea that as the temperature

00:00:04.900 --> 00:00:07.130
goes to zero, it acts, it's acting more and more like

00:00:07.130 --> 00:00:11.200
hill climbing, only taking steps that improve the fitness. And as T

00:00:11.200 --> 00:00:15.360
goes to infinity, it's like a random walk around the neighborhood.

00:00:15.360 --> 00:00:18.530
So you, wherever point where it is, it's willing to go to

00:00:18.530 --> 00:00:20.660
any of the other points in the neighborhood and it just

00:00:20.660 --> 00:00:24.650
doesn't, it doesn't really pay any attention to the fitness function anymore.

00:00:24.650 --> 00:00:25.720
&gt;&gt; So huh,

00:00:25.720 --> 00:00:28.210
so that makes sense right if I wanted to, to go

00:00:28.210 --> 00:00:31.170
with the analogy. High temperatures like a lot of heat, which

00:00:31.170 --> 00:00:33.850
is a lot of energy and so molecules bounce around a

00:00:33.850 --> 00:00:36.900
lot. That kind of has the effect of flattening out the fitness

00:00:36.900 --> 00:00:40.745
function. T goes to zero, that's no energy. It's like you've

00:00:40.745 --> 00:00:45.020
frozen; molecules can't move and so you only move to places with

00:00:45.020 --> 00:00:47.900
lower energy or in this case, higher fitness. So that all

00:00:47.900 --> 00:00:50.980
makes sense. So how do I get from one to the other?

00:00:50.980 --> 00:00:51.776
You see you had any

00:00:51.776 --> 00:00:54.500
&gt;&gt; You had in the algorithm decrease t, but do we need

00:00:54.500 --> 00:00:58.880
to decrease t quickly, slowly, what's the right way to do it?

00:00:58.880 --> 00:01:01.950
&gt;&gt; So in practice, we wanted to decrease the temperature slowly, because

00:01:01.950 --> 00:01:04.560
it gives it, the system a kind of a chance to explore at

00:01:04.560 --> 00:01:07.320
the current temperature before we start to cool it out. So, well,

00:01:07.320 --> 00:01:10.310
one way to think about it is, if you think, if you consider

00:01:12.710 --> 00:01:14.970
some kind of function that we're trying to optimize,

00:01:14.970 --> 00:01:17.280
when the temperature is high, it kind of doesn't

00:01:17.280 --> 00:01:20.550
notice big valleys. It's, it's willing to kind of

00:01:20.550 --> 00:01:24.280
wander through big valleys. As the temperature gets cooler, the

00:01:24.280 --> 00:01:26.640
valleys become boundaries and it starts to break things

00:01:26.640 --> 00:01:31.560
up into different basins of attraction, but smaller gullies

00:01:31.560 --> 00:01:33.724
it still is able to walk, walk over. As

00:01:33.724 --> 00:01:37.910
the temperature gets even lower, those become barriers as well.

00:01:37.910 --> 00:01:39.160
And so what we really want to do is give

00:01:39.160 --> 00:01:41.115
it a chance to kind of wander to where the,

00:01:41.115 --> 00:01:44.710
the high value points are before cooling it so much

00:01:44.710 --> 00:01:48.090
that it can't now bridge the gulf between different local optimums.

00:01:48.090 --> 00:01:50.680
&gt;&gt; Ok, that makes sense. So, property

00:01:50.680 --> 00:01:52.780
as it's sort of bouncing between exploration and

00:01:52.780 --> 00:01:56.590
exploitation. I buy that. So where do you end up? Where do you end up?

00:01:56.590 --> 00:01:59.075
&gt;&gt; Well, if we're lucky, we end up at the global optimum; yay.

00:01:59.075 --> 00:02:03.500
&gt;&gt; [LAUGH] Is there anything, you know, we could say

00:02:03.500 --> 00:02:06.210
that we could characterize how often we end up there, or are we

00:02:06.210 --> 00:02:07.600
going to have to do randomized restarts

00:02:07.600 --> 00:02:09.788
and do simulated annealing a million times?

00:02:09.788 --> 00:02:12.850
&gt;&gt; So, we're not going to be able to go through the argument for exactly

00:02:12.850 --> 00:02:14.500
why this is true, but there is a

00:02:14.500 --> 00:02:17.670
remarkable fact about simulated annealing that is worth

00:02:17.670 --> 00:02:23.780
mentioning. That the probability end at any, any given point x in the space is

00:02:23.780 --> 00:02:26.420
actually e to the fitness of x divided

00:02:26.420 --> 00:02:28.530
by the temperature and then normalized, because this

00:02:28.530 --> 00:02:31.680
is a probability distribution over the input space. So this is,

00:02:31.680 --> 00:02:34.420
this is pretty remarkable right? So this is saying that it's most

00:02:34.420 --> 00:02:37.590
likely to be in the places that have high fitness, right?

00:02:37.590 --> 00:02:39.880
because that's those are where it's going to have the highest probability of

00:02:39.880 --> 00:02:42.700
being. And you can see now what the relationship with the

00:02:42.700 --> 00:02:46.570
temperature is here too, that as we bring the temperature down, this

00:02:46.570 --> 00:02:49.125
is going to act more like a max. It's going to put

00:02:49.125 --> 00:02:53.545
all the probability mass on the actual x star, the, the, the

00:02:53.545 --> 00:02:57.780
optimum. And as the temperature is, is higher, it's going to smooth

00:02:57.780 --> 00:03:00.340
things out and it'll, you know, be randomly all over the place.

00:03:00.340 --> 00:03:00.925
&gt;&gt; Hm.

00:03:00.925 --> 00:03:03.180
&gt;&gt; So, so that's why it's really important

00:03:03.180 --> 00:03:05.570
that we eventually get down to a very low

00:03:05.570 --> 00:03:07.490
temperature. But if we, again, if we get there

00:03:07.490 --> 00:03:09.710
too quickly, then it can, it can be stuck.

00:03:09.710 --> 00:03:10.375
&gt;&gt; Hm.

00:03:10.375 --> 00:03:14.580
&gt;&gt; Right, because it's spending again, time proportional to the fitness.

00:03:14.580 --> 00:03:18.900
So, it is spending time ending up at points that are not

00:03:18.900 --> 00:03:22.410
the optimum, if they're say, close to the optimum.

00:03:22.410 --> 00:03:25.655
&gt;&gt; Okay, so you know, I actually now that you, you spell that out,

00:03:25.655 --> 00:03:28.074
I actually recognize this distribution, it has

00:03:28.074 --> 00:03:31.310
a name it's called the Boltzmann distribution.

00:03:31.310 --> 00:03:33.500
&gt;&gt; That's exactly right, and if there's people listening that

00:03:33.500 --> 00:03:38.240
have a physics background, they're going to probably be poking

00:03:38.240 --> 00:03:41.210
their eyes out because, huh, it's the case that we,

00:03:41.210 --> 00:03:44.100
we're using a number of physics concepts, but we don't quite

00:03:44.100 --> 00:03:47.410
use the same notation and we don't quite do things exactly the

00:03:47.410 --> 00:03:49.530
way that a physicist would. So,

00:03:49.530 --> 00:03:51.660
there's definitely a relationship and the Boltzmann

00:03:51.660 --> 00:03:55.140
distribution is used quite a bit in, in the physics community, but

00:03:55.140 --> 00:03:58.720
it may not be exactly like that so don't, try not to panic.

00:03:58.720 --> 00:04:02.020
&gt;&gt; Yeah, it's more like an analogy, like

00:04:02.020 --> 00:04:04.470
so much of life. It's a simulated Boltzmann Distribution.

00:04:04.470 --> 00:04:06.780
&gt;&gt; It's like a simile.

00:04:06.780 --> 00:04:10.081
&gt;&gt; [LAUGH]

