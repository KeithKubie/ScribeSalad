WEBVTT
Kind: captions
Language: en

00:00:02.900 --> 00:00:05.820
MUZ MOSTOFI: Hi, everyone.

00:00:05.820 --> 00:00:07.490
Thank you.

00:00:07.490 --> 00:00:08.397
Thanks for coming.

00:00:08.397 --> 00:00:09.980
DAN AMINZADE: My
name is Dan Aminzade.

00:00:09.980 --> 00:00:11.750
I'm a software
engineer at Google,

00:00:11.750 --> 00:00:13.550
and I'm also a
dedicated triathlete.

00:00:13.550 --> 00:00:17.420
So on a good week I'll run 50
miles, I'll bike 100 miles,

00:00:17.420 --> 00:00:20.170
and I'll maybe write
3,000 lines of code.

00:00:20.170 --> 00:00:23.080
So maybe it's no surprise
that I work on the Google Fit

00:00:23.080 --> 00:00:24.900
app for Android
Wear, which makes

00:00:24.900 --> 00:00:27.070
really extensive use of
the Google Fit platform

00:00:27.070 --> 00:00:30.267
APIs that we're going to be
highlighting for you today.

00:00:30.267 --> 00:00:31.350
MUZ MOSTOFI: Hi, everyone.

00:00:31.350 --> 00:00:32.960
I'm Muz Mostofi.

00:00:32.960 --> 00:00:35.355
I'm product manager on
the Google Fit platform.

00:00:35.355 --> 00:00:38.690
And I'm a keen,
quantified surfer.

00:00:38.690 --> 00:00:41.070
I enjoy weightlifting,
running, yoga,

00:00:41.070 --> 00:00:43.854
and occasionally experimenting
with different diets.

00:00:43.854 --> 00:00:45.520
Today we're going to
talk about building

00:00:45.520 --> 00:00:50.250
rich experiences with the Google
Fit platform and Android Wear.

00:00:50.250 --> 00:00:52.850
I'll start out by
talking about why

00:00:52.850 --> 00:00:55.680
we created the Fit platform,
what problems we set up

00:00:55.680 --> 00:00:58.710
to solve, and then Dan will
go over its APIs and its data

00:00:58.710 --> 00:01:00.300
types.

00:01:00.300 --> 00:01:03.200
Next, we'll look at some
specific examples of what

00:01:03.200 --> 00:01:05.120
you can build with
a Fit platform,

00:01:05.120 --> 00:01:07.360
first basic fitness
tracking, and then

00:01:07.360 --> 00:01:11.190
a more advanced real
time fitness use case.

00:01:11.190 --> 00:01:13.910
Finally, we'll finish up with
some really cool demos coming

00:01:13.910 --> 00:01:16.030
soon.

00:01:16.030 --> 00:01:17.010
Give me the clicker.

00:01:17.010 --> 00:01:19.460
Sorry.

00:01:19.460 --> 00:01:22.070
Let's start out by
introducing the Fit platform.

00:01:22.070 --> 00:01:25.420
We'll explain why we created
Fit, what problems we set out

00:01:25.420 --> 00:01:27.770
to solve, and why we believe
fitness is such a great use

00:01:27.770 --> 00:01:28.655
case for wearables.

00:01:31.560 --> 00:01:34.420
Before the Google Fit
platform existed life

00:01:34.420 --> 00:01:37.772
for a fitness application
developer was not easy.

00:01:37.772 --> 00:01:40.470
It was integration Hell.

00:01:40.470 --> 00:01:43.510
The first issue was
that of silo data.

00:01:43.510 --> 00:01:45.700
Users health and fitness
related sensor data

00:01:45.700 --> 00:01:50.100
was siloed across multiple
apps and companion devices.

00:01:50.100 --> 00:01:55.220
Second, there was no easy access
and storage of sensor data.

00:01:55.220 --> 00:01:59.080
No easy way for developers to
read, interpret, and record

00:01:59.080 --> 00:02:01.670
data from health and fitness
related devices, sensors,

00:02:01.670 --> 00:02:04.800
and connected companion devices
such as Android devices.

00:02:04.800 --> 00:02:07.750
The third problem was
poor interoperability.

00:02:07.750 --> 00:02:10.800
There was no simple, standard
way for fitness devices

00:02:10.800 --> 00:02:12.330
to interoperate.

00:02:12.330 --> 00:02:14.670
So in order to integrate
with the existing app device

00:02:14.670 --> 00:02:16.800
ecosystem app
developers would have

00:02:16.800 --> 00:02:19.500
to build their own platform
and provide an API.

00:02:19.500 --> 00:02:22.020
Some of these would
be poorly implemented,

00:02:22.020 --> 00:02:25.300
leading to user frustration.

00:02:25.300 --> 00:02:28.590
With the Google Fit platform
we solved that problem

00:02:28.590 --> 00:02:31.180
by giving apps one
single set of APIs

00:02:31.180 --> 00:02:35.040
to access, record, and
store phone sensor data,

00:02:35.040 --> 00:02:39.000
wearable data, and
other app data.

00:02:39.000 --> 00:02:42.170
So by using my phone or my
wear device as my fitness hub

00:02:42.170 --> 00:02:43.960
I can connect my
fitness wearable

00:02:43.960 --> 00:02:47.160
to my favorite nutrition,
and my sleep tracking app

00:02:47.160 --> 00:02:49.880
to my favorite meditation app.

00:02:49.880 --> 00:02:52.490
We don't just
consolidate data, though.

00:02:52.490 --> 00:02:56.270
With user consent we provide
low level sensor recording,

00:02:56.270 --> 00:02:59.110
and we perform hard
computations for things

00:02:59.110 --> 00:03:01.260
like distance and calories.

00:03:01.260 --> 00:03:05.200
Whether it's resting heart rate
from heart rate time stamps,

00:03:05.200 --> 00:03:08.340
distances fused from your
height, steps, and GPS,

00:03:08.340 --> 00:03:11.232
or calories from heart
rate, the Fit platform

00:03:11.232 --> 00:03:13.815
makes it easier for health and
fitness application developers.

00:03:16.470 --> 00:03:20.020
And fitness and wearables
truly go hand in hand.

00:03:20.020 --> 00:03:21.530
This is for a few reasons.

00:03:21.530 --> 00:03:23.780
First, the sensors.

00:03:23.780 --> 00:03:26.630
Your app can get access to
all these ways of measuring

00:03:26.630 --> 00:03:28.340
fitness activities.

00:03:28.340 --> 00:03:31.900
Many watches have a GPS
sensor, a heart rate monitor,

00:03:31.900 --> 00:03:33.770
and potentially
even a barometer.

00:03:33.770 --> 00:03:36.370
And because the watch
is worn on the wrist

00:03:36.370 --> 00:03:37.950
it allows us to
detect activities

00:03:37.950 --> 00:03:41.500
that we couldn't do with a phone
being in a pocket or a purse.

00:03:41.500 --> 00:03:44.140
So that's the first
reason, sensors.

00:03:44.140 --> 00:03:47.030
Second, you can leave the phone.

00:03:47.030 --> 00:03:49.640
I love my Nexus 6P, but
running with a device

00:03:49.640 --> 00:03:50.930
is a bit cumbersome.

00:03:50.930 --> 00:03:54.380
I have to rely on infrequent
audio queue's to find out

00:03:54.380 --> 00:03:57.380
my current pace, because I
can't see the screen when it's

00:03:57.380 --> 00:04:00.370
in an armband or in my pocket.

00:04:00.370 --> 00:04:02.562
Third, faster input.

00:04:02.562 --> 00:04:04.770
When you're on the go you
can have quick interactions

00:04:04.770 --> 00:04:07.945
with a watch to control music
or activity recording that

00:04:07.945 --> 00:04:09.320
would take much
longer if you had

00:04:09.320 --> 00:04:11.000
to rely on pulling
out your phone

00:04:11.000 --> 00:04:13.800
and opening up the right app.

00:04:13.800 --> 00:04:18.050
Now let's talk about what the
Google Fit platform provides

00:04:18.050 --> 00:04:20.853
that enables you to build
rich experiences in line

00:04:20.853 --> 00:04:22.019
with what we just discussed.

00:04:24.660 --> 00:04:27.090
First, let's talk about
the Google Fit app.

00:04:27.090 --> 00:04:29.480
So here we have the Google
Fit app on both phone

00:04:29.480 --> 00:04:31.520
and on Android Wear.

00:04:31.520 --> 00:04:33.630
If you're not
familiar with the app

00:04:33.630 --> 00:04:37.440
you can see that it tracks
walking, running, and biking

00:04:37.440 --> 00:04:41.190
using the Google
platform's API that

00:04:41.190 --> 00:04:47.350
detect activity, associated
steps, calories, and distances.

00:04:47.350 --> 00:04:49.690
The app also shows
data from connected

00:04:49.690 --> 00:04:52.980
to third party devices
and apps, such as exercise

00:04:52.980 --> 00:04:56.516
sessions, weight, heart rate,
nutrition data, and sleep.

00:05:00.420 --> 00:05:02.800
Our platform
automatically synchronizes

00:05:02.800 --> 00:05:06.460
between your Android phone,
your Android Wear device,

00:05:06.460 --> 00:05:07.590
and the web.

00:05:07.590 --> 00:05:10.300
The Fit platform exists
in all three of these.

00:05:10.300 --> 00:05:13.640
So you can write in data via
our rest APIs on the web,

00:05:13.640 --> 00:05:16.300
via our Android
SDKs on the phone,

00:05:16.300 --> 00:05:18.340
or the Android SDK on wear.

00:05:18.340 --> 00:05:21.910
The platform handles merging and
digi application of this data

00:05:21.910 --> 00:05:25.486
intelligently, and we even
support take-out integration

00:05:25.486 --> 00:05:27.110
if the user wants to
export their data.

00:05:30.157 --> 00:05:31.240
DAN AMINZADE: Thanks, Muz.

00:05:31.240 --> 00:05:33.531
So now that you've gotten an
overview of the Google Fit

00:05:33.531 --> 00:05:35.260
platform, and maybe
some motivation

00:05:35.260 --> 00:05:37.427
for why it might be a good
fit for your fitness app,

00:05:37.427 --> 00:05:39.926
let me go into a little more
detail about the different APIs

00:05:39.926 --> 00:05:40.640
that it provides.

00:05:40.640 --> 00:05:43.180
So basically it breaks
down into four APIs.

00:05:43.180 --> 00:05:45.520
First, there's the
SensorsApi, which gives you

00:05:45.520 --> 00:05:47.502
access to raw
sensory data streams

00:05:47.502 --> 00:05:49.210
from Android devices
and wearable devices

00:05:49.210 --> 00:05:50.731
sensors, so things
like heart rate.

00:05:50.731 --> 00:05:51.980
Then there's the RecordingApi.

00:05:51.980 --> 00:05:55.180
The RecordingApi does automated
storage of fitness data

00:05:55.180 --> 00:05:56.510
for you using subscriptions.

00:05:56.510 --> 00:05:58.660
You can subscribe to a
data type and Google Fit

00:05:58.660 --> 00:06:01.400
will store fitness data for that
data type in the background,

00:06:01.400 --> 00:06:03.910
and it'll persist to the
subscription for you.

00:06:03.910 --> 00:06:05.980
Next there's the
HistoryApi, which

00:06:05.980 --> 00:06:07.830
gives you access to
the fitness history

00:06:07.830 --> 00:06:10.100
and lets you perform bulk
operations like reading,

00:06:10.100 --> 00:06:12.640
and inserting, and deleting
data from the finished history.

00:06:12.640 --> 00:06:14.720
And then finally
there's the SessionsApi.

00:06:14.720 --> 00:06:16.670
Sessions are basically
a metadata layer

00:06:16.670 --> 00:06:20.230
on top of raw fitness data that
let you store whole fitness

00:06:20.230 --> 00:06:21.160
activities.

00:06:21.160 --> 00:06:23.040
So a session is a time
interval during which

00:06:23.040 --> 00:06:25.360
the user was doing say
a bike ride, or a run,

00:06:25.360 --> 00:06:28.120
or weightlifting session.

00:06:28.120 --> 00:06:30.180
As far as what you can
record we support really

00:06:30.180 --> 00:06:33.440
all the standard data types
for diet, and nutrition, body,

00:06:33.440 --> 00:06:35.260
activity, sleep.

00:06:35.260 --> 00:06:37.860
We're also adding this
new hydration data type.

00:06:37.860 --> 00:06:40.450
I think this is a pretty
exhaustive list of fitness

00:06:40.450 --> 00:06:41.874
metrics, but if
there's one that's

00:06:41.874 --> 00:06:43.790
not in here that you'd
like to log in your app

00:06:43.790 --> 00:06:46.580
you should let us know.

00:06:46.580 --> 00:06:50.130
So let's start by talking just
about basic fitness tracking.

00:06:50.130 --> 00:06:52.755
You can't measure what you don't
track so tracking measuring is

00:06:52.755 --> 00:06:55.088
really, I think, the first
step toward motivating people

00:06:55.088 --> 00:06:56.105
towards better fitness.

00:06:56.105 --> 00:06:57.980
I actually first started
tracking my workouts

00:06:57.980 --> 00:07:00.249
10 years ago, back
in 2006, when I was

00:07:00.249 --> 00:07:01.540
training for my first marathon.

00:07:01.540 --> 00:07:03.980
And I bought my very
first wrist mounted GPS.

00:07:03.980 --> 00:07:06.810
And it was this massive,
ugly, uncomfortable thing,

00:07:06.810 --> 00:07:08.732
like the size of a
chinchilla on my wrist.

00:07:08.732 --> 00:07:09.940
But it did the job, you know?

00:07:09.940 --> 00:07:12.760
I could plug it into
the serial port on my PC

00:07:12.760 --> 00:07:15.260
and I could download
XML data of my run.

00:07:15.260 --> 00:07:19.290
And back then there weren't
any nice portals or fitness

00:07:19.290 --> 00:07:20.940
platforms so to
visualize my runs

00:07:20.940 --> 00:07:24.140
I built this website
with Google Maps API 1.0.

00:07:24.140 --> 00:07:26.020
And I could put
my runs up there.

00:07:26.020 --> 00:07:27.970
And there's something
really thrilling

00:07:27.970 --> 00:07:30.580
for a data geek like me to
come back from a workout

00:07:30.580 --> 00:07:33.030
and analyze all my stats
on pace, and heart rate,

00:07:33.030 --> 00:07:33.760
and elevation.

00:07:33.760 --> 00:07:35.690
And I could really track my
progress from week to week,

00:07:35.690 --> 00:07:36.648
and workout to workout.

00:07:40.740 --> 00:07:43.620
So these days obviously
there are much more elegant

00:07:43.620 --> 00:07:45.129
and full featured
alternatives where

00:07:45.129 --> 00:07:47.420
I can analyze my workouts,
and share them with friends,

00:07:47.420 --> 00:07:50.032
and track my progress
toward fitness goals.

00:07:50.032 --> 00:07:52.240
And also I don't have to
wear a big, giant ugly thing

00:07:52.240 --> 00:07:52.820
on my wrist.

00:07:52.820 --> 00:07:56.910
I can wear these
beautiful time pieces

00:07:56.910 --> 00:07:59.270
from TAG Heuer or Michael
Kors, and I can still

00:07:59.270 --> 00:08:01.970
track and visualize my
progress right on my wrist

00:08:01.970 --> 00:08:04.220
throughout the day
with the watch face.

00:08:04.220 --> 00:08:13.330
Now this is actually my favorite
watch face here, the Fit Cat.

00:08:13.330 --> 00:08:13.830
Yeah.

00:08:13.830 --> 00:08:15.197
Big ups for Fit Cat.

00:08:15.197 --> 00:08:17.030
It tries to encourage
you to be more active.

00:08:17.030 --> 00:08:18.280
So, basically, if you
haven't seen this before,

00:08:18.280 --> 00:08:20.170
the more active that you
are, the more steps you take,

00:08:20.170 --> 00:08:21.720
the more active the
cute, little cat becomes.

00:08:21.720 --> 00:08:23.344
I love how he's
wearing the I/O badge

00:08:23.344 --> 00:08:25.760
and he has the backpack there,
and wearing an Android Wear

00:08:25.760 --> 00:08:27.330
watch, also.

00:08:27.330 --> 00:08:29.470
So this seems like a
simple concept, right?

00:08:29.470 --> 00:08:31.845
The more steps you take, the
more active the cat becomes.

00:08:31.845 --> 00:08:34.344
But actually trying to build
something like this on your own

00:08:34.344 --> 00:08:35.070
is not easy.

00:08:35.070 --> 00:08:36.230
There's a lot of stuff
you have to do if you

00:08:36.230 --> 00:08:37.313
want to do it on your own.

00:08:37.313 --> 00:08:39.460
You have to build a data
store that tracks steps.

00:08:39.460 --> 00:08:41.335
You'd have to turn on
sensors, get permission

00:08:41.335 --> 00:08:42.549
from the user to do that.

00:08:42.549 --> 00:08:44.049
Then you'd have to
be able to record

00:08:44.049 --> 00:08:47.580
step counts in a way that
won't kill the watch battery.

00:08:47.580 --> 00:08:50.100
If you get that part working
then when the user first

00:08:50.100 --> 00:08:53.076
installs your watch face you
won't-- it will show zero

00:08:53.076 --> 00:08:55.030
because you haven't
been recording yet.

00:08:55.030 --> 00:08:57.222
And then there's all
these edge cases,

00:08:57.222 --> 00:08:58.680
like the user takes
off their watch

00:08:58.680 --> 00:09:01.096
and goes for a walk with just
their phone in their pocket,

00:09:01.096 --> 00:09:03.635
then you have to write the
logic for merging in that data.

00:09:03.635 --> 00:09:05.510
And then even if you
solve all these problems

00:09:05.510 --> 00:09:06.760
your step counts
still is probably not

00:09:06.760 --> 00:09:08.634
going to be consistent
with other watch faces

00:09:08.634 --> 00:09:09.750
in other apps.

00:09:09.750 --> 00:09:12.720
So, fortunately, we solved
all of these problems for you

00:09:12.720 --> 00:09:14.350
with the Google Fit platform.

00:09:14.350 --> 00:09:17.180
We store steps in the background
in a nice, low powered battery

00:09:17.180 --> 00:09:19.787
friendly way, and they're ready
to be read anytime you like.

00:09:19.787 --> 00:09:21.370
And you can get
consistent step counts

00:09:21.370 --> 00:09:23.780
on Android Wear with
just one method call.

00:09:23.780 --> 00:09:26.240
So let me just show
you how to do that.

00:09:26.240 --> 00:09:28.590
Typically when you want to
connect to the Google Fit

00:09:28.590 --> 00:09:32.090
platform you create a
Google API client, right?

00:09:32.090 --> 00:09:34.260
And normally you create
an authenticated one

00:09:34.260 --> 00:09:37.800
where you specify the account
that you want to read data for.

00:09:37.800 --> 00:09:39.380
So here's how I
build the client.

00:09:39.380 --> 00:09:42.280
I say that I'm interested in
reading fitness history data

00:09:42.280 --> 00:09:44.190
so I add the
fitness history API.

00:09:44.190 --> 00:09:47.340
I add scopes for the particular
types of data I want to read.

00:09:47.340 --> 00:09:50.480
So in this case activity type,
location, and body sensor data,

00:09:50.480 --> 00:09:51.590
like heart rate.

00:09:51.590 --> 00:09:53.374
And then next I add an account.

00:09:53.374 --> 00:09:55.540
So this is the account I
want to read the data from.

00:09:55.540 --> 00:09:57.080
And then finally I
add my callbacks.

00:09:57.080 --> 00:09:58.746
And now I have this
authenticated client

00:09:58.746 --> 00:10:02.550
that I can use to make queries
to the fitness platform.

00:10:02.550 --> 00:10:05.040
But wait, you're saying,
Android Wear watches

00:10:05.040 --> 00:10:06.460
don't have accounts.

00:10:06.460 --> 00:10:07.875
And this is true.

00:10:07.875 --> 00:10:10.720
Android Wear 2.0 will
actually add account support,

00:10:10.720 --> 00:10:12.790
but for now we don't
have accounts on watches.

00:10:12.790 --> 00:10:14.330
Fortunately, there
is a solution.

00:10:14.330 --> 00:10:17.450
Now you could sync account
information from the phone,

00:10:17.450 --> 00:10:18.930
but this would
require a watch face

00:10:18.930 --> 00:10:20.917
to have a companion
phone app, which

00:10:20.917 --> 00:10:22.000
is a lot more complicated.

00:10:22.000 --> 00:10:24.360
So here's an easier way to
do it without a phone app.

00:10:24.360 --> 00:10:25.880
You can create a
no account client.

00:10:25.880 --> 00:10:27.610
So you create a
Google API client.

00:10:27.610 --> 00:10:30.132
As before, we're going
to add the History API.

00:10:30.132 --> 00:10:31.840
And now we just call
set default account.

00:10:31.840 --> 00:10:33.679
We don't specify an account.

00:10:33.679 --> 00:10:35.720
Finish building it, and
now we have a new account

00:10:35.720 --> 00:10:37.900
client that we can still
use to query step counts.

00:10:37.900 --> 00:10:41.470
And the way you do that is with
the read daily totals method.

00:10:41.470 --> 00:10:43.605
So you're going to
call the History

00:10:43.605 --> 00:10:46.500
APIs read daily total method.

00:10:46.500 --> 00:10:49.220
And this is basically going
to give you a simple way

00:10:49.220 --> 00:10:51.010
to get step counts
for watch face that's

00:10:51.010 --> 00:10:53.260
going to be consistent with
other apps and other watch

00:10:53.260 --> 00:10:54.320
faces.

00:10:54.320 --> 00:10:56.570
You can set a callback so
that when the result returns

00:10:56.570 --> 00:10:57.361
you can process it.

00:10:57.361 --> 00:11:00.580
So here in the on result I'm
basically just extracting out

00:11:00.580 --> 00:11:03.802
the step count, putting it
into a steps total variable,

00:11:03.802 --> 00:11:04.510
and there you go.

00:11:04.510 --> 00:11:06.134
It's a pretty simple
way to track steps

00:11:06.134 --> 00:11:08.730
with your watch face.

00:11:08.730 --> 00:11:12.470
And it's not just steps that
you can get from the Google Fit

00:11:12.470 --> 00:11:12.970
platform.

00:11:12.970 --> 00:11:14.740
You can also read
and write other data,

00:11:14.740 --> 00:11:16.360
like calories consumed.

00:11:16.360 --> 00:11:19.700
So here's an example of how the
Lifesum app displays that data.

00:11:19.700 --> 00:11:21.860
Here I'm looking at
the amount of calories

00:11:21.860 --> 00:11:24.410
I have left in my
budget for the day, 911.

00:11:24.410 --> 00:11:26.970
So I guess I could
eat like two avocados

00:11:26.970 --> 00:11:30.349
and drink two glasses
of wine tonight.

00:11:30.349 --> 00:11:32.140
Android Wear 2.0 is
going to have a new way

00:11:32.140 --> 00:11:35.240
to show data on watch
faces using complications.

00:11:35.240 --> 00:11:38.481
Maybe you've seen some of
this earlier in the keynote.

00:11:38.481 --> 00:11:39.980
But, basically, on
the right there's

00:11:39.980 --> 00:11:41.984
a watch face that has
three complications.

00:11:41.984 --> 00:11:43.400
And the watch face
lets you select

00:11:43.400 --> 00:11:45.510
which complications you
want, and then any app

00:11:45.510 --> 00:11:47.480
can provide data for
those complications.

00:11:47.480 --> 00:11:50.480
So here's an example where
Lifesum is exporting data

00:11:50.480 --> 00:11:52.472
on calories burned
as a complication

00:11:52.472 --> 00:11:54.180
so that the ranger
watch-- it's switch is

00:11:54.180 --> 00:11:56.513
on the right-- can display
it in one of those three user

00:11:56.513 --> 00:11:57.305
configurable slots.

00:11:57.305 --> 00:11:59.721
And if you want more information
on building complications

00:11:59.721 --> 00:12:02.270
in Android Wear 2.0 highly
recommend you check out

00:12:02.270 --> 00:12:04.678
the talk-- there's a dedicated
talk at 4pm on this topic.

00:12:07.550 --> 00:12:10.870
MUZ MOSTOFI: Another challenge
that fitness developers

00:12:10.870 --> 00:12:14.160
face is how to perform
difficult computations.

00:12:14.160 --> 00:12:16.410
For example, to derive
distance traveled

00:12:16.410 --> 00:12:19.860
from multiple sensory
inputs the user's height,

00:12:19.860 --> 00:12:24.970
stride length, GPS data,
activity type, active time,

00:12:24.970 --> 00:12:28.680
and step counts all have to be
fused in together, potentially

00:12:28.680 --> 00:12:30.860
across multiple sensory inputs.

00:12:30.860 --> 00:12:34.300
The Fit platform makes this
easy for third party developers

00:12:34.300 --> 00:12:36.320
through its advanced
transformations

00:12:36.320 --> 00:12:38.790
for both distance and calories.

00:12:38.790 --> 00:12:41.720
The basis app takes
advantage of this.

00:12:41.720 --> 00:12:44.790
Instead of computing
distance themselves

00:12:44.790 --> 00:12:47.640
they write in steps
and activity data

00:12:47.640 --> 00:12:50.770
into the Google Fit
platform, and read back

00:12:50.770 --> 00:12:52.730
our computed values
for distance.

00:12:58.449 --> 00:12:59.240
DAN AMINZADE: Cool.

00:12:59.240 --> 00:13:01.698
So let's take a look at how we
might do something like this

00:13:01.698 --> 00:13:02.950
with the Google Fit platform.

00:13:02.950 --> 00:13:05.700
So there is really-- there
are two ways of writing data

00:13:05.700 --> 00:13:06.810
to the platform.

00:13:06.810 --> 00:13:09.760
You can use the recording
API to do live recording.

00:13:09.760 --> 00:13:13.050
And then you can use the History
API to insert activity history.

00:13:13.050 --> 00:13:15.640
So let's actually start by
looking at live recording.

00:13:15.640 --> 00:13:17.850
All we have to do
to start recording

00:13:17.850 --> 00:13:20.159
is to subscribe to the
data type we care about.

00:13:20.159 --> 00:13:21.700
So here I'm calling
subscribe and I'm

00:13:21.700 --> 00:13:23.770
saying I'm interested
in activity samples--

00:13:23.770 --> 00:13:25.010
activity type.

00:13:25.010 --> 00:13:29.016
And then-- I actually, at that
point, I am essentially done.

00:13:29.016 --> 00:13:30.640
Google Fit will start
storing that data

00:13:30.640 --> 00:13:32.140
that I care about
in the background.

00:13:32.140 --> 00:13:34.680
So I don't need my own database
or my back-end to store it,

00:13:34.680 --> 00:13:36.354
there's no listener needed here.

00:13:36.354 --> 00:13:37.770
Basically, the
Google Fit platform

00:13:37.770 --> 00:13:39.865
is going to start recording
data and syncing it

00:13:39.865 --> 00:13:41.622
to the cloud in the background.

00:13:41.622 --> 00:13:43.080
And when I want it
later I can just

00:13:43.080 --> 00:13:44.790
read it with the History API.

00:13:44.790 --> 00:13:46.409
So once I subscribe I'm done.

00:13:46.409 --> 00:13:47.950
All I really need
to do is just check

00:13:47.950 --> 00:13:49.380
the status code
in the on result.

00:13:49.380 --> 00:13:51.463
And that's just to make
sure that the subscription

00:13:51.463 --> 00:13:52.376
succeeded.

00:13:52.376 --> 00:13:54.250
Now let's look at another
way of getting data

00:13:54.250 --> 00:13:55.331
into the Fitness history.

00:13:55.331 --> 00:13:57.580
Suppose I've gotten my data
from some external source,

00:13:57.580 --> 00:13:59.279
like another device.

00:13:59.279 --> 00:14:01.820
So in the example of basis they
wanted to write in some steps

00:14:01.820 --> 00:14:03.790
that they had gotten
from another device.

00:14:03.790 --> 00:14:06.077
So first you create
this data source object,

00:14:06.077 --> 00:14:08.410
and you specify the type of
data you want to write here.

00:14:08.410 --> 00:14:11.260
I'm saying I want to
write raw step count data.

00:14:11.260 --> 00:14:15.670
And then you create a data
set from the data source.

00:14:15.670 --> 00:14:18.189
And you add one or more
data points to the data set.

00:14:18.189 --> 00:14:20.230
Each of these points has
a start and an end time.

00:14:20.230 --> 00:14:24.950
So here I'm adding 950 steps
with a start and an end time.

00:14:24.950 --> 00:14:27.457
And then, finally, you
just call insert data

00:14:27.457 --> 00:14:30.040
to put the data into the fitness
history, and that's about it.

00:14:30.040 --> 00:14:33.491
All you really have to do after
that is just basically verify

00:14:33.491 --> 00:14:35.740
that the operation succeeded
before you start querying

00:14:35.740 --> 00:14:37.175
the data with the history API.

00:14:37.175 --> 00:14:39.550
And one nice thing is that
the Fit platform will actually

00:14:39.550 --> 00:14:41.910
validate the data
points that you insert.

00:14:41.910 --> 00:14:45.130
So, for example, if I put
in an invalid time range,

00:14:45.130 --> 00:14:47.540
or I put in a really
unrealistically high calorie

00:14:47.540 --> 00:14:50.197
burn, or cadence, or
something like that,

00:14:50.197 --> 00:14:52.530
I'll get an error back in the
client instead of the user

00:14:52.530 --> 00:14:54.530
history getting all messed up.

00:14:54.530 --> 00:14:57.260
So here's how this actually
looks in the basis app.

00:14:57.260 --> 00:14:58.980
They put in steps,
and then you can

00:14:58.980 --> 00:15:01.790
see they are able to derive from
that-- or through the Google

00:15:01.790 --> 00:15:04.840
Fit platform they get this
accurate distance traveled.

00:15:10.899 --> 00:15:13.190
MUZ MOSTOFI: We've been
working hard over the past year

00:15:13.190 --> 00:15:17.100
to improve the quality
of these transformations.

00:15:17.100 --> 00:15:19.720
The first area with
which we've improved them

00:15:19.720 --> 00:15:21.430
is relation to distance.

00:15:21.430 --> 00:15:24.870
Distance computed from
steps now has been improved

00:15:24.870 --> 00:15:26.830
with stride length calibration.

00:15:26.830 --> 00:15:28.610
From actively trucked
walks and runs

00:15:28.610 --> 00:15:30.360
to improve the quality
of passively tacked

00:15:30.360 --> 00:15:32.830
walks and runs.

00:15:32.830 --> 00:15:34.960
Secondly, for
calories, we will soon

00:15:34.960 --> 00:15:37.520
be leveraging gender,
age, and heart rate

00:15:37.520 --> 00:15:41.060
as part of our computations
to improve the accuracy.

00:15:41.060 --> 00:15:44.460
Thirdly, for merging.

00:15:44.460 --> 00:15:46.210
Previously leaving
your phone at your desk

00:15:46.210 --> 00:15:48.837
and going for a walk with
your Android Wear device

00:15:48.837 --> 00:15:50.920
would result in your step
counts dipping back down

00:15:50.920 --> 00:15:53.600
and then rubber banding back up.

00:15:53.600 --> 00:15:56.730
That will no longer be the case
through bi-directional syncing.

00:15:56.730 --> 00:16:01.030
We've also made
merging of our GPS data

00:16:01.030 --> 00:16:05.095
better by prioritizing the
highest fidelity GPS sources.

00:16:08.090 --> 00:16:09.960
Finally, with regards
to activities,

00:16:09.960 --> 00:16:14.120
this is our most complex task,
to infer the activity being

00:16:14.120 --> 00:16:19.070
performed by analyzing multiple
sensory inputs in real time.

00:16:19.070 --> 00:16:22.024
It's really important,
as users get frustrated

00:16:22.024 --> 00:16:24.190
when their fitness data has
false positive and false

00:16:24.190 --> 00:16:25.830
negative activity.

00:16:25.830 --> 00:16:28.460
And they don't get their
proper calories and step counts

00:16:28.460 --> 00:16:30.160
as a result.

00:16:30.160 --> 00:16:32.520
Fortunately, Google
is good and trusted

00:16:32.520 --> 00:16:35.280
at collecting and
understanding complex data

00:16:35.280 --> 00:16:38.240
through our advanced machine
learning capabilities.

00:16:38.240 --> 00:16:40.840
We've added dynamic
sampling of sensor inputs

00:16:40.840 --> 00:16:43.870
to improve quality, and
have made improvements

00:16:43.870 --> 00:16:47.990
to our algorithms by fusing
steps, position, speed,

00:16:47.990 --> 00:16:51.020
and user corrections together.

00:16:51.020 --> 00:16:53.650
The result of this hard
work over the past year

00:16:53.650 --> 00:16:56.480
is a reduction in our
biking precision error rates

00:16:56.480 --> 00:17:02.300
from 11% error in early 2015
down to 4% error as of now.

00:17:02.300 --> 00:17:06.349
And these changes will
be rolling out now.

00:17:06.349 --> 00:17:08.980
Finally, we've added
stride length calibration

00:17:08.980 --> 00:17:10.099
to the Fit platform.

00:17:10.099 --> 00:17:14.240
Which we hope will greatly
benefit non-GPS Android Wear

00:17:14.240 --> 00:17:15.910
devices.

00:17:15.910 --> 00:17:18.315
So now if a user goes
running initially

00:17:18.315 --> 00:17:19.940
with their phone and
their watch, which

00:17:19.940 --> 00:17:22.225
has-- the phone which
has GPS and the watch,

00:17:22.225 --> 00:17:25.970
which doesn't, the two will
calibrate together and generate

00:17:25.970 --> 00:17:29.380
a stride model and then they'll
get accurate distance and pace

00:17:29.380 --> 00:17:32.190
estimates running
without their phone,

00:17:32.190 --> 00:17:34.387
just with their non-GPS
Android Wear device.

00:17:40.380 --> 00:17:44.520
Now that we've looked at some
basic fitness tracking examples

00:17:44.520 --> 00:17:46.280
I want to talk about
our push this year

00:17:46.280 --> 00:17:49.070
into real time fitness tracking.

00:17:49.070 --> 00:17:51.480
But why is real
time so important

00:17:51.480 --> 00:17:55.030
when building a motivating
fitness experience?

00:17:55.030 --> 00:17:57.552
Well, when I look at
fitness apps out there--

00:17:57.552 --> 00:17:59.510
and I look at a lot of
fitness apps out there--

00:17:59.510 --> 00:18:01.750
I see that they
adopt this framework.

00:18:01.750 --> 00:18:04.700
They start with the
goal of the user.

00:18:04.700 --> 00:18:07.870
For example, I'd like
to lose 10 pounds.

00:18:07.870 --> 00:18:12.450
I'd like to sleep better, or I'd
like to finish a half marathon.

00:18:12.450 --> 00:18:15.680
They recognize that in order
to accomplish this goal

00:18:15.680 --> 00:18:18.730
they need to encourage a
pattern of motivating actions

00:18:18.730 --> 00:18:22.360
so that the user achieves
the result that they desire.

00:18:22.360 --> 00:18:26.180
Let's drill into these
motivating actions.

00:18:26.180 --> 00:18:29.890
There are three pillars of
wellness, exercise, nutrition,

00:18:29.890 --> 00:18:31.180
and recovery.

00:18:31.180 --> 00:18:35.740
Recovery we mean to mean
sleep and meditation.

00:18:35.740 --> 00:18:38.120
But these pillars do not
operate independently.

00:18:38.120 --> 00:18:41.880
And behavior in one needs to
be balanced against the other.

00:18:41.880 --> 00:18:43.710
By getting a holistic
view of what's

00:18:43.710 --> 00:18:45.530
going on in each of
these areas your app

00:18:45.530 --> 00:18:47.520
can more intelligently
and insightfully

00:18:47.520 --> 00:18:50.960
present suggestions and nudges
based on a changing fitness

00:18:50.960 --> 00:18:53.830
context in real time.

00:18:53.830 --> 00:18:56.310
For example, a sleep
app might observe

00:18:56.310 --> 00:18:58.360
that you sleep better
when you exercise,

00:18:58.360 --> 00:19:00.690
or when you eat less
sugar in the evening.

00:19:00.690 --> 00:19:03.370
An exercise app may
suggest exercise

00:19:03.370 --> 00:19:05.170
based on your logged
nutrition data

00:19:05.170 --> 00:19:07.740
so that you meet your
weight loss goals.

00:19:07.740 --> 00:19:11.930
Note, that in all these cases
timeliness is important.

00:19:11.930 --> 00:19:15.530
The best time to coach
and motivate a user

00:19:15.530 --> 00:19:17.420
is immediately in
response to an action

00:19:17.420 --> 00:19:21.450
that they have taken in
relation to their fitness.

00:19:21.450 --> 00:19:23.920
So good apps have an inbuilt
awareness of the user's

00:19:23.920 --> 00:19:26.010
overall fitness context.

00:19:26.010 --> 00:19:28.100
One of our partners,
Lifesum makes

00:19:28.100 --> 00:19:30.950
heavy use of these principles
in their application.

00:19:30.950 --> 00:19:33.660
And they integrate deeply
with the fit platform APIs,

00:19:33.660 --> 00:19:36.480
and as a result they've seen
double the retention rate

00:19:36.480 --> 00:19:38.921
for their users connected
to Fit versus their users

00:19:38.921 --> 00:19:40.087
who aren't connected to Fit.

00:19:43.350 --> 00:19:45.300
And who are the APIs
that we've added

00:19:45.300 --> 00:19:48.080
to let you respond in real
time to a changing fitness

00:19:48.080 --> 00:19:50.050
context for your user?

00:19:50.050 --> 00:19:52.820
First, there's Real Time
Data Update Notifications.

00:19:52.820 --> 00:19:55.790
It allows you to be
notified for certain data

00:19:55.790 --> 00:19:59.740
types in the fitness
store when they change.

00:19:59.740 --> 00:20:02.170
The second is Real Time
Session Notifications.

00:20:02.170 --> 00:20:04.660
It's actually been in
the platform for awhile,

00:20:04.660 --> 00:20:06.751
but we'd like to
talk about it today.

00:20:06.751 --> 00:20:09.000
It allows you to be notified
that the user has started

00:20:09.000 --> 00:20:12.640
or finished a workout tracked
in the third party application.

00:20:12.640 --> 00:20:15.840
And, finally, there's Real
Time Activity Recognition.

00:20:15.840 --> 00:20:17.610
Coming soon to
Android Wear devices

00:20:17.610 --> 00:20:21.891
to detect the onset of activity
to launch into your activity--

00:20:21.891 --> 00:20:23.015
active tracking experience.

00:20:25.750 --> 00:20:28.730
Let's dive into the first
API, Real Time Data Update

00:20:28.730 --> 00:20:29.619
Notifications.

00:20:29.619 --> 00:20:31.660
This allows us to build
the following experience.

00:20:31.660 --> 00:20:34.110
Say I just had an
impromptu pizza

00:20:34.110 --> 00:20:37.730
and I've exceeded my calorie
intake goal for the day.

00:20:37.730 --> 00:20:40.880
I can get a notification from
my weight scale app telling me,

00:20:40.880 --> 00:20:43.076
listen, more exercise is
needed to keep you on track

00:20:43.076 --> 00:20:44.325
to meet your weight loss goal.

00:20:47.974 --> 00:20:50.140
DAN AMINZADE: I do admit I
have a weakness for pizza

00:20:50.140 --> 00:20:51.681
and that one looked
pretty delicious.

00:20:51.681 --> 00:20:54.380
So let's see how we could build
something like that example

00:20:54.380 --> 00:20:55.940
that Muz just described.

00:20:55.940 --> 00:20:57.920
What we want to do is
subscribe to updates

00:20:57.920 --> 00:20:59.680
to the nutrition data type.

00:20:59.680 --> 00:21:01.810
So first thing we do is
create a PendingIntent.

00:21:01.810 --> 00:21:04.000
This is typically a
PendingIntent for an Intents

00:21:04.000 --> 00:21:05.900
service that's going
to call into your app

00:21:05.900 --> 00:21:08.940
whenever an update to one
of these data types occurs.

00:21:08.940 --> 00:21:11.335
What you then do is you
create a DataUpdateListen

00:21:11.335 --> 00:21:15.370
erRegistrationRequest, which
is a lot of camel case,

00:21:15.370 --> 00:21:17.890
but it is a pretty
descriptive name.

00:21:17.890 --> 00:21:21.779
And we're going to pass
in the type of data

00:21:21.779 --> 00:21:23.570
that we'd like to
subscribe to updates for.

00:21:23.570 --> 00:21:25.900
So in this case nutrition,
we're interested in meals

00:21:25.900 --> 00:21:27.290
that are being logged.

00:21:27.290 --> 00:21:30.370
And then we pass on that
PendingIntent we created.

00:21:30.370 --> 00:21:32.100
And then, finally,
we just call this

00:21:32.100 --> 00:21:34.550
RegisterDataUpdateListenerMethod
and we pass

00:21:34.550 --> 00:21:36.080
in our client and our request.

00:21:36.080 --> 00:21:37.930
And then, voila,
we'll get an update

00:21:37.930 --> 00:21:39.407
with the next logged meal.

00:21:39.407 --> 00:21:41.240
And, of course, you can
register for updates

00:21:41.240 --> 00:21:43.231
to all different
kinds of data types.

00:21:43.231 --> 00:21:45.230
For example, if I want
to be notified every time

00:21:45.230 --> 00:21:47.440
the user steps on their
scale and logs a new weight

00:21:47.440 --> 00:21:49.700
I can do that with type weight.

00:21:49.700 --> 00:21:51.720
And here are actually
all of the data types

00:21:51.720 --> 00:21:54.000
that support real time updates.

00:21:54.000 --> 00:21:56.375
Pretty much anything that
isn't updated super frequently.

00:21:59.340 --> 00:22:02.170
MUZ MOSTOFI: The second API,
Real Time Session Update

00:22:02.170 --> 00:22:04.460
Notifications,
allows, for example,

00:22:04.460 --> 00:22:07.120
a nutrition app to be
notified that a user just

00:22:07.120 --> 00:22:08.880
finished a workout session.

00:22:08.880 --> 00:22:11.470
So say you just finished
a weightlifting session,

00:22:11.470 --> 00:22:14.120
your nutrition app can
tell you, it's time

00:22:14.120 --> 00:22:16.980
to get a high protein meal in
to maximize your muscle growth.

00:22:16.980 --> 00:22:19.620
Or, say a hydration logging app.

00:22:19.620 --> 00:22:21.365
It can suggest
rehydrating immediately

00:22:21.365 --> 00:22:23.906
after finishing a 21
minute run outdoors.

00:22:26.476 --> 00:22:28.850
DAN AMINZADE: Yeah, It's been
so hot here I don't think--

00:22:28.850 --> 00:22:31.050
I think we can all use
hydration reminders even

00:22:31.050 --> 00:22:33.383
if we haven't been running,
just walking around outside.

00:22:33.383 --> 00:22:35.090
So let's build that one.

00:22:35.090 --> 00:22:36.590
Similar API to the
one that we just

00:22:36.590 --> 00:22:39.430
looked at with the
HistoryApi, but here we're

00:22:39.430 --> 00:22:41.180
going to use the
SessionsApi because we're

00:22:41.180 --> 00:22:42.940
interested in
registering for updates

00:22:42.940 --> 00:22:44.850
when a session starts or ends.

00:22:44.850 --> 00:22:46.460
So again we create
a PendingIntent

00:22:46.460 --> 00:22:49.970
that we'd like to fire when
a new session begins or ends.

00:22:49.970 --> 00:22:52.680
And then we call this
register for sessions method

00:22:52.680 --> 00:22:54.300
in the Sessions API.

00:22:54.300 --> 00:22:57.430
And now whenever the user
starts or ends a workout

00:22:57.430 --> 00:22:59.200
the PendingIntent
will fire and intent

00:22:59.200 --> 00:23:00.509
will be delivered to our app.

00:23:00.509 --> 00:23:02.800
And if you want to get more
information on that session

00:23:02.800 --> 00:23:04.924
you can actually extract
it from out of the Intent.

00:23:04.924 --> 00:23:08.020
So here I'm pulling out the
start and end time, and then

00:23:08.020 --> 00:23:09.180
also the type of workout.

00:23:09.180 --> 00:23:10.710
So whether it was a
run, or a bike ride,

00:23:10.710 --> 00:23:11.950
or a weightlifting
session, and I

00:23:11.950 --> 00:23:13.908
can put that into the
notification like the one

00:23:13.908 --> 00:23:15.332
that Muz just showed.

00:23:15.332 --> 00:23:16.790
One exciting new
development that's

00:23:16.790 --> 00:23:18.774
coming to the Google
Fit platform this year

00:23:18.774 --> 00:23:20.690
is that we're actually
going to allow your app

00:23:20.690 --> 00:23:23.120
to register not only for
these explicit sessions

00:23:23.120 --> 00:23:26.470
that the user initiate, but
also for implicit sessions.

00:23:26.470 --> 00:23:28.200
These are ones that
are automatically

00:23:28.200 --> 00:23:30.040
detected by our platform.

00:23:30.040 --> 00:23:33.720
So what it means is that your
app can respond in real time

00:23:33.720 --> 00:23:34.950
to user's fitness activity.

00:23:34.950 --> 00:23:37.440
So if I just lace
up my shoes and I

00:23:37.440 --> 00:23:40.040
start running my
favorite run tracking app

00:23:40.040 --> 00:23:42.370
can just start up
automatically on my watch.

00:23:42.370 --> 00:23:45.160
So I'm going to try to show
you a demo of how that works.

00:23:45.160 --> 00:23:47.130
I'm not really properly
dressed for running,

00:23:47.130 --> 00:23:50.580
but I'm going to do a
little run around here.

00:23:50.580 --> 00:23:52.390
OK, I just felt my
wrist vibrate which

00:23:52.390 --> 00:23:55.200
means that Strava should
have started up on my watch.

00:23:55.200 --> 00:23:57.780
So let's go over
here and take a look.

00:23:57.780 --> 00:23:58.730
And there we go.

00:23:58.730 --> 00:24:02.310
So you can see that Strava
is now recording my run.

00:24:02.310 --> 00:24:06.209
And I'll post that
on Strava later

00:24:06.209 --> 00:24:07.750
so I hope you can
give me some kudos.

00:24:07.750 --> 00:24:08.608
Here you go, Muz.

00:24:12.100 --> 00:24:13.220
MUZ MOSTOFI: Awesome.

00:24:13.220 --> 00:24:15.260
So we got a couple
of really exciting--

00:24:15.260 --> 00:24:16.760
well three, actually,
really exciting new features

00:24:16.760 --> 00:24:18.843
going on Android Wear
towards the end of the year.

00:24:21.720 --> 00:24:26.680
We've added a Beat to Beat API
in Android M. What this allows

00:24:26.680 --> 00:24:29.880
you to do is get the heart
rate time stamps in addition

00:24:29.880 --> 00:24:31.710
to the BPMs.

00:24:31.710 --> 00:24:33.370
And compute heart
rate variability,

00:24:33.370 --> 00:24:37.960
which is a proxy for
stress levels for the user.

00:24:37.960 --> 00:24:40.836
Second, we're
adding a profileApi.

00:24:40.836 --> 00:24:42.210
This allows you
to easily onboard

00:24:42.210 --> 00:24:45.580
you new users by reading age,
gender, height, and weight

00:24:45.580 --> 00:24:47.320
from the Fit platform.

00:24:47.320 --> 00:24:50.390
And, finally,
GoalsApi allowing you

00:24:50.390 --> 00:24:53.080
not only to show, for
example, just the step count,

00:24:53.080 --> 00:24:55.710
but also the progress
against that step goal.

00:24:55.710 --> 00:24:57.850
But also active time,
distance, and calorie

00:24:57.850 --> 00:24:59.600
goals as well from Google Fit.

00:25:02.307 --> 00:25:04.390
There's another exciting
feature that some of guys

00:25:04.390 --> 00:25:06.300
might have seen at
the sandbox already.

00:25:06.300 --> 00:25:09.550
so when I go to the gym I
notice that a lot of people

00:25:09.550 --> 00:25:11.580
are still using
an old school pen

00:25:11.580 --> 00:25:15.720
and paper to log their exercise,
their reps, their weight.

00:25:15.720 --> 00:25:19.340
Seems a bit crazy in 2016.

00:25:19.340 --> 00:25:23.530
Well Google fit on Android
Wear did count reps for you

00:25:23.530 --> 00:25:27.760
for three specific exercises,
push-ups, sit-ups, and squats,

00:25:27.760 --> 00:25:31.370
but only if you told the app
in advance what you were doing.

00:25:31.370 --> 00:25:35.510
This is still somewhat
limited and cumbersome.

00:25:35.510 --> 00:25:37.095
Now we've got something better.

00:25:37.095 --> 00:25:38.428
So I'm going to show you a demo.

00:25:44.759 --> 00:25:46.050
DAN AMINZADE: Oh, come on, Muz.

00:25:46.050 --> 00:25:46.534
MUZ MOSTOFI: Oh, all right.

00:25:46.534 --> 00:25:46.760
All right.

00:25:46.760 --> 00:25:46.865
OK.

00:25:46.865 --> 00:25:47.365
Maybe.

00:25:47.365 --> 00:25:47.920
Oh.

00:25:47.920 --> 00:25:49.170
DAN AMINZADE: Give me a break.

00:25:52.200 --> 00:25:56.130
MUZ MOSTOFI: OK, so I'm going
to the Google Fit strength

00:25:56.130 --> 00:25:58.510
training section.

00:25:58.510 --> 00:26:00.890
And I haven't told it the
exercise I'm about to do.

00:26:10.790 --> 00:26:11.780
DAN AMINZADE: Come on.

00:26:11.780 --> 00:26:14.280
Woo!

00:26:14.280 --> 00:26:16.530
He's working hard for you guys.

00:26:16.530 --> 00:26:19.684
MUZ MOSTOFI: As you can see it
detected bicep curls with 100%.

00:26:19.684 --> 00:26:20.592
[APPLAUSE]

00:26:21.954 --> 00:26:24.780
And counted the reps.

00:26:24.780 --> 00:26:27.940
It was 15 pounds so
I'll just log that.

00:26:27.940 --> 00:26:30.713
Let's do another exercise,
one which involves the legs.

00:26:33.890 --> 00:26:37.180
Note that I can take some
time just kind of setting up.

00:26:40.062 --> 00:26:41.270
DAN AMINZADE: Very good form.

00:26:41.270 --> 00:26:42.270
MUZ MOSTOFI: That's not.

00:26:42.270 --> 00:26:47.725
[LAUGHTER]

00:26:47.725 --> 00:26:48.427
OK.

00:26:48.427 --> 00:26:49.260
I'll put these down.

00:26:52.930 --> 00:26:55.110
And you can see it got deadlift.

00:26:55.110 --> 00:26:56.110
DAN AMINZADE: Yay.

00:26:56.110 --> 00:26:57.110
[APPLAUSE]

00:27:05.280 --> 00:27:08.640
MUZ MOSTOFI: If a rep is missed,
or an exercise isn't correct,

00:27:08.640 --> 00:27:12.080
for whatever reason, we
will learn from that mistake

00:27:12.080 --> 00:27:15.490
and become trained to the
user's exercise motion.

00:27:15.490 --> 00:27:18.980
We aim to seamlessly track a
whole workout with minimal user

00:27:18.980 --> 00:27:20.000
input.

00:27:20.000 --> 00:27:22.326
We're planning an API
towards the end of this year

00:27:22.326 --> 00:27:23.617
and we're looking for partners.

00:27:28.720 --> 00:27:29.720
DAN AMINZADE: All right.

00:27:29.720 --> 00:27:32.200
So that's our overview of
the Google Fit platform.

00:27:32.200 --> 00:27:35.360
Before we wrap up we just want
to thank all of our partners

00:27:35.360 --> 00:27:38.000
who are already using the
Google Fit platform to inspire

00:27:38.000 --> 00:27:39.580
and motivate people
around the world

00:27:39.580 --> 00:27:41.560
to lead more healthy
and active lifestyle.

00:27:41.560 --> 00:27:44.440
You know, at the end of the
day this talk isn't really

00:27:44.440 --> 00:27:46.670
about pending intents
and broadcast receivers,

00:27:46.670 --> 00:27:49.576
it's about improving lives
and extending life spans.

00:27:49.576 --> 00:27:50.950
And so we really
hope that you'll

00:27:50.950 --> 00:27:52.130
be inspired to get
out there and build

00:27:52.130 --> 00:27:54.930
the next generation of awesome,
amazing fitness experiences

00:27:54.930 --> 00:27:56.380
on Android.

00:27:56.380 --> 00:27:59.050
So thanks so much for
your time and attention.

00:27:59.050 --> 00:28:02.360
Feel free to contact
us with any questions.

00:28:02.360 --> 00:28:03.060
Thank you.

00:28:03.060 --> 00:28:05.160
[APPLAUSE]

00:28:06.360 --> 00:28:13.610
[MUSIC PLAYING]

