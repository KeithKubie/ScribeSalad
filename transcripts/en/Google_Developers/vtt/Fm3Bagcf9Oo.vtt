WEBVTT
Kind: captions
Language: en

00:00:05.110 --> 00:00:09.510
I'm standing in Victoria station
in London, and as you can see,

00:00:09.510 --> 00:00:13.430
there is massive competition
for Wi-Fi connectivity.

00:00:13.430 --> 00:00:16.590
Just standing in the same
place, signal strength

00:00:16.590 --> 00:00:18.680
is all over the place.

00:00:18.680 --> 00:00:21.570
Now, any kind of
connectivity is problematic

00:00:21.570 --> 00:00:23.670
in these circumstances.

00:00:23.670 --> 00:00:26.790
Delivering a really
good video experience,

00:00:26.790 --> 00:00:28.750
that could be a headache.

00:00:28.750 --> 00:00:30.200
What can we do about it?

00:00:30.200 --> 00:00:33.800
Let's head back to the
studio and find out.

00:00:33.800 --> 00:00:36.080
For video and audio
streaming, the web

00:00:36.080 --> 00:00:39.830
provides access to over
three billion devices.

00:00:39.830 --> 00:00:44.090
Well, as you know, connectivity
can be flaky and changeable,

00:00:44.090 --> 00:00:47.140
and bandwidth is often limited.

00:00:47.140 --> 00:00:49.220
To cope with real
world connectivity,

00:00:49.220 --> 00:00:52.200
we have an open standard for
video streaming and download

00:00:52.200 --> 00:00:53.560
called DASH.

00:00:53.560 --> 00:00:57.890
With DASH, you deliver video
in segments over a normal HTTP

00:00:57.890 --> 00:00:59.130
connection.

00:00:59.130 --> 00:01:02.470
Each segment is made available
at a variety of bit rates,

00:01:02.470 --> 00:01:04.700
resolutions, and formats.

00:01:04.700 --> 00:01:07.100
Depending on the bandwidth
and device capabilities,

00:01:07.100 --> 00:01:10.780
the client chooses the
best possible version.

00:01:10.780 --> 00:01:11.860
DASH does what it says.

00:01:11.860 --> 00:01:14.360
Dynamic, Adaptive,
Streaming, and Download.

00:01:14.360 --> 00:01:17.190
And HTTP enables
content delivery

00:01:17.190 --> 00:01:21.390
with all the advantages of
HTTP, without the disadvantages

00:01:21.390 --> 00:01:23.820
of a traditional
streaming server.

00:01:23.820 --> 00:01:27.330
No proprietary protocols
or hardware required.

00:01:27.330 --> 00:01:30.840
So, what's the best way
to do DASH on the web?

00:01:30.840 --> 00:01:32.540
Let's find out.

00:01:32.540 --> 00:01:37.090
Rolling your own adaptive
video solution can be complex.

00:01:37.090 --> 00:01:41.110
Shaka Player is a simple-to-use
JavaScript library from Google

00:01:41.110 --> 00:01:43.980
that enables you to deliver
the best possible video

00:01:43.980 --> 00:01:47.160
and audio to a cheap,
low-res phone on 3G

00:01:47.160 --> 00:01:50.990
or a high-spec laptop on
gigabit fiber and everything

00:01:50.990 --> 00:01:52.230
in between.

00:01:52.230 --> 00:01:55.470
Shaka is plug-in free and
built on web standards,

00:01:55.470 --> 00:01:58.570
so it works on
billions of devices.

00:01:58.570 --> 00:02:02.340
Let's dive straight in and
build a video player with Shaka.

00:02:02.340 --> 00:02:05.620
First up, install polyfills
for legacy browsers.

00:02:05.620 --> 00:02:08.720
Then create a Shaka Player for
the video element on the page,

00:02:08.720 --> 00:02:13.040
and add an error handler in
case something goes wrong.

00:02:13.040 --> 00:02:15.960
Provide the address
of the DASH manifest.

00:02:15.960 --> 00:02:19.900
Now, this is the XML file that
describes the alternatives

00:02:19.900 --> 00:02:21.832
for each segment of video.

00:02:21.832 --> 00:02:23.540
One thing you'll notice
from the manifest

00:02:23.540 --> 00:02:27.270
is that DASH enables alternative
formats for the same content

00:02:27.270 --> 00:02:31.890
and bit rate, in this
example, WebM, as well as MP4.

00:02:31.890 --> 00:02:36.210
Now, that's great for media
delivery to a range of devices.

00:02:36.210 --> 00:02:38.330
Next, we create a
bandwidth estimator,

00:02:38.330 --> 00:02:39.960
using the Shaka utilities.

00:02:39.960 --> 00:02:41.810
And this is crucial
for dynamically

00:02:41.810 --> 00:02:44.250
adapting to network conditions.

00:02:44.250 --> 00:02:47.060
And finally, load all
that in the Shaka Player.

00:02:47.060 --> 00:02:48.750
And that's it,
adaptive streaming

00:02:48.750 --> 00:02:50.880
in just a few lines of code.

00:02:50.880 --> 00:02:52.320
Now, on the back
end, you'll need

00:02:52.320 --> 00:02:55.540
to encode and package your
content ready for streaming.

00:02:55.540 --> 00:02:57.850
There are several open
source tools available,

00:02:57.850 --> 00:03:00.790
which can be used to convert
content to a valid segmented

00:03:00.790 --> 00:03:03.430
file and generate a manifest.

00:03:03.430 --> 00:03:06.200
To find out more about DASH
packaging and encoding,

00:03:06.200 --> 00:03:09.900
take a look at the links
at the end of the video.

00:03:09.900 --> 00:03:13.040
Shaka Player also enables
delivery of protected content,

00:03:13.040 --> 00:03:17.060
using the EME APIs to get
licenses and do decryption.

00:03:17.060 --> 00:03:19.530
And Shaka supports
multi-lingual content

00:03:19.530 --> 00:03:23.010
for audio tracks and subtitles.

00:03:23.010 --> 00:03:25.470
The best way to learn more
about Shaka's capabilities

00:03:25.470 --> 00:03:27.620
is to download
the Shaka Project.

00:03:27.620 --> 00:03:30.250
Run the build tools,
which create example apps

00:03:30.250 --> 00:03:32.630
and optimize the
JavaScript code.

00:03:32.630 --> 00:03:37.380
On Linux and Mac
systems, run all .sh.

00:03:37.380 --> 00:03:39.400
The documentation
has more information

00:03:39.400 --> 00:03:41.520
about building on Windows.

00:03:41.520 --> 00:03:43.910
I'd recommend you look through
the HTML and JavaScript

00:03:43.910 --> 00:03:46.460
for the Shaka test app.

00:03:46.460 --> 00:03:49.090
The Shaka GitHub repo
has other resources

00:03:49.090 --> 00:03:50.470
to help you get started.

00:03:50.470 --> 00:03:52.340
There are several
excellent tutorials

00:03:52.340 --> 00:03:55.880
and a test app that exercises
all the capabilities of Shaka

00:03:55.880 --> 00:03:57.120
Player.

00:03:57.120 --> 00:03:59.200
If you find bugs or
have feature requests,

00:03:59.200 --> 00:04:01.760
please file issues on the repo.

00:04:01.760 --> 00:04:03.060
Thanks for watching.

00:04:03.060 --> 00:04:03.886
See you there.

00:04:06.620 --> 00:04:09.670
[MUSIC PLAYING]

