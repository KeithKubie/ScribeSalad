WEBVTT
Kind: captions
Language: en

00:00:00.120 --> 00:00:03.500
In contrast, in paravirtualized systems,

00:00:03.500 --> 00:00:07.840
the operating system knows that it's
executing in a virtualized environment.

00:00:07.840 --> 00:00:10.880
Because of this, there is no
longer a strict requirement for

00:00:10.880 --> 00:00:15.152
the guest OS to use contiguous
physical memory that starts at zero.

00:00:15.152 --> 00:00:20.030
And the guest OS can explicitly
register the page tables that it uses

00:00:20.030 --> 00:00:23.810
with the hypervisor so there is no
need for maintaining dual page tables,

00:00:23.810 --> 00:00:27.530
one of the guest and then another
shadow one at the hypervisor level.

00:00:27.530 --> 00:00:31.880
Now, the guest still doesn't have write
permissions to this page table that's

00:00:31.880 --> 00:00:37.060
now used by the hardware because
otherwise the guest potentially can

00:00:37.060 --> 00:00:42.180
establish any mapping and corrupt other
VMs that are running on the same system.

00:00:42.180 --> 00:00:47.150
So, because of that, every update to
the page table would cause a trap and

00:00:47.150 --> 00:00:49.180
pass control to the hypervisor.

00:00:49.180 --> 00:00:52.000
But because the guest
is paravirtualized, and

00:00:52.000 --> 00:00:55.620
we can modify the guest and
do tricks like batch a number of

00:00:55.620 --> 00:01:01.120
page table updates and then issue
a single hypercall in this case to

00:01:01.120 --> 00:01:04.489
tell the hypervisor to install
all of these mappings.

00:01:04.489 --> 00:01:09.060
So this can amortize the cost of
the exit across multiple operations.

00:01:09.060 --> 00:01:11.370
There can be other
optimizations that are useful.

00:01:11.370 --> 00:01:16.740
For instance, optimizations related
to how the memory's managed so that

00:01:16.740 --> 00:01:22.330
it's more friendly to execution in a
virtualized environment or so that it's

00:01:22.330 --> 00:01:27.540
more cooperative with respect to other
VMs in the system and other things.

00:01:27.540 --> 00:01:31.380
One thing to note that the two
mechanisms that I described with respect

00:01:31.380 --> 00:01:34.700
to memory virtualization for
both full as well as para,

00:01:34.700 --> 00:01:39.290
paravirtualized VMs have
substantially been improved

00:01:39.290 --> 00:01:43.020
given advances in the new
hardware architectures.

00:01:43.020 --> 00:01:46.390
So, some of these overheads have
completely been eliminated or

00:01:46.390 --> 00:01:50.250
at least substantially reduced if
we take a look at what's happening

00:01:50.250 --> 00:01:53.520
at the newer generation
of x86 platforms.

00:01:53.520 --> 00:01:55.820
And we will talk about that
shortly in this lesson.

