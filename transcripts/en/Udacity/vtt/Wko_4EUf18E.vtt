WEBVTT
Kind: captions
Language: en

00:00:00.160 --> 00:00:02.790
Let's go ahead and
create our first application in Flask.

00:00:02.790 --> 00:00:05.920
Create a file name project.py
in the same directory as

00:00:05.920 --> 00:00:07.960
the database_setup.py file.

00:00:07.960 --> 00:00:11.120
A minimal flask application
looks something like this.

00:00:11.120 --> 00:00:13.920
Let's take a look at this code
together and see what's going on.

00:00:13.920 --> 00:00:17.540
First, I imported this Flask
class from the flask library.

00:00:17.540 --> 00:00:20.460
Next, I create an instance of this
class with the name of the running

00:00:20.460 --> 00:00:22.030
application as the argument.

00:00:22.030 --> 00:00:25.360
Any time we run an application in
Python, a special variable called name

00:00:25.360 --> 00:00:28.560
gets defined for the application and
all of the imports it uses.

00:00:28.560 --> 00:00:31.750
The application run by the Python
interpreter gets a name variable set

00:00:31.750 --> 00:00:34.100
to __main__.

00:00:34.100 --> 00:00:39.310
Whereas all the other important Python
files get a __name__ variable fit to

00:00:39.310 --> 00:00:41.420
the actual name of the Python file.

00:00:41.420 --> 00:00:45.310
Next, I have this thing that looks like
a function, but stats with an at symbol.

00:00:45.310 --> 00:00:47.210
This is called a decorator in Python.

00:00:47.210 --> 00:00:50.990
This decorator essentially wraps our
function inside the app.route function.

00:00:50.990 --> 00:00:52.560
That flask is already created.

00:00:52.560 --> 00:00:54.840
So if either of these routes
get sent from the browser,

00:00:54.840 --> 00:00:57.340
the function that we
define here gets executed.

00:00:57.340 --> 00:00:59.430
If this is difficult to follow,
it's okay.

00:00:59.430 --> 00:01:01.720
I'll provide a link in the Instructor
Notes if you're interested in

00:01:01.720 --> 00:01:03.710
learning more about decorator functions.

00:01:03.710 --> 00:01:06.660
Just know that this @
app.route piece of code,

00:01:06.660 --> 00:01:08.340
we'll call the function that follows it.

00:01:08.340 --> 00:01:09.650
Whenever the website receives your

00:01:09.650 --> 00:01:12.130
request with a URL that
matches its argument.

00:01:12.130 --> 00:01:14.930
So in this case,
if we visit the root of the site, or

00:01:14.930 --> 00:01:18.990
the back slash hello page, this hello
world function will be invoked.

00:01:18.990 --> 00:01:20.760
Inside my hello world function,

00:01:20.760 --> 00:01:24.060
I return the message I want to
display to the user's browser.

00:01:24.060 --> 00:01:25.650
Jumping to the last line of our code,

00:01:25.650 --> 00:01:28.880
I use the run function to run
the local server with our application.

00:01:28.880 --> 00:01:31.720
The if statement here makes
sure the server only runs if

00:01:31.720 --> 00:01:35.010
the script is executed directly
from the python interpreter, and

00:01:35.010 --> 00:01:36.950
not used as an imported module.

00:01:36.950 --> 00:01:39.040
So basically, this line of code says,

00:01:39.040 --> 00:01:41.993
if you're executing me with
a Python interpreter, then do this.

00:01:41.993 --> 00:01:45.970
But, if you're importing me into
another Python file, don't do this.

00:01:45.970 --> 00:01:48.340
But you still have access
to the rest of the code.

00:01:48.340 --> 00:01:51.610
By default, the server is only
accessible from the host machine and

00:01:51.610 --> 00:01:53.060
not from any other computer.

00:01:53.060 --> 00:01:54.170
This is a default.

00:01:54.170 --> 00:01:55.460
Because in debugging mode,

00:01:55.460 --> 00:01:59.580
a user of the application can execute
arbitrary Python code on your computer.

00:01:59.580 --> 00:02:03.320
Since we are using a vagrant environment
for this course we must make our server

00:02:03.320 --> 00:02:07.290
publicly available by changing the call
of the run method to look like this.

00:02:07.290 --> 00:02:10.050
This tells the web server on my
vagrant machine to listen on

00:02:10.050 --> 00:02:11.900
all public IP addresses.

00:02:11.900 --> 00:02:15.260
Restarting our server each time we make
a modification to our code can get

00:02:15.260 --> 00:02:17.970
pretty annoying, but
Flask can take care of this for us.

00:02:17.970 --> 00:02:19.550
If you enable debug support,

00:02:19.550 --> 00:02:22.350
the server will reload itself each
time it notices a code change.

00:02:22.350 --> 00:02:25.490
It will also provide you a helpful
debugger in the browser if

00:02:25.490 --> 00:02:26.720
things go wrong.

00:02:26.720 --> 00:02:29.490
I'll save this code as project.py,
in the same directory as

00:02:29.490 --> 00:02:33.470
my restaurant db file, and
execute it with the python interpreter.

00:02:33.470 --> 00:02:35.540
Visiting local host port 5000 or

00:02:35.540 --> 00:02:39.570
local host 5000 slash hello,
I see the output of my code.

00:02:39.570 --> 00:02:41.960
To stop the server, I hit Ctrl+C.

00:02:41.960 --> 00:02:43.950
So we see that with much
fewer lines of code,

00:02:43.950 --> 00:02:47.210
I executed a similar version of
our hello world from lesson two.

00:02:47.210 --> 00:02:51.110
Notice that with Flask, we don't have
to write out response codes anymore.

00:02:51.110 --> 00:02:54.570
You will soon see that this is just one
of the several features frameworks takes

00:02:54.570 --> 00:02:56.110
care of automatically for the developer.

