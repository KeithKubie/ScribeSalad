WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:06.000
In our last unit, we ended with a brute-force algorithm for enumerating all the strings

00:00:06.000 --> 00:00:08.000
in a grammar, step by step.

00:00:08.000 --> 00:00:13.000
Brute force is actually a technical term, which means to try all of the options exhaustively.

00:00:13.000 --> 00:00:18.000
Typically, the brute-force solution is easy to code, but relatively inefficient.

00:00:18.000 --> 00:00:23.000
In fact, our brute-force solution was so inefficient, it might go on forever.

00:00:23.000 --> 00:00:26.000
Consider this grammar for balanced parenthesis.

00:00:26.000 --> 00:00:30.000
We know how to enumerate strings in the language of this grammar.

00:00:30.000 --> 00:00:33.000
Suppose I give you the input open, open, close,

00:00:33.000 --> 00:00:35.000
and we want to know if it's in the language of this grammar.

00:00:35.000 --> 00:00:38.000
Well, in our brute-force approach, we would just enumerate things.

00:00:38.000 --> 00:00:41.000
We'd say, oh, well, 1 thing is the empty string.

00:00:41.000 --> 00:00:44.000
Is your input the empty string? No.

00:00:44.000 --> 00:00:49.000
Another string in the language of this grammar is open, close. Are you open, close? No.

00:00:49.000 --> 00:00:52.000
Another string in the language of this grammar is open, open, close, close.

00:00:52.000 --> 00:00:56.000
Is that you? Nope.

00:00:56.000 --> 00:01:01.000
How about open, open, open, close, close, close? Still no!

00:01:01.000 --> 00:01:06.000
How about 4 opens, followed by 4 closes? You are getting farther away. So cold!

00:01:06.000 --> 00:01:07.000
This is the wrong direction.

00:01:07.000 --> 00:01:11.000
So the algorithm that we described would enumerate all of these strings

00:01:11.000 --> 00:01:13.000
and many more--infinitely many more.

00:01:13.000 --> 00:01:17.000
Never noticing that we're never really going to match this.

00:01:17.000 --> 00:01:18.000
We're making strings that are too big.

00:01:18.000 --> 00:01:20.000
This is all just wasted work.

00:01:20.000 --> 00:01:27.000
I don't need to check 5--1, 2, 3, 4, 5--if 5 opens, followed by 5 closes corresponds

00:01:27.000 --> 00:01:31.000
to this input string. This has 10 characters. It is way too long.

00:01:31.000 --> 00:01:35.000
So that's a clear inefficiency in our previous brute-force algorithm.

00:01:35.000 --> 00:01:42.000
And that key insight that we can stop somewhere around here

00:01:42.000 --> 00:01:45.000
is what's going to lead us to a more efficient parsing strategy.

00:01:45.000 --> 00:01:48.000
Thus, our key parsing idea.

00:01:48.000 --> 00:01:53.000
We're going to win by being lazy and not duplicating work.

00:01:53.000 --> 00:01:57.000
We don't want to do any unnecessary work. We want to be super lazy.

00:01:57.000 --> 00:02:00.000
And in fact, here we've got a lazy person on a bed sleeping.

00:02:00.000 --> 00:02:02.000
You can tell it's a bed because I can't sketch.

00:02:02.000 --> 00:02:08.000
In fact, this notion that laziness is a virtue for programmers is widely celebrated.

00:02:08.000 --> 00:02:15.000
Larry Wall, the designer and inventor of Perl--P, e, r, l--

00:02:15.000 --> 00:02:17.000
the pathologically eclectic rubbish lister--

00:02:17.000 --> 00:02:20.000
a language that we won't be describing in this class, claims in his text books,

00:02:20.000 --> 00:02:25.000
we will encourage you to develop the 3 great virtues of a programmer--

00:02:25.000 --> 00:02:27.000
laziness, impatience, and hubris.

00:02:27.000 --> 00:02:30.000
Sign me up! Those sound like great ways to lead one's life.

00:02:30.000 --> 00:02:34.000
But perhaps for computer programming, they actually are.

00:02:34.000 --> 00:02:41.000
The notion for laziness is it's this quality that make you go to great effort to reduce

00:02:41.000 --> 00:02:43.000
overall energy expenditures.

00:02:43.000 --> 09:59:59.000
In other words, I want to spend 5 minutes now to save 5 hours later.

