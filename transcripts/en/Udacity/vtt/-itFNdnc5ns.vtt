WEBVTT
Kind: captions
Language: en

00:00:00.690 --> 00:00:05.720
And now I want to return to the extent function, and inspect what d is in

00:00:05.720 --> 00:00:10.530
this case, now that we've transformed the date and attendance column.

00:00:10.530 --> 00:00:13.300
Notice how I've put a debugger statement in

00:00:13.300 --> 00:00:15.910
the anonymous accessor function here.

00:00:15.910 --> 00:00:21.560
So the execution will stop, and b stopped for every row in our data.

00:00:21.560 --> 00:00:24.430
Let's go back to the web page and see what that looks like.

00:00:24.430 --> 00:00:28.560
Refreshing the page, we see here, our first debugger got caught.

00:00:28.560 --> 00:00:33.870
If we click the Play button, we'll jump past this break statement and

00:00:33.870 --> 00:00:37.650
happen to catch the break statement in the extent.

00:00:37.650 --> 00:00:40.450
Since execution stopped in this function,

00:00:40.450 --> 00:00:44.420
the scope is the same scope at this point in the code.

00:00:44.420 --> 00:00:48.920
Notice here that there's a single argument d to this function.

00:00:48.920 --> 00:00:52.330
So we should be able to access d in the console since we

00:00:52.330 --> 00:00:54.080
have a debugger statement there.

00:00:54.080 --> 00:00:59.370
Here we can see d corresponds to an object that has the following fields in it.

00:00:59.370 --> 00:01:02.900
One of which is the attendance and there's also a date there.

00:01:02.900 --> 00:01:07.620
Notice that this happens to be the first row in our data set, game_id 1.

00:01:07.620 --> 00:01:11.550
And as we continue past this debugger statement.

00:01:11.550 --> 00:01:14.120
It'll catch at every subsequent row.

00:01:14.120 --> 00:01:15.980
Looking at the date here,

00:01:15.980 --> 00:01:20.030
we can see that our returns a more complicated date object.

00:01:20.030 --> 00:01:25.000
In JavaScript, to check for a specific data types, it's somewhat cumbersome.

00:01:25.000 --> 00:01:29.490
And we have to basically use the instance of operator to do

00:01:29.490 --> 00:01:33.640
a Boolean check of what's on the left side with what's on the right side.

00:01:33.640 --> 00:01:39.590
So in this case, if d bracket date is indeed a JavaScript date object,

00:01:39.590 --> 00:01:41.140
this will return true.

00:01:41.140 --> 00:01:43.060
If not, it will return false.

00:01:43.060 --> 00:01:44.560
As you can see here.

00:01:44.560 --> 00:01:45.850
It has returned true.

00:01:45.850 --> 00:01:50.670
Now if we didn't have any assumption of what the variable on the left should be.

00:01:50.670 --> 00:01:54.490
We'll have to go through each of the JavaScript primitive types

00:01:54.490 --> 00:01:57.660
continuously running the instance of check.

00:01:57.660 --> 00:02:01.690
And looking at the attendance column here, we can see that it's 25000,

00:02:01.690 --> 00:02:04.850
rather than the string 25000.

00:02:04.850 --> 00:02:10.610
And just a note in JavaScript, it being the flexible language it is.

00:02:10.610 --> 00:02:15.980
We can actually use dot notation to access the field of an object or

00:02:15.980 --> 00:02:17.490
the bracket notation.

00:02:17.490 --> 00:02:21.380
The one limitation with the dot notation is if your field happens to

00:02:21.380 --> 00:02:22.930
have a space in it.

00:02:22.930 --> 00:02:27.800
If so, you'll have to use the bracket notation with the string argument.

00:02:27.800 --> 00:02:30.750
But it's usually good practice to have all the keys of

00:02:30.750 --> 00:02:36.320
your object either be a single word, or instead of spaces, to use underscores.

00:02:36.320 --> 00:02:42.956
In this case, d.attendance returns the same value as d{*attendance*}.

00:02:42.956 --> 00:02:47.730
And you'll notice, if we try to continue the debugger repeatedly gets

00:02:47.730 --> 00:02:50.530
stopped within the extent function.

00:02:50.530 --> 00:02:53.450
Each time d actually is a different object.

00:02:53.450 --> 00:02:57.700
In this case, I've continued a few times, so we're at game_id 6.

00:02:57.700 --> 00:03:02.870
Continuing one more time d is now game_id 7 and so forth.

00:03:02.870 --> 00:03:05.720
So let's remove this debugger from our code since we don't want to

00:03:05.720 --> 00:03:09.060
go through all 800 plus rows of our data.

00:03:09.060 --> 00:03:13.310
And then continue to actually create the axis objects from these

00:03:13.310 --> 00:03:14.420
extents and scales

