WEBVTT
Kind: captions
Language: en

00:00:00.009 --> 00:00:02.550
WESLEY CHUN: Hey, developers,
this is Wesley Chun from Google

00:00:02.550 --> 00:00:04.008
here to introduce
you to the newest

00:00:04.008 --> 00:00:07.574
version of the Google Sheets
API launched at Google I/O 2016.

00:00:07.574 --> 00:00:09.240
In this episode, we're
going to show you

00:00:09.240 --> 00:00:11.260
how to use a new
v4 API by walking

00:00:11.260 --> 00:00:12.870
through a simple
script that populates

00:00:12.870 --> 00:00:16.210
rows from a relational
database into a Google Sheet.

00:00:16.210 --> 00:00:18.620
Let's take a quick step
back before getting started.

00:00:18.620 --> 00:00:20.990
We know that spreadsheets
have been a computing killer

00:00:20.990 --> 00:00:23.220
app for decades, growing
beyond the business world.

00:00:23.220 --> 00:00:25.850
And for nearly as long,
they have been programmable,

00:00:25.850 --> 00:00:29.510
so it's no surprise it was
one of Google's first APIs.

00:00:29.510 --> 00:00:31.840
Spreadsheets are a great
place for a structured data,

00:00:31.840 --> 00:00:34.050
so it makes sense working
with them programmatically,

00:00:34.050 --> 00:00:35.630
because data is
generally created

00:00:35.630 --> 00:00:37.480
and may live outside
of a spreadsheet,

00:00:37.480 --> 00:00:40.150
but can be easily viewed
and manipulated there.

00:00:40.150 --> 00:00:42.180
While previous API
versions like v3

00:00:42.180 --> 00:00:45.020
were good at creating new sheets
within existing spreadsheets,

00:00:45.020 --> 00:00:47.970
writing new rows of data,
and, of course, reading data,

00:00:47.970 --> 00:00:50.500
that's pretty much
all you could do.

00:00:50.500 --> 00:00:52.282
Now that kind of
API seems incomplete

00:00:52.282 --> 00:00:53.740
when you consider
that spreadsheets

00:00:53.740 --> 00:00:55.450
are way more than that.

00:00:55.450 --> 00:00:57.220
With that said, we're
excited to announce

00:00:57.220 --> 00:01:00.470
we've launched a new version
that can do much more.

00:01:00.470 --> 00:01:03.222
Think of what you can do from
a spreadsheet user's interface.

00:01:03.222 --> 00:01:05.430
An API should allow your
code to do most of the stuff

00:01:05.430 --> 00:01:08.110
that you can do with sheets
on mobile or the desktop.

00:01:08.110 --> 00:01:11.850
That's the real power of v4--
the ability to do way more,

00:01:11.850 --> 00:01:15.430
yet still keep things
simple for developers.

00:01:15.430 --> 00:01:18.120
To get started with the
API, we need a SQL database

00:01:18.120 --> 00:01:19.510
that has data.

00:01:19.510 --> 00:01:21.970
Our codelab has the perfect
one, so click the link

00:01:21.970 --> 00:01:24.070
and download the
zip file in step 2.

00:01:24.070 --> 00:01:26.580
Extract the db.SQLite life
from the Start folder,

00:01:26.580 --> 00:01:29.390
whose schema you see here,
and you're ready to go.

00:01:29.390 --> 00:01:31.390
Now, you can do the
codelab when you're

00:01:31.390 --> 00:01:34.575
ready for a deeper hands-on
using JavaScript and Node,

00:01:34.575 --> 00:01:37.000
and it will help that you
already know its database.

00:01:37.000 --> 00:01:39.450
Today, we're using Python.

00:01:39.450 --> 00:01:41.050
Here's a preview of
the database rows

00:01:41.050 --> 00:01:43.133
we're going to push into
the new Google sheet that

00:01:43.133 --> 00:01:44.180
comes from that database.

00:01:44.180 --> 00:01:45.710
To keep this a short
and sweet intro,

00:01:45.710 --> 00:01:47.376
there won't be any
formatting this time.

00:01:47.376 --> 00:01:49.360
We're just inserting
the raw data.

00:01:49.360 --> 00:01:50.880
Before we can go
to the computer,

00:01:50.880 --> 00:01:53.620
those new to using Google API
should catch our intro video

00:01:53.620 --> 00:01:55.790
on setting up new projects.

00:01:55.790 --> 00:01:57.730
While today's
script is in Python,

00:01:57.730 --> 00:02:00.250
you can use any language
supported by Google API's

00:02:00.250 --> 00:02:01.470
client libraries.

00:02:01.470 --> 00:02:03.770
Be sure to watch the common
code walkthrough video,

00:02:03.770 --> 00:02:06.920
because we're going straight
to the API code you see here.

00:02:06.920 --> 00:02:09.400
Once you've got a project
with the sheets API enabled,

00:02:09.400 --> 00:02:12.780
let's go to the computer
and see how to use it.

00:02:12.780 --> 00:02:15.430
As we just said, most
everything through line 16

00:02:15.430 --> 00:02:17.300
is part of the
boilerplate, except

00:02:17.300 --> 00:02:18.730
for the necessary
imports we need

00:02:18.730 --> 00:02:20.180
for this particular script.

00:02:20.180 --> 00:02:21.980
And of course the
scope on line 10.

00:02:21.980 --> 00:02:23.570
Because we're using
the sheets API,

00:02:23.570 --> 00:02:25.772
we need to have the
necessary scopes here.

00:02:25.772 --> 00:02:27.230
Also, make sure
you have the sheets

00:02:27.230 --> 00:02:29.280
API enabled in the dev console.

00:02:29.280 --> 00:02:31.200
Otherwise, none of
this is going to work.

00:02:31.200 --> 00:02:33.420
All right, let's move
straight to the API code.

00:02:33.420 --> 00:02:36.480
That's on line 18 through 22.

00:02:36.480 --> 00:02:38.410
So on line 18 is where
we get the service

00:02:38.410 --> 00:02:41.810
endpoint for Google Sheets,
so you can talk to the API.

00:02:41.810 --> 00:02:44.920
And then we use the
spreadsheets.create function

00:02:44.920 --> 00:02:48.250
to create the spreadsheet with
a bare minimum of information--

00:02:48.250 --> 00:02:51.440
just a title with a time
stamp in the request body.

00:02:51.440 --> 00:02:55.560
And what you get back is a
spreadsheet ID, which we save,

00:02:55.560 --> 00:02:57.880
and then let the
user know on line 22

00:02:57.880 --> 00:02:59.590
that it has been created.

00:02:59.590 --> 00:03:02.540
Now let's turn our attention
to the actual database.

00:03:02.540 --> 00:03:06.030
So in the next chunk of
code, lines 24 through 31,

00:03:06.030 --> 00:03:07.760
we're not going to
touch the sheets API.

00:03:07.760 --> 00:03:10.090
We're just going to grab
the data that we have

00:03:10.090 --> 00:03:12.050
sitting in the SQLite database.

00:03:12.050 --> 00:03:14.360
So you can see just a
bunch of field names.

00:03:14.360 --> 00:03:16.950
We make the connection to
the database, grab a cursor,

00:03:16.950 --> 00:03:19.630
execute our select
to grab all the rows,

00:03:19.630 --> 00:03:22.610
and then insert the headers
in front of the rows,

00:03:22.610 --> 00:03:24.480
so that's what insert 0 is.

00:03:24.480 --> 00:03:27.000
And then the last step
is to basically assign

00:03:27.000 --> 00:03:28.634
this to the JSON
payload that we're

00:03:28.634 --> 00:03:30.300
going to pass through
the API, but we're

00:03:30.300 --> 00:03:33.260
going to strip out the last two
columns, which are the created

00:03:33.260 --> 00:03:35.310
date and the update date.

00:03:35.310 --> 00:03:37.160
Now that we have the
data from the database

00:03:37.160 --> 00:03:39.340
and we have a blank
spreadsheet, the next step

00:03:39.340 --> 00:03:41.970
is to add all those
values to the spreadsheet.

00:03:41.970 --> 00:03:43.480
And the way you do
that is by using

00:03:43.480 --> 00:03:46.814
spreadsheets.values.update,
pass in the spreadsheet ID,

00:03:46.814 --> 00:03:48.980
tell it what's the first
cell that the data is going

00:03:48.980 --> 00:03:51.810
to go into, the data
in the request body,

00:03:51.810 --> 00:03:53.940
and then this value
input option, which

00:03:53.940 --> 00:03:55.480
we use as raw here.

00:03:55.480 --> 00:03:57.990
There's another option
called User Entered.

00:03:57.990 --> 00:04:01.610
User Entered is for the
situation where you're

00:04:01.610 --> 00:04:04.390
going to pretend the user
actually sat at the keyboard

00:04:04.390 --> 00:04:07.540
with a sheet in front of them
and are typing in the values.

00:04:07.540 --> 00:04:09.710
The difference there
is that if the cells

00:04:09.710 --> 00:04:12.960
have been pre-formatted
for numbers, or strings,

00:04:12.960 --> 00:04:15.390
or have formulas,
then all those things

00:04:15.390 --> 00:04:17.829
will take effect, versus
the raw data, which is just

00:04:17.829 --> 00:04:20.720
throwing in the values
without any concern for what

00:04:20.720 --> 00:04:22.904
kind of functionality
is already in the sheet.

00:04:22.904 --> 00:04:24.820
So once that's done, we
have a print statement

00:04:24.820 --> 00:04:27.040
to tell the user that the data
has been sent to the sheet.

00:04:27.040 --> 00:04:28.581
And then just to
confirm, we're going

00:04:28.581 --> 00:04:30.982
to call spreadsheets.values.get
and pull out

00:04:30.982 --> 00:04:33.440
all the values that we wrote
in, and then we print that out

00:04:33.440 --> 00:04:34.340
to the user.

00:04:34.340 --> 00:04:37.040
All right, now let's go to the
command line and try it out.

00:04:37.040 --> 00:04:39.220
But before we do that,
let's double check what

00:04:39.220 --> 00:04:41.670
is in the database.

00:04:41.670 --> 00:04:43.860
See the schema, you
can confirm that,

00:04:43.860 --> 00:04:47.410
and then we can see
what rows we have.

00:04:47.410 --> 00:04:48.910
All right, so we have five rows.

00:04:48.910 --> 00:04:51.545
These are the same five rows
that should go into the sheet

00:04:51.545 --> 00:04:53.420
when we run our Python
script, and that we're

00:04:53.420 --> 00:04:55.570
going to dump out on the
command line because of print

00:04:55.570 --> 00:04:56.070
statements.

00:04:56.070 --> 00:04:57.790
So there's multiple
ways of confirming

00:04:57.790 --> 00:04:59.190
that it read the right data.

00:04:59.190 --> 00:05:00.330
Now let's run the script.

00:05:00.330 --> 00:05:02.500
You can run this script
in Python 3 or Python 2,

00:05:02.500 --> 00:05:03.250
it doesn't matter.

00:05:03.250 --> 00:05:05.110
The code that we wrote
is compatible with both.

00:05:05.110 --> 00:05:06.485
So the first thing
you should see

00:05:06.485 --> 00:05:11.740
when you run the script
is OAuth, and what happens

00:05:11.740 --> 00:05:13.349
is your browser
window will pop up

00:05:13.349 --> 00:05:15.390
saying that this script
would like to have access

00:05:15.390 --> 00:05:17.598
to view and manage your
spreadsheets in Google Drive,

00:05:17.598 --> 00:05:19.180
which we want, so click Allow.

00:05:19.180 --> 00:05:21.670
And then down below, you'll
see the output of the code,

00:05:21.670 --> 00:05:23.410
because it runs pretty fast.

00:05:23.410 --> 00:05:25.460
All right, so it created
the spreadsheet here,

00:05:25.460 --> 00:05:28.540
and then wrote this data,
which we read in down here.

00:05:28.540 --> 00:05:31.060
Now, that's great that we
can see the output of what's

00:05:31.060 --> 00:05:32.670
supposed to be in our sheet.

00:05:32.670 --> 00:05:34.420
But how do we really
know we have a sheet

00:05:34.420 --> 00:05:36.300
and this isn't just
some fake demo?

00:05:36.300 --> 00:05:38.910
Well, there's no better place
to check than your Google Drive

00:05:38.910 --> 00:05:42.860
and see that you really did
create a new sheet right here.

00:05:42.860 --> 00:05:46.010
So double-click it, and
look, it's the same data.

00:05:46.010 --> 00:05:48.990
And if we close this
and our OAuth window

00:05:48.990 --> 00:05:53.420
and run the same script
again, and boom, another one.

00:05:53.420 --> 00:05:56.830
And if you click on that,
it's got the same data, too.

00:05:56.830 --> 00:05:57.630
So one last thing.

00:05:57.630 --> 00:05:59.850
You may be wondering why we
had to create a blank sheet,

00:05:59.850 --> 00:06:01.870
read the data from the
database, and then call update

00:06:01.870 --> 00:06:04.540
to throw the values in there,
and wondering if it's possible

00:06:04.540 --> 00:06:06.490
whether or not we can do all
of that with just the call

00:06:06.490 --> 00:06:07.039
to create.

00:06:07.039 --> 00:06:09.580
And the answer is yes, but it's
a little bit more complicated

00:06:09.580 --> 00:06:11.410
than that, because
when you use create,

00:06:11.410 --> 00:06:13.850
you have to pass in
the JSON structure

00:06:13.850 --> 00:06:17.120
for every single cell instead of
being able to provide basically

00:06:17.120 --> 00:06:18.970
a list of lists
of just the data.

00:06:18.970 --> 00:06:21.650
So the best practice is
to use the values update

00:06:21.650 --> 00:06:22.770
method instead.

00:06:22.770 --> 00:06:25.530
So congratulations, you just
wrote your very first script

00:06:25.530 --> 00:06:28.340
using the Google Sheets API.

00:06:28.340 --> 00:06:29.340
So that's it.

00:06:29.340 --> 00:06:30.910
You now know how
to use the new API

00:06:30.910 --> 00:06:33.140
to get data into and
out of a Google sheet

00:06:33.140 --> 00:06:35.344
with not too many lines of code.

00:06:35.344 --> 00:06:36.760
Look for an upcoming
episode where

00:06:36.760 --> 00:06:40.490
we format sheets created
by today's script.

00:06:40.490 --> 00:06:42.840
Check out the official docs
you see at the first link.

00:06:42.840 --> 00:06:45.490
There, you'll find everything
you need to get started.

00:06:45.490 --> 00:06:47.010
I'd also recommend
the samples page

00:06:47.010 --> 00:06:48.920
to get a better idea of
the common operations

00:06:48.920 --> 00:06:50.700
in the corresponding
JSON payloads you

00:06:50.700 --> 00:06:52.320
need to send to the API.

00:06:52.320 --> 00:06:54.120
Finally, the links
down at the bottom

00:06:54.120 --> 00:06:55.930
will get you to more
developer videos

00:06:55.930 --> 00:06:58.104
in this and other series.

00:06:58.104 --> 00:06:59.520
The Google Sheets
engineering team

00:06:59.520 --> 00:07:02.237
is proud to introduce
their next generation API.

00:07:02.237 --> 00:07:04.320
Now it's your chance to
build new apps you weren't

00:07:04.320 --> 00:07:07.200
able to do before, plus update
those existing apps to take

00:07:07.200 --> 00:07:09.025
advantage of all
the new features.

00:07:09.025 --> 00:07:11.400
Be sure to let us know how it
goes in the comments below.

00:07:11.400 --> 00:07:13.430
And don't forget to
subscribe to our channel.

00:07:13.430 --> 00:07:15.180
This is Wesley Chun
from Google, and we'll

00:07:15.180 --> 00:07:18.460
see you the next time
on the Launchpad Online.

