WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.000
For this question, you're asked to define two procedures.

00:00:04.000 --> 00:00:12.000
The first one takes a match as its inputs along with a replacement,

00:00:12.000 --> 00:00:17.000
and it outputs some sort of structure, which you'll be able to use.

00:00:17.000 --> 00:00:23.000
In the second procedure, apply converter, which will change a string according

00:00:23.000 --> 00:00:26.000
to the match and replacement.

00:00:26.000 --> 00:00:28.000
I'll just do an example.

00:00:28.000 --> 00:00:37.000
aaabaa--if this is our match and replacement, the aba will be replaced with b.

00:00:37.000 --> 00:00:42.000
The next string we'll have will be aaba.

00:00:42.000 --> 00:00:46.000
Then we've got aba again, so we'll replace that with b.

00:00:46.000 --> 00:00:50.000
There are no more matches, so we stop.

00:00:50.000 --> 00:00:56.000
You can see at each step it's changed, and when we change it no more, we stop.

00:00:56.000 --> 00:00:58.000
What our code is going to do is continue.

00:00:58.000 --> 00:01:03.000
As long as we've made a replacement at the previous step, we'll do a step again.

00:01:03.000 --> 00:01:07.000
If we haven't made a replacement, then we'll stop.

00:01:07.000 --> 00:01:09.000
On to the code.

00:01:09.000 --> 00:01:11.000
What structure do I want?

00:01:11.000 --> 00:01:17.000
Well, I'm simply going to make a list where the first entry in the list is the match,

00:01:17.000 --> 00:01:20.000
and the second entry is the replacement.

00:01:20.000 --> 00:01:26.000
Apply_converter has as its input a converter which we made in make_converter.

00:01:26.000 --> 00:01:31.000
That's a list, and the string that we want to change.

00:01:31.000 --> 00:01:37.000
I said that I was going to continue changing the string as long as the string

00:01:37.000 --> 00:01:40.000
was not the same as it was before.

00:01:40.000 --> 00:01:44.000
We're going to have to keep track of the previous string.

00:01:44.000 --> 00:01:47.000
At the start there isn't a previous string.

00:01:47.000 --> 00:01:54.000
While previous is not the same as the current string, I want to carry on with the loop.

00:01:54.000 --> 00:01:59.000
As soon as I enter the loop, I want previous to be equal to string,

00:01:59.000 --> 00:02:02.000
and then I want to look for the match in the string.

00:02:02.000 --> 00:02:07.000
The position of the math we can find using find,

00:02:07.000 --> 00:02:11.000
and we're looking for the first word in the converter.

00:02:11.000 --> 00:02:18.000
If we find it, then we're going to replace our string with a new string,

00:02:18.000 --> 00:02:24.000
which is the first part of the string up to the position, not excluding it--

00:02:24.000 --> 00:02:27.000
the start position of our match.

00:02:27.000 --> 00:02:34.000
We replace that with the replacement, and finally we want to concatenate

00:02:34.000 --> 00:02:37.000
the part of the string after the match.

00:02:37.000 --> 00:02:41.000
We find it's position by starting at the beginning of the match

00:02:41.000 --> 00:02:45.000
and adding on the length of the match.

00:02:45.000 --> 00:02:48.000
Then taking that to the end of the string.

00:02:48.000 --> 00:02:52.000
As long as we've made a change, the loop continues.

00:02:52.000 --> 00:02:59.000
If we haven't made a change, the loop ends, and we return the string.

