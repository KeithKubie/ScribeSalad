WEBVTT
Kind: captions
Language: en

00:00:00.550 --> 00:00:03.330
The second issue is versioning, which can be tricky.

00:00:03.330 --> 00:00:05.610
As new versions of the components are released,

00:00:05.610 --> 00:00:08.800
backward compatibility becomes a problem.

00:00:08.800 --> 00:00:11.960
If you are a component vendor, you need to keep your customers up to date with

00:00:11.960 --> 00:00:15.970
changing standards, new programming language releases, and enhanced features.

00:00:15.970 --> 00:00:17.070
The question then becomes,

00:00:17.070 --> 00:00:20.640
to what extent should you remain compatible with previous versions?

00:00:20.640 --> 00:00:22.760
Think of the issue from the customer's point of view.

00:00:22.760 --> 00:00:23.800
They have a working product.

00:00:23.800 --> 00:00:28.000
It will cost them time and energy to upgrade to a new version of your component,

00:00:28.000 --> 00:00:31.440
and there's a risk of breaking their system if they do so.

00:00:31.440 --> 00:00:33.480
If they don't need the new feature that you are offering,

00:00:33.480 --> 00:00:35.500
they're going to be reluctant to upgrade.

00:00:35.500 --> 00:00:38.890
&gt;From your point of view, however, this may mean you've got to maintain and

00:00:38.890 --> 00:00:42.946
support a long history of previous versions at additional expense.

00:00:42.946 --> 00:00:45.870
Moreover, if there are multiple components involved,

00:00:45.870 --> 00:00:46.950
each with their own versions,

00:00:46.950 --> 00:00:50.110
you have an explosion in the number of combinations you have to support.

00:00:50.110 --> 00:00:51.150
What's a poor vendor to do?

