WEBVTT
Kind: captions
Language: en

00:00:08.850 --> 00:00:18.450
 Hi android db deployment program engine is in favor of ng today 

00:00:13.680 --> 00:00:21.840
 I'm going to talk to you on the inside of this new cortex especially. 

00:00:18.450 --> 00:00:22.700
 WebView in the Android 4.4 kit is based on Crumann 

00:00:21.840 --> 00:00:28.770
 Implemented 

00:00:22.700 --> 00:00:32.160
 The latest html5 css3 javascript standard technology even better support and performance 

00:00:28.770 --> 00:00:36.150
 There have been many improvements in terms of 

00:00:32.160 --> 00:00:38.790
 There have been a lot of changes in the internal implementation, but basically, 

00:00:36.150 --> 00:00:42.900
 You can use the same way to see 

00:00:38.790 --> 00:00:46.550
 However, there are some caveats and additional features that are 

00:00:42.900 --> 00:00:46.550
 I'll explain about it today. 

00:00:46.560 --> 00:00:51.600
 The first thing to note when using Web View in a multithreaded environment 

00:00:50.340 --> 00:00:55.830
 I'll tell you. 

00:00:51.600 --> 00:01:00.480
 There are two oldest adjectives about relief associated with threads: 

00:00:55.830 --> 00:01:02.790
 First, Android ui should end up with this dew first. Second ui 

00:01:00.480 --> 00:01:06.490
 Do not burn the thread 

00:01:02.790 --> 00:01:10.659
 There is no exception when using web b 

00:01:06.490 --> 00:01:12.610
 It is a simple code that starts a background thread and displays it in a thread 

00:01:10.659 --> 00:01:17.799
 The code that loaded the page 

00:01:12.610 --> 00:01:22.210
 Is this code correct? As in the case of other views, 

00:01:17.799 --> 00:01:25.360
 Work on WebView should always be done a lot for ui 

00:01:22.210 --> 00:01:30.430
 But before Kikeri, this type of code has been allowed. 

00:01:25.360 --> 00:01:34.509
 This code will not work from version 4.4 until now. 

00:01:30.430 --> 00:01:38.649
 Starting with Android 4.4, you will not be able to 

00:01:34.509 --> 00:01:43.479
 Using the ui thread method or the assertion task, 

00:01:38.649 --> 00:01:47.440
 Work must be modified to be performed on ui liquor 

00:01:43.479 --> 00:01:51.670
 Another principle is to call the ui thread and not be evil 

00:01:47.440 --> 00:01:55.179
 At the end of the development of the Web is not clear Javascript function call 

00:01:51.670 --> 00:01:57.159
 To wait for results, use men's slips or weights to 

00:01:55.179 --> 00:02:02.409
 There are occasions when there is a bulakan. 

00:01:57.159 --> 00:02:06.429
 It's not a bad way to catch JavaScript code in the background instead 

00:02:02.409 --> 00:02:07.810
 A method that starts with a thread and easily receives the result 

00:02:06.429 --> 00:02:11.680
 Added 

00:02:07.810 --> 00:02:16.209
 This is the first argument of having Value Eto 

00:02:11.680 --> 00:02:18.130
 Pass the JavaScript code you want to execute and get the result as the second argument 

00:02:16.209 --> 00:02:23.459
 Register a callback function for 

00:02:18.130 --> 00:02:23.459
 If you do not need to receive the result value, you can use the value of the intermediate transition null 

00:02:23.680 --> 00:02:29.409
 Next, we need to make some changes 

00:02:27.640 --> 00:02:33.069
 It is 

00:02:29.409 --> 00:02:37.989
 Be sure to use custom u below Android 4.4 

00:02:33.069 --> 00:02:38.799
 Below 2c 3986 you should use the characters of u u 

00:02:37.989 --> 00:02:42.790
 I will 

00:02:38.799 --> 00:02:46.120
 If not, why do not you expect your developers to click on the link 

00:02:42.790 --> 00:02:47.049
 Dali pseudo override url loading callback method may not be called 

00:02:46.120 --> 00:02:51.549
 There is 

00:02:47.049 --> 00:02:52.840
 For example, using a problem that is not valid, such as a show profile, 

00:02:51.549 --> 00:02:56.590
 Use it as a bow 

00:02:52.840 --> 00:03:00.700
 Using the load or load data base url method, 

00:02:56.590 --> 00:03:04.810
 When loading an html document Reason 1 Base 2 Unless specified 

00:03:00.700 --> 00:03:08.889
 Putting an anecdote on a shoot-over is not cool - it will not be called at all 

00:03:04.810 --> 00:03:13.209
 If the face exists below, the simple string combined with the base infant 

00:03:08.889 --> 00:03:14.680
 Helpful infants of the absolute path format are affected by the crack method after being changed to Problem 1 4 

00:03:13.209 --> 00:03:18.720
 The result value is passed 

00:03:14.680 --> 00:03:23.560
 So when you use customization to handle app events, 

00:03:18.720 --> 00:03:25.780
 Always use a valid URL, such as a unique schema, for example, on the slide 

00:03:23.560 --> 00:03:30.549
 Please use letters 

00:03:25.780 --> 00:03:34.269
 After that, in the actual callback function, the string is given preference in February 

00:03:30.549 --> 00:03:38.669
 Based on the self-organized schema and the quality of the attracting data and the remaining data 

00:03:34.269 --> 00:03:38.669
 You can do the same as before 

00:03:38.690 --> 00:03:46.190
 Finally, we introduce the remote debugging function. 

00:03:41.600 --> 00:03:48.640
 It can be debugged easily and remotely from WebView as the web is transformed based on 

00:03:46.190 --> 00:03:52.600
 It was 

00:03:48.640 --> 00:03:54.670
 The remote debugging setup is based on the premise that it is installed in the Android development environment. 

00:03:52.600 --> 00:03:58.120
 A brief introduction to the method 

00:03:54.670 --> 00:04:01.420
 First you need to install the Chrome browser 0 add extension 

00:03:58.120 --> 00:04:06.430
 You can download it from the slide a url or you can download it from the Chrome Web Store. 

00:04:01.420 --> 00:04:10.270
 You can easily find it by searching adb. 

00:04:06.430 --> 00:04:13.930
 Next, you need to enable debugging on the app side 

00:04:10.270 --> 00:04:14.770
 Web Python 3 web content Debugging within a call to a trio of fire methods 

00:04:13.930 --> 00:04:17.980
 It's possible 

00:04:14.770 --> 00:04:21.549
 In fact, this method only after the Android keycap version 

00:04:17.980 --> 00:04:22.419
 You need to implement this method only to call the method because it is supported 

00:04:21.549 --> 00:04:27.100
 There is 

00:04:22.419 --> 00:04:31.150
 Also, in the market-launch version, 

00:04:27.100 --> 00:04:37.310
 To avoid this problem, you can use the mug constant value 

00:04:31.150 --> 00:04:40.999
 It's also a good idea to match your debugging path settings to your web debugging settings 

00:04:37.310 --> 00:04:45.889
 Now it is actually a step to experiment with remote debugging # 

00:04:40.999 --> 00:04:49.939
 Then select the View Inspection target item from the menu of the ad plugin 

00:04:45.889 --> 00:04:51.469
 A list of connected devices and the debugable webviews running on each device 

00:04:49.939 --> 00:04:54.860
 A list is displayed 

00:04:51.469 --> 00:04:59.210
 Information about where each webview is located on the screen 

00:04:54.860 --> 00:05:02.060
 Please note that why you choose p for debugging and vi vi pen 

00:04:59.210 --> 00:05:06.710
 Click on the Spectro button 

00:05:02.060 --> 00:05:09.860
 Then, just like desktop development on the web, 

00:05:06.710 --> 00:05:14.270
 You can relinquish WebView without using tools 

00:05:09.860 --> 00:05:18.590
 It's a really handy tool for developers. For example, 

00:05:14.270 --> 00:05:21.759
 When you select a specific html element, the corresponding 

00:05:18.590 --> 00:05:21.759
 The item will be highlighted 

00:05:21.760 --> 00:05:28.570
 So far, I have briefly explained the chrome ear map. 

00:05:25.150 --> 00:05:30.100
 So, for more information on Mapfy, visit the Android Developer site. 

00:05:28.570 --> 00:05:34.120
 You can browse 

00:05:30.100 --> 00:05:37.600
 Especially for those developers who have been using the existing envelope, 

00:05:34.120 --> 00:05:40.740
 There is a Migration Guide document available. 

00:05:37.600 --> 00:05:40.740
 Thank you. 

