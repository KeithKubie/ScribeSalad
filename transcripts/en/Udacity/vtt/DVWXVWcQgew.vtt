WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:06.000
The idea is to use this trace-it function to build your own interactive debugger.

00:00:06.000 --> 00:00:13.000
We're going to call this my spyder for my simple Python debugger

00:00:13.000 --> 00:00:18.000
with the idea of a spider being something that catches all the bugs.

00:00:18.000 --> 00:00:22.000
My spyder is a super simple debugger as it says in the name.

00:00:22.000 --> 00:00:27.000
My spyder is a command line debugger, so it prompts you to enter a command

00:00:27.000 --> 00:00:31.000
and the command can be something like break in line 70.

00:00:31.000 --> 00:00:36.000
Run the program and when it reaches line 70, it stops and as it has stopped,

00:00:36.000 --> 00:00:42.000
we can print individual variables--for instance, an x and x saying has a value of 42.

00:00:42.000 --> 00:00:48.000
How do we do that? We need the number of variables that controls how the debugger works.

00:00:48.000 --> 00:00:53.000
First, a variable name stepping which tells us whether we are

00:00:53.000 --> 00:00:58.000
stepping line by line through the program or whether we're just running the program.

00:00:58.000 --> 00:01:02.000
We also have a list of breakpoints, actually it's a mapping

00:01:02.000 --> 00:01:11.000
of individual line numbers to arbitrary values, but if this mapping say has an entry for the number 7,

00:01:11.000 --> 00:01:17.000
this means that whenever the debugger reaches line 7, then execution should stop.

00:01:17.000 --> 00:01:23.000
For our current setting, we'll make a lot simple. We'll have a number of predefined breakpoints.

00:01:23.000 --> 00:01:29.000
We will have for instance a breakpoint in line 9, and possibly another one in line 14.

00:01:29.000 --> 00:01:36.000
Our trace-it function is being called for every single line and of course we want our debugger to stop

00:01:36.000 --> 00:01:42.000
whenever either a breakpoint is reached or when we're stepping from one line to the next.

00:01:42.000 --> 00:01:46.000
We want to access these global variables, so we need to declare them accordingly.

00:01:46.000 --> 00:01:50.000
If the event is that we reached a new line, we check if we're stepping

00:01:50.000 --> 00:01:55.000
or if our breakpoints dictionary has a value for the current line

00:01:55.000 --> 00:01:59.000
and if this actually is the case, we print out a proper diagnostic information

00:01:59.000 --> 00:02:03.000
which may be helpful for the debugger--what has happened, where we currently are,

00:02:03.000 --> 00:02:05.000
the functions that executed as well as the local variables.

