WEBVTT
Kind: captions
Language: en

00:00:04.110 --> 00:00:07.440
So there are days when I'll be checking out some awesome Android app, when I run into an

00:00:07.440 --> 00:00:09.949
anti-pattern that's pure anti-Android and which 

00:00:09.949 --> 00:00:16.949
totally destroys the magic, and I'm all like:

00:00:18.619 --> 00:00:22.499
Well, my team are sick of me making a mess of their workspace, so I'm channeling my energy

00:00:22.499 --> 00:00:25.839
into something more productive. Welcome:

00:00:25.839 --> 00:00:28.059
To Tableflip.

00:00:28.059 --> 00:00:31.619
Today I'm returning to the topic of one of my earliest Android UX rants:

00:00:31.619 --> 00:00:33.840
"exit" menu items.

00:00:33.840 --> 00:00:37.400
Back in the days before time began when humans typed into terminal prompts

00:00:37.400 --> 00:00:40.899
while huddled in dark caves, Googling Wikipedia for fire;

00:00:40.899 --> 00:00:46.010
single-tasking operating systems like MS-DOS allowed us to run one app at a time.

00:00:46.010 --> 00:00:50.170
"Exit" was unambiguous. A necessity for leaving one app and starting another.

00:00:50.170 --> 00:00:52.559
The instruction itself had semantic meaning.

00:00:52.559 --> 00:00:56.890
"Exit" mapped to the C function Exit(), which terminated the calling process.

00:00:56.890 --> 00:01:00.170
As we crawled from our hidden caves hunting the last of the Woolly Mammoth

00:01:00.170 --> 00:01:03.080
multi-tasking operating systems like Windows enabled us to run multiple

00:01:03.080 --> 00:01:04.650
programs at once

00:01:04.650 --> 00:01:07.170
each represented by its own window.

00:01:07.170 --> 00:01:11.180
As before, our exit menu-item is used to call exit(), to terminate the process, and

00:01:11.180 --> 00:01:14.660
allow us to reclaim the resources used by the task window.

00:01:14.660 --> 00:01:18.170
Having grown fat and complacent within multi-tasking Operating Systems gorging

00:01:18.170 --> 00:01:22.340
on a glut of RAM and CPU resources provided by Moore's Law, smartphones

00:01:22.340 --> 00:01:24.410
introduced a new challenge.

00:01:24.410 --> 00:01:27.820
How do we create a responsive multi-tasking operating system with a fraction of the

00:01:27.820 --> 00:01:28.980
resources?

00:01:28.980 --> 00:01:32.830
Unlike windowed operating systems, smart phones generally present apps full-screen

00:01:32.830 --> 00:01:36.240
and one at a time -- so it's easy to establish a relative priority

00:01:36.240 --> 00:01:38.410
between applications

00:01:38.410 --> 00:01:42.150
following Android's Three Laws of Robotics.

00:01:42.150 --> 00:01:43.899
One. Whichever App is in the foreground

00:01:43.899 --> 00:01:45.930
must have the resources it needs to run

00:01:45.930 --> 00:01:48.990
and run responsively.

00:01:48.990 --> 00:01:51.070
Two. Any application with a visible activity

00:01:51.070 --> 00:01:54.939
or a running Service, should be allowed to run, except when doing so would be in

00:01:54.939 --> 00:01:57.190
violation of the first law.

00:01:57.190 --> 00:01:58.270
And three.

00:01:58.270 --> 00:02:01.930
Any application without a visible Activity or a running service should be kept in

00:02:01.930 --> 00:02:04.040
memory to reduce startup latency

00:02:04.040 --> 00:02:07.250
except when doing so would be in violation of the first and second

00:02:07.250 --> 00:02:09.289
laws.

00:02:09.289 --> 00:02:13.209
Much as Asimov's three laws were build into all positronic brains

00:02:13.209 --> 00:02:16.819
so to have Android's laws been baked into the platform.

00:02:16.819 --> 00:02:19.149
This has three implications for app design.

00:02:19.149 --> 00:02:22.180
Firstly, knowing the OS can terminate your app's process without

00:02:22.180 --> 00:02:23.610
warning at any time

00:02:23.610 --> 00:02:27.080
you can't rely on having an onExit() handler that will be called when your app is

00:02:27.080 --> 00:02:28.089
closed.

00:02:28.089 --> 00:02:30.060
Instead, your Activities should listen for

00:02:30.060 --> 00:02:31.489
onPause handlers that

00:02:31.489 --> 00:02:33.969
indicate your app is no longer active.

00:02:33.969 --> 00:02:37.579
At this point is may be terminated at any time, so it should save any user

00:02:37.579 --> 00:02:40.049
data to prevent potential data loss.

00:02:40.049 --> 00:02:41.739
When your Activity is no longer visible

00:02:41.739 --> 00:02:43.889
it'll receive an onStop handler.

00:02:43.889 --> 00:02:47.629
A good app will treat this handler as the equivalent of an onExit() handler, reducing its

00:02:47.629 --> 00:02:50.049
resource usage as much as possible.

00:02:50.049 --> 00:02:53.479
We already know that background apps are low priority, so they should consume the

00:02:53.479 --> 00:02:55.889
absolute minimum in terms of resources

00:02:55.889 --> 00:02:58.379
even without the system having to
terminate them.

00:02:58.379 --> 00:03:01.559
Doing so will increase the chances of your app remaining running, thereby

00:03:01.559 --> 00:03:05.099
decreasing startup time and improving responsiveness.

00:03:05.099 --> 00:03:08.859
So thanks to the three laws, your app doesn't need an exit button, but what's the harm 

00:03:08.859 --> 00:03:10.169
in having one anyway? 

00:03:10.169 --> 00:03:13.839
Why do these seemingly insignificant UI elements fill me with a dark and fire-ey

00:03:13.839 --> 00:03:17.299
rage that burns as intensely as the heart of a neutron star?

00:03:17.299 --> 00:03:18.859
Where does that anger go?

00:03:18.859 --> 00:03:22.469
Well, I bottle up my emotions into a dark fist of psychic hate that I can

00:03:22.469 --> 00:03:24.759
harness and unleash on unwary foes.

00:03:24.759 --> 00:03:27.829
And an "Exit" Menu Item in Android has no system-wide

00:03:27.829 --> 00:03:29.189
semantic meaning.

00:03:29.189 --> 00:03:32.779
so including one in your app introduces ambiguity.

00:03:32.779 --> 00:03:37.009
Consider the Google apps that typically ship with most Android devices. Imagine if Gmail

00:03:37.009 --> 00:03:40.010
gallery, or the Contacts apps had exit buttons.

00:03:40.010 --> 00:03:42.089
What would you expect them to do?

00:03:42.089 --> 00:03:45.419
Chances are you've never looked for an exit button in these apps, and have never been

00:03:45.419 --> 00:03:47.909
disappointed that it's not there.

00:03:47.909 --> 00:03:49.510
If you build an application that properly

00:03:49.510 --> 00:03:53.019
handles its state transitions: Is predictable, configurable, and

00:03:53.019 --> 00:03:54.080
unambiguous

00:03:54.080 --> 00:03:56.419
your users won't ask for an exit button.

00:03:56.419 --> 00:04:00.559
But what about apps like Music, Navigation, and Banking -- whose background behavior

00:04:00.559 --> 00:04:03.359
demand stronger user messages?

00:04:03.359 --> 00:04:07.549
For them we need an explicit exit button, but fortunately that's exactly what the "back"

00:04:07.549 --> 00:04:10.069
button does on Android.

00:04:10.069 --> 00:04:11.409
When a user presses "Back"

00:04:11.409 --> 00:04:14.819
the Activity calls finish() -- explicitly destroying the Activity and freeing its

00:04:14.819 --> 00:04:18.659
resources, making it a functional equivalent to the exit() button in days of

00:04:18.659 --> 00:04:19.779
yore.

00:04:19.779 --> 00:04:22.960
For most apps, it makes little difference if the user is exiting explicitly or

00:04:22.960 --> 00:04:24.490
switching to another app

00:04:24.490 --> 00:04:27.740
but in some cases this additional signal can be useful.

00:04:27.740 --> 00:04:31.080
Apps like a movie or music players don't need this signal as they already show their

00:04:31.080 --> 00:04:34.400
users semantic controls to determine ongoing behavior.

00:04:34.400 --> 00:04:38.990
A music player, for example, should keep rocking out until you pause playback.

00:04:38.990 --> 00:04:42.259
Turn-by-turn navigation though, has no simple cues.

00:04:42.259 --> 00:04:45.460
In this rare example it can be useful to interpret a back button press as an

00:04:45.460 --> 00:04:48.680
explicit request to "end all route guidance".

00:04:48.680 --> 00:04:52.069
Some apps -- such as instant messaging, banking, or remote terminal sessions

00:04:52.069 --> 00:04:54.620
may need a way to terminate the current session.

00:04:54.620 --> 00:04:58.389
whether it be for security or resources
usage reasons

00:04:58.389 --> 00:05:01.919
Rather than using the semantically ambiguous "exit" menu item,

00:05:01.919 --> 00:05:04.990
it's better practice to include a menu item that describes exactly what will

00:05:04.990 --> 00:05:05.869
happen

00:05:05.869 --> 00:05:09.580
such as "logout" / "signout" or similar descriptive actions.

00:05:09.580 --> 00:05:12.690
For users who want to take the proverbial shotgun to the head of zombie background

00:05:12.690 --> 00:05:13.529
apps

00:05:13.529 --> 00:05:15.979
they can force stop a process from the apps setting

00:05:15.979 --> 00:05:19.240
as well as swiping to remove apps from the application switcher on newer Android

00:05:19.240 --> 00:05:21.020
platform releases.

00:05:21.020 --> 00:05:24.430
I'm nearly done, but I can already hear the fevered tapping of fingers on keyboards

00:05:24.430 --> 00:05:27.900
as some of you prepare your own retaliatory rants, railing against the

00:05:27.900 --> 00:05:28.879
arrogance

00:05:28.879 --> 00:05:30.400
at the presumption of knowing

00:05:30.400 --> 00:05:33.470
what uses want better than themselves.

00:05:33.470 --> 00:05:35.210
I know, from having been told, that yes

00:05:35.210 --> 00:05:39.389
many app developers will still receive requests to add an exit button to their apps

00:05:39.389 --> 00:05:43.099
generally so users can unambiguously prevent the app from consuming any further

00:05:43.099 --> 00:05:44.569
resources.

00:05:44.569 --> 00:05:47.819
I understand the perspective, but expecting that the developer of an app

00:05:47.819 --> 00:05:50.319
which doesn't properly manage its resources

00:05:50.319 --> 00:05:53.039
to manage them correctly simply by adding an "exit" menu item

00:05:53.039 --> 00:05:56.949
introduces a certain level of cognitive
dissonance.

00:05:56.949 --> 00:06:00.499
If a developer can't manage their resources effectively without an exit button

00:06:00.499 --> 00:06:03.659
at reason do you have to believe they will handle their resources more

00:06:03.659 --> 00:06:04.539
effectively

00:06:04.539 --> 00:06:06.349
just because they include one?

00:06:06.349 --> 00:06:09.430
If your users are still asking for an exit button, it's generally because they

00:06:09.430 --> 00:06:12.669
believe your app is consuming resources when it shouldn't be.

00:06:12.669 --> 00:06:15.599
Adding an exit button may give them a temporary feeling of hope

00:06:15.599 --> 00:06:19.159
but it will quickly be extinguished in the swamp of tears and recrimination when the

00:06:19.159 --> 00:06:22.789
ambiguity of their new exit option becomes apparent.

00:06:22.789 --> 00:06:25.849
What should happen to Services when a user hits exit? What about Intent

00:06:25.849 --> 00:06:30.139
Receivers? Widgets? Should you stop listening for GCM messages?

00:06:30.139 --> 00:06:33.479
Different users will have difference expectations and satisfying some will

00:06:33.479 --> 00:06:34.999
frustrate others.

00:06:34.999 --> 00:06:38.499
The best solution is to obviate their perceived need for an exit button

00:06:38.499 --> 00:06:41.449
 by following these simple steps.

00:06:41.449 --> 00:06:45.749
Start by freeing resources, stopping services, disabling sensor listeners and

00:06:45.749 --> 00:06:50.060
turning off location requests, and otherwise disabling anything that consumes resources.

00:06:50.060 --> 00:06:53.349
all within the onPause handler of your Activities. 

00:06:53.349 --> 00:06:56.629
Take this a step further by avoiding singletons and custom Application

00:06:56.629 --> 00:06:59.319
objects within your application whenever possible.

00:06:59.319 --> 00:07:01.360
If your resources are tied to your Activity

00:07:01.360 --> 00:07:03.370
they'll be freed if the user hits the back button

00:07:03.370 --> 00:07:07.849
rather than having to wait until the application process is terminated.

00:07:07.849 --> 00:07:10.639
Another culprit for resource consumption is an app that sets alarms

00:07:10.639 --> 00:07:13.889
to wake the device and poll for updates on a regular basis.

00:07:13.889 --> 00:07:17.879
You can improve your apps battery-drain profile by making these alarms inexact

00:07:17.879 --> 00:07:22.039
and allowing the user to specify the frequency of background updates.

00:07:22.039 --> 00:07:24.769
But every time you ping your server when there was nothing to update you're not only

00:07:24.769 --> 00:07:27.909
draining the battery from the device being on, you're also draining battery

00:07:27.909 --> 00:07:30.749
by turning on the cell radio for no good reason.

00:07:30.749 --> 00:07:34.339
Google Cloud Messaging lets you eliminate polling so you

00:07:34.339 --> 00:07:36.699
only ping your server when you you have information

00:07:36.699 --> 00:07:38.789
worth downloading

00:07:38.789 --> 00:07:40.599
If your app does require

00:07:40.599 --> 00:07:44.180
a way of "signing out" or "logging off" create an explicit

00:07:44.180 --> 00:07:47.729
semantically meaningful, way of doing so rather than relying on an ambiguous

00:07:47.729 --> 00:07:50.139
legacy "exit" command.

00:07:50.139 --> 00:07:53.340
Music apps are the most common example of an app that should continue running at a high

00:07:53.340 --> 00:07:54.199
priority

00:07:54.199 --> 00:07:56.509
even when there is no activity visible.

00:07:56.509 --> 00:07:59.800
However, when no music is playing, the app is no different to any other

00:07:59.800 --> 00:08:01.029
background app.

00:08:01.029 --> 00:08:03.399
When it is playing, make sure it's easy to stop.

00:08:03.399 --> 00:08:07.560
Rich notifications and widgets should provide easy shortcuts to stop playback

00:08:07.560 --> 00:08:11.349
at which point you should free resources in the same way as typical apps

00:08:11.349 --> 00:08:14.599
within their onPause handlers.

00:08:14.599 --> 00:08:17.750
Finally, the Android OS provides a number of cues of significant system

00:08:17.750 --> 00:08:20.499
events -- including low battery and low memory.

00:08:20.499 --> 00:08:24.330
Listen for these intents and modify the resource use profile

00:08:24.330 --> 00:08:27.089
of your app accordingly. 

00:08:27.089 --> 00:08:31.259
Users only ask you to include an exit button if they blame your app for consuming memory

00:08:31.259 --> 00:08:35.060
draining the battery, or otherwise deteriorating their overall experience.

00:08:35.060 --> 00:08:38.269
Rather than implementing a menu item that won't solve their underlying problem

00:08:38.269 --> 00:08:41.920
spend your time making your app more efficient.

00:08:41.920 --> 00:08:43.230
My name is Reto Meier

00:08:43.230 --> 00:08:43.870
and this was Table Flip.

