WEBVTT
Kind: captions
Language: en

00:00:00.320 --> 00:00:01.820
EIJI KITAMURA: Web
Components enable

00:00:01.820 --> 00:00:04.050
you to build great
websites through the use

00:00:04.050 --> 00:00:06.450
of reusable components.

00:00:06.450 --> 00:00:09.840
But what does it take to
build a web component?

00:00:09.840 --> 00:00:11.900
My name is Eiji,
and today I'm going

00:00:11.900 --> 00:00:16.309
to give you an overview
of Custom Elements.

00:00:16.309 --> 00:00:18.160
Custom Elements
are a key feature

00:00:18.160 --> 00:00:22.840
in Web Components that lets
you create your own HTML tags.

00:00:22.840 --> 00:00:26.490
Given the original purpose of
HTML tags as a script language

00:00:26.490 --> 00:00:29.420
for documents, it has
a limited vocabulary

00:00:29.420 --> 00:00:31.990
for elements, which
means we end up

00:00:31.990 --> 00:00:36.750
relying on divs and existing
markup to structure pages.

00:00:36.750 --> 00:00:40.200
Custom Elements
will change that.

00:00:40.200 --> 00:00:42.630
Some frameworks,
such as AngularJS,

00:00:42.630 --> 00:00:45.525
provides a way to
define your own tags.

00:00:45.525 --> 00:00:50.490
But, they are specific to the
framework, and not reusable.

00:00:50.490 --> 00:00:53.360
With Custom Elements, you
can define and register

00:00:53.360 --> 00:00:57.110
new Dom elements, as well
as inherit and extend

00:00:57.110 --> 00:00:59.990
existing DOM elements.

00:00:59.990 --> 00:01:03.450
These differences make Custom
Elements easier to handle,

00:01:03.450 --> 00:01:05.700
not only for element
authors, but also

00:01:05.700 --> 00:01:09.240
for developers who use them.

00:01:09.240 --> 00:01:11.720
At the time of this
recording, Custom Elements

00:01:11.720 --> 00:01:14.270
have landed in Chrome and Opera.

00:01:14.270 --> 00:01:17.940
Firefox supports it
innately behind a flag.

00:01:17.940 --> 00:01:20.560
But support for Web
Components is changing weekly,

00:01:20.560 --> 00:01:22.960
so be sure to check
chromestatus.com

00:01:22.960 --> 00:01:26.520
for an up to date
browser support table.

00:01:26.520 --> 00:01:29.130
To detect the availability
of the custom element,

00:01:29.130 --> 00:01:32.910
check if document register
element is available.

00:01:32.910 --> 00:01:36.280
For supported browsers,
you can use platform.js,

00:01:36.280 --> 00:01:38.710
a collection of web
components polyfill

00:01:38.710 --> 00:01:42.650
made available as a part
of the Polymer library.

00:01:42.650 --> 00:01:45.540
This will automatically detect
the availability of the Custom

00:01:45.540 --> 00:01:47.590
Elements and polyfill
it, if necessary.

00:01:50.180 --> 00:01:53.150
Registering a Custom
Element is simple.

00:01:53.150 --> 00:01:55.710
Just call document
register element,

00:01:55.710 --> 00:01:59.550
with a new tag name
as an argument.

00:01:59.550 --> 00:02:04.130
This will register a new tag
name, in this case x component,

00:02:04.130 --> 00:02:08.610
which you can then start
using in your document.

00:02:08.610 --> 00:02:11.840
The tag name must be
separated with a dash.

00:02:11.840 --> 00:02:16.730
Anything other than
that will return errors.

00:02:16.730 --> 00:02:18.430
You can use those
custom elements,

00:02:18.430 --> 00:02:21.230
not only declaratively
as an HTML tag,

00:02:21.230 --> 00:02:24.830
but also imperatively,
using JavaScript.

00:02:24.830 --> 00:02:27.970
One way is to use the
constructor written

00:02:27.970 --> 00:02:30.800
by document register element.

00:02:30.800 --> 00:02:32.950
You can instantiate
the constructor

00:02:32.950 --> 00:02:35.690
to obtain a DOM object.

00:02:35.690 --> 00:02:39.200
Because Custom Elements are just
like any other HTML element,

00:02:39.200 --> 00:02:41.670
you may also use
document create element

00:02:41.670 --> 00:02:44.840
to create a new instance.

00:02:44.840 --> 00:02:48.730
Once you learn how to define
and register a custom tag,

00:02:48.730 --> 00:02:52.180
you should also want to
add some features to it.

00:02:52.180 --> 00:02:56.750
You can do so by inheriting an
existing element's prototype.

00:02:56.750 --> 00:03:00.630
First, create a new object
from HTML element prototype

00:03:00.630 --> 00:03:03.420
by using object create.

00:03:03.420 --> 00:03:07.420
This new object will be the
prototype for your element.

00:03:07.420 --> 00:03:11.860
Then add your own properties
and message to it.

00:03:11.860 --> 00:03:13.780
When registering
the Custom Element,

00:03:13.780 --> 00:03:17.160
[INAUDIBLE] object has a second
argument, which has a prototype

00:03:17.160 --> 00:03:21.010
object with a value
of key prototype.

00:03:21.010 --> 00:03:27.200
Now, you can use the x component
Custom Element in your HTML.

00:03:27.200 --> 00:03:30.830
If you inspect the x component
element on Dev Tools,

00:03:30.830 --> 00:03:33.500
it will look
something like this.

00:03:33.500 --> 00:03:35.900
X component element
is an instance

00:03:35.900 --> 00:03:38.210
of x component
prototype, which has

00:03:38.210 --> 00:03:41.470
a property and the method
you have just defined,

00:03:41.470 --> 00:03:43.800
alert and name.

00:03:43.800 --> 00:03:47.220
And this element is
inherited from HTML element,

00:03:47.220 --> 00:03:52.360
so it has all the features
HTML element provides.

00:03:52.360 --> 00:03:54.910
You can also extend
an existing element,

00:03:54.910 --> 00:03:58.440
which is called type
extension custom element.

00:03:58.440 --> 00:04:02.010
To extend an element, give the
second argument in register

00:04:02.010 --> 00:04:07.880
element, an object with
extends and prototype as keys.

00:04:07.880 --> 00:04:12.890
For extends, give it a tag name
string you want to extend from.

00:04:12.890 --> 00:04:15.550
For example, input.

00:04:15.550 --> 00:04:19.110
For prototype, give it the
best element's prototype.

00:04:19.110 --> 00:04:21.790
If you are extending
from input element,

00:04:21.790 --> 00:04:24.570
use HTML input element.

00:04:24.570 --> 00:04:27.190
For using type extension
custom element,

00:04:27.190 --> 00:04:30.290
add the custom element's
name as a value of

00:04:30.290 --> 00:04:34.220
is attribute to the
extended element.

00:04:34.220 --> 00:04:37.180
To imperatively recreate a
DOM object of the element,

00:04:37.180 --> 00:04:42.070
and the tag name as the second
argument to create element.

00:04:42.070 --> 00:04:45.330
You may wonder what our use
cases for type extension custom

00:04:45.330 --> 00:04:46.590
element?

00:04:46.590 --> 00:04:49.850
Actually, there's already
a really good example

00:04:49.850 --> 00:04:52.490
in the world.

00:04:52.490 --> 00:04:54.260
If you go to
GitHub, you can find

00:04:54.260 --> 00:04:57.700
lots of sections that
indicates relative time.

00:04:57.700 --> 00:05:00.710
If you take a look into one
of them using Dev Tools,

00:05:00.710 --> 00:05:02.720
you will notice it
is actually a time

00:05:02.720 --> 00:05:06.420
tag with an extension
of relative time.

00:05:06.420 --> 00:05:08.430
Notice that the
datetime attribute

00:05:08.430 --> 00:05:11.030
indicates an absolute time.

00:05:11.030 --> 00:05:15.270
This is achieved by using
type extension custom element.

00:05:15.270 --> 00:05:17.770
The relative time type
extension automatically

00:05:17.770 --> 00:05:20.410
calculates relative
time, and appends it

00:05:20.410 --> 00:05:23.970
to the time element
as a text content.

00:05:23.970 --> 00:05:26.720
To learn more about the
time element, please

00:05:26.720 --> 00:05:29.000
visit its GitHub repository.

00:05:31.580 --> 00:05:34.730
I mentioned that the relative
time type extension appends

00:05:34.730 --> 00:05:38.220
a string to the element
as a text content.

00:05:38.220 --> 00:05:41.450
But when does that happen?

00:05:41.450 --> 00:05:44.530
Custom elements support
life cycle callbacks

00:05:44.530 --> 00:05:48.830
that enable you to manipulate
DOM on certain timings.

00:05:48.830 --> 00:05:53.140
There are four types
life cycle callbacks.

00:05:53.140 --> 00:05:58.890
Created callback, this is called
after the element is created.

00:05:58.890 --> 00:06:01.050
Attached callback,
this is called

00:06:01.050 --> 00:06:05.240
when the element is
attached to the document.

00:06:05.240 --> 00:06:07.380
Detached callback,
this is called

00:06:07.380 --> 00:06:11.430
when the element is
detached from the document.

00:06:11.430 --> 00:06:13.900
Attribute changed
callback, this is

00:06:13.900 --> 00:06:19.310
called when one of the
element's attributes is changed.

00:06:19.310 --> 00:06:21.690
Relative time type
extension hooks

00:06:21.690 --> 00:06:23.740
in to created
callback and attribute

00:06:23.740 --> 00:06:27.095
changed callback, and
manipulates the element's text

00:06:27.095 --> 00:06:27.595
content.

00:06:30.610 --> 00:06:34.020
In order to use those
lifecycle callbacks,

00:06:34.020 --> 00:06:37.320
you can simply add them
to the prototype object

00:06:37.320 --> 00:06:38.875
when registering
a custom element.

00:06:41.400 --> 00:06:43.870
Once inside of
created callback, you

00:06:43.870 --> 00:06:46.960
can leverage the power of
template and Shadow DOM

00:06:46.960 --> 00:06:50.710
to add additional
content to our element.

00:06:50.710 --> 00:06:51.835
Let me show you an example.

00:06:54.710 --> 00:06:58.830
So this is a template, we are
adding Custom Elements content

00:06:58.830 --> 00:07:04.830
followed by an actual HTML that
displays the custom element.

00:07:04.830 --> 00:07:09.200
Since this is exactly the same
code we used in the Shadow DOM

00:07:09.200 --> 00:07:11.640
video, I'm not
going to explain how

00:07:11.640 --> 00:07:14.690
to use template and Shadow DOM.

00:07:14.690 --> 00:07:17.220
If you haven't watched
them, please do so.

00:07:20.540 --> 00:07:24.120
For JavaScript, we can
use a similar skeleton

00:07:24.120 --> 00:07:27.220
as we used in the
earlier example.

00:07:27.220 --> 00:07:29.630
In order to create
shadow root, first,

00:07:29.630 --> 00:07:33.230
add created callback as a
property of custom elements

00:07:33.230 --> 00:07:34.740
prototype.

00:07:34.740 --> 00:07:38.390
Then, call create shadow
root on this object.

00:07:38.390 --> 00:07:41.900
To stamp out template, pick
the template DOM element,

00:07:41.900 --> 00:07:47.270
using querySelector Then, clone
it using document import node,

00:07:47.270 --> 00:07:50.240
and append it to
the shadow root.

00:07:50.240 --> 00:07:53.630
And finally, register
the custom element.

00:07:53.630 --> 00:07:55.770
The result will look
something like this.

00:07:59.740 --> 00:08:02.570
So this is the custom element.

00:08:02.570 --> 00:08:04.340
To learn more about
custom elements,

00:08:04.340 --> 00:08:07.360
be sure to read the HTML5
Rocks article, written

00:08:07.360 --> 00:08:09.830
by Eric Bidelman.

00:08:09.830 --> 00:08:11.090
Thank you for watching.

00:08:11.090 --> 00:08:13.460
See you in the next episode.

