WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:33.165
[MUSIC PLAYING]

00:00:40.095 --> 00:01:04.270
[MUSIC PLAYING]

00:01:15.090 --> 00:01:15.930
Hi, everyone.

00:01:15.930 --> 00:01:17.390
Welcome to Google
Developers Live.

00:01:17.390 --> 00:01:18.840
My name's Ali.

00:01:18.840 --> 00:01:21.270
Today, we're going to be talking
about the Google Drive

00:01:21.270 --> 00:01:25.890
SDK and two features we launched
yesterday that I'm

00:01:25.890 --> 00:01:29.160
really proud of, I'm really
happy for, and hopefully, I'll

00:01:29.160 --> 00:01:31.600
explain them to you today, and
explain why I'm so happy.

00:01:31.600 --> 00:01:32.840
And then we're going to
look at some code,

00:01:32.840 --> 00:01:34.620
which is always fun.

00:01:34.620 --> 00:01:36.830
I just want to show you how
easy it is to use them.

00:01:36.830 --> 00:01:38.760
So what are these
two features?

00:01:38.760 --> 00:01:43.830
Well, we want Drive to be
used as a platform.

00:01:43.830 --> 00:01:48.030
It's not a full cloud platform
like App Engine, for example,

00:01:48.030 --> 00:01:50.580
but it has a lot of the
components you need.

00:01:50.580 --> 00:01:53.590
And anytime you want to store
files in your application, we

00:01:53.590 --> 00:01:55.120
think you should have
a Drive component.

00:01:55.120 --> 00:01:56.970
Now, there were two things
missing here.

00:01:56.970 --> 00:02:00.270
One of them was the ability
to add custom

00:02:00.270 --> 00:02:02.900
properties to files.

00:02:02.900 --> 00:02:06.640
Very simple, take any file
in Drive and add your own

00:02:06.640 --> 00:02:09.620
properties to it, a custom set
of key value pairs that you

00:02:09.620 --> 00:02:11.100
can use for anything.

00:02:11.100 --> 00:02:15.230
It can be a rating system,
the number of stars.

00:02:15.230 --> 00:02:17.780
You can arbitrarily tag files.

00:02:17.780 --> 00:02:19.856
That's a feature we've had again
and again and again so

00:02:19.856 --> 00:02:24.350
you can put your own tags on
there, things like that.

00:02:24.350 --> 00:02:26.910
The second feature we've
launched is what we're calling

00:02:26.910 --> 00:02:28.180
Application Data.

00:02:28.180 --> 00:02:33.240
Now, that is files in Drive that
only your application can

00:02:33.240 --> 00:02:37.410
modify, update, create,
and delete.

00:02:37.410 --> 00:02:39.130
When I say only your file,
obviously, they

00:02:39.130 --> 00:02:40.410
belong to the user.

00:02:40.410 --> 00:02:44.520
The user can see how much
storage you're using there,

00:02:44.520 --> 00:02:48.300
how much of their quota is being
used, and they can then

00:02:48.300 --> 00:02:49.260
delete these files.

00:02:49.260 --> 00:02:50.930
But they can't modify them.

00:02:50.930 --> 00:02:54.930
So I think together, these two
offer up real platform

00:02:54.930 --> 00:02:56.890
opportunities.

00:02:56.890 --> 00:03:00.490
Think, for the Application Data,
something like saving a

00:03:00.490 --> 00:03:01.990
game, for example.

00:03:01.990 --> 00:03:05.120
You don't want the user to be
able to modify the game state.

00:03:05.120 --> 00:03:06.860
That's cheating.

00:03:06.860 --> 00:03:09.940
So this is hidden from them
and if they're saying it's

00:03:09.940 --> 00:03:13.830
using too much storage,
you can get rid of it.

00:03:13.830 --> 00:03:15.420
Those are the two features.

00:03:15.420 --> 00:03:18.190
Now, let's dive immediately
into the code.

00:03:18.190 --> 00:03:19.550
I just want to show you
how to do them.

00:03:19.550 --> 00:03:21.110
We're going to use Python,
and we're going

00:03:21.110 --> 00:03:22.570
to start from scratch.

00:03:22.570 --> 00:03:26.010
So the first thing we're going
to do is create a virtual

00:03:26.010 --> 00:03:27.830
environment.

00:03:27.830 --> 00:03:28.950
Done.

00:03:28.950 --> 00:03:32.520
And then we're going to install
the Python Client

00:03:32.520 --> 00:03:36.160
Library and a nice interpreter
to you can see what I'm doing.

00:03:36.160 --> 00:03:37.410
Install.

00:03:41.910 --> 00:03:44.540
This is how easy it is to use
our Python Client Library.

00:03:44.540 --> 00:03:45.550
You install it with pip.

00:03:45.550 --> 00:03:47.730
Anyone who's used Python
before knows that.

00:03:47.730 --> 00:03:50.620
It's going to download them.

00:03:50.620 --> 00:03:53.510
And while I'm waiting for that
to happen, I'll talk to you

00:03:53.510 --> 00:03:54.860
about what code we're
going to write.

00:03:54.860 --> 00:03:57.790
First, we're going to look at
just some examples of how to

00:03:57.790 --> 00:03:59.760
create custom properties
on a file.

00:03:59.760 --> 00:04:01.850
So we'll create a file and
then we'll add custom

00:04:01.850 --> 00:04:03.380
properties to it.

00:04:03.380 --> 00:04:05.860
I'll show you the different
types of property.

00:04:05.860 --> 00:04:08.990
And then we're going to use the
Application Data folder to

00:04:08.990 --> 00:04:11.390
store some hidden stuff, and
then see what it looks like

00:04:11.390 --> 00:04:12.810
for your users in Drive.

00:04:12.810 --> 00:04:14.660
OK, great.

00:04:14.660 --> 00:04:18.547
So, let's start the
interpreter.

00:04:18.547 --> 00:04:22.029
And there we are.

00:04:22.029 --> 00:04:24.580
As usual for these demos, I'm
going to cheat a bit.

00:04:24.580 --> 00:04:26.880
I've already got an authorized
Drive client.

00:04:26.880 --> 00:04:28.800
What you need to do is run the
user through the overflow, and

00:04:28.800 --> 00:04:31.440
either store their token, or if
it's a web app, do it every

00:04:31.440 --> 00:04:34.120
time and save it in
your database.

00:04:34.120 --> 00:04:35.830
That's absolutely fine.

00:04:35.830 --> 00:04:38.000
But Drive, you'll have to take
my word for it, is a fully

00:04:38.000 --> 00:04:43.090
authorized Drive service from
the Python Client Library.

00:04:43.090 --> 00:04:45.810
In addition to the normal scope,
worth mentioning here,

00:04:45.810 --> 00:04:48.455
I've asked for an extra scope
that is specifically the app

00:04:48.455 --> 00:04:49.190
data scope.

00:04:49.190 --> 00:04:52.410
Now your app needs to
specifically ask for

00:04:52.410 --> 00:04:54.130
authorization on that scope.

00:04:54.130 --> 00:04:57.360
Why didn't we just bundle it
into the full Drive scope?

00:04:57.360 --> 00:05:01.380
Well, when a user has already
authorized some degree of

00:05:01.380 --> 00:05:05.710
permissions to their data, you
can't then go and add extra

00:05:05.710 --> 00:05:06.510
things onto that.

00:05:06.510 --> 00:05:08.940
That's wrong, because the
user clicked "OK" for

00:05:08.940 --> 00:05:10.210
these various things.

00:05:10.210 --> 00:05:11.490
So that's one of the reasons.

00:05:11.490 --> 00:05:14.890
Apart from that, I think it's
useful for an application to

00:05:14.890 --> 00:05:16.930
be able to request
just this scope.

00:05:16.930 --> 00:05:19.340
All it's going to do is add this
kind of application data.

00:05:19.340 --> 00:05:21.670
And it doesn't want to modify
it or look at any of your

00:05:21.670 --> 00:05:22.010
other files.

00:05:22.010 --> 00:05:23.000
So I think that's great.

00:05:23.000 --> 00:05:26.290
I think it's really useful to
scope it as finely as you can.

00:05:26.290 --> 00:05:32.270
So first thing we're going to
do is insert a file because

00:05:32.270 --> 00:05:33.740
we're going to add some
properties to it.

00:05:33.740 --> 00:05:35.210
So let's have a look.

00:05:35.210 --> 00:05:36.995
We don't actually need
the body of the file.

00:05:40.570 --> 00:05:50.363
Let's give it a title here,
test properties.

00:05:56.760 --> 00:05:57.970
And there's our file.

00:05:57.970 --> 00:06:02.650
I want to store the file ID so
that I can use it later.

00:06:02.650 --> 00:06:04.810
So let's just get it out
of the last one.

00:06:04.810 --> 00:06:05.350
And there we go.

00:06:05.350 --> 00:06:06.070
That's the file ID.

00:06:06.070 --> 00:06:08.530
So I'm going to be adding
properties to this.

00:06:08.530 --> 00:06:12.440
Now, imagine a totally
contrived example.

00:06:12.440 --> 00:06:14.390
We'll go into real examples
later, but a

00:06:14.390 --> 00:06:16.380
totally contrived example.

00:06:16.380 --> 00:06:18.860
I like to know the fruitiness
of my files.

00:06:18.860 --> 00:06:21.250
And how do I specify
the fruitiness?

00:06:21.250 --> 00:06:22.830
Well, I give it a value.

00:06:22.830 --> 00:06:24.330
So a small value for me is

00:06:24.330 --> 00:06:25.920
fruitiness banana, for example.

00:06:25.920 --> 00:06:27.480
That's quite fruity.

00:06:27.480 --> 00:06:29.020
Very fruity, I'm going
to use melon.

00:06:29.020 --> 00:06:31.960
So the first thing we're going
to do is add a property for

00:06:31.960 --> 00:06:33.350
the fruitiness of this file.

00:06:33.350 --> 00:06:35.540
So drive.files--

00:06:35.540 --> 00:06:36.790
sorry, drive.properties.insert.

00:06:41.810 --> 00:06:45.590
And we always parse
the file ID.

00:06:45.590 --> 00:06:48.530
And then in the body, we
parse our property.

00:06:48.530 --> 00:06:51.470
And the property should
have a key.

00:06:51.470 --> 00:06:57.080
Let's have it "fruitiness."
Let's just call it "fruit."

00:06:57.080 --> 00:06:58.940
And a value--

00:06:58.940 --> 00:07:00.740
and the value here, well,
we're going to go for

00:07:00.740 --> 00:07:05.260
"banana." So drive dot files dot
this, and don't forget to

00:07:05.260 --> 00:07:07.280
execute that.

00:07:07.280 --> 00:07:08.180
And there we go.

00:07:08.180 --> 00:07:11.290
So we have created this, and if
you look at the output of

00:07:11.290 --> 00:07:13.360
this property, you'll
see that there's a

00:07:13.360 --> 00:07:15.900
value, there's the key.

00:07:15.900 --> 00:07:19.570
And something you'll notice
right in the middle there is

00:07:19.570 --> 00:07:21.530
the visibility.

00:07:21.530 --> 00:07:25.520
Now, custom properties on
files have a private

00:07:25.520 --> 00:07:27.320
visibility and a public
visibility.

00:07:27.320 --> 00:07:28.200
What does this mean?

00:07:28.200 --> 00:07:30.440
Well, it's nothing to do with
what the user can see.

00:07:30.440 --> 00:07:35.390
Of course, it's the user's data,
so that's all theirs.

00:07:35.390 --> 00:07:37.835
Whether it's private to other
users of public to other users

00:07:37.835 --> 00:07:39.470
is based on the sharing
module in Drive.

00:07:39.470 --> 00:07:41.230
So users can go and
share that.

00:07:41.230 --> 00:07:43.915
This private means it's private
for your application.

00:07:46.650 --> 00:07:51.020
Can you imagine a situation
where different applications

00:07:51.020 --> 00:07:52.660
would like to share this data?

00:07:52.660 --> 00:07:53.810
Well, they can.

00:07:53.810 --> 00:07:55.540
If there's a workflow
application,

00:07:55.540 --> 00:07:56.760
say you have a document.

00:07:56.760 --> 00:07:59.140
It needs to be reviewed by five
people as it goes through

00:07:59.140 --> 00:08:01.980
various approval stages.

00:08:01.980 --> 00:08:04.720
That is an example where
different applications can

00:08:04.720 --> 00:08:05.820
update the same data.

00:08:05.820 --> 00:08:08.970
So that's where it could be
public, a use case there.

00:08:08.970 --> 00:08:10.580
I'm just going to use private.

00:08:10.580 --> 00:08:12.650
And the default visibility
for all your

00:08:12.650 --> 00:08:14.130
operations is private anyway.

00:08:14.130 --> 00:08:16.150
So we're going to do that.

00:08:16.150 --> 00:08:17.890
OK, so there we go.

00:08:17.890 --> 00:08:18.890
We have that.

00:08:18.890 --> 00:08:20.370
And then let's have a look.

00:08:20.370 --> 00:08:22.380
We want to be able to list--

00:08:22.380 --> 00:08:23.630
drive.properties.list--

00:08:29.874 --> 00:08:33.549
and this will just list the
properties on a file.

00:08:33.549 --> 00:08:35.320
Kind of useful, there you go.

00:08:35.320 --> 00:08:38.690
This time we get a list of
items, each one of those a

00:08:38.690 --> 00:08:39.830
property object.

00:08:39.830 --> 00:08:42.270
And we've only got one,
so it's there.

00:08:42.270 --> 00:08:43.539
OK, great.

00:08:43.539 --> 00:08:44.470
What do I want to do next?

00:08:44.470 --> 00:08:45.720
Well, let's update
this property.

00:08:48.390 --> 00:08:51.130
You've seen this kind of
thing before, standard,

00:08:51.130 --> 00:08:52.980
drive.properties.update.

00:08:52.980 --> 00:08:54.850
This time, we parse
the file ID.

00:08:54.850 --> 00:08:57.360
And again, we need
to parse the new

00:08:57.360 --> 00:08:59.530
updated property object.

00:08:59.530 --> 00:09:11.380
So key, fruit, and also, we
parse the property key in the

00:09:11.380 --> 00:09:14.250
request URL as a parameter
so that it knows

00:09:14.250 --> 00:09:15.400
which ones it's getting.

00:09:15.400 --> 00:09:17.630
And we've got a bit of
a craziness there.

00:09:17.630 --> 00:09:18.660
Property key equals fruit.

00:09:18.660 --> 00:09:21.950
Body equals key, fruit.

00:09:21.950 --> 00:09:23.200
Value--

00:09:24.900 --> 00:09:27.360
wow, this has gone crazy,
but never mind.

00:09:27.360 --> 00:09:31.060
Value, this time we'll go for
"melon." Now if this works,

00:09:31.060 --> 00:09:32.480
it'll be a miracle.

00:09:32.480 --> 00:09:33.030
Excellent.

00:09:33.030 --> 00:09:33.540
There we go.

00:09:33.540 --> 00:09:35.950
It has worked, so miracles
do happen.

00:09:35.950 --> 00:09:42.080
Let's list our properties again,
just to make sure.

00:09:42.080 --> 00:09:43.900
And there it is.

00:09:43.900 --> 00:09:47.150
So now, we have the updated,
just to show you how I'm not

00:09:47.150 --> 00:09:50.930
cheating, with the value
"melon." Really easy, create

00:09:50.930 --> 00:09:54.040
properties, update them,
arbitrary key value store, can

00:09:54.040 --> 00:09:57.630
be visible to your app or
visibility public so that all

00:09:57.630 --> 00:09:58.960
applications can read it.

00:09:58.960 --> 00:09:59.290
Perfect.

00:09:59.290 --> 00:10:00.930
And it's a perfect use case.

00:10:00.930 --> 00:10:05.460
Store your ratings, store custom
tags, store the ID that

00:10:05.460 --> 00:10:08.600
this file represents
in your database.

00:10:08.600 --> 00:10:09.750
That will save you
a round trip.

00:10:09.750 --> 00:10:11.950
So every time you get the file,
you immediately know

00:10:11.950 --> 00:10:13.700
what it corresponds to
in your database.

00:10:13.700 --> 00:10:16.530
You might have loads of data
that you want to store off

00:10:16.530 --> 00:10:17.180
Google Drive.

00:10:17.180 --> 00:10:18.170
Absolutely fine.

00:10:18.170 --> 00:10:21.250
So that's properties quickly.

00:10:21.250 --> 00:10:21.610
Right.

00:10:21.610 --> 00:10:28.680
Now on to application data, a
bit more interesting, perhaps.

00:10:28.680 --> 00:10:30.930
I can think of many,
many use cases.

00:10:30.930 --> 00:10:33.320
Mobile use cases come
to mind to hugely.

00:10:33.320 --> 00:10:36.320
You have configuration file
for your mobile app.

00:10:36.320 --> 00:10:39.100
You want to store it somewhere
where it will be synchronized

00:10:39.100 --> 00:10:41.720
and consistently distributed
to all running

00:10:41.720 --> 00:10:43.210
instances of this app.

00:10:43.210 --> 00:10:46.500
And few, not many users--

00:10:46.500 --> 00:10:48.950
most users are going towards
having multiple--

00:10:48.950 --> 00:10:53.250
even multiple mobile devices,
so a tablet, a

00:10:53.250 --> 00:10:54.680
phone, I have a laptop.

00:10:54.680 --> 00:10:58.410
I want this configuration data
synchronized, and I want it

00:10:58.410 --> 00:10:59.890
the same everywhere.

00:10:59.890 --> 00:11:00.730
I expect that.

00:11:00.730 --> 00:11:02.250
I'm starting to expect
that as a user.

00:11:02.250 --> 00:11:05.510
So your application
should cover this.

00:11:05.510 --> 00:11:07.250
OK, so how does that work?

00:11:07.250 --> 00:11:12.550
Well, we have added an alias
to a specific folder inside

00:11:12.550 --> 00:11:13.210
Google Drive.

00:11:13.210 --> 00:11:16.210
So wherever you might
put a folder ID--

00:11:16.210 --> 00:11:18.520
in Drive, for example,
inserting a file--

00:11:18.520 --> 00:11:21.230
you can now put the alias
"appdata." One word,

00:11:21.230 --> 00:11:24.280
A-P-P-D-A-T-A. I'll show
you in a second.

00:11:24.280 --> 00:11:28.340
So you can use that alias, and
that will automatically get

00:11:28.340 --> 00:11:30.040
you to the application data.

00:11:30.040 --> 00:11:31.170
OK, really cool.

00:11:31.170 --> 00:11:33.020
Let's create a file in there.

00:11:33.020 --> 00:11:41.030
We're just going to use
drive.files.insert again.

00:11:41.030 --> 00:11:45.180
Now, this time, let's
give it a body.

00:11:49.110 --> 00:11:51.380
The title doesn't really matter,
because obviously, the

00:11:51.380 --> 00:11:52.445
user can't see this.

00:11:52.445 --> 00:11:54.430
So it's just a way that you
might be able to look up your

00:11:54.430 --> 00:11:56.066
file or check it later.

00:11:56.066 --> 00:11:59.650
App data test--

00:11:59.650 --> 00:12:00.670
OK.

00:12:00.670 --> 00:12:02.690
And this time--

00:12:05.800 --> 00:12:08.220
let's pause for a second.

00:12:08.220 --> 00:12:10.100
This time, we want to give
it some kind of volume.

00:12:10.100 --> 00:12:13.840
We want to give it some data,
because I want you to see how

00:12:13.840 --> 00:12:15.620
it plays in the Drive
user interface.

00:12:15.620 --> 00:12:19.000
Actually, you can just use a
shortcut file, which doesn't

00:12:19.000 --> 00:12:20.610
have any data, but then you
wouldn't be able to put any

00:12:20.610 --> 00:12:21.410
information in it.

00:12:21.410 --> 00:12:27.960
More on that later, but-- so
from API client, dot HTTP,

00:12:27.960 --> 00:12:30.825
import media in memory.

00:12:36.940 --> 00:12:38.500
And we'll create a media body.

00:12:38.500 --> 00:12:43.690
So media body equals media
in memory upload.

00:12:43.690 --> 00:12:46.192
Hello GDL--

00:12:46.192 --> 00:12:47.850
that's going to be the title.

00:12:47.850 --> 00:12:53.970
And text, plain, we'll
give it a MIME type.

00:12:53.970 --> 00:12:57.600
And this time we'll insert
with that body

00:12:57.600 --> 00:12:59.610
and this media body.

00:12:59.610 --> 00:13:01.090
A media body just controls
what file

00:13:01.090 --> 00:13:02.490
you're going to upload.

00:13:02.490 --> 00:13:04.640
I'm just grabbing a bit
of text from memory.

00:13:04.640 --> 00:13:08.300
Obviously it can be a real file,
if you have that on disk

00:13:08.300 --> 00:13:09.720
or wherever.

00:13:09.720 --> 00:13:10.970
So media body equals that.

00:13:13.280 --> 00:13:14.900
OK, and there we go.

00:13:14.900 --> 00:13:16.280
It's created the file.

00:13:16.280 --> 00:13:19.960
So let's give it another
name, because FID

00:13:19.960 --> 00:13:21.110
we're already using.

00:13:21.110 --> 00:13:24.550
So let's call it RID equals.

00:13:24.550 --> 00:13:30.910
So this is the ID of the file
you've created in appdata.

00:13:30.910 --> 00:13:37.410
Let's just quickly go over
to Drive, and we'll see.

00:13:37.410 --> 00:13:39.040
So what I've done there--

00:13:39.040 --> 00:13:40.960
intentional mistake, of course,
and you can see the

00:13:40.960 --> 00:13:42.710
file after I'd spend half
an hour telling

00:13:42.710 --> 00:13:43.760
you that you can't--

00:13:43.760 --> 00:13:45.600
is actually I just created
a regular file.

00:13:45.600 --> 00:13:48.470
I didn't put it in
the right place.

00:13:48.470 --> 00:13:51.330
Newbie error, but that's OK.

00:13:51.330 --> 00:13:54.030
Let's delete it and try again.

00:13:54.030 --> 00:13:57.530
So this time, I want to make
sure that it's going into the

00:13:57.530 --> 00:13:58.600
correct folder.

00:13:58.600 --> 00:13:59.720
OK, how do I do that?

00:13:59.720 --> 00:14:02.540
Well, you can create it,
add it there later.

00:14:02.540 --> 00:14:06.710
The quickest way actually is
to parse the parents list.

00:14:06.710 --> 00:14:09.870
So this is a list of parents.

00:14:09.870 --> 00:14:11.120
Whoa.

00:14:14.420 --> 00:14:15.985
OK, it's going to
hate me today.

00:14:27.090 --> 00:14:28.410
I'm just going to restart
the shell.

00:14:34.420 --> 00:14:36.350
Sorry, just re-import
the stuff.

00:14:36.350 --> 00:14:37.600
That's OK.

00:14:41.620 --> 00:14:45.380
Media body, we'll create
the media body again.

00:14:45.380 --> 00:14:48.390
It's good because I got to show
you how to do this twice,

00:14:48.390 --> 00:14:51.160
which makes me really happy.

00:14:51.160 --> 00:15:01.460
Hello GDL, and the MIME
type, text plain, and

00:15:01.460 --> 00:15:02.710
drive.files().insert--

00:15:06.100 --> 00:15:06.520
OK.

00:15:06.520 --> 00:15:09.390
So this time, body equals, we're
just going to put the

00:15:09.390 --> 00:15:10.490
parents in.

00:15:10.490 --> 00:15:16.140
So parents, and that's a list
of parents, so each one just

00:15:16.140 --> 00:15:17.120
needs an ID.

00:15:17.120 --> 00:15:20.530
And we're going to use
for the ID appdata.

00:15:20.530 --> 00:15:21.640
See that?

00:15:21.640 --> 00:15:25.850
And then we're going to parse
the media body as well, the

00:15:25.850 --> 00:15:27.270
one we created.

00:15:27.270 --> 00:15:30.095
So this time hopefully it will
create a hidden file.

00:15:30.095 --> 00:15:33.110
It won't create a regular file
that you can just see.

00:15:36.580 --> 00:15:38.778
And there we go.

00:15:38.778 --> 00:15:42.450
FID equals that.

00:15:42.450 --> 00:15:45.430
I just want to store the ID so
I have to mess around later.

00:15:45.430 --> 00:15:46.530
So there we go.

00:15:46.530 --> 00:15:48.270
Let's go back here again.

00:15:48.270 --> 00:15:52.530
And you see, amazingly,
nothing has appeared.

00:15:52.530 --> 00:15:54.400
was our properties file,
but we haven't

00:15:54.400 --> 00:15:55.580
created a new one here.

00:15:55.580 --> 00:15:56.890
And why?

00:15:56.890 --> 00:16:00.740
It's actually now hidden behind
the Manage Apps dialog.

00:16:00.740 --> 00:16:01.500
So we open Manage Apps.

00:16:01.500 --> 00:16:03.650
It shows all the files that
are connected to you

00:16:03.650 --> 00:16:04.790
application.

00:16:04.790 --> 00:16:06.430
That's really great.

00:16:06.430 --> 00:16:07.440
Whether they're connected--

00:16:07.440 --> 00:16:10.120
this is an Android app at
the top, and various

00:16:10.120 --> 00:16:11.070
other Google Apps.

00:16:11.070 --> 00:16:14.110
But as we can see at the bottom
here, you have my Test

00:16:14.110 --> 00:16:18.050
Python Push Client that is
now storing one kilobyte

00:16:18.050 --> 00:16:18.950
of hidden app data.

00:16:18.950 --> 00:16:20.860
It's not actually one kilobyte,
but that's the

00:16:20.860 --> 00:16:22.470
lowest term.

00:16:22.470 --> 00:16:25.020
So there I've got some data.

00:16:25.020 --> 00:16:25.890
That's awesome.

00:16:25.890 --> 00:16:26.900
What can I do with it?

00:16:26.900 --> 00:16:28.580
Well I'm fed up with it.

00:16:28.580 --> 00:16:30.170
I just want to delete it.

00:16:30.170 --> 00:16:32.560
I've cleared it out now, and
it's not using any of my

00:16:32.560 --> 00:16:33.110
[? creator. ?]

00:16:33.110 --> 00:16:35.390
You can see that
it's now empty.

00:16:35.390 --> 00:16:38.180
So that's the flow
for the user.

00:16:38.180 --> 00:16:39.380
Really simple.

00:16:39.380 --> 00:16:43.150
Just remember, every time you're
using a folder ID, you

00:16:43.150 --> 00:16:45.850
can just parse the appdata
ID instead.

00:16:45.850 --> 00:16:48.630
Now, that does take a
lookup on our end.

00:16:48.630 --> 00:16:51.280
So you know this isn't
going to change.

00:16:51.280 --> 00:16:54.450
A user only has one app data
folder for your application.

00:16:54.450 --> 00:16:57.010
So you can easily just
cache that ID.

00:16:57.010 --> 00:16:59.220
Save it, so that would make
everything quicker.

00:16:59.220 --> 00:17:00.000
That's really up to you.

00:17:00.000 --> 00:17:02.090
So that would be this ID here.

00:17:02.090 --> 00:17:04.369
I would just store that in my
database, maybe, if I wanted

00:17:04.369 --> 00:17:06.140
to optimize and make
it a bit quicker.

00:17:06.140 --> 00:17:08.420
But for most cases, just
parsing app data

00:17:08.420 --> 00:17:10.220
is absolutely fine.

00:17:10.220 --> 00:17:11.450
OK, great.

00:17:11.450 --> 00:17:13.260
So what have we done?

00:17:13.260 --> 00:17:16.040
We've created some custom
properties, and we've shown

00:17:16.040 --> 00:17:20.940
you how to hide data, or make
data so that the user

00:17:20.940 --> 00:17:23.300
can only delete it.

00:17:23.300 --> 00:17:25.180
Why don't we combine
both of these?

00:17:25.180 --> 00:17:26.420
That seems perfect to me.

00:17:26.420 --> 00:17:28.900
So we can create a file, doesn't
necessarily have to

00:17:28.900 --> 00:17:31.180
have any content to it.

00:17:31.180 --> 00:17:35.200
But we can use the properties
to actually use as the

00:17:35.200 --> 00:17:36.750
configuration values
of that file.

00:17:36.750 --> 00:17:39.690
So suddenly I've got a hidden
file with custom properties

00:17:39.690 --> 00:17:41.350
that are my configuration
values.

00:17:41.350 --> 00:17:42.290
OK, fantastic.

00:17:42.290 --> 00:17:43.220
Let's do that.

00:17:43.220 --> 00:17:45.030
So now,
drive.properties().insert.

00:17:52.440 --> 00:17:57.360
So fileId calls fid.

00:17:57.360 --> 00:18:00.150
Body equals key.

00:18:00.150 --> 00:18:02.030
This time, let's do
a proper one.

00:18:02.030 --> 00:18:07.525
I don't know, last name.

00:18:07.525 --> 00:18:11.060
That could be my last
name or something.

00:18:11.060 --> 00:18:16.130
Value, so that's
me, of course.

00:18:16.130 --> 00:18:18.645
So we parse that body
and execute.

00:18:27.490 --> 00:18:28.800
And no.

00:18:28.800 --> 00:18:30.930
I'm getting a 404 there.

00:18:30.930 --> 00:18:34.410
So it seems that you can't
actually put these properties

00:18:34.410 --> 00:18:36.650
at the moment on
a custom file.

00:18:36.650 --> 00:18:37.330
So that's a shame.

00:18:37.330 --> 00:18:38.780
It would have been nice to bring
them together so you

00:18:38.780 --> 00:18:40.310
could see it.

00:18:40.310 --> 00:18:42.390
We should probably
aim for that.

00:18:42.390 --> 00:18:44.770
I guess it was a bit too much
to wish for that we could

00:18:44.770 --> 00:18:48.000
store free stuff in
the app data.

00:18:48.000 --> 00:18:49.850
So unfortunately we
can't do that.

00:18:49.850 --> 00:18:51.700
I could keep trying, but I think
that's going to be a

00:18:51.700 --> 00:18:52.770
problem there.

00:18:52.770 --> 00:18:58.300
OK, so custom properties, add
whatever you like to the file.

00:18:58.300 --> 00:19:00.340
You can't store loads
and loads of stuff.

00:19:00.340 --> 00:19:03.230
It's not a full database, but
it's perfect, perfect for your

00:19:03.230 --> 00:19:06.290
light examples.

00:19:06.290 --> 00:19:09.540
Application data, hide stuff
from the user so they

00:19:09.540 --> 00:19:10.380
can't modify it.

00:19:10.380 --> 00:19:11.290
They can delete it.

00:19:11.290 --> 00:19:12.040
They still own it.

00:19:12.040 --> 00:19:13.520
It's still theirs.

00:19:13.520 --> 00:19:15.150
It's not an evil thing,
I promise.

00:19:15.150 --> 00:19:16.050
It's still theirs.

00:19:16.050 --> 00:19:17.580
It can track you.

00:19:17.580 --> 00:19:22.140
And they can manage it through
this Manage Apps dialog here.

00:19:22.140 --> 00:19:25.110
Our commitment to you to be able
to use Drive for whatever

00:19:25.110 --> 00:19:28.600
use case you'd like
as a platform--

00:19:28.600 --> 00:19:31.470
really, I think we're gradually
getting there where

00:19:31.470 --> 00:19:33.910
we have these features
that you can't really

00:19:33.910 --> 00:19:36.870
find anywhere else.

00:19:36.870 --> 00:19:40.120
Perfect for building small
integrations, large

00:19:40.120 --> 00:19:43.330
integrations, whatever you like,
however this best suits

00:19:43.330 --> 00:19:44.680
your application.

00:19:44.680 --> 00:19:46.440
So we'll see you next time.

00:19:46.440 --> 00:19:48.400
If you've got any questions,
please ask them on Stack

00:19:48.400 --> 00:19:50.630
Overflow or drop along
to our G+ community.

00:19:50.630 --> 00:19:52.030
It's very lively there.

00:19:52.030 --> 00:19:54.850
Everyone will be happy to chat
with you about these things.

00:19:54.850 --> 00:19:55.900
And it was great
talking to you.

00:19:55.900 --> 00:19:56.860
Thanks very much.

00:19:56.860 --> 00:19:58.110
Bye bye.

00:20:04.315 --> 00:21:16.283
[MUSIC PLAYING]

