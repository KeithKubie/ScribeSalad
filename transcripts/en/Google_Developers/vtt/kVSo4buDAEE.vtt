WEBVTT
Kind: captions
Language: en

00:00:04.620 --> 00:00:05.090
Hey there.

00:00:05.090 --> 00:00:06.660
I'm Addy Osmani.

00:00:06.660 --> 00:00:08.720
I'm a Developer Programs
Engineer on the

00:00:08.720 --> 00:00:10.000
Chrome team at Google.

00:00:10.000 --> 00:00:12.520
And today we're going to talk
about some new Chrome DevTools

00:00:12.520 --> 00:00:15.620
features spanning work
spaces, snippets,

00:00:15.620 --> 00:00:16.800
and an improved Sass.

00:00:16.800 --> 00:00:17.830
Debugging workflow.

00:00:17.830 --> 00:00:20.220
Now, these features are going to
hopefully help improve your

00:00:20.220 --> 00:00:22.200
authoring and productivity
in the tools, so

00:00:22.200 --> 00:00:24.550
let's dive right in.

00:00:24.550 --> 00:00:27.140
A typical web app development
workflow usually involves a

00:00:27.140 --> 00:00:29.870
clever window arrangement of
having your editor and the

00:00:29.870 --> 00:00:32.509
browser with your dev tools
living side by side, and

00:00:32.509 --> 00:00:35.230
constantly making this sort of
cumbersome context switch

00:00:35.230 --> 00:00:36.710
between these tools.

00:00:36.710 --> 00:00:39.410
Now, rather than having to do
that, wouldn't it be great if

00:00:39.410 --> 00:00:41.430
you could spend a little bit
more of that time that you're

00:00:41.430 --> 00:00:44.215
editing files on directly inside
the dev tools, so that

00:00:44.215 --> 00:00:47.550
you could both debug and edit
your project files?

00:00:47.550 --> 00:00:49.690
Now I'm going to talk about
Workspaces, which is a new

00:00:49.690 --> 00:00:52.750
feature we've been able to
facilitate this workflow.

00:00:52.750 --> 00:00:54.920
So, I currently have an
application open that's sort

00:00:54.920 --> 00:00:56.610
of a page level right now.

00:00:56.610 --> 00:00:59.640
And what I want to do is
actually be able to go and

00:00:59.640 --> 00:01:02.340
open up and edit my entire
project, so everything that

00:01:02.340 --> 00:01:05.280
makes up this project on
my local file system.

00:01:05.280 --> 00:01:07.150
And the way I'm going to do that
is I'm going to go and

00:01:07.150 --> 00:01:08.680
I'm going to add this
application--

00:01:08.680 --> 00:01:10.550
HTML5 Please--

00:01:10.550 --> 00:01:11.775
locally.

00:01:11.775 --> 00:01:13.940
You should now be able to see
that I have two sets of

00:01:13.940 --> 00:01:14.400
directories.

00:01:14.400 --> 00:01:17.730
I have my page level view of
this page, and then my entire

00:01:17.730 --> 00:01:18.950
project level view.

00:01:18.950 --> 00:01:21.380
And I want to be able to
consolidate these, so whenever

00:01:21.380 --> 00:01:24.190
I make a change, they apply to
both what Chrome is able to

00:01:24.190 --> 00:01:26.790
display and what I'm able to
experience during debugging,

00:01:26.790 --> 00:01:30.820
and the changes I'm making to
my original source files.

00:01:30.820 --> 00:01:32.700
So I'm going to go and I'm going
to right click on any

00:01:32.700 --> 00:01:35.170
file, really, inside
my project.

00:01:35.170 --> 00:01:36.680
I'm going to go and I'm
going to map them

00:01:36.680 --> 00:01:38.015
to file system resource.

00:01:38.015 --> 00:01:40.740
And I'm just going to choose
the option which basically

00:01:40.740 --> 00:01:43.610
maps it back to the original
source file.

00:01:43.610 --> 00:01:46.980
Chrome DevTools is going
to ask me to restart.

00:01:46.980 --> 00:01:48.280
It's gone and it's done that.

00:01:48.280 --> 00:01:50.670
And now you see I just
have one single view.

00:01:50.670 --> 00:01:53.380
This one view consolidates
everything, and it basically

00:01:53.380 --> 00:01:56.640
represents my entire project,
and all the files that make up

00:01:56.640 --> 00:01:58.440
my whole application.

00:01:58.440 --> 00:01:59.650
And I can go and I can edit.

00:01:59.650 --> 00:02:01.250
I can edit my index file.

00:02:01.250 --> 00:02:03.540
I can edit any of
my build files.

00:02:03.540 --> 00:02:05.800
I can go and I can edit
my JavaScript.

00:02:05.800 --> 00:02:09.030
And the first thing I want to do
is I want to make sure that

00:02:09.030 --> 00:02:12.010
in this new workspace world,
I'm still able to do things

00:02:12.010 --> 00:02:15.540
like live edit and life debug,
and use my breakpoints.

00:02:15.540 --> 00:02:17.070
So let's do that.

00:02:17.070 --> 00:02:20.390
I want to locate a specific
method called updatesearch.

00:02:20.390 --> 00:02:22.890
And I'm going to do that using
a keyboard shortcut called

00:02:22.890 --> 00:02:26.490
Command-Shift-O. And it's called
updatesearch, so I've

00:02:26.490 --> 00:02:27.210
typed that in.

00:02:27.210 --> 00:02:29.520
It's is gone and it's
taken me there.

00:02:29.520 --> 00:02:32.330
And what I'm now going to do
is I want to change this

00:02:32.330 --> 00:02:34.270
application so that--

00:02:34.270 --> 00:02:37.460
so the current way this works
is I type in a tag.

00:02:37.460 --> 00:02:40.080
So it can be video,
audio, canvas, or

00:02:40.080 --> 00:02:41.590
another HTML5 feature.

00:02:41.590 --> 00:02:43.920
And this page will basically let
me know whether it's safe

00:02:43.920 --> 00:02:45.900
or not to use that feature.

00:02:45.900 --> 00:02:49.190
What I want is, whenever I type
into the search field, I

00:02:49.190 --> 00:02:51.770
basically want it to
log to the console.

00:02:51.770 --> 00:02:54.140
So I'm going to add a little
console log statement here.

00:02:54.140 --> 00:02:54.825
I'm going to say,
console.log("We're

00:02:54.825 --> 00:02:56.075
updating!").

00:02:59.250 --> 00:03:02.650
And I'm going to do Command
Save, just to save that back.

00:03:02.650 --> 00:03:07.130
And using the Escape shortcut
key, I'm going to open up a

00:03:07.130 --> 00:03:10.176
local console which can be
displayed at the same time as

00:03:10.176 --> 00:03:12.680
the Sources panel, so
I can see my output.

00:03:12.680 --> 00:03:15.060
What I now want to see is
whatever I type in something,

00:03:15.060 --> 00:03:19.990
as you can see, that's logging
correctly to the console,

00:03:19.990 --> 00:03:20.690
which is great.

00:03:20.690 --> 00:03:23.410
So I know that live editing
seems to be working fine.

00:03:23.410 --> 00:03:25.420
The next thing I want to be
able to do is work with

00:03:25.420 --> 00:03:26.350
breakpoints.

00:03:26.350 --> 00:03:28.810
So we can still use updatesearch
for this.

00:03:28.810 --> 00:03:31.490
Let me add a breakpoint to
classList, and I can do this

00:03:31.490 --> 00:03:34.430
by clicking inside the
line number gutter.

00:03:34.430 --> 00:03:38.030
And I can do that inside a few
other places in my code.

00:03:38.030 --> 00:03:41.225
And what I'm now going to do is
basically go back to here

00:03:41.225 --> 00:03:43.140
and start typing it again.

00:03:43.140 --> 00:03:45.340
And the first thing you'll
notice is that it's triggered

00:03:45.340 --> 00:03:46.910
that first breakpoint.

00:03:46.910 --> 00:03:49.040
And I can go and I can continue
on to the next

00:03:49.040 --> 00:03:51.070
breakpoint just by right
clicking inside the gutter,

00:03:51.070 --> 00:03:53.410
and clicking on the next one
and going to continue here,

00:03:53.410 --> 00:03:55.870
which will continue execution
up to that point.

00:03:55.870 --> 00:03:58.170
And I can continue to the
next one right after

00:03:58.170 --> 00:04:00.260
that if I want to.

00:04:00.260 --> 00:04:03.730
So let's kill the stuff
that we had in console

00:04:03.730 --> 00:04:04.580
there at the moment.

00:04:04.580 --> 00:04:07.730
Now, something that I noticed
with workspace that's actually

00:04:07.730 --> 00:04:10.220
pretty cool is the ability
for DevTools--

00:04:10.220 --> 00:04:11.230
let me show you this.

00:04:11.230 --> 00:04:13.140
I'm going to come to close
my script file.

00:04:13.140 --> 00:04:14.130
I'm going to close
the DevTools.

00:04:14.130 --> 00:04:16.680
So let's assume that we've
restarted Chrome.

00:04:16.680 --> 00:04:19.740
I'm going to open up my Sources
panel once again.

00:04:19.740 --> 00:04:22.230
And I'm going to go back to
script.js, which is what we

00:04:22.230 --> 00:04:23.650
were working on.

00:04:23.650 --> 00:04:26.140
And what you'll now see is that
all those breakpoints

00:04:26.140 --> 00:04:28.390
that I created are actually
still there.

00:04:28.390 --> 00:04:30.740
The DevTools have been able
to remember them.

00:04:30.740 --> 00:04:32.690
And it can do that for
any number of files.

00:04:32.690 --> 00:04:34.930
I can have a bunch of different
scripts that are

00:04:34.930 --> 00:04:37.470
composing my application, and
it'll basically remember the

00:04:37.470 --> 00:04:39.870
different breakpoint
settings for them.

00:04:39.870 --> 00:04:42.330
I can actually go and--

00:04:42.330 --> 00:04:44.870
I can still add things
like conditional

00:04:44.870 --> 00:04:45.710
breakpoints as well.

00:04:45.710 --> 00:04:48.960
So here, what I want to do
is say, if the value of

00:04:48.960 --> 00:04:53.160
search.value is panda, for
example, I basically want it

00:04:53.160 --> 00:04:54.830
to trigger this breakpoint.

00:04:54.830 --> 00:04:58.055
So I can type in audio
and nothing happens.

00:04:58.055 --> 00:05:00.670
But I type in panda, and it's
triggered that conditional

00:05:00.670 --> 00:05:01.740
breakpoint.

00:05:01.740 --> 00:05:04.820
I can actually-- so let's
continue working through

00:05:04.820 --> 00:05:07.440
there, and let's get rid of that
conditional breakpoint.

00:05:07.440 --> 00:05:09.610
And let's take a look at
our watch expressions.

00:05:09.610 --> 00:05:13.730
So I can still add things
like objects to my watch

00:05:13.730 --> 00:05:14.960
expressions and have those been

00:05:14.960 --> 00:05:16.850
watched during my workflow.

00:05:16.850 --> 00:05:18.980
So pretty much everything works
the same way that you'd

00:05:18.980 --> 00:05:20.410
expect it to.

00:05:20.410 --> 00:05:23.430
Now if we're saying that you're
getting a slightly

00:05:23.430 --> 00:05:25.990
better editing experience inside
the DevTools, one thing

00:05:25.990 --> 00:05:29.020
that we commonly need to do is
have access to some sort of

00:05:29.020 --> 00:05:30.460
revision history.

00:05:30.460 --> 00:05:33.460
Now, you actually get access to
this by right clicking on

00:05:33.460 --> 00:05:37.180
any file, going to the Context
menu, and then clicking on

00:05:37.180 --> 00:05:38.890
Local Modifications.

00:05:38.890 --> 00:05:41.500
What this will do is-- and let's
make some modifications.

00:05:41.500 --> 00:05:44.900
Let's say, var test equals
some object.

00:05:44.900 --> 00:05:45.700
Let's save that.

00:05:45.700 --> 00:05:49.490
And what you can see is that
I get a complete revision

00:05:49.490 --> 00:05:52.570
history where I can go and
revert back all the changes

00:05:52.570 --> 00:05:54.530
that I've made up to
a certain point.

00:05:54.530 --> 00:05:57.050
I can apply a specific change
at a particular

00:05:57.050 --> 00:05:59.940
timestamp if I want.

00:05:59.940 --> 00:06:03.550
Or I can apply a specific
revision to my original files.

00:06:03.550 --> 00:06:04.560
And this is really useful.

00:06:04.560 --> 00:06:07.140
So rather than having to just
sort of worry that a change

00:06:07.140 --> 00:06:10.540
that I'm making during my live
editing and debugging workflow

00:06:10.540 --> 00:06:13.710
is going to come back to bite
me later, I can easily trust

00:06:13.710 --> 00:06:15.730
local modifications to
save those changes.

00:06:15.730 --> 00:06:18.840
And I can go and I can revert
back to them if needed.

00:06:18.840 --> 00:06:21.630
So I'm to go and I'm going
to escape that.

00:06:21.630 --> 00:06:24.910
Now, you can actually get some
nice mileage using some of the

00:06:24.910 --> 00:06:27.310
other buttons that are at the
bottom of the Sources panel.

00:06:27.310 --> 00:06:29.080
So let's take a look
at some of those.

00:06:29.080 --> 00:06:31.810
Now, it's quite common when
you're working on an

00:06:31.810 --> 00:06:33.460
application of some
sort to have a few

00:06:33.460 --> 00:06:34.640
tiles that are minified.

00:06:34.640 --> 00:06:37.170
And these may be outside of
your own build process.

00:06:37.170 --> 00:06:40.020
So maybe it's like a minified
version of jQuery or Backbone

00:06:40.020 --> 00:06:42.160
or something else, and you just
want to make it a little

00:06:42.160 --> 00:06:44.930
bit more readable, because the
minified form of this file is

00:06:44.930 --> 00:06:47.510
this is just not that
easy to work with.

00:06:47.510 --> 00:06:50.702
So using the curly braces button
at the very bottom,

00:06:50.702 --> 00:06:53.620
this one that says "pretty
print," I can click on that.

00:06:53.620 --> 00:06:56.190
And it'll go and it'll beautify
my JavaScript for me.

00:06:56.190 --> 00:06:58.410
So I can go-- and this is a
little bit more easy to read.

00:06:58.410 --> 00:07:02.490
It's much more neatly
white spaced out.

00:07:02.490 --> 00:07:05.740
It's a lot more easy for me
to go Through And I can

00:07:05.740 --> 00:07:06.880
go and I can use--

00:07:06.880 --> 00:07:09.170
although some of these variable
names are going to be

00:07:09.170 --> 00:07:12.220
minified, I can actually mostly
still use my same

00:07:12.220 --> 00:07:14.670
shortcut for displaying all
of these methods to access

00:07:14.670 --> 00:07:17.160
things, which is great.

00:07:17.160 --> 00:07:19.980
Now, if you're working on a
project which has really any

00:07:19.980 --> 00:07:22.760
number of large files on it,
you're going to want to be

00:07:22.760 --> 00:07:26.190
able to easily locate things,
whether it be inside a

00:07:26.190 --> 00:07:29.180
specific file, or across
your entire project.

00:07:29.180 --> 00:07:31.470
Now, there are some useful
keyboard shortcuts which can

00:07:31.470 --> 00:07:33.760
help you achieve this, and I'm
going to go through some of

00:07:33.760 --> 00:07:34.990
them right now.

00:07:34.990 --> 00:07:38.290
So we've already gone through
one of them, which is finding

00:07:38.290 --> 00:07:40.100
a method in a specific file.

00:07:40.100 --> 00:07:42.820
So for any of the shortcuts I'm
going to go through, I'll

00:07:42.820 --> 00:07:44.770
probably be using
the Mac specific

00:07:44.770 --> 00:07:46.430
version, which uses Command.

00:07:46.430 --> 00:07:48.820
But if you're on Windows or
you're on Linux, you can use

00:07:48.820 --> 00:07:52.690
Control instead of Command to
achieve the exact same thing.

00:07:52.690 --> 00:07:55.500
So if I want to locate a
specific method inside a file,

00:07:55.500 --> 00:07:57.980
I want to filter down to a
specific method-- or in the

00:07:57.980 --> 00:08:00.260
case of a style sheet,
a specific property--

00:08:00.260 --> 00:08:04.660
I can use Command-Shift-O. And
like earlier, I can filter

00:08:04.660 --> 00:08:06.120
down to updatesearch.

00:08:06.120 --> 00:08:09.270
I can filter down to pretty
much any method I want.

00:08:09.270 --> 00:08:11.620
And by clicking on it, it will
take me to the line number

00:08:11.620 --> 00:08:16.150
where that method or function
exists, which is great.

00:08:16.150 --> 00:08:18.890
Another thing I might want to
be able to do is open or

00:08:18.890 --> 00:08:20.950
filter the list of
files that are

00:08:20.950 --> 00:08:22.040
available inside a project.

00:08:22.040 --> 00:08:24.740
And I can do that with
Command-O. So this will go and

00:08:24.740 --> 00:08:26.440
it will display all the
different files that I have

00:08:26.440 --> 00:08:27.160
available to me.

00:08:27.160 --> 00:08:29.600
If I'm looking for my style
file, I can start typing.

00:08:29.600 --> 00:08:31.990
And as you can see, it's
filtered down the list to

00:08:31.990 --> 00:08:33.510
those results that are
relevant to me.

00:08:33.510 --> 00:08:35.770
If I'm looking for all of my
JavaScript files, I can just

00:08:35.770 --> 00:08:39.059
type in .js and achieve the
exact same thing, which is,

00:08:39.059 --> 00:08:40.940
again, quite helpful.

00:08:40.940 --> 00:08:44.390
Now, if I want to navigate to
a specific line that I know

00:08:44.390 --> 00:08:49.310
exists inside my file, you can
use Command-L to achieve this.

00:08:49.310 --> 00:08:52.280
So here, I'm going to go
to line number 56.

00:08:52.280 --> 00:08:54.480
And as I can see, I'm in the
region of my updatesearch

00:08:54.480 --> 00:08:57.330
method once again, which
is really great.

00:08:57.330 --> 00:08:59.910
Now, some of the different
panels inside the DevTools

00:08:59.910 --> 00:09:03.710
have their own find feature,
which works at a context level

00:09:03.710 --> 00:09:05.070
on the material that
you're working on.

00:09:05.070 --> 00:09:08.830
So in the case of the Sources
panel, Command-F will bring up

00:09:08.830 --> 00:09:12.850
a nice little search box in
the very bottom, near the

00:09:12.850 --> 00:09:15.030
Sources toolbar at the very
bottom of the screen.

00:09:15.030 --> 00:09:16.840
And I can start typing
in here to look at

00:09:16.840 --> 00:09:18.090
things inside this file.

00:09:18.090 --> 00:09:21.060
So I can find my updatesearch
once again using this.

00:09:21.060 --> 00:09:25.410
I can find specific variable
names, or pretty much anything

00:09:25.410 --> 00:09:26.230
that I want.

00:09:26.230 --> 00:09:30.290
And I can use these navigation
toggles to go back and forth

00:09:30.290 --> 00:09:33.370
between different
search results.

00:09:33.370 --> 00:09:36.330
I can actually also go and find
and replace different

00:09:36.330 --> 00:09:38.870
content if I want to, the same
way that I would in a normal

00:09:38.870 --> 00:09:40.810
text editor, which
can be useful.

00:09:40.810 --> 00:09:43.970
And this type of functionality
is present on a few different

00:09:43.970 --> 00:09:47.260
panels, including Network, and
I believe Resources as well.

00:09:47.260 --> 00:09:49.380
So if you're using those panels,
you can also use

00:09:49.380 --> 00:09:50.680
Command-F on them.

00:09:50.680 --> 00:09:53.385
Typically, we also need to be
able to search across all of

00:09:53.385 --> 00:09:55.000
the files that form
our project.

00:09:55.000 --> 00:09:57.420
And we can do this using another
keyboard shortcut,

00:09:57.420 --> 00:10:00.820
which is Command-Option-F.
What this gives me is the

00:10:00.820 --> 00:10:03.470
ability to look across every
single file in my project.

00:10:03.470 --> 00:10:05.180
So let me look for something
like document.

00:10:05.180 --> 00:10:08.200
I want to see what files in this
project on use the word

00:10:08.200 --> 00:10:09.520
document in them.

00:10:09.520 --> 00:10:11.960
And as you can see, it's giving
me a list of all the

00:10:11.960 --> 00:10:15.240
different files, as well as the
line numbers where these

00:10:15.240 --> 00:10:16.480
occurrences are.

00:10:16.480 --> 00:10:20.380
And I can go and I can
click on any result.

00:10:20.380 --> 00:10:22.520
It'll actually open
it up inside the

00:10:22.520 --> 00:10:23.550
Source panel editor.

00:10:23.550 --> 00:10:26.685
And I can go and I can make
any changes that I want to

00:10:26.685 --> 00:10:29.220
those files quite easily.

00:10:29.220 --> 00:10:31.040
So you can expend any of these
search results and it'll give

00:10:31.040 --> 00:10:33.820
you a preview of where it's
found, the instance of what

00:10:33.820 --> 00:10:34.970
you've been looking for.

00:10:34.970 --> 00:10:37.290
And this feature also supports
some nice things like regular

00:10:37.290 --> 00:10:40.660
expressions, if you
want to use those.

00:10:40.660 --> 00:10:43.475
So let's hit escape again
to kill the console.

00:10:43.475 --> 00:10:44.740
Now that's great.

00:10:44.740 --> 00:10:47.070
I'm able to pretty
much edit files

00:10:47.070 --> 00:10:48.610
directly inside the DevTools.

00:10:48.610 --> 00:10:51.800
I can load up local projects,
entire projects, so I can see

00:10:51.800 --> 00:10:52.930
all the different files.

00:10:52.930 --> 00:10:55.990
And if I close Chrome or close
the DevTools, that project, as

00:10:55.990 --> 00:10:58.510
long as I want it to be, will
still be around, so I don't

00:10:58.510 --> 00:11:01.690
have to go manually opening up
any individual files that I

00:11:01.690 --> 00:11:03.980
want to debug or edit.

00:11:03.980 --> 00:11:04.540
That's great.

00:11:04.540 --> 00:11:06.790
Now, if you'd like to start
using Workspaces today, the

00:11:06.790 --> 00:11:08.620
first thing you're going to need
to do is make sure you're

00:11:08.620 --> 00:11:11.960
using Google Chrome Canary, so
the Canary release channel.

00:11:11.960 --> 00:11:15.650
The next thing you want to do is
go to About Flags, and look

00:11:15.650 --> 00:11:18.260
for the Developer Tools
experiments.

00:11:18.260 --> 00:11:19.770
So I'm looking for
Developer Tools.

00:11:19.770 --> 00:11:22.260
And you just want to make sure
that you enable developer

00:11:22.260 --> 00:11:24.840
Tools experiments, and
then relaunch Chrome.

00:11:24.840 --> 00:11:27.140
The next thing you want to do
is go to the Settings pane

00:11:27.140 --> 00:11:29.150
once you're fired up DevTools.

00:11:29.150 --> 00:11:32.750
Go to Experiments, and Enable
File System Folders in Sources

00:11:32.750 --> 00:11:36.350
Panel, so this option that
I have open right here.

00:11:36.350 --> 00:11:39.200
You then need to relaunch
your Developer Tools.

00:11:39.200 --> 00:11:41.870
And you'll get access to a new
feature called Workspace that

00:11:41.870 --> 00:11:43.200
appears as a tab.

00:11:43.200 --> 00:11:45.850
And you can then go and add as
many different file systems as

00:11:45.850 --> 00:11:48.460
you want, and you even have
some configuration options

00:11:48.460 --> 00:11:52.050
around the different file
mappings that are also set.

00:11:52.050 --> 00:11:52.690
And that's it.

00:11:52.690 --> 00:11:55.470
You should be able to work with
projects directly inside

00:11:55.470 --> 00:11:57.060
the tools, which can be nice.

00:11:57.060 --> 00:11:59.720
Sometimes you want to be able
to save smaller scripts,

00:11:59.720 --> 00:12:02.200
utilities, and bookmarklets so
that they're always available

00:12:02.200 --> 00:12:03.890
to you inside the DevTools.

00:12:03.890 --> 00:12:05.080
There's a new feature
that can help you

00:12:05.080 --> 00:12:06.830
with this called snippets.

00:12:06.830 --> 00:12:09.260
So to use snippets, go
to the Sources panel.

00:12:09.260 --> 00:12:13.040
And in the left hand Nav, find
the snippets sub-bar.

00:12:13.040 --> 00:12:15.320
Now in the tree view here, you
can see that I already have

00:12:15.320 --> 00:12:17.240
some snippets that I
created earlier.

00:12:17.240 --> 00:12:19.730
To create a brand new snippet,
right click inside the Tree

00:12:19.730 --> 00:12:21.490
View and hit New.

00:12:21.490 --> 00:12:23.720
You can then customize the name
of your snippet to be

00:12:23.720 --> 00:12:25.430
pretty much whatever you want.

00:12:25.430 --> 00:12:28.000
In my case, I'm going to
call it cornify.js.

00:12:28.000 --> 00:12:30.640
You can then paste in the
contents of a bookmarklet, or

00:12:30.640 --> 00:12:33.560
write any custom script that you
want to form your snippet.

00:12:33.560 --> 00:12:37.460
In my case, I'm going to paste
in my cornify script.

00:12:37.460 --> 00:12:39.620
And I can then run this against
any local object if I

00:12:39.620 --> 00:12:42.350
want-- the Window, the
Navigator, and so on--

00:12:42.350 --> 00:12:44.700
but I'll mostly be using this
against the current page.

00:12:44.700 --> 00:12:47.710
Now, there are two ways you
can execute a snippet.

00:12:47.710 --> 00:12:51.040
You can either use the
triangular button at the very

00:12:51.040 --> 00:12:54.210
bottom of the Sources bar, which
will basically go and

00:12:54.210 --> 00:12:56.380
run it, or you can use
the keyboard shortcut

00:12:56.380 --> 00:12:59.640
Control-Shift-E, which will
also do the same thing.

00:12:59.640 --> 00:13:01.490
So in our case, we're
going to use

00:13:01.490 --> 00:13:03.940
Control-Shift-E, run my snippet.

00:13:03.940 --> 00:13:06.570
And what you can see is it's
gone and it's added a really,

00:13:06.570 --> 00:13:09.260
really awesome rainbow
to my page.

00:13:09.260 --> 00:13:12.810
I can go and I can run
this once again.

00:13:12.810 --> 00:13:13.300
Boom!

00:13:13.300 --> 00:13:14.760
I've got a unicorn.

00:13:14.760 --> 00:13:17.410
This page is so much more
functional now.

00:13:17.410 --> 00:13:18.350
And that's great.

00:13:18.350 --> 00:13:21.710
As you can see, I can actually
go to any script here.

00:13:21.710 --> 00:13:23.610
So I can go to CSS Prettifier,
which I'll be

00:13:23.610 --> 00:13:24.860
showing you in a moment.

00:13:24.860 --> 00:13:27.150
But I can add breakpoints
to this page.

00:13:27.150 --> 00:13:29.730
I can treat this as pretty
much any normal script.

00:13:29.730 --> 00:13:30.380
I can live edit it.

00:13:30.380 --> 00:13:32.400
I can live debug it.

00:13:32.400 --> 00:13:34.020
And that's great.

00:13:34.020 --> 00:13:36.730
Another nice thing about this
feature is it basically gives

00:13:36.730 --> 00:13:39.700
you access to a lovely multiline
console with both

00:13:39.700 --> 00:13:42.000
syntax highlighting
and persistence.

00:13:42.000 --> 00:13:46.620
So you can basically go and
do anything you want.

00:13:46.620 --> 00:13:49.220
And hit to the next line, keep
editing this the same way that

00:13:49.220 --> 00:13:51.870
you would any other script,
which is great.

00:13:51.870 --> 00:13:56.190
Now, to show you another example
of a bookmarklet, I

00:13:56.190 --> 00:13:57.880
created CSS Prettifier.

00:13:57.880 --> 00:14:00.790
And I'm currently on a page--
so normally when you're view

00:14:00.790 --> 00:14:03.260
sourcing a page, you might be
trying to check out the

00:14:03.260 --> 00:14:05.540
JavaScript on that page,
and the CSS.

00:14:05.540 --> 00:14:08.630
And when you try going and
looking at the raw version of

00:14:08.630 --> 00:14:11.100
that, it's not very easy
to do that always.

00:14:11.100 --> 00:14:13.530
Because sometimes those style
sheets might be minified and

00:14:13.530 --> 00:14:15.330
those scripts might
be minified too.

00:14:15.330 --> 00:14:17.280
So in this case, what I'm
going to do with CSS

00:14:17.280 --> 00:14:19.360
Prettifier is I'm just going
to go and I'm going to run

00:14:19.360 --> 00:14:20.660
this against the current page.

00:14:20.660 --> 00:14:23.500
And as you can see, it's gone
and it's prettified my CSS,

00:14:23.500 --> 00:14:26.320
making it much more readable,
much more accessible to me,

00:14:26.320 --> 00:14:27.790
which is great.

00:14:27.790 --> 00:14:29.640
So snippets have got a
lot of capabilities.

00:14:29.640 --> 00:14:32.300
You can use all the same panels
as you would for your

00:14:32.300 --> 00:14:34.900
debugging and editing workflows,
as we were looking

00:14:34.900 --> 00:14:36.510
at earlier with Workspaces.

00:14:36.510 --> 00:14:39.820
And to enable them and start
using snippets today, all you

00:14:39.820 --> 00:14:42.600
need to do is go to the settings
cog, go back to

00:14:42.600 --> 00:14:45.400
Experiments, and just check
Snippets Support.

00:14:45.400 --> 00:14:47.990
Now, at the current time,
snippets are still in

00:14:47.990 --> 00:14:48.530
experimental.

00:14:48.530 --> 00:14:51.260
We're expecting for them
to sort of come out of

00:14:51.260 --> 00:14:54.610
experiments quite soon, so you
may not even need to enable

00:14:54.610 --> 00:14:57.760
them in the future, and
that's the hope.

00:14:57.760 --> 00:14:59.050
So we've looked at Workspaces.

00:14:59.050 --> 00:15:00.220
We've looked at snippets.

00:15:00.220 --> 00:15:03.010
The next thing we're going to
look at is an improved Sass

00:15:03.010 --> 00:15:05.240
debugging workflow inside
the DevTools.

00:15:05.240 --> 00:15:07.460
If you enjoy working with an
abstraction language like

00:15:07.460 --> 00:15:10.140
Sass, your workflow inside the
DevTools has probably been a

00:15:10.140 --> 00:15:11.160
little bit limited.

00:15:11.160 --> 00:15:13.570
The reason is, although you
can edit CSS inside the

00:15:13.570 --> 00:15:16.110
sources panel or via the
Elements panel, none of the

00:15:16.110 --> 00:15:18.970
changes that you make will
actually go and be propagated

00:15:18.970 --> 00:15:21.690
back to your original
Sass source files.

00:15:21.690 --> 00:15:24.640
And that means that as soon as
you run the Sass compiler, any

00:15:24.640 --> 00:15:27.050
changes made to your CSS from
the DevTools will be

00:15:27.050 --> 00:15:28.170
overwritten.

00:15:28.170 --> 00:15:30.610
That workflow changes now with
some recent improvements that

00:15:30.610 --> 00:15:31.350
we've made.

00:15:31.350 --> 00:15:33.570
I'm going to go over to the
Elements panel and inspecting

00:15:33.570 --> 00:15:36.790
the top root of the HTML5 Please
page, I'm going to go

00:15:36.790 --> 00:15:39.260
and take a look at some
of our styles.

00:15:39.260 --> 00:15:42.670
So here I see background
color 232927.

00:15:42.670 --> 00:15:45.830
Now I can actually command and
click into this color, and be

00:15:45.830 --> 00:15:49.590
taken to the dark variable name,
which expresses what

00:15:49.590 --> 00:15:52.080
this color is, which
is fantastic.

00:15:52.080 --> 00:15:56.060
Going back to Elements, I can
actually also Command click on

00:15:56.060 --> 00:15:59.030
background color, to be taken
to the reference where we're

00:15:59.030 --> 00:16:01.200
saying, OK, we'll use the
dark variable for this

00:16:01.200 --> 00:16:03.760
color, which is great.

00:16:03.760 --> 00:16:07.320
I'm going to go and I'm now
going to inspect the H1 for

00:16:07.320 --> 00:16:10.110
this page, so HTML5 Please.

00:16:10.110 --> 00:16:13.460
And what you'll notice in this
side, is that rather than us

00:16:13.460 --> 00:16:17.250
referring to style.css or just
the CSS, we're actually now

00:16:17.250 --> 00:16:19.030
referring to line
numbers for the

00:16:19.030 --> 00:16:20.750
original Sass source files.

00:16:20.750 --> 00:16:24.380
So I can go, and by clicking on
style.css, it will actually

00:16:24.380 --> 00:16:29.260
take me to line source for this
style, which is great.

00:16:29.260 --> 00:16:30.710
And I can now go and
start making

00:16:30.710 --> 00:16:33.060
actual changes to these.

00:16:33.060 --> 00:16:35.660
I have another feature called
on which basically allows me

00:16:35.660 --> 00:16:38.760
to reload whenever changes are
makes my Sass files, and I'm

00:16:38.760 --> 00:16:41.020
going to preview what that
looks like right now.

00:16:41.020 --> 00:16:42.580
So I now want to make
a change to one of

00:16:42.580 --> 00:16:44.010
my Sass source files.

00:16:44.010 --> 00:16:45.740
There's actually a Sass function
that I defined

00:16:45.740 --> 00:16:47.700
earlier called OMG.

00:16:47.700 --> 00:16:49.910
And I'd like to change my
text-shadow to use that

00:16:49.910 --> 00:16:52.260
instead of what we've
got at the moment.

00:16:52.260 --> 00:16:54.170
So what I'm going to do is I'm
going to go to text-shadow,

00:16:54.170 --> 00:16:55.310
type in omg--

00:16:55.310 --> 00:16:58.670
let's clean up some
of this stuff--

00:16:58.670 --> 00:17:00.010
and I'm just going
to Command-S and

00:17:00.010 --> 00:17:01.654
take a look at this.

00:17:01.654 --> 00:17:03.130
Boom!

00:17:03.130 --> 00:17:05.859
So what that's done is it's
actually gone and compiled my

00:17:05.859 --> 00:17:09.680
Sass file into CSS, and it's
being previewed inside of the

00:17:09.680 --> 00:17:13.170
Chrome without me having to go
and use any additional tools

00:17:13.170 --> 00:17:13.900
separately.

00:17:13.900 --> 00:17:16.280
So I do have my Sass compiler
running in the background and

00:17:16.280 --> 00:17:17.240
watching everything.

00:17:17.240 --> 00:17:18.750
But that's about it.

00:17:18.750 --> 00:17:22.780
Now, in order to enable this
Sass editing workflow, you

00:17:22.780 --> 00:17:27.290
need to go to DevTools Settings,
go to Experiments,

00:17:27.290 --> 00:17:28.590
and first of all, make
sure you have

00:17:28.590 --> 00:17:31.650
support for Sass checked.

00:17:31.650 --> 00:17:34.780
After that, you'll probably have
to relaunch the tools.

00:17:34.780 --> 00:17:38.690
Next, go to General, scroll
down, and you want to Enable

00:17:38.690 --> 00:17:40.990
Source Maps, as well
as the Auto-reload

00:17:40.990 --> 00:17:43.110
CSS upon Sass Save.

00:17:43.110 --> 00:17:45.510
And that's what basically allows
us to reload without

00:17:45.510 --> 00:17:48.100
having to go and do anything
extra like

00:17:48.100 --> 00:17:49.860
refresh the page manually.

00:17:49.860 --> 00:17:52.150
Finally, make sure that you're
running the Sass compile there

00:17:52.150 --> 00:17:54.400
was some specific flags
in the background.

00:17:54.400 --> 00:17:58.560
In this case we're using Sass,
Watch, SCSS, Sourcemap, and

00:17:58.560 --> 00:18:02.270
then defining the input and
output for our files.

00:18:02.270 --> 00:18:03.420
And that's it.

00:18:03.420 --> 00:18:05.630
If you'd like to stay on top of
the latest news to do with

00:18:05.630 --> 00:18:08.770
the Chrome DevTools, please feel
free to follow us on Plus

00:18:08.770 --> 00:18:10.760
on the Google Chrome
Developers channel.

00:18:10.760 --> 00:18:13.910
On Twitter, you can catch us
on ChromiumDev, or you can

00:18:13.910 --> 00:18:16.490
watch our regular show, "The
Breakpoint," which captures

00:18:16.490 --> 00:18:18.810
the latest and greatest in
the world of tooling.

00:18:18.810 --> 00:18:20.790
Until next time, thank
you, and goodbye.

