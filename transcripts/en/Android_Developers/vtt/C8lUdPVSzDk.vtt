WEBVTT
Kind: captions
Language: en

00:00:00.384 --> 00:00:01.550
JOANNA SMITH: Hey everybody.

00:00:01.550 --> 00:00:03.841
I'm Joanna Smith, and I'm
here with Android Development

00:00:03.841 --> 00:00:06.610
Patterns to walk you through our
new runtime permissions model

00:00:06.610 --> 00:00:07.850
with Android Marshmallow.

00:00:07.850 --> 00:00:10.600
So let's take a look.

00:00:10.600 --> 00:00:12.420
It's pretty frightening
to install an app

00:00:12.420 --> 00:00:14.890
that requests 14
different permissions.

00:00:14.890 --> 00:00:16.820
But if your app targets
Android Marshmallow,

00:00:16.820 --> 00:00:20.150
it can now prompt users to
grant permissions at runtime

00:00:20.150 --> 00:00:22.030
instead of install time.

00:00:22.030 --> 00:00:24.650
Now hopefully, this will help
you avoid a terrifying install

00:00:24.650 --> 00:00:27.720
dialog like this one.

00:00:27.720 --> 00:00:30.440
Because runtime permissions
are actually required for all

00:00:30.440 --> 00:00:32.330
apps targeting
Marshmallow, so there

00:00:32.330 --> 00:00:35.670
are a few extra steps that will
help you avoid those dreaded

00:00:35.670 --> 00:00:36.810
runtime exceptions.

00:00:36.810 --> 00:00:40.100
Because hey, it
happens to all of us.

00:00:40.100 --> 00:00:42.700
So first, check the platform.

00:00:42.700 --> 00:00:46.440
Runtime permissions are backward
compatible with older SDKs

00:00:46.440 --> 00:00:49.580
by reverting to the original
install time request.

00:00:49.580 --> 00:00:51.770
So if your user is
on an older SDK,

00:00:51.770 --> 00:00:53.520
then you know the
permission was granted

00:00:53.520 --> 00:00:55.230
when the app was installed.

00:00:55.230 --> 00:00:57.330
However, if your
user's on Marshmallow,

00:00:57.330 --> 00:01:00.630
then you can't be so certain.

00:01:00.630 --> 00:01:03.440
Which brings us to
the second step,

00:01:03.440 --> 00:01:06.370
checking the permission status.

00:01:06.370 --> 00:01:08.940
A simple call to
checkSelfPermission

00:01:08.940 --> 00:01:10.570
with the permission
that you care about

00:01:10.570 --> 00:01:13.790
will let you know whether the
permission has been granted.

00:01:13.790 --> 00:01:16.070
If it has, you're good to go.

00:01:16.070 --> 00:01:19.930
But if not, you're going
to want to request it.

00:01:19.930 --> 00:01:23.490
Note that you want to make this
check every time, because users

00:01:23.490 --> 00:01:25.990
can also revoke permissions now.

00:01:25.990 --> 00:01:28.990
And this is ultimately a very
good thing for developers,

00:01:28.990 --> 00:01:31.900
even if it requires
a bit of extra work.

00:01:31.900 --> 00:01:34.010
Because users will get
your request for permission

00:01:34.010 --> 00:01:37.970
in a context that provides a
clear justification and benefit

00:01:37.970 --> 00:01:38.640
to them.

00:01:38.640 --> 00:01:40.670
And that builds user trust.

00:01:40.670 --> 00:01:43.570
And letting them say no
thanks to a specific feature

00:01:43.570 --> 00:01:47.530
might actually make them
like you a little bit more.

00:01:47.530 --> 00:01:49.040
So moving on in our flow.

00:01:49.040 --> 00:01:51.080
If you don't already
have permission,

00:01:51.080 --> 00:01:52.940
you can take a
moment to explain why

00:01:52.940 --> 00:01:55.460
that permission is necessary.

00:01:55.460 --> 00:01:58.480
Paint your user a clear picture
of how great this feature will

00:01:58.480 --> 00:02:01.407
be if they grant you
access to that resource.

00:02:01.407 --> 00:02:03.490
To help you do this, there
is the shouldShowReques

00:02:03.490 --> 00:02:06.310
tPermissionRationale method.

00:02:06.310 --> 00:02:08.710
This will help you figure
out whether you have some

00:02:08.710 --> 00:02:11.760
"'splaining" to do.

00:02:11.760 --> 00:02:14.640
The method returns
false if the user asked

00:02:14.640 --> 00:02:16.940
not to be asked anymore
or if the permission

00:02:16.940 --> 00:02:18.930
is disabled on the device.

00:02:18.930 --> 00:02:22.870
But the method will return true
if the user previously rejected

00:02:22.870 --> 00:02:26.200
the permission and is now trying
to access the feature again.

00:02:26.200 --> 00:02:28.350
Because this is a
signal that your user

00:02:28.350 --> 00:02:31.000
might be confused
about the app behavior.

00:02:31.000 --> 00:02:33.140
So make it clear for them.

00:02:33.140 --> 00:02:36.110
And with that, you're ready
to request the permission.

00:02:39.162 --> 00:02:41.490
The requestPermissions
method needs

00:02:41.490 --> 00:02:46.270
the permission list that you
care about, and a request code.

00:02:46.270 --> 00:02:49.100
This asynchronous call will
then pop a dialog to the user,

00:02:49.100 --> 00:02:51.260
and their response will
trigger your callback,

00:02:51.260 --> 00:02:53.410
which is why the request
code that you specify

00:02:53.410 --> 00:02:55.200
is so important.

00:02:55.200 --> 00:02:58.070
It'll help you identify
where in your app the user is

00:02:58.070 --> 00:03:00.420
and how to pick up
the app behavior.

00:03:00.420 --> 00:03:02.930
Which brings us around
to the final step,

00:03:02.930 --> 00:03:06.600
handling that
permissions result.

00:03:06.600 --> 00:03:09.130
In onRequestPermissionsResult,
you can

00:03:09.130 --> 00:03:11.280
check the result of this call.

00:03:11.280 --> 00:03:13.570
So if the permission
was granted,

00:03:13.570 --> 00:03:15.860
you can use your
request code to get back

00:03:15.860 --> 00:03:18.190
to making that API
call and creating

00:03:18.190 --> 00:03:20.620
magic moments for your user.

00:03:20.620 --> 00:03:22.930
But if the permission
wasn't granted,

00:03:22.930 --> 00:03:26.330
you're going to need
to fail gracefully.

00:03:26.330 --> 00:03:28.800
The easiest solution is
to disable the feature

00:03:28.800 --> 00:03:30.920
with some sort of
clear visual signal

00:03:30.920 --> 00:03:33.170
that this is because of
the permission thing.

00:03:33.170 --> 00:03:37.000
So you could present a
dialog or update the UI text.

00:03:37.000 --> 00:03:38.950
But you probably
want to keep the UI

00:03:38.950 --> 00:03:41.260
layout functional in case
they change their mind.

00:03:41.260 --> 00:03:43.040
So don't disable that button.

00:03:43.040 --> 00:03:46.840
Let them get back into the
flow when they care about it.

00:03:46.840 --> 00:03:48.400
And that's how you
update your app

00:03:48.400 --> 00:03:51.230
to handle runtime
permissions in Marshmallow.

00:03:51.230 --> 00:03:53.330
One final piece of
advice I have is actually

00:03:53.330 --> 00:03:56.720
about testing these changes,
because it isn't super fun

00:03:56.720 --> 00:03:59.790
to keep bouncing between your
app and the Settings app.

00:03:59.790 --> 00:04:02.220
So check out the
PackageManager's grant command

00:04:02.220 --> 00:04:04.810
to programmatically grant
and revoke permissions

00:04:04.810 --> 00:04:05.880
on the device.

00:04:05.880 --> 00:04:09.772
And as always, check the
documentation to get started.

00:04:09.772 --> 00:04:11.230
And keep in mind
that these changes

00:04:11.230 --> 00:04:14.990
are intended to help your users
understand your app's behavior.

00:04:14.990 --> 00:04:17.740
So don't overwhelm users by
asking for several permissions

00:04:17.740 --> 00:04:18.700
all at once.

00:04:18.700 --> 00:04:22.169
Put these requests into
context and build better apps.

00:04:22.169 --> 00:04:25.519
[MUSIC PLAYING]

