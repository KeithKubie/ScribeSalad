WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:05.000
You had asked why did I drag you through all of these binomial distribution stuff

00:00:05.000 --> 00:00:10.000
and flipped so many coins, the reason is you're going to move now towards

00:00:10.000 --> 00:00:14.000
what's perhaps the most deep insight in all of statistics.

00:00:14.000 --> 00:00:17.000
It's called the central limit theorem.

00:00:17.000 --> 00:00:21.000
And the way I want you to get there is through a programming exercise.

00:00:21.000 --> 00:00:24.000
Now, I told you that all the programming is optional

00:00:24.000 --> 00:00:28.000
and you can totally skip this one but I beg you to stay with me.

00:00:28.000 --> 00:00:34.000
What you're about to see is perhaps the most interesting way to understand

00:00:34.000 --> 00:00:38.000
the central limit theorem and statistics of large numbers.

00:00:38.000 --> 00:00:44.000
In assignment #1, I literally want you to flip a coin 1000 times.

00:00:44.000 --> 00:00:47.000
And once you've done this, I want you to compute the mean of the outcome

00:00:47.000 --> 00:00:49.000
and the standard deviation.

00:00:49.000 --> 00:00:54.000
Flipping a coin is a random event. It gives us things like 0 or 1s as outcomes.

00:00:54.000 --> 00:00:56.000
Like this thing over here.

00:00:56.000 --> 00:01:03.000
If we were to do this 1000 for a fair coin, you expect the outcome of the mean to be 0.5.

00:01:03.000 --> 00:01:06.000
You probably have no clue what to expect for the standard deviation.

00:01:06.000 --> 00:01:08.000
There's a couple of things I want to give you.

00:01:08.000 --> 00:01:13.000
In your programming environment, you'll find the function mean, the function variance,

00:01:13.000 --> 00:01:17.000
and the function standard deviation as you've practiced it before.

00:01:17.000 --> 00:01:22.000
And what if I did a little bit to make sure that whatever you do is of type float

00:01:22.000 --> 00:01:24.000
what you need for computing the mean.

00:01:24.000 --> 00:01:28.000
Otherwise, it might be of type integer and then these calculations all go wrong.

00:01:28.000 --> 00:01:33.000
Same over here in the computation of the variance but ignore the float type conversion.

00:01:33.000 --> 00:01:35.000
Other than that, it's exactly what I've shown you before.

00:01:35.000 --> 00:01:39.000
I now want you to implement the function flip that takes this as an argument

00:01:39.000 --> 00:01:42.000
the number of coin flips you want to do, 1000 in this case,

00:01:42.000 --> 00:01:46.000
and then use as a function mean and then standard deviation to compute

00:01:46.000 --> 00:01:49.000
the mean and the standard deviation of the resulting sequence of outcomes.

00:01:49.000 --> 00:01:52.000
This will be a list filled with 0s or 1s.

00:01:52.000 --> 00:01:57.000
The thing to know is that with the function random.random,

00:01:57.000 --> 00:02:02.000
there's two of them with a dot in the middle, gives you a random value

00:02:02.000 --> 00:02:04.000
that sits between 0 and 1.

00:02:04.000 --> 00:02:07.000
Every time you call this function, you get a different random value,

00:02:07.000 --> 00:02:11.000
which is nice because you just have to call this 1000 times to get you 1000 samples.

00:02:11.000 --> 00:02:15.000
But then in the interval of 0 and 1 and you want to put them back into coin flips,

00:02:15.000 --> 00:02:19.000
so what you have to do is to call this expression here.

00:02:19.000 --> 00:02:23.000
And this expression over here will give you true or false,

00:02:23.000 --> 00:02:27.000
which is the same for the purpose here of 1 and 0 .

00:02:27.000 --> 00:02:34.000
It gives you true if the random value happens to be larger than 0.5 and false if it's smaller.

00:02:34.000 --> 00:02:37.000
So the assignment is to call this thing 1000 times

00:02:37.000 --> 00:02:43.000
and make a list of these 1000 outcomes and put that code in and the function flip

00:02:43.000 --> 00:02:47.000
that returns that list and then you're done.

00:02:47.000 --> 00:02:53.000
So here's a typical outcome for this code. If I run it, the mean might be 0.484.

00:02:53.000 --> 00:02:55.000
There's the standard deviation.

00:02:55.000 --> 99:59:59.000
If I run it again, I get a different mean of 0.51 and a different standard deviation

