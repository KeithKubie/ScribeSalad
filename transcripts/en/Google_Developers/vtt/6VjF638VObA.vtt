WEBVTT
Kind: captions
Language: en

00:00:00.780 --> 00:00:01.280
Hi.

00:00:01.280 --> 00:00:03.650
I'm Ollie from the Android team.

00:00:03.650 --> 00:00:06.540
I want to tell you about
ExoPlayer, an application level

00:00:06.540 --> 00:00:08.620
media player for Android.

00:00:08.620 --> 00:00:11.390
Built on top of Android's
low-level media APIs,

00:00:11.390 --> 00:00:13.930
ExoPlayer delivers
a number of benefits

00:00:13.930 --> 00:00:15.554
over Android's
built-in media player.

00:00:15.554 --> 00:00:16.970
You'll be glad to
hear it supports

00:00:16.970 --> 00:00:20.932
both dash and smooth
streaming adaptive play backs.

00:00:20.932 --> 00:00:23.030
At Google, we're
already using ExoPlayer

00:00:23.030 --> 00:00:25.180
in YouTube and to play movies.

00:00:25.180 --> 00:00:26.920
And now we're open
sourcing it so

00:00:26.920 --> 00:00:29.684
that you can use
it in your own app.

00:00:29.684 --> 00:00:32.225
I'm going to show you the lower
level APIs in which ExoPlayer

00:00:32.225 --> 00:00:35.560
is built, outline some of the
benefits of application level

00:00:35.560 --> 00:00:38.810
media players, and show you
how you can integrate ExoPlayer

00:00:38.810 --> 00:00:41.620
into your own applications.

00:00:41.620 --> 00:00:43.480
Before we take a
look at ExoPlayer,

00:00:43.480 --> 00:00:46.540
let's first take a look
at Android's media APIs.

00:00:46.540 --> 00:00:49.820
Prior to Jelly Bean, Android's
high-level media player API

00:00:49.820 --> 00:00:51.360
was the de facto
way for developers

00:00:51.360 --> 00:00:53.270
to videos to their applications.

00:00:53.270 --> 00:00:55.470
It's really easy to use.

00:00:55.470 --> 00:00:57.050
This example starts
playing a video

00:00:57.050 --> 00:00:58.880
with just two lines of code.

00:00:58.880 --> 00:01:02.640
One to create the player and the
second to start the playback.

00:01:02.640 --> 00:01:04.319
These two lines of
code hide nearly all

00:01:04.319 --> 00:01:07.350
of the complexities of video
playback from the developer.

00:01:07.350 --> 00:01:10.060
However, under the hood, the
media player implementation

00:01:10.060 --> 00:01:14.080
is doing a lot of work in order
for the video to be played.

00:01:14.080 --> 00:01:16.560
For streaming, the first thing
that the player needs to do

00:01:16.560 --> 00:01:19.320
is to load the video
data over the network.

00:01:19.320 --> 00:01:21.340
The data then needs to
be buffered according

00:01:21.340 --> 00:01:24.080
to some policy, which
specifies when more data needs

00:01:24.080 --> 00:01:27.140
to be loaded and how much.

00:01:27.140 --> 00:01:28.950
Before the video
can be rendered,

00:01:28.950 --> 00:01:30.836
the individual audio
and video samples

00:01:30.836 --> 00:01:32.460
need to be extracted
from the container

00:01:32.460 --> 00:01:34.800
format in which
they're delivered.

00:01:34.800 --> 00:01:37.450
These samples then
need to be decoded.

00:01:37.450 --> 00:01:39.510
And finally, the
decoder samples need

00:01:39.510 --> 00:01:42.980
to be rendered to the
screen and to the speaker.

00:01:42.980 --> 00:01:45.030
At a slightly higher
level, the player

00:01:45.030 --> 00:01:47.590
needs to track its overall
state, such as the playback

00:01:47.590 --> 00:01:49.840
position and whether the
playback is currently

00:01:49.840 --> 00:01:51.900
advancing.

00:01:51.900 --> 00:01:54.350
The media player API is
simple and easy to use

00:01:54.350 --> 00:01:56.820
because it hides all
of this complexity.

00:01:56.820 --> 00:01:58.692
However, the one
drawback of this approach

00:01:58.692 --> 00:02:00.400
is that more advanced
developers are then

00:02:00.400 --> 00:02:03.520
unable to modify or extend
the underlying behaviors

00:02:03.520 --> 00:02:05.560
to better suit their needs.

00:02:05.560 --> 00:02:08.340
For example, a developer is
unable to tweak the buffering

00:02:08.340 --> 00:02:13.330
policy or to add a persistent
cache for buffered media data.

00:02:13.330 --> 00:02:15.190
To better support
these use cases,

00:02:15.190 --> 00:02:18.440
we added low-level
media APIs to Android.

00:02:18.440 --> 00:02:21.095
From Jelly Bean onwards
the medial extractor API

00:02:21.095 --> 00:02:23.540
provides networking,
buffering, and media extraction

00:02:23.540 --> 00:02:25.550
functionality.

00:02:25.550 --> 00:02:27.900
We also added the
MediaCodec API,

00:02:27.900 --> 00:02:30.870
which provides access to
decoders, including hardware

00:02:30.870 --> 00:02:33.430
accelerated video decoders.

00:02:33.430 --> 00:02:36.310
The MediaCodec API supports
rendering of video frames

00:02:36.310 --> 00:02:37.530
directly.

00:02:37.530 --> 00:02:40.750
And playing decoded audio can
be done using the audio track

00:02:40.750 --> 00:02:44.470
API, which has been
around since Cupcake.

00:02:44.470 --> 00:02:47.110
These low-level APIs provide
developers with an alternative

00:02:47.110 --> 00:02:49.680
to Android's high-level
media player.

00:02:49.680 --> 00:02:52.770
They make it possible to build
application level media players

00:02:52.770 --> 00:02:54.640
written in Java
while they player

00:02:54.640 --> 00:02:57.670
logic is implemented
in application code.

00:02:57.670 --> 00:03:00.330
This code will typically
call into the provided APIs

00:03:00.330 --> 00:03:02.830
in order to load and
extract the media samples,

00:03:02.830 --> 00:03:05.090
decode them, and render them.

00:03:05.090 --> 00:03:06.540
A developer may
optionally choose

00:03:06.540 --> 00:03:08.260
to implement more of
this functionality

00:03:08.260 --> 00:03:10.080
at the application level.

00:03:10.080 --> 00:03:12.430
For example, implementing
networking, buffering,

00:03:12.430 --> 00:03:14.730
and sample extraction
allows the developer

00:03:14.730 --> 00:03:18.400
to more easily customize
these components.

00:03:18.400 --> 00:03:21.310
Within Google, we've developed
our own application level media

00:03:21.310 --> 00:03:23.300
player called ExoPlayer.

00:03:23.300 --> 00:03:25.680
It supports both DASH and
SmoothStreaming adaptive

00:03:25.680 --> 00:03:28.450
playbacks, DRM
protected content,

00:03:28.450 --> 00:03:29.990
and has been
designed specifically

00:03:29.990 --> 00:03:33.310
to be easy to modify
and to extend.

00:03:33.310 --> 00:03:35.390
Google's YouTube and
Play Movies applications

00:03:35.390 --> 00:03:38.280
are already using ExoPlayer on
some of the more recent Android

00:03:38.280 --> 00:03:39.330
devices.

00:03:39.330 --> 00:03:41.630
And we're seeing
some great results.

00:03:41.630 --> 00:03:44.780
For example, in Play Movies,
dash playbacks using ExoPlayer

00:03:44.780 --> 00:03:47.600
have been shown to reduce
startup playback latency

00:03:47.600 --> 00:03:49.750
by 65%.

00:03:49.750 --> 00:03:53.690
A 40% less likely to rebuffer
and deliver video at 11%

00:03:53.690 --> 00:03:58.044
higher resolution on average
than when using media player.

00:03:58.044 --> 00:03:59.960
Since ExoPlayer is an
application level medial

00:03:59.960 --> 00:04:02.945
player, we're able to tweak it
and to add new functionality

00:04:02.945 --> 00:04:05.170
through Play Store updates.

00:04:05.170 --> 00:04:07.420
And we hope that this will
allow us to further improve

00:04:07.420 --> 00:04:09.651
these numbers going forward.

00:04:09.651 --> 00:04:11.400
We're really pleased
with the improvements

00:04:11.400 --> 00:04:14.050
that ExoPlayer has brought
to our own applications.

00:04:14.050 --> 00:04:16.230
But we recognize that
for many developers,

00:04:16.230 --> 00:04:18.579
the barrier to entry for
adopting a similar approach

00:04:18.579 --> 00:04:20.240
is quite high.

00:04:20.240 --> 00:04:23.950
ExoPlayer is itself around
16,000 lines of code.

00:04:23.950 --> 00:04:27.510
And using Android's low-level
media APIs can be a challenge.

00:04:27.510 --> 00:04:29.600
So creating such a
player from scratch

00:04:29.600 --> 00:04:31.920
requires a considerable effort.

00:04:31.920 --> 00:04:35.480
For this reason, we've decided
to open source ExoPlayer.

00:04:35.480 --> 00:04:38.380
We hope that this will lower
the barrier to entry allowing

00:04:38.380 --> 00:04:41.174
third party developers to
obtain similar improvements

00:04:41.174 --> 00:04:43.090
without having to incur
the cost of developing

00:04:43.090 --> 00:04:47.310
their own application level
media players from scratch.

00:04:47.310 --> 00:04:49.730
Let's take a look at how
ExoPlayer is designed

00:04:49.730 --> 00:04:52.840
and how it can be used
in your own application.

00:04:52.840 --> 00:04:54.635
Rather than being a
single Java Objects,

00:04:54.635 --> 00:04:58.640
an ExoPlayer is composed from
a range of modular components,

00:04:58.640 --> 00:05:01.510
each of which contributes
a desired behavior or piece

00:05:01.510 --> 00:05:03.762
of functionality to the player.

00:05:03.762 --> 00:05:05.770
At the top level, we
have the ExoPlayer

00:05:05.770 --> 00:05:08.250
object itself, which
does little beyond

00:05:08.250 --> 00:05:10.810
maintain the overall
player states.

00:05:10.810 --> 00:05:12.490
This object calls
into components

00:05:12.490 --> 00:05:14.500
called track
renderers whose job it

00:05:14.500 --> 00:05:17.260
is to render the
media during playback.

00:05:17.260 --> 00:05:19.600
The ExoPlayer library
provides a track renderer

00:05:19.600 --> 00:05:22.320
for playing video,
which uses a MediaCodec

00:05:22.320 --> 00:05:25.150
API to decode the video
samples and to render them

00:05:25.150 --> 00:05:26.830
onto the surface.

00:05:26.830 --> 00:05:28.650
It supports any video
format for which

00:05:28.650 --> 00:05:30.810
there exists an
underlying decoder.

00:05:30.810 --> 00:05:33.312
H.264 is commonly used.

00:05:33.312 --> 00:05:36.100
The ExoPlayer library also
provides the track renderer

00:05:36.100 --> 00:05:39.860
for playing audio, which uses
a MediaCodec API to decode

00:05:39.860 --> 00:05:43.680
the audio samples and the
audio track API to play them.

00:05:43.680 --> 00:05:46.900
Both the audio and video
track renderer implementations

00:05:46.900 --> 00:05:49.890
need to be provided with
a sample source component

00:05:49.890 --> 00:05:53.050
from which samples
can be obtained.

00:05:53.050 --> 00:05:55.082
For a developer who
doesn't require control

00:05:55.082 --> 00:05:57.290
over the networking, buffering,
and sample extraction

00:05:57.290 --> 00:05:59.670
behaviors, the ExoPlayer
library provides

00:05:59.670 --> 00:06:02.990
an implementation called
FrameworkSampleSource,

00:06:02.990 --> 00:06:06.160
which hooks into Android's
media extractor API.

00:06:06.160 --> 00:06:08.710
By doing this, it provides
support for all container

00:06:08.710 --> 00:06:11.200
formats supported by the
version of Android on which it's

00:06:11.200 --> 00:06:12.810
running.

00:06:12.810 --> 00:06:15.270
Let's take a look at
the corresponding code.

00:06:15.270 --> 00:06:17.580
First, we build
the sample source

00:06:17.580 --> 00:06:20.480
passing the URI where
the video is located.

00:06:20.480 --> 00:06:22.710
We then build our audio
and video renderers

00:06:22.710 --> 00:06:24.720
passing the sample source.

00:06:24.720 --> 00:06:27.450
And finally, we build
an instance of ExoPlayer

00:06:27.450 --> 00:06:31.210
passing the two renderers
and start the playback.

00:06:31.210 --> 00:06:35.960
This is the simplest example
of how ExoPlayer can be used.

00:06:35.960 --> 00:06:39.030
Let's now take a look at a
more complicated use case,

00:06:39.030 --> 00:06:40.930
specifically, how
ExoPlayer supports

00:06:40.930 --> 00:06:43.922
DASH and SmoothStreaming
adaptive playbacks.

00:06:43.922 --> 00:06:46.970
For DASH and SmoothStreaming,
the ExoPlayer library

00:06:46.970 --> 00:06:49.010
contains components
that completely

00:06:49.010 --> 00:06:52.720
replace Android's
media extractor API.

00:06:52.720 --> 00:06:54.610
Individual instances
of a component

00:06:54.610 --> 00:06:56.590
called ChunkSampleSource
are used

00:06:56.590 --> 00:07:00.090
to supply audio and video
samples to the renderers.

00:07:00.090 --> 00:07:03.520
Each ChunkSampleSource requires
a chunk source component

00:07:03.520 --> 00:07:05.370
from which chunks
of media, typically

00:07:05.370 --> 00:07:09.230
between 2 and 10 seconds in
duration, can be obtained.

00:07:09.230 --> 00:07:11.225
In this example, we'll
focus on DASH paybacks

00:07:11.225 --> 00:07:15.950
for which DASH MP4 ChunkSource
components should be used.

00:07:15.950 --> 00:07:19.440
Finally, each ChunkSource
requires a data source.

00:07:19.440 --> 00:07:21.505
As the name suggests,
data source components

00:07:21.505 --> 00:07:24.450
are responsible for
actually loading the media.

00:07:24.450 --> 00:07:27.070
In this case we use
HTTP DataSource,

00:07:27.070 --> 00:07:29.680
which moves data
over the network.

00:07:29.680 --> 00:07:32.100
Note that for DASH playbacks
audio and video are normally

00:07:32.100 --> 00:07:34.870
streamed separately, which
is why there are two HTTP

00:07:34.870 --> 00:07:38.350
DataSource components
rather than just one.

00:07:38.350 --> 00:07:40.130
Going back to
looking at code, you

00:07:40.130 --> 00:07:42.170
can see how each
component is injected

00:07:42.170 --> 00:07:44.700
with the component
on which it depends.

00:07:44.700 --> 00:07:47.920
The video renderer is injected
with a sample source, which

00:07:47.920 --> 00:07:50.200
is injected with the
ChunkSource, which

00:07:50.200 --> 00:07:52.750
is injected with the DataSource.

00:07:52.750 --> 00:07:54.950
This approach, where the
player is constructed

00:07:54.950 --> 00:07:57.950
from much of the components
using dependency injection,

00:07:57.950 --> 00:07:59.950
makes it easy for an
application developer

00:07:59.950 --> 00:08:02.070
to replace any or all
of these components

00:08:02.070 --> 00:08:05.540
with their own custom
implementations.

00:08:05.540 --> 00:08:08.220
What I've shown so far is a
slightly simplified object

00:08:08.220 --> 00:08:08.990
model.

00:08:08.990 --> 00:08:12.870
And in a full example, a few
more components are required.

00:08:12.870 --> 00:08:14.890
Firstly, something
called a LoadControl

00:08:14.890 --> 00:08:18.280
is required to manage the
buffering of the media chunks.

00:08:18.280 --> 00:08:21.410
Secondly, and most importantly
for adaptive playbacks,

00:08:21.410 --> 00:08:22.930
each ChunkSource
requires something

00:08:22.930 --> 00:08:25.380
called a format evaluator.

00:08:25.380 --> 00:08:28.000
Format evaluators select
from the available formats

00:08:28.000 --> 00:08:30.530
before each chunk of
media is requested.

00:08:30.530 --> 00:08:32.809
Here we're using a
fixed implementation

00:08:32.809 --> 00:08:36.220
for audio, which will
stick to a single format.

00:08:36.220 --> 00:08:38.710
For video, we're using an
adaptive implementation,

00:08:38.710 --> 00:08:40.380
which will select
a format suitable

00:08:40.380 --> 00:08:42.517
for the current network
conditions aiming

00:08:42.517 --> 00:08:44.350
to provide the user
with the highest quality

00:08:44.350 --> 00:08:47.760
possible without
causing any buffering.

00:08:47.760 --> 00:08:49.430
We now know how to
build an ExoPlayer

00:08:49.430 --> 00:08:53.050
for adaptive playbacks using
the standard components provided

00:08:53.050 --> 00:08:55.340
by the ExoPlayer library.

00:08:55.340 --> 00:08:58.160
I also touched on how easy it
is for an application developer

00:08:58.160 --> 00:09:00.175
to customize such a
player to better suit

00:09:00.175 --> 00:09:02.200
their particular use case.

00:09:02.200 --> 00:09:05.150
Let us now take a
look at some examples.

00:09:05.150 --> 00:09:07.600
Suppose that the developer
wants to add a persistent cache

00:09:07.600 --> 00:09:10.190
for buffered media data so
that if the user watches

00:09:10.190 --> 00:09:12.620
the same video twice,
the second time around it

00:09:12.620 --> 00:09:14.700
would be played from the cache.

00:09:14.700 --> 00:09:16.700
In the ExoPlayer
model, this is easy.

00:09:16.700 --> 00:09:20.260
The developer can simply insert
cache data source components

00:09:20.260 --> 00:09:22.042
when building the player.

00:09:22.042 --> 00:09:24.260
A cache DataSource
component is provided

00:09:24.260 --> 00:09:25.850
by the ExoPlayer library.

00:09:25.850 --> 00:09:27.810
But equally, a developer
is free to write

00:09:27.810 --> 00:09:31.120
their own implementation
from scratch.

00:09:31.120 --> 00:09:32.810
Similarly, a
developer may choose

00:09:32.810 --> 00:09:35.510
to replace the default
LoadControl implementation

00:09:35.510 --> 00:09:38.120
in order to achieve
different buffering behavior

00:09:38.120 --> 00:09:41.430
or implement an entirely
custom track renderer,

00:09:41.430 --> 00:09:45.620
for example, to render an
overlay on top of the video.

00:09:45.620 --> 00:09:47.190
Of most use for
adaptive playbacks

00:09:47.190 --> 00:09:50.950
is the ability to inject
custom format evaluators.

00:09:50.950 --> 00:09:52.670
This allows the
developer to experiment

00:09:52.670 --> 00:09:55.690
with their own
adaptive algorithms.

00:09:55.690 --> 00:09:57.530
There are many other
ways in which ExoPlayer

00:09:57.530 --> 00:09:58.922
can be extended and customized.

00:09:58.922 --> 00:10:00.380
And we're looking
forward to seeing

00:10:00.380 --> 00:10:02.860
what developers can do with it.

00:10:02.860 --> 00:10:05.540
In summary, we've seen how
Android's low-level media

00:10:05.540 --> 00:10:08.740
APIs allow the development
of powerful application level

00:10:08.740 --> 00:10:11.590
media players, which can
be more easily updated,

00:10:11.590 --> 00:10:13.660
modified, and
extended by developers

00:10:13.660 --> 00:10:17.016
than is possible with Android
standard media player.

00:10:17.016 --> 00:10:19.000
Google is using
ExoPlayer to deliver

00:10:19.000 --> 00:10:21.520
some great benefits for
our own applications.

00:10:21.520 --> 00:10:23.860
And we hope that by
open sourcing ExoPlayer,

00:10:23.860 --> 00:10:27.490
we will allow other developers
to achieve similar results.

00:10:27.490 --> 00:10:29.650
So if you're curious
and want to learn more,

00:10:29.650 --> 00:10:31.700
then visit the developer guide.

00:10:31.700 --> 00:10:33.790
You're going to find a
ton of useful information

00:10:33.790 --> 00:10:37.485
as well as some great examples
to help get you started.

