WEBVTT
Kind: captions
Language: en

00:00:01.880 --> 00:00:04.780
The simplest type of vector
arithmetic in R is just adding

00:00:04.780 --> 00:00:07.090
the number to a vector.

00:00:07.090 --> 00:00:10.974
Let's create a vector
v of values 10, 20,

00:00:10.974 --> 00:00:15.430
30, 40, 50, and 60.

00:00:15.430 --> 00:00:18.400
Then we'll add 1
to this vector.

00:00:18.400 --> 00:00:21.430
When we add a single number to
a vector, it adds that number

00:00:21.430 --> 00:00:24.330
to each element of the vector.

00:00:24.330 --> 00:00:27.150
We can also do simple
multiplication, which works in

00:00:27.150 --> 00:00:30.210
the same way.

00:00:30.210 --> 00:00:33.000
Things get a little trickier
when you multiply two vectors,

00:00:33.000 --> 00:00:36.800
where each are longer
than length 1.

00:00:36.800 --> 00:00:40.600
Let's create a second vector
called w that takes values 2,

00:00:40.600 --> 00:00:45.180
3, 4, 5, 6, and 7.

00:00:45.180 --> 00:00:48.100
I've constructed this vector
using a special notation of

00:00:48.100 --> 00:00:51.500
2:7, which generates
a sequence of

00:00:51.500 --> 00:00:54.220
integers 2 through 7.

00:00:54.220 --> 00:00:56.520
This is a handy way to create
a sequence of all integers

00:00:56.520 --> 00:00:57.770
between two values.

00:01:00.090 --> 00:01:03.230
Let's multiply v and w.

00:01:03.230 --> 00:01:05.950
Is that what you expected?

00:01:05.950 --> 00:01:10.360
R performs element-wise
vector multiplication.

00:01:10.360 --> 00:01:13.610
That is, it'll take the first
value in each vector and

00:01:13.610 --> 00:01:14.940
multiply them.

00:01:14.940 --> 00:01:17.030
Then it'll take the second value
from each vector and

00:01:17.030 --> 00:01:20.920
multiply those, and so on.

00:01:20.920 --> 00:01:23.590
When working with vectors, R
works in the same way when

00:01:23.590 --> 00:01:26.500
doing addition, subtraction,
division, and other basic

00:01:26.500 --> 00:01:27.750
operations.

00:01:29.980 --> 00:01:32.310
Things get a little more
confusing when we multiply

00:01:32.310 --> 00:01:35.580
vectors of different lengths.

00:01:35.580 --> 00:01:38.650
Let's overwrite w with a vector
of length 2 that takes

00:01:38.650 --> 00:01:42.760
values 5 and 10.

00:01:42.760 --> 00:01:45.970
When we multiply v and w now,
the result might be

00:01:45.970 --> 00:01:47.690
surprising.

00:01:47.690 --> 00:01:51.990
We get another vector
with six elements.

00:01:51.990 --> 00:01:56.030
Let's take a closer look
at what happened.

00:01:56.030 --> 00:01:57.950
The first two values
make sense.

00:01:57.950 --> 00:02:00.800
They are, again, the
element-wise multiplication.

00:02:00.800 --> 00:02:04.350
However, when we get to the
third value, it appears to be

00:02:04.350 --> 00:02:09.139
the product of the third value
of v and the first value of w.

00:02:09.139 --> 00:02:12.060
The fourth value is the product
of the last value of v

00:02:12.060 --> 00:02:14.530
and the second value of w.

00:02:14.530 --> 00:02:17.450
What we've just observed is that
are R recycled the vector

00:02:17.450 --> 00:02:20.450
w so that it could complete the
multiplication across the

00:02:20.450 --> 00:02:24.620
full length of v. It
also did so without

00:02:24.620 --> 00:02:27.100
any warning or error.

00:02:27.100 --> 00:02:30.080
R is built to recycle vectors,
and it doesn't always tell you

00:02:30.080 --> 00:02:31.840
when it does so.

00:02:31.840 --> 00:02:34.980
Let's do one more vector
multiplication.

00:02:34.980 --> 00:02:38.990
Well, overwrite w one more time
and make it a vector of

00:02:38.990 --> 00:02:45.450
length 4 with values
5, 10, 15, and 20.

00:02:45.450 --> 00:02:46.920
Here this vector has
been created using

00:02:46.920 --> 00:02:49.150
the sequence function.

00:02:49.150 --> 00:02:52.900
The first argument says where
the sequence starts, the

00:02:52.900 --> 00:02:57.330
second where the sequence should
end, and the third, how

00:02:57.330 --> 00:02:59.130
big of jumps to take
to get from the

00:02:59.130 --> 00:03:02.290
first to the last value.

00:03:02.290 --> 00:03:05.820
Here again, we multiply
out v and w.

00:03:05.820 --> 00:03:08.330
R again will recycle
w, but this time

00:03:08.330 --> 00:03:10.740
it gives us a warning.

00:03:10.740 --> 00:03:14.870
In this case, when R recycled w,
it still had elements left

00:03:14.870 --> 00:03:17.670
over when it ran out of the
elements with v, so it wanted

00:03:17.670 --> 00:03:20.960
to make sure that we
are aware of this.

00:03:20.960 --> 00:03:22.520
There are several ways
we can perform

00:03:22.520 --> 00:03:25.010
arithmetic in R using vectors.

00:03:25.010 --> 00:03:28.170
We can raise every element in
a vector to a power or a

00:03:28.170 --> 00:03:30.620
different power for
each element.

00:03:30.620 --> 00:03:33.410
Here I have again used the
integer colon integer notation

00:03:33.410 --> 00:03:38.240
to create a vector of values
2, 3, 4, 5, 6, 7.

00:03:38.240 --> 00:03:41.340
Many functions also work nicely
across vectors, such as

00:03:41.340 --> 00:03:42.590
the square root function.

00:03:45.260 --> 00:03:47.140
In the next video, we'll
learn about matrices.

