WEBVTT
Kind: captions
Language: en

00:00:00.390 --> 00:00:01.765
MALE SPEAKER:
Welcome, everybody.

00:00:01.765 --> 00:00:03.970
We're here at the
Devoxx 2014 conference.

00:00:03.970 --> 00:00:05.950
And I'm here with Brian.

00:00:05.950 --> 00:00:06.530
Hi, Brian.

00:00:06.530 --> 00:00:10.870
And we're here to talk about
cloud and the Google Cloud

00:00:10.870 --> 00:00:12.140
Platform obviously.

00:00:12.140 --> 00:00:16.510
And maybe we want to start with
Compute Engine, because that's

00:00:16.510 --> 00:00:18.430
what maybe a lot of
people are familiar with,

00:00:18.430 --> 00:00:19.971
at least the concept,
so tell us more

00:00:19.971 --> 00:00:22.220
what Google Cloud
Compute Engine is?

00:00:22.220 --> 00:00:24.290
Then we'll talk about
Docker and even Kubernetes.

00:00:24.290 --> 00:00:25.334
Really exciting, I think.

00:00:25.334 --> 00:00:26.250
BRIAN DORSEY: Awesome.

00:00:26.250 --> 00:00:26.750
OK.

00:00:26.750 --> 00:00:30.680
So Compute Engine is Google's
virtual machines as a service.

00:00:30.680 --> 00:00:32.369
So it's basically
a virtual machine

00:00:32.369 --> 00:00:34.770
running Linux or
Windows, then running

00:00:34.770 --> 00:00:36.130
that on Google's infrastructure.

00:00:36.130 --> 00:00:39.350
So you get very reliable
consistent performance.

00:00:39.350 --> 00:00:41.951
You get very, very
good network access.

00:00:41.951 --> 00:00:43.950
You know, we're running
in the same data centers

00:00:43.950 --> 00:00:46.440
that Google runs
its own software in,

00:00:46.440 --> 00:00:49.180
and so you can run your software
right next to our software

00:00:49.180 --> 00:00:51.372
and have it live on the
internet very closely.

00:00:51.372 --> 00:00:52.830
MALE SPEAKER: So
one thing I really

00:00:52.830 --> 00:00:54.580
like about Compute
Engine, and many things

00:00:54.580 --> 00:00:56.700
I think that people
would like about

00:00:56.700 --> 00:00:58.700
Compute Engine, but the API.

00:00:58.700 --> 00:01:02.180
Yeah, so what does the
API allow, and why would

00:01:02.180 --> 00:01:03.180
people should even care?

00:01:03.180 --> 00:01:04.971
BRIAN DORSEY: Yeah, so
I'll take a step up.

00:01:04.971 --> 00:01:07.130
So we have command line
tools, and web app tools,

00:01:07.130 --> 00:01:09.540
and third-party
tools, and all of them

00:01:09.540 --> 00:01:12.280
talk to Compute Engine,
the service, via this API.

00:01:12.280 --> 00:01:17.370
And so it's a REST JSON API
that's available over HTTP.

00:01:17.370 --> 00:01:20.557
We, of course, have
clients in about a dozen

00:01:20.557 --> 00:01:22.890
different programming languages,
but it's straight REST.

00:01:22.890 --> 00:01:25.070
So you can get it
off token and then

00:01:25.070 --> 00:01:28.342
just talk to it
directly over HTTP.

00:01:28.342 --> 00:01:30.050
MALE SPEAKER: So
Compute Engine is great.

00:01:30.050 --> 00:01:32.980
It has all those great
features, but all you

00:01:32.980 --> 00:01:34.870
have is a machine at
the end of the day.

00:01:34.870 --> 00:01:36.990
It's just like really
low level stuff.

00:01:36.990 --> 00:01:39.240
So at some point, you need
to build the infrastructure

00:01:39.240 --> 00:01:40.740
on top of that.

00:01:40.740 --> 00:01:43.410
So there is this
thing that everybody's

00:01:43.410 --> 00:01:46.460
talking about including here
at Devoxx, which is Docker.

00:01:46.460 --> 00:01:49.160
And the promise of Docker
is to be something that's

00:01:49.160 --> 00:01:52.280
relevant to developers,
to production,

00:01:52.280 --> 00:01:54.270
and solve a number of problems.

00:01:54.270 --> 00:01:56.240
So what are we
doing with Docker?

00:01:56.240 --> 00:01:58.570
And does that play even
well with Compute Engine?

00:01:58.570 --> 00:01:59.820
BRIAN DORSEY: Yeah absolutely.

00:01:59.820 --> 00:02:01.670
Yes and yes, of course.

00:02:01.670 --> 00:02:04.750
And Google is basically
all in on containers.

00:02:04.750 --> 00:02:06.800
We've been doing
containers for a while.

00:02:06.800 --> 00:02:09.570
We contributed some of the
early patches to a Linux kernel,

00:02:09.570 --> 00:02:10.740
the [? C ?] group stuff.

00:02:10.740 --> 00:02:13.240
We're continuing to work
with the Docker folks

00:02:13.240 --> 00:02:14.810
on a libcontainer.

00:02:14.810 --> 00:02:17.700
But containers are basically
this way of packaging up

00:02:17.700 --> 00:02:22.240
your application and all of
its environment and OS level

00:02:22.240 --> 00:02:23.300
resources.

00:02:23.300 --> 00:02:25.130
So they'd always seize
the same environment

00:02:25.130 --> 00:02:25.830
wherever you run it.

00:02:25.830 --> 00:02:26.625
So you can run it
via your laptop.

00:02:26.625 --> 00:02:27.870
You can run it in the cloud.

00:02:27.870 --> 00:02:28.744
It's always the same.

00:02:28.744 --> 00:02:32.380
And I think this is super
powerful, because like Compute

00:02:32.380 --> 00:02:35.550
Engine is absolutely
a fantastic service,

00:02:35.550 --> 00:02:37.390
but one way of looking
at it is that it's

00:02:37.390 --> 00:02:40.510
basically re-implementing as
software APIs all the things we

00:02:40.510 --> 00:02:42.390
used to do physically
in the data center.

00:02:42.390 --> 00:02:44.930
So you go to the data center,
and you plug a machine in,

00:02:44.930 --> 00:02:47.857
you hook drive up, you
connect it to the network,

00:02:47.857 --> 00:02:49.440
you boot it up, you
turn it on, and we

00:02:49.440 --> 00:02:50.550
have APIs for all of that.

00:02:50.550 --> 00:02:52.560
And it's great, because
you can be automate it.

00:02:52.560 --> 00:02:54.560
It's way more efficient.

00:02:54.560 --> 00:02:57.835
But containers, this abstraction
they give you, the isolation

00:02:57.835 --> 00:02:59.910
that they give you
is really allowing

00:02:59.910 --> 00:03:02.290
us to build abstractions
that are higher

00:03:02.290 --> 00:03:04.490
and let us think about
software on its own terms,

00:03:04.490 --> 00:03:07.820
rather than how it fits into
a particular physical box.

00:03:07.820 --> 00:03:10.950
MALE SPEAKER: So containers are
great, Docker in particular.

00:03:10.950 --> 00:03:14.070
We would encourage
people to try it out.

00:03:14.070 --> 00:03:16.350
They will have some
magical moment I think.

00:03:16.350 --> 00:03:18.320
I hope.

00:03:18.320 --> 00:03:21.210
But even though you're using
Docker, at the end of day,

00:03:21.210 --> 00:03:23.250
you have like this
one container,

00:03:23.250 --> 00:03:26.930
and it does great things, but
we have a great load balancer.

00:03:26.930 --> 00:03:28.460
We probably want to scale.

00:03:28.460 --> 00:03:30.970
That's kind of what we do
and what a lot of people

00:03:30.970 --> 00:03:35.630
should do probably, offer
great services to their users.

00:03:35.630 --> 00:03:39.430
So how do we solve the problem
of not reinventing the wheel

00:03:39.430 --> 00:03:43.494
in terms of load balancing
a cluster of containers?

00:03:43.494 --> 00:03:44.410
BRIAN DORSEY: Totally.

00:03:44.410 --> 00:03:48.720
So yeah, we're super
excited about that.

00:03:48.720 --> 00:03:50.825
In fact, to solve
that exact problem,

00:03:50.825 --> 00:03:54.020
we've started an open source
project called Kubernetes.

00:03:54.020 --> 00:03:58.100
So you can visit kubernetes.io
and find out all about it.

00:03:58.100 --> 00:04:01.010
But in short, you
have this container,

00:04:01.010 --> 00:04:03.260
and it creates this isolated
world for a given process

00:04:03.260 --> 00:04:03.860
to run.

00:04:03.860 --> 00:04:05.693
And I think it's easiest
to think about them

00:04:05.693 --> 00:04:08.260
just as processes that always
have their own stuff with them,

00:04:08.260 --> 00:04:09.550
right?

00:04:09.550 --> 00:04:11.870
And so it works
very well to start

00:04:11.870 --> 00:04:14.151
a bunch of those
up on one computer.

00:04:14.151 --> 00:04:14.650
It's great.

00:04:14.650 --> 00:04:17.510
You can be like, OK,
I'm all in on containers

00:04:17.510 --> 00:04:18.324
like, I believe it.

00:04:18.324 --> 00:04:19.490
This is going to work great.

00:04:19.490 --> 00:04:23.170
I'll run containers across
500 of my machines right.

00:04:23.170 --> 00:04:25.280
And I'll run 50 containers
on each machine.

00:04:25.280 --> 00:04:27.510
And pretty soon,
you've got quite a lot

00:04:27.510 --> 00:04:30.190
of containers running.

00:04:30.190 --> 00:04:31.690
It becomes challenging
to figure out

00:04:31.690 --> 00:04:33.860
how they should
talk to each other,

00:04:33.860 --> 00:04:37.440
how to do version
upgrades between things,

00:04:37.440 --> 00:04:40.890
how to like you say
load balance and keep

00:04:40.890 --> 00:04:42.200
this whole system healthy.

00:04:42.200 --> 00:04:46.690
And so Kubernetes is
directly an extraction

00:04:46.690 --> 00:04:48.500
of Google's experience
like running

00:04:48.500 --> 00:04:50.430
large container-based systems.

00:04:50.430 --> 00:04:52.470
Some of the same
engineers who've

00:04:52.470 --> 00:04:55.170
worked on multiple generations
of internal scheduling tools

00:04:55.170 --> 00:04:56.930
at Google are working
on Kubernetes.

00:04:56.930 --> 00:04:58.780
MALE SPEAKER: So
it's probably worth

00:04:58.780 --> 00:05:01.310
mentioning that Kubernetes
is a greenfield project.

00:05:01.310 --> 00:05:04.640
I mean they started from scratch
with a lot of experience that

00:05:04.640 --> 00:05:07.004
went into this, but it is a
fully open source project.

00:05:07.004 --> 00:05:08.670
The community that's
pretty much driving

00:05:08.670 --> 00:05:10.970
at this point with a
lot of people on board

00:05:10.970 --> 00:05:13.214
and using this in lots
of different context.

00:05:13.214 --> 00:05:15.630
BRIAN DORSEY: And we're doing
the whole thing in the open.

00:05:15.630 --> 00:05:17.601
We're working very,
very hard to make sure

00:05:17.601 --> 00:05:18.600
that it runs everywhere.

00:05:18.600 --> 00:05:20.990
Like you can actually run
Kubernetes on just your laptop

00:05:20.990 --> 00:05:24.540
or you can run it
on machines you own.

00:05:24.540 --> 00:05:28.250
You can run it on multiple
different cloud providers.

00:05:28.250 --> 00:05:32.830
We've got partners like--
it's happening on GitHub,

00:05:32.830 --> 00:05:34.830
and so many people
are participating.

00:05:34.830 --> 00:05:38.441
We've got thousands of stars,
like hundreds of contributors.

00:05:38.441 --> 00:05:40.440
And that's everything
from individual developers

00:05:40.440 --> 00:05:42.950
kind of working on their own
time excited about this stuff

00:05:42.950 --> 00:05:45.120
to some very large companies,
including Microsoft,

00:05:45.120 --> 00:05:48.320
Red Hat, CoreOS, Docker
themselves-- a whole list

00:05:48.320 --> 00:05:50.350
of folks that are
participating in this project.

00:05:50.350 --> 00:05:52.840
MALE SPEAKER: And
obviously as Google, we

00:05:52.840 --> 00:05:54.500
have a number of
things that maybe we

00:05:54.500 --> 00:05:57.700
could do extra in terms of
not just providing the bits,

00:05:57.700 --> 00:05:59.824
but maybe running this.

00:05:59.824 --> 00:06:01.240
BRIAN DORSEY: Yeah,
so then if you

00:06:01.240 --> 00:06:03.010
run Kubernetes on
Google Cloud Platform,

00:06:03.010 --> 00:06:04.310
it runs extremely well.

00:06:04.310 --> 00:06:06.050
You get all the
benefits of our years

00:06:06.050 --> 00:06:08.280
of building this infrastructure.

00:06:08.280 --> 00:06:09.745
It taps in very
nicely like you say

00:06:09.745 --> 00:06:11.470
to our load balancer
and other things.

00:06:11.470 --> 00:06:13.907
And we just announced recently
an actual hosted version

00:06:13.907 --> 00:06:14.490
of Kubernetes.

00:06:14.490 --> 00:06:16.920
So if you don't want to go to
GitHub and like build the thing

00:06:16.920 --> 00:06:18.753
and install it and
whatever, you can kind of

00:06:18.753 --> 00:06:20.650
go to our web console,
create a cluster,

00:06:20.650 --> 00:06:22.580
and just start using
it immediately.

00:06:22.580 --> 00:06:24.861
MALE SPEAKER: And
everything's taken care of.

00:06:24.861 --> 00:06:27.360
BRIAN DORSEY: All the cluster
and like management of itself.

00:06:27.360 --> 00:06:29.193
MALE SPEAKER: The
networking, the container,

00:06:29.193 --> 00:06:31.110
and keeping nodes alive, and--

00:06:31.110 --> 00:06:33.531
BRIAN DORSEY: And actually,
that's a really key point.

00:06:33.531 --> 00:06:36.300
One of the key differences
with Kubernetes,

00:06:36.300 --> 00:06:38.250
as opposed to many
other approaches

00:06:38.250 --> 00:06:40.630
to kind of managing a
cluster of containers,

00:06:40.630 --> 00:06:42.430
is that it's declarative,
and it's actively

00:06:42.430 --> 00:06:44.500
maintaining the state
of your environment.

00:06:44.500 --> 00:06:47.020
So when you start a
container what you do

00:06:47.020 --> 00:06:49.020
is you don't actually
say, start this container,

00:06:49.020 --> 00:06:51.810
you say, I want this
container to be running.

00:06:51.810 --> 00:06:54.540
And Kubernetes
watches the health,

00:06:54.540 --> 00:06:55.832
make sure it stays running.

00:06:55.832 --> 00:06:57.290
And if ever anything
happens to it,

00:06:57.290 --> 00:07:01.315
it will replace it with
another copy of that container.

00:07:01.315 --> 00:07:02.940
And that's true for
your entire system.

00:07:02.940 --> 00:07:03.800
So if you create--

00:07:03.800 --> 00:07:04.560
MALE SPEAKER: How
do you express that?

00:07:04.560 --> 00:07:05.393
Is that declarative?

00:07:05.393 --> 00:07:06.220
Is that an API?

00:07:06.220 --> 00:07:08.710
BRIAN DORSEY: Yeah, it's a
declarative JSON document.

00:07:08.710 --> 00:07:11.300
So you create a tree
of configuration,

00:07:11.300 --> 00:07:12.764
and you push that up to the API.

00:07:12.764 --> 00:07:14.180
And then it will
keep the system--

00:07:14.180 --> 00:07:15.972
it will set up the
system to look that way,

00:07:15.972 --> 00:07:17.596
and then it'll keep
it looking that way

00:07:17.596 --> 00:07:18.950
until you tell it otherwise.

00:07:18.950 --> 00:07:19.880
And then when you want
to scale, you just

00:07:19.880 --> 00:07:21.130
say, Oh, I want more of those.

00:07:21.130 --> 00:07:24.340
And you resubmit the
document, and you get more.

00:07:24.340 --> 00:07:26.940
MALE SPEAKER: So what is
the status of Kubernetes

00:07:26.940 --> 00:07:30.134
as such and maybe the container
engine that you just mentioned,

00:07:30.134 --> 00:07:31.300
which is the hosted version?

00:07:31.300 --> 00:07:33.716
BRIAN DORSEY: And both of these
things are very, very new.

00:07:33.716 --> 00:07:36.880
The entire container ecosystem
Docker and all the people

00:07:36.880 --> 00:07:39.819
contributing to that, Kubernetes
itself, are all very new.

00:07:39.819 --> 00:07:41.360
So this is moving
very, very quickly.

00:07:41.360 --> 00:07:44.010
And to be honest, there's
a few rough edges still.

00:07:44.010 --> 00:07:45.830
So if you play with
Kubernetes today,

00:07:45.830 --> 00:07:48.630
you'll probably find
some challenges.

00:07:48.630 --> 00:07:51.660
If you do find those
issues, please let us know.

00:07:51.660 --> 00:07:54.250
On kubernetes.io, we
are active on IRC.

00:07:54.250 --> 00:07:56.860
We're of course
active on GitHub,

00:07:56.860 --> 00:07:58.037
email lists, and the like.

00:07:58.037 --> 00:08:00.120
Let us know what works for
you, what doesn't work.

00:08:00.120 --> 00:08:01.620
If you find things
you can't do, you

00:08:01.620 --> 00:08:03.830
run into it some of these
rough edges, let us know,

00:08:03.830 --> 00:08:04.944
and we'll make it better.

00:08:04.944 --> 00:08:05.860
MALE SPEAKER: Awesome.

00:08:05.860 --> 00:08:07.280
Thank you Brian.

00:08:07.280 --> 00:08:10.820
Think containers-- cloud is
an awesome place to be in.

00:08:10.820 --> 00:08:11.800
It's super exciting.

00:08:11.800 --> 00:08:13.300
BRIAN DORSEY:
Containers everywhere.

00:08:13.300 --> 00:08:16.280
MALE SPEAKER: Do try all of
that on the cloud platform,

00:08:16.280 --> 00:08:18.670
on your laptop, anywhere.

00:08:18.670 --> 00:08:19.721
Just build awesome apps.

00:08:19.721 --> 00:08:20.220
Cheers.

00:08:20.220 --> 00:08:21.761
BRIAN DORSEY: Go
build awesome stuff.

00:08:21.761 --> 00:08:23.020
Thank you very much.

