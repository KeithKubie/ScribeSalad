WEBVTT
Kind: captions
Language: en

00:00:00.090 --> 00:00:02.580
JAKE: We've been taking your
questions during the summit

00:00:02.580 --> 00:00:06.890
and before and we're going to
put them to these guys here.

00:00:06.890 --> 00:00:09.930
And these people are Linus
Upson, VP for Chrome;

00:00:09.930 --> 00:00:12.420
Hiroshi Lockheimer,
the VP for Android;

00:00:12.420 --> 00:00:15.250
Arnaud Weber, the engineering
director for Chrome Desktop

00:00:15.250 --> 00:00:19.510
and Mobile; Darin Fisher, Chrome
Platform engineering lead;

00:00:19.510 --> 00:00:22.080
Ian Ellison-Taylor, director of
product management on the web

00:00:22.080 --> 00:00:25.370
platform; and Erik Kay,
director of software engineering

00:00:25.370 --> 00:00:28.110
on Chrome Apps Extensions
and Native Client.

00:00:28.110 --> 00:00:33.400
And I'm Jake, just Jake.

00:00:33.400 --> 00:00:35.150
I like a small child
at New Year who's

00:00:35.150 --> 00:00:36.983
been allowed to stay
until midnight with all

00:00:36.983 --> 00:00:37.683
of the adults.

00:00:37.683 --> 00:00:39.566
It's great.

00:00:39.566 --> 00:00:41.690
So we're going to go through
the questions as well.

00:00:41.690 --> 00:00:43.564
But if you have related
questions or comments

00:00:43.564 --> 00:00:46.990
or you feel like someone hasn't
answered the question properly,

00:00:46.990 --> 00:00:48.320
then please tweet about it.

00:00:48.320 --> 00:00:51.050
Use the hashtag, which
is Chrome Dev summit,

00:00:51.050 --> 00:00:53.630
or tweet directly at
Chrome Dev summit.

00:00:53.630 --> 00:00:56.210
And the internet's Paul Irish
is going to be monitoring that.

00:00:56.210 --> 00:00:58.600
And he's going to be using
his internet powers to direct

00:00:58.600 --> 00:01:01.970
those questions onto the
screen, and I'll read them out.

00:01:01.970 --> 00:01:05.550
So OK, let's get started
with the first question.

00:01:05.550 --> 00:01:09.550
So developers can build for
the web for WebViews on Native.

00:01:09.550 --> 00:01:11.744
How should developers
decide which to use?

00:01:11.744 --> 00:01:13.160
Do you want to
kick us off, Linus?

00:01:13.160 --> 00:01:14.669
LINUS UPSON: I'll
take a stab at it.

00:01:14.669 --> 00:01:16.210
I think ultimately
it depends on what

00:01:16.210 --> 00:01:17.710
you're trying to accomplish.

00:01:17.710 --> 00:01:20.832
And so it's all about picking
the right tool for the job.

00:01:20.832 --> 00:01:23.040
For many applications, you
want to write a native app

00:01:23.040 --> 00:01:24.360
on a mobile device.

00:01:24.360 --> 00:01:26.250
For many other
applications, you want

00:01:26.250 --> 00:01:28.750
something that exists on the
web just a link away in a web

00:01:28.750 --> 00:01:29.610
browser.

00:01:29.610 --> 00:01:31.318
Other times, you want
to be able to share

00:01:31.318 --> 00:01:33.950
code across different platforms,
both the web end on mobile,

00:01:33.950 --> 00:01:36.314
and so you want to be
able to use WebView

00:01:36.314 --> 00:01:37.230
for doing development.

00:01:37.230 --> 00:01:39.350
But what we're trying
to do is just give you

00:01:39.350 --> 00:01:40.940
the best of all
possible tools to get

00:01:40.940 --> 00:01:44.190
done what you want to get done.

00:01:44.190 --> 00:01:45.940
HIROSHI LOCKHEIMER:
Just to add to that,

00:01:45.940 --> 00:01:48.460
we noticed in the Play
store that a lot of apps

00:01:48.460 --> 00:01:50.150
actually use WebView.

00:01:50.150 --> 00:01:53.337
A huge number actually of
apps, a big proportion of apps,

00:01:53.337 --> 00:01:54.170
already use WebView.

00:01:54.170 --> 00:01:56.680
So it may also not be
an either/or choice.

00:01:56.680 --> 00:01:58.729
Like, some apps
do both in the app

00:01:58.729 --> 00:02:01.270
depending on what the screen is
and what you're trying to do.

00:02:01.270 --> 00:02:03.180
So a hybrid approach,
I think, is good, too.

00:02:03.180 --> 00:02:05.837
I agreed completely with Linus.

00:02:05.837 --> 00:02:07.420
JAKE: So if we were
building something

00:02:07.420 --> 00:02:14.080
like a website for a shop, what
kind of properties of the app

00:02:14.080 --> 00:02:16.810
or product would
you use to decide

00:02:16.810 --> 00:02:19.070
which to use, like
WebView native?

00:02:19.070 --> 00:02:22.516
What kind of properties?

00:02:22.516 --> 00:02:24.820
LINUS UPSON: Well, I think
some of the obvious ones

00:02:24.820 --> 00:02:26.580
are if you're
building a 3D game,

00:02:26.580 --> 00:02:29.202
you're probably going to be
building on native for mobile.

00:02:29.202 --> 00:02:31.160
If you're going to be
building something that's

00:02:31.160 --> 00:02:33.750
very text intensive
and layout intensive,

00:02:33.750 --> 00:02:35.370
the web is probably
a much better tool

00:02:35.370 --> 00:02:36.850
for solving that job.

00:02:36.850 --> 00:02:38.242
So it really depends.

00:02:38.242 --> 00:02:40.450
I mean, there's thousands
of different kinds of apps,

00:02:40.450 --> 00:02:43.320
and there's hundreds of
different dev stacks out there,

00:02:43.320 --> 00:02:47.870
and you just need to pick
the right one for the job.

00:02:47.870 --> 00:02:50.450
JAKE: I mean, we're getting 3D
on the web now as well, right?

00:02:50.450 --> 00:02:54.090
We've got WebGL.

00:02:54.090 --> 00:02:56.222
Are we seeing the web
as being something

00:02:56.222 --> 00:02:58.180
that's going to grow and
take away from native?

00:02:58.180 --> 00:03:03.480
Or is there always going to
be a use case for native?

00:03:03.480 --> 00:03:05.880
Or is the web trying to go
to take over from native

00:03:05.880 --> 00:03:09.380
or is it a different use case?

00:03:09.380 --> 00:03:11.580
LINUS UPSON: It depends.

00:03:11.580 --> 00:03:14.610
We saw this play out on
desktops and laptops before.

00:03:14.610 --> 00:03:17.950
It's not as if native apps went
away when the web came about.

00:03:17.950 --> 00:03:19.950
But the web enabled a
whole new set of use cases

00:03:19.950 --> 00:03:22.880
that you couldn't do inside
of native applications.

00:03:22.880 --> 00:03:25.330
The guys who started
Google Maps originally

00:03:25.330 --> 00:03:27.090
were building a Windows app.

00:03:27.090 --> 00:03:29.840
And then they figured out,
hey, we can do this on the web.

00:03:29.840 --> 00:03:32.200
And because of the
lack of friction

00:03:32.200 --> 00:03:34.560
on the web where you can get
to anything by just typing

00:03:34.560 --> 00:03:37.090
in a URL or clicking
on a link, you

00:03:37.090 --> 00:03:38.840
had many more people
could use maps easily

00:03:38.840 --> 00:03:40.839
because they didn't have
to download and install

00:03:40.839 --> 00:03:41.500
an application.

00:03:41.500 --> 00:03:43.760
And so depending on what
you're trying to do--

00:03:43.760 --> 00:03:46.840
and I think another
example I heard recently

00:03:46.840 --> 00:03:48.672
was Ticketmaster.

00:03:48.672 --> 00:03:50.630
So they actually spent
a lot of time and effort

00:03:50.630 --> 00:03:52.280
and built this really
great mobile app.

00:03:52.280 --> 00:03:54.120
But most people don't
buy tickets every day.

00:03:54.120 --> 00:03:56.160
They buy them like
couple times a year.

00:03:56.160 --> 00:03:58.172
And so that's a use
case where they probably

00:03:58.172 --> 00:03:59.380
really want to be on the web.

00:03:59.380 --> 00:04:01.520
And our job, as
the Chrome team, is

00:04:01.520 --> 00:04:04.120
to make it so they can
deliver an experience as

00:04:04.120 --> 00:04:07.180
rich and immersive as
you'd get in a native app,

00:04:07.180 --> 00:04:09.343
but not force the
user to install

00:04:09.343 --> 00:04:10.926
an application that
they're only going

00:04:10.926 --> 00:04:13.502
to use once or twice a year.

00:04:13.502 --> 00:04:14.960
JAKE: So one of
the other questions

00:04:14.960 --> 00:04:17.959
we had is some developers choose
to build native apps rather

00:04:17.959 --> 00:04:20.344
than for the web
because of performance.

00:04:20.344 --> 00:04:21.760
What are we doing
to address that?

00:04:21.760 --> 00:04:23.780
And so this
performance difference

00:04:23.780 --> 00:04:25.860
that we see between
Chrome and native apps,

00:04:25.860 --> 00:04:28.380
is that a fundamental
problem with the web?

00:04:28.380 --> 00:04:31.102
Or is this something
that we can fix?

00:04:31.102 --> 00:04:32.560
LINUS UPSON: Why
don't we ask Darin

00:04:32.560 --> 00:04:35.350
since he's responsible
for fixing it.

00:04:35.350 --> 00:04:36.030
[LAUGHTER]

00:04:36.030 --> 00:04:36.950
IAN ELLISON-TAYLOR:
It's all Darin's fault.

00:04:36.950 --> 00:04:37.630
DARIN FISHER: There you go.

00:04:37.630 --> 00:04:38.590
Yeah, absolutely.

00:04:38.590 --> 00:04:40.830
I mean, performance is one
of our biggest focuses,

00:04:40.830 --> 00:04:43.240
and it seems like the
area of great opportunity.

00:04:43.240 --> 00:04:45.840
This web-rendering
engine was designed

00:04:45.840 --> 00:04:48.750
in the era of desktop computing
and bringing it to mobile's

00:04:48.750 --> 00:04:50.719
been a challenge.

00:04:50.719 --> 00:04:53.010
But it's one where there's
lots and lots of opportunity

00:04:53.010 --> 00:04:54.790
to make the system
work a lot better.

00:04:54.790 --> 00:04:56.130
It's actually very interesting.

00:04:56.130 --> 00:04:58.100
If you think about
the web, web platform

00:04:58.100 --> 00:05:01.830
is this retained model where
you describe your scene,

00:05:01.830 --> 00:05:03.560
and if you describe
it in the right way,

00:05:03.560 --> 00:05:05.994
the browser can actually
do a really good job

00:05:05.994 --> 00:05:06.660
of rendering it.

00:05:06.660 --> 00:05:08.910
The problem is there's just
a lot of ways in which you

00:05:08.910 --> 00:05:12.175
can describe things incorrectly
and end up in a situation maybe

00:05:12.175 --> 00:05:13.550
you might get a
pretty rendering,

00:05:13.550 --> 00:05:15.520
but you don't actually
get a rendering

00:05:15.520 --> 00:05:16.540
where it animates well.

00:05:16.540 --> 00:05:18.550
And so there's a lot
of challenges for us

00:05:18.550 --> 00:05:21.610
to not only make it
faster, but help developers

00:05:21.610 --> 00:05:25.604
find that fast path and
stay on that fast path.

00:05:25.604 --> 00:05:27.020
We're looking at
all these things.

00:05:27.020 --> 00:05:29.060
It's both changes
that have to be

00:05:29.060 --> 00:05:32.750
done in the system,
performance tuning,

00:05:32.750 --> 00:05:36.410
and tooling that is
available to developers.

00:05:36.410 --> 00:05:39.710
ERIK KAY: There is
also the security model

00:05:39.710 --> 00:05:41.110
of dangerous APIs.

00:05:41.110 --> 00:05:44.082
And when you talk about some
of the powerful capabilities

00:05:44.082 --> 00:05:46.530
that you have with
native-installed applications,

00:05:46.530 --> 00:05:48.430
today we don't have
a security model

00:05:48.430 --> 00:05:50.120
on the web that
supports those APIs.

00:05:50.120 --> 00:05:53.500
And that's why we have installed
packaged apps for Chrome OS,

00:05:53.500 --> 00:05:56.190
and why we have native
apps on Android,

00:05:56.190 --> 00:05:59.990
and that we have a security
model that now supports

00:05:59.990 --> 00:06:02.220
the user choosing
to get this thing.

00:06:02.220 --> 00:06:05.440
So until we solve that
problem, that divide

00:06:05.440 --> 00:06:07.930
is going to continue
to exist as well.

00:06:07.930 --> 00:06:10.230
JAKE: I mean, we can see
native apps doing things

00:06:10.230 --> 00:06:15.640
like animation and paint work,
and it seems really fluid.

00:06:15.640 --> 00:06:18.370
So what is it about the web
that seems to make this slower?

00:06:20.557 --> 00:06:22.515
DARIN FISHER: There's
lots of historical things

00:06:22.515 --> 00:06:23.990
that have been
challenging, right?

00:06:23.990 --> 00:06:26.040
And lots of areas where
you can see the engines

00:06:26.040 --> 00:06:29.130
have gotten faster and better at
handling those sorts of things.

00:06:29.130 --> 00:06:32.410
For example, people
are familiar with using

00:06:32.410 --> 00:06:35.310
CSS transforms to break
up their application

00:06:35.310 --> 00:06:37.722
into various layers, where
each layer can be retained

00:06:37.722 --> 00:06:39.930
by the engine, and then you
can perform an animation.

00:06:39.930 --> 00:06:42.170
And the engine is smart
enough to move that layer

00:06:42.170 --> 00:06:43.600
without forcing a repaint.

00:06:43.600 --> 00:06:46.380
Even if you're writing a
native application on Android,

00:06:46.380 --> 00:06:50.440
you're still very much thinking
about how do I avoid repaints?

00:06:50.440 --> 00:06:52.410
How do I carefully
carve out my application

00:06:52.410 --> 00:06:55.684
so that the various GP
resources can be used

00:06:55.684 --> 00:06:58.100
and don't have to be recreated
and all that sort of thing?

00:06:58.100 --> 00:06:59.683
It's actually very
similar in the web,

00:06:59.683 --> 00:07:02.880
except sometimes it's
harder for developers

00:07:02.880 --> 00:07:07.170
to actually see where
the memory is going,

00:07:07.170 --> 00:07:09.149
how the layers are
set up, and so on.

00:07:09.149 --> 00:07:10.690
So it's definitely
a challenge for us

00:07:10.690 --> 00:07:13.250
to make sure that that's more
transparent to developers

00:07:13.250 --> 00:07:16.284
and help them stay
on the fast path.

00:07:16.284 --> 00:07:17.950
HIROSHI LOCKHEIMER:
Just to add to that,

00:07:17.950 --> 00:07:21.590
it's also really easy to write
a really poorly performing app

00:07:21.590 --> 00:07:22.536
natively as well.

00:07:22.536 --> 00:07:24.660
So just because you write
a native app doesn't mean

00:07:24.660 --> 00:07:26.540
you're automatically going
to get good performance.

00:07:26.540 --> 00:07:28.110
You have to have
that in your mind

00:07:28.110 --> 00:07:29.840
as you're developing your app.

00:07:29.840 --> 00:07:31.770
Even at the OS level--
in the last year,

00:07:31.770 --> 00:07:34.470
I think it was, we launched
Jelly Bean with Project Butter,

00:07:34.470 --> 00:07:35.660
many of you may
have heard of that.

00:07:35.660 --> 00:07:37.420
Bu that was a concerted
effort on our part

00:07:37.420 --> 00:07:40.394
to make the operating system
really smooth and buttery.

00:07:40.394 --> 00:07:41.560
And that took a lot of work.

00:07:41.560 --> 00:07:43.018
And it's the same
at the app level,

00:07:43.018 --> 00:07:45.050
at the native level,
as well as web apps.

00:07:45.050 --> 00:07:48.980
JAKE: So we saw Paul Irish
before showing the layers

00:07:48.980 --> 00:07:49.620
panel, right?

00:07:49.620 --> 00:07:52.557
So we're starting to get these
tools to show developers,

00:07:52.557 --> 00:07:54.640
so what's actually happening
under the hood, which

00:07:54.640 --> 00:07:55.830
layers are being created.

00:07:55.830 --> 00:07:56.788
What else are we doing?

00:07:56.788 --> 00:07:58.530
I mean, we see on
native, like we

00:07:58.530 --> 00:08:01.800
get these really fast-scrolling
lists by reusing memory

00:08:01.800 --> 00:08:03.350
for things that
disappear offscreen.

00:08:03.350 --> 00:08:04.730
Are we going to get something
like that on the web?

00:08:04.730 --> 00:08:06.105
IAN ELLISON-TAYLOR:
Sure, I mean,

00:08:06.105 --> 00:08:09.420
I think the so-called infinite
list problem is certainly

00:08:09.420 --> 00:08:11.730
a challenge, where you
want to basically keep

00:08:11.730 --> 00:08:14.920
creating new content as you
scroll through a view port.

00:08:14.920 --> 00:08:18.891
That's an area we've
been actively focused on.

00:08:18.891 --> 00:08:21.140
As we explore that, we see
a lot of low hanging fruit.

00:08:21.140 --> 00:08:24.190
The render spends too
much time on x, y, and z,

00:08:24.190 --> 00:08:25.820
and we can eliminate
that CPU cost

00:08:25.820 --> 00:08:27.320
to help reduce the
cost of painting.

00:08:27.320 --> 00:08:29.800
But also we can add
new primitives to CSS,

00:08:29.800 --> 00:08:31.270
and we've talked
a lot about ways

00:08:31.270 --> 00:08:34.669
to help developers
carve up the DOM so

00:08:34.669 --> 00:08:38.679
that the costs are more limited.

00:08:38.679 --> 00:08:41.789
But these are areas
of active exploration,

00:08:41.789 --> 00:08:45.220
and it's not really clear
exactly what the solution will

00:08:45.220 --> 00:08:48.520
be, but we want to make this
very easy because it seems

00:08:48.520 --> 00:08:50.199
like it's a very common pattern.

00:08:50.199 --> 00:08:51.740
JAKE: Is there
anything in particular

00:08:51.740 --> 00:08:54.770
that, if people trying to
make a performant web app,

00:08:54.770 --> 00:08:56.800
is this something
they should avoid

00:08:56.800 --> 00:08:58.642
doing because of
the performance?

00:08:58.642 --> 00:09:00.100
IAN ELLISON-TAYLOR:
Avoid repaints.

00:09:00.100 --> 00:09:03.220
I think there was a
jankfree.org and a dejanking

00:09:03.220 --> 00:09:05.880
talk by Nat and Tom.

00:09:05.880 --> 00:09:08.730
I'm sure they talked
a lot about this.

00:09:08.730 --> 00:09:10.790
JAKE: OK, so moving on
to the next question.

00:09:10.790 --> 00:09:14.040
Are there plans for bringing
Chrome-based apps to Android

00:09:14.040 --> 00:09:16.180
as an alternative
to native apps?

00:09:16.180 --> 00:09:18.380
I guess this one's
for you, Eric.

00:09:18.380 --> 00:09:20.939
ERIK KAY: Well, yes, we
have a solution for that,

00:09:20.939 --> 00:09:22.980
and we talked about it a
little bit before, which

00:09:22.980 --> 00:09:25.770
is using WebView
and through Cordova.

00:09:25.770 --> 00:09:29.170
So we've been contributing
to the Cordova project

00:09:29.170 --> 00:09:31.080
for the last year
and a half and really

00:09:31.080 --> 00:09:33.940
trying to make it a better
experience for Android and iOS.

00:09:33.940 --> 00:09:36.810
And part of that
process has involved

00:09:36.810 --> 00:09:40.070
making it more modular, making
it easier to have plug-ins.

00:09:40.070 --> 00:09:41.850
And one of the sets
of plug-ins that we're

00:09:41.850 --> 00:09:45.260
going to be providing
is a set of modules

00:09:45.260 --> 00:09:46.940
that allow you to
bring all the Chrome

00:09:46.940 --> 00:09:49.230
apps, APIs, to
your Cordova apps.

00:09:49.230 --> 00:09:51.590
So we have a bunch of
examples, actually, up

00:09:51.590 --> 00:09:54.775
on our GitHub repo that sort
of show the same code that you

00:09:54.775 --> 00:09:56.680
would just repackage
through Cordova

00:09:56.680 --> 00:10:01.480
and have it running both on your
desktop and on iOS and Android.

00:10:01.480 --> 00:10:04.060
JAKE: So that's packaging it
up using a separate program

00:10:04.060 --> 00:10:07.050
and that will turn it into
an Android native app?

00:10:07.050 --> 00:10:11.970
Is there any desire for
Android to natively support

00:10:11.970 --> 00:10:12.842
the Chrome web apps?

00:10:12.842 --> 00:10:14.300
ERIK KAY: Well, I
mean, to my mind,

00:10:14.300 --> 00:10:15.980
it is natively
supporting it, right?

00:10:15.980 --> 00:10:17.990
That basically,
the Play store is

00:10:17.990 --> 00:10:20.310
where you get apps
for Android, right?

00:10:20.310 --> 00:10:22.210
So it's not like we
want people to have

00:10:22.210 --> 00:10:24.940
to know to go, oh, I go
here for some of my apps,

00:10:24.940 --> 00:10:27.994
and this other place
for the rest of my apps.

00:10:27.994 --> 00:10:30.410
Having them all be in the Play
store makes a lot of sense.

00:10:30.410 --> 00:10:33.139
And for the developer,
packaging this up, like I said,

00:10:33.139 --> 00:10:34.680
it literally is the
same source code.

00:10:34.680 --> 00:10:36.880
So from their standpoint,
the difference

00:10:36.880 --> 00:10:39.949
is just what is the end
package that's produced

00:10:39.949 --> 00:10:41.240
and where do they upload it to.

00:10:41.240 --> 00:10:44.650
Now, I think that we've been
investigating more ways that we

00:10:44.650 --> 00:10:48.030
can coordinate the developer
experience between Play

00:10:48.030 --> 00:10:49.500
and the Chrome Web
Store, and maybe

00:10:49.500 --> 00:10:52.149
have shared developer consoles,
and that sort of thing.

00:10:52.149 --> 00:10:54.190
We don't have anything to
announce on that front,

00:10:54.190 --> 00:10:58.800
but we continue to look to
reduce developer friction.

00:10:58.800 --> 00:11:01.940
JAKE: Yes, as you say, we've
got the Chrome Web Store

00:11:01.940 --> 00:11:04.482
and the Play store.

00:11:04.482 --> 00:11:06.570
Is this a confusing model,
having both of them?

00:11:06.570 --> 00:11:09.920
Is there any plans
to unify the two?

00:11:09.920 --> 00:11:12.440
ERIK KAY: So there's no plans
right now to unify the two.

00:11:12.440 --> 00:11:16.935
I think for Chrome,
there's a place

00:11:16.935 --> 00:11:19.060
where you go to get your
Chrome stuff, your themes,

00:11:19.060 --> 00:11:21.230
your extensions, your apps.

00:11:21.230 --> 00:11:25.710
For Android, there's a place
to get your phone and tablet

00:11:25.710 --> 00:11:26.680
stuff.

00:11:26.680 --> 00:11:28.944
I think to some
degree, we've looked

00:11:28.944 --> 00:11:30.610
into what it would
look like if we tried

00:11:30.610 --> 00:11:32.612
to merge some of these
things, and it winds up

00:11:32.612 --> 00:11:33.820
being a little bit confusing.

00:11:33.820 --> 00:11:35.320
You have to add
multiple hierarchies

00:11:35.320 --> 00:11:38.490
of which device I looking
for and which stuff do I get?

00:11:38.490 --> 00:11:40.620
We might figure something
out in the limit,

00:11:40.620 --> 00:11:43.620
but I think from
a user standpoint,

00:11:43.620 --> 00:11:45.680
we want to make
sure that if users

00:11:45.680 --> 00:11:47.580
go to one store or
the other, and they're

00:11:47.580 --> 00:11:50.250
looking for something else, that
we can give them the pointers

00:11:50.250 --> 00:11:51.630
back, just so they find
things in the right place.

00:11:51.630 --> 00:11:52.530
LINUS UPSON: Yeah,
but I think that's one

00:11:52.530 --> 00:11:53.490
of things we've seen right now.

00:11:53.490 --> 00:11:55.810
We don't end up with Android
users in the Chrome Web

00:11:55.810 --> 00:11:58.060
Store going, where's my
Android apps or vice versa.

00:11:58.060 --> 00:12:02.320
So I don't think it's
an issue for users.

00:12:02.320 --> 00:12:06.370
JAKE: So we've been hearing
about the new Chrome-based

00:12:06.370 --> 00:12:08.690
Android WebView in
some of the sessions

00:12:08.690 --> 00:12:10.830
in the past couple of days.

00:12:10.830 --> 00:12:12.210
It doesn't autoupdate.

00:12:12.210 --> 00:12:13.140
That's correct, right?

00:12:13.140 --> 00:12:13.950
Are there plans?

00:12:13.950 --> 00:12:16.170
Is that underway?

00:12:16.170 --> 00:12:17.730
ARNAUD WEBER: So
yes, autoupdate has

00:12:17.730 --> 00:12:20.630
been one of the major features
of Chrome over the years,

00:12:20.630 --> 00:12:22.370
and definitely it's
something that we

00:12:22.370 --> 00:12:24.920
want to do for WebView as well.

00:12:24.920 --> 00:12:26.670
We are facing some
significant challenges.

00:12:26.670 --> 00:12:28.510
And we don't have
a date to announce,

00:12:28.510 --> 00:12:31.251
but we are actively working on.

00:12:31.251 --> 00:12:33.890
LINUS UPSON: Yeah, we
have a process in Chrome

00:12:33.890 --> 00:12:35.510
with the various
prerelease channels,

00:12:35.510 --> 00:12:37.301
plus a bunch of internal
testing and things

00:12:37.301 --> 00:12:39.950
like that to make sure that
if we break someone's website,

00:12:39.950 --> 00:12:41.450
we find out before
we go push it out

00:12:41.450 --> 00:12:43.269
to hundreds of
millions of users.

00:12:43.269 --> 00:12:44.810
I think one of the
challenges we have

00:12:44.810 --> 00:12:46.309
with autoupdating
WebView is there's

00:12:46.309 --> 00:12:48.570
this whole ecosystem of
Android apps that use WebView.

00:12:48.570 --> 00:12:50.611
And If we're going to be
updating that thing very

00:12:50.611 --> 00:12:52.770
rapidly, we need
to have mechanisms

00:12:52.770 --> 00:12:54.720
to be able to test all
of those applications

00:12:54.720 --> 00:12:56.924
and get feedback early in
the development process

00:12:56.924 --> 00:12:59.090
to make sure we don't go
break a whole bunch of them

00:12:59.090 --> 00:13:00.132
when we push out updates.

00:13:00.132 --> 00:13:02.215
JAKE: But this is not a
problem on the web, right?

00:13:02.215 --> 00:13:04.130
I mean, we update the
browser all the time,

00:13:04.130 --> 00:13:06.827
and other browsers
update all the time.

00:13:06.827 --> 00:13:09.160
LINUS UPSON: Oh, and we've
got massive automated testing

00:13:09.160 --> 00:13:12.152
infrastructure to see what
we break and stuff like that.

00:13:12.152 --> 00:13:14.610
During the development process,
before it actually gets out

00:13:14.610 --> 00:13:16.830
to users, and also with
these early release channels,

00:13:16.830 --> 00:13:19.400
like the Canary and Dev
Channel and Beta channel,

00:13:19.400 --> 00:13:22.230
people can come and yell
and say, hey, file a bug.

00:13:22.230 --> 00:13:24.341
You broke my website,
you bastards.

00:13:24.341 --> 00:13:26.090
And we can fix it
before we go send it out

00:13:26.090 --> 00:13:27.470
to a whole bunch of users.

00:13:27.470 --> 00:13:30.830
And we don't have those
mechanisms, and processes,

00:13:30.830 --> 00:13:33.590
and infrastructure
in place for testing

00:13:33.590 --> 00:13:35.680
against the whole ecosystem
of Android apps yet.

00:13:35.680 --> 00:13:37.970
And so that's one of the
big engineering challenges

00:13:37.970 --> 00:13:39.717
we face and process
challenges we

00:13:39.717 --> 00:13:42.175
face in being able to do that
because we want to get there,

00:13:42.175 --> 00:13:44.660
but we figured out
all the problems yet.

00:13:44.660 --> 00:13:46.970
ARNAUD WEBER: And so how
do we distribute something

00:13:46.970 --> 00:13:49.280
that big across all
the devices of the OEMs

00:13:49.280 --> 00:13:52.200
or the networks that occurs?

00:13:52.200 --> 00:13:55.536
JAKE: So it seems like getting
the Chrome WebView on that

00:13:55.536 --> 00:13:57.160
was kind of was a
big challenge, right?

00:13:57.160 --> 00:13:58.980
Because it's been
the old Android

00:13:58.980 --> 00:14:00.790
browser for a long time now.

00:14:00.790 --> 00:14:02.600
We got Chrome as
the default browser,

00:14:02.600 --> 00:14:04.350
but we still had
the old WebView.

00:14:04.350 --> 00:14:06.214
What were the challenges there?

00:14:06.214 --> 00:14:07.380
What were the real problems?

00:14:07.380 --> 00:14:09.880
And why do we see
the Chrome WebView

00:14:09.880 --> 00:14:11.920
having a kind of slightly
different feature set

00:14:11.920 --> 00:14:13.490
to the Chrome browser?

00:14:13.490 --> 00:14:15.740
ARNAUD WEBER: Basically, it
was another part of Chrome

00:14:15.740 --> 00:14:17.330
to do something different.

00:14:17.330 --> 00:14:18.925
It's a single-process
environment.

00:14:21.552 --> 00:14:23.510
It's a slightly different
graphic architecture.

00:14:23.510 --> 00:14:25.160
There are very
small differences,

00:14:25.160 --> 00:14:27.600
by the way, which
are WebGL, WebRTC,

00:14:27.600 --> 00:14:30.620
and the hardware
part for Canvas 2D.

00:14:30.620 --> 00:14:32.350
And by the way, we're
working actively

00:14:32.350 --> 00:14:37.690
to fix those and make them just
like Chrome moving forward.

00:14:37.690 --> 00:14:41.130
JAKE: So because it's a
single-process model compared

00:14:41.130 --> 00:14:43.040
to Chrome, how does
that affect performance?

00:14:43.040 --> 00:14:47.045
Is there is a performance
difference there?

00:14:47.045 --> 00:14:48.420
ARNAUD WEBER: The
only difference

00:14:48.420 --> 00:14:51.920
I'm aware of is Canvas 2D, which
is using a software path so

00:14:51.920 --> 00:14:53.020
far.

00:14:53.020 --> 00:14:54.680
Other than that,
the architecture

00:14:54.680 --> 00:14:58.590
is actually simpler than
what we have in Chrome.

00:14:58.590 --> 00:15:01.000
So it's not a problem.

00:15:01.000 --> 00:15:05.170
JAKE: So you can put WebView
into a hardware-accelerated

00:15:05.170 --> 00:15:07.480
mode or leave it
in a software mode.

00:15:07.480 --> 00:15:09.730
ARNAUD WEBER: Absolutely, yes.

00:15:09.730 --> 00:15:11.387
JAKE: Why would people do that?

00:15:11.387 --> 00:15:13.220
Why are so many people
using a software mode

00:15:13.220 --> 00:15:14.080
on the old WebView?

00:15:18.150 --> 00:15:19.110
ARNAUD WEBER: Darin?

00:15:19.110 --> 00:15:20.500
DARIN FISHER: I
mean, it's simply

00:15:20.500 --> 00:15:22.160
because they want
to read back-- often

00:15:22.160 --> 00:15:24.660
because they want to read back
the bit map or the rendering,

00:15:24.660 --> 00:15:27.960
and they want to do their
own processing with that.

00:15:27.960 --> 00:15:29.690
If you're in that
situation where

00:15:29.690 --> 00:15:32.190
your goal of using the
WebView is to get the pixels,

00:15:32.190 --> 00:15:35.900
then perhaps software
rendering is better for you.

00:15:35.900 --> 00:15:37.650
Because if there's
a hardware readback,

00:15:37.650 --> 00:15:38.925
it's going to be slow.

00:15:38.925 --> 00:15:41.050
JAKE: I've seen that before,
because I had a Canvas

00:15:41.050 --> 00:15:42.810
demo that I wrote a
number of years ago,

00:15:42.810 --> 00:15:45.210
which was analyzing the
pixels in every frame.

00:15:45.210 --> 00:15:47.987
And it was running
at 60 frame-- well,

00:15:47.987 --> 00:15:49.750
about 30 frames a
second a few years ago.

00:15:49.750 --> 00:15:51.950
And then the switch went
right to hardware Canvas,

00:15:51.950 --> 00:15:54.075
and all of a sudden, the
demo just completely died.

00:15:54.075 --> 00:15:55.450
Is that part of the same thing?

00:15:55.450 --> 00:15:56.220
DARIN FISHER: Yeah, sure.

00:15:56.220 --> 00:15:56.719
Exactly.

00:15:56.719 --> 00:15:58.820
So it has a lot to
do with the use case.

00:15:58.820 --> 00:16:01.390
If it's a WebView usage,
where it's all about display,

00:16:01.390 --> 00:16:03.449
then the GPU path is
going to be great.

00:16:03.449 --> 00:16:05.490
And the other interesting
thing about the WebView

00:16:05.490 --> 00:16:06.823
is just the way it's integrated.

00:16:06.823 --> 00:16:10.090
It's integrated so that it
acts like an Android view.

00:16:10.090 --> 00:16:12.190
And that definitely
affects the way it renders.

00:16:12.190 --> 00:16:16.072
So it tries to
conform to that API.

00:16:16.072 --> 00:16:19.132
At any rate, there's a
lot of other subtle--

00:16:19.132 --> 00:16:21.090
there were a lot of other
challenges to getting

00:16:21.090 --> 00:16:24.550
the Chrome code base to
provide a good Android WebView,

00:16:24.550 --> 00:16:26.490
and a lot of it had to
do is compatibility.

00:16:26.490 --> 00:16:29.260
The Android WebView was a very
established piece of code,

00:16:29.260 --> 00:16:31.010
where a lot of
applications were depending

00:16:31.010 --> 00:16:33.100
on a large volume of
Android applications

00:16:33.100 --> 00:16:36.215
using it and using it in subtle
and interesting ways, ways

00:16:36.215 --> 00:16:38.230
in which perhaps it wasn't
originally designed.

00:16:38.230 --> 00:16:40.820
And yet we had to go
and discover those ways

00:16:40.820 --> 00:16:43.694
and make sure they
were still supported.

00:16:43.694 --> 00:16:44.985
It's all been very fascinating.

00:16:48.947 --> 00:16:50.780
JAKE: So a slightly
different next question.

00:16:50.780 --> 00:16:53.030
And I'm sorry if I sound
bored reading it out,

00:16:53.030 --> 00:16:55.250
but I'm really,
really bored of it.

00:16:55.250 --> 00:16:58.420
What is the current
stance, if any,

00:16:58.420 --> 00:17:01.830
on moving responsive
image implementations

00:17:01.830 --> 00:17:04.943
forward like Solset?

00:17:04.943 --> 00:17:06.359
I feel that what's
going to happen

00:17:06.359 --> 00:17:11.550
is that we're going to
reach the-- we will launch

00:17:11.550 --> 00:17:13.060
the responsive image solution.

00:17:13.060 --> 00:17:15.440
It will be standardized,
and then that's it.

00:17:15.440 --> 00:17:16.810
We run out of numbers for years.

00:17:16.810 --> 00:17:17.310
That's it.

00:17:17.310 --> 00:17:18.230
The time has ended.

00:17:18.230 --> 00:17:20.010
We've ran out of
time to do anything.

00:17:20.010 --> 00:17:21.666
The universe will
implode on itself.

00:17:21.666 --> 00:17:23.624
DARIN FISHER: Did you
read Blink-dev yesterday?

00:17:23.624 --> 00:17:24.740
JAKE: No, I didn't.

00:17:24.740 --> 00:17:26.240
DARIN FISHER:
Anyways, there's a lot

00:17:26.240 --> 00:17:28.490
of active discussion
on this topic,

00:17:28.490 --> 00:17:30.530
you know, source in,
source set, so on.

00:17:30.530 --> 00:17:32.110
I think from Chrome's
point of view,

00:17:32.110 --> 00:17:34.570
we'd love to find a
great solution here.

00:17:34.570 --> 00:17:36.820
As people have been talking
about this more and more,

00:17:36.820 --> 00:17:40.760
more refinement of the use
cases has sort of come out,

00:17:40.760 --> 00:17:45.470
and people are again circling
on the right solutions.

00:17:45.470 --> 00:17:47.560
It's really important to
us that we don't end up

00:17:47.560 --> 00:17:49.435
with three different
ways of doing responsive

00:17:49.435 --> 00:17:51.320
design in Chrome for images.

00:17:51.320 --> 00:17:53.830
We would really like to
find one good solution that

00:17:53.830 --> 00:17:55.840
addresses the majority
of the use cases

00:17:55.840 --> 00:17:58.610
that all the browser vendors
can feel good about and adopt.

00:17:58.610 --> 00:18:01.210
That would be a lot better
than us shipping all.

00:18:01.210 --> 00:18:02.940
And we've been there before.

00:18:02.940 --> 00:18:05.510
We have three different ways
of specifying CSS gradients,

00:18:05.510 --> 00:18:08.470
or gradients in CSS,
and that's unfortunate.

00:18:08.470 --> 00:18:10.450
And here, with
responsive images,

00:18:10.450 --> 00:18:14.780
we want to also be
thoughtful and responsible

00:18:14.780 --> 00:18:18.820
with the platform, and yet find
a darn solution because we know

00:18:18.820 --> 00:18:20.940
that people are hungry for this.

00:18:20.940 --> 00:18:24.532
JAKE: I kind of feel that maybe
the working group discussion

00:18:24.532 --> 00:18:26.240
hasn't been completely
fruitful for this.

00:18:26.240 --> 00:18:31.270
Could we do something
like get a few balls, one

00:18:31.270 --> 00:18:33.180
for each of the responsive
image solutions,

00:18:33.180 --> 00:18:35.651
put some cat food in, and
then just bring a cat in?

00:18:35.651 --> 00:18:36.150
[LAUGHTER]

00:18:36.150 --> 00:18:38.480
JAKE: Whichever ball the
cat goes to, we just do it.

00:18:38.480 --> 00:18:39.540
DARIN FISHER: I like
the way you're thinking.

00:18:39.540 --> 00:18:40.890
That's an interesting one.

00:18:43.410 --> 00:18:45.840
Recently, there was the
source-end proposal,

00:18:45.840 --> 00:18:47.400
and that's been shopped around.

00:18:47.400 --> 00:18:51.440
And there's been interesting
feedback from the WebKit folk,

00:18:51.440 --> 00:18:54.936
and that's going
into the-- people

00:18:54.936 --> 00:18:56.560
are now taking that
into consideration.

00:18:56.560 --> 00:18:58.407
Then picture sort
of came up again.

00:18:58.407 --> 00:19:00.490
It's, hey, maybe that will
solve all our problems.

00:19:00.490 --> 00:19:02.580
And then Hicksey's
like, well, but you guys

00:19:02.580 --> 00:19:04.914
realize mulitelement solutions
are really painful for x,

00:19:04.914 --> 00:19:06.163
y and z, and blah, blah, blah.

00:19:06.163 --> 00:19:07.720
And the whole thing
circles around.

00:19:07.720 --> 00:19:10.030
But I do feel like there's
a lot of motivation

00:19:10.030 --> 00:19:12.180
to solve this problem.

00:19:12.180 --> 00:19:14.480
JAKE: So developing
web apps is becoming

00:19:14.480 --> 00:19:17.190
more and more complex
and low level.

00:19:17.190 --> 00:19:21.320
What steps are you taking to
keep web development high level

00:19:21.320 --> 00:19:23.210
without making me,
as a developer,

00:19:23.210 --> 00:19:25.910
have to delve into paint
operations and GPU cycles.

00:19:25.910 --> 00:19:28.635
And I love this question
because it's so loaded.

00:19:28.635 --> 00:19:30.969
[LAUGHTER]

00:19:30.969 --> 00:19:33.260
IAN ELLISON-TAYLOR: I can
talk a little bit about that.

00:19:33.260 --> 00:19:36.265
I think we've kind of
talked a lot about that

00:19:36.265 --> 00:19:37.800
the last day or so.

00:19:37.800 --> 00:19:40.320
I mean, because we level
that low-level stuff as well.

00:19:40.320 --> 00:19:41.620
We're kind of going
in both directions,

00:19:41.620 --> 00:19:42.930
giving you more
low-level features

00:19:42.930 --> 00:19:44.640
if you really want to
get closer to the metal.

00:19:44.640 --> 00:19:46.223
And that's the whole
sort of-- WebJail

00:19:46.223 --> 00:19:47.470
being the classic example.

00:19:47.470 --> 00:19:50.649
But then we're doing these
higher level things as well.

00:19:50.649 --> 00:19:52.940
We've been working obviously
on features like Flexbooks

00:19:52.940 --> 00:19:55.630
and Grid, and then coming up
to Web Components, and now

00:19:55.630 --> 00:19:56.590
Polymer.

00:19:56.590 --> 00:19:58.490
So we're trying
to kind of come in

00:19:58.490 --> 00:20:00.310
without having too many
layers, but to have

00:20:00.310 --> 00:20:02.677
these different layers
that you can come in,

00:20:02.677 --> 00:20:04.260
depending on your
particular scenario.

00:20:04.260 --> 00:20:06.135
So you can get up and
running really quickly.

00:20:06.135 --> 00:20:08.850
But you can still get access
to the low-level APIs,

00:20:08.850 --> 00:20:10.430
if that's what you want to do.

00:20:10.430 --> 00:20:12.950
And you can start one layer
and work your way down.

00:20:12.950 --> 00:20:16.435
So we're kind of coming at
it from different angles.

00:20:16.435 --> 00:20:18.140
DARIN FISHER: Yeah, exactly.

00:20:18.140 --> 00:20:20.570
I feel like part of
the answer is let's

00:20:20.570 --> 00:20:23.090
make the low level less
scary and more accessible,

00:20:23.090 --> 00:20:24.770
better tools, that
sort of thing.

00:20:24.770 --> 00:20:26.814
Because like or
not, you often do

00:20:26.814 --> 00:20:28.730
you really need to
understand what's going on.

00:20:28.730 --> 00:20:30.850
But then things like
Web Components gives us

00:20:30.850 --> 00:20:34.340
the substrate for which
we can, and developers

00:20:34.340 --> 00:20:36.940
can, and other people
can, provide components

00:20:36.940 --> 00:20:39.630
that people can use that
hopefully solves the problems

00:20:39.630 --> 00:20:42.200
so people don't have
to fight through them.

00:20:42.200 --> 00:20:44.190
IAN ELLISON-TAYLOR:
That other people part

00:20:44.190 --> 00:20:46.350
is also really important
because obviously we're

00:20:46.350 --> 00:20:49.374
huge supporters of
own Polymer effort.

00:20:49.374 --> 00:20:50.790
But the idea behind
Web Components

00:20:50.790 --> 00:20:52.487
is that there can
be lots of providers

00:20:52.487 --> 00:20:53.820
for lots of different use cases.

00:20:53.820 --> 00:20:56.010
We're not going to
implement every widget known

00:20:56.010 --> 00:20:57.222
to man or woman.

00:20:57.222 --> 00:20:58.680
So there's going
to be lots of-- we

00:20:58.680 --> 00:21:00.370
hope-- lots of
third-party support,

00:21:00.370 --> 00:21:02.460
given Web Components
allows interoperability

00:21:02.460 --> 00:21:03.540
between these
different frameworks.

00:21:03.540 --> 00:21:04.220
So that's very cool.

00:21:04.220 --> 00:21:04.800
We've not had that before.

00:21:04.800 --> 00:21:06.910
LINUS UPSON: Yeah, and
I think, as an example,

00:21:06.910 --> 00:21:11.070
Mozilla X-Tags can play
nicely with Polymer components

00:21:11.070 --> 00:21:12.450
on the same page at same time.

00:21:12.450 --> 00:21:13.500
IAN ELLISON-TAYLOR: Yeah,
many third-party vendors

00:21:13.500 --> 00:21:15.340
have come out and
said yeah, they're

00:21:15.340 --> 00:21:17.670
getting ready to build
their own Web Components

00:21:17.670 --> 00:21:20.074
and frameworks that
can then interoperate.

00:21:20.074 --> 00:21:21.990
DARIN FISHER: I mean,
not to beat it to death,

00:21:21.990 --> 00:21:23.614
but the cool thing
about Web Components

00:21:23.614 --> 00:21:25.880
is it's just like
custom HTML tags.

00:21:25.880 --> 00:21:27.520
And all these
frameworks that already

00:21:27.520 --> 00:21:31.609
have existed since forever, they
all work with HTML elements.

00:21:31.609 --> 00:21:33.150
So they all work
with Web Components.

00:21:33.150 --> 00:21:34.775
It's really cool if
you think about it.

00:21:34.775 --> 00:21:37.460
You don't have to throw away
what you're already doing.

00:21:37.460 --> 00:21:39.000
You can just sort
of gently embrace

00:21:39.000 --> 00:21:41.090
parts of things done
as Web Components.

00:21:41.090 --> 00:21:42.510
It's actually really neat.

00:21:42.510 --> 00:21:44.510
JAKE: I think, there is
an idea in this question

00:21:44.510 --> 00:21:47.040
that web development
should be high level.

00:21:47.040 --> 00:21:51.510
I mean, I remember working in
places where you had developers

00:21:51.510 --> 00:21:54.282
who just did solve HTML and CSS.

00:21:54.282 --> 00:21:55.782
And then you had
sort of another set

00:21:55.782 --> 00:21:57.530
of developers doing JavaScript.

00:21:57.530 --> 00:21:59.220
And none of them
were really caring

00:21:59.220 --> 00:22:01.050
about sort of the
low-level paint stuff.

00:22:01.050 --> 00:22:03.680
Is that no longer a possibility?

00:22:03.680 --> 00:22:05.700
Are we saying that
no, developers

00:22:05.700 --> 00:22:07.285
need to maybe grow up?

00:22:07.285 --> 00:22:09.882
Or are there other
different jobs?

00:22:09.882 --> 00:22:11.340
LINUS UPSON: I
think that goes back

00:22:11.340 --> 00:22:14.940
to one of the earlier
questions about why

00:22:14.940 --> 00:22:16.490
are native apps
faster than the web?

00:22:16.490 --> 00:22:18.210
Well, it turns
out in many cases,

00:22:18.210 --> 00:22:20.950
you can get exactly the same
performance on both platforms,

00:22:20.950 --> 00:22:22.360
if you know what you're doing.

00:22:22.360 --> 00:22:26.030
And the problem is, like Darin
mentioned earlier, there's

00:22:26.030 --> 00:22:30.226
many, many poorly lit paths
through the web platform,

00:22:30.226 --> 00:22:31.850
where if you go
wandering off in there,

00:22:31.850 --> 00:22:33.610
bad things are going
to happen to you.

00:22:33.610 --> 00:22:36.910
And so doing things like
Web Components and Polymer

00:22:36.910 --> 00:22:38.910
gives us the opportunity
to give developers

00:22:38.910 --> 00:22:41.980
a high level, well-lit path
that's also highly performant,

00:22:41.980 --> 00:22:45.070
because it stays on all the
fast paths inside of Blink

00:22:45.070 --> 00:22:46.920
and inside of Chrome.

00:22:46.920 --> 00:22:50.510
JAKE: Hiroshi, is there this
feeling in the native world

00:22:50.510 --> 00:22:51.010
as well?

00:22:51.010 --> 00:22:52.680
Because I know nothing about it.

00:22:52.680 --> 00:22:54.180
Are there sections
of developers who

00:22:54.180 --> 00:22:56.237
feel like that kind
of low-level thing

00:22:56.237 --> 00:22:58.070
isn't something they
should be caring about?

00:22:58.070 --> 00:23:00.960
Because you've got primitives
on Android as well,

00:23:00.960 --> 00:23:03.317
but you can sort of do
extra things with them.

00:23:03.317 --> 00:23:04.900
Other developers who
are saying, look,

00:23:04.900 --> 00:23:06.470
I shouldn't have to be
caring about this stuff.

00:23:06.470 --> 00:23:07.440
It should just do it.

00:23:07.440 --> 00:23:08.500
HIROSHI LOCKHEIMER:
Yeah, and this

00:23:08.500 --> 00:23:10.260
is similar to the point I was
trying to make earlier, which

00:23:10.260 --> 00:23:12.900
is it's actually pretty easy to
write a poorly performing app

00:23:12.900 --> 00:23:13.890
for native as well.

00:23:13.890 --> 00:23:15.427
And as a native
developer, you have

00:23:15.427 --> 00:23:17.010
to pay attention to
these same things.

00:23:17.010 --> 00:23:21.850
And there are poorly lit alleys
in the native world as well.

00:23:21.850 --> 00:23:23.894
And you just have to
be aware of this stuff.

00:23:23.894 --> 00:23:25.310
And this was a big
part of what we

00:23:25.310 --> 00:23:27.350
pushed last year with
Jelly Bean again.

00:23:27.350 --> 00:23:30.070
With this big push on Project
Butter, we have new tools.

00:23:30.070 --> 00:23:31.784
We had new tools that
we made available

00:23:31.784 --> 00:23:33.450
so that people can
trace, the developers

00:23:33.450 --> 00:23:34.824
can trace what
their app is doing

00:23:34.824 --> 00:23:36.790
and figure out what
the bottlenecks are.

00:23:36.790 --> 00:23:38.550
It's all, I think,
the same concepts.

00:23:38.550 --> 00:23:40.290
It's just different
sets of technologies.

00:23:40.290 --> 00:23:42.669
But it's really the same thing.

00:23:42.669 --> 00:23:44.460
LINUS UPSON: I think
it's also that there's

00:23:44.460 --> 00:23:47.630
cultural differences in the
developer communities as well.

00:23:47.630 --> 00:23:49.500
I think, historically,
web developers

00:23:49.500 --> 00:23:51.780
haven't cared about
60 Hertz animations.

00:23:51.780 --> 00:23:54.490
It just hasn't been
on people's radar.

00:23:54.490 --> 00:23:56.840
It's not something that you
just expect from a website.

00:23:56.840 --> 00:23:58.400
But if you're a
mobile developer,

00:23:58.400 --> 00:24:00.850
that's something that you've
expected from day one.

00:24:00.850 --> 00:24:03.780
And so, you go, OK, you
start thinking about how do I

00:24:03.780 --> 00:24:06.544
get 60 Hertz and then start
adding features on top of that.

00:24:06.544 --> 00:24:08.960
Whereas many web projects,
they go add all their features,

00:24:08.960 --> 00:24:11.460
and then go, holy cow,
how do I make this fast?

00:24:11.460 --> 00:24:14.580
And so one of the things we
try to do inside of Google

00:24:14.580 --> 00:24:17.450
with lots of other web
developers inside the company

00:24:17.450 --> 00:24:20.589
is get them onto the
fast paths first.

00:24:20.589 --> 00:24:22.380
Get their Hello World,
the very first thing

00:24:22.380 --> 00:24:24.680
they going, on all
the right fast paths

00:24:24.680 --> 00:24:26.180
and keep it fast
through development

00:24:26.180 --> 00:24:27.830
as they add features
and capabilities

00:24:27.830 --> 00:24:29.550
and round out what
their program does.

00:24:29.550 --> 00:24:31.900
Because it's much, much
harder if someone's

00:24:31.900 --> 00:24:34.810
been hacking on HTML, CSS,
and JavaScript for a year,

00:24:34.810 --> 00:24:37.187
and then they turn up and
say, hey, I'm really slow,

00:24:37.187 --> 00:24:38.270
and I use a lot of memory.

00:24:38.270 --> 00:24:39.780
Can you help me?

00:24:39.780 --> 00:24:42.280
It's much easier to start
fast and stay fast and have

00:24:42.280 --> 00:24:44.400
automated tests to
make sure that you stay

00:24:44.400 --> 00:24:47.070
on those fast path as you
keep adding things to it.

00:24:47.070 --> 00:24:50.630
JAKE: And in terms of like
getting smooth web performance

00:24:50.630 --> 00:24:52.951
from the web, and
developers not really--

00:24:52.951 --> 00:24:54.450
this is something
we've been pushing

00:24:54.450 --> 00:24:56.770
the past year that developers
have to care about this.

00:24:56.770 --> 00:24:59.760
And it's been a new
thing to many developers.

00:24:59.760 --> 00:25:02.580
Is that a culture
that we've created?

00:25:02.580 --> 00:25:05.290
Not Chrome specifically,
but sort of browser

00:25:05.290 --> 00:25:08.200
manufacturers, that it just
wasn't possible for so long

00:25:08.200 --> 00:25:12.659
that the web was this fairly
high level, pretty slow thing

00:25:12.659 --> 00:25:14.450
that developers couldn't
do anything about?

00:25:14.450 --> 00:25:17.832
Have we created that culture
of just throw text on the page

00:25:17.832 --> 00:25:18.790
and just hope it works?

00:25:22.840 --> 00:25:24.410
DARIN FISHER: Well,
I-- look, I feel

00:25:24.410 --> 00:25:26.859
like if you look back at
the way the web developed

00:25:26.859 --> 00:25:28.650
and the innovation on
mobile that happened,

00:25:28.650 --> 00:25:30.765
where people said, hey,
fixed position elements

00:25:30.765 --> 00:25:33.140
don't have to suck because
they can get their own layers.

00:25:33.140 --> 00:25:37.250
And overflow scroll can
actually get its own layer.

00:25:37.250 --> 00:25:40.580
That sort of promotion of
things to their own layer

00:25:40.580 --> 00:25:43.190
so that they can take advantage
of GPU acceleration and avoid

00:25:43.190 --> 00:25:46.490
repaints, that sort of thing
is very novel and necessary

00:25:46.490 --> 00:25:47.740
in the touch environment.

00:25:47.740 --> 00:25:50.240
And it's something that wasn't
there with desktop rendering.

00:25:50.240 --> 00:25:52.020
I mean, the old way
of rendering Chrome--

00:25:52.020 --> 00:25:57.400
sorry, rendering web browsers
was rasterize the whole thing,

00:25:57.400 --> 00:25:59.734
and if there's damage, we
reraster the damaged part.

00:25:59.734 --> 00:26:01.400
And it didn't take
into account the fact

00:26:01.400 --> 00:26:03.570
that there might be
separable layers and all

00:26:03.570 --> 00:26:05.100
this sort of thing.

00:26:05.100 --> 00:26:06.910
If scrolling happened,
we shifted the bits,

00:26:06.910 --> 00:26:09.530
and we rasterized
the exposed region.

00:26:09.530 --> 00:26:12.050
I mean, there was no
prerendering down the fold

00:26:12.050 --> 00:26:14.100
so that you could
efficiently scroll.

00:26:14.100 --> 00:26:16.050
These are all new
techniques, techniques

00:26:16.050 --> 00:26:18.480
that are essential on
touchscreen, touch devices,

00:26:18.480 --> 00:26:21.980
mobile devices, or
underpowered laptops.

00:26:21.980 --> 00:26:26.360
You sort of see that's
where the industry is going.

00:26:26.360 --> 00:26:28.360
A lot of users are on
these low-powered devices.

00:26:28.360 --> 00:26:29.590
We've got to make the
web-rendering engine

00:26:29.590 --> 00:26:30.256
work well there.

00:26:30.256 --> 00:26:32.372
And it does mean
changing a lot of things.

00:26:32.372 --> 00:26:34.330
We've had to make some
breaking changes the way

00:26:34.330 --> 00:26:35.910
fixed position elements work.

00:26:35.910 --> 00:26:40.160
Today, we've made them create
their own stacking context,

00:26:40.160 --> 00:26:44.730
which was a spec-breaking
change necessary to allow

00:26:44.730 --> 00:26:46.390
for better performance.

00:26:46.390 --> 00:26:49.130
And for Chrome, it's
been this evolution

00:26:49.130 --> 00:26:53.080
of getting more and more
of these mobile ideas,

00:26:53.080 --> 00:26:57.780
these sort of-- have them
actually apply to desktop.

00:26:57.780 --> 00:26:59.170
And we're getting there.

00:26:59.170 --> 00:27:01.320
ERIK KAY: So to the
core of your question

00:27:01.320 --> 00:27:03.250
about low level
versus high level,

00:27:03.250 --> 00:27:06.920
the primitives versus
these high-level concepts,

00:27:06.920 --> 00:27:09.030
one of the things
that we've seen

00:27:09.030 --> 00:27:11.474
is that when people start
with high-level concepts,

00:27:11.474 --> 00:27:13.140
and then they want
to change it in a way

00:27:13.140 --> 00:27:16.250
that the high-level
construct didn't allow,

00:27:16.250 --> 00:27:18.200
they start having to
hack their way around it.

00:27:18.200 --> 00:27:19.220
And that's the
kind of thing that

00:27:19.220 --> 00:27:21.610
winds up actually contributing
to some of the performance

00:27:21.610 --> 00:27:22.610
issues.

00:27:22.610 --> 00:27:25.930
And so if instead,
you say, well, it's

00:27:25.930 --> 00:27:28.080
OK to have high-level
constructs.

00:27:28.080 --> 00:27:31.000
But they're built up out of
primitives that we expose.

00:27:31.000 --> 00:27:33.510
So if you want to recreate
that high-level thing

00:27:33.510 --> 00:27:36.310
or pick and choose and
take bits and pieces of it,

00:27:36.310 --> 00:27:37.140
you can do that.

00:27:37.140 --> 00:27:39.720
And that's part of what we're
doing with Web Components,

00:27:39.720 --> 00:27:42.360
is that even though it
hides things from you,

00:27:42.360 --> 00:27:44.080
you can still drill
in and get into it

00:27:44.080 --> 00:27:46.440
and take it apart and do
something different with it,

00:27:46.440 --> 00:27:48.940
that you don't need necessarily
to start at the high level.

00:27:48.940 --> 00:27:51.830
You could start at the low
level and build up from there.

00:27:51.830 --> 00:27:56.350
JAKE: So yesterday, I was
ripping into application cache

00:27:56.350 --> 00:27:59.100
for its manifest format,
where you add a line to it,

00:27:59.100 --> 00:28:02.774
and you've set up routing and
caching sort of all at once.

00:28:02.774 --> 00:28:04.940
And it's not always clear
that you've done all that,

00:28:04.940 --> 00:28:07.290
or that one line
doesn't read like it

00:28:07.290 --> 00:28:09.040
should do all of those things.

00:28:09.040 --> 00:28:14.370
We have TranslateZ(0),
which as an API says,

00:28:14.370 --> 00:28:18.024
I want you to move this
nowhere on the Z-index.

00:28:18.024 --> 00:28:19.940
But that's promoting
something to a GPU layer.

00:28:19.940 --> 00:28:21.360
Is that another example?

00:28:21.360 --> 00:28:24.142
Is that one of those kind
of APIs that's kind of doing

00:28:24.142 --> 00:28:25.100
something it shouldn't?

00:28:27.604 --> 00:28:28.520
DARIN FISHER: Perhaps.

00:28:28.520 --> 00:28:30.770
One of the things that we've
been really excited about

00:28:30.770 --> 00:28:33.210
is trying to identify more
of the bedrock of the web

00:28:33.210 --> 00:28:34.144
platform.

00:28:34.144 --> 00:28:36.560
You can see the work that's
happening with service worker.

00:28:36.560 --> 00:28:38.370
You're very familiar
with this, Jake.

00:28:38.370 --> 00:28:41.810
All the stuff there that's
thinking about App Cache

00:28:41.810 --> 00:28:44.550
v2 or App Cache Exploded
or finding the primitives

00:28:44.550 --> 00:28:47.820
in App Cache and giving those
developers so that something

00:28:47.820 --> 00:28:50.280
like App Cache can
be explained cleanly,

00:28:50.280 --> 00:28:53.410
I think stuff like TranslateZ(0)
is kind of like this

00:28:53.410 --> 00:28:55.300
as well, although
that one is a very

00:28:55.300 --> 00:28:58.710
indirect way of
saying what you mean.

00:28:58.710 --> 00:29:02.460
Really, fixed position elements
should just get promoted.

00:29:02.460 --> 00:29:05.362
And ditto for overflow scroll
and so on and so forth.

00:29:05.362 --> 00:29:07.570
But yeah, in general, we're
very interested in trying

00:29:07.570 --> 00:29:13.050
to find-- to be careful of
these sort of high-level APIs

00:29:13.050 --> 00:29:16.180
that trap you and limit,
actually, your flexibility.

00:29:16.180 --> 00:29:18.430
High-level APIs can be
really great for giving you

00:29:18.430 --> 00:29:21.400
guide rails, but you need
to be able to sometimes step

00:29:21.400 --> 00:29:24.570
aside and find-- and
do things differently

00:29:24.570 --> 00:29:26.380
than what the API
designers were thinking.

00:29:26.380 --> 00:29:28.800
I mean, App Cache is just
the greatest example of this.

00:29:28.800 --> 00:29:31.750
But there are plenty of other
examples in the platform.

00:29:31.750 --> 00:29:33.850
So the more we
can put developers

00:29:33.850 --> 00:29:35.710
in control, the better.

00:29:35.710 --> 00:29:37.960
The more we can enable
developers to create frameworks

00:29:37.960 --> 00:29:41.760
or Web Components that allow
other developers be more

00:29:41.760 --> 00:29:45.110
successful, that just makes
everything go much better.

00:29:45.110 --> 00:29:47.420
If everything is gated
on improvements to Blink,

00:29:47.420 --> 00:29:49.812
we're not going to go very far.

00:29:49.812 --> 00:29:53.825
JAKE: So I've had developers ask
for a specific API or CSS rule

00:29:53.825 --> 00:29:58.195
or something for promoting
an element to a GPU layer.

00:29:58.195 --> 00:30:00.942
But I suppose that
would be tying it

00:30:00.942 --> 00:30:02.150
to a particular architecture.

00:30:02.150 --> 00:30:04.760
DARIN FISHER: Well, there's
a real cost to that, right?

00:30:04.760 --> 00:30:07.590
If a web page says, hey, I
need this to be a GP layer.

00:30:07.590 --> 00:30:10.080
Well, what happens when
you don't have enough VRAM?

00:30:10.080 --> 00:30:12.650
And so there's
definitely this challenge

00:30:12.650 --> 00:30:15.200
of making sure that we don't
create a platform that we're

00:30:15.200 --> 00:30:16.551
going to regret, too.

00:30:16.551 --> 00:30:19.050
JAKE: Also, part of the reason
that we have this Translate 0

00:30:19.050 --> 00:30:23.110
is that one day we could reverse
that and do something else,

00:30:23.110 --> 00:30:25.010
do something faster
that isn't specifically

00:30:25.010 --> 00:30:26.250
promoting to a GPU layer.

00:30:26.250 --> 00:30:28.250
DARIN FISHER: Yeah, I
mean, it is just a promise

00:30:28.250 --> 00:30:31.960
that it be rendered-- that it
appear a certain way, right?

00:30:31.960 --> 00:30:35.670
If we don't have the memory
to do it, we can't do it.

00:30:35.670 --> 00:30:36.400
JAKE: Cool.

00:30:36.400 --> 00:30:38.210
Sorry, I really like
rendering performance.

00:30:38.210 --> 00:30:40.043
It's part of my thing,
so I think I probably

00:30:40.043 --> 00:30:42.680
let that question ride probably
longer than I should have.

00:30:42.680 --> 00:30:44.555
ERIK KAY: By the way,
there's another example

00:30:44.555 --> 00:30:46.510
like this, where the
problem is sometimes

00:30:46.510 --> 00:30:49.570
that when you give developers
this thing that says--

00:30:49.570 --> 00:30:51.850
that looks like,
make this go faster,

00:30:51.850 --> 00:30:54.310
they will liberally sprinkle
that over their code.

00:30:54.310 --> 00:30:57.400
And the problem is that
as a platform, that

00:30:57.400 --> 00:30:59.210
limits what we can do
to optimize things.

00:30:59.210 --> 00:31:03.480
So a classic example of
this is that some languages

00:31:03.480 --> 00:31:05.105
with garbage
collectors in the past

00:31:05.105 --> 00:31:07.230
had a way of invoking the
garbage collector, of you

00:31:07.230 --> 00:31:09.080
saying, do it now.

00:31:09.080 --> 00:31:12.280
And the problem is that that
often is like the worst thing

00:31:12.280 --> 00:31:12.910
to do.

00:31:12.910 --> 00:31:14.830
The garbage collectors
can be very fast

00:31:14.830 --> 00:31:17.540
if they can look at the patterns
that decide when to do things

00:31:17.540 --> 00:31:21.150
and how to migrate stuff
from old space to new space

00:31:21.150 --> 00:31:24.090
and-- or new space to old
space, rather, and all that.

00:31:24.090 --> 00:31:26.620
And if the developer
is constantly saying,

00:31:26.620 --> 00:31:29.860
no, no, GC now, GC now, you're
actually slowing things down,

00:31:29.860 --> 00:31:31.070
not speeding things up.

00:31:31.070 --> 00:31:34.800
So sometimes hiding some of
these implementation details,

00:31:34.800 --> 00:31:36.340
there's actually
some benefit to it.

00:31:36.340 --> 00:31:36.980
HIROSHI LOCKHEIMER:
This conversation

00:31:36.980 --> 00:31:39.380
is really fascinating to me
as the native Android guy,

00:31:39.380 --> 00:31:41.072
because it's exactly
the same stuff that

00:31:41.072 --> 00:31:42.530
happens in the
native world, right?

00:31:42.530 --> 00:31:43.920
So it's fascinating.

00:31:43.920 --> 00:31:45.630
One thing I think--
I'm surprised no one

00:31:45.630 --> 00:31:46.700
mentioned it, the Blink tag.

00:31:46.700 --> 00:31:48.385
I think that's what
caused the problem, right?

00:31:48.385 --> 00:31:49.774
Because it's one frame a second.

00:31:49.774 --> 00:31:50.440
I mean, come on.

00:31:50.440 --> 00:31:52.460
JAKE: Nothing to do with the
Blink rendering engine, right?

00:31:52.460 --> 00:31:53.900
Yeah, yeah, we're not
responsible for that.

00:31:53.900 --> 00:31:54.286
[LAUGHTER]

00:31:54.286 --> 00:31:55.612
JAKE: Who do we blame for this?

00:31:55.612 --> 00:31:56.320
Was it Microsoft?

00:31:56.320 --> 00:31:56.967
Or Netscape?

00:31:56.967 --> 00:31:57.800
Someone else, right?

00:31:57.800 --> 00:31:58.890
Not us.

00:31:58.890 --> 00:32:02.500
So Android has this
codified design guidelines

00:32:02.500 --> 00:32:04.070
for application design, right?

00:32:04.070 --> 00:32:07.430
Are there any plans to release
dedicated UI guidelines

00:32:07.430 --> 00:32:11.100
for Chrome apps or
extension development?

00:32:11.100 --> 00:32:14.200
ERIK KAY: So Polymer is probably
where you're going to see this.

00:32:14.200 --> 00:32:19.040
So Polymer's really our
bet for sort of saying,

00:32:19.040 --> 00:32:21.190
not only are we going to
provide components that

00:32:21.190 --> 00:32:23.210
are going to be really easy
to use and really powerful

00:32:23.210 --> 00:32:24.626
and really performant,
but they're

00:32:24.626 --> 00:32:29.530
going to have a nice
opinionated look and feel.

00:32:29.530 --> 00:32:33.630
And we're going to
set animation curves,

00:32:33.630 --> 00:32:36.010
and we're going to set
spacing, and font selection,

00:32:36.010 --> 00:32:37.030
and whatever.

00:32:37.030 --> 00:32:41.020
Now, again, because it's the
web, you can ignore all that

00:32:41.020 --> 00:32:42.240
and do whatever you want.

00:32:42.240 --> 00:32:45.612
But the whole point is to
make the easy things easy.

00:32:45.612 --> 00:32:47.070
We want to have
that well-lit path.

00:32:47.070 --> 00:32:49.430
We want to guide you toward
something where if you just

00:32:49.430 --> 00:32:51.970
want to make something that
looks nice that you can,

00:32:51.970 --> 00:32:53.012
and you can do it easily.

00:32:53.012 --> 00:32:54.803
IAN ELLISON-TAYLOR: I
think the bottom line

00:32:54.803 --> 00:32:56.690
is we want the default
to just be beautiful

00:32:56.690 --> 00:32:59.700
and just to have something
that you'd be proud of just

00:32:59.700 --> 00:33:00.760
for no effort.

00:33:00.760 --> 00:33:02.890
And then second layer
being that, well, now you

00:33:02.890 --> 00:33:04.599
want to maybe do some
easy customization.

00:33:04.599 --> 00:33:06.973
You don't have to rewrite
everything, just the normal CSS

00:33:06.973 --> 00:33:08.600
that you know and
love today will work.

00:33:08.600 --> 00:33:10.830
And then there's the layer
below that says, OK, now I

00:33:10.830 --> 00:33:12.330
want something
really custom, so I'm

00:33:12.330 --> 00:33:13.700
going to use the
lower-level primitives.

00:33:13.700 --> 00:33:14.825
I'm going to use animation.

00:33:14.825 --> 00:33:17.570
I'm going to use something lower
level to really customize it.

00:33:17.570 --> 00:33:19.880
But you don't have to
rewrite everything.

00:33:19.880 --> 00:33:21.280
It'll all just hang together.

00:33:21.280 --> 00:33:23.113
LINUS UPSON: Yeah, we've
had this discussion

00:33:23.113 --> 00:33:26.482
inside the team for years,
where the web is kind

00:33:26.482 --> 00:33:28.690
of like-- design on the web
is kind of like evolution

00:33:28.690 --> 00:33:29.380
in the tropics.

00:33:29.380 --> 00:33:33.160
I mean, it's where really
crazy organisms evolve.

00:33:33.160 --> 00:33:35.550
And many of them are pretty
hideous, but some of them

00:33:35.550 --> 00:33:37.120
are really spectacular.

00:33:37.120 --> 00:33:39.620
Because there's no
guiding UI toolkit

00:33:39.620 --> 00:33:41.379
for the web from
the very beginning.

00:33:41.379 --> 00:33:43.170
And I think that's very
different than most

00:33:43.170 --> 00:33:46.010
other platforms, where there
is a standard system toolkit,

00:33:46.010 --> 00:33:48.370
and when you use that, you
get all the apps sort of have

00:33:48.370 --> 00:33:52.270
a very similar look and
feel and stuff like that.

00:33:52.270 --> 00:33:54.200
But usually, very often,
the most popular apps

00:33:54.200 --> 00:33:56.910
on each platform will then
step outside the toolkit

00:33:56.910 --> 00:34:00.700
because they want to do some new
and innovative thing on the UI.

00:34:00.700 --> 00:34:02.459
And so we see these
things coming at it

00:34:02.459 --> 00:34:03.500
from opposite directions.

00:34:03.500 --> 00:34:05.790
But with Polymer, we'd
really like at least there

00:34:05.790 --> 00:34:08.120
to be a widely deployed
option on the web

00:34:08.120 --> 00:34:11.775
where you can have more similar
and more standardized look

00:34:11.775 --> 00:34:12.594
and feel.

00:34:12.594 --> 00:34:16.469
JAKE: If I download an
app for Android or iPhone

00:34:16.469 --> 00:34:19.500
and I see that they've
decided, oh no, the button

00:34:19.500 --> 00:34:22.610
should go at the bottom
and they should be purple.

00:34:22.610 --> 00:34:23.120
Really?

00:34:23.120 --> 00:34:25.812
They've changed the--
they're different

00:34:25.812 --> 00:34:26.770
now from of other apps.

00:34:26.770 --> 00:34:29.110
And this to me, it
looks like a bad thing.

00:34:29.110 --> 00:34:30.949
But that's not true
on the web, right?

00:34:30.949 --> 00:34:33.580
There's so much
innovation in UI design.

00:34:33.580 --> 00:34:35.920
If we brought the web to have
a more standardized feel,

00:34:35.920 --> 00:34:37.730
would the web be
losing something.

00:34:37.730 --> 00:34:40.320
Or would it make
it easier to use?

00:34:40.320 --> 00:34:42.510
LINUS UPSON: Well, I think both.

00:34:42.510 --> 00:34:45.150
And what will happen on the
web is some people will use it,

00:34:45.150 --> 00:34:47.701
and you'll start to see more
commonality between sites,

00:34:47.701 --> 00:34:49.659
where people aren't
putting in a lot of effort.

00:34:49.659 --> 00:34:52.178
But usually most of
the popular places

00:34:52.178 --> 00:34:53.469
are going to heavily customize.

00:34:53.469 --> 00:34:56.030
And I think you'll see the same
thing in native and on the web.

00:34:56.030 --> 00:34:57.621
But on the web, they
just haven't even

00:34:57.621 --> 00:35:00.245
had a standard toolkit to choose
from, so it's just impossible.

00:35:00.245 --> 00:35:03.850
So we at least want
to give that option.

00:35:03.850 --> 00:35:07.170
JAKE: So how do we deal
with user expectations,

00:35:07.170 --> 00:35:09.510
with regard to offline web apps?

00:35:09.510 --> 00:35:13.650
So if we fix this thing
with service worker,

00:35:13.650 --> 00:35:15.690
you could say in some
way in some cases,

00:35:15.690 --> 00:35:18.484
you can fix it with
application cache,

00:35:18.484 --> 00:35:19.900
there's no user
expectation there.

00:35:19.900 --> 00:35:21.820
No one opens a browser when
they've got no connection

00:35:21.820 --> 00:35:22.820
and expects it to work.

00:35:22.820 --> 00:35:24.860
What can we do to fix that?

00:35:24.860 --> 00:35:27.900
ERIK KAY: Well, there's a couple
ways to think about offline.

00:35:27.900 --> 00:35:31.300
So whenever people typically--
when they say offline,

00:35:31.300 --> 00:35:33.807
they tend to think,
oh, I'm on an airplane.

00:35:33.807 --> 00:35:35.390
I'm somewhere far
away from a network.

00:35:35.390 --> 00:35:36.610
I have no network.

00:35:36.610 --> 00:35:39.890
The most common offline
use case is actually

00:35:39.890 --> 00:35:41.920
the use case where my
network is just bad.

00:35:41.920 --> 00:35:44.320
Or it's mostly good and
just occasionally bad.

00:35:44.320 --> 00:35:46.370
Or there's a hotel proxy
that got in the way.

00:35:46.370 --> 00:35:49.500
Or something bad happened that
would cause an interruption.

00:35:49.500 --> 00:35:52.390
And technologies
like service worker,

00:35:52.390 --> 00:35:55.670
and even Application
Cache in some cases,

00:35:55.670 --> 00:35:58.220
can smooth those
bumps out and make it

00:35:58.220 --> 00:35:59.620
so that you don't notice.

00:35:59.620 --> 00:36:01.750
And that's, I think,
a key innovation

00:36:01.750 --> 00:36:04.900
for the web, regardless
of the entry point.

00:36:04.900 --> 00:36:07.610
Now, that said, when you
are offline, really offline,

00:36:07.610 --> 00:36:10.960
I agree this is a big problem
that web browsers don't

00:36:10.960 --> 00:36:12.370
address well today.

00:36:12.370 --> 00:36:13.890
And it's actually
one of the reasons

00:36:13.890 --> 00:36:15.984
why we did packaged
apps, is because we--

00:36:15.984 --> 00:36:17.900
and did them the way we
did, is we pulled them

00:36:17.900 --> 00:36:20.900
outside the browser, give
you a surface on the desktop,

00:36:20.900 --> 00:36:23.970
like a Native app, to remove
some of those barriers.

00:36:23.970 --> 00:36:26.267
Because if you think about
it, it's not just the--

00:36:26.267 --> 00:36:28.350
there's a couple barriers
you have to get through.

00:36:28.350 --> 00:36:30.834
One is the psychological
thing of well,

00:36:30.834 --> 00:36:32.250
should I even
launch this browser?

00:36:32.250 --> 00:36:33.710
I know I don't have a network.

00:36:33.710 --> 00:36:35.209
And everything's
going to be broken,

00:36:35.209 --> 00:36:37.220
and all my restored tabs
are going to be busted.

00:36:37.220 --> 00:36:39.056
So why would you even
do that to begin with?

00:36:39.056 --> 00:36:40.430
And if you decided
you were going

00:36:40.430 --> 00:36:42.554
to do that, then how do
you navigate to your thing?

00:36:42.554 --> 00:36:44.000
Well, did you memorize that URL?

00:36:44.000 --> 00:36:45.440
Did you bookmark it?

00:36:45.440 --> 00:36:47.094
For many people,
they search for it.

00:36:47.094 --> 00:36:48.760
They use a search
engine and guess what?

00:36:48.760 --> 00:36:51.240
If you're offline, you
can't search for it.

00:36:51.240 --> 00:36:54.650
And so even just navigating
the normal use case

00:36:54.650 --> 00:36:56.150
where you navigate
to your offline

00:36:56.150 --> 00:36:58.030
enabled app is now broken.

00:36:58.030 --> 00:37:01.460
And so that's part of some
of the motivation with what

00:37:01.460 --> 00:37:02.990
we did with packaged apps.

00:37:02.990 --> 00:37:06.890
That said, I do think that
this is a problem we can solve

00:37:06.890 --> 00:37:09.280
and-- or improve, I should say.

00:37:09.280 --> 00:37:11.250
Probably not solve,
because it's unlikely

00:37:11.250 --> 00:37:14.720
that we'll ever get a
significant portion of the web

00:37:14.720 --> 00:37:16.700
really offline enabled.

00:37:16.700 --> 00:37:19.536
Think Wikipedia
or Google search.

00:37:19.536 --> 00:37:21.410
These are things which
fundamentally are just

00:37:21.410 --> 00:37:23.790
not going to cache
themselves completely offline

00:37:23.790 --> 00:37:24.670
and not going to be--

00:37:24.670 --> 00:37:27.600
LINUS UPSON: Well, the problem
is even with native apps now,

00:37:27.600 --> 00:37:29.730
most everything-- all
the popular things people

00:37:29.730 --> 00:37:31.500
do require a network connection.

00:37:31.500 --> 00:37:33.250
I mean, sure, I can
go look at old tweets

00:37:33.250 --> 00:37:36.280
when I'm offline, but--

00:37:36.280 --> 00:37:39.059
JAKE: But if they update in the
background, they're not old.

00:37:39.059 --> 00:37:41.100
LINUS UPSON: Ah, now you've
got a power question.

00:37:44.050 --> 00:37:48.410
If I have 100 apps doing
that, I've got a problem.

00:37:48.410 --> 00:37:51.300
JAKE: So did we find-- did
offline work in the Chrome app

00:37:51.300 --> 00:37:52.420
space?

00:37:52.420 --> 00:37:55.977
Did users actually expect it
to work with out a connection?

00:37:55.977 --> 00:37:57.810
ERIK KAY: Yeah, I mean,
it does mostly work.

00:37:57.810 --> 00:38:01.140
Now again, the trick
about it is, again, it's

00:38:01.140 --> 00:38:03.980
not necessarily about
does it function?

00:38:03.980 --> 00:38:06.350
Does it have all the features
that the app would have?

00:38:06.350 --> 00:38:08.800
It's more about does
it not break, right?

00:38:08.800 --> 00:38:10.580
And does it recover gracefully?

00:38:10.580 --> 00:38:13.880
When you launch Skype and
you don't have a network

00:38:13.880 --> 00:38:16.560
connection, you don't expect
to be able to do a video chat,

00:38:16.560 --> 00:38:17.160
right?

00:38:17.160 --> 00:38:19.410
LINUS UPSON: But you wouldn't
expect a white rectangle

00:38:19.410 --> 00:38:21.450
that says 404 something.

00:38:21.450 --> 00:38:22.450
ERIK KAY: Yeah, exactly.

00:38:22.450 --> 00:38:25.010
And you expect that, oh,
if the network reconnects

00:38:25.010 --> 00:38:27.506
that it will suddenly
wake up and start to work.

00:38:27.506 --> 00:38:29.630
You didn't have to find a
reload button, a refresh,

00:38:29.630 --> 00:38:31.660
or quit the app and
restart it, right?

00:38:31.660 --> 00:38:33.700
And that's kind of
thing that, yes,

00:38:33.700 --> 00:38:35.731
it is working quite
well with packaged apps.

00:38:35.731 --> 00:38:38.230
LINUS UPSON: Yeah, but I think
the key to what Eric said is,

00:38:38.230 --> 00:38:39.640
so we've done tons
of user studies.

00:38:39.640 --> 00:38:41.014
We have lots of
customers who are

00:38:41.014 --> 00:38:44.410
using various
Google apps offline.

00:38:44.410 --> 00:38:45.910
The big thing is
they need an access

00:38:45.910 --> 00:38:47.050
point outside the browser.

00:38:47.050 --> 00:38:49.070
And when they click it,
they can't launch a browser

00:38:49.070 --> 00:38:50.750
because the browser is
just full of land mines

00:38:50.750 --> 00:38:51.583
when you're offline.

00:38:51.583 --> 00:38:53.670
There's hardly
anything you can touch

00:38:53.670 --> 00:38:55.459
that will work when
you're offline.

00:38:55.459 --> 00:38:57.000
And so having it be
in its own window

00:38:57.000 --> 00:38:59.230
and having a dedicated
access point to it

00:38:59.230 --> 00:39:02.620
are the key things for
doing genuinely offline type

00:39:02.620 --> 00:39:04.619
applications.

00:39:04.619 --> 00:39:05.660
JAKE: Yeah, you're right.

00:39:05.660 --> 00:39:08.185
If I open Skype or whatever,
and it was just a blank window,

00:39:08.185 --> 00:39:10.185
I would consider that to
be a broken experience.

00:39:10.185 --> 00:39:12.380
If I had no connection,
if I open a browser

00:39:12.380 --> 00:39:14.296
and I've got no connection,
I type in the URL,

00:39:14.296 --> 00:39:16.000
and it says-- it
does that, it dials,

00:39:16.000 --> 00:39:17.940
and, like, yeah, I've
got no connection.

00:39:17.940 --> 00:39:20.256
The difference between
the two is an icon

00:39:20.256 --> 00:39:21.630
in the space where
I would expect

00:39:21.630 --> 00:39:25.440
to find apps on that platform.

00:39:25.440 --> 00:39:27.470
ERIK KAY: It's not just that.

00:39:27.470 --> 00:39:30.350
As Linus was saying, it's the
affordances in the browser.

00:39:30.350 --> 00:39:33.160
It's the address bar and
bookmarks and all the land

00:39:33.160 --> 00:39:33.930
mines.

00:39:33.930 --> 00:39:38.090
LINUS UPSON: The back button,
closing tabs, and the menu.

00:39:38.090 --> 00:39:41.440
JAKE: I mean, in Chrome
apps, there is a URL buy.

00:39:41.440 --> 00:39:44.380
If I install TweetDeck, it
can open as a tab, right?

00:39:44.380 --> 00:39:45.920
If a Chrome URL?

00:39:45.920 --> 00:39:48.380
ERIK KAY: So that's a
difference between what

00:39:48.380 --> 00:39:51.290
are-- what we did in V1,
which was hosted apps, which

00:39:51.290 --> 00:39:56.930
were really just web pages
with some additional built-in

00:39:56.930 --> 00:39:58.200
permissions to it.

00:39:58.200 --> 00:40:00.180
With packaged apps,
there's no URL bar.

00:40:00.180 --> 00:40:01.730
It's completely
outside the browser

00:40:01.730 --> 00:40:05.230
and stand-alone windows.

00:40:05.230 --> 00:40:07.840
JAKE: So Blink established
some guidelines

00:40:07.840 --> 00:40:10.570
for how new features
should be introduced.

00:40:10.570 --> 00:40:13.330
I like covering that, the
compatibility risks and things

00:40:13.330 --> 00:40:15.374
like that, what other
browsers are saying.

00:40:15.374 --> 00:40:17.040
And lately, there's
been some discussion

00:40:17.040 --> 00:40:20.870
around the possibility of the
Dart VM going into Chrome.

00:40:20.870 --> 00:40:24.216
What's the plan there?

00:40:24.216 --> 00:40:24.716
Who's brave?

00:40:28.150 --> 00:40:30.200
LINUS UPSON: Sure.

00:40:30.200 --> 00:40:34.090
So one the things
we set out to do

00:40:34.090 --> 00:40:37.085
from the beginning with both
Native Client and Dart was we

00:40:37.085 --> 00:40:38.460
wanted people to
be able to write

00:40:38.460 --> 00:40:40.500
code that would run
in all browsers.

00:40:40.500 --> 00:40:43.270
So we wanted to be able
to have a path, where

00:40:43.270 --> 00:40:46.950
we can compile C code
down to JavaScript

00:40:46.950 --> 00:40:49.340
and run it in all
browsers, including Chrome.

00:40:49.340 --> 00:40:52.280
We want people to be
able to write Dart code

00:40:52.280 --> 00:40:55.070
and run in all browsers
by compiling it down

00:40:55.070 --> 00:40:56.030
to JavaScript.

00:40:56.030 --> 00:41:00.800
And so the capability
of being able to work

00:41:00.800 --> 00:41:02.840
in these other languages
is useful to a number

00:41:02.840 --> 00:41:03.430
of developers.

00:41:03.430 --> 00:41:04.763
And so we wanted to enable that.

00:41:04.763 --> 00:41:06.940
That was sort of
the baseline for it.

00:41:06.940 --> 00:41:09.020
But then going
beyond that, you say,

00:41:09.020 --> 00:41:12.780
is JavaScript really the
best VM to execute C code in?

00:41:12.780 --> 00:41:14.910
I mean, it's possible.

00:41:14.910 --> 00:41:17.827
But are you going to get the
best possible performance

00:41:17.827 --> 00:41:18.410
by doing that?

00:41:18.410 --> 00:41:19.785
And will you be
able to do things

00:41:19.785 --> 00:41:22.970
like threads and other things?

00:41:22.970 --> 00:41:24.730
Similar questions
come up with Dart.

00:41:24.730 --> 00:41:26.400
We can compile Dart
down to JavaScript,

00:41:26.400 --> 00:41:27.790
but that might
not be the fastest

00:41:27.790 --> 00:41:29.250
way you can run the language.

00:41:29.250 --> 00:41:32.260
And so the Dart team basically
took on a challenge that said,

00:41:32.260 --> 00:41:34.426
we're not even going to
think about putting the Dart

00:41:34.426 --> 00:41:36.850
VM into Chrome unless we can
show dramatic performance

00:41:36.850 --> 00:41:39.370
enhancement, both in
terms of startup time

00:41:39.370 --> 00:41:42.010
and in terms of
execution performance.

00:41:42.010 --> 00:41:44.010
And so that's what they're
working on right now.

00:41:44.010 --> 00:41:45.634
And also we want to
do it in a way that

00:41:45.634 --> 00:41:49.301
doesn't add a tremendous
amount of complexity to Blink

00:41:49.301 --> 00:41:50.675
and the rest of
the web platform.

00:41:50.675 --> 00:41:52.100
It needs to be done
in a way that's

00:41:52.100 --> 00:41:54.099
essentially orthogonal
to everything else that's

00:41:54.099 --> 00:41:54.820
going on.

00:41:54.820 --> 00:41:56.869
Because we can't just
keep bolting in new VMs

00:41:56.869 --> 00:41:58.410
left and right if
we end up with some

00:41:58.410 --> 00:42:00.552
horrible in square
dependency mesh.

00:42:00.552 --> 00:42:02.510
So that's the way we're
looking at the problem.

00:42:02.510 --> 00:42:05.062
We haven't made any
explicit decisions yet

00:42:05.062 --> 00:42:06.270
about what we're going to do.

00:42:06.270 --> 00:42:08.510
But that's how we're
thinking about it

00:42:08.510 --> 00:42:12.504
JAKE: So my knowledge of
Pinnacle is actually quite low,

00:42:12.504 --> 00:42:13.920
but I mean, I get
the feeling this

00:42:13.920 --> 00:42:16.930
is for-- I can write
in whatever language

00:42:16.930 --> 00:42:19.020
I'm most comfortable
with and compile it

00:42:19.020 --> 00:42:23.484
down to something Pinnacle
can run really, really fast.

00:42:23.484 --> 00:42:25.400
Is that something that
could happen with Dart?

00:42:25.400 --> 00:42:28.427
I mean, would we need to
put the Dart VM into Chrome?

00:42:28.427 --> 00:42:31.010
Or would we just be able to take
to compile it using something

00:42:31.010 --> 00:42:31.660
like Pinnacle?

00:42:31.660 --> 00:42:35.080
Is that one solution that
would cover both cases?

00:42:35.080 --> 00:42:37.180
ERIK KAY: Well, I
mean, the Dart2js

00:42:37.180 --> 00:42:39.150
is already actually
doing this quite well.

00:42:39.150 --> 00:42:41.350
If you look at some of the
benchmarks they're doing,

00:42:41.350 --> 00:42:44.840
and some of the tree shaking
and other our whole program

00:42:44.840 --> 00:42:47.370
optimizations that they're
able to do with Dart2js,

00:42:47.370 --> 00:42:50.900
they can make programs
that take a Dart

00:42:50.900 --> 00:42:52.720
and make it a Dart
programming and emit

00:42:52.720 --> 00:42:55.685
JS that's much faster than
handwritten equivalent to JS

00:42:55.685 --> 00:42:56.320
is.

00:42:56.320 --> 00:42:58.140
So in some ways, they
are there more there

00:42:58.140 --> 00:43:00.360
but they're moving that way.

00:43:00.360 --> 00:43:02.740
Really, Pinnacle
is-- it certainly

00:43:02.740 --> 00:43:04.890
could be used for
that, and it's possible

00:43:04.890 --> 00:43:08.440
that we could get
comparable performance.

00:43:08.440 --> 00:43:12.100
Honestly, though, if they can
get-- do it with JavaScript,

00:43:12.100 --> 00:43:13.360
it's--

00:43:13.360 --> 00:43:17.040
LINUS UPSON: Basically,
with Pinnacle,

00:43:17.040 --> 00:43:19.730
the security and
platform portability

00:43:19.730 --> 00:43:21.680
that you get with
Pinnacle would just

00:43:21.680 --> 00:43:25.250
make implementing a
VM like a modern VM,

00:43:25.250 --> 00:43:28.250
a modern Java VM, JavaScript
VM, Dart VM in Pinnacle.

00:43:28.250 --> 00:43:30.612
It just would not be as
fast in that environment

00:43:30.612 --> 00:43:31.945
as if you implement it natively.

00:43:31.945 --> 00:43:32.200
JAKE: Hm.

00:43:32.200 --> 00:43:32.929
That makes sense.

00:43:32.929 --> 00:43:35.220
DARIN FISHER: And so there's
another interesting thing,

00:43:35.220 --> 00:43:38.170
which is just that
one of Dart's goals

00:43:38.170 --> 00:43:41.460
is to interact with the
DOM and to be very much

00:43:41.460 --> 00:43:43.420
an alternative to
JavaScript, right?

00:43:43.420 --> 00:43:46.360
Whereas with Pinnacle, it's
a plug-in architecture.

00:43:46.360 --> 00:43:48.070
It's very much
asynchronous to what's

00:43:48.070 --> 00:43:51.220
going on on the main
thread, where the DOM lives.

00:43:51.220 --> 00:43:52.760
And so it's just very different.

00:43:52.760 --> 00:43:55.460
You wouldn't be able to
actually take the Dart VM

00:43:55.460 --> 00:43:57.590
and run it in that
plug-in context

00:43:57.590 --> 00:44:00.582
and have synchronous
direct access to the DOM.

00:44:00.582 --> 00:44:02.290
And so it's just a
different environment.

00:44:02.290 --> 00:44:03.900
JAKE: So Pinnacle does not
have direct access to the DOM.

00:44:03.900 --> 00:44:04.930
It's like a sandbox.

00:44:04.930 --> 00:44:07.150
DARIN FISHER: It runs is
asynchronously to everything

00:44:07.150 --> 00:44:08.150
for performance.

00:44:08.150 --> 00:44:10.050
JAKE: Is there any kind of
equivalent sort of postMessage

00:44:10.050 --> 00:44:10.890
for it to sort of get out into--

00:44:10.890 --> 00:44:13.130
DARIN FISHER: Yes,
there's a postMessage API.

00:44:13.130 --> 00:44:14.600
JAKE: I'm basically just
asking questions because

00:44:14.600 --> 00:44:16.372
of my own ignorance
about this stuff now.

00:44:16.372 --> 00:44:18.580
I should get back to actually
questions people asked.

00:44:18.580 --> 00:44:20.536
And it does turn
out that this one

00:44:20.536 --> 00:44:22.160
is about Native
Client, which is great.

00:44:22.160 --> 00:44:25.097
IAN ELLISON-TAYLOR: Or maybe go
to the Pinnacle session, maybe

00:44:25.097 --> 00:44:26.430
watch the online stream, though.

00:44:26.430 --> 00:44:27.560
JAKE: Yeah, there's
a problem there.

00:44:27.560 --> 00:44:28.790
Between all of the
sessions, I was

00:44:28.790 --> 00:44:30.710
busy writing the intro
for the next session.

00:44:30.710 --> 00:44:33.090
So I'm assuming this
was a good summit.

00:44:33.090 --> 00:44:36.152
But I don't really know, right?

00:44:36.152 --> 00:44:38.360
IAN ELLISON-TAYLOR: We'll
look at the feedback later.

00:44:38.360 --> 00:44:39.901
JAKE: Well, it's
all recorded, right?

00:44:39.901 --> 00:44:41.710
So I can actually just--
I'm off next week,

00:44:41.710 --> 00:44:42.810
so I'll just do that.

00:44:42.810 --> 00:44:44.810
My girlfriend would
actually hate that if I just

00:44:44.810 --> 00:44:46.800
spent the whole thing
watching DEV videos.

00:44:46.800 --> 00:44:49.930
I'm actually banned from
using a laptop next week.

00:44:49.930 --> 00:44:52.917
Any plans for supporting Native
Client in Chrome on Android?

00:44:52.917 --> 00:44:54.750
Because it's not there
at the moment, right?

00:44:54.750 --> 00:44:56.890
ERIK KAY:Yeah, we don't
have any plans right now.

00:44:56.890 --> 00:44:59.610
To be honest, we've been
focused on the desktop

00:44:59.610 --> 00:45:02.220
and making that experience
as good as we can.

00:45:02.220 --> 00:45:05.930
And I think right
now Android does

00:45:05.930 --> 00:45:09.240
have a great solution for
delivering native code on it

00:45:09.240 --> 00:45:10.230
already.

00:45:10.230 --> 00:45:13.790
So it didn't have the
same needs that we

00:45:13.790 --> 00:45:16.380
had in the web of
filling in the gap.

00:45:16.380 --> 00:45:19.410
In terms of in a
browser, Clank right now

00:45:19.410 --> 00:45:22.705
is, I think, really focused
on being smaller, faster,

00:45:22.705 --> 00:45:23.330
more efficient.

00:45:23.330 --> 00:45:27.150
And so it has to try to get as
much as the web platform in it

00:45:27.150 --> 00:45:27.810
as we can.

00:45:27.810 --> 00:45:30.532
So again, we're taking
our time thinking

00:45:30.532 --> 00:45:31.490
about things like this.

00:45:31.490 --> 00:45:35.232
ARNAUD WEBER: And
Clank is [INAUDIBLE].

00:45:35.232 --> 00:45:36.170
ERIK KAY: Sorry, yes.

00:45:36.170 --> 00:45:37.260
I used a code name.

00:45:37.260 --> 00:45:38.260
JAKE: Someone leaked it.

00:45:38.260 --> 00:45:41.040
Isn't it like a fire?

00:45:41.040 --> 00:45:43.629
You get fired if you leak a
code name for a project, right?

00:45:43.629 --> 00:45:45.066
Is that, yeah?

00:45:45.066 --> 00:45:48.900
[LAUGHTER]

00:45:48.900 --> 00:45:52.290
JAKE: OK, so I
actually remember--

00:45:52.290 --> 00:45:54.480
I'd gone out drinking
with few friends.

00:45:54.480 --> 00:45:57.060
And this was in London, and
I was making my way back,

00:45:57.060 --> 00:45:58.490
and this was like at midnight.

00:45:58.490 --> 00:45:59.550
I was quite drunk.

00:45:59.550 --> 00:46:02.880
I was on the Underground, and
I just got talking to someone.

00:46:02.880 --> 00:46:05.090
I don't really speak to
people when I'm not drunk,

00:46:05.090 --> 00:46:06.112
but this time I was.

00:46:06.112 --> 00:46:07.820
IAN ELLISON-TAYLOR:
So right now you are.

00:46:07.820 --> 00:46:08.528
JAKE: Yeah, yeah.

00:46:08.528 --> 00:46:10.650
I've had a few whiskies
before I came here.

00:46:10.650 --> 00:46:11.300
[LAUGHTER]

00:46:11.300 --> 00:46:13.050
JAKE: I was just telling
you guys a story.

00:46:13.050 --> 00:46:14.508
I thought we could
do with a break.

00:46:14.508 --> 00:46:15.380
[LAUGHTER]

00:46:15.380 --> 00:46:17.920
JAKE: But someone-- I
was talking to someone,

00:46:17.920 --> 00:46:20.120
and they weren't working
in the web or anything.

00:46:20.120 --> 00:46:23.430
And they said to me that
their boyfriend had told them

00:46:23.430 --> 00:46:27.420
not to use Chrome
because of memory usage.

00:46:27.420 --> 00:46:29.420
That was actually the
first time I'd heard that,

00:46:29.420 --> 00:46:30.715
but I've seen it since.

00:46:30.715 --> 00:46:32.840
Are we doing something to
decrease the memory usage

00:46:32.840 --> 00:46:33.670
in Chrome?

00:46:33.670 --> 00:46:35.470
And if you have
multiple tabs open,

00:46:35.470 --> 00:46:37.685
this is especially a
case on mobile, right?

00:46:37.685 --> 00:46:40.954
LINUS UPSON: Yeah, I
think the memory issues--

00:46:40.954 --> 00:46:42.120
there's two things going on.

00:46:42.120 --> 00:46:44.649
One, we always need to use
less memory than we're using.

00:46:44.649 --> 00:46:46.940
I don't care how much we're
using, we need to use less.

00:46:46.940 --> 00:46:48.690
And we have lots of
dashboards to track it

00:46:48.690 --> 00:46:51.620
and continually working
to drive things down.

00:46:51.620 --> 00:46:54.700
Two, though, because of Chrome's
multiprocess architecture,

00:46:54.700 --> 00:46:57.110
there's a lot of misinformed
reporting about how much

00:46:57.110 --> 00:46:58.980
memory Chrome actually uses.

00:46:58.980 --> 00:47:02.290
Because there's a lot of shared
memory between those processes.

00:47:02.290 --> 00:47:05.020
And so if you really want
to measure the memory

00:47:05.020 --> 00:47:09.600
usage of a complex system, the
gold standard way of doing it--

00:47:09.600 --> 00:47:11.100
and there's a page
on Chromium.org--

00:47:11.100 --> 00:47:13.475
I can't remember exactly where
it is-- that describes how

00:47:13.475 --> 00:47:15.660
to do this, which
is basically you

00:47:15.660 --> 00:47:18.220
get a system you have to
completely quiesce it.

00:47:18.220 --> 00:47:24.180
You look at how many pages
of RAM are actually in use.

00:47:24.180 --> 00:47:25.649
And then you run
your experiment,

00:47:25.649 --> 00:47:27.190
and you ask the
operating system, OK,

00:47:27.190 --> 00:47:29.554
how many pages of RAM
are actually in use now?

00:47:29.554 --> 00:47:31.470
Because some of the
memory that's allocated by

00:47:31.470 --> 00:47:33.346
the browser is actually
held in kernel space.

00:47:33.346 --> 00:47:35.303
Some of it's shared
between multiple processes,

00:47:35.303 --> 00:47:37.580
so you've got to make sure
you count it exactly once.

00:47:37.580 --> 00:47:38.954
And so you basically
have to look

00:47:38.954 --> 00:47:40.770
at it from the whole
operating system layer

00:47:40.770 --> 00:47:43.780
and find out during your test,
what was the beginning memory

00:47:43.780 --> 00:47:45.860
usage and what was
the end memory usage?

00:47:45.860 --> 00:47:47.635
And see what that is.

00:47:47.635 --> 00:47:49.135
So the first thing
I get frustrated,

00:47:49.135 --> 00:47:50.740
because people keep
sending these blog

00:47:50.740 --> 00:47:53.030
articles about Chrome's
using 10 gigs of RAM.

00:47:53.030 --> 00:47:55.555
It's like, no, it's not.

00:47:55.555 --> 00:47:58.400
And well, some people have
a lot of tabs open but--

00:47:58.400 --> 00:47:59.829
[LAUGHTER]

00:47:59.829 --> 00:48:01.620
LINUS UPSON: --the
other thing we found out

00:48:01.620 --> 00:48:05.880
is as we make Chrome faster
and make it use less memory,

00:48:05.880 --> 00:48:09.300
which we have over the
years, people open more tabs,

00:48:09.300 --> 00:48:14.012
and web applications use more
RAM, which is another problem.

00:48:14.012 --> 00:48:15.720
But anyway, we recently
had a big project

00:48:15.720 --> 00:48:18.370
to reduce memory usage,
particularly on mobile.

00:48:18.370 --> 00:48:21.129
And it had a lot of benefits
on other platforms as well.

00:48:21.129 --> 00:48:22.920
ARNAUD WEBER: So yeah,
it's in Chromium 31.

00:48:22.920 --> 00:48:25.490
And it's really part
of the [INAUDIBLE],

00:48:25.490 --> 00:48:29.910
which the main focus was to run
great on 512 megabyte devices.

00:48:29.910 --> 00:48:33.400
And so Chrome-- we had a
very large folder on this,

00:48:33.400 --> 00:48:35.734
and we reduced
memory significantly.

00:48:35.734 --> 00:48:37.900
DARIN FISHER: And we have
a pretty ambitious project

00:48:37.900 --> 00:48:45.150
going on involving improving the
garbage collection of basically

00:48:45.150 --> 00:48:47.200
DOM object wrappers.

00:48:47.200 --> 00:48:50.350
Basically, today the DOM
is reference counted,

00:48:50.350 --> 00:48:51.850
and JavaScript is
garbage collected,

00:48:51.850 --> 00:48:54.120
and they can-- the
garbage collector

00:48:54.120 --> 00:48:56.850
can get-- it can take it a
while to learn that there's

00:48:56.850 --> 00:48:59.420
a whole bunch of garbage
that's outside of the garbage--

00:48:59.420 --> 00:49:04.622
outside of the VAT that it can
actually release references to.

00:49:04.622 --> 00:49:06.080
This is the Oilpan
project that you

00:49:06.080 --> 00:49:07.960
might have heard
of on Blink-dev.

00:49:07.960 --> 00:49:09.710
And we're very excited
about opportunities

00:49:09.710 --> 00:49:13.950
there to improve-- keep the
steady state memory usage down

00:49:13.950 --> 00:49:18.320
of applications that do a lot
of DOM traversals, or whatnot.

00:49:18.320 --> 00:49:19.920
ERIK KAY: There's
a related problem,

00:49:19.920 --> 00:49:21.850
too, that Linus
kind of alluded to,

00:49:21.850 --> 00:49:26.570
which is that oftentimes
memory usage is really

00:49:26.570 --> 00:49:28.360
the web pages using
a lot of memory.

00:49:28.360 --> 00:49:30.280
The web pages are doing
more advanced things.

00:49:30.280 --> 00:49:32.010
They're now growing.

00:49:32.010 --> 00:49:34.170
And I think one of
our responsibilities

00:49:34.170 --> 00:49:37.890
is improving the developer tools
so that developers can diagnose

00:49:37.890 --> 00:49:39.100
these problems more easily.

00:49:39.100 --> 00:49:41.670
And we've been adding a bunch
of things to Chrome Dev tools

00:49:41.670 --> 00:49:44.120
to help users-- developers
find memory leaks

00:49:44.120 --> 00:49:47.730
and to identify large growth
and to fix those problems.

00:49:47.730 --> 00:49:50.529
LINUS UPSON: Yeah, and I think
the other thing is users,

00:49:50.529 --> 00:49:52.820
I don't think, should have
to be responsible for memory

00:49:52.820 --> 00:49:53.280
management.

00:49:53.280 --> 00:49:55.529
If I want to open 100 tabs,
why can't I open 100 tabs?

00:49:55.529 --> 00:49:59.280
I think the browser can get
a lot smarter about evicting

00:49:59.280 --> 00:50:01.300
things from memory
that aren't being used.

00:50:01.300 --> 00:50:05.340
It's difficult to do as an app
on a PC, on Windows or Mac,

00:50:05.340 --> 00:50:07.900
because you don't know what
else is going on in the system.

00:50:07.900 --> 00:50:09.460
And you don't want to
necessarily be throwing away

00:50:09.460 --> 00:50:12.430
memory just because there's some
other app, like they launched

00:50:12.430 --> 00:50:15.780
Photoshop, and it
flushes all of your tabs.

00:50:15.780 --> 00:50:18.332
But on platforms like
Android and Chrome OS,

00:50:18.332 --> 00:50:20.290
where we have a more
holistic view about what's

00:50:20.290 --> 00:50:21.665
going on in the
system, we can be

00:50:21.665 --> 00:50:24.420
smarter about managing
the total memory usage

00:50:24.420 --> 00:50:25.720
and consumption of the browser.

00:50:25.720 --> 00:50:27.261
JAKE: Yeah, I get
myself into a state

00:50:27.261 --> 00:50:29.887
sometimes where the tabs get so
small that the icon disappears.

00:50:29.887 --> 00:50:31.469
And that's when I
have to really think

00:50:31.469 --> 00:50:32.730
about where my life's heading.

00:50:32.730 --> 00:50:36.190
In fact, sometimes I
don't have Chrome open,

00:50:36.190 --> 00:50:39.450
and I'm about to open it,
because I've restarted

00:50:39.450 --> 00:50:41.980
the machine or whatever, I
look over at my router at home

00:50:41.980 --> 00:50:44.060
and it just like, puppy dog
eyes, and it shakes its head,

00:50:44.060 --> 00:50:45.226
and it's like tell you what?

00:50:45.226 --> 00:50:47.579
I'll disable Wi-Fi, then
open Chrome, and then

00:50:47.579 --> 00:50:49.620
turn Wi-Fi back on and
just go to the tab I need.

00:50:49.620 --> 00:50:51.740
[LAUGHTER]

00:50:51.740 --> 00:50:52.250
JAKE: So--

00:50:52.250 --> 00:50:54.688
LINUS UPSON: You need help.

00:50:54.688 --> 00:50:56.480
JAKE: Yeah, I know.

00:50:56.480 --> 00:50:59.990
So packaged apps
is one mechanism

00:50:59.990 --> 00:51:02.270
to adding richer APIs
for WebView apps.

00:51:02.270 --> 00:51:06.360
You know, we're doing that
sourcing with Cordova PhoneGap.

00:51:06.360 --> 00:51:09.447
We also packaged
apps just on desktop.

00:51:09.447 --> 00:51:11.030
So we've got this
at home screen thing

00:51:11.030 --> 00:51:13.267
as well that just puts an
icon on the home screen,

00:51:13.267 --> 00:51:15.100
but it doesn't really
give it anything else.

00:51:15.100 --> 00:51:16.712
It doesn't give any new APIs.

00:51:16.712 --> 00:51:18.170
Is there a future
where we could do

00:51:18.170 --> 00:51:20.660
that, like have the
actual installation

00:51:20.660 --> 00:51:22.670
step that grants extra APIs?

00:51:22.670 --> 00:51:24.878
ARNAUD WEBER: So let me talk
about that a little bit.

00:51:24.878 --> 00:51:28.540
Actually, so, it's in the
N31 beta and [? N32 ?] beta,

00:51:28.540 --> 00:51:31.660
and hopefully it's going
to be on [? N32 ?] stable.

00:51:31.660 --> 00:51:34.635
There is a new meta tag you can
use in fact, as a developer,

00:51:34.635 --> 00:51:36.910
to prompt the user
to say hey, do you

00:51:36.910 --> 00:51:39.070
want to install this
on your home screen?

00:51:39.070 --> 00:51:41.992
So in a way, there's a
way to do that today.

00:51:41.992 --> 00:51:44.450
IAN ELLISON-TAYLOR: The idea
of giving enhanced permissions

00:51:44.450 --> 00:51:45.866
to an application
that's installed

00:51:45.866 --> 00:51:50.210
this way, one of our goals is
to try to-- one of the really

00:51:50.210 --> 00:51:52.610
cool things about the web is
it that you can just get up

00:51:52.610 --> 00:51:54.651
and using that application
very quickly, and then

00:51:54.651 --> 00:51:57.170
only sort of bother
the user with prompts

00:51:57.170 --> 00:52:01.360
when they actually want to
get access to some capability.

00:52:01.360 --> 00:52:04.620
And so we're excited about, as
we've been doing for a while,

00:52:04.620 --> 00:52:06.580
adding more
capabilities to the web.

00:52:06.580 --> 00:52:08.600
And I think that whole
home screen thing

00:52:08.600 --> 00:52:12.170
is an important part of
giving web apps that presence

00:52:12.170 --> 00:52:15.220
on the launch surface
that the user is going

00:52:15.220 --> 00:52:19.279
to when they think
about launching an app.

00:52:19.279 --> 00:52:21.070
The permissions problem
doesn't necessarily

00:52:21.070 --> 00:52:23.254
have to be coupled to
the way in which you

00:52:23.254 --> 00:52:24.170
launch an application.

00:52:24.170 --> 00:52:27.100
LINUS UPSON: I think
the core challenge

00:52:27.100 --> 00:52:31.240
that we face is really squaring
the security model of the web

00:52:31.240 --> 00:52:34.170
with the capabilities app
developers want, right?

00:52:34.170 --> 00:52:35.840
It needs to be safe
to click on links,

00:52:35.840 --> 00:52:39.330
but app developers want
then access to everything.

00:52:39.330 --> 00:52:42.690
And so I think that is the
hardest problem we always

00:52:42.690 --> 00:52:43.415
deal with.

00:52:43.415 --> 00:52:45.540
Things like these performance
issues, memory usage,

00:52:45.540 --> 00:52:47.700
all this other rendering
performance, these

00:52:47.700 --> 00:52:50.034
are places where
there's a linear path

00:52:50.034 --> 00:52:51.450
to make progress
on, and I can see

00:52:51.450 --> 00:52:53.680
the lines converging over time.

00:52:53.680 --> 00:52:58.500
The inherent split between
every link is safe,

00:52:58.500 --> 00:53:03.520
and I want access to send
SMSes from your phone, that

00:53:03.520 --> 00:53:06.910
is the hardest
problem we deal with.

00:53:06.910 --> 00:53:08.950
JAKE: So you mentioned,
having a meta

00:53:08.950 --> 00:53:12.290
tag to say that something
is web app installable.

00:53:12.290 --> 00:53:15.884
Is that-- because I'm aware of
the tags to say it's capable.

00:53:15.884 --> 00:53:17.300
It can be added
to the home screen

00:53:17.300 --> 00:53:20.990
and maybe appear without
a URL bar and things.

00:53:20.990 --> 00:53:23.730
Apple's got one that will
actually sort of show an advert

00:53:23.730 --> 00:53:27.350
for like a native app
equivalent over the top.

00:53:27.350 --> 00:53:29.140
Do we advertise
the fact that this

00:53:29.140 --> 00:53:31.120
can be installed to home
screen, and you'll get something

00:53:31.120 --> 00:53:32.230
like a different experience?

00:53:32.230 --> 00:53:34.396
ARNAUD WEBER: So it's
really-- we advertise the fact

00:53:34.396 --> 00:53:37.150
that this web page can be added
to your home screen as a user,

00:53:37.150 --> 00:53:40.410
and then we can get back to that
web app from the home screen.

00:53:40.410 --> 00:53:43.080
JAKE: In terms of the--
because one of the things

00:53:43.080 --> 00:53:46.880
I called it out and in my talk,
having the sort of slammed door

00:53:46.880 --> 00:53:49.547
when you visit a website
that says, yeah, no.

00:53:49.547 --> 00:53:51.880
We've got the information,
but it's an extra click away,

00:53:51.880 --> 00:53:54.088
just because we want to tell
you about our app again.

00:53:54.088 --> 00:53:56.480
Is Apple going to have a
decent solution to that?

00:53:56.480 --> 00:53:58.684
They've got this
banner across the top.

00:53:58.684 --> 00:54:00.100
Is that something--
are we looking

00:54:00.100 --> 00:54:03.694
at implementing that
or something similar?

00:54:03.694 --> 00:54:06.390
LINUS UPSON: Yeah,
I mean, we're all

00:54:06.390 --> 00:54:08.610
tremendously frustrated by that.

00:54:08.610 --> 00:54:09.910
You're in a browser.

00:54:09.910 --> 00:54:11.410
I have no desire
to install the app.

00:54:11.410 --> 00:54:12.660
I just use this
thing once, and I

00:54:12.660 --> 00:54:14.743
have to go through this
interstitial of like, hey,

00:54:14.743 --> 00:54:15.955
install my app.

00:54:15.955 --> 00:54:17.580
We want to make that
go away, and we're

00:54:17.580 --> 00:54:19.121
looking at a bunch
of different ways,

00:54:19.121 --> 00:54:21.230
both technological
as well as social

00:54:21.230 --> 00:54:24.340
and various economic
incentives and stuff

00:54:24.340 --> 00:54:27.700
like that, so that people don't
put those barriers in front

00:54:27.700 --> 00:54:29.770
of users, and they do the
right thing for users.

00:54:29.770 --> 00:54:31.180
DARIN FISHER: Often
those interstitials even

00:54:31.180 --> 00:54:32.150
break deep linking.

00:54:32.150 --> 00:54:34.095
It's very, very frustrating.

00:54:34.095 --> 00:54:35.470
JAKE: All right,
so I think we're

00:54:35.470 --> 00:54:38.520
going to move on to
our last question.

00:54:38.520 --> 00:54:42.950
So why have-- so we're not
adding any new CSS prefixes,

00:54:42.950 --> 00:54:43.450
right?

00:54:43.450 --> 00:54:44.350
That's Blink.

00:54:44.350 --> 00:54:45.790
We're not going to add
the new CSS prefixes?

00:54:45.790 --> 00:54:46.706
DARIN FISHER: No more.

00:54:46.706 --> 00:54:47.380
No Blink prefix.

00:54:47.380 --> 00:54:47.550
JAKE: There's not one there.

00:54:47.550 --> 00:54:49.569
But we've got some
APIs that still have.

00:54:49.569 --> 00:54:51.360
I mean, and one of the
ones is like, you've

00:54:51.360 --> 00:54:53.740
got CSS transforms
and animations,

00:54:53.740 --> 00:54:58.114
and they've left
behind a WebKit prefix.

00:54:58.114 --> 00:55:00.030
And IE and Firefox have
shipped it unprefixed.

00:55:00.030 --> 00:55:01.610
DARIN FISHER: Oh, right, yeah.

00:55:01.610 --> 00:55:04.670
So there's a bug on this, and
there's a lot of dependencies.

00:55:04.670 --> 00:55:09.490
Our goal, really, is to unprefix
these particular set of WebKit

00:55:09.490 --> 00:55:13.430
prefix CSS properties once
they're up to the standards.

00:55:13.430 --> 00:55:15.530
Basically, we don't want
to take away the prefix

00:55:15.530 --> 00:55:18.414
until we are shipping the thing
that is compatible with what

00:55:18.414 --> 00:55:19.830
these other browsers
are shipping.

00:55:19.830 --> 00:55:21.413
So we have a set of
bugs to go through

00:55:21.413 --> 00:55:22.440
before we could do that.

00:55:22.440 --> 00:55:23.870
It's actually a
tremendous story.

00:55:23.870 --> 00:55:25.920
Because if you look at
the Blink Dev thread here,

00:55:25.920 --> 00:55:28.380
it's very much a
community effort.

00:55:28.380 --> 00:55:30.340
I think one of the
guys from Intel

00:55:30.340 --> 00:55:34.100
is very involved in doing some
of the work to make this happen

00:55:34.100 --> 00:55:35.840
as well as folks from Google.

00:55:35.840 --> 00:55:38.070
I think we're all excited
about getting to a point

00:55:38.070 --> 00:55:40.840
where we can take
away WebKit prefixes.

00:55:40.840 --> 00:55:43.530
And we might keep the WebKit
prefixed version around

00:55:43.530 --> 00:55:45.470
for quite some time
because there's

00:55:45.470 --> 00:55:50.066
a process for deprecation and
figuring out once nobody really

00:55:50.066 --> 00:55:51.190
would care if we remove it.

00:55:51.190 --> 00:55:52.309
That can take a while.

00:55:52.309 --> 00:55:54.850
JAKE: Yeah, I think even Firefox
adopted some of them, right?

00:55:54.850 --> 00:55:57.150
Because of people just
using that and not

00:55:57.150 --> 00:55:58.400
the unprefixed version at all.

00:55:58.400 --> 00:55:59.191
DARIN FISHER: Yeah.

00:55:59.191 --> 00:56:01.210
I'm not sure to what
extent this has happened,

00:56:01.210 --> 00:56:03.420
but certainly there was a
lot of discussion about,

00:56:03.420 --> 00:56:05.600
oh my god, I guess
WebKit prefixed

00:56:05.600 --> 00:56:09.210
CSS properties are
just a standard.

00:56:09.210 --> 00:56:11.120
Some jumped out of
them, and people

00:56:11.120 --> 00:56:12.870
tried to implement
them in other browsers.

00:56:12.870 --> 00:56:14.744
And that just doesn't
seem like a good story,

00:56:14.744 --> 00:56:18.450
and that's part of why Blink
does not have a Blink prefix.

00:56:18.450 --> 00:56:20.760
JAKE: And with that,
that says out of time.

00:56:20.760 --> 00:56:22.385
I hope you got your
questions answered.

00:56:22.385 --> 00:56:24.510
And if not, do
bother us on Twitter.

00:56:24.510 --> 00:56:26.490
We're here for the
rest of the day,

00:56:26.490 --> 00:56:28.140
and we'll see what we can do.

00:56:28.140 --> 00:56:30.500
Can I have a big round of
applause for our panelists?

00:56:30.500 --> 00:56:34.292
[APPLAUSE]

