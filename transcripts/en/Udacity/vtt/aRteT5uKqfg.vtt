WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:05.000
So now we're ready to build the Web index. We're going to use the split operation to do this.

00:00:05.000 --> 00:00:08.000
So we can certainly build a way to separate all the words

00:00:08.000 --> 00:00:11.000
in a Web page ourselves using the operation we've already seen.

00:00:11.000 --> 00:00:14.000
We can use indexing to go through the letters in the string

00:00:14.000 --> 00:00:20.000
We can identify characters that we think of as separating words such as a space or a comma.

00:00:20.000 --> 00:00:23.000
And we can collect those all as separate strings.

00:00:23.000 --> 00:00:28.000
The good news is Python provides a built-in operation that does exactly what we need.

00:00:28.000 --> 00:00:31.000
It's called split. We invoke split on a string

00:00:31.000 --> 00:00:34.000
and what it outputs is a list of the words in the string.

00:00:34.000 --> 00:00:39.000
For now we're not going to worry too much about the details of how split decides how to separate a string into words,

00:00:39.000 --> 00:00:45.000
but let's look at a few examples to see that it does something pretty close to what we want for building our Web index.

00:00:45.000 --> 00:00:48.000
So we've defined quote as a string which is this quote from Robert Reich.

00:00:48.000 --> 00:00:53.000
"In Washington it's dog eat dog. In academia, it's exactly the opposite."

00:00:53.000 --> 00:00:56.000
And now we'll use split to divide the quote into its words.

00:00:56.000 --> 00:00:58.000
And you can see the result.

00:00:58.000 --> 00:01:02.000
We have a list where the elements of the list are the words from the quote.

00:01:02.000 --> 00:01:06.000
And split does a pretty good job of dividing the string into the words that we want for our Web index.

00:01:06.000 --> 00:01:11.000
It's not perfect. We can see that Washington, which was followed by a comma in the quote,

00:01:11.000 --> 00:01:14.000
ends up as the string Washington including the comma.

00:01:14.000 --> 00:01:17.000
That's a different value than the keyword Washington.

00:01:17.000 --> 00:01:22.000
So if we search for Washington and we built our index this way, we're not going to actually find this occurance.

00:01:22.000 --> 00:01:26.000
So this isn't perfect, but it's going to be good enough for what we use for now.

00:01:26.000 --> 00:01:30.000
Later on we can think about ways to divide the Web page into its component words

00:01:30.000 --> 00:01:33.000
in a way that will be more accurate.

00:01:33.000 --> 00:01:38.000
Figuring out exactly how to decide when something's a new word is a fairly tough problem, though.

00:01:38.000 --> 00:01:42.000
As a second example to get a feel for how split works, let's try another quote.

00:01:42.000 --> 00:01:45.000
Here we have a quote from David Letterman.

00:01:45.000 --> 00:01:50.000
"There's no business like show business, but there are several businesses like accounting."

00:01:50.000 --> 00:01:54.000
I've introduced a new Python construct. We're using the triple quote here.

00:01:54.000 --> 00:01:58.000
The nice thing about triple quotes is that we can divide them over multiple lines.

00:01:58.000 --> 00:02:04.000
When we tried to enter the previous quote using just the double quotes, it fell off the edge of the screen.

00:02:04.000 --> 00:02:08.000
Using triple quotes, we can define one string spread over multiple lines.

00:02:08.000 --> 00:02:13.000
And now when we print out the result of splitting the quote, we see it's divided into words.

00:02:13.000 --> 00:02:17.000
It's fine that there are new lines. It still separating it into the words we have.

00:02:17.000 --> 00:02:21.000
We still have some issues, like the parentheses is included as part of David.

00:02:21.000 --> 00:02:24.000
So this quote wouldn't show up for the keyword David.

00:02:24.000 --> 00:02:28.000
I'll leave it for you to decide at the end of the class whether computing

00:02:28.000 --> 00:02:31.000
is a business more like show business or business more like accounting.

00:02:31.000 --> 00:02:33.000
I'm going with show business, though.

00:02:33.000 --> 00:02:36.000
So now let's see if you can write the code to build an index using the URLs collected from our Web problem.

