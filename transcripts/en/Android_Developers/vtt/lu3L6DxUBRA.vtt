WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.374
[MUSIC PLAYING]

00:00:07.230 --> 00:00:08.790
LUV KOTHARI: My
name is Luv Kothari.

00:00:08.790 --> 00:00:12.090
I'm a product manager
in Google Play Store.

00:00:12.090 --> 00:00:14.820
I'm responsible for improving
our understanding of Android

00:00:14.820 --> 00:00:17.640
apps, their content,
their capabilities,

00:00:17.640 --> 00:00:18.560
and their attributes.

00:00:18.560 --> 00:00:20.310
And with that understanding
and knowledge,

00:00:20.310 --> 00:00:22.980
we're improving how
we connect users

00:00:22.980 --> 00:00:26.737
with great digital experiences
and improve their lives.

00:00:26.737 --> 00:00:27.820
ILYA FIRMAN: Hi, everyone.

00:00:27.820 --> 00:00:29.220
My name is Ilya Firman.

00:00:29.220 --> 00:00:31.970
I'm a software engineer on
the Actions on Google team.

00:00:31.970 --> 00:00:34.710
Actions on Google offers
APIs for developers

00:00:34.710 --> 00:00:37.230
to integrate with the Google
Assistant and other Google

00:00:37.230 --> 00:00:38.220
products.

00:00:38.220 --> 00:00:40.900
My focus is on bringing
Android apps into the Actions

00:00:40.900 --> 00:00:43.669
on Google ecosystem.

00:00:43.669 --> 00:00:45.960
LUV KOTHARI: So today, we
are super excited to give you

00:00:45.960 --> 00:00:48.510
a sneak peek into App Actions.

00:00:48.510 --> 00:00:51.100
As Dave mentioned in the
keynote this morning,

00:00:51.100 --> 00:00:54.240
App Actions will allow users
to discover and reengage

00:00:54.240 --> 00:00:57.540
with the capabilities and
content from your apps

00:00:57.540 --> 00:01:00.310
in just the right moment.

00:01:00.310 --> 00:01:03.180
And as an Android developer,
you will get an opportunity

00:01:03.180 --> 00:01:07.140
to get surfaced across multiple
Google and Android surfaces

00:01:07.140 --> 00:01:12.510
and improve engagement and
reach for your Android apps.

00:01:12.510 --> 00:01:14.580
Let's look at a couple
of examples for this.

00:01:17.530 --> 00:01:20.560
With App Actions, users
will be able to get things

00:01:20.560 --> 00:01:23.220
done quickly and seamlessly.

00:01:23.220 --> 00:01:26.100
Now, imagine you're
planning a Friday night out

00:01:26.100 --> 00:01:28.000
with your friends.

00:01:28.000 --> 00:01:31.120
Wouldn't it be great if you
had a personal assistant which

00:01:31.120 --> 00:01:35.830
could help you accomplish
tasks such as making the dinner

00:01:35.830 --> 00:01:41.060
reservation, getting
movie tickets,

00:01:41.060 --> 00:01:43.930
getting a ride to the
venue, and building

00:01:43.930 --> 00:01:47.720
a collage from the pictures
taken during the evening?

00:01:47.720 --> 00:01:50.290
Now, Google Assistant
was created to help users

00:01:50.290 --> 00:01:52.510
with these daily tasks.

00:01:52.510 --> 00:01:54.430
And for many of
these tasks, the user

00:01:54.430 --> 00:01:58.990
may already have the perfect
Android app on their devices.

00:01:58.990 --> 00:02:01.390
With App Actions,
your Android app

00:02:01.390 --> 00:02:03.550
can integrate with
Google Assistant

00:02:03.550 --> 00:02:06.490
and participate in
these user journeys.

00:02:06.490 --> 00:02:09.729
Moreover, these App
Actions suggestions

00:02:09.729 --> 00:02:12.580
will also appear on other
Google and Android surfaces

00:02:12.580 --> 00:02:15.352
to help users get
things done and discover

00:02:15.352 --> 00:02:16.310
what their apps can do.

00:02:19.034 --> 00:02:21.910
With App Actions,
users will also

00:02:21.910 --> 00:02:26.380
be able to go from the content
they love to the Actions

00:02:26.380 --> 00:02:29.980
they can take on that
content to the relevant apps

00:02:29.980 --> 00:02:33.500
to fulfill those Actions.

00:02:33.500 --> 00:02:38.370
Now, imagine a Lady Gaga fan is
searching for her latest hit.

00:02:38.370 --> 00:02:40.680
Wouldn't it be
great if that user,

00:02:40.680 --> 00:02:42.990
while searching for
that information,

00:02:42.990 --> 00:02:46.860
could also discover where
to listen to her songs,

00:02:46.860 --> 00:02:51.480
watch her videos, find
tickets for upcoming concerts,

00:02:51.480 --> 00:02:54.390
and find a bit about her?

00:02:54.390 --> 00:02:57.290
This is the ideal
moment for the user

00:02:57.290 --> 00:03:00.170
to discover capabilities from
the Android apps they already

00:03:00.170 --> 00:03:02.500
have.

00:03:02.500 --> 00:03:05.690
App Actions can help users
re-engage with the apps

00:03:05.690 --> 00:03:09.710
they forgot they had and also
discover new opportunities

00:03:09.710 --> 00:03:14.180
and capabilities they
did not know existed.

00:03:14.180 --> 00:03:16.280
We will be bringing
similar experiences

00:03:16.280 --> 00:03:20.870
to diverse content such as TV
shows, movies, books, courses,

00:03:20.870 --> 00:03:23.180
sports, games, books, and more.

00:03:28.890 --> 00:03:31.200
As an Android developer,
you know that reengagement

00:03:31.200 --> 00:03:34.260
is a challenging problem.

00:03:34.260 --> 00:03:38.220
Users have hundreds of apps on
their devices to choose from.

00:03:38.220 --> 00:03:40.860
Android has already did a
survey a couple of years ago

00:03:40.860 --> 00:03:44.610
and found out that
77% of Android users

00:03:44.610 --> 00:03:48.150
do not use an app after
three days of installing it.

00:03:48.150 --> 00:03:53.610
And that number goes up
to 90% after a month.

00:03:53.610 --> 00:03:56.640
You all have worked really
hard for those app installs,

00:03:56.640 --> 00:03:59.220
but getting users to keep
coming back to your app

00:03:59.220 --> 00:04:01.690
is a harder problem.

00:04:01.690 --> 00:04:04.110
Now, notifications
and emails, they're

00:04:04.110 --> 00:04:06.420
all tools in your toolkit.

00:04:06.420 --> 00:04:08.730
But it's also possible
that they can come

00:04:08.730 --> 00:04:12.270
across as spammy and annoying.

00:04:12.270 --> 00:04:14.910
It's much better to
reengage with the user

00:04:14.910 --> 00:04:19.350
in the right context
and in the right moment.

00:04:19.350 --> 00:04:22.320
So today, we're going
beyond simply predicting

00:04:22.320 --> 00:04:27.320
the next app the user would
want to open to the next Action

00:04:27.320 --> 00:04:29.580
user would want to take.

00:04:29.580 --> 00:04:32.310
In an AI-first world,
we want to assist

00:04:32.310 --> 00:04:37.890
users to find capabilities
and content from your apps,

00:04:37.890 --> 00:04:41.830
even if that information is
buried deep inside the app.

00:04:45.020 --> 00:04:47.030
So how will we make this happen?

00:04:47.030 --> 00:04:50.740
First, we're building a
rich catalog of Actions,

00:04:50.740 --> 00:04:53.680
or intents, as we call them.

00:04:53.680 --> 00:04:56.260
Essentially, think of
them as verb plus noun.

00:04:56.260 --> 00:04:57.940
These are the ways
you will define

00:04:57.940 --> 00:05:00.040
what your apps are capable of.

00:05:00.040 --> 00:05:02.620
Some examples-- play
music, play game,

00:05:02.620 --> 00:05:06.020
take calls, order
ride, order food.

00:05:06.020 --> 00:05:08.440
These are all intents
in our catalog.

00:05:08.440 --> 00:05:10.840
For these intents,
we will then build

00:05:10.840 --> 00:05:12.790
deep semantic understanding.

00:05:12.790 --> 00:05:14.350
Now, what do I mean by that?

00:05:14.350 --> 00:05:18.040
We will define detailed
schemas with parameter specs

00:05:18.040 --> 00:05:20.920
and also define grammar not
only in English but many

00:05:20.920 --> 00:05:22.586
other languages.

00:05:22.586 --> 00:05:25.750
Now, let's take a concrete
example of checking air quality

00:05:25.750 --> 00:05:28.120
in Los Angeles.

00:05:28.120 --> 00:05:30.910
There are multiple ways a
user can make that query.

00:05:30.910 --> 00:05:32.630
Some examples are right here.

00:05:32.630 --> 00:05:34.810
"Check pollution in LA."

00:05:34.810 --> 00:05:36.370
"Find smog levels."

00:05:36.370 --> 00:05:38.140
"Check air quality report."

00:05:38.140 --> 00:05:40.000
"What's the forecast
for air pollution?"

00:05:40.000 --> 00:05:43.960
And many other possible ways
a user can make that query.

00:05:43.960 --> 00:05:46.510
Google will parse
all of these queries

00:05:46.510 --> 00:05:49.090
and map them into one
common built-in intent

00:05:49.090 --> 00:05:50.730
called CHECK_AIR_QUALITY.

00:05:50.730 --> 00:05:53.320
We'll also parse the
right parameters,

00:05:53.320 --> 00:05:56.290
such as location being Los
Angeles and time period

00:05:56.290 --> 00:05:58.067
being today.

00:05:58.067 --> 00:05:59.650
All of this will get
then passed along

00:05:59.650 --> 00:06:01.330
to the Android
app, which can then

00:06:01.330 --> 00:06:03.601
take the user to the
right place inside the app

00:06:03.601 --> 00:06:04.600
and fulfill that Action.

00:06:07.690 --> 00:06:10.930
As I said, we'll also define
grammars in popular languages

00:06:10.930 --> 00:06:14.380
and provide natural
language understanding.

00:06:14.380 --> 00:06:15.880
What's really
powerful about this

00:06:15.880 --> 00:06:18.880
is that you get instant global
reach without actually having

00:06:18.880 --> 00:06:21.460
to do the hard work of
understanding languages,

00:06:21.460 --> 00:06:23.860
providing semantic
understanding.

00:06:23.860 --> 00:06:26.860
We already support 16
languages and will continue

00:06:26.860 --> 00:06:30.650
to expand our coverage.

00:06:30.650 --> 00:06:32.600
How do you participate?

00:06:32.600 --> 00:06:34.010
As an Android
developer, you just

00:06:34.010 --> 00:06:37.940
need to add an Actions.xml
file in your APK.

00:06:37.940 --> 00:06:40.540
In this file, you need to
register for the intents

00:06:40.540 --> 00:06:43.130
that your app is capable
of and it supports

00:06:43.130 --> 00:06:46.880
and tell us how to fulfill
those Actions via deep-links.

00:06:46.880 --> 00:06:50.940
And Ilya will cover more of
exactly how you can do that.

00:06:50.940 --> 00:06:53.450
Once you've exposed the
capabilities and content

00:06:53.450 --> 00:06:58.640
of your apps, Google will then
map user queries and context

00:06:58.640 --> 00:07:01.880
to your app and surface
you in multiple highly used

00:07:01.880 --> 00:07:04.270
Google products,
starting from Android,

00:07:04.270 --> 00:07:06.710
and within Android, the
launcher and smart text

00:07:06.710 --> 00:07:11.330
selection, the Google Play
Store, the Google Assistant,

00:07:11.330 --> 00:07:14.020
and the Search app.

00:07:14.020 --> 00:07:16.210
Actions are not
restricted to Android P

00:07:16.210 --> 00:07:19.917
and are available on all devices
with the most recent versions

00:07:19.917 --> 00:07:20.500
of these apps.

00:07:24.024 --> 00:07:25.440
Let's walk through
a few examples.

00:07:25.440 --> 00:07:27.565
And by the way, I'm super
excited to be walking you

00:07:27.565 --> 00:07:29.272
through these really
amazing features we

00:07:29.272 --> 00:07:31.230
have worked really hard
for the last few months

00:07:31.230 --> 00:07:33.900
to put together.

00:07:33.900 --> 00:07:37.500
This is my screen on my
phone, the All Apps screen,

00:07:37.500 --> 00:07:38.881
as we call it.

00:07:38.881 --> 00:07:40.380
Last year, we
introduced the concept

00:07:40.380 --> 00:07:42.900
of predicted [INAUDIBLE].

00:07:42.900 --> 00:07:44.850
This is the operating
system trying

00:07:44.850 --> 00:07:49.750
to predict the next app me, as
a user, would want to open up.

00:07:49.750 --> 00:07:51.300
It's been working really great.

00:07:51.300 --> 00:07:53.610
As Dave mentioned this
morning, we have about 60%

00:07:53.610 --> 00:07:55.110
prediction rate on this.

00:07:55.110 --> 00:07:57.300
It's phenomenal.

00:07:57.300 --> 00:07:59.790
But this year, we
want to go further.

00:07:59.790 --> 00:08:02.370
We want to go from
predicting the next app

00:08:02.370 --> 00:08:06.520
to predicting the next Action
user would want to take.

00:08:06.520 --> 00:08:10.147
So if you take a closer look,
I see two Action suggestions.

00:08:10.147 --> 00:08:11.730
And right around
this time of the day,

00:08:11.730 --> 00:08:15.240
I'm typically
commuting back home.

00:08:15.240 --> 00:08:17.610
I'm relying on Google
Maps to navigate me

00:08:17.610 --> 00:08:19.750
through the crazy
Bay Area traffic we

00:08:19.750 --> 00:08:21.550
have to deal with around here.

00:08:21.550 --> 00:08:25.970
I'm also talking to my wife,
Tina, catching up on our day

00:08:25.970 --> 00:08:27.950
and mostly strategizing
on how to survive

00:08:27.950 --> 00:08:29.430
with two kids at home.

00:08:32.010 --> 00:08:34.730
Both of these Actions take
me deep inside the app

00:08:34.730 --> 00:08:38.340
to fulfill the task immediately.

00:08:38.340 --> 00:08:42.169
The Actions are predicted
based on my usage patterns,

00:08:42.169 --> 00:08:45.830
my routines, my app sequences,
and also in the context

00:08:45.830 --> 00:08:49.970
I'm in, whether I'm in my car,
whether I have my headset on,

00:08:49.970 --> 00:08:52.550
what else I'm doing.

00:08:52.550 --> 00:08:56.290
As another example, if I really
plug in my headset in my phone,

00:08:56.290 --> 00:08:59.150
I'll get an Action to resume
an album or a playlist

00:08:59.150 --> 00:09:01.700
that I was listening to
on my favorite music app.

00:09:05.700 --> 00:09:08.070
Actions are also included
in smart text selection

00:09:08.070 --> 00:09:09.642
in Android.

00:09:09.642 --> 00:09:11.100
So let's say I get
a recommendation

00:09:11.100 --> 00:09:14.940
to a new restaurant in the
city called Flour + Water.

00:09:14.940 --> 00:09:17.952
And as I tap around
on that text,

00:09:17.952 --> 00:09:19.530
smart text selection
will recognize

00:09:19.530 --> 00:09:24.120
that it's a restaurant name
and select the whole text.

00:09:24.120 --> 00:09:27.930
It will also try to map
what possible Actions

00:09:27.930 --> 00:09:30.900
and then, further, what possible
apps can fulfill that Action

00:09:30.900 --> 00:09:33.690
for that given entity.

00:09:33.690 --> 00:09:38.460
So as I select Flour +
Water, I get a recommendation

00:09:38.460 --> 00:09:42.009
to use OpenTable, which is an
app that I use a lot to make

00:09:42.009 --> 00:09:43.050
reservations on my phone.

00:09:45.590 --> 00:09:46.491
I can tap on that.

00:09:46.491 --> 00:09:48.740
It will take me directly
into the OpenTable app, where

00:09:48.740 --> 00:09:52.040
I can see more information, read
reviews, and make the dinner

00:09:52.040 --> 00:09:54.230
reservation.

00:09:54.230 --> 00:09:57.590
All of this is getting powered
using an on-device machine

00:09:57.590 --> 00:09:59.150
learning model.

00:09:59.150 --> 00:10:01.610
Any of that text that I'm
selecting on the screen

00:10:01.610 --> 00:10:08.770
never leaves my device, so
everything is secure and fast.

00:10:08.770 --> 00:10:11.100
Smart text selection's
neural network

00:10:11.100 --> 00:10:14.230
will be able to recognize many
other entities, such as TV

00:10:14.230 --> 00:10:18.670
shows, movies,
athletes, musicians,

00:10:18.670 --> 00:10:19.960
flight numbers, and more.

00:10:23.250 --> 00:10:26.080
Actions will also
surface in Play Store.

00:10:26.080 --> 00:10:28.080
Now, what's really
phenomenal about this

00:10:28.080 --> 00:10:31.070
is that we all know there
is an app for everything.

00:10:31.070 --> 00:10:32.760
And the Play Store
is the place where

00:10:32.760 --> 00:10:37.000
users go looking for those
apps and those capabilities.

00:10:37.000 --> 00:10:39.270
So let's say I
search for Lady Gaga.

00:10:39.270 --> 00:10:43.440
I will get Action suggestions
to go inside any of these apps

00:10:43.440 --> 00:10:47.010
and fulfill those Actions.

00:10:47.010 --> 00:10:49.175
Again, what's
interesting is not only

00:10:49.175 --> 00:10:53.210
I get Action suggestions
for apps I have installed

00:10:53.210 --> 00:10:55.080
but also the apps
I've not installed.

00:10:55.080 --> 00:10:58.970
This is the universe of
apps that exist out there.

00:10:58.970 --> 00:11:01.370
If I tap on something
that is not installed,

00:11:01.370 --> 00:11:03.890
I'll go to the Details
page of that app.

00:11:03.890 --> 00:11:05.460
I can then install the app.

00:11:05.460 --> 00:11:08.060
And when I tap open, it'll
again take me directly

00:11:08.060 --> 00:11:12.350
into the right place inside
the app to fulfill that Action.

00:11:12.350 --> 00:11:16.040
With App Actions, users
can discover new ways

00:11:16.040 --> 00:11:18.300
to reengage with the
content they already love.

00:11:21.290 --> 00:11:23.940
Actions will also
work in Assistant.

00:11:23.940 --> 00:11:27.420
So let's say I ask Assistant
to show me my budget on Mint.

00:11:27.420 --> 00:11:29.380
Assistant will
understand that query

00:11:29.380 --> 00:11:34.830
and parse it to "show budget"
Action inside the Android app.

00:11:34.830 --> 00:11:36.770
And again, the right
place inside the app

00:11:36.770 --> 00:11:39.410
will get invoked, and I'll be
able to fulfill that Action.

00:11:42.520 --> 00:11:45.990
Here, I'm asking Assistant,
what is Lady Gaga's real name?

00:11:45.990 --> 00:11:48.280
Now, of course, we'll
understand the question,

00:11:48.280 --> 00:11:50.360
answer back with the
right information.

00:11:50.360 --> 00:11:52.090
But the Assistant
can also anticipate

00:11:52.090 --> 00:11:54.520
that I might be interested
in knowing more about Lady

00:11:54.520 --> 00:11:57.760
Gaga and similar artists.

00:11:57.760 --> 00:11:59.890
So I get shown Actions
such as where all I

00:11:59.890 --> 00:12:04.000
can listen to her
songs, watch her videos,

00:12:04.000 --> 00:12:06.550
buy tickets to her upcoming
concerts, back to the example

00:12:06.550 --> 00:12:09.100
I showed earlier in
the presentation.

00:12:09.100 --> 00:12:12.700
It's a great way for users
to discover capabilities

00:12:12.700 --> 00:12:14.950
about the apps
they already have,

00:12:14.950 --> 00:12:18.160
and they're able to do
so in the right moment.

00:12:18.160 --> 00:12:20.410
Again, tapping on
any of these chips

00:12:20.410 --> 00:12:23.110
will take me directly
into your Android apps

00:12:23.110 --> 00:12:26.090
and then will let me fulfill
the Action I was intended to do.

00:12:28.660 --> 00:12:31.330
Finally, as Dave mentioned
this morning in the keynote,

00:12:31.330 --> 00:12:34.660
and you all saw this, we're
exploring different ways

00:12:34.660 --> 00:12:37.180
to surface Actions in
Google Search for apps

00:12:37.180 --> 00:12:39.400
that users already use a lot.

00:12:39.400 --> 00:12:42.430
As an example, if you search
for the latest Avengers

00:12:42.430 --> 00:12:44.440
movie, "Infinity
War," in addition

00:12:44.440 --> 00:12:46.390
to regular suggestions,
you will now

00:12:46.390 --> 00:12:49.390
get an Action to Fandango
app to buy tickets,

00:12:49.390 --> 00:12:51.640
assuming Fandango is an
app that you use a lot

00:12:51.640 --> 00:12:53.970
and you have it on your phone.

00:12:53.970 --> 00:12:56.770
Really cool.

00:12:56.770 --> 00:13:00.250
Changing gears a little,
Actions for App Actions

00:13:00.250 --> 00:13:02.410
are built as part
of a broader Actions

00:13:02.410 --> 00:13:04.780
on Google developer platform.

00:13:04.780 --> 00:13:09.180
This platform provides common
development tools, processes,

00:13:09.180 --> 00:13:11.680
and a set of building blocks,
foundational building blocks,

00:13:11.680 --> 00:13:13.360
really.

00:13:13.360 --> 00:13:15.740
An example of this you
already saw-- intent catalog.

00:13:15.740 --> 00:13:17.610
This is the taxonomy
of some built

00:13:17.610 --> 00:13:19.090
in intents for
which we'll provide

00:13:19.090 --> 00:13:22.620
deep semantic understanding.

00:13:22.620 --> 00:13:24.710
With structured data,
you can provide Google

00:13:24.710 --> 00:13:27.930
the inventory for your Actions.

00:13:27.930 --> 00:13:31.370
You can also report Action
usage via Firebase App Indexing

00:13:31.370 --> 00:13:34.220
and get recommended in
personalized suggestions based

00:13:34.220 --> 00:13:38.170
on context and usage patterns.

00:13:38.170 --> 00:13:40.660
Identity and seamless
digital subscriptions

00:13:40.660 --> 00:13:44.950
allow hassle-free transition
across multiple device form

00:13:44.950 --> 00:13:48.590
factors and modalities.

00:13:48.590 --> 00:13:50.650
The two modalities available--

00:13:50.650 --> 00:13:52.270
number one, Android App Actions.

00:13:52.270 --> 00:13:54.821
That's what we've been
talking about here.

00:13:54.821 --> 00:13:57.070
There is another one, which
is conversational Actions.

00:13:57.070 --> 00:13:58.611
And you've heard
quite a bit about it

00:13:58.611 --> 00:14:02.062
in the consumer and
developer keynote.

00:14:02.062 --> 00:14:03.520
These are the ones
for you to build

00:14:03.520 --> 00:14:06.800
voice-powered experiences.

00:14:06.800 --> 00:14:08.630
You can also join
a vertical program

00:14:08.630 --> 00:14:12.380
and deeply integrate with
Google for enhanced discovery

00:14:12.380 --> 00:14:13.840
across multiple Google surfaces.

00:14:16.910 --> 00:14:19.880
So Google is defining a
rich catalog of intents

00:14:19.880 --> 00:14:22.130
with schemas and grammars.

00:14:22.130 --> 00:14:24.350
As a developer, you
sign up by providing us

00:14:24.350 --> 00:14:27.190
an Actions.xml file, where
you can register for intents

00:14:27.190 --> 00:14:29.480
that your app supports.

00:14:29.480 --> 00:14:33.800
You also tell us how to fulfill
those intents via deep-links.

00:14:33.800 --> 00:14:36.860
And once you have done that,
you get instant inquiries

00:14:36.860 --> 00:14:39.400
and reach and engagement across
multiple Google and Android

00:14:39.400 --> 00:14:41.380
surfaces.

00:14:41.380 --> 00:14:43.250
Ilya, can you walk us
through some of this

00:14:43.250 --> 00:14:44.810
and show us how this is working?

00:14:44.810 --> 00:14:46.310
ILYA FIRMAN: Thank
you so much, Luv.

00:14:51.100 --> 00:14:53.250
I hope you guys are
as excited as we

00:14:53.250 --> 00:14:56.130
are about the opportunities
offered by App Actions.

00:14:56.130 --> 00:14:58.440
You must be wondering,
how do I sign up?

00:14:58.440 --> 00:15:00.930
Let me walk you step by step
through the process of setting

00:15:00.930 --> 00:15:02.130
up Actions for your app.

00:15:04.690 --> 00:15:07.690
At the core of App
Actions is Actions.xml,

00:15:07.690 --> 00:15:09.490
a new configuration
file that you can

00:15:09.490 --> 00:15:12.010
include in your Android APK.

00:15:12.010 --> 00:15:15.040
Actions.xml enables you
to register for intents

00:15:15.040 --> 00:15:17.916
and to define fulfillment
for those intents.

00:15:17.916 --> 00:15:20.290
Now, when we talk about intents
in the context of Actions

00:15:20.290 --> 00:15:23.680
on Google, we're talking
about semantic intents.

00:15:23.680 --> 00:15:26.290
These are defined by the
Actions on Google platform.

00:15:26.290 --> 00:15:29.950
These intents describe what
your Action does in a language

00:15:29.950 --> 00:15:32.320
that Google can understand.

00:15:32.320 --> 00:15:35.440
Intents can be built in,
coming from the rich catalog

00:15:35.440 --> 00:15:37.360
of intents that Luv
mentioned earlier,

00:15:37.360 --> 00:15:41.140
or custom intents that are
defined by the developer.

00:15:41.140 --> 00:15:44.200
And while intents describe
what an Action does,

00:15:44.200 --> 00:15:47.890
fulfillment describes how
your app does that Action.

00:15:47.890 --> 00:15:52.060
For Android apps, fulfillment
connects the semantic intent

00:15:52.060 --> 00:15:55.000
to the Android
intent in the app.

00:15:55.000 --> 00:15:58.870
Together, intents and
fulfillment define Actions.

00:15:58.870 --> 00:16:00.820
And Actions.xml
is how you provide

00:16:00.820 --> 00:16:04.300
Actions in your Android app.

00:16:04.300 --> 00:16:06.670
Once you've defined your
intents and your fulfillment,

00:16:06.670 --> 00:16:09.040
you can help us personalize
Action suggestions

00:16:09.040 --> 00:16:12.310
by integrating usage logging
into your app using APIs

00:16:12.310 --> 00:16:14.890
from Firebase App Indexing.

00:16:14.890 --> 00:16:17.180
You can also extend your
reach beyond Android

00:16:17.180 --> 00:16:18.879
by building
conversational Actions.

00:16:18.879 --> 00:16:20.920
And you can enhance the
way Actions are presented

00:16:20.920 --> 00:16:25.270
to the user using Slices, a
new UI framework for surfacing

00:16:25.270 --> 00:16:28.300
deep in-app content.

00:16:28.300 --> 00:16:30.160
This is just a quick
high-level overview

00:16:30.160 --> 00:16:32.110
of the App Actions
set up process.

00:16:32.110 --> 00:16:35.244
Let us now walk through
each step in detail,

00:16:35.244 --> 00:16:36.160
starting with intents.

00:16:39.770 --> 00:16:41.890
As Luv mentioned
earlier, App Actions

00:16:41.890 --> 00:16:44.656
is built up on a new
catalog of semantic intents

00:16:44.656 --> 00:16:46.780
that are published by Google
as part of the Actions

00:16:46.780 --> 00:16:48.610
on Google platform.

00:16:48.610 --> 00:16:50.920
For each intent,
we define a grammar

00:16:50.920 --> 00:16:54.610
that helps us recognize user
queries and parameters that we

00:16:54.610 --> 00:16:58.270
can infer from the query
and pass into your app.

00:16:58.270 --> 00:17:01.480
The intent catalog helps us
organize the world of Actions

00:17:01.480 --> 00:17:04.240
so we can show the right
Actions to the right user

00:17:04.240 --> 00:17:06.099
at the right time.

00:17:06.099 --> 00:17:08.470
We expect that most developers
will register for one

00:17:08.470 --> 00:17:10.720
of our built-in intents.

00:17:10.720 --> 00:17:13.450
With built-in intents, you give
Google a deep understanding

00:17:13.450 --> 00:17:15.940
of what your app does.

00:17:15.940 --> 00:17:17.560
Moreover, with
built-in intents, you

00:17:17.560 --> 00:17:20.650
don't need to worry about
natural language understanding.

00:17:20.650 --> 00:17:23.349
I imagine, after I/O, you might
want to ask your Assistant

00:17:23.349 --> 00:17:27.790
to get a ride to SFO or book a
taxi to San Francisco airport

00:17:27.790 --> 00:17:30.820
or to order a cab to the
San Francisco airport.

00:17:30.820 --> 00:17:32.470
With built-in intents,
you don't need

00:17:32.470 --> 00:17:35.110
to worry about all the different
ways in which a user can

00:17:35.110 --> 00:17:37.090
express the same intent.

00:17:37.090 --> 00:17:40.060
Google takes care of natural
language understanding.

00:17:40.060 --> 00:17:43.690
Your app just needs to
provide fulfillment.

00:17:43.690 --> 00:17:45.070
Built-in intents
give you support

00:17:45.070 --> 00:17:47.620
from many languages
right out of the box,

00:17:47.620 --> 00:17:51.070
and they provide a one-stop
shop for getting access

00:17:51.070 --> 00:17:54.290
to multiple UI surfaces.

00:17:54.290 --> 00:17:56.060
We will be adding
more and more intents

00:17:56.060 --> 00:17:57.840
into the catalog over time.

00:17:57.840 --> 00:17:59.900
So if your particular
use case is not covered,

00:17:59.900 --> 00:18:02.114
chances are it will be soon.

00:18:02.114 --> 00:18:03.530
And you will have
a way to request

00:18:03.530 --> 00:18:05.640
new intents to be defined.

00:18:05.640 --> 00:18:08.030
And if your use case
is truly unique,

00:18:08.030 --> 00:18:10.760
you can define a custom intent
and build your own grammar

00:18:10.760 --> 00:18:12.960
using Actions Console,
the equivalent

00:18:12.960 --> 00:18:16.010
of Play Console for Actions
on Google developers.

00:18:18.590 --> 00:18:21.500
It is important to distinguish
between semantic intents that

00:18:21.500 --> 00:18:24.920
are defined by Actions on Google
and Android intents, a feature

00:18:24.920 --> 00:18:27.717
in the Android framework.

00:18:27.717 --> 00:18:29.300
As Android developers,
you're probably

00:18:29.300 --> 00:18:31.130
familiar with Android intents.

00:18:31.130 --> 00:18:33.050
They describe specific
Android operations

00:18:33.050 --> 00:18:36.620
in a way that allows Android
apps to talk to each other.

00:18:36.620 --> 00:18:38.560
Semantic intents,
on the other hand,

00:18:38.560 --> 00:18:41.960
are part of our larger catalog
that extends beyond Android

00:18:41.960 --> 00:18:43.580
and includes their
system, Google

00:18:43.580 --> 00:18:46.250
Search, and other surfaces.

00:18:46.250 --> 00:18:49.580
For Android apps,
Actions.xml is what

00:18:49.580 --> 00:18:51.830
defines the mapping
between semantic intents

00:18:51.830 --> 00:18:54.777
and specific Android
intents in your app.

00:18:54.777 --> 00:18:56.360
Of course, you can
build multiple ways

00:18:56.360 --> 00:18:59.390
to fulfill the same semantic
intent across different types

00:18:59.390 --> 00:19:00.830
of devices.

00:19:00.830 --> 00:19:02.810
For example, let's
say you're a bank,

00:19:02.810 --> 00:19:06.170
and you want to support the
"check account balance" intent.

00:19:06.170 --> 00:19:08.090
On Android, your
mobile banking app

00:19:08.090 --> 00:19:11.012
is a great way to
support that intent.

00:19:11.012 --> 00:19:13.220
But separately, you can
build a conversational Action

00:19:13.220 --> 00:19:15.650
so you can support a
voice-only experience

00:19:15.650 --> 00:19:18.980
on Google Home or smart displays
using the tools that you've

00:19:18.980 --> 00:19:21.592
seen earlier in the
Actions on Google talk.

00:19:21.592 --> 00:19:23.300
And if you'd like to
learn more about how

00:19:23.300 --> 00:19:25.400
to transition from building
for your Android app

00:19:25.400 --> 00:19:27.830
to building conversational
experiences,

00:19:27.830 --> 00:19:30.650
you can come to a session
dedicated to that on Thursday

00:19:30.650 --> 00:19:31.730
morning.

00:19:31.730 --> 00:19:33.230
Today, we will
focus specifically

00:19:33.230 --> 00:19:38.910
on integrating your Android apps
into the App Actions ecosystem.

00:19:38.910 --> 00:19:40.980
Now, if you're an
Android developer,

00:19:40.980 --> 00:19:44.040
you've probably already
familiar with intent filters,

00:19:44.040 --> 00:19:45.690
a native mechanism
in the Android

00:19:45.690 --> 00:19:48.700
to expose intents
outside of the app.

00:19:48.700 --> 00:19:52.020
Intent filters define
content types and data URIs

00:19:52.020 --> 00:19:53.580
that your app can accept.

00:19:53.580 --> 00:19:55.770
And those data URIs
can come in the form

00:19:55.770 --> 00:19:59.130
of HTTP URLs, or perhaps
URLs in your own custom

00:19:59.130 --> 00:20:01.560
app-specific scheme.

00:20:01.560 --> 00:20:05.160
Actions.xml defines how a
semantic intent inferred

00:20:05.160 --> 00:20:07.710
from a user's query
or the user's context

00:20:07.710 --> 00:20:12.550
can be converted into a
URL to open in your app.

00:20:12.550 --> 00:20:14.400
Android's intent
filter logic then

00:20:14.400 --> 00:20:17.160
converts that URL into a
specific Android intent

00:20:17.160 --> 00:20:20.210
to launch in your app.

00:20:20.210 --> 00:20:23.260
Now, why do we use URLs to
connect semantic intents

00:20:23.260 --> 00:20:26.190
and Android intents?

00:20:26.190 --> 00:20:30.640
Deep-link URLs are part of a
larger app discovery ecosystem.

00:20:30.640 --> 00:20:33.430
You can link your
app URLs to your web

00:20:33.430 --> 00:20:38.300
content using verified
app links or site maps.

00:20:38.300 --> 00:20:40.250
With Google's structured
data programs,

00:20:40.250 --> 00:20:42.560
you can precisely define
the specific content

00:20:42.560 --> 00:20:45.610
that your app can support.

00:20:45.610 --> 00:20:47.230
And with Firebase
App Indexing, you

00:20:47.230 --> 00:20:50.440
can enable Google to
personalize Action suggestions

00:20:50.440 --> 00:20:54.340
by identifying what users
do when they use your app.

00:20:54.340 --> 00:20:56.590
All of these different
features and programs

00:20:56.590 --> 00:20:59.040
use URLs to identify
content in your app.

00:21:01.870 --> 00:21:03.550
So we've talked about intents.

00:21:03.550 --> 00:21:06.190
Now, let's switch gears
and talk about fulfillment.

00:21:06.190 --> 00:21:08.800
Fulfillment describes
a specific mechanism

00:21:08.800 --> 00:21:11.680
to invoke a particular
Action in your app.

00:21:11.680 --> 00:21:13.330
Fulfillment is what
tells Google how

00:21:13.330 --> 00:21:16.150
to determine the specific
deep-link URL to open

00:21:16.150 --> 00:21:19.320
for a given semantic intent.

00:21:19.320 --> 00:21:22.290
With Actions.xml, you
can use one of two models

00:21:22.290 --> 00:21:25.320
to provide fulfillment
for a semantic intent.

00:21:25.320 --> 00:21:27.360
In the URL template
model, we use

00:21:27.360 --> 00:21:29.130
the parameters of
the semantic intent

00:21:29.130 --> 00:21:32.880
to dynamically construct a
fulfillment URL at runtime.

00:21:32.880 --> 00:21:35.520
Actions.xml provides
a URL template

00:21:35.520 --> 00:21:39.090
with placeholders for
specific parameters.

00:21:39.090 --> 00:21:42.390
At runtime, we then take those
parameters from the user intent

00:21:42.390 --> 00:21:45.450
and pass them into your URL.

00:21:45.450 --> 00:21:48.270
This model is ideal
for Action-centric apps

00:21:48.270 --> 00:21:49.125
with deep-link APIs.

00:21:51.670 --> 00:21:54.540
In the content-driven model,
we discover the fulfillment URL

00:21:54.540 --> 00:21:58.380
through your web content
or your structured data.

00:21:58.380 --> 00:22:01.270
We use the user's query to
find the relevant content

00:22:01.270 --> 00:22:03.480
in your web
presence, and then we

00:22:03.480 --> 00:22:06.360
use Actions.xml to connect
the URL of that content

00:22:06.360 --> 00:22:08.317
with appropriate intent.

00:22:08.317 --> 00:22:10.650
Of course, you must verify
ownership of your web content

00:22:10.650 --> 00:22:12.790
before you can use
it in your app.

00:22:12.790 --> 00:22:15.399
You can use Android's
verified app links

00:22:15.399 --> 00:22:17.940
or connect your app with your
website using the Google Search

00:22:17.940 --> 00:22:18.439
Console.

00:22:21.510 --> 00:22:23.910
All that's really needed for
content-driven fulfillment

00:22:23.910 --> 00:22:27.310
is linking your Actions.xml
to your web pages.

00:22:27.310 --> 00:22:29.280
But the content-driven
fulfillment model

00:22:29.280 --> 00:22:31.950
works best with structured data.

00:22:31.950 --> 00:22:34.050
While semantic intents
describe the verbs

00:22:34.050 --> 00:22:36.840
that your app supports,
structured data

00:22:36.840 --> 00:22:41.100
can describe the nouns,
the inventory of your app.

00:22:41.100 --> 00:22:44.160
Google provides a variety
of structured data programs.

00:22:44.160 --> 00:22:45.780
Some of them use web markup.

00:22:45.780 --> 00:22:48.390
Some of them use
hosted data feeds.

00:22:48.390 --> 00:22:51.510
Many of you probably already
participate in these programs.

00:22:51.510 --> 00:22:53.790
You can use our structured
data developer site

00:22:53.790 --> 00:22:55.620
to see if there is a
vertical program that

00:22:55.620 --> 00:22:58.170
fits your specific use
case, and you can also

00:22:58.170 --> 00:23:03.160
find a link to the tool that
you can use to test your markup.

00:23:03.160 --> 00:23:07.106
So how do you actually submit
your Actions.xml to Google?

00:23:07.106 --> 00:23:09.480
Perhaps you're developing your
app in the Android studio,

00:23:09.480 --> 00:23:12.780
and you can include your
Actions.xml in the same Android

00:23:12.780 --> 00:23:16.950
project, in the same APK that
you submit to the Play Console.

00:23:16.950 --> 00:23:19.840
Play Console parses
your Actions.xml

00:23:19.840 --> 00:23:24.090
and registers your Actions in
the Actions on Google database.

00:23:24.090 --> 00:23:27.420
This registration allows your
app to respond to queries

00:23:27.420 --> 00:23:29.715
and appear in suggestions
in various Google products.

00:23:32.300 --> 00:23:34.610
And how can you test that
your Actions work before you

00:23:34.610 --> 00:23:37.550
submit your app to Play?

00:23:37.550 --> 00:23:39.940
You can use our new plug-in
for the Android Studio,

00:23:39.940 --> 00:23:42.470
called the App
Actions Text Tool.

00:23:42.470 --> 00:23:45.500
With this tool, you can
validate your Actions.xml

00:23:45.500 --> 00:23:47.300
and submit it to
Actions on Google

00:23:47.300 --> 00:23:49.100
in the special
preview mode, which

00:23:49.100 --> 00:23:51.950
makes your Actions available
just for your own developer

00:23:51.950 --> 00:23:53.990
account.

00:23:53.990 --> 00:23:56.990
You can then test how Google
Assistant would invoke your app

00:23:56.990 --> 00:24:02.022
with different combinations
of semantic intent parameters.

00:24:05.190 --> 00:24:06.410
But enough talk.

00:24:06.410 --> 00:24:09.130
Let's take a look at some demos.

00:24:09.130 --> 00:24:11.170
In this first example,
I will show you

00:24:11.170 --> 00:24:15.300
how the URL template-based
fulfillment model works.

00:24:15.300 --> 00:24:17.070
I will show you my
favorite taxi app

00:24:17.070 --> 00:24:19.690
that I built a couple of weeks
ago for this session integrates

00:24:19.690 --> 00:24:21.440
with the ORDER_RIDE
built-in intent.

00:24:21.440 --> 00:24:25.110
Can we switch to slides
for just one moment?

00:24:25.110 --> 00:24:27.718
Switch to slides?

00:24:27.718 --> 00:24:31.030
Thank you.

00:24:31.030 --> 00:24:33.360
The ORDER_RIDE intent
comes with four parameters

00:24:33.360 --> 00:24:36.120
for pickup location, drop
off location, pickup time,

00:24:36.120 --> 00:24:37.470
and drop off time.

00:24:37.470 --> 00:24:41.910
Each of these parameters is
defined as a schema.org entity.

00:24:41.910 --> 00:24:43.470
And you can see on
the slide how we

00:24:43.470 --> 00:24:48.420
parse the parameters of that
entity from a user invocation.

00:24:48.420 --> 00:24:49.920
And now, let's
switch to the laptop.

00:24:53.460 --> 00:24:56.340
So what you can see on your
screen is Android Studio.

00:24:56.340 --> 00:25:01.590
And in my Android project, I
have my Actions.xml file open.

00:25:01.590 --> 00:25:04.020
You can see here that
I'm registered in my taxi

00:25:04.020 --> 00:25:07.360
app for the ORDER_RIDE intent.

00:25:07.360 --> 00:25:10.930
And I'm providing
a URL template.

00:25:10.930 --> 00:25:13.170
In this case, it happens
to be an HTTP URL,

00:25:13.170 --> 00:25:16.980
but you can also use
app-specific URLs or intent

00:25:16.980 --> 00:25:18.372
URIs.

00:25:18.372 --> 00:25:20.370
And in this case,
there are placeholders

00:25:20.370 --> 00:25:23.790
in the URL template for two
parameters-- for the drop

00:25:23.790 --> 00:25:25.890
off and pickup address.

00:25:25.890 --> 00:25:28.590
These parameters are then
mapped to the parameters

00:25:28.590 --> 00:25:29.460
of the intent.

00:25:29.460 --> 00:25:32.880
The placeholders are mapped to
the parameters of the intent.

00:25:32.880 --> 00:25:35.090
Now, let's bring up the
App Actions Test Tool.

00:25:41.230 --> 00:25:43.640
When I click the
Load Actions button,

00:25:43.640 --> 00:25:45.820
the tool will validate
my Actions.xml,

00:25:45.820 --> 00:25:47.980
parse it, and
submit it to Actions

00:25:47.980 --> 00:25:50.650
on Google in preview mode.

00:25:50.650 --> 00:25:54.280
So I can test what
would happen if I passed

00:25:54.280 --> 00:25:55.676
that particular parameter.

00:25:59.410 --> 00:26:01.133
When I click Run--

00:26:01.133 --> 00:26:01.633
oops.

00:26:08.985 --> 00:26:10.360
For some reason,
my phone decided

00:26:10.360 --> 00:26:12.790
to switch in landscape mode.

00:26:12.790 --> 00:26:16.790
But OK, I think
I made the point.

00:26:16.790 --> 00:26:20.420
The tool passes a
parameter to the app.

00:26:20.420 --> 00:26:21.920
And the way this
happens is the tool

00:26:21.920 --> 00:26:23.461
simulates what Google
Assistant would

00:26:23.461 --> 00:26:25.970
do if it received the
particular semantic intent

00:26:25.970 --> 00:26:27.487
with particular parameters.

00:26:30.110 --> 00:26:33.820
More specifically, the tool
constructs an Action link.

00:26:33.820 --> 00:26:36.140
And you might have seen
Action links earlier today

00:26:36.140 --> 00:26:38.930
in the Actions on Google talk.

00:26:38.930 --> 00:26:40.880
This is a deep-link
to a specific semantic

00:26:40.880 --> 00:26:42.412
intent in the Assistant.

00:26:46.027 --> 00:26:47.360
Let's switch the slides, please.

00:26:54.150 --> 00:26:56.780
We've talked about the
template-based fulfillment

00:26:56.780 --> 00:26:57.357
model.

00:26:57.357 --> 00:26:58.940
Now, let's talk a
little bit about how

00:26:58.940 --> 00:27:01.160
the content-driven model works.

00:27:01.160 --> 00:27:03.950
We have worked with Coursera
to integrate their app

00:27:03.950 --> 00:27:06.879
with App Actions.

00:27:06.879 --> 00:27:08.920
Coursera is signing up
for the TAKE_COURSE intent

00:27:08.920 --> 00:27:10.770
from our catalog.

00:27:10.770 --> 00:27:13.780
This intent, today, takes
a single parameter of type

00:27:13.780 --> 00:27:15.700
schema.org/course.

00:27:15.700 --> 00:27:18.190
And you can see how we are
parsing properties of that

00:27:18.190 --> 00:27:22.390
schema.org/course from
a user invocation.

00:27:22.390 --> 00:27:24.710
Now, Coursera happens to
annotate all of their course

00:27:24.710 --> 00:27:27.912
web pages with structured data.

00:27:27.912 --> 00:27:29.620
And we can infer from
the structured data

00:27:29.620 --> 00:27:32.490
what the name of the course
is, what the course is about,

00:27:32.490 --> 00:27:35.420
and what the specific deep-link
URL for that course is.

00:27:35.420 --> 00:27:38.960
And since Coursera is
using verified app links,

00:27:38.960 --> 00:27:44.270
we can use the same URL to open
the Coursera app on the device.

00:27:44.270 --> 00:27:48.538
Let's switch to
the laptop, please.

00:27:48.538 --> 00:27:49.522
Thank you.

00:27:54.450 --> 00:27:59.650
Here is what Actions.xml
could look like for Coursera.

00:27:59.650 --> 00:28:02.610
Coursera is signing up for
the TAKE_COURSE intent.

00:28:02.610 --> 00:28:05.190
And for the course
parameter of that intent,

00:28:05.190 --> 00:28:08.160
there is an inventory reference,
an entity set reference,

00:28:08.160 --> 00:28:10.650
that ties this
indent registration

00:28:10.650 --> 00:28:16.122
to schema.org/course structures
located on these web pages.

00:28:16.122 --> 00:28:17.580
And the URL template,
in this case,

00:28:17.580 --> 00:28:20.520
just takes the URL discovered
from structured data

00:28:20.520 --> 00:28:23.340
as a referrer param.

00:28:23.340 --> 00:28:27.270
Again, we can bring up
the App Actions Test Tool,

00:28:27.270 --> 00:28:28.860
submit Actions in preview mode.

00:28:33.349 --> 00:28:35.140
And let's see what
would happen if I wanted

00:28:35.140 --> 00:28:36.520
to study machine learning.

00:28:46.340 --> 00:28:48.360
The Coursera app opens
to the specific deep-link

00:28:48.360 --> 00:28:49.693
for the machine learning course.

00:28:52.630 --> 00:28:54.540
And if demo gods smile
at us, perhaps we

00:28:54.540 --> 00:29:00.630
can also see what would
happen if I try to query,

00:29:00.630 --> 00:29:02.071
"what is deep learning?"

00:29:11.400 --> 00:29:15.840
So here, the system has given
us a knowledge answer explaining

00:29:15.840 --> 00:29:17.260
what deep learning is.

00:29:17.260 --> 00:29:19.080
But underneath
that answer, there

00:29:19.080 --> 00:29:23.805
is a suggestion to learn more by
taking a course with Coursera.

00:29:23.805 --> 00:29:25.180
And when I click
on that link, it

00:29:25.180 --> 00:29:31.030
opens a specific deep-link to
a course in the Coursera app.

00:29:31.030 --> 00:29:32.530
Let's switch back
to slides, please.

00:29:38.324 --> 00:29:40.240
So you've seen how you
can define your intents

00:29:40.240 --> 00:29:45.340
and fulfillment using the
Actions.xml configuration file.

00:29:45.340 --> 00:29:50.290
You can further help
people discover your apps

00:29:50.290 --> 00:29:52.570
by integrating usage
logging into your app using

00:29:52.570 --> 00:29:53.950
Firebase App Indexing APIs.

00:29:57.370 --> 00:29:59.400
Action logging through
as App Indexing

00:29:59.400 --> 00:30:01.320
helps Google provide
personalized suggestions

00:30:01.320 --> 00:30:04.600
based on the user's context
and the usage patterns.

00:30:04.600 --> 00:30:07.080
For example, if you often
listen to jazz music

00:30:07.080 --> 00:30:09.390
on your evening
commute, it may show you

00:30:09.390 --> 00:30:12.030
a suggestion to play
cool jazz radio when

00:30:12.030 --> 00:30:13.650
you get into the car.

00:30:13.650 --> 00:30:16.622
Or if we know that you keep
watching "Altered Carbon,"

00:30:16.622 --> 00:30:18.330
we may give you a
helpful suggestion when

00:30:18.330 --> 00:30:20.490
the next episode comes out.

00:30:20.490 --> 00:30:22.890
Action logging can help
your app rank better

00:30:22.890 --> 00:30:25.950
in these personalized
Action suggestions.

00:30:25.950 --> 00:30:27.660
This is not a new API.

00:30:27.660 --> 00:30:29.520
We have made changes
to the API specifically

00:30:29.520 --> 00:30:31.350
to support App Actions.

00:30:31.350 --> 00:30:33.120
You can now tie
each reported event

00:30:33.120 --> 00:30:36.960
to a specific semantic intent
and specific parameter values.

00:30:36.960 --> 00:30:39.090
Of course, users remain
in control of their data

00:30:39.090 --> 00:30:40.540
at all times.

00:30:40.540 --> 00:30:43.290
They can see and control
all of their logged activity

00:30:43.290 --> 00:30:46.260
using the My Activity
website, and they can opt out

00:30:46.260 --> 00:30:49.640
of Action logging altogether.

00:30:49.640 --> 00:30:51.144
I will now pass
the stage to Luv,

00:30:51.144 --> 00:30:53.060
who will talk to you
about how you can enhance

00:30:53.060 --> 00:30:58.422
your Actions by adding a rich UI
and conversational fulfillment.

00:30:58.422 --> 00:30:59.630
LUV KOTHARI: Thank you, Ilya.

00:30:59.630 --> 00:31:01.340
And thank you, demo gods.

00:31:01.340 --> 00:31:05.720
This was amazing to see this
happening in front of us,

00:31:05.720 --> 00:31:08.210
and it was incredible.

00:31:08.210 --> 00:31:10.729
I want to give a big shout
out to multiple teams,

00:31:10.729 --> 00:31:12.770
multiple product teams,
that have worked together

00:31:12.770 --> 00:31:14.810
on this feature.

00:31:14.810 --> 00:31:16.340
I mean, if you imagine, right?

00:31:16.340 --> 00:31:18.740
You have Android as a
developer ecosystem,

00:31:18.740 --> 00:31:20.450
and you've got
Actions on Google.

00:31:20.450 --> 00:31:22.050
It's never easy
when you try to make

00:31:22.050 --> 00:31:24.800
both of these ecosystems
work together as seamlessly

00:31:24.800 --> 00:31:27.740
as you have just seen here.

00:31:27.740 --> 00:31:31.770
To recap, as a developer, you
can participate in Actions

00:31:31.770 --> 00:31:34.890
by registering your
app and the Actions

00:31:34.890 --> 00:31:38.110
in your app in the
Actions.xml file.

00:31:38.110 --> 00:31:40.750
You can provide
fulfillment with URLs,

00:31:40.750 --> 00:31:43.770
either a URL template
or as structured data.

00:31:43.770 --> 00:31:46.890
You can report Action usage
using Firebase App Indexing

00:31:46.890 --> 00:31:50.080
to help your app rank better.

00:31:50.080 --> 00:31:52.830
However, App Actions
as we think of it

00:31:52.830 --> 00:31:56.334
is just the first step in
your journey with Actions.

00:31:56.334 --> 00:31:57.750
There are more
ways with which you

00:31:57.750 --> 00:32:02.430
can enhance Actions and further
increase engagement with users.

00:32:02.430 --> 00:32:07.110
First, you can use Slices to
enhance Action representation

00:32:07.110 --> 00:32:09.090
through rich UI templates.

00:32:09.090 --> 00:32:12.120
And second, you can build
conversational experiences

00:32:12.120 --> 00:32:15.372
and multimodality experiences
for Google Assistant.

00:32:15.372 --> 00:32:17.680
Let's take a quick look.

00:32:17.680 --> 00:32:21.450
Slices enhance Action
presentation through templates.

00:32:21.450 --> 00:32:23.250
These templates are
designed to appear

00:32:23.250 --> 00:32:25.590
outside the app
in Android system

00:32:25.590 --> 00:32:31.230
UI, like notifications, or
in other Google platforms,

00:32:31.230 --> 00:32:33.780
like Assistant and Search.

00:32:33.780 --> 00:32:38.270
These templates support flexible
layouts, interactive controls,

00:32:38.270 --> 00:32:42.180
like sliders and toggles,
and dynamic data,

00:32:42.180 --> 00:32:44.610
like real-time pricing
served directly

00:32:44.610 --> 00:32:48.380
from the app on
the user's phone.

00:32:48.380 --> 00:32:53.570
Slices are compatible with
devices on API 19 or above.

00:32:53.570 --> 00:32:57.380
Essentially, it enables
you to get to about 95%

00:32:57.380 --> 00:32:59.120
of Android devices
that are out there.

00:32:59.120 --> 00:33:01.050
Pretty cool.

00:33:01.050 --> 00:33:05.137
This year's Slices are launched
on Google Search on Android.

00:33:05.137 --> 00:33:07.220
If you want to learn more,
we have a whole session

00:33:07.220 --> 00:33:08.650
dedicated to Slices.

00:33:08.650 --> 00:33:11.330
It's tomorrow at
8:30 on stage 4.

00:33:11.330 --> 00:33:15.040
Hope to see you there.

00:33:15.040 --> 00:33:17.920
But what about all these new
devices and platforms that

00:33:17.920 --> 00:33:19.990
are coming into
market, things that you

00:33:19.990 --> 00:33:24.490
heard from Brad in developer
keynote this afternoon?

00:33:24.490 --> 00:33:26.650
You can extend your
services to new devices

00:33:26.650 --> 00:33:30.040
and form factors by building
conversational Actions

00:33:30.040 --> 00:33:33.870
and multimodality experiences
for Google Assistant.

00:33:33.870 --> 00:33:36.900
Again, to learn more, please
attend our technical session

00:33:36.900 --> 00:33:41.040
on Thursday morning
at 10:30 on stage 4.

00:33:41.040 --> 00:33:42.000
Actually, it's 9:30.

00:33:42.000 --> 00:33:42.570
My bad.

00:33:45.300 --> 00:33:50.160
So hope you are as excited
about this project as we are.

00:33:50.160 --> 00:33:51.870
Many Android
developers are already

00:33:51.870 --> 00:33:56.460
building support for Actions,
and hope you will, as well.

00:33:56.460 --> 00:34:00.360
If you're interested, please
let us know at g.co/AppActions.

00:34:00.360 --> 00:34:02.670
You can learn more about
the project on that page.

00:34:02.670 --> 00:34:05.160
Sign up for further
updates, newsletters.

00:34:05.160 --> 00:34:07.740
We'll be starting an early
access program next month.

00:34:07.740 --> 00:34:10.510
Hopefully, some of you
will sign up for that.

00:34:10.510 --> 00:34:13.020
We'd love to hear your
feedback and very specifically

00:34:13.020 --> 00:34:15.090
on built-in intents,
the catalog that we're

00:34:15.090 --> 00:34:16.080
building for intents.

00:34:18.605 --> 00:34:20.730
Over the next two days,
you have quite a few venues

00:34:20.730 --> 00:34:23.110
to answer any burning
questions that you have.

00:34:23.110 --> 00:34:24.949
We have presence
in Office Hours.

00:34:24.949 --> 00:34:27.429
We have presence in both
sandboxes in Android,

00:34:27.429 --> 00:34:29.139
as well as Assistant,
where we can

00:34:29.139 --> 00:34:32.260
show you more of these things
live and answer any questions

00:34:32.260 --> 00:34:34.006
that you have.

00:34:34.006 --> 00:34:35.380
Again, we have
two more sessions,

00:34:35.380 --> 00:34:37.230
one on Slices tomorrow
morning and one

00:34:37.230 --> 00:34:39.850
on conversational Actions
on Assistant the day

00:34:39.850 --> 00:34:41.100
after tomorrow.

00:34:41.100 --> 00:34:43.600
And fairly soon, you'll be
able to upload the Actions.xml

00:34:43.600 --> 00:34:50.300
file on your app using
Play Developer Console.

00:34:50.300 --> 00:34:50.800
Thank you.

00:34:50.800 --> 00:34:52.209
Love to hear from you.

00:34:52.209 --> 00:34:57.980
If you have any feedback,
give it to us on this website.

00:34:57.980 --> 00:34:59.088
Thank you so much.

00:34:59.088 --> 00:35:03.684
[MUSIC PLAYING]

