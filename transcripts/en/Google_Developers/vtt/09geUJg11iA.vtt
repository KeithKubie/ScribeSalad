WEBVTT
Kind: captions
Language: en

00:00:04.392 --> 00:00:08.296
[MUSIC PLAYING]

00:00:08.296 --> 00:00:10.540
BILL LUAN: Shanghai
GDG is a very

00:00:10.540 --> 00:00:12.330
interesting developer community.

00:00:12.330 --> 00:00:13.460
SUSANNAH RAUB: I'm
glad somebody

00:00:13.460 --> 00:00:14.350
has asked this question.

00:00:14.350 --> 00:00:15.460
RETO MEIER: This is where
the magic happens.

00:00:15.460 --> 00:00:17.446
JENNY MURPHY: This is primarily
a question and

00:00:17.446 --> 00:00:19.020
answer show, so if any
of you out there

00:00:19.020 --> 00:00:20.270
would like to ask questions.

00:00:26.040 --> 00:00:27.930
ALI: Hi, everyone.

00:00:27.930 --> 00:00:31.130
I'm Ali, working for the Google
Drive team, and today

00:00:31.130 --> 00:00:35.160
we're going to show you how to
write a complete JavaScript

00:00:35.160 --> 00:00:38.860
browser-based Google Drive
app, hopefully

00:00:38.860 --> 00:00:39.980
in under five minutes.

00:00:39.980 --> 00:00:42.400
It's going to take a bit of copy
and paste, but I'm going

00:00:42.400 --> 00:00:44.850
to take you through each of
the individual steps.

00:00:44.850 --> 00:00:47.290
Now the first thing I
want to show you is

00:00:47.290 --> 00:00:48.510
our QuickStart page.

00:00:48.510 --> 00:00:51.940
Now, we have a QuickStart page
for how to get up and running

00:00:51.940 --> 00:00:55.930
quickly in one of Java,
Python, PHP.Net, Ruby,

00:00:55.930 --> 00:00:57.720
JavaScript, and Go.

00:00:57.720 --> 00:00:58.880
So today we're going
to be going through

00:00:58.880 --> 00:01:00.720
the JavaScript one.

00:01:00.720 --> 00:01:05.690
So that's developers.googl
e.com/drive/quickstart.

00:01:05.690 --> 00:01:09.030
So the first step in writing
any application is to go to

00:01:09.030 --> 00:01:14.890
the Google API's console and
create an API project.

00:01:14.890 --> 00:01:17.670
So I'm just going to click on
Create Project, and it's going

00:01:17.670 --> 00:01:19.840
to do most of the
magic for me.

00:01:19.840 --> 00:01:22.560
So as you can see, it's created
a project for me, and

00:01:22.560 --> 00:01:27.070
I have to choose which Google
services it's going to use.

00:01:27.070 --> 00:01:30.400
So I scroll down here and I
see Drive API, and I just

00:01:30.400 --> 00:01:31.330
switch that on.

00:01:31.330 --> 00:01:34.140
So you see this selector has
gone to on, and now I can

00:01:34.140 --> 00:01:36.780
start using the Drive API.

00:01:36.780 --> 00:01:40.510
So what I have to do is
create a client ID.

00:01:40.510 --> 00:01:43.710
Create a client that is
suitable for use as a

00:01:43.710 --> 00:01:45.730
browser-based client.

00:01:45.730 --> 00:01:49.055
So you see it's already created
a simple API access

00:01:49.055 --> 00:01:49.730
one for me.

00:01:49.730 --> 00:01:52.980
But this big blue button, Create
An OAuth 2.0 Client, we

00:01:52.980 --> 00:01:56.500
click on that and I
give it a name--

00:01:56.500 --> 00:01:57.805
JS Quick Start.

00:02:01.590 --> 00:02:04.300
And as you can see, it's
a web application.

00:02:04.300 --> 00:02:08.190
Now one thing I have to really
make sure I do correctly here

00:02:08.190 --> 00:02:10.060
is set up an origin.

00:02:10.060 --> 00:02:13.130
Because I'm going to be testing
this on localhost and

00:02:13.130 --> 00:02:14.930
it will be on Port 8000.

00:02:14.930 --> 00:02:17.890
So I just need to set that up
so that it knows, when it's

00:02:17.890 --> 00:02:20.210
running JavaScript code, that
it's running in the correct

00:02:20.210 --> 00:02:22.690
container, and that's
just a check.

00:02:22.690 --> 00:02:25.060
So I create that client ID.

00:02:25.060 --> 00:02:26.940
And I'll leave that there
because, as you see, we're

00:02:26.940 --> 00:02:30.810
going to come back to this when
we need the client ID

00:02:30.810 --> 00:02:32.380
that's there.

00:02:32.380 --> 00:02:36.300
As you can see, the JavaScript
Origin HTTPS localhost 8000 is

00:02:36.300 --> 00:02:37.750
what I've set up there.

00:02:37.750 --> 00:02:39.420
So now on to the code.

00:02:39.420 --> 00:02:42.730
Now, our QuickStart page has
copy, pastable code that you

00:02:42.730 --> 00:02:45.240
should be able to just copy,
paste and run, so that's

00:02:45.240 --> 00:02:46.590
exactly what I'm going to do.

00:02:46.590 --> 00:02:48.690
Obviously it would take you
more than five minutes to

00:02:48.690 --> 00:02:49.620
write all this code.

00:02:49.620 --> 00:02:52.990
But the idea is that once you've
got it running, you

00:02:52.990 --> 00:02:55.200
really then can modify
it however you like.

00:02:55.200 --> 00:02:58.090
So I'm going to take a copy of
that, and I'm going to put it

00:02:58.090 --> 00:03:00.075
in my directory in a file
called index.html.

00:03:08.260 --> 00:03:12.840
Start in Editor, paste my code
in, and there it is.

00:03:12.840 --> 00:03:16.300
It's all collapsed, but as you
can see it's in JavaScript

00:03:16.300 --> 00:03:17.770
embedded in some HTML.

00:03:17.770 --> 00:03:20.130
Obviously, as you get more
detailed in your application

00:03:20.130 --> 00:03:21.830
you might want to take
that out into

00:03:21.830 --> 00:03:23.360
separate JavaScript files.

00:03:23.360 --> 00:03:26.520
Now the one part I need to
change is here where

00:03:26.520 --> 00:03:27.950
it says client ID.

00:03:27.950 --> 00:03:31.020
And that's the client ID
that I just created

00:03:31.020 --> 00:03:35.260
here in the API console.

00:03:35.260 --> 00:03:39.210
So I'll copy that in,
and there it is.

00:03:39.210 --> 00:03:42.000
Now, those of you who have used
OAuth before, you might

00:03:42.000 --> 00:03:44.820
be wondering why do I not
use a client secret?

00:03:44.820 --> 00:03:47.080
Well, client secrets are
not really secret if

00:03:47.080 --> 00:03:47.860
they're in a web page.

00:03:47.860 --> 00:03:50.600
Obviously anyone can examine the
source, so for that reason

00:03:50.600 --> 00:03:52.250
there's no point in having it.

00:03:52.250 --> 00:03:56.370
So the web-based protocol only
requires a client ID.

00:03:56.370 --> 00:04:01.380
So once I've done that, I save
it and I'm back to my shell.

00:04:01.380 --> 00:04:05.170
Now here where I need to run a
local web server just to get

00:04:05.170 --> 00:04:09.520
it up and running, I use Python
SimpleHTTPServer.

00:04:09.520 --> 00:04:12.640
Now, you can run Python with
the minus M flag, and that

00:04:12.640 --> 00:04:17.250
just starts the server, in
this case, on Port 8000.

00:04:17.250 --> 00:04:20.930
So once I've got that there,
then I can browse localhost

00:04:20.930 --> 00:04:23.260
8000 and see what happens.

00:04:23.260 --> 00:04:24.880
Now this is a very simple
application.

00:04:24.880 --> 00:04:27.280
All it does is upload
a single file.

00:04:27.280 --> 00:04:31.530
But first thing I get is a
pop-up to request permission.

00:04:31.530 --> 00:04:35.110
Make sure that pop-ups are
allowed for your localhost,

00:04:35.110 --> 00:04:36.820
because that would
get blocked.

00:04:36.820 --> 00:04:39.740
The reason is this QuickStart,
the pop-up doesn't come in

00:04:39.740 --> 00:04:41.620
response to a button or
anything like that.

00:04:41.620 --> 00:04:43.600
So by default, Chrome and other

00:04:43.600 --> 00:04:45.080
browsers will block that.

00:04:45.080 --> 00:04:48.520
But when you're writing your
application, probably you'd

00:04:48.520 --> 00:04:51.500
put this behind a button,
click this to authorize.

00:04:51.500 --> 00:04:57.360
So I authorize there, and when
I refresh my page you see--

00:04:57.360 --> 00:04:59.980
and we'll open the
API console--

00:04:59.980 --> 00:05:01.650
you'll see I've got a
Choose File button.

00:05:01.650 --> 00:05:03.670
So this is the entire user
interface for this

00:05:03.670 --> 00:05:05.030
application.

00:05:05.030 --> 00:05:08.940
I select a file, as you
can see nicely here.

00:05:08.940 --> 00:05:11.250
I've got some images ready--
and that was

00:05:11.250 --> 00:05:13.980
an image of a dog.

00:05:13.980 --> 00:05:17.415
And the only feedback you get
currently is in console.log.

00:05:17.415 --> 00:05:20.120
And you can see that the entire
metadata for the file

00:05:20.120 --> 00:05:22.370
has been returned back here.

00:05:22.370 --> 00:05:25.970
So you may not be able to see
that, but for example, the

00:05:25.970 --> 00:05:28.090
bits I set--

00:05:28.090 --> 00:05:31.640
the title, the alternate
link, various

00:05:31.640 --> 00:05:32.760
information about that.

00:05:32.760 --> 00:05:34.210
The title is actually
the file name.

00:05:34.210 --> 00:05:36.520
And it will have done some other
cool things like MD5

00:05:36.520 --> 00:05:38.020
checks on it for you.

00:05:38.020 --> 00:05:42.120
It's correctly identified
the MIME type.

00:05:42.120 --> 00:05:46.290
So now if I look in my Google
Drive, I can see that that

00:05:46.290 --> 00:05:48.630
file has now magically
appeared--

00:05:48.630 --> 00:05:49.430
0.JPG.

00:05:49.430 --> 00:05:53.790
And I look at that, and it's
a beautiful picture of my

00:05:53.790 --> 00:05:56.730
neighbor's dog.

00:05:56.730 --> 00:05:57.540
And there you go.

00:05:57.540 --> 00:06:02.310
That is in entirety us having
written a Drive app.

00:06:02.310 --> 00:06:02.610
Should we try another one?

00:06:02.610 --> 00:06:05.200
Why not?

00:06:05.200 --> 00:06:07.640
We'll go for the same file, the
other images I've got are

00:06:07.640 --> 00:06:10.760
a bit big, but that
will upload.

00:06:16.750 --> 00:06:19.385
Maybe we should have called it a
day at writing a single one.

00:06:28.400 --> 00:06:30.350
So where do we want
to go from here?

00:06:30.350 --> 00:06:35.200
Well, unfortunately the
JavaScript integration is not

00:06:35.200 --> 00:06:36.730
exactly perfect.

00:06:36.730 --> 00:06:39.190
If you have a look through some
of that code, some of it

00:06:39.190 --> 00:06:40.060
is a bit nasty.

00:06:40.060 --> 00:06:43.690
And the reason for that is we
don't have full support for

00:06:43.690 --> 00:06:46.460
all the types of media outplay
that we do for the other

00:06:46.460 --> 00:06:47.570
client libraries.

00:06:47.570 --> 00:06:50.270
So for JavaScript's case, what
we're actually doing is

00:06:50.270 --> 00:06:53.120
manually creating a multi-part
request.

00:06:53.120 --> 00:06:55.890
And you can see the code there
on the screen, and please have

00:06:55.890 --> 00:06:56.610
a look at it.

00:06:56.610 --> 00:06:57.750
It's fairly nasty--

00:06:57.750 --> 00:07:00.236
you have to create the
multi-part yourself, you have

00:07:00.236 --> 00:07:04.890
to create the boundaries, you
have to encode into Base64 the

00:07:04.890 --> 00:07:05.950
various parts.

00:07:05.950 --> 00:07:09.540
And when that's done, it will
operate successfully.

00:07:09.540 --> 00:07:12.490
So what I suggest you do here
is just copy and paste that

00:07:12.490 --> 00:07:14.520
code, put it out
on a function.

00:07:14.520 --> 00:07:18.020
And pretend that it's not
happening like that until we

00:07:18.020 --> 00:07:20.890
get the complete different
types of upload.

00:07:20.890 --> 00:07:22.860
For example, resumable
upload working in

00:07:22.860 --> 00:07:26.330
JavaScript in the library.

00:07:26.330 --> 00:07:29.730
So that's JavaScript.

00:07:29.730 --> 00:07:32.150
Hopefully, I've shown you that
you can write a complete

00:07:32.150 --> 00:07:35.730
application for Google
Drive in the browser.

00:07:35.730 --> 00:07:37.470
Now we have no service
[? like ?] work.

00:07:37.470 --> 00:07:41.600
It was completely a StaticHTML
page, and I'm serving it using

00:07:41.600 --> 00:07:45.790
just a plain web server.

00:07:45.790 --> 00:07:47.280
Please go and check those out.

00:07:47.280 --> 00:07:49.170
This video will be part
of that guide.

00:07:49.170 --> 00:07:51.730
And if you're interested in
other languages, we have

00:07:51.730 --> 00:07:54.220
videos for all the other
languages there.

00:07:54.220 --> 00:07:57.370
But I really recommend you try
this JavaScript support.

00:07:57.370 --> 00:08:00.230
It's so strong to be able to
have this application that

00:08:00.230 --> 00:08:02.380
doesn't rely on any backend
framework, or

00:08:02.380 --> 00:08:03.500
anything like that.

00:08:03.500 --> 00:08:07.910
Anyone can run it, anyone can
add new functionality, so

00:08:07.910 --> 00:08:09.090
that's pretty cool.

00:08:09.090 --> 00:08:10.120
OK, thank you very much.

00:08:10.120 --> 00:08:10.930
I've been Ali.

00:08:10.930 --> 00:08:11.760
Enjoy yourselves.

00:08:11.760 --> 00:08:14.620
And good luck with your Google
Drive integrations.

00:08:14.620 --> 00:08:53.100
[MUSIC PLAYING]

