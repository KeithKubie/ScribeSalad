WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.627
♪ (intro music) ♪

00:00:08.563 --> 00:00:11.797
I want to talk to you about something
that's very important to me.

00:00:13.357 --> 00:00:17.777
And that's, how will civilization
power itself for the next 100 years?

00:00:18.589 --> 00:00:21.049
So, in 2100,

00:00:21.049 --> 00:00:24.766
the projected world's population
is 11.2 billion.

00:00:26.069 --> 00:00:28.595
If all 11.2 billion people

00:00:28.595 --> 00:00:32.446
want to enjoy the same
power usage that we do now,

00:00:32.446 --> 00:00:34.034
in the United States,

00:00:35.289 --> 00:00:40.865
that's going to require burning
around 0.2 yottajoules of energy

00:00:40.865 --> 00:00:42.434
over the next 100 years.

00:00:42.752 --> 00:00:45.808
So, that's a whole lot.
To put that into perspective--

00:00:46.870 --> 00:00:49.378
if we wanted to do that with oil alone,

00:00:49.378 --> 00:00:54.751
we'd have to ramp up oil production
by a factor of 10 for the next 100 years.

00:00:55.783 --> 00:00:57.458
So there's no way that's going to happen.

00:00:57.458 --> 00:00:59.465
So, besides being infeasible,

00:01:00.119 --> 00:01:03.026
that would contribute
to catastrophic climate change.

00:01:04.024 --> 00:01:06.658
If we want to keep climate change

00:01:06.658 --> 00:01:10.415
to a level that's not ideal,
but at least reasonable--

00:01:10.415 --> 00:01:13.673
say, under 2 degrees
of temperature increase--

00:01:14.155 --> 00:01:17.589
then only 8% of that 0.2 yottajoules

00:01:17.589 --> 00:01:21.938
can come from fossil fuels,
like coal or oil.

00:01:22.316 --> 00:01:24.713
So where does the other 92% come from?

00:01:27.333 --> 00:01:30.609
One possible source
would be nuclear fusion.

00:01:31.203 --> 00:01:34.583
Fusion involves pushing together

00:01:35.077 --> 00:01:36.874
two smaller nuclei,

00:01:36.874 --> 00:01:39.670
and what you get out
is a whole lot of energy,

00:01:40.228 --> 00:01:42.555
and no greenhouse gas.

00:01:43.360 --> 00:01:46.186
So, right now, the sun
runs on nuclear fusion.

00:01:46.985 --> 00:01:50.478
And the reaction is so energy-dense

00:01:51.141 --> 00:01:54.448
that the 0.2 yottajoules would require

00:01:54.448 --> 00:01:58.535
say, a trivial amount
of deuterium found in seawater.

00:01:58.858 --> 00:02:02.351
Or say, just seven months
of the world's current boron production--

00:02:02.351 --> 00:02:04.331
so a very trivial amount of boron.

00:02:06.200 --> 00:02:09.087
So far it sounds
like some sort of miracle fuel.

00:02:09.087 --> 00:02:10.676
Well, what's the catch?

00:02:11.167 --> 00:02:14.841
The difficulty is that people
have been trying this for 70 years,

00:02:14.841 --> 00:02:18.689
and so far, no one has gotten
out more energy than they put in.

00:02:19.542 --> 00:02:22.301
So, to understand this,
you have to imagine that the--

00:02:22.301 --> 00:02:25.712
well, the reaction takes place
inside of a plasma.

00:02:26.588 --> 00:02:32.537
And a plasma is a million plus
degree swarm of charged particles.

00:02:33.712 --> 00:02:36.315
And these particles
don't want to stay in place.

00:02:36.539 --> 00:02:40.797
The sun uses a gravitational force
to keep everything in place.

00:02:42.643 --> 00:02:45.544
We can't do that;
so instead, we use magnets.

00:02:46.006 --> 00:02:48.001
Now, magnets--

00:02:48.445 --> 00:02:51.660
you try to squeeze it with magnets
and they can pop out the end.

00:02:51.660 --> 00:02:53.725
And you can get little turbulent ripples,

00:02:53.725 --> 00:02:55.862
and what happens is the plasma breaks up,

00:02:55.862 --> 00:03:00.626
it gets unstable, it gets cooler,
and then the reaction stops.

00:03:01.056 --> 00:03:03.561
And that's what's been happening
for 70 years.

00:03:05.120 --> 00:03:07.032
So this is the kind
of problem that I like:

00:03:07.032 --> 00:03:10.087
it combines physics, probability,

00:03:10.784 --> 00:03:12.835
computation, mathematics.

00:03:13.441 --> 00:03:15.257
And so, that was like,
"I want to work on this

00:03:15.257 --> 00:03:17.687
and how can we accelerate progress?"

00:03:20.397 --> 00:03:23.438
Google is not building a fusion reactor.

00:03:23.438 --> 00:03:25.854
(laughter)

00:03:25.854 --> 00:03:29.383
What we have done is we've partnered
with TAE Technologies.

00:03:30.123 --> 00:03:34.435
And this is the world's largest
private fusion energy company.

00:03:35.151 --> 00:03:38.341
And we've been working
with them since 2015.

00:03:38.953 --> 00:03:40.291
So, pictured here

00:03:40.291 --> 00:03:46.541
is their 5th-generation
plasma generation device.

00:03:47.491 --> 00:03:48.566
And this thing is huge--

00:03:48.566 --> 00:03:51.476
it would fill up
a large part of this room.

00:03:53.135 --> 00:03:57.012
And then in the center
is where the plasma is kept.

00:03:57.012 --> 00:03:59.370
This is an elongated toroid,

00:04:01.270 --> 00:04:05.643
and the goal, really, is to keep
this in its place and prevent turbulence.

00:04:05.643 --> 00:04:08.375
And if it gets out of place,
then the reaction stops.

00:04:08.601 --> 00:04:11.637
So there's magnets and neutral beams,

00:04:11.637 --> 00:04:15.071
and a host of other technologies
to keep it in place.

00:04:17.221 --> 00:04:19.398
Now, what's Google's job specifically?

00:04:19.398 --> 00:04:23.839
Well, our goal is to take the measurements

00:04:23.839 --> 00:04:26.435
that come from this experimental reactor.

00:04:27.343 --> 00:04:29.573
And every time the physicists
do an experiment,

00:04:29.573 --> 00:04:32.078
within five minutes we want to tell them

00:04:32.078 --> 00:04:35.453
the plasma density, temperature,
and magnetic field

00:04:35.453 --> 00:04:37.446
on a three-dimensional grid.

00:04:38.543 --> 00:04:40.828
So, how hard is that?

00:04:41.471 --> 00:04:45.119
Well, first of all,
the plasma is very, very hot.

00:04:45.119 --> 00:04:48.303
So you can't just poke
it with a thermometer, like a turkey.

00:04:48.764 --> 00:04:50.382
The thermometer would melt,

00:04:50.382 --> 00:04:54.329
and you would disrupt the plasma
and ruin the experiment.

00:04:55.031 --> 00:04:57.698
So what you do have
are measurements along the boundary.

00:04:59.247 --> 00:05:01.377
But there's only so many
measurements you can take,

00:05:01.377 --> 00:05:06.234
because you can't cut that many holes

00:05:06.234 --> 00:05:08.012
on the side of this device.

00:05:09.899 --> 00:05:11.678
So, let's look closely at one--

00:05:11.678 --> 00:05:14.018
let's look at measuring
of electron density,

00:05:14.018 --> 00:05:16.652
and that's done with a device
known as an interferometer.

00:05:17.181 --> 00:05:20.611
An interferometer shines lasers
through the plasma,

00:05:20.611 --> 00:05:23.328
and then the phase shift is proportional

00:05:23.328 --> 00:05:26.940
to the average electron density
along that ray.

00:05:28.699 --> 00:05:33.744
So, we have 14 lasers shining through
the center of the plasma.

00:05:33.744 --> 00:05:37.079
So we know the average density
along 14 lines.

00:05:37.667 --> 00:05:41.569
And from that, we want
to know the density everywhere.

00:05:42.590 --> 00:05:46.085
So clearly, there's no one
unique solution to this problem.

00:05:46.085 --> 00:05:50.120
And instead, we'll have
a distribution over possible solutions.

00:05:50.687 --> 00:05:52.843
So, we do this in a Bayesian sense,

00:05:53.358 --> 00:05:58.061
and our final output
will be a probability density function

00:05:59.690 --> 00:06:03.865
for the density of the electrons,

00:06:04.255 --> 00:06:05.733
given the measurements.

00:06:05.733 --> 00:06:08.289
And we can visualize that with a graph--

00:06:08.289 --> 00:06:10.639
where you have the mean
and some error bars.

00:06:13.597 --> 00:06:15.425
How does TensorFlow help with this?

00:06:15.425 --> 00:06:19.325
So, the first place is translating
measurement physics into code.

00:06:19.671 --> 00:06:23.582
So, let's consider the distribution
for the camera measurement.

00:06:23.891 --> 00:06:26.054
So, the cameras measure photons.

00:06:26.054 --> 00:06:30.254
And say we have some photons
that are being emitted from the plasma.

00:06:31.679 --> 00:06:34.896
The mean number of photons
reaching the camera is given

00:06:34.896 --> 00:06:37.830
by a <i>tf.sparse_tensor_dense_matmul</i>.

00:06:40.252 --> 00:06:42.865
But we don't actually realize the mean--

00:06:42.865 --> 00:06:46.845
instead what we realize is a noisy mean.

00:06:46.845 --> 00:06:50.967
So there's noise due to a finite number
of photons-- that's Poisson noise.

00:06:51.259 --> 00:06:55.040
We also have discretization noise,
because we discretize space.

00:06:55.630 --> 00:06:57.532
So, the TensorFlow distributions library

00:06:57.532 --> 00:07:00.696
gives you access
to this normal distribution object,

00:07:01.320 --> 00:07:04.684
so that this noisy flux
represents a normal distribution--

00:07:04.684 --> 00:07:09.102
it has a mean, you can draw samples,

00:07:09.439 --> 00:07:12.725
you can compute the PDF, and so on.

00:07:15.738 --> 00:07:16.951
Then, that's not all, though.

00:07:16.951 --> 00:07:19.565
We also have analog
to digital conversion process

00:07:19.565 --> 00:07:22.238
that we model as passing
this normal distribution

00:07:22.238 --> 00:07:26.301
through a non-linear response curve,
and then digitizing it to 8 bits.

00:07:26.751 --> 00:07:31.387
So, at the end, this <i>digitized_charge</i>
is another distribution object

00:07:31.394 --> 00:07:34.715
that has an ability to take samples,

00:07:34.715 --> 00:07:39.357
you can compute the probability
mass function because it's discrete,

00:07:39.357 --> 00:07:40.492
and so on.

00:07:41.998 --> 00:07:43.589
And since we want to be Bayesian,

00:07:43.589 --> 00:07:46.659
we can reassemble
a number of these distributions,

00:07:46.659 --> 00:07:50.308
giving us a likelihood
and a prior, and so on.

00:07:51.381 --> 00:07:54.294
It's with a goal of producing a posterior.

00:07:56.796 --> 00:07:59.132
And then we do Bayesian inference--

00:07:59.132 --> 00:08:02.424
so now to do inference,
we do this in two different ways.

00:08:02.789 --> 00:08:05.143
The first way is variational inference,

00:08:05.143 --> 00:08:07.890
which amounts
to minimizing a loss function.

00:08:08.636 --> 00:08:10.515
And by minimizing a loss function

00:08:10.515 --> 00:08:13.446
you get an approximation
of the true posterior.

00:08:14.453 --> 00:08:16.934
So, this minimization is done

00:08:16.934 --> 00:08:19.477
just like any other
TensorFlow minimization--

00:08:19.477 --> 00:08:22.000
for example, we use AdamOptimizer.

00:08:22.905 --> 00:08:25.980
The second way is using
Hamiltonian Monte Carlo.

00:08:26.432 --> 00:08:28.310
So, the TensorFlow probability library

00:08:28.310 --> 00:08:32.124
gives you access to a number
of Monte Carlo samplers,

00:08:32.124 --> 00:08:35.793
and the Hamiltonian Monte Carlo
is one that uses gradients

00:08:35.793 --> 00:08:38.251
in order to help you take samples faster.

00:08:39.515 --> 00:08:43.056
Notice, in both cases,
we're using auto differentiation here,

00:08:43.056 --> 00:08:45.037
whether we're taking
gradients of this loss--

00:08:45.037 --> 00:08:49.263
or whether we're taking gradients
to do Hamiltonian Monte Carlo sampling.

00:08:52.858 --> 00:08:56.287
So, popping up a level, you'll notice
we're not doing deep learning.

00:08:58.891 --> 00:09:00.715
Instead, we're doing an inverse problem

00:09:00.715 --> 00:09:03.218
whereby measurements,
given to us from physicists,

00:09:03.218 --> 00:09:06.734
are translated into a reconstruction
of some physical state.

00:09:07.519 --> 00:09:09.724
So, there's a few differences
I want to highlight.

00:09:09.724 --> 00:09:12.381
First of all, there are no labels
that are given to us.

00:09:13.475 --> 00:09:15.271
The natural label here

00:09:16.721 --> 00:09:21.035
would be a three-dimensional image
of the actual plasma.

00:09:21.981 --> 00:09:24.890
But we're the ones who are telling people
what the plasma looks like,

00:09:24.890 --> 00:09:28.394
so we're the ones
actually producing the labels.

00:09:30.187 --> 00:09:32.521
Given that there's no labels,
you might be tempted to say,

00:09:32.521 --> 00:09:36.020
"Well, this is an unsupervised
learning technique, like word clustering."

00:09:36.339 --> 00:09:39.605
There's a key difference, though,
that here there really is a right answer,

00:09:39.605 --> 00:09:41.509
there really was a plasma out there,

00:09:41.509 --> 00:09:46.233
and if that plasma doesn't fall
within our error bars,

00:09:46.233 --> 00:09:47.763
we've made a mistake.

00:09:49.733 --> 00:09:52.545
And also, you'll notice
that our graph here models physics

00:09:52.545 --> 00:09:54.401
rather than generic functions.

00:09:55.075 --> 00:09:57.605
So, it's a bit more constrained
than these deep neural networks,

00:09:57.605 --> 00:10:00.476
but that allows us to get
the right answer with no labels.

00:10:02.912 --> 00:10:05.255
At the end of the day, TensorFlow,

00:10:05.255 --> 00:10:06.909
despite it not being deep learning,

00:10:06.909 --> 00:10:09.562
TensorFlow adds value
with the TensorFlow distributions

00:10:09.562 --> 00:10:11.375
and probability library.

00:10:11.784 --> 00:10:14.468
We have auto differentiation
to do inference.

00:10:14.839 --> 00:10:18.991
And in order to provide answers
to many measurements at once,

00:10:18.991 --> 00:10:21.833
GPUs and distributed
computing is very important.

00:10:23.713 --> 00:10:25.588
So, thank you very much.

00:10:25.588 --> 00:10:27.945
(applause)

00:10:27.945 --> 00:10:30.384
♪ (outro music) ♪

