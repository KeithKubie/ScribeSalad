WEBVTT
Kind: captions
Language: en

00:00:00.280 --> 00:00:04.910
And one policy, that tries to more
closely approximate the PLRU is the so

00:00:04.910 --> 00:00:07.740
called pseudo PLRU policy.

00:00:07.740 --> 00:00:10.020
So it's really trying to
approximate the PLRU but

00:00:10.020 --> 00:00:12.600
sometimes it doesn't exactly match it.

00:00:12.600 --> 00:00:15.610
So let's look at an eight
way set associative cache.

00:00:15.610 --> 00:00:19.610
And with a pseudo LRU policy
what we keep is one bit.

00:00:19.610 --> 00:00:23.390
Per line in the set, so
in an eight place set associative cache,

00:00:23.390 --> 00:00:27.810
we will have a one bit
associated with each line

00:00:27.810 --> 00:00:32.570
as opposed to three bits that we
would need for our LRU counting.

00:00:32.570 --> 00:00:34.750
So how does pseudo LRV work?

00:00:34.750 --> 00:00:38.450
All of the bits start at zero and
what we will do is,

00:00:38.450 --> 00:00:42.790
every time a line is accessed,
we will set its bit to one.

00:00:42.790 --> 00:00:43.370
So for example,

00:00:43.370 --> 00:00:47.570
this one becomes one, this one becomes
one, then this one becomes one.

00:00:47.570 --> 00:00:52.870
As long as there is at least one
zero bit here, we keep doing this.

00:00:52.870 --> 00:00:54.950
And if we ever need
to replace something,

00:00:54.950 --> 00:00:57.990
we pick among the blocks
whose bits are zero.

00:00:57.990 --> 00:01:01.900
So all the recently accessed blocks
will have the bits at one and

00:01:01.900 --> 00:01:03.990
thus safe from replacement.

00:01:03.990 --> 00:01:07.750
Eventually, however, if we have
a lot of hits, so for example,

00:01:07.750 --> 00:01:12.860
in this particular state, we will pick
the least recently used block because it

00:01:12.860 --> 00:01:15.010
is the only one that has a zero bit.

00:01:15.010 --> 00:01:17.920
Eventually however,
all of the bits will be set.

00:01:17.920 --> 00:01:21.000
So evnetually we will
have this become one.

00:01:21.000 --> 00:01:23.220
And now, we cannot replace anything.

00:01:23.220 --> 00:01:27.870
So we detect the situation where
all the bits have become one.

00:01:27.870 --> 00:01:34.600
And when we set the last zero bit to
one, we zero out the remaining bits.

00:01:34.600 --> 00:01:35.740
So now,

00:01:35.740 --> 00:01:40.910
we have state that is similar to what
not most recently use would tell us.

00:01:40.910 --> 00:01:43.880
We only know what was
the most recently used block.

00:01:43.880 --> 00:01:44.930
For the rest of them,

00:01:44.930 --> 00:01:47.950
we need to pick it randomly if
something needs to be placed.

00:01:47.950 --> 00:01:52.570
But as we start accessing some other
blocks, we get a better idea of

00:01:52.570 --> 00:01:55.730
which ones are the more, and
which ones are less recently used.

00:01:55.730 --> 00:02:00.110
So at any given point in time the pseudo
LRV policy is somewhere between

00:02:01.110 --> 00:02:02.790
the NMRU and the LRU policy.

00:02:02.790 --> 00:02:06.010
We have seen that when one bit is set

00:02:06.010 --> 00:02:10.090
we are effectively
implementing the NMRU policy.

00:02:10.090 --> 00:02:11.949
When more than one bit is set.

00:02:13.260 --> 00:02:17.070
But not,
almost all of them were in between and

00:02:17.070 --> 00:02:21.540
when all but one are set,
we're implementing the true LRU policy

00:02:21.540 --> 00:02:25.570
because we know exactly which one
block is the least recently used.

00:02:25.570 --> 00:02:30.405
So, this policy behaves
somewhere in between LRU and

00:02:30.405 --> 00:02:33.820
NMRU in exchange for using more bits.

00:02:33.820 --> 00:02:36.360
But it's also very
simple because on a hit,

00:02:36.360 --> 00:02:40.320
all we have to do is set the bit
that corresponds to the block.

00:02:40.320 --> 00:02:42.960
Which can be done very quickly and
efficiently.

00:02:42.960 --> 00:02:47.980
So as far as activity on a cache hit
is concerned, both pseudo LRU and

00:02:47.980 --> 00:02:51.730
NMRU have much less activity than LRU,

00:02:51.730 --> 00:02:54.870
which helps us with both power and
also hit time on the cache.

