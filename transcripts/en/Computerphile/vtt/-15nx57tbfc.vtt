WEBVTT
Kind: captions
Language: en-GB

00:00:00.000 --> 00:00:06.180
At Sacramento - at your listening station - you
hear 010 and you say: "That can't be right!"

00:00:06.899 --> 00:00:11.160
What's the simplest thing to do? To try
and find out what the weather really is?

00:00:11.160 --> 00:00:14.160
Because you know that an error has occurred.

00:00:15.420 --> 00:00:20.160
We've talked about the most compact way
to transmit this information. There are

00:00:20.160 --> 00:00:26.730
four possible patterns. You could have two 
zeros. You could have 01, 10 and 11.

00:00:27.330 --> 00:00:33.630
However, you have  got to be careful here 
because what we've done - and referring back to

00:00:33.630 --> 00:00:37.140
what I've said previously about
compression methods - what I've done here

00:00:37.140 --> 00:00:43.739
is devise a code which has no
redundancy at all. We've talked about how

00:00:43.739 --> 00:00:48.629
to squeeze redundancy out of text files
and pictures - which is what compression

00:00:48.629 --> 00:00:53.640
is. It's getting rid of unnecessary
information. There's nothing unnecessary

00:00:53.640 --> 00:00:57.390
here - every one of those bits is vital
And you'd better hope they don't get lost

00:00:57.390 --> 00:01:02.070
or distorted on the way. Unfortunately
they might get lost or distorted on the

00:01:02.070 --> 00:01:08.100
way! So the next thing we have to say is
that these codes are beautiful but they rely

00:01:08.100 --> 00:01:14.670
on you having clean, noiseless,
communication across your telephone wire.

00:01:14.670 --> 00:01:22.049
What would go wrong if that wasn't the
case?  Just occasionally one of these 0

00:01:22.049 --> 00:01:29.130
bits that's signified by a short "bloop"
for a dot, might get turned into a one

00:01:29.130 --> 00:01:33.840
because, part way to Sacramento, suddenly,
an electrical storm occurred. And just

00:01:35.280 --> 00:01:43.350
hit the telephone wire so what was received 
at Sacramento was not "doop doop" it was 
"doop daaang" - like that - a longer

00:01:43.350 --> 00:01:49.590
second bit. And the people say: "That's
01, it's sunny in San Francisco!"

00:01:49.590 --> 00:01:55.050
No it isn't - it's foggy!  So you can see, 
very quickly, there is no possibility for

00:01:55.050 --> 00:02:00.479
recovering from error in these. If you
get an error people will receive,

00:02:00.479 --> 00:02:05.340
apparently, a good pattern, but it will be
for the wrong weather condition. How

00:02:05.340 --> 00:02:10.200
could you add something extra to these
to give them a bit of protection against

00:02:10.200 --> 00:02:15.060
noisy telephone lines? Simplest way - one
of the simplest - has been used in

00:02:15.060 --> 00:02:21.090
telecommunications - and indeed within
computers - for years and years now. You

00:02:21.090 --> 00:02:28.050
put in a parity-check bit so here is a
code with a check bit. And all I'm going

00:02:28.050 --> 00:02:33.720
to do here:  I will take every 2-bit
code and turn it into a 3-bit code. But

00:02:33.720 --> 00:02:38.489
the rule will be that in the overall
3-bit code I must have an even number

00:02:38.489 --> 00:02:45.420
of 1 bits. So this is called an "even
parity" system. So here we go:

00:02:45.989 --> 00:02:53.190
00 there are no 1s in that. So therefore, 
at the right-hand end here ...

00:02:53.190 --> 00:02:58.290
This will add in the parity-check bit
and because we're on even parity it's a

00:02:58.290 --> 00:03:04.079
0. Viewers of "Numberphile" will have to
forgive me - I think there is a video on

00:03:04.079 --> 00:03:08.310
the questioning of whether 0 is an even
number? I'm sorry, I'm just a computer scientist.

00:03:08.310 --> 00:03:13.799
&gt;&gt; Numberphile: People have a delayed reaction
people are not sure whether 0 is an even number.

00:03:13.799 --> 00:03:16.380
&gt;&gt; DFB: That's even as far as I'm concerned.

00:03:16.380 --> 00:03:20.220
OK -  how about this one - 01 ?

00:03:20.220 --> 00:03:25.739
Well, overall it's got to be even parity
which means an even number of 1s. So my

00:03:25.739 --> 00:03:32.070
bit I add at the right-hand end is a 1.
Equally here for cloudy 1 and 0 there it

00:03:32.070 --> 00:03:40.109
is, two of them, 101. Rainy that's easy. 
There's an even number of 1s already. 
so I put a 0 at the end.

00:03:40.650 --> 00:03:44.700
Now, those codes, with the check bit,

00:03:44.700 --> 00:03:49.980
they help a lot in helping to detect
whether an error has occurred. Just

00:03:49.980 --> 00:03:58.650
suppose that when this 000 was sent it
got distorted. Again, an electrical

00:03:58.650 --> 00:04:04.859
disturbance just happened to chew up one of the
0 bits, lengthen it, and make it look like

00:04:04.859 --> 00:04:14.310
010. If any of these got distorted. A nought turned
to a 1, or a 1 turned to a zero, it looks like a valid

00:04:14.310 --> 00:04:20.459
different weather state. Here it doesn't.
because look at the valid codes: three zeros

00:04:20.459 --> 00:04:23.280
011, 101, 110

00:04:23.280 --> 00:04:30.630
I sent this and it arrived at the other
end as 010. Is this a code that's in this set?

00:04:30.630 --> 00:04:35.970
No it isn't. If you try with these, just
changing any one of the bits and

00:04:35.970 --> 00:04:43.229
flipping it, either a 1 to a 0, or a 0 to a 1 
you end up with something that isn't in this

00:04:43.229 --> 00:04:50.130
list of good valid codes. You could say
"Well, there's bad codes. There's things that don't

00:04:50.130 --> 00:04:55.919
correspond to any of these". And of course
with three bits: 2 to the power of 3 is 8, so

00:04:55.919 --> 00:04:59.639
there's eight possible combinations. What
we've done here is split them up into

00:04:59.639 --> 00:05:04.889
four good codes, that are meaningful, and
four bad ones. But the bad ones give you

00:05:04.889 --> 00:05:08.699
a protection against errors in
transmission. At your listening station

00:05:08.699 --> 00:05:13.139
you hear "010" and you say: "That can't be right!"

00:05:13.139 --> 00:05:17.639
What's the simplest thing to do, to try
and find out what the weather really is,

00:05:17.639 --> 00:05:22.590
because you know that an error has occurred.
Well, the simplest thing is to send back

00:05:22.590 --> 00:05:26.849
to San Francisco a simple 1-bit message
either a nought or a one. You either say

00:05:26.849 --> 00:05:32.610
"Acknowledge", in other words "I got it - it's
a good code" or "Not Acknowledge". Here I

00:05:32.610 --> 00:05:36.270
would send back a "Not Acknowledge"
often called a NAK (for "Not Acknowledge")

00:05:36.270 --> 00:05:40.530
Send back a 1 bit that says "Not Acknowledge, 
(it's)  garbage" and the sending end

00:05:40.530 --> 00:05:46.169
would say: "OK, let's keep it simple, just
send it again, 000". And next time you hope it's

00:05:46.169 --> 00:05:48.510
going to get through without distortion.

00:05:48.510 --> 00:05:51.289
So this is the basis of this system

00:05:51.289 --> 00:05:55.969
in that it can detect that a single
error has occurred.

00:05:56.599 --> 00:06:04.999
The only trouble is that it can't tell
you where the error occurred. Just

00:06:04.999 --> 00:06:12.319
consider the following: I have got 010
here, by changing the middle 0 into a 1.

00:06:12.319 --> 00:06:20.149
But it could have happened that it came
from this one via distortion it could

00:06:20.149 --> 00:06:24.349
have been that the bit that got
distorted was not that one, or that one,

00:06:24.349 --> 00:06:30.800
but that one. That trailing 1 bit might have 
got turned back in into a 0. There's an error but

00:06:30.800 --> 00:06:35.809
I don't know whether it came from this one
or from this one. So, this kind of code then

00:06:35.809 --> 00:06:42.139
can detect one error but it can't
correct it. It can tell you where it occurred.

00:06:42.139 --> 00:06:48.979
Suppose I had an even noisier line and
that in one of these 3-bit codes -- you

00:06:48.979 --> 00:06:52.399
hope most of them are going to go
through cleanly, you hope that the ones

00:06:52.399 --> 00:06:56.360
that aren't clean will have at most one
error in them.

00:06:56.360 --> 00:07:04.490
What happens if I send 101 and there are
two errors in it, not just one? The errors

00:07:04.490 --> 00:07:12.860
just so happen that it turns a long blip
into a short one, there and there. That

00:07:12.860 --> 00:07:19.459
would then give you 000. Two errors.

00:07:19.459 --> 00:07:24.229
Oh calamity again! This is received at
the receiving station. They say: "Hey!

00:07:24.229 --> 00:07:29.749
Fantastic!  000 - it's foggy in San Francisco"

00:07:30.499 --> 00:07:35.300
No it isn't! It's cloudy. but it got two
errors so it looks like it was foggy.

00:07:35.300 --> 00:07:39.529
So, the point here is: it's resilient against
one error - they can detect but can't

00:07:39.529 --> 00:07:44.569
correct it. But against two errors there
isn't resilience. It distorts it into a

00:07:44.569 --> 00:07:46.369
good-looking code again.

00:07:46.369 --> 00:07:54.469
So for this reason this system is called
a "distance 2" code because what it's

00:07:54.469 --> 00:07:58.339
saying is: if you flip two bits

00:07:58.339 --> 00:08:01.129
it changes into another good code;

00:08:01.129 --> 00:08:06.199
if you flip one bit it's discernibly
garbage and you can say an error has occurred

