WEBVTT
Kind: captions
Language: en

00:00:02.490 --> 00:00:04.680
This is a common
problem that we see.

00:00:04.680 --> 00:00:06.990
Some fancy language
has a dedicated guide

00:00:06.990 --> 00:00:09.325
of best practices
that define how

00:00:09.325 --> 00:00:12.340
the creators want developers to
use that particular language.

00:00:12.340 --> 00:00:14.130
Now sometimes, this
is great advice

00:00:14.130 --> 00:00:16.710
in order to create more
stable and robust code.

00:00:16.710 --> 00:00:18.110
But all that safety
usually comes

00:00:18.110 --> 00:00:19.390
at the cost of performance.

00:00:19.390 --> 00:00:20.400
My name is Colt McAnlis.

00:00:20.400 --> 00:00:22.290
And the best
practices in Java say

00:00:22.290 --> 00:00:25.600
that iterators are the ideal
way to walk over a collection.

00:00:25.600 --> 00:00:27.680
But that's specifically
for language stability.

00:00:27.680 --> 00:00:29.360
So are iterators
the best practice

00:00:29.360 --> 00:00:31.245
when it comes to performance?

00:00:31.245 --> 00:00:33.620
There's two main things you
need to know about iterators.

00:00:33.620 --> 00:00:36.450
Firstly, know that every
time you get an iterator,

00:00:36.450 --> 00:00:38.630
it will result in a
memory allocation.

00:00:38.630 --> 00:00:41.264
Of course, one allocation is
not necessarily a big deal.

00:00:41.264 --> 00:00:42.680
But when you're
grabbing iterators

00:00:42.680 --> 00:00:45.120
from a number of lists, or
all inside of a parent loop,

00:00:45.120 --> 00:00:48.010
or inside the onDraw function,
those extra allocations

00:00:48.010 --> 00:00:50.110
are going to chew
through your memory heap.

00:00:50.110 --> 00:00:52.590
And secondly, it's very
typical for iterators in Java

00:00:52.590 --> 00:00:54.960
to do additional
computational checking.

00:00:54.960 --> 00:00:56.900
For example, calling
the next function,

00:00:56.900 --> 00:00:59.150
typically, will do a check
to see if the container has

00:00:59.150 --> 00:01:01.640
been modified before
allowing you to step through

00:01:01.640 --> 00:01:02.860
to the next item.

00:01:02.860 --> 00:01:05.470
Under normal circumstances,
not really a big deal.

00:01:05.470 --> 00:01:06.150
But remember.

00:01:06.150 --> 00:01:09.120
You're incurring that overhead
for every single element

00:01:09.120 --> 00:01:10.570
in your collection.

00:01:10.570 --> 00:01:12.710
Oh, and you're also doing
this on a mobile device

00:01:12.710 --> 00:01:15.490
as well, which means that these
are not light problems that you

00:01:15.490 --> 00:01:17.802
can easily ignore for
the sake of convenience.

00:01:17.802 --> 00:01:19.260
In fact, these
performance concerns

00:01:19.260 --> 00:01:22.510
are large enough that
even the Android platform

00:01:22.510 --> 00:01:25.620
team, the team who actually
writes the Android code,

00:01:25.620 --> 00:01:28.200
has a general policy to
avoid using iterators

00:01:28.200 --> 00:01:30.340
in any part of
their platform code.

00:01:30.340 --> 00:01:34.020
But lets not give in to
rumors and hearsay here.

00:01:34.020 --> 00:01:35.610
How bad is the problem, really?

00:01:35.610 --> 00:01:37.600
Well, to figure that
out, let's run a test,

00:01:37.600 --> 00:01:39.300
try a few different
ways to walk a list,

00:01:39.300 --> 00:01:41.960
and see how iterators
stack up to other options.

00:01:41.960 --> 00:01:42.460
OK.

00:01:42.460 --> 00:01:45.450
So, our test should include,
bare minimum, an iterator

00:01:45.450 --> 00:01:47.495
object to walk over
a list collection.

00:01:47.495 --> 00:01:49.870
That's a given, since it's
what we're talking about here.

00:01:49.870 --> 00:01:51.470
And just as a baseline example.

00:01:51.470 --> 00:01:53.270
Let's also test
the most simple way

00:01:53.270 --> 00:01:56.760
to walk a list using a for
loop alongside the get method

00:01:56.760 --> 00:01:58.490
with a specific index.

00:01:58.490 --> 00:02:01.080
And the Java 5 version
of the language

00:02:01.080 --> 00:02:05.120
also defines a simplified syntax
for iterating any collection,

00:02:05.120 --> 00:02:06.680
so that's also
worth testing just

00:02:06.680 --> 00:02:09.030
to see if the reduced
syntax also comes along

00:02:09.030 --> 00:02:11.550
with any weird performance
wins that we don't know about.

00:02:11.550 --> 00:02:13.008
In fact, actually,
just to be safe,

00:02:13.008 --> 00:02:15.710
let's make sure that we
test all of our comparisons

00:02:15.710 --> 00:02:17.930
against using a Vector
and an ArrayList.

00:02:17.930 --> 00:02:20.160
This should hopefully
give us a good set of data

00:02:20.160 --> 00:02:23.787
that we can compare against to
get some additional insights.

00:02:23.787 --> 00:02:25.620
Any test that's going
to discuss performance

00:02:25.620 --> 00:02:27.690
usually needs some
listed explanation

00:02:27.690 --> 00:02:29.510
of how the tests were
performed, under what

00:02:29.510 --> 00:02:30.885
conditions, et
cetera, et cetera,

00:02:30.885 --> 00:02:33.135
so that the numbers can all
be understood and reported

00:02:33.135 --> 00:02:34.150
in a meaningful manner.

00:02:34.150 --> 00:02:36.650
So that's what all
that gibberish is.

00:02:36.650 --> 00:02:39.790
Anyhow, on to the
results at hand.

00:02:39.790 --> 00:02:41.210
Bringing up the
bottom of our list

00:02:41.210 --> 00:02:45.330
is the iterator and simple
for loop syntax on Vector

00:02:45.330 --> 00:02:46.770
objects, specifically.

00:02:46.770 --> 00:02:50.310
The next fastest algorithms
are the for simple and iterator

00:02:50.310 --> 00:02:53.100
functions on ArrayLists,
which clock in at pretty

00:02:53.100 --> 00:02:54.040
much the same time.

00:02:54.040 --> 00:02:55.920
This is expected,
since, under the hood,

00:02:55.920 --> 00:02:58.880
they both use relatively
the same code paths,

00:02:58.880 --> 00:03:00.510
which of course means
that the winners

00:03:00.510 --> 00:03:03.970
of our friendly competition
is the computer science 101

00:03:03.970 --> 00:03:08.110
style for loop using an index
to grab the specific object.

00:03:08.110 --> 00:03:10.330
And notice the
relative numbers here.

00:03:10.330 --> 00:03:14.040
The for loop over an
ArrayList was almost 2x

00:03:14.040 --> 00:03:16.260
faster than using an
iterator to accomplish

00:03:16.260 --> 00:03:19.220
the same results, which
just goes to show you kids,

00:03:19.220 --> 00:03:21.850
just because the language says
it's the right thing to do,

00:03:21.850 --> 00:03:24.475
doesn't mean that it will always
give you the best performance.

00:03:24.475 --> 00:03:26.691
But actually, I take that back.

00:03:26.691 --> 00:03:29.190
What this really goes to show
you is that before you run off

00:03:29.190 --> 00:03:30.740
and start making
changes to your code

00:03:30.740 --> 00:03:32.531
based upon what you've
read on the internet

00:03:32.531 --> 00:03:36.640
or heard from friends, always
verify your assumptions.

00:03:36.640 --> 00:03:38.330
It can be as easy
as running a tool

00:03:38.330 --> 00:03:41.064
to see how your code performs
or writing a small benchmark

00:03:41.064 --> 00:03:42.980
on your target platform
to figure out the best

00:03:42.980 --> 00:03:44.915
decision to take,
which is why you need

00:03:44.915 --> 00:03:47.290
to check out the rest of the
Android Performance Patterns

00:03:47.290 --> 00:03:47.879
content.

00:03:47.879 --> 00:03:49.670
Who knows what type of
performance problems

00:03:49.670 --> 00:03:51.530
you haven't uncovered yet.

00:03:51.530 --> 00:03:54.700
And don't forget to join the
Google+ community, as well,

00:03:54.700 --> 00:03:56.780
for tips and advice
from other developers.

00:03:56.780 --> 00:03:59.270
So as always, keep
calm, profile your code,

00:03:59.270 --> 00:04:00.720
and remember perf matters.

00:04:00.720 --> 00:04:04.070
[MUSIC PLAYING]

