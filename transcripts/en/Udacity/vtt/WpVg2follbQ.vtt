WEBVTT
Kind: captions
Language: en

00:00:00.490 --> 00:00:04.350
Here's a quick refresher on the memory hierarchy

00:00:04.350 --> 00:00:08.440
of a processor. As you know, between the CPU

00:00:08.440 --> 00:00:10.508
and the main memory there are several levels of

00:00:10.508 --> 00:00:13.220
caches. And typically these days, you may have it

00:00:13.220 --> 00:00:15.930
up to three levels of caches between the

00:00:15.930 --> 00:00:18.990
CPU and the memory. And the, the nature of

00:00:18.990 --> 00:00:22.060
the the memory hierarchy is that, you can have

00:00:22.060 --> 00:00:25.690
something that is really fast, a small amount of,

00:00:25.690 --> 00:00:28.430
or really slow, and big amount of. And, and

00:00:28.430 --> 00:00:31.590
so all of these choices that are in between are

00:00:31.590 --> 00:00:34.480
really in between the two extreme choices of an L1

00:00:34.480 --> 00:00:38.450
cache and the main memory. The disparity in the CPU

00:00:38.450 --> 00:00:41.300
cycle time and the main memory if you take the

00:00:41.300 --> 00:00:44.430
disparity between the CPU and the main memory, it's more

00:00:44.430 --> 00:00:47.440
than two orders of magnitude today, and it's only growing.

00:00:47.440 --> 00:00:51.640
So any hiccup that the CPU has in not finding

00:00:51.640 --> 00:00:55.070
data or instructions that it needs to execute the

00:00:55.070 --> 00:00:58.210
currently running thread in the caches and it has

00:00:58.210 --> 00:00:59.750
to go all the way to the memory, is

00:00:59.750 --> 00:01:03.340
bad news in terms of performance. So what this

00:01:03.340 --> 00:01:07.330
suggests is that in picking the, the next thread

00:01:07.330 --> 00:01:09.940
to run on the CPU, it'll probably be a

00:01:09.940 --> 00:01:13.760
very good idea if the scheduler picks a thread

00:01:13.760 --> 00:01:17.100
whose memory contents are likely to be in the caches.

00:01:17.100 --> 00:01:19.410
If not in the L1 cache, at least in the L2 cache. If not

00:01:19.410 --> 00:01:22.870
in the L2 cache, at least in the L3 cache. So that it doesn't have

00:01:22.870 --> 00:01:26.660
to go all the way to the memory in order to get the instructions

00:01:26.660 --> 00:01:28.760
and data for the currently running thread.

00:01:28.760 --> 00:01:31.470
So that's an important point to think about.

