WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.720
[MUSIC PLAYING]

00:00:03.720 --> 00:00:06.220
WESLEY CHUN: Hey, developers,
and welcome to the G Suite Dev

00:00:06.220 --> 00:00:06.720
Show.

00:00:06.720 --> 00:00:08.045
I'm your host, Wesley Chun.

00:00:08.045 --> 00:00:09.670
Today we're going to
explore how to add

00:00:09.670 --> 00:00:13.000
text and shapes to presentations
using the Google Slides API.

00:00:13.000 --> 00:00:16.626
As a bonus, we'll also show you
how to add text into shapes.

00:00:16.626 --> 00:00:18.250
When you create a
brand-new slide deck,

00:00:18.250 --> 00:00:21.700
you get one default title site
which has got two text boxes--

00:00:21.700 --> 00:00:24.100
one for a title and
another for a subtitle.

00:00:24.100 --> 00:00:26.650
Our sample app will show you
how to use the API to fill

00:00:26.650 --> 00:00:28.264
in both text boxes.

00:00:28.264 --> 00:00:29.680
The core functionality
of the app,

00:00:29.680 --> 00:00:31.780
however, will be
to add a new slide.

00:00:31.780 --> 00:00:34.390
We'll use the main point
layout, which, as you can see,

00:00:34.390 --> 00:00:37.420
gives us a slide with
one largish text box

00:00:37.420 --> 00:00:38.620
but is otherwise empty.

00:00:38.620 --> 00:00:40.960
So we can add some
crazy shapes to it.

00:00:40.960 --> 00:00:43.290
To complete the demo,
we'll also add text

00:00:43.290 --> 00:00:46.390
to not only the text box,
but also to all the shapes.

00:00:46.390 --> 00:00:48.862
Our sample app will be
done in Python for brevity.

00:00:48.862 --> 00:00:50.320
The client library
can be installed

00:00:50.320 --> 00:00:52.210
with a single PIP
command, or PIP 3

00:00:52.210 --> 00:00:53.920
if you're a Python 3 user.

00:00:53.920 --> 00:00:55.420
If you're not a
Python developer,

00:00:55.420 --> 00:00:57.629
just use it as
pseudocode to learn with.

00:00:57.629 --> 00:00:59.170
Then build your app
with any language

00:00:59.170 --> 00:01:01.690
supported by the Google
API's client libraries.

00:01:01.690 --> 00:01:03.190
Check out the link
to get the client

00:01:03.190 --> 00:01:05.349
library for your language.

00:01:05.349 --> 00:01:07.030
Next, create a
Google API project

00:01:07.030 --> 00:01:09.400
in the developers console
with the Slides API enabled,

00:01:09.400 --> 00:01:10.620
if you haven't already.

00:01:10.620 --> 00:01:13.120
If you want to get a head start
before we look at our sample

00:01:13.120 --> 00:01:16.420
app, feel free to review the
Adding Text and Shapes How-To,

00:01:16.420 --> 00:01:17.736
but it's optional.

00:01:17.736 --> 00:01:19.360
If you're set, let's
go to the computer

00:01:19.360 --> 00:01:23.880
and see how to add text and
shapes to slides using the API.

00:01:23.880 --> 00:01:26.060
We'll start with
lines 1 through 16.

00:01:26.060 --> 00:01:28.860
This is your standard imports
and boilerplate authorization

00:01:28.860 --> 00:01:32.460
code, except for line 8
where we define the gen UUID

00:01:32.460 --> 00:01:35.040
lambda, which basically
calls into a standard library

00:01:35.040 --> 00:01:38.850
function to get randomly-created
UUIDs, or Unique IDs,

00:01:38.850 --> 00:01:40.210
as a string.

00:01:40.210 --> 00:01:42.270
We're going to use
this down below where

00:01:42.270 --> 00:01:44.640
we need unique object IDs.

00:01:44.640 --> 00:01:46.770
Line 10 is a read-write
scope for slides.

00:01:46.770 --> 00:01:48.930
And line 16 is where we
create the service end

00:01:48.930 --> 00:01:50.790
point for the slides API.

00:01:50.790 --> 00:01:53.610
Lines 18 to 24 are
where we create

00:01:53.610 --> 00:01:56.760
a brand-new presentation, then
grabbing the title and subtitle

00:01:56.760 --> 00:01:58.860
text box IDs from
the default title

00:01:58.860 --> 00:02:02.490
slide from the API response
that we see from 22 to 24.

00:02:02.490 --> 00:02:05.400
Lines 25 to 30 is where
we use the function

00:02:05.400 --> 00:02:09.000
that we created on line 8 to
generate random object IDs.

00:02:09.000 --> 00:02:11.190
Now why would you generate
your own IDs rather

00:02:11.190 --> 00:02:13.200
than getting them from the API?

00:02:13.200 --> 00:02:15.330
Because you can use these
IDs for the remaining

00:02:15.330 --> 00:02:17.070
requests in a single batch.

00:02:17.070 --> 00:02:18.630
If you let the API
do it, you need

00:02:18.630 --> 00:02:20.730
to lay a lot more
additional calls--

00:02:20.730 --> 00:02:23.070
make a call to create
something, then make

00:02:23.070 --> 00:02:25.110
another call to get
the IDs, then make

00:02:25.110 --> 00:02:27.300
another call using those IDs.

00:02:27.300 --> 00:02:29.950
All these extra calls
chew up your quota.

00:02:29.950 --> 00:02:32.250
So it's best to minimize
by rolling your own IDs

00:02:32.250 --> 00:02:33.550
and using them.

00:02:33.550 --> 00:02:35.280
Note that in this
app, as we will see,

00:02:35.280 --> 00:02:37.500
we only have two
API calls total--

00:02:37.500 --> 00:02:39.750
one to create the
presentation and another one

00:02:39.750 --> 00:02:41.250
to do everything else.

00:02:41.250 --> 00:02:44.190
If you don't create your own
IDs, at least for this app,

00:02:44.190 --> 00:02:48.330
you'll need at least
five API calls.

00:02:48.330 --> 00:02:51.360
Lines 32 to 46 are
the requests to create

00:02:51.360 --> 00:02:53.250
a new slide for
our shapes, as well

00:02:53.250 --> 00:02:55.110
as filling in most text boxes.

00:02:55.110 --> 00:02:58.710
Specifically, 35 to 42 is
where we create the new slide

00:02:58.710 --> 00:03:00.570
with a main point
layout, passing

00:03:00.570 --> 00:03:04.440
in our generated IDs for both
the slide and that largish text

00:03:04.440 --> 00:03:06.060
box we mentioned earlier.

00:03:06.060 --> 00:03:08.190
The placeholder
ID mappings field

00:03:08.190 --> 00:03:10.560
is an array to provide the
IDs for the elements that

00:03:10.560 --> 00:03:12.100
are part of that layout.

00:03:12.100 --> 00:03:14.850
We only have one item, because
the main point slide only

00:03:14.850 --> 00:03:17.490
has that one largish text box.

00:03:17.490 --> 00:03:20.820
43 to 46 is where we add
the title and subtitle

00:03:20.820 --> 00:03:23.610
text on that default
title slide and the text

00:03:23.610 --> 00:03:26.860
for that largish text box
on the main point slide.

00:03:26.860 --> 00:03:30.960
Now 47 down to 94
is a large block

00:03:30.960 --> 00:03:32.970
that creates the three shapes.

00:03:32.970 --> 00:03:36.030
The code to create each shape
are nearly identical, so let's

00:03:36.030 --> 00:03:38.700
chat briefly about
them in general.

00:03:38.700 --> 00:03:42.360
When placing or manipulating
shapes or images on slides,

00:03:42.360 --> 00:03:45.330
developers must calculate or
otherwise provide the desired

00:03:45.330 --> 00:03:46.950
sizes and transforms.

00:03:46.950 --> 00:03:49.950
Resizing, rotating,
and similar operations

00:03:49.950 --> 00:03:52.650
require some basic
knowledge of matrix math.

00:03:52.650 --> 00:03:55.410
Take a look at the Page Elements
page in the documentation,

00:03:55.410 --> 00:03:58.824
as well as the Transforms
Concept Guide for more details.

00:03:58.824 --> 00:04:00.240
But if you're short
on time, don't

00:04:00.240 --> 00:04:02.610
want to deal with the math,
or maybe you're thinking,

00:04:02.610 --> 00:04:05.160
I just want to draw a
smiley face on a slide,

00:04:05.160 --> 00:04:07.890
one common pattern, then, is
to bring up the Slides user

00:04:07.890 --> 00:04:10.560
interface, create a blank
slide, and place your image

00:04:10.560 --> 00:04:13.590
or draw your shape the way you
want with the size you want,

00:04:13.590 --> 00:04:15.840
and putting it exactly
where you want.

00:04:15.840 --> 00:04:18.060
Once you have that,
you can use the API

00:04:18.060 --> 00:04:20.070
to do a get call
on the presentation

00:04:20.070 --> 00:04:23.520
and grab that critical size and
transform that you need, just

00:04:23.520 --> 00:04:26.430
like what you see here, and then
drop them right into your code,

00:04:26.430 --> 00:04:28.170
like we did with the
Python equivalent

00:04:28.170 --> 00:04:30.390
you see here on 47 to 62.

00:04:30.390 --> 00:04:34.790
And likewise for the other
shapes from 63 to 94.

00:04:34.790 --> 00:04:37.160
Since we're showing you
how to add text and shapes,

00:04:37.160 --> 00:04:39.830
we might as well show you
how to add text into shapes.

00:04:39.830 --> 00:04:42.840
So that's what the requests
on 96 to 98 are for.

00:04:42.840 --> 00:04:45.110
Notice that the format is
identical as adding text

00:04:45.110 --> 00:04:47.720
to the text boxes,
like we did above.

00:04:47.720 --> 00:04:51.410
And then finally, on lines
100 to 102, send all 10

00:04:51.410 --> 00:04:54.230
of these requests in one
call to batch update.

00:04:54.230 --> 00:04:56.150
Then let the user know
everything's done.

00:04:56.150 --> 00:04:57.770
Let's double-check that.

00:04:57.770 --> 00:04:59.660
One, create slide.

00:04:59.660 --> 00:05:01.550
Three, insert text.

00:05:01.550 --> 00:05:04.910
1, 2, 3, create shape.

00:05:04.910 --> 00:05:08.390
And three more insert text
requests make 10 total.

00:05:08.390 --> 00:05:10.326
And that's it.

00:05:10.326 --> 00:05:11.950
Well, after you've
executed the script,

00:05:11.950 --> 00:05:14.470
confirm that you've got a new
presentation in your Drive

00:05:14.470 --> 00:05:17.530
folder that has a slide with the
text and shapes as advertised.

00:05:17.530 --> 00:05:19.780
So now you know how to add
text and shapes to slides,

00:05:19.780 --> 00:05:22.120
as well as how to
add text into shapes.

00:05:22.120 --> 00:05:24.340
If you want to take a closer
look at the Python code,

00:05:24.340 --> 00:05:26.366
check out the Deep
Dive blog post.

00:05:26.366 --> 00:05:28.240
Now that you know how
to add text and shapes,

00:05:28.240 --> 00:05:31.060
perhaps you want to explore
formatting that text.

00:05:31.060 --> 00:05:34.057
The first link takes you to
that blog post and video.

00:05:34.057 --> 00:05:36.640
Well, what if you have a bunch
of text placeholders in a slide

00:05:36.640 --> 00:05:38.770
template so you can generate
custom decks for each

00:05:38.770 --> 00:05:39.910
of your clients?

00:05:39.910 --> 00:05:42.760
Well, the second link points
you to that post and video.

00:05:42.760 --> 00:05:45.430
Finally, if you're brand
new to the Slides API,

00:05:45.430 --> 00:05:47.170
check out the overview
introducing you

00:05:47.170 --> 00:05:50.070
to the API basics concepts
that you need to know.

00:05:50.070 --> 00:05:51.820
If you're writing
applications to generate

00:05:51.820 --> 00:05:53.710
slide presentations,
there's a good chance

00:05:53.710 --> 00:05:54.779
you'll be adding text.

00:05:54.779 --> 00:05:56.320
But on the off-chance
you want to add

00:05:56.320 --> 00:05:59.941
shapes or text in shapes, you
now know how to do that, too.

00:05:59.941 --> 00:06:02.440
We're excited to share these
features from the Google Slides

00:06:02.440 --> 00:06:04.450
API with you and
invite you to check out

00:06:04.450 --> 00:06:06.640
more videos in our
library, whether for Slides

00:06:06.640 --> 00:06:09.052
or other Google APIs
and developer tools.

00:06:09.052 --> 00:06:10.510
Be sure to subscribe
to our channel

00:06:10.510 --> 00:06:13.030
to get the latest updates from
all of the Google Developers

00:06:13.030 --> 00:06:13.692
teams.

00:06:13.692 --> 00:06:16.150
This is Wesley Chun from Google,
and we'll see you upstairs

00:06:16.150 --> 00:06:16.806
in the G Suite.

00:06:21.180 --> 00:06:22.320
Hey, everyone.

00:06:22.320 --> 00:06:23.161
Thanks for watching.

00:06:23.161 --> 00:06:25.660
Check out these related videos,
and we'll see you next time.

00:06:25.660 --> 00:06:28.710
[MUSIC PLAYING]

