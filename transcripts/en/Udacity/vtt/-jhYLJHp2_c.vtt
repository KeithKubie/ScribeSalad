WEBVTT
Kind: captions
Language: en

00:00:00.140 --> 00:00:03.480
I left out a step that happens after projection and before division by W.

00:00:03.480 --> 00:00:08.400
Clipping. Say we have 2 points: 0, 4, negative 6 after perspective

00:00:08.400 --> 00:00:12.975
transformation that turns into 0, 4, 5, 6 and 0, 6, negative 4, which turns

00:00:12.975 --> 00:00:18.854
into this value. They form a line segment. These two points in this line

00:00:18.854 --> 00:00:22.902
segment are shown on this zoomed in part of our frustum. The second point is

00:00:22.902 --> 00:00:26.426
outside of the frustum. We want to have all coordinates inside our final view

00:00:26.426 --> 00:00:30.264
volume in NDC space so that we can render them. Clipping is done for line

00:00:30.264 --> 00:00:34.777
segments and triangle edges that poke out through the frustum. An edge can be

00:00:34.777 --> 00:00:38.306
clipped by any numbers of faces of the frustum. What happens here is that all

00:00:38.306 --> 00:00:41.778
the coordinates between the two points get linearly interpolated. For our

00:00:41.778 --> 00:00:46.312
example the point on the frustum faces halfway between our two points. The

00:00:46.312 --> 00:00:51.826
interpolated point is then 0, 5, 3.85. We then divide this point by W as usual

00:00:51.826 --> 00:00:55.730
to get a point in normalized device coordinates. Here's a rough overview of how

00:00:55.730 --> 00:00:59.260
clipping can work. You start with a triangle that's poking out through the

00:00:59.260 --> 00:01:03.092
frustum. Say the left face of the frustum first cuts the triangle. This creates

00:01:03.092 --> 00:01:06.760
two triangles. Later, the top face of the frustum chops off the other part of

00:01:06.760 --> 00:01:11.172
the triangle. This create three triangles total that will then be rasterized

00:01:11.172 --> 00:01:15.033
separately by the GPU. You as a user don't really have to know or care much

00:01:15.033 --> 00:01:19.403
about this clipping process. It happens automatically. It's worth knowing about

00:01:19.403 --> 00:01:23.088
mostly if you need to do similar testing operations on the CPU side. In

00:01:23.088 --> 00:01:26.328
computer graphics we often make a big deal about how we store 3D points in

00:01:26.328 --> 00:01:31.315
vectors as homogeneous coordinates, with the fourth element W. In reality, for

00:01:31.315 --> 00:01:34.383
almost every operation, the W value is either 0, meaning a vector, or 1,

00:01:34.383 --> 00:01:39.350
meaning a point. It's only after projection and during clipping that the W

00:01:39.350 --> 00:01:42.972
value is anything but 1. Once clipping is done and we're using normalized

00:01:42.972 --> 00:01:46.393
device coordinates, we're done with homogeneous coordinates. However, these

00:01:46.393 --> 00:01:49.099
homogeneous coordinates are important in that they're what the vertex shader

00:01:49.099 --> 00:01:53.250
produces. When the coordinate is transformed by the projection matrix, but

00:01:53.250 --> 00:01:57.510
before the division is performed, the coordinates are called clip coordinates.

00:01:57.510 --> 00:02:00.305
The vertex shader can produce other intermediate results, such as computing

00:02:00.305 --> 00:02:04.674
location once the model and view matrices are applied. It is required that the

00:02:04.674 --> 00:02:08.633
vertex shader produce a position on the screen for the vertex. This position is

00:02:08.633 --> 00:02:13.600
a homogeneous coordinate. The rasterizer then takes this position and performs

00:02:13.600 --> 00:02:14.869
clipping.

