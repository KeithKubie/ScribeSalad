WEBVTT
Kind: captions
Language: en

00:00:09.030 --> 00:00:10.740
ALEX MAIER: Hello, everybody
and welcome.

00:00:10.740 --> 00:00:12.300
My name is Alex Maier.

00:00:12.300 --> 00:00:15.310
I am the community manager for
Google Cloud Platform.

00:00:15.310 --> 00:00:18.130
And we're here today to talk
about getting started with the

00:00:18.130 --> 00:00:20.100
Google Cloud Platform.

00:00:20.100 --> 00:00:22.560
With me in the studio today
in Mountain View is Martin

00:00:22.560 --> 00:00:25.270
Omander, who will take you
through a brief introduction

00:00:25.270 --> 00:00:27.580
to how the Starter Pack works.

00:00:27.580 --> 00:00:30.240
And then we're going to switch
over to London where Mandy

00:00:30.240 --> 00:00:34.150
Waite is standing by to walk you
through the first steps to

00:00:34.150 --> 00:00:36.600
getting to your very
first Hello World.

00:00:36.600 --> 00:00:39.230
So Martin, good morning.

00:00:39.230 --> 00:00:40.580
MARTIN OMANDER: Good
morning, Alex.

00:00:40.580 --> 00:00:41.630
ALEX MAIER: How you doing?

00:00:41.630 --> 00:00:43.140
MARTIN OMANDER: It was an early
morning this morning,

00:00:43.140 --> 00:00:44.550
but I'm hanging in there.

00:00:44.550 --> 00:00:45.340
ALEX MAIER: All right.

00:00:45.340 --> 00:00:47.280
With enough coffee,
we can do it.

00:00:47.280 --> 00:00:50.110
So let's dive right into this.

00:00:50.110 --> 00:00:53.170
Can you tell us a little bit
about how the Cloud Platform

00:00:53.170 --> 00:00:54.390
Starter Pack works?

00:00:54.390 --> 00:00:55.770
MARTIN OMANDER: Sure, Alex.

00:00:55.770 --> 00:01:01.400
The Starter Pack gives
developers a $2,000 credit for

00:01:01.400 --> 00:01:04.390
the Cloud Platform, so you can
get started writing your

00:01:04.390 --> 00:01:07.490
applications and try
out the platform.

00:01:07.490 --> 00:01:09.270
So $2,000.

00:01:09.270 --> 00:01:14.630
$1,000 is on App Engine and
$1,000 on Compute Engine.

00:01:14.630 --> 00:01:18.240
And I know many of
you have already

00:01:18.240 --> 00:01:19.780
requested these credits.

00:01:19.780 --> 00:01:24.520
If you haven't yet, and you want
to request credits, you

00:01:24.520 --> 00:01:30.650
can go to
cloud.google.com/starterpack.

00:01:30.650 --> 00:01:31.910
Let me take that again.

00:01:31.910 --> 00:01:34.830
cloud.google.com/starterpack.

00:01:34.830 --> 00:01:36.320
It's early in the morning.

00:01:36.320 --> 00:01:40.110
And then you enter the
promo code GDLSP-IN.

00:01:45.050 --> 00:01:45.570
ALEX MAIER: All right.

00:01:45.570 --> 00:01:47.770
So I have my Starter Pack.

00:01:47.770 --> 00:01:49.470
I have the credits applied
to my account.

00:01:49.470 --> 00:01:50.710
Now what?

00:01:50.710 --> 00:01:51.050
MARTIN OMANDER: Yeah.

00:01:51.050 --> 00:01:55.280
So now once you've received an
email from us that the credits

00:01:55.280 --> 00:01:57.050
have been applied
in your account.

00:01:57.050 --> 00:01:59.370
You now have credits
in two buckets.

00:01:59.370 --> 00:02:02.890
You have the App Engine bucket
and the Compute Engine bucket.

00:02:02.890 --> 00:02:07.450
And as you use App Engine or
Compute Engine, these credits

00:02:07.450 --> 00:02:08.860
will be used up.

00:02:08.860 --> 00:02:12.160
And as long as you have credits
left in either of

00:02:12.160 --> 00:02:16.280
those two buckets, your bill
will look the same except that

00:02:16.280 --> 00:02:18.840
credits will be used
up rather than us

00:02:18.840 --> 00:02:20.550
charging your credit card.

00:02:20.550 --> 00:02:21.060
ALEX MAIER: All right.

00:02:21.060 --> 00:02:22.420
So where--

00:02:22.420 --> 00:02:25.780
how do I see how many
credits I got left?

00:02:25.780 --> 00:02:25.990
MARTIN OMANDER: Yeah.

00:02:25.990 --> 00:02:29.395
Unfortunately, there isn't a
good way of seeing exactly how

00:02:29.395 --> 00:02:30.340
many you have left.

00:02:30.340 --> 00:02:31.680
ALEX MAIER: Aw.

00:02:31.680 --> 00:02:32.100
MARTIN OMANDER: Yeah.

00:02:32.100 --> 00:02:32.820
Working on that.

00:02:32.820 --> 00:02:34.830
But--

00:02:34.830 --> 00:02:40.220
so first off, App Engine
has a free usage tier.

00:02:40.220 --> 00:02:43.030
So if you're only developing on
App Engine, chances are you

00:02:43.030 --> 00:02:47.930
won't use App Engine enough for
there even to be charges.

00:02:47.930 --> 00:02:52.210
Then for Compute Engine,
there's no free tier.

00:02:52.210 --> 00:02:56.290
But as you use App Engine, you
get real users on App Engine

00:02:56.290 --> 00:03:00.260
or use Compute Engine, you
will see your bills.

00:03:00.260 --> 00:03:04.510
You will see charges start to
add up, except you won't

00:03:04.510 --> 00:03:06.540
actually be charged yourself.

00:03:06.540 --> 00:03:11.000
And then the way to see how
much you have left--

00:03:11.000 --> 00:03:15.320
you have to take the $1,000 and
then subtract what you see

00:03:15.320 --> 00:03:16.290
on your bills.

00:03:16.290 --> 00:03:17.620
And that's how you
can calculate.

00:03:17.620 --> 00:03:20.020
And if all of this is confusing,
you can always

00:03:20.020 --> 00:03:21.725
email us at cloudplatformsta
rterpack@google.com.

00:03:26.966 --> 00:03:27.830
And we'll look it up.

00:03:27.830 --> 00:03:28.570
ALEX MAIER: All right.

00:03:28.570 --> 00:03:29.685
Did you guys get that?
cloudplatformsta

00:03:29.685 --> 00:03:34.160
rterpack@google.com if you have
any questions about how

00:03:34.160 --> 00:03:37.010
much money you got left in
your credit account.

00:03:37.010 --> 00:03:40.470
So what happens if I run out of
credits, because I'm using

00:03:40.470 --> 00:03:42.950
so much Google Cloud Platform?

00:03:42.950 --> 00:03:43.330
MARTIN OMANDER: Yeah.

00:03:43.330 --> 00:03:46.190
When you run out of credits,
then your credit card will

00:03:46.190 --> 00:03:48.660
start to get charged,
just like a normal

00:03:48.660 --> 00:03:50.240
account at that point.

00:03:50.240 --> 00:03:53.630
So you want to make sure you
use best development

00:03:53.630 --> 00:03:59.390
practices, so that you preserve
your credits and your

00:03:59.390 --> 00:04:01.220
money later on.

00:04:01.220 --> 00:04:04.670
And we have plenty of
documentation on that in the

00:04:04.670 --> 00:04:07.800
App Engine docs and in the
Compute Engine docs.

00:04:07.800 --> 00:04:11.290
And maybe we'll hear some of
those best practices from

00:04:11.290 --> 00:04:12.980
Mandy as well.

00:04:12.980 --> 00:04:13.350
ALEX MAIER: Cool.

00:04:13.350 --> 00:04:14.020
Thank you, Martin.

00:04:14.020 --> 00:04:16.750
So guys, if you're listening,
and you have questions about

00:04:16.750 --> 00:04:20.990
Starter Pack or using up your
credits, you can ask them in

00:04:20.990 --> 00:04:22.570
the moderator box below.

00:04:22.570 --> 00:04:25.950
And we're going to address the
questions at the end of this

00:04:25.950 --> 00:04:27.680
streaming event.

00:04:27.680 --> 00:04:31.020
But now, we're going to switch
to our London studio, where we

00:04:31.020 --> 00:04:33.280
have Mandy Waite standing by.

00:04:33.280 --> 00:04:34.588
Hi, Mandy.

00:04:34.588 --> 00:04:35.476
MANDY WAITE: Hi, Alex.

00:04:35.476 --> 00:04:35.920
How are you doing?

00:04:35.920 --> 00:04:37.060
ALEX MAIER: I'm doing
very well.

00:04:37.060 --> 00:04:37.370
Thank you.

00:04:37.370 --> 00:04:38.876
How are you?

00:04:38.876 --> 00:04:39.722
MANDY WAITE: I'm very
good today.

00:04:39.722 --> 00:04:40.570
Thank you.

00:04:40.570 --> 00:04:43.090
ALEX MAIER: So Mandy Waite is
a developer advocate for

00:04:43.090 --> 00:04:44.660
Google Cloud Platform.

00:04:44.660 --> 00:04:48.830
And she's going to walk us
through the steps to get from

00:04:48.830 --> 00:04:53.080
zero to Hello World on Google
App Engine first.

00:04:53.080 --> 00:04:54.930
Take it away.

00:04:54.930 --> 00:04:55.825
MANDY WAITE: Thanks, Alex.

00:04:55.825 --> 00:04:56.190
That's great.

00:04:56.190 --> 00:04:56.350
OK.

00:04:56.350 --> 00:04:57.582
So what I'm going to do--

00:04:57.582 --> 00:05:00.230
I'm going to share my screen in
the Hangout and hope that

00:05:00.230 --> 00:05:04.170
we'll have no technical
abnormalities that occur.

00:05:04.170 --> 00:05:06.720
Hopefully, I can still see you
rather well, so while I'm

00:05:06.720 --> 00:05:09.595
speaking and going through the
steps to getting started.

00:05:09.595 --> 00:05:13.590
If anything abnormal occurs,
please wave at me.

00:05:13.590 --> 00:05:15.105
So I'm going to share
my screen right now.

00:05:19.855 --> 00:05:22.720
MARTIN OMANDER: And we're
not seeing the screen.

00:05:22.720 --> 00:05:24.770
ALEX MAIER: We're not seeing
the screen yet.

00:05:24.770 --> 00:05:26.608
There it is.

00:05:26.608 --> 00:05:27.460
MARTIN OMANDER: Great.

00:05:27.460 --> 00:05:28.195
MANDY WAITE: All righty then.

00:05:28.195 --> 00:05:30.050
So can you guys hear me?

00:05:30.050 --> 00:05:30.900
ALEX MAIER: We can.

00:05:30.900 --> 00:05:32.080
MARTIN OMANDER: We're
seeing the Hangout.

00:05:32.080 --> 00:05:33.580
ALEX MAIER: We're seeing
your Hangout, not

00:05:33.580 --> 00:05:35.470
yet the demo window.

00:05:35.470 --> 00:05:35.790
MANDY WAITE: OK.

00:05:35.790 --> 00:05:36.570
That's fine.

00:05:36.570 --> 00:05:39.030
I'm sharing my desktop currently
because we have

00:05:39.030 --> 00:05:40.070
multiple windows to use.

00:05:40.070 --> 00:05:44.740
So I'm going to switch over to a
terminal window just to make

00:05:44.740 --> 00:05:46.480
sure that clears correctly.

00:05:46.480 --> 00:05:47.040
That's great.

00:05:47.040 --> 00:05:47.630
OK.

00:05:47.630 --> 00:05:50.230
So I won't be coming back to
this screen very often.

00:05:50.230 --> 00:05:55.570
But I will be using various
aspects of my desktop.

00:05:55.570 --> 00:06:00.600
So to begin, most of the time
when you're working with App

00:06:00.600 --> 00:06:02.696
Engine, you'll be
writing code.

00:06:02.696 --> 00:06:05.320
There's a little bit of
stuff you have to do.

00:06:05.320 --> 00:06:08.660
You do need to install the App
Engine SDK to begin with.

00:06:08.660 --> 00:06:10.352
So let's do that first.

00:06:10.352 --> 00:06:13.200
Now the App Engine SDK can
be downloaded from

00:06:13.200 --> 00:06:23.450
developers.googl
e.com/appengine/downloads

00:06:23.450 --> 00:06:26.750
So for this demonstration, we're
going to use Python.

00:06:26.750 --> 00:06:30.430
This download page offers
a variety of options for

00:06:30.430 --> 00:06:32.970
download of SDKs, different
program managers that would

00:06:32.970 --> 00:06:36.784
support from App Engine, PHP,
Python, Java and Go and also

00:06:36.784 --> 00:06:38.430
for different platforms.

00:06:38.430 --> 00:06:41.720
So let's scroll down the list
of options we have.

00:06:41.720 --> 00:06:44.480
So first we have Google App
Engine SDK for PHP.

00:06:44.480 --> 00:06:48.756
PHP runtime is an experimental
feature in App Engine, and

00:06:48.756 --> 00:06:50.310
it's currently limited
preview.

00:06:50.310 --> 00:06:52.280
So in order to be able to use
it, you have to sign up.

00:06:52.280 --> 00:06:54.500
So I'm going to skip
past that.

00:06:54.500 --> 00:06:58.060
The next option is the Google
App Engine SDK for Python.

00:06:58.060 --> 00:07:00.760
And we have three options
here, three different

00:07:00.760 --> 00:07:02.850
platforms, one for Windows,
one for Mac OS X, and the

00:07:02.850 --> 00:07:06.540
other one for Linux and
other Unix platforms.

00:07:06.540 --> 00:07:07.610
Next, we have Java.

00:07:07.610 --> 00:07:10.190
And the Java SDK is a
Java application.

00:07:10.190 --> 00:07:13.740
And it requires JDK 7 in
order to terminate.

00:07:13.740 --> 00:07:17.140
But that means you can manage
on platform support as well.

00:07:17.140 --> 00:07:20.510
And the Google App Engine SDK
for Go supports three

00:07:20.510 --> 00:07:21.010
platforms--

00:07:21.010 --> 00:07:25.890
Linux, Mac OS, Windows, and 64
and 32-bit versions of those.

00:07:25.890 --> 00:07:29.270
We're going to be focusing on
development for Python today.

00:07:29.270 --> 00:07:32.535
So I'm going to-- well, I've
already downloaded the Google

00:07:32.535 --> 00:07:38.200
App Engine launcher, which is
what the SDK is called for

00:07:38.200 --> 00:07:39.600
some strange reason.

00:07:39.600 --> 00:07:42.820
And it could take several
minutes to download.

00:07:42.820 --> 00:07:44.590
So I've downloaded it already.

00:07:44.590 --> 00:07:50.770
Once it's downloaded, you'll see
the image will be mounted.

00:07:50.770 --> 00:07:54.390
And you will be shown the Google
App Engine Manager.

00:07:54.390 --> 00:07:56.180
We can then drag that App
Engine Manager to our

00:07:56.180 --> 00:07:59.000
Applications folder
on the Mac OS.

00:07:59.000 --> 00:08:03.380
And we can then initially launch
the Google App Engine

00:08:03.380 --> 00:08:04.640
Manager from the Applications
folder.

00:08:07.640 --> 00:08:09.725
What we're going to be doing
mostly is working with command

00:08:09.725 --> 00:08:10.200
line though.

00:08:10.200 --> 00:08:14.150
So we don't need to worry too
much about the App Manager

00:08:14.150 --> 00:08:14.800
application.

00:08:14.800 --> 00:08:17.428
But I want to show it to you
anyway because on Mac OS we

00:08:17.428 --> 00:08:20.585
have some interesting paths,
where these tools, these

00:08:20.585 --> 00:08:23.830
command line tools
are installed to.

00:08:23.830 --> 00:08:26.140
The App Engine Manager can
actually help us make those

00:08:26.140 --> 00:08:27.500
more accessible.

00:08:27.500 --> 00:08:31.810
So when you install the Google
App Engine Manager, it prompts

00:08:31.810 --> 00:08:36.332
you to install symbolic
links to the various

00:08:36.332 --> 00:08:37.620
command line tools.

00:08:37.620 --> 00:08:41.590
If you've ignored that step and
then skipped past it, then

00:08:41.590 --> 00:08:43.919
you might want to go and do it
at some point because it makes

00:08:43.919 --> 00:08:46.170
it much easier to get
access to the tools.

00:08:46.170 --> 00:08:50.935
And in order to do it, go to
Google App Engine Manager, and

00:08:50.935 --> 00:08:55.140
the Menu Items and select
Make Symlinks.

00:08:55.140 --> 00:08:58.250
The App Engine Launcher can
be used to deploy your

00:08:58.250 --> 00:09:00.430
applications to App Engine and
to also run them locally on

00:09:00.430 --> 00:09:01.950
your local machine.

00:09:01.950 --> 00:09:03.390
App Engine comes with
a development

00:09:03.390 --> 00:09:04.525
server which forms locally.

00:09:04.525 --> 00:09:06.240
And we're going to talk more
about that and actually show

00:09:06.240 --> 00:09:08.730
you that run-through shortly.

00:09:08.730 --> 00:09:10.435
So that's the last time we're
actually going to use the

00:09:10.435 --> 00:09:12.700
Google App Engine launcher.

00:09:12.700 --> 00:09:15.190
On Windows, things are
pretty much the same.

00:09:15.190 --> 00:09:17.590
Once you've installed the
application, the SDK

00:09:17.590 --> 00:09:21.330
application from its installer,
all of the command

00:09:21.330 --> 00:09:24.250
line utilities will be available
in the path for you.

00:09:24.250 --> 00:09:27.570
And for Linux or other Unix
systems, you'll untar the

00:09:27.570 --> 00:09:30.100
tarball distribution
of the SDK.

00:09:30.100 --> 00:09:34.310
And then you'll have to add
manually the paths to those

00:09:34.310 --> 00:09:43.560
command line tools to your
environment path.

00:09:47.560 --> 00:09:52.600
So next step we're going to
do is develop some code.

00:09:52.600 --> 00:09:54.170
And this is fairly
straightforward.

00:09:54.170 --> 00:09:57.850
We're going to cd into my
Hello World directory.

00:09:57.850 --> 00:10:00.060
This is a very simple
application.

00:10:00.060 --> 00:10:02.600
It just prints Hello World
out in the web browser.

00:10:02.600 --> 00:10:05.983
And the first thing we're going
to look at is the actual

00:10:05.983 --> 00:10:06.670
code itself.

00:10:06.670 --> 00:10:07.900
And this is platform code.

00:10:07.900 --> 00:10:10.450
And if I can get it in advanced,
it makes it easier

00:10:10.450 --> 00:10:14.420
to actually manage
the screen cast.

00:10:14.420 --> 00:10:15.130
So the code is pretty simple.

00:10:15.130 --> 00:10:16.970
There's not many lines
of code here.

00:10:16.970 --> 00:10:20.880
The first thing to do is import
webapp2, which is the

00:10:20.880 --> 00:10:24.440
simple WSDL web application
framework.

00:10:24.440 --> 00:10:27.840
We're going to need that to do
the rest of the commands in

00:10:27.840 --> 00:10:30.160
this particular Python script.

00:10:30.160 --> 00:10:32.330
Then we have to create
a class.

00:10:32.330 --> 00:10:33.890
This is going to be
an instance of a

00:10:33.890 --> 00:10:35.650
webapp2 request handler.

00:10:35.650 --> 00:10:36.660
We can call it anything
we like.

00:10:36.660 --> 00:10:38.700
In this case, we call
it main page.

00:10:38.700 --> 00:10:42.340
But it must implement the
webapp2 request handler.

00:10:42.340 --> 00:10:43.580
Another request handler.

00:10:43.580 --> 00:10:47.080
Its responsibility is to process
incoming requests.

00:10:47.080 --> 00:10:50.760
And we have to provide methods
for the various HTTP methods.

00:10:50.760 --> 00:10:53.620
In this case, we've
implemented get.

00:10:53.620 --> 00:10:55.160
That's a very simple method.

00:10:55.160 --> 00:10:56.560
It has two lines of code.

00:10:56.560 --> 00:10:59.940
One is second headers on
the response stream.

00:10:59.940 --> 00:11:03.940
That sets the content type
header out to the text plane.

00:11:03.940 --> 00:11:05.503
And we're actually going to
write HTML code here.

00:11:05.503 --> 00:11:08.570
We're going to put some plain
text straight to the browser.

00:11:08.570 --> 00:11:11.160
And the second command actually
writes Hello World,

00:11:11.160 --> 00:11:13.640
exclamation mark, to the
response stream.

00:11:13.640 --> 00:11:16.276
And that's pretty much all
the application code.

00:11:16.276 --> 00:11:19.280
The last thing we have to do is
actually declare this as a

00:11:19.280 --> 00:11:21.320
WSDL application.

00:11:21.320 --> 00:11:22.910
And we're going to call
it application.

00:11:22.910 --> 00:11:23.960
We could call it anything.

00:11:23.960 --> 00:11:28.410
But we do have to use that name
consistently throughout

00:11:28.410 --> 00:11:30.250
the application development.

00:11:30.250 --> 00:11:35.600
And the WSDL application
basically maps a URL path to

00:11:35.600 --> 00:11:36.770
this request handler.

00:11:36.770 --> 00:11:40.780
In this case, it's mapping the
URL path slash to main page,

00:11:40.780 --> 00:11:42.476
which is the class that
we created earlier.

00:11:45.350 --> 00:11:47.650
So that's the actual
Python code.

00:11:47.650 --> 00:11:50.580
There's also another bit
of code we need to do.

00:11:50.580 --> 00:11:52.440
It's basically a configuration
file.

00:11:52.440 --> 00:11:54.620
And it's called app.yaml.

00:11:54.620 --> 00:11:59.020
And app.yaml is the key to all
App Engine applications.

00:11:59.020 --> 00:12:01.200
And it's what App Engine
requires to actually

00:12:01.200 --> 00:12:02.940
understand your application.

00:12:02.940 --> 00:12:06.580
So we're going to actually edit
the one we have already

00:12:06.580 --> 00:12:08.648
created earlier.

00:12:08.648 --> 00:12:12.370
So basically, this file,
app.yaml, will inform the App

00:12:12.370 --> 00:12:15.190
Engine runtime about your
application, provide some

00:12:15.190 --> 00:12:19.200
information about your
application and how to handle

00:12:19.200 --> 00:12:22.710
requests that come into
that application.

00:12:22.710 --> 00:12:25.090
The first thing we have to
do is provide a name, an

00:12:25.090 --> 00:12:26.350
application name.

00:12:26.350 --> 00:12:29.850
So this is the application
domain.

00:12:29.850 --> 00:12:33.800
And in this case, we've called
it Hobbit-Frog-123.

00:12:33.800 --> 00:12:36.010
Now the reason this is a
complicated name is because

00:12:36.010 --> 00:12:38.630
this is the actual application
name we're going to want to

00:12:38.630 --> 00:12:40.120
refer to later in App Engine.

00:12:40.120 --> 00:12:41.760
And these have to be unique.

00:12:41.760 --> 00:12:44.520
So I've chosen an
arbitrary name.

00:12:44.520 --> 00:12:46.610
But in App Engine, you can
actually give it some title

00:12:46.610 --> 00:12:49.260
that's meaningful to you.

00:12:49.260 --> 00:12:52.240
So while you're running in the
development environment, it's

00:12:52.240 --> 00:12:54.382
actually possible to use
any kind of name here.

00:12:54.382 --> 00:12:56.140
But for consistency, let's
make things simple.

00:12:56.140 --> 00:12:59.880
I've used the application name
we're going to deploy to.

00:12:59.880 --> 00:13:01.380
You also have to provide
a version

00:13:01.380 --> 00:13:03.350
number or version string.

00:13:03.350 --> 00:13:04.630
This doesn't have
to be a number.

00:13:04.630 --> 00:13:06.490
In this case, we're in
the same version 1.

00:13:06.490 --> 00:13:09.730
But it could be version
demo, version test.

00:13:09.730 --> 00:13:12.443
You also have to specify the
runtime you want to use within

00:13:12.443 --> 00:13:13.250
App Engine.

00:13:13.250 --> 00:13:14.820
And of course, this is
a Python application.

00:13:14.820 --> 00:13:16.385
So we're using Python 2.7.

00:13:16.385 --> 00:13:18.635
Now there's also a Python
option, which

00:13:18.635 --> 00:13:20.751
maps to Python 2.5.

00:13:20.751 --> 00:13:23.780
But that's been deprecated,
and we shouldn't use it.

00:13:23.780 --> 00:13:26.210
The API version is generally
always one.

00:13:26.210 --> 00:13:28.355
So you can consider this pretty
much to be boilerplate

00:13:28.355 --> 00:13:30.520
code, unless instructed
otherwise.

00:13:30.520 --> 00:13:33.170
And finally, we have to tell App
Engine if the applications

00:13:33.170 --> 00:13:34.990
is thread-safe or not.

00:13:34.990 --> 00:13:37.725
And what this allows App Engine
to do is to basically

00:13:37.725 --> 00:13:40.410
use one single instance of the
application to serve as

00:13:40.410 --> 00:13:43.080
multiple requests
simultaneously.

00:13:43.080 --> 00:13:45.740
If your application is not
thread-safe, you need to make

00:13:45.740 --> 00:13:47.170
sure this is set to false.

00:13:47.170 --> 00:13:50.240
Then App Engine will make sure
that only one request is being

00:13:50.240 --> 00:13:54.550
served by an instance
at any given time.

00:13:54.550 --> 00:13:57.980
One of the most important parts
of this configuration

00:13:57.980 --> 00:14:01.720
file is the mapping of URL
paths to handlers.

00:14:01.720 --> 00:14:05.010
And that only appears in
the Handler section.

00:14:05.010 --> 00:14:07.250
Here, we're mapping a
URL path, which is a

00:14:07.250 --> 00:14:08.870
complete wild card.

00:14:08.870 --> 00:14:12.350
We can map any path to
a script, which is

00:14:12.350 --> 00:14:14.210
helloworld.application.

00:14:14.210 --> 00:14:16.380
And this, effectively, is the
Hello World module that we

00:14:16.380 --> 00:14:19.930
created for an application
as we saw in the

00:14:19.930 --> 00:14:21.316
helloworld.qr file.

00:14:25.510 --> 00:14:27.380
So that's basically what we
need for an App Engine

00:14:27.380 --> 00:14:29.997
application, two basic files.

00:14:34.790 --> 00:14:36.670
So next thing we're going to do,
we'll actually want to run

00:14:36.670 --> 00:14:38.100
that application.

00:14:38.100 --> 00:14:38.995
We want to run it locally.

00:14:38.995 --> 00:14:41.730
We'll test it and see if it
works correctly before

00:14:41.730 --> 00:14:43.410
actually deploying
it to App Engine.

00:14:43.410 --> 00:14:45.300
So this is fairly
straightforward.

00:14:45.300 --> 00:14:48.820
Having installed the SDK and
going through the steps to

00:14:48.820 --> 00:14:52.820
create Symlinks using the App
Engine Launcher, we should

00:14:52.820 --> 00:14:55.240
have access to those commands
in the path.

00:14:55.240 --> 00:14:58.010
And in this case, I'm going
to use a command called

00:14:58.010 --> 00:14:59.610
devappserver.py.

00:14:59.610 --> 00:15:01.690
And this has a bunch
of options.

00:15:01.690 --> 00:15:04.850
But we're going to use a very
simple command line syntax,

00:15:04.850 --> 00:15:08.620
which basically just requires
that we pass in the directory

00:15:08.620 --> 00:15:12.380
or folder where the output YAML
file that belongs to the

00:15:12.380 --> 00:15:13.710
application lives.

00:15:13.710 --> 00:15:15.380
And in this case, we're in
that directory already.

00:15:15.380 --> 00:15:18.830
So we can just say,
devappserver.py.

00:15:18.830 --> 00:15:20.730
But that could be some arbitrary
path somewhere else

00:15:20.730 --> 00:15:21.980
in the file system.

00:15:23.930 --> 00:15:30.220
So the development environment
is very conscientious.

00:15:30.220 --> 00:15:32.550
It wants to know even once to
actually check for updates

00:15:32.550 --> 00:15:33.605
when we start up.

00:15:33.605 --> 00:15:35.290
We're going to say yes
because we want to

00:15:35.290 --> 00:15:36.360
keep up with updates.

00:15:36.360 --> 00:15:41.600
App Engine tends to update
about once a month.

00:15:41.600 --> 00:15:44.100
So now we've started our
development environment.

00:15:44.100 --> 00:15:47.620
That will be laying on port
8080 on our local machine.

00:15:47.620 --> 00:15:51.558
So let's go have a check there
and see if everything works as

00:15:51.558 --> 00:15:52.808
we hoped it will.

00:15:56.567 --> 00:15:58.405
Ah, so nginx is running.

00:15:58.405 --> 00:16:00.985
Hold on.

00:16:00.985 --> 00:16:02.500
I thought I closed nginx.

00:16:17.890 --> 00:16:21.580
So I seem to have a problem with
my Mac where nginx seems

00:16:21.580 --> 00:16:22.920
to start up on its own.

00:16:22.920 --> 00:16:25.260
It seems to go away.

00:16:25.260 --> 00:16:28.040
As soon as you remove it, it
seems to fire up again.

00:16:28.040 --> 00:16:30.110
So we've actually basically
mapped the port we're going to

00:16:30.110 --> 00:16:33.000
use for our DevApp server.

00:16:33.000 --> 00:16:35.100
It should be 9090
instead of 8080.

00:16:35.100 --> 00:16:36.410
So hopefully, that
will solve that

00:16:36.410 --> 00:16:38.720
particular problem for us.

00:16:38.720 --> 00:16:40.250
And there we are, Hello World.

00:16:40.250 --> 00:16:43.190
So we've successfully developed
a very, very simple

00:16:43.190 --> 00:16:45.800
Python application.

00:16:45.800 --> 00:16:48.180
One great thing about doing
it this way with the local

00:16:48.180 --> 00:16:50.330
development environment is
that we can iteratively

00:16:50.330 --> 00:16:51.980
develop our applications.

00:16:51.980 --> 00:16:54.460
And I'll give you a quick
example of that.

00:16:54.460 --> 00:16:56.510
If I create a new shell
window here.

00:16:59.930 --> 00:17:06.339
I will cd into our Hello World
directory where our files are.

00:17:06.339 --> 00:17:09.062
And I will modify the
Python script.

00:17:09.062 --> 00:17:12.980
We'll change the message
to be something

00:17:12.980 --> 00:17:14.230
a little bit different.

00:17:17.589 --> 00:17:18.960
So now I'll change the script.

00:17:18.960 --> 00:17:22.710
And we go back to our web
browser, refresh the screen.

00:17:22.710 --> 00:17:25.089
And we see that that's
instantly updated.

00:17:25.089 --> 00:17:27.520
Now what we can do is
iteratively develop our

00:17:27.520 --> 00:17:31.210
application, make changes, and
see them instantly reflected

00:17:31.210 --> 00:17:34.190
in the development
environment.

00:17:34.190 --> 00:17:39.155
And that really allows for very,
very agile testing in

00:17:39.155 --> 00:17:41.670
development work.

00:17:41.670 --> 00:17:43.450
So once we've actually made
all the changes we need to

00:17:43.450 --> 00:17:46.490
make to our application, we want
to deploy to App Engine.

00:17:46.490 --> 00:17:48.170
Currently, it's running
on our local machine.

00:17:48.170 --> 00:17:50.970
We want to deploy
to App Engine.

00:17:50.970 --> 00:17:53.195
So the first thing we're going
to need to do is go to the App

00:17:53.195 --> 00:17:55.570
Engine console.

00:17:55.570 --> 00:17:57.930
And the App Engine console
is located at

00:17:57.930 --> 00:17:59.180
appengine.google.com.

00:18:02.410 --> 00:18:05.025
And what you see when you visit
appengine.google.com--

00:18:05.025 --> 00:18:06.300
it'll probably depend
on what user you've

00:18:06.300 --> 00:18:08.690
logged into Google Apps.

00:18:08.690 --> 00:18:11.880
Each user that's signed up for
App Engine will see a list of

00:18:11.880 --> 00:18:14.250
the applications that they own,
that they've actually

00:18:14.250 --> 00:18:17.020
created, and the applications
they've been given

00:18:17.020 --> 00:18:18.190
permission to run.

00:18:18.190 --> 00:18:20.630
In this case, we see two
applications, including the

00:18:20.630 --> 00:18:23.300
applications I created
earlier, one called

00:18:23.300 --> 00:18:27.570
Hobbit-Frog-123, which
is the application I

00:18:27.570 --> 00:18:28.880
want to deploy to.

00:18:28.880 --> 00:18:32.760
And that's actually called
credits amount.

00:18:32.760 --> 00:18:35.030
When you click on create
application for the first time

00:18:35.030 --> 00:18:39.140
when you visit this page, you
will probably be prompted to

00:18:39.140 --> 00:18:44.380
verify your identity by an SMS
message or voice call.

00:18:44.380 --> 00:18:46.360
Create an Applications, fairly
straightforward.

00:18:46.360 --> 00:18:48.770
You provide a unique application
identifier, if

00:18:48.770 --> 00:18:50.710
you're using the appspot.com.

00:18:50.710 --> 00:18:53.230
You do have the option to use
a Google Apps name, in which

00:18:53.230 --> 00:18:56.230
case you can use any
name that's unique

00:18:56.230 --> 00:18:58.620
in your app's name.

00:18:58.620 --> 00:19:02.870
And you also have to provide
an application title.

00:19:02.870 --> 00:19:04.070
Authentication options--

00:19:04.070 --> 00:19:05.670
we're not going to actually
create an account here.

00:19:05.670 --> 00:19:07.220
But we have various options.

00:19:07.220 --> 00:19:09.260
And you can click on learn more
in the screen to find out

00:19:09.260 --> 00:19:11.760
more about those options.

00:19:11.760 --> 00:19:13.206
We've already created our
applications, so we don't need

00:19:13.206 --> 00:19:15.510
to worry about that
particular step.

00:19:15.510 --> 00:19:20.100
So Hobbit-Frog-123 is the name
of our application, and that

00:19:20.100 --> 00:19:24.940
is unique in the appspot.com
namespace.

00:19:24.940 --> 00:19:26.310
So let's shut down
our development

00:19:26.310 --> 00:19:28.810
server, Control C that.

00:19:28.810 --> 00:19:32.120
And now we want to deploy the
application to App Engine.

00:19:32.120 --> 00:19:34.770
And to do that, we use another
command, another utility

00:19:34.770 --> 00:19:39.670
command called appcfg.py.

00:19:39.670 --> 00:19:42.920
And appcfg.py has various
functions.

00:19:42.920 --> 00:19:46.990
It performs all of the options
for deploying your application

00:19:46.990 --> 00:19:47.880
to App Engine.

00:19:47.880 --> 00:19:50.520
And then it can make management
features as well.

00:19:50.520 --> 00:19:52.180
So it's quite a powerful tool.

00:19:52.180 --> 00:19:55.140
We're going to use it very
simply to update our

00:19:55.140 --> 00:19:56.170
application.

00:19:56.170 --> 00:19:57.720
We haven't actually
installed it yet.

00:19:57.720 --> 00:19:59.230
But we use the update command.

00:19:59.230 --> 00:20:03.280
And we have to provide the path
to the directory that

00:20:03.280 --> 00:20:04.860
contains the app.yaml file.

00:20:04.860 --> 00:20:06.608
And again, that's the same
path that we have now.

00:20:09.410 --> 00:20:14.020
So appfg.py update dot.

00:20:14.020 --> 00:20:15.270
Hit Return on that.

00:20:17.380 --> 00:20:21.370
So this is the first time I've
deployed this application.

00:20:21.370 --> 00:20:23.390
And this is maybe the first time
I've used App Engine on

00:20:23.390 --> 00:20:24.740
this particular machine.

00:20:24.740 --> 00:20:27.430
And it's going to prompt
me for my credentials.

00:20:27.430 --> 00:20:30.405
In this case, it's going to
prompt me for my email address

00:20:30.405 --> 00:20:32.070
and my password.

00:20:32.070 --> 00:20:35.010
If I had two factor
authentications set up on this

00:20:35.010 --> 00:20:37.615
account, I could also provide
an application specific

00:20:37.615 --> 00:20:40.810
password instead of my
actual password.

00:20:40.810 --> 00:20:43.100
There's also another option
as well, which is to use

00:20:43.100 --> 00:20:46.220
minus, minus 002.

00:20:46.220 --> 00:20:51.900
And this is the mechanism I
would recommend you to use

00:20:51.900 --> 00:20:56.170
because this performs a
[INAUDIBLE] flow, will pop up

00:20:56.170 --> 00:21:00.720
the browser, and display an
acceptance dialog box to

00:21:00.720 --> 00:21:04.390
accept what permissions
appcfg.py is requesting.

00:21:04.390 --> 00:21:06.260
And that's the best way
to authenticate.

00:21:06.260 --> 00:21:08.535
But for the simplest form, it's
basically just providing

00:21:08.535 --> 00:21:10.638
your email and password,
which we'll do now.

00:21:24.980 --> 00:21:27.780
And so now it looks for files
in the directory where the

00:21:27.780 --> 00:21:28.550
app.yaml is.

00:21:28.550 --> 00:21:32.106
It reads the app.yaml and it
basically uploads and moves

00:21:32.106 --> 00:21:34.420
the files to App Engine.

00:21:34.420 --> 00:21:37.070
Then it checks to see if the
deployment was successful.

00:21:37.070 --> 00:21:39.800
Then it checks that the app
version is actually certain.

00:21:39.800 --> 00:21:41.620
Once it's performed those
checks, it'll come back to us

00:21:41.620 --> 00:21:45.200
and say the application's
been updated.

00:21:45.200 --> 00:21:49.800
Now we should be able to go to
that application and actually

00:21:49.800 --> 00:21:50.486
see it running.

00:21:50.486 --> 00:21:52.560
So let's try that.

00:21:52.560 --> 00:21:59.200
So using the Google App Engine
admin console, we can actually

00:21:59.200 --> 00:22:02.440
go straight to our application
by checking on the link at the

00:22:02.440 --> 00:22:06.790
very end in the last column
after the status column.

00:22:06.790 --> 00:22:07.500
There we are.

00:22:07.500 --> 00:22:07.980
Hello, Mandy.

00:22:07.980 --> 00:22:09.210
It's been deployed.

00:22:09.210 --> 00:22:09.700
ALEX MAIER: Wonderful.

00:22:09.700 --> 00:22:11.835
MANDY WAITE: And that's pretty
much what you need to do to

00:22:11.835 --> 00:22:14.120
get started with App Engine.

00:22:14.120 --> 00:22:14.570
ALEX MAIER: Cool.

00:22:14.570 --> 00:22:15.590
Thank you so much, Mandy.

00:22:15.590 --> 00:22:19.140
This is really cool and pretty
easy to follow even for me.

00:22:19.140 --> 00:22:21.200
And I'm kind of new to this.

00:22:21.200 --> 00:22:24.570
Now if I wanted to add Compute
Engine to the mix, what do you

00:22:24.570 --> 00:22:26.412
suggest I do?

00:22:26.412 --> 00:22:28.312
MANDY WAITE: Well, so I'm going
to have to go and turn

00:22:28.312 --> 00:22:30.350
the lights on in the studio
because the light's turned off

00:22:30.350 --> 00:22:31.180
now while I was doing
the demo.

00:22:31.180 --> 00:22:35.140
So if you'll bear with me--
this is really live, guys.

00:22:35.140 --> 00:22:38.070
I'm going to go and turn
the lights on.

00:22:38.070 --> 00:22:39.360
ALEX MAIER: All right.

00:22:39.360 --> 00:22:41.780
While we wait for Mandy--

00:22:41.780 --> 00:22:42.290
All right.

00:22:42.290 --> 00:22:42.800
She's back.

00:22:42.800 --> 00:22:44.880
That was quick.

00:22:44.880 --> 00:22:47.750
MANDY WAITE: So basically,
I wasn't moving enough.

00:22:47.750 --> 00:22:51.350
If I'd been moving enough, the
lights would have stayed on.

00:22:51.350 --> 00:22:51.660
OK.

00:22:51.660 --> 00:22:53.310
So what was your question
again, Alex?

00:22:53.310 --> 00:22:55.230
ALEX MAIER: So what would you
do if you wanted to add

00:22:55.230 --> 00:22:58.670
Compute Engine to this since
we have credits for both?

00:22:58.670 --> 00:23:00.440
Gotta burn them.

00:23:00.440 --> 00:23:01.030
MANDY WAITE: Exactly.

00:23:01.030 --> 00:23:02.680
Gotta burn them.

00:23:02.680 --> 00:23:04.325
Well, Compute Engine's a
little bit different.

00:23:04.325 --> 00:23:05.875
It doesn't serve applications.

00:23:05.875 --> 00:23:09.680
It doesn't serve webapps the
way App Engine does.

00:23:09.680 --> 00:23:12.790
So we have to work it a
little bit different.

00:23:12.790 --> 00:23:16.170
But it's pretty much as simple
as it was with App Engine.

00:23:16.170 --> 00:23:17.700
So let's go through
that process now.

00:23:17.700 --> 00:23:20.400
I'll share my screen
again with you.

00:23:20.400 --> 00:23:22.015
Fingers crossed, everything's
going to go smoothly

00:23:22.015 --> 00:23:23.265
this time as well.

00:23:32.240 --> 00:23:35.200
ALEX MAIER: There you go.

00:23:35.200 --> 00:23:35.660
MANDY WAITE: Yes.

00:23:35.660 --> 00:23:36.310
There you go indeed.

00:23:36.310 --> 00:23:36.580
OK.

00:23:36.580 --> 00:23:40.180
So I'm going to switch to a
different browser this time

00:23:40.180 --> 00:23:43.910
because I'm logged into two
different accounts.

00:23:43.910 --> 00:23:46.690
The first thing you need to do
in order to get started with

00:23:46.690 --> 00:23:50.150
Compute Engine is to download
its powerful

00:23:50.150 --> 00:23:52.212
utility called gcutil.

00:23:52.212 --> 00:23:54.250
And that's what we're
going to do first.

00:23:54.250 --> 00:23:58.160
So let's go to the
developers.com page that

00:23:58.160 --> 00:24:01.190
actually hosts that.

00:24:01.190 --> 00:24:01.650
Oh, look.

00:24:01.650 --> 00:24:03.060
It's already in my path.

00:24:03.060 --> 00:24:09.166
So developers.googl
e.com/compute/docs/gcutil is

00:24:09.166 --> 00:24:10.420
the path that you need.

00:24:10.420 --> 00:24:13.210
And we'll put all of these links
in the comments for the

00:24:13.210 --> 00:24:14.460
YouTube video when we post it.

00:24:18.550 --> 00:24:19.880
We'll go to that page.

00:24:19.880 --> 00:24:20.790
And this page is
really useful.

00:24:20.790 --> 00:24:23.100
It describes how gcutil works.

00:24:23.100 --> 00:24:25.580
It gives you all of the
information about how to

00:24:25.580 --> 00:24:26.830
download and install it.

00:24:26.830 --> 00:24:29.490
It also gives you information
about authenticating, which is

00:24:29.490 --> 00:24:31.410
always useful.

00:24:31.410 --> 00:24:33.900
So this tool is really useful
for you as a reference for

00:24:33.900 --> 00:24:36.150
getting started with gcutil.

00:24:36.150 --> 00:24:38.290
But gcutil is basically
the management

00:24:38.290 --> 00:24:39.590
tool for Compute Engine.

00:24:39.590 --> 00:24:43.320
It allows you to create compute
resources within

00:24:43.320 --> 00:24:43.680
Compute Engine.

00:24:43.680 --> 00:24:46.490
It allows you to create virtual
machines, networks,

00:24:46.490 --> 00:24:48.550
disks, and that kind of thing.

00:24:48.550 --> 00:24:51.570
What we need to do is
install gcutil.

00:24:51.570 --> 00:24:53.480
So the first thing we need
to do is download it.

00:25:00.070 --> 00:25:00.820
And that's pretty quick.

00:25:00.820 --> 00:25:03.130
It's not a particularly
big file.

00:25:03.130 --> 00:25:06.555
Most of the work it does is done
at the back end in the

00:25:06.555 --> 00:25:07.820
Compute Engine, so it's
pretty small.

00:25:10.620 --> 00:25:12.312
We'll open that up.

00:25:12.312 --> 00:25:14.870
And then we'll cd into
the location where

00:25:14.870 --> 00:25:16.120
we downloaded it.

00:25:21.480 --> 00:25:23.020
And there we have it.

00:25:23.020 --> 00:25:23.810
So this is gcutil.

00:25:23.810 --> 00:25:28.640
The most important files in
this particular directory

00:25:28.640 --> 00:25:29.310
structure--

00:25:29.310 --> 00:25:32.880
this is the uncompressed version
of the files that

00:25:32.880 --> 00:25:34.240
we've just downloaded.

00:25:34.240 --> 00:25:37.345
You'll find gcutil, which is the
script, the Python script

00:25:37.345 --> 00:25:39.800
that actually is the
heart of gcutil.

00:25:39.800 --> 00:25:42.600
And also, there's a library
directory, which contains all

00:25:42.600 --> 00:25:44.830
the libraries that gcutil
needs to run.

00:25:44.830 --> 00:25:46.940
And there's also a make
file as well.

00:25:46.940 --> 00:25:49.680
The make file can be used on
systems that have Developer

00:25:49.680 --> 00:25:53.480
Tools installed, for example,
Ace Code on the Mac.

00:25:53.480 --> 00:25:58.260
And you can just do make install
to install gcutil and

00:25:58.260 --> 00:26:03.540
the libraries into /usershare,
and also to make a symbolic

00:26:03.540 --> 00:26:07.550
link into /user/bin
for gcutil.

00:26:07.550 --> 00:26:10.050
We don't have the rights on this
machine to actually run

00:26:10.050 --> 00:26:11.030
that, to do that.

00:26:11.030 --> 00:26:13.886
So I'm going to do another
bit of a trick.

00:26:13.886 --> 00:26:20.570
We're going to add to my path
the current directory.

00:26:24.728 --> 00:26:29.040
Now I can say which gcutil
to find out where it is.

00:26:29.040 --> 00:26:31.800
And there it is.

00:26:31.800 --> 00:26:34.490
So we're going to use gcutil
quite extensively throughout

00:26:34.490 --> 00:26:37.025
this particular run-through,
and we need it

00:26:37.025 --> 00:26:39.740
available on our paths.

00:26:39.740 --> 00:26:40.630
That's available to us.

00:26:40.630 --> 00:26:42.990
We can actually run
help with gcutil.

00:26:42.990 --> 00:26:45.795
And we can list all of the
options, all of the sub

00:26:45.795 --> 00:26:47.890
commands that it offers us.

00:26:47.890 --> 00:26:49.900
As you can see, it's
quite extensive.

00:26:49.900 --> 00:26:53.190
And it gives us the ability to
create instances, create

00:26:53.190 --> 00:26:57.670
networks, to create snapshots
and persistent disks, and to

00:26:57.670 --> 00:26:59.060
perform all of the
administration

00:26:59.060 --> 00:27:01.610
tasks within a project.

00:27:01.610 --> 00:27:05.970
And as you've probably applied
your credits and created a

00:27:05.970 --> 00:27:09.313
project within Google Cloud
Console, you'll understand

00:27:09.313 --> 00:27:10.360
what a project is.

00:27:10.360 --> 00:27:13.990
A project is a grouping of
compute resources like virtual

00:27:13.990 --> 00:27:15.390
machines and networks.

00:27:15.390 --> 00:27:19.298
And so gcutil effectively works
at the project level.

00:27:19.298 --> 00:27:24.570
And in order to make it useful
to us, when we first run it,

00:27:24.570 --> 00:27:27.100
we need to provide
a project name.

00:27:27.100 --> 00:27:29.280
Some of this can be cached
locally on the disk.

00:27:29.280 --> 00:27:31.345
But we do need to provide a
project name to tell it what

00:27:31.345 --> 00:27:32.650
project to use.

00:27:32.650 --> 00:27:40.990
So what I need to do is go into
the Cloud Console and

00:27:40.990 --> 00:27:43.850
find my project, which in this
case is Cloud Demos.

00:27:43.850 --> 00:27:45.470
And it has another interesting
name, [INAUDIBLE]

00:27:45.470 --> 00:27:49.410
Pointer-309.

00:27:49.410 --> 00:27:52.970
And we'll use that as
the project ID.

00:27:52.970 --> 00:27:55.760
So once you run gcutil,
we're basically

00:27:55.760 --> 00:27:57.010
parsing the project ID.

00:27:59.920 --> 00:28:01.190
And then we provide a command.

00:28:01.190 --> 00:28:02.955
Now what we want to
do is actually--

00:28:07.660 --> 00:28:10.310
we want to create a new
instance, a new Compute Engine

00:28:10.310 --> 00:28:13.670
virtual machine.

00:28:13.670 --> 00:28:15.430
So we use the add instance
command to do this.

00:28:15.430 --> 00:28:19.590
And we're going to create an
instance called My Instance.

00:28:19.590 --> 00:28:24.890
I'm very inventive that way,
coming up with new names.

00:28:24.890 --> 00:28:28.430
So we run gcutil and
add instance.

00:28:28.430 --> 00:28:30.080
But we're just running
this arbitrarily

00:28:30.080 --> 00:28:31.490
in our command line.

00:28:31.490 --> 00:28:33.040
We want to connect to this
project called [INAUDIBLE]

00:28:33.040 --> 00:28:35.390
Pointer-309.

00:28:35.390 --> 00:28:37.480
And it doesn't know
who we are.

00:28:37.480 --> 00:28:39.730
So we need to provide some
kind of verification.

00:28:39.730 --> 00:28:45.090
And what it does-- it pops up a
URL, which you can then copy

00:28:45.090 --> 00:28:52.270
and paste into the browser in
which you are running, which

00:28:52.270 --> 00:28:54.860
you are logged in as that
particular account you want to

00:28:54.860 --> 00:28:56.610
authenticate as.

00:28:56.610 --> 00:28:58.700
And I have to be very careful
here not to actually shut down

00:28:58.700 --> 00:28:58.920
the Hangout.

00:28:58.920 --> 00:29:01.860
I'm sure that would cause
us real problems.

00:29:01.860 --> 00:29:04.990
So now Compute Engine.

00:29:04.990 --> 00:29:06.933
Well, the [INAUDIBLE] mechanism
will present you

00:29:06.933 --> 00:29:11.070
with a list of permissions that
the gcutil tool would

00:29:11.070 --> 00:29:12.370
like to have.

00:29:12.370 --> 00:29:15.120
What you should do is you should
review these permission

00:29:15.120 --> 00:29:17.080
requests and make sure you're
happy with them.

00:29:17.080 --> 00:29:20.550
Once you are, you can
click on Accept.

00:29:20.550 --> 00:29:24.540
That now provides your code that
you can use to cut and

00:29:24.540 --> 00:29:26.710
paste into your terminal
window.

00:29:29.260 --> 00:29:32.240
And it will say, authentication
successful.

00:29:32.240 --> 00:29:38.290
Now gcutil will execute the
add instance command.

00:29:38.290 --> 00:29:41.220
And it's going to walk us
through a set of four

00:29:41.220 --> 00:29:43.030
menus in this case.

00:29:43.030 --> 00:29:45.940
We can provide more parameters
in the command line to

00:29:45.940 --> 00:29:47.705
actually specify all of these.

00:29:47.705 --> 00:29:50.395
So we can actually do it
silently with no interaction.

00:29:50.395 --> 00:29:52.680
But let's go through the
interactive method because

00:29:52.680 --> 00:29:55.840
that gives us an idea of what
options are available to us.

00:29:55.840 --> 00:29:58.190
So the first thing we need to
do is select a zone in which

00:29:58.190 --> 00:29:59.570
the instance will run.

00:29:59.570 --> 00:30:02.430
And this gives us some useful
information about when

00:30:02.430 --> 00:30:05.020
somebody's engine will
be mentioned.

00:30:05.020 --> 00:30:07.440
We wouldn't want to pick your
dash [INAUDIBLE] dash B

00:30:07.440 --> 00:30:10.120
because that starts a
[INAUDIBLE] within two days.

00:30:10.120 --> 00:30:15.770
So let's pick US Central 1-A.

00:30:15.770 --> 00:30:18.110
Now we have to specify
a machine type.

00:30:18.110 --> 00:30:20.520
And machine type is basically
a configuration of hardware

00:30:20.520 --> 00:30:21.845
for a virtual machine.

00:30:21.845 --> 00:30:24.770
We're going to choose a very
simple one, which is a shared

00:30:24.770 --> 00:30:27.830
call instance called f1-micro.

00:30:27.830 --> 00:30:30.200
This is the smallest instance
you can get and

00:30:30.200 --> 00:30:31.360
the cheapest to run.

00:30:31.360 --> 00:30:32.990
Now, if you want to do some
testing, you want to save

00:30:32.990 --> 00:30:37.430
yourself some of your credits,
I recommend that you always

00:30:37.430 --> 00:30:39.610
use an f1-micro for doing
your testing.

00:30:39.610 --> 00:30:42.430
You can create huge clusters of
f1-micros, but they don't

00:30:42.430 --> 00:30:44.445
incur a huge amount of cost
while they're running.

00:30:47.690 --> 00:30:49.980
For this particular instance,
we have to create what is

00:30:49.980 --> 00:30:51.380
known as a persistent disk.

00:30:51.380 --> 00:30:54.341
Other options have a scratch
disk, which is tied to the

00:30:54.341 --> 00:30:55.770
life of the virtual machine.

00:30:55.770 --> 00:30:58.640
In this case, we actually have
to create a project level

00:30:58.640 --> 00:31:03.670
persistent disk that will be
associated with our instance.

00:31:03.670 --> 00:31:06.740
And finally, we have to choose
an image, initial image of a

00:31:06.740 --> 00:31:08.970
Linux operating system.

00:31:08.970 --> 00:31:10.940
The options we have are
[INAUDIBLE] six, and

00:31:10.940 --> 00:31:13.110
[INAUDIBLE] six and
[INAUDIBLE] seven.

00:31:13.110 --> 00:31:15.000
I like [INAUDIBLE], and
I like version seven.

00:31:15.000 --> 00:31:16.250
So I'm going to choose that.

00:31:19.383 --> 00:31:23.440
So now gcutil is actually
communicating--

00:31:23.440 --> 00:31:26.360
has actually communicated its
commands to the API, the

00:31:26.360 --> 00:31:27.800
Compute Engine API.

00:31:27.800 --> 00:31:31.220
And now it's sitting here
waiting for that API to come

00:31:31.220 --> 00:31:32.970
back with a response.

00:31:32.970 --> 00:31:36.200
So the first thing it's doing
is inserting the disk called

00:31:36.200 --> 00:31:36.840
My Instance.

00:31:36.840 --> 00:31:38.690
It's actually created
that name itself.

00:31:38.690 --> 00:31:41.900
We've named our instance My
Instance, so it makes sense to

00:31:41.900 --> 00:31:43.370
name the boot disk.

00:31:48.540 --> 00:31:49.740
OK.

00:31:49.740 --> 00:31:50.570
The boot disk.

00:31:50.570 --> 00:31:55.150
Sometimes you get this prompt,
and hopefully it's just going

00:31:55.150 --> 00:31:57.580
to carry on going afterwards.

00:31:57.580 --> 00:31:59.260
So now it's inserted the disk.

00:31:59.260 --> 00:32:01.170
And so that will insert
the instance.

00:32:01.170 --> 00:32:03.155
So they're both going to
be called My Instance.

00:32:03.155 --> 00:32:04.750
And that was the point I was
trying to make before, that

00:32:04.750 --> 00:32:07.384
the disk is automatically named
after the instance.

00:32:07.384 --> 00:32:08.510
And that's complete.

00:32:08.510 --> 00:32:08.940
We're done.

00:32:08.940 --> 00:32:10.465
We've created an instance.

00:32:10.465 --> 00:32:13.930
And we can now SSH into
that instance.

00:32:13.930 --> 00:32:16.870
Again, we're going to reuse the
command we used before, at

00:32:16.870 --> 00:32:20.190
least part of it, gcutil
management project,

00:32:20.190 --> 00:32:20.470
[INAUDIBLE]

00:32:20.470 --> 00:32:21.890
Pointer-309.

00:32:21.890 --> 00:32:23.640
We could actually-- as I said
before, we could actually

00:32:23.640 --> 00:32:27.620
cache some of this information
on a local machine.

00:32:27.620 --> 00:32:31.110
But in this case, we're just
going to go ssh my instance.

00:32:34.720 --> 00:32:38.520
Now gcutil and Compute Engine
take care of all of the SSH

00:32:38.520 --> 00:32:39.220
keys for you.

00:32:39.220 --> 00:32:40.470
So you don't have to
worry about that.

00:32:48.100 --> 00:32:51.365
And you can use your own
keys if you want to.

00:32:51.365 --> 00:32:53.210
That's the most important
part.

00:32:53.210 --> 00:32:57.140
So the key management is done
by Compute Engine normally.

00:32:57.140 --> 00:33:00.060
But you can actually supply
your own SSH keys.

00:33:00.060 --> 00:33:02.610
So now we're actually logged
into My Instance.

00:33:02.610 --> 00:33:05.240
And we can see maybe
what processes are

00:33:05.240 --> 00:33:08.140
running on that instance.

00:33:08.140 --> 00:33:10.720
And what we can do-- because
it's a Linux instance.

00:33:10.720 --> 00:33:12.370
It's an instance
of [INAUDIBLE].

00:33:12.370 --> 00:33:16.320
We can actually install
some software.

00:33:16.320 --> 00:33:17.570
So let's install nginx.

00:33:24.950 --> 00:33:29.580
Nginx is a web server, a very
popular web server.

00:33:29.580 --> 00:33:32.850
And that's what we're going to
use to serve our Hello World.

00:33:43.780 --> 00:33:45.360
So this is pretty standard,
apt-get.

00:33:45.360 --> 00:33:47.990
Anybody who's installed a
package on a Linux machine,

00:33:47.990 --> 00:33:49.205
you've very familiar
with this.

00:33:49.205 --> 00:33:53.090
And now we need to start
our service, nginx.

00:33:58.400 --> 00:33:59.320
And nginx is now started.

00:33:59.320 --> 00:34:03.606
And you can actually check
that it's running.

00:34:03.606 --> 00:34:06.350
And there you go.

00:34:06.350 --> 00:34:06.860
It's running.

00:34:06.860 --> 00:34:08.110
More detail.

00:34:10.239 --> 00:34:10.590
OK.

00:34:10.590 --> 00:34:12.159
So now we have nginx
up and running.

00:34:12.159 --> 00:34:13.880
We need to create a file
that's going to

00:34:13.880 --> 00:34:14.870
display Hello World.

00:34:14.870 --> 00:34:18.389
So let's use [INAUDIBLE]

00:34:18.389 --> 00:34:19.170
to--

00:34:19.170 --> 00:34:20.380
my favorite editor--

00:34:20.380 --> 00:34:23.730
to create a new index.html
file.

00:34:23.730 --> 00:34:26.980
And again, well, let's put
some HTML in this time.

00:34:26.980 --> 00:34:31.040
We'll call it H1,
use a H1 tag.

00:34:31.040 --> 00:34:36.134
And we will say, Hello World.

00:34:42.909 --> 00:34:43.179
OK.

00:34:43.179 --> 00:34:44.955
So now we created
our index.html.

00:34:44.955 --> 00:34:49.828
And we need to copy
it over to nginx.

00:34:59.788 --> 00:35:00.286
Sorry.

00:35:00.286 --> 00:35:02.278
I've forgotten where it is,
so I need to find it.

00:35:14.700 --> 00:35:14.900
OK.

00:35:14.900 --> 00:35:16.660
So I need to copy this file
that we've just created,

00:35:16.660 --> 00:35:18.750
index.html, over to
/user/share/nginx/www.

00:35:24.306 --> 00:35:26.870
And because that's not going
to be owned by me,

00:35:26.870 --> 00:35:28.370
I need to use sudo.

00:35:28.370 --> 00:35:29.840
And I'll copy index.html.

00:35:33.994 --> 00:35:34.940
There we go.

00:35:34.940 --> 00:35:36.100
That's done.

00:35:36.100 --> 00:35:39.935
So now what we need to do is
find out the instance in our

00:35:39.935 --> 00:35:42.580
IP address so then we
can connect to it.

00:35:42.580 --> 00:35:43.940
We're not using DNS here.

00:35:43.940 --> 00:35:45.150
We haven't set up anything
for DNS.

00:35:45.150 --> 00:35:47.770
So we need to actually
know the IP address.

00:35:47.770 --> 00:35:51.950
And for that, I'm just going to
quickly exit the instance.

00:35:51.950 --> 00:35:56.170
I'm going to use gcutil again to
get some information about

00:35:56.170 --> 00:35:57.420
the instance.

00:36:03.940 --> 00:36:06.510
And this gives us all of the
metadata information about the

00:36:06.510 --> 00:36:10.200
instance that's actually
been built and running.

00:36:10.200 --> 00:36:12.650
In this case, it provides us
with the IP address, the

00:36:12.650 --> 00:36:13.780
external IP address.

00:36:13.780 --> 00:36:17.620
This is the IP address that was
ephemerally assigned to

00:36:17.620 --> 00:36:21.830
the instance, and which we can
access the instance by.

00:36:21.830 --> 00:36:25.950
I have a thing we need to do
because by default, we have

00:36:25.950 --> 00:36:28.590
firewall rules in place that
prevents access to the

00:36:28.590 --> 00:36:30.976
instance by any other port other
than port 22, which is

00:36:30.976 --> 00:36:32.050
the SSH port.

00:36:32.050 --> 00:36:33.980
So we need to actually
add a firewall.

00:36:33.980 --> 00:36:39.285
So we're going to add a firewall
rule that allows us

00:36:39.285 --> 00:36:47.976
to access our HTTP server
on port 80.

00:36:47.976 --> 00:36:50.663
And that's going to
be called HTTP1.

00:36:50.663 --> 00:36:51.913
And it's going to be--

00:37:03.710 --> 00:37:06.190
so now it's creating
a firewall for us.

00:37:06.190 --> 00:37:07.980
And this is going to be a
project level resource.

00:37:07.980 --> 00:37:11.930
So this has opened up that port
for one of our instances.

00:37:11.930 --> 00:37:13.750
And that's done.

00:37:13.750 --> 00:37:16.290
So now, we can take the
external IP address.

00:37:16.290 --> 00:37:17.800
And fingers crossed--
have you got your

00:37:17.800 --> 00:37:20.256
fingers crossed, Alex?

00:37:20.256 --> 00:37:21.240
Excellent.

00:37:21.240 --> 00:37:22.490
OK.

00:37:27.640 --> 00:37:29.336
Hello, World.

00:37:29.336 --> 00:37:30.586
There you go.

00:37:34.990 --> 00:37:37.310
ALEX MAIER: And again, folks, if
you have any questions for

00:37:37.310 --> 00:37:39.670
Mandy, you can put them in
the moderator box below.

00:37:39.670 --> 00:37:41.730
We'll go through them.

00:37:41.730 --> 00:37:44.240
We also will have a recording
of this video available.

00:37:44.240 --> 00:37:46.880
And we will post it on
this page later.

00:37:46.880 --> 00:37:50.840
So you can visit and
re-watch that.

00:37:50.840 --> 00:37:55.140
Also, I am hearing that the
video quality, particularly

00:37:55.140 --> 00:37:57.980
the screen share, has been
deteriorating sometimes.

00:37:57.980 --> 00:38:01.060
And we will be redoing
this later on.

00:38:01.060 --> 00:38:06.790
And we hope that video quality
will be better at that point.

00:38:06.790 --> 00:38:10.530
So first, I wanted to ask both
of you, Martin and Mandy, do

00:38:10.530 --> 00:38:15.500
you have any tips and tricks
for people actually getting

00:38:15.500 --> 00:38:19.090
the best out of their $2,000 and
not burning through them

00:38:19.090 --> 00:38:20.340
in a hurry?

00:38:22.250 --> 00:38:22.660
Mandy?

00:38:22.660 --> 00:38:24.080
MANDY WAITE: Yeah, definitely.

00:38:24.080 --> 00:38:26.430
So Martin and I were talking
about this yesterday.

00:38:26.430 --> 00:38:29.700
So one of the key things
you should do is cache.

00:38:29.700 --> 00:38:32.130
You should cache everything.

00:38:32.130 --> 00:38:35.900
Anything that hits the App
Engine instances will use

00:38:35.900 --> 00:38:38.190
instance hours, and that will
eat into your [INAUDIBLE],

00:38:38.190 --> 00:38:39.761
ultimately, which carries
on and that will

00:38:39.761 --> 00:38:41.420
eat into your credits.

00:38:41.420 --> 00:38:43.455
So you want to avoid
hitting the

00:38:43.455 --> 00:38:45.790
instances, so static content.

00:38:45.790 --> 00:38:48.920
You can also cache dynamically
generated responses as well by

00:38:48.920 --> 00:38:51.370
using cache control headers.

00:38:51.370 --> 00:38:54.960
You can also cache your data
store reads as well because

00:38:54.960 --> 00:38:58.250
data store access is relatively
expensive in terms

00:38:58.250 --> 00:38:59.170
of quality usage.

00:38:59.170 --> 00:39:02.070
So whenever you read anything
from the data store that's

00:39:02.070 --> 00:39:07.540
likely to be read again by
multiple user requests or just

00:39:07.540 --> 00:39:10.920
multiple times throughout
processing your own requests,

00:39:10.920 --> 00:39:12.550
you should cache
it in MemCache.

00:39:12.550 --> 00:39:14.910
And we have a really good
MemCache cache implementation,

00:39:14.910 --> 00:39:17.100
a Google wide service,
that you can use

00:39:17.100 --> 00:39:20.490
to cache your reads.

00:39:20.490 --> 00:39:22.590
What else, Martin?

00:39:22.590 --> 00:39:23.510
I think that--

00:39:23.510 --> 00:39:27.930
one thing I mentioned for
Compute Engine is that--

00:39:27.930 --> 00:39:29.646
I'm running instances
currently.

00:39:29.646 --> 00:39:31.605
My instances are up and running,
like the one I

00:39:31.605 --> 00:39:32.920
created earlier, My Instance.

00:39:32.920 --> 00:39:35.220
That will ultimately
cost money.

00:39:35.220 --> 00:39:37.590
That will ultimately eat into
your credits because it's

00:39:37.590 --> 00:39:38.640
sitting there doing nothing.

00:39:38.640 --> 00:39:39.150
It's idle.

00:39:39.150 --> 00:39:43.240
And we don't want to have idle
instances sitting around in

00:39:43.240 --> 00:39:44.180
Compute Engine.

00:39:44.180 --> 00:39:47.910
So you saw me create a f1-micro
instance earlier.

00:39:47.910 --> 00:39:53.000
That's the smallest, cheapest
instance you can use.

00:39:53.000 --> 00:39:56.640
So I'd highly recommend you use
those for test purposes,

00:39:56.640 --> 00:39:58.150
for development purposes.

00:39:58.150 --> 00:40:00.880
And when you're finished
with them, tear them

00:40:00.880 --> 00:40:01.804
down, shut them down.

00:40:01.804 --> 00:40:04.402
There's a gcutil command called
delete instance that

00:40:04.402 --> 00:40:07.150
will delete your instances
for you.

00:40:07.150 --> 00:40:09.760
And you can actually run and
do that using the Cloud

00:40:09.760 --> 00:40:12.720
Console as well.

00:40:12.720 --> 00:40:13.940
Anything else, Martin?

00:40:13.940 --> 00:40:14.240
MARTIN OMANDER: No.

00:40:14.240 --> 00:40:15.950
Just echo what you
said about cache.

00:40:15.950 --> 00:40:17.920
I often see developers--

00:40:17.920 --> 00:40:21.420
for every page request, they go
down and hit the database

00:40:21.420 --> 00:40:22.300
and pull out the data.

00:40:22.300 --> 00:40:27.950
And 99% of the time, you are
reading data, not writing it.

00:40:27.950 --> 00:40:29.740
So then just put
it in MemCache.

00:40:29.740 --> 00:40:34.940
Not only will you spend less
credits and less money, but

00:40:34.940 --> 00:40:38.370
your application will be
significantly faster if you

00:40:38.370 --> 00:40:40.090
use MemCache instead
of hitting the

00:40:40.090 --> 00:40:42.430
database every time.

00:40:42.430 --> 00:40:43.210
ALEX MAIER: All right.

00:40:43.210 --> 00:40:45.930
Mandy, do you happen to have
any resources that can get

00:40:45.930 --> 00:40:50.910
people from their Hello World
to the next level?

00:40:50.910 --> 00:40:51.950
MANDY WAITE: I think what we're
going to do is we're

00:40:51.950 --> 00:40:53.505
going to post those with links
in the YouTube comments

00:40:53.505 --> 00:40:55.810
because I don't have them
available to me at the moment.

00:40:55.810 --> 00:40:56.500
ALEX MAIER: All right.

00:40:56.500 --> 00:40:58.600
So guys, come back
to this page.

00:40:58.600 --> 00:41:01.650
And we'll have more
links there.

00:41:01.650 --> 00:41:03.390
I'm going to turn to the
questions on the

00:41:03.390 --> 00:41:05.930
moderator right now.

00:41:05.930 --> 00:41:09.950
The number one question is,
can I use a debit card to

00:41:09.950 --> 00:41:12.360
activate my account?

00:41:12.360 --> 00:41:12.810
Martin?

00:41:12.810 --> 00:41:13.180
MARTIN OMANDER: Yeah.

00:41:13.180 --> 00:41:15.060
You should be able to
use a debit card.

00:41:15.060 --> 00:41:16.490
I've tried it.

00:41:16.490 --> 00:41:17.720
Now, I don't know--

00:41:17.720 --> 00:41:19.960
I think this question was
from the Netherlands.

00:41:19.960 --> 00:41:23.120
I don't know the details of how
debit cards work there.

00:41:23.120 --> 00:41:27.290
But in general, if it's a debit
card that says Visa or

00:41:27.290 --> 00:41:32.070
MasterCard, something like
that, on it, you

00:41:32.070 --> 00:41:33.750
should able to do it.

00:41:33.750 --> 00:41:34.840
ALEX MAIER: All right.

00:41:34.840 --> 00:41:36.750
That's all the questions
we have at the moment.

00:41:36.750 --> 00:41:39.770
If you think of any more
questions, not to worry.

00:41:39.770 --> 00:41:42.580
You can still share them with
us, and we will answer them.

00:41:42.580 --> 00:41:44.640
Simply email them to
cloudplatformsta

00:41:44.640 --> 00:41:45.890
rterpack@google.com.

00:41:47.768 --> 00:41:53.210
And with that, thank you very
much, Mandy and Martin.

00:41:53.210 --> 00:41:55.643
Thank you all for listening
and attending.

00:41:55.643 --> 00:41:58.060
Good bye.

00:41:58.060 --> 00:41:58.660
MANDY WAITE: Thanks Alex.

00:41:58.660 --> 00:41:58.960
Bye.

00:41:58.960 --> 00:42:00.210
MARTIN OMANDER: Bye.

