WEBVTT
Kind: captions
Language: en

00:00:03.300 --> 00:00:04.050
PAUL SAXMAN: Hi, everybody.

00:00:04.050 --> 00:00:05.680
Thanks for joining us.

00:00:05.680 --> 00:00:08.490
And if you're joining
us via I/O Extended,

00:00:08.490 --> 00:00:09.750
thanks for tuning in.

00:00:09.750 --> 00:00:10.890
My name's Paul Saxman.

00:00:10.890 --> 00:00:13.260
I'm a Developer Advocate with
the Google Maps Developer

00:00:13.260 --> 00:00:14.420
Relations team.

00:00:14.420 --> 00:00:15.859
KASIA DERC-FENSKE: And I'm
Kasia Derc-Fenske.

00:00:15.859 --> 00:00:17.620
And I'm a geo-technical
solutions

00:00:17.620 --> 00:00:19.710
engineer for Maps APIs.

00:00:19.710 --> 00:00:21.590
PAUL SAXMAN: And today we're
going to talk about ways that

00:00:21.590 --> 00:00:24.210
you can use the Google Maps
API to make location

00:00:24.210 --> 00:00:25.950
meaningful for your users.

00:00:25.950 --> 00:00:29.940
Because from a user's
perspective, location is more

00:00:29.940 --> 00:00:31.860
than just a marker on a map.

00:00:31.860 --> 00:00:36.110
There are other dimensions
besides where that your users

00:00:36.110 --> 00:00:37.830
are likely interested in.

00:00:37.830 --> 00:00:40.320
For example, when your users
have to be at a particular

00:00:40.320 --> 00:00:43.510
location, what they intend to
do there, and how they're

00:00:43.510 --> 00:00:45.950
going to get there can actually
strongly affect the

00:00:45.950 --> 00:00:48.260
type of information that you
put on a map, and how you

00:00:48.260 --> 00:00:51.360
display the information.

00:00:51.360 --> 00:00:53.460
KASIA DERC-FENSKE: So to give
you a better idea of what we

00:00:53.460 --> 00:00:57.230
mean by that, let me show
you what my calendar

00:00:57.230 --> 00:00:58.840
looks like on the map.

00:00:58.840 --> 00:01:00.050
I live in Zurich.

00:01:00.050 --> 00:01:03.870
And when you have a calendar,
usually calendar events have

00:01:03.870 --> 00:01:05.140
locations bound to them.

00:01:05.140 --> 00:01:09.100
So it's quite easy to extract
the location, and just put a

00:01:09.100 --> 00:01:10.770
pin on the map.

00:01:10.770 --> 00:01:13.520
But as you might see, this is
missing a really crucial part

00:01:13.520 --> 00:01:17.010
about having things on your
calendar, which is the time.

00:01:17.010 --> 00:01:20.340
So if you wanted an app that
was a geo-calendar, which

00:01:20.340 --> 00:01:23.140
potentially you can build, you
would need to add the time,

00:01:23.140 --> 00:01:26.240
just like I did here.

00:01:26.240 --> 00:01:28.480
This gives you a bit
more information.

00:01:28.480 --> 00:01:32.480
For example, if you wanted to
find me at 3 o'clock in the

00:01:32.480 --> 00:01:36.180
afternoon, you'd know I'd
that I'd be at work.

00:01:36.180 --> 00:01:39.970
And it gives me more
information, because I roughly

00:01:39.970 --> 00:01:42.510
know what I'm doing
at a given time.

00:01:42.510 --> 00:01:43.800
But it's still not everything.

00:01:43.800 --> 00:01:46.360
Events have activities, right?

00:01:46.360 --> 00:01:49.110
And here I put icons,
because icons are

00:01:49.110 --> 00:01:52.750
more visual than text.

00:01:52.750 --> 00:01:55.040
And this is a pretty good
overview for me.

00:01:57.620 --> 00:02:00.540
If you're a person that is
trying to call me, you might

00:02:00.540 --> 00:02:03.080
want to call me when I'm at
work, but you might not want

00:02:03.080 --> 00:02:06.130
to call me when I'm attending
my yoga class.

00:02:06.130 --> 00:02:09.490
But there's still something
missing, which is

00:02:09.490 --> 00:02:11.820
how do I get to places?

00:02:11.820 --> 00:02:16.620
So here you can see that I have
an 8:00 AM run schedule I

00:02:16.620 --> 00:02:17.270
have it scheduled.

00:02:17.270 --> 00:02:20.410
It never happens,
but it's there.

00:02:20.410 --> 00:02:23.670
Then I'm biking to work,
which is a red line.

00:02:23.670 --> 00:02:26.810
And then I'm taking public
transit to a

00:02:26.810 --> 00:02:31.080
wine tasting event.

00:02:31.080 --> 00:02:34.820
You know, you wouldn't like me
driving or biking from a wine

00:02:34.820 --> 00:02:37.720
tasting event, so it's
quite crucial here.

00:02:37.720 --> 00:02:39.260
PAUL SAXMAN: And I kind
of see that you--

00:02:39.260 --> 00:02:41.300
it looks like you're going to
have cocktails at your wine

00:02:41.300 --> 00:02:43.270
tasting, so it'd be kind of
interesting to see what your

00:02:43.270 --> 00:02:44.580
calendar looks like tomorrow.

00:02:44.580 --> 00:02:45.576
KASIA DERC-FENSKE: It's
Friday night.

00:02:45.576 --> 00:02:47.570
It's Friday night.

00:02:47.570 --> 00:02:47.950
PAUL SAXMAN: Cool.

00:02:47.950 --> 00:02:53.330
So there's actually a lot of
great apps that use multiple

00:02:53.330 --> 00:02:55.570
dimensions to make location
meaningful.

00:02:55.570 --> 00:02:57.320
These are just a few
of our favorites.

00:02:57.320 --> 00:03:00.030
They cover kind of a very
popular, very useful use

00:03:00.030 --> 00:03:04.050
cases, like finding a new home
to live in, finding great

00:03:04.050 --> 00:03:07.370
food, and actually helping
to plan travel.

00:03:07.370 --> 00:03:09.470
But we're not showing you these
to actually discourage

00:03:09.470 --> 00:03:11.660
you from building apps that
do these types of things.

00:03:11.660 --> 00:03:14.310
I mean, these are actually
really great for inspiration.

00:03:14.310 --> 00:03:16.740
We definitely recommend that
you check them out.

00:03:16.740 --> 00:03:19.240
But we think that there's
actually a whole kind of class

00:03:19.240 --> 00:03:21.900
of use cases that really haven't
been explored yet with

00:03:21.900 --> 00:03:23.690
location-based applications.

00:03:23.690 --> 00:03:25.230
And that's what we're going
to talk about today.

00:03:25.230 --> 00:03:28.920
We're just going to give like
a few examples of kind of

00:03:28.920 --> 00:03:31.620
simple ideas that we had for
location-based applications,

00:03:31.620 --> 00:03:34.270
and how you can actually use the
Google Maps API to kind of

00:03:34.270 --> 00:03:36.330
augment these.

00:03:36.330 --> 00:03:39.620
So the first so we're going
to talk about--

00:03:39.620 --> 00:03:41.080
our codename was Airporter--

00:03:41.080 --> 00:03:44.100
is getting the user to a
particular location on time.

00:03:44.100 --> 00:03:46.460
And it's getting them to the
airport, or getting them to

00:03:46.460 --> 00:03:48.700
their plane on time.

00:03:48.700 --> 00:03:52.510
And so you can imagine that this
is going to be a mobile

00:03:52.510 --> 00:03:54.840
application, because the users
are going to want to take--

00:03:54.840 --> 00:03:56.960
have the information
on hand as they're

00:03:56.960 --> 00:03:58.210
getting to the airport.

00:03:58.210 --> 00:04:00.200
And even when they're at the
airport, we can actually give

00:04:00.200 --> 00:04:03.860
them information when they're
getting to the terminal.

00:04:03.860 --> 00:04:06.350
So we're going to build this
application using the Google

00:04:06.350 --> 00:04:08.060
Maps Mobile APIs.

00:04:08.060 --> 00:04:11.340
On the left, you have the Google
Maps Android API v2.

00:04:11.340 --> 00:04:15.460
And on the right, we have the
iOS Google Maps SDK for iOS.

00:04:15.460 --> 00:04:18.240
Both of these were actually
launched late last year, and

00:04:18.240 --> 00:04:20.589
they both contain a series of
features that are really great

00:04:20.589 --> 00:04:23.850
for building location-based
applications.

00:04:23.850 --> 00:04:25.270
A couple really useful ones--

00:04:25.270 --> 00:04:26.270
3D buildings.

00:04:26.270 --> 00:04:27.890
As you can see in these images,
the buildings are

00:04:27.890 --> 00:04:29.490
projected up from the ground.

00:04:29.490 --> 00:04:31.430
This is great for giving the
user actually a sense of

00:04:31.430 --> 00:04:34.050
perspective, because you can
actually go to street level,

00:04:34.050 --> 00:04:38.000
and show them street
level orientation.

00:04:38.000 --> 00:04:39.790
The maps actually support
rotation and

00:04:39.790 --> 00:04:42.090
tilt, so you can--

00:04:42.090 --> 00:04:44.370
north doesn't have to be
at the top of the map.

00:04:44.370 --> 00:04:47.620
This is really great for doing
things like plotting paths

00:04:47.620 --> 00:04:49.130
around routes.

00:04:49.130 --> 00:04:50.850
They also support camera
animations.

00:04:50.850 --> 00:04:54.820
So you as a developer can
actually animate transitions

00:04:54.820 --> 00:04:56.240
between points on the map.

00:04:56.240 --> 00:04:59.045
KASIA DERC-FENSKE: But you have
to be careful with that.

00:04:59.045 --> 00:05:00.780
If you overdo it, it
can really make

00:05:00.780 --> 00:05:01.620
the user feel sick.

00:05:01.620 --> 00:05:02.800
So take it easy.

00:05:02.800 --> 00:05:04.200
PAUL SAXMAN: Yeah, there's--

00:05:04.200 --> 00:05:06.590
you can do some pretty
high-speed

00:05:06.590 --> 00:05:08.380
fly-overs if you want to.

00:05:08.380 --> 00:05:09.650
Markers and info windows--

00:05:09.650 --> 00:05:11.920
this is just plotting simple
location-based

00:05:11.920 --> 00:05:13.240
information on the map.

00:05:13.240 --> 00:05:14.430
Polygon and polylines--

00:05:14.430 --> 00:05:17.430
we'll show those a little bit
later, using polylines for

00:05:17.430 --> 00:05:18.950
plotting vector information.

00:05:18.950 --> 00:05:21.800
And ground and tile overlays
for putting raster

00:05:21.800 --> 00:05:24.540
information on a map.

00:05:24.540 --> 00:05:26.350
So there's a number of different
ways you can use

00:05:26.350 --> 00:05:27.530
these APIs.

00:05:27.530 --> 00:05:31.170
We're going to use it for
building this app to getting

00:05:31.170 --> 00:05:32.580
to the airport.

00:05:32.580 --> 00:05:33.880
So the first thing you're going
to need to know-- you're

00:05:33.880 --> 00:05:35.890
going to need to find
where the user is.

00:05:35.890 --> 00:05:39.050
And that's where geolocation
APIs come into play.

00:05:39.050 --> 00:05:40.990
The most simplest way to
actually get location

00:05:40.990 --> 00:05:44.470
information of the user is using
the MyLocation layer

00:05:44.470 --> 00:05:47.180
that's built into the
Maps Mobile APIs.

00:05:47.180 --> 00:05:48.950
So these are very
simple to use.

00:05:48.950 --> 00:05:51.730
Essentially, just turn the
MyLocation layer on.

00:05:51.730 --> 00:05:56.690
You get the blue pin and the
circle, which shows accuracy.

00:05:56.690 --> 00:05:58.800
And then you actually just
query the map to get user

00:05:58.800 --> 00:06:00.640
location out.

00:06:00.640 --> 00:06:02.620
It's simply just two
lines of code--

00:06:02.620 --> 00:06:04.360
setMyLocationEnabled.

00:06:04.360 --> 00:06:06.040
This is in Java or
Android code.

00:06:06.040 --> 00:06:08.710
This is what it looks
like in Objective C.

00:06:08.710 --> 00:06:11.020
The great thing about my
location is it does all the

00:06:11.020 --> 00:06:11.820
work for you.

00:06:11.820 --> 00:06:15.620
You don't have to worry about
what sensors you're using.

00:06:15.620 --> 00:06:17.190
You don't have to worry about
how quickly you're going to

00:06:17.190 --> 00:06:19.450
get a response back, because
you actually get a response

00:06:19.450 --> 00:06:20.750
back fairly quickly.

00:06:20.750 --> 00:06:22.230
You also don't have to worry
about plotting the

00:06:22.230 --> 00:06:23.050
marker on the map.

00:06:23.050 --> 00:06:25.630
The API does all that for you.

00:06:25.630 --> 00:06:27.470
The bad thing about MyLocation
is it does all

00:06:27.470 --> 00:06:28.340
the work for you.

00:06:28.340 --> 00:06:29.066
KASIA DERC-FENSKE:
You said that.

00:06:29.066 --> 00:06:29.430
PAUL SAXMAN: What's that?

00:06:29.430 --> 00:06:31.890
KASIA DERC-FENSKE: Ah, OK.

00:06:31.890 --> 00:06:33.440
PAUL SAXMAN: So if you actually
want to customize the

00:06:33.440 --> 00:06:37.050
marker, you can't
with this API.

00:06:37.050 --> 00:06:40.070
Also, if you want to control
what sensors are active, you

00:06:40.070 --> 00:06:43.410
don't have that access with
the MyLocation layer.

00:06:43.410 --> 00:06:46.510
But you do have that with
Location Services in the

00:06:46.510 --> 00:06:48.690
mobile SDKs or APIs.

00:06:48.690 --> 00:06:49.280
Android--

00:06:49.280 --> 00:06:53.390
both Android and iOS have APIs
that allow you to actually

00:06:53.390 --> 00:06:55.920
control what sensors are being
used, how quickly you get a

00:06:55.920 --> 00:06:57.210
response back.

00:06:57.210 --> 00:07:01.480
You have a lot more control,
but it's also a lot more

00:07:01.480 --> 00:07:03.060
complexity.

00:07:03.060 --> 00:07:04.650
And I'll toss this out.

00:07:04.650 --> 00:07:06.960
I know we mentioned that we're
doing this on mobile, but

00:07:06.960 --> 00:07:09.310
there are HTML5 geolocation
APIs.

00:07:09.310 --> 00:07:11.020
You've probably seen this if you
visit a website, and you

00:07:11.020 --> 00:07:13.060
get that little yellow bar in
Chrome that says, do you want

00:07:13.060 --> 00:07:14.510
to share your location?

00:07:14.510 --> 00:07:15.410
Very simple to use.

00:07:15.410 --> 00:07:17.450
It's a single line in
JavaScript code.

00:07:17.450 --> 00:07:19.670
You get a call back, that you
get the location out once the

00:07:19.670 --> 00:07:21.080
user has accepted it.

00:07:21.080 --> 00:07:22.440
So on all three platforms--

00:07:22.440 --> 00:07:25.720
iOS, Android, and on the web--

00:07:25.720 --> 00:07:28.670
are very easy to get user
location to plot on the map.

00:07:28.670 --> 00:07:30.960
So once we know where the user
is, we have to figure out

00:07:30.960 --> 00:07:32.640
where they're going.

00:07:32.640 --> 00:07:34.450
And as Kasia pointed out
earlier, that's where the

00:07:34.450 --> 00:07:36.960
calendars are very,
very, very useful.

00:07:36.960 --> 00:07:38.080
We can't stress this enough.

00:07:38.080 --> 00:07:39.970
I mean, you've probably
seen Google Now.

00:07:39.970 --> 00:07:42.500
By the way, the Google Now
actually is giving real-time

00:07:42.500 --> 00:07:43.790
information to the user.

00:07:43.790 --> 00:07:45.280
And a lot of that information
actually is pulled from

00:07:45.280 --> 00:07:47.120
calendar information.

00:07:47.120 --> 00:07:49.430
So for example here, you can
see that I have to be at a

00:07:49.430 --> 00:07:51.060
flight in about an hour.

00:07:51.060 --> 00:07:51.630
KASIA DERC-FENSKE: Oh no.

00:07:51.630 --> 00:07:53.082
You said--

00:07:53.082 --> 00:07:56.420
Paul stressed me out the hour,
because I always need two.

00:07:56.420 --> 00:07:58.310
And when we rehearsed,
he mentions two.

00:07:58.310 --> 00:07:59.285
And now he's stressing
me out again.

00:07:59.285 --> 00:08:00.280
PAUL SAXMAN: Yeah.

00:08:00.280 --> 00:08:02.830
Well, you know, it's
flying domestic.

00:08:02.830 --> 00:08:06.280
It's a lot easier, I guess,
from flying from Zurich.

00:08:06.280 --> 00:08:08.780
But so the calendar actually
has information

00:08:08.780 --> 00:08:09.640
about future events.

00:08:09.640 --> 00:08:11.680
It has information about where
the users are supposed to be

00:08:11.680 --> 00:08:12.760
at the current time.

00:08:12.760 --> 00:08:15.680
It also has the information
about where the user has been

00:08:15.680 --> 00:08:16.450
historically.

00:08:16.450 --> 00:08:18.480
So there's a whole wealth
of information here that

00:08:18.480 --> 00:08:21.640
location-based applications
can take advantage of.

00:08:21.640 --> 00:08:24.840
And the great news is as well
as that most mobile

00:08:24.840 --> 00:08:25.310
platforms--

00:08:25.310 --> 00:08:26.480
Android and iOS--

00:08:26.480 --> 00:08:29.630
have calendar APIs, or calendar
event APIs, that

00:08:29.630 --> 00:08:31.120
allows you to get
the events out.

00:08:31.120 --> 00:08:34.159
Also, the Google Calendar has
a web service that you can

00:08:34.159 --> 00:08:35.390
access, as well.

00:08:35.390 --> 00:08:37.070
So if you want this information,
it's actually

00:08:37.070 --> 00:08:38.760
pretty readily available.

00:08:38.760 --> 00:08:42.250
Obviously, you have to go
through a whole permission

00:08:42.250 --> 00:08:44.110
cycle with the APIs.

00:08:44.110 --> 00:08:47.560
But we think these are a great
place to get information about

00:08:47.560 --> 00:08:49.750
your users.

00:08:49.750 --> 00:08:51.790
The issue is, though, is that
the events in the calendar

00:08:51.790 --> 00:08:52.970
don't have--

00:08:52.970 --> 00:08:54.510
they're not geocoded locations,
obviously.

00:08:54.510 --> 00:08:56.140
They're whatever the
user enters.

00:08:56.140 --> 00:08:57.620
Let's say, SFO terminal three.

00:08:57.620 --> 00:08:59.350
So at some point, you're going
to have to go from an address

00:08:59.350 --> 00:09:00.245
to a marker.

00:09:00.245 --> 00:09:03.360
And that's where geocoding
APIs come into play.

00:09:03.360 --> 00:09:04.910
So there's mobile geocoders.

00:09:04.910 --> 00:09:08.080
On Android and iOS, they can
forward and reverse geocode.

00:09:08.080 --> 00:09:10.350
So forward is taking the
address to coordinates,

00:09:10.350 --> 00:09:13.280
reverse is taking coordinates
to an address.

00:09:13.280 --> 00:09:15.960
Also, the alternative is that
you can use the Google

00:09:15.960 --> 00:09:17.580
Geocoding API.

00:09:17.580 --> 00:09:20.060
The Geocoding API is
a web service.

00:09:20.060 --> 00:09:21.620
Basically, you construct
a URL.

00:09:21.620 --> 00:09:23.890
You say if you want the results
in JSON or XML.

00:09:23.890 --> 00:09:26.850
You pass in an address,
AND away you go.

00:09:26.850 --> 00:09:29.160
The results--

00:09:29.160 --> 00:09:30.370
I'm showing you JSON.

00:09:30.370 --> 00:09:32.130
The XML looks relatively
the same, just

00:09:32.130 --> 00:09:33.930
with more angle brackets.

00:09:33.930 --> 00:09:36.210
And this it's pretty
self-explanatory.

00:09:36.210 --> 00:09:37.700
This is probably the last slide
I'll actually show you

00:09:37.700 --> 00:09:40.290
JSON output, because I generally
think that the JSON

00:09:40.290 --> 00:09:42.670
that comes out of the Google
Maps APIs, it's

00:09:42.670 --> 00:09:44.270
pretty easy to read.

00:09:44.270 --> 00:09:46.690
But you can see where I
had multiple results.

00:09:46.690 --> 00:09:48.300
We have geometry information.

00:09:48.300 --> 00:09:50.590
We have address information.

00:09:50.590 --> 00:09:54.340
Very easy to parse, very
easy to get access to.

00:09:54.340 --> 00:09:56.080
So now that we know where the
user's coming from, we know

00:09:56.080 --> 00:09:58.260
where they're going, we're going
to actually give them a

00:09:58.260 --> 00:09:59.400
little bit of intelligence
when they're

00:09:59.400 --> 00:10:00.540
getting to the airport.

00:10:00.540 --> 00:10:03.030
So we're going to try to find
the user a place to park.

00:10:03.030 --> 00:10:05.300
So you can see here, I've
plotted five markers on this--

00:10:05.300 --> 00:10:08.470
or, actually about 10 parking
markers on this map.

00:10:08.470 --> 00:10:10.500
So you may have a database if
you're building an application

00:10:10.500 --> 00:10:12.650
like this of place
information.

00:10:12.650 --> 00:10:15.820
But if you don't, there's
a Google Places API.

00:10:15.820 --> 00:10:18.640
So I got this park information
from using Google Places API

00:10:18.640 --> 00:10:20.490
Nearby Search service.

00:10:20.490 --> 00:10:23.510
Places API is actually-- it's
a suite of search services

00:10:23.510 --> 00:10:27.790
they get you access to over 100
million locations, points

00:10:27.790 --> 00:10:31.910
of interest, or establishments
that Google has in a database.

00:10:31.910 --> 00:10:35.080
And this is the same locations
that you see on Google+ Local

00:10:35.080 --> 00:10:37.220
on the Google Maps API.

00:10:37.220 --> 00:10:40.350
So querying the Google Places
API Nearby Search service is--

00:10:40.350 --> 00:10:42.130
again, it's another
web service.

00:10:42.130 --> 00:10:44.070
Kasia's going to talk about
actually the Java script

00:10:44.070 --> 00:10:46.910
components-- so a lot of these
a little bit later.

00:10:46.910 --> 00:10:50.190
But with Nearby Search, you pass
in location, and most of

00:10:50.190 --> 00:10:51.990
the other information
is optional.

00:10:51.990 --> 00:10:54.210
So you can specify a radius.

00:10:54.210 --> 00:10:56.550
Here I specified
2.5 kilometers.

00:10:56.550 --> 00:10:58.680
You can say specify types.

00:10:58.680 --> 00:11:00.890
So for example, I just wanted
parking spaces.

00:11:00.890 --> 00:11:02.930
There's over 100 different types
available in the Places

00:11:02.930 --> 00:11:05.400
API that you can query on, and
you can query on multiple

00:11:05.400 --> 00:11:06.990
types if you want.

00:11:06.990 --> 00:11:09.250
You can specify a key word.

00:11:09.250 --> 00:11:11.540
Here, I'm looking specifically
for airport parking to

00:11:11.540 --> 00:11:14.270
differentiate from municipal
parking.

00:11:14.270 --> 00:11:17.700
And I've ranked the results by
prominence, which is actually

00:11:17.700 --> 00:11:20.890
what we consider kind of
popularity ranking.

00:11:20.890 --> 00:11:25.660
The alternate is ranking
by distance.

00:11:25.660 --> 00:11:28.090
Another variation of this is
let's say we want to help the

00:11:28.090 --> 00:11:29.520
user find a cab.

00:11:29.520 --> 00:11:32.880
And so here, what I did is
another Nearby Search.

00:11:32.880 --> 00:11:35.010
But here, you can see I'm
actually displaying a bunch of

00:11:35.010 --> 00:11:38.850
kind of place information in
this little info window.

00:11:38.850 --> 00:11:41.780
That information comes from the
Places API Detail Service.

00:11:41.780 --> 00:11:43.400
So the Detail Service--

00:11:43.400 --> 00:11:46.790
so with the search services, you
actually get a reference

00:11:46.790 --> 00:11:49.350
that you can use to actually
query the detail service to

00:11:49.350 --> 00:11:51.670
pull out this information
that you see here.

00:11:51.670 --> 00:11:53.910
The Details Service returns
information like, I mean,

00:11:53.910 --> 00:11:56.350
obviously, the name of the
place, but information like

00:11:56.350 --> 00:12:00.070
the ratings, which is a
five-star scale; price level,

00:12:00.070 --> 00:12:04.120
which is a four-dollar sign
scale; phone numbers, you get

00:12:04.120 --> 00:12:06.890
both domestic and international
phone numbers.

00:12:06.890 --> 00:12:07.750
The addresses are

00:12:07.750 --> 00:12:10.100
componentized, if that's a word.

00:12:10.100 --> 00:12:13.150
You get opening hours, so you
know when the place is open.

00:12:13.150 --> 00:12:15.720
And you actually get a flag to
tell you if the place is open

00:12:15.720 --> 00:12:17.380
when you make the query.

00:12:17.380 --> 00:12:18.500
You get the place types out.

00:12:18.500 --> 00:12:19.900
You get a website URL.

00:12:19.900 --> 00:12:21.650
And you also get some
user-generated content,

00:12:21.650 --> 00:12:23.340
reviews, and photos.

00:12:23.340 --> 00:12:25.340
But we'll talk a little bit
about this later on.

00:12:25.340 --> 00:12:28.140
But this is actually the same
kind of reviews and photos

00:12:28.140 --> 00:12:32.020
that you actually see in
the Google+ Local.

00:12:32.020 --> 00:12:34.200
So let's say the user's
actually picked

00:12:34.200 --> 00:12:35.440
their parking lot.

00:12:35.440 --> 00:12:36.140
They know how they--

00:12:36.140 --> 00:12:37.290
where they want to go.

00:12:37.290 --> 00:12:39.100
Now we actually want to give
them some intelligence on how

00:12:39.100 --> 00:12:40.150
to get there.

00:12:40.150 --> 00:12:41.490
And that's where the
Google Directions

00:12:41.490 --> 00:12:43.020
API comes into play.

00:12:43.020 --> 00:12:45.160
So you see here, I've plotted a
polyline showing the route.

00:12:45.160 --> 00:12:48.200
And I've actually shown the
travel time of 24 minutes.

00:12:48.200 --> 00:12:49.390
KASIA DERC-FENSKE: Come on,
that's not possible.

00:12:49.390 --> 00:12:51.700
You're going the 101 there.

00:12:51.700 --> 00:12:53.440
24 minutes?

00:12:53.440 --> 00:12:55.710
PAUL SAXMAN: We'll touch on
that in a little bit.

00:12:55.710 --> 00:12:56.480
Yeah, there's--

00:12:56.480 --> 00:12:59.910
101 is, if you're not from
the Bay Area, is

00:12:59.910 --> 00:13:00.980
kind of historic mass.

00:13:00.980 --> 00:13:04.080
But so the Directions API--

00:13:04.080 --> 00:13:06.490
we're going to use the web
service version of it.

00:13:06.490 --> 00:13:11.430
Basically, you pass in the
origin and the destination

00:13:11.430 --> 00:13:12.130
coordinates.

00:13:12.130 --> 00:13:14.280
You specified your mode
of transportation.

00:13:14.280 --> 00:13:16.620
What you get out is you actually
get the full route.

00:13:16.620 --> 00:13:18.240
You get all the legs in
the route, or the

00:13:18.240 --> 00:13:20.000
steps along the path.

00:13:20.000 --> 00:13:22.350
You get the full path
information, so you can plot

00:13:22.350 --> 00:13:23.710
the polyline.

00:13:23.710 --> 00:13:26.830
And you also get the
distance and times

00:13:26.830 --> 00:13:27.760
for each of the legs.

00:13:27.760 --> 00:13:30.320
So you can actually sum up the
times, or sum the distances,

00:13:30.320 --> 00:13:32.240
to give the user intelligence
about how long it's going to

00:13:32.240 --> 00:13:35.340
take or how far they
have to go.

00:13:35.340 --> 00:13:39.840
However, as Kasia pointed out,
101 actually sees quite a bit

00:13:39.840 --> 00:13:41.240
of traffic at certain times.

00:13:41.240 --> 00:13:44.260
So this is where the Traffic
layer can be useful.

00:13:44.260 --> 00:13:46.060
Traffic layer is available
on all of our APIs--

00:13:46.060 --> 00:13:49.390
our mobile APIs and our
JavaScript APIs.

00:13:49.390 --> 00:13:52.980
You turn it on with just a
single setTraffictrue, I

00:13:52.980 --> 00:13:54.640
believe, in most cases.

00:13:54.640 --> 00:13:56.630
And what that does is it
actually plots real-time

00:13:56.630 --> 00:13:58.870
traffic information on
the map for the user.

00:13:58.870 --> 00:14:00.960
So they can actually see
what the traffic looks

00:14:00.960 --> 00:14:03.770
like at that moment.

00:14:03.770 --> 00:14:05.690
And then you see that on the
side here, I've actually

00:14:05.690 --> 00:14:06.430
adjusted the time.

00:14:06.430 --> 00:14:08.090
Now it says 54 minutes.

00:14:08.090 --> 00:14:10.690
This is actually a feature
that's available to our Maps

00:14:10.690 --> 00:14:11.970
for Business customers.

00:14:11.970 --> 00:14:14.120
I mentioned before that the

00:14:14.120 --> 00:14:18.490
Directions API returns duration.

00:14:18.490 --> 00:14:20.710
But for Maps for Business
customers, they also get

00:14:20.710 --> 00:14:22.100
duration and traffic.

00:14:22.100 --> 00:14:25.140
So it'll actually calculate how
much time it takes for the

00:14:25.140 --> 00:14:26.960
given current traffic.

00:14:26.960 --> 00:14:28.300
You can actually do--

00:14:28.300 --> 00:14:31.730
set the arrival or destination
time to get future or-- yeah,

00:14:31.730 --> 00:14:35.890
to get future traffic
predictions as well.

00:14:35.890 --> 00:14:39.760
So let's say the user, they've
seen that ugly traffic on 101.

00:14:39.760 --> 00:14:41.650
Potentially they want to
take a train instead.

00:14:41.650 --> 00:14:44.000
The Directions API supports
that, as well.

00:14:44.000 --> 00:14:45.660
So instead of mode
Driving, you can

00:14:45.660 --> 00:14:47.520
actually set mode Transit.

00:14:47.520 --> 00:14:50.260
You get the same information
back, all the

00:14:50.260 --> 00:14:52.020
steps along the path.

00:14:52.020 --> 00:14:53.660
You get all the times
and durations.

00:14:53.660 --> 00:14:54.500
You get all--

00:14:54.500 --> 00:14:57.540
essentially, everything you see
here, including the names

00:14:57.540 --> 00:14:59.050
of the trains, and if
they have to walk

00:14:59.050 --> 00:15:02.460
between certain locations.

00:15:02.460 --> 00:15:04.180
And the last thing I'm going
to mention-- so let's say

00:15:04.180 --> 00:15:06.200
we've gotten the user
to the airport.

00:15:06.200 --> 00:15:09.580
They're making a mad
dash to the gate.

00:15:09.580 --> 00:15:10.785
KASIA DERC-FENSKE: If they have
one hour, that's what

00:15:10.785 --> 00:15:11.750
they have to do.

00:15:11.750 --> 00:15:12.890
PAUL SAXMAN: Exactly.

00:15:12.890 --> 00:15:16.470
And you want to give them the
ability to actually find

00:15:16.470 --> 00:15:18.990
some-- a healthy snack before
they get on the plane.

00:15:18.990 --> 00:15:20.290
So this is where voice
search would--

00:15:20.290 --> 00:15:21.480
is very handy.

00:15:21.480 --> 00:15:23.780
Voice search is built into
the Mobile APIs.

00:15:23.780 --> 00:15:27.390
The user just hits the little
microphone button, they can

00:15:27.390 --> 00:15:30.110
actually speak in the phone,
and the phone will do

00:15:30.110 --> 00:15:31.840
voice-to-text translation
for them.

00:15:31.840 --> 00:15:33.110
But then what do
you do it that?

00:15:33.110 --> 00:15:35.290
I mean, they could mutter,
I want cake.

00:15:35.290 --> 00:15:39.710
They could say, give me cake
in terminal three.

00:15:39.710 --> 00:15:41.570
And that's where the Places
API Text Search

00:15:41.570 --> 00:15:42.600
service comes in.

00:15:42.600 --> 00:15:45.070
The Text Search service, like
Nearby Search service, takes a

00:15:45.070 --> 00:15:47.260
lot of the same parameters,
except it

00:15:47.260 --> 00:15:48.960
requires a query parameter.

00:15:48.960 --> 00:15:52.570
What the query parameter does
is it will do a natural

00:15:52.570 --> 00:15:54.330
language matching based
on the query

00:15:54.330 --> 00:15:56.870
string to give you results.

00:15:56.870 --> 00:15:59.140
Everything else, like location
radius and types, these are

00:15:59.140 --> 00:16:00.620
all optional parameters.

00:16:00.620 --> 00:16:02.770
But you can use those to
actually constrain your query.

00:16:02.770 --> 00:16:05.840
So since I knew where the
location of user was, since I

00:16:05.840 --> 00:16:08.940
know I don't want to give them
food that's over a kilometer

00:16:08.940 --> 00:16:11.360
out, I can actually constrain
that, and allow

00:16:11.360 --> 00:16:13.960
them to find relevant--

00:16:13.960 --> 00:16:16.130
information that's relevant
to them at that moment.

00:16:16.130 --> 00:16:18.930
KASIA DERC-FENSKE: So cake is
a healthy snack, right?

00:16:18.930 --> 00:16:19.280
PAUL SAXMAN: Yeah.

00:16:19.280 --> 00:16:22.140
Actually, when doing this demo,
I actually ran a few

00:16:22.140 --> 00:16:25.210
queries for things like, I
don't know, it was like

00:16:25.210 --> 00:16:28.240
vegetarian food and salad.

00:16:28.240 --> 00:16:32.670
And not to many results in the
San Francisco airport.

00:16:32.670 --> 00:16:35.000
So with that, Kasia, you're
going to talk about--

00:16:35.000 --> 00:16:35.420
KASIA DERC-FENSKE: Yep.

00:16:35.420 --> 00:16:40.820
So Paul mentioned events that
are in your calendar.

00:16:40.820 --> 00:16:43.710
But the same applies
to bigger events.

00:16:43.710 --> 00:16:47.720
Probably all of you know that
May is bike to work month.

00:16:47.720 --> 00:16:50.645
And just out of curiosity, how
many people actually bike to

00:16:50.645 --> 00:16:52.560
work in this crowd?

00:16:52.560 --> 00:16:54.530
OK, well, that's pretty good.

00:16:54.530 --> 00:16:58.250
How many people bike to work
during the bike to work day

00:16:58.250 --> 00:17:01.390
that was hosted inside
your city?

00:17:01.390 --> 00:17:03.390
PAUL SAXMAN: That was during
I/O rehearsals for me.

00:17:03.390 --> 00:17:04.290
KASIA DERC-FENSKE: OK.

00:17:04.290 --> 00:17:06.329
Well, it's not bad.

00:17:06.329 --> 00:17:13.119
So what I did is I wanted to
show you how you can use the

00:17:13.119 --> 00:17:16.740
power of the Geo
APIs to help in

00:17:16.740 --> 00:17:18.349
bigger events and campaigns.

00:17:18.349 --> 00:17:23.280
So I built a map to run a
competition between cities for

00:17:23.280 --> 00:17:25.619
the bike to work day and
bike to work month.

00:17:25.619 --> 00:17:32.710
So if you look here, we have
an address form that uses

00:17:32.710 --> 00:17:34.970
place as auto-complete.

00:17:34.970 --> 00:17:38.030
We can put in the home address,
which for me was

00:17:38.030 --> 00:17:41.880
somewhere in Sunnyvale a week
ago, because that's when San

00:17:41.880 --> 00:17:44.280
Francisco had their
bike to work day.

00:17:44.280 --> 00:17:48.090
And then you can put
your work address.

00:17:48.090 --> 00:17:52.040
And what it does, it simply
counts you as a person that

00:17:52.040 --> 00:17:53.950
biked to work.

00:17:53.950 --> 00:17:57.740
I agree that there might be some
room for cheating, but

00:17:57.740 --> 00:17:58.810
let's leave it as it is.

00:17:58.810 --> 00:18:00.690
As you see, you have directions
plotted, and you

00:18:00.690 --> 00:18:03.010
have some additional
information.

00:18:03.010 --> 00:18:04.460
This is a working demo.

00:18:04.460 --> 00:18:05.810
I built it in three hours.

00:18:05.810 --> 00:18:08.750
Mind you, it doesn't have a
back-end, so all of the

00:18:08.750 --> 00:18:14.270
information of the summaries
are just false data.

00:18:14.270 --> 00:18:17.470
So what did we use to
build this demo?

00:18:17.470 --> 00:18:20.970
First of all, you saw that when
the user started typing,

00:18:20.970 --> 00:18:22.800
they got a bunch
of suggestions.

00:18:22.800 --> 00:18:26.450
What we used here is geo-powered
input elements.

00:18:26.450 --> 00:18:30.090
Places' auto-complete has a
feature that allows you to

00:18:30.090 --> 00:18:32.550
bind to an input field.

00:18:32.550 --> 00:18:35.300
And then once the user starts
typing, it provides you with a

00:18:35.300 --> 00:18:37.670
list of suggestions.

00:18:37.670 --> 00:18:40.470
After they choose a place,
a place change event is

00:18:40.470 --> 00:18:44.950
triggered, and you can extract
information about a place.

00:18:44.950 --> 00:18:48.780
So here I don't want to ask
users where do they live.

00:18:48.780 --> 00:18:51.990
If they gave me their own
address, I can extract the

00:18:51.990 --> 00:18:54.090
locality from the place
information.

00:18:54.090 --> 00:18:56.820
And I do the same for
the geometry.

00:18:56.820 --> 00:18:58.450
PAUL SAXMAN: And there's a web
service for that as well.

00:18:58.450 --> 00:18:58.740
KASIA DERC-FENSKE: Oh, yes.

00:18:58.740 --> 00:18:59.990
Yes, of course.

00:19:02.350 --> 00:19:07.050
So after the user put in the
information, there were

00:19:07.050 --> 00:19:08.660
directions that were plotted.

00:19:08.660 --> 00:19:10.990
And it looked in kind
of nice way.

00:19:10.990 --> 00:19:15.454
How many people here have
used Styled Maps before?

00:19:15.454 --> 00:19:18.630
OK, well, you should
use it more.

00:19:18.630 --> 00:19:22.420
Styled Maps are awesome because
they might help you

00:19:22.420 --> 00:19:24.270
put a message across.

00:19:29.760 --> 00:19:34.410
So here, for example, I used
the Style Map Wizard--

00:19:34.410 --> 00:19:36.010
which is the thing you want
to use if you are

00:19:36.010 --> 00:19:37.200
styling your map--

00:19:37.200 --> 00:19:40.240
to style the map, to decrease
the saturation, and get rid of

00:19:40.240 --> 00:19:41.340
some labels.

00:19:41.340 --> 00:19:44.250
I mean, I assume that the people
that are putting in

00:19:44.250 --> 00:19:45.920
their home address know
the street names

00:19:45.920 --> 00:19:48.110
around their homes.

00:19:48.110 --> 00:19:52.350
In general, the way maps are
styled is that you specify

00:19:52.350 --> 00:19:53.880
element types and
feature types.

00:19:53.880 --> 00:19:54.970
They are both character count.

00:19:54.970 --> 00:19:58.540
So for example, a feature type
is a road, and a sub-type of a

00:19:58.540 --> 00:20:00.180
road is road.highway.

00:20:00.180 --> 00:20:03.740
And once the Styled Map produces
styles like this, you

00:20:03.740 --> 00:20:07.420
can use it to style the
map in JavaScript.

00:20:07.420 --> 00:20:08.960
But you can also tweak
it, because you

00:20:08.960 --> 00:20:11.800
see it's quite readable.

00:20:11.800 --> 00:20:16.930
What we also did is we put
symbols on the map in the

00:20:16.930 --> 00:20:17.890
directions response.

00:20:17.890 --> 00:20:21.170
How many people use symbols?

00:20:21.170 --> 00:20:23.530
I'd say it's the same amount,
which is quite impressive,

00:20:23.530 --> 00:20:29.300
because we only added symbols
about a year ago.

00:20:29.300 --> 00:20:33.120
And the power that they have
is they are scalable.

00:20:33.120 --> 00:20:35.760
And they're essentially SVG
paths, which you can use to

00:20:35.760 --> 00:20:38.760
automate and display things
in an interesting way.

00:20:38.760 --> 00:20:42.120
Here we constructed an object,
which is a polylines options

00:20:42.120 --> 00:20:46.145
object, where we say what kind
of symbol we want to have on

00:20:46.145 --> 00:20:47.070
the polyline.

00:20:47.070 --> 00:20:49.350
We are setting the stroke
capacity of the polyline to 0.

00:20:49.350 --> 00:20:51.210
We don't want to see
the polyline.

00:20:51.210 --> 00:20:54.740
But we want to have arrows
on the polyline.

00:20:54.740 --> 00:20:57.780
And after we've done that, we
can simply pass it on to the

00:20:57.780 --> 00:20:59.860
directions renderer.

00:20:59.860 --> 00:21:01.980
And there's a little thing here
that I also did, which is

00:21:01.980 --> 00:21:03.330
suppressing the markers.

00:21:03.330 --> 00:21:09.060
Because let's face, you know
where your work is.

00:21:09.060 --> 00:21:14.780
So continuing on the demo, we
also had a little panel.

00:21:14.780 --> 00:21:17.840
And this is my--

00:21:17.840 --> 00:21:20.930
I would like to ask you to
every time that you put

00:21:20.930 --> 00:21:23.730
information, such as how long
does it take to go somewhere,

00:21:23.730 --> 00:21:25.500
how long is a step of a
journey, what are the

00:21:25.500 --> 00:21:26.350
additional--

00:21:26.350 --> 00:21:29.360
think about what actually
the user needs.

00:21:29.360 --> 00:21:32.010
I mean, you probably know how
much a commute takes.

00:21:32.010 --> 00:21:37.240
So here, I displayed to user
some general information.

00:21:37.240 --> 00:21:39.080
So instead of running
competition with points and

00:21:39.080 --> 00:21:41.480
things like that, and meters,
kilometers, I told them how

00:21:41.480 --> 00:21:44.020
many times the bikers from their
city managed to cycle

00:21:44.020 --> 00:21:46.950
the earth, and climb
Mount Everest.

00:21:46.950 --> 00:21:49.980
And then, I wanted to show them
something interesting.

00:21:49.980 --> 00:21:53.740
How many of you know what the
elevation path between your

00:21:53.740 --> 00:21:55.770
work and the houses?

00:21:55.770 --> 00:21:56.900
Elevation graph.

00:21:56.900 --> 00:21:57.813
Really?

00:21:57.813 --> 00:22:01.460
Did you attend my rehearsal
session?

00:22:01.460 --> 00:22:02.660
Anyway.

00:22:02.660 --> 00:22:05.440
This is a piece of information
that is easily achievable

00:22:05.440 --> 00:22:09.790
because the direction servers
returns a polyline.

00:22:09.790 --> 00:22:13.660
And the elevation service simply
takes the polyline and

00:22:13.660 --> 00:22:14.820
a number of samples.

00:22:14.820 --> 00:22:19.720
And then you can use the Google
visualization library

00:22:19.720 --> 00:22:22.480
and create a common chart
in a really easy way.

00:22:22.480 --> 00:22:24.650
You simply add columns, and
then add data rows.

00:22:27.770 --> 00:22:30.920
But it's also important to
remember I'm mobile.

00:22:30.920 --> 00:22:33.503
I mean, I love JavaScript.

00:22:33.503 --> 00:22:37.220
But I admit, you have to think
about mobile, as well.

00:22:37.220 --> 00:22:41.020
So here we added a mobile
application that

00:22:41.020 --> 00:22:42.600
the users can install.

00:22:42.600 --> 00:22:48.600
And if they so wish, they can
show their current location.

00:22:48.600 --> 00:22:51.920
And then you can tell which
company they're biking for, or

00:22:51.920 --> 00:22:57.660
which city they are biking
for, and collect this

00:22:57.660 --> 00:23:00.650
information and put it on
a map using a polyline.

00:23:00.650 --> 00:23:04.420
You can then also use this
information to make some

00:23:04.420 --> 00:23:08.170
interesting visualizations.

00:23:08.170 --> 00:23:11.250
It might be life, or it
might be like here.

00:23:11.250 --> 00:23:13.210
Let me just restart it, start
from the beginning.

00:23:13.210 --> 00:23:15.740
I simply plotted random points
on the map, because I didn't

00:23:15.740 --> 00:23:16.420
have the data.

00:23:16.420 --> 00:23:19.240
But this is biking
in San Francisco.

00:23:19.240 --> 00:23:22.610
You can see that people
essentially started slow, and

00:23:22.610 --> 00:23:25.680
then go a little bit quicker.

00:23:25.680 --> 00:23:27.730
And this is, by the way,
using symbols.

00:23:27.730 --> 00:23:30.180
And it's a JavaScript demo.

00:23:30.180 --> 00:23:33.100
But once you have this
data, you can

00:23:33.100 --> 00:23:34.620
use this for a campaign.

00:23:34.620 --> 00:23:39.240
But what's really cool is that
you can use the power of data

00:23:39.240 --> 00:23:42.110
to help people, and to
make things better.

00:23:42.110 --> 00:23:45.990
So remember, plot your data on
the map, and make things

00:23:45.990 --> 00:23:48.040
better after you collect
the data.

00:23:48.040 --> 00:23:51.650
Here I'm constructing
a live heat map.

00:23:51.650 --> 00:23:55.830
But if I switch, you can see
actually the end heat map

00:23:55.830 --> 00:23:59.000
overlaid with San Francisco
biking layer, which is also

00:23:59.000 --> 00:24:00.820
availability in the API.

00:24:00.820 --> 00:24:03.640
And what you can deduce from
here is, for example, that

00:24:03.640 --> 00:24:08.480
people are taking a path, which
is not the biking route,

00:24:08.480 --> 00:24:10.420
but still a lot of
bikers take it.

00:24:10.420 --> 00:24:13.490
And you can go to the city
council, and say, hey, 300

00:24:13.490 --> 00:24:15.470
people that day took
this path.

00:24:15.470 --> 00:24:16.660
And there's no bike
path there.

00:24:16.660 --> 00:24:17.760
Please add it.

00:24:17.760 --> 00:24:21.440
And this is a really, really
valuable thing to do.

00:24:21.440 --> 00:24:25.200
What's more, if you have this
data, you can, for example,

00:24:25.200 --> 00:24:27.260
suggest path updates.

00:24:27.260 --> 00:24:30.800
If somebody's going the wrong
way with stupid elevation, and

00:24:30.800 --> 00:24:33.540
they have the app installed,
it may suggest to the user,

00:24:33.540 --> 00:24:36.770
hey, you can actually choose a
simpler path, and it'll take

00:24:36.770 --> 00:24:39.190
you through a nice area.

00:24:39.190 --> 00:24:42.720
So I find it really,
really cool.

00:24:42.720 --> 00:24:44.740
But enough about
biking, right?

00:24:44.740 --> 00:24:46.170
We've been talking
a bit more--

00:24:46.170 --> 00:24:48.470
too much about biking.

00:24:48.470 --> 00:24:50.110
So let's talk about walking.

00:24:50.110 --> 00:24:51.310
We had three demos--

00:24:51.310 --> 00:24:55.650
biker, walker, and airporter.

00:24:55.650 --> 00:24:58.620
A couple of months back, my
colleague Wolff built a

00:24:58.620 --> 00:25:05.020
conceptual demo for an app
that lets you explore the

00:25:05.020 --> 00:25:05.760
surroundings.

00:25:05.760 --> 00:25:09.710
So what it does is use the
walking transit mode and

00:25:09.710 --> 00:25:11.765
directions--

00:25:11.765 --> 00:25:14.420
oh, the towns didn't load--

00:25:14.420 --> 00:25:15.915
and generates a walking path.

00:25:15.915 --> 00:25:18.420
And it's important to remember
that it's also

00:25:18.420 --> 00:25:20.080
available on Android.

00:25:20.080 --> 00:25:22.620
And this is why we have
this little guy here.

00:25:22.620 --> 00:25:26.010
He's a CSS-animated android,
just for the record.

00:25:26.010 --> 00:25:29.410
That's why I love HTML5.

00:25:29.410 --> 00:25:33.510
So what the application does
is it uses waypoints to

00:25:33.510 --> 00:25:35.830
construct a hexagon, which
roughly takes an

00:25:35.830 --> 00:25:37.320
hour to walk through.

00:25:37.320 --> 00:25:39.000
And it gives you
a walking path.

00:25:39.000 --> 00:25:41.910
Then it uses Nearby Search-- the
same as Paul mentioned--

00:25:41.910 --> 00:25:45.200
to find places with
given categories.

00:25:45.200 --> 00:25:47.010
So I extended the demo
to make it like this.

00:25:47.010 --> 00:25:50.110
And also, for example, if you're
in a state agency, and

00:25:50.110 --> 00:25:53.830
you want to provide users a way
to learn the surroundings,

00:25:53.830 --> 00:25:56.370
you can choose the practical
types here.

00:25:56.370 --> 00:25:59.870
And then it'll show you were the
post office is, or where

00:25:59.870 --> 00:26:01.570
the nearest shop is.

00:26:01.570 --> 00:26:04.010
So with that, let me
show you what the

00:26:04.010 --> 00:26:06.106
actual demo looks like.

00:26:06.106 --> 00:26:06.980
You input their address.

00:26:06.980 --> 00:26:07.790
That's places [INAUDIBLE]

00:26:07.790 --> 00:26:08.535
again.

00:26:08.535 --> 00:26:09.120
We're on this corner.

00:26:09.120 --> 00:26:10.850
Let's say I'm hungry.

00:26:10.850 --> 00:26:13.235
I'll choose eat out, and
then click on the map

00:26:13.235 --> 00:26:14.400
to generate a walk--

00:26:14.400 --> 00:26:14.890
perfect.

00:26:14.890 --> 00:26:17.020
Then I have places
with photos.

00:26:17.020 --> 00:26:20.400
I'm looking for a place for
food that looks nice.

00:26:20.400 --> 00:26:22.900
So let's just scroll
down to see--

00:26:22.900 --> 00:26:25.930
the one on the left
here looks good.

00:26:25.930 --> 00:26:27.050
Let's go in there.

00:26:27.050 --> 00:26:28.100
We have some additional
information.

00:26:28.100 --> 00:26:28.680
We have a peg man.

00:26:28.680 --> 00:26:30.310
Let's click the peg man.

00:26:30.310 --> 00:26:31.230
We're inside.

00:26:31.230 --> 00:26:32.480
Isn't that wonderful?

00:26:35.650 --> 00:26:38.370
When you have the Place
information, and you set the

00:26:38.370 --> 00:26:42.400
stream parameter on, if the
place has Street View, you go

00:26:42.400 --> 00:26:45.230
inside, which is pretty
remarkable, I feel.

00:26:45.230 --> 00:26:46.660
Let's say I don't want
to walk so much

00:26:46.660 --> 00:26:47.330
because I'm pretty hungry.

00:26:47.330 --> 00:26:48.580
So I'm making the
route shorter.

00:26:51.220 --> 00:26:56.420
Yes, and I'll leave this detour
just for reference.

00:26:56.420 --> 00:26:58.970
And yeah, I think
I'm going to go.

00:26:58.970 --> 00:27:01.440
Now what I'll do is press the
Share button, which would send

00:27:01.440 --> 00:27:03.500
this information to
my mobile phone.

00:27:03.500 --> 00:27:05.200
So I get updated as a walk.

00:27:05.200 --> 00:27:08.320
And maybe I get Place
reviews read.

00:27:08.320 --> 00:27:09.510
But that's for later.

00:27:09.510 --> 00:27:13.090
So we have these information,
which is the general

00:27:13.090 --> 00:27:15.650
information that Paul spoke
about a bit before.

00:27:15.650 --> 00:27:16.820
And you can see it
looks awesome.

00:27:16.820 --> 00:27:19.810
If add a panel, a small panel
with Street View-- with your

00:27:19.810 --> 00:27:23.910
Street View, it gives a lot more
sense of how the place

00:27:23.910 --> 00:27:24.740
looks like.

00:27:24.740 --> 00:27:27.720
But we also have--

00:27:27.720 --> 00:27:29.170
so this all the information.

00:27:29.170 --> 00:27:29.440
Sorry.

00:27:29.440 --> 00:27:31.360
This is all the information
you can get

00:27:31.360 --> 00:27:33.720
from the Details service.

00:27:33.720 --> 00:27:38.010
One particular thing that
I like is the vicinity.

00:27:38.010 --> 00:27:44.200
Vicinity is a way to format
an address for locals.

00:27:44.200 --> 00:27:47.060
So for example, if you provide
an address, and you're using

00:27:47.060 --> 00:27:50.450
Places API, and you know that
the places that people that

00:27:50.450 --> 00:27:54.055
will be using this application
are locals, do not have--

00:27:54.055 --> 00:27:56.020
make them read through
United States,

00:27:56.020 --> 00:27:57.835
California, postal code.

00:27:57.835 --> 00:28:00.800
No, just give them the
street and the city.

00:28:00.800 --> 00:28:02.960
One additional thing that's
worth noticing

00:28:02.960 --> 00:28:06.680
is the opening hours.

00:28:06.680 --> 00:28:09.180
So you know when the
place is open.

00:28:09.180 --> 00:28:12.630
And yeah, there are plenty of
types, but this is I feel that

00:28:12.630 --> 00:28:14.270
this is not the power--

00:28:14.270 --> 00:28:16.840
this is not the full power of
the API, because what matters,

00:28:16.840 --> 00:28:20.220
as well, is the user-generated
content, right?

00:28:20.220 --> 00:28:20.740
PAUL SAXMAN: Yeah, yeah.

00:28:20.740 --> 00:28:23.930
So we mentioned it a little bit
earlier that the Places

00:28:23.930 --> 00:28:25.510
API gives you access to

00:28:25.510 --> 00:28:27.400
user-generated content, as well.

00:28:27.400 --> 00:28:29.860
Those are photos and reviews.

00:28:29.860 --> 00:28:31.370
So the search services--

00:28:31.370 --> 00:28:33.290
actually, for each place
returned, you

00:28:33.290 --> 00:28:35.070
get one photo reference.

00:28:35.070 --> 00:28:37.680
And the Detail service,
you get up to 10 photo

00:28:37.680 --> 00:28:39.430
references, as well.

00:28:39.430 --> 00:28:41.560
And these are the same photos
that you see in Google+ Local,

00:28:41.560 --> 00:28:45.320
and in the Google Maps API if
you're searching on Places.

00:28:45.320 --> 00:28:48.770
So in addition to the
photos, you also

00:28:48.770 --> 00:28:50.340
have access to reviews.

00:28:50.340 --> 00:28:54.260
So the Detail service-- the
Google Places Details service

00:28:54.260 --> 00:28:55.580
will return up to
five reviews.

00:28:55.580 --> 00:28:57.340
These are the ones that we think
are the best reviews out

00:28:57.340 --> 00:28:58.690
of the bunch.

00:28:58.690 --> 00:29:02.520
And you get information such
as the description the user

00:29:02.520 --> 00:29:04.370
entered, you get the ratings.

00:29:04.370 --> 00:29:07.340
So here, we have actually three
aspects for the ratings.

00:29:07.340 --> 00:29:10.750
And also, a attribution so that
you can actually link off

00:29:10.750 --> 00:29:14.260
to the person's Google+ profile
if it's available.

00:29:14.260 --> 00:29:15.740
And this is what it looks
like actually

00:29:15.740 --> 00:29:16.890
in the Detail service--

00:29:16.890 --> 00:29:18.870
or, in the JSON for the
Details service.

00:29:18.870 --> 00:29:21.000
As you can see with the photos,
you get actually the

00:29:21.000 --> 00:29:22.080
height and width information.

00:29:22.080 --> 00:29:24.640
You get attribution, so you
can give the user that

00:29:24.640 --> 00:29:27.040
generated the content credit.

00:29:27.040 --> 00:29:29.260
You see the reviews with
multiple aspects.

00:29:29.260 --> 00:29:31.880
For a restaurant, we have
food, decor, service.

00:29:31.880 --> 00:29:34.750
Not all places that have
multiple or three aspects.

00:29:34.750 --> 00:29:38.110
What we didn't really say is you
can expect there to be at

00:29:38.110 --> 00:29:39.560
least one aspect.

00:29:39.560 --> 00:29:42.170
And when we have multiple
aspects, the top one is always

00:29:42.170 --> 00:29:43.840
the primary aspect.

00:29:43.840 --> 00:29:45.900
And then like I said before,
you get the authorship

00:29:45.900 --> 00:29:48.370
information, and the text
for the review.

00:29:48.370 --> 00:29:51.500
So that's up to five
reviews per place

00:29:51.500 --> 00:29:53.960
from the Details service.

00:29:53.960 --> 00:29:55.240
So that's pretty much it.

00:29:55.240 --> 00:29:57.300
Those are the demos we wanted
to show you today.

00:29:57.300 --> 00:30:01.210
So before we go on to Q&amp;A-- so
we're going to have Q&amp;A. You

00:30:01.210 --> 00:30:03.100
guys can get up to the
microphones and ask questions

00:30:03.100 --> 00:30:04.170
if you want.

00:30:04.170 --> 00:30:05.640
We're going to actually check
to see if there's any

00:30:05.640 --> 00:30:09.390
questions from online, if
anybody's sending anything our

00:30:09.390 --> 00:30:10.870
way from I/O Extended.

00:30:10.870 --> 00:30:14.140
And also, we're going to be
in the Sandbox afterwards.

00:30:14.140 --> 00:30:17.210
But a few tips for you guys for
getting information, or

00:30:17.210 --> 00:30:19.790
getting more information about
what we talked about today.

00:30:19.790 --> 00:30:22.300
There's some upcoming sessions
later on today.

00:30:22.300 --> 00:30:25.060
I know it's been a long day
already, but at 5:30 we're

00:30:25.060 --> 00:30:27.540
going to have a Getting Your
Maps into iOS talk.

00:30:27.540 --> 00:30:29.366
I believe that's Mano Marks.

00:30:29.366 --> 00:30:31.080
KASIA DERC-FENSKE: And Luke.

00:30:31.080 --> 00:30:31.600
PAUL SAXMAN: I'm sorry?

00:30:31.600 --> 00:30:32.130
KASIA DERC-FENSKE: And Luke.

00:30:32.130 --> 00:30:35.820
PAUL SAXMAN: Oh, and Luke, yep,
talking about building a

00:30:35.820 --> 00:30:37.570
map in iOS.

00:30:37.570 --> 00:30:40.380
Tomorrow, there's a bunch of
talks related to what we

00:30:40.380 --> 00:30:41.430
mentioned today.

00:30:41.430 --> 00:30:43.540
There's visualization talks.

00:30:43.540 --> 00:30:46.400
Beyond the Blue Dot is about the
Android location services,

00:30:46.400 --> 00:30:48.330
or Android location APIs
that are available now.

00:30:50.840 --> 00:30:53.610
And also later in the day,
there's another Android talk,

00:30:53.610 --> 00:30:56.580
so about using the
Android Maps API.

00:30:56.580 --> 00:30:58.610
And actually, third day, there's
a couple of code labs

00:30:58.610 --> 00:30:59.840
you might be interested in.

00:30:59.840 --> 00:31:01.750
Definitely check those
out, as well.

00:31:01.750 --> 00:31:04.180
There's a lot of resources
you can access online.

00:31:04.180 --> 00:31:06.110
This probably isn't
even all of them.

00:31:06.110 --> 00:31:08.150
The most important thing you
want to do-- besides a thank

00:31:08.150 --> 00:31:11.740
you slide-- go to
developers.google.com/maps.

00:31:11.740 --> 00:31:13.150
That's where all the information
that you're going

00:31:13.150 --> 00:31:15.060
to want is linked to.

00:31:15.060 --> 00:31:17.020
KASIA DERC-FENSKE: It recently
had a redesign, so the page

00:31:17.020 --> 00:31:17.700
really looks sleek.

00:31:17.700 --> 00:31:18.580
It looks sleek.

00:31:18.580 --> 00:31:21.050
And check it out.

00:31:21.050 --> 00:31:21.700
PAUL SAXMAN: So that's it.

00:31:21.700 --> 00:31:24.090
So if you guys have any
questions, feel--

00:31:24.090 --> 00:31:24.400
KASIA DERC-FENSKE: Should
we take this one first?

00:31:24.400 --> 00:31:26.760
PAUL SAXMAN: --free to
step up to the mic.

00:31:26.760 --> 00:31:29.690
And again, if you don't want to
ask questions here, we'll

00:31:29.690 --> 00:31:31.140
be in the Sandbox
in a little bit.

00:31:31.140 --> 00:31:32.523
KASIA DERC-FENSKE: Feel
free to clap.

00:31:32.523 --> 00:31:39.710
[APPLAUSE]

00:31:39.710 --> 00:31:40.440
PAUL SAXMAN: Now I feel bad.

00:31:40.440 --> 00:31:41.780
You had to ask them to.

00:31:41.780 --> 00:31:43.632
Oh, that's horrible.

00:31:43.632 --> 00:31:45.420
KASIA DERC-FENSKE: That was
honest and sincere.

00:31:45.420 --> 00:31:48.950
So we have one question
from the online--

00:31:48.950 --> 00:31:51.380
PAUL SAXMAN: This guy
looks familiar.

00:31:51.380 --> 00:31:52.415
KASIA DERC-FENSKE: But that
doesn't even get to--

00:31:52.415 --> 00:31:54.660
let's answer this one,
and then queue, OK?

00:31:54.660 --> 00:31:54.940
PAUL SAXMAN: Sure.

00:31:54.940 --> 00:31:57.230
We're going to take a
question from our

00:31:57.230 --> 00:31:59.080
I/O Extended audience.

00:31:59.080 --> 00:32:01.780
So the question is, how do you
deal with different address

00:32:01.780 --> 00:32:03.320
formats in different
countries?

00:32:03.320 --> 00:32:06.140
How does the API handle these?

00:32:06.140 --> 00:32:09.560
So actually we have in the
Google Places API is--

00:32:09.560 --> 00:32:10.980
actually, most of our APIs--

00:32:10.980 --> 00:32:14.220
we have actually the
address components.

00:32:14.220 --> 00:32:17.810
So the address is broken apart
into administrative levels--

00:32:17.810 --> 00:32:21.100
country, zip codes
or postal codes.

00:32:21.100 --> 00:32:22.550
It's pretty--

00:32:22.550 --> 00:32:24.800
I'd say it's a pretty
standard format that

00:32:24.800 --> 00:32:26.570
kind of maps it to--

00:32:26.570 --> 00:32:28.470
KASIA DERC-FENSKE: Basically you
can build the format that

00:32:28.470 --> 00:32:30.670
you like, that your application
needs from the

00:32:30.670 --> 00:32:31.540
components.

00:32:31.540 --> 00:32:33.830
And usually, we also try to make
the formatted address and

00:32:33.830 --> 00:32:36.520
the vicinity match the
given country.

00:32:36.520 --> 00:32:39.690
So when you set the language for
the query, we would try to

00:32:39.690 --> 00:32:41.410
return the best formatted
address.

00:32:41.410 --> 00:32:43.425
If you don't like it, you
can still change it.

00:32:43.425 --> 00:32:43.920
PAUL SAXMAN: Yeah.

00:32:43.920 --> 00:32:46.800
So formatted address localized,
the address

00:32:46.800 --> 00:32:47.400
components--

00:32:47.400 --> 00:32:48.930
you construct it yourself.

00:32:48.930 --> 00:32:52.660
But everything is pretty laid
out clearly for you, so.

00:32:52.660 --> 00:32:54.270
So yeah, let's take an audience

00:32:54.270 --> 00:32:57.710
question, in the front.

00:32:57.710 --> 00:32:58.050
AUDIENCE: Hey guys.

00:32:58.050 --> 00:32:58.700
I'm Aaron.

00:32:58.700 --> 00:33:02.400
And my question was-- so earlier
today, the geofencing

00:33:02.400 --> 00:33:03.520
stuff was announced.

00:33:03.520 --> 00:33:06.795
And I was surprised you didn't
talk much about it.

00:33:06.795 --> 00:33:08.630
What plans do you
have for that?

00:33:08.630 --> 00:33:10.890
Part of the talk was predicting
where the user is

00:33:10.890 --> 00:33:12.710
going to be, and using
that information.

00:33:12.710 --> 00:33:14.850
So do you have anything
special up your

00:33:14.850 --> 00:33:16.830
sleeve related to that?

00:33:16.830 --> 00:33:20.020
PAUL SAXMAN: We don't really
want to steal their thunder.

00:33:20.020 --> 00:33:21.600
The talk is actually tomorrow.

00:33:21.600 --> 00:33:24.000
And I definitely recommend
that you go there.

00:33:24.000 --> 00:33:26.120
There's a lot of stuff that's
going to be in that talk that

00:33:26.120 --> 00:33:29.530
is very relevant to actually
building location-based

00:33:29.530 --> 00:33:30.630
applications.

00:33:30.630 --> 00:33:32.470
But it is specific to Android.

00:33:32.470 --> 00:33:35.180
So definitely go to that talk.

00:33:35.180 --> 00:33:37.110
Very cool stuff.

00:33:37.110 --> 00:33:39.230
And we're, on the map scene,
very excited that it's

00:33:39.230 --> 00:33:42.420
available to Android
developers.

00:33:42.420 --> 00:33:43.920
KASIA DERC-FENSKE: OK, there's
a question in the back.

00:33:43.920 --> 00:33:44.450
PAUL SAXMAN: Cool.

00:33:44.450 --> 00:33:46.320
AUDIENCE: Hey, you guys.

00:33:46.320 --> 00:33:50.580
Is there any plans to have
instead of waypoints to get

00:33:50.580 --> 00:33:53.050
their actions, avoid points?

00:33:53.050 --> 00:33:55.390
Like, I don't want
to pass here.

00:33:55.390 --> 00:33:56.820
KASIA DERC-FENSKE: Oh, yes.

00:33:56.820 --> 00:33:59.506
Actually, the demos that
we saw used waypoints.

00:33:59.506 --> 00:34:02.040
AUDIENCE: No, instead
of waypoints.

00:34:02.040 --> 00:34:02.860
KASIA DERC-FENSKE: Sorry?

00:34:02.860 --> 00:34:05.120
AUDIENCE: Instead
of waypoints.

00:34:05.120 --> 00:34:08.860
I mean, I want to say the point
I don't want to pass.

00:34:08.860 --> 00:34:09.940
KASIA DERC-FENSKE: Ah, you
don't want to pass.

00:34:09.940 --> 00:34:11.610
PAUL SAXMAN: Oh, so
places to avoid.

00:34:11.610 --> 00:34:12.600
I see what you're saying.

00:34:12.600 --> 00:34:14.860
KASIA DERC-FENSKE: But what I
would suggest that in such

00:34:14.860 --> 00:34:20.270
cases, if you specify that you
want route alternatives, you

00:34:20.270 --> 00:34:23.429
can get up to three
routes, I think.

00:34:23.429 --> 00:34:24.480
So you can use that.

00:34:24.480 --> 00:34:27.670
And if it's still passing
through the point that you

00:34:27.670 --> 00:34:31.489
wouldn't like to pass through,
simply take the point in close

00:34:31.489 --> 00:34:34.489
proximity, and make
it the waypoint.

00:34:34.489 --> 00:34:36.840
But another good thing
to do is file a

00:34:36.840 --> 00:34:38.650
feature request using--

00:34:38.650 --> 00:34:41.850
we have feature tracker
on codedworlds.com.

00:34:41.850 --> 00:34:44.190
And we really look for
your feedback.

00:34:44.190 --> 00:34:47.179
So if you create a feature, you
find a feature like this--

00:34:47.179 --> 00:34:50.885
and a lot of people start, we
actually look at it, and if we

00:34:50.885 --> 00:34:52.107
can, we implement it.

00:34:52.107 --> 00:34:52.861
AUDIENCE: OK, great.

00:34:52.861 --> 00:34:53.239
Thanks.

00:34:53.239 --> 00:34:55.010
PAUL SAXMAN: And not necessarily
avoiding points,

00:34:55.010 --> 00:34:56.780
but there's also in the
Directions API, you can

00:34:56.780 --> 00:34:58.820
actually avoid-- do things
like avoid toll ways, and

00:34:58.820 --> 00:35:00.220
avoid highways.

00:35:00.220 --> 00:35:04.440
So if you want to actually
plot a scenic drive, as

00:35:04.440 --> 00:35:08.420
opposed to a route up 101,
you can do that.

00:35:08.420 --> 00:35:11.640
KASIA DERC-FENSKE:
101 is scenic.

00:35:11.640 --> 00:35:12.055
PAUL SAXMAN: Cool.

00:35:12.055 --> 00:35:12.470
KASIA DERC-FENSKE: OK.

00:35:12.470 --> 00:35:12.810
Thanks.

00:35:12.810 --> 00:35:14.060
Thank you.

00:35:16.010 --> 00:35:17.150
AUDIENCE: Hi.

00:35:17.150 --> 00:35:22.650
Is there a way with the Places
API to get a place that

00:35:22.650 --> 00:35:25.600
corresponds to a textual
address?

00:35:25.600 --> 00:35:30.460
Let's say I have an address
in the 1235 Avenue blah.

00:35:30.460 --> 00:35:33.030
And I want to know if that's a
place, or what's the place

00:35:33.030 --> 00:35:33.910
that corresponds to that.

00:35:33.910 --> 00:35:35.850
Is there a way to do that?

00:35:35.850 --> 00:35:36.340
PAUL SAXMAN: So, yeah.

00:35:36.340 --> 00:35:38.810
So I think that's a really
great use case.

00:35:38.810 --> 00:35:41.760
So essentially geocoding,
so you want to--

00:35:41.760 --> 00:35:43.260
AUDIENCE: The reverse
lookup, in a way.

00:35:43.260 --> 00:35:44.000
KASIA DERC-FENSKE: Yeah.

00:35:44.000 --> 00:35:45.120
Places API does that.

00:35:45.120 --> 00:35:46.340
And you can specify
an address.

00:35:46.340 --> 00:35:48.190
You get a bunch of places.

00:35:48.190 --> 00:35:48.600
PAUL SAXMAN: Yeah.

00:35:48.600 --> 00:35:50.810
Yeah, so in your--

00:35:50.810 --> 00:35:52.260
I mean, go ahead.

00:35:52.260 --> 00:35:55.110
KASIA DERC-FENSKE: So I think
with the best solution here is

00:35:55.110 --> 00:35:56.870
that Places API is extremely
flexible.

00:35:56.870 --> 00:35:59.020
You can look for a place by--

00:35:59.020 --> 00:36:02.230
in the query parameter by giving
a URL of a web page,

00:36:02.230 --> 00:36:05.360
and it will return the
place information.

00:36:05.360 --> 00:36:08.060
You can also give the address,
in which point you might get

00:36:08.060 --> 00:36:09.550
more results back.

00:36:09.550 --> 00:36:14.100
But if you check the address,
you should simply look for the

00:36:14.100 --> 00:36:16.120
matching address.

00:36:16.120 --> 00:36:17.490
And it should work flawlessly.

00:36:17.490 --> 00:36:19.260
PAUL SAXMAN: Yeah, so the
auto-complete service is a

00:36:19.260 --> 00:36:20.590
really great thing
to use as well.

00:36:20.590 --> 00:36:21.890
I mean, you can--

00:36:21.890 --> 00:36:24.910
it's actually a real-time
service, so the user is typing

00:36:24.910 --> 00:36:26.330
it, you're going to
get results back.

00:36:26.330 --> 00:36:28.300
But you can actually pass a
full address in there, and

00:36:28.300 --> 00:36:31.470
it'll do its best job to find
the match based on how much

00:36:31.470 --> 00:36:33.170
information you put in.

00:36:33.170 --> 00:36:35.610
So there's a number of different
things you can try.

00:36:35.610 --> 00:36:39.280
But I'm pretty sure it's
something one of the APIs and

00:36:39.280 --> 00:36:40.020
the Places API will do that.

00:36:40.020 --> 00:36:40.820
AUDIENCE: Thank you.

00:36:40.820 --> 00:36:42.530
KASIA DERC-FENSKE: I think
we're short on time.

00:36:42.530 --> 00:36:45.810
PAUL SAXMAN: Yeah, we have just
a couple more minutes, so

00:36:45.810 --> 00:36:46.230
come on up.

00:36:46.230 --> 00:36:47.630
And then like I said, we're
going to head over to the

00:36:47.630 --> 00:36:52.530
Sandbox after this, so every
question gets answered.

00:36:52.530 --> 00:36:52.750
AUDIENCE: Cool.

00:36:52.750 --> 00:36:56.030
This is a two-part question
on reverse geocoding.

00:36:56.030 --> 00:37:00.170
So app that we're building
does a lot of reverse

00:37:00.170 --> 00:37:03.510
geocoding, tries to take,
let's say, 50 photos the

00:37:03.510 --> 00:37:06.370
user's taken that are all
geotagged, and put together

00:37:06.370 --> 00:37:09.470
like an itinerary of
where they went--

00:37:09.470 --> 00:37:10.700
cities.

00:37:10.700 --> 00:37:13.330
And so we're running into
rate-limiting problems,

00:37:13.330 --> 00:37:15.560
because we want to do that
processing on the server.

00:37:15.560 --> 00:37:18.280
So we've been pushing it off on
the clients so that each of

00:37:18.280 --> 00:37:20.370
the clients can do their
reverse geocoding.

00:37:20.370 --> 00:37:21.080
PAUL SAXMAN: That's
a good idea.

00:37:21.080 --> 00:37:25.070
AUDIENCE: But even then, because
we do a lot of waiting

00:37:25.070 --> 00:37:28.150
and then syncing all at the same
time, we're still kind of

00:37:28.150 --> 00:37:29.540
running into that.

00:37:29.540 --> 00:37:31.700
What do you suggest for that?

00:37:31.700 --> 00:37:33.710
PAUL SAXMAN: So if you actually
look at our Terms of

00:37:33.710 --> 00:37:36.580
Service, we do have
fairly, I'd say,

00:37:36.580 --> 00:37:39.040
generous caching policy.

00:37:39.040 --> 00:37:40.860
So you are able to cache
information.

00:37:40.860 --> 00:37:42.210
It's up to 30 days.

00:37:42.210 --> 00:37:45.360
You have to cache it securely,
and you have to refresh it

00:37:45.360 --> 00:37:48.550
regularly, and that's within
that 30-day time frame.

00:37:48.550 --> 00:37:49.620
KASIA DERC-FENSKE: Did
you also enable

00:37:49.620 --> 00:37:53.490
billing in the API console?

00:37:53.490 --> 00:37:55.250
AUDIENCE: Yeah, I can't
remember if we

00:37:55.250 --> 00:37:55.910
did that yet or not.

00:37:55.910 --> 00:37:57.280
KASIA DERC-FENSKE: So actually,
if you enable

00:37:57.280 --> 00:37:59.763
billing,, you get a higher quota
for the service side.

00:37:59.763 --> 00:38:02.240
But if you don't-- until you
reach a certain limit, you

00:38:02.240 --> 00:38:04.040
will not get charged for that.

00:38:04.040 --> 00:38:07.220
So come up to us, and we can
explain how to set it up, and

00:38:07.220 --> 00:38:08.540
how does it work.

00:38:08.540 --> 00:38:13.490
If you're overusing your quota,
you can always try to

00:38:13.490 --> 00:38:15.800
reach out to us to get
a business license.

00:38:15.800 --> 00:38:16.540
AUDIENCE: OK.

00:38:16.540 --> 00:38:17.790
Thanks.

00:38:19.940 --> 00:38:21.150
PAUL SAXMAN: We'll do--

00:38:21.150 --> 00:38:23.690
actually, we just have two more,
and then we'll mosey

00:38:23.690 --> 00:38:25.300
over to the sandbox.

00:38:25.300 --> 00:38:26.660
AUDIENCE: OK, hi guys.

00:38:26.660 --> 00:38:30.460
I have one question regarding
your Android API.

00:38:30.460 --> 00:38:33.560
Is there any possibility to add
gradient information to a

00:38:33.560 --> 00:38:36.830
vector-based route drawing
at the moment?

00:38:36.830 --> 00:38:39.160
PAUL SAXMAN: Can you
repeat that please?

00:38:39.160 --> 00:38:42.130
AUDIENCE: I have a question
about the Android API.

00:38:42.130 --> 00:38:47.000
Is there any possibility to add
gradient information to a

00:38:47.000 --> 00:38:49.870
vector-based route drawing?

00:38:49.870 --> 00:38:50.620
PAUL SAXMAN: A gradient?

00:38:50.620 --> 00:38:53.550
So elevation?

00:38:53.550 --> 00:38:56.100
So the Elevation API that
Kasia showed in the web

00:38:56.100 --> 00:38:57.980
application, there's
a web service

00:38:57.980 --> 00:38:59.010
equivalent to that as well.

00:38:59.010 --> 00:38:59.730
AUDIENCE: No, I don't mean.

00:38:59.730 --> 00:39:02.370
I think that you can use
different colors for different

00:39:02.370 --> 00:39:03.620
points in the route?

00:39:05.950 --> 00:39:09.140
KASIA DERC-FENSKE: Essentially,
there are overlay

00:39:09.140 --> 00:39:12.230
in the Android API.

00:39:12.230 --> 00:39:13.580
So you can draw your own--

00:39:13.580 --> 00:39:16.170
AUDIENCE: That's rasterize.

00:39:16.170 --> 00:39:17.450
KASIA DERC-FENSKE: You have
to convert, yeah.

00:39:17.450 --> 00:39:21.790
So it's up to your own
resources to draw

00:39:21.790 --> 00:39:23.040
vector data for now.

00:39:25.280 --> 00:39:30.060
You can build an overlay
using your raster data.

00:39:30.060 --> 00:39:31.830
PAUL SAXMAN: I've seen one app
that actually does a really

00:39:31.830 --> 00:39:33.380
nice job of that.

00:39:33.380 --> 00:39:35.020
I've kind of lost it off
the top my head.

00:39:35.020 --> 00:39:36.220
But they're essentially
doing that.

00:39:36.220 --> 00:39:37.560
AUDIENCE: It's called Urban
Testing bike apps,

00:39:37.560 --> 00:39:38.950
because it's ours.

00:39:38.950 --> 00:39:41.030
PAUL SAXMAN: Yeah.

00:39:41.030 --> 00:39:44.330
Yeah, basically you draw the
polyline and do it in a bitmap

00:39:44.330 --> 00:39:45.600
on Android.

00:39:45.600 --> 00:39:47.340
And then you actually can
convert that into either a

00:39:47.340 --> 00:39:49.590
tile overlay or a
ground overlay.

00:39:49.590 --> 00:39:52.160
Tile overlay, you get
better zoom control.

00:39:52.160 --> 00:39:54.660
AUDIENCE: We're using with
the tile overlay.

00:39:54.660 --> 00:39:55.260
PAUL SAXMAN: Perfect.

00:39:55.260 --> 00:39:56.520
Yeah, that's generally
the route.

00:39:56.520 --> 00:39:59.010
I mean, I think we do have a
feature request open for this,

00:39:59.010 --> 00:40:01.550
for a kind of multi-color
polylines.

00:40:01.550 --> 00:40:03.770
KASIA DERC-FENSKE: And you can
also build this yourself and

00:40:03.770 --> 00:40:05.760
then upload it somewhere
so that other

00:40:05.760 --> 00:40:07.730
developers can use it.

00:40:07.730 --> 00:40:08.970
PAUL SAXMAN: Actually,
we have-- we're

00:40:08.970 --> 00:40:09.860
actually over time.

00:40:09.860 --> 00:40:13.030
So maybe last question, we'll
take it over in the Sandbox,

00:40:13.030 --> 00:40:14.030
if that's OK.

00:40:14.030 --> 00:40:15.320
AUDIENCE: Short question
possible?

00:40:15.320 --> 00:40:16.660
PAUL SAXMAN: Sure.

00:40:16.660 --> 00:40:20.350
AUDIENCE: The user remarks in
the Places API, they tend to

00:40:20.350 --> 00:40:22.010
be in different languages.

00:40:22.010 --> 00:40:25.600
Is it possible, according to the
locale of the device, to

00:40:25.600 --> 00:40:26.820
sort them out?

00:40:26.820 --> 00:40:30.450
So you have a French person
using, he only

00:40:30.450 --> 00:40:34.052
gets the French comments.

00:40:34.052 --> 00:40:37.490
KASIA DERC-FENSKE: Oh, it's with
the language I think this

00:40:37.490 --> 00:40:39.850
is not possible yet.

00:40:39.850 --> 00:40:41.690
PAUL SAXMAN: Yeah, that one
I'd have to do a little

00:40:41.690 --> 00:40:42.420
research on.

00:40:42.420 --> 00:40:44.810
I don't that's possible off
the top of my head.

00:40:44.810 --> 00:40:47.150
But if you can join us over
the Sandbox, we can do a

00:40:47.150 --> 00:40:47.970
little bit of research.

00:40:47.970 --> 00:40:48.074
AUDIENCE: OK.

00:40:48.074 --> 00:40:48.530
Thank you.

00:40:48.530 --> 00:40:48.930
KASIA DERC-FENSKE: OK.

00:40:48.930 --> 00:40:50.310
Thank you so much for
attending, guys.

00:40:50.310 --> 00:40:51.560
PAUL SAXMAN: Yeah,
thanks again.

