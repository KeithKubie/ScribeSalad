WEBVTT
Kind: captions
Language: en

00:00:01.720 --> 00:00:02.780
ALI AFSHAR: Hi, everybody.

00:00:02.780 --> 00:00:05.600
Welcome to Google
Developers Live.

00:00:05.600 --> 00:00:07.970
My name's Ali, and today I'm
going to be talking to you

00:00:07.970 --> 00:00:12.010
about revisions in the Google
Drive API and revisions, in

00:00:12.010 --> 00:00:14.190
general, in Google Drive.

00:00:14.190 --> 00:00:16.210
So firstly, what
is a revision?

00:00:16.210 --> 00:00:21.740
Well, every time you change a
file in Google Drive, it is

00:00:21.740 --> 00:00:25.160
snapshotted, and the previous
files are saved.

00:00:25.160 --> 00:00:28.270
So this way, you have a very
good Undo history that goes

00:00:28.270 --> 00:00:30.820
back for a long, long
period of time.

00:00:30.820 --> 00:00:33.380
This is not an alien concept to
you if you're a developer.

00:00:33.380 --> 00:00:36.090
This is exactly how version
control systems work.

00:00:36.090 --> 00:00:39.920
And if you used CVS back in the
day and Subversion since

00:00:39.920 --> 00:00:42.980
then, and much more recently
Git and Mercurial and these

00:00:42.980 --> 00:00:47.280
nicer tools like this, Google
Drive has this built in, OK?

00:00:47.280 --> 00:00:49.850
So anything you can do in Google
Drive, you can also do

00:00:49.850 --> 00:00:51.900
with a Google Drive API.

00:00:51.900 --> 00:00:56.100
And that's why we have full
revision management there.

00:00:56.100 --> 00:01:00.810
So when you upload a file, if
it's been updated or if you

00:01:00.810 --> 00:01:03.650
just modified some of the
metadata, you can pass the

00:01:03.650 --> 00:01:07.240
flag to make sure that a new
revision is created.

00:01:07.240 --> 00:01:10.430
Or you can say, no, I don't want
a new revision created,

00:01:10.430 --> 00:01:14.320
and the last revision remains
as the current one.

00:01:14.320 --> 00:01:15.940
So really, really useful.

00:01:15.940 --> 00:01:17.860
It means you won't lose
your history.

00:01:17.860 --> 00:01:20.930
Now, along with the revisions
come a few

00:01:20.930 --> 00:01:22.380
extra little features.

00:01:22.380 --> 00:01:24.980
So each revision is saved
against a file.

00:01:24.980 --> 00:01:28.080
So you can say, give me all the
revisions for this file.

00:01:28.080 --> 00:01:31.700
Now, each of those revisions
also can be downloaded.

00:01:31.700 --> 00:01:33.420
You can view the metadata.

00:01:33.420 --> 00:01:35.480
You can export them if
they're a Google Doc.

00:01:35.480 --> 00:01:39.500
So each of these revisions
behaves almost like a file

00:01:39.500 --> 00:01:41.950
resource does in the API.

00:01:41.950 --> 00:01:45.710
So when normally you would get
a file or export a file or

00:01:45.710 --> 00:01:49.300
download a file, with a
revision, you can do them for

00:01:49.300 --> 00:01:53.110
each of the revisions of that
file, so that's really, really

00:01:53.110 --> 00:01:56.010
useful and essentially a
version control system.

00:01:56.010 --> 00:01:57.700
So that's the first part--

00:01:57.700 --> 00:01:59.880
downloading and grabbing
metadata from

00:01:59.880 --> 00:02:01.130
the individual revisions.

00:02:03.790 --> 00:02:06.880
Another part of this is
publishing revisions.

00:02:06.880 --> 00:02:10.419
Now, we have a feature where you
can actually say, I want

00:02:10.419 --> 00:02:16.080
this revision of a file to be
published to the world, OK?

00:02:16.080 --> 00:02:18.530
Now, you do that by setting the
published property, and

00:02:18.530 --> 00:02:19.430
obviously that's a Boolean.

00:02:19.430 --> 00:02:23.510
You set it to "publish
true/false." If a revision has

00:02:23.510 --> 00:02:27.950
been published, then a new field
appears there, and that

00:02:27.950 --> 00:02:29.750
is the published link field.

00:02:29.750 --> 00:02:32.530
And that gives you a link to a
URL, which you can give that

00:02:32.530 --> 00:02:34.010
to people to publish.

00:02:34.010 --> 00:02:36.490
So you can say, I want to
publish, say, revision number

00:02:36.490 --> 00:02:38.450
three of a file.

00:02:38.450 --> 00:02:42.130
Now, when you create revision
number four, four will not be

00:02:42.130 --> 00:02:45.810
automatically published unless
you publish it or unless you

00:02:45.810 --> 00:02:49.620
set a flag called "publish
auto," which means publish the

00:02:49.620 --> 00:02:52.460
most recent revision,
whatever it is.

00:02:52.460 --> 00:02:54.540
That's really useful, because if
you think about the normal

00:02:54.540 --> 00:02:59.320
workflow of creating content
to go online or within your

00:02:59.320 --> 00:03:03.125
company intranet or whatever,
usually you want to create the

00:03:03.125 --> 00:03:06.860
latest revision, have a round
of reviews, maybe go over it

00:03:06.860 --> 00:03:09.470
yourself, maybe think about it
for a while, and then publish.

00:03:09.470 --> 00:03:11.820
So the publish step usually
comes after the content

00:03:11.820 --> 00:03:12.990
creation step.

00:03:12.990 --> 00:03:15.030
So that would be a
workflow here.

00:03:15.030 --> 00:03:18.780
And again, the API is
there to help you.

00:03:18.780 --> 00:03:21.900
Create the file, publish one
revision, modify it.

00:03:21.900 --> 00:03:23.630
When you're happy with
it, publish the next

00:03:23.630 --> 00:03:25.350
revision, and so on.

00:03:25.350 --> 00:03:28.440
So essentially, that is all
there is to revisions.

00:03:28.440 --> 00:03:31.750
Just to recap, a revision is
kind of like a file, but each

00:03:31.750 --> 00:03:34.700
time you save a file, each time
you modify file, a new

00:03:34.700 --> 00:03:36.130
revision is created.

00:03:36.130 --> 00:03:40.410
These are stored, and you can
grab them one by one and

00:03:40.410 --> 00:03:42.650
download their content or look
at their title, whatever you

00:03:42.650 --> 00:03:43.700
want to do.

00:03:43.700 --> 00:03:45.910
Additionally, we have publishing
functionality.

00:03:45.910 --> 00:03:48.920
So you can publish a revision,
you can automatically publish

00:03:48.920 --> 00:03:51.710
the latest revision, and
you can keep revisions

00:03:51.710 --> 00:03:53.040
unpublished.

00:03:53.040 --> 00:03:54.060
So thanks very much.

00:03:54.060 --> 00:03:56.560
That was a very short
introduction.

00:03:56.560 --> 00:03:57.680
There's not much to it there.

00:03:57.680 --> 00:04:00.230
If you need the feature,
you will use it.

00:04:00.230 --> 00:04:03.490
Just to go on, there is also--

00:04:03.490 --> 00:04:05.060
yep, a question on YouTube.

00:04:05.060 --> 00:04:09.770
This is a great one-- "turning
Google Drive into Subversion.

00:04:09.770 --> 00:04:13.650
I guess I do care." So I guess
they're saying, can I turn a

00:04:13.650 --> 00:04:16.450
Subversion history into a
Google Drive history?

00:04:16.450 --> 00:04:17.339
Yeah, you can, actually.

00:04:17.339 --> 00:04:17.820
Why not?

00:04:17.820 --> 00:04:18.940
And vice versa.

00:04:18.940 --> 00:04:22.320
So to go from Google Drive to
Subversion, what you would do

00:04:22.320 --> 00:04:25.050
is you would find the file you
want or find all the files you

00:04:25.050 --> 00:04:27.000
want, but you'd have
to individually

00:04:27.000 --> 00:04:28.360
on a per-file basis.

00:04:28.360 --> 00:04:30.030
That's really the
difference here.

00:04:30.030 --> 00:04:32.450
Subversion is a repository-based
thing.

00:04:32.450 --> 00:04:34.470
Google Drive is a file-based
thing.

00:04:34.470 --> 00:04:36.200
So you would get the file.

00:04:36.200 --> 00:04:39.180
You would download the first
revision, copy it into your

00:04:39.180 --> 00:04:43.880
Subversion repository, and
commit it there, download the

00:04:43.880 --> 00:04:47.210
next revision, commit it there,
and you would build the

00:04:47.210 --> 00:04:48.020
mapping like that.

00:04:48.020 --> 00:04:50.820
And you could store the
revision idea against

00:04:50.820 --> 00:04:53.520
Subversion's revision ID.

00:04:53.520 --> 00:04:55.400
And you could store them
somewhere in the database or

00:04:55.400 --> 00:04:56.670
something, or a file.

00:04:56.670 --> 00:04:57.730
And that would work for you.

00:04:57.730 --> 00:05:01.700
To go in the opposite direction,
you would check out

00:05:01.700 --> 00:05:04.672
a specific Subversion
revision.

00:05:04.672 --> 00:05:06.050
I can't even remember
how to do that.

00:05:06.050 --> 00:05:08.710
It's been a long time since, but
it's probably like minus R

00:05:08.710 --> 00:05:10.340
and then the revision number.

00:05:10.340 --> 00:05:12.100
Then you would check that
out into a local file.

00:05:12.100 --> 00:05:16.210
Then you would upload that file
if it's the first one.

00:05:16.210 --> 00:05:19.770
Subsequent checkouts, you would
then update the file,

00:05:19.770 --> 00:05:21.650
causing a new revision
to be created.

00:05:21.650 --> 00:05:23.170
And again, while you're
doing it, I would

00:05:23.170 --> 00:05:24.980
probably save the metadata.

00:05:24.980 --> 00:05:28.560
So yes, it's not quite the
same as Subversion.

00:05:28.560 --> 00:05:31.230
You wouldn't really use it to
manage source code because of

00:05:31.230 --> 00:05:32.810
the non-repository
style nature.

00:05:32.810 --> 00:05:35.040
But it's very similar
functionality, and you could

00:05:35.040 --> 00:05:39.080
easily create a mapping between
the two of them.

00:05:39.080 --> 00:05:41.240
So that's Subversion.

00:05:41.240 --> 00:05:43.780
These days, people don't really
use that too much.

00:05:43.780 --> 00:05:47.260
So thanks very much
for watching.

00:05:47.260 --> 00:05:49.210
If you have any questions,
please ask them on Stack

00:05:49.210 --> 00:05:52.600
Overflow, or get in
touch on Google+.

00:05:52.600 --> 00:05:53.690
Thank you very much.

00:05:53.690 --> 00:05:54.940
Bye-bye.

00:06:01.010 --> 00:06:16.367
[MUSIC PLAYING]

