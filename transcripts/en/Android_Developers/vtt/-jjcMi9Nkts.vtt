WEBVTT
Kind: captions
Language: en

00:00:09.240 --> 00:00:11.470
TREVOR JOHNS: Hello, and welcome
to Dear Android, the

00:00:11.470 --> 00:00:12.760
show previously known
as Android

00:00:12.760 --> 00:00:14.520
Developer Office Hours.

00:00:14.520 --> 00:00:17.490
We got a bit tired of developers
always trying to

00:00:17.490 --> 00:00:19.170
show us up by asking us a
question that we couldn't

00:00:19.170 --> 00:00:20.380
answer every week.

00:00:20.380 --> 00:00:22.840
So we decided to try new
format for a change.

00:00:22.840 --> 00:00:25.720
We'll be selecting the best
Android application

00:00:25.720 --> 00:00:28.660
development questions from
across the internet, including

00:00:28.660 --> 00:00:31.720
Google+, and answering them
for you here on YouTube.

00:00:31.720 --> 00:00:33.810
If you're watching this live,
which is every Wednesday at

00:00:33.810 --> 00:00:36.460
2:00 PM Pacific, we'll be
hanging around for a few

00:00:36.460 --> 00:00:40.360
minutes after each episode to
answer any questions about the

00:00:40.360 --> 00:00:41.810
current episode.

00:00:41.810 --> 00:00:44.710
So with that out of the way,
let's go ahead and move on to

00:00:44.710 --> 00:00:47.880
this week's question, which
comes from Dancio on Stack

00:00:47.880 --> 00:00:50.240
Overflow, who's a user
from Poland.

00:00:50.240 --> 00:00:54.655
He asks, if I have a custom
service that I'm broadcasting

00:00:54.655 --> 00:00:58.980
via Bonjour, and that I'd like
to either broadcast or

00:00:58.980 --> 00:01:01.200
discover using wi-fi
or Bluetooth, is

00:01:01.200 --> 00:01:03.130
this possible on Android?

00:01:03.130 --> 00:01:05.720
To answer this question, we
have Alex Lucas, who is a

00:01:05.720 --> 00:01:08.150
member of our Android developer
relations team, who

00:01:08.150 --> 00:01:13.460
wrote many of the docs about
both network service discovery

00:01:13.460 --> 00:01:16.730
and wi-fi on our developers
site.

00:01:16.730 --> 00:01:19.450
Alex, could you help us
answer this question?

00:01:19.450 --> 00:01:20.580
ALEX LUCAS: Absolutely.

00:01:20.580 --> 00:01:24.640
So to break the question into
two sub-parts, will

00:01:24.640 --> 00:01:27.460
Bonjour-like services work
on Bluetooth and will

00:01:27.460 --> 00:01:29.320
they work on wi-fi?

00:01:29.320 --> 00:01:32.730
The answer is, yes on wi-fi,
no on Bluetooth.

00:01:32.730 --> 00:01:33.700
Thank you for tuning in.

00:01:33.700 --> 00:01:34.850
That's our show.

00:01:34.850 --> 00:01:36.540
TREVOR JOHNS: See you, Alex.

00:01:36.540 --> 00:01:37.300
ALEX LUCAS: Bye.

00:01:37.300 --> 00:01:39.710
So we should actually probably
answer this question in a

00:01:39.710 --> 00:01:41.170
little bit more detail.

00:01:41.170 --> 00:01:43.860
To start with the Bluetooth
part, Bluetooth is a really

00:01:43.860 --> 00:01:47.020
great protocol for lots of
device to device applications,

00:01:47.020 --> 00:01:50.550
like streaming music
or communicating

00:01:50.550 --> 00:01:52.280
with heart-rate monitors.

00:01:52.280 --> 00:01:56.090
But on Android, it does not
actually support TCP.

00:01:56.090 --> 00:01:59.600
So what that means is you cannot
create a TCP socket and

00:01:59.600 --> 00:02:03.130
connect to it over Bluetooth
to other devices.

00:02:03.130 --> 00:02:05.660
Because network service
discovery, or at least the

00:02:05.660 --> 00:02:08.620
Android implementation of
network service discovery run

00:02:08.620 --> 00:02:11.580
over TCP, this creates a
fundamental incompatibility

00:02:11.580 --> 00:02:14.270
between Bluetooth and TCP.

00:02:14.270 --> 00:02:17.472
That said, it does actually
work over wi-fi.

00:02:17.472 --> 00:02:17.870
TREVOR JOHNS: All right.

00:02:17.870 --> 00:02:20.225
So before we go into a bit more
detail, let's give a bit

00:02:20.225 --> 00:02:22.150
of background about what
exactly what NSD is.

00:02:22.150 --> 00:02:26.440
So NSD is network service
discovery, which is Android's

00:02:26.440 --> 00:02:31.930
implementation of multicast
DNS, using the DNS service

00:02:31.930 --> 00:02:33.440
discovery protocol.

00:02:33.440 --> 00:02:35.630
And what this does is it
allows applications to

00:02:35.630 --> 00:02:39.040
broadcast to their existence
on the local network, along

00:02:39.040 --> 00:02:41.890
with connection details for that
application to any other

00:02:41.890 --> 00:02:45.240
devices in the same proximity,
which would be any other

00:02:45.240 --> 00:02:47.760
devices, again, on the
same local network.

00:02:47.760 --> 00:02:50.920
So this is useful for things
like social applications,

00:02:50.920 --> 00:02:53.360
games, or even networks
services like

00:02:53.360 --> 00:02:55.160
printers or web servers.

00:02:55.160 --> 00:02:58.030
So that way you can find out
what devices are nearby.

00:02:58.030 --> 00:03:00.260
ALEX LUCAS: When NSD broadcasts
this information

00:03:00.260 --> 00:03:02.700
over the network, there's four
fundamental pieces of

00:03:02.700 --> 00:03:04.540
information it's going
to send over.

00:03:04.540 --> 00:03:06.570
One of them is the device
identifier.

00:03:06.570 --> 00:03:09.440
The device identifier is often
going to be either the user's

00:03:09.440 --> 00:03:12.360
name or the device host name.

00:03:12.360 --> 00:03:14.340
Another item is going to
be the service name.

00:03:14.340 --> 00:03:16.440
The service name is often going
to be the name of the

00:03:16.440 --> 00:03:17.450
application.

00:03:17.450 --> 00:03:19.770
For instance, if you have a
game called Replica Island

00:03:19.770 --> 00:03:22.270
that you want to play with other
users over the network,

00:03:22.270 --> 00:03:25.800
and Replica Island has network
service discovery built in,

00:03:25.800 --> 00:03:28.100
the service name is probably
going to be something like

00:03:28.100 --> 00:03:29.830
Replica Island.

00:03:29.830 --> 00:03:32.400
Another item is going to be the
host address, which you

00:03:32.400 --> 00:03:35.220
don't actually have to enter
yourself at runtime.

00:03:35.220 --> 00:03:37.530
Android will just figure that
out for you and send that

00:03:37.530 --> 00:03:39.720
along and the NSD packets.

00:03:39.720 --> 00:03:41.740
The final item is going
to be the port.

00:03:41.740 --> 00:03:46.010
And I wanted to make a special
note about the port, which is

00:03:46.010 --> 00:03:52.610
that for mobile applications,
the easiest thing to do when

00:03:52.610 --> 00:03:55.480
you're designing the game or
the application, is not

00:03:55.480 --> 00:03:58.360
actually to pick your own
port at runtime or

00:03:58.360 --> 00:04:00.060
hard code one in.

00:04:00.060 --> 00:04:03.050
What you want to do is get
a server socket and

00:04:03.050 --> 00:04:04.680
set it to port zero.

00:04:04.680 --> 00:04:06.970
And what that's going to do is
it's going to tell the Android

00:04:06.970 --> 00:04:10.340
framework, just give me whatever
port is available on

00:04:10.340 --> 00:04:12.190
the system.

00:04:12.190 --> 00:04:15.275
When the server socket returns
the port number to you, you

00:04:15.275 --> 00:04:18.110
then enter that port number
into the network services

00:04:18.110 --> 00:04:19.740
discovery broadcast.

00:04:19.740 --> 00:04:22.870
The handy thing about this is
that if you, for instance, had

00:04:22.870 --> 00:04:25.870
decided that you wanted port 53
to be one your application

00:04:25.870 --> 00:04:28.930
runs on, and some other
application developer decided

00:04:28.930 --> 00:04:31.240
that they wanted port 53 to be
the one that their application

00:04:31.240 --> 00:04:33.490
runs on, there would never
be a conflict.

00:04:33.490 --> 00:04:36.350
And there would never be an
issue where the user had to

00:04:36.350 --> 00:04:38.880
choose between your application
or someone else's

00:04:38.880 --> 00:04:42.020
application running
at any given time.

00:04:42.020 --> 00:04:42.455
TREVOR JOHNS: Right,
that's a nice fact.

00:04:42.455 --> 00:04:45.020
It means if you don't have to
request or reserve to port

00:04:45.020 --> 00:04:46.360
from the IANA.

00:04:46.360 --> 00:04:48.270
Now you do still have to go
and register your service

00:04:48.270 --> 00:04:49.610
name, but it's as simple
as just filling

00:04:49.610 --> 00:04:50.790
out a simple form.

00:04:50.790 --> 00:04:53.770
And the chances of there being
a conflict are pretty much

00:04:53.770 --> 00:04:54.400
nonexistent.

00:04:54.400 --> 00:04:55.960
ALEX LUCAS: Yeah, very small.

00:04:55.960 --> 00:04:59.580
You don't actually need the
IANA reservation for when

00:04:59.580 --> 00:05:01.420
you're doing internal testing.

00:05:01.420 --> 00:05:04.190
But as soon as you let your
application out onto the

00:05:04.190 --> 00:05:06.620
internet to roam free, it's
a really good idea to get

00:05:06.620 --> 00:05:07.240
registered.

00:05:07.240 --> 00:05:08.716
TREVOR JOHNS: Yeah, it's
just good practice.

00:05:11.668 --> 00:05:14.660
All right, now we talked a bit
earlier about Bluetooth.

00:05:14.660 --> 00:05:17.290
And even though you can't use
NSD on Bluetooth , there's

00:05:17.290 --> 00:05:19.390
another answer we want to give
you, a better answer.

00:05:19.390 --> 00:05:21.040
And that's called
Wi-Fi Direct.

00:05:21.040 --> 00:05:23.980
Wi-Fi Direct is a peer-to-peer
version of wi-fi.

00:05:23.980 --> 00:05:26.510
So it lets devices communicate
with one another without

00:05:26.510 --> 00:05:28.570
having to go through
an access point.

00:05:28.570 --> 00:05:30.790
This provides many of the same
benefits as Bluetooth,

00:05:30.790 --> 00:05:33.870
device-device connections, but
with the advantages of wi-fi,

00:05:33.870 --> 00:05:36.930
which means increased speed
and increased range.

00:05:36.930 --> 00:05:40.170
This is available on devices
running Android 4 or above.

00:05:40.170 --> 00:05:41.410
That's Honeycomb.

00:05:41.410 --> 00:05:44.470
And if you happen to be running
Android 4.1, Jelly

00:05:44.470 --> 00:05:47.670
Bean, you also get service
discovery.

00:05:47.670 --> 00:05:51.220
Now unlike the traditional
case of network service

00:05:51.220 --> 00:05:54.300
discovery, which we just
addressed, Wi-Fi Direct

00:05:54.300 --> 00:05:57.150
service discovery will work even
when you're not connected

00:05:57.150 --> 00:05:58.180
to a network.

00:05:58.180 --> 00:06:00.760
So think about that
for a second.

00:06:00.760 --> 00:06:04.110
Devices running your application
nearby can be

00:06:04.110 --> 00:06:06.220
detected, even if they're
not connected to the

00:06:06.220 --> 00:06:07.730
same network as you.

00:06:07.730 --> 00:06:10.210
That's pretty cool.

00:06:10.210 --> 00:06:12.520
ALEX LUCAS: What my favorite
thing about that-- what that

00:06:12.520 --> 00:06:14.820
basically means, is if you're in
a movie theater waiting for

00:06:14.820 --> 00:06:16.000
the previews to start.

00:06:16.000 --> 00:06:18.250
Let's say, you've gone to
midnight showing or

00:06:18.250 --> 00:06:18.780
something like that.

00:06:18.780 --> 00:06:20.110
You have an hour to kill.

00:06:20.110 --> 00:06:22.390
You can open up the application
and see who else

00:06:22.390 --> 00:06:25.430
in the theater or in line is
playing the same game you are

00:06:25.430 --> 00:06:27.450
and connect to them and
play a game, having no

00:06:27.450 --> 00:06:28.623
idea who they are.

00:06:28.623 --> 00:06:30.110
TREVOR JOHNS: It gives you
physical proximity.

00:06:30.110 --> 00:06:30.460
ALEX LUCAS: Right.

00:06:30.460 --> 00:06:33.790
Physical proximity, which is
awesome, because you know that

00:06:33.790 --> 00:06:37.880
the movie theater's not going to
have a wi-fi network there.

00:06:37.880 --> 00:06:38.900
They're probably--

00:06:38.900 --> 00:06:41.270
a lot of them these days
actually, are designed to

00:06:41.270 --> 00:06:44.180
block incoming calls and
signals and stuff.

00:06:44.180 --> 00:06:45.720
TREVOR JOHNS: Please don't use
that as an excuse to play the

00:06:45.720 --> 00:06:47.540
game during the movie.

00:06:47.540 --> 00:06:47.720
ALEX LUCAS: Right.

00:06:47.720 --> 00:06:48.810
Don't play during the movie.

00:06:48.810 --> 00:06:50.700
There's lots of helpful previews
that tell you that's

00:06:50.700 --> 00:06:51.610
just a bad idea.

00:06:51.610 --> 00:06:52.120
It's rude.

00:06:52.120 --> 00:06:55.150
There'd be a bright screen
in front of the

00:06:55.150 --> 00:06:56.070
people behind you.

00:06:56.070 --> 00:06:57.120
And we're not suggesting that.

00:06:57.120 --> 00:06:59.770
But when you have time to kill
in line, or before the

00:06:59.770 --> 00:07:03.090
previews, knock yourself out.

00:07:03.090 --> 00:07:05.580
Now we do want to point out that
it's still important to

00:07:05.580 --> 00:07:07.560
implement network services
discovery for when you're

00:07:07.560 --> 00:07:09.110
connected to a network.

00:07:09.110 --> 00:07:10.970
There's a couple reasons
for this.

00:07:10.970 --> 00:07:13.910
One of them is that Wi-Fi Direct
is not going to work at

00:07:13.910 --> 00:07:16.400
all when you are connected to a
network, because of the way

00:07:16.400 --> 00:07:17.940
the underlying technology
works.

00:07:17.940 --> 00:07:20.420
You're either connected to a
network or you're surfing

00:07:20.420 --> 00:07:22.950
around for Wi-Fi
Direct devices.

00:07:22.950 --> 00:07:26.200
The other item is that there
are a lot of services and

00:07:26.200 --> 00:07:29.950
hardware that broadcast services
that are designed to

00:07:29.950 --> 00:07:31.820
be discovered on a network.

00:07:31.820 --> 00:07:36.520
Examples of this are network
cameras and network printers.

00:07:36.520 --> 00:07:39.720
Most companies will not set up
their network printers to be

00:07:39.720 --> 00:07:41.460
Wi-Fi Direct accessible.

00:07:41.460 --> 00:07:43.600
Because that means anyone who
was within and physical

00:07:43.600 --> 00:07:45.820
proximity, who didn't
necessarily have permission to

00:07:45.820 --> 00:07:49.400
use that printer, could print
out whatever they wanted.

00:07:49.400 --> 00:07:51.830
So being on the network and
requiring the user to be on

00:07:51.830 --> 00:07:55.750
the network provides a sort of
permission system or just a

00:07:55.750 --> 00:07:58.560
small area of security.

00:07:58.560 --> 00:08:00.930
So really your best option
is to implement both

00:08:00.930 --> 00:08:03.400
Wi-Fi Direct and NSD.

00:08:03.400 --> 00:08:05.710
And that way, your application
will have the best of both

00:08:05.710 --> 00:08:08.950
worlds and increase the chances
of your users being

00:08:08.950 --> 00:08:12.880
able to connect to each other,
no matter what circumstance.

00:08:12.880 --> 00:08:16.990
In order to use Wi-Fi Direct
service discovery, the

00:08:16.990 --> 00:08:19.560
necessary class that you'll
want to use is wi-fi P2P

00:08:19.560 --> 00:08:23.230
manager, which provides an
implementation of DNS-SD

00:08:23.230 --> 00:08:26.340
similar to the way standard
NSD does.

00:08:26.340 --> 00:08:28.850
For more information about how
to actually implement network

00:08:28.850 --> 00:08:32.570
service discovery and service
discovery over Wi-Fi Direct,

00:08:32.570 --> 00:08:34.130
we have a training class
available at

00:08:34.130 --> 00:08:36.730
developer.android.com/training.

00:08:36.730 --> 00:08:38.470
And we really recommend
you go there and

00:08:38.470 --> 00:08:39.659
read through the tutorial.

00:08:39.659 --> 00:08:42.900
We also provide some
sample code.

00:08:42.900 --> 00:08:45.280
And it walks you through a real
world example of how to

00:08:45.280 --> 00:08:49.130
implement this functionality in
a preexisting application.

00:08:49.130 --> 00:08:51.170
TREVOR JOHNS: And if you have
any questions about either NSD

00:08:51.170 --> 00:08:53.830
or Wi-Fi Direct, join us via
Hangout after the live

00:08:53.830 --> 00:08:56.540
broadcast, where we'll be able
to help answer those

00:08:56.540 --> 00:08:57.990
questions for you.

00:08:57.990 --> 00:09:00.370
And if you have any questions
for next week's broadcast,

00:09:00.370 --> 00:09:03.740
post them to Stack Overflow or
send them to us via Android

00:09:03.740 --> 00:09:06.920
Developers at Google+, and we'll
pick the best of them

00:09:06.920 --> 00:09:08.810
for next week's broadcast.

00:09:08.810 --> 00:09:10.940
And with that, we'll see
you all next week.

00:09:10.940 --> 00:09:12.140
Thanks for joining us.

00:09:12.140 --> 00:09:13.390
ALEX LUCAS: Bye guys.

