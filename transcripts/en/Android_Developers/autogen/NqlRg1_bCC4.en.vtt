WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.430
[MUSIC PLAYING]

00:00:04.901 --> 00:00:06.400
TOR NORBYE: I've
been asked all week

00:00:06.400 --> 00:00:08.650
what it is I like about
Kotlin, and I basically

00:00:08.650 --> 00:00:10.660
have to stop and say, how
much time do you have?

00:00:10.660 --> 00:00:12.790
Because I could
go on for an hour,

00:00:12.790 --> 00:00:14.781
and I have with some
people on the team until I

00:00:14.781 --> 00:00:16.239
convinced them to
switch to Kotlin.

00:00:16.239 --> 00:00:16.720
STEPHANIE SAAD-CUTHBERTSON:
A lot of us

00:00:16.720 --> 00:00:18.386
started writing code
in Kotlin and found

00:00:18.386 --> 00:00:20.410
it was just a beautiful
programming language.

00:00:20.410 --> 00:00:22.554
It's so concise
and so expressive.

00:00:22.554 --> 00:00:24.970
ANDREY BRESLAV: It's very hard
to pick a favorite feature,

00:00:24.970 --> 00:00:27.640
because there are so many of
them, and I love them all.

00:00:27.640 --> 00:00:32.820
But one of the most exciting,
and one of the first, actually,

00:00:32.820 --> 00:00:36.550
that were thrown into the
design, is extension functions.

00:00:36.550 --> 00:00:39.130
And we actually did
that the first time we

00:00:39.130 --> 00:00:40.930
talked about Kotlin ever.

00:00:40.930 --> 00:00:43.870
And it turns out to be a
very powerful and very useful

00:00:43.870 --> 00:00:44.540
feature.

00:00:44.540 --> 00:00:46.831
TOR NORBYE: I love the safety
that the language offers.

00:00:46.831 --> 00:00:49.439
So null safety and
immutability are fantastic.

00:00:49.439 --> 00:00:50.980
You can't get null
pointer exceptions

00:00:50.980 --> 00:00:51.640
if you do things right.

00:00:51.640 --> 00:00:53.020
STEPHANIE SAAD-CUTHBERTSON:
From today, you

00:00:53.020 --> 00:00:54.603
can use Kotlin in
your production app,

00:00:54.603 --> 00:00:57.400
and in fact it is being used
in production by Pinterest,

00:00:57.400 --> 00:01:00.700
Square, and a wide range
of other apps, which

00:01:00.700 --> 00:01:02.200
are major apps on Android.

00:01:02.200 --> 00:01:03.741
ANDREY BRESLAV: In
terms of overhead,

00:01:03.741 --> 00:01:06.980
calling Kotlin from the
Java language and back,

00:01:06.980 --> 00:01:09.100
it's zero overhead,
because Kotlin compiles

00:01:09.100 --> 00:01:10.550
to Java-compatible bytecode.

00:01:10.550 --> 00:01:13.572
So it's the same representation
as what the Java language

00:01:13.572 --> 00:01:14.530
compiler will give you.

00:01:14.530 --> 00:01:16.780
TOR NORBYE: So one class
can call into Kotlin,

00:01:16.780 --> 00:01:18.370
Kotlin can call
into Java, and so I

00:01:18.370 --> 00:01:20.440
can do a very gradual
migration of the codebase.

00:01:20.440 --> 00:01:21.910
STEPHANIE SAAD-CUTHBERTSON:
For developers who are invested

00:01:21.910 --> 00:01:24.580
in the Java programming
language and in C++,

00:01:24.580 --> 00:01:27.880
we are increasing our investment
in both of those languages

00:01:27.880 --> 00:01:30.020
at the same time as we're
investing in Kotlin.

00:01:30.020 --> 00:01:32.020
KATHRYN SHIH: It is now
fully tested and shipped

00:01:32.020 --> 00:01:33.810
as one full bundle with Studio.

00:01:33.810 --> 00:01:36.310
So if you like using Kotlin,
you don't have to do any setup.

00:01:36.310 --> 00:01:37.690
You don't have to
do any worrying.

00:01:37.690 --> 00:01:39.280
It will work out of
the box every time.

00:01:39.280 --> 00:01:41.488
TOR NORBYE: My favorite
feature in the IDE for Kotlin

00:01:41.488 --> 00:01:43.480
is the ability to
copy-paste code.

00:01:43.480 --> 00:01:45.940
So I go into a Java
file, I copy the code

00:01:45.940 --> 00:01:48.190
that I've written in Java,
and I paste it into Kotlin,

00:01:48.190 --> 00:01:49.600
and it converts it for me.

00:01:49.600 --> 00:01:51.140
In the beginning, that
was really invaluable.

00:01:51.140 --> 00:01:52.660
I still find myself
using it a few times.

00:01:52.660 --> 00:01:54.340
STEPHANIE SAAD-CUTHBERTSON:
When we talk to our developer

00:01:54.340 --> 00:01:56.317
community, so many
people had literally

00:01:56.317 --> 00:01:58.900
come out of the crowd, whether
it was in Reddit AMAs or events

00:01:58.900 --> 00:01:59.800
that we went to.

00:01:59.800 --> 00:02:01.176
People were asking
us for Kotlin.

00:02:01.176 --> 00:02:03.758
KATHRYN SHIH: The community is
extremely excited about Kotlin.

00:02:03.758 --> 00:02:06.190
We keep running into people
who can't stop telling us

00:02:06.190 --> 00:02:07.420
about how happy they are.

00:02:07.420 --> 00:02:09.294
MAXIM SHAFIROV: I would
like to say thank you

00:02:09.294 --> 00:02:12.250
for those Kotliners who
were in the community

00:02:12.250 --> 00:02:14.260
before this
announcement, because it

00:02:14.260 --> 00:02:16.150
was tremendous trust
from those people

00:02:16.150 --> 00:02:19.690
to actually use this new
programming language.

00:02:19.690 --> 00:02:22.150
And this announcement
is only possible because

00:02:22.150 --> 00:02:23.570
of those people.

00:02:23.570 --> 00:02:24.670
So thank you.

00:02:24.670 --> 00:02:30.460
And for newcomers, the long road
of having fun in programming

00:02:30.460 --> 00:02:31.710
for you.

00:02:31.710 --> 00:02:32.335
Let's enjoy it.

00:02:32.335 --> 00:02:34.460
KATHRYN SHIH: There are
two sets of great resources

00:02:34.460 --> 00:02:35.299
for learning more.

00:02:35.299 --> 00:02:37.840
If you go to the Android or the
Android Studio documentation,

00:02:37.840 --> 00:02:39.270
we have a bunch of stuff there.

00:02:39.270 --> 00:02:42.280
And then Kotlinlang.org has some
really fabulous documentation

00:02:42.280 --> 00:02:44.220
for learning the language.

