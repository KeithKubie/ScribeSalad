WEBVTT
Kind: captions
Language: en

00:02:24.662 --> 00:02:26.662
is

00:02:55.023 --> 00:02:57.023
TensorFlow's 

00:02:58.025 --> 00:03:00.025
High-Level APIs

00:08:32.619 --> 00:08:34.619
TensorFlow's 

00:08:35.638 --> 00:08:37.638
High-Level APIs

00:20:40.623 --> 00:20:46.424
 Getting Started with 
TensorFlow's High-Level APIs

00:26:49.684 --> 00:26:52.680
TensorFlow's High-Level APIs

00:35:21.283 --> 00:35:23.283
.
  &gt;&gt; Should I kick it off?  Yes!

00:35:24.958 --> 00:35:29.042
Good morning!  Thank you for 
coming so early!  I'm Josh 

00:35:29.043 --> 00:35:31.043
Gordon and I'm Laurence 

00:35:34.614 --> 00:35:38.547
Moroney and we're here to speak 
about Getting Started with 

00:35:34.614 --> 00:35:37.872
TensorFlow's High-Level APIs and
I have good news for you and I 

00:35:37.873 --> 00:35:41.330
hope this talk will be concrete 
and useful.  An area I'm 

00:35:41.331 --> 00:35:43.331
particularly passionate about is
making machine learning as 

00:35:44.999 --> 00:35:48.677
accessible as possible to as 
many people as possible.   The 

00:35:48.678 --> 00:35:52.193
TensorFlow team has invested 
heavily in the same thing.   We 

00:35:52.194 --> 00:35:55.652
have spent energy making 
TensorFlow easier to use.  .  

00:35:55.653 --> 00:35:57.653
pgh I would like to show you 
basically 

00:36:00.121 --> 00:36:02.156
a demo of what is in my opinion 
the easiest way to get started 

00:36:02.157 --> 00:36:04.157
with TensorFlow today.  There 
are three things that are 

00:36:07.450 --> 00:36:13.372
concrete that I would like to 
walk you through the first, even

00:36:13.373 --> 00:36:18.827
if you're new to TensorFlow, 
machine learning, even new to 

00:36:18.828 --> 00:36:20.828
Python, an area that's silly but

00:36:24.322 --> 00:36:25.741
non-trivial, it is installing 
TensorFlow in different areas 

00:36:25.742 --> 00:36:27.742
and it can be hard for people 
that are brand-new.

00:36:30.017 --> 00:36:31.266
I'll show you something called 
Colab and I'll wake you through 

00:36:31.267 --> 00:36:35.374
it.  It is a server running in 
the Cloud, free of charge with 

00:36:35.375 --> 00:36:38.029
TensorFlow preinstalled, come 
was a GPU, it is awesome.

00:36:41.729 --> 00:36:42.734
I'll walk you through how to use
that, get started with 

00:36:42.735 --> 00:36:44.735
TensorFlow.

00:36:46.198 --> 00:36:47.207
TensorFlow has many differents 
APIs and my personal favorite 

00:36:47.208 --> 00:36:49.208
and what I 

00:36:53.181 --> 00:36:54.412
recommend to you, it is an April
that's implemented in TensorFlow

00:36:54.413 --> 00:36:58.559
and it is great.  I can't tell 
you how fun I have had using it.

00:37:01.853 --> 00:37:05.317
I will walk you through writing 
hello world for it Tf.keras and 

00:37:05.318 --> 00:37:07.761
it is good for GS and I'll point
you to educational resources to 

00:37:08.790 --> 00:37:10.790
learn more.
  Cool.

00:37:13.985 --> 00:37:16.422
These are the APIs I want to 
briefly introduce.   Tf.keras, 

00:37:16.423 --> 00:37:18.423
it is like Lego-like building 

00:37:20.696 --> 00:37:22.696
blocks for building and defining
models, tf.

00:37:24.156 --> 00:37:26.800
data, when they learn ML, they 
learn that the neural network is

00:37:26.801 --> 00:37:32.574
composed of layers and they can 
adjust the neurons per layer and

00:37:32.575 --> 00:37:35.854
there are hyper parameters and 
they spend time on modeling.  

00:37:35.855 --> 00:37:37.906
Something that's really, really 
important, but doesn't get 

00:37:37.907 --> 00:37:42.590
attention is how to get the data
in the network.  Writing input 

00:37:42.591 --> 00:37:44.591
pipelines is  non-trivial.

00:37:47.096 --> 00:37:49.745
I'm going to show you an API 
that's easy to use and 

00:37:49.746 --> 00:37:51.746
high-performance way of writing 
the pipelines.

00:37:52.397 --> 00:37:54.397
I'll show you eager execution.

00:37:55.870 --> 00:37:58.100
If you're -- Lawrence will give 
you more depth on eager.

00:38:00.577 --> 00:38:02.627
When you hear eager execution, 
if you're new to TensorFlow, 

00:38:02.628 --> 00:38:09.151
ignore that, think this is the 
thing that you always do.  You 

00:38:09.152 --> 00:38:11.386
debug the TensorFlow programs 
and it makes TensorFlow feel 

00:38:11.387 --> 00:38:15.464
like regular Python.  This is a 
short talk.   I won't go into 

00:38:15.465 --> 00:38:19.333
all details of how TensorFlow 
works under the hood.  This is 

00:38:19.334 --> 00:38:23.440
the right way to do it if you 
learn TensorFlow today.

00:38:24.055 --> 00:38:26.055
Briefly, this is what I would do
if 

00:38:29.950 --> 00:38:33.268
you want to try TensorFlow and 
Tf.keras and this is the fastest

00:38:33.269 --> 00:38:37.357
possible  way.  All of the APIs,
they're fully implemented 

00:38:37.358 --> 00:38:39.358
working well.

00:38:40.408 --> 00:38:43.041
We are just now starting to 
write all the samples and docs 

00:38:43.042 --> 00:38:45.042
around them.  I have a feeling 
the samples I was 

00:38:47.720 --> 00:38:50.568
able to cook up for this talk, 
they're quite rough.  Stay 

00:38:50.569 --> 00:38:52.635
tuned, and check back in the 
next few months as we flesh this

00:38:52.636 --> 00:38:56.758
out.   Let's dive right in.
  If you go to this website, it 

00:38:56.759 --> 00:38:59.801
will bring you -- can we switch 
to the laptop for a minute, 

00:38:59.802 --> 00:39:02.459
please?
  Thank you.

00:39:07.912 --> 00:39:09.912
It brings you to

00:39:11.089 --> 00:39:12.703
the site and you scroll down to 
lead me and you see a few 

00:39:12.704 --> 00:39:14.704
notebooks.

00:39:15.772 --> 00:39:16.792
I want to show you how easy it 
is to get started.

00:39:16.793 --> 00:39:22.477
Click on one.  They open up 
immediately in Colab.  Now you 

00:39:22.478 --> 00:39:24.478
have a June tar notebook running
entirely in the Cloud.

00:39:30.163 --> 00:39:32.163
You can hit connect to connect 
to

00:39:33.480 --> 00:39:35.480
it, and now I can start running 
these 

00:39:37.957 --> 00:39:39.391
cells and I'll wake you through 
this in detail in a few minutes.

00:39:43.258 --> 00:39:46.091
This shows you the first nurl 
network using Tf.keras, there is

00:39:46.092 --> 00:39:48.092
preprocessing but the notebook 
is short.

00:39:50.793 --> 00:39:52.793
The next notebook, shows you how
to do the same thing with Tf.

00:39:54.863 --> 00:39:56.504
keras and eager execution and we
go in more depth.  It is that 

00:39:56.505 --> 00:39:58.505
easy to get started.  It will 
take about 5 minutes 

00:40:01.410 --> 00:40:04.068
end-to-end to try it out.
  Let's switch back to the 

00:40:04.069 --> 00:40:06.312
slides, please.
  I'll give you a bit more depth

00:40:06.313 --> 00:40:08.313
of 

00:40:09.558 --> 00:40:11.558
what's happening in the 
notebooks.  Using Tf.

00:40:15.052 --> 00:40:16.880
keras, this is the complete code
minus lines of preprocessing, 

00:40:16.881 --> 00:40:18.881
formatting the 

00:40:20.550 --> 00:40:23.012
data, to write, train, evaluate 
and make predictions with your 

00:40:23.013 --> 00:40:25.265
personal network in TensorFlow. 
If you were using TensorFlow 

00:40:25.266 --> 00:40:28.536
about a year ago, it would have 
been substantially more code.

00:40:33.612 --> 00:40:35.029
There is several great 
high-level APIs that are great 

00:40:35.030 --> 00:40:37.882
for production but for learning 
ML I strongly recommend this.

00:40:37.883 --> 00:40:42.345
  I'll walk you through what the
lines are doing.  At one point, 

00:40:42.346 --> 00:40:45.423
I want to make this point, the 
code is concept heavy but code 

00:40:45.424 --> 00:40:49.511
light.  Writing the code itself 
should no longer be a barrier to

00:40:49.512 --> 00:40:53.409
getting started with ML.  I hope
far fewer people will spend 

00:40:56.059 --> 00:40:57.275
energy and time on the syntax 
and debugging, and that you can 

00:40:57.276 --> 00:40:59.276
spend more of your time and 
energy thinking about 

00:41:01.790 --> 00:41:03.790
what you're trying to do and 
why.

00:41:03.888 --> 00:41:05.917
Before I dive into code, I want 
to make an important point:  

00:41:05.918 --> 00:41:10.397
Machine learning is a broad 
field.  By far, enormous take a 

00:41:10.398 --> 00:41:14.289
lot of students make when 
they're learning is they learn 

00:41:14.290 --> 00:41:16.925
how to train an image classifier
like we'll do in a moment and 

00:41:17.998 --> 00:41:19.828
they find when he they write the
classifier they start evaluating

00:41:19.829 --> 00:41:21.829
it and 

00:41:23.289 --> 00:41:24.963
see the numbers like 99% 
accuracy.   They find out that 

00:41:24.964 --> 00:41:30.915
by tweaking the network you can 
get to 99.6 or whatever.  In 

00:41:30.916 --> 00:41:32.138
reality, it almost never really 
matters.  The most important 

00:41:32.139 --> 00:41:34.139
thing you can spend 

00:41:36.845 --> 00:41:38.469
your time on is designing the 
experiment.  Concretely, think 

00:41:38.470 --> 00:41:42.182
about what you're trying to 
predict and why?  How will it be

00:41:42.183 --> 00:41:45.027
used in practice?  What could 
can go wrong?  Where is the data

00:41:45.028 --> 00:41:48.494
coming from?  This Iing through 
the design of the system as you 

00:41:48.495 --> 00:41:50.495
would in any type of 

00:41:52.212 --> 00:41:53.845
software is much, much more 
important than messing around 

00:41:53.846 --> 00:41:56.081
trying to get higher accuracy.
  There is a whole talk on that.

00:41:57.705 --> 00:42:01.803
I won't share that with you.  
Today, I'll show the code.  

00:42:01.804 --> 00:42:03.804
Always think of what, why in 
addition to how.

00:42:04.067 --> 00:42:05.903
Before I dive into this, a 
couple of cool things, not 

00:42:05.904 --> 00:42:09.160
enough time to introduce 
TensorFlow, I wanted to call out

00:42:09.161 --> 00:42:10.384
the community, it is an 
important thing about 

00:42:10.385 --> 00:42:14.662
TensorFlow.   In addition to the
1 #,000 plus folks that 

00:42:14.663 --> 00:42:17.563
contributed code there are many,
many more who are doing things 

00:42:17.564 --> 00:42:21.017
like  teaching, organizing 
events, writing articles, these 

00:42:21.018 --> 00:42:24.282
things are incredibly valuable 
too.  There is a few more things

00:42:24.283 --> 00:42:29.767
I want to call out.  This came 
out two days ago.  There is 

00:42:29.768 --> 00:42:31.768
another library called 
TensorFlow.

00:42:33.832 --> 00:42:36.276
js, it is in Java script, same 
APIs, the same Tf.keras that 

00:42:36.277 --> 00:42:36.875
I'll show you today --
  &gt;&gt; LAURENCE MORONEY: Were you 

00:42:36.876 --> 00:42:40.546
going to act this out?
  &gt;&gt; JOSH GORDON: There is a 

00:42:40.547 --> 00:42:43.995
great sandbox to try it.
  It is TensorFlow running in a 

00:42:43.996 --> 00:42:47.049
browser and it runs in realtime.
There is two links on the 

00:42:47.050 --> 00:42:51.125
bottom, there is a great demo to
play with on the blog and you 

00:42:51.126 --> 00:42:53.126
can find the code on the 
website.

00:42:55.607 --> 00:42:57.223
Another thing, there's a pair of
links here that I encourage you 

00:42:57.224 --> 00:42:59.224
to try.

00:43:01.912 --> 00:43:03.538
This is Ma again at a and it is 
a -- magenta and it is using 

00:43:03.539 --> 00:43:08.267
TensorFlow for ex peer.S in art 
and music.  This is 

00:43:08.268 --> 00:43:10.268
computer-assisted drawing.

00:43:11.731 --> 00:43:13.762
It helps me draw a duck with the
mouse and it is kind of auto 

00:43:13.763 --> 00:43:15.791
complete for drawing.  There is 
a great game, quick draw, I 

00:43:17.846 --> 00:43:19.846
encourage you to try, it is 
great for 

00:43:21.933 --> 00:43:23.754
kids -- yeah -- quick draw, and 
the magenta demo is great to 

00:43:23.755 --> 00:43:25.755
try.  Fun stuff before getting 
into code.

00:43:27.437 --> 00:43:29.267
On a personal note, a reason why
I care about the machine 

00:43:29.268 --> 00:43:31.940
learning so much, because of a 
project called  Cellbot and 

00:43:36.026 --> 00:43:38.063
it is a project from 2004, it 
was in a biology lab and it uses

00:43:38.064 --> 00:43:40.064
a neural network 

00:43:41.127 --> 00:43:42.952
to identify specific types of 
cells in solution and then sort 

00:43:42.953 --> 00:43:47.031
them.  What was so cool to me as
a student working on this, it is

00:43:47.032 --> 00:43:51.526
that machine learning is not 
just for computer scientists.  

00:43:51.527 --> 00:43:53.556
The fact that biologists were 
trying to do something useful 

00:43:53.557 --> 00:43:55.807
using technology that originated
in our field was really 

00:43:56.810 --> 00:44:01.288
meaningful to me.  It is how can
we use machine learning for 

00:44:01.289 --> 00:44:03.289
medicine, for art, for 
healthcare 

00:44:04.364 --> 00:44:06.364
just to do useful things in the 
world.

00:44:07.826 --> 00:44:09.826
That's sort of the thinking 
behind 

00:44:11.530 --> 00:44:13.530
everything behind ML, how can we
help people.

00:44:16.195 --> 00:44:18.195
&gt;&gt; Colab, it is short for 
Laboratory.

00:44:21.501 --> 00:44:23.501
It is inspired by Google docs, 
it is a 

00:44:24.948 --> 00:44:27.392
code editor and basically you 
can save the notebooks in Google

00:44:27.393 --> 00:44:31.670
drive and get them back in as 
notebooks.  A lot of people are 

00:44:31.671 --> 00:44:34.923
not from Python I know.  I want 
to spend a minute and introduce 

00:44:36.135 --> 00:44:39.402
Jupiter notebooks.   Broadly, 
here is Colab and there are two 

00:44:39.403 --> 00:44:42.108
types of cells.   There is mark 
down cells, which contain mark 

00:44:42.109 --> 00:44:46.797
down.  If you edit a mark down 
cell like I'm doing with hello 

00:44:46.798 --> 00:44:50.877
world and you execute it, it 
renders that mark down.  The 

00:44:50.878 --> 00:44:53.969
other type of cell, it is a code
cell.  If you edit the code, 

00:44:53.970 --> 00:44:55.970
execute the cell, it executes 
the code.

00:44:57.649 --> 00:45:00.328
&gt;&gt; LAURENCE MORONEY: They give 
you access to GPUs, I have 

00:45:00.329 --> 00:45:04.831
spoken to a lot of   em that 
find it difficult to set up the 

00:45:04.832 --> 00:45:06.456
GPUs or maybe they're in a 
university environment and they 

00:45:06.457 --> 00:45:08.897
don't have the access to that 
the expensive 

00:45:12.355 --> 00:45:13.789
GPUs and you can connect to a 
GPU in the data center to check 

00:45:13.790 --> 00:45:15.790
out the code 

00:45:16.852 --> 00:45:17.466
running on GPUs.
  &gt;&gt; JOSH GORDON: A really good 

00:45:17.467 --> 00:45:21.935
point.  another thing if you're 
new to this, you can create 

00:45:21.936 --> 00:45:24.797
visualizations in line.   I'm 
using the maps for the plots and

00:45:26.218 --> 00:45:28.643
data and it goes in line with 
the notebook.  It is important 

00:45:28.644 --> 00:45:30.644
because it helps you share 
results.

00:45:31.753 --> 00:45:33.753
Another thing to mention 
quickly, you 

00:45:35.614 --> 00:45:37.661
can install libraries, you're 
running in some containers but 

00:45:37.662 --> 00:45:41.105
you can install whatever library
you need.  Here I'm doing the 

00:45:41.106 --> 00:45:43.106
map and you have the root access
to it.

00:45:46.420 --> 00:45:48.420
A lot of people miss this 
feature, it 

00:45:49.485 --> 00:45:52.980
is snippets and it is hidden in 
the table of context.  What I'll

00:45:52.981 --> 00:45:54.981
do, create data and download 

00:45:56.441 --> 00:45:58.066
the data off of Colab back to my
laptop and to find out how to do

00:45:58.067 --> 00:46:00.067
that, I click on this thing and 
start to search for 

00:46:03.564 --> 00:46:06.199
downloading data and Colab -- 
you can't see it -- there is 

00:46:06.200 --> 00:46:10.732
code that I can copy and paste 
in notebook and run.  It has 

00:46:10.733 --> 00:46:12.733
examples of installing 
libraries, things like that.

00:46:14.620 --> 00:46:16.620
Super useful, don't have time to
talk about it.

00:46:18.297 --> 00:46:20.297
It is great for reproducible 
examples.

00:46:20.328 --> 00:46:24.773
Let's jump into Tf.keras for the
first nurl network.  I talked 

00:46:24.774 --> 00:46:26.774
about it earlier, but no one 

00:46:28.857 --> 00:46:31.083
has ever looked at the code to 
write the first nurl network no 

00:46:31.084 --> 00:46:35.165
matter how smart you are, 
doesn't matter if you have a PhD

00:46:35.166 --> 00:46:40.065
in physics, whatever, it is 
impossible to learn this stuff. 

00:46:40.066 --> 00:46:42.534
It is completely normal to see 
lots of concepts and have no 

00:46:42.535 --> 00:46:44.535
idea what they mean.  I'll at 
least introduce you and then 

00:46:47.407 --> 00:46:49.407
point you to a course you can 
use to get more depth.

00:46:49.484 --> 00:46:51.484
The other thing I should look at
my slides, right!.

00:46:52.379 --> 00:46:55.648
You will see lots of parameters 
when you define the networks.  

00:46:55.649 --> 00:46:58.908
Really only one, two are 
important to spend time on.  

00:46:58.909 --> 00:47:00.909
I'll point you to what they are 
as we go.

00:47:01.540 --> 00:47:03.540
There is broadly five steps to 
write 

00:47:04.994 --> 00:47:07.850
hello world in TensorFlow with 
Tf.keras.  The good news is,ing 

00:47:07.851 --> 00:47:12.594
3, 4, 5, it is one line of code.
That's all the work of training 

00:47:12.595 --> 00:47:17.076
the network, evaluating and 
making predictions.  Creating 

00:47:17.077 --> 00:47:19.077
the dataset in reality takes 

00:47:20.713 --> 00:47:22.558
a long time, preprocessing data 
is a long time, building the 

00:47:22.559 --> 00:47:24.559
model is where the concepts are.

00:47:26.416 --> 00:47:28.849
We'll see what this looks like. 
We'll use MNIST, you know MNIST 

00:47:28.850 --> 00:47:32.302
code for machine learning 
experts, the reason I picked it,

00:47:32.303 --> 00:47:34.965
so we don't have to worry about 
the data.  If you're new to 

00:47:34.966 --> 00:47:37.422
MNIST, it is the hello world of 
computer vision, it is a 

00:47:42.113 --> 00:47:44.559
dataset of about 60,000 plus low
resolution handwritten digits 

00:47:44.560 --> 00:47:46.560
and we are 

00:47:47.612 --> 00:47:49.612
training it to recognize digits 
that it has not seen before.

00:47:54.530 --> 00:47:56.617
Here is what we'll do:  We'll 
import TensorFlow and on the 

00:47:56.618 --> 00:47:58.618
second line we 

00:48:00.280 --> 00:48:02.300
import MNIST, and it is easy, it
is baked into the TensorFlow, if

00:48:02.301 --> 00:48:05.756
you're new to using Tf.keras 
with TensorFlow, it is included,

00:48:09.452 --> 00:48:10.887
you then have access to the 
complete api and there is 

00:48:10.888 --> 00:48:12.888
nothing else to do, it is there.
This is awesome.

00:48:14.393 --> 00:48:16.843
By the way, there are many 
advanced things you can do using

00:48:16.844 --> 00:48:20.346
Tf.keras and it is grates.  Here
I'm trying to show the straight,

00:48:21.362 --> 00:48:23.609
easy as possible way.
  Here is the format of the 

00:48:23.610 --> 00:48:26.468
dataset.  It is divided already 
for us, train 

00:48:30.153 --> 00:48:33.034
and test, 60,000 and 10,000, the
top right, a diagram of the 

00:48:33.035 --> 00:48:35.482
format of the images.  If you 
look at the notebooks in the 

00:48:37.315 --> 00:48:39.168
directory, the best thing you 
can do when you impoverty a 

00:48:39.169 --> 00:48:44.065
dataset is to spend time asking 
basic questions.  When you 

00:48:44.066 --> 00:48:46.904
import the data, print it out, 
print out the shape print out 

00:48:46.905 --> 00:48:48.905
the 

00:48:50.979 --> 00:48:53.008
single vision, is it floating 
point, an imager, the 

00:48:53.009 --> 00:48:55.038
dimensions, how many do you 
have?  Spending time 

00:48:55.039 --> 00:48:58.305
understanding the format, the 
plumbing will save you a lot of 

00:48:58.306 --> 00:49:00.806
headache later on.  It is always
okay to ask basic questions.

00:49:04.868 --> 00:49:06.501
In the bottom right, there are 
many neural networks working 

00:49:06.502 --> 00:49:08.525
with 2D and we're going to 
unroll the thing.

00:49:13.032 --> 00:49:15.265
Rather than a 2D image we'll 
unstack the rows, when we 

00:49:15.266 --> 00:49:17.266
unstack them, we have 

00:49:18.973 --> 00:49:20.654
a vector that's 28 times 28 
equals 780 something Pixels in a

00:49:20.655 --> 00:49:24.951
line.  It is a simplification 
that's all it is to import the 

00:49:24.952 --> 00:49:28.436
dataset, I didn't show the code 
which is just to reshape it.  It

00:49:28.437 --> 00:49:31.807
is in the notebook.
  Now we'll build the model.  

00:49:31.808 --> 00:49:33.872
Here are concepts that will be 
probably entirely meaningless to

00:49:33.873 --> 00:49:35.873
you if you're brand-new to ML.

00:49:37.955 --> 00:49:39.581
A funny thing about neural 
networks, there are many 

00:49:39.582 --> 00:49:41.582
different types of 

00:49:43.090 --> 00:49:45.368
classifiers and most of my 
background, I was really 

00:49:45.369 --> 00:49:47.205
invested in tree-based models 
before deep learning was a 

00:49:47.206 --> 00:49:49.206
thing.

00:49:50.666 --> 00:49:52.701
The reason I like tree-based 
models like random forests, I 

00:49:52.702 --> 00:49:56.187
look at a tree and my brain 
understands what the tree is 

00:49:56.188 --> 00:49:58.188
doing to classify the data.  I 
get it.

00:49:59.898 --> 00:50:01.898
It clicks.

00:50:05.236 --> 00:50:07.537
Neural networks can be  
counterintuitive.  It is hard to

00:50:07.538 --> 00:50:09.384
describe s I'll tell you what 
we're doing and take the course 

00:50:09.385 --> 00:50:11.385
to learn more.

00:50:13.036 --> 00:50:14.890
We're defining a fully connected
deep neural network.   There are

00:50:14.891 --> 00:50:20.405
two layers to see.  First we're 
saying -- defining the model.  

00:50:20.406 --> 00:50:21.848
First we'll use the sequential 
API which is the simplest to 

00:50:21.849 --> 00:50:25.918
define the model.  The model be 
will a stack of layers.  The 

00:50:25.919 --> 00:50:27.761
first layer that we're stacking 
on, it is going to be a dense 

00:50:27.762 --> 00:50:30.651
layer.  Dense means it is fully 
connected.  .

00:50:32.682 --> 00:50:35.120
I'll show you a diagram of this.
Sorry.  It is just one layer 

00:50:35.121 --> 00:50:40.223
network.  The notebooks have an 
exercise where you can add a 

00:50:40.224 --> 00:50:42.224
second layer.

00:50:43.284 --> 00:50:44.335
We have an output layer with 10 
outputs and each will gather 

00:50:44.336 --> 00:50:46.336
evidence that the image we feed 
through the 

00:50:49.622 --> 00:50:53.111
network corresponds to each of 
the digits.  This slide -- I was

00:50:53.112 --> 00:50:55.372
editing these slides last night,
this one is a little bit 

00:50:55.373 --> 00:50:58.635
different.  Here we have two 
dense layers.  The point that I 

00:50:58.636 --> 00:51:00.636
want to mention, 

00:51:01.917 --> 00:51:03.917
there is a couple of points I 
want to make.

00:51:05.364 --> 00:51:08.214
One, this is the complete code 
to define the network.  It is 

00:51:08.215 --> 00:51:10.215
code concise.

00:51:11.272 --> 00:51:13.272
Two, broadly, the more layers 
you add 

00:51:14.771 --> 00:51:16.771
to the network, the more 
neurons, units 

00:51:19.240 --> 00:51:21.930
a layer, the more capacity the 
network has.  The more patterns 

00:51:21.931 --> 00:51:26.199
it can recognize.  The problem, 
the more things that the network

00:51:26.200 --> 00:51:28.233
can recognize, the more likely 
it can memorize the training 

00:51:28.234 --> 00:51:32.132
data.  In machine learning there
is tension between memorization 

00:51:32.133 --> 00:51:35.228
and  generalization, you don't 
want to memorize the training 

00:51:35.229 --> 00:51:38.293
data but learn patterns that are
useful to classify digits that 

00:51:38.294 --> 00:51:40.720
you haven't seen before.  It is 
very easy to get very high 

00:51:42.553 --> 00:51:44.553
accuracy on the training set by 
building 

00:51:46.626 --> 00:51:47.625
a deep neural network with knew 
Rones and training it for a long

00:51:47.626 --> 00:51:51.915
time.  It is not necessarily the
right thing to do.  When you do 

00:51:51.916 --> 00:51:54.615
this, start simple and slowly 
expand from there.

00:52:00.760 --> 00:52:02.411
.
  You then exile it, there is 

00:52:02.412 --> 00:52:06.688
two concepts, I'll get to the 
optimizer in a second.  The lost

00:52:06.689 --> 00:52:08.950
function, it is the objective 
that the network is trying to 

00:52:08.951 --> 00:52:10.951
optimize.

00:52:13.822 --> 00:52:15.822
Good  news, this is a fancy 
word, 

00:52:16.863 --> 00:52:21.441
categorical cross entropy, you 
feed an image of a tube through 

00:52:21.442 --> 00:52:22.853
the network and you have a 
probability distribution overall

00:52:22.854 --> 00:52:26.522
of the digits it could be.   
With 10% probability it is a 0 

00:52:26.523 --> 00:52:28.523
and 

00:52:29.570 --> 00:52:33.426
with 5, it is a 1 #, with 90% 
probability it is a two.  This 

00:52:33.427 --> 00:52:35.062
is a fancy word that compares 
the things the network predicted

00:52:35.063 --> 00:52:38.529
to the thing you wanted it to 
predict and what you want it to 

00:52:38.530 --> 00:52:40.530
predict is all of the evidence 
is on it too.

00:52:41.565 --> 00:52:43.610
The other thing, the optimizer. 
This is the method you're going 

00:52:43.611 --> 00:52:47.102
to train the network.  The truth
is, there is a whole bag of 

00:52:48.344 --> 00:52:50.172
different optimizers to use.  
You don't have to westboundersy 

00:52:50.173 --> 00:52:52.173
on 

00:52:55.001 --> 00:52:58.920
what it means too much because 
there are good defaults.  For 

00:52:58.921 --> 00:53:00.921
this, you'll use the category 

00:53:02.811 --> 00:53:05.865
Raleigh cross entropy and 
rmsprop is good to start with.  

00:53:05.866 --> 00:53:07.866
There are goody faults.

00:53:09.120 --> 00:53:11.120
Broadly, the way that the 
network is 

00:53:12.781 --> 00:53:14.781
trained, using the gradients.

00:53:16.049 --> 00:53:18.049
Here is how I think about this.

00:53:29.931 --> 00:53:31.931
This is the simplest parameter 
in my 

00:53:33.635 --> 00:53:35.062
head, if you think of linear 
regression, you have points on a

00:53:35.063 --> 00:53:38.948
plot and you're trying to find 
the best fit line.  If you think

00:53:38.949 --> 00:53:40.785
about from high  school, the 
equation for the best fit line, 

00:53:40.786 --> 00:53:45.920
you have Y  equals MS plus B and
you have two parameters you're 

00:53:45.921 --> 00:53:50.611
trying to learn.  M is the 
slope.  You have B, the 

00:53:50.612 --> 00:53:55.557
intercept.  For different values
of M and B you can calculate how

00:53:55.558 --> 00:53:58.993
well the line fits the data and 
look at the error.  There are 

00:53:58.994 --> 00:54:01.028
different ways to et cetera go 
the error but maybe it is the 

00:54:01.029 --> 00:54:03.029
sum of the difference from the 
line to the Pixels.

00:54:06.059 --> 00:54:08.059
You can find the best fit line.

00:54:10.349 --> 00:54:12.349
Nurl networks are trained in a 
similar 

00:54:13.361 --> 00:54:17.299
way but you have hundreds of 
thousands of parameters to learn

00:54:17.300 --> 00:54:19.300
and they connect everything, and
the way they're trained, 

00:54:24.025 --> 00:54:26.271
using the gradient dissent and 
there is a fancy diagram on the 

00:54:26.272 --> 00:54:29.574
right showing something that's 
not relevant.   They all start 

00:54:29.575 --> 00:54:34.059
at random values and you adjust 
them overtime until the network 

00:54:34.060 --> 00:54:35.704
is better at recognizing digits.
  I'll point you to more 

00:54:35.705 --> 00:54:37.705
educational 

00:54:38.843 --> 00:54:43.133
resources in a second.
  Here is the cool part.  

00:54:43.134 --> 00:54:44.772
Building your model is where 
there are many, many machine 

00:54:44.773 --> 00:54:46.773
learning concepts that you have 
to spend a lot of time learning.

00:54:50.286 --> 00:54:51.916
The next three steps, they are 
concepts that are involved with 

00:54:51.917 --> 00:54:55.619
running an experiment.   There 
is -- here is the only 

00:54:55.806 --> 00:55:01.313
parameter.  You train the  
model.  It is one line.  Fit, it

00:55:01.314 --> 00:55:03.340
is synonymous with train.   
We're training it using the 

00:55:03.341 --> 00:55:05.402
training images and labels.   
Here is the only parameter that 

00:55:06.224 --> 00:55:08.224
really matters.

00:55:11.762 --> 00:55:13.762
The good news is, this concept 
is simpler.

00:55:17.521 --> 00:55:19.955
So this epoch means a sweep over
the training data, one epoch 

00:55:19.956 --> 00:55:22.046
means that we're training all of
those at once.

00:55:24.109 --> 00:55:27.229
Training a network is a bit like
tuning a guitar.   Think if you 

00:55:27.230 --> 00:55:29.230
have a guitar and you want -- it
starts  untuned.

00:55:33.713 --> 00:55:36.879
You want to tune the strings to 
hit a particular note.  You tune

00:55:36.880 --> 00:55:38.880
it, you twist the wheel, you 

00:55:41.357 --> 00:55:44.233
think of that as an epoch and 
you tune until a certain epoch 

00:55:44.234 --> 00:55:46.234
until you get a note.  If you 
the keep going, it won't play 

00:55:48.715 --> 00:55:51.157
the right note and the string 
will snap.  You have to stop 

00:55:51.158 --> 00:55:53.238
tuning it at a certain point.  
you stop tuning it based on the 

00:55:53.239 --> 00:55:55.499
sound.   Neural networks are 
exactly the same way.

00:55:58.346 --> 00:56:00.195
There is basically one simple 
plot and it is this that I 

00:56:00.196 --> 00:56:02.642
recommend you look hat while 
you're training the networks.

00:56:08.008 --> 00:56:10.008
On the Y we're seeing this loss,
this means error.

00:56:12.798 --> 00:56:14.798
Loss is the same thing as error,
a fancy word for it.

00:56:16.997 --> 00:56:19.063
We're trying to minimize the 
error.  On the X, it is how long

00:56:19.064 --> 00:56:21.113
we're  tuning the network in 
terms of number of epochs.

00:56:24.213 --> 00:56:26.644
If you notice, after a few 
epochs, the loss reaches a low. 

00:56:26.645 --> 00:56:29.075
That's when the guitar hits the 
right note.  If you keep 

00:56:29.076 --> 00:56:31.076
training, the loss will increase
again.

00:56:32.749 --> 00:56:35.402
To find the right number of 
epochs you make a plot like this

00:56:35.403 --> 00:56:37.403
and plot the error 

00:56:38.454 --> 00:56:40.691
and look for the point of lowest
loss usually on the validation 

00:56:40.692 --> 00:56:42.539
data.
  After that, you can evaluate 

00:56:42.540 --> 00:56:44.540
it.

00:56:45.801 --> 00:56:48.101
Evaluate just means given new 
data, classify it with the 

00:56:48.102 --> 00:56:50.570
network and take a look at the 
accuracy in other metrics, 

00:56:54.633 --> 00:56:57.630
it is also one line of code.  

00:57:01.785 --> 00:57:05.889
  When you train it, you can 
specify the metrics you want 

00:57:05.890 --> 00:57:10.784
returned.  It is also just one 
line of code.  There is syntax. 

00:57:10.785 --> 00:57:15.087
It you see the model.predict and
have an image.   The syntax is 

00:57:15.088 --> 00:57:19.422
funny, the model expects a batch
of data and a batch means it is 

00:57:19.423 --> 00:57:22.684
meant to predict on multiple 
images at once.  You give it an 

00:57:22.685 --> 00:57:24.948
image and wrap it in a list and 
that's just syntaxed to make it 

00:57:25.145 --> 00:57:27.145
happy.

00:57:28.387 --> 00:57:30.020
We were making predictions on 
the first image from the test 

00:57:30.021 --> 00:57:32.021
data and the 

00:57:33.522 --> 00:57:35.779
model, it gives back 
probabilities that that 

00:57:35.780 --> 00:57:38.011
corresponds to different digits.
The lowest layer of the network,

00:57:38.012 --> 00:57:42.515
you have all of the evidence on 
the output nodes.  You find the 

00:57:42.516 --> 00:57:46.405
largest elements and that's the 
prediction.  Here is predicting 

00:57:46.406 --> 00:57:48.857
it is a 7.
  I'm going to give you a really

00:57:48.858 --> 00:57:50.858
quick 

00:57:53.555 --> 00:57:57.643
overview of TF TF.data and hand 
it over to Lawrence to tell us 

00:57:57.644 --> 00:57:59.644
more about  Eager.

00:58:02.598 --> 00:58:06.500
  Here is something to be aware 
of, in TensorFlow there is many 

00:58:06.501 --> 00:58:10.584
ways to do things.  You should 
always do the  simplest possible

00:58:10.585 --> 00:58:13.220
thing that's adequate for the 
problem.   Never -- basically 

00:58:13.221 --> 00:58:15.470
when starting with ML and 
probably 90% of settings don't 

00:58:18.355 --> 00:58:22.006
worry about performance, try to 
minimize the complexity.  Before

00:58:22.007 --> 00:58:24.007
we wrote our hello world just 

00:58:25.919 --> 00:58:28.389
using the data in a pie format. 
That's fine.  If we were working

00:58:28.390 --> 00:58:31.254
with a much larger dataset or 
reading images off of disk or 

00:58:33.290 --> 00:58:35.362
pulling them from the cloud 
there is a lot of complexity and

00:58:35.363 --> 00:58:37.363
the performance starts to 
matter.

00:58:38.202 --> 00:58:41.860
For example, there is lacy when 
you pull images over network.  

00:58:41.861 --> 00:58:44.107
You want to hit a bunch of 
servers at once or maybe you 

00:58:44.108 --> 00:58:46.543
want different threads.  You 
have all types of functionality 

00:58:46.544 --> 00:58:48.581
to help you with things like 
this.

00:58:53.086 --> 00:58:55.086
A thing that happens, GPUs, TPUs
is 

00:58:56.899 --> 00:58:58.899
surprisingly fast and the la

00:59:00.184 --> 00:59:02.184
la

00:59:05.331 --> 00:59:08.204
latency, the question is can you
keep it Fed?  You have lots of 

00:59:08.205 --> 00:59:11.049
utilities to get the stuff, 
prefetching it to the GPU if you

00:59:11.457 --> 00:59:13.457
need to.

00:59:17.053 --> 00:59:18.287
What we'll do, we imported this 
and I'll wrap it up in a 

00:59:18.288 --> 00:59:20.288
dataset.

00:59:22.429 --> 00:59:23.918
I'm creating a dataset from 
slices, a fancy word which 

00:59:23.919 --> 00:59:26.144
basically tells it that hey, 
this is a list of things and I 

00:59:26.145 --> 00:59:30.028
want every element in the list 
to be an item on my dataset.

00:59:34.125 --> 00:59:35.964
The next thing, you have a clean
API and I can say I want you to 

00:59:35.965 --> 00:59:41.277
shuffle the data.  Here the data
is the designed to work with 

00:59:41.278 --> 00:59:43.938
potentially very long lists of 
things.  It could be an infinite

00:59:43.939 --> 00:59:46.992
stream of data, you don't want 
to shuffle the whole thing, 

00:59:46.993 --> 00:59:49.234
shuffle has a size for the 
buffer.   I have a buffer of 

00:59:49.235 --> 00:59:51.235
1,000 elements to 

00:59:52.521 --> 00:59:57.681
shuffle them as they stream in. 
Imbatch it up and get a batch of

00:59:57.682 --> 01:00:00.506
32 things.   I'll show you very 
briefly how you use it.

01:00:04.383 --> 01:00:06.383
To use it, this is the plead 
code by 

01:00:07.533 --> 01:00:09.984
the way, for images, labels, 
print them out.  This looks 

01:00:09.985 --> 01:00:11.985
obvious to me and it is the way 
things should work.

01:00:13.481 --> 01:00:15.762
If you're new to TensorFlow it 
didn't used to always work like 

01:00:15.763 --> 01:00:19.266
this.  If you have previous 
experience in TensorFlow you can

01:00:19.267 --> 01:00:21.298
take a look and notice nowhere 
in this code is there a 

01:00:24.801 --> 01:00:26.220
session, no had placeholders, 
I'm not mentioning Graph but 

01:00:26.221 --> 01:00:28.671
writing regular Python code and 
the things just works.

01:00:32.777 --> 01:00:34.222
This is eager execution, the one
thing I have to do, it is the 

01:00:34.223 --> 01:00:36.223
second line of code there, I 
enable the thing, you need 

01:00:39.366 --> 01:00:41.417
to do this at the start of the 
Python father notebook and now 

01:00:41.418 --> 01:00:46.139
you're running TensorFlow 
eagerly which if you're starting

01:00:46.140 --> 01:00:47.994
out, it is regular Python.  This
is the right way to use 

01:00:47.995 --> 01:00:49.995
TensorFlow.

01:00:51.455 --> 01:00:53.491
It makes debugging much easier.
  There's lots of reasons why 

01:00:53.492 --> 01:00:58.186
you would use graphs and we 
still love graphs, there is 

01:00:58.187 --> 01:01:00.022
great talks from the developer 
summit that goes into this em in

01:01:00.023 --> 01:01:04.360
lots of details but when 
hacking, definitely, definitely 

01:01:04.361 --> 01:01:07.073
do this.
  For more context, all of that,

01:01:07.074 --> 01:01:11.126
I have been talking for a while.
I'll hand it over to Lawrence.

01:01:11.127 --> 01:01:14.198
  &gt;&gt; LAURENCE MORONEY: Just a 
quick survey of the crowd.   How

01:01:14.199 --> 01:01:16.199
many software developers here?

01:01:17.860 --> 01:01:19.275
We're at I/O, we figure ited we 
would have a few.  That's good.

01:01:19.276 --> 01:01:22.993
  I have been working on 
TensorFlow for a few months.  I 

01:01:22.994 --> 01:01:25.024
think forgetting started in 
TensorFlow can be a little bit 

01:01:25.025 --> 01:01:29.112
difficult if you're coming from 
software dev background and 

01:01:29.113 --> 01:01:32.179
started in any kind of ML can be
tricky.  There is so many new, 

01:01:32.180 --> 01:01:35.637
different concepts.  First of 
all, there is all the math.  I 

01:01:35.638 --> 01:01:37.266
didn't understand this math when
I was in high school, now I have

01:01:37.267 --> 01:01:43.005
to understand it again.  People 
tell me about linear regressions

01:01:43.006 --> 01:01:45.006
and my head explodes.  It is  
learnable, something that you 

01:01:45.278 --> 01:01:48.335
can pick up.
  Secondly, really the 

01:01:48.336 --> 01:01:51.176
programming model and what is 
the programming model all about?

01:01:53.841 --> 01:01:57.732
I come from a background of 
traditional programming.  In 

01:01:57.733 --> 01:01:59.365
traditional programming, you 
basically feed in the rules, you

01:01:59.366 --> 01:02:03.933
feed in the data and you get 
answers out so for example if 

01:02:03.934 --> 01:02:05.934
you're writing something like an
activity detector, am I walking,

01:02:09.029 --> 01:02:11.472
running, biking, driving?  You 
feed in rules about that based 

01:02:11.473 --> 01:02:13.473
on the speed.

01:02:15.361 --> 01:02:18.027
I'm a very slow runner, it is 
the 1.5-mile an hour, detecting 

01:02:18.028 --> 01:02:23.329
me as running, but Josh is a 
fast runner.  So it would be -- 

01:02:23.330 --> 01:02:26.177
it would think he's on a bike if
he's using my rules.  Those 

01:02:26.178 --> 01:02:30.688
things.  You're feeding the 
data, the rules  in.  This is 

01:02:30.689 --> 01:02:33.573
what we have been doing for 
years as  programmers.  When it 

01:02:33.574 --> 01:02:35.648
comes to inen learning, you have
to flip the axis on this a 

01:02:35.649 --> 01:02:38.290
little bit and change it to 
this.   When it comes to machine

01:02:38.291 --> 01:02:42.423
learning, this is all machine 
learning is, you feed in the 

01:02:42.424 --> 01:02:46.694
answers and you feed in the data
and get back the rules.  When we

01:02:46.695 --> 01:02:48.948
talk about training a model, 
when we talk about building 

01:02:48.949 --> 01:02:50.949
these 

01:02:52.012 --> 01:02:54.090
models, what we're getting is a 
blob that you can run inference 

01:02:54.091 --> 01:02:58.577
on and this blob that you run 
inference on, it is effectively 

01:02:58.578 --> 01:03:00.578
has -- will give what you need 
back out to you.

01:03:02.832 --> 01:03:05.385
For example, in my example of 
activity detection, if I walk a 

01:03:05.386 --> 01:03:09.687
lot, tell it I'm walking, it is 
measuring my sensor data when 

01:03:09.688 --> 01:03:13.567
walking, if I run a lot, that 
would be nice, right!  It if I 

01:03:13.568 --> 01:03:15.568
run a lot, feed in the back, I 

01:03:17.033 --> 01:03:18.863
bike a lot, drive a lot, go on 
trains and airplanes and we feed

01:03:18.864 --> 01:03:23.573
in the data and the answers 
telling it, okay, right now I'm 

01:03:23.574 --> 01:03:25.592
walking, biking, on a plane, 
then the idea behind machine 

01:03:25.593 --> 01:03:30.511
learning is that it will build 
that blob for me which I can run

01:03:30.512 --> 01:03:32.970
inference on, by doing that, it 
is like okay, what am I doing 

01:03:32.971 --> 01:03:37.687
right now?  It will deduce what 
I'm doing now from all of these 

01:03:37.688 --> 01:03:39.688
rules.

01:03:41.365 --> 01:03:43.402
Instead of me trying to write 
all of this, you know, I train a

01:03:43.403 --> 01:03:47.266
system with data and with 
answers and it gives me back 

01:03:47.267 --> 01:03:49.267
rules.

01:03:51.411 --> 01:03:54.678
  An example:  Let's building 
something that will determine 

01:03:54.679 --> 01:03:58.340
from a picture what's a cat and 
dog.  If I was doing it with if 

01:03:58.341 --> 01:04:02.451
then rules, I could do something
like, you know, if it loves you 

01:04:02.452 --> 01:04:06.416
unconditionally, no matter what 
you  do, it is probably a dog.  

01:04:06.417 --> 01:04:08.417
If it is right in and out 
plotting 

01:04:09.673 --> 01:04:11.932
your murder, it is probably a 
cat.  Right now it is hard to 

01:04:11.933 --> 01:04:15.593
infer that from images.  I 
couldn't think of what the rules

01:04:15.786 --> 01:04:20.264
would be.  Sometimes you have an
image, if it has pointy ears it 

01:04:20.265 --> 01:04:23.926
is a cat but guess what, the dog
has pointed ears.  This is when 

01:04:23.927 --> 01:04:26.168
you start thinking about -- 
machine learning opens up the 

01:04:26.169 --> 01:04:30.462
new scenarios and ways that you 
as a programmer can bring value 

01:04:30.463 --> 01:04:32.710
to your employers and to your 
business.

01:04:34.549 --> 01:04:36.549
Let's talk about the answers in 
this case.

01:04:39.656 --> 01:04:41.656
The answers here, it is this is 
a cat.

01:04:44.644 --> 01:04:47.479
I think it is a dog.  This has 
pointy ears.  This guy.

01:04:50.532 --> 01:04:52.532
This is clearly a cat.

01:04:57.467 --> 01:04:59.694
Had this is a walking tongue but
also a dog.  This is what 

01:04:59.695 --> 01:05:02.579
happens after you feed after 
midnight.  This is one of the 

01:05:02.580 --> 01:05:06.232
dogs in this set of the cats and
dogs.  I have got the data.  

01:05:06.233 --> 01:05:08.035
Here I'm giving the answers.  
I'm telling the machine what all

01:05:08.036 --> 01:05:10.036
of 

01:05:11.537 --> 01:05:15.631
these things are.  If I want to 
as a programmer, all I have to 

01:05:15.632 --> 01:05:17.491
do is train the network by 
giving it the answers, we call 

01:05:17.492 --> 01:05:21.177
them labels and the data.  As a 
programmer, here is where it was

01:05:22.827 --> 01:05:24.827
tough for me and I have only 
very 

01:05:26.113 --> 01:05:28.549
recently been on TensorFlow 
because first of all, you start 

01:05:28.550 --> 01:05:30.993
working in  Python, any 
developers here for Python?  A 

01:05:30.994 --> 01:05:33.055
few of you.  It is a lovely 
language but it is a 

01:05:36.329 --> 01:05:37.964
text editor rather than an ADE 
and step through debugging, I 

01:05:37.965 --> 01:05:39.965
came from a 

01:05:43.702 --> 01:05:46.962
background with visual studio, X
code, Android studio.  It was a 

01:05:46.963 --> 01:05:49.409
big learning curve for me.  If 
you go to graph-based execution,

01:05:51.653 --> 01:05:53.272
you have the code and you load 
up a graph and execute that 

01:05:53.273 --> 01:05:55.273
graph and what if 

01:05:56.567 --> 01:05:57.998
I have bugs in reading the data,
not reading it properly, if I 

01:05:57.999 --> 01:06:02.291
have not shuffled the data  
properly f it is important as 

01:06:02.292 --> 01:06:04.362
was mentioned early on is to 
shuffle the data or you can 

01:06:04.363 --> 01:06:09.906
insert a bias in the training.  
I'm not a very good programmer. 

01:06:09.907 --> 01:06:11.526
I again lie like to write 2, 3 
lines of code, step through 

01:06:11.527 --> 01:06:15.811
them, make sure they work, write
another, step through them, make

01:06:15.812 --> 01:06:18.089
sure they work, that thing.  
That was difficult for me to do 

01:06:18.090 --> 01:06:23.231
as a TensorFlow developer.  
Switch to the laptop.  I want to

01:06:23.232 --> 01:06:25.232
show why I'm really excited 

01:06:26.472 --> 01:06:28.472
about eager mode.

01:06:31.024 --> 01:06:32.883
What I'm really excited about, 
TensorFlow, it is -- I have 

01:06:32.884 --> 01:06:38.458
taken and Josh has written a 
notebook with the cat versus 

01:06:38.459 --> 01:06:38.892
dogs and you can get this code 
online and run it in the 

01:06:38.893 --> 01:06:41.934
notebook.  I'm running it in pie
chart because I'm not a very 

01:06:41.935 --> 01:06:46.633
good developer.  I want to write
a few lines of code, execute 

01:06:46.634 --> 01:06:49.069
them, write a few  more, and 
this is a free community edition

01:06:49.070 --> 01:06:53.010
which is what I'm running here, 
if you use Android studio, it 

01:06:53.011 --> 01:06:55.011
looks familiar.

01:06:56.454 --> 01:06:58.454
What I can do, I go in, run 
debug.  I have to go, debug.

01:07:02.000 --> 01:07:04.000
I'll debug cats versus dogs.

01:07:06.513 --> 01:07:08.583
It starts to execute and I have 
hit a break point.  it is 

01:07:08.584 --> 01:07:10.412
magical to me as a developer.   
I hit the break point and I can 

01:07:10.413 --> 01:07:15.349
step through the code and see 
what's going on in the code.  

01:07:15.350 --> 01:07:17.350
You know, I have hit another 
break 

01:07:19.906 --> 01:07:21.773
point, I have shut one down 
here, I execute that code until 

01:07:21.774 --> 01:07:26.316
the break point.  I see I'm 
doing things correctly.  Okay, 

01:07:26.317 --> 01:07:28.567
my data directory is set up 
properly.  I have defined my 

01:07:28.568 --> 01:07:30.568
labels, you know, 

01:07:31.626 --> 01:07:34.077
I'm going to put another -- I 
have the break point there.  

01:07:34.078 --> 01:07:36.740
I'll Rundown to this break 
point.  I can start looking at 

01:07:36.741 --> 01:07:38.741
what's going on in here.

01:07:42.052 --> 01:07:44.933
I have the training images, if I
hover over that, it is too big 

01:07:44.934 --> 01:07:46.934
to print but I 

01:07:49.227 --> 01:07:51.472
look at this in the debugger, 
but I see I have the arrays of 

01:07:51.473 --> 01:07:53.473
images.

01:07:56.832 --> 01:07:58.832
The 0 here, it was cat number 
921.

01:08:01.110 --> 01:08:02.546
If I step through, eager 
execution is giving me this -- I

01:08:02.547 --> 01:08:04.547
hit a break point.  I didn't 
want to hit.

01:08:07.660 --> 01:08:13.039
I'm just going down to here.  
We'll continue running.   If I 

01:08:13.040 --> 01:08:15.694
then step over this, it should 
show me a cat.  Okay.   Okay.  I

01:08:15.695 --> 01:08:17.956
have gotten this cat.  I'm 
loading it in.  Is this the 

01:08:17.957 --> 01:08:22.243
right cat?  Have I written the 
code badly?  Do I have the wrong

01:08:22.244 --> 01:08:24.682
cat?  I say this is my training 
data, I can 

01:08:27.960 --> 01:08:29.572
look at the cats, find cat 
number 921 and hopefully it is 

01:08:29.573 --> 01:08:31.573
the same cat so I 

01:08:32.879 --> 01:08:34.879
know the code is working right.

01:08:36.146 --> 01:08:38.168
Anyone else develop like this in
little steps?  Good!  It is not 

01:08:38.169 --> 01:08:41.844
just me.  I find it really, 
really difficult to write a lot 

01:08:41.845 --> 01:08:47.142
of code in one sitting.  I have 
to do baby step by baby step.  

01:08:47.143 --> 01:08:48.390
On 921, it is here, there it is,
it is the same cat.  I'm like 

01:08:48.391 --> 01:08:50.391
excellent!  I know my code is 
working!

01:08:53.311 --> 01:08:55.311
I know I'm loading properly from
my data.

01:08:56.567 --> 01:08:58.807
I'll go through here, I can see 
my load image code, what it is 

01:08:58.808 --> 01:09:00.808
doing, it is 

01:09:01.857 --> 01:09:04.336
reading the image, creating the 
TensorFlow out of the image, 

01:09:04.337 --> 01:09:07.813
residing it to a smaller image 
to use in training.  When you 

01:09:07.814 --> 01:09:09.650
come from a world where the 
hello world in machine learning,

01:09:09.651 --> 01:09:14.157
it is handwriting recognition, 
you know, for me hello world was

01:09:14.158 --> 01:09:19.076
S print F hello world, you know,
there was complicated scenarios 

01:09:19.077 --> 01:09:20.952
and it is complex scenarios and 
it is brought down as a 

01:09:20.953 --> 01:09:25.234
developer.  We can start poking 
through, looking at data in the 

01:09:25.235 --> 01:09:27.235
IDE and I understand what's 
going on.

01:09:28.501 --> 01:09:30.501
What I'll do, I'll just execute 
the code a little bit more.

01:09:31.777 --> 01:09:33.382
&gt;&gt; JOSH GORDON: A cool point on 
this too, this load image 

01:09:33.383 --> 01:09:37.096
function, if you look at it, it 
is TF operations.   We're saying

01:09:37.097 --> 01:09:39.967
TensorFlow.read image.  These 
are working exactly like they 

01:09:41.793 --> 01:09:43.624
would if you were using others, 
because we're running eagerly, 

01:09:43.625 --> 01:09:46.710
this code is imperative and 
executes right after you hit the

01:09:46.711 --> 01:09:49.182
line.  You noticed when he was 
hovering over 

01:09:52.222 --> 01:09:54.222
it, you see the data and not -- 
it is  

01:09:57.272 --> 01:09:58.179
concrete, not symbolic.
  &gt;&gt; LAURENCE MORONEY: Of 

01:09:58.180 --> 01:10:02.232
course, if you're in Python and 
like the console as well, a 

01:10:02.233 --> 01:10:03.653
thing that's nice, I have a 
console window so if the 

01:10:03.654 --> 01:10:07.337
existing code is printed out to 
the console, I can do that.  

01:10:07.338 --> 01:10:10.190
I'll step a little bit further 
down and I want to go to the 

01:10:10.191 --> 01:10:14.467
training.  A nice thing that 
Joshua is talking about, this is

01:10:14.468 --> 01:10:16.952
it just an it rater in Python.  
You know, I can step through, I 

01:10:16.953 --> 01:10:21.237
can take a look at what's going 
on in the training.  I can look 

01:10:21.238 --> 01:10:24.102
at this batch by  batch.  If I 
have 6,000 images I'm loading 

01:10:24.103 --> 01:10:27.758
in, I have split that into 
smaller batches and then once I 

01:10:27.759 --> 01:10:29.810
have done all of those batches, 
that's an epoch and I can go 

01:10:33.060 --> 01:10:34.489
through, I can look at my epochs
and look at the training and 

01:10:34.490 --> 01:10:38.167
step into it.   I can sea breeze
going on as I step into it --

01:10:38.168 --> 01:10:41.289
  &gt;&gt; Another quick point.  to 
show you how fast this is 

01:10:41.290 --> 01:10:45.569
evolving, you notice the value 
of the images and values as of I

01:10:45.570 --> 01:10:47.595
think a few days ago, it is no 
longer necessary f you can fit 

01:10:47.596 --> 01:10:52.506
the models with the datasets so 
you no longer need that 

01:10:52.507 --> 01:10:54.507
intermediate step so that's 
great.

01:10:54.760 --> 01:10:55.158
&gt;&gt; Thank goodness it still 
works.

01:10:55.159 --> 01:10:57.613
&gt;&gt; Yes!
  &gt;&gt; A neat thing about it, of 

01:10:57.614 --> 01:11:01.725
course, because tenser flow is 
Open Source, if you want to know

01:11:01.726 --> 01:11:04.368
what's going on with your 
training, maybe something is -- 

01:11:06.199 --> 01:11:08.022
maybe you have loaded data 
causing it to crash or something

01:11:08.023 --> 01:11:10.254
along those lines, as you do 
this, as you ex compute these 

01:11:12.763 --> 01:11:14.607
things -- let's see if I can do 
it -- I have to hit pause at 

01:11:14.608 --> 01:11:16.608
some point and I 

01:11:17.849 --> 01:11:20.142
have jumped into the tenser flow
source code and not only can I 

01:11:20.143 --> 01:11:22.143
step through my source to see 
what's goingen o, I can 

01:11:26.868 --> 01:11:29.299
jump in to the TensorFlow source
so maybe I have triggered a bug 

01:11:29.300 --> 01:11:31.300
or maybe 

01:11:33.004 --> 01:11:35.903
I'm doing something wrong and 
TensorFlow is not cooperating 

01:11:35.904 --> 01:11:37.904
and I can if I it and 

01:11:39.435 --> 01:11:40.040
this is made by eager 
anticipation and TensorFlow and 

01:11:40.041 --> 01:11:42.480
Python.  You have to use the 
TensorFlow version 1.

01:11:45.751 --> 01:11:47.751
8 and later and don't use the 
executing eagerly.

01:11:49.442 --> 01:11:51.442
&gt;&gt; Cryptic air messages are 
mostly a thing of the fast.

01:11:54.136 --> 01:11:57.022
The third promise --
  &gt;&gt; Yes.  Thank you very much. 

01:11:57.023 --> 01:12:00.490
I spent a lot of time in 
eclipse, I like it a lot.  

01:12:00.491 --> 01:12:03.343
Before -- anyway -- to learn 
more about the concepts.  I'll 

01:12:03.344 --> 01:12:07.397
recommend two sources.  First, 
we have a machine learning crash

01:12:07.398 --> 01:12:09.398
course, it is good, short.

01:12:13.176 --> 01:12:16.640
This is probably a day, two days
of your time full time.  It 

01:12:16.641 --> 01:12:18.641
doesn't teach about ML but it is
a 

01:12:20.324 --> 01:12:22.600
solid, introduction of what is 
lost.  I would like to recommend

01:12:22.601 --> 01:12:24.601
a book, buy 

01:12:26.889 --> 01:12:29.312
a Googler and I will 
mispronounce the name, it is a 

01:12:29.313 --> 01:12:33.005
wonderful, wonderful book, deep 
learning with with Python.  

01:12:33.006 --> 01:12:34.864
There are many, many books with 
very similar titles to deep 

01:12:34.865 --> 01:12:36.865
learning with Python.

01:12:38.523 --> 01:12:40.604
The one you want is written by 
francois, published by manning 

01:12:40.605 --> 01:12:43.057
and comes with a collection of 
June tar notebooks 

01:12:46.329 --> 01:12:48.329
which are freely available on 
github 

01:12:50.223 --> 01:12:51.850
that will teach you how how to 
use this, because they're a part

01:12:51.851 --> 01:12:57.148
of TensorFlow flow, all of the 
the code will work with no 

01:12:57.149 --> 01:12:59.149
changes rather than the imports 
and 

01:13:00.620 --> 01:13:03.303
that's a solid foundation and 
then later you can learn about 

01:13:03.304 --> 01:13:05.304
FT data and advanced 

01:13:06.347 --> 01:13:09.216
features of TensorFlow to do 
even more.  It is a wonderful 

01:13:09.217 --> 01:13:11.217
starting point.

01:13:12.505 --> 01:13:14.505
Another thing to, I wanted to 
show 

01:13:15.600 --> 01:13:17.600
TensorFlow GFSs on this, with 
the model, you can do model.

01:13:19.675 --> 01:13:21.675
save, one line of code, model.

01:13:24.189 --> 01:13:26.204
save, you have some path, 
whatever, you save the model to 

01:13:26.205 --> 01:13:28.205
disk.

01:13:29.675 --> 01:13:31.554
Using the sensor flow, they have
the tutorials showing you how to

01:13:31.555 --> 01:13:34.542
import relatively easily the 
processer.

01:13:37.610 --> 01:13:39.610
So the same APIs are compatible 
across the platforms.

01:13:41.714 --> 01:13:43.186
Check out colab regardless of 
TensorFlow or not, TensorFlow is

01:13:43.187 --> 01:13:46.248
a valuable resource.  Its 
wonderful in educational context

01:13:47.890 --> 01:13:49.730
if you're teaching after work, 
something like that, students 

01:13:49.731 --> 01:13:51.731
can jump right in.

01:13:52.807 --> 01:13:54.851
Check out the workshops, in the 
next three months or so, we'll 

01:13:54.852 --> 01:13:59.528
be updating a lot of our 
tutorials in TensorFlow but in 

01:13:59.529 --> 01:14:00.957
the meantime I'm hacking 
Examples together so you can see

01:14:00.958 --> 01:14:02.958
what it looks like.

01:14:06.044 --> 01:14:07.253
We have an education --
  &gt;&gt; LAURENCE MORONEY: Some 

01:14:07.254 --> 01:14:10.969
really fun demos, we can 
actually train it to recognize 

01:14:10.970 --> 01:14:13.644
the face going left, right, up 
and down and you pay pacman 

01:14:13.645 --> 01:14:15.050
going like this.  Its cool.
  &gt;&gt; JOSH GORDON: Super cool.

01:14:15.051 --> 01:14:18.717
  &gt;&gt; LAURENCE MORONEY: Take a 
look and it is Open  Sourced.

01:14:18.718 --> 01:14:22.286
  &gt;&gt; JOSH GORDON: Thank you.  It
is early.  We'll be around 

01:14:22.287 --> 01:14:23.921
afterwards as long as you be 
want to take  questions.Thank 

01:14:23.922 --> 01:14:25.922
you very much.  We hope this is 
useful to you.

01:14:26.402 --> 01:14:28.402
Thank you.  

01:21:19.149 --> 01:21:21.149
on the 

01:21:22.154 --> 01:21:24.154
Web

01:25:37.788 --> 01:25:40.053
.
  &gt;&gt; JOHN PALLETT: Hello.  Good 

01:25:40.054 --> 01:25:46.660
morning.  Wow.   Interactive 
crowd today!  Great!

01:25:47.263 --> 01:25:49.351
&gt;&gt; AUDIENCE: Good morning!
  &gt;&gt; JOHN PALLETT: You don't 

01:25:49.352 --> 01:25:51.352
even need a mic.  That's 
incredible.

01:25:58.457 --> 01:26:00.457
Welcome to the talk on Awesome 
web media.  I'm John Pallett.

01:26:07.480 --> 01:26:11.480
I'm a project manager on the 
Chrome media team.  We'll talk 

01:26:07.480 --> 01:26:07.494
about several topics.  We have a
great talk.  For my part, I'll 

01:26:07.495 --> 01:26:09.495
talk about a if you updates in 
the ecosystem and API updates 

01:26:11.533 --> 01:26:13.533
and changes in Chrome.  After  
that, Jennifer will go into a 

01:26:13.536 --> 01:26:14.153
really important topic of web 
media consumption, multitasking,

01:26:14.154 --> 01:26:16.154
as more and 

01:26:17.427 --> 01:26:19.125
more viewers are using the 
computers to consume media and 

01:26:19.126 --> 01:26:21.420
do other things at the same 
time, it is really an important 

01:26:21.623 --> 01:26:23.623
topic.

01:26:27.440 --> 01:26:29.440
Finally, Zoe Llu has an update 
on video compression.

01:26:31.338 --> 01:26:33.973
It is amazing stuff, I don't 
want to steal her thunder, 

01:26:33.974 --> 01:26:37.439
she'll cover more details later.
  If you attended last year, you

01:26:37.440 --> 01:26:41.111
heard us say this is the decade 
that's transformed consumption 

01:26:41.112 --> 01:26:46.040
of media, particularly in the 
video space and the web has been

01:26:46.041 --> 01:26:48.041
a big part of that.

01:26:50.117 --> 01:26:53.561
Every day 30,000 hours of video 
is consumed in Chrome.   That's 

01:26:53.562 --> 01:26:56.230
just video, not including audio.
There is a massive amount of 

01:26:56.231 --> 01:26:58.231
media 

01:26:59.693 --> 01:27:01.693
consumption across a very wide 
range of  sites.

01:27:01.939 --> 01:27:04.825
The ways that users are 
consuming that media is 

01:27:04.826 --> 01:27:06.826
continuing to change.

01:27:08.314 --> 01:27:10.314
That's driving new APIs that we 
in the 

01:27:11.409 --> 01:27:13.838
Chrome team need to add and 
support.  For example, 

01:27:13.839 --> 01:27:15.463
progressive web apps have made 
an interesting difference for 

01:27:15.464 --> 01:27:17.464
media companies because it gives
them a way to 

01:27:21.200 --> 01:27:23.687
get to users that have limited 
storage capability.  It let's 

01:27:23.688 --> 01:27:25.688
them get to them without 
requiring app install.

01:27:27.973 --> 01:27:30.625
For example, Instagram doubled 
their retention of web users 

01:27:30.626 --> 01:27:32.626
when they larged 

01:27:34.697 --> 01:27:36.697
the progressive web app last 
year -- when they launched.

01:27:37.974 --> 01:27:39.812
An important case that's 
relevant over the last couple of

01:27:39.813 --> 01:27:43.068
years on the web is offline 
media consumption.  As more and 

01:27:43.069 --> 01:27:45.069
more people get access to mobile
devices, they really want to 

01:27:46.967 --> 01:27:48.603
watch media or listen to media 
and they want to do it even in 

01:27:48.604 --> 01:27:52.270
places where Internet access is 
not available.   This is really 

01:27:52.271 --> 01:27:54.271
important in countries 

01:27:56.165 --> 01:27:58.816
like India and sites are adding 
support for off 9-1-1 line play 

01:27:58.817 --> 01:28:00.817
back using some of the new web 
APIs.

01:28:05.193 --> 01:28:07.193
In this case, -- support for 
offline play back

01:28:09.090 --> 01:28:11.563
They're downloading to the 
device and then they're able to 

01:28:11.564 --> 01:28:13.642
watch it offline.  This is 
really coming together partly 

01:28:17.784 --> 01:28:20.011
because of progressive web apps 
and the underlying APIs that 

01:28:20.012 --> 01:28:22.462
make it possible.
  We covered a lot of this last 

01:28:22.463 --> 01:28:24.463
year at I/O and for those of you
that couldn't 

01:28:26.763 --> 01:28:28.609
make, it, the message, it was 
that the mobile web is really 

01:28:28.610 --> 01:28:30.610
ready for media.

01:28:36.479 --> 01:28:40.345
You can do great things with 
media playback on the mobile 

01:28:36.479 --> 01:28:38.479
web.

01:28:44.486 --> 01:28:46.481
For this talk, we're going to  
There is a representative 

01:28:46.482 --> 01:28:50.682
assemble of what's available in 
the link above and I encourage 

01:28:46.482 --> 01:28:48.482
you to check it out.

01:28:50.515 --> 01:28:51.499
talk about some different 
things.  Let's talk about 

01:28:51.500 --> 01:28:51.561
desktop.  What I want to do is 
talk about a recent change that 

01:28:51.562 --> 01:28:53.562
addresses something 

01:28:55.517 --> 01:28:59.383
that users have been complaining
about for years.  That is 

01:28:55.517 --> 01:28:57.517
autoplay.  When a user goes to a
site and it 

01:28:59.582 --> 01:29:01.446
unexpectedly plays audio that's 
not good.  In fact, we can track

01:29:01.447 --> 01:29:03.888
this.   We know that a 
significant percentage 

01:29:07.813 --> 01:29:10.270
of media that starts playing 
when a user first visits a site 

01:29:10.271 --> 01:29:13.127
without them interacting with 
the site tall is shutdown within

01:29:13.128 --> 01:29:17.439
6 seconds.   That's shutdown by 
either a pause or closing the 

01:29:17.440 --> 01:29:19.686
tab or  muting, doing something 
like that.

01:29:23.956 --> 01:29:25.191
We recently launched a new 
policy in Chrome to address 

01:29:25.192 --> 01:29:28.861
autoplay.  It applies when the 
user first arrives to the site.

01:29:31.928 --> 01:29:33.156
This does not take effect after 
they have interacted with the 

01:29:33.157 --> 01:29:36.205
site, if they click on it, tap 
on it, the autoplay policy is 

01:29:36.206 --> 01:29:40.473
not applied.  The policy applies
when the user first arrives at 

01:29:40.474 --> 01:29:42.474
the site.

01:29:43.798 --> 01:29:47.106
When a user arrives, muted 
autoplay is always allowed.  If 

01:29:47.107 --> 01:29:48.524
you're wondering what can I 
safely do, the answer is you can

01:29:48.525 --> 01:29:51.167
do things that don't play audio.
If you have a video element, you

01:29:51.168 --> 01:29:55.875
can play it.  There are a few 
cases where you can also play 

01:29:55.876 --> 01:29:58.345
audio when a user first arrives.
Of course, after a click or a 

01:29:58.346 --> 01:30:02.642
tap, it is fine, you can play 
audio.  When a user first 

01:30:02.643 --> 01:30:04.267
arrives, there are a couple of 
situations where you can play 

01:30:04.268 --> 01:30:06.268
audio.

01:30:07.938 --> 01:30:10.188
The first, if your app is a 
progressive web app on mobile 

01:30:10.189 --> 01:30:13.289
and the user is launching it or 
has it installed from the home 

01:30:13.290 --> 01:30:17.667
screen.  In this case, when they
launch this, autoplay with sound

01:30:17.668 --> 01:30:19.668
is allowed.

01:30:21.123 --> 01:30:23.123
The second case on desktop, it 
is that 

01:30:25.091 --> 01:30:27.575
Chrome is learning which sites 
users go to and it looks to say,

01:30:27.576 --> 01:30:29.576
wait a minute, 

01:30:31.244 --> 01:30:32.463
if a user is going to this site 
and  playing media most of the 

01:30:32.464 --> 01:30:34.464
time on this site with sound, 
after a click, a tap, 

01:30:37.591 --> 01:30:39.476
they want media with sound on 
that site.  Over time as a user 

01:30:39.477 --> 01:30:44.358
browses, Chrome will identify 
the sites and say, okay, we'll 

01:30:44.359 --> 01:30:47.038
allow autoplay on a site where 
the media is usually being 

01:30:47.039 --> 01:30:49.301
played with sound.  This is an 
interesting case for Chrome 

01:30:51.373 --> 01:30:54.016
where it has the ability to 
personalize the experience for 

01:30:54.017 --> 01:30:56.017
the user.

01:30:59.139 --> 01:31:01.571
In fact, we launched this a few 
weeks ago and as I mentioned, we

01:31:01.572 --> 01:31:05.690
get a strong signal on autoplays
that are not wanted.  We know 

01:31:05.691 --> 01:31:07.691
that the ones that are shutdown 
quickly are the ones that users 

01:31:08.177 --> 01:31:10.177
don't want.

01:31:12.260 --> 01:31:14.260
We looked at the results after 
this 

01:31:15.759 --> 01:31:17.759
and saw half of the autoplays 
get blocked.

01:31:19.231 --> 01:31:21.231
That's not 100%, that's half.

01:31:22.702 --> 01:31:24.467
Why only half, it is partly 
because Chrome is learning and 

01:31:24.468 --> 01:31:26.920
it doesn't always get things 
right.  It is a massive user 

01:31:26.921 --> 01:31:30.622
benefit.  We cut out half of 
unwanted autoplays when users go

01:31:30.623 --> 01:31:34.915
to sites.  For you, the 
developer what this means, it is

01:31:34.916 --> 01:31:36.947
that you cannot always expect 
that audio will just work if you

01:31:39.200 --> 01:31:42.682
start playing it when the user 
arrives at a site.  What this 

01:31:42.683 --> 01:31:44.713
means, what a user -- when a 
user lands on the page, you 

01:31:44.714 --> 01:31:46.714
won't know 

01:31:48.004 --> 01:31:49.630
if autoplay with sound will work
until after the user gesture, a 

01:31:49.631 --> 01:31:51.631
click or tab.

01:31:53.193 --> 01:31:55.448
After a click or tap, you're 
fine, when the user arrives 

01:31:55.449 --> 01:31:57.449
first, you won't know.  If 
you're using a video, audio 

01:31:59.204 --> 01:32:01.444
element, the way to detect it is
to look at the results from the 

01:32:01.445 --> 01:32:04.514
play premise.   You can tell by 
looking at the results whether 

01:32:04.515 --> 01:32:06.515
or not autoplay started and if 
it wasn't, if you tried to you a

01:32:08.162 --> 01:32:10.162
toe play something with sound, 
you know 

01:32:12.079 --> 01:32:13.895
that you can then try to play it
without sound.  If what you're 

01:32:13.896 --> 01:32:15.896
doing is hosting 

01:32:17.149 --> 01:32:18.995
embedded videos, so videos that 
are in a cross origin timeframe 

01:32:18.996 --> 01:32:21.037
and you want them to have the 
ability to autoplay in 

01:32:23.305 --> 01:32:25.305
situations where they're allowed
to, you 

01:32:26.784 --> 01:32:29.237
want to add a new attribute to 
the frame, the allow equals 

01:32:29.238 --> 01:32:33.296
autoplay attribute.  This does 
not mean that embedded videos 

01:32:33.297 --> 01:32:38.594
can always autoplay.  It means 
that if you have a frame on your

01:32:38.595 --> 01:32:41.458
site and the site gets the 
ability to autoplay, then the I 

01:32:41.459 --> 01:32:44.173
mean, frame gets the ability to 
autoplay.  If you don't include 

01:32:44.174 --> 01:32:46.834
this attribute, in I embedded 
video in the cross origin 

01:32:48.462 --> 01:32:50.520
timeframe won't be allowed to 
autoplay even if they say we 

01:32:50.521 --> 01:32:54.438
want to, they can't do it.  The 
policy will prevent them.  If 

01:32:54.439 --> 01:32:56.260
you're embedding videos and you 
want them to autoplay in sound 

01:32:56.261 --> 01:33:01.969
when Chrome allows it, use the 
allow  equals autoplay 

01:33:01.970 --> 01:33:05.627
attribute.
  The final thing here, web 

01:33:05.628 --> 01:33:07.872
audio.  What we're looking at 
here, an example 

01:33:11.957 --> 01:33:13.993
of a web audio site and it is 
typical which creates audio 

01:33:13.994 --> 01:33:15.994
context on load, 

01:33:17.477 --> 01:33:19.761
that's the top half of the code 
up top.  What the assumption is 

01:33:19.762 --> 01:33:23.018
here, that audio will always 
work when the user first arrives

01:33:23.019 --> 01:33:27.946
at the site.  As I said, that's 
no longer a valid assumption.  

01:33:27.947 --> 01:33:30.854
The good news  is, what will 
happen under the hood, something

01:33:30.855 --> 01:33:32.855
that you can 

01:33:34.257 --> 01:33:38.028
react to within o with only a 
small change.  If you start the 

01:33:38.029 --> 01:33:40.029
audio context and don't know 
whether or not it is running, 

01:33:40.905 --> 01:33:43.532
what you can do, you look for 
the user interaction on the 

01:33:43.533 --> 01:33:45.395
site, a click or a tap and call 
will resume on the audio 

01:33:45.396 --> 01:33:48.673
context.   On that point, the 
audio will continue to work.

01:33:50.147 --> 01:33:52.169
The other thing you can do, I 
don't have the code sample up 

01:33:52.170 --> 01:33:56.110
here, you can actually check the
state of the audio context to 

01:33:56.111 --> 01:34:01.042
determine whether or not it was 
blocked by the autoplay policy. 

01:34:01.043 --> 01:34:03.480
Check this state, if it is 
running, then audio is playing. 

01:34:03.481 --> 01:34:05.329
If it is suspended, it is not.  
That gives you an opportunity to

01:34:05.330 --> 01:34:07.330
do things like update mute 
controls to 

01:34:10.401 --> 01:34:12.401
reflect whether or not audio is 
actually  playing.

01:34:12.850 --> 01:34:14.297
I want to pause for a second to 
say our team is, woulding hard 

01:34:14.298 --> 01:34:16.298
to improve 

01:34:17.391 --> 01:34:19.229
things for users and -- is 
working hard to improve things 

01:34:19.230 --> 01:34:21.714
for users and developers.  We 
could have done a better job of 

01:34:23.333 --> 01:34:25.995
communicating this policy change
to developers using the web 

01:34:25.996 --> 01:34:30.065
audio API, if you have questions
on this particular change, we're

01:34:30.066 --> 01:34:32.066
available both at the web audio 
office hours at 12:30 and in 

01:34:33.531 --> 01:34:35.531
addition, we have media office 
hours 

01:34:36.619 --> 01:34:38.651
today at 6:30 and tomorrow at 
1:30.  If you're not here at 

01:34:38.652 --> 01:34:42.153
I/O, if you're watching at home 
or want more information on the 

01:34:42.154 --> 01:34:44.192
policy changes, the link on the 
bottom on this slide, it has 

01:34:45.832 --> 01:34:48.274
everything I just talked about. 
It also has more information 

01:34:48.275 --> 01:34:50.711
than you will want as you debug 
the website 

01:34:54.468 --> 01:34:56.468
including instructions to 
completely 

01:34:59.652 --> 01:35:01.652
disable or completely enable the
op 

01:35:03.068 --> 01:35:05.068
policy to

01:35:09.106 --> 01:35:09.963
autoplay policy, if you don't 
have this or don't get a picture

01:35:09.964 --> 01:35:11.964
before I move to 

01:35:13.968 --> 01:35:18.101
the next slide, you can go to 
developers.google.com and search

01:35:13.968 --> 01:35:15.968
for autoplay.
  What we recommend for the user

01:35:15.974 --> 01:35:17.188
experience, what it should look 
like.  The ideal situation from 

01:35:17.189 --> 01:35:19.070
our perspective is that when 
users arrive and if you're not 

01:35:19.071 --> 01:35:22.782
allowed to autoplay with sound, 
mute the media, play it to drive

01:35:22.783 --> 01:35:27.493
user engagement.  When you get a
user gesture, ideally give the 

01:35:27.494 --> 01:35:29.576
user control to unmute the media
and they can turn on the sound.

01:35:32.639 --> 01:35:34.472
Tapping or clicking on that 
control will give you autoplay 

01:35:34.473 --> 01:35:36.473
policy and allow you to start 
playing with sound.

01:35:37.732 --> 01:35:41.001
Another alternative, move to a 
click to play model.   Capture a

01:35:41.002 --> 01:35:43.002
user gesture and then start 
playing sound.

01:35:44.485 --> 01:35:46.310
This is common, we have seen 
this on a number of sites and it

01:35:46.311 --> 01:35:48.357
will work under the current 
policy.  That's it for autoplay.

01:35:48.358 --> 01:35:51.863
  Let's switch to Jennifer that 
will talk about something 

01:35:51.864 --> 01:35:53.864
completely 

01:35:56.601 --> 01:35:57.429
different, multitasking.
  &gt;&gt; JENNIFER APACIBLE: Thank 

01:35:57.430 --> 01:35:58.260
you.
  I'm Jennifer Apacile, and I'm 

01:35:58.261 --> 01:36:02.104
a software engineer on the 
Chrome team.  We have 

01:36:02.105 --> 01:36:03.795
multitasked while consuming 
media, this could be anything 

01:36:03.796 --> 01:36:08.705
from watching a movie while 
responding to emails, to 

01:36:08.706 --> 01:36:12.641
listening to live sports 
commentary while cooking.  Some 

01:36:12.642 --> 01:36:16.832
of you on live stream may tune 
in while doing something else.  

01:36:16.833 --> 01:36:19.292
Now as we started to spend more 
time on our devices multitasking

01:36:19.293 --> 01:36:23.191
has evolved where the screen 
that we're using may be the 

01:36:23.192 --> 01:36:25.414
media screen or at least the one
used to control it.

01:36:27.663 --> 01:36:30.137
Last year, we introduced the 
media session API which allows 

01:36:30.138 --> 01:36:32.138
you to show 

01:36:34.205 --> 01:36:36.110
metadata and images on lock 
screens and wearable devices.  

01:36:36.111 --> 01:36:38.157
This is great for users because 
they know what's playing and 

01:36:38.158 --> 01:36:40.624
will be able to control it.  
Let's take a quick refresher on 

01:36:40.625 --> 01:36:44.878
how to use it.
  First, we'll check to see if 

01:36:44.879 --> 01:36:48.992
the device or browser supports 
media session, and if so we'll 

01:36:48.993 --> 01:36:51.763
use it.  To make things appear, 
we simply need 

01:36:55.574 --> 01:36:57.574
to provide

01:37:03.450 --> 01:37:06.120
the metadata and the title, 
artist and you can set up action

01:37:06.121 --> 01:37:09.611
handlers, backward, forward, 
play, pause, next track, 

01:37:09.612 --> 01:37:12.729
previous track.   We may also 
want to control the play back 

01:37:12.730 --> 01:37:16.642
state.  If you're serving custom
controls you can also reflect 

01:37:16.643 --> 01:37:18.643
the media session state 

01:37:19.889 --> 01:37:23.537
outside of the lock screen or 
notification.   What about the 

01:37:23.538 --> 01:37:25.538
desktop experience?

01:37:27.244 --> 01:37:29.492
Personally I spend the majority 
of the time on the computer 

01:37:29.493 --> 01:37:33.356
consuming media.  At the same 
time I like to keep busy such as

01:37:33.357 --> 01:37:36.044
messaging friends or reading the
news.  I find that whenever I 

01:37:36.045 --> 01:37:39.713
want to watch a video on the 
computer I'll resize the window 

01:37:39.714 --> 01:37:41.949
to be really small and then move
it to the corner of the screen 

01:37:41.950 --> 01:37:46.865
so it doesn't get in the way of 
everything else I want to do.  

01:37:46.866 --> 01:37:48.291
At the same time, I struggle 
with covering that window with 

01:37:48.292 --> 01:37:55.066
one of the many other windows I 
have open.  Sound familiar?  

01:37:55.067 --> 01:37:57.067
Today I'm excited to share that 
we're 

01:37:58.729 --> 01:38:00.729
bringing Picture-in-Picture to 
Chrome.

01:38:01.783 --> 01:38:03.813
The window will appear on top of
other windows allowing you to 

01:38:03.814 --> 01:38:07.268
consume view while continuing to
interact with other content on 

01:38:07.269 --> 01:38:11.479
your device.   You will also be 
able to interact with the window

01:38:11.480 --> 01:38:13.480
such as with the play pause 
controls, resizing, moving the 

01:38:16.152 --> 01:38:18.841
window to your liking.
  You may remember that last 

01:38:18.842 --> 01:38:20.842
year we launched 
Picture-in-Picture on mobile 

01:38:22.322 --> 01:38:24.347
with Android O with the native 
API.  Today we're building a web

01:38:24.348 --> 01:38:28.038
API allowing developers to 
create and control the 

01:38:28.039 --> 01:38:30.737
experience around 
Picture-in-Picture.   This will 

01:38:30.738 --> 01:38:32.744
be available for Chrome, on 
desktop and on  Android.

01:38:36.012 --> 01:38:38.012
Let's take a look at how to use 
this.

01:38:38.324 --> 01:38:41.138
First we'll need two things:  
We'll need the window, video and

01:38:41.139 --> 01:38:44.419
a way for the user to interact 
with it.  Today we'll use a 

01:38:44.420 --> 01:38:46.420
button.

01:38:49.120 --> 01:38:50.545
To start us off, let's enter 
Picture-in-Picture.  We'll start

01:38:50.546 --> 01:38:52.546
by adding an event listener to 
the button.

01:38:55.237 --> 01:38:56.863
When the button is clicked a 
video will request to enter the 

01:38:56.864 --> 01:38:58.864
Picture-in-Picture mode.  Why 
stop there?

01:39:03.386 --> 01:39:06.261
Let's make it fun entering and 
exiting Picture-in-Picture.  

01:39:06.262 --> 01:39:08.090
First we'll check if the 
document's Picture-in-Picture 

01:39:08.091 --> 01:39:10.615
element is the video, if it 
isn't, we'll send a request to 

01:39:11.825 --> 01:39:15.098
enter in the Picture-in-Picture 
mode.   Otherwise, we'll leave. 

01:39:15.099 --> 01:39:17.099
Which means that the video will 
abeer 

01:39:18.550 --> 01:39:20.550
peer back in the original tab --
appear.

01:39:21.394 --> 01:39:23.018
The request Picture-in-Picture 
function returns a promise and 

01:39:23.019 --> 01:39:26.893
if the video fails to enter 
Picture-in-Picture mode for any 

01:39:26.894 --> 01:39:30.754
reason we should let the user 
know.  The feedback of the user 

01:39:30.755 --> 01:39:32.755
is a great 

01:39:34.242 --> 01:39:36.242
way of letting them know what's 
going on.

01:39:37.924 --> 01:39:39.771
We can listen for two events, 
enter Picture-in-Picture and 

01:39:39.772 --> 01:39:42.476
leave Picture-in-Picture.  By 
setting event handlers he can de

01:39:44.298 --> 01:39:46.557
pine the experience for the 
users showing other content on 

01:39:46.558 --> 01:39:48.558
the page more 

01:39:49.960 --> 01:39:51.960
prominently, anything from 
showing a 

01:39:53.083 --> 01:39:55.716
catalog of videos that you can 
later watch or servicing live 

01:39:55.717 --> 01:39:59.171
stream chat.  Finally, in cases 
where Picture-in-Picture is not 

01:39:59.172 --> 01:40:01.172
supported we can hide the button
so that the user 

01:40:04.476 --> 01:40:05.914
doesn't try to interact with it.
  While Picture-in-Picture is 

01:40:05.915 --> 01:40:07.915
still 

01:40:10.112 --> 01:40:11.575
under development, you can check
it out Todd on Chrome Canary 

01:40:11.576 --> 01:40:16.284
with the flags enabled, the 
first will be the web API and 

01:40:16.285 --> 01:40:19.347
the next two will be used to 
enable the future.  You can find

01:40:19.348 --> 01:40:21.348
out more about the API 

01:40:24.223 --> 01:40:26.128
and implementation status at 
these links.

01:40:26.129 --> 01:40:27.919
Let's say we have multiple 
screens.  Imagine if you were 

01:40:27.920 --> 01:40:32.623
presenting in a meeting and you 
wanted speaker notes or you 

01:40:32.624 --> 01:40:34.440
wanted to share photos and 
videos to a large group of 

01:40:34.441 --> 01:40:36.511
people but you only had a small 
laptop.

01:40:39.562 --> 01:40:42.404
Presentation API makes displays 
such as monitors and TVs 

01:40:42.405 --> 01:40:44.490
available to the  web.  
Previously this is only 

01:40:44.491 --> 01:40:49.233
available for remote devices 
such as Chromecast, but today we

01:40:49.234 --> 01:40:53.962
now also account for wire 
displays such as HDMI monitors. 

01:40:53.963 --> 01:40:55.963
With presentation API we can 
build 

01:40:57.385 --> 01:40:59.385
experiences for it's user

01:41:00.550 --> 01:41:01.619
users to see and control local 
content and present other things

01:41:01.620 --> 01:41:06.314
on the screen.  We won't be just
mirroring what's on the screen 

01:41:06.315 --> 01:41:08.561
to the other monitor.
  Let me walk you through how to

01:41:08.562 --> 01:41:12.958
use the presentation API to 
present a webpage on a secondary

01:41:12.959 --> 01:41:16.893
screen.  There are two 
components needed to get this to

01:41:16.894 --> 01:41:19.944
work, the controller and the 
reserver.  The controller is the

01:41:19.945 --> 01:41:24.442
page that we'll use to interact 
with on the local -- on the 

01:41:24.443 --> 01:41:28.509
primary screen.  The receiver 
consents will be displayed on 

01:41:28.510 --> 01:41:30.510
the other screen.

01:41:34.283 --> 01:41:35.463
Today we'll call these 
components receiver and 

01:41:35.464 --> 01:41:38.332
controller.  Let's put together 
a controller page.

01:41:40.650 --> 01:41:43.069
Let's create a presentation 
object that will contain the URL

01:41:43.070 --> 01:41:45.070
we want to show on the secondary
screen.

01:41:47.966 --> 01:41:51.908
This could also be a absolute 
URL or pass in a list of them.  

01:41:51.909 --> 01:41:55.209
Today we'll use the receiver.
HTML.  With our presentation  

01:41:55.210 --> 01:41:57.210
requests, we can get the 
availability of the displays 

01:42:00.749 --> 01:42:02.749
or the second screens and handle
them however we want.

01:42:03.990 --> 01:42:05.616
We should continue to handle 
display availability changes by 

01:42:05.617 --> 01:42:09.498
adding event listener to the 
change events.  This may happen 

01:42:09.499 --> 01:42:14.204
when monitors are disconnected 
or we move to a network without 

01:42:14.205 --> 01:42:16.205
devices.

01:42:17.293 --> 01:42:19.323
To show the presentation display
prompts we require a user 

01:42:19.324 --> 01:42:23.622
gesture, a click on a button, 
with that in mind, let's start 

01:42:23.623 --> 01:42:27.124
our presentation request when a 
user alcoholics on the button.  

01:42:27.125 --> 01:42:29.213
We'll wait for the promise to 
resolve when the user selects a 

01:42:29.214 --> 01:42:33.521
display.  This promise will 
return a presentation connection

01:42:33.522 --> 01:42:35.522
and when that 

01:42:37.011 --> 01:42:39.078
happens the page we put in 
earlier, the receiver HTML will 

01:42:39.079 --> 01:42:42.774
be presented to the other 
display.  Once we have this 

01:42:42.775 --> 01:42:46.461
active connection we can do two 
things.  We can close it or 

01:42:46.462 --> 01:42:48.694
terminate it.  Closing the 
connection allows us to 

01:42:50.111 --> 01:42:52.111
reconnect later and terminating 
the 

01:42:53.366 --> 01:42:55.231
connection means it is gone for 
good.  How do you reconnect to 

01:42:55.232 --> 01:42:58.271
the presentation?  We do it by 
calling reconnect and 

01:43:01.557 --> 01:43:02.602
passing in the presentation ID 
of the previous connection 

01:43:02.603 --> 01:43:05.290
object.  There are two options 
of how we want to handle this.

01:43:05.291 --> 01:43:07.538
  We can either automatically 
reconnect 

01:43:10.784 --> 01:43:13.042
when the controller navigates or
we can reconnect when the user  

01:43:13.043 --> 01:43:15.043
clicks on a button.

01:43:18.799 --> 01:43:20.429
We can also register event 
handler for the presentation 

01:43:20.430 --> 01:43:22.430
connection events.

01:43:24.726 --> 01:43:26.726
Connect, message,  close, 
terminate.

01:43:27.385 --> 01:43:29.385
With that in mind, we now have 
the 

01:43:30.858 --> 01:43:32.858
components ready for our 
controller to work

01:43:33.324 --> 01:43:35.790
Next we want to have the 
controller and the receiver 

01:43:35.791 --> 01:43:38.711
interact with each other.  On 
the reserver side, let's first 

01:43:40.529 --> 01:43:42.180
retrieve all existing 
connections and listen to any 

01:43:42.181 --> 01:43:44.725
incoming ones.  We'll keep track
of these as they come in.

01:43:48.069 --> 01:43:50.943
Every time we add a connection, 
we'll add event listeners such 

01:43:50.944 --> 01:43:55.225
as message and close events.  So
what does this look like put 

01:43:55.429 --> 01:44:00.380
together?  Our team published 
this web app called photowall 

01:44:00.381 --> 01:44:02.470
showcasing the presentation of 
API.  We used the controller to 

01:44:02.471 --> 01:44:07.728
select photos that we want to 
add to the slide show and the 

01:44:07.729 --> 01:44:09.965
receiver to present it.
  To get us start on the 

01:44:09.966 --> 01:44:12.014
controller, we'll use the 
presentation requests and 

01:44:15.093 --> 01:44:17.536
retrieve the list of receivers. 
Those are selected when you have

01:44:17.537 --> 01:44:20.678
the presentation connection and 
when connected the controller 

01:44:20.679 --> 01:44:22.679
will prompt us 

01:44:25.489 --> 01:44:27.489
to add images to the slide show.

01:44:29.484 --> 01:44:31.487
What's more interesting than 
searching for photos of dogs, 

01:44:31.488 --> 01:44:33.602
here picking a photo will add it
to the queue of images to share 

01:44:33.603 --> 01:44:35.603
on the slide show.  How do we 
get that information to the 

01:44:35.610 --> 01:44:37.610
receiver?

01:44:39.334 --> 01:44:41.334
We'll send a message between the

01:44:42.556 --> 01:44:44.556
controller and receiver and vice
versa.

01:44:47.480 --> 01:44:49.916
It could be a string, a buffer 
or a ray buffer view.  In our 

01:44:49.917 --> 01:44:51.980
example, the controller will 
send the description or the name

01:44:51.981 --> 01:44:57.703
of the dog as well as the image 
source to the receiver.   Upon 

01:44:57.704 --> 01:44:59.999
receiving this message, the 
receiver will then handle it by 

01:45:00.000 --> 01:45:02.068
updating the slide show to 
include the image.

01:45:05.374 --> 01:45:08.430
What happens when we send these 
to the receiver?  We'll get 

01:45:08.431 --> 01:45:10.589
something like this.
  That's all we really need to  

01:45:10.590 --> 01:45:15.093
get started with presentation 
API.  The APIs are already 

01:45:15.094 --> 01:45:17.094
available on 

01:45:18.139 --> 01:45:20.139
Chrome, check it out.

01:45:22.059 --> 01:45:23.498
Media session, presentation API 
and Picture-in-Picture, we 

01:45:23.499 --> 01:45:28.803
believe these are great editions
to the web media story.   You 

01:45:28.804 --> 01:45:30.898
can check out all of the APIs at
these links and we always love 

01:45:30.899 --> 01:45:32.899
feedback.  Let us know what you 
think.

01:45:33.575 --> 01:45:35.575
I'll hand it back to John.

01:45:39.901 --> 01:45:42.360
  &gt;&gt; JOHN PALLETT: I was saying 
I didn't know you were putting 

01:45:42.361 --> 01:45:45.431
my face up there.  Thank you for
that.  Anyway.

01:45:47.514 --> 01:45:48.893
The presentation API, that's 
actually a really interesting 

01:45:48.894 --> 01:45:53.621
Example of how Chrome can work 
across multiple displays.  If 

01:45:53.622 --> 01:45:55.285
you have multiple displays, 
Chrome can use presentation API 

01:45:55.286 --> 01:45:59.388
and another capability in Chrome
for doing things with other 

01:45:59.389 --> 01:46:01.219
displays, and that's casting 
Chrome.   Casting Chrome will 

01:46:01.220 --> 01:46:03.220
let you play 

01:46:04.301 --> 01:46:06.961
media or mirror the tab or 
desktop to cast devices such as 

01:46:06.962 --> 01:46:11.008
Chromecast or a TV.  Let's talk 
about mirroring for a second.  

01:46:11.009 --> 01:46:12.891
The thing about mirroring, if 
you're mirroring a tab, what 

01:46:12.892 --> 01:46:16.986
you're doing, you're rendering a
tab and then you're capturing it

01:46:16.987 --> 01:46:21.289
and then encoding it and sending
it over to the remote device.  

01:46:21.290 --> 01:46:22.940
If you're playing media, that's 
an awful lot of work just to 

01:46:22.941 --> 01:46:27.679
capture the media, grab it, 
encode it again, send it over to

01:46:27.680 --> 01:46:30.127
the device which will then 
decode it.  There's been an 

01:46:30.128 --> 01:46:32.983
important change here that 
landed in Chrome during tab 

01:46:35.244 --> 01:46:37.244
mirroring, if the user goes full

01:46:40.699 --> 01:46:42.699
screen with the video, that 
eliminates most of the steps I 

01:46:45.266 --> 01:46:48.313
mentioned, no need to decode, 
capture, end code.  Chrome is in

01:46:48.314 --> 01:46:50.314
the middle, sending the frames 
directly to the device without 

01:46:50.753 --> 01:46:53.626
modifying them in any way.  From
a user perspective they have 

01:46:53.627 --> 01:46:56.504
play become control in Chrome 
like before but rather than the 

01:46:56.505 --> 01:47:00.819
video  playing on the local 
display they'll see this.  .

01:47:02.506 --> 01:47:04.507
This is good in some cases but 
there are some cases where you 

01:47:04.508 --> 01:47:06.832
don't want the Chrome to remote 
a full screen video.

01:47:09.973 --> 01:47:11.973
For example, if you're doing 
360º 

01:47:13.044 --> 01:47:15.044
spherical video you're taking a 
canvas, 

01:47:16.115 --> 01:47:17.531
rendering with web GL on top of 
it a piece of geometry with the 

01:47:17.532 --> 01:47:21.200
video mapped on to it.  That's 
good.  Behind that,   you may 

01:47:21.201 --> 01:47:25.131
have a full screen video element
including the entire video 

01:47:25.132 --> 01:47:27.132
that's effectively a texture 
map.

01:47:28.188 --> 01:47:29.208
You probably don't want that 
video to be sent to the 

01:47:29.209 --> 01:47:34.123
television.  If you see this on 
the site, it is very easy to 

01:47:34.124 --> 01:47:36.767
prevent it, it is an a I tribute
to add to any element, disable 

01:47:38.686 --> 01:47:40.686
remote play back and Chrome will
respect that.

01:47:42.402 --> 01:47:44.822
If you don't want media remote 
to work on a video element add 

01:47:44.823 --> 01:47:48.066
this attribute.  Why are we 
doing this?  It is because it is

01:47:48.067 --> 01:47:51.210
a significant optimization and 
it happens automatically.  If 

01:47:51.211 --> 01:47:53.211
you look at the middle metric, 
you 

01:47:54.277 --> 01:47:56.277
see the CPU goes down 
dramatically 

01:47:59.003 --> 01:48:00.047
because we're skipping a decode 
and a decompression step, if you

01:48:00.048 --> 01:48:02.048
look at this, the play back 
smoothness increases 

01:48:03.775 --> 01:48:06.018
significantly and freezing is 
better as well.  Then the bottom

01:48:06.019 --> 01:48:08.019
two metrics show the video 
quality itself is better because

01:48:10.117 --> 01:48:12.568
we're not decoding and 
reencoding the video.  The less 

01:48:12.569 --> 01:48:15.019
the chrome touches the video the
better.  It let's you send the 

01:48:15.020 --> 01:48:17.020
original 

01:48:18.227 --> 01:48:20.341
compressed video directly to the
device.

01:48:22.376 --> 01:48:24.029
That video is only good if the 
settings are good and the 

01:48:24.030 --> 01:48:26.030
algorithm you're using for 
compression is good 

01:48:30.747 --> 01:48:32.747
which is a good segue to Zoe Llu
who 

01:48:37.278 --> 01:48:39.278
will talk about the updates on 
AV1.

01:48:41.148 --> 01:48:43.148
&gt;&gt; ZOE LLU: Today I'll talk 
about AV1.

01:48:44.652 --> 01:48:46.652
Video has been one of the 
significant 

01:48:48.581 --> 01:48:50.581
experiences over the web.

01:48:53.112 --> 01:48:57.196
That's been used with intensive 
bandwidth by users.  Compression

01:48:57.197 --> 01:48:59.197
is the technology behind 

01:49:00.258 --> 01:49:02.547
the scenes that powers this 
growth.  .

01:49:06.436 --> 01:49:09.107
Why video code matters, this is 
an example.  This is a minute of

01:49:09.108 --> 01:49:11.108
high-definition 

01:49:12.812 --> 01:49:14.812
video with a size of 300 
megabytes and 

01:49:16.372 --> 01:49:18.372
this is what we observed.  There
is a compressed version as 

01:49:20.476 --> 01:49:22.476
opposed to the unexpressed 
version which 

01:49:26.227 --> 01:49:28.459
is as large as 25 gigabytes, 
almost 100 times large.

01:49:33.846 --> 01:49:35.846
For video, it can be 10 times 
larger 

01:49:38.014 --> 01:49:40.327
and therefore compression as a 
technology, without compression,

01:49:40.328 --> 01:49:42.328
there 

01:49:43.391 --> 01:49:45.852
is almost no possible for any 
video service over the Internet 

01:49:45.853 --> 01:49:51.185
and our users notice the result.
.

01:49:54.634 --> 01:49:56.634
Back in

01:49:58.526 --> 01:50:00.526
2013 there was a rollout as 
opposed to 

01:50:04.438 --> 01:50:06.438
at the time, the code, the VP9 
achieved 

01:50:07.905 --> 01:50:09.905
the 30% performance.

01:50:12.198 --> 01:50:14.198
So here is a global map of the 
watch 

01:50:16.757 --> 01:50:18.757
time of VP9 compared to that of 
H.264.

01:50:21.685 --> 01:50:23.685
As you see from the slide, the 
darker 

01:50:25.550 --> 01:50:28.204
the color is, the longer 
watching time by VP9 opposed to 

01:50:28.205 --> 01:50:30.205
H.264.

01:50:32.477 --> 01:50:35.333
The reason for watching longer 
with 9, it is three folds, first

01:50:35.334 --> 01:50:37.334
it is the 

01:50:39.858 --> 01:50:41.858
fast loading time, secondly, the
less 

01:50:43.971 --> 01:50:45.971
buffering, and thirdly, the 
higher 

01:50:47.641 --> 01:50:49.641
quality delivery.

01:50:55.961 --> 01:50:57.962
The size of VP9 has helped our 
users with longer usage.

01:51:02.021 --> 01:51:04.021
The success of VP9 hat not gone 
unnoticed.

01:51:06.107 --> 01:51:08.107
The most recent video has been 

01:51:10.610 --> 01:51:12.610
developed by the Alliance for 
Open Media, short as AOM.

01:51:17.997 --> 01:51:20.322
It is a fourth generation code, 
AV1.  AOM as you can see from 

01:51:20.323 --> 01:51:22.323
the slide 

01:51:24.430 --> 01:51:26.430
included the top media and 
technology 

01:51:28.100 --> 01:51:30.100
companies from almost every 
aspect of the industry.

01:51:32.606 --> 01:51:35.063
Here you can see we have the web
platforms, the common providers,

01:51:37.709 --> 01:51:39.709
hardware makers.

01:51:42.240 --> 01:51:44.240
There are three goals to develop
AV1.

01:51:45.693 --> 01:51:48.161
First we wanted to develop a 
code for the web even though 

01:51:48.162 --> 01:51:53.289
that's been increasingly 
overlapped with the TV, security

01:51:53.290 --> 01:51:55.290
media, and all of the add 
industries.

01:51:59.838 --> 01:52:01.838
The same kind of target for AV1 
is to 

01:52:02.863 --> 01:52:04.863
have

01:52:08.467 --> 01:52:10.467
open -- it is a significant 
change for the industry.

01:52:13.974 --> 01:52:15.974
The last goal of AOM is to have 
a real 

01:52:17.088 --> 01:52:19.938
deployment, so it is a target to
be   supported widely across all

01:52:19.939 --> 01:52:21.939
platforms 

01:52:24.872 --> 01:52:26.872
and to be developed as a much 
faster pace.

01:52:28.383 --> 01:52:30.383
Here is a landscape of pretty it

01:52:32.888 --> 01:52:34.888
complicated -- this is a major 
area that 

01:52:35.953 --> 01:52:37.953
we had felt with the environment
of AV1 

01:52:39.649 --> 01:52:42.293
and we have developed over 100 
compression technologies for 

01:52:42.294 --> 01:52:47.394
AV1.  Today I'm mainly going to 
talk about two of them.  We're 

01:52:47.395 --> 01:52:50.255
going to have a little bit 
deeper dive of the following two

01:52:50.458 --> 01:52:52.458
technologies.

01:52:57.243 --> 01:53:00.113
The first one is a wedge base 
interprediction.  Here is a clip

01:53:00.114 --> 01:53:02.114
-- here is a frame from 

01:53:05.200 --> 01:53:07.200
a video clip and this is the 
next one.

01:53:10.539 --> 01:53:12.383
For this two set of frames, you 
can see a lot of similarity 

01:53:12.384 --> 01:53:15.243
between them.  The major task of
a video coder is to 

01:53:19.722 --> 01:53:21.956
remove the similarity between 
them.  Most commonly, one of the

01:53:21.957 --> 01:53:23.957
most 

01:53:27.625 --> 01:53:29.625
commonly used tools, it is 
called Block hopping.

01:53:31.830 --> 01:53:33.884
You can look at the previous for
the curve one to look at the 

01:53:33.885 --> 01:53:36.778
compression.  However, you look 
closely, the shape 

01:53:39.862 --> 01:53:42.103
of the block, which is square, 
it is not aligned well with the 

01:53:42.104 --> 01:53:44.104
object of the boundary.

01:53:46.374 --> 01:53:48.374
If you look closely, somehow if 
we can 

01:53:50.329 --> 01:53:51.988
introduce a wedge-based shape 
which can be a lot better 

01:53:51.989 --> 01:53:53.989
aligned with the 

01:53:55.262 --> 01:53:58.139
boundary of the object as seen 
in the  frame, there could be a 

01:53:58.140 --> 01:54:00.140
lot of potential 

01:54:02.653 --> 01:54:04.653
that we can have a fuller 
compression.

01:54:04.915 --> 01:54:06.915
Therefore, here is the 
compression 

01:54:09.852 --> 01:54:11.531
update that we refer to as 
wedge-based interprediction.  

01:54:11.532 --> 01:54:13.532
This is the first time that's 
been 

01:54:15.356 --> 01:54:17.994
introduced by the video code and
for the first time it was 

01:54:17.995 --> 01:54:19.995
introduced both with 

01:54:22.150 --> 01:54:24.150
the square-based and rectangular
based 

01:54:28.074 --> 01:54:29.705
wedge interwedge for the 
interprediction.   Because it is

01:54:29.706 --> 01:54:31.706
better alignment with 

01:54:33.039 --> 01:54:35.039
the boundary of the object as we
just 

01:54:37.579 --> 01:54:39.579
showed, there is significance 
that's been obtained.

01:54:40.868 --> 01:54:45.011
The next two we'll talk about, 
it is about the warped motion.  

01:54:45.012 --> 01:54:47.012
Let's look at a nice example.  
Here is the frame.

01:54:49.838 --> 01:54:51.838
Again, from a video clip and 
there's 

01:54:52.941 --> 01:54:54.941
a notation for the next frame.

01:54:56.858 --> 01:54:58.858
How do we describe this 
location, and 

01:55:01.547 --> 01:55:03.547
then to obtain a compression so 
that the 

01:55:05.478 --> 01:55:07.478
general use of the tool is to 
describe 

01:55:08.764 --> 01:55:10.764
the motion info of all of the o 
blogs 

01:55:15.024 --> 01:55:19.379
that carry this notated project.
If you look closely, there is 

01:55:19.380 --> 01:55:21.380
another way.

01:55:25.124 --> 01:55:27.124
If somehow we can only signal 
those 

01:55:28.576 --> 01:55:30.576
emotion info for the logs 
located in the 

01:55:32.052 --> 01:55:34.052
top left boundary of this 
located object.

01:55:36.354 --> 01:55:38.354
Well, if there's a way we can 
have the 

01:55:39.609 --> 01:55:42.090
motion info for the remaining 
blocks of this object from the 

01:55:42.091 --> 01:55:44.125
surrounding Blocks within a 
window, there could be a lot of 

01:55:50.077 --> 01:55:52.077
potential for us to have a 
better compression.

01:55:53.131 --> 01:55:54.564
Here is another tool to 
introduce -- you have the local 

01:55:54.565 --> 01:55:56.565
warped motion.

01:55:59.535 --> 01:56:01.535
AV1 has used a mathematical 
model here 

01:56:04.436 --> 01:56:06.436
as the example of an affine 
model and 

01:56:09.153 --> 01:56:11.153
then to see the type of block 
from the 

01:56:12.205 --> 01:56:14.205
motion info from the surrounding
Block where you have the window.

01:56:21.222 --> 01:56:23.222
In this way, a more effective 
decision 

01:56:25.371 --> 01:56:27.371
to compress technology so that a
better 

01:56:28.674 --> 01:56:30.802
code again could be achieved.
  To summarize all the 

01:56:30.803 --> 01:56:32.803
technologies we 

01:56:35.700 --> 01:56:37.700
have introduced in AV1, here is 
the 

01:56:39.298 --> 01:56:41.298
result to compare

01:56:42.533 --> 01:56:44.533
AV1 with

01:56:46.844 --> 01:56:48.844
1, there is 30% improvement for 
AV1 for 

01:56:50.217 --> 01:56:52.740
two scenarios, the video on 
demand and the live streaming.

01:56:56.466 --> 01:56:58.466
Here is another presentation of 
this 

01:57:02.223 --> 01:57:04.223
result for comparing AV1 as 
opposed to 

01:57:07.325 --> 01:57:09.370
VP9 obtained by Google.  
Independent comparisons have 

01:57:09.371 --> 01:57:11.371
been conducted by Facebook 
mainly on top of 

01:57:14.493 --> 01:57:16.493
their user generated content up 
lo he 

01:57:19.070 --> 01:57:21.312
haded to their Facebook website.
Again, it has to be obtained and

01:57:23.781 --> 01:57:25.781
achieved can be observed from 
the slide.

01:57:27.236 --> 01:57:29.982
Furthermore, you can observe 
that with the requirement of 

01:57:29.983 --> 01:57:31.983
resolution, a 

01:57:33.251 --> 01:57:35.251
larger advantage of AV1 can be 
observed 

01:57:37.737 --> 01:57:40.403
as opposed to 9 and another 
State of code that's used for.

01:57:43.861 --> 01:57:45.861
It can be expected that AV1 can 
have a 

01:57:47.882 --> 01:57:49.882
larger gain for larger 
resolution.

01:57:51.163 --> 01:57:53.163
The last evaluation that we're 

01:57:58.310 --> 01:58:00.310
demonstrating down here, it is 
conducted

01:58:03.490 --> 01:58:05.984
by MSU who rolled out a 
comparison result report for 

01:58:05.985 --> 01:58:07.985
almost all the top 

01:58:09.913 --> 01:58:11.913
video code collected.

01:58:13.180 --> 01:58:15.687
They yearly conducted an 
extensive comparison, especially

01:58:15.688 --> 01:58:17.688
concerning 

01:58:19.765 --> 01:58:21.765
different categories such as the
encoder 

01:58:25.264 --> 01:58:27.264
speed, the quality metrics, as 
well as 

01:58:28.515 --> 01:58:30.515
the strategies and also within 
the 

01:58:31.526 --> 01:58:33.526
performance of the code.

01:58:37.772 --> 01:58:39.772
This year, they include a 
comparison 

01:58:41.260 --> 01:58:43.086
with AV1 # that can be seen 
closely, they report a 

01:58:43.087 --> 01:58:45.087
consistent result for the 

01:58:48.791 --> 01:58:50.791
advantage of AV

02:17:41.970 --> 02:17:43.970
What's New in Wear OS by Google

02:18:46.513 --> 02:18:48.513
What's New in Wear OS by Google

02:25:20.164 --> 02:25:23.056
&gt;&gt; Welcome to the What's New in 
Wear OS by Google.  I'm Dennis 

02:25:23.057 --> 02:25:25.057
Troper and I'm the product 

02:25:26.114 --> 02:25:28.754
director for Wear OS and I'm 
really, really excited to be 

02:25:28.755 --> 02:25:30.755
here today.

02:25:31.850 --> 02:25:34.121
Let me start with a little bit 
of history.  By the way, I need 

02:25:34.122 --> 02:25:36.122
the  clicker.

02:25:37.589 --> 02:25:39.612
You know, when we first started 
Wear OS four years ago, we went 

02:25:39.613 --> 02:25:43.324
out to see what people were 
wearing.  What we found was a 

02:25:43.325 --> 02:25:45.325
tremendous amount of diversity 
out there.

02:25:48.222 --> 02:25:50.464
People really care about what 
they wear, it evokes their 

02:25:50.465 --> 02:25:54.164
passion, their style, their 
personality.  The same goes with

02:25:54.165 --> 02:25:57.439
what you wear on your wrist.  It
is a really, really personal 

02:25:57.440 --> 02:25:59.440
choice.

02:26:01.614 --> 02:26:03.614
From the start, we made a 
decision to 

02:26:05.922 --> 02:26:08.596
bring lots of choice diversity 
into the wearable space.  Today 

02:26:08.597 --> 02:26:13.307
we couldn't be more pleased how 
this strategy has played out.  

02:26:13.308 --> 02:26:15.308
We have over 50 watches that are

02:26:16.385 --> 02:26:18.385
powered by Wear OS today out in 
the 

02:26:21.651 --> 02:26:23.651
market from top brands

02:26:25.597 --> 02:26:27.686
and many others.  Let me show 
you some of the recent 

02:26:31.465 --> 02:26:33.465
launches of watches we have 
introduced 

02:26:34.513 --> 02:26:37.162
in the market with our partners.
  Back in the fall, for the 

02:26:37.163 --> 02:26:39.163
holiday 

02:26:40.565 --> 02:26:42.565
season of

02:26:45.591 --> 02:26:47.863
2017Misfit launched their Misfit
Vapor smartwatch.  The team did 

02:26:47.864 --> 02:26:49.864
a great job with this watch.

02:26:51.929 --> 02:26:54.565
It has a very sleek, stylish 
design.  It fits great on your 

02:26:54.566 --> 02:26:56.566
wrist and makes for a great 
fitness watch.

02:27:03.129 --> 02:27:03.733
This past January, Kate Spade 
launches the Kate Spade New 

02:27:03.734 --> 02:27:05.734
York.

02:27:07.390 --> 02:27:10.066
It is a beautiful watch and 
users love the choose your look 

02:27:10.067 --> 02:27:12.067
app that matches 

02:27:13.542 --> 02:27:15.542
your outfit with your watch 
face.

02:27:20.905 --> 02:27:22.905
This past March Hublot 
introduced a 

02:27:24.264 --> 02:27:26.731
limited edition smartwatch 
called the Big Bang Referee 

02:27:26.732 --> 02:27:29.616
2018.  It is a beautifully 
crafted smartwatch.

02:27:34.149 --> 02:27:36.780
Its body made out of titanium.  
With a theme that celebrates the

02:27:36.781 --> 02:27:38.781
most 

02:27:39.868 --> 02:27:40.868
popular sport in the world, 
soccer.  Really excited about 

02:27:40.869 --> 02:27:42.869
this  watch.

02:27:44.167 --> 02:27:46.199
I'm a big soccer fan myself.  
Get this, referees are going to 

02:27:46.200 --> 02:27:48.200
be 

02:27:50.902 --> 02:27:52.110
wearing the big bang referee at 
international matches to help 

02:27:52.111 --> 02:27:54.111
them 

02:27:55.373 --> 02:27:57.003
connect with the latest goal 
line technology and that's 

02:27:57.004 --> 02:27:59.073
really, really cool.
  We're really excited about all

02:27:59.074 --> 02:28:03.429
these new watches coming to 
market.  We have built a lot of 

02:28:03.430 --> 02:28:05.430
momentum with 

02:28:07.710 --> 02:28:09.710
our  partners to give you a 
sense of that.

02:28:11.391 --> 02:28:13.418
In 2017 we launched 26 new 
watches, that's twice the number

02:28:13.419 --> 02:28:15.419
of watches we launched the 
previous year.

02:28:18.312 --> 02:28:20.312
An interesting stat, we're now 
seeing 

02:28:24.674 --> 02:28:26.674
a lot of iOS users users in the 
Wear OS platform.

02:28:31.209 --> 02:28:33.209
We grew 148% year-over-year in 
iOS 

02:28:35.523 --> 02:28:36.957
users and today one out of three
new Wear OS users activate their

02:28:36.958 --> 02:28:39.666
watches with an iPhone.

02:28:42.919 --> 02:28:44.919
This is why last month we 
decided to 

02:28:48.900 --> 02:28:51.144
change our name from Android 
Wear to Wear OS by Google.

02:28:55.266 --> 02:28:57.266
We want a brand name that really

02:28:59.009 --> 02:29:01.877
reflects the great diversity of 
users we have in our platform as

02:29:01.878 --> 02:29:04.735
well as the wide range of 
choices of watches that are out 

02:29:04.736 --> 02:29:08.456
there.  We're really happy with 
the new name, our partners are 

02:29:08.457 --> 02:29:10.457
really happy with it 

02:29:13.797 --> 02:29:15.458
and users are loving it as well.
You know, we have learned a 

02:29:15.459 --> 02:29:17.459
thing or 

02:29:19.145 --> 02:29:23.837
two over the last few years 
working in the wearable space.  

02:29:23.838 --> 02:29:25.251
I want to share a key insight 
with you, it is a simple one, 

02:29:25.252 --> 02:29:29.543
perhaps an obvious one.  The way
people use watches today is 

02:29:32.623 --> 02:29:34.871
very, very different from how 
they use phones.  They're very 

02:29:34.872 --> 02:29:39.237
different in how people interact
with them, how long they use it,

02:29:39.238 --> 02:29:43.945
how often they use it and what 
they use it for.  With a phone, 

02:29:43.946 --> 02:29:45.946
first of all, you carry 

02:29:49.668 --> 02:29:51.668
it with you all the time

02:29:53.219 --> 02:29:55.219
.  You have two hands to 
interact with 

02:29:58.315 --> 02:30:00.780
it, it has a large spring, and 
you can spend a long time with 

02:30:00.781 --> 02:30:02.781
it playing games, 

02:30:03.886 --> 02:30:06.985
doing social media, responding 
to an email.  With watches, it 

02:30:06.986 --> 02:30:08.986
is a very different story.

02:30:10.439 --> 02:30:12.363
With watches, you use it, you 
carry with you on your wrist all

02:30:12.364 --> 02:30:17.546
day long but you use it very  
sporadically.  When you use it, 

02:30:17.547 --> 02:30:19.547
it is just for very 

02:30:21.214 --> 02:30:23.665
short moments to get some 
information, and then the faster

02:30:23.666 --> 02:30:27.761
you can be back doing what 
you're doing in the real world, 

02:30:27.762 --> 02:30:29.997
the better.
  We have taken these learnings 

02:30:29.998 --> 02:30:31.998
to heart 

02:30:33.056 --> 02:30:36.752
in how we think about our 
platform going forward.  We're 

02:30:36.753 --> 02:30:38.593
now focusing on three very 
important areas to improve the 

02:30:38.594 --> 02:30:41.839
user experience.   Let me walk 
you through them.

02:30:44.325 --> 02:30:46.780
First, connection at a glance.  
Second, health and fitness.

02:30:53.363 --> 02:30:55.363
Thirdly, it is convenient help 
from the Google Assistant.

02:30:56.813 --> 02:30:58.036
Let's start with connection at a
glance.  You know, in this day 

02:30:58.037 --> 02:31:00.037
and age people 

02:31:01.740 --> 02:31:05.695
are expected to be connected all
the time.  As I said before, we 

02:31:05.696 --> 02:31:10.584
carry our cellphones most of the
day, but there are some cases in

02:31:10.585 --> 02:31:15.090
which pulling out your cellphone
is inconvenient or sometimes we 

02:31:15.091 --> 02:31:17.175
just don't have it with us.  For
example, when you go out on a 

02:31:17.176 --> 02:31:19.176
run, 

02:31:21.913 --> 02:31:23.913
on a bike ride, or if you go to 
a fancy 

02:31:25.188 --> 02:31:27.467
dinner dressed in an outfit with
no pockets.  In any of these 

02:31:27.468 --> 02:31:29.468
occasions, you still 

02:31:30.500 --> 02:31:32.809
want to be connected to the 
people and the information you 

02:31:32.810 --> 02:31:34.810
really care about.

02:31:36.710 --> 02:31:38.961
You know, I myself, I'm the 
father of five  kids.  I also 

02:31:38.962 --> 02:31:40.962
like mountain biking.  I can 
tell you from experience, having

02:31:43.509 --> 02:31:45.133
to put my cellphone in my 
backpack where I carry water is 

02:31:45.134 --> 02:31:49.685
just really inconvenient.  
Watches, smartwatches fill this 

02:31:49.686 --> 02:31:55.325
gap really neatly.  They're very
easy toic a ses, there is a lot 

02:31:55.326 --> 02:31:57.326
of computing power in here and 

02:31:58.586 --> 02:32:01.237
this is one of the key reasons 
why users love wearing Wear OS 

02:32:01.238 --> 02:32:05.124
watches, it is to help them have
the peace of mind that they can 

02:32:05.125 --> 02:32:07.203
be free from their phone, Burr 
still be connected to the 

02:32:07.204 --> 02:32:09.204
information or 

02:32:11.151 --> 02:32:12.781
the people that they really care
about.

02:32:12.782 --> 02:32:14.819
This is an area that's really 
important, connection at a 

02:32:14.820 --> 02:32:16.820
glance.

02:32:18.091 --> 02:32:20.158
We're doubling down on it to 
increase the user experience and

02:32:20.159 --> 02:32:22.601
to bring more to our users.

02:32:26.694 --> 02:32:29.384
To give you a few examples of 
things we introduced recently 

02:32:29.385 --> 02:32:32.020
with notifications and 
connections, I'll show you real 

02:32:32.021 --> 02:32:34.021
quick  here.

02:32:35.699 --> 02:32:37.699
Recently we introduced adaptive 
text 

02:32:39.596 --> 02:32:41.857
sizing which essentially allows 
the glancablety of notifications

02:32:41.858 --> 02:32:43.858
to be much, much better.

02:32:45.320 --> 02:32:46.975
When you receive a short text, 
the size of the text gets bigger

02:32:46.976 --> 02:32:48.976
so it is easier for you to read 
it.

02:32:52.315 --> 02:32:54.315
We also introduced recently 
darker 

02:32:55.383 --> 02:32:57.009
backgrounds and a new phone type
so we can increase the 

02:32:57.010 --> 02:32:59.010
readability and fit 

02:33:01.103 --> 02:33:03.955
more information on to the 
screen at a glance.  We have 

02:33:03.956 --> 02:33:06.835
also done things to improve our 
complications.

02:33:10.521 --> 02:33:12.521
Complications, it is the 
bite-sized 

02:33:13.617 --> 02:33:16.333
chunks of information that sit 
right on your watch face and 

02:33:16.334 --> 02:33:18.334
they're very handy little tools.

02:33:19.800 --> 02:33:22.871
I myself, I use the Agenda 
complication a lot.  It helps me

02:33:22.872 --> 02:33:24.936
many times during the day to 
tell me where I need to go next 

02:33:24.937 --> 02:33:28.861
for my meetings.
  We have done more, because we 

02:33:28.862 --> 02:33:32.320
think it is an important area 
for people to stay connected.

02:33:36.253 --> 02:33:38.253
Very recently we introduced the 

02:33:39.309 --> 02:33:41.309
notification preview 
complication.

02:33:42.395 --> 02:33:44.395
This is a very handy 
complication that 

02:33:46.067 --> 02:33:46.877
brings the top ranked 
notification right on the watch 

02:33:46.878 --> 02:33:51.239
face.  Things like breaking 
news, a chat message, your next 

02:33:51.240 --> 02:33:53.240
appointment will be 

02:33:54.528 --> 02:33:57.386
right there on your watches with
this complication.  We also 

02:33:57.387 --> 02:34:01.958
introduced another complication 
we called the recently launched 

02:34:01.959 --> 02:34:07.084
app complication.  This is one 
where it is very handy when you 

02:34:07.085 --> 02:34:09.085
have types of information that 

02:34:11.014 --> 02:34:14.274
you like to access frequently 
throughout the day.  For 

02:34:14.275 --> 02:34:17.196
example, the weather, checking 
the scores of a live game.

02:34:21.249 --> 02:34:22.917
This is a few examples of things
we're doing to increase the 

02:34:22.918 --> 02:34:24.918
experience for 

02:34:26.184 --> 02:34:28.026
connections at a glance and as I
said before, we're doubling down

02:34:28.027 --> 02:34:30.027
in this area and you should 
expect a lot more from us 

02:34:34.018 --> 02:34:38.184
in the months to come.
  Next is health.  You know, 

02:34:38.185 --> 02:34:40.185
health and fitness, it is 

02:34:42.270 --> 02:34:43.735
one of the most important 
reasons why people buy a 

02:34:43.736 --> 02:34:49.134
smartwatch today.  People want 
to be healthy.  Of course, and 

02:34:49.135 --> 02:34:53.210
we at Wear OS are very committed
to helping people lead healthier

02:34:53.211 --> 02:34:55.211
lives.  We're doing more with 
it.

02:34:59.685 --> 02:35:01.817
We're helping, working 
tirelessly to give users the 

02:35:04.339 --> 02:35:06.339
ability to track their health 
much 

02:35:07.595 --> 02:35:09.595
better than ever before, and to 
also 

02:35:11.317 --> 02:35:15.217
offer them a superior experience
to track their active fitness.  

02:35:15.218 --> 02:35:17.218
Let me show you a few examples 
of 

02:35:19.486 --> 02:35:22.401
things we have done recently.
  Very recently, we launched a 

02:35:22.402 --> 02:35:24.555
feature touch lock.  It is a 
great feature, for example, if 

02:35:27.202 --> 02:35:29.202
you go on a swim, you go out on 
a run on 

02:35:31.542 --> 02:35:33.542
a rainy day and you're tracking 
your 

02:35:34.674 --> 02:35:36.674
workout with Google Fit or any 
other 

02:35:37.998 --> 02:35:39.998
application like my swim pro,  
strava, 

02:35:42.571 --> 02:35:45.232
run keeper, with touch lock 
enabled, what happens your 

02:35:45.233 --> 02:35:47.508
screen basically gets disabled, 
the touch screen gets disabled 

02:35:52.501 --> 02:35:54.501
to avoid any unintended 
behaviors while 

02:35:55.961 --> 02:35:59.463
your watch is in constant 
contact with water.  To disable 

02:35:59.464 --> 02:36:02.142
touch lock all you have to do, 
click on the button and you're 

02:36:02.143 --> 02:36:05.426
back into normal mode.  Next is 
music.

02:36:08.600 --> 02:36:10.661
You know, music is a huge deal 
for many people when they're 

02:36:10.662 --> 02:36:12.662
working out.

02:36:13.688 --> 02:36:15.688
It helps them stay motivated and
energized.

02:36:18.760 --> 02:36:20.760
We have made accessing the

02:36:22.971 --> 02:36:24.597
media controls easier than ever 
before, you scroll down from the

02:36:24.598 --> 02:36:26.598
screen and get 

02:36:28.706 --> 02:36:30.538
to the immediate media controls 
which will help you power you 

02:36:30.539 --> 02:36:32.539
through the rest 

02:36:33.599 --> 02:36:36.059
of your workout.  We're doing a 
lot more with the heart rate 

02:36:36.060 --> 02:36:40.127
sensor.  We recently introduced 
continuous heart rate monitoring

02:36:40.128 --> 02:36:42.128
so you can check 

02:36:43.210 --> 02:36:45.210
your heart rate many times 
during the 

02:36:46.522 --> 02:36:47.537
day and you can compute your 
resting heart rate from Google 

02:36:47.538 --> 02:36:52.057
fit.  This is just a few samples
of things we're doing in health 

02:36:52.058 --> 02:36:54.058
the and fitness.

02:36:55.744 --> 02:36:57.744
As I said before, we're helping 
people 

02:36:58.871 --> 02:37:00.871
lead healthier lives, that's 
core to our 

02:37:02.941 --> 02:37:04.978
mission, and we're working 
really hard in many aspects of 

02:37:04.979 --> 02:37:06.979
health and fitness 

02:37:10.317 --> 02:37:12.972
and we'll be bringing a lot new 
features in the coming months.  

02:37:12.973 --> 02:37:14.973
Stay tuned.

02:37:17.126 --> 02:37:20.388
The last pillar we're focused 
on, the assistant.   Convenient 

02:37:20.389 --> 02:37:23.054
help from the assistant.  You 
know, today, unlike traditional 

02:37:25.145 --> 02:37:26.567
watches that only give you -- 
they're very good at giving you 

02:37:26.568 --> 02:37:28.568
the time.

02:37:30.582 --> 02:37:32.582
With smartwatches, you expect to
get the best out of the time.

02:37:36.344 --> 02:37:39.822
For example, in my case, very 
busy during the day.  I quickly 

02:37:39.823 --> 02:37:41.823
look at the phone and am 

02:37:42.890 --> 02:37:44.310
able to check when the next 
train leaves for San Francisco 

02:37:44.311 --> 02:37:48.854
so I can be home in time for my 
daughter's soccer game.   We're 

02:37:48.855 --> 02:37:51.715
working really hard to improve 
the experience for the assistant

02:37:51.716 --> 02:37:53.716
to 

02:37:55.194 --> 02:37:57.841
optimize for the risk form 
factor.  In a few short minutes 

02:37:57.842 --> 02:37:59.842
I'll invite Tom 

02:38:00.943 --> 02:38:02.965
to come on stage and I'll tell 
us more about what we're working

02:38:02.966 --> 02:38:05.878
on here with the Assistant.
  There you have it, the three 

02:38:05.879 --> 02:38:09.986
areas we're focused on to 
improve the user experience, 

02:38:09.987 --> 02:38:11.987
connections at a glance, 

02:38:13.867 --> 02:38:15.867
health and fitness, convenient 
help from the Assistant.

02:38:18.337 --> 02:38:20.337
In order to do this really well,
we 

02:38:22.214 --> 02:38:24.898
require a very solid and robust 
foundation.  Here I'm talking 

02:38:24.899 --> 02:38:26.899
about things like 

02:38:28.022 --> 02:38:30.250
power, connectivity, 
performance, companion apps that

02:38:30.251 --> 02:38:32.251
go along with a device, so on.

02:38:34.990 --> 02:38:37.847
Let me highlight three of them 
very  quickly.

02:38:38.873 --> 02:38:40.873
First, iOS.  As I said, we're we
will.

02:38:41.955 --> 02:38:44.437
Coulding a lot of iOS users and 
we want them to have a great 

02:38:44.438 --> 02:38:49.177
user experience just like 
anybody else that's wearing a 

02:38:49.178 --> 02:38:51.178
Wear OS watch.

02:38:52.658 --> 02:38:54.658
Very recently, for example, we 

02:38:58.001 --> 02:39:00.001
introduced a brand-new iOS 
companion app 

02:39:01.068 --> 02:39:03.715
that brings Google Fit summary 
stats right on the app so you 

02:39:03.716 --> 02:39:07.851
can see it from the comfort of 
your own iPhone.  This is one 

02:39:07.852 --> 02:39:09.852
example of many things 

02:39:11.359 --> 02:39:13.359
we're doing to improve the iOS 
experience.

02:39:15.052 --> 02:39:17.073
Next, power.  Power is really, 
really important when 

02:39:20.558 --> 02:39:22.558
it comes to smartwatches and 
we're 

02:39:24.439 --> 02:39:26.472
working across the Wear OS to 
optimize the battery 

02:39:26.473 --> 02:39:30.787
consumption.  Right after Tom 
we'll invite my colleague Rati 

02:39:30.788 --> 02:39:32.425
and she'll tell us a lot more 
about what we're doing with 

02:39:32.426 --> 02:39:34.426
Android 

02:39:37.139 --> 02:39:39.139
P and how this has a positive 
impact in power.

02:39:43.089 --> 02:39:45.962
Lastly, I would like to 
highlight that we're bringing 

02:39:45.963 --> 02:39:48.612
faster and more frequent updates
to the platform.  That's really,

02:39:48.613 --> 02:39:50.613
really important for 

02:39:52.940 --> 02:39:54.368
our users, that they get 
continuous improvements to the 

02:39:54.369 --> 02:39:56.369
watch constantly 

02:39:58.437 --> 02:40:00.925
throughout the year with wear 2.
0 we made changes to the 

02:40:00.926 --> 02:40:03.797
architecture so that pieces that
were considered to be 

02:40:07.079 --> 02:40:08.972
traditionally part of the OS are
you no updatable platform 

02:40:08.973 --> 02:40:10.973
components and as a 

02:40:13.663 --> 02:40:15.663
result of that, this past year, 
in 2017, 

02:40:18.430 --> 02:40:20.430
we're able to do 11 releases to 
the 

02:40:22.089 --> 02:40:24.531
platform and introduce 49 
features and improvements.  This

02:40:24.532 --> 02:40:28.799
year we're on track to do the 
same, or even higher.  We're 

02:40:28.800 --> 02:40:30.436
introducing a lot of features 
really, really fast and I'm 

02:40:30.437 --> 02:40:32.437
really 

02:40:34.738 --> 02:40:37.599
excited about that.
  As I said before, the Google 

02:40:37.600 --> 02:40:41.094
Assistant is a key pillar we're 
working on, really, really 

02:40:41.095 --> 02:40:43.548
important for us.  I'll invite 
Tom on stage to tell us a 

02:40:46.823 --> 02:40:52.382
lot more about it.
  Thank you.

02:40:53.001 --> 02:40:55.001
&gt;&gt; TOM RUDICK: Thank you, 
Dennis.

02:40:56.719 --> 02:41:00.039
I'm Tom and I work on the 
assistant for we're OS.  We want

02:41:00.040 --> 02:41:03.594
the assistant to follow you 
across all deviceses.  When you 

02:41:03.595 --> 02:41:04.630
interact with the assistant, it 
should adapt to the device 

02:41:04.631 --> 02:41:06.631
you're using.

02:41:10.769 --> 02:41:11.578
For wear, we want to provide an 
awesome experience on your 

02:41:11.579 --> 02:41:15.845
wrist.  With the last update 
this week we completely 

02:41:15.846 --> 02:41:17.846
redesigned the UI with three 

02:41:19.719 --> 02:41:21.719
major improvements I would like 
to talk about.

02:41:23.005 --> 02:41:25.041
First, we have an always present
microphone which automatically 

02:41:25.042 --> 02:41:27.042
reopens 

02:41:28.111 --> 02:41:30.390
to continue the conversation 
with the  Assistant hands free.

02:41:34.088 --> 02:41:36.088
Second, support for text to 
speech.

02:41:37.165 --> 02:41:39.019
If puff a pair of Bluetooth 
headset or a wearable device 

02:41:39.020 --> 02:41:43.519
with a speaker, when you talk to
the Assistant, now it will speak

02:41:43.520 --> 02:41:45.520
right back to you.

02:41:47.647 --> 02:41:50.731
Lastly, my favorite, support for
suggestion chips.   Suggestion 

02:41:50.732 --> 02:41:52.732
chips allows you to breeze 

02:41:54.660 --> 02:41:56.660
through a conversation just by 
tapping.

02:41:58.377 --> 02:41:59.995
The biggest new edition for Wear
is support for actions on 

02:41:59.996 --> 02:42:04.496
Google.  Actions on Google allow
anyone to write a great wearable

02:42:04.497 --> 02:42:06.954
experience without writing a 
single line of Android 

02:42:10.825 --> 02:42:13.462
code, even better, most existing
actions already work on Wear OS 

02:42:13.463 --> 02:42:16.723
today without any changes.
  Let's take a look at how this 

02:42:16.724 --> 02:42:21.254
works.  You may have already 
used dialogue flow to build 

02:42:21.255 --> 02:42:23.980
actions for the assistant.  It 
is a platform provided by Google

02:42:23.981 --> 02:42:28.268
to turn natural language into a 
format that you can go and build

02:42:28.269 --> 02:42:31.138
cool stuff with.  Starting this 
week, you can also use 

02:42:33.597 --> 02:42:35.631
Datalogflow to create actions 
for Wear OS.  Best of all, we 

02:42:35.632 --> 02:42:37.632
have already done all 

02:42:39.098 --> 02:42:40.913
the hard work of building out 
response templates appropriate 

02:42:40.914 --> 02:42:43.586
for wearable devices, you don't 
even have to think about it.

02:42:46.828 --> 02:42:50.524
If you haven't used Datalogflow 
yet, it is super easy.   Just 

02:42:50.525 --> 02:42:52.986
yesterday I was creating my own 
action.  I only had to define 

02:42:52.987 --> 02:42:57.110
this action once.  We'll work 
across all supported devices.  

02:42:57.111 --> 02:42:59.540
Here is what it looks like on 
mobile.  This may look familiar.

02:43:02.793 --> 02:43:05.051
Here is an action icon on the 
top, a  tappable list of the 

02:43:05.052 --> 02:43:08.109
Google sessions I plan to go to 
and a suggestion chip at the 

02:43:08.110 --> 02:43:10.110
bottom.

02:43:11.970 --> 02:43:13.970
This is how it looks on wear.

02:43:16.675 --> 02:43:18.705
All the same components exist 
and now they're  tailored for a 

02:43:18.706 --> 02:43:22.422
smaller, wearable form factor.  
We didn't have to do anything 

02:43:22.423 --> 02:43:24.423
special 

02:43:27.327 --> 02:43:29.327
for this to happen, it just 
works.

02:43:29.956 --> 02:43:32.625
Even if you're going deeper, you
use the action SDK or a Webhook 

02:43:32.626 --> 02:43:36.122
for fulfillment, we have you 
covered.  In this case, I'm 

02:43:36.123 --> 02:43:38.123
adding a new card to the 
conversation that has more 

02:43:41.060 --> 02:43:43.060
information about this session.

02:43:44.567 --> 02:43:48.236
This is how the card will render
on both phone and  Wear.  It 

02:43:48.237 --> 02:43:49.872
automatically resizes and looks 
great regardless of which device

02:43:49.873 --> 02:43:54.150
is being used.
  So over the past few months, 

02:43:54.151 --> 02:43:58.383
we have been building and 
testing a lot of actions.  We 

02:43:58.384 --> 02:44:00.384
have come up with best practices
to 

02:44:02.295 --> 02:44:04.295
help your actions look really 
great on Wear.

02:44:06.189 --> 02:44:08.189
Let's start with an example.

02:44:13.085 --> 02:44:14.562
Okay, Google, ask when is the 
next BART from Fremont to 

02:44:14.563 --> 02:44:16.563
Hayward.

02:44:17.605 --> 02:44:20.296
The next BART from Fremont to 
Hayward leaving at 11:21 a.m.

02:44:23.007 --> 02:44:27.725
  &gt;&gt; TOM RUDICK: Cool.  We want 
users to have glancable 

02:44:29.544 --> 02:44:32.235
interactions and get tasks done 
quickly.  We want to allow users

02:44:32.236 --> 02:44:36.566
to complete a task with a single
phrase.  In the previous example

02:44:36.567 --> 02:44:38.567
I was able to get the 
information I asked for by 

02:44:40.692 --> 02:44:43.119
speaking a single phrase.  
Imagine if I had to specify all 

02:44:43.120 --> 02:44:48.056
of that information separately, 
the train I wanted, the station,

02:44:48.057 --> 02:44:53.348
the direction of travel, that 
would take way too long and I 

02:44:53.349 --> 02:44:56.013
would be far more likely to pull
out my phone.  Keep the 

02:44:56.014 --> 02:44:58.086
dialogues short, concise, 
task-oriented.

02:45:00.158 --> 02:45:01.559
There are cases where having a 
back and forth dialogue is 

02:45:01.560 --> 02:45:03.560
important and maybe even 
required.

02:45:07.130 --> 02:45:09.188
That's fully supported on Wear 
today.  Try not to make it part 

02:45:09.189 --> 02:45:11.189
of the core user journey.

02:45:13.690 --> 02:45:16.967
As you may have just heard, wear
now supports vocal responses.  

02:45:16.968 --> 02:45:18.968
They don't have to be the same 
as a visual.

02:45:20.251 --> 02:45:22.907
In the previous example, both 
the visual response and the 

02:45:22.908 --> 02:45:26.177
vocal response tell me when the 
next train leaves.   That's what

02:45:26.178 --> 02:45:31.258
I asked for.  The visual 
response goes a step further 

02:45:31.259 --> 02:45:33.930
showing a more detailed list of 
departures.  That information 

02:45:33.931 --> 02:45:35.931
would probably be too 

02:45:37.212 --> 02:45:38.831
dense to read allowed vocally 
but visually, it works really 

02:45:38.832 --> 02:45:41.342
well.
  Independently, both the vocal 

02:45:41.343 --> 02:45:45.045
and visual response makes sense,
but together, they really 

02:45:45.046 --> 02:45:47.046
complement each 

02:45:48.142 --> 02:45:50.142
other and make an awesome 
experience.

02:45:53.685 --> 02:45:56.549
Keep in mind, that not all 
devices support vocal feedback. 

02:45:56.550 --> 02:45:59.405
You can use surface capabilities
to tailor the experience to the 

02:45:59.406 --> 02:46:06.157
device that's being used.
  Vocal responses are cool, but 

02:46:06.158 --> 02:46:08.158
a 

02:46:10.066 --> 02:46:12.066
favorite new feature is 
suggestion chips.

02:46:14.907 --> 02:46:16.907
I have

02:46:17.978 --> 02:46:20.687
to admit, I'm nervous, the last 
few times I came to Mountain 

02:46:20.688 --> 02:46:26.394
View it rained, I forgot the 
umbrella, got soaking wet.  

02:46:26.395 --> 02:46:28.062
Let's ask the assistant how 
things look even though it looks

02:46:28.063 --> 02:46:30.306
nice today.  Google, do I need 
an umbrella today?

02:46:42.214 --> 02:46:44.092
This want I was planning on 
going to a hike and I can use 

02:46:44.093 --> 02:46:47.162
suggestion chips to get that 
information quickly, the weather

02:46:47.163 --> 02:46:49.207
forwarded the weekend, I can 
drag uppal on wherever the 

02:46:49.208 --> 02:46:51.208
microphone is 

02:46:52.277 --> 02:46:54.125
located  revealing the 
suggestion chips and I can tap 

02:46:54.126 --> 02:46:55.559
on weather this weekend to 
quickly get the forecast for the

02:46:55.560 --> 02:46:57.560
weekend.  The weather looks 
great.

02:47:00.143 --> 02:47:05.043
I should bring my sunscreen.
  I love suggestion chips.  Not 

02:47:05.044 --> 02:47:06.293
only are they a great way for 
guiding users through a 

02:47:06.294 --> 02:47:08.776
conversation, they also allow 
users to discover what 

02:47:12.489 --> 02:47:14.542
your agent can and cannot do, 
provide example chips whenever 

02:47:14.543 --> 02:47:16.543
possible to guide 

02:47:18.035 --> 02:47:20.092
users through a conversation.
  When thinking about how to 

02:47:20.093 --> 02:47:22.093
build your 

02:47:23.953 --> 02:47:25.594
action, be  user-centric.  
Someone may be using your action

02:47:25.595 --> 02:47:28.665
in a lot of different ways.  
They may be on the go, the hands

02:47:28.666 --> 02:47:30.666
may 

02:47:33.808 --> 02:47:36.633
be be full and vocal responses 
may be more appropriate.  They 

02:47:36.634 --> 02:47:38.093
could be somewhere noisy, 
suggestion chips are the easiest

02:47:38.094 --> 02:47:40.094
way for 

02:47:41.147 --> 02:47:43.147
them to tap through an 
interaction.

02:47:44.835 --> 02:47:46.835
Design with all these use cases 
in mind.

02:47:47.512 --> 02:47:49.142
We have had a lot of fun 
building supports for actions on

02:47:49.143 --> 02:47:53.680
Google and you can get started 
building your own agents today. 

02:47:53.681 --> 02:47:56.318
I'm so excited to see what 
you're going to build.   If you 

02:47:56.319 --> 02:47:59.165
need inspiration, we have a lot 
of great partner  demos in the 

02:48:05.012 --> 02:48:07.403
sandbox and you can come by and 
check them out.   If you're 

02:48:07.404 --> 02:48:09.858
interested in building actions, 
I recommend that you check out 

02:48:12.082 --> 02:48:13.312
the design actions for the 
Google session that starts right

02:48:13.313 --> 02:48:15.313
after this one 

02:48:16.995 --> 02:48:18.217
on Stage 2, don'ts go just yet, 
up next is Rati to talk about 

02:48:18.218 --> 02:48:20.477
the platform updates.

02:48:26.809 --> 02:48:28.809
  &gt;&gt; RATI AGRAWAL: Thank you.  
I'm a technical program manager 

02:48:30.711 --> 02:48:32.711
working on Wear OS.

02:48:34.186 --> 02:48:36.186
We just showed how to build 
really 

02:48:38.259 --> 02:48:40.313
cool assistant actions in Google
for our app Wear users, let's 

02:48:40.314 --> 02:48:43.183
move on to the platform updates 
that we have.

02:48:47.905 --> 02:48:49.536
With the new release we have 
platform features helping you to

02:48:49.537 --> 02:48:52.813
offer delightfully stable and 
battery efficient experiences 

02:48:52.814 --> 02:48:54.814
throughout your 

02:48:59.897 --> 02:49:01.645
apps and help you build really 
cool watch faces with a few 

02:49:01.646 --> 02:49:04.302
lines of code.
  To begin, I would like to talk

02:49:04.303 --> 02:49:06.303
about a 

02:49:09.416 --> 02:49:11.416
feature that's going to impact 
you as a 

02:49:12.420 --> 02:49:16.815
DeVop.  We are looking to 
improve the app 

02:49:19.894 --> 02:49:22.131
compatibility and to prevent 
apps from breaking.   Wear OS is

02:49:22.132 --> 02:49:24.132
adopting the restrictions 

02:49:26.831 --> 02:49:30.114
for the goal of making behavior 
deterministic and stable.  This 

02:49:30.115 --> 02:49:31.803
is similar to what developers on
my team face just before a 

02:49:31.804 --> 02:49:34.264
product launch.   The deadlines 
and restrictions can 

02:49:39.174 --> 02:49:41.174
make people a little unhappy as 
they're 

02:49:42.856 --> 02:49:45.503
trying to meet deadlines but 
come launch date the team is 

02:49:45.504 --> 02:49:47.942
happy with a stable, reliable 
product that meets our users' 

02:49:48.160 --> 02:49:50.160
needs.

02:49:52.596 --> 02:49:54.596
To check out the app compatible

02:49:56.286 --> 02:49:58.286
ility lig,

02:49:59.391 --> 02:50:01.021
compatibility link, to 
understand what the changes mean

02:50:01.022 --> 02:50:03.022
for the apps, moving on to 
battery.

02:50:04.088 --> 02:50:06.088
Battery is precious on mobile 
and even 

02:50:07.163 --> 02:50:09.163
more so on wear.

02:50:10.422 --> 02:50:13.296
Last year, we highlighted that 
most watches have just a tenth 

02:50:13.297 --> 02:50:15.297
of the battery 

02:50:17.223 --> 02:50:19.223
capacity of a phone and we 
shared best 

02:50:20.300 --> 02:50:21.962
practices on improving battery 
life.  We have indicated that we

02:50:21.963 --> 02:50:24.908
will look for ways to be more 
aggressive than the 

02:50:28.405 --> 02:50:30.405
phone in addressing battery 
usage.

02:50:33.083 --> 02:50:35.133
This year we're moving beyond 
the mobile platform and 

02:50:35.134 --> 02:50:37.187
introducing features to reduce 
background activity and 

02:50:39.225 --> 02:50:41.666
aggressively turn off radios 
when the user takes off the 

02:50:41.667 --> 02:50:44.530
watch and enhance battery saver 
mode.

02:50:48.465 --> 02:50:51.315
I'll walk you through some of 
them.  This is a snapshot of the

02:50:51.316 --> 02:50:55.216
app stand begin feature that was
introduced yesterday in what's 

02:50:55.217 --> 02:50:57.217
new in Android P.

02:50:59.506 --> 02:51:01.506
On Wear OS, we're

02:51:02.840 --> 02:51:05.885
experimenting with a more 
aggressive platform change.  

02:51:05.886 --> 02:51:07.886
Apps not active will not be able
to 

02:51:09.963 --> 02:51:11.963
create jobs or alarms when not 
on the 

02:51:12.976 --> 02:51:14.976
charger

02:51:16.094 --> 02:51:17.942
even when they're in the active 
bucket, they can only start   

02:51:17.943 --> 02:51:20.383
jobs or alarm if they're in the 
foreground.   What do you mean 

02:51:20.384 --> 02:51:23.657
by foreground.
  An active app running in the 

02:51:27.556 --> 02:51:29.556
foreground is an example.

02:51:31.202 --> 02:51:33.202
A watch face currently active on
the 

02:51:36.165 --> 02:51:37.800
dial and complications on the 
currently active watch face and 

02:51:37.801 --> 02:51:42.677
in rare  circumstances, say if 
you're a health monitoring app, 

02:51:42.678 --> 02:51:44.678
a full ground service running on
the watch.

02:51:47.036 --> 02:51:49.036
All of these can create jobs and
alarms.

02:51:50.486 --> 02:51:53.433
If you are a developer, look at 
these in 

02:51:57.077 --> 02:51:59.077
the preview and provide us with 
feedback.

02:52:03.889 --> 02:52:06.345
.
  Battery saver mode, we're 

02:52:06.346 --> 02:52:11.700
enhancing the mode to go beyond 
the phone platform to 

02:52:11.701 --> 02:52:13.770
aggressively squeeze the last 
ounce of battery and to prevent 

02:52:13.771 --> 02:52:18.330
the watch from turning off on 
users' wrists during the day.

02:52:21.389 --> 02:52:23.457
In this enhances version of 
battery saver mode, we'll be 

02:52:23.458 --> 02:52:25.458
turning off all 

02:52:27.754 --> 02:52:29.754
radios, touch, tilt detection 
and we'll 

02:52:30.808 --> 02:52:32.808
be defaulting to a battery watch
face.

02:52:34.519 --> 02:52:36.519
Users are pressed to read the 
time and 

02:52:37.668 --> 02:52:39.907
long press to resume full 
operation.  This could be 

02:52:39.908 --> 02:52:42.359
particularly helpful if the 
watch is running low on battery,

02:52:42.360 --> 02:52:44.360
but 

02:52:46.026 --> 02:52:48.026
you want to quickly be able to 
turn it 

02:52:49.346 --> 02:52:53.866
back on to make a payment or to 
check an important message.

02:52:55.521 --> 02:52:57.521
Continuing with efforts to 
improve 

02:53:00.257 --> 02:53:01.261
battery life, last months we 
moved to a team for the system 

02:53:01.262 --> 02:53:03.510
app.
  Apps as mentioned by Dennis 

02:53:03.511 --> 02:53:06.403
earlier.  This teaming has the 
duel benefit of 

02:53:09.456 --> 02:53:11.530
improving glancablety and 
accessibility while reducing 

02:53:11.531 --> 02:53:13.806
power consumption.  In P, we're 
bringing these changes to 

02:53:17.068 --> 02:53:22.191
the platform and updating the 
default system UI to use.  Try 

02:53:22.192 --> 02:53:24.192
these out on your app using the 

02:53:25.483 --> 02:53:27.332
current developer preview.
  I would like to leave you with

02:53:27.333 --> 02:53:30.191
some best practices for watch 
face design.

02:53:33.255 --> 02:53:35.255
As you know, watch faces are the
most 

02:53:37.338 --> 02:53:39.338
active apps and frequently are 
doing too much too often.

02:53:41.840 --> 02:53:43.840
As developers, you have the 
ability to 

02:53:44.882 --> 02:53:47.374
influence how long users can get
experience and enjoy the watch 

02:53:47.375 --> 02:53:50.438
faces using simple coding 
techniques to save battery.

02:53:54.295 --> 02:53:56.295
Let me share a few best 
practices with you.

02:53:58.824 --> 02:54:01.667
Display CPU and network are the 
most battery intensive 

02:54:01.668 --> 02:54:03.668
components of the system.

02:54:05.379 --> 02:54:08.215
Be mindful of the frequency at 
which you are reading, 

02:54:08.216 --> 02:54:12.284
processing, displaying 
information on a watch face.  

02:54:12.285 --> 02:54:14.570
For example, if you're reading a
sensor and doing calculations 

02:54:14.571 --> 02:54:16.801
every minute or sending an RPC 
to the 

02:54:20.916 --> 02:54:22.916
companion every minute this can 

02:54:24.787 --> 02:54:26.651
significantly impact the battery
life and once you have the new 

02:54:26.652 --> 02:54:28.652
data from the center of the 
network you will also have 

02:54:31.594 --> 02:54:33.434
to wake up the system to process
it.  Process and wake-ups, 

02:54:33.435 --> 02:54:38.758
they're more expensive for 
battery life than the power 

02:54:38.759 --> 02:54:40.759
consumed by individual sensors 

02:54:41.766 --> 02:54:43.766
like the accelerometer and 
that's the 

02:54:46.705 --> 02:54:48.966
request and the network cause 
and that will go a long way in 

02:54:48.967 --> 02:54:51.962
conserving battery life.

02:54:55.532 --> 02:54:58.188
Finally, developer tools, last 
year Android and as a result 

02:54:58.189 --> 02:55:00.189
Wear OS 

02:55:02.272 --> 02:55:04.272
officially started supporting 
Kotlin DSL 

02:55:06.173 --> 02:55:08.617
and you can take advantage of a 
lot of language features like 

02:55:08.618 --> 02:55:13.331
compile objects and other 
support but to get the best out 

02:55:13.332 --> 02:55:15.332
of Kotlin DSL we need to go 
beyond 

02:55:18.018 --> 02:55:20.018
what the language offers by 
default.

02:55:22.533 --> 02:55:24.533
On Wear we're experimenting with

02:55:25.584 --> 02:55:27.067
creating a DSL for batch faces 
to get rid of the boiler plate 

02:55:27.068 --> 02:55:32.420
code.  The initial results, 
they're quite exciting.  We 

02:55:32.421 --> 02:55:34.421
reduced the watch face creation 

02:55:36.904 --> 02:55:39.349
code of 600 plus lines to just 
under 15 lines of code.

02:55:42.628 --> 02:55:45.112
Here is a bit of what the DSL 
looks like.   This simplified 

02:55:45.113 --> 02:55:49.598
interface allows you to focus on
the design and customize your 

02:55:49.599 --> 02:55:51.599
watch faces using just a couple 
of 

02:55:53.300 --> 02:55:55.335
lines of code while 
incorporating best practices to 

02:55:55.336 --> 02:55:57.776
boost the performance and 
battery life of your designs.

02:56:01.095 --> 02:56:03.095
We're very excited about the 

02:56:04.505 --> 02:56:04.722
opportunities that Kotlin 
provides and we're just 

02:56:04.723 --> 02:56:07.616
beginning to scratch the surface
on simplifying the development 

02:56:08.013 --> 02:56:12.535
on Wear OS.  We look forward to 
your feedback while we work 

02:56:12.536 --> 02:56:14.536
towards adding this to tour 
official SDK.

02:56:17.715 --> 02:56:20.156
Check out the code labs at I/O 
and visit the Wear OS sandbox to

02:56:20.157 --> 02:56:22.157
share your 

02:56:25.086 --> 02:56:27.129
feedback and ideas.
  To summarize, use officially 

02:56:27.130 --> 02:56:29.130
supported 

02:56:30.215 --> 02:56:32.054
methods and APIs and insert the 
private APIs to improve 

02:56:32.055 --> 02:56:35.959
compatibility and stability of 
your apps.  Design your apps and

02:56:35.960 --> 02:56:37.960
watch faces to be battery 
efficient.

02:56:39.823 --> 02:56:41.823
Remember, batching is your 
friend.

02:56:42.876 --> 02:56:44.906
Download the developer preview 
and check out how the apps are 

02:56:44.907 --> 02:56:48.826
impacted by the battery-saving 
features that we're introducing.

02:56:51.869 --> 02:56:54.701
Finally, give Kotlin DSL a spin 
using the code lab and let us 

02:56:54.702 --> 02:56:56.996
know what you think.
  With that, let me hand it back

02:56:56.997 --> 02:56:58.997
to 

02:57:00.065 --> 02:57:02.065
Dennis foreclosing.

02:57:06.380 --> 02:57:10.045
  &gt;&gt; DENNIS TROPER: Thank you.
  All right.  To recap, we're 

02:57:10.046 --> 02:57:12.046
working really hard to 

02:57:13.097 --> 02:57:15.535
improve the Wear OS experience 
in three key areas, connections 

02:57:15.536 --> 02:57:17.536
at a glance, 

02:57:18.943 --> 02:57:21.086
health and fitness, a Google 
Assistant experience that's 

02:57:22.926 --> 02:57:25.362
optimized for the wrist.  We're 
improving the platform with new 

02:57:28.219 --> 02:57:32.723
battery saving features and new 
tools for developers.  Also you 

02:57:32.724 --> 02:57:35.589
can expect a lot more and 
frequent updates from us through

02:57:35.590 --> 02:57:37.590
the year.  Today's session is 
just the beginning 

02:57:42.269 --> 02:57:44.588
for us here at I/O.
  At 2:30 p.m.

02:57:48.056 --> 02:57:48.858
we have office hours where you 
can meet with our engineers and 

02:57:48.859 --> 02:57:50.859
developer 

02:57:51.914 --> 02:57:53.969
relation folks and come on by if
you have any questions and 

02:57:53.970 --> 02:57:55.970
they'll be happy to receive you 
and talk to you about 

02:57:58.844 --> 02:58:01.927
anything you like to talk about 
in regard to iOS.  At 11:30 p.m.

02:58:03.950 --> 02:58:05.950
tomorrow, we have an app review 
session 

02:58:08.092 --> 02:58:10.092
where we can bring the wear app,
the 

02:58:11.134 --> 02:58:13.406
complications, watch faces to 
get feedback from our  

02:58:13.407 --> 02:58:16.059
engineers.
  And we also have a sandbox, 

02:58:16.060 --> 02:58:18.060
here is a map of where it is.

02:58:21.352 --> 02:58:22.773
Please come visit us and we'll 
be there right after the session

02:58:22.774 --> 02:58:25.664
as well as many colleagues at 
Wear OS and we have 

02:58:30.780 --> 02:58:32.780
some cool demos there to show 
you and a 

02:58:37.032 --> 02:58:37.469
lineup of the recent Wear OS 
watches.

02:58:37.470 --> 02:58:39.470
That's all.  Thank you very much
for coming.

02:58:41.553 --> 02:58:41.748
Have a great I/O!

03:05:47.946 --> 03:05:49.946
Building Real Consumer Devices 
Using 

03:05:50.982 --> 03:05:52.982
Android Things

03:20:26.718 --> 03:20:30.118
Building Real Consumer Devices 
Using Android Things

03:20:29.970 --> 03:20:31.970
Using 

03:20:32.978 --> 03:20:34.978
Android Things

03:25:37.721 --> 03:25:38.543
.
  &gt;&gt; ROBERT GINDA: Thank you for

03:25:38.544 --> 03:25:42.247
joining us here at I/O today.  
Hello to everyone on the live 

03:25:42.248 --> 03:25:44.248
stream today.

03:25:46.112 --> 03:25:48.112
I'm  rob, an engineering lead on
the 

03:25:50.816 --> 03:25:52.816
Android things team and I'm 
joined by Shikha Kapoor.

03:25:53.182 --> 03:25:55.529
This is a Lenovo Smart Display 
built with Android things, it is

03:25:55.530 --> 03:25:59.390
a visual Google Assistant or a 
smart speaker with a display.  

03:25:59.391 --> 03:26:01.639
Probably you heard in the 
keynote already or maybe in the 

03:26:01.640 --> 03:26:03.640
talk earlier 

03:26:06.728 --> 03:26:08.583
today that these devices and 
others will be available on 

03:26:08.584 --> 03:26:10.584
store shelves in July, a couple 
of months from now.

03:26:11.441 --> 03:26:13.676
Today we're going to tell you 
the story of how we built the 

03:26:13.677 --> 03:26:15.677
devices from prototype up to the
production devices 

03:26:18.787 --> 03:26:20.635
that will be available in a few 
months.

03:26:20.636 --> 03:26:22.280
Before joining the Android 
things team I spent most of my 

03:26:22.281 --> 03:26:24.332
career writing software that ran
on other people's  

03:26:27.386 --> 03:26:29.635
devices, probably like many of 
you.  Building hardware to scale

03:26:29.636 --> 03:26:32.485
is different from the type of 
work I had done before and it 

03:26:32.486 --> 03:26:35.132
came with new challenges and 
today we'll tell you about some 

03:26:35.133 --> 03:26:39.421
of them.  Our hope is that you 
leave this talk with a better 

03:26:39.422 --> 03:26:41.675
idea of what it is like to build
consumer hardware to scale and 

03:26:41.676 --> 03:26:46.782
how Android things makes it 
easier than it ever has been.  

03:26:46.783 --> 03:26:49.248
It is not that scary when you 
know what to expect.  I hope our

03:26:49.249 --> 03:26:52.373
story of prototype to production
will help you build a device of 

03:26:52.374 --> 03:26:54.374
your own.
  &gt;&gt; SHIKHA KAPOOR: If you are a

03:26:56.252 --> 03:26:58.252
software developer thinking of 
the link 

03:26:59.349 --> 03:27:01.392
of consumer wise devices, here 
are things you care about, first

03:27:01.393 --> 03:27:05.126
you build the product features 
without worrying about the 

03:27:05.127 --> 03:27:07.127
underlying platform.  You want 
to be able to swap out 

03:27:10.469 --> 03:27:11.489
underlying hardware seamlessly 
without affecting your 

03:27:11.490 --> 03:27:13.490
application layer as the 

03:27:14.796 --> 03:27:17.274
technology or product needs 
evolve over time.  You want your

03:27:17.275 --> 03:27:19.275
devices to be secure.  I think 
it is obvious why security is 

03:27:22.201 --> 03:27:25.077
increasingly an essential 
requirement for smart devices.  

03:27:25.078 --> 03:27:26.713
They hold the keys to our homes 
and our personal information.

03:27:26.714 --> 03:27:31.644
  What's probably less obvious 
is why it is hard to provide 

03:27:31.645 --> 03:27:33.645
this kind of security.

03:27:35.920 --> 03:27:37.741
It is incredibly expensive to 
have the products out of the 

03:27:37.742 --> 03:27:39.742
gate and to keep them updated 
over time.

03:27:42.403 --> 03:27:44.635
Meanwhile, there is cost 
pressure from end customers and 

03:27:44.636 --> 03:27:46.636
it is hard to do this.

03:27:49.133 --> 03:27:51.166
.
  Coming back to you, finally, 

03:27:51.167 --> 03:27:55.462
if you're building a consumer 
device, you would want to manage

03:27:55.463 --> 03:27:58.737
release and update channels over
time.  Android things was 

03:27:58.738 --> 03:28:03.701
designed with all of these needs
in mind.  We provide turn key 

03:28:03.702 --> 03:28:05.735
hardware in the form of 
recertified system on modules or

03:28:10.021 --> 03:28:12.923
what we call a as the CPU, the 
wi-fi, Bluetooth, memory, other 

03:28:12.924 --> 03:28:15.978
critical hardware components.  
Think of this as a small 

03:28:15.979 --> 03:28:20.651
computing platform that you can 
use to build a straighter of IoT

03:28:20.652 --> 03:28:22.652
devices.

03:28:24.323 --> 03:28:26.968
We bring up the operating 
system, test it, certify it to 

03:28:26.969 --> 03:28:30.014
the suitability to production 
devices so that you don't have 

03:28:30.015 --> 03:28:32.015
to do any of this.

03:28:33.067 --> 03:28:35.124
Later on in the talk we'll give 
you an inside look into some of 

03:28:35.125 --> 03:28:37.125
the work that Google handles for
you.

03:28:41.254 --> 03:28:42.904
You provide the application code
and Google takes care of the 

03:28:42.905 --> 03:28:44.905
rest.

03:28:47.438 --> 03:28:49.284
What you see here are smart 
displays from Lenovo, and 

03:28:49.285 --> 03:28:54.378
others.  As mentioned, they're 
build with Android things.   If 

03:28:54.379 --> 03:28:56.379
you look under the hood, all of 

03:28:57.474 --> 03:28:59.474
the products have the same song 
which is pretty cool.

03:29:01.360 --> 03:29:03.360
These devices have microphones 
that 

03:29:04.644 --> 03:29:06.272
can hear you from the other side
of the room and built in 

03:29:06.273 --> 03:29:08.730
speakers that can answer back 
across the room just like a 

03:29:12.221 --> 03:29:14.079
smart speaker, but now we also 
have a touch screen which makes 

03:29:14.080 --> 03:29:16.080
it possible to see visual 
results.

03:29:20.024 --> 03:29:22.054
This is why there is a list of 
restaurants nearby on a map 

03:29:22.055 --> 03:29:25.737
showing you your commute 
conditions.  We announced this 

03:29:25.738 --> 03:29:27.738
earlier this year at CES and 
we're really proud of the 

03:29:28.825 --> 03:29:30.825
reception we received.

03:29:32.112 --> 03:29:34.112
Let's dive a little deeper and 
see how we'll build these.

03:29:36.003 --> 03:29:38.874
About a year back we at Google 
were wondering if we could build

03:29:38.875 --> 03:29:41.350
a visual Google Assistant.  This
would enable deep integration 

03:29:44.233 --> 03:29:49.392
with other services such as 
YouTube,  photos, maps, so on.  

03:29:49.393 --> 03:29:51.393
Building the consumer device 
though is 

03:29:53.460 --> 03:29:55.786
typically a long process, but 
for a fast-evolving space like 

03:29:55.787 --> 03:29:59.662
smart home devices time to 
market is extremely important.  

03:29:59.663 --> 03:30:01.663
We wanted quick turn around time
and 

03:30:03.120 --> 03:30:05.774
this is exactly where Android 
things shines.  Our goal is to 

03:30:05.775 --> 03:30:08.441
make it possible for software 
developers like you to build 

03:30:10.282 --> 03:30:12.731
consumer devices at scale.  
That's the hard thing to try to 

03:30:12.732 --> 03:30:16.993
get in a vacuum.  It takes real 
world experience and building 

03:30:16.994 --> 03:30:19.629
and shipping a lot of devices to
know that you have really done 

03:30:19.630 --> 03:30:23.126
it.  This project would give us 
the perfect opportunity to do 

03:30:23.127 --> 03:30:25.127
that.

03:30:26.387 --> 03:30:28.014
In this case, our customers were
software developers from other 

03:30:28.015 --> 03:30:32.325
internal teams at Google such as
the Google assistant team.

03:30:36.661 --> 03:30:39.292
For smart displays, they took 
the lead on the software, we 

03:30:39.293 --> 03:30:43.172
concentrated on the platform and
we were able to get them from 

03:30:43.173 --> 03:30:44.785
prototype to production super 
fast and we have a stronger 

03:30:44.786 --> 03:30:48.659
platform for you to build on.
  We started by building some 

03:30:48.660 --> 03:30:53.985
proof of concept hardware for 
smart displays, our goal was to 

03:30:53.986 --> 03:30:55.986
launch from that and to use the 
device to kick off broader 

03:30:57.248 --> 03:30:59.248
discussions across the company.

03:31:01.134 --> 03:31:03.134
We took a few weeks and spare 
parts and built this.

03:31:03.230 --> 03:31:05.230
&gt;&gt; ROBERT GINDA: This is the 
first proof of concept hardware.

03:31:06.087 --> 03:31:08.087
This is running on some hardware
we 

03:31:09.536 --> 03:31:11.174
had used previously to deliver 
Anair droid things powered smart

03:31:11.175 --> 03:31:16.272
speaker.  I built this case with
my son, it cost me two poke 

03:31:16.273 --> 03:31:18.273
Monday cards, he wonders 

03:31:20.554 --> 03:31:22.554
when he'll -- P o.

03:31:23.635 --> 03:31:27.714
Kemon cards.   This is missing a
camera, doesn't have the volume 

03:31:27.715 --> 03:31:29.954
up, down buttons or mute of any 
sort but that wasn't the point 

03:31:29.955 --> 03:31:34.419
of the device.  For this, we 
were trying to show the basics 

03:31:34.420 --> 03:31:36.420
of what we thought we could 

03:31:38.118 --> 03:31:38.736
achieve with the smart display 
product to get the conversation 

03:31:38.737 --> 03:31:40.737
started.

03:31:41.790 --> 03:31:43.217
The mic on this was tricky to 
use, it was not meant for this 

03:31:43.218 --> 03:31:45.218
use case.  You needed a quiet 
room and you had to 

03:31:48.784 --> 03:31:51.216
stand in the right sweet spot 
but it was possible to pull up a

03:31:51.217 --> 03:31:53.217
convincing demo with it.

03:31:55.558 --> 03:31:57.569
On top of the Android things 
platform and smart speaker code 

03:31:57.570 --> 03:32:01.532
we already had, we built a small
Android application to drive the

03:32:01.533 --> 03:32:03.352
display and show off the key use
cases we thought would be 

03:32:03.353 --> 03:32:05.799
important for this device.

03:32:09.050 --> 03:32:11.050
A first thing we did with the 
display 

03:32:12.668 --> 03:32:14.752
is to transcribe your query as 
you spoke it, the speech 

03:32:16.390 --> 03:32:18.030
recognition pipeline was up and 
running and it looked cool in a 

03:32:18.031 --> 03:32:20.031
demo.

03:32:21.117 --> 03:32:23.117
Next up, support for rudimentary

03:32:24.167 --> 03:32:25.982
knowledge cards that I'll show 
some small text and photo with 

03:32:25.983 --> 03:32:28.438
answers with certain questions. 
This device couldn't play video 

03:32:28.439 --> 03:32:31.708
yet because it wasn't -- it 
didn't have the hardware 

03:32:31.709 --> 03:32:34.164
required for that.  It could 
stream music already just like a

03:32:34.165 --> 03:32:36.165
smart speaker.

03:32:37.284 --> 03:32:40.160
We added title track display and
media transport controls like 

03:32:40.161 --> 03:32:42.603
pause and skip.
  Finally we took a rough cut at

03:32:42.604 --> 03:32:45.854
the ambient screen which is what
the device does when it is not 

03:32:45.855 --> 03:32:47.855
doing anything else, it showed a
if he o toe slide show and a 

03:32:47.893 --> 03:32:49.893
weather forecast.

03:32:50.982 --> 03:32:52.607
Like I said, a basic set of 
functionality that we could use 

03:32:52.608 --> 03:32:54.849
to show people what we thought 
we could build out of this.

03:32:56.675 --> 03:32:58.504
It only took   about two weeks 
and a small team of people to 

03:32:58.505 --> 03:33:03.218
get this working.  The results, 
it was  surprisingly close to 

03:33:03.219 --> 03:33:04.264
the architecture of the final 
products shipping in a few 

03:33:04.265 --> 03:33:08.564
months.  The changes between 
what we built here and what 

03:33:08.565 --> 03:33:10.598
we're shipping, they're 
basically incremental changes.

03:33:14.699 --> 03:33:16.323
Fundamentally, what we built, 
are shipping, it involves the 

03:33:16.324 --> 03:33:21.077
smart display application on top
of the stack on top of Android 

03:33:21.078 --> 03:33:23.078
things on top of it a certified 
sum.

03:33:25.572 --> 03:33:28.524
Android things brings the 
hardware support, security, 

03:33:28.525 --> 03:33:30.525
application framework and the 
update mechanism and the smart 

03:33:30.757 --> 03:33:32.585
display application brings the 
Google Assistant integration and

03:33:32.586 --> 03:33:34.834
the visuals for the device.  
Don't get me wrong, there was 

03:33:37.291 --> 03:33:38.916
definitely a lot of work to do 
between here and what we're 

03:33:38.917 --> 03:33:42.181
shipping this summer, as I said,
the fundamental architecture is 

03:33:42.182 --> 03:33:44.838
the same and it was a matter of 
incrementally building out the 

03:33:47.694 --> 03:33:50.130
feature set from here.
  We practiced the demo routine 

03:33:50.131 --> 03:33:52.131
with this.

03:33:53.181 --> 03:33:55.210
Set up meetings across Google 
over the next few weeks and 

03:33:55.211 --> 03:33:57.462
people got a kick out of the 
brick case and we had a lot of 

03:33:59.148 --> 03:34:01.197
discussions and debate about 
product features we should 

03:34:01.198 --> 03:34:03.198
support, Android 

03:34:05.728 --> 03:34:07.562
things and about what we should 
do next.

03:34:07.563 --> 03:34:10.210
Overall, the demos went well and
we got the buy in we needed from

03:34:10.211 --> 03:34:12.211
key stakeholders across Google 
to move on to 

03:34:15.944 --> 03:34:16.754
the next step with this project.
  &gt;&gt; SHIKHA KAPOOR: Now that 

03:34:16.755 --> 03:34:18.755
this was 

03:34:20.781 --> 03:34:22.684
going to be real, we had a few 
steps in parallel to scale up 

03:34:22.685 --> 03:34:24.320
the efforts.
  First the business development

03:34:24.321 --> 03:34:26.776
team started discussions with 
potential OEM partners.

03:34:32.287 --> 03:34:33.741
In this case, OEM, original 
equipment manufacturer, they're 

03:34:33.742 --> 03:34:36.611
a company that will build and 
sell the device, they come up 

03:34:36.612 --> 03:34:38.255
with the industrial design and 
the physical look and feel of 

03:34:38.256 --> 03:34:40.511
the product, they also pick 
parts like the 

03:34:43.567 --> 03:34:45.434
display camera, microphone, 
other components.  If you were 

03:34:45.435 --> 03:34:47.476
to build a device on Android  
things, you will be the one 

03:34:49.715 --> 03:34:50.949
responsible for case design and 
confidence selection in place of

03:34:50.950 --> 03:34:55.669
this step, you may find an 
industrial design work forum to 

03:34:55.670 --> 03:34:59.733
work with or the factory -- and 
a factory to build the product. 

03:34:59.734 --> 03:35:01.581
A lot of details here have been 
handled by our OEM partners and 

03:35:01.582 --> 03:35:05.301
we're not going to cover them 
today.

03:35:06.937 --> 03:35:08.357
In parallel, we started to 
finalize the hardware 

03:35:08.358 --> 03:35:10.358
requirements for the product.

03:35:12.835 --> 03:35:14.835
The proof of concept device used
a Som 

03:35:15.912 --> 03:35:17.548
that we had used for smart 
speakers but you can build 

03:35:17.549 --> 03:35:19.549
anything from it with similar 
requirements as well.

03:35:22.019 --> 03:35:23.677
For smart displays though, we 
needed something more powerful 

03:35:23.678 --> 03:35:25.920
than the video play back.  
Fortunately we had some options 

03:35:25.921 --> 03:35:28.808
in the roadmap.  Let me start 
evaluating.

03:35:34.527 --> 03:35:35.276
Finally, in parallel to the 
selection, we got started on the

03:35:35.277 --> 03:35:37.289
application software.  Google 
had already built out the 

03:35:40.495 --> 03:35:42.414
assistant back in software for 
smart speakers and only a smart 

03:35:42.415 --> 03:35:45.526
speaker into a smart display, it
is not just a matter of plugging

03:35:45.527 --> 03:35:48.987
in a touch panel.  There is a 
lot of new work around the home 

03:35:48.988 --> 03:35:51.434
screen, the video play back 
experience, the maps and photos 

03:35:53.050 --> 03:35:54.270
integration and essentially all 
of the other visual features 

03:35:54.271 --> 03:35:58.975
that we were trying to build 
with us.   During the 

03:35:58.976 --> 03:36:00.976
application software from 

03:36:02.855 --> 03:36:03.871
a humble proof of concept 
device, it would take a lot of 

03:36:03.872 --> 03:36:05.872
time.

03:36:06.926 --> 03:36:08.772
Most of the software work was 
responsibility of developers 

03:36:08.773 --> 03:36:10.773
outside of 

03:36:11.837 --> 03:36:13.892
our team and we needed to get 
started right away.  The 

03:36:13.893 --> 03:36:15.318
engineers that are software 
developers like many of you 

03:36:15.319 --> 03:36:19.855
don't want to have to think 
about the underlying platform or

03:36:19.856 --> 03:36:24.199
the hardware.  Because we are 
building this on an tried things

03:36:24.200 --> 03:36:27.068
they don't need to -- like we 
mentioned earlier, we can be -- 

03:36:27.069 --> 03:36:32.160
the application engineers work 
on top of the Android framework 

03:36:32.161 --> 03:36:34.161
like any other Android developer
and the application can run on 

03:36:37.843 --> 03:36:39.594
any hardware with Android 
things.

03:36:39.595 --> 03:36:41.629
&gt;&gt; ROBERT GINDA: At this point 
in the project, it is July of 

03:36:41.630 --> 03:36:44.065
last year, we're about a month 
and a half in to the work.

03:36:46.115 --> 03:36:47.756
We have the proof of concept 
hardware, we have the business 

03:36:47.757 --> 03:36:50.009
development work underway, we 
have the hardware selection 

03:36:51.873 --> 03:36:53.899
underway and we're nearly ready 
to get started on the 

03:36:53.900 --> 03:36:55.945
application software development
in earnest.

03:36:57.812 --> 03:36:59.450
In order to really kick start 
development we have to get 

03:36:59.451 --> 03:37:03.934
actual hardware into the hands 
of engineers, product managers 

03:37:03.935 --> 03:37:07.392
and other folks at Google that 
will build it out.   As we said 

03:37:07.393 --> 03:37:09.630
before, the hardware we used in 
that proof of concept device, it

03:37:11.669 --> 03:37:14.737
was just a little too slow to 
use for more than a demo.  We 

03:37:14.738 --> 03:37:16.552
looked through the sums that we 
had in the pipeline and found 

03:37:16.553 --> 03:37:18.553
one that met 

03:37:19.821 --> 03:37:22.065
the requirements for this 
category of devices and it 

03:37:22.066 --> 03:37:24.066
happened to also be very easy to
buy in quantity over the 

03:37:26.154 --> 03:37:27.388
Internet and we had Android 
things running pretty well on 

03:37:27.389 --> 03:37:31.277
it.  We decided to use this as 
the basis for some provisional 

03:37:31.278 --> 03:37:33.754
hardware that we would build to 
unblock the application 

03:37:36.237 --> 03:37:37.864
engineers to get started on 
that, on their job while we 

03:37:37.865 --> 03:37:40.947
finished out the hardware.  We 
knew we would swap the hardware 

03:37:40.948 --> 03:37:45.441
out when it was closer to 
production but that didn't worry

03:37:45.442 --> 03:37:46.904
us, as we have said, we're 
building on Android of things 

03:37:46.905 --> 03:37:48.905
and that brings the isolation 
from the 

03:37:52.061 --> 03:37:54.061
hardware that you need to be 
able to do that.

03:37:55.572 --> 03:37:57.831
The second problem, the 
provisional hardware, it is that

03:37:57.832 --> 03:38:02.532
it was a development board kit 
similar to kits that we're 

03:38:02.533 --> 03:38:04.533
giving out here at I/O which 

03:38:05.569 --> 03:38:08.433
means it had a display, camera 
connected to the base board and 

03:38:08.434 --> 03:38:11.491
you can work like this, but it 
is a little difficult to manage 

03:38:11.492 --> 03:38:14.124
if you have more than one on the
desk, for example, and we wanted

03:38:14.125 --> 03:38:18.254
to give these out to a lot of 
Googlers.  For the first few 

03:38:18.255 --> 03:38:20.920
weeks we literally held it 
together at our desks with card 

03:38:23.360 --> 03:38:25.360
board and rubber bands and that 
wasn't 

03:38:26.844 --> 03:38:28.844
going to scale to the quantity 
we wanted to deliver.

03:38:31.103 --> 03:38:31.698
For that, we needed a more solid
enclosure to keep everything in 

03:38:31.699 --> 03:38:35.989
one spot.  By the way, if you 
complete the scavenger hunt here

03:38:35.990 --> 03:38:39.082
and you get a kit, make sure you
keep the packaging, it turns 

03:38:39.083 --> 03:38:41.549
into a handy stand so you don't 
have to build one yourself.

03:38:43.383 --> 03:38:46.030
This is the enclosure we came up
with for the first provisional 

03:38:46.031 --> 03:38:49.914
hardware.  Honestly, Android 
things didn't really help or 

03:38:49.915 --> 03:38:52.760
hurt either way in the building 
of this case.   I had a lot of 

03:38:52.761 --> 03:38:56.644
fun making it and learned a lot 
in the process.  I hope you 

03:38:56.645 --> 03:38:58.645
don't mind if I geek out for a 
few minutes and tell you more 

03:39:00.949 --> 03:39:02.949
about this design and how we 
built it.

03:39:03.419 --> 03:39:04.866
It looks plain from the front, 
the point is that it is enough 

03:39:04.867 --> 03:39:08.930
to keep the hardware together 
and give you a rough sense of 

03:39:08.931 --> 03:39:11.632
the factor that we had in mind. 
There is a camera module at the 

03:39:11.633 --> 03:39:13.633
top.

03:39:14.899 --> 03:39:16.107
Some microphones we had 
manufactured locally here in the

03:39:16.108 --> 03:39:18.108
middle of the top.

03:39:19.220 --> 03:39:21.220
Of course, the big touch screen 
in the front.

03:39:22.898 --> 03:39:24.898
Here is a quick view of the  
back.

03:39:26.347 --> 03:39:29.222
The SoM and carrier board are 
mounted on the big piece of 

03:39:29.223 --> 03:39:32.133
wood, like most of the hardware,
you can get to the ports easily 

03:39:32.134 --> 03:39:36.013
from the top.  There is access 
for the reset button on the side

03:39:36.014 --> 03:39:39.087
which is important with 
prototyping.  I want to point 

03:39:39.088 --> 03:39:41.945
out here that pretty much none 
of these components matched the 

03:39:41.946 --> 03:39:46.413
final hardware.  As we have 
said, the SoM is different, so 

03:39:46.414 --> 03:39:49.123
are the cameras, so are the mics
and the display.  Not an issue 

03:39:49.124 --> 03:39:51.124
because we're building Android 
apps on this and they don't 

03:39:52.611 --> 03:39:54.861
really care so much about the 
specific hardware underneath.

03:39:55.057 --> 03:39:58.126
  Building this prototype was my
favorite part of the project 

03:39:58.127 --> 03:40:02.416
because at the time the 
deadlines were far enough away 

03:40:02.417 --> 03:40:03.648
that they don't make that 
crushing sound they do when 

03:40:03.649 --> 03:40:07.300
they're closer.  We were still a
small team that needed to be 

03:40:07.301 --> 03:40:09.752
scrappy and pretty resourceful. 
I literally built this case in 

03:40:09.753 --> 03:40:13.835
my garage over a few weeks and 
the best part of  that, I got to

03:40:13.836 --> 03:40:17.945
buy a new tool, not just any 
tool, but a 60-watt laser cutter

03:40:17.946 --> 03:40:19.946
which I got off the Internet!

03:40:21.807 --> 03:40:23.676
I literally learned how to use a
laser cutter for this project 

03:40:23.677 --> 03:40:27.977
and it traded on the design in 
my garage over the course of a 

03:40:27.978 --> 03:40:30.514
few weekends, it was my first 
time using any kind of 3D 

03:40:30.515 --> 03:40:33.544
modeling package to do this kind
of design.  First time ever with

03:40:33.545 --> 03:40:35.804
a laser cutter.  I basically 
learned by watching videos 

03:40:36.013 --> 03:40:39.707
online.  The point here, if this
is the kind of thing you like, 

03:40:39.708 --> 03:40:41.708
yes, you can do it too and you 
will probably have a lot of fun 

03:40:42.775 --> 03:40:44.630
doing it.
  Material that I tried first 

03:40:44.631 --> 03:40:49.298
was this birch plywood, it is 
3-millimeters thick and you can 

03:40:49.299 --> 03:40:51.299
get it in quantity from the 

03:40:52.597 --> 03:40:54.433
net, two-day shipping in stacks 
of 25 or 60.  You go for the 

03:40:54.434 --> 03:40:58.107
bigger -- if you go for the 
batch of 60s is 1.50 a sheet or 

03:40:58.108 --> 03:41:01.390
less.  It is cost effective.  
When I first tried building this

03:41:01.391 --> 03:41:05.946
out, I wasn't very efficient 
with the material use.  It would

03:41:05.947 --> 03:41:08.777
take maybe 2, 3 sheets of 
plywood to build parts for the 

03:41:08.778 --> 03:41:12.447
case and eventually you want to 
get more optimized, waste a 

03:41:12.448 --> 03:41:17.194
little less material and as you 
see here, I imagined to fit the 

03:41:17.195 --> 03:41:21.248
whole case in a single 12-inch 
square sheet of plywood.  I did 

03:41:21.249 --> 03:41:23.249
have to fit one of the sides in 

03:41:25.556 --> 03:41:27.177
front of that bessel to make 
that work.

03:41:27.178 --> 03:41:29.207
It was fun and a challenge to 
figure out how to make it in one

03:41:29.208 --> 03:41:32.059
sheet of plywood.  Fun to 
overcome that.

03:41:34.722 --> 03:41:37.167
Laser cut only cuts in 2D, 
harder to work a fastener like 

03:41:37.168 --> 03:41:41.854
the screw in the design.  This 
is all friction fit.   Came up 

03:41:41.855 --> 03:41:44.091
with a tab and slot design to 
put together by hand and it 

03:41:44.092 --> 03:41:46.943
would stay together securely.  
The best part of that, it was 

03:41:46.944 --> 03:41:51.730
actually really easy to service 
in the field if a connector is 

03:41:51.731 --> 03:41:53.980
looes, you need to change a 
jumper, you snap it apart with 

03:41:53.981 --> 03:41:58.045
the hands, you don't need a 
screw driver, you fix it, put it

03:41:58.046 --> 03:42:00.110
back together and you're good to
go.

03:42:01.524 --> 03:42:03.524
We tried variations in other 
materials 

03:42:05.003 --> 03:42:07.449
such as the acrylic here, it is 
better than the wood, this is 

03:42:07.450 --> 03:42:12.147
semi transparent red is really 
cool.  What we found, in 

03:42:12.148 --> 03:42:16.629
acrylic, the thickens for us, 
the material that we had, the 

03:42:16.630 --> 03:42:18.697
thickens varied too much across 
color or even within color so 

03:42:18.698 --> 03:42:22.177
that when we put some of the 
cases together they just fall 

03:42:22.178 --> 03:42:24.200
apart on a desk or that they fit
together so tightly that the 

03:42:24.201 --> 03:42:28.757
acrylic would snap at the weak 
points which turned out to be 

03:42:28.758 --> 03:42:30.798
the 90º cuts in the material.  
We decided to go with the wood 

03:42:30.799 --> 03:42:33.426
after all because it would be 
more robust for us.

03:42:36.537 --> 03:42:38.164
I cut about a dozen Parts -- 
parts to make a dozen cases and 

03:42:38.165 --> 03:42:42.465
we brought them in the office, 
had people assemble them so that

03:42:42.466 --> 03:42:46.555
we could try out the design.  We
it traded on it a bit.  

03:42:46.556 --> 03:42:48.584
Eventually settled on the final 
design and sent it to an 

03:42:48.585 --> 03:42:52.053
internal shop at Google with a 
laser cutter that could cut them

03:42:52.054 --> 03:42:54.107
in bulk if you work in a company
that doesn't have a laser cutter

03:42:56.976 --> 03:42:58.420
shop, no big deal, you can find 
plenty of places where you up 

03:42:58.421 --> 03:43:00.421
load the file and 

03:43:01.904 --> 03:43:03.729
they'll cut them, send them back
to you.

03:43:03.730 --> 03:43:05.575
If you never worked with a 
cutter before, I recommend you 

03:43:05.576 --> 03:43:09.074
try one first before sending it 
out and committing to a bulk 

03:43:09.075 --> 03:43:10.889
order to get a feel for what 
works and doesn't work in this 

03:43:10.890 --> 03:43:12.890
kind of design.

03:43:13.949 --> 03:43:17.625
  You can build an enclosure too
and laser cutters are cool, try 

03:43:17.626 --> 03:43:20.477
one out.  One more thing before 
moving on though, I mentioned we

03:43:20.478 --> 03:43:22.478
wanted to build a 

03:43:23.516 --> 03:43:26.778
lot of these.  We built 75 in 
the first batch to spread around

03:43:26.779 --> 03:43:30.699
Google.  We thought they would 
be more than enough.  They were 

03:43:30.700 --> 03:43:33.150
so popular we built another 75 
and even that, frankly we could 

03:43:33.151 --> 03:43:35.394
have used more.

03:43:39.072 --> 03:43:42.157
.
  When you have this many 

03:43:42.158 --> 03:43:46.204
devices, you have to be able to 
tell which is which and somebody

03:43:46.205 --> 03:43:48.205
will have a problem, hey, can 
you look at this device, you say

03:43:49.253 --> 03:43:51.314
sure, I'm businessy  now, drop 
it off at the desk.  Maybe they 

03:43:51.315 --> 03:43:53.154
put it next to one that looks 
just like it while you're away 

03:43:53.155 --> 03:43:55.155
and then you end up looking at 
the scorch 

03:43:58.394 --> 03:44:00.394
marks on the Schayes case to 
figure out what is which.

03:44:05.218 --> 03:44:07.076
Think ahead, serial number, keep
track of  it, know what 

03:44:07.077 --> 03:44:08.918
inventory you have, who has what
and the history of the 

03:44:08.919 --> 03:44:14.250
individual devices.  
  &gt;&gt; SHIKHA KAPOOR: We have the 

03:44:14.251 --> 03:44:17.936
hardware protected type over the
application developers and in 

03:44:17.937 --> 03:44:19.937
parallel we were 

03:44:21.216 --> 03:44:23.460
working on finalizing the smart 
displays and we evaluated 

03:44:23.461 --> 03:44:25.090
different options and kick 
started another series of 

03:44:25.091 --> 03:44:27.340
discussions.  Only this time, it
was with the 

03:44:34.212 --> 03:44:36.146
vendors and we selected the 
SDA624 for the Lenovo devices 

03:44:36.147 --> 03:44:38.147
that are launching this year.

03:44:42.222 --> 03:44:44.222
Partnering this as an

03:44:46.165 --> 03:44:47.978
A53 and a  Adreno506 of, it is 
capable of driving the display 

03:44:47.979 --> 03:44:52.090
and a   bunch of other potential
devices you may want to build as

03:44:52.091 --> 03:44:54.091
well.

03:44:56.172 --> 03:44:57.584
On the SDA624 we'll offer free 
stability and security patches 

03:44:57.585 --> 03:45:00.431
for three years with options for
extended support.

03:45:02.302 --> 03:45:04.135
To give you a more concrete idea
of the hardware we're talking 

03:45:04.136 --> 03:45:06.136
about here, 

03:45:09.231 --> 03:45:11.231
here is a photo of the top of 
the box, 

03:45:12.298 --> 03:45:15.973
you see the wi-fi, the flash, 
memory, all on a board.  Here is

03:45:15.974 --> 03:45:18.004
the underside of the Som.  The 
main thing going on here, it is 

03:45:20.909 --> 03:45:23.802
the three high density partners 
with 100 pins each, the pins are

03:45:23.803 --> 03:45:25.803
the SoM interface to the outside
world.

03:45:29.082 --> 03:45:31.082
Here is a little deeper dive 
into the SoM spin out interface.

03:45:35.475 --> 03:45:38.103
The pins have power, lines and a
wide water of personal buses.  

03:45:38.104 --> 03:45:40.104
It looks a little overwhelming, 
doesn't it?

03:45:42.205 --> 03:45:44.030
However, you don't need to worry
about designing this if you were

03:45:44.031 --> 03:45:46.031
using Android 

03:45:47.082 --> 03:45:49.082
things to build your devices.

03:45:52.631 --> 03:45:54.257
We have standardized the SoM so 
that the underlying platform 

03:45:54.258 --> 03:45:56.258
knows the expectations.  In some
Schayess you have the option 

03:45:59.365 --> 03:46:01.658
of laying out the SoMs flat on 
the board as exactly as 

03:46:01.659 --> 03:46:03.305
specified according to the 
interface, however, it is much 

03:46:03.306 --> 03:46:05.950
faster and easier to just build 
a carrier board 

03:46:09.208 --> 03:46:13.475
that the SoM can plug into.
  &gt;&gt; ROBERT GINDA: Our 

03:46:13.476 --> 03:46:16.138
development Som, it has a 
carrier board with common pins 

03:46:18.998 --> 03:46:20.826
broken out on to standard sized 
header so you don't have to deal

03:46:20.827 --> 03:46:24.951
with the high-density 
connectors.  When you build the 

03:46:24.952 --> 03:46:27.601
device for real for mass 
production, you will likely want

03:46:27.602 --> 03:46:30.657
to spin your own carrier board 
that connects to whatever 

03:46:30.658 --> 03:46:32.658
hardware you need for the 
device.

03:46:34.259 --> 03:46:36.312
For smart displays, we came up 
with a reference carrier board 

03:46:36.313 --> 03:46:40.197
that we asked our OEMs to 
follow.  You can see in the 

03:46:40.198 --> 03:46:42.198
slide here that in 

03:46:43.246 --> 03:46:45.075
the middle we have the SoM, the 
CPU, wi-fi, other important 

03:46:45.076 --> 03:46:47.096
parts and the peripherals are 
connected on the outside.

03:46:50.164 --> 03:46:52.828
We standardized on button and 
sensor connections in the 

03:46:52.829 --> 03:46:57.128
reference design and specified 
which GPIOs they should connect 

03:46:57.129 --> 03:46:58.561
into to simplify our work on so 
the of the wear side because 

03:46:58.562 --> 03:47:00.562
we're 

03:47:01.608 --> 03:47:03.608
working with three  OEMs 
simultaneously 

03:47:05.268 --> 03:47:07.268
we wanted to avoid as much as we
could 

03:47:08.506 --> 03:47:09.114
unnecessary customizations 
across OeMs, everybody for 

03:47:09.115 --> 03:47:11.115
example plugged the volume 

03:47:14.408 --> 03:47:16.408
up in the same GPIOU in the SoM.
Another thing referenced, the 

03:47:17.674 --> 03:47:19.940
microphone mute circuit should 
be external to the SoM and 

03:47:19.941 --> 03:47:21.941
implemented in hardware so that 
when you mute the 

03:47:26.284 --> 03:47:27.710
devices the mics are 
electrically, physically 

03:47:27.711 --> 03:47:30.586
disconnected so that even in the
face of a successful exploit in 

03:47:30.587 --> 03:47:32.587
the 

03:47:34.248 --> 03:47:37.328
future, there is no way to 
unmute the device in software.  

03:47:37.329 --> 03:47:39.329
Similarly, we specified as part 
of the 

03:47:40.411 --> 03:47:42.272
reference design that the camera
mute should physically cover the

03:47:42.273 --> 03:47:46.764
lens of the camera so that there
is no way to unmute the camera 

03:47:46.765 --> 03:47:48.765
so to speak in software.

03:47:49.862 --> 03:47:51.298
We did leave some room for Oem 
customization, for example, they

03:47:51.299 --> 03:47:53.299
could select their own 
microphones and they 

03:47:55.792 --> 03:47:57.792
could build their own audio 
output 

03:47:59.272 --> 03:48:01.111
stages and they had leeway on 
display choice as well.

03:48:01.112 --> 03:48:04.004
This is the next revision of the
development kit.  This is what 

03:48:04.005 --> 03:48:06.643
came after the Wooden kits I 
showed earlier.  This is built 

03:48:06.644 --> 03:48:09.912
according to the reference 
design and it is using a lot of 

03:48:09.913 --> 03:48:12.990
the production components we 
have in real devices.   This 

03:48:12.991 --> 03:48:15.023
time around the entire front 
assembly was put together by an 

03:48:15.024 --> 03:48:17.024
outside firm and we didn't do 
any of that.

03:48:20.126 --> 03:48:22.986
This case happened to be an 
acrylic with fiction fit gromits

03:48:22.987 --> 03:48:27.880
to connect to the back, these 
sometimes came loose if you over

03:48:27.881 --> 03:48:30.323
tightened them and you could fix
it with super glue if you had 

03:48:30.324 --> 03:48:34.866
to.  From the front, same touch 
panel camera and microphones 

03:48:34.867 --> 03:48:39.324
used in the production devices 
for some.  We  added the acrylic

03:48:39.325 --> 03:48:42.384
back at Google which held the 
speaker in place and really just

03:48:42.385 --> 03:48:44.408
gave the front something to lean
up against so that it was at a 

03:48:47.073 --> 03:48:48.705
similar angle to what we were 
expecting for the production 

03:48:48.706 --> 03:48:50.706
devices.

03:48:54.194 --> 03:48:55.428
Inside, these are essentially 
the SDA624SoM plugged into a 

03:48:55.429 --> 03:48:57.429
carrier board matching the 
reference design.

03:49:01.388 --> 03:49:03.422
This is one of the earlier 
versions, and in these versions,

03:49:03.423 --> 03:49:07.097
the amplifier and the display 
interface, they were on donor 

03:49:07.098 --> 03:49:09.340
cards that plugged into the 
carrier board but on later 

03:49:09.341 --> 03:49:12.374
revisions we had it flattened 
down on to a single carrier 

03:49:12.375 --> 03:49:16.047
board.  We completed the kits in
the beginning of December of 

03:49:16.048 --> 03:49:18.048
last year.

03:49:20.320 --> 03:49:22.320
If you're not aware, CES is -- 
it is June --

03:49:22.773 --> 03:49:26.288
&gt;&gt; SHIKHA KAPOOR: January.
  &gt;&gt; JOHN PALLETT: January 9th. 

03:49:26.289 --> 03:49:28.729
We had just a month to go before
the Big Show.  We were going to 

03:49:28.730 --> 03:49:31.171
show off the devices at CES.

03:49:37.073 --> 03:49:39.534
It was a little nerve racking in
the weeks leading up to the 

03:49:39.535 --> 03:49:42.992
delivery of the devices where it
was closer and closer.  In fact,

03:49:42.993 --> 03:49:44.998
the application engineers had 
gotten off to a great start with

03:49:44.999 --> 03:49:49.056
the Wooden devices and we sorted
out the platform and brought it 

03:49:49.057 --> 03:49:52.817
up on the Android things side 
relatively quickly.  It is 

03:49:52.818 --> 03:49:54.818
amazing that one month before 

03:49:56.711 --> 03:49:57.923
this huge demo at CES we were 
able to completely swap out the 

03:49:57.924 --> 03:50:02.006
hardware.  We moved the entire 
development team, platform, 

03:50:02.007 --> 03:50:04.271
application engineers from those
Wooden prototypes over to the 

03:50:05.712 --> 03:50:09.773
devices running on a completely 
different SOC without a hitch.  

03:50:09.774 --> 03:50:12.019
This is because thanks to 
Android things the smart display

03:50:12.020 --> 03:50:16.697
application is totally 
independent of the platform.  

03:50:16.698 --> 03:50:17.958
You can see how this was useful 
to us, we had this provisional 

03:50:17.959 --> 03:50:20.204
situation where we needed to 
bring up temporary hardware 

03:50:21.842 --> 03:50:23.842
before the real stuff was ready.
This can be useful in production

03:50:24.106 --> 03:50:26.106
devices as  well.

03:50:27.207 --> 03:50:28.847
You may ship this year with a 
certain pro tile, a certain 

03:50:28.848 --> 03:50:33.331
piece of hardware that you need,
and then next year maybe you 

03:50:33.332 --> 03:50:35.560
want to cost it down or you may 
want to add new features and 

03:50:35.561 --> 03:50:38.848
switch to a powerful piece of 
hardware.   Because of this, you

03:50:38.849 --> 03:50:41.099
can easily reuse the application
software across a wide 

03:50:44.170 --> 03:50:45.382
variety of hardware platforms.
  &gt;&gt; SHIKHA KAPOOR: Around the 

03:50:45.383 --> 03:50:47.383
same time 

03:50:48.521 --> 03:50:50.521
as our preference hardware was 
being 

03:50:52.814 --> 03:50:54.890
completed, our partners were 
busy building out their own 

03:50:54.891 --> 03:51:00.408
devices based on reference 
design that we showed before.  

03:51:00.409 --> 03:51:01.624
Those are even closer to CIS and
regarded with two to three weeks

03:51:01.625 --> 03:51:06.787
to spare.  Again, the transition
was relatively smooth.  We hit a

03:51:06.788 --> 03:51:09.444
few bumps, for example, on one 
of the devices the camera looked

03:51:15.491 --> 03:51:17.491
green which we traced to a 
missing

03:51:18.496 --> 03:51:20.726
capaciter but nothing we 
couldn't start on time.  It was 

03:51:20.727 --> 03:51:22.776
a lot of work, I remember 
cursing when it was so close to 

03:51:22.777 --> 03:51:27.048
the holidays, why we did that, 
this is a picture of the war 

03:51:27.049 --> 03:51:29.696
room we set up a few weeks 
before  CES.  We spent a lot of 

03:51:29.697 --> 03:51:31.697
time here planning 

03:51:32.766 --> 03:51:34.790
the demos, adding features, 
fixing last minute bugs on the 

03:51:34.791 --> 03:51:36.791
device and back end servers that
make it work.

03:51:38.256 --> 03:51:40.304
On the demos, we planned to show
rich integration with other 

03:51:40.305 --> 03:51:42.305
Google services 

03:51:45.421 --> 03:51:47.858
such as YouTube, photos, maps, 
this is a little kids room we 

03:51:47.859 --> 03:51:51.726
set up that had cameras pointing
at it and we could check in on 

03:51:51.727 --> 03:51:56.008
our little Android baby all the 
way from Vegas.  Our hardware 

03:51:56.009 --> 03:51:58.009
and careful planning paid 

03:51:59.456 --> 03:52:01.918
off and the demos worked like 
they were supposed to.  We had 

03:52:01.919 --> 03:52:03.746
issues with the venue and 
hardware glitches but we brought

03:52:03.747 --> 03:52:07.449
you back ups expecting that to 
happen.  The reception we got 

03:52:07.450 --> 03:52:09.450
from the press 

03:52:10.972 --> 03:52:13.002
and users at CES was 
encouraging.  Many are hard at 

03:52:13.003 --> 03:52:16.879
work in something in secret, it 
is hard to gage how the outside 

03:52:16.880 --> 03:52:18.926
world, how it will react to it. 
Getting this type of positive 

03:52:18.927 --> 03:52:20.978
feedback was a great shot of 
motivation for the 

03:52:24.013 --> 03:52:26.049
team and helped with the effort.
After CES it was time to get out

03:52:26.050 --> 03:52:28.050
of 

03:52:29.315 --> 03:52:31.315
the demo mindset and back to the
work of  shipping.

03:52:31.545 --> 03:52:33.545
At this point, we were flushed 
with 

03:52:34.801 --> 03:52:38.517
hardware from our  OEM partners 
and the program was ramping up. 

03:52:38.518 --> 03:52:41.377
Up until now we were handing out
a single software build to all  

03:52:41.378 --> 03:52:45.063
developers and we had to expand 
out.  Fortunately Android things

03:52:45.064 --> 03:52:47.064
makes this 

03:52:48.347 --> 03:52:50.183
easy using Channels and our 
developer console allows you to 

03:52:50.184 --> 03:52:53.912
manage release and update 
channels over time.  You can get

03:52:53.913 --> 03:52:55.913
a lot more details on how 

03:52:57.708 --> 03:53:00.198
this works in a talk tomorrow.
  For displays, we established 

03:53:00.199 --> 03:53:03.331
multiple channels for the 
internal user segments depending

03:53:03.332 --> 03:53:05.332
on the needs.  Of for example, 
our developers have 

03:53:08.731 --> 03:53:09.958
medium to high-risk tolerance 
and can replace components as 

03:53:09.959 --> 03:53:11.959
necessary and we have a Dev 
channel for them.

03:53:17.052 --> 03:53:17.887
We have a Ca had nary for 
high-risk tolerant developer as 

03:53:17.888 --> 03:53:23.232
inwith he have a different 
channel for our testing teams so

03:53:23.233 --> 03:53:25.233
that we can give them only 
access to builds we want tested.

03:53:27.615 --> 03:53:30.128
At this point we have hundreds 
of Googlers testing out the 

03:53:30.129 --> 03:53:33.686
smart displays, giving us 
feedback on features.  These 

03:53:33.687 --> 03:53:35.687
people need more stable channels

03:53:36.984 --> 03:53:39.469
and they have low-risk tolerance
so we rollout stable weekly 

03:53:39.470 --> 03:53:41.470
builds with them 

03:53:42.948 --> 03:53:44.948
with good functionality and we 
look at issues.

03:53:45.227 --> 03:53:46.864
We're getting close to the end 
of the talk but I want to cover 

03:53:46.865 --> 03:53:49.355
one more thing before wrapping 
up.

03:53:52.634 --> 03:53:54.745
If you're  shipping software, 
you never really need to be 

03:53:54.746 --> 03:53:57.085
completely done with it if 
you're building a website, a 

03:53:59.172 --> 03:54:00.025
mobile application, you can 
rollout bug fixes whenever you 

03:54:00.026 --> 03:54:04.010
want.   When it comes to 
hardware, you only get one shot 

03:54:04.011 --> 03:54:08.429
at it.   Once it is in the hands
of the user, that's it.  There 

03:54:08.430 --> 03:54:10.502
are some things that even 
software cannot fix at that 

03:54:10.503 --> 03:54:14.692
point.  you better get it right.
You also just cannot keep the 

03:54:14.693 --> 03:54:17.821
factory running continuously 
though making small tweaks here 

03:54:17.822 --> 03:54:22.406
and there.  You need to purchase
your building materials in bulk 

03:54:22.407 --> 03:54:24.407
and since it is still early in 
the process you're not going to 

03:54:26.579 --> 03:54:28.254
be ready to buy in mass 
production quantities and the 

03:54:28.255 --> 03:54:33.009
cooling and testing takes some 
time to set up and  change.  

03:54:33.010 --> 03:54:35.463
This process usually happens 
across a few builds that are 

03:54:35.464 --> 03:54:38.238
standard in the hardware 
development life cycle and you 

03:54:39.731 --> 03:54:42.269
can read more about it on the 
Internet and I'll cover it 

03:54:42.270 --> 03:54:44.550
briefly today.
  So we already talked about the

03:54:46.262 --> 03:54:48.262
prototype phase and the next 
phase is 

03:54:49.446 --> 03:54:50.936
the EDT or engineering 
validation test.  For this phase

03:54:50.937 --> 03:54:52.937
you're trying to 

03:54:55.200 --> 03:54:57.213
validate that you got it right, 
no layout issues and the 

03:54:58.671 --> 03:55:00.559
components work the way they're 
supposed to.  If you're still 

03:55:00.560 --> 03:55:02.560
considering different design 
options you can concentrate on 

03:55:05.266 --> 03:55:07.148
them, this is a good time to do 
so.  This essentially represents

03:55:07.149 --> 03:55:09.149
the first 

03:55:11.456 --> 03:55:13.456
attempt at building the way 
they'll 

03:55:14.973 --> 03:55:16.195
appear in the final device and 
the enclosure is not final at 

03:55:16.196 --> 03:55:18.196
this stage, 

03:55:19.300 --> 03:55:22.031
you may want to keep the boards,
hard loads and keep them from 

03:55:22.032 --> 03:55:24.032
flipping around.

03:55:27.703 --> 03:55:30.640
The next stage is the DVT and 
the purpose is to verify to make

03:55:30.641 --> 03:55:32.895
sure that everything is meeting 
the final specifications.

03:55:37.348 --> 03:55:39.941
The devices we got for CES, they
were soft tool which means 

03:55:43.015 --> 03:55:44.226
that the molds used to cast the 
plastics were made out of a soft

03:55:44.227 --> 03:55:47.100
material like silicone.  You may
want to do a few builds here 

03:55:48.564 --> 03:55:50.901
until you get to a point where 
you know that there are no fixes

03:55:50.902 --> 03:55:54.797
that you need with  hardware.
  You ramp up quantities and you

03:55:54.798 --> 03:55:56.798
get the 

03:55:58.536 --> 03:56:02.474
confidence and you want to get 
with hard tool plastics.  The 

03:56:02.475 --> 03:56:04.756
production validation test is 
typically the last thing that 

03:56:06.225 --> 03:56:08.107
transitions to mass production 
hopefully by now you have logged

03:56:08.108 --> 03:56:11.843
in the final software you will 
be flashing in on these devices 

03:56:11.844 --> 03:56:13.844
and at this point you're 

03:56:15.014 --> 03:56:17.272
also hoping that the factory is 
running on autopilot without any

03:56:17.273 --> 03:56:19.945
manual intervention.
  Finally, your product is ready

03:56:19.946 --> 03:56:21.946
to go to mass production which 
means that it 

03:56:24.824 --> 03:56:26.677
is ready to be on shelves and at
this stage you ramp up 

03:56:26.678 --> 03:56:29.412
production and focus on making 
process improvements to improve 

03:56:29.413 --> 03:56:33.334
it.  You want to continue to 
test it for the next few months 

03:56:33.335 --> 03:56:38.528
though as well as establish some
sort of reliability testing.

03:56:41.215 --> 03:56:43.215
That's how we built the smart 
displays 

03:56:47.029 --> 03:56:48.652
from prototype to production and
Android things helped us every 

03:56:48.653 --> 03:56:50.653
step of the way.

03:56:52.350 --> 03:56:54.616
Thank you to the Android work 
and we could focus on 

03:56:54.617 --> 03:56:56.617
application features 

03:56:57.708 --> 03:57:00.618
without worrying about the 
unlying platform.  Our system 

03:57:00.619 --> 03:57:02.619
and software solutions 

03:57:04.056 --> 03:57:06.591
allowed them to swap out the 
hardware seamlessly moving from 

03:57:06.592 --> 03:57:08.935
one prototype kit to another 
without affecting it and yes, 

03:57:12.475 --> 03:57:15.119
while we needed to do a lot of 
work to bring up the displays, 

03:57:15.120 --> 03:57:17.120
you don't need to do any of 
this.

03:57:20.557 --> 03:57:23.254
The smart displays will be ready
to use soon.  Our update and 

03:57:23.255 --> 03:57:25.255
management features 

03:57:26.980 --> 03:57:28.980
allowed for easy maintenance of 
multiple 

03:57:30.085 --> 03:57:31.954
devices on the field and 
finally, our security features 

03:57:31.955 --> 03:57:34.477
mean that our partners and users
don't have to worry about the 

03:57:38.003 --> 03:57:39.038
security of these devices.
  &gt;&gt; ROBERT GINDA: We have a lot

03:57:39.039 --> 03:57:41.039
more to 

03:57:42.963 --> 03:57:44.433
show you at I/O, see us at the 
sandbox dome on the left side of

03:57:44.434 --> 03:57:48.370
the map here.   The entire dome 
is filled with Android things 

03:57:48.371 --> 03:57:51.511
demos and it is open after hours
as well.  You can see how we 

03:57:51.512 --> 03:57:54.861
leverage machine learning, buyer
base and the Cloud platform and 

03:57:54.862 --> 03:57:57.563
you can have an up close look at
the prototypes and the devices 

03:57:58.601 --> 03:58:00.601
we talked about here today.

03:58:03.197 --> 03:58:05.197
By the way, you'll notice we 
power 

03:58:07.399 --> 03:58:09.399
things outside of the sandbox 
and there 

03:58:11.610 --> 03:58:13.695
is a large human-sized robot 
roaming around, trying to take a

03:58:13.696 --> 03:58:17.198
selfie with you!  You can look 
at the codes as well shown here,

03:58:17.199 --> 03:58:19.199
we have the code labs 

03:58:20.744 --> 03:58:23.470
talking about TensorFlow and 
Cloud IoT and how we made the 

03:58:23.471 --> 03:58:26.389
survey boxes around I/O even 
more.  There is 7 more sessions 

03:58:26.390 --> 03:58:30.810
on Android things coming up 
today and tomorrow.  They go 

03:58:30.811 --> 03:58:33.479
even deeper in some of these 
topics.  Finally, have some fun 

03:58:33.480 --> 03:58:37.887
at I/O.  We have a scavenger 
hunt going on shown in the link 

03:58:37.888 --> 03:58:39.888
here, go.

03:58:41.013 --> 03:58:43.316
co/io search, you will run into 
some machine learning and 

03:58:43.317 --> 03:58:47.264
enhanced flowers which are cool 
and if you solve all of the 

03:58:47.265 --> 03:58:48.921
puzzles and get to the end you 
get a piece of developer 

03:58:48.922 --> 03:58:50.922
hardware to take home for 
yourself.

03:58:51.381 --> 03:58:53.669
With that, I invite you to go 
build hardware and I hope that 

03:58:53.670 --> 03:58:56.122
we're leaving you with 
confidence that you too can 

03:58:56.970 --> 03:58:59.006
build a device with Android 
things.  Go to the link 

03:58:59.007 --> 03:59:01.679
mentioned here to get started 
today.  Thank you.

04:09:57.515 --> 04:09:59.515
The Future of the Web is 
Immersive

04:16:17.105 --> 04:16:19.105
The Future of the Web is 
Immersive

04:25:30.444 --> 04:25:31.860
welcome to our talk on the The 
Future of the Web is Immersive, 

04:25:31.861 --> 04:25:33.861
I'm Brandon Jones 

04:25:35.521 --> 04:25:38.132
and I'm a developer on the 
Chrome team driving forward 

04:25:38.133 --> 04:25:40.133
immersive web standards.

04:25:41.426 --> 04:25:43.716
We feel like 2018 will mark the 
true kick-off point for what we 

04:25:43.717 --> 04:25:45.717
have called the immersive web.

04:25:48.787 --> 04:25:50.411
The technologies involved have 
bonito stabilize enough so we 

04:25:50.412 --> 04:25:52.647
can expose them to the web 
platform with can have deps 

04:25:55.708 --> 04:25:57.337
and the APIs we're discussing is
still under development, if you 

04:25:57.338 --> 04:26:02.442
start to learn how to use them  
now, they'll shift by the time 

04:26:02.443 --> 04:26:04.443
you're comfortable with them.

04:26:06.129 --> 04:26:08.602
What do we mean when we say the 
immersive web?  It is a 

04:26:08.603 --> 04:26:11.269
collection of new and upcoming 
tech that prepares the web for 

04:26:11.270 --> 04:26:13.270
the full 

04:26:15.980 --> 04:26:17.618
spectrum of immersive computing 
including Virtual Reality and 

04:26:17.619 --> 04:26:19.619
Augmented Reality.

04:26:22.085 --> 04:26:23.939
Generally we think of the 
immersive web anything that 

04:26:23.940 --> 04:26:27.020
gives depth, volume, scale or 
place.

04:26:29.481 --> 04:26:31.481
This is how we think of the 
technologies in general.

04:26:34.765 --> 04:26:36.765
Virtual Reality or VR can take 
you anywhere.

04:26:39.657 --> 04:26:43.181
Augmented Reality or AR can 
bring anything to you.  We'll 

04:26:43.182 --> 04:26:45.426
cover both in this talk.  First 
I'll cover how we're bringing VR

04:26:49.919 --> 04:26:51.962
to the web today and then John 
Pallett will show you the 

04:26:51.963 --> 04:26:54.003
upcoming efforts to do the same 
thing with AR.

04:26:56.232 --> 04:26:58.687
Let's start with Virtual 
Reality.  Chances are, you 

04:26:58.688 --> 04:27:00.688
already know about VR 

04:27:07.476 --> 04:27:08.091
headsets like the view, the vibe
or the Lenovo Mirage Solo 

04:27:08.092 --> 04:27:13.390
released last week.  They use 
head tracking, screens, optics 

04:27:13.391 --> 04:27:14.390
and controllers to make you feel
like you're present in a 

04:27:14.391 --> 04:27:16.434
different place when you use 
them.

04:27:20.111 --> 04:27:22.656
Last year at I/O we presented 
the web VR API as a way for web 

04:27:22.657 --> 04:27:24.657
developers to 

04:27:26.020 --> 04:27:28.250
communicate with the devices.  
Web VR was really well received,

04:27:28.251 --> 04:27:32.704
but it also had limitations that
became apparent as the VR 

04:27:32.705 --> 04:27:34.705
ecosystem grew.  Since then, we 
have been collaborating 

04:27:37.801 --> 04:27:39.426
with content developers, device 
manufacturers and other browser 

04:27:39.427 --> 04:27:41.427
vendors 

04:27:43.445 --> 04:27:45.937
to address those limitations.

04:27:51.062 --> 04:27:53.062
The result is the new web XR 
device 

04:27:54.962 --> 04:27:56.962
API, WebXR replaces VR evolving 
to meet 

04:27:58.442 --> 04:27:59.662
the needs of a growing immersive
ecosystem serving as the 

04:27:59.663 --> 04:28:01.663
foundation for 

04:28:03.526 --> 04:28:06.194
the immersive Web Ex posing not 
just VR but AR functionality as 

04:28:06.195 --> 04:28:10.866
well to web developers and also 
it goes beyond the headsets to 

04:28:10.867 --> 04:28:16.605
make it accessible to as many 
people as possible.  Of course, 

04:28:16.606 --> 04:28:19.062
we recognize that migrating 
existing code to a new API is a 

04:28:19.063 --> 04:28:22.754
bit of a pain.  We also think 
that the benefits will be well 

04:28:22.755 --> 04:28:24.788
worth the short-term 
inconvenience.

04:28:28.524 --> 04:28:29.523
The WebXR API was designed by 
listening to a lot of feedback 

04:28:29.524 --> 04:28:34.659
from developers of real world 
content just like you and 

04:28:34.660 --> 04:28:38.555
explicitly addresses many of the
issues they recorded.  

04:28:38.556 --> 04:28:40.990
Additionally, the new API 
provides the platform for AR 

04:28:40.991 --> 04:28:43.274
features and will be more 
forward compatible with the 

04:28:43.275 --> 04:28:45.275
wider range of devices.

04:28:47.581 --> 04:28:49.622
It is also cleaner, more 
consistent, more predictable and

04:28:49.623 --> 04:28:51.623
enables browsers to 

04:28:53.127 --> 04:28:55.127
apply more optimizations.

04:28:56.446 --> 04:28:59.135
What do I mean when I say 
optimizations?  I really like 

04:28:59.136 --> 04:29:01.136
this part!

04:29:02.755 --> 04:29:04.755
The design of

04:29:07.811 --> 04:29:09.811
the

04:29:13.978 --> 04:29:15.978
WebXR, as a result we're seeing 
on 

04:29:17.018 --> 04:29:19.453
Android we can default to 50% 
higher resolutions than VR 

04:29:19.454 --> 04:29:21.690
without impacting the 
application performance and all 

04:29:21.691 --> 04:29:25.594
of that means that we're pushing
twice as many Pixels to the 

04:29:25.595 --> 04:29:27.595
display versus the 

04:29:30.429 --> 04:29:32.429
same content

04:29:38.321 --> 04:29:40.321
in VR.

04:29:43.397 --> 04:29:47.696
When can you start using it?  
Today.  You can do so today in 

04:29:47.697 --> 04:29:51.150
Chrome 67 which is currently in 
beta.  There are two ways to get

04:29:51.151 --> 04:29:53.151
started.

04:29:56.299 --> 04:29:59.991
First, the WebXR is available as
an origin trial today.  Origin 

04:29:59.992 --> 04:30:02.632
trials are a way for Chrome to 
allow developers to deploy 

04:30:02.633 --> 04:30:04.871
features to users that aren't 
quite finalized yet by 

04:30:08.499 --> 04:30:10.499
embedding a token

04:30:12.243 --> 04:30:14.349
and in return, the developers 
will provide feedback so we can 

04:30:14.350 --> 04:30:16.350
improve it prior to shipping.  
If you're in the interested in 

04:30:19.035 --> 04:30:20.475
deploying the content today or 
just want to play around with 

04:30:20.476 --> 04:30:22.476
the API you can 

04:30:24.563 --> 04:30:26.207
enable it by Chrome's about flag
page to start testing f you 

04:30:26.208 --> 04:30:28.208
enable the API 

04:30:29.295 --> 04:30:31.295
through either of these methods 
you gain 

04:30:33.411 --> 04:30:35.411
access to a variety of different
ways of 

04:30:37.706 --> 04:30:40.539
viewing immersive content.
  First, WebXR in chrome 67 

04:30:40.540 --> 04:30:45.204
gives access to mobile VR 
devices on Android which enables

04:30:45.205 --> 04:30:47.856
users to slide the phone into a 
headset like the Daydream View 

04:30:47.857 --> 04:30:53.221
or card board and turn into a 
virtual reality headset.  Of 

04:30:53.222 --> 04:30:56.059
course, we recognize that there 
is a wide variety of mobile 

04:30:56.060 --> 04:31:00.156
devices and browsers out there 
which is why we're making 

04:31:00.157 --> 04:31:02.157
Cardboard compatibility 
available 

04:31:06.273 --> 04:31:07.180
for browsers like Mobile Safari 
via Java script polly fill and 

04:31:07.181 --> 04:31:09.181
there is 

04:31:12.217 --> 04:31:13.905
limitations and it allows a 
baseline functionality to all 

04:31:13.906 --> 04:31:15.906
users.

04:31:17.460 --> 04:31:19.460
Next, chrome 67 supports 
high-end 

04:31:22.370 --> 04:31:24.407
desktop VR headsets on windows 
and they present the highest VR 

04:31:24.408 --> 04:31:27.472
experiences available to 
consumers today and provides an 

04:31:27.473 --> 04:31:29.961
excellent opportunity for 
progressive enhancement of the 

04:31:29.962 --> 04:31:31.962
immersive 

04:31:33.445 --> 04:31:38.535
apps adding room scale movement 
and 6-degree of freedom input.  

04:31:38.536 --> 04:31:42.586
Finally, Chrome 67 supports what
we call magic window content.  

04:31:42.587 --> 04:31:44.587
Magic window refers to viewing 
the 

04:31:46.120 --> 04:31:48.795
scene on a 2D webpage and tracks
the device and motion.  It 

04:31:48.796 --> 04:31:50.874
provides a hint to the users 
that there is a larger world to 

04:31:50.875 --> 04:31:55.761
see and a way to consume a 
content even with a headset not 

04:31:55.762 --> 04:31:57.820
handy.
  So let's take a quick look at 

04:31:57.821 --> 04:31:59.821
how to 

04:32:00.879 --> 04:32:02.879
use this new API to create a 
simple 

04:32:04.611 --> 04:32:06.073
virtual reality application on 
the web.   We're going to assume

04:32:06.074 --> 04:32:08.074
that you 

04:32:10.550 --> 04:32:15.560
already have a scene you want 
viewable in virtual reality.  

04:32:15.561 --> 04:32:17.381
First we need to detect if there
is any WebXR devices available 

04:32:17.382 --> 04:32:23.570
and if so, we need to advertise 
that functionality to the user. 

04:32:23.571 --> 04:32:25.571
To do this, we'll start by 
calling the 

04:32:28.676 --> 04:32:31.343
navigating of XR request device 
function.  The return will go to

04:32:31.344 --> 04:32:33.813
a device which may represent a 
mobile device with VR 

04:32:36.897 --> 04:32:39.340
and AR capabilities, a wired 
headset, standalone headset or 

04:32:39.341 --> 04:32:43.825
some other immersive computing 
device.  Next we check to see if

04:32:43.826 --> 04:32:45.826
the device supports the mode we 
want to use.

04:32:48.538 --> 04:32:50.538
In this case, because we want 
the VR 

04:32:52.591 --> 04:32:54.512
content to display on the 
headset we ask if it supports 

04:32:54.513 --> 04:32:56.781
exclusive access by the page.  
If it discus, we add a button to

04:32:56.782 --> 04:32:58.782
the 

04:33:00.432 --> 04:33:03.067
page to advertise the feature 
and when the user clicks on that

04:33:03.068 --> 04:33:05.308
button we'll request what's 
called an XR session.

04:33:08.971 --> 04:33:11.626
The session is giving us access 
to the capabilities of the VR or

04:33:11.627 --> 04:33:13.627
AR device.

04:33:14.898 --> 04:33:16.898
You get a session by calling 
request session.

04:33:18.183 --> 04:33:20.870
You call that down on the XR 
device we retrieved specifying 

04:33:20.871 --> 04:33:25.191
you want exclusive access to the
display and when you have the 

04:33:25.192 --> 04:33:27.301
session, you need to create two 
supporting objects, a frame of 

04:33:30.183 --> 04:33:32.626
reference and a web layer.  The 
frame of reference tells us how 

04:33:32.627 --> 04:33:37.728
to position objects on the scene
relative to the user.  Here 

04:33:37.729 --> 04:33:39.981
we're asking for a stage frame 
of reference which attempts to 

04:33:39.982 --> 04:33:44.057
put the origin on the user's 
floor.  That way it is very 

04:33:44.058 --> 04:33:47.734
trivial to lineup the virtual 
floor with the user's physical 

04:33:47.735 --> 04:33:49.735
one.

04:33:52.843 --> 04:33:54.843
Next, we ask to create a layer 
which 

04:33:56.163 --> 04:33:58.848
gives us the surface to render 
the 3D scene on to.  You can 

04:33:58.849 --> 04:34:00.849
think of it as a canvas 

04:34:01.920 --> 04:34:03.769
element visible from within the 
headset.  Then when the setup is

04:34:03.770 --> 04:34:07.672
done, we'll kick-off Anair 
medication loop by calling 

04:34:07.673 --> 04:34:09.520
request animation frame on the 
session which is very similar to

04:34:09.521 --> 04:34:11.521
the window request animation 
frame you're 

04:34:15.666 --> 04:34:17.666
already familiar with.  With 
that, we're almost researched to

04:34:19.324 --> 04:34:21.369
begin rendering and first we 
need to understand the first 

04:34:21.370 --> 04:34:23.417
concept introduced by WebXR and 
that's views.

04:34:26.696 --> 04:34:29.152
The WebXR renders a loop and 
provides a list of views that 

04:34:29.153 --> 04:34:33.644
must be drawn with every frame 
to make sure that the scene will

04:34:33.645 --> 04:34:35.645
appear correctly on whatever 
device you're viewing it on.

04:34:36.326 --> 04:34:38.326
A view provides all of the 
values 

04:34:40.632 --> 04:34:42.632
needed to render a single image 
of a 

04:34:44.927 --> 04:34:46.962
WebXR scene such as matrixes and
view  ports.  Most headsets will

04:34:46.963 --> 04:34:48.963
require you to draw 

04:34:50.458 --> 04:34:52.458
two views, one for each and the 
magic 

04:34:53.713 --> 04:34:55.327
window scene will only require 
one view.  You can imagine in 

04:34:55.328 --> 04:34:59.841
the future you may have more 
exotic hardware requiring you to

04:34:59.842 --> 04:35:01.271
draw more views than that two 
account for different display 

04:35:01.272 --> 04:35:03.272
configurations.

04:35:04.324 --> 04:35:07.002
The benefit is that WebXR can 
use a unified rendering path for

04:35:07.003 --> 04:35:09.003
a huge 

04:35:10.708 --> 04:35:12.947
variety of different devices and
display modes and here is how 

04:35:12.948 --> 04:35:14.975
that looks in practice.  A 
request animation frame call 

04:35:14.976 --> 04:35:19.491
back is given an XR presentation
frame object which contains the 

04:35:19.492 --> 04:35:21.492
list of views that we need to 
render.

04:35:25.005 --> 04:35:26.433
It  allows -- it allows us to 
querry the pose of the device 

04:35:26.434 --> 04:35:28.434
which is position 

04:35:29.491 --> 04:35:31.491
and orientation in space.

04:35:33.405 --> 04:35:34.858
To display the scene on the 
headset we'll find the buffer 

04:35:34.859 --> 04:35:36.859
created by the 

04:35:38.520 --> 04:35:40.161
layer that we created previously
and then begin looping through 

04:35:40.162 --> 04:35:42.162
each of the 

04:35:44.055 --> 04:35:46.737
views provided by the frame 
drawing into the view port that 

04:35:46.738 --> 04:35:49.177
each of the views describes 
using the view and projection 

04:35:52.429 --> 04:35:54.688
metricses that they provide.  
When we put it altogether, we 

04:35:54.689 --> 04:35:59.416
can now provide an immersive 
virtual reality experience with 

04:35:59.417 --> 04:36:02.358
the web GL scene we had 
previously that works on mobile,

04:36:02.359 --> 04:36:04.359
desktop 

04:36:05.834 --> 04:36:07.834
and standalone VR devices.

04:36:09.736 --> 04:36:11.357
Of course, your users are not 
content to just look, they want 

04:36:11.358 --> 04:36:16.333
to interact with the immersive 
worlds you're creating.  We need

04:36:16.334 --> 04:36:18.584
a form of input.
  Now, WebXR took to heart a lot

04:36:18.585 --> 04:36:21.280
of the feedback we got about the
difficulties 

04:36:25.833 --> 04:36:28.065
handling input with the APIs and
it attempts to address them with

04:36:28.066 --> 04:36:31.940
a new system working across all 
of the WebXR various forms and 

04:36:31.941 --> 04:36:33.941
factors.

04:36:35.615 --> 04:36:37.659
The basic idea is this:  Any 
time you interact with a scene, 

04:36:37.660 --> 04:36:42.155
by tapping on a magic window, 
looking at an object, clicking a

04:36:42.156 --> 04:36:44.408
button on a Cardboard style 
headset or using a controller 

04:36:44.409 --> 04:36:49.717
point and click all of these 
interactions can be described by

04:36:49.718 --> 04:36:54.491
a ray, point of origin and 
direction into the scene.  By 

04:36:54.492 --> 04:36:56.510
using the rays, WebXR provides, 
you can trace into the scene, 

04:36:56.511 --> 04:37:01.205
determine what object the user 
wants to interact with, and 

04:37:01.206 --> 04:37:03.206
respond appropriately no matter 
what input method they're using.

04:37:05.070 --> 04:37:06.911
Let's see how that looks in 
code.

04:37:06.912 --> 04:37:08.912
Al first the user needs to know 
what they're pointing at.

04:37:12.419 --> 04:37:15.325
We'll visualize whatever input 
method they have by going 

04:37:15.326 --> 04:37:17.326
through and looking 

04:37:21.644 --> 04:37:22.518
at the list of input sources 
from the WebXR session and for 

04:37:22.519 --> 04:37:25.168
each input source we'll get the 
current pose which describes the

04:37:25.169 --> 04:37:27.421
direction that the input is 
pointing in and if it is 

04:37:27.422 --> 04:37:29.422
applicable the position and 
orientation of the 

04:37:33.345 --> 04:37:35.392
controller as well.
  Depending on the type of input

04:37:35.393 --> 04:37:37.393
source we're dealing with, we'll
render a 

04:37:40.767 --> 04:37:42.767
controller model, a Pointer ray,
and a 

04:37:43.833 --> 04:37:46.924
curser to show where the input 
is pointing.  Here you can see 

04:37:46.925 --> 04:37:49.790
an example of how an app may 
visualize the controller 

04:37:51.007 --> 04:37:53.266
rendering a reputation of the 
controller itself and a Pointer 

04:37:53.267 --> 04:37:55.520
ray and curser to help the user 
better target the input.

04:37:58.803 --> 04:38:01.028
If we used a gaze system like 
Cardboard we render only the 

04:38:01.029 --> 04:38:04.729
curster because it is 
distracting to have a  lacesser 

04:38:04.730 --> 04:38:06.730
coming from your forehead.

04:38:07.792 --> 04:38:09.792
-- a lazer coming from your 
forehead.

04:38:10.033 --> 04:38:12.466
Now the user can see where 
they're pointing, we have to 

04:38:12.467 --> 04:38:16.150
respond to what they're clicking
on and to do that, we look at 

04:38:16.151 --> 04:38:18.151
the selective.

04:38:19.639 --> 04:38:21.905
That fires and tells us which 
event was fired and we look at 

04:38:21.906 --> 04:38:25.233
the pose at the time of the 
event.   This gives us the 

04:38:25.234 --> 04:38:29.522
Pointer ray.  The application 
can then use the ray to perform 

04:38:29.523 --> 04:38:31.523
a hit test against the 

04:38:33.613 --> 04:38:35.613
internal representation of your 
sequence.

04:38:36.066 --> 04:38:38.103
If we detect that object was 
selected, we trigger the 

04:38:38.104 --> 04:38:43.432
appropriate behavior depending 
on the context of the app.   

04:38:43.433 --> 04:38:45.942
This allows us to provide users 
with a way to easily point and 

04:38:45.943 --> 04:38:50.014
click and interact with any 
object in the scene and have 

04:38:50.015 --> 04:38:51.674
that interaction be consistent 
across all of the various 

04:38:51.675 --> 04:38:53.675
devices that 

04:38:55.991 --> 04:38:58.643
they may be using.
  WebXR input system allows for 

04:38:58.644 --> 04:39:00.644
grabbing 

04:39:02.534 --> 04:39:04.784
and moving objects by looking at
the select start and end events.

04:39:08.453 --> 04:39:10.715
Cruciously, the selective event 
is selected to be a user 

04:39:10.716 --> 04:39:13.571
activation event which is not 
the case previously with 

04:39:16.641 --> 04:39:17.690
web  VR and an issue that we 
heard about from developers most

04:39:17.691 --> 04:39:19.691
frequently.  This means that 
applications can start 

04:39:21.988 --> 04:39:23.988
media play back with WebXR input
just 

04:39:25.306 --> 04:39:27.306
like they would a mouse or a 
touch screen.

04:39:28.172 --> 04:39:30.172
We now have an interactive VR 

04:39:32.471 --> 04:39:34.471
experience that's on the web and
that is awesome.

04:39:36.942 --> 04:39:39.206
Not every user has a headset, 
and even if they did, not every 

04:39:39.207 --> 04:39:41.207
user is using a 

04:39:42.540 --> 04:39:44.808
browser that supports WebXR yet.
We want your content to be 

04:39:44.809 --> 04:39:47.254
accessible by a billion plus 
users, that's why 

04:39:50.321 --> 04:39:52.321
we're expanding the immersive 
web reach 

04:39:54.855 --> 04:39:56.875
to 2 it D screens by a Magic 
Window and with our Java script 

04:39:56.876 --> 04:39:59.333
polly fill.
  Let's talk about Magic Window.

04:40:02.196 --> 04:40:03.219
As I mentioned, it is a mode 
that let's users view immersive 

04:40:03.220 --> 04:40:07.493
content on the phone without a 
VR headset tracking the 

04:40:07.494 --> 04:40:10.772
orientation of your device to 
let you look around.  It is like

04:40:10.773 --> 04:40:13.221
you're holding a portal to 
another world in your hand.

04:40:16.328 --> 04:40:18.328
We have put effort into making 
the 

04:40:20.053 --> 04:40:23.037
creation of Magic Window 
experiences as  frictionless as 

04:40:23.038 --> 04:40:25.038
possible.

04:40:27.155 --> 04:40:29.640
We'll rewind and look at the 
code from earlier.  This is 

04:40:29.641 --> 04:40:31.742
going to display content on the 
headset bit specifying it wants 

04:40:34.386 --> 04:40:36.386
exclusive access to the display.
With Magic Window, we want the 

04:40:38.867 --> 04:40:42.350
immersive content to show on the
page, not the headset.  To 

04:40:42.351 --> 04:40:44.351
accomplish this, we only need to
make a few changes.

04:40:48.069 --> 04:40:49.903
First, we create a canvas we 
want the Magic Window to display

04:40:49.904 --> 04:40:51.904
in, the content, which can be 
attached to anywhere you 

04:40:54.812 --> 04:40:56.812
want on the document and then 
you need 

04:40:58.704 --> 04:41:00.704
to look at an XR presentation 
from that canvas.

04:41:03.352 --> 04:41:05.854
This works just like getting web
GL contents.  That goes to the 

04:41:05.855 --> 04:41:09.104
session request as the output 
context.  This binds the 

04:41:09.105 --> 04:41:13.825
sessions rendered output to that
canvas.  We also notice that you

04:41:13.826 --> 04:41:17.080
have ate the exclusive argument 
from the request because the 

04:41:17.081 --> 04:41:19.081
output is not intended for 

04:41:20.348 --> 04:41:23.839
the headset.  Honestly, that's 
it.  Like everything else is the

04:41:23.840 --> 04:41:28.999
same.  The render loop we 
described earlier, you request 

04:41:29.000 --> 04:41:31.233
the single view, the input 
system now fires events that 

04:41:31.234 --> 04:41:33.234
correspond 

04:41:34.966 --> 04:41:36.625
to the screen taps rather than 
the controller and everything 

04:41:36.626 --> 04:41:38.856
else workses.  Even better, it 
is easy to use Magic 

04:41:41.931 --> 04:41:43.931
Window and VR on a single page 
so users 

04:41:45.821 --> 04:41:48.287
can transition frictionlessly at
a touch of a button.

04:41:50.773 --> 04:41:52.773
Let's talk about the WebXR polly
fill 

04:41:54.649 --> 04:41:57.097
for browsers that do not support
WebXR, it provides an 

04:41:57.098 --> 04:42:00.772
implementation of this in one of
two ways.  First it offers a 

04:42:00.773 --> 04:42:03.206
Java script only implementation 
working in any mobile 

04:42:06.464 --> 04:42:08.920
browser with orientation events,
even Mobile Safari.  Secondly, 

04:42:08.921 --> 04:42:10.921
if a browser implements the 

04:42:13.415 --> 04:42:15.270
older web VR API, the pollyfill 
can immolate on top of that 

04:42:15.271 --> 04:42:17.271
taking advantage 

04:42:18.749 --> 04:42:22.058
of the native hardware features 
that web VR exposes.  This means

04:42:22.059 --> 04:42:24.317
that you can instantly make your
new WebXR content accessible to 

04:42:24.318 --> 04:42:26.766
a much wider range of users 
simply by 

04:42:30.440 --> 04:42:32.664
adding one script to your page.
  WebXR isn't the only way we're

04:42:35.369 --> 04:42:36.834
bringing the immersive -- 
grinning immersive computing and

04:42:36.835 --> 04:42:41.726
the web together.  With the 
Chrome 67 beta, you can launch a

04:42:41.727 --> 04:42:45.681
VR optimized version of Chrome 
right from daydream home.  We 

04:42:45.682 --> 04:42:47.682
have put a lot of work in making

04:42:49.791 --> 04:42:51.750
the browser -- into making 
browsing the traditional web a 

04:42:51.751 --> 04:42:53.751
great experience in VR and it 
also really shines as a way to 

04:42:55.844 --> 04:42:57.844
browse immersive web content.

04:42:59.114 --> 04:43:01.376
The ability to hop from 2 it D 
web to VR content and back at a 

04:43:01.377 --> 04:43:03.391
push of a button, it makes 
discovering new VR 

04:43:07.067 --> 04:43:09.067
content online really easy, 
fluid and 

04:43:11.246 --> 04:43:13.246
honestly just a little bit 
magical.

04:43:17.771 --> 04:43:20.647
Chrome is fully immersing the 
immersive web through VR 

04:43:20.648 --> 04:43:23.940
browsing and web apps, what 
about Augmented Reality?  To 

04:43:23.941 --> 04:43:26.203
talk about that, I'll hand it 
over to John Pallett.

04:43:32.736 --> 04:43:35.429
  &gt;&gt; JOHN PALLETT: Thank you.  
I'm John Pallett.  I'm a product

04:43:35.430 --> 04:43:37.430
manager on the Chrome team.

04:43:39.130 --> 04:43:41.571
I'm going to talk to you about 
Augmented Reality.  For those of

04:43:41.572 --> 04:43:44.238
you that don't know what 
Augmented Reality is, if you 

04:43:44.239 --> 04:43:46.239
have tried 

04:43:47.777 --> 04:43:49.777
out AR stickers in photos or 
used 

04:43:51.067 --> 04:43:51.937
Pokemon go or snap shat filters,
you have used the Augmented 

04:43:51.938 --> 04:43:54.575
Reality.  Unlike VR where you're
completely 

04:43:59.487 --> 04:44:02.157
immersed in a virtual world, AR 
overlays in the real world.  If 

04:44:02.158 --> 04:44:04.158
you have used these experiences,
you have tried AR.

04:44:05.606 --> 04:44:08.041
What's great about Augmented 
Reality is that there is over 

04:44:08.042 --> 04:44:10.042
100 million phones 

04:44:11.111 --> 04:44:13.067
and tablets already available 
that support Augmented Reality 

04:44:13.068 --> 04:44:15.135
and that number is growing 
rapidly and generally 

04:44:18.421 --> 04:44:20.253
speaking those devices already 
have web  browsers.  That means 

04:44:20.254 --> 04:44:22.941
that Augmented Reality can be a 
real convenience for users.

04:44:27.562 --> 04:44:29.900
They can walk around, experience
Augmented Reality and they don't

04:44:29.901 --> 04:44:32.737
need a new app every time.   It 
is great for developers, if you 

04:44:34.514 --> 04:44:36.514
want to have an experience, you 
throw up 

04:44:38.148 --> 04:44:38.763
the URL and a user jumps right 
into it, do the experience, they

04:44:38.764 --> 04:44:41.451
leave.  The web will make 
Augmented Reality 

04:44:44.921 --> 04:44:45.320
super convenient and accessible 
for everyone.

04:44:45.321 --> 04:44:49.421
That's great.  The web is a 
great fit for AR.  How many of 

04:44:49.422 --> 04:44:51.691
you are web developers in the 
audience.

04:44:54.760 --> 04:44:57.249
How many of you have a website? 
I hope that's the same number 

04:44:57.250 --> 04:45:01.169
since you're web developers.  
The flip side of this, great, 

04:45:01.170 --> 04:45:05.430
web helps A, are but does AR 
help you, a web developer.  

04:45:05.431 --> 04:45:07.431
There are a lot of ways that 
Augmented 

04:45:10.066 --> 04:45:11.893
Reality can help you enhance 
your site and I'm not going to 

04:45:11.894 --> 04:45:15.355
talk about it in anymore, I'll 
show you what I mean.  I'll give

04:45:15.356 --> 04:45:17.356
you a preview of what's 

04:45:18.650 --> 04:45:20.746
coming soon to Chrome Canary.  
Can we switch to the device, 

04:45:20.747 --> 04:45:23.400
please?

04:45:27.050 --> 04:45:29.050
In this demo -- it is working.

04:45:30.602 --> 04:45:32.837
In this demo, it is somewhat of 
a true story.  In this demo my 

04:45:32.838 --> 04:45:34.838
daughter and I are 

04:45:38.332 --> 04:45:40.332
researching in Mexico city a 
temple and 

04:45:41.413 --> 04:45:43.682
it is -- it was a center of 
Aztek worship built in the 14th 

04:45:43.683 --> 04:45:45.683
century.

04:45:47.136 --> 04:45:49.994
The temple was built for the God
of agriculture and the God of 

04:45:49.995 --> 04:45:51.995
war.

04:45:53.330 --> 04:45:55.330
What we're learning about here, 
these 

04:45:57.806 --> 04:46:00.444
statues, they're used to make 
offerings to the God of rain, so

04:46:00.445 --> 04:46:04.730
we're learning about that here 
and if we go down on this page 

04:46:04.731 --> 04:46:07.165
what I can  do, I can jump into 
Augmented Reality mode to learn 

04:46:07.772 --> 04:46:09.772
more.   It is learning about the
scene.

04:46:14.650 --> 04:46:16.523
What I can do, I can place the 
statue right in the stage in 

04:46:16.524 --> 04:46:20.846
front of me.  This really let's 
me get in and get a sense of the

04:46:20.847 --> 04:46:23.679
real world sense of scale.  In 
reality, it is 45 inches long 

04:46:23.680 --> 04:46:25.680
and 

04:46:27.346 --> 04:46:31.010
36 inches high.   We see it is a
life-sized representation of a 

04:46:31.011 --> 04:46:33.011
human being.   You notice on the
website and through 

04:46:36.104 --> 04:46:38.104
others that we saw a lot has 
this 90º head orientation.

04:46:40.794 --> 04:46:42.794
If I go into here we can learn 
that 

04:46:43.857 --> 04:46:46.115
that 90º head orientation is 
fairly common but so is the 

04:46:46.116 --> 04:46:48.756
pose.
  This -- you see this is 

04:46:48.757 --> 04:46:53.441
reKlining on the back with the 
knees, and the arms bent.  

04:46:53.442 --> 04:46:55.442
That's traditionally in art 
forms of 

04:46:57.502 --> 04:46:58.928
this kind a symbol of humility, 
submissiveness of being a 

04:46:58.929 --> 04:47:04.051
prisoner.  In this, it is 
humility to the day, there is a 

04:47:04.052 --> 04:47:06.096
bowl for making the offerings 
here and what's interesting, I 

04:47:06.097 --> 04:47:08.097
can see a 

04:47:09.839 --> 04:47:11.839
little bit on the arms and legs 

04:47:13.328 --> 04:47:15.328
representing  iconography.  It 
is interesting.

04:47:20.266 --> 04:47:22.266
If you have this and it is 
celebrating 

04:47:24.342 --> 04:47:26.841
the rain God, it is normal to 
see symbols of water, frogs, 

04:47:26.842 --> 04:47:30.707
things like that.  I don't see a
lot here.   Something 

04:47:30.708 --> 04:47:32.708
interesting on the cheek.

04:47:34.159 --> 04:47:36.837
There is not a ton of that 
iconography here.  It is 

04:47:36.838 --> 04:47:39.712
interesting to wonder how do 
they know that this statue what 

04:47:39.713 --> 04:47:43.816
is associated with this?  If we 
go to the feet, what we learn, 

04:47:46.074 --> 04:47:48.074
is that the feet are red and 
they have a 

04:47:49.532 --> 04:47:50.981
hint of blue in the sandals and 
this  coloring actually helped 

04:47:50.982 --> 04:47:53.221
researchers connect -- let's get
a better view of the blue.

04:47:56.322 --> 04:47:58.554
You see it is tucked in on the 
corner.  So this actually gave 

04:47:58.555 --> 04:48:00.555
researchers the 

04:48:01.840 --> 04:48:04.095
clue that they needed to connect
this particular one, the first 

04:48:04.096 --> 04:48:07.554
full color bowl that was ever 
discovered with original paint 

04:48:07.555 --> 04:48:09.555
back to other pieces of artwork 
from the same period which 

04:48:12.668 --> 04:48:14.668
talked about the rain God.

04:48:17.134 --> 04:48:19.134
This was 3D scanned in 2016 in 

04:48:20.185 --> 04:48:22.235
collaboration with the temple 
museum, the data is available to

04:48:22.236 --> 04:48:25.289
anyone, you can download it, use
it for educational purposes 

04:48:25.290 --> 04:48:27.328
through the open heritage 
project on Google arts and 

04:48:27.329 --> 04:48:31.911
culture.  I want to stress, this
is not available to all Chrome 

04:48:31.912 --> 04:48:36.218
users today.   These APIs for 
this, they're in development.  

04:48:36.219 --> 04:48:38.219
What we want to do is show you 
how to 

04:48:39.682 --> 04:48:41.682
use them and get feedback before
they're filmed up.

04:48:43.176 --> 04:48:45.176
Let's go back to the -- before 
they're firmed up.

04:48:47.035 --> 04:48:49.035
Let's go back to the slides 
please.

04:48:51.738 --> 04:48:54.200
  You saw the ability to take an

04:48:58.558 --> 04:49:00.558
existing 2D webpage and add 
Augmented Reality to it.

04:49:02.857 --> 04:49:04.497
This is a big possibility, you 
can take amazing new experiences

04:49:04.498 --> 04:49:08.803
and add them to the existing 
website and there is a lot of 

04:49:08.804 --> 04:49:11.270
different websites today that 
can get value for users by 

04:49:11.271 --> 04:49:16.807
allowing you to place virtual 
objects in the real world.  A 

04:49:16.808 --> 04:49:19.252
few examples:  One of them is 
shopping.  In this case, we're 

04:49:19.253 --> 04:49:22.721
looking at a furniture website 
and it would let me place 

04:49:22.722 --> 04:49:25.822
furniture elements in the real 
world.  My family recently 

04:49:25.823 --> 04:49:29.754
bought a new couch.  We ended up
cutting and measuring pieces of 

04:49:29.755 --> 04:49:31.585
paper and placing them on the 
floor to make sure that the 

04:49:31.586 --> 04:49:34.426
couch would fit.  I can tell you
from personal experience, this 

04:49:34.427 --> 04:49:37.519
would have been a lot easier.
  As you saw, another great use 

04:49:37.520 --> 04:49:41.594
case, education.  Anybody can 
drop an object in the real world

04:49:41.595 --> 04:49:43.595
and look at it.

04:49:46.113 --> 04:49:47.762
It is great for statues, you can
get a better sense of what's 

04:49:47.763 --> 04:49:51.250
going on and as we explored that
statue, I hope you saw it, you 

04:49:51.251 --> 04:49:52.876
can get a lot more information 
and learn more than you can from

04:49:52.877 --> 04:49:55.913
just a static image.
  There are a lot of other 

04:49:55.914 --> 04:49:57.914
opportunities 

04:49:59.366 --> 04:50:01.832
as well such as avatars, games, 
AR stickers and more.  In a 

04:50:01.833 --> 04:50:04.259
mobile context there are tools 
we can provide right now to you 

04:50:04.260 --> 04:50:08.560
that would make your webpages 
more delightful and increase 

04:50:08.561 --> 04:50:12.639
their value to users.  This is 
coming quickly and it will make 

04:50:12.640 --> 04:50:14.640
the mobile device a hand-held 

04:50:15.704 --> 04:50:17.338
window in a new reality.
  Let's talk about how these 

04:50:17.339 --> 04:50:21.430
APIs are taking shape.   They're
being developed in the WC3 

04:50:23.051 --> 04:50:25.134
immersive web community group.  
Its a cooperative forthwith a 

04:50:25.135 --> 04:50:27.135
number 

04:50:30.175 --> 04:50:32.175
of companies,

04:50:34.875 --> 04:50:36.875
and web developers.

04:50:39.319 --> 04:50:43.389
  There are also more bleeding 
edge APIs being worked on within

04:50:43.390 --> 04:50:47.077
that community group.  Some are 
more baked than  others.  I'll 

04:50:47.078 --> 04:50:49.923
spend most of my time talking 
about the top two, AR sessions 

04:50:49.924 --> 04:50:54.405
and hit tests that are the two 
building Blocks of the demo I 

04:50:54.406 --> 04:50:56.406
showed you earlier.

04:50:58.259 --> 04:51:00.259
You notice that hit tests are in
the 

04:51:02.568 --> 04:51:04.385
experiment stage and that means 
it is more than discussion but 

04:51:04.386 --> 04:51:06.833
not quite ready for origin 
trials and practically 

04:51:10.918 --> 04:51:13.350
speaking, the demo from earlier,
it will work in Chrome Canary in

04:51:13.351 --> 04:51:16.833
the next week or two.  When you 
go home, watch it on YouTube, it

04:51:16.834 --> 04:51:18.952
should be ready to try.  When 
you do that, you want to enable 

04:51:21.392 --> 04:51:23.392
the two flights we saw here, the
devices 

04:51:24.858 --> 04:51:26.858
and flags and the WebXR hit test
flag.  This is great.

04:51:28.758 --> 04:51:30.573
It means that an early version 
of Augmented Reality is coming 

04:51:30.574 --> 04:51:32.574
quickly to Chrome Canary and 
I'll tell you how you 

04:51:35.446 --> 04:51:38.091
can get started using it.
  Good news, because it is based

04:51:38.092 --> 04:51:40.092
on the 

04:51:41.541 --> 04:51:44.002
WebXR API a lot of the code that
Brandon already covered around 

04:51:44.003 --> 04:51:46.003
VR applies here as well.

04:51:47.096 --> 04:51:49.170
What that means, things like 
capturing  devices or 

04:51:49.171 --> 04:51:51.171
orientation and position, it is 
the exact same.

04:51:53.435 --> 04:51:55.076
Switching from VR code to AR 
code, it is mostly doing the 

04:51:55.077 --> 04:51:58.043
same thing.  What I largely will
focus on here is the 

04:51:58.044 --> 04:52:00.149
differences.
  The first thing to point out, 

04:52:00.150 --> 04:52:03.808
AR sessions are still in the 
proposal stage, we're still 

04:52:03.809 --> 04:52:05.809
having conversations about the 
best way to do this.

04:52:08.487 --> 04:52:09.903
What that means, we enable the 
flights in Chrome Canary, you 

04:52:09.904 --> 04:52:14.019
have a temporary way of  
enabling the AR mode.  You may 

04:52:14.020 --> 04:52:15.450
recognize pieces of this code 
because it is similar to what 

04:52:15.451 --> 04:52:17.451
Brandon 

04:52:18.506 --> 04:52:20.355
showed earlier when creating a 
magic window session when it is 

04:52:20.356 --> 04:52:23.410
not an exclusive session.  If 
you enable the AR flights in 

04:52:23.411 --> 04:52:26.475
Chrome Canary we're going to 
make the assumption that you 

04:52:26.476 --> 04:52:28.476
always want AR.

04:52:29.532 --> 04:52:31.157
What that means, that the camera
will be rendered behind the 

04:52:31.158 --> 04:52:33.158
zoomty and kept 

04:52:35.509 --> 04:52:37.131
in sync with the device pose.  
In addition, the community group

04:52:37.132 --> 04:52:42.241
is discussing how we'll extend 
and allow the declaration of an 

04:52:42.242 --> 04:52:46.324
AR session, it is likely that 
the properties will be part of 

04:52:46.325 --> 04:52:48.147
request session, it is not 
finalized yet so just for now, 

04:52:48.148 --> 04:52:50.604
if you're trying this out, you 
enable the flags in Chrome 

04:52:52.418 --> 04:52:54.677
Canary know it will go in AR 
mode automatically as long as 

04:52:54.678 --> 04:52:56.678
you create 

04:52:58.362 --> 04:53:00.362
magic window and will keep 
everything synchronized.

04:53:00.820 --> 04:53:02.647
Another difference from 
Brandon's example is the frame 

04:53:02.648 --> 04:53:08.141
of reference.  In VR you were 
using Stage, a I lining with the

04:53:08.142 --> 04:53:10.167
floor, here you will use eye 
level.  What it mean, the first 

04:53:10.168 --> 04:53:13.854
recorded position and forward 
orientation of the device 

04:53:13.855 --> 04:53:15.855
becomes the origin.

04:53:17.109 --> 04:53:19.109
Every other motion is relative 
after that.

04:53:21.993 --> 04:53:23.617
The Y axis is aligned with 
gravity and when you use eye 

04:53:23.618 --> 04:53:25.618
level it starts where the phone 
is and then everything else is 

04:53:26.302 --> 04:53:27.925
relative after that.
  It is important to use that 

04:53:27.926 --> 04:53:32.838
when you try out AR mode.
  Let's talk about the real 

04:53:32.839 --> 04:53:36.495
building Block that allowed the 
demo to happen, the hit test 

04:53:36.496 --> 04:53:38.938
API.  It is a foundation of the 
demo I just showed you.

04:53:41.988 --> 04:53:43.988
What it let's you do, you cast a
ray 

04:53:45.027 --> 04:53:48.704
in the real world and detect 
real world geometry and shapes. 

04:53:48.705 --> 04:53:51.058
If I were standing here, I can 
cast that and it will tell me 

04:53:51.059 --> 04:53:53.059
there is a 

04:53:55.557 --> 04:53:57.791
podium there and I don't think 
it goes all the way to the edge 

04:53:57.792 --> 04:54:00.438
at this point.  to demonstrate 
how we use the hit test 

04:54:04.325 --> 04:54:06.325
API, think about a reticle, what
it is, 

04:54:07.522 --> 04:54:08.752
it is an indicator drawn on a 
real world surface.  In our 

04:54:08.753 --> 04:54:10.784
example, this was useful because
it allowed the user to figure 

04:54:11.924 --> 04:54:16.444
out where they wanted to place 
the object in the AR scene.  

04:54:16.445 --> 04:54:18.282
What you're doing when drawing 
this, you continually do hit 

04:54:18.283 --> 04:54:20.735
tests in the real world and use 
the results to place 

04:54:25.040 --> 04:54:26.665
geometry in the scene so it 
appears as if it is on top of a 

04:54:26.666 --> 04:54:31.771
real world object.  Before I 
show code with this, I want to 

04:54:31.772 --> 04:54:33.772
say we're using three.

04:54:34.825 --> 04:54:36.825
js, a helper library for 3D 
graphics on 

04:54:40.169 --> 04:54:41.621
the web and it takes care a lot 
of the code and some of the code

04:54:41.622 --> 04:54:43.622
is specific to that, if you're 
interested in learning 

04:54:46.540 --> 04:54:48.540
more, go to three JS.org.

04:54:51.013 --> 04:54:53.013
What we'll do here, we'll create
a 

04:54:54.078 --> 04:54:56.932
mesh, geometry for the reticle. 
So the circle you saw on the 

04:54:56.933 --> 04:55:02.026
slide and the box before, it is 
3D geometry with texture on it, 

04:55:02.027 --> 04:55:04.585
it doesn't matter what geometry 
you will use, I won't go in 

04:55:05.615 --> 04:55:07.615
details and neither does the 
permission in the scene.

04:55:09.064 --> 04:55:10.940
You create it, add it to the 
scene and we'll update the 

04:55:10.941 --> 04:55:12.941
position on the fly as 

04:55:14.629 --> 04:55:16.629
we get back our results.

04:55:17.714 --> 04:55:20.153
Everything we do next, it will 
be a part of the request 

04:55:20.154 --> 04:55:22.154
animation frame loop.  This is 
basically the same as you saw 

04:55:25.264 --> 04:55:27.494
in VR and it is brokered through
the WebXR session.   You request

04:55:27.495 --> 04:55:29.495
the frame and execute on it and 
at the end you request another 

04:55:32.839 --> 04:55:34.839
frame and you continue to do it 
that way.

04:55:35.498 --> 04:55:37.498
Now a key part of this example, 
it is 

04:55:38.957 --> 04:55:41.625
that we'll use our three.js 
camera and one is for rendering,

04:55:43.863 --> 04:55:46.716
we'll update it with a view and 
projection matrix from the 

04:55:46.717 --> 04:55:51.008
device posed.   This ensures 
that the camera is aligned with 

04:55:51.009 --> 04:55:53.009
our augmented reality device 
pose and is using the correct 

04:55:53.487 --> 04:55:56.762
frame of reference.  Important 
for rendering.  We'll use it for

04:55:56.763 --> 04:55:58.763
something else as well.

04:56:01.024 --> 04:56:02.702
In every frame, we want 
something to place our rectangle

04:56:02.703 --> 04:56:06.357
on, as I mentioned earlier, the 
hit test will allow you to cast 

04:56:06.358 --> 04:56:07.781
a ray in the real world and get 
back to the section points with 

04:56:07.782 --> 04:56:12.631
real world objects.  To do that,
we kind of need a ray in the 

04:56:12.632 --> 04:56:14.067
right coordinated system with 
the right frame of reference and

04:56:14.068 --> 04:56:18.381
the great news is that three.js 
creates that, we take the 

04:56:18.382 --> 04:56:23.075
camera, generate a ray from it. 
What we'll do, we'll use the 00 

04:56:23.076 --> 04:56:26.248
in accordance to the system 
here, it is in the center of the

04:56:26.249 --> 04:56:30.562
screen, if you try to cast a ray
based on a user tap, you would 

04:56:30.563 --> 04:56:32.996
use anything from negative one 
to positive one.  In this case, 

04:56:32.997 --> 04:56:34.997
we'll stick with 00, that's 
where the ray center of the 

04:56:35.544 --> 04:56:39.625
screen will go.   Then we'll 
pass that in to the camera and 

04:56:39.626 --> 04:56:44.556
get back a ray.  
  The next thing we'll do is use

04:56:44.557 --> 04:56:48.826
our XR session to request a hit 
test.  This is the new API that 

04:56:48.827 --> 04:56:52.980
is available when you turn on 
the flag and this is the one 

04:56:52.981 --> 04:56:55.600
that's going to be coming to 
Chrome Canary in a couple of 

04:56:55.601 --> 04:56:57.601
weeks.  When we do the hit test 
what it 

04:57:00.522 --> 04:57:01.724
accepts is the origin and the 
direction of the ray.  You can 

04:57:01.725 --> 04:57:05.207
see above, we extract that from 
the ray that we generated.  It 

04:57:05.208 --> 04:57:08.070
also accepts the overall frame 
of reference as a parameter.

04:57:11.533 --> 04:57:13.589
What we get back, it is a list 
of hits.  They're ordered in 

04:57:13.590 --> 04:57:16.434
terms of how close they are to 
the cameras.  The first hit, it 

04:57:16.435 --> 04:57:21.176
is the nearest one to the camera
and they're sorted by distance. 

04:57:21.177 --> 04:57:23.177
We want our rectangle to be on 
the 

04:57:24.185 --> 04:57:26.185
first

04:57:30.746 --> 04:57:32.746
-- we want the

04:57:34.097 --> 04:57:36.143
reticle to show and at this 
point it is positioning itself 

04:57:36.144 --> 04:57:40.769
in real world objects within the
request animation frame as you 

04:57:40.770 --> 04:57:42.770
move the device around.

04:57:45.905 --> 04:57:47.947
Let's talk about placing objects
in AR.  There is a slight 

04:57:47.948 --> 04:57:50.180
difference to consider.  When we
get back the hit test, what we 

04:57:51.811 --> 04:57:53.811
get back, it is the position of 
the hit 

04:57:55.308 --> 04:57:58.365
and the normal of the surface 
that the ray detected.  We 

04:57:58.366 --> 04:58:01.024
didn't dissect that because we 
wanted reticle to appear like it

04:58:01.025 --> 04:58:03.025
is in 

04:58:04.107 --> 04:58:06.107
the surface and you want to 
specify your 

04:58:07.389 --> 04:58:09.389
own orientation, especially 
which way is 

04:58:10.558 --> 04:58:15.031
up and instead of using the real
world object that was detected. 

04:58:15.032 --> 04:58:18.027
This is fairly straightforward 
and we'll decompose the method 

04:58:18.028 --> 04:58:21.078
which will detract the position 
and the scale from the 4 by 4 

04:58:21.079 --> 04:58:24.376
method.   Now that these are 
extracted, you change the 

04:58:24.377 --> 04:58:26.673
orientation of the object to be 
whap whatever you want by 

04:58:26.674 --> 04:58:29.325
generating a new matrix or 
setting rotation on the object 

04:58:29.326 --> 04:58:33.433
directly.  The key point, there 
are situations where you'll want

04:58:33.434 --> 04:58:37.764
to decompose the hit test result
and use pieces of it.  In this 

04:58:37.765 --> 04:58:40.228
case, for object the placement 
but for other cases, you 

04:58:40.229 --> 04:58:42.229
generate the understanding of 
the real world in the 

04:58:44.300 --> 04:58:47.161
code, you get a lot of useful 
information from the hit test 

04:58:47.162 --> 04:58:49.650
results.
  The last thing I want to 

04:58:49.651 --> 04:58:53.156
cover, an API that's only in 
discussion at this point.  this 

04:58:53.157 --> 04:58:54.990
is not coming in Chrome Canary 
but is really important to 

04:58:54.991 --> 04:59:00.388
augmented reality and I want to 
cover it so that you have an 

04:59:00.389 --> 04:59:02.640
introduction to it right now.  
This is a core concept to 

04:59:02.641 --> 04:59:07.549
augmented reality which is why 
we'll cover it here.  The 

04:59:07.550 --> 04:59:09.550
concept is anchors.

04:59:11.159 --> 04:59:12.388
Anchors allow the augmented 
reality system to keep virtual 

04:59:12.389 --> 04:59:14.389
positions and 

04:59:15.667 --> 04:59:18.512
orientations, poses, always 
correct and up-to-date as a 

04:59:18.513 --> 04:59:22.211
system learns over time.  What 
do I mean by that?  What I mean,

04:59:22.212 --> 04:59:26.101
you think about the augmented 
reality system, it doesn't have 

04:59:26.102 --> 04:59:30.112
perfect information.  Everything
it is getting is from the camera

04:59:30.113 --> 04:59:31.440
and from sensors and so forth 
and it is learning about the 

04:59:31.441 --> 04:59:36.189
real world.  As I move the 
camera around, it is more 

04:59:36.190 --> 04:59:38.190
information, it is improving the
understanding of the world.

04:59:39.507 --> 04:59:41.734
What that means, sometimes it 
was wrong previously and it 

04:59:41.735 --> 04:59:44.179
learns that later on.  That's 
where anchors come in.

04:59:47.863 --> 04:59:49.324
It allows the underlying 
augmented system to keep track 

04:59:49.325 --> 04:59:54.536
of poses you care about and 
improve their accuracy later.  

04:59:54.537 --> 04:59:56.659
To give you an example, suppose 
that the augmented reality 

04:59:56.660 --> 05:00:00.196
system thought my camera was 
here when I did the hit test and

05:00:00.197 --> 05:00:03.446
later it realized that the 
camera was over here.  What it 

05:00:03.447 --> 05:00:05.447
could do with that knowledge, 

05:00:06.720 --> 05:00:08.768
ifty anchored the object it was 
adjust the location after the 

05:00:08.769 --> 05:00:10.769
fact, when it realized the 
mistake.

05:00:13.649 --> 05:00:15.470
Anchors are useful in a lot of 
places.  For example, when real 

05:00:15.471 --> 05:00:17.471
world objects start to move.

05:00:19.945 --> 05:00:21.791
As you can imagine, the idea of 
anchors is useful and one that 

05:00:21.792 --> 05:00:24.270
is deep enough that it continues
to go in conversation.

05:00:27.362 --> 05:00:29.362
It is not ready for you to try 
right now.

05:00:31.638 --> 05:00:33.467
How to do this as a web API is a
topic of conversation, how to do

05:00:33.468 --> 05:00:37.661
it properly.  Even with the hit 
test, it is all that you saw, 

05:00:37.662 --> 05:00:39.908
the session was created, a hit 
test API, there's a lot of 

05:00:39.909 --> 05:00:43.367
opportunities for you to look at
how you may enhance your 

05:00:43.368 --> 05:00:45.596
existing web pages.  The hit 
test I showed you, it can let 

05:00:47.428 --> 05:00:49.428
you do pretty much everything on
the 

05:00:50.725 --> 05:00:52.725
screen now, shopping, education,
more.

05:00:52.766 --> 05:00:55.224
Really, all I showed you, it was
placing one virtual object in 

05:00:55.225 --> 05:00:58.533
the real world.  There's a lot 
of information you can get from 

05:00:58.534 --> 05:01:02.004
a hit test and a lot of things 
you can do with it.  Frankly, 

05:01:02.005 --> 05:01:03.850
we're all really excited to see 
what you come up with and ideas 

05:01:03.851 --> 05:01:05.851
that 

05:01:07.722 --> 05:01:10.379
you have for ways to make your 
website better.  This brings me 

05:01:10.380 --> 05:01:15.502
to another point.  there are 
over 100 million devices that do

05:01:15.503 --> 05:01:19.196
AR today and not everyone does. 
So what do you do in that case? 

05:01:19.197 --> 05:01:21.429
I mentioned earlier there is a 
lot of code similarity between 

05:01:21.430 --> 05:01:25.106
AR and VR.  This is really 
important if what you want to do

05:01:25.107 --> 05:01:28.570
is create a new  AR experience 
and then also make it available 

05:01:28.571 --> 05:01:32.687
in VR for  users that are not 
using a device.  For example, a 

05:01:32.688 --> 05:01:34.688
desktop that doesn't have a 
camera and they're not picking 

05:01:34.689 --> 05:01:38.025
it up and moving it around the 
room.  What you may want to do, 

05:01:38.026 --> 05:01:41.897
have the exact same code driving
a VR experience on desktop with 

05:01:41.898 --> 05:01:46.179
a Magic Window.  In that case, 
you have to adjust your user 

05:01:46.180 --> 05:01:47.606
experience and your user 
interface, so instead of walking

05:01:47.607 --> 05:01:50.312
around with the desktop you get 
them to zoom in and zoom 

05:01:53.982 --> 05:01:56.446
out, but if you think about the 
demo, you still explore the 

05:01:56.447 --> 05:01:59.522
statue and learn from it.  That 
ability to do progressive fall 

05:02:01.743 --> 05:02:04.193
back is super important on the 
web and we're really excited 

05:02:04.194 --> 05:02:06.194
that Web Ex allows 

05:02:08.067 --> 05:02:09.693
us to do that without having to 
rewrite the same experience 

05:02:09.694 --> 05:02:12.749
twice.
  To recap, we have talked about

05:02:12.750 --> 05:02:17.052
the WebXR device API for VR 
sessions that are available for 

05:02:17.053 --> 05:02:19.282
origin trials today and  AR 
sessions which are still in 

05:02:19.487 --> 05:02:21.487
discussion.

05:02:23.170 --> 05:02:25.216
We also  previewed some 
Augmented Reality APIs which you

05:02:25.217 --> 05:02:27.671
can try in Chrome Canary, 
actually one augmented reality 

05:02:29.309 --> 05:02:32.103
Chrome Canary which you can try 
in a few weeks.  As I mentioned,

05:02:32.104 --> 05:02:34.104
the conversation is ongoing for 
sessions and anchors.

05:02:37.721 --> 05:02:39.585
If you're interested in tracking
that conversation, this is the 

05:02:39.586 --> 05:02:44.469
slide you should take a photo 
of.  We would like you to learn 

05:02:44.470 --> 05:02:48.134
about this, what we really want 
is your feedback.  We would like

05:02:48.135 --> 05:02:52.448
you to try it out and let us 
know what you think.  If you try

05:02:52.449 --> 05:02:53.661
the API and you want to suggest 
changes, this is where you 

05:02:53.662 --> 05:02:57.580
should go.  If you want to 
trackhoe things are progressing,

05:02:57.581 --> 05:02:59.581
this is where you should go.

05:03:01.470 --> 05:03:03.718
Please do visit the community 
and file issues if you have 

05:03:03.719 --> 05:03:05.743
questions or file issues if you 
find things you think should be 

05:03:05.744 --> 05:03:07.792
different.
  Overall though, we're very 

05:03:07.793 --> 05:03:09.793
excited to 

05:03:11.455 --> 05:03:13.455
see what you create with this 
both for 

05:03:16.921 --> 05:03:18.921
VR as well as for Augmented 
Reality

05:03:22.441 --> 05:03:23.958
.  
  &gt;&gt; BRANDON JONES: A last thing

05:03:23.959 --> 05:03:28.860
to mention, a lot of the 3D 
media you saw on the slides 

05:03:28.861 --> 05:03:30.861
today was taken from 

05:03:31.928 --> 05:03:33.947
polly, an excellent depository 
created by tools like blocks and

05:03:33.948 --> 05:03:35.948
tilt brush all 

05:03:37.604 --> 05:03:39.604
available under the creative 
license and 

05:03:42.444 --> 05:03:44.444
credits, and you can check it 
out at poly.google.com.

05:03:44.789 --> 05:03:46.010
&gt;&gt; If you want to start with 
development, there are links on 

05:03:46.011 --> 05:03:48.657
the screen where you can see how
the community group is 

05:03:48.658 --> 05:03:51.371
progressing as well as seeing 
code samples and the app spot 

05:03:52.784 --> 05:03:55.732
link there is the demonstration 
that I showed you earlier.  It 

05:03:55.733 --> 05:03:57.548
will not work today if you pull 
out the phone and go to Chrome 

05:03:57.549 --> 05:03:59.549
Canary and turn it on, it won't 
work.

05:04:00.638 --> 05:04:02.917
Give us a couple of weeks.  
Please do try it out and let us 

05:04:02.918 --> 05:04:05.983
know what you think.
  &gt;&gt; If you have more questions 

05:04:05.984 --> 05:04:08.027
for us, we'll be available in 
the VR -- excuse 

05:04:14.072 --> 05:04:15.444
me, the web sandbox which is 
over on that end and thank you 

05:04:15.445 --> 05:04:19.296
so much for joining us today and
please enjoy the rest of Google 

05:04:19.297 --> 05:04:21.297
I/O.  

06:12:21.002 --> 06:12:23.002
Connection test.

06:14:28.966 --> 06:14:30.966
(Standing by

06:14:50.244 --> 06:14:52.244
for session to begin at two 
thirty p.m.

06:14:59.022 --> 06:15:01.022
2:30

06:15:05.995 --> 06:15:07.995
.)    

06:20:30.525 --> 06:20:33.387
.    

06:20:36.998 --> 06:20:38.998
"Realtime KANGS

06:20:50.204 --> 06:20:52.204
Realtime captioning on this 
screen.

06:22:31.646 --> 06:22:33.646
Realtime captioning on this 
screen.

06:23:35.526 --> 06:23:37.526
Cube

06:23:45.379 --> 06:23:47.379
Kubernetes
.

06:25:10.792 --> 06:25:15.057
&gt;&gt;  How is everybody doing?  
Wow.  You guys are very 

06:25:15.058 --> 06:25:17.058
enthusiastic.  Fantastic.

06:25:20.809 --> 06:25:22.663
May time in is Terry Ryan and I 
a developer advocate for Google 

06:25:22.664 --> 06:25:27.984
Cloud Platform.  My mission 
today is to kind of walk people 

06:25:27.985 --> 06:25:29.603
through what is a typical 
journey through taking an App 

06:25:29.604 --> 06:25:31.644
that you have had somewhere else
and bringing it to Google cloud.

06:25:34.910 --> 06:25:37.976
And my focus is on virtual 
machine technology.  So a 

06:25:37.977 --> 06:25:40.833
pattern we see from a lot of 
people is when they first come 

06:25:40.834 --> 06:25:44.929
to GCP they want do what they've
done elsewhere but on us.  How 

06:25:44.930 --> 06:25:49.423
do you do that?  How do you get 
started? That's my goal today.  

06:25:49.424 --> 06:25:51.424
So, if that's what you signed up
for, great.

06:25:53.734 --> 06:25:55.734
If not, well hopefully you'll 
stay.  

06:25:56.997 --> 06:25:58.686
So before I get started, it's 
really important for me to know 

06:25:58.687 --> 06:26:01.756
who everybody in the audience 
is.  I'll probably do this with 

06:26:01.757 --> 06:26:03.757
a show of hands.

06:26:05.636 --> 06:26:10.587
Who here is a developer all the 
time?  Okay.  Web developers?  

06:26:10.588 --> 06:26:15.889
Mobile developers?  Back end 
developers?  How many people 

06:26:15.890 --> 06:26:17.922
here do systems work?  I see 
some overlap with the 

06:26:17.923 --> 06:26:21.578
developers.  Is it because you 
love dev-ops or because your 

06:26:21.579 --> 06:26:24.863
company won't hire more people? 
Which is it?  Okay.  Anybody 

06:26:24.864 --> 06:26:26.864
else?

06:26:29.135 --> 06:26:33.262
Are there designers or UX 
people, UI people?  Fantastic.  

06:26:33.263 --> 06:26:35.716
Any managers in the room?  So 
there's a lot more of us than 

06:26:35.717 --> 06:26:40.389
there are of you.  One, manager 
jokes fly.  And two I hear you 

06:26:40.390 --> 06:26:42.617
systems people could use more 
people.  Just I hear that from 

06:26:42.618 --> 06:26:46.106
the crowd.  
All right.  So I know what jokes

06:26:46.107 --> 06:26:51.487
I can make.  I know who you guys
are.  What are our goals?  Our 

06:26:51.488 --> 06:26:54.336
goals to take someone from a 
journey I've got an App and I 

06:26:54.337 --> 06:26:59.238
want to get it to Google 
platform.  My secondary goal is 

06:26:59.239 --> 06:27:01.239
to point out a 

06:27:03.265 --> 06:27:05.265
whole lot of things about GCP.

06:27:06.969 --> 06:27:08.839
But I'm going fall way short on 
that.  Hopefully I'll point you 

06:27:08.840 --> 06:27:12.100
in directions where if you like 
it you can start learning more 

06:27:12.101 --> 06:27:14.101
and go that way, but just 

06:27:15.788 --> 06:27:17.788
be aware that this is not super 
comprehensive. 

06:27:20.528 --> 06:27:23.812
So you have an App, you have it 
running some place.  We usually 

06:27:23.813 --> 06:27:26.269
do what we call lift and shift. 
Where we pick something up and 

06:27:26.270 --> 06:27:29.343
just plot it on our cloud 
instead of running it on your 

06:27:29.344 --> 06:27:33.623
own data centers.  So I want to 
show an App here.  So I'm going 

06:27:33.624 --> 06:27:35.624
to switch over to my laptop.

06:27:37.500 --> 06:27:39.746
This is a super, super simple 
App called tagger that I wrote 

06:27:39.747 --> 06:27:41.747
just to kind 

06:27:42.824 --> 06:27:45.054
of -- it's minimum viable 
product.  It's just to show what

06:27:45.055 --> 06:27:48.134
I am trying to do off here.  You
see a have a bunch of tags and a

06:27:51.432 --> 06:27:53.262
bunch of kids because, you know,
you can always get points from 

06:27:53.263 --> 06:27:55.933
the audience for showing cute 
kids.  I'm going go ahead and 

06:27:55.934 --> 06:27:58.770
just show you this is a real 
thing.  It's running locally on 

06:27:58.771 --> 06:28:01.021
my laptop but it could also be 
running, you know, in a 

06:28:05.747 --> 06:28:08.408
data center somewhere in my on 
PREM center.  I'll hit gladiator

06:28:08.409 --> 06:28:11.497
and hit open.  Nothing up my 
sleeve.  I've got a real App 

06:28:11.498 --> 06:28:14.362
running.  I'll upload and there 
we are.  App is working. 

06:28:16.190 --> 06:28:18.190
Now I'm going switch back and 
talk about 

06:28:21.237 --> 06:28:23.237
the architecture in slides

06:28:24.806 --> 06:28:26.634
.  So very, very basic, simple 
App.  Again, written to 

06:28:26.635 --> 06:28:31.307
illustrate this stuff.  I've got
one single box which may or may 

06:28:31.308 --> 06:28:33.947
not be the way you want to run 
your stuff.  If you are, it's 

06:28:33.948 --> 06:28:37.006
okay.  And if you are not, 
please don't judge me too 

06:28:37.007 --> 06:28:40.508
harshly.  I have a single server
here.  And it's running the 

06:28:40.509 --> 06:28:43.955
application code.  It's running 
the file system.  And it's 

06:28:43.956 --> 06:28:48.225
running the images.  All of that
is on one space.  I want to move

06:28:48.226 --> 06:28:50.226
this to make it cloudy.  So our 
eventual destination with this 

06:28:51.696 --> 06:28:56.189
will look like this.  Where my 
database is in the cloud and my 

06:28:56.190 --> 06:29:00.450
files are in the cloud, but my 
App still sits on a VM.  Which 

06:29:00.451 --> 06:29:02.494
also is in the cloud but, you 
know, it's still virtual machine

06:29:02.495 --> 06:29:04.495
I'm not 

06:29:06.152 --> 06:29:08.152
trying to get you to move to 
Kubernetes 

06:29:09.841 --> 06:29:12.130
or con server list or anything 
like that.  Well I'll talk about

06:29:12.131 --> 06:29:15.450
those topics but we're not going
to move to them in this App. 

06:29:15.451 --> 06:29:20.546
We talk about virtual machines 
on Google Cloud Platform.  They 

06:29:20.547 --> 06:29:24.038
are we call it compute engine.  
We have several engines.  

06:29:24.039 --> 06:29:25.856
Compute engine is our virtual 
machine.  It has some properties

06:29:25.857 --> 06:29:29.326
and things I'm going to talk 
about.  You can dial in how many

06:29:29.327 --> 06:29:33.839
processes you need from 1-96.  
Then you have a range of MENLry 

06:29:33.840 --> 06:29:36.092
based on that from point 6-624 
gigs.

06:29:39.982 --> 06:29:42.417
You have digs you can install 64
terabytes of persistent disk.

06:29:45.730 --> 06:29:48.207
Three terabytes of SSD and you 
can go up to 208 gigs of ram 

06:29:48.208 --> 06:29:50.208
desk with the memory on your 
system. 

06:29:51.456 --> 06:29:52.701
We have images that go with 
these machines already that have

06:29:52.702 --> 06:29:57.384
operating systems set up.  But 
you can configure your own.  I'm

06:29:57.385 --> 06:30:00.436
going shove that off in the 
interface.  I'm going to switch 

06:30:00.437 --> 06:30:02.437
to do another demo.

06:30:04.527 --> 06:30:07.976
And you should -- ut-oh.  It was
working two seconds ago.  No, 

06:30:07.977 --> 06:30:11.868
all right.  It's working.  All 
right.

06:30:15.984 --> 06:30:17.984
So I am going to go ahead and 
create a 

06:30:20.700 --> 06:30:22.700
new entrance I want to run my 
stuff on.

06:30:23.750 --> 06:30:25.833
I want to hit create instance.  
When I do that I can give it a 

06:30:25.834 --> 06:30:31.148
name and I can put it in a data 
center.  So why don't we do US 

06:30:31.149 --> 06:30:34.450
west because that's where we 
are.  But note we can go all 

06:30:34.451 --> 06:30:38.712
over Asia and Europe and South 
America and Australia.  But I'll

06:30:38.713 --> 06:30:41.357
stick to being close to her.  
When I go to set up my machine, 

06:30:41.358 --> 06:30:43.389
there is a whole bunch of set 
types of machine.

06:30:48.269 --> 06:30:50.269
Like sixty core and 32 core.

06:30:51.919 --> 06:30:54.377
But one of the cool things us 
can dial in.  If you have a use 

06:30:54.378 --> 06:30:56.456
case where you only need 44 
processors to do the work you 

06:30:58.690 --> 06:31:01.143
need to do, with other kind of 
choices you have to go either 32

06:31:01.144 --> 06:31:05.616
and be under inspect or go 64 
and waste all that money on 

06:31:05.617 --> 06:31:08.319
processors you don't need.  With
us you can dial NP exactly to 

06:31:09.130 --> 06:31:10.822
what you want and see exactly on
the right what the impact of 

06:31:10.823 --> 06:31:12.823
those choices are.  Right?

06:31:15.107 --> 06:31:17.107
I got a little warning, at some 
-- there we go.

06:31:20.833 --> 06:31:22.463
That came up -- I hit didn't it 
hit right.  Basically a warning 

06:31:22.464 --> 06:31:25.351
that says you could probably get
a better price if you configure 

06:31:25.352 --> 06:31:27.352
it this way.  Which is kind of 
cool. 

06:31:28.844 --> 06:31:30.328
I'm going stick with our set 
images because I don't want to 

06:31:30.329 --> 06:31:35.238
pay that much.  Then I'll go to 
the boot disks.  With boot disk 

06:31:35.239 --> 06:31:39.553
I have a whole bunch of choices 
of different operating system.  

06:31:39.554 --> 06:31:41.802
Container OS and red hat and 
Windows even.  Yes you can do 

06:31:41.803 --> 06:31:44.268
Windows on Google Cloud 
Platform.  But I'm going to go 

06:31:44.269 --> 06:31:46.308
ahead and keep with the 
defaults.  I'm going to hit 

06:31:46.309 --> 06:31:50.602
select.  You notice I have 
another couple options.  I can 

06:31:50.603 --> 06:31:53.477
activate each GTP.  I can open 
up the fire wall.  Not going to 

06:31:53.478 --> 06:31:55.478
do it this time around.  But one
of the favorite things about 

06:31:56.340 --> 06:31:59.015
this interface is down at the 
bottom there's this equivalent 

06:31:59.016 --> 06:32:01.016
rest or command line link.

06:32:03.097 --> 06:32:04.916
So after I configure this whole 
thing I click on this and get 

06:32:04.917 --> 06:32:07.200
this box that says here's 
exactly how to do this on the 

06:32:07.201 --> 06:32:09.853
command like.  Then I can 
configure it once in the 

06:32:11.697 --> 06:32:13.697
interface, and then take this 
and 

06:32:14.759 --> 06:32:16.200
automate it and use build 
scripts and I don't have to 

06:32:16.201 --> 06:32:18.227
write these things from scratch.
Which is really helpful. 

06:32:19.474 --> 06:32:22.315
Why don't we create this.  We 
like to say these spin up in 

06:32:22.316 --> 06:32:26.375
tens of seconds.  Meaning when 
I'm in a hotel room practicing 

06:32:26.376 --> 06:32:29.872
this because I'm doing it at I/O
it takes ten seconds.  When I am

06:32:29.873 --> 06:32:31.873
in front of people it takes 
longer.

06:32:33.325 --> 06:32:36.184
I don't know how it knows but 
somehow it knows.  All right.  

06:32:36.185 --> 06:32:40.543
Good.  You don't register.  So 
I'm happy.  It doesn't know you 

06:32:40.544 --> 06:32:45.449
are here.  So I'm going to hit 
SSH.  When I do instead of 

06:32:45.450 --> 06:32:50.545
having to pull down Certs to 
connect to this VM I can do it 

06:32:50.546 --> 06:32:52.995
right through the interface, 
right through the web.  Which I 

06:32:52.996 --> 06:32:54.637
love because I can travel 
without my laptop as long as I 

06:32:54.638 --> 06:32:56.638
can get 

06:32:58.314 --> 06:33:00.314
to a browser I can take care and
manage my stuff.

06:33:04.886 --> 06:33:07.762
First time you have SH in a box 
it takes a little time.  At this

06:33:07.763 --> 06:33:10.029
point and I wouldn't worry about
the text here too much but I 

06:33:10.030 --> 06:33:14.166
will blow it up a little bit.  
At this point I would go through

06:33:14.167 --> 06:33:16.593
an App and get update right.

06:33:21.339 --> 06:33:23.786
Then it will fail because I 
should have SA dueed it.

06:33:27.220 --> 06:33:28.712
I will do App get update then 
start rolling through and 

06:33:28.713 --> 06:33:30.713
installing software.

06:33:32.984 --> 06:33:34.418
I feel like that would strain 
our relationship as an audience 

06:33:34.419 --> 06:33:36.419
and speaker 

06:33:38.325 --> 06:33:40.581
if I were just sit here an 
install lamp.  If I sat there 

06:33:40.582 --> 06:33:42.205
and installed all those things 
over and over again I feel like 

06:33:42.206 --> 06:33:44.206
I would lose you.

06:33:46.070 --> 06:33:47.089
So I have a solution for what 
which is I have already done 

06:33:47.090 --> 06:33:49.345
that on another machine.  I've 
then taken that machine and 

06:33:50.967 --> 06:33:53.436
created what we call a disk 
image from it.  I said you could

06:33:53.437 --> 06:33:55.696
use ours but you could also use 
your own.  

06:33:57.548 --> 06:33:59.789
So I'm going to create a second 
instance.  I'm going to open up 

06:33:59.790 --> 06:34:02.053
the firewall.  Open up the HTTP 
port.

06:34:05.955 --> 06:34:07.955
When I go to select images, 
instead of 

06:34:09.421 --> 06:34:12.116
using OS images I am going to 
use custom images.  We'll see 

06:34:12.117 --> 06:34:15.182
that I have one called tagger 
latest which I already built.  

06:34:15.183 --> 06:34:17.183
I'll hit select.

06:34:18.675 --> 06:34:20.675
And now when this App comes up, 
it 

06:34:21.738 --> 06:34:25.671
will be running completely the 
whole software stack.  None of 

06:34:25.672 --> 06:34:27.716
my software is on there, but all
the supporting software I need 

06:34:27.717 --> 06:34:31.644
is there.  Hopefully in a second
this will come up.  Hopefully it

06:34:31.645 --> 06:34:34.504
has not identified that you are 
here.  And when it comes up you 

06:34:34.505 --> 06:34:39.227
will notice that I have these 
external IP addresses here.  And

06:34:39.228 --> 06:34:43.100
some of them are linked and some
aren't.  The one I just created 

06:34:43.101 --> 06:34:45.101
wasn't linked 

06:34:47.215 --> 06:34:49.687
because it didn't open up HTTP. 
But on this one when I click on 

06:34:49.688 --> 06:34:54.972
it should go right to the 
default page.  I've installed.  

06:34:54.973 --> 06:34:57.442
I have software running.  It's 
all set and ready to go. 

06:34:59.285 --> 06:35:01.285
One last thing I want to show 
you before 

06:35:02.751 --> 06:35:04.782
I switch back to presenting is 
up here in the upper right I've 

06:35:04.783 --> 06:35:07.628
got this little command prompt. 
Another one of my favorite 

06:35:07.629 --> 06:35:12.727
features.  Instead of having to 
inSaul all the SDK and all the 

06:35:12.728 --> 06:35:14.770
stuff it takes to manage Google 
cloud on my laptop I can use 

06:35:14.961 --> 06:35:18.623
cloud shell.  It spins up a VM 
under the covers that I don't 

06:35:18.624 --> 06:35:21.261
get charged for.  It's got a 
home directory so I can use it 

06:35:21.262 --> 06:35:23.262
over and over again.  I can save
scripts there.

06:35:26.832 --> 06:35:28.483
But now I have a one-way or I 
have access to this without 

06:35:28.484 --> 06:35:32.187
having to install all the stuff 
on my computer.  So really 

06:35:32.188 --> 06:35:34.839
helpful.  Really, really great 
for trying stuff out.  

06:35:36.719 --> 06:35:38.719
So, with that, I'm going to 
switch back 

06:35:39.803 --> 06:35:42.671
to presenting.  And talk through
a little bit of what I did here.

06:35:45.140 --> 06:35:47.172
So, if you want to start doing 
this, you know, programatically 

06:35:47.173 --> 06:35:51.669
and repeatedly and put it into 
your build cycles, you can do 

06:35:51.670 --> 06:35:53.670
all of what I did here with G 
cloud commands.

06:35:56.160 --> 06:35:58.594
This one is G cloud compute 
instances create.  Then I would 

06:35:58.595 --> 06:36:01.053
probably want to run commands on
those boxes.  So I can do that.

06:36:05.364 --> 06:36:06.995
G cloud compute SSH virtual 
machine name and the command I 

06:36:06.996 --> 06:36:09.849
want to run remotely.  Then 
finally I have files that I want

06:36:11.310 --> 06:36:13.310
to get on to those VMs.

06:36:15.367 --> 06:36:17.214
I can do that with G cloud 
compute SCP.  Between these 

06:36:17.215 --> 06:36:19.913
three I can completely automate 
the creation and configuration 

06:36:23.787 --> 06:36:25.787
of a machine repeatbly.  I do a 
lot of this.

06:36:27.646 --> 06:36:29.071
I do a lot of scripting because 
I don't want to do it by hands 

06:36:29.072 --> 06:36:31.739
because I make mistakes. 
We talked about virtual machines

06:36:31.740 --> 06:36:33.740
and disk images.

06:36:35.899 --> 06:36:37.551
You can start with ours like I 
did.  Put all the software on 

06:36:37.552 --> 06:36:41.024
it, make a disk then save it as 
an image.  But you can also make

06:36:41.025 --> 06:36:44.900
them from scratch.  Use virtual 
box to make images from scratch 

06:36:44.901 --> 06:36:46.983
and upload them to us.  
Networking I talked about a 

06:36:46.984 --> 06:36:50.478
little bit about that you get 
external IPs.  One of the things

06:36:50.479 --> 06:36:53.347
I didn't talk about is that any 
-- you can always get an IP 

06:36:55.578 --> 06:36:58.296
address and it will always be EE
term RAL.  Meaning if the 

06:36:58.297 --> 06:37:00.997
machine goes down when it comes 
back up it will get another IP 

06:37:01.209 --> 06:37:05.928
address.  But any of those 
addresses you can grab and say 

06:37:05.929 --> 06:37:08.368
make static and keep.  So, if 
you start fooling around with a 

06:37:12.043 --> 06:37:13.902
box and set it to ephemeral and 
you are worried you can grab it 

06:37:13.903 --> 06:37:17.002
and hold on to it.  We don't 
charge you for those.  The only 

06:37:17.003 --> 06:37:18.415
time we charge you and this is 
something that members of my 

06:37:18.416 --> 06:37:23.509
team just learned.  We only 
charge you if you don't use it. 

06:37:23.510 --> 06:37:25.966
If you have an IP address and 
it's in use statically we don't 

06:37:25.967 --> 06:37:29.222
charge for I.  It's when you 
#35SHG on it we have a nominal 

06:37:29.223 --> 06:37:33.324
charge.  A couple cents.  Just 
to disincentivize you from 

06:37:35.355 --> 06:37:38.009
holding on to IP addresses for a
long time.  Or a lot of IP 

06:37:38.010 --> 06:37:43.118
addresses for a long time. 
Showed off the fire wall.  I 

06:37:43.119 --> 06:37:45.119
just did the HTTP rule.

06:37:46.424 --> 06:37:48.424
But you can create arbitrary 
rules.

06:37:49.502 --> 06:37:51.543
They get this tag that gets 
applyed to your machine and that

06:37:51.544 --> 06:37:54.401
is what will determine whether 
or not your firewall is open on 

06:37:54.402 --> 06:37:57.249
the machine.  One thing I didn't
show off is something called 

06:37:57.250 --> 06:37:59.250
cloud launcher.

06:38:01.588 --> 06:38:02.813
Our cloud our V MZ, UR images 
start at the software layer like

06:38:02.814 --> 06:38:04.814
the OS layer.

06:38:05.874 --> 06:38:07.494
But if you want like Cassandra 
or word press or droople or 

06:38:07.495 --> 06:38:10.375
something like that on your 
machine, you can use one of 

06:38:13.031 --> 06:38:14.863
these and sort of shortcut 
having to do the whole build.  

06:38:14.864 --> 06:38:18.346
Now it's important to know that 
we don't manage it once you 

06:38:18.347 --> 06:38:21.428
build it.  We just help you 
build it.  

06:38:23.275 --> 06:38:25.563
I'm going on take a slight 
detour and I talked about the 

06:38:25.564 --> 06:38:27.564
cloud shell for a second.  
That's really important.

06:38:29.651 --> 06:38:31.651
It's a little VM and you have a 
home directory that follows you.

06:38:33.919 --> 06:38:35.761
You shove scripts in there that 
you use and it will be there the

06:38:35.762 --> 06:38:40.082
next time.  It basically means 
while I love having my laptop I 

06:38:40.083 --> 06:38:42.155
never actually have to have it 
somewhere when I might need to 

06:38:42.156 --> 06:38:45.825
log in to Google Cloud Platform.
We're back from that little 

06:38:45.826 --> 06:38:49.782
diversion.  So now let's talk 
about storage.  Because that's 

06:38:49.783 --> 06:38:52.190
the crux of what this App does. 
It stores files and stores data.

06:38:54.301 --> 06:38:57.961
I'm going start with the files 
part of it, the images.  So for 

06:38:57.962 --> 06:39:00.656
images we call that blob data.  
Because I don't know that sounds

06:39:00.657 --> 06:39:05.780
gross I guess.  Cloud storage is
the tool for that.  So it's for 

06:39:05.781 --> 06:39:07.781
files, for videos, for 

06:39:09.458 --> 06:39:12.332
pictures, for unstructured 
documents.  Now there are four 

06:39:12.333 --> 06:39:14.333
types and I'll talk about them 
but they all have the same 

06:39:14.404 --> 06:39:18.521
interface.  The metaphors you 
have seen with other cloud 

06:39:18.522 --> 06:39:22.471
providers the idea of a bucket 
and objects in that bucket.  

06:39:22.472 --> 06:39:24.515
That's what cloud file store -- 
that's how cloud storage works. 

06:39:24.516 --> 06:39:26.516
So we have the four types.

06:39:28.368 --> 06:39:30.368
We've got multi-regional, 
regional, nearline and coldline.

06:39:31.638 --> 06:39:33.471
They all have different use 
cases and different costs 

06:39:33.472 --> 06:39:36.742
associated with it.  Long story 
short, multi-regional is for 

06:39:36.743 --> 06:39:40.850
global data.  For you pushing 
the data as close to the people 

06:39:40.851 --> 06:39:42.884
that are going to be using it.  
So it's for people outside your 

06:39:43.102 --> 06:39:47.402
company.  For web presence, Webb
Apps, mobile Apps, streaming 

06:39:47.403 --> 06:39:49.403
video.

06:39:50.464 --> 06:39:52.500
Regional in contrast is you want
to keep the data close to where 

06:39:52.501 --> 06:39:56.213
it's being used just like in 
global but for this it's being 

06:39:56.214 --> 06:39:58.915
used for internal purposes.  
It's for running data jobs and 

06:39:58.916 --> 06:40:02.398
doing big data analysis on large
data sets.  You want that data 

06:40:02.399 --> 06:40:06.053
near the computers that are 
going to be doing that but don't

06:40:06.054 --> 06:40:07.888
necessarily have to be near the 
public. 

06:40:07.889 --> 06:40:09.516
Another thing to note here is 
just because it's regional 

06:40:09.517 --> 06:40:14.004
doesn't mean it's only access 
TIBL from the region it's in.  

06:40:14.005 --> 06:40:16.687
It just means it is fastest in 
that region.  You can still pull

06:40:16.688 --> 06:40:19.811
this data from other places 
around the world.  So you are 

06:40:19.812 --> 06:40:21.812
not restricted where you can use
this data from. 

06:40:24.128 --> 06:40:26.777
Nearline and coldline are long 
term options.  In case of 

06:40:26.778 --> 06:40:29.461
nearline it's for backups and 
long tail media.  Stuff that's 

06:40:29.462 --> 06:40:32.739
going to be used regularly but 
infrequently.  And for coldline 

06:40:32.740 --> 06:40:36.243
it's things like compliance and 
disaster recovery.  So, if you 

06:40:36.244 --> 06:40:38.680
are pulling down data from 
coldline, you are probably also 

06:40:38.681 --> 06:40:46.084
loading your resume in an editor
just in case right.  So that's 

06:40:46.085 --> 06:40:48.085
the distinction we use for 
these. 

06:40:48.551 --> 06:40:50.584
As we go to the right the price 
goes down because it's less 

06:40:50.585 --> 06:40:52.585
accessible and less easy to get 
to.

06:40:54.473 --> 06:40:56.997
The time to first byte for 
global or multi-regional versus 

06:40:56.998 --> 06:40:58.998
coldline, coldline 

06:41:00.284 --> 06:41:03.135
is slower time to first bite.  
So accordingly the costs go 

06:41:03.136 --> 06:41:06.808
down.  But for nearline and 
coldline, when you retrieve the 

06:41:06.809 --> 06:41:08.809
data you get charged for it.

06:41:11.715 --> 06:41:14.769
And, in this case, it's one 
gigabyte per -- I'm sorry.  All 

06:41:14.770 --> 06:41:18.453
those prices were gigabyte per 
month.  This is per gigabyte.  

06:41:18.454 --> 06:41:20.809
When you pull down data out of 
nearline it's going to cost you 

06:41:20.810 --> 06:41:23.337
a cent per gigabyte.  Out of 
coldline it's going to cost you 

06:41:25.434 --> 06:41:27.737
five cents per gigabyte.  The 
idea here is we want to 

06:41:27.738 --> 06:41:31.613
encourage you like to store 
stuff and hope you never need to

06:41:31.614 --> 06:41:35.291
use it.  And that's why the 
pricing is set up that way to 

06:41:35.292 --> 06:41:37.994
enKUBLG that sort of use. 
I'm going to do a quick demo of 

06:41:37.995 --> 06:41:42.928
cloud storage.  So I'm going to 
switch back to my laptop.  I'm 

06:41:42.929 --> 06:41:45.375
going show how easy it is to set
one of these up.  Like I said 

06:41:45.376 --> 06:41:47.376
it's a bucket.  So I'm going to 
create a bucket.

06:41:50.323 --> 06:41:52.560
I'm going call it tagger 102.  
Because the names have to be 

06:41:52.561 --> 06:41:56.660
unique.  I am going to go ahead 
and create it.  It's 

06:41:56.661 --> 06:41:58.661
multi-regional.

06:41:59.774 --> 06:42:01.411
I'm creating a multi-regional 
bucket.  I'm going to upload the

06:42:01.412 --> 06:42:05.311
files.  I'm going take my files 
from here that I already had.  

06:42:05.312 --> 06:42:07.312
I'm going to upload them.

06:42:09.604 --> 06:42:11.604
And see how our network is 
doing.

06:42:12.828 --> 06:42:14.828
Okay

06:42:16.152 --> 06:42:18.206
.  WiFi network is -- there we 
go.  All right.  

06:42:20.253 --> 06:42:22.253
So you will see I have a bunch 
of images now loaded in.

06:42:23.928 --> 06:42:25.588
Now I can't get to any of these 
-- I mean, Google cloud can see 

06:42:25.589 --> 06:42:28.692
these and share them along 
Google Apps but the public can't

06:42:28.693 --> 06:42:32.614
see them.  The way I enable them
to the public is I can click 

06:42:32.615 --> 06:42:36.480
this little thing here and say, 
I don't know, share pubically.  

06:42:36.481 --> 06:42:39.151
When I do that I get a public 
link.  So even though I just 

06:42:39.152 --> 06:42:42.085
uploaded it it's now globally 
available and able to pull down.

06:42:44.324 --> 06:42:46.760
If I were to URL hack and change
it to one of the other images 

06:42:46.761 --> 06:42:48.761
was that kid in 

06:42:50.862 --> 06:42:53.775
the Ewok costume I hit Ewok JPEG
and it's not there.  So you can 

06:42:53.776 --> 06:42:56.869
be gradualar with what you share
and don't share.  I'm going 

06:42:56.870 --> 06:42:59.325
switch back to presenting.  Wait
I'm not going to switch back.

06:43:02.780 --> 06:43:05.248
It will switch back on this.  
And let's talk about about what 

06:43:05.249 --> 06:43:07.249
I did.  I wanted to upload 
files.

06:43:11.803 --> 06:43:14.674
You can do that with the GS util
command.  I don't want to 

06:43:14.675 --> 06:43:16.675
manually put all my files 
through a web interface.

06:43:18.950 --> 06:43:20.950
I can share pubically using GS 
util.  You can do them per file.

06:43:22.611 --> 06:43:26.089
You can also do them per bucket.
That's how I tend to do it.  I 

06:43:26.090 --> 06:43:27.946
share the bucket then I try not 
to have shared and non-shared 

06:43:27.947 --> 06:43:31.414
stuff in the same.  Even though 
you can.  Just saying for me I 

06:43:31.415 --> 06:43:34.506
don't want to accidentally share
something.  So I usually try to 

06:43:34.507 --> 06:43:37.579
make that distinction at the 
bucket level.  

06:43:42.072 --> 06:43:44.612
Now my App was writing to file 
storage on the server.  I now 

06:43:44.613 --> 06:43:47.884
need it to write to the cloud 
storage.  So for that I want to 

06:43:47.885 --> 06:43:49.885
use our client libraries.

06:43:50.982 --> 06:43:53.227
You will see there's a whole 
list of languages available.  If

06:43:53.228 --> 06:43:55.228
your favorite language is not 
here, one, I apologize.

06:43:58.729 --> 06:44:00.352
Two, we have a rest API and it's
pretty well documented so you 

06:44:00.353 --> 06:44:04.030
can sort of do this stuff 
without needing the client 

06:44:04.031 --> 06:44:06.031
library.

06:44:08.568 --> 06:44:10.826
But this App is PHP so I don't 
have a problem.  Please don't 

06:44:10.827 --> 06:44:14.697
judge me for PHP.  I figured it 
was very readable.  Move 

06:44:14.698 --> 06:44:18.390
uploaded file.  Source 
destination.  Something has been

06:44:18.391 --> 06:44:22.943
uploaded to the server and we 
move it to a file location.  To 

06:44:22.944 --> 06:44:24.171
do the same thing but point it 
to cloud storage I have to pull 

06:44:24.172 --> 06:44:28.673
in the storage library then 
create a storage client and 

06:44:28.674 --> 06:44:31.407
bucket and upload to that 
bucket.  It's a little bit more 

06:44:31.408 --> 06:44:33.864
code but not tremendously more. 
And dropping it in was 

06:44:33.865 --> 06:44:36.516
relatively simple and painless 
to do.  

06:44:39.577 --> 06:44:41.577
So that is client library.

06:44:43.257 --> 06:44:45.089
We've carved off images we now 
have our application code and 

06:44:45.090 --> 06:44:48.180
database together.  We need to 
fix that.  

06:44:50.618 --> 06:44:53.073
We'll go to application storage 
and get the SQL versus no SQL.

06:44:56.579 --> 06:44:58.814
That is not anything I I want to
wade in.  I am sure we all have 

06:44:58.815 --> 06:45:02.307
beliefs.  It's okay.  I'm not 
going to question them.  But 

06:45:02.308 --> 06:45:04.308
I'll talk about what we have for
these two types.  

06:45:06.854 --> 06:45:08.854
So we have cloud SQL which is a 
tracing 

06:45:10.950 --> 06:45:12.831
didal excel -- traditional excel
server.  It's what we called 

06:45:12.832 --> 06:45:14.832
vertically scalable.

06:45:16.945 --> 06:45:20.838
You can keep making the its 
running on bigger and bigger.  

06:45:20.839 --> 06:45:22.684
But when you need to scale out 
these don't scale out perfectly 

06:45:22.685 --> 06:45:24.685
well.

06:45:27.187 --> 06:45:29.187
You can do reply cat sets but it
is 

06:45:30.246 --> 06:45:32.084
still good old-fashioned my SQL 
and postscripts.  We manage the 

06:45:32.085 --> 06:45:34.342
backups and make it easy to set 
up replicas and take the pain 

06:45:34.343 --> 06:45:36.343
out of running these machines.

06:45:39.072 --> 06:45:40.508
We also have cloud spaner which 
like let me put in context you 

06:45:40.509 --> 06:45:42.509
would never use on this App.

06:45:44.395 --> 06:45:46.395
It's for gigantic worldwide 
companies 

06:45:47.468 --> 06:45:51.593
that have, you know, very high 
rates of queries per second.  It

06:45:51.594 --> 06:45:54.883
is not for this tagger App.  But
that's also available to you.  

06:45:54.884 --> 06:45:56.956
It has a SQL interface.  It's 
structured data.  Highly 

06:45:56.957 --> 06:46:00.440
available.  Strongly consistent.
Our network makes that work 

06:46:00.441 --> 06:46:05.323
where we can make those claims 
that it is both those things.  

06:46:05.324 --> 06:46:08.206
It's horizontally kaleable.  But
keep in mind it is definitely 

06:46:09.212 --> 06:46:12.299
cost-effective when you have the
scale for it.  Like this small 

06:46:12.300 --> 06:46:15.556
App it would be overkill. 
Now let's talk about no SQL.

06:46:19.070 --> 06:46:21.070
We've got cloud data store and 
fire store.

06:46:23.144 --> 06:46:25.144
Anybody here use fire base?  
Cloud fire store has a lot of 

06:46:27.006 --> 06:46:29.043
integration with fire base and 
there's a similar product called

06:46:29.044 --> 06:46:31.044
cloud fire store 

06:46:32.098 --> 06:46:34.972
-- I forgot the branding of it 
but it is the same thing.  It 

06:46:34.973 --> 06:46:36.973
allows you to use fire base's 
APIs 

06:46:40.275 --> 06:46:42.590
to write to a guy JONTic no SQL 
store in the back end.  It's 

06:46:42.591 --> 06:46:43.598
great when you are writing 
clients that you don't want to 

06:46:43.599 --> 06:46:47.891
back end at all.  You just want 
the front end App to talk to the

06:46:47.892 --> 06:46:49.892
data store.  That's what fire 
store is for.

06:46:53.006 --> 06:46:54.424
Data store is more for I've got 
an App that I've written that I 

06:46:54.425 --> 06:46:58.121
want to store stuff to and 
that's running on the back end 

06:46:58.122 --> 06:47:00.122
and that communication will 
happen 

06:47:01.409 --> 06:47:02.021
between cloud data store and 
your App.  

06:47:02.022 --> 06:47:07.154
Big table.  You don't see it a 
lot in applications.  Very 

06:47:07.155 --> 06:47:09.228
rarely someone will use this for
an application because it's got 

06:47:09.229 --> 06:47:12.084
low latency.  Where it really 
sells is big data jobs.

06:47:16.376 --> 06:47:18.824
You put a whole bunch of lobs in
there and stole them.  That's 

06:47:18.825 --> 06:47:20.825
SCLOUD big table.  It's only 
cost-effective at scale. 

06:47:21.483 --> 06:47:23.483
Which one should we use?

06:47:25.749 --> 06:47:29.262
Well I kind of set this up so 
there is an obvious winner.  I'm

06:47:29.263 --> 06:47:31.934
not going to rewrite all of my 
logic from SQL to no SQL so I'm 

06:47:31.935 --> 06:47:37.652
not using any of the no SQL 
solutions and cloud spaner is 

06:47:37.653 --> 06:47:39.653
overkill so I'm going to use 
cloud SQL.

06:47:42.353 --> 06:47:44.989
And use my SQL because I don't 
want to rewrite stuff.  I'm 

06:47:44.990 --> 06:47:46.422
going do a quick demo to show 
you what this interface looks 

06:47:46.423 --> 06:47:50.336
like. 
I've got SQL here.  I have the 

06:47:50.337 --> 06:47:52.337
database set up but I'm going to
create a new one.

06:47:54.423 --> 06:47:59.108
You will see I've got options my
SQL versus postscript.  We help 

06:47:59.109 --> 06:48:01.341
you like what you are going to 
do it for.  For development, 

06:48:01.342 --> 06:48:05.819
taking or production?  I'm going
to use staging.  Because among 

06:48:05.820 --> 06:48:08.466
its many features it has this.  
Which is automatic increases 

06:48:08.467 --> 06:48:10.467
storage.  So when I set up my 
disks in the back 

06:48:14.206 --> 06:48:16.898
end, it will automatically make 
my disk bigger if I start to run

06:48:16.899 --> 06:48:19.786
afoul of the size of the disk.  
Up to 64 terabytes.

06:48:22.835 --> 06:48:25.651
So I'm going configure one of 
these.  I can choose version, 

06:48:25.652 --> 06:48:27.652
machine type.  So I can make the
machine bigger.

06:48:32.071 --> 06:48:34.347
They're based on our VM images. 
They kind of fit with the VM 

06:48:34.348 --> 06:48:36.348
standard images.

06:48:39.294 --> 06:48:41.140
You can choose SSD or standard 
disk.  One of the cool things 

06:48:41.141 --> 06:48:43.985
you need to know is if you need 
higher read write 

06:48:47.652 --> 06:48:49.652
performance to your disk you 
need to get bigger drives.

06:48:51.553 --> 06:48:53.553
When I change this number from 
twenty 

06:48:59.601 --> 06:49:02.054
to 200 I get more loTts.  I 
think that's what I am going to 

06:49:02.055 --> 06:49:04.141
show off about cloud SQL.

06:49:07.832 --> 06:49:09.832
I'm going stitch back to present
mode.

06:49:19.971 --> 06:49:21.595
How do I get my stuff in to 
cloud SQL?  I take it and upload

06:49:21.596 --> 06:49:24.479
it to cloud storage.  From 
storage I ingest it in to cloud 

06:49:24.680 --> 06:49:28.985
SQL.  Which brings up something 
kind of important which is this 

06:49:28.986 --> 06:49:32.235
work flow moving it to cloud 
storage then pull it somewhere 

06:49:32.236 --> 06:49:34.236
else is pretty common.

06:49:36.128 --> 06:49:38.233
You have a whole bunch of lob 
data you put it in cloud storage

06:49:38.234 --> 06:49:40.234
and ingest it into big query.

06:49:42.976 --> 06:49:44.976
You have a images you want to 
analyze put it in cloud storage.

06:49:46.427 --> 06:49:48.667
You will see two tools.  Cloud 
storage acts as a hub and the 

06:49:51.965 --> 06:49:54.814
other is called pub sub.  
There's a cool demo in the cloud

06:49:54.815 --> 06:49:56.815
dome.

06:49:58.298 --> 06:50:00.993
What pub/sub does is it is a 
messaging bus.  You say I am a 

06:50:00.994 --> 06:50:02.994
publisher and a whole bunch of 
people subscribe to the channel 

06:50:04.314 --> 06:50:07.788
that you publish to.  You send a
structured piece of data that 

06:50:07.789 --> 06:50:09.289
does something and it gets 
communicated out to all the 

06:50:09.290 --> 06:50:15.276
people that are -- all the 
subscribers of that service.  

06:50:15.277 --> 06:50:17.521
It's very high through put.  
Basically allows you to off-load

06:50:17.522 --> 06:50:19.985
stuff to other pieces of the 
cloud when you 

06:50:26.364 --> 06:50:28.364
need do and doo it with a cuing 
system that's fast. 

06:50:29.249 --> 06:50:31.725
Let's talk about common problems
people have when they start 

06:50:31.726 --> 06:50:33.726
running database servers on us.

06:50:35.188 --> 06:50:37.188
One problem I feel like I should

06:50:38.283 --> 06:50:40.935
communicate it to you is that 
when you run G cloud SQL to 

06:50:40.936 --> 06:50:43.603
ingest the SQL you might get an 
error.  That error is going to 

06:50:43.604 --> 06:50:45.604
look like this.  Internal error.

06:50:50.172 --> 06:50:52.390
Then you raise the VER bossty of
the G cloud command you get that

06:50:52.391 --> 06:50:58.790
it is a SQL error.  What you do 
is in the SQL interface there's 

06:50:58.791 --> 06:51:00.813
this tab called operations.  And
in operations we can see that 

06:51:02.465 --> 06:51:05.542
there's an error and we can see 
the line number.  We see all the

06:51:05.543 --> 06:51:07.381
SQL data we need to trouble 
shoot this.  For this particular

06:51:07.382 --> 06:51:09.382
error it was that 

06:51:10.488 --> 06:51:12.314
I had done a my SQL dump like 
you normally do but I had super 

06:51:12.315 --> 06:51:16.210
permissions which you can't have
on cloud SQL so it balked at 

06:51:16.211 --> 06:51:19.892
that.  So just a couple things 
if you are switching over to 

06:51:19.893 --> 06:51:21.893
this you might want to 

06:51:24.598 --> 06:51:26.458
know off the top before you head
(?) Trying to track down what it

06:51:26.459 --> 06:51:29.533
says. 
What happens if we, Google 

06:51:29.534 --> 06:51:31.534
cloud, don't offer something you
need?

06:51:37.125 --> 06:51:39.160
Like we have my SQL but you want
co Sandra or one of the other 

06:51:39.161 --> 06:51:41.161
storage solutions.  You do two 
options.

06:51:44.608 --> 06:51:49.166
Build it yourself from scratch. 
Mixing metaphors.  Or you can 

06:51:49.167 --> 06:51:51.167
use cloud launcher to build one 
of our existing solutions.

06:51:55.970 --> 06:51:58.636
Like Cassandra, REDIS, Mongo and
a whole bunch more.  In each of 

06:51:58.637 --> 06:52:00.273
these cases it's important to 
know we don't maintain the 

06:52:00.274 --> 06:52:04.802
software.  We maintain the OS.  
So in all the cases with compute

06:52:05.830 --> 06:52:08.070
engine, I didn't mention this 
earlier, but we do live 

06:52:08.071 --> 06:52:10.071
migration.

06:52:11.966 --> 06:52:14.464
So when you update the machine 
it will continue running even 

06:52:14.465 --> 06:52:16.734
through the update.  You'll 
never have down time because 

06:52:18.559 --> 06:52:20.559
we're updating the hardware.

06:52:22.685 --> 06:52:25.527
We migrate and solve that for 
you.  In each of these cases you

06:52:25.528 --> 06:52:29.396
get that with whatever solution 
you build.  But we won't update 

06:52:29.397 --> 06:52:33.464
the software or run backups for 
you for them if we don't say we 

06:52:33.465 --> 06:52:36.129
do like we do with cloud SQL. 
All right.  So now here we are.

06:52:39.187 --> 06:52:41.187
We have taken our App we've 
moved it 

06:52:45.549 --> 06:52:46.582
to cloud and put it on a VM then
we've off loaded database and 

06:52:46.583 --> 06:52:48.473
storage to different parts of 
the cloud.  Now I'm free to 

06:52:48.474 --> 06:52:50.522
start thinking like well since 
all of the data, all of the 

06:52:55.949 --> 06:52:57.914
State of this application is 
WHELS elsewhere I can start 

06:52:57.915 --> 06:52:59.915
making decisions about how to 
run this.

06:53:02.775 --> 06:53:04.789
Do I want to run a group of VMs 
behind a load balanceer?  I can 

06:53:04.790 --> 06:53:06.790
do that.

06:53:07.908 --> 06:53:11.772
If I want to go to a serverless 
solution I can do that.  I will 

06:53:11.773 --> 06:53:13.813
talk a little bit about how to 
do this with a VM. 

06:53:15.853 --> 06:53:17.853
How do I scale this system?

06:53:19.162 --> 06:53:23.098
I am going to switch to demo one
last thing I believe.  And 

06:53:23.099 --> 06:53:25.099
that's going to be something we 

06:53:29.156 --> 06:53:31.156
call managed instants groups

06:53:34.722 --> 06:53:37.363
.  So these take minutes to get 
rolling instead of seconds.  So 

06:53:37.364 --> 06:53:38.991
I'm not -- again, not going to 
strain our relationship and do 

06:53:38.992 --> 06:53:43.115
things that take that long in 
front of you.  But I will kind 

06:53:43.116 --> 06:53:45.116
of walk you through 

06:53:47.001 --> 06:53:48.442
creating and managing instance 
group.  So, basically, I define 

06:53:48.443 --> 06:53:50.443
a group.

06:53:51.509 --> 06:53:54.367
I say I want this to be a group 
of tagger machines.  I want them

06:53:54.368 --> 06:53:57.002
all to have tagger on it.  I 
want them all to run with the 

06:53:57.003 --> 06:53:59.003
same software.

06:54:00.910 --> 06:54:02.319
So what I do is I can put this 
in single location or multi-so I

06:54:02.320 --> 06:54:06.010
can have these groups all around
the world.  I put it in a 

06:54:06.011 --> 06:54:10.118
particular zone then I can be 
managed or unmanaged.  Managed 

06:54:10.119 --> 06:54:11.964
means that every machine is 
based on a template and they 

06:54:11.965 --> 06:54:15.649
look exactly the time same.  We 
can do things like say auto 

06:54:15.650 --> 06:54:17.890
scale.  So all the machines are 
exactly the same.

06:54:21.133 --> 06:54:22.991
If the CPU utilization ever gets
above sixty, spit up another 

06:54:22.992 --> 06:54:28.916
one.  Then another one.  Until 
it gets below sixty.  I can say 

06:54:28.917 --> 06:54:30.917
things like make sure 

06:54:33.589 --> 06:54:35.589
they're there are always three 
no more 

06:54:37.734 --> 06:54:40.854
than ten and scale with sixty 
percent process utilization.  I 

06:54:40.855 --> 06:54:43.726
can build that and you will see 
that I did here on this 

06:54:43.727 --> 06:54:46.830
interface and that so I have 
these three machines.  If I 

06:54:46.831 --> 06:54:48.477
click through I can see that 
each one of these machines is 

06:54:48.478 --> 06:54:50.736
running.  Each one of these 
machines is open to the 

06:54:50.737 --> 06:54:55.947
internet.  And each one of these
machines is running Apache just 

06:54:55.948 --> 06:55:00.430
like I want it to.  So we're all
good.  

06:55:02.070 --> 06:55:03.907
So the next thing I want to do 
is take this and make it 

06:55:03.908 --> 06:55:07.769
redundant.  Basically share it 
with the world.  To share it 

06:55:07.770 --> 06:55:11.049
with the world I need a load 
balancer.  So I'm going to pull 

06:55:11.050 --> 06:55:14.955
in tagger load balancer.  Again 
this takes awhile to go.  So I'm

06:55:14.956 --> 06:55:17.406
going to walk you through the 
way it's set up.  I say give me 

06:55:17.407 --> 06:55:20.453
a front end.  It's HTTP.  It's 
on port 80.

06:55:24.735 --> 06:55:27.175
I serve it up on an IP address. 
I say from the back end serve 

06:55:27.176 --> 06:55:29.636
this instance group.  So this 
instance group everything is 

06:55:30.661 --> 06:55:33.911
open on port 80.  You are 
listening on port 80.  Combine 

06:55:33.912 --> 06:55:35.739
them and make that redundant.  
Once I do that I have this set 

06:55:35.740 --> 06:55:38.796
up the way it is.  Each one of 
those machines is answering 

06:55:38.797 --> 06:55:41.451
calls to the internet.  But if I
go to this machine this IP 

06:55:45.970 --> 06:55:49.886
address that I get here, it's 
also up and running.  And so 

06:55:49.887 --> 06:55:51.113
like I said, these will scale, 
all of that scaling can happen 

06:55:51.114 --> 06:55:55.402
usually within a minute to two 
minutes.  So, if you start 

06:55:55.403 --> 06:55:58.039
getting a load spike we can 
scale upload relatively quickly.

06:56:00.926 --> 06:56:02.926
But not necessarily 
instantaneously.  Okay?  

06:56:04.427 --> 06:56:06.063
So that is scaling out this 
application with the load 

06:56:06.064 --> 06:56:09.559
balancer. 
So, with, that I'm going to 

06:56:09.560 --> 06:56:13.656
switch back to presenting.  And 
take you through a couple more 

06:56:13.874 --> 06:56:15.874
things.

06:56:17.591 --> 06:56:19.621
We talked about instance groups 
which can be managed or 

06:56:19.622 --> 06:56:21.622
unmanaged.  Why would they be 
unmanaged?

06:56:23.908 --> 06:56:26.745
Maybe you want to combine a 2CPU
box and 60 box.  I don't know 

06:56:26.746 --> 06:56:29.818
why but you want to.  That's 
cool.  No judgment.  You are 

06:56:29.819 --> 06:56:31.819
responsible for scaling and all 
that.

06:56:33.270 --> 06:56:35.116
Because we couldn't figure out 
CPU utilization like what should

06:56:35.117 --> 06:56:37.770
we add.  We are not using a 
template.  So you can manage 

06:56:37.771 --> 06:56:41.650
that.  But if you use manage, we
can auto scale and we can auto 

06:56:41.651 --> 06:56:46.366
heal.  You have health checks on
your App and it goes down, we 

06:56:46.367 --> 06:56:49.220
can rebuild a VM for you and 
bring it back in to the instance

06:56:49.221 --> 06:56:52.903
group. 
Networking talk about load 

06:56:52.904 --> 06:56:54.904
balancers.

06:56:59.599 --> 06:57:01.599
We have HTTP and

06:57:02.935 --> 06:57:05.190
TCP and UDP and we have IB 
certain only that are accessible

06:57:05.191 --> 06:57:09.895
within your project.  
Now that's how I scale VMs.  But

06:57:09.896 --> 06:57:11.896
I do work for Google cloud and 
we 

06:57:12.955 --> 06:57:14.991
use the bus words container and 
serverless a lot.  So I felt 

06:57:14.992 --> 06:57:18.455
like it was necessary to talk 
about these.  How many people 

06:57:18.456 --> 06:57:20.456
here are using docker?

06:57:21.915 --> 06:57:24.982
How many people are using 
Kubernetes?  Okay.  All right.  

06:57:24.983 --> 06:57:26.983
For those of you that aren't, 
I'll 

06:57:28.459 --> 06:57:29.688
give a quick what is containers 
at a very, very high level and 

06:57:29.689 --> 06:57:31.689
watch the faces of the people 
that raised their 

06:57:34.995 --> 06:57:37.290
hands as they squirm and scheme 
through this over simplified 

06:57:37.291 --> 06:57:39.291
definition.  Containers are 
basically a package 

06:57:42.406 --> 06:57:43.429
that contains all the code and 
run-time components to run your 

06:57:43.430 --> 06:57:46.094
App.  Then there's an 
environment, docker or 

06:57:47.920 --> 06:57:49.344
Kubernetes, that will trick the 
process into thinking it's the 

06:57:49.345 --> 06:57:53.765
only one running on the machine.
So you can do crazy things like 

06:57:53.766 --> 06:57:55.816
have multiple versions of of the
same software running on the 

06:57:55.817 --> 06:58:01.455
same machine.  You can stack as 
many more processes on the 

06:58:01.456 --> 06:58:03.456
machine than you can do VMs on 
the same hardware.

06:58:05.541 --> 06:58:06.783
So, basically, there are a lot 
of efficiencies you get from 

06:58:06.784 --> 06:58:10.446
switching to this model.  We 
have two products that we say 

06:58:10.447 --> 06:58:12.724
are our container products on 
Google cloud.

06:58:15.778 --> 06:58:18.024
They're Kubernetes engine which 
is managed Kubernetes.  If you 

06:58:18.025 --> 06:58:20.492
don't know what Kubernetes is 
basically you have dozens or 

06:58:20.493 --> 06:58:22.520
hundreds or thousands of 
containers all doing different 

06:58:22.521 --> 06:58:26.205
things.  You want to run them in
a way that you are not managing 

06:58:26.206 --> 06:58:28.206
individual containers.

06:58:29.291 --> 06:58:30.922
You put them into a Kubernetes 
cluster with instructions on how

06:58:30.923 --> 06:58:34.775
to run them and it will keep 
them running whether they're 

06:58:34.776 --> 06:58:37.646
micro-service, a web App or a 
batch job somewhere. 

06:58:40.092 --> 06:58:41.719
App engine flexible is you have 
one App that you just want to 

06:58:41.720 --> 06:58:46.176
scale that's already in a docker
container you can push it to App

06:58:46.177 --> 06:58:49.051
engine flexible and we'll scale 
it for you from one to as many 

06:58:50.070 --> 06:58:52.710
instances you need. 
What is serverless?

06:58:56.645 --> 06:58:59.686
Serverless is a marketing term. 
It is right?  There is a server 

06:58:59.687 --> 06:59:05.012
there.  There's not some beast 
living beyond space and time 

06:59:05.013 --> 06:59:07.456
running your load for you.  But 
it describes I think a really 

06:59:08.455 --> 06:59:11.129
important distinction.  
Different type of App.  Which is

06:59:11.130 --> 06:59:14.224
you pay as you go.  Whatever you
use you pay for.  If you don't 

06:59:14.225 --> 06:59:16.725
use it, you don't pay for it.  
And you don't care about the 

06:59:17.123 --> 06:59:19.195
underlying infrastructure.  You 
don't have to know about number 

06:59:19.196 --> 06:59:23.715
of servers or nodes or anything.
We'll just run it for you as 

06:59:23.716 --> 06:59:27.182
much or as little as you need.  
So when we talk about serverless

06:59:27.183 --> 06:59:30.883
on Google Cloud Platform we're 
talking about cloud functions.

06:59:35.591 --> 06:59:37.643
Which the unit of an abstraction
is a function.  And you attach 

06:59:37.644 --> 06:59:40.091
that to some sort of event.  
Someone drops a file into a 

06:59:40.092 --> 06:59:44.782
bucket.  Someone sends a message
to a pub sub cue.  You respond 

06:59:44.783 --> 06:59:47.434
with that cloud function.  We 
also have serverless solution 

06:59:48.254 --> 06:59:50.254
that's App based.

06:59:51.561 --> 06:59:53.794
It's very restricted in TERMs of
what you can do.  You can only 

06:59:53.795 --> 06:59:57.901
use certain languages.  You can 
only use code in that language. 

06:59:57.902 --> 07:00:00.345
But what you get for that 
restriction is incredible 

07:00:00.346 --> 07:00:02.346
scaling.

07:00:05.455 --> 07:00:07.483
App engines can scale from 0 to 
pretty much infinite in a 

07:00:07.484 --> 07:00:09.569
relatively short period of time.
I have a demo where I will scale

07:00:09.570 --> 07:00:11.616
an App that's cold, like I 
didn't use it, 

07:00:15.299 --> 07:00:17.299
to about 8500 queries per second
in about five minutes.

07:00:20.768 --> 07:00:25.224
And to put that in perspective 
8500QPS is what Wikipedia gets. 

07:00:25.225 --> 07:00:27.879
So I'm able to go from nothing 
cold to a Wikipedia scale 

07:00:27.880 --> 07:00:30.117
application in five minutes with
App engine.  But it comes as a 

07:00:30.118 --> 07:00:32.118
cost.  Restricted abilities to 
do things. 

07:00:33.391 --> 07:00:35.834
So the question is should I 
switch over to one of these?  

07:00:35.835 --> 07:00:37.835
That's like a whole talk.  
That's a whole separate talk of 

07:00:41.151 --> 07:00:42.792
whether or not you should use 
serverless machines or contain 

07:00:42.793 --> 07:00:46.130
errs.  But for this App without 
any context no.  It's working 

07:00:46.131 --> 07:00:50.124
where it is.  I'm bringing it 
over some place else.  I don't 

07:00:50.125 --> 07:00:52.565
necessarily want to put a lot of
effort into it.  Lift and shift 

07:00:52.566 --> 07:00:54.566
is absolutely fine.

07:00:55.817 --> 07:00:58.653
If I have plans to grow this App
bigger, or to grow the whole 

07:00:58.654 --> 07:01:02.350
bunch of other applications 
maybe it might make sense to 

07:01:02.351 --> 07:01:06.678
containerize.  But that would 
depend on the context.  If I am 

07:01:06.679 --> 07:01:08.712
going to have inconsistent use 
maybe serverless would work out 

07:01:08.713 --> 07:01:12.193
too.  But for this particular 
application with no context I'm 

07:01:12.194 --> 07:01:14.194
not switching I'm staying on 
VMs. 

07:01:15.645 --> 07:01:17.683
We've come to the end.  I've 
taken you through a pretty good 

07:01:18.489 --> 07:01:21.152
tour of what we have.  We've 
started with a single App all 

07:01:22.233 --> 07:01:24.480
running on one machine.  But we 
ended up here where we've 

07:01:27.337 --> 07:01:29.183
basically taken all the state 
and pushed it elsewhere and we 

07:01:29.184 --> 07:01:32.686
can now grow and expand have a 
lot of different options with 

07:01:32.687 --> 07:01:34.519
the computing level. 
There was so much I couldn't 

07:01:34.520 --> 07:01:38.449
cover.  I was pretty vicious 
with my editing pen because I 

07:01:38.450 --> 07:01:40.450
wasn't getting under forty 
minutes.

07:01:42.934 --> 07:01:46.404
So I didn't talk about our NL 
APIs which are awesome.  Same 

07:01:46.405 --> 07:01:48.405
sort of inserting the code the 
way we did cloud storage.

07:01:51.393 --> 07:01:53.030
You can grab with vision API -- 
I'm not going to -- don't switch

07:01:53.031 --> 07:01:56.908
over, but you will notice that I
have tags that I got from cloud 

07:01:56.909 --> 07:01:59.593
vision API instead of making 
people do it.  So this App I can

07:01:59.594 --> 07:02:03.177
just completely replace data 
entry on this App with cloud 

07:02:03.178 --> 07:02:07.594
vision if I wanted to.  I think 
it's funny.  It thinks that the 

07:02:07.595 --> 07:02:09.595
Ewok, the kid in 

07:02:10.664 --> 07:02:13.759
the Ewok costume is carnivorean.
Which is kind of scary.  But I 

07:02:13.760 --> 07:02:15.760
don't know how he is raised.  I 
don't know.

07:02:18.234 --> 07:02:20.493
So just see a kid in an Ewok 
costume be afraid.  But cloud 

07:02:20.494 --> 07:02:23.193
vision was able to do that for 
me.  It also picked out skin and

07:02:23.194 --> 07:02:25.424
children and picked a whole 
bunch of details from those 

07:02:25.425 --> 07:02:27.467
images. 
I didn't talk about the API 

07:02:27.468 --> 07:02:30.077
library.  If you are using any 
of the other 

07:02:35.356 --> 07:02:38.050
Google APIs like maps or ads GS 
you can manage them and use them

07:02:38.051 --> 07:02:40.051
in your Google 

07:02:41.319 --> 07:02:45.496
platform project with the fault 
credentials.  You can just run 

07:02:45.497 --> 07:02:47.497
it with kind of very 

07:02:49.246 --> 07:02:50.279
minimal authentication but 
securely.  

07:02:50.280 --> 07:02:52.343
Talking about stack driver.  If 
you need your lobs or monitoring

07:02:54.174 --> 07:02:57.249
and all that stuff, stack driver
can do this for if you.  All 

07:02:57.250 --> 07:02:59.700
this stuff I didn't get a chance
to talk about will all help you 

07:02:59.701 --> 07:03:02.597
run in this scenario.  If you 
look at Google cloud as a whole 

07:03:04.258 --> 07:03:05.070
I talked about the computer 
platform.  We covered a lot of 

07:03:05.071 --> 07:03:08.816
it.  We covered storage and 
databases.  We covered a little 

07:03:08.817 --> 07:03:10.817
bit of networking.

07:03:12.296 --> 07:03:14.754
We covered a little bit of big 
data in that I mentioned pub 

07:03:14.755 --> 07:03:18.570
sub.  Mentioned the machine 
learning APIs.  Mentioned 

07:03:18.571 --> 07:03:21.245
developer tools.  And mentioned 
management tools.  But if you 

07:03:21.246 --> 07:03:23.283
look at this whole list there's 
a lot missing because there's 

07:03:24.516 --> 07:03:26.977
just a lot more to the platform.
So I'd ask if you have any 

07:03:26.978 --> 07:03:31.690
questions or if this has ignited
anything in you please make sure

07:03:31.691 --> 07:03:34.114
you stop by the cloud booth.  
There's everybody from Google --

07:03:34.115 --> 07:03:37.324
not everybody but a lot of 
people from Google cloud are 

07:03:37.325 --> 07:03:40.185
there and can answer your 
questions.  And hopefully I 

07:03:40.186 --> 07:03:42.186
showed youed how you could 
on-board and get started with 

07:03:42.872 --> 07:03:44.872
Google cloud.

07:03:45.988 --> 07:03:48.266
If you sign up you get a three 
hundred dollar free credit for 

07:03:48.267 --> 07:03:51.952
twelve months that you can use 
to kick the tires and hopefully 

07:03:51.953 --> 07:03:53.607
you go from here to discovering 
more about what's on the 

07:03:53.608 --> 07:03:58.541
platform.  So thank you very 
much.  I'm Terry Ryan.  Please 

07:03:58.542 --> 07:04:01.410
feel free to heckle me on 
Twitter @TP Ryan.  If you have 

07:04:01.411 --> 07:04:03.454
any questions I'll be around but
I think I'm running short on 

07:04:03.856 --> 07:04:05.856
time.

07:04:08.164 --> 07:04:10.164
So have a good rest of your I/O!

07:04:19.043 --> 07:04:24.438
This screen used
Realtime captioning on this 

07:04:24.439 --> 07:04:26.439
screen.

07:06:35.234 --> 07:06:37.234
&gt;&gt;  Thank you for joining this 
session.

07:06:39.545 --> 07:06:44.260
Brand ambassadors will assist in
directing you through the exit. 

07:06:44.261 --> 07:06:46.117
If you have registered for the 
next session in this room we ask

07:06:46.118 --> 07:06:49.635
you that please clear the room 
and return via the registration 

07:06:49.636 --> 07:06:51.636
line outside.  Thank you.

07:07:23.974 --> 07:07:25.974
Cube

07:07:32.847 --> 07:07:34.847
Kubernetes
.

07:08:07.462 --> 07:08:10.610
LoT 

07:08:13.622 --> 07:08:15.622
IoT

07:08:32.137 --> 07:08:35.135
. 

07:08:46.408 --> 07:08:48.408
RAS

07:20:06.685 --> 07:20:08.685
 .

07:20:26.518 --> 07:20:28.518
Realtime captioning on this 
screen.

07:22:19.580 --> 07:22:21.580
Sys
.

07:25:11.258 --> 07:25:18.420
&gt;&gt; RICHARD UHLER:  Hello.  
Welcome to everyone here.  And 

07:25:18.421 --> 07:25:20.421
those of you following along on 
the live stream.  

07:25:21.088 --> 07:25:23.114
My name is Richard Uhler.  I am 
a software engineer on the 

07:25:25.975 --> 07:25:27.603
Android run time team.  I've 
spent the last three years 

07:25:27.604 --> 07:25:31.726
trying to better understand 
memory use on Android.  And more

07:25:31.727 --> 07:25:34.161
recently I've been working with 
first party App developers to 

07:25:36.799 --> 07:25:38.220
tackle the challenges of 
evaluating and improving Android

07:25:38.221 --> 07:25:42.710
memory use.  It's great to see 
so many of you here interested 

07:25:42.711 --> 07:25:44.711
in Android memory use. 

07:25:47.591 --> 07:25:49.838
To start off why should you as 
an App developer care about 

07:25:49.839 --> 07:25:52.697
memory use?  For me it's really 
about the Android ecosystem.

07:25:55.758 --> 07:25:57.785
The ecosystem of applications, 
of devices, and of the users of 

07:25:57.786 --> 07:25:59.786
those devices.

07:26:02.737 --> 07:26:04.154
Where memory comes in to Play is
not so much for the premium 

07:26:04.155 --> 07:26:08.015
devices where you have a lot of 
memory available but much more 

07:26:08.016 --> 07:26:10.016
for the entry-level devices.

07:26:11.546 --> 07:26:13.714
Because these devices need a 
decent selection of low memory 

07:26:13.715 --> 07:26:16.217
Apps to work well.  If 
application memory use and 

07:26:19.113 --> 07:26:20.535
requirements grow, then the 
entry-level devices won't work 

07:26:20.536 --> 07:26:24.614
as well.  If they don't work as 
well, OEMs will not want to 

07:26:24.615 --> 07:26:28.916
produce these devices.  If they 
don't produce these devices well

07:26:28.917 --> 07:26:30.917
we're kind of excluding a bunch 
of 

07:26:32.806 --> 07:26:34.806
users from our Android ecosystem
and that's a bad thing. 

07:26:36.303 --> 07:26:37.988
So App developers have a role to
Play when they're developing 

07:26:37.989 --> 07:26:42.497
applications to do whatever they
can to be efficient in your 

07:26:42.498 --> 07:26:44.581
memory use, to reduce your 
memory use, keep it from growing

07:26:44.582 --> 07:26:49.693
too much so that we have a nice 
selection of low memory 

07:26:49.694 --> 07:26:51.937
applications so that entry-level
devices behave well, they work 

07:26:51.938 --> 07:26:56.639
well.  And if that happens, OEMs
will produce these devices and 

07:26:56.640 --> 07:27:01.534
we can put them in the hands of 
users to use our applications. 

07:27:01.535 --> 07:27:05.001
So in this talk I'm going to 
talk about three broad 

07:27:05.002 --> 07:27:08.505
categories.  Three areas.  
First, I'll talk about the 

07:27:08.506 --> 07:27:10.506
mechanisms 

07:27:12.053 --> 07:27:14.073
that come in to Play on Android 
device when it's running low on 

07:27:14.074 --> 07:27:16.074
memory and how that impacts the 
user.

07:27:18.588 --> 07:27:20.588
I'll talk about how we evaluate 
an application's memory impact.

07:27:23.934 --> 07:27:25.327
And in particular very important
FALTH factors to be aware of 

07:27:25.328 --> 07:27:28.197
that come in to Play with that. 
Third, I will give you some tips

07:27:28.198 --> 07:27:30.198
for 

07:27:32.712 --> 07:27:34.965
how to reduce your 
applications's memory impact 

07:27:34.966 --> 07:27:36.991
especially given a lot of this 
allocations going in your 

07:27:36.992 --> 07:27:38.992
application originate deep 
within the Android stack 

07:27:42.534 --> 07:27:44.564
on which its running . 
Let's start.  

07:27:47.060 --> 07:27:49.060
What happens on a device when 
it's running low on memory?

07:27:51.955 --> 07:27:54.656
Well memory on device, 
physically memory is device is 

07:27:54.657 --> 07:27:57.733
organized or grouped into pages.
And each page is typically 

07:27:57.734 --> 07:28:01.607
around four kill OE bites.  
Different pages can be used for 

07:28:02.215 --> 07:28:04.215
different things.

07:28:05.688 --> 07:28:08.554
So pages can be used pages.  
These are pages actively used by

07:28:08.766 --> 07:28:10.766
processes.

07:28:13.039 --> 07:28:15.039
They can be cache pages.

07:28:16.129 --> 07:28:18.163
Pages memory being used by 
processees but the data they 

07:28:18.164 --> 07:28:21.014
contain also lives on the device
storage.  Which means we can 

07:28:21.015 --> 07:28:24.307
sometime reclaim those pages.  
Then there might be free pages 

07:28:24.308 --> 07:28:27.200
of memory sitting on the device 
you are not using. 

07:28:30.478 --> 07:28:32.920
So what I've done is I took two 
gigabyte device and I started it

07:28:32.921 --> 07:28:35.612
doing nothing.  So at the very 
beginning of time the run time 

07:28:35.613 --> 07:28:40.918
is not running.  And then I 
started using it more and more. 

07:28:40.919 --> 07:28:43.607
So lots of different 
applications, exercising them 

07:28:43.608 --> 07:28:45.646
which has the affect of using 
more and more memory on the 

07:28:45.647 --> 07:28:47.647
device over time.

07:28:49.723 --> 07:28:52.171
So we can see at the beginning 
the flat line there is before I 

07:28:52.172 --> 07:28:56.675
started the run time.  Then I 
start the run time up.  There's 

07:28:56.676 --> 07:28:58.910
plenty of free memory available 
on the device.  And this is a 

07:28:58.911 --> 07:29:04.410
happy device.  Because if an 
application needs more memory, 

07:29:04.411 --> 07:29:07.901
the (?) Can satisfy that request
from the free memory. 

07:29:10.957 --> 07:29:12.174
Over time as you use more 
memory, the free memory gets 

07:29:12.175 --> 07:29:15.866
exhausted.  It goes down.  And 
to avoid very bad things from 

07:29:22.230 --> 07:29:24.230
happening, the Linux colonel has
G swap D.

07:29:27.173 --> 07:29:29.173
And K swap D's job is to find 
more free memory.

07:29:31.879 --> 07:29:33.879
This kicks in when free memory 
goes 

07:29:35.722 --> 07:29:37.722
below what I call the KSWAPD.

07:29:41.734 --> 07:29:43.734
And the main mechanism used is 
to reclaim cache pages.

07:29:45.803 --> 07:29:48.253
In an App goes to access a cache
page or a memory that was on a 

07:29:48.254 --> 07:29:52.156
cache page that's been reclaimed
it's going to take a little 

07:29:52.157 --> 07:29:55.610
extra time to reload that data 
from device storage.  But 

07:29:55.611 --> 07:29:58.246
probably the user's not going to
be noticing this.  So that's 

07:29:58.247 --> 07:30:00.247
okay.  

07:30:02.794 --> 07:30:04.623
Now as I exercise more and more 
applications, they use more 

07:30:04.624 --> 07:30:06.624
memory, the 

07:30:07.897 --> 07:30:09.897
number of cache pages is going 
to fall 

07:30:12.560 --> 07:30:15.464
as K swap starts to reclaim 
them.  If it gets too low the 

07:30:15.465 --> 07:30:18.340
device can start to thrash.  
This is a very bad thing because

07:30:19.818 --> 07:30:22.276
basically the device will lock 
up.  On Android we have a 

07:30:22.277 --> 07:30:26.992
mechanism called the low memory 
killer that kicks in when the 

07:30:26.993 --> 07:30:29.435
amount of cache memory falls too
low.  And the way this works is 

07:30:29.436 --> 07:30:31.436
low memory 

07:30:32.520 --> 07:30:34.779
killer is going to pick a 
process on the device and it's 

07:30:34.780 --> 07:30:37.878
going to kill it and it's going 
to get back all the memory that 

07:30:37.879 --> 07:30:39.879
that process was using.  

07:30:43.258 --> 07:30:44.882
Now this is an unhappy state to 
be in especially if the low 

07:30:44.883 --> 07:30:46.883
memory killer 

07:30:49.603 --> 07:30:51.603
kills a process that the user 
cares about.  

07:30:52.705 --> 07:30:54.134
So let me go through and tell 
you a little more about how the 

07:30:54.135 --> 07:30:56.357
low memory killer decides what 
to kill. 

07:30:59.300 --> 07:31:01.300
Android keeps track of the 
processes running on the device.

07:31:02.588 --> 07:31:04.588
And it keeps them in a priority 
order.

07:31:05.672 --> 07:31:07.672
So the highest priority 
processes are 

07:31:09.063 --> 07:31:11.063
native processees.  Ones that 
come with Lynn IKS.

07:31:17.052 --> 07:31:19.052
Things like init, KSWAPD, net D,
LOGD 

07:31:21.524 --> 07:31:23.558
and ADBD, basically any native 
process that is running is 

07:31:23.559 --> 07:31:28.917
categorized into this.  The next
highest priority process we have

07:31:28.918 --> 07:31:33.194
is a system server which is 
maintaining this list.  Followed

07:31:33.195 --> 07:31:36.657
by what are known as persistent 
processes.  These are core 

07:31:36.658 --> 07:31:38.658
functionality.

07:31:41.412 --> 07:31:43.238
To NFC, SMS, those kind of 
things.  Next we have the 

07:31:43.239 --> 07:31:47.350
foreground App.  So this is 
going to be the application the 

07:31:47.351 --> 07:31:49.351
user is directly interacting 
with.

07:31:53.265 --> 07:31:56.095
In this case perhaps the user's 
viewing a web page so they're 

07:32:05.051 --> 07:32:05.081
interacting with the Chrome App.
Next in priority are what are 

07:32:05.082 --> 07:32:07.082
called 

07:32:09.047 --> 07:32:10.049
perceptible or visible 
processes.  These are not 

07:32:10.050 --> 07:32:12.050
processes the user's 

07:32:19.066 --> 07:32:19.092
directly interacting with but 
perceptible in some way.  For 

07:32:19.093 --> 07:32:21.096
instance if you have a search 
process maybe it has a little 

07:32:21.097 --> 07:32:25.363
bit of UI on the screen.  Or if 
the user's listening to music in

07:32:21.097 --> 07:32:25.097
the background, then they can 
hear that music through their 

07:32:21.097 --> 07:32:26.062
headphones.  They can perceive 
it. 

07:32:26.063 --> 07:32:29.796
After the perceptible Apps we 
have services.  These are 

07:32:26.063 --> 07:32:28.063
services started by applications
for things like syncing or 

07:32:28.088 --> 07:32:29.322
uploading, down loading from 
cloud.  Then we have the home 

07:32:29.323 --> 07:32:33.662
App.  This is what you get when 
you hit the home button.  It 

07:32:33.663 --> 07:32:35.663
often hosts your wallpaper if 
you have something there.  

07:32:37.177 --> 07:32:39.667
So in addition to these running 
processes we also keep track of 

07:32:39.668 --> 07:32:41.668
what the 

07:32:42.964 --> 07:32:44.964
previous application user used 
was.

07:32:46.255 --> 07:32:48.492
So maybe they're using this red 
App and it brings them to Chrome

07:32:48.493 --> 07:32:53.222
with a link.  Then when they 
switch to Chrome that App is 

07:32:53.223 --> 07:32:55.223
going to be the previous App.

07:32:56.306 --> 07:32:58.306
And we also keep in memory a 
bunch of 

07:33:00.642 --> 07:33:03.309
other processes which are cached
applications the user used 

07:33:03.310 --> 07:33:08.100
before.  Some of them maybe 
recently.  Some of them not for 

07:33:08.101 --> 07:33:11.357
a little bit of a while. 
I want to point out here these 

07:33:11.358 --> 07:33:13.358
cache 

07:33:15.281 --> 07:33:16.721
processees, when I use the term 
"cache" this is different than 

07:33:16.722 --> 07:33:18.722
the cache memory pages I was 
talking about previously. 

07:33:18.969 --> 07:33:21.613
Okay.  So the reason we keep 
around previous 

07:33:26.511 --> 07:33:28.563
and cache process eeee because 
if the user wants to switch to 

07:33:28.564 --> 07:33:31.420
one of these applications and 
say they want to switch to the 

07:33:31.421 --> 07:33:33.421
previous application it's very 
quick to switch to that.

07:33:35.742 --> 07:33:38.819
I should say this is for device 
in a normal memory state.  So if

07:33:38.820 --> 07:33:42.303
you want to switch to a previous
application that's very quick.  

07:33:42.304 --> 07:33:44.139
But also if you want to switch 
to an application that happens 

07:33:44.140 --> 07:33:47.840
to be in a cache process, that's
very quick to do because it's 

07:33:47.841 --> 07:33:49.841
already in memory.  

07:33:51.967 --> 07:33:53.388
If we step back though and say, 
well, what happens when the 

07:33:53.389 --> 07:33:55.389
device is low on memory?

07:33:58.099 --> 07:34:00.364
In that case, we can imagine the
memory used by the running 

07:34:00.365 --> 07:34:02.365
applications is growing.

07:34:04.308 --> 07:34:05.739
The number of cache pages drops 
below the low memory killer 

07:34:05.740 --> 07:34:10.056
threshold.  The low memory 
killer now has to come in and 

07:34:10.057 --> 07:34:12.295
kill something to free up some 
memory.  Well it's going to 

07:34:12.296 --> 07:34:14.296
start killing from the bottom of
this list.

07:34:17.399 --> 07:34:20.915
So maybe it kills this blue 
application.  That's gone.  We 

07:34:20.916 --> 07:34:22.348
get more memory back for the 
applications that are still 

07:34:22.349 --> 07:34:27.021
running.  But if the user now 
wants to switch and start using 

07:34:27.022 --> 07:34:29.087
that blue application, it's not 
cached any longer.

07:34:32.559 --> 07:34:33.982
It means it's going take a 
noticeably long time to launch 

07:34:33.983 --> 07:34:39.333
that application.  It could be 
two or three seconds and maybe 

07:34:39.334 --> 07:34:41.334
it's lost some state.  So this 
is where the user first starts 

07:34:42.853 --> 07:34:44.853
to real feel something's going 
on here 

07:34:46.110 --> 07:34:48.995
that's making things slower . 
If the processes that are 

07:34:48.996 --> 07:34:54.149
running continue to use more 
memory, so we get under more 

07:34:54.150 --> 07:34:55.988
memory pressure, low memory 
killers going to start to kill 

07:34:55.989 --> 07:35:01.522
more cache processes.  If they 
continue to grow more and more, 

07:35:01.523 --> 07:35:03.523
until eventually there's only a 

07:35:05.196 --> 07:35:07.646
few cache processes left, at 
this point we see the device 

07:35:07.647 --> 07:35:11.947
memory status is critical.  This
is a very bad place to be.  If 

07:35:11.948 --> 07:35:14.817
the running processes continue 
to use more memory, low memory 

07:35:14.818 --> 07:35:18.285
killer is going to have to kill 
more processes.  Eventually it's

07:35:18.286 --> 07:35:21.374
going to end up killing the 
whole map.  At this point the 

07:35:21.375 --> 07:35:23.818
user's going to ask, hey, what 
just happened to my wallpaper 

07:35:25.445 --> 07:35:27.500
because when they go home it's 
going be a black screen for a 

07:35:27.501 --> 07:35:29.763
few seconds before the wallpaper
starts up again. 

07:35:33.058 --> 07:35:35.524
If it's even worse, maybe a 
perceptible process is killed.  

07:35:35.525 --> 07:35:37.525
The user is going to say what 
just happened to my music.

07:35:39.596 --> 07:35:42.678
I was listening and it just 
stopped.  Really bad case.  The 

07:35:42.679 --> 07:35:44.739
foreground App is killed.  To 
the user this looks like the App

07:35:44.740 --> 07:35:47.427
crashed.  And the most extreme 
case you can get 

07:35:50.898 --> 07:35:52.762
in to for low memory killer 
basically it needs to kill the 

07:35:52.763 --> 07:35:55.210
system server.  This looks like 
your phone has rebooted.

07:35:58.892 --> 07:36:00.122
These are all very visible 
impacts of what happens when a 

07:36:00.123 --> 07:36:03.792
device is running low on memory.
It's not a good user experience 

07:36:03.793 --> 07:36:07.899
when this is happening on your 
device.  

07:36:09.748 --> 07:36:12.388
I want to go back to this graph 
that I was showing before about 

07:36:12.389 --> 07:36:16.084
what happens to the memory pages
on the device as you use more 

07:36:16.085 --> 07:36:21.665
memory.  This was a 2 gigabyte 
device.  What do you think it 

07:36:21.666 --> 07:36:23.666
looks like, this 

07:36:25.176 --> 07:36:27.043
graph, for 512 Meg abate device?
I'll give you a few seconds to 

07:36:27.044 --> 07:36:29.044
think 

07:36:30.259 --> 07:36:32.259
about that

07:36:38.698 --> 07:36:42.764
megabyte device?  I'll give you 
a few seconds to think about 

07:36:38.698 --> 07:36:41.244
that.  Do you have an idea what 
it looks like?

07:36:46.273 --> 07:36:48.913
So I tried it for a 512 
mega-bite device.  Start the run

07:36:48.914 --> 07:36:51.995
time and used more memory and it
looks like this.  Because 

07:36:51.996 --> 07:36:54.720
there's so little memory 
available at the beginning, 

07:36:54.721 --> 07:36:56.721
there's very 

07:36:58.177 --> 07:37:00.177
few free pages we can use up 
before the 

07:37:02.275 --> 07:37:04.133
K swap did D has to kick in and 
very few cache pages we can 

07:37:04.134 --> 07:37:06.181
reclaim before the low memory 
killers needed to start killing 

07:37:06.182 --> 07:37:10.735
things.  So you can imagine if 
you have this device and the low

07:37:10.736 --> 07:37:12.736
memory is always 

07:37:13.828 --> 07:37:15.913
active and always killing 
processes and leads to a bad 

07:37:15.914 --> 07:37:17.914
user experience, then maybe OEMs
are not going to be too 

07:37:19.004 --> 07:37:21.862
interested in shipping this 
device.  Because it just doesn't

07:37:21.863 --> 07:37:25.725
work well and that gets back to 
the ecosystem challenges I 

07:37:25.726 --> 07:37:27.726
mentioned in the beginning. 

07:37:32.027 --> 07:37:35.013
So this is why we care about 
memory.  

07:37:37.667 --> 07:37:40.557
Now how do we figure out how 
much memory an application has 

07:37:40.558 --> 07:37:42.558
used?

07:37:43.595 --> 07:37:45.595
How do we know your 
application's memory impact?

07:37:47.781 --> 07:37:49.793
I told you that memory on device
is broken down in to pages.

07:37:53.700 --> 07:37:58.265
The Linux KOL NERL is going to 
keep track of each device.  

07:37:58.266 --> 07:37:59.683
Maybe we have a system process, 
Google Play services process, a 

07:37:59.684 --> 07:38:03.558
couple of Apps running on the 
did device.  We want to know 

07:38:03.559 --> 07:38:05.848
each of their memory impacts.  
Just count up the number of 

07:38:05.849 --> 07:38:12.784
pages it's using.  It's a little
bit more complicated than this. 

07:38:12.785 --> 07:38:16.098
Because of sharing.  Because 
multiple processes on the device

07:38:16.099 --> 07:38:18.335
can be sharing memory.  For 
instance if you have an App 

07:38:18.336 --> 07:38:23.523
that's calling in to Google Play
services it's going to be 

07:38:23.524 --> 07:38:25.557
sharing some memory, perhaps 
code memory or other kinds of 

07:38:25.558 --> 07:38:29.239
memory, with the Google Play 
services process.  Then we can 

07:38:29.240 --> 07:38:33.574
ask:  How should we account for 
this shared memory?  Is that 

07:38:33.575 --> 07:38:36.842
part of the responsibility of 
the application?  Is that memory

07:38:36.843 --> 07:38:40.944
impact something that we should 
care about?  And there's a few 

07:38:40.945 --> 07:38:42.945
different ways that you can 
approach this.

07:38:45.480 --> 07:38:49.785
One is to use what we call 
resident set size for RSS.  What

07:38:49.786 --> 07:38:52.657
this means is when we're 
counting in Apps RSS we're 

07:38:52.658 --> 07:38:56.114
saying the application is fully 
responsible for all the pages of

07:38:56.115 --> 07:38:58.184
memory that it's sharing with 
other applications.  

07:39:00.626 --> 07:39:04.112
Another approach is called 
proportional set size, PSS.  

07:39:04.113 --> 07:39:06.766
And, in this case, we're going 
to say the App is responsible 

07:39:06.767 --> 07:39:09.032
for those shared pages 
proportional to the number of 

07:39:11.085 --> 07:39:13.085
processes that are sharing them.

07:39:14.152 --> 07:39:16.195
So in this case two 
applications, processes sharing 

07:39:16.196 --> 07:39:18.860
these bakes, the application is 
will say is responsible for half

07:39:18.861 --> 07:39:23.354
of them.  If there were three 
processes sharing the same 

07:39:23.355 --> 07:39:24.609
memory, we will say the 
application is responsible for a

07:39:24.610 --> 07:39:28.121
third of them and so on.  Then a
third approach you can take is 

07:39:31.196 --> 07:39:32.879
called unique set size where we 
say the application is not 

07:39:32.880 --> 07:39:35.369
responsible for any of its 
shared pages.  

07:39:38.629 --> 07:39:40.907
Now in general which approach to
take really depends on the 

07:39:40.908 --> 07:39:42.908
context.

07:39:44.177 --> 07:39:46.620
So for instance if those shared 
pages were not being used in a 

07:39:46.621 --> 07:39:48.621
Google Play 

07:39:49.889 --> 07:39:52.596
services App until your App 
called in to Google Play 

07:39:52.597 --> 07:39:54.597
services, then maybe it makes 
sense to say the App is 

07:39:56.751 --> 07:39:58.985
responsible for all of those 
pages.  We want to use RSS. 

07:40:01.039 --> 07:40:02.896
On the other hand, if those 
pages were sitting in memory in 

07:40:02.897 --> 07:40:08.193
the Google Play services process
before the App called in to 

07:40:08.194 --> 07:40:09.410
Google Play services, they were 
always there, the App is not 

07:40:09.411 --> 07:40:16.379
bringing them in to memory, then
we wouldn't want to count them. 

07:40:16.380 --> 07:40:17.594
USS would be more appropriate.  
In general we don't have access 

07:40:17.595 --> 07:40:21.070
to this high level context to 
know, at least at the system 

07:40:21.071 --> 07:40:25.205
level, so the approach we take 
is the most straight forward one

07:40:25.206 --> 07:40:30.689
which is proportionate set size 
with equal sharing.  One benefit

07:40:30.690 --> 07:40:32.690
of using PSS for evaluating 
application's memory impact 

07:40:35.209 --> 07:40:37.040
especially when looking at 
multiple processes at the same 

07:40:37.041 --> 07:40:39.500
time is it will avoid over 
counting or under counting of 

07:40:40.322 --> 07:40:42.322
shared pages.

07:40:44.237 --> 07:40:47.296
So use PSS for your applications
memory impact.

07:40:51.155 --> 07:40:53.155
And you can run this command.

07:40:58.595 --> 07:41:02.247
ADB shell dump sys MEM info-S.  
Give it your process name.  Or 

07:41:02.248 --> 07:41:04.316
give the process ID if you 
happen to do that.  This is 

07:41:04.317 --> 07:41:06.317
going to output something like 
this.

07:41:08.601 --> 07:41:10.634
An App summary view of the 
application's memory.  At the 

07:41:10.635 --> 07:41:12.635
bottom there's a total and that 

07:41:13.906 --> 07:41:15.906
number is the application's PSS.

07:41:21.710 --> 07:41:23.127
This is ADB shell dump sys MEM 
info-S. 

07:41:23.128 --> 07:41:24.993
Let's say you do this and figure
out what the PSS of your 

07:41:24.994 --> 07:41:29.977
application is.  There's a very 
interesting question to ask.  

07:41:29.978 --> 07:41:33.882
How much memory should your 
application be using?  Because, 

07:41:33.883 --> 07:41:36.107
you know, I say earlier if we 
use a lot of memory, that's bad 

07:41:36.108 --> 07:41:39.983
because low memory killer kicks 
in.  But we're actually using 

07:41:39.984 --> 07:41:41.984
memory for a reason.

07:41:43.447 --> 07:41:45.892
We're using it to provide 
features, to provide user value,

07:41:45.893 --> 07:41:48.150
to provide delightfulness.  
Everything that makes our App 

07:41:48.151 --> 07:41:52.438
great is going to be taking up 
memory.  So we have this 

07:41:52.439 --> 07:41:55.695
tradeoff between user value and 
memory.  

07:41:57.568 --> 07:41:59.623
That's what I am showing here on
this graph.  The tradeoff space.

07:42:01.857 --> 07:42:03.857
In an ideal world we're kind of 
up and to the left on the graph.

07:42:05.939 --> 07:42:08.200
We're providing a lot of user 
value without very much memory 

07:42:08.201 --> 07:42:13.337
impact at all.  But in practice 
this is going to probably be 

07:42:13.338 --> 07:42:15.338
technically infeasible.

07:42:16.398 --> 07:42:19.284
Because you need memory to 
provide value.  And there's only

07:42:19.285 --> 07:42:21.285
so much value you can 

07:42:23.757 --> 07:42:25.757
provide with a limited amount of
memory.  

07:42:26.196 --> 07:42:27.823
On the other hand, the other 
extreme would be if you are 

07:42:27.824 --> 07:42:32.345
using a lot of memory to provide
not much value.  And I think 

07:42:32.346 --> 07:42:35.838
it's safe to say this is not a 
great App.  Because it's 

07:42:35.839 --> 07:42:41.781
basically providing too much 
memory.  Using too much memory. 

07:42:41.782 --> 07:42:43.782
Unfortunately, my slides are not
showing up right.

07:42:48.179 --> 07:42:49.624
But imagine a curve on which 
there's too much memory for this

07:42:49.625 --> 07:42:51.625
App.

07:42:52.701 --> 07:42:55.979
It's not worth it to the user to
use.  There they go.  Wonderful.

07:42:58.253 --> 07:43:02.341
Next we can look at this corner 
of the graph where we're not 

07:43:02.342 --> 07:43:04.373
providing too much user value.  
We're not using too much memory.

07:43:06.606 --> 07:43:09.274
We can say this is like a small 
application.  Maybe a desk clock

07:43:09.275 --> 07:43:14.781
App.  At the other end we can 
have Apps that use a lot of 

07:43:14.782 --> 07:43:16.782
memory to provide a lot of 
value.

07:43:18.445 --> 07:43:20.322
These are large ap applications.
Maybe a photo edit or something 

07:43:20.323 --> 07:43:22.978
like that.  We can say what's 
better a small App or large App?

07:43:27.710 --> 07:43:29.946
In this case they can both be 
useful.  Except that when I said

07:43:29.947 --> 07:43:34.271
that an application is using too
much memory, that really depends

07:43:34.272 --> 07:43:37.398
on what kind of device you are 
running on.  If you are running 

07:43:37.399 --> 07:43:39.651
on a premium device it can 
support much larger 

07:43:39.652 --> 07:43:44.542
applications.  But on a smaller 
device, an entry-level device, 

07:43:44.543 --> 07:43:46.543
maybe this large App uses too 
much memory to make sense on 

07:43:46.658 --> 07:43:50.970
that.  So really I should be 
drawing a line and say too much 

07:43:50.971 --> 07:43:52.971
memory depends on the device.

07:43:56.304 --> 07:43:58.304
Premium, mid-tier and 
entry-level 

07:43:59.998 --> 07:44:01.998
might not support that large 
App.  

07:44:03.100 --> 07:44:05.560
For better or for worse what I 
see happening often is over time

07:44:05.561 --> 07:44:11.258
as you develop your application 
you tend to add more features.  

07:44:11.259 --> 07:44:13.304
It tends to take more memory.  
So you tend to go up and to the 

07:44:13.305 --> 07:44:16.152
right in this graph.

07:44:19.430 --> 07:44:21.283
Now this is actually good for 
mid-tier and premium users 

07:44:21.284 --> 07:44:23.757
because they're getting more 
value, more bang for their buck 

07:44:23.758 --> 07:44:28.036
memory wise.  But, in this case,
it's a little bit unfortunate 

07:44:28.037 --> 07:44:30.083
for the entry-level device user 
because while he could use the 

07:44:31.919 --> 07:44:34.384
older version of your App you 
have now added so many features 

07:44:34.385 --> 07:44:37.030
and it's using so much memory it
doesn't work as well on their 

07:44:37.031 --> 07:44:39.903
device.  
So the points that I want to say

07:44:39.904 --> 07:44:42.600
here, the takeaways.  Anything 
you can do to improve your 

07:44:45.299 --> 07:44:46.952
application's memory efficiency 
is good.  So, if you can move to

07:44:46.953 --> 07:44:48.953
the left on this graph.

07:44:50.692 --> 07:44:52.692
So less memory use without 
sacrificing user value is great.

07:44:54.379 --> 07:44:56.379
And just be aware that when you 
are 

07:44:57.449 --> 07:45:00.070
adding new features while it's 
good for -- it can be good for 

07:45:00.071 --> 07:45:05.621
mid-tier and premium device 
users there might be a negative 

07:45:05.622 --> 07:45:07.622
consequence for entry-level 
devices. 

07:45:12.580 --> 07:45:14.770
There's something wrong with 
this graph.  Does anyone know 

07:45:14.771 --> 07:45:17.851
what it is?  Well let me see.  
The problem that this graph is 

07:45:17.852 --> 07:45:20.758
it's suggesting that an 
application's memory use is one 

07:45:20.759 --> 07:45:24.833
number.  So you give me this 
application and I can tell you 

07:45:24.834 --> 07:45:26.834
it's PSS.

07:45:28.121 --> 07:45:30.172
But in practice that's far from 
the case because an 

07:45:30.173 --> 07:45:32.173
application's memory impact 
depends on a whole bunch of 

07:45:32.812 --> 07:45:34.812
different things.

07:45:35.899 --> 07:45:37.899
Such as the application use 
case, the 

07:45:38.946 --> 07:45:41.996
platform configuration, and 
device memory pressure.  And so 

07:45:41.997 --> 07:45:44.676
this is important to be aware of
when you are testing your 

07:45:45.077 --> 07:45:47.512
application's memory.  Perhaps 
testing for regressions or to 

07:45:49.834 --> 07:45:51.656
see if an optimization is 
working to make sure that you 

07:45:51.657 --> 07:45:54.173
are testing the application use 
case you care about, and 

07:45:57.252 --> 07:45:58.674
you are controlling all of the 
other parameters so that you are

07:45:58.675 --> 07:46:01.369
doing a proper Apples to Apples 
comparison. 

07:46:03.820 --> 07:46:05.820
Let me go into a little bit more
detail.

07:46:06.873 --> 07:46:08.921
So how does an application use 
case impact memory?  

07:46:10.986 --> 07:46:13.882
What I've done here is I started
using G Mail.  And I've switched

07:46:13.883 --> 07:46:17.581
to different use cases in the 
application over time.  So every

07:46:17.582 --> 07:46:19.824
twenty seconds I switch.  I 
started by viewing the inbox.

07:46:23.945 --> 07:46:26.411
That's using just a little bit 
100 megabytes.  Then I switched 

07:46:26.412 --> 07:46:30.068
to using an email that had text.
Using a little bit more memory. 

07:46:30.069 --> 07:46:32.126
I switched to a different 
memory.  This one this time with

07:46:32.127 --> 07:46:35.847
pictures.  It uses more memory. 
Then I started to compose an 

07:46:35.848 --> 07:46:39.579
email.  Used a little bit less. 
I stopped using the App and it 

07:46:39.580 --> 07:46:42.035
used less memory.  So you can 
see here that depending on 

07:46:46.556 --> 07:46:49.831
the application use case, memory
impact varies significantly.  

07:46:49.832 --> 07:46:52.274
And it doesn't necessarily make 
any sense to compare your 

07:46:52.275 --> 07:46:54.753
application's memory from Point 
A and Point B because 

07:46:58.993 --> 07:47:00.993
these are different use cases . 

07:47:02.943 --> 07:47:05.379
Application use case is pretty 
straight forward factor.  

07:47:05.380 --> 07:47:07.836
Something that's less obvious is
that your memory will change a 

07:47:07.837 --> 07:47:10.471
lot depending on what your 
platform configuration is.

07:47:13.949 --> 07:47:16.211
So what I am showing in this 
graph is I've picked one of 

07:47:16.212 --> 07:47:18.212
those application use cases from
the previous slide.

07:47:20.931 --> 07:47:23.178
G Mail looking at an email with 
pictures.  And I've run it on a 

07:47:23.179 --> 07:47:25.179
bunch of different devices.

07:47:31.877 --> 07:47:33.907
Soo nexus four, nexus 5S and a 
number of different platform 

07:47:33.908 --> 07:47:35.908
versions within the same device.

07:47:39.716 --> 07:47:42.190
For the nexus 5 I ran it on 
Android M and O.  And you KAen 

07:47:42.191 --> 07:47:46.679
see there's quite a variation in
how much memory this application

07:47:46.680 --> 07:47:50.579
use case is taking up.  
This comes about because well 

07:47:50.580 --> 07:47:54.234
for different devices we have 
different screen resolutions, 

07:47:54.235 --> 07:47:58.214
different screen sizes which 
means bit maps take up different

07:47:58.215 --> 07:48:00.215
amounts of memory.

07:48:01.284 --> 07:48:02.309
You might have different 
platform optimizations on the 

07:48:02.310 --> 07:48:04.310
different devices.

07:48:08.002 --> 07:48:11.953
You might have a different SDIEG
oat configuration.  It's running

07:48:11.954 --> 07:48:16.050
code differently.  There's a lot
of different factors going on 

07:48:16.051 --> 07:48:18.051
here which means when you switch
to a different plat form 

07:48:19.740 --> 07:48:21.740
configuration you are going to 
get different memory use. 

07:48:22.790 --> 07:48:25.264
So I would say when you are 
testing your application's 

07:48:25.265 --> 07:48:27.522
memory use, try as hard as you 
can to use a consistent platform

07:48:31.185 --> 07:48:33.636
set-up, the same kind of device.
The same platform version and 

07:48:33.637 --> 07:48:35.637
the same 

07:48:38.332 --> 07:48:40.332
scenario of what's running on 
device . 

07:48:40.623 --> 07:48:42.069
Now there's a third case I want 
to talk about which is pretty 

07:48:42.070 --> 07:48:47.041
interesting because it's a 
little bit counter intuitive.  

07:48:47.042 --> 07:48:49.721
Which is an application's memory
impact depends on the memory 

07:48:49.722 --> 07:48:53.801
pressure on device.  
So here what I've done is taken 

07:48:53.802 --> 07:48:55.802
Chrome 

07:48:56.892 --> 07:48:59.148
application and I started 
running it on a device that had 

07:48:59.149 --> 07:49:01.621
plenty of free memory.  Then I 
set up some native process in 

07:49:03.046 --> 07:49:04.879
the background that's going to 
slowly use up more and more 

07:49:04.880 --> 07:49:09.818
memory on the device so that I 
can see what happens to Chrome 

07:49:09.819 --> 07:49:11.853
when the device gets under 
medium memory pressure or high 

07:49:11.854 --> 07:49:14.154
memory pressure.  We can see 
when there's plenty of free 

07:49:16.786 --> 07:49:18.841
memory on the device, so low 
memory pressure, Chrome's PSS is

07:49:18.842 --> 07:49:20.842
pretty flat except for that 
little spike which is 

07:49:25.606 --> 07:49:28.674
probably some variation in App 
use case of the platform.  When 

07:49:28.675 --> 07:49:30.675
the device gets under enough 

07:49:33.176 --> 07:49:35.225
memory pressure that K swap D 
kicks in and starts to reclaim 

07:49:35.226 --> 07:49:38.504
cache pages.  While some of 
those pages reclaim ready going 

07:49:38.505 --> 07:49:40.505
to be from the Chrome process 
and that's going to cause 

07:49:41.762 --> 07:49:43.597
Chrome's memory impact to go 
down.  Its PSS is going to go 

07:49:43.598 --> 07:49:48.466
down.  Until eventually if the 
device has so much memory 

07:49:48.467 --> 07:49:50.522
pressure the low memory killer 
is active and it decides it 

07:49:50.523 --> 07:49:55.880
wants to kill Chrome, then PSS 
for Chrome is going to very 

07:49:55.881 --> 07:49:58.564
quickly drop to zero.  
So what you can see here is that

07:49:58.565 --> 07:50:03.684
even for the same application 
use case, the same platform 

07:50:03.685 --> 07:50:05.685
configuration we have a 

07:50:06.800 --> 07:50:08.800
wide range of PSS values we 
might get.

07:50:09.866 --> 07:50:11.476
So you have to be a little bit 
careful.  Imagine I've come up 

07:50:11.477 --> 07:50:16.096
with this optimized version of 
the Chrome APK.  And it has this

07:50:16.097 --> 07:50:20.353
kind of lighter blue line for 
the memory profile.  I'm 

07:50:20.354 --> 07:50:22.424
confident that this is an 
optimized version of the APK 

07:50:22.425 --> 07:50:27.581
from a memory standpoint because
for every level of device memory

07:50:27.582 --> 07:50:31.237
pressure it uses less memory.  
But if I'm doing a test and I 

07:50:31.238 --> 07:50:33.238
sample 

07:50:35.320 --> 07:50:37.320
the PSS of the original Chrome 
version 

07:50:38.377 --> 07:50:40.218
at Point A but I sample the PSS 
of the supposedly optimized 

07:50:40.219 --> 07:50:42.219
Chrome version of 

07:50:43.696 --> 07:50:46.540
Point B, and I compare, and I 
say oh well A is less than B so 

07:50:46.541 --> 07:50:51.034
A has less memory, I might 
falsely conclude that the 

07:50:51.035 --> 07:50:53.683
original version of Chrome is 
better than my optimized 

07:50:53.684 --> 07:50:57.397
version.  So you really have to 
be careful when comparing PSS 

07:50:57.398 --> 07:50:59.398
values to make sure that 

07:51:00.665 --> 07:51:02.296
the device memory pressure is 
the same otherwise you can get 

07:51:02.297 --> 07:51:06.596
these funny results. 
My advice, because it's pretty 

07:51:06.597 --> 07:51:08.597
hard to 

07:51:09.662 --> 07:51:12.451
control for device memory 
pressure, is to run your tests 

07:51:12.452 --> 07:51:14.452
on the device that has 

07:51:16.182 --> 07:51:18.046
plenty of free ram so there's 
low device memory pressure and 

07:51:18.047 --> 07:51:20.047
you can see the PSS numbers will
be much more stable in that 

07:51:22.693 --> 07:51:24.693
area . 

07:51:29.314 --> 07:51:31.389
So we talked about why you want 
your applications not to take up

07:51:31.390 --> 07:51:34.025
too much memory.  How you can 
evaluate your application's 

07:51:34.026 --> 07:51:38.115
memory impact.  Let me now give 
you some tips for how to reduce 

07:51:38.116 --> 07:51:40.116
your application's memory 
impact. 

07:51:41.599 --> 07:51:43.040
And the first tip is check out 
Android studio's memory 

07:51:43.041 --> 07:51:45.041
profiler.

07:51:46.715 --> 07:51:49.562
Profile your application's Java 
heap.  This is going to give you

07:51:49.563 --> 07:51:52.842
a ton of information, useful 
information about the Java 

07:51:52.843 --> 07:51:54.884
objects on your heap.  So where 
they're allocated, what's 

07:51:58.610 --> 07:51:59.828
holding on to them, how big they
are, pretty much anything you 

07:51:59.829 --> 07:52:02.312
want to know about the Java heap
you can see from this.

07:52:05.818 --> 07:52:08.913
My tip for you is to focus on 
the App heap.  So, if you open 

07:52:08.914 --> 07:52:10.964
this up in DROOID studio you 
will see three heaps.

07:52:15.111 --> 07:52:20.656
SDIEG OT, App.  The image teen 
and SDIEG OT are inpartyed from 

07:52:20.657 --> 07:52:22.906
the system when your application
first launches so there's not 

07:52:22.907 --> 07:52:24.907
much you can do about that.

07:52:27.178 --> 07:52:29.178
But definitely you can do a lot 
on the App heap.  

07:52:30.260 --> 07:52:31.711
I'm not going to go into a ton 
of detail how you would use this

07:52:31.712 --> 07:52:35.375
tool.  Or actually not very much
at all because Esteban is going 

07:52:35.376 --> 07:52:37.376
to be giving a 

07:52:38.461 --> 07:52:40.717
talk tomorrow at 12:30 on 
exactly how to use this tool.  

07:52:40.718 --> 07:52:43.199
His team built the tool.  He's 
going be talking about how to do

07:52:45.449 --> 07:52:47.890
live allocation tracking and 
heap analysis.  So I highly 

07:52:47.891 --> 07:52:49.891
recommend you go check out 

07:52:53.544 --> 07:52:58.067
that talk tomorrow at 12:30 . 
So you say, Richard, you have 

07:52:58.068 --> 07:53:01.973
told us that we should care 
about PSS.  That's our 

07:53:01.974 --> 07:53:04.940
application's memory impact.  
You just told us we should use 

07:53:04.941 --> 07:53:06.941
Android 

07:53:08.261 --> 07:53:11.548
studios memory profile to 
profile a Java heap.  But if we 

07:53:11.549 --> 07:53:13.809
look here we see the Java heap 
is not actually all that much of

07:53:16.500 --> 07:53:18.940
the overall memory impact of the
application.  What about all the

07:53:18.941 --> 07:53:20.941
rest of this memory?

07:53:22.027 --> 07:53:25.506
What should we do here?  
This is ticky because most of 

07:53:25.507 --> 07:53:27.507
these 

07:53:28.783 --> 07:53:31.428
applications are or allocations,
sorry, are originating deep 

07:53:31.429 --> 07:53:36.333
within the platform stack, the 
Android stack.  So, if you want 

07:53:36.334 --> 07:53:38.334
to know about them and really 
understand them it helps to know

07:53:42.479 --> 07:53:44.479
a lot more about, say, how 
frameworks is 

07:53:46.395 --> 07:53:48.395
implementing the view system of 
resources.

07:53:50.267 --> 07:53:52.267
Am how the native library and 
web view 

07:53:53.370 --> 07:53:55.023
is working from the Android run 
time.  How it's running your 

07:53:55.024 --> 07:53:59.925
code.  From the hardware 
abstraction layer.  How graphics

07:53:59.926 --> 07:54:02.174
is working.  Down to virtual 
memory management in 

07:54:05.238 --> 07:54:07.882
the Linux colonel.  
By the way I live in the orange 

07:54:07.883 --> 07:54:10.929
block in the middle of the 
Android run time.  That's where 

07:54:10.930 --> 07:54:13.787
I am in this stack.  
So you might ask, okay, so this 

07:54:13.788 --> 07:54:18.307
memory is coming from the 
platform or within the platform,

07:54:18.308 --> 07:54:20.308
should we be using 

07:54:24.087 --> 07:54:26.087
platform tools to diagnose this 
memory?

07:54:29.179 --> 07:54:31.179
For instance in dump sys memo-S 
isn't 

07:54:32.399 --> 07:54:34.716
enough you can try running it 
with dash A to show everything 

07:54:34.717 --> 07:54:36.717
you can see from a platform 
perspective about your 

07:54:37.239 --> 07:54:39.239
application's memory use.  This 
will give you a much more 

07:54:40.340 --> 07:54:42.340
detailed breakdown.

07:54:44.045 --> 07:54:46.492
For instance instead of seeing 
your code memory regressed you 

07:54:46.493 --> 07:54:48.493
can see is it 

07:54:50.767 --> 07:54:52.767
because my dot SO memory 
mappings have regressed?

07:54:55.050 --> 07:55:00.581
Or dot APK.  It will also show 
you a break down of the 

07:55:00.582 --> 07:55:01.946
different categories of 
memories.  So private, clean, 

07:55:01.947 --> 07:55:06.244
shared, dirty and so on.  
Private dirty memory is like the

07:55:06.245 --> 07:55:08.245
used memory I was talking about 
at the beginning.

07:55:12.404 --> 07:55:15.265
Private clean memory, clean 
suggest it's like the cache 

07:55:15.266 --> 07:55:18.124
memory that also lives on dis.

07:55:26.547 --> 07:55:27.468
Ifs that not enough detail maybe
you (?) There's show map you can

07:55:27.469 --> 07:55:32.135
do run on your application and 
it's going give you a more fine 

07:55:32.136 --> 07:55:34.787
grain breakdown of your memory 
mappings.  And it will give you 

07:55:34.788 --> 07:55:36.788
specific files 

07:55:38.074 --> 07:55:40.074
that are being memorymaned in 
your 

07:55:42.093 --> 07:55:44.067
application and this can help 
pinpoint what files might have 

07:55:44.068 --> 07:55:48.813
led to regressions.  
In the platform we have a heap 

07:55:48.814 --> 07:55:50.843
dump viewer that I've developed.

07:55:56.408 --> 07:55:58.666
Experimental heap dump viewer 
that try called ahat.  You can 

07:55:58.667 --> 07:56:02.120
try using that to learn more 
about your Java heap.  Though 

07:56:02.121 --> 07:56:03.349
Android studios memory profile 
will have all the same 

07:56:03.350 --> 07:56:07.663
information. 
And then we also have on the 

07:56:07.664 --> 07:56:12.350
platform something called debug 
MALLOC.  You can instrument your

07:56:12.351 --> 07:56:17.450
application so that every native
allocation it makes it's going 

07:56:17.451 --> 07:56:19.451
save a back trace, a stack trace
to that allocation.

07:56:22.770 --> 07:56:25.683
You take what we call a native 
heap nap shot of your App when 

07:56:25.684 --> 07:56:29.968
it's running instrumented and if
you have the symbols you can 

07:56:29.969 --> 07:56:32.224
de-symbolize the stack traces 
and you can get native stack 

07:56:32.225 --> 07:56:35.493
traces for all of your native 
allocations. 

07:56:38.156 --> 07:56:40.156
This has quite a bit of overhead
at run 

07:56:42.570 --> 07:56:44.830
time so it can be a little bit 
tricky to work but it provides a

07:56:44.831 --> 07:56:47.110
lot of insight. 
So we have these platform tools,

07:56:47.111 --> 07:56:51.209
should we use them, can we use 
them.  Certainly you could.  

07:56:51.210 --> 07:56:56.360
They're all available.  But some
caveats with these tools.  They 

07:56:56.361 --> 07:56:59.306
tend not to be well supported . 
They have very clumsy user 

07:56:59.307 --> 07:57:01.307
interfaces 

07:57:03.146 --> 07:57:05.558
as you just witnessed from my 
snapshots.  This approach 

07:57:05.559 --> 07:57:07.797
requires quite a bit of deep 
platform expertise to understand

07:57:10.254 --> 07:57:12.254
for instance what's the 
difference 

07:57:14.959 --> 07:57:17.822
between DEX M map, and where are
these things coming from for 

07:57:17.823 --> 07:57:22.696
instance.  You might need to 
have a rooted device such as in 

07:57:22.697 --> 07:57:24.765
the case for show map and de-bug
mall OK you might have to build 

07:57:24.766 --> 07:57:26.766
a platform yourself if you want 
to get 

07:57:29.650 --> 07:57:31.650
your hands on ahat or the 
symbols that 

07:57:35.167 --> 07:57:37.417
debug mall OK needs to 
symbolize.  The numbers tend to 

07:57:37.418 --> 07:57:41.476
be pretty noisy.  And a lot of 
the memory use you will see from

07:57:41.477 --> 07:57:43.477
these tools is outside of your 
control.

07:57:47.822 --> 07:57:49.254
So you might see ZYGOT 
allocations and run time 

07:57:49.255 --> 07:57:51.255
allocations that aren't related 

07:57:52.371 --> 07:57:54.371
to code.  So I don't think this 
is the best use 

07:57:56.675 --> 07:57:58.675
of your time to try to use these
tools.  

07:57:59.133 --> 07:58:01.986
I'm going give a bit of a 
different suggestion.  If you 

07:58:01.987 --> 07:58:07.348
want improve your overall memory
use, do two things.  One.  

07:58:07.349 --> 07:58:09.605
Profile your Java heap using 
Android studio memory profiler 

07:58:09.606 --> 07:58:11.606
like I showed before.

07:58:13.086 --> 07:58:15.086
Two, reduce your APK size.

07:58:16.785 --> 07:58:18.841
Let me tell you why I think this
is a reasonable approach for you

07:58:18.842 --> 07:58:21.959
to take to reduce your overall 
memory impact. 

07:58:24.826 --> 07:58:27.521
First is that allocations that 
are outside of the Java heap, 

07:58:27.522 --> 07:58:32.260
many of those are tied to Java 
allocations.  So your 

07:58:32.261 --> 07:58:34.087
application is calling to the 
Android frameworks which is 

07:58:34.088 --> 07:58:38.348
calling in to native libraries 
under the cover which is doing 

07:58:38.349 --> 07:58:41.206
native allocations or even 
graphics allocations whose 

07:58:41.207 --> 07:58:43.207
lifetime 

07:58:44.916 --> 07:58:46.916
is tied to Java objects.  
For instance, just to give you a

07:58:49.807 --> 07:58:51.807
sampling, in Java on your Java 
heap if 

07:58:54.113 --> 07:58:56.351
you see these kinds of objects, 
so a SQL light database, web 

07:58:56.352 --> 07:58:58.352
view, patterns, 

07:59:01.282 --> 07:59:03.507
those all have negative 
allocations associated with 

07:59:03.508 --> 07:59:05.508
them.

07:59:07.388 --> 07:59:09.853
If you have thread instants on 
your Java heap that's a 

07:59:09.854 --> 07:59:11.854
associated with stack memory.

07:59:14.552 --> 07:59:16.552
If you are using bit maps or 
surface 

07:59:17.638 --> 07:59:18.847
views that can lead to graphics 
memory use.  And there are many 

07:59:18.848 --> 07:59:20.848
others.

07:59:22.342 --> 07:59:24.794
So if you want -- if you are 
focusing on your Java heap and 

07:59:24.795 --> 07:59:29.300
worried it's not going to help 
anywhere else, that's not true. 

07:59:29.301 --> 07:59:31.143
Optimizations on your Java heap 
are going to help with other 

07:59:31.144 --> 07:59:33.617
memory categories as well.  

07:59:38.050 --> 07:59:40.129
I am trying as part of my job to
surface better this information 

07:59:40.130 --> 07:59:43.812
about these non-Java heap 
allocations.  And you start to 

07:59:43.813 --> 07:59:45.813
see that if you look 

07:59:47.896 --> 07:59:49.726
at Android studios memory 
profilers it will report a 

07:59:49.727 --> 07:59:51.781
number called native.  And I 
just want to let you know this 

07:59:54.055 --> 07:59:56.890
is kind of an approximation or 
suggestion of some of the 

07:59:56.891 --> 07:59:59.772
non-Java memory that might be 
associated with the Jaffa 

07:59:59.773 --> 08:00:02.001
object.  Take it with a little 
bit of a grain 

08:00:05.087 --> 08:00:07.167
of salt but it works really well
for surfacing the memory impacts

08:00:07.168 --> 08:00:12.947
of, say, bit maps . 
My second suggestion was reduce 

08:00:12.948 --> 08:00:16.187
your APK size.  Why do you do 
this?  Because a lot of things 

08:00:16.188 --> 08:00:18.188
that take up 

08:00:19.482 --> 08:00:21.482
space in your APK take up space 
in memory at run time as well.

08:00:25.523 --> 08:00:28.274
For instance, your classes.DEX 
file is going to take up space 

08:00:28.275 --> 08:00:30.954
in terms of class objects.  It's
going to take up code memory for

08:00:33.405 --> 08:00:35.478
the memory map DEX file.  It's 
going take up what shows up in 

08:00:37.708 --> 08:00:41.811
private other in the App summary
review.  Run-time metadata.  

08:00:41.812 --> 08:00:44.293
Representations for your fields,
methods and STRIJZ and so on. 

08:00:44.294 --> 08:00:48.983
If you have bit maps in your APK
when those are loaded at 

08:00:48.984 --> 08:00:53.094
run-time the pixel data is going
to take up space depending on 

08:00:53.095 --> 08:00:55.948
the platform version or how you 
have loaded them in the Java 

08:00:55.949 --> 08:00:57.977
heap, native heap or as 
graphics. 

08:01:00.658 --> 08:01:02.658
Resources in your APK take up 
space on the Java heap.

08:01:04.594 --> 08:01:07.084
Say you can an asset manager 
object.  On the native heap you 

08:01:07.085 --> 08:01:10.146
have a parsed zip file structure
that shows up there and you are 

08:01:10.147 --> 08:01:12.147
going to have code memory 

08:01:13.559 --> 08:01:15.559
for your APKM map.

08:01:20.248 --> 08:01:22.274
And dot SO files if you are 
shipping libraries when you are 

08:01:22.275 --> 08:01:24.312
accessing those libraries at run
time it's going take up space. 

08:01:24.313 --> 08:01:26.975
So all of these things if you 
can shrink 

08:01:30.065 --> 08:01:32.899
them, reduce your APK size, you 
reduce your memory size.  I will

08:01:32.900 --> 08:01:34.900
tell you that measuring APK 

08:01:36.217 --> 08:01:38.271
size reliably is much easier 
than memory because for an APK 

08:01:38.272 --> 08:01:42.589
you actually do have one in UB 
for this size.  If you measure 

08:01:42.590 --> 08:01:46.912
the APK size for a single APK 
repeatedly you will get the same

08:01:46.913 --> 08:01:48.913
result.

08:01:50.166 --> 08:01:52.166
Very much unlike memory . 

08:01:54.280 --> 08:01:56.311
There was a talk at Google I/O 
last year called best practices 

08:01:56.312 --> 08:02:00.622
to slim down your App size.  I 
recommend you check that out.  

08:02:00.623 --> 08:02:02.467
That will give you more advice, 
more concrete action items you 

08:02:02.468 --> 08:02:04.468
can take to 

08:02:05.736 --> 08:02:09.200
shrink these. 
Let me do a quick recap why we 

08:02:09.201 --> 08:02:12.315
care about memory.  What I 
suggest you to do improve your 

08:02:13.328 --> 08:02:16.788
application's memories. 
First, I talked about how as we 

08:02:16.789 --> 08:02:21.467
use more memory on device, the 
low memory killer is going to 

08:02:21.468 --> 08:02:24.785
kick in and it's going kill 
processes.  If the user cares 

08:02:24.786 --> 08:02:27.205
about these processes, that's 
bad. 

08:02:30.930 --> 08:02:33.172
If the device is getting low 
memory killers running too much,

08:02:33.173 --> 08:02:35.173
then OEMs 

08:02:36.239 --> 08:02:38.475
won't want to produce the entry 
level device then we use those 

08:02:38.476 --> 08:02:40.476
devises and 

08:02:41.574 --> 08:02:44.249
lose those users.  
To evaluate your application's 

08:02:44.250 --> 08:02:49.603
memory impact, use PSS.  
Anything you can do to improve 

08:02:49.604 --> 08:02:53.689
your memory efficiency is good. 
When you are testing for memory 

08:02:56.158 --> 08:02:57.780
regressions or optimizations, 
make sure you are targeting the 

08:02:57.781 --> 08:02:59.781
application use 

08:03:01.254 --> 08:03:02.080
case you care about and 
controlling for the platform 

08:03:02.081 --> 08:03:04.976
configuration. 
Test on a device that has plenty

08:03:04.977 --> 08:03:06.977
of free 

08:03:08.251 --> 08:03:10.550
ram to help control device 
memory pressure.  And to reduce 

08:03:10.551 --> 08:03:12.551
your application's 

08:03:13.865 --> 08:03:15.865
memory use, do try out Android 
studios 

08:03:17.553 --> 08:03:19.823
memory profiler focus on the App
heap.  Go to the session that 

08:03:19.824 --> 08:03:23.897
Esteban is giving tomorrow to 
learn more about how to do that.

08:03:26.138 --> 08:03:28.138
Do what you can to reduce your 
APK size.

08:03:29.819 --> 08:03:31.853
Check out the talk from last 
year on how you can do that. 

08:03:31.854 --> 08:03:33.854
So thank you all for coming.

08:03:37.402 --> 08:03:39.233
I would love to chat with you 
more and hear more about the 

08:03:39.234 --> 08:03:42.719
memory challenges you are 
facing.  So you will find me -- 

08:03:42.720 --> 08:03:47.431
I'll hang out for a little while
outside after the stage.  And 

08:03:47.432 --> 08:03:50.286
you can also find me at the 
Android run-time office hours 

08:03:50.287 --> 08:03:52.287
which are 

08:03:54.758 --> 08:03:56.419
5:30 to just a couple hours in 
tent F after this talk.  Thank 

08:03:56.420 --> 08:03:58.420
you very much.  
(Applause).

08:08:46.325 --> 08:08:48.325
Connection test.   
Connection test.

08:09:03.028 --> 08:09:06.020
ADREE

08:09:15.618 --> 08:09:17.618
Andrian Secord

08:09:26.260 --> 08:09:28.260
drian Secord
.

08:09:37.130 --> 08:09:39.130
YOOEZ

08:12:12.880 --> 08:12:14.880
MOOE

08:12:21.415 --> 08:12:23.415
DC.

08:12:33.699 --> 08:12:35.699
.

08:12:43.734 --> 08:12:46.410
Realtime captioning on this 
screen.

08:15:04.308 --> 08:15:06.308
KASH

08:15:16.695 --> 08:15:18.695
Cache
.

08:25:23.211 --> 08:25:27.104
&gt;&gt; LYNN JEPSEN:  Good afternoon 
everyone.  Welcome to our 

08:25:27.105 --> 08:25:30.986
session on how to incorporate 
what's new in material design 

08:25:30.987 --> 08:25:32.987
into your existing code base.

08:25:35.555 --> 08:25:37.555
My name is Lynn Jepsen.  I'm the
engineering lead of materials 

08:25:41.552 --> 08:25:43.552
web team. 

08:25:44.562 --> 08:25:48.562
&gt;&gt; ADRIAN SECORD:  My name is 
Adrian SEecord.  I'm the lead 

08:25:44.562 --> 08:25:46.562
for our shared code libraries.  

08:25:53.646 --> 08:25:55.568
&gt;&gt; LYNN JEPSEN:  We're going to 
show you how to incorporate all 

08:25:55.569 --> 08:25:59.235
the new goodness of material 
design into your existing 

08:25:55.569 --> 08:25:59.569
developer work flow.  You are 
probably in this talk because 

08:25:55.569 --> 08:25:57.610
you've already built an 
application.  And you are 

08:25:57.611 --> 08:26:01.344
wondering, all these new 
material tools and components, 

08:25:57.611 --> 08:26:01.758
they sound awesome, but 
realistically speaking, can I 

08:26:01.759 --> 08:26:03.991
incorporate them into my 
existing code base? .  The 

08:26:03.992 --> 08:26:06.649
answer is yes.  Okay we're going
to show you how to 

08:26:10.168 --> 08:26:12.168
update pieces of your App to use

08:26:13.233 --> 08:26:15.083
material design without feeling 
like you have to rewrite your 

08:26:15.084 --> 08:26:18.340
entire application. 
First let's talk about some of 

08:26:18.341 --> 08:26:23.925
the new things in the material 
design ecosystem and how that 

08:26:23.926 --> 08:26:26.171
supports our existing MDC 
libraries.  Then we're going 

08:26:26.172 --> 08:26:30.278
does a walk through of the code 
and show you some example code 

08:26:30.279 --> 08:26:34.351
using MDC.  Then we're going to 
talk about some of the benefits 

08:26:34.352 --> 08:26:37.219
of using MDC in your existing 
code base.  

08:26:39.261 --> 08:26:41.261
So what's new in material?  
There are a lot of new things in

08:26:41.944 --> 08:26:43.768
material design this year.  
We've done a lot of 

08:26:43.769 --> 08:26:48.282
announcements.  We've done 
improvements to our guidance.  

08:26:48.283 --> 08:26:50.283
We've had improvements to our 
components.

08:26:51.970 --> 08:26:54.619
And we've launched a brand-new 
material tools suite.  We're 

08:26:54.620 --> 08:26:57.059
going to show you how each of 
these tools supports developers.

08:26:59.725 --> 08:27:03.805
The first tool you should 
absolutely know about is 

08:27:03.806 --> 08:27:06.248
material design guidance.  We've
really expanded and enhanced 

08:27:08.125 --> 08:27:10.979
these articles this year.  So it
starts with an overview of the 

08:27:11.790 --> 08:27:14.247
material metaphor.  And then it 
dives into some of the 

08:27:17.588 --> 08:27:19.827
foundational UI practices around
color, typing on RA FI, 

08:27:19.828 --> 08:27:24.104
elevation.  This is all really 
good interesting reading, but 

08:27:24.105 --> 08:27:26.105
perhaps a bit theoretical when 
you are trying to incorporate 

08:27:27.365 --> 08:27:31.222
material design into your 
existing code base.  So material

08:27:31.223 --> 08:27:33.223
design guidelines also provides 
tactical guidance on how to use 

08:27:33.874 --> 08:27:35.874
our components.

08:27:37.350 --> 08:27:39.795
Like button, App bar, text 
field, et cetera.  

08:27:42.279 --> 08:27:43.708
These articles they're 
policticable to developers not 

08:27:43.709 --> 08:27:48.246
just designers.  So let me give 
you an example.  Say your 

08:27:48.247 --> 08:27:52.370
designer makes a mock with a 
material design button.  When 

08:27:52.371 --> 08:27:54.371
you go the button it shows text.

08:27:57.699 --> 08:27:59.116
But when you go to put the text 
inside your application the text

08:27:59.117 --> 08:28:03.610
wraps to two lines.  You are not
sure if you should increase the 

08:28:03.611 --> 08:28:08.711
width of the button or just let 
the text wrap.  If you read the 

08:28:08.712 --> 08:28:11.566
article for the material design 
button your question is answered

08:28:11.567 --> 08:28:15.238
quite quickly.  There is clear 
guidance that you should not let

08:28:15.239 --> 08:28:17.239
the text wrap for a button.

08:28:19.708 --> 08:28:21.338
These articles, they help 
developers guess correctly when 

08:28:21.339 --> 08:28:25.816
you are in the middle of feature
development F. To make sure 

08:28:25.817 --> 08:28:28.049
these articles are applicable to
developers, we have our 

08:28:31.124 --> 08:28:33.596
own engineers like myself and 
Adrian, actually collaborate 

08:28:33.597 --> 08:28:37.276
with designers as they're 
drafting these articles.  Our 

08:28:37.277 --> 08:28:39.277
own collective engineering 
experience, provides a lot of 

08:28:40.761 --> 08:28:42.761
perspective on what sorts of 
problems 

08:28:44.054 --> 08:28:47.536
developers frequently encounter.
&gt;&gt; ADRIAN SECORD:  So that first

08:28:47.537 --> 08:28:50.602
part with all the guidelines 
feeds into the second part we 

08:28:50.603 --> 08:28:53.530
want to talk about which is MDC.
So MDC stands for material 

08:28:53.531 --> 08:28:57.604
components.  And it's our set of
shared librarys that you can use

08:28:57.605 --> 08:29:01.328
to build material Apps and 
websites.  It's actually four 

08:29:01.329 --> 08:29:05.643
separate libraries.  And they're
built to match the guidelines 

08:29:05.644 --> 08:29:07.884
that we see on the design 
website.  We want to support 

08:29:07.885 --> 08:29:12.603
developers where they're at 
right now.  So the library is 

08:29:12.604 --> 08:29:14.874
the platforms we choose are 
chosen based on where you are 

08:29:14.875 --> 08:29:18.129
developing. 
So the first one isn't going to 

08:29:18.130 --> 08:29:23.063
be too surprising.  We have a 
library called MDC Android.  MDC

08:29:23.064 --> 08:29:25.064
Android is the open source 

08:29:26.524 --> 08:29:29.166
evolution of Android's previous 
design support library.  So 

08:29:29.167 --> 08:29:31.031
we've taken a piece of what used
to be inside of Android and 

08:29:31.032 --> 08:29:36.607
pulled it out into the open 
source in to GitHub so you can 

08:29:36.608 --> 08:29:38.608
use it directly to interact with
us 

08:29:41.106 --> 08:29:43.106
and work with on us on the 
GitHub Reno. 

08:29:43.458 --> 08:29:45.458
The second one is MDC iOS.

08:29:47.126 --> 08:29:48.543
This is the open source 
application of Google's internal

08:29:48.544 --> 08:29:51.608
UI library.  You might be a 
little surprised that Google 

08:29:51.609 --> 08:29:54.260
does iOS development.  I'm not 
sure if you are or aren't.

08:29:57.306 --> 08:29:58.572
But Google is dedicated to 
serving its customers on 

08:29:58.573 --> 08:30:03.687
whatever platform we find them. 
Fun fact actually.  MDC iOS was 

08:30:03.688 --> 08:30:05.751
the first open source library 
that material put out way back 

08:30:07.361 --> 08:30:09.361
in twenty 15 and it's been 
hanging out 

08:30:11.662 --> 08:30:13.662
on the GitHub reap repo since 
then.

08:30:15.600 --> 08:30:17.829
Another fun fact actually at I/O
twenty 18 there are as many 

08:30:17.830 --> 08:30:19.830
developers 

08:30:21.347 --> 08:30:23.347
who say they're developing for 
iOS as for Android. 

08:30:23.805 --> 08:30:26.040
The third platform you might be 
not quite as familiar with 

08:30:26.041 --> 08:30:29.935
depending on sort of what talks 
and things you have GEN going to

08:30:29.936 --> 08:30:32.811
I/O at this year but it's 
flutter.  So flutter is a UI 

08:30:32.812 --> 08:30:37.346
framework.  It's written in the 
dart language.  You wrap your 

08:30:37.347 --> 08:30:40.216
application once then it 
compiles down to native Android 

08:30:40.217 --> 08:30:44.744
and iOS Apps.  Flutter is in its
first public beta.  It's 

08:30:44.745 --> 08:30:46.576
developing a lot of buzz with 
developers.  You might have seen

08:30:46.577 --> 08:30:50.890
the talk earlier today by one of
our colleagues called code 

08:30:50.891 --> 08:30:53.213
beautiful UI with flutter and 
material design.  If you didn't 

08:30:53.214 --> 08:30:54.863
see the talk and you are 
interested in seeing it you can 

08:30:54.864 --> 08:30:56.864
catch it 

08:30:59.134 --> 08:31:00.965
on Youtube in a couple of hour 
Zs.  

08:31:00.966 --> 08:31:02.791
&gt;&gt; LYNN JEPSEN:  For web we 
focus on providing two core web 

08:31:02.792 --> 08:31:06.911
technologies.  CSS and Java 
script.  So as many of you 

08:31:06.912 --> 08:31:11.663
probably know the web is a very 
diverse platform.  There a lot 

08:31:11.664 --> 08:31:14.524
of ways to do web development.  
We found that providing CSS and 

08:31:14.525 --> 08:31:18.836
JAV ave script makes MDC web 
usable by multiple web 

08:31:18.837 --> 08:31:20.837
frameworks.

08:31:22.550 --> 08:31:25.149
We've also developed a way of 
wrapping our Java script so we 

08:31:25.150 --> 08:31:27.402
can use it in other web 
frameworks.  Now we've heard 

08:31:27.403 --> 08:31:29.474
that a lot of existing code 
bases are written in one web 

08:31:32.365 --> 08:31:34.820
framework in particular -- 
react.  Which is why today we'd 

08:31:34.821 --> 08:31:36.821
like to 

08:31:38.137 --> 08:31:40.137
introduce a new MDC library for 
react.

08:31:41.881 --> 08:31:45.158
It depends on the CSS and 
JavaScript of MDC web.  This 

08:31:45.159 --> 08:31:46.775
library is still in Alpha, but 
we encourage you to go and check

08:31:46.776 --> 08:31:48.776
it out and 

08:31:50.466 --> 08:31:52.297
give us feedback on what's 
working.  

08:31:52.298 --> 08:31:54.351
&gt;&gt; ADRIAN SECORD:  So we want to
emphasize all the MDC libraries 

08:31:54.352 --> 08:31:58.487
are open source.  They're out 
there on GitHub for you to see, 

08:31:58.488 --> 08:32:01.954
to Play with, to interact with, 
hopefully contribute to.  Even 

08:32:01.955 --> 08:32:03.388
at the very worst if it's just 
sending us issues when you find 

08:32:03.389 --> 08:32:07.065
a bug.  And we want to make sure
these libraries use modern 

08:32:07.066 --> 08:32:10.567
development practices and 
they're lined with the kinds of 

08:32:10.568 --> 08:32:13.246
development work flows that you 
yourselves are using. 

08:32:15.503 --> 08:32:17.139
A second piece I'd like to 
introduce here which we've seen 

08:32:17.140 --> 08:32:20.433
in previous talks is the 
material theme editor.  This is 

08:32:20.434 --> 08:32:23.768
a plug-in for sketch.  If you 
are not familiar with sketch, it

08:32:23.769 --> 08:32:26.388
is a very popular design tool.  
People use it for mock-ups for 

08:32:27.208 --> 08:32:29.242
prototyping, that sort of thing.
And if you use the material 

08:32:29.243 --> 08:32:34.425
theme editor inside of sketch, 
the cool thing is it knows all 

08:32:34.426 --> 08:32:36.059
about the MDC components.  So 
you have a lot of confidence 

08:32:36.060 --> 08:32:39.730
that whatever gets designed by 
either yourself or your designer

08:32:39.731 --> 08:32:41.731
will translate really well to 
code.  

08:32:44.023 --> 08:32:45.855
A second piece that compliments 
the material theme editor is 

08:32:45.856 --> 08:32:50.136
gallery.  So gallery is really 
cool in that you can -- sorry 

08:32:50.137 --> 08:32:52.637
gallery you can use to sort of 
share different mocks, 

08:32:52.638 --> 08:32:55.749
collaborate, comment on them 
with all your different team 

08:32:55.750 --> 08:32:59.812
members.  But the neat thing is 
if you are using the theme 

08:32:59.813 --> 08:33:01.863
editor, gallery basically sucks 
in a whole bunch of metadata 

08:33:01.864 --> 08:33:06.191
that came from using a theme 
editor and can display 

08:33:06.192 --> 08:33:07.641
interactive things like 
measurements, tonights, what the

08:33:07.642 --> 08:33:10.918
colors are that are set.  And 
even probably more importantly 

08:33:10.919 --> 08:33:14.781
for developers is that you can 
tap or click on any of the 

08:33:14.782 --> 08:33:17.440
elements that you see in a mock 
and get the link to the 

08:33:17.441 --> 08:33:20.554
appropriate code documentation. 
So here though you can't see it 

08:33:22.439 --> 08:33:24.439
because it's probably really far
away 

08:33:25.737 --> 08:33:27.564
the user has highlight Thad 
first text field on the top and 

08:33:27.565 --> 08:33:30.421
is showing measurements in red. 
Even more importantly is the 

08:33:30.422 --> 08:33:34.724
part on the right where it's 
giving you a link into the 

08:33:34.725 --> 08:33:36.180
Android docs for the MDC text 
field.  This is great because 

08:33:36.181 --> 08:33:40.056
you know that you are jumping 
right into the right thing and 

08:33:40.057 --> 08:33:42.105
not trying to figure out where 
did that doc go and how did I 

08:33:42.106 --> 08:33:47.060
get there.  This is a fantastic 
way to collaborate with design. 

08:33:47.061 --> 08:33:50.802
So using MDC in your code base, 
you know, we've been talking 

08:33:50.803 --> 08:33:54.965
about this, let's get right down
into some code.  We developed 

08:33:54.966 --> 08:33:58.453
MDC to be incorporated directly 
into your code base.  We really,

08:33:58.454 --> 08:34:00.454
really wanted to avoid 

08:34:02.359 --> 08:34:05.289
havings -- forcing you in to 
getting into some huge framework

08:34:05.290 --> 08:34:07.290
where you had 

08:34:08.748 --> 08:34:10.603
do a whole bunch of set-up or 
had something that sent its 

08:34:10.604 --> 08:34:12.604
tentacles into all the aspects 
of your App.

08:34:14.733 --> 08:34:16.368
We wanted you to take say MDC 
button and plunk it down and get

08:34:16.369 --> 08:34:20.651
it using and working right away 
and not have to necessarily buy 

08:34:20.652 --> 08:34:22.652
into a giant framework.  So you 
are going to see next examples 

08:34:24.915 --> 08:34:26.915
from Android, iOS and the web. 

08:34:29.019 --> 08:34:31.019
So first let's pretend that you 
are 

08:34:32.309 --> 08:34:34.365
about to go and get yourself a 
new puppy.  So you are very 

08:34:34.366 --> 08:34:38.046
excited about this.  And you are
up on the dog adoption websites 

08:34:38.047 --> 08:34:41.533
as one does.  And, of course, 
everyone knows the most 

08:34:41.534 --> 08:34:43.794
important part about bringing a 
new family member into your 

08:34:43.795 --> 08:34:48.694
family is or maybe the most fun 
part is choosing the name.  So 

08:34:48.695 --> 08:34:52.775
you're developer.  You've got to
choose a name.  You're coming up

08:34:52.776 --> 08:34:54.776
with all sorts of different 
suggestions from yourself and 

08:34:56.469 --> 08:34:58.709
your family and friends.  You're
going write an App to track all 

08:34:59.119 --> 08:35:01.815
these names.  We're going build 
our own App.  This is our view 

08:35:01.816 --> 08:35:05.751
controller.  This is going to 
start in X code.  So it's 

08:35:05.752 --> 08:35:07.752
written in swift.

08:35:10.107 --> 08:35:11.724
It also MDC works just fine with
objective C.  This is just 

08:35:11.725 --> 08:35:13.725
starting with the standard 
template that comes out of X 

08:35:13.771 --> 08:35:18.719
code.  X code by the way is 
Apple's ID for generating code. 

08:35:18.720 --> 08:35:22.447
And this just comes straight out
of the default template.  And 

08:35:22.448 --> 08:35:25.517
loads up some example data then 
just gets a view on the screen. 

08:35:25.518 --> 08:35:27.518
So, if you start with this you 
get 

08:35:29.376 --> 08:35:31.376
this very, very basic dog 
tracking, dog name tracking App.

08:35:32.580 --> 08:35:34.591
So we have our dog names here.  
It's wonderful.  We've collected

08:35:34.592 --> 08:35:37.243
a whole bunch of them.  But, of 
course, as you go about your day

08:35:37.244 --> 08:35:39.498
and talking to people you are 
going to find even more dog 

08:35:39.499 --> 08:35:42.588
names that you want to track and
rank in your dog name tracking 

08:35:42.589 --> 08:35:47.492
App.  Of course so this is a 
great example of using a 

08:35:47.493 --> 08:35:50.355
material floating action button.
Instead of you having to go into

08:35:50.356 --> 08:35:54.668
the code and add something to an
array somewhere you can just tap

08:35:54.669 --> 08:35:56.669
the button 

08:35:57.915 --> 08:35:59.789
and add a name that way.  
First you got to get the code 

08:35:59.790 --> 08:36:01.790
right.

08:36:02.856 --> 08:36:04.501
So our code of course exists in 
GitHub.  You can download that 

08:36:04.502 --> 08:36:06.544
immediately.  But at least on 
iOS the standard way 

08:36:09.619 --> 08:36:11.619
to get codes to use a package 
manager.

08:36:13.295 --> 08:36:15.549
A cocoa pods is a package 
manager on iOS.  And here is a 

08:36:15.550 --> 08:36:17.546
pod file.  If you are not 
familiar with this it's not 

08:36:17.547 --> 08:36:19.547
exciting.

08:36:20.603 --> 08:36:21.611
But you have to reference this 
material component's pod then 

08:36:21.612 --> 08:36:23.877
run pod install to download 
material components 

08:36:27.340 --> 08:36:28.167
and all of its dependencies on 
to your local disk so you can 

08:36:28.168 --> 08:36:30.418
use them. 
The next step is just to wire up

08:36:30.419 --> 08:36:32.419
this 

08:36:33.520 --> 08:36:35.744
material button the exact same 
way you would normally.  Back in

08:36:35.745 --> 08:36:37.745
the swift code you can see at 
the top we're importing material

08:36:40.436 --> 08:36:43.096
components then next we're 
creating a floating button.  So 

08:36:43.097 --> 08:36:45.360
the class name in this case is 
MDC floating button.  So we're 

08:36:45.361 --> 08:36:47.630
createding that new button.  
Then we're setting its icon and 

08:36:47.631 --> 08:36:51.735
its background color and putting
in the view hierarchy just as 

08:36:51.736 --> 08:36:54.790
you would a normal button.  So, 
if we do all this you get this 

08:36:55.598 --> 08:37:00.742
nice list view.  And in the 
bottom corner we have a nice 

08:37:00.743 --> 08:37:03.391
purple fob that you -- sorry 
floating action button -- that 

08:37:03.392 --> 08:37:05.392
you can 

08:37:06.687 --> 08:37:08.935
tap and you get all the ink 
ripples and different effects 

08:37:08.936 --> 08:37:10.936
you inspect for pretty much for 
free.  

08:37:11.593 --> 08:37:13.251
&gt;&gt; LYNN JEPSEN:  Let's talk 
about a completely different 

08:37:13.252 --> 08:37:16.551
example for the web. 
Say you have an existing HTML 

08:37:16.552 --> 08:37:22.285
form.  I'm guy to be to show you
how to replace this input 

08:37:22.286 --> 08:37:26.375
element with a new MDC text 
field.  MDC web is installable 

08:37:26.376 --> 08:37:29.440
through node package manager.  
You just run this one line 

08:37:29.441 --> 08:37:33.939
command.  It's easy and fast to 
install our code in to your code

08:37:33.940 --> 08:37:37.603
base.  You will need to update 
your source code to use MDC web.

08:37:39.372 --> 08:37:41.372
So let's start with a text 
field.

08:37:43.321 --> 08:37:45.345
You just need to copy our text 
field HTML in to your form. 

08:37:48.212 --> 08:37:50.212
Our text field HTML is 
documented on GitHub.

08:37:53.490 --> 08:37:56.087
Here we have the documentation 
for the text field component.  

08:37:56.088 --> 08:37:58.128
The structure is called out 
quite early this in the 

08:37:58.129 --> 08:38:01.124
documentation so you can quickly
copy/paste.  And each of our 

08:38:01.125 --> 08:38:06.271
components for web follow this 
documentation format.  The next 

08:38:06.272 --> 08:38:08.952
step is to actually import our 
sass files into your sass files.

08:38:12.253 --> 08:38:14.934
Sass is a technology which 
compiles into CSS and works with

08:38:14.935 --> 08:38:17.635
existing open source bundle 
systems like web pack.  

08:38:21.125 --> 08:38:23.572
Finally you need to initial IEDZ
the Java script on the HTML 

08:38:23.573 --> 08:38:27.276
element.  This is all you need. 
You get a nice lovely text field

08:38:28.482 --> 08:38:31.055
working on your website.  Users 
can interact with this text 

08:38:33.081 --> 08:38:35.543
field like they would any text 
field on any website.  And check

08:38:35.544 --> 08:38:40.273
out the animation of the line 
ripple and the floating label.  

08:38:40.274 --> 08:38:43.789
This is material design approved
animation.  It provides valuable

08:38:43.790 --> 08:38:49.360
feedback to the users who are 
interacting with your website.  

08:38:49.361 --> 08:38:53.247
&gt;&gt; ADRIAN SECORD:  So back to 
our little dog name tracking App

08:38:53.248 --> 08:38:56.118
which, you know, the first thing
you should probably do is come 

08:38:56.119 --> 08:38:58.173
up with a better name than that.
But let's pretend you are really

08:38:58.174 --> 08:39:02.264
into this App.  You are very 
excited about it and think it's 

08:39:02.265 --> 08:39:03.700
the best one out there and you 
decide to push it a little 

08:39:03.701 --> 08:39:05.701
further.

08:39:06.780 --> 08:39:08.780
You work up with maybe a friend 
a branding story for your App.

08:39:10.814 --> 08:39:12.234
So you are not just -- it's not 
just a simple App.  You want to 

08:39:12.235 --> 08:39:14.235
make sure you have 

08:39:16.536 --> 08:39:18.986
expressed all the right 
topography and color system and 

08:39:18.987 --> 08:39:21.833
different elements of the App so
it all comes together and works 

08:39:21.834 --> 08:39:24.291
as a branding story.  Let's 
pretend in your graphic design 

08:39:25.725 --> 08:39:27.949
aspect of your brand you are 
more in to sort of like sharp 

08:39:27.950 --> 08:39:29.950
corners and edges 

08:39:31.214 --> 08:39:33.261
than you are of these round 
circle type things.  This is an 

08:39:33.262 --> 08:39:35.549
excellent example of something 
that we can use material theming

08:39:35.550 --> 08:39:39.220
for.  You might have heard 
material theming.  I hope you 

08:39:39.221 --> 08:39:40.896
have heard about material 
themeing in the other talks in 

08:39:40.897 --> 08:39:45.383
I/O.  But this is a great time 
where we can take a little bit 

08:39:45.384 --> 08:39:47.384
of branding, sharp 

08:39:48.430 --> 08:39:50.693
corners, and apply it to a 
really visual, very forward 

08:39:50.694 --> 08:39:54.789
element in your design which is 
this fab.  We're going transform

08:39:54.790 --> 08:39:56.790
it from the 

08:39:57.844 --> 08:39:59.844
circular we get by default into 
a nice diamond shape. 

08:40:00.904 --> 08:40:02.904
So back in the code anything in 
MDC OS 

08:40:04.181 --> 08:40:07.879
that you can affect its shape 
takes a shape generator.  The 

08:40:07.880 --> 08:40:09.974
highlighted codes we're creating
the shape generator and we have 

08:40:09.975 --> 08:40:13.471
given you in the library a few 
standard Jen BRATors that you 

08:40:13.472 --> 08:40:17.178
can use.  They do simple things 
like take rectangles and cut off

08:40:17.179 --> 08:40:19.179
corners at various angles or 
maybe round off 

08:40:23.129 --> 08:40:24.969
corners at various RADi.  In 
this case we're going talk a 

08:40:24.970 --> 08:40:28.862
square them the bounding box of 
the original button.  And we're 

08:40:28.863 --> 08:40:32.540
going cut off its four corners 
at 45 degree angles.  So we get 

08:40:32.541 --> 08:40:36.010
this nice diamond shape.  That's
all that's happening in this the

08:40:36.011 --> 08:40:38.011
highlighting cold.

08:40:39.068 --> 08:40:40.695
When you assign it to the fab 
and if we rerun our code you get

08:40:40.696 --> 08:40:42.696
this.

08:40:43.775 --> 08:40:45.635
You have this nice diamond 
shaped fab popping up and you 

08:40:45.636 --> 08:40:47.636
get all the normal effects you 
expect like the ripple and 

08:40:48.911 --> 08:40:51.354
different animations for free 
and every time your users go and

08:40:51.355 --> 08:40:54.656
interact with your locally fab 
down there they're getting a 

08:40:54.657 --> 08:40:57.344
little burst of your brand in 
that button.   

08:41:00.622 --> 08:41:02.262
&gt;&gt; LYNN JEPSEN:  All of our 
components allow for 

08:41:02.263 --> 08:41:06.574
customization.  So let's talk 
about the text field example on 

08:41:06.575 --> 08:41:09.638
the web platform.  
Say your designer wants to 

08:41:09.639 --> 08:41:13.799
customize all the colors on the 
text field.  He wants the line 

08:41:13.800 --> 08:41:17.678
to start at gray on Page load 
but then when a user hovers over

08:41:17.679 --> 08:41:20.742
the text field he wants it to 
change to orange.  Your designer

08:41:20.743 --> 08:41:22.996
also wants the line to change to
a slightly different shade of 

08:41:24.642 --> 08:41:26.459
orange when the user clicks on 
the text field and starts 

08:41:26.460 --> 08:41:31.148
entering text.  And your 
designer wants to make sure that

08:41:31.149 --> 08:41:33.600
the label matches the color of 
the line.  How do you build all 

08:41:33.601 --> 08:41:35.601
this?

08:41:37.217 --> 08:41:39.217
You build it

08:41:43.648 --> 08:41:46.098
using MDC web sass mix IBs.  
They are APIs that developers 

08:41:46.099 --> 08:41:49.761
can use to customize components.
Here we have the code to 

08:41:49.762 --> 08:41:53.288
customize the text field.  At 
the top we have code to 

08:41:53.289 --> 08:41:56.419
customize the gray colors for 
the idle state of the text 

08:41:56.420 --> 08:41:59.664
field.  In the middle, there's 
code to customize the hover 

08:41:59.665 --> 08:42:04.360
state.  And in the -- at the 
bottom there's code to customize

08:42:04.361 --> 08:42:08.234
the focus state.  Focus state is
when the user clicks on the text

08:42:08.235 --> 08:42:11.357
field and starts entering text. 
You can implement a lot of 

08:42:11.358 --> 08:42:13.387
customization using these sass 
mixuns and you don't 

08:42:18.127 --> 08:42:19.552
have to worry about all the 
choreography of the color 

08:42:19.553 --> 08:42:21.415
changes. 
For those that have Android 

08:42:21.416 --> 08:42:26.142
applications that are already 
built using material design, the

08:42:26.143 --> 08:42:28.375
MDC Android team has made it 
really easy for you to upgrade 

08:42:28.376 --> 08:42:30.376
your 

08:42:31.694 --> 08:42:32.917
existing MDC text fields to new 
outlined variant of this text 

08:42:32.918 --> 08:42:34.918
field.

08:42:36.806 --> 08:42:39.301
Here we have some code for a 
form in an Android XML file.

08:42:44.167 --> 08:42:45.862
All you have to upgrade is add 
this one line of code to the 

08:42:45.863 --> 08:42:49.761
style attribute.  With that you 
get a new form of text field 

08:42:49.762 --> 08:42:54.084
which looks like this.  You cap 
think of this outline version of

08:42:54.085 --> 08:42:56.996
another form of customization.  
If this outline version looks 

08:42:56.997 --> 08:43:03.324
better with your App's existing 
graphic design, then use it.  

08:43:03.325 --> 08:43:05.562
Because this is an Android 
component we've also made sure 

08:43:05.563 --> 08:43:09.451
that it works with existing 
Android theming.  So, if you've 

08:43:09.452 --> 08:43:11.452
already set your Android theme 
colors to the right shades of 

08:43:13.765 --> 08:43:15.997
orange then text field will 
inherit those colors. 

08:43:18.265 --> 08:43:20.299
We've shown you a lot of code 
here at I/O but perhaps looking 

08:43:20.300 --> 08:43:22.961
at code from the back of an I/O 
stage is not the best way to 

08:43:22.962 --> 08:43:25.415
learn.  The best way to learn is
to actually write code.

08:43:28.709 --> 08:43:30.753
Which is why we've created 30 
code labs for you to go and 

08:43:30.754 --> 08:43:32.754
enjoy that work with MDC.

08:43:36.538 --> 08:43:39.605
We have code labs for all of our
platforms.  Android, iOS, 

08:43:39.606 --> 08:43:41.610
flutter, web.  For Android we 
have code labs in Java and 

08:43:41.611 --> 08:43:43.611
Kotlin.

08:43:45.059 --> 08:43:48.325
For iOS we have code labs in 
aJEKTive C and swift.  We don't 

08:43:48.326 --> 08:43:50.773
have any code labs in react yet.
But if you want code labs in 

08:43:50.774 --> 08:43:55.339
reABLTHD or other technology you
are using, let us know.  We 

08:43:55.340 --> 08:43:56.558
really want to make sure that 
we're targeting the technologies

08:43:56.559 --> 08:43:58.559
that 

08:44:00.172 --> 08:44:02.272
developers are already using.  
&gt;&gt; ADRIAN SECORD:  So now that 

08:44:02.273 --> 08:44:05.960
we've seen some code and some 
examples of getting some MDC 

08:44:05.961 --> 08:44:09.209
things in to code, we want to go
back a step and say why use MDC.

08:44:11.487 --> 08:44:13.523
We really believe that using the
MDC libraries helps you create 

08:44:13.524 --> 08:44:16.807
beautiful products.  We believe 
that they should be pretty easy 

08:44:16.808 --> 08:44:18.843
for developers to use.  And we 
definitely believe they provide 

08:44:21.107 --> 08:44:23.777
an excellent user experience to 
your users.  So not only do you 

08:44:23.778 --> 08:44:28.273
get this sort of like experience
of using the code and hopefully 

08:44:28.274 --> 08:44:30.563
it's smoother and easier to use 
but it brings a lot of value to 

08:44:30.564 --> 08:44:32.564
your users.

08:44:35.229 --> 08:44:37.715
Let's go into more detail . 
So each one of our components is

08:44:37.716 --> 08:44:41.819
built to be pixel perfect.  We 
collaborate with the designers 

08:44:45.109 --> 08:44:47.109
infinity to add polish , to get 
all the details right.

08:44:49.600 --> 08:44:51.600
We worry about the fills and 
strokes 

08:44:52.649 --> 08:44:55.302
and raidi.  And we also do a lot
of research and user testing.

08:44:58.948 --> 08:45:00.799
Materialize an organization has 
researchers on staff that go out

08:45:00.800 --> 08:45:03.863
and take our components, put 
them in front of people and test

08:45:03.864 --> 08:45:06.522
them and see what works better 
and what doesn't.  We actually 

08:45:06.523 --> 08:45:09.181
have a very good example of this
with the text field that we are 

08:45:09.596 --> 08:45:14.872
seeing before.  Might have seen 
it had heavy outlines and very 

08:45:14.873 --> 08:45:18.341
prominent fills.  Our original 
text field that we released in 

08:45:18.342 --> 08:45:21.187
twenty 14 when we went out and 
did some user experience, some 

08:45:21.188 --> 08:45:25.270
user research, we found out that
people didn't actually in the 

08:45:25.271 --> 08:45:29.366
middle of a busy screen with a 
whole bunch of different things,

08:45:29.367 --> 08:45:31.642
people didn't know if they were 
supposed to tap in and fill out 

08:45:31.643 --> 08:45:34.695
the text.  So they were missing 
filling out an important part of

08:45:34.696 --> 08:45:39.614
the form.  We went back and 
re-designed based on that 

08:45:39.615 --> 08:45:41.615
experience and republished maybe
a 

08:45:43.312 --> 08:45:45.148
year ago the text field spec, 
updated all the code so that it 

08:45:45.149 --> 08:45:47.198
became a better text field for 
everyone to use. 

08:45:50.292 --> 08:45:52.330
The other thing that we do is 
designers of course are not sort

08:45:52.331 --> 08:45:55.014
of one size fits all.  There's 
many different kinds of 

08:45:55.015 --> 08:46:00.153
designers.  So in material we 
have visual design errs.  We 

08:46:00.154 --> 08:46:02.619
have interaction designers.  
People who do motion design.  We

08:46:02.620 --> 08:46:04.465
work with all of them to make 
sure that every aspect of these 

08:46:04.466 --> 08:46:06.906
components is as good as 
possible.  

08:46:10.166 --> 08:46:13.437
The other piece is that MDC is 
production ready.  We work very 

08:46:13.438 --> 08:46:16.301
hard to make it optimized for 
performance metrics.  Memory, 

08:46:16.302 --> 08:46:18.302
CPU, that kind of thing.

08:46:19.794 --> 08:46:21.794
We test on a wide range, an 
exhaust UF 

08:46:22.889 --> 08:46:25.131
range of browsers.  We also 
stress test things with the open

08:46:25.132 --> 08:46:27.557
source community.  You can 
manage that maybe Google only 

08:46:30.023 --> 08:46:32.060
uses these components in a 
certain way and no one else ever

08:46:32.061 --> 08:46:34.102
uses them a certain way but 
that's okay because we have open

08:46:35.532 --> 08:46:37.194
source contributors using them 
in all sorts of different ways 

08:46:37.195 --> 08:46:40.262
and we get all that and fold it 
back in so that everyone gets 

08:46:40.263 --> 08:46:42.098
the benefit of that experience. 
The other thing that's really 

08:46:42.099 --> 08:46:47.469
important is this is how Google 
ships its Apps world wide for 

08:46:47.470 --> 08:46:49.470
quite a number of years now.

08:46:51.799 --> 08:46:54.269
All our Android and iOS Apps are
out there using this code to 

08:46:54.270 --> 08:46:57.921
ship.  So we're used to do the 
Google scale performance and 

08:46:57.922 --> 08:47:00.572
optimization that you get the 
benefit of too.   

08:47:02.006 --> 08:47:03.834
&gt;&gt; LYNN JEPSEN:  The third 
reason why you should use MDC is

08:47:03.835 --> 08:47:07.738
because it helps you COMBILD 
features faster.  Using our 

08:47:07.739 --> 08:47:12.015
components can really speed up 
your development time.  We've 

08:47:12.016 --> 08:47:13.864
already spent months of 
developer and designer time 

08:47:13.865 --> 08:47:15.865
building 

08:47:18.093 --> 08:47:20.087
these components from scratch.  
So we want everyone here today 

08:47:20.088 --> 08:47:23.296
to feel like they don't have to 
build components from scratch.  

08:47:23.297 --> 08:47:25.297
They can just quickly install 
and use 

08:47:27.558 --> 08:47:29.558
our components in your code 
base.  

08:47:30.017 --> 08:47:32.296
In fact, we also don't want you 
to be tied to material designs 

08:47:32.297 --> 08:47:37.123
visual expression.  So, if your 
designer wants to make changes 

08:47:37.124 --> 08:47:39.765
like customizing the color of a 
text field or the shape of a 

08:47:39.766 --> 08:47:44.048
floating action button, there 
are APIs developers can use to 

08:47:44.049 --> 08:47:46.730
build that customization.  We 
want you to express brand 

08:47:46.731 --> 08:47:51.622
through our APIs.  We ave APIs 
for color, typing on RA FI, 

08:47:51.623 --> 08:47:55.314
shape.  We want our components 
to feel like they belong within 

08:47:55.315 --> 08:48:00.656
your existing application.  
The fourth reason why you should

08:48:00.657 --> 08:48:02.657
use MDC 

08:48:03.911 --> 08:48:07.019
is because using MDC is 
leveraging MDC engineering.  

08:48:07.020 --> 08:48:09.300
We're going to be releasing new 
components and new features 

08:48:09.301 --> 08:48:11.301
through 

08:48:12.391 --> 08:48:16.916
twenty 18 and beyond.  MDC is 
the only component library which

08:48:16.917 --> 08:48:19.362
evolves with material design.  
So our MDC engineers, they 

08:48:19.363 --> 08:48:21.363
collaborate 

08:48:22.445 --> 08:48:23.685
directly with the designers who 
are writing material design 

08:48:23.686 --> 08:48:25.744
guidelines.  That's why you can 
depend on us to 

08:48:29.838 --> 08:48:31.295
make sure that we release new 
components that evolve with the 

08:48:31.296 --> 08:48:35.390
material design spec. 
I hope you all have learned a 

08:48:35.391 --> 08:48:39.521
lot today about how to 
incorporate material design in 

08:48:39.522 --> 08:48:41.372
to your existing code base.  You
have seen some new material 

08:48:41.373 --> 08:48:45.038
tools and how they work with 
MDC.  You have seen some example

08:48:45.039 --> 08:48:48.098
code actually using MDC.  And 
you have heard about some of the

08:48:50.571 --> 08:48:52.571
benefits of MDC in your existing
code 

08:48:53.573 --> 08:48:56.372
base.  
That's all we have.  Thank you 

08:48:56.373 --> 08:49:00.478
so much.  We're going take 
questions here in a second.  But

08:49:00.479 --> 08:49:02.479
I just want to let you know that

08:49:05.185 --> 08:49:07.646
we have a dome F which is the 
design/accessibility dome.  

08:49:07.647 --> 08:49:09.647
We're hanging out there all day 
tomorrow so you can come ask us 

08:49:09.903 --> 08:49:11.903
questions there as well.  But 
thank you so much. 

08:49:14.213 --> 08:49:16.213
&gt;&gt; ADRIAN SECORD:  Thank you.  
(Applause).

08:49:24.585 --> 08:49:26.772
&gt;&gt; LYNN JEPSEN:  Any questions? 
&gt;&gt; ADRIAN SECORD:  Please use 

08:49:26.773 --> 08:49:29.417
the microphones.   
&gt;&gt; LYNN JEPSEN:  Anybody?  

08:49:29.418 --> 08:49:31.418
Anybody?  No.

08:49:33.715 --> 08:49:37.390
They just all want to go do code
labs, Adrian.  Thank you.

08:49:39.028 --> 08:49:41.028
&gt;&gt; Do you have any ways to make 
it 

08:49:44.880 --> 08:49:46.704
easier to export setting s maybe
Android that I want to be able 

08:49:46.705 --> 08:49:49.779
to share with my iOS App that I 
want to be able to share with my

08:49:49.780 --> 08:49:51.650
web App?   
&gt;&gt; LYNN JEPSEN:  Lynn the 

08:49:51.651 --> 08:49:53.651
question is 

08:49:54.705 --> 08:49:56.705
from Android to web sharing 
code?

08:49:57.792 --> 08:50:00.420
&gt;&gt; Sharing all the work that I 
did to customize my material 

08:50:00.421 --> 08:50:02.063
theme.   
&gt;&gt; LYNN JEPSEN:  We're working 

08:50:02.064 --> 08:50:04.064
on it.

08:50:05.743 --> 08:50:09.616
Right now they're visually very 
similar API wise.  The question 

08:50:09.617 --> 08:50:11.617
is how do you make sure all the 
work you have done to customize 

08:50:13.596 --> 08:50:16.034
your theme for Android you can 
reuse in other platforms like 

08:50:16.035 --> 08:50:18.887
web or iOS.  
Right now those APIs are super, 

08:50:18.888 --> 08:50:22.821
super similar because our 
engineers for Android and iOS 

08:50:22.822 --> 08:50:26.480
and web all sit next to each 
other and collaborate.  We 

08:50:26.481 --> 08:50:29.154
haven't made it a simple run a 
script and it works.  But we're 

08:50:29.155 --> 08:50:32.011
working on it.  
&gt;&gt; ADRIAN SECORD:  Also there's 

08:50:33.865 --> 08:50:38.802
different platform adaptations. 
Android code is not iOS code.  

08:50:38.803 --> 08:50:41.268
And Android designs are not iOS 
designs.  But we hope to make it

08:50:41.269 --> 08:50:44.346
easier in the 80 percent case 
where the designs are the same.

08:50:44.347 --> 08:50:49.274
&gt;&gt; Thank you. 
&gt;&gt; ADRIAN SECORD: .  Thank you.

08:50:49.275 --> 08:50:51.960
&gt;&gt; Is it possible to go too far?

08:50:57.101 --> 08:50:59.101
Like say you shaped the fab like
a bone or something.

08:51:00.788 --> 08:51:03.037
I don't know is it till 
material?  Like the original 

08:51:03.038 --> 08:51:05.038
material was like paper and ink.

08:51:07.184 --> 08:51:09.020
The same customized but what 
makes it material design.  

08:51:09.021 --> 08:51:11.021
&gt;&gt; LYNN JEPSEN:  The question is
it 

08:51:13.501 --> 08:51:16.170
possible to customize a little 
too far.  Yes.  But we also have

08:51:16.171 --> 08:51:18.219
a lot of guidance to help guide 
you in the right direction 

08:51:21.474 --> 08:51:23.474
that will sort of help you.  
&gt;&gt; ADRIAN SECORD:  In the design

08:51:27.751 --> 08:51:29.751
guidelines there's a great 
customation section.

08:51:31.980 --> 08:51:34.844
That's a top level session 
section for theming but in over 

08:51:34.845 --> 08:51:36.845
component there's 

08:51:38.124 --> 08:51:40.996
like here is how you customize. 
So you are totally right.  If 

08:51:40.997 --> 08:51:42.824
you start fiddling with all the 
knobs you can generate something

08:51:42.825 --> 08:51:45.488
that's maybe not so great.  But 
we're hoping with the 

08:51:45.489 --> 08:51:47.489
combination 

08:51:49.233 --> 08:51:51.233
of the guidance and also the 
tooling, so 

08:51:52.369 --> 08:51:55.006
one of the things that not maybe
wilt into the MDC libraries 

08:51:55.007 --> 08:51:57.007
themselves but we have tools 
like the material color tool 

08:51:59.086 --> 08:52:01.960
that will help you choose color 
pallets that look great and will

08:52:01.961 --> 08:52:04.022
work well in your App.  That 
sort of tooling we're hoping to 

08:52:07.128 --> 08:52:09.792
build more recommendation type 
things or sometimes we call them

08:52:09.793 --> 08:52:13.058
guide rails to kind of make sure
you don't get too far off the 

08:52:13.059 --> 08:52:15.059
road and we end up with 

08:52:16.682 --> 08:52:21.452
something that should be usable.
&gt;&gt; Support Windows.  Because so 

08:52:21.453 --> 08:52:24.325
far it's been sketch.
&gt;&gt; In a web browser, yes.  

08:52:24.326 --> 08:52:26.326
(Laughter).  

08:52:27.401 --> 08:52:29.401
&gt;&gt; LYNN JEPSEN:  Thank you.

08:52:31.497 --> 08:52:33.927
&gt;&gt; I wanted to know if our 
designers styleize an entire 

08:52:33.928 --> 08:52:36.195
material theme are there tools 
within the sketch plug-in or 

08:52:38.641 --> 08:52:40.641
gallery to output that as a 
style sheet 

08:52:42.579 --> 08:52:44.640
or Android styles XML file?  
&gt;&gt; ADRIAN SECORD:  Not at this 

08:52:44.641 --> 08:52:48.532
time.  That's something we're 
excited about but don't have 

08:52:48.533 --> 08:52:51.181
anything we can announce.  It's 
an obvious I'm with you.

08:52:52.595 --> 08:52:54.595
&gt;&gt; I was holding my breath 
waiting to are that.  

08:52:54.683 --> 08:52:56.294
&gt;&gt; LYNN JEPSEN:  There is a fair
amount of guidance within 

08:52:56.295 --> 08:52:59.192
gallery in particular that tells
you what customization has been 

08:52:59.193 --> 08:53:00.833
applied to those components.  
But we're going to be improving 

08:53:00.834 --> 08:53:02.834
that so that it really lines up 
with our 

08:53:05.943 --> 08:53:07.976
components and we'll hopefully 
get to the point where we can 

08:53:07.977 --> 08:53:11.047
magically export something.
&gt;&gt; Excellent.  I've been looking

08:53:11.048 --> 08:53:14.138
for to a style sheet driven 
development.  Thank you.

08:53:17.041 --> 08:53:18.899
&gt;&gt; I was wondering, how do the 
MDC libraries Play out with 

08:53:18.900 --> 08:53:21.366
other libraries like the Android
design support library 

08:53:24.408 --> 08:53:25.636
or the Polly MER project on web.
&gt;&gt; ADRIAN SECORD:  Are you 

08:53:25.637 --> 08:53:29.140
asking how they compare?
&gt;&gt; How they compare and how are 

08:53:29.141 --> 08:53:31.141
we supposed to use them.  

08:53:34.021 --> 08:53:36.021
&gt;&gt; LYNN JEPSEN:  MDL did you say

08:53:37.762 --> 08:53:39.762
material design -- 

08:53:40.885 --> 08:53:42.885
&gt;&gt; ADRIAN SECORD:  You meant the
Android support library.  

08:53:46.031 --> 08:53:48.031
&gt;&gt; LYNN JEPSEN:  We upgraded the
support library. 

08:53:48.300 --> 08:53:49.950
&gt;&gt; ADRIAN SECORD:  It is a bit 
of a complicated situation and 

08:53:49.951 --> 08:53:51.951
it's evolving.  We expect the 
MDC libraries will be 

08:53:56.144 --> 08:53:58.833
the home for future going 
material on all the four 

08:53:58.834 --> 08:54:00.834
platforms -- now five platforms 
that we're supporting.

08:54:03.406 --> 08:54:05.406
&gt;&gt; Does that include the Polly 
MER project for web?   

08:54:06.745 --> 08:54:10.595
&gt;&gt; LYNN JEPSEN:  Polymer.  
That's a great question.  Sorry 

08:54:10.596 --> 08:54:13.066
I couldn't quite hear.  
So with polymer we're actually 

08:54:13.067 --> 08:54:17.779
working on some new web 
components that similar to the 

08:54:17.780 --> 08:54:19.780
react library are going to be 

08:54:21.465 --> 08:54:24.118
using the Java script, NCSS from
MDC web but sort of 

08:54:24.119 --> 08:54:26.119
encapsulateing it in this web 
component you can just drop in.

08:54:29.074 --> 08:54:31.732
So the polymer team has been 
doing announcements today.  I 

08:54:31.733 --> 08:54:33.793
didn't mention it as broadly 
here in this talk but it's 

08:54:33.794 --> 08:54:38.084
happening under the same GitHub 
repo.  It's called material 

08:54:38.085 --> 08:54:40.129
components web components.  
Check it out and follow it 

08:54:40.130 --> 08:54:43.110
because we're doing a lot of 
work there for polymer support 

08:54:43.111 --> 08:54:45.323
in particular.
&gt;&gt; Thank you.

08:54:48.222 --> 08:54:50.222
&gt;&gt; Historically the Android 
design 

08:54:51.294 --> 08:54:52.316
support library has lagged 
behind the material design 

08:54:52.317 --> 08:54:56.640
specification.  And I've often 
found myself in a situation 

08:54:56.641 --> 08:54:58.641
where our designers picked up 

08:55:01.674 --> 08:55:03.674
some awesome cool new thing from
the 

08:55:05.595 --> 08:55:09.861
material design spec and said do
this in Android and I've had to 

08:55:05.595 --> 08:55:07.570
say there's no way to implement 
this yet which is quite 

08:55:07.571 --> 08:55:10.440
embarrassing.  With the new 
material describe components 

08:55:10.441 --> 08:55:13.325
does this mean you are going to 
be working them in lock step 

08:55:13.326 --> 08:55:17.647
where the guidelines will be 
updated and we'll be able to 

08:55:17.648 --> 08:55:19.648
implement that in code.  
&gt;&gt; LYNN JEPSEN:  As much as we 

08:55:20.764 --> 08:55:22.764
physically can, yes. 
&gt;&gt; ADRIAN SECORD:  It's again a 

08:55:23.397 --> 08:55:27.296
complicated situation.  But MDC 
Android is meant to be tracking 

08:55:27.297 --> 08:55:30.597
the guidelines, updating much 
more quickly.  And we totally 

08:55:30.598 --> 08:55:33.253
hear you.  We have the same 
pain.  Updateing with the 

08:55:33.254 --> 08:55:35.488
guidelines themselves.  Pretty 
much I, I mean, you should look 

08:55:36.306 --> 08:55:38.306
for changes monthly.  Should be 
coming out pretty quick.  

08:55:40.000 --> 08:55:42.486
&gt;&gt; LYNN JEPSEN:  I like that 
term lock step.  That's what 

08:55:42.487 --> 08:55:44.487
we're aiming for.  Lock step 
with everything, yeah.

08:55:45.360 --> 08:55:49.670
&gt;&gt; Hi.  Maybe you can answer 
this or not but my question is 

08:55:49.671 --> 08:55:51.552
about material design light and 
what's happening with that.  

08:55:51.553 --> 08:55:53.995
&gt;&gt; LYNN JEPSEN:  Material design
light.

08:55:58.131 --> 08:56:00.163
So material design light is this
web style sheet, component 

08:56:00.164 --> 08:56:02.626
library that we built.  It's 
right now not officially 

08:56:02.827 --> 08:56:04.871
supported.  So it still exists 
you can still use 

08:56:08.359 --> 08:56:10.359
it but we're not adding any new 
features.

08:56:11.701 --> 08:56:12.934
It basically came down to a 
limitation of sort of the 

08:56:12.935 --> 08:56:15.429
technology.  MDL is built on 
this concept that you 

08:56:19.075 --> 08:56:22.186
have mostly CSS, HTML, not a lot
of Java script.  We found that 

08:56:22.187 --> 08:56:24.187
in order to accurately support 
material design and build all 

08:56:25.667 --> 08:56:28.575
the cool new things that our 
designers were coming up with we

08:56:28.576 --> 08:56:33.720
had to stretch into more 
sophisticated technologies like 

08:56:33.721 --> 08:56:36.357
Java script, like sass, some of 
the tools you could use.  

08:56:36.358 --> 08:56:37.820
Especially with our 
announcements of material 

08:56:37.821 --> 08:56:40.309
theming it was really difficult 
to customize MDL without sort of

08:56:40.310 --> 08:56:45.269
running in to fragile issues 
with the HTML.  Which is why 

08:56:45.270 --> 08:56:47.333
we're really pushing this new 
MDC web as much as possible.

08:56:50.388 --> 08:56:51.406
&gt;&gt; Does that mean that MDL is on
the way out?  Is that what you 

08:56:51.407 --> 08:56:53.464
are saying?  
&gt;&gt; LYNN JEPSEN:  It's still very

08:56:53.465 --> 08:56:57.172
useful if you want to get a 
website running like super 

08:56:57.173 --> 08:57:00.042
quickly and you are messing 
around with it.  So I recommend 

08:57:00.043 --> 08:57:02.043
it for that.

08:57:03.914 --> 08:57:05.914
We're just not adding ini new 
tee features to it.

08:57:09.687 --> 08:57:11.687
&gt;&gt; I have a question about the 
MDC 

08:57:13.578 --> 08:57:16.223
performance or does MDC affect 
the performance on the cheap and

08:57:16.224 --> 08:57:20.325
slow devices?  Because we are 
currently applying material 

08:57:20.326 --> 08:57:22.326
designs to our App.

08:57:23.831 --> 08:57:25.831
But our App has a huge 
percentage of 

08:57:27.117 --> 08:57:29.153
users who use cheap and very 
slow and very, very cheap like 

08:57:29.154 --> 08:57:31.154
ten dollar devices.

08:57:33.865 --> 08:57:35.865
And our developers, sometimes 
they 

08:57:37.135 --> 08:57:38.973
think using this subtle and 
elegant MDC elements would 

08:57:38.974 --> 08:57:41.474
affect the realtime rendering 
and the performance of our Apps.

08:57:43.703 --> 08:57:45.703
So just to confirm, does it 
affect the performance?  

08:57:46.593 --> 08:57:48.020
&gt;&gt; ADRIAN SECORD: An which 
platform are you talking about.

08:57:52.551 --> 08:57:54.589
&gt;&gt; Android.  
&gt;&gt; LYNN JEPSEN:  We optimize 

08:57:54.590 --> 08:57:56.590
performance as much as we can.

08:57:58.673 --> 08:58:02.673
But that still is good feedback 
I think for our open source 

08:57:58.673 --> 08:58:01.743
community.  If you are using a 
component in a certain App and 

08:58:01.744 --> 08:58:03.398
you are not getting the 
performance you expect like let 

08:58:03.399 --> 08:58:06.253
us know on the open source.  It 
will help us test it and figure 

08:58:06.254 --> 08:58:09.789
out better ways to improve it. 
&gt;&gt; ADRIAN SECORD:  And we will 

08:58:09.790 --> 08:58:12.644
make changes based on 
performance.  One of the great 

08:58:12.645 --> 08:58:16.808
things of working with design so
tightly, TEFRL is engineers and 

08:58:16.809 --> 08:58:20.924
designers all working together, 
is we the engineers will go back

08:58:20.925 --> 08:58:22.925
to design and tell them like 
this 

08:58:24.859 --> 08:58:28.319
is beautiful but we can't ship 
it to these phones.  If you file

08:58:28.320 --> 08:58:30.320
bugs and help us we can make 
that better for everyone.  

08:58:32.001 --> 08:58:33.622
&gt;&gt; LYNN JEPSEN:  And it's a 
really good market that we need 

08:58:33.623 --> 08:58:35.623
to make sure we are addressing.

08:58:39.297 --> 08:58:40.130
So make sure the lower band 
width and memory still get a 

08:58:40.131 --> 08:58:42.359
good design experience.  So we 
love that feedback. 

08:58:42.968 --> 08:58:44.968
&gt;&gt; ADRIAN SECORD: .  Thank you. 
Great question.

08:58:45.831 --> 08:58:50.360
&gt;&gt; Thank you.
&gt;&gt; Hi there.  So one of your -- 

08:58:50.361 --> 08:58:52.361
in one of your 

08:58:54.461 --> 08:58:58.760
examples you showed the fab 
floating on an iOS device.  And 

08:58:58.761 --> 08:59:02.250
you said that you get for free 
the ripple effect.  So, if that 

08:59:02.251 --> 08:59:04.251
is the only thing that the 

08:59:05.752 --> 08:59:07.780
user can (inaudible) and have 
the ripple effect that might be 

08:59:07.781 --> 08:59:12.070
a bit week.  Is it possible to 
remove it or even better to be 

08:59:12.071 --> 08:59:14.071
able to apply the ripple effect 
in anything that is not part of 

08:59:16.549 --> 08:59:18.241
your library and get like a -- 
&gt;&gt; ADRIAN SECORD:  So that's a 

08:59:18.242 --> 08:59:20.242
great question.  Just to be 
clear really that button is 

08:59:20.306 --> 08:59:22.306
packaging.

08:59:24.208 --> 08:59:26.208
The ripple and the shadowing 
effects, 

08:59:27.701 --> 08:59:29.701
the shadows are not the default 
shadow on iOS.

08:59:31.799 --> 08:59:33.860
And to at least answer the 
second question.  You can take 

08:59:33.861 --> 08:59:38.758
that, I believe it's called an 
ink layer.  You can take that 

08:59:38.759 --> 08:59:41.449
ink layer and apply it to 
anything you want and fire it 

08:59:41.450 --> 08:59:46.336
off on touches.  So if you are 
making your own custom component

08:59:46.337 --> 08:59:48.591
and want some ink, some ripple, 
sorry, rink and ripple are 

08:59:50.404 --> 08:59:51.845
interchangeable, then you can 
use that layer.  It's a normal 

08:59:51.846 --> 08:59:54.534
CA layer.  You can use that 
layer and apply it to your view.

08:59:59.601 --> 09:00:01.601
And then fire off the ripple 
based on interactions.

09:00:02.102 --> 09:00:04.102
&gt;&gt; Thank you very much.  

09:00:05.621 --> 09:00:07.621
&gt;&gt; ADRIAN SECORD:  Any 
questions?   

09:00:09.073 --> 09:00:10.898
&gt;&gt; LYNN JEPSEN:  I think that's 
it.  Thank you. 

09:00:10.899 --> 09:00:11.515
&gt;&gt; ADRIAN SECORD:  Thank you so 
much.  

09:00:11.516 --> 09:00:13.516
(Applause).

09:14:19.566 --> 09:14:21.566
.  

09:14:36.397 --> 09:14:38.397
Romain

09:16:26.865 --> 09:16:28.865
SRGB

09:17:29.455 --> 09:17:33.962
.   
Realtime captioning on this 

09:17:33.963 --> 09:17:35.963
screen.

09:19:37.142 --> 09:19:39.142
SK

09:19:43.860 --> 09:19:45.860
DK

09:21:55.807 --> 09:21:57.807
IOS

09:25:15.722 --> 09:25:17.722
&gt;&gt; LUCY ABRAMYAN:  Romainen 
welcome everyone  

09:25:19.292 --> 09:25:21.292
&gt;&gt; LUCY ABRAMYAN:  Welcome.

09:25:23.025 --> 09:25:25.266
&gt;&gt; I'm Romainen from the 
framework team and I can reveal 

09:25:25.267 --> 09:25:27.267
some of the stuff I've been 
working on.   

09:25:30.188 --> 09:25:32.188
&gt;&gt; LUCY ABRAMYAN:  I'm Lucy and 
I am an engineer.

09:25:34.097 --> 09:25:35.313
I am going to start off BU 
telling you something very 

09:25:35.314 --> 09:25:38.190
personal to me and that I'm very
passionate about.  

09:25:39.836 --> 09:25:42.507
But it's not just one thing.  
It's actually a combination of 

09:25:42.508 --> 09:25:44.508
things that I love.

09:25:46.766 --> 09:25:48.766
Every since I was a child I've 
been 

09:25:49.876 --> 09:25:51.907
marveled by space.  Isn't it 
amazing just think about it 

09:25:55.129 --> 09:25:59.440
for a second .  The diversity of
the planets.  Everything that's 

09:25:59.441 --> 09:26:01.441
going on around the solar system
right now?

09:26:03.951 --> 09:26:06.188
Wouldn't it be amazing if we 
could just see it up close.  

09:26:06.189 --> 09:26:08.022
There's just one problem.  
Humans can't go to another 

09:26:08.023 --> 09:26:10.023
planet.

09:26:11.718 --> 09:26:13.718
Not even mars just yet.

09:26:15.348 --> 09:26:17.870
Or can we?  This starts the 
second part of my passion.

09:26:21.755 --> 09:26:23.755
Augmented reality is delightful.

09:26:26.054 --> 09:26:28.054
It helps you interact with a 
world 

09:26:29.265 --> 09:26:31.265
that is within a whole new 
experience 

09:26:32.525 --> 09:26:34.525
that is catered to your 
environment.

09:26:35.603 --> 09:26:37.603
ARCore is Google's platform for 
augmented reality applications.

09:26:40.765 --> 09:26:43.218
But even if we use ARCore to 
help us understand the 

09:26:43.219 --> 09:26:45.219
environment, what do we 

09:26:47.313 --> 09:26:49.313
do about 3D rendering?  

09:26:50.801 --> 09:26:52.801
Okay so while it's not exactly 
rocket 

09:26:54.054 --> 09:26:56.054
science, today 3D rendering has 
a steep learning curve.

09:26:58.432 --> 09:27:00.432
But if you are like me, you are 
still 

09:27:02.174 --> 09:27:04.174
really passionate about space 
and AR and 

09:27:05.686 --> 09:27:06.899
3D and rendering and graphics 
and matrix math so you just 

09:27:06.900 --> 09:27:08.900
start coding.

09:27:11.458 --> 09:27:13.323
And coding and coding and coding
and then you quickly realize 

09:27:13.324 --> 09:27:15.324
there's a lot of code.

09:27:18.424 --> 09:27:21.878
&gt;&gt; How many of you have written 
(inaudible).  First of all I'm 

09:27:21.879 --> 09:27:24.129
so sorry.  Second of all you 
probably know how difficult it 

09:27:24.130 --> 09:27:27.792
is.  I've been doing this kind 
of stuff for basically ten years

09:27:27.793 --> 09:27:32.122
at Google.  And it's a pain.   
&gt;&gt; LUCY ABRAMYAN:  Here's my 

09:27:32.123 --> 09:27:34.371
point right here.  It's 
difficult.

09:27:37.635 --> 09:27:40.496
And we've noticed that there's 
so much in common throughout all

09:27:40.497 --> 09:27:45.626
AR Apps.  Things like streaming 
the camera image to the 

09:27:45.627 --> 09:27:49.710
background or even just making 
an object appear on the screen. 

09:27:49.711 --> 09:27:51.155
So be wanted to take care of 
that so you don't have to go 

09:27:51.156 --> 09:27:53.156
through the pain.
&gt;&gt; I go through the pain.  

09:27:55.505 --> 09:27:57.505
&gt;&gt; LUCY ABRAMYAN:  That's why we
built 

09:28:01.563 --> 09:28:03.617
the Sceneform SDK to make it 
quick, simple and familiar to 

09:28:03.618 --> 09:28:06.730
any Android developer.  
Sceneform is a 3D framework that

09:28:06.731 --> 09:28:11.856
makes it easy for you to build 
AR graphs.  It includes an 

09:28:11.857 --> 09:28:14.332
Android studio plug-in that 
allows you to import, view and 

09:28:14.333 --> 09:28:16.333
even 

09:28:17.426 --> 09:28:21.948
edit 3D models.  The API offers 
a high level way of working with

09:28:21.949 --> 09:28:25.648
3D and it's tightly integrated 
with ARCore.  So it makes it 

09:28:25.649 --> 09:28:29.309
especially easy to build AR 
Apps.  Because it integrates 

09:28:29.310 --> 09:28:31.310
with the Android 

09:28:34.431 --> 09:28:36.455
view framework you can easily 
add AR into an existing App for 

09:28:36.456 --> 09:28:38.456
create one from 

09:28:39.472 --> 09:28:41.472
scratch

09:28:45.679 --> 09:28:47.715
.  
The "New York Times" use 

09:28:47.716 --> 09:28:51.200
Sceneform in their new AR 
articles.  You can download the 

09:28:51.201 --> 09:28:55.300
"New York Times" App today and 
search for augmented reality and

09:28:55.301 --> 09:28:58.150
not only read about David bowie 
but also walk around a manikin 

09:29:01.768 --> 09:29:03.884
wearing his costumes.  

09:29:07.142 --> 09:29:08.582
Otto, the online furnishing 
retailer used Sceneforms to 

09:29:08.583 --> 09:29:12.450
allow customers to see what a 
piece of furniture looks like in

09:29:12.451 --> 09:29:14.692
their living room before they 
buy it.  If you are from a 

09:29:14.693 --> 09:29:16.693
European country you will be 
able to download the App and try

09:29:17.158 --> 09:29:19.158
it out.
&gt;&gt; And actually a couple of the 

09:29:21.646 --> 09:29:23.923
engineers from otto are in the 
audience somewhere.  I just want

09:29:23.924 --> 09:29:25.543
to thank them because they were 
very patient with us when we 

09:29:25.544 --> 09:29:31.097
were working on fun.  They went 
through all the early versions 

09:29:31.098 --> 09:29:32.109
of the API and it wasn't always 
working right.  So thank you.  

09:29:32.110 --> 09:29:36.824
&gt;&gt; LUCY ABRAMYAN:  Thanks for 
helping us build it.  Yes.  

09:29:38.047 --> 09:29:41.312
I'm going Play this video again 
because I love it.  Remember 

09:29:41.313 --> 09:29:43.313
that solar system I was talking 
about that I wanted to bring to 

09:29:43.583 --> 09:29:47.845
you?  Here it is right inside 
your living room.  And trust me 

09:29:47.846 --> 09:29:52.144
without the thousands of lines 
of rendering code.  You can see 

09:29:52.145 --> 09:29:54.145
this code online right now 

09:29:57.456 --> 09:29:58.872
by going to our GitHub repo.  
There are links at the end of 

09:29:58.873 --> 09:30:01.520
the presentation.  
So let's walk through how we 

09:30:01.521 --> 09:30:05.636
built this App.  
First we'll start off with 

09:30:05.637 --> 09:30:10.145
common concepts of AR Apps and 
then show you code snippets 

09:30:10.146 --> 09:30:12.146
using Sceneform.

09:30:13.249 --> 09:30:14.924
After we've covered the basics, 
Romain will go into detail about

09:30:14.925 --> 09:30:20.478
physically based materials and 
give you all sorts of rendering 

09:30:20.479 --> 09:30:22.479
knowledge to help you 

09:30:23.531 --> 09:30:25.531
optimize and make beautiful 3D 
objects 

09:30:27.343 --> 09:30:30.438
in your App . 
The Sceneform API consists of 

09:30:30.439 --> 09:30:32.439
two concepts.

09:30:35.067 --> 09:30:37.067
The scene and the view

09:30:39.990 --> 09:30:43.856
.  The scene represents the 
objects you are adding to the 

09:30:39.990 --> 09:30:41.990
world.

09:30:44.548 --> 09:30:46.548
Like through 3D models that you 
want to place in your AR App.

09:30:48.607 --> 09:30:50.607
The view is where your scene 
will be 

09:30:52.569 --> 09:30:54.569
drawn.  In this case it's your 
device screen 

09:30:55.664 --> 09:30:57.098
and where the device is in the 
world.  Render will draw the 

09:30:57.099 --> 09:30:59.099
scene from this perspective.

09:31:03.282 --> 09:31:04.914
The view ties in to the Android 
view framework or system and 

09:31:04.915 --> 09:31:08.199
that's your hook into the App.  
As a developer, you will build 

09:31:08.200 --> 09:31:10.200
your 

09:31:11.927 --> 09:31:13.927
scene by defining the spatial 

09:31:17.631 --> 09:31:20.715
relationships of objects.  
To do this Sceneform provide as 

09:31:20.716 --> 09:31:25.254
high level scene graph API for 
defining the hierarchy of 

09:31:25.255 --> 09:31:28.135
objects and their spatial 
relationships.  One analogy that

09:31:28.136 --> 09:31:30.175
I like to think about is the 
Android view hierarchy.

09:31:34.578 --> 09:31:36.578
But instead of obviously in 3D.

09:31:38.411 --> 09:31:40.244
Instead of view we use graph 
nodes.  Each node contains all 

09:31:40.245 --> 09:31:42.245
the information 

09:31:43.516 --> 09:31:46.792
that Sceneform needs to render 
it and to interact with it.  And

09:31:46.793 --> 09:31:49.650
finally nodes can be added to 
other nodes forming a 

09:31:49.651 --> 09:31:51.651
parent-child relationship.  

09:31:54.940 --> 09:31:56.940
In our solar system example, 
planets 

09:31:58.878 --> 09:32:01.139
orbit around the sun, and moons 
of these planets orbit around 

09:32:01.140 --> 09:32:03.140
the planets.

09:32:04.212 --> 09:32:06.212
A natural way to define the 
solar 

09:32:07.270 --> 09:32:09.270
system in a scene graph is to 
make the 

09:32:11.206 --> 09:32:13.446
sun the root node and add 
planets as the sun's children 

09:32:13.447 --> 09:32:16.087
and add the moons as their 
children.  

09:32:18.142 --> 09:32:20.142
That way if you want to animate 
the 

09:32:22.668 --> 09:32:23.905
MAERTSDZ earth orbiting the sun 
the moon will just follow the 

09:32:23.906 --> 09:32:27.578
earth.  You don't have to do the
complicated math to figure out 

09:32:27.579 --> 09:32:29.579
the moon's relationship to the 
sun while the earth 

09:32:33.032 --> 09:32:35.032
is orbiting it . 

09:32:36.608 --> 09:32:38.030
In this video, it is the same 
solar system example that we saw

09:32:38.031 --> 09:32:40.031
a little bit ago.

09:32:41.946 --> 09:32:44.602
But we've also added touch 
interaction.  Nodes can become 

09:32:44.603 --> 09:32:49.280
interactive by adding touch 
listeners to them, obviously.  

09:32:49.281 --> 09:32:51.338
And we propagate touch events 
through the scene graph the same

09:32:51.339 --> 09:32:55.196
way Android touch events are 
propagated through the view 

09:32:55.197 --> 09:32:57.197
hierarchy.

09:33:01.343 --> 09:33:05.254
Nodes can contain #3SHGS 3D 
models or 2D Android views.  You

09:33:05.255 --> 09:33:07.911
can create an Android view just 
as you would in your layout 

09:33:07.912 --> 09:33:11.764
editor and put it in the world 
and interact with it like you 

09:33:11.765 --> 09:33:15.231
would any other App.  It is a 
first class citizen of our scene

09:33:15.232 --> 09:33:18.087
.  
So how does an Android developer

09:33:18.088 --> 09:33:20.088
usually 

09:33:23.643 --> 09:33:26.290
get started with Android studio.
I won't go too deep into this 

09:33:26.291 --> 09:33:28.940
because there is another talk 
tomorrow morning 

09:33:33.457 --> 09:33:34.691
called "build, iterate and 
launch" that will show you all 

09:33:34.692 --> 09:33:39.589
the steps.  But I want you to 
know we have built a plug-in for

09:33:39.590 --> 09:33:42.425
Android studio that allows you 
to drop in 3D models built with 

09:33:45.291 --> 09:33:47.936
standard modeling tools like 
Maya or you can download them 

09:33:47.937 --> 09:33:50.372
through Polly.  You go through 
the import flow and 

09:33:55.097 --> 09:33:56.730
that converts the models in an 
SFA and SFB format.  These are 

09:33:56.731 --> 09:33:58.731
particular to Sceneform.

09:34:00.032 --> 09:34:02.032
The SSA is what's bundled into 
your App.

09:34:06.583 --> 09:34:08.583
So drop the SFA file into the 
source 

09:34:09.883 --> 09:34:11.883
assets folder and you can ship 
it with your App.  

09:34:15.937 --> 09:34:18.531
One thing we wanted to note, 
yes, you can view and edit your 

09:34:19.958 --> 09:34:21.204
models right there in Android 
studio.

09:34:21.205 --> 09:34:23.205
&gt;&gt; And what's important to note 
that is 

09:34:24.670 --> 09:34:27.125
we use the same renderer on the 
device as inside Android 

09:34:27.126 --> 09:34:29.824
studios.  So what you see in 
studio will be what you see on 

09:34:29.825 --> 09:34:33.290
the device. 
One other thing to note.  There 

09:34:33.291 --> 09:34:35.291
are going to be more details 
tomorrow.

09:34:36.752 --> 09:34:39.009
The importer acts as a Gradle 
plug-in.  For every asset that 

09:34:39.010 --> 09:34:41.010
you import inside your project 
you are going to get a new 

09:34:41.269 --> 09:34:45.346
Gradle task.  Which means if 
your designers give you a new 

09:34:45.347 --> 09:34:46.977
version of the asset all you 
have to do is replace the file 

09:34:46.978 --> 09:34:49.463
in your project and the next 
time you build it 

09:34:53.952 --> 09:34:57.020
will con convert the (?) And you
will be up to date.  You don't 

09:34:57.021 --> 09:34:59.490
have to worry about going 
through a manual wizard every 

09:34:59.491 --> 09:35:01.763
time you get a new version of 
the asset.  

09:35:04.430 --> 09:35:07.076
&gt;&gt; LUCY ABRAMYAN:  Start coding.
Let's start off with our on 

09:35:07.077 --> 09:35:09.943
create method and mirror 
activity just as you would.

09:35:13.632 --> 09:35:17.331
Find the AR fragment, find 
Sceneform's AR fragment.  This 

09:35:17.332 --> 09:35:18.982
takes care of setting up the 
ARCore session for you and 

09:35:18.983 --> 09:35:22.889
manages the life cycle of 
Sceneform.  And naturally it 

09:35:22.890 --> 09:35:25.336
will contain the AR view.  And 
the view holds a reference to 

09:35:25.337 --> 09:35:29.823
the scene.  I want to note here 
that you don't have to use our 

09:35:29.824 --> 09:35:32.318
fragment you can use the view 
and, therefore, the scene 

09:35:32.319 --> 09:35:33.964
directly.
&gt;&gt; This is one of the powerful 

09:35:33.965 --> 09:35:36.398
things about Sceneform.  Because
it's just using the regular 

09:35:38.237 --> 09:35:39.873
Android view that happens to be 
a surface view you can drop it 

09:35:39.874 --> 09:35:44.982
wherever you want in our 
application.  It doesn't have to

09:35:44.983 --> 09:35:49.109
be full screen.  And we don't 
take over your application.  If 

09:35:49.110 --> 09:35:53.174
you try to do something (?) 
Becomes your application.  It is

09:35:53.175 --> 09:35:55.019
a very easy way to embed AR 
inside an Android application 

09:35:55.020 --> 09:35:58.070
that already exists.  New York 
times is a great example how far

09:35:58.071 --> 09:36:00.071
you can push this.

09:36:01.791 --> 09:36:04.244
Because they show AR view a web 
view.  So they just put an AR 

09:36:04.245 --> 09:36:09.056
view behind the transparent web 
view.  As you scroll the web 

09:36:09.057 --> 09:36:13.075
view the load contains into the 
AR view.  It doesn't have to be 

09:36:13.076 --> 09:36:15.076
just a simple full screen 
example like you are seeing 

09:36:16.544 --> 09:36:18.165
here.   
&gt;&gt; LUCY ABRAMYAN:  So let's 

09:36:18.166 --> 09:36:22.046
start loading all of our models.
In this case I have a to-do for 

09:36:22.047 --> 09:36:24.047
you to load the rest of them.

09:36:32.560 --> 09:36:34.560
But I'll show you how to build a
3D 

09:36:36.556 --> 09:36:39.594
model.  In Sceneform we have two
types of renderables.  

09:36:39.595 --> 09:36:39.802
Renderables are the things that 
are going to be rendered on the 

09:36:39.803 --> 09:36:44.736
screen.  I know we're very 
creative with naming.  In this 

09:36:44.737 --> 09:36:46.737
case we want to load the sun 

09:36:49.704 --> 09:36:50.935
model which was dropped in to 
our REZ ROU folder so you set 

09:36:50.936 --> 09:36:52.936
the source and build.

09:36:54.049 --> 09:36:56.922
I also want to point out these 
are completeable futures.  So it

09:36:56.923 --> 09:36:58.923
will do the loading in the 

09:36:59.984 --> 09:37:02.017
background and you can accept 
and handle as you would with a 

09:37:02.018 --> 09:37:04.088
completeable feature. 
I should also mention Kotlin 

09:37:04.089 --> 09:37:06.940
here.  We can do all of this in 
Kotlin but 

09:37:10.795 --> 09:37:12.795
all of the code snippets will be
in Java.

09:37:13.473 --> 09:37:15.473
&gt;&gt; One thing we haven't done yet
is 

09:37:16.566 --> 09:37:18.809
built Kotlin extensions for 
Sceneform.  But if you are 

09:37:18.810 --> 09:37:21.062
inclined to do so I would love 
to see your code.  

09:37:22.519 --> 09:37:25.141
&gt;&gt; LUCY ABRAMYAN:  So remember 
earlier we showed you this graph

09:37:25.142 --> 09:37:27.142
representing the sun and the 
planets.

09:37:29.516 --> 09:37:32.184
Keep the structure in mind 
because we're going to be 

09:37:32.185 --> 09:37:34.185
loading and creating the scene 
graph. 

09:37:36.490 --> 09:37:37.931
We've loaded all the models so 
now let's build the solar 

09:37:37.932 --> 09:37:39.932
system.

09:37:41.248 --> 09:37:43.248
We start off with the sun node.

09:37:44.713 --> 09:37:46.767
Create a new node and set its 
renderable to be the sun model 

09:37:46.768 --> 09:37:54.190
that you had loaded.  Next we 
create the earth node.  We set 

09:37:54.191 --> 09:37:56.425
its parent to the sun.  
Therefore building the scene 

09:37:56.426 --> 09:37:58.426
graph.  Starting to build the 
scene graph.

09:38:01.312 --> 09:38:05.381
Notice here that I have set the 
sun to earth meter as constant. 

09:38:05.382 --> 09:38:07.855
In this case I've used 0.5 
meters because I wanted to fit 

09:38:07.856 --> 09:38:09.856
the 

09:38:11.322 --> 09:38:14.172
solar system inside the living 
room.  But we've set the earth's

09:38:14.173 --> 09:38:19.386
local position relative to its 
parent, the sun.  Set the 

09:38:19.387 --> 09:38:21.726
renderable that we loaded and 
continue. 

09:38:23.593 --> 09:38:29.116
Now the moon.  Create the node. 
Set the parent to earth.  And 

09:38:29.117 --> 09:38:31.117
notice here now that the local 

09:38:32.359 --> 09:38:34.817
position of the moon is earth to
moon in meters.  I think I've 

09:38:34.818 --> 09:38:36.818
set it to be 0.1.

09:38:38.920 --> 09:38:40.920
It has nothing to do with the 
sun.

09:38:43.832 --> 09:38:45.797
Set the renderable as a moon 
enderable and you are set.  Now 

09:38:45.798 --> 09:38:48.245
to animate their orbit you can 
just use Android's property 

09:38:48.246 --> 09:38:52.581
animation system.  We've created
some evaluators for you to use. 

09:38:52.582 --> 09:38:55.431
Once we return the root node we 
now have 

09:39:00.329 --> 09:39:02.373
the entire graph for our solar 
system.  So let's bring the 

09:39:02.374 --> 09:39:04.383
solar system in to the scene.

09:39:08.227 --> 09:39:10.865
All we have to do is parent it 
to the scene.  And that is it.  

09:39:10.866 --> 09:39:13.516
Or parent the sun to the scene. 
And the solar system is now in 

09:39:13.517 --> 09:39:15.517
your room.

09:39:18.958 --> 09:39:22.758
Or we could do something else.  
Anchors.  I don't know if you 

09:39:22.759 --> 09:39:24.759
know about ARCore anchors but 
they are how you attach your 

09:39:25.655 --> 09:39:27.655
content to the world.

09:39:28.735 --> 09:39:30.735
ARCore makes sure they are 
anchored to the world.

09:39:33.040 --> 09:39:35.472
You can get averageors from 
ARCore's hid test based on the 

09:39:35.473 --> 09:39:40.153
user's touch event or with our 
new cloud anchors you can use an

09:39:40.154 --> 09:39:42.154
anchor that another friend has 

09:39:43.254 --> 09:39:46.134
created on another device.  Or 
using anchors we've created an 

09:39:47.990 --> 09:39:50.026
extension to node called the 
anchor node that just takes an 

09:39:50.027 --> 09:39:52.027
anchor and now brings 

09:39:53.082 --> 09:39:55.131
that anchor into your scene 
graph.  Set the anchor node's 

09:39:55.132 --> 09:40:00.009
parent.  Easily.  Just to the 
scene.  And then set the sun's 

09:40:00.010 --> 09:40:03.299
parent to the anchor node.  
Notice how we've rearranged it a

09:40:03.696 --> 09:40:07.169
little bit.  First we had the 
scene with the sun as the root 

09:40:07.170 --> 09:40:11.443
node.  Now we've created the 
scene, the anchor node, and then

09:40:11.444 --> 09:40:13.444
the sun and the rest of the 
solar system.

09:40:15.979 --> 09:40:17.979
I was mentioning model 
renderables before.

09:40:22.066 --> 09:40:25.512
Now we'll talk about the 2D view
renderables.  To add 2D in to 

09:40:25.513 --> 09:40:27.983
your App, in this case I've used
a little info card that pops 

09:40:32.518 --> 09:40:36.641
up about a quarter of a meter 
above a planet, say.  And you 

09:40:36.642 --> 09:40:38.642
want it to display some 
information on it.

09:40:41.963 --> 09:40:44.479
So I've created the node that 
would hold the view renderable. 

09:40:44.480 --> 09:40:46.907
I've set it to a planet.  And it
will now float quarter of a 

09:40:48.743 --> 09:40:50.743
meter above the planet.

09:40:51.893 --> 09:40:54.204
Wherever that planet is.  Start 
off by building a view 

09:40:54.614 --> 09:40:56.614
renderable.

09:40:59.709 --> 09:41:01.561
Notice instead of the REZ RAW 
source I've set it to the view 

09:41:01.562 --> 09:41:07.386
ID.  And that's all there is to 
it.  Now you have the 2D view 

09:41:07.387 --> 09:41:09.387
just as you 

09:41:10.667 --> 09:41:13.104
would have in any other 
application and you can do 

09:41:13.105 --> 09:41:15.154
things with that view like set 
the text.

09:41:18.607 --> 09:41:23.331
Finally, if you want to drag, 
scale and rotate objects, we've 

09:41:23.332 --> 09:41:28.082
made that really easy for you by
creating a transformable node.  

09:41:28.083 --> 09:41:30.083
The transformable node is an 
extension 

09:41:31.965 --> 09:41:34.408
to node but it also understands 
touch events and gestures like 

09:41:34.409 --> 09:41:38.767
dragging and scaling and 
rotating ONTs.  So in this case 

09:41:38.768 --> 09:41:40.768
if instead of creating 

09:41:42.056 --> 09:41:43.466
a sun node I created a 
transformable sun node, I would 

09:41:43.467 --> 09:41:45.467
just do everything else 

09:41:46.753 --> 09:41:49.202
that I did before but now we can
actually drag and move the solar

09:41:49.203 --> 09:41:53.316
system.  
I should mention that there is 

09:41:53.317 --> 09:41:55.317
-- there 

09:41:57.235 --> 09:42:00.298
was a talk earlier today about 
UX interactions in AR.  So, if 

09:42:00.299 --> 09:42:02.945
you want to know more about the 
best practices for UX, please go

09:42:02.946 --> 09:42:04.946
back 

09:42:06.594 --> 09:42:09.156
and look at that talk.  
I'll hand it over to Romain.

09:42:10.575 --> 09:42:12.575
&gt;&gt; Let's talk about materials.

09:42:14.662 --> 09:42:16.532
This is a simple part of 
Sceneform.  But before you can 

09:42:16.533 --> 09:42:18.533
understand how to create your 
own material we have to 

09:42:20.903 --> 09:42:21.913
understand the concept behind 
physically based rendering.  

09:42:21.914 --> 09:42:26.401
So after import an asset through
the Android plug-in like Lucy 

09:42:26.402 --> 09:42:28.402
said you end up with two files.

09:42:30.703 --> 09:42:33.155
A dot SFA and SF becomes.  The B
is the one that goes into your 

09:42:34.770 --> 09:42:36.770
application and that will run at
run time.

09:42:42.576 --> 09:42:43.568
The dot SFA is a Json 
description of the asset.  It 

09:42:43.569 --> 09:42:45.569
looks a little bit something 
like this.

09:42:47.622 --> 09:42:50.304
So this is the SFA from the moon
of the earth from our example.  

09:42:50.305 --> 09:42:53.202
You can see this attribute 
called base color, normal and 

09:42:53.203 --> 09:42:58.326
metallic roughness.  Those point
to textures that are defined 

09:42:58.327 --> 09:43:01.255
somewhere else in the file.  I'm
not going to go into details 

09:43:01.256 --> 09:43:03.256
about 

09:43:04.754 --> 09:43:06.250
the syntax and the structure of 
the file mostly because there is

09:43:06.251 --> 09:43:09.166
excellent documentation on line 
and there is the talk tomorrow 

09:43:09.167 --> 09:43:12.616
morning so you should check that
out.  What I want to talk about 

09:43:12.617 --> 09:43:16.968
is what do we -- what kind of 
textures do you need to create 

09:43:16.969 --> 09:43:18.969
to be meaningful for the 

09:43:22.899 --> 09:43:25.755
color, the normal and the 
metallic and RUCHness textures. 

09:43:25.756 --> 09:43:27.184
Before we do this we have to 
talk about physically based 

09:43:27.185 --> 09:43:31.472
rendering. 
It start becoming quite popular 

09:43:31.473 --> 09:43:36.381
over the past three or four 
years.  It's now used in a lot 

09:43:36.382 --> 09:43:39.289
of games.  It's still fairly 
uncommon on mobile.

09:43:42.334 --> 09:43:44.334
The basic idea behind it is that
we're 

09:43:46.221 --> 09:43:48.061
relying on physical principles 
to define all the behaviors and 

09:43:48.062 --> 09:43:52.123
all the equations that we use in
the rendering system.  So that 

09:43:52.124 --> 09:43:56.618
includes things like separating 
the lighting code from the code 

09:43:56.619 --> 09:43:58.619
that defines the surface and it 

09:43:59.868 --> 09:44:01.710
doesn't impact the metals 
itself.  It means we have to 

09:44:01.711 --> 09:44:04.218
take into account laws of 
physics like the energy 

09:44:04.642 --> 09:44:08.696
conservation.  EE use physical 
(?).  For instance when we 

09:44:08.697 --> 09:44:10.697
declare the sun 

09:44:12.778 --> 09:44:14.778
as a dynamic light in a scene we
use the unicode lux.

09:44:16.277 --> 09:44:18.277
If you were to add a light in 
your AR 

09:44:19.332 --> 09:44:22.075
scene it's just a light bulb you
can use watts or lumens as the 

09:44:22.076 --> 09:44:24.076
unit. 

09:44:26.548 --> 09:44:28.591
So it's a number of things that 
are grounding in reality that 

09:44:28.592 --> 09:44:31.653
both help us validate our 
rendering but also makes our 

09:44:31.654 --> 09:44:33.654
life easier because those are 
things 

09:44:34.980 --> 09:44:36.828
we deal with every day and that 
feel natural to us.  I'll show 

09:44:36.829 --> 09:44:38.829
you an example. 

09:44:41.534 --> 09:44:43.586
This is an example it's not in 
AR but it has been rendered 

09:44:43.587 --> 09:44:47.473
using our rendering engine.  A 
simple sphere.  You can see 

09:44:47.474 --> 09:44:49.474
reflections on the sphere.  What
you are seeing here in action is

09:44:52.375 --> 09:44:54.375
a physical effect called the 
planet 

09:44:55.901 --> 09:44:57.943
effect after 19th century 
physicist.  And the closer you 

09:44:57.944 --> 09:44:59.793
are to the edge of the field the
more you can see the 

09:44:59.794 --> 09:45:03.274
reflections.  And this is a 
natural phenomenon that you can 

09:45:03.275 --> 09:45:07.346
see everywhere.  This is a photo
I took in Lake Tahoe.  You can 

09:45:07.347 --> 09:45:09.218
see that close to the edge where
I was standing you can see 

09:45:09.219 --> 09:45:12.717
through the water.  And the 
further away you get the more 

09:45:14.538 --> 09:45:16.786
you can see the reflections of 
the water.  Again you can see 

09:45:16.787 --> 09:45:19.579
this on every object.  Every 
object around you follows this 

09:45:19.755 --> 09:45:22.627
principle.  Might not be like 
this at first but this is what 

09:45:22.628 --> 09:45:27.359
happens.  And we recreate this 
physical behaviors in our 

09:45:27.360 --> 09:45:31.073
REBDZering engine to make things
look as realistic as possible. 

09:45:34.732 --> 09:45:36.356
So we follow a work floe format 
called the metallic roughness 

09:45:36.357 --> 09:45:39.451
work flow.  If you look that up 
you will see there's a lot of 

09:45:39.452 --> 09:45:41.452
information out there.

09:45:43.135 --> 09:45:45.395
The metallic/roughness work flow
is available in a lot of tools.

09:45:49.520 --> 09:45:51.520
Engine four uses it.

09:45:52.583 --> 09:45:55.252
Blender has access as well.  The
way it works is when you want to

09:45:57.078 --> 09:45:59.931
define a new material you are 
actually trying to describe and 

09:45:59.932 --> 09:46:02.991
define a surface.  To define the
surface you are going to need 

09:46:02.992 --> 09:46:06.862
three things.  We're going take 
them in this order for specific 

09:46:06.863 --> 09:46:08.863
reasons and we'll explain them a
bit. 

09:46:09.939 --> 09:46:11.750
The first one is you need to 
define the metallic property of 

09:46:11.751 --> 09:46:15.489
the surface.  Often we talk 
about metallicness but it's not 

09:46:15.490 --> 09:46:17.490
even a word.

09:46:18.766 --> 09:46:20.201
So metallic at high level is 
whether or not the object is a 

09:46:20.202 --> 09:46:25.375
metal.  We're going on see why 
this is very important to us.  

09:46:25.376 --> 09:46:29.037
Then you are going to define the
color of the object.  We call it

09:46:29.038 --> 09:46:33.533
the base color as opposed to the
disfuse color.  Those are terms 

09:46:33.534 --> 09:46:35.534
you might have seen in older 
engines.

09:46:38.445 --> 09:46:40.487
You need to define the 
roughness.  Roughly it means how

09:46:40.488 --> 09:46:45.359
shiny the object is.  And if you
want to go further there are two

09:46:45.360 --> 09:46:47.360
other things you can define to 

09:46:48.615 --> 09:46:51.500
give your surface more details 
and more natural appearance.  

09:46:51.501 --> 09:46:53.501
The first one is the normal or 
the normal map.

09:46:55.364 --> 09:46:58.457
It just helps break the evenness
of the surface.  The second one 

09:46:58.458 --> 09:47:03.359
is called the ambient OE 
collusion or OE collusion.  So 

09:47:03.360 --> 09:47:05.360
first what is a non-metal?  I'll
spare you the equation.

09:47:08.911 --> 09:47:12.996
This is actually fairly simple. 
We have an orange object.  It's 

09:47:12.997 --> 09:47:16.066
drawn in gray to make the 
diagram easier to read.  We have

09:47:16.067 --> 09:47:17.686
light coming from a light source
and hitting the surface of the 

09:47:17.687 --> 09:47:22.003
object.  The light that hits the
object gets split in to to 

09:47:22.004 --> 09:47:26.542
continents.  The first one in 
white is the reflected part.  So

09:47:26.543 --> 09:47:29.194
those are all the reflections.  
So in that orange ball that we 

09:47:29.195 --> 09:47:31.195
saw 

09:47:34.573 --> 09:47:34.729
before the edges you could see 
those reflections that's this 

09:47:34.730 --> 09:47:36.755
part of the light. 
Then the other part of the light

09:47:36.756 --> 09:47:41.460
is refracted into the object.  
And most objects around us they 

09:47:41.461 --> 09:47:44.317
absorb some of the light.  The 
light enters the object, it gets

09:47:46.338 --> 09:47:49.217
scattered, bounces around inside
the ONT and some of the light 

09:47:49.218 --> 09:47:51.721
will come out but not all of it.
This is what gives object 

09:47:51.722 --> 09:47:55.595
colors.  In that particular case
because the object appears 

09:47:55.596 --> 09:47:58.291
orange it just means that green 
and blue components of the light

09:47:59.921 --> 09:48:02.409
have been an southerned inside 
the object.  That orange light 

09:48:02.410 --> 09:48:04.410
that comes out is 

09:48:06.233 --> 09:48:08.717
called the (?) Light.

09:48:12.401 --> 09:48:14.456
The white is called the speck U 
LAR.  

09:48:16.893 --> 09:48:18.893
This is an example of 
non-metallic orange ball.

09:48:20.622 --> 09:48:22.718
If you look at the reflections 
here this is an environment 

09:48:22.719 --> 09:48:26.993
inside the classroom where we 
have overhead white lights.  

09:48:26.994 --> 09:48:29.239
Even though the object itself is
orange, the lights appear white.

09:48:31.710 --> 09:48:35.407
That's because they just bounce 
off and don't enter the object. 

09:48:35.408 --> 09:48:37.408
They don't take the color of the
object in to account.

09:48:40.335 --> 09:48:41.968
Then the rest of the object, are
the non-reflective parts are 

09:48:41.969 --> 09:48:44.820
orange as expected. 
If you have a metallic object, 

09:48:44.821 --> 09:48:49.566
metals are conductors, and 
they're called conductors 

09:48:49.567 --> 09:48:51.803
because when the energy hits 
them in this case lights the 

09:48:51.804 --> 09:48:55.275
lights, the part of the energy 
that's refracted into the 

09:48:55.276 --> 09:48:57.705
surface gets absorbed.  Just 
gets transmitted into the object

09:49:01.170 --> 09:49:03.170
and does not get scattered 
outside.

09:49:04.270 --> 09:49:06.312
There's no disfuse light you 
only get reflections.  However 

09:49:06.313 --> 09:49:08.590
what happens with the reflexs is
they take the color of the 

09:49:08.591 --> 09:49:13.069
object.  So you don't get white 
reflections anymore.  You get 

09:49:13.070 --> 09:49:15.709
orange reflections instead. 
If we take the symbol we just 

09:49:15.710 --> 09:49:17.710
saw and 

09:49:20.071 --> 09:49:23.054
turn it in to met look again at 
the overhead lights of that 

09:49:23.055 --> 09:49:28.048
classroom you can see they now 
appear orange.  This is because 

09:49:28.049 --> 09:49:29.087
the rest of the light, the rest 
of the speck U LAR light was 

09:49:29.088 --> 09:49:31.088
absorbed inside this object.

09:49:33.165 --> 09:49:35.232
You can see another side effect 
of this (?) That we just talked 

09:49:35.233 --> 09:49:38.488
about.  If you look at the edges
of the sphere you can see the 

09:49:38.489 --> 09:49:40.337
reflections are not orange 
anymore.  They take on the color

09:49:40.338 --> 09:49:45.065
of the environment.  Again a 
very natural affect.  It feels 

09:49:45.066 --> 09:49:47.719
weird when you see it for the 
first time in the rendering 

09:49:47.720 --> 09:49:51.467
engine, but rendering engineers 
like me were obsessed about 

09:49:51.468 --> 09:49:55.769
their work.  It comes Christmas 
time they look at the Christmas 

09:49:55.770 --> 09:49:59.214
tree and take a picture of one 
of the ornaments.  I was holding

09:49:59.215 --> 09:50:01.682
one of my phones on the side and
lighting the green metal ball 

09:50:03.940 --> 09:50:06.428
with an orange light from the 
wallpaper on my phone and you 

09:50:06.429 --> 09:50:08.429
can see on the edge suddenly the
reflections are not green 

09:50:09.718 --> 09:50:10.737
anymore they take on the orange 
light coming from the light 

09:50:10.738 --> 09:50:12.738
source.

09:50:15.075 --> 09:50:16.924
What we just saw here can appear
weird when you see out the 

09:50:16.925 --> 09:50:20.010
computer for the first time but 
this is perfectly natural and it

09:50:20.011 --> 09:50:23.923
happens everywhere around you. 
So the metallic property I 

09:50:23.924 --> 09:50:27.185
mentioned this is though first 
thing you should decide.  And 

09:50:27.186 --> 09:50:30.648
you have seen why.  Because when
you define the color of the 

09:50:30.649 --> 09:50:33.133
object, when you define the base
color, depending on whether or 

09:50:33.134 --> 09:50:37.003
not the object is metallic or 
not it's going dramatically 

09:50:37.004 --> 09:50:39.276
change the aspect of the 
surface.  So you should always 

09:50:39.277 --> 09:50:41.335
decide first whether you are 
dealing with metal or non-metal.

09:50:41.947 --> 09:50:46.855
When it comes time to create the
actual texture the metallicness 

09:50:46.856 --> 09:50:48.856
of the object 

09:50:49.937 --> 09:50:51.937
can be defined as gray scale 
texture.

09:50:52.981 --> 09:50:54.981
That is between 0 and 265.

09:50:56.982 --> 09:50:59.064
At 0 the object is not a metal 
and at 255 when it's white the 

09:50:59.065 --> 09:51:01.344
object is a metal.  Most of the 
time should be either one.

09:51:04.604 --> 09:51:06.604
All the values in between are 
mostly 

09:51:13.087 --> 09:51:15.087
used for anti-Al aliesing 
purposes.

09:51:22.029 --> 09:51:24.611
Certain alloys in real life 
happens to be a mixture and you 

09:51:24.612 --> 09:51:27.571
can use intermittent values as 
well but most of the time you 

09:51:27.572 --> 09:51:31.038
won't have to worry about it. 
Very quickly, when a metal gets 

09:51:31.039 --> 09:51:33.341
rusty the texture becomes 
non-metallic.

09:51:37.058 --> 09:51:39.710
So if you are trying to create 
soft edge that's rusty the rust 

09:51:39.711 --> 09:51:42.760
stains will be non-metal.  And 
very often that's something you 

09:51:45.206 --> 09:51:46.031
will see tomorrow, you don't 
have to use textures for 

09:51:46.032 --> 09:51:50.333
everything.  You can use 
constants and very often get 

09:51:50.334 --> 09:51:53.210
away with not having a texture. 
You can say either it's metal or

09:51:53.211 --> 09:51:55.268
not. 
Next step you have to define the

09:51:55.269 --> 09:51:57.269
base colors.  So the color of 
the object.

09:52:00.359 --> 09:52:03.035
It defines either the diffuse 
color of the object for 

09:52:03.036 --> 09:52:05.677
non-metals or the speck U LAR 
color or the color of the 

09:52:08.745 --> 09:52:11.403
reflections for metallic OBTD 
WHABTs.  What's quite difficult 

09:52:11.404 --> 09:52:14.901
to do is it must be completely 
devoid of any lighting 

09:52:14.902 --> 09:52:18.615
information or shadowing.  We're
going to look at the example.  

09:52:18.616 --> 09:52:20.640
It can be hard because as human 
beings we never see the actual 

09:52:20.641 --> 09:52:24.389
color of an object.  We only see
objects through lighting.  So 

09:52:24.390 --> 09:52:26.622
it's difficult to imagine what 
it looks like.  But you can 

09:52:26.623 --> 09:52:29.907
quickly get used to it. 
Whenever you use a tool like 

09:52:29.908 --> 09:52:32.551
photoshop to build your textures
make sure you are 

09:52:37.300 --> 09:52:44.219
working in the sRGB color base. 
So this is a quick guide how to 

09:52:44.220 --> 09:52:46.220
build colors for objects.

09:52:49.740 --> 09:52:52.204
Based on real world data, most 
of non-metallic ONLTs use most 

09:52:52.205 --> 09:52:55.682
of the range of the brightness. 
So whenever you pick a color in 

09:52:55.683 --> 09:52:57.683
the 

09:52:58.944 --> 09:53:01.381
color picker for non-metallic 
object the value should be 

09:53:01.382 --> 09:53:06.074
between 10-240.  And there's 
nothing as dark as zero.  

09:53:06.075 --> 09:53:09.537
There's nothing as bright as 255
when we deal with non-metals.  

09:53:09.538 --> 09:53:13.486
And metals, on the other hand, 
are always fairly bright.  So 

09:53:13.487 --> 09:53:15.933
they are -- dark metals 
basically don't exist.  So you 

09:53:15.934 --> 09:53:17.934
should stay in the range shown 
up here.  

09:53:19.408 --> 09:53:20.426
I was mentioning you should not 
have any lighting information 

09:53:20.427 --> 09:53:24.906
inside the base color of the 
object.  You can see here a set 

09:53:24.907 --> 09:53:29.398
of swatches taken from real 
world observation.  You can see 

09:53:29.399 --> 09:53:31.463
that gold for instance that's in
real life appears quite yellow 

09:53:32.064 --> 09:53:36.802
and saturated.  The base color 
is not saturated.  All the 

09:53:36.803 --> 09:53:39.044
colors in the base color map 
tend to be very pale compared to

09:53:39.045 --> 09:53:42.734
what you actually perceive.  
Here is another example on the 

09:53:42.735 --> 09:53:44.735
right 

09:53:47.237 --> 09:53:49.481
you can see a material 
representing bricks.  On the 

09:53:49.482 --> 09:53:51.742
left you can see the base color 
texture.  You can see the 

09:53:51.743 --> 09:53:53.743
difference once we light the 
object all the contrast and 

09:53:54.195 --> 09:53:56.872
saturation appears.  But all 
that information is not in the 

09:53:58.496 --> 09:53:59.522
original texture that we're 
using to create this material. 

09:53:59.523 --> 09:54:03.792
So, again, you should work with 
your artist.  Make sure they're 

09:54:03.793 --> 09:54:08.116
familiar with the metallic 
roughness work flow.  Make sure 

09:54:08.117 --> 09:54:10.377
they at least understand the 
base color map should not 

09:54:10.378 --> 09:54:12.427
contain any lighting or 
shadowing. 

09:54:17.533 --> 09:54:19.533
Now I mentioned the (?) 
Roughness.

09:54:22.445 --> 09:54:24.445
Sim I way to define a surface is
like this.

09:54:25.918 --> 09:54:27.738
It's infinitely smooth.  There's
no object in the world that's 

09:54:27.739 --> 09:54:30.650
that smooth.  What happens when 
you have a smoother 

09:54:33.920 --> 09:54:36.588
object Rays of light that are 
coming to each other bounce off 

09:54:36.589 --> 09:54:38.589
(?

09:54:41.745 --> 09:54:43.745
) Each other as well so you get 
sharp.

09:54:44.801 --> 09:54:46.801
Rough surfaces have micro-facets
at the surface.

09:54:48.918 --> 09:54:49.952
Think of those as tiny mirrors 
that might not be in the same 

09:54:49.953 --> 09:54:51.953
direction.

09:54:53.474 --> 09:54:55.985
When light comes in the Rays of 
light can bounce off in RABDZ OM

09:54:55.986 --> 09:54:59.877
directions and that creates 
blurry reflections. 

09:55:00.896 --> 09:55:02.896
Those are examples.

09:55:05.035 --> 09:55:07.035
At the top you can see a ball, a
yellow metal.

09:55:09.356 --> 09:55:12.006
And we increase the roughness 
zero to one.  At the bottom we 

09:55:12.007 --> 09:55:16.090
have a non-metallic ball and 
increase it from zero to one.  

09:55:16.091 --> 09:55:18.756
We start with very sharp 
reflection.  As we get closer 

09:55:18.757 --> 09:55:21.463
and closer to one the 
reflections becomes so blurry 

09:55:21.464 --> 09:55:23.464
that we 

09:55:26.978 --> 09:55:28.978
can even perceive they are 
reflections.  

09:55:30.259 --> 09:55:32.099
So this is a very powerful 
feature because it lets you, 

09:55:32.100 --> 09:55:34.636
again, create things like 
polished metals or, you 

09:55:38.515 --> 09:55:40.737
know, plastic that has been used
for quite while and become 

09:55:40.738 --> 09:55:42.738
basically rough. 

09:55:45.847 --> 09:55:47.847
So roughness is similar to the 
metallic property.

09:55:49.760 --> 09:55:53.624
It is a gray scale texture used 
values between 0-255.  At zero 

09:55:53.625 --> 09:55:55.625
the surface is going to be 
glossy or shiny.

09:55:57.972 --> 09:55:59.839
At 255 extremely rough and you 
won't be able to see reflections

09:55:59.840 --> 09:56:02.923
anymore.  Be aware there might 
be differences between different

09:56:02.924 --> 09:56:04.924
tools.

09:56:06.049 --> 09:56:08.521
So, if you specify roughness of 
100 in blender that same 

09:56:08.522 --> 09:56:10.522
roughness might look different 
in a different engine because 

09:56:11.784 --> 09:56:13.406
there are different ways of 
doing computations.  You 

09:56:13.407 --> 09:56:15.407
shouldn't worry too much about 

09:56:16.882 --> 09:56:18.923
this just tweak the asset until 
it looks right.  Sometimes the 

09:56:18.924 --> 09:56:21.813
roughness will be called 
glossiness.  Glossiness is just 

09:56:21.814 --> 09:56:24.264
the opposite value so you can 
just invert the texture in 

09:56:27.354 --> 09:56:29.354
photoshop for instance to get 
the roughness map. 

09:56:30.862 --> 09:56:33.541
Next we want to add details.  So
save on memory and performance 

09:56:33.542 --> 09:56:36.205
we try to use smooth surfaces.

09:56:39.477 --> 09:56:41.556
When you build your mesh made of
triangles.  Here we have example

09:56:41.557 --> 09:56:46.648
of bricks that are completely 
smooth.  So add details we can 

09:56:46.649 --> 09:56:48.649
use a normal map.  When you 
apply to the object you get 

09:56:51.774 --> 09:56:53.774
to a little bit of shadowing and
more details on the surface.

09:56:55.589 --> 09:56:56.792
I'm not going to go into too 
much details because there's a 

09:56:56.793 --> 09:56:59.482
ton of information available 
online so we're going to skip 

09:56:59.483 --> 09:57:01.712
that before we run out of time. 
The only thing to know is that 

09:57:01.713 --> 09:57:03.713
the 

09:57:06.033 --> 09:57:08.033
colors inside of normal map 
include a vector.

09:57:10.319 --> 09:57:12.319
It's a direction not a color . 

09:57:14.597 --> 09:57:16.508
Next one is ambient inclusion.  
Here we have bricks textured 

09:57:16.509 --> 09:57:19.773
properly.  They have a 
roughness.  They have metallic. 

09:57:19.774 --> 09:57:21.774
They have normal map.

09:57:24.052 --> 09:57:26.052
But we're like what we like 
macro scale shadowing formation.

09:57:26.526 --> 09:57:28.792
Because a brick has a depth.  So
it will create shadows on 

09:57:28.793 --> 09:57:30.793
itself.

09:57:31.870 --> 09:57:33.870
The surface should be casting 
shadows on itself.

09:57:35.588 --> 09:57:38.045
Because we don't have access to 
the triangles we create a black 

09:57:38.046 --> 09:57:43.142
and white texture that shows us 
where the shadows should be.  

09:57:43.143 --> 09:57:44.771
Again that's called ambient 
inclusion.  Let's see the before

09:57:44.772 --> 09:57:49.285
and after.  That's after.  
Before.  After.  So adds a lot 

09:57:49.286 --> 09:57:51.751
of detail and depth to your 
object. 

09:57:56.891 --> 09:57:59.748
Ambient acollusion map is a gray
scale texture.  The value is 0 

09:57:59.749 --> 09:58:04.059
in the dark.  255 there's no 
shadowing.  It doesn't affect 

09:58:04.060 --> 09:58:09.204
all the lighting.  I'm not going
to go into too much detail.  Any

09:58:09.205 --> 09:58:11.205
time you create an object that 
has 

09:58:12.886 --> 09:58:14.886
cracks or crevices you should be
using 

09:58:16.555 --> 09:58:19.656
an ambient OE collusion map. 
We have the metallic, base 

09:58:19.657 --> 09:58:25.370
color, roughness and normal and 
ambient OE collusion.  You can 

09:58:25.371 --> 09:58:27.025
create an object where 
everything varies from pixel to 

09:58:27.026 --> 09:58:29.026
pixel.

09:58:30.316 --> 09:58:32.346
Here we have a metal ball but 
for some reason of the tiles are

09:58:32.347 --> 09:58:34.347
missing and the reflections are 
gone.

09:58:37.860 --> 09:58:39.072
The three textures you can 
create impressive variations 

09:58:39.073 --> 09:58:41.073
from pixel to pixel and create 
most of the world 

09:58:43.965 --> 09:58:45.965
materials in a photo realistic 
manner. 

09:58:46.635 --> 09:58:48.635
One thing you can do to 
materials 

09:58:50.554 --> 09:58:51.158
especially use the GLTF that I'm
sure going to talk about 

09:58:51.159 --> 09:58:54.041
tomorrow.  You can pack the 
channels into a single texture.

09:58:59.982 --> 09:59:02.240
Ambient OE collusion, roughness 
and metalic roughness can each 

09:59:02.241 --> 09:59:04.241
fit in one of the channels.

09:59:06.160 --> 09:59:08.160
You can do this easily in any 
good 

09:59:10.066 --> 09:59:13.303
photo editor.  And you can have 
only one texture instead of 

09:59:13.304 --> 09:59:15.317
three and it's going to speed up
the load time and the rendering 

09:59:15.318 --> 09:59:18.133
as well.  
Now I want to talk about 

09:59:18.134 --> 09:59:20.134
performance studio.

09:59:21.673 --> 09:59:23.673
One of the features we have is 
called dynamic resolution.

09:59:25.982 --> 09:59:27.982
We always watch the time spent 
on the GPU to render every PRAM.

09:59:29.246 --> 09:59:31.246
Instead of dropping frames when 

09:59:34.805 --> 09:59:37.518
there's too much 20 render we 
scientist we smooth the 

09:59:37.519 --> 09:59:39.519
resolution both on the 

09:59:42.642 --> 09:59:44.479
vertical and Hoar distantal 
axis.  What this means for you 

09:59:44.480 --> 09:59:49.432
if you are building an AR scene 
if you make it too complicated 

09:59:49.433 --> 09:59:51.294
and have too many ONTs and 
materials too complex we're not 

09:59:51.295 --> 09:59:54.357
going to drop frames.  We're 
always going to favor 

09:59:54.575 --> 09:59:57.932
performance.  But we're going to
lower the resolution of your 

09:59:57.933 --> 10:00:02.264
scene.  It works really well on 
our phones because we have 

10:00:02.265 --> 10:00:04.282
really high density displays.  
So it's really hard to tell when

10:00:04.283 --> 10:00:08.377
this is going on.  I'm sure most
of you won't even notices you 

10:00:08.378 --> 10:00:12.464
are using the App.  Basically it
boils down to do you want to see

10:00:12.465 --> 10:00:16.082
a complex scene at lower 
resolution?  Or want to see a 

10:00:16.083 --> 10:00:17.520
simple scene at a higher 
resolution?  The maximum 

10:00:17.521 --> 10:00:19.521
resolution we currently use is 
10.

10:00:22.611 --> 10:00:24.079
Even on devices like the pixel 
2XL we're not going to use the 

10:00:24.080 --> 10:00:28.597
full resolution because there's 
way too many pixels to be able 

10:00:28.598 --> 10:00:30.598
to drag physically based 
rendering.  

10:00:31.054 --> 10:00:32.504
&gt;&gt; LUCY ABRAMYAN:  I want to 
call out that the renderer does 

10:00:32.505 --> 10:00:35.227
this automatically.
&gt;&gt; Yes you don't have to worry 

10:00:35.228 --> 10:00:37.228
about it. 

10:00:39.534 --> 10:00:40.958
When you create your objects it 
can be really tempting 

10:00:40.959 --> 10:00:42.959
especially for the 

10:00:44.271 --> 10:00:46.744
artists to create -- to add a 
lot of triangles to create 

10:00:46.745 --> 10:00:48.805
really smooth surfaces.  But 
we're running all of this on 

10:00:51.046 --> 10:00:52.929
mobile phone so you should be 
careful with the complexity of 

10:00:52.930 --> 10:00:55.606
the objects.  To give you a 
rough idea what we call a hero 

10:00:55.607 --> 10:01:00.515
object.  An object you can get 
really close to should have at 

10:01:00.516 --> 10:01:03.165
most 10 thousand triangles.  
Even that, if you can avoid 

10:01:03.166 --> 10:01:06.828
using that many triangles it 
would be great.  If you use 10 

10:01:06.829 --> 10:01:11.334
thousand in one object make sure
there's only one of them and not

10:01:11.335 --> 10:01:15.488
one hundred of them otherwise 
performance is going to suffer. 

10:01:15.489 --> 10:01:17.745
This is with our partners this 
is one of the current issues 

10:01:17.746 --> 10:01:21.825
that we've seen.  Really tell 
your artists to simplify the 

10:01:21.826 --> 10:01:24.280
models a much as possible. 
Every time we have a triangle 

10:01:24.281 --> 10:01:26.281
that's 

10:01:27.790 --> 10:01:28.609
smaller than the pixel, the GPU 
is going to do way too much 

10:01:28.610 --> 10:01:32.307
work.  I am not going to go into
details here because you 

10:01:32.308 --> 10:01:35.203
probably don't care but 
basically we might end up doing 

10:01:35.204 --> 10:01:37.854
the work four times and we don't
want to do that. 

10:01:39.500 --> 10:01:42.166
The complexity of the scene.  
Thankfully in AR you are 

10:01:42.167 --> 10:01:45.866
probably not going to add a lot 
of objects.  But if you ever 

10:01:45.867 --> 10:01:49.180
create a scene for instance 
where you have a model of a city

10:01:49.181 --> 10:01:51.181
you might be tempted to put a 
lot of objects in that city.

10:01:53.704 --> 10:01:56.357
Every building or every car or 
every pedestrian.  What we 

10:01:56.358 --> 10:01:58.358
recommend is at most you 

10:02:00.277 --> 10:02:01.746
should have maybe one hundred 
objects visible at a time on the

10:02:01.747 --> 10:02:06.091
screen.  The reason is because 
we're going to run -- the CPU is

10:02:06.092 --> 10:02:08.179
going to become a bottle neck.  
It's not something that dynamic 

10:02:08.809 --> 10:02:10.851
resolution can help with.  We 
avoid rendering anything that's 

10:02:10.852 --> 10:02:14.558
not on the screen.  We have a 
lot of (?).

10:02:18.636 --> 10:02:20.636
But if we have too many objects 
on the 

10:02:22.122 --> 10:02:25.769
screen will be bound by CPU and 
you will start dropping frames. 

10:02:25.770 --> 10:02:28.479
I mentioned the format called 
GLTF .

10:02:31.801 --> 10:02:34.281
It is a standard driven by crone
OES.  It is the committee behind

10:02:34.282 --> 10:02:36.733
open (?) And Vulkan.

10:02:41.066 --> 10:02:43.066
A lot of support GLTF websites.

10:02:44.987 --> 10:02:47.442
One of the reasons why I like 
GLTF is because in the standard,

10:02:47.443 --> 10:02:52.007
the pack, the OE collusion, the 
metallic and roughness inside a 

10:02:52.008 --> 10:02:53.635
single testing tour which is 
something you should be doing 

10:02:53.636 --> 10:02:55.636
for performance reasons.

10:02:58.542 --> 10:03:00.542
If you can ask your artist to 
give you 

10:03:02.632 --> 10:03:03.650
GLTF models it is going to make 
better for your models to 

10:03:03.651 --> 10:03:06.117
REPDZer. 
One thing we didn't show you 

10:03:06.118 --> 10:03:10.492
what to do is you can art in 
your scene and add many, many, 

10:03:10.493 --> 10:03:12.737
many lights.  This is an example
of a demo of our 

10:03:15.834 --> 10:03:17.834
rendering engine running on my 
pixel.

10:03:20.813 --> 10:03:22.813
I think we had 128 lights.

10:03:25.950 --> 10:03:27.950
You can have many of them and 
run at 60 frames per second.

10:03:30.031 --> 10:03:32.725
If you add many lights make sure
#245I don't overlap.  Because if

10:03:32.726 --> 10:03:35.158
you have two lights on the same 
pixel we have to do the work 

10:03:35.159 --> 10:03:37.404
twice.  So, if you have 1 
hundred lights on 

10:03:40.499 --> 10:03:43.364
one pixel we're basically 
rendering 100 frames.  Use a lot

10:03:43.365 --> 10:03:46.030
of lights, make sure they don't 
overlap.  You can give us a 

10:03:46.031 --> 10:03:48.897
maximum sphere of influence for 
each light. 

10:03:53.552 --> 10:03:56.693
Finally, if you use the view (?
).  You can put them in the 

10:03:56.694 --> 10:03:58.694
scene.  Super useful.

10:04:00.610 --> 10:04:02.240
But every view is REBDZered in 
software and for every view we 

10:04:02.241 --> 10:04:05.515
have to allocate what's called a
surface texture.  This is going 

10:04:05.516 --> 10:04:10.217
to cost memory.  It's going to 
cost CPU time.  And it's going 

10:04:10.218 --> 10:04:12.499
to cost GPU time.  So try to 
reuse the views as much as 

10:04:12.699 --> 10:04:17.281
possible.  Don't try to put too 
many on the screen and don't try

10:04:17.282 --> 10:04:19.282
to allocate too many at the same
time. 

10:04:19.736 --> 10:04:22.202
Finally all the usual advice 
that we give you for performance

10:04:22.203 --> 10:04:26.898
inside Android application 
applies to AR obviously.  So 

10:04:26.899 --> 10:04:28.899
don't allocate in the render 
loop.  Don't do too much work.

10:04:31.386 --> 10:04:33.386
Be mindful of the size of your 
IPK. 

10:04:34.302 --> 10:04:36.302
With that we're out of time.

10:04:38.450 --> 10:04:40.692
There's a talk tomorrow morning 
bill, iterate and launch AR 

10:04:40.693 --> 10:04:42.693
Apps.

10:04:44.780 --> 10:04:47.023
There was another one designing 
AR applications today.  We have 

10:04:47.024 --> 10:04:51.948
office hours.  There's a code 
lab available online.  And 

10:04:51.949 --> 10:04:56.247
that's it.  If you have 
questions you can find us after 

10:04:56.248 --> 10:04:57.689
this talk or tomorrow we'll be 
around to answer all of your 

10:04:57.690 --> 10:04:59.690
questions.  
(Applause).

10:05:50.713 --> 10:05:52.713
Connection test.

10:06:06.177 --> 10:06:08.177
Connection test.

10:06:21.459 --> 10:06:23.459
Lawyer

10:06:31.523 --> 10:06:33.523
Kaz Sato.

10:06:44.862 --> 10:06:47.741
Realtime captioning on this 
screen.

10:19:04.874 --> 10:19:07.872
Aye

10:19:21.716 --> 10:19:23.716
I

10:20:20.471 --> 10:20:22.471
Grooveen naught

10:20:35.771 --> 10:20:37.771
nauts

10:20:42.621 --> 10:20:44.621
Me gelen.  Magellan.

10:20:47.912 --> 10:20:49.912
Ma gelan

10:21:43.479 --> 10:21:45.479
screen.

10:25:10.883 --> 10:25:11.893
&gt;&gt;  Hi everybody welcome to this
session.  The last one of the 

10:25:11.894 --> 10:25:14.610
day.  Everybody having a good 
I/O so far?  

10:25:15.016 --> 10:25:21.007
(Cheering).  Nice.  Excited for 
the concert tonight?  Yeah.  So 

10:25:21.008 --> 10:25:23.008
thanks for spending some time 
with us beforehand.  I'm 

10:25:23.269 --> 10:25:25.269
&gt;&gt; LAURENCE MORONEY:  
&gt;&gt; KAZ SATO:  I'm Kaz. 

10:25:26.777 --> 10:25:28.777
&gt;&gt; LAURENCE MORONEY:  We're here
to talk 

10:25:30.035 --> 10:25:33.325
about machine learning plus loT 
equals a smarter world.  That's 

10:25:33.326 --> 10:25:36.617
a riff on a famous Computer 
Science book.  Anybody know what

10:25:36.618 --> 10:25:38.618
that ising a go 

10:25:39.890 --> 10:25:42.134
rhythms plus data structures 
equals programs.  We wanted to 

10:25:42.135 --> 10:25:45.444
do a little bit of a riff on 
that.  It's also really about 

10:25:45.445 --> 10:25:49.054
what's going on in the world 
today that there's two major 

10:25:49.055 --> 10:25:51.055
friends going on.

10:25:53.066 --> 10:25:55.066
One is the rapid rise of loT.

10:25:56.136 --> 10:25:57.384
Number two is the rapid rise of 
AI and machine learning.  

10:25:57.385 --> 10:25:59.830
They're intersecting with each 
other to create some really cool

10:25:59.831 --> 10:26:03.541
new scenarios.  So we warranted 
to talk through a few of these 

10:26:03.542 --> 10:26:05.595
scenarios.  The first one we'll 
give is let's take 

10:26:09.711 --> 10:26:11.762
a look at really cheap loT 
sensors that will do something 

10:26:11.763 --> 10:26:13.763
like in this case we're going to
take a look at those that 

10:26:15.256 --> 10:26:18.136
measure air quality and how they
can push data to the clouds and 

10:26:18.137 --> 10:26:20.646
how we can use that for machine 
learning. 

10:26:23.117 --> 10:26:25.788
&gt;&gt; KAZ SATO: Nd how the cloud 
can be empowering for loT and AI

10:26:25.789 --> 10:26:27.789
with products that help you 
collecting data and 

10:26:31.033 --> 10:26:33.018
analyzing it and learninging. 
&gt;&gt; LAURENCE MORONEY:  The third 

10:26:33.019 --> 10:26:35.019
will be 

10:26:37.172 --> 10:26:40.044
as many of our devices are like 
Raspberry Pis and handheld 

10:26:40.045 --> 10:26:42.045
devices what 

10:26:44.164 --> 10:26:45.781
can we do with device inference.
So we'll look at cool stuff 

10:26:45.782 --> 10:26:50.302
happening there. 
First some numbers.  According 

10:26:50.303 --> 10:26:52.303
to IHS research there are 

10:26:54.182 --> 10:26:55.627
expected to be 31 billion 
connected loT devices by the end

10:26:55.628 --> 10:26:57.684
of this year.  That's a lot of 
devices.

10:27:00.822 --> 10:27:03.283
And those devices combined we 
found the same research is 

10:27:03.284 --> 10:27:05.284
showing 27.

10:27:06.587 --> 10:27:08.275
6 percent compound annual growth
rate of the data that they are 

10:27:08.276 --> 10:27:11.939
pushing to the cloud.  So 31 
billion by the end of this year.

10:27:13.566 --> 10:27:16.234
And every year the amount of 
data they're pushing is growing 

10:27:16.235 --> 10:27:20.736
by 27.6 percent.  That's a lot 
of data.  What are we going to 

10:27:20.737 --> 10:27:25.253
do with that data?  There's the 
usual things.  Filtering, 

10:27:25.254 --> 10:27:27.707
sorting, querying, all that 
stuff.  We can also use that to 

10:27:27.708 --> 10:27:30.588
start training models.  All of 
that data and all those models 

10:27:32.001 --> 10:27:34.652
can then be used to generate 
intelligence and to help us to 

10:27:34.653 --> 10:27:38.168
start making intelligent 
decisions based on the data 

10:27:38.169 --> 10:27:41.245
that's being generated by our 
devices.  

10:27:43.080 --> 10:27:45.362
The first scenario was thinking 
about simple sensors that give 

10:27:45.363 --> 10:27:47.363
us smart solutions.

10:27:49.546 --> 10:27:51.579
I just wanted something with 
four S's on it.  Easier to 

10:27:51.580 --> 10:27:55.680
remember that way.  An example 
of this is like these little 

10:27:55.681 --> 10:27:57.945
devices and if you have ever 
done any kind of hardware 

10:27:57.946 --> 10:27:59.975
hacking and this is like a 
device the one on the left is 

10:28:04.430 --> 10:28:06.430
called an EPP866.

10:28:09.430 --> 10:28:13.546
It has input output bin minutes 
and a WiFi circuit on it.  When 

10:28:13.547 --> 10:28:15.404
you combine it with the one on 
the right that's an air quality 

10:28:15.405 --> 10:28:19.332
and gas sensor, now you can 
start putting together something

10:28:19.333 --> 10:28:21.589
quickly and cheaply that will 
push data to the cloud. 

10:28:22.816 --> 10:28:24.816
An interesting story.  Kaz and I
had prepared this talk and 

10:28:27.710 --> 10:28:28.912
we rehearsing it last week with 
the Vice President of our 

10:28:28.913 --> 10:28:30.913
division.

10:28:31.986 --> 10:28:33.630
One of the feedback was you 
don't have any small simple 

10:28:33.631 --> 10:28:38.206
sensors on there.  You are doing
lots of cloud stuff and mobile 

10:28:38.207 --> 10:28:40.062
stuff but you don't have any loT
sensors so you should build one 

10:28:40.063 --> 10:28:44.602
and put it in there.  This was 
like last Wednesday.  The 

10:28:44.603 --> 10:28:46.603
environment that we live in now 
is 

10:28:49.185 --> 10:28:52.059
so cool that we're able thanks 
to ARD winnow and the maker 

10:28:52.060 --> 10:28:55.712
community to be able to build a 
demo in a couple days.  And the 

10:28:55.713 --> 10:28:57.560
longest part of this -- can 
anybody guess what the longest 

10:28:57.561 --> 10:28:59.561
time in 

10:29:01.167 --> 10:29:04.119
building the demo was?  It 
wasn't testing it was waiting 

10:29:04.120 --> 10:29:06.120
for the parts to be shipped from
Amazon.  (Laughter).

10:29:09.057 --> 10:29:11.097
I'm an Amazon prescriber and it 
took two days and only took 

10:29:11.098 --> 10:29:13.778
three days to builds the whole 
thing.  It is an amazing time to

10:29:13.779 --> 10:29:18.924
be alive I think.  The amount of
things that you can do, the 

10:29:18.925 --> 10:29:20.612
amount of creativity and the 
kind of things that you can 

10:29:20.613 --> 10:29:23.059
build -- I find it so cool.  I'm
really happy to be alive right 

10:29:23.060 --> 10:29:25.926
now. 
Let's look at like an example of

10:29:25.927 --> 10:29:28.438
how you would use one of these. 
Consider a building like this 

10:29:28.439 --> 10:29:31.942
one.  And say in a building like
this we could put sensors like 

10:29:31.943 --> 10:29:35.415
this for air quality around the 
building.  And when they're 

10:29:35.416 --> 10:29:38.517
round the building then we can 
start tracking the air quality 

10:29:38.518 --> 10:29:40.561
in that building.  But, you 
know, that's just an instant 

10:29:40.562 --> 10:29:43.806
status.  We can tell the stuff 
here on the south side of the 

10:29:43.807 --> 10:29:47.331
building, the air quality isn't 
great.  And then on the north 

10:29:47.332 --> 10:29:50.418
side of the building the air 
quality is very nice.  What 

10:29:50.419 --> 10:29:52.419
would usually happen if you work

10:29:53.533 --> 10:29:55.533
in an office like this?  PREEP 
OL the south side are going to 

10:29:58.090 --> 10:29:59.103
adjust the THER mow stat the 
fans will kick in and people on 

10:29:59.104 --> 10:30:01.104
the north side will be too cold.

10:30:03.959 --> 10:30:05.987
Wouldn't it be great if we could
intelligently adapt the 

10:30:05.988 --> 10:30:10.061
building.  Or what if there was 
a disaster and with our sensors 

10:30:10.062 --> 10:30:14.578
are going to show the carbon 
monoxide leak.  The leak is 

10:30:14.579 --> 10:30:17.248
primarily centered around the 
exit.  If people are being 

10:30:17.249 --> 10:30:22.386
driven towards the exit they 
might be driven towards danger. 

10:30:22.387 --> 10:30:24.613
When we've got cheap sensors we 
can say we can have an 

10:30:24.614 --> 10:30:26.614
alternative exit. 

10:30:28.559 --> 10:30:31.025
What if we go even further and 
think about scenarios where 

10:30:31.026 --> 10:30:33.066
machine learning becomes 
involved and we can start 

10:30:33.461 --> 10:30:38.381
predicting things.  Maybe we can
predict the best times of the 

10:30:38.382 --> 10:30:41.077
day to keep the fans on to 
maximize air quality and reduce 

10:30:41.078 --> 10:30:43.884
our energy footprints.  Good for
the environment.  Or maybe if 

10:30:43.885 --> 10:30:45.972
there's a gas leak or something 
like that we could predict the 

10:30:48.623 --> 10:30:51.322
path of the gas leak based on 
testing and based on machine 

10:30:51.323 --> 10:30:54.572
learned models.  So emergency 
responders would know where it's

10:30:54.573 --> 10:30:57.217
safe to go and where it's 
dangerous to go.  We all love 

10:30:57.218 --> 10:30:59.229
our emergency responders and 
want to make sure they're safe. 

10:30:59.230 --> 10:31:04.131
Or maybe we could look at what 
the impact by modeling what 

10:31:04.132 --> 10:31:06.998
would be like rearranging our 
office.  What if we have more 

10:31:06.999 --> 10:31:08.999
people sitting in the north and 
less in the south or what 

10:31:10.969 --> 10:31:13.012
happens if we host a big event 
and this building is actually 

10:31:13.013 --> 10:31:16.711
one of the offices in Google 
Seattle.  Up on the top 

10:31:16.712 --> 10:31:19.794
left-hand side there that room 
called center of the universe is

10:31:19.795 --> 10:31:21.795
where we host a lot of events.  
And it would be good for us to 

10:31:23.313 --> 10:31:25.313
understand the air quality when 
we do so. 

10:31:27.470 --> 10:31:30.171
So if you've got a lot of 
devices like this there's a 

10:31:30.172 --> 10:31:32.605
product called cloud loT core.  
The idea is it's fully managed 

10:31:32.606 --> 10:31:37.095
and allows you to easily secure,
connect, manage and ingest data 

10:31:37.096 --> 10:31:39.096
from all of your devices.  Then 
once you have that then you can 

10:31:41.220 --> 10:31:43.220
start doing interesting things 
like 

10:31:45.742 --> 10:31:48.199
pulling the data out using 
query, using cloud ML, and cloud

10:31:48.200 --> 10:31:50.713
data lab and studio to build 
models then run inference on 

10:31:53.581 --> 10:31:55.581
these models and have analytics 
behind that. 

10:31:57.488 --> 10:31:59.333
Let me give a dem owe of 
environmental monitoring and 

10:31:59.334 --> 10:32:01.414
what would it look like. 
This is a device I was talking 

10:32:01.415 --> 10:32:06.161
about.  This is a simple ARD 
winnow device.  I'm not using 

10:32:06.162 --> 10:32:08.162
the WiFi in this case I'm just 
using a wired one.

10:32:10.894 --> 10:32:13.389
So I have a shield on top of the
ARD weano with a wired internet.

10:32:15.242 --> 10:32:18.709
Then this little device is the 
air quality sensor.  And so it's

10:32:18.710 --> 10:32:22.808
like right now it's measuring 
the air quality in the room.  

10:32:22.809 --> 10:32:24.809
It's measuring for particulates.

10:32:26.685 --> 10:32:28.685
It's measuring for gases, carbon
dioxide, all that kind of thing.

10:32:30.567 --> 10:32:31.996
So we kind of want to trigger it
by polluting the air a little 

10:32:31.997 --> 10:32:36.502
bit.  Any ideas how we can do 
that?  I'll just breathe on it 

10:32:36.503 --> 10:32:41.241
because we all breathe out 
carbon dioxide right.  So I'm 

10:32:41.242 --> 10:32:43.242
going to breathe on it.  I've 
always wanted to do that in a 

10:32:43.294 --> 10:32:47.600
session.  If we switch to my 
laptop.  On so my laptop we can 

10:32:47.601 --> 10:32:49.601
now see I have 

10:32:50.667 --> 10:32:51.696
a fire base running here and I'm
using fire base cloud fire 

10:32:51.697 --> 10:32:56.236
store.  On cloud fire store I'm 
detecting and getting the 

10:32:56.237 --> 10:32:58.900
readings from this little 
device.  So we can see the 

10:32:58.901 --> 10:33:01.585
readings up here once they come 
up.  Look here at the reading.  

10:33:01.586 --> 10:33:05.954
Like 57.  That was a moment ago 
when I breathed on it.  54.  

10:33:05.955 --> 10:33:10.485
I've gotten it up to seventy.  I
must have eaten something bad.  

10:33:10.486 --> 10:33:12.325
The usual background is 42.  
What's going on here?  How is 

10:33:12.326 --> 10:33:14.326
this being done?

10:33:16.443 --> 10:33:19.102
With ARD weano it's super simple
to write code in C.  Can we 

10:33:19.103 --> 10:33:21.541
switch back to the slides?  It 
will be easier to see the code. 

10:33:21.542 --> 10:33:25.244
So if I go back to the slides 
this is the kind of code you 

10:33:25.245 --> 10:33:27.245
would have written in C on an 
ARD weano.

10:33:30.452 --> 10:33:32.914
All I'm doing is reading pin 
zero.  This is plugged in to 

10:33:32.915 --> 10:33:35.998
data pin zero.  I'm reading that
and every two seconds I'm 

10:33:35.999 --> 10:33:38.077
reading it again.  And then what
I am doing with that is 

10:33:41.670 --> 10:33:43.704
I'm posting that so URL and then
that URL is writing it to fire 

10:33:43.705 --> 10:33:48.022
base for me.  It's really that 
simple to build a sensor to 

10:33:48.023 --> 10:33:50.598
start monitoring air quality.  
Very, very cheap.  Very, very 

10:33:50.599 --> 10:33:55.368
simple.  Then when you aggregate
the data from all the sensors 

10:33:55.369 --> 10:33:56.985
together, if you've got 
thousands in the cloud, you can 

10:33:56.986 --> 10:34:00.054
start building some really 
intelligent solutions.  But 

10:34:00.055 --> 10:34:03.157
there's something to take into 
account when doing loT.  That's 

10:34:03.158 --> 10:34:05.808
think in terms of security.  
So data security is very, very 

10:34:05.809 --> 10:34:09.955
important.  Obviously these 
things are just generating data 

10:34:09.956 --> 10:34:12.810
and pushing it up to my 
database.  But a smart hacker 

10:34:12.811 --> 10:34:17.105
might be able to figure out how 
I am doing that.  So you got to 

10:34:17.106 --> 10:34:19.375
think in terms of data security.
A pattern that I like to follow 

10:34:19.376 --> 10:34:23.692
for this and for good reason too
is instead of pushing from the 

10:34:23.693 --> 10:34:25.734
devices directly up to our 
databases have something within 

10:34:27.620 --> 10:34:29.671
your fire wall that they are 
pushing to and let that act as a

10:34:29.672 --> 10:34:33.999
proxy and then that proxy will 
proxy out to your databases for 

10:34:34.000 --> 10:34:36.284
if you them then you will have a
secure connection between that 

10:34:38.313 --> 10:34:39.738
proxy and the databases then 
hopefully that secure connection

10:34:39.739 --> 10:34:41.805
will be enough.  The reason for 
that is also to do it 

10:34:44.877 --> 10:34:46.708
as an internal thing was that 
the power limitations on these 

10:34:46.709 --> 10:34:48.962
things mean that a lot of these 
will only support HTTP.

10:34:53.861 --> 10:34:55.861
They won't support HTPS.

10:34:57.399 --> 10:34:59.399
That's why in my code you would 
have 

10:35:00.475 --> 10:35:02.720
seen I was just making a client.
server comment 80 in this case.

10:35:05.801 --> 10:35:08.512
Because it's just an open HTTP 
connection.  That was to my 

10:35:08.513 --> 10:35:11.397
internal proxy. 
Things to consider, you know, 

10:35:11.398 --> 10:35:13.639
very cheap and easy to build 
systems like this one.

10:35:16.906 --> 10:35:18.906
Coding with something like ARD 
weano and C is super simple.

10:35:22.070 --> 10:35:25.116
There's tons of APIs and tons of
examples.  You can just adapt 

10:35:25.117 --> 10:35:27.117
and that's what I did.

10:35:29.661 --> 10:35:31.124
I had never touched an ARD weano
and I'm not particularly smart 

10:35:31.125 --> 10:35:36.106
and it took just a couple hours 
to figure out how to hack the 

10:35:36.107 --> 10:35:38.107
code they had provided to be 
able to build this. 

10:35:38.597 --> 10:35:40.678
That's on a small simple sensor.
Now let's look at WHANs when you

10:35:40.679 --> 10:35:42.679
go cloud scale. 

10:35:44.791 --> 10:35:47.236
&gt;&gt; KAZ SATO:  That was very 
simple scenario.  Let's take a 

10:35:47.237 --> 10:35:50.096
look at another scenario when he
we're have a little bit smarter 

10:35:53.344 --> 10:35:58.362
devices such as (?) What kind of
object do you have in the image.

10:36:00.617 --> 10:36:02.617
Sensor flow provides an API to 
do that.

10:36:04.090 --> 10:36:07.001
That is object detection API.  
By using object detection API 

10:36:07.002 --> 10:36:11.696
you can have delay builds of 
each object in the image.  Or 

10:36:11.697 --> 10:36:14.743
you can have the boxes and the 
squirrels.  And it's really 

10:36:14.744 --> 10:36:16.744
simple to use the API.

10:36:19.786 --> 10:36:21.786
Example you can just download 
the

10:36:26.006 --> 10:36:27.621
file then you can pass your 
images to the dictionary.  And 

10:36:27.622 --> 10:36:32.527
that's it.  So you get the 
output dictionary that would 

10:36:32.528 --> 10:36:34.397
have the detection results such 
as the number of the object you 

10:36:34.398 --> 10:36:40.353
have or classes objects or the 
boxes and the scores.  It's so 

10:36:40.354 --> 10:36:42.354
sim.  

10:36:44.476 --> 10:36:46.119
For example you could have a 
camera attached to a shopping 

10:36:46.120 --> 10:36:48.605
CART so that you can take a 
picture of the inside of the 

10:36:51.887 --> 10:36:53.887
shopping CART and apply the 
object 

10:36:55.148 --> 10:36:57.001
detection API to detect what 
kind of items you are having or 

10:36:57.002 --> 10:36:59.002
how many of them you have in the
CART.

10:37:02.560 --> 10:37:04.605
And we can use the cloud loT 
core combined with cloud and 

10:37:04.606 --> 10:37:08.916
mission learning engine to build
a system that provides the 

10:37:08.917 --> 10:37:10.917
production level, scalability 
and availability. 

10:37:15.145 --> 10:37:17.145
For example, you want to build a
system 

10:37:19.048 --> 10:37:21.048
for the shopping CART you can 
have (?

10:37:25.575 --> 10:37:27.605
) Use it the loT core to collect
all the data and store the data.

10:37:30.647 --> 10:37:32.647
And we can use the Kubernetes 
engine 

10:37:33.929 --> 10:37:35.557
as an orchestrater or 
orchestrating everything 

10:37:35.558 --> 10:37:37.558
happening at the cloud site.

10:37:39.489 --> 10:37:41.489
Finally the GKE will be sending 
the 

10:37:42.786 --> 10:37:44.211
data to where we are arriving 
the prediction with the API. 

10:37:48.486 --> 10:37:50.486
Let's look at the demonstration

10:37:54.287 --> 10:37:56.534
.  I'd like to use the webcam to
show how we.  So this is how it 

10:37:56.535 --> 10:37:59.411
looks.  It's a very small CART. 
Miniature CART.

10:38:04.726 --> 10:38:06.726
We have Raspberry Pi and the 
camera.

10:38:10.456 --> 10:38:12.955
If you put something like this 
is a fake eggplant.

10:38:18.406 --> 10:38:20.406
I bought it in Japanese store

10:38:23.595 --> 10:38:26.323
.  Or a tomato.  Then how it 
would look like.

10:38:31.474 --> 10:38:33.517
Please switch to your -- let's 
wait awhile.  

10:38:34.726 --> 10:38:37.613
&gt;&gt; LAURENCE MORONEY:  Do I need 
to refresh?  

10:38:41.339 --> 10:38:43.617
&gt;&gt; KAZ SATO:  Is it working?  
Maybe network issue?  There we 

10:38:43.618 --> 10:38:45.618
go.

10:38:49.151 --> 10:38:54.327
.  (Applause).  Thank you FOM so
easy to detect the object and 

10:38:54.328 --> 10:38:56.328
how many of you have in the 
shopping CART.

10:38:59.070 --> 10:39:01.541
So please go back to the slide .
So that was a very simple 

10:39:01.542 --> 10:39:03.542
scenario where 

10:39:04.838 --> 10:39:07.787
we just counted the items and 
classified them.  But you may 

10:39:07.788 --> 10:39:09.422
think what's the point of using 
cloud for this kind of 

10:39:09.423 --> 10:39:11.423
detection?  And actually that is
true.

10:39:14.361 --> 10:39:18.678
You can run the object detection
API just inside the Tensorflow. 

10:39:18.679 --> 10:39:21.123
And you don't have to use the 
cloud.  But if you can collect 

10:39:21.124 --> 10:39:23.124
all the data at 

10:39:24.601 --> 10:39:26.652
the cloud site with thousands of
daily clouds then you can 

10:39:26.653 --> 10:39:30.148
extract some collect identified 
intelligence (?).

10:39:33.435 --> 10:39:37.566
For example, you can (?) A model
with all the shopping items you 

10:39:37.567 --> 10:39:39.567
are adding to the CART.  
Thousands of them.

10:39:42.692 --> 10:39:45.152
You can predict what will be the
next item you will be putting in

10:39:45.153 --> 10:39:48.246
to your shopping CART.  That 
will be predicting the location 

10:39:49.911 --> 10:39:51.911
proximity starting from the 
vegetables 

10:39:53.426 --> 10:39:55.513
and the fruit and meat, like 
chicken, and spices and pasta.

10:39:58.577 --> 10:40:00.577
Based on all the past history of
the shoppers.  

10:40:02.266 --> 10:40:04.266
And you can also have a small 
display 

10:40:05.955 --> 10:40:09.042
with it showing recipe with the 
next item to add.  That will be 

10:40:09.043 --> 10:40:12.517
working as a navigate over for 
the shoppers.  Let's call it a 

10:40:12.518 --> 10:40:16.245
smart shopping navigator. 
And what kind of model should we

10:40:16.246 --> 10:40:18.711
design for implementing the 
navigator?

10:40:22.447 --> 10:40:23.924
At first we have to represent 
what kind of items you have in 

10:40:23.925 --> 10:40:28.853
the CART.  So, if you have the 
tomato in the CART we may have 

10:40:28.854 --> 10:40:30.854
one hot vector.

10:40:34.425 --> 10:40:37.730
In this case you would have a 
zero as a value in the vector.  

10:40:37.731 --> 10:40:39.731
If you put eggplant in the CART 
you 

10:40:40.924 --> 10:40:42.924
would have

10:40:45.507 --> 10:40:48.594
another vector.  Then another 1.
0 for chicken.

10:40:51.676 --> 10:40:52.701
So this multiple vectors 
represents the CART item 

10:40:52.702 --> 10:40:54.702
history.

10:40:55.964 --> 10:40:57.964
So you would have a dictionary 
for 

10:41:00.310 --> 10:41:02.310
shopping items and you can call 
one hot 

10:41:04.446 --> 10:41:06.284
function to all the shopping 
items of the vector.  And the 

10:41:06.285 --> 10:41:08.955
multiple vectors represents the 
hot item history.  Now we have 

10:41:08.956 --> 10:41:12.303
the history.  How do you detect 
changes in the history?

10:41:15.611 --> 10:41:17.611
In this case you can use the con
VOE Lucien.

10:41:20.114 --> 10:41:22.974
Or 1D con VO Lucien.  It is 
usually used to detect the 

10:41:26.053 --> 10:41:28.053
certain products in a local 
group of the (?).

10:41:30.017 --> 10:41:31.244
For example if you have a 2D 
image you can find some shape in

10:41:31.245 --> 10:41:33.245
the image.

10:41:36.205 --> 10:41:38.875
That is how it works.  But you 
can also apply the con VOE 

10:41:41.611 --> 10:41:43.611
Lucien to one.  

10:41:47.179 --> 10:41:48.394
For example you can apply the 1D
con VOE Lucien on the CART 

10:41:48.395 --> 10:41:50.395
history.

10:41:51.681 --> 10:41:53.681
They can predict what kind of 
changes happen.

10:41:55.160 --> 10:41:57.160
Then flatten the output to the 
get the result.

10:42:01.029 --> 10:42:05.022
You can call the 1CONV1D.  

10:42:08.100 --> 10:42:10.100
Now we have the CART item change
history.

10:42:11.992 --> 10:42:13.461
And we may also want to take in 
other factors such as 

10:42:13.462 --> 10:42:16.134
seasonality.  Whether it's 
winter or summer and time of 

10:42:16.135 --> 10:42:20.448
day.  Because shoppers may want 
to choose different food items 

10:42:20.449 --> 10:42:22.735
based on the season.  Whether it
is a summer and hot day or 

10:42:23.953 --> 10:42:26.438
whether it is a cold day.  So we
put everything into a single ML 

10:42:27.451 --> 10:42:29.451
PKS.

10:42:31.134 --> 10:42:33.985
Which is a classic newer network
with three layers.  To predict 

10:42:33.986 --> 10:42:35.986
the next items to add. 

10:42:39.204 --> 10:42:41.204
With Tensorflow you can write 
everything 

10:42:42.276 --> 10:42:43.942
into one tensor and define the 
three layers of the MLP and 

10:42:43.943 --> 10:42:46.604
that's it is. 
Let's look at how the smart 

10:42:46.605 --> 10:42:48.605
shopping navigator works.

10:42:56.851 --> 10:42:58.851
If you put the eggplant then it 
should 

10:43:00.478 --> 10:43:03.417
detect the eggplant.  
&gt;&gt; LAURENCE MORONEY:  I see a 

10:43:03.418 --> 10:43:05.240
shadow. 
&gt;&gt; KAZ SATO:  So you are 

10:43:05.241 --> 10:43:07.241
watching the same screen I am 
watching here.

10:43:10.754 --> 10:43:13.629
At the right side you see what 
kind of recipes and items 

10:43:13.630 --> 10:43:17.956
recommended.  So look like the 
assistant recommends pasta 

10:43:17.957 --> 10:43:19.957
eggplant baked.

10:43:21.455 --> 10:43:23.455
And I want to make a pasta.

10:43:27.327 --> 10:43:29.327
So I would put the tomato

10:43:31.076 --> 10:43:33.076
.  Now it will show the other 
things you 

10:43:34.387 --> 10:43:36.387
have to add would be -- I 
already have 

10:43:39.552 --> 10:43:41.552
it but -- eggplant, tomato.

10:43:49.606 --> 10:43:51.606
And I want to make a pasta

10:43:54.820 --> 10:43:56.820
.  Somehow it doesn't show 
pasta.

10:44:00.141 --> 10:44:02.141
I can try putting just chicken.

10:44:03.655 --> 10:44:06.541
So you can just follow the items
on the screen so you can find 

10:44:06.542 --> 10:44:11.062
all the items to make the 
eggplant tomato pasta.  That's 

10:44:11.063 --> 10:44:13.576
how it works.  Thank you.  
Please go back to the screen.

10:44:17.046 --> 10:44:19.923
The slide.  
As you have seen on the 

10:44:19.924 --> 10:44:25.025
demonstration by showing the 
recipe ideas and next item to 

10:44:25.026 --> 10:44:28.553
add it works just like a (?) For
the shoppers.  The shoppers can 

10:44:28.554 --> 10:44:34.329
just follow the next item to add
to fill the CART with all the 

10:44:34.330 --> 10:44:36.330
items to cook with a certain 
recipe. 

10:44:36.391 --> 10:44:39.065
That was the example how the 
cloud can be empowering for the 

10:44:39.066 --> 10:44:44.169
loT devices not only for 
collecting data but also you can

10:44:44.170 --> 10:44:46.170
analyze it and learn some 
collective intelligence from it.

10:44:49.738 --> 10:44:51.738
It's not just an loT anymore.

10:44:53.207 --> 10:44:58.331
This demonstration was actually 
built by grooveen naughts.  They

10:44:58.332 --> 10:45:00.411
have open source everything on 
GitHub.  If you are interested 

10:45:00.412 --> 10:45:02.691
please go to GitHub and search 
with smart shopping 

10:45:06.509 --> 10:45:08.509
navigator to find out what (?).

10:45:10.089 --> 10:45:12.089
They also provide Magellan 
blocks 

10:45:13.194 --> 10:45:15.474
where you can have user 
interface to build the whole 

10:45:15.475 --> 10:45:17.475
data pipeline.

10:45:18.558 --> 10:45:20.815
Data and analyzeding it and 
running the model.  With that I 

10:45:20.816 --> 10:45:22.816
direct back the stage to lawyer 
EPS.  

10:45:23.908 --> 10:45:26.158
&gt;&gt; LAURENCE MORONEY:  Thank you 
Kaz.  Pretty cool stuff right?  

10:45:26.159 --> 10:45:31.076
(Applause) . 
Now the third scenario we wanted

10:45:31.077 --> 10:45:35.619
to look at was on device 
inference and training.  Like 

10:45:35.620 --> 10:45:37.620
there's a few different types of
devices you can do inference and

10:45:37.846 --> 10:45:41.745
training on.  For example on a 
mobile phone or tablet.  You can

10:45:41.746 --> 10:45:43.746
do it on a Raspberry Pi.

10:45:45.011 --> 10:45:47.035
Or you can do it on an Android 
things device.  There's a really

10:45:47.036 --> 10:45:49.036
cool video of doing it on a 
mobile phone or tablet that I 

10:45:50.945 --> 10:45:53.209
put at this QR code.  So take a 
look at this code and watch this

10:45:53.210 --> 10:45:57.332
video.  I'm not going to show it
here but the idea behind the 

10:45:57.333 --> 10:45:59.333
video is if you went to the 
Tensorflow summit you would have

10:45:59.401 --> 10:46:01.401
seen it.

10:46:03.332 --> 10:46:05.332
But it's farmers in Tanzania who
don't 

10:46:06.449 --> 10:46:10.587
have cloud connective and rely 
on a plant called KA SAVa.  If 

10:46:10.588 --> 10:46:15.065
the plant gets diseased it can 
kill and impact an entire crop. 

10:46:15.066 --> 10:46:17.106
It's hard for humans to eyeball 
it and see it but they built a 

10:46:17.107 --> 10:46:20.556
machine learned system that they
wave their phone over the leaves

10:46:20.557 --> 10:46:22.206
and they can diagnose diseases 
early.  It's really, really 

10:46:22.207 --> 10:46:27.377
cool.  That kind of on device 
inference without cloud 

10:46:27.378 --> 10:46:30.024
connectivity is possible through
Tensorflow light.  

10:46:32.274 --> 10:46:35.969
You can also do inference and 
training on Raspberry Pi.  I 

10:46:35.970 --> 10:46:37.825
have a car that I am going to 
show in a moment that's driven 

10:46:37.826 --> 10:46:42.959
off a Raspberry Pi.  If you in 
the Sanbox area you would have 

10:46:42.960 --> 10:46:44.998
seen cars like this one 
self-driving around.  There's a 

10:46:44.999 --> 10:46:47.452
camera at the front.  What I 
would do is manually drive the 

10:46:49.909 --> 10:46:52.613
car, record what I am doing, 
then based on the telemtry I am 

10:46:52.614 --> 10:46:55.291
sending to the car to drive it 
around and the corresponding 

10:46:58.131 --> 10:46:59.379
video that's giving us the 
features and labels that we want

10:46:59.380 --> 10:47:02.865
that the car will remember and 
use that to self-drive.  Can we 

10:47:02.866 --> 10:47:04.866
switch back to slides for a 
moment. 

10:47:05.333 --> 10:47:07.583
Finally there's the third one 
which we'll see in a moment on 

10:47:07.584 --> 10:47:10.253
Android things device. 
All this is made possible 

10:47:10.254 --> 10:47:13.576
because of Tensorflow light.  
And I strongly recommend check 

10:47:13.577 --> 10:47:19.332
out Tensorflow light and the 
talks on Tensorflow light.  But 

10:47:19.333 --> 10:47:21.582
the idea behind Tensorflow light
is if you want a train a machine

10:47:21.583 --> 10:47:26.297
learned model we have a bunch of
converters that will flatten 

10:47:26.298 --> 10:47:30.423
that model and shrink it to make
it more mobile friendly.  

10:47:30.424 --> 10:47:33.232
There's an interpret ERTD core 
used to execute that model.  So 

10:47:33.233 --> 10:47:35.097
you can do inference on the 
model.  For example things like 

10:47:35.098 --> 10:47:37.120
if you want to do image 
classification it will do that 

10:47:38.995 --> 10:47:41.853
locally without round tripping 
to the cloud.  Then all the STUF

10:47:41.854 --> 10:47:43.886
that's needed like operation 
kernels and card ware 

10:47:45.145 --> 10:47:46.778
acceleration to take advantage 
of the mobile hardware that you 

10:47:46.779 --> 10:47:48.779
have.

10:47:51.697 --> 10:47:52.515
It runs on raspberry Pi, iOS 
and, of course, it runs on 

10:47:52.516 --> 10:47:57.324
Android.  It works great on 
pixel.  If you want to see a 

10:47:57.325 --> 10:47:59.325
demo I can show 

10:48:01.756 --> 10:48:04.308
realtime inference on the pixel.
Here is a video I shot of me 

10:48:04.309 --> 10:48:11.515
doing realtime inference.  It 
saw the coffee mug correctly.  

10:48:11.516 --> 10:48:13.516
Here this mug looks like a 
mixing bowl 

10:48:17.640 --> 10:48:20.289
so at some points it felt like a
mix and go.  I know that's 

10:48:20.290 --> 10:48:22.132
horrible placement for my show. 
Here it was able to recognize a 

10:48:22.133 --> 10:48:27.256
mouse.  This is what it would 
look like running on Android.  

10:48:27.257 --> 10:48:29.317
And so for the self-driving car 
that I've been talking about, 

10:48:29.318 --> 10:48:31.542
you can see on the right is the 
RAZ Perry pie.

10:48:35.046 --> 10:48:36.887
On the left is a pulse wave 
modulation controller.  That 

10:48:36.888 --> 10:48:38.888
drives the car itself.

10:48:39.946 --> 10:48:41.780
So I have Tensorflow light 
running on the Raspberry Pi and 

10:48:41.781 --> 10:48:44.011
that will actually drive the 
car.  This is built on a project

10:48:44.012 --> 10:48:48.938
called donkey car.  And if you 
want to go and take a look at 

10:48:48.939 --> 10:48:50.570
donkey car in details about 
donkey car they're at this URL. 

10:48:50.571 --> 10:48:54.658
Should we take a look at what it
would look like to train the 

10:48:54.659 --> 10:48:56.679
car?  So if we can switch to my 
laptop 

10:48:59.680 --> 10:49:02.071
please.  
So I've actually started up the 

10:49:02.907 --> 10:49:04.914
Raspberry Pi on the car.  And 
there's a little web server 

10:49:05.541 --> 10:49:07.984
running on that.  Let me go and 
see if I can access it.

10:49:12.425 --> 10:49:17.643
Hopefully it will obey.  Oh no 
it's refusing to connect.  Hang 

10:49:17.644 --> 10:49:19.644
on.  Sorry.

10:49:22.762 --> 10:49:27.475
So what I am doing is it runs on
Python so I'm just running the 

10:49:27.476 --> 10:49:32.037
Python code.  Sorry Kaz to make 
you hold it so long.  This is 

10:49:32.038 --> 10:49:34.038
booting up the web server that's
on the car that I would then use

10:49:34.497 --> 10:49:36.497
to train and drive it.  So it 
will take a moment just to boot 

10:49:36.557 --> 10:49:40.864
that up.  What will happen if I 
want to control the car when I'm

10:49:40.865 --> 10:49:43.323
training it obviously it's hard 
to do it on it so it has a web 

10:49:43.525 --> 10:49:47.864
server.  It's connected to a hot
spot on my pixel.  And my 

10:49:47.865 --> 10:49:49.541
laptop's connected to the same 
one.  So it's starting up that 

10:49:49.542 --> 10:49:53.238
server.  It looks like that 
server is done.  Yep.  Here it 

10:49:53.239 --> 10:49:58.402
is.  As Kaz moves it around you 
will see.  If I were to try and 

10:49:58.403 --> 10:50:03.142
drive the car.  I made a bit of 
a mistake if you have been to 

10:50:03.143 --> 10:50:04.798
the sandbox you would have seen 
the cars they're using are real 

10:50:04.799 --> 10:50:06.799
small.

10:50:08.504 --> 10:50:10.504
I didn't read the specs properly
and I bought this one.

10:50:12.436 --> 10:50:14.505
I don't dare put it on the floor
because it will take off and 

10:50:14.506 --> 10:50:16.950
land three rows back.  This is 
what it looks like if I'm 

10:50:17.752 --> 10:50:22.503
driving and training it.  I can 
steer and control it like this. 

10:50:22.504 --> 10:50:24.156
So it's you know what it's doing
right now is recording what it 

10:50:24.157 --> 10:50:29.062
would see on the webcam from the
car actually moving and storying

10:50:29.063 --> 10:50:31.063
all that stuff that would 

10:50:32.160 --> 10:50:35.271
then use to train a Tensorflow 
model for that specific area.  

10:50:35.272 --> 10:50:37.296
When you see the cars in the 
sandbox they're on this figure 

10:50:37.297 --> 10:50:41.390
YAR track.  We train them in 
that way then instead of 

10:50:41.391 --> 10:50:43.664
launching it in training mode as
I have it now we just launch it 

10:50:43.665 --> 10:50:45.665
in drive mode and they drive 
themselves. 

10:50:49.178 --> 10:50:50.826
You can build one of these as a 
donkey using the donkey car 

10:50:50.827 --> 10:50:52.827
project.  This one is a little 
bit more expensive.

10:50:56.375 --> 10:50:59.235
But they generally cost maybe 2 
hundred dollars total.  And you 

10:50:59.236 --> 10:51:02.936
can build a self-driving car and
it's all open source.  It's 

10:51:02.937 --> 10:51:05.604
really, really cool.  
Queen go back to the slides 

10:51:05.605 --> 10:51:08.691
please?  
The motor on the car is really 

10:51:08.692 --> 10:51:12.372
cloud so I'm going to turn it 
off.  So that's what it's like 

10:51:12.373 --> 10:51:14.373
to train a donkey car.

10:51:15.854 --> 10:51:17.492
That's kind of with on device 
inference you can have it, 

10:51:17.493 --> 10:51:21.400
believe it or not, a model 
self-driving car.  I think 

10:51:21.401 --> 10:51:23.019
that's really cool JIESHTHS the 
next thing was Android things 

10:51:23.020 --> 10:51:28.389
that I mentioned.  Did everybody
get one of these?  Right.  So 

10:51:28.390 --> 10:51:30.390
these are just so cool.

10:51:31.478 --> 10:51:33.968
This is like just a little -- 
this one isn't actually a RAZ 

10:51:33.969 --> 10:51:36.431
BERie pie it is a -- Raspberry 
Pi but a similar concept.

10:51:39.699 --> 10:51:41.533
With Android things being able 
to execute stuff and with 

10:51:41.534 --> 10:51:46.104
Tensorflow running you can start
doing inference.  Has anybody 

10:51:46.105 --> 10:51:49.824
done the code lab?  Have you 
tried it out to do inference?  

10:51:49.825 --> 10:51:52.487
Try it out and build it.  This 
afternoon back in my hotel, you 

10:51:54.765 --> 10:51:57.235
know, on this device I kind of 
pointed it at a water bottle and

10:51:57.236 --> 10:52:00.094
I thought it was interesting 
that it gives you three things 

10:52:00.095 --> 10:52:02.095
that it thinks it is.

10:52:05.237 --> 10:52:08.505
It thought a water bottle, a pop
bottle or toilet tissue.  Then I

10:52:08.506 --> 10:52:10.506
tried it on this one.

10:52:11.973 --> 10:52:16.087
And it said a coffee mug, a cup 
or measuring cup.  Particularly 

10:52:16.088 --> 10:52:18.088
the way the handle is placed I 
thought it would be interesting 

10:52:19.578 --> 10:52:22.613
to try to fool it.  I thought it
might think it was a pitcher 

10:52:22.614 --> 10:52:24.614
because sometimes when I do mugs

10:52:26.944 --> 10:52:28.944
like that it classifies it as a 
pitcher.

10:52:30.237 --> 10:52:32.237
Then this one I tried on my 
little 

10:52:33.580 --> 10:52:36.061
French Android and I thought he 
was a piggy bank, a tea pot.  I 

10:52:36.062 --> 10:52:37.691
guess he is a tea pot the way he
is standing.  Or maybe even a 

10:52:37.692 --> 10:52:41.808
spotlight.  Maybe it's the shape
or something.  But that's the 

10:52:41.809 --> 10:52:46.739
stuff that's built in.  When you
assemble this device that App is

10:52:46.740 --> 10:52:49.026
actually running on here and 
that App is open source.  One of

10:52:49.027 --> 10:52:50.875
the really cool things you can 
do is the image model that App 

10:52:50.876 --> 10:52:54.369
is trained for you can retrain 
that for your own images.  

10:52:57.285 --> 10:52:59.158
I've been working on a version 
of it I'm going add to the car 

10:52:59.159 --> 10:53:01.407
and maybe we'll talk about it at
a future I/O where I'm 

10:53:02.839 --> 10:53:06.538
retraining the car to recognize 
things like traffic lights.  So,

10:53:06.539 --> 10:53:08.176
if it sees a red light it will 
STOM if a green light it will 

10:53:08.177 --> 10:53:10.830
go.  All the code is available 
with this kit when you get it.

10:53:15.750 --> 10:53:18.797
For those of you watching online
check out Android things.  You 

10:53:18.798 --> 10:53:19.850
can buy these kits and they're 
relatively cheap and so touch 

10:53:19.851 --> 10:53:21.883
fun. 
The code lab that I mentioned if

10:53:21.884 --> 10:53:25.183
you are here at I/O you can try 
it out.  If you want to try it 

10:53:25.184 --> 10:53:27.184
on your machines 

10:53:28.665 --> 10:53:30.531
at home, the URL is at this QRL 
code.  Have a Play with it.  

10:53:30.532 --> 10:53:32.532
It's a lot of fun. 

10:53:37.947 --> 10:53:40.415
So in recap we spoke a little 
bit about loT and AI and the 

10:53:40.416 --> 10:53:44.284
things happening.  The explosive
growth of actual devices.  And 

10:53:44.285 --> 10:53:46.142
the amount of data they're 
producing.  Then the things you 

10:53:46.143 --> 10:53:48.143
can do with that.

10:53:49.441 --> 10:53:51.441
We looked at the sensor data on 
ARD weana.

10:53:53.769 --> 10:53:56.401
We looked at cloud scale AI and 
device inference.  There's a 

10:53:56.402 --> 10:53:58.865
whole bunch of things you can do
to take a look at.  

10:53:59.677 --> 10:54:01.677
Things you can try out.

10:54:05.234 --> 10:54:09.970
Number 1, writing data from your
loT device to cloud storage.  If

10:54:09.971 --> 10:54:12.630
you want to explore the 
Tensorflow object detection API 

10:54:12.631 --> 10:54:14.631
which is was Kaz 

10:54:15.697 --> 10:54:18.125
was using when it was detecting 
tomatoes and eggplants you can 

10:54:18.126 --> 10:54:23.662
find details at this link.  LoT 
and the cloud ML engines.  

10:54:23.663 --> 10:54:25.663
Details at this link.  And this 
one.

10:54:28.182 --> 10:54:30.631
And Tensorflow and Tensorflow 
lite and all the mobile 

10:54:30.632 --> 10:54:34.514
scenarios here were based on 
Tensorflow lite.  You can learn 

10:54:34.515 --> 10:54:37.778
about that at this link or 
attend the talks.  Finally 

10:54:37.779 --> 10:54:41.750
exploring Android things itself.
I find it super cool.  It's 

10:54:41.751 --> 10:54:43.245
really nice because if you are 
already an Android developer you

10:54:43.246 --> 10:54:48.134
can start building stuff using 
your existing skill set.  When I

10:54:48.135 --> 10:54:50.842
was doing the thing for the ARD 
weano I had to give myself a 

10:54:50.843 --> 10:54:55.197
crash course in C.  But if you 
are already an Android developer

10:54:55.198 --> 10:54:58.070
and used to using Java or Kotlin
to build your introduced Apps 

10:54:58.071 --> 10:55:01.372
you can start building with that
too. 

10:55:04.065 --> 10:55:06.065
We just want to say thank you 
very much.

10:55:07.616 --> 10:55:10.682
Feedback is always welcome.  
We'd love to hear it.  And it's 

10:55:10.683 --> 10:55:12.683
at this URL.  Thank you.  
(Applause).

