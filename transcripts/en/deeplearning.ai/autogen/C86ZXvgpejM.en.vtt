WEBVTT
Kind: captions
Language: en

00:00:00.120 --> 00:00:02.480 align:start position:0%
 
when<00:00:00.450><c> designing</c><00:00:00.810><c> a</c><00:00:00.989><c> lair</c><00:00:01.230><c> for</c><00:00:01.500><c> a</c><00:00:01.530><c> conflict</c><00:00:02.129><c> you</c>

00:00:02.480 --> 00:00:02.490 align:start position:0%
when designing a lair for a conflict you
 

00:00:02.490 --> 00:00:04.820 align:start position:0%
when designing a lair for a conflict you
might<00:00:02.669><c> have</c><00:00:02.850><c> to</c><00:00:02.970><c> pick</c><00:00:03.210><c> do</c><00:00:03.659><c> you</c><00:00:03.689><c> want</c><00:00:03.959><c> a</c><00:00:04.170><c> 1x3</c>

00:00:04.820 --> 00:00:04.830 align:start position:0%
might have to pick do you want a 1x3
 

00:00:04.830 --> 00:00:06.829 align:start position:0%
might have to pick do you want a 1x3
filter<00:00:05.460><c> or</c><00:00:05.700><c> a</c><00:00:05.759><c> three</c><00:00:05.910><c> by</c><00:00:06.060><c> three</c><00:00:06.270><c> or</c><00:00:06.480><c> a</c><00:00:06.509><c> five</c><00:00:06.660><c> by</c>

00:00:06.829 --> 00:00:06.839 align:start position:0%
filter or a three by three or a five by
 

00:00:06.839 --> 00:00:09.620 align:start position:0%
filter or a three by three or a five by
five<00:00:06.870><c> or</c><00:00:07.410><c> do</c><00:00:07.799><c> you</c><00:00:07.890><c> want</c><00:00:08.040><c> a</c><00:00:08.099><c> pulling</c><00:00:08.519><c> layer</c><00:00:08.700><c> what</c>

00:00:09.620 --> 00:00:09.630 align:start position:0%
five or do you want a pulling layer what
 

00:00:09.630 --> 00:00:11.509 align:start position:0%
five or do you want a pulling layer what
the<00:00:09.750><c> inception</c><00:00:10.080><c> that</c><00:00:10.440><c> Network</c><00:00:10.920><c> does</c><00:00:11.130><c> is</c><00:00:11.400><c> it</c>

00:00:11.509 --> 00:00:11.519 align:start position:0%
the inception that Network does is it
 

00:00:11.519 --> 00:00:13.669 align:start position:0%
the inception that Network does is it
says<00:00:11.730><c> why</c><00:00:12.179><c> should</c><00:00:12.210><c> do</c><00:00:12.570><c> them</c><00:00:12.719><c> all</c><00:00:12.870><c> and</c><00:00:13.170><c> this</c>

00:00:13.669 --> 00:00:13.679 align:start position:0%
says why should do them all and this
 

00:00:13.679 --> 00:00:15.379 align:start position:0%
says why should do them all and this
makes<00:00:13.889><c> the</c><00:00:14.040><c> network</c><00:00:14.429><c> architecture</c><00:00:14.730><c> more</c>

00:00:15.379 --> 00:00:15.389 align:start position:0%
makes the network architecture more
 

00:00:15.389 --> 00:00:17.630 align:start position:0%
makes the network architecture more
complicated<00:00:16.139><c> but</c><00:00:16.560><c> it</c><00:00:16.650><c> also</c><00:00:16.830><c> works</c><00:00:17.250><c> remarkably</c>

00:00:17.630 --> 00:00:17.640 align:start position:0%
complicated but it also works remarkably
 

00:00:17.640 --> 00:00:20.330 align:start position:0%
complicated but it also works remarkably
well<00:00:17.910><c> let's</c><00:00:18.810><c> see</c><00:00:18.930><c> how</c><00:00:19.050><c> this</c><00:00:19.230><c> works</c><00:00:19.470><c> let's</c><00:00:20.130><c> say</c>

00:00:20.330 --> 00:00:20.340 align:start position:0%
well let's see how this works let's say
 

00:00:20.340 --> 00:00:22.189 align:start position:0%
well let's see how this works let's say
for<00:00:20.520><c> the</c><00:00:20.609><c> sake</c><00:00:20.970><c> of</c><00:00:21.000><c> example</c><00:00:21.240><c> that</c><00:00:21.660><c> you</c><00:00:22.170><c> have</c>

00:00:22.189 --> 00:00:22.199 align:start position:0%
for the sake of example that you have
 

00:00:22.199 --> 00:00:25.910 align:start position:0%
for the sake of example that you have
input<00:00:22.859><c> is</c><00:00:23.220><c> a</c><00:00:23.310><c> 28</c><00:00:23.730><c> by</c><00:00:24.000><c> 28</c><00:00:24.060><c> by</c><00:00:24.570><c> 192</c><00:00:25.199><c> dimensional</c>

00:00:25.910 --> 00:00:25.920 align:start position:0%
input is a 28 by 28 by 192 dimensional
 

00:00:25.920 --> 00:00:30.259 align:start position:0%
input is a 28 by 28 by 192 dimensional
volume<00:00:26.900><c> so</c><00:00:27.900><c> what</c><00:00:28.410><c> the</c><00:00:28.590><c> inception</c><00:00:29.189><c> network</c><00:00:30.119><c> or</c>

00:00:30.259 --> 00:00:30.269 align:start position:0%
volume so what the inception network or
 

00:00:30.269 --> 00:00:33.049 align:start position:0%
volume so what the inception network or
what<00:00:30.449><c> an</c><00:00:30.630><c> inception</c><00:00:31.109><c> layer</c><00:00:31.500><c> says</c><00:00:31.830><c> is</c><00:00:32.219><c> instead</c>

00:00:33.049 --> 00:00:33.059 align:start position:0%
what an inception layer says is instead
 

00:00:33.059 --> 00:00:35.810 align:start position:0%
what an inception layer says is instead
of<00:00:33.120><c> choosing</c><00:00:33.750><c> what</c><00:00:34.050><c> filter</c><00:00:34.440><c> size</c><00:00:34.649><c> you</c><00:00:34.890><c> want</c><00:00:35.160><c> in</c>

00:00:35.810 --> 00:00:35.820 align:start position:0%
of choosing what filter size you want in
 

00:00:35.820 --> 00:00:36.880 align:start position:0%
of choosing what filter size you want in
a<00:00:35.969><c> conflate</c>

00:00:36.880 --> 00:00:36.890 align:start position:0%
a conflate
 

00:00:36.890 --> 00:00:39.380 align:start position:0%
a conflate
do<00:00:37.890><c> you</c><00:00:37.980><c> want</c><00:00:38.250><c> a</c><00:00:38.370><c> convolutional</c><00:00:39.000><c> layer</c><00:00:39.210><c> or</c>

00:00:39.380 --> 00:00:39.390 align:start position:0%
do you want a convolutional layer or
 

00:00:39.390 --> 00:00:42.530 align:start position:0%
do you want a convolutional layer or
pooling<00:00:39.780><c> layer</c><00:00:39.930><c> let's</c><00:00:40.590><c> do</c><00:00:40.770><c> them</c><00:00:40.950><c> all</c><00:00:41.100><c> so</c><00:00:42.030><c> one</c>

00:00:42.530 --> 00:00:42.540 align:start position:0%
pooling layer let's do them all so one
 

00:00:42.540 --> 00:00:46.430 align:start position:0%
pooling layer let's do them all so one
of<00:00:42.570><c> you</c><00:00:42.780><c> can</c><00:00:43.700><c> use</c><00:00:44.700><c> a</c><00:00:44.879><c> one</c><00:00:45.120><c> by</c><00:00:45.270><c> one</c><00:00:45.570><c> convolution</c>

00:00:46.430 --> 00:00:46.440 align:start position:0%
of you can use a one by one convolution
 

00:00:46.440 --> 00:00:50.209 align:start position:0%
of you can use a one by one convolution
and<00:00:46.710><c> that</c><00:00:47.610><c> will</c><00:00:47.789><c> output</c><00:00:48.000><c> a</c><00:00:48.559><c> 28</c><00:00:49.559><c> by</c><00:00:49.710><c> 28</c><00:00:49.770><c> by</c>

00:00:50.209 --> 00:00:50.219 align:start position:0%
and that will output a 28 by 28 by
 

00:00:50.219 --> 00:00:55.580 align:start position:0%
and that will output a 28 by 28 by
something<00:00:50.520><c> let's</c><00:00:51.000><c> say</c><00:00:52.129><c> 28</c><00:00:53.129><c> by</c><00:00:53.280><c> 28</c><00:00:53.930><c> by</c><00:00:54.930><c> 64</c>

00:00:55.580 --> 00:00:55.590 align:start position:0%
something let's say 28 by 28 by 64
 

00:00:55.590 --> 00:00:57.970 align:start position:0%
something let's say 28 by 28 by 64
output<00:00:55.980><c> and</c><00:00:56.219><c> you</c><00:00:56.579><c> just</c><00:00:56.789><c> have</c><00:00:57.000><c> a</c><00:00:57.030><c> volume</c><00:00:57.449><c> there</c>

00:00:57.970 --> 00:00:57.980 align:start position:0%
output and you just have a volume there
 

00:00:57.980 --> 00:01:01.040 align:start position:0%
output and you just have a volume there
but<00:00:58.980><c> maybe</c><00:00:59.370><c> you</c><00:00:59.550><c> also</c><00:00:59.789><c> want</c><00:01:00.239><c> to</c><00:01:00.300><c> try</c><00:01:00.449><c> a</c><00:01:00.510><c> 3</c><00:01:00.870><c> by</c><00:01:01.020><c> 3</c>

00:01:01.040 --> 00:01:01.050 align:start position:0%
but maybe you also want to try a 3 by 3
 

00:01:01.050 --> 00:01:05.179 align:start position:0%
but maybe you also want to try a 3 by 3
and<00:01:01.680><c> that</c><00:01:02.640><c> might</c><00:01:02.850><c> output</c><00:01:03.329><c> a</c><00:01:03.600><c> tawny</c><00:01:04.409><c> by</c><00:01:04.619><c> 28</c><00:01:05.010><c> by</c>

00:01:05.179 --> 00:01:05.189 align:start position:0%
and that might output a tawny by 28 by
 

00:01:05.189 --> 00:01:10.190 align:start position:0%
and that might output a tawny by 28 by
128<00:01:05.939><c> and</c><00:01:06.360><c> then</c><00:01:07.140><c> what</c><00:01:07.500><c> you</c><00:01:07.619><c> do</c><00:01:07.799><c> is</c><00:01:07.830><c> just</c><00:01:09.200><c> stack</c>

00:01:10.190 --> 00:01:10.200 align:start position:0%
128 and then what you do is just stack
 

00:01:10.200 --> 00:01:13.190 align:start position:0%
128 and then what you do is just stack
up<00:01:10.470><c> this</c><00:01:10.950><c> second</c><00:01:11.549><c> volume</c><00:01:11.760><c> next</c><00:01:12.750><c> to</c><00:01:12.810><c> the</c><00:01:12.930><c> first</c>

00:01:13.190 --> 00:01:13.200 align:start position:0%
up this second volume next to the first
 

00:01:13.200 --> 00:01:15.920 align:start position:0%
up this second volume next to the first
volume<00:01:13.500><c> and</c><00:01:13.950><c> to</c><00:01:14.640><c> make</c><00:01:14.939><c> the</c><00:01:15.060><c> dimensions</c><00:01:15.570><c> match</c>

00:01:15.920 --> 00:01:15.930 align:start position:0%
volume and to make the dimensions match
 

00:01:15.930 --> 00:01:19.760 align:start position:0%
volume and to make the dimensions match
up<00:01:16.259><c> let's</c><00:01:16.799><c> make</c><00:01:17.009><c> this</c><00:01:17.430><c> a</c><00:01:17.700><c> same</c><00:01:18.479><c> convolution</c><00:01:19.380><c> so</c>

00:01:19.760 --> 00:01:19.770 align:start position:0%
up let's make this a same convolution so
 

00:01:19.770 --> 00:01:22.910 align:start position:0%
up let's make this a same convolution so
the<00:01:20.009><c> output</c><00:01:20.820><c> dimension</c><00:01:21.299><c> is</c><00:01:21.540><c> still</c><00:01:21.869><c> 28</c><00:01:22.710><c> by</c><00:01:22.860><c> 28</c>

00:01:22.910 --> 00:01:22.920 align:start position:0%
the output dimension is still 28 by 28
 

00:01:22.920 --> 00:01:26.330 align:start position:0%
the output dimension is still 28 by 28
same<00:01:23.729><c> as</c><00:01:23.880><c> the</c><00:01:24.060><c> input</c><00:01:24.360><c> dimension</c><00:01:25.290><c> in</c><00:01:25.860><c> terms</c><00:01:26.189><c> of</c>

00:01:26.330 --> 00:01:26.340 align:start position:0%
same as the input dimension in terms of
 

00:01:26.340 --> 00:01:29.120 align:start position:0%
same as the input dimension in terms of
height<00:01:26.490><c> and</c><00:01:26.670><c> width</c><00:01:26.850><c> but</c><00:01:27.150><c> 28</c><00:01:27.540><c> by</c><00:01:27.689><c> 28</c><00:01:27.750><c> by</c><00:01:28.710><c> in</c><00:01:28.979><c> this</c>

00:01:29.120 --> 00:01:29.130 align:start position:0%
height and width but 28 by 28 by in this
 

00:01:29.130 --> 00:01:33.170 align:start position:0%
height and width but 28 by 28 by in this
example<00:01:29.840><c> 128</c><00:01:30.840><c> and</c><00:01:31.290><c> maybe</c><00:01:32.280><c> you</c><00:01:32.460><c> might</c><00:01:32.520><c> say</c><00:01:32.880><c> well</c>

00:01:33.170 --> 00:01:33.180 align:start position:0%
example 128 and maybe you might say well
 

00:01:33.180 --> 00:01:35.390 align:start position:0%
example 128 and maybe you might say well
I<00:01:33.420><c> want</c><00:01:33.780><c> to</c><00:01:33.900><c> hatch</c><00:01:34.020><c> my</c><00:01:34.200><c> bed's</c><00:01:34.439><c> maybe</c><00:01:34.740><c> a</c><00:01:34.829><c> 5</c><00:01:35.070><c> by</c><00:01:35.220><c> 5</c>

00:01:35.390 --> 00:01:35.400 align:start position:0%
I want to hatch my bed's maybe a 5 by 5
 

00:01:35.400 --> 00:01:37.819 align:start position:0%
I want to hatch my bed's maybe a 5 by 5
filter<00:01:35.939><c> works</c><00:01:36.299><c> better</c><00:01:36.570><c> so</c><00:01:36.960><c> let's</c><00:01:37.290><c> do</c><00:01:37.439><c> that</c><00:01:37.500><c> too</c>

00:01:37.819 --> 00:01:37.829 align:start position:0%
filter works better so let's do that too
 

00:01:37.829 --> 00:01:44.289 align:start position:0%
filter works better so let's do that too
and<00:01:38.009><c> have</c><00:01:38.820><c> that</c><00:01:39.030><c> to</c><00:01:39.240><c> output</c><00:01:39.630><c> a</c><00:01:39.840><c> 28</c><00:01:40.710><c> by</c><00:01:40.920><c> 28</c><00:01:41.210><c> by</c><00:01:43.250><c> 32</c>

00:01:44.289 --> 00:01:44.299 align:start position:0%
and have that to output a 28 by 28 by 32
 

00:01:44.299 --> 00:01:47.210 align:start position:0%
and have that to output a 28 by 28 by 32
and<00:01:45.299><c> again</c><00:01:45.570><c> you</c><00:01:45.840><c> use</c><00:01:46.049><c> the</c><00:01:46.229><c> same</c><00:01:46.470><c> convolution</c>

00:01:47.210 --> 00:01:47.220 align:start position:0%
and again you use the same convolution
 

00:01:47.220 --> 00:01:49.370 align:start position:0%
and again you use the same convolution
to<00:01:47.790><c> keep</c><00:01:48.030><c> the</c><00:01:48.210><c> dimensions</c><00:01:48.750><c> the</c><00:01:48.869><c> same</c><00:01:49.079><c> and</c>

00:01:49.370 --> 00:01:49.380 align:start position:0%
to keep the dimensions the same and
 

00:01:49.380 --> 00:01:52.219 align:start position:0%
to keep the dimensions the same and
maybe<00:01:50.189><c> you</c><00:01:51.119><c> don't</c><00:01:51.299><c> want</c><00:01:51.509><c> to</c><00:01:51.570><c> convolutional</c>

00:01:52.219 --> 00:01:52.229 align:start position:0%
maybe you don't want to convolutional
 

00:01:52.229 --> 00:01:55.340 align:start position:0%
maybe you don't want to convolutional
there<00:01:52.439><c> let's</c><00:01:53.040><c> apply</c><00:01:53.399><c> pooling</c><00:01:54.090><c> and</c><00:01:54.360><c> that</c><00:01:55.140><c> has</c>

00:01:55.340 --> 00:01:55.350 align:start position:0%
there let's apply pooling and that has
 

00:01:55.350 --> 00:01:57.469 align:start position:0%
there let's apply pooling and that has
some<00:01:55.619><c> other</c><00:01:55.829><c> output</c><00:01:56.340><c> and</c><00:01:56.579><c> let's</c><00:01:56.820><c> stack</c><00:01:57.240><c> that</c>

00:01:57.469 --> 00:01:57.479 align:start position:0%
some other output and let's stack that
 

00:01:57.479 --> 00:02:01.429 align:start position:0%
some other output and let's stack that
up<00:01:57.540><c> as</c><00:01:57.899><c> well</c><00:01:58.170><c> and</c><00:01:58.790><c> here</c><00:01:59.790><c> pulling</c><00:02:00.479><c> outputs</c><00:02:01.200><c> to</c>

00:02:01.429 --> 00:02:01.439 align:start position:0%
up as well and here pulling outputs to
 

00:02:01.439 --> 00:02:07.639 align:start position:0%
up as well and here pulling outputs to
neat<00:02:01.590><c> by</c><00:02:01.799><c> 28</c><00:02:02.280><c> by</c><00:02:03.320><c> 32</c><00:02:04.969><c> now</c><00:02:05.969><c> in</c><00:02:06.299><c> order</c><00:02:06.600><c> to</c><00:02:06.810><c> make</c>

00:02:07.639 --> 00:02:07.649 align:start position:0%
neat by 28 by 32 now in order to make
 

00:02:07.649 --> 00:02:09.830 align:start position:0%
neat by 28 by 32 now in order to make
all<00:02:07.920><c> the</c><00:02:08.099><c> dimensions</c><00:02:08.610><c> match</c><00:02:08.700><c> you</c><00:02:09.390><c> actually</c>

00:02:09.830 --> 00:02:09.840 align:start position:0%
all the dimensions match you actually
 

00:02:09.840 --> 00:02:11.820 align:start position:0%
all the dimensions match you actually
need<00:02:10.020><c> to</c><00:02:10.170><c> use</c><00:02:10.349><c> padding</c><00:02:11.069><c> from</c>

00:02:11.820 --> 00:02:11.830 align:start position:0%
need to use padding from
 

00:02:11.830 --> 00:02:14.190 align:start position:0%
need to use padding from
fooling<00:02:12.520><c> so</c><00:02:12.760><c> this</c><00:02:12.970><c> is</c><00:02:13.120><c> an</c><00:02:13.240><c> unusual</c><00:02:13.840><c> form</c><00:02:14.050><c> of</c>

00:02:14.190 --> 00:02:14.200 align:start position:0%
fooling so this is an unusual form of
 

00:02:14.200 --> 00:02:16.770 align:start position:0%
fooling so this is an unusual form of
polling<00:02:14.620><c> because</c><00:02:15.040><c> if</c><00:02:15.460><c> you</c><00:02:15.700><c> want</c><00:02:15.940><c> the</c><00:02:16.060><c> input</c><00:02:16.240><c> to</c>

00:02:16.770 --> 00:02:16.780 align:start position:0%
polling because if you want the input to
 

00:02:16.780 --> 00:02:18.000 align:start position:0%
polling because if you want the input to
have<00:02:16.900><c> higher</c><00:02:17.050><c> than</c><00:02:17.200><c> worth</c><00:02:17.350><c> twenty</c><00:02:17.650><c> by</c><00:02:17.800><c> twenty</c>

00:02:18.000 --> 00:02:18.010 align:start position:0%
have higher than worth twenty by twenty
 

00:02:18.010 --> 00:02:20.910 align:start position:0%
have higher than worth twenty by twenty
eight<00:02:18.220><c> and</c><00:02:18.250><c> have</c><00:02:19.090><c> the</c><00:02:19.300><c> output</c><00:02:19.810><c> you</c><00:02:20.290><c> know</c><00:02:20.380><c> match</c>

00:02:20.910 --> 00:02:20.920 align:start position:0%
eight and have the output you know match
 

00:02:20.920 --> 00:02:23.550 align:start position:0%
eight and have the output you know match
the<00:02:21.190><c> dimension</c><00:02:21.610><c> everything</c><00:02:21.970><c> else</c><00:02:22.150><c> also</c><00:02:22.720><c> by</c><00:02:23.140><c> 28</c>

00:02:23.550 --> 00:02:23.560 align:start position:0%
the dimension everything else also by 28
 

00:02:23.560 --> 00:02:26.970 align:start position:0%
the dimension everything else also by 28
by<00:02:23.680><c> 28</c><00:02:23.760><c> then</c><00:02:24.760><c> you</c><00:02:24.910><c> need</c><00:02:25.180><c> to</c><00:02:25.390><c> use</c><00:02:25.630><c> same</c><00:02:26.380><c> padding</c>

00:02:26.970 --> 00:02:26.980 align:start position:0%
by 28 then you need to use same padding
 

00:02:26.980 --> 00:02:31.920 align:start position:0%
by 28 then you need to use same padding
as<00:02:27.970><c> well</c><00:02:28.030><c> as</c><00:02:28.360><c> the</c><00:02:28.450><c> strata</c><00:02:28.750><c> one</c><00:02:29.110><c> for</c><00:02:29.830><c> pooling</c><00:02:30.930><c> so</c>

00:02:31.920 --> 00:02:31.930 align:start position:0%
as well as the strata one for pooling so
 

00:02:31.930 --> 00:02:33.630 align:start position:0%
as well as the strata one for pooling so
this<00:02:32.170><c> detail</c><00:02:32.590><c> might</c><00:02:32.800><c> seem</c><00:02:33.010><c> a</c><00:02:33.040><c> bit</c><00:02:33.160><c> funny</c><00:02:33.520><c> to</c>

00:02:33.630 --> 00:02:33.640 align:start position:0%
this detail might seem a bit funny to
 

00:02:33.640 --> 00:02:37.230 align:start position:0%
this detail might seem a bit funny to
you<00:02:33.850><c> now</c><00:02:34.060><c> but</c><00:02:34.450><c> let's</c><00:02:34.690><c> let's</c><00:02:35.050><c> keep</c><00:02:35.230><c> going</c><00:02:36.240><c> and</c>

00:02:37.230 --> 00:02:37.240 align:start position:0%
you now but let's let's keep going and
 

00:02:37.240 --> 00:02:40.620 align:start position:0%
you now but let's let's keep going and
we'll<00:02:37.450><c> make</c><00:02:37.660><c> this</c><00:02:37.810><c> all</c><00:02:37.990><c> work</c><00:02:38.170><c> later</c><00:02:39.210><c> but</c><00:02:40.210><c> with</c>

00:02:40.620 --> 00:02:40.630 align:start position:0%
we'll make this all work later but with
 

00:02:40.630 --> 00:02:43.440 align:start position:0%
we'll make this all work later but with
a<00:02:41.130><c> inception</c><00:02:42.130><c> module</c><00:02:42.580><c> like</c><00:02:42.760><c> this</c><00:02:42.790><c> you</c><00:02:43.270><c> can</c>

00:02:43.440 --> 00:02:43.450 align:start position:0%
a inception module like this you can
 

00:02:43.450 --> 00:02:46.320 align:start position:0%
a inception module like this you can
input<00:02:43.930><c> some</c><00:02:44.500><c> volume</c><00:02:44.980><c> and</c><00:02:45.190><c> output</c><00:02:46.030><c> in</c><00:02:46.180><c> this</c>

00:02:46.320 --> 00:02:46.330 align:start position:0%
input some volume and output in this
 

00:02:46.330 --> 00:02:47.880 align:start position:0%
input some volume and output in this
case<00:02:46.390><c> I</c><00:02:46.810><c> guess</c><00:02:46.930><c> if</c><00:02:47.110><c> you</c><00:02:47.200><c> add</c><00:02:47.410><c> up</c><00:02:47.530><c> all</c><00:02:47.710><c> these</c>

00:02:47.880 --> 00:02:47.890 align:start position:0%
case I guess if you add up all these
 

00:02:47.890 --> 00:02:51.050 align:start position:0%
case I guess if you add up all these
numbers<00:02:48.300><c> 32</c><00:02:49.300><c> plus</c><00:02:49.540><c> 32</c><00:02:49.930><c> plus</c><00:02:49.959><c> 128</c><00:02:50.650><c> plus</c><00:02:50.890><c> 64</c>

00:02:51.050 --> 00:02:51.060 align:start position:0%
numbers 32 plus 32 plus 128 plus 64
 

00:02:51.060 --> 00:02:56.730 align:start position:0%
numbers 32 plus 32 plus 128 plus 64
that's<00:02:52.060><c> equal</c><00:02:52.570><c> to</c><00:02:52.810><c> 2</c><00:02:53.590><c> 5</c><00:02:53.980><c> 6</c><00:02:54.450><c> so</c><00:02:55.450><c> you</c><00:02:55.750><c> will</c><00:02:56.020><c> have</c><00:02:56.260><c> 1</c>

00:02:56.730 --> 00:02:56.740 align:start position:0%
that's equal to 2 5 6 so you will have 1
 

00:02:56.740 --> 00:03:01.260 align:start position:0%
that's equal to 2 5 6 so you will have 1
Inception<00:02:57.520><c> module</c><00:02:58.390><c> input</c><00:02:58.930><c> 28</c><00:02:59.860><c> by</c><00:03:00.040><c> 28</c><00:03:00.100><c> by</c><00:03:00.550><c> 129</c>

00:03:01.260 --> 00:03:01.270 align:start position:0%
Inception module input 28 by 28 by 129
 

00:03:01.270 --> 00:03:07.530 align:start position:0%
Inception module input 28 by 28 by 129
and<00:03:01.540><c> output</c><00:03:02.440><c> 28</c><00:03:03.310><c> by</c><00:03:03.520><c> 28</c><00:03:03.630><c> by</c><00:03:04.630><c> 256</c><00:03:05.530><c> and</c><00:03:06.240><c> this</c><00:03:07.240><c> is</c>

00:03:07.530 --> 00:03:07.540 align:start position:0%
and output 28 by 28 by 256 and this is
 

00:03:07.540 --> 00:03:10.920 align:start position:0%
and output 28 by 28 by 256 and this is
the<00:03:07.750><c> heart</c><00:03:08.110><c> of</c><00:03:08.380><c> the</c><00:03:08.800><c> inception</c><00:03:09.700><c> Network</c><00:03:10.480><c> which</c>

00:03:10.920 --> 00:03:10.930 align:start position:0%
the heart of the inception Network which
 

00:03:10.930 --> 00:03:13.380 align:start position:0%
the heart of the inception Network which
is<00:03:11.080><c> due</c><00:03:11.290><c> to</c><00:03:11.400><c> Christians</c><00:03:12.400><c> agony</c><00:03:12.820><c> wanly</c>

00:03:13.380 --> 00:03:13.390 align:start position:0%
is due to Christians agony wanly
 

00:03:13.390 --> 00:03:15.720 align:start position:0%
is due to Christians agony wanly
orienting<00:03:13.959><c> TRPs</c><00:03:14.620><c> I</c><00:03:14.770><c> mean</c><00:03:15.010><c> Scott</c><00:03:15.430><c> lead</c>

00:03:15.720 --> 00:03:15.730 align:start position:0%
orienting TRPs I mean Scott lead
 

00:03:15.730 --> 00:03:18.270 align:start position:0%
orienting TRPs I mean Scott lead
Dragomir<00:03:16.390><c> Angela</c><00:03:16.840><c> Dmitri</c><00:03:17.290><c> Orhan</c><00:03:17.680><c> Vincent</c><00:03:18.160><c> and</c>

00:03:18.270 --> 00:03:18.280 align:start position:0%
Dragomir Angela Dmitri Orhan Vincent and
 

00:03:18.280 --> 00:03:21.900 align:start position:0%
Dragomir Angela Dmitri Orhan Vincent and
cook<00:03:18.459><c> and</c><00:03:18.670><c> Andrew</c><00:03:19.150><c> ramen</c><00:03:19.510><c> average</c><00:03:19.750><c> and</c><00:03:20.910><c> the</c>

00:03:21.900 --> 00:03:21.910 align:start position:0%
cook and Andrew ramen average and the
 

00:03:21.910 --> 00:03:24.090 align:start position:0%
cook and Andrew ramen average and the
basic<00:03:22.239><c> idea</c><00:03:22.630><c> is</c><00:03:22.900><c> that</c><00:03:22.930><c> instead</c><00:03:23.709><c> of</c><00:03:23.769><c> you</c>

00:03:24.090 --> 00:03:24.100 align:start position:0%
basic idea is that instead of you
 

00:03:24.100 --> 00:03:26.759 align:start position:0%
basic idea is that instead of you
needing<00:03:24.400><c> to</c><00:03:24.580><c> pick</c><00:03:25.019><c> one</c><00:03:26.019><c> of</c><00:03:26.170><c> these</c><00:03:26.260><c> filter</c>

00:03:26.759 --> 00:03:26.769 align:start position:0%
needing to pick one of these filter
 

00:03:26.769 --> 00:03:29.340 align:start position:0%
needing to pick one of these filter
sizes<00:03:27.220><c> or</c><00:03:27.430><c> pooling</c><00:03:27.820><c> you</c><00:03:27.940><c> want</c><00:03:28.239><c> and</c><00:03:28.510><c> committing</c>

00:03:29.340 --> 00:03:29.350 align:start position:0%
sizes or pooling you want and committing
 

00:03:29.350 --> 00:03:31.380 align:start position:0%
sizes or pooling you want and committing
to<00:03:29.470><c> that</c><00:03:29.620><c> you</c><00:03:30.280><c> can</c><00:03:30.459><c> do</c><00:03:30.640><c> them</c><00:03:30.790><c> all</c><00:03:30.940><c> and</c><00:03:31.209><c> just</c>

00:03:31.380 --> 00:03:31.390 align:start position:0%
to that you can do them all and just
 

00:03:31.390 --> 00:03:33.900 align:start position:0%
to that you can do them all and just
concatenate<00:03:31.750><c> all</c><00:03:32.230><c> the</c><00:03:32.470><c> outputs</c><00:03:32.920><c> and</c><00:03:33.160><c> let</c><00:03:33.790><c> the</c>

00:03:33.900 --> 00:03:33.910 align:start position:0%
concatenate all the outputs and let the
 

00:03:33.910 --> 00:03:35.640 align:start position:0%
concatenate all the outputs and let the
network<00:03:34.300><c> learn</c><00:03:34.570><c> whatever</c><00:03:35.050><c> parameters</c><00:03:35.500><c> it</c>

00:03:35.640 --> 00:03:35.650 align:start position:0%
network learn whatever parameters it
 

00:03:35.650 --> 00:03:37.530 align:start position:0%
network learn whatever parameters it
wants<00:03:35.920><c> to</c><00:03:36.040><c> use</c><00:03:36.220><c> whatever</c><00:03:36.489><c> combinations</c><00:03:37.330><c> of</c>

00:03:37.530 --> 00:03:37.540 align:start position:0%
wants to use whatever combinations of
 

00:03:37.540 --> 00:03:41.130 align:start position:0%
wants to use whatever combinations of
these<00:03:37.660><c> filter</c><00:03:38.110><c> sizes</c><00:03:38.320><c> it</c><00:03:38.830><c> wants</c><00:03:39.750><c> now</c><00:03:40.750><c> it</c><00:03:40.900><c> turns</c>

00:03:41.130 --> 00:03:41.140 align:start position:0%
these filter sizes it wants now it turns
 

00:03:41.140 --> 00:03:42.690 align:start position:0%
these filter sizes it wants now it turns
out<00:03:41.320><c> that</c><00:03:41.590><c> there's</c><00:03:41.860><c> a</c><00:03:41.920><c> problem</c><00:03:42.280><c> with</c><00:03:42.459><c> the</c>

00:03:42.690 --> 00:03:42.700 align:start position:0%
out that there's a problem with the
 

00:03:42.700 --> 00:03:44.340 align:start position:0%
out that there's a problem with the
inception<00:03:43.060><c> there</c><00:03:43.420><c> as</c><00:03:43.570><c> we've</c><00:03:43.750><c> described</c><00:03:44.200><c> it</c>

00:03:44.340 --> 00:03:44.350 align:start position:0%
inception there as we've described it
 

00:03:44.350 --> 00:03:47.460 align:start position:0%
inception there as we've described it
here<00:03:44.620><c> which</c><00:03:45.160><c> is</c><00:03:45.340><c> computational</c><00:03:46.150><c> cost</c><00:03:46.360><c> on</c><00:03:46.750><c> the</c>

00:03:47.460 --> 00:03:47.470 align:start position:0%
here which is computational cost on the
 

00:03:47.470 --> 00:03:49.170 align:start position:0%
here which is computational cost on the
next<00:03:47.800><c> slide</c><00:03:47.980><c> let's</c><00:03:48.280><c> figure</c><00:03:48.519><c> out</c><00:03:48.760><c> what's</c><00:03:49.120><c> the</c>

00:03:49.170 --> 00:03:49.180 align:start position:0%
next slide let's figure out what's the
 

00:03:49.180 --> 00:03:53.390 align:start position:0%
next slide let's figure out what's the
computational<00:03:49.959><c> cost</c><00:03:50.230><c> of</c><00:03:50.620><c> this</c><00:03:51.540><c> 5x5</c><00:03:52.540><c> filter</c>

00:03:53.390 --> 00:03:53.400 align:start position:0%
computational cost of this 5x5 filter
 

00:03:53.400 --> 00:03:57.360 align:start position:0%
computational cost of this 5x5 filter
resulting<00:03:54.400><c> in</c><00:03:54.610><c> this</c><00:03:55.269><c> block</c><00:03:55.600><c> over</c><00:03:55.870><c> here</c><00:03:56.370><c> so</c>

00:03:57.360 --> 00:03:57.370 align:start position:0%
resulting in this block over here so
 

00:03:57.370 --> 00:04:01.530 align:start position:0%
resulting in this block over here so
just<00:03:57.400><c> focusing</c><00:03:58.239><c> on</c><00:03:58.300><c> the</c><00:03:58.780><c> 5x5</c><00:03:59.489><c> pot</c><00:04:00.489><c> on</c><00:04:00.790><c> the</c>

00:04:01.530 --> 00:04:01.540 align:start position:0%
just focusing on the 5x5 pot on the
 

00:04:01.540 --> 00:04:05.310 align:start position:0%
just focusing on the 5x5 pot on the
previous<00:04:02.050><c> slide</c><00:04:02.260><c> we</c><00:04:02.560><c> had</c><00:04:03.430><c> as</c><00:04:03.580><c> input</c><00:04:03.970><c> a</c><00:04:04.180><c> 28</c><00:04:04.810><c> 8</c><00:04:05.080><c> by</c>

00:04:05.310 --> 00:04:05.320 align:start position:0%
previous slide we had as input a 28 8 by
 

00:04:05.320 --> 00:04:08.490 align:start position:0%
previous slide we had as input a 28 8 by
20<00:04:05.620><c> by</c><00:04:05.709><c> 192</c><00:04:06.250><c> block</c><00:04:06.700><c> and</c><00:04:06.970><c> you</c><00:04:07.480><c> implement</c><00:04:07.780><c> a</c><00:04:08.110><c> 5</c><00:04:08.380><c> by</c>

00:04:08.490 --> 00:04:08.500 align:start position:0%
20 by 192 block and you implement a 5 by
 

00:04:08.500 --> 00:04:11.640 align:start position:0%
20 by 192 block and you implement a 5 by
5<00:04:08.530><c> same</c><00:04:09.190><c> convolution</c><00:04:09.880><c> or</c><00:04:10.420><c> 32</c><00:04:10.989><c> filters</c><00:04:11.410><c> to</c>

00:04:11.640 --> 00:04:11.650 align:start position:0%
5 same convolution or 32 filters to
 

00:04:11.650 --> 00:04:16.020 align:start position:0%
5 same convolution or 32 filters to
output<00:04:12.100><c> 28</c><00:04:12.519><c> by</c><00:04:12.640><c> 28</c><00:04:12.700><c> by</c><00:04:13.150><c> 32</c><00:04:14.340><c> on</c><00:04:15.340><c> their</c><00:04:15.790><c> previous</c>

00:04:16.020 --> 00:04:16.030 align:start position:0%
output 28 by 28 by 32 on their previous
 

00:04:16.030 --> 00:04:18.509 align:start position:0%
output 28 by 28 by 32 on their previous
slide<00:04:16.419><c> I</c><00:04:16.450><c> had</c><00:04:16.840><c> drawn</c><00:04:17.140><c> this</c><00:04:17.350><c> as</c><00:04:17.620><c> a</c><00:04:17.680><c> thin</c><00:04:18.070><c> purple</c>

00:04:18.509 --> 00:04:18.519 align:start position:0%
slide I had drawn this as a thin purple
 

00:04:18.519 --> 00:04:20.279 align:start position:0%
slide I had drawn this as a thin purple
slice<00:04:18.729><c> so</c><00:04:18.910><c> I'm</c><00:04:19.000><c> just</c><00:04:19.180><c> I</c><00:04:19.299><c> draw</c><00:04:19.540><c> this</c><00:04:19.690><c> as</c><00:04:19.900><c> a</c><00:04:20.020><c> more</c>

00:04:20.279 --> 00:04:20.289 align:start position:0%
slice so I'm just I draw this as a more
 

00:04:20.289 --> 00:04:24.300 align:start position:0%
slice so I'm just I draw this as a more
normal<00:04:21.039><c> looking</c><00:04:21.190><c> blue</c><00:04:22.000><c> block</c><00:04:22.300><c> here</c><00:04:22.740><c> so</c><00:04:23.740><c> let's</c>

00:04:24.300 --> 00:04:24.310 align:start position:0%
normal looking blue block here so let's
 

00:04:24.310 --> 00:04:25.080 align:start position:0%
normal looking blue block here so let's
look<00:04:24.729><c> at</c>

00:04:25.080 --> 00:04:25.090 align:start position:0%
look at
 

00:04:25.090 --> 00:04:28.830 align:start position:0%
look at
computational<00:04:25.900><c> cost</c><00:04:26.139><c> of</c><00:04:27.120><c> outputting</c><00:04:28.120><c> this</c><00:04:28.419><c> 20</c>

00:04:28.830 --> 00:04:28.840 align:start position:0%
computational cost of outputting this 20
 

00:04:28.840 --> 00:04:34.280 align:start position:0%
computational cost of outputting this 20
by<00:04:29.020><c> 20</c><00:04:29.350><c> by</c><00:04:29.380><c> 32</c><00:04:30.389><c> so</c><00:04:31.389><c> you</c><00:04:32.020><c> have</c><00:04:32.350><c> 32</c><00:04:33.160><c> filters</c>

00:04:34.280 --> 00:04:34.290 align:start position:0%
by 20 by 32 so you have 32 filters
 

00:04:34.290 --> 00:04:37.980 align:start position:0%
by 20 by 32 so you have 32 filters
because<00:04:35.290><c> the</c><00:04:35.770><c> output</c><00:04:36.220><c> has</c><00:04:36.460><c> 32</c><00:04:37.210><c> channels</c><00:04:37.720><c> and</c>

00:04:37.980 --> 00:04:37.990 align:start position:0%
because the output has 32 channels and
 

00:04:37.990 --> 00:04:44.189 align:start position:0%
because the output has 32 channels and
each<00:04:38.620><c> filter</c><00:04:38.949><c> is</c><00:04:39.400><c> going</c><00:04:40.389><c> to</c><00:04:40.510><c> be</c><00:04:40.630><c> 5</c><00:04:41.080><c> by</c><00:04:41.110><c> 5</c><00:04:41.550><c> by</c><00:04:43.199><c> 192</c>

00:04:44.189 --> 00:04:44.199 align:start position:0%
each filter is going to be 5 by 5 by 192
 

00:04:44.199 --> 00:04:48.030 align:start position:0%
each filter is going to be 5 by 5 by 192
and<00:04:44.669><c> so</c><00:04:45.669><c> the</c><00:04:45.940><c> output</c><00:04:46.120><c> size</c><00:04:46.510><c> is</c><00:04:46.720><c> 20</c><00:04:47.020><c> by</c><00:04:47.139><c> 20</c><00:04:47.410><c> by</c><00:04:47.440><c> 32</c>

00:04:48.030 --> 00:04:48.040 align:start position:0%
and so the output size is 20 by 20 by 32
 

00:04:48.040 --> 00:04:52.110 align:start position:0%
and so the output size is 20 by 20 by 32
and<00:04:48.310><c> so</c><00:04:49.090><c> you</c><00:04:49.150><c> need</c><00:04:49.570><c> to</c><00:04:49.600><c> compute</c><00:04:50.080><c> Tony</c><00:04:50.620><c> by</c><00:04:50.889><c> 28</c><00:04:51.370><c> by</c>

00:04:52.110 --> 00:04:52.120 align:start position:0%
and so you need to compute Tony by 28 by
 

00:04:52.120 --> 00:04:55.230 align:start position:0%
and so you need to compute Tony by 28 by
32<00:04:52.690><c> numbers</c><00:04:53.199><c> and</c><00:04:53.470><c> for</c><00:04:54.220><c> each</c><00:04:54.400><c> of</c><00:04:54.610><c> them</c><00:04:54.820><c> you</c><00:04:55.090><c> need</c>

00:04:55.230 --> 00:04:55.240 align:start position:0%
32 numbers and for each of them you need
 

00:04:55.240 --> 00:04:57.300 align:start position:0%
32 numbers and for each of them you need
to<00:04:55.419><c> do</c><00:04:55.660><c> you</c><00:04:56.199><c> know</c><00:04:56.440><c> this</c><00:04:56.680><c> many</c><00:04:56.889><c> multiplications</c>

00:04:57.300 --> 00:04:57.310 align:start position:0%
to do you know this many multiplications
 

00:04:57.310 --> 00:05:02.280 align:start position:0%
to do you know this many multiplications
right<00:04:58.210><c> 5</c><00:04:58.570><c> by</c><00:04:58.960><c> 5</c><00:04:59.290><c> by</c><00:05:00.130><c> 192</c><00:05:00.760><c> so</c><00:05:01.690><c> the</c><00:05:01.840><c> total</c><00:05:02.080><c> number</c>

00:05:02.280 --> 00:05:02.290 align:start position:0%
right 5 by 5 by 192 so the total number
 

00:05:02.290 --> 00:05:05.040 align:start position:0%
right 5 by 5 by 192 so the total number
multiplies<00:05:03.010><c> you</c><00:05:03.250><c> need</c><00:05:03.430><c> is</c><00:05:03.760><c> the</c><00:05:04.630><c> number</c><00:05:04.960><c> of</c>

00:05:05.040 --> 00:05:05.050 align:start position:0%
multiplies you need is the number of
 

00:05:05.050 --> 00:05:07.050 align:start position:0%
multiplies you need is the number of
multiplies<00:05:05.530><c> you</c><00:05:05.740><c> need</c><00:05:05.950><c> to</c><00:05:06.130><c> compute</c><00:05:06.460><c> each</c><00:05:06.729><c> of</c>

00:05:07.050 --> 00:05:07.060 align:start position:0%
multiplies you need to compute each of
 

00:05:07.060 --> 00:05:09.900 align:start position:0%
multiplies you need to compute each of
the<00:05:07.360><c> output</c><00:05:07.840><c> values</c><00:05:08.320><c> times</c><00:05:09.040><c> the</c><00:05:09.580><c> number</c><00:05:09.880><c> of</c>

00:05:09.900 --> 00:05:09.910 align:start position:0%
the output values times the number of
 

00:05:09.910 --> 00:05:13.500 align:start position:0%
the output values times the number of
output<00:05:10.330><c> values</c><00:05:10.750><c> you</c><00:05:11.169><c> need</c><00:05:11.380><c> to</c><00:05:11.530><c> compute</c><00:05:11.950><c> and</c><00:05:12.510><c> if</c>

00:05:13.500 --> 00:05:13.510 align:start position:0%
output values you need to compute and if
 

00:05:13.510 --> 00:05:15.390 align:start position:0%
output values you need to compute and if
you<00:05:13.600><c> multiply</c><00:05:13.780><c> out</c><00:05:14.290><c> all</c><00:05:14.500><c> these</c><00:05:14.680><c> numbers</c><00:05:15.160><c> this</c>

00:05:15.390 --> 00:05:15.400 align:start position:0%
you multiply out all these numbers this
 

00:05:15.400 --> 00:05:21.270 align:start position:0%
you multiply out all these numbers this
is<00:05:15.580><c> equal</c><00:05:15.940><c> to</c><00:05:16.800><c> 120</c><00:05:17.800><c> million</c><00:05:18.180><c> and</c><00:05:19.180><c> so</c><00:05:20.130><c> while</c><00:05:21.130><c> you</c>

00:05:21.270 --> 00:05:21.280 align:start position:0%
is equal to 120 million and so while you
 

00:05:21.280 --> 00:05:23.670 align:start position:0%
is equal to 120 million and so while you
can<00:05:21.490><c> do</c><00:05:21.669><c> 120</c><00:05:22.479><c> million</c><00:05:22.690><c> multiplies</c><00:05:23.350><c> on</c><00:05:23.620><c> the</c>

00:05:23.670 --> 00:05:23.680 align:start position:0%
can do 120 million multiplies on the
 

00:05:23.680 --> 00:05:25.920 align:start position:0%
can do 120 million multiplies on the
modern<00:05:24.039><c> computer</c><00:05:24.580><c> this</c><00:05:24.880><c> is</c><00:05:24.940><c> still</c><00:05:25.360><c> a</c><00:05:25.389><c> pretty</c>

00:05:25.920 --> 00:05:25.930 align:start position:0%
modern computer this is still a pretty
 

00:05:25.930 --> 00:05:28.560 align:start position:0%
modern computer this is still a pretty
expensive<00:05:26.289><c> operation</c><00:05:27.160><c> on</c><00:05:27.370><c> the</c><00:05:27.910><c> next</c><00:05:28.240><c> line</c><00:05:28.389><c> you</c>

00:05:28.560 --> 00:05:28.570 align:start position:0%
expensive operation on the next line you
 

00:05:28.570 --> 00:05:31.440 align:start position:0%
expensive operation on the next line you
see<00:05:28.870><c> how</c><00:05:29.169><c> using</c><00:05:29.889><c> the</c><00:05:30.070><c> idea</c><00:05:30.430><c> of</c><00:05:30.700><c> one-by-one</c>

00:05:31.440 --> 00:05:31.450 align:start position:0%
see how using the idea of one-by-one
 

00:05:31.450 --> 00:05:33.150 align:start position:0%
see how using the idea of one-by-one
convolutions<00:05:32.200><c> which</c><00:05:32.560><c> you</c><00:05:32.680><c> learned</c><00:05:32.860><c> about</c><00:05:32.979><c> in</c>

00:05:33.150 --> 00:05:33.160 align:start position:0%
convolutions which you learned about in
 

00:05:33.160 --> 00:05:34.920 align:start position:0%
convolutions which you learned about in
the<00:05:33.220><c> previous</c><00:05:33.280><c> video</c><00:05:33.789><c> you'd</c><00:05:34.600><c> be</c><00:05:34.750><c> able</c><00:05:34.810><c> to</c>

00:05:34.920 --> 00:05:34.930 align:start position:0%
the previous video you'd be able to
 

00:05:34.930 --> 00:05:37.710 align:start position:0%
the previous video you'd be able to
reduce<00:05:35.289><c> the</c><00:05:35.530><c> computational</c><00:05:35.830><c> cost</c><00:05:36.520><c> by</c><00:05:37.210><c> about</c><00:05:37.660><c> a</c>

00:05:37.710 --> 00:05:37.720 align:start position:0%
reduce the computational cost by about a
 

00:05:37.720 --> 00:05:40.740 align:start position:0%
reduce the computational cost by about a
factor<00:05:37.990><c> of</c><00:05:38.229><c> 10</c><00:05:38.350><c> to</c><00:05:38.860><c> go</c><00:05:39.010><c> from</c><00:05:39.310><c> about</c><00:05:39.820><c> 120</c>

00:05:40.740 --> 00:05:40.750 align:start position:0%
factor of 10 to go from about 120
 

00:05:40.750 --> 00:05:43.560 align:start position:0%
factor of 10 to go from about 120
million<00:05:40.990><c> multiplies</c><00:05:41.620><c> to</c><00:05:42.130><c> about</c><00:05:42.849><c> one</c><00:05:43.090><c> tenth</c><00:05:43.389><c> of</c>

00:05:43.560 --> 00:05:43.570 align:start position:0%
million multiplies to about one tenth of
 

00:05:43.570 --> 00:05:47.490 align:start position:0%
million multiplies to about one tenth of
that<00:05:44.280><c> so</c><00:05:45.280><c> please</c><00:05:45.460><c> remember</c><00:05:45.820><c> the</c><00:05:46.090><c> number</c><00:05:46.500><c> 120</c>

00:05:47.490 --> 00:05:47.500 align:start position:0%
that so please remember the number 120
 

00:05:47.500 --> 00:05:49.650 align:start position:0%
that so please remember the number 120
so<00:05:47.710><c> you</c><00:05:47.800><c> can</c><00:05:47.950><c> compare</c><00:05:48.340><c> it</c><00:05:48.520><c> with</c><00:05:48.550><c> what</c><00:05:49.300><c> you</c><00:05:49.330><c> see</c>

00:05:49.650 --> 00:05:49.660 align:start position:0%
so you can compare it with what you see
 

00:05:49.660 --> 00:05:51.860 align:start position:0%
so you can compare it with what you see
on<00:05:49.930><c> the</c><00:05:50.169><c> next</c><00:05:50.380><c> slide</c><00:05:50.560><c> hundred</c><00:05:51.130><c> twenty</c><00:05:51.400><c> million</c>

00:05:51.860 --> 00:05:51.870 align:start position:0%
on the next slide hundred twenty million
 

00:05:51.870 --> 00:05:55.589 align:start position:0%
on the next slide hundred twenty million
here's<00:05:52.870><c> an</c><00:05:53.460><c> alternative</c><00:05:54.460><c> architecture</c><00:05:55.270><c> for</c>

00:05:55.589 --> 00:05:55.599 align:start position:0%
here's an alternative architecture for
 

00:05:55.599 --> 00:05:58.560 align:start position:0%
here's an alternative architecture for
inputting<00:05:56.169><c> to</c><00:05:56.919><c> an</c><00:05:56.979><c> 8</c><00:05:57.130><c> by</c><00:05:57.280><c> 20</c><00:05:57.580><c> by</c><00:05:57.700><c> 192</c><00:05:58.240><c> and</c>

00:05:58.560 --> 00:05:58.570 align:start position:0%
inputting to an 8 by 20 by 192 and
 

00:05:58.570 --> 00:06:02.460 align:start position:0%
inputting to an 8 by 20 by 192 and
outputting<00:05:59.229><c> to</c><00:05:59.590><c> an</c><00:05:59.979><c> 8</c><00:06:00.099><c> by</c><00:06:00.250><c> 20</c><00:06:00.550><c> by</c><00:06:00.760><c> 32</c><00:06:01.440><c> which</c><00:06:02.440><c> is</c>

00:06:02.460 --> 00:06:02.470 align:start position:0%
outputting to an 8 by 20 by 32 which is
 

00:06:02.470 --> 00:06:04.830 align:start position:0%
outputting to an 8 by 20 by 32 which is
following<00:06:02.919><c> your</c><00:06:03.280><c> going</c><00:06:03.460><c> to</c><00:06:03.520><c> input</c><00:06:03.760><c> the</c><00:06:04.240><c> volume</c>

00:06:04.830 --> 00:06:04.840 align:start position:0%
following your going to input the volume
 

00:06:04.840 --> 00:06:09.120 align:start position:0%
following your going to input the volume
use<00:06:05.650><c> a</c><00:06:05.680><c> 1</c><00:06:05.979><c> by</c><00:06:06.010><c> 1</c><00:06:06.180><c> convolution</c><00:06:07.349><c> to</c><00:06:08.349><c> reduce</c><00:06:08.800><c> the</c>

00:06:09.120 --> 00:06:09.130 align:start position:0%
use a 1 by 1 convolution to reduce the
 

00:06:09.130 --> 00:06:13.710 align:start position:0%
use a 1 by 1 convolution to reduce the
volume<00:06:09.310><c> to</c><00:06:10.060><c> a</c><00:06:10.979><c> 16</c><00:06:11.979><c> channels</c><00:06:12.550><c> instead</c><00:06:12.849><c> of</c><00:06:12.940><c> 192</c>

00:06:13.710 --> 00:06:13.720 align:start position:0%
volume to a 16 channels instead of 192
 

00:06:13.720 --> 00:06:16.379 align:start position:0%
volume to a 16 channels instead of 192
channels<00:06:14.169><c> and</c><00:06:14.440><c> then</c><00:06:15.280><c> on</c><00:06:15.580><c> this</c><00:06:15.910><c> much</c><00:06:16.180><c> smaller</c>

00:06:16.379 --> 00:06:16.389 align:start position:0%
channels and then on this much smaller
 

00:06:16.389 --> 00:06:19.950 align:start position:0%
channels and then on this much smaller
volume<00:06:16.870><c> run</c><00:06:17.770><c> your</c><00:06:17.919><c> 5</c><00:06:18.130><c> by</c><00:06:18.280><c> 5</c><00:06:18.490><c> convolution</c><00:06:19.270><c> to</c>

00:06:19.950 --> 00:06:19.960 align:start position:0%
volume run your 5 by 5 convolution to
 

00:06:19.960 --> 00:06:22.680 align:start position:0%
volume run your 5 by 5 convolution to
give<00:06:20.169><c> you</c><00:06:20.349><c> your</c><00:06:21.039><c> final</c><00:06:21.520><c> output</c><00:06:21.639><c> so</c><00:06:22.150><c> notice</c><00:06:22.599><c> the</c>

00:06:22.680 --> 00:06:22.690 align:start position:0%
give you your final output so notice the
 

00:06:22.690 --> 00:06:24.270 align:start position:0%
give you your final output so notice the
input<00:06:23.020><c> and</c><00:06:23.110><c> output</c><00:06:23.229><c> dimensions</c><00:06:23.860><c> are</c><00:06:24.039><c> still</c>

00:06:24.270 --> 00:06:24.280 align:start position:0%
input and output dimensions are still
 

00:06:24.280 --> 00:06:27.150 align:start position:0%
input and output dimensions are still
the<00:06:24.430><c> same</c><00:06:24.610><c> you</c><00:06:24.789><c> input</c><00:06:25.110><c> Tony</c><00:06:26.110><c> by</c><00:06:26.260><c> 20</c><00:06:26.530><c> but</c><00:06:26.680><c> 182</c>

00:06:27.150 --> 00:06:27.160 align:start position:0%
the same you input Tony by 20 but 182
 

00:06:27.160 --> 00:06:32.250 align:start position:0%
the same you input Tony by 20 but 182
and<00:06:27.370><c> output</c><00:06:28.320><c> Tony</c><00:06:29.320><c> by</c><00:06:29.500><c> 20</c><00:06:29.830><c> by</c><00:06:30.280><c> 32</c><00:06:30.940><c> same</c><00:06:31.720><c> as</c><00:06:31.960><c> the</c>

00:06:32.250 --> 00:06:32.260 align:start position:0%
and output Tony by 20 by 32 same as the
 

00:06:32.260 --> 00:06:34.620 align:start position:0%
and output Tony by 20 by 32 same as the
previous<00:06:32.680><c> slide</c><00:06:32.849><c> but</c><00:06:33.849><c> what</c><00:06:34.060><c> we've</c><00:06:34.180><c> done</c><00:06:34.210><c> is</c>

00:06:34.620 --> 00:06:34.630 align:start position:0%
previous slide but what we've done is
 

00:06:34.630 --> 00:06:36.750 align:start position:0%
previous slide but what we've done is
we're<00:06:34.900><c> taking</c><00:06:35.020><c> this</c><00:06:35.320><c> huge</c><00:06:35.650><c> volley</c><00:06:36.039><c> we</c><00:06:36.310><c> had</c><00:06:36.520><c> on</c>

00:06:36.750 --> 00:06:36.760 align:start position:0%
we're taking this huge volley we had on
 

00:06:36.760 --> 00:06:38.970 align:start position:0%
we're taking this huge volley we had on
the<00:06:36.880><c> left</c><00:06:37.060><c> and</c><00:06:37.390><c> we'll</c><00:06:37.930><c> shrunk</c><00:06:38.349><c> it</c><00:06:38.530><c> to</c>

00:06:38.970 --> 00:06:38.980 align:start position:0%
the left and we'll shrunk it to
 

00:06:38.980 --> 00:06:42.030 align:start position:0%
the left and we'll shrunk it to
this<00:06:39.100><c> much</c><00:06:39.640><c> smaller</c><00:06:40.560><c> intermediate</c><00:06:41.560><c> volume</c>

00:06:42.030 --> 00:06:42.040 align:start position:0%
this much smaller intermediate volume
 

00:06:42.040 --> 00:06:45.090 align:start position:0%
this much smaller intermediate volume
which<00:06:42.370><c> is</c><00:06:42.520><c> only</c><00:06:42.730><c> has</c><00:06:43.720><c> 16</c><00:06:44.290><c> instead</c><00:06:44.710><c> of</c><00:06:44.800><c> hundred</c>

00:06:45.090 --> 00:06:45.100 align:start position:0%
which is only has 16 instead of hundred
 

00:06:45.100 --> 00:06:46.530 align:start position:0%
which is only has 16 instead of hundred
ninety-two<00:06:45.430><c> channels</c>

00:06:46.530 --> 00:06:46.540 align:start position:0%
ninety-two channels
 

00:06:46.540 --> 00:06:49.760 align:start position:0%
ninety-two channels
sometimes<00:06:47.440><c> this</c><00:06:47.590><c> is</c><00:06:47.740><c> called</c><00:06:48.010><c> a</c><00:06:48.390><c> bottleneck</c>

00:06:49.760 --> 00:06:49.770 align:start position:0%
sometimes this is called a bottleneck
 

00:06:49.770 --> 00:06:57.180 align:start position:0%
sometimes this is called a bottleneck
there<00:06:54.420><c> all</c><00:06:55.420><c> right</c><00:06:55.510><c> I</c><00:06:55.570><c> guess</c><00:06:56.010><c> because</c><00:06:57.010><c> a</c>

00:06:57.180 --> 00:06:57.190 align:start position:0%
there all right I guess because a
 

00:06:57.190 --> 00:06:59.250 align:start position:0%
there all right I guess because a
bottleneck<00:06:57.850><c> is</c><00:06:58.060><c> usually</c><00:06:58.390><c> the</c><00:06:58.510><c> smallest</c><00:06:58.870><c> part</c>

00:06:59.250 --> 00:06:59.260 align:start position:0%
bottleneck is usually the smallest part
 

00:06:59.260 --> 00:07:01.140 align:start position:0%
bottleneck is usually the smallest part
of<00:06:59.350><c> something</c><00:06:59.710><c> right</c><00:06:59.920><c> so</c><00:07:00.130><c> I</c><00:07:00.160><c> guess</c><00:07:00.340><c> if</c><00:07:00.550><c> you</c>

00:07:01.140 --> 00:07:01.150 align:start position:0%
of something right so I guess if you
 

00:07:01.150 --> 00:07:04.730 align:start position:0%
of something right so I guess if you
have<00:07:01.390><c> a</c><00:07:01.420><c> glass</c><00:07:02.380><c> bottle</c><00:07:02.920><c> that</c><00:07:03.160><c> looks</c><00:07:03.370><c> like</c><00:07:03.520><c> this</c>

00:07:04.730 --> 00:07:04.740 align:start position:0%
have a glass bottle that looks like this
 

00:07:04.740 --> 00:07:07.470 align:start position:0%
have a glass bottle that looks like this
then<00:07:05.740><c> you</c><00:07:05.770><c> know</c><00:07:06.100><c> this</c><00:07:06.730><c> is</c><00:07:06.790><c> Vegas</c><00:07:07.030><c> where</c><00:07:07.360><c> the</c>

00:07:07.470 --> 00:07:07.480 align:start position:0%
then you know this is Vegas where the
 

00:07:07.480 --> 00:07:11.310 align:start position:0%
then you know this is Vegas where the
core<00:07:07.810><c> goes</c><00:07:08.850><c> then</c><00:07:09.850><c> the</c><00:07:10.000><c> bottleneck</c><00:07:10.570><c> is</c><00:07:10.930><c> the</c>

00:07:11.310 --> 00:07:11.320 align:start position:0%
core goes then the bottleneck is the
 

00:07:11.320 --> 00:07:14.640 align:start position:0%
core goes then the bottleneck is the
smallest<00:07:11.920><c> part</c><00:07:12.310><c> of</c><00:07:12.550><c> this</c><00:07:12.700><c> bottle</c><00:07:13.270><c> so</c><00:07:13.510><c> the</c><00:07:14.440><c> same</c>

00:07:14.640 --> 00:07:14.650 align:start position:0%
smallest part of this bottle so the same
 

00:07:14.650 --> 00:07:16.680 align:start position:0%
smallest part of this bottle so the same
way<00:07:14.830><c> the</c><00:07:15.130><c> bottleneck</c><00:07:15.670><c> layer</c><00:07:15.940><c> is</c><00:07:16.240><c> the</c><00:07:16.360><c> smallest</c>

00:07:16.680 --> 00:07:16.690 align:start position:0%
way the bottleneck layer is the smallest
 

00:07:16.690 --> 00:07:18.690 align:start position:0%
way the bottleneck layer is the smallest
part<00:07:17.080><c> of</c><00:07:17.230><c> this</c><00:07:17.350><c> network</c><00:07:17.800><c> we</c><00:07:18.160><c> shrink</c><00:07:18.520><c> the</c>

00:07:18.690 --> 00:07:18.700 align:start position:0%
part of this network we shrink the
 

00:07:18.700 --> 00:07:21.390 align:start position:0%
part of this network we shrink the
representation<00:07:19.360><c> before</c><00:07:20.040><c> increasing</c><00:07:21.040><c> the</c>

00:07:21.390 --> 00:07:21.400 align:start position:0%
representation before increasing the
 

00:07:21.400 --> 00:07:24.660 align:start position:0%
representation before increasing the
size<00:07:21.640><c> again</c><00:07:22.440><c> now</c><00:07:23.440><c> let's</c><00:07:23.800><c> look</c><00:07:24.070><c> at</c><00:07:24.310><c> the</c>

00:07:24.660 --> 00:07:24.670 align:start position:0%
size again now let's look at the
 

00:07:24.670 --> 00:07:27.840 align:start position:0%
size again now let's look at the
computational<00:07:25.510><c> cost</c><00:07:25.750><c> involved</c><00:07:26.460><c> to</c><00:07:27.460><c> apply</c>

00:07:27.840 --> 00:07:27.850 align:start position:0%
computational cost involved to apply
 

00:07:27.850 --> 00:07:31.500 align:start position:0%
computational cost involved to apply
this<00:07:28.140><c> one-by-one</c><00:07:29.140><c> convolution</c><00:07:29.920><c> we</c><00:07:30.910><c> have</c><00:07:31.060><c> 16</c>

00:07:31.500 --> 00:07:31.510 align:start position:0%
this one-by-one convolution we have 16
 

00:07:31.510 --> 00:07:34.110 align:start position:0%
this one-by-one convolution we have 16
filters<00:07:32.020><c> each</c><00:07:32.860><c> of</c><00:07:33.040><c> the</c><00:07:33.100><c> filters</c><00:07:33.490><c> is</c><00:07:33.760><c> going</c><00:07:34.000><c> to</c>

00:07:34.110 --> 00:07:34.120 align:start position:0%
filters each of the filters is going to
 

00:07:34.120 --> 00:07:38.130 align:start position:0%
filters each of the filters is going to
be<00:07:34.240><c> of</c><00:07:34.450><c> dimension</c><00:07:35.050><c> 1</c><00:07:35.620><c> by</c><00:07:35.800><c> 1</c><00:07:36.070><c> by</c><00:07:36.250><c> 192</c><00:07:36.880><c> this</c><00:07:37.450><c> 192</c>

00:07:38.130 --> 00:07:38.140 align:start position:0%
be of dimension 1 by 1 by 192 this 192
 

00:07:38.140 --> 00:07:41.520 align:start position:0%
be of dimension 1 by 1 by 192 this 192
matches<00:07:38.950><c> that</c><00:07:39.130><c> 192</c><00:07:39.880><c> and</c><00:07:40.180><c> so</c><00:07:40.810><c> the</c><00:07:40.930><c> cost</c><00:07:41.290><c> of</c>

00:07:41.520 --> 00:07:41.530 align:start position:0%
matches that 192 and so the cost of
 

00:07:41.530 --> 00:07:44.430 align:start position:0%
matches that 192 and so the cost of
computing<00:07:42.070><c> this</c><00:07:42.310><c> 20</c><00:07:42.700><c> by</c><00:07:42.910><c> 20</c><00:07:43.240><c> by</c><00:07:43.420><c> 16</c><00:07:43.840><c> volume</c><00:07:44.350><c> is</c>

00:07:44.430 --> 00:07:44.440 align:start position:0%
computing this 20 by 20 by 16 volume is
 

00:07:44.440 --> 00:07:46.650 align:start position:0%
computing this 20 by 20 by 16 volume is
going<00:07:44.620><c> to</c><00:07:44.710><c> be</c><00:07:44.850><c> well</c><00:07:45.850><c> you</c><00:07:45.880><c> need</c><00:07:46.270><c> this</c><00:07:46.480><c> many</c>

00:07:46.650 --> 00:07:46.660 align:start position:0%
going to be well you need this many
 

00:07:46.660 --> 00:07:50.820 align:start position:0%
going to be well you need this many
outputs<00:07:47.230><c> and</c><00:07:48.180><c> for</c><00:07:49.180><c> each</c><00:07:49.360><c> of</c><00:07:49.540><c> them</c><00:07:49.750><c> you</c><00:07:50.440><c> need</c><00:07:50.680><c> to</c>

00:07:50.820 --> 00:07:50.830 align:start position:0%
outputs and for each of them you need to
 

00:07:50.830 --> 00:07:52.460 align:start position:0%
outputs and for each of them you need to
do

00:07:52.460 --> 00:07:52.470 align:start position:0%
do
 

00:07:52.470 --> 00:07:55.520 align:start position:0%
do
192<00:07:53.910><c> multiplications</c><00:07:54.910><c> I</c><00:07:54.970><c> could</c><00:07:55.120><c> have</c><00:07:55.240><c> written</c>

00:07:55.520 --> 00:07:55.530 align:start position:0%
192 multiplications I could have written
 

00:07:55.530 --> 00:07:59.100 align:start position:0%
192 multiplications I could have written
1<00:07:56.530><c> times</c><00:07:56.770><c> 1/5</c><00:07:57.190><c> times</c><00:07:57.430><c> 192</c><00:07:58.240><c> right</c><00:07:58.570><c> this</c><00:07:58.750><c> is</c><00:07:58.900><c> this</c>

00:07:59.100 --> 00:07:59.110 align:start position:0%
1 times 1/5 times 192 right this is this
 

00:07:59.110 --> 00:08:02.070 align:start position:0%
1 times 1/5 times 192 right this is this
and<00:07:59.500><c> if</c><00:07:59.980><c> you</c><00:08:00.040><c> multiply</c><00:08:00.220><c> this</c><00:08:00.490><c> out</c><00:08:00.790><c> this</c><00:08:01.060><c> is</c><00:08:01.120><c> 2.4</c>

00:08:02.070 --> 00:08:02.080 align:start position:0%
and if you multiply this out this is 2.4
 

00:08:02.080 --> 00:08:04.950 align:start position:0%
and if you multiply this out this is 2.4
under<00:08:02.530><c> the</c><00:08:02.650><c> n</c><00:08:02.740><c> is</c><00:08:02.830><c> about</c><00:08:02.920><c> 2.4</c><00:08:03.550><c> million</c><00:08:03.960><c> how</c>

00:08:04.950 --> 00:08:04.960 align:start position:0%
under the n is about 2.4 million how
 

00:08:04.960 --> 00:08:06.950 align:start position:0%
under the n is about 2.4 million how
about<00:08:05.140><c> the</c><00:08:05.320><c> second</c><00:08:05.710><c> so</c><00:08:05.890><c> that's</c><00:08:06.040><c> the</c><00:08:06.250><c> cost</c><00:08:06.520><c> of</c>

00:08:06.950 --> 00:08:06.960 align:start position:0%
about the second so that's the cost of
 

00:08:06.960 --> 00:08:12.390 align:start position:0%
about the second so that's the cost of
this<00:08:07.960><c> first</c><00:08:09.510><c> convolutional</c><00:08:10.510><c> layer</c><00:08:11.070><c> the</c><00:08:12.070><c> cost</c>

00:08:12.390 --> 00:08:12.400 align:start position:0%
this first convolutional layer the cost
 

00:08:12.400 --> 00:08:14.760 align:start position:0%
this first convolutional layer the cost
of<00:08:12.670><c> this</c><00:08:12.820><c> second</c><00:08:13.450><c> convolutional</c><00:08:14.170><c> layer</c><00:08:14.380><c> will</c>

00:08:14.760 --> 00:08:14.770 align:start position:0%
of this second convolutional layer will
 

00:08:14.770 --> 00:08:16.760 align:start position:0%
of this second convolutional layer will
be<00:08:14.890><c> that</c><00:08:15.100><c> well</c><00:08:15.550><c> you</c><00:08:15.760><c> have</c><00:08:15.910><c> this</c><00:08:16.060><c> many</c><00:08:16.300><c> outputs</c>

00:08:16.760 --> 00:08:16.770 align:start position:0%
be that well you have this many outputs
 

00:08:16.770 --> 00:08:22.170 align:start position:0%
be that well you have this many outputs
so<00:08:17.770><c> 20</c><00:08:18.100><c> by</c><00:08:18.220><c> 28</c><00:08:18.610><c> by</c><00:08:18.820><c> 32</c><00:08:19.800><c> and</c><00:08:20.800><c> then</c><00:08:21.520><c> for</c><00:08:21.820><c> each</c><00:08:22.000><c> of</c>

00:08:22.170 --> 00:08:22.180 align:start position:0%
so 20 by 28 by 32 and then for each of
 

00:08:22.180 --> 00:08:25.350 align:start position:0%
so 20 by 28 by 32 and then for each of
the<00:08:22.270><c> outputs</c><00:08:22.720><c> you</c><00:08:23.080><c> have</c><00:08:23.350><c> to</c><00:08:23.500><c> apply</c><00:08:23.770><c> a</c><00:08:24.220><c> 5</c><00:08:25.120><c> by</c><00:08:25.330><c> 5</c>

00:08:25.350 --> 00:08:25.360 align:start position:0%
the outputs you have to apply a 5 by 5
 

00:08:25.360 --> 00:08:29.730 align:start position:0%
the outputs you have to apply a 5 by 5
by<00:08:26.260><c> 16</c><00:08:26.740><c> dimensional</c><00:08:27.430><c> filter</c><00:08:27.850><c> and</c><00:08:28.690><c> so</c><00:08:29.050><c> 5</c><00:08:29.290><c> by</c><00:08:29.500><c> 5</c>

00:08:29.730 --> 00:08:29.740 align:start position:0%
by 16 dimensional filter and so 5 by 5
 

00:08:29.740 --> 00:08:33.990 align:start position:0%
by 16 dimensional filter and so 5 by 5
by<00:08:30.550><c> 16</c><00:08:30.910><c> and</c><00:08:31.600><c> you</c><00:08:31.810><c> multiply</c><00:08:32.349><c> that</c><00:08:32.620><c> out</c><00:08:32.680><c> is</c><00:08:33.580><c> equal</c>

00:08:33.990 --> 00:08:34.000 align:start position:0%
by 16 and you multiply that out is equal
 

00:08:34.000 --> 00:08:38.040 align:start position:0%
by 16 and you multiply that out is equal
to<00:08:35.070><c> 10.0</c><00:08:36.070><c> and</c><00:08:36.370><c> so</c><00:08:37.180><c> the</c><00:08:37.330><c> total</c><00:08:37.540><c> number</c><00:08:37.720><c> of</c>

00:08:38.040 --> 00:08:38.050 align:start position:0%
to 10.0 and so the total number of
 

00:08:38.050 --> 00:08:40.290 align:start position:0%
to 10.0 and so the total number of
multiplications<00:08:38.740><c> you</c><00:08:38.860><c> need</c><00:08:39.010><c> to</c><00:08:39.099><c> do</c><00:08:39.280><c> is</c><00:08:39.550><c> the</c>

00:08:40.290 --> 00:08:40.300 align:start position:0%
multiplications you need to do is the
 

00:08:40.300 --> 00:08:42.839 align:start position:0%
multiplications you need to do is the
sum<00:08:40.599><c> of</c><00:08:40.630><c> those</c><00:08:40.870><c> which</c><00:08:41.320><c> is</c><00:08:41.530><c> twelve</c><00:08:42.310><c> point</c><00:08:42.580><c> four</c>

00:08:42.839 --> 00:08:42.849 align:start position:0%
sum of those which is twelve point four
 

00:08:42.849 --> 00:08:45.840 align:start position:0%
sum of those which is twelve point four
million<00:08:43.710><c> multiplications</c><00:08:44.710><c> and</c><00:08:44.980><c> you</c><00:08:45.430><c> compare</c>

00:08:45.840 --> 00:08:45.850 align:start position:0%
million multiplications and you compare
 

00:08:45.850 --> 00:08:46.980 align:start position:0%
million multiplications and you compare
this<00:08:46.030><c> with</c><00:08:46.090><c> what</c><00:08:46.270><c> we</c><00:08:46.510><c> had</c><00:08:46.690><c> on</c><00:08:46.720><c> the</c><00:08:46.960><c> previous</c>

00:08:46.980 --> 00:08:46.990 align:start position:0%
this with what we had on the previous
 

00:08:46.990 --> 00:08:49.620 align:start position:0%
this with what we had on the previous
slide<00:08:47.380><c> you</c><00:08:47.860><c> reduce</c><00:08:48.760><c> the</c><00:08:48.910><c> computational</c><00:08:49.150><c> cost</c>

00:08:49.620 --> 00:08:49.630 align:start position:0%
slide you reduce the computational cost
 

00:08:49.630 --> 00:08:52.140 align:start position:0%
slide you reduce the computational cost
from<00:08:49.990><c> about</c><00:08:50.890><c> 120</c><00:08:51.700><c> million</c>

00:08:52.140 --> 00:08:52.150 align:start position:0%
from about 120 million
 

00:08:52.150 --> 00:08:55.830 align:start position:0%
from about 120 million
flies<00:08:52.600><c> down</c><00:08:53.470><c> to</c><00:08:53.890><c> about</c><00:08:54.730><c> one</c><00:08:54.970><c> tenth</c><00:08:55.240><c> of</c><00:08:55.390><c> that</c><00:08:55.450><c> to</c>

00:08:55.830 --> 00:08:55.840 align:start position:0%
flies down to about one tenth of that to
 

00:08:55.840 --> 00:08:57.440 align:start position:0%
flies down to about one tenth of that to
twelve<00:08:56.170><c> point</c><00:08:56.410><c> four</c><00:08:56.560><c> million</c>

00:08:57.440 --> 00:08:57.450 align:start position:0%
twelve point four million
 

00:08:57.450 --> 00:09:00.810 align:start position:0%
twelve point four million
multiplications<00:08:58.450><c> oh</c><00:08:59.310><c> and</c><00:09:00.310><c> the</c><00:09:00.490><c> number</c><00:09:00.760><c> of</c>

00:09:00.810 --> 00:09:00.820 align:start position:0%
multiplications oh and the number of
 

00:09:00.820 --> 00:09:03.780 align:start position:0%
multiplications oh and the number of
additions<00:09:01.330><c> you</c><00:09:01.450><c> need</c><00:09:01.630><c> to</c><00:09:01.750><c> do</c><00:09:01.930><c> is</c><00:09:02.110><c> about</c><00:09:02.790><c> very</c>

00:09:03.780 --> 00:09:03.790 align:start position:0%
additions you need to do is about very
 

00:09:03.790 --> 00:09:05.640 align:start position:0%
additions you need to do is about very
similar<00:09:04.120><c> to</c><00:09:04.420><c> the</c><00:09:04.480><c> number</c><00:09:04.660><c> of</c><00:09:04.870><c> multiplications</c>

00:09:05.640 --> 00:09:05.650 align:start position:0%
similar to the number of multiplications
 

00:09:05.650 --> 00:09:07.140 align:start position:0%
similar to the number of multiplications
you<00:09:05.800><c> need</c><00:09:05.980><c> to</c><00:09:06.070><c> do</c><00:09:06.250><c> so</c><00:09:06.550><c> that's</c><00:09:06.790><c> why</c><00:09:06.970><c> I'm</c><00:09:07.120><c> just</c>

00:09:07.140 --> 00:09:07.150 align:start position:0%
you need to do so that's why I'm just
 

00:09:07.150 --> 00:09:10.100 align:start position:0%
you need to do so that's why I'm just
counting<00:09:07.810><c> the</c><00:09:08.260><c> number</c><00:09:08.290><c> of</c><00:09:08.650><c> multiplications</c>

00:09:10.100 --> 00:09:10.110 align:start position:0%
counting the number of multiplications
 

00:09:10.110 --> 00:09:13.170 align:start position:0%
counting the number of multiplications
so<00:09:11.110><c> to</c><00:09:11.170><c> summarize</c><00:09:11.950><c> if</c><00:09:12.400><c> you're</c><00:09:12.670><c> building</c><00:09:12.880><c> a</c>

00:09:13.170 --> 00:09:13.180 align:start position:0%
so to summarize if you're building a
 

00:09:13.180 --> 00:09:15.060 align:start position:0%
so to summarize if you're building a
layer<00:09:13.420><c> of</c><00:09:13.570><c> a</c><00:09:13.660><c> new</c><00:09:13.780><c> network</c><00:09:14.050><c> and</c><00:09:14.530><c> you</c><00:09:14.860><c> don't</c>

00:09:15.060 --> 00:09:15.070 align:start position:0%
layer of a new network and you don't
 

00:09:15.070 --> 00:09:17.370 align:start position:0%
layer of a new network and you don't
want<00:09:15.250><c> to</c><00:09:15.400><c> have</c><00:09:15.580><c> to</c><00:09:15.730><c> decide</c><00:09:16.090><c> do</c><00:09:16.330><c> you</c><00:09:16.420><c> want</c><00:09:16.630><c> a</c><00:09:16.780><c> one</c>

00:09:17.370 --> 00:09:17.380 align:start position:0%
want to have to decide do you want a one
 

00:09:17.380 --> 00:09:19.110 align:start position:0%
want to have to decide do you want a one
by<00:09:17.530><c> one</c><00:09:17.740><c> or</c><00:09:17.920><c> three</c><00:09:18.100><c> by</c><00:09:18.250><c> three</c><00:09:18.430><c> or</c><00:09:18.610><c> five</c><00:09:18.790><c> by</c><00:09:18.910><c> five</c>

00:09:19.110 --> 00:09:19.120 align:start position:0%
by one or three by three or five by five
 

00:09:19.120 --> 00:09:21.510 align:start position:0%
by one or three by three or five by five
were<00:09:19.240><c> pooling</c><00:09:19.570><c> layer</c><00:09:19.750><c> the</c><00:09:20.410><c> inception</c><00:09:20.950><c> module</c>

00:09:21.510 --> 00:09:21.520 align:start position:0%
were pooling layer the inception module
 

00:09:21.520 --> 00:09:24.000 align:start position:0%
were pooling layer the inception module
lets<00:09:21.790><c> you</c><00:09:21.940><c> say</c><00:09:22.150><c> let's</c><00:09:22.690><c> do</c><00:09:23.080><c> them</c><00:09:23.200><c> all</c><00:09:23.350><c> and</c><00:09:23.680><c> let's</c>

00:09:24.000 --> 00:09:24.010 align:start position:0%
lets you say let's do them all and let's
 

00:09:24.010 --> 00:09:26.610 align:start position:0%
lets you say let's do them all and let's
concatenate<00:09:24.430><c> the</c><00:09:24.820><c> results</c><00:09:25.330><c> and</c><00:09:25.510><c> then</c><00:09:26.200><c> we</c><00:09:26.380><c> ran</c>

00:09:26.610 --> 00:09:26.620 align:start position:0%
concatenate the results and then we ran
 

00:09:26.620 --> 00:09:28.860 align:start position:0%
concatenate the results and then we ran
to<00:09:26.800><c> the</c><00:09:26.920><c> problem</c><00:09:27.400><c> of</c><00:09:27.520><c> computational</c><00:09:28.300><c> cost</c><00:09:28.570><c> and</c>

00:09:28.860 --> 00:09:28.870 align:start position:0%
to the problem of computational cost and
 

00:09:28.870 --> 00:09:31.230 align:start position:0%
to the problem of computational cost and
which<00:09:28.960><c> you</c><00:09:29.080><c> saw</c><00:09:29.200><c> here</c><00:09:29.530><c> was</c><00:09:29.770><c> how</c><00:09:30.010><c> using</c><00:09:30.760><c> a</c><00:09:30.970><c> one</c>

00:09:31.230 --> 00:09:31.240 align:start position:0%
which you saw here was how using a one
 

00:09:31.240 --> 00:09:33.450 align:start position:0%
which you saw here was how using a one
by<00:09:31.420><c> one</c><00:09:31.660><c> convolution</c><00:09:32.320><c> you</c><00:09:32.770><c> can</c><00:09:32.920><c> create</c><00:09:33.190><c> this</c>

00:09:33.450 --> 00:09:33.460 align:start position:0%
by one convolution you can create this
 

00:09:33.460 --> 00:09:36.030 align:start position:0%
by one convolution you can create this
bottleneck<00:09:33.940><c> layer</c><00:09:34.330><c> thereby</c><00:09:35.200><c> reducing</c><00:09:35.860><c> the</c>

00:09:36.030 --> 00:09:36.040 align:start position:0%
bottleneck layer thereby reducing the
 

00:09:36.040 --> 00:09:38.970 align:start position:0%
bottleneck layer thereby reducing the
computational<00:09:36.610><c> cost</c><00:09:36.790><c> significantly</c><00:09:37.620><c> now</c><00:09:38.620><c> you</c>

00:09:38.970 --> 00:09:38.980 align:start position:0%
computational cost significantly now you
 

00:09:38.980 --> 00:09:41.010 align:start position:0%
computational cost significantly now you
might<00:09:39.130><c> be</c><00:09:39.160><c> wondering</c><00:09:39.430><c> does</c><00:09:39.940><c> shrinking</c><00:09:40.720><c> down</c>

00:09:41.010 --> 00:09:41.020 align:start position:0%
might be wondering does shrinking down
 

00:09:41.020 --> 00:09:43.560 align:start position:0%
might be wondering does shrinking down
the<00:09:41.440><c> representation</c><00:09:42.190><c> size</c><00:09:42.430><c> so</c><00:09:42.760><c> dramatic</c><00:09:43.300><c> does</c>

00:09:43.560 --> 00:09:43.570 align:start position:0%
the representation size so dramatic does
 

00:09:43.570 --> 00:09:46.170 align:start position:0%
the representation size so dramatic does
it<00:09:43.720><c> hurt</c><00:09:44.200><c> the</c><00:09:44.440><c> performance</c><00:09:45.070><c> of</c><00:09:45.310><c> your</c><00:09:45.370><c> neural</c>

00:09:46.170 --> 00:09:46.180 align:start position:0%
it hurt the performance of your neural
 

00:09:46.180 --> 00:09:48.870 align:start position:0%
it hurt the performance of your neural
network<00:09:46.540><c> it</c><00:09:47.020><c> turns</c><00:09:47.290><c> out</c><00:09:47.530><c> that</c><00:09:47.740><c> so</c><00:09:48.040><c> long</c><00:09:48.220><c> as</c><00:09:48.280><c> you</c>

00:09:48.870 --> 00:09:48.880 align:start position:0%
network it turns out that so long as you
 

00:09:48.880 --> 00:09:51.240 align:start position:0%
network it turns out that so long as you
implement<00:09:49.210><c> this</c><00:09:49.630><c> bottleneck</c><00:09:50.140><c> layer</c><00:09:50.530><c> so</c><00:09:51.160><c> the</c>

00:09:51.240 --> 00:09:51.250 align:start position:0%
implement this bottleneck layer so the
 

00:09:51.250 --> 00:09:54.360 align:start position:0%
implement this bottleneck layer so the
proven<00:09:51.550><c> reason</c><00:09:52.060><c> you</c><00:09:52.960><c> can</c><00:09:53.200><c> string</c><00:09:53.830><c> down</c><00:09:54.070><c> the</c>

00:09:54.360 --> 00:09:54.370 align:start position:0%
proven reason you can string down the
 

00:09:54.370 --> 00:09:56.910 align:start position:0%
proven reason you can string down the
representation<00:09:55.030><c> size</c><00:09:55.300><c> significantly</c><00:09:55.780><c> and</c><00:09:56.440><c> it</c>

00:09:56.910 --> 00:09:56.920 align:start position:0%
representation size significantly and it
 

00:09:56.920 --> 00:09:59.460 align:start position:0%
representation size significantly and it
doesn't<00:09:57.340><c> seem</c><00:09:57.550><c> to</c><00:09:57.760><c> hurt</c><00:09:57.970><c> the</c><00:09:58.420><c> performance</c><00:09:59.020><c> but</c>

00:09:59.460 --> 00:09:59.470 align:start position:0%
doesn't seem to hurt the performance but
 

00:09:59.470 --> 00:10:02.730 align:start position:0%
doesn't seem to hurt the performance but
saves<00:09:59.770><c> you</c><00:10:00.010><c> a</c><00:10:00.190><c> lot</c><00:10:00.550><c> of</c><00:10:00.610><c> computation</c><00:10:01.320><c> so</c><00:10:02.320><c> this</c>

00:10:02.730 --> 00:10:02.740 align:start position:0%
saves you a lot of computation so this
 

00:10:02.740 --> 00:10:05.550 align:start position:0%
saves you a lot of computation so this
is<00:10:02.920><c> the</c><00:10:03.070><c> key</c><00:10:03.430><c> of</c><00:10:03.700><c> the</c><00:10:04.150><c> these</c><00:10:04.750><c> are</c><00:10:05.050><c> the</c><00:10:05.320><c> key</c>

00:10:05.550 --> 00:10:05.560 align:start position:0%
is the key of the these are the key
 

00:10:05.560 --> 00:10:08.580 align:start position:0%
is the key of the these are the key
ideas<00:10:05.590><c> of</c><00:10:06.310><c> the</c><00:10:06.520><c> inception</c><00:10:06.940><c> module</c><00:10:07.630><c> let's</c><00:10:08.260><c> put</c>

00:10:08.580 --> 00:10:08.590 align:start position:0%
ideas of the inception module let's put
 

00:10:08.590 --> 00:10:10.800 align:start position:0%
ideas of the inception module let's put
them<00:10:08.710><c> together</c><00:10:08.860><c> and</c><00:10:09.490><c> in</c><00:10:09.700><c> the</c><00:10:09.790><c> next</c><00:10:10.000><c> video</c><00:10:10.180><c> show</c>

00:10:10.800 --> 00:10:10.810 align:start position:0%
them together and in the next video show
 

00:10:10.810 --> 00:10:13.410 align:start position:0%
them together and in the next video show
you<00:10:10.870><c> what</c><00:10:11.500><c> the</c><00:10:11.710><c> full</c><00:10:12.280><c> inception</c><00:10:13.030><c> network</c>

00:10:13.410 --> 00:10:13.420 align:start position:0%
you what the full inception network
 

00:10:13.420 --> 00:10:16.110 align:start position:0%
you what the full inception network
looks<00:10:13.900><c> like</c>

