WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:09.820
&gt;&gt; ALAMI: My name is Ossama Alami. I'm a developer
advocate at Google. I work on our Geospatial

00:00:09.820 --> 00:00:19.520
APIs, Google Maps, Google Earth. How many
of you were not in my session this morning?

00:00:19.520 --> 00:00:26.009
Okay, great. So, most of you were, that's
good. I'm going to build up on some of the

00:00:26.009 --> 00:00:35.050
stuff I talked about there. But if you weren't
you'll definitely learn something new. So,

00:00:35.050 --> 00:00:42.310
let's see. You can follow me on Twitter. It's
ossamaalami. And you should definitely follow

00:00:42.310 --> 00:00:48.290
googlemapsapi on Twitter as we tend to announce
a lot of things that way. What I want to talk

00:00:48.290 --> 00:00:54.340
about during this session is sort of a bit
of grab bag. We have a lot of different Geospecial

00:00:54.340 --> 00:01:02.809
APIs at Google and I'm trying to fit, you
know, about a year's worth of what's new into

00:01:02.809 --> 00:01:11.050
this one talk. In the earlier talk, I talked
a lot about Maps API v3. I'll touch about

00:01:11.050 --> 00:01:16.000
one other new feature in v3 and some of other
mapping APIs you may not know about. I will

00:01:16.000 --> 00:01:22.440
give you a very brief overview of all of our
Geo APIs. And then, Fusion Tables, which you

00:01:22.440 --> 00:01:27.240
probably haven't heard about, but is pretty
exciting. I'll talk about some new things

00:01:27.240 --> 00:01:35.170
in Latitude--I'm sorry, in Earth in KML and
the Latitude API. So, when you think about

00:01:35.170 --> 00:01:43.710
Google Geo or Google Maps, you probably think
about our JavaScript Maps API, which certainly

00:01:43.710 --> 00:01:51.810
it has the largest usage in all of our Geospatial
APIs. But we have more than just a JavaScript

00:01:51.810 --> 00:01:59.880
Maps API for let's call it "visual" rendering
of Geospatial data. We also have a Maps API

00:01:59.880 --> 00:02:06.560
for Flash. So for action script developers,
for developers who want to take advantage

00:02:06.560 --> 00:02:12.409
of the futures of Flash or who are programming
in that environment, we do have a mapping

00:02:12.409 --> 00:02:19.519
API that fits your needs. I don't know if
any of you are Flash developers or dabbled

00:02:19.519 --> 00:02:30.999
some. There is one cool feature in the Maps
API for Flash that is not in any of our other

00:02:30.999 --> 00:02:39.310
mapping APIs and that's the ability to do
a 3D perspective. So using the geographic

00:02:39.310 --> 00:02:48.980
or the graphic rendering capabilities of Flash
we are able to tilt the map and give some

00:02:48.980 --> 00:02:55.879
perspective. It's still a flat map but we're
able to tilt around, you know, camera angle

00:02:55.879 --> 00:03:01.069
and give the user some perspective. So this
is just a sample animating a drive down the

00:03:01.069 --> 00:03:09.129
coast of Australia, putting in--pulling in
some imagery from Panoramio. We also have

00:03:09.129 --> 00:03:16.810
a Static Maps API. This is sort of the most
basic mapping API that you can think of. It

00:03:16.810 --> 00:03:23.060
is just an HTTP get request. It returns an
image. If you've used the maps, the Static

00:03:23.060 --> 00:03:29.080
Maps API before, there are a couple new features;
the ability to Geo code inline, the ability

00:03:29.080 --> 00:03:34.249
to do custom markers. These are new features
we've added in the last year. A lot of people

00:03:34.249 --> 00:03:41.690
use the maps, the Static Maps API, for either
smartphone--or non-smartphones, phones that

00:03:41.690 --> 00:03:45.889
have a web browser but don't have a capable
web browser of rendering JavaScript. You still

00:03:45.889 --> 00:03:53.730
want to deliver a map to that device. Or when
you're map isn't part of your Core UI, right?

00:03:53.730 --> 00:03:58.919
It's some data off to the side that's interesting
to a user but you don't really expect the

00:03:58.919 --> 00:04:03.389
user to interact with it. The Static Maps
API is super fast because all it's doing is

00:04:03.389 --> 00:04:09.390
loading an image and rendering that, it's
not doing any sort of JavaScript. So, you

00:04:09.390 --> 00:04:17.280
see up here the URL is just maps.google.com/maps/API,
instead of JS to load the JavaScript Maps

00:04:17.280 --> 00:04:24.520
API at Static Map. And then the parameters
are all passed in via URL parameters right

00:04:24.520 --> 00:04:33.860
here. So if I change this to, for example,
zoom level 17 and make the map a little bit

00:04:33.860 --> 00:04:44.000
larger and say, "I want a hybrid map," I can
do that. Network is a little bit slow. And

00:04:44.000 --> 00:04:59.110
you can see I just generate that static image.
It's not a slippy map it's just an image.

00:04:59.110 --> 00:05:07.560
Oops. And we also have Earth API, so a way
to embed Earth in their browser and JavaScript

00:05:07.560 --> 00:05:11.660
or API around controlling that experience.
I'll talk about that a little bit later in

00:05:11.660 --> 00:05:21.729
this talk. What else is there? This is not
an exhaustive set of APIs that Google offers

00:05:21.729 --> 00:05:28.520
that have some sort of Geospatial component.
We have something like a hundred different

00:05:28.520 --> 00:05:36.340
developer products that Google currently develops
or as an API to of those, many of them have

00:05:36.340 --> 00:05:42.389
some sort of Geospatial component. These are
some you may not have heard of or some more

00:05:42.389 --> 00:05:54.199
of the commonly used ones. We have a web service
for some of our Geospatial services like Geocoding,

00:05:54.199 --> 00:05:59.721
Elevation and Directions. These are services
that are offered natively in the JavaScript

00:05:59.721 --> 00:06:06.139
Maps API and the Flash Maps API. But outside
of that, you can access these services via

00:06:06.139 --> 00:06:14.780
just a HTTP get request, pass in some URL
parameters, get the results back. Geocoding,

00:06:14.780 --> 00:06:21.349
I covered earlier in the earlier session.
But Elevation and Directions, both have some

00:06:21.349 --> 00:06:27.039
new features. For example, Elevation is an
entirely new API that we're offering. It lets

00:06:27.039 --> 00:06:33.680
you give us a latitude and longitude or a
polyline, and will return to you the elevation

00:06:33.680 --> 00:06:43.180
at that point, or if you're passing as a polyline,
the elevation along a sampling of that polyline.

00:06:43.180 --> 00:06:52.419
So you can now have access to Google's Elevation
data. Directions, in addition to adding an

00:06:52.419 --> 00:06:58.260
HTTP Direction Service, which is brand new
since May, we didn't have a web service to

00:06:58.260 --> 00:07:04.360
gain access to Directions. The Directions
service also does things like solving the

00:07:04.360 --> 00:07:11.870
traveling salesman problem. So, route optimization.
If you give it ten locations and say, "I want

00:07:11.870 --> 00:07:17.360
to walk between these ten. Give me the best
routes between these ten," it will optimize

00:07:17.360 --> 00:07:25.740
that to minimize the travel time. Fusion Tables,
I'll talk about later in this talk, as well

00:07:25.740 --> 00:07:34.849
as Latitude and KML. Panoramio is a image
hosting sites but it's purely focused on Geo

00:07:34.849 --> 00:07:41.800
tagged photos of high quality panoramic images
of a place. That's why that example earlier

00:07:41.800 --> 00:07:46.479
pulled an imagery fit from Panoramio because
everything there is Geo tagged and it's typically

00:07:46.479 --> 00:07:56.319
of high quality. And, of course, we also have
native Mapping APIs on the iPhone Map Kit,

00:07:56.319 --> 00:08:01.930
which is actually supported Apple, but uses
our data and Map View on Android, which is

00:08:01.930 --> 00:08:14.840
a native mapping API for Android. So, new
maps features. The most--so, we released a

00:08:14.840 --> 00:08:20.749
thing called Styled Maps in May and at Google
I/O. This enables you more control over the

00:08:20.749 --> 00:08:26.640
map than you have ever had before, more than
any other major mapping provider on the Web

00:08:26.640 --> 00:08:32.539
gives you. Before, you obviously had control
to play around with any--with the controls

00:08:32.539 --> 00:08:38.529
on the map, add your own control, style them
however you want. Now, we're giving you the

00:08:38.529 --> 00:08:48.230
ability to style the base map itself. So if
you look at this map, it is just San Francisco

00:08:48.230 --> 00:08:54.700
and the standard Google Map's look and feel.
But I'll run through a couple of different

00:08:54.700 --> 00:08:59.210
styling options. Here's a grayscale map. And
you see it's still a slippy map, it loads

00:08:59.210 --> 00:09:05.880
in new tiles. Here is one that's slightly
desaturated. I don't know if that comes across

00:09:05.880 --> 00:09:14.399
on the projector. Here's an ugly one. If you
noticed the difference between these two,

00:09:14.399 --> 00:09:17.820
not only are we giving you the ability to
style the map but we're also giving you the

00:09:17.820 --> 00:09:26.019
ability to remove features. So here, I have
non-major roads and here I don't. So, you

00:09:26.019 --> 00:09:34.990
can, A, style the entire map; B, remove features
on the map, and C, style specific features.

00:09:34.990 --> 00:09:40.183
So, you can change coloring of features only,
so if you wanted to change the color of the

00:09:40.183 --> 00:09:45.580
water or change the color of major roads.
Let's take a look at some examples of that.

00:09:45.580 --> 00:09:55.579
Here is sort of a nighttime feel map. Here,
I've turned all the parks pink and now all

00:09:55.579 --> 00:10:06.050
blue--all green. Here is just another sort
of look and feel to a map. So, why would you

00:10:06.050 --> 00:10:12.710
want to style the map other than it being,
you know, kind of cool? There are a couple

00:10:12.710 --> 00:10:20.149
of things that we think are really compelling
and really useful to have style maps for.

00:10:20.149 --> 00:10:26.949
One is if you're representing data on top
of the map, let's say you're putting polygons

00:10:26.949 --> 00:10:33.380
on the map and you want to, you know, let's
say that they're polygons representing--polygons

00:10:33.380 --> 00:10:38.089
of different shade representing some sort
of intensity, right, and you're showcasing

00:10:38.089 --> 00:10:43.630
a big area like the entire country of Brazil,
it doesn't really make a lot of sense for

00:10:43.630 --> 00:10:49.420
you to have local roads on the map. It just
takes away from what you're trying to get

00:10:49.420 --> 00:10:56.740
across. So by enabling you to remove features,
you can let your data whatever your mash up

00:10:56.740 --> 00:11:03.860
is, rise to the surface, gain more visibility,
and become more usable. The other reason is

00:11:03.860 --> 00:11:09.060
if you want to fit a look and feel of a brand,
right? So you don't--you no longer have the--have

00:11:09.060 --> 00:11:15.190
the look and feel of our Google Maps brand,
you can have a look and feel of whatever brand

00:11:15.190 --> 00:11:32.570
you want to represent. Oops. Here is one highlighting
transit routes. And here is one, for example,

00:11:32.570 --> 00:11:42.810
where I just turned everything, the--all the
landmass to this gray color and everything

00:11:42.810 --> 00:11:48.470
else black. So, a lot of different options.
Pretty powerful. And I'll show you what this

00:11:48.470 --> 00:11:57.610
code looks like. Well, first of all, we give
you option for styling to change the saturation,

00:11:57.610 --> 00:12:02.509
the gamma, the lightness, the hue and it just
invert the lightness. So what does this code

00:12:02.509 --> 00:12:10.980
look like? It's basically just a style array.
Here, what I'm doing is I am taking--I'm saying

00:12:10.980 --> 00:12:17.459
for local roads, for the geometry of those
local roads, change the hue to this green

00:12:17.459 --> 00:12:26.511
color and change the saturation, I want it
100% saturated. So, element type, such as

00:12:26.511 --> 00:12:31.440
geometry, the other things that that could
be are labels or both geometry and labels,

00:12:31.440 --> 00:12:38.740
so you can style the labels separately from
the geometry. And here, I'm doing landscape

00:12:38.740 --> 00:12:43.570
geometry, changing the hue. I can also turn
features on and off. So I basically build

00:12:43.570 --> 00:12:52.500
this style array and I create a new styled
map type in the Maps API v3. And I pass in

00:12:52.500 --> 00:12:59.790
the style array, I pass in the map and I give
it a name and then I add it to the map types

00:12:59.790 --> 00:13:05.579
array and give it a key. And then if I it
want to show up by default as the default

00:13:05.579 --> 00:13:12.120
map type, then I just set map type ID. And,
really, that's it. It's that simple. So, this

00:13:12.120 --> 00:13:19.810
is--this was launched, the Maps API v3, in
May of this year. And the Maps API for Flash,

00:13:19.810 --> 00:13:26.089
we launched this feature I think something
like three weeks ago. And today, we are launching

00:13:26.089 --> 00:13:33.209
this in Static Maps. So you now have the ability
to style Static Maps and that's something

00:13:33.209 --> 00:13:42.320
we're launching right--today. The code for
this, again, pretty simple, it just takes

00:13:42.320 --> 00:13:54.399
in a series of styles over here that are type
eliminated; so geometry, the hue, the saturation,

00:13:54.399 --> 00:14:11.029
lightness. And then, we also have--let's see.
Here is it. We also have a Maps API Styled

00:14:11.029 --> 00:14:17.050
Maps Wizard where you can go build styles,
play around with different styles and then

00:14:17.050 --> 00:14:23.949
very easily export that JSON configuration.
You can make many, many ugly and unusable

00:14:23.949 --> 00:14:30.540
maps so I encourage you to tweak it so that
it's as usable as possible. You know, we're

00:14:30.540 --> 00:14:36.820
giving you the power to change the map type
and you have the power to make it look terrible.

00:14:36.820 --> 00:14:44.110
Please don't. But I'll show you how this works.
So, let's say for some crazy reason I wanted

00:14:44.110 --> 00:14:59.589
to change the water red. I wanted--sorry.
Let me see if this will speed up and then

00:14:59.589 --> 00:15:22.490
add that style. I want to--let's go to Sao
Paulo. Great. Turns out this network cable

00:15:22.490 --> 00:16:37.330
is not working, okay. Sorry. Come on. Always
has to be some sort of breakdown. There you

00:16:37.330 --> 00:17:18.990
go. That should work. Apologies about that.
So, let's try this again. Add style--that's

00:17:18.990 --> 00:17:35.049
quicker. I, for instance, want to turn off
all the local roads and all the highways I

00:17:35.049 --> 00:17:48.640
want it to simplify and let's say the entire,
well administrative, let's say I want to simplify

00:17:48.640 --> 00:17:52.621
all of that. So you see it got rid of the
major labels, as I zoom in it'll--the labels

00:17:52.621 --> 00:17:58.990
will show up, and I want to over-saturate
everything. And here we have a map. And if

00:17:58.990 --> 00:18:14.380
I just hit show JSAN I can copy and paste
that code directly into your Maps API implementation.

00:18:14.380 --> 00:18:23.060
So it's really that easy and I encourage you
to play with this feature. The--another new

00:18:23.060 --> 00:18:29.130
thing I wanted to show you is Fusion Tables.
Does anybody heard of Fusion Tables? Okay,

00:18:29.130 --> 00:18:37.370
nobody. Oh, no, a couple people. Fusion Table
is something we just launched out of Labs

00:18:37.370 --> 00:18:45.590
a couple weeks ago. And it is essentially
a relational database sitting in the cloud

00:18:45.590 --> 00:18:53.430
that has a really strong notion of Geospatial.
It's great for storing and visualizing all

00:18:53.430 --> 00:18:59.030
sorts of data but it has native support for
a lot of Geospatial types and KML. So, I mean

00:18:59.030 --> 00:19:08.409
I'll walk through a couple examples of Fusion
Tables. Here is my Fusion Tables accounts.

00:19:08.409 --> 00:19:17.770
I earlier found this dataset. I tried to find
a dataset for Brasil but I couldn't find a

00:19:17.770 --> 00:19:23.880
good one, so I got this dataset from the United
States. The United States is separated into

00:19:23.880 --> 00:19:31.720
something like 450 congressional districts
and every year a government organization releases

00:19:31.720 --> 00:19:36.789
a lot of demographic information broken down
by congressional districts. So this just a

00:19:36.789 --> 00:19:46.700
CSV download that I uploaded into Fusion Tables.
Fusion Tables split it out into a tabular

00:19:46.700 --> 00:19:53.530
format. I don't have any sort of geo data
in here, I just have the district name and

00:19:53.530 --> 00:20:01.159
then a bunch of different fields. So if I
look at the columns, you see I have median

00:20:01.159 --> 00:20:07.640
age, the total population, total population
who are Asian alone, not born in the U.S.,

00:20:07.640 --> 00:20:12.770
et cetera, et cetera. There's a lot of data.
And down here at the end I have a two digit

00:20:12.770 --> 00:20:18.040
district code. So, I have the district name
and a two digit district code. Let's take

00:20:18.040 --> 00:20:23.080
a look at some of the options Fusion Tables
give you just for visualizing large datasets

00:20:23.080 --> 00:20:32.409
like this. So this is going to have, what,
436 rows. I can pick a way to visualize. Let's

00:20:32.409 --> 00:20:43.620
say I want a line chart. The X axis I want
to be the district and the Y axis let's say

00:20:43.620 --> 00:20:49.669
the median age of the total population. But
I can change this to any of the options or

00:20:49.669 --> 00:20:55.789
I can highlight multiple and you'll see it
collapses a lot of districts but they're in

00:20:55.789 --> 00:21:05.240
order. So you can see the outlier here appears
to be somewhere in between Michigan and Alabama.

00:21:05.240 --> 00:21:13.940
But this is the median age of these different
congressional districts. So let's say percent

00:21:13.940 --> 00:21:25.929
of the total population who are 85 and older
and not surprisingly, Florida is the outlier

00:21:25.929 --> 00:21:31.850
here. A lot of people retire in Florida in
the United States. There's--there are other

00:21:31.850 --> 00:21:39.001
things I can do. I can do a pie--a bar chart.
I can then say median age of total population

00:21:39.001 --> 00:21:46.799
and combine these things. So that is, I mean,
a really, really fast way to visualize lots

00:21:46.799 --> 00:21:52.500
of data. And what's really cool about Fusion
Tables is you see I can get an embed code

00:21:52.500 --> 00:22:02.130
here. Fusion Tables has a notion of sharing
and collaborating over a tabular dataset.

00:22:02.130 --> 00:22:06.659
So, I have sharing options in Fusion Tables
like I would in Google Docs. So let's say

00:22:06.659 --> 00:22:13.809
I want to--I make it unlisted so anybody with
the link which also enables the embed code,

00:22:13.809 --> 00:22:19.760
or I could just make it public which means
it's searchable within Fusion Tables itself.

00:22:19.760 --> 00:22:24.539
Click, get the embed code, copy paste and
I'm done, right? I have that visualization

00:22:24.539 --> 00:22:29.471
if I update my table, my visualization updates,
pretty cool. And since this is a developer

00:22:29.471 --> 00:22:36.520
day, I'm not going to spend a lot of time
on the copy paste. Let's take a look at another

00:22:36.520 --> 00:22:46.970
dataset. So, that dataset didn't have any
notion of Geospatial. Let's take a look at

00:22:46.970 --> 00:22:57.059
a dataset from Brazil. It is a list of public
beaches in Brazil and their latitude and longitude.

00:22:57.059 --> 00:23:04.409
So latitude and longitude is already in this
table, but if you had say a CSV that you uploaded

00:23:04.409 --> 00:23:10.070
that just had you know, name, some attribute
information, and address, Fusion Tables will

00:23:10.070 --> 00:23:14.830
automatically geocode that for you so that
it has a reference to where that actually

00:23:14.830 --> 00:23:20.990
is on the planet. You don't have to upload
geocoded data to Fusion Tables if you want

00:23:20.990 --> 00:23:27.140
to use its Geospatial features it'll do that
automatically. So not much to this table just

00:23:27.140 --> 00:23:36.309
that I can click visualize the map and I think
there are something like 2000 beaches listed

00:23:36.309 --> 00:23:45.870
here. I can click on one and I'd see, you
know, like, it gives me the beach name and

00:23:45.870 --> 00:23:52.059
the title of the table, that's because I actually
went in earlier and configured the info window.

00:23:52.059 --> 00:23:59.549
So I wanted the name and the table name, I
can configure it to be whatever. So if I go

00:23:59.549 --> 00:24:08.770
back to defaults, it'll default to all the
data in the table. So this is pretty cool.

00:24:08.770 --> 00:24:15.929
What's really, really hard in using the Maps
API is representing lots and lots of data,

00:24:15.929 --> 00:24:20.610
drawing lots and lots of points on the map.
And the reason for this is the way you add

00:24:20.610 --> 00:24:27.539
markers to a map, it's all through JavaScript.
So as you add a thousand markers that is at

00:24:27.539 --> 00:24:33.750
a minimum, a thousand DOM elements, more likely
much more than that and in JavaScript when

00:24:33.750 --> 00:24:40.590
you pan the map the Maps API has to take care
of panning all those markers at the same time.

00:24:40.590 --> 00:24:47.500
So it's a big performance hit. The way Fusion
Tables does a maps integration is by tiling.

00:24:47.500 --> 00:24:57.159
So these dots you see, they're actually all
256x256 tiles, the same tiling scheme as the

00:24:57.159 --> 00:25:02.870
Maps API itself. And these tiles are burned
on to--sorry, these dots are burned unto tiles

00:25:02.870 --> 00:25:08.220
that are transparent that sit on top. And
then they're made interactive through JavaScript.

00:25:08.220 --> 00:25:13.340
JavaScript is very, very fast that--at hit
testing, right? "In this coordinate, am I

00:25:13.340 --> 00:25:19.870
over something that's interesting?" And passing
that data is not a lot of data even for 10,000

00:25:19.870 --> 00:25:26.890
points. So we can do what Fusion Tables does
is, you know, as I mouse over, it's in JavaScript,

00:25:26.890 --> 00:25:36.350
evaluating it, it knows that there's a point
there. So another cool feature, I don't know

00:25:36.350 --> 00:25:41.720
if you guys have ever tried to do heat maps,
there's a lot of the various API's and software

00:25:41.720 --> 00:25:48.929
that does that. But Fusion Tables has this
check box here and I have a heat map. Incidentally

00:25:48.929 --> 00:25:56.090
this island looks quite nice and so, is it
a popular beach resort? It seems to have a

00:25:56.090 --> 00:26:02.260
lot of beaches. So Fusion Tables lets you
plot a lot of points on the map and visualize

00:26:02.260 --> 00:26:14.820
it, lets you do heat maps very quickly, lets
you collaborate over sets of data. All right,

00:26:14.820 --> 00:26:21.230
so let's go back to that old dataset I had
of a congressional district demographics.

00:26:21.230 --> 00:26:26.250
You know, it's an interesting dataset, it
has a lot of information, but really it has

00:26:26.250 --> 00:26:32.649
a notion of place, right? Congressional districts
are real places in the United States, so it's

00:26:32.649 --> 00:26:36.279
interesting in visualizing this data, it would
be really interesting visualizing this data

00:26:36.279 --> 00:26:47.010
on the maps somehow. But I don't have that
map data. So I'm going to search Fusion Tables.

00:26:47.010 --> 00:26:53.100
A lot of people make Fusion Tables--their
data public and I just happen to know that

00:26:53.100 --> 00:27:01.390
there is a shape of U.S. congressional districts
boundaries for the 110th Congress. So all

00:27:01.390 --> 00:27:09.110
this table has is just the ID, the states,
and name for that district, and then this

00:27:09.110 --> 00:27:15.049
short form ID. It so happens that the short
form ID is also the short form ID that was

00:27:15.049 --> 00:27:21.010
in my other table. And then it has a shape.
So if I click here you can see that Fusion

00:27:21.010 --> 00:27:25.480
Table supports polygon rendering as well.
It supports KML. You can upload KML and it'll

00:27:25.480 --> 00:27:32.289
render KML on the map. What I want to do is
merge this tables. So if I could just click

00:27:32.289 --> 00:27:36.650
this merge button, shape of U.S. congressional
districts. I know I want to merge on the ID.

00:27:36.650 --> 00:27:44.360
I have this table here. I know that the short
two digit district is right here. Why don't

00:27:44.360 --> 00:28:00.200
we call it GDD BR table demo one. I hit merge
table

00:28:00.200 --> 00:28:07.179
and all of the sudden the table is merged.
I have this shape data and if I move over,

00:28:07.179 --> 00:28:14.070
you see, I also have all the population data.
So that's cool. What can I do with this? Well,

00:28:14.070 --> 00:28:22.470
one of the visualization options here is map.
I can click visualize map. It is generating

00:28:22.470 --> 00:28:33.630
it. There we go. And it's drawn the 435 Congressional
Districts, the polygons, all through tiles.

00:28:33.630 --> 00:28:38.559
This is something else that's really difficult
to do just in JavaScript in Maps API. And

00:28:38.559 --> 00:28:42.679
all the data is still there. So if I click
on Wyoming, I get this gigantic info window

00:28:42.679 --> 00:28:49.809
of all the stats. There's also some really
cool ways to visualize the data. You know,

00:28:49.809 --> 00:28:55.279
this is interesting, you know, and maybe an
interesting way to interact with Fusion Tables.

00:28:55.279 --> 00:29:01.450
But let's say I have a mash up that I really
want to get some type of data across, some

00:29:01.450 --> 00:29:08.030
concept. I want to visualize, you know, average
ages of congressional districts. So I can

00:29:08.030 --> 00:29:12.600
click through, I can customize the info window
so that it only shows average age. But I can

00:29:12.600 --> 00:29:18.080
also configure styles, so you can configure
styles from markers or polygons. So, these

00:29:18.080 --> 00:29:21.779
Brazilian beaches if I had some other attribute
that I wanted to show a different type of

00:29:21.779 --> 00:29:27.070
marker for that beach versus another beach
I could very easily do that. In this case,

00:29:27.070 --> 00:29:36.309
I want to change the fill color based on some
sort of gradient, let's say from 30--well,

00:29:36.309 --> 00:29:49.230
let's say from 25 to 35. I'm going to select
the column, median age of total population,

00:29:49.230 --> 00:29:57.779
let's say 40. I really only want three steps;
let's say red for the older, blue for the

00:29:57.779 --> 00:30:06.890
younger, yellow in the middle and it generates
its gradients. Let's save, give it a little

00:30:06.890 --> 00:30:15.490
chance to churn, and there we go. So you can
see districts over here a little older. Here,

00:30:15.490 --> 00:30:21.929
very young, for some reason. And that's--I
mean, that's really cool. You couldn't do

00:30:21.929 --> 00:30:25.929
that easily before and now we have a cloud-based
offering that lets you load this data and

00:30:25.929 --> 00:30:34.000
render it however you want. You know, let's
configure this. I'm sort of not kind of a

00:30:34.000 --> 00:30:47.559
sucker for transparency because it looks cool,
so why don't we make this slightly transparent.

00:30:47.559 --> 00:31:03.240
And now, I can see the underlying map. So,
a couple of places we've seen this used. One

00:31:03.240 --> 00:31:10.279
is if you're familiar or following the news
on the WikiLeaks, they--the Guardian took

00:31:10.279 --> 00:31:19.980
that leak dataset, and then using Fusion Tables,
mapped basically every record they had of

00:31:19.980 --> 00:31:31.440
Iraq, deaths in Iraq, on a map. This, sadly,
is a huge dataset. And rendering on a map

00:31:31.440 --> 00:31:37.100
would be quite difficult if it weren't for
Fusion Tables. So all--the Guardian date was--load

00:31:37.100 --> 00:31:43.929
this data in Fusion Tables and then copy that
embed code and placed it on their site and

00:31:43.929 --> 00:31:53.389
allow for some interactive way to explore
that dataset. And it is loading quite slow.

00:31:53.389 --> 00:31:59.000
But you can see there's, you know, the one
tile has come in and you can see how the tiling

00:31:59.000 --> 00:32:03.149
works. Another thing the they, the Guardian,
did is it added this link where you can download

00:32:03.149 --> 00:32:13.750
the data directly from them and get the data.
And you see here they have a link to download

00:32:13.750 --> 00:32:24.260
details of every death in Iraq. Google Fusion
Tables, click that link. And here's the dataset.

00:32:24.260 --> 00:32:30.480
So this is their table. I can't play around
with their table. I can visualize it and,

00:32:30.480 --> 00:32:38.330
you know, perform some sort of aggregation.
So, maybe I didn't show this like go to a

00:32:38.330 --> 00:32:47.610
line charts [INDISTINCT] wounded over day
and time, but there's also a ton of aggregation

00:32:47.610 --> 00:32:58.186
options you can do. But what's really interesting
about this--oh, I'm not signed in. Let me

00:32:58.186 --> 00:33:08.340
copy this to my other browser. All right,
I'm signed in. I can't customize anything

00:33:08.340 --> 00:33:17.010
on this, but they allow this table to be exported.
I can file, create view, save as WikiLeaks.

00:33:17.010 --> 00:33:24.279
I saved the view, copy the data I want. This
is now a view to their data where I can configure

00:33:24.279 --> 00:33:32.230
styles however I want it to show up. I can
play with the columns, play with the data.

00:33:32.230 --> 00:33:38.139
But it still reflects their data so they change--make
a change and it's changed on my table as well.

00:33:38.139 --> 00:33:45.080
And just to show you how many records there
actually are and how many records or points

00:33:45.080 --> 00:33:53.950
were rendered on that map. There are 52,000
records. So, that is a substantial amount

00:33:53.950 --> 00:34:01.630
of points. So, what I've shown you so far,
all the things I've shown you, you know, are

00:34:01.630 --> 00:34:10.540
pretty interesting, but it's all about playing
in Fusion Tables and then copying the embed

00:34:10.540 --> 00:34:16.730
code, dropping it on your website. You know,
it doesn't allow you to customize--a customizability

00:34:16.730 --> 00:34:23.110
of a Maps API site, say, I want a Styled Map
and a Fusion Tables map to show up. While

00:34:23.110 --> 00:34:29.870
in v3, we have this class called Fusion Tables
layer which lets you create a layer on top

00:34:29.870 --> 00:34:36.190
of Fusion--on top the Maps API v3 that draws
directly from Fusion Tables. In Fusion Tables,

00:34:36.190 --> 00:34:41.840
the way you query Fusion Tables is just standard
SQL. So a lot of developers know SQL. I imagine

00:34:41.840 --> 00:34:47.200
a lot of you are pretty familiar with it.
So it's very, very easy to render data on

00:34:47.200 --> 00:35:01.980
top of the map and play with that data. So,
let's take a look at this dataset in Iraq.

00:35:01.980 --> 00:35:07.790
So you can tell that this a Maps API site
because I have a little styled option that

00:35:07.790 --> 00:35:12.220
I created that sort of tones down the data.
You can also see that I styled the points

00:35:12.220 --> 00:35:18.520
differently so a different color shows up.
Red had more deaths in that incident and then

00:35:18.520 --> 00:35:25.490
blue had fewer. But I can also do an arbitrary
query. So I'm going to query over the column,

00:35:25.490 --> 00:35:31.160
total deaths. I'm going to change this to
a four. And you can see less data is displayed

00:35:31.160 --> 00:35:42.290
on the map. And again, the heat map functionality
is also available via the Fusion Tables layer.

00:35:42.290 --> 00:35:47.700
And this isn't really an accurate representation
of a heat map because each point can represent

00:35:47.700 --> 00:35:59.300
many wound--casualties and injuries. Remember
our Brazilian beaches dataset? This is just

00:35:59.300 --> 00:36:05.270
an example of me loading that here and enabling
the heat map. I don't have any query here

00:36:05.270 --> 00:36:11.020
because all I want to throw is the entire
dataset so I don't need to supply a query.

00:36:11.020 --> 00:36:16.860
And if you look at congressional district
demographics as I zoom in--oh, I did not want

00:36:16.860 --> 00:36:28.510
to click that. This dataset is available here.
Let's say I wanted to actually, you know,

00:36:28.510 --> 00:36:32.920
in real time, build a site where people can
explore this dataset, you can do that. And

00:36:32.920 --> 00:36:38.970
it's super fast, right? I just am now restricting
by some arbitrary number. I want where this

00:36:38.970 --> 00:36:47.980
is over 38 and it will show only the results
that are over 38. So, we did a--and I'll let

00:36:47.980 --> 00:36:55.220
you explore this. I'll share this deck, this
presentation, but we also have an example

00:36:55.220 --> 00:37:01.700
up there which is polling results--polling
predictions for the United States--the upcoming

00:37:01.700 --> 00:37:07.370
elections on November 2 in the United Sates.
And it uses Fusion Tables and styling and

00:37:07.370 --> 00:37:12.640
custom info windows and the Fusion Tables
layer in Maps API v3. So we're really excited

00:37:12.640 --> 00:37:17.460
about Fusion Tables. I think you should play
around with it, really explore. It's very,

00:37:17.460 --> 00:37:22.510
very powerful. It becomes very, very easy
to do a lot of things that were very hard

00:37:22.510 --> 00:37:30.520
to do without some sort of cloud-based database
that has a very strong integration with our

00:37:30.520 --> 00:37:38.030
Maps API. So, I want to touch on a couple
new launches in Earth. I don't know how many

00:37:38.030 --> 00:37:43.640
of you are familiar with the Earth API. I
imagine most of you are familiar with Google

00:37:43.640 --> 00:37:50.530
Earth. The Earth API lets you embed Earth
in a browser and has a JavaScript API to let

00:37:50.530 --> 00:37:58.290
you control the user experience. So you can
now have users come to your site, embed Earth

00:37:58.290 --> 00:38:03.960
there or present data on Earth as you would
in the Google Earth downloaded application

00:38:03.960 --> 00:38:13.950
but on a Web site. The Earth API is a plug-in.
It has over 100 million installs. It's being

00:38:13.950 --> 00:38:19.920
bundled with Google Earth so the install base
is growing. But you should be aware that it

00:38:19.920 --> 00:38:26.070
is a plug-in. So we released the Earth API
several years ago, two or three years ago,

00:38:26.070 --> 00:38:33.350
and the team has been focusing on performance
and browser compatibility. But we also added

00:38:33.350 --> 00:38:37.050
a couple of new features. One is access to
our historical imagery. And we have a lot

00:38:37.050 --> 00:38:41.880
of historical satellite imagery. I looked
in Brazil like--it went back to 19--sorry,

00:38:41.880 --> 00:38:47.340
it went back to 2000 so it didn't go back
that far. But in San Francisco, it goes back

00:38:47.340 --> 00:38:54.400
quite a bit. There's a satellite--well, probably
not a satellite--imagery taken from an aircraft

00:38:54.400 --> 00:38:59.060
from 1946. So we have access to it. But you
can do a lot of really compelling things with

00:38:59.060 --> 00:39:06.410
this imagery, with the imagery that we have.
So in 1989, there was a major earthquake in

00:39:06.410 --> 00:39:12.220
San Francisco. I just want to show you sort
of what's--what a story you can present with

00:39:12.220 --> 00:39:20.350
historical imagery. There is this, you know,
on-ramp, this highway in 1988. It looks all

00:39:20.350 --> 00:39:38.190
great. As I move forward to 1990 and let the
imagery load--running a bit slow. All right.

00:39:38.190 --> 00:39:46.360
So this imagery in 1994, as this loads--there
we go--you can see that, you know, this structure

00:39:46.360 --> 00:39:51.900
collapsed in the earthquake and then they
tore it down. And so, they're still this end

00:39:51.900 --> 00:40:06.660
of a freeway. And if you jump all the way
to current day, you see, you know, the freeway

00:40:06.660 --> 00:40:15.280
is gone. There's just now a pretty, like,
an on-ramp with some trees. But you can still

00:40:15.280 --> 00:40:20.470
see the scar in the city, right? It's left
a visible scar. These are all parking lots

00:40:20.470 --> 00:40:27.990
that opened up in the scar of where that freeway
on-ramp was. So we now give you access to

00:40:27.990 --> 00:40:36.320
this data via the Earth API. So, I can programmatically
say set the time, jump this back to 2000,

00:40:36.320 --> 00:40:43.160
enable the actual time machine, which is what
we call the historical imagery interface,

00:40:43.160 --> 00:40:50.330
enable and disable the UI. So I can define
the user experience however I want. One thing

00:40:50.330 --> 00:40:57.370
I want to mention last, KML, we launched a
new feature Track. We wanted an easy way for--to

00:40:57.370 --> 00:41:04.670
be able to represent motion both on the planet
and above. And previously, there was a way

00:41:04.670 --> 00:41:11.660
to do this in KML. It involved creating a
placemark, associating a time with it, and

00:41:11.660 --> 00:41:18.810
then creating another placemark and another
time with it, to denote movements of, you

00:41:18.810 --> 00:41:23.860
know, a particular point or object. That is
no longer necessary with that. It wasn't really

00:41:23.860 --> 00:41:29.210
movement of a placemark. It was just one placemark
created, another placemark created; the older

00:41:29.210 --> 00:41:40.270
one deleted. Now, we have an ability to represent
time on through Track. So, a lot less code.

00:41:40.270 --> 00:41:47.960
It's basically just to parallel arrays; one
with the time and the other one with the points.

00:41:47.960 --> 00:41:58.070
This is running a bit slow but it's just an
imagery of a plane using Track to sort of

00:41:58.070 --> 00:42:04.010
fly around. This has advantages for you, the
developer, because it's a lot easier to produce

00:42:04.010 --> 00:42:11.200
this KML code. It also has advantages for
us because it's now a lot, lot quicker for

00:42:11.200 --> 00:42:18.741
us to render movements on both the Earth API
and the Earth client. So that's--oh, right.

00:42:18.741 --> 00:42:24.310
I wanted to mention the Latitude API. I'm
not going to go into this in much detail.

00:42:24.310 --> 00:42:28.490
Latitude is--if you have an Android phone,
it's a product that you can turn on that tracks

00:42:28.490 --> 00:42:34.350
your location and you can share a location
with friends. There's also an API that lets

00:42:34.350 --> 00:42:41.260
developers access your location, both to set
it and get it. And you can get both the best

00:42:41.260 --> 00:42:46.170
available or just city level location, you
can authorize what you want that application

00:42:46.170 --> 00:42:54.670
to have access to. It's not a competitor to
the HTML5 Geolocation API. It is a way for

00:42:54.670 --> 00:43:00.680
applications to know where you are without
you having to be on a Web site using a browser

00:43:00.680 --> 00:43:06.550
because it's pushed from your phone. A couple
of interesting used cases, the one up here,

00:43:06.550 --> 00:43:11.810
somebody built an application that based on
if you're traveling away from your home or

00:43:11.810 --> 00:43:16.830
traveling--or coming home, changes the temperature,
so that you're not wasting energy heating

00:43:16.830 --> 00:43:23.900
a house with nobody there. This one right
here, geotags your photos based on a time

00:43:23.900 --> 00:43:29.210
stamp if your camera doesn't have that capability.
That's what I wanted to cover. I know there's

00:43:29.210 --> 00:43:37.880
a lot of--many things. I just sort of gives
you an idea of how many Geospatial technologies

00:43:37.880 --> 00:43:45.810
we have at Google. And the deck is up here.
If you want to see the first presentation,

00:43:45.810 --> 00:43:54.960
it's at Geo1. And I suggest you load this
in Chrome or they don't work very well, otherwise.

00:43:54.960 --> 00:44:01.050
And the relevant links for the things I showed.
Also, please fill out this feedback. And I

00:44:01.050 --> 00:44:12.260
am open to talking any questions. All right.
Thanks very much for your time.

