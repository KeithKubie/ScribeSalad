WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.041
PARISA TABRIZ: Thank you.

00:00:01.041 --> 00:00:01.800
Thank you.

00:00:01.800 --> 00:00:03.600
OK, 30 minutes to lunch.

00:00:03.600 --> 00:00:06.280
We can do this together.

00:00:06.280 --> 00:00:10.100
So my talk is called "got ssl?"

00:00:10.100 --> 00:00:12.910
As you guys know, more people
are connected to the web today

00:00:12.910 --> 00:00:15.390
than ever before and
from more places.

00:00:15.390 --> 00:00:18.400
So we're connected with
our laptops and our phones,

00:00:18.400 --> 00:00:20.850
our tablets probably
soon enough,

00:00:20.850 --> 00:00:24.270
with personal devices
and accessories.

00:00:24.270 --> 00:00:28.740
And we access the internet from
untrusted and sometimes even

00:00:28.740 --> 00:00:31.290
hostile networks.

00:00:31.290 --> 00:00:33.430
With so much of our
lives moving online,

00:00:33.430 --> 00:00:34.930
it's imperative
we're taking steps

00:00:34.930 --> 00:00:38.030
to protect our data
and our users' data.

00:00:38.030 --> 00:00:42.170
So this talk is my call to arms
to all of you as developers.

00:00:42.170 --> 00:00:43.880
And in the next
30 minutes, I hope

00:00:43.880 --> 00:00:47.450
to convince you about the
necessity and practicality

00:00:47.450 --> 00:00:50.180
of SSL, and then give
you some pointers

00:00:50.180 --> 00:00:54.610
to show you how to
actually make that happen.

00:00:54.610 --> 00:00:57.730
So this is probably a
good place to start.

00:00:57.730 --> 00:00:58.610
What's SSL?

00:00:58.610 --> 00:01:00.780
It stands for Secure
Sockets Layer,

00:01:00.780 --> 00:01:04.230
and it's a cryptographic
protocol designed

00:01:04.230 --> 00:01:08.012
to provide communication
security over the internet.

00:01:08.012 --> 00:01:11.240
I imagine a lot of
people have heard of it.

00:01:11.240 --> 00:01:13.370
I'll just still
do a quick intro.

00:01:13.370 --> 00:01:15.430
It guarantees
privacy, and it does

00:01:15.430 --> 00:01:18.035
this via encryption
and integrity.

00:01:18.035 --> 00:01:21.300
So this prevents somebody
from snooping or tampering

00:01:21.300 --> 00:01:24.360
with the internet connection.

00:01:24.360 --> 00:01:27.880
It's had its share of
security flaws over the years,

00:01:27.880 --> 00:01:30.890
but it's the leading and
primary way today and really

00:01:30.890 --> 00:01:33.450
the only way to ensure any
kind of data communication

00:01:33.450 --> 00:01:35.716
security on the internet.

00:01:35.716 --> 00:01:37.090
There's a couple
of acronyms that

00:01:37.090 --> 00:01:39.100
are thrown around
interchangeably.

00:01:39.100 --> 00:01:41.900
So very quickly,
I'll clarify these.

00:01:41.900 --> 00:01:45.970
TLS, if you've heard of it, is
for most intents and purposes

00:01:45.970 --> 00:01:47.300
the same as SSL.

00:01:47.300 --> 00:01:49.520
You can consider them synonyms.

00:01:49.520 --> 00:01:55.450
If we want to be precise,
SSL 3.1 was renamed to TLS.

00:01:55.450 --> 00:01:59.130
SSL was the original name of
the specification when this came

00:01:59.130 --> 00:02:01.940
out in the mid-'90s
from Netscape.

00:02:01.940 --> 00:02:04.270
And TLS is the
IETF Standard name.

00:02:04.270 --> 00:02:05.680
But they're interchangeable.

00:02:05.680 --> 00:02:11.060
I will refer to the protocol
as SSL throughout this talk.

00:02:11.060 --> 00:02:15.060
And then HTTPS is HTTP over SSL.

00:02:15.060 --> 00:02:17.590
And I imagine most people
are familiar with this, too.

00:02:17.590 --> 00:02:19.270
It's actually not a protocol.

00:02:19.270 --> 00:02:20.670
But it's really
just the layering

00:02:20.670 --> 00:02:25.900
of the security capabilities
of SSL and standard HTTP.

00:02:25.900 --> 00:02:28.400
So if you're into
internet protocol stacks,

00:02:28.400 --> 00:02:31.200
this is how it looks.

00:02:31.200 --> 00:02:34.500
I'll leave it as an
exercise for all of you guys

00:02:34.500 --> 00:02:37.980
to read about the specifics
of the SSL protocol.

00:02:37.980 --> 00:02:41.330
But you should know that
it consists of two phases.

00:02:41.330 --> 00:02:43.600
So there's this
first initial phase

00:02:43.600 --> 00:02:47.990
between the client-- often
case your browser-- and the web

00:02:47.990 --> 00:02:48.490
server.

00:02:48.490 --> 00:02:50.890
And this is based on
public/private key

00:02:50.890 --> 00:02:52.650
cryptography.

00:02:52.650 --> 00:02:54.690
This initial part
of the protocol

00:02:54.690 --> 00:02:56.960
is a handshake, which
is used to create

00:02:56.960 --> 00:02:59.500
a shared key, a shared secret.

00:02:59.500 --> 00:03:02.280
And this shared secret is used
by the second part of the SSL

00:03:02.280 --> 00:03:04.935
protocol to actually encrypt
the communication of a session.

00:03:08.370 --> 00:03:11.890
So networking on the
internet feels safe, right?

00:03:11.890 --> 00:03:13.280
We open up a browser.

00:03:13.280 --> 00:03:15.760
We send a request
to load some page

00:03:15.760 --> 00:03:18.280
in sort of the
comfort of our device.

00:03:18.280 --> 00:03:21.050
The response page is
delivered back to us.

00:03:21.050 --> 00:03:22.660
It feels like it's immediate.

00:03:22.660 --> 00:03:23.480
It's fast.

00:03:23.480 --> 00:03:26.550
It feels like we're talking
directly to the website.

00:03:26.550 --> 00:03:28.750
But in reality, we
know that it's not

00:03:28.750 --> 00:03:32.250
like this direct connection.

00:03:32.250 --> 00:03:35.690
And if you serve data over
plain HTTP between your browser

00:03:35.690 --> 00:03:38.750
and the server, you have
absolutely no guarantees

00:03:38.750 --> 00:03:43.190
that the data that's been sent
from your client to the server

00:03:43.190 --> 00:03:47.885
has not been tampered with or
snooped by some person that

00:03:47.885 --> 00:03:50.720
has access to the
network along the way.

00:03:50.720 --> 00:03:54.007
So I'm sure people are
familiar with the comic XKCD.

00:03:54.007 --> 00:03:55.840
It's really hard for
me to do a presentation

00:03:55.840 --> 00:03:58.000
without including some
comic, because there's

00:03:58.000 --> 00:03:59.630
just always something relevant.

00:03:59.630 --> 00:04:03.900
I'll give people a second
to note our (Wo)man

00:04:03.900 --> 00:04:07.027
in the Middle on the
open Wi-Fi network.

00:04:07.027 --> 00:04:08.860
She's performing a
man-in-the-middle attack.

00:04:08.860 --> 00:04:12.700
And as the name of
the attack suggests,

00:04:12.700 --> 00:04:16.100
this is when an attacker
places himself or herself

00:04:16.100 --> 00:04:19.100
or their malicious software
in between a victim

00:04:19.100 --> 00:04:22.130
and a valuable resource.

00:04:22.130 --> 00:04:24.705
And in today's talk, I'm going
to say that's your website.

00:04:27.840 --> 00:04:31.770
So there are almost always
a few places someone

00:04:31.770 --> 00:04:34.150
can access the network
between a request coming

00:04:34.150 --> 00:04:37.300
from a browser and
the actual web server.

00:04:37.300 --> 00:04:40.390
So, for example, who's on
Google Guest right now?

00:04:40.390 --> 00:04:42.920
I imagine there's a couple
people-- OK, lots of people.

00:04:42.920 --> 00:04:45.390
So this is going
through the Wi-Fi router

00:04:45.390 --> 00:04:46.280
that's run by Google.

00:04:46.280 --> 00:04:48.220
I don't know who it's run by.

00:04:48.220 --> 00:04:49.890
Maybe you do, and
maybe you trust them.

00:04:49.890 --> 00:04:54.230
But then it's going on to
some ISP and potentially

00:04:54.230 --> 00:04:57.770
other intermediate
proxies between you

00:04:57.770 --> 00:05:00.490
on your laptop or your
phone and that site

00:05:00.490 --> 00:05:03.670
and then through all those
hops on the way back.

00:05:03.670 --> 00:05:06.750
And if you are using HTTP,
this is an entirely clear text

00:05:06.750 --> 00:05:07.890
protocol.

00:05:07.890 --> 00:05:10.860
Again, you have no guarantee
that this data has not

00:05:10.860 --> 00:05:12.230
been logged or tampered with.

00:05:12.230 --> 00:05:15.280
That's going to be the
meme through this talk.

00:05:15.280 --> 00:05:18.110
Do you know or trust the people
that run each one of those

00:05:18.110 --> 00:05:19.360
hops?

00:05:19.360 --> 00:05:23.600
If not, you should be concerned.

00:05:23.600 --> 00:05:28.210
So even more depressingly,
even if you want HTTPS,

00:05:28.210 --> 00:05:30.030
you can actually still
run into some issues

00:05:30.030 --> 00:05:32.600
if the site doesn't avoid
some common downgrade

00:05:32.600 --> 00:05:36.160
vectors from HTTPS to HTTP.

00:05:36.160 --> 00:05:42.230
Users very rarely type in the
full URL, the scheme HTTPS

00:05:42.230 --> 00:05:44.380
and the URL of where
they want to go

00:05:44.380 --> 00:05:46.160
when they want to
visit some site.

00:05:46.160 --> 00:05:48.840
So these things end up
automatically-- you're

00:05:48.840 --> 00:05:50.610
either being
redirected by the site

00:05:50.610 --> 00:05:53.804
or you're clicking some
link and going there.

00:05:53.804 --> 00:05:55.220
And all of these
are opportunities

00:05:55.220 --> 00:05:56.136
for downgrade attacks.

00:05:56.136 --> 00:05:58.030
I'm going to talk
at the end about how

00:05:58.030 --> 00:05:59.230
to actually avoid those.

00:05:59.230 --> 00:06:01.180
But the internet
is a scary place.

00:06:03.790 --> 00:06:07.670
I'm going to go over just two
tools that make these types

00:06:07.670 --> 00:06:10.860
of man-in-the-middle
attacks really easy.

00:06:10.860 --> 00:06:12.350
I encourage you
to check them out.

00:06:12.350 --> 00:06:14.930
Maybe someone is running them
in the audience right now.

00:06:14.930 --> 00:06:18.790
But the first one
is called SSLstrip.

00:06:18.790 --> 00:06:20.920
So man-in-the-middle attacks
have been known about

00:06:20.920 --> 00:06:22.170
for a really long time.

00:06:22.170 --> 00:06:25.100
This tool came out
in 2009, just as kind

00:06:25.100 --> 00:06:26.730
of a proof of concept
of how easy these

00:06:26.730 --> 00:06:29.880
are to actually mount.

00:06:29.880 --> 00:06:33.520
But what SSLstrip does
is it exploits the fact

00:06:33.520 --> 00:06:37.590
that often sites
are still sending

00:06:37.590 --> 00:06:38.837
some requests over HTTP.

00:06:38.837 --> 00:06:40.920
As I mentioned, most people
don't type it directly

00:06:40.920 --> 00:06:41.720
into the browser.

00:06:41.720 --> 00:06:43.906
They're either clicking
a link or actually

00:06:43.906 --> 00:06:45.280
getting redirected
from the site.

00:06:45.280 --> 00:06:48.370
So there's this window of
opportunity for somebody

00:06:48.370 --> 00:06:53.220
to man-in-the-middle and
actually replace outbound links

00:06:53.220 --> 00:06:57.140
that are intended to be
HTTPS with HTTP in back.

00:06:57.140 --> 00:07:01.350
And also it does some
homograph-style URL

00:07:01.350 --> 00:07:01.880
replacement.

00:07:01.880 --> 00:07:04.330
And it even throws
in a lock icon.

00:07:04.330 --> 00:07:08.062
So people that are looking for
that as a sense of security

00:07:08.062 --> 00:07:10.020
get that warm, fuzzy
feeling, but unfortunately

00:07:10.020 --> 00:07:11.812
without the security.

00:07:11.812 --> 00:07:14.200
SSLstrip came out in 2009.

00:07:14.200 --> 00:07:16.820
One that got quite a
lot of broad attention

00:07:16.820 --> 00:07:18.960
was called Firesheep.

00:07:18.960 --> 00:07:21.555
This one came out the
following year, in 2010.

00:07:21.555 --> 00:07:23.930
And it was much more usable
from the attacker standpoint.

00:07:23.930 --> 00:07:26.610
You had a nice user interface.

00:07:26.610 --> 00:07:29.670
So that's probably why it got
a little bit more attention.

00:07:29.670 --> 00:07:32.380
Firesheep was a passive
man-in-the-middle attack,

00:07:32.380 --> 00:07:36.000
and then it just listened
to an opened Wi-Fi network

00:07:36.000 --> 00:07:39.280
for cookies that were
being sent in the clear,

00:07:39.280 --> 00:07:40.550
authentication cookies.

00:07:40.550 --> 00:07:42.970
And then it would pop
up people's accounts

00:07:42.970 --> 00:07:45.070
that it was able to hijack.

00:07:45.070 --> 00:07:49.470
And you could just click on
them and automatically listen in

00:07:49.470 --> 00:07:54.090
on someone's chat or log
into their Facebook account.

00:07:57.140 --> 00:08:01.570
So a site without SSL
is telling its users

00:08:01.570 --> 00:08:06.730
that they don't care about
their privacy and integrity.

00:08:06.730 --> 00:08:12.080
So in the '90s, HTTPS was
mainly considered something

00:08:12.080 --> 00:08:14.080
that the banking
industry had to consider.

00:08:14.080 --> 00:08:16.630
But it's just not
about banking anymore.

00:08:16.630 --> 00:08:20.230
And serving over plain
HTTP is totally insecure.

00:08:20.230 --> 00:08:22.940
Leave with that message.

00:08:22.940 --> 00:08:24.870
Neither the browser
nor the server

00:08:24.870 --> 00:08:29.130
can trust any of the data
that's sent over HTTP.

00:08:29.130 --> 00:08:32.100
And this is a sad state for
users and site operators

00:08:32.100 --> 00:08:33.360
as well.

00:08:33.360 --> 00:08:35.179
And we know it's not
just a plausible risk.

00:08:35.179 --> 00:08:38.860
So we have evidence of both
targeted and large-scale

00:08:38.860 --> 00:08:41.120
government-run
snooping operations.

00:08:41.120 --> 00:08:43.872
[LAUGHTER]

00:08:43.872 --> 00:08:45.080
PARISA TABRIZ: Awkward laugh.

00:08:49.930 --> 00:08:52.650
If you care about the privacy
and integrity of your users'

00:08:52.650 --> 00:08:55.350
data, you need to be using SSL.

00:08:55.350 --> 00:08:58.110
I would even go so
far as to say if you

00:08:58.110 --> 00:09:03.180
don't care about the privacy and
integrity of your user's data,

00:09:03.180 --> 00:09:05.310
how interesting is the
app that you're writing?

00:09:05.310 --> 00:09:07.330
There are very few
exceptions that I

00:09:07.330 --> 00:09:12.270
can think of where this should
not be seen as a requirement.

00:09:12.270 --> 00:09:16.670
OK, so hopefully, you
guys all want SSL now.

00:09:16.670 --> 00:09:18.280
So time to get it.

00:09:18.280 --> 00:09:21.640
And I will continue
my sales pitch

00:09:21.640 --> 00:09:26.010
by saying that SSL is fast,
cheap, and easier than ever

00:09:26.010 --> 00:09:29.880
to get, which is good news.

00:09:29.880 --> 00:09:33.600
So on my slide, I have a
quote from Adam Langley, who

00:09:33.600 --> 00:09:37.060
works at Google and has done
a tremendous amount of work

00:09:37.060 --> 00:09:39.850
getting SSL support at
Google and then kind

00:09:39.850 --> 00:09:45.170
of across internet.

00:09:45.170 --> 00:09:48.330
One of the most common excuses
that I hear from developers

00:09:48.330 --> 00:09:51.930
about why they don't have SSL
is the performance and cost

00:09:51.930 --> 00:09:53.250
impact.

00:09:53.250 --> 00:09:55.780
And to be fair,
10 years ago, this

00:09:55.780 --> 00:09:59.920
was a legitimate
concern and complaint.

00:09:59.920 --> 00:10:01.905
I mention this first
part of the SSL protocol.

00:10:01.905 --> 00:10:04.290
You do public key
cryptography, and this

00:10:04.290 --> 00:10:07.630
is expensive computationally.

00:10:07.630 --> 00:10:10.180
All of the cost is
in its handshake.

00:10:10.180 --> 00:10:14.800
After that, it's never really
been too much of an issue.

00:10:14.800 --> 00:10:17.100
10 years ago, this required
dedicated hardware.

00:10:17.100 --> 00:10:18.750
It's not the case today.

00:10:18.750 --> 00:10:24.090
This quote was from
2010, when Google started

00:10:24.090 --> 00:10:27.497
supporting SSL for Gmail
by default for all users.

00:10:27.497 --> 00:10:29.080
And it required no
additional hardware

00:10:29.080 --> 00:10:32.150
and really had a very
limited performance impact.

00:10:32.150 --> 00:10:35.950
So it's not too expensive.

00:10:35.950 --> 00:10:38.440
Running an application
over SSL is really

00:10:38.440 --> 00:10:40.730
no different from
communicating directly on TCP.

00:10:40.730 --> 00:10:43.740
So there's very few
application modifications

00:10:43.740 --> 00:10:47.070
you need to do as far
as performance goes.

00:10:47.070 --> 00:10:50.730
You'll want to check
out operational pieces

00:10:50.730 --> 00:10:55.130
to actually SSL deployment,
like how and where you deploy

00:10:55.130 --> 00:10:59.510
your SSL servers, and record
size, and memory buffers,

00:10:59.510 --> 00:11:01.589
and a lot of little
configuration things,

00:11:01.589 --> 00:11:03.130
which I'm not going
to go over today,

00:11:03.130 --> 00:11:07.980
but which there's a really
good reference for in this book

00:11:07.980 --> 00:11:09.650
that I have linked.

00:11:09.650 --> 00:11:11.970
They're sort of links sprinkled
throughout the slides,

00:11:11.970 --> 00:11:13.590
if anything is interesting.

00:11:13.590 --> 00:11:16.720
This book "High Performance
Browser Networking"

00:11:16.720 --> 00:11:19.960
is by Ilya, who I think
spoke either earlier

00:11:19.960 --> 00:11:22.150
yesterday or a speaking today.

00:11:22.150 --> 00:11:23.955
And it has a great
checklist of things

00:11:23.955 --> 00:11:26.890
that you'll want to
consider when deploying SSL.

00:11:26.890 --> 00:11:27.860
And it's free.

00:11:27.860 --> 00:11:29.540
So again, no excuse.

00:11:29.540 --> 00:11:34.930
SSL is not a
performance hindrance.

00:11:34.930 --> 00:11:37.980
It's also free!

00:11:37.980 --> 00:11:42.730
So you can get free
certs from StartSSL.com.

00:11:42.730 --> 00:11:46.620
This is just one that I've used
and I know other people use.

00:11:46.620 --> 00:11:48.720
You can get free for
noncommercial uses.

00:11:48.720 --> 00:11:52.210
If you have a commercially
use, it's something like $60.

00:11:52.210 --> 00:11:55.030
So it's cheap.

00:11:55.030 --> 00:11:57.790
And we have it.

00:11:57.790 --> 00:11:59.130
It's fast.

00:11:59.130 --> 00:12:00.624
It's cheap.

00:12:00.624 --> 00:12:02.040
And I'm even going
to go as so far

00:12:02.040 --> 00:12:05.870
as to say that SSL
is easy to deploy.

00:12:05.870 --> 00:12:08.160
It's deceptively easy
to deploy, in fact.

00:12:08.160 --> 00:12:11.915
So there's a couple of mistakes
that people need to avoid.

00:12:11.915 --> 00:12:13.290
But there's a
really useful guide

00:12:13.290 --> 00:12:14.539
that's put out by SSLLabs.com.

00:12:14.539 --> 00:12:17.210
And it goes over
all of the things

00:12:17.210 --> 00:12:18.940
that you need to do in detail.

00:12:18.940 --> 00:12:21.420
And more importantly, it
has an automated tester,

00:12:21.420 --> 00:12:24.450
so you can actually check
that you did everything right

00:12:24.450 --> 00:12:26.959
and fix all the mistakes,
and then feel confident

00:12:26.959 --> 00:12:28.750
that you're getting
all these things right.

00:12:28.750 --> 00:12:32.810
So SSL is fast, it's
cheap, it's easy.

00:12:35.650 --> 00:12:38.740
Get it, and then
let's get it right.

00:12:38.740 --> 00:12:40.590
So you can test
for your actual SSL

00:12:40.590 --> 00:12:42.200
deployment using SSLLabs.com.

00:12:42.200 --> 00:12:46.020
But I want to go over a
couple of the application bugs

00:12:46.020 --> 00:12:47.085
that I see most commonly.

00:12:49.980 --> 00:12:52.710
So all sites fall
into three categories

00:12:52.710 --> 00:12:54.540
when it comes to SSL adoption.

00:12:54.540 --> 00:12:58.252
There are the sites which
don't offer it at all.

00:12:58.252 --> 00:13:00.880
For HTTP-only
sites, users should

00:13:00.880 --> 00:13:04.370
expect absolutely no security.

00:13:04.370 --> 00:13:06.501
At least they know
what they're getting.

00:13:06.501 --> 00:13:09.410
Then there's sites that
only serve exclusively

00:13:09.410 --> 00:13:12.600
over HTTPS or on SSL.

00:13:12.600 --> 00:13:17.480
And in this case, users should
expect private and untempered

00:13:17.480 --> 00:13:19.890
communication for the
most part, barring

00:13:19.890 --> 00:13:22.802
any bugs we don't know about.

00:13:22.802 --> 00:13:24.360
And the world is a happy place.

00:13:24.360 --> 00:13:27.750
And then there are the sites
that intentionally or sometimes

00:13:27.750 --> 00:13:32.135
even inadvertently are serving
both over HTTP and HTTPS.

00:13:35.280 --> 00:13:38.940
We call this mixed content
or sites with mixed content.

00:13:38.940 --> 00:13:42.480
And this is where we
run into some problems.

00:13:42.480 --> 00:13:44.050
So unfortunately,
situations where

00:13:44.050 --> 00:13:48.810
you're serving some of
your site or some resources

00:13:48.810 --> 00:13:56.650
that you're fetching over HTTP
can lead to downgrade attacks.

00:13:56.650 --> 00:13:59.330
If you can avoid the
situation, you should do it.

00:13:59.330 --> 00:14:02.380
If not, and this is the
case for a lot of sites,

00:14:02.380 --> 00:14:05.390
you're going to need to take
some extra considerations

00:14:05.390 --> 00:14:07.040
into account.

00:14:07.040 --> 00:14:10.060
So as I said, if you're
serving anything over HTTP,

00:14:10.060 --> 00:14:12.760
you need to take some
extra steps to avoid some

00:14:12.760 --> 00:14:14.550
man-in-the-middle attacks.

00:14:14.550 --> 00:14:17.390
These are specific classes
of man-in-the-middle attacks,

00:14:17.390 --> 00:14:19.680
so I talked about
downgrade attacks.

00:14:19.680 --> 00:14:21.630
You can also leak cookies.

00:14:21.630 --> 00:14:23.370
If anybody can
tamper the data, they

00:14:23.370 --> 00:14:26.140
can inject script
and actually do

00:14:26.140 --> 00:14:29.100
a cross-site scripting
attack and render

00:14:29.100 --> 00:14:33.910
script which kind of
uses whatever security

00:14:33.910 --> 00:14:37.452
you would have gotten with SSL.

00:14:37.452 --> 00:14:39.830
Even if you don't
care about security,

00:14:39.830 --> 00:14:41.580
you need to care about
mixed content bugs,

00:14:41.580 --> 00:14:43.620
because browsers
are going to make

00:14:43.620 --> 00:14:46.870
the experience for
your users worse.

00:14:46.870 --> 00:14:51.250
So as of Chrome 29, Chrome
blocks mixed content

00:14:51.250 --> 00:14:55.220
that is coming from an iFrame,
JavaScript, cascading style

00:14:55.220 --> 00:14:57.730
sheets, and plug-in
loads by default.

00:14:57.730 --> 00:14:59.560
Firefox has similar behavior.

00:14:59.560 --> 00:15:02.840
And you can see in
the top bar, that's

00:15:02.840 --> 00:15:04.220
what the Chrome bar looks like.

00:15:04.220 --> 00:15:06.870
If a user tries to visit
your site over SSL,

00:15:06.870 --> 00:15:10.904
but you have any kind of active
content being served over HTTP,

00:15:10.904 --> 00:15:12.320
it's not going to
load by default.

00:15:12.320 --> 00:15:14.220
And they're going to actually
have to click to load.

00:15:14.220 --> 00:15:15.690
So your page is
probably going to break.

00:15:15.690 --> 00:15:17.530
Your user's going to
be annoyed because they

00:15:17.530 --> 00:15:19.696
have to press a button just
to get the page to work.

00:15:19.696 --> 00:15:21.970
And that sucks.

00:15:21.970 --> 00:15:26.690
Also, browsers block other
types of content like images--

00:15:26.690 --> 00:15:28.810
or they don't block them,
but you automatically

00:15:28.810 --> 00:15:31.050
lose your green icon.

00:15:31.050 --> 00:15:35.350
So you lose that warm,
fuzzy kind of assurance

00:15:35.350 --> 00:15:39.960
to users that you care about
security, because you're

00:15:39.960 --> 00:15:42.260
serving some mixed content.

00:15:42.260 --> 00:15:44.790
You'll see a little warning in
Chrome that you can click on.

00:15:44.790 --> 00:15:49.570
So as I said, even if you
don't care about mixed content,

00:15:49.570 --> 00:15:51.720
for security's sake,
you should care about it

00:15:51.720 --> 00:15:54.670
because users are going to get
a degraded experience when they

00:15:54.670 --> 00:15:56.875
visit your sites, at least
in Chrome and Firefox.

00:15:59.380 --> 00:16:02.240
So how do we actually
fix mixed content bugs?

00:16:02.240 --> 00:16:04.705
Thankfully, it's fairly easy.

00:16:04.705 --> 00:16:07.080
What we need to do is make
sure that all of our resources

00:16:07.080 --> 00:16:12.390
are loaded by HTTPS, that
are loaded on a HTTPS page

00:16:12.390 --> 00:16:14.480
by HTTPS.

00:16:14.480 --> 00:16:16.620
So if these resources
are on the same domain,

00:16:16.620 --> 00:16:19.350
you can just use relative URLs.

00:16:19.350 --> 00:16:21.200
If you have to use
an absolute path,

00:16:21.200 --> 00:16:24.830
you want to omit the
scheme or the protocol,

00:16:24.830 --> 00:16:27.130
and the browser will
figure it out by itself.

00:16:27.130 --> 00:16:29.250
In the second
example, I actually

00:16:29.250 --> 00:16:32.720
include an example of a
scheme-relative URL, which

00:16:32.720 --> 00:16:34.970
can look kind of funky if
you've never seen it before,

00:16:34.970 --> 00:16:38.180
but it works.

00:16:38.180 --> 00:16:40.880
So that's how you fix
mixed content bugs.

00:16:40.880 --> 00:16:42.960
Not too hard.

00:16:42.960 --> 00:16:48.009
Mixed content is a big
one, maybe, arguably,

00:16:48.009 --> 00:16:50.300
the one that's a little bit
harder to fix because there

00:16:50.300 --> 00:16:51.716
may be multiple
instances of this.

00:16:51.716 --> 00:16:55.510
But another really common
application bug that I've seen

00:16:55.510 --> 00:16:59.324
is not preventing sensitive
cookies from leaking over HTTP.

00:16:59.324 --> 00:17:00.740
So if your cookies
are sensitive--

00:17:00.740 --> 00:17:03.620
and in a lot of cases, they are.

00:17:03.620 --> 00:17:06.030
They're doing something
with authentication or safe

00:17:06.030 --> 00:17:08.980
preferences-- it's
imperative that you ensure

00:17:08.980 --> 00:17:12.683
they don't get sent
over an HTTP connection.

00:17:12.683 --> 00:17:14.099
And to do this,
you have to ensure

00:17:14.099 --> 00:17:17.040
that you have the secure bit
set on your site cookie header.

00:17:17.040 --> 00:17:19.890
It's unfortunate
that it requires

00:17:19.890 --> 00:17:22.950
that, because a lot of
apps have missed that.

00:17:22.950 --> 00:17:25.099
And this is actually
how Firesheep worked.

00:17:25.099 --> 00:17:27.450
It relied on the fact
that a lot of sites

00:17:27.450 --> 00:17:31.510
were not setting sensitive
cookies with a secure bit,

00:17:31.510 --> 00:17:36.500
and they're easy
to sniff and used

00:17:36.500 --> 00:17:38.520
to hijack people's accounts.

00:17:42.630 --> 00:17:46.030
So a recent
interesting development

00:17:46.030 --> 00:17:48.640
in the wild world
of SSL is something

00:17:48.640 --> 00:17:51.250
called Strict
Transport Security.

00:17:51.250 --> 00:17:53.690
This is a mechanism that
allows websites to opt

00:17:53.690 --> 00:17:59.610
in for HTTPS-only rendering
and also strict HTTPS

00:17:59.610 --> 00:18:01.429
start validation.

00:18:01.429 --> 00:18:02.970
So the first tool
I mentioned, called

00:18:02.970 --> 00:18:06.410
SSLstrip, it exploited the
fact that most people don't

00:18:06.410 --> 00:18:09.225
type in HTTPS when
they visit a site.

00:18:09.225 --> 00:18:11.600
They're typing just the domain
name or clicking on a link

00:18:11.600 --> 00:18:14.070
or going to some bookmark.

00:18:14.070 --> 00:18:17.570
And in that case, there's a
small window of opportunity

00:18:17.570 --> 00:18:20.350
where the user makes HTTP
request that someone's allowed

00:18:20.350 --> 00:18:21.460
to man-in-the-middle.

00:18:21.460 --> 00:18:26.050
So Strict Transport Security,
or HSTS, as it's abbreviated,

00:18:26.050 --> 00:18:30.650
attempts to address that threat.

00:18:30.650 --> 00:18:33.750
Once this header is
saved in the browser,

00:18:33.750 --> 00:18:36.300
it's going to bump up
automatically all HTTP traffic

00:18:36.300 --> 00:18:38.330
to HTTPS.

00:18:38.330 --> 00:18:45.010
And it will reject
any attempts to visit

00:18:45.010 --> 00:18:48.300
that site over a
non-encrypted channel.

00:18:48.300 --> 00:18:51.220
So this is actually really good.

00:18:51.220 --> 00:18:55.180
I'm seeing more
sites adopt this.

00:18:55.180 --> 00:18:58.530
There's still a very, very
small window of opportunity that

00:18:58.530 --> 00:19:02.300
an attacker can
man-in-the-middle,

00:19:02.300 --> 00:19:04.690
where someone's just
installed the browser,

00:19:04.690 --> 00:19:07.680
and they actually don't
have this header set yet

00:19:07.680 --> 00:19:09.410
by the application.

00:19:09.410 --> 00:19:12.090
So Chrome and Firefox
actually come up

00:19:12.090 --> 00:19:15.790
with some hard-coded
sites that have

00:19:15.790 --> 00:19:19.860
elected into always using HSTS.

00:19:19.860 --> 00:19:21.380
Some examples are
Twitter, Paypal.

00:19:21.380 --> 00:19:23.640
There's Google Sites
on there and LastPass.

00:19:23.640 --> 00:19:25.640
If you as a developer
want your site

00:19:25.640 --> 00:19:27.640
to only be ever
accessed over SSL,

00:19:27.640 --> 00:19:30.760
you can actually
just file a bug.

00:19:30.760 --> 00:19:33.200
If you visit the
link on the slide,

00:19:33.200 --> 00:19:35.240
you'll get all the
right contacts.

00:19:35.240 --> 00:19:39.360
And we can include your site as
well in this hard-coded list.

00:19:39.360 --> 00:19:43.520
But that's Strict
Transport Security.

00:19:43.520 --> 00:19:45.340
Another cool and
even more recent

00:19:45.340 --> 00:19:48.660
development is something
called Public Key Pinning.

00:19:48.660 --> 00:19:50.690
So Public Key
Pinning is designed

00:19:50.690 --> 00:19:53.120
to give website
operators a means

00:19:53.120 --> 00:19:56.530
to restrict which certificate
authorities can actually

00:19:56.530 --> 00:19:59.290
issue certificates
for their sites.

00:19:59.290 --> 00:20:05.890
So this feature's been deployed
for Google Chrome for a while,

00:20:05.890 --> 00:20:09.150
and it has proven to
be useful in preventing

00:20:09.150 --> 00:20:11.570
attacks and actually making
the public aware of them.

00:20:11.570 --> 00:20:14.860
So if people-- you potentially
heard about on the news

00:20:14.860 --> 00:20:17.070
how there was a Dutch
CA that was exploited

00:20:17.070 --> 00:20:22.100
in issuing forged
certificates for Google.com.

00:20:24.843 --> 00:20:26.760
It was believed
that hackers were

00:20:26.760 --> 00:20:28.590
targeting Iranian citizens.

00:20:28.590 --> 00:20:31.300
Cert pinning is the feature
that actually allowed

00:20:31.300 --> 00:20:35.810
us to detect these forged certs.

00:20:35.810 --> 00:20:40.030
So there are two proposals
being worked on right now

00:20:40.030 --> 00:20:42.450
to try to make this a standard.

00:20:42.450 --> 00:20:45.020
And we're hoping
that that happens

00:20:45.020 --> 00:20:48.590
and that other
websites can actually

00:20:48.590 --> 00:20:52.240
use the public key pinning
feature at some point.

00:20:56.670 --> 00:20:59.590
So I've spent my
entire time talking

00:20:59.590 --> 00:21:02.780
about how awesome
SSL is, but I do

00:21:02.780 --> 00:21:06.290
want to make sure people
leave with a totally

00:21:06.290 --> 00:21:08.120
accurate impression of
what this gives you.

00:21:08.120 --> 00:21:10.950
Because SSL is not a
security silver bullet.

00:21:10.950 --> 00:21:11.450
It's good.

00:21:11.450 --> 00:21:13.320
You need to do it.

00:21:13.320 --> 00:21:16.285
It's not security magic
dust, and the only thing

00:21:16.285 --> 00:21:17.100
you have to do.

00:21:17.100 --> 00:21:20.210
So go over a couple disclaimers.

00:21:20.210 --> 00:21:22.840
So first SSL-- it
doesn't actually

00:21:22.840 --> 00:21:25.940
guarantee 100% privacy.

00:21:25.940 --> 00:21:29.440
So we're piggybacking HTTP
entirely on top of SSL.

00:21:29.440 --> 00:21:31.940
So we know that all
of that is encrypted.

00:21:31.940 --> 00:21:35.212
We get the request
URL, query parameters,

00:21:35.212 --> 00:21:37.170
contents of the page,
headers and cookies-- all

00:21:37.170 --> 00:21:38.378
that's encrypted and private.

00:21:38.378 --> 00:21:40.290
So this is good.

00:21:40.290 --> 00:21:46.600
But SSL is working on
top of the TCP layer,

00:21:46.600 --> 00:21:50.577
which requires IP
address and port numbers.

00:21:50.577 --> 00:21:52.910
So these are necessarily going
to be leaking to somebody

00:21:52.910 --> 00:21:57.480
who's listening on
an open network.

00:21:57.480 --> 00:22:00.350
And also, while you can't
infer the actual contents

00:22:00.350 --> 00:22:02.040
of the communication,
you can still

00:22:02.040 --> 00:22:04.164
infer the amount and duration
of the communication.

00:22:04.164 --> 00:22:07.080
So you're potentially left
open to some kind of traffic

00:22:07.080 --> 00:22:11.140
analysis or pattern
analysis attacks.

00:22:11.140 --> 00:22:15.790
And in very specific
services, it's

00:22:15.790 --> 00:22:17.610
been demonstrated
that you can infer

00:22:17.610 --> 00:22:19.334
something useful from this.

00:22:19.334 --> 00:22:21.500
And people have countered
this with padding attacks.

00:22:21.500 --> 00:22:23.730
But the reality is this
is just not something

00:22:23.730 --> 00:22:26.000
that the vast majority
of applications

00:22:26.000 --> 00:22:27.870
are going to need
to worry about.

00:22:27.870 --> 00:22:31.700
But you should know that there
are some information side

00:22:31.700 --> 00:22:34.090
channels that are being leaked.

00:22:34.090 --> 00:22:37.240
So also, as I said, SSL
is a transfer protocol,

00:22:37.240 --> 00:22:41.680
so attacks at other layers
are not going to be prevented.

00:22:41.680 --> 00:22:43.940
So in particular,
IP level threats,

00:22:43.940 --> 00:22:46.900
a denial of service attacks,
or any kind of network spoofing

00:22:46.900 --> 00:22:49.640
attacks, they're are
not protected by SSL.

00:22:49.640 --> 00:22:52.724
And then also, you'll have to
consider other web application

00:22:52.724 --> 00:22:53.390
vulnerabilities.

00:22:53.390 --> 00:22:56.820
If you've heard of cross-site
scripting or SQL injections,

00:22:56.820 --> 00:22:59.430
these things are
prevented by SSL.

00:22:59.430 --> 00:23:03.470
So you still got to think
about that, but that said,

00:23:03.470 --> 00:23:07.770
SSL is the best
thing we have today

00:23:07.770 --> 00:23:12.060
as far as protecting
users' communication, data

00:23:12.060 --> 00:23:16.392
communication, and ensuring
any kind of level of security

00:23:16.392 --> 00:23:17.600
for your site and your users.

00:23:20.450 --> 00:23:26.890
So earlier this week, a couple
of days ago, the EFF published

00:23:26.890 --> 00:23:31.690
this article with associated
info graphic about

00:23:31.690 --> 00:23:34.750
SSL's adoption from the
list of companies in their

00:23:34.750 --> 00:23:36.330
"Who's Got Your Back?" program.

00:23:36.330 --> 00:23:39.010
So the program
are companies that

00:23:39.010 --> 00:23:44.030
have committed to preventing
unlawful government

00:23:44.030 --> 00:23:46.500
access to their data.

00:23:46.500 --> 00:23:48.560
I think it's interesting.

00:23:48.560 --> 00:23:54.000
Go Google, go Twitter, go
Dropbox and some other ones

00:23:54.000 --> 00:23:56.497
that are getting five stars
across the board for what

00:23:56.497 --> 00:23:57.080
they're doing.

00:23:57.080 --> 00:23:59.790
But I think this is interesting
for people as a user.

00:23:59.790 --> 00:24:00.960
You should check this out.

00:24:00.960 --> 00:24:04.840
And you should be demanding
SSL for the services you use.

00:24:04.840 --> 00:24:07.980
So file bugs,
chime in on forums,

00:24:07.980 --> 00:24:11.270
and grab your
digital pitchforks.

00:24:11.270 --> 00:24:13.440
Demand SSL for what you use.

00:24:13.440 --> 00:24:16.290
And provide it for users, too.

00:24:16.290 --> 00:24:18.180
This is another cool project.

00:24:18.180 --> 00:24:22.510
It's called SSL Pulse,
and this project

00:24:22.510 --> 00:24:25.230
aims to measure the
effect of security of SSL

00:24:25.230 --> 00:24:27.190
across the internet.

00:24:27.190 --> 00:24:30.840
So they look at about
200,000 SSL-enabled websites

00:24:30.840 --> 00:24:34.430
from Alexa's list of
most popular sites.

00:24:34.430 --> 00:24:36.530
They refresh their
data every month.

00:24:36.530 --> 00:24:39.257
And this is just two graphs.

00:24:39.257 --> 00:24:40.965
I encourage you to
check out the project,

00:24:40.965 --> 00:24:42.756
because they show a
lot of other statistics

00:24:42.756 --> 00:24:45.710
about where we're at SSL-wise.

00:24:45.710 --> 00:24:50.230
And they kept the same
methodology and sample approach

00:24:50.230 --> 00:24:54.385
for the past two years, so you
can kind of see trends in SSL.

00:24:54.385 --> 00:25:00.650
A year ago today, November 2012,
we had about just under 15%

00:25:00.650 --> 00:25:01.640
of SSL adoption.

00:25:01.640 --> 00:25:04.070
So it's really cool
to see that we're now

00:25:04.070 --> 00:25:07.970
over 50% adoption, at
least in these top sites.

00:25:07.970 --> 00:25:11.330
But we need your help to
help push that even further.

00:25:14.410 --> 00:25:17.630
And yeah, that's it.

00:25:17.630 --> 00:25:19.430
I hope you're not
just hungry for lunch,

00:25:19.430 --> 00:25:20.960
but hungry to get SSL working.

00:25:20.960 --> 00:25:27.316
I promise you that if you're
not enjoying the summit or need

00:25:27.316 --> 00:25:28.690
something to do
this evening, you

00:25:28.690 --> 00:25:32.830
can get SSL set up on a personal
site for free-- startSSL.com--

00:25:32.830 --> 00:25:35.000
in less than an hour,
and that's while you're

00:25:35.000 --> 00:25:38.380
chatting with your friends and
like eating a bag of chips.

00:25:38.380 --> 00:25:39.680
Test it out.

00:25:39.680 --> 00:25:41.000
Get it working.

00:25:41.000 --> 00:25:42.650
Get SSL.

00:25:42.650 --> 00:25:45.937
[APPLAUSE]

