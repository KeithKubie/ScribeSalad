WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.600
[MUSIC PLAYING]

00:00:03.600 --> 00:00:07.390
LAUREN MYTTON: Policy is, in
part, a very technical issue.

00:00:07.390 --> 00:00:09.390
And when we talk about
policy, we normally

00:00:09.390 --> 00:00:13.770
talk about things like
ANRs, frame rates, hardware

00:00:13.770 --> 00:00:17.780
utilization, and so on.

00:00:17.780 --> 00:00:21.280
And those terms are great
for helping us to deconstruct

00:00:21.280 --> 00:00:25.090
and measure quality, but
they don't necessarily

00:00:25.090 --> 00:00:28.020
help us to connect with users.

00:00:28.020 --> 00:00:30.780
And users are where
everything starts from.

00:00:30.780 --> 00:00:34.810
So I want to start there, too.

00:00:34.810 --> 00:00:37.990
Put your user hat
on for a moment.

00:00:37.990 --> 00:00:41.800
Think back to the last time
you were playing a game

00:00:41.800 --> 00:00:45.790
or using an app, and it didn't
work as you had expected.

00:00:45.790 --> 00:00:49.435
Maybe the game frame rate was
erratic, maybe the app crashed.

00:00:51.950 --> 00:00:56.510
Whatever it was, I'm sure
you had no difficulty

00:00:56.510 --> 00:01:00.150
in recalling that experience.

00:01:00.150 --> 00:01:02.210
And I'm also pretty
certain that most of you

00:01:02.210 --> 00:01:06.050
will remember the app or
the game that caused this.

00:01:06.050 --> 00:01:09.500
In fact, some of you possibly
don't use that anymore.

00:01:09.500 --> 00:01:13.350
You've uninstalled
it as a result.

00:01:13.350 --> 00:01:16.670
So it's probably not a
surprise to any of you

00:01:16.670 --> 00:01:19.130
when I tell you that low
quality apps are ultimately

00:01:19.130 --> 00:01:22.250
less successful apps.

00:01:22.250 --> 00:01:27.570
But let me be more specific,
since I have the data to do so.

00:01:27.570 --> 00:01:33.240
Apps with the lowest stability
get 26% more one-star reviews

00:01:33.240 --> 00:01:37.710
from users than those
with the best ability.

00:01:37.710 --> 00:01:44.100
Users also engage 4%
less with these apps.

00:01:44.100 --> 00:01:48.160
And if you are a game developer,
the story's a lot worse.

00:01:48.160 --> 00:01:50.670
It's actually
about twice as bad.

00:01:50.670 --> 00:01:54.570
Users leave you 58% more
one-star reviews if you're

00:01:54.570 --> 00:02:00.300
unstable, and your
engagement drops by about 8%.

00:02:00.300 --> 00:02:02.820
Now, looking at
these percentages,

00:02:02.820 --> 00:02:07.070
you might think, well, the
numbers 4 and 8 seem quite low

00:02:07.070 --> 00:02:10.130
compared to the 26 and the 58.

00:02:10.130 --> 00:02:11.630
But when you think
about engagement,

00:02:11.630 --> 00:02:13.047
think about what
it actually means

00:02:13.047 --> 00:02:16.070
to you and your business
to increase engagement

00:02:16.070 --> 00:02:17.572
by 4% or 8%.

00:02:17.572 --> 00:02:19.280
Think about what that
actually translates

00:02:19.280 --> 00:02:22.820
into in terms of monetization.

00:02:22.820 --> 00:02:25.460
And you'll realize that
a 8% drop in engagement

00:02:25.460 --> 00:02:29.120
or even a 4% drop is
absolutely not trivial.

00:02:29.120 --> 00:02:32.180
These are really
not small effects.

00:02:32.180 --> 00:02:34.520
Play cares so much
about user experience

00:02:34.520 --> 00:02:38.270
that, as we've said in the
past, your app's behavior

00:02:38.270 --> 00:02:41.510
on these metrics as well
as some other core vitals

00:02:41.510 --> 00:02:43.950
has an impact on your
discoverability in the Play

00:02:43.950 --> 00:02:48.620
Store and on your eligibility
for editorial collections.

00:02:54.820 --> 00:02:58.330
So that brings me to
something that you all

00:02:58.330 --> 00:03:02.710
have in common here today,
which most people do not--

00:03:02.710 --> 00:03:04.490
you're developers.

00:03:04.490 --> 00:03:06.640
You have the amazing
power and privilege

00:03:06.640 --> 00:03:11.230
that comes with being able to
create experiences for others

00:03:11.230 --> 00:03:15.320
on Android, whether
on mobile or beyond.

00:03:15.320 --> 00:03:17.180
And if you're here
today, then you

00:03:17.180 --> 00:03:20.850
care that those
experiences are good ones.

00:03:20.850 --> 00:03:23.760
Now, my colleagues
and I also care, too.

00:03:23.760 --> 00:03:25.740
We see it as our
shared responsibility

00:03:25.740 --> 00:03:28.410
with you, the Android
Developer community,

00:03:28.410 --> 00:03:34.430
to create the best possible
experiences for users on Play.

00:03:34.430 --> 00:03:39.420
And we know that quality
isn't an end in and of itself.

00:03:39.420 --> 00:03:43.030
I'm sure you've all got bigger
business goals than that.

00:03:43.030 --> 00:03:45.330
But what this shows
is that if you

00:03:45.330 --> 00:03:47.790
want to achieve
your larger goals,

00:03:47.790 --> 00:03:49.635
you can't avoid
thinking about quality.

00:03:52.570 --> 00:03:57.330
So we have tools that we've
developed on the Play Console

00:03:57.330 --> 00:03:59.340
to help you measure
and manage our quality

00:03:59.340 --> 00:04:01.330
across your
development lifecycle.

00:04:01.330 --> 00:04:03.180
There are two primary tools--

00:04:03.180 --> 00:04:06.960
the pre-launch report
and Android vitals.

00:04:06.960 --> 00:04:10.430
The pre-launch report allows
you to test your app before you

00:04:10.430 --> 00:04:12.800
release to real users.

00:04:12.800 --> 00:04:17.000
It works by installing your
APK on a number of devices

00:04:17.000 --> 00:04:18.620
in our Test Lab.

00:04:18.620 --> 00:04:21.079
And then we can either
call your app randomly

00:04:21.079 --> 00:04:23.600
or you can tell us
through scripts or game

00:04:23.600 --> 00:04:27.540
loops, the paths that
you want us to take.

00:04:27.540 --> 00:04:32.040
Vitals identifies issues for
real users, primarily, users

00:04:32.040 --> 00:04:35.610
that are in production, but
also in your test tracks,

00:04:35.610 --> 00:04:37.960
if you have enough users.

00:04:37.960 --> 00:04:40.630
These are tools that many
of you are already using

00:04:40.630 --> 00:04:43.385
and some of you have come
to office hours to discuss.

00:04:43.385 --> 00:04:45.010
And they help you
with quality not just

00:04:45.010 --> 00:04:48.640
when you first launch your title
but for every subsequent launch

00:04:48.640 --> 00:04:50.820
as well.

00:04:50.820 --> 00:04:52.680
And we know from
the feedback we've

00:04:52.680 --> 00:04:56.070
had from developers that
these tools are really,

00:04:56.070 --> 00:04:58.860
really helping you to manage
your quality in service

00:04:58.860 --> 00:05:00.570
of those larger goals.

00:05:00.570 --> 00:05:02.130
We have a couple of
case studies here

00:05:02.130 --> 00:05:04.000
from app and game developers.

00:05:04.000 --> 00:05:06.770
But we have many more.

00:05:06.770 --> 00:05:11.780
But we also know that quality
is a job that's never done.

00:05:11.780 --> 00:05:14.990
And you've given us plenty of
feedback about where we still

00:05:14.990 --> 00:05:17.650
have more work to do.

00:05:17.650 --> 00:05:21.460
There are three particular
things that we hear from you.

00:05:21.460 --> 00:05:25.030
One, you want us to help
you anticipate issues

00:05:25.030 --> 00:05:27.760
before they happen, before
they actually reach your users.

00:05:30.610 --> 00:05:35.005
Two, you want us to help you
prioritize the issues that you

00:05:35.005 --> 00:05:40.180
know about, which ones should
you tackle and in which order.

00:05:40.180 --> 00:05:43.010
And three, having
made those decisions,

00:05:43.010 --> 00:05:44.760
you actually want us
to help you fix them.

00:05:44.760 --> 00:05:48.030
You need us to help you
more with the debugging.

00:05:48.030 --> 00:05:49.768
So today, we're
going to talk to you

00:05:49.768 --> 00:05:51.810
about some of the ways in
which we're helping you

00:05:51.810 --> 00:05:53.280
in each of these areas.

00:05:53.280 --> 00:05:57.610
And some new features that
we're excited to talk about

00:05:57.610 --> 00:06:00.760
to kick things off, we're going
to talk about anticipating.

00:06:00.760 --> 00:06:04.587
And I'm going to introduce
my colleague James to do so.

00:06:04.587 --> 00:06:08.900
[APPLAUSE]

00:06:08.900 --> 00:06:10.280
JAMES HEATHER: Thanks, Lauren.

00:06:10.280 --> 00:06:11.613
My name is James, James Heather.

00:06:11.613 --> 00:06:16.383
I am an engineering manager
on the Play Console team.

00:06:16.383 --> 00:06:17.800
The first new
feature that we want

00:06:17.800 --> 00:06:21.430
to talk about today in this
important area of anticipating

00:06:21.430 --> 00:06:24.220
quality issues is in
the pre-launch report.

00:06:24.220 --> 00:06:26.230
Now, one of the key
strengths of Android

00:06:26.230 --> 00:06:29.200
is its openness and,
consequently, its availability

00:06:29.200 --> 00:06:31.028
on a huge range of hardware.

00:06:31.028 --> 00:06:33.070
There is a vast array of
different Android models

00:06:33.070 --> 00:06:34.030
out there.

00:06:34.030 --> 00:06:35.210
That's a good thing.

00:06:35.210 --> 00:06:37.510
But, of course, it comes
with an associated challenge

00:06:37.510 --> 00:06:38.710
for developers.

00:06:38.710 --> 00:06:42.040
You've tested your app or
your game on physical devices

00:06:42.040 --> 00:06:44.530
that you have and on a
variety of emulators.

00:06:44.530 --> 00:06:48.310
But how can you be sure
that it will work correctly

00:06:48.310 --> 00:06:52.810
on real end user devices that
you don't have access to?

00:06:52.810 --> 00:06:56.140
This is where the pre-launch
report, or PLR, comes in.

00:06:56.140 --> 00:06:58.000
As Lauren said,
PLR will give you

00:06:58.000 --> 00:07:01.360
information about how your
app performs on real hardware

00:07:01.360 --> 00:07:04.240
devices based on our crawls.

00:07:04.240 --> 00:07:05.710
This is what it
looks like when you

00:07:05.710 --> 00:07:08.200
see the results of our
crawl in the Play Console.

00:07:08.200 --> 00:07:14.430
We can help you find stability
problems, crashes, ANRs,

00:07:14.430 --> 00:07:17.550
either device-specific
or more general ones,

00:07:17.550 --> 00:07:20.190
performance issues-- are you
consuming high levels of system

00:07:20.190 --> 00:07:22.420
resources--

00:07:22.420 --> 00:07:27.050
violations of Android
accessibility guidelines,

00:07:27.050 --> 00:07:30.270
devices on which your app
just doesn't look right--

00:07:30.270 --> 00:07:31.910
we can provide
screenshots for you

00:07:31.910 --> 00:07:35.220
to check from real hardware--

00:07:35.220 --> 00:07:37.690
and security problems,
if your app contains

00:07:37.690 --> 00:07:39.850
vulnerabilities that
we can identify.

00:07:39.850 --> 00:07:42.130
But now, we have one more
signal that we've added

00:07:42.130 --> 00:07:45.340
to help future proof your app.

00:07:45.340 --> 00:07:47.208
Some of you will
remember that last year,

00:07:47.208 --> 00:07:48.750
we made an announcement
that we would

00:07:48.750 --> 00:07:52.500
start restricting usage
of non-SDK interfaces

00:07:52.500 --> 00:07:54.540
from Android P onwards.

00:07:54.540 --> 00:07:57.240
In case that doesn't ring a
bell, let me briefly explain.

00:07:57.240 --> 00:08:01.080
Every SDK contains an API
that you're supposed to use

00:08:01.080 --> 00:08:02.670
and internals that,
as a developer,

00:08:02.670 --> 00:08:05.720
you are not supposed to rely
on because they might change

00:08:05.720 --> 00:08:09.570
and that will cause crashes
or unexpected behavior.

00:08:09.570 --> 00:08:11.500
The Android SDK is no exception.

00:08:11.500 --> 00:08:14.220
There are internal methods,
private methods and fields,

00:08:14.220 --> 00:08:19.190
that aren't intended to be
used by external programs.

00:08:19.190 --> 00:08:21.680
In P, one of the
changes that we made

00:08:21.680 --> 00:08:23.540
was to start restricting
access to some

00:08:23.540 --> 00:08:25.700
of these non-SDK
interfaces in order

00:08:25.700 --> 00:08:28.520
to make sure that apps don't
rely on internal state that

00:08:28.520 --> 00:08:30.290
might change.

00:08:30.290 --> 00:08:32.630
And that should bring
benefits to end users

00:08:32.630 --> 00:08:35.840
in terms of the stability of the
apps that they use every day.

00:08:35.840 --> 00:08:38.450
We're going to be restricting a
few more of those in Android Q

00:08:38.450 --> 00:08:41.250
to improve long-term
stability even further.

00:08:41.250 --> 00:08:43.990
You'll be able to find the full
list on the Android Developers

00:08:43.990 --> 00:08:45.200
website.

00:08:45.200 --> 00:08:48.650
Our aim is to do this in the
most stable way that we can

00:08:48.650 --> 00:08:50.330
so that we don't
crash your apps.

00:08:50.330 --> 00:08:52.490
We've started by
restricting interfaces

00:08:52.490 --> 00:08:54.430
that weren't in use at all.

00:08:54.430 --> 00:08:56.390
And we're adding
public alternatives

00:08:56.390 --> 00:09:00.950
whenever we find use cases
for these restricted APIs.

00:09:00.950 --> 00:09:02.960
The restrictions on
devices running Q

00:09:02.960 --> 00:09:05.210
will mostly be based
on the Android version

00:09:05.210 --> 00:09:07.100
you're targeting.

00:09:07.100 --> 00:09:09.620
So it doesn't mean that users
will start seeing crashes

00:09:09.620 --> 00:09:12.140
when they update to
Android Q. But it

00:09:12.140 --> 00:09:14.390
does mean that you'll want
to be aware of these issues

00:09:14.390 --> 00:09:17.630
before you release an
update that targets Q.

00:09:17.630 --> 00:09:19.790
This is important even
if you're not explicitly

00:09:19.790 --> 00:09:22.880
using non-SDK
interfaces in your code

00:09:22.880 --> 00:09:25.280
because we found
that in some cases,

00:09:25.280 --> 00:09:27.680
the calls are being made by
third-party libraries, where

00:09:27.680 --> 00:09:31.770
you might not even be aware
that you're making those calls.

00:09:31.770 --> 00:09:35.670
The blacklist will apply
to all apps on a device,

00:09:35.670 --> 00:09:38.210
regardless of what
the target SDK is.

00:09:38.210 --> 00:09:40.280
The APIs on the
blacklist are ones

00:09:40.280 --> 00:09:41.840
that we believe
are not being used

00:09:41.840 --> 00:09:44.150
by any external
developers anywhere

00:09:44.150 --> 00:09:45.678
with apps in the Play Store.

00:09:45.678 --> 00:09:47.720
And the restrictions are
there to stop developers

00:09:47.720 --> 00:09:50.490
from starting to use them.

00:09:50.490 --> 00:09:53.890
So as of right now,
you will be able to see

00:09:53.890 --> 00:09:57.760
Android compatibility issues
in the pre-launch report.

00:09:57.760 --> 00:10:00.510
The first change to PLR
is in the Overview page,

00:10:00.510 --> 00:10:02.470
where we've added
some new information.

00:10:02.470 --> 00:10:05.880
You can see the extra entry
for Android compatibility

00:10:05.880 --> 00:10:07.840
in PLR, where you'll
see that in this run,

00:10:07.840 --> 00:10:11.890
we've identified four
errors and five warnings.

00:10:11.890 --> 00:10:14.390
Further down the page,
you can see more details

00:10:14.390 --> 00:10:17.230
and a link that brings you
to the full list of issues

00:10:17.230 --> 00:10:18.760
we've found.

00:10:18.760 --> 00:10:21.130
You can also find the
information on the tab

00:10:21.130 --> 00:10:23.080
at the top that used
to be called Crashes,

00:10:23.080 --> 00:10:24.550
but we're now
calling it Stability

00:10:24.550 --> 00:10:27.010
because, really, it contains
a lot more than just

00:10:27.010 --> 00:10:28.500
crash reports.

00:10:28.500 --> 00:10:31.900
And you can see how we call
out two types of issue--

00:10:31.900 --> 00:10:35.560
errors, meaning use of APIs that
are restricted and will cause

00:10:35.560 --> 00:10:39.670
your app to crash, and warnings,
which indicate use of APIs that

00:10:39.670 --> 00:10:42.460
are unsupported and so
could still misbehave

00:10:42.460 --> 00:10:46.358
and might be restricted in
future versions of Android.

00:10:46.358 --> 00:10:48.150
And in order to make
it as easy as possible

00:10:48.150 --> 00:10:50.260
for you to prioritize
and fix the issues,

00:10:50.260 --> 00:10:52.060
we help in a number of ways.

00:10:52.060 --> 00:10:54.270
First off, we give
the type of issue--

00:10:54.270 --> 00:10:56.100
is it fully
restricted, so it will

00:10:56.100 --> 00:10:58.380
break in Android P onwards--

00:10:58.380 --> 00:11:02.940
or unsupported, planned for
restriction in Android Q,

00:11:02.940 --> 00:11:05.410
or unsupported and
might be restricted

00:11:05.410 --> 00:11:07.730
at some point in the future.

00:11:07.730 --> 00:11:10.000
Secondly, we list
each specific API

00:11:10.000 --> 00:11:13.282
that we find in order of
how often the API was called

00:11:13.282 --> 00:11:15.490
so that it is likely that
the most important one will

00:11:15.490 --> 00:11:16.590
be at the top.

00:11:16.590 --> 00:11:19.060
And finally, we give
up to 20 of the stack

00:11:19.060 --> 00:11:21.190
traces where that
API was invoked

00:11:21.190 --> 00:11:23.410
so that you can locate
it in your code base

00:11:23.410 --> 00:11:25.840
and find an alternative
approach that doesn't involve

00:11:25.840 --> 00:11:28.120
using non-SDK interfaces.

00:11:28.120 --> 00:11:30.400
All of this functionality
is live now.

00:11:30.400 --> 00:11:32.530
And by the end of May,
you'll be able to test

00:11:32.530 --> 00:11:34.390
your apps on devices
running Android

00:11:34.390 --> 00:11:36.967
Q in the pre-launch report.

00:11:36.967 --> 00:11:39.550
But there are a couple of things
you might need to think about

00:11:39.550 --> 00:11:41.830
to get the most from
this, and, in fact

00:11:41.830 --> 00:11:45.460
to get the most from the
pre-launch report, in general.

00:11:45.460 --> 00:11:48.190
First, some apps need
credentials to get

00:11:48.190 --> 00:11:50.560
beyond an opening login screen.

00:11:50.560 --> 00:11:52.780
And as smart as our
crawler is, it probably

00:11:52.780 --> 00:11:55.210
can't guess your password.

00:11:55.210 --> 00:11:59.660
What we recommend that you do
is create some test credentials

00:11:59.660 --> 00:12:02.055
that you don't use
for any other purpose.

00:12:02.055 --> 00:12:03.680
And if you then enter
those credentials

00:12:03.680 --> 00:12:06.590
into the Settings tab
of PLR, we are then

00:12:06.590 --> 00:12:09.200
able to use them to log
on when we crawl your app.

00:12:09.200 --> 00:12:12.080
And that will enable us
to test more of your app

00:12:12.080 --> 00:12:15.180
and go further.

00:12:15.180 --> 00:12:16.800
Secondly, if you're
developing a game,

00:12:16.800 --> 00:12:18.540
then you might
want to provide us

00:12:18.540 --> 00:12:20.130
with something that
helps us to test

00:12:20.130 --> 00:12:21.780
the key parts of
the game that are

00:12:21.780 --> 00:12:24.090
beyond the reach of a crawler.

00:12:24.090 --> 00:12:26.820
In order to do that, you
can build a game loop

00:12:26.820 --> 00:12:28.320
and share it with us.

00:12:28.320 --> 00:12:30.300
You just need to
ensure that you respond

00:12:30.300 --> 00:12:36.210
to an intent of conduct,
google.intent.action.testloop,

00:12:36.210 --> 00:12:38.400
and use that to
initiate the game loop.

00:12:38.400 --> 00:12:40.830
That means that we can run
the important sequences

00:12:40.830 --> 00:12:44.250
of your game on devices that
you don't have access to and let

00:12:44.250 --> 00:12:45.750
you know what we find.

00:12:45.750 --> 00:12:48.060
For the visuals, this is
particularly important

00:12:48.060 --> 00:12:50.310
because you can then
download the entire video

00:12:50.310 --> 00:12:53.023
stream from PLR and
check that the game looks

00:12:53.023 --> 00:12:54.315
as it should do on each device.

00:12:57.040 --> 00:12:59.730
Thirdly, don't
forget that issues

00:12:59.730 --> 00:13:01.950
on new versions of
Android can show up

00:13:01.950 --> 00:13:05.550
not just in compatibility
results but also in crashes.

00:13:05.550 --> 00:13:08.730
In vitals, you can find crashes
on a given Android release

00:13:08.730 --> 00:13:10.350
by filtering.

00:13:10.350 --> 00:13:14.220
And in PLR, you can find
crashes on particular versions

00:13:14.220 --> 00:13:16.963
of Android just by
scanning down the results.

00:13:16.963 --> 00:13:18.630
Note that it's really
important that you

00:13:18.630 --> 00:13:21.720
do this early since issues
that you have on the latest

00:13:21.720 --> 00:13:24.510
version of Android will
take some time to propagate

00:13:24.510 --> 00:13:26.050
to a large number of users.

00:13:26.050 --> 00:13:28.500
So you're unlikely to see
them showing up in your trends

00:13:28.500 --> 00:13:29.430
in the early days.

00:13:29.430 --> 00:13:30.930
But that's good
because it gives you

00:13:30.930 --> 00:13:35.230
a chance to fix them before
they become serious problems.

00:13:35.230 --> 00:13:37.860
All of these features in
PLR are available to you,

00:13:37.860 --> 00:13:40.080
and in fact,
automatically run for you

00:13:40.080 --> 00:13:43.185
as long as you submit
your APK to a test track.

00:13:43.185 --> 00:13:45.060
So I'd strongly recommend
that you build this

00:13:45.060 --> 00:13:46.590
into your testing cycle.

00:13:46.590 --> 00:13:48.900
Once you have a build
ready for testing,

00:13:48.900 --> 00:13:52.200
upload it to an alpha or
beta or internal test track.

00:13:52.200 --> 00:13:54.180
We will then run
our crawler over it.

00:13:54.180 --> 00:13:56.520
And you'll have time
to act on any findings.

00:13:56.520 --> 00:13:57.960
This gives you a
strong start when

00:13:57.960 --> 00:14:00.810
it comes to this key
area of anticipating

00:14:00.810 --> 00:14:03.028
quality issues in your apps.

00:14:03.028 --> 00:14:05.070
I'm now going to hand
over, to my colleague, Fed,

00:14:05.070 --> 00:14:08.004
to talk about
prioritizing those issues.

00:14:08.004 --> 00:14:12.765
[APPLAUSE]

00:14:12.765 --> 00:14:14.140
FEDERICO COLLA:
Thank you, James.

00:14:14.140 --> 00:14:17.080
Hi, my name is Federico Colla,
and I'm an engineering manager

00:14:17.080 --> 00:14:19.270
on the Play Console Team.

00:14:19.270 --> 00:14:21.580
As Lauren mentioned
earlier, prioritizing

00:14:21.580 --> 00:14:24.070
which quality issues
to address is an area

00:14:24.070 --> 00:14:26.800
that we know you still
find challenging.

00:14:26.800 --> 00:14:29.470
And over time, we have
developed a variety

00:14:29.470 --> 00:14:33.880
of tools in the Play Console
to help you measure and manage

00:14:33.880 --> 00:14:37.470
your app quality across
the development lifecycle

00:14:37.470 --> 00:14:39.610
and to evaluate
your app performance

00:14:39.610 --> 00:14:42.680
from one update to the next.

00:14:42.680 --> 00:14:46.520
Among these tools, under
vitals, is a powerful solution

00:14:46.520 --> 00:14:51.380
to manage the performance of
your app or game in production.

00:14:51.380 --> 00:14:53.650
As a quick reminder,
Android vitals

00:14:53.650 --> 00:14:57.470
is an initiative by Google
aimed at improving the stability

00:14:57.470 --> 00:15:00.630
and quality of Android devices.

00:15:00.630 --> 00:15:05.210
It is powered by the data of
more than 100 million users

00:15:05.210 --> 00:15:08.150
who have opted in to share
their data with Google

00:15:08.150 --> 00:15:11.720
and with you, our
developer partners.

00:15:11.720 --> 00:15:14.900
Android vitals cover
five performance areas--

00:15:14.900 --> 00:15:19.550
stability, rendering, battery,
and since the last I/O,

00:15:19.550 --> 00:15:22.610
startup time and permission.

00:15:22.610 --> 00:15:25.250
Within these areas, we
have more than 15 metrics

00:15:25.250 --> 00:15:28.430
that represent the app
quality that your users care

00:15:28.430 --> 00:15:29.540
about the most.

00:15:29.540 --> 00:15:33.530
Things like crash rate,
and ANR, and so forth.

00:15:33.530 --> 00:15:36.050
Moreover, each metric
can be broken down

00:15:36.050 --> 00:15:40.730
by at least three dimensions,
like APK version, OS version,

00:15:40.730 --> 00:15:42.720
and device model.

00:15:42.720 --> 00:15:44.840
In other words,
Android vitals helps

00:15:44.840 --> 00:15:48.910
you understand the
performance of your app

00:15:48.910 --> 00:15:53.300
as experienced on real devices
in the hands of real users

00:15:53.300 --> 00:15:56.460
in the real world.

00:15:56.460 --> 00:15:58.135
But while vitals
is very powerful

00:15:58.135 --> 00:16:01.290
and has seen great
adoption since launch,

00:16:01.290 --> 00:16:05.070
one thing we heard from you is
that you needed more context

00:16:05.070 --> 00:16:08.850
to help understand how
your performance stacked up

00:16:08.850 --> 00:16:14.140
against the industry and, more
importantly, your competitors.

00:16:14.140 --> 00:16:16.720
When we first launched
vitals two years ago,

00:16:16.720 --> 00:16:20.230
we introduced the
concept of bad behavior.

00:16:20.230 --> 00:16:25.990
This helps show how your app's
performance really compares

00:16:25.990 --> 00:16:28.580
with the worst offenders.

00:16:28.580 --> 00:16:30.320
But this was not enough.

00:16:30.320 --> 00:16:33.470
So last year, we launched
category benchmarks

00:16:33.470 --> 00:16:38.540
to help you understand how
your app or game compares

00:16:38.540 --> 00:16:40.910
with the top apps
in the same category

00:16:40.910 --> 00:16:44.100
or any other category
of your choosing.

00:16:44.100 --> 00:16:48.100
Category benchmarks
apply to all vitals.

00:16:48.100 --> 00:16:50.790
And for each of them, we
show three percentile points

00:16:50.790 --> 00:16:56.500
to show where your app
falls in the distribution.

00:16:56.500 --> 00:16:58.690
And we also introduced
category benchmarks

00:16:58.690 --> 00:17:02.940
to other parts of the Play
Console, like ratings.

00:17:02.940 --> 00:17:06.020
But we keep hearing
your feedback

00:17:06.020 --> 00:17:09.920
that you want even more concept,
and the category level detail

00:17:09.920 --> 00:17:12.349
is often not enough.

00:17:12.349 --> 00:17:15.010
So this year, we are
very excited to introduce

00:17:15.010 --> 00:17:16.990
a new feature in
the Play Console,

00:17:16.990 --> 00:17:20.599
developer-selected
peer benchmarks.

00:17:20.599 --> 00:17:24.440
With this feature, you can
now define a custom set

00:17:24.440 --> 00:17:29.300
of eight to 12 peers and see
how your performance compares

00:17:29.300 --> 00:17:32.340
across all of the
Android vitals.

00:17:32.340 --> 00:17:34.270
And to make things
easier for you,

00:17:34.270 --> 00:17:37.470
we use the metadata we
have about apps and games

00:17:37.470 --> 00:17:40.200
to intelligently
suggest a set of apps

00:17:40.200 --> 00:17:43.500
that are similar to yours
for you to compare with.

00:17:43.500 --> 00:17:46.860
However, you can remove
apps from the set.

00:17:46.860 --> 00:17:49.290
You can add other
suggested apps,

00:17:49.290 --> 00:17:53.790
or you can search for new
apps by name or package name.

00:17:53.790 --> 00:17:55.980
And privacy is very
important to us.

00:17:55.980 --> 00:17:59.030
And this feature
is no exception.

00:17:59.030 --> 00:18:01.670
So we have carefully designed
this product with privacy

00:18:01.670 --> 00:18:06.110
in mind, defining a set of
rules to protect your vitals

00:18:06.110 --> 00:18:08.430
and performance data.

00:18:08.430 --> 00:18:10.730
However, in the
interest of giving you

00:18:10.730 --> 00:18:14.630
full control over your data,
we provide an option for you

00:18:14.630 --> 00:18:19.500
to opt out of having your
data available to peers.

00:18:19.500 --> 00:18:24.560
Note, though, should you opt
out of sharing your vitals data,

00:18:24.560 --> 00:18:26.540
you will be unable
to use this feature,

00:18:26.540 --> 00:18:32.490
missing out on the valuable
insights about your app.

00:18:32.490 --> 00:18:36.720
So once you select a
set of relevant peers,

00:18:36.720 --> 00:18:39.420
you can compare the
performance of your app

00:18:39.420 --> 00:18:41.700
with a median of that peer set.

00:18:41.700 --> 00:18:45.000
And you can do so across
all of the vitals reporting

00:18:45.000 --> 00:18:47.850
services, like
the Overview page,

00:18:47.850 --> 00:18:52.650
Details page, and as well as
all the time series reports.

00:18:52.650 --> 00:18:55.740
And we are also taking the same
functionality and intelligent

00:18:55.740 --> 00:19:01.280
peer selection from vitals
and extending it to ratings.

00:19:01.280 --> 00:19:05.060
As with vitals, by using
a predefined or custom

00:19:05.060 --> 00:19:07.550
set of up to 12
peers, you can see

00:19:07.550 --> 00:19:14.800
how your rating performs over
time against your competitors.

00:19:14.800 --> 00:19:17.280
And you can even drill
down to a country level

00:19:17.280 --> 00:19:20.070
and see how your rating
compares to competitors

00:19:20.070 --> 00:19:23.220
in your most important markets.

00:19:23.220 --> 00:19:26.040
Now, there is a lot of
information in Android vitals,

00:19:26.040 --> 00:19:28.260
and we just
introduced even more.

00:19:28.260 --> 00:19:32.540
So here's a couple of key
takeaways for you to remember.

00:19:32.540 --> 00:19:35.500
First, take a moment
to define a custom

00:19:35.500 --> 00:19:39.080
peer set for your app or game.

00:19:39.080 --> 00:19:41.630
A good starting
point is to pick app

00:19:41.630 --> 00:19:45.020
that are similar to yours
from a functional or technical

00:19:45.020 --> 00:19:47.000
perspective.

00:19:47.000 --> 00:19:49.190
And while comparing your
app with competitors

00:19:49.190 --> 00:19:52.470
is very useful, the
peer benchmark features

00:19:52.470 --> 00:19:55.500
can also be used to define
an aspirational peer set

00:19:55.500 --> 00:19:56.960
for your app.

00:19:56.960 --> 00:20:01.770
So a group of apps that
already perform at the level

00:20:01.770 --> 00:20:05.050
that you like to achieve.

00:20:05.050 --> 00:20:07.920
Finally, the apps
and games ecosystem

00:20:07.920 --> 00:20:10.570
is constantly evolving.

00:20:10.570 --> 00:20:13.950
So make sure that you
come back to update

00:20:13.950 --> 00:20:19.808
your peers set on a regular
basis, like every other month.

00:20:19.808 --> 00:20:21.350
And the final thing
worth calling out

00:20:21.350 --> 00:20:23.800
that is particularly
relevant to many of you

00:20:23.800 --> 00:20:26.590
with limited bandwidth
or who don't regularly

00:20:26.590 --> 00:20:30.440
engage with the vitals
section in the Play Console,

00:20:30.440 --> 00:20:34.270
to ensure you are aware of
the most important changes

00:20:34.270 --> 00:20:36.670
to your app's
technical performance,

00:20:36.670 --> 00:20:40.590
make sure you sign up to
the vital email alerts.

00:20:40.590 --> 00:20:44.370
This way, you will be made aware
of any critical performance

00:20:44.370 --> 00:20:47.250
issues that need your
immediate attention so you

00:20:47.250 --> 00:20:50.280
can ensure a solid
experience for all your users

00:20:50.280 --> 00:20:53.320
in production.

00:20:53.320 --> 00:20:56.680
We are announcing more
benchmark-related features

00:20:56.680 --> 00:21:00.340
across the entire Play
Console this year at I/O.

00:21:00.340 --> 00:21:02.590
If you want to learn
more about this,

00:21:02.590 --> 00:21:04.630
don't miss this talk
that is scheduled

00:21:04.630 --> 00:21:07.735
for later this afternoon
on the same stage.

00:21:07.735 --> 00:21:10.620
And now, please welcome
my colleague, Joel,

00:21:10.620 --> 00:21:13.210
who will tell you more about
some exciting new features

00:21:13.210 --> 00:21:14.900
in vitals and beyond.

00:21:14.900 --> 00:21:15.719
Thank you.

00:21:15.719 --> 00:21:20.710
[APPLAUSE]

00:21:20.710 --> 00:21:22.250
JOEL NEWMAN: Thanks, Fed.

00:21:22.250 --> 00:21:25.370
Now, while pure benchmarks
are an incredible addition

00:21:25.370 --> 00:21:28.310
to the console, they're
really just one of the ways

00:21:28.310 --> 00:21:31.370
that we're working to help
you with prioritization.

00:21:31.370 --> 00:21:32.690
Hi, my name is Joel Newman.

00:21:32.690 --> 00:21:36.050
And I'm a product specialist
on the Play BD team.

00:21:36.050 --> 00:21:39.380
I'm here today to talk to
you about another new way

00:21:39.380 --> 00:21:42.050
that we're working to help
you with prioritization--

00:21:42.050 --> 00:21:46.060
this time, specifically,
as it relates to app size.

00:21:46.060 --> 00:21:48.130
As some of you may
be wondering, well, I

00:21:48.130 --> 00:21:51.660
didn't ask for help on app
size, why should I care,

00:21:51.660 --> 00:21:53.725
and fair enough.

00:21:53.725 --> 00:21:54.850
Let's give it some context.

00:21:54.850 --> 00:21:57.220
We know that you as a
developer are likely

00:21:57.220 --> 00:22:02.590
spending lots of time, effort,
and money to acquire new users.

00:22:02.590 --> 00:22:05.710
You leverage paid and
organic media to drive users

00:22:05.710 --> 00:22:07.300
to your store listing page.

00:22:07.300 --> 00:22:09.430
You optimize the
assets on that page.

00:22:09.430 --> 00:22:12.460
Hopefully, you're doing
store listing experiments,

00:22:12.460 --> 00:22:14.140
all with the intent
of increasing

00:22:14.140 --> 00:22:18.090
the likelihood that a user
will click the Install button.

00:22:18.090 --> 00:22:21.000
And that's where the
journey ends, right?

00:22:21.000 --> 00:22:22.560
Unfortunately, not.

00:22:22.560 --> 00:22:24.510
There are a lot of
things that can happen

00:22:24.510 --> 00:22:27.720
between the time a user clicks
the Install button and the time

00:22:27.720 --> 00:22:29.223
they can actually
fire up your app

00:22:29.223 --> 00:22:30.390
and start to engage with it.

00:22:39.000 --> 00:22:40.900
Recently, we
conducted an analysis,

00:22:40.900 --> 00:22:45.720
in fact, that found
that almost 30% of all

00:22:45.720 --> 00:22:49.470
install requests are
not actually completed.

00:22:49.470 --> 00:22:52.050
Let that sink in
for a minute, 30%.

00:22:52.050 --> 00:22:54.610
It's pretty surprising, right?

00:22:54.610 --> 00:22:56.410
Well, what's driving this?

00:22:56.410 --> 00:22:58.240
When we dug deeper,
we found that there

00:22:58.240 --> 00:23:01.840
are a number of factors at play,
but they're all generally tied

00:23:01.840 --> 00:23:04.400
to one of three things--

00:23:04.400 --> 00:23:09.730
space, time, and cost.

00:23:09.730 --> 00:23:14.425
And all three of these are
directly tied to app size.

00:23:14.425 --> 00:23:16.300
Now, what do I mean by
space, time, and cost?

00:23:16.300 --> 00:23:18.670
Let me touch on each, briefly.

00:23:18.670 --> 00:23:22.810
So first and, arguably,
most important is space.

00:23:22.810 --> 00:23:24.630
The fact is that
many users simply

00:23:24.630 --> 00:23:28.060
don't have enough
space on their devices.

00:23:28.060 --> 00:23:32.080
When we analyze the over
2 billion devices on Play,

00:23:32.080 --> 00:23:36.010
we found that about three
in 10 have less than 1 gig

00:23:36.010 --> 00:23:38.350
of free storage available.

00:23:38.350 --> 00:23:39.910
And surprisingly,
this was not just

00:23:39.910 --> 00:23:41.860
an issue in emerging markets.

00:23:41.860 --> 00:23:44.470
This was also prevalent
in developed markets,

00:23:44.470 --> 00:23:47.050
like North America
and Western Europe.

00:23:47.050 --> 00:23:48.910
Without enough
storage on device,

00:23:48.910 --> 00:23:50.980
the install simply fails.

00:23:50.980 --> 00:23:55.570
And the larger your app is, the
more likely that is to happen.

00:23:55.570 --> 00:23:57.140
Now, what about time?

00:23:57.140 --> 00:23:59.090
Now, obviously, the
longer a download

00:23:59.090 --> 00:24:01.280
takes, the higher
the probability

00:24:01.280 --> 00:24:04.040
that a user will simply
lose interest and cancel

00:24:04.040 --> 00:24:05.540
the download.

00:24:05.540 --> 00:24:08.150
It also increases the
probability of disruptions

00:24:08.150 --> 00:24:09.980
in connectivity,
something that's

00:24:09.980 --> 00:24:12.080
a particular challenge
in emerging markets

00:24:12.080 --> 00:24:15.200
where networks are
sometimes unstable.

00:24:15.200 --> 00:24:17.670
And the final issue is cost.

00:24:17.670 --> 00:24:21.240
So, unfortunately, the abundant
Wi-Fi and the near limitless

00:24:21.240 --> 00:24:23.250
data plans that most
of us are used to

00:24:23.250 --> 00:24:25.440
and simply take
for granted, it's

00:24:25.440 --> 00:24:28.560
not a reality for
many of our users.

00:24:28.560 --> 00:24:31.380
With limited data
allowances, many users

00:24:31.380 --> 00:24:33.660
will simply cancel and
install as soon as they

00:24:33.660 --> 00:24:35.445
see the expected download size.

00:24:38.290 --> 00:24:42.220
So given that app size
impacts all of those factors,

00:24:42.220 --> 00:24:44.790
the total size of the
download on device,

00:24:44.790 --> 00:24:47.520
the time to download,
the cost to download,

00:24:47.520 --> 00:24:51.510
it's no surprise that app
size has a significant impact

00:24:51.510 --> 00:24:55.230
on install success rates
and, accordingly, total

00:24:55.230 --> 00:24:57.510
overall installs.

00:24:57.510 --> 00:25:00.270
But what may be a surprise
is that we can actually

00:25:00.270 --> 00:25:02.120
quantify it.

00:25:02.120 --> 00:25:06.230
We did a recent analysis of all
the installs in the Play Store.

00:25:06.230 --> 00:25:08.450
And we found that for
every three megabyte

00:25:08.450 --> 00:25:11.780
reduction in download
size, developers

00:25:11.780 --> 00:25:16.015
saw a 1% increase
in total installs.

00:25:16.015 --> 00:25:17.890
And similar to what
Lauren was saying before,

00:25:17.890 --> 00:25:20.290
you might look at 1% and be
like, oh, that's no big deal.

00:25:20.290 --> 00:25:22.583
This is not really
a meaningful change.

00:25:22.583 --> 00:25:23.250
Let me tell you.

00:25:23.250 --> 00:25:25.360
You talk to anybody in
your marketing department,

00:25:25.360 --> 00:25:28.510
anybody who focuses
on user conversion,

00:25:28.510 --> 00:25:31.090
this is a meaningful
change in total installs

00:25:31.090 --> 00:25:36.430
that you as a developer have
incredible control over.

00:25:36.430 --> 00:25:39.610
So given the fact
that app size can

00:25:39.610 --> 00:25:43.150
have such an incredible
impact on install rate,

00:25:43.150 --> 00:25:45.400
the total number of
installs, and, accordingly,

00:25:45.400 --> 00:25:49.270
all of the downstream business
KPIs that your business cares

00:25:49.270 --> 00:25:52.090
about, this is a really
important metric for you

00:25:52.090 --> 00:25:53.790
to pay attention to.

00:25:53.790 --> 00:25:55.540
And that's why I'm
proud today to announce

00:25:55.540 --> 00:25:59.500
that you'll be introducing app
size as a full-fledged Android

00:25:59.500 --> 00:26:01.390
vital.

00:26:01.390 --> 00:26:04.030
If you navigate to the Android
vitals section in the Console

00:26:04.030 --> 00:26:05.830
today, you'll see
that there is now

00:26:05.830 --> 00:26:10.090
a dedicated app sized subsection
with a myriad of reports

00:26:10.090 --> 00:26:13.210
to help you understand the
overall health of your app

00:26:13.210 --> 00:26:14.860
size.

00:26:14.860 --> 00:26:17.440
In these reports within
the app vitals section,

00:26:17.440 --> 00:26:19.820
as well as within
Statistics page,

00:26:19.820 --> 00:26:22.930
you'll see two really important
metrics that you as a developer

00:26:22.930 --> 00:26:25.470
should be paying attention to--

00:26:25.470 --> 00:26:28.290
app download size,
which is the size

00:26:28.290 --> 00:26:33.090
of the download of your APK
over the wire, which is directly

00:26:33.090 --> 00:26:36.150
correlated with install
conversion rate,

00:26:36.150 --> 00:26:39.990
as well as app size on
device, the size of your app

00:26:39.990 --> 00:26:43.140
after your app's installation
on device, which is in turn

00:26:43.140 --> 00:26:46.710
directly correlated
with uninstalls.

00:26:46.710 --> 00:26:50.710
We'll also show you how your
app size changes over time.

00:26:50.710 --> 00:26:52.800
So you can assess how
things like new releases

00:26:52.800 --> 00:26:57.610
might be impacting
your overall app size.

00:26:57.610 --> 00:27:00.340
To bring two parts of
today's talk together,

00:27:00.340 --> 00:27:02.560
Fed talked earlier
about pure benchmarks.

00:27:02.560 --> 00:27:07.800
And as I mentioned, app size is
a full-fledged Android vital.

00:27:07.800 --> 00:27:10.810
So accordingly, I'm happy
to announce that you'll now

00:27:10.810 --> 00:27:13.660
be able to compare your
app size against that same

00:27:13.660 --> 00:27:18.400
custom-defined set of peers so
you can see how you stack up

00:27:18.400 --> 00:27:21.960
against the competition.

00:27:21.960 --> 00:27:25.050
For those of you who've
adopted the app on the format,

00:27:25.050 --> 00:27:27.360
we go even one step further.

00:27:27.360 --> 00:27:32.280
In an all new app
size breakdown report,

00:27:32.280 --> 00:27:35.555
we provide a detailed breakdown
of the components of your app,

00:27:35.555 --> 00:27:36.930
highlighting how
much of your app

00:27:36.930 --> 00:27:41.670
is code versus resources
versus native libraries

00:27:41.670 --> 00:27:44.190
so you can assess the
underlying factors that are

00:27:44.190 --> 00:27:47.260
driving your overall app size.

00:27:47.260 --> 00:27:50.410
Even more, we conduct
an automated analysis

00:27:50.410 --> 00:27:51.790
of your bundle.

00:27:51.790 --> 00:27:54.310
And we deliver a
tailored custom set

00:27:54.310 --> 00:27:59.800
of optimizations ordered by
expected app size improvements

00:27:59.800 --> 00:28:05.080
to help you prioritize
what to work on next.

00:28:05.080 --> 00:28:07.635
So I just talked about
a lot of the information

00:28:07.635 --> 00:28:09.010
that we're going
to be delivering

00:28:09.010 --> 00:28:10.760
in terms of app size.

00:28:10.760 --> 00:28:13.665
So what specifically should
you as a developer do?

00:28:13.665 --> 00:28:16.300
So I think there are two things
that I would recommend doing.

00:28:16.300 --> 00:28:18.640
First is, just
purely at a baseline,

00:28:18.640 --> 00:28:21.760
go into the new app side
subsection in vitals,

00:28:21.760 --> 00:28:25.000
get a sense of how your
app size is performing

00:28:25.000 --> 00:28:28.990
to try to assess what impact
app size might be having

00:28:28.990 --> 00:28:31.040
on your overall business.

00:28:31.040 --> 00:28:35.230
Second, if you have adopted
the app bundle format,

00:28:35.230 --> 00:28:37.420
you should go into
that optimization,

00:28:37.420 --> 00:28:40.960
go check out that list
of optimization tips.

00:28:40.960 --> 00:28:43.840
These are concrete,
actionable steps

00:28:43.840 --> 00:28:46.540
that you can take to
quantifiably reduce

00:28:46.540 --> 00:28:49.420
your app's footprint
and, accordingly, boost

00:28:49.420 --> 00:28:51.940
your installs.

00:28:51.940 --> 00:28:56.530
Now, I just really glanced at
a very high level on app size.

00:28:56.530 --> 00:28:59.548
If you want to go one or
even 10 levels deeper,

00:28:59.548 --> 00:29:01.090
I strongly encourage
you to check out

00:29:01.090 --> 00:29:03.790
the dedicated session
that is happening tomorrow

00:29:03.790 --> 00:29:09.010
at 8:30 AM on Stage 2, where
we'll cover some of the details

00:29:09.010 --> 00:29:10.960
on app size as well
as the tools we're

00:29:10.960 --> 00:29:13.570
developing to help you
monitor and improve it,

00:29:13.570 --> 00:29:18.200
as led by some of
our product managers.

00:29:18.200 --> 00:29:22.620
Now, let me quickly get
back some of our asks.

00:29:22.620 --> 00:29:24.210
One of the top
pieces of feedback

00:29:24.210 --> 00:29:27.520
that we heard from you as
it relates to app health

00:29:27.520 --> 00:29:29.730
is that you love PLR.

00:29:29.730 --> 00:29:33.540
You love Android vitals in
terms of identifying problems.

00:29:33.540 --> 00:29:38.337
But you sometimes struggle to
identify the underlying causes.

00:29:38.337 --> 00:29:40.670
Well, I want to let you know
that we hear your feedback.

00:29:40.670 --> 00:29:43.330
This is a consistent thing that
I'm hearing from developers

00:29:43.330 --> 00:29:44.590
all the time.

00:29:44.590 --> 00:29:48.040
And so today, I'm happy to talk
a little bit about a feature

00:29:48.040 --> 00:29:50.590
that we recently
introduced that should make

00:29:50.590 --> 00:29:53.440
debugging significantly easier.

00:29:53.440 --> 00:29:58.038
It's called PLR
and Vitals Linking.

00:29:58.038 --> 00:30:01.910
Now, as Fed mentioned
earlier, Android Vitals

00:30:01.910 --> 00:30:04.640
is a tool to help you
track the performance

00:30:04.640 --> 00:30:07.220
of your app in the wild.

00:30:07.220 --> 00:30:09.830
Now, because we're
collecting data

00:30:09.830 --> 00:30:14.030
from real devices in
the hands of real users,

00:30:14.030 --> 00:30:16.100
we often have to
redact the information

00:30:16.100 --> 00:30:19.250
we show in the interest
of user privacy.

00:30:19.250 --> 00:30:22.280
So here, for example, is
some of the information

00:30:22.280 --> 00:30:26.570
that we might surface for
a crash in Android vitals.

00:30:26.570 --> 00:30:30.260
You'll notice that although we
show the stack trace, we redact

00:30:30.260 --> 00:30:34.550
the exception message in
case it contains private user

00:30:34.550 --> 00:30:36.520
information.

00:30:36.520 --> 00:30:39.090
Now, this information
as it is currently

00:30:39.090 --> 00:30:42.000
may be helpful at base
level for still getting

00:30:42.000 --> 00:30:45.060
at some of the underlying
issues, but for some of you,

00:30:45.060 --> 00:30:49.950
it may just not be enough.

00:30:49.950 --> 00:30:54.480
Now, in contrast to
vitals, pre-launch reports,

00:30:54.480 --> 00:30:57.840
on the other hand, work by
running your app on devices

00:30:57.840 --> 00:31:00.450
situated in the
Firebase Cloud Test Lab,

00:31:00.450 --> 00:31:02.940
automatically navigating
through the app,

00:31:02.940 --> 00:31:07.410
capturing exceptions, and
generating logs as it goes.

00:31:07.410 --> 00:31:09.780
Now, because this
testing is occurring

00:31:09.780 --> 00:31:11.820
in a controlled
environment, we're

00:31:11.820 --> 00:31:15.270
able to expose key information,
such as the exception

00:31:15.270 --> 00:31:20.860
message, that might otherwise
be redacted in vitals.

00:31:20.860 --> 00:31:24.280
Additionally, beyond
the exception messages,

00:31:24.280 --> 00:31:26.770
which can be very
helpful in debugging,

00:31:26.770 --> 00:31:29.650
whenever an anomaly such
as a crash or an ANR

00:31:29.650 --> 00:31:32.650
is detected in PLR,
we automatically

00:31:32.650 --> 00:31:35.830
capture screenshots and videos.

00:31:35.830 --> 00:31:37.540
These can be super
helpful resources

00:31:37.540 --> 00:31:39.860
to help reproduce the
issue and, hopefully,

00:31:39.860 --> 00:31:42.640
to get at the underlying cause.

00:31:42.640 --> 00:31:45.330
Now, wouldn't it be
great if you could

00:31:45.330 --> 00:31:49.690
go straight from a real world
crash identified by vitals

00:31:49.690 --> 00:31:54.340
to that same crash in PLR with
all of its associated data

00:31:54.340 --> 00:31:55.940
and resources?

00:31:55.940 --> 00:31:58.390
Well, now you can.

00:31:58.390 --> 00:32:01.690
With the recent launch of
vitals and PLR linking,

00:32:01.690 --> 00:32:04.480
whenever a real world
crash is detected

00:32:04.480 --> 00:32:08.410
and Android vitals that
we also see in a PLR test,

00:32:08.410 --> 00:32:11.500
you'll see a link between
vitals and the same issue in PLR

00:32:11.500 --> 00:32:14.150
are with its associated
data and resources.

00:32:14.150 --> 00:32:16.538
So you can debug
more effectively.

00:32:16.538 --> 00:32:18.330
And it's worth noting
that this is not just

00:32:18.330 --> 00:32:20.230
a one way connection.

00:32:20.230 --> 00:32:24.850
We've linked pre-launch reports
and vitals in both directions.

00:32:24.850 --> 00:32:28.420
So now if a crash occurs
in pre-launch reports

00:32:28.420 --> 00:32:30.630
and it's already happening
in the real world,

00:32:30.630 --> 00:32:31.950
you'll be informed.

00:32:31.950 --> 00:32:35.340
And you'll be able to
jump from PLR to vitals

00:32:35.340 --> 00:32:38.910
to see the real world
impact of the crash.

00:32:38.910 --> 00:32:41.130
So how would you use this?

00:32:41.130 --> 00:32:43.460
So we think this can be
really helpful for you

00:32:43.460 --> 00:32:47.300
in terms of prioritizing
issues that I identified

00:32:47.300 --> 00:32:50.900
in PLR because you'll be
able to quickly assess

00:32:50.900 --> 00:32:55.010
which issues that PLR
identifies are having real world

00:32:55.010 --> 00:32:56.120
user impacts today.

00:32:58.930 --> 00:33:02.320
So Android vitals
and PLR linking

00:33:02.320 --> 00:33:04.450
is a really powerful tool.

00:33:04.450 --> 00:33:07.690
But it's really only as powerful
as the amount of your app

00:33:07.690 --> 00:33:09.130
that we're able to crawl.

00:33:09.130 --> 00:33:11.380
So I want to quickly
reiterate the message

00:33:11.380 --> 00:33:14.980
James said earlier, which
if any part of your app,

00:33:14.980 --> 00:33:16.480
especially if it's
at the beginning,

00:33:16.480 --> 00:33:20.680
is behind a login screen,
please be sure to provide test

00:33:20.680 --> 00:33:24.850
credentials so PLR can more
effectively test your app

00:33:24.850 --> 00:33:27.720
and run crawls.

00:33:27.720 --> 00:33:30.960
Similarly, vitals
and PLR linking

00:33:30.960 --> 00:33:34.810
is only actionable if we're
able to intelligently parse

00:33:34.810 --> 00:33:36.640
your stack traces.

00:33:36.640 --> 00:33:39.660
So if you're using Pro
Guard or another tool

00:33:39.660 --> 00:33:42.480
to optimize or
obfuscate your app,

00:33:42.480 --> 00:33:46.440
be sure to upload a mapping
file for each version.

00:33:46.440 --> 00:33:50.070
This will enable us to show
useful stack traces, reliably

00:33:50.070 --> 00:33:53.760
de-duplicate crashes, as well
as really unlock the potential

00:33:53.760 --> 00:33:57.000
of vitals and PLR linking.

00:33:57.000 --> 00:34:01.160
So as you can see, by
connecting PLR and vitals,

00:34:01.160 --> 00:34:03.260
we're taking one
more step forward

00:34:03.260 --> 00:34:07.070
towards helping you with
debugging and making it easier.

00:34:07.070 --> 00:34:09.020
We hope you'll check
out this feature

00:34:09.020 --> 00:34:13.850
along with all of our
new app size reports,

00:34:13.850 --> 00:34:16.830
as you continue along
your app health journey.

00:34:16.830 --> 00:34:19.230
So before we wrap
things up, I'd like

00:34:19.230 --> 00:34:21.010
to hand it back to
Lauren, who's going

00:34:21.010 --> 00:34:24.752
to recap a little bit of
what we talked about today.

00:34:24.752 --> 00:34:25.744
[APPLAUSE]

00:34:25.744 --> 00:34:26.911
LAUREN MYTTON: Thanks, Joel.

00:34:32.690 --> 00:34:35.980
So we covered quite
a number of things.

00:34:35.980 --> 00:34:38.949
We talked about vitals
and the pre-launch reports

00:34:38.949 --> 00:34:41.510
for those of you who
haven't used them before.

00:34:41.510 --> 00:34:44.560
And we walked through
four new features

00:34:44.560 --> 00:34:47.980
just to help you connect those
features back to the two tools

00:34:47.980 --> 00:34:49.570
we've got right now.

00:34:49.570 --> 00:34:53.469
You can see here that
Android compatibility

00:34:53.469 --> 00:34:56.030
sits in the pre-launch report.

00:34:56.030 --> 00:34:59.150
Peer benchmarks and app
size are found in vitals.

00:34:59.150 --> 00:35:01.910
And clearly PLR
and vitals linking

00:35:01.910 --> 00:35:04.490
can be accessed from
either direction.

00:35:08.120 --> 00:35:09.730
And I want to give
you another slide.

00:35:09.730 --> 00:35:12.285
And I've seen many of you taking
photos throughout the talk.

00:35:12.285 --> 00:35:13.660
But if you haven't
taken any yet,

00:35:13.660 --> 00:35:15.250
this is the one
slide that you really

00:35:15.250 --> 00:35:17.610
should take a picture of.

00:35:17.610 --> 00:35:21.180
Here in one place are all of the
different tips we've given you

00:35:21.180 --> 00:35:24.730
about how to make use of
the existing features,

00:35:24.730 --> 00:35:27.540
as well as the new ones.

00:35:27.540 --> 00:35:30.000
Success for both of us
after this talk, I think,

00:35:30.000 --> 00:35:32.430
is the same thing,
that you come away

00:35:32.430 --> 00:35:35.310
with some concrete
next steps on something

00:35:35.310 --> 00:35:38.490
that you can do within our
health tools that will help

00:35:38.490 --> 00:35:41.290
you reach your business goals.

00:35:41.290 --> 00:35:43.553
So please do take
a picture, have

00:35:43.553 --> 00:35:44.970
a look at what
we're recommending,

00:35:44.970 --> 00:35:47.100
and think about which
of these actions

00:35:47.100 --> 00:35:50.620
that you might be able to take
and try when you get back home.

00:35:53.170 --> 00:35:54.450
We also have office hours.

00:35:54.450 --> 00:35:56.190
I think it's 3:30--

00:35:56.190 --> 00:35:58.300
so pretty much soon
after this talk--

00:35:58.300 --> 00:36:00.963
if you want to come and discuss
with any of us the topics

00:36:00.963 --> 00:36:02.005
we've been through today.

00:36:04.890 --> 00:36:07.920
Another resource that you can
look at when you're back home

00:36:07.920 --> 00:36:10.950
is on the Play Academy,
where we offer free training

00:36:10.950 --> 00:36:12.240
to all developers.

00:36:12.240 --> 00:36:13.770
It was built to
help you understand

00:36:13.770 --> 00:36:17.050
best practices and features
to help you succeed on Play.

00:36:17.050 --> 00:36:23.590
And we have dedicated content
on that from this year's I/O.

00:36:23.590 --> 00:36:26.050
So to wrap up, I
just wanted to repeat

00:36:26.050 --> 00:36:27.970
what I said at the start.

00:36:27.970 --> 00:36:31.030
Quality is a job
that is never done.

00:36:31.030 --> 00:36:34.390
For as long as Android
continues to evolve, for as long

00:36:34.390 --> 00:36:39.010
as new form factors are created,
and you, developers, continue

00:36:39.010 --> 00:36:41.500
to innovate, we
have the potential

00:36:41.500 --> 00:36:45.340
to create all kinds of amazing
capabilities and experiences

00:36:45.340 --> 00:36:47.500
for users.

00:36:47.500 --> 00:36:49.960
And throughout
all these changes,

00:36:49.960 --> 00:36:52.270
the thing that remains
constant for us

00:36:52.270 --> 00:36:55.930
is to maintain and increase
the baseline for quality

00:36:55.930 --> 00:36:57.800
on Android.

00:36:57.800 --> 00:37:00.470
So you should expect to
see us again here next year

00:37:00.470 --> 00:37:03.520
and at many other
events in between.

00:37:03.520 --> 00:37:06.880
Please also do keep sharing
your feedback with us,

00:37:06.880 --> 00:37:08.590
in the meantime,
and help us partner

00:37:08.590 --> 00:37:11.983
with you on this
long-term journey.

00:37:11.983 --> 00:37:13.400
Thank you very
much for listening.

00:37:13.400 --> 00:37:16.750
[MUSIC PLAYING]

