WEBVTT
Kind: captions
Language: en

00:00:00.820 --> 00:00:04.220
Hi, welcome to the coding portion of lesson five.

00:00:04.220 --> 00:00:07.980
Your Conference Central application is now in full swing,

00:00:07.980 --> 00:00:10.970
you can save conference and profile entities all day

00:00:10.970 --> 00:00:14.180
and all night long if you want to. However, every

00:00:14.180 --> 00:00:17.140
hit to the data store counts against your application's

00:00:17.140 --> 00:00:19.540
daily quota. The good thing is that you can

00:00:19.540 --> 00:00:22.660
use Memcache to save your entity data to reduce

00:00:22.660 --> 00:00:26.000
the hits to the data store. In this lesson you're

00:00:26.000 --> 00:00:28.510
going to find out just how easy it is

00:00:28.510 --> 00:00:32.150
to save your entities data in memcache using objectify.

00:00:32.150 --> 00:00:34.980
In fact, it's so easy that you're going to do

00:00:34.980 --> 00:00:39.260
another exercise to use underlying Java data store API

00:00:39.260 --> 00:00:41.660
to put values into Memcache and to get them

00:00:41.660 --> 00:00:45.290
back out. We're going to create announcements about conferences

00:00:45.290 --> 00:00:48.450
that are nearly sold out, and store those announcements

00:00:48.450 --> 00:00:51.190
in Memcache. There's no need to save the announcements

00:00:51.190 --> 00:00:53.750
in the datastore, because they're so transient in nature.

00:00:55.220 --> 00:00:57.650
Another thing your going to do is use task cues.

00:00:57.650 --> 00:01:00.350
So that your application can so work in the

00:01:00.350 --> 00:01:04.315
background. You're going to use task queues to send conformation

00:01:04.315 --> 00:01:08.080
email anytime anybody creates a new conference. To wrap

00:01:08.080 --> 00:01:10.460
it all up, we'll set up a cron job to

00:01:10.460 --> 00:01:14.160
periodically check for conference that have nearly sold out

00:01:14.160 --> 00:01:17.350
and update the announcement in Memcache. Let's get to it.

