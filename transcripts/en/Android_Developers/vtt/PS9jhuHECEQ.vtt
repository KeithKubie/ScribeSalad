WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.896
[MUSIC PLAYING]

00:00:06.390 --> 00:00:07.890
LOUIS PULLEN-FREILICH:
Hi, everyone.

00:00:07.890 --> 00:00:10.700
I'm Louis, and I'm an engineer
on the Android Toolkit team.

00:00:10.700 --> 00:00:13.080
Today, I'm going to be sharing
some best practices when

00:00:13.080 --> 00:00:16.852
using the AndroidX Preference
library, part of Jetpack.

00:00:16.852 --> 00:00:19.310
I'm going to be covering some
background behind Preferences

00:00:19.310 --> 00:00:21.518
and try to clear up any
confusion between preferences

00:00:21.518 --> 00:00:22.842
and shared preferences.

00:00:22.842 --> 00:00:24.800
I'll demonstrate how to
build a settings screen

00:00:24.800 --> 00:00:27.557
and some useful features
you can use along the way.

00:00:27.557 --> 00:00:29.890
And I'm going to cover how
you can use multiple settings

00:00:29.890 --> 00:00:31.764
screens, which is
especially useful if you're

00:00:31.764 --> 00:00:34.040
migrating your existing
architecture to the AndroidX

00:00:34.040 --> 00:00:35.810
library.

00:00:35.810 --> 00:00:37.310
But first some background.

00:00:37.310 --> 00:00:38.990
What are preferences?

00:00:38.990 --> 00:00:40.610
The Preference
library is a framework

00:00:40.610 --> 00:00:43.192
for building interactive
settings screens.

00:00:43.192 --> 00:00:46.270
It handles building and updating
the UI, so all you need to do

00:00:46.270 --> 00:00:49.050
is to find a list of settings
to be displayed to the user.

00:00:49.050 --> 00:00:53.312
And it also handles interacting
with device storage,

00:00:53.312 --> 00:00:55.770
so that any value that the user
changes will ultimately get

00:00:55.770 --> 00:00:58.590
persisted to the device without
you having to worry about it.

00:00:58.590 --> 00:01:02.640
Preferences itself currently
exists in two separate forms.

00:01:02.640 --> 00:01:05.317
First, the Framework
Preference API.

00:01:05.317 --> 00:01:06.900
This is being bundled
with the Android

00:01:06.900 --> 00:01:08.775
framework since the
first version of Android,

00:01:08.775 --> 00:01:10.860
so 11 years ago now.

00:01:10.860 --> 00:01:13.120
Since it is part of the
framework, any new features

00:01:13.120 --> 00:01:15.880
and bug fixes we add
only make their way

00:01:15.880 --> 00:01:17.575
to the newer
versions of Android.

00:01:17.575 --> 00:01:20.590
And given that the design has
changed a lot over the last 11

00:01:20.590 --> 00:01:23.170
years as well, the Framework
API is themed differently,

00:01:23.170 --> 00:01:24.711
depending on which
version of Android

00:01:24.711 --> 00:01:26.399
the device is running on.

00:01:26.399 --> 00:01:27.940
As a result of these,
we're no longer

00:01:27.940 --> 00:01:29.290
maintaining the Framework API.

00:01:29.290 --> 00:01:32.800
And instead, we recommend
using the AndroidX library.

00:01:32.800 --> 00:01:35.110
The AndroidX Preference
library, previously known

00:01:35.110 --> 00:01:38.200
as the v7 and v14 Preference
Support libraries,

00:01:38.200 --> 00:01:40.490
is unbundled from the framework.

00:01:40.490 --> 00:01:42.220
This means it can
be regularly updated

00:01:42.220 --> 00:01:45.010
with any new features
and bug fixes we push.

00:01:45.010 --> 00:01:48.670
The library itself is backwards
compatible down to API 14

00:01:48.670 --> 00:01:50.560
and uses the same
updated material theme

00:01:50.560 --> 00:01:52.542
across all your devices.

00:01:52.542 --> 00:01:56.929
This results in a consistent
experience for your users.

00:01:56.929 --> 00:01:58.970
And how does this all
relate to SharedPreferences

00:01:58.970 --> 00:02:00.350
you may be wondering?

00:02:00.350 --> 00:02:02.030
The shared preference
APIs allow you

00:02:02.030 --> 00:02:05.310
to persist key-value pairs
of data to the device.

00:02:05.310 --> 00:02:07.460
They're used internally
by the Preference library

00:02:07.460 --> 00:02:09.825
to save and retrieve any
values that a user configures,

00:02:09.825 --> 00:02:11.450
but aren't actually
part of the library

00:02:11.450 --> 00:02:13.980
itself-- just a lower layer.

00:02:13.980 --> 00:02:15.814
So let's start building
our settings screen.

00:02:15.814 --> 00:02:18.146
We're going to start off by
loading the simple hierarchy

00:02:18.146 --> 00:02:19.000
on the right.

00:02:19.000 --> 00:02:21.350
We have a preference with a
switch that allows the user

00:02:21.350 --> 00:02:24.599
to toggle state and a preference
that just displays text.

00:02:24.599 --> 00:02:26.390
I'm going to cover how
you should structure

00:02:26.390 --> 00:02:28.160
your architecture
and also some basic

00:02:28.160 --> 00:02:30.034
attributes you should
be aware of when you're

00:02:30.034 --> 00:02:32.124
using the Preference library.

00:02:32.124 --> 00:02:33.540
So we're going to
start at the top

00:02:33.540 --> 00:02:35.310
with a simple activity
that just acts

00:02:35.310 --> 00:02:37.200
as a container for a hierarchy.

00:02:37.200 --> 00:02:39.210
This should be an
AppCompatActivity

00:02:39.210 --> 00:02:41.770
with an AppCompat-based theme.

00:02:41.770 --> 00:02:44.160
The activity itself is
basically just a container

00:02:44.160 --> 00:02:46.110
for this
PreferenceFragmentCompat, which

00:02:46.110 --> 00:02:48.600
is the main entry point when
using the preference library.

00:02:48.600 --> 00:02:51.090
All our interesting
preferences and configuration

00:02:51.090 --> 00:02:52.250
will happen in here.

00:02:52.250 --> 00:02:55.140
And this fragment itself
just wraps a hierarchy

00:02:55.140 --> 00:02:56.850
of individual
preferences, which can

00:02:56.850 --> 00:02:58.650
either be defined
in an XML resource

00:02:58.650 --> 00:03:00.920
or defined programmatically
at runtime.

00:03:00.920 --> 00:03:04.155
In this talk, we're
going to focus on XML.

00:03:04.155 --> 00:03:07.130
So the activity itself is,
again, just a simple container

00:03:07.130 --> 00:03:07.880
for our fragments.

00:03:07.880 --> 00:03:09.890
So we just have some simple
fragment boilerplate,

00:03:09.890 --> 00:03:11.306
and all we need
to do here is just

00:03:11.306 --> 00:03:13.550
show our settings fragment.

00:03:13.550 --> 00:03:15.441
The fragment, again,
fairly simple.

00:03:15.441 --> 00:03:17.440
All you need to do is
overwrite this one method,

00:03:17.440 --> 00:03:20.230
onCreatePreferences, and
then just setup the hierarchy

00:03:20.230 --> 00:03:22.490
that you're going to inflate
and show to the user.

00:03:22.490 --> 00:03:27.350
All the interesting definition
actually happens in the XML.

00:03:27.350 --> 00:03:29.330
So this is our XML file.

00:03:29.330 --> 00:03:31.310
We start with a root
PreferenceScreen object,

00:03:31.310 --> 00:03:32.976
and this basically
is the main container

00:03:32.976 --> 00:03:34.070
for the entire hierarchy.

00:03:34.070 --> 00:03:35.600
Everything should
go inside of this,

00:03:35.600 --> 00:03:37.530
and this should be
the root element.

00:03:37.530 --> 00:03:40.160
Note that you should also place
your preference.xml resource

00:03:40.160 --> 00:03:43.390
files in the res/xml directory.

00:03:43.390 --> 00:03:45.196
So now we can add
our first preference.

00:03:45.196 --> 00:03:46.320
This is a basic preference.

00:03:46.320 --> 00:03:49.805
It doesn't have any
widget associated with it.

00:03:49.805 --> 00:03:52.510
And we have these three
important attributes here.

00:03:52.510 --> 00:03:54.427
The title and the summary
are the visual title

00:03:54.427 --> 00:03:56.134
and the visual summary
actually displayed

00:03:56.134 --> 00:03:58.560
to the user on the screen,
as you can see on the right.

00:03:58.560 --> 00:04:01.060
And the key is pretty
important for two reasons.

00:04:01.060 --> 00:04:03.750
Firstly, if this preference
were to persist any state

00:04:03.750 --> 00:04:05.340
to the device, then
this is the key

00:04:05.340 --> 00:04:07.449
that the SharedPreference
instance would use.

00:04:07.449 --> 00:04:09.990
And also this key allows you to
interact with this preference

00:04:09.990 --> 00:04:11.280
later on in your life cycle.

00:04:11.280 --> 00:04:13.050
So it's very important
to declare a key

00:04:13.050 --> 00:04:16.000
for every preference
in your hierarchy.

00:04:16.000 --> 00:04:18.029
And now we can add a
SwitchPreferenceCompat.

00:04:18.029 --> 00:04:20.490
This is a type of preference,
very similar to before,

00:04:20.490 --> 00:04:22.809
but now we have a switch widget.

00:04:22.809 --> 00:04:25.350
So whenever the user toggles to
the state of this preference,

00:04:25.350 --> 00:04:27.360
this will update the
Boolean value persisted

00:04:27.360 --> 00:04:29.810
to the key defined here.

00:04:29.810 --> 00:04:31.560
Now that we've built
the simple hierarchy,

00:04:31.560 --> 00:04:33.226
I'll show you some
other useful features

00:04:33.226 --> 00:04:35.860
we can add to make
this even better.

00:04:35.860 --> 00:04:37.860
Here's the hierarchy we're
going to end up with.

00:04:37.860 --> 00:04:39.490
There's quite a lot
more going on here,

00:04:39.490 --> 00:04:41.149
so we're going to
take it step by step.

00:04:41.149 --> 00:04:42.690
First, I'm going to
cover Categories,

00:04:42.690 --> 00:04:44.220
which allow you to
visually split up

00:04:44.220 --> 00:04:47.340
a complex screen into groups
of similar preferences.

00:04:47.340 --> 00:04:49.230
Then, preferences
that open dialogues,

00:04:49.230 --> 00:04:51.570
which allow for more complex
configuration than just

00:04:51.570 --> 00:04:53.392
a simple Boolean switch.

00:04:53.392 --> 00:04:55.350
I'm going to talk a bit
about dynamic summaries

00:04:55.350 --> 00:04:59.130
and also cover dependencies.

00:04:59.130 --> 00:05:01.230
So continuing from where
we left off before--

00:05:01.230 --> 00:05:03.150
these are the same
preferences I had before,

00:05:03.150 --> 00:05:04.980
just without the root
PreferenceScreen tag,

00:05:04.980 --> 00:05:07.230
for verbosity.

00:05:07.230 --> 00:05:09.240
One of these controls
syncing and one

00:05:09.240 --> 00:05:12.570
just displays static information
about the application.

00:05:12.570 --> 00:05:14.190
Although, this is
kind of simple now--

00:05:14.190 --> 00:05:15.520
there's only two things
in the hierarchy--

00:05:15.520 --> 00:05:16.980
the more we add
to this hierarchy,

00:05:16.980 --> 00:05:19.230
the harder it's going to be
for a user to actually see

00:05:19.230 --> 00:05:21.060
what preference does what.

00:05:21.060 --> 00:05:23.490
We can use preference categories
to help separate this up

00:05:23.490 --> 00:05:25.740
into logical subsections.

00:05:25.740 --> 00:05:28.350
To do this, we simply wrap
these preference objects

00:05:28.350 --> 00:05:30.180
with a PreferenceCategory tag.

00:05:30.180 --> 00:05:32.910
And as you can see, this
now adds an accented title

00:05:32.910 --> 00:05:34.916
above these groups.

00:05:34.916 --> 00:05:37.320
Again, it's important
to set a key for these,

00:05:37.320 --> 00:05:40.770
so it would be considered a
correctly persisted state.

00:05:40.770 --> 00:05:43.590
And the title again, same
as before, same attribute,

00:05:43.590 --> 00:05:46.740
just displayed
slightly differently.

00:05:46.740 --> 00:05:48.819
Next, we're going to add
an EditTextPreference,

00:05:48.819 --> 00:05:50.610
similar to a
SwitchPreferenceCompat in that

00:05:50.610 --> 00:05:52.440
it's a subset of a preference.

00:05:52.440 --> 00:05:54.150
This preference uses
a dialogue to allow

00:05:54.150 --> 00:05:55.450
persisting a string value.

00:05:55.450 --> 00:05:57.720
So when the user taps
on this preference,

00:05:57.720 --> 00:05:59.670
we automatically open
a dialogue for you,

00:05:59.670 --> 00:06:02.000
which contains an
editable text field.

00:06:02.000 --> 00:06:05.570
And when the user taps on OK,
this value is then persisted.

00:06:05.570 --> 00:06:08.480
However, this gives us
some interesting questions.

00:06:08.480 --> 00:06:10.337
What do we set for
the summary here?

00:06:10.337 --> 00:06:12.920
Right now, there's no summary,
so it's quite hard for the user

00:06:12.920 --> 00:06:14.337
to see what the
current state is.

00:06:14.337 --> 00:06:16.670
And we would like to show the
user what they've actually

00:06:16.670 --> 00:06:18.529
saved, so they know
what they've done.

00:06:18.529 --> 00:06:20.570
But since this can change
dynamically at runtime,

00:06:20.570 --> 00:06:23.030
we can't just put a string here.

00:06:23.030 --> 00:06:26.210
The answer here is to use
a simple summary provider.

00:06:26.210 --> 00:06:29.600
This is added recently
in the 1.1 Alpha release.

00:06:29.600 --> 00:06:32.270
And it's part of a
broad category of things

00:06:32.270 --> 00:06:33.740
we call Dynamic Summaries.

00:06:33.740 --> 00:06:35.430
I'll cover more
about that later on.

00:06:35.430 --> 00:06:37.377
But this simple attribute,
when set to true,

00:06:37.377 --> 00:06:39.710
will mean that the preference
summary will automatically

00:06:39.710 --> 00:06:42.530
display either the value saved
for the preference or the text

00:06:42.530 --> 00:06:45.150
not set, if there
isn't any value set.

00:06:45.150 --> 00:06:47.540
So now we have a way for
the user to set a sync code,

00:06:47.540 --> 00:06:50.294
and they can see the value
they've set automatically.

00:06:50.294 --> 00:06:51.710
However, there's
one problem here.

00:06:51.710 --> 00:06:53.085
It doesn't really
make much sense

00:06:53.085 --> 00:06:56.060
for the user to be able to
change this field if syncing

00:06:56.060 --> 00:06:58.850
actually isn't enabled.

00:06:58.850 --> 00:07:02.090
We can use a dependency
here to fix that.

00:07:02.090 --> 00:07:04.370
Essentially,
setting a dependency

00:07:04.370 --> 00:07:05.870
allows another
preference to control

00:07:05.870 --> 00:07:07.760
the state of this preference.

00:07:07.760 --> 00:07:10.220
So we set the key of the
SwitchPreferenceCompat

00:07:10.220 --> 00:07:11.637
that will control
this preference.

00:07:11.637 --> 00:07:14.095
So this means that whenever
the switch preference is turned

00:07:14.095 --> 00:07:16.460
off, as it is here, the actual
preference is grayed out

00:07:16.460 --> 00:07:18.636
and can no longer
be interacted with.

00:07:18.636 --> 00:07:20.010
And when the switch
is turned on,

00:07:20.010 --> 00:07:22.860
the preference returns to normal
and can be interacted with.

00:07:22.860 --> 00:07:26.484
Our hierarchy is almost complete
from the example that we gave.

00:07:26.484 --> 00:07:27.900
The only thing
we'd now like to do

00:07:27.900 --> 00:07:30.050
is set a useful summary
for this switch.

00:07:30.050 --> 00:07:32.190
Right now, Enable
Periodic Syncing

00:07:32.190 --> 00:07:33.870
is on, but what does
that actually mean?

00:07:33.870 --> 00:07:35.500
Have we synced recently?

00:07:35.500 --> 00:07:37.650
Maybe there's a problem
connecting to the server.

00:07:37.650 --> 00:07:40.050
So we can use a custom
dynamic summary here

00:07:40.050 --> 00:07:42.390
to display to the user when
we've lost sync to providing

00:07:42.390 --> 00:07:45.370
some more useful context.

00:07:45.370 --> 00:07:46.890
In general, dynamic
summaries are

00:07:46.890 --> 00:07:49.344
useful in two sort
of broad scenarios.

00:07:49.344 --> 00:07:51.510
Firstly, if you'd like to
provide the user with more

00:07:51.510 --> 00:07:53.426
context that is tied to
a specific preference,

00:07:53.426 --> 00:07:54.310
and what it means.

00:07:54.310 --> 00:07:56.220
So in this case, we'd
like to tell them when

00:07:56.220 --> 00:07:57.890
we've last synced the device.

00:07:57.890 --> 00:07:59.520
Or it can also be
useful if you'd

00:07:59.520 --> 00:08:01.530
like to display some
dynamic information.

00:08:01.530 --> 00:08:03.810
This could be something
like a version information

00:08:03.810 --> 00:08:06.060
of your application or
even user information,

00:08:06.060 --> 00:08:09.246
such as a specific
ID or email address.

00:08:09.246 --> 00:08:12.310
To set this dynamic summary,
we use the SummaryProvider

00:08:12.310 --> 00:08:13.150
interface.

00:08:13.150 --> 00:08:15.430
We can use this to either
react to the internal state

00:08:15.430 --> 00:08:17.380
of the preference or
just use it as a callback

00:08:17.380 --> 00:08:20.740
to generate our own dynamic
summary from external state.

00:08:20.740 --> 00:08:22.920
Here, we set the type as
SwitchPreferenceCompat.

00:08:22.920 --> 00:08:24.545
That is, that is the
type of preference

00:08:24.545 --> 00:08:26.461
that we're setting
the summary for.

00:08:26.461 --> 00:08:28.530
When the preferences are
checked, in other words,

00:08:28.530 --> 00:08:31.155
when syncing is enabled, we want
to just display that last time

00:08:31.155 --> 00:08:32.282
we successfully synced.

00:08:32.282 --> 00:08:34.010
And otherwise, we're
just going to say

00:08:34.010 --> 00:08:36.184
it's disabled, so it's
clear to the user.

00:08:36.184 --> 00:08:37.909
And this is all there
really is to it.

00:08:37.909 --> 00:08:41.554
All we need to do now is just
set this on the Preference.

00:08:41.554 --> 00:08:43.850
So to do that, we
call FindPreference

00:08:43.850 --> 00:08:46.990
using the key we previously
assigned in the XML.

00:08:46.990 --> 00:08:49.260
And then we just set
the summary provider.

00:08:49.260 --> 00:08:51.170
This and any other
similar configuration

00:08:51.170 --> 00:08:52.760
should be done in
onCreatePreferences

00:08:52.760 --> 00:08:54.876
in your
PreferenceFragmentCompat.

00:08:54.876 --> 00:08:56.680
And now, whenever I
use the toggles instead

00:08:56.680 --> 00:08:58.721
of the preference, the
summary will automatically

00:08:58.721 --> 00:09:01.250
be updated based on the
constraints we defined.

00:09:01.250 --> 00:09:03.560
Now that we've built up a
more advanced hierarchy,

00:09:03.560 --> 00:09:05.510
I'm going to cover using
separate hierarchies

00:09:05.510 --> 00:09:08.420
in separate screens.

00:09:08.420 --> 00:09:11.180
Oftentimes, you'll want to split
up more complex hierarchies

00:09:11.180 --> 00:09:12.620
into separate
screens, making sure

00:09:12.620 --> 00:09:14.660
that less important preferences
aren't cluttering up

00:09:14.660 --> 00:09:16.659
your main screen and
making it hard for the user

00:09:16.659 --> 00:09:18.830
to focus on the things they
actually want to change.

00:09:18.830 --> 00:09:20.582
If you're already
using the Framework API

00:09:20.582 --> 00:09:22.790
and looking to migrate,
there are some different ways

00:09:22.790 --> 00:09:24.850
you may have structured
your separate screens.

00:09:24.850 --> 00:09:26.840
And if you're starting out fresh
with the AndroidX Preference

00:09:26.840 --> 00:09:28.631
library, you may be
wondering what the best

00:09:28.631 --> 00:09:29.910
way of handling this is.

00:09:29.910 --> 00:09:33.420
But first, let's just recap
how a single screen looks.

00:09:33.420 --> 00:09:35.750
We have our activity at the
top, which will internally

00:09:35.750 --> 00:09:39.820
wrap a fragment, which then
contains its actual hierarchy.

00:09:39.820 --> 00:09:41.600
We can kind of
consider the fragment

00:09:41.600 --> 00:09:44.840
in the hierarchy to be sort
of a screen of settings.

00:09:44.840 --> 00:09:46.550
So in reality, we
just have an activity

00:09:46.550 --> 00:09:49.810
which loads a setting
screen, which is this.

00:09:49.810 --> 00:09:52.592
And this works fine
when we have one screen.

00:09:52.592 --> 00:09:54.800
But what if our hierarchy
looked something like this?

00:09:54.800 --> 00:09:58.220
Now on our first screen, we
have links to other screens.

00:09:58.220 --> 00:10:00.455
So the sync will
link to a screen

00:10:00.455 --> 00:10:03.050
of sync-related
preferences and Messages

00:10:03.050 --> 00:10:06.450
will link to some more specific
messages-related preferences.

00:10:06.450 --> 00:10:08.769
How does this look like
with our architecture?

00:10:08.769 --> 00:10:11.060
It's actually very simple to
what we've done previously

00:10:11.060 --> 00:10:13.296
with a single screen.

00:10:13.296 --> 00:10:14.920
The Initial Settings
screen will just

00:10:14.920 --> 00:10:17.350
be just as before-- a
PreferenceFragmentCompat

00:10:17.350 --> 00:10:19.380
with a hierarchy.

00:10:19.380 --> 00:10:20.770
And then the
Sync-Scanning screen

00:10:20.770 --> 00:10:22.510
will also be a
PreferenceFragmentCompat

00:10:22.510 --> 00:10:25.360
with its own hierarchy, and
so on for any other screens

00:10:25.360 --> 00:10:26.800
you may have.

00:10:26.800 --> 00:10:28.680
What we need to
do now differently

00:10:28.680 --> 00:10:31.330
is just the final link between
the SyncPreference object

00:10:31.330 --> 00:10:33.340
and the SyncSettings
fragment, so whenever

00:10:33.340 --> 00:10:35.020
the user clicks on
this preference,

00:10:35.020 --> 00:10:37.451
we will load the related screen.

00:10:37.451 --> 00:10:39.200
So we'll start off in
this state, pointing

00:10:39.200 --> 00:10:40.760
to the Initial Settings screen.

00:10:40.760 --> 00:10:42.740
When the user taps
a preference, now

00:10:42.740 --> 00:10:44.450
that we've already
defined this link,

00:10:44.450 --> 00:10:47.556
we're just going to swap out
the screen from underneath.

00:10:47.556 --> 00:10:50.340
And because we're still using
Preferences to act as the link,

00:10:50.340 --> 00:10:51.810
the Initial Settings
hierarchy is

00:10:51.810 --> 00:10:54.576
going to be just as
we've done before.

00:10:54.576 --> 00:10:57.280
So again, we start with the
root PreferenceScreen tag,

00:10:57.280 --> 00:10:59.550
and we just have two
basic preferences--

00:10:59.550 --> 00:11:02.611
one for syncing and
one for messages.

00:11:02.611 --> 00:11:05.330
It's important, while you
may want to add an icon here

00:11:05.330 --> 00:11:07.310
to the start of the preference,
to provide some more context

00:11:07.310 --> 00:11:09.685
to the user, as we don't really
have an important summary

00:11:09.685 --> 00:11:10.440
display here.

00:11:10.440 --> 00:11:12.800
This is just done by defining
a drawable with the Icon

00:11:12.800 --> 00:11:13.350
attribute.

00:11:13.350 --> 00:11:16.156
So this will just be something
in your res/drawable directory.

00:11:16.156 --> 00:11:17.530
And now the only
thing left to do

00:11:17.530 --> 00:11:19.850
is just to find the links
between the fragments.

00:11:19.850 --> 00:11:22.282
So to do this, we use
the Fragment attribute,

00:11:22.282 --> 00:11:23.990
and we just set the
fully-qualified class

00:11:23.990 --> 00:11:26.040
name of the fragment.

00:11:26.040 --> 00:11:28.044
If your fragment is
nested in a class,

00:11:28.044 --> 00:11:29.460
you'll need to use
the dollar sign

00:11:29.460 --> 00:11:32.100
to separate the outer
class and the inner class.

00:11:32.100 --> 00:11:34.350
And that's it for the hierarchy.

00:11:34.350 --> 00:11:36.510
The activity is very similar
to what we had before.

00:11:36.510 --> 00:11:39.912
We just set the Initial
Settings screen to be displayed.

00:11:39.912 --> 00:11:41.370
The only difference
here is that we

00:11:41.370 --> 00:11:45.182
should implement this method,
onPreference.Fragment.

00:11:45.182 --> 00:11:47.640
This method is called when a
user taps on a preference that

00:11:47.640 --> 00:11:49.440
has an associated
fragment and allows

00:11:49.440 --> 00:11:51.450
you to customize any
transitions or animations

00:11:51.450 --> 00:11:52.710
between fragments.

00:11:52.710 --> 00:11:54.260
There is a default
implementation.

00:11:54.260 --> 00:11:55.470
So if you don't
overwrite this method,

00:11:55.470 --> 00:11:56.940
we will still handle it for you.

00:11:56.940 --> 00:11:59.148
But you won't have any nice
transitions or animations

00:11:59.148 --> 00:12:00.660
that you may want.

00:12:00.660 --> 00:12:03.570
And the fragments are going to
be exactly the same as before.

00:12:03.570 --> 00:12:05.120
Again, all we need
to do here is just

00:12:05.120 --> 00:12:07.760
overwrite onCreatePreferences
and set the relevant XML

00:12:07.760 --> 00:12:08.860
resource.

00:12:08.860 --> 00:12:10.190
And that's really it now.

00:12:10.190 --> 00:12:12.380
Whenever a user taps on
the messages or the sync

00:12:12.380 --> 00:12:14.510
preference, the
corresponding fragment

00:12:14.510 --> 00:12:17.810
will be ultimately
displayed to the user.

00:12:17.810 --> 00:12:21.960
So to wrap some things up, we've
recently released 1.1 Alpha01.

00:12:21.960 --> 00:12:24.400
So please, if you
haven't already, get it.

00:12:24.400 --> 00:12:27.657
Try using Dynamic Summaries
and other recent features.

00:12:27.657 --> 00:12:29.490
Please forward any bugs
and feature requests

00:12:29.490 --> 00:12:32.996
to this component on
issuetracker.google.com.

00:12:32.996 --> 00:12:35.060
We've recently updated
the Android Settings

00:12:35.060 --> 00:12:37.959
Guide to make use of the
AndroidX Preference library.

00:12:37.959 --> 00:12:39.750
Please check it out
for further information

00:12:39.750 --> 00:12:40.680
on some of the
things I've talked

00:12:40.680 --> 00:12:42.596
about in this talk and
some other features out

00:12:42.596 --> 00:12:44.082
of the scope of this talk.

00:12:44.082 --> 00:12:46.290
And we're working on
Template for Android Studio,

00:12:46.290 --> 00:12:48.330
as well as public
samples demonstrating

00:12:48.330 --> 00:12:51.224
this new library coming soon.

00:12:51.224 --> 00:12:52.890
For more information
on Android Jetpack,

00:12:52.890 --> 00:12:56.020
you can go to
developer.android.com/jetpack.

00:12:56.020 --> 00:12:58.140
And thank you for listening.

00:12:58.140 --> 00:12:59.340
[APPLAUSE]

00:12:59.340 --> 00:13:02.090
[MUSIC PLAYING]

