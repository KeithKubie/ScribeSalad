WEBVTT
Kind: captions
Language: en

00:14:01.295 --> 00:14:04.757
  What that actually means 
is that if there are two deck 

00:14:04.758 --> 00:14:06.758
lairs       
lair  

00:14:13.396 --> 00:14:18.416
attribute, your app won't build.
     So instead of declare ing 

00:14:18.417 --> 00:14:20.417
the 
Android name space, you declare 

00:14:22.120 --> 00:14:26.163
your app one.  You do that via 
this sin   

00:14:37.053 --> 00:14:41.910
  syntax, and we know that's 
sort of clumsy.  We just talked 

00:14:42.224 --> 00:14:45.056
about what they are, so let's 
bout the difference and 

00:14:45.057 --> 00:14:49.248
how you actually use them.
     So, themes, .  Themes are 

00:14:50.246 --> 00:14:54.273
total context, which is why it 
take 20 methods.  One called set

00:14:56.149 --> 00:14:59.585
points to style.  One thing to 
note is that it's kind of a 

00:14:59.979 --> 00:15:04.514
badly named method in that it 
doesn't set, it apply ies.  So 

00:15:04.515 --> 00:15:07.753
you'll already have a theme and 
then when you call this method, 

00:15:08.222 --> 00:15:13.441
 on top.  And then 
you have a get theme, which will

00:15:18.661 --> 00:15:23.654
your manifest, internally, all 
that does is just before your is

00:15:25.698 --> 00:15:30.517
for you.  So it's exactly the 
same as the APIs with calling.

00:15:30.920 --> 00:15:34.538
     Now, themes don't actually 
do anything.  I like to think of

00:15:34.539 --> 00:15:37.345
  big configuration stores      
stores.  Let's take a look at 

00:15:38.141 --> 00:15:40.149
things which are 
actually in there and what b 

00:15:40.150 --> 00:15:41.238
kind of configuration themes are

00:15:41.239 --> 00:15:43.239
in there.  The first thing is 

00:15:47.269 --> 00:15:49.393
default widget styles.  When you

00:15:49.394 --> 00:15:54.012
create a widget, it will have a 
default style for it and the way

00:15:56.330 --> 00:16:00.442
style is in your theme.  Each 
different widget has a different

00:16:03.978 --> 00:16:06.883
text is called edit style.  Text

00:16:06.884 --> 00:16:09.893
is called text style.  You get 
the idea.  But, yeah, that's the

00:16:15.827 --> 00:16:18.628
color views.
     Alan is going to talk about

00:16:25.658 --> 00:16:29.181
they're basically mini styles 
which affect only text.  Now, 

00:16:29.182 --> 00:16:33.601
this is where I think the bulk 
of stuff is in themes an that is

00:16:36.209 --> 00:16:38.670
window is create ed for you 
internally and that is where 

00:16:39.314 --> 00:16:43.037
your whole view hierarchy sits 
and above that is a lot of 

00:16:43.038 --> 00:16:46.760
framework stuff so if you're 
using an action bar, it will 

00:16:46.761 --> 00:16:49.065
inject a load of views for the 
action bar.

00:16:49.066 --> 00:16:51.607
     And this is so all the 
configuration value asks in your

00:16:57.298 --> 00:16:59.298
it.  
Then we have some drawables.  

00:16:59.520 --> 00:17:02.635
Wouldn't it be nice if we 
brought in some off the shelf 

00:17:02.636 --> 00:17:07.891
handy drawables to use, and we  
 The most important I think 

00:17:07.892 --> 00:17:10.461
is select backgrounds.  That 
will give you a really nice 

00:17:10.668 --> 00:17:12.669
draw    
drawable to use as a view, a 

00:17:12.775 --> 00:17:15.891
background view.  It will give 
you a highlight.

00:17:15.892 --> 00:17:18.799
     It will give you like a rip

00:17:18.800 --> 00:17:23.117
ripple.  Before that, it's kind 
of like a us.  And then lastly, 

00:17:24.825 --> 00:17:27.853
call theme session.  Alan's  
about that later, 

00:17:28.255 --> 00:17:31.467
but basically there are 
components laid to override the 

00:17:31.468 --> 00:17:34.970
theme and they'll pick it out 
from your master theme.  Right, 

00:17:34.971 --> 00:17:36.978
so that's themes out of the way.

00:17:36.979 --> 00:17:39.561
Let's talk about styles.
     Styles do a lot.  They're 

00:17:39.890 --> 00:17:45.419
the things that do the bulk of 
the work.  They're really handy 

00:17:48.586 --> 00:17:52.562
for decomposition of styles.  
Let's look at an example.  So 

00:17:52.563 --> 00:17:56.210
here we have a view and we want 
to reuse this background tag.  

00:17:56.211 --> 00:18:00.303
Now, this is kind of a trivial  
you're only 

00:18:00.304 --> 00:18:03.624
reuse ing one thing.  You 
wouldn't 

00:18:03.625 --> 00:18:06.147
use this, you would use three or

00:18:06.148 --> 00:18:09.951
four but it's a bit of an 
unwieldily example if we do 

00:18:10.254 --> 00:18:11.680
more    
more.  So we're going to reuse 

00:18:11.681 --> 00:18:14.689
this.  Here's that style.  We'll

00:18:14.690 --> 00:18:16.031
put in the attribute, that's the

00:18:16.032 --> 00:18:19.100
name, and then we'll put our 
value in it.  Now each value you

00:18:22.508 --> 00:18:29.528
once we do that, we can go back 
ur layout and swap the 

00:18:29.529 --> 00:18:31.816
Android background and replace 
it with the style tech, pointing

00:18:35.459 --> 00:18:40.502
they'll all be apply ied too.
     A bit of a pro type e tip 

00:18:41.295 --> 00:18:45.576
for you, Android studio does 
that nicely.  If you go to re  

00:18:45.577 --> 00:18:51.741
refactor style, it gives you a 
nice little UI where you can 

00:18:51.742 --> 00:18:53.939
pull out attributes and do it 
for you but the other good thing

00:18:55.548 --> 00:19:00.091
views in your layout and then 
automatically reuse the style.  

00:19:00.092 --> 00:19:03.507
It's pretty cool.  So hopefully 
now you know the difference 

00:19:03.508 --> 00:19:08.015
between themes and styles, so 
let's have a look at the 

00:19:08.016 --> 00:19:14.634
intricate           intrick 
agency iys of -- intricacies of 

00:19:14.635 --> 00:19:20.277
create ing them.  Themes and 
styles, it's handy when you're 

00:19:21.168 --> 00:19:24.489
two bit styles.  
Important thing to know is that 

00:19:24.490 --> 00:19:28.543
they overlay.  There are a 
couple of ways of using them.  

00:19:29.123 --> 00:19:35.251
The first is implicitly, so the 
star before the preceding dot.

00:19:35.656 --> 00:19:39.169
     You can also do it 
explicitly, and that's done for 

00:19:39.170 --> 00:19:42.587
the parent tack.  So here we've 
got style called my button 

00:19:42.896 --> 00:19:45.098
style     
style, and it sets an explicit 

00:19:45.409 --> 00:19:51.934
parent, and as you guessed, the 
is what you set.  The ot here in

00:19:51.935 --> 00:19:54.449
 the explicit  of the implicit. 

00:19:54.450 --> 00:19:58.562
So you've got style here using 
dot notation in the name but 

00:19:59.376 --> 00:20:02.585
also has the parent tack and the

00:20:02.586 --> 00:20:08.043
explicit version always wins.
     Now the really powerful 

00:20:08.044 --> 00:20:10.015
thing when using styles is that 
you can reference values from 

00:20:10.016 --> 00:20:12.634
your theme and that's the 
attribute thing we were talking 

00:20:12.635 --> 00:20:15.641
about earlier.  So here we go 
back to our style we create ed 

00:20:15.851 --> 00:20:18.560
which sets a background.  And 
instead of using that, we want 

00:20:18.944 --> 00:20:25.889
to use the backgrounds which we 
talked about earlier which is 

00:20:25.890 --> 00:20:28.889
that nice clickable highlight.  
So this thing looks a little bit

00:20:32.414 --> 00:20:35.317
mark    
mark.  Now, that denotes that 

00:20:35.318 --> 00:20:37.927
we're going to be doing a theme 
looker.

00:20:37.928 --> 00:20:40.766
     The second bit, the Android

00:20:42.211 --> 00:20:45.293
colon is the name space we're 
going to be looking up.  So if 

00:20:45.294 --> 00:20:49.503
you're using a custom attribute,

00:20:49.873 --> 00:20:52.933
you can put whatever name space.

00:20:52.934 --> 00:20:57.255
Then we have/, that denotes the 
thing we're going to be looking 

00:20:57.568 --> 00:21:02.307
at.  We only have one type, 
which is actress, you can 

00:21:02.308 --> 00:21:05.078
actually submit this.  And then 
we have the last part which is 

00:21:05.079 --> 00:21:06.710
the actual name of the attribute

00:21:06.711 --> 00:21:09.347
we're going to be looking up.
     Now, like I said, the type 

00:21:09.348 --> 00:21:17.338
is optional.  The access slash 
only      o 

00:21:17.339 --> 00:21:23.674
omniscient.  It works the same. 

00:21:23.675 --> 00:21:25.472
Now we have Alan.
   &gt;&gt; ALAN VIVERETTE: Thanks, 

00:21:25.473 --> 00:21:28.510
Chris.  Chris just gave you the 
overview of what is a theme, 

00:21:29.408 --> 00:21:32.623
what is a style, and how do you 
create them?  So we're going to 

00:21:32.624 --> 00:21:36.425
go hands on with some of the and
 what we have as 

00:21:36.426 --> 00:21:39.959
the building blocks and how we 
apply these in practice.  So 

00:21:40.057 --> 00:21:42.146
first we have themes.  Themes in

00:21:42.147 --> 00:21:43.756
Android are fixed with theme 
dot   

00:21:43.757 --> 00:21:48.485
dot.  In material, it's theme 
dot material.  So everyone 

00:21:48.880 --> 00:21:51.397
familiar with these.  
We have the material dark theme,

00:21:53.095 --> 00:21:56.466
special things like give you a 
dark action baron   

00:22:00.031 --> 00:22:05.333
    bar on top of a 
light theme.  It's just a huge 

00:22:05.756 --> 00:22:09.162
bag of attributes for colors, 
window attributes, things like 

00:22:09.272 --> 00:22:13.544
that.  We also have overlay 
themes that define a subset of 

00:22:13.545 --> 00:22:16.486
values that as Chris mentioned, 
get apply ied on top of your 

00:22:16.795 --> 00:22:19.115
existing theme.  So for example,

00:22:19.116 --> 00:22:23.726
term.light contains only the 
colors relevant for a light 

00:22:23.727 --> 00:22:25.601
theme.  It's not going to change

00:22:25.602 --> 00:22:26.631
initiative your window attribute

00:22:26.632 --> 00:22:31.044
attributes.  For people who are 
developing for older platforms, 

00:22:31.045 --> 00:22:36.165
you may have noticed on API 21 
and 22 that if you set a color 

00:22:37.296 --> 00:22:39.892
accent for your theme and open a

00:22:39.893 --> 00:22:41.992
dying original on API 21 and 22,

00:22:41.993 --> 00:22:46.238
you're still going to get teal, 
unless you explicitly define 

00:22:46.573 --> 00:22:52.272
something that redefines that 
color.  In API 23, we added a 

00:22:52.273 --> 00:22:55.011
dialogue theme.  It gets 
apply ied 

00:22:55.012 --> 00:22:56.851
on top of your activity theme so

00:22:56.852 --> 00:23:00.707
the host they've creates the 
dialogue, we apply window 

00:23:00.708 --> 00:23:03.003
accents on top that have so your

00:23:03.004 --> 00:23:07.546
color accent, anything you set 
to that gets propagate ed to 

00:23:07.547 --> 00:23:10.863
dialogue on API 23 and above.
     Overall theme looks like 

00:23:10.864 --> 00:23:13.672
this, again, it's just a subset 
of the thing that's would have 

00:23:13.673 --> 00:23:17.492
been define ed in the overall 
material or light themes.  Can 

00:23:17.493 --> 00:23:23.507
you create these yourself very 
materially and just use theme.

00:23:25.525 --> 00:23:30.430
your activity.  Material theme 
also spec defines a number of 

00:23:30.647 --> 00:23:32.650
text experiences.  So for larger

00:23:32.651 --> 00:23:39.773
text, you change the opacity of 
buttons.  You may set all caps. 

00:23:44.352 --> 00:23:47.502
experience in material 
experience .0.  These are just 

00:23:48.096 --> 00:23:51.304
sets of attributes specific to 
text and either define ed in 

00:23:51.305 --> 00:23:53.200
your 
theme with text appearance small

00:23:57.727 --> 00:24:02.596
the Android: Text appearance 
attributes so this is just going

00:24:03.765 --> 00:24:05.765
ttribute         
attributes to style your text.

00:24:06.030 --> 00:24:09.688
     We also have a number of 
default widget styles, so these 

00:24:09.689 --> 00:24:14.288
are prefixed with widget.templet

00:24:14.289 --> 00:24:17.062
they're going to implement 
things you recognize from the 

00:24:17.063 --> 00:24:23.157
material spec, to, for example, 
we've added a seek bar.discreets

00:24:28.367 --> 00:24:33.516
your seek bar.  You can check  d
emos for a along             for

00:24:33.517 --> 00:24:35.205
 a longer 
example of some of the different

00:24:36.705 --> 00:24:39.719
widget styles, but these you can

00:24:39.720 --> 00:24:44.747
apply to your widgets with the 
style attributes so style equals

00:24:50.387 --> 00:24:52.593
set of attributes that are going

00:24:52.594 --> 00:24:56.513
to ride defaults for views.  So 
for example the seek bar 

00:24:56.514 --> 00:25:00.035
discreet has implicit 
inheritance from the seek bar, 

00:25:00.348 --> 00:25:02.745
and we just redefine ed tick 
mark 

00:25:02.746 --> 00:25:05.860
so we get those variables at 
each progress point.

00:25:05.861 --> 00:25:08.368
     So while we're here, 
anybody who's really dug into 

00:25:08.369 --> 00:25:11.679
the material theme may have 
noticed something unusual about 

00:25:11.680 --> 00:25:14.396
our widget styles and this is 
that the light themes and dark 

00:25:14.913 --> 00:25:18.490
themes are identical.  So our 
themes typically just 

00:25:18.491 --> 00:25:21.329
inherit directly from the 
default themes        themes and

00:25:21.730 --> 00:25:24.625
 don't re  
redefine anything, but under 

00:25:25.250 --> 00:25:28.178
parent themes, so if 
your activity is light or dark, 

00:25:28.477 --> 00:25:30.355
you're still going to get 
correctly           

00:25:30.356 --> 00:25:36.496
correctly colored widgets.  How 
do we do that?  Well, as Chris 

00:25:37.085 --> 00:25:40.298
mentioned, we have colors define

00:25:40.299 --> 00:25:43.014
defined by the themes and we're 
going to use these in the 

00:25:43.127 --> 00:25:46.140
widget      
widgets so this allows        

00:25:46.141 --> 00:25:48.845
allows really 
high level.  Everybody should be

00:25:50.444 --> 00:25:55.874
material.  This gives a little 
pop-up in various plaices, the 

00:25:55.875 --> 00:25:59.856
foreground borderless color 
buttons, radio buttons, et 

00:25:59.857 --> 00:26:04.726
cetera.  And one example of how 
to implement this.  So, for the 

00:26:05.113 --> 00:26:07.934
colored button that we just 
showed, we have a background 

00:26:08.622 --> 00:26:11.429
that points to a drawable.  In 
that drawable, which is just a 

00:26:11.540 --> 00:26:15.627
ripple wrapping around a shape, 
we actually don't use PNGs 

00:26:15.628 --> 00:26:17.478
anymore, we have a tent and that

00:26:17.479 --> 00:26:20.878
tent points to a color state 
list.  And that color state list

00:26:25.612 --> 00:26:28.740
 a disable ed 
statement the enabled state 

00:26:28.741 --> 00:26:30.040
points to colored access so when

00:26:30.041 --> 00:26:34.056
you see that color button, the 
default color is going to be 

00:26:34.057 --> 00:26:38.195
color action tent on a white 
shaped drawable wrapped with a .

00:26:38.757 --> 00:26:41.721
     So let's talk a little bit 
bout theme ed colors.  We 

00:26:41.722 --> 00:26:46.462
also have foreground and 
background colors so these are 

00:26:46.463 --> 00:26:52.221
going to be white and black or l
y     ively for the white and 

00:26:52.222 --> 00:26:58.403
dark themes.  What good does 
that do us?  You may not be 

00:26:58.404 --> 00:27:02.375
using flat black or white in 
your application a L. well, 

00:27:02.842 --> 00:27:05.826
         lot.  Well, 
let's take the switch, for 

00:27:05.827 --> 00:27:07.652
example.  We could have define 
ed 

00:27:07.653 --> 00:27:09.864
theme attributes for switch fore

00:27:09.865 --> 00:27:11.973
foreground, switch background, 

00:27:15.713 --> 00:27:19.694
 all basically 
variations on white or black.   

00:27:19.695 --> 00:27:23.503
the XML for this.  
The switch is define ed as a 

00:27:23.603 --> 00:27:27.921
round 
-- again, we don't really use 

00:27:28.444 --> 00:27:30.634
PN  
PNGs.  In the enabled -- sorry, 

00:27:30.906 --> 00:27:33.261
in the disable ed state, this is

00:27:33.262 --> 00:27:36.685
going to inherit the disable ed 
alpha from the theme which vary 

00:27:38.223 --> 00:27:41.606
theme and it's going to use the 
foreground color.  So in the 

00:27:41.607 --> 00:27:46.217
dark theme, you have a dropped 
alpha version of white.  This is

00:27:49.953 --> 00:27:52.557
wreck that already has a 
capacity so we're going to end 

00:27:52.558 --> 00:27:55.281
up with everything being a 
slight variation on the fore    

00:27:55.282 --> 00:27:59.436
foreground color.  And you can 
very easily use this in your own

00:28:03.213 --> 00:28:04.128
going to be consistent with your

00:28:04.129 --> 00:28:06.328
theme.  We also have text colors

00:28:06.329 --> 00:28:09.651
colors, as Chris mentioned.
     So we have a primary text 

00:28:09.652 --> 00:28:12.953
color which is used to provide 
very high contrast for things 

00:28:13.465 --> 00:28:16.652
user needs to be looking at 
immediately.  We have secondary 

00:28:16.653 --> 00:28:20.079
color which is just a dropped 
apes capacity and follow the 

00:28:20.080 --> 00:28:27.105
material spec so I believe 84 
and 56 percent of    opacity and

00:28:28.997 --> 00:28:32.565
also have inverse versions of 
these which we don't use much 

00:28:32.566 --> 00:28:40.672
but if you're going to be 
displaying content against your 

00:28:40.673 --> 00:28:42.190
accent color, text inverse is a 
great way to do that.

00:28:42.191 --> 00:28:46.657
     We also have color accent 
primary dark which we added in 

00:28:46.658 --> 00:28:50.035
material and are going to 
provide your branding materials 

00:28:50.114 --> 00:28:54.044
so if you're pulling in color 
accent, you get that color pop, 

00:28:54.045 --> 00:28:57.379
you'll probably want to use 
color primary inverse on top of 

00:28:57.380 --> 00:29:00.471
that so in a white theme, you'll

00:29:00.472 --> 00:29:04.997
Val dark accent.  In a white  
have a dark accent 

00:29:04.998 --> 00:29:07.296
and you can pull these into your

00:29:07.297 --> 00:29:09.423
     We also have control normal

00:29:09.508 --> 00:29:11.936
and activate ed.  Control normal

00:29:11.937 --> 00:29:15.625
is great and I really recommend 
everybody use this if you have 

00:29:15.626 --> 00:29:20.254
icons.  So, for example, check 
boxes are going to use color 

00:29:20.763 --> 00:29:24.772
normal by default.  If you're 
pulling content into your accent

00:29:28.083 --> 00:29:33.516
going to be the exact right 
opacity, and the number of times

00:29:34.710 --> 00:29:38.879
 s different by like 5   
5 percent alpha, it kills me .  

00:29:38.880 --> 00:29:41.072
So please use color 
normal.

00:29:41.073 --> 00:29:42.965
     So, looking at example from

00:29:42.966 --> 00:29:46.350
API demos, you can probably 
guess how a lot of these widgets

00:29:52.330 --> 00:29:54.507
primary, we have that switch 
below it, which is color 

00:29:54.933 --> 00:29:58.454
secondary.  We have the accent 
color in the activate ed state 

00:29:58.650 --> 00:30:00.452
for 
our check boxes and radio 

00:30:00.453 --> 00:30:02.453
button      
buttons and we have the color 

00:30:02.689 --> 00:30:04.969
background as our overall 
background.  Color backgrounds 

00:30:05.987 --> 00:30:07.379
floating as our card background.

00:30:07.380 --> 00:30:13.704
So, you can look at a screen 
shot of something or look at an 

00:30:14.109 --> 00:30:16.425
application and probably guess 
where a lot of the colors are 

00:30:17.817 --> 00:30:24.957
coming from.  So now we have an 
overview of what's available to 

00:30:25.247 --> 00:30:28.175
us and how these are used to 
build the framework and style 

00:30:28.387 --> 00:30:30.538
and how we can apply these to 
our applications.

00:30:30.539 --> 00:30:34.099
     These are very powerful    
      powerful 

00:30:34.100 --> 00:30:37.319
tools in Android and theme 
attributes are especially 

00:30:37.519 --> 00:30:39.836
power     
powerful starting in API 21.  So

00:30:41.350 --> 00:30:44.353
color state lists and theme 
attributes to tint your drawa

00:30:44.550 --> 00:30:46.552
ble        
drawables so you can specify 

00:30:46.854 --> 00:30:48.070
color control highlight for your

00:30:48.071 --> 00:30:49.209
ripple, which is what we have as

00:30:49.210 --> 00:30:51.488
the default, and you can specify

00:30:51.489 --> 00:30:57.048
color state list as a tint or 
color for XML define ed shapes 

00:30:57.049 --> 00:30:59.322
so 
if you like to step away from 

00:31:00.448 --> 00:31:03.660
using PNGs all the time, maybe 
you have a bunch of different PN

00:31:06.090 --> 00:31:09.387
press a button and get a 
different color.  Color state 

00:31:10.205 --> 00:31:13.402
lists support theme attributes 
starting in the next API 

00:31:14.632 --> 00:31:15.827
version       
version, 22.  This means that 

00:31:15.828 --> 00:31:19.030
you can start pulling in the 
foreground color, the accent 

00:31:19.245 --> 00:31:23.653
color, setting in the alpha to 
match the theme in your color 

00:31:23.971 --> 00:31:26.876
state list which is going to 
again, sheep you step away from 

00:31:27.590 --> 00:31:32.003
having drawable selectors or 
individual PNGs for all of your 

00:31:34.074 --> 00:31:38.004
.  App       AppCompat also 
supports 

00:31:38.005 --> 00:31:42.136
color state lists.  Starting in 
24, you can use something to 

00:31:42.325 --> 00:31:46.163
read theme attributes from your 
color state XML.  It does this 

00:31:46.461 --> 00:31:48.857
automatically               
automatically               

00:31:48.858 --> 00:31:52.588
automatically, internally, and 
you can do this at run time for 

00:31:52.589 --> 00:31:56.256
specific XML files.  We also 
support view tinting.  So what 

00:31:56.400 --> 00:31:58.821
this means is for views that own

00:31:58.822 --> 00:32:01.729
drawable assets, things like the

00:32:01.730 --> 00:32:05.344
thumb in a switch, the track in 
a progress bar, you can tint 

00:32:05.658 --> 00:32:10.383
these either from layout XML or 
at runtime.  So, for example, 

00:32:10.384 --> 00:32:15.384
switch has a thumb and a track 
and because it's a view, it also

00:32:17.598 --> 00:32:21.911
have separate XML attributes 
that you can use to set a tint. 

00:32:25.540 --> 00:32:27.350
is a really powerful way to tint

00:32:27.351 --> 00:32:30.745
just a oneoff somewhere within 
your layout        layout so you

00:32:30.746 --> 00:32:33.176
 need the 
switch to be read, you can make 

00:32:33.479 --> 00:32:36.980
it read really easily, you need 
it read with a disable ed state,

00:32:39.901 --> 00:32:44.638
     As I mentioned, we have a 
bunch of text in the material 

00:32:44.639 --> 00:32:52.021
state bag.  You can apply these 
 using Android text  you can re

00:32:52.558 --> 00:32:54.387
apply 
these at run time which is tomb 

00:32:54.388 --> 00:32:58.650
something unusual for Android.  
So for most views, styles get 

00:32:58.651 --> 00:33:01.613
apply ied once.  For text views,

00:33:01.614 --> 00:33:07.245
you can restyle them at runtime 
whenever you need to using set 

00:33:07.642 --> 00:33:10.250
text experience which takes a 
style that should be a text 

00:33:10.251 --> 00:33:12.655
experience or something that 
inherits from a text experience,

00:33:15.295 --> 00:33:17.105
     All right, so we've learned

00:33:17.106 --> 00:33:19.612
some cool things about what's 
available to us for create ing 

00:33:19.613 --> 00:33:22.018
styles and create ing theme draw

00:33:22.664 --> 00:33:25.648
drawables.  How can we play this

00:33:26.136 --> 00:33:30.871
to do something kind of cool?  
Well we introduced the day/night

00:33:31.164 --> 00:33:34.684
  support library and 
this is something we've support

00:33:39.510 --> 00:33:44.630
resource qualifier.  This 
existed since API eight.  in API

00:33:44.631 --> 00:33:46.461
 23, this is 
something that any application 

00:33:46.462 --> 00:33:48.366
can toggle through API manager. 

00:33:48.367 --> 00:33:51.171
So if you write an application 
and you want to toggle the 

00:33:51.172 --> 00:33:56.010
global state of night mode, you 
just go into UI manager and you 

00:33:56.246 --> 00:34:00.517
can set night mode.  When that 
changes, it's going to be 

00:34:00.518 --> 00:34:09.020
treated as a configuration 
change.  Which adds the land  

00:34:09.021 --> 00:34:11.993
file.  If your 
user either prefers dark or if 

00:34:11.994 --> 00:34:16.590
you want to set it up for 
automatic where at nighttime 

00:34:18.298 --> 00:34:21.615
they'll see'      see a dark 
theme and 

00:34:21.616 --> 00:34:23.634
daytime they'll see a light 
theme.

00:34:23.635 --> 00:34:25.529
     So the actual implement   

00:34:25.530 --> 00:34:27.530
implementation on this rely ies 
on 

00:34:28.464 --> 00:34:31.645
inheritance so we specify a day/

00:34:31.646 --> 00:34:35.902
day/night theme.  The only 
difference is the parent that 

00:34:35.903 --> 00:34:40.536
we're inheriting from.  Under 
not night, or the default 

00:34:40.537 --> 00:34:44.537
qualifier, we're going to to 
inherit it from theme.material 

00:34:44.538 --> 00:34:48.652
lights and under the light 
qualifier we're going to inherit

00:34:52.668 --> 00:34:54.798
r when we have the resource 
application change the 

00:34:55.165 --> 00:34:58.713
application is going to get an 
on configuration chaining and 

00:34:58.714 --> 00:34:59.633
we're going to reload using this

00:34:59.634 --> 00:35:02.533
new parent, which means 
everything that we inflate is 

00:35:02.842 --> 00:35:04.322
going to have different theme 
colors.

00:35:04.323 --> 00:35:07.949
     Now you can also define 
explicit colors so if you want 

00:35:07.950 --> 00:35:12.686
to have a hard-coded color and 
define that differently under 

00:35:12.687 --> 00:35:17.815
night or not night, you can do 
that, but it's easier to rely on

00:35:25.647 --> 00:35:30.966
either dark or light resources 
and in custom widgets you made 

00:35:30.967 --> 00:35:33.078
where you're using theme     

00:35:33.079 --> 00:35:35.598
attributes you're just going to 
automatically get the right 

00:35:35.599 --> 00:35:37.612
colors so you don't have to do a

00:35:37.613 --> 00:35:39.116
lot of work between implementing

00:35:39.117 --> 00:35:43.049
dark and light theme.
     As Chris mentioned 

00:35:43.559 --> 00:35:47.848
yesterday, this has been back 
port the to API 15 through 

00:35:47.849 --> 00:35:50.562
AppCompat so if you want to 
implement a light and dark theme

00:35:58.917 --> 00:36:00.196
switch that will toggle 
night mode.

00:36:00.197 --> 00:36:04.733
     So using themes and 
attributes can help simplify the

00:36:04.734 --> 00:36:06.030
 visual present       
presentation of your a

00:36:06.031 --> 00:36:06.918
pplication           
application, but what if you 

00:36:06.919 --> 00:36:10.030
want to change just a small 
portion of presentation in your 

00:36:10.149 --> 00:36:15.799
application?  So we know that 
theme.material can make your 

00:36:15.800 --> 00:36:19.193
application look dark.  We know 
that theme.materiallight can 

00:36:19.370 --> 00:36:21.157
make your application look 
light     

00:36:21.158 --> 00:36:23.998
light.  But what if you want to 
have something like a dark 

00:36:23.999 --> 00:36:26.989
action bar but the rest of your 
application be light?  Well, 

00:36:26.990 --> 00:36:32.084
there's one way you could do 
this.  You could use the light 

00:36:32.229 --> 00:36:35.666
activity light theme, and then 
just specify everything in your 

00:36:35.971 --> 00:36:37.871
action bar manually to be dark. 

00:36:37.872 --> 00:36:40.491
That's a little complicate ed, 
so 

00:36:40.492 --> 00:36:43.223
maybe instead we'll have a dark 
theme and we'll just manually 

00:36:43.224 --> 00:36:47.137
specify everything in our 
activity, you'll        all of 

00:36:47.138 --> 00:36:49.138
our content to 
be a different color.  That ends

00:36:50.068 --> 00:36:55.771
 being really tricky, so 
please don't do that.  Don't 

00:36:55.772 --> 00:36:58.590
hard-code text colors.  So 
there's an easier way.

00:36:58.591 --> 00:37:01.118
     And that is through overlay

00:37:01.119 --> 00:37:05.767
themes and specifying themes on 
portions of your view hierarchy.

00:37:07.551 --> 00:37:13.767
dark action bar theme.  So we 
actually redefine the theme 

00:37:13.768 --> 00:37:16.160
that's used for the ToolBar 
section of your application.  So

00:37:19.492 --> 00:37:22.736
theme that pulls in light 
colors      

00:37:22.737 --> 00:37:24.393
colors, we have a dark theme 
that pulls in dark colors.  And 

00:37:24.394 --> 00:37:28.222
these are implemented using the 
Android theme attribute from XML

00:37:31.606 --> 00:37:36.381
the layout inflate er and it's 
going to replace our overlay, 

00:37:36.382 --> 00:37:39.584
the theme used to inflate a sub

00:37:39.585 --> 00:37:42.145
subsection of your view 
hierarchy.  And the actual 

00:37:42.146 --> 00:37:47.842
implementation here is pulling 
the theme attribute from your XM

00:37:49.961 --> 00:37:53.095
context theme wrapper which is 
exactly what it sounds like.  We

00:37:59.503 --> 00:38:02.819
going to inflate all the child 
content against this new wrapped

00:38:05.592 --> 00:38:07.433
effectively is the dark theme in

00:38:07.434 --> 00:38:14.162
the section of layout that has  
equals dark and verybody else. 

00:38:14.163 --> 00:38:17.013
actual implementation 
of this rely ies on the default 

00:38:17.014 --> 00:38:20.481
layout that we provide for an 
activity that has an action bar.

00:38:22.998 --> 00:38:25.407
X 
XML files in the Android  screen

00:38:25.408 --> 00:38:28.308
 action is what 
we inflate if you request an 

00:38:28.309 --> 00:38:31.652
action bar in your activity and 
we're going to set the Android 

00:38:31.883 --> 00:38:34.564
theme attribute to inherit from 
the action bar theme attribute 

00:38:34.849 --> 00:38:38.363
define ed in your theme.  Which 
has attribute and theme a lot of

00:38:40.378 --> 00:38:43.205
this theme section.  So we're 
going to pull in the dark theme 

00:38:43.487 --> 00:38:49.220
on top of the light activity 
theme.  We've define ed actions 

00:38:49.221 --> 00:38:51.143
bar theme in the dark action bar

00:38:51.144 --> 00:38:54.850
theme as material.dark.actionbar

00:38:54.851 --> 00:38:57.456
material.dark.actionbar.  This 
is the dark overlay which pulls 

00:38:57.457 --> 00:39:01.095
in the dark theme colors.  It 
switches the text foreground and

00:39:03.012 --> 00:39:09.121
bar sets up a couple of things 
for displaying the -- let's see,

00:39:12.027 --> 00:39:14.552
But the important part is that 
we're pulling in dark colors on 

00:39:14.553 --> 00:39:18.484
top of your base ed light theme.

00:39:18.485 --> 00:39:24.473
We also redefine the pop-up 
theme so that you get a light 

00:39:24.474 --> 00:39:28.537
pop-up on top of a dark action 
baron top of a light activity so

00:39:30.733 --> 00:39:35.063
out on top of each other.
     We also support Android

00:39:36.211 --> 00:39:37.404
.        
Android.theme through the 

00:39:37.405 --> 00:39:42.589
AppCompat library, so this is 
going to go all the way back to 

00:39:42.590 --> 00:39:45.781
API 17, and the inherit is going

00:39:45.782 --> 00:39:50.520
to work on API 11 and above.  
What this means is if you put is

00:39:53.026 --> 00:39:55.133
will apply it to that view only,

00:39:55.134 --> 00:39:58.160
on API 11 and above, we will 
apply it to all of the views 

00:39:58.161 --> 00:40:02.495
that are inflated as a child of 
that view. Chris is going to c

00:40:02.798 --> 00:40:03.993
over 
some common mistakes that 

00:40:03.994 --> 00:40:06.217
developers make when using theme

00:40:06.218 --> 00:40:12.129
themes and styles., Alan.  
So as Alan said, we're now going

00:40:12.945 --> 00:40:17.363
things we see quite a lot both 
in Google apps and also external

00:40:19.375 --> 00:40:22.679
able to stop repeat myself 
because we see this a lot and we

00:40:25.112 --> 00:40:29.109
the first thing we're going to 
go through is using the 

00:40:29.110 --> 00:40:32.625
incorrect stall parent.  So it's
  go through an 

00:40:32.626 --> 00:40:34.134
example and show you what we can

00:40:34.135 --> 00:40:36.160
actually do.  So here we have an

00:40:36.161 --> 00:40:41.065
edit text, and what we want to 
do is make sure every text has 

00:40:41.066 --> 00:40:45.916
the medium font.  So what we're 
going to do is change the 

00:40:45.917 --> 00:40:49.927
default style to edit text and 
then set it to have a medium 

00:40:49.928 --> 00:40:52.369
font.  So here as an example and

00:40:52.370 --> 00:40:56.232
here's our style.  O our style 
here is my edit view, could be 

00:40:56.641 --> 00:41:01.256
whatever you want, but set to 
one thing, and set to medium.  

00:41:01.257 --> 00:41:02.867
Once you've done that we'll then

00:41:02.868 --> 00:41:05.805
reference it in our theme so it 
gets picked up as default and 

00:41:06.019 --> 00:41:07.996
then you run your app and you 
see this.

00:41:07.997 --> 00:41:13.840
     Suddenly, all your edit 
text is gone.  You've lost all 

00:41:13.841 --> 00:41:16.115
your style ing.  No longer 
edit    

00:41:16.116 --> 00:41:19.638
editable.  But you have changed 
ont to medium.  The reason is 

00:41:20.266 --> 00:41:22.146
happens is that you set a parent
 on the style     

00:41:22.147 --> 00:41:26.281
style.  And what that happens, 
is that you no longer pick up 

00:41:26.590 --> 00:41:30.102
all of the system defaults so 
you no longer get the background

00:41:31.792 --> 00:41:36.154
it's editable, all sort of weird

00:41:36.155 --> 00:41:38.945
and random things that are in 
style.  The way you fix it is 

00:41:39.135 --> 00:41:41.979
just set the correct parent.  
The best way to figure out what 

00:41:41.980 --> 00:41:45.900
the parent is is just look at 
what you're inheriting from.  It

00:41:50.938 --> 00:41:55.331
But quite nieces        nicely 
space ed out, 

00:41:55.332 --> 00:41:58.377
grouped together, not too hard 
to read.  And suddenly, once you

00:42:00.658 --> 00:42:01.047
again     
again.

00:42:01.048 --> 00:42:05.487
     Now, this is quite a 
technical mistake.  You're only 

00:42:05.488 --> 00:42:09.286
going to this if you're kind of 
writing custom views but it's 

00:42:09.287 --> 00:42:15.111
the difference between default 
style atra and default style rez

00:42:18.039 --> 00:42:23.270
this.  The main trace e place   
      -- place 

00:42:23.271 --> 00:42:27.217
you're going to use this is 
obtained style attributes.  You 

00:42:27.560 --> 00:42:34.611
can see default state attr and 
default style res and the 

00:42:34.612 --> 00:42:39.748
problem is default style attr 
should always point to an attr. 

00:42:41.681 --> 00:42:45.980
  from, but the last one, 
default style res should point 

00:42:46.283 --> 00:42:49.810
to an actual resource, so an 
actual style resource.  If you 

00:42:50.414 --> 00:42:54.061
mix them up, basically, things 
stop working.  Now following on 

00:42:54.237 --> 00:42:56.237
from that, 

00:42:59.173 --> 00:43:05.196
there's an intricacie          
intricacies in how obtain style 

00:43:05.403 --> 00:43:08.607
actually works.  So when you're 
trying to read a set of 

00:43:08.608 --> 00:43:10.031
attributes, this is the order it

00:43:10.032 --> 00:43:14.091
goes through.  So the first 
thing is looks four is the value

00:43:15.544 --> 00:43:18.837
That's what contains all the 
attributes which are set on your

00:43:21.151 --> 00:43:23.964
layout and you've set Android 
background on it, it will be 

00:43:24.682 --> 00:43:27.179
contained in the attribute.  The

00:43:27.180 --> 00:43:28.495
second thing it looks for is the

00:43:28.496 --> 00:43:32.012
same value within any use er 
style 

00:43:32.013 --> 00:43:33.816
so if you're using the style 
tab   

00:43:33.817 --> 00:43:35.319
tab, it will look in there.  The

00:43:35.320 --> 00:43:39.843
third thing is looks for is in 
the default style res so that's 

00:43:39.844 --> 00:43:44.163
in the actual concrete pointer 
to the default style.  Last 

00:43:44.164 --> 00:43:48.595
thing is looks at is attribute, 
the default style theme, and 

00:43:48.688 --> 00:43:50.688
then finally 

00:43:53.736 --> 00:43:55.959
it looks at base 
value theme.  Now, please don't 

00:43:55.960 --> 00:44:02.652
do this.  Using default 
attribute themes.  This is a 

00:44:02.884 --> 00:44:05.280
mistake which someone in our 
team made.  So here we have a 

00:44:05.482 --> 00:44:10.231
theme and we set the Android 
background on it.  Now Android 

00:44:10.232 --> 00:44:15.606
background is something you use 
in the view, but here it's set 

00:44:15.830 --> 00:44:20.548
in the theme.
     Going back to obtained  

00:44:20.856 --> 00:44:23.166
        obtained s, the last 
thing 

00:44:23.167 --> 00:44:28.075
is looks for is the theme.  So 
basically because you've set it 

00:44:28.701 --> 00:44:36.329
in the theme, any user will go 
to this.  So if you set a  your 

00:44:36.330 --> 00:44:38.510
theme, I 
don't know, pink, every view 

00:44:38.811 --> 00:44:43.231
which does not have this parent 
have a pink background.  

00:44:43.232 --> 00:44:46.651
That's a really big mistake we 
see quite often.

00:44:46.652 --> 00:44:50.490
     Now, we are going to post 
more of these mistakes in a b

00:44:50.668 --> 00:44:52.854
log    
blog, so follow us.  L. that's 

00:44:52.855 --> 00:44:56.791
it.  Hopefully you've learned 
stuff about themes and   Thank 

00:44:56.792 --> 00:44:59.812
you very much.
     (

00:45:03.905 --> 00:45:12.772
Presentation ended at 
11:37 a.m. CST)

00:45:16.020 --> 00:45:18.686
********
This text is being provided in a

00:45:16.020 --> 00:45:19.953
Access Realtime Translation 
(CART) is provided in order to 

00:45:16.020 --> 00:45:16.100
facilitate communication 
accessibility and may not be a 

00:45:16.101 --> 00:45:18.967
totally verbatim record of the 
proceedings.

00:45:16.101 --> 00:45:18.101
********

01:00:42.488 --> 01:00:44.488
 &gt;

01:00:45.969 --> 01:00:46.968
&gt; 
 &gt;&gt; 

01:00:45.970 --> 01:00:45.972
 &gt;&gt; 
 &gt;&gt; 

01:00:45.973 --> 01:00:48.501
 &gt;&gt; Ox, 

01:08:15.538 --> 01:08:16.538
&gt;&gt;
&gt;&gt;

01:08:15.538 --> 01:08:17.105
&gt;&gt;
&gt;&gt;

01:08:17.106 --> 01:08:18.106
&gt;&gt;
&gt;&gt;

01:08:17.106 --> 01:08:18.106
&gt;&gt;
&gt;&gt;

01:08:17.106 --> 01:08:18.106
&gt;&gt;
&gt;&gt;

01:08:17.106 --> 01:08:18.106
&gt;&gt;
&gt;&gt;

01:08:17.106 --> 01:08:20.149
&gt;&gt; 5/18/16.

01:08:23.975 --> 01:08:32.370
&gt;&gt; How is everyone doing today? 
 Is everyone super excited about

01:08:32.661 --> 01:08:34.661
 the new

01:08:37.388 --> 01:08:40.610
 Firebase.  That sounds kind of 
exciting like 9:00 a.m. excited.

01:08:40.611 --> 01:08:48.169
  Let's be 6:00 p.m. concert 
excited.  How excited are you?  

01:08:48.170 --> 01:08:49.962
(Cheers)
That's better.  So I'm here 

01:08:49.963 --> 01:08:57.724
today to talk about two things. 
 Those two things are real time 

01:08:57.725 --> 01:09:02.963
and off line.  It's kind of 
funny when you talk about real 

01:09:02.964 --> 01:09:05.375
time and off line together 
because they are kind of 

01:09:05.376 --> 01:09:09.900
opposites because real time is a
 fresh stream of data, and off 

01:09:09.901 --> 01:09:14.719
line is data we usually get 
served from a stale cache. 

01:09:14.720 --> 01:09:21.349
So getting them together is not 
that easy, and trust me, I know.

01:09:21.350 --> 01:09:27.180
  I once failed at a start up d 
oing just this.  My start up's 

01:09:27.181 --> 01:09:31.537
name was kale. 
And we will one mission.  That 

01:09:31.538 --> 01:09:36.260
was to change the world.  And we
 were going to do that by 

01:09:36.261 --> 01:09:40.183
building a collaborative grocery
 list app.  And if it was going 

01:09:40.184 --> 01:09:44.004
to be world changing, then it 
needed to be in real time and it

01:09:44.210 --> 01:09:48.843
 needed to work off line.  So 
when we went to build our app we

01:09:49.030 --> 01:09:52.759
 started with the back end and 
we were like, okay, we need a 

01:09:52.760 --> 01:09:55.285
server.  That's makes sense and 
then we need a database because 

01:09:55.286 --> 01:10:00.954
we have to store data, so let's 
do that.  Then we had to build a

01:10:00.955 --> 01:10:04.871
 real time wire protocol and 
then there is more than one 

01:10:04.872 --> 01:10:09.204
device.  So we had to build a s 
ynchronizing method so we could 

01:10:09.205 --> 01:10:11.205
talk to all devices in

01:10:19.298 --> 01:10:22.550
 real t ime.  And then after 
that went off line and went back

01:10:23.262 --> 01:10:26.366
 to on line state.  We had to 
send the data back to the 

01:10:26.367 --> 01:10:29.921
server, to the database and 
update clients in real time. 

01:10:30.096 --> 01:10:33.321
So like a year later we 
realized, oh, my God, we haven't

01:10:33.527 --> 01:10:39.871
 even built an app!  So we built
 an Android app an IOS app and 

01:10:39.872 --> 01:10:44.420
web app and the chrome team was 
like you only need to build a 

01:10:44.421 --> 01:10:48.331
progressive web app.  We were 
like I'm sorry, we can't do t 

01:10:48.332 --> 01:10:50.332
hat.  They are like why?  We 
were like we ran out of money. 

01:10:50.552 --> 01:10:55.375
So building a real time offline 
app didn't have to be this hard.

01:10:55.376 --> 01:10:59.900
  Because we could have used 
Firebase.  So Firebase is a 

01:10:59.901 --> 01:11:02.634
suite of integrated products 
designed to help you develop 

01:11:02.635 --> 01:11:08.264
your app, grow your user base 
and earn money.  Today I'm hear 

01:11:08.265 --> 01:11:12.393
to talk to you about the 
Firebase real time  database. 

01:11:12.675 --> 01:11:18.125
The Firebase real time database 
helps you build real time in off

01:11:18.229 --> 01:11:22.757
 line apps.  The way is works is
 every single time one device 

01:11:22.758 --> 01:11:26.977
sends an update to the server, 
that update is synchronized 

01:11:27.397 --> 01:11:32.616
across all devices within 
milliseconds.  Today I'll cover 

01:11:32.617 --> 01:11:37.354
how you can store data in real 
time or store data and how to 

01:11:37.355 --> 01:11:41.575
retrieve the data in real time 
and then saving data and then 

01:11:41.576 --> 01:11:45.310
handling offline conditions. 
So let's start with storing

01:11:48.333 --> 01:11:53.081
 data.  So you saw when I had my
 startup we had this build 

01:11:53.082 --> 01:11:56.294
complex back end structure and 
we were responsible for building

01:11:56.871 --> 01:12:00.701
 this, maintaining it and 
hosting it.  Well, if we would 

01:12:00.702 --> 01:12:04.830
have used Firebase, we wouldn't 
have had this problem because 

01:12:04.831 --> 01:12:07.851
the real time database is Cloud 
host.  What that means is you 

01:12:07.852 --> 01:12:10.372
don't have to build it, you 
don't have to maintain it, you 

01:12:10.373 --> 01:12:14.699
don't have to host it.  All you 
do is build the app and the real

01:12:14.982 --> 01:12:17.328
 time database will do the rest.

01:12:17.329 --> 01:12:21.656
So how is data stored in this 
database?  Well, it's just a 

01:12:21.657 --> 01:12:27.301
tree of lists and objects.  So 
if you understand what lists are

01:12:27.476 --> 01:12:31.832
 and objects are and trees then 
you know how to store data.  

01:12:31.833 --> 01:12:37.671
Let's take a visualization.  
This here is the root of a tree.

01:12:37.672 --> 01:12:41.668
  We create a branch that will 
be a list of grocery items.  And

01:12:41.884 --> 01:12:46.728
 then in this list, we can have 
a set of items that all have v 

01:12:46.729 --> 01:12:48.729
alues that are a

01:12:51.650 --> 01:12:55.664
 grocery list.  Now, if you 
stare at this structure really 

01:12:55.665 --> 01:12:59.584
hard, you might notice something

01:13:03.600 --> 01:13:07.531
 familiar.  That's that this is 
just JSON.  The real time 

01:13:07.532 --> 01:13:12.444
database is one big JSON object 
you can manage in real time.  If

01:13:12.445 --> 01:13:16.194
 you are familiar with JSON 
that's how you store data in the

01:13:16.483 --> 01:13:23.340
 real time database.  We call in
 a no no S QL JSON database.  To

01:13:23.640 --> 01:13:28.173
 a lot of people coming from an 
SQL background, they ask me a

01:13:34.894 --> 01:13:36.894
 similar question.  How go 

01:13:40.946 --> 01:13:42.164
I take the JSON data and fit it 
for my app.  There is one rule 

01:13:42.165 --> 01:13:45.887
of thumb you can follow.  That 
is you can structure your data 

01:13:45.888 --> 01:13:47.888
after your

01:13:49.786 --> 01:13:53.309
 view. 
What this means is if our data 

01:13:53.310 --> 01:13:58.760
struck fur is a list of  grocery
 items and our app is a rosary 

01:13:58.761 --> 01:14:01.962
list app we can take these v 
alues and we just map them onto 

01:14:01.963 --> 01:14:05.580
the view. 
And when you have it set up like

01:14:05.998 --> 01:14:11.130
 this, it makes it really easy 
to read your data in real time. 

01:14:11.442 --> 01:14:16.553
 So let's see how he we can use 
the real time database to 

01:14:16.554 --> 01:14:20.399
synchronize data across multiple
 devices.  This was my, this was

01:14:20.603 --> 01:14:25.759
 the way we did our back end 
with Kahhle.  It wasn't great.  

01:14:25.760 --> 01:14:28.753
We never mastered real time. 
What we would do is accepted a 

01:14:28.979 --> 01:14:32.285
request to our back end and get 
a response and we could render 

01:14:32.286 --> 01:14:36.618
an item.  And while that was 
just great for one device, the 

01:14:36.619 --> 01:14:40.858
other device has no idea 
anything has happened at all.  

01:14:40.859 --> 01:14:45.289
Because we don't have a 
connection from the database to 

01:14:45.290 --> 01:14:47.693
this device.  So it's always 
left in the dark to any

01:14:55.821 --> 01:14:58.282
 changes.  The real time 
database though has a  

01:14:58.463 --> 01:15:02.071
persistent connection to every 
single device so when data 

01:15:02.072 --> 01:15:08.130
changes it knows what devices to
 send that data  to. 

01:15:08.131 --> 01:15:16.334
And we can do this using the 
real time database SDK.  So the 

01:15:16.335 --> 01:15:26.150
SDK works on Android,  IOS and 
JavaScript.  With this

01:15:26.556 --> 01:15:29.968
 one line code you can create I 
connection to your database.  

01:15:29.969 --> 01:15:32.394
This is more than a connection. 
 This database reference class 

01:15:32.395 --> 01:15:38.225
it  gives us a plot of control. 
 This database references are a 

01:15:38.226 --> 01:15:41.155
handle to an object or a list.  
When you create a reference to 

01:15:41.156 --> 01:15:44.974
this piece of data, you have 
control over it.  And it allows 

01:15:44.975 --> 01:15:48.402
you to read this data in real 
time. 

01:15:48.403 --> 01:15:51.977
So the first reference you 
usually create is the root 

01:15:52.427 --> 01:15:57.350
reference because you are  
pointing at all of the data in 

01:15:57.351 --> 01:16:00.165
your database and likely you 
don't want to read all of the 

01:16:00.166 --> 01:16:04.301
data in your database because 
you are a smart person and you 

01:16:04.302 --> 01:16:08.138
only want to read just a subset.
  So let's say we want to get 

01:16:08.139 --> 01:16:11.865
the grocery items.  To do that, 
I can create this child 

01:16:11.866 --> 01:16:15.592
reference.  I can pass in the 
key of my grocery items.  Now, I

01:16:16.281 --> 01:16:23.027
 have access just to that list. 
And using real time events, I 

01:16:23.028 --> 01:16:27.876
can stream the data in real t 
ime.  The two events I will 

01:16:27.877 --> 01:16:31.598
cover today are value events and
 child events. 

01:16:31.599 --> 01:16:35.815
So the way value events work is 
you can attach them to the 

01:16:35.816 --> 01:16:40.462
database reference and so what 
you are essentially saying is 

01:16:40.463 --> 01:16:44.984
every single time data changes 
in this location, send me an 

01:16:44.985 --> 01:16:48.996
update.  And we can receive this
 update through a call back.  

01:16:48.997 --> 01:16:54.673
And this call back is fired with
 a data snapshot which is our  

01:16:55.054 --> 01:16:58.843
synchronized data set.  And it's
 really important to understand 

01:16:58.844 --> 01:17:01.695
that we are  synchronizing 
application state.  We are not 

01:17:01.696 --> 01:17:07.337
just sending back updates.  And 
to understand what that really 

01:17:07.338 --> 01:17:11.372
means I set up this little debug
 station.  So the top we are 

01:17:11.373 --> 01:17:14.959
just assigning a value event 
listener to your grocery list 

01:17:14.960 --> 01:17:20.010
and then below we will be 
logging the results to this 

01:17:20.011 --> 01:17:24.941
console.  So the first log from 
the database is going to be our 

01:17:24.942 --> 01:17:30.074
list of items.  So we could take
 this list and we can just 

01:17:30.075 --> 01:17:34.008
display on the view. 
Now, legits say the user comes 

01:17:34.009 --> 01:17:39.332
in and adds the item of coffee. 
 What do you think is going to 

01:17:39.333 --> 01:17:44.151
happen inside on data change.  
So you might think that, well, 

01:17:44.152 --> 01:17:48.105
we added an item of coffee, we 
are going to get that new item 

01:17:48.106 --> 01:17:53.551
back on data change.  But that's
 not exactly what's going to 

01:17:53.552 --> 01:17:56.171
happen.  What's going to happen 
is we are going to get the 

01:17:56.172 --> 01:18:00.579
entire list including the newly 
added item.  That's because this

01:18:00.873 --> 01:18:05.194
 is our synchronized application
 state.  It's the true state of 

01:18:05.195 --> 01:18:10.244
our list. 
You might think that kind of 

01:18:10.245 --> 01:18:15.694
sounds inefficient that if I 
just add an item I download the 

01:18:15.695 --> 01:18:19.983
entire set, well, the real time 
database SDK is a little bit 

01:18:20.198 --> 01:18:23.545
smarter than that.  What it 
tries to do is it tries to take 

01:18:23.546 --> 01:18:27.861
delta events from the server and
 instead of only taking the item

01:18:27.862 --> 01:18:31.890
 that was added and piecing that
 together with our local state. 

01:18:32.096 --> 01:18:37.799
 So it becomes bandwidth 
conscious.  So value events are 

01:18:37.918 --> 01:18:43.276
a way for you to synchronize the
 entire value of an object or a 

01:18:43.277 --> 01:18:48.715
list when anything changes. 
But sometimes you want a bit 

01:18:48.716 --> 01:18:51.990
more control.  You may not want 
to get the entire object or list

01:18:52.331 --> 01:18:55.445
 back, and you might just want 
to get one thing at a time.  So 

01:18:55.446 --> 01:18:59.367
I might want to know when only 
items are added or if items have

01:18:59.576 --> 01:19:04.919
 been deleted so I can display a
 fancy animation.  So that's 

01:19:04.920 --> 01:19:10.140
where we can use child events. 
So child events are similar to 

01:19:10.141 --> 01:19:12.990
value events in the sense that 
we can attach them to a 

01:19:12.991 --> 01:19:17.591
reference, but they provide us 
with more than one type of call 

01:19:17.592 --> 01:19:23.535
back.  We can tell when things 
have been added to our list, 

01:19:23.536 --> 01:19:27.955
when the item's value has 
changed, and we can even tell 

01:19:27.956 --> 01:19:29.956
when something has been 

01:19:33.502 --> 01:19:37.335
removed.  See how this works?  I
 have the same debug screen up. 

01:19:37.336 --> 01:19:40.957
 The first event that gets fired
 is the child added event. 

01:19:40.958 --> 01:19:46.398
And this gets fired for every 
item one at a time that's 

01:19:46.399 --> 01:19:51.407
existing in this list.  So I 
will first see it for each item 

01:19:51.408 --> 01:19:55.987
at a time.  So as I go through, 
we add an item and we render it 

01:19:55.988 --> 01:20:03.730
to the view.  So this gives us 
single control one at a time, 

01:20:03.731 --> 01:20:06.318
and let's say we go and we want 
to remove an item.  So if a user

01:20:06.804 --> 01:20:11.191
 goes and swipes an item off a 
list, this will fire off child 

01:20:11.192 --> 01:20:14.677
removed.  And what this will do 
is when this fires off, it fires

01:20:15.081 --> 01:20:20.795
 off on every connected device. 
So every device knows how to 

01:20:20.796 --> 01:20:22.796
remove

01:20:27.467 --> 01:20:31.281
 this item # R.  Let's say we 
change one item and we want 

01:20:31.282 --> 01:20:35.613
coffee and more coffee.  It will
 fire off child changed and we 

01:20:35.614 --> 01:20:38.728
get a call back and we know this
 is the item that needs to be 

01:20:38.729 --> 01:20:44.261
changed in our list. 
So this is a lot of events and 

01:20:44.262 --> 01:20:47.280
these provide you a lot of 
control of how you synchronize 

01:20:47.281 --> 01:20:50.988
your data.  But sometimes you 
will find yourself writing a lot

01:20:50.989 --> 01:20:54.855
 of boilerplate code to get this
 to work with common components 

01:20:54.856 --> 01:21:00.381
on your platform.  So that's why
 for Android and IOS we built 

01:21:00.382 --> 01:21:04.801
Firebase UI.  What Firebase UI 
does is takes these dks 

01:21:04.802 --> 01:21:08.885
references and pair -- database 
references and pairs them with a

01:21:08.886 --> 01:21:13.169
 recycler view on Android.  You 
can take this database reference

01:21:13.396 --> 01:21:17.104
 pass it to the Firebase recycle
 adapter class and every time an

01:21:17.201 --> 01:21:20.725
 event fires off we will serve 
that change and bind it to your 

01:21:20.726 --> 01:21:25.674
view holder.  So it handles all 
of the eventing for you. 

01:21:25.675 --> 01:21:30.675
And if you are an iOS developer 
it does the same with UI table 

01:21:30.676 --> 01:21:33.016
views.  Every time something 
changes, it takes the change and

01:21:33.427 --> 01:21:38.140
 binds it to the UI table view 
cell.  And if you are a web fan,

01:21:38.732 --> 01:21:43.180
 we have integrations with 
pretty much every JavaScript 

01:21:43.181 --> 01:21:47.405
framework whether it's angular, 
polymer, Amber or react, we have

01:21:48.116 --> 01:21:50.116
 integrations is that work with 
your style of 

01:21:53.926 --> 01:21:57.900
flow.  So that's how you 
retrieve data in real time.  

01:21:57.901 --> 01:22:01.899
That's only part of the puzzle. 
 To trigger real time events, 

01:22:01.900 --> 01:22:05.296
you have to know how to save 
data. 

01:22:05.297 --> 01:22:09.639
So how would we add an item to 
our grocery list.  We know that 

01:22:09.640 --> 01:22:12.867
the initial reference points to 
the entire database, and that if

01:22:13.180 --> 01:22:17.385
 you create a child, it points 
to just the piece of the 

01:22:17.386 --> 01:22:21.990
database, just the list.  Well, 
we can again go and create 

01:22:21.991 --> 01:22:25.436
another child from that list.  
And that gives us an object that

01:22:25.877 --> 01:22:29.571
 we can save a value to. 
So in this case, we are creating

01:22:30.172 --> 01:22:34.504
 a child underneath the list, so
 a new grocery item, and we are 

01:22:34.505 --> 01:22:37.431
giving it a key saying it's the 
second item and giving it a 

01:22:37.432 --> 01:22:41.975
value of coffee.  The way this 
works is that when one item 

01:22:41.976 --> 01:22:45.480
sends this update to the real 
time database, it's going to 

01:22:45.481 --> 01:22:49.630
trigger a real time event for 
each connected device, and then 

01:22:49.631 --> 01:22:53.731
we are going to render that 
device or render that item onto 

01:22:53.732 --> 01:22:57.670
the view.  This is what your 
data flow looks like with the 

01:22:57.939 --> 01:23:01.977
real time database.  You save 
items and trigger real time 

01:23:02.601 --> 01:23:04.601
events.  And so we 

01:23:07.540 --> 01:23:09.169
can keep our entire application 
state in sync just through this 

01:23:09.170 --> 01:23:14.575
pattern. 
But sometimes there can be an 

01:23:14.576 --> 01:23:18.264
issue.  Let's say the other 
device goes and they also add an

01:23:18.379 --> 01:23:23.133
 item using that same key of 
item underscore 2.  Well, that's

01:23:23.333 --> 01:23:27.253
 going to trigger a real time 
event, but it's going to delete 

01:23:27.254 --> 01:23:32.003
the item of eggs, and it's going
 to add the item of coffee.  

01:23:32.004 --> 01:23:37.231
That's because we use the same 
key name.  And what this is 

01:23:37.232 --> 01:23:41.654
called is a collision.  So we 
are colliding by using the same 

01:23:41.655 --> 01:23:48.184
key name.  And the real time 
database SDK has a simple way of

01:23:48.386 --> 01:23:50.386
 fixing

01:23:51.403 --> 01:23:55.930
 this.  So we will go back and 
create our grocery list 

01:23:55.931 --> 01:23:58.960
reference, and then rather than 
creating an explicit child, we 

01:23:58.961 --> 01:24:03.271
are going to call this method 
called push.  And you can think 

01:24:03.272 --> 01:24:07.233
about it if it was an array and 
you are pushing a new item onto 

01:24:07.234 --> 01:24:11.423
the array because what we are d 
oing is creating a new item onto

01:24:11.747 --> 01:24:16.667
 our list in real time. 
But this item we create, it has 

01:24:16.668 --> 01:24:22.328
a unique identifier.  And this 
way when we use this, we know 

01:24:22.402 --> 01:24:27.339
that we will not be  colliding 
with any items that exist in the

01:24:28.259 --> 01:24:31.281
 database.  And when you know 
that you are not going to have 

01:24:31.282 --> 01:24:33.282
collisions, it sets you up to 
work off

01:24:36.786 --> 01:24:41.991
 line.  So when we were building
 Kahhle, we had service problems

01:24:41.992 --> 01:24:44.994
 off line.  We were a grocery 
list app and people would go to 

01:24:45.170 --> 01:24:47.906
the rosary store and it turns 
out grocery stores are known for

01:24:48.595 --> 01:24:51.812
 having pretty bad connections. 
So they couldn't even use their 

01:24:51.813 --> 01:24:55.931
app in the store.  So when we 
went to fix this, we ran into an

01:24:56.036 --> 01:25:00.853
 issue by the fact that real 
time or that offline really 

01:25:00.854 --> 01:25:05.608
manifests itself in more than 
one way.  So the real time 

01:25:05.609 --> 01:25:11.446
database handles offline in two 
ways.  The first is intermittent

01:25:12.440 --> 01:25:15.990
 offline.  This works for every 
single platform or Android, web,

01:25:15.991 --> 01:25:20.297
 iOS, and this is like if you go
 into an elevator or a tunnel 

01:25:20.298 --> 01:25:23.711
for a short period of time and 
your connection drops, well, the

01:25:24.127 --> 01:25:30.267
 real time database SDK puts a 
local in-memory cache on your 

01:25:30.268 --> 01:25:33.699
device so if the connection 
drops, we can serve these 

01:25:33.700 --> 01:25:39.881
changes through this cache.  So 
it will work off line just as it

01:25:39.882 --> 01:25:42.332
 did on line. 
Sometimes you might be going off

01:25:42.536 --> 01:25:47.599
 line for a bit longer.  And you
 might be getting often an 

01:25:47.600 --> 01:25:50.699
airplane, going through a hike 
in  in the wilderness or you 

01:25:50.700 --> 01:25:53.632
might be spending a long time in
 the grocery store.  In these 

01:25:53.633 --> 01:25:56.139
cases you are likely going to 
turn off your phone, restart the

01:25:56.548 --> 01:26:01.315
 app, and when you do this, it 
will clear that in-memory cache.

01:26:01.316 --> 01:26:06.273
  The real time database has a 
simple way of fixing this for 

01:26:06.274 --> 01:26:10.041
Android and  iOS.  What it 
allows you to do is in one line 

01:26:10.042 --> 01:26:14.081
of code, you can enable a 
persistent cache on your device.

01:26:17.293 --> 01:26:20.410
goes off line and they clear out
 of the app, their data will 

01:26:20.411 --> 01:26:25.851
still live on the device.  What 
happens when they go on line and

01:26:26.062 --> 01:26:28.469
 what happens if they were using
 the app when they went off line

01:26:28.794 --> 01:26:32.985
 and they were writing to the 
database, like what happens t 

01:26:32.986 --> 01:26:38.222
hen?  Well, the device as we 
know, stores this data in a 

01:26:38.223 --> 01:26:42.251
persistent cache and when it 
goes online it sends the data to

01:26:42.480 --> 01:26:45.979
 the real time database and that
 merges the changes on the 

01:26:45.980 --> 01:26:50.539
server and sends a merged update
 to every device so everyone 

01:26:50.540 --> 01:26:54.141
request get back onto -- can get
 back onto the same page. 

01:26:54.343 --> 01:26:58.183
That's how you do real time and 
offline.  I wanted to talk a bit

01:26:58.391 --> 01:27:02.598
 about security.  Because we are
 writing all of our code on the 

01:27:02.599 --> 01:27:08.239
client.  So how do we keep 
everything secure?  Well, the 

01:27:08.240 --> 01:27:12.461
real time database comes with a 
set of security rules which are 

01:27:12.462 --> 01:27:17.537
a declarative way to say who has
 access to what pieces of data, 

01:27:17.538 --> 01:27:21.621
and this integrates with 
Firebase authentification.  So 

01:27:21.622 --> 01:27:27.674
you can log in users and secure 
data against them.  And we are 

01:27:27.675 --> 01:27:33.114
not going to go into detail with
 this was Jacob Wenger an hour 

01:27:33.115 --> 01:27:36.716
ago gave a talk about Firebase 
and security.  If you want to 

01:27:36.717 --> 01:27:39.549
see it you should check out the 
You Tube channel we launched the

01:27:39.740 --> 01:27:44.050
 other day where all of the I/O 
videos will be on and a series 

01:27:44.051 --> 01:27:46.051
of screen casts called fire c 
asts which will 

01:27:54.328 --> 01:27:58.594
teach you everything you need to
 do to get started with the new 

01:27:54.328 --> 01:27:57.345
Firebase.  Tomorrow, you should 
check out zero to app where four

01:27:58.063 --> 01:28:03.378
 c olleagues will get on stage 
and live code the sa same a.m. 

01:28:03.379 --> 01:28:10.328
on iOS web, integrating with 
Firebase off and Firebase and 

01:28:10.329 --> 01:28:16.387
Firebase storage.  So in this 
talk we covered storing data, 

01:28:16.388 --> 01:28:21.661
retrieving in real time, storing
 data and handling off line 

01:28:21.662 --> 01:28:25.673
conditions.  So now you know how
 to use the real time database 

01:28:25.674 --> 01:28:29.388
to, does now, you know how to 
use the real time database to 

01:28:29.389 --> 01:28:32.493
build real time apps with 
Firebase.  If you build 

01:28:32.494 --> 01:28:34.981
something, I would love to know 
about it.  So you can get 

01:28:35.521 --> 01:28:38.646
started and send me a screen 
shot, a gist or whatever of what

01:28:39.228 --> 01:28:42.562
 you built and I would love to 
take a look at it.  So that is 

01:28:42.563 --> 01:28:45.880
what we have for today, but for 
more information on Firebase, 

01:28:45.881 --> 01:28:48.996
you can check out our office 
hours or head over to our 

01:28:48.997 --> 01:28:51.946
Firebase tents and we would love
 to answer your questions, and 

01:28:51.947 --> 01:28:54.571
just know that when you build 
with the real time database, you

01:28:54.855 --> 01:28:58.876
 are getting the best of both 
worlds, 6 both real time and off

01:28:59.584 --> 01:29:01.584
 line..  Thank you guys very m 
uch!

01:35:49.998 --> 01:35:51.998
 both real time and off line.. 

01:53:14.126 --> 01:53:16.126
&gt;&gt;

02:04:29.557 --> 02:04:31.557
&gt;&gt; 
&gt;&gt;

02:04:43.731 --> 02:04:45.731
 SDK

02:04:46.857 --> 02:04:48.857
 for droid      

02:04:52.073 --> 02:04:55.690
     for Android:  A tech 

02:06:13.918 --> 02:06:17.215
deep dive                  

02:07:18.641 --> 02:07:23.434
         Tech Deep Dive         
                     .   

02:07:23.435 --> 02:07:25.435
Doug 

02:08:27.588 --> 02:08:29.624
Stevenson. 
&gt;&gt; #01:  Time a developer 

02:08:34.310 --> 02:08:36.487
            I'm today can her 

02:08:37.314 --> 02:08:40.360
                   .   we'll sit
 down.  In this talk we'll

02:08:45.593 --> 02:08:47.830
 cover dynamic links.  As you 
know by now, these are part of 

02:08:47.831 --> 02:08:50.712
Firebase.  Firebase is a suite 
of products that help you 

02:08:50.713 --> 02:08:54.979
develop your app, grow your user
 base and earn money.  And in 

02:08:54.980 --> 02:08:57.462
this talk we'll help you use 
dynamic links to make your 

02:08:58.452 --> 02:09:01.474
marketing URLs much more 
effective.  So dynamic links are

02:09:01.997 --> 02:09:06.417
 mobile deep links that work 
like you always wanted them to. 

02:09:06.418 --> 02:09:11.291
 Once upon a time you all     
    you URL used to be really 

02:09:11.292 --> 02:09:14.622
easy.  You click on them and go 
to a Web page.  Then people 

02:09:14.623 --> 02:09:18.919
began using deep links, which 
linked directly into an app.  

02:09:19.196 --> 02:09:21.931
They actually enable some very 
nice experience.  You could 

02:09:21.932 --> 02:09:26.978
click on a link on a mobile Web 
page, and it could take you 

02:09:27.305 --> 02:09:29.962
directly into an app where you 
could make the reservation right

02:09:29.963 --> 02:09:35.950
 there from the app without 
losing any contact.  Here is the

02:09:35.951 --> 02:09:36.747
 problem:  If you want to 
provide the best experience when

02:09:36.748 --> 02:09:40.247
 a link is clicked, that 
depended on quite a few things. 

02:09:40.248 --> 02:09:43.048
 For example, if the link was 
clicked, was the app installed? 

02:09:43.189 --> 02:09:47.417
 If the app was installed, how 
the app gets open depends on 

02:09:47.418 --> 02:09:54.443
which flat form and which I/O S 
version.  If it's Android 9, you

02:09:54.444 --> 02:09:58.205
 could be opening deep links.  
If it happened to be clicked on 

02:09:58.670 --> 02:10:01.184
an older platform, you have to 
use a custom scheme or something

02:10:01.379 --> 02:10:06.173
 else.  Even if it was a newer 
platform, like in I/O S9, if the

02:10:06.304 --> 02:10:10.972
 link was in a web view, web 
views don't       don't have 

02:10:10.973 --> 02:10:14.419
universal links.  It depends on 
the app that contains it.  If 

02:10:14.420 --> 02:10:17.194
the app was not installed, you 
have to make a choice.  Do I 

02:10:17.195 --> 02:10:20.129
install the app or take them to 
mobile web view.  Even that 

02:10:20.333 --> 02:10:22.259
depends on where the user is 
coming from and what they're 

02:10:22.260 --> 02:10:24.260
doing.  So this can get a little

02:10:32.346 --> 02:10:33.767
complicated.    
When they install the app and 

02:10:33.768 --> 02:10:36.500
open it, the apoowe you have 
lost all                     

02:10:36.897 --> 02:10:42.862
     app -- the app loses all 
context.  We created dynamic 

02:10:42.863 --> 02:10:50.230
links to solve.  Let's have him 
come up and explain how it. 

02:10:50.231 --> 02:10:53.901
&gt;&gt; Thanks for delivering all the
 sad, depressing news.  We have 

02:10:53.902 --> 02:10:56.916
dynamic links.  These are 
basically links that behave the 

02:10:56.917 --> 02:11:00.113
way you want them to by 
intelligently changing their 

02:11:00.114 --> 02:11:02.613
behavior based on what's        
what's going on on your user's 

02:11:02.614 --> 02:11:05.641
device.  So including things 
like what platform they're on, 

02:11:05.642 --> 02:11:08.298
and whether they have the app 
installed or not.  And most 

02:11:08.299 --> 02:11:11.364
importantly, they can retain 
that link information through 

02:11:11.365 --> 02:11:14.570
the app store installation 
process so that when users open 

02:11:14.731 --> 02:11:17.299
your app for the first time, you
 could still get information 

02:11:17.675 --> 02:11:20.105
about the link that brought the 
user to your app in the first 

02:11:20.106 --> 02:11:24.013
place.  And to demonstrate why 
that's important, let's show you

02:11:24.249 --> 02:11:28.446
 a little example here.  This is
 John and Mary.  They have a 

02:11:28.447 --> 02:11:36.722
recess pie              a recess
          a r     a recipe app. 

02:11:36.723 --> 02:11:39.064
 They want to promote it to 
their current apps through an 

02:11:39.065 --> 02:11:41.656
e-mail campaign.  They decide 
they'll run a little e-mail 

02:11:41.775 --> 02:11:43.972
campaign.  It looks like this.  
They got some lovely pictures.  

02:11:43.973 --> 02:11:48.641
And then they want to add some 
try out or app buttons.  They 

02:11:48.642 --> 02:11:51.641
write in the e-mail, hey, check 
it out on Android and check it 

02:11:51.642 --> 02:11:53.642
out on I/O S.  Great 

02:11:56.787 --> 02:11:59.086
idea                 OS.  Great 
idea.  For starters, we need 

02:11:59.087 --> 02:12:01.744
these two buttons, one to get 
people to the app store and one 

02:12:01.745 --> 02:12:04.098
to get people to the Play Store.
  It's sort of twice the 

02:12:04.392 --> 02:12:07.664
ugliness, and you also have the 
issue of what happens if your 

02:12:07.665 --> 02:12:12.757
IOS user accidently clicks the 
green button and goes to the 

02:12:12.758 --> 02:12:14.835
Play Store.  They'll get 
confused and not follow through 

02:12:14.949 --> 02:12:18.168
on the e-mail.  
There are issues around 

02:12:18.169 --> 02:12:20.850
analytics and measuring, like 
how many people are actually 

02:12:20.851 --> 02:12:23.681
clicking on these links?  And 
are the people that are getting 

02:12:23.682 --> 02:12:27.202
into your app through this 
e-mail campaign, are they 

02:12:27.203 --> 02:12:29.701
actually valuable users?  Are 
they more valuable than, perhaps

02:12:29.912 --> 02:12:33.383
, people who found the app 
organically?  Are they 

02:12:33.384 --> 02:12:37.832
vegetarian users more or less 
valuable than the dessert 

02:12:37.833 --> 02:12:40.544
people?  How could you measure 
this?  These are all the typical

02:12:41.381 --> 02:12:43.381
 an lyticstuff you want to   

02:12:46.188 --> 02:12:48.763
      analytic stuff.    
The operation for the app will 

02:12:48.764 --> 02:12:51.488
be the same for all users.  
Whether they went to the app 

02:12:51.963 --> 02:12:56.287
either through the vegetarian 
e-mail blast or through the kink

02:12:56.575 --> 02:13:00.076
y concoctions.  It would be     
        It would be kind of a 

02:13:00.077 --> 02:13:02.861
crappy experience for your 
vegetarian user who says oh, 

02:13:02.862 --> 02:13:06.726
this looks like a fun app.  They
 go into the app and the very 

02:13:06.727 --> 02:13:13.412
first thing they get are recess 
pies             recipes for 

02:13:13.413 --> 02:13:17.946
stake     pork shops.  They 
never come back to it.    

02:13:17.947 --> 02:13:20.824
Luckily, for our presentation, 
this is the kind of thing 

02:13:21.304 --> 02:13:23.184
dynamic links are used for.  
Let's look at how we would could

02:13:23.185 --> 02:13:25.423
 not construct one of these if 
we would          we were 

02:13:25.424 --> 02:13:28.744
building the URL by hand.  For 
starters, all dynamic links will

02:13:28.745 --> 02:13:31.258
 start off with this kind of 
domain.  You've got a little sub

02:13:31.828 --> 02:13:36.273
domain.  You'll inside A, B, C, 
D, E, is the unique code 

02:13:36.274 --> 02:13:39.017
associated with your app.  That 
creates       gets created for 

02:13:39.018 --> 02:13:41.948
you when you create an app in 
Firebase

02:13:47.220 --> 02:13:51.811
.  This is the link parameter.  
We'll talk a little more later 

02:13:51.812 --> 02:13:54.404
about how you actually get this 
information, but it's important 

02:13:54.405 --> 02:13:56.720
to know that this is sort of the
 important information that your

02:13:56.721 --> 02:13:59.946
 app is going to read in.  It 
also kind of plays double duty. 

02:13:59.947 --> 02:14:02.620
 If a user opens this dye no, 
ma'am I can link on         

02:14:02.766 --> 02:14:07.810
                         this 
dynamic link, on an unsupported 

02:14:07.811 --> 02:14:12.178
such      such a non-Android or 
IOS phone, they would go to this

02:14:12.313 --> 02:14:14.659
 link.    
Next we would add the packaging.

02:14:14.660 --> 02:14:17.750
  This is basically so we can 
direct your Android users to the

02:14:17.751 --> 02:14:22.509
 entry for your app on the Play 
Store.  Similarly, we would add 

02:14:22.510 --> 02:14:27.333
in the app store so you would 
know where to send in your app 

02:14:27.334 --> 02:14:31.200
installed.  Then we'll add the 
campaign tracking using UTM 

02:14:31.201 --> 02:14:34.428
tags.  If you've done any kind 
of Play Store tracking or Google

02:14:34.808 --> 02:14:37.728
 an lit beings           alytics
, maybe this looks familiar to 

02:14:38.111 --> 02:14:41.189
you.  Essentially you could 
think of as a hierarchal way of 

02:14:41.665 --> 02:14:43.665
representing your marketing 
campaign.  So you have this uber

02:14:44.642 --> 02:14:47.475
 campaign and then within that 
you'll have mediums that sort of

02:14:47.789 --> 02:14:50.139
 represent different places 
where these campaigns exist, 

02:14:50.638 --> 02:14:54.497
like in an e-mail or in a QR 
code or what have you.  And then

02:14:54.498 --> 02:14:57.798
 sort of you can drill down from
 there.    

02:14:57.799 --> 02:15:01.377
So that ends up with an awfully 
large link.  Luckily, we do have

02:15:02.110 --> 02:15:04.193
 a URL short inner that can 
shorten this for you.  Although 

02:15:04.194 --> 02:15:07.523
both of these, I suppose, are 
fine if you are putting them in 

02:15:07.524 --> 02:15:11.855
the tag of an e-mail.    
And we also have a place on the 

02:15:11.856 --> 02:15:15.961
Firebase console where you can 
create these links yourself if 

02:15:16.788 --> 02:15:19.056
they're nontechnical members of 
your team who aren't        

02:15:19.358 --> 02:15:22.370
aren't super excited about URL 
escaping and stuff.  So you can 

02:15:22.371 --> 02:15:25.644
add this in yourself, select 
your apps from the drop-down 

02:15:25.774 --> 02:15:28.933
list, and it will generate the 
large dynamic link or the 

02:15:28.934 --> 02:15:32.039
shortened version for you.  But 
you can always use that expanded

02:15:32.040 --> 02:15:34.376
 format if you want to create 
these links dynamically.  For 

02:15:34.377 --> 02:15:38.529
instance, you might want to 
create links dynamically on your

02:15:38.713 --> 02:15:41.380
 client, and you can do that 
just by sort of building up 

02:15:41.381 --> 02:15:45.933
these URLs like we showed 
earlier.    

02:15:45.934 --> 02:15:50.770
So what happens when a user 
clicks on this link?  Well, if 

02:15:50.771 --> 02:15:52.390
they have the app installed, 
they'll be taken right into the 

02:15:52.391 --> 02:15:56.411
app; right?  And then at that 
point the dynamic link will be 

02:15:56.412 --> 02:15:59.404
passed into your app.  Firebase 
analytics will automatically 

02:15:59.405 --> 02:16:01.981
read in all of those UTM 
tracking codes and make sure it 

02:16:01.982 --> 02:16:05.540
gets recorded properly.  And 
then that link parameter will 

02:16:05.865 --> 02:16:08.783
get passed into your app to get 
processed and do whatever it 

02:16:08.784 --> 02:16:11.666
wants to with it.    
If the user does not have the 

02:16:11.873 --> 02:16:14.471
app installed, then we will take
 your user to either the Play 

02:16:14.472 --> 02:16:17.628
Store or the app store
         App Store         App 

02:16:17.629 --> 02:16:20.463
Store, depending on what 
platform they're on.  When they 

02:16:20.464 --> 02:16:21.676
click on that link    
                           , 

02:16:21.677 --> 02:16:23.457
when they click on that link.  
Then when the first time your 

02:16:23.458 --> 02:16:28.129
user opens up you the app, 
Firebase dynamic links go out

02:16:28.283 --> 02:16:32.805
        go out and look for any 
pending user for this 

02:16:32.920 --> 02:16:35.230
application.  If it finds any, 
it will deliver it to your app. 

02:16:35.567 --> 02:16:38.442
 At this point Firebase 
analytics will process any UTM 

02:16:38.443 --> 02:16:40.564
tracking tags you would      
     you had associated with it.

02:16:40.565 --> 02:16:43.766
  Then that link parameter will 
once again get passed into your 

02:16:43.987 --> 02:16:47.060
client app that it can deal with
 however it sees fit.    

02:16:47.061 --> 02:16:50.221
So where does this get us?  
After creating this giant link? 

02:16:50.222 --> 02:16:53.581
 Well, for starters, we only 
need one button.  So that kind 

02:16:53.582 --> 02:16:55.841
of deals with issue number one. 
 We don't       don't have to 

02:16:55.842 --> 02:16:58.526
worry about our user clicking on
 the wrong version or anything 

02:16:58.527 --> 02:17:02.409
like that.  It looks a little 
nicer.  You know, in spite of my

02:17:02.410 --> 02:17:05.900
 crappy art skills.    
But what about tracking where 

02:17:05.901 --> 02:17:09.021
users are coming from?  So 
Firebase dynamic links will 

02:17:09.022 --> 02:17:13.421
automatically let you know how 
many users clicked on any 

02:17:13.422 --> 02:17:15.422
individual link.  We can see the

02:17:18.035 --> 02:17:20.520
 number of times all our various
 e-mail campaign links got 

02:17:20.521 --> 02:17:23.939
clicked.  Is it getting us 
quality users?  Is it users that

02:17:23.940 --> 02:17:26.740
 will actually do things like 
sign up for the newsletter from 

02:17:26.982 --> 02:17:30.991
within the app or buy or make an
 in-app purchase or subscribe to

02:17:30.992 --> 02:17:34.001
 the premium version, whatever 
it is we want them to do to make

02:17:34.002 --> 02:17:38.134
 some money.  That's where -- 
that's when you can find out 

02:17:38.135 --> 02:17:40.995
with these attribute goes 
                          with 

02:17:41.361 --> 02:17:43.978
these tags.  It lets you define 
certain events in your app, 

02:17:44.601 --> 02:17:47.075
making an app purchase or 
signing up for a newsletter or 

02:17:47.076 --> 02:17:49.312
sharing the app with your 
friends, as the important 

02:17:49.498 --> 02:17:51.498
conversion events.  Then you can
 look at any of these conversion

02:17:51.567 --> 02:17:54.122
 events and break it          
break it out by all of the UTM 

02:17:54.123 --> 02:17:57.407
parameters that get passed in, 
campaign, medium, type, and so 

02:17:57.408 --> 02:17:59.697
on.  This is all done 
automatically for you.    

02:17:59.698 --> 02:18:03.503
So you can see are these e-mail 
campaigns more or less 

02:18:03.702 --> 02:18:07.377
effective, not just in getting 
us users, but users that then 

02:18:07.378 --> 02:18:10.162
share the app with their friends
?  And you know, how does this 

02:18:10.163 --> 02:18:16.348
compare users       versus users
 who find it organically or by 

02:18:16.698 --> 02:18:20.778
other means.  You can use 
Firebase analytics.  You can 

02:18:20.779 --> 02:18:23.762
find out prosecute           are
 dessert fans spending more 

02:18:23.926 --> 02:18:26.856
money on our app than 
vegetarians.  You can use that 

02:18:26.857 --> 02:18:30.517
using Firebase dynamic links and
 you can decide which user is 

02:18:30.518 --> 02:18:32.761
more important for your app and 
focus your attention on them.   

02:18:34.569 --> 02:18:37.225
issue none      number two.  So 
how do we customize that warm 

02:18:37.226 --> 02:18:40.829
welcome?  That's what this link 
parameter that we pass in 

02:18:40.830 --> 02:18:44.285
through these dynamic links.  
You'll notice here we have this 

02:18:44.545 --> 02:18:48.021
URL that basically kinds       
kind of looks like saying let's 

02:18:48.022 --> 02:18:51.260
show the user a welcome and 
feature cakes or feature 

02:18:51.917 --> 02:18:55.297
vegetarian recipes.  Assuming we
 have logic on our app to read 

02:18:55.660 --> 02:18:59.018
that in and customize that 
initial set of recipes we showed

02:18:59.433 --> 02:19:02.855
 to our user, we can make sure 
that users that went into our 

02:19:02.856 --> 02:19:07.456
app by clicking on the link in 
our vegetarian are v   viddles 

02:19:07.457 --> 02:19:11.427
e-mail now get vegetarian 
e-mail.  I know it looks like a 

02:19:11.428 --> 02:19:15.182
hamburger on the bottom left, 
but it's a vegetable 

02:19:15.940 --> 02:19:17.812
                 it's a v 
         it's a vegie burger.  

02:19:17.813 --> 02:19:19.732
Trust me.    
When they open up your app and 

02:19:19.733 --> 02:19:23.555
they kneeled get content that is
 important and relevant to them;

02:19:23.556 --> 02:19:26.222
 right?  You know that whenever 
app they clicked on was probably

02:19:26.824 --> 02:19:28.960
 important.  It was enough to 
drive them to install your app 

02:19:29.270 --> 02:19:31.497
in the first place, so you can 
kind of double down on that 

02:19:31.498 --> 02:19:34.120
information and make sure that 
you present your users with 

02:19:34.121 --> 02:19:36.934
content that they care about 
right away so that they don't

02:19:37.170 --> 02:19:39.725
       don't have to go digging 
through your app to actually 

02:19:40.183 --> 02:19:42.013
find whatever content is 
relevant to them.    

02:19:42.014 --> 02:19:45.724
So that's the sort of thing that
 can really kind of increase 

02:19:45.725 --> 02:19:48.045
your attention and getting them
      people coming back to your

02:19:48.169 --> 02:19:51.198
 app.  How does that link 
parameter actually get passed 

02:19:51.199 --> 02:19:53.199
into your

02:19:54.423 --> 02:19:58.623
 code?  How can you kind of deal
 with it?  We'll go into a few 

02:19:54.423 --> 02:19:58.226
implementation details.  On IOS 
you'll be reading in a dynamic 

02:19:58.227 --> 02:20:00.227
link from you one of two 
different ways, depending on 

02:20:00.651 --> 02:20:04.197
your situation.  You'll either 
get this through a custom URL 

02:20:04.198 --> 02:20:07.324
scheme.  If you've never 
implemented custom URL schemes 

02:20:07.325 --> 02:20:10.335
before, it's not too bad.  
Basically what you do is over in

02:20:10.336 --> 02:20:13.792
 your info sexual create a new 
URL type and you'll have your 

02:20:13.793 --> 02:20:20.044
URL type set to your bundle ID. 
 If you've added Google sign-in?

02:20:20.045 --> 02:20:23.384
     in in IOS app before, this 
should look familiar to you.    

02:20:23.647 --> 02:20:26.309
Then within your application 
open URL option goes they 

02:20:26.310 --> 02:20:29.179
had          method, you'll get 
passed in that full dynamic 

02:20:29.180 --> 02:20:32.652
link.  You'll pass that off to 
the Firebase dynamic links 

02:20:32.653 --> 02:20:35.237
library and basically ask it, 
hey, can you take this URL and 

02:20:35.238 --> 02:20:38.850
turn it into a dynamic link 
object?  You'll either get back 

02:20:38.851 --> 02:20:42.212
no, in which case it's URL 
that's intended for Google sign-

02:20:43.143 --> 02:20:47.379
in or Facebook sign-in and so on
, or you'll get back a dynamic 

02:20:47.380 --> 02:20:51.383
link object.  You can get that 
link parameter by looking at the

02:20:51.384 --> 02:20:54.288
 URL property and your app is   
 can process it in whatever way 

02:20:54.289 --> 02:20:57.227
makes sense for your app.    
The other way you'll get it 

02:20:57.228 --> 02:21:00.160
through universal links.  To get
 that work being you'll need to 

02:21:00.161 --> 02:21:05.034
turn on the associated domains 
capability within your ex    

02:21:05.340 --> 02:21:11.292
     your X code project and 
make sure the app.goo is listed.

02:21:11.293 --> 02:21:14.207
  It's okay to send universal 
links to me through these 

02:21:14.641 --> 02:21:17.183
dynamic links.  Once again, 
you're basically going to take 

02:21:17.538 --> 02:21:21.648
that URL that comes in, pass it 
off to the dynamic links library

02:21:22.071 --> 02:21:24.404
.  You'll get that can          
back that final object in a 

02:21:24.405 --> 02:21:27.323
completion handler just in case 
we have to make that one network

02:21:27.485 --> 02:21:30.827
 call to expand the short link 
into a long link.    

02:21:30.828 --> 02:21:33.348
And then once we have that, we 
have our link per tame          

02:21:33.349 --> 02:21:35.868
parameter and we can pass it 
into our app and do whatever we 

02:21:35.869 --> 02:21:39.162
want to, analyze it, and figure 
out what content we should be 

02:21:39.163 --> 02:21:41.278
displaying to our users.   
By the way, don't       don't 

02:21:41.279 --> 02:21:44.287
freak out about universal links.
  If you're like I haven't set 

02:21:44.648 --> 02:21:48.351
this up for my sight yet, it's 
on my to-do list, you don't     

02:21:48.664 --> 02:21:52.135
      you don't need to set up 
universal links for your own web

02:21:53.072 --> 02:21:55.618
 side     site to get Firebase 
dynamic links working.  You have

02:21:56.032 --> 02:21:59.856
 to set it up on the client 
because we're sending you 

02:21:59.857 --> 02:22:02.889
universal links that we have 
created that just serves your 

02:22:02.890 --> 02:22:04.620
dynamic links.  If you want more
 information about this, I'm 

02:22:04.621 --> 02:22:09.375
doing a whole information on 
Firebase for IOS developers 

02:22:09.376 --> 02:22:12.262
today.  You can check that out 
for more information.  A 

02:22:12.263 --> 02:22:15.286
shameless bluing        plug.   

02:22:15.287 --> 02:22:18.563
This is one strategy which takes
 advantage of app links.  Now 

02:22:18.771 --> 02:22:22.635
I'll preface this section by 
saying I'm the IOS guy.  

02:22:22.636 --> 02:22:24.587
Probably most of you will 
understand this part better than

02:22:24.588 --> 02:22:28.488
 me.  Here we go.  I'll try it 
anyway.  First off, you'll set 

02:22:28.489 --> 02:22:31.940
up app links or if you're on 
earlier versions of Android 

02:22:31.941 --> 02:22:35.492
intent filters for the URLs that
 your app can handle.  This is 

02:22:35.493 --> 02:22:38.170
basically your way of telling 
Android to automatically 

02:22:38.171 --> 02:22:42.013
recreaked           redirect 
certain earls to        

02:22:43.806 --> 02:22:46.264
          certain URLs within my
 app, my app can handle these.  

02:22:46.569 --> 02:22:49.160
When you do this, Google Play 
Services is smart enough to look

02:22:49.556 --> 02:22:52.984
 at any of the in    incoming 
dynamic links.  They realize if 

02:22:52.985 --> 02:22:56.796
that link parameter equals an 
app link for which your app is 

02:22:56.797 --> 02:22:58.492
already registered, it will sort
 of do the work for you.  It 

02:22:58.493 --> 02:23:02.481
will open up the app to the 
appropriate activity based on 

02:23:02.482 --> 02:23:04.550
this link parameter.  You still 
need to do a little bit of work 

02:23:04.551 --> 02:23:07.632
on your client.  First off, 
you're going to need to call Git

02:23:08.011 --> 02:23:10.011
 invitation

02:23:11.069 --> 02:23:14.924
 in the on-create part of your 
app.  This is pending dynamic 

02:23:14.925 --> 02:23:18.007
things      links that might not
 have been passed on to your app

02:23:18.008 --> 02:23:20.676
 because it wasn't installed.  
If your user installed your app 

02:23:20.677 --> 02:23:24.440
because of a dynamic links, then
 they open it up.  You would 

02:23:24.441 --> 02:23:28.720
call Git invitation 
         Invitation to read in 

02:23:28.721 --> 02:23:30.348
the dynamic links.  The part 
that's highlighted there 

02:23:30.349 --> 02:23:33.421
basically says go ahead and 
automatically go to whatever 

02:23:33.607 --> 02:23:37.623
part of my app, whatever 
activity that link parameter 

02:23:37.801 --> 02:23:40.477
would have normally sent me to. 
 Basically in this call back you

02:23:40.478 --> 02:23:42.541
 don't           you don't need 
to do anything.  We're printing 

02:23:42.542 --> 02:23:47.250
out some debug information.  
On the other hand, if your app 

02:23:47.251 --> 02:23:49.608
is running and Google Play 
Services has already directed 

02:23:49.887 --> 02:23:52.137
them to the appropriate activity
 in your app, that's great.  You

02:23:52.138 --> 02:23:55.058
 are going to to want to call 
Git invitation 

02:23:55.176 --> 02:23:55.819
         Invitation 
             Git Invitation in 

02:23:55.820 --> 02:23:59.402
that link activity to consume 
that information from Google 

02:23:59.403 --> 02:24:01.902
Play Services and make sure it 
doesn't get called again in the 

02:24:01.903 --> 02:24:02.747
future. 
Don't       

02:24:02.748 --> 02:24:04.451
Don't freak out about app links 
either.  If you don't           

02:24:04.452 --> 02:24:07.054
you don't have app links set up 
for your app, that is totally 

02:24:07.055 --> 02:24:08.629
fine as well.  You'll just need 
to do       to do the work 

02:24:08.630 --> 02:24:11.737
yourself to kind of take in that
 link parameter and parse it and

02:24:11.847 --> 02:24:15.383
 not leave it up to Google Play 
Services to figure it out for 

02:24:15.384 --> 02:24:17.193
you.   
Android people, did that make 

02:24:17.194 --> 02:24:20.025
sense?  All right.  I'm getting 
the thumbs up.  Good.  Thank 

02:24:20.026 --> 02:24:22.026
you.    
So my only question is what's 

02:24:23.069 --> 02:24:26.514
       what's a manifest file?  
Just kidding.  I know that much.

02:24:30.364 --> 02:24:31.503
We got some successful e-mail 
campaigns going.  In fact, now 

02:24:31.504 --> 02:24:36.081
one of our favorite bloggers, 
grilling with Jill      

02:24:36.242 --> 02:24:38.928
            Grilling With Jill 
decided thepts      she wants to

02:24:38.929 --> 02:24:42.211
 put links right from the blog. 
 That sounds like a great idea 

02:24:42.212 --> 02:24:46.542
for dynamic links.  Imagine, you
 click on the link for a recipe 

02:24:46.543 --> 02:24:48.949
and Firebase dynamic links sends
 you directly to the recipe 

02:24:49.899 --> 02:24:51.967
within the autopsy         
awesome.  If they don't       

02:24:52.133 --> 02:24:54.402
don't have the app installed, we
 could also send them to the 

02:24:54.403 --> 02:24:56.313
Play Store or the App Store.  
Isn't       Isn't this fantastic

02:24:56.314 --> 02:24:59.054
?  This is going to send us all 
these new users and this could 

02:24:59.055 --> 02:25:01.730
be the beginning of a beautiful 
referral program.    

02:25:01.731 --> 02:25:06.189
So they send all these dynamic 
links off to Grilling With Jill.

02:25:06.396 --> 02:25:09.145
  She address them in their   
       in her various posts.  

02:25:09.146 --> 02:25:11.434
Imagine everyone's  's shock 
when the next day people 

02:25:11.435 --> 02:25:12.536
aren't               people 
aren't quite happy with the 

02:25:12.537 --> 02:25:17.662
experience; right?  So here's  
's the deal:  If you have some 

02:25:17.663 --> 02:25:21.628
kind of obvious, why not try 
this in our app sort of button, 

02:25:21.995 --> 02:25:23.989
it's fine for that to take 
people directly to the an store 

02:25:23.990 --> 02:25:27.203
or the Play Store    

02:25:27.204 --> 02:25:29.439
to the App Store or Play Store. 
 People are generally expecting 

02:25:29.603 --> 02:25:31.915
that to happen when they click 
on a button like that.  But 

02:25:31.916 --> 02:25:33.453
people are probably not 
expecting this kind of 

02:25:33.454 --> 02:25:35.920
experience if they're clicking 
on something that looks like it 

02:25:35.921 --> 02:25:38.774
should just be taking them to 
another website.  You've 

02:25:38.775 --> 02:25:42.766
probably surprised them in a bad
 way and you get the not quite 

02:25:43.856 --> 02:25:48.207
happen              quite happy 
emoji.  One way you could 

02:25:48.208 --> 02:25:49.872
address this is by adding fall 
back parameters to your dynamic 

02:25:49.873 --> 02:25:52.576
links.  This basically tells the
 device that instead of going to

02:25:52.577 --> 02:25:55.175
 the Play Store or App Store, 
why not take the user to another

02:25:55.523 --> 02:25:59.013
 Web page that you have 
specified.    

02:25:59.014 --> 02:26:01.563
So it basically looks like this 
when you're construct you go the

02:26:01.564 --> 02:26:03.564
 giant dynamic links.  

02:26:05.482 --> 02:26:09.707
You can add fall back for 
Android, another one for other 

02:26:09.708 --> 02:26:11.963
devices.  They don't       don't
 have to be.  We can direct them

02:26:12.658 --> 02:26:15.861
 to different fallback pages 
with different screen shots and 

02:26:15.862 --> 02:26:21.329
different device shots, which is
 always nice.  If recipe 

02:26:21.330 --> 02:26:23.988
Wrangler               Recipe 
Wrangler               Recipe 

02:26:23.989 --> 02:26:28.027
Wrangler has the fallback page 
for IOS.  It kind of depends.   

02:26:30.150 --> 02:26:35.550
fallback pages who still have 
Recipe Wrangler installed, we'll

02:26:35.551 --> 02:26:37.697
 directly go there.  For those 
that don't       don't, it will 

02:26:37.698 --> 02:26:39.698
go

02:26:40.944 --> 02:26:43.262
 to whatever fall back     back 
page they specify.  If it's also

02:26:43.263 --> 02:26:46.435
 available on the website, we 
can kind of show the Web page 

02:26:46.436 --> 02:26:49.312
directly within the device.  But
 we can also maybe send them to 

02:26:49.313 --> 02:26:53.791
a marketing page that tells them
 a little bit more about Recipe 

02:26:53.792 --> 02:26:56.782
Wrangler and how awesome it is 
and you should install and that 

02:26:56.783 --> 02:26:59.520
sort of thing.  Then within this
 button, which now definitely 

02:26:59.521 --> 02:27:00.882
looks like it should 
be              it should be 

02:27:00.883 --> 02:27:02.248
paying                     it 
should be taking you to the App 

02:27:02.249 --> 02:27:06.328
Store or Play Store, we can add 
in another Firebased dynamic 

02:27:06.329 --> 02:27:10.074
link where we don't       don't 
have the fallback link specified

02:27:10.667 --> 02:27:13.746
 and take the user to the App 
Store or Play Store so they can 

02:27:13.747 --> 02:27:15.598
go ahead and install the app.   

02:27:15.599 --> 02:27:18.163
We give these to our Grilling 
With Jill blogger and we're back

02:27:18.164 --> 02:27:20.845
 in action.  We still get the 
benefit of using dynamic links 

02:27:20.846 --> 02:27:23.962
by seeing how many people are 
clicking on these various links 

02:27:23.963 --> 02:27:27.640
in the Firebase console.  We get
 different behavior based on the

02:27:27.834 --> 02:27:30.124
 plaque        platform that 
people are using.  But we also 

02:27:30.125 --> 02:27:32.429
have now a much better 
internship because now we're 

02:27:32.430 --> 02:27:35.475
doing what our users           

02:27:36.442 --> 02:27:39.454
           experience, because 
they're using the Web page that 

02:27:39.455 --> 02:27:45.483
takes them to the app.  Web 
page             .    

02:27:45.484 --> 02:27:47.484
Where he is               
Recipe blank her              

02:27:47.759 --> 02:27:50.978
    wring her is not           

02:27:50.979 --> 02:27:58.491
Recipe Wrangler is not a real 
app.  I'll ask rag     rag     

02:27:58.492 --> 02:28:04.554
Ragabond to cuj        to come 
back up.

02:28:04.555 --> 02:28:08.477
&gt;&gt;     .  App People            

02:28:13.156 --> 02:28:13.855
 .  
(Applause) 

02:28:13.856 --> 02:28:16.807
&gt;&gt; One of the big uses is to 
take the app installed, make 

02:28:16.961 --> 02:28:19.786
sure the context is propagated. 
 We'll see how some apps are 

02:28:19.787 --> 02:28:26.672
doing this.  This is a Korean 
app for couples.  You can see 

02:28:26.826 --> 02:28:29.580
there is something on the 
anniversary, and the developer 

02:28:29.581 --> 02:28:32.939
wants this particular shared 
item to be opened in the app.  

02:28:32.940 --> 02:28:35.330
This app does not actually have 
a website.  They only have an 

02:28:35.331 --> 02:28:38.498
app.  You have to always take 
them to an app installed if they

02:28:38.499 --> 02:28:40.499
 want to see it. 

02:28:43.928 --> 02:28:47.446
 That particular link is 
actually a dynamic link.  If the

02:28:47.570 --> 02:28:52.331
 app is not installed, it takes 
them to the app install, and 

02:28:52.332 --> 02:28:57.272
when opens for the first time it
 shows the first item.  In this 

02:28:57.273 --> 02:29:00.003
case it was a photograph, also 
could be used for a background. 

02:29:01.877 --> 02:29:07.993
links are being set     used to 
set up a paired use in your app 

02:29:07.994 --> 02:29:11.173
and also group relationships.  
One person in the group or the 

02:29:11.174 --> 02:29:14.281
pair has the app, and you want 
to onboard the others in that 

02:29:14.282 --> 02:29:19.034
group, dynamic links are great 
to be used for invites.  The 

02:29:19.035 --> 02:29:22.019
first person can invite the 
others and all the others get 

02:29:22.939 --> 02:29:27.522
personalized warm welcomes to 
invite them into the app.    

02:29:27.523 --> 02:29:34.459
This is a second use case where 
before dynamic links this 

02:29:34.460 --> 02:29:37.859
particular flow starts off with 
an e-mail saying, hey, they can

02:29:38.114 --> 02:29:40.265
          check this out in the 
app, and the user goes through 

02:29:40.266 --> 02:29:43.684
the install process.  The app 
doesn't know it came for this 

02:29:43.685 --> 02:29:45.685
particular content

02:29:47.328 --> 02:29:50.235
, so it takes it through the 
default onboarding screen, and 

02:29:50.915 --> 02:29:53.237
you can go back and find the 
search option in the app and 

02:29:53.238 --> 02:29:55.585
search for the content.  They 
might have forgot what it was, 

02:29:55.586 --> 02:29:58.131
go back to the e-mail, get the 
content and search for it.  It 

02:29:58.132 --> 02:30:01.469
takes them more than a dozen 
clicks to actually get to their 

02:30:01.470 --> 02:30:03.569
content.    
With dynamic links this makes it

02:30:03.570 --> 02:30:08.029
 very, very nice ask clean    
            nice and clean.  The

02:30:08.874 --> 02:30:12.449
 app opener knows what the 
content is for and it goes down.

02:30:12.450 --> 02:30:15.519
  So what is the benefit of 
doing something like this?  So 

02:30:15.520 --> 02:30:19.512
one of our partners actually has
 been using this in exactly the 

02:30:19.513 --> 02:30:26.015
scenario.  What they found is 
that dynamic links increase 

02:30:26.016 --> 02:30:31.712
their attention up to four weeks
 by 92% for users who came in 

02:30:31.713 --> 02:30:35.421
from these links.  This has a 
big impact on attention.

02:30:35.422 --> 02:30:40.457
&gt;&gt;     .
&gt;&gt;                    attention.

02:30:43.204 --> 02:30:48.315
Google maps    Maps.  You can 
use dynamic links to effectively

02:30:48.316 --> 02:30:51.731
 convert app users if you think 
the app can provide them with a 

02:30:51.732 --> 02:30:54.106
better experience.  Here once 
the user has searched for some 

02:30:54.107 --> 02:30:57.515
content, something they actually
 care about, you can give them 

02:30:57.516 --> 02:31:01.355
the option.  In this case to 
e-mail it to yourself and to 

02:31:01.356 --> 02:31:06.468
this e-mail comes, e-mail it or 
text to to themselves and e-mail

02:31:06.469 --> 02:31:07.794
 the to    
                          hemselves

02:31:07.795 --> 02:31:10.019
 and e-mail the message.  When 
they click on it, if the app is 

02:31:10.020 --> 02:31:14.184
present, directly opens the app,
 ; not present, it goes through 

02:31:14.185 --> 02:31:16.235
the install flow.  When they 
come onto the site, they have 

02:31:16.236 --> 02:31:19.201
the content right there.  And if
 the link or the message is 

02:31:19.202 --> 02:31:23.301
opened on a platform where there
 is no app for the service, 

02:31:23.578 --> 02:31:25.932
that's totally fine, because you
 can configure the link to be 

02:31:25.933 --> 02:31:27.933
opened in that case, too

02:31:30.671 --> 02:31:35.045
.    
This is -- this use case 

02:31:35.046 --> 02:31:38.201
converts mobile web users.  They
 are doing a promotion with a 

02:31:38.202 --> 02:31:42.780
very unique marketing campaign 
where you can actually scan a 

02:31:42.781 --> 02:31:47.327
particular logo on coke bottles 
and that will leave       lead 

02:31:47.328 --> 02:31:52.745
you to a very unique lip sync 
experience, where you can share 

02:31:52.746 --> 02:31:56.299
it on social media and here you 
can share it on Facebook.  So 

02:31:56.740 --> 02:31:59.431
when somebody actually clicks on
 their friend's shared lip sync 

02:31:59.557 --> 02:32:03.106
video, it takes you to a mobile 
Web page where          

02:32:03.255 --> 02:32:07.691
               a mobile web 
page.  This is a way to convert 

02:32:07.692 --> 02:32:10.659
the user to an app user.  It is 
a call to action that says make 

02:32:11.315 --> 02:32:15.378
your own lip sync video and 
share it on social media.    

02:32:15.379 --> 02:32:17.821
Here if you did not have dynamic
 links, they would have to have 

02:32:18.152 --> 02:32:20.095
two buttons here.  One that says
 if you have the app, click here

02:32:20.096 --> 02:32:22.537
.  If you don't           you 
don't have it, download it and 

02:32:22.843 --> 02:32:25.251
hopefully you can figure out in 
the app how you can come back to

02:32:25.252 --> 02:32:28.941
 this place; right?  So dynamic 
links is perfect here.  It's one

02:32:28.942 --> 02:32:32.209
 button that works in both cases
, and in both cases leads you to

02:32:32.210 --> 02:32:34.336
 the right place. 

02:32:43.705 --> 02:32:47.886
onboarding users and desktop to 
app.  One of the common cases is

02:32:47.887 --> 02:32:51.136
 sharing.  Let's see how this 
can be used for sharing.  So 

02:32:51.137 --> 02:32:57.183
going back to Todd's  's exactly
, it turns out our food blogger 

02:32:57.184 --> 02:33:01.307
isn't       isn't the only    
              ger is the only 

02:33:01.308 --> 02:33:04.169
one that wants to share recipes.
  Our users want to share recipe

02:33:04.476 --> 02:33:09.667
s.  In Recipe Wrangler for each 
recipe,al   allow them to make a

02:33:09.668 --> 02:33:12.654
 dynamic links for each recipe 
that they can now post and share

02:33:12.917 --> 02:33:16.736
 on social media, by e-mail.  So
 everybody can pass this around.

02:33:16.737 --> 02:33:20.909
  As the piece gets passed 
around, Recipe Wrangler, our 

02:33:20.910 --> 02:33:25.290
food app, gets more users.  
That's great.  And so since they

02:33:25.584 --> 02:33:28.892
 use dynamic links, they use all
 the benefits we talked about.  

02:33:29.460 --> 02:33:34.050
It works in app installed cases,
 in Android and IOS, all the 

02:33:34.051 --> 02:33:37.206
scenarios.  All they have to do 
is add some boilerplate code.  

02:33:37.828 --> 02:33:40.967
Just create the deep link and 
find the e-mail contact and then

02:33:41.413 --> 02:33:46.103
 find the SMS contact.  Maybe if
 you want to be really good, 

02:33:46.742 --> 02:33:48.786
have a recommendation engine 
that can suggest who you should 

02:33:48.787 --> 02:33:52.827
share this with, because you may
 not want to scroll through 200 

02:33:52.828 --> 02:33:54.398
people in the contact list to 
find the people they want to 

02:33:54.399 --> 02:33:57.850
share it with.  And then have a 
pretty e-mail that's pre

02:33:58.194 --> 02:34:01.778
formatted that they can modify 
so that they can customize it.  

02:34:02.201 --> 02:34:04.919
And then ideally, send the 
e-mails from the app itself 

02:34:05.230 --> 02:34:07.658
without having to go into an 
e-mail client.    

02:34:07.659 --> 02:34:11.363
So it does take a little bit of 
work, but dynamic links are 

02:34:11.364 --> 02:34:14.994
great in this kind of flow.  If 
only this could be a little 

02:34:14.995 --> 02:34:17.856
easier, that would be really 
great, but this shows your 

02:34:17.857 --> 02:34:21.339
dynamic links can be used.    
So thank you very much for 

02:34:21.340 --> 02:34:24.903
coming -- 
&gt;&gt; No, wait, wait, wait.  We're 

02:34:24.904 --> 02:34:27.279
not done yet.  We got one more 
feature. 

02:34:27.280 --> 02:34:30.583
&gt;&gt; We're not?
&gt;&gt; Todd   ODD:  My gosh, 

02:34:30.584 --> 02:34:32.584
don't       don't end yet.  You 
see, we recognize that the whole

02:34:32.776 --> 02:34:36.726
 process of kind of creating all
 these links and sending them 

02:34:36.727 --> 02:34:40.145
off through e-mail and SMS is 
kind of valuable, also kind of a

02:34:40.146 --> 02:34:42.880
 pain to do       to do.  And so
 we decided to standardize the 

02:34:43.652 --> 02:34:46.052
process for you in my nice 
little package.  You're still 

02:34:46.431 --> 02:34:49.414
more than welcome to go ahead 
and generate your own dynamic 

02:34:49.415 --> 02:34:52.941
links and serve them however you
 want.  You can still do that, 

02:34:52.942 --> 02:34:56.032
but for SMS and e-mail, which 
tends to be two of the most 

02:34:56.033 --> 02:34:59.127
common situations, we have a 
solution that you can use right 

02:34:59.128 --> 02:35:01.645
away.    
So generally this is how it 

02:35:01.646 --> 02:35:05.197
would work:  On IOS you're 
basically going to create an 

02:35:05.198 --> 02:35:07.917
invite builder and you'll give 
it a bunch of parameters that 

02:35:07.918 --> 02:35:12.422
sorts       sort of changes its 
behavior.  What the deep link 

02:35:12.423 --> 02:35:14.654
info is going to be for the 
people that receive this invite.

02:35:14.655 --> 02:35:17.514
  That's the important one, as 
well as maybe what you want the 

02:35:17.515 --> 02:35:22.496
default outbound message to be 
for that user.  If you want to 

02:35:22.622 --> 02:35:25.372
customize the call to action 
button or that kind of thing, 

02:35:25.373 --> 02:35:27.419
once do you that, you'll open up
 the dialogue and it will appear

02:35:27.676 --> 02:35:30.020
 as sort of a view controller 
right on top of your current 

02:35:30.592 --> 02:35:31.896
app.  
Ah Android, almost 

02:35:31.897 --> 02:35:35.034
                        .    
On Android, you'll create an 

02:35:35.035 --> 02:35:38.688
intent, set all the various 
parameters around what you want 

02:35:38.689 --> 02:35:42.093
the fault       default message 
to be, the deep link info to be 

02:35:42.094 --> 02:35:45.816
and so on, and you'll launch it 
to get the UI.  What you get on 

02:35:45.817 --> 02:35:49.096
IOS is something that looks a 
little like this.  A few notes 

02:35:49.384 --> 02:35:52.757
about this invite dialogue, 
you'll note we are missing     

02:35:53.593 --> 02:35:56.019
           we are mixing in SMS 
and e-mail.  That's good.  It 

02:35:56.020 --> 02:35:58.724
turns out a lot of users, they 
only have either the e-mail 

02:35:58.725 --> 02:35:59.905
address or the phone number
              phone number of 

02:35:59.906 --> 02:36:03.434
their recipients; right?  They 
don't       don't have both and 

02:36:03.435 --> 02:36:07.355
having them in one convenient 
location is awfully nice.  Also,

02:36:07.587 --> 02:36:11.456
 you'll notice that we have some
 suggestions from Google folks 

02:36:11.457 --> 02:36:14.725
or from Google based on folks we
 think you might want to talk to

02:36:14.726 --> 02:36:19.663
 based on sort of who we think 
your best friends are, or 

02:36:19.803 --> 02:36:21.693
who   at least who you want to 
communicate with.  And so that 

02:36:21.694 --> 02:36:23.694
can be             that can be 
very useful if your best friends

02:36:23.855 --> 02:36:26.824
 happen to be, you know, William
 and Zina, and you don't     

02:36:27.026 --> 02:36:30.527
      you don't want to scroll 
through three00         three00 

02:36:30.528 --> 02:36:32.343
different contacts   

02:36:32.344 --> 02:36:34.814
 through 300 contacts to get to 
those people.    

02:36:34.815 --> 02:36:37.370
What your recipients will see is
 a default message that looks 

02:36:37.371 --> 02:36:41.626
something like this.  You'll 
notice the subject line is the 

02:36:42.359 --> 02:36:45.305
customized user message that 
your user has sent to people.  

02:36:45.306 --> 02:36:49.033
And then the actual content of 
the e-mail is what we have 

02:36:49.034 --> 02:36:52.276
automatically grabbed from the 
App Store or the Play Store for 

02:36:52.277 --> 02:36:55.925
you.  So you kind of can see the
 description, which is directly 

02:36:55.926 --> 02:36:59.784
from the App Store and the 
screen shots and so on.    

02:36:59.785 --> 02:37:02.237
This is pretty good for 
delivering a nice looking e-mail

02:37:02.238 --> 02:37:05.269
 with eight lines of code, but 
if you do want to do a little 

02:37:05.270 --> 02:37:07.270
more and have a little more

02:37:09.435 --> 02:37:10.802
 control on what this invitation
 looks like, you can add in an 

02:37:10.803 --> 02:37:13.688
e-mail content parameter.  And 
so this is a parameter where you

02:37:13.689 --> 02:37:18.515
 would generate a whole bunch of
 HTML or supply in a whole bunch

02:37:18.516 --> 02:37:21.567
 of HTML and that would control 
what the e-mail invitation would

02:37:21.776 --> 02:37:24.778
 look like to those recipients. 
 It not only let's you design 

02:37:24.779 --> 02:37:27.643
your invitation exactly the way 
you would like, but also because

02:37:28.103 --> 02:37:30.103
 it's happening right there in 
your app.  You can

02:37:33.141 --> 02:37:36.815
          .  You can customize 
that invitation right as you're 

02:37:36.816 --> 02:37:40.431
sending it, uke have custom
                     it, you can

02:37:40.432 --> 02:37:42.861
 have custom information that 
the user would share.    

02:37:42.862 --> 02:37:45.042
This is what they did.  If you 
want to share a recipe instead 

02:37:45.272 --> 02:37:48.660
of the e-mail containing some 
generic e-mail about the app, 

02:37:48.661 --> 02:37:52.508
they said well, gosh we have all
 this recipe info right here, 

02:37:52.681 --> 02:37:55.028
let's put that into the e-mail. 
 So what you get is a little bit

02:37:55.458 --> 02:37:58.388
 more about the recipe.  You get
 to see the picture of the 

02:37:58.389 --> 02:38:01.950
chocolate peppermint cookies, 
which look delicious, because 

02:38:02.170 --> 02:38:04.471
        maybe because it's 
lunchtime, and a little bit of a

02:38:04.472 --> 02:38:07.384
 snippet of the recipe to get 
you interested.  Then you're a 

02:38:07.385 --> 02:38:10.386
little more inspired to click on
 the link that says, well, yes, 

02:38:10.387 --> 02:38:12.568
I would like to install that app
.    

02:38:12.569 --> 02:38:16.425
Oh, man, these guys really have 
a good recipe app already.  

02:38:16.426 --> 02:38:19.431
Looks like it's back to the 
drawing board for John and Mary.

02:38:19.432 --> 02:38:21.596
  Oh, that's good.  They have a 
backup plan.    

02:38:21.597 --> 02:38:24.000
So the process for receiving 
invites, it's almost the same as

02:38:24.940 --> 02:38:29.699
 for receiving a deep link.  On 
IOS, instead of passing the URL 

02:38:29.700 --> 02:38:33.754
you get into the dynamic links 
library, you pass it to the 

02:38:33.755 --> 02:38:36.025
Firebase dynamic links 

02:38:36.026 --> 02:38:42.354
 it to Firebase Inbox library.  
On Android you, you don't 

02:38:44.164 --> 02:38:46.322
                       Android, 
you don't           you don't 

02:38:46.323 --> 02:38:48.834
need to do anything.  The code 
is exactly the same for incoming

02:38:48.835 --> 02:38:51.322
 Firebase invites       Invites.

02:38:51.323 --> 02:38:56.160
Now let's move to the one bit of
 bummer news.  So on Android, 

02:38:56.161 --> 02:38:58.161
you don't           you don't 
need to be signed in at all

02:38:59.527 --> 02:39:03.527
 to send or receive an invite.  
Anybody is free to send any 

02:38:59.527 --> 02:39:01.552
invitations they want.  Anybody 
is free to accept any invitation

02:39:01.823 --> 02:39:04.582
s and that's all great.    
On IOS, you also don't       

02:39:04.583 --> 02:39:07.532
don't need to be signed in to 
receive an invite.  You get an 

02:39:07.533 --> 02:39:11.201
invite coming in, go ahead, and 
you can kind of click on that in

02:39:11.202 --> 02:39:13.809
 your e-mail and take you to 
your app and so on.    

02:39:13.810 --> 02:39:16.856
So maybe you can see where we're
 going here.  You do, however, 

02:39:17.227 --> 02:39:22.599
have to be signed in with Google
 to send invitations on IOS.  

02:39:22.600 --> 02:39:25.271
Now, maybe for some of you 
that's not a problem, your app 

02:39:25.272 --> 02:39:29.897
already uses sign-in and Google 
is one of your preferred sign-in

02:39:29.898 --> 02:39:32.347
 providers and you're thinking 
this is gien, most of         

02:39:32.518 --> 02:39:35.316
              this is fine.  
Maybe your app doesn't have sign

02:39:35.458 --> 02:39:40.225
-in at all or maybe you're not 
adding Google sign-     Sign-in 

02:39:40.226 --> 02:39:45.237
to your app.  Well, okay.  
That's not a big deal.  I'll put

02:39:46.812 --> 02:39:51.437
           .  Put      .  I'll 
put the Firebase in my app.  I 

02:39:51.438 --> 02:39:57.836
can still get some viral effects
 from getting all the invites.  

02:39:57.837 --> 02:40:01.016
Here is the problem with that.  
Android users and IOS users 

02:40:01.017 --> 02:40:04.275
sometimes still talk to each 
other.  Frequently they're often

02:40:04.276 --> 02:40:06.276
 friends

02:40:07.478 --> 02:40:11.114
.  And so the problem is that 
your Android users are going to 

02:40:11.115 --> 02:40:15.254
send these invitations not only 
to other Android users, but also

02:40:15.531 --> 02:40:18.376
 IOS users as well.  The IOS 
users will click on the 

02:40:18.377 --> 02:40:20.705
invitation.  They will go 
through the process of install 

02:40:20.836 --> 02:40:25.137
your app, but then if you 
haven't implemented any kind of 

02:40:25.412 --> 02:40:28.786
fair base logic                 
        kind of Firebase logic 

02:40:28.787 --> 02:40:33.745
on the app, it will give your 
users the generic home screen 

02:40:34.003 --> 02:40:36.305
instead of the great recipe your
 users are trying to share.  

02:40:36.306 --> 02:40:38.887
They'll be sad and confused.  
What I recommend is at the very 

02:40:38.993 --> 02:40:42.384
least, if you're adding Firebase
d invites on Android, make sure 

02:40:42.385 --> 02:40:46.445
that you add the ability to 
receive invites on IOS.  Like 

02:40:46.446 --> 02:40:50.105
you saw, the code is very nearly
 identical to the deep link 

02:40:50.106 --> 02:40:52.839
parsing we did earlier.  This 
will make sure that      that 

02:40:52.840 --> 02:40:56.237
your Android users can still 
send invites to whoever they 

02:40:56.238 --> 02:40:58.650
want and they will get accepted.
  Your IOS users won't be 

02:40:58.651 --> 02:41:01.997
confused.  Again, totally up to 
you whether you want to add in 

02:41:01.998 --> 02:41:05.763
sending invitations on IOS.    
There you go, that is fair basin

02:41:05.764 --> 02:41:08.471
 invites       Invites         
                   , that is 

02:41:09.377 --> 02:41:11.744
Firebase invites       Invites 
in a nutshell.

02:41:11.745 --> 02:41:16.170
&gt;&gt; Thank you, Todd.  Let's recap
.  In this talk we covered 

02:41:16.171 --> 02:41:18.987
dynamic links.  Now you know how
 to use them to make great 

02:41:18.988 --> 02:41:22.603
marketing URLs for your app and 
product.  We also looked at 

02:41:22.604 --> 02:41:27.711
invites       Invites, an out of
 the box invite flow for very 

02:41:28.055 --> 02:41:32.298
effective sharing on invites on 
SMS and e-mail.    information, 

02:41:32.476 --> 02:41:37.489
please head over to your Sandbox
 for support.  We have a 

02:41:37.490 --> 02:41:42.707
playground for you to create 
dynamic links, that's at FDL

02:41:43.298 --> 02:41:48.890
-links.  And you can go ahead 
and create some dynamic links 

02:41:48.891 --> 02:41:53.741
and play with them and try all 
the parameters out.    

02:41:53.742 --> 02:41:56.966
This is all the remaining talk 
going on.  So we'll be around 

02:41:56.967 --> 02:42:00.729
here after this talk and happy 
to answer any questions off the 

02:42:00.730 --> 02:42:02.468
stage.    
Thank you.  

02:42:02.469 --> 02:42:04.469
(Applause)

03:59:30.262 --> 03:59:38.177
11:00 P   a.m.      

03:59:46.952 --> 03:59:55.497
     1:00 p.m. PT
       AN23

04:00:14.624 --> 04:00:16.624
a 

04:01:53.494 --> 04:01:55.494
 . 

04:07:02.747 --> 04:07:04.747
.
       Test 

04:08:21.890 --> 04:08:24.209
                 &gt;&gt; Hi, 
everyone.

04:08:24.210 --> 04:08:27.337
                     &gt;&gt; Thank 
you.  Thanks for coming.  My 

04:08:27.338 --> 04:08:32.903
name is Dan 
 Aminzade a software engineer at

04:08:32.904 --> 04:08:35.951
 Google and dedicate ed tri   
 triathlete.  On a good week I 

04:08:36.145 --> 04:08:42.313
bike 50 miles and write 3,000 
 lines of code.  Maybe it's no 

04:08:42.630 --> 04:08:47.008
surprise I work on the Google 
 Fit for Android Wear and it 

04:08:47.292 --> 04:08:56.009
makes good use of the Google 
 Fit APIs we'll be showing you 

04:08:58.325 --> 04:08:59.366
today.
        &gt;&gt; MUZ MUSTOF:  I enjoy 

04:08:59.367 --> 04:09:02.304
weightlifting, yoga, and 
 occasionally experiments with 

04:09:02.511 --> 04:09:04.834
different diets.  Today we're 
 going to talk about building 

04:09:04.929 --> 04:09:07.846
rich experiences with the 
 Google Fit platform and Android

04:09:07.847 --> 04:09:11.894
 Wear.  I'll start out by 
 talking about why we create ed 

04:09:12.594 --> 04:09:13.846
the Fit platform, what problem 

04:09:13.847 --> 04:09:16.889
 problems we set out to solve, 
and then Dan will go over the 

04:09:17.093 --> 04:09:21.142
 APIs and data types.ext we'll 
loo at some specific examples of

04:09:21.143 --> 04:09:24.181
 what you 
 can build with a Fit platform, 

04:09:24.667 --> 04:09:27.398
first basic fitness tracking 
 and then a more advance ed 

04:09:28.326 --> 04:09:32.759
realtime fitness use case.
       Finally we'll finish up 

04:09:33.188 --> 04:09:38.636
with some really cool demos 
 coming soon. start out by 

04:09:39.335 --> 04:09:41.854
introducing the Fit platform.  
 We'll explain why we create ed 

04:09:41.959 --> 04:09:44.911
Fit, what problems we set out 
solve, and why we believe fit

04:09:45.335 --> 04:09:51.140
ness is such a great use 
 case for wearables. the Google 

04:09:51.443 --> 04:09:53.173
Fit platform existed, life for a

04:09:53.174 --> 04:09:56.420
 fitness application developer 
was not easy.  It was 

04:09:56.421 --> 04:10:02.475
 integration hell.  First issue 
was that of siloed data.  It 

04:10:02.787 --> 04:10:08.353
 uses health and fitness data is
 siloed across multiple apps 

04:10:08.354 --> 04:10:12.501
 and fitness devices. there was 
no easy access and storage of 

04:10:13.018 --> 04:10:15.840
 sensor data.  No easy way for 
developers to read, interpret 

04:10:17.275 --> 04:10:22.678
 health and fitness-relate ed 
 devices, centered on compact 

04:10:23.583 --> 04:10:27.615
such as Android Wear devices.
       The third problem was 

04:10:29.424 --> 04:10:31.448
poor interoperate anlt      
             interoperability.  

04:10:31.449 --> 04:10:33.449
There 
 was no standard way to operate.

04:10:33.647 --> 04:10:37.186
  So without the standard 
 ecosystem, app developers had 

04:10:37.586 --> 04:10:41.140
to have their own platform 
 and API.  Some are poorly 

04:10:41.428 --> 04:10:45.970
implemented, leading to user 
 frustration. the Google Fit 

04:10:46.185 --> 04:10:49.086
platform we solve ed that 
problem 

04:10:49.087 --> 04:10:53.627
 with giving apps one single 
APIs to access, record, and 

04:10:53.628 --> 04:10:57.063
 store phone data, wearable data
, and other app data. by using 

04:10:57.164 --> 04:11:00.685
my phone or my wear devices, my 
fitness 

04:11:00.686 --> 04:11:04.037
 hub, I can connect my fitness 
wearable to my favorite 

04:11:04.038 --> 04:11:08.245
 nutrition app and my sleep 
tracking app to my favorite 

04:11:08.246 --> 04:11:11.884
 meditation app.e don't just 
consolidate data though.  With 

04:11:11.885 --> 04:11:14.509
user 
 consent we provide low-level 

04:11:15.112 --> 04:11:17.391
sensor recording and perform 
 hard computations for things 

04:11:17.634 --> 04:11:20.591
like distance and calories.  
 Whether it's resting heart rate

04:11:21.174 --> 04:11:24.310
 from heart rate timestamps, 
 distances fuse ed from your 

04:11:24.514 --> 04:11:27.252
height, steps and GPS, or 
calorie       

04:11:27.253 --> 04:11:30.452
 calories from heart rate.
       The Fit platform makes it

04:11:30.453 --> 04:11:34.018
 easy ier for health and fit   
 fitness application developers.

04:11:34.196 --> 04:11:38.160
  And fitness and wearables 
 truly go and in hand.  This is 

04:11:38.352 --> 04:11:43.203
for a few reasons.  First, 
 the sensors.  Your app can get 

04:11:43.306 --> 04:11:45.448
access to all of these ways 
 of measure ing fitness 

04:11:45.742 --> 04:11:48.067
activity ies.  Many watches have
 a GPS 

04:11:48.068 --> 04:11:51.603
 sensor, a heart rate monitor, 
and potentially even a 

04:11:51.604 --> 04:11:54.737
 barometer.nd because the watch 
is worn on the wrist it, allows 

04:11:55.031 --> 04:11:57.761
 us to detect activity ies we 
couldn't do with the phone being

04:12:00.184 --> 04:12:01.387
that's the first reason, sensor 

04:12:01.388 --> 04:12:07.267
 sensors., you can leave the 
phone.  I love my nexus 6P 

04:12:07.268 --> 04:12:10.400
 but running with a device is a 
bit cumbersome.  I have to 

04:12:10.401 --> 04:12:14.245
 rely on infrequent audio keys 
to find out my current pace 

04:12:14.246 --> 04:12:18.577
 because I can't see the scene 
when it's in an armband or in 

04:12:18.687 --> 04:12:22.011
 my pocket.hird is faster input.
  When you're on the go with, 

04:12:22.201 --> 04:12:24.897
 you can have quick interactions
 with a watch to control 

04:12:24.898 --> 04:12:27.573
 music or activity recording 
that would take much longer if 

04:12:27.671 --> 04:12:29.985
 you had to rely on pulling out 
your phone and opening up 

04:12:29.986 --> 04:12:32.414
 the right app.
       Now, let's talk about 

04:12:32.835 --> 04:12:37.555
what the Google fifth       Fit 
platform 

04:12:37.556 --> 04:12:40.082
 provides that enables you to 
build rich experiences in line 

04:12:40.275 --> 04:12:48.441
 of what we just discussed., 
let's talk about the Google Fit 

04:12:48.633 --> 04:12:50.633
app on both 
 phone and Android Wear.  If 

04:12:50.756 --> 04:12:53.188
you're not familiar with the 
 app, you see that it tracks 

04:12:53.189 --> 04:12:55.189
walking, running, and bike ing 

04:12:59.539 --> 04:13:01.362
 using the Google Fit platform's
 APIs that detect activity, 

04:13:01.363 --> 04:13:03.683
 are associate ed step, calorie,
 and disstance           

04:13:03.684 --> 04:13:07.528
distances.
       The app also shows data 

04:13:07.718 --> 04:13:10.451
from connected third party 
 devices and apps such as 

04:13:10.548 --> 04:13:12.456
exercise sessions, weights, 
heart 

04:13:12.457 --> 04:13:17.918
 rate, nutrition data, and 
sleep.

04:13:18.779 --> 04:13:20.779
       Our platform 
automatically synchronize ing 

04:13:22.287 --> 04:13:25.295
between your 
 Android phone, your Android 

04:13:25.296 --> 04:13:28.840
Wear, and the web.  The Fit 
 platform exists in all three of

04:13:28.841 --> 04:13:35.286
 these.  You can write in about 
REST APIs on the web or disk on 

04:13:35.500 --> 04:13:39.717
the phone or SDK 
 anywhere.  It handles merge ing

04:13:39.718 --> 04:13:45.376
 and reduplication of this 
 data intelligently and we even 

04:13:45.684 --> 04:13:47.987
support Takeout information 
 if the user wants to export 

04:13:48.307 --> 04:13:51.923
their data.  So now that you've 
gotten 

04:13:51.924 --> 04:13:54.859
 a overview of the Google fifth 
platform and why it        

04:13:55.071 --> 04:13:58.807
                   Fit platform 
let me tell you about 

04:13:58.808 --> 04:14:00.808
 the different API it is 
provides.  Basically it breaks 

04:14:01.021 --> 04:14:04.443
down 
 into four paips       APIs.  

04:14:04.444 --> 04:14:07.570
For there is the sensor am API 
from 

04:14:07.571 --> 04:14:09.687
 Android devices and wearable 
sensors.  Things like heart 

04:14:09.688 --> 04:14:12.733
 rate.  Then there is a 
RecordingApi, that does 

04:14:12.814 --> 04:14:14.439
automatic 
 mate ed storage                

04:14:14.440 --> 04:14:20.468
 mate ed store using 
subscriptions, Google Fit will 

04:14:20.675 --> 04:14:22.512
store it 
 in the background and have a 

04:14:22.513 --> 04:14:24.827
prescription for you.
       Next there is the history

04:14:24.828 --> 04:14:28.251
 API that gives you access 
 to the fitness history and lets

04:14:28.252 --> 04:14:31.689
 you perform bulk operations 
 like reading and inserting 

04:14:31.912 --> 04:14:33.003
data.  Then there is the 
session       

04:14:33.004 --> 04:14:36.584
 sessions API, that's a metadata
 layer on top of raw fitness 

04:14:36.585 --> 04:14:38.962
 date       
 data that let you store whole 

04:14:38.963 --> 04:14:41.693
fitness activity ies, so a 
 session is a time interval in 

04:14:41.694 --> 04:14:45.030
which the user is doing a 
 bike ride or run or weight 

04:14:45.343 --> 04:14:47.562
lifting session.s far as what 
you can record, we support 

04:14:47.855 --> 04:14:49.357
really all 
 the standard data types for 

04:14:49.358 --> 04:14:52.387
diet, nutrition, body, activity 

04:14:52.388 --> 04:14:55.323
 activity, sleep.  We're also 
adding this new hydration data 

04:14:55.401 --> 04:14:59.357
 type.  I think this is a pretty
 exhaustive list of fitness 

04:14:59.358 --> 04:15:01.787
 metrics but if there is one 
that's not in here that you 

04:15:01.788 --> 04:15:05.392
 would like to log in your app, 
you should let us know.o let's 

04:15:05.715 --> 04:15:07.437
start by talking just about 
basic fitness 

04:15:07.438 --> 04:15:10.572
 tracking.  You can't measure 
what you don't track, so track 

04:15:11.487 --> 04:15:13.915
really I think the first step 
 toward motivate ing people 

04:15:14.202 --> 04:15:15.714
toward better fitness.  I 
started 

04:15:15.715 --> 04:15:19.464
 tracking my workouts 10 years 
ago in 2006 when I was 

04:15:19.465 --> 04:15:24.107
 training for my first marathon.
  I bought my first wrist-      

04:15:24.108 --> 04:15:28.030
 wrist-mounted GPS.  It was the 
uncomfortable thing like the 

04:15:29.041 --> 04:15:35.605
 siefs a chinchila on my list.  
It did what you it could.  

04:15:35.606 --> 04:15:39.570
 Back then there weren't any 
nice portals or fitness 

04:15:39.571 --> 04:15:43.988
 platforms.  I built this 
website with Google maps API 1.0

04:15:45.317 --> 04:15:47.735
there.  There is something 
 thrilling from a data geek like

04:15:47.736 --> 04:15:50.652
 me to come back from a work    
 workout and analyze my stats on

04:15:50.653 --> 04:15:52.998
 pace and heart rate and 
 elevation, and I could really 

04:15:53.295 --> 04:15:55.841
track my progress from week 
 to week and workout to workout.

04:15:57.461 --> 04:16:01.175
       So these days, obviously 
there are much are mo 

04:16:01.176 --> 04:16:04.127
 elegant and full-feature ed 
alternatives where I can analyze

04:16:05.758 --> 04:16:08.084
 friends and track my 
 progress toward fitness goals. 

04:16:08.187 --> 04:16:11.520
 And also I don't have to 
 wear a big giant ugly thing on 

04:16:11.624 --> 04:16:14.154
my wrist, I can wear this 
 really,  -- you know, these 

04:16:16.080 --> 04:16:20.909
beautiful timepieces from Tag 
 Heuer or Michael Kors and still

04:16:20.910 --> 04:16:25.451
 track throughout the day 
 with the watchface.  This is my

04:16:25.452 --> 04:16:31.830
 favorite watchface here.  
 The Fit Cat (Laughing) yeah.

04:16:32.028 --> 04:16:34.028
       (Applause).
                     It try ies 

04:16:34.066 --> 04:16:35.689
to encourage you to be more acti
ve.  So 

04:16:35.690 --> 04:16:39.013
 basically if you haven't seen 
this before the more active 

04:16:39.014 --> 04:16:42.034
 the more steps you take the 
more cute he becomes.  I love 

04:16:42.035 --> 04:16:48.721
 that he's wearing the I/O badge
 and wearing a Android Wear 

04:16:48.722 --> 04:16:51.153
 as well.  The more steps you 
take, the more active the cat 

04:16:51.364 --> 04:16:53.184
 becomes.  Trying to build will 
something like this on your 

04:16:53.185 --> 04:16:56.044
 own is not easy.  There is a 
lot of stuff you would have to 

04:16:56.045 --> 04:16:59.297
 do it on your own.  You would 
have to build a data stare to 

04:16:59.589 --> 04:17:03.225
 track step, turn on permissions
, record step counts in a 

04:17:03.226 --> 04:17:06.171
 way that won't kill the watch 
battery, if you get that part 

04:17:06.172 --> 04:17:09.407
 working, then when the user 
first installs your watchface, 

04:17:09.726 --> 04:17:12.654
 it will record zero, it will 
show zero because you haven't 

04:17:13.062 --> 04:17:13.260
 been recording yet.
       And then there is all 

04:17:13.261 --> 04:17:17.867
these edge cases like the user 
 takes off the watch and goes 

04:17:18.063 --> 04:17:20.995
for a walk with the phone in 
 their pocket.  Then you have to

04:17:20.996 --> 04:17:22.944
 write the logic to merge in 
 that data.  Even if approximate

04:17:22.945 --> 04:17:25.189
 you solve these problems, 
 the step count is probably not 

04:17:25.190 --> 04:17:28.103
going to be consistent with 
 other watchfaces in other apps.

04:17:28.413 --> 04:17:31.149
  So fortunately we solve ed 
 all these problems for you with

04:17:31.150 --> 04:17:33.297
 the Google Fit platform.  
 We store steps in the 

04:17:33.519 --> 04:17:36.916
background in a nice low-power 
 battery friendly way and 

04:17:37.032 --> 04:17:38.637
they're ready to be read any 
time 

04:17:38.638 --> 04:17:41.623
 you like and you get consistent
 step counts on Android Wear 

04:17:41.895 --> 04:17:45.685
 with one method call.  Let me 
show you how to do that. when 

04:17:45.841 --> 04:17:47.961
you want to connect to the 
Google Fit 

04:17:47.962 --> 04:17:51.592
 platform, you create a 
GoogleApiClient.  Normally you 

04:17:51.799 --> 04:17:54.226
 create an authenticate ed one 
where you specify the account 

04:17:54.436 --> 04:17:57.568
 you want to read data for.  So 
here is how I build the 

04:17:57.569 --> 04:18:00.102
 client.  I say I'm interested 
in reading fitness history 

04:18:00.103 --> 04:18:03.271
 data, so I add the Fitness 
History API.  I add scopes to 

04:18:03.272 --> 04:18:05.965
 the particular types of data I 
want to read, so in this 

04:18:05.966 --> 04:18:09.108
 case activity type, location, 
and body sensor data like 

04:18:09.109 --> 04:18:11.251
 heart rate.
       And then next I add in a 

04:18:11.342 --> 04:18:14.001
count.  This is the count I 
 want to read the data from, 

04:18:14.210 --> 04:18:17.635
then my callbacks now I have 
 this authenticate ed client I 

04:18:17.737 --> 04:18:20.690
can use to make query ies to the

04:18:20.691 --> 04:18:24.345
 fitness platform.ut wait you're
 saying, Android Wear watches 

04:18:24.620 --> 04:18:26.670
don't 
 have accounts.  This is true.  

04:18:26.671 --> 04:18:28.707
Android Wear 2.0 will 
 actually add account support, 

04:18:28.909 --> 04:18:31.066
but for now we don't have 
 accounts on watches.  

04:18:31.376 --> 04:18:32.320
Fortunately there is a solution.
  Now   

04:18:32.321 --> 04:18:36.153
 Now, you could sync account 
information from the phone, but 

04:18:36.154 --> 04:18:39.004
 that would require your watchf
ace to have a companion phone 

04:18:39.095 --> 04:18:41.942
 app which is a lot more 
complicate ed.  Here is a easy 

04:18:42.106 --> 04:18:43.331
way to 
 do it without a phone app.  You

04:18:43.332 --> 04:18:46.999
 can create a no account 
 client.  You create a 

04:18:47.487 --> 04:18:48.911
GoogleApiClient as before, we 
have 

04:18:48.912 --> 04:18:52.752
 the history API, then set 
default account.  Don't specify 

04:18:53.249 --> 04:18:54.262
a 
 account.  Finish building.  

04:18:54.263 --> 04:18:57.601
Then we have a no account we 
 can still use to inquiry step 

04:18:57.803 --> 04:19:01.034
accounts and you do that with 
 the read daily totals method.  

04:19:01.035 --> 04:19:05.277
You call the history API 
 read daily total method, and 

04:19:05.682 --> 04:19:07.851
this is basically going to 
 give you a simple way to get 

04:19:08.052 --> 04:19:10.460
step counts for watchface 
 that's going to be consistent 

04:19:10.760 --> 04:19:13.951
with other apps in other 
 watchfaces.  You can set a call

04:19:14.132 --> 04:19:16.891
back so when the result 
 returns you can process it.  So

04:19:16.892 --> 04:19:20.523
 here in the on-result I'm ng 
out the step count, putting it 

04:19:20.619 --> 04:19:22.256
into a steps 
 total vary iable, and there you

04:19:22.257 --> 04:19:25.305
 go, it's a pretty simple way 
 to track steps with your 

04:19:25.626 --> 04:19:27.260
watchface.
       And it's not just steps 

04:19:27.261 --> 04:19:31.218
that you can am, that you can 
 get from the Google Fit 

04:19:31.412 --> 04:19:32.723
platform, right.  Can you read 
and 

04:19:32.724 --> 04:19:35.264
 right other data like calories 
consume ed.  Here is an 

04:19:35.265 --> 04:19:38.993
 example of how the Lifesum app 
displays that data.  Here 

04:19:38.994 --> 04:19:41.764
 I'm looking at the amount of 
calories I have left in the 

04:19:41.765 --> 04:19:46.465
 budget for the day rnlings 91  
          like 911 I could eat 

04:19:47.034 --> 04:19:49.268
two avocados and 
 drink two classes of wine 

04:19:50.683 --> 04:19:53.935
tonight.  Android Wear 2.0 is 
 going to have a new way to show

04:19:53.936 --> 04:19:55.936
 data.  Maybe you've seen 
 some of this early ier in the 

04:19:56.271 --> 04:19:59.649
keynote.  But basically on the 
 right there is a watchface with

04:19:59.650 --> 04:20:02.157
 three complications and it 
 lets you select which 

04:20:02.673 --> 04:20:03.986
complications you want and any 
app 

04:20:03.987 --> 04:20:05.514
 can provide date a for the 
complications.

04:20:05.515 --> 04:20:08.764
       Here is an example where 
life is export                

04:20:09.057 --> 04:20:12.444
Lifesum is exporting data on 
 the calories burns to the 

04:20:12.445 --> 04:20:15.427
switch on the right can display 
 in one of those three user 

04:20:16.948 --> 04:20:19.530
configurable slots.  If you want

04:20:19.531 --> 04:20:20.894
 more information on building 
those in had Android Wear 2.0.  

04:20:20.895 --> 04:20:23.640
 I highly recommend you check 
out the talk, a dedicate ed talk

04:20:26.953 --> 04:20:28.924
        &gt;&gt; MUZ MUSTOF:  Another 
chal ebbing             

04:20:28.925 --> 04:20:30.977
challenge that fitness 
 developers face is how to 

04:20:30.978 --> 04:20:32.705
perform difficult computations. 

04:20:32.706 --> 04:20:35.260
 For example, to derive distance
 traveled from multiple 

04:20:35.261 --> 04:20:40.806
 sensor inputs, the users height
, stride length, GPS data, 

04:20:40.807 --> 04:20:43.834
 activity type, active time, and
 step counts all have to be 

04:20:43.835 --> 04:20:46.966
 fuse ed into together.  
Potentially across multiple 

04:20:47.401 --> 04:20:49.085
sensor 
 inputs.

04:20:49.086 --> 04:20:51.630
       The fifth platform makes 
this easy for third party 

04:20:51.631 --> 04:20:54.663
 developers through its advance 
ed transformations for both 

04:20:54.664 --> 04:20:59.026
 distance and calories.  The 
basis app takes advantage of 

04:20:59.328 --> 04:21:02.784
 this.  Instead of computing 
distance themselves, they write 

04:21:02.867 --> 04:21:08.330
 in steps and activity data into
 the Google Fit platform and 

04:21:08.739 --> 04:21:12.130
 read back our compute ed values
 for distance.

04:21:17.142 --> 04:21:19.569
        &gt;&gt; DAN AMINZADE:  Cool, 
so let's take a look at mow 

04:21:19.570 --> 04:21:21.890
 we might do                  
how 

04:21:21.891 --> 04:21:24.203
 we might do this with the 
Google Fit platform.  There is 

04:21:24.396 --> 04:21:28.263
 two ways to write data to the 
platform.  Can you use the 

04:21:28.264 --> 04:21:30.488
 RecordingApi to do live 
recording or the history API to 

04:21:31.693 --> 04:21:34.131
 insert history.  Of let's start
 by looking at live record      

04:21:34.132 --> 04:21:36.459
 recording.  All we have to do 
to start live record 

04:21:36.460 --> 04:21:38.403
 something subscribe to the data
 type we care about.  So 

04:21:38.404 --> 04:21:41.270
 here I'm calling subscribe, and
 saying I'm interested in 

04:21:41.271 --> 04:21:45.117
 activity samples or activity t
ypes. then I actually at that 

04:21:45.329 --> 04:21:48.456
point, I'm essentially 
 done.  Google Fit will start 

04:21:48.558 --> 04:21:50.687
store ing the data I care about 
 in the background, so I don't 

04:21:50.890 --> 04:21:52.898
need my own database or back- 

04:21:52.899 --> 04:21:56.573
 back-end to store it.  There is
 no listener needed here.  

04:21:56.574 --> 04:21:58.225
 Basically the Google Fit 
platform is going to sync data 

04:21:58.226 --> 04:21:59.703
and 
 sync to Cloud in the 

04:21:59.704 --> 04:22:01.236
background.  When I want it 
later can 

04:22:01.237 --> 04:22:04.359
 I read it with the history API.
  So once I subscribe, I'm 

04:22:04.360 --> 04:22:07.721
 done.  All I really need to do 
is check the status code in 

04:22:07.722 --> 04:22:11.256
 the result and that's to make 
sure the subscription 

04:22:11.257 --> 04:22:12.786
 succeeded.
       Let's look at another way

04:22:12.787 --> 04:22:15.625
 to get data into the fit   
 fitness history.  Suppose I got

04:22:15.626 --> 04:22:19.567
 the data from an external 
 source like another device.  

04:22:19.568 --> 04:22:21.744
Say they wanted to write in 
 steps they got from another 

04:22:21.745 --> 04:22:24.942
device.  So first you create 
 this data source object, you 

04:22:25.255 --> 04:22:28.190
specify the type of data you 
 want to write.  I'm saying I 

04:22:28.894 --> 04:22:32.944
want to write raw step count 
 data.  Then you create a 

04:22:33.139 --> 04:22:34.584
DataSet from the data source and

04:22:34.585 --> 04:22:39.052
 add one or more data points to 
the set each has a start and 

04:22:39.053 --> 04:22:42.421
 end time.  Here I'm adding 950 
steps with a start and end 

04:22:42.422 --> 04:22:46.156
 time.  And then finally you 
just call insert data to put 

04:22:46.461 --> 04:22:50.017
 the data into the fitness 
history.  That's about it.  All 

04:22:50.218 --> 04:22:52.634
 you really have to do after 
that is verify that the 

04:22:52.635 --> 04:22:55.487
 operation succeeded before you 
start querying the data with 

04:22:55.975 --> 04:23:00.145
 the history API.  One nice 
thing is the fifth platform will

04:23:02.679 --> 04:23:06.396
 put in a invalid time range 
 or unrealistically high calorie

04:23:06.397 --> 04:23:08.209
 born or cadence or 
 something like that, I'll get 

04:23:08.210 --> 04:23:10.900
an error back on the client 
 instead of the user fitness 

04:23:10.901 --> 04:23:13.847
history getting all messed up. 
here is how this actually looks 

04:23:14.226 --> 04:23:16.887
in the Basis app.  
 They put in step, then you can 

04:23:17.098 --> 04:23:21.739
see they're able to derive 
 from that or through the Google

04:23:21.740 --> 04:23:25.959
 Fit platform they get this 
 accurate distance traveled.

04:23:29.386 --> 04:23:30.700
        &gt;&gt; MUZ MUSTOF:  We've 
been working hard over the 

04:23:30.701 --> 04:23:34.223
 past year to improve the 
quality of these transformations

04:23:34.422 --> 04:23:37.446
.  
 The first area with which we've

04:23:37.447 --> 04:23:40.445
 improve ed them is in 
 relation to distance.  Distance

04:23:40.446 --> 04:23:43.426
 compute ed from steps now is 
 a bit improve ed with stride 

04:23:43.723 --> 04:23:45.840
length calibration from actively

04:23:45.841 --> 04:23:48.680
 tracked walks and runs to 
improve the quality of passively

04:23:50.816 --> 04:23:54.522
 for calories you will soon by 
leverage ing 

04:23:54.523 --> 04:23:57.386
 gender, age, and heart rate as 
part of the computations to 

04:23:57.387 --> 04:24:02.716
 improve the accuracy.ly, for 
merge ing, previously leave ing 

04:24:02.916 --> 04:24:05.668
your phone 
 at your desk and going for your

04:24:05.669 --> 04:24:08.118
 walk with your Android Wear 
 device would result in your 

04:24:08.119 --> 04:24:11.628
step counts dipping back down 
 and then rubberbanding back up.

04:24:11.726 --> 04:24:14.178
  That will no longer be the 
 case through bidirectional 

04:24:14.400 --> 04:24:16.193
syncing.  We've also made merge 

04:24:16.194 --> 04:24:22.449
 merging of GPS data better with
 by prioritize ing the highest 

04:24:23.164 --> 04:24:26.898
 fidelity GPS sources.
       Finally, with regards to 

04:24:27.387 --> 04:24:31.323
activity, this is our most 
 complex task, to infer the 

04:24:31.833 --> 04:24:34.761
activity being performed by 
 analyzing multiple sensor 

04:24:35.058 --> 04:24:39.203
inputting in realtime.  It's 
 really important, as use ers 

04:24:39.412 --> 04:24:41.124
get frustrate ed when their 
fit   

04:24:41.125 --> 04:24:43.352
 fitness data has false positive
 and false negative activity 

04:24:44.769 --> 04:24:48.480
get their proper calories and 
 step counts as a result.  

04:24:48.481 --> 04:24:52.426
Fortunately, Google is good and 
 trusted at collecting and 

04:24:52.616 --> 04:24:55.253
understanding complex data 
 through our advance ed machine-

04:24:55.359 --> 04:24:58.487
learning capability ies.  We've 
 added dynamic sample ing of 

04:24:59.526 --> 04:25:00.489
sensor inputs to improve 
quality, 

04:25:00.490 --> 04:25:03.726
 and have made improvements to 
our algorithms by fuse ing step 

04:25:05.961 --> 04:25:10.892
user corrections together.he 
result of this hard work, over 

04:25:11.103 --> 04:25:13.609
the past year, is 
 a reduction in our bike ing 

04:25:14.221 --> 04:25:18.554
precision error rates from 11% 
 error in early 2015 down to 4% 

04:25:18.676 --> 04:25:21.108
error as of now.  And these 
 changes will be rolling out now

04:25:22.610 --> 04:25:27.933
.inally, we've added stride 
length calibration to the 

04:25:27.934 --> 04:25:30.180
 fifth platform which we hope 

04:25:30.472 --> 04:25:34.231
 Fit platform which we hope will
 benefit nonGPS Android Wear 

04:25:34.416 --> 04:25:37.155
 devices.  Now if a user goes 
running, initially with their 

04:25:37.352 --> 04:25:40.478
 phone and watch which has -- 
the phone which has GPS and 

04:25:40.479 --> 04:25:44.021
 the watch which doesn't, the 
two will calibrate together by 

04:25:44.416 --> 04:25:47.052
-- and generate a stride model, 
and then they'll get 

04:25:47.053 --> 04:25:49.988
 accurate distance and pace e
stimates running without their 

04:25:50.199 --> 04:25:54.107
 phone, just with their nonGPS 
Android Wear device.

04:25:57.628 --> 04:26:01.661
       Now that we've looked at 
some basic fitness tracking 

04:26:01.662 --> 04:26:04.909
 examples, I want to talk about 
owsh push this                

04:26:04.910 --> 04:26:08.450
our push this year into real    
 realtime fitness tracking.  Why

04:26:08.451 --> 04:26:12.786
 is realtime so important 
 when building a motivate ing 

04:26:12.872 --> 04:26:15.102
fitness experience?
       Well, when I look at 

04:26:15.103 --> 04:26:16.910
fitness         fitness apps out
 there and I 

04:26:16.911 --> 04:26:21.570
 look at a lot out there, I see 
they adopt this framework.  

04:26:21.571 --> 04:26:24.885
 They start with a imoal of the 
             goal of the user.  

04:26:24.886 --> 04:26:27.620
For example, I'd like 
 to lose 10 pounds, I'd like to 

04:26:27.819 --> 04:26:31.039
sleep better, or I'd like to 
 finish a half marathon.  They 

04:26:31.445 --> 04:26:33.269
recognize that in order to 
 accomplish this goal, they need

04:26:33.270 --> 04:26:36.505
 to encourage a pattern of 
 motivate ing actions so that 

04:26:36.813 --> 04:26:40.739
the user achieves the result 
 that they desire.  Let's drill 

04:26:40.809 --> 04:26:47.193
into the motivate ing actions. 
are three pillars of wellness, 

04:26:47.379 --> 04:26:49.619
exercise, 
 nutrition, and recovery.  

04:26:49.620 --> 04:26:52.837
Recovery we mean to mean sleep 
 and medication            

04:26:53.651 --> 04:26:55.681
meditation.  These pillars 
        pillars do not operate i

04:26:55.970 --> 04:26:57.177
ndependently             
 independently, and behavior in 

04:26:57.178 --> 04:26:59.915
one needs to be balance ed 
 against the other.  By getting 

04:27:00.110 --> 04:27:02.839
a holistic view of what's 
 going on in each of these areas

04:27:03.360 --> 04:27:06.322
, injure app can more 
 intelligently and insightfully 

04:27:06.525 --> 04:27:08.751
present suggestions and 
 knowledge based on a change ing

04:27:09.216 --> 04:27:13.392
 fitness context in realtime. 
example, a sleep app might 

04:27:13.610 --> 04:27:15.899
observe that you sleep 
 better when you exercise..or 

04:27:16.306 --> 04:27:20.162
when you eat less sugar in the 
 evening.  An exercise app may 

04:27:20.650 --> 04:27:23.293
suggest exercise based on 
 your logged nutrition data so 

04:27:23.495 --> 04:27:27.523
that you meet your weightloss 
 goals., that in all of these 

04:27:27.618 --> 04:27:30.656
cases, timely iness is 
 important.  The best time to 

04:27:30.967 --> 04:27:34.644
coach and motivate a user is 
 immediately in response to an 

04:27:35.004 --> 04:27:38.543
action that they have taken 
 in relation to their fitness.

04:27:39.255 --> 04:27:43.609
       So good apps have an in-b
uilt awareness of the users 

04:27:43.610 --> 04:27:45.819
 overall fitness context.  One 
of our partners Lifesum makes 

04:27:46.232 --> 04:27:48.863
 heavy use of these principles 
through their application and 

04:27:49.065 --> 04:27:52.468
 they integrate deeply with the 
fifth platform API              

04:27:53.092 --> 04:27:54.821
      Fit platform APIs and as a

04:27:54.822 --> 04:27:57.441
 result they see double 
retention rates for users 

04:27:57.541 --> 04:28:00.572
connected 
 to fifth       Fit versus users

04:28:00.864 --> 04:28:04.109
 not connected to Fit. are the 
APIs we've added to let you 

04:28:04.702 --> 04:28:06.643
respond in 
 realtime to a change ing 

04:28:06.644 --> 04:28:10.463
fitness context for your user.  
 First, it's realtime data 

04:28:10.464 --> 04:28:13.304
update notifications had.  It 
 allows you to be notified for 

04:28:14.221 --> 04:28:16.970
certain data-types in the fit   
 fitness store when they change.

04:28:17.061 --> 04:28:19.773
       The second is realtime 
session notifications.  It's 

04:28:19.979 --> 04:28:22.702
 actually been in the Fit 
platform for a while, but we'd 

04:28:22.869 --> 04:28:26.022
 like to talk about it today.  
It allows you to be notified 

04:28:26.527 --> 04:28:30.574
 that the user has started or 
finished a workout tracked in 

04:28:30.772 --> 04:28:34.033
 a third party application.
       Finally realtime activity

04:28:34.034 --> 04:28:36.852
 recognition.  Coming soon 
 to Android Wear devices to 

04:28:37.244 --> 04:28:40.775
detect the unset activity to 
 launch into your activity acti

04:28:40.885 --> 04:28:47.523
ve tracking experience. first 
API, realtime data update note 

04:28:47.719 --> 04:28:49.719
of courses.  
 This allows us to build the 

04:28:49.835 --> 04:28:53.670
following experience.  Say I 
 had an am impromptu pizza and I

04:28:53.671 --> 04:28:58.058
 exceeded my calorie intake 
 goal for the day.  I get a 

04:28:58.206 --> 04:29:00.206
notification from the weight 
 scale app telling me exercise 

04:29:00.225 --> 04:29:03.167
is needed to keep you on 
 track to meet your weight loss 

04:29:04.691 --> 04:29:07.394
goal.
        &gt;&gt; DAN AMINZADE:  I do 

04:29:07.503 --> 04:29:11.042
admit I have a weakness for  
that looked pretty delicious, 

04:29:11.043 --> 04:29:13.370
let's see how we 
 could build something like that

04:29:13.371 --> 04:29:17.116
 example that Muz just 
 describe ed.  We want to 

04:29:17.634 --> 04:29:20.563
describe to updates     dates.  
We create a 

04:29:20.564 --> 04:29:22.486
 PendingIntent.  This is 
typically a PendingIntent for an

04:29:23.590 --> 04:29:26.728
call into your app whenever 
 an update to one of these data 

04:29:26.920 --> 04:29:28.981
types occurs.
       What you then do is 

04:29:29.282 --> 04:29:32.323
create a Data Update Listener 
 Registration Request, which is 

04:29:32.522 --> 04:29:34.522
a lot

04:29:35.653 --> 04:29:37.060
 of -- it is a pretty 
 dedescriptive name, and we're 

04:29:37.061 --> 04:29:41.598
going to pass in the type of 
 data that we'd like to describe

04:29:41.599 --> 04:29:44.877
 to updates for, so in this 
 case nutrition, we're 

04:29:45.078 --> 04:29:46.894
interested in meals being logg
ed.  

04:29:46.895 --> 04:29:49.323
 Then we pass in the 
PendingIntent we create ed.  

04:29:49.324 --> 04:29:52.253
Then finally 
 we call this registered data 

04:29:52.254 --> 04:29:54.291
update             data update 
listener method, and we 

04:29:54.292 --> 04:29:57.211
 pass in the client and request.
  Then we get a update with 

04:29:57.212 --> 04:29:59.671
 the next logged meal.  Of 
course, you can register for 

04:29:59.672 --> 04:30:01.672
up   to all different kinds of 
data types

04:30:04.785 --> 04:30:04.864
.  For example, 
 if I want to be notified the 

04:30:04.865 --> 04:30:07.266
user steps on the scale and 
 logs a new weight, I can do 

04:30:07.763 --> 04:30:10.184
that with type weight.  And 
 here are actually all of the 

04:30:10.397 --> 04:30:12.940
data types that support real    
 realtime update, pretty much 

04:30:13.041 --> 04:30:18.027
that anything that isn't up  
 update ed super frequently. 

04:30:18.087 --> 04:30:20.370
second API, realtime session 
up  

04:30:20.371 --> 04:30:23.410
 update notifications allows, 
for example, a nutrition app 

04:30:23.618 --> 04:30:26.369
 to be notified that the user 
just finished a workout 

04:30:26.370 --> 04:30:28.496
 session.  So say you just 
finished a weight lifting 

04:30:28.814 --> 04:30:30.536
session       
 session, your nutrition app can

04:30:30.537 --> 04:30:35.202
 tell you, it's time to get 
 a high-protein meal in to 

04:30:35.595 --> 04:30:38.249
maximize muscle growth.  Or say 
a 

04:30:38.250 --> 04:30:41.349
 hydration app, it can suggest 
rehydrate ing immediately after 

04:30:43.016 --> 04:30:46.508
 finishing a 21 minute run 
outdoors. been so hot here, I 

04:30:46.622 --> 04:30:48.622
think we 
 can all use hydration reminder,

04:30:48.751 --> 04:30:51.688
 even when we haven't been 
 running, just walking around 

04:30:51.886 --> 04:30:54.512
outside.  So let's build that 
 one.  Similar API to the one we

04:30:54.513 --> 04:30:57.156
 just looked at with the 
 history API.  But here we're 

04:30:57.366 --> 04:31:00.027
going to use the sessions API 
 because we're interestedded in 

04:31:00.133 --> 04:31:02.886
registering for updates when 
 a session starts or ends.  So 

04:31:03.089 --> 04:31:05.135
again we create a 
 PendingIntent that we'd like to

04:31:05.136 --> 04:31:08.182
 fire when a new session 
 begins or ends.  And then we 

04:31:08.183 --> 04:31:10.019
call this register for session 

04:31:10.020 --> 04:31:12.919
 sessions method in the sessions
 API, and now whenever the 

04:31:12.920 --> 04:31:16.894
 user starts or ends a workout, 
the PendingIntent will fire 

04:31:16.895 --> 04:31:18.836
 and intent will be delivered to
 our app.  If you want to 

04:31:18.837 --> 04:31:21.042
 get more information on that 
session, you can actually 

04:31:21.043 --> 04:31:23.718
 extract it from out of the 
intent, so here I'm pulling out 

04:31:23.924 --> 04:31:26.811
 the start and end time, and 
then also the type of workout 

04:31:27.017 --> 04:31:29.764
 so whether it was a run or bike
 ride or weight lifting 

04:31:29.765 --> 04:31:31.977
 session, then I can put that 
into the notification like the 

04:31:32.503 --> 04:31:35.235
 one that Muz just showed.ne 
excite ing new development 

04:31:35.450 --> 04:31:38.225
coming to the Google Fit 
 platform this year is we're 

04:31:38.226 --> 04:31:41.248
going to allow your app to 
 register not only for explicit 

04:31:41.249 --> 04:31:43.766
sessions that the user 
 initiate, but also for implicit

04:31:43.767 --> 04:31:46.155
 sessions.  These are ones 
 that are automatically detected

04:31:46.156 --> 04:31:49.533
 by our platform.
       So what it means is that 

04:31:49.650 --> 04:31:53.342
your app can respond in real    
 realtime to a user's fitness 

04:31:53.635 --> 04:31:56.589
activity.  If I just lace up 
 my shoes and start running, my 

04:31:56.868 --> 04:31:58.845
favorite run tracking app 
 can just start up automatically

04:31:58.846 --> 04:32:01.697
 on my watch.  So I'm going 
 to try to show you a demo of 

04:32:01.916 --> 04:32:04.837
how that works.  I'm not 
 really properly dressed for 

04:32:05.145 --> 04:32:08.427
running, but I'm going to do a 
 little run around here.  Okay. 

04:32:08.687 --> 04:32:13.645
 I just felt my wrist vibe 
 brait which means Strava should

04:32:13.646 --> 04:32:15.968
 have started on the watch, 
 let's go over here and take a 

04:32:16.090 --> 04:32:19.361
look.  There we go.  You see 
 that Strava is now recording my

04:32:19.362 --> 04:32:21.274
 run.
       (Applause).

04:32:21.275 --> 04:32:24.407
                     And I will 
post that on Strava later, so I 

04:32:24.513 --> 04:32:30.516
hope you me some kudos.  Here 
you go.

04:32:30.517 --> 04:32:33.023
        &gt;&gt; MUZ MUSTOF:  Awesome.
  So we got a couple of 

04:32:33.024 --> 04:32:35.857
 really -- three actually really
 excite ing new features 

04:32:35.858 --> 04:32:41.511
 coming on Android Wear toward 
the end of the year.  We've 

04:32:41.512 --> 04:32:50.196
 added a Bhat API          beat 
to beat API in Android M.  It 

04:32:50.409 --> 04:32:52.015
computes heart 
 rate vary iability ies which is

04:32:52.016 --> 04:32:55.261
 a proxy for stress levels for 
 the user.

04:32:55.371 --> 04:32:59.916
       Second, we're adding a 
ProfileApi, this allows you to 

04:33:00.826 --> 04:33:04.704
 easily onboard your new users 
by reading age, gender, 

04:33:04.705 --> 04:33:07.855
 heights, and weights from the 
fifth platform.  Finally 

04:33:08.165 --> 04:33:12.592
                         Fit 
platform.  Always goals, 

04:33:12.593 --> 04:33:14.840
 allowing you to show the 
progress against that step goal 

04:33:14.841 --> 04:33:19.307
 and active time, distance and 
calorie goals as well from 

04:33:19.308 --> 04:33:22.842
 Google Fit.here is another 
excite ing feature that some of 

04:33:23.150 --> 04:33:24.662
you 
 guys might have seen at the 

04:33:24.663 --> 04:33:26.906
sandbox already.  Of when I go 
 to the gym, I notice that a lot

04:33:26.907 --> 04:33:29.851
 of people are still using 
 an old-school pen and paper to 

04:33:30.046 --> 04:33:34.318
log their exercise, their 
 rep, their weights.  It seems a

04:33:34.319 --> 04:33:40.374
 bit crazy in 2016.  Well, 
 Google Fit and Android Wear did

04:33:40.375 --> 04:33:43.409
 count reps for you for 
 three specific exercises, 

04:33:43.817 --> 04:33:46.457
push-ups, sit-ups and squats but

04:33:46.458 --> 04:33:49.479
 only if you told the app in 
advance what you were doing.

04:33:49.568 --> 04:33:53.138
       This is still somewhat 
limited and cumbersome.  Now 

04:33:53.139 --> 04:33:55.910
 we've got something better.  So
 I'm going to show you a 

04:33:55.911 --> 04:33:57.911
 demo.

04:34:04.239 --> 04:34:08.476
        &gt;&gt; DAN AMINZADE:  Oh, 
come on.  Give me a break 

04:34:08.477 --> 04:34:13.331
 (Laughing).kay.  So I'm going 
to the Google 

04:34:13.332 --> 04:34:17.665
 Fit strength training section. 
 And I haven't told it the 

04:34:17.666 --> 04:34:19.989
 exercise I'm about to do.

04:34:29.664 --> 04:34:31.664
        &gt;&gt; DAN AMINZADE:  Come 
on.

04:34:31.899 --> 04:34:33.565
       (Applause).
                     He's 

04:34:33.566 --> 04:34:35.566
working hard for you guys.
        &gt;&gt; MUZ MUSTOF:  As you 

04:34:35.731 --> 04:34:41.536
can see it detected bicep 
 curls with 100% and counted the

04:34:41.537 --> 04:34:46.013
 reps.  It was 15 pounds, so 
 I'll just log that.

04:34:46.226 --> 04:34:48.440
       Let's do another 
exercise, one which involves the

04:34:48.441 --> 04:34:52.706
 leg   
 legs.  Note that I can take 

04:34:53.696 --> 04:35:02.390
some time just kind of setting 
 up.good form.not (Laughing).

04:35:11.390 --> 04:35:14.107
  You can see it 
 got dead lift.

04:35:23.628 --> 04:35:26.329
                     If a rep is
 missed or an exercise isn't 

04:35:26.647 --> 04:35:28.254
correct for 
 whatever reason, we will learn 

04:35:28.255 --> 04:35:33.818
from that mistake and become 
 trained to the user's exercise 

04:35:33.819 --> 04:35:35.819
motion.  We aim to 
 seamlessly track a whole 

04:35:35.849 --> 04:35:37.761
workout with minimal user input.

04:35:37.762 --> 04:35:40.698
 We're planning an API towards 
the end of this year and 

04:35:40.699 --> 04:35:42.925
 we're looking for partners.

04:35:47.163 --> 04:35:49.811
        &gt;&gt; DAN AMINZADE:  All 
right.  That's our overview of 

04:35:49.812 --> 04:35:52.238
 the Google Fit platform.  
Before we wrap up, we just want 

04:35:53.518 --> 04:35:56.578
 to thank all of our part ners 
already using the Google Fit 

04:35:57.067 --> 04:35:59.410
 platform for inspire and lead 
people around the world to 

04:35:59.411 --> 04:36:03.144
 lead more healthy and active 
lifestyles.  At the end of the 

04:36:03.145 --> 04:36:05.291
 day this talk isn't really 
about PendingIntent and broad 

04:36:07.936 --> 04:36:11.065
extended          extending 
life  ves and so we hope 

04:36:11.066 --> 04:36:13.584
 you'll be able to get out there
 and build the next 

04:36:13.585 --> 04:36:16.426
 generation of fitness 
experiences on Android.  Thanks 

04:36:16.427 --> 04:36:17.842
so 
 much for your time and 

04:36:17.843 --> 04:36:19.067
attention.  Feel free to contact
 us 

04:36:19.068 --> 04:36:21.068
 with any questions.  Thank you.

05:03:15.861 --> 05:03:16.476
Designing &amp; Developing for the 
Daydream Controller.

05:04:24.864 --> 05:04:25.240
Designing &amp; Developing for the 
Daydream Controller.

05:08:11.865 --> 05:08:13.865
Designing &amp; Developing for the 
Daydream Controller.

05:08:26.367 --> 05:08:27.374
(‚ô´ ‚ô´ ‚ô´)
     &gt;&gt; YOU GOOD?

05:08:27.375 --> 05:08:29.375
&gt;&gt; BASHEER TOME: YES. 

05:08:30.976 --> 05:08:34.088
 YES.  WELCOME TO OUR SESSION.  
 IF YOU'RE HERE TO LEARN ABOUT 

05:08:34.089 --> 05:08:36.871
THE DAY AGREEMENT CONTROLLER AND
 HOW TO DESIGN AND LEARN HOW TO 

05:08:36.872 --> 05:08:40.072
DEVELOP IT, YOU'RE IN THE RIGHT 
PLACE.  WHAT WE'LL DO THIS 

05:08:40.073 --> 05:08:44.798
SESSION IN THREE MAIN CHAPTERS, 
HOW, WHY, WHAT.  WE'LL DIVE 

05:08:44.799 --> 05:08:47.881
BRIEFLY IN THE DESIGN OF THE 
CONTROLLER ITSELF, WALK THROUGH 

05:08:47.882 --> 05:08:53.320
THE TECHNICAL CONCEPTS ON HOW TO
 IMPLEMENT THE CONTROLLER 

05:08:53.321 --> 05:08:55.471
SUPPORT UNITED NATIONSTY IN     

05:08:58.494 --> 05:09:01.586
             IN UNITY C++ AND 
WE'LL SHOW WHAT THIS INPUT 

05:09:01.587 --> 05:09:04.475
DIVIDE, WHAT IT CAN REALLY DO 
FROM SCHELL 

05:09:28.053 --> 05:09:29.866
GAMES.    
This is going to be great for so

05:09:29.867 --> 05:09:34.972
 meanings, VV, and has a ton of 
-- has so much potential.  

05:09:34.973 --> 05:09:39.567
That's what makes it a 
compelling experience to so many

05:09:39.568 --> 05:09:41.281
 people.  For many people, the 
applications you're building 

05:09:41.282 --> 05:09:43.869
right now, they're going to be 
some of the first experiences in

05:09:44.119 --> 05:09:46.541
 VR.  The more we thought about

05:09:49.681 --> 05:09:51.451
 that, the more we realized that
 we needed to build a better, 

05:09:51.452 --> 05:09:53.452
more mammer   

05:09:56.718 --> 05:09:59.281
     immersive way to be 
involved in VR.  You wouldn't 

05:09:59.282 --> 05:10:04.450
have to keep a hand up like they
 do in some stackable 

05:10:04.451 --> 05:10:06.451
experiences

05:10:07.670 --> 05:10:07.830
 of Cardboard.  We made this 
Daydream Controller.  This 

05:10:07.831 --> 05:10:10.079
doesn't float in the air like it
 does on this slide.  It is 

05:10:10.080 --> 05:10:14.698
something to hold in your hand 
that we have created for our new

05:10:16.465 --> 05:10:19.482
 Daydream Controller platform to
 help people.  Enabling you to 

05:10:20.371 --> 05:10:23.083
explore and manipulate things 
naturally by letting you 

05:10:23.084 --> 05:10:26.392
directly point at and click on 
objects, hold a tool in the 

05:10:26.393 --> 05:10:29.656
virtual world and navigate 
venues.    

05:10:29.657 --> 05:10:32.690
We spent a lot of time and 
energy in ord to create 

05:10:32.691 --> 05:10:36.439
something that is accessible and
 simple enough for new users and

05:10:36.440 --> 05:10:40.371
 people of all kinds of 
interests and enables everyone 

05:10:40.679 --> 05:10:45.653
to express themselves 
creatively, directly, precisely,

05:10:45.958 --> 05:10:48.277
 I went accurately and doesn't 
force them to lug around 

05:10:48.278 --> 05:10:52.270
something huge.  The goal was a 
powerful, simple tool that fits 

05:10:52.271 --> 05:10:57.276
right in your pocket.  Let's 
start from the top.    

05:10:57.277 --> 05:10:59.878
The Daydream Controller has a 
curved, clicking touch pad 

05:11:00.285 --> 05:11:05.185
allowing people to make fine 
grain manipulations and request 

05:11:05.186 --> 05:11:08.639
I can swipes for scrolling 
allowing them to make click 

05:11:08.640 --> 05:11:11.197
selections without lifting the 
thumb.  How does that work?  If 

05:11:11.198 --> 05:11:13.272
you look at the side of the 
controller we have achieved this

05:11:13.389 --> 05:11:17.470
 by embedding a tack till 
clickable switch directly by the

05:11:17.685 --> 05:11:22.063
 touch pad allowing the top 
housing to flex when you apply 

05:11:22.064 --> 05:11:25.184
pressure with your finger.  
There's something that is not 

05:11:25.185 --> 05:11:29.574
too unfamiliar for laptop touch 
top users.    

05:11:29.575 --> 05:11:34.475
Below the touch pad, there are 
two buttons, the home and app.  

05:11:34.476 --> 05:11:36.972
The home button  , it is 
reserved entirely for this 

05:11:36.973 --> 05:11:39.777
system, pressing it takes people
 immediately back to the home 

05:11:39.778 --> 05:11:43.571
world while holding it down for 
a little bit longer let's them 

05:11:43.572 --> 05:11:47.687
reorient their view.    
The app button, as you can 

05:11:47.688 --> 05:11:50.929
guess, has functional till 
reserved for app developers.  

05:11:50.930 --> 05:11:54.669
For example, you can use it to 
enable switching from a hammer 

05:11:54.670 --> 05:11:59.492
to a saw.  More often than not, 
to open up a menu.  In some 

05:12:00.029 --> 05:12:04.080
cases, undoing a failed Pancake 
flip.    

05:12:04.081 --> 05:12:06.976
Since your phone is inside of 
the viewer and audio is an 

05:12:06.977 --> 05:12:10.484
important part of the VR we have
 put hardware volume buttons 

05:12:10.485 --> 05:12:14.106
directly in your hand to make it
 so that people can reach them 

05:12:14.778 --> 05:12:19.889
conveniently and quickly.  
However, the most important and 

05:12:19.890 --> 05:12:21.181
foundational aspect of the 
controller is the ability to 

05:12:21.182 --> 05:12:25.596
directly point in 3D space 
around you.  We use a highly 

05:12:25.597 --> 05:12:32.474
calibrated access IMU combining 
and infusing data from      to 

05:12:32.475 --> 05:12:35.781
output in absolute rotation 
value in VR space.    

05:12:35.782 --> 05:12:39.680
This means that instead of 
relying entirely on a touch pad 

05:12:39.681 --> 05:12:43.093
to scroll through lists locked 
to the view port or turning your

05:12:43.302 --> 05:12:45.670
 head in every direction to 
click on something, up point 

05:12:45.671 --> 05:12:50.380
directly at it instead with your
 hand and click.   Because it is

05:12:50.590 --> 05:12:53.000
 on a chip you can do that 
anywhere around you,   be it 

05:12:53.001 --> 05:12:59.691
straight ahead, right, Ben     
behind you.  All of that the 

05:12:59.692 --> 05:13:02.794
without having to set up an 
extra camera or tracking system.

05:13:04.998 --> 05:13:08.120
and in hardware and software, we
 have been developing both in 

05:13:08.121 --> 05:13:13.482
parallel as a team together.  
Here is one of our happy early 

05:13:13.483 --> 05:13:16.499
prototypes that we have used in 
development because of its 

05:13:16.500 --> 05:13:20.697
similarity and size we lovingly 
call it the garage door opener. 

05:13:21.086 --> 05:13:23.870
 Is various teams around the 
world have been using these to 

05:13:23.871 --> 05:13:28.489
test and prototype software and 
hardware stack.  As we got 

05:13:28.767 --> 05:13:31.081
deeper into the project we 
realized we couldn't mail one of

05:13:31.082 --> 05:13:34.114
 these to everyone out there and
 we with would love for both 

05:13:34.792 --> 05:13:40.086
everyone here in person as well 
as other developers to tin 

05:13:40.087 --> 05:13:42.672
corporate this input into your 
development process while 

05:13:42.673 --> 05:13:51.205
creating the new VR apps.  Br
uno, we found a better way, it 

05:13:51.206 --> 05:13:54.496
is in your pocket.  Most mobile 
phones today contain all of the 

05:13:54.698 --> 05:13:57.976
hardware you need to replicate 
the controller minus the click. 

05:13:57.977 --> 05:14:02.186
 We created an app which you'll 
be able to download called the 

05:14:02.187 --> 05:14:06.088
controller immolator and 
although the orientation sensors

05:14:06.089 --> 05:14:09.592
 may not be as precise sore 
calibrated as in the final

05:14:09.593 --> 05:14:12.499
hardware spec it should be a 
great alternative to get off the

05:14:12.796 --> 05:14:15.974
 are prototyping fast.    
With a second phone you'll be 

05:14:15.975 --> 05:14:19.282
able to start up the app 
creating a hot spot and connects

05:14:19.283 --> 05:14:23.888
 to the viewer to broadcast 
input in realtime.  That said, 

05:14:23.889 --> 05:14:29.448
because we're working in a VR 
world that's only tracked by a 

05:14:29.449 --> 05:14:31.590
rotation, you are essentially 
blindfolded while in there and 

05:14:31.591 --> 05:14:34.701
you're holding a phone that is 
way bigger than the hardware 

05:14:34.702 --> 05:14:37.395
controller spec.  We have 
created a sticker overlay to 

05:14:37.396 --> 05:14:40.949
guide your fingers.  The 
capacity comes you have to 

05:14:40.950 --> 05:14:44.858
cleanly and still gives you 
right amount of tactile feedback

05:14:45.217 --> 05:14:48.206
 to find the real size life 
sized buttons on screen.  We 

05:14:48.207 --> 05:14:52.402
have the scissors and papers and
 lasers files and a link to 

05:14:52.403 --> 05:14:55.196
other   material, all of that is
 going to be in the download 

05:14:55.197 --> 05:14:58.690
itself and online under the 
developer site.  I have a batch 

05:14:58.691 --> 05:15:00.691
of them premade with

05:15:04.117 --> 05:15:08.383
 me.   After this talk, I'll sit
 outside of the tent if you want

05:15:04.117 --> 05:15:07.510
 to grab one, ask questions.  
Bruno will show you how to 

05:15:07.706 --> 05:15:10.394
implement the SDK and how to 
enable up to use both this 

05:15:10.395 --> 05:15:13.906
immolator and the final hardware
 in your apps and switching 

05:15:13.907 --> 05:15:17.102
between
the two should actually be 

05:15:17.103 --> 05:15:21.256
seamless and require almost no 
coaching.    

05:15:21.257 --> 05:15:25.309
Before I go, I wanted to leave 
you with a pretty simple 

05:15:25.310 --> 05:15:28.419
question, with this controller 
we're excited about the 

05:15:28.420 --> 05:15:32.890
possibilities you'll come up 
with.  You could hold a tennis 

05:15:32.983 --> 05:15:35.211
racket, a whisk, frisbee, 
steering wheel, so much more in 

05:15:35.212 --> 05:15:37.963
your pocket.    
What do you make in VR?

05:15:38.225 --> 05:15:40.225
Thanks.

05:15:46.618 --> 05:15:54.948
In my section of the talk we're 
going to speak a lot about goad.

05:15:54.949 --> 05:15:56.949
  What

05:15:58.344 --> 05:15:59.642
 is it?  From the left side you 
have the user, and say on the 

05:15:59.643 --> 05:16:04.245
right side you have some 
abstract concept, happiness, the

05:16:04.355 --> 05:16:09.326
 only thing that is standing 
between those two is the code 

05:16:09.327 --> 05:16:12.850
that we write.  That's why code 
is so important.  Before we talk

05:16:13.124 --> 05:16:16.812
 about code, let's go briefly 
into the things you will need to

05:16:16.955 --> 05:16:19.852
 write code for the controller. 
 If you have the controller on 

05:16:19.853 --> 05:16:23.837
one side and you have the phone 
on the other, how do these two 

05:16:23.838 --> 05:16:30.051
things communicate.  Anyone have
 a guess?  Blue tooth, a   great

05:16:30.052 --> 05:16:32.344
 guess.    
It is Bluetooth low energy, the 

05:16:32.345 --> 05:16:36.259
phone talks to the controller 
and the app is on the phone with

05:16:36.571 --> 05:16:39.054
 the VR energy.   If you're not 
exactly the type of developer 

05:16:39.055 --> 05:16:43.853
that wakes up every morning 
thinking yeah, let's write some 

05:16:43.854 --> 05:16:48.346
low level blue tooth code, don't
 worry, you won't have to.  You 

05:16:48.347 --> 05:16:52.945
actually because of the Google 
VR services is a layer that 

05:16:53.259 --> 05:16:55.366
talks blue tooth directly to the
 controller so your app doesn't 

05:16:55.569 --> 05:17:00.062
have to.  Instead your app 
interacts directly with the 

05:17:00.063 --> 05:17:03.269
Google VRSDK and that does the 
hard work of can communicating 

05:17:03.527 --> 05:17:06.703
with the Google services and 
ultimately to the controller.  

05:17:08.754 --> 05:17:11.355
available later only in the 
year.  If you want to -- if you 

05:17:11.356 --> 05:17:14.261
want to start developing right 
now you can.  All you have to do

05:17:14.458 --> 05:17:22.268
 is assemble your own kit.  Your
 dev kits has a viewer, you also

05:17:23.166 --> 05:17:29.059
 need an XX6P as the phone and 
you need to install the Android 

05:17:29.060 --> 05:17:31.679
developer on that phone.    
Instead of a real controller, 

05:17:31.680 --> 05:17:36.563
use a secondary phone as a 
controller immolator.  You need 

05:17:36.564 --> 05:17:40.761
one of these and two phones.    
From the perspective of 

05:17:40.932 --> 05:17:43.586
development, not much changes, 
you may worry do I have to write

05:17:43.587 --> 05:17:47.794
 code especially for the 
immolator and change everything?

05:17:47.795 --> 05:17:51.482
  No.  The goal of VR services 
deals with the code that 

05:17:51.483 --> 05:17:54.592
actually speaks to the 
controller so in terms of SDK, 

05:17:54.593 --> 05:17:58.278
same thing, you don't have to 
worry if you're using the 

05:17:58.279 --> 05:18:03.993
immolator or controller.  .  
SDK comes in several flavors, 

05:18:03.994 --> 05:18:05.994
you can go to

05:18:10.384 --> 05:18:12.491
 developerses/VR to start 
developing today.  You don't 

05:18:12.492 --> 05:18:14.492
have

05:18:16.897 --> 05:18:19.363
 to wait for the real 
controller.    

05:18:16.897 --> 05:18:17.702
The features, they're common 
regardless of what you use, 

05:18:17.703 --> 05:18:24.812
there are five main features, 
orientation, gyroscope, , a 

05:18:24.813 --> 05:18:29.815
touch pad, several buttons.  
Let's go in details on each.   

05:18:30.113 --> 05:18:35.220
Orientation, perhaps the most 
intuitive one.  Other         

05:18:35.221 --> 05:18:38.999
Orientation, where is the 
controller pointing in 3D space.

05:18:39.239 --> 05:18:44.124
  It is a controller not only 
because this, it is a cool word 

05:18:44.125 --> 05:18:49.606
but it means 3¬∫ of freedom.  
Which 3¬∫ of freedom are those?  

05:18:49.607 --> 05:18:52.656
That is the YA, where you point 
the controller, the pitch, also 

05:18:52.657 --> 05:18:56.013
the elevation and the roll, 
which is also called twist or 

05:18:56.014 --> 05:18:59.715
bang.  Those three angles, the 
3D freedom of the controller.  

05:19:05.521 --> 05:19:08.339
This is an interesting 
mathematical entity.  In most 

05:19:08.427 --> 05:19:15.551
cases, if you're using a math 
library or argyle           or a

05:19:15.552 --> 05:19:18.950
 game engine you can treat them 
as a black box or blue box.  

05:19:18.951 --> 05:19:21.756
They encode the rotation that 
you can apply to a vector.  If 

05:19:21.757 --> 05:19:24.533
you want to look inside of a 
vector, it is not that hard.  It

05:19:24.644 --> 05:19:30.594
 has a vector component, made up
 of X, Y, Z, it has a scaler 

05:19:30.595 --> 05:19:33.549
component and a fifth component,
 anyone know what that fifth 

05:19:33.550 --> 05:19:40.658
component is?  No.  It is magic.
  That's the only way I can 

05:19:40.886 --> 05:19:43.950
believe in how they work p.
That's what I thought in the 

05:19:44.666 --> 05:19:50.277
beginning.    as I studied them 
I realized that the scientific 

05:19:50.278 --> 05:19:54.468
truth is that they're 60% magic,
 the rest, it is not.  We 

05:19:54.469 --> 05:19:59.590
represent all of our partners in
 the right hand system, we have 

05:19:59.591 --> 05:20:07.981
with the X axis pointing right 
and Y, up and Z, back, a 

05:20:07.982 --> 05:20:12.082
standard coordinate system.    
The gyroscope, doesn't have to 

05:20:12.083 --> 05:20:14.670
do with where the controller is 
pointing but how it is moving.  

05:20:14.671 --> 05:20:18.985
In particular, it encodes the 
angular velocity of the 

05:20:18.986 --> 05:20:24.198
controller above each local axis
 t you have the controller flat 

05:20:24.199 --> 05:20:28.995
on the table.  It is rotating 
counter clockwise slowly, one 

05:20:28.996 --> 05:20:31.484
evolution, two seconds.  What do
 you read from that gyroscope in

05:20:31.764 --> 05:20:35.589
 this case?
The X and Z, it is zero, not 

05:20:36.185 --> 05:20:40.990
rotating there, the Y examine 
axis, what is the row    

05:20:44.315 --> 05:20:48.466
 rotational speed?  5, you're 
right.    

05:20:48.467 --> 05:20:52.414
The numbers are chosen in a 
coincidence.    

05:20:52.415 --> 05:20:55.288
This measures the force of 
acceleration on the controller 

05:20:55.289 --> 05:20:58.991
in each of the local axises.  It
 is combined with gravity just 

05:20:59.369 --> 05:21:01.576
like on the smartphone.  
Normally if the controller is 

05:21:01.577 --> 05:21:04.997
sitting on the desktop you 
probably will read something 

05:21:05.507 --> 05:21:09.017
like 09.80 because of the force 
of gravity, it is along the Y 

05:21:09.018 --> 05:21:12.921
axis.  If you ever read 000 you 
should be concerned.  It means 

05:21:12.922 --> 05:21:17.212
that the user is in outer space 
where there is no gravity or 

05:21:17.213 --> 05:21:20.709
worse that the user tossed the 
controller out the window and it

05:21:20.710 --> 05:21:24.709
 is in free fall towards the 
ground which you may say say 

05:21:24.710 --> 05:21:28.132
rage detected, would you like to
 play an easier level?  Also 

05:21:28.133 --> 05:21:31.622
order me a new controller.    
Lastly, we have the touch pad.  

05:21:31.623 --> 05:21:35.720
This is that circular area, top 
of the controller, and it is a 

05:21:35.721 --> 05:21:40.408
two dimensional surface, we use 
X and Y very creatively to 

05:21:40.409 --> 05:21:43.998
represent the position of the 
finger on that surface.    

05:21:43.999 --> 05:21:46.882
In order to represent 
coordinates we think of it as a 

05:21:46.883 --> 05:21:51.312
square.  We map 00 to the top 
left and 11 to the bottom right.

05:21:53.406 --> 05:21:59.417
the touch pad has a had clicker.
  You can touch the touch pad 

05:21:59.418 --> 05:22:02.310
and apply pressure to make it 
click.  Those two things, 

05:22:02.311 --> 05:22:05.007
they're different.  The buttons 
on the controller are the click 

05:22:05.008 --> 05:22:08.209
button, precisely this button 
that the user presses when they 

05:22:08.210 --> 05:22:11.723
apply pressure on to the touch 
pad.  You also have the app 

05:22:11.724 --> 05:22:15.306
button, the app button can be 
used to do whatever you want, 

05:22:15.307 --> 05:22:18.350
the menu, switching tools, 
whatever we want.    

05:22:18.351 --> 05:22:20.730
We have the home button on it's 
controller, reserved for the 

05:22:21.541 --> 05:22:23.622
system use.  That's how this 
goes back to the home screen.  

05:22:24.227 --> 05:22:27.131
That little thing on the side, 
out of the volume button  s  , 

05:22:27.132 --> 05:22:31.643
reserved to the system.  The 
click and app

05:22:32.230 --> 05:22:34.649
Buttons are available to the app
 and you can do whatever you 

05:22:34.650 --> 05:22:37.667
want for them.  The clicker, 
primary action in the app, 

05:22:37.668 --> 05:22:40.940
painting, drawing, shooting, 
selecting, grabbing, anything 

05:22:40.941 --> 05:22:44.558
like that.  The app button will 
be some secondary action or 

05:22:44.559 --> 05:22:47.451
bringing up a menu.    
Again, touch, it is different 

05:22:47.452 --> 05:22:50.241
from click and this is an 
important point.  on the 

05:22:50.242 --> 05:22:53.147
immolator, there is no such 
thing as clicking in touch pad 

05:22:53.498 --> 05:22:57.939
screen, on the smartphone screen
 you double tap to immolate the 

05:22:57.940 --> 05:23:00.564
click.  We'll give you these 
stickers to put on the 

05:23:01.063 --> 05:23:03.946
controller immolator to get more
 of a tactile feel of how it 

05:23:04.743 --> 05:23:08.706
works.    
Let's briefly go in the C++ SDK.

05:23:08.707 --> 05:23:11.853
  It is a great language, my 
favorite language.  The thing 

05:23:11.854 --> 05:23:14.650
is, it is a powerful language 
that has some responsibilities 

05:23:14.651 --> 05:23:17.674
that come with it.  How does 
this sentence end with great 

05:23:18.084 --> 05:23:22.966
power comes.       comes.... .  
Great if things that you have to

05:23:23.477 --> 05:23:26.863
 debug, that's C++, I like C++. 
Hopefully that won't happen to 

05:23:26.864 --> 05:23:31.972
you.  When your app talks to the
 C++ API it talks to the CPI by 

05:23:31.973 --> 05:23:36.955
of but lives in the other GSO.  
The reason why we do

05:23:40.281 --> 05:23:44.481
 that is because it is difficult
 to get two compilers to agree 

05:23:40.281 --> 05:23:44.475
on how to compile the C++.    
Instead the C++ API is living 

05:23:44.476 --> 05:23:49.677
entirely on your space, a 
wrapper around the CIPI.  You 

05:23:49.999 --> 05:23:53.242
can use it without worrying 
about compatibility.  That's 

05:23:53.243 --> 05:23:55.187
good.    
Let's go to code.  If you have 

05:23:55.188 --> 05:23:57.188
experience, you're thinking 
that's a

05:24:00.584 --> 05:24:02.290
 funny dialect of C++.  It is 
java.  In everything, it begins 

05:24:02.291 --> 05:24:07.293
in java.  Create, up first set 
the mode enabled, you enable the

05:24:07.388 --> 05:24:10.895
 of nice VR applications for the
 app.  You have the layout, what

05:24:11.395 --> 05:24:14.882
 used to be called the Cardboard
 layout.  You set the 

05:24:14.989 --> 05:24:18.498
presentation view as you are 
used to doing.  Next, this is an

05:24:18.590 --> 05:24:23.197
 important part.  You get the 
native context.  The GVR native 

05:24:23.198 --> 05:24:26.786
context, it is an opaque Pointer
 which is something that you 

05:24:26.787 --> 05:24:29.909
need to initial rise the 
controller.  When you're in the 

05:24:29.910 --> 05:24:33.192
C++ land, all you have to do is 
get that Pointer and store it 

05:24:33.193 --> 05:24:37.013
somewhere because you need it 
while initial rising the     

05:24:37.720 --> 05:24:44.707
               initializing the 
API.  After you do the full 

05:24:44.708 --> 05:24:46.610
options, you have the action, 
you have the options and 

05:24:46.611 --> 05:24:50.692
Pointer, forget about the 
Pointer then because it is only 

05:24:50.693 --> 05:24:57.125
used to synchronize the headset.
  After that, it is low 

05:24:57.126 --> 05:24:59.413
maintenance, oil changes once in
 a while, about I that I mean 

05:24:59.621 --> 05:25:01.621
pause and resume when the 
application is paused or

05:25:04.617 --> 05:25:06.725
Next, you can read the 
controller state p controller 

05:25:06.726 --> 05:25:09.694
state is probably the most 
complicated part because it 

05:25:09.695 --> 05:25:12.677
encodes all of the state of the 
controller at any given time.  

05:25:12.678 --> 05:25:16.297
We put together a team, a 
creative group of engineers and 

05:25:16.298 --> 05:25:18.931
told them to come up with a way 
to represent a structure that 

05:25:18.932 --> 05:25:22.844
would encode the controller 
state.  What we came up with, it

05:25:22.845 --> 05:25:28.849
 is instruct controller state.  
It is just a strut with data in 

05:25:28.850 --> 05:25:35.032
it.  Also we made the reach 
state method -- read state 

05:25:35.144 --> 05:25:37.243
method that reads that state.  
Its that simple, it doesn't need

05:25:37.345 --> 05:25:41.137
 to be complicated.  On the draw
 frame method, on the rendering 

05:25:41.138 --> 05:25:43.642
object, you have the read state 
and that gives you the latest 

05:25:43.643 --> 05:25:47.577
known state of the controller, 
then you process that in render.

05:25:51.051 --> 05:25:55.993
The state has orientation, gyro 
XL and those just mean the 

05:25:55.994 --> 05:25:59.682
current readings of the various 
sensors in the controller.  For 

05:25:59.683 --> 05:26:03.761
a touch pad, we have the touch 
that tells you if the user is 

05:26:03.762 --> 05:26:06.350
currently touching the touch pad
 or not.    

05:26:06.351 --> 05:26:09.498
We have what we call the event 
bullions or the transient and 

05:26:09.499 --> 05:26:12.504
those are the ones that tell you
 that a certain event just 

05:26:12.505 --> 05:26:16.376
happened.  Those are true for 
only one frame.  Up render the 

05:26:16.377 --> 05:26:18.800
frame, that's true.  Next time 
you render the frame, it is 

05:26:18.801 --> 05:26:21.188
false.  It just represents 
something that just happened.  

05:26:21.189 --> 05:26:24.815
The user just started to touch 
the touch pad or just stopped 

05:26:25.097 --> 05:26:27.803
touching the touch pad.  Of 
course you have the touch 

05:26:27.804 --> 05:26:30.720
position in X and Y as we 
explained before.    

05:26:30.721 --> 05:26:33.901
Button states, they work in a 
similar way.    

05:26:33.902 --> 05:26:36.823
You have the click button, app 
button, the state, you have the 

05:26:36.824 --> 05:26:41.022
events.  Recenterring is what 
the user does when they notice 

05:26:41.023 --> 05:26:44.899
the headset and controller are 
drifting apart.   They're no 

05:26:44.900 --> 05:26:47.094
longer center and they pick up 
the headset and face the wrong 

05:26:47.506 --> 05:26:51.689
way.  There is a gesture to do 
to make both of them recenter.  

05:26:51.690 --> 05:26:55.309
That's holding the home button, 
pointing forward and releasing 

05:26:55.310 --> 05:26:58.515
after a second.  The headset and
 controller will be recentered 

05:26:59.129 --> 05:27:02.333
to the same coordinate system.  

05:27:02.334 --> 05:27:05.518
Before and after.    
Basically if before the 

05:27:05.519 --> 05:27:14.050
coordinates system had die    dy
 verged, after they'll point 

05:27:14.051 --> 05:27:17.007
forward.  You don't actually 
need to do anything, the 

05:27:17.008 --> 05:27:20.940
coordinate systems are handled 
but if you want to, you can have

05:27:21.516 --> 05:27:24.325
 access to those variables and 
you main want to pause the game 

05:27:24.326 --> 05:27:28.017
for example when the user 
recenters.  We have the API 

05:27:28.129 --> 05:27:31.129
status, that tells you about the
 general health of the API.  We 

05:27:31.130 --> 05:27:34.543
have   control API, okay, 
everything is well.  The 

05:27:34.544 --> 05:27:37.738
unavailable, if the service is 
unavailable.  Obsolete, if the 

05:27:37.739 --> 05:27:40.535
client is obsolete.  Service 
obsolete, if the service is 

05:27:40.536 --> 05:27:42.536
obsolete. 

05:27:43.728 --> 05:27:50.332
 Zombie apocalypse and the 
undead are taking over the 

05:27:50.333 --> 05:27:53.246
planet.  That doesn't really 
exist, the controller will work 

05:27:53.247 --> 05:27:56.932
in case of a zombie apocalypse. 
 Action, if the controller is 

05:27:56.933 --> 05:27:58.933
connected to the phone, only 
nexted,

05:28:01.741 --> 05:28:02.145
 scanning, connected, 
connecting, connected.  The best

05:28:02.146 --> 05:28:05.433
 state is connected.    
I'll tell you how later, this 

05:28:05.434 --> 05:28:09.032
hases to do with saving the 
world -- has to do with saving 

05:28:09.033 --> 05:28:13.223
the world.  More on had that 
later.  You can download the 

05:28:13.352 --> 05:28:15.352
demo And look at the code that 
does those things.    

05:28:16.949 --> 05:28:19.548
We'll look at the

05:28:22.739 --> 05:28:28.450
 Unity and SDK, you import that 
in your package.  You nets a 

05:28:28.451 --> 05:28:30.938
prefab under the controller 
main.   All you have to do is 

05:28:30.939 --> 05:28:34.037
drag that prefab in your scene 
and then you have the access to 

05:28:34.038 --> 05:28:38.645
the control API.  In Unity you 
added things in the editor and 

05:28:38.646 --> 05:28:42.850
after you're happy you deploy it
 to the device and we support 

05:28:42.956 --> 05:28:46.462
that because you plug in the 
controller immolator directly 

05:28:46.667 --> 05:28:50.253
and have it work during the edit
 mode.  When you're happy, you 

05:28:50.254 --> 05:28:54.166
can deploy it to the phone and 
it will work via wi-fi.    

05:28:54.167 --> 05:28:57.033
Let's look at an example code.  
Let's see we have an on correct,

05:28:57.657 --> 05:29:01.058
 we want to match the 
controller.  What I need to do, 

05:29:01.059 --> 05:29:04.917
we have to set the objects local
 controller to the controller 

05:29:04.918 --> 05:29:08.379
rotation by calling the GVR, 
controller rotation.   That 

05:29:08.380 --> 05:29:11.282
simple.    
Suppose you want to have a 

05:29:11.283 --> 05:29:14.279
vector are controlling where the
 controller is pointing at.  We 

05:29:14.280 --> 05:29:20.548
have to multiply something to 
the vector and that something is

05:29:20.549 --> 05:29:23.567
 just UVR controller orientation
 where you multiply and get the 

05:29:23.568 --> 05:29:26.817
vector pointing in the same 
direction as the controller 

05:29:26.818 --> 05:29:31.184
pointed.    
Let's do some game, you try to 

05:29:31.185 --> 05:29:34.289
select the project in 3   D 
space, using the controller, you

05:29:34.393 --> 05:29:38.592
 just get a vector from the 
controller and then do the usual

05:29:38.593 --> 05:29:43.606
 cast to figure out which object
 was hit.  It is very 

05:29:43.607 --> 05:29:50.292
straightforward.    
Lastly, we have gyro and 

05:29:50.293 --> 05:29:52.293
Eccelometer, the same

05:29:54.305 --> 05:29:58.238
 format as we talked about 
before.  We have the C++, it is 

05:29:54.305 --> 05:29:56.648
touching, whether or not the 
user is touching currently and 

05:29:56.649 --> 05:29:59.381
than touchdown and it touch up. 

05:29:59.382 --> 05:30:04.711
Same thing for button  s  , same
 logic with the button, button 

05:30:04.712 --> 05:30:09.518
up, down, click is the name.  
App button up and down.    

05:30:09.519 --> 05:30:14.104
Then we have, of course, the GVR
 controller.  Same

05:30:18.503 --> 05:30:21.636
 thing, disconnected, 
connecting, connected, I 

05:30:18.503 --> 05:30:20.820
promised to tell you why that 
has anything to do with saving 

05:30:20.821 --> 05:30:24.581
the world.    
Imagine you have a game where 

05:30:24.582 --> 05:30:29.229
you try to save that nice little
 planet there, that's just 

05:30:29.230 --> 05:30:32.516
exactly like earth.   Suppose 
that there is this evil enemy, 

05:30:32.517 --> 05:30:36.929
you're trying to defend it from 
the moon.  That makes no sense. 

05:30:36.930 --> 05:30:38.930
 Let's say it is something 
that's can have definitely

05:30:40.267 --> 05:30:42.807
                     definitely 
not a moon.  You're trying to 

05:30:42.808 --> 05:30:48.343
save it from the enemy.  The 
finaller level, you're about to 

05:30:48.344 --> 05:30:52.036
deal the final blow and save the
 planet and then the controller 

05:30:52.158 --> 05:30:53.959
disconnects and they're sitting 
there unable to do anything, 

05:30:53.960 --> 05:30:58.452
that's the end of humanity as we
 know it.   Because we like 

05:30:58.453 --> 05:31:03.427
humanity, we should, this is how
 you save it.    

05:31:03.428 --> 05:31:06.854
Any time the controller state is
 anything other than the 

05:31:07.692 --> 05:31:10.559
connection to stay connected, 
that's when you pause the game 

05:31:10.560 --> 05:31:13.761
and let the user reconnect the 
controller to continue to play. 

05:31:14.441 --> 05:31:17.871
 We talked a bunch about all the
 features of the controller.  We

05:31:17.872 --> 05:31:25.448
 talked about the SDKs and again
 you can go to developer/VR now 

05:31:25.449 --> 05:31:28.559
and download the app if you 
want, you can get started 

05:31:28.560 --> 05:31:32.173
developing today.    
In the beginning I showed you 

05:31:32.174 --> 05:31:35.579
this.  Actually I lied a bit.  T
hat's not 100% true.  The only 

05:31:35.580 --> 05:31:38.468
thing that's standing between 
user and happiness, it is not 

05:31:38.469 --> 05:31:41.354
just code, there is more to 
happiness than code.  

05:31:41.355 --> 05:31:46.365
Surprisingly.  You actually need
 design.  If you're asking the 

05:31:46.366 --> 05:31:48.485
difference between code and 
design the way I like to think 

05:31:48.486 --> 05:31:54.272
about it, code is when you're 
doing the thing right.  Design, 

05:31:54.273 --> 05:31:57.385
it is when you're doing the 
right thing.  In order to talk 

05:31:57.386 --> 05:32:01.606
to you a bit more about how to 
do the right thing I would like 

05:32:01.607 --> 05:32:07.477
to welcome Ryan Hipple from 
Schell Games.    

05:32:11.679 --> 05:32:13.681
&gt;&gt; RYAN HIPPLE: Hello, everyone.

05:32:13.682 --> 05:32:18.371
I'm I'm Francisco Souki.    
&gt;&gt; I'm Ryan Hipple.    

05:32:18.372 --> 05:32:21.084
&gt;&gt; FRANCISCO SOUKI: We spent a 
month just make  ing cool stuff 

05:32:21.085 --> 05:32:24.879
for the controller.  We have 
made 17 demos and our goal was 

05:32:24.880 --> 05:32:27.654
to play around with the 
controller, see what feels right

05:32:27.775 --> 05:32:30.289
 and we're using the same the 
tools that would be available to

05:32:30.493 --> 05:32:37.298
 you today if you were to 
develop, the headset, the lamer 

05:32:37.299 --> 05:32:39.873
controller, the Unity making all
 of the games.    

05:32:39.874 --> 05:32:42.992
We'll take you through some of 
the demo we made and we learned 

05:32:42.993 --> 05:32:44.993
a lot from and

05:32:47.812 --> 05:32:48.976
 tell you about the design on my
 side and the code on Ryan's 

05:32:48.977 --> 05:32:53.480
side.  To start, I will say that
 like you heard these guys say, 

05:32:53.481 --> 05:32:56.389
this controller has a lot of 
sensors, a lot of data, gives 

05:32:56.710 --> 05:32:59.788
you a lot of power and me as a 
designer when I saw this I was 

05:33:00.083 --> 05:33:04.500
like this looks cool, I guess, 
yeah.  Ryan, you know how to 

05:33:04.501 --> 05:33:07.883
interpret this stuff, so my 
vision for this is itch a 

05:33:07.884 --> 05:33:12.296
controller in my hand, can we 
make something that feels to the

05:33:12.608 --> 05:33:14.608
 player like they're holding 
something, like 

05:33:17.217 --> 05:33:17.807
a controller
&gt;&gt; RYAN HIPPLE: How about a had 

05:33:17.808 --> 05:33:22.199
  game of tennis or a had brick 
breaking game or combine the two

05:33:22.409 --> 05:33:25.598
 and make a tennis brick 
breaking game.  We have the 

05:33:25.803 --> 05:33:28.211
orientation from the controller 
to control the rotation of the 

05:33:28.212 --> 05:33:30.902
at the in us racket that pivots 
around the body of the player 

05:33:30.903 --> 05:33:33.300
and we have a natural range of 
the tennis racket that way where

05:33:33.605 --> 05:33:36.904
 you can do your forehands and 
backhand and it is rotated 

05:33:37.121 --> 05:33:39.811
around to the right spot.  On 
the more game design side of 

05:33:39.812 --> 05:33:43.711
this we're focusing on 
leveraging the very accurate 

05:33:43.712 --> 05:33:46.310
orientation we have from the SDK
 and use that to make sure that 

05:33:46.311 --> 05:33:50.512
when you hit the balls they're 
upwards if you're tilting the 

05:33:50.513 --> 05:33:52.902
wrist up or down, and you make 
them go to the left or the 

05:33:52.903 --> 05:33:55.325
right.  In order to do that, 
we're cheating the collisions in

05:33:55.521 --> 05:33:58.805
 the game a lot to make the game
 easy to hit and putting the 

05:33:58.806 --> 05:34:02.716
game challenge in there by 
forcing the player to use that 

05:34:02.717 --> 05:34:05.506
accurate aim in order to twist 
their wrist to get the ball 

05:34:05.507 --> 05:34:09.975
exactly at the panel that they 
want to smash.    

05:34:09.976 --> 05:34:11.506
&gt;&gt; FRANCISCO SOUKI: Like Ryan 
said, it is in the wrist.   We 

05:34:11.507 --> 05:34:15.088
do a bit of timing.  If you 
swing early, you go that way.   

05:34:15.089 --> 05:34:17.718
Late, it goes that way.  You 
don't have to worry about the 

05:34:17.719 --> 05:34:20.327
position of the ball or how to 
hit the ball.  It is about your 

05:34:20.328 --> 05:34:24.030
aiming with the wrist.  It was 
very fun, the play testers loved

05:34:24.321 --> 05:34:27.144
 it -- shall I say that the play
 testers that love skill games 

05:34:27.145 --> 05:34:31.516
loved it.  Play testers that 
maybe are not fond of tennis or 

05:34:31.517 --> 05:34:35.024
skill games were not hot on it. 
 My immediate thought was why 

05:34:35.025 --> 05:34:38.318
don't we try some more 
traditional emotion kind of 

05:34:38.319 --> 05:34:42.019
gesture detection and see how 
they feel about that.    

05:34:42.020 --> 05:34:43.994
&gt;&gt; RYAN HIPPLE: In our more 
traditional motion control game 

05:34:43.995 --> 05:34:46.838
we have the warrior game.  You 
see that in the video there.  

05:34:46.839 --> 05:34:51.744
Players trying to slash at 
objects before they hit a 

05:34:51.745 --> 05:34:54.930
warrior avatar and this is used 
by detecting a few simple   

05:34:54.931 --> 05:34:58.039
gestures with the controller and
 you use the gyroscope readings 

05:34:58.040 --> 05:35:00.944
here.  The gyroscope readings 
are the perfect thing for this, 

05:35:00.945 --> 05:35:04.647
they tell I how fast the player 
is moving the controller.  When 

05:35:05.153 --> 05:35:08.146
the movement speed is exceeding 
some threshold we need to use 

05:35:08.147 --> 05:35:11.342
we'll figure out how -- what 
direction we're going and we'll 

05:35:11.343 --> 05:35:16.556
look in a left, right, upper, 
left flash and we use that with 

05:35:16.557 --> 05:35:21.140
a avatar with a sword that gets 
to break stuff.    

05:35:21.141 --> 05:35:24.260
&gt;&gt; FRANCISCO SOUKI: This works 
about you you have a bit of I'm 

05:35:24.261 --> 05:35:29.046
if here standing getting a 
swiping affect.  Every other 

05:35:29.047 --> 05:35:32.361
swiping game before has been 
made and our players that tried 

05:35:32.362 --> 05:35:35.853
the tennis first were like I 
want that one to one, why aren't

05:35:35.854 --> 05:35:38.748
 you giving me gestures.  
Anything we can do to this game 

05:35:38.749 --> 05:35:42.270
to   get that one to one back 
but not compromise to the core 

05:35:42.580 --> 05:35:42.964
mechanic?
&gt;&gt; RYAN HIPPLE: There is.    

05:35:42.965 --> 05:35:46.365
This is where we one up the 
traditional motion control games

05:35:46.568 --> 05:35:50.557
 because we have that accurate 
orientation.  By maintaining the

05:35:50.853 --> 05:35:54.756
 game play we already have with 
the slash gestures we can use 

05:35:54.757 --> 05:35:57.954
the orientation to power the 
animation on the character and 

05:35:57.955 --> 05:36:01.261
the scene and we use that to 
blend between several animations

05:36:01.476 --> 05:36:08.353
 or several poses and the sword 
on this warrior character should

05:36:08.354 --> 05:36:08.959
 always be reflecting the 
orientation that a player is 

05:36:08.960 --> 05:36:12.379
holding the controller.    
Additionally, one issue with our

05:36:12.380 --> 05:36:16.471
 first approach, if you swiped 
to the left you do a sword slash

05:36:16.472 --> 05:36:19.682
 to the left.  If you're 
twisting the controller that's 

05:36:19.683 --> 05:36:24.480
now an upward swipe.   You get 
around that by multiplying or 

05:36:24.481 --> 05:36:28.072
transforming your gyroscope 
readings by the orientation 

05:36:28.073 --> 05:36:31.773
which will give you something 
that's more of a world 

05:36:31.774 --> 05:36:34.778
space/detection.  No matter how 
they twist the calendar it will 

05:36:34.779 --> 05:36:37.892
slash according to the movement 
of the player.    

05:36:37.893 --> 05:36:42.701
&gt;&gt; You can definitely take the 
gesture controls to the next 

05:36:42.702 --> 05:36:45.896
level but I want to go back to 
that one to one.    

05:36:45.897 --> 05:36:49.386
Holding the object in my hand, 
examining, trying it out, I was 

05:36:49.593 --> 05:36:52.898
hoping maybe instead of aiming 
far away we can give them, the 

05:36:53.182 --> 05:36:55.182
players something that's more 
close range to play

05:36:58.489 --> 05:37:04.686
 with.    
&gt;&gt; RYAN HIPPLE: In our demo, we 

05:37:04.687 --> 05:37:10.700
play it with a massive hammer.  
We take it and treat each thing 

05:37:10.701 --> 05:37:15.327
differently.   Swinging the 
hammer, the pitch it axis, the X

05:37:15.693 --> 05:37:19.299
 axis powering the position, 
rotation of the hammer to keep a

05:37:19.300 --> 05:37:24.305
 bit of a constraint on that not
 clicking through the keys and 

05:37:24.797 --> 05:37:28.006
breaking immersion.  We have the
 ability to point, the heading, 

05:37:28.007 --> 05:37:31.085
the yall of the controller in 
order to aim at what keys the 

05:37:31.086 --> 05:37:33.686
player is going to hit to play 
what notes they want to play.  

05:37:33.687 --> 05:37:37.391
On top of that we're using a bit
 of the camera rotation so you 

05:37:37.392 --> 05:37:40.917
notice in the video here that 
the field of play is much 

05:37:40.918 --> 05:37:44.301
broader than what you can see 
with just one screen.  You turn 

05:37:44.302 --> 05:37:47.798
your head and look to the left 
or the right.  We're using that 

05:37:48.002 --> 05:37:50.002
to cheat a bit and make sure 
that the players is going to hit

05:37:50.089 --> 05:37:54.098
 the thing they're focusing on 
so that they move their hand 

05:37:54.099 --> 05:37:56.108
quickly and they're not throwing
 off the direction of the 

05:37:56.109 --> 05:38:00.124
hammer.  We're doing some aim 
assist in this game.    

05:38:00.125 --> 05:38:03.004
&gt;&gt; FRANCISCO SOUKI: And in this 
demo you can tell the players 

05:38:03.005 --> 05:38:06.025
are starting to feel things 
start to gel.    

05:38:06.026 --> 05:38:09.490
They love the closely held 
object and you can usually as a 

05:38:09.491 --> 05:38:12.007
game designer watching them 
play, you can watch them go 

05:38:12.008 --> 05:38:14.804
through three stages.  The first
 stage, they jump in the world, 

05:38:14.805 --> 05:38:17.905
they see they're holding a 
hammer, the wrist thing, the 

05:38:17.906 --> 05:38:20.005
hammer does the wrist thing for 
them.  That's great, the 

05:38:20.006 --> 05:38:22.099
controller is working perfectly 
there.    

05:38:22.100 --> 05:38:25.913
Then they realize the keys are 
in a curved shape so they look 

05:38:25.914 --> 05:38:29.803
around.  They are using that 
sort of VR space looking all 

05:38:29.804 --> 05:38:33.112
around.  Then they identify any 
key that they want to play and 

05:38:33.113 --> 05:38:37.501
they go for the thing and it 
works.  It is a combination of 

05:38:37.502 --> 05:38:41.135
where you're looking and how 
you're swinging, when that feels

05:38:41.509 --> 05:38:44.518
 right, and when the world holds
 up to what they want to do as 

05:38:44.519 --> 05:38:47.020
players, it feels great for 
them.   That's where the 

05:38:47.021 --> 05:38:49.021
platform really shines.

05:38:50.620 --> 05:38:52.620
  That combination helped 
improve their perceived accuracy

05:38:52.915 --> 05:38:57.426
 and so I'm thinking can we use 
that combination or that aiming 

05:38:57.427 --> 05:39:02.026
and that closely held object to 
maybe let them do something that

05:39:02.233 --> 05:39:04.797
 they wish they could do but 
they can't do in real life?

05:39:06.125 --> 05:39:09.387
     &gt;&gt; RYAN HIPPLE: If anyone 
here actually tried to throw a 

05:39:09.388 --> 05:39:14.534
boom ring, anyone               
    boomerang?  It is incredibly

05:39:15.136 --> 05:39:17.642
 disappointing.  There is a 
powerful technique only mastered

05:39:17.643 --> 05:39:21.349
 by a few, you throw it, it 
doesn't go where you want it to 

05:39:21.350 --> 05:39:24.734
go back, where you want it to 
go, there is an expectation of 

05:39:24.735 --> 05:39:27.650
this, you see the shape and feel
 like I should throw this, it 

05:39:27.651 --> 05:39:31.639
should go where I want it to and
 snap right back to me.  This is

05:39:31.640 --> 05:39:34.124
 where we take the orientation 
we have from the headset again 

05:39:34.235 --> 05:39:36.235
and use it as an aim assist.    

05:39:39.636 --> 05:39:40.039
Where the player is looking in 
this demo will drive where the 

05:39:40.040 --> 05:39:45.436
curve of the boomerang goes.  
The goal is to break as many of 

05:39:45.437 --> 05:39:50.140
the floating targets as you can 
with a single throw.  You use 

05:39:50.141 --> 05:39:52.236
the head for aiming and the 
controller is free for the 

05:39:52.237 --> 05:39:54.951
throwing it.  You use the 
similar thing for the sword 

05:39:54.952 --> 05:39:57.822
slashes here, you use the 
gyroscope reading its and if it 

05:39:57.823 --> 05:40:00.651
is above a certain threshold it 
triggers that throw.   Looking 

05:40:00.652 --> 05:40:03.887
where you want to throw and 
doing the throw gesture will get

05:40:04.453 --> 05:40:08.742
 that out there.    
Additionally to maintain the 

05:40:08.743 --> 05:40:10.859
immersion here, we have the 
orientation to make sure the 

05:40:10.994 --> 05:40:12.994
boom ring     

05:40:15.205 --> 05:40:15.268
      boomerang rotates to 
reflect that in the hands, you 

05:40:15.269 --> 05:40:20.169
so he that in the videos here, 
that little bit of movement is 

05:40:20.170 --> 05:40:23.737
keeping it, grounding the player
 between the two worlds.    

05:40:23.738 --> 05:40:27.659
&gt;&gt; FRANCISCO SOUKI: This video 
is about empowering the player 

05:40:27.660 --> 05:40:30.627
and about letting them 
experience their -- how they 

05:40:30.628 --> 05:40:33.471
feel it, throwing the boomerang,
 how it should feel.    

05:40:33.747 --> 05:40:37.961
Tall skinny table like boom, I 
want to put in that exit sign, 

05:40:37.962 --> 05:40:40.623
bam, it goes there.    
It is less about very precise 

05:40:40.624 --> 05:40:46.981
one to one matching of the thing
 that they're pointing to or the

05:40:47.181 --> 05:40:49.990
 exact hand movement and more 
about the precise matching and 

05:40:49.991 --> 05:40:55.668
the boomerang in their hand 
combined with the aim assist 

05:40:55.669 --> 05:40:58.490
that is provided to us.  It is 
about interpreting all of those 

05:40:58.491 --> 05:41:03.081
-- all of that data we get and 
letting the player fulfill what 

05:41:03.082 --> 05:41:08.083
they think it should play like. 
 What we realize at this point 

05:41:08.084 --> 05:41:10.784
though, we haven't touched touch
 pad at all.  It is about the 

05:41:10.785 --> 05:41:15.787
swinging, all about the pointing
 and the head.   Touch pads are 

05:41:15.788 --> 05:41:18.782
just the number one thing that 
you should use in games, right? 

05:41:18.993 --> 05:41:23.195
 Whether it is a Joy stick, a 
virtual touch pad, we used touch

05:41:23.196 --> 05:41:27.295
 pads all the time for all of 
our games, can we just put 

05:41:27.296 --> 05:41:30.520
something that we normally make 
in a normal platform a different

05:41:30.521 --> 05:41:32.393
 platform?  A non-profit 
entities VR platform in this 

05:41:32.394 --> 05:41:35.097
special place with this touch 
pad?  Does it hold up?

05:41:35.396 --> 05:41:36.994
&gt;&gt; RYAN HIPPLE: Of course we 
can.    

05:41:36.995 --> 05:41:39.987
Using the touch pad on the 
controller we can use that as a 

05:41:39.988 --> 05:41:43.207
traditional D pad control.  This
 is something that players will 

05:41:43.399 --> 05:41:46.494
immediately be familiar with.  I
t is the type of games that had 

05:41:46.495 --> 05:41:49.706
existed since almost the 
beginning of games.  In our 

05:41:50.091 --> 05:41:52.794
adventure game demo the player 
controls a little character 

05:41:52.795 --> 05:41:55.501
walking around using that D pad 
and then the nice thing about 

05:41:55.502 --> 05:41:59.902
this, it frees up the headset 
now the, it functions as the 

05:42:01.907 --> 05:42:05.299
camera control, a problematic 
scheme, you can look around the 

05:42:05.300 --> 05:42:07.813
world, it adds a sense ever 
exploration, you see more than 

05:42:07.814 --> 05:42:10.805
you would be able to if you had 
to have this automatic follow 

05:42:10.806 --> 05:42:16.691
camera.  Those controls, we have
 them a little bit specialized 

05:42:16.692 --> 05:42:20.014
for the layout here.   We have 
the character in an environment 

05:42:20.015 --> 05:42:23.011
that it circles the player and 
their perspective, so when you 

05:42:23.205 --> 05:42:25.597
want to move the character along
 that path we have it so that it

05:42:25.598 --> 05:42:29.758
 is a circular-based path, you 
hold it to the right and this 

05:42:29.759 --> 05:42:32.614
player will trace a circle, the 
character will trace a circle 

05:42:32.615 --> 05:42:35.103
around the player
making it much easier to 

05:42:35.104 --> 05:42:37.514
navigate, making it easier to 
have the player move forward 

05:42:37.515 --> 05:42:42.210
through the world and of course 
in this demo we have it end up 

05:42:42.211 --> 05:42:44.218
with the player meeting the 
character they have controlled 

05:42:44.219 --> 05:42:47.439
this entire time.    
We use a bit of the gesture 

05:42:47.440 --> 05:42:51.626
controls that we talked about 
before and the click pad in 

05:42:51.627 --> 05:42:53.914
order to use abilities that 
trigger things in this 

05:42:53.915 --> 05:42:56.527
environment and vice president 
light puzzles and collection 

05:42:56.528 --> 05:43:00.021
mechanics as you see.    
Is it

05:43:00.321 --> 05:43:02.321
&gt;&gt; FRANCISCO SOUKI: When you 
make your own adventure games 

05:43:02.536 --> 05:43:05.425
you'll realize that you can use 
a touch pad for movement, no 

05:43:05.426 --> 05:43:07.820
problem, it feels great.  It 
will free up all of the other 

05:43:07.821 --> 05:43:11.503
stuff in the controller for you 
to explore that space.    

05:43:11.726 --> 05:43:15.218
This is the extent of the demo 
we made.  Everything you see 

05:43:15.219 --> 05:43:19.506
here, it is the totality of the 
spaces we explored.   What that 

05:43:19.507 --> 05:43:22.621
leaves is a lot of open space 
for you to try to take it to the

05:43:22.732 --> 05:43:27.339
 next level however you want to.
  In this case, the click, 

05:43:27.340 --> 05:43:31.443
gestures, the pointing, all of 
that, it is freed up, it is not 

05:43:31.444 --> 05:43:33.535
something that you need to use 
and the touch pad feels familiar

05:43:33.742 --> 05:43:37.840
 to the players.  It is 
recognizable so you can truly 

05:43:37.841 --> 05:43:40.139
use those interactions because 
the player doesn't have to think

05:43:40.140 --> 05:43:43.038
 twice about how to use the 
touch pad to move the character.

05:43:45.653 --> 05:43:48.650
 we figured out the touch pad 
was good for a character?

05:43:48.651 --> 05:43:51.764
&gt;&gt; RYAN HIPPLE: Good for one 
player, let's see if we can 

05:43:52.053 --> 05:43:53.745
control multiple characters.  In
 the realtime strategic 

05:43:53.746 --> 05:43:58.108
innovation is gee style demo we 
have the orientation that we 

05:43:58.109 --> 05:44:01.299
have from the controller, from 
the SDK using that to ray cast 

05:44:01.666 --> 05:44:04.546
in the world and you can use 
that to point to select a 

05:44:04.547 --> 05:44:07.657
character and point to had 
direct them somewhere and you 

05:44:07.658 --> 05:44:10.772
can also drag select to select 
multiple characters in the world

05:44:10.773 --> 05:44:13.862
 and give them instructions at 
the same time.  You can also use

05:44:14.128 --> 05:44:18.390
 the gyroscope gestures again 
like we did for the sword slash 

05:44:18.391 --> 05:44:21.062
and a lot of the games to 
trigger multiple actions that 

05:44:21.671 --> 05:44:25.175
the characters can do.  In this 
we have a few simple   puzzle 

05:44:25.176 --> 05:44:27.661
mechanics that let's the player 
explore the world and you're 

05:44:27.662 --> 05:44:30.573
using the orientation from the 
headset and taking control of 

05:44:30.965 --> 05:44:36.676
the camera very naturally with 
just the players look vector.   

05:44:37.282 --> 05:44:40.378
this feel good in this platform!
  We love this demo.  Play 

05:44:40.585 --> 05:44:43.119
testers love this demo.   People
 couldn't put it down until they

05:44:43.120 --> 05:44:48.490
 figure out the full puzzle that
 we had.  The interaction was 

05:44:48.491 --> 05:44:50.651
empowering them to control the 
characters, how they wanted to 

05:44:50.652 --> 05:44:53.974
control the characters.    
We draw a line from the 

05:44:53.975 --> 05:44:56.070
controller position to the 
target and it keeps players 

05:44:56.071 --> 05:44:59.791
aware of the orientation of the 
controller at every time.    

05:45:00.082 --> 05:45:03.171
That interface, it makes it easy
 for you to control one 

05:45:03.172 --> 05:45:07.453
character or several characters 
and similar to the adventure 

05:45:07.454 --> 05:45:10.882
game that you saw before, the 
touch pad game, freeing up the 

05:45:10.954 --> 05:45:15.250
controller,'s special hadly 
because you can -- especially 

05:45:15.251 --> 05:45:19.535
you can use the whole world and 
pace out the level and to 

05:45:19.536 --> 05:45:22.612
control where the player is 
looking at any given time.  The 

05:45:22.613 --> 05:45:24.951
camera movement doesn't need to 
be tied to the controller in 

05:45:24.952 --> 05:45:28.295
anyway.  If your mind is going 
like how can I use that mechanic

05:45:28.296 --> 05:45:31.703
 to make an RTS or make a 
strategy game, aic at a ticks 

05:45:31.704 --> 05:45:35.118
game, any multicharacter control
 game, that drag to select, all 

05:45:35.119 --> 05:45:38.109
of that, that's where it should 
be   going because the platform 

05:45:38.110 --> 05:45:42.548
is really good for it.  What we 
thought though, to figure out 

05:45:42.549 --> 05:45:45.515
how to sort of get the most of 
the orientation controls, the 

05:45:45.516 --> 05:45:51.003
most of the character control, 
can we marry them together? we 

05:45:51.004 --> 05:45:54.822
can in the sky ship demo, the 
players, they control a gliding 

05:45:56.391 --> 05:45:59.221
air ship through an environment 
dodging obstacles picking up 

05:45:59.222 --> 05:46:01.814
coins along the way.  This is 
simple on the input side.  We're

05:46:02.026 --> 05:46:05.844
 just using the orientation that
 we get.  This let's us 

05:46:05.845 --> 05:46:09.717
essentially just point and click
 -- no clicking, sorry, point to

05:46:09.718 --> 05:46:13.029
 guide this glider around the 
environment and using the pitch 

05:46:13.030 --> 05:46:17.230
and roll, the jall, like an 
actual aircraft to get it to 

05:46:17.231 --> 05:46:21.147
move around the environment.  H
aving the roller or the twist as

05:46:21.148 --> 05:46:23.543
 well, it is really nice for 
this, should the mood strike 

05:46:23.544 --> 05:46:26.371
you, you can do a barrel roll.  

05:46:26.372 --> 05:46:29.837
&gt;&gt; FRANCISCO SOUKI: Yes.  No 
clicking Ryan said because the 

05:46:30.022 --> 05:46:32.136
clicking is freed up here for 
you to do whatever you may want 

05:46:32.137 --> 05:46:34.948
to do in a had flying ship.  
When you play this, it feels 

05:46:35.045 --> 05:46:38.851
like you're handling a toy plane
 and you're threading it through

05:46:39.147 --> 05:46:43.333
 space all through the rings p 
the handshake being, it is not a

05:46:43.334 --> 05:46:47.446
 big problem here.  You control 
how wide the gaps are with the 

05:46:47.555 --> 05:46:52.237
rings, the spaces that you're 
trying to fit the ship through. 

05:46:52.238 --> 05:46:54.242
 That counters a lot

05:46:57.844 --> 05:46:58.634
 of the precision of your own 
hand translating into the world 

05:46:58.635 --> 05:47:01.950
and it does allow you to orient 
the ship sort of however you 

05:47:01.951 --> 05:47:06.250
want as you're flying with it.  
This is one that play testers 

05:47:06.251 --> 05:47:10.939
couldn't put down.  We just keep
 the rings coming and they will 

05:47:10.940 --> 05:47:14.843
keep playing and as long as you 
give them a goal of collect 10 

05:47:15.058 --> 05:47:17.542
coins and pass it along they'll 
just stay in there doing it all 

05:47:17.958 --> 05:47:21.232
the time.  It feels good.  The 
pillars, they're there, you 

05:47:21.233 --> 05:47:24.752
don't get the motion sickness 
from moving forward, you're 

05:47:24.958 --> 05:47:27.046
stationary and the world moves 
in front of you.  You

05:47:27.047 --> 05:47:29.652
have no motion sickness.    
At that point, we're feeling 

05:47:29.653 --> 05:47:33.452
confident and we're like, okay, 
we seem to have this thing 

05:47:33.453 --> 05:47:37.648
figured out, it is constrained 
to a plane but maybe we can 

05:47:37.649 --> 05:47:40.341
breakout of that plane and go 
bigger, what I want to do, I 

05:47:40.342 --> 05:47:47.350
want to feel like I'm flying a 
kite but I'm controlling this 

05:47:47.660 --> 05:47:50.398
great creature that I summoned
&gt;&gt; RYAN HIPPLE: Here be the 

05:47:50.399 --> 05:47:54.651
dragons.  Our dragon demo, they 
control a massive dragon using 

05:47:54.652 --> 05:47:58.633
the controller orientation and 
they're pointing the controller 

05:47:58.634 --> 05:48:01.858
where they want the dragon to go
 to   give immediate feedback we

05:48:01.859 --> 05:48:08.180
 have a dollar, a statue of the 
dragon in front of the camera.  

05:48:08.181 --> 05:48:10.970
This is goal orientation.  We 
have learned this in other 

05:48:11.242 --> 05:48:13.232
demos, you want to maintain the 
relationship between the 

05:48:13.233 --> 05:48:15.233
controller and a physical object
 in the environment.    

05:48:15.265 --> 05:48:19.473
In order to make the dragon feel
 like a massive entity we have 

05:48:19.474 --> 05:48:22.180
that point towards that vector 
that you're guiding it towards 

05:48:22.296 --> 05:48:24.296
and have it almost  

05:48:26.280 --> 05:48:29.390
          lumbar along in this 
twisted path collecting, 

05:48:29.391 --> 05:48:33.571
destroying the floating objects.

05:48:33.572 --> 05:48:37.784
&gt;&gt; FRANCISCO SOUKI: You get the 
source to play with these, fire 

05:48:37.785 --> 05:48:41.236
it up, point it and watch the 
dragon come at you and we have 

05:48:41.688 --> 05:48:44.401
added things to take advantage 
of that VR.   There is a slight 

05:48:44.402 --> 05:48:47.082
camera shake which sounds like 
what, you're shaking the players

05:48:47.910 --> 05:48:50.189
 camera and anyone before tell 
you what you can't do in VR, 

05:48:50.190 --> 05:48:54.297
try, see if it works or not, it 
works here.  It is a slight 

05:48:54.298 --> 05:48:56.298
shake and it is combined with 
the position of the a you had yo

05:48:56.584 --> 05:49:00.523
 of the dragon so you really 
feel like you're sharing the 

05:49:00.524 --> 05:49:02.887
space with this big creature and
 you're doing this dance with 

05:49:02.888 --> 05:49:06.811
it.  It is big, heavy, it 
handles like a big, heavy 

05:49:06.812 --> 05:49:10.101
creature and you're dancing with
 it through space and trying to 

05:49:10.418 --> 05:49:12.680
eat up big structures and you 
point it at your sever and it is

05:49:12.803 --> 05:49:15.808
 coming to you, and it tries to 
eat the thing next to you, it is

05:49:16.221 --> 05:49:20.913
 great!  It feels really good!  
This is really I think 

05:49:21.914 --> 05:49:27.833
showcasing what the daydream can
 do, a lot, especially when you 

05:49:27.834 --> 05:49:30.394
combine this headset with the 
controller and you have the epic

05:49:32.305 --> 05:49:34.660
 flyovers with the
dragon.  It feels great.    

05:49:34.661 --> 05:49:39.311
We have done the dragon, 
boomerang, the music, we have 17

05:49:39.312 --> 05:49:42.266
 is things in total.  What's 
left for us to do?  Should we 

05:49:42.267 --> 05:49:44.528
give people what they have   
been asking for all along?

05:49:44.769 --> 05:49:48.720
&gt;&gt; RYAN HIPPLE: You have seen it
 plenty, here be the pancakes!  

05:49:48.924 --> 05:49:52.621
In this demo we're using the 
orientation to had flip these 

05:49:52.622 --> 05:49:56.221
pancakes and then we have a very
 advanced Pancake physics engine

05:49:56.222 --> 05:50:00.024
 we're running to make sure 
they're moving as they should.  

05:50:00.025 --> 05:50:04.117
In reality it is actually just 
using the basic game physics 

05:50:04.118 --> 05:50:08.130
system here and having a pan 
with thely on it as the 

05:50:08.131 --> 05:50:10.531
collision structure works 
really, really well.  This 

05:50:10.532 --> 05:50:13.865
orientation, it gives you a 
really nice flip gesture to do 

05:50:13.866 --> 05:50:17.639
and we're not doing the gesture 
detection, it is just natural 

05:50:18.044 --> 05:50:22.334
how the physics simulation pairs
 up with having the raw 

05:50:22.335 --> 05:50:24.739
orientation input.    
It turns out to be a very, very 

05:50:24.740 --> 05:50:28.749
fun thing to do.  We did do a 
bit of active Pancake assist 

05:50:28.750 --> 05:50:31.917
here to make sure that the 
pancakes don't get out of reach.

05:50:32.555 --> 05:50:36.173
  Overall, it is a natural, fun 
demo.    

05:50:36.174 --> 05:50:40.140
&gt;&gt; The pancakes, they kind of 
fit what is awesome about 

05:50:40.356 --> 05:50:44.033
daydream, which is you see the 
Pancake demo, people are 

05:50:44.034 --> 05:50:47.325
tweeting about it from the 
keynote, my God, I want to 

05:50:47.326 --> 05:50:50.456
flippen pancakes in VR, you get 
in there, flip pancakes and it 

05:50:50.457 --> 05:50:52.740
plays how you look, you're 
flipping the pancakes and you're

05:50:53.159 --> 05:50:57.881
 like, yes, got it!  When the 
platform allows you to do 

05:50:57.882 --> 05:51:01.658
exactly what it looks like and 
feels like what it looks like 

05:51:01.659 --> 05:51:03.963
and what it should feel like, 
that's when you know it is a big

05:51:03.964 --> 05:51:05.964
 win.

05:51:10.648 --> 05:51:13.092
eat the pancakes in VR?
&gt;&gt; FRANCISCO SOUKI: That's the 

05:51:15.156 --> 05:51:16.569
next step.    
&gt;&gt; RYAN HIPPLE: We built 17 

05:51:16.570 --> 05:51:20.573
demos.  178 demos like these and
 we did that in a little over a 

05:51:20.574 --> 05:51:25.781
month.  All of the tools we had 
to do this, it was the SDK,   

05:51:25.782 --> 05:51:28.764
Bruno talked about that, the 
controller immolator with a 

05:51:28.963 --> 05:51:34.572
phone as the input device and 
the Nexus6P with Cardboard to 

05:51:34.573 --> 05:51:37.279
develop with.   All of them are 
out there, available now, if the

05:51:37.371 --> 05:51:42.984
 source code for all of data   
   demos we built should be 

05:51:43.085 --> 05:51:45.261
there for a starting point to 
play around with, start making 

05:51:45.262 --> 05:51:47.495
great games with this platform. 

05:51:47.496 --> 05:51:49.787
We really feel like the things 
we put together only really 

05:51:49.788 --> 05:51:52.784
scratch the surface of what we 
can do with daydream and what to

05:51:52.971 --> 05:51:55.483
 do with this amazing 
controller.  What will you

05:51:58.532 --> 05:52:00.532
 build?
Thank you.  

05:54:11.402 --> 05:54:16.358
 of mobile app it design:  
Delight users and drive 

05:54:16.359 --> 05:54:18.359
conversions. 

05:57:12.247 --> 05:57:15.434
      Principles of mobile app 
it design:  Delight users and 

05:57:23.027 --> 05:57:26.731
drive conversions.
Principle of mobile app design: 

05:57:26.732 --> 05:57:28.923
 Delight users and drive 
conversions.

05:57:32.456 --> 05:57:34.456
   Principle of mobile app 
design:  Delight users and 

06:00:57.434 --> 06:01:00.299
drive conversions.
 Principle of mobile app design:

06:01:00.300 --> 06:01:02.300
  Delight users and 

06:06:19.236 --> 06:06:19.717
drive conversions. Principle of 
mobile app design:  Delight 

06:06:19.718 --> 06:06:21.718
users and 

06:08:23.697 --> 06:08:25.599
drive conversions.
&gt;&gt; JENNIFER GOVE: Hello, 

06:08:25.600 --> 06:08:28.336
everyone!  How much are you all!
  Great!  A wonderful crowd!  

06:08:28.337 --> 06:08:32.043
Thank you for coming to my talk 
today.    

06:08:32.044 --> 06:08:34.044
My name is

06:08:35.385 --> 06:08:38.152
 Jenny gove and I'm a user 
experience researcher at Google.

06:08:38.357 --> 06:08:41.647
  I have been here now this 
month for ten years and I heard 

06:08:41.648 --> 06:08:43.648
that

06:08:45.564 --> 06:08:46.900
 coincides --
[Applause]

06:08:46.901 --> 06:08:49.367
&gt;&gt; JENNIFER GOVE: Thank you!  
That coincides with the number 

06:08:49.368 --> 06:08:52.652
of years we have been having I/O
 conferences.  A double 

06:08:52.653 --> 06:08:57.254
anniversary.  That's fun.    
This afternoon we'll talk about 

06:08:57.255 --> 06:09:01.464
developing great apps and 
creating principles of mobile 

06:09:01.465 --> 06:09:04.556
app design that I wants to share
 with you so that puck   create 

06:09:04.557 --> 06:09:09.675
great experiences for your users
 -- so that we can create great 

06:09:09.676 --> 06:09:15.195
experiences for your users.    
Why is this important?  It is 

06:09:15.393 --> 06:09:17.878
important, there is 1.   1.5 
million apps in each of the app 

06:09:17.879 --> 06:09:21.188
stores as we know.   There is a 
lot of -- there is a lot of 

06:09:21.482 --> 06:09:25.582
competition out there.  You 
don't want your app to suffer 

06:09:25.583 --> 06:09:29.531
from userrablety flaws.  I think
 that the userrablety flaws on 

06:09:29.532 --> 06:09:33.177
the user experience issues can 
contribute to the lack of 

06:09:33.178 --> 06:09:35.999
engagement that some apps have. 

06:09:36.000 --> 06:09:39.803
For example, we have learned 
that things like 25% of apps 

06:09:39.996 --> 06:09:46.408
sometimes don't get used more 
than once.  34% of apps are not 

06:09:46.409 --> 06:09:50.509
opened more than 11 times.  
These statistics are around with

06:09:50.510 --> 06:09:53.599
 regard to, you know, app 
engagement, reengagement.  We're

06:09:53.786 --> 06:09:57.801
 doing a lot of work on that 
issue itself hat Google with 

06:09:58.196 --> 06:10:01.806
certain products we're bringing 
out.   I think it is also on us 

06:10:01.807 --> 06:10:06.312
to really work on our user 
experience, our usability issues

06:10:06.518 --> 06:10:10.404
 in our apps.    
I'm going to tell you about 

06:10:10.405 --> 06:10:15.022
three things in the rest of my 
talk:  I'll tell you about a 

06:10:15.408 --> 06:10:17.597
story that I had with an 
experience with an app recently;

06:10:17.703 --> 06:10:21.415
 I'll tell you about a study we 
found to understand what makes a

06:10:21.705 --> 06:10:26.893
 really great app experience; 
I'll go through some of the 

06:10:26.894 --> 06:10:29.714
principles that we have 
published online so that you can

06:10:29.905 --> 06:10:33.298
 understand some key things that
 you can do to make your app 

06:10:33.299 --> 06:10:35.299
experience better.   Within 
those principles I have a number

06:10:35.513 --> 06:10:40.815
 of resources for you as well 
that can help you along the way.

06:10:42.599 --> 06:10:46.616
vacation with my family -- here 
we are, having a wonderful time 

06:10:46.617 --> 06:10:51.087
in Florida, that's me and my 
partner, my kids.  Before we 

06:10:51.088 --> 06:10:57.110
went on vacation I set up a 
series of hotels for us to stay 

06:10:57.111 --> 06:11:02.429
at.  It was a self-driving tour,
 I prebooked them on my laptop. 

06:11:02.430 --> 06:11:06.815
 When I got to Florida I found a
 lot of hotels had started to 

06:11:07.812 --> 06:11:11.627
use -- making great use of new 
technologies, apps specifically 

06:11:11.628 --> 06:11:15.626
in order to give me some really 
seamless experiences on my trip.

06:11:15.627 --> 06:11:19.642
  They do things now like 
enabling me to check in before I

06:11:19.643 --> 06:11:24.723
 get there so just like I can 
for an airplane and enabling me 

06:11:24.931 --> 06:11:27.840
to go straight to my room in 
order to open the door, just 

06:11:27.841 --> 06:11:31.241
with the app.  That's pretty 
cool.    I was blown away by the

06:11:31.242 --> 06:11:35.557
 new things they were able to 
do.    

06:11:35.558 --> 06:11:38.608
What happened when I was on 
vacation was the notification to

06:11:38.828 --> 06:11:42.315
 check in came while I was 
standing in line at something 

06:11:42.316 --> 06:11:45.926
like this, the rollercoaster at 
the theme park.   It asked me 

06:11:45.927 --> 06:11:50.743
did I want to check in.  It also
 asked me did I want to choose 

06:11:50.744 --> 06:11:56.135
my own room or did I want to let
 them choose for me.  Well, it 

06:11:56.136 --> 06:12:00.632
when I booked I remembered there
 was a text field and it asked 

06:12:00.633 --> 06:12:05.547
me if I had got any requests, I 
put in that I wanted to have a 

06:12:05.548 --> 06:12:07.842
Seaview.  I knew at the next 
hotel that there was this 

06:12:08.204 --> 06:12:11.930
beautiful   pristine beach.  I 
ordered a room with a balcony 

06:12:11.931 --> 06:12:14.632
and I really wanted this 
wonderful experience looking out

06:12:14.930 --> 06:12:18.235
 over the sea.  I didn't know 
whether that -- you know, 

06:12:18.428 --> 06:12:21.639
whether that experience on the 
laptop would translate into this

06:12:21.848 --> 06:12:25.037
 app experience I was now faced 
with.  I was a bit concerned 

06:12:25.038 --> 06:12:28.035
about that.  You know, I thought
 that I may have a better 

06:12:28.229 --> 06:12:31.035
opportunity of choosing my own 
room rather than letting them 

06:12:31.036 --> 06:12:33.948
choose for me, kind of always 
better to take it in your own 

06:12:33.949 --> 06:12:37.030
hands, right?
I decided to choose my own room.

06:12:37.357 --> 06:12:41.440
  The experience that they gave 
me was pretty good on a mobile 

06:12:42.045 --> 06:12:45.435
divide.             device.  It 
worked, it looksal challenging 

06:12:46.856 --> 06:12:50.680
in terms of real estate, it 
worked out well.  They laid out 

06:12:51.057 --> 06:12:53.568
the rooms and clearly labeled if
 the rooms were taken or open.  

06:12:53.569 --> 06:12:58.047
It was only one problem though, 
that was I had no idea which way

06:12:58.147 --> 06:13:01.369
 the sea was facing.   You know,
 which way the hotel was facing 

06:13:01.370 --> 06:13:07.950
in front of the sea.  I was in 
line and trying to figure out 

06:13:07.951 --> 06:13:13.700
how to solve this.  The of 
there                There were 

06:13:13.701 --> 06:13:17.771
work arounds I didn't think 
about, going to look on Google 

06:13:17.772 --> 06:13:25.479
maps I could figure it out, 
Google Images, in this case, the

06:13:25.480 --> 06:13:30.877
 hotel, it was -- I decided to 
use a rule of thumb and I 

06:13:31.079 --> 06:13:35.463
decided to think that the side 
with the most taken rooms was 

06:13:35.464 --> 06:13:40.769
probably the side that was 
facing the sea.   I decided to 

06:13:40.770 --> 06:13:45.105
choose room 730 over here.    
We got to the hotel, took up all

06:13:45.292 --> 06:13:47.989
 the bags, you know what's going
 to happen, don't you?

06:13:48.382 --> 06:13:54.695
I got a view that looked a 
little bit like this!: Big 

06:13:54.696 --> 06:13:57.297
disappointment.    
What did I have to do then?  I 

06:13:57.298 --> 06:14:01.294
had to go all the way down again
 to reception which I thought I 

06:14:01.295 --> 06:14:05.996
would bypass by using the app, 
talk to the receptionist, though

06:14:06.678 --> 06:14:09.794
 extremely helpful, a lovely 
hotel, fixed it for me, and in 

06:14:09.795 --> 06:14:13.298
the end we went back up, a 
different floor, went to the 

06:14:13.299 --> 06:14:16.795
hotel, and I got a view that was
 much more like this.  

06:14:16.796 --> 06:14:20.301
Beautiful.  This is actually 
Florida.  It looks like the 

06:14:20.302 --> 06:14:23.702
bahamas or something.  It was 
really, really nice.    

06:14:24.009 --> 06:14:27.520
The in-person guest service was 
required, human intervention was

06:14:28.025 --> 06:14:30.798
 required because the app hadn't
 really delivered the service I 

06:14:30.799 --> 06:14:34.601
had hoped it would.  It had done
 so well I was really taken with

06:14:34.892 --> 06:14:40.122
 this new technology I could 
use.  It fell short because it 

06:14:40.123 --> 06:14:42.403
hadn't delivered this critical 
piece of information for me, 

06:14:42.404 --> 06:14:46.568
which was, you know, I just 
needed some information on the 

06:14:46.832 --> 06:14:49.922
map.  In this case, I just 
needed a view of the ocean, 

06:14:49.923 --> 06:14:56.417
perhaps a few waves  , just some
 orientation.    

06:14:56.752 --> 06:15:00.573
So for me, it was pretty 
critical that my view was of 

06:15:00.574 --> 06:15:04.027
this beautiful beach rather than
 this car park.    

06:15:04.028 --> 06:15:08.223
You know, it could have been 
even more critical than my, you 

06:15:08.224 --> 06:15:11.709
know, very dear to me vacation, 
it could have been an event 

06:15:11.710 --> 06:15:15.034
manager booking for a client, 
perhaps it could have been 

06:15:15.035 --> 06:15:21.745
people booking for guests for a 
wedding or something.    

06:15:21.746 --> 06:15:25.429
  one lesson is clear, that's 
how we as developers and 

06:15:25.430 --> 06:15:28.135
designers really need to 
understand the whole flow that 

06:15:28.136 --> 06:15:32.845
our users are going through and 
where that breaks down.  This is

06:15:32.846 --> 06:15:35.190
 cool, new technology, I had to 
sort of backtrack through the 

06:15:35.191 --> 06:15:38.321
whole thing and do those things 
that the app was supposedly 

06:15:38.322 --> 06:15:41.793
saving me from doing.  Really 
understanding that experience 

06:15:42.934 --> 06:15:45.439
from beginning to end.    
I think it on mobile, it is 

06:15:47.037 --> 06:15:49.449
really those little things that 
we don't realize we need to 

06:15:49.859 --> 06:15:54.351
cover.  That's why we really 
need to understand the user 

06:15:54.352 --> 06:15:57.862
perspective and experience with 
that.    

06:15:57.863 --> 06:16:00.704
My talk will be about things 
like that, how we can fix them. 

06:16:00.955 --> 06:16:04.449
 Let me give you a little 
history.  It a couple of years 

06:16:04.450 --> 06:16:09.135
ago we found that a lot of 
experiences on the mobile app 

06:16:09.136 --> 06:16:12.337
were particularly problematic 
for people.  We conducted a 

06:16:12.338 --> 06:16:15.503
large study and tried to 
understand where things weren't 

06:16:15.504 --> 06:16:19.453
being implemented right for the 
mobile wear and where we could 

06:16:19.454 --> 06:16:23.549
do better and we released a set 
of 25 principles for the mobile 

06:16:23.550 --> 06:16:26.466
web.  Those have done really 
well.  People have used them as 

06:16:26.760 --> 06:16:28.760
a 

06:16:29.762 --> 06:16:33.358
kind of initial step in making a
 good foray in providing a 

06:16:33.359 --> 06:16:38.367
better mobile experience on the 
mobile web.   As well as we have

06:16:38.861 --> 06:16:41.852
 done, people have come back 
saying this is great but what 

06:16:41.853 --> 06:16:44.862
about my app, what can you tell 
me about my app?  I have had a 

06:16:44.863 --> 06:16:48.450
lot of calls to do another study
 and a study on apps.  We have 

06:16:48.764 --> 06:16:52.262
done that.  More recently we 
have looked at native apps in 

06:16:53.058 --> 06:16:55.762
the study and so the principles 
I'll present to you today are 

06:16:55.763 --> 06:17:02.872
the result of that work.
In this study we have been able 

06:17:02.873 --> 06:17:07.281
to understand patterns that need
 to pull user experiences and 

06:17:07.282 --> 06:17:10.762
then luckily and happily we were
 able to see where some 

06:17:10.961 --> 06:17:14.061
companies have implemented 
things in a better way and 

06:17:14.062 --> 06:17:16.062
understand why those

06:17:17.569 --> 06:17:19.587
 patterns work better and bring 
them to you.    

06:17:19.588 --> 06:17:22.957
It is important for us to really
 understand this well so we can 

06:17:22.958 --> 06:17:26.382
be confident in the principles 
that we're telling you about and

06:17:26.383 --> 06:17:30.776
 you can be confident in 
implementing them in your own 

06:17:30.777 --> 06:17:34.887
products.  In order to do the 
study, we partnered with a 

06:17:34.888 --> 06:17:40.392
company called Answer Lab, very 
user experience consultancy 

06:17:40.393 --> 06:17:42.788
based in San Francisco.  We 
partnered with them because they

06:17:42.789 --> 06:17:46.493
 could help us scale.  We want 
thed the study to be pretty -- 

06:17:46.494 --> 06:17:48.494
we

06:17:50.593 --> 06:17:54.726
 wanted the study be to large 
scale.  Wet studied interaction 

06:17:50.593 --> 06:17:53.994
on 100 different apps on mobile.
  These ranged from large 

06:17:53.995 --> 06:17:57.294
retailers through to smaller 
service providers.  We looked at

06:17:57.495 --> 06:18:03.580
 news apps, we looked at many 
different sorts of   services, 

06:18:03.692 --> 06:18:06.989
grocery, travel services, 
retail, small and big companies.

06:18:06.990 --> 06:18:10.487
  We didn't look at games as 
part of this.  That was on 

06:18:10.488 --> 06:18:14.503
purpose because we felt that 
would weaken or dilute the 

06:18:14.504 --> 06:18:16.887
principles.  We think that games
 probably have a whole different

06:18:17.190 --> 06:18:21.994
 set of principles.  Aside from 
that, we looked across wide 

06:18:22.133 --> 06:18:28.288
range of verticals.    
We conducted the studies in San 

06:18:28.289 --> 06:18:35.091
Francisco, Chicago and New York 
City.    

06:18:35.092 --> 06:18:39.007
There were 103 participants that
 took part in this study.  For 

06:18:39.008 --> 06:18:44.798
usability study, that's really 
big.  They came in to the lab 

06:18:44.799 --> 06:18:49.917
individually each for 90 
minutes, 155 hours of usability 

06:18:49.918 --> 06:18:52.091
studies.  If you stayed up all 
night and all day, that would be

06:18:53.212 --> 06:18:58.400
 almost a week with no breaks or
 -- in reality it is almost like

06:18:58.607 --> 06:19:03.328
 four weeks of working weeks.  

06:19:03.329 --> 06:19:05.495
A large study

06:19:08.837 --> 06:19:12.703
 indeed.  That's because we 
wanted to cover the different 

06:19:08.837 --> 06:19:10.530
verticals.    
What we did in the study, people

06:19:10.531 --> 06:19:15.533
 came in the study and during 
the 90 minutes they were able to

06:19:16.033 --> 06:19:20.827
 use around 6 apps to really get
 into good tasks for each of 

06:19:21.125 --> 06:19:23.746
owes.  They brought in their own
 phones with them.  That was 

06:19:23.947 --> 06:19:26.728
because we wanted them to be 
really familiar with the phone, 

06:19:26.729 --> 06:19:29.131
we didn't want any problems 
because it was a different 

06:19:29.132 --> 06:19:32.639
device or not used to the back 
button or anything like that.  

06:19:36.524 --> 06:19:42.146
50% on IoS.  What did we do when
 they were in the study?

06:19:42.223 --> 06:19:45.633
We had different tasks and 
different scenarios set up for 

06:19:45.634 --> 06:19:49.150
them.  We did our best to make 
that task kind of mean something

06:19:50.044 --> 06:19:55.338
 to them as well so they 
couldn't do what we

06:19:58.861 --> 06:20:01.642
 call satisfying, doing the task
 as quick as they can in -- we 

06:20:01.643 --> 06:20:04.111
wanted them to care about the 
task.  We talked to them about 

06:20:04.112 --> 06:20:07.343
things that they cared about, 
and this example we may talk to 

06:20:07.344 --> 06:20:10.862
them about their favorite food 
and understand what it is from 

06:20:10.863 --> 06:20:13.710
them first before anyone going 
to ask them to see if they could

06:20:13.944 --> 06:20:17.960
 order it for dinner that 
evening.  We had them speak out 

06:20:17.961 --> 06:20:23.063
loud using what's called in 
usability terminology think 

06:20:23.064 --> 06:20:26.056
allowed protocol.  We did that 
so that we could understand the 

06:20:26.057 --> 06:20:29.255
pain points that they hit as 
they were   going through the 

06:20:29.673 --> 06:20:32.168
different tasks that they were 
doing and we could understand 

06:20:32.169 --> 06:20:38.058
where things flowed really 
smoothly for them.    

06:20:38.059 --> 06:20:41.864
Having done that, we took the 
data, there was a lot of data as

06:20:41.865 --> 06:20:47.084
 you can imagine from that much 
usability material and we 

06:20:47.085 --> 06:20:50.977
brought it down to 25 principles
 so that this is something that 

06:20:50.978 --> 06:20:53.558
you can take and understand and 
apply to had your own apps.  We 

06:20:53.559 --> 06:20:57.171
have categorized the principles 
in 6 chapters.  Before I go into

06:20:57.478 --> 06:21:03.077
 them, I want to explain how we 
actually got to the 25.  In 

06:21:03.781 --> 06:21:07.372
order to make it into the 25 
principles it we had to see   

06:21:07.373 --> 06:21:12.979
that this was a problem across a
 wide range of verticals and we 

06:21:12.980 --> 06:21:17.539
had to see that it was a fairly 
common problem.  We did 

06:21:17.540 --> 06:21:20.074
encounter more things than 25 
things that were a problematic 

06:21:20.075 --> 06:21:23.588
in apps, but we wanted to make 
sure that we were hit  ing the 

06:21:23.589 --> 06:21:26.801
biggest problems and that we 
also saw better ways that these 

06:21:26.802 --> 06:21:33.255
could be implemented.     
different chapters that we have 

06:21:33.256 --> 06:21:40.294
are around navigation and 
exploration, in app search, 

06:21:40.295 --> 06:21:46.917
commas and conversions, 
registration, form entry, 

06:21:46.918 --> 06:21:52.924
usability and comprehension.    
We have got 25 of these 

06:21:52.925 --> 06:21:54.925
different

06:21:56.602 --> 06:22:00.602
 principles and here in this 
talk I'm just going to go into 

06:21:56.602 --> 06:21:58.953
two principles from each of the 
chapters.  The rest of the 

06:21:59.113 --> 06:22:02.394
principles are available to you 
online.  I have also pulled 

06:22:02.499 --> 06:22:06.892
together some resources for you 
that can help with 

06:22:06.893 --> 06:22:09.599
implementation of some things 
you see here, that may be a good

06:22:09.717 --> 06:22:13.428
 time to take a picture of the 
screen as it is a resource to 

06:22:13.429 --> 06:22:15.429
look into in your own time in 
more detail.

06:22:22.510 --> 06:22:24.643
 app navigation and exploration.

06:22:22.510 --> 06:22:24.382
This chapter, it is about 
guiding users to the content 

06:22:24.383 --> 06:22:27.812
that they're looking for 
quickly.  We brought together a 

06:22:27.813 --> 06:22:31.820
set of key principles to have 
you create effective, delightful

06:22:32.312 --> 06:22:36.910
 app navigation.  Let's take a 
look at two of these now.    

06:22:36.911 --> 06:22:42.913
A feature that can be really 
rough       of great helper to 

06:22:42.914 --> 06:22:46.217
users is auto detection of 
location.  Don't assume that the

06:22:47.314 --> 06:22:49.823
 location-based tasker is 
basically based in the current 

06:22:49.824 --> 06:22:53.317
location without exception.  I 
think we saw this too often.   

06:22:53.318 --> 06:22:56.956
It is a really great thing to 
implement and to help, you know,

06:22:57.348 --> 06:23:01.194
 create a seamless experience 
for users when but want 

06:23:01.195 --> 06:23:04.840
something located where they 
are.  We basically saw it over 

06:23:04.841 --> 06:23:07.736
applied without a way of 
enabling people to change their 

06:23:07.737 --> 06:23:10.617
location.    
In this example, somebody is 

06:23:10.618 --> 06:23:15.055
looking for a hotel tonight and 
they're looking for a hotel near

06:23:17.052 --> 06:23:21.236
 where they are.   
Unfortunately, while they can't 

06:23:21.237 --> 06:23:24.252
change location, the only way to
 do it, to change locations, it 

06:23:24.253 --> 06:23:28.147
is to go through settings.  We 
saw this problem in not only 

06:23:28.148 --> 06:23:32.660
travel apps but we saw it in 
retail apps, we saw use cases of

06:23:32.850 --> 06:23:37.855
 people wanting to find 
something in a store, but 

06:23:37.856 --> 06:23:40.845
perhaps it was located near 
where their parents live and 

06:23:40.846 --> 06:23:44.258
they wanted to figure out, you 
know, if it was in the store 

06:23:44.557 --> 06:23:48.669
near them so that they could 
tell their parents about that.  

06:23:50.760 --> 06:23:53.276
basically were seeing too many 
use   cases that were outside of

06:23:54.159 --> 06:23:56.877
 this scenario.  In travel we 
saw it where people would turn 

06:23:56.878 --> 06:24:00.444
up for their transportation and 
the hotel that they wanted to 

06:24:00.542 --> 06:24:03.249
book was at the other end, and 
the other end of the train line 

06:24:03.250 --> 06:24:07.558
and they had to now book the 
hotel and they're not in the 

06:24:07.559 --> 06:24:11.356
place where they're needing the 
hotel at the time.  A much 

06:24:11.357 --> 06:24:14.367
better scenario is to still 
enable people to use the current

06:24:14.856 --> 06:24:18.915
 location, but to provide the 
resource for them to change that

06:24:19.077 --> 06:24:22.558
 well.    
Basically great, great 

06:24:22.559 --> 06:24:25.078
technology here that definitely 
I encourage you to use but it is

06:24:25.578 --> 06:24:28.974
 kind of overapplied without 
using some of the screen real 

06:24:28.975 --> 06:24:31.860
estate to enable them to had 
change location.    

06:24:31.861 --> 06:24:38.276
If you do want to use that auto 
detecting location then Google 

06:24:38.277 --> 06:24:41.376
place API allows you to discover
 that currently supported 

06:24:41.377 --> 06:24:44.125
location and we have a short 
link for you there to get to 

06:24:44.126 --> 06:24:46.126
that 

06:24:47.488 --> 06:24:49.190
material.    
Another aspect of app navigation

06:24:49.191 --> 06:24:54.578
 and exploration that we saw a 
fair bit with apps is moving 

06:24:54.579 --> 06:24:57.984
people from the app to the 
mobile web.  You can see in the 

06:24:58.792 --> 06:25:01.564
way that I have written this 
principle that, you know, there 

06:25:01.565 --> 06:25:06.580
are issues with doing this, 
where the app to web transitions

06:25:06.683 --> 06:25:12.984
 are needed, where needed, make 
them frictionless.  The question

06:25:13.184 --> 06:25:16.714
 is are they really needed?  
We're trying here to make 

06:25:16.715 --> 06:25:19.196
technologies to make this a lot 
smoother, this transition where 

06:25:19.197 --> 06:25:24.894
you need to do it.  You know, at
 the moment we still see at 

06:25:24.895 --> 06:25:26.898
least some sort of performance 
hit.  Really consider whether 

06:25:26.899 --> 06:25:29.894
you have to push people out to 
the mobile web when they're in 

06:25:29.895 --> 06:25:34.308
the app experience right now.  T
hen make them frictionless so --

06:25:34.497 --> 06:25:37.092
 in this example we have got 
somebody who is checking in for 

06:25:37.368 --> 06:25:41.292
a flight.  This can be a usual 
situation where people are moved

06:25:41.610 --> 06:25:45.998
 out to the mobile web.  What we
 often saw and not just in 

06:25:45.999 --> 06:25:49.594
travel apps but other scenarios 
as well we saw the experience 

06:25:49.595 --> 06:25:55.309
change fundamentally.  We saw 
something like this.    

06:25:55.310 --> 06:25:58.225
It can sometimes happen I think 
because of the organizational 

06:25:58.411 --> 06:26:01.607
structure of teams.  This is the
 app team and this is the mobile

06:26:01.704 --> 06:26:03.704
 web team.  They haven't been 
talking enough.

06:26:08.728 --> 06:26:11.219
some companies are doing a 
better job of bringing the teams

06:26:11.410 --> 06:26:15.106
 together to enable them to plan
 the user experience, the look 

06:26:15.107 --> 06:26:21.315
and feel, and how content is 
laid out.  Then separating out 

06:26:21.316 --> 06:26:24.816
for the actual implementation on
 the different platforms and a 

06:26:24.817 --> 06:26:27.709
much better experience is when 
companies have been really 

06:26:28.017 --> 06:26:30.921
thoughtful about this and you 
can make that look and feel very

06:26:31.979 --> 06:26:36.272
 seamless even though you're 
just moving out, right out to 

06:26:36.273 --> 06:26:39.519
the mobile web.    
The on Android we're doing work 

06:26:39.520 --> 06:26:42.684
on this.  We have some 
technology custom

06:26:46.456 --> 06:26:46.861
 tabs to look into.  It is 
really helpful for enabling you 

06:26:46.862 --> 06:26:50.449
to do things like changing the 
tool bar color and exiting and 

06:26:50.450 --> 06:26:53.161
entering animations to make that
 whole process of moving from 

06:26:53.368 --> 06:26:55.368
the app to the mobile web more 
seamless.

06:27:02.663 --> 06:27:06.274
importance of great in-app 
search, they can't be 

06:27:06.615 --> 06:27:08.673
underestimated.  Let's talk 
about a couple of crucial search

06:27:10.688 --> 06:27:14.673
 implementations.  Prominently 
displaying the search field, we 

06:27:14.883 --> 06:27:19.381
found this back when we did the 
mobile web study about the 

06:27:19.382 --> 06:27:23.380
importance of search.  On the 
poor example we have search in a

06:27:23.677 --> 06:27:25.968
 place where people expect to 
look for it.  It

06:27:29.270 --> 06:27:30.699
 is not how they expect to find 
it as a text, a piece of text 

06:27:30.700 --> 06:27:34.478
here.  What we saw in the study 
was people kind of did have 

06:27:34.479 --> 06:27:36.976
frustration looking around for 
search.  Sometimes it was hidden

06:27:37.283 --> 06:27:42.167
 under a menu.  It sounds like 
one of the most obvious things 

06:27:42.494 --> 06:27:47.400
but I think what my summary of 
what I saw in the study was the 

06:27:47.401 --> 06:27:49.401
developers and designers aren't

06:27:52.005 --> 06:27:57.115
 implementing persistent search 
field enough.  We advise a 

06:27:57.116 --> 06:28:00.420
persistent search field should 
be included when searches are 

06:28:00.421 --> 06:28:03.816
really quite a significant part 
of your experience in your app. 

06:28:03.817 --> 06:28:06.302
 I think what's happening is 
plenty of people are thinking 

06:28:06.303 --> 06:28:08.913
that search is important, but 
not that

06:28:08.914 --> 06:28:12.123
important to devote the screen 
real estate to.    

06:28:12.124 --> 06:28:17.031
You know, check that out in your
 app.  Should you give it more 

06:28:17.032 --> 06:28:19.327
prominence than you currently 
are?

06:28:19.627 --> 06:28:22.926
We have advice on this in 
material design.  We have a 

06:28:22.927 --> 06:28:26.522
persistent search putting in a 
search field and we also have 

06:28:26.523 --> 06:28:29.617
expandable search where we have 
the looking glass icon that can 

06:28:29.618 --> 06:28:34.327
be expanded for search, of 
course.  Think about the 

06:28:34.328 --> 06:28:36.937
prominence of search in your app
 and how it really matters to 

06:28:36.938 --> 06:28:39.419
people when making that decision
 about which type of search you 

06:28:39.725 --> 06:28:44.543
should implement.    
Then for implementation details,

06:28:44.751 --> 06:28:50.856
 we have the search dialogue and
 the search widget.  This link 

06:28:51.057 --> 06:28:53.165
will take you to more 
information about that.    

06:28:53.166 --> 06:28:57.051
What about filter and sort 
options?  Hugely important.    

06:28:57.357 --> 06:29:01.244
Again we often saw they were 
hidden or sort of further down 

06:29:01.245 --> 06:29:04.248
and people couldn't get to them 
as much as they needed.   That's

06:29:04.352 --> 06:29:07.652
 what the study that we did 
recently showed.    ou know, we 

06:29:07.653 --> 06:29:10.246
saw great implementations of it 
and still there is more work to 

06:29:10.247 --> 06:29:15.768
be done.  Things like getting 
down to 242 results for search 

06:29:15.769 --> 06:29:18.981
with no way to filter, sort them
 further.  A better 

06:29:18.982 --> 06:29:23.674
implementation is to have a 
really nice clear button filter,

06:29:23.865 --> 06:29:27.968
 people can see that quite 
clearly and easily and this 

06:29:27.969 --> 06:29:31.053
example for a panel, it the 
panel sliding out with all of 

06:29:31.054 --> 06:29:35.361
the right sort of search options
 for them.   You can sort   by 

06:29:35.362 --> 06:29:39.383
best match, latest collection, 
that kind of thing.  One thing I

06:29:39.578 --> 06:29:44.083
 saw with filters like this was 
some companies were taking, for 

06:29:44.084 --> 06:29:47.579
example, the sizing away when 
the inventory wasn't available. 

06:29:47.824 --> 06:29:50.654
 That caused a problem for 
people.  They didn't know if 

06:29:50.655 --> 06:29:54.788
they would ever have their size 
in stock.  Imagine you know 

06:29:54.789 --> 06:29:57.588
extra small being taken away 
just because it wasn't in stock,

06:29:57.691 --> 06:30:00.400
 people didn't know if it would 
come back.  Better experience 

06:30:00.401 --> 06:30:04.493
for that is something like, you 
know, enabling them to perhaps 

06:30:04.494 --> 06:30:08.604
sign up to find out when it is 
back in stock.  He certainly 

06:30:08.605 --> 06:30:11.495
showing it, showing it
in a stable state, it is good.  

06:30:13.788 --> 06:30:18.001
 another thing I like about this
 design, it is very clear when 

06:30:18.002 --> 06:30:21.398
you're clearing the filters or 
applying the filters in a 

06:30:21.399 --> 06:30:24.313
separate check at the top in 
order to close the panel so that

06:30:24.607 --> 06:30:29.713
 there is not confusion about 
what closing the panel does.  

06:30:29.714 --> 06:30:36.617
Keeping on this topic of search 
we have other methods that will 

06:30:36.618 --> 06:30:40.808
help with people with their 
search.  One of those, adding 

06:30:40.809 --> 06:30:44.720
custom suggestions that can be 
created from data in your 

06:30:44.721 --> 06:30:48.022
application, so that can really 
help people with their search.  

06:30:48.023 --> 06:30:54.823
Another one, recent quarry 
suggestions.  All these 

06:30:54.824 --> 06:30:57.006
technologies and facilities can 
make that search experience 

06:30:57.007 --> 06:30:59.453
better.  Thinking through the 
search experience in more depth 

06:30:59.454 --> 06:31:01.454
is a good topic.

06:31:07.337 --> 06:31:11.129
enough experience for finding, 
learning about, purchasing 

06:31:11.130 --> 06:31:15.044
products.  Let's look at a 
couple of things that the study 

06:31:15.045 --> 06:31:17.758
revealed about conversions and 
helping to drive that conversion

06:31:18.055 --> 06:31:24.130
 experience.    
Enabling comparison shopping 

06:31:24.131 --> 06:31:27.936
features.  In this example on 
the left here we're in a real 

06:31:27.937 --> 06:31:31.536
estate app here and people are 
just -- they're only able to 

06:31:31.537 --> 06:31:35.060
scroll down and look at the 
different homes.  Anything they 

06:31:35.061 --> 06:31:39.048
like, they have to commit to 
memory.  People, you know,   us,

06:31:39.354 --> 06:31:45.748
 you, me, we're all cognitive 
meisers that don't want to use 

06:31:45.749 --> 06:31:48.869
our brain that much.  The user 
is using their brain, 

06:31:48.870 --> 06:31:51.167
remembering where they saw 
things, so forth.  We can do 

06:31:51.168 --> 06:31:54.170
better.    
Some of those things that we saw

06:31:54.361 --> 06:31:58.091
 that were implemented to help 
people in this way were letting 

06:31:58.092 --> 06:32:03.202
people kind of book mark items 
that they saw so that they can 

06:32:03.203 --> 06:32:06.792
compare them.  It still is 
pretty difficult on mobile to do

06:32:07.102 --> 06:32:11.395
 this.  Still anything we can do
 helps.  The example I will show

06:32:11.697 --> 06:32:17.085
 you here, it enabled people to 
compare and then you can see it 

06:32:17.086 --> 06:32:20.842
is quite constrained with the 
size of the phone.  Still you're

06:32:20.843 --> 06:32:23.054
 bringing that information 
together.  It means that they 

06:32:23.297 --> 06:32:26.553
could ignore all of the other 
homes they don't care about.   

06:32:26.554 --> 06:32:28.895
They can compare the bedrooms 
it, they can compare the 

06:32:28.896 --> 06:32:33.208
bathrooms, the cost of the home,
 so forth.     know this is 

06:32:33.209 --> 06:32:37.320
needed because in the study we 
saw people do work arounds for 

06:32:37.321 --> 06:32:42.513
this.  In retail we saw people 
add items to their cart just so 

06:32:42.514 --> 06:32:45.622
that they could look at them all
 in the same place.  That was 

06:32:45.623 --> 06:32:48.214
the users that thought about 
doing that.    

06:32:48.513 --> 06:32:51.110
Other people struggled.    
We know that this is needed.  T

06:32:51.408 --> 06:32:54.203
hink   about the comparisons and
 the browsing experience

06:32:57.328 --> 06:33:00.632
 that people are needing within 
your app.    

06:33:00.930 --> 06:33:05.425
Then making it easy to add and 
manage payment methods.   I 

06:33:06.109 --> 06:33:08.316
actually came across a poor 
example of this the other day.  

06:33:08.317 --> 06:33:14.819
 It was when I went to purchase 
-- I was going on vacation again

06:33:14.820 --> 06:33:20.688
 -- I like to go on vacation -- 
I was making a reservation for a

06:33:24.462 --> 06:33:26.923
 rental home.  I got to the 
point where I needed to update 

06:33:26.924 --> 06:33:31.119
my cards.  My model in my head 
was a new card had arrived and 

06:33:31.407 --> 06:33:34.227
it is simply the same card as 
before, it just had a new date 

06:33:34.228 --> 06:33:39.128
on it.  In my mind my mental 
model, that's the same card, 

06:33:39.129 --> 06:33:42.635
just needs replacing, it is not 
a new payment method.  I 

06:33:42.636 --> 06:33:46.722
expected to be able to edit my 
existing card.  There was no 

06:33:46.723 --> 06:33:50.734
facility to do that.  I kind of 
had to understand the developer 

06:33:50.735 --> 06:33:52.735
model that I needed to add a new
 payment method. 

06:33:57.736 --> 06:34:01.139
 to the point where they're 
supposed to be checking out, but

06:34:01.140 --> 06:34:05.038
 there is no way to edit card or
 add a new card.  That's 

06:34:05.039 --> 06:34:08.520
somewhere else, in some other 
settings.  You know, most of us 

06:34:08.521 --> 06:34:11.064
don't think -- well, you know, 
I'm going to wake up in the 

06:34:11.065 --> 06:34:14.041
morning and think I need to 
manage my payment methods in the

06:34:14.240 --> 06:34:17.842
 app kind of as a separate 
activity.  We tend to think 

06:34:17.843 --> 06:34:21.157
about it when we need to do it 
when we come to pay.    

06:34:21.158 --> 06:34:25.354
This is a problem here.  In this
 example it is much better.  

06:34:25.355 --> 06:34:31.046
There is an option to edit 
existing cards, to add a new 

06:34:31.047 --> 06:34:37.364
payment method, and provide 
multiple payment methods here 

06:34:37.365 --> 06:34:41.160
and lead people to a very clean 
form design here when the user 

06:34:41.161 --> 06:34:46.057
is chosen to pick -- to add a 
new credit card and they can 

06:34:46.058 --> 06:34:48.754
even scan their card if they 
wish to.  Making that experience

06:34:50.307 --> 06:34:52.307
 nice and

06:34:56.355 --> 06:35:00.469
 clean.    
A facility we offer at Google, 

06:35:00.470 --> 06:35:05.896
Android Pay, making that a 
choice to pay.  The idea, it is 

06:35:05.897 --> 06:35:07.779
simple for the user  , seamless 
for the user to pay through 

06:35:07.780 --> 06:35:11.877
Android Pay and this is a talk I
 think about it at I/O and more 

06:35:11.878 --> 06:35:13.878
information that puck get at 
this link.

06:35:18.976 --> 06:35:22.476
really popular with, you know, 
companies and developers because

06:35:22.573 --> 06:35:24.877
 it seems to be that that's 
where we can get engagement from

06:35:25.079 --> 06:35:28.511
 the user and that's where the 
user commits to us.  We have 

06:35:28.668 --> 06:35:32.274
known for a long time that 
providing the registration 

06:35:32.666 --> 06:35:35.686
barriers upfront can be a big 
hurdle for people to get to.  It

06:35:35.897 --> 06:35:40.980
 is better to offer them 
something first so that they can

06:35:41.340 --> 06:35:45.023
 feel -- start to feel 
engagement from their side to 

06:35:45.184 --> 06:35:47.688
the company.  There's a couple 
of other things I want to talk 

06:35:47.689 --> 06:35:50.487
about today with regard to 
registration.    

06:35:50.488 --> 06:35:53.962
We saw users struggle with 
signing in and signing up.   It 

06:35:53.963 --> 06:35:59.197
is a tricky thing h we often see
 users starting to fill out a 

06:35:59.685 --> 06:36:01.685
form if provided one and 
realizing that they were signing

06:36:01.707 --> 06:36:05.410
 in when they were supposed to 
be signing up and vice versa.  

06:36:05.411 --> 06:36:08.606
It probably happened to all of 
us.    

06:36:08.607 --> 06:36:12.393
We found better experience when 
people were just given the 

06:36:12.394 --> 06:36:16.691
option to sign in or register, 
the words, they were very 

06:36:16.692 --> 06:36:19.779
different, they could 
differentiate them and we could 

06:36:19.780 --> 06:36:23.112
channel them down the right kind
 of route so that they didn't 

06:36:23.113 --> 06:36:25.113
get into that 

06:36:28.096 --> 06:36:30.797
model.    
We have lots of solutions for 

06:36:30.994 --> 06:36:33.501
registration and identity at 
Google.  We have a whole 

06:36:34.017 --> 06:36:37.305
identity platform that I would 
encourage you to look at.  It is

06:36:38.200 --> 06:36:41.199
 basically an all-system and has
 several components and 

06:36:41.200 --> 06:36:47.828
different choices for you to 
make.  One of these, sign-in for

06:36:47.829 --> 06:36:51.724
 Android, it enands a user to 
sign in with the different 

06:36:51.725 --> 06:36:54.274
credentials on Google, the 
intent is to make that process 

06:36:54.275 --> 06:36:56.902
more seamless and simple for 
them.    

06:36:56.903 --> 06:37:01.091
Talking of that, there are other
 ways to make password 

06:37:01.092 --> 06:37:04.317
authentication a frictionless 
experience.  We have all been in

06:37:04.520 --> 06:37:07.124
 this situation where it just 
doesn't work for us.  It is 

06:37:07.125 --> 06:37:10.420
quite painful on mobile to put 
your password in and it is not 

06:37:11.121 --> 06:37:15.722
working.  It can be even worse 
in apps because we often found 

06:37:15.723 --> 06:37:18.568
this is a had place where people
 were sent back out to the 

06:37:18.569 --> 06:37:21.830
mobile web.    
You're in that loop again and 

06:37:21.831 --> 06:37:23.455
that's even more aggravating.  

06:37:23.456 --> 06:37:27.529
We have talked about one 
solution for easing that 

06:37:27.530 --> 06:37:30.717
enabling people to sign in.  A
nother one that we saw that's 

06:37:30.718 --> 06:37:36.557
becoming much more popular is 
fingerprint signin.  In our 

06:37:36.636 --> 06:37:39.632
study we found that people were 
pretty happy about this.   They 

06:37:39.633 --> 06:37:43.361
like the idea very much of doing
 this.  This is a good thing to 

06:37:43.362 --> 06:37:45.362
look

06:37:46.747 --> 06:37:50.634
 into.  We have more 
implementation details for you 

06:37:50.635 --> 06:37:55.159
here by using fingerprint scans 
on supported devices.

06:37:58.309 --> 06:38:02.941
   Smart lock, another part of 
our identity system enabling you

06:38:03.740 --> 06:38:07.149
 to automatically sign users 
into the app using credentials 

06:38:07.150 --> 06:38:10.536
that they have saved.  That's 
another really good one.  Part 

06:38:10.537 --> 06:38:15.131
of this federated identity 
provision.    

06:38:15.132 --> 06:38:20.360
If you haven't got that far with
 users, there is also sign in 

06:38:20.361 --> 06:38:25.845
hints.  This allows us to use 
the credit        credentials 

06:38:25.846 --> 06:38:29.370
and give hints for the user 
name, email address, everything 

06:38:29.371 --> 06:38:33.968
is done to ease that sign in 
hurdle. 

06:38:38.854 --> 06:38:41.379
design about form entry for 
years and years.  We did lots of

06:38:41.771 --> 06:38:48.573
 work on form entry for desktops
 and when we went to the mobile 

06:38:48.574 --> 06:38:51.564
web we kind of had to relearn 
all of that again and   again.  

06:38:51.565 --> 06:38:54.369
You will remember when the forms
 used to be really, really tiny,

06:38:54.469 --> 06:38:59.795
 and you had to expand them to 
fill out the form.  It has been 

06:38:59.796 --> 06:39:02.475
better with apps because we're 
designing forms from the get go 

06:39:02.476 --> 06:39:06.378
for the mobile devices.    
I'm pleased to say, I think we 

06:39:06.379 --> 06:39:09.882
have come a long way.   There is
 still things we saw in our 

06:39:09.883 --> 06:39:11.883
study that could be 

06:39:16.085 --> 06:39:18.291
improved.  This is Sunday 
building user friendly forms  . 

06:39:18.292 --> 06:39:21.672
 I saw some apps requiring users
 to do a lot of work on their 

06:39:21.673 --> 06:39:25.158
part, putting the curser in 
several different fields for 

06:39:25.159 --> 06:39:27.687
their phone numbers, things like
 this, it takes a lot of effort 

06:39:27.688 --> 06:39:32.111
on the part of the user.  Also 
not being able to see what form 

06:39:32.112 --> 06:39:34.785
fields were coming up was a 
problem for users.  It was hard 

06:39:34.786 --> 06:39:37.987
for them to.
Build their mental model of what

06:39:38.195 --> 06:39:41.796
 they were filling in next.  If 
caused them frustration and was 

06:39:42.094 --> 06:39:44.094
definitely a friction point.  

06:39:47.509 --> 06:39:51.705
 engagement here is doing more 
work on the back end.  You know,

06:39:51.891 --> 06:39:56.407
 whether the user wants to write
 in their phone number with 

06:39:56.408 --> 06:39:59.301
dashes in between the numbers, 
with spaces in between the 

06:39:59.302 --> 06:40:03.792
numbers, or just as one long 
field, we need to cater for that

06:40:03.793 --> 06:40:07.826
 and make it -- it is a bit more
 work for us on the development 

06:40:07.827 --> 06:40:10.720
side, but it makes it a whole 
lot easier for the user to 

06:40:10.721 --> 06:40:14.539
understand what they're doing 
and not get, you know, an error 

06:40:14.540 --> 06:40:16.409
return.    
Also, you know, whether there 

06:40:16.410 --> 06:40:22.021
are errors providing those in 
line is really helpful and here 

06:40:22.022 --> 06:40:26.430
we have an app that does a good 
job of moving the form up the 

06:40:26.618 --> 06:40:32.417
field as the user fills it in 
and we found that was a very of 

06:40:32.418 --> 06:40:37.947
advantage to users.    
 it was an advantage to users.  

06:40:37.948 --> 06:40:41.042
We have great text fields 
through material design and it 

06:40:41.636 --> 06:40:43.636
talks about the aspects of 
creating a

06:40:49.241 --> 06:40:51.150
 good form.    
Specifically for places, we can 

06:40:51.151 --> 06:40:55.653
use places auto complete as part
 of the places API again helping

06:40:55.836 --> 06:41:02.448
 for filling in those form 
fields that require location.  

06:41:02.449 --> 06:41:05.050
Another aspect to form design is
 matching the coat board with 

06:41:05.051 --> 06:41:08.439
the required text inputs.  This 
is a fairly well-known thing to 

06:41:08.440 --> 06:41:13.057
do.  We saw significant apps not
 doing this well.  When the user

06:41:13.325 --> 06:41:16.266
 puts the curser in the credit 
card field and you have this in 

06:41:16.562 --> 06:41:20.060
your app, check it out.  Is it 
doing the right thing, right?

06:41:20.061 --> 06:41:23.458
This example here, it is not 
doing the right thing, the user 

06:41:23.459 --> 06:41:27.375
is left with this keyboard and 
they don't have anyway of 

06:41:27.376 --> 06:41:30.652
getting the right keyboard up, 
not -- you now, not usually they

06:41:30.857 --> 06:41:33.480
 hit the number key over here 
and then they'll get the 

06:41:33.862 --> 06:41:40.471
keyboard with the numbers along 
the top as opposed to designing 

06:41:41.182 --> 06:41:48.849
that appropriately and when the 
curser is in there bringing up 

06:41:48.850 --> 06:41:55.064
the numeric keyboard for them.  
Little things like this.  These 

06:41:55.280 --> 06:41:57.561
things add up and checking out 
the form design in this way, it 

06:41:57.562 --> 06:42:00.959
is helpful for people.    
We have information on 

06:42:00.960 --> 06:42:05.071
specifying input methods and the
 correct keyboard that you can 

06:42:05.072 --> 06:42:07.072
find at this

06:42:12.787 --> 06:42:15.379
 link.  Lastsly, usability, 
comprehension.  Those are the 

06:42:15.380 --> 06:42:20.387
small things to do that we saw 
in studies throughout the app to

06:42:20.682 --> 06:42:23.766
 make a more seamless experience
 for users.  It can be critical 

06:42:23.767 --> 06:42:27.687
for ensuring a good user 
experience and not having users 

06:42:27.688 --> 06:42:33.787
get stuck or abandon their 
experience at any point.  This 

06:42:33.788 --> 06:42:37.685
one is about providing text 
labels and visual keys to 

06:42:37.686 --> 06:42:41.871
clarify the visual information. 
 We saw this earlier.    

06:42:41.872 --> 06:42:45.497
In my story, I was specifically 
missing a visual key.   I just 

06:42:45.498 --> 06:42:49.793
needed those waves in the   I 
can churr to help me understand 

06:42:49.794 --> 06:42:52.300
--  in the picture to help me 
understand the orientation of 

06:42:54.297 --> 06:42:56.587
the hotel.    
Look at this example here.  Take

06:42:56.791 --> 06:42:59.917
 a couple of moments.   Decide 
for yourself what you think 

06:42:59.918 --> 06:43:01.918
those 

06:43:11.107 --> 06:43:13.301
icons represent.    
Some of them perhaps more 

06:43:13.302 --> 06:43:20.125
obvious than others  .  You look
 at the answer.  Here we go.    

06:43:20.429 --> 06:43:25.140
It is my trips, book, club, 
account.  Did anyone get them 

06:43:25.141 --> 06:43:27.141
right?

06:43:28.626 --> 06:43:34.323
I think problem play accounts 
wasn't too bad.  The lesson here

06:43:34.324 --> 06:43:38.630
 that we saw is again I think it
 is over generalizing, you know.

06:43:38.631 --> 06:43:43.434
  It is like the role we would 
give, it is when icons are vague

06:43:43.630 --> 06:43:47.232
 then they definitely need text 
labels.  The trouble is in 

06:43:47.233 --> 06:43:51.345
saying, you know, when icons are
 vague, we all have different 

06:43:51.346 --> 06:43:56.357
levels of understanding with 
regard to that.  You have to, I 

06:43:56.358 --> 06:44:00.915
think, assume that a lot of your
 icons are going to be vague.  I

06:44:01.055 --> 06:44:05.340
 can give you an example.    
You know the icon for filter 

06:44:05.341 --> 06:44:08.955
that looks kind of like this?  
You would think that would be 

06:44:08.956 --> 06:44:13.237
fairly universal.  It is drawn 
in different ways across many 

06:44:13.238 --> 06:44:16.859
different apps and we didn't 
find it universally understood 

06:44:16.860 --> 06:44:20.359
among people.    
I think that we have to, you 

06:44:20.360 --> 06:44:23.951
know, change our level set with 
regard to which -- you know, the

06:44:23.952 --> 06:44:28.439
 number of icons in our apps 
that need to have labels if 

06:44:28.440 --> 06:44:31.067
people are going to understand 
this.  That's a great place to 

06:44:31.068 --> 06:44:33.836
do simple it testing and to see 
the difference between the 

06:44:33.837 --> 06:44:35.837
providing labels and not 
providing labels. 

06:44:40.259 --> 06:44:44.050
 details for when you want to 
use text and icons for buttons. 

06:44:44.051 --> 06:44:51.355
 If you have that there.  
Talking of labeling things it 

06:44:51.356 --> 06:44:54.570
makes me aware of majority my 
application accessible.  We have

06:44:54.571 --> 06:44:57.774
 a lot of the guidelines here 
for you to make sure that your 

06:44:57.775 --> 06:44:59.775
application is accessible. 

06:45:11.258 --> 06:45:15.124
go in today is asking for 
permissions in context.  This is

06:45:11.258 --> 06:45:17.473
 something that we enabled with 
Android and it is a significant 

06:45:17.474 --> 06:45:24.090
number of apps making advantage 
of it.  It is possible in I/O   

06:45:24.480 --> 06:45:30.473
     in IoS.  In this   example,
 they download, load the app, 

06:45:30.474 --> 06:45:34.095
they're asked if the location 
can be used, this was an app 

06:45:34.096 --> 06:45:36.665
suggested by someone else, they 
said it was a good app if you 

06:45:36.666 --> 06:45:40.888
want to learn about home decor, 
it has it cool things you can 

06:45:40.889 --> 06:45:47.196
buy.  It is kind of similar to 
how we would think of 

06:45:47.197 --> 06:45:49.197
problematic registration when 
you ask for that upfront and it 

06:45:49.199 --> 06:45:54.987
is a hurdle to get over.  This 
is the same thing for users.  It

06:45:54.988 --> 06:45:57.296
 is like the developer says 
provide me with the location 

06:45:57.297 --> 06:45:59.297
before I give you anything else.

06:46:05.993 --> 06:46:10.093
just want to look behind that.  
A better way to do that, you can

06:46:10.487 --> 06:46:13.806
 do that because of Android of N
 is doing that with context in 

06:46:13.807 --> 06:46:17.583
run time.  In this example we 
have people searching for a 

06:46:17.584 --> 06:46:21.608
store, so much better because 
the user has their own 

06:46:21.609 --> 06:46:24.776
motivation, they want to be able
 to find that store and then 

06:46:24.777 --> 06:46:28.088
what happens next is even more 
clear for them.  There is a map 

06:46:28.089 --> 06:46:32.788
that comes up behind and it 
allows -- it ask ises can we use

06:46:32.789 --> 06:46:36.071
 the location.  Of course you 
can.    

06:46:36.072 --> 06:46:40.390
You're much more likely to get 
acceptance if you ask in 

06:46:40.601 --> 06:46:42.907
context.  We have lots of 
resources for you for this.  We 

06:46:42.908 --> 06:46:47.905
have great little videos and 
implementation details about 

06:46:48.413 --> 06:46:51.530
being able to request 
permissions in run time.    

06:46:51.531 --> 06:46:55.322
It is simply in the principals 
because although, you know, I 

06:46:55.323 --> 06:46:57.695
know many of you know about it, 
we saw it a lot in the apps that

06:46:58.106 --> 06:47:03.013
 we studied recently.  That's 
why it is here.    

06:47:03.014 --> 06:47:06.275
That brings me to the end of the
 principles I'm going to go 

06:47:06.523 --> 06:47:09.314
through with you.  We have gone 
through each of the tractor   

06:47:11.704 --> 06:47:16.519
      structures and you can 
find more online.  They're all 

06:47:16.520 --> 06:47:21.838
online at thinkwithgoogle and I 
made a short link for you here 

06:47:21.839 --> 06:47:27.736
specifically to the principles, 
better mobile user experience.

06:47:31.617 --> 06:47:34.216
  There is multiple sets of 
principles.  There is mobile app

06:47:35.206 --> 06:47:40.016
 principles, new sets of 25 
mobile principles, a new set of 

06:47:40.017 --> 06:47:44.368
25 principles for retail, both 
web and app.   Again we did a 

06:47:44.369 --> 06:47:47.923
study to create the information 
provided from that there.  There

06:47:47.924 --> 06:47:52.728
 is the mobile web principles 
that we have published 

06:47:52.729 --> 06:47:56.322
previously that you may have 
already seen all at this link.  

06:47:56.323 --> 06:47:59.838
Sameling.    
                 Same link.  If 

06:47:59.839 --> 06:48:01.937
you want more implementation 
details on the mobile

06:48:06.540 --> 06:48:07.128
 website, that's part of the web
 fundamentals site and that 

06:48:07.129 --> 06:48:10.392
particular link I provided with 
you there, it provides 

06:48:10.728 --> 06:48:14.722
additional developer 
implementation details.    

06:48:14.723 --> 06:48:21.153
Before I go, I want to tell you 
about one more story from the 

06:48:21.154 --> 06:48:24.336
study.     the study a number of
 apps had implemented the 

06:48:24.337 --> 06:48:29.747
ability to scan your credit card
 in order to pay.  We had a few 

06:48:29.748 --> 06:48:36.351
people   in the study that had 
used that before, came across 

06:48:36.352 --> 06:48:40.076
it, liked it.  We had some 
people that encountered this for

06:48:40.077 --> 06:48:43.367
 the first time.  If you think 
about the word scan, my most 

06:48:43.368 --> 06:48:45.859
familiar experience I think with
 the word scan is when I go to 

06:48:45.860 --> 06:48:50.842
the grocery store and I scan my 
credit card.   Right.  I'm 

06:48:50.843 --> 06:48:54.759
putting in my in credit card -- 
putting it through another 

06:48:54.760 --> 06:48:59.553
machine.  That's scanning.  
Another place I know of the word

06:48:59.554 --> 06:49:04.946
 scan, it is, you know, putting 
paper on a photocopier.  That's 

06:49:04.947 --> 06:49:08.269
a longer ago.  That's still 
scanning, putsing something on 

06:49:08.270 --> 06:49:12.072
top of each other.    
The users come to this request 

06:49:12.073 --> 06:49:16.578
to scan a credit card.   That's 
their use of the word scan.  If 

06:49:16.579 --> 06:49:19.670
you imagine them trying to 
translate that, often the first 

06:49:19.671 --> 06:49:23.681
thing asked is can we use your 
camera.  Well, is the camera 

06:49:23.682 --> 06:49:26.389
anything to do with scanning my 
credit card?  Maybe.  I don't 

06:49:26.571 --> 06:49:29.595
really understand it, yeah, 
okay.  You can use my camera.   

06:49:31.786 --> 06:49:34.063
credit card here or to scan 
automatically.    

06:49:34.064 --> 06:49:37.593
Following the instructions, no 
surprise then we saw three 

06:49:37.594 --> 06:49:46.869
people in the study do this.    
&gt;&gt; (Laughter).    

06:49:46.870 --> 06:49:48.870
&gt;&gt; JENNIFER GOVE: They waited 
and waited. 

06:49:54.187 --> 06:49:57.590
 They thought it sounded like 
such a simple way to pay, they 

06:49:57.591 --> 06:50:00.738
were disappointed.  This is just
 about us understanding what 

06:50:00.889 --> 06:50:03.483
we're asking people to do and 
then the language you're using, 

06:50:03.484 --> 06:50:07.026
it is plain and simple 
usability.  We all love this to 

06:50:07.027 --> 06:50:09.027
work.
Unfortunately, it doesn't work 

06:50:09.184 --> 06:50:10.679
yet.    
It makes sense, right?  What 

06:50:10.680 --> 06:50:15.698
they were doing.  Because of 
what they were told to do.    

06:50:15.699 --> 06:50:18.091
Again, I return to that point I 
made earlier, which is 

06:50:18.092 --> 06:50:21.287
understanding the user 
experience end-to-end, 

06:50:21.288 --> 06:50:24.787
understanding the flow and the 
pain points, really important.  

06:50:28.006 --> 06:50:32.203
 where, you know, you make a 
really good app experience for 

06:50:32.204 --> 06:50:37.500
your users.  Not one where the 
user is frustrated and not the 

06:50:37.501 --> 06:50:40.597
kind of frustration I felt like 
after I have used my app and 

06:50:40.598 --> 06:50:45.599
gone up to my hotel room and 
seen that car parked outside of 

06:50:45.600 --> 06:50:51.109
the window.  I want you to be 
able to make app experiences 

06:50:51.110 --> 06:50:54.903
that makes life feel 
frictionless, much like a view 

06:50:54.904 --> 06:50:58.416
of the beach.  I want to end 
with you having three takeaways.

06:51:00.503 --> 06:51:03.795
  These are three steps that you
 can think about doing after 

06:51:03.796 --> 06:51:09.507
this talk.    
Taking a look hat your app and 

06:51:09.508 --> 06:51:13.604
auditing the app against the 25 
principles simply like what are 

06:51:13.605 --> 06:51:18.207
we do in each experience and is 
it measuring up.  That's going 

06:51:18.208 --> 06:51:23.202
to get you a long, long way.  
Your app is unique.  You have to

06:51:23.417 --> 06:51:28.303
 really understand your key user
 journeys and understanding the 

06:51:28.304 --> 06:51:31.805
breakdown points.  What I have 
been provided for my hotel app, 

06:51:31.806 --> 06:51:34.332
it was really exciting to me, 
but it had points that   broke 

06:51:34.333 --> 06:51:39.107
down for me such that it didn't 
end up working well in the end. 

06:51:40.427 --> 06:51:45.024
your own user testing and this 
guide from Google Ventures 

06:51:45.215 --> 06:51:51.919
provides a lot of resources for 
getting going for user research 

06:51:52.924 --> 06:51:55.403
in a small way so that you can 
see the good things you provide 

