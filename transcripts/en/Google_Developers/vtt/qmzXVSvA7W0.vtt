WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:05.230
&gt;&gt; CHABOT: Check, check. Hello, everyone,
I'm Chris Chabot and we're here today for,

00:00:05.230 --> 00:00:10.030
"What's the hubbub about the Google Buzz API's."
So if you're not here to learn about the Google

00:00:10.030 --> 00:00:14.690
Buzz API's, you should probably in the wrong
room; if you are, it's going to be awesome.

00:00:14.690 --> 00:00:19.580
So I'm Chris Chabot and you can find me in
Google Buzz that's buzz.google.com/chabotc

00:00:19.580 --> 00:00:25.910
and I'm also @chabotc on Twitter. If you are
tweeting about the event, we have two hashtags

00:00:25.910 --> 00:00:33.859
up that's the I/O 2010 and for this talk we're
using the hash Buzz API. Also we're using

00:00:33.859 --> 00:00:38.539
wave, live waving which is completely awesome
in conferences and I think the previous session

00:00:38.539 --> 00:00:43.070
covered Wave pretty well as well. So if you
want to see life notes, if you want to ask

00:00:43.070 --> 00:00:46.149
questions or anything else, we invite you
to join this URL. And you can answer your

00:00:46.149 --> 00:00:53.629
questions there and we'll get to it at the
end of the session. So I wanted to start with

00:00:53.629 --> 00:00:59.269
a little story. Two years ago we had the first
Google I/O, and at our first Google I/O, we're

00:00:59.269 --> 00:01:04.409
also just start a talking about open social
and we told people the web is better when

00:01:04.409 --> 00:01:09.240
it's social. And back in the date two years
ago, social was still relatively new concept

00:01:09.240 --> 00:01:14.100
and we started sessions asking people to raise
their hand, who had the social profile or

00:01:14.100 --> 00:01:18.720
not. Nowadays, you can't even imagine that
anymore because the web has already become

00:01:18.720 --> 00:01:23.150
so social that having a social profile on
some kind of a social site this is common

00:01:23.150 --> 00:01:28.940
as having a mobile phone. And I think we send
you a mobile phone so a few are pretty secure

00:01:28.940 --> 00:01:33.410
saying that. The point though is that the
web is becoming a social place. We're moving

00:01:33.410 --> 00:01:38.570
from a web that used to be about static information
where you have documents and big blobs of

00:01:38.570 --> 00:01:44.260
text to a web that is about people connecting
with your friend, sharing experiences, playing

00:01:44.260 --> 00:01:49.820
together, doing projects together, and talking
together. And as this phenomenon is growing

00:01:49.820 --> 00:01:54.340
and growing, we are running into a few interesting
challenges, the challenges are that the web

00:01:54.340 --> 00:01:59.409
is really a big place. There's all this different
destinations that you can go to but every

00:01:59.409 --> 00:02:03.260
destination talks a different language, a
different culture, it can talk a different

00:02:03.260 --> 00:02:09.060
protocol, it can have different terms of service,
it can have different contractual things that

00:02:09.060 --> 00:02:13.930
you need to fill in before you can do business
with them. That's a potential issue because

00:02:13.930 --> 00:02:19.010
your customers might be in the one of those
locations where you don't speak the language

00:02:19.010 --> 00:02:22.510
or you don't understand the protocol. So we'd
like to solve that problem here at Google.

00:02:22.510 --> 00:02:27.400
We believe that anything that is good for
the web is good for Google in the end so we

00:02:27.400 --> 00:02:32.070
want the entire web to be very successful;
it is in our interest as well. So when we

00:02:32.070 --> 00:02:37.390
were working in Google Buzz we first had done
it, we said we think it's very important that

00:02:37.390 --> 00:02:41.650
we're going to build a platform that uses
all these open protocols that we do our biz

00:02:41.650 --> 00:02:46.580
to help push the standards forward and help
develop the web in such a way that you can

00:02:46.580 --> 00:02:50.360
be social anywhere in the web, that you can
join the conversation anywhere in the web,

00:02:50.360 --> 00:02:56.550
that you can talk to people, connect to people,
play with people, share with people and everywhere.

00:02:56.550 --> 00:03:01.130
It should be part of the infrastructure of
the web; it shouldn't be a special destination.

00:03:01.130 --> 00:03:05.000
So when we build Google Buzz, we looked at
a lot of open protocols and one of them is

00:03:05.000 --> 00:03:11.770
OAuth. OAuth is an old protocol that's been
around for a while and it's the effect of

00:03:11.770 --> 00:03:15.590
protocol that people use for authenticating
themselves against the servers proving that

00:03:15.590 --> 00:03:20.770
they have access to something. We also had
Atom, an Atom POP which has been around for

00:03:20.770 --> 00:03:25.849
a long time since the beginning of the blogging
days and it defines a rich format for exchanging

00:03:25.849 --> 00:03:29.349
information with each other and there's a
lots of libraries out there all ready that

00:03:29.349 --> 00:03:34.430
are able to reached streams in certain formats.
And there's a lot of people have experienced

00:03:34.430 --> 00:03:38.989
programming Atom POP using REST APIs and it's
a formative words really well on the Web,

00:03:38.989 --> 00:03:44.370
so there was a logical choice for us to make.
The other thing is the RSS and RSS media which

00:03:44.370 --> 00:03:51.480
define how pictures and other media can be
attached within a stream. Some cases, protocols

00:03:51.480 --> 00:03:55.630
weren't fully developed yet and we spend a
lot of time on creating them. For instance,

00:03:55.630 --> 00:04:01.170
Pubsubhubbub is one of the protocols that
makes it real time. You don't want to go to

00:04:01.170 --> 00:04:06.060
a service and say are there any updates available
for me? Are there any updates available? If

00:04:06.060 --> 00:04:09.450
you keep doing that all the time, it's not
going to be a real time, it's going to be

00:04:09.450 --> 00:04:14.120
difficult to program and it's not going to
be very efficient either so. Push as we quote

00:04:14.120 --> 00:04:20.460
in short makes it possible for content to
be pushed to you in real time. Activity Stream

00:04:20.460 --> 00:04:25.430
was the format that we used to describe the
content that you'd be downloading when you're

00:04:25.430 --> 00:04:30.820
talking to the service and Activity Stream
has a lot of rich information to Atom that

00:04:30.820 --> 00:04:35.850
tells people what is happening, where it's
happening, et cetera. And, finally, we needed

00:04:35.850 --> 00:04:40.870
something which isn't currently endorsed yet
but will be very soon and that's Salmon. The

00:04:40.870 --> 00:04:47.330
problem space is that you're creating a message
on a different platform and you want to, that

00:04:47.330 --> 00:04:52.240
match is to be pushed back into Buzz again.
So you need a way for confrontations to be

00:04:52.240 --> 00:04:57.150
able to flow back upstream. And there's going
to be a session later today by John Panzer

00:04:57.150 --> 00:05:01.740
and Joseph Smarr, "Bridging the Islands" and
they're going to go into deep, they're going

00:05:01.740 --> 00:05:07.650
to do a deep dive into the technical details
about Salmon. So when we launched Buzz about

00:05:07.650 --> 00:05:13.820
I think 99 days ago, that's about right. We
launched with two interfaces and we're quite

00:05:13.820 --> 00:05:18.570
proud of them. We believe that the Gmail integration
worked really well. We're using it extensively

00:05:18.570 --> 00:05:23.690
inside of Google as well and I think most
of our ideas and concepts are now brainstormed

00:05:23.690 --> 00:05:28.850
about, within Google Buzz and our Gmail interface,
and we have a mobile version which is really

00:05:28.850 --> 00:05:33.510
interesting because you can do location types
of services on that as well. But we don't

00:05:33.510 --> 00:05:38.930
think that's enough. We want Buzz to be part
of a much bigger ecosystem. So, as of today,

00:05:38.930 --> 00:05:43.650
we're launching the Buzz APIs that allows
you to do everything that you see in the interface

00:05:43.650 --> 00:05:49.080
here. So you can do things like creating comments,
pushing comments into people's Buzz streams.

00:05:49.080 --> 00:05:53.949
You can readout comments, either a consumption
stream as we call to people you follow or

00:05:53.949 --> 00:05:59.419
your own stream. You can have rich media to
it like geolocations. You can do things like

00:05:59.419 --> 00:06:04.129
commenting, liking, deleting, muting frets
and that all the operations that are connected

00:06:04.129 --> 00:06:09.509
to a Buzz post, and you can attach pictures
and other rich media and you can work with

00:06:09.509 --> 00:06:15.199
comments. We're also very happy to announce
a couple of partners have been helping us

00:06:15.199 --> 00:06:20.020
to test the Buzz APIs we've been developing
as over the last two months and these are

00:06:20.020 --> 00:06:23.720
the companies that will be launching some
form of Buzz support today. So there's going

00:06:23.720 --> 00:06:28.130
to be a blogpost going out pretty soon that
will have links to their applications. And

00:06:28.130 --> 00:06:32.570
actually two of those partners are, have been
kind enough to come on stage here later in

00:06:32.570 --> 00:06:39.150
the session and talk about their experience
implementing the Buzz API. Before I gets started

00:06:39.150 --> 00:06:43.550
on how all of this works, I want to give you
a bit of a warning that we do call this a

00:06:43.550 --> 00:06:47.740
lab feature at the moment and that means that
we think that it's pretty much stable and

00:06:47.740 --> 00:06:51.139
done, but we also know there are few things
still need to be developed. There's a lot

00:06:51.139 --> 00:06:56.800
of open protocols where we still talking to
the community about what exactly the specification

00:06:56.800 --> 00:07:01.229
should look like. We think that's okay, we
like iterating in the open where everybody

00:07:01.229 --> 00:07:06.389
can weigh in with their opinions and experiences.
But that does mean that as these protocols

00:07:06.389 --> 00:07:11.080
progressed and are developed, we might have
to change our API in a few minor ways. So

00:07:11.080 --> 00:07:15.610
keep that in mind as you're developing that
there's going to be a few small changes down

00:07:15.610 --> 00:07:21.240
the road. So with that out of the way, I wanted
to start on how does API works. First of all,

00:07:21.240 --> 00:07:25.220
when you need to authenticate using OAuth
as I mentioned before, there's one thing slightly

00:07:25.220 --> 00:07:29.890
different if you look at to normal Google
OAuth for Web applications, webpage. You'll

00:07:29.890 --> 00:07:35.169
see lots of cool instructions there for how
to create your OAuth key and secret for your

00:07:35.169 --> 00:07:39.320
own Web application? However, when you're
using Buzz, the authentication URL where you

00:07:39.320 --> 00:07:43.430
redirect, the user needs to be a little bit
different and we've got it listed here. You

00:07:43.430 --> 00:07:47.190
also need a few additional parameters in there.
You need to scope a domain and an iconURL

00:07:47.190 --> 00:07:52.800
if you want to show your own logo. So if you
use that your authentication URL would look

00:07:52.800 --> 00:07:57.919
a little bit like this, it should be encoded,
of course, so keep that in mind. Once you

00:07:57.919 --> 00:08:02.419
do that you'll be redirected to a screen which
is modified from Google Buzz and it tells

00:08:02.419 --> 00:08:06.560
end users a little bit more about what they
are allowing an application to do. So you

00:08:06.560 --> 00:08:12.210
can see post, you can post stuff to your Buzz
stream, the application you can download information

00:08:12.210 --> 00:08:17.130
about the people that you are connected to
pictures, fun mails, et cetera. At the moment,

00:08:17.130 --> 00:08:22.539
you'll also notice that we have two [INDISTINCT]
screens that's a bit of a complicated issue.

00:08:22.539 --> 00:08:28.500
It has a lot to do with how our internal systems
work. We know that this is far from an ideal

00:08:28.500 --> 00:08:34.240
experience and it is going to be changed somewhere
in the future. After you've authenticated

00:08:34.240 --> 00:08:38.750
and you have to fill OAuth talking setup,
you can talk to this REST API endpoint. As

00:08:38.750 --> 00:08:44.800
I said it Atom POP based so that means that
for every action that you do with the Buzz

00:08:44.800 --> 00:08:49.550
API and you're using URLs to talk to it. For
instance, if you want to create an activity,

00:08:49.550 --> 00:08:55.640
you would use this URL/activities. We have
the documentation up for all the different

00:08:55.640 --> 00:09:00.440
endpoints that you can talk to at this URL.
So that's code.google.com/apis/buzz/docs and

00:09:00.440 --> 00:09:07.230
we've got very extensive big documentation
on every bit of the endpoints. I'm not going

00:09:07.230 --> 00:09:10.970
to do too much of deep dive because I think
we got difference, 60 different mutations

00:09:10.970 --> 00:09:16.040
that you can do there and that will take a
lot longer than this session is going to last.

00:09:16.040 --> 00:09:19.930
We also have a couple of very useful tools
that are going to make it a lot easier to

00:09:19.930 --> 00:09:23.570
play around for the Buzz API. The first thing
is something that's, the engineering team

00:09:23.570 --> 00:09:29.500
while developing the API came up with, they
really liked curl, and they saw that Twitter

00:09:29.500 --> 00:09:34.110
released of modified version of curl that
could talk to their API as well. We can do

00:09:34.110 --> 00:09:38.980
better than that. We can make a curl version
that works with any OAuth and able endpoint.

00:09:38.980 --> 00:09:43.240
So at this location, you could find a project
that they hacked up. It allows you to do a

00:09:43.240 --> 00:09:48.170
curl operation to any OAuth enabled endpoint,
and it also has a couple of Buzz specific

00:09:48.170 --> 00:09:53.361
hacks building so you can do an OA curl minus
Buzz login and it will log in to the Buzz

00:09:53.361 --> 00:09:58.270
services right away for you. So using these
two, you can go to the command line and use

00:09:58.270 --> 00:10:02.810
the rest already APIs already, if you want
to get serious about it. We also have started

00:10:02.810 --> 00:10:10.690
developing a couple of client libraries which
are going to make your life a lot easier if

00:10:10.690 --> 00:10:14.170
you're trying to build a web application.
And the PHP Client library is about 95% finished,

00:10:14.170 --> 00:10:17.630
the Python library about 90%, the Java library,
the same. They are open source on our Apache

00:10:17.630 --> 00:10:23.020
License, so if there's any functionality missing
or if you'd like to add anything to it, Apaches

00:10:23.020 --> 00:10:24.611
are completely welcome and you can find the
issue tracker and the source repository on

00:10:24.611 --> 00:10:32.320
these URLs. There's a few things that I wanted
to get out of the way as well about how does

00:10:32.320 --> 00:10:39.740
REST API works? So first of all, you build
up a URL for the endpoint you want to talk

00:10:39.740 --> 00:10:43.990
to, so we used buzz/v1 people to use the people
interface activities for the activities interface.

00:10:43.990 --> 00:10:48.370
But there's a couple of query parameters that
all of these endpoints have in common. The

00:10:48.370 --> 00:10:53.149
first is there's an alt, there's an alternative
output format. You can choose as a developer,

00:10:53.149 --> 00:10:59.850
you prefer to use Atom or JSON based out per
format. In our experience, 90% of the developers

00:10:59.850 --> 00:11:04.710
tend to like JSON, on the other hand the default
at the moment is Atom because there's a lot

00:11:04.710 --> 00:11:09.130
of legacy readers out there that are Atom
enabled, and the great thing about activity

00:11:09.130 --> 00:11:14.780
streams is that you can load up the URL for
your feed in any RSS or Atom reader and it

00:11:14.780 --> 00:11:19.870
would still work out of the bug, so that's
the reason why we're using Atom as a default

00:11:19.870 --> 00:11:22.920
output format. The other thing, if you're
developing especially if you're doing some

00:11:22.920 --> 00:11:27.160
stuff from the command line, you'd probably
like the pretty print format because usually

00:11:27.160 --> 00:11:32.649
we remove all the wide space, carriage returns,
et cetera, which makes things pretty unreadable

00:11:32.649 --> 00:11:36.870
if you're trying to see what the output is.
So by putting in to pretty print, you'll get

00:11:36.870 --> 00:11:41.839
a nicely formatted document back. The other
thing that we have on all rights operations

00:11:41.839 --> 00:11:46.680
is a preview mode. If you're trying to create
a Buzz post and you want to show a preview

00:11:46.680 --> 00:11:51.269
to the end user, how this Buzz post is going
to look like. For instance, you've attached

00:11:51.269 --> 00:11:56.560
pictures to it, there's a link attachment,
videos, et cetera. You can do a post to the

00:11:56.560 --> 00:12:01.760
endpoint for creating it and at preview equals
true and you will get back the representation

00:12:01.760 --> 00:12:05.750
of what that object will look like and you
can display it in your own user interface.

00:12:05.750 --> 00:12:11.220
So it's a great feature of letting users test
out what their actions are going to look like.

00:12:11.220 --> 00:12:15.450
And the other things when you're reading out
a long list of return formats like if you're

00:12:15.450 --> 00:12:20.200
getting a list of all the people you're connected
to, if you're getting a list of all the Buzz

00:12:20.200 --> 00:12:25.649
post, you can use the max results, max likes,
the max comments to determine how many results

00:12:25.649 --> 00:12:30.720
you want to get back. And there's also a continuation
to [INDISTINCT], if you're showing the first

00:12:30.720 --> 00:12:36.940
20 results, you want to be able to page it
to the next 20 as well. Finally, everything

00:12:36.940 --> 00:12:41.740
is also geo enabled both in what you will
get from the streams and what you can put

00:12:41.740 --> 00:12:46.810
into it. So there's search queries, there's
a couple of things you can add to it. You

00:12:46.810 --> 00:12:51.459
can add latitude and the longitude and a radius.
It allows you to search on some place on there,

00:12:51.459 --> 00:12:55.029
or you can do bounding box. For instance,
if you're developing a mobile application

00:12:55.029 --> 00:12:59.990
or using Google Maps to show all the different
post that are happening in some area. You

00:12:59.990 --> 00:13:04.990
can use a square [INDISTINCT] called bounding
box for all, to get all the results in that

00:13:04.990 --> 00:13:11.010
common area. Finally, I mentioned activity
streams in the introduction already. Activity

00:13:11.010 --> 00:13:14.459
streams define a couple of useful bits of
information that you need when you're rendering

00:13:14.459 --> 00:13:21.130
an output. The first is ruled that is action,
that's very important in social environment.

00:13:21.130 --> 00:13:25.040
The other thing you need to know is what do
they do? So for instance, in this case they

00:13:25.040 --> 00:13:31.000
were, I guess they're playing in this case.
It could also be martial arts practice but--so,

00:13:31.000 --> 00:13:35.220
activity needs to have a person that's doing
something. It needs to have an action that's

00:13:35.220 --> 00:13:40.950
being taken and it needs to know when that
action occurred. Finally that could be a few

00:13:40.950 --> 00:13:46.330
extra bits of information on there. The contacts
in which the activity happened, and that could

00:13:46.330 --> 00:13:50.370
be a location, the geolocation I mentioned
before, or it could be a mood or any other

00:13:50.370 --> 00:13:57.400
kind of fields in there. I see we have some
cat fans in the audience that's good. So using

00:13:57.400 --> 00:14:02.670
the command line tool, we can actually start
talking to this interface. So if you type

00:14:02.670 --> 00:14:09.079
OAuth, OA curl fetch and then use the activities,
me, self, so that's going to give me my own

00:14:09.079 --> 00:14:13.490
personal stream. You would execute as [INDISTINCT]
or you will get back a very long document

00:14:13.490 --> 00:14:17.910
with lots of information in there. This is
more information that I may be able to fit

00:14:17.910 --> 00:14:22.080
on the slide, so I chose to highlight a few
sections of it. First of all, in the root

00:14:22.080 --> 00:14:25.760
element of the stream, you'll find a few useful
things that you need to render the context

00:14:25.760 --> 00:14:30.959
around it. You'll find a title, you'll find
a date to which this stuff happened and there's

00:14:30.959 --> 00:14:35.660
a unique ID. This ID, you will need future
operations if you want to do at the least

00:14:35.660 --> 00:14:40.680
adding a common liking, muting, et cetera,
then this is the ID that you would use on

00:14:40.680 --> 00:14:46.240
those operations. Secondly, as you can see
we have links element with a number of entries

00:14:46.240 --> 00:14:52.269
in there, the likes, the self and replies
and they contained information about the stream

00:14:52.269 --> 00:14:56.860
that you currently looking at, at this specific
entity in it. In this case, it would have

00:14:56.860 --> 00:15:02.050
a URL where you can get all the people who
would like the post that you're looking at.

00:15:02.050 --> 00:15:06.149
It would have accounts on there which is quite
useful if it has a count zero, you know you

00:15:06.149 --> 00:15:11.150
don't have to render anything, and you don't
have to make any API calls to retrieve any

00:15:11.150 --> 00:15:14.529
information. Otherwise, you can either choose
to have lots of likes already included in

00:15:14.529 --> 00:15:21.870
the mainstream, or if you specify the max
liked equal to some number, you can tell the

00:15:21.870 --> 00:15:26.700
Buzz API output to include those in the mainstream
itself. So it depends on the type of application

00:15:26.700 --> 00:15:31.500
design you're doing, if you have more of an
AJAX, C or a mobile phone type small interface

00:15:31.500 --> 00:15:35.740
where you're not sure in your comment. You
want to use this counter and say, click here

00:15:35.740 --> 00:15:39.740
to show all the comments on this item. If
on the other hand, you're building a big Web

00:15:39.740 --> 00:15:44.550
application where you want to show the fully
rendered stream, you want to say, max liked

00:15:44.550 --> 00:15:49.500
equals some high number so can have everything
back in one single request. The same goes

00:15:49.500 --> 00:15:54.370
for replies. You can either look at the counter
here and say, click here to download all the

00:15:54.370 --> 00:15:59.529
replies or you can choose to include a max
replies equals some number to have them included

00:15:59.529 --> 00:16:05.070
in base stream as well. Another important
part on activity streams, we already had one

00:16:05.070 --> 00:16:10.810
that happened in ID is who did this? We called
that the actor within the activity. So you

00:16:10.810 --> 00:16:16.000
got a basic information set all the name and
ID, a profile URL if you want to create a

00:16:16.000 --> 00:16:22.019
link where you can link to the profile page
and a thumbnailURL where you can get a visual

00:16:22.019 --> 00:16:27.579
picture of Avatar, the icon for this person.
The third part of an activity is the verb,

00:16:27.579 --> 00:16:32.220
what happens in this activity? The activity
stream supports lots of different verbs. At

00:16:32.220 --> 00:16:37.540
the moment the only thing you should expect
from Buzz is a post verb. Somebody created

00:16:37.540 --> 00:16:43.240
a Buzz post; in the future this might expand
though. And finally, in the user interface

00:16:43.240 --> 00:16:49.380
in Gmail home mobile we're showing a source,
where did this activity occur? So we're including

00:16:49.380 --> 00:16:53.390
that in the stream as well and you have a
textual stream there and that could be anything.

00:16:53.390 --> 00:16:58.510
In this case, the stuff was created in the
Buzz interface. It could be a website address,

00:16:58.510 --> 00:17:02.980
it could be the domain name you're using,
it could be from the Web, and it could be

00:17:02.980 --> 00:17:07.129
an ominous, so this is free textual string,
don't build any code that depends on this

00:17:07.129 --> 00:17:12.519
having a certain value. It's more that if
you want to show exactly the same thing as

00:17:12.519 --> 00:17:17.029
you're showing in the Gmail front end, then
this is the string you want to include in

00:17:17.029 --> 00:17:20.909
there where it says, "Chrishabel posted a
Buzz from," in this case "Google Buzz." And

00:17:20.909 --> 00:17:27.019
there's visibility included. Google Buzz is
a unique product where you can use the group

00:17:27.019 --> 00:17:31.919
selector to choose if you want to have your
post being completely public or you only wanted

00:17:31.919 --> 00:17:37.639
to go to a certain set of people, a private
post. So the visibility defines which groups

00:17:37.639 --> 00:17:42.450
have access to this Buzz. If it's public that
means that everybody has access to it. If

00:17:42.450 --> 00:17:46.979
there's a different URL here with a different
name then that means that a person submitted

00:17:46.979 --> 00:17:52.970
a Buzz post with a surrogate targeting. Who
can actually read this Buzz post? The one

00:17:52.970 --> 00:17:58.919
thing to keep in mind and this is still someone
in flux; we weren't sure what to do with private

00:17:58.919 --> 00:18:03.660
postings especially since not every interface
at the moment has a great UI for showing which

00:18:03.660 --> 00:18:08.539
post are private and which post are public
and we don't want to accidentally start exposing

00:18:08.539 --> 00:18:13.080
private information. So we made the choice
that at launch we're not returning private

00:18:13.080 --> 00:18:18.380
post except if you've created them yourself.
And the other situation, you got an empty

00:18:18.380 --> 00:18:22.489
document with a bit of basic information of
a date and an actor, there's not going to

00:18:22.489 --> 00:18:26.679
be any content in there. So if you're writing
code and you happen to stumble across an empty

00:18:26.679 --> 00:18:34.379
activity that's the reason why there's probably
some private group visibility selected there.

00:18:34.379 --> 00:18:38.919
Also, if a Buzz post contains geolocation
that's going to be included in it. It can

00:18:38.919 --> 00:18:42.070
be either a geocode and an address, it could
only be a geocode or it could even have a

00:18:42.070 --> 00:18:49.639
place name in there if it's a recognized location
within our systems. And finally the last bit

00:18:49.639 --> 00:18:54.010
of an activity string there needs to be an
object. Something happened to some things

00:18:54.010 --> 00:18:58.919
that's the object of activity. And currently
Google Buzz will only create notes and note

00:18:58.919 --> 00:19:04.639
is pretty much a bit of text. Again, in the
future, as we're expanding the system and

00:19:04.639 --> 00:19:07.889
we're iterating out in the open developing
these standards and developing what we need

00:19:07.889 --> 00:19:14.090
to support will probably have more object
types. But, for the time being, the notes

00:19:14.090 --> 00:19:16.830
are all good that you can have to expect.
However, if an object is more complicated

00:19:16.830 --> 00:19:23.269
than just a bit of text strings as if somebody
posted a link, then you need to have attachments.

00:19:23.269 --> 00:19:26.629
You're going to have an object and there's
going to be an attachment connected to it.

00:19:26.629 --> 00:19:30.850
The attachments can have many different formats.
In this example we're using a link, so there's

00:19:30.850 --> 00:19:35.539
going to be an article which is what a link
attached to an object is called. In activity

00:19:35.539 --> 00:19:39.149
streams, there's going to be a name there,
that's the name that you want to put on the

00:19:39.149 --> 00:19:43.480
screen and you're going to have to add a value
attach to it. But maybe you were also uploading

00:19:43.480 --> 00:19:47.929
a picture. So you're going to get a different
attachment type that includes an image, a

00:19:47.929 --> 00:19:54.039
photo. And the same happened for a video and
that depends on the type of attachment what

00:19:54.039 --> 00:19:58.889
information is going to be connected to it.
So for an image, you're going to have a width

00:19:58.889 --> 00:20:04.950
and a height; for a video, you're going to
have multiple locations that you can link

00:20:04.950 --> 00:20:08.639
to that either have a video URL or the containing
page, et cetera. And these are all the verbs

00:20:08.639 --> 00:20:12.309
that you could expect to see happening in
the future. As I said at the moment we're

00:20:12.309 --> 00:20:17.629
only supporting a subset of these, but as
we're importing more resources into Google

00:20:17.629 --> 00:20:22.470
Buzz and that's we're expanding the user interfaces
and iterating on what we think would be valuable

00:20:22.470 --> 00:20:27.099
to have in the interface; more of these should
be popping up. So when you're developing your

00:20:27.099 --> 00:20:31.799
code, make sure to keep that in mind that
you're riding a big switch case, a statement,

00:20:31.799 --> 00:20:38.070
or riding lots of ifs and not hard coning
any assumptions on what your input is going

00:20:38.070 --> 00:20:42.359
to be. Because it is a REST API that means
you can also do interesting things for the

00:20:42.359 --> 00:20:46.349
same locations. For instance, if you have
your own activities you could do a post to

00:20:46.349 --> 00:20:52.349
it and in a RESTful API doing a post to URL
means you're creating a post. A RESTful API

00:20:52.349 --> 00:20:57.389
also means that whatever you read out of it
you can push back into it. So if we're looking

00:20:57.389 --> 00:21:01.809
at the same object as we are reading out of
it on activity objects, you could push exactly

00:21:01.809 --> 00:21:07.440
the same JSON blob back into it with a post
and that will create actual Buzz post for

00:21:07.440 --> 00:21:13.502
you. Likewise, if you want to like something,
you go the likes URL with the comment's ID

00:21:13.502 --> 00:21:20.809
that you want to like and you do a post operation.
And if you want to unlike something you will

00:21:20.809 --> 00:21:25.190
do a delete operation on a sim. There's also
a lot of libraries that we're busy developing.

00:21:25.190 --> 00:21:29.929
I develop the PHP once, I'm going to use that
as an example. Well, we also have the Python

00:21:29.929 --> 00:21:34.320
one that works and App Engine and the stand
alone modem, we have the Java one, and they

00:21:34.320 --> 00:21:38.529
all have a lot of examples building. So they
have examples on how you can download a stream

00:21:38.529 --> 00:21:42.659
both the public one as well as your private
one. How to add a post, how to like stuff,

00:21:42.659 --> 00:21:46.950
mutes stuff, delete stuff, there's too many
examples really to mention here, so I'm literally

00:21:46.950 --> 00:21:51.480
not going to try. But the cool thing is they're
all open sourced. There's a lot of implementations

00:21:51.480 --> 00:21:56.349
out there where you can just cut and paste
bits of operation that you want to do. And

00:21:56.349 --> 00:22:01.889
there's examples of how to do high fidelity
rendering of a Buzz string for instance. And

00:22:01.889 --> 00:22:05.289
you can actually, if you want to, you can
start checking out a few of these demos if

00:22:05.289 --> 00:22:13.850
you go www.buzz-demos.com, and I'm hosting
a live version of the PHP demos up there.

00:22:13.850 --> 00:22:17.419
The way it works and this is pretty much the
same for all of the libraries is that you

00:22:17.419 --> 00:22:22.909
create the global Buzz objects. You do some
OAuth magic that's thankfully taking care

00:22:22.909 --> 00:22:27.979
off for you. And you got an object back that
you can start doing operations on. For instance,

00:22:27.979 --> 00:22:32.159
you could get all the consumptions you impose,
which means the people that you're following.

00:22:32.159 --> 00:22:38.059
You see there's a number of numbers added
to it which is the maximum number of post.

00:22:38.059 --> 00:22:42.539
The likes and replies that you want to get.
So, from that, you get an object back that

00:22:42.539 --> 00:22:46.789
contains the entire stream of your consumption
post. You want to start iterating through

00:22:46.789 --> 00:22:51.099
it and for instance you want to see, "Hey,
I've got a link. I've got a type of objects

00:22:51.099 --> 00:22:56.499
at the moment it's only a note. It could be
more in the future." We've got attachments

00:22:56.499 --> 00:23:00.249
connected to it. There's a lot of different
types that we're supporting right now; photos,

00:23:00.249 --> 00:23:06.700
photo albums, attachments, videos, articles;
you want to create some custom layout here.

00:23:06.700 --> 00:23:11.820
The nice thing about us using activity streams
is that you got the rich information about

00:23:11.820 --> 00:23:17.749
an activity. So, you know the URL, you know
where the video is, you know how to do rich

00:23:17.749 --> 00:23:22.619
rendering. You don't have to just take a blob
of HTML and put it in your own page and hoped

00:23:22.619 --> 00:23:26.580
that somehow magically did layouts kind of
works in your own site. Now because you have

00:23:26.580 --> 00:23:32.351
to made an information you can be creating
your own layout around these objects. And,

00:23:32.351 --> 00:23:36.830
finally, you want to display this content
that you've created. Likewise, if you want

00:23:36.830 --> 00:23:41.179
to create a Buzz post, you would create an
attachment because we want to put a link in

00:23:41.179 --> 00:23:46.710
there. You give it a URL that you want to
link to, you give it a title and you create

00:23:46.710 --> 00:23:51.529
the post objects. Then you just do a Buzz
create post and it will be pushed to the server

00:23:51.529 --> 00:23:56.359
and there's going to be an exception if there
was an error if it returns new objects. You

00:23:56.359 --> 00:24:00.820
can display that as this was the result of
your action. So using these libraries really

00:24:00.820 --> 00:24:07.461
simplifies talking to the API quite a bit.
You can start hooking a Buzz support by the

00:24:07.461 --> 00:24:12.770
pushing content to it or reading content from
Buzz in a couple of line of code. There's

00:24:12.770 --> 00:24:17.070
a lot of features that we're still working
on implementing at the moment. For instance,

00:24:17.070 --> 00:24:21.099
one of the things that we're working on and
it might be working today, so this is kind

00:24:21.099 --> 00:24:26.830
of exciting is full push support for Buzz.
I know that for non-authenticated streams

00:24:26.830 --> 00:24:32.460
to support should be in there today. I'm looking
at the audience here. Sammy, do you know push

00:24:32.460 --> 00:24:39.570
support? Yes, I'm getting a yes, okay. So
with a bit of luck at 3 p.m., there's going

00:24:39.570 --> 00:24:43.809
to be a session by John Panzer and Joseph
Smarr, "Bridging the Islands." And he's going

00:24:43.809 --> 00:24:49.850
to be doing a live demo of this stuff in action.
Forcedly, when I was finishing my slides yesterday

00:24:49.850 --> 00:24:53.369
it wasn't a 100% sure yet, so I'm not going
to be able to go and to do too much detail

00:24:53.369 --> 00:24:58.220
myself. We're also still figuring out how
to reach your support, more inputs. We're

00:24:58.220 --> 00:25:02.470
working with standard committee so, there's
going to be a lot interesting stuff happening

00:25:02.470 --> 00:25:07.299
around the API. We've got a lot of interesting
concepts as well and I'm seeing some really

00:25:07.299 --> 00:25:12.629
inspired faces here ready to start programming
on them as soon as they've slept for a weekend.

00:25:12.629 --> 00:25:18.419
So, watching the space, there's going to be
a lot of cool stuff added to it. And with

00:25:18.419 --> 00:25:23.080
that, I wanted to give the stage to Marco,
Seesmic, who've been working and implementing

00:25:23.080 --> 00:25:33.580
support in their products.
&gt;&gt; KAISER: Yes, the microphone is on. Thank

00:25:33.580 --> 00:25:44.139
you, Chris, and also for the opportunity to
present us here in this session at Google

00:25:44.139 --> 00:25:47.580
I/O 2010. My name is Marco, I work for Seesmic
and I'm the Director of Engineering and desktop

00:25:47.580 --> 00:25:48.580
client lead there. And I want to talk about
integrating Buzz into our applications today.

00:25:48.580 --> 00:25:51.769
First, a little bit about Seesmic, if you
haven't heard about us yet. We want to try

00:25:51.769 --> 00:25:55.240
to solve a simple problem which is if you
want to share with all your friends and get

00:25:55.240 --> 00:26:00.090
the feedback and comments from all your friends
you have to visit a lot of different networks

00:26:00.090 --> 00:26:04.909
today. And what we try to do is bring that
all together and deliver the real time Web

00:26:04.909 --> 00:26:12.669
to you wherever you are, whatever platform
you're on, and whichever device you're using.

00:26:12.669 --> 00:26:17.889
So we want to provide one unique solution
which you can use across all the platforms.

00:26:17.889 --> 00:26:25.879
When Google asked us if we wanted to take
part in the launch of the Buzz API, we're

00:26:25.879 --> 00:26:31.919
really excited because that is like a perfect
match for us. And when we looked at the API,

00:26:31.919 --> 00:26:38.210
we found out that they were as, Chris already
said, completely relying on open standards.

00:26:38.210 --> 00:26:44.679
So we have OAuth, we have part of a contacts
with Atom, JSON, RESTful APIs, Activity Streams.

00:26:44.679 --> 00:26:49.701
Our teams already have a lot of experience
with these technologies and there's a lot

00:26:49.701 --> 00:26:53.999
of information out there on the Web and there's
code that we could reuse. So, even if that

00:26:53.999 --> 00:26:59.649
just like having a couple of weeks ago and
we could start like really late on doing that.

00:26:59.649 --> 00:27:03.940
With all that information and all that experience
that was already there, it was pretty easy

00:27:03.940 --> 00:27:08.289
for us to get up the speed fast and implement
that. And, of course, another advantage of

00:27:08.289 --> 00:27:15.720
using open technology is there's no licensing
issues that we had to deal with, it's all

00:27:15.720 --> 00:27:27.670
open. It's pretty good on the legal side so
we shouldn't have like big issues there, so

00:27:27.670 --> 00:27:41.640
it's really good, it helped us a lot to get
up the speed and implement this fast. So,

00:27:41.640 --> 00:27:54.129
as our vision, as Seesmic gets to support
as many services as possible and to support

00:27:54.129 --> 00:28:12.619
as many platforms if possible, I'm really
happy to say that we can add Buzz now to our

00:28:12.619 --> 00:28:21.200
desktop products, to our Android product and
also to our Web product. Let me start with

00:28:21.200 --> 00:28:29.240
desktop first. About two months ago we first
showed our next generation of our desktop

00:28:29.240 --> 00:28:40.019
client, Seesmic Desktop which is a very popular
social networking application. It's build

00:28:40.019 --> 00:28:52.720
on the Silverlight platform as out of browser
application, so it's running on Windows and

00:28:52.720 --> 00:29:05.950
it's running on Mac with the same code. And,
but it's not just a client, it's a platform

00:29:05.950 --> 00:29:18.499
itself. So we were, based on that platform
able to create a plugin platform and implement

00:29:18.499 --> 00:29:26.710
all the features that we have in the client
ourselves as plugins already. So Twitter,

00:29:26.710 --> 00:29:31.940
Facebook, even the Buzz integration now, that's
all a plugin on that platform and it's open

00:29:31.940 --> 00:29:39.570
to third party developer so everyone can extend
the functionality of the implication with

00:29:39.570 --> 00:30:04.119
your own plugins if you want to. We've published
the preview of the SDK already for that. So

00:30:04.119 --> 00:30:32.840
as we have network here hopefully we should
be able to give you a quick demo on that.

00:30:32.840 --> 00:30:45.309
So here we have the application running, this
is the Seesmic Desktop 2 preview, which is

00:30:45.309 --> 00:30:54.210
running with the Buzz account here. If I go
to the settings in the application and go

00:30:54.210 --> 00:31:09.779
to the plugins here, I can see that everything
here is really implemented as a plugin. So

00:31:09.779 --> 00:31:32.339
we have a Bing Maps plugin here--oh, I shouldn't
have said that on the Google conference but

00:31:32.339 --> 00:31:43.610
we do. But you can see that's Google Buzz,
there's Facebook in here, Foursquare, LinkedIn,

00:31:43.610 --> 00:32:23.539
Twitter; everything, all of that is a plug
in and we can just drop it in or remove it

00:32:23.539 --> 00:32:41.379
and the client will either like be extended
by the functionality or it will be removed.

00:32:41.379 --> 00:32:55.929
So for the best support, like all other services
we have, like Twitter, Facebook, you get timelines

00:32:55.929 --> 00:33:06.599
of your Buzz feeds. So, for example, here
is a timeline, in that timeline you can see

00:33:06.599 --> 00:33:14.799
images that were attached to posts. If there
are comments you can click here and you get

00:33:14.799 --> 00:33:22.459
the list of comments from people. People liked
it, so there are already a couple of people

00:33:22.459 --> 00:33:29.139
who like that post and you can see that at
the bottom. But, of course, you can also update

00:33:29.139 --> 00:33:33.889
your Buzz status from here, so I can just
go in here. I have my accounts selected here,

00:33:33.889 --> 00:33:39.259
right now, postings only supported as public.
So we're looking forward to add the privacy

00:33:39.259 --> 00:33:49.169
controls there as soon as we can over the
API. But I can just like post something here

00:33:49.169 --> 00:33:59.599
and hopefully the network works for that and
just add a new post which, like it shows at

00:33:59.599 --> 00:34:08.240
the top. Hello, from [INDISTINCT] like, you
can just like do everything I want, obviously,

00:34:08.240 --> 00:34:26.730
it also have the ability to search from the
application here if I want to, so I can do

00:34:26.730 --> 00:34:34.139
a search for Buzz here. We should get results
for Buzz from Google Buzz. Yeah, that's the

00:34:34.139 --> 00:34:39.970
demo for that. So, if you're interested about
that, and most especially the plugin platform,

00:34:39.970 --> 00:34:50.030
if you're interested to start developing,
I said Buzz is a plugin itself. If you have

00:34:50.030 --> 00:34:57.000
something that you want to develop with the
client, platform.seesmic.com, is the location

00:34:57.000 --> 00:35:07.510
to go and to learn more about the platform
there. I said desktop was the first platform,

00:35:07.510 --> 00:35:19.320
Web is the second platform. We also have a
very successful Web based client, which is

00:35:19.320 --> 00:35:31.390
the lightweight and easy to use. You don't
have to install anything on your computer

00:35:31.390 --> 00:35:45.970
and, of course, we also have to add Buzz there.
Let me just jump into that one if I have right

00:35:45.970 --> 00:35:51.289
window here. So here you see a preview of,
well, not a preview anymore but, you'll see,

00:35:51.289 --> 00:35:56.799
oh, excuse me, Web client running with Buzz.
This is to a Twitter list we just opened here.

00:35:56.799 --> 00:36:03.240
But I can click on Google Buzz in the sidebar
and I get the same timeline which I just had

00:36:03.240 --> 00:36:12.040
in my desktop client and it's all in here
too. I have the same features in here by commenting.

00:36:12.040 --> 00:36:18.849
I can obviously also post from here, post
a comment--oops, sorry that was the mouse.

00:36:18.849 --> 00:36:24.869
And it post the comment on, I can update my
status from here so I can also select which

00:36:24.869 --> 00:36:29.920
accounts I want to use, in that case I have
a Tweeter account and a Buzz account here

00:36:29.920 --> 00:36:38.510
so I can cross post to both services. I can
just select one whatever I want. So this is

00:36:38.510 --> 00:36:44.280
from Seesmic Web. And I'll update my status
from here, so that's about Web which I just

00:36:44.280 --> 00:36:48.950
demoed. Third, for us, which is very important
is our Android based client. All mobile spaces

00:36:48.950 --> 00:36:55.690
are growing like crazy and also thanks to
the success of the Android platform. And Seesmic

00:36:55.690 --> 00:37:02.250
has a very popular social mini-Twitter right
now application in the marketplace already

00:37:02.250 --> 00:37:09.010
which has been downloaded more than 250,000
times already. And I mean Android, Google

00:37:09.010 --> 00:37:30.450
Buzz, that's just a perfect match so there
was no question for us that we have to add

00:37:30.450 --> 00:37:39.750
Google Buzz also to the Android application.
So what you can see here on the screens on

00:37:39.750 --> 00:37:48.920
the left-hand side, I can't demo it on stage
there's no cameras so, I have to fall back

00:37:48.920 --> 00:37:59.400
to a screenshots here. Is the timeline of
a Google Buzz account within the application?

00:37:59.400 --> 00:38:05.990
You can see this is the following timelines.
You also see the tabs at the top so you also

00:38:05.990 --> 00:38:16.049
have a nearby so that's the bounding box that
we talked about. You can restrict the two

00:38:16.049 --> 00:38:27.549
locations. You can search, you can view your
profile, you can cross post to Twitter accounts

00:38:27.549 --> 00:38:37.369
and Buzz accounts. You can limit to either
or whatever you want any combination there

00:38:37.369 --> 00:38:47.559
is possible. If you go to a detailed view
of a message and you see the message but you

00:38:47.559 --> 00:38:55.950
also have actions like delete in this case,
it's the author's own account, so he can delete

00:38:55.950 --> 00:39:01.150
his own message. There's the like button,
there's the comment button where you can see

00:39:01.150 --> 00:39:07.780
the list of comments as you see on the right,
and there's a commenting box at the bottom

00:39:07.780 --> 00:39:12.970
which you can use so it's, all that functionality
is there. The last but not least, Seesmic

00:39:12.970 --> 00:39:19.339
also owns Ping.fm which is a service that
allows you to update dozens of services at

00:39:19.339 --> 00:39:28.329
once and of course updating the status is
very important and Buzz, that's the core feature

00:39:28.329 --> 00:39:42.880
of Buzz so, that has to be in our support
too. So,

00:39:42.880 --> 00:39:50.339
we can also add your Buzz account to Ping.fm
and update your status to all networks including

00:39:50.339 --> 00:39:59.579
Buzz now. So when is this going to be available?
Well, today. Seesmic Web and Ping.fm are releasing

00:39:59.579 --> 00:40:06.430
the support for Buzz as of today and maybe
it's already live. I'm looking at--Yuhan,

00:40:06.430 --> 00:40:12.150
yes; he says yes. So, both services are live
now with Buzz support. Seesmic Desktop 2 was

00:40:12.150 --> 00:40:18.059
introduced as a previous, so we're not like
calling it really like finished product. But

00:40:18.059 --> 00:40:23.880
for the first time today we're making it available
for end users to download from our website--sorry,

00:40:23.880 --> 00:40:28.369
so, seesmic.com/sd2. We'll get you installer
for the application which includes the Buzz

00:40:28.369 --> 00:40:37.859
plugin of course and platform that Seesmic
that I've said for plugin for developers.

00:40:37.859 --> 00:40:47.829
And for Seesmic, for Android, if you want
to see a preview of the application, you should

00:40:47.829 --> 00:40:53.630
visit us down at the Sandbox booth and we
can give you a link to download and install

00:40:53.630 --> 00:41:00.890
the application, it's not in the marketplace
yet but, it would be there soon. Yeah, so,

00:41:00.890 --> 00:41:08.170
thanks. If you want to learn more about Seesmic,
please come to www.seesmic.com and with that

00:41:08.170 --> 00:41:10.019
back to Chris.
&gt;&gt; CHABOT: Oh, thank you, Marco, and these

00:41:10.019 --> 00:41:16.680
guys really have been working day and night
to get this demo done today and actually going

00:41:16.680 --> 00:41:23.569
live so, we very much appreciate all your
efforts, guys. And the next stop we have Socialwok

00:41:23.569 --> 00:41:30.720
talking about their experience integrating
Google Buzz. So, I'd like to introduce Ming

00:41:30.720 --> 00:41:36.050
who will be doing the demo.
&gt;&gt; YONG: So, hi, guys. I'm Ming Yong from

00:41:36.050 --> 00:41:40.510
Socialwok. So for those wo are not familiar
with Socialwok, right, socialwok.com, you

00:41:40.510 --> 00:41:44.380
can see--some people have got Facebook for
business on Google Apps. We basically create

00:41:44.380 --> 00:41:50.120
a collaborated work space for your Google
Apps domain. So you can also use your Gmail

00:41:50.120 --> 00:41:55.660
account or your Google Apps account or any
work email account, and actually just sign

00:41:55.660 --> 00:42:01.420
on and you can create and you can see it's
a feed-based format like this where you can,

00:42:01.420 --> 00:42:05.500
and you're commenting and you can share which
media we actually share files in Google Docs,

00:42:05.500 --> 00:42:11.819
Google Calendar, the whole works. All right.
Now, let's go--so what I want to do today

00:42:11.819 --> 00:42:18.430
is I'm going to start off a demo to show you
how we have integrated with Google Buzz. Now,

00:42:18.430 --> 00:42:24.640
so, you can see here Navin Kumar, Navin is
my CTO and co-founder of Socialwok. He has

00:42:24.640 --> 00:42:31.059
a Google profile as you can see there, right?
And you can see all the updates. So, what

00:42:31.059 --> 00:42:38.100
we're going to do first is we're going to
setup Socialwok to pull in your Google Buzz

00:42:38.100 --> 00:42:50.130
or any Google Buzz profile you like. So, we
go to the Socialwok and then settings, and

00:42:50.130 --> 00:42:55.039
you can see we support actually [INDISTINCT]
services. We support Twitter, pulling from

00:42:55.039 --> 00:43:02.519
Twitter, Facebook, LinkedIn and now we're
going to do Buzz, so first thing which was

00:43:02.519 --> 00:43:12.150
setup to actually pull in the connected sites
for Google Buzz--so, Navin for the connected

00:43:12.150 --> 00:43:21.460
sites. So, what is Navin going to do now?
He's going to enter his, basically, his Google

00:43:21.460 --> 00:43:29.720
Buzz username, and even notice, all we have
to do is just put SWok task 1, right? We actually

00:43:29.720 --> 00:43:38.849
use WebFinger which is supported under the
Google Buzz if you stack to actually get the

00:43:38.849 --> 00:43:43.880
endpoint. So once safe, we automatically recognize
this, actually Navin Kumar Google profile.

00:43:43.880 --> 00:43:49.099
So this is very nice for developers to actually
just easily get a person's Google profile,

00:43:49.099 --> 00:43:56.850
just using WebFinger. And what we're going
to do is authenticate. Here, this is OAuth,

00:43:56.850 --> 00:44:03.180
authentication with Google Buzz and you can
see a very nice page, right, that shows you

00:44:03.180 --> 00:44:07.490
that Chris actually just showed just now,
of all the access that you're getting with

00:44:07.490 --> 00:44:12.980
Google Buzz. So this is for us to post out
from Socialwok to Google Buzz, and you can

00:44:12.980 --> 00:44:16.940
choose multiple accounts. So once authentication
is granted, what we're going to do is we're

00:44:16.940 --> 00:44:22.240
going to post in Google Buzz, and Socialwok
and then you'll go out to Google Buzz. Here,

00:44:22.240 --> 00:44:28.960
Navin is going to type a message that we're
demoing at Google I/O and he will put web

00:44:28.960 --> 00:44:36.480
link. So something to know about Socialwok
is that, as you can see, as I mentioned, we

00:44:36.480 --> 00:44:41.480
actually showing various things like Google
Docs, so you can actually just insert on the,

00:44:41.480 --> 00:44:44.069
any of the smaller tabs, so we also preview
your website. So you can see, right, once

00:44:44.069 --> 00:44:49.381
he typed the web link, it actually has the
images of the actual website so you can attach.

00:44:49.381 --> 00:44:52.000
It is a new way to do sharing. The interesting
thing that I wanted you to know is CC, so

00:44:52.000 --> 00:44:56.080
you actually type CC in Google Buzz. So once
the checkbook has been done and you click

00:44:56.080 --> 00:45:01.119
share it would actually publish simultaneously
to Socialwok, to your private web group of

00:45:01.119 --> 00:45:06.299
colleagues as well as out to Google Buzz,
so this is called the public Buzz. So you

00:45:06.299 --> 00:45:11.980
can see here in Buzz, right there, we have
successfully published. Going back to Socialwok

00:45:11.980 --> 00:45:22.980
and you can see, yeah, the things there. Now
the next thing we're going to show is, Gmail.

00:45:22.980 --> 00:45:30.680
Socio-integrate very tightly with email, we
can forward email into a feed. We can also

00:45:30.680 --> 00:45:34.240
now support--Google has recently launch Gmail
contextual gadget technology. Now, in Socialwok,

00:45:34.240 --> 00:45:41.390
we have this Socialwok, social gadgets, so
we can see here, do you see at the bottom

00:45:41.390 --> 00:45:50.680
of the email, there's three profiles, right?
So let me explain, so this mail is coming

00:45:50.680 --> 00:45:55.069
from mgyong@gmail.com to navine@socialwok
and veecrom@socialwok.com. So Veecrom and

00:45:55.069 --> 00:46:00.320
Navin are both co-workers in Socialwok. So,
you can see in the Gmail contextual gadget,

00:46:00.320 --> 00:46:05.940
they'll show status, updates, the activity.
So while reading a mail you can now get the

00:46:05.940 --> 00:46:12.420
social activity of your colleague's, right
there. You can see the status, you can see

00:46:12.420 --> 00:46:20.859
the emails that has been shared and the files.
So Navin maybe you can quit--the yeah. Now,

00:46:20.859 --> 00:46:24.640
you can click on Ming, so this is me. This
person right is mgyong@gmail.com. He is not

00:46:24.640 --> 00:46:29.279
a member of Socialwok yet that's why you don't
see the status update. But in Socialwok, we

00:46:29.279 --> 00:46:40.430
have the ability to actually do mail threading.
So you can see the quick mail, these are all

00:46:40.430 --> 00:46:44.080
the mails that are shared between mgyong@gmail.com
and the Socialwok guy. Now, this is the Buzz.

00:46:44.080 --> 00:46:50.770
You can see here we actually support pulling
in of the Google Buzz updates. So now, as

00:46:50.770 --> 00:46:51.980
developers, you can actually start bringing
social context into your applications as we

00:46:51.980 --> 00:46:55.640
have demonstrated, and we can just actually
invite. If you want to invite the person that

00:46:55.640 --> 00:47:06.099
collaborate with you on Socialwok, you can
just type in the email address, the custom

00:47:06.099 --> 00:47:07.900
message and instantly you bring that sharing
and collaboration right into Gmail, into your

00:47:07.900 --> 00:47:11.160
Google Apps as well as with Google Buzz. Yeah,
now, let me just quickly--I'll take the next

00:47:11.160 --> 00:47:13.740
few minutes to actually talk a little bit
more on the developer, how a developer would

00:47:13.740 --> 00:47:15.619
lavish on our experience with Google Buzz.
So before we actually got access to the Buzz

00:47:15.619 --> 00:47:18.660
APIs, we started work on this about three,
four months ago. We were actually, we decided,

00:47:18.660 --> 00:47:21.880
we took a stand that we wanted to support
open social web, right? We want to support

00:47:21.880 --> 00:47:22.880
open standards. So things we supported was
Pubsubhubbub. To pull, as we have demonstrated,

00:47:22.880 --> 00:47:26.190
just to pull in feeds, we could now pull in
feeds from Facebook. We can pull in feeds

00:47:26.190 --> 00:47:32.250
from Twitter, and now we can pull in Buzz
as well as any RSS and Atom feed. We also

00:47:32.250 --> 00:47:36.699
supported Activity Streams, right, and including
the extensions like Media RSS for rich format

00:47:36.699 --> 00:47:47.490
and GeoRSS for Geo location. As well as you
saw in the demonstration, right, WebFinger,

00:47:47.490 --> 00:47:50.970
we can just get access to one, the Gmail,
use a part and we automatically get access

00:47:50.970 --> 00:47:56.150
to the URL. And lastly, we use OAuth to authenticate
with Google Buzz as well as all the other

00:47:56.150 --> 00:47:59.431
services like Twitter and Facebook. So in
terms of Google Buzz specifically, right,

00:47:59.431 --> 00:48:00.431
we actually, in the demo, in the demonstration
we actually show 3-legged OAuth. So this 3-legged

00:48:00.431 --> 00:48:02.150
OAuth is an extension of what we do commonly
with Twitter and LinkedIn. And the other thing

00:48:02.150 --> 00:48:08.010
that we demonstrated was the CC-ing and posting
to Buzz. So we actually post to and uses direct

00:48:08.010 --> 00:48:17.410
endpoint, the feed endpoint. Lastly, we actually
put in the Google profile into a Gmail contextual

00:48:17.410 --> 00:48:22.259
gadget, right. So we just get the Gmail address,
we post to user part and we use part of the

00:48:22.259 --> 00:48:30.470
context to discover, to do discovery of the
guy's profile and finally use the Buzz API

00:48:30.470 --> 00:48:36.280
to actually fetch that update in. Next, so
as demonstrated just now, that was the Gmail

00:48:36.280 --> 00:48:39.499
contextual, the Socialwok social gadget, right.
Now, you can actually get social context right

00:48:39.499 --> 00:48:43.270
in email. So what are the cool things that
we found about the Buzz APIs? It struck as

00:48:43.270 --> 00:48:44.950
that, guess what? When we support others open
standards like Pubsubhubbub and Activity Streams,

00:48:44.950 --> 00:48:45.950
Portable Contacts, it took almost zero work
for us to actually integrate with Google Buzz

00:48:45.950 --> 00:48:47.279
which was very amazing because most other
services take a long work. So we, because

00:48:47.279 --> 00:48:50.530
Google Buzz actually supported open social
type of URL, so we were able to just post

00:48:50.530 --> 00:48:53.350
directly like all the updates we have, all
Activity Streams generated. We just took the

00:48:53.350 --> 00:48:57.910
same Activity Stream format and literally
just post it to Buzz and with zero modification

00:48:57.910 --> 00:49:01.030
it just got published. And the other very
cool thing that we supported by Google Buzz

00:49:01.030 --> 00:49:03.279
was this thing called crosspost namespace.
So as you know, right, we have a status update

00:49:03.279 --> 00:49:08.029
that's published in Socialwok and the same
update is actually published out to Google

00:49:08.029 --> 00:49:12.510
Buzz. Now, what we can do is that in the process
of publishing out, we can invent the ID of

00:49:12.510 --> 00:49:17.200
the Socialwok post inside that Google Buzz.
So you can do very interesting things like

00:49:17.200 --> 00:49:18.200
refer to the original post and you can do
things like file sharing. In Socialwok, as

00:49:18.200 --> 00:49:19.200
you can see, we attached files, right, in
Google Docs in the update. We could publish,

00:49:19.200 --> 00:49:20.200
say, hey, I'm sharing this file with you guys
on Google Buzz and in that URL you can click

00:49:20.200 --> 00:49:21.200
that link and it will reference back the message
in Socialwok. And when they click and it goes

00:49:21.200 --> 00:49:22.200
back, they have to authenticate to get access
to the files. So, interesting scenarios like

00:49:22.200 --> 00:49:23.200
that could be leveraged by developers. Now,
in terms of future work for Socialwok with

00:49:23.200 --> 00:49:24.200
Google Buzz, as you've seen we support file
attachments, Google Docs, Google Calendar,

00:49:24.200 --> 00:49:25.200
the whole works. We share everything Google
in Socialwok. So this rich media can now be

00:49:25.200 --> 00:49:26.200
shared using Buzz attachments. So this is
the next thing will be supporting. The second

00:49:26.200 --> 00:49:27.200
thing is you also saw, right, Socialwok supports
commenting of updates. We could imagine federation

00:49:27.200 --> 00:49:28.200
of these comments to other social networks
or from other social networks into Socialwok,

00:49:28.200 --> 00:49:29.200
but that thing is Buzz results. So in Socialwok
right now--sorry, Buzz search. Right now,

00:49:29.200 --> 00:49:30.200
in Socialwok, we support Twitter search. So,
literally, any users can just put a keyword

00:49:30.200 --> 00:49:31.200
and it will pull in from Twitter constantly,
right, using or pulling. But you could imagine

00:49:31.200 --> 00:49:32.200
now with Buzz search, we can actually do the
same thing and Pubsubhubbub, using Pubsubhubbub.

00:49:32.200 --> 00:49:33.200
The fourth thing is private Buzz. Right now,
what we have demonstrated is all public and

00:49:33.200 --> 00:49:34.200
Buzz is soon to be giving support of Google
Apps and you could imagine we can actually

00:49:34.200 --> 00:49:35.200
post from Socialwok, to private Buzz using
authenticated OAuth. And lastly is context

00:49:35.200 --> 00:49:36.200
integration. Socialwok supports Google context
already, right? In social right now you just,

00:49:36.200 --> 00:49:37.200
you don't type any email address, we will
actually query your Google context directly.

00:49:37.200 --> 00:49:38.200
With Google Buzz APIs we could foresee actually
getting access to the Google Buzz context

00:49:38.200 --> 00:49:39.200
including the people you follow, other people
who are following you, and then use that in

00:49:39.200 --> 00:49:40.200
Socialwok. So these are the things we have
done with Socialwok. And if you want to check

00:49:40.200 --> 00:49:41.200
with Socialwok, just go on web@socialwok.com
and you can create your own social collaborated

00:49:41.200 --> 00:49:42.200
network on Google Apps or any Gmail account.
And before I end, one thing to note, Seesmic

00:49:42.200 --> 00:49:43.200
has launched the Seesmic Desktop 2 and Socialwok
now is also gone to the desktop. We are proud

00:49:43.200 --> 00:49:44.200
to announce this morning our partnership with
Seesmic, that Socialwok is now on the desktop

00:49:44.200 --> 00:49:45.200
using the Seesmic plugins. So, thank you,
everybody.

00:49:45.200 --> 00:49:46.200
&gt;&gt; CHABOT: Awesome. Thanks, guys. Cool. So,
closing words, we have been able to show a

00:49:46.200 --> 00:49:47.200
couple of functionalities that we currently
have built in to the Buzz APIs. We believed

00:49:47.200 --> 00:49:48.200
we've given you the functionality to do everything
that you're seeing in the current interface.

00:49:48.200 --> 00:49:49.200
We've shown a couple of examples of what you
could do with this APIs, you can build classic

00:49:49.200 --> 00:49:50.200
messaging clients, you can integrate into
your enterprise applications and we'll be

00:49:50.200 --> 00:49:51.200
having some sessions later today as well.
Where--tomorrow, actually, yeah, it's Thursday,

00:49:51.200 --> 00:49:52.200
isn't it? Yeah, so Thursday there's going
to be another session about Buzz and it's

00:49:52.200 --> 00:49:53.200
going to cover the concepts of how to use
these kinds of APIs in the Python environment

00:49:53.200 --> 00:49:54.200
to build a game for instance. If you want
to learn more about the API, the Docs is a

00:49:54.200 --> 00:49:55.200
great place to start. We have a mailing list
setup, they will be monitoring and answering

00:49:55.200 --> 00:49:56.200
all your questions as well. So if you want
learn more, if you have any questions, if

00:49:56.200 --> 00:49:57.200
there's any other burning stuff that we can
help with, you can find us there in the mailing

00:49:57.200 --> 00:49:58.200
list. Do check out the OAuth enabled curl
if you want to play with the API from the

00:49:58.200 --> 00:49:59.200
command line and we have to free libraries
enables for Buzz support. So, tomorrow, we

00:49:59.200 --> 00:50:00.200
have to surf the stream session that would
be covering how to build a game using the

00:50:00.200 --> 00:50:01.200
Buzz APIs, and using a Python environment
and also tomorrow, later in the day, we'll

00:50:01.200 --> 00:50:02.200
have fireside chat with most of the PMs and
directors of the various social branches with

00:50:02.200 --> 00:50:03.200
Google. So if you have any questions about
Google's future direction about social--what

00:50:03.200 --> 00:50:04.200
decisions we make with Google Buzz, et cetera.
What we're planning to do in the future that

00:50:04.200 --> 00:50:05.200
will be the place to ask the right people.
Finally, don't forget to check out the wave

00:50:05.200 --> 00:50:06.200
that's where people will leaving comments,
asking questions, et cetera. And with that,

00:50:06.200 --> 00:50:07.200
I'd like to move to questions and answers.
If you do have a question, I would like to

00:50:07.200 --> 00:50:08.200
ask you to use the microphones please, otherwise,
the video won't be able to pick up on it.

00:50:08.200 --> 00:50:09.200
&gt;&gt; Just a quick question, where do you have
ActionScript API support?

00:50:09.200 --> 00:50:10.200
&gt;&gt; CHABOT: I didn't get that, I'm sorry.
&gt;&gt; ActionScript flanks and flash.

00:50:10.200 --> 00:50:11.200
&gt;&gt; CHABOT: ActionScripts, no, we don't have
a library for that at moment. We do have someone

00:50:11.200 --> 00:50:12.200
working in my team who was very excited about
building one. So my suggestion would be to

00:50:12.200 --> 00:50:13.200
send out a mail to our mailing list saying,
hey, I'm really interested in the ActionScript

00:50:13.200 --> 00:50:14.200
library, and he'll respond to that and you
can either help him out or make sure you can

00:50:14.200 --> 00:50:15.200
update us when it's available.
&gt;&gt; Cool, I know yours, you will also need

00:50:15.200 --> 00:50:16.200
to open up the policy for that.
&gt;&gt; CHABOT: Okay.

00:50:16.200 --> 00:50:17.200
&gt;&gt; Okay, thanks.
&gt;&gt; CHABOT: Any other questions? Feel free.

00:50:17.200 --> 00:50:25.040
Nothing at all? Okay, well, thank you very
much for coming guys. I hope you enjoyed the

00:50:25.040 --> 00:50:30.000
presentation and if you have any other questions
you can find me in the hallways. Thanks.

