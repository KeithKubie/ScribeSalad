WEBVTT
Kind: captions
Language: en

00:00:17.040 --> 00:00:21.170
Hello, and welcome to another
episode of GDL-IL, GDL Israel.

00:00:21.170 --> 00:00:24.770
Today we're going to keep it
really condensed and speak

00:00:24.770 --> 00:00:29.110
about a few HTML5 APIs, or
features, that you could

00:00:29.110 --> 00:00:31.350
leverage and use today.

00:00:31.350 --> 00:00:34.500
Some of them, I find, are really
simple to implement,

00:00:34.500 --> 00:00:39.950
and could save you lots
of unnecessary work.

00:00:39.950 --> 00:00:44.090
And I think the line that just
connects all of them is that

00:00:44.090 --> 00:00:46.260
they got some nice adoption
today now

00:00:46.260 --> 00:00:47.850
in different browsers.

00:00:47.850 --> 00:00:50.480
And you could definitely
leverage them and use them.

00:00:50.480 --> 00:00:56.000
And those APIs, or in a way,
the browser features, will

00:00:56.000 --> 00:00:59.220
enable you to save code, which
is always great, because less

00:00:59.220 --> 00:01:02.990
code, less time you need to
spend reading it, maintaining

00:01:02.990 --> 00:01:04.540
it, et cetera.

00:01:04.540 --> 00:01:07.230
And in some of them, it's just
a better way, or more

00:01:07.230 --> 00:01:09.310
efficient way to do things.

00:01:09.310 --> 00:01:11.880
So let me just share
my screen with you.

00:01:11.880 --> 00:01:14.560
And actually, the demo that
I've prepared is live.

00:01:14.560 --> 00:01:20.430
So you are more than welcome to
go to my site and just play

00:01:20.430 --> 00:01:21.830
with the page itself.

00:01:21.830 --> 00:01:25.040
All the code is on the page, and
all the code snippets are

00:01:25.040 --> 00:01:29.970
gists, so you could check them
on GitHub or on my page.

00:01:29.970 --> 00:01:31.730
Let me share my string.

00:01:31.730 --> 00:01:36.010
And yeah, hopefully you could
see it quite clearly.

00:01:36.010 --> 00:01:36.420
[INAUDIBLE]

00:01:36.420 --> 00:01:40.150
DevTool as well.

00:01:40.150 --> 00:01:42.220
Just so you could see.

00:01:42.220 --> 00:01:45.380
And maybe we'll throw the
DevTool just to the bottom,

00:01:45.380 --> 00:01:49.446
because we don't need the real
estate of the page itself.

00:01:49.446 --> 00:01:51.620
I'll make everything
much bigger.

00:01:51.620 --> 00:01:54.160
So hopefully [INAUDIBLE]

00:01:54.160 --> 00:01:55.920
code easily.

00:01:55.920 --> 00:01:58.460
And basically, as you can
see now, we have a

00:01:58.460 --> 00:02:00.070
few examples here.

00:02:00.070 --> 00:02:05.720
And we could probably start with
the most basic one, the

00:02:05.720 --> 00:02:07.200
Geolocation.

00:02:07.200 --> 00:02:11.190
So the Geolocation API is
with us for a long time.

00:02:11.190 --> 00:02:15.290
And if you want to see on
which browsers this nice

00:02:15.290 --> 00:02:18.870
feature will be supported, you
could check it on the search

00:02:18.870 --> 00:02:20.550
box that I prepared.

00:02:20.550 --> 00:02:24.870
And if you'll type here, Geo,
and click, you'll be

00:02:24.870 --> 00:02:27.590
redirected to a site that we
mentioned a few times in the

00:02:27.590 --> 00:02:29.896
past, which is called
caniuse.com.

00:02:29.896 --> 00:02:33.480
And on Geolocation, for instance
here, you can see

00:02:33.480 --> 00:02:37.600
quite clearly that the current
version of browsers, basically

00:02:37.600 --> 00:02:40.870
supported on all the browsers.

00:02:40.870 --> 00:02:43.870
So IE, Firefox, Chrome,
Safari, and

00:02:43.870 --> 00:02:45.480
Opera on the desktop.

00:02:45.480 --> 00:02:50.190
And on the mobile arena, we
have from iOS to Android.

00:02:50.190 --> 00:02:51.590
Quite a nice support.

00:02:51.590 --> 00:02:54.980
So it's definitely a feature
that you could use.

00:02:54.980 --> 00:02:58.580
Here I just choose to show you
a few interesting things.

00:02:58.580 --> 00:03:00.740
So as you can see here,
we're using the

00:03:00.740 --> 00:03:03.960
navigator.geolocation to do
the feature detection.

00:03:03.960 --> 00:03:06.790
So in case our browser, for
some reason, the user

00:03:06.790 --> 00:03:09.870
browsers, is not supporting
this feature, it's quite

00:03:09.870 --> 00:03:12.980
clearly that we could
communicate it nicely.

00:03:12.980 --> 00:03:15.220
And since here we are all
developers, I'm just using the

00:03:15.220 --> 00:03:16.260
console.log.

00:03:16.260 --> 00:03:19.870
But you could do something
much better when you are

00:03:19.870 --> 00:03:22.540
running your own code, and
communicate this information

00:03:22.540 --> 00:03:23.870
to the user.

00:03:23.870 --> 00:03:27.540
However, when we do have this
feature, we're just going and

00:03:27.540 --> 00:03:31.120
calling the navigator.geoloc
ation.getCurrentPosition, and

00:03:31.120 --> 00:03:34.340
transferring it a callback
function with the position.

00:03:34.340 --> 00:03:37.260
So we could gather the latitude,
longitude, of the

00:03:37.260 --> 00:03:39.910
position, and then do some
interesting stuff.

00:03:39.910 --> 00:03:44.470
Now what I wanted to show you
that I'm doing here, and as

00:03:44.470 --> 00:03:46.820
you can see here, I'm basically
extracting the

00:03:46.820 --> 00:03:49.340
address from the GeoPoint.

00:03:49.340 --> 00:03:53.900
And that's actually, I think,
less than five lines of code

00:03:53.900 --> 00:03:55.330
in JavaScript.

00:03:55.330 --> 00:04:01.990
So let's just go here and
see how we look like.

00:04:01.990 --> 00:04:04.350
And if we'll open the source--

00:04:04.350 --> 00:04:06.720
and I just put all the
source code of this

00:04:06.720 --> 00:04:10.250
page in our main page--

00:04:10.250 --> 00:04:12.890
let's do it here.

00:04:12.890 --> 00:04:16.445
And see here.

00:04:19.810 --> 00:04:27.150
Let's not check that iframe that
I embedded from GitHub.

00:04:27.150 --> 00:04:29.660
Let's just see the code
itself of our page.

00:04:29.660 --> 00:04:34.130
In here in our page itself,
I could in DevTool click

00:04:34.130 --> 00:04:41.620
Command-F, search for
Geo, and check.

00:04:41.620 --> 00:04:45.560
And in our case, it will
be in this div.

00:04:45.560 --> 00:04:52.055
And what we are basically doing
here is just going and,

00:04:52.055 --> 00:04:57.450
in this script, we are calling
basically Google Maps API.

00:04:57.450 --> 00:04:58.700
Now you can see here--

00:04:58.700 --> 00:05:01.530
I'll make the code [INAUDIBLE]

00:05:01.530 --> 00:05:03.620
easier.

00:05:03.620 --> 00:05:08.610
What I'm doing here is just
going to the Geolocation.

00:05:08.610 --> 00:05:12.290
And once I have the point
itself, I'm just going to

00:05:12.290 --> 00:05:19.310
Google Maps API, and transfer
to it, just here, the

00:05:19.310 --> 00:05:22.530
longitude, latitude, and the
GeoPoint that I built from

00:05:22.530 --> 00:05:26.050
those two parameters, and
with sensor false.

00:05:26.050 --> 00:05:28.420
It could be sensor true.

00:05:28.420 --> 00:05:31.910
And then the user will need to
confirm that they agree to

00:05:31.910 --> 00:05:32.760
share their location.

00:05:32.760 --> 00:05:36.940
By the way, you can see here a
nice indication that you see

00:05:36.940 --> 00:05:38.520
this page is tracking
your location.

00:05:38.520 --> 00:05:41.150
So the user needs to approve
it for the first time.

00:05:41.150 --> 00:05:43.170
And once we are doing that--

00:05:43.170 --> 00:05:46.260
let's get back to our code--

00:05:49.480 --> 00:05:53.460
just over here in the
script, we are--

00:05:53.460 --> 00:05:54.020
oops.

00:05:54.020 --> 00:05:54.610
Yeah.

00:05:54.610 --> 00:05:56.730
We are going here, and
going and getJson.

00:05:59.560 --> 00:06:03.780
So we'll get an array of results
from Google Maps API.

00:06:03.780 --> 00:06:06.670
And in our little case, I'm
running on each and every

00:06:06.670 --> 00:06:07.770
result here.

00:06:07.770 --> 00:06:10.630
And as you can see here, I'm
printing the different results

00:06:10.630 --> 00:06:11.950
to the console.

00:06:11.950 --> 00:06:15.330
And for our little example,
I'll just choose the first

00:06:15.330 --> 00:06:18.850
result, which usually will be
with the highest quality.

00:06:18.850 --> 00:06:21.970
And I'm just outputting to
the screen right here.

00:06:21.970 --> 00:06:26.920
So Geolocation is one neat API
that you could leverage today.

00:06:26.920 --> 00:06:29.650
Another very cool one is
the Summary Object.

00:06:29.650 --> 00:06:32.900
So today, without any
JavaScript, you could play and

00:06:32.900 --> 00:06:39.560
get this summary detail aspect
of things without any line of

00:06:39.560 --> 00:06:40.580
JavaScript.

00:06:40.580 --> 00:06:43.630
And if we'll go here and do
Inspect Element, basically you

00:06:43.630 --> 00:06:47.890
could see that you could tell
the browser that you have here

00:06:47.890 --> 00:06:48.430
an element.

00:06:48.430 --> 00:06:49.730
It's not a div.

00:06:49.730 --> 00:06:53.175
It's Detail and Element, and a
Summary, which basically is

00:06:53.175 --> 00:06:57.260
giving you the header or the
main title of this element.

00:06:57.260 --> 00:06:59.360
And then you could expand
and collapse it just

00:06:59.360 --> 00:07:00.760
by clicking on it.

00:07:00.760 --> 00:07:01.740
So it's very nice.

00:07:01.740 --> 00:07:03.960
Here, as you can see, I just
put a paragraph in it to

00:07:03.960 --> 00:07:05.040
explain it.

00:07:05.040 --> 00:07:10.440
But really sweet and short
ability to work with HTML

00:07:10.440 --> 00:07:12.940
Markup, and tell the browser
exactly what we want.

00:07:12.940 --> 00:07:18.900
And in this case is, of course,
an expandable div that

00:07:18.900 --> 00:07:21.670
shouldn't be just a div with the
JavaScript running on it,

00:07:21.670 --> 00:07:24.860
but rather just to communicate
and using the right elements.

00:07:24.860 --> 00:07:28.290
In this case, it's Detail
and Summary.

00:07:28.290 --> 00:07:32.760
Local Storage is another one,
a very simple API that I

00:07:32.760 --> 00:07:34.980
highly encourage you to check.

00:07:34.980 --> 00:07:37.140
The code snippet here is
so simple, so you could

00:07:37.140 --> 00:07:40.800
understand that it's really
the most basic one.

00:07:40.800 --> 00:07:45.240
And one important thing to note
about this API that it is

00:07:45.240 --> 00:07:46.820
synchronous and not
asynchronous.

00:07:46.820 --> 00:07:50.820
So it's better to use
few keys with large

00:07:50.820 --> 00:07:52.990
payload in the value.

00:07:52.990 --> 00:07:55.310
And then it would be
more efficient.

00:07:55.310 --> 00:07:59.230
Or if you have the need to do
it asynchronously, and use

00:07:59.230 --> 00:08:03.720
lots of data, probably check out
IndexedDB, which will work

00:08:03.720 --> 00:08:07.200
much better, and give you a full
blown database, and not

00:08:07.200 --> 00:08:11.390
just a key value API
like Local Storage.

00:08:11.390 --> 00:08:12.730
Now, with Local Storage,
you're just

00:08:12.730 --> 00:08:14.500
calling it with setItem.

00:08:14.500 --> 00:08:16.650
And you have immediately
the key value.

00:08:16.650 --> 00:08:20.040
And to retrieve, you just need
to go to Local Storage with

00:08:20.040 --> 00:08:23.030
the right key, and you'll
retrieve the answer.

00:08:23.030 --> 00:08:25.880
One nice thing here that I
prepared is just-- you could

00:08:25.880 --> 00:08:28.020
see that I wrote it in Hebrew--
but you could, for

00:08:28.020 --> 00:08:32.309
the example, say something like,
"hey" and "bye." Store

00:08:32.309 --> 00:08:36.870
it, and after we do that, if
we go with the key of--

00:08:36.870 --> 00:08:39.330
here it's meaning in
Hebrew, shalom--

00:08:39.330 --> 00:08:40.900
it will retrieve--

00:08:40.900 --> 00:08:41.799
we don't have anything.

00:08:41.799 --> 00:08:45.160
But if we go here and do "hey,"
and retrieve, you can

00:08:45.160 --> 00:08:47.980
see that I have "bye," because
that's what I put in here.

00:08:47.980 --> 00:08:50.810
One nice thing to debug and
see what we're doing with

00:08:50.810 --> 00:08:55.380
Local Storage will be to go
to the Resources tab.

00:08:55.380 --> 00:08:58.120
And here in the Resource tab,
you can see here that in Local

00:08:58.120 --> 00:09:00.660
Storage, I basically have
a nice view of the

00:09:00.660 --> 00:09:02.670
keys and the value.

00:09:02.670 --> 00:09:04.720
And if I put here some more.

00:09:04.720 --> 00:09:13.470
Let's do "hey all."
And let's save it.

00:09:13.470 --> 00:09:16.280
So you see here that I have
now another element.

00:09:16.280 --> 00:09:21.890
And very simple, and easy to
work with this nice API,

00:09:21.890 --> 00:09:25.120
especially if you want to debug
it through leveraging

00:09:25.120 --> 00:09:26.940
Chrome DevTools.

00:09:26.940 --> 00:09:29.300
Another nice option is WebRTC.

00:09:29.300 --> 00:09:34.000
Now I'm sure some of you noticed
that the browser is

00:09:34.000 --> 00:09:38.250
notifying me here that this
specific domain, which I'm

00:09:38.250 --> 00:09:42.400
holding all my projects,
ido-green.appspot.com, I want

00:09:42.400 --> 00:09:43.490
to use my camera.

00:09:43.490 --> 00:09:46.330
Now in this case, of course, I
will allow it, because I know

00:09:46.330 --> 00:09:48.560
who and why we want to do it.

00:09:48.560 --> 00:09:51.750
And if we go to the WebRTC
example, and we close the

00:09:51.750 --> 00:09:54.680
DevTool for a second, one, you
could see that the page

00:09:54.680 --> 00:09:57.560
containing moi.

00:09:57.560 --> 00:10:01.000
And the other nice point is
that the code to do so is

00:10:01.000 --> 00:10:04.970
very, very simple and trivial.

00:10:04.970 --> 00:10:08.010
First, we're just getting hold
of our getUserMedia.

00:10:08.010 --> 00:10:12.040
And for the ones that doesn't
know, if we search here quite

00:10:12.040 --> 00:10:16.960
quickly, WebRTC, you could see
that we're supporting--

00:10:19.870 --> 00:10:22.810
let's do Web [INAUDIBLE].

00:10:25.770 --> 00:10:29.850
So getUserMedia, which is the
right way to call it, will be

00:10:29.850 --> 00:10:32.760
supported in the near
future on IE 11.

00:10:32.760 --> 00:10:40.390
And it's currently supported in
Firefox, Chrome, and Opera.

00:10:40.390 --> 00:10:43.230
So when we're going to our code,
you can see that I'm

00:10:43.230 --> 00:10:44.390
calling getUserMedia.

00:10:44.390 --> 00:10:47.120
Hopefully, it will be the
standard, and all the browsers

00:10:47.120 --> 00:10:48.360
will support it.

00:10:48.360 --> 00:10:52.520
And for now, I'm just checking
and making sure that I get a

00:10:52.520 --> 00:10:58.700
hold through that prefixes for
WebKit and Moz for Firefox.

00:10:58.700 --> 00:11:02.010
Once I do that, I have
here my callback.

00:11:02.010 --> 00:11:05.360
And this callback is basically
being set it here.

00:11:05.360 --> 00:11:08.730
And the errorCallback to just
make sure that we are

00:11:08.730 --> 00:11:11.200
communicating right now to
ourselves what's happening in

00:11:11.200 --> 00:11:14.910
case that things are not going
smoothly, and a few

00:11:14.910 --> 00:11:15.580
constraints.

00:11:15.580 --> 00:11:19.020
So in our case, we'll just do
the video capturing, but you

00:11:19.020 --> 00:11:21.270
could do it with
audio, as well.

00:11:21.270 --> 00:11:24.170
Now, when we successCallback,
and basically have the

00:11:24.170 --> 00:11:28.990
localMediaStream that I'm just
attaching to a [INAUDIBLE].

00:11:28.990 --> 00:11:33.950
And then in my case, I have
a video tag that now I'm

00:11:33.950 --> 00:11:35.210
getting hold on.

00:11:35.210 --> 00:11:37.600
And this video tag, I'm
basically taking the video

00:11:37.600 --> 00:11:39.890
source-- and that's one of the
beauty in this API, that

00:11:39.890 --> 00:11:44.380
basically we're leveraging the
same good, old attributes that

00:11:44.380 --> 00:11:48.840
we had in the video element.

00:11:48.840 --> 00:11:52.980
And here in video.src, I could
just attach to it instead of

00:11:52.980 --> 00:11:54.510
just an empty for file.

00:11:54.510 --> 00:11:57.900
And just attaching this
localMediaStream.

00:11:57.900 --> 00:12:00.850
And by doing so, I'm just
creating a URL.object that

00:12:00.850 --> 00:12:03.820
will be able to stream it
to the video element.

00:12:03.820 --> 00:12:06.330
And when I'm clicking Play,
basically, the result here is

00:12:06.330 --> 00:12:10.500
that you could see and
work with this

00:12:10.500 --> 00:12:13.470
stream for your usage.

00:12:13.470 --> 00:12:18.480
Visibility API is actually a
very nice API that gives you

00:12:18.480 --> 00:12:22.620
the ability to see what the
users are actually exposing to

00:12:22.620 --> 00:12:24.250
in your current tab or window.

00:12:24.250 --> 00:12:26.010
So when the user is flipping--

00:12:26.010 --> 00:12:28.900
and you can see here that they
flipped several times from

00:12:28.900 --> 00:12:31.530
caniuse and back to our page--

00:12:31.530 --> 00:12:35.490
each time I did so, a new
event was triggered.

00:12:35.490 --> 00:12:39.390
And right now I just put it on
the page itself, so you could

00:12:39.390 --> 00:12:40.320
all see it.

00:12:40.320 --> 00:12:43.550
But you can imagine that you
could stop the video playing,

00:12:43.550 --> 00:12:46.790
for instance, or do other clever
things when the users

00:12:46.790 --> 00:12:50.790
are not really paying attention
or focusing on the

00:12:50.790 --> 00:12:55.020
current tab or window
that you are doing.

00:12:55.020 --> 00:12:57.510
In order to get this, we're just
attaching the listener to

00:12:57.510 --> 00:12:59.300
the visibilityChange.

00:12:59.300 --> 00:13:01.430
And then we could do
whatever we like.

00:13:01.430 --> 00:13:04.260
Our support here, a nice
tutorial that my colleague

00:13:04.260 --> 00:13:08.710
John [INAUDIBLE] wrote, giving
you a very nice capability of

00:13:08.710 --> 00:13:12.870
how to use this nice API.

00:13:12.870 --> 00:13:15.850
Device Orientation, of course,
as you all know, on mobile

00:13:15.850 --> 00:13:17.810
devices, we have the ability
to work with the

00:13:17.810 --> 00:13:21.810
accelerometer, and get what the
device itself is doing now

00:13:21.810 --> 00:13:23.710
in a 3D environment.

00:13:23.710 --> 00:13:26.770
And we've got those three params
on the alpha, beta and

00:13:26.770 --> 00:13:28.510
gamma axles.

00:13:28.510 --> 00:13:31.320
And basically, this API is
really nice if you are

00:13:31.320 --> 00:13:35.260
developing any web app that will
want to use or leverage

00:13:35.260 --> 00:13:39.740
the capabilities of the mobile
browsers, or on the

00:13:39.740 --> 00:13:43.300
tablet, or on phones.

00:13:43.300 --> 00:13:47.230
I think we covered most of the
things that I wanted here.

00:13:47.230 --> 00:13:50.730
And as I promised, today we'll
keep it real short.

00:13:50.730 --> 00:13:55.970
And if there's any question on
HTML5 APIs, please feel free

00:13:55.970 --> 00:14:03.050
to reach out to me on
plus.google.com-+idogreen, or

00:14:03.050 --> 00:14:06.310
on Twitter @greenido,
is one word.

00:14:06.310 --> 00:14:10.400
And if some of the viewers got
some questions right now,

00:14:10.400 --> 00:14:13.870
please feel free to ask.

00:14:13.870 --> 00:14:17.080
Let's see if we have some
questions on the chat.

00:14:17.080 --> 00:14:17.950
No, we don't.

00:14:17.950 --> 00:14:21.830
So until next time, be strong
and safe, and see you.

00:14:21.830 --> 00:14:23.080
Bye.

