WEBVTT
Kind: captions
Language: en

00:00:13.950 --> 00:00:18.180
 my presentation will be about thirty 

00:00:16.139 --> 00:00:19.830
 minutes and I'll talk about a project 

00:00:18.180 --> 00:00:21.150
 so a little more practical home 

00:00:19.830 --> 00:00:22.200
 compared to the presences you have seen 

00:00:21.150 --> 00:00:24.990
 till now 

00:00:22.200 --> 00:00:27.240
 I'm a nostalgia interface 

00:00:24.990 --> 00:00:28.230
 of google in france and I'm in fact 

00:00:27.240 --> 00:00:29.809
 using all these various 

00:00:28.230 --> 00:00:32.390
 technologies to make a project 

00:00:29.809 --> 00:00:34.680
 applicable in the real world and is 

00:00:32.390 --> 00:00:39.030
 practically a quality of analytics on 

00:00:34.680 --> 00:00:41.219
 google plus you might think the profit 

00:00:39.030 --> 00:00:42.450
 in the real world up to a certain point though 

00:00:41.219 --> 00:00:44.430
 actually google plus a tool 

00:00:42.450 --> 00:00:46.080
 very useful at the company level as 

00:00:44.430 --> 00:00:48.210
 internal social network of companies 

00:00:46.080 --> 00:00:50.970
 so this project is thought more than 

00:00:48.210 --> 00:00:52.050
 another for a business environment 

00:00:50.970 --> 00:00:54.120
 this does not remove all the technologies 

00:00:52.050 --> 00:00:56.070
 which shows the pieces of code which is that 

00:00:54.120 --> 00:00:58.890
 I will show you they are useful in any 

00:00:56.070 --> 00:01:01.770
 application also consumer the application la 

00:00:58.890 --> 00:01:03.720
 presentation you see a little small e 

00:01:01.770 --> 00:01:06.930
 torn up the code will be difficult to 

00:01:03.720 --> 00:01:08.490
 read then it is written there 2r l ve lo 

00:01:06.930 --> 00:01:12.990
 I rewrite here in case anyone wants 

00:01:08.490 --> 00:01:25.789
 look at the code you want to go to 

00:01:12.990 --> 00:01:25.789
 this wars between xv of gm 

00:01:30.760 --> 00:01:38.380
 ok perfect then first of all what it is 

00:01:36.790 --> 00:01:40.510
 the project the project practically 

00:01:38.380 --> 00:01:42.190
 the idea is to start from what you 

00:01:40.510 --> 00:01:43.960
 see on google plus then the feed 

00:01:42.190 --> 00:01:46.000
 google plus news news 

00:01:43.960 --> 00:01:47.680
 all posts that are shared e 

00:01:46.000 --> 00:01:51.190
 turn it into an application 

00:01:47.680 --> 00:01:52.540
 interactive that can show the 

00:01:51.190 --> 00:01:54.580
 report of what happens on the domain 

00:01:52.540 --> 00:01:56.230
 then summary statistics 

00:01:54.580 --> 00:01:58.540
 how many places are the contents 

00:01:56.230 --> 00:02:00.970
 main of these posts what is the 

00:01:58.540 --> 00:02:03.610
 type of sharing that is done the most 

00:02:00.970 --> 00:02:05.290
 often and in parallel also a system 

00:02:03.610 --> 00:02:07.180
 advanced research because the increase on 

00:02:05.290 --> 00:02:09.010
 google plus there are no systems for 

00:02:07.180 --> 00:02:11.800
 search specifically for example 

00:02:09.010 --> 00:02:14.440
 all posts published on such a day 

00:02:11.800 --> 00:02:17.680
 those with containing this string 

00:02:14.440 --> 00:02:19.300
 of words for example then create 

00:02:17.680 --> 00:02:20.800
 some more business tools a little 

00:02:19.300 --> 00:02:24.730
 more professional to manage a domain 

00:02:20.800 --> 00:02:26.490
 google plus what i'll show you 

00:02:24.730 --> 00:02:29.560
 it will quickly be divided into six parts 

00:02:26.490 --> 00:02:30.730
 these parts start from the raw data of 

00:02:29.560 --> 00:02:32.050
 google plus which is what got me 

00:02:30.730 --> 00:02:33.940
 wounded by the pious and up to 

00:02:32.050 --> 00:02:36.790
 an interactive interface that is 

00:02:33.940 --> 00:02:38.140
 developed with aguilar js and allows 

00:02:36.790 --> 00:02:40.360
 show real time 

00:02:38.140 --> 00:02:42.790
 these data then phase 1 take i 

00:02:40.360 --> 00:02:44.410
 given the rai the chrono job for 

00:02:42.790 --> 00:02:46.600
 synchronize your pockets in the background 

00:02:44.410 --> 00:02:49.330
 phase 2 save them with the history of 

00:02:46.600 --> 00:02:51.459
 that apparatus bastian phase iii can 

00:02:49.330 --> 00:02:54.340
 look for this data in a very way 

00:02:51.459 --> 00:02:56.500
 flexible with the greenhouse cpi phase 4 

00:02:54.340 --> 00:03:00.010
 process these data and these are 

00:02:56.500 --> 00:03:02.530
 let's say non-special technologies of 

00:03:00.010 --> 00:03:04.900
 google at the park but they are techniques 

00:03:02.530 --> 00:03:07.750
 generic that apply in environments 

00:03:04.900 --> 00:03:10.330
 with high scalability you have 5 present 

00:03:07.750 --> 00:03:13.360
 this data then with ip airest per 

00:03:10.330 --> 00:03:15.010
 example google cloud end point and phase 

00:03:13.360 --> 00:03:16.360
 6 last stage also the direction if the 

00:03:15.010 --> 00:03:17.220
 google cars to create an interface 

00:03:16.360 --> 00:03:19.660
 interactive 

00:03:17.220 --> 00:03:22.660
 all this is done with google 

00:03:19.660 --> 00:03:26.170
 app engine and python then code field 

00:03:22.660 --> 00:03:27.610
 they will be in python then surely 

00:03:26.170 --> 00:03:28.989
 many of you will think but this one 

00:03:27.610 --> 00:03:30.760
 what wise to do it I don't see why I have to 

00:03:28.989 --> 00:03:32.560
 learn me 400 new technologies for 

00:03:30.760 --> 00:03:35.120
 being able to do something I can 

00:03:32.560 --> 00:03:37.489
 very well done with other tools 

00:03:35.120 --> 00:03:39.049
 the advantages have been explained already 

00:03:37.489 --> 00:03:41.180
 widely today but fundamentally i 

00:03:39.049 --> 00:03:44.030
 of the summaries in three points which are the 

00:03:41.180 --> 00:03:46.819
 first is a unique single code 

00:03:44.030 --> 00:03:49.280
 deploy and infinite scalability if they come 

00:03:46.819 --> 00:03:51.739
 maintained certain rules of development on 

00:03:49.280 --> 00:03:54.110
 second is a cohesive tool suite 

00:03:51.739 --> 00:03:54.799
 cohesive and complete to develop everything 

00:03:54.110 --> 00:03:56.629
 necessary 

00:03:54.799 --> 00:03:58.760
 I in this service use hundred 

00:03:56.629 --> 00:04:00.860
 percent technology on the platform 

00:03:58.760 --> 00:04:04.069
 google gives data origin up to 

00:04:00.860 --> 00:04:05.329
 html javascript and third presentations 

00:04:04.069 --> 00:04:06.650
 point because objectively after three 

00:04:05.329 --> 00:04:08.870
 months four months I work on this 

00:04:06.650 --> 00:04:10.069
 project is fun is a set of 

00:04:08.870 --> 00:04:12.489
 technologies that can also render 

00:04:10.069 --> 00:04:14.989
 nice to work 

00:04:12.489 --> 00:04:17.900
 so let's start from the initial phase 

00:04:14.989 --> 00:04:18.620
 google and ip to Bolivians are the piae 

00:04:17.900 --> 00:04:20.840
 rest 

00:04:18.620 --> 00:04:23.300
 as you have seen before and the thing 

00:04:20.840 --> 00:04:26.660
 positive is that there is a quality 

00:04:23.300 --> 00:04:28.370
 vast are the etnai 176 186 

00:04:26.660 --> 00:04:30.949
 something like that and they are practically 

00:04:28.370 --> 00:04:32.000
 all the same as format means that 

00:04:30.949 --> 00:04:33.710
 if you want learned to use a stack of 

00:04:32.000 --> 00:04:35.389
 google for example youtube then 

00:04:33.710 --> 00:04:37.190
 use that of google plus think 

00:04:35.389 --> 00:04:39.440
 that of the principal or the weather 

00:04:37.190 --> 00:04:41.360
 predictions any p rai will be more or 

00:04:39.440 --> 00:04:42.830
 less the same thing to use indeed 

00:04:41.360 --> 00:04:44.840
 exactly the same thing because the 

00:04:42.830 --> 00:04:45.740
 client is just the same so a 

00:04:44.840 --> 00:04:48.169
 excellent investment 

00:04:45.740 --> 00:04:49.639
 you will have only one client you will not have to 

00:04:48.169 --> 00:04:51.710
 install nothing because it is integrated into 

00:04:49.639 --> 00:04:53.150
 app engine and you don't even have to 

00:04:51.710 --> 00:04:57.169
 update nothing because it does 

00:04:53.150 --> 00:04:59.570
 part of the platform this is a 

00:04:57.169 --> 00:05:01.490
 complete code except for 

00:04:59.570 --> 00:05:03.130
 authentication match to make 

00:05:01.490 --> 00:05:04.820
 calls on google plus and pia e 

00:05:03.130 --> 00:05:07.910
 so what we need to do is 

00:05:04.820 --> 00:05:10.669
 import the most simply from epia 

00:05:07.910 --> 00:05:12.260
 import bild these generic any p 

00:05:10.669 --> 00:05:14.900
 igoogle works with this line of 

00:05:12.260 --> 00:05:15.710
 code create our pious jack 

00:05:14.900 --> 00:05:18.590
 google plus 

00:05:15.710 --> 00:05:20.419
 then the plus plus one version 

00:05:18.590 --> 00:05:21.830
 domaines after which we can already 

00:05:20.419 --> 00:05:23.840
 start the next line of code a 

00:05:21.830 --> 00:05:26.030
 make requests and get answers 

00:05:23.840 --> 00:05:27.919
 very quiet python objects 

00:05:26.030 --> 00:05:32.780
 what can we poor's that we can use 

00:05:27.919 --> 00:05:34.310
 in our code, therefore, just like 

00:05:32.780 --> 00:05:36.410
 I said we have hundreds of bees a 

00:05:34.310 --> 00:05:38.180
 arrangement the two advantages are that 

00:05:36.410 --> 00:05:40.970
 they are all summarized on the google site 

00:05:38.180 --> 00:05:42.569
 in the console folds that you can see a 

00:05:40.970 --> 00:05:46.770
 I think it is 

00:05:42.569 --> 00:05:50.009
 the plans look for the console plans on ip and 

00:05:46.770 --> 00:05:52.469
 console on google and find it expert 

00:05:50.009 --> 00:05:55.289
 they are all easily probable from the p 

00:05:52.469 --> 00:05:56.849
 ex ploner is this trend here was 

00:05:55.289 --> 00:05:58.559
 explained the really beautiful thing first 

00:05:56.849 --> 00:06:00.360
 of the pi explorer is that it is not a site 

00:05:58.559 --> 00:06:02.520
 static generated on purpose for those more 

00:06:00.360 --> 00:06:04.259
 but it is something dynamic that is me if 

00:06:02.520 --> 00:06:05.789
 I modify these pious and automatically the 

00:06:04.259 --> 00:06:08.520
 flora squares and fits and shows me 

00:06:05.789 --> 00:06:09.569
 all the possibilities of real batteries 

00:06:08.520 --> 00:06:10.709
 time 

00:06:09.569 --> 00:06:13.169
 and that's exactly what you can do 

00:06:10.709 --> 00:06:15.930
 you with google cloud and poems i wanted 

00:06:13.169 --> 00:06:18.659
 make a small demo to show 

00:06:15.930 --> 00:06:21.020
 exactly how these these pm work 

00:06:18.659 --> 00:06:23.240
 to take the demo we take advantage 

00:06:21.020 --> 00:06:25.709
 the interactive console 

00:06:23.240 --> 00:06:27.629
 what you see right now is 

00:06:25.709 --> 00:06:29.279
 practically the development console of 

00:06:27.629 --> 00:06:31.319
 app engine what it means what 

00:06:29.279 --> 00:06:34.050
 showed bastian before was there 

00:06:31.319 --> 00:06:35.490
 app engine deployment console ie 

00:06:34.050 --> 00:06:36.839
 what you see when 

00:06:35.490 --> 00:06:38.849
 the application is loaded 

00:06:36.839 --> 00:06:40.589
 on the google infrastructure really 

00:06:38.849 --> 00:06:43.199
 developed clearly worked in 

00:06:40.589 --> 00:06:45.689
 local so there is a server app engine e 

00:06:43.199 --> 00:06:48.809
 true well server that simulates the environment of 

00:06:45.689 --> 00:06:50.189
 deploy in a very very precise and 

00:06:48.809 --> 00:06:52.619
 allows you to have access to a set of 

00:06:50.189 --> 00:06:54.389
 tools to make tests to do 

00:06:52.619 --> 00:06:55.939
 analysis on your code in 

00:06:54.389 --> 00:06:59.009
 development 

00:06:55.939 --> 00:07:00.479
 then let's see if I have a reach here 

00:06:59.009 --> 00:07:03.719
 hand code 

00:07:00.479 --> 00:07:06.209
 here is when we can do 

00:07:03.719 --> 00:07:08.550
 practically execute writings by 

00:07:06.209 --> 00:07:11.279
 python code that is executed 

00:07:08.550 --> 00:07:12.779
 on the source of the application in this 

00:07:11.279 --> 00:07:14.069
 case the application is simple 

00:07:12.779 --> 00:07:15.959
 python application then us 

00:07:14.069 --> 00:07:19.069
 we execute lines of code in the cases 

00:07:15.959 --> 00:07:21.300
 the app engine environment does not come 

00:07:19.069 --> 00:07:22.829
 to look at that matters to him 

00:07:21.300 --> 00:07:26.639
 what matters is the next part 

00:07:22.829 --> 00:07:28.680
 women we create an ep and google plus e 

00:07:26.639 --> 00:07:29.789
 we can start using it in this 

00:07:28.680 --> 00:07:32.149
 case we are identified with my account 

00:07:29.789 --> 00:07:34.759
 can do an experiment for example 

00:07:32.149 --> 00:07:37.439
 then service is our pious jack 

00:07:34.759 --> 00:07:39.769
 for example we want to see mine 

00:07:37.439 --> 00:07:39.769
 profile 

00:07:40.150 --> 00:07:48.130
 there is everything you see 

00:07:44.870 --> 00:07:48.130
 yes yes yes that's what I said 

00:07:48.740 --> 00:07:52.130
 certainly everything you do in the app 

00:07:50.030 --> 00:07:53.540
 engine not a hundred percent clearly 

00:07:52.130 --> 00:07:55.160
 the same thing, however, a good one 

00:07:53.540 --> 00:07:55.700
 approximation can be simulated in 

00:07:55.160 --> 00:07:57.110
 local 

00:07:55.700 --> 00:07:58.520
 this is a net advantage 

00:07:57.110 --> 00:08:01.910
 for example if you know platforms 

00:07:58.520 --> 00:08:03.890
 like heroku which is a little counterpart on 

00:08:01.910 --> 00:08:05.480
 amazon app engine platform them 

00:08:03.890 --> 00:08:07.670
 they do not have tools to simulate this 

00:08:05.480 --> 00:08:09.470
 the behavior of the 

00:08:07.670 --> 00:08:11.510
 data store of the development environment 

00:08:09.470 --> 00:08:19.280
 moreover it is an advantage to be able to simulate 

00:08:11.510 --> 00:08:19.700
 an almost real environment the local of the 

00:08:19.280 --> 00:08:22.850
 gay 

00:08:19.700 --> 00:08:23.210
 the call to the piai clearly on the yes 

00:08:22.850 --> 00:08:27.890
 of course 

00:08:23.210 --> 00:08:30.860
 yes yes yes no no no complaint remains 

00:08:27.890 --> 00:08:36.070
 remain those of playa te now you 

00:08:30.860 --> 00:08:36.070
 I show directly yes 

00:08:37.520 --> 00:08:45.080
 yes specific specific to app engine is 

00:08:41.630 --> 00:08:47.150
 high no but what is needed is a 

00:08:45.080 --> 00:08:49.010
 any of python to work e 

00:08:47.150 --> 00:08:50.960
 presidio then charmant the most evolved a 

00:08:49.010 --> 00:08:52.130
 my opinion from this point of view e 

00:08:50.960 --> 00:08:53.780
 it works very well I've used to 

00:08:52.130 --> 00:08:56.330
 develop this application 

00:08:53.780 --> 00:09:05.390
 and then there is the environment must the open server 

00:08:56.330 --> 00:09:09.100
 with graphical interface for sx sipra per 

00:09:05.390 --> 00:09:09.100
 python and for java 

00:09:13.140 --> 00:09:17.830
 nothing is needed for the deployment 

00:09:16.180 --> 00:09:20.800
 the local plane and automatically 

00:09:17.830 --> 00:09:22.570
 refresh ato with the bild therefore not not 

00:09:20.800 --> 00:09:25.600
 there is to do deployed while you write see 

00:09:22.570 --> 00:09:29.580
 real time python update 

00:09:25.600 --> 00:09:29.580
 we apologize if this when in fact 

00:09:41.250 --> 00:09:46.330
 ok then let's have a little demo then 

00:09:43.930 --> 00:09:47.860
 any questions even when i finish 

00:09:46.330 --> 00:09:49.570
 this part of speech can be given 

00:09:47.860 --> 00:09:51.990
 also the questions this the profile 

00:09:49.570 --> 00:09:53.980
 google plus you see is information 

00:09:51.990 --> 00:09:56.260
 my information is the google profile 

00:09:53.980 --> 00:09:57.490
 plus is a test domain so I am 

00:09:56.260 --> 00:09:59.380
 enough random information in 

00:09:57.490 --> 00:10:01.300
 actually for example we see the date of 

00:09:59.380 --> 00:10:02.440
 birth 28 October 

00:10:01.300 --> 00:10:06.070
 we can make a request to 

00:10:02.440 --> 00:10:08.290
 raw people resource 

00:10:06.070 --> 00:10:11.410
 if it's not east anymore I want to take one 

00:10:08.290 --> 00:10:13.390
 single person then gas the user id 

00:10:11.410 --> 00:10:17.100
 of the person is my email then luca 

00:10:13.390 --> 00:10:19.330
 story to itself todt com 

00:10:17.100 --> 00:10:22.860
 after which we execute the request 

00:10:19.330 --> 00:10:26.470
 execute we print what we get 

00:10:22.860 --> 00:10:32.830
 in a readable way 

00:10:26.470 --> 00:10:33.130
 let's see if it works perfect on the first one 

00:10:32.830 --> 00:10:35.980
 blow 

00:10:33.130 --> 00:10:37.510
 and here we have a prest resource that is 

00:10:35.980 --> 00:10:38.680
 then became a python object 

00:10:37.510 --> 00:10:40.089
 practically in a line of code 

00:10:38.680 --> 00:10:42.130
 we downloaded my google profile 

00:10:40.089 --> 00:10:44.640
 plus and we can use it directly 

00:10:42.130 --> 00:10:47.350
 so here if we select the field 

00:10:44.640 --> 00:10:50.830
 of gays 

00:10:47.350 --> 00:10:53.230
 we want to see my date of birth 

00:10:50.830 --> 00:10:54.730
 exactly we can do other things 

00:10:53.230 --> 00:10:56.410
 these plans are very flexible for 

00:10:54.730 --> 00:10:58.360
 example we can have access to 

00:10:56.410 --> 00:10:59.440
 activities that is, places are made 

00:10:58.360 --> 00:11:01.690
 on the domain 

00:10:59.440 --> 00:11:03.780
 instead of pippo we will write activities 

00:11:01.690 --> 00:11:06.310
 the syntax is always the same 

00:11:03.780 --> 00:11:09.270
 we can always stay for the users 

00:11:06.310 --> 00:11:12.220
 and my email 

00:11:09.270 --> 00:11:15.250
 we must indicate my activities 

00:11:12.220 --> 00:11:17.740
 then the user clearly warns in 

00:11:15.250 --> 00:11:19.420
 this case no longer exists and this 

00:11:17.740 --> 00:11:21.870
 let us put the first example 

00:11:19.420 --> 00:11:26.050
 indeed we say everything 

00:11:21.870 --> 00:11:29.320
 let's see if it works this time here we are 

00:11:26.050 --> 00:11:30.760
 here therefore a list of the activity a little 

00:11:29.320 --> 00:11:32.260
 unclear what you see here because 

00:11:30.760 --> 00:11:34.510
 there are a lot of fields that really don't 

00:11:32.260 --> 00:11:37.060
 we need a very good function 

00:11:34.510 --> 00:11:39.220
 of the pies which is standard on all 

00:11:37.060 --> 00:11:41.260
 google rest folds is that we can 

00:11:39.220 --> 00:11:44.770
 limit the request to some fields 

00:11:41.260 --> 00:11:46.120
 therefore we can select films and 

00:11:44.770 --> 00:11:48.070
 with a fairly simple syntax 

00:11:46.120 --> 00:11:53.890
 we can say limits the answer to 

00:11:48.070 --> 00:11:56.440
 what contents items object content 

00:11:53.890 --> 00:11:58.870
 what to show me if I'm not mistaken 

00:11:56.440 --> 00:12:00.370
 only the content of the posts I have 

00:11:58.870 --> 00:12:03.250
 done on the domain 

00:12:00.370 --> 00:12:07.240
 exact perfect then but leave 

00:12:03.250 --> 00:12:08.830
 read quite a bit of zoom then 

00:12:07.240 --> 00:12:10.839
 in this way we see the content 

00:12:08.830 --> 00:12:11.350
 the object object with ten content 

00:12:10.839 --> 00:12:13.240
 of the post 

00:12:11.350 --> 00:12:16.870
 all this you see is completely 

00:12:13.240 --> 00:12:20.709
 actually so if I am here 

00:12:16.870 --> 00:12:23.790
 I make a nice post a nice post and 

00:12:20.709 --> 00:12:23.790
 I make my request again 

00:12:25.330 --> 00:12:30.070
 maybe so it was too perfect actually 

00:12:27.850 --> 00:12:32.110
 a nice post so something like a 

00:12:30.070 --> 00:12:33.520
 second after my seat went into 

00:12:32.110 --> 00:12:36.160
 america has spread on the google network 

00:12:33.520 --> 00:12:37.720
 since it was posted on the sony 

00:12:36.160 --> 00:12:39.910
 france between the feet google and I took it back 

00:12:37.720 --> 00:12:42.540
 he downloaded it fairly locally 

00:12:39.910 --> 00:12:42.540
 imprinted 

00:12:45.009 --> 00:12:52.600
 now on I can give 

00:12:50.710 --> 00:12:54.910
 this is quite a talk 

00:12:52.600 --> 00:12:56.530
 complex and if you want later we can 

00:12:54.910 --> 00:12:58.210
 explain who in detail however the 

00:12:56.530 --> 00:13:01.540
 concept that this is feasible only 

00:12:58.210 --> 00:13:03.820
 for business profiles in which and who 

00:13:01.540 --> 00:13:05.830
 holds this authority on this dome 

00:13:03.820 --> 00:13:07.840
 domain of google ax di and bind to 

00:13:05.830 --> 00:13:09.130
 checking the profiles that is not possible 

00:13:07.840 --> 00:13:11.650
 deal with a google domain with a 

00:13:09.130 --> 00:13:14.140
 google plus consumer profile but those 

00:13:11.650 --> 00:13:17.370
 that you have at discount in the company then 

00:13:14.140 --> 00:13:17.370
 a very particular case actually 

00:13:17.760 --> 00:13:21.610
 perfect so this is an example 

00:13:20.380 --> 00:13:23.260
 to show how plans are 

00:13:21.610 --> 00:13:24.430
 easily usable and the same thing 

00:13:23.260 --> 00:13:26.200
 I did here you can do it with any 

00:13:24.430 --> 00:13:28.090
 pia and then youtube prediction 

00:13:26.200 --> 00:13:34.560
 any feet comes to mind of google 

00:13:28.090 --> 00:13:36.610
 the senses work the same way 

00:13:34.560 --> 00:13:40.690
 animated with the part after we are 

00:13:36.610 --> 00:13:42.160
 get up to speed we rightly have 

00:13:40.690 --> 00:13:44.080
 downloaded our information from p 

00:13:42.160 --> 00:13:46.300
 rai after which we want to save in 

00:13:44.080 --> 00:13:48.850
 our app engine back end but not 

00:13:46.300 --> 00:13:50.860
 we want to hire a person for 

00:13:48.850 --> 00:13:51.310
 press the reflex button every 

00:13:50.860 --> 00:13:53.140
 two hours 

00:13:51.310 --> 00:13:55.000
 but do something automatically 

00:13:53.140 --> 00:13:58.110
 for this case we have two features 

00:13:55.000 --> 00:14:00.250
 the chrono jobs that are are fundamental 

00:13:58.110 --> 00:14:02.020
 they left that I already have unique if 

00:14:00.250 --> 00:14:06.190
 you know those are ways to 

00:14:02.020 --> 00:14:08.290
 call a rl every tot time in this 

00:14:06.190 --> 00:14:10.420
 In this case there is two real case 

00:14:08.290 --> 00:14:12.670
 stars wrap vitis is called every 

00:14:10.420 --> 00:14:15.250
 the twenty four awards the drink crucible 

00:14:12.670 --> 00:14:17.320
 call rl which executes a method which 

00:14:15.250 --> 00:14:20.200
 however it does not do sync directly because 

00:14:17.320 --> 00:14:21.700
 if I make a request to one by one 

00:14:20.200 --> 00:14:24.160
 real app engine app like 

00:14:21.700 --> 00:14:27.310
 all rl on web server the limit of 

00:14:24.160 --> 00:14:28.600
 then typically 30 seconds time 

00:14:27.310 --> 00:14:29.080
 this is not enough to make a 

00:14:28.600 --> 00:14:30.370
 sync 

00:14:29.080 --> 00:14:32.350
 then at this point we use the 

00:14:30.370 --> 00:14:35.530
 push closed or back ends as they were 

00:14:32.350 --> 00:14:36.130
 been explained and top precedents to do 

00:14:35.530 --> 00:14:38.110
 in the background 

00:14:36.130 --> 00:14:40.320
 the sync of protected activities from google 

00:14:38.110 --> 00:14:42.820
 plus to our app engine application 

00:14:40.320 --> 00:14:44.170
 this just to make you see that there is 

00:14:42.820 --> 00:14:46.900
 a complete infrastructure behind that 

00:14:44.170 --> 00:14:48.480
 allows you to manage these tusk in 

00:14:46.900 --> 00:14:51.400
 background with timing 

00:14:48.480 --> 00:14:54.070
 constant without having to find others 

00:14:51.400 --> 00:14:55.500
 server other tools is all integrated into the 

00:14:54.070 --> 00:14:59.059
 app engine control panel e 

00:14:55.500 --> 00:15:04.399
 not just if you go to yours 

00:14:59.059 --> 00:15:06.349
 development panel you can see the 

00:15:04.399 --> 00:15:08.539
 present and already present pockets 

00:15:06.349 --> 00:15:10.129
 therefore also directly in the development 

00:15:08.539 --> 00:15:16.819
 without having to deploy it already 

00:15:10.129 --> 00:15:18.859
 use this in development next 

00:15:16.819 --> 00:15:20.569
 so we downloaded all the data from 

00:15:18.859 --> 00:15:23.029
 google plus we download them every few 

00:15:20.569 --> 00:15:24.859
 now after that we must save them and 

00:15:23.029 --> 00:15:26.659
 save in the pastor's data store 

00:15:24.859 --> 00:15:30.619
 as explained by bastian before the back 

00:15:26.659 --> 00:15:32.659
 store is a sql database so it's a bit 

00:15:30.619 --> 00:15:34.849
 a key value store where I have an object 

00:15:32.659 --> 00:15:37.309
 I save him and I can take this back 

00:15:34.849 --> 00:15:39.349
 object through its key and gods 

00:15:37.309 --> 00:15:41.989
 here a little more complex 

00:15:39.349 --> 00:15:44.629
 let's start from a certain very simple ho 

00:15:41.989 --> 00:15:47.449
 lost the google plus person too 

00:15:44.629 --> 00:15:50.499
 will have two properties the name and email is 

00:15:47.449 --> 00:15:52.189
 string type properties 

00:15:50.499 --> 00:15:53.929
 then we create the object 

00:15:52.189 --> 00:15:55.549
 activity is here you see some more 

00:15:53.929 --> 00:15:57.379
 interesting features for example 

00:15:55.549 --> 00:15:59.149
 the well-off activity can contain 

00:15:57.379 --> 00:16:01.339
 property of type string text 

00:15:59.149 --> 00:16:03.979
 defining preset choices 

00:16:01.339 --> 00:16:05.979
 so you know it's nothing like that 

00:16:03.979 --> 00:16:08.839
 it happens from the back end level this 

00:16:05.979 --> 00:16:10.249
 client feature in python then 

00:16:08.839 --> 00:16:11.689
 the python client itself checks 

00:16:10.249 --> 00:16:13.939
 that the value is part of that 

00:16:11.689 --> 00:16:15.679
 list of values ​​supports daytime 

00:16:13.939 --> 00:16:17.509
 supports structured properties 

00:16:15.679 --> 00:16:20.329
 starship property where I can insert a 

00:16:17.509 --> 00:16:21.619
 other model in the father model e 

00:16:20.329 --> 00:16:23.779
 supports links 

00:16:21.619 --> 00:16:26.229
 c property then as you see that there is 

00:16:23.779 --> 00:16:29.289
 a key type property pointing 

00:16:26.229 --> 00:16:31.279
 to the person object now the first thing that 

00:16:29.289 --> 00:16:33.379
 many of you will think from a background 

00:16:31.279 --> 00:16:35.329
 and if that is this it is a foreign key 

00:16:33.379 --> 00:16:37.369
 business in what means I can 

00:16:35.329 --> 00:16:39.769
 make a nice already in itself I join all 

00:16:37.369 --> 00:16:43.339
 person with all activities for each 

00:16:39.769 --> 00:16:45.439
 no person in the sense that the days are 

00:16:43.339 --> 00:16:48.649
 prohibited because the games do not work 

00:16:45.439 --> 00:16:51.109
 large-scale joint ventures are not 

00:16:48.649 --> 00:16:53.119
 something that can scale on platforms 

00:16:51.109 --> 00:16:54.529
 distributed because we don't know if 

00:16:53.119 --> 00:16:56.739
 that lost object will not be found on a 

00:16:54.529 --> 00:16:58.959
 server in north america while the object 

00:16:56.739 --> 00:17:00.919
 activist will find on a server in asia 

00:16:58.959 --> 00:17:02.449
 so you have to change your own 

00:17:00.919 --> 00:17:04.279
 the reasoning approach in this 

00:17:02.449 --> 00:17:07.279
 case and don't even think about how 

00:17:04.279 --> 00:17:09.130
 make data redundant and effective from 

00:17:07.279 --> 00:17:10.630
 a scalability point of view 

00:17:09.130 --> 00:17:13.690
 and this is exactly what I will do 

00:17:10.630 --> 00:17:15.610
 now with some tricks ni qua è 

00:17:13.690 --> 00:17:17.350
 right short piece of code to do 

00:17:15.610 --> 00:17:19.930
 see how to save an object in age 

00:17:17.350 --> 00:17:22.360
 store simply creates the object yes 

00:17:19.930 --> 00:17:26.020
 populate directly with python data 

00:17:22.360 --> 00:17:27.610
 and put point is all saves him 

00:17:26.020 --> 00:17:30.880
 directly on the app store and returns 

00:17:27.610 --> 00:17:35.500
 the key ie the link to the object in the 

00:17:30.880 --> 00:17:37.150
 of age store we can do some research 

00:17:35.500 --> 00:17:39.190
 so yes if you want you can do it 

00:17:37.150 --> 00:17:41.370
 more complex research can be done 

00:17:39.190 --> 00:17:44.140
 searches for string equalities for 

00:17:41.370 --> 00:17:45.940
 differences on the numbers can be 

00:17:44.140 --> 00:17:47.680
 also put the values ​​in order 

00:17:45.940 --> 00:17:49.710
 all these things are always to be done 

00:17:47.680 --> 00:17:51.580
 with caution because when reasoning about 

00:17:49.710 --> 00:17:52.720
 of the equidae of this type we are 

00:17:51.580 --> 00:17:54.010
 setting indexes 

00:17:52.720 --> 00:17:58.810
 that is if we want to do a search 

00:17:54.010 --> 00:18:01.020
 by order or by the fact that 

00:17:58.810 --> 00:18:03.100
 contain strings or less app engine 

00:18:01.020 --> 00:18:05.890
 will create an index to execute this 

00:18:03.100 --> 00:18:13.510
 research therefore are intense it goes to level 

00:18:05.890 --> 00:18:15.100
 computational search pia and then la 

00:18:13.510 --> 00:18:16.870
 right part the part on how 

00:18:15.100 --> 00:18:18.340
 optimize scalability and see it 

00:18:16.870 --> 00:18:21.010
 in 5 minutes 

00:18:18.340 --> 00:18:23.040
 here is an intermezzo on how to search 

00:18:21.010 --> 00:18:25.120
 these data more efficiently 

00:18:23.040 --> 00:18:26.290
 we have seen we put them we want 

00:18:25.120 --> 00:18:27.160
 look for all the grapevine arts that 

00:18:26.290 --> 00:18:29.740
 contain the word 

00:18:27.160 --> 00:18:33.900
 hello we can do as I show 

00:18:29.740 --> 00:18:36.100
 qua activity dot content in that case 

00:18:33.900 --> 00:18:38.200
 for each of these we unload the 

00:18:36.100 --> 00:18:41.110
 content and then in python to see if hello 

00:18:38.200 --> 00:18:42.130
 is a saab string of this content now 

00:18:41.110 --> 00:18:43.450
 we obviously have this thing is not 

00:18:42.130 --> 00:18:44.710
 feasible because it means that every way 

00:18:43.450 --> 00:18:46.450
 and we make the request 

00:18:44.710 --> 00:18:48.580
 we want to download all the contents of 

00:18:46.450 --> 00:18:50.710
 all local activities and search 

00:18:48.580 --> 00:18:52.540
 one thing at a time therefore exists in the 

00:18:50.710 --> 00:18:54.910
 plans to do exactly this thing is 

00:18:52.540 --> 00:18:57.880
 the feet full textures where we have 

00:18:54.910 --> 00:18:59.710
 a very advanced search syntax e 

00:18:57.880 --> 00:19:01.480
 especially super-fast 

00:18:59.710 --> 00:19:05.290
 to do this kind of research always 

00:19:01.480 --> 00:19:07.240
 inside app engine how it works 

00:19:05.290 --> 00:19:08.740
 it is a separate document we cannot 

00:19:07.240 --> 00:19:10.660
 work directly south and between store and 

00:19:08.740 --> 00:19:12.310
 let's create a copy practically 

00:19:10.660 --> 00:19:14.920
 optimized with information 

00:19:12.310 --> 00:19:15.550
 interest to look for the activity and 

00:19:14.920 --> 00:19:17.290
 we put it 

00:19:15.550 --> 00:19:20.350
 in this 

00:19:17.290 --> 00:19:21.670
 in society and in this case in the 

00:19:20.350 --> 00:19:25.630
 company and we can do research 

00:19:21.670 --> 00:19:27.520
 as for example is the cerciello cerca 

00:19:25.630 --> 00:19:29.650
 whatever it contains in some 

00:19:27.520 --> 00:19:31.330
 part or ledger than a little bit 

00:19:29.650 --> 00:19:33.310
 more advanced for example if he history 

00:19:31.330 --> 00:19:35.320
 of the second line with ten colons 

00:19:33.310 --> 00:19:39.190
 in the activities they contain and have it 

00:19:35.320 --> 00:19:42.070
 inside the content and greater public 

00:19:39.190 --> 00:19:43.900
 of a date as you will notice these 

00:19:42.070 --> 00:19:45.550
 research perhaps for someone is already 

00:19:43.900 --> 00:19:47.380
 family because they are similar to those 

00:19:45.550 --> 00:19:50.230
 that you do in gmail or directly in 

00:19:47.380 --> 00:19:52.360
 google search the very powerful thing of 

00:19:50.230 --> 00:19:54.220
 this interface which is practically 

00:19:52.360 --> 00:19:56.380
 usable by a human directly 

00:19:54.220 --> 00:19:58.780
 it's not even complicated code can't 

00:19:56.380 --> 00:20:00.700
 physically writing counts in two places 

00:19:58.780 --> 00:20:02.200
 hello and intuitive enough to be 

00:20:00.700 --> 00:20:06.370
 used directly as a platform of 

00:20:02.200 --> 00:20:09.610
 I give you a very fast example of 

00:20:06.370 --> 00:20:14.080
 this thing here then we will come back later in 

00:20:09.610 --> 00:20:17.830
 prototype I developed that you see 

00:20:14.080 --> 00:20:19.960
 here this is a search therefore if I in 

00:20:17.830 --> 00:20:21.580
 this case actually writes a sentence 

00:20:19.960 --> 00:20:23.790
 in vivo search throughout the domain of 

00:20:21.580 --> 00:20:26.500
 google plus the activities they contain 

00:20:23.790 --> 00:20:31.720
 this sentence and in this case I can do 

00:20:26.500 --> 00:20:35.620
 also search for the gate type issue 

00:20:31.720 --> 00:20:38.500
 we see the october 8th but said nesi 

00:20:35.620 --> 00:20:41.110
 published here is this for example 

00:20:38.500 --> 00:20:42.910
 the activity is published eight 

00:20:41.110 --> 00:20:44.530
 October and I can do this research 

00:20:42.910 --> 00:20:46.950
 without having to have complex interfaces 

00:20:44.530 --> 00:20:50.760
 search but with a simple string 

00:20:46.950 --> 00:20:50.760
 understandable by a human 

00:20:55.960 --> 00:21:01.460
 the indexes are incremental and not 

00:20:58.550 --> 00:21:03.500
 they are generated but are updated 

00:21:01.460 --> 00:21:05.420
 every time a document is inserted 

00:21:03.500 --> 00:21:07.730
 so it is not a regeneration 

00:21:05.420 --> 00:21:10.010
 of the index but is a mental mini 5 

00:21:07.730 --> 00:21:12.320
 this means that there are never gods 

00:21:10.010 --> 00:21:14.150
 moments when research is slower and 

00:21:12.320 --> 00:21:19.610
 it means that the only expensive operation 

00:21:14.150 --> 00:21:21.530
 and to the inclusion in the document, yes 

00:21:19.610 --> 00:21:23.660
 however, if not read-only in practice 

00:21:21.530 --> 00:21:25.970
 there are not many problems of haven alone 

00:21:23.660 --> 00:21:28.480
 consistent yes so if with 

00:21:25.970 --> 00:21:31.430
 inserts a document in point of 

00:21:28.480 --> 00:21:33.320
 infrastructure is not necessarily the case 

00:21:31.430 --> 00:21:35.120
 immediately available 1000 seconds later 

00:21:33.320 --> 00:21:37.370
 however it is only for reading so there is not 

00:21:35.120 --> 00:21:38.870
 are consistency issues up 

00:21:37.370 --> 00:21:41.300
 writing cannot be changed 

00:21:38.870 --> 00:21:44.990
 they can be deleted and replaced 

00:21:41.300 --> 00:21:46.190
 so the problems are very limited a 

00:21:44.990 --> 00:21:48.980
 other interesting function that can 

00:21:46.190 --> 00:21:51.470
 pleasure is that it also supports the 

00:21:48.980 --> 00:21:52.580
 search for remote then think of 

00:21:51.470 --> 00:21:55.430
 combine this for example with 

00:21:52.580 --> 00:21:58.340
 geolocation api ai google is one can 

00:21:55.430 --> 00:21:59.570
 search indexed activity 

00:21:58.340 --> 00:22:02.240
 for example, that they have been published 

00:21:59.570 --> 00:22:10.480
 within 10 kilometers of where I am 

00:22:02.240 --> 00:22:13.480
 I find at this moment has this fair 

00:22:10.480 --> 00:22:15.730
 things available at search level 

00:22:13.480 --> 00:22:19.590
 let's say the available fields 

00:22:15.730 --> 00:22:22.179
 to look for are html text date fields 

00:22:19.590 --> 00:22:24.370
 atom means a string where not 

00:22:22.179 --> 00:22:26.080
 I consider the text as a paragraph but 

00:22:24.370 --> 00:22:27.360
 as an exact example string 

00:22:26.080 --> 00:22:29.530
 the email address does not make sense to search 

00:22:27.360 --> 00:22:31.450
 a part of the email address 

00:22:29.530 --> 00:22:36.309
 maxi look for the exact e-mail address 

00:22:31.450 --> 00:22:39.760
 to have a match numbers and geo and geo 

00:22:36.309 --> 00:22:41.919
 location to insert a document is 

00:22:39.760 --> 00:22:43.799
 very simple you see you select a 

00:22:41.919 --> 00:22:47.320
 index in this case activities 

00:22:43.799 --> 00:22:51.520
 document index todt put the document 

00:22:47.320 --> 00:22:52.960
 very similar to indy b to do the 

00:22:51.520 --> 00:22:54.460
 search this is a bit of code 

00:22:52.960 --> 00:22:56.740
 that does what we've seen before a 

00:22:54.460 --> 00:22:58.090
 python level so it's the piece of 

00:22:56.740 --> 00:23:01.450
 vadis behind the application 

00:22:58.090 --> 00:23:04.590
 that I had shown if you wanted 

00:23:01.450 --> 00:23:08.200
 experiment as before can be done 

00:23:04.590 --> 00:23:10.360
 directly in the console so without 

00:23:08.200 --> 00:23:11.860
 need to switch to python immediately yes 

00:23:10.360 --> 00:23:16.990
 can start playing right here 

00:23:11.860 --> 00:23:19.480
 from full text select the index is one 

00:23:16.990 --> 00:23:24.130
 can directly query for 

00:23:19.480 --> 00:23:26.820
 hauer example and you get journalist 

00:23:24.130 --> 00:23:30.160
 of documents that mark this queer e 

00:23:26.820 --> 00:23:32.290
 now takes a document could arise 

00:23:30.160 --> 00:23:34.120
 the doubt this is not my document 

00:23:32.290 --> 00:23:36.880
 of the detainer what do I do with a 

00:23:34.120 --> 00:23:38.230
 search document is pious if not 

00:23:36.880 --> 00:23:40.900
 may have the original document 

00:23:38.230 --> 00:23:42.250
 the answer is simple in the I document 

00:23:40.900 --> 00:23:44.740
 I must also save the key of 

00:23:42.250 --> 00:23:46.600
 original document so the process is 

00:23:44.740 --> 00:23:48.760
 I do a search with the pious search 

00:23:46.600 --> 00:23:50.080
 I get results 

00:23:48.760 --> 00:23:52.690
 these risottos contain pointers 

00:23:50.080 --> 00:23:54.070
 to my da pastor and then I go to 

00:23:52.690 --> 00:23:56.140
 take data from the age of store 

00:23:54.070 --> 00:23:57.610
 using the keys directly 

00:23:56.140 --> 00:23:59.710
 the delta history is super optimized for 

00:23:57.610 --> 00:24:01.299
 use of the keys so if I go to 

00:23:59.710 --> 00:24:01.870
 do one here already knowing the key 

00:24:01.299 --> 00:24:04.150
 Item 

00:24:01.870 --> 00:24:05.140
 the course is practically non-existent because I am 

00:24:04.150 --> 00:24:10.940
 already exactly to go and get it 

00:24:05.140 --> 00:24:17.060
 the object we do 

00:24:10.940 --> 00:24:20.690
 an example of code on python could 

00:24:17.060 --> 00:24:22.190
 being here are some other features 

00:24:20.690 --> 00:24:24.320
 interesting that can be shown 

00:24:22.190 --> 00:24:25.730
 from society and to arrive at a 

00:24:24.320 --> 00:24:26.990
 implementation that is a bit more like 

00:24:25.730 --> 00:24:29.690
 what you see on the page of 

00:24:26.990 --> 00:24:31.970
 google search which or which matter to be there 

00:24:29.690 --> 00:24:35.510
 plans decides a search string in 

00:24:31.970 --> 00:24:41.840
 this case hour for example I create 

00:24:35.510 --> 00:24:43.120
 the research object a little confused 

00:24:41.840 --> 00:24:46.270
 my example 

00:24:43.120 --> 00:24:50.180
 ok which is an empty search object 

00:24:46.270 --> 00:24:51.980
 after which I define the subject of the 

00:24:50.180 --> 00:24:54.110
 queer based on the search string e 

00:24:51.980 --> 00:24:56.150
 the options I defined that were in 

00:24:54.110 --> 00:24:58.670
 empty in this case I choose an index 

00:24:56.150 --> 00:25:01.190
 I perform the search the search returns to me 

00:24:58.670 --> 00:25:03.590
 an array of objects for each object ai 

00:25:01.190 --> 00:25:05.990
 various fields of which I can see the vaio e 

00:25:03.590 --> 00:25:07.820
 you run this had to keep exact 

00:25:05.990 --> 00:25:09.860
 where to keep the list of 

00:25:07.820 --> 00:25:11.750
 contents of research objects 

00:25:09.860 --> 00:25:13.040
 so here we are not went to call the 

00:25:11.750 --> 00:25:15.290
 said store are directly i 

00:25:13.040 --> 00:25:16.610
 contained by the research object when 

00:25:15.290 --> 00:25:17.990
 you make the summary page 

00:25:16.610 --> 00:25:20.510
 imagine the summary page of 

00:25:17.990 --> 00:25:22.310
 google.com there you don't go to see the truth 

00:25:20.510 --> 00:25:24.320
 object that contains all the 

00:25:22.310 --> 00:25:25.970
 information on that site is a summary 

00:25:24.320 --> 00:25:28.120
 simply to show gods 

00:25:25.970 --> 00:25:29.990
 intermediate results of the research 

00:25:28.120 --> 00:25:36.890
 the last function I have to show you 

00:25:29.990 --> 00:25:39.140
 nice snippet fields practically 

00:25:36.890 --> 00:25:41.150
 when you do a search and look for 

00:25:39.140 --> 00:25:43.880
 a test like hauer in a text by 

00:25:41.150 --> 00:25:45.590
 ten lines or 100 pages because here 

00:25:43.880 --> 00:25:49.880
 can scale weight than the maximum number 

00:25:45.590 --> 00:25:51.740
 of characters to 1024 to 1024 therefore 

00:25:49.880 --> 00:25:56.180
 documents fairly categorize the calculation 

00:25:51.740 --> 00:25:58.870
 clothes large enough to know 

00:25:56.180 --> 00:26:02.300
 where did he go to make the match? 

00:25:58.870 --> 00:26:04.460
 we are of the string what you have found there 

00:26:02.300 --> 00:26:07.820
 this sleep and fils function 

00:26:04.460 --> 00:26:10.850
 allows to highlight the part that 

00:26:07.820 --> 00:26:14.570
 we have sinned therefore we cancel 

00:26:10.850 --> 00:26:16.250
 this part exactly right here starting 

00:26:14.570 --> 00:26:19.460
 we do not print the content directly 

00:26:16.250 --> 00:26:21.440
 but the expression of the sleeper field is 

00:26:19.460 --> 00:26:23.670
 an html 

00:26:21.440 --> 00:26:25.380
 it can seem very confusing to see oneself this way 

00:26:23.670 --> 00:26:27.830
 but if we carry it in a viewer 

00:26:25.380 --> 00:26:30.930
 of html like for example gesfid or 

00:26:27.830 --> 00:26:32.640
 we get this representation then 

00:26:30.930 --> 00:26:34.980
 you can't see well from there practically 

00:26:32.640 --> 00:26:35.970
 we automatically make sense to describe 

00:26:34.980 --> 00:26:37.950
 no piece of code 

00:26:35.970 --> 00:26:40.740
 we have query summaries that 

00:26:37.950 --> 00:26:42.990
 do matching on the documents with i 

00:26:40.740 --> 00:26:46.020
 small pieces that do matching and in 

00:26:42.990 --> 00:26:47.550
 bold the words they hunted 

00:26:46.020 --> 00:26:50.670
 all this without having to write code 

00:26:47.550 --> 00:26:51.960
 to generate it and all this integrated 

00:26:50.670 --> 00:26:56.390
 precisely in the app engine without having to 

00:26:51.960 --> 00:26:56.390
 import install anything external 

00:26:58.500 --> 00:27:02.240
 back to the presentation 

00:27:06.809 --> 00:27:10.389
 ok so the part of mice is finished 

00:27:09.039 --> 00:27:11.830
 having a quick recap we have 

00:27:10.389 --> 00:27:13.210
 downloaded google plus information 

00:27:11.830 --> 00:27:15.279
 we saved it and made it 

00:27:13.210 --> 00:27:17.289
 searchable via search and search 

00:27:15.279 --> 00:27:19.929
 this is our task to achieve 

00:27:17.289 --> 00:27:22.059
 aggregated data aggregated data into 

00:27:19.929 --> 00:27:25.629
 In this case I gave the example of a number 

00:27:22.059 --> 00:27:27.009
 average of plus one plus one for those who do not 

00:27:25.629 --> 00:27:30.360
 use if fault if the consideration 

00:27:27.009 --> 00:27:32.710
 of the like of facebook i plus one 

00:27:30.360 --> 00:27:34.570
 depend on each activity clearly 

00:27:32.710 --> 00:27:36.220
 and to make an average we have to count 

00:27:34.570 --> 00:27:38.490
 all the plus points that have been made 

00:27:36.220 --> 00:27:40.330
 divide them by the number of activities 

00:27:38.490 --> 00:27:41.649
 clearly all the people that 

00:27:40.330 --> 00:27:43.029
 they use the one in this room 

00:27:41.649 --> 00:27:46.269
 first thing they think ajo do a 

00:27:43.029 --> 00:27:48.070
 select having aggregate function of everything 

00:27:46.269 --> 00:27:51.960
 what is activity and I get 

00:27:48.070 --> 00:27:51.960
 directly my plus one average 

00:27:52.179 --> 00:27:57.120
 there is a way to do this and in 

00:27:53.350 --> 00:27:59.620
 of b that is in the said store yes it is this 

00:27:57.120 --> 00:28:01.090
 very nice very clean very simple 

00:27:59.620 --> 00:28:03.820
 are five lines of code to make one 

00:28:01.090 --> 00:28:05.230
 very trivial thing and you will wonder why 

00:28:03.820 --> 00:28:07.389
 I have to write all crap for 

00:28:05.230 --> 00:28:09.360
 being able to do what in them 

00:28:07.389 --> 00:28:12.039
 those I did with four words 

00:28:09.360 --> 00:28:13.960
 simply because you don't have to do it is 

00:28:12.039 --> 00:28:15.820
 ugly because it is not recommended because not 

00:28:13.960 --> 00:28:18.779
 is the right approach with a said store 

00:28:15.820 --> 00:28:18.779
 not sql 

00:28:19.360 --> 00:28:22.620
 but sorry 

00:28:24.480 --> 00:28:29.430
 then in this case it is this e 

00:28:26.770 --> 00:28:33.430
 a good question, however, you don't win the 

00:28:29.430 --> 00:28:38.230
 will china is an excellent question in the sense 

00:28:33.430 --> 00:28:41.080
 that on app engine you can you can scale 

00:28:38.230 --> 00:28:43.720
 the number of requests I make in the 

00:28:41.080 --> 00:28:45.250
 suk I have to use sliders for 

00:28:43.720 --> 00:28:47.770
 to know where I got to 

00:28:45.250 --> 00:28:50.680
 my request that I cannot know 

00:28:47.770 --> 00:28:52.900
 how many objects or in the age store from 

00:28:50.680 --> 00:28:55.300
 nothing because the doctor is distributed 

00:28:52.900 --> 00:28:56.770
 being designed for efficiency it does not have 

00:28:55.300 --> 00:29:00.340
 functions such as counting 

00:28:56.770 --> 00:29:01.480
 of objects or an off set is one thing 

00:29:00.340 --> 00:29:03.250
 which can be done in itself as in a manner 

00:29:01.480 --> 00:29:05.830
 efficient if they are indexes equip a 

00:29:03.250 --> 00:29:08.590
 offset in app engine there is the function 

00:29:05.830 --> 00:29:09.280
 offset what the backstage does 

00:29:08.590 --> 00:29:11.920
 function set 

00:29:09.280 --> 00:29:13.660
 if you tell him you are part of the number 1000 he goes 

00:29:11.920 --> 00:29:16.750
 in the data store you pass all the first ones 

00:29:13.660 --> 00:29:17.620
 a thousand ignores it and then begins in 1100 that 

00:29:16.750 --> 00:29:20.230
 that's not exactly what we want 

00:29:17.620 --> 00:29:20.980
 because you get there only from 1100 however 

00:29:20.230 --> 00:29:23.200
 on a practical level 

00:29:20.980 --> 00:29:26.530
 we all paid all the thousand 

00:29:23.200 --> 00:29:28.030
 previous so this is one thing 

00:29:26.530 --> 00:29:29.860
 very bad to do because otherwise more than 

00:29:28.030 --> 00:29:31.600
 999 my code 

00:29:29.860 --> 00:29:33.460
 clearly not what works 

00:29:31.600 --> 00:29:35.350
 it would be to do is take a cursor 

00:29:33.460 --> 00:29:37.540
 see where it has arrived if there are any 

00:29:35.350 --> 00:29:38.950
 I still leave and go ahead with the cursor 

00:29:37.540 --> 00:29:40.450
 until he reached the end of age 

00:29:38.950 --> 00:29:41.890
 store 

00:29:40.450 --> 00:29:44.340
 same thing is also done with requests 

00:29:41.890 --> 00:29:44.340
 on the p 

00:29:44.620 --> 00:29:49.690
 so going back to the example is not this 

00:29:48.100 --> 00:29:52.150
 the appropriate method then what is the 

00:29:49.690 --> 00:29:53.380
 appropriate method because there is no one 

00:29:52.150 --> 00:29:55.050
 function to have on these what I said 

00:29:53.380 --> 00:29:59.260
 first because they don't climb 

00:29:55.050 --> 00:30:00.670
 sufficiently and the answer is to count 

00:29:59.260 --> 00:30:02.620
 every time we enter an activity 

00:30:00.670 --> 00:30:04.030
 whenever we save an activity we 

00:30:02.620 --> 00:30:06.860
 we know the number of plus one of 

00:30:04.030 --> 00:30:08.850
 this activity and we know 

00:30:06.860 --> 00:30:10.620
 we can use a counter for 

00:30:08.850 --> 00:30:13.650
 add this number to something there 

00:30:10.620 --> 00:30:15.540
 we keep saved so every time we should 

00:30:13.650 --> 00:30:16.200
 asking the average we should not calculate 

00:30:15.540 --> 00:30:17.910
 this average 

00:30:16.200 --> 00:30:19.560
 we have to read the average the average comes 

00:30:17.910 --> 00:30:21.480
 updated progressively each time 

00:30:19.560 --> 00:30:24.960
 that we save something this is really 

00:30:21.480 --> 00:30:27.380
 a different way of reasoning I have 

00:30:24.960 --> 00:30:30.450
 past the first month and a half 

00:30:27.380 --> 00:30:32.480
 developing this prototype to reason 

00:30:30.450 --> 00:30:34.020
 as I typically reasoned with sql 

00:30:32.480 --> 00:30:35.700
 then I saw that things 

00:30:34.020 --> 00:30:37.710
 they still didn't work well anymore 

00:30:35.700 --> 00:30:39.150
 increased number of users and I understood 

00:30:37.710 --> 00:30:40.830
 that the problem was not app engine but it is 

00:30:39.150 --> 00:30:43.710
 just the approach you use to do 

00:30:40.830 --> 00:30:46.230
 this kind of computations then 

00:30:43.710 --> 00:30:48.270
 works in two parts a little steinbrueck 

00:30:46.230 --> 00:30:50.520
 that is, something that is done after 

00:30:48.270 --> 00:30:51.930
 saving the activity what else not 

00:30:50.520 --> 00:30:54.000
 makes that take a report object 

00:30:51.930 --> 00:30:56.160
 add 1 to the activity number e 

00:30:54.000 --> 00:30:58.880
 add plus number to the number of 

00:30:56.160 --> 00:30:58.880
 plus as such 

00:31:06.630 --> 00:31:12.679
 I had to do it I planned 

00:31:08.990 --> 00:31:15.070
 exact yes exact said so it seems 

00:31:12.679 --> 00:31:17.150
 seems like a burden to the developer 

00:31:15.070 --> 00:31:20.900
 actually it is a weight of 

00:31:17.150 --> 00:31:23.780
 developer is a different approach though 

00:31:20.900 --> 00:31:26.660
 if you think for example I give the example of 

00:31:23.780 --> 00:31:28.960
 youtube thinks the number of likes the 

00:31:26.660 --> 00:31:31.309
 number of youtube video aics 

00:31:28.960 --> 00:31:33.050
 clearly it would be impossible to count them 

00:31:31.309 --> 00:31:34.640
 at the moment when one for a page of 

00:31:33.050 --> 00:31:36.559
 youtube must be saved by some 

00:31:34.640 --> 00:31:39.970
 part is saved at the time 

00:31:36.559 --> 00:31:42.350
 I like a counter 

00:31:39.970 --> 00:31:45.410
 yes yes even in the sequel and it can be done 

00:31:42.350 --> 00:31:46.880
 exactly in them those clearly a 

00:31:45.410 --> 00:31:49.010
 that point loses the gospel 

00:31:46.880 --> 00:31:50.750
 if you do something jihadiste those have little 

00:31:49.010 --> 00:31:51.890
 sense because that point if already right 

00:31:50.750 --> 00:31:53.960
 in this way you might as well go up 

00:31:51.890 --> 00:31:55.309
 something distributed that is therefore 

00:31:53.960 --> 00:31:57.530
 I want to pass them those you are given 

00:31:55.309 --> 00:31:59.750
 other advantages such as the beauty of the 

00:31:57.530 --> 00:32:02.710
 extra sequelae analytical match of 

00:31:59.750 --> 00:32:02.710
 data structure 

00:32:04.580 --> 00:32:08.240
 exactly the slide after actually produces slides 

00:32:06.559 --> 00:32:10.360
 I answer to this also 

00:32:08.240 --> 00:32:10.360
 question 

00:32:15.310 --> 00:32:18.860
 well obviously this code is a 

00:32:17.720 --> 00:32:20.960
 example, however, if one updates 

00:32:18.860 --> 00:32:23.650
 of the activity can see the dif 

00:32:20.960 --> 00:32:26.000
 there was the delta and subtract it from the total 

00:32:23.650 --> 00:32:28.870
 this is a simple example but it works 

00:32:26.000 --> 00:32:28.870
 more or less on all aggregations 

00:32:32.420 --> 00:32:36.910
 right now it also comes to this 

00:32:34.640 --> 00:32:36.910
 point 

00:32:44.039 --> 00:32:49.600
 then they have all been very good questions 

00:32:47.710 --> 00:32:51.730
 are the next two slides practically 

00:32:49.600 --> 00:32:56.919
 so I finish these two slides and then 

00:32:51.730 --> 00:32:58.620
 return the questions this is just the 

00:32:56.919 --> 00:33:02.830
 slide off 

00:32:58.620 --> 00:33:04.120
 ok then then to get result 

00:33:02.830 --> 00:33:06.100
 at this point I am going to take the object 

00:33:04.120 --> 00:33:09.580
 report I do the division and I get the 

00:33:06.100 --> 00:33:11.110
 media questions before access question 

00:33:09.580 --> 00:33:13.750
 competitor reports as you know that in 

00:33:11.110 --> 00:33:15.399
 data store or on average is recommended by 

00:33:13.750 --> 00:33:18.669
 do not do more than one second writing 

00:33:15.399 --> 00:33:21.070
 an object or entity on a slow lens t 

00:33:18.669 --> 00:33:23.200
 group in the sense that as you see in 

00:33:21.070 --> 00:33:25.929
 this slide objects can be 

00:33:23.200 --> 00:33:28.149
 linked together with father relationship 

00:33:25.929 --> 00:33:29.769
 child where the child is connected to 

00:33:28.149 --> 00:33:31.539
 father they are scriptures on 

00:33:29.769 --> 00:33:33.070
 father or son are all 

00:33:31.539 --> 00:33:35.019
 consistent within the group 

00:33:33.070 --> 00:33:37.240
 what it means i can read how much 

00:33:35.019 --> 00:33:38.590
 they want the group but I can write more 

00:33:37.240 --> 00:33:40.840
 or less once a second and reality 

00:33:38.590 --> 00:33:42.909
 it also works 3 4 3 per second however it is 

00:33:40.840 --> 00:33:45.220
 not advised to write too much on 

00:33:42.909 --> 00:33:47.679
 same group a report is an object 

00:33:45.220 --> 00:33:53.169
 single is clearly a group then 

00:33:47.679 --> 00:33:55.149
 safe from means that it fails 

00:33:53.169 --> 00:33:56.980
 a new vein is found again 

00:33:55.149 --> 00:33:59.710
 time then absolutely miss 

00:33:56.980 --> 00:34:00.909
 consistency if it is saved after later 

00:33:59.710 --> 00:34:02.919
 five times while you are doing 

00:34:00.909 --> 00:34:04.570
 but something else is rare because on the 

00:34:02.919 --> 00:34:07.029
 single entities groups usually work from 

00:34:04.570 --> 00:34:09.520
 a single trend a group entity 

00:34:07.029 --> 00:34:10.899
 imagine it as a user an object 

00:34:09.520 --> 00:34:13.200
 never need to be in the interface 

00:34:10.899 --> 00:34:16.060
 mixing something that can be 

00:34:13.200 --> 00:34:18.849
 we say used from different points 

00:34:16.060 --> 00:34:20.109
 in the single 20 t group is something 

00:34:18.849 --> 00:34:23.200
 cohesively 

00:34:20.109 --> 00:34:26.139
 the answer to this problem is second 

00:34:23.200 --> 00:34:29.669
 me very charming and that is if a 

00:34:26.139 --> 00:34:31.629
 counter alone is not enough for 

00:34:29.669 --> 00:34:33.730
 because people can't write to us 

00:34:31.629 --> 00:34:35.800
 quite often we simply do 

00:34:33.730 --> 00:34:37.750
 more counters we do a hundred 

00:34:35.800 --> 00:34:39.099
 counters and with we must add 

00:34:37.750 --> 00:34:41.230
 something a counter we choose one a 

00:34:39.099 --> 00:34:43.179
 case and we add the number of plus one e 

00:34:41.230 --> 00:34:45.780
 in this counter it is random what yes 

00:34:43.179 --> 00:34:47.980
 called harding is simply mean 

00:34:45.780 --> 00:34:49.720
 parallelize tasks that can 

00:34:47.980 --> 00:34:51.609
 reducible through a function of 

00:34:49.720 --> 00:34:53.770
 aggregation in this case of sum 

00:34:51.609 --> 00:34:55.300
 this code I'm not explaining step 

00:34:53.770 --> 00:34:57.940
 per step but the concept is 

00:34:55.300 --> 00:35:00.790
 when they increase activity extract number 

00:34:57.940 --> 00:35:02.440
 random from 1 to 100 top the number of 

00:35:00.790 --> 00:35:05.530
 plus one in that random counter that 

00:35:02.440 --> 00:35:06.910
 I chose and when I want to have the 

00:35:05.530 --> 00:35:09.400
 answer I'm going to read all the 

00:35:06.910 --> 00:35:11.110
 counters are the data and I get them the 

00:35:09.400 --> 00:35:13.180
 overall answer that I can save to 

00:35:11.110 --> 00:35:14.560
 that point on the single report object 

00:35:13.180 --> 00:35:17.860
 where he will have no more problems than 

00:35:14.560 --> 00:35:18.880
 consistency what we have solved here 

00:35:17.860 --> 00:35:21.430
 actually we don't have the underlying the 

00:35:18.880 --> 00:35:23.980
 consistency problem on 

00:35:21.430 --> 00:35:25.300
 competing writings but also the 

00:35:23.980 --> 00:35:27.400
 consistency problem xvi loc 

00:35:25.300 --> 00:35:30.910
 because you think if I make a put 

00:35:27.400 --> 00:35:31.900
 and I have to log a look for 

00:35:30.910 --> 00:35:36.370
 avoid problems of 

00:35:31.900 --> 00:35:37.420
 consistency on the data if I have two ways 

00:35:36.370 --> 00:35:39.790
 to avoid this problem of 

00:35:37.420 --> 00:35:42.670
 consistency except locke and therefore block 

00:35:39.790 --> 00:35:44.650
 slow t group or I do so 

00:35:42.670 --> 00:35:46.210
 don't write too often in this 

00:35:44.650 --> 00:35:48.970
 way by limiting the number of writes 

00:35:46.210 --> 00:35:50.470
 having so many counter 

00:35:48.970 --> 00:35:52.120
 I'm not even locking because 

00:35:50.470 --> 00:35:53.860
 you can calculate the probability of 

00:35:52.120 --> 00:35:55.980
 lose information to something like 1 

00:35:53.860 --> 00:35:57.880
 over a billion to a billion 

00:35:55.980 --> 00:35:59.410
 probability because practically 

00:35:57.880 --> 00:35:59.830
 impossible to overlap two 

00:35:59.410 --> 00:36:01.480
 requests 

00:35:59.830 --> 00:36:05.980
 this is what on a practical level 

00:36:01.480 --> 00:36:07.540
 works as an example on youtube on lay people 

00:36:05.980 --> 00:36:09.550
 it works like this and then they are gods 

00:36:07.540 --> 00:36:11.380
 tasks that go in the background once 

00:36:09.550 --> 00:36:12.850
 per month to check if maybe there is 

00:36:11.380 --> 00:36:15.130
 was some mistake however at the level 

00:36:12.850 --> 00:36:19.510
 practical it works this way on the 

00:36:15.130 --> 00:36:20.740
 good faith as someone said before 

00:36:19.510 --> 00:36:22.690
 clearly all these things can be done 

00:36:20.740 --> 00:36:26.020
 do even perfectly with glasses or 

00:36:22.690 --> 00:36:27.850
 aduc therefore mapreduce and is the example 

00:36:26.020 --> 00:36:32.410
 perfect but clearly less efficient 

00:36:27.850 --> 00:36:35.380
 but more flexible then the part 

00:36:32.410 --> 00:36:36.790
 the top of my top ended the 

00:36:35.380 --> 00:36:39.190
 part on how to take the data 

00:36:36.790 --> 00:36:40.780
 process them three final minutes 

00:36:39.190 --> 00:36:42.370
 simply to show you a little 

00:36:40.780 --> 00:36:44.230
 result of all this part we have 

00:36:42.370 --> 00:36:47.290
 having taken the data we have saved them returned 

00:36:44.230 --> 00:36:48.700
 look for biles made interesting by the level 

00:36:47.290 --> 00:36:51.160
 then aggregated with statistics 

00:36:48.700 --> 00:36:53.290
 even if only the average of plus ones 

00:36:51.160 --> 00:36:55.540
 at this point we want to share 

00:36:53.290 --> 00:36:56.830
 this data with the world with sites 

00:36:55.540 --> 00:36:59.650
 wind with websites with 

00:36:56.830 --> 00:37:00.940
 applications then we create in the p 

00:36:59.650 --> 00:37:02.860
 I will not dwell on this part because 

00:37:00.940 --> 00:37:05.020
 you have already seen the squares you can do 

00:37:02.860 --> 00:37:06.109
 as it seems to you with and framework and in 

00:37:05.020 --> 00:37:08.390
 php in 

00:37:06.109 --> 00:37:11.930
 python as an example django web app 2 

00:37:08.390 --> 00:37:13.579
 or with google cloud endpoints la 

00:37:11.930 --> 00:37:14.599
 simple answer for google clown 

00:37:13.579 --> 00:37:16.339
 points 

00:37:14.599 --> 00:37:18.109
 you have all the advantages that you can use a 

00:37:16.339 --> 00:37:19.309
 ep to the google so all that 

00:37:18.109 --> 00:37:20.869
 that we've done before 

00:37:19.309 --> 00:37:22.400
 then you can do it with your e pia 

00:37:20.869 --> 00:37:23.839
 and that you have created turns up 

00:37:22.400 --> 00:37:26.809
 google infrastructure then scale 

00:37:23.839 --> 00:37:29.089
 clearly much better than a catch of 

00:37:26.809 --> 00:37:30.529
 django and has a lot of advantages like 

00:37:29.089 --> 00:37:33.289
 also present the xplorer la folds 

00:37:30.529 --> 00:37:34.989
 generated documentation and clients 

00:37:33.289 --> 00:37:41.019
 automatically generated for java python 

00:37:34.989 --> 00:37:43.249
 javascript final interface part 

00:37:41.019 --> 00:37:50.869
 quick survey how many of you know 

00:37:43.249 --> 00:37:52.099
 also lord js none your part 0 give 

00:37:50.869 --> 00:37:55.190
 already something even jazz is a project 

00:37:52.099 --> 00:37:57.559
 quite innovative by google for 

00:37:55.190 --> 00:37:59.089
 create graphical interfaces in 

00:37:57.559 --> 00:38:00.799
 javascript to create sites in 

00:37:59.089 --> 00:38:04.460
 javascript that I am completely 

00:38:00.799 --> 00:38:06.019
 separated from the back end this 

00:38:04.460 --> 00:38:08.329
 what does it mean that you can work in 

00:38:06.019 --> 00:38:10.220
 two separate teams a team generates her 

00:38:08.329 --> 00:38:13.190
 pira and a team writes its interface 

00:38:10.220 --> 00:38:16.489
 of aguilar js and consumes this ep a per 

00:38:13.190 --> 00:38:19.369
 then generate a dynamic interface 

00:38:16.489 --> 00:38:19.999
 the plans speak with the control of ang 

00:38:19.369 --> 00:38:22.430
 lee j es 

00:38:19.999 --> 00:38:25.400
 the young jazz control updates the 

00:38:22.430 --> 00:38:27.920
 data and this data update of 

00:38:25.400 --> 00:38:34.009
 consequently the interface what it is 

00:38:27.920 --> 00:38:36.829
 the end result is this you have seen 

00:38:34.009 --> 00:38:40.309
 first a site while where if i change 

00:38:36.829 --> 00:38:43.279
 an automatic data interface yes 

00:38:40.309 --> 00:38:48.019
 instantly updates and allows me to 

00:38:43.279 --> 00:38:50.359
 do very complex things without ever 

00:38:48.019 --> 00:38:52.670
 going to mix interface then 

00:38:50.359 --> 00:38:56.480
 view controller or data these are 

00:38:52.670 --> 00:38:58.190
 some reports that he generated with third parties 

00:38:56.480 --> 00:39:00.290
 some statistics all these facts 

00:38:58.190 --> 00:39:02.270
 also from the gs if you have doubts about 

00:39:00.290 --> 00:39:04.670
 interested in this part is the site 

00:39:02.270 --> 00:39:09.050
 of andria gesche very interesting and 

00:39:04.670 --> 00:39:10.850
 very well done and yes this particular 

00:39:09.050 --> 00:39:13.660
 we can skip it and say that the 

00:39:10.850 --> 00:39:13.660
 presentation is over 

