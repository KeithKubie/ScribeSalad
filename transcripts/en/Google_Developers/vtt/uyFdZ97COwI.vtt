WEBVTT
Kind: captions
Language: en

00:00:01.229 --> 00:00:02.770
PETE LEPAGE: We're
going to start now

00:00:02.770 --> 00:00:07.330
talking about what I think
is the most critical part

00:00:07.330 --> 00:00:09.430
of progressive web apps.

00:00:09.430 --> 00:00:14.680
And that's really the ability
to make them reliable and fast,

00:00:14.680 --> 00:00:17.020
because instead of having
to go to the network

00:00:17.020 --> 00:00:20.140
to get the resources
that your app needs,

00:00:20.140 --> 00:00:22.420
they can get it from
the local device,

00:00:22.420 --> 00:00:24.580
from the service worker.

00:00:24.580 --> 00:00:27.340
So my name is Pete.

00:00:27.340 --> 00:00:29.200
Well, I guess I'll start here.

00:00:29.200 --> 00:00:30.520
My name is Pete.

00:00:30.520 --> 00:00:33.700
I'm a Developer Advocate
on the Chrome team.

00:00:33.700 --> 00:00:37.760
I work in the New York office,
and really excited to be here.

00:00:37.760 --> 00:00:39.490
This is my first time
in China and I've

00:00:39.490 --> 00:00:41.050
loved every minute of it.

00:00:41.050 --> 00:00:43.150
So thank you for having us.

00:00:43.150 --> 00:00:46.060
And I hope that this is
useful for you and you get

00:00:46.060 --> 00:00:48.430
to learn some neat new things.

00:00:48.430 --> 00:00:53.260
So I want to start with
a little bit of a story.

00:00:53.260 --> 00:00:57.100
Let's say that I'm at a park,
and while I'm at a park,

00:00:57.100 --> 00:01:00.400
living in New York
City, I'm coming along

00:01:00.400 --> 00:01:03.580
and I think, wow, hey,
I really like this song

00:01:03.580 --> 00:01:04.420
that I'm humming.

00:01:04.420 --> 00:01:07.930
And I want to record it
so that I can try it later

00:01:07.930 --> 00:01:09.520
on my guitar.

00:01:09.520 --> 00:01:14.770
And so I open up
my phone and I say,

00:01:14.770 --> 00:01:16.120
OK, I'm going to go record it.

00:01:16.120 --> 00:01:19.240
I click on the little
Voice Memo app up there.

00:01:19.240 --> 00:01:25.000
And the Voice Memo app
opens, and wah wah,

00:01:25.000 --> 00:01:30.020
it doesn't work, Right I
get the offline dinosaur.

00:01:30.020 --> 00:01:33.030
Well, unfortunately,
this park is

00:01:33.030 --> 00:01:37.070
in a cell phone dead zone
where anything on the web

00:01:37.070 --> 00:01:38.720
just doesn't work.

00:01:38.720 --> 00:01:41.060
Even some native apps
aren't going to work.

00:01:41.060 --> 00:01:44.060
I can't get phone calls
or anything like that.

00:01:44.060 --> 00:01:47.521
And this happens in more than
just a park in New York City,

00:01:47.521 --> 00:01:48.020
right?

00:01:48.020 --> 00:01:51.860
This happens in places
in a subway in New York,

00:01:51.860 --> 00:01:54.680
or anywhere you
can imagine where

00:01:54.680 --> 00:02:00.530
you don't have a good, solid,
reliable network connection.

00:02:00.530 --> 00:02:04.520
And unfortunately, users
expect their experiences

00:02:04.520 --> 00:02:06.890
to work reliably.

00:02:06.890 --> 00:02:10.039
They don't care if
they're in a subway.

00:02:10.039 --> 00:02:12.830
They don't care if
they're somewhere else.

00:02:12.830 --> 00:02:17.000
They expect their
experience to always work.

00:02:17.000 --> 00:02:19.950
And we want to fix that.

00:02:19.950 --> 00:02:24.670
And this isn't always about
the idea of a no connection

00:02:24.670 --> 00:02:25.630
scenario.

00:02:25.630 --> 00:02:28.510
Maybe you're on an airplane
or you're in that dead zone.

00:02:28.510 --> 00:02:34.480
There's also that wonderful
thing that we call Lie-Fi,

00:02:34.480 --> 00:02:36.250
because it's lying to you.

00:02:36.250 --> 00:02:39.590
It says, I have a
network connection.

00:02:39.590 --> 00:02:41.890
But it doesn't.

00:02:41.890 --> 00:02:43.856
So it thinks, oh, I'm connected.

00:02:43.856 --> 00:02:44.980
I'm going to get something.

00:02:44.980 --> 00:02:45.940
I'm going to work.

00:02:45.940 --> 00:02:49.360
And it just sits there,
and it spins and it spins

00:02:49.360 --> 00:02:51.220
and it spins.

00:02:51.220 --> 00:02:54.370
So because of this,
we want to make sure

00:02:54.370 --> 00:02:58.000
that pages work even if
they're not connected.

00:03:00.940 --> 00:03:02.590
This is one of
those things, even

00:03:02.590 --> 00:03:07.270
if you have four bars on your
phone where it is connected,

00:03:07.270 --> 00:03:09.640
you might not have
that live connection.

00:03:09.640 --> 00:03:12.520
So in order to become reliable--

00:03:12.520 --> 00:03:14.770
which is a key point of
progressive web apps,

00:03:14.770 --> 00:03:16.420
is that they are reliable--

00:03:16.420 --> 00:03:20.770
we need instant
loading and offline.

00:03:20.770 --> 00:03:24.600
And we need that to come
to the website platform.

00:03:24.600 --> 00:03:27.140
So Dion mentioned
this earlier today,

00:03:27.140 --> 00:03:29.790
and I want to repeat
it again because I

00:03:29.790 --> 00:03:32.220
think it's really important.

00:03:32.220 --> 00:03:36.060
If a user looks at a page,
and after three seconds

00:03:36.060 --> 00:03:39.810
it hasn't loaded,
they're going to leave.

00:03:39.810 --> 00:03:43.050
So you're losing
53% of your users

00:03:43.050 --> 00:03:46.050
if they haven't seen
something in three seconds.

00:03:46.050 --> 00:03:49.620
That's pretty drastic.

00:03:49.620 --> 00:03:55.080
And on top of that, we know
that worldwide, that over 60%

00:03:55.080 --> 00:03:58.260
of mobile connections are 2G.

00:03:58.260 --> 00:04:02.700
Now many of us live in a big
city, and we're used to LTE.

00:04:02.700 --> 00:04:04.920
We have a fast
connection at home.

00:04:04.920 --> 00:04:06.300
Yay, that's awesome.

00:04:06.300 --> 00:04:11.610
But not everybody has a
fast LTE connection or a 4G.

00:04:11.610 --> 00:04:14.520
60% have a 2G connection.

00:04:14.520 --> 00:04:18.810
And so we need to stop
relying on the network

00:04:18.810 --> 00:04:24.820
and take that piece out so that
we can become more reliable.

00:04:24.820 --> 00:04:29.040
Now the key feature that we
need for this is something

00:04:29.040 --> 00:04:30.570
called service workers.

00:04:30.570 --> 00:04:33.660
It's a relatively
new technology.

00:04:33.660 --> 00:04:38.760
It's a spec from the
W3C, and it allows

00:04:38.760 --> 00:04:42.890
us to go and have these
fast, reliable connections.

00:04:42.890 --> 00:04:47.870
Now who here has heard, or
had heard of service workers

00:04:47.870 --> 00:04:49.820
before today?

00:04:49.820 --> 00:04:50.690
Put your hand up.

00:04:50.690 --> 00:04:51.410
OK.

00:04:51.410 --> 00:04:55.330
Now who here has heard of
service workers since today?

00:04:59.410 --> 00:05:00.170
All right.

00:05:00.170 --> 00:05:00.950
Cool.

00:05:00.950 --> 00:05:02.900
Sorry.

00:05:02.900 --> 00:05:04.010
OK.

00:05:04.010 --> 00:05:07.850
So a service worker, as
Dion mentioned earlier,

00:05:07.850 --> 00:05:11.990
is really sort of a client
side JavaScript proxy

00:05:11.990 --> 00:05:14.220
that sits on your phone.

00:05:14.220 --> 00:05:17.300
So it's a programmable
network proxy

00:05:17.300 --> 00:05:20.600
that allows you to choose
how you want things to work.

00:05:20.600 --> 00:05:22.910
But it's also more than that.

00:05:22.910 --> 00:05:26.120
When a page registers
the service worker,

00:05:26.120 --> 00:05:28.610
it sets up a bunch
of event handlers.

00:05:28.610 --> 00:05:30.650
So it listens for
different events,

00:05:30.650 --> 00:05:32.690
for things like
network requests,

00:05:32.690 --> 00:05:37.550
push messages, updates to the
service worker, and so on.

00:05:37.550 --> 00:05:41.660
And because it's event-based,
it doesn't take up

00:05:41.660 --> 00:05:43.880
any system resources.

00:05:43.880 --> 00:05:45.860
It's not sitting in memory.

00:05:45.860 --> 00:05:47.070
It's not doing anything.

00:05:47.070 --> 00:05:48.080
It's not using your CPU.

00:05:48.080 --> 00:05:51.790
It's just hanging
out, chilling--

00:05:51.790 --> 00:05:55.570
until it gets a notification,
or until it gets an event.

00:05:55.570 --> 00:05:58.240
And then it wakes up.

00:05:58.240 --> 00:06:01.990
So I'll say it again because I
think this is really important.

00:06:01.990 --> 00:06:06.970
It's not consuming any resources
unless it's been woken up

00:06:06.970 --> 00:06:10.070
to handle one of the events.

00:06:10.070 --> 00:06:13.750
In fact, even if the
browser is closed,

00:06:13.750 --> 00:06:15.910
so you don't have
your browser open,

00:06:15.910 --> 00:06:20.660
it can still be woken up
by the operating system.

00:06:20.660 --> 00:06:24.610
We're no longer
limited to a model

00:06:24.610 --> 00:06:28.570
where the app has to be open
in order to be functional.

00:06:28.570 --> 00:06:31.720
You don't have to have
a tab open in order

00:06:31.720 --> 00:06:34.430
for it to be useful.

00:06:34.430 --> 00:06:40.610
So this is important because
it adds that app-like lifecycle

00:06:40.610 --> 00:06:41.680
to your app.

00:06:41.680 --> 00:06:45.490
It means that our web apps can
become much more functional

00:06:45.490 --> 00:06:49.080
and much more useful.

00:06:49.080 --> 00:06:53.400
So when a service worker is
first registered, it fires an.

00:06:53.400 --> 00:06:57.690
Install event and that install
event can be used to do things

00:06:57.690 --> 00:07:00.900
like pre-fetching a
bunch of resources--

00:07:00.900 --> 00:07:05.280
your CSS, JavaScript,
images, HTML--

00:07:05.280 --> 00:07:08.610
anything like that, and
stores it on the device,

00:07:08.610 --> 00:07:13.200
caches it locally so that
the next time we need it,

00:07:13.200 --> 00:07:16.870
we can pull it right from the
device instead of the network.

00:07:16.870 --> 00:07:21.440
Think of it as an
install-as-you-go process.

00:07:21.440 --> 00:07:26.060
In effect, we're running a
scriptable install process

00:07:26.060 --> 00:07:28.790
much like a native app does.

00:07:28.790 --> 00:07:31.500
But there's no bulky zip files.

00:07:31.500 --> 00:07:34.280
There's no need
for a store that we

00:07:34.280 --> 00:07:36.650
need to go upload our
stuff to, and have somebody

00:07:36.650 --> 00:07:38.950
go, yup, we approve this.

00:07:38.950 --> 00:07:40.580
Oh, we don't approve this.

00:07:40.580 --> 00:07:43.760
It just goes up on the web.

00:07:43.760 --> 00:07:50.270
And we have file level
control over what is cached.

00:07:50.270 --> 00:07:53.090
So we can say, oh, hey, I
need to update this one file.

00:07:53.090 --> 00:07:54.050
We changed our logo.

00:07:54.050 --> 00:07:56.570
Or maybe it's the holidays
or it's something.

00:07:56.570 --> 00:07:58.820
We changed one
color on one thing.

00:07:58.820 --> 00:08:01.370
We only need to
update that one file.

00:08:01.370 --> 00:08:05.840
We don't need to update
the entire thing.

00:08:05.840 --> 00:08:09.470
Then, once the service
worker has been activated,

00:08:09.470 --> 00:08:12.350
we now have full
control over the way

00:08:12.350 --> 00:08:16.790
that the system services
your app's resources.

00:08:16.790 --> 00:08:21.690
We can look at the network
requests and see what they are.

00:08:21.690 --> 00:08:25.940
We can go to the network and
get a file and return that.

00:08:25.940 --> 00:08:28.430
Or we can get something
from the cache

00:08:28.430 --> 00:08:30.650
that we've already cached.

00:08:30.650 --> 00:08:34.039
Or we can make something up.

00:08:34.039 --> 00:08:38.030
It's kind of cool we have
full control over how this all

00:08:38.030 --> 00:08:40.179
works.

00:08:40.179 --> 00:08:43.070
And all of this is
transparent to the user.

00:08:43.070 --> 00:08:44.380
They don't see anything.

00:08:44.380 --> 00:08:47.530
The web just works
beautifully and magically

00:08:47.530 --> 00:08:49.750
like they're used to it working.

00:08:49.750 --> 00:08:53.230
In fact, a well-constructed
service worker

00:08:53.230 --> 00:08:56.380
can function as a very
smart caching system

00:08:56.380 --> 00:09:00.220
and be entirely transparent
to the rest of your app.

00:09:00.220 --> 00:09:03.400
It's just a
progressive enhancement

00:09:03.400 --> 00:09:06.220
to the network and cache.

00:09:06.220 --> 00:09:08.740
Gives you the ability
to choose smarter

00:09:08.740 --> 00:09:10.450
ways to respond to requests.

00:09:13.270 --> 00:09:17.480
And the big thing is it
makes our apps reliable

00:09:17.480 --> 00:09:21.200
because they don't have
to depend on the network.

00:09:21.200 --> 00:09:22.350
All right.

00:09:22.350 --> 00:09:25.580
So on the topic
of service workers

00:09:25.580 --> 00:09:28.910
are a progressive enhancement,
service workers really

00:09:28.910 --> 00:09:32.990
are for that second load,
because the first time the user

00:09:32.990 --> 00:09:37.767
comes to your site, the
service worker isn't installed.

00:09:37.767 --> 00:09:38.850
It needs to get installed.

00:09:38.850 --> 00:09:40.940
So that first time,
it's going to be

00:09:40.940 --> 00:09:44.690
just going through, going to the
network to get all that stuff.

00:09:44.690 --> 00:09:48.920
The service worker really
comes into play the second time

00:09:48.920 --> 00:09:52.520
a user comes to your site,
or once the user refreshes

00:09:52.520 --> 00:09:53.900
the page.

00:09:53.900 --> 00:09:59.330
So let's dive in and take a
look at what the lifecycle

00:09:59.330 --> 00:10:00.670
of a service worker looks like.

00:10:03.210 --> 00:10:05.500
They translated
our slides for us.

00:10:05.500 --> 00:10:07.830
So I hope that says
service worker lifecycle,

00:10:07.830 --> 00:10:09.420
but I'm not really sure.

00:10:09.420 --> 00:10:13.020
So when the user first
comes to the page,

00:10:13.020 --> 00:10:17.310
it registers a service
worker with a specific scope.

00:10:17.310 --> 00:10:20.980
Now I'll talk about
scopes in a few minutes.

00:10:20.980 --> 00:10:25.110
But for now, think of a
scope as the set of pages

00:10:25.110 --> 00:10:27.690
that the service worker
is going to handle.

00:10:27.690 --> 00:10:31.170
So first thing that happens
is an install event fires,

00:10:31.170 --> 00:10:34.230
and our service worker goes, oh,
hey, I've got an install event.

00:10:34.230 --> 00:10:36.900
And it runs that code.

00:10:36.900 --> 00:10:40.380
Then the service
worker goes idle.

00:10:40.380 --> 00:10:43.800
It just sits there quietly
because, like I said,

00:10:43.800 --> 00:10:45.670
it's for that second request.

00:10:45.670 --> 00:10:48.120
So now the service worker
is there but it's idle.

00:10:48.120 --> 00:10:52.290
It's just hanging out
not doing anything.

00:10:52.290 --> 00:10:55.560
So now the second time that
the user comes to the page--

00:10:55.560 --> 00:10:58.680
so they've come to the page, and
immediately the service worker

00:10:58.680 --> 00:11:02.010
goes, oh, hello, I'm awake.

00:11:02.010 --> 00:11:04.620
Let me help you with
whatever you need.

00:11:04.620 --> 00:11:07.710
So then the service
worker is ready to handle

00:11:07.710 --> 00:11:09.300
all of the events.

00:11:09.300 --> 00:11:13.950
At the same time, the browser
makes an asynchronous request

00:11:13.950 --> 00:11:16.890
to the server to see if
the service worker has been

00:11:16.890 --> 00:11:20.600
updated, because we always
want to have the latest service

00:11:20.600 --> 00:11:21.290
worker.

00:11:21.290 --> 00:11:24.845
Now in this case, we're going
to just say that the service

00:11:24.845 --> 00:11:26.720
worker hasn't been updated.

00:11:26.720 --> 00:11:27.620
It's still the same.

00:11:27.620 --> 00:11:28.680
Nothing's changed.

00:11:28.680 --> 00:11:31.300
It's still the same
service worker.

00:11:31.300 --> 00:11:32.737
And so that's it.

00:11:32.737 --> 00:11:34.070
The service worker is activated.

00:11:34.070 --> 00:11:36.820
It responds to any events.

00:11:36.820 --> 00:11:40.540
Now once the service worker
has handled all the requests,

00:11:40.540 --> 00:11:42.880
maybe the user closes the page.

00:11:42.880 --> 00:11:45.880
Well, the service
worker goes to idle.

00:11:45.880 --> 00:11:47.930
So it was, oh, hey, oh.

00:11:47.930 --> 00:11:50.620
And then it goes to idle, and
finally, it goes to terminated.

00:11:50.620 --> 00:11:53.900
It comes out of memory, so
it's not doing anything.

00:11:53.900 --> 00:11:56.410
It's not taking
up any resources.

00:11:56.410 --> 00:12:00.750
But it's ready to wake
up or spin up again

00:12:00.750 --> 00:12:03.710
if any other events come in.

00:12:03.710 --> 00:12:05.010
All right.

00:12:05.010 --> 00:12:07.140
So let's talk about
how you update

00:12:07.140 --> 00:12:09.600
a service worker, how the
service worker gets updated.

00:12:09.600 --> 00:12:12.690
So much like before, the
user goes to the page,

00:12:12.690 --> 00:12:16.080
service worker goes, oh,
hello, I'm activated,

00:12:16.080 --> 00:12:19.000
and it starts
responding to events.

00:12:19.000 --> 00:12:22.490
And immediately, again, the
browser checks and says,

00:12:22.490 --> 00:12:24.880
hey, is there an update for me?

00:12:24.880 --> 00:12:26.970
Has this service worker changed?

00:12:26.970 --> 00:12:29.110
And this time, because
the service worker

00:12:29.110 --> 00:12:34.470
has been updated, we
go to an install event

00:12:34.470 --> 00:12:36.330
and an idle event.

00:12:36.330 --> 00:12:39.990
But I want to point
out one thing here.

00:12:39.990 --> 00:12:43.560
There are now two service
workers installed.

00:12:43.560 --> 00:12:45.870
There's this one here.

00:12:45.870 --> 00:12:48.370
And notice it's idle.

00:12:48.370 --> 00:12:51.070
And there's this one
here that's activated.

00:12:51.070 --> 00:12:53.860
So there are now two
service workers installed.

00:12:53.860 --> 00:12:56.080
And this is important
because what

00:12:56.080 --> 00:12:59.770
if we've changed something
major in our service worker,

00:12:59.770 --> 00:13:03.490
but the user still has the page
is loaded with the old content?

00:13:03.490 --> 00:13:07.090
So this one immediately goes
to idle and just sits there

00:13:07.090 --> 00:13:09.040
and hangs out quietly.

00:13:09.040 --> 00:13:10.120
Doesn't do anything.

00:13:10.120 --> 00:13:14.020
And the other one keeps
handling any requests.

00:13:14.020 --> 00:13:18.820
Now you can tell that
second service worker

00:13:18.820 --> 00:13:22.160
to take control
immediately if you want.

00:13:22.160 --> 00:13:27.640
And with two APIs, one called
self.skipwaiting and the other

00:13:27.640 --> 00:13:30.640
with self.client.claim.

00:13:30.640 --> 00:13:34.350
But you should use
those cautiously.

00:13:34.350 --> 00:13:42.580
So now this is one of those
things that will bite you

00:13:42.580 --> 00:13:46.600
in the bum, to put it mildly.

00:13:46.600 --> 00:13:48.950
It's gotten me in trouble
sometimes because you

00:13:48.950 --> 00:13:51.027
have a service worker,
and you go update it

00:13:51.027 --> 00:13:53.360
in your development, and
you're like oh, hey, all right.

00:13:53.360 --> 00:13:55.130
So I made this change.

00:13:55.130 --> 00:13:57.560
Well, why isn't my new
service worker running?

00:13:57.560 --> 00:14:01.100
Well, because you still
have a window open.

00:14:01.100 --> 00:14:02.810
And that other
service worker will

00:14:02.810 --> 00:14:06.530
stay in idle until all
of the windows close,

00:14:06.530 --> 00:14:09.470
until all of the
other browser windows

00:14:09.470 --> 00:14:13.650
using it have been terminated.

00:14:13.650 --> 00:14:17.220
So enough theory, because theory
is kind of boring sometimes.

00:14:17.220 --> 00:14:18.750
Let's take a look
at how we actually

00:14:18.750 --> 00:14:22.650
would implement our own service
worker and make this work.

00:14:22.650 --> 00:14:27.680
So first thing we need to do
is register our service worker

00:14:27.680 --> 00:14:29.150
on our page.

00:14:29.150 --> 00:14:33.380
So in your HTML,
we're going to say,

00:14:33.380 --> 00:14:35.500
if service worker in navigator.

00:14:35.500 --> 00:14:38.990
So that does the check to see
if service workers are supported

00:14:38.990 --> 00:14:41.750
in the browser that the
user is currently on,

00:14:41.750 --> 00:14:46.760
so Firefox, Chrome, there's
a couple other browsers that

00:14:46.760 --> 00:14:47.990
have support for it.

00:14:47.990 --> 00:14:50.690
We only want to call this
if the browser supports it.

00:14:50.690 --> 00:14:52.280
So check to see
if it's supported,

00:14:52.280 --> 00:14:54.680
because it's a
progressive enhancement.

00:14:54.680 --> 00:14:57.035
And then we call
navigator.servic

00:14:57.035 --> 00:15:00.740
eworker.register, and we give
it a link to the location

00:15:00.740 --> 00:15:04.690
where our JavaScript
service worker lives.

00:15:04.690 --> 00:15:07.510
Then we can say, hey,
you're registered.

00:15:07.510 --> 00:15:12.080
Or if not, if there was a
problem, we'll go from there.

00:15:12.080 --> 00:15:14.830
Next we need to handle
the install event,

00:15:14.830 --> 00:15:16.830
that one bit where we're
going to say, oh, hey,

00:15:16.830 --> 00:15:17.900
I've been installed.

00:15:17.900 --> 00:15:20.120
I maybe want to go
pre-cache some things.

00:15:20.120 --> 00:15:23.930
s So this is fired
after the service worker

00:15:23.930 --> 00:15:28.270
has been downloaded
and has been parsed.

00:15:28.270 --> 00:15:31.000
So let's start with
something basic.

00:15:31.000 --> 00:15:34.240
I've got
self.addEventListener install.

00:15:34.240 --> 00:15:37.300
And this is just
a very simple one.

00:15:37.300 --> 00:15:38.950
It doesn't take
control of the page

00:15:38.950 --> 00:15:42.020
immediately because it will wait
until the other things come in.

00:15:44.570 --> 00:15:47.810
But if we want it to
take control immediately,

00:15:47.810 --> 00:15:51.650
we want that service worker
to be in immediate control,

00:15:51.650 --> 00:15:55.610
we can do this,
returnself.skipwaiting.

00:15:55.610 --> 00:15:58.490
That says to the
service worker, hey you,

00:15:58.490 --> 00:16:01.010
I want you in control right now.

00:16:01.010 --> 00:16:04.670
And that wakes that
service worker up.

00:16:04.670 --> 00:16:08.330
So we're going to use the
install event to pre-fetch

00:16:08.330 --> 00:16:12.870
the resources that we need and
cache them in our local cache.

00:16:12.870 --> 00:16:15.710
So that way they're always
there and available for us

00:16:15.710 --> 00:16:19.130
so that they can be loaded
instantly and reliably.

00:16:19.130 --> 00:16:21.740
In effect, this
Install Event Handler

00:16:21.740 --> 00:16:26.120
is your opportunity to have a
fully scripted install process.

00:16:26.120 --> 00:16:29.220
Like I said earlier,
just like a native app.

00:16:29.220 --> 00:16:33.800
So here I've updated
my install process,

00:16:33.800 --> 00:16:35.930
and I say caches.opencachename.

00:16:35.930 --> 00:16:38.270
So I want to open,
a particular cache

00:16:38.270 --> 00:16:40.430
and I want to do it
with a cache name

00:16:40.430 --> 00:16:43.730
because I want to version the
files that I have in case I've

00:16:43.730 --> 00:16:47.030
got multiple different things
or I'm going to change something

00:16:47.030 --> 00:16:48.020
later.

00:16:48.020 --> 00:16:51.140
Having a version system
is really important,

00:16:51.140 --> 00:16:53.390
so I'm going to open
the cache and then I'm

00:16:53.390 --> 00:16:57.020
going to say,
returncache.addall.

00:16:57.020 --> 00:16:59.960
And I'm going to give
it an array of files

00:16:59.960 --> 00:17:02.439
that I want it to
go grab and cache.

00:17:02.439 --> 00:17:03.980
So I'm just going
to say, hey, I want

00:17:03.980 --> 00:17:06.710
you to cache all of these
things so that they're

00:17:06.710 --> 00:17:09.109
available any time I want them.

00:17:09.109 --> 00:17:13.250
Now in a real implementation,
don't use this code

00:17:13.250 --> 00:17:15.890
because I'm not
catching any errors.

00:17:15.890 --> 00:17:18.560
So you definitely want to put
some error handling in here

00:17:18.560 --> 00:17:22.760
and do that kind of thing
so if something fails,

00:17:22.760 --> 00:17:27.300
you don't have a total,
utter, complete meltdown.

00:17:27.300 --> 00:17:30.880
Now finally, once
everything has been

00:17:30.880 --> 00:17:33.990
added, we want to
call self.skipwaiting,

00:17:33.990 --> 00:17:35.620
that thing to say,
hey, service worker,

00:17:35.620 --> 00:17:39.190
take over control right now so
that any other requests that

00:17:39.190 --> 00:17:44.030
come through are handled
by the service worker.

00:17:44.030 --> 00:17:46.550
Now there's one other thing
that I want to point out

00:17:46.550 --> 00:17:48.710
is that I've wrapped
this whole code

00:17:48.710 --> 00:17:52.940
block in an event.waitUntil.

00:17:52.940 --> 00:17:57.750
The event.waitUntil tells
the service worker hey,

00:17:57.750 --> 00:18:01.310
I want you to go do some
stuff, but don't shut down.

00:18:01.310 --> 00:18:05.420
Don't go to idle or
terminated until after you've

00:18:05.420 --> 00:18:09.140
finished this work, because it
would kind of suck if you were

00:18:09.140 --> 00:18:11.210
to say, hey, go
download these files,

00:18:11.210 --> 00:18:13.460
and then the service worker
starts downloading it.

00:18:13.460 --> 00:18:14.480
Yay.

00:18:14.480 --> 00:18:16.430
And then all of a sudden
it gets shut down.

00:18:16.430 --> 00:18:18.390
That kind of
defeats the purpose.

00:18:18.390 --> 00:18:22.130
So event.waitUntil makes
sure that our service worker

00:18:22.130 --> 00:18:26.490
wraps doesn't shut down early.

00:18:26.490 --> 00:18:29.710
Then, once everything
has been cached,

00:18:29.710 --> 00:18:32.640
our Service Worker goes
into an activated mode.

00:18:38.010 --> 00:18:38.860
All right.

00:18:38.860 --> 00:18:43.350
So I like to use the activated
event as an opportunity

00:18:43.350 --> 00:18:45.810
to clean up the cache.

00:18:45.810 --> 00:18:47.810
Is there anything
in the cache that

00:18:47.810 --> 00:18:50.520
may be from a previous
version of the service worker

00:18:50.520 --> 00:18:53.460
that we want to get rid
of or anything like that?

00:18:53.460 --> 00:18:56.980
So removing outdated resources.

00:18:56.980 --> 00:19:00.720
So here I've got my
serviceworker.AddEventListener,

00:19:00.720 --> 00:19:03.240
and I iterate over a
list of the key names.

00:19:03.240 --> 00:19:07.620
So I do cache.keys, which gives
me the key names and iterates

00:19:07.620 --> 00:19:10.950
over them, and checks to
see if there's any in there

00:19:10.950 --> 00:19:13.560
that we don't want
and deletes them.

00:19:13.560 --> 00:19:15.570
So that way we've
gotten rid of anything

00:19:15.570 --> 00:19:18.640
that doesn't matter anymore.

00:19:18.640 --> 00:19:20.820
Now there's one
other thing that we

00:19:20.820 --> 00:19:23.010
want to do in this
particular case,

00:19:23.010 --> 00:19:27.090
and that's calling
self.clients.claim.

00:19:27.090 --> 00:19:29.220
You can see on the
very bottom there.

00:19:29.220 --> 00:19:33.030
And that tells the browser that
we want this service worker

00:19:33.030 --> 00:19:36.990
to take control of any
other browser window

00:19:36.990 --> 00:19:40.836
that the service
worker controls.

00:19:40.836 --> 00:19:42.210
So in this particular
case, we're

00:19:42.210 --> 00:19:44.400
not going to worry about
file versioning or anything

00:19:44.400 --> 00:19:45.060
like that.

00:19:45.060 --> 00:19:47.490
We want it immediately
to start taking control.

00:19:47.490 --> 00:19:50.460
This only works if
your service worker--

00:19:50.460 --> 00:19:54.720
if you haven't made major
changes to your content.

00:19:54.720 --> 00:20:01.180
But at this point, if you
were to go offline, wah wah.

00:20:01.180 --> 00:20:03.610
You still get the
dreaded dinosaur.

00:20:03.610 --> 00:20:08.300
We've cached all the files,
the resources we need, locally,

00:20:08.300 --> 00:20:11.990
but we don't have a way to
get them out of the cache yet.

00:20:11.990 --> 00:20:16.850
So we need to do an event
handler to be able to do that.

00:20:16.850 --> 00:20:20.210
And we're going to use what's
called the fetch Event Handler.

00:20:20.210 --> 00:20:24.720
So the fetch Event Handler works
exactly like you think it does.

00:20:24.720 --> 00:20:26.820
Self.AddEventListener.

00:20:26.820 --> 00:20:30.010
That self just refers
to the service worker.

00:20:30.010 --> 00:20:33.240
It's kind of like this
in the global scope,

00:20:33.240 --> 00:20:35.990
but self.AddEventListener fetch.

00:20:35.990 --> 00:20:40.140
And it listens for
any network request,

00:20:40.140 --> 00:20:43.430
whether it's an XHR,
an HTTP request.

00:20:43.430 --> 00:20:45.860
However you're out there
trying to get the file,

00:20:45.860 --> 00:20:48.290
it sits there and
goes, oh, hey, I'm

00:20:48.290 --> 00:20:51.120
going to intercept that
before it goes out.

00:20:51.120 --> 00:20:54.090
And it allows you to
do whatever you need.

00:20:54.090 --> 00:20:58.960
So in this particular case,
we're going to say, hey,

00:20:58.960 --> 00:21:03.870
do we have anything in our
cache that matches this request?

00:21:03.870 --> 00:21:06.640
So caches.match(e.request).

00:21:06.640 --> 00:21:08.380
Is there anything there?

00:21:08.380 --> 00:21:11.680
Well, if there is,
let's return that.

00:21:11.680 --> 00:21:13.990
So it comes immediately
from the cache.

00:21:13.990 --> 00:21:15.190
Didn't go to the network.

00:21:15.190 --> 00:21:17.530
It just pulled it
straight out of the cache.

00:21:17.530 --> 00:21:22.180
But if it's not
there, perform a fetch

00:21:22.180 --> 00:21:24.680
and just go get it
from the network.

00:21:24.680 --> 00:21:26.200
So in this particular
case, we've

00:21:26.200 --> 00:21:29.650
gotten the resources we
need from the network

00:21:29.650 --> 00:21:32.050
or from the cache.

00:21:32.050 --> 00:21:37.940
So we now have an experience
that loads almost instantly.

00:21:37.940 --> 00:21:40.760
It's reliable because
we've got all the resources

00:21:40.760 --> 00:21:43.100
we need on our device.

00:21:43.100 --> 00:21:45.680
Doesn't matter whether
we're online or offline.

00:21:45.680 --> 00:21:48.710
It loads extremely
fast because we've

00:21:48.710 --> 00:21:53.600
eliminated any potential
network latency or network

00:21:53.600 --> 00:21:55.730
nonexistence.

00:21:55.730 --> 00:21:59.690
Our last step is to let the page
know that the service worker is

00:21:59.690 --> 00:22:02.870
registered and ready to go.

00:22:02.870 --> 00:22:06.840
This is helpful to
indicate to the user, hey,

00:22:06.840 --> 00:22:11.690
this app will work offline, or
we're ready to work offline.

00:22:11.690 --> 00:22:15.902
So in this particular
case, I'm just going to--

00:22:15.902 --> 00:22:17.360
I guess I won't
show you that code,

00:22:17.360 --> 00:22:21.680
but you'd just do some kind
of little toast on the page.

00:22:21.680 --> 00:22:26.900
Now earlier I mentioned
something about scopes.

00:22:26.900 --> 00:22:29.270
One of the cool things
about service workers

00:22:29.270 --> 00:22:32.120
is that you don't need
to register a service

00:22:32.120 --> 00:22:34.340
worker on every single page.

00:22:34.340 --> 00:22:40.370
You only need to register
it once for a set of pages.

00:22:40.370 --> 00:22:45.200
And anything within the scope
that it was registered for

00:22:45.200 --> 00:22:47.600
will be handled by
the service worker.

00:22:47.600 --> 00:22:50.420
Now the easiest way
to define the scope

00:22:50.420 --> 00:22:54.320
is simply where the service
worker is served from.

00:22:54.320 --> 00:22:58.130
So in this particular case,
I'm serving this service worker

00:22:58.130 --> 00:23:00.810
from the root directory.

00:23:00.810 --> 00:23:05.550
And that's where I recommend--
very, very strongly recommend--

00:23:05.550 --> 00:23:09.300
you serve your
service worker from.

00:23:09.300 --> 00:23:11.880
This means that
every resource that

00:23:11.880 --> 00:23:16.920
is requested across my
entire site will be served

00:23:16.920 --> 00:23:19.710
or will be handled by
the service worker.

00:23:19.710 --> 00:23:23.040
Now I made a mistake
many moons ago

00:23:23.040 --> 00:23:27.060
when I first started playing
with service workers.

00:23:27.060 --> 00:23:30.690
I put my service worker
in a scripts directory

00:23:30.690 --> 00:23:34.830
because that's where you put
your JavaScript files, right?

00:23:34.830 --> 00:23:37.680
Well, in this
particular case, that

00:23:37.680 --> 00:23:40.020
means the service
worker is only going

00:23:40.020 --> 00:23:48.590
to handle any files served
from the scripts directory.

00:23:48.590 --> 00:23:52.260
And most of my app is not
in my scripts directory.

00:23:52.260 --> 00:23:56.280
It's in the images, it's in the
CSS, it's in the root folder.

00:23:56.280 --> 00:23:58.470
It's in all sorts
of other places.

00:23:58.470 --> 00:24:02.250
So in this particular case,
using the scripts directory,

00:24:02.250 --> 00:24:04.440
don't do that.

00:24:04.440 --> 00:24:07.980
I beat my head against
a wall for many hours

00:24:07.980 --> 00:24:09.700
because I couldn't
figure it out.

00:24:09.700 --> 00:24:13.470
I don't want you to
have the same problem.

00:24:13.470 --> 00:24:16.110
So don't make the
same mistake I did.

00:24:16.110 --> 00:24:18.000
Put it in your root directory.

00:24:22.880 --> 00:24:26.930
So the magic of service workers
is that you're in control.

00:24:26.930 --> 00:24:29.630
You can say, I want
these things to be

00:24:29.630 --> 00:24:32.600
served in this
particular way and how

00:24:32.600 --> 00:24:34.520
it's controlled by the user.

00:24:34.520 --> 00:24:39.200
I've shown you a strategy
called cache first

00:24:39.200 --> 00:24:42.170
with network fallback,
because it went to the cache

00:24:42.170 --> 00:24:44.684
first to get the resource.

00:24:44.684 --> 00:24:46.100
If it was there,
it returned that.

00:24:46.100 --> 00:24:49.830
If not, it went to the network.

00:24:49.830 --> 00:24:53.600
It provides a nice fast,
reliable experience for users,

00:24:53.600 --> 00:24:56.360
but there are other
caching strategies.

00:24:56.360 --> 00:24:58.670
And you're going to
need to evaluate,

00:24:58.670 --> 00:25:02.600
on your app, which caching
strategy you want to use.

00:25:02.600 --> 00:25:05.990
And you may need to use
different caching strategies

00:25:05.990 --> 00:25:08.810
for different resources.

00:25:08.810 --> 00:25:11.840
So let's take a look at some
of the different caching

00:25:11.840 --> 00:25:13.130
strategies.

00:25:13.130 --> 00:25:15.770
So cache falling
back to network.

00:25:15.770 --> 00:25:19.010
So this is the one
that we saw earlier.

00:25:19.010 --> 00:25:22.040
Up to the network, OK, back.

00:25:22.040 --> 00:25:25.520
So network falling
back to cache.

00:25:25.520 --> 00:25:29.790
This one is kind of interesting.

00:25:29.790 --> 00:25:32.640
This one goes to
the network first,

00:25:32.640 --> 00:25:34.420
sees if it can get there.

00:25:34.420 --> 00:25:39.870
Now this is something you
would use for data that

00:25:39.870 --> 00:25:42.270
needs to be always up to date.

00:25:42.270 --> 00:25:46.800
But there's kind of a bad piece
of this in that the browser is

00:25:46.800 --> 00:25:52.710
going to wait 60 or 90 seconds
for failure of the network

00:25:52.710 --> 00:25:54.750
before it goes to the cache.

00:25:54.750 --> 00:25:59.100
So in this particular case, it
can be a frustrating experience

00:25:59.100 --> 00:26:02.130
for the user because the
network takes so long

00:26:02.130 --> 00:26:03.930
they don't see anything.

00:26:03.930 --> 00:26:07.950
So this one, use with caution.

00:26:07.950 --> 00:26:13.120
Cache, then network
makes two requests.

00:26:13.120 --> 00:26:18.420
So it goes both to the
network and to the cache.

00:26:18.420 --> 00:26:22.650
The idea is to show the
cached data first and then

00:26:22.650 --> 00:26:28.650
update the screen, or update
the user, with the latest data.

00:26:28.650 --> 00:26:29.820
This one is really great.

00:26:29.820 --> 00:26:31.020
Think of this.

00:26:31.020 --> 00:26:33.210
Most apps do this today.

00:26:33.210 --> 00:26:35.790
If you open up your
app, it shows you

00:26:35.790 --> 00:26:39.060
the last data it had,
and then all of a sudden

00:26:39.060 --> 00:26:41.360
it shows you new data.

00:26:41.360 --> 00:26:44.620
So sometimes you can
just replace the old data

00:26:44.620 --> 00:26:47.260
with the new data when
it arrives, for example,

00:26:47.260 --> 00:26:48.760
a game leaderboard.

00:26:48.760 --> 00:26:53.410
But that can be disruptive
for larger pieces of content.

00:26:53.410 --> 00:26:56.140
If all of a sudden you're
showing a whole new series

00:26:56.140 --> 00:26:58.420
of news articles, and
the user was looking

00:26:58.420 --> 00:27:00.640
at a bunch at the top,
and all of a sudden you

00:27:00.640 --> 00:27:03.305
shove them all the way down,
that's not a very good user

00:27:03.305 --> 00:27:03.805
experience.

00:27:03.805 --> 00:27:08.350
So think about how you want to
behave with the user experience

00:27:08.350 --> 00:27:11.320
in that particular case.

00:27:11.320 --> 00:27:13.960
The generic fallback
strategy, a request

00:27:13.960 --> 00:27:15.540
is first made to the cache.

00:27:15.540 --> 00:27:16.540
Let's see if it's there.

00:27:16.540 --> 00:27:18.190
No, not there.

00:27:18.190 --> 00:27:19.780
Let's go get it
from the network.

00:27:19.780 --> 00:27:21.490
No, OK, not there.

00:27:21.490 --> 00:27:23.770
So now we're going
to go to the cache

00:27:23.770 --> 00:27:26.980
and just get a generic response.

00:27:26.980 --> 00:27:29.800
This is ideal for
secondary images.

00:27:29.800 --> 00:27:33.190
Think like a user's avatar.

00:27:33.190 --> 00:27:35.124
You try and get
the user's image.

00:27:35.124 --> 00:27:36.290
Well, get it from the cache.

00:27:36.290 --> 00:27:37.030
No, not there.

00:27:37.030 --> 00:27:38.110
Get it from the network.

00:27:38.110 --> 00:27:40.030
Well, we don't have
a network connection.

00:27:40.030 --> 00:27:43.330
Well, we'll just show
the little blue head.

00:27:43.330 --> 00:27:45.130
That's the idea there.

00:27:45.130 --> 00:27:49.810
My favorite use for this is
there's a newspaper in the UK

00:27:49.810 --> 00:27:52.030
where if you try
and go to their site

00:27:52.030 --> 00:27:54.190
and you're offline,
instead of showing you

00:27:54.190 --> 00:27:58.880
the offline dinosaur, they give
you a crossword puzzle to play.

00:27:58.880 --> 00:28:02.750
They give you a game so
you stay on their site.

00:28:02.750 --> 00:28:05.210
And then once you get a
network connection again,

00:28:05.210 --> 00:28:07.400
the site reloads and
you're good to go.

00:28:07.400 --> 00:28:09.440
So they've kept you
there and they've

00:28:09.440 --> 00:28:11.480
given you something fun to do.

00:28:11.480 --> 00:28:17.470
So this is a good use
of the generic fallback.

00:28:17.470 --> 00:28:19.480
Now the last one I'm
going to talk about

00:28:19.480 --> 00:28:23.370
is cache and network race.

00:28:23.370 --> 00:28:28.020
With some combinations of older
hard drives, virus scanners,

00:28:28.020 --> 00:28:33.360
some mobile devices, and
faster internet connections,

00:28:33.360 --> 00:28:37.620
the network can
sometimes be quicker.

00:28:37.620 --> 00:28:40.470
This is rare, but it
does happen sometimes.

00:28:40.470 --> 00:28:42.780
So in this particular
case, you want

00:28:42.780 --> 00:28:44.640
to get whichever
one comes first.

00:28:44.640 --> 00:28:47.190
If you don't really care whether
you're getting the latest

00:28:47.190 --> 00:28:49.440
data from the network
or something like that,

00:28:49.440 --> 00:28:54.930
this is a really good one to
use in that particular case.

00:28:54.930 --> 00:28:57.780
However, going to the
network when the user already

00:28:57.780 --> 00:29:00.840
has the content on
their local device

00:29:00.840 --> 00:29:04.890
means you're using
extra network data.

00:29:04.890 --> 00:29:08.190
And one of the cool things
about progressive web apps

00:29:08.190 --> 00:29:10.950
is that they don't use
all of your network.

00:29:10.950 --> 00:29:14.970
They're much smaller
in terms of size.

00:29:14.970 --> 00:29:18.000
Of course, there are a
number of other strategies

00:29:18.000 --> 00:29:19.140
that you can use.

00:29:19.140 --> 00:29:22.470
Cache only, where you
just go to the cache.

00:29:22.470 --> 00:29:25.560
Network only, where you
just go to the network.

00:29:25.560 --> 00:29:28.800
Service worker templating.

00:29:28.800 --> 00:29:32.070
I always mess that those three
words up when I say them.

00:29:32.070 --> 00:29:36.330
Service worker templating, where
you build your own content.

00:29:36.330 --> 00:29:38.530
So you take your HTML,
you grab up some data,

00:29:38.530 --> 00:29:41.790
put it together, synthesize
your own response.

00:29:41.790 --> 00:29:45.990
But the point here is that with
all of these different caching

00:29:45.990 --> 00:29:48.450
strategies, you are in control.

00:29:48.450 --> 00:29:50.820
You have the ability
to choose how

00:29:50.820 --> 00:29:54.210
you want to respond, with
what particular data, at what

00:29:54.210 --> 00:29:55.560
particular time.

00:29:55.560 --> 00:29:59.400
They're really powerful for this
and allow you to really build

00:29:59.400 --> 00:30:05.940
a networked experience that
is reliable and fast and

00:30:05.940 --> 00:30:07.140
consistent.

00:30:07.140 --> 00:30:10.480
It just works.

00:30:10.480 --> 00:30:15.570
Now because you have so much
control over the network,

00:30:15.570 --> 00:30:21.200
it can kind seem daunting
because oh, all of a sudden

00:30:21.200 --> 00:30:24.890
now you have an
extra layer of cache.

00:30:24.890 --> 00:30:30.150
In the past, if you're testing
something on a remote server,

00:30:30.150 --> 00:30:32.810
you might just be dealing
with your local device.

00:30:32.810 --> 00:30:34.910
Maybe there's a proxy
server somewhere up

00:30:34.910 --> 00:30:37.880
in the cloud that's
proxying stuff and caching

00:30:37.880 --> 00:30:39.050
some old data.

00:30:39.050 --> 00:30:41.360
Or maybe there's
something somewhere else

00:30:41.360 --> 00:30:43.220
that's caching stuff,
and you're going,

00:30:43.220 --> 00:30:45.370
why am I getting the old stuff?

00:30:45.370 --> 00:30:47.570
Well, with service
workers, there's

00:30:47.570 --> 00:30:49.850
even more of a chance
of that happening.

00:30:49.850 --> 00:30:56.390
So the development can be a
little bit annoying sometimes.

00:30:56.390 --> 00:30:58.880
But there are some
good tools to help

00:30:58.880 --> 00:31:02.450
you build better experiences.

00:31:02.450 --> 00:31:05.930
So we'll have references to
these at the end of the slides

00:31:05.930 --> 00:31:08.680
so that you can have
a look at those.

00:31:08.680 --> 00:31:12.770
So don't worry about scribbling
down any of the URLs.

00:31:12.770 --> 00:31:16.530
Or you can just go grab a
screenshot like everybody

00:31:16.530 --> 00:31:17.910
has been doing that.

00:31:17.910 --> 00:31:22.880
So the first one that I want to
talk about is Chrome Dev Tools.

00:31:22.880 --> 00:31:26.150
Chrome DevTools have
added a new set of tools

00:31:26.150 --> 00:31:29.450
to really help you dive
in and understand what's

00:31:29.450 --> 00:31:31.370
going on in service workers.

00:31:31.370 --> 00:31:34.730
In the DevTools you'll
find this new application

00:31:34.730 --> 00:31:38.640
pane that allows you to
see a number of things.

00:31:38.640 --> 00:31:42.350
So it lets you see what's
going on on the manifest,

00:31:42.350 --> 00:31:45.080
inspect the service
worker, unregister it.

00:31:45.080 --> 00:31:49.940
You can force it to update,
simulate offline behavior,

00:31:49.940 --> 00:31:51.110
and more.

00:31:51.110 --> 00:31:55.400
Now I'm going to do a
talk later this afternoon

00:31:55.400 --> 00:31:56.840
on using these tools.

00:31:56.840 --> 00:32:00.980
I'm going to show you some
much more in-depth examples

00:32:00.980 --> 00:32:02.540
of using them.

00:32:02.540 --> 00:32:05.660
But the Chrome DevTools
is one really great place.

00:32:05.660 --> 00:32:08.510
Now of course, other
browsers obviously

00:32:08.510 --> 00:32:09.920
have a good set of tools.

00:32:09.920 --> 00:32:14.110
Firefox and Opera have
a similar set of tools.

00:32:14.110 --> 00:32:14.747
I'll admit it.

00:32:14.747 --> 00:32:15.830
I work on the Chrome team.

00:32:15.830 --> 00:32:17.780
I'm going to show
you the Chrome tools.

00:32:17.780 --> 00:32:22.760
But Firefox does have tools
for debugging service workers.

00:32:22.760 --> 00:32:24.470
So does Opera.

00:32:24.470 --> 00:32:26.660
And I have no doubt
that Microsoft

00:32:26.660 --> 00:32:29.990
will have some fantastic tools
for debugging service workers

00:32:29.990 --> 00:32:34.230
when they ship service workers
in Edge in the near future.

00:32:34.230 --> 00:32:38.930
So that ability to be able
to debug them is there.

00:32:38.930 --> 00:32:41.295
The DevTools not only
allow you to inspect--

00:32:45.250 --> 00:32:46.780
let me try that again.

00:32:46.780 --> 00:32:48.460
The DevTools allow
you to inspect

00:32:48.460 --> 00:32:51.430
not only things and
your service workers,

00:32:51.430 --> 00:32:54.910
but also what's going
on in the cache.

00:32:54.910 --> 00:32:58.630
So you can see what's
been cached on the device.

00:32:58.630 --> 00:33:02.290
You can understand oh, hey,
I thought I cached this.

00:33:02.290 --> 00:33:05.080
Oh, there's an old version.

00:33:05.080 --> 00:33:07.730
Or maybe there's
multiple versions,

00:33:07.730 --> 00:33:09.550
and when we try and
request it, instead

00:33:09.550 --> 00:33:12.880
of serving the latest one,
we're serving some previous one.

00:33:12.880 --> 00:33:15.670
So the ability to be able
to go into the cache storage

00:33:15.670 --> 00:33:18.430
and see what's going
on is really important

00:33:18.430 --> 00:33:21.460
and very helpful.

00:33:21.460 --> 00:33:26.050
Now in the past, we used
to tell people or recommend

00:33:26.050 --> 00:33:29.560
that when doing any work
with service workers,

00:33:29.560 --> 00:33:31.960
you used an incognito window.

00:33:31.960 --> 00:33:33.970
You opened up the
browser and you

00:33:33.970 --> 00:33:37.300
did your experiments, your
tests, your development

00:33:37.300 --> 00:33:39.100
in an incognito window.

00:33:39.100 --> 00:33:43.240
And then you closed that window
and you opened a new one,

00:33:43.240 --> 00:33:46.720
and you did more tests.

00:33:46.720 --> 00:33:50.810
And the reason we said
that was because when

00:33:50.810 --> 00:33:53.690
you close the incognito
window, everything is deleted.

00:33:53.690 --> 00:33:57.530
Your service workers is blown
away, anything in the cache

00:33:57.530 --> 00:33:58.520
is gone.

00:33:58.520 --> 00:34:01.580
You're starting
fresh every time.

00:34:01.580 --> 00:34:06.470
But there's a new tool that
makes this much easier.

00:34:06.470 --> 00:34:11.480
In this application panel, you
can go to this Clear Storage.

00:34:11.480 --> 00:34:13.460
And I know it's
really low down here,

00:34:13.460 --> 00:34:15.620
but there's a button
way down here.

00:34:15.620 --> 00:34:18.679
It says Clear Site Data.

00:34:18.679 --> 00:34:19.969
I love that button.

00:34:19.969 --> 00:34:22.219
It blows everything away.

00:34:22.219 --> 00:34:23.960
I use it a lot.

00:34:23.960 --> 00:34:28.909
That button will be probably
your best friend as you're

00:34:28.909 --> 00:34:31.730
developing service workers.

00:34:31.730 --> 00:34:36.259
We have-- if you go to
the developers.googl

00:34:36.259 --> 00:34:42.860
e.cn/web/fundamentals, we have
a code lab that will walk you

00:34:42.860 --> 00:34:46.850
through some great tutorials
on how to debug these.

00:34:46.850 --> 00:34:48.710
And you'll use
that button a lot.

00:34:48.710 --> 00:34:50.699
It just blows everything away.

00:34:50.699 --> 00:34:52.429
It means your service
workers are gone.

00:34:52.429 --> 00:34:53.330
You can start fresh.

00:34:53.330 --> 00:34:55.429
You don't need to
fight with anything.

00:34:55.429 --> 00:35:00.690
You won't bang your head
against your desk, mostly.

00:35:00.690 --> 00:35:01.530
All right.

00:35:01.530 --> 00:35:05.340
So the next thing, we've got
a couple of tools or libraries

00:35:05.340 --> 00:35:08.760
that you can use to speed up
the development of your service

00:35:08.760 --> 00:35:10.230
workers.

00:35:10.230 --> 00:35:13.680
So the first one is
Service Worker Toolbox.

00:35:13.680 --> 00:35:16.350
And Service Worker
Toolbox is a library

00:35:16.350 --> 00:35:19.680
that comes with a number
of pre-built caching

00:35:19.680 --> 00:35:22.500
strategies already implemented.

00:35:22.500 --> 00:35:25.800
So you can say, hey,
I want these files

00:35:25.800 --> 00:35:29.580
to be networked first and I want
these files to be cached first.

00:35:29.580 --> 00:35:32.730
And if you're
familiar with Node.js

00:35:32.730 --> 00:35:36.030
and routing frameworks
for URL interception,

00:35:36.030 --> 00:35:38.340
you're going to be
right at home with this

00:35:38.340 --> 00:35:42.510
because it provides a nice,
easy level of abstraction.

00:35:42.510 --> 00:35:45.410
And you can just do a search
for this to find this.

00:35:45.410 --> 00:35:49.940
Sw-toolbox is the
easiest way to find it.

00:35:49.940 --> 00:35:51.770
Here's how it works.

00:35:51.770 --> 00:35:57.740
In your Node.js-- let
me try that again.

00:35:57.740 --> 00:36:00.170
So if you remember your
cache first strategy earlier

00:36:00.170 --> 00:36:03.380
that we showed with all
that stuff where, hey,

00:36:03.380 --> 00:36:04.290
is it in the cache?

00:36:04.290 --> 00:36:05.350
Is it there?

00:36:05.350 --> 00:36:06.500
That was a pain.

00:36:06.500 --> 00:36:09.620
This, we can just
say, import scripts

00:36:09.620 --> 00:36:12.630
toolbox.router.get anything.

00:36:12.630 --> 00:36:14.440
We just provide that URL, the--

00:36:18.850 --> 00:36:22.250
wow, I'm totally messing.

00:36:22.250 --> 00:36:23.140
A regex.

00:36:23.140 --> 00:36:23.860
Thank you.

00:36:23.860 --> 00:36:24.430
OK.

00:36:24.430 --> 00:36:26.150
I'll try that again.

00:36:26.150 --> 00:36:30.290
Provide a regex with URLs
that we want and say, hey,

00:36:30.290 --> 00:36:33.760
I want you to go do cache first.

00:36:33.760 --> 00:36:37.710
The other one is something
called sw precache.

00:36:37.710 --> 00:36:41.860
Sw precache can help you
by literally writing out

00:36:41.860 --> 00:36:44.530
your service worker
code for you.

00:36:44.530 --> 00:36:47.980
Now one thing that I
will definitely say.

00:36:47.980 --> 00:36:51.250
Using something like
this is amazing,

00:36:51.250 --> 00:36:53.830
and absolutely this
is the way that I

00:36:53.830 --> 00:36:55.720
would recommend doing it.

00:36:55.720 --> 00:36:59.110
When I showed you the code
for writing your own service

00:36:59.110 --> 00:37:02.500
worker, there were some
dark and scary corners

00:37:02.500 --> 00:37:04.210
that I didn't talk about.

00:37:04.210 --> 00:37:05.860
How do things get updated?

00:37:05.860 --> 00:37:07.600
How did things get versioned?

00:37:07.600 --> 00:37:11.350
How do you deal
with lots of files?

00:37:11.350 --> 00:37:15.250
In the way that I showed
you, if you change one file,

00:37:15.250 --> 00:37:19.610
the service worker has to
re-download everything.

00:37:19.610 --> 00:37:20.710
And that's kind of dumb.

00:37:20.710 --> 00:37:23.380
If you changed one
file, you should only

00:37:23.380 --> 00:37:25.450
have to download that one file.

00:37:25.450 --> 00:37:29.590
So using these libraries
are a good way to say,

00:37:29.590 --> 00:37:32.260
I just want to do
it the smart way.

00:37:32.260 --> 00:37:36.200
Now if you don't want to use
these libraries, that's cool.

00:37:36.200 --> 00:37:38.110
But just take a
look at how they've

00:37:38.110 --> 00:37:42.220
implemented these things so
that you can understand some

00:37:42.220 --> 00:37:45.670
of those dark, scary corners,
and you don't paint yourself

00:37:45.670 --> 00:37:48.100
into something bad.

00:37:48.100 --> 00:37:50.590
Sw precache is a
node module that you

00:37:50.590 --> 00:37:55.060
can use in JavaScript, in
your JavaScript build scripts.

00:37:55.060 --> 00:37:58.240
So if you're using Gulp or
Grunt or something like that,

00:37:58.240 --> 00:38:00.516
you can use sw precache.

00:38:03.100 --> 00:38:07.390
Here's how you would use your
sw precache as a Gulp task

00:38:07.390 --> 00:38:09.070
or in a Gulp task.

00:38:09.070 --> 00:38:11.110
You just say, hey, write
this, service worker.

00:38:11.110 --> 00:38:16.090
I want to precache the files
that end in HTML and CSS.

00:38:16.090 --> 00:38:18.790
And I want to runtime cache a
whole bunch of other things.

00:38:18.790 --> 00:38:20.380
I want to do fastest for one.

00:38:20.380 --> 00:38:23.440
I want to do network first
for some other things.

00:38:23.440 --> 00:38:27.220
And allows you to really
just easily define everything

00:38:27.220 --> 00:38:29.760
right out of the box.

00:38:29.760 --> 00:38:34.010
So I hope I've
given you at least

00:38:34.010 --> 00:38:38.270
a good introductory
understanding of service

00:38:38.270 --> 00:38:40.580
workers and how they
can be used to build

00:38:40.580 --> 00:38:45.230
those reliable, fast experiences
so that your site works

00:38:45.230 --> 00:38:48.800
without having to go and fight
with anything so that it just

00:38:48.800 --> 00:38:52.895
provides an awesome experience.

00:38:52.895 --> 00:38:55.270
We're going to talk more about
some service worker stuff,

00:38:55.270 --> 00:38:57.880
because service workers power
a number of other things,

00:38:57.880 --> 00:39:00.730
throughout the rest of the day.

00:39:00.730 --> 00:39:04.390
But this, to me, if there's one
thing you walk away from today

00:39:04.390 --> 00:39:07.180
with, go play with
service workers.

00:39:07.180 --> 00:39:09.580
They're the coolest
thing the web has

00:39:09.580 --> 00:39:12.760
done since Ajax, in my opinion.

00:39:12.760 --> 00:39:16.720
So with that, I
will say thank you.

00:39:16.720 --> 00:39:19.807
And I think we will go
to a couple of questions.

00:39:19.807 --> 00:39:34.430
[APPLAUSE]

00:39:34.430 --> 00:39:37.550
AUDIENCE: I have two questions.

00:39:37.550 --> 00:39:41.250
First of all, you
said [INAUDIBLE]

00:39:41.250 --> 00:39:47.360
is supported by OS so that it
has the minimum version of OS

00:39:47.360 --> 00:39:50.070
like Android.

00:39:50.070 --> 00:39:57.550
The second question is, can
[INAUDIBLE] cache a response

00:39:57.550 --> 00:40:01.534
from API like [INAUDIBLE]?

00:40:01.534 --> 00:40:02.200
PETE LEPAGE: OK.

00:40:02.200 --> 00:40:07.200
So the first question was what
was the minimum OS that needs

00:40:07.200 --> 00:40:09.000
to support service workers?

00:40:09.000 --> 00:40:12.690
And that is, it really is
just up to the browser.

00:40:12.690 --> 00:40:14.790
That is the key thing
that the browser has

00:40:14.790 --> 00:40:17.580
to support, service workers.

00:40:17.580 --> 00:40:21.630
So Chrome, I want to
say it was mid-forties,

00:40:21.630 --> 00:40:23.670
started supporting
service workers.

00:40:23.670 --> 00:40:25.980
I don't know what
version of Firefox,

00:40:25.980 --> 00:40:28.860
but it's reasonably
widely supported

00:40:28.860 --> 00:40:32.400
in the mainstream browsers, and
it's coming to other browsers.

00:40:32.400 --> 00:40:36.090
The second question was,
can you make a cache

00:40:36.090 --> 00:40:40.740
or do anything
with API endpoints?

00:40:40.740 --> 00:40:42.050
Absolutely.

00:40:42.050 --> 00:40:48.100
The fetch and cache will
handle any HTTP requests

00:40:48.100 --> 00:40:49.820
that you throw at it.

00:40:49.820 --> 00:40:53.500
So if it's JSON, if it's
an image, if it's SVG,

00:40:53.500 --> 00:40:56.260
if it's HTML, Css, JavaScript.

00:40:56.260 --> 00:40:57.440
Whatever you want.

00:40:59.994 --> 00:41:00.660
You can do that.

00:41:09.577 --> 00:41:10.410
AUDIENCE: Thank you.

00:41:10.410 --> 00:41:12.260
I have a question
about the availability.

00:41:12.260 --> 00:41:17.910
So once you know about
availability, like

00:41:17.910 --> 00:41:19.890
is it available on Android?

00:41:19.890 --> 00:41:22.170
Is it available on iOS?

00:41:22.170 --> 00:41:25.290
Is it available on
any like browsers?

00:41:25.290 --> 00:41:30.090
Is it available on Chrome
or Firefox or anything?

00:41:30.090 --> 00:41:32.190
And there is one
important thing which

00:41:32.190 --> 00:41:34.790
is very popular in China
and the development

00:41:34.790 --> 00:41:35.970
for it is very important.

00:41:35.970 --> 00:41:40.690
And it's available within
the browser of WeChat.

00:41:40.690 --> 00:41:43.230
Thank you.

00:41:43.230 --> 00:41:46.410
PETE LEPAGE: So where
are service workers

00:41:46.410 --> 00:41:47.580
supported today?

00:41:47.580 --> 00:41:51.270
So today, the ones
that I can confirm

00:41:51.270 --> 00:41:59.040
that I've tested myself, Chrome,
Firefox, Opera I have tried.

00:41:59.040 --> 00:42:01.830
Microsoft has said we are
going to support this,

00:42:01.830 --> 00:42:06.090
so Microsoft in
Edge will ship this.

00:42:06.090 --> 00:42:09.720
Safari has given indications
that they will support it,

00:42:09.720 --> 00:42:12.420
but they haven't said yes.

00:42:12.420 --> 00:42:14.220
They haven't given a timeline.

00:42:14.220 --> 00:42:19.140
So we don't know when, but we're
pretty sure it's going to come.

00:42:19.140 --> 00:42:22.472
Please politely ask
them to support it soon.

00:42:25.230 --> 00:42:32.310
Then beyond that, we have had
discussions within the team

00:42:32.310 --> 00:42:33.600
with other browser vendors.

00:42:33.600 --> 00:42:35.850
They are looking at it.

00:42:35.850 --> 00:42:37.560
The thing about
service workers is

00:42:37.560 --> 00:42:40.260
they are progressive
enhancements.

00:42:40.260 --> 00:42:43.080
So even if you go
and build a site

00:42:43.080 --> 00:42:45.000
and a browser
doesn't support it,

00:42:45.000 --> 00:42:49.350
the user will still get a good
experience when they're online.

00:42:49.350 --> 00:42:51.960
When they're offline,
they won't get it.

00:42:51.960 --> 00:42:55.050
The sort of second
piece of that,

00:42:55.050 --> 00:42:57.030
I would ask you to do
the same thing that I

00:42:57.030 --> 00:42:59.130
asked you to do to Apple.

00:42:59.130 --> 00:43:02.670
Please go politely ask
other browser vendors

00:43:02.670 --> 00:43:06.840
to support service workers
because we need more folks

00:43:06.840 --> 00:43:07.860
to support this.

00:43:07.860 --> 00:43:09.060
I think we will see it.

00:43:09.060 --> 00:43:12.540
We just need more folks
like you asking for it

00:43:12.540 --> 00:43:13.850
and saying it's important.

00:43:16.778 --> 00:43:22.295
AUDIENCE: [INAUDIBLE]

00:43:22.295 --> 00:43:22.990
Quick follow up.

00:43:22.990 --> 00:43:26.930
So is it supported by the
browser, not the system?

00:43:26.930 --> 00:43:30.270
PETE LEPAGE: It is a
browser-specific piece, yes.

00:43:30.270 --> 00:43:32.300
So the operating
system doesn't matter.

00:43:32.300 --> 00:43:35.370
So on Chrome, it works
on Mac, on Windows,

00:43:35.370 --> 00:43:40.210
on Android, et cetera.

00:43:40.210 --> 00:43:42.760
AUDIENCE: Service workers
seems to be a very cool thing.

00:43:42.760 --> 00:43:46.290
And my question was, can
we use service workers

00:43:46.290 --> 00:43:50.260
with, for example, PhoneGap
or any other cross-platform

00:43:50.260 --> 00:43:51.960
application development?

00:43:51.960 --> 00:43:56.560
And I have a second
unrelated question.

00:43:56.560 --> 00:43:59.410
If I use Google Chrome
for development,

00:43:59.410 --> 00:44:03.400
is it that Google collects
anonymous data about my usage

00:44:03.400 --> 00:44:05.704
of Chrome or things?

00:44:05.704 --> 00:44:06.370
PETE LEPAGE: OK.

00:44:06.370 --> 00:44:09.330
So first question.

00:44:09.330 --> 00:44:10.840
Wow, I just totally
blanked on it.

00:44:10.840 --> 00:44:14.050
First question, could you--

00:44:14.050 --> 00:44:16.940
hi, my name's Pete.

00:44:16.940 --> 00:44:18.990
Whoops.

00:44:18.990 --> 00:44:20.870
AUDIENCE: So my first
question was, can we

00:44:20.870 --> 00:44:23.390
use are these service
workers available for--

00:44:23.390 --> 00:44:24.791
PETE LEPAGE: Oh, PhoneGap.

00:44:24.791 --> 00:44:25.290
Yes.

00:44:25.290 --> 00:44:26.130
Yes.

00:44:26.130 --> 00:44:30.390
So can you use service workers
within something like PhoneGap

00:44:30.390 --> 00:44:34.830
or other cross-platform
sort of frameworks?

00:44:34.830 --> 00:44:37.380
And the answer to that is maybe.

00:44:37.380 --> 00:44:41.760
But why would you, because
at that point, with PhoneGap

00:44:41.760 --> 00:44:43.620
or whatever that
particular case is,

00:44:43.620 --> 00:44:47.130
you can already cache those
within the app itself.

00:44:47.130 --> 00:44:49.260
The cool thing that
service workers

00:44:49.260 --> 00:44:52.980
give you is the ability to say,
I don't want to use PhoneGap.

00:44:52.980 --> 00:44:55.200
I want everything to
just work offline.

00:44:55.200 --> 00:44:58.350
I don't want to have to go
anywhere else for my user

00:44:58.350 --> 00:44:59.370
to get this.

00:44:59.370 --> 00:45:02.970
I just want to stay
in the web platform.

00:45:02.970 --> 00:45:06.240
The second question
about what is

00:45:06.240 --> 00:45:10.500
Google collecting when
you're using Chrome.

00:45:10.500 --> 00:45:12.690
I don't know everything it does.

00:45:12.690 --> 00:45:15.460
There is a checkbox
that says, hey,

00:45:15.460 --> 00:45:18.930
I want to send
anonymized usage data.

00:45:18.930 --> 00:45:22.470
You can uncheck that and Google
doesn't collect anything.

00:45:22.470 --> 00:45:25.380
What it does
collect, I don't want

00:45:25.380 --> 00:45:26.880
to go into that
because I don't want

00:45:26.880 --> 00:45:28.290
to tell you the wrong things.

00:45:28.290 --> 00:45:30.660
It's not collecting
anything other

00:45:30.660 --> 00:45:33.240
than anonymized usage data.

00:45:33.240 --> 00:45:35.430
We don't want to
know things like,

00:45:35.430 --> 00:45:36.720
are you using service workers?

00:45:36.720 --> 00:45:38.930
Are you clicking on
that button, et cetera.

00:45:47.430 --> 00:45:49.950
And I think we will--

00:45:49.950 --> 00:45:53.430
I know we will run out
of time for questions.

00:45:53.430 --> 00:45:55.350
We do have the web booth.

00:45:55.350 --> 00:45:58.290
And there are a bunch of us
hanging out at the web booth.

00:45:58.290 --> 00:46:02.100
So if you don't get all of
your questions answered today

00:46:02.100 --> 00:46:04.230
during the talks,
please come and talk

00:46:04.230 --> 00:46:07.860
to us in the web booth, or after
the talks, between the talks.

00:46:07.860 --> 00:46:10.290
We would love to answer
all of your questions.

00:46:10.290 --> 00:46:11.770
We just don't always
have the time.

00:46:11.770 --> 00:46:12.574
Yes.

00:46:12.574 --> 00:46:16.140
AUDIENCE: Hi, please, this is
[INAUDIBLE] from Microsoft.

00:46:16.140 --> 00:46:19.780
And in your previous
talk you have

00:46:19.780 --> 00:46:25.860
said if the service worker
is enabled in the browser

00:46:25.860 --> 00:46:29.120
and all the ATP requests
will go to the cache

00:46:29.120 --> 00:46:32.940
first and then the
internet, and your cache

00:46:32.940 --> 00:46:36.190
will be updated later, right?

00:46:36.190 --> 00:46:36.930
PETE LEPAGE: No.

00:46:36.930 --> 00:46:37.800
Sorry.

00:46:37.800 --> 00:46:41.910
To be clear, that is up to
you in your service worker

00:46:41.910 --> 00:46:42.930
how you want.

00:46:42.930 --> 00:46:47.760
So in the service worker, when
you capture that fetch event,

00:46:47.760 --> 00:46:50.460
you can choose what
you want to do,

00:46:50.460 --> 00:46:53.700
whether you want to go to
the network, go to the cache,

00:46:53.700 --> 00:46:55.640
or whatever.

00:46:55.640 --> 00:46:59.339
That is totally up to you
how you respond to that.

00:46:59.339 --> 00:46:59.880
AUDIENCE: OK.

00:46:59.880 --> 00:47:00.750
I get it.

00:47:00.750 --> 00:47:08.465
And my last question is
that some ATP requests

00:47:08.465 --> 00:47:13.630
can be responded within
one second, for example.

00:47:13.630 --> 00:47:19.155
Could we decide the caching
strategy by latency?

00:47:19.155 --> 00:47:20.155
PETE LEPAGE: By latency.

00:47:23.530 --> 00:47:27.820
You probably could, though
essentially, at that point,

00:47:27.820 --> 00:47:29.470
you could just--

00:47:29.470 --> 00:47:30.820
yes, you absolutely could.

00:47:30.820 --> 00:47:33.790
You could set a time out
in your service worker

00:47:33.790 --> 00:47:35.500
to say, hey, go get this.

00:47:35.500 --> 00:47:38.470
If you don't respond
in one second,

00:47:38.470 --> 00:47:41.380
give this from
the cache instead.

00:47:41.380 --> 00:47:46.420
AUDIENCE: So we could definitely
define our [INAUDIBLE].

00:47:46.420 --> 00:47:47.530
PETE LEPAGE: Absolutely.

00:47:47.530 --> 00:47:50.590
The best thing about
service workers,

00:47:50.590 --> 00:47:53.150
you are in total control.

00:47:53.150 --> 00:47:55.680
You get to choose
exactly how you want.

00:47:58.840 --> 00:48:06.130
AUDIENCE: [SPEAKING CHINESE]

00:48:06.130 --> 00:48:07.870
AUDIENCE: I heard
from you that you

00:48:07.870 --> 00:48:12.810
recommend the service workers
script our server and root

00:48:12.810 --> 00:48:14.560
directory.

00:48:14.560 --> 00:48:16.720
That means I must
have this rule.

00:48:16.720 --> 00:48:20.140
I have no choice to
upload my service worker

00:48:20.140 --> 00:48:23.750
script to the CDN, right?

00:48:23.750 --> 00:48:24.250
Thank you.

00:48:24.250 --> 00:48:28.260
PETE LEPAGE: So
you can technically

00:48:28.260 --> 00:48:30.630
put the service worker
in any directory you want

00:48:30.630 --> 00:48:33.810
and force a scope onto it.

00:48:33.810 --> 00:48:36.450
So there's a number
of things that you

00:48:36.450 --> 00:48:41.190
can do to say, even though
it's served from scripts,

00:48:41.190 --> 00:48:43.410
the scope is something else.

00:48:43.410 --> 00:48:47.520
So you can override
where it's served from.

00:48:47.520 --> 00:48:54.210
But when you do that, you're
diving in deep to some things

00:48:54.210 --> 00:48:56.250
that are easy to goof up.

00:48:56.250 --> 00:48:59.808
So I recommend always serving
from the root directory.

00:48:59.808 --> 00:49:00.641
AUDIENCE: Thank you.

00:49:03.512 --> 00:49:04.470
PETE LEPAGE: All right.

00:49:04.470 --> 00:49:06.660
So I think we'll wrap up.

00:49:06.660 --> 00:49:07.860
Yes?

00:49:07.860 --> 00:49:09.840
We'll hang out.

00:49:09.840 --> 00:49:11.250
Please come ask us questions.

00:49:11.250 --> 00:49:13.110
Thank you very much.

00:49:13.110 --> 00:49:14.960
[APPLAUSE]

