WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:06.639
 
[Music]

00:00:06.639 --> 00:00:06.649
[Music]
 

00:00:06.649 --> 00:00:08.780
[Music]
thanks for being here I'm impressed your

00:00:08.780 --> 00:00:08.790
thanks for being here I'm impressed your
 

00:00:08.790 --> 00:00:10.790
thanks for being here I'm impressed your
your people showing up the other at

00:00:10.790 --> 00:00:10.800
your people showing up the other at
 

00:00:10.800 --> 00:00:12.440
your people showing up the other at
fireside chat was kind of scaring me

00:00:12.440 --> 00:00:12.450
fireside chat was kind of scaring me
 

00:00:12.450 --> 00:00:14.749
fireside chat was kind of scaring me
that everyone would just avoid this

00:00:14.749 --> 00:00:14.759
that everyone would just avoid this
 

00:00:14.759 --> 00:00:18.560
that everyone would just avoid this
session but no it's great to have you

00:00:18.560 --> 00:00:18.570
session but no it's great to have you
 

00:00:18.570 --> 00:00:22.730
session but no it's great to have you
here and this talk is about art so

00:00:22.730 --> 00:00:22.740
here and this talk is about art so
 

00:00:22.740 --> 00:00:25.189
here and this talk is about art so
there's a part of this talk which was

00:00:25.189 --> 00:00:25.199
there's a part of this talk which was
 

00:00:25.199 --> 00:00:27.679
there's a part of this talk which was
supposed to be on garbage collection

00:00:27.679 --> 00:00:27.689
supposed to be on garbage collection
 

00:00:27.689 --> 00:00:30.290
supposed to be on garbage collection
that my colleague David was planning on

00:00:30.290 --> 00:00:30.300
that my colleague David was planning on
 

00:00:30.300 --> 00:00:33.229
that my colleague David was planning on
giving but we're not gonna rehash the

00:00:33.229 --> 00:00:33.239
giving but we're not gonna rehash the
 

00:00:33.239 --> 00:00:37.000
giving but we're not gonna rehash the
same thing so I'll put long pauses

00:00:37.000 --> 00:00:37.010
same thing so I'll put long pauses
 

00:00:37.010 --> 00:00:41.030
same thing so I'll put long pauses
awkward ones I hope during the talk so I

00:00:41.030 --> 00:00:41.040
awkward ones I hope during the talk so I
 

00:00:41.040 --> 00:00:45.880
awkward ones I hope during the talk so I
can fit the 40 minutes so bear with me

00:00:45.880 --> 00:00:45.890
can fit the 40 minutes so bear with me
 

00:00:45.890 --> 00:00:49.400
can fit the 40 minutes so bear with me
so given we're celebrating 10 years of

00:00:49.400 --> 00:00:49.410
so given we're celebrating 10 years of
 

00:00:49.410 --> 00:00:51.830
so given we're celebrating 10 years of
Android given I thought it would be a

00:00:51.830 --> 00:00:51.840
Android given I thought it would be a
 

00:00:51.840 --> 00:00:54.290
Android given I thought it would be a
good idea to think about what we've done

00:00:54.290 --> 00:00:54.300
good idea to think about what we've done
 

00:00:54.300 --> 00:00:57.410
good idea to think about what we've done
the last 10 years and how the end of it

00:00:57.410 --> 00:00:57.420
the last 10 years and how the end of it
 

00:00:57.420 --> 00:00:59.660
the last 10 years and how the end of it
run time which is the thing we worked on

00:00:59.660 --> 00:00:59.670
run time which is the thing we worked on
 

00:00:59.670 --> 00:01:04.130
run time which is the thing we worked on
for a couple of years now evolved so

00:01:04.130 --> 00:01:04.140
for a couple of years now evolved so
 

00:01:04.140 --> 00:01:10.880
for a couple of years now evolved so
here we are so some of you went to the

00:01:10.880 --> 00:01:10.890
here we are so some of you went to the
 

00:01:10.890 --> 00:01:12.230
here we are so some of you went to the
chat stalk so I guess you already know

00:01:12.230 --> 00:01:12.240
chat stalk so I guess you already know
 

00:01:12.240 --> 00:01:14.630
chat stalk so I guess you already know
what the what an Android runtime is in

00:01:14.630 --> 00:01:14.640
what the what an Android runtime is in
 

00:01:14.640 --> 00:01:16.609
what the what an Android runtime is in
the Android stack but in case you don't

00:01:16.609 --> 00:01:16.619
the Android stack but in case you don't
 

00:01:16.619 --> 00:01:19.969
the Android stack but in case you don't
it's that little layer that yellow one

00:01:19.969 --> 00:01:19.979
it's that little layer that yellow one
 

00:01:19.979 --> 00:01:23.120
it's that little layer that yellow one
here between the android framework like

00:01:23.120 --> 00:01:23.130
here between the android framework like
 

00:01:23.130 --> 00:01:24.859
here between the android framework like
the Android operating system and the

00:01:24.859 --> 00:01:24.869
the Android operating system and the
 

00:01:24.869 --> 00:01:30.370
the Android operating system and the
actual underlying kernel the runtime

00:01:30.370 --> 00:01:30.380
actual underlying kernel the runtime
 

00:01:30.380 --> 00:01:34.100
actual underlying kernel the runtime
runs both the android framework and all

00:01:34.100 --> 00:01:34.110
runs both the android framework and all
 

00:01:34.110 --> 00:01:35.690
runs both the android framework and all
of the apps select everything written in

00:01:35.690 --> 00:01:35.700
of the apps select everything written in
 

00:01:35.700 --> 00:01:40.340
of the apps select everything written in
Java that's what we execute and so being

00:01:40.340 --> 00:01:40.350
Java that's what we execute and so being
 

00:01:40.350 --> 00:01:43.490
Java that's what we execute and so being
so core in the platform it becomes

00:01:43.490 --> 00:01:43.500
so core in the platform it becomes
 

00:01:43.500 --> 00:01:46.760
so core in the platform it becomes
responsible for a ton of things like the

00:01:46.760 --> 00:01:46.770
responsible for a ton of things like the
 

00:01:46.770 --> 00:01:48.260
responsible for a ton of things like the
exhibit the user experience would be

00:01:48.260 --> 00:01:48.270
exhibit the user experience would be
 

00:01:48.270 --> 00:01:49.760
exhibit the user experience would be
very very bad

00:01:49.760 --> 00:01:49.770
very very bad
 

00:01:49.770 --> 00:01:51.620
very very bad
if the other word of our time was not

00:01:51.620 --> 00:01:51.630
if the other word of our time was not
 

00:01:51.630 --> 00:01:53.149
if the other word of our time was not
efficient and you started this morning

00:01:53.149 --> 00:01:53.159
efficient and you started this morning
 

00:01:53.159 --> 00:01:57.679
efficient and you started this morning
with how the GC was sort of kind of poor

00:01:57.679 --> 00:01:57.689
with how the GC was sort of kind of poor
 

00:01:57.689 --> 00:02:03.289
with how the GC was sort of kind of poor
in the top of days so in this talk I'll

00:02:03.289 --> 00:02:03.299
in the top of days so in this talk I'll
 

00:02:03.299 --> 00:02:06.969
in the top of days so in this talk I'll
show you over time how runtime versions

00:02:06.969 --> 00:02:06.979
show you over time how runtime versions
 

00:02:06.979 --> 00:02:10.100
show you over time how runtime versions
that like the old iterations we've made

00:02:10.100 --> 00:02:10.110
that like the old iterations we've made
 

00:02:10.110 --> 00:02:12.710
that like the old iterations we've made
over the past they've oscillated between

00:02:12.710 --> 00:02:12.720
over the past they've oscillated between
 

00:02:12.720 --> 00:02:13.970
over the past they've oscillated between
okay why do we need to

00:02:13.970 --> 00:02:13.980
okay why do we need to
 

00:02:13.980 --> 00:02:18.920
okay why do we need to
move for this year and like I said art

00:02:18.920 --> 00:02:18.930
move for this year and like I said art
 

00:02:18.930 --> 00:02:20.960
move for this year and like I said art
that would work time is possible for a

00:02:20.960 --> 00:02:20.970
that would work time is possible for a
 

00:02:20.970 --> 00:02:24.500
that would work time is possible for a
bunch of things and raw performance is

00:02:24.500 --> 00:02:24.510
bunch of things and raw performance is
 

00:02:24.510 --> 00:02:27.050
bunch of things and raw performance is
one here one like how fast we execute

00:02:27.050 --> 00:02:27.060
one here one like how fast we execute
 

00:02:27.060 --> 00:02:29.259
one here one like how fast we execute
Java code but clearly it's also

00:02:29.259 --> 00:02:29.269
Java code but clearly it's also
 

00:02:29.269 --> 00:02:31.699
Java code but clearly it's also
responsible for jank right like the 16

00:02:31.699 --> 00:02:31.709
responsible for jank right like the 16
 

00:02:31.709 --> 00:02:34.820
responsible for jank right like the 16
milliseconds window if the runtime is

00:02:34.820 --> 00:02:34.830
milliseconds window if the runtime is
 

00:02:34.830 --> 00:02:36.500
milliseconds window if the runtime is
not able to execute the Java code of

00:02:36.500 --> 00:02:36.510
not able to execute the Java code of
 

00:02:36.510 --> 00:02:38.690
not able to execute the Java code of
that I of the app well then we'll miss

00:02:38.690 --> 00:02:38.700
that I of the app well then we'll miss
 

00:02:38.700 --> 00:02:41.259
that I of the app well then we'll miss
the frame and produce a lot of junk

00:02:41.259 --> 00:02:41.269
the frame and produce a lot of junk
 

00:02:41.269 --> 00:02:44.990
the frame and produce a lot of junk
application startup there's a lot of

00:02:44.990 --> 00:02:45.000
application startup there's a lot of
 

00:02:45.000 --> 00:02:46.430
application startup there's a lot of
Java code it needs to be executed during

00:02:46.430 --> 00:02:46.440
Java code it needs to be executed during
 

00:02:46.440 --> 00:02:48.949
Java code it needs to be executed during
application startup again if the runtime

00:02:48.949 --> 00:02:48.959
application startup again if the runtime
 

00:02:48.959 --> 00:02:52.809
application startup again if the runtime
is slow startup will be slow good times

00:02:52.809 --> 00:02:52.819
is slow startup will be slow good times
 

00:02:52.819 --> 00:02:55.580
is slow startup will be slow good times
the inroad OS is written in Java so a

00:02:55.580 --> 00:02:55.590
the inroad OS is written in Java so a
 

00:02:55.590 --> 00:02:58.030
the inroad OS is written in Java so a
lot of code again executed during boot

00:02:58.030 --> 00:02:58.040
lot of code again executed during boot
 

00:02:58.040 --> 00:03:00.680
lot of code again executed during boot
battery if we're slow we're going to

00:03:00.680 --> 00:03:00.690
battery if we're slow we're going to
 

00:03:00.690 --> 00:03:04.430
battery if we're slow we're going to
tank your battery and install time is

00:03:04.430 --> 00:03:04.440
tank your battery and install time is
 

00:03:04.440 --> 00:03:06.979
tank your battery and install time is
also something we care about because we

00:03:06.979 --> 00:03:06.989
also something we care about because we
 

00:03:06.989 --> 00:03:10.130
also something we care about because we
are when we get an apk the platform will

00:03:10.130 --> 00:03:10.140
are when we get an apk the platform will
 

00:03:10.140 --> 00:03:13.069
are when we get an apk the platform will
optimize it and that could take a long

00:03:13.069 --> 00:03:13.079
optimize it and that could take a long
 

00:03:13.079 --> 00:03:15.890
optimize it and that could take a long
time depending on how we implement it

00:03:15.890 --> 00:03:15.900
time depending on how we implement it
 

00:03:15.900 --> 00:03:18.440
time depending on how we implement it
and we don't want that long time to

00:03:18.440 --> 00:03:18.450
and we don't want that long time to
 

00:03:18.450 --> 00:03:20.000
and we don't want that long time to
happen because we want you to use the

00:03:20.000 --> 00:03:20.010
happen because we want you to use the
 

00:03:20.010 --> 00:03:23.330
happen because we want you to use the
app by the way and the other two which

00:03:23.330 --> 00:03:23.340
app by the way and the other two which
 

00:03:23.340 --> 00:03:25.610
app by the way and the other two which
is like memory related is like this

00:03:25.610 --> 00:03:25.620
is like memory related is like this
 

00:03:25.620 --> 00:03:28.550
is like memory related is like this
space it's like how much space is the

00:03:28.550 --> 00:03:28.560
space it's like how much space is the
 

00:03:28.560 --> 00:03:30.710
space it's like how much space is the
runtime taking for its own optimizations

00:03:30.710 --> 00:03:30.720
runtime taking for its own optimizations
 

00:03:30.720 --> 00:03:35.930
runtime taking for its own optimizations
and then RAM so Java being Java there's

00:03:35.930 --> 00:03:35.940
and then RAM so Java being Java there's
 

00:03:35.940 --> 00:03:39.110
and then RAM so Java being Java there's
allocation that the runtime needs to

00:03:39.110 --> 00:03:39.120
allocation that the runtime needs to
 

00:03:39.120 --> 00:03:42.220
allocation that the runtime needs to
handle and if it doesn't do it well then

00:03:42.220 --> 00:03:42.230
handle and if it doesn't do it well then
 

00:03:42.230 --> 00:03:49.940
handle and if it doesn't do it well then
it can take a lot of RAM so this is

00:03:49.940 --> 00:03:49.950
it can take a lot of RAM so this is
 

00:03:49.950 --> 00:03:52.190
it can take a lot of RAM so this is
essentially there's been three

00:03:52.190 --> 00:03:52.200
essentially there's been three
 

00:03:52.200 --> 00:03:57.440
essentially there's been three
incarnations of the Android runtime the

00:03:57.440 --> 00:03:57.450
incarnations of the Android runtime the
 

00:03:57.450 --> 00:04:00.800
incarnations of the Android runtime the
first one was dalvik it was the first

00:04:00.800 --> 00:04:00.810
first one was dalvik it was the first
 

00:04:00.810 --> 00:04:02.270
first one was dalvik it was the first
implementation that shipped with Android

00:04:02.270 --> 00:04:02.280
implementation that shipped with Android
 

00:04:02.280 --> 00:04:07.970
implementation that shipped with Android
and albert's dalvik purpose or dalvik

00:04:07.970 --> 00:04:07.980
and albert's dalvik purpose or dalvik
 

00:04:07.980 --> 00:04:10.809
and albert's dalvik purpose or dalvik
main focus was how do we save RAM and

00:04:10.809 --> 00:04:10.819
main focus was how do we save RAM and
 

00:04:10.819 --> 00:04:13.400
main focus was how do we save RAM and
the reason being back in the days like

00:04:13.400 --> 00:04:13.410
the reason being back in the days like
 

00:04:13.410 --> 00:04:15.920
the reason being back in the days like
10 years ago the RAM we had on the

00:04:15.920 --> 00:04:15.930
10 years ago the RAM we had on the
 

00:04:15.930 --> 00:04:17.990
10 years ago the RAM we had on the
phones were shipping was like even less

00:04:17.990 --> 00:04:18.000
phones were shipping was like even less
 

00:04:18.000 --> 00:04:20.270
phones were shipping was like even less
than 200 megabyte and that was very

00:04:20.270 --> 00:04:20.280
than 200 megabyte and that was very
 

00:04:20.280 --> 00:04:22.520
than 200 megabyte and that was very
little if you want to execute the whole

00:04:22.520 --> 00:04:22.530
little if you want to execute the whole
 

00:04:22.530 --> 00:04:26.659
little if you want to execute the whole
event the Android stack so everything

00:04:26.659 --> 00:04:26.669
event the Android stack so everything
 

00:04:26.669 --> 00:04:27.590
event the Android stack so everything
dalvik was doing was

00:04:27.590 --> 00:04:27.600
dalvik was doing was
 

00:04:27.600 --> 00:04:30.980
dalvik was doing was
about okay how do we save on RAM so it

00:04:30.980 --> 00:04:30.990
about okay how do we save on RAM so it
 

00:04:30.990 --> 00:04:34.540
about okay how do we save on RAM so it
could not generate any code Jade or IOT

00:04:34.540 --> 00:04:34.550
could not generate any code Jade or IOT
 

00:04:34.550 --> 00:04:38.480
could not generate any code Jade or IOT
is how we generate code it could just

00:04:38.480 --> 00:04:38.490
is how we generate code it could just
 

00:04:38.490 --> 00:04:40.880
is how we generate code it could just
interpret the text code the tax code

00:04:40.880 --> 00:04:40.890
interpret the text code the tax code
 

00:04:40.890 --> 00:04:43.100
interpret the text code the tax code
being the thing that gets sent to the to

00:04:43.100 --> 00:04:43.110
being the thing that gets sent to the to
 

00:04:43.110 --> 00:04:45.490
being the thing that gets sent to the to
Android for execution of your app

00:04:45.490 --> 00:04:45.500
Android for execution of your app
 

00:04:45.500 --> 00:04:47.810
Android for execution of your app
eventually it got a just-in-time

00:04:47.810 --> 00:04:47.820
eventually it got a just-in-time
 

00:04:47.820 --> 00:04:50.600
eventually it got a just-in-time
compiler so that we could generate

00:04:50.600 --> 00:04:50.610
compiler so that we could generate
 

00:04:50.610 --> 00:04:54.560
compiler so that we could generate
native code of the Dex code but again it

00:04:54.560 --> 00:04:54.570
native code of the Dex code but again it
 

00:04:54.570 --> 00:04:56.360
native code of the Dex code but again it
was very limited to what it could do

00:04:56.360 --> 00:04:56.370
was very limited to what it could do
 

00:04:56.370 --> 00:05:01.250
was very limited to what it could do
because Ram was the main focus and it's

00:05:01.250 --> 00:05:01.260
because Ram was the main focus and it's
 

00:05:01.260 --> 00:05:05.960
because Ram was the main focus and it's
GC was tailored for a apps should not

00:05:05.960 --> 00:05:05.970
GC was tailored for a apps should not
 

00:05:05.970 --> 00:05:08.810
GC was tailored for a apps should not
allocate objects if you've been to the

00:05:08.810 --> 00:05:08.820
allocate objects if you've been to the
 

00:05:08.820 --> 00:05:11.540
allocate objects if you've been to the
talk this morning things have changed

00:05:11.540 --> 00:05:11.550
talk this morning things have changed
 

00:05:11.550 --> 00:05:14.450
talk this morning things have changed
but back in the days the recommendation

00:05:14.450 --> 00:05:14.460
but back in the days the recommendation
 

00:05:14.460 --> 00:05:18.100
but back in the days the recommendation
was like please avoid allocations and

00:05:18.100 --> 00:05:18.110
was like please avoid allocations and
 

00:05:18.110 --> 00:05:21.880
was like please avoid allocations and
this worked well for I think five years

00:05:21.880 --> 00:05:21.890
this worked well for I think five years
 

00:05:21.890 --> 00:05:25.910
this worked well for I think five years
till I killed KitKat but it was like a

00:05:25.910 --> 00:05:25.920
till I killed KitKat but it was like a
 

00:05:25.920 --> 00:05:28.850
till I killed KitKat but it was like a
point where like dalvik could not keep

00:05:28.850 --> 00:05:28.860
point where like dalvik could not keep
 

00:05:28.860 --> 00:05:32.750
point where like dalvik could not keep
up phones were getting bigger phones

00:05:32.750 --> 00:05:32.760
up phones were getting bigger phones
 

00:05:32.760 --> 00:05:35.690
up phones were getting bigger phones
were getting more performance more RAM

00:05:35.690 --> 00:05:35.700
were getting more performance more RAM
 

00:05:35.700 --> 00:05:41.810
were getting more performance more RAM
like mm that was 2013-14 I think it was

00:05:41.810 --> 00:05:41.820
like mm that was 2013-14 I think it was
 

00:05:41.820 --> 00:05:47.150
like mm that was 2013-14 I think it was
one gig two gigs of RAM and apps were

00:05:47.150 --> 00:05:47.160
one gig two gigs of RAM and apps were
 

00:05:47.160 --> 00:05:49.850
one gig two gigs of RAM and apps were
also getting bigger so initially apps

00:05:49.850 --> 00:05:49.860
also getting bigger so initially apps
 

00:05:49.860 --> 00:05:51.440
also getting bigger so initially apps
was supposed to be like this small layer

00:05:51.440 --> 00:05:51.450
was supposed to be like this small layer
 

00:05:51.450 --> 00:05:54.170
was supposed to be like this small layer
between UI and the framework but apps

00:05:54.170 --> 00:05:54.180
between UI and the framework but apps
 

00:05:54.180 --> 00:05:56.180
between UI and the framework but apps
become started doing a lot of more and

00:05:56.180 --> 00:05:56.190
become started doing a lot of more and
 

00:05:56.190 --> 00:05:58.850
become started doing a lot of more and
more things so that 16 millisecond

00:05:58.850 --> 00:05:58.860
more things so that 16 millisecond
 

00:05:58.860 --> 00:06:00.710
more things so that 16 millisecond
window I talked for rendering the frame

00:06:00.710 --> 00:06:00.720
window I talked for rendering the frame
 

00:06:00.720 --> 00:06:02.570
window I talked for rendering the frame
well more things started to be executed

00:06:02.570 --> 00:06:02.580
well more things started to be executed
 

00:06:02.580 --> 00:06:06.800
well more things started to be executed
there so we had to do something about it

00:06:06.800 --> 00:06:06.810
there so we had to do something about it
 

00:06:06.810 --> 00:06:10.250
there so we had to do something about it
and the answer happened in lollipop with

00:06:10.250 --> 00:06:10.260
and the answer happened in lollipop with
 

00:06:10.260 --> 00:06:14.180
and the answer happened in lollipop with
art which introduced ahead of time

00:06:14.180 --> 00:06:14.190
art which introduced ahead of time
 

00:06:14.190 --> 00:06:14.780
art which introduced ahead of time
compilation

00:06:14.780 --> 00:06:14.790
compilation
 

00:06:14.790 --> 00:06:17.030
compilation
so no more Enterprise interpretation or

00:06:17.030 --> 00:06:17.040
so no more Enterprise interpretation or
 

00:06:17.040 --> 00:06:19.670
so no more Enterprise interpretation or
it very very little and most of the

00:06:19.670 --> 00:06:19.680
it very very little and most of the
 

00:06:19.680 --> 00:06:21.110
it very very little and most of the
things were ahead of time compiled

00:06:21.110 --> 00:06:21.120
things were ahead of time compiled
 

00:06:21.120 --> 00:06:23.450
things were ahead of time compiled
meaning we were executing native code

00:06:23.450 --> 00:06:23.460
meaning we were executing native code
 

00:06:23.460 --> 00:06:26.120
meaning we were executing native code
for your app and that is like probably

00:06:26.120 --> 00:06:26.130
for your app and that is like probably
 

00:06:26.130 --> 00:06:31.820
for your app and that is like probably
20x faster than interpretation we also

00:06:31.820 --> 00:06:31.830
20x faster than interpretation we also
 

00:06:31.830 --> 00:06:35.930
20x faster than interpretation we also
introduced like a state of the art GC

00:06:35.930 --> 00:06:35.940
introduced like a state of the art GC
 

00:06:35.940 --> 00:06:38.150
introduced like a state of the art GC
what you find in regular run times of

00:06:38.150 --> 00:06:38.160
what you find in regular run times of
 

00:06:38.160 --> 00:06:40.150
what you find in regular run times of
being precise

00:06:40.150 --> 00:06:40.160
being precise
 

00:06:40.160 --> 00:06:42.790
being precise
means we're not gonna be confused by an

00:06:42.790 --> 00:06:42.800
means we're not gonna be confused by an
 

00:06:42.800 --> 00:06:45.540
means we're not gonna be confused by an
integer that looks like a like an object

00:06:45.540 --> 00:06:45.550
integer that looks like a like an object
 

00:06:45.550 --> 00:06:49.480
integer that looks like a like an object
but also generations so that the GC

00:06:49.480 --> 00:06:49.490
but also generations so that the GC
 

00:06:49.490 --> 00:06:52.350
but also generations so that the GC
pauses we need to do in the UI thread

00:06:52.350 --> 00:06:52.360
pauses we need to do in the UI thread
 

00:06:52.360 --> 00:06:54.280
pauses we need to do in the UI thread
will be very short

00:06:54.280 --> 00:06:54.290
will be very short
 

00:06:54.290 --> 00:06:57.370
will be very short
so pauses don't actually end up creating

00:06:57.370 --> 00:06:57.380
so pauses don't actually end up creating
 

00:06:57.380 --> 00:07:04.390
so pauses don't actually end up creating
jank the third incarnation is like an

00:07:04.390 --> 00:07:04.400
jank the third incarnation is like an
 

00:07:04.400 --> 00:07:06.820
jank the third incarnation is like an
evolution of art it happened in two

00:07:06.820 --> 00:07:06.830
evolution of art it happened in two
 

00:07:06.830 --> 00:07:09.640
evolution of art it happened in two
releases like Angeline Dugan Android or

00:07:09.640 --> 00:07:09.650
releases like Angeline Dugan Android or
 

00:07:09.650 --> 00:07:14.170
releases like Angeline Dugan Android or
Rio in Android nuga we introduced

00:07:14.170 --> 00:07:14.180
Rio in Android nuga we introduced
 

00:07:14.180 --> 00:07:17.410
Rio in Android nuga we introduced
profile guided compilation I'll talk

00:07:17.410 --> 00:07:17.420
profile guided compilation I'll talk
 

00:07:17.420 --> 00:07:20.170
profile guided compilation I'll talk
about this later or explain a bit later

00:07:20.170 --> 00:07:20.180
about this later or explain a bit later
 

00:07:20.180 --> 00:07:23.880
about this later or explain a bit later
what it is but it drastically helped on

00:07:23.880 --> 00:07:23.890
what it is but it drastically helped on
 

00:07:23.890 --> 00:07:28.870
what it is but it drastically helped on
scaling arts ahead of time technology to

00:07:28.870 --> 00:07:28.880
scaling arts ahead of time technology to
 

00:07:28.880 --> 00:07:31.810
scaling arts ahead of time technology to
to be more optimized for the full

00:07:31.810 --> 00:07:31.820
to be more optimized for the full
 

00:07:31.820 --> 00:07:36.130
to be more optimized for the full
platform the profile guide compilation

00:07:36.130 --> 00:07:36.140
platform the profile guide compilation
 

00:07:36.140 --> 00:07:38.410
platform the profile guide compilation
has underneath the way it works is like

00:07:38.410 --> 00:07:38.420
has underneath the way it works is like
 

00:07:38.420 --> 00:07:41.160
has underneath the way it works is like
it's a hybrid just in time ahead of time

00:07:41.160 --> 00:07:41.170
it's a hybrid just in time ahead of time
 

00:07:41.170 --> 00:07:44.410
it's a hybrid just in time ahead of time
compiler so trying to use the best of

00:07:44.410 --> 00:07:44.420
compiler so trying to use the best of
 

00:07:44.420 --> 00:07:48.120
compiler so trying to use the best of
both worlds to optimize the platform and

00:07:48.120 --> 00:07:48.130
both worlds to optimize the platform and
 

00:07:48.130 --> 00:07:50.940
both worlds to optimize the platform and
you know after we've done all of some

00:07:50.940 --> 00:07:50.950
you know after we've done all of some
 

00:07:50.950 --> 00:07:54.970
you know after we've done all of some
optimizations in N in all we focused on

00:07:54.970 --> 00:07:54.980
optimizations in N in all we focused on
 

00:07:54.980 --> 00:07:57.580
optimizations in N in all we focused on
the garbage collector and implemented a

00:07:57.580 --> 00:07:57.590
the garbage collector and implemented a
 

00:07:57.590 --> 00:08:00.610
the garbage collector and implemented a
brand new one which makes the pause even

00:08:00.610 --> 00:08:00.620
brand new one which makes the pause even
 

00:08:00.620 --> 00:08:05.560
brand new one which makes the pause even
shorter on the on the UI thread we call

00:08:05.560 --> 00:08:05.570
shorter on the on the UI thread we call
 

00:08:05.570 --> 00:08:11.830
shorter on the on the UI thread we call
this current GC now the the older GC

00:08:11.830 --> 00:08:11.840
this current GC now the the older GC
 

00:08:11.840 --> 00:08:14.020
this current GC now the the older GC
happening happen the GC happens on a

00:08:14.020 --> 00:08:14.030
happening happen the GC happens on a
 

00:08:14.030 --> 00:08:15.670
happening happen the GC happens on a
different thread so it's not affecting

00:08:15.670 --> 00:08:15.680
different thread so it's not affecting
 

00:08:15.680 --> 00:08:20.890
different thread so it's not affecting
the execution of the app alright so

00:08:20.890 --> 00:08:20.900
the execution of the app alright so
 

00:08:20.900 --> 00:08:22.720
the execution of the app alright so
before I dive in into our details I

00:08:22.720 --> 00:08:22.730
before I dive in into our details I
 

00:08:22.730 --> 00:08:23.920
before I dive in into our details I
wanted to show this to you like the

00:08:23.920 --> 00:08:23.930
wanted to show this to you like the
 

00:08:23.930 --> 00:08:28.000
wanted to show this to you like the
state of Android distribution today and

00:08:28.000 --> 00:08:28.010
state of Android distribution today and
 

00:08:28.010 --> 00:08:29.500
state of Android distribution today and
in case you're still optimizing for

00:08:29.500 --> 00:08:29.510
in case you're still optimizing for
 

00:08:29.510 --> 00:08:31.090
in case you're still optimizing for
dalvik or if you need to care about

00:08:31.090 --> 00:08:31.100
dalvik or if you need to care about
 

00:08:31.100 --> 00:08:33.190
dalvik or if you need to care about
dalvik and this is just annoying GC for

00:08:33.190 --> 00:08:33.200
dalvik and this is just annoying GC for
 

00:08:33.200 --> 00:08:34.659
dalvik and this is just annoying GC for
alloc if you've been a church talking

00:08:34.659 --> 00:08:34.669
alloc if you've been a church talking
 

00:08:34.669 --> 00:08:35.909
alloc if you've been a church talking
than what I'm talking about

00:08:35.909 --> 00:08:35.919
than what I'm talking about
 

00:08:35.919 --> 00:08:39.850
than what I'm talking about
well there's still just 10 percent here

00:08:39.850 --> 00:08:39.860
well there's still just 10 percent here
 

00:08:39.860 --> 00:08:43.150
well there's still just 10 percent here
10 10 plus KitKat jellybeans and a bit

00:08:43.150 --> 00:08:43.160
10 10 plus KitKat jellybeans and a bit
 

00:08:43.160 --> 00:08:44.980
10 10 plus KitKat jellybeans and a bit
of few other so around 10 percent of

00:08:44.980 --> 00:08:44.990
of few other so around 10 percent of
 

00:08:44.990 --> 00:08:48.460
of few other so around 10 percent of
devices are still running KitKat so my

00:08:48.460 --> 00:08:48.470
devices are still running KitKat so my
 

00:08:48.470 --> 00:08:50.980
devices are still running KitKat so my
recommendation is like it still matters

00:08:50.980 --> 00:08:50.990
recommendation is like it still matters
 

00:08:50.990 --> 00:08:53.950
recommendation is like it still matters
10 percent is probably 200 million users

00:08:53.950 --> 00:08:53.960
10 percent is probably 200 million users
 

00:08:53.960 --> 00:08:57.820
10 percent is probably 200 million users
it's quite a big number so it still

00:08:57.820 --> 00:08:57.830
it's quite a big number so it still
 

00:08:57.830 --> 00:09:00.220
it's quite a big number so it still
matters but give it a couple of years

00:09:00.220 --> 00:09:00.230
matters but give it a couple of years
 

00:09:00.230 --> 00:09:04.720
matters but give it a couple of years
and hopefully in two years that will be

00:09:04.720 --> 00:09:04.730
and hopefully in two years that will be
 

00:09:04.730 --> 00:09:07.390
and hopefully in two years that will be
gone and now it can be part of this

00:09:07.390 --> 00:09:07.400
gone and now it can be part of this
 

00:09:07.400 --> 00:09:13.050
gone and now it can be part of this
museum all right

00:09:13.050 --> 00:09:13.060
museum all right
 

00:09:13.060 --> 00:09:18.640
museum all right
so things art matters for I've put eight

00:09:18.640 --> 00:09:18.650
so things art matters for I've put eight
 

00:09:18.650 --> 00:09:22.960
so things art matters for I've put eight
boxes they look nice and we do matter a

00:09:22.960 --> 00:09:22.970
boxes they look nice and we do matter a
 

00:09:22.970 --> 00:09:24.610
boxes they look nice and we do matter a
lot for this like if we do get it wrong

00:09:24.610 --> 00:09:24.620
lot for this like if we do get it wrong
 

00:09:24.620 --> 00:09:30.160
lot for this like if we do get it wrong
things will go bad on your device raw

00:09:30.160 --> 00:09:30.170
things will go bad on your device raw
 

00:09:30.170 --> 00:09:33.970
things will go bad on your device raw
performance I talked about that's Java

00:09:33.970 --> 00:09:33.980
performance I talked about that's Java
 

00:09:33.980 --> 00:09:37.600
performance I talked about that's Java
execution jank application startup

00:09:37.600 --> 00:09:37.610
execution jank application startup
 

00:09:37.610 --> 00:09:40.900
execution jank application startup
battery this space Ram boot times

00:09:40.900 --> 00:09:40.910
battery this space Ram boot times
 

00:09:40.910 --> 00:09:42.010
battery this space Ram boot times
install times I'm just repeating myself

00:09:42.010 --> 00:09:42.020
install times I'm just repeating myself
 

00:09:42.020 --> 00:09:44.260
install times I'm just repeating myself
but this is really important right this

00:09:44.260 --> 00:09:44.270
but this is really important right this
 

00:09:44.270 --> 00:09:45.400
but this is really important right this
is the thing that makes your user

00:09:45.400 --> 00:09:45.410
is the thing that makes your user
 

00:09:45.410 --> 00:09:47.620
is the thing that makes your user
experience kind of okay so that you can

00:09:47.620 --> 00:09:47.630
experience kind of okay so that you can
 

00:09:47.630 --> 00:09:53.790
experience kind of okay so that you can
enjoy the apps so I'm going to go over

00:09:53.790 --> 00:09:53.800
enjoy the apps so I'm going to go over
 

00:09:53.800 --> 00:09:57.120
enjoy the apps so I'm going to go over
the releases I talked about what what

00:09:57.120 --> 00:09:57.130
the releases I talked about what what
 

00:09:57.130 --> 00:09:59.110
the releases I talked about what what
different incarnations of the other at

00:09:59.110 --> 00:09:59.120
different incarnations of the other at
 

00:09:59.120 --> 00:10:03.010
different incarnations of the other at
one time to show what it brings to the

00:10:03.010 --> 00:10:03.020
one time to show what it brings to the
 

00:10:03.020 --> 00:10:07.620
one time to show what it brings to the
so what what makes art today because art

00:10:07.620 --> 00:10:07.630
so what what makes art today because art
 

00:10:07.630 --> 00:10:09.850
so what what makes art today because art
has a lot like I said a lot of

00:10:09.850 --> 00:10:09.860
has a lot like I said a lot of
 

00:10:09.860 --> 00:10:12.040
has a lot like I said a lot of
evolutions and but we also we also took

00:10:12.040 --> 00:10:12.050
evolutions and but we also we also took
 

00:10:12.050 --> 00:10:14.019
evolutions and but we also we also took
things from dalvik like good things from

00:10:14.019 --> 00:10:14.029
things from dalvik like good things from
 

00:10:14.029 --> 00:10:16.630
things from dalvik like good things from
dalvik I'm listing two major ones here

00:10:16.630 --> 00:10:16.640
dalvik I'm listing two major ones here
 

00:10:16.640 --> 00:10:19.230
dalvik I'm listing two major ones here
because the list would be too long and

00:10:19.230 --> 00:10:19.240
because the list would be too long and
 

00:10:19.240 --> 00:10:21.970
because the list would be too long and
obviously the major thing that that with

00:10:21.970 --> 00:10:21.980
obviously the major thing that that with
 

00:10:21.980 --> 00:10:25.540
obviously the major thing that that with
the dalvik architecture brought was RAM

00:10:25.540 --> 00:10:25.550
the dalvik architecture brought was RAM
 

00:10:25.550 --> 00:10:28.660
the dalvik architecture brought was RAM
savings and for that dalvik introduced

00:10:28.660 --> 00:10:28.670
savings and for that dalvik introduced
 

00:10:28.670 --> 00:10:31.300
savings and for that dalvik introduced
or dalvik or the android platform

00:10:31.300 --> 00:10:31.310
or dalvik or the android platform
 

00:10:31.310 --> 00:10:34.690
or dalvik or the android platform
actually introduced desire code which is

00:10:34.690 --> 00:10:34.700
actually introduced desire code which is
 

00:10:34.700 --> 00:10:39.070
actually introduced desire code which is
the parent process that creates all of

00:10:39.070 --> 00:10:39.080
the parent process that creates all of
 

00:10:39.080 --> 00:10:41.769
the parent process that creates all of
the other processes so because it's the

00:10:41.769 --> 00:10:41.779
the other processes so because it's the
 

00:10:41.779 --> 00:10:44.890
the other processes so because it's the
parent process you have the option of

00:10:44.890 --> 00:10:44.900
parent process you have the option of
 

00:10:44.900 --> 00:10:47.850
parent process you have the option of
that parent process starting up or

00:10:47.850 --> 00:10:47.860
that parent process starting up or
 

00:10:47.860 --> 00:10:52.810
that parent process starting up or
allocating a lot of memory for that apps

00:10:52.810 --> 00:10:52.820
allocating a lot of memory for that apps
 

00:10:52.820 --> 00:10:55.720
allocating a lot of memory for that apps
can use and that memory can be shared

00:10:55.720 --> 00:10:55.730
can use and that memory can be shared
 

00:10:55.730 --> 00:10:59.380
can use and that memory can be shared
with the other apps and that's super

00:10:59.380 --> 00:10:59.390
with the other apps and that's super
 

00:10:59.390 --> 00:11:01.870
with the other apps and that's super
important that means that every app now

00:11:01.870 --> 00:11:01.880
important that means that every app now
 

00:11:01.880 --> 00:11:03.550
important that means that every app now
doesn't need to allocate this memory

00:11:03.550 --> 00:11:03.560
doesn't need to allocate this memory
 

00:11:03.560 --> 00:11:05.949
doesn't need to allocate this memory
that it would need otherwise to actually

00:11:05.949 --> 00:11:05.959
that it would need otherwise to actually
 

00:11:05.959 --> 00:11:07.639
that it would need otherwise to actually
execute

00:11:07.639 --> 00:11:07.649
execute
 

00:11:07.649 --> 00:11:12.869
execute
in art today that's around like a couple

00:11:12.869 --> 00:11:12.879
in art today that's around like a couple
 

00:11:12.879 --> 00:11:15.899
in art today that's around like a couple
of dozens of megabyte that we save per

00:11:15.899 --> 00:11:15.909
of dozens of megabyte that we save per
 

00:11:15.909 --> 00:11:18.959
of dozens of megabyte that we save per
app and that the cycle just allocates

00:11:18.959 --> 00:11:18.969
app and that the cycle just allocates
 

00:11:18.969 --> 00:11:24.439
app and that the cycle just allocates
and share with the with the other apps

00:11:24.439 --> 00:11:24.449
 
 

00:11:24.449 --> 00:11:29.009
 
then lollipop that was the major shift

00:11:29.009 --> 00:11:29.019
then lollipop that was the major shift
 

00:11:29.019 --> 00:11:30.389
then lollipop that was the major shift
when we introduced ahead of time

00:11:30.389 --> 00:11:30.399
when we introduced ahead of time
 

00:11:30.399 --> 00:11:33.299
when we introduced ahead of time
compilation ahead of time compilation

00:11:33.299 --> 00:11:33.309
compilation ahead of time compilation
 

00:11:33.309 --> 00:11:35.789
compilation ahead of time compilation
happens with what we call an SSA

00:11:35.789 --> 00:11:35.799
happens with what we call an SSA
 

00:11:35.799 --> 00:11:37.919
happens with what we call an SSA
compiler static single assignment

00:11:37.919 --> 00:11:37.929
compiler static single assignment
 

00:11:37.929 --> 00:11:41.639
compiler static single assignment
compiler that's a compiler buzzword that

00:11:41.639 --> 00:11:41.649
compiler that's a compiler buzzword that
 

00:11:41.649 --> 00:11:43.949
compiler that's a compiler buzzword that
is like state of the art compiler that

00:11:43.949 --> 00:11:43.959
is like state of the art compiler that
 

00:11:43.959 --> 00:11:45.869
is like state of the art compiler that
does a lot of conversations and makes

00:11:45.869 --> 00:11:45.879
does a lot of conversations and makes
 

00:11:45.879 --> 00:11:50.519
does a lot of conversations and makes
your code up to 20x faster so we

00:11:50.519 --> 00:11:50.529
your code up to 20x faster so we
 

00:11:50.529 --> 00:11:52.169
your code up to 20x faster so we
introduced that ahead of time for polar

00:11:52.169 --> 00:11:52.179
introduced that ahead of time for polar
 

00:11:52.179 --> 00:11:55.709
introduced that ahead of time for polar
that helped a lot on reducing jank

00:11:55.709 --> 00:11:55.719
that helped a lot on reducing jank
 

00:11:55.719 --> 00:11:59.309
that helped a lot on reducing jank
because now the code was compiled not

00:11:59.309 --> 00:11:59.319
because now the code was compiled not
 

00:11:59.319 --> 00:12:01.669
because now the code was compiled not
needing to be interpreted very fast

00:12:01.669 --> 00:12:01.679
needing to be interpreted very fast
 

00:12:01.679 --> 00:12:04.589
needing to be interpreted very fast
reducing application startup same

00:12:04.589 --> 00:12:04.599
reducing application startup same
 

00:12:04.599 --> 00:12:08.009
reducing application startup same
argument but also saving battery like

00:12:08.009 --> 00:12:08.019
argument but also saving battery like
 

00:12:08.019 --> 00:12:09.959
argument but also saving battery like
now the execution being 20x faster you

00:12:09.959 --> 00:12:09.969
now the execution being 20x faster you
 

00:12:09.969 --> 00:12:12.419
now the execution being 20x faster you
can imagine that well it's not the point

00:12:12.419 --> 00:12:12.429
can imagine that well it's not the point
 

00:12:12.429 --> 00:12:15.059
can imagine that well it's not the point
of saving 20x times on your battery but

00:12:15.059 --> 00:12:15.069
of saving 20x times on your battery but
 

00:12:15.069 --> 00:12:17.339
of saving 20x times on your battery but
things get faster and and we don't need

00:12:17.339 --> 00:12:17.349
things get faster and and we don't need
 

00:12:17.349 --> 00:12:21.719
things get faster and and we don't need
to execute a lot on the CPU anymore we

00:12:21.719 --> 00:12:21.729
to execute a lot on the CPU anymore we
 

00:12:21.729 --> 00:12:23.849
to execute a lot on the CPU anymore we
also saved on boot times the whole

00:12:23.849 --> 00:12:23.859
also saved on boot times the whole
 

00:12:23.859 --> 00:12:26.489
also saved on boot times the whole
Android OS is ahead of time PayPal and

00:12:26.489 --> 00:12:26.499
Android OS is ahead of time PayPal and
 

00:12:26.499 --> 00:12:28.219
Android OS is ahead of time PayPal and
doesn't need to be interpreted at boot

00:12:28.219 --> 00:12:28.229
doesn't need to be interpreted at boot
 

00:12:28.229 --> 00:12:34.159
doesn't need to be interpreted at boot
so here we go things go faster at boot

00:12:34.159 --> 00:12:34.169
 
 

00:12:34.169 --> 00:12:38.309
 
we also introduced the new GCC

00:12:38.309 --> 00:12:38.319
we also introduced the new GCC
 

00:12:38.319 --> 00:12:41.759
we also introduced the new GCC
generational GC which reduce the pauses

00:12:41.759 --> 00:12:41.769
generational GC which reduce the pauses
 

00:12:41.769 --> 00:12:45.539
generational GC which reduce the pauses
and remove the need for GC for alloc in

00:12:45.539 --> 00:12:45.549
and remove the need for GC for alloc in
 

00:12:45.549 --> 00:12:52.889
and remove the need for GC for alloc in
dalvik then the third incarnation nuga

00:12:52.889 --> 00:12:52.899
dalvik then the third incarnation nuga
 

00:12:52.899 --> 00:12:55.859
dalvik then the third incarnation nuga
an oreo I mentioned how there will

00:12:55.859 --> 00:12:55.869
an oreo I mentioned how there will
 

00:12:55.869 --> 00:12:58.079
an oreo I mentioned how there will
introduced profile data compilation and

00:12:58.079 --> 00:12:58.089
introduced profile data compilation and
 

00:12:58.089 --> 00:13:00.629
introduced profile data compilation and
that thing helps it's kind of the mother

00:13:00.629 --> 00:13:00.639
that thing helps it's kind of the mother
 

00:13:00.639 --> 00:13:02.879
that thing helps it's kind of the mother
of all the optimizations today that we

00:13:02.879 --> 00:13:02.889
of all the optimizations today that we
 

00:13:02.889 --> 00:13:05.659
of all the optimizations today that we
do like it helps a lot of these metrics

00:13:05.659 --> 00:13:05.669
do like it helps a lot of these metrics
 

00:13:05.669 --> 00:13:11.429
do like it helps a lot of these metrics
it helps on in helps on Jack like less

00:13:11.429 --> 00:13:11.439
it helps on in helps on Jack like less
 

00:13:11.439 --> 00:13:13.559
it helps on in helps on Jack like less
code gets compiled the things that we

00:13:13.559 --> 00:13:13.569
code gets compiled the things that we
 

00:13:13.569 --> 00:13:16.829
code gets compiled the things that we
care about gets optimized so the UI

00:13:16.829 --> 00:13:16.839
care about gets optimized so the UI
 

00:13:16.839 --> 00:13:20.880
care about gets optimized so the UI
thread needs to run less code

00:13:20.880 --> 00:13:20.890
thread needs to run less code
 

00:13:20.890 --> 00:13:23.920
thread needs to run less code
it helps an application startup because

00:13:23.920 --> 00:13:23.930
it helps an application startup because
 

00:13:23.930 --> 00:13:26.320
it helps an application startup because
we can profile the application we're

00:13:26.320 --> 00:13:26.330
we can profile the application we're
 

00:13:26.330 --> 00:13:29.530
we can profile the application we're
able to know what matters at startup so

00:13:29.530 --> 00:13:29.540
able to know what matters at startup so
 

00:13:29.540 --> 00:13:32.830
able to know what matters at startup so
that we when we recompile the app we

00:13:32.830 --> 00:13:32.840
that we when we recompile the app we
 

00:13:32.840 --> 00:13:34.540
that we when we recompile the app we
will compile it with optimizations that

00:13:34.540 --> 00:13:34.550
will compile it with optimizations that
 

00:13:34.550 --> 00:13:38.650
will compile it with optimizations that
optimize startup you'll have some

00:13:38.650 --> 00:13:38.660
optimize startup you'll have some
 

00:13:38.660 --> 00:13:41.650
optimize startup you'll have some
battery again we're saving under the

00:13:41.650 --> 00:13:41.660
battery again we're saving under the
 

00:13:41.660 --> 00:13:45.240
battery again we're saving under the
amount of things we're interpreting

00:13:45.240 --> 00:13:45.250
amount of things we're interpreting
 

00:13:45.250 --> 00:13:47.980
amount of things we're interpreting
it'll have some disk space because

00:13:47.980 --> 00:13:47.990
it'll have some disk space because
 

00:13:47.990 --> 00:13:49.900
it'll have some disk space because
instead of compiling the entire app

00:13:49.900 --> 00:13:49.910
instead of compiling the entire app
 

00:13:49.910 --> 00:13:52.990
instead of compiling the entire app
which was which was was what lollipop

00:13:52.990 --> 00:13:53.000
which was which was was what lollipop
 

00:13:53.000 --> 00:13:55.480
which was which was was what lollipop
was doing now we're only compiling the

00:13:55.480 --> 00:13:55.490
was doing now we're only compiling the
 

00:13:55.490 --> 00:13:57.970
was doing now we're only compiling the
hot parts of an app that's probably like

00:13:57.970 --> 00:13:57.980
hot parts of an app that's probably like
 

00:13:57.980 --> 00:14:02.110
hot parts of an app that's probably like
10 to 20% of the decks code so 80% just

00:14:02.110 --> 00:14:02.120
10 to 20% of the decks code so 80% just
 

00:14:02.120 --> 00:14:03.880
10 to 20% of the decks code so 80% just
doesn't get compiled that's a lot of

00:14:03.880 --> 00:14:03.890
doesn't get compiled that's a lot of
 

00:14:03.890 --> 00:14:08.620
doesn't get compiled that's a lot of
savings seems on RAM having a current

00:14:08.620 --> 00:14:08.630
savings seems on RAM having a current
 

00:14:08.630 --> 00:14:10.860
savings seems on RAM having a current
GCE means we can do a lot more

00:14:10.860 --> 00:14:10.870
GCE means we can do a lot more
 

00:14:10.870 --> 00:14:13.390
GCE means we can do a lot more
fragmentation of the heaps of every app

00:14:13.390 --> 00:14:13.400
fragmentation of the heaps of every app
 

00:14:13.400 --> 00:14:15.880
fragmentation of the heaps of every app
so we save that on the fragmentation

00:14:15.880 --> 00:14:15.890
so we save that on the fragmentation
 

00:14:15.890 --> 00:14:20.890
so we save that on the fragmentation
that we had in a previous GC profile

00:14:20.890 --> 00:14:20.900
that we had in a previous GC profile
 

00:14:20.900 --> 00:14:22.570
that we had in a previous GC profile
compilation also helped a lot on boot

00:14:22.570 --> 00:14:22.580
compilation also helped a lot on boot
 

00:14:22.580 --> 00:14:25.470
compilation also helped a lot on boot
times remember the optimizing apps I log

00:14:25.470 --> 00:14:25.480
times remember the optimizing apps I log
 

00:14:25.480 --> 00:14:27.490
times remember the optimizing apps I log
or that's the reason we were able to

00:14:27.490 --> 00:14:27.500
or that's the reason we were able to
 

00:14:27.500 --> 00:14:30.520
or that's the reason we were able to
remove it now we didn't need to a ot

00:14:30.520 --> 00:14:30.530
remove it now we didn't need to a ot
 

00:14:30.530 --> 00:14:34.030
remove it now we didn't need to a ot
compiled at boot all of the apps to make

00:14:34.030 --> 00:14:34.040
compiled at boot all of the apps to make
 

00:14:34.040 --> 00:14:35.770
compiled at boot all of the apps to make
sure the device was reasonable in

00:14:35.770 --> 00:14:35.780
sure the device was reasonable in
 

00:14:35.780 --> 00:14:38.680
sure the device was reasonable in
performance we were we were able to just

00:14:38.680 --> 00:14:38.690
performance we were we were able to just
 

00:14:38.690 --> 00:14:41.590
performance we were we were able to just
okay we take a load ta we're gonna get

00:14:41.590 --> 00:14:41.600
okay we take a load ta we're gonna get
 

00:14:41.600 --> 00:14:43.090
okay we take a load ta we're gonna get
all the app so we don't need to compile

00:14:43.090 --> 00:14:43.100
all the app so we don't need to compile
 

00:14:43.100 --> 00:14:45.340
all the app so we don't need to compile
at boot we're gonna jet when the user

00:14:45.340 --> 00:14:45.350
at boot we're gonna jet when the user
 

00:14:45.350 --> 00:14:48.100
at boot we're gonna jet when the user
wants it and then eventually we're gonna

00:14:48.100 --> 00:14:48.110
wants it and then eventually we're gonna
 

00:14:48.110 --> 00:14:49.750
wants it and then eventually we're gonna
do profile guided compilation of the

00:14:49.750 --> 00:14:49.760
do profile guided compilation of the
 

00:14:49.760 --> 00:14:52.570
do profile guided compilation of the
apps when the user is not using its

00:14:52.570 --> 00:14:52.580
apps when the user is not using its
 

00:14:52.580 --> 00:14:56.440
apps when the user is not using its
phone and then finally it helping

00:14:56.440 --> 00:14:56.450
phone and then finally it helping
 

00:14:56.450 --> 00:14:58.810
phone and then finally it helping
install times because instead of waiting

00:14:58.810 --> 00:14:58.820
install times because instead of waiting
 

00:14:58.820 --> 00:15:00.670
install times because instead of waiting
for the compiler to compile the entire

00:15:00.670 --> 00:15:00.680
for the compiler to compile the entire
 

00:15:00.680 --> 00:15:03.010
for the compiler to compile the entire
app when you install now we didn't

00:15:03.010 --> 00:15:03.020
app when you install now we didn't
 

00:15:03.020 --> 00:15:03.940
app when you install now we didn't
compile at all

00:15:03.940 --> 00:15:03.950
compile at all
 

00:15:03.950 --> 00:15:05.380
compile at all
we'll just rely on the JIT the first

00:15:05.380 --> 00:15:05.390
we'll just rely on the JIT the first
 

00:15:05.390 --> 00:15:11.900
we'll just rely on the JIT the first
time the app was being used

00:15:11.900 --> 00:15:11.910
 
 

00:15:11.910 --> 00:15:14.360
 
and lastly I wanted to mention PI

00:15:14.360 --> 00:15:14.370
and lastly I wanted to mention PI
 

00:15:14.370 --> 00:15:18.350
and lastly I wanted to mention PI
because the the time we develop I was

00:15:18.350 --> 00:15:18.360
because the the time we develop I was
 

00:15:18.360 --> 00:15:20.110
because the the time we develop I was
kind of at the same time of Android go

00:15:20.110 --> 00:15:20.120
kind of at the same time of Android go
 

00:15:20.120 --> 00:15:22.790
kind of at the same time of Android go
and then it goes a great effort in the a

00:15:22.790 --> 00:15:22.800
and then it goes a great effort in the a
 

00:15:22.800 --> 00:15:26.840
and then it goes a great effort in the a
droid platform and for that we the work

00:15:26.840 --> 00:15:26.850
droid platform and for that we the work
 

00:15:26.850 --> 00:15:29.930
droid platform and for that we the work
we did was mostly to save on disk space

00:15:29.930 --> 00:15:29.940
we did was mostly to save on disk space
 

00:15:29.940 --> 00:15:32.660
we did was mostly to save on disk space
and RAM because Android goes like 512 to

00:15:32.660 --> 00:15:32.670
and RAM because Android goes like 512 to
 

00:15:32.670 --> 00:15:35.960
and RAM because Android goes like 512 to
a Giga bit of memory and for 8 gigs of

00:15:35.960 --> 00:15:35.970
a Giga bit of memory and for 8 gigs of
 

00:15:35.970 --> 00:15:39.080
a Giga bit of memory and for 8 gigs of
this space so most of our efforts were

00:15:39.080 --> 00:15:39.090
this space so most of our efforts were
 

00:15:39.090 --> 00:15:42.200
this space so most of our efforts were
focused on improving lamb and also

00:15:42.200 --> 00:15:42.210
focused on improving lamb and also
 

00:15:42.210 --> 00:15:45.830
focused on improving lamb and also
improving disk space so in that release

00:15:45.830 --> 00:15:45.840
improving disk space so in that release
 

00:15:45.840 --> 00:15:47.510
improving disk space so in that release
we introduced compact decks

00:15:47.510 --> 00:15:47.520
we introduced compact decks
 

00:15:47.520 --> 00:15:51.500
we introduced compact decks
which is like a compact version of the

00:15:51.500 --> 00:15:51.510
which is like a compact version of the
 

00:15:51.510 --> 00:15:54.130
which is like a compact version of the
text format which saves on RAM because

00:15:54.130 --> 00:15:54.140
text format which saves on RAM because
 

00:15:54.140 --> 00:15:57.740
text format which saves on RAM because
just the less you need to put into the

00:15:57.740 --> 00:15:57.750
just the less you need to put into the
 

00:15:57.750 --> 00:16:00.110
just the less you need to put into the
memory of the Dex code the more you're

00:16:00.110 --> 00:16:00.120
memory of the Dex code the more you're
 

00:16:00.120 --> 00:16:06.980
memory of the Dex code the more you're
saving obviously also when the apk has

00:16:06.980 --> 00:16:06.990
saving obviously also when the apk has
 

00:16:06.990 --> 00:16:12.460
saving obviously also when the apk has
uncompressed text in stored we will not

00:16:12.460 --> 00:16:12.470
uncompressed text in stored we will not
 

00:16:12.470 --> 00:16:16.910
uncompressed text in stored we will not
uncompress it on disk so before we

00:16:16.910 --> 00:16:16.920
uncompress it on disk so before we
 

00:16:16.920 --> 00:16:20.240
uncompress it on disk so before we
before we used to uncompress it to do

00:16:20.240 --> 00:16:20.250
before we used to uncompress it to do
 

00:16:20.250 --> 00:16:22.220
before we used to uncompress it to do
optimizations on the text file which we

00:16:22.220 --> 00:16:22.230
optimizations on the text file which we
 

00:16:22.230 --> 00:16:23.840
optimizations on the text file which we
cannot do in the apk because the apk is

00:16:23.840 --> 00:16:23.850
cannot do in the apk because the apk is
 

00:16:23.850 --> 00:16:27.860
cannot do in the apk because the apk is
signed so we aren't we before PI we are

00:16:27.860 --> 00:16:27.870
signed so we aren't we before PI we are
 

00:16:27.870 --> 00:16:29.990
signed so we aren't we before PI we are
compress it do some optimizations and

00:16:29.990 --> 00:16:30.000
compress it do some optimizations and
 

00:16:30.000 --> 00:16:32.540
compress it do some optimizations and
rely on them on the first few iterations

00:16:32.540 --> 00:16:32.550
rely on them on the first few iterations
 

00:16:32.550 --> 00:16:35.410
rely on them on the first few iterations
before we do profile gate compilation

00:16:35.410 --> 00:16:35.420
before we do profile gate compilation
 

00:16:35.420 --> 00:16:38.020
before we do profile gate compilation
now we give the option up to the

00:16:38.020 --> 00:16:38.030
now we give the option up to the
 

00:16:38.030 --> 00:16:41.450
now we give the option up to the
developer if the developer wants to save

00:16:41.450 --> 00:16:41.460
developer if the developer wants to save
 

00:16:41.460 --> 00:16:43.940
developer if the developer wants to save
on disk space then put the Dex file

00:16:43.940 --> 00:16:43.950
on disk space then put the Dex file
 

00:16:43.950 --> 00:16:46.490
on disk space then put the Dex file
uncompressed in dpk which means we're

00:16:46.490 --> 00:16:46.500
uncompressed in dpk which means we're
 

00:16:46.500 --> 00:16:48.620
uncompressed in dpk which means we're
not gonna uncompress it on device will

00:16:48.620 --> 00:16:48.630
not gonna uncompress it on device will
 

00:16:48.630 --> 00:16:50.150
not gonna uncompress it on device will
have just one version of the text code

00:16:50.150 --> 00:16:50.160
have just one version of the text code
 

00:16:50.160 --> 00:16:53.180
have just one version of the text code
and not a compressed version apk an

00:16:53.180 --> 00:16:53.190
and not a compressed version apk an
 

00:16:53.190 --> 00:17:00.620
and not a compressed version apk an
uncompressed one on disk alright that

00:17:00.620 --> 00:17:00.630
uncompressed one on disk alright that
 

00:17:00.630 --> 00:17:03.530
uncompressed one on disk alright that
was a lot of optimizations I wanted to

00:17:03.530 --> 00:17:03.540
was a lot of optimizations I wanted to
 

00:17:03.540 --> 00:17:07.520
was a lot of optimizations I wanted to
focus on one which is raw execution

00:17:07.520 --> 00:17:07.530
focus on one which is raw execution
 

00:17:07.530 --> 00:17:10.189
focus on one which is raw execution
performance because what you saw this

00:17:10.189 --> 00:17:10.199
performance because what you saw this
 

00:17:10.199 --> 00:17:12.020
performance because what you saw this
morning was pretty cool with the 18x but

00:17:12.020 --> 00:17:12.030
morning was pretty cool with the 18x but
 

00:17:12.030 --> 00:17:13.630
morning was pretty cool with the 18x but
this is even cooler

00:17:13.630 --> 00:17:13.640
this is even cooler
 

00:17:13.640 --> 00:17:18.410
this is even cooler
so obviously the faster are at once the

00:17:18.410 --> 00:17:18.420
so obviously the faster are at once the
 

00:17:18.420 --> 00:17:19.640
so obviously the faster are at once the
more we're sitting on battery an

00:17:19.640 --> 00:17:19.650
more we're sitting on battery an
 

00:17:19.650 --> 00:17:22.069
more we're sitting on battery an
application startup and make the UI

00:17:22.069 --> 00:17:22.079
application startup and make the UI
 

00:17:22.079 --> 00:17:24.710
application startup and make the UI
smooth so it really matters all the

00:17:24.710 --> 00:17:24.720
smooth so it really matters all the
 

00:17:24.720 --> 00:17:27.990
smooth so it really matters all the
optimizations we do

00:17:27.990 --> 00:17:28.000
 
 

00:17:28.000 --> 00:17:31.299
 
and over the releases we've gotten up

00:17:31.299 --> 00:17:31.309
and over the releases we've gotten up
 

00:17:31.309 --> 00:17:33.430
and over the releases we've gotten up
improving the performance by looking at

00:17:33.430 --> 00:17:33.440
improving the performance by looking at
 

00:17:33.440 --> 00:17:35.379
improving the performance by looking at
actual applications in this case it's

00:17:35.379 --> 00:17:35.389
actual applications in this case it's
 

00:17:35.389 --> 00:17:38.799
actual applications in this case it's
the Google sheets and every release we

00:17:38.799 --> 00:17:38.809
the Google sheets and every release we
 

00:17:38.809 --> 00:17:40.029
the Google sheets and every release we
worked on like okay how do we improve

00:17:40.029 --> 00:17:40.039
worked on like okay how do we improve
 

00:17:40.039 --> 00:17:42.190
worked on like okay how do we improve
the Google sheets app and the Google

00:17:42.190 --> 00:17:42.200
the Google sheets app and the Google
 

00:17:42.200 --> 00:17:43.690
the Google sheets app and the Google
sheets app or the Google sheets team

00:17:43.690 --> 00:17:43.700
sheets app or the Google sheets team
 

00:17:43.700 --> 00:17:46.120
sheets app or the Google sheets team
helped us build benchmarks that show

00:17:46.120 --> 00:17:46.130
helped us build benchmarks that show
 

00:17:46.130 --> 00:17:48.639
helped us build benchmarks that show
like how long it takes to do sheet

00:17:48.639 --> 00:17:48.649
like how long it takes to do sheet
 

00:17:48.649 --> 00:17:55.539
like how long it takes to do sheet
manipulation here higher is better Blue

00:17:55.539 --> 00:17:55.549
manipulation here higher is better Blue
 

00:17:55.549 --> 00:18:00.100
manipulation here higher is better Blue
is dalvik and that's a score of 1 so we

00:18:00.100 --> 00:18:00.110
is dalvik and that's a score of 1 so we
 

00:18:00.110 --> 00:18:01.269
is dalvik and that's a score of 1 so we
make it relative to dalvik the

00:18:01.269 --> 00:18:01.279
make it relative to dalvik the
 

00:18:01.279 --> 00:18:04.240
make it relative to dalvik the
performance readies lollipop so that's

00:18:04.240 --> 00:18:04.250
performance readies lollipop so that's
 

00:18:04.250 --> 00:18:06.580
performance readies lollipop so that's
when we introduced art and then yellow

00:18:06.580 --> 00:18:06.590
when we introduced art and then yellow
 

00:18:06.590 --> 00:18:10.779
when we introduced art and then yellow
is today and you can see that we went

00:18:10.779 --> 00:18:10.789
is today and you can see that we went
 

00:18:10.789 --> 00:18:12.970
is today and you can see that we went
from around like a 4x improvement when

00:18:12.970 --> 00:18:12.980
from around like a 4x improvement when
 

00:18:12.980 --> 00:18:15.850
from around like a 4x improvement when
we moved to art in lollipop to like an

00:18:15.850 --> 00:18:15.860
we moved to art in lollipop to like an
 

00:18:15.860 --> 00:18:19.629
we moved to art in lollipop to like an
average of 10x today and even 226 X on

00:18:19.629 --> 00:18:19.639
average of 10x today and even 226 X on
 

00:18:19.639 --> 00:18:23.620
average of 10x today and even 226 X on
one benchmark so we're pretty happy with

00:18:23.620 --> 00:18:23.630
one benchmark so we're pretty happy with
 

00:18:23.630 --> 00:18:28.120
one benchmark so we're pretty happy with
those numbers but we we just didn't look

00:18:28.120 --> 00:18:28.130
those numbers but we we just didn't look
 

00:18:28.130 --> 00:18:30.519
those numbers but we we just didn't look
just at Sheetz we try to also look at

00:18:30.519 --> 00:18:30.529
just at Sheetz we try to also look at
 

00:18:30.529 --> 00:18:33.009
just at Sheetz we try to also look at
what what happens to what happened to

00:18:33.009 --> 00:18:33.019
what what happens to what happened to
 

00:18:33.019 --> 00:18:36.909
what what happens to what happened to
other apps so a couple of years ago we

00:18:36.909 --> 00:18:36.919
other apps so a couple of years ago we
 

00:18:36.919 --> 00:18:39.039
other apps so a couple of years ago we
also look we also worked with the chrome

00:18:39.039 --> 00:18:39.049
also look we also worked with the chrome
 

00:18:39.049 --> 00:18:42.460
also look we also worked with the chrome
team and YouTube team to look at what

00:18:42.460 --> 00:18:42.470
team and YouTube team to look at what
 

00:18:42.470 --> 00:18:45.639
team and YouTube team to look at what
they think we should optimize and there

00:18:45.639 --> 00:18:45.649
they think we should optimize and there
 

00:18:45.649 --> 00:18:47.169
they think we should optimize and there
again like after the fact even though we

00:18:47.169 --> 00:18:47.179
again like after the fact even though we
 

00:18:47.179 --> 00:18:48.370
again like after the fact even though we
were not focused on optimizing those

00:18:48.370 --> 00:18:48.380
were not focused on optimizing those
 

00:18:48.380 --> 00:18:52.840
were not focused on optimizing those
benchmarks we saw that we had this 4 to

00:18:52.840 --> 00:18:52.850
benchmarks we saw that we had this 4 to
 

00:18:52.850 --> 00:18:57.330
benchmarks we saw that we had this 4 to
6 X improvements with what we've done

00:18:57.330 --> 00:18:57.340
6 X improvements with what we've done
 

00:18:57.340 --> 00:18:59.980
6 X improvements with what we've done
so there's tweaks to examples is the

00:18:59.980 --> 00:18:59.990
so there's tweaks to examples is the
 

00:18:59.990 --> 00:19:02.620
so there's tweaks to examples is the
octan benchmarks that's the JavaScript

00:19:02.620 --> 00:19:02.630
octan benchmarks that's the JavaScript
 

00:19:02.630 --> 00:19:03.970
octan benchmarks that's the JavaScript
benchmark suite that we poured it for

00:19:03.970 --> 00:19:03.980
benchmark suite that we poured it for
 

00:19:03.980 --> 00:19:08.259
benchmark suite that we poured it for
our purposes that's Delta blue enrichers

00:19:08.259 --> 00:19:08.269
our purposes that's Delta blue enrichers
 

00:19:08.269 --> 00:19:14.049
our purposes that's Delta blue enrichers
and it's again 2 to 4 X 3.5 X for those

00:19:14.049 --> 00:19:14.059
and it's again 2 to 4 X 3.5 X for those
 

00:19:14.059 --> 00:19:19.690
and it's again 2 to 4 X 3.5 X for those
benchmarks up to 6 X 2 n PI and then

00:19:19.690 --> 00:19:19.700
benchmarks up to 6 X 2 n PI and then
 

00:19:19.700 --> 00:19:23.620
benchmarks up to 6 X 2 n PI and then
exoplayer that's the audio and video

00:19:23.620 --> 00:19:23.630
exoplayer that's the audio and video
 

00:19:23.630 --> 00:19:26.350
exoplayer that's the audio and video
processor driving the YouTube app on

00:19:26.350 --> 00:19:26.360
processor driving the YouTube app on
 

00:19:26.360 --> 00:19:31.299
processor driving the YouTube app on
Android well again around 2 X 4 the

00:19:31.299 --> 00:19:31.309
Android well again around 2 X 4 the
 

00:19:31.309 --> 00:19:33.850
Android well again around 2 X 4 the
introduction of art and then 4 X to the

00:19:33.850 --> 00:19:33.860
introduction of art and then 4 X to the
 

00:19:33.860 --> 00:19:37.450
introduction of art and then 4 X to the
n pi

00:19:37.450 --> 00:19:37.460
 
 

00:19:37.460 --> 00:19:39.190
 
and one hour while I have your attention

00:19:39.190 --> 00:19:39.200
and one hour while I have your attention
 

00:19:39.200 --> 00:19:43.150
and one hour while I have your attention
on performance I have a sameness called

00:19:43.150 --> 00:19:43.160
on performance I have a sameness called
 

00:19:43.160 --> 00:19:46.330
on performance I have a sameness called
to do we always super interested in

00:19:46.330 --> 00:19:46.340
to do we always super interested in
 

00:19:46.340 --> 00:19:47.350
to do we always super interested in
improving code that you think is

00:19:47.350 --> 00:19:47.360
improving code that you think is
 

00:19:47.360 --> 00:19:52.660
improving code that you think is
important so if on your side you'd like

00:19:52.660 --> 00:19:52.670
important so if on your side you'd like
 

00:19:52.670 --> 00:19:54.640
important so if on your side you'd like
us to show off how we improve

00:19:54.640 --> 00:19:54.650
us to show off how we improve
 

00:19:54.650 --> 00:19:57.520
us to show off how we improve
performance of your app please come talk

00:19:57.520 --> 00:19:57.530
performance of your app please come talk
 

00:19:57.530 --> 00:20:00.130
performance of your app please come talk
to us there's the office hours from 1:00

00:20:00.130 --> 00:20:00.140
to us there's the office hours from 1:00
 

00:20:00.140 --> 00:20:03.100
to us there's the office hours from 1:00
to 6:00 this afternoon and we would be

00:20:03.100 --> 00:20:03.110
to 6:00 this afternoon and we would be
 

00:20:03.110 --> 00:20:04.480
to 6:00 this afternoon and we would be
really interested in knowing what you

00:20:04.480 --> 00:20:04.490
really interested in knowing what you
 

00:20:04.490 --> 00:20:05.650
really interested in knowing what you
think we should care about for

00:20:05.650 --> 00:20:05.660
think we should care about for
 

00:20:05.660 --> 00:20:08.170
think we should care about for
performance and then we can show that

00:20:08.170 --> 00:20:08.180
performance and then we can show that
 

00:20:08.180 --> 00:20:15.400
performance and then we can show that
off here all right so the question then

00:20:15.400 --> 00:20:15.410
off here all right so the question then
 

00:20:15.410 --> 00:20:16.810
off here all right so the question then
is like how did we get this level of

00:20:16.810 --> 00:20:16.820
is like how did we get this level of
 

00:20:16.820 --> 00:20:22.360
is like how did we get this level of
improvements I mentioned our art now has

00:20:22.360 --> 00:20:22.370
improvements I mentioned our art now has
 

00:20:22.370 --> 00:20:24.430
improvements I mentioned our art now has
a modern compiler implemented

00:20:24.430 --> 00:20:24.440
a modern compiler implemented
 

00:20:24.440 --> 00:20:28.080
a modern compiler implemented
I call that SSA and thanks to that

00:20:28.080 --> 00:20:28.090
I call that SSA and thanks to that
 

00:20:28.090 --> 00:20:31.060
I call that SSA and thanks to that
modern like SSA compilation

00:20:31.060 --> 00:20:31.070
modern like SSA compilation
 

00:20:31.070 --> 00:20:33.580
modern like SSA compilation
there's a bunch of optimizations we're

00:20:33.580 --> 00:20:33.590
there's a bunch of optimizations we're
 

00:20:33.590 --> 00:20:36.400
there's a bunch of optimizations we're
able to do now if you know compiler

00:20:36.400 --> 00:20:36.410
able to do now if you know compiler
 

00:20:36.410 --> 00:20:38.760
able to do now if you know compiler
while you things who could look familiar

00:20:38.760 --> 00:20:38.770
while you things who could look familiar
 

00:20:38.770 --> 00:20:44.290
while you things who could look familiar
lining dead code elimination I'm not

00:20:44.290 --> 00:20:44.300
lining dead code elimination I'm not
 

00:20:44.300 --> 00:20:46.960
lining dead code elimination I'm not
going to go over all of them lucky you

00:20:46.960 --> 00:20:46.970
going to go over all of them lucky you
 

00:20:46.970 --> 00:20:50.470
going to go over all of them lucky you
but instead I'll focus on an example

00:20:50.470 --> 00:20:50.480
but instead I'll focus on an example
 

00:20:50.480 --> 00:20:52.360
but instead I'll focus on an example
that shows how those optimizations

00:20:52.360 --> 00:20:52.370
that shows how those optimizations
 

00:20:52.370 --> 00:20:55.630
that shows how those optimizations
matter especially for language like

00:20:55.630 --> 00:20:55.640
matter especially for language like
 

00:20:55.640 --> 00:20:57.880
matter especially for language like
Cortland that puts a lot more

00:20:57.880 --> 00:20:57.890
Cortland that puts a lot more
 

00:20:57.890 --> 00:21:00.460
Cortland that puts a lot more
abstractions to help the protective

00:21:00.460 --> 00:21:00.470
abstractions to help the protective
 

00:21:00.470 --> 00:21:03.580
abstractions to help the protective
productivity of the user but makes it

00:21:03.580 --> 00:21:03.590
productivity of the user but makes it
 

00:21:03.590 --> 00:21:05.710
productivity of the user but makes it
more challenging for the runtime to

00:21:05.710 --> 00:21:05.720
more challenging for the runtime to
 

00:21:05.720 --> 00:21:11.560
more challenging for the runtime to
optimize all right so let's take this

00:21:11.560 --> 00:21:11.570
optimize all right so let's take this
 

00:21:11.570 --> 00:21:15.970
optimize all right so let's take this
simple method very simple it takes a

00:21:15.970 --> 00:21:15.980
simple method very simple it takes a
 

00:21:15.980 --> 00:21:17.770
simple method very simple it takes a
function that takes one argument and

00:21:17.770 --> 00:21:17.780
function that takes one argument and
 

00:21:17.780 --> 00:21:23.350
function that takes one argument and
then returns the length when we run that

00:21:23.350 --> 00:21:23.360
then returns the length when we run that
 

00:21:23.360 --> 00:21:25.630
then returns the length when we run that
to through our Dexter

00:21:25.630 --> 00:21:25.640
to through our Dexter
 

00:21:25.640 --> 00:21:31.299
to through our Dexter
r8 or awesomely Dexter here's the code

00:21:31.299 --> 00:21:31.309
r8 or awesomely Dexter here's the code
 

00:21:31.309 --> 00:21:34.080
r8 or awesomely Dexter here's the code
you you get again pretty straightforward

00:21:34.080 --> 00:21:34.090
you you get again pretty straightforward
 

00:21:34.090 --> 00:21:36.669
you you get again pretty straightforward
even if you from not familiar with text

00:21:36.669 --> 00:21:36.679
even if you from not familiar with text
 

00:21:36.679 --> 00:21:41.040
even if you from not familiar with text
code like you create a string then

00:21:41.040 --> 00:21:41.050
code like you create a string then
 

00:21:41.050 --> 00:21:43.840
code like you create a string then
constantly having non liberal types

00:21:43.840 --> 00:21:43.850
constantly having non liberal types
 

00:21:43.850 --> 00:21:46.780
constantly having non liberal types
you'll make sure that the string the

00:21:46.780 --> 00:21:46.790
you'll make sure that the string the
 

00:21:46.790 --> 00:21:48.460
you'll make sure that the string the
string is not know when you get it

00:21:48.460 --> 00:21:48.470
string is not know when you get it
 

00:21:48.470 --> 00:21:50.419
string is not know when you get it
passed to the function so the

00:21:50.419 --> 00:21:50.429
passed to the function so the
 

00:21:50.429 --> 00:21:52.249
passed to the function so the
as this helper method hey check that

00:21:52.249 --> 00:21:52.259
as this helper method hey check that
 

00:21:52.259 --> 00:21:57.560
as this helper method hey check that
this parameter is not know then invoke

00:21:57.560 --> 00:21:57.570
this parameter is not know then invoke
 

00:21:57.570 --> 00:22:00.799
this parameter is not know then invoke
vo to all of the length method on the

00:22:00.799 --> 00:22:00.809
vo to all of the length method on the
 

00:22:00.809 --> 00:22:06.580
vo to all of the length method on the
argument and return that

00:22:06.580 --> 00:22:06.590
 
 

00:22:06.590 --> 00:22:10.039
 
: comes with the built-in library so

00:22:10.039 --> 00:22:10.049
: comes with the built-in library so
 

00:22:10.049 --> 00:22:10.879
: comes with the built-in library so
that's where you can find

00:22:10.879 --> 00:22:10.889
that's where you can find
 

00:22:10.889 --> 00:22:12.409
that's where you can find
implementations of those helper methods

00:22:12.409 --> 00:22:12.419
implementations of those helper methods
 

00:22:12.419 --> 00:22:14.629
implementations of those helper methods
and for that case it's only like a

00:22:14.629 --> 00:22:14.639
and for that case it's only like a
 

00:22:14.639 --> 00:22:16.609
and for that case it's only like a
simple message that will just okay these

00:22:16.609 --> 00:22:16.619
simple message that will just okay these
 

00:22:16.619 --> 00:22:20.080
simple message that will just okay these
arguments no yes then I will throw

00:22:20.080 --> 00:22:20.090
arguments no yes then I will throw
 

00:22:20.090 --> 00:22:23.600
arguments no yes then I will throw
calling another helper or I will just

00:22:23.600 --> 00:22:23.610
calling another helper or I will just
 

00:22:23.610 --> 00:22:28.930
calling another helper or I will just
return and return it back to the method

00:22:28.930 --> 00:22:28.940
 
 

00:22:28.940 --> 00:22:32.230
 
so method calls are pretty expensive so

00:22:32.230 --> 00:22:32.240
so method calls are pretty expensive so
 

00:22:32.240 --> 00:22:35.989
so method calls are pretty expensive so
the first thing that art will do is that

00:22:35.989 --> 00:22:35.999
the first thing that art will do is that
 

00:22:35.999 --> 00:22:37.940
the first thing that art will do is that
it will try to inline that very small

00:22:37.940 --> 00:22:37.950
it will try to inline that very small
 

00:22:37.950 --> 00:22:42.859
it will try to inline that very small
method within the caller here the

00:22:42.859 --> 00:22:42.869
method within the caller here the
 

00:22:42.869 --> 00:22:45.259
method within the caller here the
compiler is inline it at the place is

00:22:45.259 --> 00:22:45.269
compiler is inline it at the place is
 

00:22:45.269 --> 00:22:49.669
compiler is inline it at the place is
being called just for simplicity reason

00:22:49.669 --> 00:22:49.679
being called just for simplicity reason
 

00:22:49.679 --> 00:22:50.930
being called just for simplicity reason
this looks like Dex code it's actually

00:22:50.930 --> 00:22:50.940
this looks like Dex code it's actually
 

00:22:50.940 --> 00:22:53.090
this looks like Dex code it's actually
the intermediate format of the compiler

00:22:53.090 --> 00:22:53.100
the intermediate format of the compiler
 

00:22:53.100 --> 00:22:56.480
the intermediate format of the compiler
but I'm not gonna show that to you

00:22:56.480 --> 00:22:56.490
but I'm not gonna show that to you
 

00:22:56.490 --> 00:23:01.789
but I'm not gonna show that to you
so compiled code is being inlined which

00:23:01.789 --> 00:23:01.799
so compiled code is being inlined which
 

00:23:01.799 --> 00:23:05.210
so compiled code is being inlined which
helps on performance but there's more we

00:23:05.210 --> 00:23:05.220
helps on performance but there's more we
 

00:23:05.220 --> 00:23:08.629
helps on performance but there's more we
can do because the compiler sees our way

00:23:08.629 --> 00:23:08.639
can do because the compiler sees our way
 

00:23:08.639 --> 00:23:11.600
can do because the compiler sees our way
that throw parameters is non exception

00:23:11.600 --> 00:23:11.610
that throw parameters is non exception
 

00:23:11.610 --> 00:23:16.310
that throw parameters is non exception
call it actually always throws so

00:23:16.310 --> 00:23:16.320
call it actually always throws so
 

00:23:16.320 --> 00:23:17.960
call it actually always throws so
there's a few things I can do with that

00:23:17.960 --> 00:23:17.970
there's a few things I can do with that
 

00:23:17.970 --> 00:23:25.100
there's a few things I can do with that
information first one is called cone

00:23:25.100 --> 00:23:25.110
information first one is called cone
 

00:23:25.110 --> 00:23:28.340
information first one is called cone
layout where we're trying to put

00:23:28.340 --> 00:23:28.350
layout where we're trying to put
 

00:23:28.350 --> 00:23:30.970
layout where we're trying to put
together like the regular flow of the

00:23:30.970 --> 00:23:30.980
together like the regular flow of the
 

00:23:30.980 --> 00:23:35.930
together like the regular flow of the
method so things that really happen we

00:23:35.930 --> 00:23:35.940
method so things that really happen we
 

00:23:35.940 --> 00:23:37.430
method so things that really happen we
put that at the very end of the method

00:23:37.430 --> 00:23:37.440
put that at the very end of the method
 

00:23:37.440 --> 00:23:39.230
put that at the very end of the method
so it doesn't affect the flow of the

00:23:39.230 --> 00:23:39.240
so it doesn't affect the flow of the
 

00:23:39.240 --> 00:23:43.369
so it doesn't affect the flow of the
execution nifty trick right we just

00:23:43.369 --> 00:23:43.379
execution nifty trick right we just
 

00:23:43.379 --> 00:23:46.220
execution nifty trick right we just
return we just switched to comparison

00:23:46.220 --> 00:23:46.230
return we just switched to comparison
 

00:23:46.230 --> 00:23:49.430
return we just switched to comparison
from a I do not zero to R u zero and

00:23:49.430 --> 00:23:49.440
from a I do not zero to R u zero and
 

00:23:49.440 --> 00:23:50.749
from a I do not zero to R u zero and
then we jump to the end of the method

00:23:50.749 --> 00:23:50.759
then we jump to the end of the method
 

00:23:50.759 --> 00:23:55.039
then we jump to the end of the method
which is like hey so an exception so the

00:23:55.039 --> 00:23:55.049
which is like hey so an exception so the
 

00:23:55.049 --> 00:24:00.530
which is like hey so an exception so the
expensive jump is that other picture now

00:24:00.530 --> 00:24:00.540
 
 

00:24:00.540 --> 00:24:02.880
 
the second optimization is that we're

00:24:02.880 --> 00:24:02.890
the second optimization is that we're
 

00:24:02.890 --> 00:24:05.880
the second optimization is that we're
going to move things that hey the

00:24:05.880 --> 00:24:05.890
going to move things that hey the
 

00:24:05.890 --> 00:24:08.940
going to move things that hey the
regular flow doesn't care about in this

00:24:08.940 --> 00:24:08.950
regular flow doesn't care about in this
 

00:24:08.950 --> 00:24:14.210
regular flow doesn't care about in this
case let me just go back if I can yeah

00:24:14.210 --> 00:24:14.220
case let me just go back if I can yeah
 

00:24:14.220 --> 00:24:17.190
case let me just go back if I can yeah
in this case the construction of the

00:24:17.190 --> 00:24:17.200
in this case the construction of the
 

00:24:17.200 --> 00:24:20.390
in this case the construction of the
string that is being passed to the

00:24:20.390 --> 00:24:20.400
string that is being passed to the
 

00:24:20.400 --> 00:24:23.640
string that is being passed to the
helper was the first thing your executor

00:24:23.640 --> 00:24:23.650
helper was the first thing your executor
 

00:24:23.650 --> 00:24:25.830
helper was the first thing your executor
in the method but you only need that if

00:24:25.830 --> 00:24:25.840
in the method but you only need that if
 

00:24:25.840 --> 00:24:29.430
in the method but you only need that if
you end up calling the helper so we move

00:24:29.430 --> 00:24:29.440
you end up calling the helper so we move
 

00:24:29.440 --> 00:24:31.140
you end up calling the helper so we move
that construction of that string that

00:24:31.140 --> 00:24:31.150
that construction of that string that
 

00:24:31.150 --> 00:24:34.140
that construction of that string that
string right before the helper meaning

00:24:34.140 --> 00:24:34.150
string right before the helper meaning
 

00:24:34.150 --> 00:24:37.130
string right before the helper meaning
we don't need to execute anymore

00:24:37.130 --> 00:24:37.140
we don't need to execute anymore
 

00:24:37.140 --> 00:24:40.320
we don't need to execute anymore
so in the end we started from a method

00:24:40.320 --> 00:24:40.330
so in the end we started from a method
 

00:24:40.330 --> 00:24:43.200
so in the end we started from a method
that was like creating a string calling

00:24:43.200 --> 00:24:43.210
that was like creating a string calling
 

00:24:43.210 --> 00:24:45.360
that was like creating a string calling
your helper then doing its thing which

00:24:45.360 --> 00:24:45.370
your helper then doing its thing which
 

00:24:45.370 --> 00:24:48.090
your helper then doing its thing which
is returning the length to a master that

00:24:48.090 --> 00:24:48.100
is returning the length to a master that
 

00:24:48.100 --> 00:24:51.870
is returning the length to a master that
just like check if it's no if it is jump

00:24:51.870 --> 00:24:51.880
just like check if it's no if it is jump
 

00:24:51.880 --> 00:24:54.090
just like check if it's no if it is jump
to an expensive job somewhere if it's

00:24:54.090 --> 00:24:54.100
to an expensive job somewhere if it's
 

00:24:54.100 --> 00:24:56.430
to an expensive job somewhere if it's
not just continue the flow and easy and

00:24:56.430 --> 00:24:56.440
not just continue the flow and easy and
 

00:24:56.440 --> 00:24:59.520
not just continue the flow and easy and
return the length of the method the

00:24:59.520 --> 00:24:59.530
return the length of the method the
 

00:24:59.530 --> 00:25:06.510
return the length of the method the
length of the string sorry all right so

00:25:06.510 --> 00:25:06.520
length of the string sorry all right so
 

00:25:06.520 --> 00:25:10.200
length of the string sorry all right so
that was raw performance I have two

00:25:10.200 --> 00:25:10.210
that was raw performance I have two
 

00:25:10.210 --> 00:25:11.430
that was raw performance I have two
other things to talk about

00:25:11.430 --> 00:25:11.440
other things to talk about
 

00:25:11.440 --> 00:25:13.860
other things to talk about
actually just one because have talked

00:25:13.860 --> 00:25:13.870
actually just one because have talked
 

00:25:13.870 --> 00:25:15.690
actually just one because have talked
about application startup and garbage

00:25:15.690 --> 00:25:15.700
about application startup and garbage
 

00:25:15.700 --> 00:25:17.400
about application startup and garbage
production but I'm not going to redo the

00:25:17.400 --> 00:25:17.410
production but I'm not going to redo the
 

00:25:17.410 --> 00:25:20.190
production but I'm not going to redo the
garbage collection side chat and remount

00:25:20.190 --> 00:25:20.200
garbage collection side chat and remount
 

00:25:20.200 --> 00:25:24.750
garbage collection side chat and remount
it a great job this morning so with

00:25:24.750 --> 00:25:24.760
it a great job this morning so with
 

00:25:24.760 --> 00:25:27.690
it a great job this morning so with
application startup it's a it's been a

00:25:27.690 --> 00:25:27.700
application startup it's a it's been a
 

00:25:27.700 --> 00:25:30.690
application startup it's a it's been a
major focus since we introduced profile

00:25:30.690 --> 00:25:30.700
major focus since we introduced profile
 

00:25:30.700 --> 00:25:36.380
major focus since we introduced profile
compilation and that happened in nuga

00:25:36.380 --> 00:25:36.390
compilation and that happened in nuga
 

00:25:36.390 --> 00:25:39.560
compilation and that happened in nuga
profile guerrilla compilation is when

00:25:39.560 --> 00:25:39.570
profile guerrilla compilation is when
 

00:25:39.570 --> 00:25:43.590
profile guerrilla compilation is when
when the app is being installed we

00:25:43.590 --> 00:25:43.600
when the app is being installed we
 

00:25:43.600 --> 00:25:46.440
when the app is being installed we
compile it in a very quick way like

00:25:46.440 --> 00:25:46.450
compile it in a very quick way like
 

00:25:46.450 --> 00:25:49.500
compile it in a very quick way like
we're not going to generate not going

00:25:49.500 --> 00:25:49.510
we're not going to generate not going
 

00:25:49.510 --> 00:25:52.560
we're not going to generate not going
like full alt compilation going to do

00:25:52.560 --> 00:25:52.570
like full alt compilation going to do
 

00:25:52.570 --> 00:25:54.450
like full alt compilation going to do
very little optimizations that do not

00:25:54.450 --> 00:25:54.460
very little optimizations that do not
 

00:25:54.460 --> 00:25:56.700
very little optimizations that do not
affect install time so optimizing

00:25:56.700 --> 00:25:56.710
affect install time so optimizing
 

00:25:56.710 --> 00:25:58.470
affect install time so optimizing
install time so the app is being

00:25:58.470 --> 00:25:58.480
install time so the app is being
 

00:25:58.480 --> 00:26:01.650
install time so the app is being
installed then you run it the app is

00:26:01.650 --> 00:26:01.660
installed then you run it the app is
 

00:26:01.660 --> 00:26:03.300
installed then you run it the app is
being executed initially it gets

00:26:03.300 --> 00:26:03.310
being executed initially it gets
 

00:26:03.310 --> 00:26:06.000
being executed initially it gets
executed with interpretation and then

00:26:06.000 --> 00:26:06.010
executed with interpretation and then
 

00:26:06.010 --> 00:26:09.300
executed with interpretation and then
method gets hot and then JIT kicks in

00:26:09.300 --> 00:26:09.310
method gets hot and then JIT kicks in
 

00:26:09.310 --> 00:26:13.050
method gets hot and then JIT kicks in
and compare those hot methods

00:26:13.050 --> 00:26:13.060
 
 

00:26:13.060 --> 00:26:16.920
 
the JIT knows what those hot methods are

00:26:16.920 --> 00:26:16.930
the JIT knows what those hot methods are
 

00:26:16.930 --> 00:26:20.100
the JIT knows what those hot methods are
so we are going to dump to a profile

00:26:20.100 --> 00:26:20.110
so we are going to dump to a profile
 

00:26:20.110 --> 00:26:25.080
so we are going to dump to a profile
foul those hot methods so that when your

00:26:25.080 --> 00:26:25.090
foul those hot methods so that when your
 

00:26:25.090 --> 00:26:28.770
foul those hot methods so that when your
device is idle the user is not using it

00:26:28.770 --> 00:26:28.780
device is idle the user is not using it
 

00:26:28.780 --> 00:26:32.520
device is idle the user is not using it
it's charging 100% charge then we have

00:26:32.520 --> 00:26:32.530
it's charging 100% charge then we have
 

00:26:32.530 --> 00:26:35.540
it's charging 100% charge then we have
this what we call profile guided daemon

00:26:35.540 --> 00:26:35.550
this what we call profile guided daemon
 

00:26:35.550 --> 00:26:38.190
this what we call profile guided daemon
that will just like okay let me walk

00:26:38.190 --> 00:26:38.200
that will just like okay let me walk
 

00:26:38.200 --> 00:26:40.860
that will just like okay let me walk
over all the profiles and recompile the

00:26:40.860 --> 00:26:40.870
over all the profiles and recompile the
 

00:26:40.870 --> 00:26:45.510
over all the profiles and recompile the
app and compile them compiled only the

00:26:45.510 --> 00:26:45.520
app and compile them compiled only the
 

00:26:45.520 --> 00:26:47.550
app and compile them compiled only the
things that matter based on that profile

00:26:47.550 --> 00:26:47.560
things that matter based on that profile
 

00:26:47.560 --> 00:26:50.700
things that matter based on that profile
and you have like this virtuous loop

00:26:50.700 --> 00:26:50.710
and you have like this virtuous loop
 

00:26:50.710 --> 00:26:52.680
and you have like this virtuous loop
where the next time you run the app

00:26:52.680 --> 00:26:52.690
where the next time you run the app
 

00:26:52.690 --> 00:26:56.210
where the next time you run the app
that's we're gonna use that optimized

00:26:56.210 --> 00:26:56.220
that's we're gonna use that optimized
 

00:26:56.220 --> 00:26:59.310
that's we're gonna use that optimized
version of the compiled code and then

00:26:59.310 --> 00:26:59.320
version of the compiled code and then
 

00:26:59.320 --> 00:27:02.700
version of the compiled code and then
run it with what's got a o teed maybe

00:27:02.700 --> 00:27:02.710
run it with what's got a o teed maybe
 

00:27:02.710 --> 00:27:05.520
run it with what's got a o teed maybe
some methods got missed so will

00:27:05.520 --> 00:27:05.530
some methods got missed so will
 

00:27:05.530 --> 00:27:07.710
some methods got missed so will
interpret them they'll get hot will

00:27:07.710 --> 00:27:07.720
interpret them they'll get hot will
 

00:27:07.720 --> 00:27:09.930
interpret them they'll get hot will
cheat them will update the profile and

00:27:09.930 --> 00:27:09.940
cheat them will update the profile and
 

00:27:09.940 --> 00:27:13.650
cheat them will update the profile and
then again the demon kicks in say oh the

00:27:13.650 --> 00:27:13.660
then again the demon kicks in say oh the
 

00:27:13.660 --> 00:27:15.360
then again the demon kicks in say oh the
profile got updated let me recompile the

00:27:15.360 --> 00:27:15.370
profile got updated let me recompile the
 

00:27:15.370 --> 00:27:17.580
profile got updated let me recompile the
app so this is this virtuous loop of

00:27:17.580 --> 00:27:17.590
app so this is this virtuous loop of
 

00:27:17.590 --> 00:27:20.400
app so this is this virtuous loop of
like trying to be better and better over

00:27:20.400 --> 00:27:20.410
like trying to be better and better over
 

00:27:20.410 --> 00:27:26.040
like trying to be better and better over
time and why is that helping an

00:27:26.040 --> 00:27:26.050
time and why is that helping an
 

00:27:26.050 --> 00:27:28.440
time and why is that helping an
application startup well that's because

00:27:28.440 --> 00:27:28.450
application startup well that's because
 

00:27:28.450 --> 00:27:30.330
application startup well that's because
the the things we do when we compile the

00:27:30.330 --> 00:27:30.340
the the things we do when we compile the
 

00:27:30.340 --> 00:27:32.490
the the things we do when we compile the
app based low profile are really

00:27:32.490 --> 00:27:32.500
app based low profile are really
 

00:27:32.500 --> 00:27:35.280
app based low profile are really
optimized towards this we are only going

00:27:35.280 --> 00:27:35.290
optimized towards this we are only going
 

00:27:35.290 --> 00:27:37.580
optimized towards this we are only going
to compute sorry we're going to compile

00:27:37.580 --> 00:27:37.590
to compute sorry we're going to compile
 

00:27:37.590 --> 00:27:40.140
to compute sorry we're going to compile
startup methods so now no need to

00:27:40.140 --> 00:27:40.150
startup methods so now no need to
 

00:27:40.150 --> 00:27:42.030
startup methods so now no need to
interpret them things that get executed

00:27:42.030 --> 00:27:42.040
interpret them things that get executed
 

00:27:42.040 --> 00:27:48.000
interpret them things that get executed
at startup will get compiled we're going

00:27:48.000 --> 00:27:48.010
at startup will get compiled we're going
 

00:27:48.010 --> 00:27:50.970
at startup will get compiled we're going
to lay out the Dex and the compiled code

00:27:50.970 --> 00:27:50.980
to lay out the Dex and the compiled code
 

00:27:50.980 --> 00:27:53.850
to lay out the Dex and the compiled code
so things that execute our startup will

00:27:53.850 --> 00:27:53.860
so things that execute our startup will
 

00:27:53.860 --> 00:27:56.400
so things that execute our startup will
be next to each other so now we don't

00:27:56.400 --> 00:27:56.410
be next to each other so now we don't
 

00:27:56.410 --> 00:27:59.190
be next to each other so now we don't
need to jump over the entire Dex file to

00:27:59.190 --> 00:27:59.200
need to jump over the entire Dex file to
 

00:27:59.200 --> 00:28:01.920
need to jump over the entire Dex file to
actually get access to the method and

00:28:01.920 --> 00:28:01.930
actually get access to the method and
 

00:28:01.930 --> 00:28:04.260
actually get access to the method and
that's very important like I said ABS

00:28:04.260 --> 00:28:04.270
that's very important like I said ABS
 

00:28:04.270 --> 00:28:07.620
that's very important like I said ABS
got bigger so if you need to bring up

00:28:07.620 --> 00:28:07.630
got bigger so if you need to bring up
 

00:28:07.630 --> 00:28:09.690
got bigger so if you need to bring up
the entire text file just for start-up

00:28:09.690 --> 00:28:09.700
the entire text file just for start-up
 

00:28:09.700 --> 00:28:13.290
the entire text file just for start-up
that's a lot of time waiting on i/o so

00:28:13.290 --> 00:28:13.300
that's a lot of time waiting on i/o so
 

00:28:13.300 --> 00:28:14.640
that's a lot of time waiting on i/o so
we're trying to reduce that by putting

00:28:14.640 --> 00:28:14.650
we're trying to reduce that by putting
 

00:28:14.650 --> 00:28:16.980
we're trying to reduce that by putting
everything on startup at the beginning

00:28:16.980 --> 00:28:16.990
everything on startup at the beginning
 

00:28:16.990 --> 00:28:21.660
everything on startup at the beginning
and then the rest at the end

00:28:21.660 --> 00:28:21.670
 
 

00:28:21.670 --> 00:28:24.690
 
profile compilation also generates an

00:28:24.690 --> 00:28:24.700
profile compilation also generates an
 

00:28:24.700 --> 00:28:30.120
profile compilation also generates an
application image other runtimes will

00:28:30.120 --> 00:28:30.130
application image other runtimes will
 

00:28:30.130 --> 00:28:33.470
application image other runtimes will
call this a snapshot it's a

00:28:33.470 --> 00:28:33.480
call this a snapshot it's a
 

00:28:33.480 --> 00:28:37.620
call this a snapshot it's a
representation of Java classes that we

00:28:37.620 --> 00:28:37.630
representation of Java classes that we
 

00:28:37.630 --> 00:28:40.760
representation of Java classes that we
put in that image it's a file and that

00:28:40.760 --> 00:28:40.770
put in that image it's a file and that
 

00:28:40.770 --> 00:28:43.830
put in that image it's a file and that
avoids us to actually load the classes

00:28:43.830 --> 00:28:43.840
avoids us to actually load the classes
 

00:28:43.840 --> 00:28:46.740
avoids us to actually load the classes
at runtime again so there's this there's

00:28:46.740 --> 00:28:46.750
at runtime again so there's this there's
 

00:28:46.750 --> 00:28:49.620
at runtime again so there's this there's
this pre formatted number of classes

00:28:49.620 --> 00:28:49.630
this pre formatted number of classes
 

00:28:49.630 --> 00:28:53.430
this pre formatted number of classes
with a class order and when we start up

00:28:53.430 --> 00:28:53.440
with a class order and when we start up
 

00:28:53.440 --> 00:28:55.290
with a class order and when we start up
we just take the class order all the

00:28:55.290 --> 00:28:55.300
we just take the class order all the
 

00:28:55.300 --> 00:28:58.350
we just take the class order all the
classes are already populated and we're

00:28:58.350 --> 00:28:58.360
classes are already populated and we're
 

00:28:58.360 --> 00:29:00.390
classes are already populated and we're
done no need to do cut code class

00:29:00.390 --> 00:29:00.400
done no need to do cut code class
 

00:29:00.400 --> 00:29:04.230
done no need to do cut code class
learning anymore we also want to try to

00:29:04.230 --> 00:29:04.240
learning anymore we also want to try to
 

00:29:04.240 --> 00:29:07.380
learning anymore we also want to try to
pre initialize classes so Java has the

00:29:07.380 --> 00:29:07.390
pre initialize classes so Java has the
 

00:29:07.390 --> 00:29:09.210
pre initialize classes so Java has the
step of Lycos classes need to be

00:29:09.210 --> 00:29:09.220
step of Lycos classes need to be
 

00:29:09.220 --> 00:29:10.620
step of Lycos classes need to be
initialized before they need to be

00:29:10.620 --> 00:29:10.630
initialized before they need to be
 

00:29:10.630 --> 00:29:13.380
initialized before they need to be
executed so what we do during profile

00:29:13.380 --> 00:29:13.390
executed so what we do during profile
 

00:29:13.390 --> 00:29:15.210
executed so what we do during profile
compilation is that we're going to pre

00:29:15.210 --> 00:29:15.220
compilation is that we're going to pre
 

00:29:15.220 --> 00:29:17.850
compilation is that we're going to pre
initialize anything we can to avoid that

00:29:17.850 --> 00:29:17.860
initialize anything we can to avoid that
 

00:29:17.860 --> 00:29:22.250
initialize anything we can to avoid that
being executed when we start the app and

00:29:22.250 --> 00:29:22.260
being executed when we start the app and
 

00:29:22.260 --> 00:29:25.290
being executed when we start the app and
then finally I said when I got a

00:29:25.290 --> 00:29:25.300
then finally I said when I got a
 

00:29:25.300 --> 00:29:28.430
then finally I said when I got a
compiled code that doesn't get executed

00:29:28.430 --> 00:29:28.440
compiled code that doesn't get executed
 

00:29:28.440 --> 00:29:32.310
compiled code that doesn't get executed
that helps a lot because then your old

00:29:32.310 --> 00:29:32.320
that helps a lot because then your old
 

00:29:32.320 --> 00:29:34.740
that helps a lot because then your old
file is very small your sorry your

00:29:34.740 --> 00:29:34.750
file is very small your sorry your
 

00:29:34.750 --> 00:29:38.100
file is very small your sorry your
compiled file is very small so there's

00:29:38.100 --> 00:29:38.110
compiled file is very small so there's
 

00:29:38.110 --> 00:29:39.750
compiled file is very small so there's
not a lot you need to bring up in memory

00:29:39.750 --> 00:29:39.760
not a lot you need to bring up in memory
 

00:29:39.760 --> 00:29:47.370
not a lot you need to bring up in memory
to actually execute what do we gain from

00:29:47.370 --> 00:29:47.380
to actually execute what do we gain from
 

00:29:47.380 --> 00:29:52.050
to actually execute what do we gain from
all those optimizations where they can

00:29:52.050 --> 00:29:52.060
all those optimizations where they can
 

00:29:52.060 --> 00:29:54.900
all those optimizations where they can
be we always gain doing those

00:29:54.900 --> 00:29:54.910
be we always gain doing those
 

00:29:54.910 --> 00:29:57.090
be we always gain doing those
optimizations but depending on the app

00:29:57.090 --> 00:29:57.100
optimizations but depending on the app
 

00:29:57.100 --> 00:29:59.670
optimizations but depending on the app
that can be under at the ten percent or

00:29:59.670 --> 00:29:59.680
that can be under at the ten percent or
 

00:29:59.680 --> 00:30:03.270
that can be under at the ten percent or
30 percent and that's usually around how

00:30:03.270 --> 00:30:03.280
30 percent and that's usually around how
 

00:30:03.280 --> 00:30:04.860
30 percent and that's usually around how
many Java code

00:30:04.860 --> 00:30:04.870
many Java code
 

00:30:04.870 --> 00:30:08.030
many Java code
do you have when you start your app

00:30:08.030 --> 00:30:08.040
do you have when you start your app
 

00:30:08.040 --> 00:30:10.650
do you have when you start your app
typically camera has a lot of native

00:30:10.650 --> 00:30:10.660
typically camera has a lot of native
 

00:30:10.660 --> 00:30:12.720
typically camera has a lot of native
code so that's where it's on the low end

00:30:12.720 --> 00:30:12.730
code so that's where it's on the low end
 

00:30:12.730 --> 00:30:16.080
code so that's where it's on the low end
of like 10% improvement but in this

00:30:16.080 --> 00:30:16.090
of like 10% improvement but in this
 

00:30:16.090 --> 00:30:18.330
of like 10% improvement but in this
example you see dogs and maps which are

00:30:18.330 --> 00:30:18.340
example you see dogs and maps which are
 

00:30:18.340 --> 00:30:25.200
example you see dogs and maps which are
very Java heavy go from around 30% of AB

00:30:25.200 --> 00:30:25.210
very Java heavy go from around 30% of AB
 

00:30:25.210 --> 00:30:30.340
very Java heavy go from around 30% of AB
start up improvement

00:30:30.340 --> 00:30:30.350
 
 

00:30:30.350 --> 00:30:35.960
 
and this is numbers that we got from the

00:30:35.960 --> 00:30:35.970
and this is numbers that we got from the
 

00:30:35.970 --> 00:30:39.289
and this is numbers that we got from the
Maps team who got that from actual users

00:30:39.289 --> 00:30:39.299
Maps team who got that from actual users
 

00:30:39.299 --> 00:30:41.750
Maps team who got that from actual users
so actual data that comes from the field

00:30:41.750 --> 00:30:41.760
so actual data that comes from the field
 

00:30:41.760 --> 00:30:46.399
so actual data that comes from the field
and when it's the Maps team so like

00:30:46.399 --> 00:30:46.409
and when it's the Maps team so like
 

00:30:46.409 --> 00:30:49.210
and when it's the Maps team so like
graph they were like what is going on

00:30:49.210 --> 00:30:49.220
graph they were like what is going on
 

00:30:49.220 --> 00:30:53.960
graph they were like what is going on
how come I'd install things are around

00:30:53.960 --> 00:30:53.970
how come I'd install things are around
 

00:30:53.970 --> 00:30:59.060
how come I'd install things are around
like a one second of app startup to over

00:30:59.060 --> 00:30:59.070
like a one second of app startup to over
 

00:30:59.070 --> 00:31:00.769
like a one second of app startup to over
time as things get faster how does that

00:31:00.769 --> 00:31:00.779
time as things get faster how does that
 

00:31:00.779 --> 00:31:02.990
time as things get faster how does that
happen and every time the update the app

00:31:02.990 --> 00:31:03.000
happen and every time the update the app
 

00:31:03.000 --> 00:31:06.680
happen and every time the update the app
it's the same trend it starts pretty

00:31:06.680 --> 00:31:06.690
it's the same trend it starts pretty
 

00:31:06.690 --> 00:31:12.830
it's the same trend it starts pretty
high and then goes low and the answer is

00:31:12.830 --> 00:31:12.840
high and then goes low and the answer is
 

00:31:12.840 --> 00:31:15.259
high and then goes low and the answer is
profile computation here you're clearly

00:31:15.259 --> 00:31:15.269
profile computation here you're clearly
 

00:31:15.269 --> 00:31:22.480
profile computation here you're clearly
seeing that over time things get better

00:31:22.480 --> 00:31:22.490
 
 

00:31:22.490 --> 00:31:27.830
 
today in PI what we've talked about i/o

00:31:27.830 --> 00:31:27.840
today in PI what we've talked about i/o
 

00:31:27.840 --> 00:31:31.029
today in PI what we've talked about i/o
last year is the introduction of

00:31:31.029 --> 00:31:31.039
last year is the introduction of
 

00:31:31.039 --> 00:31:34.519
last year is the introduction of
profiles in the cloud and that's how

00:31:34.519 --> 00:31:34.529
profiles in the cloud and that's how
 

00:31:34.529 --> 00:31:40.250
profiles in the cloud and that's how
we're making the entire ecosystem send

00:31:40.250 --> 00:31:40.260
we're making the entire ecosystem send
 

00:31:40.260 --> 00:31:42.680
we're making the entire ecosystem send
us profiles like actual execution

00:31:42.680 --> 00:31:42.690
us profiles like actual execution
 

00:31:42.690 --> 00:31:46.879
us profiles like actual execution
profiles of users so that we can send

00:31:46.879 --> 00:31:46.889
profiles of users so that we can send
 

00:31:46.889 --> 00:31:50.060
profiles of users so that we can send
those profiles to new users of app so

00:31:50.060 --> 00:31:50.070
those profiles to new users of app so
 

00:31:50.070 --> 00:31:52.879
those profiles to new users of app so
they don't get this starts at one second

00:31:52.879 --> 00:31:52.889
they don't get this starts at one second
 

00:31:52.889 --> 00:31:57.169
they don't get this starts at one second
ends up at seven fifty milliseconds to

00:31:57.169 --> 00:31:57.179
ends up at seven fifty milliseconds to
 

00:31:57.179 --> 00:31:59.620
ends up at seven fifty milliseconds to
get the 750 million seconds right away

00:31:59.620 --> 00:31:59.630
get the 750 million seconds right away
 

00:31:59.630 --> 00:32:01.639
get the 750 million seconds right away
because they get the profile at the

00:32:01.639 --> 00:32:01.649
because they get the profile at the
 

00:32:01.649 --> 00:32:07.899
because they get the profile at the
point install

00:32:07.899 --> 00:32:07.909
 
 

00:32:07.909 --> 00:32:10.629
 
garbage collection like I said I'm not

00:32:10.629 --> 00:32:10.639
garbage collection like I said I'm not
 

00:32:10.639 --> 00:32:14.559
garbage collection like I said I'm not
going over them over it maybe I can just

00:32:14.559 --> 00:32:14.569
going over them over it maybe I can just
 

00:32:14.569 --> 00:32:19.779
going over them over it maybe I can just
put back a number that we're all very

00:32:19.779 --> 00:32:19.789
put back a number that we're all very
 

00:32:19.789 --> 00:32:26.769
put back a number that we're all very
proud of here we are

00:32:26.769 --> 00:32:26.779
proud of here we are
 

00:32:26.779 --> 00:32:31.629
proud of here we are
ah that's the last so this is resuming

00:32:31.629 --> 00:32:31.639
ah that's the last so this is resuming
 

00:32:31.639 --> 00:32:35.199
ah that's the last so this is resuming
what Chad talks about this morning it's

00:32:35.199 --> 00:32:35.209
what Chad talks about this morning it's
 

00:32:35.209 --> 00:32:37.469
what Chad talks about this morning it's
all the technology we've used over time

00:32:37.469 --> 00:32:37.479
all the technology we've used over time
 

00:32:37.479 --> 00:32:43.089
all the technology we've used over time
for building a GC so you see in KitKat

00:32:43.089 --> 00:32:43.099
for building a GC so you see in KitKat
 

00:32:43.099 --> 00:32:45.039
for building a GC so you see in KitKat
we had this what we call kirker

00:32:45.039 --> 00:32:45.049
we had this what we call kirker
 

00:32:45.049 --> 00:32:48.519
we had this what we call kirker
mark-sweep it was one part of the GC

00:32:48.519 --> 00:32:48.529
mark-sweep it was one part of the GC
 

00:32:48.529 --> 00:32:52.779
mark-sweep it was one part of the GC
that was concurrent and that stayed for

00:32:52.779 --> 00:32:52.789
that was concurrent and that stayed for
 

00:32:52.789 --> 00:32:55.329
that was concurrent and that stayed for
up until nuga in Oreo that's when we

00:32:55.329 --> 00:32:55.339
up until nuga in Oreo that's when we
 

00:32:55.339 --> 00:32:58.979
up until nuga in Oreo that's when we
introduced concurrent collector

00:32:58.979 --> 00:32:58.989
introduced concurrent collector
 

00:32:58.989 --> 00:33:01.029
introduced concurrent collector
allocation KitKat it was the main

00:33:01.029 --> 00:33:01.039
allocation KitKat it was the main
 

00:33:01.039 --> 00:33:03.609
allocation KitKat it was the main
bottleneck and it was single threaded so

00:33:03.609 --> 00:33:03.619
bottleneck and it was single threaded so
 

00:33:03.619 --> 00:33:05.649
bottleneck and it was single threaded so
need to lock to actually allocate

00:33:05.649 --> 00:33:05.659
need to lock to actually allocate
 

00:33:05.659 --> 00:33:09.879
need to lock to actually allocate
something the instructor introduction of

00:33:09.879 --> 00:33:09.889
something the instructor introduction of
 

00:33:09.889 --> 00:33:12.759
something the instructor introduction of
a new GC in lollipop meant that we could

00:33:12.759 --> 00:33:12.769
a new GC in lollipop meant that we could
 

00:33:12.769 --> 00:33:14.589
a new GC in lollipop meant that we could
allocate within the sweat and not need a

00:33:14.589 --> 00:33:14.599
allocate within the sweat and not need a
 

00:33:14.599 --> 00:33:16.629
allocate within the sweat and not need a
lock so that improve performance of

00:33:16.629 --> 00:33:16.639
lock so that improve performance of
 

00:33:16.639 --> 00:33:24.519
lock so that improve performance of
allocation the when you allocate objects

00:33:24.519 --> 00:33:24.529
allocation the when you allocate objects
 

00:33:24.529 --> 00:33:26.680
allocation the when you allocate objects
are short-lived right and that's the

00:33:26.680 --> 00:33:26.690
are short-lived right and that's the
 

00:33:26.690 --> 00:33:29.649
are short-lived right and that's the
motto of of Java it's like feel free to

00:33:29.649 --> 00:33:29.659
motto of of Java it's like feel free to
 

00:33:29.659 --> 00:33:31.149
motto of of Java it's like feel free to
allocate objects so one of our short

00:33:31.149 --> 00:33:31.159
allocate objects so one of our short
 

00:33:31.159 --> 00:33:33.869
allocate objects so one of our short
live will be remover to GC very quickly

00:33:33.869 --> 00:33:33.879
live will be remover to GC very quickly
 

00:33:33.879 --> 00:33:36.879
live will be remover to GC very quickly
but in KitKat in davic days I was not

00:33:36.879 --> 00:33:36.889
but in KitKat in davic days I was not
 

00:33:36.889 --> 00:33:39.279
but in KitKat in davic days I was not
the case it was you had you pay a very

00:33:39.279 --> 00:33:39.289
the case it was you had you pay a very
 

00:33:39.289 --> 00:33:42.729
the case it was you had you pay a very
high cost by allocating temporary

00:33:42.729 --> 00:33:42.739
high cost by allocating temporary
 

00:33:42.739 --> 00:33:47.889
high cost by allocating temporary
objects lollipop is when we introduce a

00:33:47.889 --> 00:33:47.899
objects lollipop is when we introduce a
 

00:33:47.899 --> 00:33:52.599
objects lollipop is when we introduce a
new GC and you didn't pay the cost at

00:33:52.599 --> 00:33:52.609
new GC and you didn't pay the cost at
 

00:33:52.609 --> 00:33:54.489
new GC and you didn't pay the cost at
all like allocating short-lived object

00:33:54.489 --> 00:33:54.499
all like allocating short-lived object
 

00:33:54.499 --> 00:33:56.680
all like allocating short-lived object
was we had generations so things were

00:33:56.680 --> 00:33:56.690
was we had generations so things were
 

00:33:56.690 --> 00:33:59.529
was we had generations so things were
removed pretty quickly there's an

00:33:59.529 --> 00:33:59.539
removed pretty quickly there's an
 

00:33:59.539 --> 00:34:02.469
removed pretty quickly there's an
asterisk for Oreo because when we

00:34:02.469 --> 00:34:02.479
asterisk for Oreo because when we
 

00:34:02.479 --> 00:34:06.579
asterisk for Oreo because when we
introduce concurrent collector we remove

00:34:06.579 --> 00:34:06.589
introduce concurrent collector we remove
 

00:34:06.589 --> 00:34:08.200
introduce concurrent collector we remove
the generations out of the of the

00:34:08.200 --> 00:34:08.210
the generations out of the of the
 

00:34:08.210 --> 00:34:12.249
the generations out of the of the
collector we're fixing that today it's

00:34:12.249 --> 00:34:12.259
collector we're fixing that today it's
 

00:34:12.259 --> 00:34:14.379
collector we're fixing that today it's
in the OSP the improvement of the GC

00:34:14.379 --> 00:34:14.389
in the OSP the improvement of the GC
 

00:34:14.389 --> 00:34:16.450
in the OSP the improvement of the GC
with generations so hopefully we'll be

00:34:16.450 --> 00:34:16.460
with generations so hopefully we'll be
 

00:34:16.460 --> 00:34:19.970
with generations so hopefully we'll be
there the device soon

00:34:19.970 --> 00:34:19.980
 
 

00:34:19.980 --> 00:34:23.480
 
and our fragmentation fragmentation is a

00:34:23.480 --> 00:34:23.490
and our fragmentation fragmentation is a
 

00:34:23.490 --> 00:34:27.290
and our fragmentation fragmentation is a
big problem in android because if you're

00:34:27.290 --> 00:34:27.300
big problem in android because if you're
 

00:34:27.300 --> 00:34:30.109
big problem in android because if you're
not able to allocate memory your app

00:34:30.109 --> 00:34:30.119
not able to allocate memory your app
 

00:34:30.119 --> 00:34:33.859
not able to allocate memory your app
will be killed so doing compaction of

00:34:33.859 --> 00:34:33.869
will be killed so doing compaction of
 

00:34:33.869 --> 00:34:36.649
will be killed so doing compaction of
the memory so that things are not

00:34:36.649 --> 00:34:36.659
the memory so that things are not
 

00:34:36.659 --> 00:34:38.980
the memory so that things are not
fragmented is super important

00:34:38.980 --> 00:34:38.990
fragmented is super important
 

00:34:38.990 --> 00:34:43.129
fragmented is super important
KitKat did a bit but very little in

00:34:43.129 --> 00:34:43.139
KitKat did a bit but very little in
 

00:34:43.139 --> 00:34:45.500
KitKat did a bit but very little in
lolly part of a marshmallow we were

00:34:45.500 --> 00:34:45.510
lolly part of a marshmallow we were
 

00:34:45.510 --> 00:34:46.790
lolly part of a marshmallow we were
doing it when the app was going

00:34:46.790 --> 00:34:46.800
doing it when the app was going
 

00:34:46.800 --> 00:34:48.109
doing it when the app was going
background so eventually we're

00:34:48.109 --> 00:34:48.119
background so eventually we're
 

00:34:48.119 --> 00:34:50.839
background so eventually we're
reclaiming the memory but Oreo is when

00:34:50.839 --> 00:34:50.849
reclaiming the memory but Oreo is when
 

00:34:50.849 --> 00:34:53.389
reclaiming the memory but Oreo is when
we made it like it's really important

00:34:53.389 --> 00:34:53.399
we made it like it's really important
 

00:34:53.399 --> 00:34:55.490
we made it like it's really important
that we compact all the time so that the

00:34:55.490 --> 00:34:55.500
that we compact all the time so that the
 

00:34:55.500 --> 00:34:58.180
that we compact all the time so that the
memory is there available all the time

00:34:58.180 --> 00:34:58.190
memory is there available all the time
 

00:34:58.190 --> 00:35:03.190
memory is there available all the time
and then the number I was looking for

00:35:03.190 --> 00:35:03.200
and then the number I was looking for
 

00:35:03.200 --> 00:35:06.890
and then the number I was looking for
allocation speed we went from a very low

00:35:06.890 --> 00:35:06.900
allocation speed we went from a very low
 

00:35:06.900 --> 00:35:10.060
allocation speed we went from a very low
number in dalvik to an 18 X improvement

00:35:10.060 --> 00:35:10.070
number in dalvik to an 18 X improvement
 

00:35:10.070 --> 00:35:18.650
number in dalvik to an 18 X improvement
in Oreo and Pi and it was thirsty the

00:35:18.650 --> 00:35:18.660
in Oreo and Pi and it was thirsty the
 

00:35:18.660 --> 00:35:22.450
in Oreo and Pi and it was thirsty the
reasons we the reasons it got improved

00:35:22.450 --> 00:35:22.460
reasons we the reasons it got improved
 

00:35:22.460 --> 00:35:24.770
reasons we the reasons it got improved
lollipop added a custom a locator I did

00:35:24.770 --> 00:35:24.780
lollipop added a custom a locator I did
 

00:35:24.780 --> 00:35:28.339
lollipop added a custom a locator I did
not need to lock that in marshmallow we

00:35:28.339 --> 00:35:28.349
not need to lock that in marshmallow we
 

00:35:28.349 --> 00:35:32.420
not need to lock that in marshmallow we
had fewer caste operations that atomic

00:35:32.420 --> 00:35:32.430
had fewer caste operations that atomic
 

00:35:32.430 --> 00:35:35.359
had fewer caste operations that atomic
operations that that have a cost but we

00:35:35.359 --> 00:35:35.369
operations that that have a cost but we
 

00:35:35.369 --> 00:35:37.190
operations that that have a cost but we
were able to remove a bit of them then

00:35:37.190 --> 00:35:37.200
were able to remove a bit of them then
 

00:35:37.200 --> 00:35:39.410
were able to remove a bit of them then
all of that all of that implementation

00:35:39.410 --> 00:35:39.420
all of that all of that implementation
 

00:35:39.420 --> 00:35:41.480
all of that all of that implementation
of the allocation path was moved to

00:35:41.480 --> 00:35:41.490
of the allocation path was moved to
 

00:35:41.490 --> 00:35:44.510
of the allocation path was moved to
assembly code in nuga which made things

00:35:44.510 --> 00:35:44.520
assembly code in nuga which made things
 

00:35:44.520 --> 00:35:47.270
assembly code in nuga which made things
even faster and then finally in android

00:35:47.270 --> 00:35:47.280
even faster and then finally in android
 

00:35:47.280 --> 00:35:50.440
even faster and then finally in android
oreo we ever we implemented bomb pointer

00:35:50.440 --> 00:35:50.450
oreo we ever we implemented bomb pointer
 

00:35:50.450 --> 00:35:52.579
oreo we ever we implemented bomb pointer
allocation which meant the only thing

00:35:52.579 --> 00:35:52.589
allocation which meant the only thing
 

00:35:52.589 --> 00:35:54.500
allocation which meant the only thing
you do when you allocate is increment

00:35:54.500 --> 00:35:54.510
you do when you allocate is increment
 

00:35:54.510 --> 00:36:00.700
you do when you allocate is increment
increment a pointer all right with that

00:36:00.700 --> 00:36:00.710
increment a pointer all right with that
 

00:36:00.710 --> 00:36:03.890
increment a pointer all right with that
this is the recommendation that Chet has

00:36:03.890 --> 00:36:03.900
this is the recommendation that Chet has
 

00:36:03.900 --> 00:36:07.339
this is the recommendation that Chet has
and that comes from us so I'll give the

00:36:07.339 --> 00:36:07.349
and that comes from us so I'll give the
 

00:36:07.349 --> 00:36:14.480
and that comes from us so I'll give the
same creating garbage is okay today you

00:36:14.480 --> 00:36:14.490
same creating garbage is okay today you
 

00:36:14.490 --> 00:36:16.220
same creating garbage is okay today you
can use a type and allocate objects you

00:36:16.220 --> 00:36:16.230
can use a type and allocate objects you
 

00:36:16.230 --> 00:36:23.150
can use a type and allocate objects you
need GC is still overhead so be mindful

00:36:23.150 --> 00:36:23.160
need GC is still overhead so be mindful
 

00:36:23.160 --> 00:36:25.670
need GC is still overhead so be mindful
that if you allocate a lot of objects

00:36:25.670 --> 00:36:25.680
that if you allocate a lot of objects
 

00:36:25.680 --> 00:36:28.700
that if you allocate a lot of objects
and GC will need to run but it's less

00:36:28.700 --> 00:36:28.710
and GC will need to run but it's less
 

00:36:28.710 --> 00:36:35.340
and GC will need to run but it's less
less a problem since dalvik

00:36:35.340 --> 00:36:35.350
 
 

00:36:35.350 --> 00:36:39.450
 
and with that thank you

00:36:39.450 --> 00:36:39.460
and with that thank you
 

00:36:39.460 --> 00:36:43.190
and with that thank you
[Applause]

00:36:43.190 --> 00:36:43.200
 
 

00:36:43.200 --> 00:36:59.270
 
[Music]

