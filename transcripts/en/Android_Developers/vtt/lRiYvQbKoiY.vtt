WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.892
[MUSIC PLAYING]

00:00:07.049 --> 00:00:08.090
JEREMY WALKER: All right.

00:00:08.090 --> 00:00:09.760
Hi, my name's Jeremy Walker.

00:00:09.760 --> 00:00:12.620
I'm a developer platform
engineer here at Google.

00:00:12.620 --> 00:00:15.370
And I wanted to talk to
you a little bit about how

00:00:15.370 --> 00:00:18.520
I use Kotlin to make watch
face creation much easier

00:00:18.520 --> 00:00:21.220
on WEAR OS.

00:00:21.220 --> 00:00:23.400
So, watch faces are
kind of hard right now.

00:00:23.400 --> 00:00:26.350
And you have to write about
600 plus lines of code.

00:00:26.350 --> 00:00:29.760
It's not like a nice app you
do in Android or WEAR OS,

00:00:29.760 --> 00:00:34.420
where you can declare a lot
of the UI in an XML format.

00:00:34.420 --> 00:00:36.460
You actually have to
manually paint everything.

00:00:36.460 --> 00:00:38.230
And then you have to
include a bunch of code just

00:00:38.230 --> 00:00:39.813
to make sure when
your in ambient mode

00:00:39.813 --> 00:00:42.120
you're not hurting
the battery life.

00:00:42.120 --> 00:00:43.690
So, I was trying
to think of ways

00:00:43.690 --> 00:00:47.780
to improve this and last
year at I/O we announced

00:00:47.780 --> 00:00:49.080
official support for Kotlin.

00:00:49.080 --> 00:00:50.496
So I started
thinking, how could I

00:00:50.496 --> 00:00:52.150
use Kotlin to make this easier?

00:00:52.150 --> 00:00:53.770
And I did convert
the whole thing

00:00:53.770 --> 00:00:57.430
to Kotlin, which did reduce
the code lines a lot.

00:00:57.430 --> 00:01:00.160
But I found something
else with Kotlin

00:01:00.160 --> 00:01:01.490
that made it even more cool.

00:01:01.490 --> 00:01:03.820
And that was
something called DSL.

00:01:03.820 --> 00:01:06.750
So, what is Kotlin DSL?

00:01:06.750 --> 00:01:10.192
The best way to understand what
a domain specific language is,

00:01:10.192 --> 00:01:14.110
is to compare it to a
regular programming language.

00:01:14.110 --> 00:01:16.790
So, again, domain
specific language.

00:01:16.790 --> 00:01:19.091
That, for me,
didn't really help.

00:01:19.091 --> 00:01:21.340
But, if you compare it to,
like, a general programming

00:01:21.340 --> 00:01:22.930
language like Kotlin
or Java, where

00:01:22.930 --> 00:01:25.310
you have a bunch of keywords,
you have classes, methods,

00:01:25.310 --> 00:01:29.710
and you make a nice big app,
the opposite, on the other side,

00:01:29.710 --> 00:01:33.130
is the DSL, which focuses on
a specific task or domain.

00:01:33.130 --> 00:01:36.080
So, it forgoes a
lot of functionality

00:01:36.080 --> 00:01:38.350
and lets you just do
that specific task.

00:01:38.350 --> 00:01:40.810
You've actually probably used
external DSL and not even

00:01:40.810 --> 00:01:41.770
realized it.

00:01:41.770 --> 00:01:43.150
For example, SQL.

00:01:43.150 --> 00:01:44.800
For manipulating databases.

00:01:44.800 --> 00:01:46.180
That's a DSL.

00:01:46.180 --> 00:01:49.290
So, it's regular expressions
for manipulating strings.

00:01:49.290 --> 00:01:51.940
So, they each have an
independent syntax.

00:01:51.940 --> 00:01:53.770
They reduce a lot
of functionality.

00:01:53.770 --> 00:01:57.835
You don't need, like, methods
or a class to make them work.

00:01:57.835 --> 00:02:00.460
You're not going to write a full
on application in them either.

00:02:00.460 --> 00:02:03.570
At least, I hope not.

00:02:03.570 --> 00:02:05.084
For SQL, the first
keyword kind of

00:02:05.084 --> 00:02:07.000
indicates, as a verb,
what you're going to do.

00:02:07.000 --> 00:02:09.457
Maybe you're going to Select
or you're going to Update.

00:02:09.457 --> 00:02:11.290
The disadvantage here,
as you probably know,

00:02:11.290 --> 00:02:13.430
is you have to put that
as a string literal.

00:02:13.430 --> 00:02:16.360
So, you have to pray and hope
that you spelled everything

00:02:16.360 --> 00:02:18.610
right until runtime
and then maybe it fails

00:02:18.610 --> 00:02:21.350
and you have to hack through it
and figure out what's going on.

00:02:21.350 --> 00:02:24.604
So, with Kotlin DSL it actually
extracts that out of the string

00:02:24.604 --> 00:02:26.020
and it puts it
right in your code.

00:02:26.020 --> 00:02:27.940
You can have type
checking, you can

00:02:27.940 --> 00:02:30.370
have code hints, and
all that good stuff

00:02:30.370 --> 00:02:32.860
that comes with your IDE.

00:02:32.860 --> 00:02:35.680
So, now that you kind of
have an idea of what it is,

00:02:35.680 --> 00:02:38.420
I'd like to show you two
structures really quick.

00:02:38.420 --> 00:02:39.910
And I use the
latter, but there's

00:02:39.910 --> 00:02:43.210
one called "chained
method calls,"

00:02:43.210 --> 00:02:44.980
and the other one is
"nesting of lambdas."

00:02:44.980 --> 00:02:48.384
So, recognizing DSL
is really subjective.

00:02:48.384 --> 00:02:49.550
You know it when you see it.

00:02:49.550 --> 00:02:51.270
So, let's see some.

00:02:51.270 --> 00:02:55.430
So, this is Kotlin DSL for SQL.

00:02:55.430 --> 00:02:57.850
You could probably look at
it, and if you know SQL,

00:02:57.850 --> 00:02:59.550
you can understand
it right away.

00:02:59.550 --> 00:03:02.220
And it's all verbs like
Slice, and then I Select All,

00:03:02.220 --> 00:03:04.900
and then I Group By, then I
Order By, and then I Limit.

00:03:04.900 --> 00:03:07.960
And this is all type checked
and you get code hinting,

00:03:07.960 --> 00:03:09.699
so you don't spell
anything wrong.

00:03:09.699 --> 00:03:11.740
And this is pretty great
and it's understandable.

00:03:11.740 --> 00:03:12.850
This is DSL.

00:03:12.850 --> 00:03:15.640
But the DSL for the watch
face, which I really liked,

00:03:15.640 --> 00:03:17.630
was a "nested lambda" structure.

00:03:17.630 --> 00:03:20.080
So, this is to
create a watch face.

00:03:20.080 --> 00:03:22.540
You can see right away, Create
A Watch Face is the verb.

00:03:22.540 --> 00:03:25.474
But if you look at my structure,
you don't know anything--

00:03:25.474 --> 00:03:27.640
you may not know anything
about making a watch face.

00:03:27.640 --> 00:03:30.200
But you can probably understand
what's going on right away.

00:03:30.200 --> 00:03:31.240
Analog watch face.

00:03:31.240 --> 00:03:33.520
OK, it's not digital
so it has arms.

00:03:33.520 --> 00:03:34.057
Colors.

00:03:34.057 --> 00:03:35.140
OK, I can figure that out.

00:03:35.140 --> 00:03:38.044
The dimensions for the hand,
the hour hand, the minute hand,

00:03:38.044 --> 00:03:38.710
the second hand.

00:03:38.710 --> 00:03:40.110
OK, I understand that.

00:03:40.110 --> 00:03:41.930
Watch face background image.

00:03:41.930 --> 00:03:42.760
So, that's all.

00:03:42.760 --> 00:03:43.760
It's very declarative.

00:03:43.760 --> 00:03:45.490
So you can kind of
understand right away.

00:03:45.490 --> 00:03:48.310
And this is all type
checked and I get code hints

00:03:48.310 --> 00:03:49.750
and all that good stuff.

00:03:49.750 --> 00:03:52.900
And in the end I get this nice
little watch face with no work.

00:03:52.900 --> 00:03:54.790
Now the 600 lines, they
didn't all go away.

00:03:54.790 --> 00:03:57.070
I put them in a helper
class and combined it

00:03:57.070 --> 00:03:58.630
with the more important class.

00:03:58.630 --> 00:04:00.610
It interprets this DSL.

00:04:00.610 --> 00:04:02.320
But if you're
making a watch face

00:04:02.320 --> 00:04:05.530
you only need to
know about the DSL.

00:04:05.530 --> 00:04:08.120
So, what's next?

00:04:08.120 --> 00:04:10.207
This is kind of an experiment
I did as a code lab.

00:04:10.207 --> 00:04:11.290
So check out the code lab.

00:04:11.290 --> 00:04:13.623
It'll only take you 15 minutes
to make a new watch face.

00:04:13.623 --> 00:04:15.369
Just search for
Kotlin watch face code

00:04:15.369 --> 00:04:16.660
lab-- jeez, that's really long.

00:04:16.660 --> 00:04:18.630
Just search for Google code lab.

00:04:18.630 --> 00:04:21.639
And it's under the WEAR
OS, or search under Kotlin.

00:04:21.639 --> 00:04:23.180
You can see how to
make a watch face.

00:04:23.180 --> 00:04:24.640
And you can see the code--

00:04:24.640 --> 00:04:28.300
the source code for how I made
the transition between DSL

00:04:28.300 --> 00:04:31.110
and interpreted it into
a nice little watch face.

00:04:31.110 --> 00:04:32.980
But more importantly,
hopefully now you're

00:04:32.980 --> 00:04:34.669
a little bit interested
in DSL and say,

00:04:34.669 --> 00:04:36.460
hey, I could use this
in one of my projects

00:04:36.460 --> 00:04:37.960
to make it a little bit better.

00:04:37.960 --> 00:04:41.210
Or you can go out and use
something like the DSL for SQL.

00:04:41.210 --> 00:04:42.310
There's one for testing.

00:04:42.310 --> 00:04:43.840
And one that's more
similar to mine.

00:04:43.840 --> 00:04:47.470
You can even do HDML in your
Kotlin coding, type checked.

00:04:47.470 --> 00:04:49.780
Which is kind of what
I modeled mine after.

00:04:49.780 --> 00:04:51.514
So, thank you for the talk--

00:04:51.514 --> 00:04:52.180
letting me talk.

00:04:52.180 --> 00:04:53.860
And hopefully I've
kind of got you

00:04:53.860 --> 00:04:55.690
a little bit interested in DSL.

00:04:55.690 --> 00:04:56.320
Thank you.

00:04:56.320 --> 00:04:57.820
[APPLAUSE]

00:04:57.820 --> 00:05:00.570
[MUSIC PLAYING]

