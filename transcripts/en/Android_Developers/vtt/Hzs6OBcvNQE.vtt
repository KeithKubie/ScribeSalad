WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.811
(music playing)

00:00:02.090 --> 00:00:05.400
One of the most common questions
we get about Android Performance

00:00:05.400 --> 00:00:07.510
is about using enums in your code.

00:00:07.510 --> 00:00:10.600
I mean, this question pops up
literally everywhere--

00:00:10.600 --> 00:00:14.050
on Stack Overflow,
on our Q&amp;A after our talks,

00:00:14.050 --> 00:00:17.814
and even during casual lunches
at the local food court.

00:00:18.650 --> 00:00:21.630
Anyhow, my name is Colt McAnlis,
and enums in your Android apps

00:00:21.630 --> 00:00:25.910
are both tricky and not so tricky,
which is why there's some confusion.

00:00:25.950 --> 00:00:29.920
But a little history here.
So back in 2009 there was a web page

00:00:29.920 --> 00:00:34.760
on developers.android.com that said to
avoid using enums for performance reasons.

00:00:34.870 --> 00:00:37.380
But then it mysteriously
disappeared for a while

00:00:37.380 --> 00:00:40.860
without really much explanation.
And then, of course, it came back later,

00:00:40.910 --> 00:00:44.620
but in a much smaller state.
So what's the story here?

00:00:44.640 --> 00:00:47.336
Well, the truth is a little bit nuanced
and has everything to do

00:00:47.336 --> 00:00:50.409
with the difference between performance
and memory bloat.

00:00:50.409 --> 00:00:52.850
See, when your app is loaded,
Android will set aside

00:00:52.850 --> 00:00:56.210
a section of system memory
just for your app.

00:00:56.210 --> 00:01:00.695
And in order for your app to run,
all of the DEX code for it

00:01:00.695 --> 00:01:03.480
is loaded into that subspace.
But, of course,

00:01:03.480 --> 00:01:07.420
this is ultimately shared with the rest
of the heap for any runtime allocations

00:01:07.420 --> 00:01:08.680
that your app will make.

00:01:08.680 --> 00:01:12.720
Thankfully, though, this doesn't contend
with your runtime allocations.

00:01:12.720 --> 00:01:15.760
However, it does put more
pressure on the system memory,

00:01:15.760 --> 00:01:17.460
which, of course, when memory gets low,

00:01:17.460 --> 00:01:21.180
could cause your app to get terminated
to free up space.

00:01:21.180 --> 00:01:25.710
So with that in mind, let's take a look at
the effect of enums on your application.

00:01:25.710 --> 00:01:31.530
Let's say we have a small base app here,
whose entire DEX footprint is 2,556 bytes.

00:01:31.530 --> 00:01:33.690
To this we add some integers

00:01:33.690 --> 00:01:37.290
that represent states that can be used
and returned for our system.

00:01:37.290 --> 00:01:41.680
After recompilation, the final DEX size
is 2,680 bytes,

00:01:41.680 --> 00:01:44.820
meaning that these integers
in terms of code size,

00:01:44.820 --> 00:01:48.750
have added an extra 124 bytes
to our base executable.

00:01:48.750 --> 00:01:52.380
Now, for comparison,
let's take the same base application,

00:01:52.380 --> 00:01:54.790
but implement it with enums
instead of integers.

00:01:54.790 --> 00:01:58.720
The result here
is a DEX file of 4,188 bytes.

00:01:58.720 --> 00:02:03.940
So, adding a single enum to this code
has added an extra 1,632 bytes

00:02:03.940 --> 00:02:08.300
to the final DEX size, or for those of you
who are super fancy with math,

00:02:08.300 --> 00:02:12.367
about 13x more memory
than the INT version.

00:02:12.367 --> 00:02:15.960
This, of course, bloats your DEX file,
which eats away at your heap space.

00:02:15.960 --> 00:02:19.250
If this isn't bad enough, though,
there's also the runtime memory overhead

00:02:19.250 --> 00:02:23.110
to be concerned with as well.
In general, each enum value declaration

00:02:23.180 --> 00:02:27.120
will cost you about 20 plus bytes.
Of course, plus there's the object array

00:02:27.120 --> 00:02:30.600
needed to keep track of the enum value,
so that's another 12 bytes

00:02:30.600 --> 00:02:33.860
for that header as well.
Well, it's 16 on Dalvik, by the way.

00:02:33.860 --> 00:02:38.620
Anyhow, this extra overhead is taken
by each enum declared in your code,

00:02:38.620 --> 00:02:42.850
meaning that the more enums in your app,
the more space will be eaten up.

00:02:42.860 --> 00:02:46.410
And this whole thing can get out of hand
easier than you might think.

00:02:46.440 --> 00:02:49.610
For example, if enums
are widely used across your application,

00:02:49.610 --> 00:02:51.200
or if they're inside of a library

00:02:51.200 --> 00:02:53.790
that's used by many applications
on the device,

00:02:53.790 --> 00:02:55.900
all of those small pieces of overhead

00:02:55.900 --> 00:02:59.099
quickly add up to a substantial amount.
And the worst part is

00:02:59.099 --> 00:03:01.870
that you don't really know
that enums are causing a problem

00:03:01.870 --> 00:03:04.060
until they're already infecting
your code base.

00:03:04.060 --> 00:03:07.680
And by that point, trying to fix it
is really a horrible process.

00:03:07.680 --> 00:03:11.260
Think of it this way-- enums are
kind of like gremlins, right?

00:03:11.260 --> 00:03:13.880
I mean, one or two by themselves,
not really a big deal.

00:03:13.880 --> 00:03:16.215
You could take them out
with a rolled-up newspaper

00:03:16.215 --> 00:03:19.831
or a baseball bat or a flamethrower
if you've got one of those laying around.

00:03:19.831 --> 00:03:22.580
But when you get a whole
bunch of them together,

00:03:22.580 --> 00:03:26.750
trouble really happens there,
and you wish you had the flamethrower.

00:03:26.770 --> 00:03:30.650
That's why the Core Platform Team,
the folks who write the Android code,

00:03:30.650 --> 00:03:34.180
have a strong recommendation
to avoid using enums

00:03:34.180 --> 00:03:35.840
in any part of the code they write.

00:03:35.840 --> 00:03:39.070
This allows them to be proactive
about the potential problems here

00:03:39.070 --> 00:03:41.087
rather than being reactive.

00:03:41.087 --> 00:03:43.680
With that in mind, here's a couple things
that you should consider

00:03:43.680 --> 00:03:45.180
to address the problem.

00:03:45.180 --> 00:03:48.060
Firstly, if you're using INTs for values
instead of enums,

00:03:48.060 --> 00:03:53.490
you can add @IntDef annotation to them,
which will give your code built time safety,

00:03:53.490 --> 00:03:56.490
when Lint errors are enabled,
while still retaining the size

00:03:56.490 --> 00:03:59.120
and performance benefits
of using INT variables.

00:03:59.120 --> 00:04:01.930
Basically, this allows you
to get the best of both worlds.

00:04:01.930 --> 00:04:04.570
And secondly, if your code
is set up the right way,

00:04:04.570 --> 00:04:09.000
Proguard can, in many situations,
optimize enums to INT values

00:04:09.000 --> 00:04:11.440
on your behalf, so you really
don't need to think about it

00:04:11.440 --> 00:04:14.495
or do any work,
which is one of the few places

00:04:14.495 --> 00:04:16.640
that you might get
performance wins for free.

00:04:16.640 --> 00:04:18.370
Most of the time you have to fight for it.

00:04:18.370 --> 00:04:21.840
Which is why you should check out the rest
of the Android Performance Patterns videos

00:04:21.840 --> 00:04:25.160
and stop by to ask some questions
at our Google+ Community, as well.

00:04:25.160 --> 00:04:28.900
Because you're not alone.
So keep calm, profile your-- oh, my god!

00:04:28.900 --> 00:04:31.770
(gremlin noises)

00:04:32.680 --> 00:04:36.410
(music playing)

