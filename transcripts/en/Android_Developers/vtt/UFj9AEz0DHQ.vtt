WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:10.980
[MUSIC PLAYING]

00:00:10.980 --> 00:00:11.480
Hi.

00:00:11.480 --> 00:00:14.021
My name is Lisa Wray, and I'm
on the Developer Relations team

00:00:14.021 --> 00:00:14.860
at Google.

00:00:14.860 --> 00:00:16.680
Today, I'm going to be talking
about the storage access

00:00:16.680 --> 00:00:17.560
framework in KitKat.

00:00:17.560 --> 00:00:20.680
Specifically, the
client app side.

00:00:20.680 --> 00:00:23.090
In our last episode about
the storage access framework,

00:00:23.090 --> 00:00:25.010
we saw the new
system documents UI

00:00:25.010 --> 00:00:26.890
that lets the user of
your app browse content

00:00:26.890 --> 00:00:29.009
from all apps on the device
that share documents.

00:00:29.009 --> 00:00:31.300
Today, we're going to walk
through how to launch the UI

00:00:31.300 --> 00:00:33.230
and how to handle the
results in your app.

00:00:33.230 --> 00:00:34.940
There's more to it
than there used to be.

00:00:34.940 --> 00:00:37.150
New in Android KitKat
are document editing,

00:00:37.150 --> 00:00:39.740
writing, and saving in
place, and document creation

00:00:39.740 --> 00:00:40.382
and deletion.

00:00:42.900 --> 00:00:44.570
Here's a quick
picture of the flow.

00:00:44.570 --> 00:00:46.630
As you can see, document
providers and clients

00:00:46.630 --> 00:00:48.940
don't interact directly,
just as before.

00:00:48.940 --> 00:00:51.460
A client requests permission
to interact with files, read,

00:00:51.460 --> 00:00:52.940
edit, create, et cetera.

00:00:52.940 --> 00:00:55.210
The system picker goes to
each registered provider

00:00:55.210 --> 00:00:57.420
and shows the user
the matching content.

00:00:57.420 --> 00:00:59.200
Finally, the user
selects a document,

00:00:59.200 --> 00:01:01.470
and the system grants the
client app permissions just

00:01:01.470 --> 00:01:04.420
for that URI.

00:01:04.420 --> 00:01:06.004
Let's talk about
ACTION_OPEN_DOCUMENT.

00:01:06.004 --> 00:01:08.545
This isn't much different than
what you may have done before.

00:01:08.545 --> 00:01:09.930
You're going to
create an intent.

00:01:09.930 --> 00:01:11.570
CATEGORY_OPENABLE
means we only want

00:01:11.570 --> 00:01:13.153
results that can be
opened-- basically

00:01:13.153 --> 00:01:16.460
documents-- as opposed to a
list of contacts or time zones.

00:01:16.460 --> 00:01:18.360
The type is the document
MIME type you want.

00:01:18.360 --> 00:01:20.580
Here, I'm asking for
any type of image.

00:01:20.580 --> 00:01:23.140
And then launch your
intent with a request code.

00:01:23.140 --> 00:01:24.780
This can be any value
you like, but it

00:01:24.780 --> 00:01:26.270
should be unique
within your app.

00:01:28.850 --> 00:01:31.020
And we've launched
the file picker.

00:01:31.020 --> 00:01:32.690
Next, the user
selects a document,

00:01:32.690 --> 00:01:33.900
and it's back to your app.

00:01:36.430 --> 00:01:39.020
Retrieving a URI is
also the same as before.

00:01:39.020 --> 00:01:41.270
We get a callback
in onActivityResult.

00:01:41.270 --> 00:01:43.130
We check the request
code matches,

00:01:43.130 --> 00:01:44.880
and the result came back OK.

00:01:44.880 --> 00:01:47.130
Now, we don't get back the
specific document directly,

00:01:47.130 --> 00:01:47.850
here.

00:01:47.850 --> 00:01:51.176
We get a URI pointing to
it using intent getData.

00:01:51.176 --> 00:01:53.800
If you've done this before with
the getContent or pick intents,

00:01:53.800 --> 00:01:55.850
nothing's changed.

00:01:55.850 --> 00:01:57.500
And this might
look familiar too.

00:01:57.500 --> 00:02:00.320
With a URI, we can get
metadata about the image.

00:02:00.320 --> 00:02:02.430
Here this query applies
to only one document,

00:02:02.430 --> 00:02:03.888
and we want all
the rows, so that's

00:02:03.888 --> 00:02:05.194
what all those nulls are for.

00:02:05.194 --> 00:02:06.860
Here I'm getting its
display name-- note

00:02:06.860 --> 00:02:10.500
that this is not the same as
its file name-- and its size.

00:02:10.500 --> 00:02:12.930
You can't count on getting a
reliable size for a document,

00:02:12.930 --> 00:02:14.730
because it might be stored
remotely, for example.

00:02:14.730 --> 00:02:16.771
So always check that it
isn't null before you try

00:02:16.771 --> 00:02:18.940
and get the size.

00:02:18.940 --> 00:02:20.000
But forget metadata.

00:02:20.000 --> 00:02:21.971
You probably want
to open this image.

00:02:21.971 --> 00:02:22.720
Here's a shortcut.

00:02:22.720 --> 00:02:25.440
You can use ContentResolver
openFileDescriptor.

00:02:25.440 --> 00:02:27.650
You pass in the URI and
the access mode you want,

00:02:27.650 --> 00:02:29.410
and you get back a
parcelFileDescriptor,

00:02:29.410 --> 00:02:31.564
which is a wrapper
around a FileDescriptor.

00:02:31.564 --> 00:02:32.980
For images, there's
a handy method

00:02:32.980 --> 00:02:35.480
in BitmapFactory,
decodeFileDescriptor.

00:02:35.480 --> 00:02:36.960
Don't do this on the UI thread.

00:02:36.960 --> 00:02:37.870
Do in the background.

00:02:37.870 --> 00:02:38.940
Use an async task.

00:02:38.940 --> 00:02:41.440
There's an example of this in
the storage client sample code

00:02:41.440 --> 00:02:42.430
that we're posting.

00:02:42.430 --> 00:02:45.230
And finally, it's best practice
to wrap the close in a try

00:02:45.230 --> 00:02:47.910
finally block, so it's
guaranteed to close.

00:02:47.910 --> 00:02:52.260
And then you can set this
image to an image view.

00:02:52.260 --> 00:02:53.075
And here it is.

00:02:56.000 --> 00:02:58.260
Now wait, you're saying, I
want to do something else,

00:02:58.260 --> 00:02:59.580
or I don't have an image.

00:02:59.580 --> 00:03:00.080
Easy.

00:03:00.080 --> 00:03:02.760
You can get an inputStream
from the ContentResolver

00:03:02.760 --> 00:03:04.330
and do whatever
you want with it.

00:03:04.330 --> 00:03:06.496
Here I'm reading the lines
of my file into a string.

00:03:11.090 --> 00:03:12.070
So here's a new one.

00:03:12.070 --> 00:03:13.680
We weren't able
to do this before.

00:03:13.680 --> 00:03:16.610
You can get an outputStream
from the ContentResolver.

00:03:16.610 --> 00:03:18.477
By default, it uses write mode.

00:03:18.477 --> 00:03:20.810
You want to ask for the least
amount of access you need,

00:03:20.810 --> 00:03:23.732
so don't ask for read/write
if all you need is write.

00:03:23.732 --> 00:03:25.690
When I'm done, I just
let the document provider

00:03:25.690 --> 00:03:27.680
know I'm done by closing
the stream, which

00:03:27.680 --> 00:03:28.830
you have to do anyway.

00:03:28.830 --> 00:03:29.330
Simple.

00:03:32.940 --> 00:03:34.664
So we could open
one document before.

00:03:34.664 --> 00:03:36.580
What about lots of
documents at the same time?

00:03:39.330 --> 00:03:41.460
All you have to do to let
the user select multiples

00:03:41.460 --> 00:03:44.410
is add EXTRA_ALLOW_MULTIPLE
to your intent.

00:03:44.410 --> 00:03:46.600
If you want, you can
specify multiple MIME types.

00:03:49.180 --> 00:03:50.840
This time we get back clip data.

00:03:50.840 --> 00:03:53.090
It's then stored in
intent getClipData,

00:03:53.090 --> 00:03:57.370
and you can get the URIs using
clipData getItems and then

00:03:57.370 --> 00:03:59.996
item getUri.

00:03:59.996 --> 00:04:01.370
Note that you
still have to check

00:04:01.370 --> 00:04:04.550
intent getData, the
same as a single URI,

00:04:04.550 --> 00:04:06.424
because if the user
picks just one document,

00:04:06.424 --> 00:04:08.590
it doesn't matter if you
allowed multiple selection,

00:04:08.590 --> 00:04:10.970
it's still coming back the
first way, in intent getData.

00:04:10.970 --> 00:04:12.053
So you have to check both.

00:04:15.170 --> 00:04:17.399
Creating a document is
also new in Android KitKat,

00:04:17.399 --> 00:04:18.829
and it's really straightforward.

00:04:18.829 --> 00:04:21.019
You give your intent a
MIME type, a file name,

00:04:21.019 --> 00:04:23.620
and you launch it with
a unique request code.

00:04:23.620 --> 00:04:25.572
The rest is taken
care of for you.

00:04:25.572 --> 00:04:28.684
You get back its URI in
onActivityResult, and that way,

00:04:28.684 --> 00:04:31.100
you can continue to write to
it or whatever else you want.

00:04:34.430 --> 00:04:36.670
And deleting a document
is even easier.

00:04:36.670 --> 00:04:38.670
You can't launch an intent
to delete a document,

00:04:38.670 --> 00:04:40.585
but if you have its
URI, which you would

00:04:40.585 --> 00:04:43.780
if you've opened or created it,
then you can ask to delete it,

00:04:43.780 --> 00:04:46.860
and DocumentsContract
does this for you.

00:04:46.860 --> 00:04:48.630
Again, in a document's
metadata, you

00:04:48.630 --> 00:04:51.830
can check document column flags.

00:04:51.830 --> 00:04:54.050
If that contains
support delete, you'll

00:04:54.050 --> 00:04:56.120
know whether to
enable or disable

00:04:56.120 --> 00:04:58.210
your Delete button
or Menu option.

00:05:01.780 --> 00:05:03.237
One more thing to mention.

00:05:03.237 --> 00:05:05.070
When you open a file
for reading or writing,

00:05:05.070 --> 00:05:08.380
the system gives you a URI
permission grant for that file.

00:05:08.380 --> 00:05:09.896
It lasts until your
device restarts.

00:05:09.896 --> 00:05:11.270
However, you might
want to access

00:05:11.270 --> 00:05:13.210
that file again directly
from your applications.

00:05:13.210 --> 00:05:14.876
Say you're an image
editing app, and you

00:05:14.876 --> 00:05:17.510
want to show the user the last
five images they've edited.

00:05:17.510 --> 00:05:19.370
If the device is turned
off in the meantime,

00:05:19.370 --> 00:05:20.990
you won't have access to those.

00:05:20.990 --> 00:05:23.380
You could send the user
back to the document picker,

00:05:23.380 --> 00:05:25.150
but that's far from ideal.

00:05:25.150 --> 00:05:27.740
Instead, you can
persist the permissions

00:05:27.740 --> 00:05:28.802
the system gave you.

00:05:28.802 --> 00:05:30.760
Now they'll last no matter
whether the phone is

00:05:30.760 --> 00:05:31.922
turned off or on.

00:05:31.922 --> 00:05:33.880
The system won't do this
automatically for you.

00:05:33.880 --> 00:05:35.540
Your app has to
explicitly request

00:05:35.540 --> 00:05:37.570
that the permissions
be persisted.

00:05:37.570 --> 00:05:40.067
This is a security measure,
though, so it's a good thing.

00:05:40.067 --> 00:05:40.650
One last note.

00:05:40.650 --> 00:05:43.610
You may have saved the most
recent URIs your app accessed,

00:05:43.610 --> 00:05:47.400
but you should still always use
 ContentResolver.getPersistedUriPermissions

00:05:47.400 --> 00:05:49.410
to check that you have
the freshest data.

00:05:49.410 --> 00:05:51.710
Other applications
could delete documents,

00:05:51.710 --> 00:05:53.510
apps could be removed,
so make this check

00:05:53.510 --> 00:05:55.740
to make sure your data's right.

00:05:55.740 --> 00:05:56.620
That's all for now.

00:05:56.620 --> 00:05:58.870
Hope you enjoyed learning
about the new storage access

00:05:58.870 --> 00:06:00.660
features in Android KitKat.

00:06:00.660 --> 00:06:03.950
Thanks for watching, and
happy document sharing.

