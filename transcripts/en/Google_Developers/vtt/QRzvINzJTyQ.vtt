WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.339
[MUSIC PLAYING]

00:00:04.308 --> 00:00:05.850
KEVIN NILSON: Good
morning, everyone,

00:00:05.850 --> 00:00:09.090
and welcome to Google I/O 2019.

00:00:09.090 --> 00:00:10.570
It's great to be
back on this stage

00:00:10.570 --> 00:00:12.910
again, here with all of you.

00:00:12.910 --> 00:00:15.720
And we're really excited
to tell all of you

00:00:15.720 --> 00:00:19.170
about what's new in
the Google Cast SDK.

00:00:19.170 --> 00:00:22.470
My name is Kevin, and I'm
the Global Head of Technical

00:00:22.470 --> 00:00:25.215
Solutions Engineering at Nest.

00:00:25.215 --> 00:00:26.590
JUNG-YU (GINA)
YEH: Hi, everyone.

00:00:26.590 --> 00:00:28.020
My name is Gina.

00:00:28.020 --> 00:00:30.630
I'm a Google Casting
Lead for Google Nest.

00:00:30.630 --> 00:00:33.960
My team and I support
external developers

00:00:33.960 --> 00:00:35.820
to build amazing cars apps.

00:00:38.437 --> 00:00:41.020
KEVIN NILSON: So before we begin
talking about the things that

00:00:41.020 --> 00:00:44.620
are new in Google Cast, I
want to give you a reminder

00:00:44.620 --> 00:00:48.460
and an overview of
where Cast began.

00:00:48.460 --> 00:00:52.420
So Google Cast began
over five years ago

00:00:52.420 --> 00:00:54.470
for the Chromecast device.

00:00:54.470 --> 00:00:58.270
And the way things worked was
you'd be looking at your phone,

00:00:58.270 --> 00:01:01.510
playing a piece of media,
watching that media.

00:01:01.510 --> 00:01:04.870
You look up, see a TV,
or see a large speaker

00:01:04.870 --> 00:01:08.260
with a TV with a Chromecast,
or a speaker with a Chromecast

00:01:08.260 --> 00:01:08.910
audio.

00:01:08.910 --> 00:01:12.790
Say, wow, I'd like to play
my content on that device.

00:01:12.790 --> 00:01:15.500
Then you look down at your
phone, see the Cast icon.

00:01:15.500 --> 00:01:20.170
Press the Cast icon, and
magically cast that media up

00:01:20.170 --> 00:01:22.880
into your TV or large speaker.

00:01:22.880 --> 00:01:24.580
And this gives a
great experience

00:01:24.580 --> 00:01:27.070
for the users where
they could expand--

00:01:27.070 --> 00:01:29.710
or cast-- what they
have at their phone

00:01:29.710 --> 00:01:33.550
up into their large displays
in their living room.

00:01:33.550 --> 00:01:36.460
This gave a really great
experience for everyone,

00:01:36.460 --> 00:01:39.010
was very, very simple,
and a lot of the things

00:01:39.010 --> 00:01:42.710
we're going to talk about
grow on top of that.

00:01:42.710 --> 00:01:47.060
Cast has grown from the
traditional Chromecast.

00:01:47.060 --> 00:01:50.360
The same code that you'll
write works on the Google Home

00:01:50.360 --> 00:01:53.210
devices, the smart
display devices,

00:01:53.210 --> 00:01:55.640
and continues to work on mobile.

00:01:55.640 --> 00:01:58.340
One of the nice things
is the Google Assistant

00:01:58.340 --> 00:02:02.150
can also be used to tie it
all together using your voice,

00:02:02.150 --> 00:02:06.170
making your voice a cinder
in the Cast ecosystem.

00:02:06.170 --> 00:02:09.680
For those of you developers,
Cast is a great platform

00:02:09.680 --> 00:02:12.860
because this code that
you'll write one time

00:02:12.860 --> 00:02:16.490
can be used on all of
these different platforms

00:02:16.490 --> 00:02:17.880
in our ecosystem.

00:02:17.880 --> 00:02:19.580
And so you write that
code once, and it

00:02:19.580 --> 00:02:22.160
runs on all these devices.

00:02:22.160 --> 00:02:28.400
Cast is a unique
technology that's actually

00:02:28.400 --> 00:02:31.760
based on Chromium, and
so the Cast receiver

00:02:31.760 --> 00:02:35.720
that's running in the
Chromecast or in the Google Home

00:02:35.720 --> 00:02:38.180
is actually chromium,
and it's a chrome base.

00:02:38.180 --> 00:02:40.680
And so for all the web
developers out there,

00:02:40.680 --> 00:02:45.140
this is a very, very convenient,
very simple-to-understand

00:02:45.140 --> 00:02:48.410
platform for developing
your applications.

00:02:48.410 --> 00:02:51.560
Videos are played in
an HTML5 video tag,

00:02:51.560 --> 00:02:55.670
and audio tag, CSS
and HTML are used

00:02:55.670 --> 00:02:58.790
for your theming and styling
within your application.

00:03:01.632 --> 00:03:03.340
JUNG-YU (GINA) YEH:
Last year, Chromecast

00:03:03.340 --> 00:03:05.650
celebrated its fifth birthday.

00:03:05.650 --> 00:03:08.680
Huge congratulations to
everyone who's working on

00:03:08.680 --> 00:03:11.860
Cast with us
throughout that time.

00:03:11.860 --> 00:03:15.010
Over the past five
years, Cast Playback

00:03:15.010 --> 00:03:18.400
has been continuously
growing, and we have seen

00:03:18.400 --> 00:03:21.100
a 40% of year-over-year growth.

00:03:23.900 --> 00:03:26.690
Before we jump into
the new features, let's

00:03:26.690 --> 00:03:31.340
quickly go through some commonly
used Cast terminologies.

00:03:31.340 --> 00:03:34.820
Google Cast is the technology.

00:03:34.820 --> 00:03:38.150
Chromecast, Google
Home, Google Nest Hub

00:03:38.150 --> 00:03:42.170
are devices that use
Google Cast technology.

00:03:42.170 --> 00:03:46.640
A sender app is an app running
on your mobile app running

00:03:46.640 --> 00:03:50.780
on your mobile phone or laptop
that connects to a Google Cast

00:03:50.780 --> 00:03:51.950
device.

00:03:51.950 --> 00:03:56.680
And your voice can be used as a
sender to control the playback.

00:03:56.680 --> 00:04:03.390
A receiver is an HTML
application running

00:04:03.390 --> 00:04:05.870
on a Google Cast device.

00:04:05.870 --> 00:04:09.875
Lastly, casting is the
act of streaming of media

00:04:09.875 --> 00:04:11.315
on a Google Cast device.

00:04:14.520 --> 00:04:16.769
KEVIN NILSON: Now, I want
to talk about our newest

00:04:16.769 --> 00:04:21.420
framework called CAF, and it's
the Cast application framework.

00:04:21.420 --> 00:04:23.640
But before I do that,
I want to step back

00:04:23.640 --> 00:04:25.350
in history a little bit.

00:04:25.350 --> 00:04:30.900
And six years ago, when we first
built an SDK for Chromecast,

00:04:30.900 --> 00:04:34.920
for Google Cast, and Chromecast,
when we built that SDK,

00:04:34.920 --> 00:04:38.700
we wanted to build something
that was extremely flexible

00:04:38.700 --> 00:04:42.780
and would let you build
any type of application,

00:04:42.780 --> 00:04:46.770
be it something for streaming
media such as video or audio,

00:04:46.770 --> 00:04:50.340
or be it a game, or
building dashboards.

00:04:50.340 --> 00:04:52.950
And this works
really great, and it

00:04:52.950 --> 00:04:56.040
allowed developers to
experiment and build

00:04:56.040 --> 00:04:57.588
a lot of great things.

00:04:57.588 --> 00:04:59.130
But one of the things
that we noticed

00:04:59.130 --> 00:05:04.860
was that it was extremely hard
to build a media application.

00:05:04.860 --> 00:05:07.140
And so what we did
a few years ago

00:05:07.140 --> 00:05:09.600
is we went out and built
the Cast application

00:05:09.600 --> 00:05:13.500
framework, which had the
goals of, rather than being

00:05:13.500 --> 00:05:16.710
a library, it could be used
like we previously had,

00:05:16.710 --> 00:05:19.140
making a framework
that was fully

00:05:19.140 --> 00:05:23.160
designed with the intention of
making it easy to build a media

00:05:23.160 --> 00:05:24.510
application.

00:05:24.510 --> 00:05:27.240
And that framework
handles all the UI

00:05:27.240 --> 00:05:30.510
about playing and
pausing, all the commands.

00:05:30.510 --> 00:05:33.390
It provides support for
things like voice control

00:05:33.390 --> 00:05:37.110
with a Google Assistant out of
the box with 0 lines of code

00:05:37.110 --> 00:05:38.250
additional.

00:05:38.250 --> 00:05:41.790
And so what I want
to do is tell you

00:05:41.790 --> 00:05:45.790
some of the key fundamentals
of CAF before we jump into it.

00:05:45.790 --> 00:05:47.820
When we went out
to build CAF, we

00:05:47.820 --> 00:05:50.790
wanted to build something
that was very simple,

00:05:50.790 --> 00:05:54.030
very, very simple for people
in building media applications

00:05:54.030 --> 00:05:56.250
while at the same
time not giving up

00:05:56.250 --> 00:05:58.260
on any of the flexibility.

00:05:58.260 --> 00:06:01.600
We wanted you not to have to
write very many lines of code.

00:06:01.600 --> 00:06:03.870
We wanted default
implementations

00:06:03.870 --> 00:06:07.830
that provided the behaviors
that you need within a media

00:06:07.830 --> 00:06:09.120
application.

00:06:09.120 --> 00:06:10.650
While at the same
time, we wanted

00:06:10.650 --> 00:06:13.710
you to be able to style and
theme that application so

00:06:13.710 --> 00:06:15.670
it feels like your own.

00:06:15.670 --> 00:06:19.200
And one of our main goals
was is that almost all

00:06:19.200 --> 00:06:23.130
of the code you write
is logic code that's

00:06:23.130 --> 00:06:27.030
specific to your application,
things like handling

00:06:27.030 --> 00:06:31.950
authorization, authentication,
making these decisions,

00:06:31.950 --> 00:06:35.340
you know, has your user paid for
their account, does your user

00:06:35.340 --> 00:06:38.130
have access to play
this particular content?

00:06:38.130 --> 00:06:42.390
Rather than dealing with things
like seeking and scrubbing

00:06:42.390 --> 00:06:46.290
within the videos, or
pausing, or showing metadata

00:06:46.290 --> 00:06:48.210
about what's
currently playing, we

00:06:48.210 --> 00:06:50.640
wanted to make all
that available for you

00:06:50.640 --> 00:06:51.990
with zero lines of code.

00:06:55.360 --> 00:06:58.320
So, before we jump
into the what's new,

00:06:58.320 --> 00:07:03.210
I want to give you an overview
of how to write a very, very

00:07:03.210 --> 00:07:07.440
simple CAF receiver because
we know that many of you

00:07:07.440 --> 00:07:12.276
have already migrated your
Android and iOS apps to CAF.

00:07:12.276 --> 00:07:16.440
But, today, a lot of the
last remaining features

00:07:16.440 --> 00:07:18.930
that are needed for a CAF
receiver we've actually

00:07:18.930 --> 00:07:20.560
launched a week ago.

00:07:20.560 --> 00:07:23.040
And so we know that
many of you are still

00:07:23.040 --> 00:07:26.260
in the process of migrating
to the CAF receiver.

00:07:26.260 --> 00:07:28.860
That's why I want to
give a quick overview.

00:07:28.860 --> 00:07:30.750
The first thing
you'll do is you'll

00:07:30.750 --> 00:07:34.230
add a custom element of
the Cast media player.

00:07:34.230 --> 00:07:36.180
The Cast media
player custom element

00:07:36.180 --> 00:07:38.310
is really where
all the magic is.

00:07:38.310 --> 00:07:43.100
This brings in all the UI
around the media playback

00:07:43.100 --> 00:07:46.680
and gives a very rich
media experiments.

00:07:46.680 --> 00:07:48.870
This expands out
with a shadow Dom

00:07:48.870 --> 00:07:51.360
to contain all the
different metadata, all

00:07:51.360 --> 00:07:54.810
the different states,
the ability for touch

00:07:54.810 --> 00:07:57.840
support in the smart
display devices.

00:07:57.840 --> 00:08:01.690
All of that comes with
just this one tag.

00:08:01.690 --> 00:08:03.820
The next thing you'll
do is add a script,

00:08:03.820 --> 00:08:05.560
adding the Cast
receiver framework

00:08:05.560 --> 00:08:07.280
into your application.

00:08:07.280 --> 00:08:10.180
And then finally, two lines
of code that you need to do

00:08:10.180 --> 00:08:12.790
is get an instance of
the Cast receiver context

00:08:12.790 --> 00:08:14.110
and then call start.

00:08:14.110 --> 00:08:16.820
This is really all
you need to do.

00:08:16.820 --> 00:08:20.830
But for many of you, one of
the things that's common to do

00:08:20.830 --> 00:08:23.590
is when you play a piece
of media or stream a piece

00:08:23.590 --> 00:08:26.470
of media to Cast
on a Cast receiver,

00:08:26.470 --> 00:08:30.310
you'll often pass across
some sort of identifier

00:08:30.310 --> 00:08:36.039
for that piece of media and then
later add additional metadata.

00:08:36.039 --> 00:08:39.130
And so here in this
example, I'm demonstrating

00:08:39.130 --> 00:08:43.240
how you can use a message
interceptor within your load

00:08:43.240 --> 00:08:45.530
request and the
load is the play.

00:08:45.530 --> 00:08:49.480
And so when a sender, be it
an Android device, an iPhone,

00:08:49.480 --> 00:08:52.750
possibly your voice, when a
sender sends across that load

00:08:52.750 --> 00:08:56.500
request, they'll
often pass an entity.

00:08:56.500 --> 00:08:59.110
And the entity is a
universal deep link

00:08:59.110 --> 00:09:03.070
that tells what is the content
that you would like to play.

00:09:03.070 --> 00:09:05.860
But it doesn't include
additional things

00:09:05.860 --> 00:09:09.250
such as the cover
art or the thumbnail,

00:09:09.250 --> 00:09:12.850
the duration, maybe the
type of content that it is--

00:09:12.850 --> 00:09:15.550
is it an audio content,
is it video content?

00:09:15.550 --> 00:09:19.030
And so often what will happen
is you'll load a piece of media

00:09:19.030 --> 00:09:21.940
with an entity that's a
universal deep link as you

00:09:21.940 --> 00:09:22.900
see here.

00:09:22.900 --> 00:09:26.590
And then in this example, I'm
making an API call into an API

00:09:26.590 --> 00:09:30.400
that I have around fetching
the additional metadata

00:09:30.400 --> 00:09:33.760
about that asset and
authorizing the user.

00:09:33.760 --> 00:09:36.730
Once I get that call
back here in the promise,

00:09:36.730 --> 00:09:39.250
we'll go ahead and fill
in the content URL.

00:09:39.250 --> 00:09:41.230
That's URL that
can be used to play

00:09:41.230 --> 00:09:45.340
the piece of media and then
the additional metadata

00:09:45.340 --> 00:09:46.330
around to support it.

00:09:46.330 --> 00:09:48.230
So it's very, very simple.

00:09:48.230 --> 00:09:50.500
And you can see the
code that we have here.

00:09:50.500 --> 00:09:52.240
This is your custom logic.

00:09:52.240 --> 00:09:54.832
This is logic that's
specific to your application,

00:09:54.832 --> 00:09:56.290
while, at the same
time, you're not

00:09:56.290 --> 00:09:59.410
having to deal with the
Dom putting elements

00:09:59.410 --> 00:10:02.320
like the icons on the
screen or the loading.

00:10:02.320 --> 00:10:04.930
All of that is handled
out of the box for you

00:10:04.930 --> 00:10:07.034
with the Cast
application framework.

00:10:10.670 --> 00:10:12.560
One of the really
exciting features

00:10:12.560 --> 00:10:16.520
that we're launching
here earlier last week

00:10:16.520 --> 00:10:20.930
is support, better support
for both live and ads.

00:10:20.930 --> 00:10:23.810
And for ads, as
you can see here,

00:10:23.810 --> 00:10:28.790
we give a great experience
across senders and receivers

00:10:28.790 --> 00:10:32.990
as well as our touch display,
smart display devices.

00:10:32.990 --> 00:10:38.630
And you can see here where you
get a great experience for ads,

00:10:38.630 --> 00:10:41.900
but it's actually very, very
simple for the developer.

00:10:41.900 --> 00:10:44.000
And Gina is going to walk
through that in detail

00:10:44.000 --> 00:10:45.380
in a little bit.

00:10:45.380 --> 00:10:47.060
But what I can
tell you before she

00:10:47.060 --> 00:10:49.220
jumps into that is
all you're doing

00:10:49.220 --> 00:10:51.410
is providing a little
bit of metadata.

00:10:51.410 --> 00:10:52.970
You provide a little
bit of metadata

00:10:52.970 --> 00:10:56.420
about where your ads are and
you get this UI treatment

00:10:56.420 --> 00:10:58.580
across all the senders
and the receivers

00:10:58.580 --> 00:11:02.130
so you get a really nice
experience for your users.

00:11:02.130 --> 00:11:04.760
Now let's take a look
at the mobile apps

00:11:04.760 --> 00:11:08.600
and some of the things that we
provide with the CAF framework.

00:11:08.600 --> 00:11:11.930
First, we have an indicator
letting the user know

00:11:11.930 --> 00:11:14.450
when an ad is being played.

00:11:14.450 --> 00:11:17.600
We allow you to
provide a poster image.

00:11:17.600 --> 00:11:21.350
And so here you can
see the Nest Hub

00:11:21.350 --> 00:11:25.940
where you have an
advertisement for the Nest Hub.

00:11:25.940 --> 00:11:29.210
At the same time, if
you have skippable ads,

00:11:29.210 --> 00:11:33.320
that can be done by just
giving us the metadata,

00:11:33.320 --> 00:11:36.150
telling us whether or
not the ad is skippable.

00:11:36.150 --> 00:11:38.420
And then finally,
you'll have ad markers

00:11:38.420 --> 00:11:41.270
that you see on the bottom of
the scrubber bar in yellow.

00:11:41.270 --> 00:11:43.790
And so those ad
markers only show up

00:11:43.790 --> 00:11:45.950
if the ad hasn't
been shown before.

00:11:48.620 --> 00:11:50.720
Next, I want to
talk about the UI

00:11:50.720 --> 00:11:53.960
that you get on a Chromecast,
on the cast receiver.

00:11:53.960 --> 00:11:56.150
Again, you can see
that ad marker.

00:11:56.150 --> 00:12:00.050
And then letting you know
that this particular ad is now

00:12:00.050 --> 00:12:05.420
skippable from your
device, from your phone.

00:12:05.420 --> 00:12:10.280
And then finally, the Google
Home Hub has all the same UI

00:12:10.280 --> 00:12:11.410
treatment around ads.

00:12:11.410 --> 00:12:13.470
You get a really
nice experience.

00:12:13.470 --> 00:12:16.910
But then it becomes a button,
so you can click that button

00:12:16.910 --> 00:12:18.560
to skip the ads.

00:12:18.560 --> 00:12:20.570
And we know that many
of you haven't yet

00:12:20.570 --> 00:12:23.360
started using skippable ads.

00:12:23.360 --> 00:12:26.270
But we believe soon all
of our media partners

00:12:26.270 --> 00:12:29.180
will start to explore
this and use this feature

00:12:29.180 --> 00:12:32.060
to drive additional ads
revenue and make a better

00:12:32.060 --> 00:12:34.690
experience for your users.

00:12:34.690 --> 00:12:36.580
And CAF is ready.

00:12:36.580 --> 00:12:38.960
So Gina, why don't you tell
everyone how they can do it.

00:12:38.960 --> 00:12:40.252
JUNG-YU (GINA) YEH: Yeah, sure.

00:12:40.252 --> 00:12:42.880
Now let me show you
the ads metadata,

00:12:42.880 --> 00:12:47.710
a break clip is a video that we
want to show [INAUDIBLE] ads.

00:12:47.710 --> 00:12:50.410
And developers can
assign a content URL

00:12:50.410 --> 00:12:53.820
to your video with
a poster image

00:12:53.820 --> 00:12:56.440
and values for
skippable ads, values

00:12:56.440 --> 00:12:58.240
are assigned to whenSkippable.

00:12:58.240 --> 00:13:02.560
And the SDK will show
that the SDK will displace

00:13:02.560 --> 00:13:06.190
the [INAUDIBLE] timer and the
[INAUDIBLE] based on the value

00:13:06.190 --> 00:13:08.640
that your provided.

00:13:08.640 --> 00:13:13.500
A break refers to an interval
of the playback, which includes

00:13:13.500 --> 00:13:16.260
one or more break clips.

00:13:16.260 --> 00:13:19.710
And positions must be
defined to indicate

00:13:19.710 --> 00:13:21.030
when the ads should start.

00:13:23.700 --> 00:13:25.700
In the previous
slide, we have talked

00:13:25.700 --> 00:13:29.570
about break clip and break,
which are the ads metadata.

00:13:29.570 --> 00:13:32.150
And now let me show
you how to insert

00:13:32.150 --> 00:13:34.700
your ads with your content.

00:13:34.700 --> 00:13:38.590
Starting from initializing
the Cast receiver context,

00:13:38.590 --> 00:13:40.640
get a player manager.

00:13:40.640 --> 00:13:43.490
With the player
manager, you may want

00:13:43.490 --> 00:13:46.580
to implement the load
message interceptor

00:13:46.580 --> 00:13:49.970
because typically a load
requires a [INAUDIBLE]

00:13:49.970 --> 00:13:51.980
without any ads.

00:13:51.980 --> 00:13:54.650
So, inside the
interceptor, [INAUDIBLE]

00:13:54.650 --> 00:13:57.245
the break clips and breaks
at the media object.

00:14:01.615 --> 00:14:05.060
Google Cast SDK supports
the industry standard.

00:14:05.060 --> 00:14:11.160
VAST and VMAP, which address the
compatibility issues for ads.

00:14:11.160 --> 00:14:16.050
For VAST, update a break Clip
object was a VAST, with a VAST

00:14:16.050 --> 00:14:20.670
ad URL and the SDK
parses the XML feed

00:14:20.670 --> 00:14:23.810
and populate over the main data.

00:14:23.810 --> 00:14:27.670
VMAP operates the same as VAST.

00:14:27.670 --> 00:14:31.510
As Kevin mentioned, it's easy
and simple to use our API

00:14:31.510 --> 00:14:34.750
to provide a little
bit of XML data

00:14:34.750 --> 00:14:38.300
and the SDK handles the
UIs across the services.

00:14:41.290 --> 00:14:44.370
On CAF, cast
application framework,

00:14:44.370 --> 00:14:46.390
the SDK not only
handles the UI for you,

00:14:46.390 --> 00:14:52.300
but also provide a smart
default behavior when users

00:14:52.300 --> 00:14:54.970
seek past multiple breaks.

00:14:54.970 --> 00:14:58.930
For example, when a user
seek past two breaks,

00:14:58.930 --> 00:15:03.160
the SDK plays the last
unwatched break, in this case,

00:15:03.160 --> 00:15:06.850
break three, before
the content begins.

00:15:06.850 --> 00:15:11.960
This is the default behavior
provided by the SDK.

00:15:11.960 --> 00:15:15.770
It's easy to customize
what we have here as well.

00:15:15.770 --> 00:15:18.970
Get a breakManager
from a playerManager

00:15:18.970 --> 00:15:24.520
and then use state
breakSeekInterceptor,

00:15:24.520 --> 00:15:27.640
which returns a breakSeekdata.

00:15:27.640 --> 00:15:31.040
That is an array
of breaks betraying

00:15:31.040 --> 00:15:33.340
seek from and seek to.

00:15:33.340 --> 00:15:36.730
So developers can choose
which ads shall be played

00:15:36.730 --> 00:15:37.870
before the content begins.

00:15:41.400 --> 00:15:44.310
Developers can also
update the ads metadata

00:15:44.310 --> 00:15:47.850
before it is loaded.

00:15:47.850 --> 00:15:51.520
By using the
setBreakClipLoadInterceptor,

00:15:51.520 --> 00:15:54.570
update the contentURL
to anotherGreatAd.

00:15:58.030 --> 00:16:00.490
We have gone through
the most important part

00:16:00.490 --> 00:16:03.310
of ads in the Google CAS SDK.

00:16:03.310 --> 00:16:06.200
For more information, check
out the developer guides

00:16:06.200 --> 00:16:12.620
at developers.google.com/cast.

00:16:12.620 --> 00:16:14.120
KEVIN NILSON: Now
I want to tell you

00:16:14.120 --> 00:16:16.790
a little bit about
our new live feature.

00:16:16.790 --> 00:16:18.980
We're really excited
about the support

00:16:18.980 --> 00:16:21.350
we've added for
Live, because we know

00:16:21.350 --> 00:16:23.510
that there are many
great apps out there

00:16:23.510 --> 00:16:26.580
today with support for Live.

00:16:26.580 --> 00:16:28.430
But one of the
things that we know,

00:16:28.430 --> 00:16:32.600
is this takes several
thousand lines of code for you

00:16:32.600 --> 00:16:34.460
to do traditionally.

00:16:34.460 --> 00:16:37.520
This was very, very
difficult. A lot of code

00:16:37.520 --> 00:16:41.240
had to be added in the
senders and the receiver

00:16:41.240 --> 00:16:42.760
across the app.

00:16:42.760 --> 00:16:45.680
And one of the things that's
really, really unique about

00:16:45.680 --> 00:16:49.550
the way that streaming media
servers work for live streams,

00:16:49.550 --> 00:16:54.980
is often streams are not
refreshed for 24 hours.

00:16:54.980 --> 00:16:57.920
And sometimes it's as
much as every two weeks.

00:16:57.920 --> 00:17:02.180
And so one of the things
that we support in Live

00:17:02.180 --> 00:17:05.210
is this ability to take your
scrubber bar, your progress

00:17:05.210 --> 00:17:10.319
bar, and zoom it into
the individual program.

00:17:10.319 --> 00:17:13.280
And so if you think about
traditional linear TV,

00:17:13.280 --> 00:17:15.440
typically you have
30 minute episodes.

00:17:15.440 --> 00:17:17.430
Here we have "The
Big Bang Theory."

00:17:17.430 --> 00:17:21.020
And this episode starts
at 8:00 and ends at 8:30.

00:17:21.020 --> 00:17:25.339
Even though the manifest goes
on much, much longer in the past

00:17:25.339 --> 00:17:28.010
and in the future,
here you can see

00:17:28.010 --> 00:17:31.460
we've zoomed into the
individual program.

00:17:31.460 --> 00:17:33.800
One of the other great
features that we add

00:17:33.800 --> 00:17:36.740
is the support for DVR window.

00:17:36.740 --> 00:17:40.100
And so, if your content
has a DVR window,

00:17:40.100 --> 00:17:44.570
here you can see where we give
you the ability to scrub back

00:17:44.570 --> 00:17:46.380
in that DVR window.

00:17:46.380 --> 00:17:49.640
But if you have something
like a sliding window DVR,

00:17:49.640 --> 00:17:54.710
we will constantly move
that DVR window for you.

00:17:54.710 --> 00:17:57.650
We have support as
well for the concepts

00:17:57.650 --> 00:18:01.880
like giving the ability to
scrub from the position where

00:18:01.880 --> 00:18:04.490
the person began playback.

00:18:04.490 --> 00:18:08.960
Or streams that are only
live, that don't support

00:18:08.960 --> 00:18:10.890
any scrubbing whatsoever.

00:18:10.890 --> 00:18:12.980
So all of these are provided.

00:18:12.980 --> 00:18:15.800
It's very, very simple
with just adding

00:18:15.800 --> 00:18:16.970
a little bit of metadata.

00:18:16.970 --> 00:18:19.802
Gina's going to walk you
through some of those details

00:18:19.802 --> 00:18:20.510
here in a minute.

00:18:23.510 --> 00:18:25.900
Now we'll look at mobile
and the experience

00:18:25.900 --> 00:18:27.550
that we have for Live.

00:18:27.550 --> 00:18:30.130
You can see at the
top, we've changed

00:18:30.130 --> 00:18:32.320
to show the current episode.

00:18:32.320 --> 00:18:36.460
And so traditionally,
support for programs

00:18:36.460 --> 00:18:39.260
themselves is now
part of CAF, so

00:18:39.260 --> 00:18:43.180
that rather than showing
the entire stream,

00:18:43.180 --> 00:18:46.450
we're able to change
that title from program

00:18:46.450 --> 00:18:49.440
to program for
you automatically.

00:18:49.440 --> 00:18:52.840
We also show the duration
how long the program is, so

00:18:52.840 --> 00:18:54.760
that your users know.

00:18:54.760 --> 00:18:57.280
And then we have an
indicator for Live,

00:18:57.280 --> 00:19:01.750
letting them know if they
are at the live point or not.

00:19:01.750 --> 00:19:04.570
And that's often a very, very
useful thing for the users

00:19:04.570 --> 00:19:05.320
to know.

00:19:05.320 --> 00:19:08.200
And then finally,
showing the progress

00:19:08.200 --> 00:19:09.730
within that DVR window.

00:19:09.730 --> 00:19:12.205
Where you're at and how
far back you can scrub.

00:19:15.320 --> 00:19:19.220
On the Chromecast, we've
also done similar treatment

00:19:19.220 --> 00:19:22.190
where we have support for
all the various metadata

00:19:22.190 --> 00:19:24.690
that you have on the senders.

00:19:24.690 --> 00:19:28.550
So here you can see the
live point, the scrubber,

00:19:28.550 --> 00:19:31.750
the progress, where
you're at in playback

00:19:31.750 --> 00:19:33.860
and where everything is.

00:19:33.860 --> 00:19:37.730
As well as like we've always
had, the play and pause.

00:19:37.730 --> 00:19:39.780
And remember that,
if you look at this,

00:19:39.780 --> 00:19:43.170
you'll see that the TV is
currently in a pause state.

00:19:43.170 --> 00:19:46.010
So we have a pause icon.

00:19:46.010 --> 00:19:49.360
Now I'd like to show
you the Google Home Hub.

00:19:49.360 --> 00:19:52.010
And before I jump into
talking through some

00:19:52.010 --> 00:19:54.950
of the things we
have for Live, I

00:19:54.950 --> 00:19:57.500
want to point out
that on the Home Hub,

00:19:57.500 --> 00:20:01.070
we're actually showing a play
icon rather than a pause.

00:20:01.070 --> 00:20:04.140
That is because this
is a clickable button.

00:20:04.140 --> 00:20:07.640
Where on the TV, on the
lean back experience,

00:20:07.640 --> 00:20:10.720
we're showing a pause,
because that is the state.

00:20:10.720 --> 00:20:15.830
Where on the Google Home Hub,
we're showing a play button,

00:20:15.830 --> 00:20:19.640
because that is clickable item.

00:20:19.640 --> 00:20:23.390
So there's a lot of great things
you can support here with Live.

00:20:23.390 --> 00:20:26.600
Show all the various metadata,
it's very, very simple.

00:20:26.600 --> 00:20:30.800
And Gina will show you
sort of just like ads,

00:20:30.800 --> 00:20:33.920
just giving us the metadata
is all that you need to do.

00:20:33.920 --> 00:20:35.360
There's no real
code, it's mostly

00:20:35.360 --> 00:20:40.420
just metadata that makes
all of this possible.

00:20:40.420 --> 00:20:42.540
JUNG-YU GINA YEH: OK,
now let me show you

00:20:42.540 --> 00:20:45.420
how to insure the
program guides for a law

00:20:45.420 --> 00:20:47.430
around the livestream.

00:20:47.430 --> 00:20:50.460
Get a queueManager
from a Playermanager,

00:20:50.460 --> 00:20:53.610
and then in the load
messager interceptor

00:20:53.610 --> 00:21:00.230
specify the string type as live
and set content or metadata.

00:21:00.230 --> 00:21:05.470
A container metadata can be
used as a TV channel which

00:21:05.470 --> 00:21:11.560
holds the title of the channel
image and programs as sections.

00:21:11.560 --> 00:21:15.760
Let's take a look at how
a section looked like.

00:21:15.760 --> 00:21:18.590
A section is a TV
program and that's

00:21:18.590 --> 00:21:21.140
called a first one
is current show

00:21:21.140 --> 00:21:23.660
and the second one is next show.

00:21:23.660 --> 00:21:26.180
In this sample, the
current show's title

00:21:26.180 --> 00:21:27.470
is "The Big Bang Theory."

00:21:27.470 --> 00:21:32.180
And z section
start absolute time

00:21:32.180 --> 00:21:34.820
is the start time
of the TV show.

00:21:34.820 --> 00:21:37.730
Define the section
duration as the duration

00:21:37.730 --> 00:21:41.400
of the TV show which is
30 minutes in this case.

00:21:41.400 --> 00:21:48.650
Developers can provide as many
shows as you can with our API.

00:21:48.650 --> 00:21:52.160
As Kevin mentioned, it's easy
and simple to use our API

00:21:52.160 --> 00:21:56.270
to provide a little
bit of live metadata.

00:21:56.270 --> 00:22:00.560
And SDK handles the UI's
across all the services.

00:22:00.560 --> 00:22:02.870
It automatically
updates the title

00:22:02.870 --> 00:22:08.040
as on the program guides
provided by the developers.

00:22:08.040 --> 00:22:12.480
Live has been launch in alpha,
and we are adding more support

00:22:12.480 --> 00:22:13.830
as I speak.

00:22:13.830 --> 00:22:17.910
For more information, check
out the developer guides

00:22:17.910 --> 00:22:22.388
at developers.google.com/cast.

00:22:22.388 --> 00:22:24.430
KEVIN NILSON: Now I
want to go and talk

00:22:24.430 --> 00:22:28.550
to you about our new smart
displays and the support

00:22:28.550 --> 00:22:31.090
that we're adding
for smart displays.

00:22:31.090 --> 00:22:36.040
And, as you can see here, smart
displays have touch support

00:22:36.040 --> 00:22:37.360
and so you can touch.

00:22:37.360 --> 00:22:40.180
And I'm going to talk to
you both about customizing

00:22:40.180 --> 00:22:44.350
the buttons as well as the media
browse where you're browsing

00:22:44.350 --> 00:22:48.280
across different content
that you're able to suggest

00:22:48.280 --> 00:22:51.320
and control for your users.

00:22:51.320 --> 00:22:53.710
And one of the things that's
really nice about this

00:22:53.710 --> 00:22:58.100
is this content is only content
within your application.

00:22:58.100 --> 00:23:02.410
And so it keeps the user in
your app continuing to watch

00:23:02.410 --> 00:23:06.410
and continuing to grow the
session watch time and session

00:23:06.410 --> 00:23:06.910
length.

00:23:10.300 --> 00:23:12.540
So let's go through
how to add the buttons

00:23:12.540 --> 00:23:15.930
and customize the buttons
on the smart display

00:23:15.930 --> 00:23:19.230
devices such as the Hub.

00:23:19.230 --> 00:23:20.790
So we're going to
start by giving

00:23:20.790 --> 00:23:23.970
an instance of the controls,
that's your buttons,

00:23:23.970 --> 00:23:27.660
and then we're going to
create a player data binder.

00:23:27.660 --> 00:23:30.060
And with that
player data binder,

00:23:30.060 --> 00:23:34.200
we're going to add an event
listener for media changing,

00:23:34.200 --> 00:23:38.850
because we know a lot of times
when a piece of media changes,

00:23:38.850 --> 00:23:41.520
you're going to want to
change those suggestions to be

00:23:41.520 --> 00:23:46.560
something that's relevant to
the currently playing item.

00:23:46.560 --> 00:23:48.930
From there, the first thing
that you're going to do

00:23:48.930 --> 00:23:51.563
is clear out the
default buttons.

00:23:51.563 --> 00:23:52.980
And one of the
things we do in CAF

00:23:52.980 --> 00:23:57.570
is, like I mentioned earlier,
we provide an out of the box

00:23:57.570 --> 00:24:00.600
default experience
that hopefully gives

00:24:00.600 --> 00:24:03.180
the user a great experience.

00:24:03.180 --> 00:24:07.110
But we know that sometimes you
may wish to change the buttons,

00:24:07.110 --> 00:24:10.560
add or remove various
buttons, and provide

00:24:10.560 --> 00:24:13.470
a better experience
for your users

00:24:13.470 --> 00:24:15.960
in your particular scenario.

00:24:15.960 --> 00:24:19.080
And so, back to this, once
you've cleared those default

00:24:19.080 --> 00:24:23.490
buttons, we're going to go
ahead and assign new buttons.

00:24:23.490 --> 00:24:26.910
And you can see here, I'm
assigning into the primary slot

00:24:26.910 --> 00:24:31.300
number one a seat
backwards by 30 seconds.

00:24:31.300 --> 00:24:34.870
And so if you look at the little
diagram on the bottom right,

00:24:34.870 --> 00:24:37.950
you can see in the blue,
those are the primary buttons.

00:24:37.950 --> 00:24:41.430
And those will tend to hug
around the play/pause button

00:24:41.430 --> 00:24:42.690
in the center.

00:24:42.690 --> 00:24:46.060
And then we have secondary
buttons, that in this example,

00:24:46.060 --> 00:24:47.610
are on the outside.

00:24:47.610 --> 00:24:50.820
So putting the secondary
one on the left

00:24:50.820 --> 00:24:53.430
and the secondary
two on the right.

00:24:53.430 --> 00:24:57.990
We will also, in the near
future, be, in some scenarios,

00:24:57.990 --> 00:25:01.440
moving the secondary
buttons onto the right.

00:25:01.440 --> 00:25:04.620
And so that both secondary
buttons will be on the right,

00:25:04.620 --> 00:25:07.710
while other times, they'll
be on the two sides.

00:25:07.710 --> 00:25:12.180
And so that's why we have
primary and secondary buttons

00:25:12.180 --> 00:25:14.710
within the application.

00:25:14.710 --> 00:25:17.400
One thing that I do want
to remind folks about

00:25:17.400 --> 00:25:21.240
is call out the
player data binder.

00:25:21.240 --> 00:25:25.630
So if you look at this
example, you may say, "Well,

00:25:25.630 --> 00:25:29.580
why can't we do this as part of
the load, when a piece of media

00:25:29.580 --> 00:25:31.110
is loading?"

00:25:31.110 --> 00:25:35.670
What we would like you to do
is use the player data binder

00:25:35.670 --> 00:25:39.210
for dealing with any
UI element changes

00:25:39.210 --> 00:25:41.370
that need to happen
within your app,

00:25:41.370 --> 00:25:45.600
so that you can structure
the UI elements differently

00:25:45.600 --> 00:25:48.850
than actually loading
the media itself.

00:25:48.850 --> 00:25:51.480
The other main
advantage to doing this

00:25:51.480 --> 00:25:56.730
is when you're on a
remote control device.

00:25:56.730 --> 00:26:01.500
So imagine you have one of
the smart display devices,

00:26:01.500 --> 00:26:05.550
but you're actually casting to
a Chromecast in your living room

00:26:05.550 --> 00:26:10.870
TV, but then browsing content
on the smart display device.

00:26:10.870 --> 00:26:14.370
And so that the smart display
device itself is actually not

00:26:14.370 --> 00:26:16.270
playing the content at all.

00:26:16.270 --> 00:26:19.800
And so, in that scenario there
isn't a load request at all.

00:26:19.800 --> 00:26:22.890
And so, by using the
player data binder

00:26:22.890 --> 00:26:25.980
you're actually able
to have those controls

00:26:25.980 --> 00:26:28.770
and manipulate on both
the Chromecast that's

00:26:28.770 --> 00:26:34.207
playing the content, as well
as the smart display devices.

00:26:34.207 --> 00:26:35.790
And some of the
instances where people

00:26:35.790 --> 00:26:37.950
will change this
is a lot of people

00:26:37.950 --> 00:26:40.500
have mixed types
of content where

00:26:40.500 --> 00:26:43.260
some of its premium,
some of it's non-premium,

00:26:43.260 --> 00:26:45.030
and they may change the buttons.

00:26:45.030 --> 00:26:48.660
Or people may have a mixture of
both video and audio content,

00:26:48.660 --> 00:26:51.870
as well as things like
podcast that have a little bit

00:26:51.870 --> 00:26:53.157
different treatment.

00:26:56.290 --> 00:26:59.930
Now I want to show how to
implement the media browse.

00:26:59.930 --> 00:27:01.870
And the media browse
is when you're

00:27:01.870 --> 00:27:04.780
watching a piece of content
on that smart display,

00:27:04.780 --> 00:27:07.490
you click on the screen,
and it will bring up,

00:27:07.490 --> 00:27:11.290
you can pull up from the
bottom some suggested content

00:27:11.290 --> 00:27:14.920
that you would like your
users to be able to play.

00:27:14.920 --> 00:27:17.230
And so, here in
this example, we've

00:27:17.230 --> 00:27:22.280
added an item, a "Star
Trek Discovery" item.

00:27:22.280 --> 00:27:25.150
And you can see the various
metadata, the subtitle

00:27:25.150 --> 00:27:26.830
and the duration for that.

00:27:26.830 --> 00:27:29.980
You're able to specify exactly
what image you would like

00:27:29.980 --> 00:27:33.970
to use and then the entity,
that universal deep link,

00:27:33.970 --> 00:27:36.940
into this piece of content.

00:27:36.940 --> 00:27:38.790
Finally down on the
bottom, again, we're

00:27:38.790 --> 00:27:41.430
going to listen to that
media changed event,

00:27:41.430 --> 00:27:43.380
and every time media
changes I'm going

00:27:43.380 --> 00:27:46.110
to update what
information I would

00:27:46.110 --> 00:27:48.790
like to show in media browse.

00:27:48.790 --> 00:27:51.070
And so what I'm going to
do is within the controls

00:27:51.070 --> 00:27:54.650
we used before, I'm going
to set the browse content

00:27:54.650 --> 00:27:57.120
and pass in these items.

00:27:57.120 --> 00:28:00.030
You'll notice below there
in green at the bottom,

00:28:00.030 --> 00:28:03.750
I'm calling this latest
episodes and so for CBS

00:28:03.750 --> 00:28:07.990
they like to highlight the new
shows that come out every week,

00:28:07.990 --> 00:28:09.960
and let you see
what those shows are

00:28:09.960 --> 00:28:13.470
because they believe that's
what's best for the users.

00:28:13.470 --> 00:28:15.960
Other applications may
want to put something

00:28:15.960 --> 00:28:18.210
different in that
shelf, such as they may,

00:28:18.210 --> 00:28:21.450
may wish to say
comedies or sports,

00:28:21.450 --> 00:28:24.070
or you may wish to
say continue watching,

00:28:24.070 --> 00:28:26.430
or you may want to
call it up next.

00:28:26.430 --> 00:28:30.750
You have full control
about what content becomes

00:28:30.750 --> 00:28:32.700
available within that shelf.

00:28:36.500 --> 00:28:40.430
And all of these great features
are available on the next Hub

00:28:40.430 --> 00:28:43.700
Max that all of you heard
about in the Keynote.

00:28:43.700 --> 00:28:45.320
And so you write this code.

00:28:45.320 --> 00:28:48.980
It will work on their
traditional Hubs as well as

00:28:48.980 --> 00:28:49.805
the Hub Max.

00:28:53.130 --> 00:28:54.930
Now I want to talk
about a feature

00:28:54.930 --> 00:28:57.300
that we call intent to join.

00:28:57.300 --> 00:29:02.280
And intent to join is something
that helps bring users back

00:29:02.280 --> 00:29:04.340
into your application.

00:29:04.340 --> 00:29:07.440
And so you can
imagine, if I come home

00:29:07.440 --> 00:29:08.970
and the TV is playing.

00:29:08.970 --> 00:29:12.990
Maybe my kids, maybe my wife,
is watching something on the TV.

00:29:12.990 --> 00:29:16.470
One of our favorites from
Blender, Tears of Steel.

00:29:16.470 --> 00:29:19.480
And I see that content.

00:29:19.480 --> 00:29:22.990
And then I look down on my
phone and I have a notification.

00:29:22.990 --> 00:29:26.880
And with this notification, if I
click on the notification, what

00:29:26.880 --> 00:29:31.140
I want to do is be able to go
directly into my application

00:29:31.140 --> 00:29:33.990
and have full control
in the expanded control

00:29:33.990 --> 00:29:37.710
so that I can control that
while at the same time

00:29:37.710 --> 00:29:40.560
being able to seek
to different content.

00:29:40.560 --> 00:29:42.490
And this is intent to join.

00:29:42.490 --> 00:29:46.440
And what's different is, if
you don't add support for this,

00:29:46.440 --> 00:29:49.450
we don't know how to deep
link into the content,

00:29:49.450 --> 00:29:53.140
and so we actually bring the
user into the home app itself.

00:29:53.140 --> 00:29:55.140
And so would rather
give you the ability

00:29:55.140 --> 00:29:57.030
to bring that user
into your app,

00:29:57.030 --> 00:29:58.350
so that they stay with you.

00:30:01.330 --> 00:30:04.420
So to add support
for intent to join,

00:30:04.420 --> 00:30:07.450
the first thing you're going
to do in your Android manifest

00:30:07.450 --> 00:30:10.010
is to add an intent filter.

00:30:10.010 --> 00:30:11.770
And within the
intent filter, you'll

00:30:11.770 --> 00:30:15.680
define which schema, so
HTTPS in this example,

00:30:15.680 --> 00:30:18.040
define the host
like who you are,

00:30:18.040 --> 00:30:21.890
which intents you're able
to handle, and then a path.

00:30:21.890 --> 00:30:26.540
And so that path is joining the
cast session in this example.

00:30:26.540 --> 00:30:28.600
And so, finally, down at
the bottom, and you're

00:30:28.600 --> 00:30:32.260
on resume of your
Android activity.

00:30:32.260 --> 00:30:32.930
Here we are.

00:30:32.930 --> 00:30:34.880
We're going to parse
out that intent.

00:30:34.880 --> 00:30:36.880
We're going to get
the data and check

00:30:36.880 --> 00:30:42.130
that if it equals the intent
that we are expecting,

00:30:42.130 --> 00:30:43.840
then I'm going to
go ahead and start

00:30:43.840 --> 00:30:47.290
the session with that intent
and that's what brings you

00:30:47.290 --> 00:30:48.460
into that expanded control.

00:30:52.400 --> 00:30:54.950
Next I want to talk
about some support

00:30:54.950 --> 00:30:58.130
that we've added
into the ExoPlayer.

00:30:58.130 --> 00:31:00.470
So ExoPlayer, if
you haven't tried it

00:31:00.470 --> 00:31:03.620
for playing media on
Android, specifically

00:31:03.620 --> 00:31:06.740
if you're dealing with
DRM content on Android,

00:31:06.740 --> 00:31:10.610
the ExoPlayer is a really,
really great player

00:31:10.610 --> 00:31:14.730
that we have seen mass
adoption across the industry.

00:31:14.730 --> 00:31:17.480
Everyone is really
moving to the ExoPlayer

00:31:17.480 --> 00:31:20.390
and so for us on the
Google Cast side,

00:31:20.390 --> 00:31:23.660
we wanted to work very, very
closely with the ExoPlayer

00:31:23.660 --> 00:31:27.110
to build a plug-in and
their extensions that

00:31:27.110 --> 00:31:31.400
makes casting very, very
simple, very natural,

00:31:31.400 --> 00:31:35.090
and feel like a natural
extension of both Exo as well

00:31:35.090 --> 00:31:36.330
as Cast.

00:31:36.330 --> 00:31:38.090
And so we've done
a lot of great work

00:31:38.090 --> 00:31:41.270
that you can find out in
open source on GitHub.

00:31:41.270 --> 00:31:46.100
And that work is being done on
a dev v2 branch that will soon

00:31:46.100 --> 00:31:48.355
be merged into the v2 release.

00:31:48.355 --> 00:31:50.330
And so check it out if
you haven't tried it.

00:31:50.330 --> 00:31:52.310
It's a really,
really great plug-in.

00:31:52.310 --> 00:31:54.813
They've been working,
collaborating with us very,

00:31:54.813 --> 00:31:55.355
very closely.

00:31:59.340 --> 00:32:02.980
One of the things that we
recently did within the SDK

00:32:02.980 --> 00:32:07.710
is try to make senders
and receivers be more

00:32:07.710 --> 00:32:09.660
coherent and more consistent.

00:32:09.660 --> 00:32:14.100
We wanted the API surfaces to
feel natural across the two

00:32:14.100 --> 00:32:16.530
and we wanted to make
it easier for people

00:32:16.530 --> 00:32:20.520
sending data from a sender to
be able to talk to the receiver

00:32:20.520 --> 00:32:22.890
team and debug issues.

00:32:22.890 --> 00:32:25.710
And so one of the things we've
always had on the receiver

00:32:25.710 --> 00:32:29.500
is this notion of a
load request data.

00:32:29.500 --> 00:32:32.640
And so what we've done is we've
taken that load request, that's

00:32:32.640 --> 00:32:36.540
play, and we've made
those same API structure

00:32:36.540 --> 00:32:38.810
available on the sender.

00:32:38.810 --> 00:32:42.540
And so here you can see we've
got a media load request

00:32:42.540 --> 00:32:46.620
data with a builder, you
provide the media information,

00:32:46.620 --> 00:32:49.320
and then load that on
your remote media client.

00:32:52.783 --> 00:32:54.700
Now I'm going to talk
about some of the things

00:32:54.700 --> 00:32:56.710
that we've done for developers.

00:32:56.710 --> 00:32:58.540
We've made some
changes for developers

00:32:58.540 --> 00:33:02.650
to make that experience
much easier and much better

00:33:02.650 --> 00:33:04.240
for developers.

00:33:04.240 --> 00:33:07.450
And, before I jump into
some of the new stuff,

00:33:07.450 --> 00:33:10.930
I want to talk about
some beta channel

00:33:10.930 --> 00:33:13.270
that we have available for
the platform that many of you

00:33:13.270 --> 00:33:15.340
may not know about.

00:33:15.340 --> 00:33:18.460
One of the things that you
can do if you go to this link,

00:33:18.460 --> 00:33:21.220
you can actually
register your device

00:33:21.220 --> 00:33:24.580
to get early builds
of our platform.

00:33:24.580 --> 00:33:27.760
Because devices like
Chromecast and Google

00:33:27.760 --> 00:33:30.610
Home are just like your
Google Chrome browser

00:33:30.610 --> 00:33:34.480
where they automatically
update to the latest version.

00:33:34.480 --> 00:33:37.060
And this lets you
get that new version

00:33:37.060 --> 00:33:41.380
a week or two before the rest
of the public or your users

00:33:41.380 --> 00:33:42.070
gets it.

00:33:42.070 --> 00:33:44.110
So put your device
in this channel

00:33:44.110 --> 00:33:46.300
and then, if you find
any kind of issues,

00:33:46.300 --> 00:33:48.370
you have time to fix
them or reach out

00:33:48.370 --> 00:33:50.650
to us at Google in case
of problems on our side.

00:33:53.760 --> 00:33:57.210
Debugging within
Chromecast and Google Cast

00:33:57.210 --> 00:34:00.420
is done with the Chrome
DevTools and these

00:34:00.420 --> 00:34:03.180
are the best of breed
DevTools out there

00:34:03.180 --> 00:34:05.490
that allow you as
a web developer

00:34:05.490 --> 00:34:09.510
to be able to set breakpoints,
inspect, look at memory,

00:34:09.510 --> 00:34:13.080
make real time changes, and
they're very, very powerful.

00:34:13.080 --> 00:34:17.370
But, unfortunately, when
using the remote DevTools, one

00:34:17.370 --> 00:34:22.110
of the issues that often happens
is after a minute or two,

00:34:22.110 --> 00:34:24.780
we have leaks within
the tools where

00:34:24.780 --> 00:34:29.070
you start to have issues
that are unexpected.

00:34:29.070 --> 00:34:31.980
Things start failing that
typically wouldn't fail,

00:34:31.980 --> 00:34:34.350
and also realize that
you're working on

00:34:34.350 --> 00:34:37.139
often in the case
of a Chromecast,

00:34:37.139 --> 00:34:39.810
very, very inexpensive hardware.

00:34:39.810 --> 00:34:42.030
And on that very
inexpensive hardware,

00:34:42.030 --> 00:34:46.530
having the Debugger attached is
a very, very heavyweight thing

00:34:46.530 --> 00:34:48.350
that can cause issues.

00:34:48.350 --> 00:34:50.969
And so one of the things that
I do want to remind everyone

00:34:50.969 --> 00:34:54.600
is that if you have
the Debugger attached

00:34:54.600 --> 00:34:56.600
and you're seeing
issues, make sure

00:34:56.600 --> 00:34:58.350
that you're still
seeing those issues even

00:34:58.350 --> 00:35:00.940
if the Debugger isn't attached.

00:35:00.940 --> 00:35:02.940
And Gina's going to talk
about one of the things

00:35:02.940 --> 00:35:07.170
that we're adding in a logger
to make it much simpler for you

00:35:07.170 --> 00:35:11.070
to do troubleshooting and
debugging, but without having

00:35:11.070 --> 00:35:13.020
to attach the full
Chrome Debugger.

00:35:13.020 --> 00:35:15.790
Because we know
that in many cases,

00:35:15.790 --> 00:35:18.580
we don't need a full
debugger experience.

00:35:18.580 --> 00:35:21.593
Even though this is a great
tool for all of you to use,

00:35:21.593 --> 00:35:22.635
it's not always required.

00:35:25.470 --> 00:35:27.220
JUNG-YU (GINA) YEH:
Receiver Debug Overlay

00:35:27.220 --> 00:35:30.610
is a new feature that
we've built for developers.

00:35:30.610 --> 00:35:32.950
And it will be launching soon.

00:35:32.950 --> 00:35:37.450
It enables developers to add
logs with your custom tag

00:35:37.450 --> 00:35:41.890
and then connect from a
laptop to a Google Cast device

00:35:41.890 --> 00:35:44.440
by using our Logging Tool.

00:35:44.440 --> 00:35:48.190
From the Logging Tool developers
can enable the Debug Overlay

00:35:48.190 --> 00:35:51.520
on the receiver
screen, which displays

00:35:51.520 --> 00:35:53.650
all the logs on the screen.

00:35:53.650 --> 00:35:57.760
At the same time, the Logging
Tool captures all the messages

00:35:57.760 --> 00:36:00.080
and display on the laptop.

00:36:00.080 --> 00:36:03.310
So developers can
easily trace the logs

00:36:03.310 --> 00:36:05.770
and even save them
for further analysis.

00:36:08.770 --> 00:36:11.320
We know a lot of
developers who want

00:36:11.320 --> 00:36:13.660
to build automated
cast with Google

00:36:13.660 --> 00:36:17.500
Cast on your continuous
integration servers.

00:36:17.500 --> 00:36:20.110
This year, we have
built a sample

00:36:20.110 --> 00:36:24.460
with utility functions, which
you can use to easily add

00:36:24.460 --> 00:36:27.440
[INAUDIBLE] in your cast apps.

00:36:27.440 --> 00:36:32.690
Check out our Android sample
at github.com/googlecast.

00:36:32.690 --> 00:36:34.220
iOS sample is coming soon.

00:36:37.810 --> 00:36:40.600
KEVIN NILSON: So I want to
thank all of you for coming.

00:36:40.600 --> 00:36:43.050
We've been very, very
excited to tell you

00:36:43.050 --> 00:36:46.050
about the many new features--

00:36:46.050 --> 00:36:50.430
live support, support
for ad, better

00:36:50.430 --> 00:36:53.820
support for touch in our
smart display devices.

00:36:53.820 --> 00:36:57.660
We're looking forward to seeing
all the things that all of you

00:36:57.660 --> 00:37:00.450
will go out there and build.

00:37:00.450 --> 00:37:03.180
If you want to learn
more about Google Cast go

00:37:03.180 --> 00:37:06.360
to developers.google.com/cast.

00:37:06.360 --> 00:37:09.810
Check out our great
examples on GitHub.

00:37:09.810 --> 00:37:13.540
And then we have a new Google
group for making announcements.

00:37:13.540 --> 00:37:18.040
And so, every time we release
something new in the SDK,

00:37:18.040 --> 00:37:20.790
you can go and check
out those announcements.

00:37:20.790 --> 00:37:24.740
[MUSIC PLAYING]

