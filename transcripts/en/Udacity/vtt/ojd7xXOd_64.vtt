WEBVTT
Kind: captions
Language: en

00:00:00.170 --> 00:00:01.850
Okay so now let's run this code to see what the

00:00:01.850 --> 00:00:06.140
output looks like. Okay, so all this does is print out

00:00:06.140 --> 00:00:09.470
a complete listing of all the airport codes and above this,

00:00:09.470 --> 00:00:12.660
all of the carrier codes. Now it's these values then, that we're

00:00:12.660 --> 00:00:16.200
going to use in order to mine the data we need

00:00:16.200 --> 00:00:19.030
from this particular data source. So if we're going to do that,

00:00:19.030 --> 00:00:21.570
we need to have a good understanding of exactly how requests

00:00:21.570 --> 00:00:25.470
need to be formulated to this website. Okay, let's take a closer

00:00:25.470 --> 00:00:27.910
look then. If we scroll up a little bit,

00:00:27.910 --> 00:00:30.850
we can see the form that's used to submit

00:00:30.850 --> 00:00:34.120
any requests based on these selectors and the submit

00:00:34.120 --> 00:00:36.870
button. Now any time you are doing a scraping task

00:00:36.870 --> 00:00:41.210
like this, you absolutely have to understand exactly how

00:00:41.210 --> 00:00:44.650
the site expects requests. Some sites are pickier than others.

00:00:44.650 --> 00:00:47.490
Some sites have more security procedures built in or

00:00:47.490 --> 00:00:49.950
more constraints that you're going to have to deal with.

00:00:51.180 --> 00:00:53.400
So our first step is figuring out what URL

00:00:53.400 --> 00:00:56.720
we have to access, and what HTTP method we

00:00:56.720 --> 00:01:01.660
need to use. So the HTTP method is post and the URL we need to access is this

00:01:01.660 --> 00:01:05.810
data elements, ASPX URL, passing it to parameter data

00:01:05.810 --> 00:01:08.390
equals 2. Now, it turns out that that is

00:01:08.390 --> 00:01:12.570
exactly this URL here. So submitting this particular form

00:01:12.570 --> 00:01:16.710
simply executes a request against exactly the same URL.

