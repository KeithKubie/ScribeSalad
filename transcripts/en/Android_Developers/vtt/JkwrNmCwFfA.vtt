WEBVTT
Kind: captions
Language: en

00:00:02.652 --> 00:00:04.110
When it comes to
performance, there

00:00:04.110 --> 00:00:06.760
is one technique that
governs all of computing.

00:00:06.760 --> 00:00:08.480
Without it, your
computer basically

00:00:08.480 --> 00:00:10.770
would not exist or work at all.

00:00:10.770 --> 00:00:13.810
I'm Joanna Smith, and caching
is as fundamental to performance

00:00:13.810 --> 00:00:16.170
as it is to the design of
the hardware in the phone

00:00:16.170 --> 00:00:17.740
that you're holding.

00:00:17.740 --> 00:00:19.970
If you think about it,
there's a pretty clear reason

00:00:19.970 --> 00:00:21.240
why computers have RAM.

00:00:21.240 --> 00:00:23.840
It acts as a data cache to
access recent information

00:00:23.840 --> 00:00:26.370
fast-- like super fast--
compared to having

00:00:26.370 --> 00:00:28.160
to get it from the hard drive.

00:00:28.160 --> 00:00:30.450
And this is basically
what a cache is-- a place

00:00:30.450 --> 00:00:33.730
to store data that's frequently
used so that future uses happen

00:00:33.730 --> 00:00:35.330
as fast as possible.

00:00:35.330 --> 00:00:37.630
Anytime that you have an
overhead cost for computing

00:00:37.630 --> 00:00:40.390
a piece of data, or
loading it, or finding it,

00:00:40.390 --> 00:00:42.890
a cache can help you do it
faster and more effectively

00:00:42.890 --> 00:00:44.650
the second time,
and the third time,

00:00:44.650 --> 00:00:46.300
and the-- you get the idea.

00:00:46.300 --> 00:00:48.236
So, in your app, the
most common place

00:00:48.236 --> 00:00:49.610
where you can win
with caching is

00:00:49.610 --> 00:00:52.110
when you have data that is
calculated multiple times,

00:00:52.110 --> 00:00:54.160
but the result is
always the same.

00:00:54.160 --> 00:00:56.700
No one would ever argue
to move nonvariable work

00:00:56.700 --> 00:00:59.310
into an inner loop, but it
may surprise you how easy

00:00:59.310 --> 00:01:01.180
it is to do this by mistake.

00:01:01.180 --> 00:01:02.830
Consider a simple
example where you're

00:01:02.830 --> 00:01:05.230
calculating the derivative
of a four-by-four matrix

00:01:05.230 --> 00:01:07.770
to use when calculating
your loop control variable.

00:01:07.770 --> 00:01:09.920
But that matrix never
changes within the loop,

00:01:09.920 --> 00:01:11.550
so you're actually
wasting performance

00:01:11.550 --> 00:01:14.330
recomputing the derivative
on each iteration.

00:01:14.330 --> 00:01:17.529
Instead, compute and save the
result outside of the loop

00:01:17.529 --> 00:01:19.570
and let the inner portions
of your loop reference

00:01:19.570 --> 00:01:20.701
that cached result.

00:01:20.701 --> 00:01:22.700
This may sound obvious
when presented like this,

00:01:22.700 --> 00:01:25.280
but you would be surprised how
even seasoned developers get

00:01:25.280 --> 00:01:26.330
caught by it.

00:01:26.330 --> 00:01:28.000
Like when calling
Get Current User

00:01:28.000 --> 00:01:30.120
inside of a loop in a
single user environment,

00:01:30.120 --> 00:01:31.870
like a mobile game.

00:01:31.870 --> 00:01:34.160
Caching also acts as
a fantastic resource

00:01:34.160 --> 00:01:35.910
for our limited
resource environments.

00:01:35.910 --> 00:01:38.390
For example, let's say that
you have about 2 gigabytes

00:01:38.390 --> 00:01:40.710
of images that the user
might need to display,

00:01:40.710 --> 00:01:42.630
but you can only fit
50 megabytes of them

00:01:42.630 --> 00:01:43.920
in memory at a time.

00:01:43.920 --> 00:01:46.520
So the Android framework will
help you out as much as it can,

00:01:46.520 --> 00:01:48.130
if you use an adapter view.

00:01:48.130 --> 00:01:50.530
But you can make this
more effective by keeping

00:01:50.530 --> 00:01:52.250
track of what images
to keep in memory

00:01:52.250 --> 00:01:54.320
and which to evict so
that the framework doesn't

00:01:54.320 --> 00:01:58.210
need to evaluate the full
2 gigabytes of content.

00:01:58.210 --> 00:02:00.100
Then there's the
less common form

00:02:00.100 --> 00:02:02.620
of caching known
as pre-computation.

00:02:02.620 --> 00:02:05.300
This is essentially where you
spend time offline to calculate

00:02:05.300 --> 00:02:08.650
a huge lookup table or
a massive XML schema

00:02:08.650 --> 00:02:11.480
so that at runtime you can
simply fetch that data rather

00:02:11.480 --> 00:02:13.400
than executing all
that expensive overhead

00:02:13.400 --> 00:02:15.500
while your user is waiting.

00:02:15.500 --> 00:02:19.182
And that's the whole point--
avoiding unnecessary work.

00:02:19.182 --> 00:02:21.390
So if you're looking to make
performance improvements

00:02:21.390 --> 00:02:24.780
or trying to build a new app
that's already Perf perfect,

00:02:24.780 --> 00:02:26.570
take a pass through
places where you loop,

00:02:26.570 --> 00:02:29.560
or load data, or have heavy
computation, and see what

00:02:29.560 --> 00:02:31.010
you can shift around.

00:02:31.010 --> 00:02:34.179
Also, avoiding unnecessary
work is pretty much all we talk

00:02:34.179 --> 00:02:36.720
about in the rest of the Android
Performance Patterns content

00:02:36.720 --> 00:02:39.450
and in our G+ community, which
is why you should check both

00:02:39.450 --> 00:02:40.240
of them out.

00:02:40.240 --> 00:02:42.960
So keep calm, profile your
code, and always remember,

00:02:42.960 --> 00:02:44.150
Perf matters.

00:02:44.150 --> 00:02:47.500
[MUSIC PLAYING]

