WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:07.940
&gt;&gt; BOYD: Hello, everyone. My name is Ryan
Boyd and I'm a developer advocate working

00:00:07.940 --> 00:00:13.200
in our Developer Relations Group. I'm with
the Google Apps Marketplace. And this is Dave

00:00:13.200 --> 00:00:18.480
Primmer and he's an engineer in our OAuth
team. We're here today to talk about OpenID

00:00:18.480 --> 00:00:25.259
single sign-on and OAuth data access for Google
Apps. Now, you may wonder why we're here.

00:00:25.259 --> 00:00:29.800
There's all sorts of material about these
two topics. There's all sorts of confusion

00:00:29.800 --> 00:00:35.340
about these two topics, of course, as well.
We're here really because we've worked with

00:00:35.340 --> 00:00:40.050
a bunch of Marketplace partners over the last
couple of months to launch in the Google Apps

00:00:40.050 --> 00:00:44.070
Marketplace. And there's been all sorts of
confusion about which of the flavors of OpenID

00:00:44.070 --> 00:00:48.539
and which are the flavors of OAuth they should
be using for the different used cases and

00:00:48.539 --> 00:00:53.559
how users are coming into their application.
So we're here to talk about that, and we're

00:00:53.559 --> 00:00:57.649
here to try to provide you some guidance on
the different flavors and when to use them.

00:00:57.649 --> 00:01:01.600
We're not going to be diving deep into the
protocol and showing you all the bits of an

00:01:01.600 --> 00:01:06.150
OAuth signature or anything like that. So,
don't expect that as part of this talk. So

00:01:06.150 --> 00:01:13.190
as long as we're prepared with that, we'll
get going. You can view live notes and questions--you

00:01:13.190 --> 00:01:18.620
guys have already seen this stuff on many
other sessions so far, so go to Magic Wave

00:01:18.620 --> 00:01:23.720
on Bitly and you can ask your questions. And
we'll try to leave a little bit of the time

00:01:23.720 --> 00:01:28.110
at the end of the session for that, although
I think we're a little bit cut short on time

00:01:28.110 --> 00:01:33.250
here because the keynote ran a little bit
late. So the agenda today; first of all, we

00:01:33.250 --> 00:01:37.220
want to talk about terminology, then we want
to go to a little bit of history of these

00:01:37.220 --> 00:01:41.290
protocols and then go into each of the protocols;
OpenID, OAuth and then a hybrid combination

00:01:41.290 --> 00:01:47.940
of the two, and then talk about the Google
Apps Marketplace and then the evolution of

00:01:47.940 --> 00:01:54.850
this SaaSy Payroll application, and then the
Q&amp;A we talked about. So, SaaSy Payroll; SaaSy

00:01:54.850 --> 00:02:00.290
Payroll is a fictitious app; the app doesn't
really exist and it's for handling the payroll

00:02:00.290 --> 00:02:04.210
of small and medium-sized businesses. How
many of you went to the Marketplace session

00:02:04.210 --> 00:02:09.671
that I did yesterday? Okay, you probably recognized
the UI. SaaSy Voice, at least, was a real

00:02:09.671 --> 00:02:15.840
application that worked; this doesn't. But
we have a pretend company here too called

00:02:15.840 --> 00:02:23.730
smart-lawfirm. Smart Law Firm is a company
that uses Google Apps for their business and

00:02:23.730 --> 00:02:27.500
they use the SaaSy Payroll application. So,
we're going to be using these two things throughout

00:02:27.500 --> 00:02:34.100
the presentation. Terminology. First of all,
we have two different main terms that we're

00:02:34.100 --> 00:02:38.920
going to be talking about here. Authentication:
the goal of authentication is to get secure

00:02:38.920 --> 00:02:43.650
knowledge of the identity of the user and
then we're going to talk about authorization

00:02:43.650 --> 00:02:48.910
as well in getting appropriate access to the
user's resources; things like with Google

00:02:48.910 --> 00:02:54.490
Apps, like Calendar, Docs, Spreadsheets and
that sort of thing. First of all, I want to

00:02:54.490 --> 00:03:01.570
talk a little bit about the history of these
protocols. Well, first one here is back in

00:03:01.570 --> 00:03:08.990
2005, Brad Fitzpatrick at LiveJournal invented
this thing called OpenID. And the goal was

00:03:08.990 --> 00:03:14.701
to allow you to use your OpenID account to
login to places--other places around the Web.

00:03:14.701 --> 00:03:19.180
And it was an open protocol so that you could
also use other accounts and other providers

00:03:19.180 --> 00:03:23.130
to login on other places around the web. But
then, the next couple of slides here, we're

00:03:23.130 --> 00:03:27.721
going to be talking about Google's particular
history with authentication and authorization

00:03:27.721 --> 00:03:33.450
protocols. So, back in April of 2006, Google
launched a Calendar API. This was the first

00:03:33.450 --> 00:03:38.260
Google data API based off of the Atom Publishing
Protocol that was being formed at the time.

00:03:38.260 --> 00:03:44.040
And we needed a way to authenticate users
that are--and authorize their data access

00:03:44.040 --> 00:03:48.260
for Calendar. So, if you were writing an application
that used Google Calendar and wanted to mini-play

00:03:48.260 --> 00:03:53.319
the user's Google Calendar and get access
to their data, you needed a way to, you know,

00:03:53.319 --> 00:03:57.410
make sure that the users who they say they
are and tell Google that information. And

00:03:57.410 --> 00:04:01.620
so, use client login, you basically pass a
username and password over to Google. We return

00:04:01.620 --> 00:04:06.910
the Token, you can use that Token then to
access the user's Google Calendar. Well, there's

00:04:06.910 --> 00:04:11.350
a bit of a problem in this in that many applications
then are asking for people's usernames and

00:04:11.350 --> 00:04:17.599
passwords. So, the AuthSub protocol was released
shortly thereafter, in about two moths afterwards,

00:04:17.599 --> 00:04:22.279
and this really solved that challenge. It
basically allowed you, if you were a website,

00:04:22.279 --> 00:04:26.150
instead of asking for the user's user name
and password, you would redirect them over

00:04:26.150 --> 00:04:29.740
to Google, they would enter the username and
password on Google site and again you would

00:04:29.740 --> 00:04:36.259
get a Token to access the user's data. Meanwhile,
you know, Google is doing these proprietary

00:04:36.259 --> 00:04:41.300
protocols, but a lot of standards were underway
in development. We talked a little about OpenID

00:04:41.300 --> 00:04:47.389
earlier. But the OAuth standard came out in
December 2007 that will work of a lot of people

00:04:47.389 --> 00:04:52.490
in the community to really come up with a
standardized version of this web authorization

00:04:52.490 --> 00:04:58.110
scheme that AuthSub was. And the idea behind
this is really just, you know, you learn this

00:04:58.110 --> 00:05:02.349
technology once and you can use it with a
lot of different APIs across the Web. So,

00:05:02.349 --> 00:05:08.729
the OAuth standard was launched then and Google
went about implementing it in June of 2008.

00:05:08.729 --> 00:05:14.440
So, basically, the OAuth was the way to do
a standardized version of what AuthSub allowed

00:05:14.440 --> 00:05:22.009
and have this Web redirect flow. Then, OpenID
launched shortly thereafter for Google consumer

00:05:22.009 --> 00:05:26.249
accounts. If you're Gmail accounts and that
sort of thing, we launched the OpenID protocol

00:05:26.249 --> 00:05:30.789
so that you could login with your Google consumer
account or Gmail account at many different

00:05:30.789 --> 00:05:35.889
websites around the web as long as they were
what's called an OpenID relying party; and

00:05:35.889 --> 00:05:40.789
we'll get into some of that terminology. And
then, OpenID for Google Apps; for those of

00:05:40.789 --> 00:05:47.520
you here and care about Google Apps, it launched
in--last year. And then, finally, the Google

00:05:47.520 --> 00:05:51.430
Apps Marketplace. The Google Apps Marketplace
launched just a couple of months ago and it

00:05:51.430 --> 00:05:56.960
really just is a way that you can sell business
applications to Google Apps customers and

00:05:56.960 --> 00:06:02.099
it uses a lot of these different technologies,
but hopefully in a more user-friendly way

00:06:02.099 --> 00:06:09.659
and hopefully more developer-friendly way.
So, OpenID. OpenID is really for Federated

00:06:09.659 --> 00:06:14.490
Identity; and what do I mean by Federated
Identity? Well, web applications called relying

00:06:14.490 --> 00:06:18.710
parities accept the assertion of identity
from identity providers, such as Google and

00:06:18.710 --> 00:06:22.990
Yahoo. So, if you want to go login to one
of these applications, whether it be Tungle,

00:06:22.990 --> 00:06:29.900
SaaSy Payroll, Aviary, eFax, all of these
services are OpenID relying parties and you

00:06:29.900 --> 00:06:34.699
can login to them using your Google account.
So you don't actually have to create a new

00:06:34.699 --> 00:06:40.580
account and password on each of these sites.
What information do you get as an app developer,

00:06:40.580 --> 00:06:47.169
though? You get essentially this URI. It's
an opaque URI and anonymous identifier, but

00:06:47.169 --> 00:06:53.870
it's static. So, if you visit a web application
today, they get that same URI as if you visit

00:06:53.870 --> 00:06:59.930
it six months from now. So, it allows you
to track users over time, but it is relatively

00:06:59.930 --> 00:07:04.339
anonymous. In the case of Google Apps, it
has the Google App's domain name in it, but

00:07:04.339 --> 00:07:08.770
it has this long string of numbers for the
user's identity. Now, there's more information

00:07:08.770 --> 00:07:13.610
available via OpenID, and we're going to get
to that when you talk about some of the extensions

00:07:13.610 --> 00:07:18.229
that we support. This is kind of like the
mission statement that's on the OpenID web

00:07:18.229 --> 00:07:24.050
site: "OpenID is a safe, faster, and easier
way to login to web sites." So what do we

00:07:24.050 --> 00:07:29.349
mean by that, safe? Well, the user only enters
their credentials in one place: on the website

00:07:29.349 --> 00:07:36.030
or the OpenID provider. That's obvious as
to why that is safe. Faster, the user is often

00:07:36.030 --> 00:07:40.449
logged-in to their OpenID provider and we're
going to see that shortly. So the user really

00:07:40.449 --> 00:07:46.469
just has to authorize passing their identity
to a website. And easier, the user no longer

00:07:46.469 --> 00:07:51.719
needs to create and maintain a bunch of different
accounts. That's obviously a lot easier. I'm

00:07:51.719 --> 00:07:55.399
sure you're all familiar with the problem
of name space collisions while you go to create

00:07:55.399 --> 00:08:00.999
accounts on new sites. And many of you may
reuse your passwords too, so that becomes

00:08:00.999 --> 00:08:07.759
safe as well. Discovery is a really important
part of OpenID, though. You really need to

00:08:07.759 --> 00:08:12.999
be able to determine the OpenID provider for
a particular user. In order to do that, there

00:08:12.999 --> 00:08:18.110
are a couple of different processes. Let's
go into what traditional OpenID was. Traditional

00:08:18.110 --> 00:08:23.999
OpenID, you saw a dialogue box that look like
this. It asks you to enter in your OpenID,

00:08:23.999 --> 00:08:32.099
which was a URL, and you would enter that
in and hit sign in. Now, who actually remembered

00:08:32.099 --> 00:08:40.069
these URLs? Geeks. Geeks were really the only
people that used this original form of OpenID

00:08:40.069 --> 00:08:42.659
because they are the only ones that cared
to create these URLs and remembered these

00:08:42.659 --> 00:08:48.339
URLs. So, over time, there's been a number
of different people getting together and doing

00:08:48.339 --> 00:08:53.430
research on the user experience of OpenID.
And what they came up with was a little better

00:08:53.430 --> 00:09:00.190
forum called the NASCAR in the community where
you present the badges of a lot of different

00:09:00.190 --> 00:09:04.610
providers, identity providers on one single
page. So, this is the NASCAR for Tungle, and

00:09:04.610 --> 00:09:08.860
you can login, you know, via OpenID with your
Google account or your Linkedln account or

00:09:08.860 --> 00:09:13.470
your Yahoo account; lots of different providers
allowing you to login. But this did have one

00:09:13.470 --> 00:09:19.171
important problem. If your provider wasn't
listed there, you couldn't login with that

00:09:19.171 --> 00:09:25.540
provider. So, it basically was up to each
of the relying parties or each web application

00:09:25.540 --> 00:09:32.070
to decide which badges to list there. I'm
going to actually show you an example of an

00:09:32.070 --> 00:09:37.830
interface somewhat like this on Manymoon.
For those of you who aren't familiar with

00:09:37.830 --> 00:09:43.160
Manymoon, Manymoon is a project management
app on Google Apps or that's well-integrated

00:09:43.160 --> 00:09:48.050
with Google Apps. But first, I'm going to
show you logging in with my traditional Google

00:09:48.050 --> 00:09:52.040
account. As you saw over here, I was actually
logged-in to Gmail already. So, logged-in

00:09:52.040 --> 00:09:59.480
to my account and I hit Google here. And because
I'm already logged-in with my email account,

00:09:59.480 --> 00:10:04.290
all I'm required to do really is say, "Yes,
I will allow this website to have access to

00:10:04.290 --> 00:10:10.850
my identity." Fairly simple, a lot easier
than the typical process where you would create

00:10:10.850 --> 00:10:17.490
a new username and password. So, now, Manymoon
actually has access to my name and I hit sign

00:10:17.490 --> 00:10:27.970
up and I'm immediately into Manymoon and able
to create a project and this is a brand new

00:10:27.970 --> 00:10:34.240
account. So, much faster, much easier than
creating a new username and password, verifying

00:10:34.240 --> 00:10:38.610
that password, get an email verification and
all that traditional process that you're used

00:10:38.610 --> 00:10:46.230
to on many websites around the web. So, I
tried to go to the next slide when I was in

00:10:46.230 --> 00:10:53.180
the web browser; that didn't' work. But what
if you want to use OpenID on your own domain?

00:10:53.180 --> 00:10:57.610
If you're a Google Apps user, you have a Google
Apps domain, or if you wanted to use a different

00:10:57.610 --> 00:11:01.579
provider. Let's say, you wanted to use your
MySpace account to login to Tungle, in this

00:11:01.579 --> 00:11:06.130
case, and MySpace wasn't listed there. But
you don't want to have this complicated URL

00:11:06.130 --> 00:11:12.769
to remember. So the ideal user experience
in my opinion is something like this: the

00:11:12.769 --> 00:11:17.379
website would ask you, "What is your email
address?" And you would enter in your email

00:11:17.379 --> 00:11:21.320
address and hit login. Now, isn't it quite
anonymous to some of the initial versions

00:11:21.320 --> 00:11:26.751
of OpenID? But it does create a better user
experience, in my opinion. This is actually

00:11:26.751 --> 00:11:31.819
the ideal goal of the folks that are working
on WebFinger; it's a new up and coming protocol

00:11:31.819 --> 00:11:35.970
that was just discussed a lot earlier this
week from my reading the notes at IAW down

00:11:35.970 --> 00:11:41.829
in Mountain View. So, this is actively under
development, but we're not quite there yet.

00:11:41.829 --> 00:11:48.550
Now, I want to talk a little bit here about
Google accounts versus Google Apps accounts.

00:11:48.550 --> 00:11:52.709
You mentioned--you heard me mention earlier
consumer accounts and Gmail accounts. They're

00:11:52.709 --> 00:11:57.160
actually distinct from Google Apps accounts.
We have two different ways that we store those

00:11:57.160 --> 00:12:02.610
accounts. So, you may see actually on many
websites the ability to login with either

00:12:02.610 --> 00:12:09.209
of them. You'll see a Google button and a
Google Apps button like you do here. And,

00:12:09.209 --> 00:12:13.389
you know, we've really tried with Google Apps
to get somewhere between where we are today

00:12:13.389 --> 00:12:18.019
and what that ideal environment is where you're
just entering your email address. So, on this

00:12:18.019 --> 00:12:23.130
case--in this site, if you enter in or if
you--sorry--if you choose your Google Apps

00:12:23.130 --> 00:12:28.529
account here, you'll be prompted to enter
in your email address or domain name. And

00:12:28.529 --> 00:12:34.660
what this really does is allows OpenID Discovery
process to occur. And Discovery with Google

00:12:34.660 --> 00:12:40.089
Apps domains occurs in two different ways.
The first way I'm showing here is traditional

00:12:40.089 --> 00:12:45.939
OpenID Discovery where in this case the SaaSy
Payroll application is a relying party and

00:12:45.939 --> 00:12:53.779
it goes off to smart-lawfirm.com and says,
"Hey, who is your OpenID provider?" And really,

00:12:53.779 --> 00:12:58.410
you know, that transaction is great except
that many Google Apps customers don't actually

00:12:58.410 --> 00:13:02.910
host their own websites. Many Google Apps
customers just want email and Calendar and

00:13:02.910 --> 00:13:06.819
Docs and that sort of thing; you don't have
a website or don't really understand how to

00:13:06.819 --> 00:13:13.310
setup an OpenID identity information--sorry--Discovery
information on their website, if they do have

00:13:13.310 --> 00:13:20.509
one. So, the second way helps them. You can
check whether smart-lawfirm.com in this case

00:13:20.509 --> 00:13:25.379
has outsourced Discovery to Google. So, for
Google Apps this is necessary. You have to

00:13:25.379 --> 00:13:30.259
go over from a SaaSy Payroll, ask Google,
"Hey, do you know who the OpenID provider

00:13:30.259 --> 00:13:36.529
is for the smart-lawfirm.com?" And Google
will say, "Yep, I'm the OpenID provider" and

00:13:36.529 --> 00:13:43.009
life is golden, and users will be able to
login. Now, the format that you get for these

00:13:43.009 --> 00:13:47.949
two different types of accounts, the format
of the OpenID you get is a little bit different.

00:13:47.949 --> 00:13:51.790
I'm just going to show you these here, so
that you'll recognize if you're storing, you

00:13:51.790 --> 00:13:56.351
know, people's OpenIDs in your database tables.
You recognize that, you know, consumer accounts

00:13:56.351 --> 00:14:04.220
will be on google.com and Google Apps accounts
will be on their own domain names. Now, Google

00:14:04.220 --> 00:14:09.601
supports a number of different extensions
for OpenID. These different extensions are

00:14:09.601 --> 00:14:13.759
listed here. For those of you who are already
somewhat familiar with OpenID, you may recognize

00:14:13.759 --> 00:14:20.100
some of them. I'm going to go into detail
on just two of them. And the first is Attribute

00:14:20.100 --> 00:14:25.949
Exchange. So, remember earlier I talked about
you just get this opaque static identifier

00:14:25.949 --> 00:14:31.161
with OpenID and it looks something like this.
You know that the user is on smart-lawfirm.com,

00:14:31.161 --> 00:14:36.459
but you don't actually know who they are.
Well, as a web application, you want to know

00:14:36.459 --> 00:14:39.519
more information about the user because you
can create a much better user experience.

00:14:39.519 --> 00:14:45.740
You saw that with the Manymoon demo and it
pre-filling my name and password. So, in this

00:14:45.740 --> 00:14:49.700
case, to get more information, use Attribute
Exchange. And Attribute Exchange with Google

00:14:49.700 --> 00:14:54.040
at least will provide things like the first
name, last name, email address, and language

00:14:54.040 --> 00:14:59.290
of the user. Now, Google is a, you know, a
trusted identity provider when it comes to

00:14:59.290 --> 00:15:05.209
the email address. We will verify that the
user's email address really belongs to them.

00:15:05.209 --> 00:15:11.740
But there are some less trusted identity providers
per se that allow users to actually set their

00:15:11.740 --> 00:15:16.209
email address for Attribute Exchange or set
their name and that sort of thing. So, you

00:15:16.209 --> 00:15:21.740
want to actually whitelist the trusted identity
providers and you may want to take a little

00:15:21.740 --> 00:15:28.540
bit of caution on the Attribute Exchange attributes
with the other identity provider. So, more

00:15:28.540 --> 00:15:34.490
information about this is actually on code.google.com
in our Best Practices section and, you know,

00:15:34.490 --> 00:15:39.000
this is really helpful to remember because,
you know, you want to make sure that your

00:15:39.000 --> 00:15:43.279
application is securely using the email address.
Some applications that really, really, really

00:15:43.279 --> 00:15:47.740
want to be sure about that email address,
you still go through that nor--the, you know,

00:15:47.740 --> 00:15:51.399
typical verification process where it sends
an email off to the user and then ask them

00:15:51.399 --> 00:15:57.589
to login with OpenID. But how is all of this
done in practice? You've heard me mention

00:15:57.589 --> 00:16:02.980
a number of different complicated terms, perhaps.
You heard me talk about Attribute Exchange,

00:16:02.980 --> 00:16:07.790
you heard me talk about relying party. It's
not really hard in practice because there

00:16:07.790 --> 00:16:12.129
are a bunch of different libraries out there
for you to use. I'm not going to go suggest

00:16:12.129 --> 00:16:18.889
that each of you handwrites their own OpenID
code. First of all, it can be a little bit

00:16:18.889 --> 00:16:25.269
complicated from the security aspects of it
and likely you'll mess up. Not that I don't

00:16:25.269 --> 00:16:31.050
trust all you development skills, but everyone
messes up when they try to go implement these

00:16:31.050 --> 00:16:35.279
sort of protocols and you don't want to mess
up when it's something, you know, as important

00:16:35.279 --> 00:16:40.759
as securing the identity of your users. So,
there's all these libraries out there. These

00:16:40.759 --> 00:16:44.200
libraries, you know, have been used by the
community and evaluated by the community,

00:16:44.200 --> 00:16:48.939
so you want to check them out. Now, I mentioned
there's those two flavors of OpenID in the

00:16:48.939 --> 00:16:53.411
Discovery proc--or for Google. And the Discovery
process works a little bit different for the

00:16:53.411 --> 00:16:59.829
Google accounts, Gmail accounts versus Google
Apps accounts; all of these libraries supports

00:16:59.829 --> 00:17:05.780
Google Apps accounts in that Discovery process;
some natively and some with some extensions

00:17:05.780 --> 00:17:12.540
that are listed there that are available on
code.google.com. All right. Now, Dave is going

00:17:12.540 --> 00:17:17.020
to come up here and talk about OAuth data
access and getting access to Google Data APIs

00:17:17.020 --> 00:17:24.589
using OAuth for authorization.
&gt;&gt; PRIMMER: Thanks, Ryan. Okay, so OAuth.

00:17:24.589 --> 00:17:31.050
I just want to reiterate some of the things
that Ryan said in the beginning that I'm going

00:17:31.050 --> 00:17:36.500
to be basically covering high level used cases
for OAuth and helping you decide what scenarios

00:17:36.500 --> 00:17:42.250
you're going to--in which scenarios you're
going to actually choose a specific type of

00:17:42.250 --> 00:17:48.420
OAuth or authorization. And I'm not going
to into like the details of all the bugaboos

00:17:48.420 --> 00:17:55.340
around request signing and things like that,
but as Ryan also said, client leverage are

00:17:55.340 --> 00:18:02.660
your friends here, so. The most important
part of understanding OAuth is getting a good

00:18:02.660 --> 00:18:07.810
understanding of the roles involved because
it is an access control system. So, I want

00:18:07.810 --> 00:18:14.970
to go over some terminology to begin with.
First, we have your standard blue cylinder.

00:18:14.970 --> 00:18:21.780
This is a protected resource; it's a Calendar
in this case. And the protected resource actually

00:18:21.780 --> 00:18:28.360
belongs to a resource owner. The resource
owner is the person who approves access to

00:18:28.360 --> 00:18:34.940
the protected resource. And the protected
resource resides on a server and--oh, I wanted

00:18:34.940 --> 00:18:40.010
to back up really quickly and say that the
resource owner is actually an interesting

00:18:40.010 --> 00:18:45.210
role because it could be an individual, in
which case the protected resource would be

00:18:45.210 --> 00:18:52.270
just a calendar--as an individual's calendar--or
it could actually be an organization, a company

00:18:52.270 --> 00:18:55.870
like the Google Apps organization. And in
that case, the protected resource would be

00:18:55.870 --> 00:19:02.891
all of the calendars in that organization.
So, we have the server and the server receives

00:19:02.891 --> 00:19:08.580
an HTTP request form the client. And the client,
in this case, is a client in the sense of

00:19:08.580 --> 00:19:13.870
an HTTP client. SaaSy Payroll, the application
that Ryan mentioned, might actually be a server

00:19:13.870 --> 00:19:23.390
on the internet itself taking requests from
end-users. But in the concepts of OAuth, it's

00:19:23.390 --> 00:19:31.630
basically a client because it's making a request.
So, if you learned about OAuth prior to this

00:19:31.630 --> 00:19:36.610
year, you probably encountered some different
terms. I'm gong to try to actually update

00:19:36.610 --> 00:19:42.500
your understanding of the terminology in this
presentation; I'm going to use the new terms.

00:19:42.500 --> 00:19:49.820
Pre 2009, the term consumer was used instead
of client. Service provider has sort of broken

00:19:49.820 --> 00:19:55.270
out into server and protected resource now.
And user is actually resource owner and sometimes

00:19:55.270 --> 00:20:01.880
user. And for more information on why these
terms changed and more explanations of the

00:20:01.880 --> 00:20:06.230
terminology, you should probably check out
the Authoritative Guide to OAuth 1.0. It's

00:20:06.230 --> 00:20:13.250
written by the author of the spec. And I also
wanted to point out that the RFC that was

00:20:13.250 --> 00:20:22.450
just actually published in April has a pretty
good explanation to terminology and it's a

00:20:22.450 --> 00:20:31.040
pretty readable document, so I recommend that.
So, here are the two main components of OAuth

00:20:31.040 --> 00:20:36.710
that I'm going to be talking about today.
Key management, which is the way that a client

00:20:36.710 --> 00:20:43.880
and a server establish trust and access control.
And access control can actually be done for

00:20:43.880 --> 00:20:52.510
an individual or for a whole group of users
in a Google Apps domain. And thus, this basically

00:20:52.510 --> 00:20:57.940
breaks down to three concrete steps. There's
client registration, where the developer goes

00:20:57.940 --> 00:21:06.060
to the server and does some key management,
registers itself. There's a resource owner

00:21:06.060 --> 00:21:11.800
grant; this has to happen before any resources
can be accessed and then the actual access

00:21:11.800 --> 00:21:20.910
of the resource by the client application.
So, here, we have our SaaSy Payroll app again.

00:21:20.910 --> 00:21:28.160
And SaaSy Payroll actually has a cool feature
that it allows the users to actually add their

00:21:28.160 --> 00:21:31.580
payroll dates to their Google Calendar. So,
it needs to write to the Google Calendar in

00:21:31.580 --> 00:21:35.990
order to do this. And it needs to actually
get the user's permission in order to write

00:21:35.990 --> 00:21:43.510
to the Google Calendar. But before I show
you that access approval step, I wanted to

00:21:43.510 --> 00:21:47.970
kind of basically explain what the developer
of the application like SaaSy Payroll has

00:21:47.970 --> 00:21:54.030
to do in order to do that key management to
establish that trust. So, step one is actually

00:21:54.030 --> 00:21:59.880
for the developer. It's getting an OAuth Key
and Secret. And this step is similar to a

00:21:59.880 --> 00:22:06.330
step you would do as a developer on any Cloud
app--Cloud platform, such as Amazon, they

00:22:06.330 --> 00:22:16.140
have a developer key; Yahoo, NetFlicks and
so on. So, this is the screen actually at

00:22:16.140 --> 00:22:22.510
Google that you would see once you had approved--once
you had proved ownership of the saasyapp.com

00:22:22.510 --> 00:22:29.820
domain. You can see the--I have the OAuth
consumer Key and Secret circled here. These

00:22:29.820 --> 00:22:35.480
are the credentials that the client uses to
identify itself to the server when it makes

00:22:35.480 --> 00:22:42.371
an OAuth request. So, the developer gets these
credentials and uses them in their application.

00:22:42.371 --> 00:22:49.140
So, step two--and so, that's step one, which
is key management--and step two is access

00:22:49.140 --> 00:22:53.620
control. Now, this is actually done by the
resource owner; different party and at a different

00:22:53.620 --> 00:23:01.280
time. But there are two types of access control
specifically in the context of Google Apps.

00:23:01.280 --> 00:23:07.250
And I want to break that out because that
can be sometimes confusing. Much of the documentation

00:23:07.250 --> 00:23:11.890
and introductions you'll see to OAuth cover
purely the consumer used case. It was the

00:23:11.890 --> 00:23:18.410
original used case for the OAuth design. But
since then, actually, a lot of the popularity

00:23:18.410 --> 00:23:27.260
of OAuth has been around using it in a business
context. So, the key difference here is whether

00:23:27.260 --> 00:23:32.600
or not the user is the resource owner. So,
the resource owner in the case of an individual

00:23:32.600 --> 00:23:36.760
is the user itself that would be using the
application. But when it's a company, the

00:23:36.760 --> 00:23:43.670
resource owner is actually the domain administrator
or the person who's in charge of all the data

00:23:43.670 --> 00:23:49.380
for the domain. They actually--essentially
own all of the accounts in the domain. And

00:23:49.380 --> 00:23:55.370
the users still use the applications and they
can control their data and they can also control

00:23:55.370 --> 00:23:59.760
data access, but there's also another party
that's actually making decisions on their

00:23:59.760 --> 00:24:06.010
behalf. So, this is how it splits out; two-legged
OAuth and three-legged OAuth. Three-legged

00:24:06.010 --> 00:24:14.590
OAuth is for the individual use case and two-legged
OAuth is for the business. And here's how

00:24:14.590 --> 00:24:20.800
it works in terms of authorization. Authorization
for three-legged OAuth is done using a browser

00:24:20.800 --> 00:24:29.320
redirect where users add a browser, actually
getting prompted to approve access. And two-legged

00:24:29.320 --> 00:24:34.420
OAuth is more of an out of band operation
where the request is pre-authorized by an

00:24:34.420 --> 00:24:44.610
apps administrator, and the user is not prompted
when they choose to access the resources.

00:24:44.610 --> 00:24:54.400
So, let me show you how an approval might
be done in an apps domain context. And later,

00:24:54.400 --> 00:25:01.340
Ryan's going to actually show you the Marketplace
flow which, if you're a developer for the

00:25:01.340 --> 00:25:06.420
apps Marketplace, you'll see as preferable
to this one. But this sort of breaks out the

00:25:06.420 --> 00:25:13.340
concrete details of the access control decision
that are--that is done by the apps administrator.

00:25:13.340 --> 00:25:20.020
So, here we have the Google Apps control panel.
And this is a screen where you can actually

00:25:20.020 --> 00:25:27.490
create a new grant for a specific application.
Here we already have SaaSy Voice at the bottom

00:25:27.490 --> 00:25:34.330
that has access to Docs in context and we
have fields that actually allow us to create

00:25:34.330 --> 00:25:41.220
a new grant. At the top, we have the resource
owner; it's the administrator, smart-lawfirm

00:25:41.220 --> 00:25:46.740
and we have fields for the client and the
protected resource. So, the administrator

00:25:46.740 --> 00:25:53.570
would actually fill this out and enter in
the consumer key that we saw in the previous

00:25:53.570 --> 00:26:02.060
step that the developer did. And here, I have
the Calendar--the Calendar APIs, the protected

00:26:02.060 --> 00:26:08.210
resource. When you authorize that, it becomes
another one of the access control entries

00:26:08.210 --> 00:26:12.960
for the domain. So, from her on out, SaaSy
App can actually access the Calendar for all

00:26:12.960 --> 00:26:22.100
the users in that company. So, that's step
two, access control. And step three is actually

00:26:22.100 --> 00:26:28.880
when the developer chooses to access the resources.
This might be when the user actually uses

00:26:28.880 --> 00:26:34.340
their application or it could be, you know,
even when the user is not around. So, I'm

00:26:34.340 --> 00:26:41.070
going to give you a demo of a two-legged OAuth
cURL and this is basically just a teaching

00:26:41.070 --> 00:26:51.870
aid to try to show you how the protocol works
from a--from a wire protocol standpoint. So,

00:26:51.870 --> 00:26:58.640
I've written a little cURL application using
the Google Data APIs client libraries and

00:26:58.640 --> 00:27:05.650
this application has just a few parameters.
And when I execute it, it should give me a

00:27:05.650 --> 00:27:12.220
listing of the parameters for this two-legged
OAuth call. So, this is essentially doing--if

00:27:12.220 --> 00:27:17.650
you use cURL, it's got a URL that you're--that
it's accessing. It's got the HTTP method which

00:27:17.650 --> 00:27:23.810
is a get. And in this case, I've also included
another parameter, which is ryan@smart-lawfirm.com.

00:27:23.810 --> 00:27:29.860
This is the user that we'd like to access
the Calendar resources for. As you can see,

00:27:29.860 --> 00:27:35.010
the Calendar URL does not have user context
in it, so it actually gets this from the user

00:27:35.010 --> 00:27:41.990
parameter. And then the final two are the
consumer key and consumer secret--I'll highlight

00:27:41.990 --> 00:27:48.790
them here. So, the consumer key and the consumer
secret are those credentials that the developer

00:27:48.790 --> 00:27:59.160
obtained and that the administrator authorized
in the second step. So, let me show you what

00:27:59.160 --> 00:28:05.870
happens when this actually is sent in an HTTP
request. I have here the actually raw HTTP

00:28:05.870 --> 00:28:11.570
request and the beginnings of the response.
And the thing that makes this OAuth, makes

00:28:11.570 --> 00:28:22.010
it different than just a regular HTTP request
is the authorization header. Oops. See, here.

00:28:22.010 --> 00:28:26.890
This is what--this is the--basically the header
that my client library had created with the

00:28:26.890 --> 00:28:35.110
parameters that I provided it. And you can
see there it specified the consumer key, there's

00:28:35.110 --> 00:28:38.800
notes, time stamps, signature--I'm not going
to go into details of all--how these things

00:28:38.800 --> 00:28:44.450
are generated or what they mean, but that
is essentially the information that the server

00:28:44.450 --> 00:28:50.030
receives. It allows it to validate the credentials
of the client and trust that the response

00:28:50.030 --> 00:28:55.680
was created by someone who they know. So,
the response, as you can see, that comes back

00:28:55.680 --> 00:29:02.690
from the calendar server or--I'm sorry, in
this case the contact server is the Atom XML

00:29:02.690 --> 00:29:11.331
representation of Ryan's contacts. So that's
a really simple HTTP request and that's what

00:29:11.331 --> 00:29:23.180
really OAuth is. So, what did we just see?
We saw an authenticated HTTP request where

00:29:23.180 --> 00:29:27.401
the client has essentially a role account,
name, and password; that's the consumer key

00:29:27.401 --> 00:29:33.010
and consumer secret. In addition, there's
another parameter which is the OAuth requester

00:29:33.010 --> 00:29:39.310
ID, ryan@smart-lawfirm.com. This is a Google
specific parameter. It allows the Google Calendar

00:29:39.310 --> 00:29:46.190
server to know whose Calendar that they need
to access. And, essentially, is some of the

00:29:46.190 --> 00:29:51.300
request attributes are bundled up and signed
in a standard way. That's what the OAuth specifications

00:29:51.300 --> 00:29:58.460
tells you how to do, which is the signing.
So, why would you want to use two-legged OAuth?

00:29:58.460 --> 00:30:02.990
Well, the most important reason is you don't
want to actually prompt the users for their

00:30:02.990 --> 00:30:09.890
approval. This is common in enterprise software
scenario where you'd provision an application

00:30:09.890 --> 00:30:14.870
for an entire set of users and, you know,
once you've installed it for them they shouldn't

00:30:14.870 --> 00:30:20.350
have to, you know, click through more prompts
saying, "Yes, yes, yes, I want to use this."

00:30:20.350 --> 00:30:25.890
It's also appropriate for server to server
communication. There's no browser needed.

00:30:25.890 --> 00:30:34.450
It works for essentially web services authentication
to do batch processing or background tasks.

00:30:34.450 --> 00:30:39.220
And the main trust relationship is that the
resource owners tells the server via an ACL

00:30:39.220 --> 00:30:45.180
to trust the client and this ACL is usually
stored server side and there's no Token involved

00:30:45.180 --> 00:30:52.600
to transmit the credentials. So, now, let
me show you the other style of authorization,

00:30:52.600 --> 00:30:56.510
three-legged OAuth it--which is three-legged
OAuth. And this is the one that you're probably

00:30:56.510 --> 00:31:04.330
more familiar with, the one that you've seen
demoed repeatedly. In three-legged OAuth,

00:31:04.330 --> 00:31:12.110
basically, what we have is a delegation by
an individual to a client. And it's basically

00:31:12.110 --> 00:31:19.850
the process where the user's browser is redirected
to a server. The user says, "Yes, I'll allow

00:31:19.850 --> 00:31:27.140
this to happen." And in the process, the Token
is actually transmitted to the client that

00:31:27.140 --> 00:31:33.100
essentially encodes those--that permission
grant. And here, I've showed you--I've shown

00:31:33.100 --> 00:31:38.180
you that--what an OAuth Token essentially
looks like. This would be in the authorization

00:31:38.180 --> 00:31:43.860
header that we saw earlier. It's encoding
essentially the permission grant: "Joe gives

00:31:43.860 --> 00:31:49.370
the SaaSy Payroll client permission to write
to Joe's Google Calendar." In three-legged

00:31:49.370 --> 00:31:53.521
OAuth, in the last step where the access--where
the resources were accessed is basically a

00:31:53.521 --> 00:32:02.340
two-legged OAuth call plus this Token. So,
here's our SaaSy app Payroll again and let

00:32:02.340 --> 00:32:07.530
me show you briefly what this looks like to
the end-user. You could see here this is the

00:32:07.530 --> 00:32:13.590
link at the bottom where the user would click
to actually approve the access to the Google

00:32:13.590 --> 00:32:19.750
Calendar. When they click that, they're redirected
to the Google server and you can see here

00:32:19.750 --> 00:32:25.480
are three actors again: the resource owner,
which in this case is ryan@smart-lawfirm;

00:32:25.480 --> 00:32:32.650
the client, saasyapp.com; and the protected
resource, the Calendar. When they grant access

00:32:32.650 --> 00:32:38.900
to this, they are sent back to the SaaSy App
Payroll application and it's writing entries

00:32:38.900 --> 00:32:43.880
into their Calendar. So, why would you want
to use three-legged OAuth? Well, it's appropriate

00:32:43.880 --> 00:32:49.450
for the case where the individual is actually
granting access to the resources. It's also

00:32:49.450 --> 00:32:55.080
interesting because the user's identity can
remain opaque. The user's identity is encoded

00:32:55.080 --> 00:33:04.160
into the Access Token and the client never
actually has to know the identity of the user.

00:33:04.160 --> 00:33:08.550
And, again, the user is the resource owner
and trust the client with an access Token.

00:33:08.550 --> 00:33:14.120
So, that's pretty much what I wanted to cover
today. But before I go, let me briefly give

00:33:14.120 --> 00:33:19.370
you an overview of what's coming in the future
and that would be OAuth2. And you might be

00:33:19.370 --> 00:33:26.520
asking, "Well, OAuth1 is pretty young, why
would we already be doing OAuth2?" Well, some

00:33:26.520 --> 00:33:33.050
of the reasons are that the authors of OAuth1
wanted to make OAuth an IETF standard. So,

00:33:33.050 --> 00:33:38.410
they started the process of standardizing
it. And in the meantime, a bunch of new used

00:33:38.410 --> 00:33:46.780
cases were codified in a protocol named OAuth
Wrap. OAuth Wrap is a departure form OAuth1

00:33:46.780 --> 00:33:51.910
that actually requires a significant change
to the protocol. So, they wanted to increment

00:33:51.910 --> 00:33:59.650
the number and Wrap then got folded into the
process of IETF standardization. And what

00:33:59.650 --> 00:34:06.000
Wrap actually allows you to do is avoid a
lot of the request signing that you need to

00:34:06.000 --> 00:34:12.960
do with OAuth 1.0. So, Facebook already has
a working OAuth2 prototype, Microsoft and

00:34:12.960 --> 00:34:20.830
Google have working Wrap prototypes. Google
intends to support OAuth2. It's not quite

00:34:20.830 --> 00:34:31.490
ready yet. It's almost there, but they're
still working on a few--a few edge cases and

00:34:31.490 --> 00:34:36.250
it's being debated right now in the IETF mailing
list. And if you go to that link at the bottom

00:34:36.250 --> 00:34:39.440
of the slide, you can actually read the current
spec to get a sense of the direction of OAuth2.

00:34:39.440 --> 00:34:44.530
I think you'll find that it's going to be
easier to implement. You'll have to rely less

00:34:44.530 --> 00:34:51.440
on client libraries in order to get it right.
So, now, I want to send it back to Ryan, whose

00:34:51.440 --> 00:34:56.570
going to actually show you how you can use
OpenID and OAuth together to make you users

00:34:56.570 --> 00:35:02.860
experience even more seamless.
&gt;&gt; BOYD: Thanks, Dave. All right. So, as he

00:35:02.860 --> 00:35:07.380
mentioned I want to talk about how you can
use both of these together. As you can imagine,

00:35:07.380 --> 00:35:11.270
there are many times that you want to get
access to the user's identity and you want

00:35:11.270 --> 00:35:15.520
to get access to the user's data. And you
don't want to have to do these in two separate

00:35:15.520 --> 00:35:20.610
steps. This is what the Hybrid OpenID and
OAuth protocol is all about. So, we could

00:35:20.610 --> 00:35:26.460
see here in the case of smart-lawfirm.com
and SaaSy App. So, SaaSy App is actually asking

00:35:26.460 --> 00:35:31.102
for some information form my account. You
saw earlier the email address. It was asking

00:35:31.102 --> 00:35:35.560
for my email address, it was asking for my
name. But now, you can see in addition to

00:35:35.560 --> 00:35:42.410
asking for my email address, it's also asking--sorry--for
access to my Google Calendar; and it's a one

00:35:42.410 --> 00:35:49.790
step grant here. And after that grant is given,
the application not only has access to my

00:35:49.790 --> 00:35:57.300
identity, but it also has access to write
to my Google Calendar. Now, the Google Apps

00:35:57.300 --> 00:36:01.160
Marketplace. It sounded like only a couple
of you actually went to the earlier sessions

00:36:01.160 --> 00:36:05.040
on the Google Apps Marketplace, so I'll give
you a really brief intro. Basically, it's

00:36:05.040 --> 00:36:09.740
a place for you as developers to go and sell
your applications to businesses. These are

00:36:09.740 --> 00:36:16.760
business-focused applications that you want
to sell in a Marketplace format. And so, when

00:36:16.760 --> 00:36:20.460
you go and you list your application on the
Google Apps Marketplace, you end up creating

00:36:20.460 --> 00:36:25.410
a page that looks something like this. This
is the SaaSy Payroll application as listed

00:36:25.410 --> 00:36:29.450
on the Marketplace. And it's basically a place
that Google Apps domain administrators can

00:36:29.450 --> 00:36:34.640
come and purchase your applications and then
they're managing kind of a standardized fashion

00:36:34.640 --> 00:36:39.570
for Google Apps customers. So, all the Cloud
applications for--that a company needs to

00:36:39.570 --> 00:36:44.720
run their business are all available in one
place. When you do that, then as a developer

00:36:44.720 --> 00:36:49.250
you create this listing page. And as an administrator,
you can click that "add it now" button to

00:36:49.250 --> 00:36:54.740
immediately install the application on your
Google Apps domain. Now, what does this mean?

00:36:54.740 --> 00:36:58.780
Well, users is probably what you care about;
it's what we care the most about. And this

00:36:58.780 --> 00:37:04.480
really makes it a lot easier for users to
access your applications. So, many users,

00:37:04.480 --> 00:37:08.780
including myself, unfortunately spend most
of our day sitting in email. Email is kind

00:37:08.780 --> 00:37:13.520
of the center of the business universe and
you want to be able to access all your Cloud

00:37:13.520 --> 00:37:17.760
applications right from within your email.
So, that's what we've done with these Marketplace

00:37:17.760 --> 00:37:22.530
applications. At the top of email, Calendar,
and Docs and all the other Google Apps, you'll

00:37:22.530 --> 00:37:28.170
see this more menu, once you install an application,
and then you can access the application directly

00:37:28.170 --> 00:37:33.120
from that more menu. It's really simple. And
once we click on that SaaSy Payroll in the

00:37:33.120 --> 00:37:38.470
more menu, we're immediately into the SaaSy
Payroll Application. We're not prompted as

00:37:38.470 --> 00:37:43.460
a user to grant access to our identity or
grant access to our data. This is all done

00:37:43.460 --> 00:37:48.110
by the domain administrator at the time that
they install the application. So, there's

00:37:48.110 --> 00:37:54.860
none of this. There's none of this. And it
makes it really a much better user experience.

00:37:54.860 --> 00:37:59.720
Now, how does the main administrator grant
the access? Well, you can see this screen

00:37:59.720 --> 00:38:04.150
here is the second step during the install
flow of a Marketplace application. And there,

00:38:04.150 --> 00:38:09.020
the SaaSy Payroll application--actually, the
SaaSy Voice application--I forgot to swap

00:38:09.020 --> 00:38:15.120
out the screen shot--but is asking for access
to a particular set of data; in this case,

00:38:15.120 --> 00:38:19.610
the user provisioning APIs, so a list of all
the users on the domain; in this case also

00:38:19.610 --> 00:38:24.150
the Google Docs API and the Contacts API.
And the application developer actually has

00:38:24.150 --> 00:38:29.270
a chance to tell the administrator why they're
asking for that data too. So, the administrator

00:38:29.270 --> 00:38:35.940
can make an informed decision on behalf of
the whole organization. But then, you're probably

00:38:35.940 --> 00:38:40.990
wondering, "Well, how do I, as an app developer,
access this data? Once the administrators

00:38:40.990 --> 00:38:46.300
installed the application and made the data
available for me, how do I access it?" Well,

00:38:46.300 --> 00:38:51.460
Dave talked to you about two-legged OAuth
and here is actually, instead of registering

00:38:51.460 --> 00:38:55.630
a domain name and getting a consumer Key and
Secret, as a Marketplace developer, when you

00:38:55.630 --> 00:39:00.220
create your Marketplace listing, you actually
have an option here at the bottom that says,

00:39:00.220 --> 00:39:05.000
"View OAuth consumer key." And when you do
that, you get a consumer Key and Secret for

00:39:05.000 --> 00:39:10.810
your application. And that consumer Key and
Secret can then be used to access all of the

00:39:10.810 --> 00:39:16.240
data that was granted to you by domain administrators.
So, as an application, you can then use that

00:39:16.240 --> 00:39:22.020
consumer Key and Secret to identify your application
and access the data for each of the users

00:39:22.020 --> 00:39:27.840
on the domains which have installed the app
and the domain administrators have granted

00:39:27.840 --> 00:39:32.480
access; much simpler. And now, I just kind
of want to go through like a summary of the

00:39:32.480 --> 00:39:38.400
different protocols that we've talked about
today before going into our SaaSy Payroll

00:39:38.400 --> 00:39:45.010
kind of mysterious timeline here. So, summary
of the protocols. Client login was the original

00:39:45.010 --> 00:39:50.170
protocol we talked about with Google Calendar.
You don't want to use this for new applications.

00:39:50.170 --> 00:39:54.400
You don't want to get the user's username
and password. AuthSub was kind of the precursor

00:39:54.400 --> 00:39:58.350
at Google at least to the OAuth protocol.
You don't really want to use that for new

00:39:58.350 --> 00:40:04.200
applications. Then, you have three-legged
OAuth, which you use that to get access for

00:40:04.200 --> 00:40:09.150
individual user's data. And the user--the
individual user is the resource owner and

00:40:09.150 --> 00:40:14.730
they're authorizing access to that data. Two-legged
OAuth, you want to get access to a whole company's

00:40:14.730 --> 00:40:18.990
data or domain's data; you can use two-legged
OAuth to do that, and the administrator is

00:40:18.990 --> 00:40:24.369
granting the access. And then, we'll go back
to the first section of this presentation

00:40:24.369 --> 00:40:29.590
on identity OpenID. Vanilla OpenID, you can
use to get access to a user's identity and

00:40:29.590 --> 00:40:34.150
with Attribute Exchange information, their
name and email address. And that can be used

00:40:34.150 --> 00:40:39.220
as Vanilla OpenID for Gmail accounts. For
Google Apps accounts, you have to do OpenID

00:40:39.220 --> 00:40:42.740
with the Google Apps Discovery extensions,
and again, there's libraries available for

00:40:42.740 --> 00:40:46.920
that that provides the identity of Google
Apps users. And then, finally, the OpenID

00:40:46.920 --> 00:40:52.470
and OAuth Hybrid that I talked about allows
users visiting your web application directly

00:40:52.470 --> 00:40:58.030
to provide access to their identity and their
data all in one step. And this really allows

00:40:58.030 --> 00:41:03.370
you to onboard new users much faster than
you would be able to with these other protocols.

00:41:03.370 --> 00:41:06.780
Now, I really want to show you the evolution
of how all these technologies take place in

00:41:06.780 --> 00:41:14.930
this fictitious app, SaaSy Payroll. So, back
when SaaSy Payroll has existed for a long

00:41:14.930 --> 00:41:18.630
period of time and they have a users table
in their database that looks something like

00:41:18.630 --> 00:41:24.190
this. There's an email address and then there's
a password, hopefully it's a hash of a password,

00:41:24.190 --> 00:41:28.820
and they have that information stored in their
database. And every user that comes to the

00:41:28.820 --> 00:41:31.920
application needs to create an account. And
we'll actually show you that user experience

00:41:31.920 --> 00:41:40.650
here with a quick video. So, I, as a new user
go to the SaaSy Payroll application, I say,

00:41:40.650 --> 00:41:45.560
"I don't have an account. I want to create
one. Fill in my name, fill in my email address,

00:41:45.560 --> 00:41:51.320
fill in a password, make a quick typo, correct
it, hit sign in." And then, told, I need to

00:41:51.320 --> 00:41:56.990
confirm my account and I hop over to email,
click on a link--and this is a little bit

00:41:56.990 --> 00:42:05.099
sped up over normal but--I'm then logged in
and can see my payroll information. So, then,

00:42:05.099 --> 00:42:09.700
the SaaSy Payroll application, you know, all
along has been trying to figure out different

00:42:09.700 --> 00:42:14.970
ways to provide access to the data about when
users get paid. Their customers have really

00:42:14.970 --> 00:42:20.180
been requesting that they use Google Calendar
and they want access to their upcoming payroll

00:42:20.180 --> 00:42:23.910
dates on their Google Calendar, so that they--it's
a lot easier for them to find out when they're

00:42:23.910 --> 00:42:29.460
going to get paid. So, when Google launched
the Google Calendar API and then launched

00:42:29.460 --> 00:42:34.870
after that the AuthSub protocol for authorization,
they implemented this. And their users table

00:42:34.870 --> 00:42:39.390
and their database basically stores that Token
that they get from AuthSub. And this Token

00:42:39.390 --> 00:42:45.580
allows them to access the user's Google Calendar
and input--or update their Calendar with their

00:42:45.580 --> 00:42:55.369
next upcoming payroll days. And here is the
user experience for that.

00:42:55.369 --> 00:42:59.040
So, they're in the SaaSy Payroll application
already, they've already logged-in, they click

00:42:59.040 --> 00:43:04.550
a button that says, "Add dates to your Google
Calendar," they go to the AuthSub page and

00:43:04.550 --> 00:43:11.780
they grant access to their Calendar and now
their payroll dates are added to their Calendar.

00:43:11.780 --> 00:43:17.040
And you can see here we go over to Gmail and
go to Calendar and you can see the payroll

00:43:17.040 --> 00:43:21.670
dates. You know a much more helpful way of
knowing when your upcoming pay dates are than

00:43:21.670 --> 00:43:27.330
actually going into your payroll application
to find out that information. So, now, you

00:43:27.330 --> 00:43:33.220
know, they've had a lot of Google customers,
a lot of Google Apps customers and they didn't

00:43:33.220 --> 00:43:36.850
want to have to create new accounts in order
to access the SaaSy Payroll application. They

00:43:36.850 --> 00:43:40.280
didn't want to have to come up with a new
password; they don't want to confirm that

00:43:40.280 --> 00:43:46.000
email that we talked about. So, when Google
launched OpenID for Google Apps, they said,

00:43:46.000 --> 00:43:49.860
"We want to take advantage of that. We want
to allow users to login with their existing

00:43:49.860 --> 00:43:54.590
accounts. So, their users table and their
database had to grow a little bit to store

00:43:54.590 --> 00:44:00.900
these OpenIDs. So, we can see Jane at google.com
has an OpenID in this table and does not have

00:44:00.900 --> 00:44:06.500
a password because SaaSy Payroll doesn't need
to know Jane's password because SaaSy Payroll

00:44:06.500 --> 00:44:13.760
can rely upon Google to assert that identity.
So, they store the OpenID, these users still

00:44:13.760 --> 00:44:20.000
has granted access to their Calendar, so they
again have that AuthSub Token there. And here's

00:44:20.000 --> 00:44:28.940
the user experience for that. So, on the front
page of the SaaSy Payroll they can login with

00:44:28.940 --> 00:44:33.340
their account, they enter in their email address
or their Google Apps account. It parts across

00:44:33.340 --> 00:44:40.360
the domain name and then they grant access
to SaaSy Voice to have access to their identity.

00:44:40.360 --> 00:44:43.770
And now, their information is pre-filled.
Their name and their email address is already

00:44:43.770 --> 00:44:49.150
there and they never had to create a new username
and password. Again, we'll go through the

00:44:49.150 --> 00:44:55.250
AuthSub flow where you click and grant access
to Calendar. And now, not only does SaaSy

00:44:55.250 --> 00:45:00.010
Payroll have access to their identity but
also access to their Google Calendar to display

00:45:00.010 --> 00:45:09.550
the upcoming payroll dates. Now, you saw there's
two separate access grants. The first access

00:45:09.550 --> 00:45:14.860
grant was the user granting access to the
SaaSy Payroll application to know their identity,

00:45:14.860 --> 00:45:21.510
to know who they are. The second access grant
was them granting access to their Google Calendar.

00:45:21.510 --> 00:45:26.369
Well, we want to combine these together. And
we talked about the Hybrid OpenID and OAuth

00:45:26.369 --> 00:45:31.380
protocol. So, the SaaSy Payroll folks when
we release that, implemented that protocol--but

00:45:31.380 --> 00:45:35.000
there's one key difference here because previously
they were getting access to users data via

00:45:35.000 --> 00:45:39.360
AuthSub; now, they're getting access to the
users data via OAuth. It's a little bit of

00:45:39.360 --> 00:45:42.980
a different protocol and has a little more
information. So, we could see the changes

00:45:42.980 --> 00:45:48.150
to our database table here. We added a type
column to indicate the type of the Token that

00:45:48.150 --> 00:45:52.670
we have, whether it is an AuthSub Token or
a three-legged OAuth Token, and then we added

00:45:52.670 --> 00:45:57.920
a secret column, which is necessary for three-legged
OAuth. Because three-legged OAuth in addition

00:45:57.920 --> 00:46:03.480
to having a Token has a Token secret. So,
we need to store that information. And, again,

00:46:03.480 --> 00:46:09.970
I want to show you the user experience for
this flow of the Hybrid on-boarding. Again,

00:46:09.970 --> 00:46:19.090
it's much more improved over the previous
flow. We go in and we login with our account.

00:46:19.090 --> 00:46:23.220
And now, you can see like, you know, we saw
in previous screenshots we're being accessed

00:46:23.220 --> 00:46:29.370
for the Calendar and their identity. So, we're
in SaaSy Payroll, it knows my identity, and

00:46:29.370 --> 00:46:34.800
it already is having dates added to your Google
account. There is no need for that second

00:46:34.800 --> 00:46:40.510
grant to happen by the end-user. Of course,
then in March of this year we launched the

00:46:40.510 --> 00:46:45.160
Google Apps Marketplace. And the Google Apps
Marketplace is a place for businesses to buy

00:46:45.160 --> 00:46:49.930
applications for the entire company. Well,
instead of having individual users coming

00:46:49.930 --> 00:46:56.030
into the SaaSy Payroll application in small
bunches, they can now buy the SaaSy Payroll

00:46:56.030 --> 00:46:59.540
application for the entire company of a lot
of users at once. So, in this case here, you

00:46:59.540 --> 00:47:04.840
see that a number of users are added to the
database table. Each of them have their OpenID

00:47:04.840 --> 00:47:10.500
because they've logged into the application
and we have this type column here. The type

00:47:10.500 --> 00:47:15.570
column here has one additional value that
we haven't seen before and it's two LOs. So,

00:47:15.570 --> 00:47:21.800
these users are actually having--sorry--their
data access has been granted by their domain

00:47:21.800 --> 00:47:26.990
administrator when they installed the application.
So, we know that's a two-legged OAuth requester

00:47:26.990 --> 00:47:32.940
then since, you know, Dave talked about that.
And for the two-legged OAuth request, in addition

00:47:32.940 --> 00:47:37.820
to the three-legged OAuth request, the SaaSy
Payroll application needs to identify itself.

00:47:37.820 --> 00:47:42.140
It needs to say, you know, "Here's my consumer
key" and, you know, "I have my consumer secret

00:47:42.140 --> 00:47:50.160
and I'm identifying myself to Google." And
I'm then able to access these users all without

00:47:50.160 --> 00:47:55.220
having a Token or a Token secret. I don't
need to have those for individual users because

00:47:55.220 --> 00:47:59.000
the domain administrator has granted access
on my behalf. Now, I should stay here--say

00:47:59.000 --> 00:48:05.230
here you want to store that consumer Key and
Secret securely somewhere. Your database table

00:48:05.230 --> 00:48:09.050
isn't the right place for it here especially
because it's not different for any of these

00:48:09.050 --> 00:48:14.442
users and you want to store it securely on
your server somewhere else. So, I'll show

00:48:14.442 --> 00:48:19.140
you what the user experience is for the Google
Apps Marketplace, again, much more improved

00:48:19.140 --> 00:48:24.150
for the individual end-users. So, first of
all, we'll show the domain administrator experience.

00:48:24.150 --> 00:48:31.390
They click the "add it now" button and they
say, "I'm smart-lawfirm.com," they hit install

00:48:31.390 --> 00:48:36.290
and they go in and they grant the terms of
service, which is a very simple terms of service.

00:48:36.290 --> 00:48:41.350
They grant access to the Calendar data in
this case--and I forgot to use extra cell

00:48:41.350 --> 00:48:48.850
on this mock--sorry. And then, they enable
the application. The admin at smart-lawfirm

00:48:48.850 --> 00:48:55.020
enables the application for the entire company.
Now, let's show what each individual end user

00:48:55.020 --> 00:48:59.460
experiences. They go into their email where
they are every day and they click on the universal

00:48:59.460 --> 00:49:07.930
navigation link for the SaaSy Payroll application.
And once they click on that, they are immediately

00:49:07.930 --> 00:49:12.040
into the SaaSy Payroll application. It knows
who they are. They haven't had to, you know,

00:49:12.040 --> 00:49:16.250
grant access specifically because their administrator
has done that. And you can also see that the

00:49:16.250 --> 00:49:20.359
dates are already being added to their Calendar.
All of these happened without the individual

00:49:20.359 --> 00:49:24.220
end user having to do the grants because the
domain administrator is the resource owner

00:49:24.220 --> 00:49:29.310
and has granted access for that. So, you can
see here in the evolution of SaaSy Payroll

00:49:29.310 --> 00:49:33.640
application how much easier it has gotten
for end users and how much easier its gotten

00:49:33.640 --> 00:49:37.490
for domain administrators to not have to deal
with the questions from the end users as to

00:49:37.490 --> 00:49:41.190
what, you know, data they can grant access
to and that sort of thing. The administrator

00:49:41.190 --> 00:49:50.230
owns the data. They can decide what access
to grant and then it's a much easier process.

00:49:50.230 --> 00:49:55.640
So, improved user experience, much easier
on-boarding for users, access is granted by

00:49:55.640 --> 00:50:01.970
the appropriate resource owners. And then,
with the Marketplace, for those of you who

00:50:01.970 --> 00:50:05.140
don't know, you have access to over two million
businesses that are running Google Apps. There

00:50:05.140 --> 00:50:09.310
are 25 million users in those businesses.
We're adding about 3,000 new businesses every

00:50:09.310 --> 00:50:15.890
day to Google Apps, so it's a great place
to list and sell your Web application. There

00:50:15.890 --> 00:50:20.240
is one little hazard to this as you saw with
the user table, you know, expanding over and

00:50:20.240 --> 00:50:24.900
over again is that there is multiple code
pass. User and developer are probably a little

00:50:24.900 --> 00:50:28.510
concerned about this. You have different ways
to get access to a user data and to get access

00:50:28.510 --> 00:50:34.240
to their identity and you get multiple code
pass. Well, sometimes we, developers, just

00:50:34.240 --> 00:50:37.500
kind of have to deal with those sort of things
in order to make the user experience much

00:50:37.500 --> 00:50:43.460
better. So, resources. I want to give you
a list of some resources that you can use

00:50:43.460 --> 00:50:47.990
to follow-up on some of these things. The
first resource here is for the Google Apps

00:50:47.990 --> 00:50:51.540
Marketplace. If you're not familiar with it,
that's kind of some technical documentation

00:50:51.540 --> 00:50:55.660
and business documentation on the Google Apps
Marketplace. And then, we use some technical

00:50:55.660 --> 00:51:00.590
docs on Google Apps, on OpenID and OAuth.
And then, finally, something we didn't actually

00:51:00.590 --> 00:51:05.680
get a chance to talk with you about today;
the OAuth playground. So, Dave demoed using

00:51:05.680 --> 00:51:10.619
two-legged OAuth and using his command line
application to perform two-legged OAuth request.

00:51:10.619 --> 00:51:13.930
There's a great tool out there called the
OAuth playground that does similar things

00:51:13.930 --> 00:51:21.411
for three-legged OAuth and it's all a web-based
tool. You guys should check that out. And

00:51:21.411 --> 00:51:26.200
now, we're going to go into our question and
answer period. And as a reminder, you can

00:51:26.200 --> 00:51:30.970
go to bit.ly/magicwave to ask any questions
you might have. And we're going to be switching

00:51:30.970 --> 00:51:35.350
our projector over here to this other computer
with the questions.

00:51:35.350 --> 00:51:42.310
&gt;&gt; PRIMMER: Yeah, go ahead.
&gt;&gt; BOYD: I'll let you take the first one here,

00:51:42.310 --> 00:51:48.400
Dave.
&gt;&gt; PRIMMER: All right. So, the first question

00:51:48.400 --> 00:51:52.300
is about the Google Apps control panel and
if there's any way to actually control OAuth

00:51:52.300 --> 00:52:00.750
Tokens from the control panel for expiration
and so on. So, the question here is about

00:52:00.750 --> 00:52:06.350
whether or not there's administrator control
over the individual user grants in an apps

00:52:06.350 --> 00:52:13.050
domain. So, a Google Apps user can still do
the three-legged OAuth dance as Ryan showed

00:52:13.050 --> 00:52:16.130
you. They're not restricted to just using
two-legged OAuths just because they're in

00:52:16.130 --> 00:52:21.570
a Google Apps domain. So, they could have
actually Tokens that have been granted to

00:52:21.570 --> 00:52:26.540
client application. So, the question is whether
or not an apps administrator can actually

00:52:26.540 --> 00:52:32.770
control those Tokens. And currently, they
cannot do that in the control panel. It's

00:52:32.770 --> 00:52:39.490
a great suggestion and we would--we would
love to be able to provide this sort of capability.

00:52:39.490 --> 00:52:43.460
One of the things that we've--one of the piece
of feedback we've got from administrators

00:52:43.460 --> 00:52:46.750
when we first showed them the Marketplace
is that they'd actually like to be able to

00:52:46.750 --> 00:52:51.380
possibly turn off three-legged OAuth grants
for all of their users globally, so they could

00:52:51.380 --> 00:52:56.030
only be the--they could be the only ones that
are actually granting access to their users

00:52:56.030 --> 00:53:02.589
and the users couldn't actually grant by themselves.
&gt;&gt; BOYD: So, I'll take the next one then.

00:53:02.589 --> 00:53:07.150
&gt;&gt; PRIMMER: Oh, all right. Good.
&gt;&gt; BOYD: What about OAuth, OAuth-ing the Android

00:53:07.150 --> 00:53:12.250
phones? There is--you could definitely, as
an application developer for Android, use

00:53:12.250 --> 00:53:19.840
OAuth for getting access to user's data from
an Android device. Actually, we did a session

00:53:19.840 --> 00:53:24.800
at Google I/O last year, which is the Mobile
Social or something like that. You can look

00:53:24.800 --> 00:53:29.780
it up on YouTube. And as part of that, I actually
wrote an Android app that opened up OAuth

00:53:29.780 --> 00:53:36.260
in a web browser allowed granting access.
The trick here is you need a URL or in the

00:53:36.260 --> 00:53:41.960
version of OAuth that I used at the time you
need a URL to redirect back to once the access

00:53:41.960 --> 00:53:45.540
was granted in the web browser. The nice thing
about Android is they actually allow you to

00:53:45.540 --> 00:53:50.330
register protocol handlers. So, I registered
a particular protocol that went back into

00:53:50.330 --> 00:53:57.170
my application with that Token. There is a
new version of OAuth that allows you to do

00:53:57.170 --> 00:54:02.730
both desktop applications, mobile applications
and also things like, you know, embedded devices

00:54:02.730 --> 00:54:08.850
and all where you don't require that redirect.
So, you can explore using that as well. And

00:54:08.850 --> 00:54:12.710
why don't we take the question that's in the
audience here?

00:54:12.710 --> 00:54:18.970
&gt;&gt; I have two questions. One is about the
OpenID libraries that you mentioned in the

00:54:18.970 --> 00:54:22.960
screens. Could you comment anything on the
Python Libraries if there's any?

00:54:22.960 --> 00:54:26.670
&gt;&gt; BOYD: Sure. I can comment, but it's not
going to be a comment that you like.

00:54:26.670 --> 00:54:29.570
&gt;&gt; That's okay.
&gt;&gt; BOYD: The, you know, we listed a number

00:54:29.570 --> 00:54:34.760
of different libraries there for many languages.
Python was noticeably excluded. There is a

00:54:34.760 --> 00:54:40.850
Python Library for OpenID if you're trying
the Vanilla OpenID accounts. No one has ridden

00:54:40.850 --> 00:54:46.840
the Google Apps Discovery extensions for that
Python Library yet. It's a JanRain Library,

00:54:46.840 --> 00:54:52.540
very similar to the PHP and Ruby Libraries,
but my understanding is it's not quite as

00:54:52.540 --> 00:54:53.540
extensible.
&gt;&gt; Okay.

00:54:53.540 --> 00:54:58.890
&gt;&gt; BOYD: So, if you want to take that on,
go for it. I mentioned about not writing your

00:54:58.890 --> 00:54:59.890
OpenID code.
&gt;&gt; Sure.

00:54:59.890 --> 00:55:05.200
&gt;&gt; BOYD: Feel free to ping us and let us know
if you do write that, though, and we're happy

00:55:05.200 --> 00:55:09.370
to do a little bit of review on it and then
get some other people to review it because

00:55:09.370 --> 00:55:13.960
there is obviously security concerns there.
But, no, I'm not aware of a Python Library

00:55:13.960 --> 00:55:19.599
right now that supports the Google Apps extensions.
I did mention the word JanRain there. JanRain

00:55:19.599 --> 00:55:24.580
also does commercial products called RPX and
there are some other providers that have commercial

00:55:24.580 --> 00:55:29.490
products for these sort of things too. They
provide very simple rest APIs to perform OpenID

00:55:29.490 --> 00:55:35.290
and they do have libraries available in Python.
&gt;&gt; Okay. The second question was related to

00:55:35.290 --> 00:55:43.080
OAuth and Google Data clients and the APIs.
There's some confusion there as to OAuth not

00:55:43.080 --> 00:55:46.780
retrieving data for all the APIs, so you need
particular version of G Data clients. Is that

00:55:46.780 --> 00:55:54.940
thing going to be sorted out or...?
&gt;&gt; BOYD: So, I mean, I think like a lot of

00:55:54.940 --> 00:55:59.370
our documentation unfortunately still refers
to both client login and AuthSub. We need

00:55:59.370 --> 00:56:05.180
to update our documentation. The perfect place
for us to do that--and when I say documentation

00:56:05.180 --> 00:56:09.740
I also mean the client libraries that we support.
And the prefect time for us to do that is

00:56:09.740 --> 00:56:15.150
when this OAuth Wrap comes out because OAuth
Wrap makes the protocol a lot easier both

00:56:15.150 --> 00:56:22.080
to explain and also to implement, and it basically
goes down to not having signatures anymore

00:56:22.080 --> 00:56:27.240
and then it operates very similarly to the
AuthSub protocol. So, I think at that time

00:56:27.240 --> 00:56:30.500
we'll be going through and update it. But
if you're particular libraries or whatever

00:56:30.500 --> 00:56:34.349
come see me afterwards and we'll talk about
them; there may be ways to do it. I think

00:56:34.349 --> 00:56:38.830
internally we've done some samples and all
that use a lot of these libraries that aren't

00:56:38.830 --> 00:56:42.650
quite published yet, but we're going to be,
you know, coming out with those soon.

00:56:42.650 --> 00:56:45.060
&gt;&gt; Thank you.
&gt;&gt; BOYD: Thanks. So, we'll take one more question

00:56:45.060 --> 00:56:51.950
from moderator before we jump into the question
from the audience. Are there any plans to

00:56:51.950 --> 00:56:58.280
support OAuth for GTalk protocol, XMPP and
the GTalk client? The short answer is, no,

00:56:58.280 --> 00:57:05.640
there are no direct plans. We did actually
extend OAuth Support to iMap and SMTP to,

00:57:05.640 --> 00:57:11.849
you know, native protocols for email communication.
And, you know, so I can see that it's quite

00:57:11.849 --> 00:57:17.010
possible that we would extend it for XMPP,
but we don't have any direct plans right now.

00:57:17.010 --> 00:57:21.930
Thanks. Go ahead.
&gt;&gt; So, it looks like a server has to maintain

00:57:21.930 --> 00:57:27.369
a secret, you know, if you're running a server
you have to do that server side. So, what

00:57:27.369 --> 00:57:30.270
can you tell us about how Google maintains
their secrets and how they--well, any recommendations

00:57:30.270 --> 00:57:35.560
they would have for how customers to, you
know, keep the secret secret both in the general

00:57:35.560 --> 00:57:44.300
case and maybe for AppEngine.
&gt;&gt; PRIMMER: Yeah, so, the key management that

00:57:44.300 --> 00:57:50.100
I demoed was Symantec key HMac secrets. So,
that means you have a secret essentially on

00:57:50.100 --> 00:57:56.930
the client somewhere and one on the server,
and both are needed in order to make a request.

00:57:56.930 --> 00:58:04.330
At Google, we actually store secrets in an
internal system that is heavily guarded and

00:58:04.330 --> 00:58:10.680
it actually is available to a number of our
servers so that we actually can centralize

00:58:10.680 --> 00:58:17.510
the key management, allows us to look up keys
and verify them based on the--how the client

00:58:17.510 --> 00:58:22.060
identifies themselves. You can find some examples
of this actually in the Shindig Libraries,

00:58:22.060 --> 00:58:29.480
I think. They have some built in key management
systems for OAuth because there actually is

00:58:29.480 --> 00:58:35.359
an OAuth proxy built into the Shindig product
that allows it to actually make--act as a

00:58:35.359 --> 00:58:41.151
client and make out that request and accepting
coming requests. And then as far as the client

00:58:41.151 --> 00:58:47.540
goes, the client actually is a really important
thing to remember. Basically, we demoed HMac

00:58:47.540 --> 00:58:51.460
secrets that are stored on the client. But
in this case, we're not talking about installed

00:58:51.460 --> 00:58:56.710
software clients that reside on a person's
computer. We're talking about hosted applications

00:58:56.710 --> 00:59:03.480
where a company is actually in charge of the
secrets and they're protected on their servers.

00:59:03.480 --> 00:59:10.101
For the case of an installed client and embedded
client or something like that, you don't actually

00:59:10.101 --> 00:59:13.170
want to use HMac because it can trivially
be hacked and your secret can actually be

00:59:13.170 --> 00:59:17.470
exposed. As--If you're an application developer
and you store your consumer Key and Secret

00:59:17.470 --> 00:59:21.210
in an application you distribute to your users,
as soon as that's hacked, every single one

00:59:21.210 --> 00:59:27.270
of the companies that has been granted access
to that key can then--has now had their data

00:59:27.270 --> 00:59:34.190
exposed through you. So, it's an extremely
important password to protect.

00:59:34.190 --> 00:59:38.380
&gt;&gt; BOYD: Okay. Did that answer your question?
&gt;&gt; But if I'm run--but if I'm running a service

00:59:38.380 --> 00:59:40.400
on Google App Engine...
&gt;&gt; PRIMMER: Yup.

00:59:40.400 --> 00:59:45.720
&gt;&gt; ...and I want to play with this and it
looks like I'm going to have to keep a secret.

00:59:45.720 --> 00:59:51.530
&gt;&gt; PRIMMER: Well, actually there's a couple
of options there. You can just act as if App

00:59:51.530 --> 00:59:55.090
Engine is a pure hosting platform and do all
of the OAuth stuff that you would normally

00:59:55.090 --> 01:00:01.359
do on your own third party server, but AppEngine
actually has the ability to make request and

01:00:01.359 --> 01:00:03.680
use the OAuth proxy that I mentioned earlier.
&gt;&gt; Okay.

01:00:03.680 --> 01:00:09.170
&gt;&gt; PRIMMER: So, you could actually just identify
your application. It knows who you are because

01:00:09.170 --> 01:00:13.750
you're running on Google software. It finds
the keys that it needs in order to sign your

01:00:13.750 --> 01:00:17.970
request and signs on your behalf and manages
the keys for you.

01:00:17.970 --> 01:00:20.410
&gt;&gt; Okay. That's great. Thanks.
&gt;&gt; PRIMMER: All right.

01:00:20.410 --> 01:00:25.310
&gt;&gt; BOYD: Okay, I'll take the next question
here, interested in knowing the current security

01:00:25.310 --> 01:00:29.840
concerns with OpenID. There aren't too many
of them. I don't know if you guys recently

01:00:29.840 --> 01:00:35.000
saw the U.S. government actually started accepting
OpenIDs in some of their websites and there

01:00:35.000 --> 01:00:41.910
was a lot of work that was done in order to
validate the security of OpenID in that process.

01:00:41.910 --> 01:00:46.430
Of course, this, you know, it still depends
on who the identity provider is and what OpenID

01:00:46.430 --> 01:00:51.270
request they're approving and how they're
improving it. So, for Google, we actually

01:00:51.270 --> 01:00:56.950
support one extension that you probably saw
on the slide earlier called Pick PAPE, the

01:00:56.950 --> 01:01:02.290
Provider Auth Policy Extension that actually
allows you, as an app developer, to make things

01:01:02.290 --> 01:01:07.040
a little bit more secure. And, basically,
what this means is in the case of that payroll

01:01:07.040 --> 01:01:12.060
application, for instance, you want to make
sure that the user is still behind the keyboard

01:01:12.060 --> 01:01:16.900
when the user goes to login. They didn't walk
away from their desk and their co-worker is

01:01:16.900 --> 01:01:21.900
trying to evilly look up their payroll or
something like that. And so, you can do that

01:01:21.900 --> 01:01:28.530
by basically adding it at PAPE request to
say, "Hey, I want to make sure that this user

01:01:28.530 --> 01:01:32.710
has actually logged-in recently. And if not,
prompt the user to login again." And Google

01:01:32.710 --> 01:01:37.190
will actually do that prompting on behalf
of the application to make it a little bit

01:01:37.190 --> 01:01:42.730
more secure. And so, there are plenty of other
things that are going on, but that's the one

01:01:42.730 --> 01:01:50.119
thing I'd give as an advice on terms of security.
Next thing was about OAuth integration to

01:01:50.119 --> 01:01:59.200
the Android SDK. There's no plans that I'm
aware of, but you guys can certainly follow

01:01:59.200 --> 01:02:02.739
up with the Android team about that. They
would probably be the most knowledgeable.

01:02:02.739 --> 01:02:05.420
&gt;&gt; PRIMMER: Yeah, you've been waiting. Go
ahead.

01:02:05.420 --> 01:02:06.790
&gt;&gt; BOYD: What's that?
&gt;&gt; I'm thinking of some...

01:02:06.790 --> 01:02:07.790
&gt;&gt; BOYD: Oh, sorry, I didn't see you there.
&gt;&gt; ...environments where the user doesn't

01:02:07.790 --> 01:02:16.440
have good control of the browser or if the
desktop like a kiosk, how do you deal with

01:02:16.440 --> 01:02:22.310
OpenID sign out in those situations?
&gt;&gt; BOYD: That's a good question. Everyone

01:02:22.310 --> 01:02:26.750
keeps asking us about that especially with
regards to Marketplace applications. It's

01:02:26.750 --> 01:02:33.620
kind of having single sign out for OpenID.
There's no real such protocol yet. It's something

01:02:33.620 --> 01:02:37.280
that I'd definitely like to see happen in
the standards community, coming up with a

01:02:37.280 --> 01:02:40.280
good protocol for OpenID and single sign on.
And then, I'd love to see it's implemented.

01:02:40.280 --> 01:02:45.080
But there's no real good use there. At this
point, the user would have to sign out of

01:02:45.080 --> 01:02:48.020
their Google account in addition to signing
out of any applications that they've logged-in

01:02:48.020 --> 01:02:52.100
to.
&gt;&gt; Do you see Google maybe driving some of

01:02:52.100 --> 01:02:56.869
those? Proposing some standards?
&gt;&gt; BOYD: Chris is turning is head and looking

01:02:56.869 --> 01:03:01.710
to the back of the room. I could see that
happening, yes, how's that? I don't have any

01:03:01.710 --> 01:03:06.470
specific information on it, but it is something
that, you know, we've been begging for internally

01:03:06.470 --> 01:03:12.620
to some of the engineers that are more involved
in the standards process. And so, I hope that

01:03:12.620 --> 01:03:20.140
we do that. And I'll take that as another
vote for that to happen. Let me answer one

01:03:20.140 --> 01:03:23.460
more question here form...
&gt;&gt; PRIMMER: We have one more live.

01:03:23.460 --> 01:03:28.500
&gt;&gt; BOYD: You can ask the live.
&gt;&gt; PRIMMER: Yeah, I'll go for the live one.

01:03:28.500 --> 01:03:30.500
&gt;&gt; BOYD: Go for it.
&gt;&gt; PRIMMER: Go ahead.

01:03:30.500 --> 01:03:34.460
&gt;&gt; All right. So, we have Google installed
at our college and so we have 3,000 or so

01:03:34.460 --> 01:03:43.270
users. I like the idea of installing the App
within the user interface. Is there a way

01:03:43.270 --> 01:03:47.250
to restrict that to subgroups? Because we
have students, staff and faculty and we want

01:03:47.250 --> 01:03:52.440
to have applications running just for subgroups
within that that are only visible there.

01:03:52.440 --> 01:03:56.790
&gt;&gt; BOYD: Not at this point. When you install
an app from the Marketplace, it is available

01:03:56.790 --> 01:04:02.510
to everyone in the domain. A lot of the applications
that are on the Marketplace do actually provide

01:04:02.510 --> 01:04:09.280
interfaces in that application to restrict
access to it. So, for instance, the concur

01:04:09.280 --> 01:04:13.420
expense reporting product prompts you during
the install process, "Would you like to allow

01:04:13.420 --> 01:04:20.750
anyone in?" or "Would you like to allow a
named list of users in?" And they allow you

01:04:20.750 --> 01:04:23.270
to select from users in your domain that you'd
allow--you want to allow access to. This is

01:04:23.270 --> 01:04:27.530
something we're definitely interested in doing
for the Marketplace to restrict it at our

01:04:27.530 --> 01:04:31.780
level, but definitely we'll look at whatever
application that you're looking at and see

01:04:31.780 --> 01:04:35.940
if they have a way to do it. Right now, it
would still be in the navigation for everyone

01:04:35.940 --> 01:04:39.710
in the company, but some of those applications
might do restrictions.

01:04:39.710 --> 01:04:45.560
&gt;&gt; Thanks.
&gt;&gt; BOYD: Thanks. So, the next question here

01:04:45.560 --> 01:04:50.370
on moderator has a little bit of a messed
up problem with some URL encoding here, but

01:04:50.370 --> 01:04:57.130
I'll try to read in between the percent 20s.
Can you also cover App Engines, create federate

01:04:57.130 --> 01:05:03.120
login URL, documented or not--it is not documented
except in the Java Docs? This seems like the

01:05:03.120 --> 01:05:10.880
optimal way for Google Apps integration in
App Engine. So, basically, we're definitely

01:05:10.880 --> 01:05:16.560
looking at ways to make the App Engine process
easier. This is one of the reasons that our

01:05:16.560 --> 01:05:20.900
team hasn't sat down and written that Python
code that someone was asking for earlier because

01:05:20.900 --> 01:05:24.030
we're trying--you know, most of the requests
we've gotten from Python are actually from

01:05:24.030 --> 01:05:28.090
App Engine users and we're trying to concentrate
our energies in making it a lot easier in

01:05:28.090 --> 01:05:33.590
App Engine. So, you guys saw it already in
the Java Docs, you should see something, you

01:05:33.590 --> 01:05:39.931
know, more formal out there that makes this
process of OpenID much easier. And actually,

01:05:39.931 --> 01:05:44.210
there's a comment on here right Google.
&gt;&gt; CHAN: Hey, Ryan. So--hi everybody. I'm

01:05:44.210 --> 01:05:50.320
Wesley Chan. I work in developer relations
for the AppEngine team. And there is no equivalent

01:05:50.320 --> 01:05:56.310
create federated login URL. However, the create
login URL function or method has the ability

01:05:56.310 --> 01:06:01.119
for you to pass in a federated identity. So,
we don't have two functions. One is, you know,

01:06:01.119 --> 01:06:04.650
wants the Vanilla, one wants a federated one.
They're both combined together into one, single

01:06:04.650 --> 01:06:09.829
method. If you have any other questions, just
come find me afterwards.

01:06:09.829 --> 01:06:14.370
&gt;&gt; BOYD: Okay, so just going through the moderator
thing if there's not any--oh, there's an in

01:06:14.370 --> 01:06:17.910
person question here if you want to go?
&gt;&gt; Yeah, so, I'm--I just want to understand

01:06:17.910 --> 01:06:25.220
the questions about Android from other people.
So, you mentioned that the OAuth is not provided

01:06:25.220 --> 01:06:29.330
in SDK, right? And you also mentioned that
they're on the libraries possible. So, can

01:06:29.330 --> 01:06:35.500
you talk about which one you would recommend
and--for accessing Google as well as, maybe,

01:06:35.500 --> 01:06:40.260
Facebook or anything like that?
&gt;&gt; BOYD: I mean, so, the work that I had done

01:06:40.260 --> 01:06:46.310
was with three-legged OAuth inside of mobile
device. So, it would actually open up the

01:06:46.310 --> 01:06:50.960
web browser from the application and the user
would grant access in the web browser and

01:06:50.960 --> 01:06:56.980
then be redirected back to the web application
using one of those registered protocol handlers.

01:06:56.980 --> 01:07:02.510
That is able to be done with the Java OAuth
Libraries, just kind of out of the box. So,

01:07:02.510 --> 01:07:05.490
you can do that with the Java OAuth Libraries.
And I was doing it at the time with Open Social,

01:07:05.490 --> 01:07:09.660
so you could access, you know, users' social
graph and that sort of thing. I'm not actually

01:07:09.660 --> 01:07:16.680
sure with regards to Facebook what libraries
are available for that, but you can definitely

01:07:16.680 --> 01:07:21.670
use OAuth. I mean, they support--Facebook
now supports OAuth2, but I just really haven't

01:07:21.670 --> 01:07:23.680
dived into what are the libraries that I've
used before with Android. We'll work with

01:07:23.680 --> 01:07:33.170
that. If I have my OpenID provider, can I
use the directory to authenticate to my Google

01:07:33.170 --> 01:07:38.150
Apps? Well, you can actually use your directory
to authenticate to Google Apps. And that brings

01:07:38.150 --> 01:07:44.410
up another usage of the word "single sign
on" in some of our Docs. Google is actually--can

01:07:44.410 --> 01:07:50.780
be a SAML relying party. SAML is a protocol
for doing single sign-on. In this case, it's

01:07:50.780 --> 01:07:56.650
happening in the other direction. So, you,
as a company, have something that runs on

01:07:56.650 --> 01:08:03.050
your servers that basically looks at your
directory and manages the authentication of

01:08:03.050 --> 01:08:09.520
users. And Google just relies upon you to
assert the identity of your users. And so,

01:08:09.520 --> 01:08:13.880
yes, you can use your internal directory.
It gets a little complicated again because

01:08:13.880 --> 01:08:19.390
the term is both using a single sign-on in
our documentation. If you are installing an

01:08:19.390 --> 01:08:23.769
application from the Marketplace, your next
best question is probably, "Can you use that

01:08:23.769 --> 01:08:27.199
application still even though that you're
users are coming from the directory?" And,

01:08:27.199 --> 01:08:32.339
yes, you can. So, the application will rely
upon Google to assert the identity of the

01:08:32.339 --> 01:08:39.079
user and then Google in turn will rely upon
the Google Apps identity--or SAML provider

01:08:39.079 --> 01:08:44.019
to then assert the identity to Google and
it does this whole big round trip. But you

01:08:44.019 --> 01:08:49.329
can ask me in office hours or out in the SandBox
or after this session if you have any--more,

01:08:49.329 --> 01:08:58.670
you know, you need any more details on that.
I think our best kiss hands on implementation

01:08:58.670 --> 01:09:06.849
example. Well, we have some Hello World examples
for the Marketplace that handled the two-legged

01:09:06.849 --> 01:09:13.179
OAuth scenario and the OpenID scenario pretty
well, in a fairly simplistic fashion for PHP

01:09:13.179 --> 01:09:19.670
and Java. There is another application which
you saw me accidentally show up in the screen

01:09:19.670 --> 01:09:25.019
here of SaaSy Voice, which we wrote for another
session, which is a little bit more expanded

01:09:25.019 --> 01:09:30.889
example, but an example of a real web application
that we're looking to open source after I/O,

01:09:30.889 --> 01:09:34.489
after we get a little bit of sleep. Do you
have any other ideas, Dave?

01:09:34.489 --> 01:09:40.029
&gt;&gt; PRIMMER: Well, I think that there's a--there's
a library that we just--or an application

01:09:40.029 --> 01:09:47.190
we just released as a tool to investigate
the Buzz API; it's called Oracle, which works

01:09:47.190 --> 01:09:52.880
with any OAuth-enabled end point. That's actually
a fairly small set of codes. I think it's

01:09:52.880 --> 01:09:56.380
probably only a couple of hundred lines of
code, if you look at the whole thing to get

01:09:56.380 --> 01:10:02.190
a sense of how it's doing it. And it's actually
doing three-legged OAuth. In addition to that,

01:10:02.190 --> 01:10:08.351
I would say if you really wan to keep it simple,
just focus on the two-legged OAuth the used

01:10:08.351 --> 01:10:09.351
case just to understand exactly what is going
on in a two-legged OAuth request. And don't

01:10:09.351 --> 01:10:13.789
get caught up in like the Token here, Token
there, you know?

01:10:13.789 --> 01:10:15.699
&gt;&gt; BOYD: Yeah.
&gt;&gt; PRIMMER: All the--the whole dance because

01:10:15.699 --> 01:10:21.199
that can actually get kind of confusing. There
is quite a few HTTP requests and redirects

01:10:21.199 --> 01:10:25.769
involved in OAuth--in three-legged OAuth.
And if you just concentrate on two-legged

01:10:25.769 --> 01:10:28.019
and learn that, that's sort of the basics.
&gt;&gt; BOYD: Definitely.

01:10:28.019 --> 01:10:30.300
&gt;&gt; PRIMMER: And...
&gt;&gt; BOYD: And then, jump over to that OAuth

01:10:30.300 --> 01:10:32.860
playground when you go to try to figure out
three-legged OAuth.

01:10:32.860 --> 01:10:35.530
&gt;&gt; PRIMMER: Yeah.
&gt;&gt; BOYD: That explains a lot of that process

01:10:35.530 --> 01:10:40.570
and how it works once you have a little bit
of knowledge about the keys and secrets and

01:10:40.570 --> 01:10:41.570
so forth.
&gt;&gt; PRIMMER: Right.

01:10:41.570 --> 01:10:44.510
&gt;&gt; BOYD: I think we need to stop questions
here actually because we're running a little

01:10:44.510 --> 01:10:49.050
bit close to the time when the next presenters
need to come up. But thank you very much for

01:10:49.050 --> 01:10:53.300
coming by. And feel free to ask us any questions
you have in the SandBox or... Thanks.

