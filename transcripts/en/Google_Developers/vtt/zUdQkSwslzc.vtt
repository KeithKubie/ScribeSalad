WEBVTT
Kind: captions
Language: en

00:00:00.620 --> 00:00:01.600
SETH LADD: Sweet.

00:00:01.600 --> 00:00:03.832
JOHN MESSERLY: Hey, John
Messerly, working on Web

00:00:03.832 --> 00:00:06.790
Components with Sam and Jacob.

00:00:06.790 --> 00:00:08.670
JACOB RICHMAN: Hi, I'm Jacob
Richman, another [INAUDIBLE]

00:00:08.670 --> 00:00:12.070
up in Seattle, working on
Dart Web Components.

00:00:12.070 --> 00:00:13.140
SETH LADD: Thank you
very much, guys,

00:00:13.140 --> 00:00:13.970
for taking the time.

00:00:13.970 --> 00:00:16.230
I know Web Components is
a pretty big topic.

00:00:16.230 --> 00:00:18.430
And so we're going to
skip over the news.

00:00:18.430 --> 00:00:21.150
Probably the big thing just
to reiterate for everyone

00:00:21.150 --> 00:00:23.200
watching at home is M1
is getting closer.

00:00:23.200 --> 00:00:24.600
JJ BEHRENS: Yeah, that's
really exciting.

00:00:24.600 --> 00:00:29.290
I see that Google just pushed
a new update to the spec.

00:00:29.290 --> 00:00:31.170
That's good reading to--

00:00:31.170 --> 00:00:31.915
I don't know.

00:00:31.915 --> 00:00:33.960
I get excited reading
those things.

00:00:33.960 --> 00:00:34.620
SETH LADD: Yeah, definitely.

00:00:34.620 --> 00:00:37.120
And we've got a lot of breaking
changes coming in,

00:00:37.120 --> 00:00:38.870
trying to get in under
the wire under M1.

00:00:38.870 --> 00:00:42.520
You can follow all those
at news.dartlang.org.

00:00:42.520 --> 00:00:43.390
So lots going on.

00:00:43.390 --> 00:00:45.750
But let's go ahead and dive into
the big topic here, Web

00:00:45.750 --> 00:00:47.160
Components.

00:00:47.160 --> 00:00:48.740
You've read the spec,
JJ, right?

00:00:48.740 --> 00:00:49.240
JJ BEHRENS: Yep.

00:00:49.240 --> 00:00:50.120
And watched the video.

00:00:50.120 --> 00:00:51.350
SETH LADD: And watched
the video, awesome.

00:00:51.350 --> 00:00:56.570
So is there a way for you to sum
it up in just a few words?

00:00:56.570 --> 00:00:57.290
JJ BEHRENS: Yeah.

00:00:57.290 --> 00:01:00.080
Well, there are these guys.

00:01:00.080 --> 00:01:02.340
And they like object-oriented
programming.

00:01:02.340 --> 00:01:06.490
And so they walk around, and
they're classy guys.

00:01:06.490 --> 00:01:08.730
So, of course, we need
to have classes.

00:01:08.730 --> 00:01:10.320
And they want to subclass
things.

00:01:10.320 --> 00:01:12.970
And they're looking at the web
page, and they see elements.

00:01:12.970 --> 00:01:14.870
And they're like, well, I
want to subclass that.

00:01:14.870 --> 00:01:16.650
And I want encapsulation.

00:01:16.650 --> 00:01:18.400
And I want stuff like
well hidden.

00:01:18.400 --> 00:01:19.900
And then I want templates.

00:01:19.900 --> 00:01:23.640
And then I want to configure
my CSS with variables.

00:01:23.640 --> 00:01:25.640
And then you cram it all
together, and you get

00:01:25.640 --> 00:01:30.490
something wonderful in the
browser instead of just at the

00:01:30.490 --> 00:01:33.020
framework level where every
framework has to implement

00:01:33.020 --> 00:01:33.750
their own widgets.

00:01:33.750 --> 00:01:34.090
SETH LADD: Perfect.

00:01:34.090 --> 00:01:36.170
And I think that's one of the
key points, at least for me,

00:01:36.170 --> 00:01:39.060
is that this isn't just
happening in user

00:01:39.060 --> 00:01:39.590
space, if you will.

00:01:39.590 --> 00:01:41.890
This is happening at
the platform level.

00:01:41.890 --> 00:01:44.030
And so let's turn
over to Seattle.

00:01:44.030 --> 00:01:47.930
And I'd like to learn how Dart
is actually intersecting with

00:01:47.930 --> 00:01:48.550
Web Components.

00:01:48.550 --> 00:01:51.550
Because it's my understanding
Dart is language and libraries

00:01:51.550 --> 00:01:53.430
and virtual machine.

00:01:53.430 --> 00:01:55.160
And then we're coming in with
Web Components, things

00:01:55.160 --> 00:01:56.980
happening actually deep
inside the browser.

00:01:56.980 --> 00:01:59.460
So I'd like to start off with
learning how did these two

00:01:59.460 --> 00:02:00.865
worlds actually intersect?

00:02:04.430 --> 00:02:06.660
SAM HOPKINS: I can
talk about that--

00:02:06.660 --> 00:02:07.480
make myself be in the picture.

00:02:07.480 --> 00:02:08.009
There we go.

00:02:08.009 --> 00:02:12.440
So Web Components and the
technology behind it are

00:02:12.440 --> 00:02:13.610
language agnostic.

00:02:13.610 --> 00:02:16.340
So they should work equally well
in Dart and JavaScript.

00:02:16.340 --> 00:02:18.590
They're an entirely declarative
technology, or a

00:02:18.590 --> 00:02:21.180
mostly declarative technology.

00:02:21.180 --> 00:02:25.710
So in Dart, just as you would be
able to in JavaScript, you

00:02:25.710 --> 00:02:28.070
can do something
that looks like

00:02:28.070 --> 00:02:29.950
subclassing a DOM element.

00:02:29.950 --> 00:02:35.510
So you can generate your own
custom subclasses of divs and

00:02:35.510 --> 00:02:40.680
videos and legends,
like this Hangout.

00:02:40.680 --> 00:02:44.510
You can add custom Dart behavior
to those, and you can

00:02:44.510 --> 00:02:49.940
use our templating tool that is
inspired by the stuff that

00:02:49.940 --> 00:02:54.930
comes out of Web Components
to hook up data to your

00:02:54.930 --> 00:02:56.670
components.

00:02:56.670 --> 00:02:58.740
Anybody else want to speak about
the intersection of Dart

00:02:58.740 --> 00:02:59.990
and Web Components?

00:03:02.380 --> 00:03:05.230
JJ BEHRENS: One of my favorite
things when I think about Dart

00:03:05.230 --> 00:03:09.130
versus Web Components is that
when you look at JavaScript,

00:03:09.130 --> 00:03:09.670
there's what?

00:03:09.670 --> 00:03:12.660
16 different ways of
implementing object-oriented

00:03:12.660 --> 00:03:13.180
programming?

00:03:13.180 --> 00:03:16.110
And every framework has its own
approach to subclassing.

00:03:16.110 --> 00:03:21.080
And Dart comes along and has
a way to do classes and

00:03:21.080 --> 00:03:21.640
subclassing.

00:03:21.640 --> 00:03:24.320
And it is the way for all
of Dart programs.

00:03:24.320 --> 00:03:26.760
So all Dart programs can
interoperate, because they

00:03:26.760 --> 00:03:28.320
understand what a class is.

00:03:28.320 --> 00:03:33.420
And Web Components do that at
the browser level for widgets.

00:03:33.420 --> 00:03:38.040
So we'll have a way of having
a great calendar widget from

00:03:38.040 --> 00:03:41.310
this team interoperate with
the great maps widget from

00:03:41.310 --> 00:03:43.950
this other team.

00:03:43.950 --> 00:03:45.900
JOHN MESSERLY: And that's
actually why I think it was so

00:03:45.900 --> 00:03:47.630
important for us to
do this in Dart.

00:03:47.630 --> 00:03:50.300
Because we're already trying
to bring structured web

00:03:50.300 --> 00:03:51.390
programming.

00:03:51.390 --> 00:03:52.890
That's kind of what we're
doing in Dart.

00:03:52.890 --> 00:03:58.250
And we finally have addressed
this idea that you can have

00:03:58.250 --> 00:04:01.670
one way of doing object-oriented
programming.

00:04:01.670 --> 00:04:03.670
So it seems very natural to--

00:04:03.670 --> 00:04:05.107
oh, and the other thing we're
doing, of course, is

00:04:05.107 --> 00:04:06.300
improving the DOM.

00:04:06.300 --> 00:04:08.730
And it seems very natural to
take those two things together

00:04:08.730 --> 00:04:11.130
and say, hey, well if we're
improving the DOM, why can't

00:04:11.130 --> 00:04:14.390
you just extend from it, as if
those were just normal Dart

00:04:14.390 --> 00:04:17.820
objects, as if it had been
written in Dart.

00:04:17.820 --> 00:04:20.279
SETH LADD: So in the Web
Components world, I can now

00:04:20.279 --> 00:04:25.010
finally create a subclass of
button, which I think is huge.

00:04:25.010 --> 00:04:26.650
And so that's a big point I
want to make sure everyone

00:04:26.650 --> 00:04:29.560
understands, is that you have
all these elements today, part

00:04:29.560 --> 00:04:34.080
of the normal DOM, dibs, spans,
buttons, paragraphs, et

00:04:34.080 --> 00:04:38.890
cetera, and all of the existing
web development

00:04:38.890 --> 00:04:41.830
frameworks out there today
always have to wrap a lot of

00:04:41.830 --> 00:04:44.740
these elements to provide
extensions and behavior.

00:04:44.740 --> 00:04:47.730
In a Web Components world, you
can actually extend the button

00:04:47.730 --> 00:04:50.130
and create your own specialized
button.

00:04:50.130 --> 00:04:51.220
Is that true?

00:04:51.220 --> 00:04:52.610
SAM HOPKINS: Yeah, absolutely.

00:04:52.610 --> 00:04:58.530
We should make clear that the
mental model is that you're

00:04:58.530 --> 00:04:59.680
creating a Dart subclass.

00:04:59.680 --> 00:05:03.240
But because there's this extra
DOM stuff going on, you also

00:05:03.240 --> 00:05:05.670
get to attach custom DOM
to your subclass.

00:05:05.670 --> 00:05:08.170
So you're subclassing in the
sense of adding Dart behavior.

00:05:08.170 --> 00:05:11.350
But you're also subclassing in
a sense of customizing what

00:05:11.350 --> 00:05:15.750
happens on the DOM when you
instantiate your fancy button.

00:05:15.750 --> 00:05:18.740
You might say that your fancy
button has some extra images

00:05:18.740 --> 00:05:20.120
in it and some text.

00:05:20.120 --> 00:05:21.710
And those will get encapsulated
just like the

00:05:21.710 --> 00:05:23.270
Dart behavior that you've
attached to it gets

00:05:23.270 --> 00:05:24.380
encapsulated.

00:05:24.380 --> 00:05:26.640
JJ BEHRENS: That's one thing
that I really like, is that

00:05:26.640 --> 00:05:30.560
the web has traditionally lacked
a way of encapsulating,

00:05:30.560 --> 00:05:33.460
so that if you're going to have
a widget, you have all of

00:05:33.460 --> 00:05:35.430
this DOM stuff that's
in the tree.

00:05:35.430 --> 00:05:39.310
And you're trying to see the
widget, but all you can see is

00:05:39.310 --> 00:05:40.530
a bunch of divs.

00:05:40.530 --> 00:05:44.500
And finally, with the shadow
DOM, we could have one tag

00:05:44.500 --> 00:05:48.180
that has some semantic meaning
with all the stuff hidden away

00:05:48.180 --> 00:05:52.650
in a nice, encapsulated
way inside of it.

00:05:52.650 --> 00:05:53.840
[AUDIO LOST]

00:05:53.840 --> 00:05:56.050
more beautiful markup.

00:05:56.050 --> 00:05:59.540
SETH LADD: So Jacob, JJ just
mentioned the shadow DOM.

00:05:59.540 --> 00:06:01.820
Can you tell us what exactly
is this shadow DOM?

00:06:01.820 --> 00:06:03.470
Sounds a little bit
nefarious to me.

00:06:03.470 --> 00:06:03.880
JACOB RICHMAN: Yeah.

00:06:03.880 --> 00:06:07.190
So what the shadow DOM is is
when you're creating your own

00:06:07.190 --> 00:06:10.650
custom element, they say it's
extending div, you're going to

00:06:10.650 --> 00:06:13.220
want to implement how
it's rendered.

00:06:13.220 --> 00:06:16.800
And you're going to implement
that just using the same HTML

00:06:16.800 --> 00:06:19.495
that you're used to and
ready to create.

00:06:19.495 --> 00:06:21.895
But you're going to implement it
in what's called the shadow

00:06:21.895 --> 00:06:22.830
DOM for the element.

00:06:22.830 --> 00:06:26.180
So this is going to be a DOM
that only you as the component

00:06:26.180 --> 00:06:27.160
creator sees.

00:06:27.160 --> 00:06:30.220
When someone opens up their Web
Inspector, by default they

00:06:30.220 --> 00:06:34.920
won't be distracted by the
non-semantic divs and side

00:06:34.920 --> 00:06:37.598
divs that you might be using
to make your component

00:06:37.598 --> 00:06:38.434
rendered the way you want it.

00:06:38.434 --> 00:06:39.270
JJ BEHRENS: That's huge.

00:06:39.270 --> 00:06:41.660
When I first saw the shadow
DOM I thought it was Bob

00:06:41.660 --> 00:06:43.380
Nystrom's doing.

00:06:43.380 --> 00:06:44.370
SAM HOPKINS: Ah, yes.

00:06:44.370 --> 00:06:46.060
SETH LADD: Well, the evil
Bob, his evil twin.

00:06:46.060 --> 00:06:48.350
JJ BEHRENS: The evil Bob, where
it was Google's evil

00:06:48.350 --> 00:06:50.000
plot to take over the
world and make

00:06:50.000 --> 00:06:51.670
web programming easier.

00:06:51.670 --> 00:06:52.980
JACOB RICHMAN: And the
interesting thing about the

00:06:52.980 --> 00:06:56.010
shadow DOM is this was
technology that actually did

00:06:56.010 --> 00:06:59.290
exist in the web platform but
was only used for native

00:06:59.290 --> 00:07:02.230
controls, like video controls.

00:07:02.230 --> 00:07:03.260
SETH LADD: I was just going
to point that out.

00:07:03.260 --> 00:07:06.340
We actually can see real-world
application of this, as you

00:07:06.340 --> 00:07:09.880
just mentioned, that if you
embed a video tag into your

00:07:09.880 --> 00:07:13.650
page and the player controls,
like play, pause, and the

00:07:13.650 --> 00:07:16.380
slider, that's actually
implemented with actual DOM

00:07:16.380 --> 00:07:18.070
elements like divs
and spans, right?

00:07:18.070 --> 00:07:18.660
JACOB RICHMAN: Yeah, exactly.

00:07:18.660 --> 00:07:22.170
And it's just in a shadow DOM
that as a user you haven't

00:07:22.170 --> 00:07:25.510
been able to see or been
able to manipulate.

00:07:25.510 --> 00:07:26.930
But now you'll be able
to have that

00:07:26.930 --> 00:07:28.940
same power as a developer.

00:07:28.940 --> 00:07:30.400
JJ BEHRENS: So another thing
that I like about the

00:07:30.400 --> 00:07:35.970
encapsulation is the boundaries
that Web Components

00:07:35.970 --> 00:07:38.530
place around the Web Components
so that they can

00:07:38.530 --> 00:07:39.890
have their own CSS.

00:07:39.890 --> 00:07:43.100
And the CSS from the outside
doesn't leak in, and the CSS

00:07:43.100 --> 00:07:44.560
from the inside doesn't
leak out.

00:07:44.560 --> 00:07:47.270
Do you guys want to
talk about that?

00:07:47.270 --> 00:07:48.670
JOHN MESSERLY: Sure.

00:07:48.670 --> 00:07:52.200
It kind of all goes back to what
we're talking about with

00:07:52.200 --> 00:07:56.240
the shadow DOM, which is it
would be really mean if we're

00:07:56.240 --> 00:07:59.480
like, hey, here are these
components, but to render them

00:07:59.480 --> 00:08:02.450
you have to draw at a
canvas or something.

00:08:02.450 --> 00:08:04.990
That would be really hard.

00:08:04.990 --> 00:08:08.650
So we say, well, you can
use DOM primitives.

00:08:08.650 --> 00:08:11.480
And, of course, once you're
using browser primitives,

00:08:11.480 --> 00:08:15.250
well, if you just display dibs
and spans on a page, they're

00:08:15.250 --> 00:08:16.380
going to look like
nothing, right?

00:08:16.380 --> 00:08:19.820
They're no good without
some styling.

00:08:19.820 --> 00:08:23.910
So you need to be able to style
your shadow DOM in such

00:08:23.910 --> 00:08:26.730
a way that nobody else
can affect it.

00:08:26.730 --> 00:08:28.340
And they call that the--

00:08:28.340 --> 00:08:31.250
there's basically an upper
boundary and a lower boundary

00:08:31.250 --> 00:08:34.320
that prevents your styles from
leaking to your children and

00:08:34.320 --> 00:08:36.510
prevents styles from the page
from leaking into your shadow

00:08:36.510 --> 00:08:38.750
DOM unless you want to.

00:08:38.750 --> 00:08:40.669
So you can always turn on--

00:08:40.669 --> 00:08:43.350
they also give you the power, if
you want to turn on, styles

00:08:43.350 --> 00:08:46.320
flowing in, and you
can do that, too.

00:08:46.320 --> 00:08:48.070
JJ BEHRENS: Yeah, and
[INAUDIBLE], and it kind of

00:08:48.070 --> 00:08:53.220
goes for events as well, where
if an event generates within,

00:08:53.220 --> 00:08:56.990
kind of deep inside the Web
Component, and bubbles up,

00:08:56.990 --> 00:08:59.700
it's kind of sanitized so that
the stuff from the inside

00:08:59.700 --> 00:09:01.080
doesn't get to the outside.

00:09:01.080 --> 00:09:02.750
Do you guys want to
talk about that?

00:09:02.750 --> 00:09:02.981
JACOB RICHMAN: Yeah.

00:09:02.981 --> 00:09:05.990
So you'll just see the event's
firing on your component

00:09:05.990 --> 00:09:09.260
instead of firing on the
specific element deep within

00:09:09.260 --> 00:09:11.440
your component.

00:09:11.440 --> 00:09:12.350
That's what's going
to make sense.

00:09:12.350 --> 00:09:15.590
If you're using a fancy input
element, you want to see the

00:09:15.590 --> 00:09:17.548
event firing on the fancy
input element.

00:09:17.548 --> 00:09:19.250
You don't want to see
it firing on--

00:09:19.250 --> 00:09:21.770
SAM HOPKINS: Some random div.

00:09:21.770 --> 00:09:25.490
The idea is that the user of
your widget, just like we've

00:09:25.490 --> 00:09:30.615
been able to do for 15 years
outside of the web, the user

00:09:30.615 --> 00:09:32.780
of your widget should not
be able to tell the

00:09:32.780 --> 00:09:36.420
implementation details
by any way.

00:09:36.420 --> 00:09:37.490
They can't query for them.

00:09:37.490 --> 00:09:38.685
They can't figure it
out with events.

00:09:38.685 --> 00:09:41.920
They can't figure it out by
setting crazy styles and

00:09:41.920 --> 00:09:43.705
seeing how your widget
changes.

00:09:43.705 --> 00:09:46.390
It has to be real
encapsulation.

00:09:46.390 --> 00:09:47.890
SETH LADD: It always comes back
to that encapsulation

00:09:47.890 --> 00:09:50.650
term, which, as, JJ, you were
saying in the beginning, is a

00:09:50.650 --> 00:09:52.430
concept that a lot of other
programming languages

00:09:52.430 --> 00:09:53.500
environments have always had.

00:09:53.500 --> 00:09:54.930
And now we're bringing
it to the web.

00:09:54.930 --> 00:09:56.670
So we've talked about
encapsulating the structure.

00:09:56.670 --> 00:09:58.390
And then you can place
that inside the

00:09:58.390 --> 00:09:59.780
shadow DOM of an element.

00:09:59.780 --> 00:10:02.490
We've talked about encapsulating
the styles using

00:10:02.490 --> 00:10:05.770
scope styles sheets so they
don't leak outside.

00:10:05.770 --> 00:10:10.140
So now I want to talk about
encapsulating behavior.

00:10:10.140 --> 00:10:11.410
We've talked about structure.

00:10:11.410 --> 00:10:12.380
We've talked about styles.

00:10:12.380 --> 00:10:14.660
But what do Web Components
bring to

00:10:14.660 --> 00:10:16.070
encapsulating behavior?

00:10:16.070 --> 00:10:16.845
We mentioned Dart.

00:10:16.845 --> 00:10:17.600
We mentioned JavaScript.

00:10:17.600 --> 00:10:18.710
What can I do now?

00:10:18.710 --> 00:10:22.370
What can I have these
elements do?

00:10:22.370 --> 00:10:23.620
SAM HOPKINS: Anything
you want.

00:10:25.970 --> 00:10:29.270
As far as Dart is concerned, if
you factor out all this DOM

00:10:29.270 --> 00:10:34.210
stuff, these are just subclasses
of DOM elements.

00:10:34.210 --> 00:10:36.740
They really are.

00:10:36.740 --> 00:10:37.260
You get--

00:10:37.260 --> 00:10:37.700
JOHN MESSERLY: Fields.

00:10:37.700 --> 00:10:38.103
SAM HOPKINS: Huh?

00:10:38.103 --> 00:10:38.910
JOHN MESSERLY: You get fields.

00:10:38.910 --> 00:10:40.200
SAM HOPKINS: You
can add fields.

00:10:40.200 --> 00:10:42.790
You can add methods.

00:10:42.790 --> 00:10:44.500
You have all the stuff
that you would

00:10:44.500 --> 00:10:45.170
have imagined already.

00:10:45.170 --> 00:10:49.340
You have private fields and
public fields and getters and

00:10:49.340 --> 00:10:51.510
setters and so forth.

00:10:51.510 --> 00:10:54.290
And you will really just write
this like it's a class body

00:10:54.290 --> 00:10:55.560
for this element.

00:10:55.560 --> 00:10:58.290
And then when you query for it
in the page or for some reason

00:10:58.290 --> 00:11:01.000
you get a hold of this fancy
element, you'll be able to

00:11:01.000 --> 00:11:03.966
call methods on it or access
its fields and so forth.

00:11:03.966 --> 00:11:04.350
SETH LADD: That's so cool.

00:11:04.350 --> 00:11:08.040
JJ BEHRENS: Yeah, I remember we
gave a code lab at Google

00:11:08.040 --> 00:11:10.260
I/O. And when I looked at
the code, it was kind of

00:11:10.260 --> 00:11:10.740
interesting.

00:11:10.740 --> 00:11:13.150
Because you guys were
structuring it in such a way

00:11:13.150 --> 00:11:15.980
where you would hide the
DOM stuff inside of it.

00:11:15.980 --> 00:11:18.750
And then you would expose these
methods, such as if you

00:11:18.750 --> 00:11:22.370
have a stopwatch widget, then
you would have a method that

00:11:22.370 --> 00:11:25.280
would say start timing.

00:11:25.280 --> 00:11:28.880
And so I'm excited about the
fact that Web Components are

00:11:28.880 --> 00:11:32.470
going to give us the same thing,
where we have a list of

00:11:32.470 --> 00:11:35.560
methods that these are the
official approved ways of

00:11:35.560 --> 00:11:37.460
interacting with this
Web Component.

00:11:37.460 --> 00:11:38.350
SETH LADD: And we
should say that

00:11:38.350 --> 00:11:39.590
sometimes it might be methods.

00:11:39.590 --> 00:11:42.590
Other times it might be setting
attributes or creating

00:11:42.590 --> 00:11:45.570
subelements inside your
custom element.

00:11:45.570 --> 00:11:48.250
Through your work with working
with Web Components so far,

00:11:48.250 --> 00:11:49.600
have you seen any--

00:11:49.600 --> 00:11:50.720
I don't know, maybe
it's too early--

00:11:50.720 --> 00:11:51.940
design patterns emerge?

00:11:51.940 --> 00:11:55.170
Or what seems to be the flavor
of the day in terms of how you

00:11:55.170 --> 00:11:58.972
might actually interact with
these Web Components?

00:11:58.972 --> 00:12:01.510
Or is it too early to tell?

00:12:01.510 --> 00:12:03.865
SAM HOPKINS: You want
to talk about it?

00:12:03.865 --> 00:12:04.770
JOHN MESSERLY: Yeah, I
can say something.

00:12:04.770 --> 00:12:06.270
It is pretty early to tell.

00:12:06.270 --> 00:12:10.530
But there's definitely some
patterns where you're using

00:12:10.530 --> 00:12:11.090
attributes.

00:12:11.090 --> 00:12:15.760
So if you have properties
that can be expressed as

00:12:15.760 --> 00:12:17.360
attributes, it's really nice.

00:12:17.360 --> 00:12:21.550
Because in your HTML page on
your element, you can just

00:12:21.550 --> 00:12:22.470
write your attribute.

00:12:22.470 --> 00:12:24.940
You can easily data bind it.

00:12:24.940 --> 00:12:27.160
We haven't talked about the data
binding yet, so maybe I'm

00:12:27.160 --> 00:12:27.990
jumping ahead a little bit.

00:12:27.990 --> 00:12:32.800
But it'll interoperate better
between Dart and JavaScript.

00:12:32.800 --> 00:12:36.140
So we know we can make
attributes work really well.

00:12:36.140 --> 00:12:39.760
So that's definitely one
pattern we've seen.

00:12:39.760 --> 00:12:41.270
SETH LADD: But let's actually
talk about that for a second.

00:12:41.270 --> 00:12:43.130
Because I want to make sure
everyone understands what

00:12:43.130 --> 00:12:43.900
we're talking about.

00:12:43.900 --> 00:12:46.560
So we've talked about these
kinds of components.

00:12:46.560 --> 00:12:48.360
And you can create them, put
them on your page, and even

00:12:48.360 --> 00:12:51.390
interact with them
programmatically, or set

00:12:51.390 --> 00:12:52.010
attributes.

00:12:52.010 --> 00:12:55.960
And so can you give an example
of a case where setting the

00:12:55.960 --> 00:12:58.170
attributes is more or less
equivalent to calling a method

00:12:58.170 --> 00:12:59.520
on the component?

00:12:59.520 --> 00:13:02.000
JACOB RICHMAN: Suppose you
had a component that was

00:13:02.000 --> 00:13:05.370
a Google Maps map.

00:13:05.370 --> 00:13:10.020
And so you have an attribute
that's latitude and longitude.

00:13:10.020 --> 00:13:12.542
Now set the attribute,
the position of

00:13:12.542 --> 00:13:15.190
the map will change.

00:13:15.190 --> 00:13:18.340
SAM HOPKINS: And we should be
clear that when you're writing

00:13:18.340 --> 00:13:21.840
a Web Component, all the
plumbing to make this happen

00:13:21.840 --> 00:13:23.770
is abstracted away for you.

00:13:23.770 --> 00:13:25.740
So when you write a Web
Component, you'll implement

00:13:25.740 --> 00:13:27.560
some method, like attribute
changed or

00:13:27.560 --> 00:13:29.070
something like that.

00:13:29.070 --> 00:13:33.140
And eventually the browser, or
for now our polyfill runtime

00:13:33.140 --> 00:13:36.050
system will just call that
method for you whenever your

00:13:36.050 --> 00:13:38.490
attribute has changed, and you
can handle that appropriately.

00:13:38.490 --> 00:13:41.380
So you don't have to worry
about mutation events and

00:13:41.380 --> 00:13:42.680
observation and all
this business.

00:13:42.680 --> 00:13:43.550
It just all works.

00:13:43.550 --> 00:13:43.910
SETH LADD: Cool.

00:13:43.910 --> 00:13:44.730
JJ BEHRENS: Great.

00:13:44.730 --> 00:13:46.520
SETH LADD: And before we get to
that, because you're kind

00:13:46.520 --> 00:13:49.070
of leading towards how do we
actually all make this work in

00:13:49.070 --> 00:13:53.160
today's world, first, how
do you package these Web

00:13:53.160 --> 00:13:55.160
Components, at least what
the spec is saying?

00:13:55.160 --> 00:13:57.210
What do these things
really look like?

00:13:57.210 --> 00:14:00.550
What are the tangible assets?

00:14:00.550 --> 00:14:01.130
SAM HOPKINS: Can we do a demo?

00:14:01.130 --> 00:14:02.510
JACOB RICHMAN: Yeah,
let's do a demo.

00:14:02.510 --> 00:14:04.650
SAM HOPKINS: Let's do a demo.

00:14:04.650 --> 00:14:08.332
Give us two seconds to get
the screen sharing up.

00:14:12.030 --> 00:14:13.830
JJ BEHRENS: But you're not
allowed to spend any more time

00:14:13.830 --> 00:14:16.430
than it took us to actually
get the show live today.

00:14:16.430 --> 00:14:17.970
SAM HOPKINS: So we've
got about half an

00:14:17.970 --> 00:14:19.990
hour, is that right?

00:14:19.990 --> 00:14:21.600
JJ BEHRENS: Yeah, we're really
sorry about that, guys.

00:14:21.600 --> 00:14:23.500
We had some audio issues.

00:14:23.500 --> 00:14:23.940
SAM HOPKINS: All right.

00:14:23.940 --> 00:14:26.640
So I think this is
the one I want.

00:14:26.640 --> 00:14:27.470
Screensharing working?

00:14:27.470 --> 00:14:28.390
Everything happy?

00:14:28.390 --> 00:14:29.230
SETH LADD: Looks great.

00:14:29.230 --> 00:14:29.970
SAM HOPKINS: Awesome.

00:14:29.970 --> 00:14:32.350
So I don't know if I'm
going to do MVC.

00:14:32.350 --> 00:14:34.860
It's a little app that people
write in their various

00:14:34.860 --> 00:14:39.400
different frameworks to
demo what code looks

00:14:39.400 --> 00:14:40.160
like in that framework.

00:14:40.160 --> 00:14:41.820
So it's a to-do list app.

00:14:41.820 --> 00:14:43.360
I'm going to close the Web
Inspector here so we can play

00:14:43.360 --> 00:14:45.040
with it a little bit.

00:14:45.040 --> 00:14:46.400
It's a to-do list app.

00:14:46.400 --> 00:14:48.030
We can add to-dos.

00:14:48.030 --> 00:14:53.180
Today the web, tomorrow
the world.

00:14:53.180 --> 00:14:57.200
And I can mark them done,
remove them--

00:14:57.200 --> 00:14:57.950
SETH LADD: So awesome.

00:14:57.950 --> 00:14:59.280
SAM HOPKINS: --stuff
like that.

00:14:59.280 --> 00:15:02.610
So not a super exciting app,
but it's a good way to demo

00:15:02.610 --> 00:15:04.475
what stuff looks like in the
Web Components world.

00:15:04.475 --> 00:15:06.922
So let's pull up
the Inspector.

00:15:06.922 --> 00:15:09.340
And let's first look at a
super simple component.

00:15:09.340 --> 00:15:14.970
So you see this little photo
down here that just has some

00:15:14.970 --> 00:15:17.220
text in it, double click
to edit a to-do.

00:15:17.220 --> 00:15:18.850
So I've made this a component.

00:15:18.850 --> 00:15:22.320
And I should preface this
by saying that it's not

00:15:22.320 --> 00:15:24.460
necessarily the case that you
would want to make something

00:15:24.460 --> 00:15:26.140
at that small level
of granularity

00:15:26.140 --> 00:15:27.060
component in a real app.

00:15:27.060 --> 00:15:29.290
But it's a nice way to demo
how these suckers work.

00:15:29.290 --> 00:15:33.510
So down here in the Inspector,
you can see this div is x

00:15:33.510 --> 00:15:34.900
to-do footer.

00:15:34.900 --> 00:15:37.790
Another note is that we're
not totally settled

00:15:37.790 --> 00:15:38.760
on the final syntax.

00:15:38.760 --> 00:15:41.470
So you will probably actually
have a tag that says, x to-do

00:15:41.470 --> 00:15:43.160
footer, instead of
this div syntax.

00:15:43.160 --> 00:15:46.200
But the semantics
are the same.

00:15:46.200 --> 00:15:50.110
So you can see this div is
equals x to-do footer, which

00:15:50.110 --> 00:15:51.800
we can't open up.

00:15:51.800 --> 00:15:53.180
We can't see anything
below it.

00:15:53.180 --> 00:15:54.950
What actually is below
it is a shadow root.

00:15:54.950 --> 00:15:57.785
And we will be able to turn on
an extension in a minute that

00:15:57.785 --> 00:15:59.880
lets us actually see the
shadow DOM down there.

00:15:59.880 --> 00:16:01.970
But what's actually below it is
just some paragraph tags.

00:16:01.970 --> 00:16:05.440
So let's look at the
code for that.

00:16:05.440 --> 00:16:15.270
Let me share a different thing
really quickly, one sec.

00:16:15.270 --> 00:16:16.030
Actually, it's the same thing.

00:16:16.030 --> 00:16:18.662
I'm sorry.

00:16:18.662 --> 00:16:19.266
I didn't mean it.

00:16:19.266 --> 00:16:21.320
OK.

00:16:21.320 --> 00:16:24.270
So again, this is another place
where the syntax is all

00:16:24.270 --> 00:16:26.130
kind of in flux, but the
semantics is not likely to

00:16:26.130 --> 00:16:27.190
change all that much.

00:16:27.190 --> 00:16:28.220
SETH LADD: I'm sorry,
Sam, what are we

00:16:28.220 --> 00:16:28.930
looking at right here?

00:16:28.930 --> 00:16:30.180
What file is this?

00:16:34.580 --> 00:16:35.630
SAM HOPKINS: How should
say this?

00:16:35.630 --> 00:16:37.540
This is a source file that
doesn't actually go through

00:16:37.540 --> 00:16:40.100
any existing compiler yet,
compiler that will exist

00:16:40.100 --> 00:16:41.600
pretty soon.

00:16:41.600 --> 00:16:44.310
SETH LADD: But moving one level
up, what we're looking

00:16:44.310 --> 00:16:45.990
at here is actually
a component.

00:16:45.990 --> 00:16:46.510
It that true?

00:16:46.510 --> 00:16:46.760
SAM HOPKINS: Yeah.

00:16:46.760 --> 00:16:49.240
So let me highlight.

00:16:49.240 --> 00:16:52.285
What we're looking at, what's
highlighted, is the source for

00:16:52.285 --> 00:16:53.535
that footer component.

00:16:55.610 --> 00:16:57.540
So you see, we have this element
tag that allows you to

00:16:57.540 --> 00:17:00.200
declare a DOM subclass.

00:17:00.200 --> 00:17:03.040
And this component doesn't
have any Dart behavior.

00:17:03.040 --> 00:17:05.950
We're just talking about the
DOM subclassing stuff here.

00:17:05.950 --> 00:17:10.450
So I can tell the system
what tag I'm extending.

00:17:10.450 --> 00:17:16.640
I can tell it what the name
of my custom element is. .

00:17:16.640 --> 00:17:18.540
And then I can add
some custom DOMs.

00:17:18.540 --> 00:17:20.609
So remember that double
click to edit a to-do

00:17:20.609 --> 00:17:21.460
line that we saw?

00:17:21.460 --> 00:17:22.960
There it is.

00:17:22.960 --> 00:17:25.630
It's this DOM that
gets injected

00:17:25.630 --> 00:17:27.155
inside the custom div.

00:17:27.155 --> 00:17:28.359
Does that make some sense?

00:17:28.359 --> 00:17:29.620
JJ BEHRENS: Yep.

00:17:29.620 --> 00:17:31.360
SAM HOPKINS: Awesome.

00:17:31.360 --> 00:17:35.000
So that's how the DOM
subclassing part of it works.

00:17:35.000 --> 00:17:37.640
Let's look at a slightly more
complicated one, with some

00:17:37.640 --> 00:17:38.780
Dart behavior.

00:17:38.780 --> 00:17:42.315
So if we open up the
actual app here--

00:17:42.315 --> 00:17:44.700
oh, I can't open beneath but
the to-do list, because the

00:17:44.700 --> 00:17:45.290
extension's not on.

00:17:45.290 --> 00:17:46.050
That's OK.

00:17:46.050 --> 00:17:48.340
So here's the--

00:17:48.340 --> 00:17:49.106
JJ BEHRENS: I'm sorry.

00:17:49.106 --> 00:17:50.870
You said something about
an extension.

00:17:50.870 --> 00:17:53.360
You want to mention just a
little bit more about that?

00:17:53.360 --> 00:17:55.090
SAM HOPKINS: Yeah.

00:17:55.090 --> 00:17:57.480
I'm using a laptop that's not
mine, which is why this is a

00:17:57.480 --> 00:17:59.000
little bit iffy.

00:17:59.000 --> 00:18:01.760
There's an extension to the
Web Inspector that you can

00:18:01.760 --> 00:18:04.640
turn on for development purposes
that lets you look at

00:18:04.640 --> 00:18:05.890
what's in the shadow DOM.

00:18:08.280 --> 00:18:09.310
JOHN MESSERLY: So imagine
if you could look

00:18:09.310 --> 00:18:10.660
inside your video tag.

00:18:10.660 --> 00:18:12.400
SAM HOPKINS: Right, exactly.

00:18:12.400 --> 00:18:14.020
But for now, we can
work without it.

00:18:14.020 --> 00:18:17.990
So here's the actual to-do
list component,

00:18:17.990 --> 00:18:18.630
which is a big thing.

00:18:18.630 --> 00:18:20.620
It actually wraps some other
components inside it.

00:18:20.620 --> 00:18:22.190
And we have a couple of
different design patterns for

00:18:22.190 --> 00:18:22.790
how to do that.

00:18:22.790 --> 00:18:25.710
And we'll look at another
example of it in a bit.

00:18:25.710 --> 00:18:27.840
Sorry, that was the wrong tab.

00:18:27.840 --> 00:18:29.850
So let's look at the to-do
list component.

00:18:29.850 --> 00:18:31.980
So here it starts now at
the top of the page.

00:18:31.980 --> 00:18:33.810
We have this element
that extends div.

00:18:33.810 --> 00:18:36.690
The name is to-do
list component.

00:18:36.690 --> 00:18:40.760
And here's some fancier features
that happen in here.

00:18:40.760 --> 00:18:44.150
So you see in these template
tags, like before, we've got

00:18:44.150 --> 00:18:47.320
the custom DOM that's
in this element.

00:18:47.320 --> 00:18:49.630
So it's got an input,
and it's got a list,

00:18:49.630 --> 00:18:50.610
and it's got a footer.

00:18:50.610 --> 00:18:51.610
JJ BEHRENS: Oh, I love that.

00:18:51.610 --> 00:18:53.930
How many times have I wanted
to have a style tag

00:18:53.930 --> 00:18:55.540
that was just for--

00:18:55.540 --> 00:18:57.110
SAM HOPKINS: So check
this thing out.

00:18:57.110 --> 00:19:01.460
So this is how we do this
scoping the CSS business.

00:19:01.460 --> 00:19:05.810
So this style scopes tag makes
it so that the CSS declared

00:19:05.810 --> 00:19:10.760
inside will only apply
inside this widget.

00:19:10.760 --> 00:19:13.850
It doesn't leak outside the
widget, which is super cool.

00:19:13.850 --> 00:19:15.970
This allows us to just
set the footer font.

00:19:15.970 --> 00:19:18.680
In this case, we're using for
something fairly silly, but

00:19:18.680 --> 00:19:19.910
it's a good demo.

00:19:19.910 --> 00:19:22.500
But here's the cool part.

00:19:22.500 --> 00:19:24.710
And again, as I said, the syntax
is in a little bit of a

00:19:24.710 --> 00:19:26.020
flux, but the semantics
are the same.

00:19:26.020 --> 00:19:28.680
So here's a class body inside
this script tag.

00:19:28.680 --> 00:19:29.880
And I can't actually put
the whole thing on the

00:19:29.880 --> 00:19:32.720
screen right now.

00:19:32.720 --> 00:19:37.710
And this class body contains
the fields methods and so

00:19:37.710 --> 00:19:41.870
forth that get attached to
the to-do list element.

00:19:41.870 --> 00:19:44.230
So you can see I have this add
to-do method that gets passed

00:19:44.230 --> 00:19:47.550
to to-do, which is some other
object I've defined elsewhere

00:19:47.550 --> 00:19:49.130
that just encapsulates
the information about

00:19:49.130 --> 00:19:52.010
a particular to-do.

00:19:52.010 --> 00:19:58.100
And when you add a to-do, the
widget will create a new to-do

00:19:58.100 --> 00:19:59.090
list element.

00:19:59.090 --> 00:20:01.730
It'll bind the data to it.

00:20:01.730 --> 00:20:03.740
And we'll talk about how to do
that automatically later.

00:20:03.740 --> 00:20:08.800
And then it'll add it
to its own DOM.

00:20:08.800 --> 00:20:09.720
JJ BEHRENS: I'm a little
bit confused.

00:20:09.720 --> 00:20:12.280
It says, script type application
slash JavaScript.

00:20:12.280 --> 00:20:13.210
But I see types.

00:20:13.210 --> 00:20:14.260
So it looks like Dart.

00:20:14.260 --> 00:20:15.050
Can you tell me--

00:20:15.050 --> 00:20:15.340
SAM HOPKINS: Right.

00:20:15.340 --> 00:20:17.920
So remember how I said this is
a source file that doesn't go

00:20:17.920 --> 00:20:19.530
through any compiler
right now?

00:20:19.530 --> 00:20:20.790
We haven't actually been
able to check it.

00:20:20.790 --> 00:20:21.720
That's an error.

00:20:21.720 --> 00:20:23.670
That should say application
Dart.

00:20:23.670 --> 00:20:26.610
I apologize.

00:20:26.610 --> 00:20:27.650
Or it may--

00:20:27.650 --> 00:20:29.950
I don't know if you know,
Jacob, what the current

00:20:29.950 --> 00:20:31.290
version of the syntax is.

00:20:31.290 --> 00:20:32.550
That script tag may not
actually exist.

00:20:32.550 --> 00:20:33.920
It may be in a separate file.

00:20:33.920 --> 00:20:36.090
JACOB RICHMAN: No, you could
write it like that.

00:20:36.090 --> 00:20:37.882
We could look at the
syntax, the version

00:20:37.882 --> 00:20:39.680
that's currently there.

00:20:39.680 --> 00:20:41.270
SAM HOPKINS: OK, well, in a
minute, we'll look at one that

00:20:41.270 --> 00:20:43.410
actually runs through the
compiler as it exists.

00:20:43.410 --> 00:20:45.730
Sorry for the slight
disjointedness here.

00:20:45.730 --> 00:20:46.570
SETH LADD: That's OK.

00:20:46.570 --> 00:20:50.590
SAM HOPKINS: So hopefully this
gives you an idea of how these

00:20:50.590 --> 00:20:53.010
suckers work.

00:20:53.010 --> 00:20:54.140
Let me find--

00:20:54.140 --> 00:20:55.710
OK, so here's one other piece.

00:20:55.710 --> 00:20:57.660
There's these lifecycle methods
that you can subscribe

00:20:57.660 --> 00:21:00.925
to that will be called
on your component at

00:21:00.925 --> 00:21:02.060
the appropriate times.

00:21:02.060 --> 00:21:05.190
So here's this created method
that I have that I'm never

00:21:05.190 --> 00:21:07.190
actually calling in my code.

00:21:07.190 --> 00:21:10.580
But the runtime system knows
when I've created one of these

00:21:10.580 --> 00:21:13.760
components, and it'll call this
created method for me.

00:21:13.760 --> 00:21:18.530
And it allows me to set up
some fields and so forth.

00:21:18.530 --> 00:21:21.510
It acts a little bit like a
constructor, except it doesn't

00:21:21.510 --> 00:21:24.360
actually do the construction
itself.

00:21:24.360 --> 00:21:28.080
Again, there's this inserted
method that gets called when

00:21:28.080 --> 00:21:31.010
the component is inserted into
the main DOM that allows me to

00:21:31.010 --> 00:21:32.870
set up event listeners
and so forth.

00:21:32.870 --> 00:21:33.930
And you can see, I haven't
actually done

00:21:33.930 --> 00:21:34.770
anything with them.

00:21:34.770 --> 00:21:36.930
But there's these other
lifecycle methods, in

00:21:36.930 --> 00:21:38.660
particular, the attribute
changed one that we were

00:21:38.660 --> 00:21:41.580
talking about, that'll just
automatically get called when

00:21:41.580 --> 00:21:44.690
one of your attributes
gets changed.

00:21:44.690 --> 00:21:45.420
SETH LADD: This is great.

00:21:45.420 --> 00:21:48.600
So we see an element tag here
that encapsulates, quite

00:21:48.600 --> 00:21:51.710
literally, actually, the
structure of the new element--

00:21:51.710 --> 00:21:53.440
we saw that there--

00:21:53.440 --> 00:21:55.740
the style of the element,
and then the

00:21:55.740 --> 00:21:57.480
behavior of the element.

00:21:57.480 --> 00:21:59.920
And it's all one self-contained
package.

00:21:59.920 --> 00:22:01.280
That's really cool.

00:22:01.280 --> 00:22:03.280
JJ BEHRENS: So I assume these
components can call each

00:22:03.280 --> 00:22:05.350
other's methods?

00:22:05.350 --> 00:22:10.000
SAM HOPKINS: Absolutely,
especially when you're in an

00:22:10.000 --> 00:22:10.890
all-Dart universe.

00:22:10.890 --> 00:22:13.670
And we can talk about the
inner operation later.

00:22:13.670 --> 00:22:17.590
But if I query for one of these
guys on my page and then

00:22:17.590 --> 00:22:21.600
I have a reference to it, and
I just call one of its

00:22:21.600 --> 00:22:24.120
methods, it'll work as
you would expect.

00:22:24.120 --> 00:22:26.380
So as long as one component can
get a reference to another

00:22:26.380 --> 00:22:29.920
component, it just treats
it as a Dart object.

00:22:29.920 --> 00:22:31.170
JJ BEHRENS: Great.

00:22:32.840 --> 00:22:34.800
SAM HOPKINS: Do you guys
want to launch into--

00:22:34.800 --> 00:22:36.100
let me turn off the
screenshare here

00:22:36.100 --> 00:22:36.400
so you can see us.

00:22:36.400 --> 00:22:36.980
There we go.

00:22:36.980 --> 00:22:37.820
Hi, again.

00:22:37.820 --> 00:22:38.380
SETH LADD: Great.

00:22:38.380 --> 00:22:40.390
So this might be a
good transition.

00:22:40.390 --> 00:22:42.780
We saw the demo to-do
app, which is cool.

00:22:42.780 --> 00:22:44.630
And then we saw the
code behind it.

00:22:44.630 --> 00:22:46.720
And that showed us the examples
of encapsulation,

00:22:46.720 --> 00:22:48.290
behavior, and all
that good stuff.

00:22:48.290 --> 00:22:49.600
But now I'm kind of curious.

00:22:49.600 --> 00:22:50.680
Well, that was Dart code.

00:22:50.680 --> 00:22:53.120
And Dart doesn't actually run in
production browsers today.

00:22:53.120 --> 00:22:57.630
In fact, Web Components is very
much a set of standards

00:22:57.630 --> 00:22:59.460
being born as we speak.

00:22:59.460 --> 00:23:02.880
So how do you guys take all
these new technologies and

00:23:02.880 --> 00:23:05.500
techniques and actually make
them available today?

00:23:05.500 --> 00:23:06.750
What's your secret?

00:23:09.180 --> 00:23:13.060
JOHN MESSERLY: Our secret for
Dart, we have Dart to JS.

00:23:13.060 --> 00:23:16.040
And that's our compiler text
Dart code to JavaScript.

00:23:16.040 --> 00:23:19.020
Everyone who's listening is
probably familiar with that.

00:23:19.020 --> 00:23:20.870
The other thing that
we're building--

00:23:20.870 --> 00:23:21.790
SAM HOPKINS: Screenshare.

00:23:21.790 --> 00:23:24.100
JOHN MESSERLY: Yeah,
how do I do that?

00:23:24.100 --> 00:23:25.220
SAM HOPKINS: What do
you want to demo?

00:23:25.220 --> 00:23:27.280
JOHN MESSERLY: Do you want
to show this one?

00:23:27.280 --> 00:23:28.690
SAM HOPKINS: You just do
screenshare, and then you do--

00:23:28.690 --> 00:23:30.680
JOHN MESSERLY: Actually, the
Dart editor first, if you can.

00:23:30.680 --> 00:23:32.016
JACOB RICHMAN: You might just
give them a-- screenshare the

00:23:32.016 --> 00:23:33.250
whole screen.

00:23:33.250 --> 00:23:34.380
JOHN MESSERLY: Yeah, can you
screenshare the whole screen?

00:23:34.380 --> 00:23:36.010
SAM HOPKINS: Yeah.

00:23:36.010 --> 00:23:37.530
Screensharing the
whole screen.

00:23:37.530 --> 00:23:40.620
JJ BEHRENS: Don't
leak anything.

00:23:40.620 --> 00:23:41.840
JOHN MESSERLY: We'll leak
our open source

00:23:41.840 --> 00:23:44.020
Web Component secrets.

00:23:44.020 --> 00:23:45.910
SAM HOPKINS: I'm going to have
to biggify the font.

00:23:45.910 --> 00:23:46.940
JOHN MESSERLY: Oh,
you're right.

00:23:46.940 --> 00:23:48.487
JJ BEHRENS: It's not nearly as
exciting in the Chrome world

00:23:48.487 --> 00:23:52.760
as it is in the Android world.

00:23:52.760 --> 00:23:53.030
JOHN MESSERLY: What?

00:23:53.030 --> 00:23:54.100
The leaking options?

00:23:54.100 --> 00:23:57.290
JJ BEHRENS: Yeah, leaking.

00:23:57.290 --> 00:24:00.325
SAM HOPKINS: Yeah, that's the
thing about six-week releases.

00:24:03.660 --> 00:24:05.610
How's the font size?

00:24:05.610 --> 00:24:07.260
Can you guys read that?

00:24:07.260 --> 00:24:07.750
SETH LADD: A little bit.

00:24:07.750 --> 00:24:08.780
If you can make it
bigger, great.

00:24:08.780 --> 00:24:10.030
But I think that's as
big as it gets.

00:24:12.480 --> 00:24:14.450
JOHN MESSERLY: So what we're
looking at here, this is a

00:24:14.450 --> 00:24:17.560
version that's actually
running.

00:24:17.560 --> 00:24:19.830
And the way that we--

00:24:19.830 --> 00:24:24.490
this is a similar version of the
app that Sam showed you.

00:24:24.490 --> 00:24:28.420
But what's interesting about
this one is that we actually

00:24:28.420 --> 00:24:31.040
have a compiler now
that can look at--

00:24:31.040 --> 00:24:31.600
so this is our--

00:24:31.600 --> 00:24:33.780
to run in browsers that
aren't going to--

00:24:33.780 --> 00:24:38.130
like potentially versions of
IE that aren't going to get

00:24:38.130 --> 00:24:40.680
native Web Components for
a while, they're very

00:24:40.680 --> 00:24:42.600
excited about it.

00:24:42.600 --> 00:24:47.020
They're on a different timeline
than we're used to on

00:24:47.020 --> 00:24:49.760
Chrome and Firefox and Safari.

00:24:49.760 --> 00:24:53.300
So what we want to do is
basically the same strategy

00:24:53.300 --> 00:24:54.530
we're using for Dart.

00:24:54.530 --> 00:24:56.910
We're going to make a really
good compiler that's going to

00:24:56.910 --> 00:25:01.390
take these input files with
elements and templates and all

00:25:01.390 --> 00:25:06.530
this great stuff and generate
a combination of HTML pages

00:25:06.530 --> 00:25:09.140
and Dart files to back that.

00:25:09.140 --> 00:25:11.150
And then eventually then
the Dart is compiled to

00:25:11.150 --> 00:25:12.040
JavaScript.

00:25:12.040 --> 00:25:15.150
So you end up with a set of
files that can just run in

00:25:15.150 --> 00:25:17.600
existing browsers.

00:25:17.600 --> 00:25:20.340
So I'm going to show
you how that works.

00:25:20.340 --> 00:25:21.610
It's pretty simple.

00:25:21.610 --> 00:25:23.045
We basically have a--

00:25:23.045 --> 00:25:24.470
SAM HOPKINS: You want
to biggify the--

00:25:24.470 --> 00:25:25.180
JOHN MESSERLY: Oh,
yeah, I should.

00:25:25.180 --> 00:25:26.480
SAM HOPKINS: Just Alt-plus
should--

00:25:26.480 --> 00:25:29.188
or Command-Plus should
do it, right?

00:25:29.188 --> 00:25:31.116
JOHN MESSERLY: Good call.

00:25:31.116 --> 00:25:34.490
SAM HOPKINS: More
"embiggening."

00:25:34.490 --> 00:25:35.430
JACOB RICHMAN: More bigger.

00:25:35.430 --> 00:25:39.780
JOHN MESSERLY: Yeah, we
basically have this project on

00:25:39.780 --> 00:25:44.590
GitHub, which will be a package
on Pub as soon as Pub

00:25:44.590 --> 00:25:48.430
is ready for us to put it up
there and we get a little bit

00:25:48.430 --> 00:25:49.480
further along.

00:25:49.480 --> 00:25:51.040
But basically, it's GitHub.

00:25:51.040 --> 00:25:53.590
It's under Dartlang and then
Dart Web Components.

00:25:53.590 --> 00:25:55.610
That's the name.

00:25:55.610 --> 00:25:58.230
And we have this little
compiler for Dart Web

00:25:58.230 --> 00:26:01.360
components, which you
can just run.

00:26:01.360 --> 00:26:05.320
So I'm going to run it on that
file I just showed you, that

00:26:05.320 --> 00:26:07.430
template tool main HTML.

00:26:07.430 --> 00:26:08.710
So it's pretty fast,
as you can see.

00:26:08.710 --> 00:26:14.820
And it basically scanned all of
our HTML files and it picks

00:26:14.820 --> 00:26:19.090
them apart and creates HTML
that will work in existing

00:26:19.090 --> 00:26:22.460
browsers and Dart code, which
then you can either run

00:26:22.460 --> 00:26:25.690
directly in Dartium or you
can run in Dart to JS.

00:26:25.690 --> 00:26:28.346
I don't have it set up at the
moment to run it through Dart

00:26:28.346 --> 00:26:30.070
to JS, but it's normal
Dart code.

00:26:30.070 --> 00:26:32.770
So there's no magic to
that second step.

00:26:32.770 --> 00:26:34.040
SETH LADD: I'm sorry, John.

00:26:34.040 --> 00:26:37.690
Just so I'm clear, what you
just compiled was not into

00:26:37.690 --> 00:26:39.270
JavaScript.

00:26:39.270 --> 00:26:40.060
Is this just split in between?

00:26:40.060 --> 00:26:40.850
JOHN MESSERLY: Yeah.

00:26:40.850 --> 00:26:42.340
It's a two-step process.

00:26:42.340 --> 00:26:45.350
Because we already have the Dart
to JavaScript compiler,

00:26:45.350 --> 00:26:46.960
which is working great.

00:26:46.960 --> 00:26:50.610
So the first step is basically
to do a few things.

00:26:50.610 --> 00:26:54.530
So we want to implement
this data binding.

00:26:54.530 --> 00:26:55.900
We haven't talked as
much about this.

00:26:55.900 --> 00:27:00.940
But this is another important
part of their overall Web

00:27:00.940 --> 00:27:08.610
Component story, which is some
folks on our Chrome Web

00:27:08.610 --> 00:27:12.530
Standards team looked at this
proliferation of JavaScript

00:27:12.530 --> 00:27:13.030
frameworks.

00:27:13.030 --> 00:27:14.430
And they're like, what are
these common elements?

00:27:14.430 --> 00:27:16.560
Because everyone has to
keep reinventing this.

00:27:16.560 --> 00:27:18.370
And they don't interoperate
with each other.

00:27:18.370 --> 00:27:22.750
And people can't easily share
code that's written in these

00:27:22.750 --> 00:27:24.520
different frameworks.

00:27:24.520 --> 00:27:26.930
And one of the common features
was components.

00:27:26.930 --> 00:27:29.130
So we've talked a
lot about that.

00:27:29.130 --> 00:27:30.930
The other one was data
binding, some

00:27:30.930 --> 00:27:34.250
kind of easy way to--

00:27:34.250 --> 00:27:36.930
I've just got a field here, and
it's a string, and I want

00:27:36.930 --> 00:27:41.490
to make it show up in my text.

00:27:41.490 --> 00:27:45.250
Or I've got the onBlur event,
and I just wanted to call my

00:27:45.250 --> 00:27:47.680
Dart method.

00:27:47.680 --> 00:27:53.930
So it's a set of things
that we do.

00:27:53.930 --> 00:27:56.660
So when we run our compiler,
we have a few things.

00:27:56.660 --> 00:27:59.330
We have to process these
template element tags and

00:27:59.330 --> 00:28:02.260
admit the right code to
construct the Dart object at

00:28:02.260 --> 00:28:06.610
run time and bind it to the
element on the JavaScript DOM.

00:28:06.610 --> 00:28:08.730
And then we also have to
generate code to handle all

00:28:08.730 --> 00:28:13.290
these little expressions and to
do the right data binding.

00:28:13.290 --> 00:28:15.800
So those are essentially the
things that compiler does.

00:28:15.800 --> 00:28:19.350
I can show you.

00:28:19.350 --> 00:28:20.880
The output is kind of
ugly right now.

00:28:20.880 --> 00:28:24.100
We need to make it
more pretty.

00:28:24.100 --> 00:28:24.420
SETH LADD: Sure.

00:28:24.420 --> 00:28:28.270
But the idea is then you run
this Dart to JS so that it can

00:28:28.270 --> 00:28:30.090
work in today's modern
browsers.

00:28:30.090 --> 00:28:31.840
JOHN MESSERLY: Exactly.

00:28:31.840 --> 00:28:35.480
JJ BEHRENS: And I assume one
of these days we might have

00:28:35.480 --> 00:28:38.600
some integration with the Dart
editors so that this stuff is

00:28:38.600 --> 00:28:41.240
kind of automatic.

00:28:41.240 --> 00:28:41.510
JOHN MESSERLY: Yes.

00:28:41.510 --> 00:28:42.380
In fact--

00:28:42.380 --> 00:28:43.106
SAM HOPKINS: It's coming.

00:28:43.106 --> 00:28:47.080
JOHN MESSERLY: We're getting
close to it.

00:28:47.080 --> 00:28:51.290
Many of these things
are different

00:28:51.290 --> 00:28:52.900
things going in parallel.

00:28:52.900 --> 00:28:55.407
So one of the things we have
been looking-- oh, this is

00:28:55.407 --> 00:28:57.820
going to look small again.

00:28:57.820 --> 00:28:59.980
Well, the important part is
we're basically looking at a

00:28:59.980 --> 00:29:03.550
way that you can have this
file down here, which is

00:29:03.550 --> 00:29:08.110
build.dart, which is a special
file you put in your--

00:29:08.110 --> 00:29:10.520
the editor landed support for
this pretty recently.

00:29:10.520 --> 00:29:12.750
It's a special file you put in
the root directory of your

00:29:12.750 --> 00:29:17.980
project, and they know to call
that when files change.

00:29:17.980 --> 00:29:21.020
And that means that we can then
handle the template tool

00:29:21.020 --> 00:29:21.820
automatically.

00:29:21.820 --> 00:29:25.090
So you edit one of these
component files.

00:29:25.090 --> 00:29:29.440
So I go up here to my footer,
and I edit something.

00:29:29.440 --> 00:29:33.030
I change some text here,
and I save it.

00:29:33.030 --> 00:29:35.850
And then immediately, they'll
generate the new version.

00:29:35.850 --> 00:29:37.880
So I go to my browser
and refresh--

00:29:37.880 --> 00:29:39.330
actually, in fact I may
only need to go to

00:29:39.330 --> 00:29:40.235
the browser and refresh.

00:29:40.235 --> 00:29:43.750
And it will just know to
compile it on the fly.

00:29:43.750 --> 00:29:45.930
It's going to be a pretty
sweet story.

00:29:45.930 --> 00:29:48.260
SETH LADD: Yeah, the feedback
we get is that the editing

00:29:48.260 --> 00:29:50.055
experience in the Dart world
is really fantastic.

00:29:50.055 --> 00:29:52.785
Because you sit in the editor,
and you run the application

00:29:52.785 --> 00:29:55.020
which spits out Dartium,
which is just Chromium

00:29:55.020 --> 00:29:56.390
with the Dart VM.

00:29:56.390 --> 00:29:58.810
And you get that great, make a
little change, hit reload.

00:29:58.810 --> 00:30:01.330
And it's cool to see you guys
trying to emulate that and

00:30:01.330 --> 00:30:01.610
make that work as well.

00:30:01.610 --> 00:30:02.880
JJ BEHRENS: I'm addicted
to that.

00:30:02.880 --> 00:30:04.130
I have to have that.

00:30:07.130 --> 00:30:08.520
SETH LADD: So those
are great demos.

00:30:08.520 --> 00:30:12.000
And it looks like we're on
track to make the future

00:30:12.000 --> 00:30:14.100
happen really, really soon.

00:30:14.100 --> 00:30:17.040
And that is the part that
really excites me.

00:30:17.040 --> 00:30:21.140
Talk to me a little bit about
who else is supporting this

00:30:21.140 --> 00:30:23.420
whole idea of Web-- is this
a Chrome-only thing?

00:30:23.420 --> 00:30:24.430
Is this a Google thing?

00:30:24.430 --> 00:30:27.550
Where is this coming from?

00:30:27.550 --> 00:30:32.160
JOHN MESSERLY: Well, a lot of
the work has been driven by

00:30:32.160 --> 00:30:34.770
some of our open standards
folks at Google.

00:30:34.770 --> 00:30:38.860
But there's a lot of excitement
from especially

00:30:38.860 --> 00:30:41.080
Firefox and IE.

00:30:41.080 --> 00:30:44.190
So the people who are behind our
web standards, they meet

00:30:44.190 --> 00:30:45.770
very frequently with
those guys.

00:30:45.770 --> 00:30:49.520
Mozilla has done a project
called X-Tags, which if you

00:30:49.520 --> 00:30:54.290
search for "Mozilla X-Tag"
you can easily find it.

00:30:54.290 --> 00:30:59.700
That's the part of it where
you can put x dash John's

00:30:59.700 --> 00:31:03.410
fancy button on your page and
it will know to instantiate

00:31:03.410 --> 00:31:06.360
the Dart or JavaScript object
that's backing that.

00:31:06.360 --> 00:31:07.620
SAM HOPKINS: We have that.

00:31:07.620 --> 00:31:08.950
JOHN MESSERLY: Yeah,
we have that, too.

00:31:11.470 --> 00:31:13.250
SETH LADD: Cool to see how their
browsers also try to

00:31:13.250 --> 00:31:15.210
make this whole vision.

00:31:15.210 --> 00:31:17.050
SAM HOPKINS: We should
note that the--

00:31:17.050 --> 00:31:20.350
I believe, X-Tags project was a
JavaScript polyfill, right?

00:31:20.350 --> 00:31:27.000
So you can also just last week
or maybe two weeks ago, there

00:31:27.000 --> 00:31:31.650
was a patch that went up on
Mozilla.org to implement the

00:31:31.650 --> 00:31:36.860
beginnings of custom element
support right in the C++, in

00:31:36.860 --> 00:31:38.630
the parser and the rendering
engine and so forth.

00:31:41.560 --> 00:31:45.190
Because it's a standard that's
in progress, there's lots of

00:31:45.190 --> 00:31:47.220
different proposed APIs, and
they're implementing one

00:31:47.220 --> 00:31:49.340
that's a little bit different
from the way Chrome was

00:31:49.340 --> 00:31:50.250
talking about implementing it.

00:31:50.250 --> 00:31:51.940
But it's the same semantics.

00:31:51.940 --> 00:31:54.380
And eventually, we will converge
on the way this will

00:31:54.380 --> 00:31:55.990
work for all browsers.

00:31:55.990 --> 00:31:57.780
But they've got a patch.

00:31:57.780 --> 00:32:00.110
It's going to happen
in Firefox.

00:32:00.110 --> 00:32:02.552
JJ BEHRENS: I love the
term polyfill.

00:32:02.552 --> 00:32:07.040
Not everyone understands, but
to define polyfill, polyfill

00:32:07.040 --> 00:32:09.850
is this bit of magic that
makes tomorrow's

00:32:09.850 --> 00:32:13.160
web available today.

00:32:13.160 --> 00:32:13.320
SETH LADD: Yeah.

00:32:13.320 --> 00:32:16.290
And I think what the team was
showing off earlier are

00:32:16.290 --> 00:32:17.220
compiler step.

00:32:17.220 --> 00:32:18.550
Let's take advantage of that.

00:32:18.550 --> 00:32:23.520
Let's make that work for us and
translate a world in the

00:32:23.520 --> 00:32:26.390
more pure Web Components world
back down into the existing

00:32:26.390 --> 00:32:27.870
tech we have today.

00:32:27.870 --> 00:32:29.580
And so I'm interested.

00:32:29.580 --> 00:32:31.270
I'm sold.

00:32:31.270 --> 00:32:32.520
What's the status
of the project?

00:32:32.520 --> 00:32:33.275
And can I use this today?

00:32:33.275 --> 00:32:34.710
And how can I follow along?

00:32:38.610 --> 00:32:40.920
JOHN MESSERLY: Following
along is easy.

00:32:40.920 --> 00:32:45.620
I would say go to our GitHub
project and just watch it.

00:32:45.620 --> 00:32:47.460
And you can watch what's
going on there.

00:32:47.460 --> 00:32:50.080
SETH LADD: And is the sample
we saw also in

00:32:50.080 --> 00:32:51.530
GitHub, the to-do MVC?

00:32:51.530 --> 00:32:52.920
JOHN MESSERLY: Yeah.

00:32:52.920 --> 00:32:56.040
There are two versions
right now.

00:32:56.040 --> 00:32:57.790
We're still working
on merging them.

00:32:57.790 --> 00:33:00.070
We have our compiler and our
version that just runs in

00:33:00.070 --> 00:33:04.210
Dartium with no need
for a compiler

00:33:04.210 --> 00:33:05.640
or a server or anything.

00:33:05.640 --> 00:33:08.400
It just runs in the client.

00:33:08.400 --> 00:33:11.730
So those two versions, right now
they have some very small

00:33:11.730 --> 00:33:12.220
differences.

00:33:12.220 --> 00:33:14.600
So we're working on
merging it now.

00:33:14.600 --> 00:33:18.080
As soon as we get that, I think
we'll have a pretty good

00:33:18.080 --> 00:33:20.900
place where people can start
using it to build components

00:33:20.900 --> 00:33:23.750
and see what it feels like.

00:33:23.750 --> 00:33:27.196
So I would say it's coming
pretty soon.

00:33:27.196 --> 00:33:29.470
SETH LADD: Good to know we can
follow it along in open source

00:33:29.470 --> 00:33:32.070
and try it out and
send feedback.

00:33:32.070 --> 00:33:32.330
JOHN MESSERLY: Yeah.

00:33:32.330 --> 00:33:35.600
And listen to the Dart mailing
list as well for anyone who's

00:33:35.600 --> 00:33:36.530
not subscribed to that.

00:33:36.530 --> 00:33:41.250
Because we will definitely be
sending some news there when

00:33:41.250 --> 00:33:43.660
we're at the point where, hey,
we need a lot more people to

00:33:43.660 --> 00:33:45.270
try this, because it's
gotten solid.

00:33:45.270 --> 00:33:50.120
SAM HOPKINS: And I think the
plan is that parts of this are

00:33:50.120 --> 00:33:51.660
going to roll out
of piecewise.

00:33:51.660 --> 00:33:53.570
So I think you'll be able to
play with the template

00:33:53.570 --> 00:33:58.670
compiler before you'll be able
to interact with components.

00:33:58.670 --> 00:34:00.520
You'll need to start by just
doing your interaction with

00:34:00.520 --> 00:34:02.230
components via the template
compiler.

00:34:02.230 --> 00:34:04.745
And you won't be able to do it
in Dart code that doesn't run

00:34:04.745 --> 00:34:05.150
through that compiler.

00:34:05.150 --> 00:34:07.050
And eventually, hopefully,
you'll just be able to write

00:34:07.050 --> 00:34:09.679
any old Dart code that can query
for an element on a page

00:34:09.679 --> 00:34:10.889
and do something with it.

00:34:10.889 --> 00:34:13.560
Stuff is going to roll out
piecewise as we develop the

00:34:13.560 --> 00:34:16.370
necessary code and
infrastructure.

00:34:16.370 --> 00:34:17.350
SETH LADD: That totally works.

00:34:17.350 --> 00:34:19.909
That allows us to be a little
bit more responsive to

00:34:19.909 --> 00:34:20.934
feedback, too.

00:34:20.934 --> 00:34:23.230
SAM HOPKINS: Exactly.

00:34:23.230 --> 00:34:23.600
SETH LADD: Great.

00:34:23.600 --> 00:34:26.320
Well, hopefully, we've got some
time for some questions.

00:34:26.320 --> 00:34:27.900
I don't know if we'll hit every
one, but there are some

00:34:27.900 --> 00:34:29.870
very highly voted questions
for you guys.

00:34:29.870 --> 00:34:31.730
So JJ is going to
fire them out.

00:34:31.730 --> 00:34:32.699
JJ BEHRENS: Yeah, I don't think
we're going to get to

00:34:32.699 --> 00:34:36.139
every question, because there's
four pages of them.

00:34:36.139 --> 00:34:36.650
SETH LADD: That's good.

00:34:36.650 --> 00:34:37.900
People are very interested.

00:34:37.900 --> 00:34:38.290
I like it.

00:34:38.290 --> 00:34:40.909
JJ BEHRENS: So Ravendra from
Bangalore said, "What are the

00:34:40.909 --> 00:34:43.820
list of Web Components targeted
for the M1 release?

00:34:43.820 --> 00:34:46.620
Will there be a data binding,
for example, list views for

00:34:46.620 --> 00:34:50.239
dynamic data?"

00:34:50.239 --> 00:34:53.190
JOHN MESSERLY: That's
a great question.

00:34:53.190 --> 00:34:55.580
Where we are right now is we're
laying this foundational

00:34:55.580 --> 00:34:58.610
layer that makes it possible
to build on this.

00:34:58.610 --> 00:35:02.210
I think after that it makes a
lot of sense to start building

00:35:02.210 --> 00:35:05.710
out some base widgets and
other things like that.

00:35:05.710 --> 00:35:08.990
I think we'll have more to
say about that soon.

00:35:08.990 --> 00:35:12.410
But right now, we're still
focusing on just enabling

00:35:12.410 --> 00:35:14.510
components to work well
in the browser.

00:35:14.510 --> 00:35:15.900
SAM HOPKINS: I believe, though,
that one of the

00:35:15.900 --> 00:35:18.190
versions that you've already
seen that we demoed uses a

00:35:18.190 --> 00:35:20.590
very prototype dynamic
list component.

00:35:20.590 --> 00:35:23.730
So we won't necessarily endorse
any particular list

00:35:23.730 --> 00:35:26.280
component yet as this is the Web
Components list component.

00:35:26.280 --> 00:35:28.230
But you can see how you might
go about writing one if you

00:35:28.230 --> 00:35:30.326
look at that demo.

00:35:30.326 --> 00:35:31.450
JOHN MESSERLY: Yeah, that's
a great point.

00:35:31.450 --> 00:35:33.610
There will definitely be
data binding on lists.

00:35:33.610 --> 00:35:38.410
So if you're mainly looking to
data bind and say here's my

00:35:38.410 --> 00:35:44.750
list of Dart model objects, I
want to bind these two to

00:35:44.750 --> 00:35:48.110
individual rows in a list,
something along those lines,

00:35:48.110 --> 00:35:50.040
you'll definitely be
able to do that.

00:35:50.040 --> 00:35:51.850
SETH LADD: I'll make a plug
for Pub here as well.

00:35:51.850 --> 00:35:54.800
I can see Pub, our package
manager, also being a

00:35:54.800 --> 00:35:57.740
mechanism to discover and
distribute Web Components

00:35:57.740 --> 00:35:58.910
themselves.

00:35:58.910 --> 00:36:02.190
And so you might find lots
of different list binding

00:36:02.190 --> 00:36:02.720
components out there.

00:36:02.720 --> 00:36:04.510
So that's pretty cool.

00:36:04.510 --> 00:36:06.400
JJ BEHRENS: So next up, I think
we've partially answered

00:36:06.400 --> 00:36:09.280
this, but maybe you guys could
refresh our memory Ernesto

00:36:09.280 --> 00:36:11.700
from Granada, Spain, said,
"Web Components is a

00:36:11.700 --> 00:36:14.570
technology that's still finding
its way to build

00:36:14.570 --> 00:36:19.090
things and requires additional
flags in the stable Chrome not

00:36:19.090 --> 00:36:21.120
fully supported at all
in other browsers.

00:36:21.120 --> 00:36:24.200
How will we interact with that?"
So we talked a little

00:36:24.200 --> 00:36:25.240
bit about polyfills.

00:36:25.240 --> 00:36:26.890
SETH LADD: I think we
answered this one.

00:36:26.890 --> 00:36:28.760
That's what makes me so excited
is we can actually try

00:36:28.760 --> 00:36:30.930
this stuff today, hands-on
experience with this

00:36:30.930 --> 00:36:33.110
technology in today's
browsers.

00:36:33.110 --> 00:36:33.560
Love it.

00:36:33.560 --> 00:36:35.050
JJ BEHRENS: Polyfill magic.

00:36:35.050 --> 00:36:36.720
JOHN MESSERLY: I will just throw
out one other comment,

00:36:36.720 --> 00:36:39.640
which is I think that one
thing that has actually

00:36:39.640 --> 00:36:41.470
surprised me a little bit
working on this project is

00:36:41.470 --> 00:36:44.190
that it seems like the web is
starting to move a lot faster.

00:36:44.190 --> 00:36:47.570
And I think there's a lot that
Firefox and Safari are on very

00:36:47.570 --> 00:36:48.420
fast updates.

00:36:48.420 --> 00:36:50.110
And IE really wants to
see a programming

00:36:50.110 --> 00:36:51.260
model improve, too.

00:36:51.260 --> 00:36:54.530
So things are coming faster than
you might think if you're

00:36:54.530 --> 00:36:56.670
used to the pace that the
web used to be at.

00:36:56.670 --> 00:36:56.920
JJ BEHRENS: Yeah.

00:36:56.920 --> 00:36:59.040
I don't know about you guys,
but as soon as I wake up in

00:36:59.040 --> 00:37:01.380
the morning, I look to see
what's been committed to

00:37:01.380 --> 00:37:04.080
Chrome the night before.

00:37:04.080 --> 00:37:05.330
SETH LADD: That's why we
have Peter Beverloo.

00:37:07.810 --> 00:37:11.120
JJ BEHRENS: So Pablo says,
In the UI lid, you

00:37:11.120 --> 00:37:12.280
have a widget hierarchy.

00:37:12.280 --> 00:37:15.200
For example, panel class extends
to component class and

00:37:15.200 --> 00:37:17.400
the window class extends
to panel class.

00:37:17.400 --> 00:37:18.970
That way, you can reuse
components and

00:37:18.970 --> 00:37:20.040
decrease the code size.

00:37:20.040 --> 00:37:23.240
Is it possible do the same with
Web Components, ie., can

00:37:23.240 --> 00:37:26.070
Web Components subclass
themselves?"

00:37:26.070 --> 00:37:27.554
SAM HOPKINS: Absolutely.

00:37:27.554 --> 00:37:28.350
JJ BEHRENS: OK, good.

00:37:28.350 --> 00:37:30.140
I was afraid you were going to
say that they could only

00:37:30.140 --> 00:37:32.010
extend existing things.

00:37:32.010 --> 00:37:32.690
SAM HOPKINS: Oh, no, no.

00:37:32.690 --> 00:37:34.600
JOHN MESSERLY: That
would be no good.

00:37:34.600 --> 00:37:36.130
SETH LADD: Not on my watch.

00:37:36.130 --> 00:37:39.480
JJ BEHRENS: He says, "Can I use
a Dart Web Component with

00:37:39.480 --> 00:37:41.360
a JavaScript Web Component?"

00:37:41.360 --> 00:37:42.500
SETH LADD: That is he.

00:37:42.500 --> 00:37:43.760
I am him.

00:37:43.760 --> 00:37:45.260
That was my question.

00:37:45.260 --> 00:37:47.910
JJ BEHRENS: The answer to
that is, absolutely.

00:37:47.910 --> 00:37:48.710
SETH LADD: I kind of want
to hear a little

00:37:48.710 --> 00:37:49.320
bit more about this.

00:37:49.320 --> 00:37:51.430
And we touched on it a little
bit when we were talking about

00:37:51.430 --> 00:37:52.940
attributes versus methods.

00:37:52.940 --> 00:37:56.240
But can you guys give a couple
words on what the interops

00:37:56.240 --> 00:37:59.070
story between these components
would be, JavaScript, Dart,

00:37:59.070 --> 00:38:01.290
vice versa?

00:38:01.290 --> 00:38:03.520
JACOB RICHMAN: Today if you used
attributes, you're good.

00:38:03.520 --> 00:38:07.440
In the future, you'll be able to
invoke methods as well, but

00:38:07.440 --> 00:38:10.010
that part of the story is a
part that we aren't really

00:38:10.010 --> 00:38:14.310
ready to really say is ready
for public consumption.

00:38:14.310 --> 00:38:19.490
But the nice thing about Web
Components is you've got an

00:38:19.490 --> 00:38:22.340
object that makes sense to talk
about referencing from

00:38:22.340 --> 00:38:25.650
both Dart and JavaScript in a
way that you don't really

00:38:25.650 --> 00:38:28.850
have, talking about just an
arbitrary object in the Dart,

00:38:28.850 --> 00:38:29.730
either for JavaScript
or [INAUDIBLE].

00:38:29.730 --> 00:38:32.280
Because in both Dart and
JavaScript, you've got a

00:38:32.280 --> 00:38:35.060
concept of what an element is.

00:38:35.060 --> 00:38:35.310
SAM HOPKINS: And

00:38:35.310 --> 00:38:37.470
discoverability is easy, right?

00:38:37.470 --> 00:38:41.170
A way for the thing from either
Dart or JavaScript.

00:38:41.170 --> 00:38:48.820
But we so we believe that a
large amount of the APIs on

00:38:48.820 --> 00:38:50.210
these things can be implemented
just using

00:38:50.210 --> 00:38:51.500
attributes.

00:38:51.500 --> 00:38:54.080
And any API with its attributes
is really easy.

00:38:54.080 --> 00:38:56.010
You just set the attribute
from JavaScript or Dart.

00:38:56.010 --> 00:39:00.380
And the other side, Dart or
JavaScript, can pick up that

00:39:00.380 --> 00:39:02.620
attribute change and respond
accordingly.

00:39:02.620 --> 00:39:04.740
SETH LADD: I'd like to really
make a personal plug towards

00:39:04.740 --> 00:39:07.720
that type of a design,
let alone interop.

00:39:07.720 --> 00:39:10.170
I think at least when we're
talking about components in,

00:39:10.170 --> 00:39:12.630
as Sam, you like to call it, the
declarative renaissance of

00:39:12.630 --> 00:39:15.020
web development, which,
I love that term.

00:39:15.020 --> 00:39:17.810
To me, the key one there
is declarative, right?

00:39:17.810 --> 00:39:19.740
It's declaring the elements.

00:39:19.740 --> 00:39:20.510
They might have attributes.

00:39:20.510 --> 00:39:22.950
They may have their
own subchildren.

00:39:22.950 --> 00:39:27.440
And at least I'd like to see us
make an effort on designing

00:39:27.440 --> 00:39:31.420
APIs that way and see
what happens.

00:39:31.420 --> 00:39:33.740
JJ BEHRENS: So the next
one is from an Antaro.

00:39:33.740 --> 00:39:36.370
"Can you explain to C Sharp and
Java developers before you

00:39:36.370 --> 00:39:38.900
go into detail as to what Web
Components are?" Now, I know

00:39:38.900 --> 00:39:41.040
that we've already covered what
Web Components are, but

00:39:41.040 --> 00:39:44.200
can we take another Java
C Sharp spin on this?

00:39:44.200 --> 00:39:45.135
No, I'm just joking.

00:39:45.135 --> 00:39:46.940
Let's move on.

00:39:46.940 --> 00:39:48.540
Vadam from Russia.

00:39:48.540 --> 00:39:50.620
"Having watched some
presentations about Angular

00:39:50.620 --> 00:39:54.110
JS, it looks that Angular and
Web Components have very

00:39:54.110 --> 00:39:55.540
similar central ideas.

00:39:55.540 --> 00:39:58.460
What is the relationship between
these two projects,

00:39:58.460 --> 00:40:00.360
and what is the difference
between them?" I think it's

00:40:00.360 --> 00:40:02.920
really about which cafeterias
we prefer.

00:40:06.140 --> 00:40:08.040
SETH LADD: You guys have
any thoughts on that?

00:40:08.040 --> 00:40:11.410
I know by Angular JS is mostly
a Google project.

00:40:14.220 --> 00:40:15.970
SAM HOPKINS: The key is that
these are going to be part of

00:40:15.970 --> 00:40:17.210
the web platform.

00:40:17.210 --> 00:40:19.600
Angular JS is a great framework,
but it's one among

00:40:19.600 --> 00:40:20.630
many frameworks.

00:40:20.630 --> 00:40:23.080
And it has all the same
problems in terms of

00:40:23.080 --> 00:40:25.900
interoperating with other
frameworks, being written in

00:40:25.900 --> 00:40:28.707
JavaScript and not natively in
the browser, and so forth.

00:40:28.707 --> 00:40:33.490
And in a future coming to you,
Web Components will be part of

00:40:33.490 --> 00:40:34.835
the browser and part of
the web ecosystem.

00:40:38.070 --> 00:40:40.910
JJ BEHRENS: I would say that
this Web Components idea is a

00:40:40.910 --> 00:40:44.690
lot more ambitious then Angular
JS, whereas Angular JS

00:40:44.690 --> 00:40:47.760
works really solidly for a lot
of apps already today in

00:40:47.760 --> 00:40:50.510
production.

00:40:50.510 --> 00:40:52.160
SETH LADD: So let's
take three more.

00:40:52.160 --> 00:40:53.180
I like these two questions.

00:40:53.180 --> 00:40:55.442
JJ BEHRENS: "Can you give one
or a few examples of how to

00:40:55.442 --> 00:40:55.840
use--"

00:40:55.840 --> 00:40:56.740
SETH LADD: We definitely
did that.

00:40:56.740 --> 00:40:58.440
Let's skip to this one.

00:40:58.440 --> 00:40:58.527
[?

00:40:58.527 --> 00:41:00.780
JJ BEHRENS: Gundmund said,
"What are the performance

00:41:00.780 --> 00:41:02.800
implications of using
Web Components?"

00:41:02.800 --> 00:41:04.330
That's a good one.

00:41:04.330 --> 00:41:06.030
SETH LADD: Well, there's a lot
of different ways to look at

00:41:06.030 --> 00:41:06.760
performance--

00:41:06.760 --> 00:41:11.390
raw computation, initial load
times, loads from cash.

00:41:11.390 --> 00:41:12.790
JJ BEHRENS: It's all
about latency.

00:41:12.790 --> 00:41:14.360
SETH LADD: The latency.

00:41:14.360 --> 00:41:18.320
But what I heard today was we
have a compilation step.

00:41:18.320 --> 00:41:21.420
And so we can do really smart
things to help our

00:41:21.420 --> 00:41:22.670
performance--

00:41:22.670 --> 00:41:26.600
early binding, late binding,
minification, taking advantage

00:41:26.600 --> 00:41:29.380
of particular platform
capabilities that might exist

00:41:29.380 --> 00:41:31.240
for your browser.

00:41:31.240 --> 00:41:34.290
So I don't know what you guys
think, but I'm hoping that in

00:41:34.290 --> 00:41:38.620
terms of performance, if you
were to write this with your

00:41:38.620 --> 00:41:41.860
declarative capabilities today,
and you were to write

00:41:41.860 --> 00:41:43.890
this with Web Components, the
performance should be

00:41:43.890 --> 00:41:45.722
basically the same, right?

00:41:45.722 --> 00:41:47.530
JOHN MESSERLY: That's
exactly right.

00:41:47.530 --> 00:41:49.800
SAM HOPKINS: One of the design
goals for the way that we

00:41:49.800 --> 00:41:52.940
implement all this
functionality--

00:41:52.940 --> 00:41:56.700
and we're still in design and
prototyping phase for the

00:41:56.700 --> 00:41:59.090
final implementation of all
this-- is that they cannot

00:41:59.090 --> 00:42:02.650
have any performance cost above
standard view model

00:42:02.650 --> 00:42:05.510
frameworks or even
just standard

00:42:05.510 --> 00:42:06.760
hand-coded view model stuff.

00:42:09.290 --> 00:42:11.225
JJ BEHRENS: The next question
is, "What would be the role of

00:42:11.225 --> 00:42:14.310
Web Components in developing
games with Dart?" Let me try

00:42:14.310 --> 00:42:15.690
to take a stab at that one.

00:42:15.690 --> 00:42:16.950
SETH LADD: Go for it.

00:42:16.950 --> 00:42:20.350
JJ BEHRENS: If you've coded
games in JavaScript, obviously

00:42:20.350 --> 00:42:22.660
you have the option of whether
you want to stick with just

00:42:22.660 --> 00:42:24.720
functions and closures
or you want to put

00:42:24.720 --> 00:42:26.400
together an OOP system.

00:42:26.400 --> 00:42:28.670
And I think that the same thing
kind of goes for Dart.

00:42:28.670 --> 00:42:32.400
And the same thing also goes
for Web Components, in that

00:42:32.400 --> 00:42:35.210
Web Components allow you to
structure your app in a way

00:42:35.210 --> 00:42:39.620
that might be helpful,
especially for a larger app.

00:42:39.620 --> 00:42:40.890
What do you guys think?

00:42:40.890 --> 00:42:43.410
JACOB RICHMAN: I'd say for a
game, you're going to use Web

00:42:43.410 --> 00:42:45.230
Components for the
UI of your game.

00:42:45.230 --> 00:42:51.910
But for the actual main rendered
game area, Web

00:42:51.910 --> 00:42:55.485
Components aren't going
to really impact

00:42:55.485 --> 00:42:57.140
your life that much.

00:42:57.140 --> 00:43:00.050
You're going to be using Web
TL or Canvas directly.

00:43:00.050 --> 00:43:02.360
JJ BEHRENS: So I'm going to
create a new term here--

00:43:02.360 --> 00:43:03.880
PODO--

00:43:03.880 --> 00:43:06.190
Plain Old Dart Objects--
all the way down.

00:43:09.890 --> 00:43:12.980
Gundmund also asks, "How is
model-driven views related to

00:43:12.980 --> 00:43:13.830
Web Components?

00:43:13.830 --> 00:43:17.020
How is Outlook browser
support for MDVs?"

00:43:17.020 --> 00:43:18.860
SETH LADD: This is a good
one to end on, yeah.

00:43:18.860 --> 00:43:20.150
MDV and Web Components.

00:43:20.150 --> 00:43:21.220
Is that the same thing?

00:43:21.220 --> 00:43:24.280
Are they two buzzwords
of the same flavor?

00:43:24.280 --> 00:43:25.980
What's the difference?

00:43:25.980 --> 00:43:28.270
JACOB RICHMAN: They are two
pieces that we think together

00:43:28.270 --> 00:43:32.695
really form a compelling story
for how you create your MVC

00:43:32.695 --> 00:43:34.470
apps in Dart.

00:43:34.470 --> 00:43:36.960
The two pieces are designed
to be pretty separable.

00:43:36.960 --> 00:43:42.700
So a user who really likes Web
Components but doesn't really

00:43:42.700 --> 00:43:46.050
like MDV can still go ahead
and live in that world.

00:43:46.050 --> 00:43:48.630
SAM HOPKINS: Just so we're
clear, MDV is another name for

00:43:48.630 --> 00:43:50.550
the data binding stuff that
we already showed off.

00:43:50.550 --> 00:43:52.630
SETH LADD: MDV is
model-drive use.

00:43:52.630 --> 00:43:55.110
JACOB RICHMAN: So MDV's how you
really closely define how

00:43:55.110 --> 00:44:00.460
you're binding your plain old
Dart data objects of your

00:44:00.460 --> 00:44:03.360
model to your UI of your view.

00:44:03.360 --> 00:44:05.570
SETH LADD: And I think one of
the design considerations

00:44:05.570 --> 00:44:10.310
around MDV is that it should
feel very webby.

00:44:10.310 --> 00:44:13.750
So you might have data
in the forms of ULs

00:44:13.750 --> 00:44:15.410
and LIs on your page.

00:44:15.410 --> 00:44:18.480
And you might say, that is my
model, which I really love.

00:44:18.480 --> 00:44:20.990
Because then as you get more
declarative with these sorts

00:44:20.990 --> 00:44:23.520
of things, you can play off of
what makes the web so great

00:44:23.520 --> 00:44:27.330
today, which is crawlability,
indexability.

00:44:27.330 --> 00:44:32.010
And I believe one of MDVs
design constraints or

00:44:32.010 --> 00:44:34.390
philosophies is maintain
this crawlability,

00:44:34.390 --> 00:44:37.630
indexability behavior.

00:44:37.630 --> 00:44:41.160
JACOB RICHMAN: You'll define
your templates for your views

00:44:41.160 --> 00:44:42.150
with standard HTML.

00:44:42.150 --> 00:44:44.790
But your model will
be Dart code.

00:44:44.790 --> 00:44:48.970
Your model will be Dart
lists and maps.

00:44:48.970 --> 00:44:52.300
SETH LADD: Can you have models
that are also in the page like

00:44:52.300 --> 00:44:54.900
JSON objects or actual
HTML objects?

00:44:54.900 --> 00:44:56.270
Maybe this is an old version
of the spec.

00:44:56.270 --> 00:44:59.630
JACOB RICHMAN: No, your models
would be [INAUDIBLE]

00:44:59.630 --> 00:45:01.910
classes.

00:45:01.910 --> 00:45:05.370
You're not going to force
yourself to represent your

00:45:05.370 --> 00:45:08.015
model as XML instead of--

00:45:08.015 --> 00:45:10.850
SETH LADD: Oh, hopefully not.

00:45:10.850 --> 00:45:13.930
JJ BEHRENS: So guys, I want to
thank you guys for taking the

00:45:13.930 --> 00:45:15.040
time to meet with us.

00:45:15.040 --> 00:45:16.760
This was a lot of fun.

00:45:16.760 --> 00:45:19.670
I know that a lot of us are
looking forward to this Web

00:45:19.670 --> 00:45:20.540
Components stuff.

00:45:20.540 --> 00:45:24.270
And I think this is going to
lead to a nicer the feature of

00:45:24.270 --> 00:45:25.270
web development.

00:45:25.270 --> 00:45:27.150
SETH LADD: And thank you very
much to Sam, who I know made a

00:45:27.150 --> 00:45:30.430
special trip back to Seattle
Google office.

00:45:30.430 --> 00:45:33.030
So I appreciate that, for
showing us what you've been up

00:45:33.030 --> 00:45:33.810
to all summer.

00:45:33.810 --> 00:45:37.780
And so on behalf of the whole
Dart community, we thank

00:45:37.780 --> 00:45:40.150
everyone there for working out
in the open, especially on

00:45:40.150 --> 00:45:42.060
this project.

00:45:42.060 --> 00:45:45.120
I should probably remind
everyone watching that we've

00:45:45.120 --> 00:45:46.890
got an open mailing
list and open bug

00:45:46.890 --> 00:45:48.880
tracker, open issue tracker.

00:45:48.880 --> 00:45:49.950
This an open source project.

00:45:49.950 --> 00:45:51.940
We definitely love
the feedback.

00:45:51.940 --> 00:45:55.860
We've made numerous changes
based on feedback on Dart.

00:45:55.860 --> 00:45:57.990
And we look forward to people
trying out Dart Web

00:45:57.990 --> 00:45:58.520
Components.

00:45:58.520 --> 00:46:01.230
And I think it's going
to be big.

00:46:01.230 --> 00:46:02.610
JJ BEHRENS: Absolutely.

00:46:02.610 --> 00:46:06.890
OK, well until next time,
take care of yourselves.

00:46:06.890 --> 00:46:07.610
SETH LADD: Thanks, everybody.

00:46:07.610 --> 00:46:08.710
See you next time.

00:46:08.710 --> 00:46:09.960
Bye.

