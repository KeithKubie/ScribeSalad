WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.559
[MUSIC PLAYING]

00:00:03.559 --> 00:00:04.975
JAMES WILLIAMS:
Welcome to Getting

00:00:04.975 --> 00:00:06.183
Started with Material Design.

00:00:06.183 --> 00:00:07.130
I'm James Williams.

00:00:07.130 --> 00:00:11.170
I'm a Senior Content
Developer at Udacity.

00:00:11.170 --> 00:00:14.710
A little bit about me, I wrote
a book on HDML5 Game Programming

00:00:14.710 --> 00:00:17.370
that's really, really old, so
you shouldn't buy it because I

00:00:17.370 --> 00:00:19.980
only get like $1.00
from it anyway.

00:00:19.980 --> 00:00:24.670
I create Android and web courses
at Udacity, and on the weekends

00:00:24.670 --> 00:00:26.280
I do Spartan races.

00:00:26.280 --> 00:00:29.100
And I got this job by
accidentally crashing a party.

00:00:32.290 --> 00:00:34.370
Here's just my shameless plug.

00:00:34.370 --> 00:00:36.630
Take our courses.

00:00:36.630 --> 00:00:40.170
At Udacity, we have
a bunch of courses

00:00:40.170 --> 00:00:44.330
that are available for free.

00:00:44.330 --> 00:00:47.795
And my internet is
weird, so just assume

00:00:47.795 --> 00:00:48.920
that that's a page loading.

00:00:51.560 --> 00:00:53.810
We have a bunch of courses
that are available for free

00:00:53.810 --> 00:00:57.892
on Android Development,
Web Development--

00:00:57.892 --> 00:01:00.350
and then we also have some
other courses on iOS Development

00:01:00.350 --> 00:01:01.880
that we didn't do with Google.

00:01:01.880 --> 00:01:03.950
So, go and do that stuff.

00:01:03.950 --> 00:01:06.150
So the target
audience for this talk

00:01:06.150 --> 00:01:09.130
is a person who has
developed an Android app.

00:01:09.130 --> 00:01:11.860
This isn't very
code-heavy, but it

00:01:11.860 --> 00:01:14.870
kind of uses some
terminology from that--

00:01:14.870 --> 00:01:17.400
understands general
Android layouts,

00:01:17.400 --> 00:01:20.940
and contains enough
design to get you moving.

00:01:20.940 --> 00:01:22.240
That my Wi-Fi coming on.

00:01:26.410 --> 00:01:29.190
Sorry about that.

00:01:29.190 --> 00:01:29.810
OK.

00:01:29.810 --> 00:01:30.315
Come on.

00:01:36.510 --> 00:01:38.880
Are you done?

00:01:38.880 --> 00:01:40.040
All right, what else.

00:01:43.170 --> 00:01:44.360
OK.

00:01:44.360 --> 00:01:47.320
All right, so just a quick
show of hands, how many of you

00:01:47.320 --> 00:01:51.090
guys have developed
an Android app before?

00:01:51.090 --> 00:01:51.820
Cool.

00:01:51.820 --> 00:01:54.830
Oh, and some of you
kids have too, sweet.

00:01:54.830 --> 00:01:59.600
For you guys, we also have an
Android for Beginners course

00:01:59.600 --> 00:02:02.220
that we just launched
a couple months ago,

00:02:02.220 --> 00:02:05.130
so go check that out.

00:02:05.130 --> 00:02:07.710
How many designers in the room?

00:02:07.710 --> 00:02:11.110
Great, so no one can
correct me if I'm wrong.

00:02:11.110 --> 00:02:15.950
So what I'm going to talk about
is actually Material Design,

00:02:15.950 --> 00:02:17.720
and then go over
different components

00:02:17.720 --> 00:02:22.620
of Material Design, surfaces,
bold graphic design,

00:02:22.620 --> 00:02:25.350
meaningful motion,
and adaptive design.

00:02:25.350 --> 00:02:29.810
Now on those last two, because
they build a lot on the APIs

00:02:29.810 --> 00:02:34.530
that came before-- Material
Design before Android Lollipop,

00:02:34.530 --> 00:02:38.370
that'll be kind of a
shorter summary of those.

00:02:38.370 --> 00:02:39.860
So what is Material Design?

00:02:39.860 --> 00:02:43.080
Material Design is a
design language from Google

00:02:43.080 --> 00:02:47.990
that combines elements of
print design, motion design,

00:02:47.990 --> 00:02:53.630
digital paper, light and shadow,
to make cross-platform apps.

00:02:53.630 --> 00:02:56.710
It is a set of guidelines, so
you'll hear a caveat from me

00:02:56.710 --> 00:03:00.650
a lot in this talk that
this is what you should do,

00:03:00.650 --> 00:03:04.680
but if you need to do something
else that better fits your app,

00:03:04.680 --> 00:03:07.310
then go and do it.

00:03:07.310 --> 00:03:09.280
So why should you
use it in your apps?

00:03:09.280 --> 00:03:11.830
You should use it because
users yell at you if you don't.

00:03:11.830 --> 00:03:17.330
They will post nasty-grams on--
nasty messages on your Google

00:03:17.330 --> 00:03:19.820
Play reviews, and
say this app is not

00:03:19.820 --> 00:03:21.170
material, and all that stuff.

00:03:21.170 --> 00:03:22.190
So use it.

00:03:22.190 --> 00:03:26.270
Here's a link to the spec,
and the general design

00:03:26.270 --> 00:03:29.265
site from Google.

00:03:29.265 --> 00:03:31.640
So the first thing we're going
to talk about is surfaces.

00:03:36.440 --> 00:03:40.370
Surfaces are one dp thick.

00:03:40.370 --> 00:03:43.390
Raise of hands, do people
know what a dp is here?

00:03:43.390 --> 00:03:44.000
Yes, no?

00:03:44.000 --> 00:03:44.500
OK.

00:03:49.870 --> 00:03:58.140
A long, long time ago, there
was this phone, the T-Mobile G1,

00:03:58.140 --> 00:04:03.480
which was introduced
back in 2008, I believe.

00:04:03.480 --> 00:04:06.880
This phone looks
really, really bad.

00:04:06.880 --> 00:04:10.750
The density on it,
it's 160 dots per inch.

00:04:10.750 --> 00:04:15.400
A dp is a physical pixel
on that screen phone.

00:04:15.400 --> 00:04:16.660
So that's where dps come from.

00:04:23.110 --> 00:04:29.530
So anyway, they're one dp
think, they exist in 3D space.

00:04:29.530 --> 00:04:31.580
Because they are a
digital sheet of paper,

00:04:31.580 --> 00:04:34.300
they can cast shadows
on one another,

00:04:34.300 --> 00:04:38.060
and be moved with
changes in elevation.

00:04:38.060 --> 00:04:41.850
They can also be
combined or split apart.

00:04:41.850 --> 00:04:44.330
And here is a little
visualizer demo.

00:04:44.330 --> 00:04:46.540
Is my Wi-Fi on?

00:04:46.540 --> 00:04:49.701
Please be on.

00:04:49.701 --> 00:04:51.875
OK, it is not.

00:04:54.686 --> 00:04:56.310
I'm going to switch
to the blue stacks.

00:04:59.880 --> 00:05:01.820
Sorry about this.

00:05:01.820 --> 00:05:05.320
Wi-Fi kind of happens.

00:05:05.320 --> 00:05:06.000
Switch back.

00:05:06.000 --> 00:05:08.320
OK, let's see if that works now.

00:05:08.320 --> 00:05:09.600
OK.

00:05:09.600 --> 00:05:18.420
So here we have--
jumping in front--

00:05:18.420 --> 00:05:23.260
so we have a material, kind
of a sample material app.

00:05:23.260 --> 00:05:26.870
This would be what shows
up in Android Studio,

00:05:26.870 --> 00:05:29.430
if you just create a blank app.

00:05:29.430 --> 00:05:32.800
So it has a little button
down here, a title bar,

00:05:32.800 --> 00:05:36.990
and you can see how this
is several surfaces.

00:05:36.990 --> 00:05:38.940
The menu bar here
is its own surface.

00:05:38.940 --> 00:05:42.560
This background is a
surface, and this button here

00:05:42.560 --> 00:05:43.130
is a surface.

00:05:54.181 --> 00:05:55.680
Something that you
shouldn't do, you

00:05:55.680 --> 00:05:58.210
shouldn't just automatically
create your own elevations.

00:05:58.210 --> 00:06:00.860
The design spec is
very specific on what

00:06:00.860 --> 00:06:03.000
heights things should have.

00:06:03.000 --> 00:06:05.830
So go to that link
there, and it will

00:06:05.830 --> 00:06:09.220
show you the heights of
everything on your screen.

00:06:09.220 --> 00:06:13.700
It's kind of a long
list of things.

00:06:13.700 --> 00:06:17.855
And-- I'm going to skip that.

00:06:17.855 --> 00:06:19.730
All right, so one of
things I showed up there

00:06:19.730 --> 00:06:21.080
was a floating action bar.

00:06:21.080 --> 00:06:24.040
A floating action bar should
serve as a primary action

00:06:24.040 --> 00:06:25.000
for your app.

00:06:25.000 --> 00:06:28.140
It's not needed for
every single app.

00:06:28.140 --> 00:06:30.970
If you don't have something
that your user's doing

00:06:30.970 --> 00:06:34.260
80% of the time, you shouldn't
have a floating action bar,

00:06:34.260 --> 00:06:36.590
and there should
be, at most, one.

00:06:36.590 --> 00:06:40.680
Floating action bars come in
two different sizes, 56 dps

00:06:40.680 --> 00:06:42.110
and 40 dps.

00:06:42.110 --> 00:06:45.600
56 dps is the size that
you should use generally.

00:06:45.600 --> 00:06:49.840
You can use the 40
dp size if the app--

00:06:49.840 --> 00:06:52.990
if the requirements of your
app-- kind of allow it.

00:06:52.990 --> 00:06:58.900
It just looks weird to have a
56 dp floating action button.

00:06:58.900 --> 00:07:05.040
The strings for those
are normal and many.

00:07:05.040 --> 00:07:07.720
So to add a floating
action button to your app,

00:07:07.720 --> 00:07:11.950
you'll need to add this
code to your gradle file.

00:07:11.950 --> 00:07:15.310
You'll notice here
that it says 22.2.0.

00:07:15.310 --> 00:07:20.610
That is for the build tools
of when I made this app.

00:07:20.610 --> 00:07:26.010
Right now I think it's 24.4.4,
so use whatever is the latest

00:07:26.010 --> 00:07:28.652
and greatest for your app.

00:07:28.652 --> 00:07:30.110
So the next thing
you'll need to do

00:07:30.110 --> 00:07:34.505
is add a bit of code-- XML code
for the floating action button.

00:07:34.505 --> 00:07:36.380
And we can see here at
the top, where it says

00:07:36.380 --> 00:07:40.760
"app:fabSize='normal'", that's
saying that's going to be a 56

00:07:40.760 --> 00:07:43.440
dp floating action button.

00:07:43.440 --> 00:07:46.840
It's going to have an
elevation of six dps,

00:07:46.840 --> 00:07:50.625
and when you press it, it's
going to elevate to 12 dps.

00:07:54.630 --> 00:07:57.780
Another thing you'll
need to do is,

00:07:57.780 --> 00:08:02.150
the FAB requires you to have the
theme derived from AppCompat.

00:08:02.150 --> 00:08:05.690
So if you start up a normal
app in Android Studio,

00:08:05.690 --> 00:08:08.444
usually it will give you
the top, which is Material.

00:08:08.444 --> 00:08:09.860
You really shouldn't
use Material,

00:08:09.860 --> 00:08:12.630
because it's not backward
or forward compatible.

00:08:12.630 --> 00:08:14.240
Use the one on the bottom.

00:08:14.240 --> 00:08:16.240
So if you have a
material-light theme,

00:08:16.240 --> 00:08:18.240
you can just change it
to Theme.AppCompat.Light.

00:08:27.980 --> 00:08:32.020
So CoordinatorLayout
is a new layout

00:08:32.020 --> 00:08:38.080
in Material Design that
allows you to kind of control

00:08:38.080 --> 00:08:41.629
how different elements interact
and move around the screen.

00:08:44.159 --> 00:08:48.230
Here is an example of
a CoordinatorLayout.

00:08:48.230 --> 00:08:51.670
Let me go wide-screen
on this so you

00:08:51.670 --> 00:08:53.870
can see it a little bit better.

00:08:53.870 --> 00:08:58.060
So the CoordinatorLayout
is our outer-most layout,

00:08:58.060 --> 00:09:01.786
and then we have an app
bar layout inside of that.

00:09:01.786 --> 00:09:06.079
That app bar layout kit
contains a collapsing toolbar,

00:09:06.079 --> 00:09:07.870
which would be a
collapsing toolbar layout,

00:09:07.870 --> 00:09:09.650
or something like that.

00:09:09.650 --> 00:09:13.210
Have your general RecyclerView,
the replacement for ListView,

00:09:13.210 --> 00:09:15.520
of course, and then
your floating action

00:09:15.520 --> 00:09:16.460
button down here.

00:09:19.220 --> 00:09:23.930
And I can give you a
link for this at the end.

00:09:23.930 --> 00:09:26.930
One of the instructors
that I did the course with,

00:09:26.930 --> 00:09:29.110
Roman [? Nurik, ?]
created this visualizer.

00:09:38.970 --> 00:09:39.902
All right.

00:09:42.450 --> 00:09:44.070
Oh, and I forgot I had a demo.

00:09:44.070 --> 00:09:48.435
But my Android Studio
did not reload.

00:09:54.286 --> 00:09:56.386
All right, so while I'm
waiting for that to load,

00:09:56.386 --> 00:09:57.760
I'm going to talk
about SnackBar.

00:09:57.760 --> 00:10:01.150
Now, SnackBars are like
a CoordinatorLayout

00:10:01.150 --> 00:10:03.130
friendly toast message.

00:10:03.130 --> 00:10:05.880
So your toast message
kind of shows up

00:10:05.880 --> 00:10:08.880
semi-transparent over
the top of your app,

00:10:08.880 --> 00:10:10.930
and it just doesn't
give you contacts.

00:10:10.930 --> 00:10:14.740
It doesn't give you anything
to act upon for your app.

00:10:14.740 --> 00:10:18.400
SnackBars can contain an action,
so if you delete a message

00:10:18.400 --> 00:10:20.260
and you're like,
oh man, I didn't

00:10:20.260 --> 00:10:24.080
mean to delete that, you
can have a undo action

00:10:24.080 --> 00:10:25.410
and click that.

00:10:25.410 --> 00:10:28.940
They can also be dismissed,
and it will move the FAB out

00:10:28.940 --> 00:10:31.590
of place vertically
if there is one,

00:10:31.590 --> 00:10:35.640
because the resting position
of the FAB and the SnackBar

00:10:35.640 --> 00:10:38.642
are at the same elevation.

00:10:38.642 --> 00:10:42.460
Let me see if my Android
Studio has started up.

00:11:18.850 --> 00:11:22.030
I apologize for this
dead time, guys.

00:11:22.030 --> 00:11:24.250
We had some technical
difficulties,

00:11:24.250 --> 00:11:27.360
so I had to reboot my computer.

00:12:06.860 --> 00:12:09.910
All right, let's move
on for a little bit,

00:12:09.910 --> 00:12:12.020
and wait for that to come up.

00:12:12.020 --> 00:12:14.830
So the way that
you make a SnackBar

00:12:14.830 --> 00:12:16.640
is similar to a toast message.

00:12:20.890 --> 00:12:23.460
Before this, you will have
done a [? getViewBy ?]

00:12:23.460 --> 00:12:24.900
ID for your SnackBar.

00:12:24.900 --> 00:12:27.610
Or, if you're using Butter
Knife or something like that

00:12:27.610 --> 00:12:32.950
somehow to get the
widget for your SnackBar,

00:12:32.950 --> 00:12:36.970
and you call make with your
message and then the duration

00:12:36.970 --> 00:12:40.580
of how long you want it
to show, and then show.

00:12:40.580 --> 00:12:42.300
If you want to add
an action to that,

00:12:42.300 --> 00:12:44.400
you would add the
function called

00:12:44.400 --> 00:12:46.690
TosetAction with
an OnClick listener

00:12:46.690 --> 00:12:52.050
and a color for that
text to show up.

00:12:52.050 --> 00:12:54.720
Let's see if we're loaded.

00:12:54.720 --> 00:12:55.900
Yeah, we're cool.

00:12:55.900 --> 00:12:57.710
We're loaded.

00:12:57.710 --> 00:13:01.320
All right, so this
is what I was talking

00:13:01.320 --> 00:13:03.260
about with
CoordinatorLayout, where

00:13:03.260 --> 00:13:09.280
we have a view with an
expanded app bar here,

00:13:09.280 --> 00:13:14.050
and we have a
RecyclerView of elements.

00:13:14.050 --> 00:13:18.550
CoordinatorLayout automatically
knows to scroll up

00:13:18.550 --> 00:13:21.830
and compress that
collapse bar view for us.

00:13:21.830 --> 00:13:24.910
We don't really have to do
all that much but to say,

00:13:24.910 --> 00:13:27.180
this is what the
expanded size should be,

00:13:27.180 --> 00:13:30.010
this is what the
compressed size should be.

00:13:30.010 --> 00:13:33.290
It knows when to scroll
either just the list,

00:13:33.290 --> 00:13:36.610
or the list and the app bar.

00:13:36.610 --> 00:13:40.360
Any questions before I move on?

00:13:40.360 --> 00:13:41.914
All right, cool.

00:13:41.914 --> 00:13:44.080
All right, so the next thing
I'm going to talk about

00:13:44.080 --> 00:13:45.350
is Bold Graphic Design.

00:13:45.350 --> 00:13:48.780
This is the part of the
Material Design spec

00:13:48.780 --> 00:13:52.710
that comes from
great print design.

00:13:52.710 --> 00:13:54.880
The first thing is the
Gestalt Laws of Grouping,

00:13:54.880 --> 00:13:59.600
and this is kind of a trick
from your brain for how

00:13:59.600 --> 00:14:01.180
you perceive the world.

00:14:01.180 --> 00:14:04.600
So, for instance,
in this room I can

00:14:04.600 --> 00:14:07.550
see that there are
a bunch of kids

00:14:07.550 --> 00:14:09.840
on the side, a bunch
of young adults.

00:14:09.840 --> 00:14:13.300
So I might assume
that they are related,

00:14:13.300 --> 00:14:15.010
that they're from
the same school,

00:14:15.010 --> 00:14:17.510
because they're
wearing the same thing.

00:14:17.510 --> 00:14:21.200
And that's kind of what the
Gestalt Laws of Grouping do.

00:14:21.200 --> 00:14:24.130
Based off of proximity
or similarity,

00:14:24.130 --> 00:14:27.280
your mind kind of
makes assumptions on

00:14:27.280 --> 00:14:32.680
how things are, and tries to
bring order to a chaotic world.

00:14:32.680 --> 00:14:37.930
So for a quick example,
we have two views up here.

00:14:37.930 --> 00:14:44.780
The one on the far
right looks like it's

00:14:44.780 --> 00:14:49.750
a bunch of avatar type images--
circular images with rectangles

00:14:49.750 --> 00:14:51.390
next to it.

00:14:51.390 --> 00:14:53.710
Just as I was mentioning
before, because all

00:14:53.710 --> 00:14:57.539
of the circular
images are similar,

00:14:57.539 --> 00:14:59.080
it would be easy to
assume that those

00:14:59.080 --> 00:15:00.210
are the same type of image.

00:15:00.210 --> 00:15:02.690
Those might be an
avatar for a person,

00:15:02.690 --> 00:15:05.710
and the rectangles
are equally similar.

00:15:05.710 --> 00:15:08.620
They're probably a
description for a person.

00:15:08.620 --> 00:15:13.480
And because the rectangular
ones are close to the avatars,

00:15:13.480 --> 00:15:17.370
they're probably
describing the avatar.

00:15:17.370 --> 00:15:21.140
There's a lot more
than that, but that's

00:15:21.140 --> 00:15:24.520
all I wanted to give you
so I didn't bore you.

00:15:24.520 --> 00:15:27.460
Getting back to some kind
of nuts and bolts stuff,

00:15:27.460 --> 00:15:32.680
in Material Design, the
layouts are laid out

00:15:32.680 --> 00:15:37.970
with an eight dp grid and
a four dp grid for text.

00:15:37.970 --> 00:15:39.670
There are a bunch
of key lines that

00:15:39.670 --> 00:15:41.670
allow you to line up things.

00:15:41.670 --> 00:15:43.490
You can't see it
very much in here,

00:15:43.490 --> 00:15:46.110
but for this mobile
screen it expects

00:15:46.110 --> 00:15:49.810
it to be 16 dps
from the left edge,

00:15:49.810 --> 00:15:52.460
and then there's a
72 dp if you're using

00:15:52.460 --> 00:15:53.900
avatars or something like that.

00:15:53.900 --> 00:15:55.210
It helps you line up things.

00:15:58.430 --> 00:16:01.210
So another thing that you
should be using your design

00:16:01.210 --> 00:16:04.610
is great use of color.

00:16:04.610 --> 00:16:07.050
Color provides cohesion
across screens,

00:16:07.050 --> 00:16:09.720
it makes us kind of feel things.

00:16:09.720 --> 00:16:18.160
So in certain countries,
certain colors are not as good.

00:16:18.160 --> 00:16:22.840
It's kind of the same in the
US, where if you see a red,

00:16:22.840 --> 00:16:23.950
you might think to stop.

00:16:23.950 --> 00:16:25.825
You might see a green,
you might think to go.

00:16:25.825 --> 00:16:29.130
It's other things like
that, that kind of

00:16:29.130 --> 00:16:34.540
tie into the psychology of your
culture and you as a person.

00:16:34.540 --> 00:16:42.070
So you should think
about your colors a lot.

00:16:42.070 --> 00:16:46.490
So, what if you're
bad at picking colors?

00:16:46.490 --> 00:16:49.180
There are two sites that
you can go and pick colors.

00:16:49.180 --> 00:16:53.260
One is Material Palette,
where it allows you

00:16:53.260 --> 00:16:58.850
to-- if this will
load-- you can easily

00:16:58.850 --> 00:17:02.850
select a color palette by
selecting two colors, that

00:17:02.850 --> 00:17:06.569
will show up when they do.

00:17:06.569 --> 00:17:07.550
OK.

00:17:07.550 --> 00:17:09.359
And there they are.

00:17:09.359 --> 00:17:18.500
All right, so I could pick
an indigo and a purple.

00:17:18.500 --> 00:17:24.040
And basically what it does
is it applies an algorithm

00:17:24.040 --> 00:17:29.250
to say this is what your
primary color is going to be,

00:17:29.250 --> 00:17:32.040
and the color for your
dark primary color

00:17:32.040 --> 00:17:33.760
and light primary
color, and then

00:17:33.760 --> 00:17:35.730
also for your accent color.

00:17:35.730 --> 00:17:41.991
The other site is Adobe Color--
and I have the wrong thing

00:17:41.991 --> 00:17:42.490
there.

00:17:45.300 --> 00:17:48.850
So Adobe Color is a website
where it allows you--

00:17:48.850 --> 00:17:50.620
it has a giant color wheel.

00:17:50.620 --> 00:17:53.330
You can pick one color
and it'll kind of show you

00:17:53.330 --> 00:17:55.720
what the complementary color
is, or a contrasting color

00:17:55.720 --> 00:17:56.720
is, and stuff like that.

00:17:56.720 --> 00:17:58.710
So use that.

00:17:58.710 --> 00:18:01.360
If you're not moved by
that and you're still bad,

00:18:01.360 --> 00:18:02.590
find a designer.

00:18:02.590 --> 00:18:03.710
Buy them a notebook.

00:18:03.710 --> 00:18:08.720
They really like notebooks
and hipster stuff like that.

00:18:08.720 --> 00:18:12.450
So this is kind of what
Material Palette was

00:18:12.450 --> 00:18:14.810
doing with picking the colors.

00:18:14.810 --> 00:18:16.570
Material Design--
your colors range

00:18:16.570 --> 00:18:18.960
from a 50 value, which
is the very lightest

00:18:18.960 --> 00:18:23.820
in that tint, all the way
down to a 900, the darkest.

00:18:23.820 --> 00:18:27.810
You should select a 500
for your primary color,

00:18:27.810 --> 00:18:31.160
and then bump up a
couple of steps to a 700

00:18:31.160 --> 00:18:36.310
for your status bars, down to
300 for your secondary bars.

00:18:36.310 --> 00:18:40.040
And then each color also
has an accent range,

00:18:40.040 --> 00:18:42.460
from A100 to A700.

00:18:42.460 --> 00:18:44.760
Generally, an A200
will work well.

00:18:44.760 --> 00:18:47.720
So this is that
same palette that we

00:18:47.720 --> 00:18:49.820
selected from Material Palette.

00:18:49.820 --> 00:18:51.260
And one of the
other things that I

00:18:51.260 --> 00:18:53.610
forgot to mention
about Material Palette

00:18:53.610 --> 00:18:59.710
is that it allows you
to download your colors

00:18:59.710 --> 00:19:01.480
for the web and for Android.

00:19:01.480 --> 00:19:03.380
You can download
it in XML format

00:19:03.380 --> 00:19:04.980
to just drop it into your apps.

00:19:10.100 --> 00:19:13.580
All right, so typography,
a couple of definitions.

00:19:13.580 --> 00:19:17.180
A font, or a typeface,
is a specific style

00:19:17.180 --> 00:19:22.530
of writing a set of
text or characters.

00:19:22.530 --> 00:19:27.460
A font family is a
group that are equally

00:19:27.460 --> 00:19:29.230
influenced by that
same style, but they

00:19:29.230 --> 00:19:31.880
might have slight
differences here and there.

00:19:31.880 --> 00:19:36.140
And a font weight is basically
the thickness of a font.

00:19:36.140 --> 00:19:41.470
The style is generally
whether it's italic or normal.

00:19:41.470 --> 00:19:44.610
And-- I will skip
that for a second.

00:19:44.610 --> 00:19:48.790
Here's an example of everything
that lives in Roboto.

00:19:48.790 --> 00:19:54.360
So all of them have the general
designs-- characteristics

00:19:54.360 --> 00:19:56.770
of Roboto-- but you
can see that there

00:19:56.770 --> 00:20:00.120
is a regular version, a
condensed, a mono space,

00:20:00.120 --> 00:20:02.390
and a slab font.

00:20:02.390 --> 00:20:05.980
It also has different weights,
from the thin all way down

00:20:05.980 --> 00:20:08.570
to the black and
then bold and italic.

00:20:11.270 --> 00:20:14.380
So you can set a
different font in your app

00:20:14.380 --> 00:20:16.670
by using the code up top,
if you have a TextView

00:20:16.670 --> 00:20:20.130
or anything that
derives from a TextView,

00:20:20.130 --> 00:20:24.970
and add the font families
of the different san serifs,

00:20:24.970 --> 00:20:27.880
and the text style.

00:20:27.880 --> 00:20:32.530
You'll notice that there
is a bold style down there.

00:20:32.530 --> 00:20:36.914
Generally, you don't
want to use bold,

00:20:36.914 --> 00:20:38.580
just because it kind
of programmatically

00:20:38.580 --> 00:20:42.920
makes bold for you as opposed
to a font that was specifically

00:20:42.920 --> 00:20:45.920
made for that.

00:20:45.920 --> 00:20:50.220
And you can also use a
custom font in your app

00:20:50.220 --> 00:20:51.870
by using this code here.

00:20:51.870 --> 00:20:56.180
I have a true type font that
I downloaded into my assets

00:20:56.180 --> 00:20:58.845
directory, and then
I create the asset.

00:21:01.410 --> 00:21:04.750
And then for the TextView,
I'm just setting the typeface.

00:21:04.750 --> 00:21:09.716
One thing to keep in mind
is that Unattach-- you

00:21:09.716 --> 00:21:11.840
need to do things in
Unattach, because if you do it

00:21:11.840 --> 00:21:15.290
in Uncreate-- because of
the fragment life cycle,

00:21:15.290 --> 00:21:19.380
there's a small time after
you create a fragment,

00:21:19.380 --> 00:21:21.450
before it's attached
to an activity.

00:21:21.450 --> 00:21:27.532
So get [INAUDIBLE] will result
in an error and crash your app.

00:21:30.230 --> 00:21:32.530
These are all the
different sizes

00:21:32.530 --> 00:21:37.940
that are pre-set in Android,
from Display [? for ?] all way

00:21:37.940 --> 00:21:39.210
down to Button.

00:21:39.210 --> 00:21:40.290
And you can--

00:21:40.290 --> 00:21:44.117
[ALARM]

00:21:44.117 --> 00:21:46.200
--there's a flash flood
warning, for people on TV.

00:21:49.880 --> 00:21:54.720
So, these are all the different
types that you can use.

00:21:54.720 --> 00:21:57.570
It kind of shows you that you
can still use one set font,

00:21:57.570 --> 00:22:02.330
and have it be very
different and very engaging.

00:22:02.330 --> 00:22:06.490
To the far right,
that is the same UI,

00:22:06.490 --> 00:22:09.220
but using the same font sizes.

00:22:09.220 --> 00:22:13.890
And as it comes closer to me,
it uses different font weights

00:22:13.890 --> 00:22:15.985
and different font styles.

00:22:15.985 --> 00:22:19.777
The header is using a slab
font and different colors,

00:22:19.777 --> 00:22:20.610
and stuff like that.

00:22:26.380 --> 00:22:32.480
You can stay within Roboto
and not worry about it.

00:22:32.480 --> 00:22:35.320
So my pro-tip for
Android typography

00:22:35.320 --> 00:22:37.800
is never use dps for font sizes.

00:22:37.800 --> 00:22:43.010
You always use sp-- which is
Scale-Independent Pixels--

00:22:43.010 --> 00:22:46.000
which allows your
font to be resized,

00:22:46.000 --> 00:22:50.200
if the user has a large
setting or small setting.

00:22:52.970 --> 00:22:53.656
Yeah.

00:22:53.656 --> 00:22:57.980
AUDIENCE: The grid is in dps,
but the font size is in sp?

00:22:57.980 --> 00:22:59.420
JAMES WILLIAMS: Yes.

00:22:59.420 --> 00:22:59.920
OK.

00:22:59.920 --> 00:23:02.280
That question was,
the grid is in dps,

00:23:02.280 --> 00:23:04.100
but the fonts are in sp.

00:23:04.100 --> 00:23:04.630
Yes.

00:23:04.630 --> 00:23:08.770
The grid that-- you're using
the grid for alignment,

00:23:08.770 --> 00:23:13.770
but the font itself
is going to be in sp.

00:23:13.770 --> 00:23:15.530
And there is this
weird conversion

00:23:15.530 --> 00:23:19.530
of how to convert sp to dps.

00:23:19.530 --> 00:23:22.530
It's in the course,
and it's really weird.

00:23:22.530 --> 00:23:25.640
But, yeah.

00:23:25.640 --> 00:23:28.890
I was freaked out by that
too, so it's no big deal.

00:23:28.890 --> 00:23:31.900
You can use Roboto for all
the things in your app,

00:23:31.900 --> 00:23:35.000
and all fonts are
not created equal.

00:23:35.000 --> 00:23:38.590
Just because you
have a font that you

00:23:38.590 --> 00:23:43.560
think is really awesome, it
might not scale down very well,

00:23:43.560 --> 00:23:46.760
or the creator of the
font might have not made

00:23:46.760 --> 00:23:47.700
many weights of it.

00:23:47.700 --> 00:23:51.760
So just bear in mind that.

00:23:51.760 --> 00:23:56.410
So just quickly on
imagery, I generally

00:23:56.410 --> 00:24:01.610
try to think of it by asking
myself a couple of questions.

00:24:01.610 --> 00:24:05.230
Is the brand or product
I'm designing for serious?

00:24:05.230 --> 00:24:07.410
Is it playful, is it stylish?

00:24:07.410 --> 00:24:10.270
Depending on the answer
to those questions,

00:24:10.270 --> 00:24:14.940
is going to determine what types
of imagery I'm going to use.

00:24:14.940 --> 00:24:18.900
And for specific concept,
does imagery easily relate?

00:24:18.900 --> 00:24:22.550
Is it something very
abstract like thinking,

00:24:22.550 --> 00:24:25.070
where a illustration
will work better

00:24:25.070 --> 00:24:29.740
than an actual picture of a
person standing at a computer?

00:24:29.740 --> 00:24:33.370
And who is your
intended user or market?

00:24:33.370 --> 00:24:36.430
These are things to think
about with fonts, as well.

00:24:36.430 --> 00:24:41.740
So if you're making a
performance app-- a performance

00:24:41.740 --> 00:24:44.950
profile app, you wouldn't
want to use a cursive font

00:24:44.950 --> 00:24:47.230
because that doesn't
seem very serious.

00:24:47.230 --> 00:24:51.670
It doesn't seem
fast to your users.

00:24:51.670 --> 00:24:54.710
Any questions on that
before I move on?

00:24:54.710 --> 00:24:55.210
Cool.

00:24:59.300 --> 00:25:00.760
So, motion.

00:25:00.760 --> 00:25:03.670
Motion should be instructive,
and guide your users

00:25:03.670 --> 00:25:05.000
through your app.

00:25:05.000 --> 00:25:08.240
This is not the time to say,
look at all this cool stuff

00:25:08.240 --> 00:25:10.880
that I can have whiz
around the screen.

00:25:10.880 --> 00:25:12.800
It shouldn't distract
them, confuse them,

00:25:12.800 --> 00:25:14.840
and it should be
generally orderly.

00:25:14.840 --> 00:25:18.780
This goes back into the
things about Gestalt,

00:25:18.780 --> 00:25:23.091
where we want to bring
order to the chaos.

00:25:23.091 --> 00:25:24.840
And you don't want to
freak out your users

00:25:24.840 --> 00:25:27.470
by having all of these
elements coming in

00:25:27.470 --> 00:25:30.940
from all different sizes.

00:25:30.940 --> 00:25:34.270
Transition Manager was
introduced in KitKat 4.4.

00:25:34.270 --> 00:25:37.250
It allows creation of
transition in code or XML,

00:25:37.250 --> 00:25:41.580
and it does an insane amount
of the heavy lifting for you.

00:25:41.580 --> 00:25:45.050
Have any of you guys ever
had to wire up an animation

00:25:45.050 --> 00:25:48.050
by yourself in Android?

00:25:48.050 --> 00:25:51.460
OK, so you guys know my
pain of using the old way,

00:25:51.460 --> 00:25:56.850
and Object Animator, property
animators, stuff like that.

00:25:56.850 --> 00:25:59.570
Here's kind of an example
of it I did that only

00:25:59.570 --> 00:26:01.910
took a couple lines of code.

00:26:01.910 --> 00:26:03.940
Basically, when you
click the button,

00:26:03.940 --> 00:26:07.490
it shuffles the image
off of the screen.

00:26:10.890 --> 00:26:14.125
So that actually is doing
a lot of stuff there.

00:26:14.125 --> 00:26:15.750
The first thing it's
doing is capturing

00:26:15.750 --> 00:26:21.200
the start date of all the views,
then capturing the end state.

00:26:21.200 --> 00:26:27.160
It's creating an animator to
interpolate between the two,

00:26:27.160 --> 00:26:30.640
and then, based off of what
type of transition type

00:26:30.640 --> 00:26:34.490
I set, it's going to say,
OK using those values,

00:26:34.490 --> 00:26:38.460
let me make this animation.

00:26:38.460 --> 00:26:41.410
So this is the code
that I used to do that.

00:26:41.410 --> 00:26:44.780
I have a slide transition,
and I set the slide edge

00:26:44.780 --> 00:26:47.030
to the top of the screen so
it's going to slide things

00:26:47.030 --> 00:26:49.170
off top of the screen.

00:26:49.170 --> 00:26:52.240
Then, down here in
Transition Manager,

00:26:52.240 --> 00:26:55.760
I tell it to begin a
delayed transition.

00:26:55.760 --> 00:26:58.790
It's using that slide, and
then I do all of the things

00:26:58.790 --> 00:27:01.080
that I'm going to
do to the view.

00:27:01.080 --> 00:27:04.020
In this case, it's just
telling the image to disappear.

00:27:04.020 --> 00:27:06.350
So instead of just
fading off the screen,

00:27:06.350 --> 00:27:11.569
it's going to use that
slide and slide off the top.

00:27:11.569 --> 00:27:13.110
There are a bunch
of transition types

00:27:13.110 --> 00:27:17.110
that were introduced
in API19 and API21.

00:27:17.110 --> 00:27:21.860
I showed you slide by default.
If you don't set a transition,

00:27:21.860 --> 00:27:23.630
it's going to use
Auto Transition which

00:27:23.630 --> 00:27:26.170
will use a
combination of sliding

00:27:26.170 --> 00:27:29.340
and I think exploding and
fading, and stuff like that.

00:27:29.340 --> 00:27:33.455
It kind of has a set
of things that it

00:27:33.455 --> 00:27:36.020
will kind of automatically
move the things off the screen.

00:27:38.740 --> 00:27:42.080
Activity transitions-- when
you're moving between activity,

00:27:42.080 --> 00:27:44.890
this is another place where
you can have instructive motion

00:27:44.890 --> 00:27:48.990
to guide your user by having
a specific transition when

00:27:48.990 --> 00:27:53.180
they go into or out of
a specific activity.

00:27:53.180 --> 00:27:55.190
So if you have
activity A and activity

00:27:55.190 --> 00:28:00.230
B, when you go
from A to B, these

00:28:00.230 --> 00:28:03.930
enter-- activity transition
is going to be called.

00:28:03.930 --> 00:28:10.270
And when you return from
B to A-- whoa, A is exit.

00:28:10.270 --> 00:28:12.060
Restart.

00:28:12.060 --> 00:28:15.560
So if I have activity
A and Activity B,

00:28:15.560 --> 00:28:20.350
when I'm going from A to
B, A's exit transition

00:28:20.350 --> 00:28:24.925
is going to fire and B's
[? interactivity ?] transition

00:28:24.925 --> 00:28:26.500
is going to fire.

00:28:26.500 --> 00:28:30.620
Then, when I'm returning from
B to A B's return and then

00:28:30.620 --> 00:28:33.918
A's re-enter is going to fire.

00:28:33.918 --> 00:28:36.894
AUDIENCE: It sounds like there's
a lot of combinations there.

00:28:36.894 --> 00:28:39.870
Can you have this jarring effect
if you have a bad exit mode--

00:28:39.870 --> 00:28:43.350
whatever-- different insert?

00:28:43.350 --> 00:28:45.400
JAMES WILLIAMS: OK.

00:28:45.400 --> 00:28:51.950
OK, the question was, it seems
like it could be really jarring

00:28:51.950 --> 00:28:53.820
if there are transitions
on both sides,

00:28:53.820 --> 00:28:58.630
and if you have a bad
exit or a weird enter.

00:28:58.630 --> 00:29:03.131
The answer is yes,
there certainly can be.

00:29:03.131 --> 00:29:04.006
AUDIENCE: [INAUDIBLE]

00:29:09.430 --> 00:29:11.400
JAMES WILLIAMS:
The question was,

00:29:11.400 --> 00:29:13.150
do you have to keep
them looking the same?

00:29:13.150 --> 00:29:17.090
There are a couple of
things that you can do.

00:29:17.090 --> 00:29:20.230
Something I'm going to
mention in this slide right

00:29:20.230 --> 00:29:23.000
here-- shared
element transitions--

00:29:23.000 --> 00:29:28.760
you can basically say, I want
this object-- or these groups

00:29:28.760 --> 00:29:31.490
of objects-- that
exist in this view,

00:29:31.490 --> 00:29:37.320
and also exist in this view,
to move, to transition.

00:29:37.320 --> 00:29:42.225
A good way to show it to
you is just an example.

00:29:42.225 --> 00:29:42.725
Here.

00:29:54.100 --> 00:29:59.950
[INAUDIBLE] It's OK.

00:30:03.100 --> 00:30:04.980
Coordinated motion--
oh, here it is.

00:30:04.980 --> 00:30:05.860
Sorry about that.

00:30:05.860 --> 00:30:08.490
OK.

00:30:08.490 --> 00:30:12.100
Here's one for a shared
element transition.

00:30:12.100 --> 00:30:15.270
I have these sets of avatars,
and if I click one of them

00:30:15.270 --> 00:30:19.958
it's going to make a
transition into the next view.

00:30:19.958 --> 00:30:23.290
AUDIENCE: Does that do an
exit and an enter there?

00:30:23.290 --> 00:30:25.820
JAMES WILLIAMS: That one
was slightly different

00:30:25.820 --> 00:30:27.440
because that wasn't
an enter or exit.

00:30:27.440 --> 00:30:30.180
That was just a-- yeah,
a shared transition.

00:30:30.180 --> 00:30:34.260
I'm basically saying
this set of objects

00:30:34.260 --> 00:30:36.780
that I have exists
in this screen

00:30:36.780 --> 00:30:39.440
and exists in this
next screen, so I

00:30:39.440 --> 00:30:41.810
want you to figure out how
to transition between the two

00:30:41.810 --> 00:30:42.750
states.

00:30:42.750 --> 00:30:44.830
This is another place
where it automatically

00:30:44.830 --> 00:30:46.562
does things for you.

00:30:46.562 --> 00:30:48.020
This would be a
way where you would

00:30:48.020 --> 00:30:51.080
avoid having to think of--
how is A going to transition,

00:30:51.080 --> 00:30:52.570
how is B going to transition?

00:30:52.570 --> 00:30:56.410
And just stick to-- these are
the important parts of A that

00:30:56.410 --> 00:30:58.846
should transition over to B.

00:30:58.846 --> 00:31:00.720
AUDIENCE: Are these
fragments or [INAUDIBLE]?

00:31:00.720 --> 00:31:03.400
JAMES WILLIAMS: These
are fragments, yeah.

00:31:06.850 --> 00:31:09.860
Let me pull up
that code for you.

00:31:09.860 --> 00:31:11.060
I have this code.

00:31:15.380 --> 00:31:16.330
Coordinated motion.

00:31:24.420 --> 00:31:25.861
Yep, question.

00:31:25.861 --> 00:31:28.011
AUDIENCE: Is there a limit
of how many transitions

00:31:28.011 --> 00:31:29.797
you can have [INAUDIBLE]?

00:31:29.797 --> 00:31:31.380
JAMES WILLIAMS:
Question was, is there

00:31:31.380 --> 00:31:34.510
a limit of total
transitions you can have?

00:31:34.510 --> 00:31:40.760
No, there is not, but you should
try to do as few as possible.

00:31:40.760 --> 00:31:44.250
You should try do just
enough to kind of move things

00:31:44.250 --> 00:31:46.760
along, just because--
one of things

00:31:46.760 --> 00:31:49.120
you'll notice-- if
you have a person who

00:31:49.120 --> 00:31:56.490
has a really old phone, it
might lag on their phone

00:31:56.490 --> 00:32:00.070
if you have like 15
transitions firing off.

00:32:00.070 --> 00:32:02.010
Good question, thanks
for asking that.

00:32:11.080 --> 00:32:14.690
Here's this code right here
that kind of controlled it.

00:32:14.690 --> 00:32:18.050
You have a shared
element enter transition,

00:32:18.050 --> 00:32:24.726
and this one only
set-- I'm posing.

00:32:24.726 --> 00:32:27.618
[LAUGHTER]

00:32:29.500 --> 00:32:32.100
So, there's a shared
element enter transition.

00:32:32.100 --> 00:32:36.350
It only sets the enter
transition in this example.

00:32:36.350 --> 00:32:42.320
It just has a simple
Boolean check of should it

00:32:42.320 --> 00:32:45.694
move on a curve, or should it
just be a straight motion back.

00:32:45.694 --> 00:32:47.110
That's another
thing that I didn't

00:32:47.110 --> 00:32:49.040
mention before, you should
try to move things on curves

00:32:49.040 --> 00:32:49.970
as much as possible.

00:32:52.870 --> 00:32:56.480
Going back to slides, did that.

00:32:56.480 --> 00:33:01.730
Quickly, on interpolators, this
also goes with transitions.

00:33:01.730 --> 00:33:04.110
You can
[? programmatically ?] code

00:33:04.110 --> 00:33:06.370
how you want something to move.

00:33:09.690 --> 00:33:12.884
There are a bunch
that exist in Android.

00:33:12.884 --> 00:33:15.050
These are kind of the three
that you should probably

00:33:15.050 --> 00:33:16.220
use the most.

00:33:19.530 --> 00:33:21.920
You can kind of notice, if
you have a long duration

00:33:21.920 --> 00:33:25.790
of 300 milliseconds, it makes
your app look like it's slow,

00:33:25.790 --> 00:33:32.930
but if you have something like
300, it looks zippy and fast.

00:33:32.930 --> 00:33:35.390
So generally, you should try
and keep your transitions

00:33:35.390 --> 00:33:39.250
to be about 300
milliseconds, give or take,

00:33:39.250 --> 00:33:41.900
and kind of adjust from
there to see how it feels.

00:33:44.650 --> 00:33:47.530
Quickly, on adaptive design--
how much time do we have?

00:33:47.530 --> 00:33:49.180
Oh, we're good.

00:33:49.180 --> 00:33:51.500
You should think about
your content first, and not

00:33:51.500 --> 00:33:54.180
your device.

00:33:54.180 --> 00:33:55.700
What I mean by that
is you shouldn't

00:33:55.700 --> 00:34:00.890
code for a specific
device, and instead

00:34:00.890 --> 00:34:05.840
let the content tell you
where things should break up.

00:34:05.840 --> 00:34:09.980
If you have limited
developer resources,

00:34:09.980 --> 00:34:13.280
having a break point at 600
dps is a good starting point,

00:34:13.280 --> 00:34:17.780
but there are many, many
others that you can have.

00:34:17.780 --> 00:34:20.150
So in material
design spec, there

00:34:20.150 --> 00:34:22.060
is one for very small screens.

00:34:22.060 --> 00:34:25.155
It says-- let me see
if I can blow this up.

00:34:25.155 --> 00:34:26.800
Nope.

00:34:26.800 --> 00:34:27.440
Doesn't work.

00:34:27.440 --> 00:34:28.750
Image.

00:34:28.750 --> 00:34:32.008
There's like 480-- 600--

00:34:32.008 --> 00:34:42.360
[ALARM]

00:34:42.360 --> 00:34:45.260
There are a bunch
of different sizes,

00:34:45.260 --> 00:34:47.679
so a good starting
point is start with 600,

00:34:47.679 --> 00:34:51.370
and then, depending on your
user base, and whatever form

00:34:51.370 --> 00:34:55.350
factors you want to
support, do more or less.

00:34:55.350 --> 00:34:58.260
There are a couple different
strategies for managing space,

00:34:58.260 --> 00:35:01.130
so when you're moving from
a smaller screen to a bigger

00:35:01.130 --> 00:35:05.627
screen, you can reveal
more of the content

00:35:05.627 --> 00:35:07.460
that you were showing
on the smaller screen.

00:35:07.460 --> 00:35:09.850
You might do a
master detail view,

00:35:09.850 --> 00:35:14.280
where you show multiple
fragments on the screen.

00:35:14.280 --> 00:35:18.150
You can also re-flow the content
to just use more of the screen,

00:35:18.150 --> 00:35:21.950
or, if neither of those
work, you can just kind of

00:35:21.950 --> 00:35:26.190
expand the white space
around your content.

00:35:26.190 --> 00:35:28.620
And dividing is the
opposite of [? revealing ?],

00:35:28.620 --> 00:35:31.900
just splitting your UI
into multiple fragments.

00:35:35.512 --> 00:35:36.970
To implement your
break points, you

00:35:36.970 --> 00:35:41.400
should be using your qualifiers,
like Landscape and Portrait,

00:35:41.400 --> 00:35:46.670
and the ones at the bottom
are for specific densities.

00:35:46.670 --> 00:35:50.900
You should not use the
small-medium-large qualifiers,

00:35:50.900 --> 00:35:54.440
because those are really
fuzzy and cause problems.

00:35:54.440 --> 00:35:57.700
And that was it
as far as content

00:35:57.700 --> 00:36:02.350
I have, but definitely
open for questions.

00:36:02.350 --> 00:36:05.350
[APPLAUSE]

00:36:05.350 --> 00:36:06.900
[MUSIC PLAYING]

