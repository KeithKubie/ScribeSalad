WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.000
I'm going to talk about an algorithm called Floyd Warshall

00:00:04.000 --> 00:00:07.000
after two of the inventors of this algorithm back in the early 60s,

00:00:07.000 --> 00:00:14.000
and it uses an idea called dynamic programming, which sounds so much cooler than its actually is.

00:00:14.000 --> 00:00:16.000
That means, it actually is a very cool idea.

00:00:16.000 --> 00:00:19.000
I have a professor friend who believes that I am predispose

00:00:19.000 --> 00:00:26.000
to see all problems at dynamic programming problems because it an algorithm design technique

00:00:26.000 --> 00:00:28.000
that I have been able to use successfully in a bunch of occasion,

00:00:28.000 --> 00:00:31.000
but it really is just an algorithm design technique.

00:00:31.000 --> 00:00:35.000
Its not particularly dynamic and it doesn't really change the way you think about programming.

00:00:35.000 --> 00:00:38.000
It just have to do with optimizing using tables. Alright.

00:00:38.000 --> 00:00:43.000
Let me start up by explaining this algorithm in terms of simple but possibly strange idea.

00:00:43.000 --> 00:00:49.000
First just for simplicity, let's imagine all the nodes in our graph are numbered from 0 to n-1,

00:00:49.000 --> 00:00:54.000
and lots of graph have exactly have their structure, but for example for our marvel data set,

00:00:54.000 --> 00:00:58.000
we have to all our characters be assigned numbers from 0 to n-1,

00:00:58.000 --> 00:01:01.000
but that's an easy thing to do, let's imagine that's already been done.

00:01:01.000 --> 00:01:07.000
What we're going to imagine now is that someone has given us matrix.

00:01:07.000 --> 00:01:13.000
Square matrix D of k and the entries of this matrix, just a big table like a spread sheet

00:01:13.000 --> 00:01:15.000
and is filled in with values as follows.

00:01:15.000 --> 00:01:20.000
The ij element of the i row, j column is filled in with the number

00:01:20.000 --> 00:01:23.000
and that number is the length of the shortest path from i to j

00:01:23.000 --> 00:01:26.000
hopping only all nodes numbered less than k.

00:01:26.000 --> 00:01:29.000
So I don't know about you but I used to play a game like this when I was younger,

00:01:29.000 --> 00:01:34.000
if I was in a building where the tiles were different colors, I'd sometimes declare

00:01:34.000 --> 00:01:39.000
let's say, the blue tiles are alligators, so I'm not going to step on any of the blue tiles

00:01:39.000 --> 00:01:43.000
and I'd try to walk stepping only on the tiles that I was allowed to use,

00:01:43.000 --> 00:01:46.000
so that the analogue of this in the graph is imagine we've got our graph,

00:01:46.000 --> 00:01:50.000
and we're trying to get a path from i to j, and some of the nodes are colored pink.

00:01:50.000 --> 00:01:55.000
Those are the okay nodes because they are numbered less than k and some of the nodes

00:01:55.000 --> 00:02:00.000
maybe including j itself are numbered higher than k, and we're not allowed to step on those.

00:02:00.000 --> 00:02:03.000
We're trying to get from i to j, we're allowed to step on j opposite

00:02:03.000 --> 00:02:05.000
but only the intermediate nodes that are pink.

00:02:05.000 --> 00:02:10.000
We only consider making paths along pink nodes and there's only one in this case.

00:02:10.000 --> 00:02:13.000
But there's some pink nodes that we don't use and their maybe multiple different pink paths,

00:02:13.000 --> 00:02:17.000
but we want to know the distance of the shortest path using only the pink nodes.

00:02:17.000 --> 00:02:19.000
Only the ones that are numbered less than k.

00:02:19.000 --> 00:02:25.000
So let's imagine, some very hopefully, has done this for us and filled in the matrix with all those values.

00:02:25.000 --> 00:02:30.000
There's big Î˜ of nÂ˛ values that have to get filled in, but someone has does that for us. That's all great.

00:02:30.000 --> 00:02:34.000
Our mission should we choose to accept it. Is to fill in Dk + 1.

00:02:34.000 --> 00:02:37.000
So this will be a new matrix just like the old matrix,

00:02:37.000 --> 00:02:42.000
but now when your going on a path from i to j, you're allowed to use node k.

00:02:42.000 --> 00:02:45.000
You don't have to use it but your allowed so that's all we have to do right now.

00:02:45.000 --> 00:02:49.000
Let's try to figure out if someone gives use Dk, how do we figure out Dk+1.

