WEBVTT
Kind: captions
Language: en-GB

00:00:00.520 --> 00:00:02.700
Is it bad that I don't know these off by heart?

00:00:03.080 --> 00:00:04.480
We're talking about magic numbers today.

00:00:04.580 --> 00:00:07.320
In many cryptographic algorithms—hash functions,

00:00:07.320 --> 00:00:09.040
encryption suites, and so on—

00:00:09.300 --> 00:00:12.780
you have the seemingly random constants that appear

00:00:12.840 --> 00:00:15.020
because they're necessary for various tasks

00:00:15.140 --> 00:00:16.980
and, um...

00:00:17.320 --> 00:00:18.940
The question is, where did they come from?

00:00:18.940 --> 00:00:20.260
Who thought up these numbers?

00:00:20.260 --> 00:00:22.100
And why are they important?

00:00:24.100 --> 00:00:25.400
There are a lot of cases

00:00:25.400 --> 00:00:27.320
where you want to start off with some noughts and ones

00:00:27.320 --> 00:00:29.000
jumbled up, in some sense

00:00:29.080 --> 00:00:30.520
before you then apply your encryption

00:00:30.520 --> 00:00:32.240
to do it further. That's the idea.

00:00:33.140 --> 00:00:34.640
So in SHA-1, for example,

00:00:34.640 --> 00:00:37.040
we have, actually, some seemingly random

00:00:37.040 --> 00:00:38.240
magic numbers that are in there.

00:00:38.240 --> 00:00:40.240
INTERVIEWER: Are they things people know? You could look it up...

00:00:40.240 --> 00:00:41.140
Yep, you could look it up.

00:00:41.140 --> 00:00:43.560
It's buried in the source code for any of these implementations

00:00:43.560 --> 00:00:44.940
and it's in the specification.

00:00:44.940 --> 00:00:47.040
They're not secret. That's the idea.

00:00:47.040 --> 00:00:49.460
They're not like a secret key. They're just public knowledge.

00:00:49.460 --> 00:00:54.160
So, these numbers here are the initial internal state variables for SHA-1.

00:00:54.160 --> 00:00:56.320
And—I should add—in the wrong order by mistake.

00:00:56.320 --> 00:00:58.740
So, if you're gonna implement SHA-1,

00:00:58.740 --> 00:01:01.860
don't use my Computerphile video as your reference, please.

00:01:01.860 --> 00:01:03.500
These two are in the wrong order. But anyway...

00:01:03.500 --> 00:01:05.660
The internal state starts with these values

00:01:05.660 --> 00:01:08.500
and then it proceeds by taking in the message and jumbling itself up

00:01:08.580 --> 00:01:09.600
and then it outputs a hash.

00:01:09.600 --> 00:01:12.120
Now the very question is, who came up with these numbers?

00:01:12.120 --> 00:01:13.560
And do we trust them? Right?

00:01:13.560 --> 00:01:17.420
Is there any way that these numbers could be used to actually make the algorithm weaker?

00:01:17.420 --> 00:01:19.740
This is a concept of "nothing up my sleeve" numbers.

00:01:19.740 --> 00:01:21.520
So, think about a magician,

00:01:21.520 --> 00:01:23.180
if they're about to pull something out of their sleeve,

00:01:23.180 --> 00:01:25.300
they just show you at the beginning there's nothing in there

00:01:25.300 --> 00:01:26.700
as a kind of way of sort of going,

00:01:26.700 --> 00:01:29.200
"Look, there wasn't anything in my sleeve originally, so it's not a trick."

00:01:29.260 --> 00:01:32.340
In the case of SHA-1, these numbers were produced by the NSA.

00:01:32.340 --> 00:01:32.920
Alright?

00:01:32.920 --> 00:01:36.400
But they've taken steps to try and demonstrate that they are actually

00:01:36.400 --> 00:01:38.420
just random nonsense or

00:01:38.420 --> 00:01:40.380
predictable numbers from life

00:01:40.380 --> 00:01:43.720
rather than very carefully-crafted mathematical numbers

00:01:43.720 --> 00:01:45.940
which allows us some kind of backdoor.

00:01:45.940 --> 00:01:47.500
So, for example, this one here

00:01:47.600 --> 00:01:51.140
is, you can see, is 0-1-2-3-4-5-6-7

00:01:51.220 --> 00:01:52.420
Reversed. Right?

00:01:52.560 --> 00:01:55.060
This one—8-9-A-B-C-D-E-F.

00:01:55.240 --> 00:01:57.500
So you can see they're just counting up and counting back down.

00:01:57.500 --> 00:01:59.500
So they're basically counting.

00:01:59.560 --> 00:02:05.000
Now, this introduces some seemingly random noughts and ones to the initial state

00:02:05.160 --> 00:02:09.840
but what it doesn't do is introduce strange numbers that we don't trust,

00:02:09.840 --> 00:02:12.960
which is a very important thing in cryptography.

00:02:12.960 --> 00:02:17.940
The same is true of some other numbers used in SHA during the compression function

00:02:17.940 --> 00:02:20.440
which are these ones here. So these numbers are

00:02:20.580 --> 00:02:25.520
two to the thirty times by root two, root three, root five, and root ten.

00:02:25.520 --> 00:02:28.980
Why we chose them, in some ways, you know, we don't know,

00:02:29.080 --> 00:02:32.380
but you can imagine that it would be quite hard to

00:02:32.380 --> 00:02:35.460
produce some kind of clever mathematical backdoor

00:02:35.460 --> 00:02:39.200
when you're just using the square root of two, right? Because it's just one number that everyone knows.

00:02:39.280 --> 00:02:39.920
You know?

00:02:39.920 --> 00:02:43.340
If you had picked these numbers at random, so they were in a sense

00:02:43.340 --> 00:02:45.460
is was unclear what their origin was,

00:02:45.460 --> 00:02:46.840
you maybe wouldn't trust them as much.

00:02:46.840 --> 00:02:49.140
So this actually has precedent. So...

00:02:49.140 --> 00:02:52.240
The Data Encryption Standard was released many years ago now.

00:02:52.240 --> 00:02:55.820
Developed by IBM and, shall we say, adjusted slightly by the NSA.

00:02:55.820 --> 00:03:01.080
Now at the time, there were some constants used in certain internals inside DES

00:03:01.080 --> 00:03:02.900
which looked a bit suspicious.

00:03:02.900 --> 00:03:06.380
Certainly, it wasn't so much that they were suspicious as that no one knew where they had come from.

00:03:06.380 --> 00:03:10.440
They'd just been defined by one of the developers and just left there.

00:03:10.440 --> 00:03:14.520
Now as it turns out, they actually were left there with a very good purpose.

00:03:14.520 --> 00:03:18.840
They actually made the algorithm stronger, because it was resistant to something called differential cryptanalysis.

00:03:19.000 --> 00:03:23.760
But at the time, when it seems random or contrived

00:03:23.760 --> 00:03:26.520
you can't tell whether it's because it's made it stronger or weaker

00:03:26.520 --> 00:03:28.320
or it genuinely was random.

00:03:28.320 --> 00:03:30.840
So, in general, the cryptographic community is

00:03:30.840 --> 00:03:35.820
very suspicious of numbers that don't have an obvious reason they're there

00:03:35.820 --> 00:03:39.060
like, "I just counted from one to ten". Right? Because, you can't

00:03:39.060 --> 00:03:42.580
produce a mathematical backdoor based on counting, because it's too contrived.

00:03:42.640 --> 00:03:44.060
If I was on stage—

00:03:44.060 --> 00:03:45.580
I don't do magic, right?

00:03:45.580 --> 00:03:47.420
—but, if I was on stage and I said to you,

00:03:47.420 --> 00:03:49.980
"Let's pick a number at random—I don't know, 24"

00:03:49.980 --> 00:03:54.800
and did some trick with it, you'd think, well that's great, but clearly 24 wasn't random.

00:03:54.800 --> 00:03:56.560
You know, it's that kind of principle.

00:03:56.560 --> 00:03:59.060
You want to have some way of demonstrating

00:03:59.240 --> 00:04:01.400
that it was a truly random number

00:04:01.420 --> 00:04:03.720
or indeed that in essence the

00:04:03.720 --> 00:04:06.740
the choice of your number is important, because everyone has to use the same one

00:04:06.740 --> 00:04:08.000
if it's going to be a standard

00:04:08.000 --> 00:04:10.180
but in some ways, what exact number it was

00:04:10.180 --> 00:04:11.340
wasn't important.

00:04:11.340 --> 00:04:12.760
That's what you're trying to demonstrate.

00:04:12.760 --> 00:04:15.200
So in the case of SHA, they've just done some counting

00:04:15.200 --> 00:04:18.460
they've just produced a simple mathematical formula that produces the numbers

00:04:18.460 --> 00:04:20.940
such that people maybe have a little bit more trust

00:04:20.940 --> 00:04:23.240
that it's used. It's quite common to use

00:04:23.280 --> 00:04:29.260
3-1-4-1-5-9-2-6-5-8-9-7-9

00:04:29.260 --> 00:04:31.740
Right? Because those are the initial digits of pi.

00:04:31.740 --> 00:04:34.100
But the point is that, if you use those numbers,

00:04:34.100 --> 00:04:39.980
then you can add some kind of, you know, initialisation vector for whatever algorithm your writing,

00:04:39.980 --> 00:04:43.940
but I can't say, "Well, you've changed that number to put a backdoor in",

00:04:43.940 --> 00:04:45.240
because that number's pi.

00:04:45.240 --> 00:04:46.720
Right? I can't change that number.

00:04:46.720 --> 00:04:48.940
You know, I don't have that much power. So...

00:04:49.120 --> 00:04:51.120
But if I picked, let's say, the

00:04:51.200 --> 00:04:53.680
the a millionth and second digit of pi

00:04:53.680 --> 00:04:57.180
and the one after that, and the one after that, you'd say, "Well, where did you get a million and two from?"

00:04:57.180 --> 00:04:59.620
You know, "Why have you chosen that part of pi?" So...

00:04:59.620 --> 00:05:02.100
The point is that I've got to have a due process

00:05:02.100 --> 00:05:04.220
and a clear reason for picking this number

00:05:04.220 --> 00:05:06.240
where I've tried to be very open and said, look

00:05:06.240 --> 00:05:09.760
it's not about the number, I've just used it. Okay? That's the idea.

00:05:09.760 --> 00:05:11.920
So I haven't got anything up my sleeve.

00:05:14.180 --> 00:05:15.600
INTERVIEWER: How far can you go with pi?

00:05:15.600 --> 00:05:17.900
Well, I can do better than that, because that's wrong!

00:05:19.140 --> 00:05:23.020
Yeah, it's 3.14159265358979

00:05:23.020 --> 00:05:24.040
So I've missed some out.

00:05:24.040 --> 00:05:26.640
Some people will have spotted that, and they'll be

00:05:26.640 --> 00:05:27.960
they'll be thinking worse of me.

00:05:27.980 --> 00:05:29.620
[LAUGHTER]

00:05:30.040 --> 00:05:30.840
Nevermind.

