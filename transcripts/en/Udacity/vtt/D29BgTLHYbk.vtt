WEBVTT
Kind: captions
Language: en

00:00:00.610 --> 00:00:04.430
So before we go into how exactly Tomasulo's Algorithm works,

00:00:04.430 --> 00:00:07.760
let's kind of see an overview picture of what's going on in there.

00:00:07.760 --> 00:00:10.570
Just like what the helper instruction looks like. So

00:00:10.570 --> 00:00:15.310
first, there is an instruction queue which I labeled here IQ. Instructions come

00:00:15.310 --> 00:00:18.130
from the fetch unit in the order in which they were fetched and again,

00:00:18.130 --> 00:00:21.140
these are only floating point instruction and then they're queued up here. So

00:00:21.140 --> 00:00:24.790
this is basically like this is the kind of, all this instruction, the next one,

00:00:24.790 --> 00:00:26.830
the next one, the next one and we will be kind of,

00:00:26.830 --> 00:00:31.070
you know, dropping these instructions into the Tomasulo's algorithm machine in

00:00:31.070 --> 00:00:35.100
the order in which they came. We always grab the next available instruction from

00:00:35.100 --> 00:00:40.010
the instruction queue. And we want to put it into a reservation station.

00:00:40.010 --> 00:00:43.520
There are a number of reservation stations that basically,

00:00:43.520 --> 00:00:47.680
when one becomes available, we will put an instruction into one of those.

00:00:47.680 --> 00:00:50.940
And the reservation stations are where instructions basically sit for

00:00:50.940 --> 00:00:55.040
their parameters to become ready. There is a floating point register file.

00:00:55.040 --> 00:00:59.260
So this is where your floating point registers are. And when an instruction is

00:00:59.260 --> 00:01:03.090
inserted into the reservation station, the values that are already in registers,

00:01:03.090 --> 00:01:06.140
meaning the values that are actually already present and ready for

00:01:06.140 --> 00:01:09.890
execution, are going to be simply entered into the reservation station from

00:01:09.890 --> 00:01:14.420
the register file. Once an instruction is actually ready to execute, it goes to

00:01:14.420 --> 00:01:17.830
an execution unit. And you can have different types of execution units.

00:01:17.830 --> 00:01:22.360
So for example this a adder, and this is a multiplier. So

00:01:22.360 --> 00:01:26.380
simple floating point instructions will be done in the kind of adder unit, and

00:01:26.380 --> 00:01:29.790
the more complicated like multiply and divide would be done in the multiplier

00:01:29.790 --> 00:01:33.280
unit. Each of these units really have separate reservation stations,

00:01:33.280 --> 00:01:37.190
where unit instructions that are going to that unit would wait.

00:01:37.190 --> 00:01:43.400
Once such a unit has produced a result, the result will be broadcast on a bus.

00:01:43.400 --> 00:01:46.760
So of course, the result would go to the register file. So pretty much all

00:01:46.760 --> 00:01:49.370
the results that are ready would be available in the register file, so

00:01:49.370 --> 00:01:51.870
that instructions that come in would simply grab them from there and

00:01:51.870 --> 00:01:55.740
we don't have to worry where those values are going to come from.

00:01:55.740 --> 00:01:59.280
But these results would also be broadcast to the reservation stations. Why?

00:01:59.280 --> 00:02:02.970
Well, because there are instructions here that are waiting for

00:02:02.970 --> 00:02:05.010
values that they need to be produced and

00:02:05.010 --> 00:02:08.400
as values are produced, we need to tell these instructions that, you know,

00:02:08.400 --> 00:02:11.450
now your value has been produced so that it need to also go here. So

00:02:11.450 --> 00:02:14.710
pretty much here, you have some values that you already have in an interaction.

00:02:14.710 --> 00:02:18.530
Some values that you, you're waiting for and you know what you're waiting for.

00:02:18.530 --> 00:02:21.930
And then, when the value is finally broadcast, you check for

00:02:21.930 --> 00:02:25.660
each of the value that is broadcast, whether this is the one we are waiting for

00:02:25.660 --> 00:02:28.820
or not. Now, I have two of these for reservation station,

00:02:28.820 --> 00:02:32.460
because a typical instruction will actually have two inputs. Like for

00:02:32.460 --> 00:02:36.930
example, you're adding two numbers. And when you broadcast the result,

00:02:36.930 --> 00:02:40.450
either of the two or both of them might need that result. For example,

00:02:40.450 --> 00:02:44.610
if you're doing something like add R1, R1 and the instructions is producing R1

00:02:44.610 --> 00:02:48.500
is currently in the multiply. When it broadcasts the resultant says this is R1.

00:02:48.500 --> 00:02:53.470
We want to latch it into maybe both of the operands for this instruction. So we

00:02:53.470 --> 00:02:58.710
need to compare basically what's being broadcast. Its name needs to be compared

00:02:58.710 --> 00:03:03.340
with both of the inputs that you are waiting for, and then you select the one or

00:03:03.340 --> 00:03:07.830
both of them or, none of them if this is not the value you are waiting for.

00:03:07.830 --> 00:03:12.200
And finally, if the instruction is not an arithmetic instruction it's

00:03:12.200 --> 00:03:15.050
actually a load into the floating point register file or

00:03:15.050 --> 00:03:19.270
a store from it. Then the instruction would go to the address generation unit,

00:03:19.270 --> 00:03:21.572
that's an integer operation so it's not going,

00:03:21.572 --> 00:03:24.740
not going to through that, so basically we just compute the address. And

00:03:24.740 --> 00:03:28.090
then we insert the instruction into the load buffer or a store buffer,

00:03:28.090 --> 00:03:31.660
where the instructions are going to be queued up for going to memory.

00:03:31.660 --> 00:03:35.040
And the load buffer only provides the data that I ask, the store buffer provides

00:03:35.040 --> 00:03:39.620
both the address and the data to memory. When the load comes back from memory,

00:03:39.620 --> 00:03:44.350
its value is also broadcasted on the CDB and goes to the appropriate register.

00:03:44.350 --> 00:03:49.850
And also, all the values that are broadcast from the bus, are going to go here,

00:03:49.850 --> 00:03:53.590
so that stores can get their values when they become available. So,

00:03:53.590 --> 00:03:57.220
our store instruction needs to put a value in memory, is going to wait for

00:03:57.220 --> 00:04:00.410
its floating point value that needs to be placed in memory.

00:04:00.410 --> 00:04:03.740
Until it becomes available and only then be sent to the memory.

00:04:03.740 --> 00:04:07.730
Unlike, arithmetic instructions which can execute out of order.

00:04:07.730 --> 00:04:10.080
Basically, the only way for inputs to become available and

00:04:10.080 --> 00:04:14.250
then they can go for loads and stores. They were done in order.

00:04:14.250 --> 00:04:17.999
So basically, they didn't reorder loads and stores. And it will later,

00:04:17.999 --> 00:04:21.649
consider how to do that. Modern processors will actually reorder loads and

00:04:21.649 --> 00:04:25.040
stores too. So this is a lot simpler than in modern processors, but

00:04:25.040 --> 00:04:30.380
this here is pretty much the way it's done now. Modulo some small adjustments.

00:04:30.380 --> 00:04:34.050
So before we go into kind of the details of Tomasulo's algorithm,

00:04:34.050 --> 00:04:36.550
let's just kind of give names to some things on this picture, and

00:04:36.550 --> 00:04:39.930
then we will kind of discuss what each of these things really needs to do.

00:04:39.930 --> 00:04:44.250
So, this part here, where we send the instruction from the instruction queue

00:04:44.250 --> 00:04:48.090
into the reservation station, then the load store unit is called issue.

00:04:48.090 --> 00:04:53.910
When the instruction is finally sent to execution from a reservation station,

00:04:53.910 --> 00:05:00.250
it's called dispatch. And when the instruction is ready to broadcast its result,

00:05:00.250 --> 00:05:04.560
we call that write result, or simply broadcast. So basically,

00:05:04.560 --> 00:05:08.690
every instruction will be issued,. Meaning, get to the res station.

00:05:08.690 --> 00:05:12.800
Eventually it gets to dispatch, because all of its inputs are at the end it's,

00:05:12.800 --> 00:05:16.250
kind of gets to go to the unit. Once it's done, it's going to write

00:05:16.250 --> 00:05:19.710
the result and that is when we consider the instruction completed. So now let's

00:05:19.710 --> 00:05:22.720
see what happens when you issue, when you dispatch, and when you write result.

