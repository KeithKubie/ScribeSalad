WEBVTT
Kind: captions
Language: en

00:00:00.030 --> 00:00:07.949
okay, BGP is the border Gateway protocol, and it's, it's a routing protocol that evolved in the internet and

00:00:08.679 --> 00:00:13.979
It's, you can think of it as kind of the the top of the food chain in terms of routing in the internet

00:00:13.980 --> 00:00:17.310
It's the it's the protocol that's used to connect the

00:00:18.640 --> 00:00:24.449
Service providers let's say primarily in the internet, so how does AT&amp;T exchange

00:00:25.510 --> 00:00:31.559
reachability information with bt with France telecom with you know and they have to exchange

00:00:31.960 --> 00:00:35.610
This kind of reach ability information, so that we can glue that these

00:00:36.190 --> 00:00:38.190
Autonomous Networks together

00:00:38.680 --> 00:00:44.819
Because there is no one there is no centralized control in the internet you know so bt

00:00:45.460 --> 00:00:46.620
Controls its equipment

00:00:46.620 --> 00:00:48.030
And it's part of the internet

00:00:48.030 --> 00:00:55.020
But AT&amp;T controls its part of its own part of the internet and they have to interoperate somehow they have to be able to

00:00:56.469 --> 00:01:02.009
Exchange information about the IP addresses associated with their customers and Etc

00:01:05.590 --> 00:01:09.250
So the border Gateway protocol BGP is this protocol that has

00:01:09.770 --> 00:01:13.899
evolved to handle that job, right, to exchange

00:01:15.200 --> 00:01:17.030
information between

00:01:17.030 --> 00:01:24.640
Autonomous networks okay, so without any centralized control. There are many interesting engineering problems, [they're]

00:01:25.939 --> 00:01:29.199
interesting research problems in terms of scalability and robustness

00:01:29.990 --> 00:01:31.250
ETC

00:01:31.250 --> 00:01:35.349
And but I'm going to talk about it in really sort of elementary terms

00:01:35.350 --> 00:01:38.739
and I want to I want to be I want to talk about a

00:01:39.380 --> 00:01:44.199
simple graph problem as a reachability problem in graphs in simple

00:01:44.539 --> 00:01:47.889
combinatorial graphs with where we have nodes and Arcs

00:01:47.890 --> 00:01:53.229
And we want to get from one place to another. You send a packet to your service provider

00:01:53.450 --> 00:01:59.289
It has to look in a table and figure out where to send that next and that packet may end up on

00:01:59.599 --> 00:02:03.039
the other side of the globe in a completely different network

00:02:03.950 --> 00:02:07.269
and and so it's that level you know it's it's

00:02:07.789 --> 00:02:12.518
How to get from here to there, so it's the foundations of the internet

00:02:12.620 --> 00:02:19.630
It's the basic global foundation of the internet. Different protocols are used within these autonomous networks

00:02:19.630 --> 00:02:25.029
And I think more talked about that in a previous computer file, and you know for example

00:02:25.030 --> 00:02:32.979
You might use some kind of shortest path based thing within a network, but between networks what's interesting about this is that

00:02:33.590 --> 00:02:35.649
You know we want this

00:02:36.170 --> 00:02:37.940
inter

00:02:37.940 --> 00:02:40.660
domains or you know regional

00:02:42.109 --> 00:02:46.179
Autonomous networks we want this routing to interoperate to work

00:02:47.180 --> 00:02:48.560
even when

00:02:48.560 --> 00:02:54.190
The service providers don't have common agreement about what is the best route for example?

00:02:54.290 --> 00:02:59.739
You know your best route might not look like my best route because we have different contracts

00:03:00.290 --> 00:03:07.000
With with different companies in the internet, and so we have different we will have different ideas about what is best

00:03:07.579 --> 00:03:10.839
Okay, so that might be a commercial thing it might be our you know

00:03:10.840 --> 00:03:16.000
I don't want you to send too much traffic through me because it's going to cost me money to look that's right right and basically

00:03:16.280 --> 00:03:18.280
the idea is that

00:03:18.500 --> 00:03:24.139
when you're doing shortest path routing you want you know you want everybody to be connected with everybody and

00:03:24.720 --> 00:03:28.849
along the shortest path and in the internet you want

00:03:29.790 --> 00:03:37.730
you don't want traffic to be crossing your network unless somebody's paying you for that either the source of the traffic or the

00:03:38.160 --> 00:03:45.169
destination or a combination right somehow and so in other words the the protocol is more about limiting the

00:03:46.709 --> 00:03:48.660
Connectivity rather than

00:03:48.660 --> 00:03:51.649
You know being generous about it and giving it to everyone

00:03:51.810 --> 00:03:59.660
It's kind of let's restrict this connectivity to those that are paying for it somehow. That's basically the idea but

00:04:00.299 --> 00:04:07.879
What I want what I want to think about is well, How does this fit into our notion of finding paths in a graph?

00:04:08.549 --> 00:04:11.059
because in the undergraduate

00:04:12.360 --> 00:04:18.679
Computer science one of the things we teach in algorithms courses is you know a lot of shortest path algorithms

00:04:18.680 --> 00:04:23.060
So we we define a graph let's say that is nodes and Arcs

00:04:23.060 --> 00:04:30.380
And you have a weight on these arcs and then you try to find the best paths between every pair of Arcs

00:04:30.380 --> 00:04:37.820
Let's say and we typically teach this and we teach lots of algorithms for doing this like Dijkstra's algorithm Bellman-Ford

00:04:39.210 --> 00:04:46.039
Warshall's Algorithm so can we abstract away from the complexities of BGP and think about it in those terms?

00:04:46.380 --> 00:04:53.539
The thing is it doesn't quite fit in our models very well and and and I'll try to explain

00:04:55.350 --> 00:04:57.540
Informally why not

00:04:57.540 --> 00:05:00.139
-Well what doesn't fit the BGP or what doesn't fit? Okay?

00:05:00.139 --> 00:05:04.668
So we normally think about shortest paths in terms of numeric values

00:05:05.220 --> 00:05:10.100
Okay, so and we typically add those values as we go along a path

00:05:10.680 --> 00:05:18.470
Right, so maybe maybe each Arc has a weight one and we essentially count the number of hops that we're going

00:05:18.470 --> 00:05:20.470
Through a path and then we would prefer

00:05:20.880 --> 00:05:25.159
Let's say a shorter path one with fewer hops than a longer one

00:05:25.440 --> 00:05:28.969
so we're what we're using there are two operations plus and

00:05:29.669 --> 00:05:31.699
Maybe an operation let's call it min

00:05:32.310 --> 00:05:36.589
Okay, so we have these operations min and plus so min for minimum

00:05:36.600 --> 00:05:42.230
Yeah, plus for adding up those hops yeah, right, and so what people notice that about 40 years ago

00:05:42.230 --> 00:05:44.839
Is that a lot of these algorithms that we have

00:05:46.530 --> 00:05:53.269
for shortest paths Dijkstra's algorithm bellman-Ford can be generalized to a large class of

00:05:53.580 --> 00:05:59.870
Algebraic structures called Semi rings. I'm gonna show you. What is a really stupid question I'm sure okay semi ring

00:05:59.870 --> 00:06:02.120
I'm not familiar with a semi ring, okay?

00:06:02.120 --> 00:06:07.100
So a semi ring is a algebraic structure that looks like a ring

00:06:07.170 --> 00:06:13.189
So what is a ring a ring is something like the real numbers, so we have domain the real numbers

00:06:13.190 --> 00:06:18.079
and we have a plus and a times they are plus and times the the

00:06:18.870 --> 00:06:21.019
Standard operations and

00:06:21.900 --> 00:06:23.250
A

00:06:23.250 --> 00:06:25.250
Linear Algebra is built on

00:06:25.350 --> 00:06:32.179
Rings where actually we take Matrices we multiply matrices we solve Matrix equations things like that

00:06:32.220 --> 00:06:38.329
That's all linear Algebra. Well it turns out that semi rings and routing is also. It's kind

00:06:38.330 --> 00:06:46.160
It's kind of like a generalization of that where we we weaken the properties that the the plus and the times have to have

00:06:46.680 --> 00:06:49.009
Right so for example a ring

00:06:50.910 --> 00:06:55.519
That plus has inverses we have negative numbers. So there's always a

00:06:56.190 --> 00:07:00.619
For every a there's a not there's a negative a that when you add them together you get zero

00:07:01.200 --> 00:07:09.080
Okay, and the semi ring is like a ring except it doesn't have that inverse property you don't necessarily have inverses what people did back

00:07:09.080 --> 00:07:12.680
In the 60s and 70s is they looked at algorithms like Dijkstra's algorithm

00:07:13.500 --> 00:07:15.500
like

00:07:15.570 --> 00:07:18.170
Bellman-Ford, and then they said wait a minute. Let's work backwards

00:07:18.870 --> 00:07:25.880
let's look at these we see min and plus in the algorithms, but let's replace them by abstract operators and

00:07:26.730 --> 00:07:34.519
Let's see what algebraic properties. We need to make this algorithm work still suppose. We want to pick paths that have the highest capacity

00:07:35.700 --> 00:07:40.970
Okay, so we might instead of using plus. We might go along a path

00:07:41.730 --> 00:07:45.050
Using min the weight of a path will be the minimum

00:07:45.770 --> 00:07:46.540
capacity Link

00:07:46.540 --> 00:07:53.290
And then instead of using min to compare paths we might want to use max so that would give us the highest capacity path

00:07:53.480 --> 00:08:00.009
Okay, so people noticed. Oh wait a minute. You know this min plus and this max min

00:08:00.560 --> 00:08:08.320
They have certain algebraic properties that are true, and we can we can take Dijkstra's algorithm, and we can replace the plus

00:08:09.170 --> 00:08:16.929
With min and replace the min with max and now we have an algorithm that does it works perfectly fine now it

00:08:17.120 --> 00:08:19.120
Now it finds the highest capacity

00:08:19.910 --> 00:08:24.459
paths in the graph, and then we can build other things for example suppose

00:08:24.460 --> 00:08:31.180
I wanted to find paths that were shortest, but if I had two paths that were equally short

00:08:31.180 --> 00:08:38.919
Maybe I want to break ties with capacity ok so then now I could have a path with two metrics. You know distance

00:08:39.680 --> 00:08:43.180
Capacity right and then I could essentially

00:08:43.820 --> 00:08:47.260
You know a use shortest paths on that first component

00:08:47.260 --> 00:08:48.620
and then break ties with

00:08:48.620 --> 00:08:49.310
capacity

00:08:49.310 --> 00:08:49.910
Okay

00:08:49.910 --> 00:08:56.169
That to that that that turns out you can make a semi ring out of this and then guess what you can use Dijkstra's algorithm

00:08:57.440 --> 00:09:02.440
Bellman-Ford to compute with these as well if you compare things you know first distance then

00:09:03.020 --> 00:09:04.940
capacity kind of its kind of A

00:09:04.940 --> 00:09:11.229
Lexicographic comparison there you can build a semi ring out of that and then and so these these algorithms are really

00:09:11.360 --> 00:09:13.360
Generic you can just plug in

00:09:14.450 --> 00:09:16.450
You can plug in

00:09:17.420 --> 00:09:19.420
You know just an unbounded number

00:09:20.060 --> 00:09:25.539
Of different algebraic structures to get what you want and use the same algorithms

00:09:25.970 --> 00:09:33.400
Bellman-Ford or Dijkstra ETC, so this might seem like oh now. We have this open-ended world

00:09:34.330 --> 00:09:37.660
Maybe we can model something like BGP in this world

00:09:38.540 --> 00:09:41.080
turns out we can't okay and

00:09:42.050 --> 00:09:44.050
let me give you an example of

00:09:44.690 --> 00:09:49.839
That's easy easier to understand than BGP. Okay. I told you we could do

00:09:51.260 --> 00:09:57.939
We could we could look at distance first then break ties with bandwidth suppose. We or capacity let's suppose

00:09:57.940 --> 00:09:59.940
We did it the other way around.

00:10:00.589 --> 00:10:06.339
I want the highest capacity path and if I have two best paths

00:10:06.920 --> 00:10:11.170
With high capacity I want to break ties then on the distance

00:10:11.600 --> 00:10:16.449
So I first look at the at the capacity component, then I break ties on distance

00:10:17.360 --> 00:10:19.449
That's not a semi ring anymore

00:10:20.209 --> 00:10:25.719
Why is that? Oh? It's not obvious that you know if you use some of these generic

00:10:27.529 --> 00:10:32.109
Best path algorithms, it's something's going to break. Maybe why is that?

00:10:33.079 --> 00:10:36.429
not obvious, but it turns out that one of the rules of

00:10:37.759 --> 00:10:40.359
that needs to be followed by a semi ring is

00:10:41.149 --> 00:10:43.149
something called just

00:10:43.220 --> 00:10:48.399
Distributivity this is an algebraic property what it really means is that you know

00:10:49.220 --> 00:10:55.690
It doesn't really matter if I make a decision about the best path seeing all my past or you my neighbor

00:10:55.850 --> 00:11:01.750
You make the decisions, and you tell me what your best path is it kind of doesn't really matter

00:11:02.389 --> 00:11:08.709
Because we'll come to the same We'll come to the same conclusion right, so that's what distributivity is all about and

00:11:09.649 --> 00:11:10.810
This this thing

00:11:10.810 --> 00:11:16.690
I told you about you know shortest path then capacity that has that property still

00:11:17.060 --> 00:11:24.039
But when I turn it around when I do capacity first and then shortest paths it breaks that property

00:11:24.560 --> 00:11:28.029
Okay, and let me just give you an example of why suppose. I have a neighbor

00:11:28.699 --> 00:11:31.869
That sees two paths: one's very high Bandwidth

00:11:31.870 --> 00:11:38.079
But also a very long path right and it sees another one with very low bandwidth or capacity

00:11:38.360 --> 00:11:39.880
But it has a short path

00:11:39.880 --> 00:11:47.739
And then I am talking to my neighbor over a very low capacity link so my neighbor picks that high capacity long

00:11:48.079 --> 00:11:53.438
Path, but I see two. Paths and I say wait a minute. This is kind of like a bottleneck link

00:11:54.290 --> 00:11:59.560
Is sort of wipes out the the capacity you know it's the the capacity of both

00:11:59.560 --> 00:12:00.769
paths is now the

00:12:00.769 --> 00:12:06.759
capacity of this really lousy link as far as I'm concerned both of those paths that my neighbor is giving me have the same

00:12:07.160 --> 00:12:12.850
capacity because I have this bottleneck link with very low capacity so I'm going to break ties on the length

00:12:13.100 --> 00:12:14.829
And I'm going to break ties

00:12:14.829 --> 00:12:19.929
I'm going to want that shortest path, but my neighbor picked the longer path because it had a higher capacity

00:12:20.060 --> 00:12:25.599
But I don't see that you see so we're going to be disagreeing about this, okay

00:12:25.910 --> 00:12:28.600
so a similar thing happens in the internet for example

00:12:29.629 --> 00:12:34.359
If I'm a paying customer of a route of a path, let's say, I'm paying

00:12:35.029 --> 00:12:39.338
Upstream, I'm paying for this route, but my neighbor is a service provider

00:12:40.250 --> 00:12:46.750
One of those paths it's not paying for because it's a it's their customer another path

00:12:46.750 --> 00:12:49.239
It's paying for you know. It's up

00:12:49.240 --> 00:12:52.149
It has an upstream provider so that that that

00:12:52.519 --> 00:12:57.399
Path could be my neighbor would like the longer path because it's a from a paying customer

00:12:57.949 --> 00:13:00.909
From an economic point of view they like that longer path

00:13:01.730 --> 00:13:05.199
but I I see the two routes as well. They're both

00:13:05.779 --> 00:13:11.588
Provider paths, they're both equally bad in that sense, so I'll pick the shorter one, so we don't agree

00:13:11.809 --> 00:13:17.139
There's one thing I should say about internet routing that I was I've been sort of taking for granted without

00:13:17.870 --> 00:13:20.799
Really making it explicit and that is

00:13:22.100 --> 00:13:27.279
99% of internet Routing Protocols only

00:13:29.660 --> 00:13:32.949
They they they're their traffic insensitive?

00:13:33.620 --> 00:13:41.289
Okay, that is they're perfectly willing to route all the traffic along the most congested link in the internet

00:13:41.899 --> 00:13:45.938
Okay, in other words. They don't route around congestion

00:13:46.670 --> 00:13:51.099
So this is the traffic difference between right yeah, and so telco

00:13:52.069 --> 00:13:57.039
Protocols routed around things like congestion, but internet protocols have tradition. There are a few exceptions

00:13:57.829 --> 00:13:59.000
but generally

00:13:59.000 --> 00:14:05.079
Protocols like BGP OSPF is is and and RIP do not route around congestion

00:14:05.420 --> 00:14:10.719
That's considered sort of a network that's at done that network management timescales

00:14:10.939 --> 00:14:16.659
So a network manager will see oh, we have congestion over there. Let's adjust the link weights

00:14:17.420 --> 00:14:24.050
So that the traffic will be more or divergent the protocol doesn't do that the protocol just

00:14:24.449 --> 00:14:28.549
Blindly follows those link weights those statically configured link weights

00:14:29.639 --> 00:14:31.969
it's not sensitive to traffic

00:14:33.420 --> 00:14:40.789
characteristics, and this is because in the internet those characteristics tend to change a lot and oscillate a lot and

00:14:41.009 --> 00:14:43.188
they tend to often oscillate in a

00:14:43.589 --> 00:14:50.928
At a faster rate than the control plane can keep up with and so you you when you try to adapt

00:14:51.990 --> 00:14:55.279
dynamically to congestion you tend to introduce a lot of

00:14:56.069 --> 00:14:58.069
instability in the Routing plane and

00:14:58.589 --> 00:15:03.138
So these things are you know completely insensitive to

00:15:04.829 --> 00:15:07.549
to traffic conditions like congestion

00:15:07.550 --> 00:15:13.459
It's up to the network managers to set those statically configured link weights to Avoid congestion

00:15:13.860 --> 00:15:18.919
So this is more like the road size. They tell you where those things go. Yes, they don't change yes

00:15:18.920 --> 00:15:24.019
I think internet forwarding is a lot like those signs that just point you in that direction

00:15:24.119 --> 00:15:28.009
You know paris is in that direction. Go if you're heading towards Paris

00:15:28.009 --> 00:15:33.649
Go that way a complicated thing of course is that when we have now these regions that are divided up into

00:15:35.759 --> 00:15:38.779
Autonomous regions that have very different goals

00:15:40.079 --> 00:15:47.719
But they're forced to interact all right BT is forced to exchange routes with AT&amp;T because they're selling

00:15:48.540 --> 00:15:55.309
The service of Global internet Connectivity, so they're forced to interact with their competitors

00:15:55.410 --> 00:15:59.749
They they'd like to control the entire internet. I'm sure but they can't

00:16:03.459 --> 00:16:05.459
There's a balance you want to

00:16:06.050 --> 00:16:13.300
Allow each network to tailor its let's call them routing policies or routing policies

00:16:13.300 --> 00:16:16.479
Sorry, I've been in the uk for 12 years, so I'm saying routing now

