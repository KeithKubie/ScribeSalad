WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:59.536
[MUSIC PLAYING]

00:01:09.040 --> 00:01:10.240
ALI AFSHAR: Hi everyone,
welcome to

00:01:10.240 --> 00:01:11.630
Google Developers Live.

00:01:11.630 --> 00:01:14.310
My name's Ali, and today I'm
going to be talking to you

00:01:14.310 --> 00:01:19.050
about the Google Drive SDK, and
specifically a new feature

00:01:19.050 --> 00:01:23.090
we launched last week called
the App Data Folder.

00:01:23.090 --> 00:01:24.290
So how are we going
to look at this?

00:01:24.290 --> 00:01:28.600
Well, I've written a small chunk
of code, and we're just

00:01:28.600 --> 00:01:30.960
going to walk through it so
you can see the basic

00:01:30.960 --> 00:01:34.360
operations, how easy it is.

00:01:34.360 --> 00:01:37.160
First, I'd like to talk about
why should you care.

00:01:37.160 --> 00:01:40.550
Why should you as an Android
developer care about storing

00:01:40.550 --> 00:01:43.820
your data in the Google
Drive App Data Folder?

00:01:43.820 --> 00:01:47.190
Well, this is a bit about
the App Data Folder.

00:01:47.190 --> 00:01:49.930
It is a folder that lives on
your Google Drive that is

00:01:49.930 --> 00:01:52.970
specific for your application.

00:01:52.970 --> 00:01:55.720
So you can store
data in there.

00:01:55.720 --> 00:01:59.060
The user can't actually read
or modify that data.

00:01:59.060 --> 00:02:01.440
What they can do is they
delete that data.

00:02:01.440 --> 00:02:03.970
And it's in their drive, it
takes up their storage quota.

00:02:03.970 --> 00:02:08.370
So there are no limits on the
data size apart from the

00:02:08.370 --> 00:02:10.810
amount of quota that the
user has available.

00:02:10.810 --> 00:02:13.980
Obviously, if you're using up
all the user's drive, then

00:02:13.980 --> 00:02:15.650
they're more likely
to delete it.

00:02:15.650 --> 00:02:18.900
So it's a folder specific
for your application.

00:02:18.900 --> 00:02:20.370
No one else can modify
the files.

00:02:20.370 --> 00:02:22.050
No one else can read
the files.

00:02:22.050 --> 00:02:23.660
Only the user can delete
them if they're

00:02:23.660 --> 00:02:25.280
taking up too much quota.

00:02:25.280 --> 00:02:28.990
OK, why should you use
this from Android?

00:02:28.990 --> 00:02:30.670
Well, why should it matter?

00:02:30.670 --> 00:02:34.440
Well, I personally think people
are getting to the

00:02:34.440 --> 00:02:35.600
stage where they've
got multiple

00:02:35.600 --> 00:02:37.410
devices on multiple platforms.

00:02:37.410 --> 00:02:40.460
Now, one of the beauties about
Drive and the Drive API is

00:02:40.460 --> 00:02:43.940
that you can access it and use
it from any platform, really.

00:02:43.940 --> 00:02:46.680
And part of that is mobile,
but say if you have an

00:02:46.680 --> 00:02:49.890
application that also has a
desktop component, or a web

00:02:49.890 --> 00:02:52.870
component, or someone might
have a tablet, an Android

00:02:52.870 --> 00:02:54.730
tablet, or an iOS phone.

00:02:54.730 --> 00:02:59.200
You want to be able to have
some way of keeping data

00:02:59.200 --> 00:03:01.410
synchronized across all
these platforms.

00:03:01.410 --> 00:03:03.790
Now, Drive is that,
essentially.

00:03:03.790 --> 00:03:05.010
It's the best way.

00:03:05.010 --> 00:03:06.240
People have Google accounts.

00:03:06.240 --> 00:03:08.220
Many people have Google accounts
and they come with 5

00:03:08.220 --> 00:03:09.570
gigabytes of storage.

00:03:09.570 --> 00:03:13.440
So you don't really need to
think about, does the user

00:03:13.440 --> 00:03:15.600
have an account, do they
have enough quota.

00:03:15.600 --> 00:03:17.560
You can just go ahead
and use it.

00:03:17.560 --> 00:03:20.460
Now, on mobile, that's
particularly useful for any

00:03:20.460 --> 00:03:23.260
state you want to share between
instances of the

00:03:23.260 --> 00:03:24.210
application.

00:03:24.210 --> 00:03:30.230
So that might be configuration
data, it might be application

00:03:30.230 --> 00:03:33.910
state, for example, which window
is open, which tabs

00:03:33.910 --> 00:03:38.710
they had open if it's a browsing
kind of application.

00:03:38.710 --> 00:03:40.940
You might want to log history,
for example.

00:03:40.940 --> 00:03:44.560
Say you have a history of
commands that a user did with

00:03:44.560 --> 00:03:47.760
an application, or maybe
even an Undo History.

00:03:47.760 --> 00:03:50.920
You could make that across
all different platforms.

00:03:50.920 --> 00:03:53.930
And of course, for situations
like saving games, that's

00:03:53.930 --> 00:03:57.510
another potentially
huge case here.

00:03:57.510 --> 00:03:59.970
You don't want the user to be
able to modify the saved game

00:03:59.970 --> 00:04:03.210
file, you want to be able to
store as many as you like, and

00:04:03.210 --> 00:04:05.260
they can delete them as
and when they wish.

00:04:05.260 --> 00:04:07.180
OK, so that's some
of the use case.

00:04:07.180 --> 00:04:10.630
I think it's particularly
powerful on mobile platforms,

00:04:10.630 --> 00:04:13.100
because people do have more
than one mobile device.

00:04:13.100 --> 00:04:15.120
So that's App Data.

00:04:15.120 --> 00:04:15.920
How can we use it?

00:04:15.920 --> 00:04:18.529
Well, fortunately, it's
really, really easy.

00:04:18.529 --> 00:04:22.340
Now, I've written a tiny
little application.

00:04:22.340 --> 00:04:24.910
The first thing we're going to
do is just run through the

00:04:24.910 --> 00:04:25.530
application.

00:04:25.530 --> 00:04:27.650
Just run it, and then we'll
talk about how it works.

00:04:27.650 --> 00:04:32.610
So if you can see the Android
tablet now, it's very simple.

00:04:32.610 --> 00:04:35.370
I've got a background and I've
got a single button.

00:04:35.370 --> 00:04:40.510
OK, so I'm going to click the
button and we get a little pop

00:04:40.510 --> 00:04:43.810
up saying we've created
a file.

00:04:43.810 --> 00:04:47.850
It says found, and
it says updated.

00:04:47.850 --> 00:04:50.690
OK, so we've done three
operations, and hopefully

00:04:50.690 --> 00:04:53.390
those are the basic operations
you need to get started.

00:04:53.390 --> 00:04:56.780
So let's have a look at
some of the code.

00:04:56.780 --> 00:05:00.620
I first started by taking the
Android Quickstart Guide--

00:05:00.620 --> 00:05:02.630
sorry to jump around.

00:05:02.630 --> 00:05:09.170
It's here, developers.googl
e.com/drive/quickstart-android.

00:05:09.170 --> 00:05:13.360
Now, that is the best way to
get yourself up and running

00:05:13.360 --> 00:05:15.740
with the Google Drive
API on Android.

00:05:15.740 --> 00:05:17.860
It has a number of steps.

00:05:17.860 --> 00:05:21.160
If you go through them
all, it will work.

00:05:21.160 --> 00:05:23.540
Some of them are a
bit complicated.

00:05:23.540 --> 00:05:25.370
It took me a while to
get them all set up.

00:05:25.370 --> 00:05:27.980
It includes, for example,
plug-ins.

00:05:27.980 --> 00:05:32.900
You need to Eclipse, the Google
plug-in for Eclipse.

00:05:32.900 --> 00:05:35.170
But if you go through all these,
you will get up and

00:05:35.170 --> 00:05:38.980
running as soon as
you possibly can.

00:05:38.980 --> 00:05:40.880
So I took that application.

00:05:40.880 --> 00:05:43.820
That is a camera application.

00:05:43.820 --> 00:05:46.383
It takes a photo and
it uploads that

00:05:46.383 --> 00:05:48.000
photo to Google Drive.

00:05:48.000 --> 00:05:50.690
So what I've done is, I've
removed all the camera stuff.

00:05:50.690 --> 00:05:53.515
I don't really want to store
photos, so I've removed the

00:05:53.515 --> 00:05:55.960
opening of the camera.

00:05:55.960 --> 00:05:58.740
All the other uploading of the
photo, I've removed, because I

00:05:58.740 --> 00:06:01.600
want to store custom files
in my app data folder.

00:06:01.600 --> 00:06:05.840
So what I did do is, I've added
the button you saw, and

00:06:05.840 --> 00:06:10.950
on clicking of the button, it
will run this run method.

00:06:10.950 --> 00:06:13.920
OK, now, the run method
essentially starts a new

00:06:13.920 --> 00:06:17.590
thread, calls main, and catches
all the exceptions.

00:06:17.590 --> 00:06:20.220
And I've done that just so I can
write code freely without

00:06:20.220 --> 00:06:22.580
having to worry about
exceptions.

00:06:22.580 --> 00:06:24.750
If you're in a production
environment, you may decide to

00:06:24.750 --> 00:06:28.140
do things differently, or the
same, or however, but this is

00:06:28.140 --> 00:06:29.630
just to make our code
look simple.

00:06:29.630 --> 00:06:32.610
So we have this run method
that starts the thread,

00:06:32.610 --> 00:06:36.420
executes main, and in main,
I've got our code.

00:06:36.420 --> 00:06:37.840
So let's go to the top.

00:06:37.840 --> 00:06:40.540
So I've explained to you what
App Data is, why should you

00:06:40.540 --> 00:06:43.570
care, hopefully, the
prerequisites you need to

00:06:43.570 --> 00:06:46.140
install this, they're all in the
Quickstart page, and we've

00:06:46.140 --> 00:06:47.300
run the application.

00:06:47.300 --> 00:06:50.590
So the first thing we need to
decide is, what are we going

00:06:50.590 --> 00:06:51.950
to call our file.

00:06:51.950 --> 00:06:55.120
OK, now I've just got a string
there, the title, and I'm

00:06:55.120 --> 00:06:57.090
going to call it configuration
file.

00:06:57.090 --> 00:06:59.510
OK, and then I've got a file.

00:06:59.510 --> 00:07:05.170
This is a drive file resource
from the Drive API.

00:07:05.170 --> 00:07:07.640
I'm going to call it config,
and it's going to be the

00:07:07.640 --> 00:07:10.830
latest file we have as we're
going through this procedure.

00:07:10.830 --> 00:07:11.420
OK.

00:07:11.420 --> 00:07:13.050
So what's the first thing
we want to do?

00:07:13.050 --> 00:07:17.680
We want to upload some content
to the App Data Folder.

00:07:17.680 --> 00:07:22.010
OK, the first thing you'll need
is some actual content.

00:07:22.010 --> 00:07:23.460
This can be anything.

00:07:23.460 --> 00:07:27.860
We have different adapters for
uploading files, for example.

00:07:27.860 --> 00:07:31.560
In my case, I've got a
byte array content.

00:07:31.560 --> 00:07:34.420
And that just takes a
byte array in memory

00:07:34.420 --> 00:07:35.920
and it uploads it.

00:07:35.920 --> 00:07:39.710
So as I say, it could
be a file.

00:07:39.710 --> 00:07:41.560
You could load the
file from disk.

00:07:41.560 --> 00:07:44.340
One thing you do need to do is
always pass a MIME type.

00:07:44.340 --> 00:07:46.050
We're using text plain here.

00:07:46.050 --> 00:07:50.110
Now, this is the MIME type that
the file gets stored as.

00:07:50.110 --> 00:07:52.430
You have to have it there, and
it's actually part of this.

00:07:52.430 --> 00:07:56.810
So always remember, you have
to add the MIME type.

00:07:56.810 --> 00:07:57.860
So we've got some content.

00:07:57.860 --> 00:07:59.290
That's what we're
going to upload.

00:07:59.290 --> 00:08:02.490
Now, files in Drive, there's
some metadata

00:08:02.490 --> 00:08:03.780
associated with them.

00:08:03.780 --> 00:08:06.950
Title, whether they're starred,
permissions, owners,

00:08:06.950 --> 00:08:09.260
that kind of thing, in addition

00:08:09.260 --> 00:08:10.430
to some binary content.

00:08:10.430 --> 00:08:12.760
So this is the binary
content part.

00:08:12.760 --> 00:08:16.390
Now, in the metadata when we
insert this file, we have to

00:08:16.390 --> 00:08:17.360
make sure two things.

00:08:17.360 --> 00:08:21.830
One, it has the right title,
which you'll see down below,

00:08:21.830 --> 00:08:25.700
and two, we set the parent to
be the App Data folder.

00:08:25.700 --> 00:08:26.580
That's absolutely key.

00:08:26.580 --> 00:08:29.020
If we don't set the parent to
the App Data folder, then it

00:08:29.020 --> 00:08:30.280
just won't go there.

00:08:30.280 --> 00:08:31.280
So how do we do that?

00:08:31.280 --> 00:08:35.330
Well, it needs a list
of parents.

00:08:35.330 --> 00:08:36.659
A list of parent reference.

00:08:36.659 --> 00:08:39.440
Now, a parent reference is
just really a container

00:08:39.440 --> 00:08:40.789
which has an ID.

00:08:40.789 --> 00:08:45.340
So I create that list, I create
a new list, and I add

00:08:45.340 --> 00:08:46.620
the parent reference.

00:08:46.620 --> 00:08:48.470
Now, you'll notice here
that I'm calling new

00:08:48.470 --> 00:08:49.720
ParentReference.setId.

00:08:51.830 --> 00:08:52.530
How can I do that?

00:08:52.530 --> 00:08:56.350
Well, this has some kind of
builder pattern so that most

00:08:56.350 --> 00:08:59.270
of the setter methods that
I can call on this parent

00:08:59.270 --> 00:09:01.670
reference instance actually
return the instance itself.

00:09:01.670 --> 00:09:04.650
So I can change these together
to make it much more

00:09:04.650 --> 00:09:06.930
comfortable, and much more
readable, and just for me to

00:09:06.930 --> 00:09:08.990
write less code, which
is always good.

00:09:08.990 --> 00:09:17.040
So I add that, and then I create
a new file, so the

00:09:17.040 --> 00:09:20.650
drive.file resource, and I set
my attributes that I want.

00:09:20.650 --> 00:09:23.920
So as I say, again, using this
kind of builder pattern, you

00:09:23.920 --> 00:09:27.370
set title to the title and I
set parents to the parents.

00:09:27.370 --> 00:09:32.780
OK, this file resource is
generated from the discovery

00:09:32.780 --> 00:09:34.850
document, so it already has all
the method's you're going

00:09:34.850 --> 00:09:38.010
to need, and it's always up
to date, which is great.

00:09:38.010 --> 00:09:42.230
So I do that, and finally,
I need to insert

00:09:42.230 --> 00:09:44.980
that into Drive itself.

00:09:44.980 --> 00:09:48.300
So this calls the API method
of files.insert.

00:09:48.300 --> 00:09:51.980
Service is my instance of the
Drive service that's been

00:09:51.980 --> 00:09:53.740
authorized.

00:09:53.740 --> 00:09:57.460
And I insert it with-- the first
argument is the file

00:09:57.460 --> 00:10:01.080
itself, the metadata, and the
second argument is the binary

00:10:01.080 --> 00:10:03.000
content that I created
earlier.

00:10:03.000 --> 00:10:05.770
And then I have to remember
to call execute.

00:10:05.770 --> 00:10:08.970
This actually returns another
file, so I'm resetting it to

00:10:08.970 --> 00:10:10.390
be the same variable.

00:10:10.390 --> 00:10:12.320
So that's the first
part of it.

00:10:12.320 --> 00:10:15.450
And after that, I give the idea
of the file I've just

00:10:15.450 --> 00:10:18.240
created and I send a
message. showToast.

00:10:18.240 --> 00:10:19.840
We can look down here.

00:10:19.840 --> 00:10:23.075
showToast is just a
method to show a

00:10:23.075 --> 00:10:24.110
notification to the user.

00:10:24.110 --> 00:10:25.840
And you saw them popping up.

00:10:25.840 --> 00:10:27.780
It just makes sure it runs from
the right place in the

00:10:27.780 --> 00:10:31.030
right thread so I don't have to
keep writing that code out.

00:10:31.030 --> 00:10:38.340
So if I were to run that again
up until where we were there--

00:10:38.340 --> 00:10:39.590
I'll run that again.

00:10:42.620 --> 00:10:44.170
OK.

00:10:44.170 --> 00:10:46.910
Hopefully we should get a prompt
for the account user.

00:10:46.910 --> 00:10:49.630
This is all part of
the quick start.

00:10:49.630 --> 00:10:51.810
When you get an account user,
you can either ask the user

00:10:51.810 --> 00:10:52.610
every time.

00:10:52.610 --> 00:10:56.080
That's perhaps not the
best user interface.

00:10:56.080 --> 00:10:57.320
It might be better
to store this in

00:10:57.320 --> 00:10:59.060
configuration, however you want.

00:10:59.060 --> 00:11:01.800
But always please, please,
please give the user the

00:11:01.800 --> 00:11:04.100
chance to choose which account
they want to use for that,

00:11:04.100 --> 00:11:07.870
otherwise they will go crazy.

00:11:07.870 --> 00:11:09.590
So we do that.

00:11:09.590 --> 00:11:12.280
It will do nothing now, apart
from waiting for me to click

00:11:12.280 --> 00:11:13.010
the button.

00:11:13.010 --> 00:11:14.900
And if you just see the
first pop up that

00:11:14.900 --> 00:11:19.160
comes, there we go.

00:11:19.160 --> 00:11:20.200
Created.

00:11:20.200 --> 00:11:21.240
So that's actually [INAUDIBLE]

00:11:21.240 --> 00:11:22.760
go off and do the rest
of the script.

00:11:22.760 --> 00:11:25.950
So that's actually created a
file in our app data folder.

00:11:25.950 --> 00:11:29.350
And let's have a look at
what that looks like.

00:11:29.350 --> 00:11:33.960
Inside Google Drive itself,
hidden behind the gear we have

00:11:33.960 --> 00:11:34.660
Manage Apps.

00:11:34.660 --> 00:11:39.260
Now, Manage Apps is a dialogue
that allows you to configure

00:11:39.260 --> 00:11:41.000
what has access to your drive.

00:11:41.000 --> 00:11:43.730
Every application, whether it's
an Android app, whether

00:11:43.730 --> 00:11:47.810
it's a web app, whatever has a
drive token, or you've use

00:11:47.810 --> 00:11:50.570
authorized for a drive token
will appear here.

00:11:50.570 --> 00:11:53.540
And your users can use this
dialogue to revoke access, or

00:11:53.540 --> 00:11:55.530
do whatever they want
to your application.

00:11:55.530 --> 00:11:59.090
In this case, you'll see here
that we have now hidden app

00:11:59.090 --> 00:12:00.740
data, 1 KB.

00:12:00.740 --> 00:12:03.480
So I've created this
app data file, and

00:12:03.480 --> 00:12:04.900
it's now present there.

00:12:04.900 --> 00:12:07.500
And as I said, I can't
see it as the user.

00:12:07.500 --> 00:12:10.800
But what I can do is go into
options and I can delete the

00:12:10.800 --> 00:12:13.100
hidden app data.

00:12:13.100 --> 00:12:15.810
So I delete it now, and the
config file's been deleted.

00:12:15.810 --> 00:12:18.260
So if I rerun my script,
it will recreate it.

00:12:18.260 --> 00:12:21.260
OK, that's the first part and
probably the most important.

00:12:21.260 --> 00:12:23.020
How do you create an
app data file?

00:12:23.020 --> 00:12:24.080
So two components.

00:12:24.080 --> 00:12:27.320
The mets data, the file itself,
upload them to the

00:12:27.320 --> 00:12:29.830
correct folder, which
is app data.

00:12:29.830 --> 00:12:33.870
Now, app data, we use it
as a string, as an ID.

00:12:33.870 --> 00:12:36.230
It's actually an alias.

00:12:36.230 --> 00:12:38.350
This is a real folder
with a regular ID.

00:12:38.350 --> 00:12:41.820
So what you can do is you can
call a get on the app data

00:12:41.820 --> 00:12:44.440
folder, and you can actually
find out what its ID is.

00:12:44.440 --> 00:12:46.590
This will make things quicker.

00:12:46.590 --> 00:12:48.170
Obviously we have to do
the lookup on the

00:12:48.170 --> 00:12:50.190
back end for app data.

00:12:50.190 --> 00:12:52.410
If you store that ID, then
we wouldn't need to

00:12:52.410 --> 00:12:52.970
do that look up.

00:12:52.970 --> 00:12:56.280
So it's just quicker there.

00:12:56.280 --> 00:12:57.990
Again, if you have a place
to store it, it's

00:12:57.990 --> 00:13:00.750
useful to store that.

00:13:00.750 --> 00:13:01.150
Right.

00:13:01.150 --> 00:13:03.365
So that's the first thing we've
done, created that.

00:13:03.365 --> 00:13:07.600
The next thing I want to show
you is how do you get files

00:13:07.600 --> 00:13:08.980
out of your app data folder?

00:13:08.980 --> 00:13:12.200
Well, you can call get
if you know the ID.

00:13:12.200 --> 00:13:14.320
In more situations than
that, you probably

00:13:14.320 --> 00:13:15.830
don't know the ID.

00:13:15.830 --> 00:13:17.450
You might want to find it.

00:13:17.450 --> 00:13:19.890
Now, how would you
find it there?

00:13:19.890 --> 00:13:22.710
Well, I'm going to use two
criteria to find it.

00:13:22.710 --> 00:13:27.600
The first one is a file has to
be in the app data folder.

00:13:27.600 --> 00:13:28.600
We can use that.

00:13:28.600 --> 00:13:31.020
And the second one is we're
going to make sure it's called

00:13:31.020 --> 00:13:33.530
the same thing as what
we called it up here.

00:13:33.530 --> 00:13:35.100
Configuration file.

00:13:35.100 --> 00:13:39.180
OK, so the method of the
API I'm going to use is

00:13:39.180 --> 00:13:41.190
drive.files.list.

00:13:41.190 --> 00:13:43.830
OK, first thing I do is
create a request.

00:13:43.830 --> 00:13:46.340
I'm not executing the request
immediately, because I need to

00:13:46.340 --> 00:13:49.470
modify the request to add
my query parameters so

00:13:49.470 --> 00:13:50.890
I can look it up.

00:13:50.890 --> 00:13:51.660
OK?

00:13:51.660 --> 00:13:53.210
Now, the query parameters
I'm going to set

00:13:53.210 --> 00:13:56.500
are this query here.

00:13:56.500 --> 00:13:57.530
And just talk about that.

00:13:57.530 --> 00:13:59.180
App data in parents.

00:13:59.180 --> 00:14:01.920
This is saying, this file
must have a parent that

00:14:01.920 --> 00:14:03.240
is called app data.

00:14:03.240 --> 00:14:05.780
Again, you could substitute the
real ID of the app data

00:14:05.780 --> 00:14:08.000
folder if you have
that in there.

00:14:08.000 --> 00:14:11.970
And which joins this, the
title equals our title.

00:14:11.970 --> 00:14:14.960
So I'm looking for a file
in app data which

00:14:14.960 --> 00:14:16.650
has the right title.

00:14:16.650 --> 00:14:19.150
And of course this is
a list, so it might

00:14:19.150 --> 00:14:20.570
return more than one.

00:14:20.570 --> 00:14:23.500
It might return a few if you've
got them, but this is

00:14:23.500 --> 00:14:24.900
your folder.

00:14:24.900 --> 00:14:26.890
You know what's in there.

00:14:26.890 --> 00:14:30.680
If you have two in there, it's
because you've created two.

00:14:30.680 --> 00:14:31.940
You should probably
know there.

00:14:31.940 --> 00:14:36.040
But this sample doesn't
take care of that.

00:14:36.040 --> 00:14:39.900
Once we've set the queue
parameter, we can execute our

00:14:39.900 --> 00:14:43.700
modified request and call
get items on the result.

00:14:43.700 --> 00:14:45.330
Now, get items, again,
this isn't

00:14:45.330 --> 00:14:47.110
checking for errors properly.

00:14:47.110 --> 00:14:51.770
Gets items is a list of file,
drive.file types.

00:14:51.770 --> 00:14:54.910
So exactly the thing that we put
in in the first place, we

00:14:54.910 --> 00:14:56.160
get a list of them back.

00:14:58.830 --> 00:15:01.180
This might be empty if we don't
have it, if we haven't

00:15:01.180 --> 00:15:04.070
previously created anything.

00:15:04.070 --> 00:15:07.610
In that case, what we
do below is we check

00:15:07.610 --> 00:15:09.880
the size of the array.

00:15:09.880 --> 00:15:12.160
The size of the list is greater
than zero, and if it

00:15:12.160 --> 00:15:13.960
is, we just blindly take
the first one.

00:15:13.960 --> 00:15:16.190
Again, as I say, that could go
totally wrong if you've got

00:15:16.190 --> 00:15:21.120
more them one, but it is
your stuff, so you

00:15:21.120 --> 00:15:23.780
really should know.

00:15:23.780 --> 00:15:26.295
And then we're going to put a
message found if we found it,

00:15:26.295 --> 00:15:29.710
and not found if we
didn't find it.

00:15:29.710 --> 00:15:31.670
It's going to be found, because
obviously we just

00:15:31.670 --> 00:15:33.810
created it in the
section above.

00:15:33.810 --> 00:15:39.090
So if I'm to run this again
this time, sorry, you're

00:15:39.090 --> 00:15:40.470
getting pretty bored of
looking at this demo.

00:15:40.470 --> 00:15:43.070
But I just want to highlight
where it's got to.

00:15:48.270 --> 00:15:49.590
OK.

00:15:49.590 --> 00:15:51.140
So creative.

00:15:51.140 --> 00:15:53.550
And then it should say found,
and there we go.

00:15:53.550 --> 00:15:54.420
it says found.

00:15:54.420 --> 00:15:57.970
So we've listed your app data
folder and taken, using a

00:15:57.970 --> 00:16:01.220
query of the file name that we
want, which is stored in the

00:16:01.220 --> 00:16:02.460
title parameter.

00:16:02.460 --> 00:16:06.760
So that's how do you find the
file you've made in your

00:16:06.760 --> 00:16:07.210
configuration.

00:16:07.210 --> 00:16:09.600
So we created it, and
we've fetched it

00:16:09.600 --> 00:16:11.865
back, and using a query.

00:16:11.865 --> 00:16:13.000
OK, great.

00:16:13.000 --> 00:16:17.290
The third and final thing I want
to show here is how to

00:16:17.290 --> 00:16:19.370
update the data.

00:16:19.370 --> 00:16:21.790
So that's really useful,
configuration changes in one

00:16:21.790 --> 00:16:24.300
place you want to update
it, so you put some new

00:16:24.300 --> 00:16:25.680
configuration values.

00:16:25.680 --> 00:16:28.280
This time I'm actually going
to put some JSON in there.

00:16:28.280 --> 00:16:32.070
I've hard coded a bit of
JSON into a string.

00:16:32.070 --> 00:16:35.860
For those of you who are wise
and watching closely, you'll

00:16:35.860 --> 00:16:39.080
see that my MIME type is still
text plain, which is wrong.

00:16:39.080 --> 00:16:41.500
The MIME type for JSON
should be application

00:16:41.500 --> 00:16:42.870
forward slash JSON.

00:16:42.870 --> 00:16:43.610
But that's OK.

00:16:43.610 --> 00:16:46.280
For the purposes of this demo,
it doesn't matter.

00:16:46.280 --> 00:16:48.270
It's likely that you won't
change the MIME type, you'll

00:16:48.270 --> 00:16:49.490
just change the content.

00:16:49.490 --> 00:16:52.770
So we create another byte array

00:16:52.770 --> 00:16:55.830
content using this string.

00:16:55.830 --> 00:16:58.380
Obviously you would use-- you
have a data structure.

00:16:58.380 --> 00:17:01.520
You might have a config object
that serializes itself to

00:17:01.520 --> 00:17:03.570
JSON, XML, whatever.

00:17:03.570 --> 00:17:04.490
YAML.

00:17:04.490 --> 00:17:06.310
A million different things
you could use.

00:17:06.310 --> 00:17:09.900
And remember, this is not
just for android.

00:17:09.900 --> 00:17:12.260
It would have to be a format
that you could parse easily on

00:17:12.260 --> 00:17:15.450
your iOS app, or your web
app, or whatever.

00:17:15.450 --> 00:17:20.450
So using a generic one like
JSON is pretty good here.

00:17:20.450 --> 00:17:24.060
So we create a new one, and
again this time we call the

00:17:24.060 --> 00:17:26.940
method files.update--

00:17:26.940 --> 00:17:28.170
drive.files.update.

00:17:28.170 --> 00:17:30.650
And that takes three parameters
this time.

00:17:30.650 --> 00:17:33.750
The first one is the idea that
you want to update, which of

00:17:33.750 --> 00:17:38.400
course is the same ID of the
file we've had-- config.getId.

00:17:38.400 --> 00:17:39.990
Then the file metadata.

00:17:39.990 --> 00:17:41.970
Now, this hasn't changed, so
I'm just going to pass the

00:17:41.970 --> 00:17:45.320
thing I got back in there, and
that's going to be fine.

00:17:45.320 --> 00:17:46.950
And again, the new content.

00:17:46.950 --> 00:17:49.220
And then I'm going to show
the message updated.

00:17:49.220 --> 00:17:51.270
So if we just run this
for the last time.

00:17:59.150 --> 00:18:00.400
OK.

00:18:03.330 --> 00:18:04.370
So we get the first message.

00:18:04.370 --> 00:18:05.750
We've created it.

00:18:05.750 --> 00:18:06.400
Not found.

00:18:06.400 --> 00:18:08.420
They're not found.

00:18:08.420 --> 00:18:10.370
OK.

00:18:10.370 --> 00:18:12.390
So this time it failed
to find it.

00:18:12.390 --> 00:18:15.090
Shall we give it a proper go,
so that we can make sure it

00:18:15.090 --> 00:18:16.340
does actually work?

00:18:19.090 --> 00:18:20.340
Let's take that off.

00:18:35.520 --> 00:18:36.770
Found.

00:18:38.660 --> 00:18:40.770
So if you were watching last
time, you'll know that I ended

00:18:40.770 --> 00:18:43.370
up with a 404 not found, so I
really just couldn't do that

00:18:43.370 --> 00:18:44.260
again this time.

00:18:44.260 --> 00:18:47.120
That would have been too
unfair on you guys.

00:18:47.120 --> 00:18:48.090
So what have we done?

00:18:48.090 --> 00:18:52.130
We've created a file that you
can use on any platform,

00:18:52.130 --> 00:18:55.630
hidden from the user, that
contains configuration data.

00:18:55.630 --> 00:18:57.000
In any format you want.

00:18:57.000 --> 00:18:59.240
It can be any binary
format, any

00:18:59.240 --> 00:19:01.130
proprietary format you have.

00:19:01.130 --> 00:19:05.450
You can use that for config,
application state, save games,

00:19:05.450 --> 00:19:07.910
history, the list is endless.

00:19:07.910 --> 00:19:10.220
Any data you want to be
available everywhere.

00:19:10.220 --> 00:19:11.580
So we've created that.

00:19:11.580 --> 00:19:14.620
We've then fetched it back from
Drive, and I've shown you

00:19:14.620 --> 00:19:15.850
how to update it.

00:19:15.850 --> 00:19:21.030
You'll see that's just a
tiny amount of code.

00:19:21.030 --> 00:19:25.770
I've got 60, 70 lines including
the comments now.

00:19:25.770 --> 00:19:27.700
Any Java program will tell
you that that's a

00:19:27.700 --> 00:19:28.860
tiny amount of code.

00:19:28.860 --> 00:19:30.690
So it's easy to do.

00:19:30.690 --> 00:19:32.860
I believe you should do it.

00:19:32.860 --> 00:19:36.930
No application I know would be
worse off by knowing about

00:19:36.930 --> 00:19:39.760
different instances running and
being able to do something

00:19:39.760 --> 00:19:40.660
about that for the user.

00:19:40.660 --> 00:19:43.840
It may be nothing, but just
knowing about it and having

00:19:43.840 --> 00:19:47.050
that option available, I think
will improve all your

00:19:47.050 --> 00:19:50.180
applications, mobile
and otherwise, OK?

00:19:50.180 --> 00:19:52.940
So if you have any questions
about this, please make sure

00:19:52.940 --> 00:19:56.910
you ask on Stack Overflow, or
join us on the community.

00:19:56.910 --> 00:19:58.800
And apart from that, thank
you very much for coming.

00:19:58.800 --> 00:20:00.260
Thank you for watching.

00:20:00.260 --> 00:20:03.320
Good luck with building these
Android applications, and

00:20:03.320 --> 00:20:05.600
other platform mobile
applications.

00:20:05.600 --> 00:20:06.520
Tell us about them.

00:20:06.520 --> 00:20:07.650
We're always keen to hear.

00:20:07.650 --> 00:20:08.560
Thanks very much.

00:20:08.560 --> 00:20:09.810
Take care.

00:20:16.490 --> 00:22:23.203
[MUSIC PLAYING]

