WEBVTT
Kind: captions
Language: en

00:00:00.690 --> 00:00:04.610
&gt;&gt; Well, can you give us a 4,000 foot view of what LayerBlox is?

00:00:04.610 --> 00:00:09.460
&gt;&gt; So, LayerBlox is a software generator for

00:00:09.460 --> 00:00:13.480
generating different variants of products in the same product line.

00:00:13.480 --> 00:00:17.199
&gt;&gt; So you, you want to be able to generate all of these, these variants.

00:00:19.230 --> 00:00:22.740
how, how how does your generator actually work?

00:00:22.740 --> 00:00:27.630
What does it take as input, and, and and, and, and how does it process that?

00:00:28.840 --> 00:00:30.000
&gt;&gt; That's a good question.

00:00:30.000 --> 00:00:32.310
So I should say first off that our generator is based on

00:00:33.676 --> 00:00:36.050
a pretty well understood idea from software engineering.

00:00:37.130 --> 00:00:39.345
That goes back to, really goes go back to the,

00:00:39.345 --> 00:00:42.036
the early 90s on product line generation.

00:00:42.036 --> 00:00:46.510
And so, each variant that we want to

00:00:46.510 --> 00:00:49.500
generate is a different program in the same product line.

00:00:49.500 --> 00:00:53.275
And we, we organize our product lines in terms of

00:00:53.275 --> 00:00:57.130
re-useable features that we put into a library.

00:00:57.130 --> 00:01:01.190
We've designed them according to a design idiom that, that, that makes them

00:01:01.190 --> 00:01:05.269
very composable with one another, which I'll demonstrate here in a little while.

00:01:05.269 --> 00:01:06.370
And what you do, then, to,

00:01:06.370 --> 00:01:09.760
to generate a variant is you write something called an assembly specification.

00:01:09.760 --> 00:01:13.740
Assembly specification explains how you put these features together in

00:01:13.740 --> 00:01:16.910
some novel combination to generate a particular variant.

00:01:16.910 --> 00:01:19.930
And it has some particular useful properties, which I think we'll be able to,

00:01:19.930 --> 00:01:21.610
to dig into by example here in a few minutes.

00:01:21.610 --> 00:01:26.905
But what's really nice about it is the features you can write once and

00:01:26.905 --> 00:01:28.640
reuse many times.

00:01:28.640 --> 00:01:32.250
And you can very easily understand by virtue of

00:01:32.250 --> 00:01:36.060
comparing these assembly specifications how two different variants in the same

00:01:36.060 --> 00:01:40.880
product line are common and how they differ and be very precise about that.

00:01:40.880 --> 00:01:44.990
&gt;&gt; And I'm curious about the, the title, LayerBlox.

00:01:44.990 --> 00:01:48.090
Is it, is this related to layered architectures?

00:01:48.090 --> 00:01:48.920
&gt;&gt; It is, it is.

00:01:48.920 --> 00:01:51.130
When you see some examples of assembly specifications,

00:01:51.130 --> 00:01:54.940
you'll see that the, the components that we're generating, each component,

00:01:54.940 --> 00:01:58.550
when I use the term variant, I mean program or component.

00:01:58.550 --> 00:02:04.030
So the when you see how, how a given component is generated,

00:02:04.030 --> 00:02:07.390
you'll notice that it's, the little program you write to say how to generate it,

00:02:07.390 --> 00:02:12.020
the recipe looks, is, is a very layered, very hierarchical form.

00:02:12.020 --> 00:02:14.900
It's related to layered architectures in another way too,

00:02:14.900 --> 00:02:17.110
in the sense that typically with layer architectures,

00:02:17.110 --> 00:02:21.340
you tend to think of of software built in stacks.

00:02:21.340 --> 00:02:25.440
Where you can understand a layer you can understand one layer,

00:02:25.440 --> 00:02:28.720
just in terms of the interface that it exports, without any

00:02:28.720 --> 00:02:32.670
knowledge of how it's implemented or of the layers that are underneath it.

00:02:32.670 --> 00:02:35.890
the, the assembly specifications that we write using LayerBlox have

00:02:35.890 --> 00:02:36.720
that same property.

00:02:37.750 --> 00:02:40.570
&gt;&gt; And, and just to, to clarify a bit.

00:02:40.570 --> 00:02:43.282
The layers that you're talking about are, and

00:02:43.282 --> 00:02:47.050
the generated code you're talking about, they go in that middle tier?

00:02:48.250 --> 00:02:51.520
&gt;&gt; No, they actually, in this case they could go in the middle tier.

00:02:51.520 --> 00:02:53.338
But in this case they go in, down in the data tier.

00:02:53.338 --> 00:02:58.130
&gt;&gt; Okay, so the, the tiering is kind of independent of the, of the layering?

00:02:58.130 --> 00:02:59.000
&gt;&gt; That's correct.

00:02:59.000 --> 00:02:59.970
That's correct.

00:02:59.970 --> 00:03:03.010
&gt;&gt; And in the diagram, there's also this reusable feature library.

00:03:03.010 --> 00:03:04.400
Can you say a word about that?

00:03:04.400 --> 00:03:06.670
&gt;&gt; So, you know, I mentioned earlier that when we have a number of

00:03:06.670 --> 00:03:09.960
different clients, their programs and their applications are very similar, but

00:03:09.960 --> 00:03:11.390
they're not exactly the same.

00:03:11.390 --> 00:03:14.370
What we found is that if we do a decomposition and

00:03:14.370 --> 00:03:17.650
design of our software by feature and I

00:03:17.650 --> 00:03:21.790
know you guys have spoken of feature diagrams and feature modeling in the past.

00:03:21.790 --> 00:03:24.690
When you, when you when you do a feature-based design,

00:03:24.690 --> 00:03:30.070
you actually can get reusable pieces of, they're not whole applications.

00:03:30.070 --> 00:03:31.410
They're little fragments, but the, but

00:03:31.410 --> 00:03:35.000
they're highly reusable and composable in ways that you can put them together to

00:03:35.000 --> 00:03:39.740
make different variants of a, of, of the same application very easily.

00:03:39.740 --> 00:03:40.920
So we did a,

00:03:40.920 --> 00:03:45.810
in the example we'll see we basically did a feature analysis to understand what

00:03:45.810 --> 00:03:49.030
are the different features that are put together to do forecasting.

00:03:50.130 --> 00:03:51.680
And based on that feature analysis,

00:03:51.680 --> 00:03:55.870
we we designed our reusable features around it and,

00:03:55.870 --> 00:03:59.160
and got this ability to, to, to compose them in this very, very nice way.

00:03:59.160 --> 00:04:03.680
&gt;&gt; So the, the unit of variation is kind of, a customer-visible feature?

00:04:03.680 --> 00:04:07.460
&gt;&gt; It may not be customer-visible, I, and, and ideally it, it could be, right?

00:04:07.460 --> 00:04:10.800
And in other product line work it is the unit of visib,

00:04:10.800 --> 00:04:15.270
of the unit is customer-visible feature.

00:04:15.270 --> 00:04:17.970
In our case, it's more implementation centric.

00:04:17.970 --> 00:04:20.781
But, but still, it's, it's much more on the science side than,

00:04:20.781 --> 00:04:23.930
then the customer side so in our case, we, we're doing forecasting.

00:04:23.930 --> 00:04:26.880
And there are some pretty com, complicated algorithmics that go with,

00:04:26.880 --> 00:04:27.690
with forecasting.

00:04:27.690 --> 00:04:32.220
So that domain is the domain at which we've we've done the future analysis.

