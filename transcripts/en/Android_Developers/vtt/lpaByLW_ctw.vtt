WEBVTT
Kind: captions
Language: en

00:00:02.961 --> 00:00:04.710
SPEAKER: Adding support
for a new platform

00:00:04.710 --> 00:00:08.039
feature in your app can be
a very repetitive process.

00:00:08.039 --> 00:00:09.960
Many times you will
switch back and forth

00:00:09.960 --> 00:00:13.680
between your code and a step by
step tutorial or documentation,

00:00:13.680 --> 00:00:16.679
especially where you're
not familiar with the API.

00:00:16.679 --> 00:00:18.720
That was the case when I
was implementing support

00:00:18.720 --> 00:00:21.090
for App Links, in a sample
app back when Android

00:00:21.090 --> 00:00:22.860
Marshmallow was released.

00:00:22.860 --> 00:00:24.540
App Links is a neat
feature that lets

00:00:24.540 --> 00:00:26.970
you verify a domain that is
listed in your activities

00:00:26.970 --> 00:00:28.290
content filters.

00:00:28.290 --> 00:00:30.600
From that moment
forward, whenever a user

00:00:30.600 --> 00:00:33.210
clicks on a URL
containing this domain,

00:00:33.210 --> 00:00:35.670
your app will open
automatically without showing

00:00:35.670 --> 00:00:37.440
the disambiguation dialog.

00:00:37.440 --> 00:00:40.140
I remember that in order
to make this API work,

00:00:40.140 --> 00:00:43.620
I had to make many small changes
in different parts of my app,

00:00:43.620 --> 00:00:46.640
which is why I was very curious
when I heard about the new App

00:00:46.640 --> 00:00:50.390
Links assistant that is part of
the Android Studio 2.3 release.

00:00:50.390 --> 00:00:53.700
Its promise-- to add App
Links support in your project

00:00:53.700 --> 00:00:57.310
with just a few clicks
without leaving the IDE.

00:00:57.310 --> 00:00:59.490
Let's see how that works out.

00:00:59.490 --> 00:01:02.040
I found the perfect sample
app for my experiment

00:01:02.040 --> 00:01:04.980
under Google/searchsamples
on Github.

00:01:04.980 --> 00:01:07.080
It's a very bare
bones recipe app.

00:01:07.080 --> 00:01:09.180
The main page doesn't
really do anything,

00:01:09.180 --> 00:01:12.150
but there is also a content
provider with several example

00:01:12.150 --> 00:01:15.510
recipes set up and ready to be
displayed in the detail page,

00:01:15.510 --> 00:01:18.090
implemented in recipe activity.

00:01:18.090 --> 00:01:20.400
All I need to do is
open the activity

00:01:20.400 --> 00:01:22.690
and call Show Recipe,
passing it content

00:01:22.690 --> 00:01:26.680
URI which matches a recipe
in the content provider.

00:01:26.680 --> 00:01:29.490
Now, imagine that I'm also
running a website for my app,

00:01:29.490 --> 00:01:31.830
and I'd like my users to
be able to share and open

00:01:31.830 --> 00:01:35.280
links to recipes in the same
way, regardless of which device

00:01:35.280 --> 00:01:36.900
they are using.

00:01:36.900 --> 00:01:39.435
Let's see how long it takes to
implement this using the App

00:01:39.435 --> 00:01:41.280
Links assistant.

00:01:41.280 --> 00:01:43.530
You'll find the assistant
under the Tools menu,

00:01:43.530 --> 00:01:46.650
and it shows up as a panel
on the right side here.

00:01:46.650 --> 00:01:50.200
First step, I want to define
URL mappings in my app.

00:01:50.200 --> 00:01:53.280
I will add just one to connect
recipe URLs to the detail

00:01:53.280 --> 00:01:54.000
activity.

00:01:54.000 --> 00:01:56.760
I just have to fill in my
website's host name, and what

00:01:56.760 --> 00:01:58.140
path to match.

00:01:58.140 --> 00:02:02.160
I'll use the path prefix recipe
to also capture any recipe ID

00:02:02.160 --> 00:02:04.040
after the last path separator.

00:02:04.040 --> 00:02:06.890
And I want to launch
the recipe activity.

00:02:06.890 --> 00:02:09.150
The tool generates the
correct intent filter,

00:02:09.150 --> 00:02:11.100
and adds it to my manifest.

00:02:11.100 --> 00:02:13.050
I can even see a
preview of the changes

00:02:13.050 --> 00:02:15.690
and check that the URL
I need will get matched

00:02:15.690 --> 00:02:17.700
to the correct activity.

00:02:17.700 --> 00:02:22.020
Step 2, add logic to the
activity to handle the URL.

00:02:22.020 --> 00:02:25.170
I'll select the activity that I
specified in the previous step,

00:02:25.170 --> 00:02:28.500
and some code gets added
to my uncreate method.

00:02:28.500 --> 00:02:31.960
This is just to help you get the
necessary data from the intent.

00:02:31.960 --> 00:02:34.500
But remember that it's up
to you to actually handle it

00:02:34.500 --> 00:02:36.090
in your app.

00:02:36.090 --> 00:02:39.810
In my case, I want to load
and show the correct recipe.

00:02:39.810 --> 00:02:42.810
For that, I need the recipe
ID, which is the last path

00:02:42.810 --> 00:02:44.910
part in the URL.

00:02:44.910 --> 00:02:48.090
Now I'll just convert that to
a URI, pointing to my content

00:02:48.090 --> 00:02:51.270
provider, and pass
it on to Show Recipe.

00:02:51.270 --> 00:02:54.510
In some cases, such as this
one, when the activity's launch

00:02:54.510 --> 00:02:57.240
mode is set to single
top, you will also

00:02:57.240 --> 00:02:59.150
have to handle a
new intent delivered

00:02:59.150 --> 00:03:02.940
to an already running
instance of the activity.

00:03:02.940 --> 00:03:06.360
I will refactor the code I
just wrote into a new method

00:03:06.360 --> 00:03:09.270
and code that from our
new intent as well.

00:03:09.270 --> 00:03:12.450
Before I move on to configuring
App Links on my server,

00:03:12.450 --> 00:03:14.790
I just want to check that
everything I configured so far

00:03:14.790 --> 00:03:16.980
works on the device.

00:03:16.980 --> 00:03:19.440
I'll just use the App
Links tester in step 4

00:03:19.440 --> 00:03:24.030
to launch a URL pointing to the
grilled potato salad recipe.

00:03:24.030 --> 00:03:27.330
It correctly launches my
app, and shows the recipe.

00:03:27.330 --> 00:03:28.332
Great.

00:03:28.332 --> 00:03:29.790
You might have
noticed that there's

00:03:29.790 --> 00:03:33.330
a migration dialog that popped
up when I launch the URL.

00:03:33.330 --> 00:03:35.880
Getting rid of it and
launching directly into the app

00:03:35.880 --> 00:03:37.860
is the last part.

00:03:37.860 --> 00:03:41.400
Let's proceed with step 3,
generating the digital asset

00:03:41.400 --> 00:03:42.990
links file.

00:03:42.990 --> 00:03:44.940
You'll need a few
details about your app,

00:03:44.940 --> 00:03:48.030
such as the domain you're using
in your links, application

00:03:48.030 --> 00:03:50.520
ID, and the signing config.

00:03:50.520 --> 00:03:53.370
Most of these will normally
be pre-filled for you

00:03:53.370 --> 00:03:56.230
so you can just click
the Generate button.

00:03:56.230 --> 00:03:58.920
Now, you will need to place
this file under this path

00:03:58.920 --> 00:04:00.822
on the domain that you control.

00:04:00.822 --> 00:04:02.280
Please note that
this is where it's

00:04:02.280 --> 00:04:04.170
the easiest to make a mistake.

00:04:04.170 --> 00:04:06.390
The path must match exactly.

00:04:06.390 --> 00:04:09.750
The well-known folder must be
under the root of the domain,

00:04:09.750 --> 00:04:12.800
and the server must be using
a valid HTTPS certificate

00:04:12.800 --> 00:04:18.390
to serve the file even if your
App Links are only using HTTP.

00:04:18.390 --> 00:04:21.300
For testing my app, I'm
just using Github pages,

00:04:21.300 --> 00:04:24.630
which gives me an easy way of
hosting my asset links file

00:04:24.630 --> 00:04:28.290
with the correct
SSL certificate.

00:04:28.290 --> 00:04:31.080
Let's test the sample
link again in step 4.

00:04:31.080 --> 00:04:34.350
And the app launches, taking
me directly into the recipe.

00:04:34.350 --> 00:04:37.350
No need to click through
a dialog this time.

00:04:37.350 --> 00:04:40.260
That's App Links, fully added
to a sample app in just four

00:04:40.260 --> 00:04:43.530
steps, without looking
at the documentation.

00:04:43.530 --> 00:04:45.210
If you like the App
Links assistant,

00:04:45.210 --> 00:04:47.430
or if you have any
feedback, please let us

00:04:47.430 --> 00:04:49.890
know on our social channels.

00:04:49.890 --> 00:04:52.715
Thanks for watching, and for
more Android studio videos,

00:04:52.715 --> 00:04:54.470
click here.

