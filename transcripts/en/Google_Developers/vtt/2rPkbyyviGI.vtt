WEBVTT
Kind: captions
Language: en

00:00:00.105 --> 00:00:01.730
TIMOTHY JORDAN: Hi,
I'm Timothy Jordan.

00:00:01.730 --> 00:00:04.360
And this is an
introduction to Brillo.

00:00:04.360 --> 00:00:06.830
Our vision with Brillo is to
bring the simplicity and speed

00:00:06.830 --> 00:00:08.440
of software
development to hardware

00:00:08.440 --> 00:00:10.910
by joining together
three major components--

00:00:10.910 --> 00:00:14.100
an embedded OS based on
Android, core services that

00:00:14.100 --> 00:00:16.040
enable a great
getting-started experience

00:00:16.040 --> 00:00:17.880
and allow you to
operate at scale,

00:00:17.880 --> 00:00:20.800
and a developer kit with tools
to build, test, and debug

00:00:20.800 --> 00:00:21.920
your solution.

00:00:21.920 --> 00:00:25.007
Let's examine each area
in a little more detail.

00:00:25.007 --> 00:00:26.840
First, let's talk about
the operating system

00:00:26.840 --> 00:00:28.790
and the hardware that runs it.

00:00:28.790 --> 00:00:30.990
It's based on Android
and it's open source,

00:00:30.990 --> 00:00:32.960
so anybody can review the code.

00:00:32.960 --> 00:00:35.850
It's updated regularly on
two schedules, every six

00:00:35.850 --> 00:00:38.410
weeks for minor updates,
and every six months

00:00:38.410 --> 00:00:41.740
for long-term support,
or LTS, updates.

00:00:41.740 --> 00:00:43.840
Brillo builds from source,
with a board support

00:00:43.840 --> 00:00:46.290
package that adapts Brillo
to a particular board.

00:00:46.290 --> 00:00:48.040
Now, you shouldn't
need to muck with this.

00:00:48.040 --> 00:00:49.748
But it's there if you
really want to dive

00:00:49.748 --> 00:00:51.630
in with some custom stuff.

00:00:51.630 --> 00:00:53.820
ARM, Intel, and
MIPS architectures

00:00:53.820 --> 00:00:55.500
are supported,
with configurations

00:00:55.500 --> 00:00:57.860
as small as 128
megabytes of storage

00:00:57.860 --> 00:01:00.310
and 32 megabytes of RAM.

00:01:00.310 --> 00:01:02.655
We recommend a featured
Brillo-compatible board

00:01:02.655 --> 00:01:03.280
to get started.

00:01:03.280 --> 00:01:05.470
Now, these boards are
all verified and tested

00:01:05.470 --> 00:01:08.040
to work well with Brillo,
able to run the latest

00:01:08.040 --> 00:01:10.770
version of Brillo, and
supported with documentation,

00:01:10.770 --> 00:01:12.420
including code labs.

00:01:12.420 --> 00:01:14.380
This helps to provide a
consistent development

00:01:14.380 --> 00:01:18.339
experience, and helps your
product stay up to date.

00:01:18.339 --> 00:01:20.630
Next, let's look at the core
services and the developer

00:01:20.630 --> 00:01:21.830
console.

00:01:21.830 --> 00:01:23.590
Brillo works
seamlessly with Weave,

00:01:23.590 --> 00:01:25.980
which makes it easy
for users to get

00:01:25.980 --> 00:01:28.620
your device on the network
with a secure and consistent

00:01:28.620 --> 00:01:30.055
set-up experience.

00:01:30.055 --> 00:01:32.370
It lets your users
interact with their devices

00:01:32.370 --> 00:01:34.670
through their mobile
phone or desktop,

00:01:34.670 --> 00:01:37.250
allows your device to work
with Weave-enabled apps,

00:01:37.250 --> 00:01:39.110
and the Weave
protocol can extend

00:01:39.110 --> 00:01:43.010
to support a wide range
of connected devices.

00:01:43.010 --> 00:01:45.360
Brillo helps you collect
and aggregate usage data

00:01:45.360 --> 00:01:48.590
from your devices in the field
with your user's permission.

00:01:48.590 --> 00:01:50.920
You can then view and analyze
this data in the Weave

00:01:50.920 --> 00:01:53.180
developer console to
understand end user

00:01:53.180 --> 00:01:56.900
behavior and validate product
requirements and assumptions.

00:01:56.900 --> 00:01:59.840
For Brillo devices, crash
statistics and debug data

00:01:59.840 --> 00:02:02.070
can also be collected
from devices in the field

00:02:02.070 --> 00:02:04.850
and used to improve the
reliability of your products,

00:02:04.850 --> 00:02:07.350
again, with your
user's permission.

00:02:07.350 --> 00:02:10.110
Also for Brillo devices,
once a new build is uploaded,

00:02:10.110 --> 00:02:14.060
you can then apply it to some
or all the devices in the field.

00:02:14.060 --> 00:02:16.590
One last thing,
the developer kit.

00:02:16.590 --> 00:02:19.890
The BDK is based on the
Android.mk build architecture

00:02:19.890 --> 00:02:21.960
and runs on Ubuntu 14.04.

00:02:21.960 --> 00:02:23.970
It allows you to perform
incremental builds

00:02:23.970 --> 00:02:26.590
or build the entire
product from source.

00:02:26.590 --> 00:02:28.290
Testing techniques
available include

00:02:28.290 --> 00:02:32.070
local unit tests, individual
integration tests, or even

00:02:32.070 --> 00:02:34.640
the ability to use your
own continuous build

00:02:34.640 --> 00:02:37.530
and integration
testing infrastructure.

00:02:37.530 --> 00:02:39.840
And you can also use
the familiar adb tool

00:02:39.840 --> 00:02:43.020
over ethernet or USB to
test, inspect, and update

00:02:43.020 --> 00:02:46.549
your target device without
any special equipment.

00:02:46.549 --> 00:02:48.840
Now that you have a high-level
understanding of Brillo,

00:02:48.840 --> 00:02:51.860
why not dive in a little deeper
with this link, also included

00:02:51.860 --> 00:02:53.440
in the description below?

00:02:53.440 --> 00:02:56.400
Oh, and please give us
feedback so that together, we

00:02:56.400 --> 00:02:58.110
can make Brillo the
perfect solution

00:02:58.110 --> 00:03:00.440
for your next big thing.

