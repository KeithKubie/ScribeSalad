WEBVTT
Kind: captions
Language: en

00:00:09.522 --> 00:00:10.730
IBRAHIM ULUKAYA: Hi everyone.

00:00:10.730 --> 00:00:12.771
I am Ibrahim Ulukaya from
YouTube's API Developer

00:00:12.771 --> 00:00:15.860
Relations team joining
you from New York.

00:00:15.860 --> 00:00:18.830
And today we are talking
about resumable uploads.

00:00:18.830 --> 00:00:22.080
Resumable uploads is
an uploading protocol

00:00:22.080 --> 00:00:24.110
for Google APIs.

00:00:24.110 --> 00:00:29.476
It's easier to upload files
and save time and bandwidth

00:00:29.476 --> 00:00:33.870
in any case that if
your file is uploading,

00:00:33.870 --> 00:00:37.680
there is a transmission error
or a [INAUDIBLE] network error.

00:00:37.680 --> 00:00:41.910
It's especially useful if you
are transferring large files,

00:00:41.910 --> 00:00:45.490
or if you're on an
unreliable network,

00:00:45.490 --> 00:00:47.930
or you are using a device
with a low bandwidth,

00:00:47.930 --> 00:00:49.170
such as a mobile device.

00:00:51.910 --> 00:00:54.310
This protocol is
already [INAUDIBLE]

00:00:54.310 --> 00:00:56.290
in Google Libraries,
as well as you

00:00:56.290 --> 00:01:03.420
can use the normal JSON request
as long as you know the URL.

00:01:03.420 --> 00:01:06.760
So let's go to my laptop
and see [INAUDIBLE].

00:01:09.660 --> 00:01:14.100
If you try to use the JSON, to
go over this design diagram,

00:01:14.100 --> 00:01:16.530
you will first
initiate a request.

00:01:16.530 --> 00:01:21.280
You will just first send the
POST metadata and the content

00:01:21.280 --> 00:01:22.430
type you want to send.

00:01:22.430 --> 00:01:24.785
So if you are
inserting a video, you

00:01:24.785 --> 00:01:28.280
will say that you
sending video metadata

00:01:28.280 --> 00:01:31.957
and the content type is a video.

00:01:31.957 --> 00:01:33.790
Once your client
[INAUDIBLE] with the server

00:01:33.790 --> 00:01:37.620
this request, if the
request is successful,

00:01:37.620 --> 00:01:41.150
the server will return
back with a 200 response

00:01:41.150 --> 00:01:44.280
with the location
of your upload.

00:01:44.280 --> 00:01:48.090
So it will tell you the location
that your uploads will happen.

00:01:48.090 --> 00:01:51.210
Using this location,
then you can actually

00:01:51.210 --> 00:01:54.870
start sending uploads
either in chunks,

00:01:54.870 --> 00:01:58.650
or you can upload only in
one request, in one chunk.

00:01:58.650 --> 00:02:02.210
And you get to [INAUDIBLE]
on your content.

00:02:02.210 --> 00:02:04.390
If you decide to
go on in chunks,

00:02:04.390 --> 00:02:07.890
you will actually keep
receiving 308 requests

00:02:07.890 --> 00:02:11.970
that you actually still
have more chunks to go.

00:02:11.970 --> 00:02:13.750
Your chunk was successful.

00:02:13.750 --> 00:02:17.720
And then if you only
upload one chunk,

00:02:17.720 --> 00:02:19.910
or if you have many
chunks but you're

00:02:19.910 --> 00:02:24.090
uploading the final chunk, once
the chunk is uploaded as well,

00:02:24.090 --> 00:02:28.010
you will actually receive
a 200 successful response.

00:02:28.010 --> 00:02:31.760
With this, you understand
the upload is successful.

00:02:31.760 --> 00:02:34.590
And the other way, if your
upload was not successful,

00:02:34.590 --> 00:02:39.060
we'll also cover
that point as well.

00:02:39.060 --> 00:02:41.820
So let's go to the
developer pages,

00:02:41.820 --> 00:02:45.499
developer.google.com/youtube,
and there is a guide over

00:02:45.499 --> 00:02:46.790
there, using resumable uploads.

00:02:50.520 --> 00:02:54.140
And let's see
examples from that.

00:02:54.140 --> 00:02:58.940
So here's an example that you
just start with a POST request.

00:02:58.940 --> 00:03:01.960
Here is the URL for
the POST request,

00:03:01.960 --> 00:03:09.750
https://googleapis.com/upload/youtube/v3/videos.

00:03:09.750 --> 00:03:11.500
And you just say upload
type is resumable.

00:03:14.310 --> 00:03:17.770
You set its content length
as video content type.

00:03:17.770 --> 00:03:21.890
And it's upload content
type as video type.

00:03:21.890 --> 00:03:24.420
And you have the video metadata.

00:03:24.420 --> 00:03:28.040
And if the session
was successful,

00:03:28.040 --> 00:03:30.880
then it will return to
you with the location.

00:03:30.880 --> 00:03:33.880
And using this location,
you are actually

00:03:33.880 --> 00:03:36.210
sending a PUT
request [INAUDIBLE],

00:03:36.210 --> 00:03:39.260
and put in your
binary file data.

00:03:39.260 --> 00:03:42.660
It it's one chunk, then
you put it all like this.

00:03:42.660 --> 00:03:45.540
Or if you want to
go and actually

00:03:45.540 --> 00:03:48.960
chunk it into smaller
chunks, then you

00:03:48.960 --> 00:03:51.260
can actually give
it a content range,

00:03:51.260 --> 00:03:52.990
and say that you
are actually sending

00:03:52.990 --> 00:03:55.090
that range of the bytes.

00:03:55.090 --> 00:03:57.186
And you are actually
sending that bytes only.

00:04:01.380 --> 00:04:04.254
So if everything was
successful, as we mentioned,

00:04:04.254 --> 00:04:05.920
we are actually
returning a 200 request.

00:04:09.320 --> 00:04:12.050
If actually your upload
was not successful,

00:04:12.050 --> 00:04:17.529
but it can be still resumed--
your network could be down,

00:04:17.529 --> 00:04:22.570
or you may have received
one of the error responses.

00:04:22.570 --> 00:04:25.915
It could be one of the 500
responses, could be like 500

00:04:25.915 --> 00:04:31.040
Internal Server Error, Bad
Gateway, Service Unavailable,

00:04:31.040 --> 00:04:33.830
or Gateway Timeout.

00:04:33.830 --> 00:04:36.940
But if your response was
one of the 400 responses

00:04:36.940 --> 00:04:38.980
or any of the
other 500 responses

00:04:38.980 --> 00:04:44.200
we didn't mentioned here, then
your upload could be failed.

00:04:44.200 --> 00:04:46.180
The only way to check
it is actually you

00:04:46.180 --> 00:04:48.930
are sending a PUT request.

00:04:48.930 --> 00:04:51.670
But this time setting
its length to zero,

00:04:51.670 --> 00:04:56.940
and content which
is bytes star slash.

00:04:56.940 --> 00:05:00.650
So that content link, that
display-- you actually

00:05:00.650 --> 00:05:03.230
understand that you are trying
to check the status of upload,

00:05:03.230 --> 00:05:07.020
not try and upload more files.

00:05:07.020 --> 00:05:08.660
In response, you
will actually get--

00:05:08.660 --> 00:05:12.410
just as like any other
chunk upload responses--

00:05:12.410 --> 00:05:13.410
you will get the range.

00:05:13.410 --> 00:05:19.070
And you will understand to that
point which part of the file

00:05:19.070 --> 00:05:21.050
was uploaded already.

00:05:21.050 --> 00:05:24.060
But it may actually
return as a 404 response.

00:05:24.060 --> 00:05:28.857
That means that your session
ID was already expired.

00:05:28.857 --> 00:05:30.690
So by this way we will
suggest that once you

00:05:30.690 --> 00:05:34.710
start the initiation request,
keep sending the upload chunks

00:05:34.710 --> 00:05:38.090
right after that.

00:05:38.090 --> 00:05:42.420
We already checked
in-- this was a JSON.

00:05:42.420 --> 00:05:45.380
And if you want to actually
use just libraries,

00:05:45.380 --> 00:05:50.860
it's almost for
[INAUDIBLE] libraries.

00:05:50.860 --> 00:05:55.370
And here's a small diagram
explaining the resumable media

00:05:55.370 --> 00:05:57.750
upload [INAUDIBLE].

00:05:57.750 --> 00:06:00.840
That MediaHttpUploader
will actually

00:06:00.840 --> 00:06:03.430
do the whole process for you.

00:06:03.430 --> 00:06:06.280
You will only set the
uploads, and MediaHttpUploader

00:06:06.280 --> 00:06:08.080
will take it from there.

00:06:08.080 --> 00:06:10.030
It will send the HTTP request.

00:06:10.030 --> 00:06:13.380
If it fails, it will
actually back off from there

00:06:13.380 --> 00:06:15.980
and it will try again.

00:06:15.980 --> 00:06:19.370
So let's see from
one of our examples.

00:06:19.370 --> 00:06:23.325
And here is in our
github.com/youtube where all

00:06:23.325 --> 00:06:24.670
our open source examples are.

00:06:30.110 --> 00:06:35.020
So we create a media content
using our video file.

00:06:35.020 --> 00:06:37.680
Then we want to create
an insert request.

00:06:37.680 --> 00:06:40.320
And the insert request--
we put the metadata as well

00:06:40.320 --> 00:06:44.940
as the media content, we
just get our video file.

00:06:44.940 --> 00:06:46.760
Instead of just
executing this, we

00:06:46.760 --> 00:06:50.190
use the MediaHttpUploader,
which is the object that

00:06:50.190 --> 00:06:53.010
handles resumable uploads
for us, or uploads for us

00:06:53.010 --> 00:06:54.360
in general.

00:06:54.360 --> 00:06:57.010
So we get to the uploader.

00:06:57.010 --> 00:06:59.910
And to make it resumable,
we setDirectUpLoadEnabled

00:06:59.910 --> 00:07:04.850
to false, which means you
will use resumable uploads.

00:07:04.850 --> 00:07:07.760
Now once we execute,
the media uploader

00:07:07.760 --> 00:07:13.200
will take over and do
the resumable uploads.

00:07:13.200 --> 00:07:17.010
You can even implement
the progressListener

00:07:17.010 --> 00:07:18.880
with the
 MediaHttpUploaderProgressListener

00:07:18.880 --> 00:07:23.800
object and keep track
of the progress.

00:07:23.800 --> 00:07:25.980
You can even-- if you
deep dive from there

00:07:25.980 --> 00:07:28.090
you will be able to see that.

00:07:28.090 --> 00:07:30.380
You can actually get the
percentage of your upload

00:07:30.380 --> 00:07:33.750
and you can show it in your app.

00:07:33.750 --> 00:07:36.130
And that's all I
want to cover today.

00:07:36.130 --> 00:07:41.380
We just go over how to
upload the resumable upload

00:07:41.380 --> 00:07:44.700
either from JSON
or through using

00:07:44.700 --> 00:07:48.560
one of our client libraries.

00:07:48.560 --> 00:07:50.900
As always I want to plug
the Developer Relations

00:07:50.900 --> 00:07:54.110
team, either in YouTube
or in other departments,

00:07:54.110 --> 00:07:56.030
we are hiring almost
everywhere in the world.

00:07:56.030 --> 00:08:00.920
You can always check it from
developers.google.com/jobs.

00:08:00.920 --> 00:08:04.030
And this is Ibrahim
Ulukaya from New York.

