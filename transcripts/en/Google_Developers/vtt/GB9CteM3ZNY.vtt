WEBVTT
Kind: captions
Language: en

00:00:04.464 --> 00:00:07.450
AJA HAMMERLY: Hello!

00:00:07.450 --> 00:00:08.906
So this is Just
Enough Stackdriver

00:00:08.906 --> 00:00:10.030
to Help You Sleep at Night.

00:00:10.030 --> 00:00:11.670
Does everyone want to be here?

00:00:11.670 --> 00:00:12.670
In the right room?

00:00:12.670 --> 00:00:14.530
Awesome.

00:00:14.530 --> 00:00:15.740
So I'm Aja.

00:00:15.740 --> 00:00:19.280
I'm a Developer Advocate on
the Google Cloud Platform team.

00:00:19.280 --> 00:00:21.817
But before Google, I worked in
a large variety of companies.

00:00:21.817 --> 00:00:22.900
I worked at big companies.

00:00:22.900 --> 00:00:24.358
I worked at
medium-sized companies.

00:00:24.358 --> 00:00:26.180
I worked at a
early stage startup

00:00:26.180 --> 00:00:28.667
through their GA for--
actually that was five years

00:00:28.667 --> 00:00:29.750
through a couple releases.

00:00:29.750 --> 00:00:32.729
I also worked in consulting
for a couple years, as well.

00:00:32.729 --> 00:00:35.440
So I've had a lot of experience
doing a lot of different things

00:00:35.440 --> 00:00:37.630
with operations at
different size companies

00:00:37.630 --> 00:00:39.700
with different size-- with
different tech stacks.

00:00:39.700 --> 00:00:41.658
So I'm going to set some
expectations up front.

00:00:41.658 --> 00:00:43.110
This is an intro level talk.

00:00:43.110 --> 00:00:45.500
I'm going to cover the
absolute basics of the tools

00:00:45.500 --> 00:00:48.727
that I wish I had when one of
the many hats I was wearing

00:00:48.727 --> 00:00:49.310
was, "Oh yeah.

00:00:49.310 --> 00:00:50.970
You're doing the
Ops Engineering.

00:00:50.970 --> 00:00:53.990
Oh, and you're QA Manager
and you're Release Manager.

00:00:53.990 --> 00:00:56.150
Oh, and can you do a
little Dev work on the side

00:00:56.150 --> 00:00:57.710
because we're really strapped?"

00:00:57.710 --> 00:01:00.360
So we're going to
do the basics today.

00:01:00.360 --> 00:01:02.360
As part of that job, at
the early stage start-up

00:01:02.360 --> 00:01:04.260
especially, I had to
carry one of these.

00:01:04.260 --> 00:01:06.550
Who's had to carry pager
or cell phone at some point

00:01:06.550 --> 00:01:07.890
during their career?

00:01:07.890 --> 00:01:08.420
C'mon.

00:01:08.420 --> 00:01:08.920
Hands.

00:01:08.920 --> 00:01:09.760
Yeah.

00:01:09.760 --> 00:01:12.470
So to this day the sound
that our on-call phone made,

00:01:12.470 --> 00:01:14.450
that ring tone, will
stop me mid-sentence

00:01:14.450 --> 00:01:15.870
and I'll start doing this.

00:01:15.870 --> 00:01:18.346
Trying to figure out oh, do
I have to deal with that?

00:01:18.346 --> 00:01:19.470
Is that my phone going off?

00:01:19.470 --> 00:01:21.710
Do I have to go make
sure the site's still up?

00:01:21.710 --> 00:01:23.102
And I hate that.

00:01:23.102 --> 00:01:24.560
I really hate the
fact that I still

00:01:24.560 --> 00:01:26.209
have that visceral reaction.

00:01:26.209 --> 00:01:28.250
And that happened because
we had a lot of alerts.

00:01:28.250 --> 00:01:31.590
We had an awful lot of alerts
that didn't mean anything.

00:01:31.590 --> 00:01:34.180
And so I'm really passionate
now about helping people set up

00:01:34.180 --> 00:01:36.760
their applications so that
the alerts that they get

00:01:36.760 --> 00:01:38.380
are the ones that matter.

00:01:38.380 --> 00:01:41.240
But you get alerts when you
can take action about something

00:01:41.240 --> 00:01:42.560
before it becomes a disaster.

00:01:42.560 --> 00:01:44.710
Because I have restored
a database at 2:00 AM.

00:01:44.710 --> 00:01:46.307
That was not fun.

00:01:46.307 --> 00:01:48.140
And I also want to make
sure that no one has

00:01:48.140 --> 00:01:50.140
to be woken up at night
unless something is actually

00:01:50.140 --> 00:01:50.790
really wrong.

00:01:53.380 --> 00:01:55.662
So one of the
things that happened

00:01:55.662 --> 00:01:57.120
when I was working
at a startup was

00:01:57.120 --> 00:01:58.190
we had a bunch of
different tools.

00:01:58.190 --> 00:01:59.620
We had three different
monitoring systems.

00:01:59.620 --> 00:02:01.120
We had a tool for
log aggregation.

00:02:01.120 --> 00:02:03.645
We had another tool
for doing monitoring

00:02:03.645 --> 00:02:04.970
of the product-- of the system.

00:02:04.970 --> 00:02:07.240
We had tools for
debugging in production.

00:02:07.240 --> 00:02:08.870
Not recommended.

00:02:08.870 --> 00:02:11.080
And one of the things I
really like about Stackdriver

00:02:11.080 --> 00:02:12.860
is that it does all of
those things for you.

00:02:12.860 --> 00:02:14.760
There's one login and you
get all those features.

00:02:14.760 --> 00:02:17.260
You have monitoring, you have
your logging, error reporting,

00:02:17.260 --> 00:02:18.800
alerting.

00:02:18.800 --> 00:02:20.600
And you have
tracing and it works

00:02:20.600 --> 00:02:22.850
cross cloud, which is one
of the things I really like.

00:02:22.850 --> 00:02:26.790
So if you're on Amazon
currently, moving to GCP,

00:02:26.790 --> 00:02:28.620
you can have stuff
tracked in both places.

00:02:28.620 --> 00:02:31.110
Maybe you've got
some systems in GCP

00:02:31.110 --> 00:02:34.030
and some systems in another
provider, you can do that, too.

00:02:34.030 --> 00:02:36.790
And because I'm here at I/O, I
need to tell you all flat out,

00:02:36.790 --> 00:02:39.910
all the stuff is
currently in Beta.

00:02:39.910 --> 00:02:41.490
So hopefully my demos will work.

00:02:44.690 --> 00:02:47.621
So of all the apps I've worked
on, one of the big milestones

00:02:47.621 --> 00:02:49.870
that went along with going
to production in some form,

00:02:49.870 --> 00:02:52.120
whether that was our private
Beta, or our public Beta,

00:02:52.120 --> 00:02:53.650
or actually
releasing, launching,

00:02:53.650 --> 00:02:55.149
was we had a good
monitoring set up.

00:02:55.149 --> 00:02:57.700
We had to know once people who
weren't our friends and family

00:02:57.700 --> 00:02:59.330
were using our site.

00:02:59.330 --> 00:03:02.160
We had to know that the site was
up and that, if it wasn't up,

00:03:02.160 --> 00:03:04.581
we were going to
find out about it.

00:03:04.581 --> 00:03:06.330
And when I was doing
this, I said earlier,

00:03:06.330 --> 00:03:07.710
we had three monitoring systems.

00:03:07.710 --> 00:03:10.130
We had a monitoring system
that worked on our Rail stack.

00:03:10.130 --> 00:03:11.500
We had a monitoring
system that worked

00:03:11.500 --> 00:03:14.055
on the system level and tracked
things like disk usage and CPU.

00:03:14.055 --> 00:03:15.720
And then we had a
third monitoring system

00:03:15.720 --> 00:03:17.070
that its only job
was to make sure

00:03:17.070 --> 00:03:18.194
that the site was still up.

00:03:18.194 --> 00:03:20.650
And it just pinged the site
every couple minutes, all day,

00:03:20.650 --> 00:03:23.770
every day, and would alert
us if stuff went wrong.

00:03:23.770 --> 00:03:26.360
But we didn't
write the best code

00:03:26.360 --> 00:03:28.710
or I didn't write the best
code, let's just say that.

00:03:28.710 --> 00:03:31.232
And sometimes we'd have a
really bad day on the internet.

00:03:31.232 --> 00:03:32.940
And we'd have tons of
errors to be coming

00:03:32.940 --> 00:03:34.064
from all different systems.

00:03:34.064 --> 00:03:36.230
I would have no idea
what was actually wrong.

00:03:36.230 --> 00:03:38.730
Did a bug in the Rails
app fill the disk up?

00:03:38.730 --> 00:03:41.200
Or did the disk filling up
cause the Rails app to crash?

00:03:41.200 --> 00:03:43.450
And with having all those
alerts in different systems,

00:03:43.450 --> 00:03:45.616
it was really hard to get
a holistic picture of what

00:03:45.616 --> 00:03:47.220
was going on with the site.

00:03:47.220 --> 00:03:49.980
And so Stackdriver can do all
of those levels of monitoring.

00:03:49.980 --> 00:03:52.230
Application level monitoring,
system level monitoring,

00:03:52.230 --> 00:03:54.350
and drop-time checks.

00:03:54.350 --> 00:03:57.490
About uptime checks, I always--
when I've been launching sites,

00:03:57.490 --> 00:03:58.920
this is one of
first things we do.

00:03:58.920 --> 00:04:00.919
And I always just set it
up to check simple URL.

00:04:00.919 --> 00:04:02.760
Hey, is that still there?

00:04:02.760 --> 00:04:03.720
Sometimes I have it
check to see if there's

00:04:03.720 --> 00:04:05.386
specific text on the
bottom of the page.

00:04:05.386 --> 00:04:07.910
Stackdriver does this great.

00:04:07.910 --> 00:04:12.260
And of course, you can also do
things like check a given port.

00:04:12.260 --> 00:04:14.210
You can check a
specific sub-path.

00:04:14.210 --> 00:04:16.360
If you've got a--
perhaps you have

00:04:16.360 --> 00:04:17.860
a microservices
architecture and you

00:04:17.860 --> 00:04:19.519
have different sub-paths
or different paths

00:04:19.519 --> 00:04:21.920
on your site that are served
by different applications that

00:04:21.920 --> 00:04:23.294
are in parts of
your application,

00:04:23.294 --> 00:04:25.570
you can check all
those independently.

00:04:25.570 --> 00:04:27.170
And one of the
annoying things is

00:04:27.170 --> 00:04:29.630
that I've found bugs
with these uptime checks.

00:04:29.630 --> 00:04:32.110
I have found multiple bugs
at every single company I've

00:04:32.110 --> 00:04:33.487
worked at with an uptime check.

00:04:33.487 --> 00:04:35.320
From partner integrations
that went sideways

00:04:35.320 --> 00:04:37.960
because someone updated
their API without telling us.

00:04:37.960 --> 00:04:40.460
I found a disk that was full
and the system level monitoring

00:04:40.460 --> 00:04:41.070
went sideways.

00:04:41.070 --> 00:04:43.800
And so this is something I
really feel passionate about.

00:04:43.800 --> 00:04:44.930
And I especially fell
passionate about the fact

00:04:44.930 --> 00:04:46.384
that it's very,
very configurable.

00:04:46.384 --> 00:04:48.800
So I can have as many of these
as I need to feel confident

00:04:48.800 --> 00:04:51.980
when I'm monitoring a site.

00:04:51.980 --> 00:04:53.580
And uptime checks
wouldn't be useful

00:04:53.580 --> 00:04:55.450
if you couldn't get notified
when stuff went sideways.

00:04:55.450 --> 00:04:57.080
So lots of different
ways to get notified.

00:04:57.080 --> 00:04:58.330
You can get notified by email.

00:04:58.330 --> 00:05:00.141
You can get notified by SMS.

00:05:00.141 --> 00:05:01.640
If you use something
like PagerDuty,

00:05:01.640 --> 00:05:03.390
that's supported, too.

00:05:03.390 --> 00:05:05.530
You can also do Hipchat
or Slack or Campfire,

00:05:05.530 --> 00:05:08.072
if you use one of those for your
group conversations already.

00:05:08.072 --> 00:05:10.071
If you have the Google
Cloud Console mobile app,

00:05:10.071 --> 00:05:11.270
you can get notified there.

00:05:11.270 --> 00:05:12.644
And there's a web
hook, so if you

00:05:12.644 --> 00:05:14.880
want to hook this into
another notification

00:05:14.880 --> 00:05:18.930
system for your team,
you can do that as well.

00:05:18.930 --> 00:05:21.329
So now we've got uptime
check, next step, I'm a Dev,

00:05:21.329 --> 00:05:23.870
so what I care about is knowing,
is this awesome thing that I

00:05:23.870 --> 00:05:25.980
built, is it actually working?

00:05:25.980 --> 00:05:28.770
Preferably before the Ops
folks figure out that it's not.

00:05:28.770 --> 00:05:31.850
So this is an application
level monitoring.

00:05:31.850 --> 00:05:34.130
So I build a lot
of my stuff using

00:05:34.130 --> 00:05:35.820
off-the-shelf and
open-source tools.

00:05:35.820 --> 00:05:36.860
I use Node.

00:05:36.860 --> 00:05:37.830
I use Rails.

00:05:37.830 --> 00:05:38.450
I use Nginx.

00:05:38.450 --> 00:05:41.260
I use Apache, Mongo,
MySQL, Postgres.

00:05:41.260 --> 00:05:43.000
Done some stuff with RabbitMQ.

00:05:43.000 --> 00:05:44.632
And all of these
things are supported.

00:05:44.632 --> 00:05:46.340
If you have the
Monitoring Engine running

00:05:46.340 --> 00:05:48.720
on your instance,
you change one config

00:05:48.720 --> 00:05:53.830
file, you restart the agent, and
you magically get magically--

00:05:53.830 --> 00:05:56.750
programmatically get support for
things like inserts, updates,

00:05:56.750 --> 00:06:00.460
and deletes with MySQL, message
queue statuses with RabbitMQ.

00:06:00.460 --> 00:06:04.260
You get responses-- you get
requests stats with the Nginx.

00:06:04.260 --> 00:06:05.580
And all that's supported.

00:06:05.580 --> 00:06:10.180
And turning it on literally
takes less than five minutes.

00:06:10.180 --> 00:06:12.385
And even cooler, if
you're running in GCP,

00:06:12.385 --> 00:06:13.760
running in Google
Cloud Platform,

00:06:13.760 --> 00:06:15.322
we do some auto
discovery for you.

00:06:15.322 --> 00:06:17.530
We check and see what ports
are open on your machine.

00:06:17.530 --> 00:06:19.380
We check and see what
services are running.

00:06:19.380 --> 00:06:21.088
And we can even look
at the instance name

00:06:21.088 --> 00:06:23.174
and try to guess which
features you want.

00:06:23.174 --> 00:06:24.840
I spun up a MySQL
cluster, you are going

00:06:24.840 --> 00:06:27.440
to see in a couple more slides.

00:06:27.440 --> 00:06:32.180
And I spun it up cross
Cloud into EC2 and GCP,

00:06:32.180 --> 00:06:34.000
doing replication across.

00:06:34.000 --> 00:06:37.090
And on the GCP side, it's
like, oh, you called this MySQL

00:06:37.090 --> 00:06:39.700
and it's got the
MySQL daemon running,

00:06:39.700 --> 00:06:41.934
so we're going to turn on
MySQL monitoring for you

00:06:41.934 --> 00:06:44.100
so that you can pull in
stats on that automatically.

00:06:44.100 --> 00:06:45.683
You don't actually
have to turn it on.

00:06:45.683 --> 00:06:46.222
Lovely.

00:06:46.222 --> 00:06:48.680
Wonderful, wonderful surprise
in getting the demo together.

00:06:51.200 --> 00:06:54.080
But you remember thinking, hey,
my stack isn't on that list.

00:06:54.080 --> 00:06:54.670
Great.

00:06:54.670 --> 00:06:56.280
You can do custom
metrics and monitoring.

00:06:56.280 --> 00:06:57.020
It's really straight forward.

00:06:57.020 --> 00:06:59.311
There's great tutorials to
walk you through what format

00:06:59.311 --> 00:07:00.940
you need to get stuff in.

00:07:00.940 --> 00:07:03.670
And it will monitor
that for you.

00:07:03.670 --> 00:07:06.190
And of course, since
this is Google I/O

00:07:06.190 --> 00:07:08.440
and we're talking about
Google Cloud Platform,

00:07:08.440 --> 00:07:10.360
there's integration for
Google Cloud Platform.

00:07:10.360 --> 00:07:12.450
On App Engine, we pull a lot of
these things in automatically.

00:07:12.450 --> 00:07:14.430
We did the same with
Container Engine.

00:07:14.430 --> 00:07:16.336
On Compute Engine, we
do the auto discovery

00:07:16.336 --> 00:07:18.210
I just talked about and
installing the engine

00:07:18.210 --> 00:07:19.170
is very, very simple.

00:07:22.430 --> 00:07:27.040
So I'm now on detecting
application errors, I hope.

00:07:27.040 --> 00:07:28.347
I can also detect latency.

00:07:28.347 --> 00:07:29.805
Every app I have
worked on, there's

00:07:29.805 --> 00:07:30.820
been a couple end points.

00:07:30.820 --> 00:07:32.780
But those were the health
check for the app for me.

00:07:32.780 --> 00:07:34.404
If those are responding
quickly enough,

00:07:34.404 --> 00:07:36.710
customers were going to
have a good experience.

00:07:36.710 --> 00:07:38.500
And if those weren't
responding quickly,

00:07:38.500 --> 00:07:40.556
I was going to start
getting phone calls.

00:07:40.556 --> 00:07:42.680
And so you can do latency
monitoring on App Engine.

00:07:42.680 --> 00:07:44.500
And one of the things I
really like about this

00:07:44.500 --> 00:07:46.180
is that you can look
at the average, which

00:07:46.180 --> 00:07:47.721
is what a lot of
other tools support,

00:07:47.721 --> 00:07:51.120
but you can also look at the
95% case and the 5% case.

00:07:51.120 --> 00:07:54.010
One particular app I worked
on, we ran 98% of our traffic

00:07:54.010 --> 00:07:56.460
through one single URL.

00:07:56.460 --> 00:07:59.810
And most of the time,
97ish percent of the time

00:07:59.810 --> 00:08:01.860
it responded in less
than 100 milliseconds.

00:08:01.860 --> 00:08:02.640
And it needed to.

00:08:02.640 --> 00:08:04.014
That was really,
super important,

00:08:04.014 --> 00:08:06.460
otherwise everything was
going to feel very laggy.

00:08:06.460 --> 00:08:08.980
But one time or
two times in 100,

00:08:08.980 --> 00:08:10.210
it would take up to a minute.

00:08:10.210 --> 00:08:11.130
We knew why that was.

00:08:11.130 --> 00:08:13.340
It was a particular Edge
case through the code.

00:08:13.340 --> 00:08:15.290
And we decided it
wasn't worth fixing.

00:08:15.290 --> 00:08:18.590
But those outliers were
pulling our latency stats way,

00:08:18.590 --> 00:08:19.900
way down.

00:08:19.900 --> 00:08:22.304
And so being able to
monitor the 95% case

00:08:22.304 --> 00:08:23.970
would have been much
more helpful for me

00:08:23.970 --> 00:08:26.470
trying, as the Ops
Engineer and the QA person,

00:08:26.470 --> 00:08:29.080
trying to make sure that
we're doing the right thing.

00:08:29.080 --> 00:08:30.310
And of course, if
you're using App Engine,

00:08:30.310 --> 00:08:31.690
you can monitor either
your whole application

00:08:31.690 --> 00:08:32.910
or just your modules.

00:08:32.910 --> 00:08:34.659
And you can also monitor
by response time.

00:08:34.659 --> 00:08:36.210
Maybe you don't care if
your error message just

00:08:36.210 --> 00:08:37.400
take forever to render.

00:08:37.400 --> 00:08:38.750
Or maybe you do want
your error messages

00:08:38.750 --> 00:08:40.749
to render quickly because
you want to fail fast.

00:08:40.749 --> 00:08:43.727
All of that you can
monitor your latency on.

00:08:43.727 --> 00:08:46.060
So I've talked a lot about
application level monitoring,

00:08:46.060 --> 00:08:47.010
system level monitoring.

00:08:47.010 --> 00:08:49.176
This is the stuff that I
personally, sometimes think

00:08:49.176 --> 00:08:50.957
is boring but necessary.

00:08:50.957 --> 00:08:51.790
You have to have it.

00:08:51.790 --> 00:08:53.706
You have to know if your
disks are filling up.

00:08:53.706 --> 00:08:56.330
You have to know that you're
using your CPUs efficiently.

00:08:56.330 --> 00:08:58.050
So, of course, you can.

00:08:58.050 --> 00:08:59.610
You can monitor
disk usage and I/O.

00:08:59.610 --> 00:09:03.352
You can monitor memory usage
and swap, CP usage and steal.

00:09:03.352 --> 00:09:04.810
You can see what
your processes are

00:09:04.810 --> 00:09:08.350
doing, how many are running,
sleeping, zombie processes.

00:09:08.350 --> 00:09:10.430
You can monitor
your network traffic

00:09:10.430 --> 00:09:11.590
and open TCP connections.

00:09:11.590 --> 00:09:12.917
All of this stuff is available.

00:09:12.917 --> 00:09:14.750
You can see it on the
dashboard, by default.

00:09:14.750 --> 00:09:16.750
And this is all stuff
that you can set alerts up

00:09:16.750 --> 00:09:18.010
on if you want, as well.

00:09:18.010 --> 00:09:20.260
Some of these metrics are
only available by installing

00:09:20.260 --> 00:09:21.690
the Monitoring Agent.

00:09:21.690 --> 00:09:23.910
But the monitoring agent is
really simple to install.

00:09:23.910 --> 00:09:25.780
I installed it on a bunch of
different servers this week

00:09:25.780 --> 00:09:27.390
and in less than 10 minutes.

00:09:27.390 --> 00:09:30.260
And who here users Chef, Puppet,
Ansible, one of those tools

00:09:30.260 --> 00:09:31.247
to do the deployments?

00:09:31.247 --> 00:09:32.580
You can also install with those.

00:09:32.580 --> 00:09:34.079
There's instructions
on the website.

00:09:35.911 --> 00:09:37.910
And I've already talked
about this a little bit,

00:09:37.910 --> 00:09:39.180
but yeah, it works cross cloud.

00:09:39.180 --> 00:09:40.930
So if you're in a
variety of environments,

00:09:40.930 --> 00:09:43.221
you can have all of your
metrics come to one place, all

00:09:43.221 --> 00:09:44.770
of your monitor into one place.

00:09:44.770 --> 00:09:46.860
So you don't have to
manage multiple logins

00:09:46.860 --> 00:09:50.999
to multiple services to see how
your whole system is running.

00:09:50.999 --> 00:09:53.540
So I was talking a bit about
how certain things are monitored

00:09:53.540 --> 00:09:55.300
and I mentioned
something about alerting,

00:09:55.300 --> 00:09:57.274
but I didn't really get
into what that looks.

00:09:57.274 --> 00:09:59.190
So certain things are
monitored, but no alerts

00:09:59.190 --> 00:10:01.050
are set up by default.
But it's still useful

00:10:01.050 --> 00:10:03.590
because you can see the
dashboards that we have set up

00:10:03.590 --> 00:10:05.879
to check how your
system is doing.

00:10:05.879 --> 00:10:07.920
And there are default
dashboards through services

00:10:07.920 --> 00:10:08.886
like MySQL and NginX.

00:10:08.886 --> 00:10:10.260
There are also
default dashboards

00:10:10.260 --> 00:10:12.634
for things like App Engine,
Compute Engine, and Container

00:10:12.634 --> 00:10:13.135
Engine.

00:10:13.135 --> 00:10:15.260
And these are just our best
guess at what you want.

00:10:15.260 --> 00:10:16.520
You can customize
them as you need

00:10:16.520 --> 00:10:18.061
for your workflows,
your team, what's

00:10:18.061 --> 00:10:20.110
interesting to you,
the particular errors

00:10:20.110 --> 00:10:22.790
you know that your app has that
you want to keep an eye on.

00:10:22.790 --> 00:10:27.050
All that is available to you
to monitor in different ways.

00:10:27.050 --> 00:10:30.330
So here are some examples.

00:10:30.330 --> 00:10:32.880
So in the center there is
the App Engine Response

00:10:32.880 --> 00:10:35.700
Counterpoint Type, by code.

00:10:35.700 --> 00:10:36.740
We have uptime checks.

00:10:36.740 --> 00:10:39.031
On the left, you can see
there's a little green circle.

00:10:39.031 --> 00:10:40.069
Maybe you can see.

00:10:40.069 --> 00:10:41.860
And that's saying that
the uptime check has

00:10:41.860 --> 00:10:43.882
passed in its most recent pass.

00:10:43.882 --> 00:10:45.340
You see they have
different groups.

00:10:45.340 --> 00:10:48.200
There's some information
about CPU and block storage.

00:10:48.200 --> 00:10:51.340
At the very top, you can see
the current list of incidents.

00:10:51.340 --> 00:10:54.624
Luckily there were none, so
it gave me a green check mark.

00:10:54.624 --> 00:10:56.290
And here's a Container
Engine dashboard.

00:10:56.290 --> 00:10:59.030
Looks largely the same, but you
can see the GKE Container CPU

00:10:59.030 --> 00:11:00.650
usage on this one.

00:11:00.650 --> 00:11:02.620
The GCE CPU usage
Container Engine

00:11:02.620 --> 00:11:04.380
is built on Compute Engine.

00:11:04.380 --> 00:11:05.640
Block Storage is also listed.

00:11:05.640 --> 00:11:07.098
This particular
app doesn't use it,

00:11:07.098 --> 00:11:09.621
but I've just shown you a
default dashboard off the--

00:11:09.621 --> 00:11:11.120
what you get if you
just go straight

00:11:11.120 --> 00:11:13.453
into monitoring after you've
launched your app on Google

00:11:13.453 --> 00:11:14.020
Cloud.

00:11:14.020 --> 00:11:15.410
So lots of interesting stuff.

00:11:15.410 --> 00:11:17.604
We show this to you by default.

00:11:17.604 --> 00:11:19.770
But that's not interesting
because I just showed you

00:11:19.770 --> 00:11:21.010
static pictures of demos.

00:11:21.010 --> 00:11:23.470
So let's actually
do the real demo.

00:11:23.470 --> 00:11:25.960
This is the part where I
get to be slightly scared.

00:11:25.960 --> 00:11:27.310
[DEEP BREATH]

00:11:27.310 --> 00:11:29.675
So I want this tab.

00:11:29.675 --> 00:11:31.300
So let's just look
and see what we get.

00:11:31.300 --> 00:11:36.962
So this is for a MySQL cluster
replicated between AWS and GCP.

00:11:36.962 --> 00:11:38.920
There's also App Engine
app running against it,

00:11:38.920 --> 00:11:40.253
but they're not hooked together.

00:11:40.253 --> 00:11:45.352
So I've got my CP usage
on both GCP and EC2.

00:11:45.352 --> 00:11:47.810
You can see that I had some
incidents over the weekend that

00:11:47.810 --> 00:11:48.520
are resolved.

00:11:48.520 --> 00:11:51.780
That was as I was getting
these things set up.

00:11:51.780 --> 00:11:55.280
And I can do things like
go here to Resources

00:11:55.280 --> 00:11:57.810
and I can look at
the MySQL stats.

00:12:00.710 --> 00:12:03.320
And so this is a
dashboard for MySQL.

00:12:03.320 --> 00:12:05.440
It's showing me
some things here.

00:12:05.440 --> 00:12:07.360
I've got a bunch more.

00:12:07.360 --> 00:12:09.845
So you can see that I'm
in my two different zones.

00:12:09.845 --> 00:12:12.220
And these two machines are
running in two different cloud

00:12:12.220 --> 00:12:12.830
providers.

00:12:12.830 --> 00:12:13.996
They're all listed together.

00:12:13.996 --> 00:12:16.130
The health is all
there together.

00:12:16.130 --> 00:12:18.761
I can see my stats on
all the machines, side

00:12:18.761 --> 00:12:21.260
by side, just like they were
running with one cloud provider

00:12:21.260 --> 00:12:24.292
and I was using that cloud
provider's native tool set.

00:12:24.292 --> 00:12:26.500
And I want to share some of
the alerts I have set up,

00:12:26.500 --> 00:12:30.180
just to really drive
home the kinds of things

00:12:30.180 --> 00:12:32.170
that you can do.

00:12:32.170 --> 00:12:34.350
So I've got three
different sets of alerts.

00:12:34.350 --> 00:12:35.670
Each of these has two rules.

00:12:35.670 --> 00:12:38.736
That's one for the GCP side
and one for the AWS side.

00:12:38.736 --> 00:12:40.360
So the first one is
network monitoring.

00:12:43.960 --> 00:12:47.749
So network traffic above a
threshold for 15 minutes,

00:12:47.749 --> 00:12:48.540
that's one of them.

00:12:48.540 --> 00:12:50.570
And I'm checking that
on both AWS and EC2.

00:12:50.570 --> 00:12:51.860
There's a disk usage one.

00:12:51.860 --> 00:12:54.780
If the disk usage is increasing
too quickly, I want an alert.

00:12:54.780 --> 00:12:55.750
I don't want to
know when it's full,

00:12:55.750 --> 00:12:57.833
I want to know when it's
heading towards full so I

00:12:57.833 --> 00:12:59.837
can solve that problem
before it gets full.

00:12:59.837 --> 00:13:02.170
And the last one is I'm also
tracking the MySQL inserts.

00:13:02.170 --> 00:13:04.545
It happens to be that I'm not
actively inserting anything

00:13:04.545 --> 00:13:06.830
to this database
right now, but if I

00:13:06.830 --> 00:13:08.740
have a certain number
of inserts, either over

00:13:08.740 --> 00:13:10.930
or under a threshold
for a period of time,

00:13:10.930 --> 00:13:11.980
it will alert me.

00:13:11.980 --> 00:13:14.210
So I can use the things
I know about my system

00:13:14.210 --> 00:13:17.270
to figure out what the envelope
edges of my system are,

00:13:17.270 --> 00:13:19.376
when I want to know when
things are going wrong.

00:13:19.376 --> 00:13:21.000
And in all of those,
there's two rules.

00:13:21.000 --> 00:13:22.532
The same alerting
policy happens.

00:13:22.532 --> 00:13:23.990
And if I want to
do something cool,

00:13:23.990 --> 00:13:27.690
I can show you--
I can edit these.

00:13:27.690 --> 00:13:28.440
Maybe?

00:13:28.440 --> 00:13:30.630
Yes.

00:13:30.630 --> 00:13:31.770
Yea internet.

00:13:31.770 --> 00:13:33.060
So here's the EC2 rule.

00:13:33.060 --> 00:13:35.360
Here's the GCE rule.

00:13:35.360 --> 00:13:38.030
I can add more
conditions, if I want.

00:13:38.030 --> 00:13:41.221
I can change my
notification method.

00:13:41.221 --> 00:13:42.970
And I can also include
some documentation,

00:13:42.970 --> 00:13:44.645
which is something I really
like because I eventually

00:13:44.645 --> 00:13:46.760
got-- finally got permission
to start passing off

00:13:46.760 --> 00:13:49.639
application level
monitoring to the Dev team.

00:13:49.639 --> 00:13:51.180
But sometimes they
would get an alert

00:13:51.180 --> 00:13:52.370
and their first thing to
do was pick up the phone

00:13:52.370 --> 00:13:53.650
and call me, because they
didn't know what to do.

00:13:53.650 --> 00:13:55.180
And here I can put some hints.

00:13:55.180 --> 00:13:57.456
Such as, if you get this
alert, try these commands.

00:13:57.456 --> 00:13:59.330
These are the debugging
steps, go to this web

00:13:59.330 --> 00:14:00.847
page on our internal site.

00:14:00.847 --> 00:14:02.430
And once you've
exhausted those steps,

00:14:02.430 --> 00:14:04.221
then you can pick up
the phone and escalate

00:14:04.221 --> 00:14:06.120
to Level 2 support.

00:14:06.120 --> 00:14:07.090
So that's awesome.

00:14:07.090 --> 00:14:07.960
And you have some monitoring.

00:14:07.960 --> 00:14:09.880
You're probably all
very excited about that.

00:14:09.880 --> 00:14:12.030
But not actually all that
interesting in the long term

00:14:12.030 --> 00:14:14.340
because that just tells you
when things are going wrong.

00:14:14.340 --> 00:14:15.500
What if you want to know
about the current state

00:14:15.500 --> 00:14:16.541
of your system right now.

00:14:16.541 --> 00:14:17.920
That's where logging comes in.

00:14:17.920 --> 00:14:19.180
Or you want to know
what's happened.

00:14:19.180 --> 00:14:21.388
Maybe you want to know how
many purchases you've had,

00:14:21.388 --> 00:14:23.620
or how many critical
errors you've had.

00:14:23.620 --> 00:14:25.080
So again, cross cloud.

00:14:25.080 --> 00:14:28.450
You can run this on AWS,
you can run this on EC2.

00:14:28.450 --> 00:14:31.670
Sensing a theme here.

00:14:31.670 --> 00:14:34.050
This agent, Blogging
Agent, is installed

00:14:34.050 --> 00:14:35.035
on App Engine for you.

00:14:35.035 --> 00:14:37.395
And you can install it on
any of our other services.

00:14:37.395 --> 00:14:39.770
There is some support for
logging on Container Engine, as

00:14:39.770 --> 00:14:41.899
well, out of the box.

00:14:41.899 --> 00:14:43.690
And you could also use
Google Cloud Logging

00:14:43.690 --> 00:14:45.940
API to stream events directly
from your application.

00:14:45.940 --> 00:14:47.481
If there's particular
events that you

00:14:47.481 --> 00:14:48.940
want that are in
your application,

00:14:48.940 --> 00:14:49.940
you can stream those in.

00:14:49.940 --> 00:14:53.060
I've done things like this
before to record purchases,

00:14:53.060 --> 00:14:54.757
record chargebacks.

00:14:54.757 --> 00:14:56.340
If we get into the
error handling code

00:14:56.340 --> 00:14:57.798
and I'm handling
an exception, I'll

00:14:57.798 --> 00:15:00.790
sometimes write out a bunch
of additional user state

00:15:00.790 --> 00:15:03.470
into the logs at that point, and
then let the exception actually

00:15:03.470 --> 00:15:06.340
cause the 500 error, just so
that I can have some better

00:15:06.340 --> 00:15:09.006
idea of what's going on.

00:15:09.006 --> 00:15:10.380
Once you have logs
in our system,

00:15:10.380 --> 00:15:12.755
you can browse, query, and
filter them in a web interface

00:15:12.755 --> 00:15:14.380
that I'll show you in a second.

00:15:14.380 --> 00:15:17.114
And you might be thinking, well,
my issues are too complicated.

00:15:17.114 --> 00:15:19.030
I have too many logs to
use the web interface.

00:15:19.030 --> 00:15:19.600
That's great.

00:15:19.600 --> 00:15:20.850
You can export it to BigQuery.

00:15:20.850 --> 00:15:23.580
And BigQuery was designed
at Google for use

00:15:23.580 --> 00:15:26.074
with filtering, aggregating,
and understanding logs.

00:15:26.074 --> 00:15:27.490
So it's really,
really good at it.

00:15:27.490 --> 00:15:29.870
If you know SQL, you
can use BigQuery.

00:15:29.870 --> 00:15:31.420
It's amazing.

00:15:31.420 --> 00:15:32.550
And it's really fast.

00:15:32.550 --> 00:15:35.010
I've thrown lots and
lots of data at it before

00:15:35.010 --> 00:15:37.010
and it goes very quickly.

00:15:37.010 --> 00:15:37.936
So Logging demo.

00:15:42.625 --> 00:15:43.570
Ha ha.

00:15:43.570 --> 00:15:45.445
So one of the first
things I want to show you

00:15:45.445 --> 00:15:47.050
is that you can
filter by log level.

00:15:47.050 --> 00:15:50.064
So if I do any log level,
I have just a whole bunch

00:15:50.064 --> 00:15:50.980
of regular long lines.

00:15:50.980 --> 00:15:52.830
And this is largely pulling
from syslog right now,

00:15:52.830 --> 00:15:54.350
but it's also pulling
from my application log.

00:15:54.350 --> 00:15:56.141
The application here
is a Rails application

00:15:56.141 --> 00:15:59.210
running on App Engine Flexible
Environment using our logging

00:15:59.210 --> 00:16:02.480
gem that hooks you up
to Google Cloud Logging.

00:16:02.480 --> 00:16:03.420
And I can filter here.

00:16:06.629 --> 00:16:08.670
And I have a bunch of
stuff about a routing error

00:16:08.670 --> 00:16:10.961
for a route that I apparently
have not implemented yet.

00:16:10.961 --> 00:16:12.777
So I should probably fix that.

00:16:12.777 --> 00:16:14.110
I can look at all sorts of logs.

00:16:14.110 --> 00:16:16.949
I can look at a request log.

00:16:16.949 --> 00:16:18.490
I'm going to do any
log level on that

00:16:18.490 --> 00:16:21.640
because I don't think I have
any errors in the request log.

00:16:21.640 --> 00:16:24.910
I can live stream logs
or I can pause logs.

00:16:24.910 --> 00:16:27.110
I can look at a given date
in a given time period.

00:16:29.730 --> 00:16:31.980
And you can look at a bunch
of our different services.

00:16:31.980 --> 00:16:33.380
So if you're running a
bunch of different services

00:16:33.380 --> 00:16:35.796
in the same project, you can
also filter by which service.

00:16:35.796 --> 00:16:38.134
Whether you want App
Engine, you can do this.

00:16:38.134 --> 00:16:40.550
You can also search, if you
have multiple App Engine apps.

00:16:40.550 --> 00:16:43.860
You can look at your BigQuery
logs, Pos SQL logs, Compute

00:16:43.860 --> 00:16:48.210
Engine, Container Engine, all of
that you can look at this way.

00:16:48.210 --> 00:16:50.990
So the log processor
is really cool.

00:16:50.990 --> 00:16:55.960
The other thing I was going
to show was-- Let's do this.

00:16:55.960 --> 00:16:57.820
You can also search.

00:16:57.820 --> 00:17:00.110
Pure text search.

00:17:00.110 --> 00:17:01.940
So this is a bunch
of error-- things

00:17:01.940 --> 00:17:03.220
that contain the string 500.

00:17:03.220 --> 00:17:05.540
You can also do searches.

00:17:05.540 --> 00:17:08.319
So there's a 200,
I can do searches.

00:17:08.319 --> 00:17:09.339
Show matching events.

00:17:09.339 --> 00:17:13.202
So show me all the
events that caused a 200.

00:17:13.202 --> 00:17:14.410
Apparently there weren't any.

00:17:14.410 --> 00:17:16.819
So lots of different things
you can do to slice and dice

00:17:16.819 --> 00:17:20.390
logs with Google Cloud Logging.

00:17:20.390 --> 00:17:22.440
So now you've got your logs.

00:17:22.440 --> 00:17:24.530
You found that critical
error that I had there.

00:17:24.530 --> 00:17:26.460
How do you deal with
that, especially if you

00:17:26.460 --> 00:17:28.210
have a bad day on the internet?

00:17:28.210 --> 00:17:31.020
So I've worked on two apps
that have DDoSed themselves.

00:17:31.020 --> 00:17:33.430
I'm hoping that at least
one person in this room

00:17:33.430 --> 00:17:36.307
has also had that
really, really bad day.

00:17:36.307 --> 00:17:37.890
And our logs filled
up so fast that we

00:17:37.890 --> 00:17:39.640
couldn't see what was going on.

00:17:39.640 --> 00:17:42.275
It was just stack trace, after
stack trace, after stack trace.

00:17:42.275 --> 00:17:43.650
And what we ended
up having to do

00:17:43.650 --> 00:17:46.500
was spend two whole-- we
rebooted the entire system-- we

00:17:46.500 --> 00:17:49.700
spent two whole days writing
scripts to parse those

00:17:49.700 --> 00:17:51.596
logs so we could get
some idea of the errors.

00:17:51.596 --> 00:17:53.470
And all we're doing is
aggregating the errors

00:17:53.470 --> 00:17:54.650
very quickly.

00:17:54.650 --> 00:17:57.520
And Stackdriver Error
Reporting will do that for you.

00:17:57.520 --> 00:17:59.750
It analyzes your
logs as they come in

00:17:59.750 --> 00:18:02.210
and it aggregates events and
groups them together based

00:18:02.210 --> 00:18:04.025
on the stack trace,
based on the URL,

00:18:04.025 --> 00:18:05.900
and based on the error
code they resulted in.

00:18:05.900 --> 00:18:08.069
And then it keeps a
count of them for you.

00:18:08.069 --> 00:18:09.860
So you've have 12 of
these and one of these

00:18:09.860 --> 00:18:10.859
and, oh, this one's new.

00:18:10.859 --> 00:18:13.040
Maybe you want to pay
attention to that one.

00:18:13.040 --> 00:18:14.660
And every app I've
worked on has also

00:18:14.660 --> 00:18:16.312
had some normal
errors through things

00:18:16.312 --> 00:18:17.770
that just continuously
happen, even

00:18:17.770 --> 00:18:19.790
if you're writing good code.

00:18:19.790 --> 00:18:21.260
Or things you've
decided not to fix

00:18:21.260 --> 00:18:22.540
and, when they're
all aggregated,

00:18:22.540 --> 00:18:24.200
it's really easy for
you to just ignore

00:18:24.200 --> 00:18:26.350
that as opposed to having
to see them in your logs

00:18:26.350 --> 00:18:29.960
and see the stack traces
for them in your logs.

00:18:29.960 --> 00:18:32.090
And one of the
things I really like

00:18:32.090 --> 00:18:34.730
is it can also
proactively notify you.

00:18:34.730 --> 00:18:37.290
So you get one new error,
it'll send you an email

00:18:37.290 --> 00:18:39.030
or send an email to your team.

00:18:39.030 --> 00:18:41.860
You get another new error or
another instance of that error,

00:18:41.860 --> 00:18:43.068
it'll send you another email.

00:18:43.068 --> 00:18:44.770
And yes, it does have
back-off built in

00:18:44.770 --> 00:18:47.220
so it will not spam your
inbox if you're DDoSing

00:18:47.220 --> 00:18:48.415
your site the way we did.

00:18:48.415 --> 00:18:50.290
It will give you a couple
notifications, then

00:18:50.290 --> 00:18:52.456
at that point, it's like
you know something's wrong,

00:18:52.456 --> 00:18:56.160
go to the web page and
see what it looks like.

00:18:56.160 --> 00:18:57.770
And again, for the
people who've had

00:18:57.770 --> 00:19:00.020
a really bad day on the
internet, like I have a couple

00:19:00.020 --> 00:19:01.290
times, there's
absolutely no limit

00:19:01.290 --> 00:19:02.570
to the number of
errors it can store.

00:19:02.570 --> 00:19:04.528
It stores the stack trace
for a couple examples

00:19:04.528 --> 00:19:06.180
that you have enough
info to debug.

00:19:06.180 --> 00:19:08.210
And after that, it just
keeps track of a count.

00:19:08.210 --> 00:19:09.793
So if you're throwing
several thousand

00:19:09.793 --> 00:19:11.510
or several million
errors, it's OK.

00:19:11.510 --> 00:19:13.760
You're not going to take
Error Reporting down and lose

00:19:13.760 --> 00:19:16.576
your tool that you need
exactly the moment you need it.

00:19:19.871 --> 00:19:20.370
Setup.

00:19:20.370 --> 00:19:23.650
So there's zero set up for
App Engine, zero set up

00:19:23.650 --> 00:19:25.980
with most of the Stackdriver
Logging plug-ins.

00:19:25.980 --> 00:19:28.350
It's a simple API call,
otherwise you can just call in

00:19:28.350 --> 00:19:29.580
and say, hey I
just had an error,

00:19:29.580 --> 00:19:31.705
hey, I just had an error,
hey, I just had an error.

00:19:31.705 --> 00:19:34.122
And it will track those
and count those for you.

00:19:34.122 --> 00:19:35.830
And we're going see
what this looks like.

00:19:35.830 --> 00:19:38.240
So this time I have
an App Engine app

00:19:38.240 --> 00:19:42.360
running in-- that's Debug.

00:19:42.360 --> 00:19:44.020
There, that's Error Reporting.

00:19:44.020 --> 00:19:45.800
So this is a Python
app Engine app

00:19:45.800 --> 00:19:49.480
running in App Engine Classic,
not Flexible Environments.

00:19:49.480 --> 00:19:52.340
And you see I've got
a basic error here.

00:19:52.340 --> 00:19:53.540
I'm going to click on it.

00:19:53.540 --> 00:19:55.980
It's a badly formed import.

00:19:55.980 --> 00:19:57.210
So it's happened seven times.

00:19:57.210 --> 00:19:59.050
I saw it in version one.

00:19:59.050 --> 00:20:00.004
It was a 500 error.

00:20:00.004 --> 00:20:02.420
It was first seen two days ago
and last seen two days ago.

00:20:02.420 --> 00:20:03.770
So you've got some
basic info about when

00:20:03.770 --> 00:20:05.978
it started happening, so
hopefully you can track that

00:20:05.978 --> 00:20:07.360
to version or change.

00:20:07.360 --> 00:20:10.580
Here's the graph
and here's a sample.

00:20:10.580 --> 00:20:12.410
And there's a bunch
of different samples.

00:20:12.410 --> 00:20:15.780
But I can also click here,
get some more information.

00:20:15.780 --> 00:20:18.130
I can look at some raw data.

00:20:18.130 --> 00:20:21.230
And thank you.

00:20:21.230 --> 00:20:24.655
This is what I get for
not mirroring my screen.

00:20:24.655 --> 00:20:26.030
And if that isn't
sufficient, you

00:20:26.030 --> 00:20:27.906
can also go directly
into Stackdriver Logging

00:20:27.906 --> 00:20:30.279
and see the request logs that
went along with that error.

00:20:30.279 --> 00:20:32.460
So that you can debug
better and more efficiently.

00:20:35.257 --> 00:20:37.340
So that's all in the log
information that went on.

00:20:37.340 --> 00:20:39.850
You can see that it
was a critical error.

00:20:39.850 --> 00:20:44.270
So Debugging.

00:20:44.270 --> 00:20:46.530
You have an error,
you need to fix it.

00:20:46.530 --> 00:20:49.110
And who here has debugged a
site in production before?

00:20:49.110 --> 00:20:50.600
I'll own up to it.

00:20:50.600 --> 00:20:51.100
Yeah.

00:20:51.100 --> 00:20:53.600
I have totally hooked the Rails
console up to the production

00:20:53.600 --> 00:20:56.860
database multiple times and I've
also caused people's browsers

00:20:56.860 --> 00:20:59.390
to timeout because I threw a
breakpoint in on a production

00:20:59.390 --> 00:20:59.930
website.

00:20:59.930 --> 00:21:01.920
And I'm not proud of
this, but I have done it.

00:21:01.920 --> 00:21:03.461
Enough if you raised
your hand that I

00:21:03.461 --> 00:21:05.150
feel like I'm among friends.

00:21:05.150 --> 00:21:07.310
So there is a better way.

00:21:07.310 --> 00:21:09.450
We have a live debugger
in Stackdriver.

00:21:09.450 --> 00:21:11.790
It doesn't add a significant
amount of latency,

00:21:11.790 --> 00:21:13.580
around 10 milliseconds
is what they say,

00:21:13.580 --> 00:21:15.996
and instead of actually letting
you step through the code,

00:21:15.996 --> 00:21:17.096
it's setting a watchpoint.

00:21:17.096 --> 00:21:18.720
And that watchpoint,
what that's doing,

00:21:18.720 --> 00:21:20.636
is it's taking the status
of your application,

00:21:20.636 --> 00:21:23.496
the variables, the call
stack, at a specific point,

00:21:23.496 --> 00:21:24.870
and saying, here's
what was going

00:21:24.870 --> 00:21:29.170
on at this moment for an
actual user on your website.

00:21:29.170 --> 00:21:30.890
And frequently,
that's all I want.

00:21:30.890 --> 00:21:33.030
Frequently, I'm doing print
line debugging on the live site

00:21:33.030 --> 00:21:34.050
by throwing a whole
bunch of extra stuff

00:21:34.050 --> 00:21:35.950
out to the logs
logs, when I can just

00:21:35.950 --> 00:21:37.870
say, tell me what's
going on this line,

00:21:37.870 --> 00:21:39.670
three lines before
the exception,

00:21:39.670 --> 00:21:41.670
and then I can hopefully,
from that information,

00:21:41.670 --> 00:21:43.010
figure out where I went wrong.

00:21:43.010 --> 00:21:44.984
What went wrong on my site?

00:21:44.984 --> 00:21:46.900
So in order to do that,
you're thinking, well,

00:21:46.900 --> 00:21:47.570
how does it do that?

00:21:47.570 --> 00:21:48.810
And how does it have
access to my source code?

00:21:48.810 --> 00:21:50.518
There's a couple ways
you can hook it up.

00:21:50.518 --> 00:21:52.820
You can point Cloud Debugger
at a Cloud Repository,

00:21:52.820 --> 00:21:54.050
if you have that up there.

00:21:54.050 --> 00:21:56.636
You can upload your
code to Cloud Debugger.

00:21:56.636 --> 00:21:58.260
You can run it against
your local code,

00:21:58.260 --> 00:22:00.440
which is what I've done
and that's awesome.

00:22:00.440 --> 00:22:03.640
Or you can just say this file,
this line number and let it go.

00:22:03.640 --> 00:22:05.806
You don't even have to use
the interactive interface

00:22:05.806 --> 00:22:06.810
that they have.

00:22:06.810 --> 00:22:08.170
So Languages and Platforms.

00:22:08.170 --> 00:22:08.670
Right.

00:22:08.670 --> 00:22:10.540
So this isn't in support
around all of our App Engine

00:22:10.540 --> 00:22:11.740
languages, quite yet.

00:22:11.740 --> 00:22:14.504
It's currently supported
in Java and Python,

00:22:14.504 --> 00:22:16.670
for App Engine, App Engine
Flex, and Compute Engine.

00:22:16.670 --> 00:22:17.169
Yes.

00:22:17.169 --> 00:22:18.010
OK.

00:22:18.010 --> 00:22:20.720
And Go applications
running on Compute Engine.

00:22:20.720 --> 00:22:23.280
And support for
Node.js is in Alpha.

00:22:23.280 --> 00:22:26.160
I know some people who've
used it, it looks really cool.

00:22:26.160 --> 00:22:27.910
I haven't had a chance
to play with it yet

00:22:27.910 --> 00:22:30.252
because I've been working
with Python and Rails.

00:22:30.252 --> 00:22:32.460
So here's what this looks
like and if I have a couple

00:22:32.460 --> 00:22:33.620
seconds, which it
looks like it I will,

00:22:33.620 --> 00:22:34.690
I will try to do a demo.

00:22:34.690 --> 00:22:36.230
It's a little bit
hard to demo this

00:22:36.230 --> 00:22:38.360
because I can't make
things big enough

00:22:38.360 --> 00:22:40.310
and still get everything
on the screen.

00:22:40.310 --> 00:22:42.820
But the center there is my code.

00:22:42.820 --> 00:22:45.020
On the right I have
my list of snapshots.

00:22:45.020 --> 00:22:48.356
I set a watchpoint at
line 21 of main.py.

00:22:48.356 --> 00:22:50.010
I can put a condition
or an expression

00:22:50.010 --> 00:22:51.030
that I want evaluated.

00:22:51.030 --> 00:22:53.488
If you've ever used an IDE
where you have your little watch

00:22:53.488 --> 00:22:54.880
window, same idea.

00:22:54.880 --> 00:22:57.589
And then underneath that
is the set of variables

00:22:57.589 --> 00:22:58.880
that were active at that point.

00:22:58.880 --> 00:23:01.480
And I can get the values
for all of those and also

00:23:01.480 --> 00:23:02.694
my call stack.

00:23:02.694 --> 00:23:04.360
And so I can see what
the call stack was

00:23:04.360 --> 00:23:07.167
to get me to that point
I set the watch point at.

00:23:07.167 --> 00:23:09.250
Maybe this won't be quite
enough to get you there,

00:23:09.250 --> 00:23:10.400
but it hopefully will
at least be enough

00:23:10.400 --> 00:23:12.480
that you can reproduce the
bug on your local environment

00:23:12.480 --> 00:23:13.430
and actually fix it.

00:23:13.430 --> 00:23:15.150
Or maybe you could
write the test

00:23:15.150 --> 00:23:17.080
that you can then
use-- fix the test.

00:23:17.080 --> 00:23:19.410
And you can fix things that way.

00:23:19.410 --> 00:23:22.590
So some photo credits.

00:23:22.590 --> 00:23:25.205
Yay for Creative Commons.

00:23:25.205 --> 00:23:26.330
I want to thank you to all.

00:23:26.330 --> 00:23:28.920
I have plenty of
time for questions.

00:23:28.920 --> 00:23:31.970
[MUSIC PLAYING]

