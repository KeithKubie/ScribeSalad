WEBVTT
Kind: captions
Language: en

00:00:02.889 --> 00:00:04.100
&gt;&gt;Paul Irish: Hi, everyone.

00:00:04.100 --> 00:00:05.100
Hello.

00:00:05.100 --> 00:00:09.400
My name is Paul Irish and we're going to dive
into the Chrome DevTools.

00:00:09.400 --> 00:00:11.690
Since Google I/O last year there's been a
lot of work put into DevTools.

00:00:11.690 --> 00:00:17.000
I'm going to show just a little bit of some
of the features that have landed.

00:00:17.000 --> 00:00:21.070
So the way that we're going to go into this,
we're going to dive into some of the improvements

00:00:21.070 --> 00:00:26.269
made to authoring, just building out and working
with the tools to iterate on your -- your

00:00:26.269 --> 00:00:30.830
application, your site; dive into what that
looks like on mobile; and then dive into some

00:00:30.830 --> 00:00:35.680
of the ground-breaking performance features
that really change how you can get insight

00:00:35.680 --> 00:00:40.149
and understand how to fix performance situations
with your app.

00:00:40.149 --> 00:00:41.210
All right.

00:00:41.210 --> 00:00:44.079
So first stop, I want to play a little bit
of this video.

00:00:44.079 --> 00:00:48.640
This is Remy Sharp, and a bit ago he made
a short video on kind of how he never even

00:00:48.640 --> 00:00:51.090
leaves the DevTools when he does development.

00:00:51.090 --> 00:00:54.780
&gt;&gt;&gt; So what I'm going to do here is just make
a feature and just hopefully you already know

00:00:54.780 --> 00:00:59.800
about this and you can just kind of stick
your mouse cursor straight in and we can just

00:00:59.800 --> 00:01:05.290
go to blue and if I hit "command S" --
&gt;&gt;Paul Irish: So what he's showing here is

00:01:05.290 --> 00:01:07.000
actually two separate things.

00:01:07.000 --> 00:01:09.930
One is that he has live edit in the JavaScript.

00:01:09.930 --> 00:01:13.900
Any changes he's making in the JavaScript
are immediately patched up to V8 and it starts

00:01:13.900 --> 00:01:14.900
evaluating the new code.

00:01:14.900 --> 00:01:19.930
And the second feature, separately, is he's
making these changes back to disk and saving

00:01:19.930 --> 00:01:22.570
them so that they persist to disk.

00:01:22.570 --> 00:01:23.570
We like this.

00:01:23.570 --> 00:01:28.299
We think this is really powerful and if you've
seen the Brent Victor talk, having a -- an

00:01:28.299 --> 00:01:33.540
environment where you can iterate live against
your production application that you're building

00:01:33.540 --> 00:01:36.750
really changes the whole development lifecycle.

00:01:36.750 --> 00:01:41.810
So today, I'm going to share with you something
called "workspaces."

00:01:41.810 --> 00:01:44.770
Actually, I have a problem with this slide.

00:01:44.770 --> 00:01:47.850
First of all, there's a capital "O." Okay.

00:01:47.850 --> 00:01:48.850
One second.

00:01:48.850 --> 00:01:50.530
I'm just going to fix this.

00:01:50.530 --> 00:01:51.530
Okay.

00:01:51.530 --> 00:01:52.530
Let's see.

00:01:52.530 --> 00:01:56.859
We're going to go down here and then actually
the styling is not totally keen -- I'm not

00:01:56.859 --> 00:01:59.049
-- we could make this better, I think.

00:01:59.049 --> 00:02:02.130
I'm going to add some text shadow, probably.

00:02:02.130 --> 00:02:04.570
Let's give it some of this.

00:02:04.570 --> 00:02:06.719
Yeah, it's like a little glow.

00:02:06.719 --> 00:02:08.080
I like that.

00:02:08.080 --> 00:02:09.080
Wow!

00:02:09.080 --> 00:02:11.920
Maybe change up the color.

00:02:11.920 --> 00:02:13.460
Let's see.

00:02:13.460 --> 00:02:19.400
I'll just make it a little bit lighter.

00:02:19.400 --> 00:02:22.280
And bump the font size.

00:02:22.280 --> 00:02:23.280
Ooh.

00:02:23.280 --> 00:02:24.280
Line height.

00:02:24.280 --> 00:02:25.280
Sheesh.

00:02:25.280 --> 00:02:26.280
Okay, okay, okay.

00:02:26.280 --> 00:02:27.670
1.1 sounds about good.

00:02:27.670 --> 00:02:28.670
Yeah.

00:02:28.670 --> 00:02:29.670
All right.

00:02:29.670 --> 00:02:30.879
So I've made these changes.

00:02:30.879 --> 00:02:32.849
I should probably, you know, copy them.

00:02:32.849 --> 00:02:38.769
Or maybe I'll go over here and I could copy
them over from here, go back to sublime and

00:02:38.769 --> 00:02:41.870
see we're in my default CSS.

00:02:41.870 --> 00:02:44.959
Section, line height.

00:02:44.959 --> 00:02:46.230
Wait.

00:02:46.230 --> 00:02:53.830
Um... okay, I -- let's see if I can get this
on screen at the same time here.

00:02:53.830 --> 00:02:54.830
Okay.

00:02:54.830 --> 00:02:55.830
Yeah.

00:02:55.830 --> 00:02:56.830
Sure.

00:02:56.830 --> 00:02:59.630
So, uh, line height and colors.

00:02:59.630 --> 00:03:02.489
Brighten that up.

00:03:02.489 --> 00:03:07.940
And let's see.

00:03:07.940 --> 00:03:10.260
Ahh.

00:03:10.260 --> 00:03:13.379
Then I have a little bit of box shadow.

00:03:13.379 --> 00:03:18.159
10px, black, seems good.

00:03:18.159 --> 00:03:24.650
Come down here, and what you're seeing, actually
-- so all my changes that I'm making in styling

00:03:24.650 --> 00:03:26.200
--
[ Applause ]

00:03:26.200 --> 00:03:33.989
&gt;&gt;Paul Irish: All my changes that I'm making
here in the style panel are persistent to

00:03:33.989 --> 00:03:36.049
disk and I immediately have them over here.

00:03:36.049 --> 00:03:40.970
Now, I can make my edits here or I can come
over here and actually just kill this box

00:03:40.970 --> 00:03:45.189
shadow and, you know, tweak my line height.

00:03:45.189 --> 00:03:47.200
But I have the editability in both places.

00:03:47.200 --> 00:03:55.040
I can also come back, say, for instance, to
-- to sublime.

00:03:55.040 --> 00:04:00.050
Maybe I'm going to make my change down here,
so instead -- I'm going to kill the box shadow

00:04:00.050 --> 00:04:02.629
down here and we'll change the color over
to indigo.

00:04:02.629 --> 00:04:05.709
That one's been -- I like that style.

00:04:05.709 --> 00:04:09.500
Come back, and immediately my change comes
up in the DevTools.

00:04:09.500 --> 00:04:11.530
No refresh.

00:04:11.530 --> 00:04:18.239
[ Applause ]
&gt;&gt;Paul Irish: So I'm really keen on this,

00:04:18.239 --> 00:04:24.200
and I think it's really powerful, but it's
backed up by a bit of -- a bit of work.

00:04:24.200 --> 00:04:25.200
So --
Ah.

00:04:25.200 --> 00:04:27.010
One last thing.

00:04:27.010 --> 00:04:29.220
The capitalization that I didn't even get
to.

00:04:29.220 --> 00:04:32.210
So let's take a look at that.

00:04:32.210 --> 00:04:40.560
So these are HTML styles -- HTML slides, but
I'm using markdown to actually generate them,

00:04:40.560 --> 00:04:45.710
so if I want to change this, I should probably
edit my markdowns.

00:04:45.710 --> 00:04:52.640
So what I'm going to do is just hit command
"O" inside here, bring up my slides for markdown,

00:04:52.640 --> 00:04:56.010
and inside here -- so this is just my markdown
source.

00:04:56.010 --> 00:05:02.920
I'm going to change the capitalization, hit
"save," hit "refresh," and we got my changes

00:05:02.920 --> 00:05:05.060
in place here.

00:05:05.060 --> 00:05:09.750
So this is really powerful and we're really
excited about what we can do here.

00:05:09.750 --> 00:05:14.890
Workspaces allows you to map what's coming
into the browser to the local filesystem,

00:05:14.890 --> 00:05:20.290
so in this case, I have -- this is the workspace
for my slides.

00:05:20.290 --> 00:05:26.070
I have the entire local filesystem and that's
been mapped by DevTools to what's coming in

00:05:26.070 --> 00:05:27.290
the browser.

00:05:27.290 --> 00:05:32.670
So I can edit my JavaScript, my CSS, my HTML,
my markdown files.

00:05:32.670 --> 00:05:37.680
Even the DevTools engineering team who is
building this edits their -- their C++ bindings

00:05:37.680 --> 00:05:40.490
directly inside the DevTools.

00:05:40.490 --> 00:05:43.970
The style changes that I'm making inside the
style pane persist.

00:05:43.970 --> 00:05:45.010
I can edit.

00:05:45.010 --> 00:05:46.100
The changes are kept.

00:05:46.100 --> 00:05:52.390
I can undo, redo any of the changes in here,
which is just command "Z," command shift "Z,"

00:05:52.390 --> 00:05:56.460
and this is great because I'm able to maintain
my context for styling.

00:05:56.460 --> 00:06:01.700
So I don't have to be bopping in and out of
a different editor to make these changes.

00:06:01.700 --> 00:06:04.170
I can make them all here in one place.

00:06:04.170 --> 00:06:05.680
All right.

00:06:05.680 --> 00:06:06.970
So this is looking pretty good.

00:06:06.970 --> 00:06:09.790
I'm going to move on.

00:06:09.790 --> 00:06:14.680
Last year at I/O, we asked everyone what features
you wanted inside of DevTools, and one of

00:06:14.680 --> 00:06:17.690
the top things that people wanted was support
for Sass.

00:06:17.690 --> 00:06:23.230
Because you're editing in Sass, you're authoring
there, but then in the DevTools you're seeing

00:06:23.230 --> 00:06:27.670
CSS and you kind of need to manually map back
and forth.

00:06:27.670 --> 00:06:31.820
So this is something that we've been working
on, and I wanted to show you how this works.

00:06:31.820 --> 00:06:34.910
So I'm going to bring up a little copy of
HTML5 Please.

00:06:34.910 --> 00:06:41.270
This is a site with a small node back end
but the styles are written in Sass, and we

00:06:41.270 --> 00:06:43.010
want to take a look at how that works.

00:06:43.010 --> 00:06:46.320
So let's take this little views badge right
here.

00:06:46.320 --> 00:06:55.810
Now normally, if I am looking at the styling,
I'm going to see something like this, right?

00:06:55.810 --> 00:07:01.450
So we got the green box shadow, border right,
and background.

00:07:01.450 --> 00:07:05.930
We're all using this green, and in fact, it's
using just a little bit darker as it goes

00:07:05.930 --> 00:07:06.930
down.

00:07:06.930 --> 00:07:12.390
Now, I can click over to see my CSS, but as
I said, this is compiled, so -- from my Sass,

00:07:12.390 --> 00:07:14.760
so it's not very helpful.

00:07:14.760 --> 00:07:16.060
So let's turn on Sass debugging.

00:07:16.060 --> 00:07:20.410
So when I go into DevTool settings -- I like
using the question mark for this, a quick

00:07:20.410 --> 00:07:24.520
little shortcut -- go into experiments, turn
on Sass debugging, and now I'm just going

00:07:24.520 --> 00:07:27.630
to refresh the page so that this is all looking
good.

00:07:27.630 --> 00:07:31.660
And now the first difference that you're going
to see is that right here we're listing the

00:07:31.660 --> 00:07:36.400
original place inside the Sass file where
this was -- where this was found.

00:07:36.400 --> 00:07:43.120
So I can click over to that and we're looking
inside my Sass file where this -- where this

00:07:43.120 --> 00:07:44.860
selector was found.

00:07:44.860 --> 00:07:48.390
So we got my use, and it looks like we're
applying a mix-in inside here.

00:07:48.390 --> 00:07:49.390
Okay.

00:07:49.390 --> 00:07:50.390
Cool.

00:07:50.390 --> 00:07:52.880
But actually I want to change this green,
so I'm going to have to do a little bit more

00:07:52.880 --> 00:07:53.960
hunting.

00:07:53.960 --> 00:07:59.520
So as I hold down the command key, I actually
get a little bit of visual feedback.

00:07:59.520 --> 00:08:03.340
As I hover, I get these little underlines,
so I'm going to try clicking "background."

00:08:03.340 --> 00:08:07.320
We're going to jump immediately into where
that mix-in was defined.

00:08:07.320 --> 00:08:11.650
I can see my background, my box shadow, my
border right.

00:08:11.650 --> 00:08:13.370
All right.

00:08:13.370 --> 00:08:15.410
But yeah, we got this color.

00:08:15.410 --> 00:08:16.410
It comes in.

00:08:16.410 --> 00:08:19.340
It's getting darkened and I want to edit the
color.

00:08:19.340 --> 00:08:20.700
So let's do that.

00:08:20.700 --> 00:08:26.011
I'm going to command-click on the color itself
and over here we dive into the variables of

00:08:26.011 --> 00:08:28.740
that CSS file where the color was actually
defined.

00:08:28.740 --> 00:08:31.800
My cursor goes right to the definition.

00:08:31.800 --> 00:08:33.880
So now let's see.

00:08:33.880 --> 00:08:37.450
I will probably want to make a change.

00:08:37.450 --> 00:08:39.860
As I said, I'm really into indigo lately.

00:08:39.860 --> 00:08:40.860
All right.

00:08:40.860 --> 00:08:47.010
I'm going to hit command "S."
Now, one of the cool things that we have set

00:08:47.010 --> 00:08:55.110
up is that if you have -- if you have a Sass
watch set up, so you're watching, you have

00:08:55.110 --> 00:09:01.770
the -- the daemon sitting there waiting for
any changes to disk, we can actually use that

00:09:01.770 --> 00:09:05.190
and then as new changes come into disk, we
can apply them.

00:09:05.190 --> 00:09:06.730
So let me give this a shot.

00:09:06.730 --> 00:09:11.870
I'm going to come back in here and make sure
that that setting is on.

00:09:11.870 --> 00:09:12.870
Okay.

00:09:12.870 --> 00:09:16.670
Autoreload CSS upon Sass save.

00:09:16.670 --> 00:09:24.640
Come over and it looks like -- there we go.

00:09:24.640 --> 00:09:25.640
Nice!

00:09:25.640 --> 00:09:29.150
[ Applause ]
&gt;&gt;Paul Irish: All right.

00:09:29.150 --> 00:09:36.260
So I can make any changes to my Sass right
here inside the DevTools, change the color.

00:09:36.260 --> 00:09:37.670
Maybe I'm -- I should go back to that green.

00:09:37.670 --> 00:09:39.920
It's probably better than all these changes.

00:09:39.920 --> 00:09:46.710
Just hit command "S" and due to workspaces,
as we saw before, my local development folder

00:09:46.710 --> 00:09:51.390
is mapped to what's coming in over the wire
from local host, and so my changes are saved

00:09:51.390 --> 00:09:56.770
back to disk and my watch picks it back up
and DevTools takes care of refreshing the

00:09:56.770 --> 00:09:59.820
styles right inside the browser.

00:09:59.820 --> 00:10:00.820
So this is really cool.

00:10:00.820 --> 00:10:06.670
We have full traceability from any UI, from
selectors, properties, variables, back to

00:10:06.670 --> 00:10:10.840
the mix-ins, the functions, the places in
the original sources where they were defined.

00:10:10.840 --> 00:10:14.450
And the fact that this is powered by sourcemaps
-- you've heard about sourcemaps for JavaScript.

00:10:14.450 --> 00:10:18.690
This is the exact same technology, only used
for CSS, and the DevTools team contributed

00:10:18.690 --> 00:10:24.170
the sourcemap implementation into the core
Sass compiler to enable this functionality.

00:10:24.170 --> 00:10:27.690
And we have the automatic reloaded style sheet
so as you edit inside the DevTools, you can

00:10:27.690 --> 00:10:30.970
just keep going and see the changes as they
come in.

00:10:30.970 --> 00:10:33.090
All right.

00:10:33.090 --> 00:10:36.380
So these two features combined really kind
of change things.

00:10:36.380 --> 00:10:41.150
It really means that DevTools can become my
editor.

00:10:41.150 --> 00:10:45.470
I can style as I type, whether it's in CSS
or Sass.

00:10:45.470 --> 00:10:49.900
These changes can be persisted to disk because
I'm mapping them right into my local folders.

00:10:49.900 --> 00:10:54.080
My -- inside JavaScript I can re-evaluate
that -- re-evaluate it on the fly with live

00:10:54.080 --> 00:10:57.500
edit and where I author is where I debug.

00:10:57.500 --> 00:11:01.050
It's really powerful and we're excited about
what we can do now with this.

00:11:01.050 --> 00:11:02.630
All right.

00:11:02.630 --> 00:11:07.370
Now that we've covered kind of taking a look
at giving you more productive tools when authoring

00:11:07.370 --> 00:11:09.620
sites, let's bring that to mobile.

00:11:09.620 --> 00:11:10.620
All right.

00:11:10.620 --> 00:11:15.070
So last year we talked about remote debugging
Chrome on Android.

00:11:15.070 --> 00:11:16.600
Powerful stuff.

00:11:16.600 --> 00:11:19.660
But it does require a bit of command line
hackery.

00:11:19.660 --> 00:11:22.910
So who is a -- raise your hand if you've debugged
Chrome on Android.

00:11:22.910 --> 00:11:24.890
[ Show of hands ]
&gt;&gt;Paul Irish: Cool.

00:11:24.890 --> 00:11:25.890
Yeah.

00:11:25.890 --> 00:11:26.890
That's great.

00:11:26.890 --> 00:11:29.760
And raise your hand if you really enjoyed
dealing with ADB on the command line and memorizing

00:11:29.760 --> 00:11:33.000
this -- that little guy at the bottom.

00:11:33.000 --> 00:11:34.319
One second.

00:11:34.319 --> 00:11:37.730
This is why you don't do hot spots on your
log screen.

00:11:37.730 --> 00:11:39.070
All right.

00:11:39.070 --> 00:11:40.070
Cool.

00:11:40.070 --> 00:11:41.590
So this little guy.

00:11:41.590 --> 00:11:42.590
Yeah.

00:11:42.590 --> 00:11:43.630
Not the most fun.

00:11:43.630 --> 00:11:47.980
So we thought that this could be better and
so this is our new and kind of experimental

00:11:47.980 --> 00:11:50.550
UI for dealing with this.

00:11:50.550 --> 00:11:59.490
So first thing is, beforehand you had to download
the Android SDK to make this work.

00:11:59.490 --> 00:12:01.490
Now there's this little Chrome Extension.

00:12:01.490 --> 00:12:02.490
See this guy?

00:12:02.490 --> 00:12:05.570
We're just going to click on this guy and
start up ADB.

00:12:05.570 --> 00:12:10.411
So actually the Chrome Extension itself ships
with ADB, which means I can just turn him

00:12:10.411 --> 00:12:14.390
on there and he's going to turn on green once
ADB is running, and this means I don't need

00:12:14.390 --> 00:12:18.751
to download the SDK whatsoever, just the 5-meg
Chrome Extension that takes care of this for

00:12:18.751 --> 00:12:19.751
me.

00:12:19.751 --> 00:12:20.751
All right.

00:12:20.751 --> 00:12:26.030
Now, I'm going to plug in my phone.

00:12:26.030 --> 00:12:30.100
Let's see.

00:12:30.100 --> 00:12:31.820
And that's my password.

00:12:31.820 --> 00:12:34.710
[ Laughter ]
&gt;&gt;Paul Irish: All right.

00:12:34.710 --> 00:12:42.210
I'm about to plug it in and let me switch
back to the screen because it detects right

00:12:42.210 --> 00:12:43.510
away that my device is in.

00:12:43.510 --> 00:12:44.510
Awesome!

00:12:44.510 --> 00:12:45.510
Good!

00:12:45.510 --> 00:12:48.110
So now that that's in, let's check it out.

00:12:48.110 --> 00:12:50.890
So I'm going to click again and go to devices,
view devices.

00:12:50.890 --> 00:12:55.770
What this takes me to is the Chrome inspect
page, or about inspect.

00:12:55.770 --> 00:12:59.601
You might have been here before if you've
had to download the background page for a

00:12:59.601 --> 00:13:01.570
Chrome Extension or a shared worker.

00:13:01.570 --> 00:13:04.279
It shows you all the targets that you could
debug.

00:13:04.279 --> 00:13:10.500
And now, any targets that you have to debug
on a phone that's connected are going to show

00:13:10.500 --> 00:13:11.500
up here.

00:13:11.500 --> 00:13:15.840
So here's my Galaxy Nexus that I have connected
and we're seeing the page that I have open

00:13:15.840 --> 00:13:17.020
right here.

00:13:17.020 --> 00:13:19.160
So let's take a look.

00:13:19.160 --> 00:13:22.040
All right.

00:13:22.040 --> 00:13:23.040
Rock n' roll!

00:13:23.040 --> 00:13:25.240
So this is the full DevTools.

00:13:25.240 --> 00:13:32.029
Let me go over to Timeline and I'm just going
to record a quick Timeline as I scroll the

00:13:32.029 --> 00:13:33.650
page.

00:13:33.650 --> 00:13:37.910
And there we go.

00:13:37.910 --> 00:13:43.910
[ Applause ]
&gt;&gt;Paul Irish: It's really powerful and we're

00:13:43.910 --> 00:13:49.580
excited about having this -- the full functionality
of the DevTools available so conveniently.

00:13:49.580 --> 00:13:53.100
And this is not just the full functionality
of the DevTools, but any Chrome Extensions

00:13:53.100 --> 00:13:55.470
or DevTools extensions that you want.

00:13:55.470 --> 00:13:57.040
Before, you didn't have available.

00:13:57.040 --> 00:14:02.560
Now, say, for instance, you want to run Google
PageSpeed against your situation on the phone.

00:14:02.560 --> 00:14:07.630
Right here -- my phone is actually still on
3G, and so I'm able to understand in real

00:14:07.630 --> 00:14:11.890
network conditions what Google PageSpeed is
going to tell me.

00:14:11.890 --> 00:14:18.160
But there is still a problem, so let's say
-- switch back here and I come over to this

00:14:18.160 --> 00:14:19.210
file.

00:14:19.210 --> 00:14:28.550
So before I was debugging, what, HTML5 Please
and it was coming over local host, and sometimes

00:14:28.550 --> 00:14:31.280
I'm not able to have that available on my
phone.

00:14:31.280 --> 00:14:33.840
Just doesn't come up.

00:14:33.840 --> 00:14:37.620
So we thought we could probably fix this,
too.

00:14:37.620 --> 00:14:45.660
So if I have this up here, I'm going to inspect
this target and go into the DevTools settings,

00:14:45.660 --> 00:14:49.240
and you'll see here a new setting that's called
port forwarding.

00:14:49.240 --> 00:14:56.530
And so now I can just add in I want to map
over port 9000, get that going, and we'll

00:14:56.530 --> 00:15:03.529
come back over here and refresh and we're
good.

00:15:03.529 --> 00:15:11.220
[ Applause ]
&gt;&gt;Paul Irish: So this is fantastic because

00:15:11.220 --> 00:15:14.740
I can even use the functionality that I was
showing you before.

00:15:14.740 --> 00:15:20.960
If I want to use workspaces and make a change
so this is the HTML of the page and I'm actually

00:15:20.960 --> 00:15:29.320
just going to make a change to the source
markup, just hit command "S," command "R,"

00:15:29.320 --> 00:15:35.640
and I come back over here and we just load
up the brand-new version.

00:15:35.640 --> 00:15:39.220
Command "R" again, you know, for good luck.

00:15:39.220 --> 00:15:43.510
[ Laughter ]
&gt;&gt;Paul Irish: And we're good.

00:15:43.510 --> 00:15:47.089
[ Applause ]
&gt;&gt;Paul Irish: All right.

00:15:47.089 --> 00:15:52.570
So I've just connected with -- with really
-- with a lot of ease to here.

00:15:52.570 --> 00:15:57.050
I have workspaces, I have Sass debugging,
I have a lot of power, and I can focus my

00:15:57.050 --> 00:16:01.300
development in improving this mobile experience,
which is really fantastic.

00:16:01.300 --> 00:16:03.480
All right.

00:16:03.480 --> 00:16:11.050
So no command line setup, see all your debug
targets in about inspect, great feature set

00:16:11.050 --> 00:16:15.960
available, everything that's on desktop is
available for Chrome on Android, and port

00:16:15.960 --> 00:16:20.330
forwarding to make this local development
feedback loop really fantastic and smooth.

00:16:20.330 --> 00:16:21.890
All right.

00:16:21.890 --> 00:16:30.210
Now, bringing this back up, I've covered authoring,
I've covered what we can do to make this experience

00:16:30.210 --> 00:16:31.250
better on mobile.

00:16:31.250 --> 00:16:33.860
Now, to dig into performance a little bit.

00:16:33.860 --> 00:16:38.290
There's fantastic features and I'm going to
cover a few of the brand-new ones.

00:16:38.290 --> 00:16:42.190
But the first thing when coming to performance
is that you've really got to focus on the

00:16:42.190 --> 00:16:46.460
right priorities, finding your biggest bottlenecks
and focusing on those first.

00:16:46.460 --> 00:16:51.250
And the Timeline is the best tool for this,
and I want to show this with a good example.

00:16:51.250 --> 00:16:57.250
So here I have -- this is like an infographic
parallax site and what we do as we scroll

00:16:57.250 --> 00:17:02.089
down, we've got this kind of orange circle
growth, we've got these white little guys

00:17:02.089 --> 00:17:06.699
that are going to -- physics kind of going
out, we got this kind of section.

00:17:06.699 --> 00:17:07.740
It's parallax.

00:17:07.740 --> 00:17:10.329
It's really an attractive site.

00:17:10.329 --> 00:17:13.320
And then down here, a little bit more changes.

00:17:13.320 --> 00:17:17.870
I'm going to come back up to the top and now
let's take a look at this inside the Timeline.

00:17:17.870 --> 00:17:19.790
I'm going to bring the DevTools down to the
bottom.

00:17:19.790 --> 00:17:22.650
You can actually just drag it down.

00:17:22.650 --> 00:17:24.660
All right.

00:17:24.660 --> 00:17:31.130
I'm going to start a Timeline recording with
command "E," and just scroll through the page.

00:17:31.130 --> 00:17:34.860
All right.

00:17:34.860 --> 00:17:40.940
Now, what's really cool about what the Timeline
tells us is it basically tells us the narrative

00:17:40.940 --> 00:17:44.150
of performance of this site.

00:17:44.150 --> 00:17:46.870
As I scrolled through, a few things happened.

00:17:46.870 --> 00:17:51.610
Up at the top, it was pretty quiet and it
was just the headline, and then here we got

00:17:51.610 --> 00:17:53.310
into this green section.

00:17:53.310 --> 00:17:55.720
What this was is a lot of draw calls.

00:17:55.720 --> 00:18:01.390
Time is spent inside draw and painting, and
this is when all of these orange circles are

00:18:01.390 --> 00:18:03.580
coming up and populating this screen.

00:18:03.580 --> 00:18:08.420
Then we get into a lot of yellow, and what
this is is JavaScript execution, of course.

00:18:08.420 --> 00:18:12.880
And this is coming in because of all the computation
required to make this functionality happen.

00:18:12.880 --> 00:18:17.330
Then things are kind of pretty chill as we
go through this middle area.

00:18:17.330 --> 00:18:22.640
We got -- we're mostly hitting our target
of 60fps, so we're staying within our frame

00:18:22.640 --> 00:18:24.330
budgets, no big problems.

00:18:24.330 --> 00:18:28.170
And then down towards the end where we have
this kind of effect, we're getting kind of

00:18:28.170 --> 00:18:29.770
a cacophony of color.

00:18:29.770 --> 00:18:31.770
Lots of different things happening at once.

00:18:31.770 --> 00:18:35.730
Looks like a good amount of re-calc style,
layout, paint, and then also JavaScript all

00:18:35.730 --> 00:18:38.170
happening at the same time.

00:18:38.170 --> 00:18:43.580
But overall we get this really great view
of what the situations are, and first, I want

00:18:43.580 --> 00:18:47.640
to call out that this is not really a DevTools
talk here at Chrome I/O. There's a lot of

00:18:47.640 --> 00:18:51.510
other talks and some of them have already
happened, but if you want to dive into how

00:18:51.510 --> 00:18:56.920
to figure out, you know, when you have a lot
of green, you're going to want to check out

00:18:56.920 --> 00:19:02.230
these talks from the jankfree talk and the
device agnostic development talk.

00:19:02.230 --> 00:19:07.140
Yellow, as luck would have it, is Follow the
Yellow Brick Road to JavaScript performance.

00:19:07.140 --> 00:19:09.710
That just worked out really well.

00:19:09.710 --> 00:19:15.120
The G -- if you're look at GCs and memory,
there was a great talk earlier about Gmail's

00:19:15.120 --> 00:19:18.860
memory and performance and how the Chrome
DevTools help there.

00:19:18.860 --> 00:19:22.160
Compositing there's actually great stuff,
and also layout, excellent stuff.

00:19:22.160 --> 00:19:27.260
So dig into those talks as well so you can
find out how to use these tools in more detail.

00:19:27.260 --> 00:19:33.150
But I want to show a brand-new feature and
let me show how it works.

00:19:33.150 --> 00:19:34.150
All right.

00:19:34.150 --> 00:19:41.400
So we're looking at this little section here
where we have the -- the -- all the little

00:19:41.400 --> 00:19:46.630
balls that are kind of about to move around
once I start scrolling.

00:19:46.630 --> 00:19:50.490
And I'm going to record a JavaScript profile
because, as we saw, a lot of yellow in that

00:19:50.490 --> 00:19:52.420
section, and we want to know what's going
on.

00:19:52.420 --> 00:19:54.210
Let's just try it.

00:19:54.210 --> 00:20:01.070
I will hit command D once this gets going.

00:20:01.070 --> 00:20:04.510
Come on.

00:20:04.510 --> 00:20:05.510
There we go.

00:20:05.510 --> 00:20:06.510
Nice.

00:20:06.510 --> 00:20:07.549
All right.

00:20:07.549 --> 00:20:12.090
Command D to start and stop really fast.

00:20:12.090 --> 00:20:14.750
And so what you get, yeah, is JavaScript profile.

00:20:14.750 --> 00:20:19.720
And so what we're seeing here in aggregate
where my costs were spent.

00:20:19.720 --> 00:20:21.760
And this is good.

00:20:21.760 --> 00:20:24.270
But in some cases, it doesn't tell the whole
story.

00:20:24.270 --> 00:20:28.460
You're interested in a picture that kind of
tells the story over time and you are just

00:20:28.460 --> 00:20:29.670
seeing it at aggregate level.

00:20:29.670 --> 00:20:34.950
But here we can turn on the flame chart down
at the bottom and we get to see a different

00:20:34.950 --> 00:20:35.950
look.

00:20:35.950 --> 00:20:38.220
This is over time where my time was spent
inside V8.

00:20:38.220 --> 00:20:44.100
And in zoomout view, you get a sense of: Am
I doing the same sort of operations over time?

00:20:44.100 --> 00:20:49.580
But I can also dive in a little bit closer
and understand what's going on.

00:20:49.580 --> 00:20:50.830
&gt;&gt;&gt; Wow.

00:20:50.830 --> 00:20:57.750
[ Applause ]
&gt;&gt;Paul Irish: So I want to point out a little

00:20:57.750 --> 00:20:59.660
bit on how to read this.

00:20:59.660 --> 00:21:01.679
Callstack is the Y axis.

00:21:01.679 --> 00:21:03.350
So height doesn't matter too much.

00:21:03.350 --> 00:21:08.179
What you are looking for is wide bars that
are taking up time.

00:21:08.179 --> 00:21:14.730
In this case, it looks like -- let's see,
this little flame over here, we have a little

00:21:14.730 --> 00:21:15.730
bit of a pub sub.

00:21:15.730 --> 00:21:16.980
It is not too heavy.

00:21:16.980 --> 00:21:24.020
But it looks like most of our ticks are inside
of d3, inside of this quadtreeview call and

00:21:24.020 --> 00:21:27.179
then a lot of insertchilds construct right
here.

00:21:27.179 --> 00:21:32.370
We are able to get a good visual view of where
our costs are, and then we can dive in and

00:21:32.370 --> 00:21:34.390
make some optimizations later.

00:21:34.390 --> 00:21:36.410
All right.

00:21:36.410 --> 00:21:41.300
We also have a new experiment for profiling
Canvas, and I want to show you how this works.

00:21:41.300 --> 00:21:47.840
So this is just a WebGL experiment, and we
are going to open up the profiling panel.

00:21:47.840 --> 00:21:49.940
And we are going to select "capture canvas
frame."

00:21:49.940 --> 00:21:54.130
Now, it just captured one frame of the canvas.

00:21:54.130 --> 00:21:58.059
And it is going to dig into all the draw calls.

00:21:58.059 --> 00:22:02.049
Here we'll listen to every single draw call
that's happened to that canvas and we can

00:22:02.049 --> 00:22:06.780
just go down, down, down, apply them one by
one, and see how they affect and how this

00:22:06.780 --> 00:22:08.880
frame is built up over time.

00:22:08.880 --> 00:22:14.780
And then we can open up one of those draw
calls and see all the functions that contributed

00:22:14.780 --> 00:22:15.920
to that specific draw.

00:22:15.920 --> 00:22:21.490
And if we want, we can click over to the sources
panel to see the source of each of those functions.

00:22:21.490 --> 00:22:24.130
Now, this is just a platform.

00:22:24.130 --> 00:22:29.230
We have great recording to be able to instrument
record and replay canvas.

00:22:29.230 --> 00:22:31.630
This is both 2D Canvas and WebGL.

00:22:31.630 --> 00:22:34.410
Now, what really happens next is up to you.

00:22:34.410 --> 00:22:37.850
There is -- we could add a lot of features
to this but we are interested in your feedback

00:22:37.850 --> 00:22:41.410
to hear what would be most useful to make
this great and improve the performance of

00:22:41.410 --> 00:22:42.740
your apps.

00:22:42.740 --> 00:22:44.880
All right.

00:22:44.880 --> 00:22:46.950
So five more key performance features.

00:22:46.950 --> 00:22:50.730
I don't have too much time, but I want to
show them off pretty quick.

00:22:50.730 --> 00:22:52.020
All right.

00:22:52.020 --> 00:22:53.790
Continuous repainting mode.

00:22:53.790 --> 00:22:56.020
Fantastic if you are seeing a lot of green
in your timeline view.

00:22:56.020 --> 00:22:58.560
You have a lot of paint costs and you want
to find out why.

00:22:58.560 --> 00:22:59.830
Turn on continuous repaint mode.

00:22:59.830 --> 00:23:03.890
This is going to tell the browser to paint,
paint, paint.

00:23:03.890 --> 00:23:08.299
And then you are able to turn off DOM, turn
off different styles, see what is affecting

00:23:08.299 --> 00:23:09.340
your paints the most.

00:23:09.340 --> 00:23:11.700
In some cases, it is a little hard to see.

00:23:11.700 --> 00:23:13.460
Maybe box shadow and border reduce are on.

00:23:13.460 --> 00:23:14.910
Maybe they are not too additive.

00:23:14.910 --> 00:23:16.010
It is a little tricky.

00:23:16.010 --> 00:23:17.710
This will give you a lot of insight.

00:23:17.710 --> 00:23:22.040
The fps meter has been in there for a while,
but it has been getting a lot of upgrades.

00:23:22.040 --> 00:23:25.520
You are able to see how fast you are throwing
frames to the graphics context.

00:23:25.520 --> 00:23:28.890
You will get a histogram view over here, a
min and max.

00:23:28.890 --> 00:23:30.070
And the GPU memory.

00:23:30.070 --> 00:23:33.633
This is really important on mobile where you
only have a set amount of GPU memory.

00:23:33.633 --> 00:23:38.230
If you are constantly evicting things out
of the GPU memory, it might be slowing down

00:23:38.230 --> 00:23:40.520
how fast the user is actually seeing things.

00:23:40.520 --> 00:23:43.280
And this going to give you a lot of insight.

00:23:43.280 --> 00:23:46.230
Show paint, rects and layer borders, these
are settings inside the DevTools.

00:23:46.230 --> 00:23:51.179
Great for understanding if you are getting
a lot of paints, what is the size and shape

00:23:51.179 --> 00:23:52.740
of these paints.

00:23:52.740 --> 00:23:57.570
Maybe it is the entire screen is repainted
-- repainting every time you scroll.

00:23:57.570 --> 00:23:59.970
We want to understand that and find out why.

00:23:59.970 --> 00:24:04.530
In this screen shot, we can see that our a
little dataset div just got repainted, and

00:24:04.530 --> 00:24:07.820
we got a composite layer border around this
side.

00:24:07.820 --> 00:24:12.980
This is actually the scroll bar, which the
browser is now compositing on top of the page

00:24:12.980 --> 00:24:15.559
content.

00:24:15.559 --> 00:24:17.950
Object allocation tracking is brand-new.

00:24:17.950 --> 00:24:21.850
This is basically taking continuous heap snapshots
over time.

00:24:21.850 --> 00:24:27.560
And you are able to identify where objects
are being created and identify the retain

00:24:27.560 --> 00:24:28.560
path.

00:24:28.560 --> 00:24:32.360
Great if you are digging into the memory performance
of your app.

00:24:32.360 --> 00:24:37.840
Layout thrashing is a big problem with DOM
-- with the Web application's DOM performance.

00:24:37.840 --> 00:24:39.740
So a lot of times, you will be touching the
DOM.

00:24:39.740 --> 00:24:43.309
It will cause layout thrashing or reflows.

00:24:43.309 --> 00:24:46.670
And here we're able to not only see a few
things.

00:24:46.670 --> 00:24:52.950
So in timeline, you are going to see a little
icon if DevTools detects this is a forced

00:24:52.950 --> 00:24:53.950
synchronous layout.

00:24:53.950 --> 00:24:56.160
It is going to tell you it might be a possible
performance bottleneck.

00:24:56.160 --> 00:24:58.200
You are doing more layouts than you have to.

00:24:58.200 --> 00:25:01.000
The user is not even seeing the work you're
forcing.

00:25:01.000 --> 00:25:06.450
Then it will tell you the call stacks, why
exactly the layout was forced, and why it

00:25:06.450 --> 00:25:07.470
was invalidated.

00:25:07.470 --> 00:25:11.430
You can dig into the sources right there and
see the actual call that forced it.

00:25:11.430 --> 00:25:13.429
Now this is brand-new stuff.

00:25:13.429 --> 00:25:18.660
Identify what nodes need layout, how many
there are, what the total tree size that's

00:25:18.660 --> 00:25:23.040
getting reflowed is, and where the document
root is.

00:25:23.040 --> 00:25:26.710
Sometimes -- sometimes the entire document
is being laid out again.

00:25:26.710 --> 00:25:29.419
Other times it is just a partial layout.

00:25:29.419 --> 00:25:32.169
All right.

00:25:32.169 --> 00:25:33.830
So a lot of stuff here.

00:25:33.830 --> 00:25:35.700
And you can try it out today.

00:25:35.700 --> 00:25:40.590
We have just been working -- put in a lot
of work on the DevTools documentation.

00:25:40.590 --> 00:25:45.010
So not even -- there is a lot more I didn't
even show, and we have great docs to back

00:25:45.010 --> 00:25:46.010
it up.

00:25:46.010 --> 00:25:47.070
I encourage you to check those out.

00:25:47.070 --> 00:25:51.440
And everything I showed today, all these features,
are available in Chrome Canary now.

00:25:51.440 --> 00:25:55.940
So you can go, check them out, give them a
shot, give us your feedback.

00:25:55.940 --> 00:26:04.369
Thank you guys very much.

00:26:04.369 --> 00:26:08.020
[ Applause ]
And we have some time for questions.

00:26:08.020 --> 00:26:13.180
So I'm going to invite Pavel up on stage with
me.

00:26:13.180 --> 00:26:18.700
And if you have any questions, I encourage
you to line up at the mics.

00:26:18.700 --> 00:26:19.700
Sir?

00:26:19.700 --> 00:26:20.700
&gt;&gt;&gt; Hello.

00:26:20.700 --> 00:26:24.750
I was just wondering how much of this is available
if you use GWIT to develop the Web site?

00:26:24.750 --> 00:26:26.320
&gt;&gt;Paul Irish: GWIT?

00:26:26.320 --> 00:26:27.320
GWIT?

00:26:27.320 --> 00:26:28.420
&gt;&gt;&gt; Google Web toolkit.

00:26:28.420 --> 00:26:32.000
&gt;&gt;Pavel Feldman: It depends on whether you
are using Sourcemaps for GWIT.

00:26:32.000 --> 00:26:36.900
If you are using Sourcemaps, you have got
all the debugging capabilities.

00:26:36.900 --> 00:26:40.300
Sourcemaps and Workspace are working well
together.

00:26:40.300 --> 00:26:42.210
So you get pretty much all of it.

00:26:42.210 --> 00:26:44.610
&gt;&gt;&gt; So it is integrated as the Sass you showed?

00:26:44.610 --> 00:26:46.100
&gt;&gt;Pavel Feldman: Yeah.

00:26:46.100 --> 00:26:51.450
So you will need to take care of generating
JavaScript off your Java.

00:26:51.450 --> 00:26:58.250
And you might need to add a bit of extra to
reload it so that it was reloaded automatically.

00:26:58.250 --> 00:26:59.250
But you can edit Java.

00:26:59.250 --> 00:27:01.450
You can save it to disk.

00:27:01.450 --> 00:27:02.840
Sourcemaps will be catching up.

00:27:02.840 --> 00:27:06.470
You can debug using Workspace and Sass in
the time.

00:27:06.470 --> 00:27:07.850
&gt;&gt;&gt; Cool, thank you.

00:27:07.850 --> 00:27:11.059
&gt;&gt;&gt; Hi, I'm (saying name) from LinkedIn Mobile.

00:27:11.059 --> 00:27:12.520
So Chrome DevTools are amazing.

00:27:12.520 --> 00:27:13.520
They're awesome.

00:27:13.520 --> 00:27:18.230
But what would be even more awesome, right,
is if we could use all these, the heap profile,

00:27:18.230 --> 00:27:20.160
the performance profile in Node.

00:27:20.160 --> 00:27:24.790
And there is a few projects, Node Inspector,
Webkit Agent, Node Agent, that have been doing

00:27:24.790 --> 00:27:27.610
a pretty good job but the problem is that
they can't keep up with the development speed

00:27:27.610 --> 00:27:29.950
of the Chrome DevTool team and the V8 team.

00:27:29.950 --> 00:27:35.010
And I'm curious if there are any plans to
support no debugging memory management in

00:27:35.010 --> 00:27:36.010
Node?

00:27:36.010 --> 00:27:42.919
&gt;&gt;Paul Irish: So node -- I know Node Agent
-- Node Inspector, of course, is not as maintained

00:27:42.919 --> 00:27:43.919
as it was before.

00:27:43.919 --> 00:27:44.919
&gt;&gt;&gt; It's dead.

00:27:44.919 --> 00:27:45.919
Officially dead.

00:27:45.919 --> 00:27:48.570
&gt;&gt;Paul Irish: Node Agent is picking up where
it left off.

00:27:48.570 --> 00:27:49.620
Great profiling capabilities.

00:27:49.620 --> 00:27:54.000
In fact, I was just talking to the author
of it, like, three days ago about getting

00:27:54.000 --> 00:27:56.410
flame chart support inside there.

00:27:56.410 --> 00:27:58.490
Be trivial for him to add.

00:27:58.490 --> 00:28:01.299
Those are all done over the V8 protocol.

00:28:01.299 --> 00:28:05.950
So it's not too hard to bring in the front
end which is completely open source, just

00:28:05.950 --> 00:28:10.880
the Web app, and hook up to the V8 protocol
and bring in those features.

00:28:10.880 --> 00:28:13.559
So --
&gt;&gt;&gt; At the same time, it's hard, right, because

00:28:13.559 --> 00:28:15.220
there is no support for breakpoints.

00:28:15.220 --> 00:28:18.179
There is no support for stepping through code
into Webkit Agent.

00:28:18.179 --> 00:28:25.419
So I'm just curious if is any desire for the
Chrome team to actually enable remote V8 debugging.

00:28:25.419 --> 00:28:33.360
&gt;&gt;Pavel Feldman: So we are not using the old
V8 protocol for debugging in Chrome DevTools

00:28:33.360 --> 00:28:34.650
at the moment.

00:28:34.650 --> 00:28:40.710
We are based on the Webkit or now Chrome remote
debugging protocol.

00:28:40.710 --> 00:28:47.370
So it requires some native code supported
in Node and exposing particular features including

00:28:47.370 --> 00:28:52.430
support of the transport over the WebSockets
for the whole story to work.

00:28:52.430 --> 00:28:54.850
So it is just an effort.

00:28:54.850 --> 00:29:02.410
We are happy to assist there or work with
Node on making it greater, better, and faster.

00:29:02.410 --> 00:29:04.139
But it just requires some work.

00:29:04.139 --> 00:29:05.139
&gt;&gt;&gt; Excellent.

00:29:05.139 --> 00:29:06.989
Thank you.

00:29:06.989 --> 00:29:07.989
&gt;&gt;&gt; Hi.

00:29:07.989 --> 00:29:13.730
I heard there were some experiments at integrating
Code Mirror and ACE into the syntax highlighting.

00:29:13.730 --> 00:29:18.000
Is there any ETA where you are headed with
any of that?

00:29:18.000 --> 00:29:19.160
&gt;&gt;Pavel Feldman: Sure.

00:29:19.160 --> 00:29:23.800
Code Mirror, you can enable it today in settings
and you will be using it is as your default

00:29:23.800 --> 00:29:24.800
editor.

00:29:24.800 --> 00:29:27.809
We are still figuring out the editor story.

00:29:27.809 --> 00:29:33.380
We are unhappy with anything we see because
we need to -- we are kind of a unique situation

00:29:33.380 --> 00:29:38.620
where you need to be able to debug obfuscated
Gmail where lines are tens of thousands of

00:29:38.620 --> 00:29:39.620
characters.

00:29:39.620 --> 00:29:46.250
At the same time, you want to wrap it, native
feedback and feel for the editing.

00:29:46.250 --> 00:29:49.090
So we are still unhappy with everything we
have.

00:29:49.090 --> 00:29:52.490
We are working on the hybrid approach that
would address all of these and make it the

00:29:52.490 --> 00:29:53.610
best editor.

00:29:53.610 --> 00:29:54.610
&gt;&gt;&gt; Cool.

00:29:54.610 --> 00:29:56.000
Thank you.

00:29:56.000 --> 00:29:57.590
&gt;&gt;&gt; Hi there.

00:29:57.590 --> 00:29:59.020
Great stuff.

00:29:59.020 --> 00:30:05.300
The Chrome extension that you showed off,
I don't see it on the DevTools site.

00:30:05.300 --> 00:30:06.920
Is it out or is it?

00:30:06.920 --> 00:30:09.750
Is it just in your Github repo?

00:30:09.750 --> 00:30:11.450
Where is that?

00:30:11.450 --> 00:30:14.220
The Android thing that kicks ass.

00:30:14.220 --> 00:30:16.140
Like, how do we download it?

00:30:16.140 --> 00:30:18.710
&gt;&gt;Pavel Feldman: It is in my github repo.

00:30:18.710 --> 00:30:22.039
&gt;&gt;Paul Irish: This is how I always get to
it.

00:30:22.039 --> 00:30:24.351
&gt;&gt;Pavel Feldman: A little disclaimer.

00:30:24.351 --> 00:30:28.510
The way it works, it bundles ADB.

00:30:28.510 --> 00:30:32.570
It bundles ADB and it works only for Mac only
at this moment.

00:30:32.570 --> 00:30:39.059
It may be easy to make it work on Linux, not
as easy to make it work on Windows because

00:30:39.059 --> 00:30:40.930
of the USB drivers.

00:30:40.930 --> 00:30:45.490
We are working hard to resolve that and make
it useful everywhere and convenient to everybody.

00:30:45.490 --> 00:30:48.370
But it's currently in the preview mode.

00:30:48.370 --> 00:30:49.809
That's why you don't see it on our Web page.

00:30:49.809 --> 00:30:50.809
&gt;&gt;&gt; Okay.

00:30:50.809 --> 00:30:51.809
Thanks.

00:30:51.809 --> 00:30:59.310
&gt;&gt;&gt; The editor features you have shown will
make it much more convenient to use a device

00:30:59.310 --> 00:31:02.650
like a Chromebook Pixel to do real Web development.

00:31:02.650 --> 00:31:08.490
I'm wondering if the Workspace features that
you showed have filesystem access?

00:31:08.490 --> 00:31:13.250
So if you have user local mydev files running
on your machine, will you be able to edit

00:31:13.250 --> 00:31:15.130
those from the Chrome DevTools on the Chromebook?

00:31:15.130 --> 00:31:20.140
&gt;&gt;Pavel Feldman: Under the hood, it is the
filesystem API that's mapping things directly

00:31:20.140 --> 00:31:21.820
to your filesystem.

00:31:21.820 --> 00:31:26.530
On any device that has filesystem, Workspace
will work, including Chrome OS where you can

00:31:26.530 --> 00:31:31.100
map it to your downloads folder or your drive.

00:31:31.100 --> 00:31:37.070
We are generally unhappy with the -- our development
story on Chrome as yet, and we are working

00:31:37.070 --> 00:31:41.610
on it because important things such as version
control integration are missing.

00:31:41.610 --> 00:31:44.650
So we want a complete, full-fledged story
there.

00:31:44.650 --> 00:31:48.370
We are just not there yet.

00:31:48.370 --> 00:31:49.370
&gt;&gt;&gt; Thanks.

00:31:49.370 --> 00:31:50.370
&gt;&gt;&gt; Hello.

00:31:50.370 --> 00:31:52.520
So two -- first one quick question.

00:31:52.520 --> 00:31:57.400
So you were trying when you edited a file
in your editor in Sublime, it will it load

00:31:57.400 --> 00:32:02.789
automatically in DevTools and I guess not
just in the DevTools but, like, in the pages,

00:32:02.789 --> 00:32:03.789
right?

00:32:03.789 --> 00:32:08.340
The question is -- second question is more
about how far are you -- do you think you

00:32:08.340 --> 00:32:10.350
will take DevTools in terms of editing?

00:32:10.350 --> 00:32:16.620
Like, for example, I work on backbone applications
where it would be great if I could jump to

00:32:16.620 --> 00:32:22.780
definition of the method from one class to
its superclass and kind of things.

00:32:22.780 --> 00:32:24.210
&gt;&gt;Pavel Feldman: Okay.

00:32:24.210 --> 00:32:28.940
ID future center refactorings, we are editing
because you want it.

00:32:28.940 --> 00:32:30.780
And we started with the debugging.

00:32:30.780 --> 00:32:33.570
We considered ourselves as a debugging instrumenting
platform.

00:32:33.570 --> 00:32:37.820
But we can see that there is so much failure
that can be added through by adding basic

00:32:37.820 --> 00:32:41.419
editing capabilities that we are on this route
now.

00:32:41.419 --> 00:32:44.940
And the time will show how far we would like
to go there.

00:32:44.940 --> 00:32:48.710
But things like code completion are definitely
in our plans.

00:32:48.710 --> 00:32:53.730
&gt;&gt;Paul Irish: One of the other things -- Chrome
DevTools actually uses -- you have heard of

00:32:53.730 --> 00:32:55.539
the uglify minifier.

00:32:55.539 --> 00:33:02.299
When it was working on the 2.0 with Sourcemaps
support, we helped their crown funding contribution

00:33:02.299 --> 00:33:03.710
for that.

00:33:03.710 --> 00:33:05.321
Similarly, we used Code Mirror.

00:33:05.321 --> 00:33:11.050
Code Mirror is available, and the author behind
Code Mirror has been working on a new kind

00:33:11.050 --> 00:33:16.000
of insight for static analysis of JavaScript
called TURN.

00:33:16.000 --> 00:33:20.070
And we contributed also to that, and we are
watching that project very closely.

00:33:20.070 --> 00:33:26.830
Sir, in the back?

00:33:26.830 --> 00:33:30.700
&gt;&gt;&gt; The things that you showed us with OS
are awesome.

00:33:30.700 --> 00:33:37.580
Do you have any plans to support other frameworks
such as layers or stylus?

00:33:37.580 --> 00:33:44.650
&gt;&gt;Paul Irish: So I should have pointed out
that what I showed was abstracted style support.

00:33:44.650 --> 00:33:48.480
It's all based -- as I mentioned, it is all
based off of Sourcemaps.

00:33:48.480 --> 00:33:52.549
And so nothing in our implementation is specific
to Sass.

00:33:52.549 --> 00:33:55.840
It is just to specific to Sourcemap support.

00:33:55.840 --> 00:34:00.910
So if Sourcemaps are supported inside the
compiler for either layers or stylus, then

00:34:00.910 --> 00:34:04.170
DevTools will start working with them today.

00:34:04.170 --> 00:34:05.170
&gt;&gt;&gt; Thank you.

00:34:05.170 --> 00:34:06.170
&gt;&gt;Paul Irish: All right.

00:34:06.170 --> 00:34:07.170
Thanks, everyone.

00:34:07.170 --> 00:34:08.170
Appreciate it.

00:34:08.170 --> 00:34:08.171
[ Applause ]

