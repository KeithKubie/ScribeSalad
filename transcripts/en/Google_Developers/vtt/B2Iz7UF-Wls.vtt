WEBVTT
Kind: captions
Language: en

00:00:08.964 --> 00:00:10.420
IBRAHIM ULUKAYA: Hi, everyone.

00:00:10.420 --> 00:00:12.760
I'm Ibrahim Ulukaya from
YouTube API Developer

00:00:12.760 --> 00:00:13.990
Relations Team.

00:00:13.990 --> 00:00:17.110
And today we are going to talk
about a new API and set of

00:00:17.110 --> 00:00:20.240
functionalities called YouTube
Live Streaming API.

00:00:20.240 --> 00:00:22.740
Joining me today, Satyajeet
Salgar, who is the product

00:00:22.740 --> 00:00:25.830
manager of YouTube Live &amp; Sports
and Derek Tan, who is

00:00:25.830 --> 00:00:28.850
the [? technique ?] for the
Live Streaming API.

00:00:28.850 --> 00:00:30.700
Thanks so much for joining
me today, guys.

00:00:30.700 --> 00:00:30.980
DEREK TAN: Thank you.

00:00:30.980 --> 00:00:31.970
SATYAJEET SALGAR:
Thanks, Ibrahim.

00:00:31.970 --> 00:00:34.030
IBRAHIM ULUKAYA: So before going
any further, Satyajeet,

00:00:34.030 --> 00:00:35.780
please tell us about
the new YouTube

00:00:35.780 --> 00:00:36.920
live streaming platform.

00:00:36.920 --> 00:00:39.460
SATYAJEET SALGAR: Sure, we're
really excited about the live

00:00:39.460 --> 00:00:41.820
platform that we've built at
YouTube and the kind of

00:00:41.820 --> 00:00:43.410
experiences it's enabled.

00:00:43.410 --> 00:00:45.360
Over the last few months,
we've seen an incredible

00:00:45.360 --> 00:00:47.530
number of events from our
content partners.

00:00:47.530 --> 00:00:50.160
Everything from the Red Bull
Stratos jump, which had over 8

00:00:50.160 --> 00:00:52.860
million concurrent viewers, to
the election of the Pope, to

00:00:52.860 --> 00:00:54.940
the last US presidential
elections.

00:00:54.940 --> 00:00:58.510
And just a number of e-sports
tournaments, gaming events,

00:00:58.510 --> 00:01:00.455
news events, and
sports events.

00:01:00.455 --> 00:01:03.520
The live engineering team at
YouTube does an incredible job

00:01:03.520 --> 00:01:04.640
with our platform.

00:01:04.640 --> 00:01:07.470
We have an incredible stream
quality and features like

00:01:07.470 --> 00:01:08.580
transcoding in the cloud.

00:01:08.580 --> 00:01:12.000
So you only need to send us one
stream and we transcode it

00:01:12.000 --> 00:01:13.760
to all the different
device formats

00:01:13.760 --> 00:01:15.860
and resolutions required.

00:01:15.860 --> 00:01:18.490
Things like adaptive bit rates,
we figure out the right

00:01:18.490 --> 00:01:22.080
stream quality to send to the
user based on their bandwidth.

00:01:22.080 --> 00:01:24.920
DVR, so users can skip
back and forth.

00:01:24.920 --> 00:01:27.880
And we make it really easy to do
things like insert slates,

00:01:27.880 --> 00:01:29.550
insert ad cue points.

00:01:29.550 --> 00:01:32.160
We're really excited about the
kind of experiences this

00:01:32.160 --> 00:01:35.373
platform will enable for
our YouTube creators.

00:01:35.373 --> 00:01:36.980
IBRAHIM ULUKAYA: OK, great.

00:01:36.980 --> 00:01:41.120
Derek, maybe after this talk,
the main question in

00:01:41.120 --> 00:01:43.600
everyone's mind, what's the
Live Streaming API?

00:01:43.600 --> 00:01:46.090
What are the functionalities
coming with this API?

00:01:46.090 --> 00:01:49.720
DEREK TAN: Yeah, the YouTube
Live Streaming API is a set of

00:01:49.720 --> 00:01:53.345
API methods that allow you to
create, update, and manage

00:01:53.345 --> 00:01:54.710
your live events.

00:01:54.710 --> 00:01:58.040
It currently consists of three
major APIs, live broadcast,

00:01:58.040 --> 00:01:59.965
live stream, and live
cue points.

00:01:59.965 --> 00:02:02.790
Live broadcast and live stream
are built upon the

00:02:02.790 --> 00:02:04.110
YouTube Data API.

00:02:04.110 --> 00:02:07.390
Live cue point is built upon
the YouTube Partner API.

00:02:07.390 --> 00:02:11.270
And by using this free API,
you are able to schedule a

00:02:11.270 --> 00:02:15.005
live event, configure the
stream, start and stop the

00:02:15.005 --> 00:02:19.090
live event, enable DVR, enable
recording, and monetize it by

00:02:19.090 --> 00:02:20.627
adding the ad cue point.

00:02:20.627 --> 00:02:22.030
IBRAHIM ULUKAYA: OK.

00:02:22.030 --> 00:02:25.200
In addition to these core
features, actually, what is

00:02:25.200 --> 00:02:27.330
the target developer audience
for this API?

00:02:27.330 --> 00:02:28.540
SATYAJEET SALGAR: Sure.

00:02:28.540 --> 00:02:31.960
The YouTube live streaming is
enabled for a set of YouTube

00:02:31.960 --> 00:02:33.060
content partners.

00:02:33.060 --> 00:02:36.650
We expect the Live API to make
it much easier for them to

00:02:36.650 --> 00:02:38.500
create and manage their
own events.

00:02:38.500 --> 00:02:41.540
In addition, we expect some of
the most interesting uses of

00:02:41.540 --> 00:02:44.280
this API to come from developers
that are building

00:02:44.280 --> 00:02:47.610
tools and apps for these
partners, either new products

00:02:47.610 --> 00:02:50.630
or integrating it into
existing products.

00:02:50.630 --> 00:02:52.890
I believe you're going to demo
one such product later today.

00:02:52.890 --> 00:02:53.540
IBRAHIM ULUKAYA: Yeah.

00:02:53.540 --> 00:02:55.060
That will be rad, actually.

00:02:55.060 --> 00:02:57.680
Actually, we just talked about
the core features.

00:02:57.680 --> 00:03:01.150
And from the developer's
documents, I just saw that

00:03:01.150 --> 00:03:04.240
this API interacts with the
Data API and the Content

00:03:04.240 --> 00:03:05.540
Partner API.

00:03:05.540 --> 00:03:06.970
Derek, can you explain a
little bit about this

00:03:06.970 --> 00:03:08.650
interaction and the philosophy
behind it?

00:03:08.650 --> 00:03:10.550
DEREK TAN: Yeah, sure.

00:03:10.550 --> 00:03:13.890
One philosophy of the new API
is to make it very easy to

00:03:13.890 --> 00:03:15.810
understand and simple to use.

00:03:15.810 --> 00:03:19.240
In the old API, we duplicate
some functionality with the

00:03:19.240 --> 00:03:20.990
Data API and YouTube API.

00:03:20.990 --> 00:03:23.780
In the new design, we just make
it very specific to the

00:03:23.780 --> 00:03:27.660
Live API, and moved the regular
video management and

00:03:27.660 --> 00:03:29.920
functionality to Data
API and Partner API.

00:03:29.920 --> 00:03:33.010
For example, if you want to
monetize your stream, monetize

00:03:33.010 --> 00:03:37.370
your video, you just call the
Partner API to claim the video

00:03:37.370 --> 00:03:41.890
content and then call the Live
Cue Point API to add cue point

00:03:41.890 --> 00:03:43.150
in real time.

00:03:43.150 --> 00:03:46.590
And another example is that if
you want to get the regular

00:03:46.590 --> 00:03:49.500
video metadata, for example,
on how many users like your

00:03:49.500 --> 00:03:51.830
video, just call the Data API.

00:03:51.830 --> 00:03:55.800
And obviously, if you want to
get the broadcast metadata,

00:03:55.800 --> 00:03:58.950
for example, the life cycle
status or broadcast stream

00:03:58.950 --> 00:04:02.250
status, just call
the Live API.

00:04:02.250 --> 00:04:06.810
And if you see the Live API
spec, you should see that the

00:04:06.810 --> 00:04:10.385
new API request and response is
much shorter and clearer.

00:04:10.385 --> 00:04:12.700
IBRAHIM ULUKAYA: Thanks, Derek,
for clearing this up.

00:04:12.700 --> 00:04:15.990
And I just also want to say at
this point that actually the

00:04:15.990 --> 00:04:18.430
Live Streaming API, the
library actually comes

00:04:18.430 --> 00:04:19.920
on this Data API.

00:04:19.920 --> 00:04:22.810
And maybe if you're wondering
where is the Live Streaming

00:04:22.810 --> 00:04:25.990
API in your dev console, once
you enable the Data API, the

00:04:25.990 --> 00:04:29.310
live streaming capabilities
will also be enabled.

00:04:29.310 --> 00:04:32.240
Being said that, actually
are there any new scopes

00:04:32.240 --> 00:04:33.880
introduced with this new API?

00:04:33.880 --> 00:04:38.600
Or are they using the same
scopes that the YouTube Data

00:04:38.600 --> 00:04:39.260
API is using?

00:04:39.260 --> 00:04:40.480
DEREK TAN: Yes.

00:04:40.480 --> 00:04:43.230
Live Broadcast and Live Stream
API are based on the

00:04:43.230 --> 00:04:44.870
YouTube Data API.

00:04:44.870 --> 00:04:48.230
So they share the same OAuth2
scope, which are YouTube doc

00:04:48.230 --> 00:04:49.860
read only and YouTube.

00:04:49.860 --> 00:04:52.625
Live Cue Point API is a part
of the Partner API.

00:04:52.625 --> 00:04:55.440
It uses YouTube partner
as OAuth2 scope.

00:04:55.440 --> 00:04:57.400
IBRAHIM ULUKAYA: OK, I
think that's great.

00:04:57.400 --> 00:04:58.530
Thanks for joining me, guys.

00:04:58.530 --> 00:05:01.590
And I think that's a great
time to start seeing some

00:05:01.590 --> 00:05:05.650
demos and few examples from
more early integrators.

00:05:05.650 --> 00:05:09.050
So maybe a good example to start
is the create broadcast

00:05:09.050 --> 00:05:12.630
example I created, which
actually does OAuth2

00:05:12.630 --> 00:05:16.930
authorization that creates a
broadcast and that creates a

00:05:16.930 --> 00:05:20.670
stream and then binds them
together so that you have

00:05:20.670 --> 00:05:21.630
already a stream.

00:05:21.630 --> 00:05:24.340
You have already scheduled
a broadcast that

00:05:24.340 --> 00:05:26.650
you can just stream.

00:05:26.650 --> 00:05:28.980
Let's go over the example.

00:05:28.980 --> 00:05:32.750
So for this example, we use the
OAuth2 authorization, as I

00:05:32.750 --> 00:05:34.530
described, going through
the Google

00:05:34.530 --> 00:05:36.550
authorization code flow.

00:05:36.550 --> 00:05:40.660
And once the user actually
authorizes us to use their

00:05:40.660 --> 00:05:44.460
credentials, then what we do
is we create our YouTube

00:05:44.460 --> 00:05:49.980
object and create a broadcast
with a title, the scheduled

00:05:49.980 --> 00:05:52.490
start time, scheduled
end time.

00:05:52.490 --> 00:05:53.400
And so I think it's private.

00:05:53.400 --> 00:05:55.050
Status to private.

00:05:55.050 --> 00:05:59.330
We first create an insert
request, execute the request,

00:05:59.330 --> 00:06:02.070
get a response as a
broadcast object.

00:06:02.070 --> 00:06:08.670
So we just print out all the
broadcast object's properties.

00:06:08.670 --> 00:06:11.980
And then we create a stream
in a similar way.

00:06:11.980 --> 00:06:15.530
We get the title, we set
the broadcast title.

00:06:15.530 --> 00:06:18.300
Then we set the CDN format.

00:06:18.300 --> 00:06:22.120
The content distributed
format is 1080p.

00:06:22.120 --> 00:06:26.430
And we set the ingestion
type as RTMP.

00:06:26.430 --> 00:06:29.460
Then we create an
insert request.

00:06:29.460 --> 00:06:32.790
But with the execution of the
insert request, we get a

00:06:32.790 --> 00:06:35.110
response as a stream.

00:06:35.110 --> 00:06:36.860
And we just print
out that one.

00:06:36.860 --> 00:06:38.550
And then we create
a bind request.

00:06:38.550 --> 00:06:43.870
And we actually execute the bind
request and then we'll be

00:06:43.870 --> 00:06:45.190
ready to go.

00:06:45.190 --> 00:06:50.410
So let's actually do this
and see how it works.

00:06:50.410 --> 00:06:52.160
So we create a broadcast.

00:06:52.160 --> 00:06:56.730
Let's say we create
a broadcast title

00:06:56.730 --> 00:06:57.980
as broadcast 1.

00:07:01.250 --> 00:07:05.980
We get the broadcast title,
start time, end time.

00:07:05.980 --> 00:07:08.540
Let's create stream 2.

00:07:08.540 --> 00:07:09.440
We get the stream.

00:07:09.440 --> 00:07:10.860
Oh yes.

00:07:10.860 --> 00:07:12.750
And there's one thing I actually
added into the

00:07:12.750 --> 00:07:16.020
example that you also return the
ingestion address, which

00:07:16.020 --> 00:07:18.940
you will be using while
you're streaming.

00:07:18.940 --> 00:07:23.310
So once you create this stream,
you actually get an

00:07:23.310 --> 00:07:25.320
ingestion address that
you will put

00:07:25.320 --> 00:07:27.940
into your actual streamer.

00:07:27.940 --> 00:07:29.100
And let's see in the--

00:07:29.100 --> 00:07:32.490
actually in all sides, while we
refresh our all sides, you

00:07:32.490 --> 00:07:36.050
see the broadcast is
already created.

00:07:36.050 --> 00:07:38.000
And once we see in the
Channel Settings, we

00:07:38.000 --> 00:07:40.330
also check the streams.

00:07:40.330 --> 00:07:43.140
And in Streams, we
also see that our

00:07:43.140 --> 00:07:45.810
stream is already created.

00:07:45.810 --> 00:07:48.245
I think this is a good time
we can just check

00:07:48.245 --> 00:07:50.070
all the other examples.

00:07:50.070 --> 00:07:54.410
Our first example is from
Elgato Game Capture HD.

00:07:54.410 --> 00:07:57.530
MALE SPEAKER: With Elgato Game
Capture HD, you can record

00:07:57.530 --> 00:08:01.710
your PlayStation and Xbox game
play to a Mac or a PC and

00:08:01.710 --> 00:08:04.010
share your clips with
your friends.

00:08:04.010 --> 00:08:06.500
Now YouTube has made it
really easy to live

00:08:06.500 --> 00:08:08.400
stream your game play.

00:08:08.400 --> 00:08:10.030
Go live with the click
of a button.

00:08:10.030 --> 00:08:10.380
[GUNFIRE]

00:08:10.380 --> 00:08:13.405
GAME CHARACTER: If you need
me to move, just fire it.

00:08:13.405 --> 00:08:21.325
[GUNFIRE]

00:08:21.325 --> 00:08:27.760
[MUSIC PLAYING]

00:08:27.760 --> 00:08:29.880
IBRAHIM ULUKAYA: Let's see
another example from Capella

00:08:29.880 --> 00:08:31.590
Systems' Cambria Live.

00:08:35.289 --> 00:08:36.789
FEMALE SPEAKER: Cambria
Live is an [INAUDIBLE]

00:08:36.789 --> 00:08:40.409
level software that encodes live
broadcasters in real time

00:08:40.409 --> 00:08:43.020
and uploads them to popular
streaming service.

00:08:43.020 --> 00:08:46.200
With YouTube Live Channel, you
can add account from Account

00:08:46.200 --> 00:08:49.610
Manager, enter email and
password registered with

00:08:49.610 --> 00:08:52.310
YouTube Live Channel.

00:08:52.310 --> 00:08:55.520
Please note that you must be
certified contents partner in

00:08:55.520 --> 00:08:57.580
order to stream to YouTube
Live Channel.

00:09:01.750 --> 00:09:05.130
Once you enter email and
password, YouTube Live account

00:09:05.130 --> 00:09:08.060
is added in the Account
Manager.

00:09:08.060 --> 00:09:11.490
You can then select YouTube from
target and it will bring

00:09:11.490 --> 00:09:13.895
up all channels registered
from your account.

00:09:20.570 --> 00:09:24.380
Once specify channel, it
automatically inputs suggested

00:09:24.380 --> 00:09:26.655
presets by YouTube for optimal
video quality.

00:09:36.170 --> 00:09:40.320
You can simply start streaming
all the streams by clicking on

00:09:40.320 --> 00:09:41.570
Start Streaming.

00:09:46.000 --> 00:09:48.860
Even after it's started
streaming, you can change

00:09:48.860 --> 00:09:52.290
video quality by clicking on
Show Other Band Settings.

00:09:52.290 --> 00:09:55.390
You can modify frame size,
frame rate, video aspect

00:09:55.390 --> 00:09:57.090
ratio, and also bit rate.

00:10:02.610 --> 00:10:05.580
You can also preview streaming
preview page by clicking

00:10:05.580 --> 00:10:09.890
Streaming Preview from the
encode settings, allowing you

00:10:09.890 --> 00:10:11.930
to verify the stream looks OK.

00:10:22.370 --> 00:10:24.870
Cambria Live comes with a very
powerful edit tool called

00:10:24.870 --> 00:10:26.210
Cambria Live Edit.

00:10:26.210 --> 00:10:28.970
We use with our file based
transcoding software called

00:10:28.970 --> 00:10:30.540
Cambria File Convert.

00:10:30.540 --> 00:10:33.210
User can create highlight clips
on the file during a

00:10:33.210 --> 00:10:36.310
live event by simply setting in
and out points within the

00:10:36.310 --> 00:10:38.780
Cambria Live Edit timeline.

00:10:38.780 --> 00:10:41.590
This edit point data then
transfers to Cambria File

00:10:41.590 --> 00:10:44.610
Convert, which can generate
highlight clips in multiple

00:10:44.610 --> 00:10:48.780
video formats and also upload
the encoded files to FTP site

00:10:48.780 --> 00:10:51.320
or YouTube VOD channel.

00:10:51.320 --> 00:10:55.590
You can seek in and out points
at any point of the live event

00:10:55.590 --> 00:10:58.070
and create multiple highlight
clips without

00:10:58.070 --> 00:10:59.320
having any down time.

00:11:01.850 --> 00:11:04.520
There is also an option to
immediately re-import the

00:11:04.520 --> 00:11:07.160
segment back to live, without
sending it to

00:11:07.160 --> 00:11:08.720
Cambria File Convert.

00:11:08.720 --> 00:11:11.650
So while you're doing continuous
streaming, you can

00:11:11.650 --> 00:11:14.560
re-stream highlights without
having any down time.

00:11:27.720 --> 00:11:30.920
As you can see, Cambria Live is
a very unique and powerful

00:11:30.920 --> 00:11:34.120
production tool that enables and
enhances professional live

00:11:34.120 --> 00:11:36.250
streaming broadcast
production.

00:11:36.250 --> 00:11:38.860
If you'd like to know more about
Cambria Live, please

00:11:38.860 --> 00:11:45.232
visit our website at
www.capellasystems.net.

00:11:45.232 --> 00:11:47.520
IBRAHIM ULUKAYA: Well, that
was the demos, and I think

00:11:47.520 --> 00:11:48.880
it's a great API.

00:11:48.880 --> 00:11:51.230
And thanks for joining me, guys
today, for this hour.

00:11:51.230 --> 00:11:51.500
SATYAJEET SALGAR: Thank you.

00:11:51.500 --> 00:11:53.120
DEREK TAN: Thanks
for having us.

00:11:53.120 --> 00:11:55.300
IBRAHIM ULUKAYA: Now I think you
guys are really excited.

00:11:55.300 --> 00:11:59.090
And I hope you enjoy this API
and start using it right away.

00:11:59.090 --> 00:12:00.340
Have a great day.

