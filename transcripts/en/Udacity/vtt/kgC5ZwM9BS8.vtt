WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.000
So far, we've been doing--in our Phyton IDE--

00:00:03.000 --> 00:00:06.000
we've been doing what are called sequential scans.

00:00:06.000 --> 00:00:11.000
And a sequential scan is where you have a list of something.

00:00:11.000 --> 00:00:13.000
In our case, links.

00:00:13.000 --> 00:00:16.000
We have this list of links

00:00:16.000 --> 00:00:19.000
that have these IDs--link 1, link 2, link 3.

00:00:19.000 --> 00:00:22.000
And we've been doing things like find the link with the ID of 2,

00:00:22.000 --> 00:00:25.000
so in which case we write a loop to

00:00:25.000 --> 00:00:28.000
go over the list and find the one who has ID 2.

00:00:28.000 --> 00:00:30.000
Or you just eyeball it by hand

00:00:30.000 --> 00:00:33.000
and answer your quiz just by writing in the answer by hand,

00:00:33.000 --> 00:00:36.000
which is actually totally fine because you went through the same process.

00:00:36.000 --> 00:00:39.000
You had to look through this whole list of links by hand.

00:00:39.000 --> 00:00:42.000
Now, that works fine if you have 25 links,

00:00:42.000 --> 00:00:45.000
but if you have a million links or a billion links,

00:00:45.000 --> 00:00:49.000
iterating over that entire list is going to take some time,

00:00:49.000 --> 00:00:52.000
and we want to make our websites fast,

00:00:52.000 --> 00:00:54.000
or at least reasonably responsive.

00:00:54.000 --> 00:00:56.000
So that's going to be troublesome.

00:00:56.000 --> 00:01:00.000
So I'd like to introduce you to a new concept called Indexes.

00:01:00.000 --> 00:01:03.000
And index is just like an index in a book.

00:01:03.000 --> 00:01:05.000
They make lookups faster.

00:01:05.000 --> 00:01:08.000
One index you're probably familiar with already is the hashtable.

00:01:08.000 --> 00:01:11.000
So in Python you can have a dictionary

00:01:11.000 --> 00:01:13.000
that looks something like this--

00:01:13.000 --> 00:01:16.000
that is a mapping--a key--to a value.

00:01:16.000 --> 00:01:18.000
Let's assign this to a variable.

00:01:18.000 --> 00:01:20.000
We'll call this just index.

00:01:20.000 --> 00:01:23.000
Now, you can do very fast lookups in your code

00:01:23.000 --> 00:01:25.000
by writing something that looks like this,

00:01:25.000 --> 00:01:30.000
which we'll refer to the index key 2 of this hash table.

00:01:30.000 --> 00:01:32.000
And when you do a hashtable lookup--

00:01:32.000 --> 00:01:34.000
you learned this in CS 101--

00:01:34.000 --> 00:01:37.000
we hash this value, we find it in the hashtable,

00:01:37.000 --> 00:01:39.000
and then we return the key--

00:01:39.000 --> 00:01:41.000
or we return the value.

00:01:41.000 --> 00:01:45.000
We don't have to scan over every element in the list and see if it matches our constraint.

00:01:45.000 --> 00:01:47.000
We can jump immediately to that element.

00:01:47.000 --> 00:01:50.000
And that makes queries run much faster.

00:01:50.000 --> 00:01:54.000
Okay, so let's play around with this in the IDE a little bit

00:01:54.000 --> 00:01:58.000
and see what we can do.

