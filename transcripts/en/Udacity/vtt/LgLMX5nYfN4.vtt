WEBVTT
Kind: captions
Language: en

00:00:00.420 --> 00:00:02.770
Alright. So, we've actually done pretty well. So through all of

00:00:02.770 --> 00:00:04.980
this, we finally figured out what decision trees actually are. We know

00:00:04.980 --> 00:00:08.029
what they represent. We know how expressive they are. We have

00:00:08.029 --> 00:00:13.560
an algorithm that let's us build the decision trees in an effective

00:00:13.560 --> 00:00:17.270
way. We've done just about everything there is to do with

00:00:17.270 --> 00:00:20.710
decision trees, but there is still a couple of open questions that

00:00:20.710 --> 00:00:23.010
I want to think about. So, here's a couple of them and

00:00:23.010 --> 00:00:25.280
I want you to, to think about and then we'll discuss them.

00:00:26.360 --> 00:00:30.060
So, so far all of our examples that we've used. All

00:00:30.060 --> 00:00:33.790
the the things we've been thinking about for good pedagogical reasons. We

00:00:33.790 --> 00:00:39.050
had not only discreet outputs but we also had discreet inputs. So

00:00:39.050 --> 00:00:43.020
one question we might ask ourselves, is what happens if we have,

00:00:45.400 --> 00:00:49.070
continuous attributes? So Michael, let me ask

00:00:49.070 --> 00:00:51.620
you this. Let's say we had some continuous

00:00:51.620 --> 00:00:53.360
attributes. We weren't just asking whether someone's an

00:00:53.360 --> 00:00:54.900
animal or whether they're human or whether it's

00:00:54.900 --> 00:00:57.360
raining outside or we really cared about age

00:00:58.380 --> 00:01:00.870
or weight or distance or anything else that

00:01:00.870 --> 00:01:02.930
might have a continuous attribute. How are we

00:01:02.930 --> 00:01:04.780
going to make that work in a decision tree?

00:01:04.780 --> 00:01:07.110
&gt;&gt; Well, I guess the literal way to do it would

00:01:07.110 --> 00:01:10.430
be for something like age to have a branching factor that's equal

00:01:10.430 --> 00:01:11.870
to the number of possible ages.

00:01:11.870 --> 00:01:17.190
&gt;&gt; Okay, so that's one, one possibility. So we stick in age and then

00:01:17.190 --> 00:01:22.507
we have one. 1.0, we have one for 1.1, we

00:01:22.507 --> 00:01:27.742
have one for 1.11, we have one for 1.111

00:01:27.742 --> 00:01:32.620
&gt;&gt; Ahh, I see. Alright. Well, at the very least, okay. Heheheh. What

00:01:32.620 --> 00:01:35.970
if, what if we only included ages that were in the training set?

00:01:35.970 --> 00:01:38.430
Presumably there's at least a finite number of those. Oh,

00:01:38.430 --> 00:01:40.510
we could do that. We could just do that, except

00:01:40.510 --> 00:01:42.500
what are we going to do then when we come up

00:01:42.500 --> 00:01:46.660
with something in the future that wasn't in the training session.

00:01:46.660 --> 00:01:49.580
&gt;&gt; Oh, right. Can we look at the testing set?

00:01:49.580 --> 00:01:52.700
&gt;&gt; No were not allowed to look at the testing set. That is cheating,

00:01:52.700 --> 00:01:55.640
and not the kind of good cheating that we do when we pic good representation.

00:01:55.640 --> 00:02:01.690
&gt;&gt; Okay, fair enough. Well we could, we could Ranges. What about ranges?

00:02:01.690 --> 00:02:04.720
Isn't that the way we cover more than just individual values?

00:02:04.720 --> 00:02:05.620
&gt;&gt; Give me an example.

00:02:05.620 --> 00:02:09.090
&gt;&gt; Say ages you know, in the 20s.

00:02:09.090 --> 00:02:12.480
&gt;&gt; Okay, so, huh. How would we represent that

00:02:12.480 --> 00:02:18.970
with a decision tree? Let's say in the 20s. Age.

00:02:18.970 --> 00:02:19.570
&gt;&gt; How we do that.

00:02:19.570 --> 00:02:22.780
&gt;&gt; You could do like age, element sign, bracket.

00:02:22.780 --> 00:02:23.680
&gt;&gt; 20.

00:02:23.680 --> 00:02:27.400
&gt;&gt; 20 comma 21, or, or 29 or 30 right

00:02:27.400 --> 00:02:28.730
per end.

00:02:28.730 --> 00:02:33.860
&gt;&gt; Yeah it's too much. Why don't I just say age

00:02:35.460 --> 00:02:42.200
Is between less is, let's see, greater than or equal to, 20 and, less than 30.

00:02:42.200 --> 00:02:47.200
And just draw a big oval for that. Alright? So that's a range, so

00:02:47.200 --> 00:02:51.900
that's all numbers between, 20 and 30 inclusive of 20 but not 30 Right.

00:02:51.900 --> 00:02:52.460
&gt;&gt; Yeah.

00:02:53.810 --> 00:02:56.950
&gt;&gt; And what's good about that is that's a question. You are either in your

00:02:56.950 --> 00:03:05.118
20s or you are not. So, the output of that is actually true or false.

00:03:05.118 --> 00:03:08.170
&gt;&gt; So, I guess the good news there is that now

00:03:08.170 --> 00:03:10.960
we know how to evaluate attributes like that because we have

00:03:10.960 --> 00:03:13.840
a formula from ID3 that tells you what to do.

00:03:13.840 --> 00:03:17.220
But seems like there's an awful lot of different ones to check.

00:03:17.220 --> 00:03:18.930
&gt;&gt; Right, and in fact if it's

00:03:18.930 --> 00:03:22.010
truly a continuous variable, there are in principal an infinite number of

00:03:22.010 --> 00:03:25.170
them checked. But we can do now the sort of cheating you wanted

00:03:25.170 --> 00:03:27.750
to do before. We can just look at the training set, and

00:03:27.750 --> 00:03:30.920
we could try to pick questions that cover the sorts of data in

00:03:30.920 --> 00:03:34.080
the training set. So, for example, if all of the values are

00:03:34.080 --> 00:03:36.990
in the 20s, then there is no point of even asking the question.

00:03:36.990 --> 00:03:40.240
You will start just split instead upon values that were, say less than

00:03:40.240 --> 00:03:43.990
25 or greater than 25, and you could imagine all kinds of ways

00:03:43.990 --> 00:03:46.370
where you might do that. You might look at all of the values that show up in

00:03:46.370 --> 00:03:49.720
the training set, and say well, I am going to do a binary search. So, I am

00:03:49.720 --> 00:03:52.740
just going to create an attribute for Less

00:03:52.740 --> 00:03:54.280
than half of whatever is in the training set

00:03:54.280 --> 00:03:55.920
or greater than half of whatever the range

00:03:55.920 --> 00:03:57.520
is in the training set. Does that make sense?

00:03:57.520 --> 00:03:58.800
&gt;&gt; Yeah, that's clever.

00:03:58.800 --> 00:04:00.900
&gt;&gt; Right. Thank you. I just made that up on the

00:04:00.900 --> 00:04:03.560
spot. Okay, so you do those sorts of things and that's how

00:04:03.560 --> 00:04:06.995
you would deal with continuous attributes. That brings me to a next

00:04:06.995 --> 00:04:09.070
question, I'm going to actually do this as a quiz because I

00:04:09.070 --> 00:04:12.620
want an answer from our audience.

