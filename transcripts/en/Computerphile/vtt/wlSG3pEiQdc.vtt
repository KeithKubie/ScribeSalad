WEBVTT
Kind: captions
Language: en

00:00:00.030 --> 00:00:02.820
So let's have a little look at message authentication codes

00:00:03.129 --> 00:00:07.948
Which are slightly more interesting than they sound so people shouldn't which off yet on the internet when we send messages

00:00:08.139 --> 00:00:12.899
We often send them encrypted the idea being that we don't want people to read them that makes a lot of sense

00:00:13.110 --> 00:00:14.740
the issue is that

00:00:14.740 --> 00:00:19.170
Not being able to read the message doesn't mean you can't interfere with the message. You can't start changing the message

00:00:19.869 --> 00:00:25.499
Trying to I've erect the communication or alter surreptitiously the communication to say something that you want

00:00:26.410 --> 00:00:30.029
This is where message authentication codes become a really big deal

00:00:32.770 --> 00:00:37.290
Max as we call them are attached to most of the messages that get sent on the internet however

00:00:37.290 --> 00:00:42.899
They're built into the cypher or they are appended to every message that gets sent even if it's encrypted

00:00:43.660 --> 00:00:46.439
And they basically guarantee that the message haven't been changed

00:00:47.140 --> 00:00:49.140
So let's have a little bit of a look at that

00:00:49.239 --> 00:00:55.288
But first let's have a quick look at an example of what you can do if you start officially changing ciphertext

00:00:55.480 --> 00:00:57.160
usually when we're encrypting data

00:00:57.160 --> 00:01:02.459
online we are view the block cipher or use a stream cipher like they each have pros and cons and a

00:01:02.800 --> 00:01:06.839
Detailed look at each of those is for a different time, but a stream cipher. They're quite common

00:01:06.840 --> 00:01:11.549
You know when you do things like streaming video because they let you often seek straight to the middle of somewhere

00:01:11.979 --> 00:01:15.419
And it also very very quick right so mobile communications

00:01:15.420 --> 00:01:18.299
You stream cyphers quite a lot instead of encrypting a message

00:01:18.580 --> 00:01:22.139
Of a key it will actually just use the key to generate a long

00:01:22.299 --> 00:01:29.129
Pseudo-Random key stream for as long as it's required and then we use xor to actually perform the encryption so basically we start

00:01:29.200 --> 00:01:36.630
Flipping bits of a plaintext to get to the ciphertext now the difficulty with this is that we can bend as a sort of malicious

00:01:37.060 --> 00:01:41.790
Third party just flip the bits back all right so we can flip the bits in the ciphertext

00:01:41.790 --> 00:01:44.669
And they will cause a direct change in the input all right

00:01:44.670 --> 00:01:47.489
So I'm going to show a quick example just to show you the kind of problem

00:01:47.490 --> 00:01:50.430
We're dealing with so I've got here a an xor calculated

00:01:50.430 --> 00:01:55.559
I found so I'm going to put in a message, please send my 100 pounds

00:01:55.560 --> 00:01:58.829
This is just a calculator who doesn't actually perform Keystream generations

00:01:58.920 --> 00:02:02.100
I've got a key stream that I've I'm going to paste it in here. So this is my key stream

00:02:02.100 --> 00:02:04.229
Which is just in hex? Well, that's your stream

00:02:04.229 --> 00:02:08.999
Come from is not just oh, I will actually generated it by just putting random nonsense into another stream cipher

00:02:09.000 --> 00:02:12.989
You could generate this any way you like it has to appear Random if it's not random

00:02:13.569 --> 00:02:18.279
Enuine Rules have all the straight incisor for the sake of this small example. Which is just random enough

00:02:18.280 --> 00:02:22.780
So you know so if I calculate the xor on this we get a message in let's say

00:02:23.359 --> 00:02:27.609
Hexadecimal which is completely nonsense right? This is our encrypted message if you

00:02:27.950 --> 00:02:29.109
View this as Ascii

00:02:29.109 --> 00:02:34.209
It won't say this and it won't say anything useful at all the problem is if I start changing the bits here

00:02:34.209 --> 00:02:40.179
And we reverse this process for decryption. We can actually change the amount I get sent like which unfortunately

00:02:40.180 --> 00:02:42.549
This is a purely hypothetical example. I don't actually get any money

00:02:42.549 --> 00:02:45.938
So in a block cipher because the whole block is encrypted as one

00:02:46.219 --> 00:02:51.429
Usually any kind of bit change in this ciphertext will completely wreck the output when you try and decrypt it

00:02:51.549 --> 00:02:54.938
That is not true of a stream cipher a stream cipher is one bit at a time

00:02:55.129 --> 00:02:57.188
which means that if I change a bit in my

00:02:58.879 --> 00:03:00.879
Ciphertext I can flip bits in my

00:03:01.669 --> 00:03:05.948
Plaintext so let's try this if I put my encoded in hex in

00:03:06.620 --> 00:03:12.399
my input the key stays the same and we can't play it the xor you can see that we've

00:03:12.949 --> 00:03:19.419
Decrypted two, please send micro hundred pounds, but if I flip, so these each of these bytes here

00:03:20.060 --> 00:03:25.599
Corresponds to a bite of this ascii if I change this to a 31, and then I can't play the xor on it

00:03:25.599 --> 00:03:27.579
I'm suddenly being sent 900 pounds

00:03:27.579 --> 00:03:31.839
That's a huge profit if we weren't doing something else which of course is what I'm about to get to

00:03:31.970 --> 00:03:34.539
extreme size will be completely useless practically because

00:03:35.030 --> 00:03:39.339
you could just change the message even if you didn't know what it is things like bank transactions and

00:03:39.769 --> 00:03:42.309
Logins and things like this are always sent in the same format

00:03:42.310 --> 00:03:44.379
It doesn't make sense for a bank to change the format

00:03:44.379 --> 00:03:49.478
They use all the time so although they're going to be more complicated than please send Mike person

00:03:49.479 --> 00:03:55.839
Please send Mike which is computer although very more complicated than this they're not a lot more complicated and so the same bit will often

00:03:56.659 --> 00:03:58.250
Correspond to the same

00:03:58.250 --> 00:04:00.079
part of the transaction

00:04:00.079 --> 00:04:04.899
Account numbers the values this kind of thing so we can't allow people halfway

00:04:05.180 --> 00:04:09.159
Middlemen to start flipping bits because it's Gonna cause a real problem

00:04:09.799 --> 00:04:15.279
So people have luckily spotted this problem and dealt with it already right, so I'm going to explain how it's done

00:04:15.280 --> 00:04:18.099
Well, you can imagine we might do is a bit like a checksum, right?

00:04:18.099 --> 00:04:21.639
So we've got a message here right that we want to try and verify

00:04:22.279 --> 00:04:26.169
That haven't been tampered with so I'm sending you a message. This is my message

00:04:26.510 --> 00:04:30.279
So what I do is I hash this message, or I can't paid chips

00:04:30.280 --> 00:04:31.150
I'm on it or something like that

00:04:31.150 --> 00:04:33.970
And I append that hash to the end of the message

00:04:34.040 --> 00:04:37.599
so think back to our video on Char one the hash is just a

00:04:38.030 --> 00:04:40.030
usually shorter fixed length

00:04:40.250 --> 00:04:45.550
String that is essentially a summary or fingerprint of this message and the idea usually is that we can't

00:04:45.650 --> 00:04:51.610
Find another hash for a different message, but it's the same so the problem here. Can you finish what it is?

00:04:52.370 --> 00:04:55.209
Surely you can just still change yeah

00:04:55.210 --> 00:05:00.550
It's totally useless like I've don't do this if you're watching this please don't quit the video now and go brilliant

00:05:00.550 --> 00:05:05.229
We've got the solution and the problem is if I'm a third party I intercept this message. I stop the transmission

00:05:05.230 --> 00:05:09.129
I then changed this message to be whatever. I want and then I

00:05:09.950 --> 00:05:12.580
Recompute the hash and attach it and then the person

00:05:12.920 --> 00:05:17.800
Verifying this message on the other end hashes it goes all the hashes match. This is the kind of naive approach

00:05:17.900 --> 00:05:19.929
Which is isn't going to work long term?

00:05:20.000 --> 00:05:20.620
All right

00:05:20.620 --> 00:05:25.899
This works on like your disk for making sure that a file hasn't got like checksum errors and things like this

00:05:26.030 --> 00:05:31.360
Beyond that if a security not going to work what we need to have is some kind of shared secret like wall of these things

00:05:31.360 --> 00:05:34.149
So let's imagine that you and I have shared a key okay?

00:05:34.280 --> 00:05:36.610
Right so we have this secret key that only you and I know

00:05:36.920 --> 00:05:40.569
What we can do is we can take our message, and we can instead

00:05:41.390 --> 00:05:43.390
produce a hash of

00:05:43.550 --> 00:05:49.840
K appended to the message like this right again. Don't quit the video yet. We're not I'm going to hit ourselves

00:05:49.910 --> 00:05:52.689
This is better right it's not complete solution

00:05:52.690 --> 00:05:55.779
But it's better the nice thing about this is that because I knew you and I know the key

00:05:56.210 --> 00:05:58.479
Right which is it kind of the assumption of encryption?

00:05:59.090 --> 00:06:01.869
Then no one else can change the message they alter the message

00:06:02.120 --> 00:06:05.859
They aren't going to be able to recompute this hash because they don't have the key that's the idea

00:06:05.860 --> 00:06:13.030
So this is called a message authentication code now. That works. Okay. The problem is the hash functions. We use like Sha-1 and

00:06:15.530 --> 00:06:18.460
Sha-256 are based around this merkle-damgard construction

00:06:19.340 --> 00:06:25.239
Which essentially changes their internal state and the problem is you can kind of resume that state and basically?

00:06:25.490 --> 00:06:26.720
append to the message

00:06:26.720 --> 00:06:30.369
We can maybe talk about laser extension attacks another time exactly how they work

00:06:30.370 --> 00:06:35.859
But the idea is that I could append to this message and be able to calculate a new hash

00:06:36.320 --> 00:06:40.719
Reasonably well right, and it's not that difficult to do as long as I can guess the length of the ed Key

00:06:40.720 --> 00:06:46.720
Right which is not that hard compared to getting the actual key so this isn't going to work for current hash function Ja three isn't?

00:06:46.940 --> 00:06:52.150
susceptible for this, but Shafi doesn't see as much as ShA-256 at Moment, so

00:06:52.790 --> 00:06:55.749
This brings us on to our kind of true say our actual

00:06:56.030 --> 00:07:01.269
Usable technique called the h Mac which is the h ma see the Keyed hash?

00:07:01.850 --> 00:07:03.160
Message authentication code

00:07:03.160 --> 00:07:09.910
It's actually pretty similar to a standard message of indication code except with two hashes involved and it's completely immune to length extension attacks

00:07:09.980 --> 00:07:14.439
So what we do is we take our key and we use it to derive two

00:07:15.170 --> 00:07:23.110
Sub Keith's like k 1 and k 2 so this is k 2 this is k 1 and then we calculate our hash of

00:07:23.630 --> 00:07:28.180
K 1 with our message and then we append that to k 2

00:07:28.850 --> 00:07:30.680
And we hash it again

00:07:30.680 --> 00:07:33.729
Okay, so q nice animation

00:07:34.460 --> 00:07:38.710
But the idea is you can't perform the same length extension attack on?

00:07:39.320 --> 00:07:45.879
This message because essentially we would have to know what the internal state of our hash function was after this middle point

00:07:45.880 --> 00:07:48.430
Which we wouldn't know like we were as we do know it here

00:07:48.430 --> 00:07:51.909
I mean, I think only personally I will be happy to derive

00:07:51.910 --> 00:07:55.240
Is that Ia there's no massive got a very good question okay?

00:07:55.240 --> 00:08:01.539
So be it either derived by basically taking two constants and xor in them with the key separately okay?

00:08:01.640 --> 00:08:07.569
So we have one constant then we just compare what they are on person idling. Yeah, what's the I pad?

00:08:08.600 --> 00:08:16.300
RB inner Pad is 36 and the outer Pad is 5C. Okay, this inner Pad here is the iPad?

00:08:18.080 --> 00:08:23.199
Which is oh what concerns the other half of the I'll pass along on a minute I?

00:08:24.770 --> 00:08:26.770
think

00:08:27.500 --> 00:08:29.770
the age mat construction was first constructed in

00:08:30.020 --> 00:08:36.670
1996 so we this one did like actually this doesn't stand for I in terms of information, or you know?

00:08:37.729 --> 00:08:39.190
Internet or anything webby?

00:08:39.190 --> 00:08:45.340
This is it's this hyper internal, so the iPad is our x 36 in hex the outer Pad 53 those were chosen

00:08:45.340 --> 00:08:50.470
Sort of arbitrarily. It's not very important what they are actually these are kind of like nothing up my sleeve numbers

00:08:51.530 --> 00:08:53.530
but they have it they have a

00:08:53.700 --> 00:08:56.879
For people who watch David Wells's video. They have a large hamming distance between the two

00:08:58.060 --> 00:09:04.349
But the point is that they have they have that many bits in common, and they're not exactly the same which is crucial

00:09:07.060 --> 00:09:10.560
Look more and more random as we go and at the same time

00:09:10.560 --> 00:09:15.029
We're bringing in bits from this message to further increase the appearance of randomness

00:09:15.030 --> 00:09:21.480
But also to make sure that this char function is calculating a digest on this specific message rather than just a general one

00:09:21.480 --> 00:09:23.480
That's the same every time for this

