WEBVTT
Kind: captions
Language: en

00:11:24.746 --> 00:11:26.746
...

00:12:06.656 --> 00:12:08.656
...

00:12:22.813 --> 00:12:23.429
. Google Cloud Platform on a 
shoestring Budget 

00:27:29.876 --> 00:27:32.549
   &gt;&gt; COLT MCANLIS: I love the 
first person that claps.

00:27:36.093 --> 00:27:38.093
A round of applause for this man
up 

00:27:39.160 --> 00:27:41.160
here, starting to clap for the 
presenter.

00:27:43.877 --> 00:27:45.705
Welcome to Day Two of Google 
I/O. Everyone properly 

00:27:45.706 --> 00:27:48.765
caffeinated today? No? Okay. 
Good to know. 

00:27:50.391 --> 00:27:52.843
I've got to tell you, when we 
actually got this talk agreed 

00:27:52.844 --> 00:27:55.722
upon, they came to me. They 
said, all right, you know, we 

00:27:55.723 --> 00:27:57.723
love 

00:27:59.604 --> 00:28:01.848
the title of your talk, GCP on a
shoestring k budget, helping 

00:28:01.849 --> 00:28:03.875
developers save on money, when 
do you want to give the talk?

00:28:08.395 --> 00:28:10.395
I said Day Three, 8:30 in the 
morning.

00:28:12.713 --> 00:28:17.215
No other possible opportunity 
there. You want to know why? 

00:28:17.216 --> 00:28:19.446
Because the people who are 
willing to go through two days 

00:28:19.447 --> 00:28:21.518
of standing in the sun and wake 
up at 6:00 a.m.

00:28:25.009 --> 00:28:27.083
to stand in the security line to
get in the seats by 8:30, they 

00:28:27.084 --> 00:28:30.360
care about saving money on 
Google Cloud Platform, right? 

00:28:30.361 --> 00:28:32.361
    Exactly.

00:28:35.078 --> 00:28:37.312
So thank you for being here. 
When we get a chance to talk to 

00:28:37.313 --> 00:28:41.222
a lot of developers around the 
world, I find there's generally 

00:28:41.223 --> 00:28:44.896
two buckets of companies fall 
into when you're talking about 

00:28:44.897 --> 00:28:47.757
saving costs. 
    The first one is the large 

00:28:47.758 --> 00:28:50.684
companies with established code 
bases. They may have expected 

00:28:50.685 --> 00:28:53.326
workloads that come through 
Google Cloud, but the 

00:28:54.757 --> 00:28:56.188
predominant conversations are, 
if you make this change and this

00:28:56.189 --> 00:28:58.845
change, you can save a lot of 
money. And their response is 

00:28:58.846 --> 00:29:01.306
always along the lines of, well,
how much would that cost to 

00:29:01.307 --> 00:29:03.767
implement? We've got this legacy
code base. 

00:29:05.591 --> 00:29:07.445
You know, Bill over here is 
really attached to that API, we 

00:29:07.446 --> 00:29:09.446
don't want to get rid of that.

00:29:11.121 --> 00:29:12.955
Basically, any conversations, 
they have an opportunity cost 

00:29:12.956 --> 00:29:14.956
tradeoff they have to make in 
their head before they're 

00:29:16.417 --> 00:29:18.417
willing to make the changes to 
save the money. Right? 

00:29:20.686 --> 00:29:22.514
On the other side, though, are 
the hustlers, the rise and 

00:29:22.515 --> 00:29:24.515
grind, right? The startups.

00:29:29.025 --> 00:29:31.061
The people trying to get the 
costs as low as possible . They 

00:29:31.062 --> 00:29:33.062
know, that's the key to keeping 
their business afloat right now.

00:29:34.764 --> 00:29:36.800
And those are the people, 
hopefully, that wake up so early

00:29:36.801 --> 00:29:39.675
after two days of sunscreen and 
dehydration to come to this sort

00:29:39.676 --> 00:29:42.341
of talk. And that's who we're 
talking about today. 

00:29:42.743 --> 00:29:46.412
All right? Google Cloud Platform
is huge. We have a ton of 

00:29:46.413 --> 00:29:50.929
different products. And quite 
frankly, the 40 minutes they've 

00:29:50.930 --> 00:29:54.598
given me here, we don't have 
time to go through all of them. 

00:29:54.599 --> 00:29:56.040
Number one, we're going to lay 
foundation on the network and 

00:29:56.041 --> 00:30:01.357
show you how to save a little 
bit of cost there. Then, we're 

00:30:01.358 --> 00:30:03.358
going to talk about ways to save
costs on compute, and then, a 

00:30:05.025 --> 00:30:06.712
couple of scenarios that 
hopefully some of you fall into 

00:30:06.713 --> 00:30:08.557
and you'll have a better time 
attaching to your business 

00:30:08.558 --> 00:30:10.196
model. 
    The most important thing you

00:30:10.197 --> 00:30:15.085
need to know, nothing I'm 
talking about today is secret. 

00:30:15.086 --> 00:30:17.739
None of this requires a 
handshake or the right Google 

00:30:17.740 --> 00:30:22.111
badge. Every piece of data 
you're seeing today is available

00:30:22.112 --> 00:30:24.112
for you to go get right now.

00:30:25.988 --> 00:30:27.988
Either using the Google Cloud 
Platform 

00:30:28.996 --> 00:30:30.996
Pricing Calculator.

00:30:33.128 --> 00:30:36.295
It's not an Illuminati style, 
you can run analysis on 

00:30:36.296 --> 00:30:38.130
everything. 
    Serving data, this is where 

00:30:38.131 --> 00:30:40.131
we're going to start today.

00:30:42.691 --> 00:30:45.336
Let's figure out, what does it 
cost to serve one terabyte of 

00:30:45.337 --> 00:30:47.337
data from Google 

00:30:48.352 --> 00:30:53.752
Cloud Storage to your users? 
Let's talk about serving data. 

00:30:53.753 --> 00:30:57.212
When you think about this, you 
have two components involved. 

00:30:57.213 --> 00:30:59.454
First off, is storage, where 
you're storing your data. And 

00:30:59.455 --> 00:31:00.673
second off, your network costs, 
we're transferring the data. 

00:31:00.674 --> 00:31:04.569
    Now, the cost for these are 
dependent upon usage.

00:31:08.239 --> 00:31:10.475
For example, Google Cloud 
Storage, what you pay is a 

00:31:10.476 --> 00:31:12.532
function of where you're hosting
your data alongside of how much 

00:31:14.176 --> 00:31:16.176
you're hosting it. 

00:31:18.274 --> 00:31:20.925
If you're hosting in US Central 
One, you're paying to store your

00:31:20.926 --> 00:31:24.390
data, however, east, that 
changes and a multi-region 

00:31:24.391 --> 00:31:28.054
bucket, that changes, as well. 
    On the networking side, it's

00:31:28.055 --> 00:31:30.055
a tiered cost structure.

00:31:33.405 --> 00:31:37.492
If you're under one terabyte, 
you're paying a different tier. 

00:31:37.493 --> 00:31:40.351
And then, this also changes per 
region, as well. So, for 

00:31:40.352 --> 00:31:42.352
example, if you're transferring 

00:31:43.618 --> 00:31:45.618
data from the Iowa location and 
you're 

00:31:46.677 --> 00:31:48.677
in the first tier of under one, 
you're 

00:31:50.160 --> 00:31:53.203
paying about 12 cents a gig. We 
have to point out something. And

00:31:53.204 --> 00:31:55.911
this is not secret. There's a 
whole tier of usage on Google 

00:31:57.758 --> 00:31:59.758
Cloud that's absolutely free. 
That you get every single month.

00:31:59.809 --> 00:32:01.809
    You can use this stuff, no 
one cares 

00:32:04.519 --> 00:32:06.519
about it, you're not going to 
get charged For it, right?

00:32:09.403 --> 00:32:10.828
It ranges mostly all of our 
products, but most specifically,

00:32:10.829 --> 00:32:15.746
worried ability the free tier 
form. On the storage side, five 

00:32:15.747 --> 00:32:18.592
gigabytes of storage for free 
each month each region. 

00:32:23.284 --> 00:32:27.830
If you've got 5 gigs in east and
5 in west, each one is free. On 

00:32:27.831 --> 00:32:29.831
the network side, we get about 1

00:32:30.921 --> 00:32:32.531
gigabyte of egress, from North 
American locations to other 

00:32:32.532 --> 00:32:36.834
destinations. And by the way, 
you will see many caveats of 

00:32:36.835 --> 00:32:39.110
little stars during this. And 
you'll also see a little labels 

00:32:40.536 --> 00:32:43.378
that says the price of today. 
This is the cloud, prices 

00:32:43.379 --> 00:32:45.211
change. 
    And if you discover this 

00:32:45.212 --> 00:32:48.287
video in the future, you'll 
undoubtedly find there's a 

00:32:48.288 --> 00:32:49.677
discrepancy in the prices. 
Please make sure you check out 

00:32:49.678 --> 00:32:51.761
the documentation for the 
latest. 

00:32:53.380 --> 00:32:55.380
So this is our free tier. Let's 
talk about egress costs, then.

00:32:58.485 --> 00:33:01.344
One terabyte, what would this 
cost us? So to store it, we get 

00:33:01.345 --> 00:33:03.345
about one 

00:33:06.031 --> 00:33:08.935
terabyte of data, that's 10, 24 
gigs, two cents per gig, about 

00:33:08.936 --> 00:33:13.264
$20 a month to store the data at
rest. Not too bad. On the 

00:33:13.265 --> 00:33:15.265
network side, though, things get
trickier.

00:33:16.967 --> 00:33:18.967
We've got our one terabyte at 12
cents 

00:33:20.212 --> 00:33:22.212
per gig, about $122 a month, 
total about $143.

00:33:25.579 --> 00:33:28.061
Storing the data, transferring, 
about $143. It isn't too bad, I 

00:33:28.062 --> 00:33:33.426
don't think. The truth is, most 
of you don't send your users to 

00:33:33.427 --> 00:33:36.085
the cloud storage bucket. You 
have a proxy, a front-end to hit

00:33:37.927 --> 00:33:39.368
that this data's being routed 
through. Let's look at what that

00:33:39.369 --> 00:33:42.901
costs. 
    Basically, the same. So as 

00:33:42.902 --> 00:33:45.135
long as you're transferring 
information in the same region 

00:33:45.136 --> 00:33:49.619
between a cloud storage bucket 
and a proxy, compute engine 

00:33:49.620 --> 00:33:51.620
instance, it's free.

00:33:53.283 --> 00:33:55.283
As long as it's in the same 
region.

00:33:56.330 --> 00:33:58.582
If they're coming from compute 
or cloud storage. If you're 

00:33:58.583 --> 00:34:00.413
transferring all of your data 
through a proxy, you're paying 

00:34:00.414 --> 00:34:03.888
the exact same price if it was 
going through cloud storage 

00:34:03.889 --> 00:34:07.602
directly. You're paying for the 
compute engine instance if it's 

00:34:07.603 --> 00:34:10.904
running. Or the app engine 
instance. Basically, as long as 

00:34:10.905 --> 00:34:15.879
you're using a proxy, the basic 
serving costs don't change. 

00:34:15.880 --> 00:34:17.880
Let's look at this from a 
different way. 

00:34:18.326 --> 00:34:20.560
When we serve data to people, 
one of the things we care about 

00:34:20.561 --> 00:34:22.561
is locality and latency.

00:34:23.846 --> 00:34:26.735
We want to get our data as close
to users as possible. We also 

00:34:26.736 --> 00:34:28.567
want to do it as cheaply as 
possible. Let's look at that 

00:34:28.568 --> 00:34:30.609
scenario. Let's say, we're 
serving our data here, 

00:34:33.883 --> 00:34:36.733
we've got it in US West one and 
we want to serve it in US East 

00:34:36.734 --> 00:34:38.769
One. 
    Price here is still the 

00:34:38.770 --> 00:34:43.458
same. $143. Doesn't matter where
the user's coming from. We have 

00:34:43.459 --> 00:34:47.562
the same cost at rest and the 
same egress costs. But we want 

00:34:47.563 --> 00:34:49.563
to get that data closer to the 
user.

00:34:51.029 --> 00:34:53.029
What if we actually cloned that 
data in 

00:34:54.071 --> 00:34:57.131
US East One and got it closer to
the user? Our egress is still 12

00:34:57.132 --> 00:35:00.820
cents and cloud storage itself, 
we're duplicating the data 

00:35:00.821 --> 00:35:05.321
between two buckets and paying 
that extra two cents a gig. So 

00:35:05.322 --> 00:35:07.610
we're doubling our cost for 
storage. And we also have this 

00:35:07.611 --> 00:35:11.896
extra one-cent per gig transfer 
costs between them. We're moving

00:35:11.897 --> 00:35:14.141
our data between regions. 
    Now, we have a cost incurred

00:35:14.142 --> 00:35:18.667
with that. Cloned this data 
between regions, we're looking 

00:35:18.668 --> 00:35:20.668
at $173.

00:35:21.736 --> 00:35:23.759
Not ideal, but gets our data a 
little bit closer. But truth is,

00:35:23.760 --> 00:35:27.249
we might be thinking about this 
the wrong way. We do have these 

00:35:27.250 --> 00:35:29.491
things in Google Cloud Storage, 
regional buckets and 

00:35:30.297 --> 00:35:32.297
multiregional buckets. 
Effectively, duplicate your data

00:35:34.834 --> 00:35:36.318
between regions in an area so 
you don't have to do this 

00:35:36.319 --> 00:35:39.412
cloning by yourself. 
    The trick, though, is 

00:35:39.413 --> 00:35:43.515
multiregional buckets cost more.
Let's take a look at that. If we

00:35:43.516 --> 00:35:45.516
want to be go from cloud storage

00:35:46.809 --> 00:35:49.258
to our users -- there's going to
be lots of weird acronyms and 

00:35:49.259 --> 00:35:52.568
terminology in this talk, it's 
labeled intermediate. Hopefully,

00:35:52.569 --> 00:35:55.610
we're moving together. 12 cents 
a gig egress. We're paying 2.

00:35:59.105 --> 00:36:01.105
6 cents per gig to store in a 

00:36:02.356 --> 00:36:04.842
multiregional bucket which puts 
us at $26 a month instead of the

00:36:04.843 --> 00:36:07.705
single region. 
    We're at about $149 there. 

00:36:07.706 --> 00:36:09.349
Not too much cost change. But 
the difference here is that when

00:36:09.350 --> 00:36:11.586
a user in US east one actually 
asked for 

00:36:15.304 --> 00:36:17.191
this asset, Google handles the 
duplication on your behalf and 

00:36:17.192 --> 00:36:19.192
you don't have to clone it 
yourself.

00:36:21.061 --> 00:36:22.898
Basically, just saved an extra 
$30 by using a multiregional 

00:36:22.899 --> 00:36:24.899
bucket per month instead of 
cloning it ourselves. 

00:36:24.944 --> 00:36:29.835
Sounds good. We've reduced our 
cost inside the regional US. 

00:36:29.836 --> 00:36:31.463
What if we want to go 
international. We want to serve 

00:36:31.464 --> 00:36:34.953
this data to someone in Europe, 
right? Well, let's take a look 

00:36:34.954 --> 00:36:38.010
at cloning there, as well. We 
have our clone data in a US 

00:36:39.425 --> 00:36:42.283
multiregion and EU multiregion. 
We're duplicating our costs. We 

00:36:42.284 --> 00:36:44.284
have the same amount of cost 
egress 

00:36:45.756 --> 00:36:46.779
for US -- the EU multiregion, 
which is selected For these 

00:36:46.780 --> 00:36:50.242
numbers. However, now because 
we're transferring data between 

00:36:50.243 --> 00:36:53.089
multiregions in different areas,
we're actually at 12 cents per 

00:36:53.509 --> 00:36:55.968
gig transfer. 
    So we actually get a little 

00:36:55.969 --> 00:37:00.436
pricier there. $286 is the 
result of this. If you're trying

00:37:00.437 --> 00:37:02.888
to get your data to users in a 
different area using the 

00:37:04.334 --> 00:37:06.212
multiregion, it's actually 
really expensive. Let's rethink 

00:37:06.213 --> 00:37:08.213
this here.

00:37:09.272 --> 00:37:11.101
The goal, again, we're 
shoestring, right? We want to 

00:37:11.102 --> 00:37:13.102
make this as cheap as possible.

00:37:15.371 --> 00:37:17.371
We want to get data from the 
cheapest 

00:37:18.425 --> 00:37:20.671
bucket we can store in to the 
farthest away user as fast as 

00:37:20.672 --> 00:37:23.734
possible as cheap as possible. 
We have this, it's the CDM. 

00:37:23.735 --> 00:37:25.570
We've been working with these. 
Let's figure out what the cost 

00:37:25.571 --> 00:37:27.571
is of that.

00:37:30.245 --> 00:37:34.814
We've got our standard regional,
about 2 cents a gig. For CDNs, 

00:37:34.815 --> 00:37:37.053
two costs to be aware of. We 
have a fill cost and an egress 

00:37:37.054 --> 00:37:42.189
cost. To fill data into the 
cache, you're looking at about 4

00:37:42.190 --> 00:37:45.660
cents per gig to get it into the
CDN. That's worldwide. Doesn't 

00:37:45.661 --> 00:37:48.505
matter where you're going. If 
you have data here and someone 

00:37:48.506 --> 00:37:50.506
in 

00:37:53.418 --> 00:37:55.418
Nairobi asks for your asset -- 

00:37:57.548 --> 00:38:01.300
Now, egress from the CDN is only
8 cents per gig. When you 

00:38:01.301 --> 00:38:03.542
combine these two together, four
cents and eight cents, 12 cents 

00:38:03.543 --> 00:38:06.222
per gig, which is your standard 
egress rate. 

00:38:09.284 --> 00:38:11.284
However, this is assuming a 

00:38:12.364 --> 00:38:13.980
one-to-one ratio, if you're 
pushing a terabyte, you're going

00:38:13.981 --> 00:38:15.981
to end up at 

00:38:17.112 --> 00:38:18.810
about $143 to get the asset as 
close to every user in the world

00:38:18.811 --> 00:38:22.675
without lifting a finger except 
making sure your cache headers 

00:38:22.676 --> 00:38:24.716
are turned on properly. 
    In reality, this isn't how 

00:38:24.717 --> 00:38:30.015
things work out. Typically, the 
amount of cache fill versus 

00:38:30.016 --> 00:38:32.016
cache serve are different.

00:38:33.481 --> 00:38:35.330
Where 20% of your data is filled
into the cache and 80% is served

00:38:35.331 --> 00:38:37.331
out, you 

00:38:38.404 --> 00:38:41.058
actually only end up closer to 
about $91. As long as that ratio

00:38:41.059 --> 00:38:43.059
is on the serving side instead 
of the filling side, you're 

00:38:44.535 --> 00:38:48.041
going to have a lot cheaper 
representation and setup. You're

00:38:48.042 --> 00:38:50.042
going to get to the shoestring 
value you want. 

00:38:51.110 --> 00:38:53.110
In general here, if we're 
looking to 

00:38:54.600 --> 00:38:57.494
serve a terabyte of data, the 
cheapest thing we can do is 

00:38:57.495 --> 00:38:59.941
simply to set your caching 
headers. Any other tricks or any

00:38:59.942 --> 00:39:02.378
other smartness you're trying to
do is going to blow that up, 

00:39:02.379 --> 00:39:07.888
right? It's going to make things
more expensive. Find the 

00:39:07.889 --> 00:39:10.329
cheapest bucket that's as close 
to you as you can tolerate, and 

00:39:13.167 --> 00:39:15.167
let Google's point of presence 
network handle the rest. 

00:39:15.608 --> 00:39:18.490
Let's talk about compute. So 
Google Cloud Platform has a lot 

00:39:18.491 --> 00:39:20.760
of compute offerings. Today, 
we're going to talk about three 

00:39:21.370 --> 00:39:23.370
of them.

00:39:24.645 --> 00:39:25.462
Google Compute Engine, our 
standard VMs that run in the 

00:39:25.463 --> 00:39:27.463
cloud.

00:39:28.909 --> 00:39:30.985
Second is Google Cloud 
Functions, innovation based.

00:39:34.301 --> 00:39:36.301
And Google App Engine. And for 
the sake of this talk, I'm 

00:39:43.297 --> 00:39:44.923
going to ignore things like GKE 
and GAE Flex, they tend to price

00:39:44.924 --> 00:39:48.602
themselves closer to what GCE 
is. But for the sake of this 

00:39:48.603 --> 00:39:51.089
40-minute talk, we don't have to
go into the nuances. It's weird.

00:39:51.296 --> 00:39:54.766
    I'm going to ignore those, 
and we're going to focus on 

00:39:54.767 --> 00:39:56.767
these three.

00:39:57.858 --> 00:39:59.074
By cost, GCE is variable on 
config, depending on the 

00:39:59.075 --> 00:40:02.124
configuration is how much you're
going to pay. The beefier the 

00:40:02.125 --> 00:40:04.977
machine and the configuration, 
the more you're going to have to

00:40:04.978 --> 00:40:09.275
pay there. Cloud Functions, 
though, is different. About 40 

00:40:09.276 --> 00:40:11.958
cents per million calls that you
make to it. 

00:40:14.020 --> 00:40:16.020
And then, an additional cost, 

00:40:18.708 --> 00:40:21.370
gigabyte second and gigahertz 
second. And there's a breakdown 

00:40:21.371 --> 00:40:23.371
here.

00:40:25.024 --> 00:40:27.024
And of course, App Engine is 
going to 

00:40:28.528 --> 00:40:30.980
be 5 cents to 30 cents depending
on your config. This is the 

00:40:30.981 --> 00:40:32.981
default cost you have here.

00:40:34.283 --> 00:40:36.508
On the other side, we have our 
free tiers. Here's where things 

00:40:36.509 --> 00:40:41.026
get cool. In a compute engine, 
if you're using an F1 

00:40:41.027 --> 00:40:43.027
microconfiguration, it's free 
the whole month. No cost to you.

00:40:43.467 --> 00:40:47.749
    Free instance, sitting in 
the cloud, doing your bidding as

00:40:47.750 --> 00:40:49.750
much as you'd like it, all free.

00:40:54.264 --> 00:40:56.264
On GCF, you've got about 2 
million innovocations a month.

00:41:01.271 --> 00:41:03.271
And on App Engines, 21 instance 
hours a 

00:41:05.132 --> 00:41:07.611
day, and nine instance hours a 
day for a B1 instance. I know 

00:41:07.612 --> 00:41:11.126
there's more than -- less than 
28 hours in a day. That gives 

00:41:11.127 --> 00:41:13.153
you a little bit of wiggle room 
in case it spins up in an F1.

00:41:18.475 --> 00:41:19.893
Basically, when you look at GAE 
F1, you kind of get free compute

00:41:19.894 --> 00:41:21.894
as long as 

00:41:22.986 --> 00:41:24.986
you're under a certain strata of
usage. 

00:41:25.441 --> 00:41:27.441
With this in mind, let's look at
an always on cost.

00:41:30.551 --> 00:41:32.018
You want to run a box for an 
entire month, what does that 

00:41:32.019 --> 00:41:34.019
cost you?

00:41:35.526 --> 00:41:38.157
Months have different days. I'm 
going to assume 730 hours of 

00:41:38.768 --> 00:41:40.768
consistent run time.

00:41:43.254 --> 00:41:44.498
When you bump up to an N1 
standard one because you want a 

00:41:44.499 --> 00:41:46.499
little more performance, you 
start paying $24 a 

00:41:50.854 --> 00:41:52.854
month and $194 for an 8-core 
machine.

00:41:55.375 --> 00:41:57.375
This is on the Cloud Pricing 
Page, and 

00:42:00.479 --> 00:42:02.479
this is after 30% sustained 
usage account. 

00:42:03.530 --> 00:42:05.961
We can't just say, consistently 
running. So what I've done here 

00:42:05.962 --> 00:42:08.209
is I'm making the assumption 
that you're getting one 

00:42:10.494 --> 00:42:11.745
invocation to your cloud 
function service every second 

00:42:11.746 --> 00:42:15.241
for the entire month. Got about 
2.6 million innovations that's 

00:42:15.242 --> 00:42:17.242
going on there.

00:42:19.518 --> 00:42:21.518
For this, it's about $3.

00:42:24.009 --> 00:42:25.636
51 to basically have a GCF 
function running every second 

00:42:25.637 --> 00:42:27.637
for an entire month. 

00:42:29.915 --> 00:42:31.356
On App Engine, you end up in the
F1 config, it's free, don't have

00:42:31.357 --> 00:42:33.994
to change anything there. 
However, if that second F1 

00:42:33.995 --> 00:42:37.260
instance actually spins up, you 
get a little spike in your 

00:42:37.261 --> 00:42:39.261
workload or all of a 

00:42:40.532 --> 00:42:42.581
sudden you're the top of hacker 
dues for some reason, you're 

00:42:42.582 --> 00:42:44.582
going to pay $36 for that second
instance to come on board. 

00:42:48.541 --> 00:42:53.516
Of course, when you move up to 
an F2 or F4, you get the $73. 

00:42:53.517 --> 00:42:55.517
Across the board here, you can 
see in 

00:42:56.566 --> 00:42:58.401
GCE and GAE, as you get a 
stronger machine. Of course, the

00:42:58.402 --> 00:43:01.653
costs go up. While GCF is 
instance-based. 

00:43:03.690 --> 00:43:05.690
Here's the interesting thing, 
those are the basic costs.

00:43:10.147 --> 00:43:14.306
Compute engine is the most VER 
versatile thing you have. It's 

00:43:14.307 --> 00:43:19.016
also the most expensive for what
you're using. If we could figure

00:43:19.017 --> 00:43:21.874
how to make that cost effective 
as our other services without 

00:43:21.875 --> 00:43:25.372
the same limitations. 
    If we wanted to run our code

00:43:25.373 --> 00:43:27.373
on GCF, 

00:43:29.234 --> 00:43:31.234
each function invocation has a 
nine-minute time-out.

00:43:34.795 --> 00:43:36.629
On App Engine, you have a 
60-second on request, but if you

00:43:36.630 --> 00:43:38.630
push that off to a task later, 
you end up with the same 

00:43:39.477 --> 00:43:41.477
nine-minute time-out.

00:43:42.737 --> 00:43:44.556
Our goal is to make GCE as cheap
as our other alternatives. We 

00:43:44.557 --> 00:43:47.618
can do this. 
    First off, let's take a look

00:43:47.619 --> 00:43:52.096
at the GCE discounts. These are 
the things that you don't have 

00:43:52.097 --> 00:43:55.766
to lift any fingers to do to 
actually turn this stuff on. 

00:43:55.767 --> 00:44:00.031
First off is sustained use. What
we'll do is analyze your usage. 

00:44:00.032 --> 00:44:01.457
And if you have a sustained 
usage, you're always on for a 

00:44:01.458 --> 00:44:06.154
certain amount of time, we'll 
give you a default discount for 

00:44:06.155 --> 00:44:08.423
running your instance with 
consistency across the entire 

00:44:08.424 --> 00:44:11.092
month. 
    If you're willing to make a 

00:44:11.093 --> 00:44:16.757
phone call to our sales team and
can actually commit to usage, 

00:44:16.758 --> 00:44:19.435
specific usage and say I'm going
to run, at least, 2,000 hours 

00:44:21.295 --> 00:44:23.326
this month or 730 hours this 
month, doesn't matter what 

00:44:23.327 --> 00:44:27.412
configuration you're using and 
you don't have predefinition of 

00:44:27.413 --> 00:44:29.863
specific upfront fees or 
whatever, you can actually get 

00:44:29.864 --> 00:44:32.763
up to a 56% discount by just 
making a phone call to talk to 

00:44:32.764 --> 00:44:34.994
sales. 
    If you're a startup and 

00:44:34.995 --> 00:44:39.317
seeing more usage and need that 
dedicated resource and you know 

00:44:39.318 --> 00:44:41.318
you're going to have one or 

00:44:43.637 --> 00:44:45.869
two instances in a dedicated -- 
it's actually pretty huge. And 

00:44:45.870 --> 00:44:49.958
right sizing. What will happen 
is Google Cloud Platform will 

00:44:49.959 --> 00:44:52.411
actually analyze the usage of 
the GC instances and look at how

00:44:54.285 --> 00:44:56.285
you're using them and actually 
tell you 

00:44:57.357 --> 00:45:00.090
whether or not you're 
overprovisioned or 

00:44:57.357 --> 00:44:59.357
underprovisioned.

00:45:00.607 --> 00:45:02.842
And you'll see a little icon on 
the home page that says if you 

00:45:02.843 --> 00:45:07.375
click here, we'll reconfigure 
and save you money every month. 

00:45:07.376 --> 00:45:10.659
Likewise, it'll say you're using
this pretty hard. If you click 

00:45:10.660 --> 00:45:13.523
here, we'll beef up your machine
so your users get lower latency.

00:45:16.370 --> 00:45:18.031
TV it's a fun button you can 
click, the deployment happens 

00:45:18.032 --> 00:45:20.277
behind the scenes. This is 
automatic stuff. 

00:45:22.552 --> 00:45:24.801
However, something a little bit 
more drastic in terms of saving 

00:45:24.802 --> 00:45:28.887
that does require a little bit 
of work on your part is 

00:45:28.888 --> 00:45:33.419
preemptive. Means that the 
scheduler is allowed to kill 

00:45:33.420 --> 00:45:37.487
your instance when we need the 
resources in Google Cloud. Now, 

00:45:37.488 --> 00:45:40.371
that may sound really scary. But
here's the fun part, it'll alert

00:45:42.227 --> 00:45:44.227
your instance before it's about 
to get killed.

00:45:45.494 --> 00:45:47.525
So it'll send you a message and 
your instance will say, hey, I'm

00:45:47.526 --> 00:45:49.526
about to terminate you, you have
30 seconds to 

00:45:52.409 --> 00:45:54.409
back up data to a persistent 
resource. 

00:45:54.440 --> 00:45:56.292
And it'll start your instance 
back up later and you can fetch 

00:45:56.293 --> 00:45:59.967
that data and continue working 
on. Right? So if you allow us to

00:45:59.968 --> 00:46:03.432
kill your instance when we need 
the time, we actually give you a

00:46:03.433 --> 00:46:06.123
substantial discount. If you're 
running an N1 standard that's 

00:46:08.366 --> 00:46:10.409
preemptive, instead of the $24 a
month, you get about $7 a month.

00:46:12.460 --> 00:46:14.499
For the same instance and all 
you have to do is write the code

00:46:14.500 --> 00:46:16.500
so you can lay 

00:46:19.138 --> 00:46:21.138
over those sort of terminations 
after time. 

00:46:21.888 --> 00:46:23.888
You can put a load balancer in 
front of that.

00:46:25.343 --> 00:46:27.400
If you need Scalable Compute and
the ability to allow the things 

00:46:27.401 --> 00:46:31.092
to die but you've got so much 
load coming in, one of them 

00:46:31.093 --> 00:46:33.948
going down, another one might 
have to spin up. Putting a load 

00:46:33.949 --> 00:46:36.385
balancer in front of the 
instances means you're only 

00:46:36.386 --> 00:46:38.654
paying about $7 a month per 
instance you're actually 

00:46:38.655 --> 00:46:41.349
running. 
    If we can get this a little 

00:46:41.350 --> 00:46:43.350
bit 

00:46:44.411 --> 00:46:46.648
cheaper, in fact, if we use a 
microinstance, instead. We can 

00:46:46.649 --> 00:46:49.296
get it down to $2.96 a month. 
Because of the fact that we have

00:46:49.297 --> 00:46:51.297
our load balancer and because of
the fact 

00:46:54.199 --> 00:46:56.278
that we've reengineered our code
to make sure it can be false 

00:46:56.279 --> 00:46:58.312
tolerant when it's killed, we 
have a massively Scalable 

00:47:00.393 --> 00:47:02.393
compute resource that can handle
itself getting kicked over. 

00:47:03.029 --> 00:47:05.060
If you've got large amounts of 
work loads or individual things,

00:47:05.061 --> 00:47:09.345
processing files, you know, 
something can pick up processing

00:47:09.346 --> 00:47:11.198
50% where something else left 
off, this is an extremely cheap 

00:47:11.199 --> 00:47:14.719
solution for you. Probably as 
cheap as I was able to find in 

00:47:14.720 --> 00:47:17.407
my research. 
    So in general, if you want 

00:47:17.408 --> 00:47:20.503
to reduce your compute cost, 
you've got a couple of things to

00:47:20.504 --> 00:47:22.504
do.

00:47:25.019 --> 00:47:27.019
Distribute workloads that are 
based on 

00:47:28.294 --> 00:47:30.527
invocations to either app engine
or cloud functions. Those are 

00:47:30.528 --> 00:47:31.743
going to be the cheapest 
situations where you can put 

00:47:31.744 --> 00:47:35.252
your code and have them run. If 
you need something long running,

00:47:37.089 --> 00:47:39.134
then leave it back on compute 
engine, otherwise, try to push 

00:47:39.135 --> 00:47:42.384
as much as you can to the 
resources. That's the cheapest 

00:47:42.385 --> 00:47:45.450
you can get. 
   do. Distribute workloads that

00:47:45.451 --> 00:47:49.117
are based on invocations to 
either app engine or cloud 

00:47:45.451 --> 00:47:49.584
functions. Those are going to be
the cheapest situations where 

00:47:45.451 --> 00:47:49.651
you can put your code and have 
them run. If you need something 

00:47:45.451 --> 00:47:49.584
long running, then leave it back
on compute engine, otherwise, 

00:47:45.451 --> 00:47:49.451
try to push as much as you can 
to the resources. That's the 

00:47:45.451 --> 00:47:46.063
cheapest you can get. 
    Likewise, make that phone 

00:47:46.064 --> 00:47:49.118
call to sales. Let them know 
that you can commit to a 

00:47:50.940 --> 00:47:52.981
sustained use and get that 
discount. That's going to be 

00:47:52.982 --> 00:47:55.842
huge for the work jobs you need 
running consistently on compute 

00:47:55.843 --> 00:47:57.931
engine. Likewise, if you have 
Scalable needs, a 

00:48:01.637 --> 00:48:03.637
load balancer plus a 
micro-preemptive 

00:48:04.918 --> 00:48:06.761
instance, it's the highest 
flexibility, lowest cost 

00:48:06.762 --> 00:48:09.207
scenario you can be in. Having a
bunch of little spiders doing 

00:48:12.087 --> 00:48:14.087
your work for you is just as 
effective 

00:48:16.149 --> 00:48:18.480
as one doing it for the same 
price.

00:48:21.764 --> 00:48:23.764
We've laid the groundwork to 
look at the big picture. 

00:48:24.012 --> 00:48:26.012
Now, let's talk about some 
scenarios.

00:48:27.317 --> 00:48:29.317
Personal privacy matters online,
right?

00:48:30.609 --> 00:48:33.258
We all care about that. But 
sometimes, I don't like paying a

00:48:35.308 --> 00:48:37.351
subscription to some other as 
far as to, you know, handle a 

00:48:37.352 --> 00:48:42.687
VPN service. So how cheap can we
build our own personal VPN 

00:48:42.688 --> 00:48:44.688
service on Google Cloud. PVR to 
be clear here, I know that 

00:48:46.803 --> 00:48:49.864
personal security online is a 
very hectic area right now. And 

00:48:49.865 --> 00:48:51.865
there's lots of back and forth. 

00:48:54.340 --> 00:48:56.165
So to be clear, I'm not going to
talk about why you need a VPN, 

00:48:56.166 --> 00:48:59.828
the softwares and libraries you 
can use, having your own versus 

00:48:59.829 --> 00:49:04.522
part of a cluster. I'm not going
to talk about anything that PR 

00:49:04.523 --> 00:49:06.523
or legal would raise an eyebrow 
about. 

00:49:07.223 --> 00:49:08.851
But I'm going to talk about how 
you can run for as cheap as 

00:49:08.852 --> 00:49:11.287
possible. Right? 
    So with this, we have two 

00:49:12.720 --> 00:49:15.569
components, compute and network,
pretty easy. How a VPN generally

00:49:15.570 --> 00:49:18.842
works is you have your client 
that connects to some compute 

00:49:18.843 --> 00:49:20.869
engine instance that's running 
your VPN, there's a socket 

00:49:20.870 --> 00:49:25.755
connection between the two, 
exchanging encrypted data and 

00:49:25.756 --> 00:49:28.604
the compute or the proxy going 
out into the fantastic internet 

00:49:28.605 --> 00:49:31.871
and do the fetching for you. 
This is a high-level 

00:49:31.872 --> 00:49:33.872
approximation if there's 
security engineers in the room, 

00:49:35.334 --> 00:49:37.174
I apologize for generalizing 
that to the point that I can fit

00:49:37.175 --> 00:49:39.175
on the slide. 

00:49:40.427 --> 00:49:41.648
Let's look at the free tier 
here, how cheap could we make 

00:49:41.649 --> 00:49:45.545
this? If we use our instance as 
an F1 micro, we can get that for

00:49:45.546 --> 00:49:47.546
free.

00:49:48.606 --> 00:49:50.445
And as long as our usage is 
about less than one gig, we know

00:49:50.446 --> 00:49:56.335
that we can get that for free, 
as well. Right? If our usage is 

00:49:56.336 --> 00:49:58.336
less than one gig, we 

00:49:59.833 --> 00:50:01.833
can get a VPN we can use 
whenever we 

00:50:02.868 --> 00:50:05.741
want every single month using 
Google Cloud Platform. And you 

00:50:05.742 --> 00:50:07.742
only start to pay when you go 
over the free gig.

00:50:11.032 --> 00:50:12.463
If you're using this for WI-FI 
hot spots around the world, 

00:50:12.464 --> 00:50:15.103
you're getting this whole thing 
for free. No big deal. 

00:50:16.129 --> 00:50:18.190
Here's one of the problems, if 
you're using a preemptive 

00:50:18.191 --> 00:50:20.678
version of that, you have a 
problem you need to know where 

00:50:20.679 --> 00:50:23.939
to connect to. And every time 
you reboot that VM, you have a 

00:50:23.940 --> 00:50:25.940
new IP.

00:50:27.826 --> 00:50:30.108
The good news on Google 
Platform, you can reserve a 

00:50:30.109 --> 00:50:33.576
static IP address. And as long 
as it's assigned and being used,

00:50:33.577 --> 00:50:35.820
it's free for you. You can go 
in, create your instance, 

00:50:39.072 --> 00:50:40.500
let it run, get a static 
reserved IP address that you can

00:50:40.501 --> 00:50:43.544
use from your personal devices 
that stick around waiting for 

00:50:43.545 --> 00:50:45.545
you and you don't pay anything, 
right? 

00:50:46.795 --> 00:50:49.250
So, again, we can run a personal
VPN for a static IP for nothing 

00:50:49.251 --> 00:50:53.532
each month. And again, if you 
eclipse the one gig free tier, 

00:50:53.533 --> 00:50:55.379
that's when you start paying. 
Let's talk about two specific 

00:50:55.380 --> 00:51:00.254
scenarios. What if you want 
better bandwidth? What if you 

00:51:00.255 --> 00:51:02.914
want this VPN because you need 
to stream a video from specific 

00:51:03.106 --> 00:51:06.610
location. The important thing to
understand is the throughput for

00:51:06.611 --> 00:51:10.511
a GCE instance changes based 
upon the core count. It's capped

00:51:10.512 --> 00:51:12.562
at the core count. 
    So the more cores you have, 

00:51:12.563 --> 00:51:17.499
you can see here that on the 
side there at the 64 and 32 

00:51:17.500 --> 00:51:19.500
cores, the more cores you 

00:51:21.372 --> 00:51:23.416
have, the higher the throughput.
This is where people get caught 

00:51:23.417 --> 00:51:25.861
up. 
    You'll notice, that the -- 

00:51:25.862 --> 00:51:27.862
moving up 

00:51:29.558 --> 00:51:34.090
from the F1 micro, the next 
available option is the small. 

00:51:34.091 --> 00:51:35.534
However, you notice because of 
the number of core count is the 

00:51:35.535 --> 00:51:39.393
same, we actually don't get any 
better bandwidth by moving to 

00:51:39.394 --> 00:51:42.078
there, even though it's only $14
a month. 

00:51:44.110 --> 00:51:46.146
Moving on to the next one, the 
first stage where you get 

00:51:46.147 --> 00:51:48.147
bandwidth increase is the N1 
standard.

00:51:50.416 --> 00:51:52.037
If you're moving up and trying 
to get bandwidth, you have to 

00:51:52.038 --> 00:51:54.038
start paying $24 a month.

00:52:01.880 --> 00:52:03.880
You have to deal when you're in 
the middle of a session.

00:52:07.885 --> 00:52:09.885
Let's talk about traveling.

00:52:11.580 --> 00:52:14.255
A lot of us are international no
mads, we travel, go to 

00:52:14.256 --> 00:52:17.100
conferences, customers whatnot. 
It would be nice if we have our 

00:52:17.101 --> 00:52:19.101
VPN 

00:52:20.109 --> 00:52:22.109
follow

00:52:27.520 --> 00:52:28.956
us so actually, put together a 
little hack for this that I 

00:52:28.957 --> 00:52:31.643
wanted to share with everybody. 
So it turns out that you can, 

00:52:31.644 --> 00:52:33.644
actually, 

00:52:37.378 --> 00:52:39.625
run a Google Compute engine 
APIs. I wrote a little web 

00:52:39.626 --> 00:52:41.626
location that I host.

00:52:43.692 --> 00:52:45.746
When I load it while I'm 
TRALing, it'll figure out my 

00:52:45.747 --> 00:52:49.036
location is and it'll figure out
the closest zone that I can run 

00:52:49.037 --> 00:52:51.037
an F1 instance.

00:53:01.724 --> 00:53:04.158
I can basically click a single 
button and create the new as 

00:53:04.159 --> 00:53:06.609
close as possible no matter 
where I am in the world.

00:53:10.113 --> 00:53:11.337
For free, I'm not doing more 
than 2 million invocations a 

00:53:11.338 --> 00:53:15.822
month. If you want to give 
people in the family using your 

00:53:15.823 --> 00:53:18.280
VPN and maybe charge them $10 a 
month, this might be a nice 

00:53:19.719 --> 00:53:21.719
racket to play at Thanksgiving.

00:53:30.924 --> 00:53:32.924
Anybody word press experts? 
Still, no caffeine in the house.

00:53:34.006 --> 00:53:36.033
I like that, closer to 9:00 a.m.
and everyone's still sleeping. 

00:53:36.034 --> 00:53:39.101
This is good. 
    So Word Press is a large and

00:53:40.527 --> 00:53:42.527
unwieldy beast.

00:53:45.617 --> 00:53:47.668
When you, actually, Google for 
Word Press Google Cloud 

00:53:47.669 --> 00:53:49.669
Platform, the first thing you're
introduced to is a page for 

00:53:53.787 --> 00:53:55.617
our Google Cloud launcher with 
the preconfig operations that 

00:53:55.618 --> 00:53:59.463
allow you to deploy to your 
Google Cloud account and get up 

00:53:59.464 --> 00:54:02.967
and start moving, right? You can
click any of these and they have

00:54:02.968 --> 00:54:04.968
a bunch of configurations of how
you want it all set up. 

00:54:07.243 --> 00:54:09.679
However, the default setup is 
actualliless than ideal from an 

00:54:09.680 --> 00:54:11.680
expense perspective.

00:54:13.608 --> 00:54:16.448
They are going to be set up with
$24 a month. You're paying from 

00:54:16.449 --> 00:54:18.449
the egress out there.

00:54:24.618 --> 00:54:25.638
What if you're using the 
simplest Word Press site 

00:54:25.639 --> 00:54:29.307
possible? And you're using a 
single instance, right? You 

00:54:29.308 --> 00:54:30.928
don't have that number, you 
know, that many number of users.

00:54:34.220 --> 00:54:35.644
Well, you can use the F1 
microfor this instead, which is 

00:54:35.645 --> 00:54:37.645
free, per month.

00:54:38.653 --> 00:54:40.653
And

00:54:42.157 --> 00:54:44.392
-- if you're a brand new startup
and your friends are, like, hey,

00:54:44.393 --> 00:54:46.393
it's $10, sign up.

00:54:49.638 --> 00:54:52.628
And you're still living on ramen
along with 40 other people, this

00:54:56.333 --> 00:54:59.406
saves you that $10 a month to 
buy more ramen. Yay. But the 

00:54:59.407 --> 00:55:01.407
question we have, then, is the 

00:55:02.415 --> 00:55:04.415
concept

00:55:05.750 --> 00:55:07.791
that we're free as long as we're
under the free tier. What is the

00:55:07.792 --> 00:55:09.792
cost before we eclipse that, 
right?

00:55:13.691 --> 00:55:15.691
Our default word press site that
you 

00:55:19.631 --> 00:55:21.631
deploy on App Engine is about 
272,000 

00:55:25.340 --> 00:55:26.587
per visitor, about 3,800 
visitors a month before you have

00:55:26.588 --> 00:55:28.588
to start paying.

00:55:29.850 --> 00:55:31.850
This is a number of startups for
the hustle and flow type people.

00:55:33.356 --> 00:55:35.356
Knowing how many visitors you 
can take 

00:55:36.403 --> 00:55:39.063
before you have to start paying 
money. And, of course, we could 

00:55:39.064 --> 00:55:42.934
go into a massive diatribe about
how to compress your headers and

00:55:42.935 --> 00:55:44.935
serve that data. That's a 
different talk. 

00:55:47.866 --> 00:55:50.709
Right now, just talking about 
the fundamental. If we're under 

00:55:50.710 --> 00:55:52.710
4,000 users a month, we 

00:55:53.810 --> 00:55:56.442
should be okay in and in the 
free tier. If you turn on 

00:55:56.443 --> 00:56:00.333
caching headers, increase this 
number significantly because the

00:56:00.334 --> 00:56:01.989
more users you have, doesn't 
come out of the main bucket, 

00:56:01.990 --> 00:56:05.873
comes out of a different bucket,
you get a lot more users to hit 

00:56:05.874 --> 00:56:08.939
your information. 
    But what if you end up on 

00:56:08.940 --> 00:56:11.990
the top of hacker news, 
suddenly, and you need to start 

00:56:11.991 --> 00:56:15.293
scaling up and down. Putting the
load balancer between the CDN 

00:56:15.294 --> 00:56:17.528
actually lets you do this. You 
end up with the same egress, 

00:56:17.529 --> 00:56:23.043
right? 8 cents per gig outbound 
and same fill. And we can 

00:56:23.044 --> 00:56:24.679
actually end up with the F1 
micro. The problem now we have 

00:56:24.680 --> 00:56:26.931
is because we have a number of 
instances instead of a single 

00:56:26.932 --> 00:56:28.932
one.

00:56:30.800 --> 00:56:33.436
You need a persistent my SQL 
instance for the compute 

00:56:33.437 --> 00:56:35.437
instances. 

00:56:36.769 --> 00:56:38.769
Now, unfortunately, as of today,
I 

00:56:40.463 --> 00:56:41.883
could not find a way to get a 
free tier setup with the SQL 

00:56:41.884 --> 00:56:44.560
instance. That's going to be 
around $29 a month.

00:56:47.813 --> 00:56:49.035
If you're above the 4,000 user 
mark and expecting scaling, the 

00:56:49.036 --> 00:56:53.124
minimum cost you'll end up 
paying around $29. Just to make 

00:56:53.125 --> 00:56:55.125
sure that cloud SQL instance is 
sitting around.

00:57:06.044 --> 00:57:08.082
It's worth noting, there's a 
plug-in for App Engine.

00:57:12.138 --> 00:57:14.138
You can actually run it on an F1
micro 

00:57:15.652 --> 00:57:18.306
instance or Word Press and get 
that down to about zero dollars 

00:57:18.307 --> 00:57:20.307
a month, 

00:57:21.784 --> 00:57:23.836
unfortunately, you need the back
end at about $29 a month, as 

00:57:23.837 --> 00:57:25.837
well. Something to think about. 

00:57:28.989 --> 00:57:31.227
In general, if you're doing Word
Press, there's three strata to 

00:57:31.228 --> 00:57:35.715
think about to ensure you're 
thinking about your shoestring 

00:57:35.716 --> 00:57:37.716
style budget.

00:57:39.573 --> 00:57:41.648
Under 4,000 visitors, use an F1 
micro, turn on the CDN and 

00:57:41.649 --> 00:57:43.649
you'll get the whole thing for 
free. That's fantastic. 

00:57:45.307 --> 00:57:47.155
If you're above 4,000 visitors, 
then you need to start thinking 

00:57:47.156 --> 00:57:49.156
about stringing together compute
engine plus 

00:57:52.264 --> 00:57:55.977
the load balancer, plus the CDN 
and the SQL option. You have 

00:57:55.978 --> 00:57:57.805
enough users there, you need to 
start making sure you're doing 

00:57:57.806 --> 00:58:02.325
things properly. However, I've 
got to tell you there is a 

00:58:02.326 --> 00:58:04.326
number of hosted word press 
companies 

00:58:05.595 --> 00:58:08.266
that have their back ends built 
on Google Cloud Platform that do

00:58:08.267 --> 00:58:10.267
offer you a subscription-based 
service. 

00:58:12.352 --> 00:58:13.777
Paying $4 a month, they'll deal 
with all of the scaleability, 

00:58:13.778 --> 00:58:17.249
they'll deal with all of the 
security updates, they'll make 

00:58:17.250 --> 00:58:19.280
sure everything's running in the
background. You don't have to 

00:58:19.281 --> 00:58:21.333
lift a finger and might be a 
cheaper option to fall into 

00:58:24.391 --> 00:58:26.208
that bucket if you're above 
4,000 visitors. That might be 

00:58:26.209 --> 00:58:30.729
something to look into. 
    Final topic for the day. 

00:58:30.730 --> 00:58:32.730
Video content side on the 
shoestring 

00:58:33.757 --> 00:58:35.757
bucket budget.

00:58:37.883 --> 00:58:41.954
What would it take to look at an
education website? You have 

00:58:41.955 --> 00:58:43.955
students that log in, data 

00:58:45.239 --> 00:58:47.677
they want to look at, watch 
videos, take some tests. Maybe a

00:58:47.678 --> 00:58:49.303
sports site that's streaming all
of your high school sports games

00:58:49.304 --> 00:58:51.333
and you've got a lot of video to
transfer. 

00:58:53.780 --> 00:58:55.605
Some combination of rich 
multimedia and rich website 

00:58:55.606 --> 00:58:58.945
presence. So with a standard 
layout here, you would probably 

00:58:58.946 --> 00:59:04.451
have to store that video data in
Google Cloud Storage, right? And

00:59:04.452 --> 00:59:07.904
serve that to the user so you 
can get streaming capability. 

00:59:07.905 --> 00:59:09.328
You don't want that going to a 
proxy. You want straight to the 

00:59:09.329 --> 00:59:11.329
source there.

00:59:14.013 --> 00:59:16.898
On the website side, maybe a 
Word Press instance. It's got 

00:59:16.899 --> 00:59:18.950
some connection to relational 
database so it can keep track of

00:59:18.951 --> 00:59:23.025
who the users are and any other 
key words that you need. And of 

00:59:23.026 --> 00:59:24.857
course, your standard load 
balancing and CDN in front of 

00:59:24.858 --> 00:59:28.736
that, scale up, scale down and 
make sure that your data is 

00:59:28.737 --> 00:59:30.737
consistently sent to users 
around the world. 

00:59:31.410 --> 00:59:34.253
This gets pretty pricey, 
unfortunately, right? You're 

00:59:34.254 --> 00:59:36.507
looking at $24 for the compute 
engines per instance a month, 

00:59:36.508 --> 00:59:39.354
looking at $29 for the cloud 
instance, you've got 

00:59:43.190 --> 00:59:45.190
your fill and egress costs

00:59:48.374 --> 00:59:49.993
. As of today, this can change 
in the future, internet, if 

00:59:49.994 --> 00:59:51.994
you're watching this sometime in
the future.

00:59:53.953 --> 00:59:56.320
As of today, the Cloud CDN, 
that's coming from Google Cloud 

00:59:56.321 --> 00:59:58.321
Storage does 

01:00:01.633 --> 01:00:03.506
not cache 206 responses from a 
header. 206 responses are used 

01:00:03.507 --> 01:00:05.535
for streaming video, which 
means, as you're streaming 

01:00:06.995 --> 01:00:08.995
video, it's not going through 
the cache, right? 

01:00:12.457 --> 01:00:14.457
So we have to be very cautious 
of

01:00:15.644 --> 01:00:19.075
this. Not really ideal. This 
whole thing can get pretty 

01:00:19.076 --> 01:00:22.128
costly. But there actually is a 
solution if you're willing to 

01:00:22.129 --> 01:00:24.129
make a couple of changes. We can
get this almost down to free 

01:00:25.424 --> 01:00:27.424
instead of all of this cost.

01:00:29.342 --> 01:00:31.578
If you're willing to make some 
changes, leave your CDN in 

01:00:31.579 --> 01:00:33.579
place.

01:00:37.281 --> 01:00:41.952
    Minimize all your complexity
down to something it can use a 

01:00:41.953 --> 01:00:43.953
template for.

01:00:47.893 --> 01:00:50.533
Make an invocation based, you 
don't need to do that much on 

01:00:50.534 --> 01:00:54.230
the back end. And as long as 
you're under 2 million page 

01:00:54.231 --> 01:00:56.264
views an month, you can 
basically get that entire 

01:00:56.265 --> 01:00:58.265
serving process for free, which 
is pretty nice.

01:01:02.165 --> 01:01:04.165
Likewise, instead of using Cloud
SQL, 

01:01:05.183 --> 01:01:07.183
use Data Store.

01:01:09.210 --> 01:01:10.833
Data Store will still give you 
the performance you need. And it

01:01:10.834 --> 01:01:12.834
has its own free tier.

01:01:14.353 --> 01:01:16.353
If you're under one gigabyte of 
stored 

01:01:19.894 --> 01:01:21.894
data and doing less than 500,000
reads, you pay nothing.

01:01:23.781 --> 01:01:25.015
This is in the range of a 
MOOK-style startup. Yo don't 

01:01:25.016 --> 01:01:26.850
have all of the visitors you 
need. And even the successful 

01:01:26.851 --> 01:01:32.007
ones are probably not doing 
500,000 per month. And a 

01:01:32.008 --> 01:01:34.008
gigabyte of relational data is a
lot in that scenario.

01:01:35.927 --> 01:01:38.594
We can get our entire website 
serving and backend storage for 

01:01:38.595 --> 01:01:41.062
zero dollars. 
    The problem, though, is what

01:01:41.063 --> 01:01:44.522
do we do about the video 
content? There's no other real 

01:01:44.523 --> 01:01:46.523
place to store 

01:01:47.786 --> 01:01:50.236
this in Google Storage because 
206 responses. My only solution 

01:01:50.237 --> 01:01:52.509
here, a little bit of a hack, 
store all of your video in 

01:01:52.709 --> 01:01:54.709
YouTube.

01:01:55.988 --> 01:01:59.896
    Upload your video to 
YouTube, leave it as unlisted, 

01:01:59.897 --> 01:02:02.175
right? And basically, when 
you're streaming 

01:02:10.568 --> 01:02:13.422
your embedded URLs down to your 
user, make it so they can't 

01:02:13.423 --> 01:02:16.888
figure out where your videos 
are. If you can get it this way,

01:02:16.889 --> 01:02:19.532
you get the entire video 
production platform for free. 

01:02:19.533 --> 01:02:23.399
    A lot of chuckles. Yeah, 
this slide is very contentious 

01:02:23.607 --> 01:02:26.887
internally. We had a lot of 
talks. We mad a lot of talks 

01:02:26.888 --> 01:02:28.888
internally.

01:02:31.388 --> 01:02:32.809
About whether or not that last 
little animation should be in 

01:02:32.810 --> 01:02:35.917
this talk at all. Yeah. So with 
that, I want to thank you for 

01:02:36.528 --> 01:02:40.581
your time today. I want to thank
you for being the hustlers and 

01:02:40.582 --> 01:02:44.859
the grinders working on your 
costs every single day. I want 

01:02:44.860 --> 01:02:46.860
to thank you for waking up this 

01:02:47.961 --> 01:02:49.961
early to hear another bald man 
rant at you. 

01:02:50.485 --> 01:02:52.741
Most importantly, if you care 
about costs, performances, I've 

01:02:52.742 --> 01:02:56.819
got to encourage you to check 
out the YouTube channel for 

01:02:56.820 --> 01:02:59.278
Google Cloud Platform. We have a
ton of amazing people working 

01:03:01.961 --> 01:03:04.205
working on amazing content to 
increase scaleability and get 

01:03:04.206 --> 01:03:06.236
your Cloud Application to where 
you want it as cheap as 

01:03:06.237 --> 01:03:08.237
possible.

01:03:10.762 --> 01:03:13.058
With that, thank you, enjoy your
last day of Google I/O. Thank 

01:03:13.059 --> 01:03:15.094
you very much. 

01:10:10.831 --> 01:10:12.831
What's New in Android Apostrophe
for 

01:10:14.435 --> 01:10:16.435
Chrome OS

01:24:41.962 --> 01:24:43.962
&gt;&gt; SHAHID HUSSAIN: Hi, everyone.

01:24:45.649 --> 01:24:47.888
My name is Shahid. And welcome 
to all of you to our 

01:24:53.595 --> 01:24:56.311
session on developing Android 
Apps on Chrome OS. We talked 

01:24:56.312 --> 01:24:58.145
about this last year at I/O, and
if you saw that talk, today's 

01:24:58.146 --> 01:25:02.243
talk is a continuation. When 
you're talking about the basics 

01:25:04.065 --> 01:25:06.308
briefly, and talking about how 
we've worked with a number of 

01:25:06.309 --> 01:25:10.161
you over the past year. 
    And as well as sharing a 

01:25:10.162 --> 01:25:15.071
number of new features we'd love
to tell you about. So first of 

01:25:15.072 --> 01:25:17.072
all, let's talk about why this 
matters.

01:25:19.197 --> 01:25:21.197
So we've talked previously about
the 

01:25:22.640 --> 01:25:25.106
success of Chromebooks within 
the education space where we 

01:25:25.107 --> 01:25:28.966
outsell every other device 
combined. But Google's been 

01:25:28.967 --> 01:25:30.967
doubling down on Chrome OS. 

01:25:33.682 --> 01:25:35.682
That's helped drive demand in 
the consumer space, too.

01:25:39.431 --> 01:25:41.431
So much so that in Q4 last year,
17% of 

01:25:42.506 --> 01:25:44.506
notebooks sold in the US were 
Chromebooks.

01:25:49.637 --> 01:25:52.086
[ Applause ]
Why does this matter to you? 

01:25:52.087 --> 01:25:54.087
Android developers?

01:25:55.353 --> 01:25:57.386
The headline here is Android 
apps work on Chrome OS. How does

01:25:57.387 --> 01:25:59.387
that happen?

01:26:00.480 --> 01:26:02.930
It works by the Android 
framework running inside a 

01:26:02.931 --> 01:26:05.375
container that sits on top of 
the base of Chrome OS, and the 

01:26:07.023 --> 01:26:09.252
full Play Store is available. So
your app is probably already 

01:26:09.253 --> 01:26:11.253
running on Chrome OS. 

01:26:14.347 --> 01:26:16.347
Now, ultimately, what we care 
about is a good user experience.

01:26:17.819 --> 01:26:19.819
Part of that is the operating 
system 

01:26:22.093 --> 01:26:25.358
itself, and part of that is the 
apps it runs. And we've been 

01:26:25.359 --> 01:26:29.433
investing heavily on improving 
the product. Those of you who 

01:26:29.434 --> 01:26:31.871
have used it over the past year,
have seen all of that and system

01:26:31.872 --> 01:26:34.329
updates. 
    And many of you who are 

01:26:34.330 --> 01:26:38.428
developing apps, we've been 
working with to ensure that 

01:26:38.429 --> 01:26:40.429
you're ensuring that the apps 
work really well on Chrome OS.

01:26:46.098 --> 01:26:48.098
Adobe,

01:26:50.706 --> 01:26:52.331
Sony and EA have included 
Chromebook operations into the 

01:26:52.332 --> 01:26:54.332
latest updates in the Play 
Store.

01:26:58.153 --> 01:27:00.153
And that's opening up different 
kinds of usage and revenue. 

01:27:02.818 --> 01:27:04.818
May Allen told us pixelbook 
users 

01:27:06.756 --> 01:27:08.756
are spending 4 times more time 
in Evernote than an app user.

01:27:13.100 --> 01:27:15.330
And Andrew and David told us 
that Chromebooks have made up 

01:27:15.331 --> 01:27:18.395
21% of their revenue over the 
last 30 days. 

01:27:20.663 --> 01:27:22.102
So first of all, to begin, we're
quickly going to vie some 

01:27:22.103 --> 01:27:24.103
basics.

01:27:26.157 --> 01:27:29.005
Ensuring that an app works well 
on Chrome OS comes down to four 

01:27:29.006 --> 01:27:31.006
key 

01:27:32.014 --> 01:27:32.304
differences
    May Allen told us pixelbook 

01:27:32.305 --> 01:27:36.371
users are spending 4 times more 
time in Evernote than an app 

01:27:32.305 --> 01:27:36.571
user. And Andrew and David told 
us that Chromebooks have made up

01:27:32.305 --> 01:27:35.238
21% of their revenue over the 
last 30 days. 

01:27:32.305 --> 01:27:36.171
So first of all, to begin, we're
quickly going to vie some 

01:27:32.305 --> 01:27:36.238
basics. Ensuring that an app 
works well on Chrome OS comes 

01:27:32.305 --> 01:27:34.305
down to four key differences 
between Chromebooks and phones.

01:27:36.732 --> 01:27:39.025
Wider screens, default 
landscape, window management and

01:27:39.026 --> 01:27:42.546
different primary input devices.
Keyboard, pointer, stylus. 

01:27:43.764 --> 01:27:45.764
First, why the screens?

01:27:47.649 --> 01:27:49.649
Chromebook screens are bigger 
from 10.

01:27:51.946 --> 01:27:55.215
1 inch on the smaller side to 
15-inch on our larger units. 

01:27:55.216 --> 01:27:56.652
Apps need to work well and 
respond appropriately to resize 

01:27:56.653 --> 01:27:58.653
events. 

01:28:00.469 --> 01:28:02.469
For example,

01:28:05.908 --> 01:28:07.908
the app is resized to be wider.

01:28:09.520 --> 01:28:11.532
Second, default landscape, as a 
default landscape device, apps 

01:28:11.533 --> 01:28:13.790
need to have a really great 
landscape experience.

01:28:17.677 --> 01:28:19.908
And for example, pocket cast 
pins open the menu and arranges 

01:28:19.909 --> 01:28:23.987
items in a grid so they can fill
the space available rather than 

01:28:23.988 --> 01:28:26.234
listing items out with white 
space to the right. 

01:28:28.258 --> 01:28:30.258
Third, multiwindow.

01:28:31.918 --> 01:28:34.570
Chrome OS is a multi-window 
desktop environment. The latest 

01:28:34.571 --> 01:28:38.232
versions on the play store and 
now resizable. So users can work

01:28:38.233 --> 01:28:40.233
better with these inside our 
environment.

01:28:44.848 --> 01:28:46.066
And finally, maybe the most 
important, keyboard and mouse 

01:28:46.067 --> 01:28:51.200
inputs. When a user pulls out a 
laptop and uses it, the keyboard

01:28:51.201 --> 01:28:55.137
and touch pad are closer to the 
user so they gravitate towards 

01:28:55.138 --> 01:28:57.138
them as the primary inputs. 

01:29:01.089 --> 01:29:03.523
Built keyboard accelerators so 
users can get around faster 

01:29:03.524 --> 01:29:05.776
inside the interface. And that's
true for games.

01:29:10.668 --> 01:29:12.668
War Robots built keyboard 
controls into the game.

01:29:14.121 --> 01:29:16.577
It uses a special manifest flag 
to get inputs directly from 

01:29:16.578 --> 01:29:19.423
Chrome OS and enables standard 
gaming controls. 

01:29:21.855 --> 01:29:23.893
So these are just a few of the 
app teams who are now building 

01:29:23.894 --> 01:29:25.894
and testing 

01:29:27.570 --> 01:29:29.800
their apps for Chrome OS and a 
huge, huge thank you to 

01:29:29.801 --> 01:29:31.801
everyone, many of you are here 
in the audience, that we've 

01:29:31.843 --> 01:29:34.274
worked with. 
    We're always looking for 

01:29:34.275 --> 01:29:37.574
apps that work really, really 
great on Chrome OS so we can 

01:29:37.575 --> 01:29:39.575
show them off.

01:29:41.261 --> 01:29:44.104
And we want your app to be one 
of them. Now, to talk about some

01:29:44.105 --> 01:29:46.105
of the latest 

01:29:47.159 --> 01:29:49.159
improvements in Chrome OS for 
Android 

01:29:50.437 --> 01:29:53.080
app developments, I'd like to 
hand off to Stefan. Please 

01:29:53.081 --> 01:29:56.341
welcome, Stefan. 
[ Applause ] 

01:29:57.566 --> 01:29:59.566
&gt;&gt; STEFAN KUHNE: Morning, 
everyone.

01:30:01.222 --> 01:30:03.870
I'm glad you could all join for 
today's talk. And I'm here to 

01:30:03.871 --> 01:30:05.871
talk about, well, all 

01:30:08.400 --> 01:30:10.839
of our latest news what we have 
done and what you can do to 

01:30:10.840 --> 01:30:12.840
improve the 

01:30:13.894 --> 01:30:15.894
application even more for the 
desktop environment. 

01:30:16.154 --> 01:30:18.154
What is new?

01:30:19.432 --> 01:30:21.432
So that is one of the things 
which is 

01:30:23.042 --> 01:30:25.529
mostly important for the user.

01:30:35.120 --> 01:30:37.120
And we hope that -- and last of 
it, best practices.

01:30:38.820 --> 01:30:40.820
So when you're following these 

01:30:42.637 --> 01:30:45.722
practices, you will have a 
better chance. 

01:30:46.343 --> 01:30:49.597
So what's new? Let's see, first 
off, we have improved our tablet

01:30:49.598 --> 01:30:53.278
mode. Why did we do that? 
Because we have now also a 

01:30:53.279 --> 01:30:57.824
tablet only device. Well, and 
what do we change? Well, there 

01:30:57.825 --> 01:31:01.673
are smooth animations. We have 
removed the caption bar. I means

01:31:01.674 --> 01:31:03.674
the window control bar, and the 

01:31:05.308 --> 01:31:07.308
controls from the caption

01:31:09.080 --> 01:31:10.912
bar, they've moved to the shelf.
And all windows are 

01:31:10.913 --> 01:31:14.600
automatically started full 
screen. So which is, of course, 

01:31:14.601 --> 01:31:16.601
experience what you expect on 
the tablet. 

01:31:18.061 --> 01:31:20.061
So next thing is split screen.

01:31:21.478 --> 01:31:22.556
We havethat? Because we have now
also a tablet only device. Well,

01:31:22.557 --> 01:31:26.623
and what do we change? Well, 
there are smooth animations. We 

01:31:22.557 --> 01:31:26.690
have removed the caption bar. I 
means the window control bar, 

01:31:22.557 --> 01:31:26.290
and the controls from the 
caption bar, they've moved to 

01:31:22.557 --> 01:31:26.423
the shelf. And all windows are 
automatically started full 

01:31:22.557 --> 01:31:26.690
screen. So which is, of course, 
experience what you expect on 

01:31:22.557 --> 01:31:25.157
the tablet. 
    So next thing is split 

01:31:22.557 --> 01:31:25.154
screen. We have a split screen, 
you know that, of course, on 

01:31:25.155 --> 01:31:27.155
phones, but now on a big 

01:31:28.482 --> 01:31:30.482
tablet or bigger screen, it 
makes more sense.

01:31:32.965 --> 01:31:36.677
    It might be a Chrome window,
might be an Android window.

01:31:39.931 --> 01:31:41.986
The only thing, at the moment, 
you will not be able to be able 

01:31:41.987 --> 01:31:46.868
to figure out you're running in 
split screen. The next thing is,

01:31:46.869 --> 01:31:50.320
picture in picture. 
    So it's a full specification

01:31:52.979 --> 01:31:55.008
according to Android O, and 
it'll come in soon. And you can 

01:31:55.009 --> 01:31:57.235
resize the window, place it in 
multiple locations and it'll be 

01:31:58.888 --> 01:32:00.921
fairly similar to the one which 
we are using for web 

01:32:00.922 --> 01:32:02.922
applications, as well. 

01:32:05.797 --> 01:32:07.636
So we have also added the 
Android keyboard so you can 

01:32:07.637 --> 01:32:09.637
essentially replace, 

01:32:11.087 --> 01:32:13.087
now, coming soon.

01:32:16.180 --> 01:32:17.800
The Chrome OS keyboard was an 
Android keyboard, which makes a 

01:32:17.801 --> 01:32:20.650
lot of people happy. 
Notifications -- they're looking

01:32:20.651 --> 01:32:22.651
much 

01:32:24.164 --> 01:32:28.447
more like. Color scheming should
be much more integrated. Instead

01:32:28.448 --> 01:32:30.448
of swiping -- everything is 

01:32:31.498 --> 01:32:33.536
much more integrated into the 
Chrome OS style in itself. 

01:32:36.419 --> 01:32:38.419
And, yeah. Pro audio.

01:32:42.675 --> 01:32:44.675
We have, actually, edit since 
M65, the beginning of this year.

01:32:46.798 --> 01:32:48.798
It's essentially, like, every 
six weeks 

01:32:52.357 --> 01:32:54.357
we have a new release cycle, and
M65 is out.

01:32:57.254 --> 01:32:59.915
And our pixelbook. 
    And soon, we will also have 

01:33:04.386 --> 01:33:07.028
multichannel audio, USB audio, 
multichannel USB audio and this 

01:33:07.029 --> 01:33:09.029
is all coming later this year.

01:33:10.689 --> 01:33:12.524
And with that, you have actually
seen when you were coming in 

01:33:12.525 --> 01:33:15.583
someone playing music here. He 
was, actually, using a 

01:33:15.584 --> 01:33:17.584
pixelbook. And to show you a 
little bit more about 

01:33:21.231 --> 01:33:23.231
that, I want to

01:33:26.151 --> 01:33:28.151
invite the founder of algorithm 
to show how this actually works.

01:34:02.211 --> 01:34:04.211
(Music playing)

01:35:06.522 --> 01:35:08.522
[ Applause ] 

01:35:10.696 --> 01:35:13.181
   &gt;&gt; STEFAN KUHNE: Thank you. 
You've seen how everything was 

01:35:17.011 --> 01:35:19.694
realtime, sync NIZedtime 
synchronized with the device.

01:35:23.961 --> 01:35:26.191
Syncs what you can do in order 
to make your life well, to make 

01:35:26.192 --> 01:35:29.661
life on a desktop better. 
    Well, I think I had that 

01:35:29.662 --> 01:35:32.123
already last year, but we have, 
of course, a follow-up on that 

01:35:32.124 --> 01:35:37.404
one. So first off, this is 
something which is something 

01:35:37.405 --> 01:35:41.535
everybody knows from everyday 
business, right? Menu 

01:35:41.536 --> 01:35:43.536
accelerators, they're not 
something special, right? 

01:35:45.628 --> 01:35:47.467
But if you were using the 
toolkit of the past, it was, 

01:35:47.468 --> 01:35:49.468
actually, from A.

01:35:52.187 --> 01:35:57.086
I think it was, like, angel 
cake. So really ancient. This 

01:35:57.087 --> 01:35:58.942
was small and they had to, 
actually, fit everything on 

01:35:58.943 --> 01:36:00.943
there.

01:36:02.194 --> 01:36:05.285
And it looked ugly, it was not 
meant to be prime time. So we 

01:36:05.286 --> 01:36:07.513
have actually changed the 
library to make this much, much 

01:36:07.514 --> 01:36:11.644
easier for you to actually get 
these kind of things in. And so,

01:36:11.645 --> 01:36:14.494
all you have to do is go into 
your layout XML. 

01:36:17.140 --> 01:36:19.372
In your menu, put into the item 
itself, and then, the shortcut 

01:36:19.373 --> 01:36:21.373
means the character and modifier
keys.

01:36:25.496 --> 01:36:27.496
And you're ready to go. Well, 
not entirely.

01:36:31.197 --> 01:36:36.174
You have to actually pull, then,
the -- what was it, again? Set 

01:36:36.175 --> 01:36:38.175
clarity mode to true so that 
you're 

01:36:41.070 --> 01:36:42.697
actually getting alphanumeric 
characters. 

01:36:42.698 --> 01:36:44.776
This is really old, but it's 
still there. Shelf integration, 

01:36:44.777 --> 01:36:48.941
that is something, like, if you 
want to do something inside the 

01:36:48.942 --> 01:36:50.942
shelf, you want to change your 
icon, 

01:36:52.025 --> 01:36:53.640
like, for example, opening a 
document or whatnot and change 

01:36:53.641 --> 01:36:55.641
the shape of the icon itself and
display, then, the document 

01:37:00.031 --> 01:37:01.078
you've opened, you can do that 
with this set task description. 

01:37:01.079 --> 01:37:03.079
    Very simple and very 
effective.

01:37:05.980 --> 01:37:07.980
Next thing is, if you want to 
combine 

01:37:09.117 --> 01:37:11.117
multiple items inside the shelf 
into one 

01:37:12.191 --> 01:37:14.191
menu item, you can actually put,
then, 

01:37:15.458 --> 01:37:18.349
extra, you put, then, the shelf 
shortcut to it and you take, 

01:37:18.350 --> 01:37:22.825
then, any kind of string for a 
kind of modifier that you know 

01:37:22.826 --> 01:37:24.720
and actually use it for all of 
the items you want to put into 

01:37:24.721 --> 01:37:28.628
the same thing. 
    App shortcuts are coming.

01:37:33.063 --> 01:37:35.372
This is something which is 
coming soon. We will support 

01:37:35.373 --> 01:37:38.631
them very soon, as well. 
Essentially, you can actually 

01:37:38.632 --> 01:37:43.776
have actions and any kind of 
short things which you want to 

01:37:43.777 --> 01:37:47.046
do in order to get the user fast
access to things. 

01:37:48.057 --> 01:37:50.057
The big button.

01:37:51.328 --> 01:37:53.578
Well, I think many of you since 
you are doing something for our 

01:37:53.579 --> 01:37:56.647
Chrome OS, have already seen 
there's a back button up in the 

01:37:56.648 --> 01:37:58.648
window control bar.

01:38:00.510 --> 01:38:02.760
Well you have also a Back 
Button. And two on top of each 

01:38:02.761 --> 01:38:06.629
other looks pretty crappy. 
Therefore, by adding the special

01:38:08.281 --> 01:38:10.122
effect, you can get rid of it. 
It makes it nicer and that 

01:38:10.123 --> 01:38:12.573
helps. 
    But there's one other thing,

01:38:12.574 --> 01:38:14.574
and this is even more important.

01:38:17.674 --> 01:38:19.907
If you're on a desktop and 
pressing backspace or escape and

01:38:19.908 --> 01:38:23.972
your window suddenly disappears,
something have is very 

01:38:23.973 --> 01:38:25.973
unexpected as a user, please 
don't do that. 

01:38:26.006 --> 01:38:28.890
If you can do it, please what 
you should do is actually check 

01:38:28.891 --> 01:38:31.738
if your activity is at the 
bottom -- at the root of the 

01:38:31.739 --> 01:38:33.739
stack.

01:38:36.582 --> 01:38:38.582
And if it is and you know your 
window, please don't close your 

01:38:38.714 --> 01:38:42.778
window. It's really unexpected 
and disturbing all of the work 

01:38:42.779 --> 01:38:44.779
is suddenly gone.

01:38:46.024 --> 01:38:48.257
Lifetime management. We are 
getting a lot of requests from 

01:38:51.346 --> 01:38:53.207
users which said, well, you know
what, my application isn't 

01:38:53.208 --> 01:38:57.471
running multitasking. Why is it 
not multitasking? Well, the 

01:38:57.472 --> 01:39:00.331
thing is, I have this game I'm 
playing and I'm also checking my

01:39:00.332 --> 01:39:02.332
new status.

01:39:05.251 --> 01:39:07.251
My news status isn't updating 
while I'm playing. 

01:39:07.700 --> 01:39:11.560
Well, there are three states, 
running, post and stopped. 

01:39:11.561 --> 01:39:13.561
Running and paused means you are
visible on the screen.

01:39:16.441 --> 01:39:18.071
Not that you should actually 
drop everything and stop that 

01:39:18.072 --> 01:39:20.746
when you're getting a pause, no,
you can continue to 

01:39:24.424 --> 01:39:26.424
run unless you are high -- 
whatever 

01:39:27.717 --> 01:39:29.372
game, when you need realtime 
action and whatnot where you 

01:39:29.373 --> 01:39:32.001
want to really pause. In most 
cases you really want to 

01:39:32.212 --> 01:39:34.254
continue running. 
    Please do this and you make 

01:39:34.255 --> 01:39:38.366
a lot of users much, much 
happier. Next thing, sharing 

01:39:38.367 --> 01:39:43.043
data. Well, I said already 
earlier that we have plenty of 

01:39:43.044 --> 01:39:45.044
windows on our desktop, right?

01:39:47.727 --> 01:39:49.727
So there are all kinds of Chrome
OS window and whatnot.

01:39:52.249 --> 01:39:54.275
If you don't specify drag drop 
local, it will not be dropped on

01:39:54.276 --> 01:39:57.746
another location. This is only 
for you. In order to allow other

01:39:57.747 --> 01:39:59.747
applications to 

01:40:01.416 --> 01:40:03.416
actually get your data, specify 
this. 

01:40:04.058 --> 01:40:06.058
And if you are actually getting 
some 

01:40:08.075 --> 01:40:10.218
data from someone also, check 
out what you're getting.

01:40:14.179 --> 01:40:16.179
If you're blind

01:40:18.887 --> 01:40:20.098
ly -- if you're looking at the 
clipboard, it's exactly the same

01:40:20.099 --> 01:40:22.099
thing. You definitely want to 
have, of course, 

01:40:25.493 --> 01:40:28.401
all of the richness of whatever 
is being copied and pasted, as 

01:40:28.402 --> 01:40:32.870
well. 
    So with that, resizing. I 

01:40:32.871 --> 01:40:34.089
was talking last year about 
resizing that it's a big 

01:40:34.090 --> 01:40:36.090
problem, right?

01:40:40.608 --> 01:40:43.873
Resizing looks pretty clunky on 
Android when you're doing this. 

01:40:43.874 --> 01:40:45.874
This is an application which is 
written for material design 2.

01:40:47.756 --> 01:40:51.756
0definitely want to have, of 
course, all of the richness of 

01:40:47.756 --> 01:40:50.822
whatever is being copied and 
pasted, as well. 

01:40:47.756 --> 01:40:51.889
So with that, resizing. I was 
talking last year about resizing

01:40:47.756 --> 01:40:52.022
that it's a big problem, right? 
Resizing looks pretty clunky on 

01:40:47.756 --> 01:40:52.022
Android when you're doing this. 
This is an application which is 

01:40:47.756 --> 01:40:47.988
written for material design 2.0.
And it looks nice on a phone, 

01:40:47.989 --> 01:40:50.397
see? This looks, actually, 
pretty nice. 

01:40:52.449 --> 01:40:54.850
So when you are doing -- when 
you're following the design 

01:40:54.851 --> 01:40:56.851
study from material 

01:40:58.754 --> 01:40:59.973
design, coming up with this 
thing. See, there's more 

01:40:59.974 --> 01:41:01.974
information.

01:41:03.225 --> 01:41:04.236
You can actually see more things
and they are revealing more 

01:41:04.237 --> 01:41:06.237
stuff.

01:41:09.312 --> 01:41:11.312
So with that, let me show you

01:41:13.838 --> 01:41:15.838
my notebook. 
    So there's the application.

01:41:18.672 --> 01:41:20.672
And you can resize it.

01:41:22.863 --> 01:41:23.456
And you can see, WHOOIM resizing
it, more and more data is coming

01:41:23.457 --> 01:41:25.457
into play.

01:41:26.476 --> 01:41:29.707
And more. That, of course, is 
the wrong guy.

01:41:32.748 --> 01:41:34.788
And there we go. And you see 
that more and more data is 

01:41:35.200 --> 01:41:37.200
coming in.

01:41:39.619 --> 01:41:41.619
This is all dynamically 
happening

01:41:48.862 --> 01:41:52.995
while resizing it, more and more
data is coming into play. And 

01:41:48.862 --> 01:41:52.995
more. That, of course, is the 
wrong guy. And there we go. And 

01:41:48.862 --> 01:41:49.471
you see that more and more data 
is coming in. This is all 

01:41:49.472 --> 01:41:52.121
dynamically happening. 
    First off, good news, the 

01:41:52.122 --> 01:41:54.790
demo is online, you can download
it, test it out yourself.

01:41:59.687 --> 01:42:01.343
It's on GitHub: And there's an 
excellent code lab, which is 

01:42:01.344 --> 01:42:03.369
showing more. 
    So also doing animations 

01:42:03.370 --> 01:42:06.014
while you're transforming from 
one layout into another.

01:42:10.446 --> 01:42:13.410
You should check out the CodeLab
for sure. 

01:42:14.628 --> 01:42:19.111
How is it being done? You need a
constrained layout. It's like a 

01:42:19.112 --> 01:42:21.769
blueprint essentially getting 
the layouts into some kind of 

01:42:22.172 --> 01:42:24.172
order.

01:42:26.164 --> 01:42:28.164
When to use which one.

01:42:33.674 --> 01:42:35.674
Every one of these layouts need 
to have new IO elements.

01:42:39.769 --> 01:42:41.917
If you want to show it, you hide
-- it's still in the layout 

01:42:41.918 --> 01:42:46.658
itself. So by doing this. And on
create, you'll create the 

01:42:48.282 --> 01:42:50.282
transition you want to use when 
you want 

01:42:51.543 --> 01:42:53.543
to transition from B one to the 
other.

01:42:54.594 --> 01:42:56.594
And the layout handler, you will
be 

01:42:57.595 --> 01:42:59.595
able

01:43:03.531 --> 01:43:05.531
to -- essentially, like, giving 
the 

01:43:06.733 --> 01:43:08.733
control to

01:43:10.294 --> 01:43:12.294
the -- to the -- sorry, giving 
the 

01:43:14.535 --> 01:43:16.535
control to our layout

01:43:19.959 --> 01:43:21.959
, which is in the transition 
itself. 

01:43:21.998 --> 01:43:23.818
Inside the activity, you have to
add the on configuration change 

01:43:23.819 --> 01:43:27.118
which is usually being called 
when something changes like the 

01:43:27.119 --> 01:43:29.149
keyboard is connected to the 
screen or anything like that.

01:43:35.255 --> 01:43:37.978
And from there, you essentially 
are calling the constraint 

01:43:37.979 --> 01:43:39.979
changed layout handler is to let
him know what the size is.

01:43:53.887 --> 01:43:56.980
And with that, you are done. 
    If you want to try it out, 

01:43:56.981 --> 01:43:58.981
try the code lab to get this 
done.

01:44:11.448 --> 01:44:13.873
What does zero latency ink mean?
There is a lag between drawing 

01:44:15.733 --> 01:44:17.733
something or using the pen and 
seeing 

01:44:20.156 --> 01:44:23.663
something on the device itself. 
Where is it coming from?

01:44:34.046 --> 01:44:36.295
You have to do a drawing and 
multiple buffering because you 

01:44:36.296 --> 01:44:38.296
have to pass 

01:44:43.194 --> 01:44:45.685
everything to the come POZ or 
the -- and it's going to the end

01:44:45.686 --> 01:44:47.686
of the 

01:44:48.725 --> 01:44:50.725
pipeline, which might be four 
images or whatnot. 

01:44:51.850 --> 01:44:53.675
So in total, you're coming out 
to 100 milliseconds of delay, 

01:44:53.676 --> 01:44:58.628
which is very, very noticeable. 
The ideal thing is, of course, 

01:44:58.629 --> 01:45:00.654
you simply remove all of the 
compositing.

01:45:04.337 --> 01:45:06.337
Now you're down to roughly two 
frames.

01:45:07.996 --> 01:45:12.719
    The prediction logic to it, 
well, then, we are really at 

01:45:12.720 --> 01:45:14.720
pretty much zero.

01:45:22.725 --> 01:45:24.725
Which is showing the whole thing
in action. 

01:45:25.383 --> 01:45:27.383
[ Applause ]
Thank you.

01:45:32.761 --> 01:45:37.174
   &gt;&gt; SHAHID HUSSAIN: Hi, 
everyone. Let's see.

01:45:41.169 --> 01:45:43.169
Whoops.

01:45:49.928 --> 01:45:52.770
Can you see what I've got up 
there? So I drew some spiderman,

01:45:52.771 --> 01:45:54.771
that's 

01:45:58.124 --> 01:46:00.977
typically what I'm known for at 
Marvel, but I also drew Thanos.

01:46:04.595 --> 01:46:07.746
Anybody see Infinity War yet? I 
did, too. 

01:46:09.801 --> 01:46:11.427
I like you can rotate, draw at 
any angle. You can also do 

01:46:11.428 --> 01:46:13.428
layers.

01:46:14.495 --> 01:46:16.495
This is infinite painter, by the
way.

01:46:17.955 --> 01:46:20.821
What I've done, drawn Spidey 
ahead of time. And I'm going to 

01:46:20.822 --> 01:46:22.822
ink on top of him 

01:46:23.829 --> 01:46:25.829
using some the inking tools.

01:46:33.675 --> 01:46:35.675
I've got to change my

01:46:50.445 --> 01:46:52.445
color -- I'm from a school of 
thought 

01:46:53.944 --> 01:46:55.976
where Spiderman should have 
expressive eyes, I'm glad they 

01:46:55.977 --> 01:46:57.977
did that in the movies.

01:47:21.639 --> 01:47:23.639
Some people don't like to do the
webbing, but I do.

01:47:41.700 --> 01:47:43.700
It's worth it in the end.

01:47:45.586 --> 01:47:50.269
    And then, of course, you can
add color, as well. I put in a 

01:47:50.270 --> 01:47:52.270
layer already.

01:47:55.087 --> 01:47:57.087
With a red base and I'm going to
add some shadow to it.

01:48:02.629 --> 01:48:05.084
One of the other features I like
about this, you can double tap 

01:48:05.085 --> 01:48:08.327
to reset it and then, if you 
hold and long press, it'll flip 

01:48:08.328 --> 01:48:10.328
it.

01:48:12.258 --> 01:48:14.895
So I'm always flipping things, 
if I can because it gives you a 

01:48:14.896 --> 01:48:16.896
fresh perspective.

01:48:18.663 --> 01:48:22.949
    Of course, there's all kinds
of drawing tools that you can 

01:48:22.950 --> 01:48:24.950
use.

01:48:26.154 --> 01:48:28.154
Some are

01:48:43.580 --> 01:48:45.421
What I did was clipped the 
shadow layer to the layer 

01:48:45.422 --> 01:48:47.271
beneath it, which means that 
everything I do on this layer 

01:48:47.272 --> 01:48:51.563
will be bounded by the layer 
below it. 

01:48:55.576 --> 01:48:57.576
One way to save time

01:49:01.954 --> 01:49:03.383
. Of course, the other nice 
thing about the stylus, it has 

01:49:03.384 --> 01:49:05.384
tilt.

01:49:07.442 --> 01:49:09.442
In this case, I made tilt.

01:49:14.376 --> 01:49:17.221
Depending on which way I hold 
the pen, it will give me a thick

01:49:17.222 --> 01:49:19.222
or thin line.

01:50:16.608 --> 01:50:18.608
I could do this all day.

01:50:19.903 --> 01:50:21.903
I usually do.

01:50:25.829 --> 01:50:27.065
Usually, there aren't this many 
people watching while I'm 

01:50:27.066 --> 01:50:29.066
drawing.

01:50:38.970 --> 01:50:40.970
Y'all are lucky I'm even wearing
pants.

01:50:56.710 --> 01:50:58.966
Let's finish it off with Spidey 
sense because Thanos is nearby.

01:51:11.515 --> 01:51:13.515
There we go. Thank you. 

01:51:15.838 --> 01:51:17.838
[ Applause ] 

01:51:30.175 --> 01:51:33.655
   &gt;&gt; STEFAN KUHNE: If you want 
access to it, there's a QR code,

01:51:33.656 --> 01:51:35.656
please grab it.

01:51:38.355 --> 01:51:40.999
And sign up for our release. So 
you will be added to the release

01:51:41.000 --> 01:51:43.445
as soon as we are giving you 
access to it.

01:51:53.212 --> 01:51:55.212
You can see the code and it 
might change a little bit. 

01:51:57.272 --> 01:52:01.871
So multidisk player. You have an
internal screen and external 

01:52:01.872 --> 01:52:06.850
screen. But if you're really 
creative, you have a pixelbook, 

01:52:06.851 --> 01:52:09.709
you might get up to seven 
screens. I'm not entirely sure. 

01:52:09.710 --> 01:52:12.181
I've heard that is possible. 
    Anyways, but the thing is, 

01:52:12.182 --> 01:52:14.182
like, what does it mean for you?

01:52:17.273 --> 01:52:19.118
Actually, it means a lot. Many 
applications are doing stupid 

01:52:19.119 --> 01:52:21.152
things. Sorry, you are not that.

01:52:28.087 --> 01:52:30.973
Hey, I want the addition play 
information for ID zero, it's a 

01:52:30.974 --> 01:52:34.248
default. 
    It's not the default, what 

01:52:34.249 --> 01:52:36.249
is the default disk player. You 
don't know that, right?

01:52:41.725 --> 01:52:43.725
So therefore, we have, actually,
if

01:52:46.858 --> 01:52:48.858
you are pre-O, we are thinking 
you're a 

01:52:50.712 --> 01:52:53.478
non-disk player application.

01:53:03.697 --> 01:53:03.759
Essentially, zero is, like, a 
vitriol display. And the API is 

01:53:03.760 --> 01:53:05.836
clear, exactly like it should 
be, but you get this kind of 

01:53:05.837 --> 01:53:07.837
special display so you're 
working fine.

01:53:12.101 --> 01:53:14.561
If on the other hand, something 
after O or O, then you will 

01:53:14.562 --> 01:53:17.820
actually get a different 
treatment. In that case, you 

01:53:17.821 --> 01:53:22.156
will get the real IDs, the 
display IDs. You should be 

01:53:22.157 --> 01:53:24.157
careful what you are doing. 

01:53:27.916 --> 01:53:29.916
So, yeah, one additional thing 
is if 

01:53:31.389 --> 01:53:33.046
you are, actually, running an 
application, you have the launch

01:53:33.047 --> 01:53:35.047
display ID as a function cord.

01:53:41.440 --> 01:53:43.440
You should definitely use the 
size of the window.

01:53:46.355 --> 01:53:48.355
The display metrics from that.

01:53:49.812 --> 01:53:51.681
That is working perfectly for 
you. And if you wanted to see 

01:53:51.682 --> 01:53:55.804
any kind of changes, for 
example, move to a different 

01:53:55.805 --> 01:53:58.046
display or something, then look 
at configuration change to see 

01:53:58.047 --> 01:54:01.952
the kind of changes. 
    And if you want to, 

01:54:01.953 --> 01:54:05.681
actually, position yourself, 
think also about set launch 

01:54:05.682 --> 01:54:09.947
display ID. If you do not want 
to get to the same screen while 

01:54:09.948 --> 01:54:12.835
your current application is on. 
    What you shouldn't do is you

01:54:16.499 --> 01:54:19.538
shouldn't really assume anything
without using your context. If 

01:54:19.539 --> 01:54:21.797
you're using any kind of display
ID, I mean, trying to get the 

01:54:21.798 --> 01:54:24.896
default display, you will get 
something, which is most 

01:54:24.897 --> 01:54:26.897
certainly wrong. 

01:54:29.776 --> 01:54:32.033
So and also, what was that? 
Yeah, don't make any assumptions

01:54:32.034 --> 01:54:34.034
that 

01:54:37.134 --> 01:54:39.149
you are on the built-in display,
because that is wrong, as well. 

01:54:39.150 --> 01:54:42.435
    And last but not least, 
don't assume that you're always 

01:54:42.436 --> 01:54:44.436
running from the same display.

01:54:47.752 --> 01:54:50.183
So presentation API, we're being
asked to get this to you. We are

01:54:50.184 --> 01:54:52.184
getting that very, very soon.

01:54:53.441 --> 01:54:55.079
And it is -- well, actually, I 
think pretty much by now, it 

01:54:55.080 --> 01:54:57.080
should be there.

01:54:58.127 --> 01:55:00.127
You can alternatively also use 
set 

01:55:01.585 --> 01:55:02.425
launch display ID and set 
launch, which will do the same 

01:55:02.426 --> 01:55:04.426
thing.

01:55:06.253 --> 01:55:08.253
3D gaming.

01:55:10.121 --> 01:55:12.295
We have Vulkan support.

01:55:16.749 --> 01:55:18.402
It was shipping already -- it 
was the shipping the beginning 

01:55:18.403 --> 01:55:21.447
of this year, shipping around 
now. And older architectures are

01:55:21.448 --> 01:55:23.448
on the way. 

01:55:25.317 --> 01:55:27.589
So much faster and so on. So 
when you're building your own 

01:55:27.590 --> 01:55:32.705
game, so there are a few things 
what you should take care of. 

01:55:32.706 --> 01:55:33.550
First off, you should always use
the latest version of the 

01:55:33.551 --> 01:55:38.658
framework. If you're using Unity
and whatnot, they are fixing 

01:55:38.659 --> 01:55:41.754
their stuff. Window size changes
and input changing a little bit.

01:55:43.420 --> 01:55:46.078
They will actually fix that for 
you. So please, use the latest 

01:55:46.079 --> 01:55:49.329
one because otherwise your 
application will fail and you're

01:55:49.330 --> 01:55:51.330
trying to be resized. 

01:55:55.855 --> 01:55:59.716
So the next thing is also use 64
bit or native code, as well. 

01:55:59.717 --> 01:56:01.558
Don't use only ARM because it 
is, of course, a little bit 

01:56:01.559 --> 01:56:04.242
slower especially on the 
high-end devices.

01:56:07.292 --> 01:56:09.327
So when you're running a game. 
Application quality control 

01:56:09.328 --> 01:56:11.991
might actually be bad for you. 
Depending on what you're doing.

01:56:15.049 --> 01:56:17.899
So if, for example, multiple 
surfaces and whatnot and trying 

01:56:17.900 --> 01:56:20.540
to squeeze out the latest thing.
And if you're running into a 

01:56:20.541 --> 01:56:22.541
state 

01:56:23.541 --> 01:56:25.541
where you're using buffering 
because 

01:56:26.638 --> 01:56:28.092
you're composite on the desktop,
your quality control might 

01:56:28.093 --> 01:56:31.571
actually do something negative 
to your quality and you get some

01:56:31.572 --> 01:56:33.572
kind of really good behavior.

01:56:34.868 --> 01:56:35.711
So therefore, try it out on 
Chromebooks before you release 

01:56:35.712 --> 01:56:37.712
it. That will be really awesome.

01:56:41.893 --> 01:56:43.893
And, yeah, if you're using a lot
of 

01:56:44.953 --> 01:56:46.424
layers, like a lot of surface 
use and whatnot, you might also 

01:56:46.425 --> 01:56:49.502
fall out of this and then your 
quality might actually drop. 

01:56:49.503 --> 01:56:53.365
    If you can do everything in 
the single layer, please try to 

01:56:53.366 --> 01:56:55.366
do that instead.

01:56:57.249 --> 01:56:58.873
And always be aware that your 
window size might change at any 

01:56:58.874 --> 01:57:03.452
point in time. And, of course, 
since users, for example, 

01:57:03.453 --> 01:57:06.416
minimizing you, you might 
actually lose your state and/or 

01:57:06.417 --> 01:57:09.304
if the window is getting 
resized, the state might 

01:57:09.305 --> 01:57:11.305
actually be lost.

01:57:12.378 --> 01:57:15.232
So please save your state. Best 
practices. As I said earlier, we

01:57:15.233 --> 01:57:17.233
are trying to 

01:57:19.705 --> 01:57:21.328
work with Play Store to surface 
applications that are good for 

01:57:21.329 --> 01:57:24.198
the Chrome OS environment. 
Therefore, if you are doing 

01:57:24.199 --> 01:57:26.199
everything 

01:57:28.688 --> 01:57:31.995
which we ask for, you will get a
better rating. Target SDK bigger

01:57:31.996 --> 01:57:33.996
than 26, that is definitely 
something good. 

01:57:36.703 --> 01:57:37.915
Implement keyboard mouse 
navigation, that is a good 

01:57:37.916 --> 01:57:40.359
thing. UI elements when you're 
resizing, they 

01:57:44.586 --> 01:57:46.586
should always be inside the 
screen

01:57:49.798 --> 01:57:51.627
. When you're doing resizing, 
definitely try to think about 

01:57:51.628 --> 01:57:55.511
landscape and portrait. Both 
orientations are very important.

01:57:57.338 --> 01:57:59.224
Make good use of a lot of space.
Because you have a lot of space.

01:57:59.225 --> 01:58:01.269
    So use it. I showed you how 
to.

01:58:06.787 --> 01:58:08.787
Use architectural components 
whenever 

01:58:10.352 --> 01:58:12.352
possible to save your state.

01:58:14.848 --> 01:58:17.088
Be fluid and please don't crash.
Check out that you are not 

01:58:17.089 --> 01:58:19.089
crashing.

01:58:22.160 --> 01:58:24.160
And with that, I'm passing it on
to

01:58:26.748 --> 01:58:27.970
Emelie who is talking about the 
great tools we have for you. 

01:58:27.971 --> 01:58:31.247
   &gt;&gt; EMILIE ROBERTS: Thank you.
There's so many exciting new 

01:58:31.248 --> 01:58:33.248
things for 

01:58:34.699 --> 01:58:36.763
Android applications on Chrome 
OS. And I'm honored to present 

01:58:36.764 --> 01:58:39.245
to you three new amazing 
developer tools to help 

01:58:41.269 --> 01:58:42.709
optimizing your application for 
Chrome OS faster and easier. 

01:58:46.216 --> 01:58:48.258
The first one, you've all been 
very patient, thank you for your

01:58:48.259 --> 01:58:50.896
patience and a big thank you to 
the engineering team for making 

01:58:50.897 --> 01:58:52.897
this happen. And doing it right.

01:58:58.251 --> 01:59:00.251
In Android Studio, pleased to 
present 

01:59:02.341 --> 01:59:04.993
the Chrome OS emulator. 
[ Applause ]

01:59:08.043 --> 01:59:10.484
So right in Android Studio, a 
full Chrome OS image, test out 

01:59:10.485 --> 01:59:15.783
the user flow for Chrome OS and 
test and optimize your app for 

01:59:15.784 --> 01:59:17.784
Android, Android application 

01:59:19.081 --> 01:59:21.081
right in Chrome OS, which is 
awesome.

01:59:23.151 --> 01:59:25.813
If any of you have ever made an 
Android application. Some of you

01:59:25.814 --> 01:59:28.084
did, if you do, you'll know 
there's nothing like testing on 

01:59:28.085 --> 01:59:30.339
a real device. 
    Especially, a form factor 

01:59:30.340 --> 01:59:35.252
like this where the user will be
flipping it, rotating it, 

01:59:35.253 --> 01:59:37.253
tossing it on the bed, 

01:59:41.139 --> 01:59:44.301
keyboard input, mini 
controllers, stylus input. We've

01:59:44.302 --> 01:59:46.302
made that a lot easier. 

01:59:50.269 --> 01:59:52.269
I'm very happy to present ADB 
debugging over USB.

01:59:55.583 --> 01:59:58.052
It's available for your 
pixelbook and your HP Chromebook

01:59:58.053 --> 02:00:02.116
X2. The public documentation out
in a week or two, please watch 

02:00:02.117 --> 02:00:04.156
the links. And more devices 
coming soon and makes 

02:00:05.166 --> 02:00:07.166
development that much easier. 

02:00:10.676 --> 02:00:12.676
So I said there were three 
exciting 

02:00:13.753 --> 02:00:18.654
developer tools. And the first 
two are awesome, but I think the

02:00:18.655 --> 02:00:20.493
third one is most exciting and I
truly believe it's going to 

02:00:20.494 --> 02:00:23.966
knock your socks off. And we 
didn't want anybody to go home 

02:00:26.830 --> 02:00:29.279
with cold feet so we brought 
replacement socks for when they 

02:00:29.280 --> 02:00:32.528
fly off your feet. If you're in 
the middle of the audience, 

02:00:32.529 --> 02:00:34.529
don't be jealous, there's plenty
of socks for everyone and on the

02:00:36.436 --> 02:00:38.436
way out of the session, you can 
pick them up.

02:00:40.177 --> 02:00:42.177
Socks, right? It's your new 
developer tool. 

02:00:44.886 --> 02:00:47.580
I'm going to switch over to the 
Chromebook for a quick demo. We 

02:00:47.581 --> 02:00:51.061
have a terminal. Yes, a 
terminal. Yeah, terminal!

02:00:54.748 --> 02:00:56.748
Super exciting terminal.

02:00:58.793 --> 02:01:00.793
You can

02:01:02.749 --> 02:01:04.749
see gitclone, I clone the Chrome
lab, 

02:01:07.270 --> 02:01:10.115
which you should check out the a
the Code Lab tent. And what's 

02:01:10.116 --> 02:01:12.116
interesting about this 

02:01:14.361 --> 02:01:16.361
terminal, it's running inside a

02:01:18.806 --> 02:01:20.806
full linux environment. You can 
clap for the next one, you can 

02:01:25.549 --> 02:01:27.549
install an application, Linux 

02:01:28.603 --> 02:01:33.515
application like Android Studio.
Here we go, Android Studio. More

02:01:33.516 --> 02:01:35.516
exciting than a terminal, I 
guess. 

02:01:39.276 --> 02:01:40.935
Here I have the Code Lab loading
up, adding drag and drop, hit 

02:01:40.936 --> 02:01:42.936
run. Oh, so if you're in the 
back and you 

02:01:47.701 --> 02:01:49.701
can't see, that says Google 
Pixelbook, 

02:01:51.411 --> 02:01:54.082
which means when I press okay, 
goes to the build, pushing the 

02:01:54.083 --> 02:01:56.083
application to the device.

02:01:57.741 --> 02:02:03.050
    On Device. Yeah. 
[ Applause ]

02:02:05.290 --> 02:02:07.290
So you can click, oh, we got 
keyboard 

02:02:08.758 --> 02:02:10.758
commands and it's pushed it 
straight to the device.

02:02:13.465 --> 02:02:15.091
We can program in Android 
Studio, push, test the app out 

02:02:15.092 --> 02:02:17.092
and, of course, you 

02:02:18.795 --> 02:02:20.795
have your debugging tools. So 
this is amazing. 

02:02:23.021 --> 02:02:27.970
[ Applause ] 
I'm so glad the engineering team

02:02:27.971 --> 02:02:29.971
let me present this super 
exciting announcement.

02:02:33.925 --> 02:02:37.225
We're super excited about Linux 
home Chromebooks. We have a lot 

02:02:37.226 --> 02:02:39.270
of questions at Office hours, 
what's going on behind the 

02:02:39.271 --> 02:02:41.271
scenes? How does this work?

02:02:44.013 --> 02:02:46.013
I'm going to give you a brief 
overview.

02:02:47.307 --> 02:02:49.307
Here's Chrome OS, in real life, 
it's a 

02:02:50.323 --> 02:02:52.323
bit

02:02:53.617 --> 02:02:55.617
snazzier.

02:02:57.284 --> 02:02:59.284
This is hour you Android apps 
run on Chrome OS.

02:03:01.161 --> 02:03:03.161
We have Linux VM, and we install
great 

02:03:04.491 --> 02:03:06.491
applications like Tux Racer.

02:03:07.805 --> 02:03:09.036
Also, Android Studio and to 
achieve the last step, which I 

02:03:09.037 --> 02:03:11.037
think is most exciting, pushing 
straight to the app 

02:03:13.552 --> 02:03:15.786
and debugging on device, we need
to connect ADB to the android 

02:03:15.787 --> 02:03:17.787
container. That's simple.

02:03:20.596 --> 02:03:22.596
ADB connect command, it's not a 
secret 

02:03:25.114 --> 02:03:27.546
IP address, it's the IP address 
for the ABDB on the Android 

02:03:27.547 --> 02:03:29.855
Container. It is in the public 
instructions already. 

02:03:31.484 --> 02:03:35.565
But here's a pro tip since you 
came to our session. For some 

02:03:35.566 --> 02:03:37.566
situations it's handy to set 

02:03:39.886 --> 02:03:41.347
up a little SSH tunnel in Chrome
OS that will forward those 

02:03:41.348 --> 02:03:45.200
connections automatically. Not 
necessary, it's helpful in some 

02:03:45.587 --> 02:03:47.228
situations. 
    Here's the instructions if 

02:03:47.229 --> 02:03:51.541
you haven't -- oops. Here are 
the instructions if you 

02:03:54.999 --> 02:03:56.232
haven't seen it, I think we're 
number one on hacker news 

02:03:56.233 --> 02:03:58.233
yesterday or something. That's 
kind of exciting.

02:04:01.331 --> 02:04:02.960
Please install it on your Google
pixelbook, coming to more 

02:04:02.961 --> 02:04:04.961
devices soon.

02:04:06.058 --> 02:04:08.058
Let us know how it works, try it
out.

02:04:09.103 --> 02:04:11.103
So where are we at?

02:04:12.154 --> 02:04:14.154
We have an emulator, we have ADB
debugging over USB.

02:04:17.895 --> 02:04:20.546
We've got Linux on Chromebooks, 
running on studio and you have 

02:04:20.547 --> 02:04:22.547
socks for the 

02:04:24.079 --> 02:04:26.320
long coding nights. What's 
missing? Nothing, right? 

02:04:28.561 --> 02:04:30.561
Except, I heard a rumor on the 
way 

02:04:32.896 --> 02:04:35.962
in that some of you don't yet 
have a Pixelbook. What? So we're

02:04:35.963 --> 02:04:38.864
going to help you out a little 
bit with that. On the way out 

02:04:38.865 --> 02:04:40.865
when you grab your 

02:04:42.482 --> 02:04:44.482
socks, you can pick

02:04:50.531 --> 02:04:53.219
up a coupon for 75% off Google 
Pixelbook. Oh, they're kicking 

02:04:53.220 --> 02:04:57.517
me off the stage. Come to the 
code labs. We have two good code

02:04:57.518 --> 02:05:02.818
labs. You can make keyboard 
input, drag and drop, click on 

02:05:02.819 --> 02:05:05.496
the dinosaurs, talk to us office
hours today, fill out the 

02:05:05.497 --> 02:05:09.361
survey. Thank you. Can everyone 
come on the stage to bow. We're 

02:05:09.362 --> 02:05:11.362
done, yes?

02:05:16.326 --> 02:05:18.326
Shahid, come on up, Stefan, 
Palo. Thank you so much. 

02:06:11.566 --> 02:06:13.566
Learn How UX Researchers

02:06:15.320 --> 02:06:17.320
helped test, refine and evolve 
the 

02:06:19.185 --> 02:06:21.185
latest Material Design guidance 
and why 

02:06:23.224 --> 02:06:25.224
it matters to product 
development

02:23:34.536 --> 02:23:36.536
&gt;&gt; And I'm Mark.

02:23:38.380 --> 02:23:40.823
In today's session, we're hoping
to demonstrate how you can build

02:23:40.824 --> 02:23:43.670
really, really fully featured 
media playback functionality 

02:23:43.671 --> 02:23:45.671
into the apps using little code.

02:23:49.403 --> 02:23:50.645
We're going to guide you through
the process of building two 

02:23:50.646 --> 02:23:53.918
applications. We're going to 
start by focusing on the video 

02:23:53.919 --> 02:23:55.919
use case.

02:23:57.193 --> 02:24:00.046
We're going to build a video 
player app and show you how to 

02:24:00.047 --> 02:24:02.295
insert ads inside that video 
content. And then, we're going 

02:24:02.296 --> 02:24:05.339
to shift our focus to audio. 
We're going to show you how to 

02:24:05.340 --> 02:24:07.340
play audio in a background 
service, show you 

02:24:11.671 --> 02:24:13.671
how to integrate with Android 
media 

02:24:16.058 --> 02:24:18.156
sessions and new functionality 
for downloading for offline 

02:24:18.157 --> 02:24:20.819
playback. 
    Like last year, we're hoping

02:24:20.820 --> 02:24:23.875
to have mixture of introductory 
content and coverage of slightly

02:24:23.876 --> 02:24:26.926
more tricky use cases. 
Hopefully, something for 

02:24:26.927 --> 02:24:28.927
everyone.

02:24:44.731 --> 02:24:47.380
Exo player is an application 
media player. You choose which 

02:24:47.381 --> 02:24:49.420
version you'd like to use and 
bundle the play implementation 

02:24:51.052 --> 02:24:53.052
into your application as a 
dependency. 

02:24:53.110 --> 02:24:54.969
And what that gives you is 
consistent playback 

02:24:54.970 --> 02:24:57.484
functionality across all 
different android versions and 

02:24:57.677 --> 02:24:59.677
devices.

02:25:07.463 --> 02:25:10.318
You can reach more than 99% of 
active devices. The project is 

02:25:10.319 --> 02:25:12.771
open source is hosted on GitHub,
and we have an active community 

02:25:14.394 --> 02:25:16.632
there and you can file issues 
with feature requests, bugs and 

02:25:16.633 --> 02:25:19.687
you can even send requests. 

02:25:24.404 --> 02:25:26.404
It is also quite widely used.

02:25:34.457 --> 02:25:36.457
There are actually over 200,000 

02:25:38.689 --> 02:25:41.923
applications on the play store 
that are using exoplayer. And 

02:25:41.924 --> 02:25:43.924
the team is excited to see the 

02:25:47.953 --> 02:25:49.862
great products you're building 
using ExoPlayer. We've been 

02:25:49.863 --> 02:25:51.700
working hard on stability and 
performance improvements behind 

02:25:51.701 --> 02:25:53.701
the scenes and also on brand new
features. 

02:25:57.447 --> 02:25:58.883
And in doing that ExoPlayer is 
developing into a featured 

02:25:58.884 --> 02:26:00.884
solution for media playback.

02:26:03.552 --> 02:26:04.999
So here's some of the highlights
of the features that we've added

02:26:05.000 --> 02:26:08.489
over the past year. There's much
too much to go into detail on 

02:26:08.490 --> 02:26:12.997
here. But I'd encourage you to 
check out the release notes and 

02:26:12.998 --> 02:26:15.451
the redirectory of our GitHub 
project where you can find full 

02:26:17.279 --> 02:26:18.703
details of all of the changes 
included in each new release of 

02:26:18.704 --> 02:26:23.375
the player. 
    In today's talk, we're going

02:26:23.376 --> 02:26:27.068
to cover a few highlights 
including support for 

02:26:27.069 --> 02:26:29.314
downloading media as I've 
mentioned and support for player

02:26:29.315 --> 02:26:34.295
notifications. Okay. I think 
that's enough on the slides. 

02:26:34.296 --> 02:26:36.296
Let's get on with live coding.

02:26:37.746 --> 02:26:40.420
And for each of the two apps, 
video app and audio app, a 

02:26:40.421 --> 02:26:42.667
mostly empty project. We want to
show you as much of the 

02:26:43.486 --> 02:26:45.486
interesting code as possible. 

02:26:46.756 --> 02:26:48.589
We're going to provide a link to
a branch on our GitHub project 

02:26:48.590 --> 02:26:52.299
where you can check out the code
afterwards if you want to look 

02:26:52.300 --> 02:26:54.937
at things in more detail. Marc, 
are you ready for furious 

02:26:54.938 --> 02:26:56.778
typing? 
   &gt;&gt; MARC BACHINGER: Yes, I am.

02:26:56.779 --> 02:27:00.470
   &gt;&gt; ANDREW LEWIS: Switch to 
the laptop, please. The starting

02:27:00.471 --> 02:27:01.906
point in time is a mostly empty 
project, as I mentioned, and 

02:27:01.907 --> 02:27:07.019
we're going to make a video 
player app where we start 

02:27:07.020 --> 02:27:09.075
playing the stream as soon as it
comes into the foreground and 

02:27:09.076 --> 02:27:11.076
stop when we go into the 
background.

02:27:15.020 --> 02:27:16.843
And the first step is going to 
be to add a dependency and this 

02:27:16.844 --> 02:27:19.734
provides a main interface for 
the player you can use to 

02:27:19.735 --> 02:27:21.816
control. As you can see, Marc's 
added a 

02:27:25.532 --> 02:27:26.547
dependency on the library, which
is the new release that we've 

02:27:26.548 --> 02:27:28.548
done this week. 

02:27:30.237 --> 02:27:34.731
He's also added a dependency on 
the optional UI module. This 

02:27:34.732 --> 02:27:36.975
provides some customizable high 
level UI components you can put 

02:27:36.976 --> 02:27:40.686
into your applications for 
things, like, showing video 

02:27:40.687 --> 02:27:42.687
player interview, that's player 
view, which we're going to use 

02:27:42.924 --> 02:27:45.843
today. 
    And also, provides playback 

02:27:45.844 --> 02:27:48.896
control view and other 
components. And these are all 

02:27:48.897 --> 02:27:53.832
very customizable. You can 
change which icons you're using,

02:27:53.833 --> 02:27:56.099
customize the layouts and so on.
    Marc has added a player 

02:27:56.100 --> 02:27:58.100
view, which is going to fill the
activity.

02:28:00.613 --> 02:28:02.647
And he's given it an identifier 
player underscore view, we'll be

02:28:02.648 --> 02:28:05.562
able to access it from code. If 
we switch over to the main 

02:28:05.563 --> 02:28:07.563
activity, 

02:28:08.828 --> 02:28:11.699
we can see create method, we can
get access to that view using 

02:28:11.700 --> 02:28:13.700
find view by ID. 

02:28:17.743 --> 02:28:21.743
And once we've got access to 
that view, then the next steps 

02:28:17.743 --> 02:28:19.743
we're going to 

02:28:25.665 --> 02:28:27.665
take is to actually initialize 
the player.

02:28:29.757 --> 02:28:31.757
Okay. So, once we've got our 
player view in 

02:28:33.816 --> 02:28:38.082
the field, let's override the on
start method. And we're going to

02:28:33.816 --> 02:28:35.879
initialize the player. To 
initialize the player, we're 

02:28:35.880 --> 02:28:36.896
going to use a static method on 
the Exo Player factory called 

02:28:36.897 --> 02:28:38.897
new simple instance.

02:28:45.898 --> 02:28:49.555
    It does lots of things for 
you. For example, handling the 

02:28:49.556 --> 02:28:51.556
life cycle of the surface holder
for video output.

02:29:06.300 --> 02:29:08.300
You pass in a dependency of a 
component. 

02:29:09.590 --> 02:29:11.614
In this case, we're passing in a
default tract, but you could 

02:29:11.615 --> 02:29:15.694
pass in your own select 
implementation if you wanted to 

02:29:15.695 --> 02:29:17.695
have much more control over 

02:29:20.367 --> 02:29:22.850
how track selection's working. 
The player's output is going to 

02:29:22.851 --> 02:29:24.851
appear in that particular view. 
    Okay.

02:29:29.208 --> 02:29:31.259
So the next step is to tell 
ExoPlayer what we want to play. 

02:29:31.260 --> 02:29:32.894
And for that, there are two 
parts. The first one is to 

02:29:32.895 --> 02:29:34.895
provide a factory for data 
sources.

02:29:38.872 --> 02:29:40.715
Data sources tell ExoPlayer how 
to load data, using a particular

02:29:40.716 --> 02:29:45.004
stack or loading files from a 
local device. In this example, 

02:29:45.005 --> 02:29:46.832
we're using a default data 
source, which is suitable for 

02:29:46.833 --> 02:29:48.833
many use cases.

02:29:52.350 --> 02:29:54.185
It provides loading for 
httpURLs, the local disk assets 

02:29:54.186 --> 02:29:58.472
and resources bundled into your 
ADK and so on. If you wanted to,

02:29:58.473 --> 02:30:00.473
for example, use the 

02:30:03.796 --> 02:30:05.649
network stack here, you could 
use a CRO net. That's the first 

02:30:05.650 --> 02:30:10.528
part of telling it what to load,
the next part is specifying a 

02:30:10.529 --> 02:30:13.781
media source. It's going to 
depend on the type of media 

02:30:13.782 --> 02:30:16.227
you're trying to play. We're 
going to be playing an MP4.

02:30:19.317 --> 02:30:21.317
And use an extractor media 
source.

02:30:28.463 --> 02:30:30.463
If you wanted to play dash or HL

02:30:32.371 --> 02:30:32.996
S, you would use the 
corresponding media sources for 

02:30:32.997 --> 02:30:34.997
those.

02:30:39.195 --> 02:30:41.017
Once we've got our media source,
now we need to prepare the 

02:30:41.018 --> 02:30:44.095
player to start buffering data. 
We'll pass that to the prepare 

02:30:44.096 --> 02:30:47.987
method and call set play when 
ready to tell the player as soon

02:30:47.988 --> 02:30:50.892
as it transitions from the 
buffering state to the ready 

02:30:50.893 --> 02:30:52.893
state, 

02:30:53.951 --> 02:30:55.994
then, playback should begin 
automatically. All that remains 

02:30:55.995 --> 02:31:00.083
is to clean up when the activity
goes into the background. So 

02:31:00.084 --> 02:31:02.084
we'll override on the stop.

02:31:03.564 --> 02:31:06.803
Okay. And in that, we're going 
to clear the player reference on

02:31:06.804 --> 02:31:09.068
the player view. 
    And then, we're going to 

02:31:09.069 --> 02:31:11.069
release the player.

02:31:12.573 --> 02:31:17.063
Okay. And this is kind of the 
minimal code you need just to 

02:31:17.064 --> 02:31:19.064
play a video stream.

02:31:21.171 --> 02:31:25.037
Let's go ahead and deploy 
thatAll that remains is to clean

02:31:21.171 --> 02:31:24.904
up when the activity goes into 
the background. So we'll 

02:31:21.171 --> 02:31:25.304
override on the stop. Okay. And 
in that, we're going to clear 

02:31:21.171 --> 02:31:23.904
the player reference on the 
player view. 

02:31:21.171 --> 02:31:25.304
And then, we're going to release
the player. Okay. And this is 

02:31:21.171 --> 02:31:24.837
kind of the minimal code you 
need just to play a video 

02:31:21.171 --> 02:31:23.171
stream. Let's go ahead and 
deploy that to the device now.

02:31:24.177 --> 02:31:26.177
And if we could switch to the 
phone

02:31:29.953 --> 02:31:31.772
please when the application is 
being installed on the device, 

02:31:31.773 --> 02:31:33.773
you should see the device starts
to play automatically. 

02:31:35.681 --> 02:31:37.681
And you can see that if you tap 
on 

02:31:40.370 --> 02:31:42.442
the video, you get some simple 
playback controls. Pretty much 

02:31:42.443 --> 02:31:44.443
what you'd expect from a video 
player app.

02:31:46.520 --> 02:31:48.520
So you can pause and resume, and
so on. Okay.

02:31:52.631 --> 02:31:54.631
Let's now switch back to the 
laptop, please.

02:31:56.933 --> 02:31:59.405
So let's imagine we've launched 
video app and if we can switch 

02:31:59.406 --> 02:32:02.668
to the laptop, please. We've 
launched our video app. And now 

02:32:02.669 --> 02:32:04.734
we'd like to think about how 
we're going to monetize our 

02:32:04.735 --> 02:32:08.002
content by showing ads. 
    This is extremely easy to do

02:32:08.003 --> 02:32:10.003
with 

02:32:12.357 --> 02:32:14.357
ExoPlayer, we've added an IMA 
extension, 

02:32:17.157 --> 02:32:19.163
which makes this very easy. Exo

02:32:22.706 --> 02:32:24.523
Player make it easy to use. The 
IMA extension is a wrapper 

02:32:24.524 --> 02:32:26.804
around the interactive media ads
SDK which 

02:32:33.149 --> 02:32:34.799
provides support for loading XML
in VML format, which is a 

02:32:34.800 --> 02:32:38.068
standard format for information 
about ads. We're going to be 

02:32:38.069 --> 02:32:41.774
using that for loading ads and 
insert it within the content in 

02:32:41.775 --> 02:32:46.292
the player. Marc's going to 
create an ads loader, which is 

02:32:46.293 --> 02:32:48.325
we're going to use an IMA ads 
loader, the object provided by 

02:32:48.326 --> 02:32:50.558
the IMA extension. 
    This is going to take the 

02:32:50.559 --> 02:32:52.559
context 

02:32:55.943 --> 02:32:57.943
and the URI of an XML document.

02:33:00.660 --> 02:33:02.909
We're going to create that and 
going to release it in on 

02:33:02.910 --> 02:33:04.910
destroy.

02:33:07.003 --> 02:33:08.633
The reason we're using it, the 
ads loader contains information 

02:33:08.634 --> 02:33:11.474
about which ads have been 
played. We want to make sure if 

02:33:11.475 --> 02:33:13.475
it goes into the background and 
comes back into the 

02:33:16.850 --> 02:33:19.116
foreground, we don't show the 
same ads multiple times. As I 

02:33:19.117 --> 02:33:21.117
mentioned before, media sources 

02:33:23.251 --> 02:33:25.251
are how we tell Exo Player to 
play.

02:33:27.759 --> 02:33:30.238
And we use the predictably named
media source. We'll pass in the 

02:33:30.239 --> 02:33:32.679
content source we want to play. 
    A data source factory, which

02:33:32.680 --> 02:33:35.733
is going to be used to load data
for playing the ads.

02:33:39.621 --> 02:33:41.457
And finally, we'll pass in a 
group on top of the player and 

02:33:41.458 --> 02:33:45.008
that's going to be used to show 
any user interface associated 

02:33:45.009 --> 02:33:47.009
with ads. Like, for example, the
skip button. 

02:33:48.518 --> 02:33:50.755
And building an ads media source
out of a content media source 

02:33:50.756 --> 02:33:52.756
like this is an example of media
source composition.

02:33:56.253 --> 02:33:58.690
And this is something you can do
with ExoPlayer, and we'll do 

02:33:58.691 --> 02:34:00.691
more examples of it later when 
we look at play list.

02:34:03.585 --> 02:34:05.009
We prepare the player with the 
media source and should be good 

02:34:05.010 --> 02:34:07.010
to go. 

02:34:09.763 --> 02:34:12.163
So you can see, hopefully, 
hopefully

02:34:09.763 --> 02:34:13.896
And building an ads media source
out of a content media source 

02:34:09.763 --> 02:34:14.029
like this is an example of media
source composition. And this is 

02:34:09.763 --> 02:34:13.429
something you can do with 
ExoPlayer, and we'll do more 

02:34:09.763 --> 02:34:13.696
examples of it later when we 
look at play list. We prepare 

02:34:09.763 --> 02:34:13.629
the player with the media source
and should be good to go. 

02:34:09.763 --> 02:34:09.962
So you can see, hopefully, 
hopefully this will work. We can

02:34:09.963 --> 02:34:11.963
switch to the phone.

02:34:13.241 --> 02:34:15.497
We were able to add support for 
playing ads with maybe ten or so

02:34:15.498 --> 02:34:18.202
line of codes. And actually, 
this way of integrating 

02:34:21.253 --> 02:34:23.253
the IMA SDK gives a good user 
experience 

02:34:25.140 --> 02:34:26.207
because ExoPlayer knows about 
which ads are coming up in the 

02:34:26.208 --> 02:34:28.208
future. And that means that it's
going to be 

02:34:31.097 --> 02:34:33.556
able to buffer the content in 
advance. It can buffer the ads 

02:34:33.557 --> 02:34:35.557
in advance to give you seamless 
transition. 

02:34:38.272 --> 02:34:39.902
So as you saw, we had a 
prerollout at the beginning and 

02:34:39.903 --> 02:34:41.903
now the time bar 

02:34:43.308 --> 02:34:45.308
has yellow markers

02:34:48.523 --> 02:34:49.763
. And taking care of all of the 
difficulty and buffering 

02:34:49.764 --> 02:34:54.063
everything behind the scenes for
us. Okay. So that's playback.

02:34:57.561 --> 02:34:59.561
Now over to Marc to talk about 
audio. 

02:35:00.817 --> 02:35:02.855
&gt;&gt; MARC BACHINGER: Let's switch 
to another application and look 

02:35:02.856 --> 02:35:06.731
a little bit into audio 
playback. Audio playback is a 

02:35:06.732 --> 02:35:10.647
little bit more challenging 
because we want to enable the 

02:35:10.648 --> 02:35:13.113
user to put our application into
the background and use another 

02:35:13.114 --> 02:35:15.978
application and audio should 
still keep playing in the 

02:35:15.979 --> 02:35:18.449
background. 
    For this, we are going to 

02:35:18.450 --> 02:35:21.910
use so-called foreground 
service. It's called a 

02:35:21.911 --> 02:35:26.146
foreground service because we 
need to attach notification to 

02:35:26.147 --> 02:35:28.030
the service and this 
notification is in the 

02:35:28.031 --> 02:35:30.744
foreground, it's visible to the 
users, the user is always aware 

02:35:30.745 --> 02:35:32.745
we are doing some work in the 
background.

02:35:36.033 --> 02:35:38.033
Such a foreground service is a 

02:35:39.246 --> 02:35:41.246
mandatory requirement. The 
system will kill our service and

02:35:43.587 --> 02:35:45.663
the application crashes. So 
let's have a look at the 

02:35:45.664 --> 02:35:48.105
starting point of our foreground
service and 

02:35:51.997 --> 02:35:53.833
let's switch back to the laptop,
please. 

02:35:53.834 --> 02:35:56.315
We have the audio player 
service, which extends from the 

02:35:56.316 --> 02:35:58.316
service.

02:36:01.438 --> 02:36:03.438
We have already overwritten the 
create method.

02:36:05.335 --> 02:36:08.183
Where we initialize and prepare 
the player with a single media.

02:36:14.089 --> 02:36:15.203
We will release our resources 
and service is not immediately 

02:36:15.204 --> 02:36:17.204
destroyed 

02:36:19.123 --> 02:36:21.123
and can explicitly terminate our
service when we are ready. 

02:36:22.903 --> 02:36:26.609
When we are finished with audio 
playback. The service also 

02:36:26.610 --> 02:36:31.286
already in the manifest. We have
the simple service element which

02:36:31.287 --> 02:36:34.947
just points to our audio player 
service clause. And finally, we 

02:36:34.948 --> 02:36:36.948
need to have a way to start our 
service.

02:36:39.476 --> 02:36:41.727
We do this in-depth main 
activity and the create method 

02:36:41.728 --> 02:36:46.264
of the main activity. Here, we 
create an intent pointing to our

02:36:46.265 --> 02:36:48.265
audio player service and then, 
we 

02:36:50.372 --> 02:36:52.199
use a static method of the 
ExoPlayer library which starts 

02:36:52.200 --> 02:36:54.680
the service in the foreground 
according to the API level. 

02:36:58.606 --> 02:37:00.469
So now, let's go back into the 
audio player service, again, and

02:37:00.470 --> 02:37:06.183
change the code a little bit 
where we initialize our player. 

02:37:06.184 --> 02:37:08.184
Because for audio, we don't want
to 

02:37:09.244 --> 02:37:11.688
only support playing a single 
media item. We want to support 

02:37:11.689 --> 02:37:14.318
play lists so the user can move 
to the next or to the 

02:37:18.265 --> 02:37:19.694
previous item and can just let 
the play display one item over 

02:37:19.695 --> 02:37:23.166
the other. 
    We are using a connecting 

02:37:23.167 --> 02:37:25.167
media source to implement play 
lists.

02:37:30.506 --> 02:37:32.938
The media source joins together 
a number of media sources and 

02:37:32.939 --> 02:37:37.849
plays them gaplessly. We achieve
a nice user experience for audio

02:37:37.850 --> 02:37:39.850
playback.

02:37:45.862 --> 02:37:48.120
The source allows us to 
dynamically change the play list

02:37:48.121 --> 02:37:50.369
so we can add and remove 
resources while the player is 

02:37:50.559 --> 02:37:54.258
playing. Or we can move the 
currently playing item in our 

02:37:54.259 --> 02:37:56.259
play list while the player is 
playing. 

02:38:00.990 --> 02:38:03.252
So Andrew already started to 
iterate over the samples, you 

02:38:03.253 --> 02:38:07.546
are going to create an extractor
media source. But then, we add 

02:38:07.547 --> 02:38:09.547
the extractor media 

02:38:11.208 --> 02:38:13.208
source to our media source.

02:38:14.485 --> 02:38:16.725
In the end, we compare our 
player with this media source 

02:38:16.726 --> 02:38:18.726
and we are done and we 

02:38:21.208 --> 02:38:23.699
are supporting play lists with 
playing gaplessly and without 

02:38:23.700 --> 02:38:25.531
rebuffering. 
    So, but now, let's have a 

02:38:25.532 --> 02:38:27.532
look at 

02:38:28.804 --> 02:38:30.804
our service, again, and make it 
a proper foreground service.

02:38:33.520 --> 02:38:34.993
Before it is said, we need to 
attach a notification to our 

02:38:34.994 --> 02:38:37.044
foreground service. And for 
this, we are going to use the 

02:38:39.905 --> 02:38:41.905
player notification service.

02:38:43.368 --> 02:38:45.845
The player notification manager 
l not only create the 

02:38:45.846 --> 02:38:49.121
notification, but it will keep 
it nicely in sync with the state

02:38:49.122 --> 02:38:54.243
of the player. Each time, the 
player state change, the manager

02:38:54.244 --> 02:38:56.244
will update an application and 

02:38:57.446 --> 02:38:59.446
post it to our drawer, again.

02:39:03.797 --> 02:39:05.797
And we need to pass a couple

02:39:07.324 --> 02:39:09.324
-- we need to pass the context 
and the 

02:39:10.390 --> 02:39:11.821
channel ID, which identifies our
channel to which we post our 

02:39:11.822 --> 02:39:14.481
notification. 
    The next parameter is a 

02:39:14.482 --> 02:39:17.774
string identifier which gives us
a localized name for our 

02:39:17.775 --> 02:39:19.775
channel. This is the name which 
shows up in the 

02:39:23.697 --> 02:39:25.952
settings dialogue where our user
maybe WACHBT to mute our 

02:39:25.953 --> 02:39:28.188
notification channel. And then, 
the next parameter is a 

02:39:30.053 --> 02:39:34.121
notification ID to identify. 
Identify out notification. And 

02:39:34.122 --> 02:39:36.758
finally, we need to pass a 
so-called media description 

02:39:36.759 --> 02:39:38.759
adapter. 

02:39:39.840 --> 02:39:41.840
The manager will use our adapter
to 

02:39:44.102 --> 02:39:45.516
get information about the 
currently playing item. Each 

02:39:45.517 --> 02:39:47.535
time, the notification is 
rebuilt. The adapter is called 

02:39:47.536 --> 02:39:51.026
to get this information. So we 
see that for each of those 

02:39:55.049 --> 02:39:57.049
callbacks, the player instance 
is

02:39:59.172 --> 02:40:02.665
-- we can use the player to get 
the current window index. The 

02:40:02.666 --> 02:40:04.695
current window index gives us 
the index to pick the sample out

02:40:04.696 --> 02:40:07.365
of the samples area, which is 
kind of the playlist. 

02:40:11.467 --> 02:40:14.319
The title to get a title, then 
we have a similar method, which 

02:40:14.320 --> 02:40:17.395
is a longer text which is 
displayed in the context in 

02:40:17.396 --> 02:40:19.396
notification.

02:40:21.710 --> 02:40:23.563
And finally, we also provide the
map to make our notification a 

02:40:23.564 --> 02:40:26.058
little bit nicer. 
    We just use a convenient 

02:40:26.059 --> 02:40:28.059
method of 

02:40:29.522 --> 02:40:31.522
our samples to get such a big 
net for each of our samples.

02:40:34.461 --> 02:40:37.304
Finally, we also need to provide
a pending intent. This pending 

02:40:37.305 --> 02:40:41.563
intent is fired when the user 
taps on the notification. And we

02:40:41.564 --> 02:40:44.428
want to get the user back to our
application. And our example to 

02:40:44.429 --> 02:40:46.673
the main activity. 
    So we create an intent 

02:40:46.674 --> 02:40:51.606
pointing to our main activity 
and then, we wrap this intent 

02:40:51.607 --> 02:40:54.284
into a pending intent which we 
are using with the static 

02:40:54.285 --> 02:40:56.285
method, get activities on the 
pending intent.

02:40:59.789 --> 02:41:02.042
Here, again, a couple of 
arguments, then a request code, 

02:41:02.043 --> 02:41:04.096
which is zero in our case, we 
are not going to use it in our 

02:41:04.097 --> 02:41:06.097
sample.

02:41:10.456 --> 02:41:12.282
And finally, the flag to tell 
the system to update any pending

02:41:12.283 --> 02:41:15.158
intents already in the queue. 

02:41:18.239 --> 02:41:20.239
So now, we have this player 
notification.

02:41:21.904 --> 02:41:24.122
And we now also need 
notification listener. This 

02:41:24.123 --> 02:41:26.123
listener makes our service aware

02:41:27.835 --> 02:41:29.121
of the life cycle of our 
notification. It has two 

02:41:29.122 --> 02:41:31.122
methods.

02:41:39.134 --> 02:41:41.134
So -- the first method of 
notification 

02:41:43.084 --> 02:41:44.511
started is called -- when the 
notification is initially 

02:41:44.512 --> 02:41:48.791
created. Here, we are past those
two arguments to the start 

02:41:48.792 --> 02:41:50.792
foreground service. And this is 
now the moment where our 

02:41:53.894 --> 02:41:55.525
service is officially foreground
service. 

02:41:55.526 --> 02:41:58.387
We are now safe, the system is 
not going to kill our service 

02:41:58.388 --> 02:42:01.083
anymore. The next method, then, 
is called when 

02:42:04.494 --> 02:42:08.028
the notification is counselled. 
We want to terminate the 

02:42:08.029 --> 02:42:10.029
service. 

02:42:12.301 --> 02:42:14.748
And finally, we also need to -- 
we set the player, set player 

02:42:14.749 --> 02:42:18.855
method on the notification. So 
the notification miniature can 

02:42:18.856 --> 02:42:21.931
sync the player state to the 
notification. So that's about 

02:42:21.932 --> 02:42:23.932
it.

02:42:26.246 --> 02:42:28.286
We also need to clean up in the 
destroy method. We know the set,

02:42:28.287 --> 02:42:33.032
the player instance, again, so 
we don't leak a player reference

02:42:33.033 --> 02:42:35.033
when the service is being 
destroyed.

02:42:36.513 --> 02:42:40.779
    And finally, we also need to
-- we set the player, set player

02:42:36.513 --> 02:42:40.646
method on the notification. So 
the notification miniature can 

02:42:36.513 --> 02:42:40.446
sync the player state to the 
notification. So that's about 

02:42:36.513 --> 02:42:40.779
it. We also need to clean up in 
the destroy method. We know the 

02:42:36.513 --> 02:42:40.379
set, the player instance, again,
so we don't leak a player 

02:42:36.513 --> 02:42:36.718
reference when the service is 
being destroyed. So now, please 

02:42:36.719 --> 02:42:38.719
change back to the phone.

02:42:39.769 --> 02:42:41.769
And if we've done everything 
right, we 

02:42:43.054 --> 02:42:44.294
should now be able to hear the 
play list playing in our 

02:42:44.295 --> 02:42:46.295
service.

02:42:52.907 --> 02:42:56.588
    We see the notification. And
let's have a look at the 

02:42:57.464 --> 02:43:00.139
notification in the drawer. We 
see here the information that 

02:43:00.140 --> 02:43:02.140
comes from our adapter.

02:43:09.314 --> 02:43:11.383
He can skip to the next item. 
And if we tap on the 

02:43:11.384 --> 02:43:16.185
notification, it gets us back to
the application. 

02:43:18.251 --> 02:43:21.923
So fine. As a next step, we have
seen now that this notification 

02:43:21.924 --> 02:43:24.601
contains information about the 
current item and about the 

02:43:24.810 --> 02:43:26.810
state.

02:43:29.693 --> 02:43:33.223
And it lets the user -- what if 
we want to expose this to 

02:43:33.224 --> 02:43:35.224
external application?

02:43:40.544 --> 02:43:42.544
Can we go back to the slides, 
please?

02:43:47.566 --> 02:43:49.612
Google Assistant, for example, 
may want to -- yeah. Here we go.

02:43:52.286 --> 02:43:54.720
Google Assistant, for example, 
wants to allow the user to use 

02:43:54.721 --> 02:43:56.721
voice commands to 

02:43:58.788 --> 02:44:00.788
control media playback.

02:44:02.083 --> 02:44:04.139
Let the user remote control -- 
remote control media application

02:44:04.140 --> 02:44:09.069
and browse in a media 
application. The Android 

02:44:09.070 --> 02:44:11.070
framework has a solution for 
this.

02:44:12.531 --> 02:44:15.005
Because we essentially need to 
provide three things to let 

02:44:15.006 --> 02:44:17.006
external application participate
in media playback. 

02:44:20.738 --> 02:44:22.964
First, we need to expose the 
playback state. The player state

02:44:22.965 --> 02:44:26.855
itself, the current media item 
or the play list with which we 

02:44:26.856 --> 02:44:28.856
prepared our player.

02:44:30.115 --> 02:44:32.115
Second, we need to be able to 
retrieve 

02:44:34.001 --> 02:44:35.683
playback commands from external 
command, external application so

02:44:35.684 --> 02:44:37.684
we can execute on our player 
instance. 

02:44:38.957 --> 02:44:41.859
And third, we need to provide 
ways to browse in our media 

02:44:41.860 --> 02:44:43.860
catalog. The android framework 
provides a 

02:44:46.515 --> 02:44:48.515
solution

02:44:50.644 --> 02:44:52.898
. We are not going into the 
detail of the media browser 

02:44:52.899 --> 02:44:54.899
service because we don't have 
time for this.

02:44:58.589 --> 02:45:01.467
Which allows us to expose the 
playback state and retrieve 

02:45:01.468 --> 02:45:03.468
playback commands. 

02:45:05.592 --> 02:45:07.210
In our code sample, we are going
to media session connector, 

02:45:07.211 --> 02:45:09.211
which is part 

02:45:11.519 --> 02:45:13.519
of the media session extension 
of the exoPlayer library.

02:45:17.054 --> 02:45:18.681
This synchronizes the player 
state and retrieves commands 

02:45:18.682 --> 02:45:21.564
from the media session. So let's
change, again, back to the 

02:45:22.381 --> 02:45:24.381
laptop, please.

02:45:26.050 --> 02:45:28.050
So can see how we can do this in
code. 

02:45:30.539 --> 02:45:32.388
We are, again, in the on create 
method of our player of our 

02:45:32.389 --> 02:45:37.292
audio player service, and we are
now going to create an instance 

02:45:37.293 --> 02:45:39.293
of media session compiled. We 
assign it to a field.

02:45:44.460 --> 02:45:49.102
We just call media session -- 
which is just the string. Then, 

02:45:49.103 --> 02:45:51.103
we immediately set our media 

02:45:53.672 --> 02:45:54.916
session to active by passing 
through to the set active 

02:45:54.917 --> 02:45:57.190
method. 
    Now, as a first step, we 

02:45:57.191 --> 02:46:00.059
want to make the player 
notification miniature aware of 

02:46:00.060 --> 02:46:02.714
our session. And we pass the 
token to the player 

02:46:05.794 --> 02:46:08.281
notification miniature so can 
enhance the media style 

02:46:08.282 --> 02:46:10.282
notification and provide 

02:46:11.338 --> 02:46:13.338
an artwork for our lock screen 
of our device. 

02:46:14.409 --> 02:46:16.409
But now, we are going to create 
such 

02:46:17.900 --> 02:46:20.337
a media session connecter. We 
call the constructer and we pass

02:46:20.338 --> 02:46:22.338
the 

02:46:25.446 --> 02:46:27.446
media session to the connecter.

02:46:29.963 --> 02:46:34.906
We said we want to synchronize 
our play list with the queue. 

02:46:34.907 --> 02:46:35.910
External application, no, what 
items we are having in our play 

02:46:35.911 --> 02:46:37.911
list.

02:46:40.387 --> 02:46:42.667
For this, we are going to use a 
timeline queue navigator.

02:46:46.554 --> 02:46:49.001
It's after the player has been 
prepared. There are as many 

02:46:49.002 --> 02:46:51.688
windows in our timeline as we 
have items in our playlist. 

02:46:53.717 --> 02:46:55.717
So with this, we can use the 
window 

02:46:57.420 --> 02:47:00.477
index, which is the parameter, 
which is passed to our method. 

02:47:00.478 --> 02:47:02.725
We are going to override to 
create, to get the samples, 

02:47:02.726 --> 02:47:07.211
again, out of our samples area. 
And we are then going to create 

02:47:07.212 --> 02:47:09.212
a media description for such a 
sample.

02:47:11.946 --> 02:47:13.946
Let's have a look in this -- 
media 

02:47:15.202 --> 02:47:16.430
description method to see 
there's not much magic behind 

02:47:16.431 --> 02:47:21.911
it. We see, we are just using 
media description builder. And 

02:47:21.912 --> 02:47:23.953
then, populate this data with 
the data from our samples. 

02:47:25.979 --> 02:47:27.979
And then, we build such a media 

02:47:31.094 --> 02:47:33.094
description, which are 
connecter.

02:47:35.357 --> 02:47:37.416
So now, we have already media 
session connecter as a next 

02:47:37.417 --> 02:47:39.417
step, again, we need to pass the
player to the connecter so 

02:47:42.328 --> 02:47:45.019
he can sync the player with the 
media session. We use the set 

02:47:45.020 --> 02:47:48.935
player method, the first 
parameter is the player itself. 

02:47:48.936 --> 02:47:50.554
The second parameter is a 
playback prepare. We are not 

02:47:50.555 --> 02:47:53.409
going to use it because we don't
want to allow external 

02:47:53.410 --> 02:47:56.905
application to initiate playback
in our sample. 

02:47:58.122 --> 02:48:00.122
So that's kind of it.

02:48:01.774 --> 02:48:03.774
Again, we need to clean up. 
First, we just release the media

02:48:08.059 --> 02:48:10.277
session, and the second step, 
again, set the player instance 

02:48:10.278 --> 02:48:14.169
-- this time in the connector to
avoid leaking an instance of the

02:48:14.170 --> 02:48:18.263
player. So now, that's kind of 
it. If everything is correct, we

02:48:18.264 --> 02:48:20.264
should be 

02:48:22.144 --> 02:48:26.344
able to deploy the application,
    So that's kind of it. Again,

02:48:22.144 --> 02:48:26.344
we need to clean up. First, we 
just release the media session, 

02:48:22.144 --> 02:48:26.410
and the second step, again, set 
the player instance -- this time

02:48:22.144 --> 02:48:25.677
in the connector to avoid 
leaking an instance of the 

02:48:22.144 --> 02:48:26.344
player. So now, that's kind of 
it. If everything is correct, we

02:48:22.144 --> 02:48:22.539
should be able to deploy the 
application, again. 

02:48:22.540 --> 02:48:24.540
Please switch to the phone, 
again, 

02:48:26.209 --> 02:48:28.209
and Andrew should now be able to
use 

02:48:30.271 --> 02:48:31.693
Google Assistant to skip to the 
next item. Let's see if this 

02:48:31.694 --> 02:48:33.694
works.

02:48:38.489 --> 02:48:41.749
&gt;&gt; ANDREW LEWIS: Play next 
track. Fine, well done. Thank 

02:48:41.750 --> 02:48:43.750
you.

02:48:45.973 --> 02:48:47.973
And now,

02:48:52.195 --> 02:48:54.195
Thank you, Marc. If we can 
switch back to the slides, 

02:48:54.255 --> 02:48:56.255
please.

02:48:57.856 --> 02:48:59.856
And

02:49:01.188 --> 02:49:03.243
another feature of media apps 
I'm sure you're all familiar 

02:49:03.244 --> 02:49:05.244
with is support for 

02:49:06.314 --> 02:49:08.155
downloading media for offline 
playback. If your users are 

02:49:08.156 --> 02:49:11.003
going to be in a situation where
they have no connectivity or 

02:49:11.004 --> 02:49:13.004
intermittent connectivity. 

02:49:14.493 --> 02:49:16.110
And this has been a much 
requested feature for a while 

02:49:16.111 --> 02:49:18.192
now and we're really pleased 
we've been able to launch this 

02:49:18.611 --> 02:49:21.461
in the 2.8.0 release this week.

02:49:24.537 --> 02:49:26.537
ExoPlayer, built on top of our 
support for caching.

02:49:28.826 --> 02:49:30.879
So I'm going to say a little bit
about how caching fits into the 

02:49:30.880 --> 02:49:32.919
picture of the player set-up and
we'll look at how 

02:49:36.940 --> 02:49:39.299
downloading builds on top of 
that. This diagram is intended 

02:49:39.300 --> 02:49:41.300
to show the 

02:49:42.375 --> 02:49:43.819
data flow when playing one MP3. 
We have a as long which is in 

02:49:43.820 --> 02:49:48.557
the cloud somewhere, a data 
source, which is requesting that

02:49:48.558 --> 02:49:52.730
over http. And a media source 
getting information and 

02:49:52.731 --> 02:49:55.002
providing it to the player. 
    Let's see how caching fits 

02:49:55.003 --> 02:49:57.003
into this.

02:49:58.070 --> 02:50:00.521
Well, it's quite simple, we add 
a cache data source. That sits 

02:50:00.522 --> 02:50:01.742
in between the data source we're
using for loading from the 

02:50:01.743 --> 02:50:04.400
network and the media source 
that's providing data to the 

02:50:04.401 --> 02:50:06.874
player. 
    And it's going to be 

02:50:06.875 --> 02:50:11.545
responsible for dealing with a 
cache instance. In this case, 

02:50:11.546 --> 02:50:13.546
we're using a simple 

02:50:14.614 --> 02:50:16.881
cache provided by ExoPlayer 
called library. The way this 

02:50:16.882 --> 02:50:20.544
works is as follows. When the 
media source request some data, 

02:50:20.545 --> 02:50:21.560
it's going to ask the cache data
source to provide that 

02:50:21.561 --> 02:50:25.256
information. The cache data 
source is going to look in the 

02:50:25.257 --> 02:50:29.736
cache. We can get the data from 
local storage, that goes to the 

02:50:29.737 --> 02:50:31.737
media source and we never had to
go to the network. 

02:50:32.621 --> 02:50:34.453
On the other hand, if the data 
is not present in the cache, 

02:50:34.454 --> 02:50:37.738
we've got a cache miss, then the
cache data source needs to go to

02:50:37.739 --> 02:50:39.739
the data source that's being 
used to load from the network.

02:50:42.697 --> 02:50:44.315
And it's going to request the 
data from there and it's going 

02:50:44.316 --> 02:50:46.316
to store it in the cache when it
arrives.

02:50:48.158 --> 02:50:50.158
And

02:50:52.766 --> 02:50:54.597
You can see also on this 
diagram, we've got a cache 

02:50:54.598 --> 02:50:58.286
evictor. This component is 
responsible for making sure that

02:50:58.287 --> 02:51:00.119
our cache doesn't grow 
indefinitely as we play more and

02:51:00.120 --> 02:51:04.631
more different media items. 
    Okay. Now, let's think about

02:51:04.632 --> 02:51:06.632
downloading.

02:51:07.915 --> 02:51:09.741
Downloading is a separate 
operation, which you might want 

02:51:09.742 --> 02:51:13.404
to perform in a background. 
Might need a service. And this 

02:51:13.405 --> 02:51:15.038
downloading operation, what's 
going on internally is it's 

02:51:15.039 --> 02:51:17.039
going to 

02:51:18.712 --> 02:51:21.560
read through the entire stream 
and it'll be populating the same

02:51:21.561 --> 02:51:25.067
cache instance that you'll be 
using for playback. And as you 

02:51:25.068 --> 02:51:26.982
can probably guess, when you do 
this operation, if you've 

02:51:26.983 --> 02:51:32.116
populated the cache with all of 
the data, when it comes to 

02:51:32.117 --> 02:51:33.558
playback, your player's going to
be able to get everything from 

02:51:33.559 --> 02:51:35.614
the cache data source. There's 
never a need to go to the 

02:51:38.254 --> 02:51:40.253
network in this case. 
    One very important thing to 

02:51:40.254 --> 02:51:45.797
note is that we've got a no up 
cache evictor. It does nothing. 

02:51:45.798 --> 02:51:47.666
It's never going to evict data 
from the cache. The reason we 

02:51:47.667 --> 02:51:50.112
have that is that we don't want 
to have a situation whereby 

02:51:51.551 --> 02:51:53.599
we're downloading the stream and
when we've downloaded up to a 

02:51:53.600 --> 02:51:55.600
certain amount 

02:51:56.697 --> 02:51:57.514
of data, we start getting rid of
data at the beginning of the 

02:51:57.515 --> 02:52:00.189
stream. That would be annoying 
for users. 

02:52:00.396 --> 02:52:05.986
Okay. That's the theory. Let's 
see how this works in practice. 

02:52:05.987 --> 02:52:08.842
If we could switch back to the 
laptop, please. We're going to 

02:52:08.843 --> 02:52:10.923
do this in three steps. The 
first step is we're going to add

02:52:13.795 --> 02:52:16.440
support for caching to our 
player. Then, we're going to 

02:52:16.441 --> 02:52:18.441
implement an audio download 
service, which is going to run 

02:52:20.313 --> 02:52:22.313
the download operation in the 
background. 

02:52:22.961 --> 02:52:25.028
And then, finally, we're going 
to add minimal piece of UI to 

02:52:25.029 --> 02:52:28.499
our activity in order to let us 
trigger the downloads to take 

02:52:28.500 --> 02:52:30.500
place. Okay.

02:52:32.959 --> 02:52:35.813
So we'll go ahead and create a 
cache data source factory. And 

02:52:35.814 --> 02:52:37.847
this is going to sit between our
data source factory for loading 

02:52:37.848 --> 02:52:41.547
from the network and the media 
source, which is actually going 

02:52:41.548 --> 02:52:43.548
to be extracting the media.

02:52:47.698 --> 02:52:49.698
Let's jump into that and see 
what's going on there.

02:52:58.089 --> 02:53:00.089
It's important that we have a 
singleton for the whole process.

02:53:00.949 --> 02:53:04.005
We're checking to see if we've 
got one already. If we don't 

02:53:04.006 --> 02:53:06.006
have one, we're going to create 
a file which is pointing to a 

02:53:08.289 --> 02:53:10.289
directory where we're going to 
store the downloads. 

02:53:12.178 --> 02:53:14.655
Then a simple cache, passing in 
the directory and also a no-up 

02:53:14.656 --> 02:53:17.725
cache evictor which is important
because we don't want to be 

02:53:17.726 --> 02:53:20.612
removing data from the cache. 
    That's how we make a simple 

02:53:20.613 --> 02:53:22.613
cache.

02:53:34.321 --> 02:53:36.961
We need to introduce a local 
variable for that. And then, 

02:53:36.962 --> 02:53:38.836
we're going to use that cache 
data source factory in place of 

02:53:38.837 --> 02:53:42.339
the data source factory we were 
using before for loading from 

02:53:42.340 --> 02:53:44.340
the network.

02:54:00.921 --> 02:54:02.350
We provide a super class for 
download service for your 

02:54:02.351 --> 02:54:05.062
download services that you'll be
putting in your application, 

02:54:09.078 --> 02:54:11.078
we'll be inheriting

02:54:13.851 --> 02:54:15.851
-- the most important one, 
important 

02:54:19.744 --> 02:54:21.744
not to forget is add a 
declaration.

02:54:25.447 --> 02:54:27.447
    So let's start doing that.

02:54:30.543 --> 02:54:31.961
We'll create a constructer with 
no arguments but then we're 

02:54:31.962 --> 02:54:34.197
going to call the super 
constructer and pass in 

02:54:37.053 --> 02:54:39.906
information about the download 
notifications. Notification ID 

02:54:39.907 --> 02:54:41.907
must be different from the one 
we used for audio playback.

02:54:50.563 --> 02:54:52.185
We'll use the notification, pass
in a channel ID for a download 

02:54:52.186 --> 02:54:54.186
notification channel.

02:54:57.885 --> 02:54:59.316
Finally, we also need a string 
resource that describes the 

02:54:59.317 --> 02:55:03.631
notification channel. And that 
works the same as the one we did

02:55:03.632 --> 02:55:06.462
for audio playback that had the 
notification channel, as well.

02:55:17.161 --> 02:55:19.694
Now we need to override some 
methods. 

02:55:17.161 --> 02:55:17.176
Let's have a look at those. The 
first one is we need to provide 

02:55:17.177 --> 02:55:19.376
a download manager, and we have 
a utility method for this, which

02:55:19.377 --> 02:55:21.377
we'll have a look at in a 
second.

02:55:25.652 --> 02:55:26.464
A single instance for the 
download manager for the whole 

02:55:26.465 --> 02:55:28.465
process.

02:55:31.989 --> 02:55:33.989
This is also creating a file, 
down loads in progress.

02:55:36.293 --> 02:55:38.324
And one substantiating a 
download, pass income the same 

02:55:38.325 --> 02:55:40.604
cache instance as the one we're 
using for the cache during 

02:55:40.605 --> 02:55:42.605
playback. You can see there's a 
data source 

02:55:46.932 --> 02:55:49.588
factory for loading data. We're 
downloading progressive media.

02:55:59.364 --> 02:56:01.194
We're going to leave this 
returning null, but you would 

02:56:01.195 --> 02:56:03.195
want to provide some 

02:56:05.007 --> 02:56:09.006
kind of job scheduler. 
    You can have a look at our 

02:56:09.007 --> 02:56:11.007
full demo app for an example of 
how to do that.

02:56:15.668 --> 02:56:17.668
Finally, we're going to provide 
a 

02:56:18.669 --> 02:56:19.668
progress notification and we've 
got a handy utility method to 

02:56:19.669 --> 02:56:23.711
build on here. This is going to 
take a context, icon which is 

02:56:23.712 --> 02:56:25.710
going to be shown in the 
notification associated with the

02:56:25.711 --> 02:56:27.000
download in progress. 
    And we'll just use your 

02:56:27.001 --> 02:56:29.001
playback 

02:56:30.009 --> 02:56:32.009
icon for

02:56:33.744 --> 02:56:35.369
that -- then we provide the 
download channel ID, which is 

02:56:35.370 --> 02:56:37.370
the same one we used earlier.

02:56:39.049 --> 02:56:41.292
This is a string not a resource.
One parameter for the head.

02:56:47.170 --> 02:56:49.170
We get our download channel ID.

02:56:54.017 --> 02:56:56.871
Mixed up with parameters here. 
If you remove download channel 

02:56:56.872 --> 02:56:58.872
name.

02:57:00.775 --> 02:57:02.775
Easily done.

02:57:03.858 --> 02:57:06.300
Lots of parameters, then the 
message is no, content intent is

02:57:06.301 --> 02:57:08.301
null, the message 

02:57:09.734 --> 02:57:11.734
is null and

02:57:14.076 --> 02:57:17.133
pass status. What the status is.
That's a lot of parameters. 

02:57:18.965 --> 02:57:21.233
So that looks pretty good. And 
that's implementing our download

02:57:21.428 --> 02:57:25.148
service. The final step, I 
promise, is just providing a way

02:57:25.149 --> 02:57:28.860
to trigger these down loads from
our activity. So as you can see,

02:57:28.861 --> 02:57:31.513
we've got an empty list view 
here. We're going to replace 

02:57:31.514 --> 02:57:34.981
that with a list of samples. 
We've got three items and a 

02:57:34.982 --> 02:57:39.254
playlist. When the user taps one
of those, they're going to 

02:57:39.255 --> 02:57:41.912
trigger the download to start. 
And to do that, we'll be 

02:57:41.913 --> 02:57:44.158
creating a progressive download 
action. 

02:57:45.815 --> 02:57:47.854
If you were downloading a 
different kind of content, like 

02:57:47.855 --> 02:57:51.121
a dash stream, you would not use
progressive action, you would 

02:57:51.122 --> 02:57:53.154
use the corresponding for the 
types of stream you're 

02:57:53.155 --> 02:57:55.155
downloading.

02:57:57.197 --> 02:57:59.197
That's going to take a UI.

02:58:02.592 --> 02:58:04.246
If you don't want to associate 
any custom data, we'll pass null

02:58:04.247 --> 02:58:07.938
for the data and the custom 
cache key. 

02:58:10.004 --> 02:58:12.235
Once we've created our 
progressive download action, all

02:58:12.236 --> 02:58:16.774
that remains is to call a method
on the download service, there's

02:58:16.775 --> 02:58:20.453
a static method to start the 
service with that action. And 

02:58:20.454 --> 02:58:22.454
that takes a context, which is 
main 

02:58:26.406 --> 02:58:28.637
activity -- not the item click, 
this and this, okay. It takes 

02:58:28.638 --> 02:58:30.499
the class of the download 
service, which is audio download

02:58:30.500 --> 02:58:32.500
service.class.

02:58:34.788 --> 02:58:35.999
It takes the download A, which 
we've created, progressive 

02:58:36.000 --> 02:58:38.000
download action.

02:58:39.723 --> 02:58:41.144
And finally, we can pass 
foreground because the activity 

02:58:41.145 --> 02:58:44.210
is in the foreground. 
    It's quite a few bits to 

02:58:44.211 --> 02:58:47.074
remember, but hopefully, we've 
got everything, let's give that 

02:58:47.075 --> 02:58:49.075
a try and see if it works.

02:58:51.579 --> 02:58:55.293
We had plans to show you putting
the device into flight mode. 

02:58:55.294 --> 02:58:58.385
Unfortunately, we're having to 
use cast to play the stream. We 

02:58:58.386 --> 02:59:00.013
won't actually be able to show 
you the -- putting the device in

02:59:00.014 --> 02:59:02.014
flight mode. You'll need to use 
your imagination.

02:59:04.696 --> 02:59:06.338
As you can see, when we tap the 
items, you get a play icon, 

02:59:06.339 --> 02:59:08.339
which is the download 
notification. 

02:59:08.790 --> 02:59:13.209
And that's going to progress as 
the download progresses. And 

02:59:13.210 --> 02:59:15.210
that's populating the cache in 
the background.

02:59:19.460 --> 02:59:21.460
So that was pretty much it for 
downloading.

02:59:22.671 --> 02:59:24.671
I'm going

02:59:25.982 --> 02:59:27.444
to going to hand it back to 
Marc. 

02:59:27.445 --> 02:59:29.277
&gt;&gt; MARC BACHINGER: There was one
important integration we did not

02:59:29.278 --> 02:59:34.875
cover in code is the integration
with Google Cast. Google Cast is

02:59:34.876 --> 02:59:36.876
almost expected by all 

02:59:40.939 --> 02:59:42.939
users, users to be supported by 
media

02:59:44.091 --> 02:59:46.091
apps.

02:59:47.345 --> 02:59:50.193
Calls for application pretty 
easier. Let's switch to the 

02:59:50.194 --> 02:59:54.870
slides, again, please. 
    The cast extension takes 

02:59:54.871 --> 02:59:56.871
advantage 

02:59:59.565 --> 03:00:01.208
of the player interface of the 
ExoPlayer library. All of the UI

03:00:01.209 --> 03:00:04.201
components and the components

03:00:07.396 --> 03:00:09.396
like -- take advantage of this 
player 

03:00:10.454 --> 03:00:13.109
interface and only rely on this 
player interface. The most 

03:00:13.110 --> 03:00:15.110
prominent implementation of 

03:00:16.394 --> 03:00:18.394
this player interface is a 
simple ExoPlayer.

03:00:21.313 --> 03:00:22.288
Almost all applications use the 
simple ExoPlayer for local 

03:00:22.289 --> 03:00:24.289
playback.

03:00:27.281 --> 03:00:28.299
The Cast extension adds another 
implementation, which is the 

03:00:28.300 --> 03:00:30.300
cost player.

03:00:33.022 --> 03:00:35.022
The cost player wraps the cost 
SDK, so 

03:00:36.461 --> 03:00:38.461
it gets pretty easy to swap 
local 

03:00:40.547 --> 03:00:42.547
playback done with a simple 
ExoPlayer.

03:00:44.568 --> 03:00:46.568
So because all of those

03:00:47.729 --> 03:00:49.756
components of the ExoPlayer 
library, only rely on the player

03:00:49.757 --> 03:00:54.237
interface, you can exchange this
local playback with remote 

03:00:54.238 --> 03:00:56.238
playback quite easily. 

03:00:59.957 --> 03:01:01.584
You can also have a look at the 
cast application can that we 

03:01:01.585 --> 03:01:03.585
added to the 

03:01:05.287 --> 03:01:07.758
GitHub repository and a blog 
post on medium which shows you 

03:01:07.759 --> 03:01:11.880
how to set up the Cast parts for
your application. 

03:01:13.719 --> 03:01:15.719
&gt;&gt; ANDREW LEWIS: Thank you, 
Marc.

03:01:17.605 --> 03:01:20.086
And all that remains, really, is
to provide you with a link to 

03:01:20.087 --> 03:01:22.964
the branch that has the code. Or
at least it'll be similar to the

03:01:25.010 --> 03:01:27.010
code we've written today. And 
please go and check that out and

03:01:27.452 --> 03:01:31.325
try it out. You'll actually be 
able to try the download 

03:01:31.326 --> 03:01:34.172
functionality by putting your 
device into flight mode and 

03:01:34.173 --> 03:01:39.471
making sure it puts it back. 
Please check that out. We have 

03:01:39.472 --> 03:01:42.552
an office hour session today at 
3:30. Please come along if 

03:01:42.553 --> 03:01:44.553
you've got questions and lots of
members of the 

03:01:47.064 --> 03:01:49.064
team will be there and we'd be 
delighted 

03:01:50.145 --> 03:01:51.361
to find out what you're doing 
with ExoPlayer and how we can 

03:01:51.362 --> 03:01:53.638
help you with that. This is a 
link to our project if you 

03:01:54.671 --> 03:01:56.126
haven't seen that before. 
    We have a developer guide, 

03:01:56.127 --> 03:01:58.127
which takes you through the 
process of getting 

03:02:03.264 --> 03:02:05.264
started with ExoPlayer at a 
slower pace.

03:02:06.340 --> 03:02:09.065
And finally, as Marc alluded to,
we have a blog on medium where 

03:02:09.066 --> 03:02:13.957
members of the ExoPlayer team 
are writing blog posts about new

03:02:13.958 --> 03:02:15.823
functionality that we're working
on. Check that out and 

03:02:15.824 --> 03:02:17.824
subscribe. And with that, thank 
you very much.

03:02:20.737 --> 03:02:21.358
Yep. 

03:02:29.974 --> 03:02:32.833
    What's new with sign up and 
sign in 

03:02:36.893 --> 03:02:38.893
on the web

03:23:34.288 --> 03:23:35.102
&gt;&gt; EIJI KITAMURA: Hello, 
everyone. I'm working on the web

03:23:35.103 --> 03:23:37.103
at Google.

03:23:40.177 --> 03:23:42.177
So today's session is about 
what's new

03:23:44.523 --> 03:23:46.155
with sign up and sign in on the 
web. Are you enjoying Google so 

03:23:46.156 --> 03:23:48.156
far?

03:23:50.255 --> 03:23:52.255
We only have a few hours left 
for rest 

03:23:53.695 --> 03:23:56.554
of Google I/O, but I'm pretty 
sure you'll be excited to learn 

03:23:56.555 --> 03:23:59.845
new things from this session. 
    Okay.

03:24:03.106 --> 03:24:05.106
So I need your help with this 
clicker.

03:24:07.616 --> 03:24:09.616
So let me start with this 
question.

03:24:12.094 --> 03:24:14.130
For you, what makes good sign up
and sign in? We consider there 

03:24:14.131 --> 03:24:16.584
are three principles. First, 
good security.

03:24:21.464 --> 03:24:23.464
Sign-in is the most important 
gate 

03:24:24.752 --> 03:24:26.752
keeper for a website to protect 
user's 

03:24:28.070 --> 03:24:30.101
information from abusive 
behaviors and attackers. 

03:24:34.815 --> 03:24:37.463
Building a website with a 
vulnerable sign-in mechanism 

03:24:37.464 --> 03:24:40.117
means giving attackers a chance 
to abuse the website and in the 

03:24:43.210 --> 03:24:45.210
worst case, it critically 
damages your business.

03:24:48.104 --> 03:24:48.919
So building your website with 
first class security is quite 

03:24:48.920 --> 03:24:51.991
important. 
    But that doesn't mean that 

03:24:51.992 --> 03:24:54.631
you can sacrifice user 
experience.

03:24:58.506 --> 03:25:00.506
In many cases, adding better 
security 

03:25:01.791 --> 03:25:04.480
creates more obstacles and 
brings more friction for your 

03:25:04.481 --> 03:25:06.481
users to enter your website.

03:25:11.089 --> 03:25:12.513
Thinking about users, user first
web experience, you should make 

03:25:12.514 --> 03:25:14.514
sure logging 

03:25:15.597 --> 03:25:17.637
into your website is as seamless
as possible while having good 

03:25:17.638 --> 03:25:19.638
security. 

03:25:22.968 --> 03:25:24.593
And finally, good sign-up and 
sign-in are often overlooked as 

03:25:24.594 --> 03:25:28.498
a critical part of user flow. 
Developers tend to be more 

03:25:28.499 --> 03:25:30.499
excited 

03:25:32.004 --> 03:25:34.464
about new ideas and innovative 
features and paying less 

03:25:34.465 --> 03:25:36.465
attention to make the 

03:25:37.543 --> 03:25:39.828
sign-up and sign-in secure and 
low friction. 

03:25:42.066 --> 03:25:44.744
It's important that building 
them is easy enough and low 

03:25:44.745 --> 03:25:46.745
cost.

03:25:47.826 --> 03:25:49.879
With that in mind, today, we'll 
cover three topics.

03:25:53.151 --> 03:25:55.151
One sign-up and auto sign-in.

03:26:03.401 --> 03:26:05.401
ReCAPTCHA.

03:26:06.485 --> 03:26:08.754
Using user name and password is 
challenging. I'm not saying it's

03:26:08.755 --> 03:26:11.610
technically impossible, but the 
user's safety 

03:26:14.729 --> 03:26:16.729
heavily relies on how they 
create their own passwords. 

03:26:19.620 --> 03:26:21.620
Their passwords could be weak, 

03:26:23.875 --> 03:26:25.875
forgotten, reused or stolen

03:26:30.046 --> 03:26:31.878
. Balazs is going to explain 
later in this session. This is 

03:26:31.879 --> 03:26:33.879
why we've been recommending 

03:26:34.884 --> 03:26:36.884
identity

03:26:40.890 --> 03:26:43.128
federation for years. It's a way
of signing up or signing in 

03:26:47.234 --> 03:26:48.683
by using an account on the 
website. Which is called 

03:26:48.684 --> 03:26:50.944
identity provider. Identity 
federation is usually built 

03:26:57.476 --> 03:26:59.476
upon standards called, such as, 
open ended connect.

03:27:02.816 --> 03:27:04.816
Users do not need to create 
additional passwords. 

03:27:06.226 --> 03:27:08.226
You can delicate security 
challenges to identity provider.

03:27:10.845 --> 03:27:13.710
And you can receive profile 
information from that identity 

03:27:13.711 --> 03:27:15.711
provider.

03:27:17.183 --> 03:27:19.183
And as many of you know, Google 
is 

03:27:20.303 --> 03:27:22.303
identity providers, you can 
already take 

03:27:24.744 --> 03:27:27.079
advantage of Google sign-in on 
your website.

03:27:33.243 --> 03:27:35.243
As Google I/O last year, I 
talked about 

03:27:37.607 --> 03:27:39.851
a JavaScript library that makes 
sign-up easier. And last year, 

03:27:39.852 --> 03:27:41.852
we officially announced 

03:27:44.746 --> 03:27:47.664
it as sign-up and auto sign-in. 
It's a new user experience for 

03:27:47.665 --> 03:27:50.129
identity federation with Google 
that allows users 

03:27:53.949 --> 03:27:57.499
to sign up with one -- we have a
number of partners already on 

03:27:57.500 --> 03:27:59.500
board or implementing with this 
library.

03:28:02.214 --> 03:28:04.214
And they're producing amazing 
results.

03:28:06.145 --> 03:28:08.145
Let me briefly talk about a few 
of them.

03:28:15.322 --> 03:28:17.322
So 80% increase in sign-ups 
after implementing sign-up.

03:28:20.008 --> 03:28:22.522
Also, over 40% of these new 
users return to their website 

03:28:22.523 --> 03:28:24.523
more than five times after 
signing up.

03:28:35.796 --> 03:28:37.796
One of the world's top search 
engines, 

03:28:38.921 --> 03:28:40.921
it gained 50% more new sign-ups 
with TIS 

03:28:43.250 --> 03:28:45.250
as many users after implement 
inging this library.

03:28:50.271 --> 03:28:53.052
    Cifroclub for chorus, lyrics
and 

03:28:56.712 --> 03:28:58.712
songs got 40% more after 
implementing 

03:29:00.189 --> 03:29:04.271
the one-tap sign-up. 4,300% more
users. That's an incredible 

03:29:04.272 --> 03:29:06.272
number.

03:29:08.697 --> 03:29:11.462
And user engagement, such as 
favoriting artists, commenting, 

03:29:11.463 --> 03:29:15.167
liking has also increased almost
50% per user. 

03:29:17.430 --> 03:29:19.430
This is impressive.

03:29:21.145 --> 03:29:23.145
So here's how it works.

03:29:25.430 --> 03:29:28.102
The user opens the sign-up page,
selects one of the Google 

03:29:28.103 --> 03:29:30.139
accounts and they're signed up. 
It's just that.

03:29:34.487 --> 03:29:36.346
It takes less than ten seconds. 
It might be too quick to catch 

03:29:36.347 --> 03:29:38.347
up what's going on. 

03:29:41.906 --> 03:29:46.016
It's actually that easy. One-tap
sign-up is revolutionary because

03:29:46.017 --> 03:29:48.263
on top of the benefits that I 
have briefly mentioned earlier 

03:29:48.264 --> 03:29:51.102
in the session for identity 
federation in 

03:29:55.154 --> 03:29:57.154
general is complete

03:29:58.890 --> 03:30:01.380
ly -- and requires only one-tap 
for users to sign up. No email 

03:30:01.381 --> 03:30:04.040
verification is required. 
    Think about it, you have to 

03:30:04.041 --> 03:30:06.041
open up 

03:30:07.498 --> 03:30:08.763
email client, find the right 
email and clicking a link in 

03:30:08.764 --> 03:30:10.764
that email.

03:30:13.717 --> 03:30:15.757
Kind of a hassle, right? You can
completely eliminate that step 

03:30:16.578 --> 03:30:18.578
from the user. It's a big deal.

03:30:23.138 --> 03:30:26.053
And third, it works across all 
modem browsers. 

03:30:27.702 --> 03:30:30.549
Using this API is quite simple. 
Start with loading this 

03:30:30.550 --> 03:30:32.550
JavaScript library.

03:30:37.102 --> 03:30:39.102
Once it's loaded,

03:30:44.351 --> 03:30:46.351
Google I/O and it'll show an 
account user.

03:30:48.413 --> 03:30:50.413
You need to create a client ID 
in 

03:30:51.422 --> 03:30:55.628
advance. This is a powerful API,
we are reviewing sites that are 

03:30:55.629 --> 03:30:57.629
making use of this library.

03:31:03.571 --> 03:31:05.571
The process will resolve and you
will 

03:31:09.102 --> 03:31:11.142
receive a result that contains 
-- to verify the user's identity

03:31:11.143 --> 03:31:15.829
on your server. If you already 
have a Google sign-in, back in, 

03:31:15.830 --> 03:31:17.830
you can reuse it. 

03:31:19.484 --> 03:31:20.909
Once the ID token's verified, 
extract the user's profile you 

03:31:20.910 --> 03:31:23.759
mentioned and establish a new 
session. And the user is signed 

03:31:23.760 --> 03:31:25.760
up.

03:31:30.544 --> 03:31:32.200
When the user session expires or
the user lands on your website 

03:31:32.201 --> 03:31:34.201
from a 

03:31:35.488 --> 03:31:37.309
different device, you can let 
them -- you can let the user 

03:31:37.310 --> 03:31:39.310
sign back in automatically.

03:31:46.807 --> 03:31:49.052
To perform the sign-in, call 
Google -- to obtain the ID 

03:31:49.053 --> 03:31:51.053
token.

03:31:52.946 --> 03:31:54.946
Resume that session. 

03:31:58.666 --> 03:32:03.782
By the way, you might have heard
about the API. It's an open web 

03:32:03.783 --> 03:32:05.783
API to handle credentials using 
JavaScript.

03:32:09.541 --> 03:32:11.382
The one-tap library actually 
uses this credential management 

03:32:11.383 --> 03:32:13.832
API behind the scenes.

03:32:17.244 --> 03:32:19.244
And there's a password for the 
website. 

03:32:20.993 --> 03:32:22.993
If you want to retrieve using 

03:32:24.924 --> 03:32:26.924
password, add Google password. 
It will give you a user name and

03:32:29.005 --> 03:32:31.456
password instead of an ID token.
So you can use that information 

03:32:31.457 --> 03:32:33.457
to authenticate the user.

03:32:38.206 --> 03:32:39.857
When a user clicks the button, 
the user probably wants to keep 

03:32:39.858 --> 03:32:41.858
signed out.

03:32:45.355 --> 03:32:47.355
In that case,

03:32:48.723 --> 03:32:50.723
sign-in will start returning ID 
token 

03:32:52.955 --> 03:32:54.955
until the user explicit

03:32:57.359 --> 03:33:01.425
ly signs back in. Let me recap. 
One-tap sign-up is secure 

03:33:01.426 --> 03:33:03.495
because it's Google's identity 
federation.

03:33:09.690 --> 03:33:11.690
Provides a great user experience
to 

03:33:12.973 --> 03:33:15.434
sign up with one-tap and auto 
sign-in. It's easy to implement 

03:33:15.435 --> 03:33:17.435
with simple APIs.

03:33:26.326 --> 03:33:28.159
To learn more, visit developers 
at Google.com and find more 

03:33:28.160 --> 03:33:30.594
documentation. 
    Okay, so far, I've been 

03:33:30.595 --> 03:33:32.595
talking about identity 
federation.

03:33:35.534 --> 03:33:37.534
But I guess that many of you 
might be 

03:33:38.601 --> 03:33:40.601
interested in some solutions 
about when 

03:33:41.692 --> 03:33:46.425
you are using passwords, user 
name and password. Earlier on in

03:33:46.426 --> 03:33:50.308
this session, I talked about 
challenges with passwords. What 

03:33:50.309 --> 03:33:52.309
can you do if an attacker 
already 

03:33:54.413 --> 03:33:57.274
knows your user's password and 
tries to hijack account? 

03:34:00.331 --> 03:34:04.832
And in many cases, account 
hijacking is done by bots. This 

03:34:04.833 --> 03:34:06.833
means, if you could filter out 

03:34:07.905 --> 03:34:09.905
bots, the number of account 
hijacks should decrease. 

03:34:14.270 --> 03:34:16.270
And that's what we -- six years 
ago, 

03:34:17.919 --> 03:34:19.919
it asked users

03:34:22.674 --> 03:34:24.674
to redistorted text like this.

03:34:28.126 --> 03:34:32.912
We then developed reCAPTCHA v2. 
It is smart enough to determine 

03:34:32.913 --> 03:34:37.002
if an interaction is abusive 
just with that simple gesture. 

03:34:40.479 --> 03:34:42.479
And if recapture is still 
uncertain, 

03:34:44.194 --> 03:34:46.194
it asks an additional challenge,
like 

03:34:47.200 --> 03:34:50.744
select only with a street sign. 
This is an example question.

03:34:54.236 --> 03:34:56.673
Many bots cannot answer easily. 
And we are protecting over 2 

03:34:56.674 --> 03:34:59.538
million websites every week from
spam and abuse.

03:35:02.638 --> 03:35:05.126
    But bots evolve, also.

03:35:09.761 --> 03:35:11.761
The attacks against

03:35:13.443 --> 03:35:15.443
reCAPT

03:35:21.432 --> 03:35:25.345
CHA have evolved to martyr and 
Aibots. Trying to break these 

03:35:25.346 --> 03:35:27.346
challenges and 

03:35:28.606 --> 03:35:33.113
attack websites. We want to stop
bots whether or not they can 

03:35:33.114 --> 03:35:35.370
find the street signs in a set 
of images. 

03:35:39.680 --> 03:35:41.680
Today, we are announcing public 
beta 

03:35:42.690 --> 03:35:45.853
of reCAPTCHA v3, this comes with
three new things at a high 

03:35:45.854 --> 03:35:47.854
level.

03:35:50.174 --> 03:35:52.174
First, it requires no 
interactive challenges.

03:35:54.797 --> 03:35:57.502
Two, it scores traffic and 
third, it breaks down your 

03:35:58.921 --> 03:36:03.872
traffic by action. Let me walk 
you through each one. 

03:36:07.605 --> 03:36:09.605
In v3, whether an interaction 
with 

03:36:10.873 --> 03:36:12.873
the website is abuseive.

03:36:13.951 --> 03:36:15.951
This means, you can keep your 
website 

03:36:18.854 --> 03:36:19.867
safe without interacting any 
users.

03:36:19.868 --> 03:36:24.382
. And instead of simple yes or 
no answer, it will give you a 

03:36:24.383 --> 03:36:30.543
score, which ranges from zero to
1.0. The score is color coated 

03:36:30.544 --> 03:36:32.544
by the 

03:36:34.445 --> 03:36:37.331
capture risk analysis engine. 
And interactions with the 

03:36:37.332 --> 03:36:39.332
website.

03:36:41.407 --> 03:36:43.407
Based on the score, you can 
define your 

03:36:45.125 --> 03:36:47.125
own threshold to determine 
whether you 

03:36:48.620 --> 03:36:50.620
should do farther verification 
on the tests. 

03:36:53.914 --> 03:36:56.988
Let's say, you get a request 
with low score of 0.2. In that 

03:36:56.989 --> 03:36:59.253
case, for example, you can 
request an additional 

03:36:59.254 --> 03:37:01.254
authentication 

03:37:03.138 --> 03:37:05.138
factor such as email 
verification.

03:37:08.253 --> 03:37:11.940
Or, send an email to an admin to
ask for moderation. Or search 

03:37:11.941 --> 03:37:15.395
requests from bots as a 
protection from scraping. 

03:37:18.690 --> 03:37:23.853
To use recapture, first, load 
the JavaScript library. When the

03:37:23.854 --> 03:37:26.295
user submits a form, recapture 
tokens and finally, submit the 

03:37:26.296 --> 03:37:30.628
form along with the obtain 
token. 

03:37:33.892 --> 03:37:36.347
One nice thing about v3 is that 
it enables you to put it into 

03:37:36.348 --> 03:37:40.655
almost all parts of your 
website. Not only the sign-up 

03:37:40.656 --> 03:37:42.913
page, but also, many other 
places.

03:37:46.785 --> 03:37:49.240
For example, from home page to 
reading path, log-ins, adding 

03:37:49.241 --> 03:37:51.241
comments and searches.

03:37:54.154 --> 03:37:55.997
Wherever your website has 
potentially risky actions, you 

03:37:55.998 --> 03:37:58.062
can protect with recapture. 

03:38:01.357 --> 03:38:03.357
You can define a tag for each 
action.

03:38:06.026 --> 03:38:08.026
Actions will also become a 
signal into 

03:38:09.670 --> 03:38:11.670
the adaptive risk analysis 
engine.

03:38:14.794 --> 03:38:18.727
As a result, you can treat 
scores differently depending on 

03:38:14.794 --> 03:38:16.794
the actions. Also, you can see 
the traffic breakdown 

03:38:20.122 --> 03:38:22.122
and score distribution in 
action.

03:38:25.215 --> 03:38:27.215
So that's recapture v3. Let me 
recap.

03:38:36.267 --> 03:38:38.544
ReCAPTCHA, doesn't require to 
eliminate challenges. So there's

03:38:38.545 --> 03:38:40.545
zero friction.

03:38:42.479 --> 03:38:44.307
It gives you is the flexibility 
as to how you want to treat 

03:38:44.308 --> 03:38:46.308
suspicious traffic.

03:38:52.892 --> 03:38:54.892
To learn more, please visit g.

03:38:58.334 --> 03:39:00.334
co/

03:39:02.507 --> 03:39:05.384
repcaptcha/v3io. I've been 
talking about figures from 

03:39:05.586 --> 03:39:09.698
Google. But I'd like to make a 
transition to talk about open 

03:39:09.699 --> 03:39:11.963
web API. 
    The credential management 

03:39:11.964 --> 03:39:15.065
API. I briefly talked about it 
earlier in the session.

03:39:23.820 --> 03:39:26.472
As each focuses on identity 
federation with Google, if you 

03:39:26.473 --> 03:39:29.343
choose to use other identity 
options such as user name and 

03:39:31.370 --> 03:39:33.370
password, you should use 
credential management API. 

03:39:35.696 --> 03:39:40.002
We have already covered this 
topic at Google I/O last year. 

03:39:40.003 --> 03:39:42.003
So let me quickly recap.

03:39:43.504 --> 03:39:45.334
It's an open web API that allows
you to handle credentials using 

03:39:45.335 --> 03:39:47.335
JavaScript.

03:39:49.436 --> 03:39:51.744
With this API, you can enable 
things like auto sign in or sign

03:39:51.745 --> 03:39:54.835
in with browsers, account 
chooser. 

03:39:56.879 --> 03:39:59.873
It can handle two different 
types of credentials

03:40:03.825 --> 03:40:07.311
. Password credential and 
federative credential. And now, 

03:40:07.312 --> 03:40:11.780
we have a new kind of credential
being added to the API, which is

03:40:11.781 --> 03:40:13.781
called public key credential.

03:40:19.547 --> 03:40:21.184
With that, let me invite Balazs 
to talk about identification. 

03:40:21.185 --> 03:40:23.185
   &gt;&gt; BALAZS ENGEDY: Hello, 
everyone.

03:40:25.929 --> 03:40:27.929
I'm a software engineer on the 
Chrome Web Identity team.

03:40:30.434 --> 03:40:31.460
And already mentioned that 
passwords create a number of 

03:40:31.461 --> 03:40:35.681
issues. I would like to talk a 
little bit more about two of 

03:40:35.682 --> 03:40:37.732
them in particular. 

03:40:40.950 --> 03:40:41.777
The first one is password reuse.
When your users are using the 

03:40:41.778 --> 03:40:43.881
same password on multiple 
different websites 

03:40:48.571 --> 03:40:50.605
and the second one is phishing. 
Tricking users into entering 

03:40:50.606 --> 03:40:54.298
their credentials into fake 
websites. Historically, these 

03:40:54.299 --> 03:40:59.399
issues have been really hard for
developers to address because 

03:40:59.400 --> 03:41:01.400
they both have to do with your 
users being only human.

03:41:06.596 --> 03:41:09.043
Suppose one of your users, call 
her Jane Doe has accounts on 50 

03:41:09.044 --> 03:41:13.549
different websites. 
    What do you think? On how 

03:41:13.550 --> 03:41:15.794
many other websites is Jane 
using the same password she's 

03:41:15.795 --> 03:41:17.795
using on your site?

03:41:19.463 --> 03:41:22.116
To answer that question, we've 
calculated some statistics 

03:41:22.117 --> 03:41:26.462
client side among Chrome manager
users. And if Jane is anything 

03:41:26.463 --> 03:41:29.942
like them, she will be reusing 
that password on ten different 

03:41:29.943 --> 03:41:32.820
websites. That's 20% of all her 
accounts. 

03:41:34.444 --> 03:41:37.299
What does that mean? It means 
that if Jane's password is 

03:41:39.742 --> 03:41:41.592
compromised on any one of those 
ten websites, it's compromised 

03:41:41.593 --> 03:41:43.593
on all of them, including yours.

03:41:49.848 --> 03:41:51.279
So how often does this happen? 
According to another study, 

03:41:51.280 --> 03:41:53.280
during a 

03:41:54.404 --> 03:41:56.404
period of just one year, data 
breaches exposed a total of 1.

03:41:59.939 --> 03:42:02.427
9 billion user names and 
passwords. This means that even 

03:42:02.428 --> 03:42:05.942
if you have implemented all of 
the password management best 

03:42:05.943 --> 03:42:08.195
practices. For instance, you 
serve your log-in 

03:42:12.738 --> 03:42:15.173
page and perceivably entire 
website, you never store or log 

03:42:15.174 --> 03:42:17.174
plain text passwords.

03:42:20.359 --> 03:42:23.222
You always hash passwords and 
maybe even more. You're still 

03:42:23.223 --> 03:42:25.687
not done. 
    Suppose, you're using 

03:42:25.688 --> 03:42:28.953
two-factor authentication. To 
log in, Jane has to enter her 

03:42:30.788 --> 03:42:32.788
password plus an OTP.

03:42:33.911 --> 03:42:36.596
A one-time pass word, for 
instance, a six-digityou never 

03:42:36.597 --> 03:42:39.997
store or log plain text 
passwords. You always hash 

03:42:36.597 --> 03:42:40.197
passwords and maybe even more. 
You're still not done. 

03:42:36.597 --> 03:42:40.863
Suppose, you're using two-factor
authentication. To log in, Jane 

03:42:36.597 --> 03:42:40.663
has to enter her password plus 
an OTP. A one-time pass word, 

03:42:36.597 --> 03:42:38.597
for instance, a six-digit number
she receives to her phone.

03:42:44.354 --> 03:42:47.180
Surely Jane is safe now, right? 
Well, unfortunately, OTPs are 

03:42:47.181 --> 03:42:50.471
phished as easily as passwords. 
As soon as Jane enters her 

03:42:50.472 --> 03:42:55.055
password into the phishing page,
the attacker connects to the 

03:42:55.056 --> 03:42:58.923
real website and initiates a 
log-in flow using the freshly 

03:42:58.924 --> 03:43:00.924
stolen passwords. 

03:43:02.997 --> 03:43:04.997
The real website asks the 
attacker 

03:43:07.928 --> 03:43:09.928
for the OTP, the attacker then 
asks Jane.

03:43:11.455 --> 03:43:14.779
In the meantime, the six-digit 
number is sent to her phone. 

03:43:14.780 --> 03:43:16.780
Jane is under the impression 
she's 

03:43:17.835 --> 03:43:20.332
logging into the real website so
she expects she gets asked for 

03:43:20.333 --> 03:43:23.171
the one-time password. As soon 
as it arrives, she enters it 

03:43:24.595 --> 03:43:26.595
into the phishing page.

03:43:29.142 --> 03:43:31.578
The attacker forwards the OTP 
for the real website and gained 

03:43:31.579 --> 03:43:34.243
access to her account. 
    Similar attacks are possible

03:43:34.244 --> 03:43:36.244
if Jane 

03:43:37.506 --> 03:43:39.506
is using time-based OTPs, 
generated by 

03:43:40.579 --> 03:43:42.579
an app on her phone or a 
hardware token.

03:43:43.869 --> 03:43:45.869
Or if the sign-in, Jane has to 
confirm 

03:43:47.124 --> 03:43:50.006
that log-in attempt on her 
mobile device. The problem is in

03:43:50.007 --> 03:43:52.007
all of these cases, 

03:43:53.087 --> 03:43:55.315
we rely on Jane, a human, to 
recognize when she's not on the 

03:43:55.316 --> 03:43:57.561
real website but on a phishing 
page. 

03:43:59.575 --> 03:44:02.180
Remember, the study from before.
It also estimates that around 

03:44:02.181 --> 03:44:07.860
12.4 million users fell victim 
to phishing during the same 

03:44:07.861 --> 03:44:13.384
one-year period. This is why 
last year at I/O, we recommended

03:44:13.385 --> 03:44:16.648
using security keys, instead. 
    Many of you are familiar 

03:44:16.649 --> 03:44:19.311
with the universal factor 
security keys that look like 

03:44:19.312 --> 03:44:24.004
this. Some of you may even be 
using them for two-factor 

03:44:24.005 --> 03:44:26.005
verification already.

03:44:27.938 --> 03:44:29.938
The main advantage of security 
keys 

03:44:32.418 --> 03:44:35.904
over OTPs is that they cannot be
fooled by phishing. Security 

03:44:35.905 --> 03:44:39.253
keys talk directly to the 
browser. They can easily verify 

03:44:39.254 --> 03:44:41.254
that the URL of 

03:44:43.944 --> 03:44:45.569
the pastime that Jane is 
visiting is the a slightly 

03:44:45.570 --> 03:44:47.570
different URL corresponding to a
phishing site.

03:44:51.541 --> 03:44:53.541
This E are removes the human 
error factor.

03:44:58.312 --> 03:45:00.412
How come we aren't all using 
them on every website already 

03:45:00.413 --> 03:45:02.866
today? 
    Unfortunately, a key piece 

03:45:02.867 --> 03:45:04.867
of the puzzle have been missing.

03:45:07.981 --> 03:45:10.224
Previously, there haven't been a
good way to access security keys

03:45:10.225 --> 03:45:12.225
on the web. Some of you are 
already familiar with 

03:45:16.628 --> 03:45:18.483
the API which was a great first 
step but also had a number of 

03:45:18.484 --> 03:45:20.484
limitations.

03:45:21.562 --> 03:45:23.562
For instance, it wasn't 
available across all browsers.

03:45:26.211 --> 03:45:28.211
And this is

03:45:30.150 --> 03:45:34.881
why -- the web platform API that
provides a strong authentication

03:45:34.882 --> 03:45:37.734
on the web. 
    The new API is coming to 

03:45:37.735 --> 03:45:40.200
major browsers and made 
available on both 

03:45:44.022 --> 03:45:46.022
mobile and desk

03:45:47.348 --> 03:45:49.348
top.

03:45:50.603 --> 03:45:53.251
The initial feature set with the
latest Chrome beta. Let's see 

03:45:53.252 --> 03:45:55.252
what makes this API so great.

03:45:59.432 --> 03:46:00.646
First, it's backwards compatible
with existing security keys, the

03:46:00.647 --> 03:46:02.647
same key 

03:46:05.765 --> 03:46:07.206
that you registered through the 
U2F API can be used through the 

03:46:07.207 --> 03:46:09.207
web authentication API.

03:46:11.290 --> 03:46:13.290
That means, you can migrate your
site 

03:46:14.395 --> 03:46:16.395
to U2F without any visible 
changes.

03:46:17.645 --> 03:46:19.645
But it's much more than just a 
new API.

03:46:25.291 --> 03:46:27.291
In a variety of form factors 
that are 

03:46:28.573 --> 03:46:30.629
much more exciting than USB 
hardware tokens. So if they are 

03:46:30.630 --> 03:46:33.930
not your cup of tea, don't fall 
asleep just yet. 

03:46:35.752 --> 03:46:37.415
Also brings many new features 
that enable exciting new use 

03:46:37.416 --> 03:46:39.860
cases. The single most important
feature is 

03:46:43.173 --> 03:46:48.068
probably that authenticators can
now perform user verification. 

03:46:48.069 --> 03:46:50.069
This means that the 
authenticator can 

03:46:53.184 --> 03:46:54.859
locally verify the user if Jane 
drops her authenticator on the 

03:46:54.860 --> 03:46:58.502
street, you cannot pick it up 
and use it. It only responds to 

03:46:58.503 --> 03:47:01.818
Jane. 
    User verification can take 

03:47:01.819 --> 03:47:03.819
many forms.

03:47:06.146 --> 03:47:08.146
It can be done using biometrics.

03:47:18.667 --> 03:47:22.200
The built-in finger print 
readerimportant feature is 

03:47:18.667 --> 03:47:22.867
probably that authenticators can
now perform user verification. 

03:47:18.667 --> 03:47:22.133
This means that the 
authenticator can locally verify

03:47:18.667 --> 03:47:22.600
the user if Jane drops her 
authenticator on the street, you

03:47:18.667 --> 03:47:22.333
cannot pick it up and use it. It
only responds to Jane. 

03:47:18.667 --> 03:47:22.667
User verification can take many 
forms. It can be done using 

03:47:18.667 --> 03:47:18.865
biometrics. The built-in finger 
print reader in your notebook or

03:47:18.866 --> 03:47:20.866
phone.

03:47:30.775 --> 03:47:33.050
They do not need to be combined 
with passwords to implement two 

03:47:33.051 --> 03:47:38.211
factor authentication. There is 
already something that you have 

03:47:38.212 --> 03:47:42.141
and something that you are. So 
you get great security. And you 

03:47:42.142 --> 03:47:45.210
also get a great user 
experience. You no longer have 

03:47:45.211 --> 03:47:47.211
to type your password.

03:47:49.971 --> 03:47:51.971
It's especially frustrating on 
mobile devices. 

03:47:52.012 --> 03:47:54.012
Let me show you what I'm talking

03:47:55.019 --> 03:47:57.745
about. Can I switch the demo 
device, please?

03:48:01.413 --> 03:48:03.887
Suppose that I'm browsing the 
web and I find something I want 

03:48:03.888 --> 03:48:05.888
to buy.

03:48:10.471 --> 03:48:12.727
I have a pixel 2 phone with a 
finger sensor. Suppose I have 

03:48:12.728 --> 03:48:15.011
this chemical cleaning kit 
that's a good deal for ten 

03:48:15.012 --> 03:48:17.012
cents, I add it to my cart.

03:48:20.525 --> 03:48:22.525
Then, I go to check out

03:48:25.827 --> 03:48:27.970
-- and then, I choose to 
complete my 

03:48:31.253 --> 03:48:38.361
checkout with paypal. 
    I get redirected to paypal. 

03:48:38.362 --> 03:48:40.362
And because paypal supports the 
web 

03:48:41.430 --> 03:48:43.430
authentication API, I can easily
verify 

03:48:44.534 --> 03:48:46.741
my identity using just my 
fingerprint. Sorry.

03:49:02.254 --> 03:49:04.254
Select the credit card.

03:49:20.088 --> 03:49:22.088
And there. My order is 
confirmed.

03:49:25.609 --> 03:49:27.771
So I didn't have to type -- it 
was so much better user 

03:49:28.822 --> 03:49:30.822
experience. Back to the slides, 
please.

03:49:35.386 --> 03:49:37.386
    How does it all work?

03:49:40.085 --> 03:49:41.906
First, let's take a look at how 
authenticators work in the first

03:49:41.907 --> 03:49:43.907
place.

03:49:46.952 --> 03:49:48.952
All the authenticators

03:49:50.308 --> 03:49:52.608
use -- there's a one-time set-up
in which the user registers an 

03:49:53.427 --> 03:49:56.273
authenticator in an account. 
During registration, the 

03:49:56.274 --> 03:49:58.509
authenticator generates a new 
public/private keeper.

03:50:05.885 --> 03:50:07.885
It can be extracted from the 
authenticator.

03:50:09.900 --> 03:50:11.900
Then every

03:50:15.111 --> 03:50:17.339
time -- they possess the private
key. This is done through a 

03:50:17.340 --> 03:50:19.340
challenged response base.

03:50:22.709 --> 03:50:24.709
Sends a challenge, which in turn
uses 

03:50:27.141 --> 03:50:31.581
the private key to provide a 
cryptographic signature. It 

03:50:31.582 --> 03:50:33.582
verifies it against the public 
key and the challenge.

03:50:41.157 --> 03:50:45.959
Releasing the signature is -- 
such as a fingerprint scan. The 

03:50:45.960 --> 03:50:47.960
finger never leaves the device, 

03:50:49.850 --> 03:50:51.850
it's only used to locally unlock
the authenticator.

03:50:59.034 --> 03:51:00.516
You did not see this in the 
demo. I already did this last 

03:51:00.517 --> 03:51:03.375
week. There are three important 
participants in this flow.

03:51:14.223 --> 03:51:16.223
Suppose that

03:51:17.328 --> 03:51:21.261
-- such as a fingerprint scan. 
The finger never leaves the 

03:51:17.328 --> 03:51:20.328
device, it's only used to 
locally unlock the 

03:51:17.328 --> 03:51:21.528
authenticator. You did not see 
this in the demo. I already did 

03:51:17.328 --> 03:51:21.528
this last week. There are three 
important participants in this 

03:51:17.328 --> 03:51:21.461
flow. Suppose that it is once, 
again, Jane who is now setting 

03:51:17.328 --> 03:51:19.328
up the fingerprint reader in her
phone as an authenticator.

03:51:21.404 --> 03:51:23.431
To kick off the registration 
flow, the server first generates

03:51:23.432 --> 03:51:26.758
a challenge. A large, random 
number that will be only used 

03:51:26.759 --> 03:51:28.759
for the registration process and
thrown away later. 

03:51:30.856 --> 03:51:33.313
The server stores a challenge in
association with the user 

03:51:33.314 --> 03:51:37.601
account and transmits it along 
with user information to the web

03:51:37.602 --> 03:51:39.602
app running in the browser.

03:51:44.125 --> 03:51:46.125
The web app then calls the web 
app.

03:51:49.491 --> 03:51:51.318
It extends the credential 
management API so it's available

03:51:51.319 --> 03:51:53.319
under navigator.credentials.

03:51:58.103 --> 03:51:59.335
To create a new public key 
credential, you specify the 

03:51:59.336 --> 03:52:02.195
challenge, you received from the
server, user information that 

03:52:04.244 --> 03:52:06.244
will be displayed on the 
authenticator 

03:52:10.409 --> 03:52:11.417
if it has a display and the 
crypto items you wish to use. 

03:52:11.418 --> 03:52:16.136
    In addition to the 
parameters specified, the 

03:52:16.137 --> 03:52:18.137
browser also extracts the 

03:52:19.626 --> 03:52:21.626
authoritative domain name. Then,
all of this information is sent 

03:52:25.133 --> 03:52:27.133
to the authenticator which asks 
for user consent.

03:52:28.842 --> 03:52:31.694
This is required so that 
malicious websites cannot use 

03:52:31.695 --> 03:52:35.998
the API to track the user. This 
protects the user's privacy. 

03:52:39.699 --> 03:52:41.752
Once user consent is given, the 
authenticator generates a new 

03:52:42.575 --> 03:52:44.575
public/private keeper.

03:52:45.830 --> 03:52:47.270
It stores the private key 
internally along with the user 

03:52:47.271 --> 03:52:51.168
information and importantly, the
domain name, the credential 

03:52:51.169 --> 03:52:53.169
belongs to. 

03:52:56.120 --> 03:52:58.575
And then, the API core contains 
the unique identifier, the 

03:52:58.576 --> 03:53:00.576
public key and 

03:53:01.863 --> 03:53:04.113
the signature, the challenge, 
the domain name, the public key,

03:53:04.114 --> 03:53:06.114
the credential ID and some other
parameters.

03:53:09.392 --> 03:53:13.743
And the web app, there you need 
to validate the signature and 

03:53:13.744 --> 03:53:16.208
there's a last step. If the 
signature checks out, the server

03:53:19.667 --> 03:53:21.315
has to store the credential ID 
and the public key in 

03:53:21.316 --> 03:53:23.316
association with the user 
account.

03:53:25.336 --> 03:53:27.336
And don't forget to invalidate 
the challenge. 

03:53:28.691 --> 03:53:31.141
This concludes the registration 
flow. And, remember, you only 

03:53:31.142 --> 03:53:33.142
have to do this once.

03:53:35.237 --> 03:53:38.077
Now, let's take a closer look at
how Jane can use the 

03:53:38.078 --> 03:53:40.078
authenticator to log in without 
a pass word the next time.

03:53:46.882 --> 03:53:48.921
The authenticator already has a 
private key and the server has a

03:53:48.922 --> 03:53:51.775
corresponding public key in 
association with Jane's account.

03:53:53.814 --> 03:53:55.869
Remember that authentication is 
performed using a challenge 

03:53:55.870 --> 03:53:57.870
response 

03:53:59.379 --> 03:54:00.211
based protocol where Jane 
calculates the cryptographic 

03:54:00.212 --> 03:54:02.212
signature to prove possession of
the private key. 

03:54:05.808 --> 03:54:07.238
So once, again, the flow starts 
with the server generating a 

03:54:07.239 --> 03:54:11.764
challenge, a large random number
which is used to prevent replay 

03:54:11.765 --> 03:54:15.785
attacks. Then, the server 
transmits the credential ID and 

03:54:15.786 --> 03:54:17.786
the challenge to the 

03:54:19.101 --> 03:54:21.060
web application which in turn 
calls the web awe 

03:54:21.061 --> 03:54:23.061
THENTuthentication API. 

03:54:24.765 --> 03:54:26.653
To create a cryptographic 
signature, you need to call with

03:54:26.654 --> 03:54:28.699
the public key option. You 
specify the challenge that you 

03:54:31.155 --> 03:54:33.155
received from the server, the 
credential 

03:54:34.422 --> 03:54:36.422
for which you want to get 
cryptographic signature.

03:54:38.529 --> 03:54:41.224
And here, you see that we also 
ask the authenticator to locally

03:54:41.225 --> 03:54:43.225
verify the user. 

03:54:46.736 --> 03:54:48.736
In addition to these parameters 
we 

03:54:51.583 --> 03:54:54.121
specified, once again, the 
browser inspects and sends all 

03:54:54.122 --> 03:54:56.122
of the information to the 
authenticator.

03:55:00.473 --> 03:55:03.146
The authenticator looks up 
information stored for the 

03:55:03.147 --> 03:55:06.821
credential ID. Next, and this is
important, the authenticator 

03:55:06.822 --> 03:55:09.139
checks that the domain name of 
the calling website matches the 

03:55:10.776 --> 03:55:12.002
one that was provided at the 
time the credential was created.

03:55:15.053 --> 03:55:17.091
This is what makes these 
authenticators resistant to 

03:55:17.092 --> 03:55:22.176
phishing. If Jane is on the 
phishing page with a slightly 

03:55:22.177 --> 03:55:24.177
different URL, the 

03:55:25.796 --> 03:55:27.796
authenticator will

03:55:29.778 --> 03:55:32.242
not notice the discrepancy. The 
authenticator provides local 

03:55:33.463 --> 03:55:35.463
verification using the 
fingerprint reader.

03:55:36.965 --> 03:55:38.847
If the fingerprint checks out, 
the authenticator uses the 

03:55:38.848 --> 03:55:40.848
private key to 

03:55:42.135 --> 03:55:43.568
generate a cryptographic 
signature over the domain name 

03:55:43.569 --> 03:55:46.624
and the challenge. 
    It's sent to the server.

03:55:51.350 --> 03:55:53.986
There, once again, it is 
verified it corresponds to the 

03:55:53.987 --> 03:55:55.987
challenge.

03:55:57.665 --> 03:55:59.089
And if it does, the server 
considers the authentication 

03:55:59.090 --> 03:56:02.409
successful. And the last step, 
again, don't forget to 

03:56:02.410 --> 03:56:04.694
invalidate the challenge. 
    This concludes the 

03:56:04.695 --> 03:56:06.695
registration -- 

03:56:09.721 --> 03:56:12.672
sorry the authentication flow. 
But if you have the large user 

03:56:12.673 --> 03:56:13.901
base, you know you cannot 
replace your ID management 

03:56:13.902 --> 03:56:15.902
overnight.

03:56:17.730 --> 03:56:20.432
What's also great about, it 
enables you to adopt it one at a

03:56:20.433 --> 03:56:24.939
time. You can use more and more 
of the API to get more and more 

03:56:24.940 --> 03:56:26.940
of the security and the 
usability benefits. 

03:56:29.448 --> 03:56:31.448
First, you can use it as a 
drop-in 

03:56:32.714 --> 03:56:34.714
replacement for the U2F API.

03:56:40.027 --> 03:56:42.528
Then, with minimal changes, you 
can implement authentications, 

03:56:42.529 --> 03:56:44.529
such as making a purchase.

03:56:46.856 --> 03:56:50.456
This can be done using 
theenables you to adopt it one 

03:56:46.856 --> 03:56:51.122
at a time. You can use more and 
more of the API to get more and 

03:56:46.856 --> 03:56:50.122
more of the security and the 
usability benefits. 

03:56:46.856 --> 03:56:50.789
First, you can use it as a 
drop-in replacement for the U2F 

03:56:46.856 --> 03:56:50.189
API. Then, with minimal changes,
you can implement 

03:56:46.856 --> 03:56:50.922
authentications, such as making 
a purchase. This can be done 

03:56:46.856 --> 03:56:47.465
using the fingerprint reader 
built into your phone or mobile 

03:56:47.466 --> 03:56:49.466
device. 

03:56:51.969 --> 03:56:54.498
And finally, once your users 
warm up to the idea of signing 

03:56:54.499 --> 03:56:59.395
in using a fingerprint or a 
hardware token, you might 

03:56:59.396 --> 03:57:02.084
consider making it the primary 
log-in mechanism.

03:57:05.556 --> 03:57:07.814
To summarize, we talked about 
the web authentication API, 

03:57:07.815 --> 03:57:10.733
which provides strong 
authentication on the web using 

03:57:14.838 --> 03:57:16.838
public key cryptography.

03:57:18.578 --> 03:57:20.654
Enabling a password log-in 
experience making it easy for 

03:57:20.655 --> 03:57:22.655
users to sign into your site 
securely.

03:57:27.729 --> 03:57:29.729
It all comes in the form of the

03:57:31.270 --> 03:57:32.485
simply used, which is available 
across all platforms and 

03:57:32.486 --> 03:57:34.486
browsers. 

03:57:38.265 --> 03:57:40.265
With that, let me hand it back 
to Eiji to wrap it up. 

03:57:41.124 --> 03:57:43.124
&gt;&gt; EIJI KITAMURA: Okay. Thank 
you.

03:57:46.223 --> 03:57:48.223
We've been working through new 
exciting features in the web.

03:57:51.812 --> 03:57:53.892
One-tap sign-up and autosign-in 
for low friction signing up and 

03:57:53.893 --> 03:57:55.893
signing in.

03:58:03.091 --> 03:58:05.091
ReCAPTCHA and web authentication
with 

03:58:06.193 --> 03:58:08.193
API.

03:58:11.272 --> 03:58:13.272
We have published --

03:58:17.853 --> 03:58:19.853
what makes good signup and good 
sign-in. 

03:58:21.519 --> 03:58:23.987
Great security, great user 
experience, and great developer 

03:58:26.037 --> 03:58:28.037
experience.

03:58:29.350 --> 03:58:31.350
If you have any questions, 
please visit 

03:58:33.203 --> 03:58:35.203
us, the website

03:58:37.673 --> 03:58:40.107
Sandbox, and we'd love your 
feedback on our session today at

03:58:40.108 --> 03:58:42.108
Google.

03:58:43.171 --> 03:58:45.435
com/ioschedule. We hope you 
enjoyed our talk. Thank you very

03:58:45.436 --> 03:58:47.436
much.

04:19:01.201 --> 04:19:03.201
Material Metrics: Learn about 
the 

04:19:06.137 --> 04:19:08.137
research-backed validation for 
adopting 

04:19:11.810 --> 04:19:13.810
Material Design

04:23:29.611 --> 04:23:31.611
&gt;&gt; Good afternoon, everybody, 
I'm 

04:23:32.874 --> 04:23:35.714
Elizabeth Churchill, and I head 
up research for material design.

04:23:37.557 --> 04:23:39.208
I'm sure you've been hearing 
about the innovations that 

04:23:39.209 --> 04:23:42.863
material has brought out 
recently here at I/O. And we've 

04:23:42.864 --> 04:23:44.864
done a lot of research in the 
background.

04:23:46.978 --> 04:23:48.978
To back up much of that 
innovation.

04:23:50.048 --> 04:23:51.282
And what we're going to do today
is just tell you a little bit 

04:23:51.283 --> 04:23:53.283
about some of 

04:23:54.292 --> 04:23:58.424
that research. 
    We're going to encourage you

04:23:58.425 --> 04:24:02.899
to come talk to us later. We're 
interested in knowing how you're

04:24:06.156 --> 04:24:07.421
integrating research into your 
product and design system 

04:24:07.422 --> 04:24:09.422
development.

04:24:11.712 --> 04:24:13.757
But before I get going, I want 
to know how many people out 

04:24:13.758 --> 04:24:19.044
there consider themselves to be 
developers. Yay. Welcome, thank 

04:24:19.045 --> 04:24:21.045
you for coming.

04:24:31.808 --> 04:24:35.067
Finally, researchers. Yay, 
research. 

04:24:36.078 --> 04:24:38.318
Welcome, welcome, welcome. One 
of the things we want to 

04:24:38.319 --> 04:24:40.319
emphasize 

04:24:41.561 --> 04:24:43.561
in this talk and that material 
is 

04:24:45.080 --> 04:24:47.080
extremely committed to is that 
we 

04:24:48.337 --> 04:24:50.337
believe the tight collaboration 
between 

04:24:52.037 --> 04:24:54.037
engineering and development 
between 

04:24:58.356 --> 04:25:00.234
design and research really is 
the key to creating great user 

04:25:00.235 --> 04:25:05.763
experiences. And by user 
experiences, I mean the users 

04:25:05.764 --> 04:25:10.242
are the things that you build 
but also, you as users. Because 

04:25:10.243 --> 04:25:12.478
in material, as you will see and
you've been hearing, we build 

04:25:15.330 --> 04:25:16.769
products for you so that you can
build great products for your 

04:25:16.770 --> 04:25:18.770
users. 

04:25:20.660 --> 04:25:23.284
So I just wanted to go over a 
few things about material which 

04:25:23.285 --> 04:25:25.285
you may know. Just to remind 
you.

04:25:28.671 --> 04:25:30.671
So the material design system is
open source.

04:25:32.895 --> 04:25:36.809
It's adaptable and helps you 
bring high-quality experiences 

04:25:36.810 --> 04:25:39.477
to your users. And our aim is to
help you make things 

04:25:43.747 --> 04:25:45.747
that are beautiful but that are 
usable and useful.

04:25:48.662 --> 04:25:50.662
And also, importantly 
accessible.

04:25:53.542 --> 04:25:55.542
We're very committed to helping 
you do that. 

04:25:55.832 --> 04:25:57.832
So material consists of 
components 

04:25:59.289 --> 04:26:01.925
and components are things, like,
buttons, things like text 

04:26:01.926 --> 04:26:07.431
fields, and things like tables. 
You're familiar with that. 

04:26:10.681 --> 04:26:12.681
At this I/O, we have brought 

04:26:14.094 --> 04:26:17.200
material theming into the 
picture. And we've heard you and

04:26:17.201 --> 04:26:19.201
we have responded because we 
want to make all of 

04:26:23.114 --> 04:26:25.114
these components customizable so
that 

04:26:26.966 --> 04:26:29.210
you can adapt them for your 
experience so that you can have 

04:26:29.211 --> 04:26:31.211
your brand and your 

04:26:33.098 --> 04:26:35.098
look and feel for your users all
the way 

04:26:36.772 --> 04:26:38.772
through systematically from 
design to code.

04:26:40.071 --> 04:26:43.070
So that's very much a key part 
of our innovation

04:26:46.813 --> 04:26:49.447
. Material also consists of 
patterns. Patterns like account 

04:26:49.448 --> 04:26:51.448
switching, 

04:26:52.914 --> 04:26:54.914
accessing settings or handling 
empty states.

04:27:03.543 --> 04:27:07.414
    They roll up into guidance 
that you can see on our site, 

04:27:07.415 --> 04:27:12.556
our spec. If you have not 
checked out material.io, please 

04:27:12.557 --> 04:27:15.194
do so, please go and have a 
look. Check out what we've got 

04:27:15.195 --> 04:27:17.195
there, and send us feedback.

04:27:19.893 --> 04:27:21.893
Because a great part of this 
talk is to 

04:27:23.105 --> 04:27:25.105
remind you

04:27:27.277 --> 04:27:28.695
that we can shape great 
experiences with the help of 

04:27:28.696 --> 04:27:30.696
folks like you. So we need your 
feedback.

04:27:34.433 --> 04:27:36.461
Material, also, as I mentioned 
has a Suite of products and 

04:27:36.462 --> 04:27:39.316
tools that are designed for you.
One of them is here.

04:27:43.337 --> 04:27:45.337
This is Gallery, and Sara's 
going to be 

04:27:46.635 --> 04:27:48.635
talking about Gallery in a bit 
of detail a bit later. 

04:27:50.919 --> 04:27:53.559
It was launched here at I/O, and
we want your feedback. Gallery 

04:27:53.560 --> 04:27:55.820
will allow you to take the 
components, the themes and that 

04:27:55.821 --> 04:28:00.722
guidance and turn it into 
reality. We're really building 

04:28:00.723 --> 04:28:02.723
these tools to build this 
relationship and this 

04:28:02.957 --> 04:28:06.216
collaboration. The deep 
collaboration between design and

04:28:06.217 --> 04:28:08.217
development.

04:28:15.398 --> 04:28:17.055
Just as a pause, this is the 
outline of the kinds of research

04:28:17.056 --> 04:28:19.095
we do in this team in the 
material experience research 

04:28:19.096 --> 04:28:22.153
team. 
    The most granular research 

04:28:22.154 --> 04:28:25.463
is on components, and Michael is
going to be taking you through 

04:28:25.464 --> 04:28:27.464
some of that.

04:28:29.112 --> 04:28:31.112
Here we look to make sure the 

04:28:32.594 --> 04:28:34.594
components really are beautiful 
and 

04:28:37.431 --> 04:28:39.431
usable and useful and 
accessible. 

04:28:40.185 --> 04:28:42.211
The next level of research is 
the product research on things 

04:28:42.212 --> 04:28:44.212
like Gallery.

04:28:46.078 --> 04:28:48.078
And here, again, we use 
interviews and 

04:28:49.139 --> 04:28:50.965
observations and we work with 
folks like you to make these 

04:28:50.966 --> 04:28:53.430
tools great. Sara's going to be 
taking you through some of that.

04:28:58.448 --> 04:29:00.448
Finally, we look at work flow.

04:29:03.209 --> 04:29:05.445
Where do all of these tools fit 
into your lives as a designer 

04:29:05.446 --> 04:29:09.520
and developer. How do you pull 
these together to accomplish the

04:29:09.521 --> 04:29:11.521
things you need?

04:29:15.022 --> 04:29:17.022
What is the bigger ecosystem of 
the 

04:29:19.296 --> 04:29:22.341
idea to design, to develop, to 
iterate work flow? And again, we

04:29:22.342 --> 04:29:26.268
do interviews, we do behavioral 
studies. We observe folks in 

04:29:26.269 --> 04:29:28.269
workplaces, like where you work.

04:29:30.770 --> 04:29:32.770
We do surveys to try and 
understand 

04:29:34.252 --> 04:29:37.918
where our tools fit in for you 
now, how we can improve them. 

04:29:37.919 --> 04:29:39.348
And to start to think about 
where we need to go in the 

04:29:39.349 --> 04:29:41.349
future as the whole 

04:29:43.220 --> 04:29:45.454
field explores and innovates. 
And Sara is going to help you 

04:29:45.455 --> 04:29:47.455
with that. 

04:29:48.942 --> 04:29:50.942
So with that said, from our 
studies 

04:29:52.620 --> 04:29:55.272
with a few users to thousands of
users, from our close studies as

04:29:55.273 --> 04:29:57.916
we talk to you to our surveys, 
we're going to give you 

04:30:03.852 --> 04:30:06.135
a bit of a flavor of that today.
And I'd like to hand off to 

04:30:06.136 --> 04:30:10.406
Michael who is going to talk 
about components research. 

04:30:11.431 --> 04:30:12.844
&gt;&gt; MICHAEL GILBERT: Well, thank 
you for the introduction, 

04:30:12.845 --> 04:30:14.845
Elizabeth. And once again, 
welcome everyone.

04:30:17.738 --> 04:30:19.738
My name is Michael and I lead up

04:30:21.254 --> 04:30:23.254
research on material system.

04:30:24.497 --> 04:30:26.497
So as Elizabeth mentioned, we do

04:30:27.767 --> 04:30:30.004
research on everything that 
covers the minor details of 

04:30:30.005 --> 04:30:33.886
users' experience all the way up
to the big picture. We look at 

04:30:33.887 --> 04:30:35.887
everything from how things 

04:30:37.753 --> 04:30:40.209
look on the web or on your 
mobile device to how those 

04:30:40.210 --> 04:30:42.210
things come together to 

04:30:43.456 --> 04:30:45.705
form an application or a brand 
or an experience. 

04:30:47.986 --> 04:30:49.829
For today, I'm going to be 
focusing on two types of 

04:30:49.830 --> 04:30:52.469
research that we've done, both 
examining the components of a 

04:30:53.913 --> 04:30:59.442
design system. First, I'll go 
into some detail on the top-down

04:30:59.443 --> 04:31:01.478
experimental work that we've 
done, which looks into how the 

04:31:01.479 --> 04:31:06.157
details of design can really 
impact how your users interact 

04:31:06.158 --> 04:31:08.158
with your products.

04:31:09.271 --> 04:31:11.271
And second, I'll go through some
of the 

04:31:12.927 --> 04:31:17.241
bottom up,. Focusing on the same
components, but also, aiming to 

04:31:17.242 --> 04:31:19.242
understand how experiences come 
together in our 

04:31:21.914 --> 04:31:24.152
products and what those 
experiences mean to your users. 

04:31:24.153 --> 04:31:28.045
    And by the end, I'm hoping 
to give everyone a better 

04:31:28.046 --> 04:31:30.300
understanding about how we do 
some of the research here at 

04:31:32.538 --> 04:31:34.538
Google so you can take that back
and do it within your own teams.

04:31:36.624 --> 04:31:40.687
    But first, a little 
background on what I mean when I

04:31:40.688 --> 04:31:43.336
say components. Elizabeth 
already introduced some of 

04:31:46.387 --> 04:31:49.027
the components, the patterns and
the guidelines available in 

04:31:49.028 --> 04:31:51.028
material design.

04:31:52.157 --> 04:31:54.394
Here, we have three examples of 
abstractions of those 

04:31:54.395 --> 04:31:56.639
components. And just to 
introduce them, on the 

04:31:59.700 --> 04:32:03.611
left, we have the material fab 
or the floating action button. 

04:32:03.612 --> 04:32:07.979
This was introduced in the first
iteration of material design. 

04:32:07.980 --> 04:32:09.803
And since, has become more of 
the more recognizable 

04:32:09.804 --> 04:32:11.804
characteristics. 

04:32:13.869 --> 04:32:15.869
In the center, we have the 
material text field.

04:32:17.936 --> 04:32:20.596
And this provides a core means 
for users to input content into 

04:32:20.597 --> 04:32:25.655
applications. And on the right, 
material buttons, which provide 

04:32:25.656 --> 04:32:28.088
a core means of interacting with
content in applications.

04:32:31.344 --> 04:32:33.344
And you probably are all 
familiar with these already.

04:32:34.803 --> 04:32:37.708
But what I want to call out here
is not that these components are

04:32:37.709 --> 04:32:39.709
necessarily 

04:32:41.164 --> 04:32:42.585
unique or that they're earth 
shatteringly critical to any one

04:32:42.586 --> 04:32:46.238
single interaction. But that 
these components are a 

04:32:48.473 --> 04:32:50.473
fundamental part of a larger 
experience. 

04:32:50.935 --> 04:32:53.162
And because of that, we want to 
make sure that we understand 

04:32:53.163 --> 04:32:55.163
these components 

04:32:56.874 --> 04:32:59.315
at a fundamental level. But for 
now, we're going to focus just 

04:33:00.135 --> 04:33:02.135
on this first one. The material 
text field.

04:33:06.454 --> 04:33:08.454
So this is the text field that 
we started with.

04:33:09.910 --> 04:33:11.910
This was our baseline.

04:33:13.384 --> 04:33:14.595
This text field performed well 
and it aligned with the original

04:33:14.596 --> 04:33:16.596
material vision.

04:33:17.859 --> 04:33:20.086
But there was an opportunity to 
make sure that it worked even 

04:33:20.087 --> 04:33:22.121
better. That it worked across 
all devices.

04:33:25.794 --> 04:33:27.794
That it worked in both consumer 
and enterprise applications.

04:33:30.275 --> 04:33:32.747
    When you look at something 
like this, think of all of the 

04:33:32.748 --> 04:33:35.188
different parts that have to 
come together to make a text 

04:33:35.189 --> 04:33:39.280
field. There's the underline 
that indicates where the field 

04:33:39.281 --> 04:33:41.711
starts and where it stops. 
There's the label that hints at 

04:33:41.712 --> 04:33:43.712
what 

04:33:46.573 --> 04:33:48.573
might be typed in there

04:33:52.103 --> 04:33:53.937
. The shape of the entire 
component how each of those 

04:33:53.938 --> 04:33:55.938
individual parameters come 

04:33:56.982 --> 04:33:58.982
together and then how they're 
used on a page. 

04:33:59.843 --> 04:34:01.843
So it's clear that even for a 
text 

04:34:03.095 --> 04:34:05.095
field, there's a lot going on 
design wise.

04:34:17.985 --> 04:34:20.627
I just want to show a few of the
details that we're considering 

04:34:20.628 --> 04:34:25.503
here. So what we're looking at 
here is an exploration of label 

04:34:25.504 --> 04:34:27.504
placement as well 

04:34:28.549 --> 04:34:30.176
as some of the possible values 
in consideration for label 

04:34:30.177 --> 04:34:33.037
placement. 
    But we also looked at 

04:34:33.038 --> 04:34:35.069
things, like, background fill, 
we looked at different 

04:34:39.963 --> 04:34:42.622
elements of style, different 
types of contrast. And of 

04:34:42.623 --> 04:34:44.623
course, whether there should be 
squared or rounded borders.

04:34:47.921 --> 04:34:50.352
In the end, there were over 140 
different variations that we 

04:34:50.353 --> 04:34:52.353
looked at 

04:34:53.422 --> 04:34:55.423
in a couple of different 
contexts. 

04:34:55.424 --> 04:34:57.424
First, we looked at simple forms
which had stub content that was 

04:34:58.715 --> 04:35:01.354
procedurally drawn so that we 
could test a whole bunch of 

04:35:01.355 --> 04:35:05.421
them. Second, we looked at real 
quote, unquote forms which were 

04:35:05.422 --> 04:35:07.422
forms that we actually took from
the wild.

04:35:09.889 --> 04:35:11.889
And inserted our experimental 
text fields.

04:35:14.772 --> 04:35:16.421
Third, we looked at complex 
forms. And these are forms we 

04:35:16.422 --> 04:35:20.449
hope you would never encounter, 
you know, in nature. They're 

04:35:20.450 --> 04:35:22.450
unreasonably complex.

04:35:24.139 --> 04:35:26.139
But we've created them to see 
each text 

04:35:27.998 --> 04:35:29.998
field would perform in extreme 
circumstances.

04:35:31.848 --> 04:35:33.848
Would it stand out too much or 
get lost entirely? 

04:35:34.689 --> 04:35:36.689
And we'll show examples of that 
one 

04:35:38.188 --> 04:35:41.642
in a minute. First, what does 
that look like? This is 

04:35:41.643 --> 04:35:43.677
ultimately a tool that we 
created that would create each 

04:35:43.678 --> 04:35:46.147
of those forms with each of 
those text fields.

04:35:49.390 --> 04:35:52.243
Randomly drawing the layout, the
theme and each of the 

04:35:52.244 --> 04:35:54.244
characteristics that we 

04:35:55.643 --> 04:35:57.643
had identified

04:36:00.358 --> 04:36:02.212
. We deployed these forms in a 
set of large scale surveys so we

04:36:02.213 --> 04:36:06.077
could test the performance of 
every individual text field as 

04:36:06.078 --> 04:36:08.078
well as get an idea of what 

04:36:09.599 --> 04:36:11.599
users actually preferred. 

04:36:13.674 --> 04:36:15.715
And on the right, you can see 
the admin interface for the 

04:36:15.716 --> 04:36:20.611
tools we build. It's simple, but
allows us to zero in on the 

04:36:20.612 --> 04:36:22.612
types of designs that we want to
research.

04:36:24.474 --> 04:36:26.523
And more importantly, it 
provides us with an artifact 

04:36:26.524 --> 04:36:28.524
that we can share with the 
designers and developers who are

04:36:30.386 --> 04:36:32.386
creating and building these text
fields.

04:36:37.718 --> 04:36:39.988
Maybe you're curious about the 
complex forms. This is what I 

04:36:39.989 --> 04:36:44.478
mean when I say complex forms. 
    We don't condone their use 

04:36:44.479 --> 04:36:48.196
in the wild. But this is the 
lengths designers will go to 

04:36:48.197 --> 04:36:50.197
make sure that every opportunity

04:36:51.808 --> 04:36:53.808
is explore

04:36:55.545 --> 04:36:57.545
d.

04:36:59.764 --> 04:37:01.764
What we were able

04:37:11.274 --> 04:37:12.503
to do what products SHOUL look 
like. We were doing research as 

04:37:12.504 --> 04:37:14.504
a way of 

04:37:16.188 --> 04:37:18.220
working with designers to show 
them what parts seem to work and

04:37:18.221 --> 04:37:20.221
what parts might require 
caution.

04:37:25.578 --> 04:37:29.644
should look like. We were doing 
research as a way of working 

04:37:25.578 --> 04:37:29.578
with designers to show them what
parts seem to work and what 

04:37:25.578 --> 04:37:28.261
parts might require caution. To 
allow us to more effectively 

04:37:28.262 --> 04:37:30.262
bring 

04:37:31.301 --> 04:37:33.549
our users into the conversation.
    And this is one example of 

04:37:33.550 --> 04:37:35.550
what that conversation looks 
like.

04:37:38.241 --> 04:37:41.085
This is another -- this is what 
the data actually is from those 

04:37:41.086 --> 04:37:43.924
text field experiments. And 
without going into too many of 

04:37:43.925 --> 04:37:49.003
the details, I want to show you 
how we were looking at all of 

04:37:49.004 --> 04:37:54.076
the possible text fields, every 
possible combination without 

04:37:54.077 --> 04:37:56.355
dropping any of those 
possibilities because the data 

04:37:56.356 --> 04:37:58.383
says this or that. 

04:38:02.401 --> 04:38:04.401
Each step

04:38:06.925 --> 04:38:08.951
that -- the landscape and to 
provide our designers and 

04:38:08.952 --> 04:38:10.952
engineers with the 

04:38:12.020 --> 04:38:14.020
tools that they can use to 
create great products.

04:38:15.692 --> 04:38:17.733
And here I'm refer to research 
and the artifacts from research 

04:38:17.734 --> 04:38:19.734
as one of those tools.

04:38:24.901 --> 04:38:27.747
Here is the before and after 
example of what just one text 

04:38:27.748 --> 04:38:29.748
field might look like given this
approach.

04:38:34.689 --> 04:38:38.785
    What we aim to do is support
design that is more usable, more

04:38:38.786 --> 04:38:40.786
useful, more 

04:38:41.824 --> 04:38:46.315
beautiful and importantly more 
customizable. Especially with 

04:38:46.316 --> 04:38:48.316
today's enhanced material design
system and the 

04:38:50.981 --> 04:38:52.812
introduction of material 
theming. 

04:38:52.813 --> 04:38:55.460
We want to emphasize that the 
components are customizable and 

04:38:55.461 --> 04:39:00.136
that within that 
customizability, we've done the 

04:39:00.137 --> 04:39:02.137
leg work to make sure that those

04:39:03.179 --> 04:39:06.022
components will still work the 
way they should. And 

04:39:06.023 --> 04:39:08.898
importantly, that they'll still 
look the way that you want them 

04:39:08.899 --> 04:39:13.997
to. 
    So that's a quick look at 

04:39:13.998 --> 04:39:15.998
some of what we've done with the
material text field.

04:39:19.318 --> 04:39:22.846
But let's take a look at the FAB
and the button next. At the 

04:39:22.847 --> 04:39:25.697
beginning I mentioned that we'd 
be looking at both the top down 

04:39:27.116 --> 04:39:29.116
experimental research that we've
done.

04:39:39.139 --> 04:39:42.601
    It usually involves sitting 
down with your users across the 

04:39:42.602 --> 04:39:46.457
table. Sometimes, in something 
like usability studies. 

04:39:46.458 --> 04:39:48.458
Sometimes, in things like 
interviews.

04:39:52.554 --> 04:39:54.554
Secretly, it looks a lot like 
normal conversation.

04:39:57.641 --> 04:40:00.922
    What we try to do is make 
sure we're asking the right 

04:40:00.923 --> 04:40:02.923
questions.

04:40:08.046 --> 04:40:10.072
How long does it take 10,000 
users to click on this.

04:40:16.184 --> 04:40:18.616
About products and interactions.
Because material design is about

04:40:18.617 --> 04:40:21.061
the performance and the 
usability of components.

04:40:24.923 --> 04:40:27.769
But it is also a look in that 
field. So next, I'm going to 

04:40:27.770 --> 04:40:30.213
show three examples to give you 
a sense about how 

04:40:34.102 --> 04:40:36.102
users feel about these 
components and 

04:40:37.668 --> 04:40:39.668
what that means

04:40:43.011 --> 04:40:45.447
for our design. This first 
example is for a study 

04:40:46.667 --> 04:40:49.716
participant that's interacting 
with the new material button. 

04:40:49.717 --> 04:40:51.346
She says, when the boxes are 
really bolded like that, it 

04:40:51.347 --> 04:40:53.347
makes you feel like you're 
actually pressing a button.

04:40:58.885 --> 04:41:00.885
Sometimes, something like this 
in the 

04:41:02.328 --> 04:41:04.360
middle of interviews will make 
you take step back and ask 

04:41:04.361 --> 04:41:06.361
yourself, what is a button, 
really?

04:41:18.599 --> 04:41:21.060
    These aren't just strictly 
questions for fun either.

04:41:25.170 --> 04:41:27.170
There's an entire landscape of 
what buttons might look like.

04:41:31.234 --> 04:41:33.234
Of what they might be

04:41:39.428 --> 04:41:40.646
. To better understand and we 
get to do that by talking with 

04:41:40.647 --> 04:41:42.647
our users.

04:41:49.428 --> 04:41:51.680
The second example from a study 
participant who is interacting 

04:41:51.681 --> 04:41:55.161
with the Google themed material 
FAB. 

04:41:58.576 --> 04:42:00.576
The last

04:42:03.324 --> 04:42:05.350
time, it didn't look as googly 
as this. When we actually talked

04:42:05.351 --> 04:42:08.429
to our users, we learn about 
more than just the components.

04:42:11.475 --> 04:42:14.312
We learn about more than just 
the interactions or the 

04:42:14.313 --> 04:42:16.313
products.

04:42:17.998 --> 04:42:20.695
And in this example, we can 
clearly see how design can 

04:42:20.696 --> 04:42:25.803
impact brand. But we get a 
better sense from the user's own

04:42:25.804 --> 04:42:28.029
perspective about what seems to 
jump out at them. 

04:42:31.086 --> 04:42:33.523
And in the end, we can speak 
more effectively about the 

04:42:33.524 --> 04:42:36.997
meaningful characteristics of 
brand with the designers and the

04:42:36.998 --> 04:42:40.460
developers who are building 
these. 

04:42:42.933 --> 04:42:44.933
And this last example is a quote

04:42:46.724 --> 04:42:48.149
from a study participant who 
could use assistive devices to 

04:42:48.150 --> 04:42:50.150
see but he was actually legally 
blind.

04:43:09.258 --> 04:43:14.913
    And I think this is one of 
the main strengths

04:43:21.630 --> 04:43:23.630
--

04:43:26.765 --> 04:43:28.608
these components in our products
are encountered by all of our 

04:43:28.609 --> 04:43:30.609
users.

04:43:31.671 --> 04:43:33.671
It's a different way of looking 
at the exact same landscape.

04:43:39.642 --> 04:43:41.471
To wrap things up, I've shown 
you a brief look at how we've 

04:43:41.472 --> 04:43:43.472
approached a 

04:43:44.941 --> 04:43:47.376
couple different types of 
research. First, looking at the 

04:43:47.377 --> 04:43:49.377
material text 

04:43:51.027 --> 04:43:53.898
field from the top down 
experimentally. And second, 

04:43:53.899 --> 04:43:56.536
looking at the fab and the 
button from the bottom up. 

04:43:59.387 --> 04:44:01.387
I'm hoping you can see some of 
the 

04:44:02.953 --> 04:44:04.953
similarities of these two 
approaches.

04:44:05.988 --> 04:44:08.642
On the one hand, we're aiming to
better understand a whole range 

04:44:08.643 --> 04:44:10.643
of possible 

04:44:12.912 --> 04:44:14.912
expression with the brilliant 
designers 

04:44:16.389 --> 04:44:18.418
and engineers who were building 
material design. On the other 

04:44:18.419 --> 04:44:20.419
hand, we're aiming to 

04:44:21.500 --> 04:44:23.500
better support our users to make
sure 

04:44:26.474 --> 04:44:28.474
that each component is usable as
useful, 

04:44:30.073 --> 04:44:32.572
as beautiful no matter how it's 
used or by who. 

04:44:34.194 --> 04:44:35.821
And last, again, I'm hoping you 
might be able to take some of 

04:44:35.822 --> 04:44:37.822
the ideas 

04:44:38.834 --> 04:44:40.834
we've

04:44:43.544 --> 04:44:45.810
talked about research within in 
your own teams. With that, I'd 

04:44:45.811 --> 04:44:48.042
like to thank you for your time 
and welcome Sara to the stage 

04:44:50.100 --> 04:44:51.939
who is going to be talking about
designer and developer research.

04:44:54.947 --> 04:44:59.074
[ Applause ]  
   &gt;&gt; SARA CAMBRIDGE: Thank you,

04:44:59.075 --> 04:45:01.907
Michael. I'm Sara, and I lead 
research for material product.

04:45:05.384 --> 04:45:08.028
And what we do is create 
products and tools, resources 

04:45:08.029 --> 04:45:11.081
for designers and developers 
just like you. 

04:45:14.343 --> 04:45:16.343
So Michael shared with you how 
we do 

04:45:17.781 --> 04:45:20.260
research with our N users so we 
can really understand how to 

04:45:20.261 --> 04:45:22.261
make our components most 
effective.

04:45:27.536 --> 04:45:32.476
But you are are N YURDSs, too 
users, too. How you're using 

04:45:32.477 --> 04:45:34.477
them to make the products 
better. 

04:45:34.756 --> 04:45:37.005
What I'm going to talk about is 
the other two types of research 

04:45:37.006 --> 04:45:40.448
Elizabeth mentioned, the work 
flow research and product 

04:45:40.449 --> 04:45:44.748
research. And I'll give you 
examples of how products that 

04:45:44.749 --> 04:45:46.749
have launched here at I/O have 
been made better through our 

04:45:47.641 --> 04:45:51.301
research. 
    So let's start with work 

04:45:51.302 --> 04:45:53.302
flow research.

04:45:54.783 --> 04:45:57.028
This gives us a really big, 
broad picture for how people 

04:45:57.029 --> 04:45:59.684
creating digital tools, people 
like you, how you're doing 

04:46:03.954 --> 04:46:05.954
your work day in and day out.

04:46:07.701 --> 04:46:09.293
I'll interview designers and 
developers to work together. 

04:46:09.294 --> 04:46:10.720
I'll go to your office, I'll 
talk to you about how you're 

04:46:10.721 --> 04:46:12.737
working. 
    I want to know all of the 

04:46:12.738 --> 04:46:14.738
tools 

04:46:17.220 --> 04:46:18.442
you're using, who you're 
collaborating with and 

04:46:18.443 --> 04:46:22.120
especially anything that's a 
problem in your work flow. And 

04:46:22.121 --> 04:46:24.170
our goal with this kind of 
research is to get a big picture

04:46:24.171 --> 04:46:26.171
of the bigger 

04:46:27.632 --> 04:46:30.074
problems that affect a lot of 
people so we can prioritize 

04:46:30.075 --> 04:46:33.523
building tools that solve those 
problems for you. 

04:46:35.761 --> 04:46:37.589
So this example is from work 
flow research we did with 

04:46:37.590 --> 04:46:41.586
designers and developers that 
work together. Like I said, we 

04:46:41.587 --> 04:46:43.587
went to their offices.

04:46:44.852 --> 04:46:46.508
And one of the things we had 
them do is take us through a 

04:46:46.509 --> 04:46:50.794
recent project from beginning to
end, we had them walk us through

04:46:50.795 --> 04:46:52.029
every part of the project, who 
they worked with, what the tools

04:46:52.030 --> 04:46:55.276
they were using. And especially,
anything that was a struggle. 

04:46:55.277 --> 04:46:58.790
    So here's a couple of 
examples of how people think 

04:46:58.791 --> 04:47:03.066
about their work. So you can 
see, people look at their work 

04:47:03.067 --> 04:47:05.067
in really different ways.

04:47:07.730 --> 04:47:09.730
Whenever I do this kind of 
research, I 

04:47:11.014 --> 04:47:12.846
want my developer, designer and 
product manager colleagues 

04:47:12.847 --> 04:47:16.308
working on those products to 
come with me. Because everyone 

04:47:16.309 --> 04:47:18.552
hears different things and 
different things pop out at them

04:47:19.365 --> 04:47:21.365
during the interviews. 

04:47:22.627 --> 04:47:23.845
So we always do a debrief where 
we compare notes on what we 

04:47:23.846 --> 04:47:28.317
heard and what was interesting 
or surprising. And because this 

04:47:28.318 --> 04:47:30.318
research was really 

04:47:31.387 --> 04:47:33.618
focused on understanding the UX 
design process itself, we were 

04:47:33.619 --> 04:47:37.100
going to be doing a time line of
a typical UX design project. 

04:47:37.101 --> 04:47:41.594
    And so, I had my colleagues 
categorizing the different 

04:47:41.595 --> 04:47:43.595
phases that 

04:47:46.471 --> 04:47:48.502
they heard the people we talked 
to went through. Let me show you

04:47:48.503 --> 04:47:53.170
what this turned into. This is a
UX design work flow. It's also 

04:47:53.171 --> 04:47:55.171
known as a journey map or 
experience map.

04:47:58.842 --> 04:47:59.244
But what we ended up with was 
six phases for the design 

04:47:59.245 --> 04:48:01.245
process.

04:48:02.725 --> 04:48:04.725
Discovery, initial design, it 
rating on 

04:48:06.173 --> 04:48:08.209
the design, validating, 
beginning building and then, the

04:48:08.210 --> 04:48:10.662
final implementation. 
    And I'll explain the 

04:48:10.663 --> 04:48:13.915
structure first and then, I'll 
come around and fill in some 

04:48:13.916 --> 04:48:16.152
details. Below that in the green
to red are a 

04:48:19.233 --> 04:48:22.733
single positive and a negative 
key moment in each phase. And 

04:48:22.734 --> 04:48:24.352
those were from stories we 
literally heard from the 

04:48:24.353 --> 04:48:26.790
participants we talked to that 
were either really 

04:48:29.839 --> 04:48:31.839
meaningful or were a pattern we 
heard several people talk about.

04:48:33.736 --> 04:48:38.219
    And then, the bottom we had 
the tasks, pain points and 

04:48:38.220 --> 04:48:41.238
tools. This gave us a range of 
rich experiences that we heard 

04:48:41.239 --> 04:48:44.481
different people using. I took 
that out to simplify it to show 

04:48:44.699 --> 04:48:49.410
you. But the whole thing is a 
poster that hangs in our office.

04:48:52.274 --> 04:48:54.274
So for instance, thinking about 
the key 

04:48:55.734 --> 04:48:56.941
moments often we heard people 
get really excited when they're 

04:48:56.942 --> 04:49:01.621
starting a new project. There's 
a lot of promise and potential. 

04:49:01.622 --> 04:49:06.531
But they quickly get overwhelmed
by scope. That becomes a 

04:49:06.532 --> 04:49:07.960
negative moment. 
    And there's a lot of 

04:49:07.961 --> 04:49:12.442
interplay between designers and 
developers here. The first one 

04:49:12.443 --> 04:49:15.291
is when the initial design phase
when a designer is really 

04:49:16.740 --> 04:49:19.177
excited about an idea they have 
and they have to go to their 

04:49:19.178 --> 04:49:23.244
developer the developer says to 
them, this, we cannot build 

04:49:23.245 --> 04:49:27.933
this. Technical constraints make
this impossible. Anybody here 

04:49:27.934 --> 04:49:29.934
ever have one of those 
conversations? Okay. All right.

04:49:32.198 --> 04:49:33.446
That's good we're resonating 
with your experience, as well. 

04:49:33.447 --> 04:49:36.901
    But, of course, there's 
positive interactions between 

04:49:36.902 --> 04:49:41.185
designers and developers 
throughout this process. We 

04:49:41.186 --> 04:49:43.186
definitely have heard that 
designers 

04:49:44.865 --> 04:49:47.105
do not enjoy if making design 
specs for handing a project off 

04:49:47.106 --> 04:49:51.588
to a developer. But when that 
moment comes where they get to 

04:49:51.589 --> 04:49:53.411
hand off formally to a 
developer, that's usually a 

04:49:53.412 --> 04:49:58.900
milestone. A positive milestone 
in a project. That's positive. 

04:49:58.901 --> 04:50:00.730
And it can go south, again, 
because what happens often is 

04:50:00.731 --> 04:50:05.418
that developers come back later 
with unexpected problems due to 

04:50:05.419 --> 04:50:08.059
legacy code and the designers 
have to step back in often after

04:50:08.060 --> 04:50:10.523
they've already moved on to 
another project. 

04:50:13.788 --> 04:50:17.690
Is this resonating? Anybody have
this happen? All right. The 

04:50:17.691 --> 04:50:19.691
whole point of doing this really
deep dive into understanding the

04:50:21.787 --> 04:50:23.787
practices, again, is to surface 
those 

04:50:25.243 --> 04:50:27.069
problems that affect a lot of 
people so we can prioritize 

04:50:27.070 --> 04:50:29.328
building them. 
    And I just want to take a 

04:50:29.329 --> 04:50:31.329
minute and 

04:50:32.809 --> 04:50:34.225
define -- I mentioned design 
specs and I'll talk about it 

04:50:34.226 --> 04:50:36.262
more in a minute. But what I 
mean are the margins, 

04:50:40.137 --> 04:50:42.137
guidelines, colors, fonts and 
often even 

04:50:44.461 --> 04:50:46.292
behaviors that designers give to
developers when they're getting 

04:50:46.293 --> 04:50:48.923
ready to implement a design. 
    So another thing that came 

04:50:48.924 --> 04:50:50.924
out of 

04:50:52.390 --> 04:50:54.025
that research is pain points of 
designers and developers and 

04:50:54.026 --> 04:50:57.300
I'll go through these with you. 
    So the key pain points we 

04:50:57.301 --> 04:51:01.993
heard from designers are having 
to aggravate feedback from a lot

04:51:01.994 --> 04:51:05.266
of different stakeholders. 
Often, the feedback is living in

04:51:05.876 --> 04:51:09.929
different tools. Having to 
prototype motion but not having 

04:51:09.930 --> 04:51:12.599
time to do it. 
    Having to keep track of 

04:51:12.600 --> 04:51:15.880
different project resources 
they're going to need at 

04:51:15.881 --> 04:51:17.901
different phases of the design 
process that often are living in

04:51:18.316 --> 04:51:20.139
different places. 
    Now, remember this because 

04:51:20.140 --> 04:51:22.140
I'll show 

04:51:24.647 --> 04:51:26.647
you a solution that we came up 
with in Gallery.

04:51:28.115 --> 04:51:30.115
Creating design specs and having
to 

04:51:32.125 --> 04:51:34.627
share designs a assets and 
keeping them consistent. 

04:51:37.064 --> 04:51:39.742
Top pain points for developers 
was having to solve for edge 

04:51:39.743 --> 04:51:42.587
cases and responsiveness from a 
singular happy path that they're

04:51:42.588 --> 04:51:44.588
getting from their designer.

04:51:47.902 --> 04:51:50.545
Getting incomplete design specs 
or getting one for the wrong or 

04:51:50.546 --> 04:51:55.424
not getting them at all. I've 
heard that one a lot, as well. 

04:51:55.425 --> 04:51:57.468
When you have to create a new 
component trying to figure out 

04:51:57.469 --> 04:51:59.469
am I going to customize 
something that's existing or 

04:52:02.342 --> 04:52:04.172
build something new from 
scratch? 

04:52:04.173 --> 04:52:06.814
Giving design changes late after
you've started working, leading 

04:52:06.815 --> 04:52:09.049
to rework and finally, having a 
lack of 

04:52:12.135 --> 04:52:13.555
context of what the intent was 
with the design. Not knowing 

04:52:13.556 --> 04:52:15.556
what really matters.

04:52:17.015 --> 04:52:19.015
So you'll notice with this kind 
of list 

04:52:20.038 --> 04:52:22.038
that

04:52:23.157 --> 04:52:24.374
both designers and developers 
found design specs as a pain 

04:52:24.375 --> 04:52:28.251
point. It was this kind of 
research that let us realize 

04:52:28.252 --> 04:52:30.908
what a problem this is for both 
roles and let us prioritize 

04:52:33.964 --> 04:52:35.964
building a tool that solves this
problem.

04:52:37.230 --> 04:52:39.264
And that project as mentioned, 
is Gallery. And I'm going to 

04:52:39.265 --> 04:52:42.731
tell you more about Gallery in a
minute. But before I do, I'm 

04:52:42.732 --> 04:52:44.984
going to tell you a little bit 
about the other type of 

04:52:50.278 --> 04:52:52.720
research I mentioned, product 
research. A big bucket for 

04:52:52.721 --> 04:52:54.721
anytime we show you that we want
to get your feed back on. 

04:52:57.220 --> 04:52:59.179
It may be a really early stage 
idea that we want to validate 

04:52:59.180 --> 04:53:03.288
and make sure the concept is 
sound or maybe it's a refinement

04:53:03.289 --> 04:53:05.379
of a product we've already 
invested a lot of time in and we

04:53:05.380 --> 04:53:09.238
just want to make sure it's 
really functioning well for how 

04:53:09.239 --> 04:53:12.070
you want to use it. 
    A lot of people call this 

04:53:12.071 --> 04:53:16.782
usability. But for us, this type
of research is doing so much 

04:53:16.783 --> 04:53:20.443
more than just telling us if a 
product is usable. 

04:53:23.926 --> 04:53:25.964
So also, let me walk you through
a little bit about how I conduct

04:53:25.965 --> 04:53:29.632
research when I'm doing product 
research with designers and 

04:53:29.633 --> 04:53:31.633
developers.

04:53:33.092 --> 04:53:35.120
This is one of our research labs
on the left. Usually, I'll bring

04:53:35.121 --> 04:53:37.586
somebody into our lab, I'm 
meeting with them one-on-one.

04:53:40.827 --> 04:53:43.114
It's streaming to a room that my
designer or developer and 

04:53:43.115 --> 04:53:45.759
product manager colleagues are 
sitting in. Like the one on the 

04:53:45.760 --> 04:53:47.760
left.

04:53:49.022 --> 04:53:52.477
And I'll walk you through some 
kind of prototype or beta tool. 

04:53:52.478 --> 04:53:55.114
And getting your feedback as we 
go along. What do you like? 

04:53:55.115 --> 04:53:57.115
What's confusing?

04:53:58.577 --> 04:54:00.577
And especially, at the end, I 
want to 

04:54:03.086 --> 04:54:04.914
know, how does this fit into 
your existing work flow? Is this

04:54:04.915 --> 04:54:07.148
going to create problems? 
    And go back in, talk to my 

04:54:11.484 --> 04:54:15.284
colleagues and we figure out 
what was really interesting 

04:54:11.484 --> 04:54:14.725
here? What can we take from this
that we can use to make our 

04:54:14.726 --> 04:54:19.234
products better? So now, I've 
told you a little bit about how 

04:54:19.235 --> 04:54:21.263
this process works. Let me walk 
you through an example of 

04:54:23.906 --> 04:54:26.573
something we learned when we 
were doing research with Gallery

04:54:26.574 --> 04:54:28.574
and how that made it better for 
the final product.

04:54:31.668 --> 04:54:34.123
So has anybody seen a demo of 
Gallery in our -- okay, a couple

04:54:34.124 --> 04:54:36.124
of folks, let me walk you 
through.

04:54:38.607 --> 04:54:40.607
This is a project page in 
Gallery. 

04:54:41.854 --> 04:54:43.854
Let me get an overview, Gallery 
is 

04:54:45.880 --> 04:54:47.880
an online collaborative tool.

04:54:50.797 --> 04:54:52.797
Colleagues get feedback and it 
has a 

04:54:54.232 --> 04:54:57.026
design specs feature where they 
can get the metadata from the 

04:54:57.027 --> 04:55:01.945
sketch goes into an online way 
for developers to get that, the 

04:55:01.946 --> 04:55:04.383
code and the values. 
    And then, the developers 

04:55:04.384 --> 04:55:06.384
also have 

04:55:07.439 --> 04:55:09.049
an access to material components
in that gallery feature if 

04:55:09.050 --> 04:55:11.295
they're using the material 
components when they're 

04:55:11.498 --> 04:55:14.545
designing. And it's being demoed
over there if you want to check 

04:55:14.546 --> 04:55:16.546
it out.

04:55:18.555 --> 04:55:20.555
We're in a project call

04:55:31.075 --> 04:55:32.748
ed -- as I mentioned, we were 
solving one of the problems we 

04:55:32.749 --> 04:55:34.749
uncovered in the research with 
that one. 

04:55:35.603 --> 04:55:37.632
And then, below that, basically 
folders and people can organize 

04:55:37.633 --> 04:55:41.319
them however they want. And in 
this case, they're organized by 

04:55:44.583 --> 04:55:46.817
the device that it's been 
designed for. Let's say, you 

04:55:46.818 --> 04:55:48.634
clicked into the tablet view 
from here, you would see all of 

04:55:48.635 --> 04:55:51.910
the screens that are in that 
tablet. And if you clicked into 

04:55:51.911 --> 04:55:54.977
the first screen, then you're 
going to see that screen in more

04:55:54.978 --> 04:55:56.978
detail. 

04:55:58.435 --> 04:55:59.850
Now, at the yellow box at the 
top, you can see all of the 

04:55:59.851 --> 04:56:01.851
different things you can do from
here.

04:56:05.768 --> 04:56:07.592
You can comment, inspect, share 
it. But someone has rolled over 

04:56:07.593 --> 04:56:09.593
the type at 

04:56:12.670 --> 04:56:14.811
the top, and it's got the type 
face, weight, the color, all of 

04:56:14.812 --> 04:56:17.087
that is there for the developer 
to access. That's how it looks 

04:56:17.088 --> 04:56:19.088
now.

04:56:21.153 --> 04:56:22.794
And let me show you something we
were getting feedback on a 

04:56:22.795 --> 04:56:24.795
couple of months ago when we did
research on it. 

04:56:26.258 --> 04:56:28.705
This looks a little bit 
different. You can see, it's 

04:56:28.706 --> 04:56:30.706
basically the same thing.

04:56:32.197 --> 04:56:36.488
So in the study, what we did is 
we were talking to designers. We

04:56:36.489 --> 04:56:38.936
had them use our new material 
theme editor, which I hope 

04:56:38.937 --> 04:56:43.003
you've heard about the material 
plug-in we have. And that gives 

04:56:43.004 --> 04:56:45.240
them access to all of these 
pre-built material components 

04:56:48.092 --> 04:56:50.359
where they can customize for 
their own brand so the one in 

04:56:50.360 --> 04:56:52.360
the green bar, the 

04:56:54.062 --> 04:56:56.919
green bottom app bar had 
customized that in sketch and 

04:56:56.920 --> 04:56:58.920
changed the color and the icons 
in there. 

04:56:59.972 --> 04:57:01.604
And then, they had uploaded that
to Gallery where they were 

04:57:01.605 --> 04:57:03.605
looking at what 

04:57:04.653 --> 04:57:06.891
they would be sharing with their
developers. We were wanting to, 

04:57:06.892 --> 04:57:09.741
you know, what do you think of 
this? P ask what we heard from 

04:57:09.742 --> 04:57:13.619
them is you can see when you 
roll over that bottom app bar, 

04:57:13.620 --> 04:57:15.658
what you're getting is the link 
to the code and the specs for 

04:57:15.659 --> 04:57:20.336
that. But you're not getting any
more granular information beyond

04:57:20.337 --> 04:57:23.645
the size of that entire bar. And
what we heard designers saying 

04:57:23.646 --> 04:57:28.318
is I want to see what that shade
of green I changed it to was. 

04:57:28.319 --> 04:57:31.979
    I want to make sure it's the
right brand color and I want to 

04:57:31.980 --> 04:57:36.282
see what the icon was. I want to
make sure it's the right icon. 

04:57:36.283 --> 04:57:38.114
What we heard is they wanted a 
lot more granular data for the 

04:57:38.115 --> 04:57:40.115
material 

04:57:41.369 --> 04:57:43.602
components than we were showing 
them in Gallery. And we had it. 

04:57:43.603 --> 04:57:46.254
We didn't put it in there. So 
this was really important thing 

04:57:46.255 --> 04:57:50.333
for us to know. So this is the 
final version that's been 

04:57:50.334 --> 04:57:54.664
released. So as you can see, 
you've got that bottom app bar, 

04:57:54.665 --> 04:57:57.116
but when you roll over any 
single component inside it, you 

04:57:57.117 --> 04:57:59.117
get 

04:58:00.575 --> 04:58:02.575
that really granular data for 
that particular component.

04:58:05.661 --> 04:58:07.661
In this case, the size of that 
diamond-shaped FAB.

04:58:08.720 --> 04:58:10.951
So this is one of many examples 
of how the research has made our

04:58:10.952 --> 04:58:12.996
products launching here at I/O 
better.

04:58:16.461 --> 04:58:18.303
Another one is the material I/O 
home page. In the same research 

04:58:18.304 --> 04:58:22.595
I'm talking about, we also got 
feedback on an earlier version 

04:58:22.596 --> 04:58:24.835
of the home page design. 
    And we heard from designers 

04:58:24.836 --> 04:58:29.516
that they really like to get 
overview videos of anytime 

04:58:29.517 --> 04:58:31.334
there's a new evolution of 
something so they can get a 

04:58:31.335 --> 04:58:34.388
quick sense of what's changed. 
And we had that.

04:58:37.846 --> 04:58:39.875
Turns out, bottom of a really 
long page and nobody found it 

04:58:39.876 --> 04:58:41.876
before they were 

04:58:43.500 --> 04:58:46.031
able to click on the video.

04:58:49.081 --> 04:58:51.926
What we did, the website, that 
video is really prominent. So we

04:58:51.927 --> 04:58:53.927
made it really easy for you all 

04:58:55.194 --> 04:58:57.194
to get a quick overview of 
what's new in material. 

04:58:58.852 --> 04:59:00.852
So what I just gone through with
you 

04:59:02.102 --> 04:59:04.337
is giving you examples of how we
use work flow research to 

04:59:04.338 --> 04:59:07.401
identify the big problems that 
we want to put our time into 

04:59:07.402 --> 04:59:09.402
solving.

04:59:10.451 --> 04:59:12.892
And how product research 
improves the product no matter 

04:59:12.893 --> 04:59:14.893
what stage it's in.

04:59:17.322 --> 04:59:19.660
And how we use products that 
releasing at I/O, how we use 

04:59:19.661 --> 04:59:22.532
research to make them better. 
    And if you want to check out

04:59:24.562 --> 04:59:28.219
Gallery, go to material.
io/tools. I'm going to hand it 

04:59:28.220 --> 04:59:29.439
back to Elizabeth now. 
   &gt;&gt; ELIZABETH CHURCHILL: Thank

04:59:29.440 --> 04:59:32.718
you so much, Sara. Thank you, 
everybody.

04:59:36.987 --> 04:59:39.012
So just a little bit of a 
wrap-up, uh a reminder of the 

04:59:39.013 --> 04:59:42.274
invitation to visit us in Dome 
F. And so, what we've shown you 

04:59:42.275 --> 04:59:44.935
today is just a flavor of the 
ways we're using 

04:59:48.959 --> 04:59:51.444
traditional methods for research
as well as new Meads to 

04:59:54.925 --> 04:59:56.925
understand how the components 
work for 

04:59:57.984 --> 05:00:00.243
everyday users in terms of 
beauty and esthetics, in terms 

05:00:00.244 --> 05:00:02.244
of usability, in 

05:00:03.945 --> 05:00:05.945
terms of sort of usefulness but 
also accessibility. 

05:00:08.032 --> 05:00:09.863
And Sara has shared how 
important it is for you to send 

05:00:09.864 --> 05:00:12.312
us feedback on our products 
because we do want to work with 

05:00:15.582 --> 05:00:17.411
you to make sure that your lives
are easier in this pretty 

05:00:17.412 --> 05:00:19.412
difficult work 

05:00:20.462 --> 05:00:22.490
flow process from idea to 
product that really works. 

05:00:23.921 --> 05:00:25.921
Another thing I want to let you 
know 

05:00:27.623 --> 05:00:30.675
is that we know that many of you
don't have research teams. We're

05:00:30.676 --> 05:00:32.676
lucky enough to have one.

05:00:34.155 --> 05:00:35.979
And so, we think of ourselves as
the research system that aligns 

05:00:35.980 --> 05:00:38.635
with the design system in the 
engineering system.

05:00:41.696 --> 05:00:44.125
And we have committed to writing
up some of the methods that 

05:00:44.126 --> 05:00:46.572
we're using and inventing. And 
we'll be sharing that along with

05:00:48.232 --> 05:00:50.232
the other guidance and spec.

05:00:52.293 --> 05:00:54.293
And sharing how these methods 
can help 

05:00:56.438 --> 05:00:58.890
you understand how our tools 
work on your context. As Michael

05:00:58.891 --> 05:01:00.891
said very clearly, your context 
might be slightly different from

05:01:01.333 --> 05:01:04.815
our own. So we will be sharing 
more of that with you over the 

05:01:04.816 --> 05:01:06.816
next year. 

05:01:09.491 --> 05:01:12.334
And so, finally, I hope you take
away how we're bringing together

05:01:12.335 --> 05:01:14.335
design 

05:01:15.596 --> 05:01:17.254
and development and engineering 
and research and how we're 

05:01:17.255 --> 05:01:19.255
really treating 

05:01:20.543 --> 05:01:21.960
this as a conversation and a 
conversation that needs to be a 

05:01:21.961 --> 05:01:26.228
rich one. And so with that said,
thank you, again, for your 

05:01:26.229 --> 05:01:28.229
attention.

05:01:29.275 --> 05:01:31.275
Please come and join us in Dome 
F.

05:01:33.355 --> 05:01:36.212
Tent F, I should say, design 
accessibility. And, again, thank

05:01:36.213 --> 05:01:37.836
you for your attention. Thank 
you for coming. 

06:11:43.251 --> 06:11:45.251
&gt;&gt;

06:12:22.513 --> 06:12:25.638
An overview of cloud IoT core. 
   &gt;&gt;. 

06:12:28.091 --> 06:12:28.281
&gt;&gt; 

06:19:20.178 --> 06:19:22.269
Thank you.  

06:20:37.019 --> 06:20:37.227
An overview of cloud IoT 

06:23:20.949 --> 06:23:22.949
   &gt;&gt; Hi friends.

06:23:25.224 --> 06:23:27.224
Thanks for on this last day 
coming to 

06:23:29.096 --> 06:23:31.096
our talk, an overview of IoT 
cloud core.

06:23:32.619 --> 06:23:34.662
We are working on engineers.  We
are going to bring Gus on a 

06:23:34.663 --> 06:23:39.357
little bit but if I want to have
little chat.  First thing I need

06:23:39.358 --> 06:23:44.051
to know, who are you?  Who out 
there are engineers?  Are the 

06:23:44.052 --> 06:23:46.084
people that are doing the work, 
developers?  Nice.  Most of you.

06:23:50.194 --> 06:23:52.067
Do we have any bis managers, 
decision makers?  Got a couple 

06:23:52.068 --> 06:23:54.509
of here.  I'm not going to call 
actually call on any of you.

06:23:57.764 --> 06:24:00.657
We call that theater of cruelty.
Do we have any data scientists 

06:24:00.658 --> 06:24:05.556
in the crowd?  Good good.  Just 
to make sure we are on the same 

06:24:07.590 --> 06:24:09.590
page who knows what IoT is?

06:24:12.434 --> 06:24:15.556
Mast Most of you.  What about 
IoT core?

06:24:20.066 --> 06:24:22.066
Just to make me feel better, do 
you 

06:24:23.523 --> 06:24:27.385
know what Google Cloud Platform?
Just raise your hand.  For those

06:24:27.386 --> 06:24:30.237
that haven't heard of it yet, 
IoT the Internet of Things, I 

06:24:33.522 --> 06:24:37.004
actually voted for 5TI things 
that talk to the Internet.  I 

06:24:37.005 --> 06:24:40.706
thought it would have been more 
indic kative of what it is.  It 

06:24:40.707 --> 06:24:44.573
is a computer connected to WiFi.
IoT device.  Smartphone IoT 

06:24:44.574 --> 06:24:46.574
device.

06:24:48.290 --> 06:24:50.290
Smart meters connected to your 
house.

06:24:51.962 --> 06:24:53.997
Raspberry pies microcontrollers.
All of these are IoT device.

06:24:57.910 --> 06:24:59.910
In 2015 business insider along 
with 

06:25:03.857 --> 06:25:04.876
Gartner did a study that by 
2020, 30 billion connected 

06:25:04.877 --> 06:25:09.578
devices.  That's the phones and 
the computers you can see are a 

06:25:09.579 --> 06:25:12.660
tiny slice of what we are 
talking about here.  So why 

06:25:12.661 --> 06:25:14.661
aren't we there yet?

06:25:16.320 --> 06:25:17.773
Why isn't my world connected and
smart?  They have take time and 

06:25:17.774 --> 06:25:22.113
money.  So really understand 
what the hold up is I want to do

06:25:22.114 --> 06:25:26.407
a little brief introduction to 
the world of electronics.  Does 

06:25:26.408 --> 06:25:28.253
anyone know if I say the word 
constrained device, does anyone 

06:25:28.254 --> 06:25:31.768
know what that is?  A 
constrained device?  A couple of

06:25:31.769 --> 06:25:34.207
people are nodding.  A 
constrained device is a tiny 

06:25:34.402 --> 06:25:36.876
computer.  It has got memory and
processor. 

06:25:42.094 --> 06:25:44.094
analog.

06:25:45.373 --> 06:25:47.237
Because of is everything is on 
that single chip because it is 

06:25:47.238 --> 06:25:49.238
memory, 

06:25:51.446 --> 06:25:53.387
processing, storage.  Are all 
severely limited.  This is the 

06:25:53.388 --> 06:25:55.264
class of computer we are talking
about.  When we talk about 30 

06:25:55.265 --> 06:25:58.571
billion connected devices.  Who 
remembers floppy disks?

06:26:01.860 --> 06:26:04.104
I am not talking about the 3 and
a half inch one.  Five and a 

06:26:04.105 --> 06:26:08.233
quarter inch.  The really floppy
ones.  I know some of us are old

06:26:08.234 --> 06:26:10.470
enough that remember, the dinner
size plate ones.

06:26:14.968 --> 06:26:16.968
The five and a quarter inch 
floppies 

06:26:24.720 --> 06:26:26.720
they held 360K of storage ofe 
age.

06:26:28.742 --> 06:26:30.742
These microcontrollers hold less
than this.

06:26:32.023 --> 06:26:34.023
Dwebt have that luxury with 
microcontrollers.

06:26:35.290 --> 06:26:37.290
We can't swap them in and out.  
We need something.

06:26:41.257 --> 06:26:43.257
A more power computer.

06:26:46.053 --> 06:26:48.053
So since I keep bringing it up, 
what is IoT core?

06:26:50.534 --> 06:26:52.534
It is a 100% managed service.

06:26:54.189 --> 06:26:56.187
This means that you don't have 
to stand up anything.  You don't

06:26:56.188 --> 06:26:57.201
have to put a service up in a 
VM.  We handle all of that for 

06:26:57.202 --> 06:27:00.926
you in Google.  There is no need
for auto scaling.  All of that 

06:27:00.927 --> 06:27:02.927
is done by the cloud for you.

06:27:05.198 --> 06:27:07.470
IoT core provides a global end 
point no matter where you 

06:27:07.471 --> 06:27:10.117
devices are in the world.  
Latency is nearest data center 

06:27:10.118 --> 06:27:12.118
and back.  That's it.  

06:27:16.694 --> 06:27:18.694
IoT core has two main pieces.

06:27:21.815 --> 06:27:26.285
For IoT core the organization, 
inside you create registries.  

06:27:26.286 --> 06:27:29.150
You can create some o logical 
organization to them.  And then 

06:27:29.151 --> 06:27:31.151
devices yourselves.

06:27:32.424 --> 06:27:34.424
The messages from your devices 
will 

06:27:42.684 --> 06:27:44.684
using HDPS or MTP protocol 
shutter um in to the cloud.

06:27:46.479 --> 06:27:47.919
Messages from IoT core, Pub/Subs
are event stream manager and 

06:27:47.920 --> 06:27:52.216
from there it is the gateway.  
IoT core giveses you access to 

06:27:52.217 --> 06:27:54.217
the rest of Google Cloud's 
platform.

06:27:58.522 --> 06:28:00.522
So wrap your head around where 
we are 

06:28:01.795 --> 06:28:03.624
now, I want to go back to to 
your little history lesson and 

06:28:03.625 --> 06:28:05.625
talk about how electronics 
evolved.

06:28:08.937 --> 06:28:10.937
Your household

06:28:12.269 --> 06:28:16.133
stuff, they were all made up of 
electronic components.  Things 

06:28:16.134 --> 06:28:19.596
that would respond to electric 
signal strength alone.  The more

06:28:19.597 --> 06:28:21.597
powerful the signal the more 

06:28:23.049 --> 06:28:25.049
it would happen in electrical 
components.

06:28:26.489 --> 06:28:28.489
The

06:28:30.472 --> 06:28:32.501
magtron the microwave, decrease 
signal strength and it reduces 

06:28:32.502 --> 06:28:36.998
the temperature.  Because the --
of the physical relationship of 

06:28:36.999 --> 06:28:39.878
these components to each other, 
as the electrical signal come in

06:28:43.722 --> 06:28:47.880
each compon component would 
actuate in.  Because of the 

06:28:47.881 --> 06:28:50.310
relationship to them change was 
very difficult.  If you wanted 

06:28:50.311 --> 06:28:52.766
to change functionality of your 
electrical circuit you had to 

06:28:54.225 --> 06:28:57.879
make physical changes to it.  
You had to change your bomb.  

06:28:57.880 --> 06:28:59.880
The minute you add something to 
an 

06:29:03.725 --> 06:29:05.725
electrical circuit, your 
resistance goes haywire.

06:29:11.235 --> 06:29:12.194
If you wanted to mass produce 
your circuit, this is a problem.

06:29:12.195 --> 06:29:16.195
Once you created tooling for 
manufacturing lib and circuit, 

06:29:12.195 --> 06:29:14.195
the mass 

06:29:17.202 --> 06:29:17.294
producing the same template is 
nice and easy.  If you 

06:29:17.295 --> 06:29:20.191
introduced change you have to 
retool.  It is very expensive to

06:29:20.192 --> 06:29:22.228
make any kind of change.  Some 
of these kinds of circuits we 

06:29:24.665 --> 06:29:27.323
call them analog circuits still 
exist today.  But modern 

06:29:27.324 --> 06:29:29.324
electronics are a little bit 
different.

06:29:31.749 --> 06:29:33.749
Modern

06:29:36.728 --> 06:29:38.352
electronics are still compose ed
things that work with electrical

06:29:38.353 --> 06:29:40.586
signals.  Where signal strength 
was what changed 

06:29:43.650 --> 06:29:46.544
things now we have things called
digital protocols.  It will go 

06:29:46.545 --> 06:29:50.007
on and off rapidly.  A digital 
protocol that is understood by 

06:29:50.008 --> 06:29:52.867
another piece in the circuit.  
This means that we can center 

06:29:52.868 --> 06:29:56.952
our electronics around this 
constrained device, this 

06:29:56.953 --> 06:29:59.183
microcontroller which is very 
good at reading signals but 

06:29:59.184 --> 06:30:04.467
analog and digital and speaking 
in this digital protocol.  The 

06:30:04.468 --> 06:30:05.487
chip itself can now create 
functional change in your 

06:30:05.488 --> 06:30:09.561
circuit without having to 
physically change anything 

06:30:09.562 --> 06:30:12.384
around it.  It is important 
because they are inexpensive.

06:30:15.464 --> 06:30:17.109
Until reltively recently these 
microcontrollers were pretty 

06:30:17.110 --> 06:30:19.110
expensive.

06:30:21.005 --> 06:30:23.005
I can go out and buy a 
microcontroller 

06:30:24.894 --> 06:30:26.932
with WiFi and Bluetooth for less
than $5.  It is very 

06:30:26.933 --> 06:30:28.933
inexpensive.

06:30:30.402 --> 06:30:32.658
The trade off is that 
microcontrollers are still 

06:30:32.659 --> 06:30:34.687
relatively con strained.  They 
don't have a lot of memory, a 

06:30:34.688 --> 06:30:39.177
lot of storage.  So they need 
something else to help them 

06:30:39.178 --> 06:30:41.419
achieve the capabilities that 
they are not able to accomplish 

06:30:41.420 --> 06:30:46.313
on their own.  So this gives you
kind of a back drop for why we 

06:30:46.314 --> 06:30:48.351
are at it this tipping point 
with electronics where cost and 

06:30:49.771 --> 06:30:53.451
complexity have arrived where we
can do things at scale.  Being 

06:30:53.452 --> 06:30:55.452
able to create these cheap 

06:30:56.781 --> 06:30:58.781
complex circuits with 
microcontrollers 

06:31:01.289 --> 06:31:03.963
allow us to create cheap or 
inexpensive complex devices that

06:31:03.964 --> 06:31:08.247
are going to connect our world. 
What is a smart device?  At the 

06:31:08.248 --> 06:31:09.870
simplest a smart device is 
something that can complete an 

06:31:09.871 --> 06:31:14.586
objective.  That can do a task 
without human intervention.  I 

06:31:14.587 --> 06:31:17.428
don't need to do anything for 
it.  Modern electronics and 

06:31:17.429 --> 06:31:19.429
availability of 

06:31:21.713 --> 06:31:23.713
these microcontrollers makes 
intelligent 

06:31:24.759 --> 06:31:27.816
control of these devices 
economically feasible.  I am 

06:31:27.817 --> 06:31:30.565
really harping on economically 
feasible and inexpensive, I am.

06:31:37.004 --> 06:31:38.860
You a few years ago might not 
have been possible because of 

06:31:38.861 --> 06:31:42.726
cost and complexity is 
achievable now.  We have the 

06:31:42.727 --> 06:31:46.178
tools to create these ecosystems
of smart devices.  So smart 

06:31:46.179 --> 06:31:48.833
devices so we can understand 
them there is three basic 

06:31:48.834 --> 06:31:52.918
approaches to a smart device.  
First there is 100% on device.  

06:31:52.919 --> 06:31:56.998
Everything is contained and done
within your single device.  

06:31:56.999 --> 06:31:58.627
Something like Google home where
I can use my Voice as input to a

06:31:58.628 --> 06:32:00.628
device.

06:32:04.351 --> 06:32:08.209
It uses speech-to-text and uses 
natural language processing.  

06:32:08.210 --> 06:32:10.255
And run some kind of task on 
device and is it can accomplish 

06:32:10.256 --> 06:32:13.516
it all without me having to do 
anything else.  I have a spoken 

06:32:13.517 --> 06:32:15.990
word and something happens.  It 
might use the Internet to call 

06:32:15.991 --> 06:32:19.250
out to do something else but 
that's part of the task that's 

06:32:19.251 --> 06:32:21.713
already accomplishing.  The 
second, there is edge or border 

06:32:21.714 --> 06:32:25.374
routing.  Sometimes we call it 
the radio protocol approach.

06:32:28.428 --> 06:32:30.428
For example, nest has released 
something called openthread.

06:32:33.111 --> 06:32:36.579
It allows your device to call 
out to another neshby device.  

06:32:36.580 --> 06:32:39.058
So say you have got a device 
that can do everything except 

06:32:39.059 --> 06:32:42.343
Internet but whatever the task 
is it needs to be able to call 

06:32:42.344 --> 06:32:44.344
out to the Internet.  With 
openthread it can reach out to 

06:32:46.209 --> 06:32:48.209
another device that's nearby and
connect 

06:32:49.901 --> 06:32:52.131
it and borrow its Internet 
connection in order to 

06:32:52.132 --> 06:32:54.132
accomplish its task.  It is 
using these other devices to 

06:32:56.198 --> 06:32:59.063
finish off what it needs to be 
done.  And lastly a device can 

06:32:59.064 --> 06:33:02.737
delegate all of its control to 
something else.  A lot of the 

06:33:02.738 --> 06:33:07.637
time shoos microcontrollers do 
that.  They will become a very 

06:33:07.638 --> 06:33:12.567
dumb but very fast gatherer of 
information, gatherer of data 

06:33:12.568 --> 06:33:14.395
and then hand off all of that 
I/O to something else.  A 

06:33:14.396 --> 06:33:16.396
computer nearby.

06:33:19.308 --> 06:33:22.795
Fermata that's the perfect 
example of what this is.  You 

06:33:22.796 --> 06:33:25.458
can delegate all the information
that you gather on one device to

06:33:25.459 --> 06:33:28.559
a computer.  So something else 
nearby.  So what if I told you 

06:33:28.560 --> 06:33:32.455
that the computer that we are 
connecting to that is doing all 

06:33:32.456 --> 06:33:34.899
this power for us didn't have to
be anywhere near the devices and

06:33:36.521 --> 06:33:39.364
that's where we are -- that's 
where we are back to IoT core.  

06:33:39.365 --> 06:33:41.365
You can start to think about 
that.

06:33:45.320 --> 06:33:46.550
Like the concept of Fermata IoT 
core connects your device to the

06:33:46.551 --> 06:33:48.551
cloud.

06:33:51.040 --> 06:33:54.118
It expands the capabilities of 
this little device.  It gives 

06:33:54.119 --> 06:33:56.972
you new capabilities without 
adding any complexity.  You 

06:33:56.973 --> 06:34:01.284
don't need more local hardware. 
You don't need anything local.  

06:34:01.285 --> 06:34:03.285
All you need to do is talk to 
the cloud.

06:34:05.425 --> 06:34:07.474
So all of this so far, history 
and electronics is to hammer 

06:34:07.475 --> 06:34:09.475
this point home 

06:34:12.906 --> 06:34:15.829
where we are in a world where 
kre ated creating device that 

06:34:15.830 --> 06:34:18.060
talk to the Internet.  I have 
touched on why the cloud is 

06:34:21.548 --> 06:34:24.890
integral to IoT.  I want to show
you a couple of things to make 

06:34:24.891 --> 06:34:30.024
sure you understand.  This graph
is all of the oil and gas fields

06:34:30.025 --> 06:34:33.743
in the Gulf of Mexico.  A little
over 1300 of them.  Each of 

06:34:33.744 --> 06:34:36.588
these gas fields could have 
potentially thousands of sensors

06:34:36.589 --> 06:34:41.356
all streaming data to keep our 
math similar tell. ple.  Say it 

06:34:41.357 --> 06:34:44.650
is just a thousand.  Each of 
these sensors is only streaming 

06:34:44.651 --> 06:34:46.651
100 bytes a second.  Nothing.  
100 bytes a second.

06:34:48.965 --> 06:34:50.965
Even if that's true that's 137 
megabytes a second.

06:34:53.244 --> 06:34:55.244
Just over eight gigabytes a 
minute.

06:34:56.514 --> 06:34:58.789
11 and a half tera bytes a day. 
You could manage that if you 

06:34:58.790 --> 06:35:00.825
want.  There a reason that the 
cloud was created.

06:35:04.482 --> 06:35:06.319
It offloads all of the 
infrastructure.  You don't have 

06:35:06.320 --> 06:35:08.320
to worry about backups.

06:35:11.452 --> 06:35:12.681
Don't have to worry about IT 
peep toople to run your 

06:35:12.682 --> 06:35:14.682
machines.  I want to talk about 
security.

06:35:18.580 --> 06:35:20.580
Some of you may have heard about
it.

06:35:22.652 --> 06:35:24.652
A couple of years ago there was 
a Botnet attack.

06:35:29.862 --> 06:35:31.862
A bunch of routers were ataked 
and 

06:35:34.783 --> 06:35:37.017
took down huge swaths of the 
Internet and a temperature 

06:35:37.018 --> 06:35:39.891
sensor in a fish tank.  A 
temperature sensor in a fish 

06:35:39.892 --> 06:35:41.892
tank in 

06:35:43.371 --> 06:35:46.220
a casino was compromised.  Pull 
out all of the personal 

06:35:48.083 --> 06:35:49.722
information of the casino's high
rolors that didn't happen to be 

06:35:49.723 --> 06:35:55.430
secured.  So security is 
massively important.  If you are

06:35:55.431 --> 06:35:57.431
doing IoT you need to think 
about security.

06:35:59.319 --> 06:36:00.939
IoT core registers all of your 
devices and does all your 

06:36:00.940 --> 06:36:05.013
encrypted communication through 
TLS.1 or later to ensure that 

06:36:05.014 --> 06:36:07.061
your devices are secure when 
they are talking to the cloud.

06:36:10.518 --> 06:36:12.518
So we understand why IoT core is
awesome but what else.

06:36:15.418 --> 06:36:19.083
IoT core is this gateway in to 
the Google Cloud platform.  What

06:36:19.084 --> 06:36:21.084
does the platform have for IoT?

06:36:24.618 --> 06:36:27.262
This is a small sampling of what
the Google Cloud platform has 

06:36:27.263 --> 06:36:29.263
for you.

06:36:31.002 --> 06:36:32.846
Just keep scrolling and keep 
scrolling.  There is enough 

06:36:32.847 --> 06:36:36.722
products on that we don't bhoe 
what all the products do.  They 

06:36:36.723 --> 06:36:39.573
are all specialized.  A ton of 
products that will fit any need 

06:36:39.574 --> 06:36:42.211
that you want.  So first we have
got our devices.

06:36:45.497 --> 06:36:47.497
Bringing their data up in to 
GCP.

06:36:48.969 --> 06:36:50.969
These payloads the messages and 

06:36:52.028 --> 06:36:54.677
brokered as events in to Cloud 
Pub/Sub are event stream 

06:36:54.678 --> 06:36:58.562
manager.  From there once it is 
in Pub/Sub we have some products

06:36:58.563 --> 06:37:00.563
that can respond to 

06:37:03.154 --> 06:37:05.154
our inn incoming messages.

06:37:06.668 --> 06:37:09.512
They exist in the serverless 
space that you can call with an 

06:37:09.513 --> 06:37:11.513
end point or 

06:37:13.803 --> 06:37:15.803
they can respond to events 
within GCP.

06:37:19.717 --> 06:37:19.748
In our case the Pub/Sub message 
coming in will trigger a cloud 

06:37:19.749 --> 06:37:21.754
function to run on T. The it.

06:37:25.734 --> 06:37:30.000
DataFlow is our managed service 
to handle transforming incoming 

06:37:25.734 --> 06:37:27.734
streams.

06:37:30.085 --> 06:37:31.708
So again like cloud IoT core it 
will scale without having you to

06:37:31.709 --> 06:37:34.364
do anything.  It will scale to 
handle it.

06:37:37.440 --> 06:37:39.481
It be used to do things like 
filter incoming data if there is

06:37:39.482 --> 06:37:43.954
only some data that you want to 
make in to final storage or 

06:37:43.955 --> 06:37:46.394
massage data in to a specific 
format if you need it to be 

06:37:46.395 --> 06:37:50.865
processed in specific way.  It 
acts as pipeline for data.  

06:37:50.866 --> 06:37:52.942
Cloud Pub/Sub is temporary.  If 
you don't do something with them

06:37:53.958 --> 06:37:58.251
they go away.  So a product like
DataFlow can shuttle your data 

06:37:58.252 --> 06:38:00.252
in to the other products which 

06:38:01.956 --> 06:38:03.956
brings us to our storage and 
Analytics section.

06:38:05.235 --> 06:38:07.083
There is way more than are shown
here.  These three are a small 

06:38:07.084 --> 06:38:09.084
sampling.  We have a big table.

06:38:14.192 --> 06:38:14.269
Big table is our know SQL 
database option.  Again managed 

06:38:14.270 --> 06:38:17.602
service.  It will scale with 
however much data you put in it.

06:38:22.743 --> 06:38:24.743
BigQuery is our enterprise level
data warehousing.

06:38:27.221 --> 06:38:31.523
You can query your pe that bytes
data with SQL statements.  Don't

06:38:31.524 --> 06:38:33.524
have to learn a new system.

06:38:35.181 --> 06:38:37.203
They can use SQL to find 
insights in data.  Not learning 

06:38:37.204 --> 06:38:39.204
a new system and finally we have
got machine learning.

06:38:43.142 --> 06:38:45.186
TensorFlow is the open source 
software allows you to train 

06:38:45.187 --> 06:38:47.653
your models and cloud machine 
learning engine is hosted 

06:38:48.258 --> 06:38:50.258
TensorFlow.

06:38:51.337 --> 06:38:53.776
Harness all power of Google's 
backbone to train and run on 

06:38:53.777 --> 06:38:57.678
your models fast ar and 
efficiently.  We have tools that

06:38:57.679 --> 06:38:59.679
can visualize your data.

06:39:01.722 --> 06:39:03.722
We have cloud

06:39:06.752 --> 06:39:10.703
data lab and we have got out of 
box data studio.  However you 

06:39:10.704 --> 06:39:12.704
want to visualize it.

06:39:14.470 --> 06:39:17.110
So for IoTed IoT would all of 
these together you can perform 

06:39:17.111 --> 06:39:19.111
device management and monitor 
health.

06:39:22.010 --> 06:39:24.045
You can and lice truly absurd 
amount of data and you can 

06:39:24.046 --> 06:39:29.628
perform things like predictive 
maintenance in manufacture can 

06:39:29.629 --> 06:39:31.629
and utilities using tools like 
machine learning.

06:39:33.310 --> 06:39:35.752
Cloud IoT core provides that 
gateway, it provides the device 

06:39:35.753 --> 06:39:39.624
management and connectivity for 
all of your devices in to the 

06:39:39.625 --> 06:39:44.155
rest of Google Cloud platform.  
It has been only a year.  Last 

06:39:44.156 --> 06:39:46.402
year I/O is when we announced 
cloud IoT core.  So I want to 

06:39:46.403 --> 06:39:50.930
take a sec just to highlight 
what we have done since then.  

06:39:50.931 --> 06:39:53.614
First when we announced that 
beta a year ago it could only 

06:39:53.615 --> 06:39:57.519
talk MQTT.  If you didn't have a
device that could do MQTT you 

06:39:57.520 --> 06:40:02.437
are out of luck.  We added https
since then.  A broader range of 

06:40:02.438 --> 06:40:07.323
devices can connect to IoT core 
and have their data managed.  A 

06:40:07.324 --> 06:40:09.366
year ago when we launched each 
registry, those buckets of 

06:40:09.367 --> 06:40:14.678
devices mapped one to one to our
-- to Pub/Sub.  So any device 

06:40:14.679 --> 06:40:16.709
data that was coming in to your 
registry would only go in to a 

06:40:19.178 --> 06:40:21.208
single bucket of Pub/Sub and we 
have added the ability to map 

06:40:21.209 --> 06:40:26.532
multiple Pub/Sub topics.  So you
can shard your data that way and

06:40:26.533 --> 06:40:31.634
organize it.  We have added 
Stackdriver logging so that you 

06:40:31.635 --> 06:40:34.498
can monitor your health through 
Stackdriver which is -- that's a

06:40:34.499 --> 06:40:37.984
logging and monitoring tool that
we have got I forgot to mention 

06:40:37.985 --> 06:40:39.985
it before.

06:40:42.115 --> 06:40:43.731
And brand new and I don't think 
that anyone has announced it.  

06:40:43.732 --> 06:40:47.069
Android things.  I am sure you 
have all heard a lot about 

06:40:47.070 --> 06:40:49.070
Android things across this 
conference.

06:40:50.351 --> 06:40:52.214
Android things has created a 
plug-in that releasing next week

06:40:52.215 --> 06:40:54.215
that will allow 

06:40:56.635 --> 06:40:58.301
you to connect Android devices 
to core.  Alls of cool stuff you

06:40:58.302 --> 06:41:02.634
can create using it now let that
kind of percolate in the back of

06:41:02.635 --> 06:41:04.706
your mind what more can you do 
with it.  If it is connected to 

06:41:04.707 --> 06:41:06.707
the cloud what else can you do.

06:41:10.609 --> 06:41:12.449
What global reach can you 
accomplish.  Now that I have 

06:41:12.450 --> 06:41:14.450
talked your ear off 

06:41:15.960 --> 06:41:18.473
oim I'm going to bring Gus back 
up and he is going to show you 

06:41:18.474 --> 06:41:23.974
in practice some of the stuff 
that I have been talking about. 

06:41:23.975 --> 06:41:29.138
   &gt;&gt; GABE WEISS:  Let's have a 
wonderful round of applause for 

06:41:29.139 --> 06:41:31.139
Gabe.  
   (Applause.) 

06:41:34.345 --> 06:41:38.423
&gt;&gt; GABE WEISS:  I will be the 
Yen to his yang.  So this is 

06:41:38.424 --> 06:41:40.470
actually the -- this is the 
third time that I have bifren --

06:41:40.471 --> 06:41:45.201
that I am showing the nuts and 
bolts of how cloud IoT core 

06:41:45.202 --> 06:41:48.115
works and kind of this -- this 
is I/O right now and I remember 

06:41:48.116 --> 06:41:51.018
a year ago the cloud IoT core 
team came in 

06:41:54.735 --> 06:41:55.757
front of you all and 
demonstrated the product for the

06:41:55.758 --> 06:41:57.758
first time.

06:41:59.438 --> 06:42:01.901
And when they did it, I have no 
idea how they were able to get 

06:42:01.902 --> 06:42:07.055
such a robust and beautiful demo
at that point in time.  Because 

06:42:07.056 --> 06:42:11.347
there was a lot of pieces that 
the experience was a cliff.  The

06:42:11.348 --> 06:42:13.348
first time that I show -- the 

06:42:15.848 --> 06:42:17.467
first time I showed this demo 
the -- it blew up in my face and

06:42:17.468 --> 06:42:20.970
that was for couple of reasons. 
One of them was we didn't have 

06:42:20.971 --> 06:42:22.971
the -- 

06:42:24.468 --> 06:42:26.468
we didn't have the cloud console
features for IoT core.

06:42:28.912 --> 06:42:30.912
There was no, I have

06:42:35.070 --> 06:42:37.070
visual way of adding devices.

06:42:38.785 --> 06:42:40.785
So I had to write sample that 
would 

06:42:42.075 --> 06:42:44.075
make API calls with the device 
I.D. and project I.D.

06:42:45.723 --> 06:42:47.723
all of these values that are 
really easy to fat finger.

06:42:52.706 --> 06:42:54.706
So within general availability, 
the 

06:42:55.963 --> 06:42:58.074
Google Cloud SDK or G cloud for 
those -- for those who don't 

06:42:58.075 --> 06:43:00.075
know Google Cloud is 

06:43:02.550 --> 06:43:04.391
command line utility that's writ
and allows to do all the things 

06:43:04.392 --> 06:43:08.453
in cloud programmatically from 
the command line and it works --

06:43:08.454 --> 06:43:10.454
it works really well from cloud 
resources and if you go and 

06:43:13.991 --> 06:43:15.991
do the Codelab I actually how 
you do is 

06:43:18.299 --> 06:43:20.299
a lot of cloud resource manage 
ment using the G cloud SDK.

06:43:24.465 --> 06:43:26.465
I am going to show you how to do
the 

06:43:30.583 --> 06:43:32.583
nuts and bolts of cloud IT core.

06:43:33.848 --> 06:43:35.895
In some sort of sample app.  I 
will unlock my machine.

06:43:38.975 --> 06:43:42.678
And we'll switch to computer.  
Could everyone see that?  Good? 

06:43:42.679 --> 06:43:44.679
Bigger, smaller?  Awesome.

06:43:47.425 --> 06:43:49.425
So if you remember, the entry 
point in 

06:43:51.089 --> 06:43:53.089
to cloud IoT core is Google 
Cloud Pub/Sub.

06:43:56.410 --> 06:43:58.642
And so before we can receive 
messages and transmit -- before 

06:43:58.643 --> 06:44:00.643
we can transmit messages and 
then process those messages 

06:44:03.554 --> 06:44:05.554
from Pub/Sub we have to create a
Google Cloud Pub/Sub topic.

06:44:08.427 --> 06:44:10.427
So I'm going to create a Google 
Cloud 

06:44:12.250 --> 06:44:14.250
Pub/Sub topic

06:44:17.798 --> 06:44:19.798
.  I'm super nervous.

06:44:22.024 --> 06:44:24.024
So I type really bad.  It is 
easier when they talk.

06:44:27.478 --> 06:44:29.478
So I decided in G Cloud Pub/Sub 
topics 

06:44:31.138 --> 06:44:33.138
create IoT 2018 top -- for topic
and so 

06:44:36.627 --> 06:44:38.627
now I to G Cloud Pub/Sub 
subscriptions.

06:44:42.401 --> 06:44:44.401
So the subscriptions will, of 
course,

06:44:48.169 --> 06:44:50.169
my -- Pub/Sub and I forget the 
-- all right.  

06:44:53.540 --> 06:44:54.975
So when you create the 
subscription you have to 

06:44:54.976 --> 06:44:56.976
associate that subscription with
a topic.

06:45:03.349 --> 06:45:05.783
And then I have to add create, 
and if you see me struggling up 

06:45:05.784 --> 06:45:07.784
here know how 

06:45:10.904 --> 06:45:15.282
to fix what I am doing ing don't
hesitate to yell out.  Topic.  

06:45:15.283 --> 06:45:17.283
All right.

06:45:19.786 --> 06:45:21.786
So now I have created a Google 
Cloud 

06:45:22.929 --> 06:45:24.929
Pub/Sub subscription that is 
associated 

06:45:25.986 --> 06:45:27.986
with the Google Cloud Pub/Sub 
topic.

06:45:29.069 --> 06:45:31.332
Whenever I publish messages in 
to that topic they get queued up

06:45:31.333 --> 06:45:33.333
in to the subscription.

06:45:35.201 --> 06:45:37.201
And I can pull them from the sub
description.

06:45:38.260 --> 06:45:40.260
I am going to create a Google 
Cloud 

06:45:42.293 --> 06:45:44.293
IoT core registry

06:45:46.641 --> 06:45:48.497
.  And I'm not the best typor 
and talker.  And so associated 

06:45:48.498 --> 06:45:50.498
with this registry is going to 
be an event notification 

06:45:50.777 --> 06:45:52.777
configuration.

06:45:54.252 --> 06:45:56.252
And so what that just means is 
when 

06:45:57.536 --> 06:46:00.382
messages are sent -- telemetry 
which could be something like 

06:46:00.383 --> 06:46:03.258
sensor data from a device.  This
is the topic Windows 

06:46:04.076 --> 06:46:09.021
notifications can go to.  And so
you can also set this to so that

06:46:09.022 --> 06:46:10.446
you can have notifications going
to other types of things and we 

06:46:10.447 --> 06:46:12.447
-- the 

06:46:13.747 --> 06:46:15.747
future may offer other ways of 
connecting with cloud.

06:46:18.261 --> 06:46:20.886
So now I created a registry.  
And after -- now that -- so the 

06:46:23.962 --> 06:46:25.962
registry will contain devices 
that 

06:46:27.495 --> 06:46:29.997
represent the identity of these 
-- of your smart devices or IoT 

06:46:29.998 --> 06:46:33.701
-- Internet connected devices 
and so now I'm ready to add a 

06:46:33.702 --> 06:46:35.702
device.

06:46:36.954 --> 06:46:38.954
So the device connects using an 

06:46:40.008 --> 06:46:42.663
asynchronous encrypted 
credential.  So you give us your

06:46:42.664 --> 06:46:48.187
public key and then you encrypt 
your data with your private key 

06:46:48.188 --> 06:46:50.188
when you authorize and you 

06:46:51.693 --> 06:46:53.693
get JSON web token.  So what 
this is going to do is invoke 

06:46:56.837 --> 06:47:01.361
a couple of -- I can never type 
those open commands correctly.  

06:47:01.362 --> 06:47:04.251
All this is doing is calling 
this open SSL command which will

06:47:04.252 --> 06:47:06.252
generate a 

06:47:07.520 --> 06:47:09.520
public/private key pair with job
compatible algorithms.

06:47:12.182 --> 06:47:14.182
Now that I have my device keys I
can 

06:47:18.307 --> 06:47:20.307
-- I can register a new device

06:47:22.286 --> 06:47:24.332
and I'm going to call E2E 
because that's the device that I

06:47:24.333 --> 06:47:28.224
recommend using for the end to 
end example.  And if you want to

06:47:28.225 --> 06:47:32.766
follow on your own through a 
step by step example.  You can 

06:47:32.767 --> 06:47:36.475
find this in the documentation 
at cloud.Google.com/IoT.

06:47:40.790 --> 06:47:42.790
When I create this device, I am 
going 

06:47:44.952 --> 06:47:47.814
to use the -- I am going to use 
the EC key that was created with

06:47:47.815 --> 06:47:49.815
open SSL then 

06:47:52.694 --> 06:47:54.966
I get at the ES256 string 
representing the type, the 

06:47:54.967 --> 06:47:56.967
sliding type that's 

06:47:58.014 --> 06:48:00.062
correctly named for JWT.  And 
after this comes back, then we 

06:48:00.063 --> 06:48:02.063
are 

06:48:03.726 --> 06:48:06.570
ready to connect to Google Cloud
IoT core.  And so this is going 

06:48:06.571 --> 06:48:08.571
to use -- for 

06:48:09.813 --> 06:48:11.908
this example I am going to use 
the HTTB example which is the 

06:48:11.909 --> 06:48:13.951
most basic way of connecting to 
Google Cloud IoT core.

06:48:17.631 --> 06:48:20.080
So this is just some sample.  
And so there is the -- there is 

06:48:20.081 --> 06:48:23.150
the project I.D. that cloud 
resource associated with the 

06:48:26.370 --> 06:48:28.376
device registry and the Pub/Sub 
topic and so forth.  And then 

06:48:28.377 --> 06:48:32.227
the registry I.D. which is the 
container for these devices and 

06:48:32.228 --> 06:48:36.103
the devices I.D. and everything 
else that you saw me put in in 

06:48:36.104 --> 06:48:38.565
the priest message.  And now 
Docker is going to ask me to 

06:48:38.761 --> 06:48:41.231
update.  I will do that later.  
    Yeah.  Okay.

06:48:44.547 --> 06:48:46.175
So all right so when the -- 
here's a job that it is 

06:48:46.176 --> 06:48:49.645
calculated from the device and 
because it is a brand-new device

06:48:49.646 --> 06:48:51.683
you will see that the 
configuration is empty and also 

06:48:51.684 --> 06:48:55.571
-- yeah.  That's nice.  Nice.  
But here -- so here is the 

06:48:56.811 --> 06:48:58.811
configuration for the device and
you can 

06:48:59.895 --> 06:49:01.895
see that I have published a 
couple of 

06:49:02.967 --> 06:49:04.395
telemetry messages that are 
events representing something 

06:49:04.396 --> 06:49:06.396
that this device is transmitting
to the cloud.

06:49:11.028 --> 06:49:13.028
And so now if I use G cloud 
again, 

06:49:14.042 --> 06:49:16.042
Pub/Sub

06:49:20.720 --> 06:49:22.720
and I could do subscriptions 
whole, all right.

06:49:24.796 --> 06:49:26.796
Forget the name again.

06:49:28.068 --> 06:49:30.720
Subscription is 2018 sub.  And 
when I do this, I should see the

06:49:33.777 --> 06:49:35.820
messages, I should see those 
telemetry messages that were 

06:49:35.821 --> 06:49:40.751
transmitted by the virtual 
device to the cloud.  This is 

06:49:40.752 --> 06:49:44.486
always a scarey part.  There it 
is.  So sorry for my -- for how 

06:49:44.487 --> 06:49:46.927
this looks kind of funky in 
here.

06:49:50.167 --> 06:49:51.844
You can see attributes for the 
metadata and anything else that 

06:49:51.845 --> 06:49:56.107
you want to push in to your 
topic inside of this data field.

06:49:56.315 --> 06:49:58.378
All right.  So if you have seen 
any of the talks 

06:50:01.728 --> 06:50:03.728
before on cloud IoT core you see
me do this a lot of different 

06:50:03.729 --> 06:50:05.729
ways of it is kind of boring.

06:50:07.427 --> 06:50:09.921
But these devices -- but this is
it.  You have seen the entire 

06:50:09.922 --> 06:50:11.922
capabilities of the cloud.

06:50:13.683 --> 06:50:15.744
One those messages are in 
Pub/Sub you can process those 

06:50:15.745 --> 06:50:17.745
with all the cloud resources 
that Google provides.

06:50:20.818 --> 06:50:22.818
This could mean processing image
data 

06:50:24.534 --> 06:50:26.534
or reaking to some sort of 
condition 

06:50:27.995 --> 06:50:29.995
inside of that image or 
warehousing 

06:50:32.285 --> 06:50:35.874
massive data and able to do 
Analytics in realtime with it.  

06:50:35.875 --> 06:50:38.730
We are going to do something 
different today.  I want to show

06:50:38.731 --> 06:50:40.731
you this working on a 

06:50:45.719 --> 06:50:48.380
hardware and so I have brought 
with me an Arduino device and 

06:50:48.381 --> 06:50:50.381
this has sort of been a 20% 
project of me.

06:50:53.098 --> 06:50:55.098
It is an experimental library.

06:50:58.207 --> 06:51:00.873
Arduino is a physical computing 
platform and it allows you to do

06:51:00.874 --> 06:51:02.874
things 

06:51:06.920 --> 06:51:08.920
like Blink lik lights.

06:51:12.482 --> 06:51:14.482
Modern electronics can easily be

06:51:15.734 --> 06:51:19.854
controlled and actuated from the
-- from our Ardino devices.  A 

06:51:19.855 --> 06:51:21.114
so I'm going to do something -- 
the virtual devices are really 

06:51:21.115 --> 06:51:25.435
good for things like load 
testing and estimating and like 

06:51:25.436 --> 06:51:27.436
learning about -- learning about
the product.

06:51:29.714 --> 06:51:32.568
And then the our experimental 
library with Ardino which I 

06:51:32.569 --> 06:51:34.569
cannot recommend that you go to 
production yet.

06:51:37.944 --> 06:51:39.569
As -- it is on my github 
account.  And it is also 

06:51:39.570 --> 06:51:41.570
borrowed.

06:51:43.044 --> 06:51:45.508
So thank you Arvao for your 
contributions.  And anyone who 

06:51:45.509 --> 06:51:47.509
is interested in 

06:51:51.117 --> 06:51:53.367
contributing to our Ardino 
project is welcome to.  I am 

06:51:53.368 --> 06:51:55.411
going to go from useful device 
to a physical real world device 

06:51:55.412 --> 06:51:57.412
that we can 

06:52:00.304 --> 06:52:01.544
use for -- that we can then use 
for prototyping and other things

06:52:01.545 --> 06:52:03.562
to get an idea of like when you 
have your actual 

06:52:07.499 --> 06:52:09.499
device built on, you know, one 
of the 

06:52:11.013 --> 06:52:13.881
more robust solutions that our 
partners offer.  So in order to 

06:52:13.882 --> 06:52:15.882
work with Arduino you 

06:52:16.980 --> 06:52:19.004
can install the library using 
the library manager and after 

06:52:19.005 --> 06:52:22.128
that library is installed inside
of the examples will appear.

06:52:27.214 --> 06:52:29.214
Google Cloud IoT core jot and 
inside 

06:52:33.710 --> 06:52:35.710
of here each of these -- is a 
sketch, a

06:52:36.875 --> 06:52:38.875
n arduino sketch is a way of 
specified a 

06:52:40.746 --> 06:52:42.746
source file and open inside of 
the I.D.

06:52:44.760 --> 06:52:46.760
Inside of the sketch is config 
and 

06:52:48.822 --> 06:52:50.487
then inside of here are all of 
your configuration that we just 

06:52:50.488 --> 06:52:52.488
did in the 

06:52:54.350 --> 06:52:55.185
virtual device except as 
(inaudible) with this physical 

06:52:55.186 --> 06:52:57.186
device.  

06:53:00.054 --> 06:53:02.054
And I'm just going to connect to
a 

06:53:03.066 --> 06:53:05.066
WiFi

06:53:10.004 --> 06:53:12.004
.  And everything else

06:53:13.509 --> 06:53:15.509
.  And this is the same 
configuration 

06:53:17.740 --> 06:53:19.740
that I just used from before

06:53:24.160 --> 06:53:27.012
.  Oh,.  This.  This.

06:53:30.018 --> 06:53:36.015
Sorry.  The project I.D.  Oh, 
yes yes.  So the project I.D. is

06:53:36.016 --> 06:53:38.016
-- thank you.  Thank you.  Yes.

06:53:42.119 --> 06:53:44.372
This is going to save you a lot 
of frustration in a minute.  The

06:53:44.373 --> 06:53:46.201
cloud resource is associated 
with -- with all the things that

06:53:46.202 --> 06:53:48.690
you created to top it and then I
am going to do a 

06:53:51.779 --> 06:53:53.809
transform on the private key 
which I am going to use for 

06:53:53.810 --> 06:53:55.810
creating the connection 

06:53:57.091 --> 06:53:58.926
credential and this is open SSL 
command that I can never 

06:53:58.927 --> 06:54:03.801
remember.  So now I have taken 
that private key and turned it 

06:54:03.802 --> 06:54:06.265
in to a string that looks a lot 
like this string and then going 

06:54:10.288 --> 06:54:12.288
replace the string with that 
string

06:54:17.189 --> 06:54:23.578
.  And very soon now when I 
click the run, oh.  Thank you.  

06:54:23.579 --> 06:54:26.013
We are doing a good job, guys.  
Okay.

06:54:29.099 --> 06:54:31.099
And I make sure I have the right
port.  Okay.

06:54:33.447 --> 06:54:35.510
And this is -- we recently -- I 
added this port for the boards.

06:54:40.414 --> 06:54:41.854
It is the Arduino style boards. 
They have a feel to them that's 

06:54:41.855 --> 06:54:43.855
kind of nice.

06:54:45.463 --> 06:54:48.286
So now that I have -- now this 
device has connected -- let's 

06:54:48.287 --> 06:54:50.287
see with my logs here.

06:54:52.752 --> 06:54:54.752
Oh, no

06:54:56.805 --> 06:54:58.805
.  Something is wrong

06:55:00.913 --> 06:55:02.913
.  So then --

06:55:04.416 --> 06:55:06.416
let's see

06:55:09.438 --> 06:55:12.141
.  Private key is wrong.  Did I 
do the public one?  Thank you.  

06:55:12.142 --> 06:55:14.142
You are the best.  

06:55:20.549 --> 06:55:22.549
And this should be E

06:55:24.437 --> 06:55:26.437
C -- try this again

06:55:28.360 --> 06:55:30.360
.  Place it.

06:55:32.781 --> 06:55:34.781
Oh, I need to save the sketch

06:55:41.713 --> 06:55:46.186
.  Sorry.  Try this again.  Let 
me -- sorry, say that again.  

06:55:46.187 --> 06:55:50.038
   &gt;&gt; (Off microphone). 
   &gt;&gt; GABE WEISS:  Oh, yeah.  

06:55:50.039 --> 06:55:52.039
No.

06:55:54.185 --> 06:55:56.185
So Arduino strings do support 
this.  Working as expected.

06:56:00.041 --> 06:56:02.041
So let's see here though

06:56:03.373 --> 06:56:08.278
.  All right.  Sometimes the 
time server doesn't return the 

06:56:08.279 --> 06:56:10.279
right time and that can get 

06:56:11.747 --> 06:56:14.632
-- oops.  And so if this -- 
there we go.  So now it is 

06:56:14.633 --> 06:56:18.315
working.  Yes.  So this is the 
experimental library everyone.

06:56:21.417 --> 06:56:23.417
And yes, so heed my advice.  
   (Applause.) 

06:56:24.737 --> 06:56:27.592
&gt;&gt; GABE WEISS:  Yes,.  And 
that's why -- shouldn't use in 

06:56:28.643 --> 06:56:32.928
production yet.  But maybe some 
day.  So now -- so -- and this 

06:56:32.929 --> 06:56:36.407
sample with the configuration 
message is set to something 

06:56:36.408 --> 06:56:38.704
other than the value of 1, only 
one light will be on on the 

06:56:38.705 --> 06:56:43.389
board and if I set the 
configuration message to 1, so 

06:56:43.390 --> 06:56:45.390
the configuration for this 

06:56:46.447 --> 06:56:48.447
device is set to 1 instead of 0 
or 

06:56:49.718 --> 06:56:51.718
hello, then that -- then two 
lights on 

06:56:53.333 --> 06:56:57.485
the board should turn on.  And 
let's see.  We'll set it to 1.

06:57:01.628 --> 06:57:03.463
And then everyone watch on that 
screen.  The light that comes on

06:57:03.464 --> 06:57:05.517
is on the left side of the board
I think.

06:57:08.593 --> 06:57:11.243
And so we just updated the 
device configuration and then 

06:57:11.244 --> 06:57:14.750
through my blazing fast Internet
connection there it is, yeah.  

06:57:14.751 --> 06:57:17.228
All right.  
   (Applause.) 

06:57:19.477 --> 06:57:21.477
&gt;&gt; GABE WEISS:  Okay.

06:57:22.723 --> 06:57:24.723
And so this is nice.  Devices 
are fun.

06:57:29.190 --> 06:57:31.857
And being able to prototype 
stuff with Arduno is fantastic. 

06:57:31.858 --> 06:57:33.858
You are able to do stuff quickly
and 

06:57:35.737 --> 06:57:38.414
you are able to in just a short 
period of time and inexpensively

06:57:38.415 --> 06:57:40.415
have an understanding of whether
or not 

06:57:43.079 --> 06:57:45.079
something will actually work

06:57:49.993 --> 06:57:51.993
.  

06:58:10.358 --> 06:58:12.407
   &gt;&gt; GUS CLASS:  My mic is on. 
Do I need to get close to you?

06:58:17.589 --> 06:58:19.589
Can we use -- can we use this 
mic?

06:58:21.526 --> 06:58:23.526
Attached.

06:58:26.412 --> 06:58:28.555
It is going to end poorly.  Do I
need to get really close to you 

06:58:28.556 --> 06:58:32.415
Gus?  
   &gt;&gt; GUS CLASS:  I will speak 

06:58:32.416 --> 06:58:35.909
to Gabe and Gabe will speak to 
you.  

06:58:38.757 --> 06:58:41.638
&gt;&gt; GABE WEISS:  It is going to 
be a great game of telephone. 

06:58:41.639 --> 06:58:43.639
   &gt;&gt; GUS CLASS:  Three weeks 
ago Gus 

06:58:46.345 --> 06:58:47.777
needed to do a demo.  
   &gt;&gt; GABE WEISS:  Needed to do 

06:58:47.778 --> 06:58:50.483
a demo.  To this conference.  
Yeah.  

06:58:52.523 --> 06:58:53.540
&gt;&gt; GUS CLASS:  And I had 
nothing.  

06:58:53.541 --> 06:58:56.402
&gt;&gt; GABE WEISS:  He had nothing. 
So he went to the sound guy who 

06:58:56.403 --> 06:59:01.313
is sgeting him a new battery.  
He had some lights.  Some 

06:59:01.314 --> 06:59:03.314
project he was working with LE 
deshgss. 

06:59:06.783 --> 06:59:08.783
&gt;&gt; GUS CLASS:  And we are back

06:59:12.438 --> 06:59:14.489
.  I thought you would be much 
more E excited if I show you 

06:59:14.490 --> 06:59:19.658
robots.  It is a toy like this. 
I want to show you under here.  

06:59:19.659 --> 06:59:21.520
So this toy and this little toy 
has -- remember Gabe was talking

06:59:21.521 --> 06:59:24.168
about digital systems on and 
offs, well, this toy has 

06:59:25.817 --> 06:59:27.817
something -- I saw this on this 
toy.

06:59:31.150 --> 06:59:33.208
It has an infrared receiver and 
it has this little remote 

06:59:33.209 --> 06:59:35.209
associated with it 

06:59:36.269 --> 06:59:37.707
which I have smudged off 
anything that will hint at what 

06:59:37.708 --> 06:59:39.708
it actually is.

06:59:44.058 --> 06:59:48.375
But this little toy responds to 
a Blinking light on here.  And I

06:59:48.376 --> 06:59:50.441
just showed you a Blinking 
light.  What if instead of that 

06:59:50.442 --> 06:59:52.442
little light 

06:59:54.951 --> 06:59:56.951
these signals, these 
configuration 

06:59:58.297 --> 07:00:00.967
messages that are transmitted to
these devices are interpreted in

07:00:00.968 --> 07:00:02.841
to the motion commands for this 
little toy and I thought that 

07:00:02.842 --> 07:00:07.340
was cool.  I started 
prototyping.  And on the boards 

07:00:07.341 --> 07:00:10.598
very similar to that other one I
showed you and I came up with 

07:00:10.599 --> 07:00:12.599
this.

07:00:14.626 --> 07:00:16.626
My friend

07:00:21.121 --> 07:00:23.797
Addison added some imperative to
this little guy.  When the 

07:00:23.798 --> 07:00:27.994
device comes online it should 
wiggle a little bit.  And that 

07:00:27.995 --> 07:00:31.860
way I will know it is connected 
to the WiFi.  So there a little 

07:00:31.861 --> 07:00:33.861
Blinking light that 

07:00:35.746 --> 07:00:37.746
indicates the various stages of 
the boot.

07:00:40.662 --> 07:00:42.662
And I'm going to start a flask 
app.  There it is.

07:00:47.345 --> 07:00:49.500
So when it just -- it nodded its
little head.  What was going on 

07:00:49.501 --> 07:00:51.501
it is now connected 

07:00:53.724 --> 07:00:56.668
to -- it is now connected to 
WiFi.  It is now connected to 

07:00:56.669 --> 07:00:58.669
WiFi.

07:00:59.932 --> 07:01:02.598
And -- this is not the device.  
And now I can go in to my device

07:01:04.438 --> 07:01:05.892
registry here again and I can 
send configuration messages and 

07:01:05.893 --> 07:01:10.788
then control this.  And what's 
interesting is that no longer 

07:01:10.789 --> 07:01:14.089
something that's like a device 
that's locally here.  This 

07:01:14.090 --> 07:01:16.374
device could be anywhere.  And 
it doesn't really -- and like 

07:01:16.375 --> 07:01:18.375
the end could be millions of 
these devices 

07:01:21.896 --> 07:01:23.896
and you can do things like 
coordinate across those devices.

07:01:25.408 --> 07:01:27.079
Let's send a configuration 
message to the device that will 

07:01:27.080 --> 07:01:30.350
cause the device to turn its 
head.  When the device responds 

07:01:30.351 --> 07:01:32.993
to the command it should just 
nudge a little bit there.  There

07:01:32.994 --> 07:01:35.043
it is.  And so what you will 
also notice on 

07:01:38.225 --> 07:01:40.212
the front of this device I have 
added a sonar sensor and that 

07:01:40.213 --> 07:01:42.213
sonar sensor will 

07:01:43.954 --> 07:01:46.610
pretty accurately measure 
distance up to about 30 meters 

07:01:46.611 --> 07:01:49.874
away.  I wanted to do something 
that shows getting data from 

07:01:49.875 --> 07:01:52.344
your devices, putting that data 
in to the cloud and then 

07:01:52.957 --> 07:01:55.401
processing that data.  So we 
very similar to what we do in 

07:01:56.844 --> 07:01:58.844
the Codelab.

07:02:04.187 --> 07:02:06.238
And so I created that little 
flask app and then this little 

07:02:06.239 --> 07:02:10.765
flask app has this UI that only 
developer could love.  But when 

07:02:10.766 --> 07:02:12.766
I click that button it sends 

07:02:15.797 --> 07:02:17.797
a configuration message to this 
device

07:02:19.879 --> 07:02:21.879
if I'm lucky

07:02:24.688 --> 07:02:26.688
.  Let's see.

07:02:27.724 --> 07:02:28.946
And that configuration message 
will trigger this device to 

07:02:28.947 --> 07:02:32.680
start moving in this sort of 
sonar pattern and I mean these 

07:02:32.681 --> 07:02:34.927
are toys.  So I mean it is not 
going to turn 

07:02:38.415 --> 07:02:39.639
exactly the same amount of 
degrees every time but it is 

07:02:39.640 --> 07:02:41.640
close enough to we can 

07:02:43.350 --> 07:02:45.350
get a general idea for the 
surroundings around this.

07:02:47.004 --> 07:02:49.680
And then on the blazing fast 
Internet to my computer, it 

07:02:49.681 --> 07:02:51.681
should render -- 

07:02:52.734 --> 07:02:56.771
that's nice.  Still good.  Still
good.  So then we render -- it 

07:02:56.772 --> 07:02:58.772
is all right.  You can clap.

07:03:00.943 --> 07:03:01.761
So then we render, so a graph 
kind of surroundings of this 

07:03:01.762 --> 07:03:03.762
device.

07:03:05.060 --> 07:03:06.699
And so adding -- so adding the 
Internet capabilities to this 

07:03:06.700 --> 07:03:09.626
toy was as easy as just adding a
hat on top of it 

07:03:14.110 --> 07:03:16.110
and also the -- because of the 
low 

07:03:17.462 --> 07:03:19.462
requirements for the hardware 
for cloud 

07:03:21.164 --> 07:03:22.407
IoT core I am able to build 
these hats an at a cost of maybe

07:03:22.408 --> 07:03:26.930
$5.  You can imagine in your 
factory or your store or in your

07:03:26.931 --> 07:03:28.931
office or where -- 

07:03:30.818 --> 07:03:32.818
wherever you have these modern 
electronic systems that you can 

07:03:33.679 --> 07:03:35.690
communicate with with this 
Internet connected devices then 

07:03:35.691 --> 07:03:37.691
you can add 

07:03:39.364 --> 07:03:42.230
Internet cap inlts to those 
devices.  Because they are so 

07:03:42.231 --> 07:03:44.682
inexpensive it is possible to 
produce a large number of 

07:03:48.137 --> 07:03:50.583
these devices in a relatively 
short period of time and then 

07:03:50.584 --> 07:03:52.584
kind of have some fun with them.

07:03:56.217 --> 07:03:58.217
So after -- some time after this

07:04:00.569 --> 07:04:02.615
conference I am going to try to 
open source this software.  You 

07:04:02.616 --> 07:04:07.101
can check it out.  And for now 
I'm going to do the thing that 

07:04:07.102 --> 07:04:08.750
everyone wants me to do whenever
I show them the robots and that 

07:04:08.751 --> 07:04:14.129
is make them move as a swarm 
Army.  Okay.

07:04:19.210 --> 07:04:21.671
And it is at times like this 
that I really appreciate how 

07:04:21.672 --> 07:04:24.378
little data the cloud IoT core 
product sips because I am 

07:04:26.464 --> 07:04:28.464
totally not using my phone for 
connecting these devices.  

07:04:29.747 --> 07:04:31.747
&gt;&gt; GABE WEISS:  Totally is.  
   &gt;&gt; GUS CLASS:  Yes.

07:04:34.189 --> 07:04:37.353
All right.  
   &gt;&gt; GABE WEISS:  We should 

07:04:37.354 --> 07:04:42.660
have a bunch of them online. 
   &gt;&gt; GUS CLASS:  There we go.  

07:04:42.661 --> 07:04:45.330
Okay.  And it is just about time
for them to 

07:04:48.330 --> 07:04:50.330
march

07:04:52.925 --> 07:04:54.925
.  All right.

07:04:56.747 --> 07:05:02.982
And we go back to.  Thank you 
Gabe for wrangling all of these 

07:05:02.983 --> 07:05:04.983
robots.

07:05:05.991 --> 07:05:12.837
All right.  Uh-oh.  Look out.  
Go robots.  Go.  

07:05:14.502 --> 07:05:15.943
&gt;&gt; GABE WEISS:  WiFi. 
   &gt;&gt; GUS CLASS:  It is probably

07:05:15.944 --> 07:05:19.271
the WiFi.  But I mean -- 
   &gt;&gt; GABE WEISS:  They are 

07:05:19.272 --> 07:05:23.149
Blinking really pretty.  
   &gt;&gt; GUS CLASS:  They are 

07:05:23.150 --> 07:05:25.150
Blinking really pretty.

07:05:27.825 --> 07:05:30.109
I feel pret pretty good about 
that.  There they go.  Thank 

07:05:30.110 --> 07:05:32.110
you.  
   (Applause.

07:05:33.113 --> 07:05:36.654
) 
   &gt;&gt; GABE WEISS:  We have a 

07:05:36.655 --> 07:05:39.517
jumper.  
   &gt;&gt; GUS CLASS:  All right.  

07:05:39.518 --> 07:05:41.518
They have already become 
attention.

07:05:43.791 --> 07:05:45.791
This one is trying to break 
free.

07:05:46.802 --> 07:05:48.802
All right

07:05:50.151 --> 07:05:52.151
.  Yeah,.  Yes.

07:05:53.607 --> 07:05:55.607
I also wanted to do this just to
make Gabe happy.

07:05:59.393 --> 07:06:02.481
Let s go back to the slides and 
we will wrap up.  Okay.

07:06:06.463 --> 07:06:08.463
So going back to -- so going 
back to 

07:06:10.716 --> 07:06:12.733
other approaches to -- to adding
smart and intelligent cap 

07:06:12.734 --> 07:06:15.647
abilities to your devices.  We 
would be -- I want to again say 

07:06:17.535 --> 07:06:18.551
there is other ways of doing 
this than just complete 

07:06:18.552 --> 07:06:20.552
Delegation to the cloud.

07:06:22.004 --> 07:06:24.446
You can use edge border routing 
to extend the capabilities of 

07:06:24.447 --> 07:06:27.703
nearby devices to other devices.
You can use ondevice smarts with

07:06:29.332 --> 07:06:31.809
things like Android things.  If 
you have all the capabilities 

07:06:35.490 --> 07:06:37.562
throughout the cloud or some cap
abilities shared with the cloud 

07:06:37.563 --> 07:06:42.727
Android things is a great way to
do these things.  As Gabe 

07:06:42.728 --> 07:06:45.551
mentioned at the very beginning 
we have strak driver logging and

07:06:45.552 --> 07:06:47.230
Stackdriver logging for some 
people can get them a lot of 

07:06:47.231 --> 07:06:49.231
information about 

07:06:50.950 --> 07:06:52.414
things like security audits and 
other -- like combined with 

07:06:52.415 --> 07:06:55.084
metadata of devices may be 
enough for a lot of what 

07:06:55.085 --> 07:06:57.085
people's IoT needs are.

07:07:01.998 --> 07:07:03.998
And because we went a little bit
over 

07:07:05.826 --> 07:07:07.084
I will try to wrap up quickly 
and I will let Gabe close us 

07:07:07.085 --> 07:07:09.363
out.  
   &gt;&gt; GABE WEISS:  We want to 

07:07:09.364 --> 07:07:11.364
hear from you.

07:07:14.019 --> 07:07:16.019
Go here and enter in our talk, 
the 

07:07:17.026 --> 07:07:18.354
cloud IoT overview.  Thank you 
for coming.  

07:07:18.355 --> 07:07:20.355
(Applause.

07:07:21.362 --> 07:07:23.118
) 

07:07:39.562 --> 07:07:41.562
   &gt;&gt; Thank you for joining this
session.

07:07:45.471 --> 07:07:47.471
Grand ambassadors are assist 
with 

07:07:48.960 --> 07:07:50.960
dregting you through the 
designate #d exits.

07:07:52.015 --> 07:07:53.496
If you have reg fered for the 
next session in this room we ask

07:07:53.497 --> 07:07:56.340
that you please clear the room 
and return via the registration 

07:07:56.341 --> 07:07:58.341
line outside.  Thank you.

07:08:49.722 --> 07:08:53.455
irecting you through the 
designated exits.  If you have 

07:08:49.722 --> 07:08:53.788
registered for the next session 
in this room we ask that you 

07:08:49.722 --> 07:08:53.588
please clear the room and return
via the registration line 

07:08:49.722 --> 07:08:51.188
outside.  Thank you.  

07:08:58.011 --> 07:09:00.011
Add Firebase to your 
cross-platform 

07:09:02.877 --> 07:09:04.877
React/Native over or Flutter

07:16:05.210 --> 07:16:05.611
r Flutter app 

07:17:01.262 --> 07:17:03.262
You

07:21:24.184 --> 07:21:26.184
&gt;&gt;

07:23:22.737 --> 07:23:24.737
Hi everyone.

07:23:27.425 --> 07:23:30.082
I hope you have enjoyed the past
three days and are ready for run

07:23:30.083 --> 07:23:32.083
last talk.  My name is Kat.

07:23:35.989 --> 07:23:37.857
I'm software engineer on the 
Firebase team. 

07:23:37.858 --> 07:23:39.893
&gt;&gt; KIANA MCNELLIS:  And I am 
Kiana.  

07:23:41.320 --> 07:23:43.155
&gt;&gt; KAT FANG:  We never have 
enough time and we are looking 

07:23:43.156 --> 07:23:45.156
for new tools to help us build 
faster.

07:23:48.194 --> 07:23:50.194
We are going to ape

07:23:51.930 --> 07:23:53.150
apps that we have built.  
   &gt;&gt; KIANA MCNELLIS:  Over the 

07:23:53.151 --> 07:23:58.492
past couple of weeks I have been
building this app.  Where you 

07:23:58.493 --> 07:24:00.546
have a different category each 
time and it gives you a couple 

07:24:00.547 --> 07:24:05.620
of options.  So for this one up 
here on the screen we have tech 

07:24:05.621 --> 07:24:07.656
gadgets.  Maybe we le get an 
option between a 

07:24:11.136 --> 07:24:13.790
phone and laptop that take a 
picture and this was written on 

07:24:13.791 --> 07:24:15.791
Flutter which is 

07:24:17.463 --> 07:24:19.547
cross platform framework that 
uses dart and then compiles down

07:24:19.548 --> 07:24:21.548
to native interfaces.

07:24:24.663 --> 07:24:27.134
So we can still get featured on 
iOS or Android app stores. 

07:24:29.578 --> 07:24:31.578
&gt;&gt; KAT FANG:  Since I come from 
a web 

07:24:32.861 --> 07:24:34.861
background I have built the same
app using React/Native.

07:24:38.614 --> 07:24:40.863
Instead of writing in dart I can
use JavaScript.  There are a lot

07:24:40.864 --> 07:24:44.333
of different cross platform 
apps.  You might have heard -- 

07:24:44.334 --> 07:24:46.334
cross platform frameworks.

07:24:49.775 --> 07:24:52.894
You might have heard of an 
ionic.  All of these allow you 

07:24:52.895 --> 07:24:57.031
to develop in one code base but 
target multi mel platform the 

07:24:57.032 --> 07:24:58.257
and we can choose one which we 
are most familiar with the 

07:24:58.258 --> 07:25:02.555
language and the tooling around 
it.  So long as we don't need 

07:25:02.556 --> 07:25:04.556
down to the 

07:25:07.593 --> 07:25:11.904
metal performance this can gave 
us save us lots of time.  Let's 

07:25:11.905 --> 07:25:13.905
trick out a demo of the app we 
have built.  

07:25:17.680 --> 07:25:20.520
So this is a Flutter app that 
Kiana has been building.  We 

07:25:20.521 --> 07:25:22.521
have this nice tutorial that 
tells 

07:25:23.571 --> 07:25:25.571
us we will be taking picture and
along 

07:25:26.841 --> 07:25:28.669
the way we will get some 
trophies.  Here is our progress 

07:25:28.670 --> 07:25:35.195
screen.  And let's go ahead and 
check out the next level.  Here 

07:25:35.196 --> 07:25:38.242
we will need to upload a picture
of a hat.  Nice hat.

07:25:41.598 --> 07:25:43.430
And this goes to server verifies
its actually hat and tells our 

07:25:43.431 --> 07:25:45.431
app that we can continue.

07:25:47.124 --> 07:25:47.929
And here we have won or first 
trophy.  

07:25:47.930 --> 07:25:49.930
Awesome.

07:25:52.347 --> 07:25:54.031
So let's go back to our slides. 
   &gt;&gt; KIANA MCNELLIS:  So I 

07:25:54.032 --> 07:25:56.032
think we 

07:25:57.490 --> 07:25:59.490
built a pretty nice, app.  This 
is our user base right now.

07:26:02.425 --> 07:26:04.049
Me, you and couple of frinds 
from our office.  How request we

07:26:04.050 --> 07:26:07.102
make our user base look like 
this.  With users from all over 

07:26:07.103 --> 07:26:09.103
the world 

07:26:10.396 --> 07:26:13.057
engaged in actively using.  
Unfortunately right now our user

07:26:13.058 --> 07:26:17.177
base is more looking like this. 
The people who we have got ton 

07:26:17.178 --> 07:26:19.211
use it don't have a great 
experience and they 

07:26:22.682 --> 07:26:24.711
are not even getting to the 
second level.  So how do we 

07:26:24.712 --> 07:26:26.712
increase our user engagement?

07:26:28.630 --> 07:26:29.847
We have tried adding some adds 
and I have done some sharing 

07:26:29.848 --> 07:26:34.752
with friends but what's next. 
   &gt;&gt; KAT FANG:  This is where 

07:26:34.753 --> 07:26:39.769
Firebase can help us.  It is 
cross platform.  So it is a good

07:26:39.770 --> 07:26:41.770
fit.

07:26:43.788 --> 07:26:45.788
Flutter react native.

07:26:49.379 --> 07:26:50.585
Effective did Firebase provides 
tools and services that our apps

07:26:50.586 --> 07:26:56.298
can connect to.  Giving us the 
power we would normally get.  To

07:26:56.299 --> 07:26:58.299
do this we have used 
integrations that already exist.

07:26:59.776 --> 07:27:01.776
To integrate Firebase with 
Flutter we 

07:27:04.457 --> 07:27:06.457
are using the Flutterfire plug 
in and we 

07:27:10.189 --> 07:27:12.189
use the react native Firebase 
module.

07:27:14.200 --> 07:27:16.208
Which can help us understand our
users, discover issues and tweak

07:27:16.209 --> 07:27:20.270
it so that our users will love 
our app.  So let' goes back to 

07:27:20.271 --> 07:27:23.664
the issue that Kiana mentioned. 
We have lots of people giving 

07:27:23.665 --> 07:27:26.924
up, not a whole lot of usage.  
People are leaving us back 

07:27:26.925 --> 07:27:28.925
reviews.  It is not great.

07:27:31.849 --> 07:27:34.082
It turns out 50% of all issues 
that people leave bad reviews 

07:27:34.083 --> 07:27:36.737
for are due to things like the 
app crashing or hanging, 

07:27:40.603 --> 07:27:43.248
due to network issues, or heavy 
resource usage.  These are all 

07:27:43.249 --> 07:27:48.576
errors that we as developers can
fix and should fix.  When I see 

07:27:48.577 --> 07:27:52.659
it in my own app locally I can 
debug it easily.  Even if I know

07:27:52.660 --> 07:27:56.763
these issues exist in the wild, 
sometimes it can be hard to find

07:27:56.764 --> 07:27:58.764
them because I can't reproduce 
them locally.

07:28:05.156 --> 07:28:07.156
Foo Firebase allows us to add 
observibility.

07:28:09.995 --> 07:28:12.633
It gives us me metrics such as 
refr knew.  And versions of app 

07:28:12.634 --> 07:28:14.672
are being used by people but to 
gain specific insights we 

07:28:18.521 --> 07:28:20.987
can add custom Analytics and 
this allows us to track things 

07:28:20.988 --> 07:28:22.988
what level are people 

07:28:24.435 --> 07:28:26.468
reaching, which are easiest 
options.  With performance 

07:28:26.469 --> 07:28:30.554
monitoring I'll be able to 
measure latency.  Out the door 

07:28:30.555 --> 07:28:32.788
we get traces for things like 
app start and network requests.

07:28:36.854 --> 07:28:39.511
But we can add custom trace to 
get fine grained measurements of

07:28:39.512 --> 07:28:41.512
latency.

07:28:44.392 --> 07:28:45.405
With crashlytics we will get a 
report every single time a crash

07:28:45.406 --> 07:28:50.300
happens in the wild and this is 
useful for finding these issues 

07:28:50.301 --> 07:28:52.744
that people are not reporting to
us.  We drop it in and we will 

07:28:52.745 --> 07:28:56.414
get the line of code that the 
crash happened on.  With cross 

07:28:56.415 --> 07:28:58.861
platform apps we will have to 
capture the crashes ourselves 

07:28:58.862 --> 07:29:00.862
but 

07:29:05.942 --> 07:29:11.871
then we can use kuscustom 
logging.  And -- while 

07:29:11.872 --> 07:29:16.998
crashlytics is only available on
react native module right now.  

07:29:16.999 --> 07:29:19.645
However if you like what you see
and you are using Flutter, all 

07:29:19.646 --> 07:29:21.646
of these are open source 
repositories.

07:29:25.500 --> 07:29:27.500
So feel free to contribute

07:29:29.708 --> 07:29:31.708
.  To streamline our demo we 
have done a little bit of setup.

07:29:33.227 --> 07:29:35.897
Kwef have created our project 
Firehunt and in our project we 

07:29:35.898 --> 07:29:37.898
have created apps 

07:29:39.922 --> 07:29:41.922
for each of our iOS

07:29:43.653 --> 07:29:48.577
and Android.  React native and 
Flutter.  We have been dropped 

07:29:48.578 --> 07:29:50.578
in the modules we will want to 
use for Firebase.

07:29:52.657 --> 07:29:55.308
Here we are using Firebase core 
for Analytics performance for 

07:29:55.309 --> 07:29:57.309
performance 

07:29:59.182 --> 07:30:01.182
monitoring and crashlytics needs
fabric.

07:30:03.447 --> 07:30:05.476
For Android we will be doing 
something similar and we have 

07:30:05.477 --> 07:30:07.477
done a little more 

07:30:08.524 --> 07:30:09.948
setup with crashlytics which you
can read the documentation for 

07:30:09.949 --> 07:30:13.679
here.  So set up a lot of the 
way let's jump to our actual 

07:30:13.680 --> 07:30:15.923
demo.  What do we get as soon as
we have set this up.

07:30:18.973 --> 07:30:22.862
We will get an overview with 
Analytics for our apps.  But it 

07:30:22.863 --> 07:30:26.725
looks like none of our apps have
very many users.  The numbers 

07:30:26.726 --> 07:30:28.726
aren't going to be so 
interesting.

07:30:31.818 --> 07:30:33.848
So let's go take a sneak peak at
Bingo Blast which is an app that

07:30:33.849 --> 07:30:37.942
has been out in the wild a 
little bit longer many of we 

07:30:37.943 --> 07:30:39.943
have our daily users in green.

07:30:43.195 --> 07:30:45.195
Our weekly users in purple and 
our 

07:30:48.196 --> 07:30:48.683
monthly users in blue and we can
scroll down to get other metrics

07:30:48.684 --> 07:30:50.684
as well.

07:30:52.211 --> 07:30:56.211
How much revenue the app is 
making and what versions of the 

07:30:52.211 --> 07:30:56.195
app people are using and we 
scroll down to the bottom we can

07:30:56.196 --> 07:30:58.371
see where in the world people 
are using our app from.  So in 

07:30:58.372 --> 07:31:02.896
this case a lot of people are 
playing Bingo Blast in the U.S. 

07:31:02.897 --> 07:31:04.897
but also all around the world.  

07:31:07.384 --> 07:31:09.384
We can also take a look at the 

07:31:11.603 --> 07:31:15.984
events tab.  And this shows us 
the user events that are tracked

07:31:15.985 --> 07:31:21.354
in our app.  We get a bunch of 
these for free such as app 

07:31:21.355 --> 07:31:23.596
installs or app removals and 
session stars but this is also 

07:31:23.597 --> 07:31:25.597
where we 

07:31:26.860 --> 07:31:29.743
will be able to add -- where we 
will be able to see our custom 

07:31:29.744 --> 07:31:34.245
Analytics events.  If we check 
ought our audience this is is 

07:31:34.246 --> 07:31:36.689
where we can segment our user 
base and target different 

07:31:36.690 --> 07:31:41.391
Firebase features to different 
segments later on.  Here we have

07:31:41.392 --> 07:31:46.689
grouped things by purchasers and
even purchasers by locality.  So

07:31:46.690 --> 07:31:49.175
we can have features which are 
targeted specifically to say 

07:31:49.176 --> 07:31:53.534
people in Australia.  
    All right.  Let's actually 

07:31:53.535 --> 07:31:55.983
get a look at what adding a 
custom Analytics event looks 

07:31:56.993 --> 07:31:58.993
like in code.

07:32:01.874 --> 07:32:05.919
Here we are using react 
anywaytive native.  The first 

07:32:05.920 --> 07:32:11.726
thing we will need to do is 
import our Firebase module.  And

07:32:11.727 --> 07:32:13.778
here we have the image picker 
screen.  This is the screen 

07:32:13.779 --> 07:32:15.779
which allows you to 

07:32:17.597 --> 07:32:20.763
pick a imn image and receives 
the verification from the 

07:32:20.764 --> 07:32:24.662
server.  If we have the right 
image it will call complete 

07:32:24.663 --> 07:32:26.704
level and if we have the wrong 
image it will call wrong image.

07:32:30.592 --> 07:32:32.054
We want to add a custom 
Analytics event when someone 

07:32:32.055 --> 07:32:35.726
completes the level.  Let's go 
ahead and do that.  Here we have

07:32:35.727 --> 07:32:37.951
given the name of our Analytics 
event to be level, the number 

07:32:39.385 --> 07:32:41.385
about this level is reached.  
And we are calling Firebase.

07:32:43.659 --> 07:32:45.659
Analytics.

07:32:47.311 --> 07:32:49.311
logevent to doing that to the 
server.

07:32:50.777 --> 07:32:52.409
Let's go ahead and run our app. 
Skip the tutorial since we know 

07:32:52.410 --> 07:32:57.074
what we are doing.  Look for 
cookie.  We will use this 

07:32:57.075 --> 07:32:59.075
picture of a cookie 

07:33:00.902 --> 07:33:02.902
that we took before

07:33:06.687 --> 07:33:09.331
.  Submit to that to be 
verified.  And it looks like our

07:33:09.332 --> 07:33:13.814
verification worked and we won a
trophy.  Awesome.  So now let's 

07:33:13.815 --> 07:33:15.815
take a look in the console.

07:33:18.321 --> 07:33:19.962
We can see that these custom 
Analytics events are coming 

07:33:19.963 --> 07:33:22.962
through in the debug view

07:33:26.723 --> 07:33:29.392
.  And this will give us a good 
idea of how our Analytics will 

07:33:29.393 --> 07:33:34.289
be coming in as we add them to 
our app.  So here we can see we 

07:33:34.290 --> 07:33:36.290
have a bunch of 

07:33:39.384 --> 07:33:41.622
screen views, a bunch clicks 
user engagement and we have seen

07:33:41.623 --> 07:33:45.078
that level 3 has in fact, been 
reached.  So while we are still 

07:33:45.079 --> 07:33:47.079
in the console 

07:33:48.139 --> 07:33:49.162
let's take a look at what we get
from performance monitoring out 

07:33:49.163 --> 07:33:51.163
the gate.  I have added no 
custom code.

07:33:56.300 --> 07:33:59.163
The only thing I did was add the
cocopod to my iOS version and we

07:33:59.164 --> 07:34:01.406
can already see the sorts of 
traces we can get.

07:34:06.687 --> 07:34:08.336
I have got no major issues but I
do have a minor issue with app 

07:34:08.337 --> 07:34:10.337
start.

07:34:11.643 --> 07:34:13.460
It is taking almost 600 
milliseconds.  That's probably a

07:34:13.461 --> 07:34:15.726
slow enough start that I give 
someone a progress screen it 

07:34:16.947 --> 07:34:19.794
might turn them off from my app.
We can take a look at the 

07:34:19.795 --> 07:34:26.705
network requests.  And from this
we can see that all of our 

07:34:26.706 --> 07:34:28.946
requests are network requests 
are in fact, successful but 

07:34:28.947 --> 07:34:32.009
there is this one here which is 
taking two seconds.  That's kind

07:34:32.010 --> 07:34:34.010
of slow.

07:34:35.921 --> 07:34:38.393
Let's dig in to it.  This is the
end point that verifies our 

07:34:38.394 --> 07:34:40.394
image.  And it is probably slow 
because we 

07:34:44.748 --> 07:34:46.748
have to upload a large image on 
occasion.

07:34:48.192 --> 07:34:50.192
So maybe an optimization we can 
make 

07:34:51.264 --> 07:34:53.503
is making our image smaller or 
somehow speeding up our machine 

07:34:53.504 --> 07:34:55.598
learning algorithm on the back 
end.

07:34:59.270 --> 07:35:01.094
That is a problem for my Backend
self tomorrow or the day 

07:35:01.095 --> 07:35:05.180
afterwards.  So what about 
crashlytics?  That was a good 

07:35:05.181 --> 07:35:10.275
overview.  Let' goes back to the
code and see how we can add 

07:35:10.276 --> 07:35:13.180
crashlytics to pick up the 
crashes that are happening of if

07:35:13.181 --> 07:35:15.181
we see 

07:35:16.251 --> 07:35:16.864
our app and check ot the 
trophies tab we will see that 

07:35:16.865 --> 07:35:18.865
there is a crash.

07:35:20.566 --> 07:35:22.566
This was reported to me by Kiana

07:35:24.054 --> 07:35:26.086
thanksfully a couple of hours 
ago and we can use this to see 

07:35:26.087 --> 07:35:30.347
how crashlytics works.  So again
we are in our trophy screen.  

07:35:30.348 --> 07:35:32.348
The first thing we are going to 
do is 

07:35:33.440 --> 07:35:37.983
import Firebase.  And when we 
get an error we will use the 

07:35:37.984 --> 07:35:42.868
global handler to capture it.  
And log in to crashlytics.  Here

07:35:42.869 --> 07:35:47.965
we will grab the stack trace, 
log that, and record the error. 

07:35:47.966 --> 07:35:49.966
So now if we run it, we will be 
able 

07:35:51.794 --> 07:35:54.267
to capture the crashes.  Yep and
that's just not working.

07:35:58.350 --> 07:36:00.350
So let gaes to the console and 
see 

07:36:01.856 --> 07:36:03.856
what that actually produced.

07:36:07.821 --> 07:36:10.073
We can go in to our first issue 
here.  And our stack trace here 

07:36:10.074 --> 07:36:12.074
looks like a 

07:36:16.361 --> 07:36:18.361
whole bunch of native mumbo 
jumbo.

07:36:21.515 --> 07:36:23.515
We can take a look at the logs

07:36:26.848 --> 07:36:28.848
and we can see that this was due
to 

07:36:35.026 --> 07:36:38.918
actually let's go to the 
previous stack trace.  Stack 

07:36:38.919 --> 07:36:40.919
trace which tells us in our 

07:36:42.579 --> 07:36:45.016
trophy screen we have typed in 
rendered trophs.  It looks like 

07:36:45.017 --> 07:36:47.017
a typo to me.

07:36:48.019 --> 07:36:51.877
Let's go ahead and fix that.  
    All right.  We will just add

07:36:51.878 --> 07:36:53.878
two more letters.

07:36:56.107 --> 07:36:58.107
Run our app again

07:36:59.241 --> 07:37:01.241
.  And now we will actually be 
able to 

07:37:04.125 --> 07:37:06.557
see the trophies that we have 
rightfully earned.  So now that 

07:37:06.558 --> 07:37:08.558
we fixed all of the issues in 
our app what else can we do?

07:37:12.307 --> 07:37:15.768
   &gt;&gt; KIANA MCNELLIS:  If we go 
back to the slides, the next 

07:37:15.769 --> 07:37:17.769
step in what we 

07:37:18.823 --> 07:37:20.823
want to do is try to start 
experimenting 

07:37:23.088 --> 07:37:25.728
with our user base by adding 
Cloud Messaging, why can start 

07:37:25.729 --> 07:37:30.814
experimenting with different 
engagement strategies and run 

07:37:30.815 --> 07:37:32.815
tests and then we will be able 
to 

07:37:34.070 --> 07:37:36.070
see what's working using the 
anaAnalytics we just added.

07:37:41.702 --> 07:37:43.702
First step is with Firebase.

07:37:54.707 --> 07:37:55.724
It works across iOS and Android.
We can send a push notification 

07:37:55.725 --> 07:37:57.711
to all our users.  We can 
actually take that notification 

07:37:57.712 --> 07:37:59.712
put it in it to your app and 
then run 

07:38:00.734 --> 07:38:03.185
some custom code to do an 
interaction based off of that.  

07:38:03.186 --> 07:38:05.186
We can even target our messages 
based 

07:38:09.484 --> 07:38:11.840
off things like locale and peep 
people's experience with our 

07:38:11.841 --> 07:38:14.074
app.  We have our Firebase 
console send a 

07:38:17.129 --> 07:38:20.582
notification and you can run 
your own API server.  Then once 

07:38:20.583 --> 07:38:22.412
it is at our Cloud Messaging it 
will send a notification ought 

07:38:22.413 --> 07:38:27.114
to all of oush users who have 
registered notification tokens 

07:38:27.115 --> 07:38:30.571
with Firebase.  So let's switch 
back to the code and see how it 

07:38:30.572 --> 07:38:32.572
works.

07:38:35.294 --> 07:38:37.294
So here we have our Flutter pub 

07:38:38.345 --> 07:38:41.595
spectra and we are adding our 
Firebase messaging plug in.  And

07:38:41.596 --> 07:38:43.596
then we run packages get and it 
gets our new values of 

07:38:46.907 --> 07:38:49.749
Then we are going to go ahead 
and this is our main content 

07:38:49.750 --> 07:38:51.750
screen and we 

07:38:53.617 --> 07:38:55.864
are just going to import our new
package.  And, of course, it hit

07:38:55.865 --> 07:38:58.768
it because dart is pretty 
awesome.  And then in our 

07:38:58.769 --> 07:39:00.769
content state we are 

07:39:02.044 --> 07:39:04.044
going to just go ahead and 
create that variable.

07:39:07.714 --> 07:39:09.714
And then initialize it

07:39:12.044 --> 07:39:13.467
.  So in here you can see that 
we request a notification 

07:39:13.468 --> 07:39:17.328
permission than is for iOS.  It 
will pop up a question to our 

07:39:17.329 --> 07:39:20.791
users asking hey do you want to 
enable messages and it is one of

07:39:20.792 --> 07:39:24.065
those requires things that iOS 
makes you do.  You can see that 

07:39:24.066 --> 07:39:28.351
we get the token here and if you
save that to your database you 

07:39:28.352 --> 07:39:31.220
can actually target that 
specific user for a custom 

07:39:31.221 --> 07:39:33.221
notification later.

07:39:34.271 --> 07:39:35.693
Then we are going to add some 
extra configuration code and 

07:39:35.694 --> 07:39:38.335
this will allow us to handle the
notification right in our app.

07:39:41.646 --> 07:39:43.291
The first two on launch and on 
resume if our user hits the 

07:39:43.292 --> 07:39:45.292
notification and we are not 
currently in the app, it will 

07:39:47.193 --> 07:39:49.464
send that data on to us and then
we will do things like 

07:39:49.465 --> 07:39:51.684
navigating to the right page.  
However if we are already in the

07:39:51.685 --> 07:39:53.685
app 

07:39:55.168 --> 07:39:56.597
we want to alert the user of 
that notification because the 

07:39:56.598 --> 07:39:59.271
system is not going to handle 
automatically.  So we go ahead 

07:39:59.272 --> 07:40:03.340
and show the alert and then 
handle that code.  So the final 

07:40:03.341 --> 07:40:05.341
thing we want to could is 

07:40:06.793 --> 07:40:08.831
go over to our Android manifest,
and we are going to register a 

07:40:08.832 --> 07:40:13.517
custom and hint handler so we 
make sure that Flutter sends 

07:40:13.518 --> 07:40:14.750
that notification right to our 
app.  Cool.  Let's run that.  

07:40:19.891 --> 07:40:21.891
And while it is running let's go

07:40:24.609 --> 07:40:27.290
ahead to our console and we will
go down to our cloud messages 

07:40:27.291 --> 07:40:29.291
tab and here we can create a new
notification.

07:40:32.296 --> 07:40:34.936
Let's do something like check 
out our new levels.  Give it a 

07:40:34.937 --> 07:40:36.937
label and target our Android 
users for this one.

07:40:39.276 --> 07:40:41.276
And then hit send.

07:40:43.546 --> 07:40:45.546
And then back in our Android 
app.  

07:40:45.980 --> 07:40:47.405
&gt;&gt; KAT FANG:  Do we want to add 
advanced option?  

07:40:47.406 --> 07:40:51.079
&gt;&gt; KIANA MCNELLIS:  We.  Extra 
notification stuff.  We are 

07:40:51.080 --> 07:40:53.982
going to add some custom fields.
The first is some text for our 

07:40:53.983 --> 07:40:58.461
inapp notification.  And then 
the location we want to go which

07:40:58.462 --> 07:41:01.124
is the progress screen.  And 
then our special intent handler 

07:41:03.365 --> 07:41:06.227
for Android.  Cool.  Now we will
go back and send the app.  

07:41:11.143 --> 07:41:13.575
And go over to our Android.  And
in the notification center there

07:41:18.470 --> 07:41:20.714
we should have an app pop up.  
Yeah, it stopped running.  

07:41:20.715 --> 07:41:22.715
Sorry.

07:41:24.529 --> 07:41:26.529
Just send that again

07:41:32.976 --> 07:41:34.202
.  Just resend that 
notification.  

07:41:34.203 --> 07:41:35.434
&gt;&gt; KAT FANG:  Sure.  
   &gt;&gt; KIANA MCNELLIS:  The cool 

07:41:35.435 --> 07:41:37.686
thing you can just duplicate it 
and send it 

07:41:40.898 --> 07:41:42.978
right again.  
   &gt;&gt; KAT FANG:  Still looks 

07:41:42.979 --> 07:41:44.979
good?  

07:41:46.989 --> 07:41:49.152
&gt;&gt; KIANA MCNELLIS:  Yeah,.  
Cool.

07:41:54.516 --> 07:41:55.728
Let's go back to the app. 
   &gt;&gt; KAT FANG:  I can see it 

07:41:55.729 --> 07:41:58.169
right here on the podium.  
   &gt;&gt; KIANA MCNELLIS:  And we 

07:41:58.170 --> 07:42:00.417
already clicked it and it is at 
the progress 

07:42:04.695 --> 07:42:07.164
vein screen.  Nice.  Let's 
switch back to the slides.

07:42:11.222 --> 07:42:13.048
So Firebase remote config allows
us to try out different features

07:42:13.049 --> 07:42:15.049
and tweak our 

07:42:16.214 --> 07:42:17.521
experiences for different users 
and different user groups and 

07:42:17.522 --> 07:42:20.199
change the UI based on things 
like a new feature flag.  How 

07:42:20.200 --> 07:42:22.200
does it work?

07:42:23.455 --> 07:42:26.297
Well, you have a hard coded 
option in your app right now.  

07:42:26.298 --> 07:42:28.359
And it gives the same experience
to everyone.  But we want to 

07:42:28.360 --> 07:42:30.360
change that.

07:42:31.634 --> 07:42:33.661
So with Firebase remote config 
we stick in a new variable and 

07:42:33.662 --> 07:42:35.662
it sections 

07:42:37.130 --> 07:42:39.130
from the dynamic value for that.

07:42:40.401 --> 07:42:43.513
And then it updates your UI 
accordingly.  So let's try that 

07:42:43.514 --> 07:42:45.514
out.

07:42:46.806 --> 07:42:48.806
So back in our Pub/Subspec we 
are 

07:42:51.485 --> 07:42:53.819
going to add the remote config 
plug in and packages.Git.

07:42:57.910 --> 07:42:59.910
Then in our content screen we 
are 

07:43:01.581 --> 07:43:03.581
going to import that package 
once again 

07:43:05.261 --> 07:43:07.261
and create a new variable.  And 
then we will go ahead and 

07:43:07.290 --> 07:43:10.135
initialize.  
    So this time we are going to

07:43:10.136 --> 07:43:12.136
do an 

07:43:13.594 --> 07:43:15.829
asynchronous call and then using
the wait keyboard we are going 

07:43:15.830 --> 07:43:17.830
to wait for that response back.

07:43:26.195 --> 07:43:28.195
If we do, we will go ahead and 
hit -- 

07:43:30.209 --> 07:43:32.209
do a configure settings and this
will 

07:43:36.219 --> 07:43:40.152
make sure that we set some 
default settings.  In this case 

07:43:36.219 --> 07:43:38.219
we are in a debug mode.

07:43:40.199 --> 07:43:42.199
We are going to leave the debug 
flag 

07:43:44.194 --> 07:43:48.394
on and then we have going to set
some sensible defaults that we 

07:43:44.194 --> 07:43:46.194
already have in our app.  And 
then update the app accordingly.

07:43:47.426 --> 07:43:48.642
And we call set state here 
because that's how dart knows to

07:43:48.643 --> 07:43:50.643
up date the UI.

07:43:51.907 --> 07:43:54.537
We are going to replace the get 
config function so just our app 

07:43:54.538 --> 07:43:57.189
knows to check remote config 
first before we use our default.

07:44:02.232 --> 07:44:04.232
Let's run that

07:44:07.649 --> 07:44:09.496
.  If we go over to our find 
screen, we can see we currently 

07:44:09.497 --> 07:44:13.364
have two options.  But we want 
to change it to three.  Or four 

07:44:13.365 --> 07:44:15.365
and make it a little bit easier 
for our users.

07:44:18.466 --> 07:44:20.466
So let's go in to the remote 
config dashboard.

07:44:21.922 --> 07:44:23.139
And we are going to add our 
first parameter which is going 

07:44:23.140 --> 07:44:27.009
to be find number options and we
will set it up to 4.

07:44:30.909 --> 07:44:32.942
And then add the parameter and 
the last thing is hit publish to

07:44:32.943 --> 07:44:35.610
send it out to your users.  Then
in a couple of seconds it will 

07:44:37.061 --> 07:44:39.707
reach our app and we will just 
restart it to make sure it 

07:44:39.708 --> 07:44:42.361
fetches those new variables 
since in this case we only 

07:44:45.820 --> 07:44:47.055
wanted to start on startup 
because otherwise the experience

07:44:47.056 --> 07:44:49.056
would change 

07:44:51.898 --> 07:44:53.898
while the users are using the 
app

07:45:02.154 --> 07:45:04.154
.  And it just takes a moment to
load 

07:45:05.160 --> 07:45:07.160
here

07:45:16.748 --> 07:45:18.748
.  Cool.  While this is loading 
let's go and add 

07:45:22.040 --> 07:45:24.483
another thing in our remote 
config.  The cool thing is we 

07:45:24.484 --> 07:45:26.749
can actually add parameters 
specifically for certain 

07:45:27.965 --> 07:45:29.965
versions of our user base.  And 
of our app.

07:45:32.644 --> 07:45:34.644
So if we define a new condition 
say is 

07:45:37.351 --> 07:45:39.351
iOS, then we apply.

07:45:42.178 --> 07:45:44.178
If they are using our iOS app,

07:45:45.535 --> 07:45:47.535
and we create the condition.

07:45:48.577 --> 07:45:50.577
Then we can add a specific 
variable 

07:45:51.665 --> 07:45:53.291
just for those iOS users, say 
only three because our iOS users

07:45:53.292 --> 07:45:57.793
are going to have a little bit 
harder time finding those items 

07:45:57.794 --> 07:45:59.794
and then we publish the changes.

07:46:01.259 --> 07:46:03.942
And then if we go back to our 
app, let's see what that find 

07:46:03.943 --> 07:46:05.943
screen looks like.  

07:46:07.465 --> 07:46:11.741
Cool.  And it got to 4.  
Unfortunately conference WiFi 

07:46:11.742 --> 07:46:13.742
took a 

07:46:15.551 --> 07:46:17.551
little bit time to get there.

07:46:19.921 --> 07:46:21.921
Without any code changes we were
able 

07:46:23.624 --> 07:46:26.054
to update that value 
dynamically.  So those were all 

07:46:26.055 --> 07:46:28.055
manual tasks.

07:46:29.126 --> 07:46:30.343
But let's switch back to the 
slide to learn about some 

07:46:30.344 --> 07:46:32.344
automatic ones.

07:46:35.216 --> 07:46:37.884
So the smarts, predictions, AD 
testing and AB testing for Cloud

07:46:37.885 --> 07:46:40.570
Messaging all allow us to add 
some machine magic to 

07:46:43.652 --> 07:46:45.652
automate those tasks we were 
doing.

07:46:46.713 --> 07:46:48.757
We take Google's cloud ML and 
inlt great it right in to our 

07:46:48.758 --> 07:46:50.758
Analytics data.

07:46:51.799 --> 07:46:56.077
And helps predict actions that 
are usedor base will take.  We 

07:46:56.078 --> 07:46:58.078
will churn or spend money or we 
can 

07:46:59.520 --> 07:47:01.520
even have it predict custom 
Analytics event.

07:47:03.205 --> 07:47:05.205
Are they ever going to reach the
third level.

07:47:06.477 --> 07:47:08.723
With AB testing we can go ahead 
and automate our tests and 

07:47:08.724 --> 07:47:12.584
interpret the results 
automatically.  So we can run 

07:47:12.585 --> 07:47:15.258
tests with just a sample of our 
users or we can do it just with 

07:47:17.304 --> 07:47:20.150
the certain audience or one of 
those predictionion events.  

07:47:20.151 --> 07:47:21.986
Then we can see if it made an 
impact on the metric we care 

07:47:21.987 --> 07:47:24.029
about and then roll it out to a 
larger population if it works.  

07:47:24.030 --> 07:47:26.891
    So this is what it might 
look like.

07:47:30.176 --> 07:47:32.425
So half of our user base might 
get can you beat our latest 

07:47:32.426 --> 07:47:34.426
challenge and the 

07:47:36.110 --> 07:47:38.541
other half get new levels 
released and we won't have to 

07:47:38.542 --> 07:47:40.542
choose which does which.

07:47:41.805 --> 07:47:43.805
So let's go back and do a demo 
of this.  Cool.

07:47:45.067 --> 07:47:46.899
So this is our predictions and 
you will see we have pretty high

07:47:46.900 --> 07:47:51.025
churn nom because our app again 
wasn't very good before.  Now 

07:47:51.026 --> 07:47:52.850
that our bugs are fixed 
hopefully that number will go up

07:47:52.851 --> 07:47:54.851
but currently it 

07:47:56.744 --> 07:47:58.573
is at 37% are predicted to churn
but that's a high risk 

07:47:58.574 --> 07:48:03.700
tolerance.  We are saying anyone
who could possibly churn we want

07:48:03.701 --> 07:48:07.759
to make sure to target them.  
But if we switch it to a lower 

07:48:07.760 --> 07:48:09.760
risk 

07:48:11.660 --> 07:48:13.913
tolerance we can do the users 
that are very sure that are 

07:48:13.914 --> 07:48:16.989
going to churn or maybe we will 
help them do the app, use the 

07:48:16.990 --> 07:48:18.990
app a little easier.

07:48:20.663 --> 07:48:22.889
We can also set up down here a 
level 3 reached which is custom 

07:48:22.890 --> 07:48:24.890
Analytics event 

07:48:28.423 --> 07:48:30.423
that we then took and asked to 
predikdik 

07:48:32.318 --> 07:48:34.318
and it will take a couple of 
days to do 

07:48:35.607 --> 07:48:37.607
and do that prediction.

07:48:41.066 --> 07:48:43.066
So next up let's do an AB test

07:48:44.850 --> 07:48:46.894
.  So it take as little while to
load on conference WiFi but we 

07:48:46.895 --> 07:48:48.895
will create an 

07:48:50.362 --> 07:48:52.597
experiment for notifications.  
And let's do something like 

07:48:52.598 --> 07:48:54.598
giving 

07:48:58.049 --> 07:49:01.381
everyone I/O troe trophies of we
will target our iOS users.

07:49:07.347 --> 07:49:09.347
And let's do like 100% because 
we want 

07:49:11.014 --> 07:49:13.455
every one of our users to get 
this one.  We will add three 

07:49:13.456 --> 07:49:15.456
variants.  Finish a level for 
the first.

07:49:17.944 --> 07:49:20.389
Limited edition trophy for the 
next.  And then a special trophy

07:49:20.390 --> 07:49:25.691
for the third.  And then next.  
And our goal here will be 

07:49:25.692 --> 07:49:27.692
session 

07:49:29.656 --> 07:49:31.289
start because we want people to 
open up our app and start using 

07:49:31.290 --> 07:49:33.354
it.  Then we hit next.

07:49:36.606 --> 07:49:38.641
And go ahead and see an overview
of what our AB test will look 

07:49:38.642 --> 07:49:40.642
like and then 

07:49:42.358 --> 07:49:45.020
we start the experiment.  Now 
this will take a week or so to 

07:49:45.021 --> 07:49:49.293
run or two weeks if we did the 
experiment with remote config 

07:49:49.294 --> 07:49:51.294
but we actually 

07:49:52.505 --> 07:49:54.505
started a

07:49:55.625 --> 07:49:58.466
n experiment a week ago that we 
can show you guys.  This one was

07:49:58.467 --> 07:50:00.467
with Android.  

07:50:04.160 --> 07:50:06.160
And it looks like variant A1 
app.

07:50:07.208 --> 07:50:09.208
And if we look down, we can see 
what 

07:50:15.194 --> 07:50:16.225
variant A was and we can see 
some of the stats on it.  We can

07:50:16.226 --> 07:50:18.226
see the conversion rate was 22% 

07:50:19.230 --> 07:50:21.241
which is pretty good.  And how 
many people actually did that 

07:50:24.194 --> 07:50:28.280
event.  So nice.  Let's switch 
back to the slides.  So what are

07:50:28.281 --> 07:50:30.306
some other ways I can use all 
these cool features we just 

07:50:30.307 --> 07:50:32.738
started working with?  
   &gt;&gt; KAT FANG:  That's a good 

07:50:32.739 --> 07:50:34.739
question.

07:50:37.037 --> 07:50:39.037
One way we can use predictions 
to give 

07:50:40.147 --> 07:50:42.147
them booster packs maybe they 
are having 

07:50:44.436 --> 07:50:46.436
a hard time with the different 
levels.

07:50:48.302 --> 07:50:50.302
We can use this -- we can use 
Firebase 

07:50:55.793 --> 07:50:57.686
features if we want to redesign 
our app and see if people enjoy 

07:50:57.687 --> 07:50:59.687
the redesign and 

07:51:02.686 --> 07:51:02.700
it will also tell us if people 
are experiencing more crashes 

07:51:02.701 --> 07:51:04.701
with the new redesign in which 
case we will roll it back.

07:51:07.298 --> 07:51:10.201
But if we do like it we can roll
it all the way to 100%.  We can 

07:51:10.202 --> 07:51:12.202
also use Firebase when producing
new content.

07:51:13.443 --> 07:51:14.261
So I'm sure a lot of you have 
had that experience where you 

07:51:14.262 --> 07:51:17.721
just want your users to download
a new app update so they can get

07:51:17.722 --> 07:51:20.180
the new content.  We can roll 
the new content in to 

07:51:24.578 --> 07:51:27.227
existing app uploads -- updates 
but hide it behind a remote 

07:51:27.228 --> 07:51:29.908
config variable and then the day
we want to launch the new 

07:51:31.327 --> 07:51:34.637
content we don't have to wait 
for people to update their app. 

07:51:34.638 --> 07:51:36.472
We will flip our remote 
configure flag and send a push 

07:51:36.473 --> 07:51:38.473
notification to let everyone 
know that there is new content 

07:51:38.906 --> 07:51:40.906
waiting for them.

07:51:42.202 --> 07:51:44.202
So we have taken our two apps 
react 

07:51:45.873 --> 07:51:48.732
native and Flutter and added 
Firebase features to them.  This

07:51:48.733 --> 07:51:51.593
allows us to observe and analyze
using Firebase Analytics, 

07:51:51.594 --> 07:51:53.594
crashlytics 

07:51:55.903 --> 07:51:58.348
and performance monitoring and 
discover issues before they 

07:51:58.349 --> 07:52:00.349
reach everyone.

07:52:02.456 --> 07:52:04.288
We can make hypothesis as how we
improve the experience with them

07:52:04.289 --> 07:52:06.718
and using predict shuns to 
segment users 

07:52:09.784 --> 07:52:11.784
that might be churning or 
spending more 

07:52:12.917 --> 07:52:16.192
money and we can run experiments
on them.  And messaging.  We 

07:52:16.193 --> 07:52:18.193
will be able to analyze the 
changes 

07:52:20.667 --> 07:52:22.106
we have made what users like, 
and repeat the cycle all over 

07:52:22.107 --> 07:52:27.068
again.  Now that we have added 
Firebase when people all across 

07:52:27.069 --> 07:52:30.723
the world come to our app they 
will have a smooth and enjoyable

07:52:30.724 --> 07:52:34.816
experience.  Firebase can 
actually go beyond even this and

07:52:34.817 --> 07:52:37.459
help us develop our next 
features using products such as 

07:52:39.498 --> 07:52:41.498
Firestore which have realtime 

07:52:42.945 --> 07:52:44.977
synchronous capabilities 
allowing us to build things like

07:52:44.978 --> 07:52:46.978
teen games so that 

07:52:52.778 --> 07:52:56.843
people can work together to 
finish skacavenger hunts.  But 

07:52:56.844 --> 07:52:58.664
this is the last talk here at 
I/O.  So I encourage you all to 

07:52:58.665 --> 07:53:01.530
go to Youtube, check out the 
other talks that 

07:53:04.806 --> 07:53:06.845
have happened here these past 
three days and explore the deep 

07:53:06.846 --> 07:53:08.846
dives on there as well.  We want
to hear from you.

07:53:11.530 --> 07:53:15.013
So please check out website and 
leave us some feedback.  Again 

07:53:15.014 --> 07:53:17.014
thank you for coming to our talk
and I hope you have enjoyed I/O.

07:53:17.065 --> 07:53:19.065
   (Applause.

07:53:20.073 --> 07:53:22.073
)

