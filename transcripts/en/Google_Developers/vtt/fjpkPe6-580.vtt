WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.791
JEREMY WALKER: Hi, my
name's Jeremy Walker.

00:00:01.791 --> 00:00:03.490
I'm a Developer
Advocate at Google.

00:00:03.490 --> 00:00:05.800
And I'm joined here by
Max Kanat-Alexander.

00:00:05.800 --> 00:00:09.040
We're finishing our talk
on the three software

00:00:09.040 --> 00:00:11.760
flaws in software design.

00:00:11.760 --> 00:00:13.510
So now you're going
to talk a little bit

00:00:13.510 --> 00:00:15.080
about the method
of software design

00:00:15.080 --> 00:00:16.460
that helps you
avoid all of them.

00:00:16.460 --> 00:00:18.211
Can you give us a
little more information?

00:00:18.211 --> 00:00:20.709
MAX KANAT-ALEXANDER: Sure, so
I call this system Incremental

00:00:20.709 --> 00:00:21.770
Development and Design.

00:00:21.770 --> 00:00:24.311
I used a bunch of English words
because I'm generally opposed

00:00:24.311 --> 00:00:25.070
to buzz words.

00:00:25.070 --> 00:00:27.599
And so I just spelled
it out as like a bunch

00:00:27.599 --> 00:00:29.390
of words that actually
mean what they mean.

00:00:29.390 --> 00:00:31.930
Instead of some word that I
invented to sell consulting.

00:00:35.550 --> 00:00:38.340
Before I start into this, let
me say that as far as I know,

00:00:38.340 --> 00:00:39.290
this system works.

00:00:39.290 --> 00:00:41.130
And it always works
as long as you

00:00:41.130 --> 00:00:43.181
do the actual system
and not something else,

00:00:43.181 --> 00:00:44.430
and don't add something to it.

00:00:44.430 --> 00:00:46.150
If you do this, and
it doesn't work,

00:00:46.150 --> 00:00:47.640
then you can email
me and tell me.

00:00:47.640 --> 00:00:49.470
And either I will
publish something

00:00:49.470 --> 00:00:52.009
that fixes what I said,
or I will tell you

00:00:52.009 --> 00:00:52.800
what you did wrong.

00:00:52.800 --> 00:00:54.850
And my email is
max@codesimplicity.com.

00:00:54.850 --> 00:00:59.160
So, many people have heard about
incremental development, where

00:00:59.160 --> 00:01:00.820
you just write one
thing, and then you

00:01:00.820 --> 00:01:01.720
write another thing
on top of that,

00:01:01.720 --> 00:01:03.720
and then you write another
thing on top of that.

00:01:03.720 --> 00:01:05.107
And many people practice this.

00:01:05.107 --> 00:01:07.190
What I'm adding to that
is incremental development

00:01:07.190 --> 00:01:07.740
and design.

00:01:07.740 --> 00:01:09.198
Because a lot of
what people do is,

00:01:09.198 --> 00:01:11.240
they design something
up front, and then they

00:01:11.240 --> 00:01:13.080
make incremental
steps toward it.

00:01:13.080 --> 00:01:17.220
But what I try to do
is I try to rethink

00:01:17.220 --> 00:01:18.585
my design at every step.

00:01:18.585 --> 00:01:21.370
At every increment,
I rethink my design.

00:01:21.370 --> 00:01:26.380
And what I say is, every time
I want to add something new,

00:01:26.380 --> 00:01:29.010
the resulting system should
look like I designed it

00:01:29.010 --> 00:01:31.855
from the beginning to do
exactly what it does now.

00:01:35.030 --> 00:01:37.044
This involves a
lot of refactoring.

00:01:37.044 --> 00:01:38.460
So get really good
at refactoring.

00:01:38.460 --> 00:01:41.140
At first, it will be a
little slower for you,

00:01:41.140 --> 00:01:43.320
but over time it will
pick up, and also you'll

00:01:43.320 --> 00:01:44.590
get real good at refactoring.

00:01:44.590 --> 00:01:46.880
Like, I've got really
good at refactoring

00:01:46.880 --> 00:01:48.560
after I started to do this.

00:01:48.560 --> 00:01:50.240
You can do it real
fast, I promise.

00:01:50.240 --> 00:01:53.440
But it's slow at first,
but you know, keep it up.

00:01:53.440 --> 00:01:55.010
The only important
thing is that you

00:01:55.010 --> 00:01:57.477
need to have a general notion
of the order in which you

00:01:57.477 --> 00:01:58.310
should build things.

00:01:58.310 --> 00:02:01.360
Because if you do things
in the wrong sequence,

00:02:01.360 --> 00:02:03.950
then this system won't work.

00:02:03.950 --> 00:02:06.390
In general, you want to kind
of build from the inside out.

00:02:06.390 --> 00:02:07.530
So the way that I
would think about this

00:02:07.530 --> 00:02:09.580
is, like if I was
building a YouTube app,

00:02:09.580 --> 00:02:12.190
the first thing that I would
build is the video player.

00:02:12.190 --> 00:02:14.630
Because that's the core
of the application.

00:02:14.630 --> 00:02:17.710
That's the thing that users
are actually trying to do.

00:02:17.710 --> 00:02:19.420
And you can also
think of it as what

00:02:19.420 --> 00:02:22.861
produces a useful product
as fast as possible.

00:02:22.861 --> 00:02:25.360
So like the last time I wrote
a YouTube app, the first thing

00:02:25.360 --> 00:02:27.250
I did was I just
made a rendering

00:02:27.250 --> 00:02:30.560
surface that could play a video.

00:02:30.560 --> 00:02:31.240
And that was it.

00:02:31.240 --> 00:02:33.200
And it's not a very
useful application

00:02:33.200 --> 00:02:35.130
but you could give it-- I could
have given it to a software

00:02:35.130 --> 00:02:36.510
developer and
said, hey look, you

00:02:36.510 --> 00:02:38.280
can change the Video
ID string in here,

00:02:38.280 --> 00:02:40.080
and you can watch any
video that you want.

00:02:40.080 --> 00:02:41.620
It's kind of useful.

00:02:41.620 --> 00:02:43.650
It's more useful than if
I had implemented, say,

00:02:43.650 --> 00:02:46.450
the browse interface first.

00:02:46.450 --> 00:02:48.730
You don't want to be able
to browse videos and not

00:02:48.730 --> 00:02:49.230
watch them.

00:02:49.230 --> 00:02:51.056
That's not useful.

00:02:51.056 --> 00:02:52.680
But being able to
watch them is useful.

00:02:52.680 --> 00:02:56.800
So you want to find the useful
core and write that first.

00:02:56.800 --> 00:02:59.430
Or the example that I give
in the book for ordering

00:02:59.430 --> 00:03:01.610
is, if you wanted to
write a calculator

00:03:01.610 --> 00:03:04.230
that did simple arithmetic,
addition, subtraction,

00:03:04.230 --> 00:03:05.720
multiplication, and division.

00:03:05.720 --> 00:03:08.702
You would want to do either
addition or subtraction first.

00:03:08.702 --> 00:03:10.660
Probably addition because
it's sort of the base

00:03:10.660 --> 00:03:12.370
that other things build
on, and then subtraction

00:03:12.370 --> 00:03:14.121
you could implement
as a form of addition.

00:03:14.121 --> 00:03:16.495
And then on top of that, you
can implement multiplication

00:03:16.495 --> 00:03:18.500
because multiplication
is a form of addition.

00:03:18.500 --> 00:03:19.930
Right?

00:03:19.930 --> 00:03:21.430
And probably
subtraction is simpler,

00:03:21.430 --> 00:03:23.888
so you probably start with that
and then do multiplication.

00:03:23.888 --> 00:03:25.487
And then finally,
you do division

00:03:25.487 --> 00:03:27.070
because division is
the operation that

00:03:27.070 --> 00:03:29.300
depends on all the other ones.

00:03:29.300 --> 00:03:31.800
The ordering of the first
two is not as important.

00:03:31.800 --> 00:03:33.672
So subtraction and addition.

00:03:33.672 --> 00:03:35.880
Or whether you do subtraction
or multiplication first

00:03:35.880 --> 00:03:36.600
doesn't matter.

00:03:36.600 --> 00:03:39.330
But you would never, ever
want to do division first

00:03:39.330 --> 00:03:41.960
because you wouldn't have built
up all the correct abstractions

00:03:41.960 --> 00:03:43.835
or simplicities for
addition and subtraction.

00:03:46.885 --> 00:03:48.260
So let's give an
example of this.

00:03:48.260 --> 00:03:50.426
So let's say that we're
going to implement a socket.

00:03:50.426 --> 00:03:52.680
And we know that we need
sort of Unix sockets

00:03:52.680 --> 00:03:55.624
and UDP sockets and TCP sockets.

00:03:55.624 --> 00:03:57.040
So the first step
we want to do is

00:03:57.040 --> 00:03:59.456
we want to write-- we just
decided to write a UNIX socket.

00:03:59.456 --> 00:04:00.885
We've decided that
that's probably

00:04:00.885 --> 00:04:02.260
the simplest socket
that we need.

00:04:04.674 --> 00:04:06.090
And so first we
just write a class

00:04:06.090 --> 00:04:08.210
called Socket and SocketTest.

00:04:08.210 --> 00:04:10.530
And this follows all
of our previous rules

00:04:10.530 --> 00:04:13.366
about the
implementation of things

00:04:13.366 --> 00:04:14.990
for the three flaws
of software design.

00:04:14.990 --> 00:04:17.339
Because you notice there's
no generic system here.

00:04:17.339 --> 00:04:18.970
Like our first
step looks like we

00:04:18.970 --> 00:04:21.209
designed a system that
only does Unix Sockets.

00:04:21.209 --> 00:04:23.010
So there's just a
class called Socket,

00:04:23.010 --> 00:04:25.400
and then there's a
test called SocketTest.

00:04:25.400 --> 00:04:27.047
Now we're going to
add UDP Sockets.

00:04:27.047 --> 00:04:28.630
Don't do this by
adding IF statements.

00:04:28.630 --> 00:04:29.338
Don't hack it in.

00:04:29.338 --> 00:04:31.710
Redesign the system to
look like it was originally

00:04:31.710 --> 00:04:33.950
designed to do exactly
these two things.

00:04:33.950 --> 00:04:36.360
So now we now
create a superclass,

00:04:36.360 --> 00:04:38.160
an abstract superclass
called Socket.

00:04:38.160 --> 00:04:40.970
And then two subclasses called
UnixSocket and UdpSocket.

00:04:40.970 --> 00:04:44.940
And then we create tests for
both of those concrete classes.

00:04:44.940 --> 00:04:48.130
And then we might need a
base class for the tests

00:04:48.130 --> 00:04:50.690
because they might need to share
information between the two

00:04:50.690 --> 00:04:51.189
tests.

00:04:51.189 --> 00:04:53.260
So they might need
a utility module

00:04:53.260 --> 00:04:55.414
that has utility
functions that they share.

00:04:55.414 --> 00:04:56.830
But we wouldn't
write any of that.

00:04:56.830 --> 00:05:01.470
We wouldn't write any of that
generic bit until we needed it.

00:05:01.470 --> 00:05:03.580
Now the third step
is, we need TCP.

00:05:03.580 --> 00:05:06.780
So now we have two
kinds of IP Sockets.

00:05:06.780 --> 00:05:11.000
So now we need to abstract
out an IP superclass that

00:05:11.000 --> 00:05:12.880
inherits from the
main Socket class

00:05:12.880 --> 00:05:15.690
and then gives us
UdpSocket and TcpSocket.

00:05:15.690 --> 00:05:17.930
And this looks
exactly like it was

00:05:17.930 --> 00:05:19.560
designed to do all these things.

00:05:19.560 --> 00:05:22.530
And then we also might need
to share code between the two,

00:05:22.530 --> 00:05:26.110
UdpSocket and TcpSocket
tests for IP related things.

00:05:26.110 --> 00:05:32.510
But notice we didn't pull out
IP from TCP until we needed it.

00:05:32.510 --> 00:05:34.560
Now, depending on
specifics of your design,

00:05:34.560 --> 00:05:37.160
you might have found that it
was simple to have an IP Class,

00:05:37.160 --> 00:05:38.710
but I suspect that not.

00:05:38.710 --> 00:05:40.944
I suspect that like,
parsing the IP Headers

00:05:40.944 --> 00:05:43.610
and then parsing the TCP Headers
would actually had been simpler

00:05:43.610 --> 00:05:46.810
to start off if you were only
writing TCP in one class.

00:05:46.810 --> 00:05:50.750
I don't know for sure, but
maybe it would have been.

00:05:50.750 --> 00:05:53.170
And so, that gives
us an overview

00:05:53.170 --> 00:05:55.484
of the system of Incremental
Development and Design.

00:05:55.484 --> 00:05:57.400
I talk a little bit more
about it in the book,

00:05:57.400 --> 00:06:00.035
and I also talk a little bit
more about it on my blog.

00:06:00.035 --> 00:06:00.910
JEREMY WALKER: Great.

00:06:00.910 --> 00:06:05.370
Well, I had a couple
questions I wanted to ask you.

00:06:05.370 --> 00:06:08.190
You'd given this talk
in another environment,

00:06:08.190 --> 00:06:10.270
and there's some questions
that came up there

00:06:10.270 --> 00:06:11.320
that I thought were
great, that I thought

00:06:11.320 --> 00:06:12.800
the audience would love to hear.

00:06:12.800 --> 00:06:18.860
And the first one is,
if your main users are

00:06:18.860 --> 00:06:21.470
in a certain language,
what's the best

00:06:21.470 --> 00:06:25.040
way to build in
internationalization

00:06:25.040 --> 00:06:26.580
off the bat?

00:06:26.580 --> 00:06:28.060
MAX KANAT-ALEXANDER: Sure.

00:06:28.060 --> 00:06:30.180
So this question
deals with a point

00:06:30.180 --> 00:06:33.420
that I made earlier in
one of our previous talks.

00:06:33.420 --> 00:06:35.250
About that
internationalization is

00:06:35.250 --> 00:06:37.260
something that's really
hard to bolt on later.

00:06:37.260 --> 00:06:38.680
So you need to sort of
know about it in advance.

00:06:38.680 --> 00:06:40.040
But you don't want
to be too generic.

00:06:40.040 --> 00:06:42.750
You don't want to go beyond your
incremental development step,

00:06:42.750 --> 00:06:45.390
right?

00:06:45.390 --> 00:06:48.100
And so, what you want is,
you want some sort of layer

00:06:48.100 --> 00:06:52.660
or some really simple
code that allows

00:06:52.660 --> 00:06:55.160
you to add internationalization
in the future

00:06:55.160 --> 00:06:56.670
but doesn't implement it now.

00:06:56.670 --> 00:06:59.660
So for example, if
you're using gettext,

00:06:59.660 --> 00:07:04.080
you have the underscore method
that you can surround strings

00:07:04.080 --> 00:07:04.720
by.

00:07:04.720 --> 00:07:06.178
So just make sure
that every string

00:07:06.178 --> 00:07:07.770
is surrounded by the
right method that

00:07:07.770 --> 00:07:10.311
would do the translation because
that's really the hard part.

00:07:10.311 --> 00:07:12.196
The hard part is
figuring out the strings.

00:07:12.196 --> 00:07:14.570
Making sure that you're not
trying to build sentences out

00:07:14.570 --> 00:07:16.778
of words because you can't
translate things that way,

00:07:16.778 --> 00:07:19.050
because you have to
translate whole sentences.

00:07:19.050 --> 00:07:22.172
Just implement good
practices at the beginning

00:07:22.172 --> 00:07:23.880
that have to do with
internationalization

00:07:23.880 --> 00:07:26.040
but which don't add any
significant complexity

00:07:26.040 --> 00:07:27.540
to your development.

00:07:27.540 --> 00:07:29.800
JEREMY WALKER: OK,
so adding on to that,

00:07:29.800 --> 00:07:32.350
you said,
internationalization is

00:07:32.350 --> 00:07:33.850
something that's
really hard to bolt

00:07:33.850 --> 00:07:36.445
on later after
you've made the app.

00:07:36.445 --> 00:07:38.760
Could you give a couple
items that you've

00:07:38.760 --> 00:07:42.960
seen in your experience that are
just as hard to bolt on later

00:07:42.960 --> 00:07:45.490
that people should think
about ahead of time?

00:07:45.490 --> 00:07:47.906
MAX KANAT-ALEXANDER: So the
first thing that comes to mind

00:07:47.906 --> 00:07:49.120
is unit tests.

00:07:49.120 --> 00:07:53.680
It is really, really
hard to add unit tests

00:07:53.680 --> 00:07:56.720
to a system that was not
designed for unit tests.

00:07:59.194 --> 00:08:00.860
People start off,
they think, well, I'll

00:08:00.860 --> 00:08:02.540
just write some big
end to end test.

00:08:02.540 --> 00:08:06.150
Because my system is really
simple, and that's all

00:08:06.150 --> 00:08:07.380
I need to do.

00:08:07.380 --> 00:08:11.410
But then once your system
reaches 50,000 or 100,00 lines,

00:08:11.410 --> 00:08:13.946
and you want to go back and try
to unit test all the things.

00:08:13.946 --> 00:08:15.320
And you've designed
them in a way

00:08:15.320 --> 00:08:17.510
that for example, they're
all tied to the database.

00:08:17.510 --> 00:08:19.040
So Bugzilla was
designed this way,

00:08:19.040 --> 00:08:20.690
where I didn't have
any unit tests,

00:08:20.690 --> 00:08:25.980
and everything was designed
as the constructor would

00:08:25.980 --> 00:08:28.400
load things from the database.

00:08:28.400 --> 00:08:30.900
And that is really,
really hard to test.

00:08:30.900 --> 00:08:33.210
Particularly when the
constructor is writing raw SQL.

00:08:33.210 --> 00:08:35.919
So there's not even like a
layer that you can mock out

00:08:35.919 --> 00:08:39.980
that can give you
the data you need.

00:08:39.980 --> 00:08:42.489
So that is probably the first
thing that comes to mind.

00:08:42.489 --> 00:08:44.530
I'm sure there's other
things, but that's sort of

00:08:44.530 --> 00:08:45.750
like the big one.

00:08:45.750 --> 00:08:46.870
JEREMY WALKER: Great.

00:08:46.870 --> 00:08:51.160
So when you train people
in these three flaws

00:08:51.160 --> 00:08:54.380
and how to avoid them, and you
go back and look at their code

00:08:54.380 --> 00:08:58.610
maybe two or three months later,
what's their biggest failing?

00:08:58.610 --> 00:09:00.910
MAX KANAT-ALEXANDER: That
they didn't believe me.

00:09:00.910 --> 00:09:02.232
Because this is not my opinion.

00:09:02.232 --> 00:09:04.190
This is not me stating
something that like, oh,

00:09:04.190 --> 00:09:06.020
I think this is
what I should do.

00:09:06.020 --> 00:09:08.480
This is actually the result
of a fair bit of research

00:09:08.480 --> 00:09:11.360
and experience and
experiment that I

00:09:11.360 --> 00:09:14.850
did to develop the laws in
the book and these rules.

00:09:14.850 --> 00:09:16.630
So it's not just me
saying like, well I

00:09:16.630 --> 00:09:19.414
think you should do this because
I'm some sort of authority.

00:09:19.414 --> 00:09:21.080
You could-- you don't
have to ignore it.

00:09:21.080 --> 00:09:23.080
You can ignore me or not
know anything about me,

00:09:23.080 --> 00:09:25.310
and these should still be true.

00:09:25.310 --> 00:09:28.170
You don't respect me or
talk to me or anything.

00:09:28.170 --> 00:09:31.610
Or hire me to do anything.

00:09:31.610 --> 00:09:35.730
But people, they just didn't--
they weren't strict enough.

00:09:35.730 --> 00:09:38.055
They thought, well I can
be too generic sometimes.

00:09:38.055 --> 00:09:40.510
Or I can-- this is
really a situation

00:09:40.510 --> 00:09:42.350
where I just need to
be overly generic.

00:09:42.350 --> 00:09:44.140
Or I'm sure that I
can write this code,

00:09:44.140 --> 00:09:45.220
even though I'm only
going to need it--

00:09:45.220 --> 00:09:47.095
you know, I'm just going
to need it tomorrow,

00:09:47.095 --> 00:09:48.620
and I'll just write it now.

00:09:48.620 --> 00:09:53.000
And they just didn't actually
follow the laws or the rules

00:09:53.000 --> 00:09:56.175
here completely as though
they were actual rules.

00:09:56.175 --> 00:09:57.050
JEREMY WALKER: Great.

00:09:57.050 --> 00:10:00.790
And the last question
we got was around tools.

00:10:00.790 --> 00:10:02.623
I mean, I feel like you
kind of explained it

00:10:02.623 --> 00:10:03.860
with the incremental design.

00:10:03.860 --> 00:10:06.140
But is there any other
tools you suggest

00:10:06.140 --> 00:10:09.227
using to help you
avoid the three flaws?

00:10:09.227 --> 00:10:10.310
MAX KANAT-ALEXANDER: Yeah.

00:10:10.310 --> 00:10:12.060
I think having a really
strong code review

00:10:12.060 --> 00:10:15.610
process is really good.

00:10:15.610 --> 00:10:18.150
Having automated
dead code detection

00:10:18.150 --> 00:10:19.340
can be really helpful.

00:10:19.340 --> 00:10:21.670
Particularly code that's
only run by tests.

00:10:21.670 --> 00:10:23.260
So you have code
that doesn't actually

00:10:23.260 --> 00:10:24.801
get used anywhere
in your system even

00:10:24.801 --> 00:10:27.000
though it gets
exercised by tests.

00:10:27.000 --> 00:10:28.825
Which is by the way,
occasionally OK.

00:10:28.825 --> 00:10:30.450
If the only time that
I remember, like,

00:10:30.450 --> 00:10:32.470
well-- whenever
a developer says,

00:10:32.470 --> 00:10:34.721
no, I'm really going to use
this in like five minutes.

00:10:34.721 --> 00:10:36.511
I'm really going to
use it in five minutes.

00:10:36.511 --> 00:10:38.480
Like my next change is
going to use this code.

00:10:38.480 --> 00:10:39.887
I say, OK well, write a test.

00:10:39.887 --> 00:10:41.970
So that way, at least it's
being used by something

00:10:41.970 --> 00:10:43.886
so that I can prove that
it's actually useful,

00:10:43.886 --> 00:10:45.795
or I can see an API
that makes sense.

00:10:45.795 --> 00:10:48.170
But I still try to say like,
just wait until-- normally I

00:10:48.170 --> 00:10:52.490
would say just wait until
you need it in the next time.

00:10:52.490 --> 00:10:54.270
So I would say
code review tools.

00:10:54.270 --> 00:10:55.770
You know, having a
good bug tracker.

00:10:55.770 --> 00:10:58.710
Having a good way to keep
track of either cleanup tasks

00:10:58.710 --> 00:11:03.160
or refactorings that you
need to do can really help.

00:11:03.160 --> 00:11:06.880
But really, code review and
discipline surrounding that

00:11:06.880 --> 00:11:08.805
is probably the
most important tool.

00:11:08.805 --> 00:11:09.680
JEREMY WALKER: Great.

00:11:09.680 --> 00:11:12.980
Well Max, thanks for taking
the time to meet with us

00:11:12.980 --> 00:11:15.810
and talk through the three
flaws and ways to avoid them.

00:11:15.810 --> 00:11:17.880
We really appreciate that.

00:11:17.880 --> 00:11:20.310
And thank you, audience,
for joining us.

00:11:20.310 --> 00:11:22.340
Again, if this is the
first video you've seen,

00:11:22.340 --> 00:11:23.330
we have a whole series.

00:11:23.330 --> 00:11:24.500
Please check them out.

00:11:24.500 --> 00:11:26.850
And we hope to see you soon.

