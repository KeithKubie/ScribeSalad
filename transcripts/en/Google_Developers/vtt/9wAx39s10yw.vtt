WEBVTT
Kind: captions
Language: en

00:00:11.445 --> 00:00:12.110
NICHOLAS GARNIER: Hello,
everybody.

00:00:12.110 --> 00:00:13.707
My name is Nicholas.

00:00:13.707 --> 00:00:14.830
BURCU DOGAN: And I'm Burcu

00:00:14.830 --> 00:00:17.030
NICHOLAS GARNIER: We are from
the Google Drive Developer

00:00:17.030 --> 00:00:19.820
Relations team, live
from Zurich.

00:00:19.820 --> 00:00:22.310
And we are here today to talk
to you about cross-client

00:00:22.310 --> 00:00:26.170
authorization on Android
and the web.

00:00:26.170 --> 00:00:31.290
So Burcu, could you basically
explain to us in what this is

00:00:31.290 --> 00:00:32.780
interesting to the user?

00:00:32.780 --> 00:00:33.950
Who should use that?

00:00:33.950 --> 00:00:37.470
BURCU DOGAN: Yeah, most the
time, your projects may have

00:00:37.470 --> 00:00:40.600
more than two components,
the web and the mobile.

00:00:40.600 --> 00:00:44.350
So the authorization experience
between cross is

00:00:44.350 --> 00:00:48.810
different applications
always is troubling.

00:00:48.810 --> 00:00:51.030
So we listened to developer
feedback.

00:00:51.030 --> 00:00:55.040
And we wanted to improve the
experience for the users.

00:00:55.040 --> 00:00:59.160
And back in May, we introduced
two features that will

00:00:59.160 --> 00:01:02.180
actually help you a
little bit more.

00:01:02.180 --> 00:01:05.800
NICHOLAS GARNIER: So can you
just give me a few examples of

00:01:05.800 --> 00:01:08.600
architectures, basically, that
developers have where they

00:01:08.600 --> 00:01:09.230
should use this?

00:01:09.230 --> 00:01:12.500
For example, they have an
Android app and a server side

00:01:12.500 --> 00:01:13.980
component, they need to talk.

00:01:13.980 --> 00:01:15.250
BURCU DOGAN: Yeah,
for example.

00:01:15.250 --> 00:01:20.130
You want to delegate some task
to the server side such as

00:01:20.130 --> 00:01:23.130
processing data on the server
side into the mobile

00:01:23.130 --> 00:01:23.890
application.

00:01:23.890 --> 00:01:27.410
So in this case, your web server
needs to be authorized

00:01:27.410 --> 00:01:29.540
as well as your mobile app.

00:01:29.540 --> 00:01:35.850
But just imagine that your user
discovered the app on a

00:01:35.850 --> 00:01:40.130
store, and downloaded it, and
authorized it, and haven't

00:01:40.130 --> 00:01:42.440
touched to the web component.

00:01:42.440 --> 00:01:43.660
NICHOLAS GARNIER: Yeah,
haven't authorized

00:01:43.660 --> 00:01:44.490
yet from the web.

00:01:44.490 --> 00:01:45.050
BURCU DOGAN: Yeah.

00:01:45.050 --> 00:01:48.075
So what you basically can do is
to just retrieve an access

00:01:48.075 --> 00:01:52.100
token, which is likely
to live not for long,

00:01:52.100 --> 00:01:54.060
just an hour or so.

00:01:54.060 --> 00:01:56.370
So if you would like to delegate
some work, some

00:01:56.370 --> 00:02:00.240
background, offline work to
the service itself, it's

00:02:00.240 --> 00:02:02.170
basically not so possible.

00:02:02.170 --> 00:02:04.370
I have seen some bad
implementations that people

00:02:04.370 --> 00:02:06.190
were trying to exchange
the access token

00:02:06.190 --> 00:02:07.390
with the web server.

00:02:07.390 --> 00:02:11.610
But from a security point
of view, it's not good.

00:02:11.610 --> 00:02:17.440
And also, the tokens are
not living long.

00:02:17.440 --> 00:02:17.870
NICHOLAS GARNIER: Yeah.

00:02:17.870 --> 00:02:21.520
So basically, this is for
developers that have both a

00:02:21.520 --> 00:02:25.285
web component-- it could be
a separate app or just a

00:02:25.285 --> 00:02:27.280
server-side backend to
run some process--

00:02:27.280 --> 00:02:29.640
and also, for example,
an Android app.

00:02:29.640 --> 00:02:33.550
And those two need to authorize
in a very nice,

00:02:33.550 --> 00:02:34.772
UX-friendy way, basically.

00:02:34.772 --> 00:02:35.073
BURCU DOGAN: Yeah.

00:02:35.073 --> 00:02:35.174
True.

00:02:35.174 --> 00:02:36.590
NICHOLAS GARNIER:
Is that correct?

00:02:36.590 --> 00:02:41.220
And you also want to avoid just
passing a simple access

00:02:41.220 --> 00:02:44.480
token, which you could have done
before, using the regular

00:02:44.480 --> 00:02:46.340
play services authorization.

00:02:46.340 --> 00:02:47.435
BURCU DOGAN: Yeah.

00:02:47.435 --> 00:02:47.890
NICHOLAS GARNIER: Right.

00:02:47.890 --> 00:02:49.990
BURCU DOGAN: This was
one of the features.

00:02:49.990 --> 00:02:54.020
The other feature we have
released was, we resolve the

00:02:54.020 --> 00:02:58.760
user's identity with no sign-in
on the Android app, if

00:02:58.760 --> 00:03:02.660
you are authorized for
the web component.

00:03:02.660 --> 00:03:05.720
Just imagine, in this case, that
you have a web app, and

00:03:05.720 --> 00:03:08.400
the user is given the
right permissions.

00:03:08.400 --> 00:03:12.680
And once he wants to switch
back to the mobile app, he

00:03:12.680 --> 00:03:16.192
needs to go through, again,
the authorization.

00:03:16.192 --> 00:03:18.160
NICHOLAS GARNIER: So you
want to avoid the user

00:03:18.160 --> 00:03:19.480
to authorize twice--

00:03:19.480 --> 00:03:22.640
once on the web app, and then
they want you to try your

00:03:22.640 --> 00:03:22.990
Android app.

00:03:22.990 --> 00:03:24.220
And they have to authorize
again.

00:03:24.220 --> 00:03:24.840
BURCU DOGAN: Again.

00:03:24.840 --> 00:03:27.960
NICHOLAS GARNIER: So this is a
way to have the user already

00:03:27.960 --> 00:03:28.840
authorized, right?

00:03:28.840 --> 00:03:29.260
BURCU DOGAN: Yeah

00:03:29.260 --> 00:03:30.940
NICHOLAS GARNIER: So maybe we
could have a look on your

00:03:30.940 --> 00:03:34.377
computer in details the
documentation, so we could

00:03:34.377 --> 00:03:35.900
explain how this works,
basically.

00:03:35.900 --> 00:03:37.530
BURCU DOGAN: Yeah, sure.

00:03:37.530 --> 00:03:41.700
Let's go through our
documentation first.

00:03:41.700 --> 00:03:43.200
NICHOLAS GARNIER: So first,
let me explain to the

00:03:43.200 --> 00:03:46.796
developers here who
are watching us.

00:03:46.796 --> 00:03:49.040
The documentation can be
found in a few places.

00:03:49.040 --> 00:03:51.550
We are from the Google
Drive SDK team.

00:03:51.550 --> 00:03:57.220
So we have written a Google
Drive-specific documentation

00:03:57.220 --> 00:04:00.420
on the Google Drive
SDK, online doc.

00:04:00.420 --> 00:04:01.200
You can go there.

00:04:01.200 --> 00:04:04.293
It's fairly generic, so you
could apply this to more--

00:04:04.293 --> 00:04:05.910
BURCU DOGAN: Other Google
APIs, basically.

00:04:05.910 --> 00:04:06.970
NICHOLAS GARNIER: Other
Google APIs.

00:04:06.970 --> 00:04:07.510
BURCU DOGAN: With different
scopes.

00:04:07.510 --> 00:04:09.570
NICHOLAS GARNIER: Yes, with
different scopes, just by

00:04:09.570 --> 00:04:10.837
simply applying different
scopes.

00:04:10.837 --> 00:04:15.420
But there's also a documentation
on the Android

00:04:15.420 --> 00:04:20.112
documentation itself, which
doesn't contain a lot of code

00:04:20.112 --> 00:04:25.300
samples, which is why we have
augmented it by releasing this

00:04:25.300 --> 00:04:25.910
documentation here.

00:04:25.910 --> 00:04:29.947
So maybe you could show
us where that page is?

00:04:29.947 --> 00:04:31.700
BURCU DOGAN: It's under
authorized requests.

00:04:31.700 --> 00:04:34.210
And we have this section, Choose
a Platform, where we

00:04:34.210 --> 00:04:36.720
will go to the Android one.

00:04:36.720 --> 00:04:40.800
And there's a new section called
Cross-Client Identity.

00:04:40.800 --> 00:04:43.550
And this basically explains
implementation

00:04:43.550 --> 00:04:45.290
for both of the features.

00:04:45.290 --> 00:04:53.960
So let's first start with how
to retrieve a code for the

00:04:53.960 --> 00:04:57.682
server, so the server can
get offline access.

00:04:57.682 --> 00:04:58.020
NICHOLAS GARNIER: Yeah.

00:04:58.020 --> 00:05:02.580
So this is basically when the
user goes on the Android

00:05:02.580 --> 00:05:06.780
application first and you want
to authorize your server side

00:05:06.780 --> 00:05:11.490
to be able to do either, for
example, long-term processing

00:05:11.490 --> 00:05:13.080
because in the--

00:05:13.080 --> 00:05:15.530
before we even launched that
feature, the Play services

00:05:15.530 --> 00:05:18.230
only allowed you to fetch an
access token, which is only

00:05:18.230 --> 00:05:19.540
valid for one hour.

00:05:19.540 --> 00:05:22.140
So you could have passed this
to your server side.

00:05:22.140 --> 00:05:26.330
But as we'll see in just a
second, this feature now

00:05:26.330 --> 00:05:29.400
allows you to pass longer-term
tokens, for example, the

00:05:29.400 --> 00:05:31.550
refresh token.

00:05:31.550 --> 00:05:34.670
It allows your server side to
fetch a refresh token, which

00:05:34.670 --> 00:05:38.500
grants unlimited access in
time to your server side

00:05:38.500 --> 00:05:39.080
components.

00:05:39.080 --> 00:05:41.630
BURCU DOGAN: So if you're an
Android developer already, you

00:05:41.630 --> 00:05:44.670
should be familiar with how
to get an access token.

00:05:44.670 --> 00:05:49.580
Actually, all of the tokens
are bundled in this

00:05:49.580 --> 00:05:50.230
[INAUDIBLE] core.

00:05:50.230 --> 00:05:51.290
So we take care of how--

00:05:51.290 --> 00:05:51.363
[?

00:05:51.363 --> 00:05:53.560
NICHOLAS GARNIER: With the
Android Play services.

00:05:53.560 --> 00:05:55.213
BURCU DOGAN: Yeah,
Play services.

00:05:55.213 --> 00:06:01.980
So what we provide to you is
this utility interface to get

00:06:01.980 --> 00:06:03.560
an access token.

00:06:03.560 --> 00:06:07.750
So instead, what you were
basically doing here was--

00:06:07.750 --> 00:06:10.050
NICHOLAS GARNIER: So let
me just explain.

00:06:10.050 --> 00:06:12.880
Before, if you're already using
the Play services to

00:06:12.880 --> 00:06:15.590
authorize, you would simply
pass the scopes, the OS2

00:06:15.590 --> 00:06:18.590
scopes of the APIs that you
needed access to, for example,

00:06:18.590 --> 00:06:23.360
the Google Drive API, the
Google+ API, et cetera.

00:06:23.360 --> 00:06:25.695
BURCU DOGAN: So yeah, you
were providing the

00:06:25.695 --> 00:06:27.400
account and the scopes.

00:06:27.400 --> 00:06:28.770
And you were retrieving
an access token.

00:06:28.770 --> 00:06:30.180
NICHOLAS GARNIER: Yeah.

00:06:30.180 --> 00:06:32.662
BURCU DOGAN: In this case, what
we have done, instead of

00:06:32.662 --> 00:06:37.940
just passing the scopes, you
need to pass another magic

00:06:37.940 --> 00:06:40.140
string, let's say.

00:06:40.140 --> 00:06:44.140
And we will just give
you a code, instead

00:06:44.140 --> 00:06:44.930
of an access token.

00:06:44.930 --> 00:06:45.560
NICHOLAS GARNIER: Yes.

00:06:45.560 --> 00:06:47.230
So basically, you've

00:06:47.230 --> 00:06:48.736
highlighted this on the screen.

00:06:48.736 --> 00:06:50.045
BURCU DOGAN: I've
highlighted it.

00:06:50.045 --> 00:06:55.610
And you need to format the
scope, like OAuth2 column

00:06:55.610 --> 00:06:57.030
server, client ID.

00:06:57.030 --> 00:07:01.830
And you need to append your web
apps client ID here, which

00:07:01.830 --> 00:07:04.020
is basically in this format.

00:07:04.020 --> 00:07:05.180
And it's available on--

00:07:05.180 --> 00:07:06.710
NICHOLAS GARNIER: Typically,
in this format.

00:07:06.710 --> 00:07:08.920
So one very important point
for developers.

00:07:08.920 --> 00:07:12.420
Your two client IDs, the Android
client ID and also

00:07:12.420 --> 00:07:14.480
your web client ID,
need to be in the

00:07:14.480 --> 00:07:16.430
same API console project.

00:07:16.430 --> 00:07:18.780
This is how we detect
that those two

00:07:18.780 --> 00:07:20.387
client IDs are linked.

00:07:20.387 --> 00:07:21.690
BURCU DOGAN: That's right.

00:07:21.690 --> 00:07:24.990
And still, you need to pass
the list of scopes again.

00:07:24.990 --> 00:07:25.980
NICHOLAS GARNIER: A
list of scopes.

00:07:25.980 --> 00:07:26.470
Yeah.

00:07:26.470 --> 00:07:28.720
So I see, up there in red,
could you highlight it?

00:07:28.720 --> 00:07:28.760
BURCU DOGAN: Yeah.

00:07:28.760 --> 00:07:31.010
NICHOLAS GARNIER: There is
currently a little limitation.

00:07:31.010 --> 00:07:34.140
BURCU DOGAN: We have
a warning here.

00:07:34.140 --> 00:07:38.670
We currently require +log-in to
be included in the scope.

00:07:38.670 --> 00:07:39.150
NICHOLAS GARNIER: Yeah.

00:07:39.150 --> 00:07:42.730
So one of the scopes need to
be the +log-in scopes, for

00:07:42.730 --> 00:07:46.020
this authorization
feature to work.

00:07:46.020 --> 00:07:51.850
This is currently, basically,
mandatory in the current

00:07:51.850 --> 00:07:52.656
implementations of the system.

00:07:52.656 --> 00:07:53.060
BURCU DOGAN: Yeah.

00:07:53.060 --> 00:07:55.313
Otherwise, you will not be
able to retrieve a code.

00:07:55.313 --> 00:07:56.760
That's true.

00:07:56.760 --> 00:07:57.090
NICHOLAS GARNIER: All right.

00:07:57.090 --> 00:08:01.240
And then the API should
basically allow you to get--

00:08:01.240 --> 00:08:02.480
BURCU DOGAN: A code.

00:08:02.480 --> 00:08:03.760
NICHOLAS GARNIER: An
authorization code, which you

00:08:03.760 --> 00:08:05.130
can pass to your server side.

00:08:05.130 --> 00:08:07.520
And the server side will
exchange, using the--

00:08:07.520 --> 00:08:07.820
BURCU DOGAN: Yeah.

00:08:07.820 --> 00:08:12.000
It's like you will continue the
flow by retrieving here,

00:08:12.000 --> 00:08:15.125
by just making a [? post ?]
request, as regular, and

00:08:15.125 --> 00:08:15.705
retrieve it.

00:08:15.705 --> 00:08:15.860
NICHOLAS GARNIER: Yeah.

00:08:15.860 --> 00:08:16.790
This is regular.

00:08:16.790 --> 00:08:18.200
OAuth2, by the way.

00:08:18.200 --> 00:08:21.210
You exchange the authorization
code for a refresh token and

00:08:21.210 --> 00:08:22.610
an access token.

00:08:22.610 --> 00:08:27.080
BURCU DOGAN: So there's one
thing I need to tell.

00:08:27.080 --> 00:08:31.275
Instead of passing the
redirect URL--

00:08:31.275 --> 00:08:32.330
NICHOLAS GARNIER: So
typically, with

00:08:32.330 --> 00:08:33.460
the regular web flow--

00:08:33.460 --> 00:08:34.919
let me explain.

00:08:34.919 --> 00:08:36.254
BURCU DOGAN: Just ignore--

00:08:36.254 --> 00:08:38.260
NICHOLAS GARNIER: One of the
parameters here that you need

00:08:38.260 --> 00:08:40.820
to pass in the request
is your redirect URI.

00:08:40.820 --> 00:08:43.189
Except here, there's no redirect
URI, since it's all

00:08:43.189 --> 00:08:46.160
done on Android using
a native interface.

00:08:46.160 --> 00:08:48.720
So you basically simply skip
it in the request.

00:08:48.720 --> 00:08:49.410
That's what I see.

00:08:49.410 --> 00:08:50.150
BURCU DOGAN: Yeah.

00:08:50.150 --> 00:08:51.380
NICHOLAS GARNIER: And
this should work.

00:08:51.380 --> 00:08:55.340
You exchange the authorization
code and get your refresh

00:08:55.340 --> 00:08:56.090
token, basically.

00:08:56.090 --> 00:08:56.470
BURCU DOGAN: Yeah.

00:08:56.470 --> 00:08:58.660
So they will basically
retrieve [INAUDIBLE]

00:08:58.660 --> 00:09:00.670
access and [INAUDIBLE].

00:09:00.670 --> 00:09:03.290
So the server side can
make its request

00:09:03.290 --> 00:09:04.478
on behalf of itself.

00:09:04.478 --> 00:09:04.966
NICHOLAS GARNIER: Mm-hm.

00:09:04.966 --> 00:09:06.430
BURCU DOGAN: Yeah.

00:09:06.430 --> 00:09:06.710
NICHOLAS GARNIER: Cool.

00:09:06.710 --> 00:09:07.910
BURCU DOGAN: So, yeah.

00:09:07.910 --> 00:09:09.400
NICHOLAS GARNIER: Is there
anything else that

00:09:09.400 --> 00:09:11.360
the user can do?

00:09:11.360 --> 00:09:11.860
BURCU DOGAN: Of course.

00:09:11.860 --> 00:09:14.316
So let's switch back to
the other feature.

00:09:14.316 --> 00:09:16.790
NICHOLAS GARNIER: I knew you
were going to say that.

00:09:16.790 --> 00:09:21.060
BURCU DOGAN: So in this case,
let's take a look how to

00:09:21.060 --> 00:09:24.400
resolve user identity
without sign in.

00:09:24.400 --> 00:09:27.210
It's again a magic string.

00:09:27.210 --> 00:09:30.480
Instead of passing the
regular scope--

00:09:30.480 --> 00:09:32.430
NICHOLAS GARNIER: In which case
should developers use

00:09:32.430 --> 00:09:33.700
this feature again?

00:09:33.700 --> 00:09:34.780
BURCU DOGAN: So you
want to know--

00:09:34.780 --> 00:09:35.812
NICHOLAS GARNIER: This is a bit
different from the one we

00:09:35.812 --> 00:09:36.000
just talked about.

00:09:36.000 --> 00:09:36.280
BURCU DOGAN: Yeah.

00:09:36.280 --> 00:09:37.970
So you want to know
who the user is.

00:09:37.970 --> 00:09:41.350
You want to know what's the
user's email address.

00:09:41.350 --> 00:09:44.670
You need to identify the user
somehow on your server.

00:09:44.670 --> 00:09:46.295
NICHOLAS GARNIER: So you need to
identify using the server.

00:09:46.295 --> 00:09:50.770
That's, for example, if you are
sending data that you need

00:09:50.770 --> 00:09:52.060
to save for your user.

00:09:52.060 --> 00:09:55.666
And you want to pass also, in a
secure way, the identity of

00:09:55.666 --> 00:09:59.200
the user, so that your server
side can save that data for

00:09:59.200 --> 00:10:00.340
the right user.

00:10:00.340 --> 00:10:00.745
Is that it?

00:10:00.745 --> 00:10:01.150
BURCU DOGAN: Mm-hm.

00:10:01.150 --> 00:10:02.400
NICHOLAS GARNIER: OK.

00:10:05.340 --> 00:10:08.430
BURCU DOGAN: So in order to,
again, pass in the regular

00:10:08.430 --> 00:10:13.840
scope string, we have, this
time, this string, which is

00:10:13.840 --> 00:10:17.475
all this column, server,
again, the client ID.

00:10:17.475 --> 00:10:19.060
NICHOLAS GARNIER: So basically,
this works the same

00:10:19.060 --> 00:10:20.046
way that we've just seen?

00:10:20.046 --> 00:10:20.706
By using the Play services?

00:10:20.706 --> 00:10:21.063
BURCU DOGAN: Yeah.

00:10:21.063 --> 00:10:25.036
You still need to uncall
Google Auth [INAUDIBLE]

00:10:25.036 --> 00:10:28.070
token, the same interface.

00:10:28.070 --> 00:10:28.840
And it will basically--

00:10:28.840 --> 00:10:30.384
NICHOLAS GARNIER: But you just
pass a different magic string.

00:10:30.384 --> 00:10:30.826
OK.

00:10:30.826 --> 00:10:32.600
BURCU DOGAN: So, yeah.

00:10:32.600 --> 00:10:33.910
NICHOLAS GARNIER: So what
does this give you?

00:10:33.910 --> 00:10:38.340
BURCU DOGAN: What it gives
us is a JSON web token.

00:10:38.340 --> 00:10:40.890
It's actually different
[INAUDIBLE].

00:10:40.890 --> 00:10:43.730
And you need to pass it
to your web servlet.

00:10:43.730 --> 00:10:44.605
NICHOLAS GARNIER:
It's encrypted?

00:10:44.605 --> 00:10:44.680
BURCU DOGAN: Yeah,
it's encrypted.

00:10:44.680 --> 00:10:45.670
I'm sorry.

00:10:45.670 --> 00:10:49.180
You need to pass it
to your server.

00:10:49.180 --> 00:10:53.010
And your server needs
to decrypt it again.

00:10:53.010 --> 00:10:58.540
And it basically has these
attributes, ISS, OUD, AZP, and

00:10:58.540 --> 00:11:00.600
the user's email.

00:11:00.600 --> 00:11:00.945
NICHOLAS GARNIER: OK.

00:11:00.945 --> 00:11:01.520
Cool.

00:11:01.520 --> 00:11:04.260
So this is basically an
encrypted token containing the

00:11:04.260 --> 00:11:06.700
user email, which then
you can use to

00:11:06.700 --> 00:11:08.380
identify your developer.

00:11:08.380 --> 00:11:08.660
BURCU DOGAN: That's it.

00:11:08.660 --> 00:11:13.430
NICHOLAS GARNIER: So yeah, I
just wanted to point out

00:11:13.430 --> 00:11:16.650
developers to compare this to
what was already existing

00:11:16.650 --> 00:11:17.710
before we launched this.

00:11:17.710 --> 00:11:20.560
Basically, in the past, you
could have done this by

00:11:20.560 --> 00:11:24.840
passing an access token that
gives you access to the user

00:11:24.840 --> 00:11:27.020
info API, for example,
or [? our open ?]

00:11:27.020 --> 00:11:29.130
[? AD ?] endpoints.

00:11:29.130 --> 00:11:32.810
This is basically nicer, because
the server side is

00:11:32.810 --> 00:11:34.662
going to save one
fetch request.

00:11:34.662 --> 00:11:35.090
BURCU DOGAN: Yeah.

00:11:35.090 --> 00:11:37.380
NICHOLAS GARNIER: You can simply
get the GWT in your

00:11:37.380 --> 00:11:39.040
request, decrypt it.

00:11:39.040 --> 00:11:41.050
There is no external request.

00:11:41.050 --> 00:11:44.580
Your server side is going to
know already, right away, what

00:11:44.580 --> 00:11:45.770
the email of the user is.

00:11:45.770 --> 00:11:49.244
Whereas, if you pass an access
token to your server side, you

00:11:49.244 --> 00:11:51.500
would have had to fetch--

00:11:51.500 --> 00:11:54.640
which is also quite secure-- but
it would have had to fetch

00:11:54.640 --> 00:11:56.940
the user identity.

00:11:56.940 --> 00:11:58.160
BURCU DOGAN: So it's an
additional request.

00:11:58.160 --> 00:11:59.530
NICHOLAS GARNIER: It's an
additional request.

00:11:59.530 --> 00:12:07.090
And also, probably also,
verify the access token

00:12:07.090 --> 00:12:11.470
itself, see if it's actually
been issued by the app, to

00:12:11.470 --> 00:12:14.710
avoid forged requests.

00:12:14.710 --> 00:12:16.230
So this is a very nice
way to do this.

00:12:16.230 --> 00:12:16.640
BURCU DOGAN: Yeah.

00:12:16.640 --> 00:12:18.750
But you need to be careful.

00:12:18.750 --> 00:12:22.280
First of all, you have to make
sure that you are transmitting

00:12:22.280 --> 00:12:26.841
this token on HTTPS,
instead of HTTP.

00:12:26.841 --> 00:12:31.450
And you to make sure that ISS
is [INAUDIBLE] so google.com

00:12:31.450 --> 00:12:32.920
is easy to fake.

00:12:32.920 --> 00:12:36.396
So you have to make sure that
[INAUDIBLE] is declined on

00:12:36.396 --> 00:12:37.200
your web app.

00:12:37.200 --> 00:12:40.825
And the other one is the client
ID of your Android app.

00:12:40.825 --> 00:12:45.190
And then you can trust that
user email is actually

00:12:45.190 --> 00:12:46.160
[INAUDIBLE]

00:12:46.160 --> 00:12:48.194
Google endpoints [INAUDIBLE].

00:12:48.194 --> 00:12:49.002
NICHOLAS GARNIER: Cool.

00:12:49.002 --> 00:12:49.810
BURCU DOGAN: Yeah.

00:12:49.810 --> 00:12:51.390
NICHOLAS GARNIER: But this is
a nice tool, so you avoid a

00:12:51.390 --> 00:12:52.360
few requests.

00:12:52.360 --> 00:12:56.210
So you're able to do this a lot
faster and develop more

00:12:56.210 --> 00:13:00.980
efficiently on your backend.

00:13:00.980 --> 00:13:05.050
BURCU DOGAN: So we actually
have a sample that already

00:13:05.050 --> 00:13:08.537
implements a [INAUDIBLE].

00:13:08.537 --> 00:13:09.970
NICHOLAS GARNIER: Yeah.

00:13:09.970 --> 00:13:12.930
So this is our GitHub repository
of the Google Drive

00:13:12.930 --> 00:13:13.150
team, basically.

00:13:13.150 --> 00:13:13.750
BURCU DOGAN: So we have
examples or--

00:13:13.750 --> 00:13:15.430
NICHOLAS GARNIER: [INAUDIBLE]
samples and--

00:13:15.430 --> 00:13:16.660
BURCU DOGAN: Libraries.

00:13:16.660 --> 00:13:18.090
NICHOLAS GARNIER: Yeah.

00:13:18.090 --> 00:13:20.740
BURCU DOGAN: And so we published
[? +client ?]

00:13:20.740 --> 00:13:24.600
to Android almost a
week ago, maybe.

00:13:24.600 --> 00:13:27.925
So it basically demonstrates
two cases.

00:13:27.925 --> 00:13:31.120
Let's quickly go through
the code.

00:13:31.120 --> 00:13:34.600
NICHOLAS GARNIER: So this sample
is a bit more complete

00:13:34.600 --> 00:13:37.713
to what you'll find in the
documentation, which skips a

00:13:37.713 --> 00:13:41.480
lot of [INAUDIBLE], just shows
you the bare bone of the code.

00:13:41.480 --> 00:13:44.510
This is almost like
a working--

00:13:44.510 --> 00:13:45.570
BURCU DOGAN: Example

00:13:45.570 --> 00:13:47.830
NICHOLAS GARNIER: Example of
the usage of these two

00:13:47.830 --> 00:13:50.360
features that we've just seen.

00:13:50.360 --> 00:13:52.580
BURCU DOGAN: So as I mentioned,
in order to get a

00:13:52.580 --> 00:13:54.150
token, you need to [INAUDIBLE]

00:13:54.150 --> 00:13:56.460
to a user account name.

00:13:56.460 --> 00:14:00.040
In this case, what I'm doing,
firstly, in the sample, is I'm

00:14:00.040 --> 00:14:06.330
starting an activity to
pick a user here.

00:14:06.330 --> 00:14:11.030
So there should be multiple
users on the phones.

00:14:11.030 --> 00:14:13.020
A user can switch
back and forth

00:14:13.020 --> 00:14:14.770
between different accounts.

00:14:14.770 --> 00:14:20.290
So once a user has picked
one, we are here.

00:14:20.290 --> 00:14:24.460
And this callback, what I'm
doing is actually starting two

00:14:24.460 --> 00:14:28.470
asynchronous tasks to retrieve
first the exchange code and

00:14:28.470 --> 00:14:30.020
the JSON web token.

00:14:30.020 --> 00:14:33.726
So let's go what we're
doing here and see

00:14:33.726 --> 00:14:35.390
what we're doing here.

00:14:35.390 --> 00:14:40.860
So in order to retrieve a
code, what we do is just

00:14:40.860 --> 00:14:43.102
formatting this code
in the format

00:14:43.102 --> 00:14:45.750
that I mentioned before.

00:14:45.750 --> 00:14:50.140
So instead of an access token,
what it will do is to retrieve

00:14:50.140 --> 00:14:52.000
a code, right?

00:14:52.000 --> 00:14:53.064
NICHOLAS GARNIER: Authorization
code, yeah, [?

00:14:53.064 --> 00:14:53.890
to know what to authorize
your code. ?]

00:14:53.890 --> 00:14:56.750
BURCU DOGAN: By the way,
your user is not--

00:14:56.750 --> 00:15:00.560
having given you enough
permissions before, it will

00:15:00.560 --> 00:15:03.164
show a user recoverable
auth exception.

00:15:03.164 --> 00:15:04.690
NICHOLAS GARNIER: Yeah.

00:15:04.690 --> 00:15:07.830
So this is if the user has
never granted that

00:15:07.830 --> 00:15:11.240
authorization to the app,
neither on the web version of

00:15:11.240 --> 00:15:12.020
your web app?

00:15:12.020 --> 00:15:12.870
BURCU DOGAN: Yeah, yeah.

00:15:12.870 --> 00:15:15.205
NICHOLAS GARNIER: Nor on
the Android version.

00:15:15.205 --> 00:15:16.990
BURCU DOGAN: And for the scopes,
you have passed.

00:15:16.990 --> 00:15:18.820
NICHOLAS GARNIER: For that
exact list of scopes.

00:15:18.820 --> 00:15:19.120
BURCU DOGAN: Yeah.

00:15:19.120 --> 00:15:22.490
So what you can do here is
that this exception is an

00:15:22.490 --> 00:15:23.740
[? intent. ?]

00:15:23.740 --> 00:15:28.500
So regularly it's the same
while you're trying to

00:15:28.500 --> 00:15:31.300
retrieve an access
token, right?

00:15:31.300 --> 00:15:36.050
If the user hasn't given you
enough permissions, you start

00:15:36.050 --> 00:15:39.350
a new activity for the dialog.

00:15:39.350 --> 00:15:40.450
NICHOLAS GARNIER: Yeah.

00:15:40.450 --> 00:15:44.020
Basically, the user will get
a nice native authorization

00:15:44.020 --> 00:15:47.992
dialog on their Android device
where they can simply approve

00:15:47.992 --> 00:15:53.830
or reject the authorization that
the app is asking for.

00:15:53.830 --> 00:15:54.497
BURCU DOGAN: That's true.

00:15:54.497 --> 00:16:00.750
So once a user has given access,
I'm going to check if

00:16:00.750 --> 00:16:04.125
the user has really given
access to us or not.

00:16:04.125 --> 00:16:06.880
So in this case, if it's
yes, I'm actually

00:16:06.880 --> 00:16:10.180
retrying the same request.

00:16:10.180 --> 00:16:13.616
So in this case, instead of this
exception, I will be able

00:16:13.616 --> 00:16:15.310
to retrieve the code.

00:16:15.310 --> 00:16:21.650
And what I'm basically doing
here is just, put it on the

00:16:21.650 --> 00:16:23.420
application's UI.

00:16:23.420 --> 00:16:26.653
But you need to pass it
to your web server.

00:16:26.653 --> 00:16:26.660
NICHOLAS GARNIER: Yeah.

00:16:26.660 --> 00:16:29.690
That's when you do an HTTP
request to send it to your

00:16:29.690 --> 00:16:32.065
server side, which will exchange
it, basically.

00:16:32.065 --> 00:16:32.855
BURCU DOGAN: Yeah.

00:16:32.855 --> 00:16:36.160
I know another case in order to
retrieve a JSON web token,

00:16:36.160 --> 00:16:40.200
what you do is to format
the scope.

00:16:40.200 --> 00:16:42.693
In this case here, I'm
highlighting it.

00:16:42.693 --> 00:16:43.056
NICHOLAS GARNIER: Yeah.

00:16:43.056 --> 00:16:47.380
And again, catching the
exception with this.

00:16:47.380 --> 00:16:50.900
If it's never been approved
before, if the authorization

00:16:50.900 --> 00:16:53.420
has never been granted before,
and it probably works the same

00:16:53.420 --> 00:16:54.145
way as that.

00:16:54.145 --> 00:16:54.430
Correct?

00:16:54.430 --> 00:16:55.282
BURCU DOGAN: Yeah.

00:16:55.282 --> 00:16:55.710
NICHOLAS GARNIER: OK.

00:16:55.710 --> 00:16:57.430
BURCU DOGAN: So yeah,
it will return back

00:16:57.430 --> 00:16:59.420
to this line again.

00:16:59.420 --> 00:17:03.280
And I will be retrying again.

00:17:03.280 --> 00:17:05.609
So yeah.

00:17:05.609 --> 00:17:08.359
And it will retrieve
a JSON web token.

00:17:08.359 --> 00:17:12.900
And you can pass it to
your web server.

00:17:12.900 --> 00:17:15.790
And your web server
can resolve the

00:17:15.790 --> 00:17:16.942
identity of the user.

00:17:16.942 --> 00:17:17.049
NICHOLAS GARNIER: Yep.

00:17:17.049 --> 00:17:17.844
BURCU DOGAN: Yeah?

00:17:17.844 --> 00:17:18.319
NICHOLAS GARNIER: Cool.

00:17:18.319 --> 00:17:20.950
So yeah.

00:17:20.950 --> 00:17:25.680
Maybe we're done with
the documentation.

00:17:25.680 --> 00:17:26.435
BURCU DOGAN: This quick
sample code.

00:17:26.435 --> 00:17:27.349
NICHOLAS GARNIER: And the
simple code here.

00:17:27.349 --> 00:17:32.351
So basically, let's talk about,
in general, what is it

00:17:32.351 --> 00:17:34.480
good for, what are the
advantages of using that

00:17:34.480 --> 00:17:37.470
feature against what was
possible before.

00:17:37.470 --> 00:17:39.170
So in my understanding--

00:17:39.170 --> 00:17:43.650
and you can let me know
if you agree--

00:17:43.650 --> 00:17:46.120
this is very nice, because
it's going to provide a

00:17:46.120 --> 00:17:49.180
completely Android native
experience to your users,

00:17:49.180 --> 00:17:52.780
while still keeping two
client IDs in sync.

00:17:52.780 --> 00:17:57.100
So what developers were doing
before, previously to this,

00:17:57.100 --> 00:18:00.640
some were using a web view on
their Android app to start an

00:18:00.640 --> 00:18:04.690
OAuth2 flow using the
[INAUDIBLE] of their web apps

00:18:04.690 --> 00:18:07.850
to have a common client ID,
which wasn't very nice,

00:18:07.850 --> 00:18:12.620
because the user had to log-in
again inside the web flow.

00:18:12.620 --> 00:18:15.173
There, you'll get a very, very
nice native experience because

00:18:15.173 --> 00:18:16.410
of those native pop-ups.

00:18:16.410 --> 00:18:19.785
The user is already signed in
to his Android machine.

00:18:19.785 --> 00:18:22.680
He can very, very
quickly approve.

00:18:22.680 --> 00:18:26.595
And he will still get
auto-approval on the website,

00:18:26.595 --> 00:18:28.000
if you have also
web components.

00:18:28.000 --> 00:18:28.300
BURCU DOGAN: Yeah.

00:18:28.300 --> 00:18:31.370
It's a seamless experience for
the user, first of all.

00:18:31.370 --> 00:18:33.590
And we enabled [INAUDIBLE]

00:18:33.590 --> 00:18:37.350
was basically not available
before.

00:18:37.350 --> 00:18:41.612
So yeah, that's basically it.

00:18:41.612 --> 00:18:45.180
And Google used a sample, so
we're actually looking for

00:18:45.180 --> 00:18:47.260
developer feedback.

00:18:47.260 --> 00:18:52.750
These two tokens are a little
bit more experimental.

00:18:52.750 --> 00:19:00.544
And maybe, in the future, we
can expand the OAuth2 spec.

00:19:00.544 --> 00:19:00.960
NICHOLAS GARNIER: Yeah.

00:19:00.960 --> 00:19:04.450
It's basically like a workaround
around the OAuth2

00:19:04.450 --> 00:19:09.163
specs, because OAuth2 has never
really defined a way to

00:19:09.163 --> 00:19:10.890
do cross-client authorization.

00:19:10.890 --> 00:19:11.200
BURCU DOGAN: That's true.

00:19:11.200 --> 00:19:13.090
NICHOLAS GARNIER: So this
is our implementation,

00:19:13.090 --> 00:19:15.280
our way to do it.

00:19:15.280 --> 00:19:16.410
We hope you like it.

00:19:16.410 --> 00:19:18.710
If you'd like to give us some
feedback, please have a look

00:19:18.710 --> 00:19:22.765
at our code sample on our Github
Google Drive page.

00:19:25.310 --> 00:19:27.030
You can leave comments
there, I guess.

00:19:27.030 --> 00:19:27.330
BURCU DOGAN: Yeah.

00:19:27.330 --> 00:19:29.372
You can file issues, if
there's a problem.

00:19:29.372 --> 00:19:30.730
And you can contribute back.

00:19:30.730 --> 00:19:31.220
NICHOLAS GARNIER: Yeah.

00:19:31.220 --> 00:19:34.370
We'll be happy to hear what you
have to say about this.

00:19:34.370 --> 00:19:34.520
All right.

00:19:34.520 --> 00:19:36.280
Is there anything else
that you'd like

00:19:36.280 --> 00:19:37.522
to talk about, Burcu?

00:19:37.522 --> 00:19:39.420
BURCU DOGAN: I think
that's it.

00:19:39.420 --> 00:19:42.340
NICHOLAS GARNIER: OK, cool.

00:19:42.340 --> 00:19:45.530
Then thanks, very much,
guys, or everybody.

00:19:45.530 --> 00:19:46.290
BURCU DOGAN: Thanks,
for watching.

00:19:46.290 --> 00:19:48.230
NICHOLAS GARNIER: Guys and
girls, for watching.

00:19:48.230 --> 00:19:51.580
And we hope to see
you another time.

00:19:51.580 --> 00:19:54.932
So it was Nicholas and Burcu,
live from Zurich.

00:19:54.932 --> 00:19:55.880
All right, bye-bye.

00:19:55.880 --> 00:19:57.130
BURCU DOGAN: Bye.

00:20:03.680 --> 00:20:11.872
[MUSIC PLAYING]

