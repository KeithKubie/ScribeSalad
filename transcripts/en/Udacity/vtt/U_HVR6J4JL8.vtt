WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.000
The next question comes from Luca.

00:00:04.000 --> 00:00:09.000
Luca wants to know when work with a compiler is really, really heavy

00:00:09.000 --> 00:00:13.000
and you have a really long regular expression, is there any way of dumping out

00:00:13.000 --> 00:00:18.000
the final set of these low level machine instructions so they can be culled later.

00:00:18.000 --> 00:00:23.000
Yep. Okay. That's a great question. A couple answers to that.

00:00:23.000 --> 00:00:29.000
One is that within the regular expression module, the re module in Python,

00:00:29.000 --> 00:00:33.000
there is a compile statement that takes a string in

00:00:33.000 --> 00:00:37.000
and returns a compiled version of that regular expression.

00:00:37.000 --> 00:00:43.000
So if you're running your program once, you can compile that regular expression once

00:00:43.000 --> 00:00:47.000
at the very top of your program then use the compiled expression each time.

00:00:47.000 --> 00:00:51.000
Now, if you do that explicitly, then you're all set.

00:00:51.000 --> 00:00:55.000
If you don't, the regular expression module does most of the work for you,

00:00:55.000 --> 00:01:01.000
because what it does is it keeps a little cache--it does something like memoize

00:01:01.000 --> 00:01:06.000
and keeps the last few regular expression that's done and says, I've seen this string before.

00:01:06.000 --> 00:01:12.000
I know what it compiles to. I'll just fetch that compiled object. It does that automatically.

00:01:12.000 --> 00:01:14.000
That's within one run of your program.

00:01:14.000 --> 00:01:18.000
Now, another thing to think about is between runs of your program.

00:01:18.000 --> 00:01:22.000
What if you've compiled everything, and then you don't want to have the startup time

00:01:22.000 --> 00:01:25.000
of compiling it over again?

00:01:25.000 --> 00:01:30.000
There's another module called pickle. Well, what are pickles?

00:01:30.000 --> 00:01:34.000
They're ways of storing cucumbers for a long time so they don't get rotten.

00:01:34.000 --> 00:01:36.000
That's what the pickle module does.

00:01:36.000 --> 00:01:41.000
It takes an object that exists within the running Python interpreter

00:01:41.000 --> 00:01:46.000
and writes it out to disk in a form that can be read back in.

