WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:08.240
 Music [MUSIC PLAYING] 

00:00:08.240 --> 00:00:12.060
 Hello everyone, my name is Fred Chung, the Google developer's instructor Hello, my name is Fred Chung, developer advocate at Google. 

00:00:12.060 --> 00:00:15.090
 This is the first episode of the two series of DevByte series. This is the first of a two-part DevByte series covering 

00:00:15.090 --> 00:00:20.230
 To introduce the Android media router framework in the support library. 

00:00:20.230 --> 00:00:22.600
 Enjoy it has become thin common for users on tablets and smartphones today 

00:00:22.600 --> 00:00:27.110
 Video and music have become very popular to stream movies or play music from their tablets or smart phones. 

00:00:27.110 --> 00:00:29.100
 For example, at home in the living room, for instance, 

00:00:29.100 --> 00:00:31.390
 Maybe you will use some external speakers, you may want to make use of those external speakers 

00:00:31.390 --> 00:00:36.990
 Or support a Wi-Fi monitor to enjoy the content in your personal media library or Wi-Fi displays to enjoy your personal library of media content. 

00:00:36.990 --> 00:00:41.950
 Android provides a flexible media routing framework for apps (app). a flexible media router framework for any apps 

00:00:41.950 --> 00:00:47.060
 Enable them to cast media content to support its external devices for playback. 

00:00:47.060 --> 00:00:49.680
 In this section we will discuss media routing In this episode, we are going to talk about the media 

00:00:49.680 --> 00:00:52.510
 This is the application's media layer router, which is a mediation layer for apps 

00:00:52.510 --> 00:00:55.550
 Used to deliver media content to supported devices to cast media content to supported devices. 

00:00:55.550 --> 00:00:59.430
 The path to the device is called the paths to these devices are known as media routes. 

00:00:59.430 --> 00:01:01.480
 There are many APIs provided in the upper media routing. At a high level, the media router 

00:01:01.480 --> 00:01:04.879
 Used to generate the delivery button offers APIs to render the cast buttons, 

00:01:04.879 --> 00:01:07.080
 Discover and select media routes, discover and select media routes, [? preread ?] 

00:01:07.080 --> 00:01:10.130
 Ability and the capabilities of the routes, and control 

00:01:10.130 --> 00:01:14.860
 Intent-based protocol-controlled remote playback via an intent-based protocol. 

00:01:14.860 --> 00:01:16.390
 In the next paragraph we will discuss media routing providers In the next episode, we are going 

00:01:16.390 --> 00:01:18.890
 In the next paragraph we will discuss media routing providers to explore media route providers, which 

00:01:18.890 --> 00:01:21.690
 That is a package of Android and additional media is a component that encapsulates the underlying 

00:01:21.690 --> 00:01:25.410
 The component of the underlying communication between devices is communication between Android and external media devices. 

00:01:25.410 --> 00:01:28.630
 Device manufacturers can implement their own MRP (Media Routing Provider) Device manufacturers can implement their own MRPs 

00:01:28.630 --> 00:01:32.150
 Make it a media route on Android in order to publish themselves as media routes on Android. 

00:01:32.150 --> 00:01:34.750
 For example, Chromecast (Google TV Stick) is in the Google Cast SDK For example, Chromecast has implemented 

00:01:34.750 --> 00:01:40.030
 Implemented a media routing provider that allows applications to use an MRP in the Google Cast SDK through which apps can integrate with. 

00:01:40.030 --> 00:01:42.820
 Use this architecture program basically with this architecture, apps are essentially 

00:01:42.820 --> 00:01:46.510
 Decoupled from underlying transport implementations 

00:01:46.510 --> 00:01:48.545
 Decoupled of the media routes. 

00:01:48.545 --> 00:01:50.670
 Now let's look at some implementation details. We're going to look at some implementation details. 

00:01:50.670 --> 00:01:52.580
 But before I start, I want to explain But before doing that, I wanted to call out 

00:01:52.580 --> 00:01:55.400
 The media routing framework we are talking about now is in the support class library that the media router framework we are focusing here 

00:01:55.400 --> 00:01:59.150
 That means it is compatible with is in the support library, which means that it is backward 

00:01:59.150 --> 00:02:02.260
 Android 2.1 and above compatible with Android 2.1 and above. 

00:02:02.260 --> 00:02:05.100
 At the same time, don't let the media routing framework and media routing in the Android framework and let's not mix it up with the media router in the Android 

00:02:05.100 --> 00:02:07.380
 Messed up the framework. 

00:02:07.380 --> 00:02:10.220
 To initiate media routing, the user when initializing media routing 

00:02:10.220 --> 00:02:12.940
 The user clicks on the Cast button and clicks on the Cast button, which typically 

00:02:12.940 --> 00:02:16.010
 Generally displayed on the ActionBar is placed on the action bar. 

00:02:16.010 --> 00:02:17.500
 By button the user can Through the button, the user would 

00:02:17.500 --> 00:02:21.240
 Select a player to disconnect to be able to select a media route, disconnect from the route, 

00:02:21.240 --> 00:02:25.532
 Control remote playback and other control playback on a connected route, and so on. 

00:02:25.532 --> 00:02:29.250
 Add a Cast button to the ActionBar via One way to add the Cast button in the action bar 

00:02:29.250 --> 00:02:32.470
 Add action provider manual item it points to is add an action provider manual item pointing 

00:02:32.470 --> 00:02:36.100
 Media routing action provider class to the class media route action provider. 

00:02:36.100 --> 00:02:38.850
 Then in the menu initialization code, Then, in the menu initialization code, 

00:02:38.850 --> 00:02:41.000
 Set the action provider menu item associate menu item action provider 

00:02:41.000 --> 00:02:44.300
 Associated to a media route selector object with a media route selector object. 

00:02:44.300 --> 00:02:48.540
 The router is essentially a Filter (filter) that filters media routes. Route selector is basically a filter for media route capabilities. 

00:02:48.540 --> 00:02:51.990
 The application can specify the category of media routing An app can specify categories of media routes and points 

00:02:51.990 --> 00:02:53.720
 Then automatically select the available player it can work with. 

00:02:53.720 --> 00:02:56.160
 This framework uses the selector The framework uses the selector to present 

00:02:56.160 --> 00:02:58.970
 You can only show the user the appropriate playback route only the appropriate media routes to the user. 

00:02:58.970 --> 00:03:03.050
 For example, if an application requests a video streaming function, For example, if an app asks for video streaming capability, 

00:03:03.050 --> 00:03:07.130
 The system will not provide the user with audio media routing the system won't present audio-only media routes to the user. 

00:03:07.130 --> 00:03:09.080
 There are many predefined categories There are several predefined categories, 

00:03:09.080 --> 00:03:13.130
 Including remote control of audio and video streams including remote playback, audio streaming, and video streaming. 

00:03:13.130 --> 00:03:18.670
 Of course, the type of customization can also be defined by MRP, custom ones can also be defined by the MRPs. 

00:03:18.670 --> 00:03:21.060
 Now let's look at the initialization of the media routing object Let's have a look at the initialization of the media 

00:03:21.060 --> 00:03:25.760
 This object maintains the entire state of the media route, which maintains the overall state of media routing. 

00:03:25.760 --> 00:03:28.440
 Once you've gotten a reference to the singleton media router when you reference a single media routing object 

00:03:28.440 --> 00:03:32.530
 You want to register the media route callback, it will object, you want to register the media router callback, which 

00:03:32.530 --> 00:03:34.910
 Providing events on media route changes, 

00:03:34.910 --> 00:03:39.720
 For example, routing custom adjustment volume such as route selections, modifications, and volume changes. 

00:03:39.720 --> 00:03:42.930
 You can find out more about the API reference for details by using the API guide. 

00:03:42.930 --> 00:03:46.490
 The specific callback flag in this code, this this snippet, the particular callback flag 

00:03:46.490 --> 00:03:51.360
 Will cause the system to immediately search for available media routes. The system to immediately discover available media routes. 

00:03:51.360 --> 00:03:54.490
 Keep in mind that route search may contain network calls. Keep in mind that route discovery may involved network 

00:03:54.490 --> 00:03:56.470
 So when calling calls, and therefore you should be 

00:03:56.470 --> 00:03:59.765
 After searching the route, don't forget to diligent in removing a callback when the route discovery is 

00:03:59.765 --> 00:04:01.000
 Delete callback no longer needed in your app. 

00:04:03.620 --> 00:04:06.160
 Another point to note is that if you use Fragment, I also want to point out that if you're using fragments, 

00:04:06.160 --> 00:04:09.180
 Another option is to use Media Route Discovery with Media Route Discovery. 

00:04:09.180 --> 00:04:14.730
 Fragment gives the same hook for the callback registration, which giv es you the same hooks for callback registration. 

00:04:14.730 --> 00:04:17.630
 Once the user selects a media player, Once a media route is selected by the user, 

00:04:17.630 --> 00:04:22.140
 The application can remotely control the play on the terminal. The app can begin issuing remote playback controls to the endpoint. 

00:04:22.140 --> 00:04:24.140
 The instructions are asynchronous, The indications are asynchronous, 

00:04:24.140 --> 00:04:28.620
 So consider that the media terminal may be remote. It makes sense considering media endpoints may be remote. 

00:04:28.620 --> 00:04:30.480
 The media routing framework defines the media router framework defines 

00:04:30.480 --> 00:04:33.710
 An intent-based protocol for basic playback controls based on the intent protocol 

00:04:33.710 --> 00:04:36.420
 For example, play pause or jump to such as Play, Pause, or Seek. 

00:04:36.420 --> 00:04:40.130
 You can find your definitions of the action and extra parameters in the Media Control Intent class. 

00:04:40.130 --> 00:04:44.390
 The definition of actions and additional parameters in the media control intent class. 

00:04:44.390 --> 00:04:46.870
 This code shows This snippet illustrates the indication 

00:04:46.870 --> 00:04:51.370
 The basic remote play command first uses the category remote value where the basic remote playback where first, it constructs an intent 

00:04:51.370 --> 00:04:53.390
 The appropriate action constructs a with proper action in category values 

00:04:53.390 --> 00:04:56.720
 Intent and media [URI] as well as the [? URI ?] of the media. 

00:04:56.720 --> 00:05:01.550
 Then check if the selected route can handle that request. Then then checks if the selected route is capable handling such request. 

00:05:01.550 --> 00:05:04.930
 Finally start Intent It finally fires off the intent. 

00:05:04.930 --> 00:05:07.040
 The framework will report the results through the asynchronous callback framework 

00:05:07.040 --> 00:05:10.270
 The result of the invocation via the asynchronous callback. 

00:05:10.270 --> 00:05:11.990
 There is also a good practice where not included in this snippet, 

00:05:11.990 --> 00:05:14.780
 But it is not good practice to account for situations where 

00:05:14.780 --> 00:05:17.540
 That is, if remote playback is not available, remote playback is not possible, in which case 

00:05:17.540 --> 00:05:21.970
 Your program should switch back to local play your app should fall back to the local playback. 

00:05:21.970 --> 00:05:24.010
 Ok today, we mainly from the perspective of application casting (That's it for an overview of media router 

00:05:24.010 --> 00:05:26.490
 Introduces an overview of media routing from an app casting prospective. 

00:05:26.490 --> 00:05:28.330
 If you have time, you can check out the documentation and examples in this section, Have a look at the docs and samples. 

00:05:28.330 --> 00:05:31.570
 You can also keep an eye on the media routing provider and stay tuned for the episode on media route providers. 

00:05:31.570 --> 00:05:34.520
 Thank you for watching the happy Thanks for watching and happy casting. 

