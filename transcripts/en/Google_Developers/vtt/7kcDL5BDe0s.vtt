WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.475
[MUSIC PLAYING]

00:00:08.920 --> 00:00:10.220
GUS CLASS: Hello, GDD Europe.

00:00:10.220 --> 00:00:11.340
Thank you for coming out.

00:00:11.340 --> 00:00:13.385
And thank you for
coming in for my talk.

00:00:13.385 --> 00:00:14.840
I'm Gus Class.

00:00:14.840 --> 00:00:18.500
And I'm a developer programs
engineer on the Google Cloud

00:00:18.500 --> 00:00:19.955
IoT Core product.

00:00:19.955 --> 00:00:22.330
And today, I'm going to be
talking about Google Cloud IoT

00:00:22.330 --> 00:00:23.420
Core.

00:00:23.420 --> 00:00:25.790
This talk is it
technical deep dive.

00:00:25.790 --> 00:00:28.520
This means that I don't be
starting at the high level,

00:00:28.520 --> 00:00:30.650
going over the architecture
of the products,

00:00:30.650 --> 00:00:32.772
and then covering
the product features,

00:00:32.772 --> 00:00:34.730
and then finishing low
level by just giving you

00:00:34.730 --> 00:00:38.360
a quick demo with the product.

00:00:38.360 --> 00:00:40.250
I want to warn you
before I get through this

00:00:40.250 --> 00:00:42.810
is that I'm going to be
covering a whole lot of things.

00:00:42.810 --> 00:00:44.390
And as an unfortunate
side effect,

00:00:44.390 --> 00:00:47.960
the slides came out a little bit
denser than I would have liked.

00:00:47.960 --> 00:00:49.910
So you may be tempted
to read all the material

00:00:49.910 --> 00:00:52.580
on the slides and all
the text on the diagrams,

00:00:52.580 --> 00:00:54.270
but please resist.

00:00:54.270 --> 00:00:55.119
It's a trap.

00:00:55.119 --> 00:00:57.410
So I'm going to do my best
to make the slides available

00:00:57.410 --> 00:00:58.710
shortly after the talk.

00:00:58.710 --> 00:01:01.460
So you can take it all in,
and you can take your time,

00:01:01.460 --> 00:01:04.489
and enjoy the content of
the slides, and look at it

00:01:04.489 --> 00:01:06.810
in more detail.

00:01:06.810 --> 00:01:08.821
The whole thing is going
to be streamed as well.

00:01:08.821 --> 00:01:09.570
And it's recorded.

00:01:09.570 --> 00:01:12.590
So don't feel like you
need to take pictures.

00:01:12.590 --> 00:01:15.170
If something really kind of
jumps out at you as important,

00:01:15.170 --> 00:01:17.840
write that down and
use it as a takeaway.

00:01:17.840 --> 00:01:20.750
But just kind of let
it go along as it goes.

00:01:20.750 --> 00:01:24.050
And understand that we're
covering a lot of material

00:01:24.050 --> 00:01:24.567
here.

00:01:24.567 --> 00:01:26.525
So let's start with some
foundational concepts.

00:01:29.150 --> 00:01:32.090
If you saw a talk before on
IoT, the speaker probably

00:01:32.090 --> 00:01:36.500
start with something to
the effect of in X years,

00:01:36.500 --> 00:01:39.020
you're going to have
more devices connected

00:01:39.020 --> 00:01:41.150
to the internet than people.

00:01:41.150 --> 00:01:45.500
The reality is that
this event horizon

00:01:45.500 --> 00:01:47.120
has long since passed us.

00:01:47.120 --> 00:01:49.100
And we're starting to
see, instead, like,

00:01:49.100 --> 00:01:51.440
a trend where there
are going to be

00:01:51.440 --> 00:01:54.140
more connected devices than
there are devices that are not

00:01:54.140 --> 00:01:55.040
connected.

00:01:55.040 --> 00:01:57.370
And so is does IoT really?

00:01:57.370 --> 00:02:00.020
IoT is taking devices that were
not traditionally connected

00:02:00.020 --> 00:02:04.160
to the internet and then adding
internet connectivity to them.

00:02:04.160 --> 00:02:08.600
And when you talk about IoT,
you have to kind of scope it.

00:02:08.600 --> 00:02:12.360
Because there's a lot of
different types of IoT.

00:02:12.360 --> 00:02:14.660
And I like to think about it
in these three categories.

00:02:14.660 --> 00:02:16.460
You've got homebrew
and enthusiast.

00:02:16.460 --> 00:02:19.370
So you've got people that are
taking devices like Arduinos.

00:02:19.370 --> 00:02:21.500
And then you're having
them internet connected.

00:02:21.500 --> 00:02:23.000
And then these
internet connectivity

00:02:23.000 --> 00:02:25.254
gives you capabilities that
you didn't have before.

00:02:25.254 --> 00:02:27.170
So for example, I like
to think of it as like,

00:02:27.170 --> 00:02:31.080
I had a smart flower
watering system.

00:02:31.080 --> 00:02:33.740
And before I was
using data logging.

00:02:33.740 --> 00:02:35.270
And now I have
internet connectivity

00:02:35.270 --> 00:02:36.710
to do that data logging.

00:02:36.710 --> 00:02:38.360
And Google provides
a lot of this stuff

00:02:38.360 --> 00:02:41.780
to hobbyists in the AIY product.

00:02:41.780 --> 00:02:46.190
And then the other area that
we have is consumer in devices.

00:02:46.190 --> 00:02:47.840
And so this is
things like you've

00:02:47.840 --> 00:02:50.390
got a fire alarm or
a smoke detector.

00:02:50.390 --> 00:02:52.430
And then you
internet connect it.

00:02:52.430 --> 00:02:54.440
So then it can talk
to other devices

00:02:54.440 --> 00:02:56.630
and do intelligent things.

00:02:56.630 --> 00:02:59.207
And so Google offers a lot
of these things with Nest.

00:02:59.207 --> 00:03:01.040
And then the last thing
I want to talk about

00:03:01.040 --> 00:03:03.710
is industrial and
commercial domain.

00:03:03.710 --> 00:03:06.760
And so this is where you have
something like a factory where

00:03:06.760 --> 00:03:09.260
you would have, traditionally,
just some mechanical assembly

00:03:09.260 --> 00:03:10.100
line.

00:03:10.100 --> 00:03:12.200
And then now we've
taken that factory

00:03:12.200 --> 00:03:14.180
and added a lot
of sensors to it.

00:03:14.180 --> 00:03:16.580
And we've added a
lot of capabilities

00:03:16.580 --> 00:03:19.100
that we know what's
going on in that factory.

00:03:19.100 --> 00:03:21.997
And now we're taking
that data and then

00:03:21.997 --> 00:03:24.080
we're putting it into the
cloud, so that we can do

00:03:24.080 --> 00:03:25.430
intelligent things with that.

00:03:25.430 --> 00:03:28.190
And so that last domain
that I mentioned,

00:03:28.190 --> 00:03:30.350
industrial and
commercial, is really

00:03:30.350 --> 00:03:32.979
where Cloud IoT Core shines.

00:03:32.979 --> 00:03:34.520
And for the consumer
device features,

00:03:34.520 --> 00:03:36.950
you should really check
out Android Things.

00:03:36.950 --> 00:03:40.682
So why should you care
about Cloud IoT Core?

00:03:40.682 --> 00:03:42.140
I like to think
about it like this.

00:03:42.140 --> 00:03:45.080
If you like me, then you
did some homebrew and

00:03:45.080 --> 00:03:47.090
enthusiast-scale IoT.

00:03:47.090 --> 00:03:49.254
You were building a
device for just yourself.

00:03:49.254 --> 00:03:51.170
And so you weren't really
worried about things

00:03:51.170 --> 00:03:55.260
like delegating your devices,
securing it against attackers.

00:03:55.260 --> 00:03:57.980
Because you have sort of a
security through obscurity.

00:03:57.980 --> 00:03:59.630
And you have an audience of one.

00:03:59.630 --> 00:04:01.710
You know how to manage
that device and so forth.

00:04:01.710 --> 00:04:06.500
But what if you were building,
say, 1,000 devices, or 10,000

00:04:06.500 --> 00:04:09.080
devices, or you're moving
up to a million devices?

00:04:09.080 --> 00:04:11.720
And all of these devices need
to be set up, configured,

00:04:11.720 --> 00:04:13.820
provisioned, secured.

00:04:13.820 --> 00:04:16.610
And then you need to scale out,
so that when those devices are

00:04:16.610 --> 00:04:20.550
producing tons of data ingress
that you're able to handle it.

00:04:20.550 --> 00:04:23.000
And so this is
where Cloud shines.

00:04:23.000 --> 00:04:25.271
So we have these
systems where you

00:04:25.271 --> 00:04:27.770
don't have to worry about the
capacity that you're creating.

00:04:27.770 --> 00:04:30.620
The system will automatically
scale up and down to the needs

00:04:30.620 --> 00:04:31.770
that you have.

00:04:31.770 --> 00:04:34.584
And so this is why you should
care about Google Cloud IoT

00:04:34.584 --> 00:04:35.567
Core.

00:04:35.567 --> 00:04:37.400
So I'm going to give
you some background on,

00:04:37.400 --> 00:04:38.660
what is Cloud IoT Core?

00:04:38.660 --> 00:04:40.160
So just bear with
me as I tell you

00:04:40.160 --> 00:04:41.870
about the products
that are important.

00:04:41.870 --> 00:04:44.750
And then we'll be able to
get into the exciting usage

00:04:44.750 --> 00:04:47.330
scenarios that we
expect developers to do.

00:04:47.330 --> 00:04:49.940
So on the left I
have Cloud IoT Core.

00:04:49.940 --> 00:04:54.770
And currently, it's a way
of creating a registry where

00:04:54.770 --> 00:04:57.080
you can define where
devices are and then

00:04:57.080 --> 00:05:00.260
connecting your
constrained devices

00:05:00.260 --> 00:05:04.130
using MQTT to then
take your data

00:05:04.130 --> 00:05:05.960
and then put it into Pub/Sub.

00:05:05.960 --> 00:05:07.960
And once that data
is in Pub/Sub,

00:05:07.960 --> 00:05:10.079
your data is in Google's Cloud.

00:05:10.079 --> 00:05:12.370
And what that means is that
you can use Cloud Functions

00:05:12.370 --> 00:05:14.680
to trigger API calls.

00:05:14.680 --> 00:05:19.180
Or you can use Dataflow to
extract that data from Pub/Sub

00:05:19.180 --> 00:05:22.510
and then put it into a data
warehouse, such as Bigtable

00:05:22.510 --> 00:05:24.810
or BigQuery, and then
do data analytics on it.

00:05:24.810 --> 00:05:26.560
So I'm going to tell
you a little bit more

00:05:26.560 --> 00:05:29.410
about those products, so that
you can understand this better.

00:05:29.410 --> 00:05:31.500
So what is MQTT?

00:05:31.500 --> 00:05:35.110
If you've worked in
IoT before, you've

00:05:35.110 --> 00:05:36.820
probably heard about MQTT.

00:05:36.820 --> 00:05:40.480
It is a standard that was
designed by IBM in the '90s.

00:05:40.480 --> 00:05:44.410
And it allows you to securely
connect devices, and transmit

00:05:44.410 --> 00:05:48.250
data, and receive messages
from a published subscribe-like

00:05:48.250 --> 00:05:49.570
solution.

00:05:49.570 --> 00:05:52.690
It's a binary protocol, so it's
very efficient on the line.

00:05:52.690 --> 00:05:57.310
And it won't use as much power
or require as much processing

00:05:57.310 --> 00:05:59.710
power as a lot of
other protocols

00:05:59.710 --> 00:06:01.170
that you may be familiar with.

00:06:01.170 --> 00:06:02.920
And so it's sort of
the de facto standard,

00:06:02.920 --> 00:06:05.770
which is why Google adopted it.

00:06:05.770 --> 00:06:08.050
So what is Google Cloud Pub/Sub?

00:06:08.050 --> 00:06:11.410
Google Cloud Pub/Sub
is a very efficient,

00:06:11.410 --> 00:06:14.950
automatically managed scale to
solution for message publishing

00:06:14.950 --> 00:06:16.060
and subscribing.

00:06:16.060 --> 00:06:17.670
So you create these topics.

00:06:17.670 --> 00:06:19.630
And then you can
subscribe to those topics.

00:06:19.630 --> 00:06:21.190
And you can receive
payloads that

00:06:21.190 --> 00:06:23.350
were pushed into those topics.

00:06:23.350 --> 00:06:24.980
And it's globally distributed.

00:06:24.980 --> 00:06:26.090
And it's reliable.

00:06:26.090 --> 00:06:30.310
So when you send messages
through Google Cloud Pub/Sub,

00:06:30.310 --> 00:06:33.850
you know that they will be
received by the subscribers

00:06:33.850 --> 00:06:35.620
at least once.

00:06:35.620 --> 00:06:39.340
And so when you have this large,
globally-distributed system,

00:06:39.340 --> 00:06:41.230
you have to make
certain trade-offs.

00:06:41.230 --> 00:06:43.830
And one of those trade-offs is
that you don't know the order

00:06:43.830 --> 00:06:45.520
that the messages came in.

00:06:45.520 --> 00:06:46.900
Another is that
the messages only

00:06:46.900 --> 00:06:49.720
last inside of that store
for about seven days.

00:06:49.720 --> 00:06:51.220
So what do you do about that?

00:06:51.220 --> 00:06:52.300
And this is the
last product that I

00:06:52.300 --> 00:06:53.716
want to talk about
before we start

00:06:53.716 --> 00:06:55.310
talking about Architectures.

00:06:55.310 --> 00:06:56.320
So this is DataFlow.

00:06:56.320 --> 00:06:59.050
What DataFlow does
is it allows you

00:06:59.050 --> 00:07:02.200
to take the stream of messages
that come in through Pub/Sub,

00:07:02.200 --> 00:07:04.180
and then ensure they're
ordered it correctly,

00:07:04.180 --> 00:07:07.870
or make sure that they are
only once existing inside

00:07:07.870 --> 00:07:09.417
of your persistent data stores.

00:07:09.417 --> 00:07:11.750
And then you can take them
and put them in other places.

00:07:11.750 --> 00:07:15.980
So you can ETL from Pub/Sub
very easily using DataFlow.

00:07:15.980 --> 00:07:18.337
So what services are
in Cloud IoT Core?

00:07:18.337 --> 00:07:20.170
And this is what I
talked about very briefly

00:07:20.170 --> 00:07:22.720
in that first diagram showing
high-level architecture

00:07:22.720 --> 00:07:24.150
for Cloud IoT.

00:07:24.150 --> 00:07:25.810
There is a Device
Manager, which I

00:07:25.810 --> 00:07:28.510
like to think of as just
the identity solution.

00:07:28.510 --> 00:07:30.520
This Device Manager
knows which devices

00:07:30.520 --> 00:07:34.400
can connect to this bridge.

00:07:34.400 --> 00:07:39.384
And then it also will keep
track of the last time--

00:07:39.384 --> 00:07:41.050
all sorts of metadata
for those devices,

00:07:41.050 --> 00:07:42.850
such as the last
time it connected

00:07:42.850 --> 00:07:44.500
and the last time
that configuration

00:07:44.500 --> 00:07:46.050
was sent to a device.

00:07:46.050 --> 00:07:47.530
And the Device
Manager also allows

00:07:47.530 --> 00:07:49.300
you to send specific
configurations down

00:07:49.300 --> 00:07:49.900
to a device.

00:07:49.900 --> 00:07:52.310
And I'll talk more
about this in a minute.

00:07:52.310 --> 00:07:55.120
So the MQTT bridge
is something that

00:07:55.120 --> 00:07:57.610
works hand-in-hand
with the Device Manager

00:07:57.610 --> 00:08:00.610
to allow you to communicate
directly to a single Pub/Sub

00:08:00.610 --> 00:08:02.390
queue.

00:08:02.390 --> 00:08:05.680
And so given these
collections of services,

00:08:05.680 --> 00:08:08.830
you can then start to
create IoT solutions that

00:08:08.830 --> 00:08:11.840
are tailored to specific
domains or problems.

00:08:11.840 --> 00:08:15.910
And again, this goes back
to the commercial industrial

00:08:15.910 --> 00:08:17.710
applications first.

00:08:17.710 --> 00:08:20.650
And other architectures
and other platforms

00:08:20.650 --> 00:08:21.580
can use it as well.

00:08:21.580 --> 00:08:24.760
But when you think about this
in the context of Android

00:08:24.760 --> 00:08:26.860
Things and other
solutions, it's really

00:08:26.860 --> 00:08:29.346
well-tailored to
industrial applications.

00:08:29.346 --> 00:08:30.970
So the first thing
I want to talk about

00:08:30.970 --> 00:08:32.841
is telemetry analytics.

00:08:32.841 --> 00:08:34.299
And this is when
you have something

00:08:34.299 --> 00:08:37.360
like large numbers of
weather stations distributed

00:08:37.360 --> 00:08:40.690
around the world that are
each simultaneously recording

00:08:40.690 --> 00:08:43.919
temperature data, barometric
pressure data, or position data

00:08:43.919 --> 00:08:45.430
if they are moving around.

00:08:45.430 --> 00:08:47.710
And in this scenario,
what you typically have

00:08:47.710 --> 00:08:51.820
is all those devices
connecting with massive fan-in

00:08:51.820 --> 00:08:53.260
to Cloud IoT Core.

00:08:53.260 --> 00:08:56.380
And then Cloud IoT Core is going
to work one-to-one with Pub/Sub

00:08:56.380 --> 00:08:59.410
to take that data and then
put it into Google's Cloud.

00:08:59.410 --> 00:09:02.050
And then you would
typically use DataFlow

00:09:02.050 --> 00:09:03.460
to take that data
and then put it

00:09:03.460 --> 00:09:06.040
into a more persistent
place for analytics

00:09:06.040 --> 00:09:07.582
in Bigtable or BigQuery.

00:09:07.582 --> 00:09:09.040
And then once that's
there, you can

00:09:09.040 --> 00:09:12.820
use Google's analytic products,
such as Datalab and Data

00:09:12.820 --> 00:09:14.890
Studio to readily
analyze your data,

00:09:14.890 --> 00:09:18.050
and then make
predictions, and so forth.

00:09:18.050 --> 00:09:20.470
So the second scenario
I want to talk about

00:09:20.470 --> 00:09:22.500
is device-to-device
communication.

00:09:22.500 --> 00:09:24.640
And so this is when
you have one device.

00:09:24.640 --> 00:09:27.070
And that device could be
an Android Things device.

00:09:27.070 --> 00:09:29.110
Or it could be a
memory-constrained device

00:09:29.110 --> 00:09:31.300
like an ESP8266.

00:09:31.300 --> 00:09:33.550
And that device is
then going to try

00:09:33.550 --> 00:09:36.640
to trigger another state on
another device to change.

00:09:36.640 --> 00:09:38.800
So we built a demo
around this where

00:09:38.800 --> 00:09:41.890
we had all of these
sensors inside of a room.

00:09:41.890 --> 00:09:44.440
And the sensors were redundant,
so that the objective

00:09:44.440 --> 00:09:48.557
was, when the room temperature
reached a certain temperature,

00:09:48.557 --> 00:09:50.140
we would then have
another device that

00:09:50.140 --> 00:09:51.820
would turn on a fan.

00:09:51.820 --> 00:09:54.090
And so in this scenario,
you'd have all these devices.

00:09:54.090 --> 00:09:55.840
And these devices could
be Android Things.

00:09:55.840 --> 00:09:58.480
Or they could be
memory-constrained devices.

00:09:58.480 --> 00:10:00.160
And then that
device would connect

00:10:00.160 --> 00:10:02.380
to Cloud IoT Core,
which would then

00:10:02.380 --> 00:10:05.740
pump the data into Pub/Sub,
which you can then aggregate

00:10:05.740 --> 00:10:08.160
and extract using DataFlow.

00:10:08.160 --> 00:10:10.220
And then you could
use a cloud function

00:10:10.220 --> 00:10:13.370
to go back to the Device
Manager for Cloud IoT Core

00:10:13.370 --> 00:10:16.085
to send a configuration
change to a second device.

00:10:16.085 --> 00:10:17.460
And then that
second device could

00:10:17.460 --> 00:10:20.250
have-- the configuration change
could say something like, turn

00:10:20.250 --> 00:10:23.824
on your fan, start pumping water
out of the room, and so forth.

00:10:23.824 --> 00:10:25.740
And so I'm going to show
you one more pattern.

00:10:25.740 --> 00:10:27.906
Then we're going to start
talking about the platform

00:10:27.906 --> 00:10:28.410
itself.

00:10:28.410 --> 00:10:31.540
And this last pattern is the
same thing that we had before,

00:10:31.540 --> 00:10:34.230
but I want to put in Android
Things device in there

00:10:34.230 --> 00:10:36.066
explicitly.

00:10:36.066 --> 00:10:37.440
Because we want
to have something

00:10:37.440 --> 00:10:39.480
like state change
shared or shared

00:10:39.480 --> 00:10:42.210
state between that
device and, say,

00:10:42.210 --> 00:10:47.560
an Android companion
app or other web views.

00:10:47.560 --> 00:10:49.140
So if you have some
sort of God view

00:10:49.140 --> 00:10:53.340
for, say, a warehouse
that has all of these fans

00:10:53.340 --> 00:10:56.610
and controls that get actuated,
you could share that state

00:10:56.610 --> 00:10:59.470
and then see that state
from a Firebase database.

00:10:59.470 --> 00:11:02.580
So in this scenario, I'll just
walk through it really quickly.

00:11:02.580 --> 00:11:03.990
You have this device.

00:11:03.990 --> 00:11:06.600
And then it connects
to Cloud IoT Core.

00:11:06.600 --> 00:11:09.120
And then Cloud IoT Core
will take that data

00:11:09.120 --> 00:11:12.360
and put it into Pub/Sub, which
then can go through DataFlow,

00:11:12.360 --> 00:11:15.330
which then it can directly
trigger state changes inside

00:11:15.330 --> 00:11:17.350
of that Firebase
real time database.

00:11:17.350 --> 00:11:19.630
And then because
the state change

00:11:19.630 --> 00:11:22.590
is consistent between that
database and Android Things,

00:11:22.590 --> 00:11:24.150
then the state
could be triggered

00:11:24.150 --> 00:11:25.660
to turn on a light bulb.

00:11:25.660 --> 00:11:27.450
So in this specific
example, I was

00:11:27.450 --> 00:11:30.990
thinking of the first device
or a collection of devices

00:11:30.990 --> 00:11:33.240
has something like a
photovoltaic sensor,

00:11:33.240 --> 00:11:36.990
so that when a room goes
dark, the lights turn on.

00:11:36.990 --> 00:11:40.110
And so this is the
foundation for kind

00:11:40.110 --> 00:11:43.200
of thinking about the ways
that you can use this platform

00:11:43.200 --> 00:11:45.150
to do all sorts
of powerful things

00:11:45.150 --> 00:11:48.469
that people want to do with IoT.

00:11:48.469 --> 00:11:50.010
So now it's time to
talk a little bit

00:11:50.010 --> 00:11:56.132
about the first service that
is enabled through Cloud IoT

00:11:56.132 --> 00:11:57.930
Core, the Device Manager.

00:11:57.930 --> 00:12:00.630
And so I like to think
about the Device Manager

00:12:00.630 --> 00:12:02.880
as an identity provider.

00:12:02.880 --> 00:12:05.010
And so what this
means is that it

00:12:05.010 --> 00:12:07.349
knows the devices and
their credentials that

00:12:07.349 --> 00:12:09.390
can connect to the service,
so that they can then

00:12:09.390 --> 00:12:12.180
stream their data to us.

00:12:12.180 --> 00:12:16.770
So the Device Manager
uses a resource model.

00:12:16.770 --> 00:12:19.740
And devices are defined by
using-- so there's a hierarchy.

00:12:19.740 --> 00:12:23.190
So you have each device
associated with configuration

00:12:23.190 --> 00:12:24.330
at the bottom.

00:12:24.330 --> 00:12:27.360
And that device
also will contain

00:12:27.360 --> 00:12:29.400
individual configuration.

00:12:29.400 --> 00:12:33.900
And then those devices are
placed into a registry, which

00:12:33.900 --> 00:12:35.860
contains all those devices.

00:12:35.860 --> 00:12:38.910
And then you can
programmatically

00:12:38.910 --> 00:12:41.130
add, remove, list, and
so forth these devices.

00:12:43.800 --> 00:12:49.380
So Registry is a way that
you can logically encapsulate

00:12:49.380 --> 00:12:51.840
devices into a store.

00:12:51.840 --> 00:12:55.170
And in doing so,
registries map devices

00:12:55.170 --> 00:12:59.040
from the protocol bridge
in Cloud Pub/Sub topics

00:12:59.040 --> 00:13:00.870
and subscriptions to Pub/Sub.

00:13:04.459 --> 00:13:06.000
So typically, what
you're going to do

00:13:06.000 --> 00:13:09.720
is you're going to have a
registry that map, then,

00:13:09.720 --> 00:13:11.072
to a Pub/Sub topic.

00:13:11.072 --> 00:13:12.780
And then you're going
to probably extract

00:13:12.780 --> 00:13:15.870
that data from that Pub/Sub
topic using DataFlow.

00:13:15.870 --> 00:13:18.270
And you're probably
going to want

00:13:18.270 --> 00:13:21.910
to have a single place where
all that data is going.

00:13:21.910 --> 00:13:25.290
And so we recommend that you
logically map everything just

00:13:25.290 --> 00:13:27.330
to a single Pub/Sub
topic and just

00:13:27.330 --> 00:13:29.970
have a single
registry per project.

00:13:29.970 --> 00:13:32.550
So before you can add
devices to a registry,

00:13:32.550 --> 00:13:34.590
you have to be able to
create that registry.

00:13:34.590 --> 00:13:37.110
And so we have all
of these solutions

00:13:37.110 --> 00:13:39.840
for creating registries,
listing registries,

00:13:39.840 --> 00:13:40.700
deleting registries.

00:13:40.700 --> 00:13:42.450
And you can do it
all programmatically,

00:13:42.450 --> 00:13:44.783
because we envision that
there's a lot of different ways

00:13:44.783 --> 00:13:46.230
that people will use this.

00:13:46.230 --> 00:13:49.140
In certain scenarios, you would
have a device manufacturer

00:13:49.140 --> 00:13:51.600
who is going to be
pre-provisioning

00:13:51.600 --> 00:13:52.910
all of your devices for you.

00:13:52.910 --> 00:13:54.660
And so you may want
to have them producing

00:13:54.660 --> 00:13:55.800
the registries for you.

00:13:55.800 --> 00:13:58.740
And so you can delegate
these permissions

00:13:58.740 --> 00:14:00.840
to a device manufacturer,
so that they

00:14:00.840 --> 00:14:02.820
can do that and manufacture.

00:14:02.820 --> 00:14:04.650
And then in other
scenarios, you're

00:14:04.650 --> 00:14:07.650
going to want to be able to do
the device provisioning later.

00:14:07.650 --> 00:14:11.220
And so in this way, we
also support that scenario.

00:14:11.220 --> 00:14:13.320
Before you can
connect a device, you

00:14:13.320 --> 00:14:16.920
have to create that device
inside a device registry.

00:14:16.920 --> 00:14:18.710
And so we have what
you would expect.

00:14:18.710 --> 00:14:22.650
It's a basic CRUD API for
creating, deleting, reading,

00:14:22.650 --> 00:14:24.990
and listing and so
forth your devices.

00:14:24.990 --> 00:14:27.230
And each of the devices,
when you create them,

00:14:27.230 --> 00:14:28.920
will have a unique
identifier that's

00:14:28.920 --> 00:14:31.990
associated with the device
that is returned from the API

00:14:31.990 --> 00:14:34.000
when you create that device.

00:14:34.000 --> 00:14:37.710
You can also get the device
and then get this information.

00:14:37.710 --> 00:14:39.900
But if you look in the
JSON representation,

00:14:39.900 --> 00:14:42.270
which is probably really
hard to see on the screen--

00:14:42.270 --> 00:14:44.640
but the JSON representation
has all of this meta data

00:14:44.640 --> 00:14:46.092
associated with the device.

00:14:46.092 --> 00:14:47.550
For example, you
know the last time

00:14:47.550 --> 00:14:49.530
that a configuration
was set to the device.

00:14:49.530 --> 00:14:53.910
And you know the last time the
device connected, and so forth.

00:14:53.910 --> 00:14:56.610
And so this is sort
of the magic of where

00:14:56.610 --> 00:14:59.760
the device or the Device
Manager comes in place.

00:14:59.760 --> 00:15:01.170
Because your device
is connecting

00:15:01.170 --> 00:15:03.300
and because we have
identity for that device,

00:15:03.300 --> 00:15:05.130
we know the last time
configuration changes

00:15:05.130 --> 00:15:07.920
came to that device and
information, such as the state

00:15:07.920 --> 00:15:09.730
of the device.

00:15:09.730 --> 00:15:13.680
So again, you can
delegate the permissions

00:15:13.680 --> 00:15:17.220
for device creation,
deletion, and so forth

00:15:17.220 --> 00:15:18.990
to your manufacturer
if you choose to.

00:15:18.990 --> 00:15:20.073
Or you can do it yourself.

00:15:23.000 --> 00:15:25.870
And so this is a good point
to talk about Identity.

00:15:25.870 --> 00:15:29.110
So Identity is knowing
which device has connected.

00:15:29.110 --> 00:15:31.340
And this is the magic
where all that metadata,

00:15:31.340 --> 00:15:34.030
such as the last heartbeat
that came from a device,

00:15:34.030 --> 00:15:38.020
is made available and things
like when configuration

00:15:38.020 --> 00:15:41.750
changes came down to a device.

00:15:41.750 --> 00:15:45.020
And so when you create
the identity for a device,

00:15:45.020 --> 00:15:50.800
you're going to use asymmetric
encryption to give Google

00:15:50.800 --> 00:15:54.580
your public key that is
associated with the device

00:15:54.580 --> 00:15:55.570
credential.

00:15:55.570 --> 00:15:58.060
And then your private key
will be on the device,

00:15:58.060 --> 00:16:00.340
so that you can use
that private key

00:16:00.340 --> 00:16:02.890
to create an encrypted
payload that you send

00:16:02.890 --> 00:16:04.680
to Google when you connect.

00:16:04.680 --> 00:16:09.700
And something that's kind
of special about our device

00:16:09.700 --> 00:16:11.230
configuration is
that we allow you

00:16:11.230 --> 00:16:15.100
to create multiple certificates
and then associate them

00:16:15.100 --> 00:16:17.849
with the device, so that
you can rotate and expire

00:16:17.849 --> 00:16:18.640
those certificates.

00:16:18.640 --> 00:16:21.040
So you would do
something like, I

00:16:21.040 --> 00:16:22.370
want to create a device today.

00:16:22.370 --> 00:16:24.370
And then I'm going to
create three certificates.

00:16:24.370 --> 00:16:26.860
The first certificate expires
in a year, the second, two,

00:16:26.860 --> 00:16:28.180
and then the third in three.

00:16:28.180 --> 00:16:32.110
And that way, you are
effectively rotating your keys

00:16:32.110 --> 00:16:33.790
for your device credentials.

00:16:33.790 --> 00:16:37.160
And I want to note, never
send anyone your private key.

00:16:37.160 --> 00:16:40.780
It's like just writing
your password down.

00:16:40.780 --> 00:16:41.420
OK.

00:16:41.420 --> 00:16:44.410
So device configuration
is the next thing

00:16:44.410 --> 00:16:46.120
I want to talk about.

00:16:46.120 --> 00:16:48.850
Every device, individually,
has a configuration

00:16:48.850 --> 00:16:51.550
associated with it that is
maintained by the Device

00:16:51.550 --> 00:16:52.540
Manager.

00:16:52.540 --> 00:16:56.372
And so what this means is
that you have something

00:16:56.372 --> 00:16:57.580
like the state of the device.

00:16:57.580 --> 00:16:59.920
Or if you wanted to
have the fan turned on,

00:16:59.920 --> 00:17:02.900
you could represent
that in binary data

00:17:02.900 --> 00:17:05.380
that's encoded as a JSON string.

00:17:05.380 --> 00:17:06.010
And

00:17:06.010 --> 00:17:08.460
But you could also
do something like use

00:17:08.460 --> 00:17:10.540
a machine learning
model that you pass down

00:17:10.540 --> 00:17:14.200
to a device that is stored
inside of binary data.

00:17:14.200 --> 00:17:15.880
And then that machine
learning model

00:17:15.880 --> 00:17:19.359
could be updated on the fly
with a configuration change.

00:17:19.359 --> 00:17:23.109
And so again, so device
configuration is binary data

00:17:23.109 --> 00:17:25.609
but you're welcome to encode
other data and send it as that.

00:17:25.609 --> 00:17:27.025
And we did this
so that people can

00:17:27.025 --> 00:17:29.740
have the flexibility for being
able to send all sorts of data

00:17:29.740 --> 00:17:31.630
down to their devices.

00:17:31.630 --> 00:17:35.740
And the Device Manager maintains
10 versions of configurations

00:17:35.740 --> 00:17:37.870
that you can roll back
if something goes wrong

00:17:37.870 --> 00:17:40.720
when you send out a
configuration change.

00:17:40.720 --> 00:17:45.460
And another technical detail of
device configuration is that,

00:17:45.460 --> 00:17:47.770
whenever your device
configuration is changed--

00:17:47.770 --> 00:17:50.860
so you send a new version of the
configuration associated with

00:17:50.860 --> 00:17:51.820
the device--

00:17:51.820 --> 00:17:53.590
that device will
receive a notification

00:17:53.590 --> 00:17:59.860
in its MQTT subscription that
contains the device change.

00:17:59.860 --> 00:18:02.500
And you also get the
configuration every time

00:18:02.500 --> 00:18:03.760
that you check.

00:18:03.760 --> 00:18:06.802
And developers can also
patch an old version

00:18:06.802 --> 00:18:08.260
and then do something
like rollback

00:18:08.260 --> 00:18:11.570
to it if you want to
use the API in that way.

00:18:11.570 --> 00:18:14.770
Anytime that a configuration
comes down to a device,

00:18:14.770 --> 00:18:19.330
the device will notify Google
that it has acknowledged

00:18:19.330 --> 00:18:20.770
that configuration change.

00:18:20.770 --> 00:18:23.470
And this is done because we
have at least once delivery

00:18:23.470 --> 00:18:24.004
of messages.

00:18:24.004 --> 00:18:26.170
And the configuration could
come down to your device

00:18:26.170 --> 00:18:28.580
more than once.

00:18:28.580 --> 00:18:32.110
So a couple more
details about Identity,

00:18:32.110 --> 00:18:35.680
when you connect to
our MQTT endpoint,

00:18:35.680 --> 00:18:40.120
you need to use TLS 1.1 or 1.2.

00:18:40.120 --> 00:18:43.289
And you need to use
MQTT version 3.1.1

00:18:43.289 --> 00:18:44.830
I encountered some
issues in the past

00:18:44.830 --> 00:18:46.930
with using the wrong version.

00:18:46.930 --> 00:18:49.480
And going back to
Pub/Sub, so Pub/Sub

00:18:49.480 --> 00:18:51.430
has at least once
delivery, but not

00:18:51.430 --> 00:18:53.980
exactly once delivery
is the trade off.

00:18:53.980 --> 00:18:58.150
So we don't support MQTT
QLS-2, instead, only QLS-1.

00:18:58.150 --> 00:19:01.660
So typically, the
way that you use MQTT

00:19:01.660 --> 00:19:05.170
is you specify the QLS when
you create a connection string.

00:19:05.170 --> 00:19:07.930
And so just make sure
that you're using MQTT 1,

00:19:07.930 --> 00:19:11.830
you're using QLS-1 and TLS 1.2.

00:19:11.830 --> 00:19:16.180
And so we make our
connection endpoint globally

00:19:16.180 --> 00:19:19.180
available at
mqqt.googleapis.com.

00:19:19.180 --> 00:19:22.670
And we support two ports, the
8883, which is the standard TLS

00:19:22.670 --> 00:19:26.170
port for MQTT, and
then port 443, which

00:19:26.170 --> 00:19:28.930
is more firewall-friendly.

00:19:28.930 --> 00:19:30.790
And so the last thing
I want to talk about

00:19:30.790 --> 00:19:34.060
before doing a quick
demo is the MQTT bridge.

00:19:34.060 --> 00:19:43.840
And this is the way that you
send the configuration change

00:19:43.840 --> 00:19:47.020
down to a device using the
Device Manager and the way that

00:19:47.020 --> 00:19:50.240
you can do something like send
telemetry data-- for example,

00:19:50.240 --> 00:19:52.810
weather station data in one
of those examples earlier--

00:19:52.810 --> 00:19:56.140
back to Google to store in
Cloud and then warehouse

00:19:56.140 --> 00:19:58.510
for analytics for later.

00:19:58.510 --> 00:20:04.710
So authentication, again, is
done using an MQTT client ID.

00:20:04.710 --> 00:20:07.690
So the ID is something
like the connection string.

00:20:07.690 --> 00:20:10.520
And that ID is going to
be unique per device.

00:20:10.520 --> 00:20:13.390
And then the other thing is that
you need that username, which

00:20:13.390 --> 00:20:14.404
Google ignores.

00:20:14.404 --> 00:20:16.570
So you can put anything in
your username name field.

00:20:16.570 --> 00:20:19.660
And then for the password,
you have to calculate a JWT.

00:20:19.660 --> 00:20:25.140
And the JWT is a token that
has an expiration, so that,

00:20:25.140 --> 00:20:27.110
this way, you can prevent
against certain types

00:20:27.110 --> 00:20:28.620
of brute force attacks.

00:20:28.620 --> 00:20:31.850
And because that
JWT expires, you

00:20:31.850 --> 00:20:37.670
need to have an expiration
time and an issue at time that

00:20:37.670 --> 00:20:41.700
is calculated consistently
with what Google expects.

00:20:41.700 --> 00:20:43.670
And so you can use
Google's NTP server--

00:20:43.670 --> 00:20:46.070
which is time.google.com--

00:20:46.070 --> 00:20:51.840
in order to get for free
a issued at time and then

00:20:51.840 --> 00:20:55.650
use that to calculate the
expiration for your JWT.

00:20:55.650 --> 00:20:58.010
So when you publish data--
so the telemetry data

00:20:58.010 --> 00:21:02.460
or a configuration change
trigger from a device,

00:21:02.460 --> 00:21:04.350
you're going to use
the MQTT bridge.

00:21:04.350 --> 00:21:10.550
And you must use this pattern
of devices/device-id/events.

00:21:10.550 --> 00:21:14.840
And anything that
comes after events

00:21:14.840 --> 00:21:17.300
is going to be created with
additional metadata, which

00:21:17.300 --> 00:21:19.700
we refer to as a subtopic.

00:21:19.700 --> 00:21:22.430
And so if you wanted to create
something like an alert,

00:21:22.430 --> 00:21:27.560
you would put that in
devices/device-id/events/alerts.

00:21:27.560 --> 00:21:31.510
And then when you would get
that data coming into Pub/Sub,

00:21:31.510 --> 00:21:35.990
it would have that
information that is an alert.

00:21:35.990 --> 00:21:38.840
And so when you want
to receive a device,

00:21:38.840 --> 00:21:41.720
or when you want to receive
information on your devices,

00:21:41.720 --> 00:21:43.760
you're going to need to
subscribe to a topic.

00:21:43.760 --> 00:21:46.970
And the topic that you
subscribe to must be

00:21:46.970 --> 00:21:49.749
devices/device-id/config.

00:21:49.749 --> 00:21:51.290
Because right now,
the only data that

00:21:51.290 --> 00:21:55.325
can come down from Google
Cloud IoT Core to your devices

00:21:55.325 --> 00:21:57.440
is configuration changes.

00:21:57.440 --> 00:21:59.690
And so, again, the
device configuration

00:21:59.690 --> 00:22:02.090
is received on the
device when you connect

00:22:02.090 --> 00:22:04.490
and any time that the
configuration changes.

00:22:04.490 --> 00:22:07.520
And the final detail that
I haven't mentioned before

00:22:07.520 --> 00:22:10.014
is that you do not get
the version number inside

00:22:10.014 --> 00:22:11.180
of the device configuration.

00:22:11.180 --> 00:22:13.580
You're welcome to
insert it yourself.

00:22:13.580 --> 00:22:17.670
Or you can also request
specific versions.

00:22:17.670 --> 00:22:22.550
So now that you've gotten a
high-level overview of what

00:22:22.550 --> 00:22:26.480
the platform is, I'm
going to do a quick demo

00:22:26.480 --> 00:22:30.830
of just kind of how the
Device Manager works

00:22:30.830 --> 00:22:33.800
and then how you
connect using MQTT.

00:22:33.800 --> 00:22:37.760
So I'm going to create a
device with the name Hello GDD.

00:22:37.760 --> 00:22:40.070
And then it's got to be
created in a registry

00:22:40.070 --> 00:22:43.380
that I have already created
called MQTT Test Reg.

00:22:43.380 --> 00:22:45.380
And then I'm going to use
the device certificate

00:22:45.380 --> 00:22:47.030
that I already calculated.

00:22:47.030 --> 00:22:49.370
And so when the
device gets created,

00:22:49.370 --> 00:22:52.940
you receive back the identifier
that Google calculates for it,

00:22:52.940 --> 00:22:57.140
as well as an instantiated
configuration for that device.

00:22:57.140 --> 00:22:59.750
And so now that I've
created the device,

00:22:59.750 --> 00:23:04.220
I should be able to connect
to the MQTT endpoint using

00:23:04.220 --> 00:23:08.430
a JWT for that device calculated
using its public certificate.

00:23:08.430 --> 00:23:12.650
So I'm to copy this, because I
keep forgetting my device IDs.

00:23:12.650 --> 00:23:14.870
So I at least need to
specify the private key file,

00:23:14.870 --> 00:23:17.880
the product ID, the registry
ID, and the device ID.

00:23:17.880 --> 00:23:19.940
There we go.

00:23:19.940 --> 00:23:21.740
Yes, maybe, OK!

00:23:21.740 --> 00:23:22.545
Yes, so now--

00:23:22.545 --> 00:23:23.045
[APPLAUSE]

00:23:23.045 --> 00:23:25.890
Yeah, thank you.

00:23:25.890 --> 00:23:28.670
OK.

00:23:28.670 --> 00:23:31.910
OK, so now the data should
be coming into Pub/Sub.

00:23:31.910 --> 00:23:38.300
And this looks
really small to me.

00:23:38.300 --> 00:23:39.690
There we go.

00:23:39.690 --> 00:23:42.200
Now if I keep pulling
this, eventually, we

00:23:42.200 --> 00:23:45.920
should start seeing
messages coming in.

00:23:45.920 --> 00:23:50.940
Maybe I jumped the gun there.

00:23:50.940 --> 00:23:52.940
Sometimes it takes a
little bit for the messages

00:23:52.940 --> 00:23:55.700
to come through on Pub/Sub.

00:23:55.700 --> 00:24:00.320
And imagine, if
you will, telemetry

00:24:00.320 --> 00:24:03.057
messages coming in and
being listable from Pub/Sub.

00:24:03.057 --> 00:24:05.390
So sometimes it can take a
little while for the messages

00:24:05.390 --> 00:24:05.900
to appear.

00:24:05.900 --> 00:24:10.010
And it seems as though
that's what's happening now.

00:24:10.010 --> 00:24:11.990
But that's pretty
much all I have.

00:24:11.990 --> 00:24:15.620
So if we can return
to the slides,

00:24:15.620 --> 00:24:18.330
I have just one
more slide to show.

00:24:18.330 --> 00:24:20.090
AUDIENCE: The
registry [INAUDIBLE]..

00:24:20.090 --> 00:24:21.720
GUS CLASS: Oh, did I?

00:24:21.720 --> 00:24:24.110
Let's see.

00:24:24.110 --> 00:24:26.434
You caught the bug.

00:24:26.434 --> 00:24:28.386
AUDIENCE: It's test, correct?

00:24:28.386 --> 00:24:30.891
But when you're
readin the queue--

00:24:30.891 --> 00:24:32.640
GUS CLASS: Oh, when
I'm reading the queue.

00:24:32.640 --> 00:24:34.260
Oh, the reason
these are different

00:24:34.260 --> 00:24:37.560
is that this is a subscription.

00:24:37.560 --> 00:24:40.570
And then the Registry is
entirely independent of that.

00:24:40.570 --> 00:24:42.510
So there is G Cloud Pub/Sub.

00:24:42.510 --> 00:24:44.560
There's a topic that
you publish too.

00:24:44.560 --> 00:24:46.590
There's a registry
associated with that topic.

00:24:46.590 --> 00:24:50.227
And then there's a subscription
that pulls from that topic.

00:24:50.227 --> 00:24:52.560
Yeah, so the subscription
name is going to be different.

00:24:52.560 --> 00:24:55.230
But sometimes it does take
a minute for the messages

00:24:55.230 --> 00:24:57.300
to get kind of
triggered inside there.

00:24:57.300 --> 00:25:00.820
But I think that I'm doing
something else wrong.

00:25:00.820 --> 00:25:02.010
But yeah, that's it.

00:25:04.650 --> 00:25:08.190
So we're currently
in a private beta.

00:25:08.190 --> 00:25:11.410
And if we go back
to the slides, we'll

00:25:11.410 --> 00:25:15.040
be able to see where you can
get more information about that.

00:25:15.040 --> 00:25:18.420
So if you go to
cloud.google.com/iotcore,

00:25:18.420 --> 00:25:19.660
you can sign up for the beta.

00:25:19.660 --> 00:25:22.850
And you can learn more about
the product, such as details.

00:25:22.850 --> 00:25:27.690
And yeah, so it's like the
cusp of the exciting time

00:25:27.690 --> 00:25:28.740
for this product.

00:25:28.740 --> 00:25:30.240
Sometimes some
things don't work.

00:25:30.240 --> 00:25:32.910
But we're kind of
working through that.

00:25:32.910 --> 00:25:34.680
And so thank you for
attending my talk.

00:25:34.680 --> 00:25:36.930
I really appreciate your time.

00:25:36.930 --> 00:25:39.980
[MUSIC PLAYING]

