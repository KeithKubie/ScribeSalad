WEBVTT
Kind: captions
Language: en

00:00:09.710 --> 00:00:11.650
PENG YING: Welcome to Google
Developers Live.

00:00:11.650 --> 00:00:14.270
My name is Peng Ying,
and with me today is

00:00:14.270 --> 00:00:15.190
my colleague, Nagesh.

00:00:15.190 --> 00:00:16.420
NAGESH SUSARLA: Hey.

00:00:16.420 --> 00:00:18.680
PENG YING: We're here today to
share with you what we built

00:00:18.680 --> 00:00:22.270
for Google I/O. Both of us
are engineers at Google.

00:00:22.270 --> 00:00:24.930
And what we like to do
is solve problems.

00:00:24.930 --> 00:00:28.580
So today, let's first start
off with the problem that

00:00:28.580 --> 00:00:29.500
we've found.

00:00:29.500 --> 00:00:32.330
Some of you may already
be familiar with this.

00:00:32.330 --> 00:00:34.580
And don't get me wrong,
I love Costco.

00:00:34.580 --> 00:00:35.900
Their pizza's awesome.

00:00:35.900 --> 00:00:38.640
I love their $1.50 hot
dog and drink.

00:00:38.640 --> 00:00:41.900
And I was just this past week
and probably bought enough

00:00:41.900 --> 00:00:45.240
paper towels and toilet
paper to last a year.

00:00:45.240 --> 00:00:47.600
But every time I go
to checkout, it

00:00:47.600 --> 00:00:49.300
seems like utter chaos.

00:00:49.300 --> 00:00:52.660
There's carts moving from left
to right, from right to left.

00:00:52.660 --> 00:00:55.580
Everybody's pretty much trying
to find the shortest line.

00:00:55.580 --> 00:00:59.030
And that was the problem that
we are trying to solve--

00:00:59.030 --> 00:01:00.730
checkout.

00:01:00.730 --> 00:01:04.599
We think that checkout is
cumbersome and a little bit

00:01:04.599 --> 00:01:05.740
inefficient.

00:01:05.740 --> 00:01:08.060
So what's our solution?

00:01:08.060 --> 00:01:12.860
Well, it's what we're calling
"web and mortar." And today,

00:01:12.860 --> 00:01:14.710
we're here to talk about
how it works.

00:01:14.710 --> 00:01:18.070
How we built each of the pieces,
the Android app the

00:01:18.070 --> 00:01:21.750
interactive wall, the back end,
and some of fulfillment.

00:01:21.750 --> 00:01:25.040
And then we'll shed some light
on where we hope this goes and

00:01:25.040 --> 00:01:28.890
what we hope to see a little
bit further down the road.

00:01:28.890 --> 00:01:31.210
So what is web and mortar?

00:01:31.210 --> 00:01:34.340
It's an idea built from
the Tesco Wall.

00:01:34.340 --> 00:01:37.880
Web and mortar is this concept
of tying the online and

00:01:37.880 --> 00:01:40.735
offline shopping experiences
together.

00:01:40.735 --> 00:01:44.030
The most amazing thing about
this image isn't that people

00:01:44.030 --> 00:01:46.620
are buying groceries in a
subway station in Seoul.

00:01:46.620 --> 00:01:49.320
But it's that they have the
cell signal to do so.

00:01:49.320 --> 00:01:51.080
I'm looking at you, San Fran.

00:01:51.080 --> 00:01:53.800
Nagesh, can you show
them what we built?

00:01:53.800 --> 00:01:56.020
NAGESH SUSARLA: Sure.

00:01:56.020 --> 00:01:58.550
It's nighttime, and my favorite
store is closed.

00:01:58.550 --> 00:02:01.400
But luckily, the web and mortar
store is here with an

00:02:01.400 --> 00:02:05.800
online catalog of the various
products they offer.

00:02:05.800 --> 00:02:09.410
And here, I have the top
carousel, and the bottom

00:02:09.410 --> 00:02:11.440
carousel, which can
be scrolled.

00:02:11.440 --> 00:02:14.110
And when you select a particular
item, it shows the

00:02:14.110 --> 00:02:16.150
3D view for that particular
item.

00:02:16.150 --> 00:02:18.490
In this case, it's
a leather folder.

00:02:18.490 --> 00:02:22.390
Now, when I want to buy it, I
bring up the Android companion

00:02:22.390 --> 00:02:26.270
app and I select the particular
color that I want.

00:02:26.270 --> 00:02:28.200
So in this case, there
were multiple colors.

00:02:28.200 --> 00:02:35.280
So each of them was listed
in a special QR code.

00:02:35.280 --> 00:02:37.250
Let's add a few more items.

00:02:37.250 --> 00:02:41.000
Now, this looks interesting.

00:02:41.000 --> 00:02:44.805
How about the squishy.

00:02:44.805 --> 00:02:47.710
I always wanted a Chrome
plushy, actually.

00:02:47.710 --> 00:02:49.400
Looks colorful.

00:02:49.400 --> 00:02:53.480
And I can even scroll it
3D here if I wanted.

00:02:53.480 --> 00:02:57.980
I want to add it into my
cart, scan the QR code.

00:02:57.980 --> 00:02:59.770
There it is.

00:02:59.770 --> 00:03:03.690
Buy with Google, choose
a credit card.

00:03:03.690 --> 00:03:04.810
Goes to the next.

00:03:04.810 --> 00:03:07.620
And I submit the order.

00:03:07.620 --> 00:03:09.410
And I'm done with
the purchase.

00:03:09.410 --> 00:03:11.780
Now that we've looked at
the entire flow, let's

00:03:11.780 --> 00:03:14.470
look at how it works.

00:03:14.470 --> 00:03:17.975
Now, for the buy flow, we used
Google Wallet Instant Buy API.

00:03:17.975 --> 00:03:22.010
Now, the beauty of the API is
it is seamless in the sense

00:03:22.010 --> 00:03:25.390
that it does not require you
would change your back end.

00:03:25.390 --> 00:03:28.750
If you already have an existing
payment provider, you

00:03:28.750 --> 00:03:31.630
do not have to change it to
integrate with Google Wallet

00:03:31.630 --> 00:03:33.030
Instant Buy.

00:03:33.030 --> 00:03:36.830
What that means is if you accept
credit cards, you can

00:03:36.830 --> 00:03:40.640
take a credit card from Google
Wallet Instant Buy and pass it

00:03:40.640 --> 00:03:45.440
through your back end without
making any modifications.

00:03:45.440 --> 00:03:49.800
Now, the other aspect which is
very important is you do not

00:03:49.800 --> 00:03:53.890
have to do the credit card entry
and management, like

00:03:53.890 --> 00:03:55.330
expiration dates.

00:03:55.330 --> 00:03:59.380
Credit cards have expiration
dates and various other

00:03:59.380 --> 00:04:00.060
[INAUDIBLE]

00:04:00.060 --> 00:04:02.080
which you don't have
to deal with.

00:04:02.080 --> 00:04:04.870
You can let Instant Buy
take care of that.

00:04:04.870 --> 00:04:08.310
Now, the other more interesting
is that Google

00:04:08.310 --> 00:04:12.440
Wallet Instant Buy returns a
one-time virtual proxy card.

00:04:12.440 --> 00:04:15.220
So it's not the user's
actual card.

00:04:15.220 --> 00:04:18.089
But it's actually a one-time
use card, which is a credit

00:04:18.089 --> 00:04:19.440
card which can flow
through your--

00:04:19.440 --> 00:04:20.350
PENG YING: Customer security.

00:04:20.350 --> 00:04:21.470
NAGESH SUSARLA: It's
more secure, too.

00:04:21.470 --> 00:04:23.700
Exactly.

00:04:23.700 --> 00:04:27.170
So with that, let's see how
the code looks like if I

00:04:27.170 --> 00:04:30.890
wanted to make a purchase,
First, I would get my

00:04:30.890 --> 00:04:34.640
estimated price for
a particular item.

00:04:34.640 --> 00:04:37.690
Call the MasketWalletRequest
or newBuilder.

00:04:37.690 --> 00:04:40.470
Set the currency code,
which is USD here.

00:04:40.470 --> 00:04:47.360
And call this loadMaskedWallet
method on the Wallet client.

00:04:47.360 --> 00:04:49.600
Now, this is giving
me a call back.

00:04:49.600 --> 00:04:53.290
Now Wallet client actually calls
Google Play services,

00:04:53.290 --> 00:04:55.220
which is installed on
your Android device.

00:04:55.220 --> 00:04:59.120
And then gives me a call back
on MaskedWalletLoaded, which

00:04:59.120 --> 00:05:05.800
gives me the masked information,
like the selected

00:05:05.800 --> 00:05:07.090
credit card that a user has.

00:05:07.090 --> 00:05:11.840
So it shows up a screen do the
user where he or she selects

00:05:11.840 --> 00:05:14.540
the particular card that
they want to use.

00:05:14.540 --> 00:05:18.070
That is selected, and I get back
that detail information.

00:05:18.070 --> 00:05:20.460
I can get the shipping
address, if I wanted.

00:05:20.460 --> 00:05:22.940
I can get the phone number,
if I wanted to.

00:05:22.940 --> 00:05:27.080
And then, based on this
information, I can calculate

00:05:27.080 --> 00:05:27.745
the next steps.

00:05:27.745 --> 00:05:28.730
Now, next steps.

00:05:28.730 --> 00:05:32.730
Obviously, if I'm shipping, I
need the shipping calculator.

00:05:32.730 --> 00:05:37.270
So I would send the zip code to
the shipping calculator and

00:05:37.270 --> 00:05:38.290
get back a price.

00:05:38.290 --> 00:05:44.270
Let's say it's within the US,
so it's $5.50 or whatever.

00:05:44.270 --> 00:05:49.280
Now, with that information, I
ask the user to confirm the

00:05:49.280 --> 00:05:51.310
purchase or to review
the order and

00:05:51.310 --> 00:05:53.150
actually press on Confirm.

00:05:53.150 --> 00:05:57.140
Once they confirm, I can make
a full Wallet request.

00:05:57.140 --> 00:06:01.780
The full Wallet request returns
me a one-time use

00:06:01.780 --> 00:06:02.960
proxy card.

00:06:02.960 --> 00:06:07.280
That's the card I can take and
then pass to my back end,

00:06:07.280 --> 00:06:11.780
which then puts it through the
payment processor, gets back a

00:06:11.780 --> 00:06:15.650
result like success, or
failure, or whatever.

00:06:15.650 --> 00:06:18.530
And then puts it through
my order system.

00:06:18.530 --> 00:06:22.980
Now, at the end of this, my
server can then return a

00:06:22.980 --> 00:06:25.510
signal saying it was successful
and this is the

00:06:25.510 --> 00:06:26.530
order number.

00:06:26.530 --> 00:06:30.340
I then call Google Wallet
client and say that the

00:06:30.340 --> 00:06:32.330
transaction was successful.

00:06:32.330 --> 00:06:35.120
And then also notify
the user that their

00:06:35.120 --> 00:06:37.240
order is being delivered.

00:06:37.240 --> 00:06:40.750
So that's how the Instant Buy
was integrated into the API.

00:06:40.750 --> 00:06:44.250
Now, with that, let's look
at how the other parts of

00:06:44.250 --> 00:06:45.090
the app were made.

00:06:45.090 --> 00:06:47.190
Now, the shopping cart is one
of the most interesting

00:06:47.190 --> 00:06:49.890
aspects in the entire app.

00:06:49.890 --> 00:06:53.660
And to build it, there were
several small things that were

00:06:53.660 --> 00:06:56.130
needed, obviously.

00:06:56.130 --> 00:06:58.950
The first one was to
fetch an item feed.

00:06:58.950 --> 00:07:01.730
Now, here it says the number
of items that were there in

00:07:01.730 --> 00:07:05.790
the catalogue were
very limited.

00:07:05.790 --> 00:07:11.070
We fetched the entire catalogue
from the server

00:07:11.070 --> 00:07:12.890
using an Intent service.

00:07:12.890 --> 00:07:16.040
Then this was stored in
our SQLite database.

00:07:16.040 --> 00:07:20.090
And a content provider was
provided to make it clean to

00:07:20.090 --> 00:07:21.340
access these items.

00:07:23.840 --> 00:07:27.160
Now, the scanning of the items
was done using Zebra Crossing,

00:07:27.160 --> 00:07:29.560
which is an open source
library which you can

00:07:29.560 --> 00:07:30.470
download and use.

00:07:30.470 --> 00:07:34.690
It's a really awesome library
for QR codes and barcodes.

00:07:34.690 --> 00:07:36.210
PENG YING: Any sort of codes.

00:07:36.210 --> 00:07:36.490
NAGESH SUSARLA: Yeah.

00:07:36.490 --> 00:07:37.640
Any sort of codes.

00:07:37.640 --> 00:07:39.910
It's a pretty awesome library.

00:07:39.910 --> 00:07:46.860
Now, once you have scanned the
item, you can take it and

00:07:46.860 --> 00:07:49.690
store it in the shared
preferences.

00:07:49.690 --> 00:07:52.530
Last but not least was the
swipe-to-dismiss item.

00:07:52.530 --> 00:07:57.340
If you want to take off items
from your shopping cart, I

00:07:57.340 --> 00:08:00.790
really like the gesture way of
removing it, swipe to dismiss.

00:08:00.790 --> 00:08:04.650
And all that I had to do, thanks
to my colleague Roman

00:08:04.650 --> 00:08:09.300
Nurik, was to just add two lines
into my application to

00:08:09.300 --> 00:08:10.660
get this all done.

00:08:10.660 --> 00:08:14.150
And in addition to this, all I
had to do was add a few more

00:08:14.150 --> 00:08:16.060
lines in a class.

00:08:16.060 --> 00:08:19.930
And I got all of it working
within 10, 15 minutes.

00:08:19.930 --> 00:08:21.030
PENG YING: Seems
pretty simple.

00:08:21.030 --> 00:08:21.970
NAGESH SUSARLA: Yeah.

00:08:21.970 --> 00:08:25.990
It was very easy to integrate.

00:08:25.990 --> 00:08:30.125
Now with that said, let's move
on to the interactive display.

00:08:30.125 --> 00:08:32.470
PENG YING: Thanks, Nagesh.

00:08:32.470 --> 00:08:36.580
So we created interactive
display using a few

00:08:36.580 --> 00:08:37.700
components.

00:08:37.700 --> 00:08:41.940
The UI is comprised of two
carousels, a top carousel and

00:08:41.940 --> 00:08:42.679
a bottom carousel.

00:08:42.679 --> 00:08:45.100
They contain the same
amount of items--

00:08:45.100 --> 00:08:46.590
actually, the same items.

00:08:46.590 --> 00:08:49.620
And in the middle, there
is a Detail section.

00:08:49.620 --> 00:08:52.130
So the reason we went with two
carousels is because we

00:08:52.130 --> 00:08:54.660
thought that we wanted multiple
people to interact

00:08:54.660 --> 00:08:56.420
with the display at once.

00:08:56.420 --> 00:08:59.040
One thing would be if you had
only one person interacting,

00:08:59.040 --> 00:09:00.640
then only one person
can be purchasing.

00:09:00.640 --> 00:09:02.720
So why not just double that?

00:09:02.720 --> 00:09:05.670
Another thing is it's kind of
interesting to see what

00:09:05.670 --> 00:09:07.870
happens when two people are
trying to interact at the same

00:09:07.870 --> 00:09:09.640
time, and there's only
one Details page.

00:09:09.640 --> 00:09:11.780
Maybe it could lead to some sort
of conversation, maybe

00:09:11.780 --> 00:09:14.550
they could be like, oh,
cool, I have that.

00:09:14.550 --> 00:09:15.790
You should get it, too.

00:09:15.790 --> 00:09:17.760
Or something like that.

00:09:17.760 --> 00:09:20.430
To create these sections,
what we used was--

00:09:20.430 --> 00:09:23.270
Well, the whole thing
is a web page.

00:09:23.270 --> 00:09:25.030
This entire thing
is a web page.

00:09:25.030 --> 00:09:27.830
What we're doing is we're
using Chrome Kiosk mode.

00:09:27.830 --> 00:09:30.740
And what Chrome Kiosk
mode is is exactly

00:09:30.740 --> 00:09:31.490
what it sounds like.

00:09:31.490 --> 00:09:34.270
It makes a web page
into a kiosk.

00:09:34.270 --> 00:09:37.020
So it removes the action bars,
removes the search bars, and

00:09:37.020 --> 00:09:38.000
all that kind of stuff.

00:09:38.000 --> 00:09:41.690
And you just get a minimalized
UI that shows a web page.

00:09:41.690 --> 00:09:44.600
In addition to that, we did some
other tricks to get rid

00:09:44.600 --> 00:09:48.860
of the mouse cursor by replacing
the cursor with a

00:09:48.860 --> 00:09:51.130
transparent PNG.

00:09:51.130 --> 00:09:54.960
And then what we also did was
we disabled right click.

00:09:58.190 --> 00:10:01.490
With a lot of touch screens,
if you do a long press, it

00:10:01.490 --> 00:10:03.550
actually acts as
a right click.

00:10:03.550 --> 00:10:05.990
And you don't want anybody
long pressing and then

00:10:05.990 --> 00:10:08.920
inspecting an element, or taking
some sort of action on

00:10:08.920 --> 00:10:11.680
the page that you don't
want them to take.

00:10:11.680 --> 00:10:15.440
Lastly, for all of the really
nice physics space, scrolling,

00:10:15.440 --> 00:10:18.470
inertial-based scrolling,
we used the

00:10:18.470 --> 00:10:19.990
Financial Times Scroller.

00:10:19.990 --> 00:10:22.430
It's an open source library,
and it handles touch events

00:10:22.430 --> 00:10:23.550
really well.

00:10:23.550 --> 00:10:25.880
What we're showing right
here is a simple way

00:10:25.880 --> 00:10:26.670
to instantiate it.

00:10:26.670 --> 00:10:29.560
Basically what you do is you
define all of the elements you

00:10:29.560 --> 00:10:31.210
want to scroll between.

00:10:31.210 --> 00:10:35.000
And then you instantiate the
Financial Times Scroller

00:10:35.000 --> 00:10:38.420
passing in the dom node and a
few other parameters to define

00:10:38.420 --> 00:10:39.820
which way am I scrolling?

00:10:39.820 --> 00:10:40.950
What's the size?

00:10:40.950 --> 00:10:41.860
Do I want it to snap?

00:10:41.860 --> 00:10:43.790
That kind of stuff.

00:10:43.790 --> 00:10:46.640
Once we have the interactive
display, we need to feed it

00:10:46.640 --> 00:10:47.820
and populate it with elements.

00:10:47.820 --> 00:10:51.680
And what we're using is
the same JSON that the

00:10:51.680 --> 00:10:53.310
Android app is using.

00:10:53.310 --> 00:10:57.450
The way that we formatted it
is we have items, which are

00:10:57.450 --> 00:10:59.030
actually the options of items.

00:10:59.030 --> 00:11:01.600
And we have an Item Map, which
is the parent item.

00:11:01.600 --> 00:11:04.130
So in this example, let's
say the t-shirt

00:11:04.130 --> 00:11:05.530
would be the item map.

00:11:05.530 --> 00:11:06.805
And then each of the
different options.

00:11:06.805 --> 00:11:08.750
Like hey, I want this t-shirt.

00:11:08.750 --> 00:11:12.410
And small, medium, or large,
are the items themselves.

00:11:12.410 --> 00:11:14.430
In the past, all of this
information, of

00:11:14.430 --> 00:11:15.185
course, is in JSON.

00:11:15.185 --> 00:11:19.150
So we're using one big JSON
object that contains all of

00:11:19.150 --> 00:11:22.700
the items and all of
the item maps.

00:11:22.700 --> 00:11:26.910
So once we have the display,
people can browse through it.

00:11:26.910 --> 00:11:29.050
They can choose the items that
they're interested in and then

00:11:29.050 --> 00:11:30.530
purchase it with their phone.

00:11:30.530 --> 00:11:32.000
We need to be able to send this

00:11:32.000 --> 00:11:34.220
information back to our server.

00:11:34.220 --> 00:11:36.610
So once the person has confirmed
that purchase,

00:11:36.610 --> 00:11:41.030
what's happening is that this
JSON that you see here is

00:11:41.030 --> 00:11:44.190
encrypted over SSL or whatever
you choose and then sent to

00:11:44.190 --> 00:11:44.820
the server.

00:11:44.820 --> 00:11:47.830
Within this JSON, we're defining
things like the items

00:11:47.830 --> 00:11:50.250
that our customer's purchasing,
their shipping

00:11:50.250 --> 00:11:52.330
address, their billing address,
and their credit card

00:11:52.330 --> 00:11:53.320
information.

00:11:53.320 --> 00:11:55.620
Then, on our back end, we can
take this information and

00:11:55.620 --> 00:11:58.820
create a new order, maybe create
a new customer, and

00:11:58.820 --> 00:12:02.750
then charge their order, maybe
send it off to fulfillment.

00:12:02.750 --> 00:12:07.460
So that's how this all works.

00:12:07.460 --> 00:12:08.660
And it's cool.

00:12:08.660 --> 00:12:11.550
It's just one of the
possibilities that you can do

00:12:11.550 --> 00:12:16.620
with a really simple mobile
purchasing API.

00:12:16.620 --> 00:12:19.960
And there's a few more
that we thought of.

00:12:19.960 --> 00:12:22.430
What if you can make advertising
actionable?

00:12:22.430 --> 00:12:25.590
Let's say that I walk by this
poster for Elysium.

00:12:25.590 --> 00:12:28.370
That movie's coming
out this weekend.

00:12:28.370 --> 00:12:29.590
I have my phone, and
it's a smartphone.

00:12:29.590 --> 00:12:31.700
It knows where I am, all
that kind of stuff.

00:12:31.700 --> 00:12:35.700
I tap my phone to the poster and
it shows me a listing of

00:12:35.700 --> 00:12:38.170
showtimes around me
and the theaters.

00:12:38.170 --> 00:12:42.250
And within a few clicks, I can
buy that ticket, I can save it

00:12:42.250 --> 00:12:43.240
to my Wallet.

00:12:43.240 --> 00:12:47.230
And then when I go to theater
later that day or sometimes,

00:12:47.230 --> 00:12:53.470
instead of going to the purchase
kiosk or going to the

00:12:53.470 --> 00:12:56.640
box office or anything like
that, I just walk in, pull out

00:12:56.640 --> 00:12:58.900
my phone, show them the
ticket, and then

00:12:58.900 --> 00:13:00.120
walk into the theater.

00:13:00.120 --> 00:13:02.270
That's a way better
experience.

00:13:02.270 --> 00:13:06.250
What about never having to go
to the checkout line again?

00:13:06.250 --> 00:13:10.360
So today, what we showed you
was somebody browsing this

00:13:10.360 --> 00:13:11.180
interactive display.

00:13:11.180 --> 00:13:12.820
What if you just got rid of
the interactive display.

00:13:12.820 --> 00:13:14.610
What if the store
was a display?

00:13:14.610 --> 00:13:19.540
So all the items within the
store have their own barcodes.

00:13:19.540 --> 00:13:22.130
So what if you could just take
your apps, scan all the

00:13:22.130 --> 00:13:25.710
barcodes as you add the items
to your cart, and then click

00:13:25.710 --> 00:13:28.260
Check Out and walk
out of the store.

00:13:28.260 --> 00:13:31.250
That's way better than whatever
clunky self-checkout

00:13:31.250 --> 00:13:35.520
experience exists now, where you
take the item and then you

00:13:35.520 --> 00:13:38.330
scan it, maybe it doesn't scan,
and then maybe you put

00:13:38.330 --> 00:13:41.750
it into the packing area, and
it says, oh, there's some

00:13:41.750 --> 00:13:43.610
other items in the packing area
that aren't supposed to

00:13:43.610 --> 00:13:45.420
be there, and all that
kind of stuff.

00:13:45.420 --> 00:13:48.400
We can make that experience
better.

00:13:48.400 --> 00:13:53.340
Lastly, right now, consumers
come to the store.

00:13:53.340 --> 00:13:57.030
But what if you could take the
store to the consumer?

00:13:57.030 --> 00:14:01.290
The old adage is "location,
location, location." What if

00:14:01.290 --> 00:14:05.410
you could combine instant buy
with same-day delivery?

00:14:05.410 --> 00:14:08.300
And then you would just bring
this interactive display that

00:14:08.300 --> 00:14:11.790
has all of your items, that is
stylized to your store--

00:14:11.790 --> 00:14:13.240
pretty much your store
experience.

00:14:13.240 --> 00:14:14.990
And then you put it wherever
the people are.

00:14:14.990 --> 00:14:16.750
Maybe it's a park, maybe
it's a subway,

00:14:16.750 --> 00:14:19.280
maybe it's a bus stop.

00:14:19.280 --> 00:14:20.250
And there you have it.

00:14:20.250 --> 00:14:22.920
You've taken your shopping
experience.

00:14:22.920 --> 00:14:25.270
You have minimal footage,
you have minimal costs.

00:14:25.270 --> 00:14:28.622
And then you deliver via
same-day delivery or some

00:14:28.622 --> 00:14:29.872
other sort of delivery
service.

00:14:35.200 --> 00:14:38.770
Our goal of this presentation
has been really to give you

00:14:38.770 --> 00:14:41.530
ideas and to inspire
you to think about

00:14:41.530 --> 00:14:43.540
what you can create.

00:14:43.540 --> 00:14:45.460
What are the problems
that you can solve?

00:14:45.460 --> 00:14:50.560
What are the flows that you can
streamline and simplify?

00:14:50.560 --> 00:14:52.410
And basically, what
you can do.

00:14:52.410 --> 00:14:55.760
We are here to help you develop
amazing things.

00:14:55.760 --> 00:14:58.810
And with that, if you want to
get started with Instant But,

00:14:58.810 --> 00:15:00.270
go to
GetInstantBuy.withGoogle.com.

00:15:04.856 --> 00:15:08.060
And lastly, follows us on G+.

00:15:08.060 --> 00:15:09.930
We're always doing crazy
stuff like this.

00:15:09.930 --> 00:15:11.570
We're working on samples, we're

00:15:11.570 --> 00:15:13.170
messing around with things.

00:15:13.170 --> 00:15:15.220
We're trying to be on the
[INAUDIBLE] edge.

00:15:15.220 --> 00:15:18.730
So follow us on Google+ to
see what we're doing.

00:15:18.730 --> 00:15:21.800
And thanks for coming and
watching this with us today.

00:15:21.800 --> 00:15:23.050
NAGESH SUSARLA: Thank you.

