WEBVTT
Kind: captions
Language: en

00:00:00.340 --> 00:00:04.620
Okay, so one nice thing about the memory
protection stuff we've been talking

00:00:04.620 --> 00:00:09.800
about is that it could be used
to create these fences or

00:00:09.800 --> 00:00:14.320
isolate these different
applications from each other.

00:00:14.320 --> 00:00:18.860
I was talking about process A cannot
access memory that currently belongs to

00:00:18.860 --> 00:00:19.410
process B.

00:00:19.410 --> 00:00:25.450
But the same mechanism actually could be
used to isolate the operating system.

00:00:25.450 --> 00:00:29.720
Remember, we wanted to tamper
resistance for the operating system.

00:00:29.720 --> 00:00:33.160
You shouldn't be able to alter from
untrusted application code, so

00:00:33.160 --> 00:00:37.360
we can isolate the operating system
from untrusted application code

00:00:37.360 --> 00:00:40.690
using the same memory protection
mechanisms that we were talking about.

00:00:40.690 --> 00:00:44.290
So the way we do that is we're going to
say the operating system, also called

00:00:44.290 --> 00:00:49.650
the kernel, is going to reside in a
portion of each processes address space.

00:00:49.650 --> 00:00:54.800
So the address space in which
the process executes now has two parts.

00:00:54.800 --> 00:00:57.230
Where the user code and
data is going to go, and

00:00:57.230 --> 00:01:01.540
where the operating system is going to
go, operating system code and data.

00:01:01.540 --> 00:01:06.570
So the OS resides, and
that part of the address space is common

00:01:06.570 --> 00:01:11.030
across different processes, is going
to be a portion of the address space.

00:01:11.030 --> 00:01:12.560
So think about the address space.

00:01:12.560 --> 00:01:17.760
There's a user portion, a user area, and
then there's the OS, or kernel, area.

00:01:17.760 --> 00:01:22.390
And this holds for each and every
process that we have in the system.

00:01:22.390 --> 00:01:27.420
And remember that we talked about
system calls and things like that.

00:01:27.420 --> 00:01:30.570
Whenever you want to go from the user

00:01:30.570 --> 00:01:34.360
portion of the address space to
the system portion of the address space,

00:01:34.360 --> 00:01:38.230
that transfer has to be special and
handled by the operating system.

00:01:38.230 --> 00:01:41.950
It can only be done through the system
call that we're talking about.

00:01:41.950 --> 00:01:45.332
So one way I want you to think
about it is that, but so

00:01:45.332 --> 00:01:48.908
this is the address space
that process A executes in.

00:01:48.908 --> 00:01:52.215
Then we said there is this fence or
boundary.

00:01:52.215 --> 00:01:56.740
The OS goes here,
the user code goes here.

00:01:56.740 --> 00:02:00.580
And when you are here,
when you're executing this portion,

00:02:00.580 --> 00:02:03.320
you're not allowed to access
this part of the memory.

00:02:03.320 --> 00:02:06.330
Remember the execution mode
that we're talking about?

00:02:06.330 --> 00:02:09.780
So the hardware is going to save you
in the user mode, and you're asking for

00:02:09.780 --> 00:02:12.440
an address here,
that's not going to be allowed.

00:02:12.440 --> 00:02:15.970
So the way all operating system is
isolated from application code,

00:02:15.970 --> 00:02:19.660
which is untrusted, is essentially
putting those in separate places, and

00:02:19.660 --> 00:02:23.500
making sure when you're here,
you can't go into the operating system.

00:02:23.500 --> 00:02:28.470
Well, we said that call gates are
controlled entry points through which

00:02:28.470 --> 00:02:31.890
you can come in, but then we're
coming in by making a certain a call,

00:02:31.890 --> 00:02:33.415
the operating system understands,

00:02:33.415 --> 00:02:36.480
and the operating system is going to
do whatever checking it needs to do.

00:02:36.480 --> 00:02:39.500
And then you're going to be executing in
the operating system while you access

00:02:39.500 --> 00:02:40.690
anything here.

00:02:40.690 --> 00:02:43.590
And when you're done, you're going
to return back to the user level.

00:02:43.590 --> 00:02:47.710
So we use the same memory protection
mechanisms you're talking about,

00:02:47.710 --> 00:02:52.770
base tables, protection bits,
what different base tables we have for

00:02:52.770 --> 00:02:55.230
different processes for
the operating system.

00:02:55.230 --> 00:02:59.930
So, remember, one of the things
that I can't overemphasize is

00:02:59.930 --> 00:03:03.750
the operating system, or
the trusted computer base that we have,

00:03:03.750 --> 00:03:07.400
has to manage these page
tables because page tables

00:03:07.400 --> 00:03:11.770
control what portions of memory you
can access, and in what manner.

00:03:11.770 --> 00:03:16.260
And the operating systems says, this
is your code, you can execute it, but

00:03:16.260 --> 00:03:17.440
you can only execute.

00:03:17.440 --> 00:03:20.510
Or this is your stack, you can
read/write it, but you can't execute

00:03:20.510 --> 00:03:23.790
from it, that's a non-executable stack,
and things like that.

00:03:23.790 --> 00:03:27.860
So this is how the operating
system is going to actually

00:03:27.860 --> 00:03:31.700
protect itself from
untrusted process codes, and

00:03:31.700 --> 00:03:36.560
also allows these untrusted processes
protection from each other.

00:03:36.560 --> 00:03:41.040
So process A can't, for example,
corrupt the memory of Process B

00:03:41.040 --> 00:03:44.310
because the way the address translation
and the protection mechanisms work.

