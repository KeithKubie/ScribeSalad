WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.000
Okay, so Homework 6 solution:

00:00:02.000 --> 00:00:04.000
I asked you to do a couple things.

00:00:04.000 --> 00:00:08.000
I asked you to add to the bottom of the blog page

00:00:08.000 --> 00:00:11.000
how long ago we ran the query--

00:00:11.000 --> 00:00:15.000
and if we reload this page we can see this time incrementing--

00:00:15.000 --> 00:00:19.000
and I also asked you to do this on permalink pages.

00:00:19.000 --> 00:00:21.000
So if I were to look on a particular permalink,

00:00:21.000 --> 00:00:24.000
I can see the age of its query,

00:00:24.000 --> 00:00:28.000
and I can also tell when I create a new post--

00:00:28.000 --> 00:00:30.000
create this new post--and when I submit it

00:00:30.000 --> 00:00:32.000
I get redirected to a permalink page

00:00:32.000 --> 00:00:34.000
whose query time increments,

00:00:34.000 --> 00:00:37.000
and when I go back to the front of the blog,

00:00:37.000 --> 00:00:41.000
I see my post on top with a nice, new low query time

00:00:41.000 --> 00:00:47.000
and finally I asked you to implement a URL that clears the cache.

00:00:47.000 --> 00:00:51.000
In mine, I called it flush, which just redirects right back to blog

00:00:51.000 --> 00:00:56.000
but it resets the cache, which causes the query to run again.

00:00:56.000 --> 00:00:58.000
So that's what I asked you to do, and now let's take a look at the code.

00:00:58.000 --> 00:01:02.000
Okay. So the couple of things I needed to do:

00:01:02.000 --> 00:01:05.000
I needed to use timedelta and datetime

00:01:05.000 --> 00:01:08.000
to help compute the age of my posts,

00:01:08.000 --> 00:01:12.000
and I also needed to import memcache just to cache things.

00:01:12.000 --> 00:01:15.000
Now I added a bunch of functions that are kind of handy.

00:01:15.000 --> 00:01:17.000
I added this one function called age_set

00:01:17.000 --> 00:01:19.000
which basically is a wraparound memcache set,

00:01:19.000 --> 00:01:21.000
but instead of setting just the value

00:01:21.000 --> 00:01:26.000
it looks up the current time using datetime.utcnow,

00:01:26.000 --> 00:01:30.000
and it stores that time along with the value in a tuple.

00:01:30.000 --> 00:01:32.000
And then I made another function called age_get.

00:01:32.000 --> 00:01:35.000
What this does is-- It's just like a memcache get,

00:01:35.000 --> 00:01:40.000
but it returns both the value and the age of the item as a tuple.

00:01:40.000 --> 00:01:44.000
So the first thing we do is we run the memcache.get on just the key.

00:01:44.000 --> 00:01:48.000
If it exists, the value and the time we saved it are in R.

00:01:48.000 --> 00:01:51.000
So we break those apart and then we compute the actual age in seconds,

00:01:51.000 --> 00:01:55.000
which is we take the current time minus the time we saved it

00:01:55.000 --> 00:01:57.000
and then we can call total_seconds on that,

00:01:57.000 --> 00:01:59.000
which is a function that's included on timedelta.

00:01:59.000 --> 00:02:03.000
Otherwise, if there's nothing in the cache, we just set val and age

00:02:03.000 --> 00:02:06.000
to be none and zero respectively, and then we return them.

00:02:06.000 --> 00:02:09.000
These are just handy functions, and I use them a couple places.

00:02:09.000 --> 00:02:13.000
Now I've got a function that I run every time a new post gets submitted,

00:02:13.000 --> 00:02:17.000
and this stores the post in the database,

00:02:17.000 --> 00:02:19.000
and it takes an IP parameter which is unused.

00:02:19.000 --> 00:02:24.000
I used to use this IP parameter on my previous antispamming version

00:02:24.000 --> 00:02:26.000
so that you guys could still submit to the blog and see it working,

00:02:26.000 --> 00:02:28.000
but it wouldn't store it in the database.

00:02:28.000 --> 00:02:31.000
I was actually just storing it in memcached, and I got rid of that.

00:02:31.000 --> 00:02:34.000
Now you just have to be logged in as me to submit to the blog.

00:02:34.000 --> 00:02:36.000
It runs this get_posts function, which is defined here,

00:02:36.000 --> 00:02:38.000
and this basically runs the database query

00:02:38.000 --> 00:02:41.000
with update = True. You saw me do this in the lecture.

00:02:41.000 --> 00:02:46.000
This is my technique for overwriting the cache with the new value.

00:02:46.000 --> 00:02:48.000
Now, there's still erase conditions.

00:02:48.000 --> 00:02:50.000
Remember we spent a lot of time talking about gets and casts?

00:02:50.000 --> 00:02:52.000
I didn't use those here.

00:02:52.000 --> 00:02:54.000
And then it returns the ID.

00:02:54.000 --> 00:02:58.000
Get_posts--this is the function that runs the database query for me.

00:02:58.000 --> 00:03:00.000
You saw me write something like this for ASCII Chan,

00:03:00.000 --> 00:03:02.000
and here it is in the blog.

00:03:02.000 --> 00:03:04.000
This is my query,

00:03:04.000 --> 00:03:07.000
and I'm using the procedural language again to look up all the posts.

00:03:07.000 --> 00:03:10.000
This is still an extra variable that's in there.

00:03:10.000 --> 00:03:12.000
I don't remember why.

00:03:12.000 --> 00:03:14.000
Code grows organically like that sometimes.

00:03:14.000 --> 00:03:16.000
Here's the memcache key I'm using.

00:03:16.000 --> 00:03:18.000
I'm just calling the string blogs.

00:03:18.000 --> 00:03:22.000
I usually start a memcache key I'm using in a variable,

00:03:22.000 --> 00:03:24.000
especially when I'm referencing it multiple times

00:03:24.000 --> 00:03:27.000
in case I want to change it or just avoid typos and that sort of thing.

00:03:27.000 --> 00:03:29.000
It's a good habit to get into.

00:03:29.000 --> 00:03:33.000
So first I call age_get, which does the memcache lookup for that key

00:03:33.000 --> 00:03:35.000
and gives me posts and the age,

00:03:35.000 --> 00:03:38.000
and if update is true or posts is none--

00:03:38.000 --> 00:03:43.000
so basically update is true or the posts aren't in the cache--

00:03:43.000 --> 00:03:48.000
run the query, and then set mc_key to the value posts

00:03:48.000 --> 00:03:50.000
and then return the age.

00:03:50.000 --> 00:03:53.000
I've added another function called age_str,

00:03:53.000 --> 00:03:55.000
which basically takes an age--

00:03:55.000 --> 00:03:58.000
which in this point is a floating point of seconds--

00:03:58.000 --> 00:04:00.000
and it returns the string replaced--

00:04:00.000 --> 00:04:05.000
or queried--0 seconds ago, 1 second ago, that sort of thing.

00:04:05.000 --> 00:04:07.000
So it converts it to an integer.

00:04:07.000 --> 00:04:10.000
If the value is 1, we replace "seconds" with "second"

00:04:10.000 --> 00:04:13.000
so it's grammatically correct, and then we return that string.

00:04:13.000 --> 00:04:16.000
And I use this function in my templates

00:04:16.000 --> 00:04:18.000
to print that string at the bottom of my pages.

00:04:18.000 --> 00:04:21.000
And on my blog's front page, I call get_posts--

00:04:21.000 --> 00:04:25.000
remember, this returns the posts and the age--

00:04:25.000 --> 00:04:27.000
and I pass in the age to my template.

00:04:27.000 --> 00:04:31.000
I convert age and I run the age_str function on it

00:04:31.000 --> 00:04:33.000
so I can include it in my template--

00:04:33.000 --> 00:04:35.000
and then on a permalink page we do something similar.

00:04:35.000 --> 00:04:37.000
We cache each request.

00:04:37.000 --> 00:04:39.000
So this is the key for our particular post.

00:04:39.000 --> 00:04:41.000
It's the string post with post_id.

00:04:41.000 --> 00:04:45.000
I usually prepend-- When I'm looking up by ID, I usually prepend a string

00:04:45.000 --> 00:04:50.000
to the memcache key so that if I want to change it later I can just

00:04:50.000 --> 00:04:52.000
change this string and everything expires.

00:04:52.000 --> 00:04:54.000
We check to see if that post is already in the cache,

00:04:54.000 --> 00:04:56.000
and if it is we have the age.

00:04:56.000 --> 00:04:59.000
If it's not, we have to look it up from the database, and that's how we do it.

00:04:59.000 --> 00:05:03.000
And then we set it to the cache, and we set the age to 0,

00:05:03.000 --> 00:05:07.000
and then I return the permalink html,

00:05:07.000 --> 00:05:11.000
My template now takes an age parameter, which is that age string.

00:05:11.000 --> 00:05:13.000
So that's all the changes there. I'll show you the templates really quick.

00:05:13.000 --> 00:05:15.000
Front that html.

00:05:15.000 --> 00:05:17.000
It just has a new class at the bottom called age,

00:05:17.000 --> 00:05:19.000
and that includes that age string that was passed in,

00:05:19.000 --> 00:05:23.000
and permalink html has the same thing at the bottom--

00:05:23.000 --> 00:05:25.000
a class called age with that string that we passed in.

00:05:25.000 --> 00:05:28.000
And in our CSS file I added one little thing to the bottom,

00:05:28.000 --> 00:05:31.000
which is this age class, and this says position absolute,

00:05:31.000 --> 00:05:33.000
which basically says position this anywhere.

00:05:33.000 --> 00:05:35.000
Zero pixels on the bottom. Zero pixels from the right.

00:05:35.000 --> 00:05:38.000
Make it gray, and make the font size 12 pixels.

00:05:38.000 --> 00:05:40.000
So that's how I put it, down in the lower right.

00:05:40.000 --> 00:05:42.000
Obviously we're not gonna grade for that,

00:05:42.000 --> 00:05:44.000
but that's just how I did it.

00:05:44.000 --> 00:05:46.000
And that's the solution to Homework 6!

00:05:46.000 --> 00:05:50.000
I hope you figured it out on your own.

