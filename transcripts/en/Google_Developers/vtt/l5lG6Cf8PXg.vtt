WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.988
[MUSIC PLAYING]

00:00:07.946 --> 00:00:09.070
BRIT MENNUTI: Hi, everyone.

00:00:09.070 --> 00:00:10.870
Thanks so much for
joining us today.

00:00:10.870 --> 00:00:12.120
My name is Brit Mennuti.

00:00:12.120 --> 00:00:15.300
I'm a Product Manager on
the Google AR VR Team.

00:00:15.300 --> 00:00:17.670
I'm joined here today by my
colleague Bruno, a Software

00:00:17.670 --> 00:00:18.870
Engineer on the team.

00:00:18.870 --> 00:00:22.160
We have an awesome agenda
ahead for you today.

00:00:22.160 --> 00:00:23.860
So by the end of
today's session,

00:00:23.860 --> 00:00:26.570
you'll have helped
us to demo an AR app.

00:00:26.570 --> 00:00:28.150
But before we get
into that, I'll

00:00:28.150 --> 00:00:31.960
share a little bit of history
as to how and why we built Poly.

00:00:31.960 --> 00:00:34.570
I'll share what Poly is, and
how it can be useful to you

00:00:34.570 --> 00:00:35.960
as a developer.

00:00:35.960 --> 00:00:38.590
And then I'll pass it off to
Bruno to dive into the Poly API

00:00:38.590 --> 00:00:41.020
before we do the demo.

00:00:41.020 --> 00:00:43.630
Now, you may be wondering,
what is this Poly thing,

00:00:43.630 --> 00:00:45.310
and why should I care about it?

00:00:45.310 --> 00:00:46.810
Well, I think the
best way to answer

00:00:46.810 --> 00:00:50.200
that question is to take a quick
trip down Poly developer memory

00:00:50.200 --> 00:00:51.910
lane.

00:00:51.910 --> 00:00:54.340
The team that built
Poly was actually

00:00:54.340 --> 00:00:58.442
originally devoted to the
idea of productivity in VR.

00:00:58.442 --> 00:01:00.900
It was our goal to make people
more efficient and effective

00:01:00.900 --> 00:01:03.670
at work using
immersive technology.

00:01:03.670 --> 00:01:05.440
And we had a whole
bunch of hypotheses

00:01:05.440 --> 00:01:06.860
about how we could do that.

00:01:06.860 --> 00:01:10.000
And we figured, the best way to
validate those hypotheses was

00:01:10.000 --> 00:01:11.740
to build a whole
bunch of VR prototypes

00:01:11.740 --> 00:01:13.760
and test them with real people.

00:01:13.760 --> 00:01:16.630
We built everything, like
organizing your docs in VR,

00:01:16.630 --> 00:01:18.940
to training people on
how to use the espresso

00:01:18.940 --> 00:01:20.770
machine in our micro kitchen.

00:01:20.770 --> 00:01:22.900
But regardless of the
prototype that we built,

00:01:22.900 --> 00:01:26.060
one thing was always the same.

00:01:26.060 --> 00:01:27.670
We needed 3D models.

00:01:27.670 --> 00:01:31.300
And finding the right 3D
model was really, really hard,

00:01:31.300 --> 00:01:33.550
especially if we wanted a
lot of 3D models that looked

00:01:33.550 --> 00:01:35.180
like they belong together.

00:01:35.180 --> 00:01:37.520
So we said to ourselves,
OK, no big deal.

00:01:37.520 --> 00:01:39.490
We'll make our own 3D models.

00:01:39.490 --> 00:01:43.610
Turns out, making your own 3D
models is also really hard.

00:01:43.610 --> 00:01:46.480
In fact, what you see
here on this screen

00:01:46.480 --> 00:01:49.750
is a model of a hand created
by a software engineer named

00:01:49.750 --> 00:01:52.894
Chris on our team from one of
our virtual meeting prototypes.

00:01:52.894 --> 00:01:54.310
Now, how many of
you actually knew

00:01:54.310 --> 00:01:56.054
that was a hand
before I told you?

00:01:56.054 --> 00:01:56.970
BRUNO OLIVEIRA: I did.

00:01:56.970 --> 00:02:00.130
BRIT MENNUTI: I don't
believe some of you.

00:02:00.130 --> 00:02:02.320
All jokes aside,
this got us thinking

00:02:02.320 --> 00:02:05.560
that maybe, creating models
could actually be a lot easier.

00:02:05.560 --> 00:02:08.830
And perhaps, VR was
the answer to that.

00:02:08.830 --> 00:02:11.470
So we pivoted, and
we built Blocks.

00:02:11.470 --> 00:02:14.920
Blocks is an app for the
HTC Vive and Oculus Rift

00:02:14.920 --> 00:02:18.280
that lets you create
beautiful 3D models in VR.

00:02:18.280 --> 00:02:20.830
And what makes Blocks special
compared to other modeling

00:02:20.830 --> 00:02:22.540
applications is
that you actually

00:02:22.540 --> 00:02:25.990
inhabit the same space as the
thing that you're modeling.

00:02:25.990 --> 00:02:27.730
So instead of
training your brain

00:02:27.730 --> 00:02:30.880
to think about a 3D
object on a 2D surface,

00:02:30.880 --> 00:02:34.240
you can literally
just walk around it.

00:02:34.240 --> 00:02:37.240
Thanks to the launch of Blocks,
that same engineer, Chris,

00:02:37.240 --> 00:02:39.040
that I mentioned
earlier was able to make

00:02:39.040 --> 00:02:43.660
this beautiful fish tank
model in less than 15 minutes.

00:02:43.660 --> 00:02:47.710
He also made this amazing robot
workstation, all in Blocks.

00:02:47.710 --> 00:02:49.450
And I don't know
about you, but I

00:02:49.450 --> 00:02:52.000
think that that robot hand
looks a little bit better

00:02:52.000 --> 00:02:54.980
than the hand I
showed you earlier.

00:02:54.980 --> 00:02:57.857
You might have also seen Chris
in some of our launch videos.

00:02:57.857 --> 00:02:58.690
That's right, folks.

00:02:58.690 --> 00:03:02.280
One day, you, too,
can become famous.

00:03:02.280 --> 00:03:04.880
And as we were reflecting on
Blocks, we started to realize,

00:03:04.880 --> 00:03:06.630
there are a whole bunch
of other resources

00:03:06.630 --> 00:03:10.500
for 3D assets that could be
used in AR and VR development.

00:03:10.500 --> 00:03:13.530
For example, Tilt Brush
is another VR app that

00:03:13.530 --> 00:03:15.810
lets you paint in 3D space.

00:03:15.810 --> 00:03:18.270
You can create everything
from beautiful portraits

00:03:18.270 --> 00:03:20.850
to entire 3D
environments, replete with

00:03:20.850 --> 00:03:23.550
both audio and visual effects.

00:03:23.550 --> 00:03:26.670
And we also knew that there
was this vast community of 3D

00:03:26.670 --> 00:03:28.710
modelers out there,
already making

00:03:28.710 --> 00:03:32.730
tons of assets that could be
used in AR and VR development.

00:03:32.730 --> 00:03:35.460
So we thought to
ourselves, maybe

00:03:35.460 --> 00:03:38.280
the problem wasn't that
there wasn't an easy way

00:03:38.280 --> 00:03:39.430
to make models.

00:03:39.430 --> 00:03:42.120
It was also that there
wasn't a single resource

00:03:42.120 --> 00:03:44.760
to find all those assets
to use for development.

00:03:44.760 --> 00:03:46.510
And that's why we built Poly.

00:03:46.510 --> 00:03:50.910
Poly is a library of 3D
assets and experiences.

00:03:50.910 --> 00:03:54.930
And our mission is to organize
the world's 3D information

00:03:54.930 --> 00:03:56.700
and make it
accessible to creators

00:03:56.700 --> 00:03:59.780
and developers like yourselves.

00:03:59.780 --> 00:04:01.850
When you visit Poly,
you'll see thousands

00:04:01.850 --> 00:04:05.090
of assets, some of which have
been contributed by Google,

00:04:05.090 --> 00:04:06.860
but many more of which
have been uploaded

00:04:06.860 --> 00:04:08.900
by a vast community
of 3D modelers

00:04:08.900 --> 00:04:13.500
using Blocks, Tilt Brush,
and other modeling apps.

00:04:13.500 --> 00:04:15.300
And when you upload
your assets to Poly,

00:04:15.300 --> 00:04:18.750
you have the option to make
them what we call remixable.

00:04:18.750 --> 00:04:21.630
What this means is that you give
other creators and developers

00:04:21.630 --> 00:04:24.240
the right to use your assets
under a Creative Commons

00:04:24.240 --> 00:04:25.560
by license.

00:04:25.560 --> 00:04:27.570
This means they can
download those assets,

00:04:27.570 --> 00:04:32.010
use them in their apps, as long
as they give you attribution.

00:04:32.010 --> 00:04:37.230
Well the good news is that over
82% of public assets on Poly

00:04:37.230 --> 00:04:39.690
today are actually remixable.

00:04:39.690 --> 00:04:41.820
So what this means is,
there are tens of thousands

00:04:41.820 --> 00:04:43.800
of assets available
for all of you

00:04:43.800 --> 00:04:48.430
to use today for free under
a Creative Commons license.

00:04:48.430 --> 00:04:52.490
And when you go to Poly,
you can browse by category.

00:04:52.490 --> 00:04:54.980
You can also search for
exactly what you need.

00:04:54.980 --> 00:04:57.296
We recently added object
recognition to search.

00:04:57.296 --> 00:04:58.670
So you'll find
what you need even

00:04:58.670 --> 00:04:59.960
if it isn't manually tagged.

00:05:04.520 --> 00:05:06.230
And when you find
the perfect asset,

00:05:06.230 --> 00:05:07.490
you can download the file.

00:05:07.490 --> 00:05:10.340
We offer downloads in the
form OBJ, and in some cases,

00:05:10.340 --> 00:05:12.574
FBX files, as well.

00:05:12.574 --> 00:05:14.490
Now, you might be thinking,
this sounds great.

00:05:14.490 --> 00:05:18.110
But can I actually find
useful assets on Poly?

00:05:18.110 --> 00:05:21.620
Well, let's look
through some examples.

00:05:21.620 --> 00:05:24.260
Maybe you need a sandcastle
model for your vacation mode

00:05:24.260 --> 00:05:26.020
app.

00:05:26.020 --> 00:05:31.150
Or perhaps you want to recreate
Noah's ark in your living room.

00:05:31.150 --> 00:05:33.190
Or maybe you've always
wanted to include

00:05:33.190 --> 00:05:36.910
a realistic version of your
BFF, Carl, in your next game.

00:05:36.910 --> 00:05:38.869
Fun fact-- Carl is
actually a real human.

00:05:38.869 --> 00:05:40.660
He's actually one of
the talented designers

00:05:40.660 --> 00:05:43.700
behind Blocks and Poly.

00:05:43.700 --> 00:05:46.230
Or maybe you're building
an archeology app.

00:05:46.230 --> 00:05:48.590
And you need a whole
bunch of real 3D scans

00:05:48.590 --> 00:05:50.400
of historic artifacts.

00:05:50.400 --> 00:05:51.980
Well, thanks to a
recent partnership

00:05:51.980 --> 00:05:54.500
between Google Arts and
Culture and SCI-Arc,

00:05:54.500 --> 00:05:57.370
there are a dozen of these
actual artifacts hosted on Poly

00:05:57.370 --> 00:05:59.910
for you to download today.

00:05:59.910 --> 00:06:01.770
And finally,
perhaps all you ever

00:06:01.770 --> 00:06:04.620
wanted was a politically
correct cheeseburger.

00:06:04.620 --> 00:06:05.520
That's right, folks.

00:06:05.520 --> 00:06:10.380
This burger has the
cheese in both locations.

00:06:10.380 --> 00:06:11.820
No matter what
you're looking for,

00:06:11.820 --> 00:06:15.180
you'll find everything you need
on Poly to create a unique VR

00:06:15.180 --> 00:06:18.180
or AR experience, like
this VR scavenger hunt

00:06:18.180 --> 00:06:21.870
game created by artist and
developer Harlan Perez.

00:06:21.870 --> 00:06:27.140
He built this using Blocks,
Poly, and Unreal Engine.

00:06:27.140 --> 00:06:28.790
Or these AR apps.

00:06:28.790 --> 00:06:31.850
On the left, you'll see an app
from developer Andrew Deutsch,

00:06:31.850 --> 00:06:33.920
where he takes beautiful
flower models from Poly

00:06:33.920 --> 00:06:36.120
and puts them in an
otherwise-dismal New York City

00:06:36.120 --> 00:06:37.660
subway platform.

00:06:37.660 --> 00:06:40.940
Or on the right, an app from
developer Ben Ferns that uses

00:06:40.940 --> 00:06:43.580
object recognition
and the Poly API

00:06:43.580 --> 00:06:46.760
to retrieve low-poly versions
of real-world objects

00:06:46.760 --> 00:06:47.480
in real time.

00:06:50.210 --> 00:06:52.300
Now, as we thought
back to Poly's mission,

00:06:52.300 --> 00:06:54.880
it occurred to us that we might
be falling a little bit short

00:06:54.880 --> 00:06:56.800
on the accessible portion.

00:06:56.800 --> 00:07:00.010
Having to go to a website and
download an object every time

00:07:00.010 --> 00:07:01.510
you needed it for
your development

00:07:01.510 --> 00:07:04.940
was perhaps not the
most efficient solution.

00:07:04.940 --> 00:07:07.346
So that's why we
built the Poly API.

00:07:07.346 --> 00:07:09.970
And with that, I'm going to hand
it off to Bruno to share more.

00:07:12.517 --> 00:07:13.600
BRUNO OLIVEIRA: All right.

00:07:13.600 --> 00:07:15.843
[APPLAUSE]

00:07:16.342 --> 00:07:18.170
Thank you.

00:07:18.170 --> 00:07:20.702
So we're going to talk about
the Poly API and Poly Toolkit.

00:07:20.702 --> 00:07:22.410
There are so many ways
that I could begin

00:07:22.410 --> 00:07:25.350
a presentation about an API.

00:07:25.350 --> 00:07:27.390
So when I asked for
advice, someone said,

00:07:27.390 --> 00:07:30.000
why don't you start with
an inspirational quote--

00:07:30.000 --> 00:07:33.640
something somebody famous said
that's relevant to the topic?

00:07:33.640 --> 00:07:35.730
So this is the one that I chose.

00:07:35.730 --> 00:07:39.330
"A good API creates more
problems than it solves."

00:07:39.330 --> 00:07:44.580
Does anybody know who
famously said this and when?

00:07:44.580 --> 00:07:49.980
That's right-- nobody, ever.

00:07:49.980 --> 00:07:53.550
And that's why, any time
you're working with an API,

00:07:53.550 --> 00:07:55.490
there is a simple but
fundamental question

00:07:55.490 --> 00:07:56.770
that you have to ask.

00:07:56.770 --> 00:07:58.310
And that question is, why?

00:07:58.310 --> 00:08:00.170
Why would you use this API?

00:08:00.170 --> 00:08:05.320
How is my life easier or
better if I use the Poly API?

00:08:05.320 --> 00:08:09.640
To answer that, let's go
back a couple of decades.

00:08:09.640 --> 00:08:12.480
So I've always liked
building games.

00:08:12.480 --> 00:08:14.181
So my friends and I
would get together,

00:08:14.181 --> 00:08:15.930
and we would try to
build a bunch of games

00:08:15.930 --> 00:08:19.140
in the old computers
of the time.

00:08:19.140 --> 00:08:22.260
We kind of knew
how to do the code.

00:08:22.260 --> 00:08:25.080
But the problem that we
had was that none of us

00:08:25.080 --> 00:08:27.210
really knew how to make art.

00:08:27.210 --> 00:08:28.780
We had no skills whatsoever.

00:08:28.780 --> 00:08:31.920
Like, stick figures were
already a challenge.

00:08:31.920 --> 00:08:34.260
But somehow, we had
very high expectations

00:08:34.260 --> 00:08:37.799
about what our graphics
were going to look like.

00:08:37.799 --> 00:08:42.900
In reality, however, our
graphics looked more like this.

00:08:42.900 --> 00:08:45.720
Does anybody know what that is?

00:08:45.720 --> 00:08:50.420
It's a dragon, of course.

00:08:50.420 --> 00:08:52.740
But come on.

00:08:52.740 --> 00:08:57.990
If this is a valid hand,
then that's a valid dragon.

00:08:57.990 --> 00:08:59.970
Now, you might
think that my skills

00:08:59.970 --> 00:09:02.690
would have improved over time.

00:09:02.690 --> 00:09:06.550
However, you would be wrong.

00:09:06.550 --> 00:09:09.420
I'm the kind of developer who
uses cubes for everything.

00:09:09.420 --> 00:09:13.500
So with my skill level, I
could theoretically make a game

00:09:13.500 --> 00:09:18.120
about a cube that shoots other
cubes to protect the larger

00:09:18.120 --> 00:09:21.420
cubes from being hit
by the smaller cubes,

00:09:21.420 --> 00:09:24.970
all against a backdrop
of moving cubes.

00:09:24.970 --> 00:09:27.396
If you think that there's no
way that that game is viable,

00:09:27.396 --> 00:09:28.770
if you think that
there is no way

00:09:28.770 --> 00:09:31.350
that that's an
actual thing, it's

00:09:31.350 --> 00:09:34.890
because you haven't
played Cubic Pilot.

00:09:34.890 --> 00:09:37.302
Not only did I launch
this, but Google,

00:09:37.302 --> 00:09:38.760
in some official
capacity, actually

00:09:38.760 --> 00:09:41.470
endorsed this, because this is
a sample for the Google Play

00:09:41.470 --> 00:09:43.860
Games API.

00:09:43.860 --> 00:09:46.830
Now, my point with all this
is that we all have this book

00:09:46.830 --> 00:09:49.960
as developers in our shelf.

00:09:49.960 --> 00:09:51.150
It's at the top of my shelf.

00:09:51.150 --> 00:09:52.560
Everyone has it.

00:09:52.560 --> 00:09:55.390
It's a bestseller.

00:09:55.390 --> 00:09:57.790
It's called "Apologizing
for the Lack of Graphics."

00:09:57.790 --> 00:10:01.120
Now, sometimes, I know,
we can get away with it.

00:10:01.120 --> 00:10:03.550
Sometimes, we can do
clever tricks in our games

00:10:03.550 --> 00:10:05.200
to make graphics unnecessary.

00:10:05.200 --> 00:10:08.370
My favorite one is
claiming that it's magic.

00:10:08.370 --> 00:10:11.780
The dragon is invisible.

00:10:11.780 --> 00:10:13.690
But it doesn't work every time.

00:10:13.690 --> 00:10:17.070
Users end up noticing
that we're doing this.

00:10:17.070 --> 00:10:19.290
Now, to some people,
when I show them

00:10:19.290 --> 00:10:23.750
this, what they suggest to
me is, why don't you just buy

00:10:23.750 --> 00:10:25.730
a collection of 3D assets?

00:10:25.730 --> 00:10:29.000
You know, I could just buy a
collection of nice 3D assets,

00:10:29.000 --> 00:10:32.550
and then you don't have to use
cubes or ugly dragons anymore.

00:10:32.550 --> 00:10:35.960
And then I say, well, this
is the traditional model

00:10:35.960 --> 00:10:38.080
for asset acquisition.

00:10:38.080 --> 00:10:40.940
This model has a
couple of problems.

00:10:40.940 --> 00:10:46.010
One of the problems with this
model is cats, obviously.

00:10:46.010 --> 00:10:48.330
Maybe I should go
into more details.

00:10:48.330 --> 00:10:50.020
All right, if I
ever actually tried

00:10:50.020 --> 00:10:54.370
to buy a 3D model of a cat
online, you know what I mean?

00:10:54.370 --> 00:10:56.930
You can't just buy one cat.

00:10:56.930 --> 00:11:00.980
You have to buy a super cat pack
deluxe special edition with 700

00:11:00.980 --> 00:11:03.260
fully [INAUDIBLE] animated cats.

00:11:03.260 --> 00:11:06.250
It's very hard to
find separate assets.

00:11:06.250 --> 00:11:08.820
The second problem is
that sometimes, you're

00:11:08.820 --> 00:11:12.030
still in the prototyping
phase of your app.

00:11:12.030 --> 00:11:14.460
At this point in my
app development cycle,

00:11:14.460 --> 00:11:17.430
I'm not even sure if I'm
making a game about cats

00:11:17.430 --> 00:11:21.630
or about spaceships, or even
about cats that fly spaceships.

00:11:21.630 --> 00:11:23.440
It's a valid thing.

00:11:23.440 --> 00:11:26.350
So I need that
flexibility to try it out

00:11:26.350 --> 00:11:28.500
with different assets.

00:11:28.500 --> 00:11:31.890
And the third problem is users.

00:11:31.890 --> 00:11:34.650
Well, as you know,
user are fickle,

00:11:34.650 --> 00:11:36.280
and they don't know
what they want.

00:11:36.280 --> 00:11:38.640
So what happens if you
ship your app and then--

00:11:38.640 --> 00:11:41.280
I know it's unthinkable,
but suppose that you never

00:11:41.280 --> 00:11:43.410
actually thought
about cats at all

00:11:43.410 --> 00:11:45.450
during the development
cycle of your app.

00:11:45.450 --> 00:11:48.900
And now, when it's in the
user's hand at runtime,

00:11:48.900 --> 00:11:52.200
the users want to
have a cat in the app.

00:11:52.200 --> 00:11:53.240
How do you do that?

00:11:53.240 --> 00:11:54.990
Well, you would need
to somehow figure out

00:11:54.990 --> 00:11:59.930
a way to pull out a
cat from a runtime API.

00:11:59.930 --> 00:12:04.250
So Poly, by contrast,
has the flexibility

00:12:04.250 --> 00:12:08.070
that you need to try out
with many different assets

00:12:08.070 --> 00:12:09.390
from Poly.

00:12:09.390 --> 00:12:12.969
It has a runtime API, which
means that during runtime, you

00:12:12.969 --> 00:12:15.510
can go and search for cats and
then present cats to the user,

00:12:15.510 --> 00:12:17.940
or anything else that they want.

00:12:17.940 --> 00:12:20.400
And also, it's not
a static collection.

00:12:20.400 --> 00:12:23.046
It's not something that
you just compile once,

00:12:23.046 --> 00:12:24.670
and then you only
have the same assets.

00:12:24.670 --> 00:12:27.860
It's a growing
collection, because users

00:12:27.860 --> 00:12:29.962
are contributing to that
collection all the time.

00:12:29.962 --> 00:12:31.920
If you see there, you're
going to see that even

00:12:31.920 --> 00:12:35.030
I, with my limited skills,
made my contribution.

00:12:35.030 --> 00:12:39.480
Can you guess which one
is my 3D model over there?

00:12:39.480 --> 00:12:41.250
Any guesses?

00:12:41.250 --> 00:12:42.580
It's actually none of them.

00:12:42.580 --> 00:12:46.150
I uploaded this cube.

00:12:46.150 --> 00:12:48.400
So whenever you're making a
game, and you need a cube,

00:12:48.400 --> 00:12:49.358
you know where to look.

00:12:52.910 --> 00:12:56.300
So we have this great
collection of assets on Poly.

00:12:56.300 --> 00:12:58.250
And then, on the other
side, we have our apps.

00:12:58.250 --> 00:13:00.570
And we want to be able
to consume those assets.

00:13:00.570 --> 00:13:03.080
So what's the missing
piece in that puzzle?

00:13:03.080 --> 00:13:07.170
Of course, what we
need in this is an API.

00:13:07.170 --> 00:13:11.070
So the API is how your app gets
access to these assets in Poly.

00:13:11.070 --> 00:13:13.590
Now, naming is difficult in
general in computer science.

00:13:13.590 --> 00:13:15.630
So we put a bunch of
very creative people

00:13:15.630 --> 00:13:20.130
together to come up with a
name for this API for Poly.

00:13:20.130 --> 00:13:25.410
After several hours, we
came up with Poly API.

00:13:25.410 --> 00:13:28.380
It's very precise.

00:13:28.380 --> 00:13:31.440
On a very high level,
how does this API work?

00:13:31.440 --> 00:13:34.030
On a very high level,
it's like a search API.

00:13:34.030 --> 00:13:36.220
Your app wants 3D assets.

00:13:36.220 --> 00:13:38.636
So it is going to
make a search query.

00:13:38.636 --> 00:13:40.760
In the simplest case, that's
going to be a keyword.

00:13:40.760 --> 00:13:43.940
For example, the app
could say, I like cats.

00:13:43.940 --> 00:13:45.690
I would like some cats, please.

00:13:45.690 --> 00:13:49.100
And then the API would
return some interesting cats

00:13:49.100 --> 00:13:51.420
for your app to consume.

00:13:51.420 --> 00:13:54.200
Now, what happens if
you're not a cat person?

00:13:54.200 --> 00:13:55.980
Can you still use this API?

00:13:55.980 --> 00:13:58.359
And the answer is yes.

00:13:58.359 --> 00:14:00.150
Or what happens if you
want to be much more

00:14:00.150 --> 00:14:02.640
specific about the
kinds of animals

00:14:02.640 --> 00:14:04.530
that you want in your app?

00:14:04.530 --> 00:14:08.400
In that case, you can make
a more complex request.

00:14:08.400 --> 00:14:13.260
For example, you could say,
I like low-complexity assets

00:14:13.260 --> 00:14:16.234
from the animals category,
made in Tilt Brush.

00:14:16.234 --> 00:14:18.400
And I want them to be ordered
from newest to oldest.

00:14:18.400 --> 00:14:22.740
So you can make very complex
API requests like that.

00:14:22.740 --> 00:14:25.020
You probably would not
get any cats on this one,

00:14:25.020 --> 00:14:27.120
because as we know, cats
are very complex animals.

00:14:30.580 --> 00:14:32.680
And if the user is
signed in, you also

00:14:32.680 --> 00:14:35.532
have the option of getting
the user's own assets.

00:14:35.532 --> 00:14:37.240
So this means that
you can get the assets

00:14:37.240 --> 00:14:40.630
that the user has uploaded to
Poly, but hasn't published yet.

00:14:40.630 --> 00:14:42.790
So you can get assets
in draft state.

00:14:42.790 --> 00:14:45.250
And you could use
that, for example,

00:14:45.250 --> 00:14:49.100
to let the user add
those to your scene.

00:14:49.100 --> 00:14:52.040
So we talked about the what,
and we talked about the why.

00:14:52.040 --> 00:14:56.500
Now, let's move on to the next
W question, which is when.

00:14:56.500 --> 00:14:58.240
When do we use the Poly API?

00:14:58.240 --> 00:15:02.190
Fortunately, the answer to
this one is much easier--

00:15:02.190 --> 00:15:03.970
how about now?

00:15:03.970 --> 00:15:07.970
So with that, let's
do a live demo.

00:15:07.970 --> 00:15:11.170
You know what's the first
rule of live demos on stage?

00:15:11.170 --> 00:15:14.100
It's, you never do a
live demo on stage.

00:15:14.100 --> 00:15:19.552
So I'm going to try and
see if this will work.

00:15:19.552 --> 00:15:21.010
All right, how many
people actually

00:15:21.010 --> 00:15:23.960
think that this demo
is going to work?

00:15:23.960 --> 00:15:25.340
All right.

00:15:25.340 --> 00:15:27.990
How many people think this
demo is going to fail?

00:15:27.990 --> 00:15:29.261
All right, a couple of people.

00:15:29.261 --> 00:15:31.760
How many people think it's going
to fail in some, like, epic

00:15:31.760 --> 00:15:32.634
and embarrassing way?

00:15:32.634 --> 00:15:35.490
Like, something is going
to catch fire on stage.

00:15:35.490 --> 00:15:36.650
Oh, two people.

00:15:36.650 --> 00:15:37.800
That's not bad.

00:15:37.800 --> 00:15:39.900
All right, so here,
I have my demo app.

00:15:39.900 --> 00:15:43.800
So this is using ARCore and
the Poly Toolkit for Unity.

00:15:43.800 --> 00:15:46.250
So first of all, this is just
ARCore showing me the planes

00:15:46.250 --> 00:15:47.041
that it's tracking.

00:15:47.041 --> 00:15:51.170
So we have here this very nice
carpet that ARCore is tracking.

00:15:51.170 --> 00:15:53.750
And now, when I tap my
finger on the screen,

00:15:53.750 --> 00:15:54.990
I'm going to place an object.

00:15:54.990 --> 00:15:56.780
And this object came
from Poly, but it's

00:15:56.780 --> 00:15:58.940
pre-compiled into the app.

00:15:58.940 --> 00:16:00.830
It's this little intersection.

00:16:00.830 --> 00:16:03.320
Now, since I don't want to
bend down to the ground,

00:16:03.320 --> 00:16:03.910
I will just--

00:16:03.910 --> 00:16:07.480
I have this hack where I can
increase the height of this--

00:16:07.480 --> 00:16:08.420
right here.

00:16:08.420 --> 00:16:10.560
OK, oops, it's
running away from me.

00:16:10.560 --> 00:16:11.630
There we go.

00:16:11.630 --> 00:16:13.990
So we have this
little intersection.

00:16:13.990 --> 00:16:15.770
Now, the point of
this app is just

00:16:15.770 --> 00:16:18.620
to add some objects
from Poly to make

00:16:18.620 --> 00:16:20.246
it look more like a real city.

00:16:20.246 --> 00:16:21.620
So what's one
thing that we could

00:16:21.620 --> 00:16:24.560
add to make it look more real?

00:16:24.560 --> 00:16:25.060
Cars?

00:16:25.060 --> 00:16:25.860
BRIT MENNUTI: How
about some cars?

00:16:25.860 --> 00:16:26.630
BRUNO OLIVEIRA: Yeah, cars.

00:16:26.630 --> 00:16:27.160
Cars make sense.

00:16:27.160 --> 00:16:29.035
All right, so I'm going
to do a search query.

00:16:29.035 --> 00:16:31.026
I'm just going to type car.

00:16:31.026 --> 00:16:32.710
Then we do a search.

00:16:32.710 --> 00:16:34.750
I made this keyboard myself.

00:16:34.750 --> 00:16:36.460
And now I'm going to do search.

00:16:36.460 --> 00:16:38.794
OK, so these are
our search results.

00:16:38.794 --> 00:16:40.960
And now, all we have to do
is tap one of these cars.

00:16:40.960 --> 00:16:42.950
And now, it's in our scene.

00:16:42.950 --> 00:16:45.280
Then I rotate the
car a little bit.

00:16:45.280 --> 00:16:46.370
There we go.

00:16:46.370 --> 00:16:49.850
And I'm going to carefully place
it here on one of our streets.

00:16:49.850 --> 00:16:52.130
There we go.

00:16:52.130 --> 00:16:53.360
So I actually put some--

00:16:53.360 --> 00:16:55.610
I wrote some scripts in this
so that the cars actually

00:16:55.610 --> 00:16:56.190
do something.

00:16:56.190 --> 00:17:01.090
So if I click Run,
then the car will run.

00:17:01.090 --> 00:17:02.890
And now, let's add
some other cars.

00:17:02.890 --> 00:17:03.990
So go back the results.

00:17:03.990 --> 00:17:06.099
Let's add this one.

00:17:06.099 --> 00:17:09.510
And just going to
place it over here.

00:17:09.510 --> 00:17:12.540
You may or may not have
played more exciting games.

00:17:12.540 --> 00:17:14.430
But you know, in
some games, your goal

00:17:14.430 --> 00:17:17.700
is to save the kingdom,
save the world.

00:17:17.700 --> 00:17:19.770
In this game, your
goal is just to make

00:17:19.770 --> 00:17:22.911
traffic as bad as possible.

00:17:22.911 --> 00:17:24.910
And the other minigame
in this is, how many cars

00:17:24.910 --> 00:17:28.210
can I put in the scene without
them crashing into each other?

00:17:28.210 --> 00:17:31.990
My high score is one.

00:17:31.990 --> 00:17:35.630
Let's see if I
beat my high score.

00:17:35.630 --> 00:17:39.550
Wow, my high score is now two.

00:17:39.550 --> 00:17:41.050
Let's add something else.

00:17:41.050 --> 00:17:43.540
What's something else that you
would see in a typical city?

00:17:43.540 --> 00:17:45.060
BRIT MENNUTI: How about a boat?

00:17:45.060 --> 00:17:46.390
BRUNO OLIVEIRA: A boat.

00:17:46.390 --> 00:17:48.370
Sure, why not?

00:17:48.370 --> 00:17:49.870
A boat.

00:17:49.870 --> 00:17:52.120
After all, this is AR.

00:17:52.120 --> 00:17:55.740
Searching for boats,
see what boats we have.

00:17:55.740 --> 00:17:58.230
All right, I'm going to
add this cruise liner.

00:17:58.230 --> 00:18:00.794
Let's make it a little bigger.

00:18:00.794 --> 00:18:03.620
All right, I'm going to put this
cruise liner here on the road.

00:18:03.620 --> 00:18:05.169
There we go.

00:18:05.169 --> 00:18:07.460
It's going to be driving on
the wrong side of the road,

00:18:07.460 --> 00:18:09.440
but I think that's not the
worst traffic violation

00:18:09.440 --> 00:18:10.356
that's happening here.

00:18:12.920 --> 00:18:14.720
Oh, my high scores is two, now.

00:18:14.720 --> 00:18:15.984
Perfect.

00:18:15.984 --> 00:18:17.150
So let's add something else.

00:18:17.150 --> 00:18:19.704
I mean, we're not restricted
to forms of transportation.

00:18:19.704 --> 00:18:20.870
It's getting close to lunch.

00:18:20.870 --> 00:18:22.450
So I'm getting hungry.

00:18:22.450 --> 00:18:27.030
Let's just add a jar of peanut
butter, or something like that.

00:18:27.030 --> 00:18:28.820
I'm just making this up as I go.

00:18:28.820 --> 00:18:32.520
So jar-- oh, even better.

00:18:32.520 --> 00:18:36.250
All right, let's put this year.

00:18:36.250 --> 00:18:38.510
It's a giant jar of jam.

00:18:38.510 --> 00:18:41.440
Does anybody know what this is?

00:18:41.440 --> 00:18:42.730
Any guesses?

00:18:42.730 --> 00:18:44.740
It's a traffic jam, exactly.

00:18:44.740 --> 00:18:45.760
It's a terrible pun.

00:18:45.760 --> 00:18:46.510
Sorry.

00:18:46.510 --> 00:18:48.310
There we go.

00:18:48.310 --> 00:18:50.740
So this just shows how you
can continually add objects

00:18:50.740 --> 00:18:52.240
from Poly into this demo.

00:18:52.240 --> 00:18:54.760
And I think pretty much, I
think, nothing else surprising

00:18:54.760 --> 00:18:56.920
is going to happen in this
demo, unless, of course,

00:18:56.920 --> 00:19:00.379
a dragon were to appear
and set fire to everything.

00:19:00.379 --> 00:19:02.295
So for those of you who
thought that something

00:19:02.295 --> 00:19:06.588
was going to catch fire, I
think you were right, in a way.

00:19:06.588 --> 00:19:09.564
All right, so I'm glad
that this demo worked.

00:19:09.564 --> 00:19:10.960
[APPLAUSE]

00:19:10.960 --> 00:19:11.460
Thanks.

00:19:16.680 --> 00:19:20.660
All right, now let's move on to,
how do I actually use the API?

00:19:20.660 --> 00:19:23.460
So you have the Poly
API on one side.

00:19:23.460 --> 00:19:26.340
And you have your app
on the other side.

00:19:26.340 --> 00:19:28.470
And it's naturally
cross-platform,

00:19:28.470 --> 00:19:30.264
because it's a REST API.

00:19:30.264 --> 00:19:31.680
This means that
you can get access

00:19:31.680 --> 00:19:35.490
to it from any device that
has access to the internet.

00:19:35.490 --> 00:19:37.710
So we support
several platforms--

00:19:37.710 --> 00:19:40.442
Android, iOS,
Unity, Unreal, Web.

00:19:40.442 --> 00:19:42.150
Today, we're going to
focus our attention

00:19:42.150 --> 00:19:43.710
on the Poly Toolkit for Unity.

00:19:43.710 --> 00:19:46.180
So Poly Toolkit is
just an SDK for Unity

00:19:46.180 --> 00:19:47.850
that lets you use the Poly API.

00:19:51.490 --> 00:19:54.010
So when you download and
install Poly Toolkit,

00:19:54.010 --> 00:19:58.112
it becomes fully integrated
into your Unity editor.

00:19:58.112 --> 00:19:59.570
So you're going to
see that window.

00:19:59.570 --> 00:20:02.440
And on that window, we can
browse for Poly assets.

00:20:02.440 --> 00:20:04.474
So I can see, that's
going to show you--

00:20:04.474 --> 00:20:06.640
by default, it's going to
show you the featured ones

00:20:06.640 --> 00:20:07.719
on the website.

00:20:07.719 --> 00:20:09.010
But you can change the filters.

00:20:09.010 --> 00:20:11.050
So you could filter
by object type.

00:20:11.050 --> 00:20:13.720
You could filter by category.

00:20:13.720 --> 00:20:16.120
You could say, let me look
at the stuff in the transport

00:20:16.120 --> 00:20:18.430
category, the food category.

00:20:18.430 --> 00:20:19.680
You could also do a search.

00:20:19.680 --> 00:20:21.689
So there's a little
search button there.

00:20:21.689 --> 00:20:23.230
So if you need a
dragon for your app,

00:20:23.230 --> 00:20:25.000
you can search for a dragon.

00:20:25.000 --> 00:20:28.120
If you need a cube, if you
need a cat, anything you want,

00:20:28.120 --> 00:20:29.080
just click search.

00:20:29.080 --> 00:20:32.170
And then you'll find
the asset that you want.

00:20:32.170 --> 00:20:34.510
Then, once you find
some good asset

00:20:34.510 --> 00:20:37.420
that you want to important into
your scene, all you have to do

00:20:37.420 --> 00:20:38.870
is click on the Import button.

00:20:38.870 --> 00:20:40.828
For example, I just click
on the Import button,

00:20:40.828 --> 00:20:43.950
and now this garden
is on my scene.

00:20:43.950 --> 00:20:47.220
And notice that this is already
in your scene, in your project.

00:20:47.220 --> 00:20:49.980
And this is already a
perfectly reasonable app.

00:20:49.980 --> 00:20:52.560
If you click Play,
it's going to run.

00:20:52.560 --> 00:20:55.070
And it's already
like a full app.

00:20:55.070 --> 00:20:58.400
Of course, if you actually want
the garden to do something,

00:20:58.400 --> 00:21:00.142
you have to write some code.

00:21:00.142 --> 00:21:01.850
Otherwise, it's going
to be more like one

00:21:01.850 --> 00:21:03.330
of those contemplative gardens.

00:21:06.070 --> 00:21:08.090
But you know what's
going to happen?

00:21:08.090 --> 00:21:11.590
You're going to ship this
app, contemplative garden,

00:21:11.590 --> 00:21:12.975
on Google Play.

00:21:12.975 --> 00:21:15.100
And then the first thing
that users are going to do

00:21:15.100 --> 00:21:17.980
is, they're going to say, sure.

00:21:17.980 --> 00:21:19.990
This garden's very nice.

00:21:19.990 --> 00:21:24.430
However, I want a cat.

00:21:24.430 --> 00:21:26.570
That's what's going to happen.

00:21:26.570 --> 00:21:30.640
So to get the users their cat,
you have to use the Poly API.

00:21:30.640 --> 00:21:32.949
You have to use the runtime
part of the Poly API.

00:21:32.949 --> 00:21:34.990
So let's talk a little
bit about the Runtime API.

00:21:34.990 --> 00:21:37.450
It allows you to browse,
search, and download assets

00:21:37.450 --> 00:21:39.980
at runtime from your app.

00:21:39.980 --> 00:21:44.584
I have no idea what that
blue robot is doing.

00:21:44.584 --> 00:21:46.500
This is an actual picture
from what's going on

00:21:46.500 --> 00:21:47.708
in the data center right now.

00:21:50.090 --> 00:21:55.190
So this is an overview of
how the Runtime API works.

00:21:55.190 --> 00:21:57.494
First, we have to
create a Request object.

00:21:57.494 --> 00:21:59.660
For example, you could
create-- the most typical one

00:21:59.660 --> 00:22:02.360
would be the
PolyListAssetsRequest.

00:22:02.360 --> 00:22:06.560
This Request object just
encodes your search query.

00:22:06.560 --> 00:22:09.770
Then, you pass that object
to one of the API methods--

00:22:09.770 --> 00:22:11.210
for example, ListAssets.

00:22:11.210 --> 00:22:13.520
ListAssets just means, I
want to list the assets that

00:22:13.520 --> 00:22:16.307
match that search request.

00:22:16.307 --> 00:22:18.140
Then, you're going to
wait for the callback.

00:22:18.140 --> 00:22:19.515
And the callback
is going to have

00:22:19.515 --> 00:22:20.882
the results for your search.

00:22:20.882 --> 00:22:22.340
And then, based on
that search, you

00:22:22.340 --> 00:22:24.506
have to figure out
which ones you want.

00:22:24.506 --> 00:22:25.880
If there are
several matches, you

00:22:25.880 --> 00:22:28.400
have to figure out which one
you actually want to import.

00:22:28.400 --> 00:22:31.010
And then lastly, you
call PolyApi.Import

00:22:31.010 --> 00:22:33.980
to import that into your scene.

00:22:33.980 --> 00:22:35.560
Start with a basic example.

00:22:35.560 --> 00:22:39.240
If you just do
PolyListAssetsRequest.Featured,

00:22:39.240 --> 00:22:41.100
this is a default
featured query.

00:22:41.100 --> 00:22:44.220
This means, you want to get
exactly what Poly is currently

00:22:44.220 --> 00:22:45.700
showing on the website.

00:22:45.700 --> 00:22:47.510
So featured assets,
no specific category,

00:22:47.510 --> 00:22:48.960
and no specific keyword--

00:22:48.960 --> 00:22:51.420
just anything good
that Poly is currently

00:22:51.420 --> 00:22:53.980
showing on the website.

00:22:53.980 --> 00:22:56.060
Then you execute that request.

00:22:56.060 --> 00:22:57.890
To do that, just
call ListAssets.

00:22:57.890 --> 00:22:59.460
You'll pass your request.

00:22:59.460 --> 00:23:00.960
And then once you
get a callback,

00:23:00.960 --> 00:23:03.350
you're going to get a list
of assets that you want.

00:23:03.350 --> 00:23:06.310
And then you're going to choose
among those assets in some way.

00:23:06.310 --> 00:23:10.692
For example, you could just
let the user pick one of them.

00:23:10.692 --> 00:23:12.900
And then, once you know
which one you want to import,

00:23:12.900 --> 00:23:16.160
you just call PolyApi.Import
and pass in the asset,

00:23:16.160 --> 00:23:18.217
and that's going to get
imported into your scene.

00:23:22.420 --> 00:23:24.770
So now, suppose that you
want to do a keyword search.

00:23:24.770 --> 00:23:26.830
In our example, we want cats.

00:23:26.830 --> 00:23:29.420
To do that, you simply
just set the keywords field

00:23:29.420 --> 00:23:31.220
of the request to cat.

00:23:31.220 --> 00:23:31.940
And that's it.

00:23:31.940 --> 00:23:35.772
Then you execute the request,
and then you get cats.

00:23:35.772 --> 00:23:37.860
Now, by default, you're
going to get assets

00:23:37.860 --> 00:23:41.640
from newest to latest, which is
normally a good sorting order.

00:23:41.640 --> 00:23:42.750
But what if you want--

00:23:42.750 --> 00:23:45.400
what if I don't want new cats?

00:23:45.400 --> 00:23:47.105
I want the best cats.

00:23:47.105 --> 00:23:48.980
In that case, you just
set this sorting order

00:23:48.980 --> 00:23:50.550
to PolyOrderBy.BEST.

00:23:50.550 --> 00:23:53.490
And then you get from the
best cat to the worst cat.

00:23:56.190 --> 00:23:58.280
What happens if you are
more picky about the cats

00:23:58.280 --> 00:23:59.490
that you want?

00:23:59.490 --> 00:24:01.750
Well, we can fill
in other fields.

00:24:01.750 --> 00:24:04.230
For example, we could specify
the maximum complexity field

00:24:04.230 --> 00:24:06.840
and say, I want
medium-complexity cats at most.

00:24:06.840 --> 00:24:09.390
Complexity just means
the polygon complexity

00:24:09.390 --> 00:24:10.690
of the model.

00:24:10.690 --> 00:24:13.392
So if you're running an app
in a performance-sensitive

00:24:13.392 --> 00:24:15.850
environment, you might just
want the low-complexity models.

00:24:18.060 --> 00:24:20.310
If you're not particularly
strained about performance,

00:24:20.310 --> 00:24:22.310
you could ask for
high-complexity models

00:24:22.310 --> 00:24:24.110
that are more realistic.

00:24:24.110 --> 00:24:25.790
You can also set
the format filter.

00:24:25.790 --> 00:24:27.860
And you can request,
how many cats per page

00:24:27.860 --> 00:24:29.659
do you actually want?

00:24:29.659 --> 00:24:31.450
So again, it's getting
close to lunch time.

00:24:31.450 --> 00:24:32.750
We're getting hungry.

00:24:32.750 --> 00:24:36.310
So of course, the Poly API
has a solution for that.

00:24:36.310 --> 00:24:38.890
You can request anything
from our food category

00:24:38.890 --> 00:24:40.100
by using an API call.

00:24:40.100 --> 00:24:42.172
So if you set the
category to food,

00:24:42.172 --> 00:24:43.630
then you're going
to get everything

00:24:43.630 --> 00:24:44.656
from the food category.

00:24:44.656 --> 00:24:46.155
And since we're
really hungry, let's

00:24:46.155 --> 00:24:47.490
just set the page size to 100.

00:24:47.490 --> 00:24:50.077
So we want 100 items
of food at a time.

00:24:50.077 --> 00:24:52.160
And now, the default
ordering is newest to oldest.

00:24:52.160 --> 00:24:54.640
So chances are, if you
run this query right now,

00:24:54.640 --> 00:24:57.490
you're going to get a freshly
uploaded batch of cookies,

00:24:57.490 --> 00:24:59.160
which is nice.

00:24:59.160 --> 00:25:01.160
What happens if you're
worried about the quality

00:25:01.160 --> 00:25:02.445
of the assets?

00:25:02.445 --> 00:25:04.820
Maybe I don't want to serve
just any cookies that anybody

00:25:04.820 --> 00:25:05.960
has uploaded into the site.

00:25:05.960 --> 00:25:08.670
I want to have some criteria.

00:25:08.670 --> 00:25:14.060
So you could just hire a team
and have a team whose only

00:25:14.060 --> 00:25:17.150
job it is to search for
assets and mark the ones that

00:25:17.150 --> 00:25:19.490
are good, that you want
to present to your user,

00:25:19.490 --> 00:25:21.110
and the ones that are not.

00:25:21.110 --> 00:25:23.480
But we already had to do that
work, because that's what

00:25:23.480 --> 00:25:25.640
we do for the Poly website.

00:25:25.640 --> 00:25:29.340
So we decided to expose that in
the API to make things easier.

00:25:29.340 --> 00:25:31.970
So we have a flag
called curation status.

00:25:31.970 --> 00:25:34.610
And you can use that
in your search query.

00:25:34.610 --> 00:25:37.740
This means that whatever
asset has that set to true,

00:25:37.740 --> 00:25:39.260
it means that we--

00:25:39.260 --> 00:25:41.750
that our human reviewers
actually marked that

00:25:41.750 --> 00:25:43.230
as being a good asset.

00:25:43.230 --> 00:25:45.290
So if you trust our
good taste, then you

00:25:45.290 --> 00:25:48.725
can use that flag to filter
your assets, as well.

00:25:48.725 --> 00:25:50.850
In terms of code, all you
have to do is set curated

00:25:50.850 --> 00:25:52.190
equals true.

00:25:52.190 --> 00:25:54.860
And that will filter only
by the reviewed assets.

00:25:57.749 --> 00:25:59.790
Now, we're going to have
a good problem to solve,

00:25:59.790 --> 00:26:00.900
which is, you run the query.

00:26:00.900 --> 00:26:02.941
And now, we have a bunch
of choices for the user.

00:26:02.941 --> 00:26:05.640
We have a bunch of cats
that they can choose from.

00:26:05.640 --> 00:26:08.280
So how do you actually let
them pick a cat, or a dragon,

00:26:08.280 --> 00:26:11.160
or a car, or anything
else that they search for?

00:26:11.160 --> 00:26:13.680
Well, you could, in theory,
just download all the models,

00:26:13.680 --> 00:26:15.870
import them into Unity
objects, and then show them

00:26:15.870 --> 00:26:17.190
to the user, right?

00:26:17.190 --> 00:26:19.440
But this might be wasteful,
because you might actually

00:26:19.440 --> 00:26:22.500
spend a lot of memory and a
lot of time downloading those.

00:26:22.500 --> 00:26:24.360
And then the user's
just going to pick one

00:26:24.360 --> 00:26:26.700
and then never look
at the other cats.

00:26:26.700 --> 00:26:29.470
So what's a more
economical way to do this?

00:26:29.470 --> 00:26:31.410
Well, we have thumbnails.

00:26:31.410 --> 00:26:33.630
So the API allows you
to download thumbnails

00:26:33.630 --> 00:26:35.580
for any assets in our API.

00:26:35.580 --> 00:26:39.360
So for example, if you have an
asset from a ListAssets result,

00:26:39.360 --> 00:26:42.180
and you want a thumbnail
for it to show to the user,

00:26:42.180 --> 00:26:45.720
all they have to do is call
the FetchThumbnail API call.

00:26:45.720 --> 00:26:47.640
And then, you're going
to get a callback

00:26:47.640 --> 00:26:50.550
with a Unity Texture2D
that represents

00:26:50.550 --> 00:26:51.987
a thumbnail for that asset.

00:26:51.987 --> 00:26:53.570
You can do anything
with that texture.

00:26:53.570 --> 00:26:55.569
You could map it to an
object, or you could just

00:26:55.569 --> 00:26:58.900
convert it into a sprite and
then display it on the screen.

00:26:58.900 --> 00:27:00.840
This is what we do in
our demo when we're

00:27:00.840 --> 00:27:02.110
showing the possible cars.

00:27:02.110 --> 00:27:03.750
So these are not
the actual models.

00:27:03.750 --> 00:27:07.894
What I'm doing is, I'm showing
the thumbnails for the models.

00:27:07.894 --> 00:27:09.810
And once the user actually
clicks one of them,

00:27:09.810 --> 00:27:11.643
and I am reasonably
sure that the user wants

00:27:11.643 --> 00:27:15.560
that car, that's when I
actually import the model.

00:27:15.560 --> 00:27:17.000
Speaking of placing
objects, what

00:27:17.000 --> 00:27:19.860
happens if you just place
an object in the world?

00:27:19.860 --> 00:27:22.705
Well, if this was a traditional
app, that's fine, right?

00:27:22.705 --> 00:27:24.080
The object is
there on the scene.

00:27:24.080 --> 00:27:25.490
That's what you want.

00:27:25.490 --> 00:27:27.547
But however, you're
working in AR,

00:27:27.547 --> 00:27:29.630
you need to make sure that
that object is anchored

00:27:29.630 --> 00:27:31.760
to some real-world surface.

00:27:31.760 --> 00:27:36.580
Does anybody know what
you can use to do this?

00:27:36.580 --> 00:27:38.150
ARCore anchors, yes, exactly.

00:27:38.150 --> 00:27:40.600
How did you know?

00:27:40.600 --> 00:27:43.020
So that's when the
anchors come in handy.

00:27:43.020 --> 00:27:44.960
So when ARCore detects
a stable surface,

00:27:44.960 --> 00:27:47.130
it's going to report the--

00:27:47.130 --> 00:27:50.349
it's going to report the
surface to you through the API.

00:27:50.349 --> 00:27:52.640
If you want to add an object
so that it's firmly placed

00:27:52.640 --> 00:27:56.760
on that surface, you use what
is called an anchor object.

00:27:56.760 --> 00:27:59.300
So what you do is, you
import the object from Poly.

00:27:59.300 --> 00:28:03.230
And then you set its parent
to the anchor object.

00:28:03.230 --> 00:28:05.510
So that means that the
object will remain stable

00:28:05.510 --> 00:28:07.110
on that table.

00:28:07.110 --> 00:28:08.570
Even if you move
the phone around,

00:28:08.570 --> 00:28:10.361
if you change the
orientation of the phone,

00:28:10.361 --> 00:28:12.500
it's going to be firmly
placed on that tabletop.

00:28:12.500 --> 00:28:16.050
Even if ARCore improves its
understanding of the scene,

00:28:16.050 --> 00:28:18.100
it's going to remain there.

00:28:18.100 --> 00:28:19.900
So how do you
accomplish this in code?

00:28:19.900 --> 00:28:22.540
Well after you import an
asset, what you do is,

00:28:22.540 --> 00:28:24.917
you set the active
member to false.

00:28:24.917 --> 00:28:27.250
This is going to make it so
that the object is invisible

00:28:27.250 --> 00:28:28.840
before the user places it.

00:28:28.840 --> 00:28:30.256
And then, presumably,
you're going

00:28:30.256 --> 00:28:31.894
to show some UI
for the user that's

00:28:31.894 --> 00:28:33.310
going to say, well,
tap the screen

00:28:33.310 --> 00:28:36.380
somewhere to place this object.

00:28:36.380 --> 00:28:39.500
Once the user touches the
screen to place the object,

00:28:39.500 --> 00:28:43.314
then you do a ray cast to
figure out where the user hit.

00:28:43.314 --> 00:28:45.230
And when you do a ray
cast, you can figure out

00:28:45.230 --> 00:28:49.190
exactly what the pose
of the ray cast hit is.

00:28:49.190 --> 00:28:51.950
And that's what you use
to create the anchor.

00:28:51.950 --> 00:28:54.930
Once you have that,
you create the anchor.

00:28:54.930 --> 00:28:57.690
And then finally, you're going
to set the object's visibility

00:28:57.690 --> 00:29:00.441
property to true so that
the object begins to render.

00:29:00.441 --> 00:29:01.690
And that's all there is to it.

00:29:01.690 --> 00:29:04.150
Just import from
Poly, set the anchor,

00:29:04.150 --> 00:29:06.870
and now you have this
object in your AR scene.

00:29:10.210 --> 00:29:12.330
And Poly Toolkit has a
lot of other features

00:29:12.330 --> 00:29:13.720
that we're not going to cover.

00:29:13.720 --> 00:29:16.390
So it does automatic
rescaling of objects for you.

00:29:16.390 --> 00:29:17.900
It can convert units.

00:29:17.900 --> 00:29:19.420
So if your scene
is in centimeters,

00:29:19.420 --> 00:29:22.060
and the object is in meters,
it's going to convert.

00:29:22.060 --> 00:29:23.770
And it can get the
featured assets.

00:29:23.770 --> 00:29:25.180
It can get the
user's own assets.

00:29:25.180 --> 00:29:28.210
It can get even the assets
that the user has liked.

00:29:28.210 --> 00:29:30.811
You can change the
material assignments

00:29:30.811 --> 00:29:32.560
if you have a different
look for your app,

00:29:32.560 --> 00:29:35.380
and you need specific materials.

00:29:35.380 --> 00:29:37.442
We can eve do automatic
attribution generation,

00:29:37.442 --> 00:29:39.400
so we don't have to keep
track of which objects

00:29:39.400 --> 00:29:40.817
we downloaded from where.

00:29:40.817 --> 00:29:43.150
We just automatically generate
a copyright file that you

00:29:43.150 --> 00:29:46.334
can display in your app.

00:29:46.334 --> 00:29:49.000
So let's talk a little bit about
what goes on behind the scenes.

00:29:49.000 --> 00:29:51.480
So this is the part that you
don't have to worry about.

00:29:51.480 --> 00:29:55.270
This is what Poly
Toolkit does for you.

00:29:55.270 --> 00:29:58.000
So what's the difference
between the two foxes--

00:29:58.000 --> 00:30:01.660
the fox on the left and
the fox on the right?

00:30:01.660 --> 00:30:06.510
Well, clearly, the fox on the
right is sitting down, right?

00:30:06.510 --> 00:30:09.070
And the other difference between
these is that one is a model

00:30:09.070 --> 00:30:10.320
and one is data.

00:30:10.320 --> 00:30:12.390
So a model is a
collection of polygons

00:30:12.390 --> 00:30:15.430
that you want to
render on your scene.

00:30:15.430 --> 00:30:18.580
And data is just characters.

00:30:18.580 --> 00:30:21.430
The data represents the model.

00:30:21.430 --> 00:30:25.480
Now, Poly API, of course,
only outputs data.

00:30:25.480 --> 00:30:28.360
And what Poly Toolkit
does is convert that data

00:30:28.360 --> 00:30:30.550
into Unity models.

00:30:30.550 --> 00:30:33.580
For that, we need to
establish a format.

00:30:33.580 --> 00:30:37.190
This is one of those things that
could be easy, but in reality,

00:30:37.190 --> 00:30:39.710
is not, because
apparently, nobody

00:30:39.710 --> 00:30:41.520
agrees on how to do this.

00:30:41.520 --> 00:30:46.040
This is a partial list of
3D formats from Wikipedia.

00:30:46.040 --> 00:30:48.030
Now, we have to start somewhere.

00:30:48.030 --> 00:30:53.050
So we decided to start off
with the most basic one, OBJ.

00:30:53.050 --> 00:30:54.587
So OBJ is a great format.

00:30:54.587 --> 00:30:56.170
And it has everything
that you're ever

00:30:56.170 --> 00:31:01.950
going to need for 3D
objects if it's 1995.

00:31:01.950 --> 00:31:04.720
For today's standards, it's
a little underspecified.

00:31:04.720 --> 00:31:07.240
It has a bunch of nonstandard
extensions, limited material

00:31:07.240 --> 00:31:08.440
support.

00:31:08.440 --> 00:31:09.940
However, it is widely supported.

00:31:09.940 --> 00:31:12.860
So we do offer that
format in the API.

00:31:12.860 --> 00:31:14.360
Now, to be a little more modern.

00:31:14.360 --> 00:31:15.970
We have glTF.

00:31:15.970 --> 00:31:17.410
glTF is more modern.

00:31:17.410 --> 00:31:19.180
It's display optimized.

00:31:19.180 --> 00:31:21.550
It has an ample expressiveness.

00:31:21.550 --> 00:31:22.970
So it can display--

00:31:22.970 --> 00:31:26.380
I mean, it can encode scenes,
nodes, animations, materials.

00:31:26.380 --> 00:31:29.440
And best of all, it's a format
that gets everything right.

00:31:29.440 --> 00:31:31.630
It's stable, it's
future proof, and it's

00:31:31.630 --> 00:31:34.060
unlikely to change
in the near future.

00:31:34.060 --> 00:31:34.630
Just kidding.

00:31:34.630 --> 00:31:36.470
It's changed.

00:31:36.470 --> 00:31:39.190
However, glTF 2 gets
everything right

00:31:39.190 --> 00:31:42.730
and is unlikely to change
in the near future.

00:31:42.730 --> 00:31:45.080
So in practice in
the Poly API, we

00:31:45.080 --> 00:31:47.240
offer objects both
in the OBJ format

00:31:47.240 --> 00:31:49.505
and in the glTF 2 format.

00:31:49.505 --> 00:31:51.380
So if you're consuming
the Poly API directly,

00:31:51.380 --> 00:31:53.134
you can choose
which one you want.

00:31:53.134 --> 00:31:54.050
So you can choose OBJ.

00:31:54.050 --> 00:31:55.120
You can choose glTF 2.

00:31:55.120 --> 00:32:01.490
And Poly Toolkit uses glTF 2 and
imports that as Unity objects,

00:32:01.490 --> 00:32:04.180
doing everything automatically,
including material mapping

00:32:04.180 --> 00:32:08.050
and material generation.

00:32:08.050 --> 00:32:11.700
All right, so we talked
about Poly Toolkit for Unity.

00:32:11.700 --> 00:32:13.840
There's also Poly
Toolkit for Unreal.

00:32:13.840 --> 00:32:17.140
And if you're developing a
native app on Android iOS

00:32:17.140 --> 00:32:19.960
or Web, we do also have
samples on our site

00:32:19.960 --> 00:32:22.330
showing how to integrate
with the Poly API

00:32:22.330 --> 00:32:23.880
on those platforms.

00:32:23.880 --> 00:32:26.050
So if you're developing,
for example, for Unreal,

00:32:26.050 --> 00:32:28.570
this is an example of
Poly Toolkit for Unreal.

00:32:28.570 --> 00:32:30.790
It's the same principle
as the one for Unity.

00:32:30.790 --> 00:32:32.290
It's a fully
integrated environment

00:32:32.290 --> 00:32:37.820
where you can download and then
use Poly assets in your scene.

00:32:37.820 --> 00:32:39.520
If you're developing
for Android,

00:32:39.520 --> 00:32:42.100
there's a sample that shows
you how to include assets

00:32:42.100 --> 00:32:43.290
from Poly into an--

00:32:43.290 --> 00:32:45.679
into a little,
very simple AR app,

00:32:45.679 --> 00:32:47.470
where you just tap the
screen, and then you

00:32:47.470 --> 00:32:52.780
can include a specific
Poly object on your scene.

00:32:52.780 --> 00:32:57.020
If you're using Web,
there's also a sample.

00:32:57.020 --> 00:32:59.276
And this sample uses three.js.

00:32:59.276 --> 00:33:00.650
This is actually
the easiest one,

00:33:00.650 --> 00:33:05.250
because our Poly website is
also built using three.js.

00:33:05.250 --> 00:33:07.217
And as a fun fact, the
guy who created three.js

00:33:07.217 --> 00:33:08.550
is the one who wrote the sample.

00:33:11.810 --> 00:33:14.330
So this just shows the
wide variety of experiences

00:33:14.330 --> 00:33:16.740
that you can build
with the Poly API.

00:33:16.740 --> 00:33:18.930
For example, you're not
restricted to just AR.

00:33:18.930 --> 00:33:21.290
This is not just an AR toolkit.

00:33:21.290 --> 00:33:22.805
You can also build VR apps.

00:33:22.805 --> 00:33:24.970
You can build
traditional 3D apps.

00:33:24.970 --> 00:33:27.620
This is an example of a
simple escape room app,

00:33:27.620 --> 00:33:31.580
a VR app that we made in the
office a couple of months ago,

00:33:31.580 --> 00:33:32.300
just to show--

00:33:32.300 --> 00:33:35.520
I mean, just to try out what
we could do with the Poly API

00:33:35.520 --> 00:33:37.100
and with Poly objects.

00:33:37.100 --> 00:33:39.272
One thing that you
notice is that even

00:33:39.272 --> 00:33:41.480
though different people
created the different objects

00:33:41.480 --> 00:33:45.630
in that scene, they somehow
look nicely together.

00:33:45.630 --> 00:33:48.190
They look like they
belong to the same scene.

00:33:48.190 --> 00:33:50.510
And we also added some
lighting for an extra effect.

00:33:50.510 --> 00:33:54.650
And we got that cheesy, spooky
atmosphere that we wanted.

00:33:54.650 --> 00:33:56.707
The puzzles aren't
particularly hard.

00:33:56.707 --> 00:33:58.790
And I think I just spoiled
the game for everybody,

00:33:58.790 --> 00:34:03.290
because now you know that
the access code is 714.

00:34:03.290 --> 00:34:05.090
Fun fact, when we
actually tried to play

00:34:05.090 --> 00:34:06.980
this game in the
office, the first person

00:34:06.980 --> 00:34:09.260
that we gave it to, they
just put the headset on,

00:34:09.260 --> 00:34:11.600
and we said, you have to
manage to find a way to escape

00:34:11.600 --> 00:34:13.604
the room through that door.

00:34:13.604 --> 00:34:15.020
What they immediately
did is, they

00:34:15.020 --> 00:34:19.190
just walked through the
door and won the game,

00:34:19.190 --> 00:34:20.576
because what's to stop them?

00:34:20.576 --> 00:34:22.909
And then we had to be more
specific for the second user.

00:34:22.909 --> 00:34:25.190
So you actually have to
solve our puzzles before you

00:34:25.190 --> 00:34:27.171
walk through that door.

00:34:27.171 --> 00:34:29.170
That just shows you some
of the design problems.

00:34:32.389 --> 00:34:34.870
Well, for me, of
course, what it means

00:34:34.870 --> 00:34:37.690
is that I can stop
using assets like that

00:34:37.690 --> 00:34:41.710
and maybe upgrade my assets
to look more like that.

00:34:41.710 --> 00:34:44.409
Now, I'm not exactly
a dragon expert,

00:34:44.409 --> 00:34:47.427
but I can sense that there
was some improvement in dragon

00:34:47.427 --> 00:34:48.010
quality there.

00:34:51.947 --> 00:34:54.030
So if you're interested
in trying out the Poly API

00:34:54.030 --> 00:34:57.670
and building applications with
Poly, please visit our site.

00:34:57.670 --> 00:35:00.450
So poly.google.com is
the 3D gallery site

00:35:00.450 --> 00:35:02.450
where you can browse assets.

00:35:02.450 --> 00:35:05.350
developers.google.com/poly
is a developer site where

00:35:05.350 --> 00:35:08.190
you're going to find everything
you need to start developing

00:35:08.190 --> 00:35:11.050
with Poly today,
including all the SDKs,

00:35:11.050 --> 00:35:12.654
including the samples,
documentation,

00:35:12.654 --> 00:35:14.070
and everything
else that you need.

00:35:17.020 --> 00:35:18.340
So thank you very much.

00:35:18.340 --> 00:35:19.740
And we want to hear from you.

00:35:19.740 --> 00:35:23.190
So if you liked the session,
please fill in the survey.

00:35:23.190 --> 00:35:25.846
If you didn't like the session,
the survey is optional.

00:35:25.846 --> 00:35:28.130
[LAUGHTER]

00:35:28.130 --> 00:35:28.850
And that's it.

00:35:28.850 --> 00:35:29.904
Thank you very much.

00:35:29.904 --> 00:35:33.524
[MUSIC PLAYING]

