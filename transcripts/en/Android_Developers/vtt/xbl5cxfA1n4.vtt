WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:08.550
[MUSIC PLAYING]

00:00:08.550 --> 00:00:09.680
DANIEL OLSHANSKY: Hi, my name
is Daniel Olshansky.

00:00:09.680 --> 00:00:11.970
I'm an Intern on the Android
team at Google.

00:00:11.970 --> 00:00:13.490
And today I'll be talking about
some of the various

00:00:13.490 --> 00:00:16.400
methods you can use to
animate fragments.

00:00:16.400 --> 00:00:18.570
So today I'm going to discuss
a few different things,

00:00:18.570 --> 00:00:22.835
including how you can animate
the switch between one frame

00:00:22.835 --> 00:00:25.920
and another using fragment
transaction.

00:00:25.920 --> 00:00:29.380
I'll talk about how you can
create animations via code

00:00:29.380 --> 00:00:31.860
using object animators to
animate those fragments, as

00:00:31.860 --> 00:00:34.030
well as a couple of very
useful call backs and

00:00:34.030 --> 00:00:37.780
fragments that you can use to
create very custom animations

00:00:37.780 --> 00:00:39.860
for your fragment transitions.

00:00:39.860 --> 00:00:43.160
So jumping straight to the demo,
you can see here we have

00:00:43.160 --> 00:00:43.830
just an image.

00:00:43.830 --> 00:00:47.000
And this is a fragment that
only contains an image.

00:00:47.000 --> 00:00:50.070
Tapping on it, it slides into
the background and pops up

00:00:50.070 --> 00:00:50.890
another fragment.

00:00:50.890 --> 00:00:53.490
So this here is just another
fragment containing text about

00:00:53.490 --> 00:00:55.880
the Golden Gate Bridge, which
is our original image.

00:00:55.880 --> 00:00:58.040
Tapping once again slides
that back out.

00:00:58.040 --> 00:01:01.610
So looking at it once again,
tapping once slides it back in

00:01:01.610 --> 00:01:02.650
into the background.

00:01:02.650 --> 00:01:05.560
It has this dimming effect where
it darkens it and brings

00:01:05.560 --> 00:01:06.900
up the text fragment.

00:01:06.900 --> 00:01:11.210
And tapping once again slides
out the text fragment, dims

00:01:11.210 --> 00:01:14.060
out that dark hover view,
and animates the image

00:01:14.060 --> 00:01:15.910
fragment back out.

00:01:15.910 --> 00:01:19.530
So jumping straight into the
code, there's a few different

00:01:19.530 --> 00:01:22.220
things to note here today.

00:01:22.220 --> 00:01:24.710
Firstly, there's some
boilerplate code.

00:01:24.710 --> 00:01:26.600
We set up a click list in there
to switch the fragments

00:01:26.600 --> 00:01:28.920
every single time we click
on the screen.

00:01:28.920 --> 00:01:31.170
And in Switch Fragments, the
first thing you want to look

00:01:31.170 --> 00:01:32.730
at is here.

00:01:32.730 --> 00:01:36.970
So I create a listener, at the
end of which we're going to do

00:01:36.970 --> 00:01:39.030
the actual fragment
transition.

00:01:39.030 --> 00:01:41.280
So I start a new transaction.

00:01:41.280 --> 00:01:43.730
And I call this method called
Set Custom Animations.

00:01:43.730 --> 00:01:47.280
What Set Custom Animations does
is take in four animator

00:01:47.280 --> 00:01:50.210
resource files that you can use
to animate one fragment

00:01:50.210 --> 00:01:54.250
in, animate it out, as well as
when you're popping the stack

00:01:54.250 --> 00:01:57.730
for the fragment transaction,
you can also pass the resource

00:01:57.730 --> 00:02:00.460
files for animating the other
fragment in and out.

00:02:00.460 --> 00:02:03.110
What you have to note here,
though, is that I am passing

00:02:03.110 --> 00:02:06.630
in resource files for the text
fragment sliding up and down,

00:02:06.630 --> 00:02:10.259
but I'm passing in 0s for the
image fragment that I'm

00:02:10.259 --> 00:02:12.660
animating, because that's
a little more custom.

00:02:12.660 --> 00:02:17.910
Then I add my text fragment onto
my stack, I set that to

00:02:17.910 --> 00:02:19.960
null, and I commit
my animation.

00:02:19.960 --> 00:02:23.100
So what this lets me do is later
simply pop my fragment

00:02:23.100 --> 00:02:27.760
enter stack, and then my image
frame will come back up after

00:02:27.760 --> 00:02:29.780
a text fragment is
animated out.

00:02:29.780 --> 00:02:34.920
So all of this is done at the
end of an animation listener.

00:02:34.920 --> 00:02:38.020
And if you go here to slide
back, that's where it's

00:02:38.020 --> 00:02:39.510
actually going to
get executed.

00:02:39.510 --> 00:02:42.220
So I set up a few animations
for the image fragment.

00:02:42.220 --> 00:02:44.450
I'm going to rotate
about the x-axis.

00:02:44.450 --> 00:02:47.210
I'm going to scale it so it
actually rotates in the

00:02:47.210 --> 00:02:49.820
background and scales and it
comes a little bit smaller.

00:02:49.820 --> 00:02:53.110
And what I'm actually going
to do as well is this

00:02:53.110 --> 00:02:57.970
mDarkHoverView, which is just
a view with an opacity less

00:02:57.970 --> 00:03:02.530
than 1 and a black background
color, it's going to fade in

00:03:02.530 --> 00:03:03.940
over my image fragment.

00:03:03.940 --> 00:03:06.360
So one of the things that you
can do with [? set cost ?]

00:03:06.360 --> 00:03:10.120
animations is add animations
to other widgets or other

00:03:10.120 --> 00:03:11.670
items that you have
on the screen.

00:03:11.670 --> 00:03:14.470
Using this method, you can
actually add animations at the

00:03:14.470 --> 00:03:17.270
same time as the fragment is
animated, except to things

00:03:17.270 --> 00:03:18.790
that may be completely
separate from

00:03:18.790 --> 00:03:20.660
the fragment itself.

00:03:20.660 --> 00:03:23.980
Once I've set up all my
animations, I add a start

00:03:23.980 --> 00:03:28.300
delay, such that what's actually
happening is after I

00:03:28.300 --> 00:03:33.320
animate the image into the
background, only then will the

00:03:33.320 --> 00:03:34.710
text fragment come back up.

00:03:34.710 --> 00:03:36.890
And then at the end of that
animation, that's when the

00:03:36.890 --> 00:03:40.730
fragment popping and transaction
actually happens.

00:03:40.730 --> 00:03:44.055
So if you keep sliding back
down, there's a method called

00:03:44.055 --> 00:03:45.180
Slide Forward.

00:03:45.180 --> 00:03:51.960
And Slide Forward actually
gets called right here.

00:03:51.960 --> 00:03:57.200
So what happens is, when you
click on the screen when the

00:03:57.200 --> 00:04:00.430
text fragment is in focus, what
we're going to do is pop

00:04:00.430 --> 00:04:02.680
the stack in order to
bring the image

00:04:02.680 --> 00:04:03.910
fragment back in focus.

00:04:03.910 --> 00:04:06.280
And when the back stack is
changed, we're going to call

00:04:06.280 --> 00:04:07.670
Slide Forward.

00:04:07.670 --> 00:04:09.760
And in Slide Forward, we're
doing almost the exact same

00:04:09.760 --> 00:04:11.410
thing as what we did
in Slide Back.

00:04:11.410 --> 00:04:15.840
We're rotating about the x-axis
back out, we're scaling

00:04:15.840 --> 00:04:19.320
our image frame back up, and
we're fading out the dark

00:04:19.320 --> 00:04:21.570
hover view instead
of fading it in.

00:04:21.570 --> 00:04:25.280
All of this is then put together
using an animator

00:04:25.280 --> 00:04:27.577
set, and that's how the
animation takes place.

00:04:27.577 --> 00:04:30.470
So this is what you can do if
you want to have a custom

00:04:30.470 --> 00:04:32.840
object animator and set
custom animations.

00:04:32.840 --> 00:04:35.120
But the other important thing
that I really wanted to know

00:04:35.120 --> 00:04:39.580
it was, in any fragment, there's
a callback method you

00:04:39.580 --> 00:04:42.490
can override called On
Create Animator.

00:04:42.490 --> 00:04:44.630
And the thing about On Create
Animator is it's a method that

00:04:44.630 --> 00:04:47.160
gets called when you want to get
the animation object for a

00:04:47.160 --> 00:04:49.160
fragment transaction.

00:04:49.160 --> 00:04:51.890
It has a few usual parameters
you can use, but the key

00:04:51.890 --> 00:04:55.180
behind this is that you can
essentially create any custom

00:04:55.180 --> 00:04:58.520
animation you want here and
never be limited just to doing

00:04:58.520 --> 00:05:01.990
things in an animated
resource file.

00:05:01.990 --> 00:05:04.190
And then if we actually just
take a quick look at the

00:05:04.190 --> 00:05:07.360
resource file that we passed
into Set Custom Animations,

00:05:07.360 --> 00:05:08.760
they're right here.

00:05:08.760 --> 00:05:13.410
We set up an object animator
with a From value, a To value,

00:05:13.410 --> 00:05:15.410
a property name,
and a duration.

00:05:15.410 --> 00:05:19.000
But one of things I did here is
I created a custom property

00:05:19.000 --> 00:05:20.590
called Y Fraction.

00:05:20.590 --> 00:05:24.630
And the reason I did this is
because unlike in older view

00:05:24.630 --> 00:05:28.300
and twin animations, property
animations are independent of

00:05:28.300 --> 00:05:30.140
what the container
actually is.

00:05:30.140 --> 00:05:32.765
So if, for example, in twin
animations, you could tell a

00:05:32.765 --> 00:05:36.510
view to animate from 0 to 100%
of its parent's width, we

00:05:36.510 --> 00:05:38.190
cant' do this with property
animation.

00:05:38.190 --> 00:05:41.680
And I found a workaround for
this by using Y Fraction.

00:05:41.680 --> 00:05:45.750
So in text fragment, there's
a custom property--

00:05:52.820 --> 00:05:53.150
sorry.

00:05:53.150 --> 00:05:58.400
In Fractional Liner Layout,
there's a custom property

00:05:58.400 --> 00:06:00.420
called Y Fraction.

00:06:00.420 --> 00:06:04.350
And so what happens when you
create an Object Animator that

00:06:04.350 --> 00:06:06.380
animates the property Y
Fraction, it's going to look

00:06:06.380 --> 00:06:09.240
for a setter called
Set Y Fraction.

00:06:09.240 --> 00:06:12.190
And given the setter right here,
Set Y Fraction, what I'm

00:06:12.190 --> 00:06:15.970
doing is animating a float
value between 0 and 1.

00:06:15.970 --> 00:06:19.080
But since in runtime I can
determine what the width and

00:06:19.080 --> 00:06:23.140
height of my screen is, I can
actually just do some simple

00:06:23.140 --> 00:06:27.095
arithmetic and animate it from
0 to some certain percentage

00:06:27.095 --> 00:06:29.340
of its parent's container.

00:06:29.340 --> 00:06:33.350
So those are some different ways
of animating fragments,

00:06:33.350 --> 00:06:39.120
as well as a way to work around
not having percent

00:06:39.120 --> 00:06:41.522
animations with Object
Animators, unlike you did in

00:06:41.522 --> 00:06:43.180
older View Animations.

00:06:43.180 --> 00:06:45.750
So I hope you enjoyed the
video, and thanks.

