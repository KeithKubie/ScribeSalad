WEBVTT
Kind: captions
Language: en

00:00:00.699 --> 00:00:02.490
It's pretty annoying
to set your phone down

00:00:02.490 --> 00:00:05.790
for a bit only to pick it up
later and see it at 30% battery

00:00:05.790 --> 00:00:08.650
because apps have been
busy bees, syncing data

00:00:08.650 --> 00:00:09.850
while you were out.

00:00:09.850 --> 00:00:12.190
I'm Joanna Smith, and I'm
here to help you understand

00:00:12.190 --> 00:00:14.510
what it means to be idle.

00:00:14.510 --> 00:00:17.590
It's common for modern mobile
apps to be in a paused state

00:00:17.590 --> 00:00:20.180
when they aren't active and they
have no pending notifications

00:00:20.180 --> 00:00:21.760
or foreground services.

00:00:21.760 --> 00:00:23.820
But what may be
new to your ears is

00:00:23.820 --> 00:00:27.135
Doze mode, which lets the
entire device take a breather.

00:00:27.135 --> 00:00:28.510
Doze mode works
on the assumption

00:00:28.510 --> 00:00:30.384
that when the screen is
off and the device is

00:00:30.384 --> 00:00:34.610
neither moving nor charging, the
user probably isn't using it.

00:00:34.610 --> 00:00:36.150
So the device
decides to focus more

00:00:36.150 --> 00:00:39.690
on preserving the battery than
syncing for new information.

00:00:39.690 --> 00:00:41.490
To achieve this, Doze
mode delays things

00:00:41.490 --> 00:00:43.752
like SyncAdapters,
JobScheduler, and AlarmManager

00:00:43.752 --> 00:00:46.210
so that they don't burn through
battery when the user isn't

00:00:46.210 --> 00:00:47.390
even on the device.

00:00:47.390 --> 00:00:50.950
But to be clear, Doze does
not disable these services.

00:00:50.950 --> 00:00:53.730
They just get deferred
to a later time.

00:00:53.730 --> 00:00:55.200
These jobs and
background services

00:00:55.200 --> 00:00:58.230
are paused and queued until
Android exits Doze mode,

00:00:58.230 --> 00:01:00.700
for example, when the user
picks up the device again.

00:01:00.700 --> 00:01:04.330
However, if Doze mode is active
for a prolonged period of time,

00:01:04.330 --> 00:01:07.760
delayed jobs are batched up
and executed periodically.

00:01:07.760 --> 00:01:10.100
But for some apps
timing is critical,

00:01:10.100 --> 00:01:11.990
and so the Android
framework offers two ways

00:01:11.990 --> 00:01:15.070
to get important work done
even when the device is Dozing.

00:01:15.070 --> 00:01:17.410
Google Cloud Messaging
can bypass Doze behavior

00:01:17.410 --> 00:01:19.710
with messages that are
marked as high priority.

00:01:19.710 --> 00:01:21.830
In a social app, for
example, the notification

00:01:21.830 --> 00:01:23.960
of a new follower
or comment probably

00:01:23.960 --> 00:01:27.087
isn't vital, whereas a chat
message could be critical.

00:01:27.087 --> 00:01:29.420
So if it's worth having the
user get up, cross the room,

00:01:29.420 --> 00:01:32.730
and pick up the device, then you
can consider it high priority.

00:01:32.730 --> 00:01:34.780
And other apps have
time critical operations

00:01:34.780 --> 00:01:37.270
that they need to do, such
as prompting notification

00:01:37.270 --> 00:01:38.920
at exactly 6:00 PM.

00:01:38.920 --> 00:01:41.820
In cases like these, you want to
know that your AlarmManager has

00:01:41.820 --> 00:01:42.620
your back.

00:01:42.620 --> 00:01:45.460
Now setExact will not
trigger on the moment

00:01:45.460 --> 00:01:48.700
if the device is Dozing, but
only when it exits Doze mode.

00:01:48.700 --> 00:01:52.250
Instead, use AndAllowWhileIdle,
which will trigger even

00:01:52.250 --> 00:01:53.560
through Doze mode.

00:01:53.560 --> 00:01:55.210
But aside from
these two scenarios,

00:01:55.210 --> 00:01:57.550
there isn't much that needs
to be done about Doze mode,

00:01:57.550 --> 00:02:00.260
because your app is not
being ignored or skipped,

00:02:00.260 --> 00:02:03.420
merely delayed until the
device itself is in use.

00:02:03.420 --> 00:02:05.390
So the core of the work
that you want to do

00:02:05.390 --> 00:02:07.720
is actually testing
your app to be certain

00:02:07.720 --> 00:02:09.389
that your app's
recovery from Doze mode

00:02:09.389 --> 00:02:11.670
is as graceful as expected.

00:02:11.670 --> 00:02:14.300
So to help you with this, we
have created new adb commands

00:02:14.300 --> 00:02:16.940
that enable developers to step
through the stages of Doze mode

00:02:16.940 --> 00:02:18.220
programmatically.

00:02:18.220 --> 00:02:20.482
So check the
documentation for details.

00:02:20.482 --> 00:02:22.190
And that's really all
there is to Dozing.

00:02:22.190 --> 00:02:25.072
Nothing too scary, and not too
much work for the developer.

00:02:25.072 --> 00:02:26.530
So if you're
targeting Marshmallow,

00:02:26.530 --> 00:02:29.020
you may need to add a
few AndAllowWhileIdles

00:02:29.020 --> 00:02:31.480
and upgrade the priority
on certain messages.

00:02:31.480 --> 00:02:33.850
But mainly, just check
your app for surprises,

00:02:33.850 --> 00:02:35.550
and continue to
build better apps.

00:02:35.550 --> 00:02:38.300
[MUSIC PLAYING]

