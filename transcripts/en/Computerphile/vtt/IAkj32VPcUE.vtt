WEBVTT
Kind: captions
Language: en-GB

00:00:00.000 --> 00:00:04.080
In a previous video, we looked at how CPU's can use caches to speed up accesses to memory.

00:00:04.580 --> 00:00:08.880
So, the CPU has to fetch things from memory; it might be a bit of data, it might be an instruction

00:00:08.880 --> 00:00:11.720
And it goes through the cache to try and access it.

00:00:11.720 --> 00:00:15.580
And the cache keeps a local copy in fast memory to try and speed up the accesses

00:00:16.360 --> 00:00:20.940
But what we didn't talk about is:
What does a CPU do with what it's fetched from memory

00:00:20.940 --> 00:00:23.140
what is it actually doing and how does it process it?

00:00:26.020 --> 00:00:28.080
So the CPU is fetching values from memory.

00:00:28.120 --> 00:00:31.680
We'll ignore the cache for now, because it doesn't matter if the CPU has a cache or not

00:00:31.680 --> 00:00:33.460
it's still gonna do roughly the same things

00:00:33.460 --> 00:00:35.920
And we're also gonna look at very old CPU's

00:00:35.920 --> 00:00:37.600
the sort of things that are in 8-bit machines

00:00:37.600 --> 00:00:39.720
purely because they're simpler to deal with

00:00:39.720 --> 00:00:40.880
and simpler to see what's going on

00:00:40.880 --> 00:00:45.420
The same idea is still applied to an ARM CPU today or an X86 chip

00:00:45.420 --> 00:00:48.480
or whatever it is you got in your machine.

00:00:48.480 --> 00:00:51.880
Modern CPU's use what's called 
the Van Neumann architecture

00:00:51.980 --> 00:00:56.580
and what this basically means is
that you have a CPU

00:00:56.620 --> 00:01:01.320
and you have a block of memory.

00:01:01.960 --> 00:01:04.700
And that memory is connected to the CPU
by two buses

00:01:04.700 --> 00:01:07.400
Each is just a collection of several wires that are connecting

00:01:07.400 --> 00:01:11.780
And again we're looking at old-fashioned macines. 
On a modern machine it gets a bit more complicated

00:01:11.780 --> 00:01:13.680
But the idea, the principle, is the same.

00:01:14.560 --> 00:01:16.080
So we have an addess bus

00:01:17.520 --> 00:01:22.300
and the idea is that the CPU can generate a number in here in binary

00:01:22.320 --> 00:01:24.960
to access any particular value in here.

00:01:24.960 --> 00:01:27.540
So we say that the first one is at adress 0

00:01:27.880 --> 00:01:30.420
and we're gonna use a 6502 as an example

00:01:30.420 --> 00:01:40.400
We'll say that the last one is at address 65535 in decimal, or FFFF in hexadecimal

00:01:40.800 --> 00:01:44.180
So we can generate any of these numbers on 16 bits of this address bus

00:01:44.200 --> 00:01:47.840
to access any of the individual bytes 
in this memory

00:01:49.400 --> 00:01:52.060
How do we get the data between the two?
Well we have another bus

00:01:52.100 --> 00:01:56.180
which is called the data bus,
which connects the two together

00:01:56.180 --> 00:01:58.260
Now the reason why this is a Van Neumann machine

00:01:58.480 --> 00:02:01.920
is because this memory can 
contain both the program

00:02:01.920 --> 00:02:05.840
i.e. the bytes that make up the instructions
that the CPU can execute

00:02:06.100 --> 00:02:08.320
and the data

00:02:08.500 --> 00:02:11.540
So the same block of memory
contain some bytes

00:02:11.540 --> 00:02:13.120
which contain program instructions

00:02:13.120 --> 00:02:14.800
some bytes which contain data

00:02:15.120 --> 00:02:17.620
And the CPU if you wanted to could 
treat the program as data

00:02:17.660 --> 00:02:19.520
or treat the data as program

00:02:19.520 --> 00:02:21.200
Well if you do that then it would probably crash

00:02:21.200 --> 00:02:24.680
So what we've got here is an old BBC Micro
using a 6502 CPU

00:02:24.680 --> 00:02:28.880
and we're gonna just write a very, very simple
machine code program

00:02:28.980 --> 00:02:30.820
that uses

00:02:30.820 --> 00:02:34.200
well the operation is saying just to
print out the letter C for computerphile

00:02:34.300 --> 00:02:36.700
So if you assemble it,
we're using hexadecimal

00:02:36.920 --> 00:02:39.400
we've started our program at 084C

00:02:39.900 --> 00:02:42.800
So that's the address,
were our program is being created

00:02:42.800 --> 00:02:44.480
And our program is very simple

00:02:44.480 --> 00:02:46.780
It loads one of the CPU's registers

00:02:46.780 --> 00:02:48.900
which is just basically a temporary data store
that you can use

00:02:48.900 --> 00:02:50.820
and this one is called the accumulator

00:02:50.820 --> 00:02:53.880
with the ascii code 67 which represents
a capital C

00:02:53.880 --> 00:02:57.380
and then it says:
jump to the subroutine at this address

00:02:57.380 --> 00:02:59.860
which will print out that particular character

00:02:59.860 --> 00:03:02.540
And then we tell it we want to stop
so we gotta return

00:03:02.540 --> 00:03:04.160
from subroutine.
And if we run this

00:03:04.160 --> 00:03:08.160
and type in the address,
so we're at ... 84C

00:03:08.160 --> 00:03:10.600
then you'll see that it prints out the letter C

00:03:10.600 --> 00:03:12.560
and then we get a prompt
to carry on doing things

00:03:12.560 --> 00:03:15.520
So our program,
we write it in assembly language

00:03:15.520 --> 00:03:17.100
which we can understand as humans

00:03:17.120 --> 00:03:21.300
-ish, LDA: Load Accumulator
JSR: Jump to subroutine

00:03:21.300 --> 00:03:22.960
RTS: Return to subroutine

00:03:22.960 --> 00:03:25.020
You get the idea once you've done it a few times

00:03:25.020 --> 00:03:28.340
And the computer converts this
into a series of numbers, in binary

00:03:28.340 --> 00:03:32.740
The CPU is working in binary but to make it easier to read we display it as hexadecimal

00:03:32.960 --> 00:03:35.760
So our program becomes:
A9, 43

00:03:35.860 --> 00:03:38.860
20 EE FF
60

00:03:38.860 --> 00:03:40.240
That's the program we've written

00:03:42.300 --> 00:03:46.620
And the CPU, when it runs it
needs to fetch those bytes from memory

00:03:47.560 --> 00:03:48.980
into the CPU

00:03:48.980 --> 00:03:50.320
Now, how does it do that?

00:03:50.320 --> 00:03:57.120
To get the first byte we need to 
put the address: 084C on the address bus

00:03:57.120 --> 00:04:02.400
and a bit later on, the memory will send back
the byte that represents the instruction: A9

00:04:02.400 --> 00:04:05.320
Now, how does the CPU know where to get these instructions from?

00:04:05.320 --> 00:04:07.800
Well, it's quite simple. 
Inside the CPU

00:04:07.800 --> 00:04:12.800
there is a register, which we call
the program counter, or PC on a 6502

00:04:12.840 --> 00:04:16.720
or something like an X86 machine it's
known as the instruction pointer.

00:04:17.260 --> 00:04:22.060
And all that does is store the address
to the next instruction to execute

00:04:22.960 --> 00:04:26.640
So when we were starting up here, 
it would have 084C in it

00:04:26.640 --> 00:04:29.140
That's the address to the instruction we want to execute

00:04:29.140 --> 00:04:33.220
So when the CPU wants to fetch the 
instruction it's gonna execute

00:04:33.520 --> 00:04:36.200
It puts that address on the address bus

00:04:36.200 --> 00:04:39.860
and the memory then sends the instruction 
back to the CPU

00:04:39.860 --> 00:04:42.220
So the first thing the CPU is 
gonna do to run our program

00:04:42.360 --> 00:04:44.200
is to fetch the instruction

00:04:44.200 --> 00:04:45.960
and the way it does that is by 
putting the address from

00:04:45.960 --> 00:04:48.240
the program counter onto
the address bus

00:04:49.240 --> 00:04:52.580
and then fetching the actual instruction

00:04:52.580 --> 00:04:55.720
So the memory provides it,
but the CPU then reads that in

00:04:55.900 --> 00:04:57.740
on it's input on the data bus

00:04:57.740 --> 00:05:01.120
Now it needs to fetch the whole 
instruction that the CPU is gonna execute

00:05:01.120 --> 00:05:04.000
and on the example we saw there 
it was relatively straightforward

00:05:04.000 --> 00:05:06.140
because the instruction was only
a byte long

00:05:07.320 --> 00:05:09.240
Not all CPU's are that simple

00:05:09.240 --> 00:05:14.760
Some CPU's will vary these things,
so this hardware can actually be quite complicated

00:05:14.760 --> 00:05:17.600
so it needs to work out how long 
the instruction is

00:05:18.080 --> 00:05:20.340
So it could be as short as one byte

00:05:20.340 --> 00:05:23.680
it could be as long on some CPU's
as 15 bytes

00:05:23.680 --> 00:05:27.480
and you sometimes don't know how long it's gonna be until you've read at few of the bytes

00:05:27.480 --> 00:05:30.080
So this hardware can be relatively trivial

00:05:30.080 --> 00:05:34.200
So an ARM CPU makes it very, very simple
it says: all instructions are 32 bits long

00:05:34.480 --> 00:05:39.360
So the Archimedes over there
can fetch the instruction very, very simply

00:05:39.400 --> 00:05:40.580
32 bits

00:05:41.040 --> 00:05:45.200
On something like an x86, it can be
any length up to 15 bytes or so

00:05:45.200 --> 00:05:48.240
and so this becomes more complicated,
you have to sort of work out

00:05:48.240 --> 00:05:49.440
what it is utnil you've got it

00:05:49.780 --> 00:05:51.700
But we fetch the instruction

00:05:51.700 --> 00:05:54.520
So in the example we've got, 
we've got A9 here

00:05:54.520 --> 00:05:56.600
So we now need to work out what A9 does

00:05:56.600 --> 00:06:00.420
Well, we need to decode it into 
what we want the CPU to actually do

00:06:00.420 --> 00:06:03.320
So we need to have another bit 
of our CPU's hardware

00:06:03.380 --> 00:06:07.280
which we're dedicating to
decoding the instruction

00:06:07.280 --> 00:06:09.540
So we have a part of the CPU which is 
fetching it

00:06:09.540 --> 00:06:11.280
and part of the CPU which is then
decoding it

00:06:11.960 --> 00:06:15.320
So it gets A9 into it:
So the A9 comes into the decode

00:06:15.900 --> 00:06:19.260
And it says: Well okay, that's a load instruction.

00:06:19.540 --> 00:06:21.940
So I need to fetch a value from memory

00:06:22.240 --> 00:06:23.520
which was the 43

00:06:23.640 --> 00:06:27.740
the ASCII code for the capital letter C
that we saw earlier

00:06:27.740 --> 00:06:30.180
So we need to fetch something else 
from memory

00:06:30.180 --> 00:06:33.000
We need to access memory again,
and we need to work out what address

00:06:33.000 --> 00:06:34.020
that's gonna be.

00:06:35.420 --> 00:06:38.540
We also then need to,
once we've got that value,

00:06:38.580 --> 00:06:42.780
update the right register 
to store that value

00:06:42.780 --> 00:06:44.120
So we've gotta do things in sequence.

00:06:44.120 --> 00:06:47.420
So part of the Decode logic is to
take the single instruction byte,

00:06:47.720 --> 00:06:48.760
or how long it is,

00:06:48.760 --> 00:06:53.560
and work out what's the sequence that we need to drive the other bits of the CPU to do

00:06:53.560 --> 00:06:56.080
And so that also means that we have
another bit of the CPU

00:06:56.080 --> 00:06:57.840
which is the actual bit that does things,

00:06:58.160 --> 00:07:02.800
which is gonna be all the logic 
which actually executes instructions

00:07:02.800 --> 00:07:04.380
So we start off by fetching it

00:07:04.380 --> 00:07:06.860
and then once we've fetched it
we can start decoding it

00:07:06.860 --> 00:07:07.680
and then we can execute it

00:07:07.720 --> 00:07:10.020
And the decode logic is responsible for saying:

00:07:10.020 --> 00:07:12.760
Put the address for where you want to get the value,
that you can load into memory from

00:07:12.760 --> 00:07:15.820
and then store it,
once it's been loaded into the CPU

00:07:15.820 --> 00:07:16.900
So you're doing things in order:

00:07:16.900 --> 00:07:18.280
We have to fetch it first

00:07:18.280 --> 00:07:20.180
and we can't decode it until we've fetched it

00:07:20.660 --> 00:07:23.380
and we can't execute things 
until we've decoded it

00:07:23.880 --> 00:07:27.480
So, at any one time, 
we'll probably find on a simple CPU

00:07:27.480 --> 00:07:30.620
that quite a few of the bits of the 
CPU wouldn't actually be doing anything

00:07:30.620 --> 00:07:32.180
So, while we're fetching the value
from memory

00:07:32.180 --> 00:07:34.540
to work out how we're gonna decode it

00:07:34.540 --> 00:07:37.060
the decode and the execute logic 
aren't doing anything

00:07:37.060 --> 00:07:38.960
They're just sitting there, waiting for their turn

00:07:38.960 --> 00:07:41.720
And then, when we decode it,
it's not fetching anything

00:07:41.720 --> 00:07:43.220
and it's not executing anything

00:07:43.220 --> 00:07:46.260
So we're sort of moving through these different
states one after the other

00:07:46.260 --> 00:07:47.720
And that takes different amounts of time

00:07:47.720 --> 00:07:51.060
If we're fetching 15 bytes it's gonna take longer than
if we're fetching one

00:07:51.060 --> 00:07:53.080
decoding it might well be shorter

00:07:53.080 --> 00:07:56.460
than if we're fetching something from memory,
cos' this is all inside the CPU

00:07:56.460 --> 00:07:59.020
And the execution depends on 
what's actually happening

00:07:59.020 --> 00:08:01.500
So your CPU will work like this:
It will go through each phase,

00:08:01.500 --> 00:08:04.500
then once it's done that, 
it'll start on the next clock tick

00:08:04.500 --> 00:08:06.480
all the CPU's are synchronized to a clock,

00:08:06.480 --> 00:08:08.240
which just keeps things moving in sequence

00:08:08.240 --> 00:08:11.700
and you can build a CPU. 
Something like the 6502 worked like that

00:08:11.700 --> 00:08:16.240
But, as we said, lots of the CPU aren't actually 
doing anything at any time

00:08:16.300 --> 00:08:18.940
which is a bit wasteful of the resources

00:08:18.940 --> 00:08:21.220
So is there another way you can do this?

00:08:21.220 --> 00:08:23.580
And the answer is yes!
You can do what's called

00:08:23.580 --> 00:08:26.100
a sort of pipe-lined model of a CPU

00:08:26.120 --> 00:08:31.200
So what you do here is,
you still have the same 3 bits of the CPU

00:08:32.000 --> 00:08:34.560
But you say: Okay, so we gotta fetch (f)

00:08:34.680 --> 00:08:35.800
instruction one

00:08:35.800 --> 00:08:39.120
In the next bit of time,
I'm gonna start decoding this one

00:08:39.140 --> 00:08:42.180
So, I'm gonna start decoding instruction one

00:08:42.180 --> 00:08:44.900
But I'm gonna say: I'm not using 
the fetch logic here,

00:08:44.900 --> 00:08:47.160
so I'm gonna have this start to get things ready

00:08:47.160 --> 00:08:49.440
and, start to do things ahead of schedule

00:08:49.560 --> 00:08:53.540
I'm also at the same time
gonna fetch instruction 2

00:08:53.540 --> 00:08:56.500
So now I'm doing two things,
two bit's of my CPU in use the same time

00:08:56.500 --> 00:08:59.980
I'm fetching the next instruction,
while decoding the first one

00:08:59.980 --> 00:09:04.380
And once we've done decoding, I can start
executing the first instruction

00:09:04.440 --> 00:09:05.560
So I execute that

00:09:05.680 --> 00:09:10.060
But at the same time, I can start
decoding instruction 2

00:09:10.100 --> 00:09:14.000
and hopefully, 
I can start fetching instruction 3

00:09:14.000 --> 00:09:18.440
So what? It is still taking the same
amount of time to execute that first instruction

00:09:18.440 --> 00:09:21.300
So the beauty is when it 
comes to executing instruction two

00:09:21.300 --> 00:09:23.880
it completes exactly one 
cycle after the other

00:09:23.880 --> 00:09:27.420
rather than having to wait for it to go through 
the fetch and decode and execute cycles

00:09:27.420 --> 00:09:30.020
we can just execute it as soon as we've
finished instruction one

00:09:30.020 --> 00:09:32.140
So each instruction still takes the 
same amount of time

00:09:32.140 --> 00:09:35.240
it's gonna take, say, three clock cycles
to go through the CPU

00:09:35.240 --> 00:09:37.700
but because we've sort of pipelined it together

00:09:37.700 --> 00:09:39.960
they actually appear to execute one after each other

00:09:39.960 --> 00:09:42.580
so it appears to execute one clock cycle
after each other

00:09:42.580 --> 00:09:45.880
And we could do this again
So we could start decoding

00:09:45.960 --> 00:09:47.780
instruction 3 here

00:09:47.780 --> 00:09:49.520
at the same time as we're executing instruction two

00:09:49.520 --> 00:09:50.640
Now there can be problems

00:09:50.640 --> 00:09:53.940
This works for some instructions,
but say this instruction

00:09:53.940 --> 00:09:56.100
said "store this value in memory"

00:09:56.100 --> 00:09:57.360
Now you've got a problem

00:09:57.360 --> 00:10:00.100
You've only got one address bus 
and one data bus

00:10:00.100 --> 00:10:03.180
so you can only access or store
one thing in memory at a time

00:10:03.180 --> 00:10:06.440
You can't execute a store instruction and fetch a value from memory

00:10:06.440 --> 00:10:09.620
So you wouldn't be able to fetch it until the next clock cycle

00:10:09.620 --> 00:10:11.640
So we fetch instruction four there

00:10:12.160 --> 00:10:14.560
while executing instruction three

00:10:14.560 --> 00:10:16.120
But we can't decode anything here

00:10:16.120 --> 00:10:19.260
So in this clock cycle, we can 
decode instruction four

00:10:19.640 --> 00:10:21.840
and fetch instruction five

00:10:21.840 --> 00:10:22.900
but we can't execute anything

00:10:22.900 --> 00:10:26.160
We've got what's called a "bubble"
in our pipelines,

00:10:26.220 --> 00:10:27.420
or pipeline store

00:10:27.420 --> 00:10:31.060
because at this point,
the design of the CPU doesn't let us

00:10:31.240 --> 00:10:32.680
fetch an instruction

00:10:32.680 --> 00:10:34.660
and execute an instruction at the same time

00:10:34.820 --> 00:10:37.700
it's ... what is called "pipeline hazards"

00:10:37.700 --> 00:10:39.720
that you can get when designing a pipeline CPU

00:10:39.720 --> 00:10:42.160
because the design of the CPU
doesn't let you

00:10:42.160 --> 00:10:44.720
do the things you need to 
do at the same time

00:10:44.720 --> 00:10:46.500
at the same time.
So you have to

00:10:46.500 --> 00:10:49.200
delay things, which means that 
you get a bubble

00:10:49.280 --> 00:10:52.880
So, you can't quite get up to 
one instruction per cycle

00:10:52.940 --> 00:10:53.740
efficiency

00:10:53.740 --> 00:10:55.460
But you can certainly get closer

00:10:55.460 --> 00:10:57.320
than you could if you 
just had everything

00:10:57.320 --> 00:10:59.300
to do one instruction at a time.

