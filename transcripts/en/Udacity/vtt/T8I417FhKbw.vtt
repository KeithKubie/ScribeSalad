WEBVTT
Kind: captions
Language: en

00:00:00.170 --> 00:00:02.648
Here's how I ended up 
simplifying things.

00:00:02.687 --> 00:00:04.944
I'd love to see great testing ideas.

00:00:05.034 --> 00:00:07.374
So, if you're particular 
to what you've created,

00:00:07.404 --> 00:00:09.384
post your solution to the the forums.

00:00:10.165 --> 00:00:12.808
I'm starting off 
re-factoring things a little bit.

00:00:12.925 --> 00:00:14.558
What I'm going to do is 
I'm going to add a function

00:00:14.558 --> 00:00:16.637
to get the location ContentValues.

00:00:17.125 --> 00:00:19.785
This will be useful when we actually 
try to use these tests

00:00:19.785 --> 00:00:21.401
for some other things later on.

00:00:21.466 --> 00:00:25.717
And there we are: a function 
that'll return location ContentValues.

00:00:26.056 --> 00:00:29.466
I'm also going to pull the city name out,
so we can use that

00:00:29.466 --> 00:00:31.743
for some validation steps later on.

00:00:31.945 --> 00:00:34.997
And there we are. 
It's now inside of the function.

00:00:35.031 --> 00:00:36.872
Then we're simply 
going to call that function

00:00:36.872 --> 00:00:40.329
to get our location ContentValues
and we can delete all those lines of code.

00:00:40.457 --> 00:00:45.337
Now, all of these columns, 
as I said before, are not very important,

00:00:45.337 --> 00:00:46.949
so we can delete them.

00:00:47.376 --> 00:00:50.306
We can also null out the value
in our query.

00:00:50.306 --> 00:00:53.450
The next thing I want to do 
is actually fix this validation step.

00:00:53.450 --> 00:00:55.298
What we can do is 
we can create a function

00:00:55.298 --> 00:00:58.503
that relies on the fact 
we can get the map and set

00:00:58.503 --> 00:01:00.224
from our ContentValues,

00:01:00.224 --> 00:01:02.315
then we can simply iterate
through those.

00:01:02.315 --> 00:01:05.278
Then we can see if the values 
that we used to create the record

00:01:05.278 --> 00:01:08.020
actually passed the values 
in the cursor that are returned.

00:01:08.020 --> 00:01:12.756
Now, back to our test. So, there's a lot
of unnecessary code here now.

00:01:14.798 --> 00:01:20.492
All we have to do is call validateCursor
with our values and our cursor.

00:01:20.492 --> 00:01:24.194
All right. So now we've converted
the first test. We can do the same thing

00:01:24.194 --> 00:01:25.850
with the second test as well.

00:01:25.850 --> 00:01:28.379
First of all, let's do 
the same abstraction we did before.

00:01:28.379 --> 00:01:30.752
Now of course, one of these values 
isn't going to be static,

00:01:30.752 --> 00:01:32.265
so we have to add that in.

00:01:32.265 --> 00:01:39.200
Now we can say, 
ContentValues=getWeatherContentValues,

00:01:39.200 --> 00:01:42.410
with our all important location RowID.

00:01:43.077 --> 00:01:44.965
Remember, our tables are linked.

00:01:44.965 --> 00:01:47.232
Then we can insert it into the database.

00:01:47.724 --> 00:01:49.739
Query for it. If the query is successful,

00:01:49.739 --> 00:01:54.181
we can just call validateCursor again 
on our weatherValues

00:01:54.462 --> 00:01:56.385
with our weatherCursor.

00:01:56.746 --> 00:02:00.505
So much less code. 
And that's it.

00:02:00.526 --> 00:02:02.874
Our test is vastly simplified

00:02:03.515 --> 00:02:06.318
and it will be useful to us later on.

00:02:06.560 --> 00:02:09.350
So now we can try running 
this test again to see if it still works

00:02:09.350 --> 00:02:10.949
after the re-factoring.

00:02:11.008 --> 00:02:12.759
And there we are, test passed.

00:02:12.761 --> 00:02:15.529
Now, it'd probably be useful for us
to actually print out some more data

00:02:15.529 --> 00:02:17.774
so we can see what was being tested.

00:02:17.774 --> 00:02:21.641
But, this simplification to our test
is going to help us as we move forward.

00:02:21.641 --> 00:02:23.727
We're not done with testing yet.

