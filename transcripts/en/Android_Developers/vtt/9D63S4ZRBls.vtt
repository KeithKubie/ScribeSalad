WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.249
LYLA FUJIWARA: It's best
practice to provide resources

00:00:02.249 --> 00:00:04.257
for supporting all
devices, but sometimes it

00:00:04.257 --> 00:00:06.090
might seem like you
need to make a trade off

00:00:06.090 --> 00:00:08.884
between supporting
devices and a small APK.

00:00:08.884 --> 00:00:10.800
Now, if you're not using
multi APK, supporting

00:00:10.800 --> 00:00:13.500
different screen densities,
CPU architectures,

00:00:13.500 --> 00:00:16.260
and language could account for
a pretty big chunk of your app's

00:00:16.260 --> 00:00:17.610
APK size.

00:00:17.610 --> 00:00:20.580
That's why we've introduced a
new publishing format called

00:00:20.580 --> 00:00:23.520
the Android App Bundle.

00:00:23.520 --> 00:00:25.660
It'll mean smaller
downloads for your audience

00:00:25.660 --> 00:00:28.860
and easier artifact management
in the Play Console for you.

00:00:28.860 --> 00:00:31.770
An app bundle is a single,
comprehensive build artifact

00:00:31.770 --> 00:00:34.830
that you upload to Google
Play instead of an APK.

00:00:34.830 --> 00:00:36.810
Compared to multi
APK, an app bundle

00:00:36.810 --> 00:00:39.150
delivers smaller apps
to users and is simpler

00:00:39.150 --> 00:00:41.900
to manage because it's
only one build artifact.

00:00:41.900 --> 00:00:43.530
When Google Play
has your app bundle,

00:00:43.530 --> 00:00:45.800
it uses a new process
for delivering

00:00:45.800 --> 00:00:48.270
APKs called dynamic delivery.

00:00:48.270 --> 00:00:50.610
Put simply, it only sends
the portions of your app

00:00:50.610 --> 00:00:52.200
that each user needs.

00:00:52.200 --> 00:00:54.090
Now, just using the
new app bundle format

00:00:54.090 --> 00:00:55.580
will automatically
give your users

00:00:55.580 --> 00:00:58.800
APKs with only the language,
screen density, and ABI

00:00:58.800 --> 00:01:00.540
resources that they require.

00:01:00.540 --> 00:01:03.780
And it requires no code
refactoring from you.

00:01:03.780 --> 00:01:05.790
Building an app bundle
is just a matter

00:01:05.790 --> 00:01:07.890
of selecting the
right build output.

00:01:07.890 --> 00:01:09.810
When using Android
Studio, here you'll

00:01:09.810 --> 00:01:12.600
see the option to generate
a signed app bundle.

00:01:12.600 --> 00:01:17.580
Select Building a bundle instead
of an APK, provide your key,

00:01:17.580 --> 00:01:20.730
choose the destination
folder, and you're done.

00:01:20.730 --> 00:01:23.370
You'll then have your
shiny new app bundle.

00:01:23.370 --> 00:01:26.030
You'll also need to enroll
in Google Play app signing

00:01:26.030 --> 00:01:27.240
in the Play Console.

00:01:27.240 --> 00:01:29.760
Google Play is essentially
generating optimized APKs

00:01:29.760 --> 00:01:31.890
for your users, so you
need to give it the ability

00:01:31.890 --> 00:01:33.890
to sign those APKs for you.

00:01:33.890 --> 00:01:36.990
App bundles are supported
by Google Play right now.

00:01:36.990 --> 00:01:40.140
The technology that play uses
to generate APKs from the bundle

00:01:40.140 --> 00:01:41.940
is open source,
so in the future,

00:01:41.940 --> 00:01:43.650
your app bundle will
work with other app

00:01:43.650 --> 00:01:45.450
stores that enable support.

00:01:45.450 --> 00:01:47.070
Bundles work for all devices.

00:01:47.070 --> 00:01:48.770
Devices running
lollipop and higher

00:01:48.770 --> 00:01:51.150
get the greatest size benefit
from dynamic delivery,

00:01:51.150 --> 00:01:54.660
but pre-lollipop devices will
still get a multi APK style

00:01:54.660 --> 00:01:56.910
APK, which is automatically
generated by Google

00:01:56.910 --> 00:01:58.639
Play from your app bundle.

00:01:58.639 --> 00:02:00.180
Let's go ahead and
take a closer look

00:02:00.180 --> 00:02:02.730
at how Google Play
actually uses this bundle,

00:02:02.730 --> 00:02:06.990
what dynamic delivery is doing,
and how users get their APKs.

00:02:06.990 --> 00:02:09.180
In the past, you'd
upload an APK,

00:02:09.180 --> 00:02:12.120
and then Play would then
serve that same APK.

00:02:12.120 --> 00:02:15.270
When you upload an app bundle,
Google Play takes that bundle

00:02:15.270 --> 00:02:16.960
and splits it into
multiple smaller

00:02:16.960 --> 00:02:19.774
APKs known as split APKs.

00:02:19.774 --> 00:02:21.690
The part of the app which
is always downloaded

00:02:21.690 --> 00:02:25.170
is placed into a split
APK called the base APK.

00:02:25.170 --> 00:02:26.970
When using a bundle,
Play automatically

00:02:26.970 --> 00:02:31.060
makes split APKs for resources,
assets, and native libraries.

00:02:31.060 --> 00:02:32.730
These resource
specific split APKs

00:02:32.730 --> 00:02:35.230
are called configuration APKs.

00:02:35.230 --> 00:02:36.780
Let's take a look at an example.

00:02:36.780 --> 00:02:39.330
I'm an English speaking
user on a Pixel 2

00:02:39.330 --> 00:02:43.410
XL with 560 DPI resolution
running on an ARM 64 processor.

00:02:43.410 --> 00:02:45.510
If I install your
app, dynamic delivery

00:02:45.510 --> 00:02:48.570
will find just the split APKs
that I specifically need.

00:02:48.570 --> 00:02:50.550
These split APKs will
be delivered down

00:02:50.550 --> 00:02:52.170
to compatible
devices that behave

00:02:52.170 --> 00:02:56.070
like a single customized APK
that's optimized for my device.

00:02:56.070 --> 00:02:57.960
For earlier devices,
dynamic delivery

00:02:57.960 --> 00:03:01.170
will send out a multi APK
with research appropriate ABI

00:03:01.170 --> 00:03:03.150
and density resources.

00:03:03.150 --> 00:03:04.830
With the introduction
of the Android app

00:03:04.830 --> 00:03:06.720
bundle and dynamic
delivery, we're

00:03:06.720 --> 00:03:08.460
allowing for
automatically smaller apps

00:03:08.460 --> 00:03:10.420
and a smoother
deployment process.

00:03:10.420 --> 00:03:11.970
In addition, the
app bundle format

00:03:11.970 --> 00:03:15.390
also introduces dynamic
features, at least in beta.

00:03:15.390 --> 00:03:18.420
Dynamic features allow you to
modularize specific features

00:03:18.420 --> 00:03:20.910
and then deliver them
to your users on demand.

00:03:20.910 --> 00:03:23.460
For more information,
check out the links below.

00:03:23.460 --> 00:03:25.410
If you're curious about
bundlefying your app,

00:03:25.410 --> 00:03:28.710
the best place to get started
is g.co/andriodappbundle.

00:03:28.710 --> 00:03:30.370
Happy coding.

