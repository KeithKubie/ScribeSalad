WEBVTT
Kind: captions
Language: en

00:00:00.760 --> 00:00:02.260
LAURENCE MORONEY:
Welcome to getting

00:00:02.260 --> 00:00:03.855
started with App Engine.

00:00:03.855 --> 00:00:06.230
My name is Laurence Moroney,
and I'm a developer advocate

00:00:06.230 --> 00:00:08.900
at Google for the
Cloud Platform.

00:00:08.900 --> 00:00:10.590
In this video, I'll
give you an overview

00:00:10.590 --> 00:00:13.900
of how you can use App Engine to
build cloud scalable apps that

00:00:13.900 --> 00:00:15.910
are always available,
thanks to them running

00:00:15.910 --> 00:00:18.080
on Google's
infrastructure for you.

00:00:18.080 --> 00:00:20.680
The Cloud Platform has a number
of different technologies

00:00:20.680 --> 00:00:23.940
that you can use, and these
enable a variety of scenarios,

00:00:23.940 --> 00:00:25.560
giving you platform
as a service,

00:00:25.560 --> 00:00:27.530
as well as infrastructure
as a service,

00:00:27.530 --> 00:00:29.488
as well as just about
everything you could ever

00:00:29.488 --> 00:00:31.930
need to build cloud
scalable applications that

00:00:31.930 --> 00:00:33.790
run on Google's
secure, scalable,

00:00:33.790 --> 00:00:35.480
and available infrastructure.

00:00:35.480 --> 00:00:37.970
In this video, I will
introduce App Engine

00:00:37.970 --> 00:00:40.980
and describe how you can use
App Engine to build applications

00:00:40.980 --> 00:00:42.990
on top of Google's
infrastructure,

00:00:42.990 --> 00:00:45.161
allowing you to focus
on writing your code,

00:00:45.161 --> 00:00:46.910
and not worrying about
being able to build

00:00:46.910 --> 00:00:48.680
the infrastructure
to support it,

00:00:48.680 --> 00:00:50.950
should you need to
scale in a big way.

00:00:50.950 --> 00:00:53.870
With App Engine you can use a
variety of popular programming

00:00:53.870 --> 00:00:56.030
languages in a way
that you are familiar,

00:00:56.030 --> 00:00:58.680
with very little changes.

00:00:58.680 --> 00:01:03.240
You can build cloud scalable
apps with Python, PHP, or Go,

00:01:03.240 --> 00:01:06.264
using your favorite development
tools in a local environment

00:01:06.264 --> 00:01:07.680
for testing and
debugging your app

00:01:07.680 --> 00:01:09.660
before you deploy
it to the cloud.

00:01:09.660 --> 00:01:12.820
App Engine also supports Jave,
and with an Eclipse plug-in,

00:01:12.820 --> 00:01:15.130
you can also develop,
test, and debug locally

00:01:15.130 --> 00:01:17.580
before you deploy
it to the cloud.

00:01:17.580 --> 00:01:20.670
When building web or cloud apps,
there are many considerations.

00:01:20.670 --> 00:01:23.520
But perhaps the most important
of these is your data.

00:01:23.520 --> 00:01:25.590
App Engine gives you
a myriad of choices

00:01:25.590 --> 00:01:27.610
for how you store and
retrieve your data,

00:01:27.610 --> 00:01:29.820
and you can pick the
ones that suit you.

00:01:29.820 --> 00:01:33.300
Google Cloud Datastore is a
very simple NoSQL data storage

00:01:33.300 --> 00:01:34.140
scheme.

00:01:34.140 --> 00:01:36.360
You simply create
an object like this

00:01:36.360 --> 00:01:38.132
and put it into the datastore.

00:01:38.132 --> 00:01:39.590
You can retrieve
your object easily

00:01:39.590 --> 00:01:42.460
in a variety of ways, including
a SQL like language college

00:01:42.460 --> 00:01:43.630
GQL.

00:01:43.630 --> 00:01:45.090
Here you can see
an example where

00:01:45.090 --> 00:01:47.590
I have a model that
I called Answers,

00:01:47.590 --> 00:01:50.230
and answer can have a number
of attributes, such as author,

00:01:50.230 --> 00:01:53.590
city, or country, and I simply
just set these attributes

00:01:53.590 --> 00:01:56.230
and then put my
answer into datastore.

00:01:56.230 --> 00:01:59.010
GQL looks a lot like SQL,
and as you can see here,

00:01:59.010 --> 00:02:01.820
I have a query that says
select city from answer, where

00:02:01.820 --> 00:02:03.770
I can just take a look
at all of the cities

00:02:03.770 --> 00:02:07.142
that I have answers for.

00:02:07.142 --> 00:02:08.850
If your application
requires you to store

00:02:08.850 --> 00:02:11.200
a lot of data and
right time is an issue,

00:02:11.200 --> 00:02:13.400
for example, if you have
a lot of concurrent users

00:02:13.400 --> 00:02:15.890
and you don't want to burn
resources writing data,

00:02:15.890 --> 00:02:19.250
then Google Cloud Datastore
is a terrific option.

00:02:19.250 --> 00:02:21.700
Should you prefer to use
a traditional relational

00:02:21.700 --> 00:02:24.390
database, or if you have an
existing database that you'd

00:02:24.390 --> 00:02:26.950
like to migrate to the
cloud, then Google Cloud SQL

00:02:26.950 --> 00:02:28.350
is built for you.

00:02:28.350 --> 00:02:31.540
Built upon MySQL, it gives you
a powerful, scalable database

00:02:31.540 --> 00:02:33.445
with full SQL support.

00:02:33.445 --> 00:02:36.480
Here you can see I'm
connected to MySQL database

00:02:36.480 --> 00:02:38.180
and I'm creating a
cursor on which I

00:02:38.180 --> 00:02:40.360
can execute a SQL query.

00:02:40.360 --> 00:02:41.910
Once I have that
query, I can iterate

00:02:41.910 --> 00:02:43.370
through all the
rows of that query

00:02:43.370 --> 00:02:45.760
and pull out the columns
that I want before I finally

00:02:45.760 --> 00:02:47.329
close the database.

00:02:47.329 --> 00:02:49.870
Of course, if you need to store
your information in something

00:02:49.870 --> 00:02:51.610
other than a
database, for example,

00:02:51.610 --> 00:02:54.490
files in a file system for
pictures or other media,

00:02:54.490 --> 00:02:56.770
you can use Google
Cloud Storage.

00:02:56.770 --> 00:02:59.260
This is a RESTful service
for storing, accessing,

00:02:59.260 --> 00:03:01.650
and providing controlled
access to your data on Google's

00:03:01.650 --> 00:03:02.275
infrastructure.

00:03:04.536 --> 00:03:07.036
The Google Cloud Storage client
library is available for you

00:03:07.036 --> 00:03:10.024
to build applications
that use cloud storage.

00:03:10.024 --> 00:03:11.440
Here's an example,
and you can see

00:03:11.440 --> 00:03:14.190
it's just like programming
for any kind of file system.

00:03:14.190 --> 00:03:16.990
I can open a file, I can
write to it and close it.

00:03:16.990 --> 00:03:18.490
Or I can open the
file and then seek

00:03:18.490 --> 00:03:20.559
to a specific
location on that file.

00:03:20.559 --> 00:03:22.350
And, of course, I can
just delete the files

00:03:22.350 --> 00:03:23.740
that I don't want.

00:03:23.740 --> 00:03:25.880
If you want to use data
with maximum speed,

00:03:25.880 --> 00:03:27.910
you can do it directly
to memory instead of

00:03:27.910 --> 00:03:29.960
to a datastore or a database.

00:03:29.960 --> 00:03:31.780
To empower this, App
Engine introduces

00:03:31.780 --> 00:03:34.280
Memcache, a technology
for storing information

00:03:34.280 --> 00:03:37.240
in shared memory as
a key valued pair.

00:03:37.240 --> 00:03:40.110
Here are some examples of
using the Memcache APIs.

00:03:40.110 --> 00:03:41.640
I could add a new
value to Memcache

00:03:41.640 --> 00:03:43.270
by calling the add method.

00:03:43.270 --> 00:03:45.570
In this I can specify
the key and the value,

00:03:45.570 --> 00:03:48.180
as well as an optional timeout
parameter, after which,

00:03:48.180 --> 00:03:50.920
App Engine will automatically
flush the memcache variable,

00:03:50.920 --> 00:03:53.330
saving me my resources.

00:03:53.330 --> 00:03:56.130
I can get a value from Memcache
by specifying the key that I

00:03:56.130 --> 00:03:59.080
want to read, or I can also
set a value in Memcache

00:03:59.080 --> 00:04:01.010
using the set method.

00:04:01.010 --> 00:04:04.350
A handy shortcut for numerical
values is this increment call.

00:04:04.350 --> 00:04:05.850
It saves me from
getting the value,

00:04:05.850 --> 00:04:08.110
changing it, and
then resetting it.

00:04:08.110 --> 00:04:09.990
These are just a
few simple samples.

00:04:09.990 --> 00:04:12.620
There's a lot more in using
Memcache at the developer site

00:04:12.620 --> 00:04:15.670
that you'll see at
the end of this video.

00:04:15.670 --> 00:04:17.380
Everything about your
app can be managed

00:04:17.380 --> 00:04:19.089
using the App Engine console.

00:04:19.089 --> 00:04:21.244
From here, you can see how
your app is performance,

00:04:21.244 --> 00:04:23.160
as well as being able
to inspection your data,

00:04:23.160 --> 00:04:26.460
be it a datastore,
Cloud SQL, or Memcache.

00:04:26.460 --> 00:04:28.850
Using App Engine, you can
take your web applications

00:04:28.850 --> 00:04:31.460
to the cloud and not have
to worry about scale.

00:04:31.460 --> 00:04:34.300
All web applications have
peaks and troughs of usage,

00:04:34.300 --> 00:04:35.770
and when built on
App Engine, you

00:04:35.770 --> 00:04:38.019
don't have to worry about
paying for the compute power

00:04:38.019 --> 00:04:39.610
that you don't use,
and you can rest

00:04:39.610 --> 00:04:41.300
assured that when
you need it, Google's

00:04:41.300 --> 00:04:44.182
powerful infrastructure is
there to power your site.

00:04:44.182 --> 00:04:45.640
You can learn more
about App Engine

00:04:45.640 --> 00:04:48.040
at developers.google.com.

00:04:48.040 --> 00:04:50.930
Thank you and
welcome to the cloud.

