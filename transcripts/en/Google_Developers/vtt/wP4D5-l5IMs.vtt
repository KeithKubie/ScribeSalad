WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.750
MALE SPEAKER 1: --ing
developer community.

00:00:01.750 --> 00:00:02.870
FEMALE SPEAKER 1: I'm
glad somebody

00:00:02.870 --> 00:00:03.900
has asked this question.

00:00:03.900 --> 00:00:04.900
MALE SPEAKER 2: This is where
the magic happens.

00:00:04.900 --> 00:00:06.590
FEMALE SPEAKER 2: This is
primarily a question and

00:00:06.590 --> 00:00:07.150
answer show.

00:00:07.150 --> 00:00:09.615
So if any of you out there would
like to ask questions.

00:00:16.114 --> 00:00:19.860
MALE SPEAKER 1: Shanghai GDG
is a very interesting

00:00:19.860 --> 00:00:22.470
developer community.

00:00:22.470 --> 00:00:25.350
JEFF POSNICK: And this week
we're actually coming from the

00:00:25.350 --> 00:00:27.350
main studio in New York.

00:00:27.350 --> 00:00:29.480
And I'm Jeff Posnick from the
YouTube Developer Relations

00:00:29.480 --> 00:00:30.700
Team out here in New York.

00:00:30.700 --> 00:00:35.380
And for a change, we have Jarek
and Jeremy joining us

00:00:35.380 --> 00:00:38.774
from Mountain View in kind
of a remote location.

00:00:38.774 --> 00:00:40.088
JAREK WILKIEWICZ: Hello.

00:00:40.088 --> 00:00:40.900
JEFF POSNICK: Hey, guys.

00:00:40.900 --> 00:00:41.650
Good morning, guys.

00:00:41.650 --> 00:00:42.360
JAREK WILKIEWICZ: Hey, Jeff.

00:00:42.360 --> 00:00:43.230
How are you doing?

00:00:43.230 --> 00:00:44.710
JEFF POSNICK: I'm doing
well, thanks.

00:00:44.710 --> 00:00:45.480
I'm--

00:00:45.480 --> 00:00:47.230
JAREK WILKIEWICZ: Live from
New York, but it's not

00:00:47.230 --> 00:00:48.310
Saturday yet.

00:00:48.310 --> 00:00:49.050
JEFF POSNICK: Yeah.

00:00:49.050 --> 00:00:53.432
It's the fun Wednesday
afternoon broadcast

00:00:53.432 --> 00:00:54.410
scene in New York.

00:00:54.410 --> 00:00:58.190
And yeah, how I'm doing is, for
those of you who have been

00:00:58.190 --> 00:01:01.470
following along religiously to
our YouTube Developer Lives,

00:01:01.470 --> 00:01:04.700
you've probably been able to
track the progress of my cold.

00:01:04.700 --> 00:01:08.720
And from about a month and a
half ago, I was completely out

00:01:08.720 --> 00:01:12.175
of commission and couldn't make
broadcast, to as I've

00:01:12.175 --> 00:01:14.345
slowly been coming back and just
providing some background

00:01:14.345 --> 00:01:16.110
of coughing and things
like that.

00:01:16.110 --> 00:01:17.510
So you can expect the coughing
to be in the

00:01:17.510 --> 00:01:19.420
foreground this week.

00:01:19.420 --> 00:01:22.350
I have my hot tea ready.

00:01:22.350 --> 00:01:26.630
Nice sponsorship with the
generic Moening cup company.

00:01:26.630 --> 00:01:32.900
So bear with me, please, if
I'm coughing at any point.

00:01:32.900 --> 00:01:35.770
But the reason we're going live
from New York in this

00:01:35.770 --> 00:01:38.980
particular case is that we
wanted to devote this week's

00:01:38.980 --> 00:01:40.950
session to YouTube
Direct Lite.

00:01:40.950 --> 00:01:44.660
And YouTube Direct Lite is a
project that is very near and

00:01:44.660 --> 00:01:46.122
dear to my heart.

00:01:46.122 --> 00:01:49.190
It is something I've been
working on for a number of

00:01:49.190 --> 00:01:49.810
months now.

00:01:49.810 --> 00:01:52.710
And it's kind of the evolution
of the whole

00:01:52.710 --> 00:01:55.080
YouTube Direct platform.

00:01:55.080 --> 00:01:58.350
And for those of you who might
not be familiar with YouTube

00:01:58.350 --> 00:02:00.690
Direct or YouTube Direct Lite, I
want to start by just giving

00:02:00.690 --> 00:02:02.680
you some background and talk
about why you might want to

00:02:02.680 --> 00:02:07.560
use YouTube Direct or YouTube
Direct Lite in particular.

00:02:07.560 --> 00:02:11.490
So let's say that you are
somebody who's running a

00:02:11.490 --> 00:02:16.250
website, and you want to have
a way of soliciting feedback

00:02:16.250 --> 00:02:18.330
from users of your website.

00:02:18.330 --> 00:02:22.180
And there's obviously ways of
doing that via text comments

00:02:22.180 --> 00:02:23.450
or things along those lines.

00:02:23.450 --> 00:02:25.190
But we're YouTube.

00:02:25.190 --> 00:02:28.030
We think things should be doable
via video and easy to

00:02:28.030 --> 00:02:28.650
do via video.

00:02:28.650 --> 00:02:31.630
And we'd like to make it easier
for folks to solicit

00:02:31.630 --> 00:02:33.880
video feedback from
their users.

00:02:33.880 --> 00:02:35.340
And this could be any type
of video playback.

00:02:35.340 --> 00:02:38.250
It could be people sending in
from a web cam and answering a

00:02:38.250 --> 00:02:42.130
question that a news
organization asks about.

00:02:42.130 --> 00:02:44.900
It could be people have captured
kind of like citizen

00:02:44.900 --> 00:02:46.270
journalism or citizen
reporting,

00:02:46.270 --> 00:02:47.990
submitting to a site.

00:02:47.990 --> 00:02:53.880
It could be a gaming website
that might have members of a

00:02:53.880 --> 00:02:57.800
certain online guild upload
videos of their playback

00:02:57.800 --> 00:03:00.480
experience or something
along those lines.

00:03:00.480 --> 00:03:02.410
A whole host of possible
solutions.

00:03:02.410 --> 00:03:06.200
And the problem is that while
there are definitely ways of

00:03:06.200 --> 00:03:10.020
doing that using the YouTube
API, a lot of that requires a

00:03:10.020 --> 00:03:11.865
good deal of programming.

00:03:11.865 --> 00:03:15.110
And not all people who are
hosting their own websites are

00:03:15.110 --> 00:03:15.890
developers.

00:03:15.890 --> 00:03:19.510
And it's also not a great idea
to ask people to start coding

00:03:19.510 --> 00:03:21.460
the same thing over and
over and over again.

00:03:21.460 --> 00:03:24.770
So providing a platform that
takes care of all those common

00:03:24.770 --> 00:03:27.650
activities that normally involve
the soliciting of

00:03:27.650 --> 00:03:31.570
video uploads, and then also
featuring the video uploads

00:03:31.570 --> 00:03:34.270
that have been moderated by
the website owner and

00:03:34.270 --> 00:03:37.310
approved, that's something that
we wanted to accomplish

00:03:37.310 --> 00:03:40.680
with YouTube Direct and now
with YouTube Direct Lite.

00:03:40.680 --> 00:03:43.620
One of the important things to
note is that this follows our

00:03:43.620 --> 00:03:46.610
best practices for uploads.

00:03:46.610 --> 00:03:48.750
And those of you who have
tuned into some of our

00:03:48.750 --> 00:03:51.180
previous shows, I think it was
a couple weeks ago you heard

00:03:51.180 --> 00:03:54.560
me talk for about 30 minutes
about best practices for

00:03:54.560 --> 00:03:57.580
soliciting uploads and making
sure that you don't have the

00:03:57.580 --> 00:03:59.980
uploads all go into one
master account.

00:03:59.980 --> 00:04:02.590
The idea is that users should
first authenticate against

00:04:02.590 --> 00:04:04.240
their own YouTube accounts.

00:04:04.240 --> 00:04:06.020
And then you can use
the API to upload

00:04:06.020 --> 00:04:07.810
videos into that account.

00:04:07.810 --> 00:04:10.640
And that's what YouTube
Direct Lite does.

00:04:10.640 --> 00:04:12.350
So you have an easy
way of doing that.

00:04:12.350 --> 00:04:14.180
It all uses OAuth2, which
is our standard

00:04:14.180 --> 00:04:15.620
authorization method.

00:04:15.620 --> 00:04:18.600
And I'll walk you through the
flow in a little bit.

00:04:18.600 --> 00:04:19.390
One of the--

00:04:19.390 --> 00:04:22.135
JAREK WILKIEWICZ: I have a
question for you before you

00:04:22.135 --> 00:04:24.860
get too much into the
YouTube Direct.

00:04:24.860 --> 00:04:27.660
I'm a little bit of a
tech history buff.

00:04:27.660 --> 00:04:31.620
I love the Computer History
Museum here in Mountain View.

00:04:31.620 --> 00:04:34.810
And I'm always curious,
how do projects start?

00:04:34.810 --> 00:04:36.180
So how did your project start?

00:04:36.180 --> 00:04:38.680
Was your wife involved
in any way?

00:04:38.680 --> 00:04:40.690
There's all these tech companies
that get started

00:04:40.690 --> 00:04:42.310
because of wives.

00:04:42.310 --> 00:04:45.230
Like what prompted
you to actually

00:04:45.230 --> 00:04:46.320
start working on this?

00:04:46.320 --> 00:04:47.600
JEFF POSNICK: Now I'm
really suspicious.

00:04:47.600 --> 00:04:51.080
Was my wife involved
in any way?

00:04:51.080 --> 00:04:52.480
Not as far as I know.

00:04:52.480 --> 00:04:56.590
I mean, YouTube Direct came
about probably about three

00:04:56.590 --> 00:04:57.910
years ago now.

00:04:57.910 --> 00:05:00.495
And that was kind of the whole
genesis of the project.

00:05:00.495 --> 00:05:02.585
And it was actually one of the
first things I worked on when

00:05:02.585 --> 00:05:04.530
I joined the YouTube API team.

00:05:04.530 --> 00:05:08.980
And we were thinking a lot about
citizen journalism, in

00:05:08.980 --> 00:05:13.610
that particular case and trying
to help folks collect

00:05:13.610 --> 00:05:14.280
news stories.

00:05:14.280 --> 00:05:17.510
But it's always been more than
just the whole citizen

00:05:17.510 --> 00:05:18.560
journalism use case.

00:05:18.560 --> 00:05:21.105
We want to make this kind
of a generic way

00:05:21.105 --> 00:05:22.230
of soliciting videos.

00:05:22.230 --> 00:05:25.100
And then YouTube Direct Lite
came about more recently.

00:05:25.100 --> 00:05:29.380
And what actually prompted me
to write it is the fact that

00:05:29.380 --> 00:05:33.250
we can now do something that's
purely client-side JavaScript

00:05:33.250 --> 00:05:34.350
that has most of the same

00:05:34.350 --> 00:05:35.760
functionality as YouTube Direct.

00:05:35.760 --> 00:05:37.910
And I'm going to talk about
that a little bit later.

00:05:37.910 --> 00:05:40.840
But because YouTube Direct
Lite is pure client-side

00:05:40.840 --> 00:05:41.590
JavaScript--

00:05:41.590 --> 00:05:45.560
and notice I'm wearing my HTML5
T-shirt today instead of

00:05:45.560 --> 00:05:47.890
my normal YouTube developer
T-shirt because I wanted to

00:05:47.890 --> 00:05:52.190
give HTML5 some love, and
particularly cross-origin

00:05:52.190 --> 00:05:56.160
resource sharing, which is the
part of the HTML5 spec that

00:05:56.160 --> 00:05:59.900
really powers a lot of what
YouTube Direct Lite can do.

00:05:59.900 --> 00:06:02.560
For the first time recently,
we were able to write

00:06:02.560 --> 00:06:06.700
something that did not require
server-side deployment but had

00:06:06.700 --> 00:06:10.060
most of the same functionality
as what our older YouTube

00:06:10.060 --> 00:06:11.380
Direct project had.

00:06:11.380 --> 00:06:15.440
So I will have to defer to
my wife whether she had

00:06:15.440 --> 00:06:16.300
any input or not.

00:06:16.300 --> 00:06:20.770
But as far as I recall, that's
kind of the background story.

00:06:20.770 --> 00:06:22.080
JAREK WILKIEWICZ: Great.

00:06:22.080 --> 00:06:25.400
So you are becoming more
of a client-side

00:06:25.400 --> 00:06:26.950
guy over the years?

00:06:26.950 --> 00:06:29.630
You started off in the
cloud, and now it's

00:06:29.630 --> 00:06:30.945
all about the browser?

00:06:30.945 --> 00:06:32.470
JEFF POSNICK: I wouldn't
say that it's

00:06:32.470 --> 00:06:33.370
all about the browser.

00:06:33.370 --> 00:06:36.770
And I certainly am very well
aware of some of the

00:06:36.770 --> 00:06:39.630
limitations that the pure
client-side solution has.

00:06:39.630 --> 00:06:42.450
I mean, you'll notice we're not
calling it YouTube Direct

00:06:42.450 --> 00:06:44.900
2.0 or 3.0 or anything
like that.

00:06:44.900 --> 00:06:46.080
We're calling it Lite because
there are certain things that

00:06:46.080 --> 00:06:49.620
we just can't do yet in
client-side code.

00:06:49.620 --> 00:06:53.320
But what we really wanted to do
was provide something that

00:06:53.320 --> 00:06:56.530
was as easy as possible for
folks who want to use YouTube

00:06:56.530 --> 00:06:59.060
Direct and perhaps in the past
have wanted to use YouTube

00:06:59.060 --> 00:07:02.060
Direct but were really just
not able to overcome the

00:07:02.060 --> 00:07:07.020
technical barrier of having to
check out source code, open up

00:07:07.020 --> 00:07:11.120
Eclipse, deploy their own Java
App Engine instance, all those

00:07:11.120 --> 00:07:13.020
things that were required
in the earlier projects.

00:07:13.020 --> 00:07:18.200
So doing browser-based code that
we could host ourselves,

00:07:18.200 --> 00:07:21.620
host for them on their behalf,
really made this possible.

00:07:21.620 --> 00:07:22.290
JAREK WILKIEWICZ: Cool.

00:07:22.290 --> 00:07:25.265
So are you going to give us a
demo, or what's the plan?

00:07:25.265 --> 00:07:26.620
JEFF POSNICK: Yeah.

00:07:26.620 --> 00:07:30.350
Just one other thing I want to
mention before giving the demo

00:07:30.350 --> 00:07:33.430
of what this looks like is the
fact that this is kind of our

00:07:33.430 --> 00:07:38.210
flagship usage of the YouTube
upload widget.

00:07:38.210 --> 00:07:43.275
So for those who have seen
this year's Google I/O

00:07:43.275 --> 00:07:45.630
presentation that we gave, we
did a joint presentation on

00:07:45.630 --> 00:07:47.730
the upload widget and
YouTube Direct Lite.

00:07:47.730 --> 00:07:50.790
And what the upload widget
allows is, for the first time,

00:07:50.790 --> 00:07:54.370
the ability to just drop in some
code onto any existing

00:07:54.370 --> 00:07:57.630
web page-- and YouTube Direct
Lite is just a web page--

00:07:57.630 --> 00:08:04.900
and to allow you to solicit web
cam uploads from any of

00:08:04.900 --> 00:08:05.910
your users.

00:08:05.910 --> 00:08:09.150
And those web cam uploads
go directly into

00:08:09.150 --> 00:08:10.690
the user's own account.

00:08:10.690 --> 00:08:14.370
And this doesn't require any
deployment on your side.

00:08:14.370 --> 00:08:18.240
Previously, you kind of have
to run your own Flash Media

00:08:18.240 --> 00:08:21.780
server yourself if you wanted
to do this sort of thing.

00:08:21.780 --> 00:08:25.700
But we're pointing this widget
at our own infrastructure.

00:08:25.700 --> 00:08:31.380
So this is a great way to make
use of the upload widget if

00:08:31.380 --> 00:08:32.880
you use it as part of
YouTube Direct Lite.

00:08:32.880 --> 00:08:35.669
But it's also kind of a
standalone project and a

00:08:35.669 --> 00:08:37.840
standalone widget that you could
put into any web page.

00:08:37.840 --> 00:08:40.030
So we'll show what that upload
widget looks like

00:08:40.030 --> 00:08:40.710
a little bit later.

00:08:40.710 --> 00:08:43.470
But I definitely wanted to point
out that that's some new

00:08:43.470 --> 00:08:44.970
functionality that's
there that we're

00:08:44.970 --> 00:08:46.780
pretty excited about.

00:08:46.780 --> 00:08:51.020
So I think we're going to switch
to the demo right now.

00:08:51.020 --> 00:08:55.900
And I'll walk through a little
bit of what you could do.

00:08:55.900 --> 00:08:59.420
And there's two aspects to
YouTube Direct Lite.

00:08:59.420 --> 00:09:07.600
And that's the submission
interface.

00:09:07.600 --> 00:09:10.030
And then there is a moderation
interface.

00:09:10.030 --> 00:09:12.480
So I'm going to first show you
what the submission interface

00:09:12.480 --> 00:09:13.950
looks like.

00:09:13.950 --> 00:09:16.880
And the important thing to
point out is that this is

00:09:16.880 --> 00:09:19.840
something that you can
just put on to any

00:09:19.840 --> 00:09:20.650
existing web page.

00:09:20.650 --> 00:09:21.895
So if you take a look at--

00:09:21.895 --> 00:09:23.530
I'm just going to quickly
pull up the source

00:09:23.530 --> 00:09:26.030
code for this page.

00:09:26.030 --> 00:09:27.850
There's really nothing
complicated here.

00:09:27.850 --> 00:09:30.520
It's just a very simple
web page.

00:09:30.520 --> 00:09:35.170
There's a little bit of the
iFrame embed over here for the

00:09:35.170 --> 00:09:37.630
actual YouTube Direct
upload widget.

00:09:37.630 --> 00:09:41.320
There's another iFrame over here
for the playlist player.

00:09:41.320 --> 00:09:45.290
And honestly, both of the pages,
have the JavaScript

00:09:45.290 --> 00:09:49.978
that's needed for Google
Analytics, honestly.

00:09:49.978 --> 00:09:53.660
So it's very straightforward
to add this to any page.

00:09:53.660 --> 00:09:57.080
And the interface is what
you see down here.

00:09:57.080 --> 00:09:58.450
So you get this little iFrame.

00:09:58.450 --> 00:10:01.760
You could customize the
size obviously, and

00:10:01.760 --> 00:10:02.410
that sort of thing.

00:10:02.410 --> 00:10:07.100
And you are taken initially,
when you click on Login, to

00:10:07.100 --> 00:10:10.950
the OAuth2 login flow for
web-based applications.

00:10:10.950 --> 00:10:12.680
And this is really important.

00:10:12.680 --> 00:10:15.530
For those of you who have been
following along to all of our

00:10:15.530 --> 00:10:19.550
developer communications pretty
much universally for

00:10:19.550 --> 00:10:22.450
the past two years or so, you've
heard about how OAuth2

00:10:22.450 --> 00:10:24.050
is the future.

00:10:24.050 --> 00:10:28.890
And OAuth2 is the recommended
means of doing authorization

00:10:28.890 --> 00:10:29.460
moving forward.

00:10:29.460 --> 00:10:32.410
So this is making
use of OAuth2.

00:10:32.410 --> 00:10:34.860
You'll see YouTube Direct Lite
is requesting permission to

00:10:34.860 --> 00:10:36.610
manage your YouTube accounts.

00:10:36.610 --> 00:10:38.720
I happen to already
be signed in.

00:10:38.720 --> 00:10:42.900
So it's not going to ask me to
sign into my Google slash

00:10:42.900 --> 00:10:43.565
YouTube account again.

00:10:43.565 --> 00:10:45.860
But if I were not already signed
in in this instance, I

00:10:45.860 --> 00:10:47.870
could have first signed in.

00:10:47.870 --> 00:10:50.050
But I see exactly what
the application is.

00:10:50.050 --> 00:10:51.560
I see what it's trying to do.

00:10:51.560 --> 00:10:52.980
And I can now click
Allow Access.

00:10:52.980 --> 00:10:55.230
I don't have to give
the application my

00:10:55.230 --> 00:10:56.890
username or my password.

00:10:56.890 --> 00:11:01.340
So it's just a nice way that the
OAuth2 kind of abstracts

00:11:01.340 --> 00:11:05.030
that away and means that you
don't have to give your

00:11:05.030 --> 00:11:07.430
credentials to third-party
applications anymore.

00:11:07.430 --> 00:11:09.110
So I'm going to click
Allow Access.

00:11:09.110 --> 00:11:13.130
And I should be redirected back
to this page, as I am.

00:11:13.130 --> 00:11:16.230
And I am now taken to this
interface where I

00:11:16.230 --> 00:11:17.800
can submit my video.

00:11:17.800 --> 00:11:20.870
So this is kind of default user
interface for YouTube

00:11:20.870 --> 00:11:22.880
Direct Lite that you're
seeing right here.

00:11:22.880 --> 00:11:27.180
And let me make it a little
bigger for the benefit of

00:11:27.180 --> 00:11:30.060
those following along.

00:11:30.060 --> 00:11:33.140
So this is obviously
a little generic.

00:11:33.140 --> 00:11:36.075
And one of the things that you
can do with YouTube Direct

00:11:36.075 --> 00:11:39.330
Lite is check out the
code yourself.

00:11:39.330 --> 00:11:40.710
This is a fully open
source project.

00:11:40.710 --> 00:11:45.510
And if you want YouTube Direct
Lite to match the way that

00:11:45.510 --> 00:11:48.680
your website looks-- you know,
specific color theme, or if

00:11:48.680 --> 00:11:51.310
you want to customize any of the
options, if you want to do

00:11:51.310 --> 00:11:54.930
things like change some of the
text around, you have the

00:11:54.930 --> 00:11:57.660
ability to do that by basically
just forking the

00:11:57.660 --> 00:11:59.020
code yourself.

00:11:59.020 --> 00:12:05.100
And it's hosted from gets,
a GET repository on

00:12:05.100 --> 00:12:06.190
code.google.com.

00:12:06.190 --> 00:12:10.170
So it's really easy to push a
copy of the code down to your

00:12:10.170 --> 00:12:13.030
client and then make the
changes that you want.

00:12:13.030 --> 00:12:15.200
But this is what the default
interface looks like.

00:12:15.200 --> 00:12:18.620
And this is the interface that
you'll get if, instead of

00:12:18.620 --> 00:12:22.320
making a local copy of the code,
you just point to the

00:12:22.320 --> 00:12:25.840
iFrame source that
we host for you.

00:12:25.840 --> 00:12:29.270
So it's kind of just a benefit
we're doing to make things

00:12:29.270 --> 00:12:32.170
super, super easy for folks
who don't want customize

00:12:32.170 --> 00:12:33.680
anything, for folks
who just want the

00:12:33.680 --> 00:12:35.300
ability to solicit videos.

00:12:35.300 --> 00:12:40.120
All you need to do is add an
iFrame with the correct source

00:12:40.120 --> 00:12:42.430
to any existing web page.

00:12:42.430 --> 00:12:44.280
I'll talk you through the steps
for doing that in a

00:12:44.280 --> 00:12:46.920
little bit after I go
through the demo.

00:12:46.920 --> 00:12:50.585
So I don't have a local video
to upload from my hard drive

00:12:50.585 --> 00:12:51.830
as part of this demo.

00:12:51.830 --> 00:12:53.600
But if I did, I could
choose the file over

00:12:53.600 --> 00:12:56.150
here and click Upload.

00:12:56.150 --> 00:13:00.840
What I can do is either submit
a video that's already

00:13:00.840 --> 00:13:02.330
existing in my YouTube
accounts.

00:13:02.330 --> 00:13:05.916
So I have a couple of general
videos right over here.

00:13:05.916 --> 00:13:08.500
You get to see Jarek's head
in the background

00:13:08.500 --> 00:13:10.430
for that demo video.

00:13:10.430 --> 00:13:13.860
If I don't remember what these
videos are, I could pick Play

00:13:13.860 --> 00:13:20.590
over here, and quickly just see
an inline preview of what

00:13:20.590 --> 00:13:22.540
the video is using our standard
YouTube player.

00:13:22.540 --> 00:13:25.040
And this is actually
really nice.

00:13:25.040 --> 00:13:28.030
If nothing else, I recommend
folks who are trying to do

00:13:28.030 --> 00:13:30.160
something similar to take
a look at our code.

00:13:30.160 --> 00:13:34.040
And you can feel free to steal
that portion that converts

00:13:34.040 --> 00:13:35.350
from a standard--

00:13:35.350 --> 00:13:37.180
you see over here,
this is just a

00:13:37.180 --> 00:13:39.180
standard image right now.

00:13:39.180 --> 00:13:42.490
And then we have a special on
click handler setup that will

00:13:42.490 --> 00:13:47.120
initialize the iFrame player
when you click on it rather

00:13:47.120 --> 00:13:49.250
than having to initialize
multiple instances of the

00:13:49.250 --> 00:13:51.680
iFrame player ahead of time.

00:13:51.680 --> 00:13:53.720
So feel free to steal that
code if you think

00:13:53.720 --> 00:13:54.650
that would be useful.

00:13:54.650 --> 00:13:57.020
And then we have this
web cam interface.

00:13:57.020 --> 00:13:59.480
And this is making use of the
upload widget that I talked

00:13:59.480 --> 00:14:00.485
about before.

00:14:00.485 --> 00:14:05.530
So clicking on Record over
there brings this up.

00:14:05.530 --> 00:14:11.110
And I hopefully will not get
an unresponsive instance of

00:14:11.110 --> 00:14:13.061
Chrome in this case.

00:14:13.061 --> 00:14:15.490
It looks like it's not happy.

00:14:15.490 --> 00:14:18.770
Something Flash related is
not happy, unfortunately.

00:14:18.770 --> 00:14:21.670
So I cannot show that particular
demo right now.

00:14:21.670 --> 00:14:26.570
And I'll show instead just
submitting one of these

00:14:26.570 --> 00:14:27.860
existing videos.

00:14:27.860 --> 00:14:31.320
So click up here on Submit
Video, and my video submission

00:14:31.320 --> 00:14:33.190
was received.

00:14:33.190 --> 00:14:35.550
So that's one end of things.

00:14:35.550 --> 00:14:40.320
That is submitting, and that's
what your users will see.

00:14:40.320 --> 00:14:45.050
But the whole idea is that these
videos are not in any

00:14:45.050 --> 00:14:47.540
particular YouTube account.

00:14:47.540 --> 00:14:51.330
These videos all live in the
YouTube accounts that belong

00:14:51.330 --> 00:14:53.880
to the people who actually
submitted the videos.

00:14:53.880 --> 00:15:00.910
So there's really no way of
knowing about these videos

00:15:00.910 --> 00:15:03.440
unless you have some
identification that gets

00:15:03.440 --> 00:15:04.885
attached to them as part
of the submission.

00:15:04.885 --> 00:15:11.040
So we're actually making
use of keywords

00:15:11.040 --> 00:15:13.120
within those videos.

00:15:13.120 --> 00:15:16.710
And we are using that to kind
of find all the submissions

00:15:16.710 --> 00:15:21.400
that come in and present that
to a Moderator in this

00:15:21.400 --> 00:15:23.580
administrator interface that
you're looking at right now.

00:15:23.580 --> 00:15:26.980
So actually, let me walk
through the full steps.

00:15:26.980 --> 00:15:30.020
So this is what happens when you
want to moderate a YouTube

00:15:30.020 --> 00:15:33.000
Direct Lite instance.

00:15:33.000 --> 00:15:35.050
You first select a playlist.

00:15:35.050 --> 00:15:36.850
YouTube Direct Lite is organized
around the concept

00:15:36.850 --> 00:15:37.700
of the playlist.

00:15:37.700 --> 00:15:41.180
So whenever you have a
submission widget on the page,

00:15:41.180 --> 00:15:43.170
that submission widget
is associated

00:15:43.170 --> 00:15:45.460
with a specific playlist.

00:15:45.460 --> 00:15:49.420
And here I just have a few
different tests over here.

00:15:49.420 --> 00:15:52.510
I believe the one that I've
been using to solicit

00:15:52.510 --> 00:15:54.670
submissions on that page is
this YouTube Direct Lite

00:15:54.670 --> 00:15:56.280
Submissions playlist.

00:15:56.280 --> 00:15:57.350
You could also just
create a brand new

00:15:57.350 --> 00:15:58.300
playlist if you'd like.

00:15:58.300 --> 00:16:02.760
And this is all making use of
the standard YouTube API calls

00:16:02.760 --> 00:16:06.020
for creating playlist and
fetching playlist information.

00:16:06.020 --> 00:16:10.120
And it's all done client side
using the cross-origin

00:16:10.120 --> 00:16:14.595
resource sharing capability
that's in many major browsers.

00:16:14.595 --> 00:16:15.900
JAREK WILKIEWICZ: Hey, Jeff.

00:16:15.900 --> 00:16:16.750
This is Jarek.

00:16:16.750 --> 00:16:18.300
I have a question
about this part.

00:16:18.300 --> 00:16:22.420
So when you started the demo,
there was an OAuth flow, and

00:16:22.420 --> 00:16:27.590
that was authorizing the
application to act on behalf

00:16:27.590 --> 00:16:29.810
of the user that was submitting
the video, right?

00:16:29.810 --> 00:16:32.370
So the videos go into
somebody's account.

00:16:32.370 --> 00:16:36.350
Now playlist management
also requires

00:16:36.350 --> 00:16:38.060
authorized access, right?

00:16:38.060 --> 00:16:42.030
So how does the OAuth flow
work for this part?

00:16:42.030 --> 00:16:45.670
Like how do you actually
configure the playlist?

00:16:45.670 --> 00:16:47.680
Because this is not the playlist
of the user, right?

00:16:47.680 --> 00:16:49.340
This is the playlist of
the administrator.

00:16:49.340 --> 00:16:50.130
JEFF POSNICK: Yeah.

00:16:50.130 --> 00:16:53.730
So if I had been really fancy, I
would have found a way to do

00:16:53.730 --> 00:16:56.740
like two different Chrome
incognito windows signed into

00:16:56.740 --> 00:17:00.560
different accounts, so I could
show a demo of Account A is

00:17:00.560 --> 00:17:02.850
the person submitting a video,
and Account B is the person

00:17:02.850 --> 00:17:04.910
who manages the playlist.

00:17:04.910 --> 00:17:07.960
So this is a little bit
of a contrived demo.

00:17:07.960 --> 00:17:11.780
And the person submitting the
video and the person managing

00:17:11.780 --> 00:17:13.170
the playlist is the
same account.

00:17:13.170 --> 00:17:16.319
And since I'm already signed
in to that account and I've

00:17:16.319 --> 00:17:20.920
already gone through the OAuth2
flow once, I don't have

00:17:20.920 --> 00:17:22.859
to go through it again
at this step.

00:17:22.859 --> 00:17:26.839
Normally, if I am an
administrator, and I haven't

00:17:26.839 --> 00:17:29.330
previously submitted a video
from the same browser session

00:17:29.330 --> 00:17:32.140
right before, I would have to
go through the OAuth2 flow

00:17:32.140 --> 00:17:35.105
once and authorize
access before I

00:17:35.105 --> 00:17:36.370
could get to this page.

00:17:36.370 --> 00:17:38.910
So definitely a great
question.

00:17:38.910 --> 00:17:44.030
But it is using the same sort
of OAuth2 protection as the

00:17:44.030 --> 00:17:45.810
other page that you
just saw was.

00:17:45.810 --> 00:17:49.410
One of the nice things about
OAuth2 is that you do not have

00:17:49.410 --> 00:17:52.300
to continuously re-log in.

00:17:52.300 --> 00:17:55.360
So this will actually remember
the first time that I allow

00:17:55.360 --> 00:17:59.890
access to my specific accounts
to this specific application.

00:17:59.890 --> 00:18:03.700
And subsequent times when I go
to the page, I'll just already

00:18:03.700 --> 00:18:05.415
automatically be logged in.

00:18:05.415 --> 00:18:07.120
And we do have the Log
Out link for those

00:18:07.120 --> 00:18:08.520
who want to log out.

00:18:08.520 --> 00:18:13.590
But it just makes it a lot
easier to use in this

00:18:13.590 --> 00:18:15.805
particular case rather than have
to remember to type in

00:18:15.805 --> 00:18:18.400
your password and click Allow
each time you go to a page.

00:18:22.450 --> 00:18:24.220
Going back to the administrator
interface, let's

00:18:24.220 --> 00:18:29.340
say that you are going to have
this playlist, and you want to

00:18:29.340 --> 00:18:34.480
start soliciting submissions for
videos that'll end up in

00:18:34.480 --> 00:18:35.460
that playlist.

00:18:35.460 --> 00:18:37.490
Clicking on that playlist will
take you to this Embed Codes

00:18:37.490 --> 00:18:38.820
tab over here.

00:18:38.820 --> 00:18:42.450
And what you get right here is
the exact iFrame code that you

00:18:42.450 --> 00:18:46.840
need to insert it into any
page, and ensure that the

00:18:46.840 --> 00:18:49.080
submissions made on that
page are associated

00:18:49.080 --> 00:18:50.840
with that given playlist.

00:18:50.840 --> 00:18:53.270
This again does not mean that
the videos will automatically

00:18:53.270 --> 00:18:55.270
appear in a playlist
as soon as they're

00:18:55.270 --> 00:18:56.230
submitted by the user.

00:18:56.230 --> 00:19:00.420
You still have to review them in
this Pending tab over here.

00:19:00.420 --> 00:19:04.970
But that's just one way of
saying if the video is

00:19:04.970 --> 00:19:08.430
approved, this is the playlist
that it should go into.

00:19:08.430 --> 00:19:12.460
And it should appear into the
Pending tab over here when I'm

00:19:12.460 --> 00:19:13.750
looking at things in
that playlist.

00:19:13.750 --> 00:19:17.030
So you can imagine you might be
a website that's running 10

00:19:17.030 --> 00:19:20.280
different submission forms
on 10 different pages for

00:19:20.280 --> 00:19:21.880
different topics.

00:19:21.880 --> 00:19:25.780
You'd separate them all into
distinct playlists and kind of

00:19:25.780 --> 00:19:30.160
segregate the work based on that
and feature the videos

00:19:30.160 --> 00:19:31.710
separately also based on that.

00:19:31.710 --> 00:19:34.980
Because the other thing that's
available on this page is this

00:19:34.980 --> 00:19:39.590
iFrame embed code that will
allow you to put the standard

00:19:39.590 --> 00:19:42.830
YouTube playlist player
onto any web page.

00:19:42.830 --> 00:19:45.935
And that playlist player will
automatically show all the

00:19:45.935 --> 00:19:49.110
featured videos for
a given playlist.

00:19:49.110 --> 00:19:51.296
So that's what we have right
over here for instance.

00:19:51.296 --> 00:19:52.130
Let me see.

00:19:52.130 --> 00:19:57.150
On this page we have a
submission over here.

00:19:57.150 --> 00:20:00.650
And that just corresponds to
this type of playlist code.

00:20:00.650 --> 00:20:03.070
And again, it has the playlist
ID already filled in for you

00:20:03.070 --> 00:20:06.120
so you don't have to look that
up or anything like that.

00:20:06.120 --> 00:20:09.180
For folks who don't want to
continually go back to the

00:20:09.180 --> 00:20:11.410
Pending tab and check for new
submissions, we also have a

00:20:11.410 --> 00:20:15.970
link to an RSS feed that will
automatically be updated any

00:20:15.970 --> 00:20:17.950
time there's a new submission
that comes

00:20:17.950 --> 00:20:19.570
into to a given playlist.

00:20:19.570 --> 00:20:22.590
So that's another really useful
feature that you could

00:20:22.590 --> 00:20:25.090
use to keep track of what's
being submitted.

00:20:25.090 --> 00:20:28.410
So I'm actually thinking that
the playlist I submitted the

00:20:28.410 --> 00:20:32.610
video to might be slightly
different than this one.

00:20:32.610 --> 00:20:34.510
Yeah.

00:20:34.510 --> 00:20:39.750
So I might not be able to find
the exact playlist over here.

00:20:39.750 --> 00:20:43.990
And maybe over here is one.

00:20:43.990 --> 00:20:44.750
Here we go.

00:20:44.750 --> 00:20:45.220
OK.

00:20:45.220 --> 00:20:47.280
So this just gives
you a demo of--

00:20:47.280 --> 00:20:49.290
I'm just using a slightly
different playlist.

00:20:49.290 --> 00:20:51.480
But it gives you an idea
of what the admin

00:20:51.480 --> 00:20:52.780
interface looks like.

00:20:52.780 --> 00:20:55.340
So there's no pending videos
in this particular case.

00:20:55.340 --> 00:20:58.300
But I have three videos that
I previously approved.

00:20:58.300 --> 00:21:00.260
They had been submitted.

00:21:00.260 --> 00:21:02.190
I could play them back
again in here.

00:21:02.190 --> 00:21:05.430
If I realize, hey, I don't
actually want this video

00:21:05.430 --> 00:21:07.800
approved, I could
click on Reject.

00:21:07.800 --> 00:21:08.150
See?

00:21:08.150 --> 00:21:10.610
It disappears, a nice little--

00:21:10.610 --> 00:21:12.620
I think that is--

00:21:12.620 --> 00:21:14.050
I don't even think
that's jQuery UI.

00:21:14.050 --> 00:21:17.430
I think that's just standard
jQuery and some animation with

00:21:17.430 --> 00:21:21.010
the CSS effects to get it to
disappear into that rejected

00:21:21.010 --> 00:21:23.076
tab over there.

00:21:23.076 --> 00:21:24.310
JEREMY: Hey, Jeff.

00:21:24.310 --> 00:21:24.830
I have a quick question.

00:21:24.830 --> 00:21:26.100
JEFF POSNICK:

00:21:26.100 --> 00:21:29.560
JEREMY: So you're pulling these
videos into the approved

00:21:29.560 --> 00:21:32.990
list by a specialized keyword
that associates it with the

00:21:32.990 --> 00:21:33.930
playlist, right?

00:21:33.930 --> 00:21:34.690
JEFF POSNICK: Yeah.

00:21:34.690 --> 00:21:39.050
JEREMY: So when you're rejecting
them, I'm guessing

00:21:39.050 --> 00:21:43.350
because you're now signed in
only as the admin with OAuth2,

00:21:43.350 --> 00:21:45.670
you can't obviously remove
that keyword, right?

00:21:45.670 --> 00:21:53.440
So how are you moving it from
pending to rejected?

00:21:53.440 --> 00:21:54.610
JEFF POSNICK: Yeah.

00:21:54.610 --> 00:21:55.820
I'm cheating a little bit.

00:21:55.820 --> 00:22:02.280
So the way I do that is by
creating a new playlist in the

00:22:02.280 --> 00:22:07.330
administrator's accounts that
I think has a name, YTDL

00:22:07.330 --> 00:22:09.020
Rejected Videos.

00:22:09.020 --> 00:22:13.220
And every time you reject a
video, that video gets added

00:22:13.220 --> 00:22:14.570
to that rejected videos
playlist.

00:22:14.570 --> 00:22:16.150
And this is a private playlist,
so it's not really

00:22:16.150 --> 00:22:17.150
visible to anybody else.

00:22:17.150 --> 00:22:20.030
You don't have to worry about
it showing up anywhere.

00:22:20.030 --> 00:22:23.120
And I'm really just kind of
overloading the use of a

00:22:23.120 --> 00:22:27.520
playlist in this case to act as
a kind of a glorified data

00:22:27.520 --> 00:22:28.820
store, let's say.

00:22:28.820 --> 00:22:30.855
And it's a way of keeping track
of all the videos that

00:22:30.855 --> 00:22:33.420
have previously been
marked as rejected.

00:22:33.420 --> 00:22:35.860
And it's very similar to
how we populate the

00:22:35.860 --> 00:22:37.800
approved tab, also.

00:22:37.800 --> 00:22:40.360
We read the video that's
currently in the given

00:22:40.360 --> 00:22:43.310
playlist in the approved
tab, and we display

00:22:43.310 --> 00:22:44.330
them all over here.

00:22:44.330 --> 00:22:47.550
So for the rejected tab, we just
show all the videos that

00:22:47.550 --> 00:22:51.330
are in that particular rejected
playlist that

00:22:51.330 --> 00:22:52.840
happened to have been
tagged with the

00:22:52.840 --> 00:22:54.981
playlist ID in question.

00:22:54.981 --> 00:23:02.460
So not necessarily the
most let's say--

00:23:02.460 --> 00:23:02.720
I don't know.

00:23:02.720 --> 00:23:05.910
I don't know what derogatory
term I should use.

00:23:05.910 --> 00:23:07.180
JEREMY: No, no, it's
interesting.

00:23:07.180 --> 00:23:07.652
JEFF POSNICK: It's not the thing
I'm most proud of in the

00:23:07.652 --> 00:23:09.100
world, but it was one way of
working around the fact that

00:23:09.100 --> 00:23:13.010
we don't have any real
server-side store of data.

00:23:13.010 --> 00:23:15.275
So we kind of opened the
link to the playlist.

00:23:15.275 --> 00:23:18.780
JEREMY: So also the OAuth2
permission is not kept

00:23:18.780 --> 00:23:19.470
anywhere, right?

00:23:19.470 --> 00:23:22.620
So you don't really have the
ability to later on go back

00:23:22.620 --> 00:23:26.020
and say, add a tag, or remove a
tag, or add a developer tag

00:23:26.020 --> 00:23:27.100
to the video, right?

00:23:27.100 --> 00:23:29.720
The flow is actually forgotten
as soon as the

00:23:29.720 --> 00:23:31.645
user leaves the browser?

00:23:31.645 --> 00:23:32.220
JEFF POSNICK: Right.

00:23:32.220 --> 00:23:34.750
So YouTube Direct was a little
bit different in that we would

00:23:34.750 --> 00:23:37.140
keep track of the OAuth--

00:23:37.140 --> 00:23:40.330
or I guess in that case it
was AuthSub credentials--

00:23:40.330 --> 00:23:42.930
for the user who submitted
the video.

00:23:42.930 --> 00:23:45.560
And then when we approved the
video, we would have those

00:23:45.560 --> 00:23:47.860
credentials of the
submitting user.

00:23:47.860 --> 00:23:51.090
And we could use them to, for
instance, make an update to

00:23:51.090 --> 00:23:53.500
the video's description, to say,
hey, this video has been

00:23:53.500 --> 00:23:58.110
approved and added to this
playlist, or do some other

00:23:58.110 --> 00:23:59.230
things like that.

00:23:59.230 --> 00:24:00.990
We don't have that capability
in YouTube

00:24:00.990 --> 00:24:02.910
Direct Lite, though.

00:24:02.910 --> 00:24:07.200
The OAuth2 credentials are not
stored anywhere except in

00:24:07.200 --> 00:24:08.770
whatever Google infrastructure
stores

00:24:08.770 --> 00:24:11.100
everybody's OAuth2 approvals.

00:24:11.100 --> 00:24:12.830
So it's not something
we have access to.

00:24:12.830 --> 00:24:16.800
And I kind of had to think a
little bit to find a viable

00:24:16.800 --> 00:24:19.960
work around for that use case.

00:24:19.960 --> 00:24:24.370
So I think that gives a pretty
good, decent overview of how

00:24:24.370 --> 00:24:26.410
you actually use YouTube
Direct Lite.

00:24:26.410 --> 00:24:28.450
As I mentioned, you could check
out the code yourself

00:24:28.450 --> 00:24:31.670
and deploy it to a local web
server and customize the CSS

00:24:31.670 --> 00:24:33.980
or JavaScript or HTML, if
you want things to look

00:24:33.980 --> 00:24:34.850
differently.

00:24:34.850 --> 00:24:37.960
But I wanted to talk a little
bit about how we actually

00:24:37.960 --> 00:24:42.110
built it and run through some
of the code as well.

00:24:42.110 --> 00:24:45.780
So YouTube Direct Lite, as I
mentioned at the top, is only

00:24:45.780 --> 00:24:48.850
possible because we added
support for Cross-Origin

00:24:48.850 --> 00:24:52.990
Resource Sharing, or CORS,
to the YouTube data API.

00:24:52.990 --> 00:25:00.170
And that means that we can now
make authenticated and rights.

00:25:00.170 --> 00:25:03.740
I guess read rights that YouTube
API calls directly

00:25:03.740 --> 00:25:05.310
from the browser
in JavaScript.

00:25:05.310 --> 00:25:08.030
So folks are familiar with
other ways of talking to

00:25:08.030 --> 00:25:11.800
YouTube API, like using
something like JSONP, where

00:25:11.800 --> 00:25:16.030
you had a way of getting
read-only data by inserting a

00:25:16.030 --> 00:25:19.920
script tag onto the page that
would end up executing a

00:25:19.920 --> 00:25:21.240
callback function.

00:25:21.240 --> 00:25:23.890
That all kind of works.

00:25:23.890 --> 00:25:25.850
It's not really--

00:25:25.850 --> 00:25:28.520
I wouldn't say it's an abuse of
HTML or anything like that.

00:25:28.520 --> 00:25:30.880
It's a very well-established
practice.

00:25:30.880 --> 00:25:33.850
But it's not really something
native to the browser.

00:25:33.850 --> 00:25:35.790
It's not using native JavaScript
constructs.

00:25:35.790 --> 00:25:40.015
It's not using an XML HTTP
request, which is what CORS

00:25:40.015 --> 00:25:42.340
does, for instance.

00:25:42.340 --> 00:25:46.900
So now that that's available
in the API for any browser

00:25:46.900 --> 00:25:49.580
that supports it, and that
is most modern browsers.

00:25:49.580 --> 00:25:52.390
It's not Internet Explorer
9, unfortunately.

00:25:52.390 --> 00:25:55.480
I think Internet Explorer 10 is
going to have full support

00:25:55.480 --> 00:25:58.404
for the CORS standard.

00:25:58.404 --> 00:26:01.290
But in any supported browser
we make heavy use of that.

00:26:01.290 --> 00:26:04.370
We're actually just
using jQuery.

00:26:04.370 --> 00:26:08.700
JQuery is AJAX wrapper around
XML HTTP requests to do a lot

00:26:08.700 --> 00:26:09.790
of our CORS calls.

00:26:09.790 --> 00:26:12.160
I'll show you some of that
code a little bit later.

00:26:12.160 --> 00:26:14.840
Lots of jQuery everywhere.

00:26:14.840 --> 00:26:20.030
We're actually using some local
caching using the local

00:26:20.030 --> 00:26:23.780
storage capabilities for
HTML5, using our former

00:26:23.780 --> 00:26:28.720
colleague Pamela Fox's LSCache
JavaScript library, which has

00:26:28.720 --> 00:26:31.400
a really nice way of expiring
data after a certain point in

00:26:31.400 --> 00:26:34.710
time and kind of making local
storage work like memcache.

00:26:34.710 --> 00:26:36.440
So that's been kind of cool.

00:26:36.440 --> 00:26:37.990
And that was really
useful to use.

00:26:37.990 --> 00:26:43.045
And I'm also using RequireJS,
which is a framework for kind

00:26:43.045 --> 00:26:45.180
of breaking JavaScript code
into a bunch of different

00:26:45.180 --> 00:26:51.100
modules and specify module
dependencies and refactoring

00:26:51.100 --> 00:26:55.230
my code that was not initially
written to RequireJS to start

00:26:55.230 --> 00:26:59.970
supporting RequireJS was a
little bit of a headache.

00:26:59.970 --> 00:27:02.200
But it was definitely something
I should have done

00:27:02.200 --> 00:27:02.940
from the beginning.

00:27:02.940 --> 00:27:04.050
So I'm glad I did it.

00:27:04.050 --> 00:27:06.540
And it kind of has resulted in
a lot cleaner code and more

00:27:06.540 --> 00:27:08.540
modularized code.

00:27:08.540 --> 00:27:11.590
So I highly recommend RequireJS
for folks who might

00:27:11.590 --> 00:27:16.260
be thinking of tackling
similar projects.

00:27:16.260 --> 00:27:20.130
And I wanted to also mention,
we're using the YouTube player

00:27:20.130 --> 00:27:22.770
and upload widget, libraries
that I already

00:27:22.770 --> 00:27:23.800
talked about before.

00:27:23.800 --> 00:27:27.270
But we're kind of using the
standard interface there.

00:27:27.270 --> 00:27:31.360
So I wanted to run through
some code before we do

00:27:31.360 --> 00:27:38.160
anything else and pull up code
from the Google Code Project.

00:27:38.160 --> 00:27:42.520
And I wanted to first talk
about how we're using the

00:27:42.520 --> 00:27:44.820
upload widgets.

00:27:44.820 --> 00:27:47.590
So this is something that might
be a little bit new to

00:27:47.590 --> 00:27:50.090
folks because we just
announced this

00:27:50.090 --> 00:27:51.560
a few months ago.

00:27:56.310 --> 00:28:00.130
And you might not have seen very
much sample code of how

00:28:00.130 --> 00:28:02.410
to use the upload widget
in a real world

00:28:02.410 --> 00:28:03.760
setting, for instance.

00:28:03.760 --> 00:28:07.230
So I wanted to show
that off now.

00:28:07.230 --> 00:28:09.860
And a lot of this at the top
right over here, this is just

00:28:09.860 --> 00:28:12.410
something that has to do
with how RequireJS--

00:28:12.410 --> 00:28:16.810
line 17 over here-- how
RequireJS handles module

00:28:16.810 --> 00:28:17.160
dependencies.

00:28:17.160 --> 00:28:20.910
We're just basically saying that
this module depends on

00:28:20.910 --> 00:28:21.550
all these other modules.

00:28:21.550 --> 00:28:24.340
So don't worry too much
about that over here.

00:28:24.340 --> 00:28:29.340
But I wanted to point out how
we're initializing the code

00:28:29.340 --> 00:28:31.810
for the upload widget.

00:28:31.810 --> 00:28:35.820
And what we're doing is actually
checking to see if

00:28:35.820 --> 00:28:41.340
the YT upload widget namespace
is currently defined.

00:28:41.340 --> 00:28:45.040
We don't want to keep loading
in the external JavaScript

00:28:45.040 --> 00:28:48.060
definition for the
upload widget

00:28:48.060 --> 00:28:50.540
interface multiple times.

00:28:50.540 --> 00:28:53.560
We only want it to happen the
first time, if it's necessary.

00:28:53.560 --> 00:28:55.720
So we're kind of making
use of lazy loading.

00:28:55.720 --> 00:28:58.300
And we're making use of this
check to ensure that we only

00:28:58.300 --> 00:28:59.430
load it once.

00:28:59.430 --> 00:29:03.140
So if it is not already defined,
the first thing we do

00:29:03.140 --> 00:29:06.140
is initialize this callback
over here.

00:29:06.140 --> 00:29:09.720
This is the standard callback
that gets invoked whenever the

00:29:09.720 --> 00:29:14.820
code for both the upload widget
and the player iFrame

00:29:14.820 --> 00:29:17.310
API code is loaded.

00:29:17.310 --> 00:29:20.700
And it's window on YouTube
iFrame API ready.

00:29:20.700 --> 00:29:23.440
And you can see that we have
this callback over here that

00:29:23.440 --> 00:29:25.550
says load upload widget.

00:29:25.550 --> 00:29:27.930
That's our function a little
bit down over here.

00:29:27.930 --> 00:29:31.280
And what we next do
is make use of

00:29:31.280 --> 00:29:32.760
jQuery's get.Script method.

00:29:32.760 --> 00:29:35.950
And this basically will just
insert a script tag into the

00:29:35.950 --> 00:29:41.740
DOM for us with a source that
points to this URL.

00:29:41.740 --> 00:29:44.860
One interesting thing I wanted
to mention about the URL, you

00:29:44.860 --> 00:29:48.590
notice that there's no
HTTP or HTTPS prefix.

00:29:48.590 --> 00:29:51.260
It's just this slash,
slash over here.

00:29:51.260 --> 00:29:55.340
This is what I recommend
everybody start doing.

00:29:55.340 --> 00:29:58.260
And if they don't do this, then
at very least, if you're

00:29:58.260 --> 00:30:01.300
going to hardcode something, you
should put hardcode HTTPS

00:30:01.300 --> 00:30:03.010
rather than HTTP.

00:30:03.010 --> 00:30:06.340
And using the slash slash, this
is a little interesting.

00:30:06.340 --> 00:30:07.930
This is called--

00:30:07.930 --> 00:30:11.350
I think it's called scheme
relative addressing.

00:30:11.350 --> 00:30:18.480
And if your host web page is
accessed via HTTP, then this

00:30:18.480 --> 00:30:20.750
will tell the browser, hey,
it's OK to load this

00:30:20.750 --> 00:30:22.790
resource via HTTP.

00:30:22.790 --> 00:30:26.105
And if your host web page is
accessed via HTTPS, though,

00:30:26.105 --> 00:30:30.660
just know, hey, I need to load
the HTTPS version of this

00:30:30.660 --> 00:30:33.120
resource rather than
the HTTP version.

00:30:33.120 --> 00:30:35.720
And this is really important to
avoid, like mixed-content

00:30:35.720 --> 00:30:39.040
warnings that most modern
browsers will present to you

00:30:39.040 --> 00:30:40.270
if a page tries--

00:30:40.270 --> 00:30:44.030
if a page is accessed via HTTPS
initially but then tries

00:30:44.030 --> 00:30:45.850
to later on load
via JavaScript,

00:30:45.850 --> 00:30:48.090
something via HTTP.

00:30:48.090 --> 00:30:51.210
So rather than having to worry
about checking to see what the

00:30:51.210 --> 00:30:53.890
scheme of the host page is or
anything like that, just make

00:30:53.890 --> 00:30:59.786
use of this scheme relative
addressing and thank me later.

00:30:59.786 --> 00:31:03.490
So what we're going to do over
here is if we already have

00:31:03.490 --> 00:31:06.920
loaded the code before, we'll
just call web cam upload,

00:31:06.920 --> 00:31:09.570
uploaded to widget directly, and
that's the same callback

00:31:09.570 --> 00:31:11.800
that would happen after it
gets loaded over here.

00:31:11.800 --> 00:31:15.040
So whatever this function is
called, we know that our Y2

00:31:15.040 --> 00:31:17.510
upload widget namespace
is available.

00:31:17.510 --> 00:31:23.460
And the way the upload widget's
API actually works is

00:31:23.460 --> 00:31:27.250
somewhat similar to the player
API, for those who are

00:31:27.250 --> 00:31:29.270
familiar with that.

00:31:29.270 --> 00:31:32.420
You initialize it by calling
the Y2 upload widget

00:31:32.420 --> 00:31:37.570
constructor and pass in the
name of the ID of the div

00:31:37.570 --> 00:31:40.800
element that's going to be
replaced with the actual

00:31:40.800 --> 00:31:42.130
upload widget.

00:31:42.130 --> 00:31:46.110
And you pass in some event
definitions over here.

00:31:46.110 --> 00:31:50.500
And this is saying when the
upload widget is ready, I want

00:31:50.500 --> 00:31:53.490
to set the video title to
whatever the default title is.

00:31:53.490 --> 00:31:57.390
The description, I want to set
the keywords for the video to

00:31:57.390 --> 00:32:00.770
this particular playlist ID.

00:32:00.770 --> 00:32:04.440
This is kind of the whole
keyword-based searching that

00:32:04.440 --> 00:32:06.570
we used to populate the list
of pending videos.

00:32:06.570 --> 00:32:08.800
So I need to be sure that I'm
setting the property keywords

00:32:08.800 --> 00:32:10.590
on the videos.

00:32:10.590 --> 00:32:15.360
And we also have different
methods for when the upload is

00:32:15.360 --> 00:32:18.060
complete or when there's
an error, for instance.

00:32:18.060 --> 00:32:21.360
So we just have some ways of
displaying a little message

00:32:21.360 --> 00:32:24.410
when the web cam submission's
successful or

00:32:24.410 --> 00:32:26.260
when there's an error.

00:32:26.260 --> 00:32:29.430
We're also just making use of
Google Analytics for tracking

00:32:29.430 --> 00:32:33.530
specific events, like when web
cam submission was successful

00:32:33.530 --> 00:32:36.120
or when there was an error.

00:32:36.120 --> 00:32:37.640
So that's what's going
on over there.

00:32:37.640 --> 00:32:44.590
I wanted to then pop to kind
of a quick tour through one

00:32:44.590 --> 00:32:47.126
piece of relevant CSS that
I mentioned before.

00:32:47.126 --> 00:32:48.760
JAREK WILKIEWICZ: Jeff,
before you go

00:32:48.760 --> 00:32:50.670
there, one quick question.

00:32:50.670 --> 00:32:55.410
So when the web cam widget
completes the video upload,

00:32:55.410 --> 00:32:58.830
how does the application know
about the actual video?

00:32:58.830 --> 00:33:02.980
Do you take events through
that in your code?

00:33:02.980 --> 00:33:05.280
Or this is always basically
search based?

00:33:05.280 --> 00:33:07.550
For example, can you get
the video ID somehow?

00:33:07.550 --> 00:33:08.140
JEFF POSNICK: Yeah.

00:33:08.140 --> 00:33:09.400
So sorry for not mentioning
that.

00:33:09.400 --> 00:33:11.500
Because I'm not actually making
use of the fact that

00:33:11.500 --> 00:33:14.790
the callback includes
the video ID.

00:33:14.790 --> 00:33:17.440
This event object that
gets passed in to the

00:33:17.440 --> 00:33:21.350
OnUploadSuccess is actually- you
can see, it's ignored by

00:33:21.350 --> 00:33:23.080
my callback.

00:33:23.080 --> 00:33:25.760
So I'm not looking at that or
making use of the fact that

00:33:25.760 --> 00:33:29.160
the keyword is going to help
us find the video later on.

00:33:29.160 --> 00:33:31.830
But if you're writing an
application that's using the

00:33:31.830 --> 00:33:38.260
upload widget, and you really
just want to get notified

00:33:38.260 --> 00:33:40.210
immediately--

00:33:40.210 --> 00:33:45.080
actually, immedified is kind
of a useful neologism with

00:33:45.080 --> 00:33:47.506
both of those words
put together.

00:33:47.506 --> 00:33:52.905
If you want to get immedified
about the new video ID once

00:33:52.905 --> 00:33:56.080
it's available, you can hook
up something in your

00:33:56.080 --> 00:33:58.880
OnUploadSuccess handler that'll
take a look at, I

00:33:58.880 --> 00:34:01.840
think it's event.data.videoID.

00:34:01.840 --> 00:34:04.890
But check our Docs for
the specific syntax.

00:34:04.890 --> 00:34:09.830
And you can, at that point, load
a YouTube player on the

00:34:09.830 --> 00:34:12.639
page right after the upload
succeeds where the person can

00:34:12.639 --> 00:34:13.624
then play back the video.

00:34:13.624 --> 00:34:17.850
Or you can make use of that
video ID and store it in some

00:34:17.850 --> 00:34:20.434
local database somewhere
or anything like that.

00:34:20.434 --> 00:34:22.670
So there definitely is that
functionality for

00:34:22.670 --> 00:34:23.920
those who need it.

00:34:26.670 --> 00:34:29.560
OK, So I'm going to just quickly
pop over to something

00:34:29.560 --> 00:34:31.130
of the CSS I mentioned
a little bit.

00:34:31.130 --> 00:34:34.630
And this took me a little
bit of fiddling around.

00:34:34.630 --> 00:34:37.790
For those who've played around
in CSS before, you know that

00:34:37.790 --> 00:34:42.790
it's 90% fiddling and
changing things.

00:34:42.790 --> 00:34:45.132
Actually, the Chrome--

00:34:45.132 --> 00:34:46.170
I don't know.

00:34:46.170 --> 00:34:48.949
What do we call, I guess, a
developer tools panel, is

00:34:48.949 --> 00:34:49.820
really useful for this.

00:34:49.820 --> 00:34:53.150
Because it lets you peek at the
specific CSS properties

00:34:53.150 --> 00:34:55.880
running element and change
it in real time.

00:34:55.880 --> 00:35:00.430
So instead of having to
constantly save your CSS file

00:35:00.430 --> 00:35:03.730
and then reload the page, you
could actually go in and edit

00:35:03.730 --> 00:35:06.880
the CSS properties and
immediately live in the DOM

00:35:06.880 --> 00:35:07.935
see how it affects things.

00:35:07.935 --> 00:35:10.210
So that proved very useful
for doing this.

00:35:10.210 --> 00:35:13.910
But I just wanted to point out,
this is what I ended up

00:35:13.910 --> 00:35:18.340
using to get the specific type
of thumbnails that we saw when

00:35:18.340 --> 00:35:20.480
we were playing back videos.

00:35:20.480 --> 00:35:23.990
It's making use of a few
things like absolute

00:35:23.990 --> 00:35:27.350
positioning and clipping
the video.

00:35:27.350 --> 00:35:31.370
For those who've played around
in the YouTube API before, you

00:35:31.370 --> 00:35:34.870
probably know that we still
return thumbnails that are in

00:35:34.870 --> 00:35:41.130
a 4 to 3 aspect ratio, while
most videos are in a 16 to 9

00:35:41.130 --> 00:35:42.610
aspect ratio.

00:35:42.610 --> 00:35:43.950
This is slightly annoying.

00:35:43.950 --> 00:35:47.010
But it's not really something
that we could go back and

00:35:47.010 --> 00:35:50.610
change all the thumbnails for
all the existing 4 to 3 videos

00:35:50.610 --> 00:35:53.490
out there and not break
things too much.

00:35:53.490 --> 00:35:55.720
So it's kind of a legacy
constraint that you could take

00:35:55.720 --> 00:35:58.080
advantage of CSS to
fix on your end.

00:35:58.080 --> 00:36:00.030
If you know that most of your
videos are going to 16 to 9

00:36:00.030 --> 00:36:06.560
anyway you can use this clip
property over here to cut out

00:36:06.560 --> 00:36:13.190
the top and bottom letter box
that would normally appear on

00:36:13.190 --> 00:36:17.680
your thumbnail and just show
the actual video content.

00:36:17.680 --> 00:36:20.440
So that's kind of useful for any
folks out there who've run

00:36:20.440 --> 00:36:23.190
into similar things and want
to make use of that type of

00:36:23.190 --> 00:36:27.040
CSS for displaying
your thumbnails.

00:36:27.040 --> 00:36:31.940
The other thing I wanted to talk
about was just an example

00:36:31.940 --> 00:36:35.220
of how we're doing the
CORS for talking

00:36:35.220 --> 00:36:36.450
to the YouTube API.

00:36:36.450 --> 00:36:39.440
And there's a whole bunch
of code over here.

00:36:39.440 --> 00:36:43.905
Unfortunately, I feel a little
guilty because I have a module

00:36:43.905 --> 00:36:47.920
called utils.js, and
it's 14 kilobytes.

00:36:47.920 --> 00:36:50.410
And it's much bigger than
anything else in the code.

00:36:50.410 --> 00:36:53.050
And that's always a sign that
you're in a little bit of

00:36:53.050 --> 00:36:55.840
trouble, when you have this one
big function that does a

00:36:55.840 --> 00:36:56.380
lot of things.

00:36:56.380 --> 00:36:58.920
So I probably should refactor
this a bit.

00:36:58.920 --> 00:37:00.980
Apologies that I have not.

00:37:00.980 --> 00:37:03.560
But I don't want that to stop
me from actually showing off

00:37:03.560 --> 00:37:04.850
some of the code.

00:37:04.850 --> 00:37:08.970
And what this is going
to do is define

00:37:08.970 --> 00:37:10.150
something called get Feed.

00:37:10.150 --> 00:37:14.110
And this something that's really
common for YouTube API

00:37:14.110 --> 00:37:15.350
developers out there.

00:37:15.350 --> 00:37:17.680
You want to write some
JavaScript code that will

00:37:17.680 --> 00:37:19.170
access a feed of videos.

00:37:19.170 --> 00:37:22.190
And you want to get
all the videos.

00:37:22.190 --> 00:37:25.110
Those of you familiar with the
YouTube data API know that we

00:37:25.110 --> 00:37:29.440
only return videos in a certain
maximum number of

00:37:29.440 --> 00:37:31.810
items per page, we call it.

00:37:31.810 --> 00:37:35.870
So by default, you only get
back 25 videos at once.

00:37:35.870 --> 00:37:38.150
You could use a URL parameter,
say I want to receive 50

00:37:38.150 --> 00:37:39.520
videos back.

00:37:39.520 --> 00:37:42.040
But if you're going through the
uploads feed of a given

00:37:42.040 --> 00:37:45.160
user and that user happens to
have hundreds of videos,

00:37:45.160 --> 00:37:46.750
you're not going to get all
those videos back through a

00:37:46.750 --> 00:37:48.470
single API call.

00:37:48.470 --> 00:37:50.470
And this is intentional.

00:37:50.470 --> 00:37:52.960
It's something that developers
kind of have to work around

00:37:52.960 --> 00:37:55.790
and make multiple API calls if
they want to retrieve all the

00:37:55.790 --> 00:37:57.000
data at once.

00:37:57.000 --> 00:37:58.940
And that could be a
little cumbersome.

00:37:58.940 --> 00:38:00.920
So I wanted to share
how I'm doing that.

00:38:00.920 --> 00:38:04.100
And that's in this Get Feed
function over here.

00:38:06.760 --> 00:38:11.485
So Get Feed takes the kind of
infamous options object that

00:38:11.485 --> 00:38:12.780
just has a bunch of different
properties that

00:38:12.780 --> 00:38:15.170
are set over here.

00:38:15.170 --> 00:38:18.450
And I tried to make it as
generic as possible.

00:38:18.450 --> 00:38:21.690
So I will take in a maximum
number of results.

00:38:21.690 --> 00:38:24.760
If you want to say, hey, I only
want to get 200 videos,

00:38:24.760 --> 00:38:28.620
even if there are more than
200 videos in a feed, I'm

00:38:28.620 --> 00:38:33.530
making use of getting back the
videos in JSON format, getting

00:38:33.530 --> 00:38:35.430
back the response speed in
JSON format, just because

00:38:35.430 --> 00:38:37.870
that's obviously much, much
easier to parse from

00:38:37.870 --> 00:38:41.410
JavaScript than a default
XML format.

00:38:41.410 --> 00:38:45.200
And I'm also making use of local
storage caching in this

00:38:45.200 --> 00:38:46.480
particular case.

00:38:46.480 --> 00:38:51.060
So I check to see whether
there's already an instance of

00:38:51.060 --> 00:38:53.920
that particular feed cached
in local storage

00:38:53.920 --> 00:38:54.870
in the user's browser.

00:38:54.870 --> 00:38:57.380
And if there is and it hasn't
expired, I think I have a

00:38:57.380 --> 00:39:02.560
fairly short expiration time set
for those, then I'll just

00:39:02.560 --> 00:39:03.830
return that cache version.

00:39:03.830 --> 00:39:05.420
And this is great.

00:39:05.420 --> 00:39:10.540
For instance, I'm using the
rejected video playlist quite

00:39:10.540 --> 00:39:13.930
a bit in the code and not having
to fetch that unless I

00:39:13.930 --> 00:39:16.680
know it's changed it's great.

00:39:16.680 --> 00:39:20.460
It just means that there are
that many fewer API calls, and

00:39:20.460 --> 00:39:23.960
much more responsive
user interface.

00:39:23.960 --> 00:39:27.010
So that's just handling some
of the options over here.

00:39:27.010 --> 00:39:31.710
And the actual meat of things,
the jQuery AJAX call

00:39:31.710 --> 00:39:32.630
is right over here.

00:39:32.630 --> 00:39:37.990
And this is what's going to
request the YouTube API feed.

00:39:37.990 --> 00:39:41.950
And I'm taking a look at
the response over here.

00:39:41.950 --> 00:39:43.420
I'm seeing whether
there actually is

00:39:43.420 --> 00:39:46.210
any data being returned.

00:39:46.210 --> 00:39:50.280
If there is not any data being
returned, then I could just

00:39:50.280 --> 00:39:53.200
call the callback right away
and pass in results.

00:39:53.200 --> 00:39:55.850
That means I'm at the
end of the feed.

00:39:55.850 --> 00:40:00.500
But if there is some data, then
I'm going to use this

00:40:00.500 --> 00:40:05.150
merge method in jQuery to kind
of concatenate the new data

00:40:05.150 --> 00:40:08.010
that I just got back from my
most recent API call with any

00:40:08.010 --> 00:40:09.910
collected data that I
may have gotten from

00:40:09.910 --> 00:40:11.820
previous API calls.

00:40:11.820 --> 00:40:15.470
And I'm going to check to see
whether I want to make it

00:40:15.470 --> 00:40:17.850
request for the next
page of results.

00:40:17.850 --> 00:40:21.105
And assuming I do, I call
get feed recursively.

00:40:21.105 --> 00:40:24.110
And I pass in some new options,
basically just

00:40:24.110 --> 00:40:26.920
incrementing the start index.

00:40:26.920 --> 00:40:30.090
So you get the next page
worth of results

00:40:30.090 --> 00:40:33.966
And finally, regardless, I'll
invoke this callback and pass

00:40:33.966 --> 00:40:35.315
in results.

00:40:35.315 --> 00:40:39.400
So I'm not going to say this
is necessarily the best

00:40:39.400 --> 00:40:40.690
JavaScript code in the world.

00:40:40.690 --> 00:40:43.040
But it works.

00:40:43.040 --> 00:40:47.040
And it's kind of an efficient
way of getting the entire feed

00:40:47.040 --> 00:40:48.800
from JavaScript using CORS.

00:40:48.800 --> 00:40:51.680
So feel free to borrow that
for your own purposes if

00:40:51.680 --> 00:40:56.100
that's something you think
you might want to do.

00:40:56.100 --> 00:40:58.910
So we're running a little bit
longer than I was hoping.

00:40:58.910 --> 00:41:00.280
But there was a lot
to talk about.

00:41:00.280 --> 00:41:02.180
I want to spend maybe a minute
or two just talking about some

00:41:02.180 --> 00:41:05.170
future enhancements for
YouTube Direct Lite.

00:41:05.170 --> 00:41:10.360
Let folks know where the
platform might be going.

00:41:10.360 --> 00:41:14.110
Everybody out there is kind of
interested in the new YouTube

00:41:14.110 --> 00:41:20.140
data API 3.0 that is currently
unreleased, but should be

00:41:20.140 --> 00:41:23.730
released as soon as it's
ready, more or less.

00:41:23.730 --> 00:41:29.800
So we are really eager to move
to using the YouTube API v3 in

00:41:29.800 --> 00:41:30.740
YouTube Direct Lite.

00:41:30.740 --> 00:41:33.320
It actually offers
some advantages.

00:41:33.320 --> 00:41:36.770
That basically, I spend a lot
of time talking about how

00:41:36.770 --> 00:41:38.240
great CORS is.

00:41:38.240 --> 00:41:39.360
And it is great.

00:41:39.360 --> 00:41:43.130
But we kind of have to deal with
the fact that Internet

00:41:43.130 --> 00:41:48.630
Explorer 9, and 8, and 7 don't
support CORS natively.

00:41:48.630 --> 00:41:50.180
And that's a little
bit of a bummer.

00:41:50.180 --> 00:41:52.830
Because there's obviously lots
of folks using that.

00:41:52.830 --> 00:41:56.140
With the YouTube API Version
3, there's actually a

00:41:56.140 --> 00:41:58.670
different method of
communicating with our API

00:41:58.670 --> 00:42:03.140
servers via JavaScript that
doesn't require using CORS.

00:42:03.140 --> 00:42:05.640
And it doesn't required JSONP.

00:42:05.640 --> 00:42:07.800
It allows for a fully
authenticated

00:42:07.800 --> 00:42:09.460
right access to API.

00:42:09.460 --> 00:42:10.970
It's really nifty.

00:42:10.970 --> 00:42:14.730
So I'm kind of eager to take
advantage of that and also

00:42:14.730 --> 00:42:17.130
make YouTube Direct Lite one of
the flagship applications

00:42:17.130 --> 00:42:21.410
that are using Version
3 of the API.

00:42:21.410 --> 00:42:24.920
So looking forward to
upgrade to that.

00:42:24.920 --> 00:42:27.220
Those of you who end up looking
through the code will

00:42:27.220 --> 00:42:31.210
kind of note that I have this
weird kind of routing scheme

00:42:31.210 --> 00:42:32.200
set up for URLs.

00:42:32.200 --> 00:42:36.490
Everything's based on URL
fragments for redirecting to

00:42:36.490 --> 00:42:37.350
different pages.

00:42:37.350 --> 00:42:38.220
And I have some

00:42:38.220 --> 00:42:39.800
modules set up for RequireJS.

00:42:39.800 --> 00:42:43.260
But I'm not really using
one of the kind of--

00:42:43.260 --> 00:42:46.920
I don't know that there's any
standard MVC framework for

00:42:46.920 --> 00:42:47.760
JavaScript right now.

00:42:47.760 --> 00:42:50.020
Because it seems like there's
three or four kind of

00:42:50.020 --> 00:42:50.710
competing ones.

00:42:50.710 --> 00:42:53.840
And they're all popular
for their own reasons.

00:42:53.840 --> 00:42:57.020
So I really probably should
migrate the code to use one of

00:42:57.020 --> 00:43:01.700
those and make things a little
bit more, I guess, industry

00:43:01.700 --> 00:43:04.580
standard and less just me
hacking together a solution

00:43:04.580 --> 00:43:07.020
that probably already exists
in a more elegant way.

00:43:07.020 --> 00:43:09.830
So that's another thing I'm
looking at for the future.

00:43:09.830 --> 00:43:12.680
And finally, just
internationalization.

00:43:12.680 --> 00:43:16.820
Unfortunately, I didn't have
time to add in an easy fashion

00:43:16.820 --> 00:43:19.440
to YouTube Direct Lite
for this release.

00:43:19.440 --> 00:43:22.040
Ideally, all the strings in
the interface would be

00:43:22.040 --> 00:43:23.690
specified in some
external file.

00:43:23.690 --> 00:43:27.385
Or it should be really easy to
swap in new files that have

00:43:27.385 --> 00:43:30.610
many different translations for
different languages and

00:43:30.610 --> 00:43:33.180
use the browser to type what
the current language is and

00:43:33.180 --> 00:43:34.710
display the appropriate
strings to

00:43:34.710 --> 00:43:37.920
users based on that.

00:43:37.920 --> 00:43:39.940
That's a really important thing
that I did not have time

00:43:39.940 --> 00:43:42.685
to do, but I would like
to do in the future.

00:43:42.685 --> 00:43:44.750
JEREMY: Hey, Jeff.

00:43:44.750 --> 00:43:47.850
Another one that I think
is pretty neat

00:43:47.850 --> 00:43:50.720
is the mobile stuff.

00:43:50.720 --> 00:43:53.400
You'd mentioned that you were
thinking about when v3 comes

00:43:53.400 --> 00:43:57.510
out, kind of porting over what
was done with YouTube Direct

00:43:57.510 --> 00:44:01.430
for the Android and iOS.

00:44:01.430 --> 00:44:02.630
Would you mind talking
about that?

00:44:02.630 --> 00:44:04.240
Because I know I have some
people that are very

00:44:04.240 --> 00:44:04.960
interested in that.

00:44:04.960 --> 00:44:05.880
JEFF POSNICK: Sure.

00:44:05.880 --> 00:44:11.230
So YouTube Direct had a
corresponding iOS and Android

00:44:11.230 --> 00:44:16.310
application that we wrote that
allowed folks to basically

00:44:16.310 --> 00:44:20.410
look at all the available--

00:44:20.410 --> 00:44:23.520
I guess we were calling them
assignments in YouTube Direct.

00:44:23.520 --> 00:44:26.550
But basically it's different
playlists that are available

00:44:26.550 --> 00:44:27.230
to submit to.

00:44:27.230 --> 00:44:29.890
Choose the playlist and then
choose a video that's either

00:44:29.890 --> 00:44:34.970
local on the storage of your
phone or record a new video

00:44:34.970 --> 00:44:38.330
using the built-in camera on
your phone and then submit

00:44:38.330 --> 00:44:42.930
that video for consideration
in a given playlist.

00:44:42.930 --> 00:44:47.910
And that's not something that
we have ported to work with

00:44:47.910 --> 00:44:50.010
YouTube Direct Lite
backends yet.

00:44:50.010 --> 00:44:52.440
Conceptually, it's not
very difficult.

00:44:52.440 --> 00:44:55.480
I mean, really, all we need to
do is add the perfect keyword

00:44:55.480 --> 00:45:00.100
to each video when it gets
submitted and kind of change

00:45:00.100 --> 00:45:02.880
the UI around a little bit to
take into account the fact

00:45:02.880 --> 00:45:05.010
that we're reading the playlist
from a slightly

00:45:05.010 --> 00:45:06.210
different source.

00:45:06.210 --> 00:45:08.560
But I think one of
the points--

00:45:08.560 --> 00:45:11.170
the code for both of those
are a little bit old.

00:45:11.170 --> 00:45:13.290
So they built on Version
2 of the API.

00:45:13.290 --> 00:45:15.550
We're really excited
about Version 3.

00:45:15.550 --> 00:45:19.030
And one of the reasons is
because there's a really great

00:45:19.030 --> 00:45:23.300
Android library that talks to
Version 3 of the API, along

00:45:23.300 --> 00:45:25.000
with other Google APIs.

00:45:25.000 --> 00:45:28.560
And it would really make sense
to kind of hold off on

00:45:28.560 --> 00:45:31.400
updating the code for those
applications until we could

00:45:31.400 --> 00:45:33.380
rewrite them for Version 3.

00:45:33.380 --> 00:45:35.780
So that's kind of the long-term
plan for those

00:45:35.780 --> 00:45:37.370
applications.

00:45:37.370 --> 00:45:38.590
It's a really exciting
use case.

00:45:38.590 --> 00:45:40.025
And we do want to support
local submissions.

00:45:42.895 --> 00:45:43.869
JEREMY: Cool.

00:45:43.869 --> 00:45:47.320
Did you guys want to jump into
questions really quickly?

00:45:47.320 --> 00:45:48.601
JEFF POSNICK: Sure.

00:45:48.601 --> 00:45:49.340
JEREMY: All right.

00:45:49.340 --> 00:45:50.750
So we had a couple.

00:45:50.750 --> 00:45:54.070
I think they're mainly actually
for YouTube Direct.

00:45:54.070 --> 00:45:57.240
So I don't know--

00:45:57.240 --> 00:45:58.600
well, I'll read them off.

00:45:58.600 --> 00:46:00.710
And we can kind of discuss
them a little bit.

00:46:00.710 --> 00:46:03.790
The first one was kind of asking
to run through step by

00:46:03.790 --> 00:46:06.250
step using Eclipse and
running the software.

00:46:06.250 --> 00:46:08.585
But that's obviously
for YouTube Direct.

00:46:08.585 --> 00:46:09.245
JEFF POSNICK: Right.

00:46:09.245 --> 00:46:10.400
And that's a common--

00:46:10.400 --> 00:46:12.250
JEREMY: We do have some great
tutorials on that.

00:46:12.250 --> 00:46:14.765
But again, we're kind of
focusing on YouTube Direct

00:46:14.765 --> 00:46:17.700
Lite here, where you don't
have to do that.

00:46:17.700 --> 00:46:18.460
It's a lot easier.

00:46:18.460 --> 00:46:20.900
JEFF POSNICK: Sorry, and I just
want to point out that's

00:46:20.900 --> 00:46:22.410
completely understandable.

00:46:22.410 --> 00:46:25.780
The fact that folks needed to
use Eclipse to deploy YouTube

00:46:25.780 --> 00:46:28.240
Direct is a real big barrier.

00:46:28.240 --> 00:46:30.550
And I'm sorry about that.

00:46:30.550 --> 00:46:31.920
We actually do have
an AND script that

00:46:31.920 --> 00:46:32.570
you could also use.

00:46:32.570 --> 00:46:35.250
But using AND for folks who
don't know how to use Eclipse

00:46:35.250 --> 00:46:39.175
is kind of like saying, OK,
well, maybe you're not going

00:46:39.175 --> 00:46:40.850
to mountain climb, but you
should go snorkel instead.

00:46:40.850 --> 00:46:44.830
I mean, both are very
difficult to do.

00:46:44.830 --> 00:46:47.460
So I would really suggest, if
you're getting stuck on

00:46:47.460 --> 00:46:51.610
YouTube Direct deployment, try
YouTube Direct Lite instead.

00:46:51.610 --> 00:46:54.060
It's a lot simpler to
get started with.

00:46:57.730 --> 00:47:02.810
JEREMY: So again, this one's
a little bit focused

00:47:02.810 --> 00:47:03.740
on the other one.

00:47:03.740 --> 00:47:07.110
But do I have to run
NoJS for this?

00:47:07.110 --> 00:47:09.750
If yes, please suggest
some host on this

00:47:09.750 --> 00:47:11.792
aside from App Engine.

00:47:11.792 --> 00:47:15.430
JEFF POSNICK: So you do not
need to run NoJS for this.

00:47:15.430 --> 00:47:20.350
You can make use of the fact
that we are hosting kind of I

00:47:20.350 --> 00:47:23.110
guess what we're calling the
reference implementation of

00:47:23.110 --> 00:47:28.160
YouTube Direct Lite for
everybody to use on an App

00:47:28.160 --> 00:47:30.420
Engine instance, which just
happens to be App Engine.

00:47:30.420 --> 00:47:33.220
But it could be any static--

00:47:33.220 --> 00:47:36.420
any web server that's capable of
serving out static HTML and

00:47:36.420 --> 00:47:38.160
JavaScript and CSS.

00:47:38.160 --> 00:47:41.770
So if you do not want to host
anything, you don't have to.

00:47:41.770 --> 00:47:47.040
You can just point the new
iFrame source to the specific

00:47:47.040 --> 00:47:48.890
reference implementation URL.

00:47:48.890 --> 00:47:50.980
And that's the URL that you'll
get from the Admin Control

00:47:50.980 --> 00:47:53.470
panel when you create
a new playlist.

00:47:53.470 --> 00:47:56.300
So you don't have to
run anything in

00:47:56.300 --> 00:47:57.090
particular on your end.

00:47:57.090 --> 00:48:00.690
If you did want to host your own
version, then you can use

00:48:00.690 --> 00:48:06.670
any standard HTTP server
to serve those files.

00:48:06.670 --> 00:48:10.570
There's absolutely nothing
specific to the code that

00:48:10.570 --> 00:48:15.890
would make it run on Apache and
not like [? 8, Lite, ?]

00:48:15.890 --> 00:48:18.496
HTTP or anything like that.

00:48:18.496 --> 00:48:20.060
It should be completely
agnostic.

00:48:20.060 --> 00:48:22.790
So feel free to use whatever
your existing platform is,

00:48:22.790 --> 00:48:24.960
including App Engine if you
happen to be using App Engine

00:48:24.960 --> 00:48:27.240
for other things.

00:48:27.240 --> 00:48:29.000
JEREMY: Great.

00:48:29.000 --> 00:48:32.910
So we have two more,
or three more.

00:48:32.910 --> 00:48:36.085
And this is actually a reason
you should use YouTube Direct

00:48:36.085 --> 00:48:39.550
Lite. "In YouTube Direct flow,
I get the following error.

00:48:39.550 --> 00:48:43.848
It's around AuthSub, the target
path prefix, even

00:48:43.848 --> 00:48:48.160
though I authenticated my Google
domains in the panel.

00:48:48.160 --> 00:48:52.020
Will Lite version offer easier
and less buggy authentication

00:48:52.020 --> 00:48:52.692
mode?"

00:48:52.692 --> 00:48:53.350
JEFF POSNICK: Yeah.

00:48:53.350 --> 00:48:57.960
So using the Lite version, if
you make use of the reference

00:48:57.960 --> 00:49:00.420
implementation, then you don't
have to worry about setting up

00:49:00.420 --> 00:49:02.380
anything having to do OAuth2.

00:49:02.380 --> 00:49:04.570
It's already set up for you.

00:49:04.570 --> 00:49:06.710
You just have to add that
iFrame to your page.

00:49:06.710 --> 00:49:09.850
So in that sense, yes, it'll
be much, much easier.

00:49:09.850 --> 00:49:12.970
To talk the specific error
that you were seeing with

00:49:12.970 --> 00:49:16.360
YouTube Direct, I have a feeling
that it just has--

00:49:16.360 --> 00:49:19.240
I don't want to point to user
error in this particular case,

00:49:19.240 --> 00:49:22.710
but I have a feeling that when
entering the specific

00:49:22.710 --> 00:49:27.320
redirection URL, the page where
you set up AuthSub,

00:49:27.320 --> 00:49:30.210
probably something was
entered incorrectly.

00:49:30.210 --> 00:49:34.140
And sometimes this happens when
you specify HTTP apps

00:49:34.140 --> 00:49:36.243
instead of HTTP or vice versa.

00:49:38.870 --> 00:49:41.650
I can't necessarily debug
exactly what's going on.

00:49:41.650 --> 00:49:46.310
But the one thing that you do
have to set up is, if you are

00:49:46.310 --> 00:49:50.400
running your own instance of the
YouTube Direct Lite code,

00:49:50.400 --> 00:49:54.810
you do need to in that case
register your own OAuth2

00:49:54.810 --> 00:49:59.740
client ID and have that
inserted into the

00:49:59.740 --> 00:50:02.020
configuration ahead of time.

00:50:02.020 --> 00:50:05.620
So there is a process where
using the Google API's console

00:50:05.620 --> 00:50:10.310
and setting up OAuth2 with a new
project and putting that

00:50:10.310 --> 00:50:13.280
into the configuration--

00:50:13.280 --> 00:50:14.790
I think it's pretty
easy to do.

00:50:14.790 --> 00:50:18.610
I mean, it's not the
same process as

00:50:18.610 --> 00:50:19.450
doing the AuthSub release.

00:50:19.450 --> 00:50:22.070
So if you found AuthSub's set up
to be confusing, maybe the

00:50:22.070 --> 00:50:24.510
OAuth2 set up would be
a little bit easier.

00:50:24.510 --> 00:50:27.780
And we have plenty of good
tutorials online

00:50:27.780 --> 00:50:30.311
for how to do that.

00:50:30.311 --> 00:50:31.690
JEREMY: Great.

00:50:31.690 --> 00:50:34.650
And then the most important
question, "Is YouTube

00:50:34.650 --> 00:50:36.650
Developer Relations hiring?"

00:50:36.650 --> 00:50:39.700
JAREK WILKIEWICZ: Yes,
we are hiring.

00:50:39.700 --> 00:50:42.290
In fact, both YouTube Developer
Relations and Google

00:50:42.290 --> 00:50:44.040
Developer Relations.

00:50:44.040 --> 00:50:45.840
The place to look for
more information is

00:50:45.840 --> 00:50:48.180
developers.google.com/jobs.

00:50:48.180 --> 00:50:51.910
And you can see all the
positions that we have listed,

00:50:51.910 --> 00:50:53.260
the types of positions.

00:50:53.260 --> 00:50:56.010
So if you're interested,
please check out

00:50:56.010 --> 00:51:01.122
developers.google.com/jobs,
and apply.

00:51:01.122 --> 00:51:02.956
JEREMY: Great.

00:51:02.956 --> 00:51:05.910
Well, Jeff, thanks so much for
putting this together.

00:51:05.910 --> 00:51:07.090
I think it was really helpful.

00:51:07.090 --> 00:51:09.370
And there was lots
of great answers

00:51:09.370 --> 00:51:11.125
for some of my questions.

00:51:11.125 --> 00:51:13.665
JEFF POSNICK: Thank you guys
for I guess taking the back

00:51:13.665 --> 00:51:14.350
seat for a week.

00:51:14.350 --> 00:51:18.160
And I know we're going to return
next week to a more

00:51:18.160 --> 00:51:20.240
Mountain View focused show.

00:51:22.982 --> 00:51:23.705
JEREMY: Great.

00:51:23.705 --> 00:51:24.600
JEFF POSNICK: Thanks,
everybody.

00:51:24.600 --> 00:51:27.786
JEREMY: And thanks everyone
for joining.

00:51:27.786 --> 00:51:28.430
JEFF POSNICK: OK.

00:51:28.430 --> 00:51:29.680
Bye folks.

