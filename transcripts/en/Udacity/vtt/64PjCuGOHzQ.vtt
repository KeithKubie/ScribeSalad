WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.000
[Thrun] So here's my second piece of software assignments in controls.

00:00:04.000 --> 00:00:09.000
In the class we talked about how to make a car follow a straight line.

00:00:09.000 --> 00:00:11.000
We used the line x = 0

00:00:11.000 --> 00:00:17.000
where the crossing arrow was defined as the y difference between this axis.

00:00:17.000 --> 00:00:19.000
We just went off the y value.

00:00:19.000 --> 00:00:24.000
So now I want to make a more interesting course, a cyclic course, a racecourse.

00:00:24.000 --> 00:00:28.000
Here's my racecourse. It has the radius r, which you can set.

00:00:28.000 --> 00:00:34.000
The way I'd like to define this racecourse is through a half cycle where we use r,

00:00:34.000 --> 00:00:39.000
same half cycle over here, and the stretches in between I want to be 2r long.

00:00:39.000 --> 00:00:45.000
So for example, if this radius equals 25 meters, then this would be 50 meters.

00:00:45.000 --> 00:00:49.000
The whole thing would be 100 meters, and this measurement would also be 50 meters.

00:00:49.000 --> 00:00:53.000
I want you to program it such that the initial car is stationed right over here,

00:00:53.000 --> 00:00:59.000
pointed upwards, and then it drives onto the racecourse like this,

00:00:59.000 --> 00:01:02.000
all the way around infinitely often.

00:01:02.000 --> 00:01:06.000
The key in doing this is going to be to set a function.

00:01:06.000 --> 00:01:11.000
I have already modified for you the function run from our control class

00:01:11.000 --> 00:01:15.000
to use that crosstrack_error with the parameter radius,

00:01:15.000 --> 00:01:19.000
which we're going to set to 25, but I can pick a different value in my testing.

00:01:19.000 --> 00:01:23.000
And then I have modified a little bit the update over here

00:01:23.000 --> 00:01:27.000
to maintain the differential and the integral crosstrack_error,

00:01:27.000 --> 00:01:32.000
and here is our steering control law that you are familiar with.

00:01:32.000 --> 00:01:37.000
Instead of twiddle I'm just going to give you parameters, 10, 15, and 0.

00:01:37.000 --> 00:01:40.000
Those work fine for me,

00:01:40.000 --> 00:01:43.000
and they're actually the result of running twiddle without the integral part.

00:01:43.000 --> 00:01:47.000
And then when I run it, I get my output. And here it is.

00:01:47.000 --> 00:01:50.000
The crosstrack_error by and large is very small.

00:01:50.000 --> 00:01:54.000
You can see the steering tends to be on the negative side.

00:01:54.000 --> 00:01:57.000
Here we're steering at the first turn, here we're on the straightaway.

00:01:57.000 --> 00:01:59.000
You can see this by the numbers.

00:01:59.000 --> 00:02:03.000
Here we go into a turn again, so the turning becomes larger.

00:02:03.000 --> 00:02:07.000
In all of this you find the crosstrack_error to be relatively small,

00:02:07.000 --> 00:02:12.000
about 0.1 or so--not very much--and this continues and continues.

00:02:12.000 --> 00:02:16.000
The final crosstrack_error for the second half of the race is 0.005.

00:02:16.000 --> 00:02:19.000
So you want this number to be really, really small.

00:02:19.000 --> 00:02:24.000
The tricky part is when you code this up and code the function cte,

00:02:24.000 --> 00:02:27.000
you need a different branch for this area here, for this area over here,

00:02:27.000 --> 00:02:29.000
this area over here, this area over here.

00:02:29.000 --> 00:02:32.000
Keep in mind that the robot is going to go in a cycle.

00:02:32.000 --> 00:02:35.000
So it's going to traverse this one in the opposite direction with this one over here.

00:02:35.000 --> 09:59:59.000
So good luck coding up the correct crosstrack_error function.

