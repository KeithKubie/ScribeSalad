WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.480
[MUSIC PLAYING]

00:00:03.480 --> 00:00:05.312
So this talk is
on my first love,

00:00:05.312 --> 00:00:06.520
which is Android development.

00:00:06.520 --> 00:00:08.830
And this is for bringing
your existing Android

00:00:08.830 --> 00:00:11.680
app to the big screen
with Android TV.

00:00:11.680 --> 00:00:13.910
So let me talk to you before
I jump in for a second,

00:00:13.910 --> 00:00:16.326
and this is for folks that are
mostly new to the platform.

00:00:16.326 --> 00:00:18.890
So I'll give a quick intro,
then I'll talk about, basically,

00:00:18.890 --> 00:00:20.320
the key steps in
development, and then

00:00:20.320 --> 00:00:22.010
I'll talk about some
design principles.

00:00:22.010 --> 00:00:24.510
So before I jump in, let
me tell you guys and girls

00:00:24.510 --> 00:00:26.130
why I like Android TV so much.

00:00:26.130 --> 00:00:29.250
So, I am in no way a
front end developer.

00:00:29.250 --> 00:00:33.460
So I don't do UI
and I don't do UX.

00:00:33.460 --> 00:00:37.700
So for me, thinking about, how
can I write a really great app

00:00:37.700 --> 00:00:39.200
for the big screen
that's supposed

00:00:39.200 --> 00:00:42.270
to have this great UI
with smooth transitions

00:00:42.270 --> 00:00:44.520
and animations, right, that
people are going to look

00:00:44.520 --> 00:00:45.870
at in groups and comment on?

00:00:45.870 --> 00:00:48.070
So for me, I'm like,
holy crap, I'm out.

00:00:48.070 --> 00:00:49.140
I can't do that.

00:00:49.140 --> 00:00:50.570
But I fell in love
with Android TV

00:00:50.570 --> 00:00:52.611
because this is actually
one of the few platforms

00:00:52.611 --> 00:00:57.020
where I can write a really
top notch cinematic UI.

00:00:57.020 --> 00:00:59.360
And I can do that because
Android TV, the developer

00:00:59.360 --> 00:01:01.810
experience, is all about
providing tools, which

00:01:01.810 --> 00:01:03.932
makes it super easy to do that.

00:01:03.932 --> 00:01:05.640
So that's why I like
Android TV, and I'll

00:01:05.640 --> 00:01:07.431
show you a quick preview
of how that works.

00:01:11.030 --> 00:01:15.140
All right, so, when most
of us think about software

00:01:15.140 --> 00:01:17.670
on the television,
we think about games.

00:01:17.670 --> 00:01:21.160
We just saw a great talk on
Cast games, and after I finish,

00:01:21.160 --> 00:01:23.820
we'll see a great talk
on Android TV games.

00:01:23.820 --> 00:01:25.810
If you have an existing
game for Android,

00:01:25.810 --> 00:01:28.260
it's super easy to
port it to the TV,

00:01:28.260 --> 00:01:31.090
because the TLDR
of this entire talk

00:01:31.090 --> 00:01:35.554
is that Android TV is just
Android on a new form factor.

00:01:35.554 --> 00:01:37.970
So if you've got a game-- and
there's of course more to it

00:01:37.970 --> 00:01:40.630
than that, but that's the
TLDR-- so if you've got a game,

00:01:40.630 --> 00:01:41.940
you're in good shape.

00:01:41.940 --> 00:01:46.370
But what I really care
about is apps, so just as

00:01:46.370 --> 00:01:48.820
is true for games, if you
have an existing Android app,

00:01:48.820 --> 00:01:52.190
the TLDR is you're also
really, really close to getting

00:01:52.190 --> 00:01:54.370
it working on the big screen.

00:01:54.370 --> 00:01:57.160
So this is actually "Santa
Tracker," which is super fun,

00:01:57.160 --> 00:01:58.910
and this year it was
ported to Android TV.

00:01:58.910 --> 00:02:02.100
So I absolutely love
just bringing stuff

00:02:02.100 --> 00:02:04.430
to the big screen.

00:02:04.430 --> 00:02:06.710
Something to think
about-- I'll primarily

00:02:06.710 --> 00:02:09.050
talk about media
apps in this talk,

00:02:09.050 --> 00:02:12.200
and that's really where the
developer tools hit home.

00:02:12.200 --> 00:02:16.840
But you're not limited to
just building music and video

00:02:16.840 --> 00:02:17.970
apps for the television.

00:02:17.970 --> 00:02:19.900
You should really think
outside of the box,

00:02:19.900 --> 00:02:23.100
like what can you do in terms
of sports or cooking or anything

00:02:23.100 --> 00:02:25.230
that can take advantage
of the new form factor?

00:02:25.230 --> 00:02:26.500
I think we're
actually-- going back

00:02:26.500 --> 00:02:27.570
to this morning-- I
think we're actually

00:02:27.570 --> 00:02:29.934
at a really special
time in the living room,

00:02:29.934 --> 00:02:31.350
and actually as
software engineers

00:02:31.350 --> 00:02:33.475
and developers and computer
scientists, in general.

00:02:33.475 --> 00:02:35.470
And that's because
the developer tools

00:02:35.470 --> 00:02:38.850
today are ridiculously good.

00:02:38.850 --> 00:02:41.440
So back when I started
as a little kid--

00:02:41.440 --> 00:02:44.270
like, what, I don't want to
tell you how many years ago,

00:02:44.270 --> 00:02:48.796
but many years ago-- writing
QuickBASIC on an Apple, right?

00:02:48.796 --> 00:02:50.170
Like an Apple II,
to think about,

00:02:50.170 --> 00:02:51.710
like, oh man, I'm
going to sit down

00:02:51.710 --> 00:02:53.600
and, I don't know,
a couple days later,

00:02:53.600 --> 00:02:55.860
I'm going to have a great
cinematic big screen

00:02:55.860 --> 00:02:58.020
app running on my TV,
would have been impossible.

00:02:58.020 --> 00:03:00.480
That would have been like
a 15 year coding project,

00:03:00.480 --> 00:03:02.780
and today we can do
it just trivially.

00:03:02.780 --> 00:03:06.230
So opportunity is
the key word today.

00:03:06.230 --> 00:03:09.950
And yeah, the TLDR is,
it is-- and no BS here--

00:03:09.950 --> 00:03:12.070
if you are an Android
developer, it's

00:03:12.070 --> 00:03:13.876
so easy to get it on the TV.

00:03:13.876 --> 00:03:16.250
And I actually am very cautious
when I say the word easy.

00:03:16.250 --> 00:03:17.830
I hear a lot of talks
where like, yeah,

00:03:17.830 --> 00:03:19.460
it's super easy to do
this, like trust me,

00:03:19.460 --> 00:03:20.626
use this developer platform.

00:03:20.626 --> 00:03:23.900
But it is actually
pretty easy to do.

00:03:23.900 --> 00:03:26.510
All right, so what's
the same and what's

00:03:26.510 --> 00:03:29.090
different when you're going
from a mobile app to Android TV?

00:03:29.090 --> 00:03:32.450
Starting with what's the
same, almost all of your code.

00:03:32.450 --> 00:03:34.050
Pretty much the
main thing to do is

00:03:34.050 --> 00:03:36.780
you need to roll a
new UI and a new UX.

00:03:36.780 --> 00:03:38.740
And the Leanback
Library, in particular,

00:03:38.740 --> 00:03:41.993
and the other developer tools,
makes that ridiculously easy.

00:03:44.900 --> 00:03:47.370
Leanback is the
heart of Android TV.

00:03:47.370 --> 00:03:51.040
It's basically a collection
of prebuilt fragments, which

00:03:51.040 --> 00:03:52.400
we'll get into in a second.

00:03:52.400 --> 00:03:55.850
So when folks have a TV
app, what they really

00:03:55.850 --> 00:03:58.110
need to do is-- typically,
if you look at a media app,

00:03:58.110 --> 00:03:59.710
there's a really common flow.

00:03:59.710 --> 00:04:02.570
You turn on the TV and you
need to find content to watch.

00:04:02.570 --> 00:04:05.230
There's typically two
ways you can do that.

00:04:05.230 --> 00:04:07.140
One is you might want
to browse for it,

00:04:07.140 --> 00:04:09.730
and Leanback provides a
great prebuilt fragment

00:04:09.730 --> 00:04:11.370
with smooth animations
and transitions

00:04:11.370 --> 00:04:12.910
to help you browse for content.

00:04:12.910 --> 00:04:14.410
The other way to
find content is you

00:04:14.410 --> 00:04:16.839
might want to search for
it, and Leanback also

00:04:16.839 --> 00:04:19.779
provides a search fragment
with built-in voice recognition

00:04:19.779 --> 00:04:23.630
to make it super easy to take
the user to their content

00:04:23.630 --> 00:04:25.232
in the minimum number of steps.

00:04:25.232 --> 00:04:27.690
After you find content, you
might want to see details on it

00:04:27.690 --> 00:04:29.260
or take an action,
like renting a movie,

00:04:29.260 --> 00:04:30.676
and then you want
to play it back.

00:04:30.676 --> 00:04:33.740
And pretty much all
of the UI components

00:04:33.740 --> 00:04:35.670
you need for this is
included out of the box.

00:04:35.670 --> 00:04:37.740
And we actually
have a sample app

00:04:37.740 --> 00:04:39.570
with all of this
working immediately.

00:04:39.570 --> 00:04:43.347
And what I'll do in this talk is
look at the key chunks of code

00:04:43.347 --> 00:04:44.930
you need to really
get these fragments

00:04:44.930 --> 00:04:47.050
wired up, and populated
with your content.

00:04:49.590 --> 00:04:52.170
The other thing that's
the same about Android TV

00:04:52.170 --> 00:04:54.450
is you can actually
add support for it

00:04:54.450 --> 00:04:58.310
in your existing APK in the same
way you do with Android Wear.

00:04:58.310 --> 00:04:59.970
Which is fantastic
because it means

00:04:59.970 --> 00:05:02.479
that your Play Store experience
is basically identical.

00:05:02.479 --> 00:05:05.020
You get to use all the familiar
distribution and monetization

00:05:05.020 --> 00:05:05.730
tools.

00:05:05.730 --> 00:05:06.310
Super easy.

00:05:09.000 --> 00:05:11.970
Right, Play Store.

00:05:11.970 --> 00:05:14.159
I have like one or
two reasons why--

00:05:14.159 --> 00:05:16.200
a question that comes up
often is, why should you

00:05:16.200 --> 00:05:17.670
develop for Android TV?

00:05:17.670 --> 00:05:20.020
And what I would do
is-- as a developer,

00:05:20.020 --> 00:05:21.770
it's where do you want
to spend your time?

00:05:21.770 --> 00:05:23.644
So it's sort of like a
risk-reward trade off.

00:05:23.644 --> 00:05:25.320
The developer risk
is fairly low,

00:05:25.320 --> 00:05:27.922
and I just want to show you
what some of the rewards are.

00:05:27.922 --> 00:05:30.880
Android TV is a great way to
get your content discovered

00:05:30.880 --> 00:05:32.320
and engaged.

00:05:32.320 --> 00:05:35.270
Discovered means that
people need to find it.

00:05:35.270 --> 00:05:38.810
So this is the Android TV
home screen, and the feature

00:05:38.810 --> 00:05:42.340
that I want to point you to
is-- the central feature-- is

00:05:42.340 --> 00:05:43.341
the recommendations row.

00:05:43.341 --> 00:05:45.881
And what I love about this is
if you're providing-- if you're

00:05:45.881 --> 00:05:47.950
developing-- a media
app, you can actually

00:05:47.950 --> 00:05:51.320
publish recommendations front
and center on the Android TV

00:05:51.320 --> 00:05:52.200
home screen.

00:05:52.200 --> 00:05:54.175
Which means when folks
turn this thing on,

00:05:54.175 --> 00:05:56.300
they're going to see
recommendations from your app.

00:05:56.300 --> 00:05:58.925
And that's just a phenomenal way
to get your content out there.

00:06:01.349 --> 00:06:03.890
Another obvious way to get your
content discovered is search.

00:06:03.890 --> 00:06:06.181
The other central feature of
the Android TV home screen

00:06:06.181 --> 00:06:08.470
is search, and you can
actually integrate with search.

00:06:08.470 --> 00:06:11.652
So if I search for my favorite
TV show on the home screen,

00:06:11.652 --> 00:06:13.360
I can actually see
results from your app.

00:06:17.590 --> 00:06:21.400
Another reason is that, when it
comes to retaining users-- when

00:06:21.400 --> 00:06:25.930
folks are watching content--
screen size is a huge variable.

00:06:25.930 --> 00:06:28.340
So there's been different
internal studies on YouTube--

00:06:28.340 --> 00:06:30.720
and this is across all
devices, not just TV,

00:06:30.720 --> 00:06:32.665
so this also includes Cast.

00:06:32.665 --> 00:06:34.040
But typically, if
you can imagine

00:06:34.040 --> 00:06:36.850
that a user watches one
hour of video content,

00:06:36.850 --> 00:06:39.560
say on their cell
phone or tablet,

00:06:39.560 --> 00:06:43.211
that same user might be watching
in the range of 3 hours on TV.

00:06:43.211 --> 00:06:44.710
So that's a lot of
time that you can

00:06:44.710 --> 00:06:47.110
compete for by developing
for Android TV.

00:06:50.500 --> 00:06:53.769
And really the opportunity
is-- when I get home--

00:06:53.769 --> 00:06:55.310
like I've had a long
day, I'm coding,

00:06:55.310 --> 00:06:57.380
I'm exhausted-- I spend
a lot of time relaxing,

00:06:57.380 --> 00:06:59.900
and I think a lot of us do
in front of our TV screen.

00:06:59.900 --> 00:07:02.880
It's a lot of time that I'm
just sitting there often--

00:07:02.880 --> 00:07:04.640
I have a smart TV
with Android TV,

00:07:04.640 --> 00:07:06.300
and I have some
old stuff-- using

00:07:06.300 --> 00:07:09.050
kind of these not so great
UI's, just browsing around

00:07:09.050 --> 00:07:09.960
for content.

00:07:09.960 --> 00:07:12.890
And I think because the
developer tools are so strong,

00:07:12.890 --> 00:07:14.850
you as developers,
we as developers,

00:07:14.850 --> 00:07:16.850
really do have an opportunity
to see if we can--

00:07:16.850 --> 00:07:18.224
I don't think
we've done it yet--

00:07:18.224 --> 00:07:20.590
but to really come up with
what's the killer apps?

00:07:20.590 --> 00:07:23.320
What's the next generation of
killer apps that people can

00:07:23.320 --> 00:07:25.400
use in that three-plus hours?

00:07:25.400 --> 00:07:27.599
I think it's actually
up to four now in the US

00:07:27.599 --> 00:07:29.390
that we're just sitting
there on the couch.

00:07:29.390 --> 00:07:30.846
And so this is a
huge opportunity.

00:07:34.620 --> 00:07:36.560
For folks brand new
to the platform,

00:07:36.560 --> 00:07:38.750
the engagement model is
a little bit different.

00:07:38.750 --> 00:07:40.994
It's a D-pad remote control
usually, also a game

00:07:40.994 --> 00:07:41.910
controller optionally.

00:07:41.910 --> 00:07:44.080
There's no menu
button, no pointer.

00:07:44.080 --> 00:07:46.250
Mostly we're navigating
systems of cards.

00:07:46.250 --> 00:07:47.960
Everything should
be simple and quick.

00:07:50.760 --> 00:07:53.690
And all the elements on your
UI need to be focus-able.

00:07:53.690 --> 00:07:55.490
So what I want to
do is quickly look

00:07:55.490 --> 00:07:58.510
at the three major steps to
getting your mobile app working

00:07:58.510 --> 00:07:59.245
on Android TV.

00:07:59.245 --> 00:08:02.325
And the first thing we're going
to do is update your manifest.

00:08:02.325 --> 00:08:03.950
You don't need to
read all this, I just

00:08:03.950 --> 00:08:05.686
wanted to drop some
code on the screen.

00:08:05.686 --> 00:08:08.060
The basic idea here is you've
got your main activity that

00:08:08.060 --> 00:08:09.730
launches on your mobile device.

00:08:09.730 --> 00:08:11.729
What you're going to do
in your Android manifest

00:08:11.729 --> 00:08:13.440
is add a second
activity, and this

00:08:13.440 --> 00:08:16.360
is the activity that's
going to launch on the TV.

00:08:16.360 --> 00:08:19.420
This is simple stuff, but
it's really quick and easy.

00:08:19.420 --> 00:08:22.990
To specify the TV activity, you
would use the Leanback launcher

00:08:22.990 --> 00:08:24.024
intent filter.

00:08:24.024 --> 00:08:26.357
So now we've got an activity
that will launch on the TV.

00:08:30.670 --> 00:08:32.299
Another thing you
need to do is declare

00:08:32.299 --> 00:08:34.450
that you support Leanback.

00:08:34.450 --> 00:08:36.782
Leanback is the UI
used by Android TV.

00:08:36.782 --> 00:08:38.240
What's interesting
here is I've got

00:08:38.240 --> 00:08:40.400
required false, and the
reason I'm not requiring

00:08:40.400 --> 00:08:41.899
it is we're interested
in developing

00:08:41.899 --> 00:08:44.580
apps that can run on multiple
different Android form factors.

00:08:44.580 --> 00:08:47.290
So with required false, you can
also run on a mobile device.

00:08:47.290 --> 00:08:48.873
Required true, the
Play Store is going

00:08:48.873 --> 00:08:51.920
to say, nope, Android TV only.

00:08:51.920 --> 00:08:54.130
Just with those
two steps you can

00:08:54.130 --> 00:08:57.945
get your app to appear in the
apps row on the home screen.

00:08:57.945 --> 00:09:00.320
Another difference with Android
TV is, on a mobile device

00:09:00.320 --> 00:09:01.140
you've got an icon.

00:09:01.140 --> 00:09:02.580
On Android TV,
you need a banner,

00:09:02.580 --> 00:09:04.969
which is basically
just a bigger icon.

00:09:04.969 --> 00:09:06.760
You can also specify
that in your manifest.

00:09:09.800 --> 00:09:11.450
Something to think
about if you're

00:09:11.450 --> 00:09:14.490
porting an app from a mobile
device is hardware differences.

00:09:14.490 --> 00:09:16.670
So one cool thing about
mobile that I think we often

00:09:16.670 --> 00:09:18.850
take for granted is
just the insane number

00:09:18.850 --> 00:09:21.034
of sensors on a cell phone.

00:09:21.034 --> 00:09:23.200
Folks are often complaining,
and I complain as well,

00:09:23.200 --> 00:09:25.210
like, ah, the battery
life stinks on my phone.

00:09:25.210 --> 00:09:27.180
But when you think
about how much hardware

00:09:27.180 --> 00:09:29.450
is packed on there,
it's actually astounding

00:09:29.450 --> 00:09:30.930
that it works as
well as it does.

00:09:30.930 --> 00:09:34.330
So phones have gyroscopes,
accelerometers, all this jazz--

00:09:34.330 --> 00:09:35.995
GPS, touch screens.

00:09:35.995 --> 00:09:38.370
So when you're porting an app
to also work in Android TV,

00:09:38.370 --> 00:09:40.578
you need to update your
manifest to specify that none

00:09:40.578 --> 00:09:41.840
of this stuff is required.

00:09:41.840 --> 00:09:43.714
That way it can be
installed on both devices.

00:09:46.720 --> 00:09:49.260
Then what you want to
do is, at run time,

00:09:49.260 --> 00:09:51.290
before you try and use
a hardware feature--

00:09:51.290 --> 00:09:53.830
so if you're accustomed to
using the GPS-- just update

00:09:53.830 --> 00:09:57.040
your application code to check
whether that hardware exists

00:09:57.040 --> 00:09:58.710
on the device before
you try and use it.

00:10:03.660 --> 00:10:05.680
Something to avoid
is-- it's also

00:10:05.680 --> 00:10:08.430
possible to check what form
factor you're running on.

00:10:08.430 --> 00:10:10.660
So with the UI mode
manager, I can say, hey,

00:10:10.660 --> 00:10:13.520
am I running on a TV or a phone?

00:10:13.520 --> 00:10:15.890
And then, access
hardware based on that.

00:10:15.890 --> 00:10:18.070
The issue with doing this
is-- so this will work out

00:10:18.070 --> 00:10:18.945
of the box right now.

00:10:18.945 --> 00:10:20.530
You can say, if I'm
on a TV, I'm not

00:10:20.530 --> 00:10:24.290
going to access GPS or a touch
screen or any stuff like that,

00:10:24.290 --> 00:10:26.980
but I'd recommend actually
instead of using this approach,

00:10:26.980 --> 00:10:29.016
just check for specific
pieces of hardware

00:10:29.016 --> 00:10:31.140
before you try and access
them, and that way you'll

00:10:31.140 --> 00:10:32.727
help future proof your app.

00:10:32.727 --> 00:10:34.310
So if TV's down the
road have features

00:10:34.310 --> 00:10:35.590
we don't expect them
to now, you won't have

00:10:35.590 --> 00:10:36.715
to change your code at all.

00:10:39.930 --> 00:10:42.150
Other gotchas is permissions.

00:10:42.150 --> 00:10:45.972
So permissions can cause
implicit hardware requirements.

00:10:45.972 --> 00:10:48.180
So if you have a camera
permission in your mobile app

00:10:48.180 --> 00:10:49.846
and you port it to
the TV, that actually

00:10:49.846 --> 00:10:51.510
creates a permission
on the camera.

00:10:51.510 --> 00:10:53.070
So you need to watch
out for stuff like that.

00:10:53.070 --> 00:10:54.990
Otherwise, you won't
be listed as compatible

00:10:54.990 --> 00:10:55.960
in the Play Store.

00:10:55.960 --> 00:10:58.630
So step one is basically
updating your manifest.

00:10:58.630 --> 00:11:00.262
And that's mostly bookkeeping.

00:11:00.262 --> 00:11:01.470
It's mostly bookkeeping code.

00:11:01.470 --> 00:11:03.010
There's nothing to this, right?

00:11:03.010 --> 00:11:05.676
And then it's just updating your
app code to check for hardware.

00:11:05.676 --> 00:11:07.830
That's super easy.

00:11:07.830 --> 00:11:10.900
What was personally really hard
for me before Android TV was,

00:11:10.900 --> 00:11:13.560
how on earth am I
going to create a UI?

00:11:13.560 --> 00:11:14.750
That's what we care about.

00:11:14.750 --> 00:11:16.540
How can I create a good UI?

00:11:16.540 --> 00:11:18.936
And the answer is you
use the Leanback Library.

00:11:22.331 --> 00:11:23.330
Let's take a quick look.

00:11:23.330 --> 00:11:25.080
So the Leanback Library,
the main feature,

00:11:25.080 --> 00:11:28.540
is it comes with a bunch
of prebuilt fragments.

00:11:28.540 --> 00:11:29.770
This is a static picture.

00:11:29.770 --> 00:11:30.970
I really should
have a video here,

00:11:30.970 --> 00:11:32.620
because the cool thing
is to see this in action

00:11:32.620 --> 00:11:34.510
because the animations
are really slick.

00:11:34.510 --> 00:11:37.630
So this is typically the entry
point for your big screen app,

00:11:37.630 --> 00:11:39.320
if you have a media app.

00:11:39.320 --> 00:11:40.990
And this is called
the browse fragment.

00:11:40.990 --> 00:11:42.860
On the left, we have
a list of categories,

00:11:42.860 --> 00:11:44.485
and you can think of
these like movies.

00:11:44.485 --> 00:11:46.654
They might be action
movies, comedies, dramas.

00:11:46.654 --> 00:11:48.070
And on the right,
we've got a list

00:11:48.070 --> 00:11:49.710
of content-- rows
of content-- that

00:11:49.710 --> 00:11:50.834
belong in those categories.

00:11:53.660 --> 00:11:56.430
Another really common fragment
is the details fragment.

00:11:56.430 --> 00:11:59.260
After you select a movie, I'd
like to view details of it.

00:11:59.260 --> 00:12:01.468
And the cool thing is the
details fragment also comes

00:12:01.468 --> 00:12:02.640
with these little actions.

00:12:02.640 --> 00:12:04.120
The great thing about
these is they're all super

00:12:04.120 --> 00:12:05.630
easy to navigate with a D-pad.

00:12:05.630 --> 00:12:07.463
It just takes one or
two clicks and you just

00:12:07.463 --> 00:12:08.810
sail right through it.

00:12:08.810 --> 00:12:10.090
And then, of course,
when you've found content

00:12:10.090 --> 00:12:11.923
that you want to watch,
you can play it back

00:12:11.923 --> 00:12:14.560
with the playback overview
fragment, or overlay fragment,

00:12:14.560 --> 00:12:15.060
I believe.

00:12:15.060 --> 00:12:16.870
So these are all
totally prebuilt.

00:12:16.870 --> 00:12:20.200
So working with Leanback, if you
just want-- and first of all,

00:12:20.200 --> 00:12:21.430
they're totally customizable.

00:12:21.430 --> 00:12:24.360
So the way they look now--
this is just straight out

00:12:24.360 --> 00:12:26.910
of the sample app-- if
you open up Android Studio

00:12:26.910 --> 00:12:28.460
and pull the
Leanback sample, this

00:12:28.460 --> 00:12:29.830
is straight out of the sample.

00:12:29.830 --> 00:12:32.920
They're totally customizable
in terms of colors and branding

00:12:32.920 --> 00:12:34.320
and all of that.

00:12:34.320 --> 00:12:36.170
You can also pull
pieces out of them

00:12:36.170 --> 00:12:39.480
and roll your own
fragments from scratch.

00:12:39.480 --> 00:12:41.280
And if you're building
for Android TV

00:12:41.280 --> 00:12:43.550
these are also 100% optional.

00:12:43.550 --> 00:12:47.190
So Leanback makes it super easy
to build a really great UI.

00:12:47.190 --> 00:12:49.149
But you're totally not
required to use it,

00:12:49.149 --> 00:12:50.940
and you can do your
own thing, if you like.

00:12:53.790 --> 00:12:57.300
So here are the main
steps to using Leanback.

00:12:57.300 --> 00:12:59.760
So here is an empty
browse fragment.

00:12:59.760 --> 00:13:02.320
So when we updated our
manifest in the first step,

00:13:02.320 --> 00:13:05.540
we declared an activity
to run on the TV.

00:13:05.540 --> 00:13:09.010
If in that activity we
just specify a layout that

00:13:09.010 --> 00:13:11.690
points to-- let's say we
extend the browse fragment,

00:13:11.690 --> 00:13:14.140
we point that in our
layout, we can bring it up.

00:13:14.140 --> 00:13:16.310
And when we bring it
up, it's totally empty.

00:13:16.310 --> 00:13:18.250
So our job really
is-- let's say we

00:13:18.250 --> 00:13:20.520
have a mobile app with a
bunch of videos-- our job is

00:13:20.520 --> 00:13:23.770
to populate this with content.

00:13:23.770 --> 00:13:27.210
So here's how it
looks under the hood.

00:13:27.210 --> 00:13:29.700
So a layout that you don't
see because it's empty

00:13:29.700 --> 00:13:32.020
is-- basically it's
a list of rows.

00:13:32.020 --> 00:13:35.520
Each row has the columns for,
say, action movies, comedies,

00:13:35.520 --> 00:13:36.020
dramedies.

00:13:36.020 --> 00:13:37.000
Heh, dramedies?

00:13:37.000 --> 00:13:38.507
Dramas.

00:13:38.507 --> 00:13:40.840
These actually really are--
they sort of stick to a row.

00:13:40.840 --> 00:13:43.660
So this whole thing, category
2 in the row is a row,

00:13:43.660 --> 00:13:45.180
and category 1 in
the row is a row.

00:13:45.180 --> 00:13:46.930
But Leanback-- just
this browse fragment--

00:13:46.930 --> 00:13:48.920
has a list of these
rows, and our goal

00:13:48.920 --> 00:13:52.600
is to map our content
onto the fragment.

00:13:52.600 --> 00:13:55.920
And to do that, we
use a design pattern.

00:13:55.920 --> 00:13:59.380
If you all are familiar
with model-controller-view

00:13:59.380 --> 00:14:02.650
or model-view-controller,
this is model-view-presenter,

00:14:02.650 --> 00:14:04.640
and it's a variant of it.

00:14:04.640 --> 00:14:06.810
So the model is
your standard model.

00:14:06.810 --> 00:14:08.530
These are objects
from your database.

00:14:08.530 --> 00:14:09.710
Say these are movies.

00:14:09.710 --> 00:14:12.320
When you're moving to Leanback,
if you have an existing model,

00:14:12.320 --> 00:14:14.950
you don't need to make
any changes to it at all.

00:14:14.950 --> 00:14:17.480
So no changes to
your data structure.

00:14:17.480 --> 00:14:20.030
Views are standard Android
views, image views,

00:14:20.030 --> 00:14:21.190
and text views.

00:14:21.190 --> 00:14:23.360
So there's nothing new there.

00:14:23.360 --> 00:14:26.110
And we have one new concept,
which is a presenter,

00:14:26.110 --> 00:14:30.430
and a presenter's job is to
map from an object to a view.

00:14:30.430 --> 00:14:32.070
So if I have a movie
in my database,

00:14:32.070 --> 00:14:34.760
I would use a presenter
to create a view for it,

00:14:34.760 --> 00:14:37.416
and then populate that view
with the different fields

00:14:37.416 --> 00:14:38.040
from the movie.

00:14:40.700 --> 00:14:42.970
By using different
presenters, you

00:14:42.970 --> 00:14:47.880
can display the same object from
your model in different ways.

00:14:47.880 --> 00:14:49.590
So this is the same movie.

00:14:49.590 --> 00:14:52.710
Here's how it might look as a
card on the browse fragment,

00:14:52.710 --> 00:14:55.370
and here's how it might look
on the details fragment.

00:14:55.370 --> 00:14:57.410
Same movie, it's just
a different presenter,

00:14:57.410 --> 00:14:59.285
putting different fields
in different places.

00:15:02.460 --> 00:15:04.670
There's really two key
methods that you care about

00:15:04.670 --> 00:15:05.960
in a presenter.

00:15:05.960 --> 00:15:09.026
The first is onCreateViewHolder,
which creates a view.

00:15:09.026 --> 00:15:10.900
Here we're looking at
a card presenter, which

00:15:10.900 --> 00:15:13.070
creates an image card
view, which is just

00:15:13.070 --> 00:15:16.000
composed of two standard Android
views, a text view and an image

00:15:16.000 --> 00:15:16.960
view.

00:15:16.960 --> 00:15:20.340
The second method that we care
about is onBindViewHolder,

00:15:20.340 --> 00:15:22.090
and that takes an
object from the database

00:15:22.090 --> 00:15:25.530
and just populates the
different fields on the view.

00:15:32.610 --> 00:15:36.130
In computer science, it's all
about abstraction, abstraction,

00:15:36.130 --> 00:15:36.790
abstraction.

00:15:36.790 --> 00:15:39.860
And so I'm introducing some
abstract concepts really quick

00:15:39.860 --> 00:15:41.320
just because, once
we have these,

00:15:41.320 --> 00:15:44.670
we can wire them together
to quickly populate a UI.

00:15:44.670 --> 00:15:48.930
So trust me and you'll see
where I'm going in a second.

00:15:48.930 --> 00:15:50.390
The fragments
introduce a concept

00:15:50.390 --> 00:15:52.540
called an ArrayObjectAdapter.

00:15:52.540 --> 00:15:53.690
And that's a fancy word.

00:15:53.690 --> 00:15:56.300
It's just an object and
it contains a presenter,

00:15:56.300 --> 00:15:57.810
and a bunch of data.

00:15:57.810 --> 00:16:00.180
And behind the
scenes, the fragment

00:16:00.180 --> 00:16:03.170
will use the presenter to lay
out the data appropriately.

00:16:03.170 --> 00:16:05.580
So this is one of the list
rows from the browse fragment,

00:16:05.580 --> 00:16:08.280
and the idea is that it
has a card presenter So

00:16:08.280 --> 00:16:09.900
to populate this
with our content,

00:16:09.900 --> 00:16:12.900
all we really need to do is
add our movies to the object

00:16:12.900 --> 00:16:15.631
adapter, give the object
adapter to our presenter,

00:16:15.631 --> 00:16:17.880
and then the adapter in the
fragment behind the scenes

00:16:17.880 --> 00:16:19.880
will take care of laying it out.

00:16:19.880 --> 00:16:21.470
So using Leanback,
really you need

00:16:21.470 --> 00:16:23.530
to write or use an
existing presenter,

00:16:23.530 --> 00:16:26.428
and then just give it
the data from your model.

00:16:28.982 --> 00:16:30.440
And the pattern is
the same when we

00:16:30.440 --> 00:16:33.920
want to populate the rows
on the browse fragment.

00:16:33.920 --> 00:16:35.560
We have a different
object adapter.

00:16:35.560 --> 00:16:37.490
Instead of using a card
presenter, this time

00:16:37.490 --> 00:16:39.190
we're using a list
row presenter.

00:16:39.190 --> 00:16:41.370
And a list row presenter
is built into Leanback

00:16:41.370 --> 00:16:43.090
and it understands
how to lay out

00:16:43.090 --> 00:16:45.160
a whole row on the
browse fragment.

00:16:45.160 --> 00:16:45.660
Right?

00:16:52.620 --> 00:16:55.390
Here's a screenshot of some code
that you don't need to read.

00:16:55.390 --> 00:16:57.630
The best way to learn
to use Leanback--

00:16:57.630 --> 00:17:01.010
so this is a screenshot directly
out of the Leanback sample

00:17:01.010 --> 00:17:03.940
included with Android Studio.

00:17:03.940 --> 00:17:07.540
All of the code you
see here is used

00:17:07.540 --> 00:17:11.530
to populate the browse fragment
with movies from a database.

00:17:11.530 --> 00:17:13.329
So just this code--
this is really

00:17:13.329 --> 00:17:15.640
the core code that will
go from your database

00:17:15.640 --> 00:17:19.240
to a fully populated and
live browse fragment.

00:17:19.240 --> 00:17:21.700
And the best way to learn it
is, I would go into this--

00:17:21.700 --> 00:17:23.700
basically go into this
method of Leanback sample

00:17:23.700 --> 00:17:25.930
and honestly just start
commenting out pieces.

00:17:25.930 --> 00:17:28.529
I would start by
commenting out all the code

00:17:28.529 --> 00:17:30.445
and slowly putting it
back in, and you'll just

00:17:30.445 --> 00:17:33.290
see the UI populate
really rapidly.

00:17:33.290 --> 00:17:35.220
So it's a surprisingly
small amount

00:17:35.220 --> 00:17:37.890
of code for a surprising
amount of functionality,

00:17:37.890 --> 00:17:39.641
and that's why I like
Leanback so much.

00:17:43.950 --> 00:17:46.640
There's other prebuilt fragments
that you can use as well.

00:17:46.640 --> 00:17:48.170
So this is the
guided step fragment.

00:17:48.170 --> 00:17:52.887
It's great for providing
configuration options.

00:17:52.887 --> 00:17:54.220
Works really great with a D-pad.

00:17:58.024 --> 00:17:59.940
So basically we covered,
update your manifest.

00:17:59.940 --> 00:18:02.620
That's mostly handling
hardware, adding new activity.

00:18:02.620 --> 00:18:03.890
It's updating your UI.

00:18:03.890 --> 00:18:05.900
That's mostly using
prebuilt fragments

00:18:05.900 --> 00:18:07.670
and populating
them with content.

00:18:07.670 --> 00:18:09.590
And then the last step
is really integrating

00:18:09.590 --> 00:18:11.247
with recommendations and search.

00:18:16.680 --> 00:18:18.950
One thing to keep in mind
about recommendations

00:18:18.950 --> 00:18:22.050
is that a lot of apps
might be publishing Rex

00:18:22.050 --> 00:18:23.360
to the home screen.

00:18:23.360 --> 00:18:25.850
So one question is, how
should these be laid out?

00:18:25.850 --> 00:18:27.250
The answer is,
behind the scenes,

00:18:27.250 --> 00:18:29.750
Android TV uses a
recommendation engine,

00:18:29.750 --> 00:18:32.180
and it tries to
prioritize recommendations

00:18:32.180 --> 00:18:33.350
that are useful.

00:18:33.350 --> 00:18:34.910
So it learns that
over time based

00:18:34.910 --> 00:18:36.970
on what your users click on.

00:18:36.970 --> 00:18:39.060
So you want to
avoid doing things--

00:18:39.060 --> 00:18:42.520
like of course-- you want to
avoid things like spamming it.

00:18:42.520 --> 00:18:45.832
And you want to really think
about-- A great example

00:18:45.832 --> 00:18:47.540
of like a really solid
recommendation is,

00:18:47.540 --> 00:18:49.220
imagine a user is
watching a TV show,

00:18:49.220 --> 00:18:51.720
and they've watched like the
first three episodes of, maybe,

00:18:51.720 --> 00:18:54.180
"Breaking Bad," a really
awesome recommendation

00:18:54.180 --> 00:18:55.390
would be the next episode.

00:18:55.390 --> 00:18:57.890
And then, when they click on
that, what you don't want to do

00:18:57.890 --> 00:19:00.830
is take them into your app,
into some sort of window

00:19:00.830 --> 00:19:02.410
describing the show.

00:19:02.410 --> 00:19:04.542
You want to take them
directly into the video.

00:19:04.542 --> 00:19:06.250
So the idea is that
a good recommendation

00:19:06.250 --> 00:19:08.252
should go directly
from the home screen

00:19:08.252 --> 00:19:09.960
into the content the
user wants to watch.

00:19:12.810 --> 00:19:15.100
When you integrate with
search, Leanback also

00:19:15.100 --> 00:19:16.987
includes a prebuilt
search fragment.

00:19:16.987 --> 00:19:18.320
Which, again, you can customize.

00:19:18.320 --> 00:19:20.000
So you don't need to
build a search UI,

00:19:20.000 --> 00:19:22.430
you don't need to worry
about voice recognition.

00:19:22.430 --> 00:19:24.660
All you have to do is
tie a content provider,

00:19:24.660 --> 00:19:27.305
which basically describes what's
available in your database,

00:19:27.305 --> 00:19:28.346
into the search fragment.

00:19:33.820 --> 00:19:36.320
Then really quickly--
that's it for development--

00:19:36.320 --> 00:19:38.820
and then really quick, I've got
just three slides on design.

00:19:38.820 --> 00:19:40.180
And this is really up to you.

00:19:40.180 --> 00:19:41.950
I think folks are
still figuring out

00:19:41.950 --> 00:19:44.450
what's the optimal way to build
an app for the living room.

00:19:44.450 --> 00:19:46.730
And we're still learning that.

00:19:46.730 --> 00:19:48.280
I am an engineer,
not a designer.

00:19:48.280 --> 00:19:52.150
But the designers at Google have
come up with three principles.

00:19:52.150 --> 00:19:54.780
The first one is to
develop casual apps.

00:19:54.780 --> 00:19:56.360
The idea is that--
as we've heard

00:19:56.360 --> 00:19:58.130
before-- TV is super social.

00:19:58.130 --> 00:19:59.720
Your users are in
the living room.

00:19:59.720 --> 00:20:02.682
They're trying to relax after
work, and they're hanging out.

00:20:02.682 --> 00:20:04.640
They might be watching
a movie, playing a game,

00:20:04.640 --> 00:20:06.813
but they're definitely,
definitely not doing work.

00:20:11.520 --> 00:20:13.669
The second design
principle the designers,

00:20:13.669 --> 00:20:15.960
who are much smarter than me
in this area, came up with

00:20:15.960 --> 00:20:18.760
is simple.

00:20:18.760 --> 00:20:22.341
Voice recognition on Android
TV works really, really well.

00:20:22.341 --> 00:20:24.340
It's powered by the same
software that powers it

00:20:24.340 --> 00:20:26.982
on your phone, but if
you think about-- when

00:20:26.982 --> 00:20:28.690
I'm trying to use my
phone on the street,

00:20:28.690 --> 00:20:30.500
there's a tremendous amount--
this is a machine learning

00:20:30.500 --> 00:20:32.930
problem-- there's a tremendous
amount of background noise,

00:20:32.930 --> 00:20:33.530
right?

00:20:33.530 --> 00:20:36.520
So voice recognition on the
street is really challenging.

00:20:36.520 --> 00:20:39.500
In the living room,
it's often much quieter,

00:20:39.500 --> 00:20:41.720
which means the accuracy
of the voice recognition

00:20:41.720 --> 00:20:43.200
is often higher.

00:20:43.200 --> 00:20:45.150
So voice search
is super powerful.

00:20:45.150 --> 00:20:48.000
There's two ways to
input data on Android TV.

00:20:48.000 --> 00:20:49.490
One is text entry.

00:20:49.490 --> 00:20:51.280
Really don't want to
do that, unless it's

00:20:51.280 --> 00:20:52.727
something like a password.

00:20:52.727 --> 00:20:54.310
If it's anything
more than a password,

00:20:54.310 --> 00:20:58.394
I would really look towards
voice, especially for search.

00:20:58.394 --> 00:20:59.810
And then the last
design principle

00:20:59.810 --> 00:21:03.190
is that we think that
the UI's that you

00:21:03.190 --> 00:21:05.070
develop should be cinematic.

00:21:05.070 --> 00:21:07.210
And by cinematic,
what that really means

00:21:07.210 --> 00:21:08.700
is it should fade away.

00:21:08.700 --> 00:21:11.670
So, ideally, the thing the user
cares about is the content.

00:21:11.670 --> 00:21:14.350
If that's a movie
or if it's audio,

00:21:14.350 --> 00:21:16.760
content should take up the
majority, or the entirety,

00:21:16.760 --> 00:21:20.470
of the screen, and the
UI should just disappear.

00:21:20.470 --> 00:21:22.360
Another thing that
I think is important

00:21:22.360 --> 00:21:24.000
is low learning curve.

00:21:24.000 --> 00:21:28.140
If you have a TV app, it should
be intuitive and simple to use,

00:21:28.140 --> 00:21:28.640
right?

00:21:32.374 --> 00:21:33.790
All right, so to
learn this stuff,

00:21:33.790 --> 00:21:36.390
by far your best resource,
as always, is the docs.

00:21:36.390 --> 00:21:38.860
I would focus on getting
the Leanback Library up

00:21:38.860 --> 00:21:39.690
and running.

00:21:39.690 --> 00:21:41.650
If you like learning
in video form,

00:21:41.650 --> 00:21:44.017
we've also got a Udacity class.

00:21:44.017 --> 00:21:45.600
The Udacity class
is really targeted--

00:21:45.600 --> 00:21:47.016
if you're brand
new to Android TV,

00:21:47.016 --> 00:21:48.800
the Udacity class is
taught at that level,

00:21:48.800 --> 00:21:52.120
and it's a great way to go from
zero to a working Android TV

00:21:52.120 --> 00:21:52.837
app.

00:21:52.837 --> 00:21:54.420
And if you like
learning through code,

00:21:54.420 --> 00:21:55.890
I would check out
the Leanback sample

00:21:55.890 --> 00:21:58.340
on github, which you can also
pull through Android Studio.

00:21:58.340 --> 00:22:00.180
And I think with these things,
these three things together,

00:22:00.180 --> 00:22:02.060
it's pretty easy to
learn how to do this.

00:22:02.060 --> 00:22:03.750
So, yeah, thanks very much.

00:22:06.730 --> 00:22:10.080
[MUSIC PLAYING]

