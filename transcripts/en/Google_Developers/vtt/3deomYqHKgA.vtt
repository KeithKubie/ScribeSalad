WEBVTT
Kind: captions
Language: en

00:00:46.250 --> 00:00:47.430
KALYAN REDDY: Hey, everyone.

00:00:47.430 --> 00:00:47.850
Welcome.

00:00:47.850 --> 00:00:51.550
Today we have a special
edition of an Apps

00:00:51.550 --> 00:00:52.200
Script talk for you.

00:00:52.200 --> 00:00:54.570
We're going to be talking about
the Charts Service.

00:00:54.570 --> 00:00:56.760
But before we get to that, I'd
like to introduce a new member

00:00:56.760 --> 00:00:58.640
of our Developer Relations
team for Apps Script.

00:00:58.640 --> 00:01:00.380
This is Dan Lazin.

00:01:00.380 --> 00:01:02.100
And I'll let him introduce
himself.

00:01:02.100 --> 00:01:03.450
You've been working here
for how long, Dan?

00:01:03.450 --> 00:01:05.530
DAN LAZIN: Oh, all of three,
maybe four weeks now.

00:01:05.530 --> 00:01:06.180
KALYAN REDDY: All right.

00:01:06.180 --> 00:01:07.330
DAN LAZIN: I'm pretty
much an expert now.

00:01:07.330 --> 00:01:10.380
I'm a new tech writer on the
Developer Relations team for

00:01:10.380 --> 00:01:11.740
Apps Script.

00:01:11.740 --> 00:01:12.700
I'm going to be helping
to improve some of the

00:01:12.700 --> 00:01:15.835
documentation and make sure
that you guys can find the

00:01:15.835 --> 00:01:18.250
information you need to know.

00:01:18.250 --> 00:01:18.600
KALYAN REDDY: All right.

00:01:18.600 --> 00:01:22.600
It's great to have someone
newer than I am.

00:01:22.600 --> 00:01:24.420
Finally understanding how
to get things done.

00:01:24.420 --> 00:01:25.670
All right.

00:01:25.670 --> 00:01:26.200
Let's start.

00:01:26.200 --> 00:01:28.460
So today, I'd like to talk
about how you can use the

00:01:28.460 --> 00:01:32.800
Charts Service in Apps Script
in order to do really quick

00:01:32.800 --> 00:01:33.890
dashboards.

00:01:33.890 --> 00:01:36.380
You can integrate it very easily
using the capabilities

00:01:36.380 --> 00:01:38.270
of Apps Script that you might
have already gleaned from

00:01:38.270 --> 00:01:41.720
other tutorials or
other videos.

00:01:41.720 --> 00:01:45.440
And one example of such a thing
is easy interaction to

00:01:45.440 --> 00:01:46.000
spreadsheets.

00:01:46.000 --> 00:01:48.200
Any data that you have in
spreadsheets, you can just

00:01:48.200 --> 00:01:50.210
pull in really quickly,
throw up a dashboard.

00:01:50.210 --> 00:01:53.480
And everyone can have controls
and filters on it, interact

00:01:53.480 --> 00:01:57.570
with it, drill down, visualize
the data any way they want.

00:01:57.570 --> 00:02:00.610
It's also easy to get the data
from external sources.

00:02:00.610 --> 00:02:01.970
And I'll cover that.

00:02:01.970 --> 00:02:05.750
So I'd like to start by going
through a couple of slides.

00:02:05.750 --> 00:02:07.000
Let's see.

00:02:10.150 --> 00:02:11.480
Everyone can see that?

00:02:11.480 --> 00:02:13.790
Great.

00:02:13.790 --> 00:02:16.480
So basically, what is it?

00:02:16.480 --> 00:02:20.160
We're going to be creating
a dashboard, which is a

00:02:20.160 --> 00:02:23.990
combination of several things.

00:02:23.990 --> 00:02:27.960
We are using a data source to
get some data into our Apps

00:02:27.960 --> 00:02:29.220
Script application.

00:02:29.220 --> 00:02:31.710
We're going to add charts and
controls to it in order to let

00:02:31.710 --> 00:02:34.780
users change the data
that's visualized.

00:02:34.780 --> 00:02:38.510
And then we're going to build
a dashboard in a UI app and

00:02:38.510 --> 00:02:42.110
return that so that people can
visualize it on a web page or

00:02:42.110 --> 00:02:45.300
embed it in a spreadsheet or
Google Site or what have you.

00:02:45.300 --> 00:02:49.080
The second part of this, I'll
be doing a demo showing this

00:02:49.080 --> 00:02:51.750
interaction between a
spreadsheet attached to a form

00:02:51.750 --> 00:02:53.670
and how those populated
values can

00:02:53.670 --> 00:02:56.260
propagate onto a live dashboard.

00:02:56.260 --> 00:02:59.230
And then also, I'll be showing
you something that I built

00:02:59.230 --> 00:03:02.520
recently that I actually use
in my day-to-day work.

00:03:02.520 --> 00:03:05.140
It's like a Stack Overflow
monitoring system.

00:03:05.140 --> 00:03:09.950
And it's a way to query an
external API very quickly

00:03:09.950 --> 00:03:11.900
using URL Fetch in Apps Script,
and then just pull

00:03:11.900 --> 00:03:14.500
that together into
a dashboard.

00:03:14.500 --> 00:03:15.480
So let's get started.

00:03:15.480 --> 00:03:16.370
DAN LAZIN: Let's.

00:03:16.370 --> 00:03:17.460
KALYAN REDDY: All right.

00:03:17.460 --> 00:03:21.390
So what is the Charts Service?

00:03:21.390 --> 00:03:22.740
It's a part of Apps Script.

00:03:22.740 --> 00:03:26.400
It's a service that gives you
access to several different

00:03:26.400 --> 00:03:27.270
types of charts.

00:03:27.270 --> 00:03:30.790
Examples are area charts, line
charts, scatter, pie.

00:03:30.790 --> 00:03:34.520
There's many of them, combined
with controls that I'll get to

00:03:34.520 --> 00:03:37.130
later, served from a UI app.

00:03:37.130 --> 00:03:39.250
And I think I already
mentioned this.

00:03:39.250 --> 00:03:42.010
So an example of how to invoke
it is from a script file.

00:03:42.010 --> 00:03:46.150
You would just do Var Chart
equals Charts.newBarChart, dot

00:03:46.150 --> 00:03:47.180
setDataTable, Data.

00:03:47.180 --> 00:03:52.020
So the newBarChart will give
you a new chart builder, in

00:03:52.020 --> 00:03:53.530
this example a bar chart.

00:03:53.530 --> 00:03:56.220
And then also, you can
add some data to it.

00:03:56.220 --> 00:04:00.870
So that's a very quick outline
of how to do it.

00:04:00.870 --> 00:04:02.700
And I'll go into more detail.

00:04:02.700 --> 00:04:04.730
One of the major things that's
important about the Charts

00:04:04.730 --> 00:04:06.830
Service is the Builder
pattern.

00:04:06.830 --> 00:04:08.080
It's used everywhere.

00:04:10.800 --> 00:04:13.320
The goal of the Builder pattern
is to abstract the

00:04:13.320 --> 00:04:16.640
steps of object creation so
that you can do it in

00:04:16.640 --> 00:04:19.750
different orders.

00:04:19.750 --> 00:04:22.730
OK, so maybe it's best
demonstrated by an example.

00:04:22.730 --> 00:04:24.740
Here I'm using
Charts.newLineChart.

00:04:24.740 --> 00:04:28.130
And that returns a line
chart builder object.

00:04:28.130 --> 00:04:31.850
And on that object, I can call
these various methods, like

00:04:31.850 --> 00:04:34.210
setDimensions, setTitle,
useLogScale.

00:04:34.210 --> 00:04:35.750
I can call them in various
orders, as well.

00:04:35.750 --> 00:04:36.940
And there are many
more options.

00:04:36.940 --> 00:04:39.610
You choose which options you
want to set and change from

00:04:39.610 --> 00:04:40.410
the defaults.

00:04:40.410 --> 00:04:42.650
And you create your
chart that way.

00:04:42.650 --> 00:04:46.460
And the key to everything built
this way is the build

00:04:46.460 --> 00:04:47.620
call at the end.

00:04:47.620 --> 00:04:51.260
After you're satisfied with the
way you've configured your

00:04:51.260 --> 00:04:53.830
object, you call builder.build,
and it returns

00:04:53.830 --> 00:04:54.910
you the chart object.

00:04:54.910 --> 00:04:57.720
So on the one side, it's
a line chart builder.

00:04:57.720 --> 00:04:58.510
You call build.

00:04:58.510 --> 00:05:00.070
It returns a line chart.

00:05:00.070 --> 00:05:04.200
And then you can embed this
as a chart in anything.

00:05:04.200 --> 00:05:04.910
DAN LAZIN: Nice and simple.

00:05:04.910 --> 00:05:06.120
KALYAN REDDY: Yes.

00:05:06.120 --> 00:05:09.870
So one of the key things about
charts is a data source.

00:05:09.870 --> 00:05:12.590
Obviously, if you're going to be
showing data, you need the

00:05:12.590 --> 00:05:14.570
data to come in from
somewhere.

00:05:14.570 --> 00:05:17.470
There's a couple ways
to do this.

00:05:17.470 --> 00:05:19.450
A simple way if you just want
to play around and start

00:05:19.450 --> 00:05:21.940
experimenting is to manually
add the data.

00:05:21.940 --> 00:05:25.820
So you can just create a
new DataTable builder.

00:05:25.820 --> 00:05:29.190
And then you can add a column
to it for each category that

00:05:29.190 --> 00:05:30.390
you want in your chart.

00:05:30.390 --> 00:05:33.240
And then you can add a
row for each entry.

00:05:33.240 --> 00:05:35.430
And then you can do Build,
create the DataTable.

00:05:35.430 --> 00:05:38.660
And then you can add
that to a chart.

00:05:38.660 --> 00:05:42.060
Another way is a little
bit more automated.

00:05:42.060 --> 00:05:45.140
If you have a spreadsheet with
the data you're interested in,

00:05:45.140 --> 00:05:49.340
you can access the range of
that spreadsheet, just by

00:05:49.340 --> 00:05:51.590
opening the spreadsheet with
an ID, as you'll see later.

00:05:51.590 --> 00:05:52.970
This is the first demo.

00:05:52.970 --> 00:05:54.010
DAN LAZIN: Using the spreadsheet
service.

00:05:54.010 --> 00:05:55.680
KALYAN REDDY: Using the
spreadsheet service, you pull

00:05:55.680 --> 00:05:57.230
the spreadsheet really
quickly.

00:05:57.230 --> 00:06:00.240
And then you get the range
of the data from

00:06:00.240 --> 00:06:01.330
the spreadsheet service.

00:06:01.330 --> 00:06:03.510
Then you can just pass that
directly into the DataTable.

00:06:03.510 --> 00:06:06.280
And it automatically populates
the columns with the correct

00:06:06.280 --> 00:06:07.900
headers, and the rows.

00:06:07.900 --> 00:06:09.172
DAN LAZIN: That makes it really
powerful, because then

00:06:09.172 --> 00:06:11.040
you can share that spreadsheet
with other people in your

00:06:11.040 --> 00:06:11.900
organization.

00:06:11.900 --> 00:06:13.680
Everybody can be collaborating
on the same data set.

00:06:13.680 --> 00:06:16.420
And you see it reflected in
your live web dashboard.

00:06:16.420 --> 00:06:18.940
KALYAN REDDY: Exactly.

00:06:18.940 --> 00:06:20.810
And also that's a good point
that you made, that it is a

00:06:20.810 --> 00:06:21.670
live dashboard.

00:06:21.670 --> 00:06:24.410
Every time someone new goes to
the page, every time you

00:06:24.410 --> 00:06:27.060
refresh the page, it'll
dynamically pull the new

00:06:27.060 --> 00:06:29.070
values from the spreadsheet
and then update the chart.

00:06:29.070 --> 00:06:29.640
DAN LAZIN: Cool.

00:06:29.640 --> 00:06:31.110
KALYAN REDDY: And the third
way is from a URL.

00:06:31.110 --> 00:06:36.850
You can actually provide a data
source URL and access the

00:06:36.850 --> 00:06:37.710
data that way.

00:06:37.710 --> 00:06:39.100
I'm not going to be showing
you an example of this.

00:06:39.100 --> 00:06:42.860
But I will be using URL Fetch
app to get some data from an

00:06:42.860 --> 00:06:48.440
external API and packaging it up
into a DataTable object and

00:06:48.440 --> 00:06:49.570
using that in a chart.

00:06:49.570 --> 00:06:50.470
We'll get to that.

00:06:50.470 --> 00:06:52.370
It's cool.

00:06:52.370 --> 00:06:55.100
So the second major part of the

00:06:55.100 --> 00:06:58.810
Charts Service are controls.

00:06:58.810 --> 00:07:01.470
Controls are basically user
interface widgets that can

00:07:01.470 --> 00:07:05.840
interact with a person.

00:07:05.840 --> 00:07:08.030
A person can use the controls
to filter the data that the

00:07:08.030 --> 00:07:11.460
DataTable shows.

00:07:11.460 --> 00:07:14.330
So for example, one thing would
be a category picker, or

00:07:14.330 --> 00:07:16.400
maybe a range slider.

00:07:16.400 --> 00:07:20.440
Or if your chart has many
different people's names, you

00:07:20.440 --> 00:07:23.050
can have a text box that's
a string filter.

00:07:23.050 --> 00:07:24.120
You type in a person's name.

00:07:24.120 --> 00:07:26.250
And it filters the chart and
shows only the names that

00:07:26.250 --> 00:07:27.500
match that filter.

00:07:29.890 --> 00:07:32.690
And those are the three main
types of controls-- category

00:07:32.690 --> 00:07:33.930
controls, number range
controls, and

00:07:33.930 --> 00:07:34.950
string filter controls.

00:07:34.950 --> 00:07:38.060
And an example of initializing
those would be using the same

00:07:38.060 --> 00:07:40.980
Builder pattern that I talked
about before where you just do

00:07:40.980 --> 00:07:43.040
Charts.newNumberRangeFilter to
get a number range filter

00:07:43.040 --> 00:07:44.450
builder, for example.

00:07:44.450 --> 00:07:47.750
And then you do
setFilterColumnLabel.

00:07:47.750 --> 00:07:50.270
So you'll notice that this
method is different from the

00:07:50.270 --> 00:07:51.960
method for the other line chart

00:07:51.960 --> 00:07:53.630
builder that we saw earlier.

00:07:53.630 --> 00:07:57.440
So that's an example of
the Builder pattern.

00:07:57.440 --> 00:08:02.290
So you can filter this on
a column labeled Age.

00:08:02.290 --> 00:08:04.030
And then when you call Build,
you get a new builder.

00:08:04.030 --> 00:08:06.680
You can combine that with
the chart, as we'll

00:08:06.680 --> 00:08:08.040
see in just a second.

00:08:08.040 --> 00:08:09.320
Now, dashboards--

00:08:09.320 --> 00:08:11.610
dashboards are a way to bring
all these things together.

00:08:11.610 --> 00:08:12.640
You have your data source.

00:08:12.640 --> 00:08:13.760
You have your charts.

00:08:13.760 --> 00:08:15.030
You have your controls.

00:08:15.030 --> 00:08:16.330
How do you present it
all to the user?

00:08:16.330 --> 00:08:20.120
A dashboard allows you to
combine several charts into

00:08:20.120 --> 00:08:26.010
one organized layout and have
the controls connect to the

00:08:26.010 --> 00:08:28.870
charts so that as you adjust
the controls, as the user

00:08:28.870 --> 00:08:32.210
adjusts the controls, it
dynamically queries the data

00:08:32.210 --> 00:08:35.120
source, pushes that data
source to the charts to

00:08:35.120 --> 00:08:37.235
display only the
relevant data.

00:08:37.235 --> 00:08:39.780
DAN LAZIN: That's a really nice
way to visualize data.

00:08:39.780 --> 00:08:43.539
It allows you to sort
of on the fly out--

00:08:43.539 --> 00:08:48.160
allows different users to filter
things the way they

00:08:48.160 --> 00:08:50.780
would in a spreadsheet, but
doing it live right on the

00:08:50.780 --> 00:08:51.490
visualized data.

00:08:51.490 --> 00:08:51.900
KALYAN REDDY: Exactly.

00:08:51.900 --> 00:08:53.320
So that's the key thing
about this.

00:08:53.320 --> 00:08:55.140
A dashboard is not static.

00:08:55.140 --> 00:08:57.940
You don't just make a view
that's like one size fits all

00:08:57.940 --> 00:09:01.820
for everyone and then publish
that and no one has any option

00:09:01.820 --> 00:09:02.920
on how to change that.

00:09:02.920 --> 00:09:04.550
It's a very dynamic thing.

00:09:04.550 --> 00:09:07.920
And people can consume
the data any way that

00:09:07.920 --> 00:09:09.170
makes sense to them.

00:09:12.000 --> 00:09:14.060
Let's continue to the
live demos now.

00:09:18.600 --> 00:09:21.940
The first demo we're going
to go through is--

00:09:21.940 --> 00:09:24.100
in the interest of saving time,
I've created a simple

00:09:24.100 --> 00:09:26.080
Google Form.

00:09:26.080 --> 00:09:29.000
So it's very easy to
create the form.

00:09:29.000 --> 00:09:30.320
All you do is you go to Drive.

00:09:30.320 --> 00:09:31.130
And you say New Form.

00:09:31.130 --> 00:09:32.780
And then you can set it up.

00:09:32.780 --> 00:09:35.290
Here I have four questions.

00:09:35.290 --> 00:09:36.790
What's your name, your age?

00:09:36.790 --> 00:09:37.730
How do you get to work?

00:09:37.730 --> 00:09:38.600
And how long is the commute?

00:09:38.600 --> 00:09:42.620
It's a simple form to ask
people what their daily

00:09:42.620 --> 00:09:46.930
schedule is like, and then to
collate that data and present

00:09:46.930 --> 00:09:48.730
it in an interesting
way, maybe.

00:09:48.730 --> 00:09:50.270
It's an example.

00:09:50.270 --> 00:09:55.980
Anyway, so I've already been
filling in some data here in

00:09:55.980 --> 00:09:57.280
order to make it
not too boring.

00:09:57.280 --> 00:09:59.610
But here, let's go ahead
and fill in some more.

00:09:59.610 --> 00:10:00.860
I'm going to add myself.

00:10:03.630 --> 00:10:05.110
I walk to work.

00:10:05.110 --> 00:10:06.460
How long is my commute?

00:10:06.460 --> 00:10:08.380
Maybe 12 minutes.

00:10:08.380 --> 00:10:09.410
Go ahead and submit that.

00:10:09.410 --> 00:10:12.260
And as you know, Google Forms
and Spreadsheets have a very

00:10:12.260 --> 00:10:14.490
tight integration where
the entry that I

00:10:14.490 --> 00:10:17.580
just added gets appended.

00:10:17.580 --> 00:10:20.380
And we can add you too, Dan.

00:10:20.380 --> 00:10:21.600
Dan.

00:10:21.600 --> 00:10:23.734
DAN LAZIN: I'm 33.

00:10:23.734 --> 00:10:24.530
Uh-oh.

00:10:24.530 --> 00:10:25.900
I think I'm 33.

00:10:25.900 --> 00:10:26.410
I have no idea.

00:10:26.410 --> 00:10:27.060
KALYAN REDDY: You
think you're 33.

00:10:27.060 --> 00:10:27.630
That works.

00:10:27.630 --> 00:10:28.204
DAN LAZIN: Google would know
this, here to organize the

00:10:28.204 --> 00:10:29.080
world's data.

00:10:29.080 --> 00:10:30.310
KALYAN REDDY: How do
you get to work?

00:10:30.310 --> 00:10:31.190
DAN LAZIN: I bicycle.

00:10:31.190 --> 00:10:32.680
I think you're going
to need a new--

00:10:32.680 --> 00:10:34.660
you're going to have to put
me down as Other, man.

00:10:34.660 --> 00:10:35.004
KALYAN REDDY: All right.

00:10:35.004 --> 00:10:35.520
Fine.

00:10:35.520 --> 00:10:37.470
DAN LAZIN: I mean, it's
New York City.

00:10:37.470 --> 00:10:40.752
It's about 20 minutes, if
I'm going fast, 30 if

00:10:40.752 --> 00:10:41.000
I'm taking my time.

00:10:41.000 --> 00:10:42.220
KALYAN REDDY: You bike
every day, huh?

00:10:42.220 --> 00:10:42.990
DAN LAZIN: Almost every day.

00:10:42.990 --> 00:10:43.460
KALYAN REDDY: Whew.

00:10:43.460 --> 00:10:44.410
All right.

00:10:44.410 --> 00:10:45.580
Let's go ahead and submit you.

00:10:45.580 --> 00:10:47.880
And let's just add another one.

00:10:47.880 --> 00:10:49.130
Let's see.

00:10:50.830 --> 00:10:51.080
Marty McFly.

00:10:51.080 --> 00:10:53.550
DAN LAZIN: Marty McFly.

00:10:53.550 --> 00:10:55.270
KALYAN REDDY: 18, I guess
he was in the movie.

00:10:55.270 --> 00:10:55.560
DAN LAZIN: Always.

00:10:55.560 --> 00:10:56.060
Perpetually.

00:10:56.060 --> 00:10:56.730
KALYAN REDDY: Of course,
he drives

00:10:56.730 --> 00:10:58.450
himself in the DeLorean.

00:10:58.450 --> 00:11:00.900
And I think he can get there
really quickly, because he can

00:11:00.900 --> 00:11:01.530
set the time, right?

00:11:01.530 --> 00:11:02.590
DAN LAZIN: I mean, that's
a negative value.

00:11:02.590 --> 00:11:03.560
KALYAN REDDY: So let's say--

00:11:03.560 --> 00:11:04.260
no.

00:11:04.260 --> 00:11:06.220
I don't know if we want to get
into paradoxes of him getting

00:11:06.220 --> 00:11:07.510
there before he actually left.

00:11:07.510 --> 00:11:07.790
DAN LAZIN: All right.

00:11:07.790 --> 00:11:08.070
All right.

00:11:08.070 --> 00:11:09.250
KALYAN REDDY: So let's
just say one minute.

00:11:09.250 --> 00:11:11.860
Keep it simple.

00:11:11.860 --> 00:11:13.420
That's good enough.

00:11:13.420 --> 00:11:16.450
So we have all these values
automatically populated in a

00:11:16.450 --> 00:11:16.890
spreadsheet.

00:11:16.890 --> 00:11:20.640
And this can work for any form
and any spreadsheet that you

00:11:20.640 --> 00:11:23.280
might have in your own
organization or among a group

00:11:23.280 --> 00:11:24.910
of friends.

00:11:24.910 --> 00:11:28.870
Now let's create a new script
that will call into the

00:11:28.870 --> 00:11:32.160
spreadsheet to get the data
and present it in a nice

00:11:32.160 --> 00:11:34.010
layout for people to use.

00:11:34.010 --> 00:11:36.640
So to do that, I'm going to
create a stand-alone script,

00:11:36.640 --> 00:11:37.890
going to the script.google.com.

00:11:41.990 --> 00:11:42.830
Let's give it a name.

00:11:42.830 --> 00:11:45.480
Let's say Form Visualization.

00:11:45.480 --> 00:11:47.420
DAN LAZIN: That is an
excellent name.

00:11:47.420 --> 00:11:48.720
KALYAN REDDY: It's
very unique.

00:11:48.720 --> 00:11:50.340
I thought a lot about it.

00:11:50.340 --> 00:11:50.910
OK.

00:11:50.910 --> 00:11:52.510
The first thing you want
to do is you want to

00:11:52.510 --> 00:11:54.770
change this to a doGet.

00:11:54.770 --> 00:11:58.140
Because this is a visual
representation of the data,

00:11:58.140 --> 00:12:01.950
we're going to be returning it
as a UI app web service so

00:12:01.950 --> 00:12:04.760
that people can see it
in their web browser.

00:12:04.760 --> 00:12:05.920
All right.

00:12:05.920 --> 00:12:08.320
Now let's get started adding
stuff to this.

00:12:08.320 --> 00:12:13.730
The first thing that we need
is we need to reference a

00:12:13.730 --> 00:12:14.610
spreadsheet.

00:12:14.610 --> 00:12:20.510
So Var SS equals
SpreadsheetApp.getSheetById--

00:12:20.510 --> 00:12:23.230
oh, openById.

00:12:23.230 --> 00:12:25.080
Autocomplete is perfect
for that.

00:12:25.080 --> 00:12:29.570
And then to get the ID of a
spreadsheet, it is this value

00:12:29.570 --> 00:12:29.890
right here.

00:12:29.890 --> 00:12:36.490
So Key Equals before you get
to the numbered GID stuff.

00:12:36.490 --> 00:12:38.780
Just paste that in here.

00:12:38.780 --> 00:12:38.980
OK.

00:12:38.980 --> 00:12:40.000
Now when the script
runs, you'll have

00:12:40.000 --> 00:12:41.510
access to the sheet.

00:12:41.510 --> 00:12:44.185
Var Data is ss.getDataRange.

00:12:47.380 --> 00:12:50.050
And bam, in two steps.

00:12:50.050 --> 00:12:54.480
In two steps, what you were
able to do is open a

00:12:54.480 --> 00:12:58.500
spreadsheet, integrate it very
tightly, and then get all the

00:12:58.500 --> 00:13:00.010
data from it.

00:13:00.010 --> 00:13:02.120
DAN LAZIN: Sorry for those who
are just joining us now.

00:13:02.120 --> 00:13:03.360
We had some technical
difficulties with

00:13:03.360 --> 00:13:04.290
getting the feed up.

00:13:04.290 --> 00:13:08.280
But we are now live at Google
Developers Live.

00:13:08.280 --> 00:13:10.920
You'll be able to catch the
first few minutes of the talk

00:13:10.920 --> 00:13:12.490
that you missed.

00:13:12.490 --> 00:13:15.000
You'll be able to catch them
again earlier if you go to the

00:13:15.000 --> 00:13:20.660
saved feed of the GDL, which
we'll send out a link to with

00:13:20.660 --> 00:13:24.010
our Google Developers Twitter
feed later on.

00:13:24.010 --> 00:13:26.220
KALYAN REDDY: And if you
missed the exciting

00:13:26.220 --> 00:13:27.760
introduction earlier,
this is Dan.

00:13:27.760 --> 00:13:30.145
He's a new tech writer
for the DevRel team.

00:13:30.145 --> 00:13:30.400
DAN LAZIN: Hi, guys.

00:13:30.400 --> 00:13:32.500
KALYAN REDDY: And you can go
read about his exciting

00:13:32.500 --> 00:13:34.530
biography by watching
this video again.

00:13:34.530 --> 00:13:36.510
DAN LAZIN: That's going
to be a great

00:13:36.510 --> 00:13:37.610
afternoon for everybody.

00:13:37.610 --> 00:13:38.600
KALYAN REDDY: All right.

00:13:38.600 --> 00:13:40.360
So let's see here.

00:13:40.360 --> 00:13:43.300
What do we want to do?

00:13:43.300 --> 00:13:50.220
So if we go back to the building
charts, you can step

00:13:50.220 --> 00:13:52.340
through the workflow
in this way.

00:13:52.340 --> 00:13:54.890
First, you make the controls.

00:13:54.890 --> 00:13:55.820
Then you make the chart.

00:13:55.820 --> 00:13:57.390
And then you add them
to the dashboard.

00:13:57.390 --> 00:14:00.230
And then you present
it externally.

00:14:00.230 --> 00:14:04.000
In the interest of not messing
up too much on Live, I do have

00:14:04.000 --> 00:14:05.280
another version of
this script.

00:14:05.280 --> 00:14:07.560
And I'll be copying it line by
line, but still explaining to

00:14:07.560 --> 00:14:08.700
you every step of the way.

00:14:08.700 --> 00:14:11.890
So this is what we've
done so far.

00:14:11.890 --> 00:14:15.890
And the next is we want to
set up are the filters.

00:14:15.890 --> 00:14:16.860
So here we go.

00:14:16.860 --> 00:14:19.770
Now, what I've done is I've
set up three filters.

00:14:19.770 --> 00:14:22.350
If you look at our data in the
spreadsheet, the columns are

00:14:22.350 --> 00:14:25.170
Name, Age, Where do you work,
and How long is your commute.

00:14:25.170 --> 00:14:29.330
So this age filter allows me
to restrict the values that

00:14:29.330 --> 00:14:31.260
appear in the chart
by the age column.

00:14:31.260 --> 00:14:34.410
And how I do that is I create
a new number range filter

00:14:34.410 --> 00:14:35.690
which gives me the builder.

00:14:35.690 --> 00:14:38.950
And on it, I set it to filter
column index 4.

00:14:38.950 --> 00:14:40.150
And if you look at
our spreadsheet,

00:14:40.150 --> 00:14:44.670
that's 0, 1, 2, 3, 4.

00:14:44.670 --> 00:14:46.860
Maybe that's wrong.

00:14:46.860 --> 00:14:48.300
We'll get to that in
just a second.

00:14:48.300 --> 00:14:51.430
But there's a great debugging
tool for this purpose as well.

00:14:51.430 --> 00:14:52.680
Go ahead and build
that age filter.

00:14:55.120 --> 00:14:58.660
Let me zoom in there so
people can see it.

00:14:58.660 --> 00:15:00.290
Now, transport filter--

00:15:00.290 --> 00:15:02.770
this is for, obviously,
if you want to

00:15:02.770 --> 00:15:06.240
drill down by the transport.

00:15:06.240 --> 00:15:09.170
But the key thing to notice the
difference between these

00:15:09.170 --> 00:15:12.590
two is that the age filter
is a number range filter.

00:15:12.590 --> 00:15:14.550
But the transport filter
is a category filter.

00:15:14.550 --> 00:15:17.450
That's because when we set up
the form, I set up the fields

00:15:17.450 --> 00:15:20.890
such that the age filter was a
text box and you just entered

00:15:20.890 --> 00:15:24.840
your age, whereas the transport
filter had options.

00:15:24.840 --> 00:15:28.260
So that's why you had to choose
Other for a bicycle.

00:15:28.260 --> 00:15:29.520
That's why I chose Walking.

00:15:29.520 --> 00:15:31.090
Anyway, there's a set
number of options.

00:15:31.090 --> 00:15:33.710
And you'll see that propagate
to the UI later.

00:15:33.710 --> 00:15:36.280
Now, the last filter is
a number range filter.

00:15:36.280 --> 00:15:38.520
Say you have tons of data in
your charts, and you want to

00:15:38.520 --> 00:15:43.080
just look at the people whose
names start with K. So you can

00:15:43.080 --> 00:15:47.550
create a new string filter, and
then set it to filter on

00:15:47.550 --> 00:15:48.850
any text string.

00:15:48.850 --> 00:15:51.430
And once you build that, you'll
see the control that

00:15:51.430 --> 00:15:53.460
allows you to do just that.

00:15:53.460 --> 00:15:54.470
All right.

00:15:54.470 --> 00:15:54.880
Let's see.

00:15:54.880 --> 00:15:55.050
OK.

00:15:55.050 --> 00:15:58.360
The next thing that we want to
do is add in our charts.

00:15:58.360 --> 00:16:03.210
Now, for this example, I think
it would be pretty cool if we

00:16:03.210 --> 00:16:07.520
can display in a table chart
what our data is.

00:16:07.520 --> 00:16:10.380
And table charts are great
because they're quick.

00:16:10.380 --> 00:16:11.920
You can just say, here's
my data source.

00:16:11.920 --> 00:16:12.680
Put it in a table.

00:16:12.680 --> 00:16:14.030
And then it gives you the

00:16:14.030 --> 00:16:15.520
categories for all the headers.

00:16:15.520 --> 00:16:18.370
And you can say, arrange those
ascending, descending.

00:16:18.370 --> 00:16:20.330
It's a really quick way
to visualize the data.

00:16:20.330 --> 00:16:23.320
And a pie chart, because it's
just a cool visualization.

00:16:23.320 --> 00:16:23.663
DAN LAZIN: Of course.

00:16:23.663 --> 00:16:24.350
Classic.

00:16:24.350 --> 00:16:25.580
KALYAN REDDY: Now notice
how I'm building

00:16:25.580 --> 00:16:26.850
this table chart here.

00:16:26.850 --> 00:16:27.840
Charts.newTableChart--

00:16:27.840 --> 00:16:29.310
that gives me the table
chart builder.

00:16:29.310 --> 00:16:31.960
Then I set the DataView
definition.

00:16:31.960 --> 00:16:35.500
Now, when I was talking about
the DataTables earlier,

00:16:35.500 --> 00:16:39.780
DataTables are the data that
you provide to the charts.

00:16:39.780 --> 00:16:44.490
DataViews are different, in that
they're a specific subset

00:16:44.490 --> 00:16:45.630
of the DataTable.

00:16:45.630 --> 00:16:49.290
So say you only want to have two
columns of the DataTable,

00:16:49.290 --> 00:16:50.650
the first and the
third column.

00:16:50.650 --> 00:16:53.990
You can have the DataView
represent that subset of the

00:16:53.990 --> 00:16:56.960
DataTable by setting up a
new DataView by using

00:16:56.960 --> 00:16:59.020
Charts.newDataViewDefinition
and setting

00:16:59.020 --> 00:17:00.480
the columns on that.

00:17:00.480 --> 00:17:03.280
Here what I'm doing is I'm
setting the DataView to have

00:17:03.280 --> 00:17:05.300
columns 1, 2, 3, and 4.

00:17:05.300 --> 00:17:07.650
Now, if you go to the
spreadsheet, you'll see that

00:17:07.650 --> 00:17:10.579
corresponds to 1, 2, 3, and
4, all the form data.

00:17:10.579 --> 00:17:11.435
And I excluded timestamp.

00:17:11.435 --> 00:17:11.690
DAN LAZIN: Right.

00:17:11.690 --> 00:17:14.150
Indexed from 0, so we're looking
at everything except

00:17:14.150 --> 00:17:14.569
the first column.

00:17:14.569 --> 00:17:17.700
KALYAN REDDY: Exactly, because
no one wants an ugly timestamp

00:17:17.700 --> 00:17:18.950
in their charts.

00:17:21.210 --> 00:17:24.230
Now, to set up the pie chart,
you do something similar.

00:17:24.230 --> 00:17:26.319
Except instead of newTableChart
here, you call

00:17:26.319 --> 00:17:27.810
newPieChart.

00:17:27.810 --> 00:17:30.480
And when you set up the data
view, I set it up using

00:17:30.480 --> 00:17:32.470
columns 1 and 4.

00:17:32.470 --> 00:17:34.080
So what will that give us?

00:17:34.080 --> 00:17:36.760
That'll be their name against
how long their commute is.

00:17:36.760 --> 00:17:39.190
So you can visualize who's
spending most of the time

00:17:39.190 --> 00:17:41.080
getting to work and
not working.

00:17:41.080 --> 00:17:43.030
DAN LAZIN: Nice and easy.

00:17:43.030 --> 00:17:43.710
KALYAN REDDY: OK.

00:17:43.710 --> 00:17:46.420
Now, the next part is setting
up the dashboard.

00:17:46.420 --> 00:17:50.480
Now, like I mentioned earlier,
a dashboard is a way to tie

00:17:50.480 --> 00:17:53.620
these filters and these
charts together.

00:17:53.620 --> 00:17:57.940
It's a way to present everything
in one logical

00:17:57.940 --> 00:18:01.410
chunk so that changing these
controls will change what's

00:18:01.410 --> 00:18:02.760
displayed on all
of the charts.

00:18:02.760 --> 00:18:02.850
DAN LAZIN: Right.

00:18:02.850 --> 00:18:05.020
So instead of drilling down
into each of the different

00:18:05.020 --> 00:18:08.710
charts, you can give your
settings once and allow it to

00:18:08.710 --> 00:18:09.940
be reflected in multiple
charts.

00:18:09.940 --> 00:18:10.940
KALYAN REDDY: Exactly.

00:18:10.940 --> 00:18:13.960
So here I created a new
dashboard panel, which, as you

00:18:13.960 --> 00:18:15.840
notice, is under the
Charts Service.

00:18:15.840 --> 00:18:17.630
It's not in the UI service.

00:18:17.630 --> 00:18:19.780
But it is a panel that you can
add to the UI service, as

00:18:19.780 --> 00:18:21.800
you'll see in just a second.

00:18:21.800 --> 00:18:27.140
When you call setDataTable on
it, you can add data here,

00:18:27.140 --> 00:18:31.240
which up here, as you'll see,
is just the data range.

00:18:31.240 --> 00:18:35.475
It's that easy to connect
a data range to a chart.

00:18:35.475 --> 00:18:37.290
You just pass in the range.

00:18:37.290 --> 00:18:39.260
DAN LAZIN: Now, people who are
used to using Spreadsheet

00:18:39.260 --> 00:18:41.350
Service might have expected that
they would actually be

00:18:41.350 --> 00:18:43.570
getting values for
that data range.

00:18:43.570 --> 00:18:44.840
But here, you're actually
getting the range.

00:18:44.840 --> 00:18:46.130
You're not getting the
values, correct?

00:18:46.130 --> 00:18:46.610
KALYAN REDDY: Right.

00:18:46.610 --> 00:18:49.330
And that's kind of a cool
thing to point out, just

00:18:49.330 --> 00:18:52.520
because it shows how tightly
integrated Apps Script is with

00:18:52.520 --> 00:18:55.350
the rest of the Google
Apps ecosystem.

00:18:55.350 --> 00:18:57.920
You just get this range object
from the spreadsheet.

00:18:57.920 --> 00:19:03.380
And bam, you can use it as like
a native object here.

00:19:03.380 --> 00:19:04.530
Now the next step--

00:19:04.530 --> 00:19:05.890
notice that we're still
in the builder.

00:19:05.890 --> 00:19:07.760
This is another example of
the Builder pattern,

00:19:07.760 --> 00:19:09.900
newDashboardPanel builder.

00:19:09.900 --> 00:19:11.810
Set the data table
on the builder.

00:19:11.810 --> 00:19:15.330
Then we bind that builder.

00:19:15.330 --> 00:19:19.470
So what Bind allows us to do is
take an array of controls

00:19:19.470 --> 00:19:21.230
and bind it to an
array of charts.

00:19:21.230 --> 00:19:22.310
So that's what I have here.

00:19:22.310 --> 00:19:23.260
I have two arrays.

00:19:23.260 --> 00:19:25.300
One array-- these are all the
controls, age filter,

00:19:25.300 --> 00:19:29.220
transport filter, name filter,
that we set up up here.

00:19:29.220 --> 00:19:32.080
And down here are the two
charts, table chart and pie

00:19:32.080 --> 00:19:34.190
chart, which we also
set up up here.

00:19:34.190 --> 00:19:36.300
Now, when you call build, it'll
give you the actual

00:19:36.300 --> 00:19:39.510
dashboard panel that you want
to add to your UI app.

00:19:39.510 --> 00:19:43.220
So next, all we have to do is
create the simple UI app.

00:19:43.220 --> 00:19:45.880
And we will be done.

00:19:45.880 --> 00:19:47.310
Here we go.

00:19:47.310 --> 00:19:47.530
OK.

00:19:47.530 --> 00:19:49.520
Let me go through
this real quick.

00:19:49.520 --> 00:19:53.000
Now, as you may be familiar
with this-- if you're not,

00:19:53.000 --> 00:19:55.940
there's excellent tutorials on
how to use UI app with the

00:19:55.940 --> 00:19:57.450
various services.

00:19:57.450 --> 00:20:00.690
You need to create
an application.

00:20:00.690 --> 00:20:03.790
And that application in turn
will give you access to UI

00:20:03.790 --> 00:20:07.240
elements, like panels that you
can add, widgets that you can

00:20:07.240 --> 00:20:08.500
add to those panels.

00:20:08.500 --> 00:20:10.420
And ultimately, you add the
panel to the UI app.

00:20:10.420 --> 00:20:11.390
And then you return the app.

00:20:11.390 --> 00:20:13.400
And that's what gets rendered
in the user's browser.

00:20:13.400 --> 00:20:13.790
DAN LAZIN: Perfect.

00:20:13.790 --> 00:20:16.460
And just a reminder for those
who missed the very beginning

00:20:16.460 --> 00:20:21.530
here, this UI app is looking
for the doGet function that

00:20:21.530 --> 00:20:24.623
we've sort of got our entire
Charts Script here wrapped to.

00:20:24.623 --> 00:20:25.310
KALYAN REDDY: Exactly.

00:20:25.310 --> 00:20:26.170
And I'll scroll up to that.

00:20:26.170 --> 00:20:29.840
So here is the doGet function.

00:20:29.840 --> 00:20:35.320
Because this presents a UI, you
need the user to see it.

00:20:35.320 --> 00:20:39.250
For example, here in a web
browser, they'll be able to go

00:20:39.250 --> 00:20:40.500
to the URL that we generate.

00:20:40.500 --> 00:20:43.940
And then that performs an HTTP
get, which gets this UI,

00:20:43.940 --> 00:20:44.930
displays it to them.

00:20:44.930 --> 00:20:45.670
There's also other ways.

00:20:45.670 --> 00:20:46.920
You can embed it in
a spreadsheet.

00:20:46.920 --> 00:20:48.260
We won't go into that here.

00:20:48.260 --> 00:20:52.860
But suffice it to know, this
is how you create a very

00:20:52.860 --> 00:20:53.340
simple UI app.

00:20:53.340 --> 00:20:54.170
DAN LAZIN: Yeah.

00:20:54.170 --> 00:20:55.040
Just a few lines of code.

00:20:55.040 --> 00:20:56.770
KALYAN REDDY: And what I do is
I create a filter panel to

00:20:56.770 --> 00:20:59.920
contain all my filters, which
is a simple vertical panel,

00:20:59.920 --> 00:21:01.540
and then a chart panel to
contain my charts, which is a

00:21:01.540 --> 00:21:02.820
horizontal panel.

00:21:02.820 --> 00:21:05.840
And to the filter panel, I add
the age filter, transport

00:21:05.840 --> 00:21:07.940
filter, and name filter,
set spacing just to

00:21:07.940 --> 00:21:09.410
make it look nicer.

00:21:09.410 --> 00:21:11.785
And to the charts panel, I add
table chart, pie chart, and

00:21:11.785 --> 00:21:13.035
set spacing.

00:21:14.680 --> 00:21:19.600
So here's another kind of
extension of that pattern we

00:21:19.600 --> 00:21:20.260
saw earlier.

00:21:20.260 --> 00:21:24.170
When you call add on this, it
returns that panel object.

00:21:24.170 --> 00:21:26.370
So then you can continue
changing it and calling add

00:21:26.370 --> 00:21:29.430
again and again to add all the
things that you want to.

00:21:29.430 --> 00:21:32.360
And then once you've created
your panels containing the

00:21:32.360 --> 00:21:34.620
filters and charts, you add it
to your dashboard, which we

00:21:34.620 --> 00:21:37.480
created up here.

00:21:37.480 --> 00:21:38.550
Right here.

00:21:38.550 --> 00:21:40.350
So I create another vertical
panel just to

00:21:40.350 --> 00:21:41.230
put my panels in.

00:21:41.230 --> 00:21:42.220
It's just an organizational
thing.

00:21:42.220 --> 00:21:43.800
You can do it however
you want.

00:21:43.800 --> 00:21:46.500
There's many different
ways to do this.

00:21:46.500 --> 00:21:48.140
But this is how I do it.

00:21:48.140 --> 00:21:50.550
So you add these two panels
to the dashboard.

00:21:50.550 --> 00:21:54.250
And then you add the dashboard
to the UI app, and then return

00:21:54.250 --> 00:21:54.950
the application.

00:21:54.950 --> 00:21:56.910
DAN LAZIN: It's turtles
all the way down.

00:21:56.910 --> 00:21:57.275
KALYAN REDDY: Yup.

00:21:57.275 --> 00:21:59.790
So here is everything
you need.

00:21:59.790 --> 00:22:01.970
You open the spreadsheet, get
the data range, create the

00:22:01.970 --> 00:22:04.730
filters, create the charts,
add them to a dashboard,

00:22:04.730 --> 00:22:06.330
return the dashboard.

00:22:06.330 --> 00:22:12.580
Now, like other publish as a web
service applications that

00:22:12.580 --> 00:22:14.380
Apps Script has, the
flow is the same.

00:22:14.380 --> 00:22:16.520
You go to Manage Filters,
save a new version--

00:22:19.910 --> 00:22:22.400
the version that you want to
show to people, obviously.

00:22:22.400 --> 00:22:25.930
And then you go to Publish,
Deploy as a Web App, the

00:22:25.930 --> 00:22:28.070
Project Version 1, which
you just saved.

00:22:28.070 --> 00:22:31.810
And now I'll just give myself
access to see it, because this

00:22:31.810 --> 00:22:33.010
is only a demo.

00:22:33.010 --> 00:22:36.750
But you would want it to execute
as [? you ?] yourself

00:22:36.750 --> 00:22:38.150
as the user accessing the app.

00:22:38.150 --> 00:22:41.640
And then Anyone, to let other
people just get the link and

00:22:41.640 --> 00:22:43.530
then go to it.

00:22:43.530 --> 00:22:46.470
Once you deploy it, you
get a URL that you can

00:22:46.470 --> 00:22:47.930
access this app in.

00:22:47.930 --> 00:22:49.230
DAN LAZIN: And just a note.

00:22:49.230 --> 00:22:53.650
If you're using Google Apps
for Domains, you have the

00:22:53.650 --> 00:22:57.720
ability on a per-domain basis
to set what the sharing

00:22:57.720 --> 00:22:59.570
options for published
scripts are.

00:22:59.570 --> 00:23:02.900
So if you want to create a web
app that is visualizing

00:23:02.900 --> 00:23:05.470
proprietary data for your
company, you'll have the

00:23:05.470 --> 00:23:10.000
option to publish that only to
users who are signed in within

00:23:10.000 --> 00:23:10.520
your domain.

00:23:10.520 --> 00:23:13.610
So it's live on the internet,
but only if you're signed in

00:23:13.610 --> 00:23:14.610
as a member of your company.

00:23:14.610 --> 00:23:15.860
KALYAN REDDY: Yes.

00:23:19.520 --> 00:23:19.960
All right.

00:23:19.960 --> 00:23:21.520
And there we go.

00:23:21.520 --> 00:23:24.300
There is our dashboard.

00:23:24.300 --> 00:23:26.100
DAN LAZIN: That is remarkably
professional for just a few

00:23:26.100 --> 00:23:27.220
lines of code.

00:23:27.220 --> 00:23:27.640
KALYAN REDDY: Yeah.

00:23:27.640 --> 00:23:29.990
And you know that there's
still alignment

00:23:29.990 --> 00:23:31.570
issues here and there.

00:23:31.570 --> 00:23:35.190
This thing can be aligned
to these corners.

00:23:35.190 --> 00:23:36.810
If I were to spend more
time on this, I would

00:23:36.810 --> 00:23:37.280
definitely do it.

00:23:37.280 --> 00:23:39.730
And Apps Script gives you all
the options that you need to

00:23:39.730 --> 00:23:41.030
arrange this exactly
how you want it.

00:23:41.030 --> 00:23:43.530
You can arrange the padding,
the spacing, all of these

00:23:43.530 --> 00:23:46.190
things, put panels in panels,
do whatever you want.

00:23:46.190 --> 00:23:49.590
And look at our documentation
for that.

00:23:49.590 --> 00:23:52.450
It very clearly shows exactly
what you can do with all of

00:23:52.450 --> 00:23:53.020
these things.

00:23:53.020 --> 00:23:55.000
DAN LAZIN: Let's show some of
the filtering options here and

00:23:55.000 --> 00:23:56.870
show people how it allows us to
drill down into the data.

00:23:56.870 --> 00:23:57.260
KALYAN REDDY: Sure.

00:23:57.260 --> 00:23:59.680
So here are the three filters
that we added.

00:23:59.680 --> 00:24:02.680
This is for the length of
commute, which is a number

00:24:02.680 --> 00:24:03.140
range filter.

00:24:03.140 --> 00:24:05.610
As you see, it goes between
two number ranges.

00:24:05.610 --> 00:24:07.110
And you can drag the sliders.

00:24:07.110 --> 00:24:08.280
This is the category filter.

00:24:08.280 --> 00:24:09.850
So these are the categories
from the form.

00:24:09.850 --> 00:24:11.970
They automatically get
translated to categories in

00:24:11.970 --> 00:24:13.210
this dropdown box.

00:24:13.210 --> 00:24:14.210
And this the name filter, where

00:24:14.210 --> 00:24:15.810
you can type in strings--

00:24:15.810 --> 00:24:16.290
excuse me.

00:24:16.290 --> 00:24:18.230
This was a string filter.

00:24:18.230 --> 00:24:21.430
So let's start out with
the string filter.

00:24:21.430 --> 00:24:22.720
On the left is our
table chart.

00:24:22.720 --> 00:24:24.020
On the right is our pie chart.

00:24:24.020 --> 00:24:26.280
Let's say we want to
look at just me.

00:24:26.280 --> 00:24:28.960
So I'm going to type
in my name.

00:24:28.960 --> 00:24:31.090
DAN LAZIN: You spend
100% of your time.

00:24:31.090 --> 00:24:33.100
KALYAN REDDY: I don't google
myself all the time.

00:24:33.100 --> 00:24:33.800
What are you talking about?

00:24:33.800 --> 00:24:36.470
Anyway, so yeah,
so this is me.

00:24:36.470 --> 00:24:38.560
Instantly, all the charts
are updated.

00:24:38.560 --> 00:24:40.900
And the pie chart has just me.

00:24:40.900 --> 00:24:42.000
DAN LAZIN: That's a pretty
useful pie chart.

00:24:42.000 --> 00:24:43.820
KALYAN REDDY: So that's my
12% commuting to work.

00:24:43.820 --> 00:24:46.950
And since 12% is all the minutes
ever in this data

00:24:46.950 --> 00:24:48.930
range, I'm all of it.

00:24:48.930 --> 00:24:49.380
OK.

00:24:49.380 --> 00:24:52.200
So let's make it more
interesting.

00:24:52.200 --> 00:24:53.450
Let's look at Dan.

00:24:55.990 --> 00:24:58.950
So now, obviously, you see
filters work just like you

00:24:58.950 --> 00:25:00.630
would expect.

00:25:00.630 --> 00:25:03.670
One key thing before even
jumping into filters is that

00:25:03.670 --> 00:25:06.610
just throwing your data in a
table chart, for example, is a

00:25:06.610 --> 00:25:08.230
great way just to get a
quick handle of what

00:25:08.230 --> 00:25:09.090
your data looks like.

00:25:09.090 --> 00:25:11.310
So here, you can arrange it
alphabetically by clicking

00:25:11.310 --> 00:25:12.080
this header.

00:25:12.080 --> 00:25:14.760
You can arrange it by decreasing
age by clicking

00:25:14.760 --> 00:25:17.450
this, arrange it by
commute times by

00:25:17.450 --> 00:25:20.120
doing that, et cetera.

00:25:20.120 --> 00:25:22.740
Now, we can also filter in
other interesting ways.

00:25:22.740 --> 00:25:24.290
Let's say we only want
to look at the people

00:25:24.290 --> 00:25:25.900
who are using a carpool.

00:25:25.900 --> 00:25:27.490
Click that and bam.

00:25:27.490 --> 00:25:29.960
Carla, Frank, and Willis are the
only ones using carpool.

00:25:29.960 --> 00:25:32.180
And the pie chart also reflects
to see their total

00:25:32.180 --> 00:25:32.860
minutes commuting.

00:25:32.860 --> 00:25:36.140
And it looks like Frank has
a very bad carpool.

00:25:36.140 --> 00:25:38.310
Maybe he's the first
person picked up.

00:25:38.310 --> 00:25:39.620
Maybe he's the driver, so it
takes him the longest.

00:25:42.640 --> 00:25:45.560
Another interesting thing about
this filter is what if

00:25:45.560 --> 00:25:47.310
you want to look at walking
people, also.

00:25:47.310 --> 00:25:49.450
Now you're looking at
carpool and walking.

00:25:49.450 --> 00:25:52.350
So it updates the chart here and
adds the members in here

00:25:52.350 --> 00:25:53.440
accordingly.

00:25:53.440 --> 00:25:55.230
DAN LAZIN: The nice thing is if
you're using this to do a

00:25:55.230 --> 00:25:57.820
presentation in front of a group
as well, if you click on

00:25:57.820 --> 00:25:59.955
one of the segments of the pie
chart, it will actually keep

00:25:59.955 --> 00:26:03.770
it highlighted with that nice
bar there, which allows you to

00:26:03.770 --> 00:26:06.320
sort of use it almost like a
laser pointer when you're

00:26:06.320 --> 00:26:07.550
giving a presentation.

00:26:07.550 --> 00:26:07.570
KALYAN REDDY: Yeah.

00:26:07.570 --> 00:26:09.330
Just give focused areas
of the chart

00:26:09.330 --> 00:26:11.280
that you want to highlight.

00:26:11.280 --> 00:26:11.900
OK.

00:26:11.900 --> 00:26:12.350
Let's see.

00:26:12.350 --> 00:26:15.540
And then number range filter is
like a dynamic filter where

00:26:15.540 --> 00:26:21.700
you can do a number range,
like you would expect.

00:26:21.700 --> 00:26:24.060
And as you can see,
the pie chart is

00:26:24.060 --> 00:26:25.380
getting updated as well.

00:26:25.380 --> 00:26:26.990
It's all very cool.

00:26:26.990 --> 00:26:30.530
But let's move on to an example
that may be more

00:26:30.530 --> 00:26:31.950
applicable to the real world.

00:26:31.950 --> 00:26:34.120
Who really cares how long it
takes for people to commute to

00:26:34.120 --> 00:26:35.570
work, right?

00:26:35.570 --> 00:26:36.440
DAN LAZIN: You do.

00:26:36.440 --> 00:26:36.950
KALYAN REDDY: I do.

00:26:36.950 --> 00:26:38.550
Only me.

00:26:38.550 --> 00:26:41.120
So let's move on
to an example.

00:26:41.120 --> 00:26:43.490
Lots of people use
Stack Overflow.

00:26:43.490 --> 00:26:45.750
As Developer Relations for Apps
Script, we're very active

00:26:45.750 --> 00:26:46.850
on Stack Overflow.

00:26:46.850 --> 00:26:49.330
We have a tag that you can write
your questions against.

00:26:49.330 --> 00:26:54.140
And we try our best to answer
as quickly as possible.

00:26:54.140 --> 00:26:56.890
And we also have a great
community of top contributors

00:26:56.890 --> 00:26:58.580
that also patrol these forums.

00:26:58.580 --> 00:27:00.940
I'm always amazed to see that
I go to answer the question

00:27:00.940 --> 00:27:03.540
and then there's already like
three answers by people that

00:27:03.540 --> 00:27:04.190
don't work here.

00:27:04.190 --> 00:27:04.690
It's great.

00:27:04.690 --> 00:27:08.400
It's great that we have such a
user base that's devoted to

00:27:08.400 --> 00:27:09.450
keeping this project going.

00:27:09.450 --> 00:27:10.460
DAN LAZIN: And very well
informed, too.

00:27:10.460 --> 00:27:10.790
KALYAN REDDY: Yeah.

00:27:10.790 --> 00:27:11.780
DAN LAZIN: Those guys
know their stuff.

00:27:11.780 --> 00:27:12.930
KALYAN REDDY: Definitely.

00:27:12.930 --> 00:27:18.620
And so something that I just
built simply is that Stack

00:27:18.620 --> 00:27:21.080
Overflow provides an API to get
access to things like the

00:27:21.080 --> 00:27:26.240
questions posted to it or the
reputation for certain users.

00:27:26.240 --> 00:27:29.100
There's lots of things
that you can query.

00:27:29.100 --> 00:27:33.110
Apps Scripts' URL Fetch makes
it easy to get that data.

00:27:33.110 --> 00:27:35.460
So let's put two and
two together here.

00:27:35.460 --> 00:27:37.360
We could use URL Fetch
to get the data.

00:27:37.360 --> 00:27:39.180
We have a way to present the
data with charts and

00:27:39.180 --> 00:27:40.480
dashboards.

00:27:40.480 --> 00:27:43.480
You glue those two together,
you have a way to get stuff

00:27:43.480 --> 00:27:47.190
from Stack Overflow and
automatically have it drive in

00:27:47.190 --> 00:27:48.980
to your charts.

00:27:48.980 --> 00:27:52.394
In this example, we'll show you
exactly how to do that.

00:27:52.394 --> 00:27:54.920
Let me try to zoom out here.

00:27:54.920 --> 00:27:56.170
OK.

00:27:58.240 --> 00:28:03.710
And I'll explain this one line
by line as well because it's a

00:28:03.710 --> 00:28:06.110
key to understanding how
simply you can do

00:28:06.110 --> 00:28:08.510
this in Apps Script.

00:28:08.510 --> 00:28:09.020
This is it right here.

00:28:09.020 --> 00:28:11.630
This is all of the code
that you need.

00:28:11.630 --> 00:28:12.560
What I'm doing here--

00:28:12.560 --> 00:28:16.250
URL Fetch app requires a URL.

00:28:16.250 --> 00:28:17.030
And it just gets it.

00:28:17.030 --> 00:28:20.040
And this is the REST-based
API for Stack Overflow.

00:28:20.040 --> 00:28:21.590
As you can see, there's a couple
of parameters here--

00:28:21.590 --> 00:28:23.400
tags, Google Apps Script.

00:28:23.400 --> 00:28:25.320
And I'm getting the
top answerers.

00:28:25.320 --> 00:28:27.030
And I'm getting this
for all time.

00:28:27.030 --> 00:28:30.900
So everyone that has answered a
question that has been asked

00:28:30.900 --> 00:28:34.510
against the Google Apps Script
tag will be reflected

00:28:34.510 --> 00:28:36.170
here in some way.

00:28:36.170 --> 00:28:40.910
Now, once you get the content in
this result object, you do

00:28:40.910 --> 00:28:42.080
a JSON parse.

00:28:42.080 --> 00:28:45.960
The API sends the results
in a JSON string.

00:28:45.960 --> 00:28:46.380
So you do

00:28:46.380 --> 00:28:48.730
result.getContentText and jsonParse.

00:28:48.730 --> 00:28:55.520
And this outputs a JavaScript
object that has key value

00:28:55.520 --> 00:28:56.780
pairs for what you're
interested in.

00:28:56.780 --> 00:28:58.580
And you can actually see
that running here.

00:28:58.580 --> 00:29:01.240
Let me comment out
this logger line.

00:29:01.240 --> 00:29:04.680
Oh, and before I get to that,
I just drill down one level

00:29:04.680 --> 00:29:08.090
into that object and assign
it to this variable.

00:29:08.090 --> 00:29:11.830
So this is actually the raw
output from the API that we

00:29:11.830 --> 00:29:13.550
were able to get very easily
with one line.

00:29:13.550 --> 00:29:17.650
You can get the post count,
the score, the name of the

00:29:17.650 --> 00:29:21.110
user, his reputation, all
of this great stuff.

00:29:21.110 --> 00:29:24.160
And this is for the various
users that are identified as

00:29:24.160 --> 00:29:25.660
top answerers.

00:29:25.660 --> 00:29:26.970
DAN LAZIN: But of course,
in raw log form, it's

00:29:26.970 --> 00:29:28.070
pretty hard to read.

00:29:28.070 --> 00:29:28.940
KALYAN REDDY: Exactly.

00:29:28.940 --> 00:29:29.230
Exactly

00:29:29.230 --> 00:29:29.590
DAN LAZIN: Which is why
we're going to get it

00:29:29.590 --> 00:29:30.240
into a chart here.

00:29:30.240 --> 00:29:32.435
But it's a really good way to
sort of quickly check that

00:29:32.435 --> 00:29:34.140
you're getting the right
stuff from the API.

00:29:34.140 --> 00:29:34.870
KALYAN REDDY: Yeah.

00:29:34.870 --> 00:29:37.960
And it's great for debugging
purposes, too.

00:29:37.960 --> 00:29:40.280
You build your apps one
piece at a time,

00:29:40.280 --> 00:29:40.920
one layer at a time.

00:29:40.920 --> 00:29:42.540
You don't want to just put
everything together and have

00:29:42.540 --> 00:29:44.720
this giant mess where you
can't find out where the

00:29:44.720 --> 00:29:47.060
problem is.

00:29:47.060 --> 00:29:50.120
Now that we know we're getting
the right data, we can also

00:29:50.120 --> 00:29:53.540
use the logger to find out
general format of the data.

00:29:53.540 --> 00:29:56.620
You can tell that there's
objects here.

00:29:56.620 --> 00:29:57.860
The curly braces
denote objects.

00:29:57.860 --> 00:29:59.270
And you can drill in, and
you can find the key

00:29:59.270 --> 00:30:00.000
names of the objects.

00:30:00.000 --> 00:30:02.300
Like display name is to display
the user's name.

00:30:02.300 --> 00:30:04.580
Reputation is that.

00:30:04.580 --> 00:30:08.380
So that tells you a key piece of
information, which I use in

00:30:08.380 --> 00:30:12.050
the rest of the script, as
you'll see in just a second.

00:30:12.050 --> 00:30:14.740
I create a DataTable here.

00:30:14.740 --> 00:30:16.970
I'm not using it from the
spreadsheet in this example.

00:30:16.970 --> 00:30:18.940
I'm making it, but I'm making
it from the data

00:30:18.940 --> 00:30:19.930
that I pulled in.

00:30:19.930 --> 00:30:23.040
And what I do here, I make
columns for name, reputation,

00:30:23.040 --> 00:30:24.640
post count, and score.

00:30:24.640 --> 00:30:27.180
And these again, like I
mentioned, I got from

00:30:27.180 --> 00:30:29.360
examining this log.

00:30:29.360 --> 00:30:35.940
So for every top user that the
API returns, for every user,

00:30:35.940 --> 00:30:38.960
we add a new row to this
DataTable that we set up

00:30:38.960 --> 00:30:39.980
columns for.

00:30:39.980 --> 00:30:44.850
And so this addRow method takes
in four parameters with

00:30:44.850 --> 00:30:46.720
respect to the four columns
that we added.

00:30:46.720 --> 00:30:52.020
And this is the object that we
got directly from the API.

00:30:52.020 --> 00:30:53.590
So here's top users, user.

00:30:53.590 --> 00:30:54.410
So we do user.

00:30:54.410 --> 00:30:57.040
And then we drill down into
a user subobject.

00:30:57.040 --> 00:30:59.930
And then we get the display
name key out of that.

00:30:59.930 --> 00:31:01.620
Then we do the same
for reputation,

00:31:01.620 --> 00:31:03.580
post count, and score.

00:31:03.580 --> 00:31:07.860
And then it's that easy to add
a new row to your data table.

00:31:07.860 --> 00:31:10.400
Now what we need to do is to
build a DataTable, because as

00:31:10.400 --> 00:31:12.420
you'll remember, this
is the builder.

00:31:12.420 --> 00:31:14.840
When we add rows to it we are
building the DataTable, still.

00:31:14.840 --> 00:31:20.330
Then we create the DataTable,
and we create our filters.

00:31:20.330 --> 00:31:24.115
And I want to filter by name,
because again, I want to type

00:31:24.115 --> 00:31:26.700
in my own name to see
my reputation.

00:31:26.700 --> 00:31:28.520
DAN LAZIN: I see
a pattern here.

00:31:28.520 --> 00:31:29.430
KALYAN REDDY: Yeah.

00:31:29.430 --> 00:31:30.745
So let's see.

00:31:30.745 --> 00:31:33.820
And we'll display it in a table
chart, because like I

00:31:33.820 --> 00:31:35.430
mentioned earlier, a table chart
is a really quick way

00:31:35.430 --> 00:31:36.440
just to visualize things.

00:31:36.440 --> 00:31:39.320
And then it provides you nice
ascending, descending sorts

00:31:39.320 --> 00:31:41.950
and everything like that.

00:31:41.950 --> 00:31:45.070
So according to the flow that we
established earlier, create

00:31:45.070 --> 00:31:48.100
a filter, create a chart, and
then create a dashboard to

00:31:48.100 --> 00:31:49.350
hook these things together.

00:31:49.350 --> 00:31:52.020
And here's my dashboard
line here,

00:31:52.020 --> 00:31:53.950
charts.newDashboardPanel.bind.

00:31:53.950 --> 00:31:56.950
We're binding the name
filter to the chart.

00:31:56.950 --> 00:32:00.210
And then we set the DataTable
that we built

00:32:00.210 --> 00:32:02.210
earlier, right here.

00:32:02.210 --> 00:32:06.730
And now this build call will
build the dashboard object.

00:32:06.730 --> 00:32:09.750
And in the rest of the script,
it's just three simple lines

00:32:09.750 --> 00:32:13.820
to create a very simple UI
application and add this

00:32:13.820 --> 00:32:14.540
dashboard panel to it.

00:32:14.540 --> 00:32:15.080
DAN LAZIN: Yes.

00:32:15.080 --> 00:32:15.890
Just like last time.

00:32:15.890 --> 00:32:17.650
KALYAN REDDY: Just
like last time.

00:32:17.650 --> 00:32:18.580
And return the app.

00:32:18.580 --> 00:32:21.410
And then that's all you need.

00:32:21.410 --> 00:32:23.950
Now, I was working on this
earlier, so you are already

00:32:23.950 --> 00:32:26.170
going to see a saved version
that I was working on.

00:32:26.170 --> 00:32:28.370
And then Deploy Web App--

00:32:28.370 --> 00:32:31.450
I've already deployed
it to this URL.

00:32:31.450 --> 00:32:32.840
So we can just go to that.

00:32:37.730 --> 00:32:39.550
There you go.

00:32:39.550 --> 00:32:41.020
So in just a couple lines
of code, you can

00:32:41.020 --> 00:32:42.090
get this nice table.

00:32:42.090 --> 00:32:43.970
And you can organize
it by reputation.

00:32:43.970 --> 00:32:45.270
Let's see who has the
highest here.

00:32:45.270 --> 00:32:49.100
Eduardo has 51,046 reputation.

00:32:49.100 --> 00:32:52.470
DAN LAZIN: Hopefully Eduardo
is watching GDL right now.

00:32:52.470 --> 00:32:53.370
KALYAN REDDY: Yeah.

00:32:53.370 --> 00:32:54.370
And Henrique--

00:32:54.370 --> 00:32:57.160
he's another guy who is always
on top of questions before I

00:32:57.160 --> 00:32:57.550
get to them.

00:32:57.550 --> 00:33:00.070
You know, there are some very
active users in the community.

00:33:00.070 --> 00:33:01.750
You have to go all the way
down here to find someone

00:33:01.750 --> 00:33:04.310
who's on the team.

00:33:04.310 --> 00:33:06.820
So here's the number of
posts that they posted

00:33:06.820 --> 00:33:08.100
against this tag.

00:33:08.100 --> 00:33:10.100
And here's the score
for the posts.

00:33:10.100 --> 00:33:11.540
So let's see.

00:33:11.540 --> 00:33:13.060
Obviously we're going
to use this filter,

00:33:13.060 --> 00:33:13.730
check out my name.

00:33:13.730 --> 00:33:14.960
I actually don't want
to do this now.

00:33:14.960 --> 00:33:16.790
As you'll see, my reputation
is not as high

00:33:16.790 --> 00:33:17.920
as it should be.

00:33:17.920 --> 00:33:19.570
I've got to work on that.

00:33:19.570 --> 00:33:20.080
But anyway--

00:33:20.080 --> 00:33:21.570
DAN LAZIN: This is going to be
our sort of death match leader

00:33:21.570 --> 00:33:23.140
board inside the office.

00:33:23.140 --> 00:33:23.164
KALYAN REDDY: Exactly.

00:33:23.164 --> 00:33:24.400
This is going to drive
us to do better.

00:33:24.400 --> 00:33:26.370
That's the power of just
simple dashboards here.

00:33:26.370 --> 00:33:27.950
You can have the whole team
refer to this and be like,

00:33:27.950 --> 00:33:29.680
hey, I want to get higher
than that guy.

00:33:29.680 --> 00:33:31.570
Keep on driving up
their stats.

00:33:31.570 --> 00:33:34.190
And we actually do use something
like this for our

00:33:34.190 --> 00:33:38.910
issue tracker as well, just to
make sure that we're all

00:33:38.910 --> 00:33:42.550
working on it, we're all
contributing, and we're all

00:33:42.550 --> 00:33:46.550
making the user experience
the best for our users.

00:33:46.550 --> 00:33:48.340
And so it's just that simple.

00:33:48.340 --> 00:33:49.880
In 20, 30 lines of code,
you can just

00:33:49.880 --> 00:33:50.960
get something running.

00:33:50.960 --> 00:33:54.110
Now, a slight extension to this
is the final thing that

00:33:54.110 --> 00:33:55.800
I'm going to show to you.

00:33:55.800 --> 00:34:01.160
This is another feature of
the Stack Overflow API.

00:34:01.160 --> 00:34:02.970
Not only can you get the
reputation of users, you can

00:34:02.970 --> 00:34:04.880
also get the questions that
they asked against a

00:34:04.880 --> 00:34:06.850
particular tag.

00:34:06.850 --> 00:34:09.159
Now, this code is a little
bit more complex.

00:34:09.159 --> 00:34:10.350
It's a little bit more involved,
just because you

00:34:10.350 --> 00:34:12.719
have to do some more processing
of the data after

00:34:12.719 --> 00:34:13.290
you get it.

00:34:13.290 --> 00:34:14.929
But it's not bad.

00:34:14.929 --> 00:34:16.630
You can definitely follow
along and understand

00:34:16.630 --> 00:34:17.219
everything.

00:34:17.219 --> 00:34:19.150
This is not commented because
I just wanted to show you

00:34:19.150 --> 00:34:20.449
without scrolling
around too much.

00:34:20.449 --> 00:34:22.870
But I will comment this code
and put it up there.

00:34:22.870 --> 00:34:25.920
And we'll add a link to it in
the event description so you

00:34:25.920 --> 00:34:28.730
can access it and look at
it at your own leisure.

00:34:28.730 --> 00:34:31.620
Now, this code is similar in
that it contains a doGet.

00:34:31.620 --> 00:34:34.350
It'll be displayed in a web
page just like before.

00:34:34.350 --> 00:34:36.620
It starts out by calling this
getQuestions function, which

00:34:36.620 --> 00:34:37.780
is something that I wrote.

00:34:37.780 --> 00:34:41.290
And all this does is it calls
another method of the Stack

00:34:41.290 --> 00:34:44.520
Overflow API here.

00:34:44.520 --> 00:34:48.340
And it gets everything
tagged Tag.

00:34:48.340 --> 00:34:50.110
Sorts by creation, whatever.

00:34:50.110 --> 00:34:52.710
So tag here is google-maps.

00:34:52.710 --> 00:34:55.389
So we're actually fetching all
of the questions on Stack

00:34:55.389 --> 00:34:59.480
Overflow that are tagged
google-maps from this date,

00:34:59.480 --> 00:35:01.640
which is a Unix epoch date.

00:35:01.640 --> 00:35:04.390
It's basically seven
days before now.

00:35:04.390 --> 00:35:05.980
I did the calculations
and put it in there.

00:35:05.980 --> 00:35:08.640
If I made the script more
dynamic, I could have the user

00:35:08.640 --> 00:35:09.750
enter the date and all that.

00:35:09.750 --> 00:35:13.350
But this is just a sample to
show you what can be done.

00:35:13.350 --> 00:35:17.230
Like before, we get the object
by parsing the JSON that we

00:35:17.230 --> 00:35:18.610
get from the API.

00:35:18.610 --> 00:35:22.510
And the Total field displays the
total number of questions.

00:35:22.510 --> 00:35:27.790
We just keep on doing this Why
loop until we've fetched all

00:35:27.790 --> 00:35:31.910
of the questions for the past
seven days, is basically the

00:35:31.910 --> 00:35:32.710
meat of this function.

00:35:32.710 --> 00:35:35.630
It then appends it to an array
called Questions and returns

00:35:35.630 --> 00:35:38.700
that to our main
function here.

00:35:38.700 --> 00:35:44.270
In this main function, I want
to do a couple of things.

00:35:44.270 --> 00:35:47.650
The goal of this dashboard is
I want to have the date the

00:35:47.650 --> 00:35:49.170
questions were asked.

00:35:49.170 --> 00:35:52.220
And we track the total number
of questions for that date

00:35:52.220 --> 00:35:53.730
versus the number of unanswered
questions that

00:35:53.730 --> 00:35:55.110
still remain for that date.

00:35:55.110 --> 00:35:57.740
This is good for teams like
DevRel teams who are

00:35:57.740 --> 00:35:59.790
patrolling these boards to see
how many questions are

00:35:59.790 --> 00:36:02.030
slipping through that users
are still having problems

00:36:02.030 --> 00:36:04.720
with, how much more active
we need to be.

00:36:04.720 --> 00:36:05.980
So I set up three columns.

00:36:05.980 --> 00:36:08.280
And you'll see the column type
is very important here,

00:36:08.280 --> 00:36:12.730
because the date that's returned
is a string, as

00:36:12.730 --> 00:36:14.190
you'll see in the chart later.

00:36:14.190 --> 00:36:16.930
But these unanswered and total
are numbers, so you can pass

00:36:16.930 --> 00:36:19.550
them in as numbers and Charts
can use them as numbers and

00:36:19.550 --> 00:36:20.800
filter them as numbers.

00:36:23.940 --> 00:36:24.710
Ignore this here.

00:36:24.710 --> 00:36:26.710
This is just to log it.

00:36:26.710 --> 00:36:30.790
Again, allowing a log is a
great way to have logging

00:36:30.790 --> 00:36:32.375
statements in intermediate
steps to make sure,

00:36:32.375 --> 00:36:33.410
hey, I got this far.

00:36:33.410 --> 00:36:34.280
I'm still on track.

00:36:34.280 --> 00:36:35.120
I'm still good to go.

00:36:35.120 --> 00:36:36.580
DAN LAZIN: And if you want
something a little more

00:36:36.580 --> 00:36:39.540
sophisticated, you can use the
built-in debugger in the Apps

00:36:39.540 --> 00:36:40.560
Script editor as well.

00:36:40.560 --> 00:36:41.050
KALYAN REDDY: Definitely.

00:36:41.050 --> 00:36:44.100
The debugger lets you step
through and examine all of

00:36:44.100 --> 00:36:47.620
your objects and drill
into the objects.

00:36:47.620 --> 00:36:50.960
And that might be another
video coming up, so

00:36:50.960 --> 00:36:53.060
stay tuned for that.

00:36:53.060 --> 00:36:54.960
DAN LAZIN: For code as simple as
this, really, Logger.log is

00:36:54.960 --> 00:36:55.550
all you need.

00:36:55.550 --> 00:36:56.420
KALYAN REDDY: Exactly.

00:36:56.420 --> 00:37:00.210
So what I'm essentially doing
here is I'm keeping track of

00:37:00.210 --> 00:37:02.290
two objects, total and
number unanswered.

00:37:02.290 --> 00:37:04.880
I'm looping through all of the
questions that I get back from

00:37:04.880 --> 00:37:10.100
my API request and converting
the date that's in the

00:37:10.100 --> 00:37:13.900
questions into a human-readable
date string,

00:37:13.900 --> 00:37:14.940
without the time.

00:37:14.940 --> 00:37:16.380
Because I don't really care
about the time of the question

00:37:16.380 --> 00:37:18.430
in the date, just the day that
the question was asked.

00:37:18.430 --> 00:37:20.270
And then I create a tally.

00:37:20.270 --> 00:37:24.260
So I add it to the numUnanswered
object if the

00:37:24.260 --> 00:37:29.670
questions.answer_count that I
got from the API is zero.

00:37:29.670 --> 00:37:32.360
And otherwise I add them to
both that and the total.

00:37:32.360 --> 00:37:34.670
So I have two things, number
unanswered for each date and

00:37:34.670 --> 00:37:36.830
the total for each day.

00:37:36.830 --> 00:37:38.810
Now I loop through the
number unanswered.

00:37:38.810 --> 00:37:39.770
I can loop through
either one here.

00:37:39.770 --> 00:37:42.540
And I create a DataTable like
you've seen before by adding a

00:37:42.540 --> 00:37:44.610
row for each object.

00:37:44.610 --> 00:37:48.470
And what I add here is i, which
is the key of the number

00:37:48.470 --> 00:37:51.400
unanswered, which you can see
here is the question date,

00:37:51.400 --> 00:37:52.650
which is a string.

00:37:52.650 --> 00:37:54.570
That's a lot of whiches.

00:37:54.570 --> 00:37:56.180
Anyway, you can add the row.

00:37:56.180 --> 00:37:59.840
And then it has two other things
that you pass in to the

00:37:59.840 --> 00:38:03.025
addRow, which is number
unanswered i, and

00:38:03.025 --> 00:38:04.080
then the total i.

00:38:04.080 --> 00:38:06.180
Obviously, those are the number
unanswered and total

00:38:06.180 --> 00:38:08.000
for each day.

00:38:08.000 --> 00:38:09.300
Build the DataTable.

00:38:09.300 --> 00:38:10.720
Create an area chart--

00:38:10.720 --> 00:38:13.290
now, area chart is a different
chart than what we've been

00:38:13.290 --> 00:38:14.340
using before.

00:38:14.340 --> 00:38:17.860
Area chart is good if you want
to do things like stacking.

00:38:17.860 --> 00:38:18.910
That's a key difference.

00:38:18.910 --> 00:38:23.760
So here, what my ultimate goal
in this dashboard is is to

00:38:23.760 --> 00:38:26.400
have the unanswered at a certain
level and then show

00:38:26.400 --> 00:38:31.030
the total as an addition
to the stacking.

00:38:31.030 --> 00:38:32.700
So you'll see newAreaChart .

00:38:32.700 --> 00:38:35.290
And in the builder, I call the
setStack method, which is new

00:38:35.290 --> 00:38:36.730
for this builder.

00:38:36.730 --> 00:38:38.910
And then I also pass
in the dimensions.

00:38:38.910 --> 00:38:40.670
Now, just set the axis titles.

00:38:40.670 --> 00:38:42.370
Like I said before, you can
make these charts a lot

00:38:42.370 --> 00:38:44.000
prettier than what you're
seeing right now.

00:38:44.000 --> 00:38:45.520
So don't think this
is all you can do.

00:38:45.520 --> 00:38:48.110
This is only the tip of the
hat, tip of the iceberg.

00:38:48.110 --> 00:38:49.110
DAN LAZIN: Whatever.

00:38:49.110 --> 00:38:50.616
My hat is floating beneath
the water.

00:38:50.616 --> 00:38:54.130
So I'm like a shark
with a hat.

00:38:54.130 --> 00:38:57.280
KALYAN REDDY: So here
we build our table.

00:38:57.280 --> 00:38:58.720
So another thing is I
want to make an area

00:38:58.720 --> 00:38:59.690
chart and a table chart.

00:38:59.690 --> 00:39:02.090
And like I said, the
table chart is just

00:39:02.090 --> 00:39:02.860
like a sanity check.

00:39:02.860 --> 00:39:05.930
You can see that everything's
there that you want it to.

00:39:05.930 --> 00:39:08.080
So I created both an area
chart and a table chart.

00:39:08.080 --> 00:39:11.300
And I set their data sources
to be the same, so they're

00:39:11.300 --> 00:39:13.020
[? both driving ?]
the same data.

00:39:13.020 --> 00:39:14.410
Create the application.

00:39:14.410 --> 00:39:16.300
And you'll notice this time, I
didn't create a dashboard.

00:39:16.300 --> 00:39:19.020
I just added the charts directly
to the application,

00:39:19.020 --> 00:39:20.450
which is fine.

00:39:20.450 --> 00:39:23.380
If you want to simply show
something, a dashboard allows

00:39:23.380 --> 00:39:25.380
you to have controls
to drill into it.

00:39:25.380 --> 00:39:26.700
This time, I'm not
using controls.

00:39:26.700 --> 00:39:31.830
I'm just displaying this
dynamically queried result.

00:39:31.830 --> 00:39:34.000
So you can just simply add it.

00:39:34.000 --> 00:39:35.240
So many ways to do this.

00:39:35.240 --> 00:39:37.510
And let's go see what
it looks like.

00:39:37.510 --> 00:39:39.980
Like I mentioned before, I was
working on this, so I already

00:39:39.980 --> 00:39:42.030
saved a version.

00:39:42.030 --> 00:39:43.210
And I already deployed it.

00:39:43.210 --> 00:39:45.590
So let's copy the web app URL.

00:39:45.590 --> 00:39:46.840
And we'll try it out.

00:39:49.700 --> 00:39:51.620
There you go.

00:39:51.620 --> 00:39:53.060
Looks can be improved,
of course.

00:39:53.060 --> 00:39:55.400
But here is our area chart.

00:39:55.400 --> 00:39:57.350
And here is our table chart.

00:39:57.350 --> 00:39:58.410
DAN LAZIN: That's a really
great way of sort of

00:39:58.410 --> 00:40:00.080
visualizing where
we're sitting.

00:40:00.080 --> 00:40:00.700
KALYAN REDDY: Yeah.

00:40:00.700 --> 00:40:03.350
So here you see on one axis
are the dates for the last

00:40:03.350 --> 00:40:05.420
seven days, like a query
from the API.

00:40:05.420 --> 00:40:08.250
And then on this axis is the
number of questions.

00:40:08.250 --> 00:40:09.820
Red is the total, and
this unanswered.

00:40:09.820 --> 00:40:12.070
You'll notice the stacking
method that we called on the

00:40:12.070 --> 00:40:15.660
builder shows here, where this
is 10 questions, and

00:40:15.660 --> 00:40:17.730
then this is 36.

00:40:17.730 --> 00:40:20.240
So it's really 36 plus 10.

00:40:20.240 --> 00:40:23.490
That's why you get
up to 46 here.

00:40:23.490 --> 00:40:24.190
It stacks on top.

00:40:24.190 --> 00:40:27.930
So you'll see that the number
of unanswered for the

00:40:27.930 --> 00:40:31.315
google-maps tag could
be better.

00:40:34.110 --> 00:40:36.000
These are the ones that
we're covering.

00:40:36.000 --> 00:40:37.780
These we are not covering.

00:40:37.780 --> 00:40:40.160
DAN LAZIN: But they're still
keeping down to a fairly

00:40:40.160 --> 00:40:42.190
consistent number per day.

00:40:42.190 --> 00:40:42.860
KALYAN REDDY: It's consistent.

00:40:42.860 --> 00:40:44.240
DAN LAZIN: And a lot of answered
questions there.

00:40:44.240 --> 00:40:46.670
KALYAN REDDY: And so a key
advantage is that same code

00:40:46.670 --> 00:40:50.310
that you used can be used for
other things as well.

00:40:50.310 --> 00:40:54.780
Now let's go and check out a tag
that we all know and love.

00:40:54.780 --> 00:40:56.175
Let's change this to
google-apps-script.

00:40:59.120 --> 00:40:59.430
All right.

00:40:59.430 --> 00:41:01.020
Now I saved it.

00:41:01.020 --> 00:41:05.560
I need to save a new version,
because I changed the source.

00:41:05.560 --> 00:41:06.410
Deploy as a Web App.

00:41:06.410 --> 00:41:07.910
We deployed version 2 here.

00:41:10.560 --> 00:41:15.900
And now let's go ahead
and see this.

00:41:15.900 --> 00:41:18.840
And you'll see the numbers
here updated, because now

00:41:18.840 --> 00:41:20.080
we're getting a different
number of questions.

00:41:20.080 --> 00:41:22.140
For this tag, there are fewer
questions asked than for the

00:41:22.140 --> 00:41:23.360
google-maps tag.

00:41:23.360 --> 00:41:25.180
And you'll also see the
distribution is different.

00:41:25.180 --> 00:41:26.290
The unanswered is lower.

00:41:26.290 --> 00:41:29.100
DAN LAZIN: Go us.

00:41:29.100 --> 00:41:31.020
KALYAN REDDY: Your table
chart again shows

00:41:31.020 --> 00:41:34.620
easily sortable metrics.

00:41:34.620 --> 00:41:37.080
And then this will allow
multiple people to come into

00:41:37.080 --> 00:41:40.470
this same central dashboard area
and then make sure that

00:41:40.470 --> 00:41:41.610
we're keeping on track
of this thing.

00:41:41.610 --> 00:41:42.990
DAN LAZIN: That's great.

00:41:42.990 --> 00:41:45.760
Just a reminder for anyone who's
playing along at home

00:41:45.760 --> 00:41:48.170
that if you're just building
this for your own testing

00:41:48.170 --> 00:41:53.905
purposes, you can also use the
Live Code link within Deploy

00:41:53.905 --> 00:41:57.940
as a Web App to see what the
live version of your changes

00:41:57.940 --> 00:41:59.990
is without having to redeploy
every single time you want to

00:41:59.990 --> 00:42:00.580
make a change.

00:42:00.580 --> 00:42:04.170
Deploying the sort of full
version is really for when you

00:42:04.170 --> 00:42:06.070
want to share it with other
people in your organization,

00:42:06.070 --> 00:42:07.450
other people around the world.

00:42:07.450 --> 00:42:11.520
The dev link, the link that ends
in /dev that you'll see

00:42:11.520 --> 00:42:12.790
in that same--

00:42:12.790 --> 00:42:13.240
KALYAN REDDY: Right.

00:42:13.240 --> 00:42:13.970
This is exact.

00:42:13.970 --> 00:42:15.020
It could be /dev as well.

00:42:15.020 --> 00:42:15.850
DAN LAZIN: Exactly.

00:42:15.850 --> 00:42:17.790
That version will allow
you to test your

00:42:17.790 --> 00:42:19.040
own code really quickly.

00:42:21.250 --> 00:42:22.710
Yeah.

00:42:22.710 --> 00:42:24.530
For demo purposes.

00:42:24.530 --> 00:42:24.670
KALYAN REDDY: Yeah.

00:42:24.670 --> 00:42:26.720
That's a great point, so you
can avoid that intermediate

00:42:26.720 --> 00:42:28.230
step of creating a new
label and then

00:42:28.230 --> 00:42:30.160
adding it and all that.

00:42:30.160 --> 00:42:31.380
OK.

00:42:31.380 --> 00:42:35.420
So that's about all I had
for charts today.

00:42:35.420 --> 00:42:38.580
As you can see, it's just a
great way to quickly throw up

00:42:38.580 --> 00:42:42.680
a dashboard and then just have
people go at it, view the data

00:42:42.680 --> 00:42:44.070
however they want to view it.

00:42:44.070 --> 00:42:46.100
DAN LAZIN: That is
really cool.

00:42:46.100 --> 00:42:48.380
One thing I'd like to point
people to is I just ran

00:42:48.380 --> 00:42:51.500
through the charts dashboard
tutorial that we have on our

00:42:51.500 --> 00:42:52.970
site this morning.

00:42:52.970 --> 00:42:54.480
It's really simple.

00:42:54.480 --> 00:42:56.890
And the guys who put it together
did a nice job of

00:42:56.890 --> 00:42:58.175
including all of the
code right at

00:42:58.175 --> 00:42:59.080
the end of the tutorial.

00:42:59.080 --> 00:43:03.360
So you can just paste it into
your script editor, manage

00:43:03.360 --> 00:43:05.170
versions to save a version,
deploy as web app.

00:43:05.170 --> 00:43:06.840
And in three steps, you have a

00:43:06.840 --> 00:43:11.020
functional demo charts dashboard.

00:43:11.020 --> 00:43:14.670
From there, it's a lot easier
to sort of walk through,

00:43:14.670 --> 00:43:16.175
fiddle with the code a bit and
kind of figure out what each

00:43:16.175 --> 00:43:17.320
of the parts are doing.

00:43:17.320 --> 00:43:20.660
So if you go to the Apps Script
website, which is

00:43:20.660 --> 00:43:25.190
developers.googl
e.com/apps-script, click on

00:43:25.190 --> 00:43:29.090
Tutorials in the sidebar on the
left, and then look down

00:43:29.090 --> 00:43:33.990
the page, you'll find a charts
dashboard tutorial.

00:43:33.990 --> 00:43:34.630
Take a look at that.

00:43:34.630 --> 00:43:36.140
It will just take you
five minutes to get

00:43:36.140 --> 00:43:37.780
the basic stuff working.

00:43:37.780 --> 00:43:39.780
And you'll see how powerful
the charts

00:43:39.780 --> 00:43:40.970
dashboard functions are.

00:43:40.970 --> 00:43:41.630
KALYAN REDDY: There you go.

00:43:41.630 --> 00:43:43.420
How much easier could it be?

00:43:43.420 --> 00:43:43.750
All right.

00:43:43.750 --> 00:43:45.650
Well, you have a lot of choices
to continue your

00:43:45.650 --> 00:43:48.390
education and start building
some cool things.

00:43:48.390 --> 00:43:52.860
So go ahead and ask questions
on Stack Overflow.

00:43:52.860 --> 00:43:55.950
Obviously, we're going to
stay on top of that,

00:43:55.950 --> 00:43:56.820
or the Issue Tracker.

00:43:56.820 --> 00:44:00.040
And I hope you enjoyed
this presentation.

00:44:00.040 --> 00:44:03.240
Stay tuned for more videos
coming up from us.

00:44:03.240 --> 00:44:03.920
Thank you.

00:44:03.920 --> 00:44:04.300
DAN LAZIN: Thanks a lot, guys.

00:44:04.300 --> 00:44:05.550
And thank you, Kalyan.

