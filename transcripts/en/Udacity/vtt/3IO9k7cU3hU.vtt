WEBVTT
Kind: captions
Language: en

00:00:00.025 --> 00:00:03.093
I'm going to start by getting the portfolio working because I kind of want to

00:00:03.093 --> 00:00:06.594
see some pictures already. It looks like I need to finish up the

00:00:06.594 --> 00:00:10.201
addFinishedWork method, alright. Now, I need to actually create that

00:00:10.201 --> 00:00:13.749
FinishedPhoto class. So, I'll come back to my overview and make a new class

00:00:13.749 --> 00:00:17.378
FinishedPhoto. I'll move this down here since it's going to be used by the

00:00:17.378 --> 00:00:21.394
portfolio. Now, basically I just want the FinishedPhoto to have the location of

00:00:21.394 --> 00:00:25.580
the file and the name of the photographer. So, I'll create instance variables

00:00:25.580 --> 00:00:28.386
for them, initialize them in the constructor and make it possible for the

00:00:28.386 --> 00:00:32.613
portfolio to get the information back out later. Now, I can go back to the

00:00:32.613 --> 00:00:36.142
portfolio and compile again, and if I were to actually use the correct class

00:00:36.142 --> 00:00:41.780
names, I now have the collecting of finished works working. To display them,

00:00:41.780 --> 00:00:45.428
I'll have to fill in the bits that I left out before. I'll make the picture

00:00:45.428 --> 00:00:49.683
based on what's saved in my finished work object. Translate it to the correct

00:00:49.683 --> 00:00:53.495
position and draw it. The signature will have the same x coordinate. Whoops,

00:00:53.495 --> 00:00:57.590
looks like I have a bit of a name collision here. I've called the picture

00:00:57.590 --> 00:01:02.230
object photo. And I've also called the finishedPhoto, photo. So I'm going to

00:01:02.230 --> 00:01:05.132
call this one work. And I'll need to be careful to change it in exactly the

00:01:05.132 --> 00:01:09.863
right places. And now I can actually get the height of the Picture object, so

00:01:09.863 --> 00:01:15.375
that I'll know where to place the text. And I'll get the actual text for the

00:01:15.375 --> 00:01:19.985
signature from the work object not the picture object. Let's see how we were

00:01:19.985 --> 00:01:23.669
doing. I should probably actually call the constructor when I'm making a Text

00:01:23.669 --> 00:01:27.948
object. And now it's better. So let's see how this is working. I'll go back to

00:01:27.948 --> 00:01:32.326
the overview and create a class PortfolioDemo. PortfolioDemo will have a main

00:01:32.326 --> 00:01:37.006
method where I'll create a Portfolio object and then add some finished work to

00:01:37.006 --> 00:01:41.227
it. Here's one of the images I know is in the package. And I'm actually

00:01:41.227 --> 00:01:46.170
going to use the original photographer's name here. And I'll add two more. And

00:01:46.170 --> 00:01:50.560
at the end, I'll want to display the work. Looks like I should capitalize

00:01:50.560 --> 00:01:55.520
correctly. Try this again. Now, if I run my PortfolioDemo, it prints out the

00:01:55.520 --> 00:01:59.930
three photos with the names just as I wanted. Looks like I'm ready to start

00:01:59.930 --> 00:02:04.340
using the portfolio in the Photographer class. The photographer will need to

00:02:04.340 --> 00:02:08.822
able to accept assignments. When a photographer accepts an assignment, they'll

00:02:08.822 --> 00:02:12.534
take a photo, which in this simulation will mean finding a file name based on a

00:02:12.534 --> 00:02:18.077
description for the assignment. Then the photographer will add the finished

00:02:18.077 --> 00:02:22.460
work and their name into the portfolio. There are a few ways that we could get

00:02:22.460 --> 00:02:25.939
a hold of the portfolio. One is that we could just have it passed in as a

00:02:25.939 --> 00:02:31.334
parameter. In this case, I'll just put it in as an instance variable. Either

00:02:31.334 --> 00:02:33.804
one works. But I'm going to need to take it in as a parameter in the

00:02:33.804 --> 00:02:39.205
constructor. And I'm also going to need the name of the photographer. Which

00:02:39.205 --> 00:02:43.406
will also come in as a parameter in the constructor. Now, that should be all

00:02:43.406 --> 00:02:47.100
set. But my photographer's probably not working all that well yet. I keep using

00:02:47.100 --> 00:02:52.533
assignments. But assignments haven't been defined yet. So I'll make a new

00:02:52.533 --> 00:02:57.887
class. This is all getting pretty squished. That's a bit better. Now, the

00:02:57.887 --> 00:03:00.771
Assignment class isn't going to have a whole lot in it. Basically, the

00:03:00.771 --> 00:03:03.403
Assignment object is what's going to be stored in the to do list for the

00:03:03.403 --> 00:03:06.458
manager and then used by the photographer to know what assignment they should

00:03:06.458 --> 00:03:11.340
do. I know that I'll need a description for the photographer, and I'll

00:03:11.340 --> 00:03:15.170
eventually need a priority but I'll come back to that. And here's my get a

00:03:15.170 --> 00:03:20.948
method for the description. Now, the photographer should compile. Once I fix

00:03:20.948 --> 00:03:24.532
the typos in the assignment and now I can write a PhotographerDemo that shows

00:03:24.532 --> 00:03:29.620
that the Photographer class works. I'll make a new Photographer And give the

00:03:29.620 --> 00:03:34.550
Photographer portfolio. I'll fix a little typo, take out the s that I had here

00:03:34.550 --> 00:03:38.604
in the Photographer class. And then I'll make sure that all of the assignments

00:03:38.604 --> 00:03:42.701
made it into the portfolio by displaying the finished work. When I run the

00:03:42.701 --> 00:03:47.030
PhotographerDemo, I'll get three photos with me pretending to have taken them.

00:03:47.030 --> 00:03:51.695
So that's looking pretty good. Now, I only need to fix the Manager class though

00:03:51.695 --> 00:03:56.220
the Manager does have some of the most complicated logic. The most interesting

00:03:56.220 --> 00:04:00.220
part is when we give out the assignments. The Manager will need a list of

00:04:00.220 --> 00:04:04.220
unfinished assignments. I already defined that earlier in one of the hint

00:04:04.220 --> 00:04:08.708
videos along with a list of photographers. Now, there's this detail about

00:04:08.708 --> 00:04:13.240
assigning the photographer who was hired first the highest priority assignment.

00:04:13.240 --> 00:04:17.755
So, it looks like I'll be iterating over all of the photographers. And I'm

00:04:17.755 --> 00:04:22.406
going to want to look at the one who was hired first, first. Luckily, this

00:04:22.406 --> 00:04:25.382
won't be too difficult since I'm storing all the photographers in an array

00:04:25.382 --> 00:04:30.990
list. They're going to be stored in the list in the order that I hired them. So

00:04:30.990 --> 00:04:33.600
if I iterate over the list, I'm going to iterate over the photographers,

00:04:33.600 --> 00:04:39.060
starting with the one that was hired first. Now, for trickier part. I'll

00:04:39.060 --> 00:04:41.985
want to find the highest priority assignment but you already mostly know how to

00:04:41.985 --> 00:04:48.094
do this. So I'll quickly make a helper method that does this. Now, there is one

00:04:48.094 --> 00:04:53.520
hiccup here, I'll need to add the getPriority method to the Assignment class.

00:04:53.520 --> 00:04:58.156
But that wasn't especially complicated and now I'm back. Looks like I tried to

00:04:58.156 --> 00:05:02.650
index into an array list using parentheses. Alright, now I'm using the get

00:05:02.650 --> 00:05:07.246
method and correcting spelling errors. And I should be able to use my

00:05:07.246 --> 00:05:12.584
getHighestPriorityAssignment method. So, for each photographer, I'll get the

00:05:12.584 --> 00:05:17.072
highest priority assignment, give it to a photographer and remove it so I don't

00:05:17.072 --> 00:05:22.050
do it twice. And one more gotcha. I only want to do these things if there's

00:05:22.050 --> 00:05:26.477
actually another assignment to be done. So, if there are no assignments in the

00:05:26.477 --> 00:05:30.344
list of assignments, I'll skip all of this. I can add an else return here and

00:05:30.344 --> 00:05:33.584
the moment I realize there are no more assignments, I would stop looking

00:05:33.584 --> 00:05:38.100
through the photographers. This isn't necessary but it might skip a lot of

00:05:38.100 --> 00:05:40.950
steps if our company gets really, really big and we have thousands of

00:05:40.950 --> 00:05:46.908
photographers. I think I'm done with the giveOutAssignments method. Now, I'll

00:05:46.908 --> 00:05:50.446
make sure I've implemented all the other methods. I'll need to add a

00:05:50.446 --> 00:05:54.010
photographer to the list when I hire a photographer and make sure to initialize

00:05:54.010 --> 00:05:59.868
all of my array lists, as well as a new portfolio. When I get a new assignment,

00:05:59.868 --> 00:06:03.748
I'll need to add the new assignment to the list of assignments to be done. And

00:06:03.748 --> 00:06:07.164
at the end when I'm ready to check the portfolio, I'll use the portfolio to

00:06:07.164 --> 00:06:12.077
display the finished work. Did it work? Looks like it. If you stuck with that

00:06:12.077 --> 00:06:16.394
problem all the way through and got it, great job. And if you didn't hope that

00:06:16.394 --> 00:06:20.774
you learned something by seeing me go through the exercise. Now, that I have

00:06:20.774 --> 00:06:23.744
this working I would probably want to go back and clean up all of the

00:06:23.744 --> 00:06:29.040
documentation. But I wont make you spend any more time on this example. Ky has

00:06:29.040 --> 00:06:32.692
some important concepts to show you with car share program.

