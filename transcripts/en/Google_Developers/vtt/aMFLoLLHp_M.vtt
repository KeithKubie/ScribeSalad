WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.365
[MUSIC PLAYING]

00:00:12.125 --> 00:00:13.120
TIM BRAY: Hey there.

00:00:13.120 --> 00:00:15.820
I'm Tim Bray, and this
is Breno de Medeiros.

00:00:15.820 --> 00:00:16.780
BRENO DE MEDEIROS: Hi, there.

00:00:16.780 --> 00:00:18.150
TIM BRAY: And we are both
in the Identity

00:00:18.150 --> 00:00:19.180
Group here at Google.

00:00:19.180 --> 00:00:22.860
And we kind of think that
identity is one of the biggest

00:00:22.860 --> 00:00:24.820
pain points on the internet.

00:00:24.820 --> 00:00:26.960
And Google's all about removing
pain points on the

00:00:26.960 --> 00:00:30.410
internet, because we want you
to be online all the time.

00:00:30.410 --> 00:00:34.260
So the center of the pain point
is passwords, of course.

00:00:34.260 --> 00:00:37.390
And remembering passwords sucks,
and typing in passwords

00:00:37.390 --> 00:00:40.650
sucks, and typing in passwords
on mobile devices deeply,

00:00:40.650 --> 00:00:41.910
deeply sucks.

00:00:41.910 --> 00:00:45.820
And this pain point's been
around for a while, and so

00:00:45.820 --> 00:00:48.360
there's been a bunch of
technologies dreamed up by the

00:00:48.360 --> 00:00:50.100
industry over the years
to try and solve it.

00:00:50.100 --> 00:00:53.220
And most of them have gone
nowhere, but we've been

00:00:53.220 --> 00:00:54.590
working on this for a while.

00:00:54.590 --> 00:00:57.020
And Google's betting pretty
heavily on a couple of these

00:00:57.020 --> 00:00:59.670
technologies.

00:00:59.670 --> 00:01:02.800
One of them is called OAuth 2.0,
and there's some other

00:01:02.800 --> 00:01:05.360
stuff built on top of that
like OpenID Connect.

00:01:05.360 --> 00:01:07.670
And Breno here is the tech
lead of the team that's

00:01:07.670 --> 00:01:09.540
actually building
all this stuff.

00:01:09.540 --> 00:01:10.910
And he's also got his name
on the front of a

00:01:10.910 --> 00:01:12.210
bunch of the specs.

00:01:12.210 --> 00:01:14.380
And I don't know how closely you
people have been watching

00:01:14.380 --> 00:01:17.415
this stuff, but that process has
ground on for a long time,

00:01:17.415 --> 00:01:19.810
and it was really
controversial.

00:01:19.810 --> 00:01:23.000
And the editor flounced out of
the room saying everything

00:01:23.000 --> 00:01:24.720
sucked, life sucked, the
internet sucked.

00:01:24.720 --> 00:01:29.320
And the specs weren't frozen
forever and ever, and yet,

00:01:29.320 --> 00:01:31.050
here's Google betting on them.

00:01:31.050 --> 00:01:33.430
And they do things like
send bearer tokens in

00:01:33.430 --> 00:01:35.130
the open and so on.

00:01:35.130 --> 00:01:36.630
So, are we crazy?

00:01:36.630 --> 00:01:37.340
Do they really suck?

00:01:37.340 --> 00:01:40.360
Is OAuth good enough for Google
to be betting on?

00:01:40.360 --> 00:01:43.820
BRENO DE MEDEIROS: OAuth 2.0
has many very good and

00:01:43.820 --> 00:01:47.060
flexible features that makes us
think that it's the right

00:01:47.060 --> 00:01:49.310
fit for the internet
at this point.

00:01:49.310 --> 00:01:52.360
A lot of the criticism
of OAuth 2.0 was

00:01:52.360 --> 00:01:53.920
based on two grounds.

00:01:53.920 --> 00:01:57.510
There was some criticism on the
basis that the security

00:01:57.510 --> 00:01:58.960
was not good enough.

00:01:58.960 --> 00:02:01.840
There was some criticism on the
basis that OAuth 2.0 was

00:02:01.840 --> 00:02:04.010
too complex.

00:02:04.010 --> 00:02:08.780
The complexity argument, I
think, is just unfair.

00:02:08.780 --> 00:02:13.140
OAuth 2.0 is essentially
a suite of protocols.

00:02:13.140 --> 00:02:16.120
It has a number of specialized
flows.

00:02:16.120 --> 00:02:18.640
So if you look at the entire
spec suite, it

00:02:18.640 --> 00:02:20.850
looks like a lot.

00:02:20.850 --> 00:02:23.360
But typically, you come to OAuth
2.0 trying to solve a

00:02:23.360 --> 00:02:24.700
specific problem.

00:02:24.700 --> 00:02:27.420
And when you come with that
perspective, OAuth 2.0 has a

00:02:27.420 --> 00:02:30.040
simple answer to the problem
you're trying to solve.

00:02:30.040 --> 00:02:33.140
And so the complexity argument,
I think, doesn't

00:02:33.140 --> 00:02:34.650
hold much water.

00:02:34.650 --> 00:02:37.480
On the security argument, we
do have a lot of experience

00:02:37.480 --> 00:02:40.810
with addressing hard security
issues and the internet.

00:02:40.810 --> 00:02:43.610
And the fact that we're betting
so heavily on OAuth

00:02:43.610 --> 00:02:46.120
2.0 means that we are
confident we can

00:02:46.120 --> 00:02:48.450
make it work securely.

00:02:48.450 --> 00:02:48.800
TIM BRAY: Excellent.

00:02:48.800 --> 00:02:50.860
Now, it's been changing
and changing.

00:02:50.860 --> 00:02:51.610
Are they finished?

00:02:51.610 --> 00:02:53.440
There's still a working group.

00:02:53.440 --> 00:02:55.470
BRENO DE MEDEIROS: There is
still a working group.

00:02:55.470 --> 00:02:58.540
Essentially, the RFC
is finalized.

00:02:58.540 --> 00:02:59.780
TIM BRAY: There's actually
an RFC number now?

00:02:59.780 --> 00:03:01.110
BRENO DE MEDEIROS: There
is an RFC number.

00:03:01.110 --> 00:03:04.900
And there is still some
extensions that are being

00:03:04.900 --> 00:03:06.200
worked on with OAuth 2.0.

00:03:06.200 --> 00:03:09.460
I think the most important one
to keep track of is the OpenID

00:03:09.460 --> 00:03:13.840
Connect, which is a separate
working group, but it's

00:03:13.840 --> 00:03:18.470
designed to be an identity layer
on top of OAuth 2.0.

00:03:18.470 --> 00:03:19.030
TIM BRAY: OK.

00:03:19.030 --> 00:03:21.700
So we're betting on it.

00:03:21.700 --> 00:03:22.670
What are we actually doing?

00:03:22.670 --> 00:03:23.630
What do we have in production?

00:03:23.630 --> 00:03:24.920
What's out there?

00:03:24.920 --> 00:03:26.330
BRENO DE MEDEIROS: So there
are a couple of things out

00:03:26.330 --> 00:03:29.000
there from the point
of view of APIs.

00:03:29.000 --> 00:03:33.620
Google has been making an
enterprise-wide effort to put

00:03:33.620 --> 00:03:36.530
together some--

00:03:36.530 --> 00:03:40.960
make our APIs work more
homogeneously and

00:03:40.960 --> 00:03:42.120
more easy to use.

00:03:42.120 --> 00:03:43.620
And OAuth is a big
part of this.

00:03:43.620 --> 00:03:49.220
So we are baking OAuth 2.0
in all of our APIs and

00:03:49.220 --> 00:03:52.190
documenting this.

00:03:52.190 --> 00:03:55.020
We are getting good feedback
from developers.

00:03:55.020 --> 00:03:57.670
TIM BRAY: Well, that's a big
deal, because I've only been

00:03:57.670 --> 00:03:58.650
involved in this for a while.

00:03:58.650 --> 00:04:01.860
But up until quite recently,
the developer experience on

00:04:01.860 --> 00:04:02.585
OAuth was horrible.

00:04:02.585 --> 00:04:04.580
It was hard to find good
libraries, and then there were

00:04:04.580 --> 00:04:07.350
11 steps, and you had to have
a deep understanding of

00:04:07.350 --> 00:04:08.500
cryptography and so on.

00:04:08.500 --> 00:04:11.610
And particularly on mobile,
it was no there there.

00:04:11.610 --> 00:04:12.910
So how are we doing?

00:04:12.910 --> 00:04:15.580
BRENO DE MEDEIROS: Mobile is
one of the places where I

00:04:15.580 --> 00:04:20.450
think we have a good start
in OAuth 2.0, really very

00:04:20.450 --> 00:04:21.980
different from what
was there before.

00:04:24.710 --> 00:04:30.540
The new platform for
authorization in Android has,

00:04:30.540 --> 00:04:33.760
essentially, a way to get tokens
based on activities.

00:04:33.760 --> 00:04:40.190
So the user experience of
interacting with an

00:04:40.190 --> 00:04:44.290
application that was built on
these new platforms is that

00:04:44.290 --> 00:04:47.710
the app brings the activity to
let the user choose which

00:04:47.710 --> 00:04:50.000
account they want to use
of the application.

00:04:50.000 --> 00:04:54.470
And after the user chooses the
account, then they are shown

00:04:54.470 --> 00:04:55.860
an approval prompt.

00:04:55.860 --> 00:04:59.380
And if they decide to go forward
with it, which the

00:04:59.380 --> 00:05:02.980
vast majority of the cases they
said it is the case, and

00:05:02.980 --> 00:05:05.910
so then they would be right
back into the application.

00:05:05.910 --> 00:05:08.280
And after that, the application
just has to

00:05:08.280 --> 00:05:13.550
trigger an activity to obtain
a token and access the user

00:05:13.550 --> 00:05:17.720
data from Google APIs with
the user's consent.

00:05:17.720 --> 00:05:18.840
TIM BRAY: I wrote one
of those apps.

00:05:18.840 --> 00:05:23.190
And it's not all that simple,
because it's not synchronous,

00:05:23.190 --> 00:05:24.720
because you might have
to go off the network

00:05:24.720 --> 00:05:25.810
to ask for the token.

00:05:25.810 --> 00:05:29.180
And you might actually have to
go back to the user to check

00:05:29.180 --> 00:05:30.150
for their consent, and so on.

00:05:30.150 --> 00:05:33.870
So it's asynchronous, but
it's not terrible.

00:05:33.870 --> 00:05:36.340
Another thing we've been working
on that isn't actually

00:05:36.340 --> 00:05:38.720
a Google product-- it's an
OpenID Foundation product-- is

00:05:38.720 --> 00:05:40.320
this thing called
Account Chooser.

00:05:40.320 --> 00:05:43.500
And if you go to my blog at
tbray.org, I did a piece on it

00:05:43.500 --> 00:05:45.220
yesterday, I guess.

00:05:45.220 --> 00:05:46.600
And I think that's a big deal.

00:05:46.600 --> 00:05:48.370
It's not a Google product,
as I said.

00:05:48.370 --> 00:05:51.170
It's just a chunk of open-source
JavaScript from

00:05:51.170 --> 00:05:53.040
the OpenID Foundation.

00:05:53.040 --> 00:05:57.180
And what it is trying to offer
is one-click log in, and even

00:05:57.180 --> 00:06:00.860
in some cases one-click
sign up on sites.

00:06:00.860 --> 00:06:03.880
So when you go to some site,
you don't see that site's

00:06:03.880 --> 00:06:04.800
landing page.

00:06:04.800 --> 00:06:07.130
You see just a list of the
accounts you've used to log on

00:06:07.130 --> 00:06:08.230
to various other places.

00:06:08.230 --> 00:06:10.180
You click one, pop!

00:06:10.180 --> 00:06:10.750
You're in.

00:06:10.750 --> 00:06:11.670
One click.

00:06:11.670 --> 00:06:14.340
It's still just starting to
lurch into life, but I think

00:06:14.340 --> 00:06:17.380
it's going to reduce login
friction quite a

00:06:17.380 --> 00:06:19.600
bit around the net.

00:06:19.600 --> 00:06:20.775
BRENO DE MEDEIROS:
Yeah, and Account

00:06:20.775 --> 00:06:23.030
Chooser is a great idea.

00:06:23.030 --> 00:06:26.530
It basically addresses the
issue of what we call the

00:06:26.530 --> 00:06:29.450
NASCAR problem, which is the
fact that the moment that you

00:06:29.450 --> 00:06:32.120
try to accept sign ins from
a different provider--

00:06:32.120 --> 00:06:35.520
say Google, Yahoo, Microsoft,
Live, Facebook--

00:06:35.520 --> 00:06:39.200
you are presented with the
problem of how to render your

00:06:39.200 --> 00:06:39.880
login page.

00:06:39.880 --> 00:06:41.710
What are the options they're
going to put there?

00:06:41.710 --> 00:06:45.210
So Account Chooser gives you a
simple and clean answer to

00:06:45.210 --> 00:06:45.920
that question.

00:06:45.920 --> 00:06:46.880
TIM BRAY: Cool.

00:06:46.880 --> 00:06:48.250
Let me ask another question.

00:06:48.250 --> 00:06:50.060
There's a million Android
developers out there-- well,

00:06:50.060 --> 00:06:52.260
not literally, but there's
really a lot of Android

00:06:52.260 --> 00:06:53.630
developers out there--

00:06:53.630 --> 00:06:56.020
and almost every Android
app has a back end.

00:06:56.020 --> 00:06:57.770
And even the most simple game
will have some sort of a back

00:06:57.770 --> 00:07:00.720
end to persist and share high
scores or something like that.

00:07:00.720 --> 00:07:04.040
And so the guy who's writing the
code for the back end has

00:07:04.040 --> 00:07:05.500
a problem, which is, how
do they know who

00:07:05.500 --> 00:07:06.190
they're talking to?

00:07:06.190 --> 00:07:08.570
I mean, how do they know this
is Joe's high score at

00:07:08.570 --> 00:07:12.290
Solitaire as opposed
to Sally's?

00:07:12.290 --> 00:07:14.110
And you don't want them to have
to go and log in to your

00:07:14.110 --> 00:07:15.770
site again, because they've
already approved

00:07:15.770 --> 00:07:17.250
access to the site.

00:07:17.250 --> 00:07:21.900
So how do I make that easy for
the back-end developer?

00:07:21.900 --> 00:07:27.150
BRENO DE MEDEIROS: So as I
mentioned, we have a number of

00:07:27.150 --> 00:07:30.910
different flows that
are designed to

00:07:30.910 --> 00:07:33.520
address this issue.

00:07:33.520 --> 00:07:37.320
This particular problem is going
to be addressed in the

00:07:37.320 --> 00:07:44.230
new release of the Android
authorization,

00:07:44.230 --> 00:07:45.340
which is very soon.

00:07:45.340 --> 00:07:49.050
And what it allows it to do is
to get a simple, what we call,

00:07:49.050 --> 00:07:53.000
an ID token and authentication
token that the phone can get

00:07:53.000 --> 00:07:58.390
without any additional consent
except the initial consent to

00:07:58.390 --> 00:07:59.840
identify the user.

00:07:59.840 --> 00:08:01.940
They can provide, essentially,
a login

00:08:01.940 --> 00:08:03.290
token to their website.

00:08:03.290 --> 00:08:08.240
And so you don't have to view
the authorization protocol to

00:08:08.240 --> 00:08:10.860
authenticate your device back
to the home server.

00:08:10.860 --> 00:08:11.780
TIM BRAY: Excellent.

00:08:11.780 --> 00:08:13.890
So stand by and watch
for that.

00:08:13.890 --> 00:08:17.160
OK, so I think we've talked
enough, and let's see what

00:08:17.160 --> 00:08:18.190
people want to talk to us.

00:08:18.190 --> 00:08:20.850
Now I see we've got some
questions on the moderator,

00:08:20.850 --> 00:08:24.320
and I understand there may be
some coming in over YouTube.

00:08:24.320 --> 00:08:25.780
So let me sort those.

00:08:25.780 --> 00:08:29.880
So I'm going to skip the first
question, because it isn't

00:08:29.880 --> 00:08:31.640
really about identity.

00:08:31.640 --> 00:08:34.270
OK, our thoughts on Mozilla's
Persona Project.

00:08:34.270 --> 00:08:37.020
It looks promising, simple
for users and developers,

00:08:37.020 --> 00:08:40.090
decentralized, and based
on pragmatic choices.

00:08:40.090 --> 00:08:41.990
And actually, they left
out one thing.

00:08:41.990 --> 00:08:46.260
The people who are promoting
Persona are making very strong

00:08:46.260 --> 00:08:49.420
claims about privacy,
the fact that logins

00:08:49.420 --> 00:08:50.410
won't be logged anywhere.

00:08:50.410 --> 00:08:52.200
So it looks very promising.

00:08:52.200 --> 00:08:54.620
It's kind of complicated.

00:08:54.620 --> 00:09:00.170
I'm pretty sure that the
ecosystem of identity

00:09:00.170 --> 00:09:02.220
providers is going to
be complicated.

00:09:02.220 --> 00:09:03.620
It's going to be
multi-provider,

00:09:03.620 --> 00:09:04.850
multi-protocol.

00:09:04.850 --> 00:09:06.880
I wouldn't be surprised at all
if Persona was one of the

00:09:06.880 --> 00:09:08.180
protocols in there.

00:09:08.180 --> 00:09:10.570
And if it's hard to hook Account
Chooser up to it, then

00:09:10.570 --> 00:09:12.260
that's a bug in Account
Chooser.

00:09:12.260 --> 00:09:14.610
The one issue I had with Persona
that I haven't been

00:09:14.610 --> 00:09:17.370
able to get a straight answer on
yet is, what's the story on

00:09:17.370 --> 00:09:18.150
mobile devices?

00:09:18.150 --> 00:09:21.500
Because anything you're going to
do on identity these days,

00:09:21.500 --> 00:09:24.870
if it doesn't have a good answer
for mobile device app

00:09:24.870 --> 00:09:28.110
programmers, it's just
not very interesting.

00:09:28.110 --> 00:09:29.900
But Persona looks like
a good effort.

00:09:29.900 --> 00:09:34.150
We talk to them on a regular
basis and good for them.

00:09:34.150 --> 00:09:36.165
BRENO DE MEDEIROS: And there is
an interesting overlap, I

00:09:36.165 --> 00:09:40.360
believe, between Persona and
Account Chooser where Account

00:09:40.360 --> 00:09:43.840
Chooser also has many
interesting privacy features.

00:09:43.840 --> 00:09:47.590
The settings are stored only
locally on your client.

00:09:47.590 --> 00:09:51.610
On the other hand, it has a
very simple JavaScript on

00:09:51.610 --> 00:09:54.700
interface that means that it
works in every browser

00:09:54.700 --> 00:09:57.170
essentially, including
mobile platforms.

00:09:57.170 --> 00:10:00.820
And so there is some
possibility, for instance, for

00:10:00.820 --> 00:10:01.930
clients to extend
[? the behavior of ?]

00:10:01.930 --> 00:10:02.820
Account Chooser.

00:10:02.820 --> 00:10:06.610
We think there's a possibility
for these

00:10:06.610 --> 00:10:08.550
efforts to converge further.

00:10:08.550 --> 00:10:08.890
TIM BRAY: That's right.

00:10:08.890 --> 00:10:11.760
In fact, we've had some informal
talk about browser

00:10:11.760 --> 00:10:14.120
builders building Account
Chooser right into the browser

00:10:14.120 --> 00:10:16.760
and I would hope that would snap
on to things like Persona

00:10:16.760 --> 00:10:18.660
very nicely.

00:10:18.660 --> 00:10:19.130
OK.

00:10:19.130 --> 00:10:20.590
MALE SPEAKER: There's one
question on YouTube I wanted

00:10:20.590 --> 00:10:22.710
to address, Tim and Breno.

00:10:22.710 --> 00:10:25.120
One of the conversations
is about authorization.

00:10:25.120 --> 00:10:26.410
And when you give authorization
to your

00:10:26.410 --> 00:10:29.160
identity, often they ask for
nonessential details--

00:10:29.160 --> 00:10:30.420
for example, your photos.

00:10:30.420 --> 00:10:32.750
So if you're trying to share a
high score for a game, they

00:10:32.750 --> 00:10:34.900
also ask for permission
to your photos.

00:10:34.900 --> 00:10:38.150
How do you address kind of
that granular permissions

00:10:38.150 --> 00:10:40.860
issue that's available there?

00:10:40.860 --> 00:10:46.120
BRENO DE MEDEIROS: So our API
authorizations have a concept

00:10:46.120 --> 00:10:49.070
of scope, which is actually also
a concept of the OAuth

00:10:49.070 --> 00:10:50.460
2.0 protocol.

00:10:50.460 --> 00:10:54.740
And what it means is that a
developer that wants to use

00:10:54.740 --> 00:10:57.620
OAuth 2.0 with Google, they will
typically target one or

00:10:57.620 --> 00:10:59.460
more of the Google APIs.

00:10:59.460 --> 00:11:01.860
And when they look at the
documentation of the APIs,

00:11:01.860 --> 00:11:04.760
they'll find out what scopes
they need to use--

00:11:04.760 --> 00:11:08.350
they need to request to have
access to that type of data.

00:11:08.350 --> 00:11:11.640
And the consent page, you have
a single consent page that

00:11:11.640 --> 00:11:15.290
will disclose to the user
everything that the app is

00:11:15.290 --> 00:11:17.500
requesting access to.

00:11:17.500 --> 00:11:19.750
TIM BRAY: I notice in OpenID
Connect, they thought about

00:11:19.750 --> 00:11:20.450
that a lot.

00:11:20.450 --> 00:11:23.600
If you look at OpenID Connect,
they've got some very, very

00:11:23.600 --> 00:11:24.610
well-defined scopes.

00:11:24.610 --> 00:11:27.690
So when you want to go through
that protocol and establish

00:11:27.690 --> 00:11:31.730
identity, you can say, all I
care about is the email.

00:11:31.730 --> 00:11:32.310
Here's this email.

00:11:32.310 --> 00:11:35.520
Is this person actually logged
into that email, yes or no?

00:11:35.520 --> 00:11:36.910
Or you can actually
ask for more.

00:11:36.910 --> 00:11:38.520
You can say email, profile.

00:11:38.520 --> 00:11:40.560
And the definition
of profile varies

00:11:40.560 --> 00:11:42.790
from provider to provider.

00:11:42.790 --> 00:11:44.690
For example, I noticed that
Google has a picture of it,

00:11:44.690 --> 00:11:47.560
but Microsoft Live doesn't
last time I looked.

00:11:47.560 --> 00:11:50.530
And the selection of information
that comes out

00:11:50.530 --> 00:11:53.140
varies from provider provider.

00:11:53.140 --> 00:11:56.820
First of all, the app that's
using this can ask for the

00:11:56.820 --> 00:11:59.300
minimum and, in many
cases, they should.

00:11:59.300 --> 00:12:02.800
And the second important thing
is, as far as I know, you

00:12:02.800 --> 00:12:05.210
always get told what's
going to be given up.

00:12:05.210 --> 00:12:06.380
The scope string always--

00:12:06.380 --> 00:12:06.610
BRENO DE MEDEIROS: Right.

00:12:06.610 --> 00:12:08.300
TIM BRAY: --there's an approval
screen saying, this

00:12:08.300 --> 00:12:10.600
app is asking for this data.

00:12:10.600 --> 00:12:15.200
And if you get a surprise, you
find that it's given more than

00:12:15.200 --> 00:12:17.380
you thought you were giving
access to, that's a bug and

00:12:17.380 --> 00:12:19.480
something that you should
complain about.

00:12:19.480 --> 00:12:20.700
BRENO DE MEDEIROS: Right.

00:12:20.700 --> 00:12:24.960
And even though, as Tim
mentioned, what is actually in

00:12:24.960 --> 00:12:29.430
the profile of the user changes
depending on which

00:12:29.430 --> 00:12:33.980
provider you were targeting,
there is an expectation about

00:12:33.980 --> 00:12:41.330
a set of fields that are
supposed to be commonly found.

00:12:41.330 --> 00:12:43.690
And there is a standard
way to refer to those.

00:12:43.690 --> 00:12:49.285
So you can at least reuse some
of that parsing effort.

00:12:51.820 --> 00:12:52.080
TIM BRAY: OK.

00:12:52.080 --> 00:12:55.780
Let's go back to the moderator
for a moment here.

00:12:55.780 --> 00:12:57.210
Here's one I particularly
like.

00:12:57.210 --> 00:13:00.790
How can relying parties be
certain of the veracity of

00:13:00.790 --> 00:13:01.970
identity providers?

00:13:01.970 --> 00:13:05.010
If I say I'm me, is that good
enough for some access levels

00:13:05.010 --> 00:13:06.170
and not others?

00:13:06.170 --> 00:13:09.160
Should government banks,
VeriSign, or someone else be

00:13:09.160 --> 00:13:11.730
trusted to vouch for our
online identity?

00:13:11.730 --> 00:13:15.330
Well, that's more of a
policy question than

00:13:15.330 --> 00:13:16.810
a technology question.

00:13:16.810 --> 00:13:20.010
Now, do bear in mind that all
of these identity protocols

00:13:20.010 --> 00:13:24.030
work over HTTPS, so you can at
least be sure that you are

00:13:24.030 --> 00:13:25.350
talking to a real identity
provider.

00:13:25.350 --> 00:13:26.770
You really are talking
to Google or

00:13:26.770 --> 00:13:28.900
your bank or whoever.

00:13:28.900 --> 00:13:33.260
And beyond that, you really
enter the universe of trust.

00:13:33.260 --> 00:13:38.930
I mean, would you rather trust
Facebook or Google or your

00:13:38.930 --> 00:13:41.740
bank or your VeriSign
or your university?

00:13:41.740 --> 00:13:45.710
That's a question of
real-world policy.

00:13:45.710 --> 00:13:49.650
The thing, though, is that for
many people who want to offer

00:13:49.650 --> 00:13:52.610
websites, the business of
running a login password

00:13:52.610 --> 00:13:55.600
system and storing passwords and
avoiding being hacked is

00:13:55.600 --> 00:13:58.840
so onerous and so painful and
so expensive that there's a

00:13:58.840 --> 00:14:02.310
real strong desire to get out of
that business and into the

00:14:02.310 --> 00:14:03.750
mode of using identity
providers.

00:14:03.750 --> 00:14:07.160
So I think that people are going
to want to start using

00:14:07.160 --> 00:14:08.130
identity providers.

00:14:08.130 --> 00:14:10.830
And that means that it's really,
I think, the task of

00:14:10.830 --> 00:14:14.200
the identity providers to earn
your trust and keep it.

00:14:14.200 --> 00:14:15.540
BRENO DE MEDEIROS: Exactly.

00:14:15.540 --> 00:14:20.680
The protocols do take on the
task of explaining how you can

00:14:20.680 --> 00:14:25.200
identify the provider in
a trustworthy manner.

00:14:25.200 --> 00:14:27.390
But how much trust you place
in the provider is

00:14:27.390 --> 00:14:28.220
really up to you.

00:14:28.220 --> 00:14:30.570
TIM BRAY: Right.

00:14:30.570 --> 00:14:35.260
So App Engine and the recently
announced Cloud Endpoints

00:14:35.260 --> 00:14:36.590
still in closed beta
I'm afraid?

00:14:36.590 --> 00:14:39.000
Yes, but I think they're
getting close.

00:14:39.000 --> 00:14:41.830
Support OAuth and Play Services
have greatly improved

00:14:41.830 --> 00:14:43.020
OAuth on Android.

00:14:43.020 --> 00:14:44.135
Actually, they made
it possible.

00:14:44.135 --> 00:14:46.050
It really wasn't before.

00:14:46.050 --> 00:14:47.930
So what's the new recommended
way of putting all these

00:14:47.930 --> 00:14:48.850
pieces together?

00:14:48.850 --> 00:14:50.310
Any good examples?

00:14:50.310 --> 00:14:53.280
Well the best example, I think,
is the libraries that

00:14:53.280 --> 00:14:53.870
we provide.

00:14:53.870 --> 00:14:59.560
We provide pre-cooked libraries
in Java and Ruby for

00:14:59.560 --> 00:15:00.650
using all this stuff.

00:15:00.650 --> 00:15:01.880
And they just make
all that go away.

00:15:01.880 --> 00:15:04.260
You say, here's the API I want
to access, here's who I am,

00:15:04.260 --> 00:15:06.760
and it goes away and does
all the OAuth dance.

00:15:06.760 --> 00:15:11.890
And that's also going to be work
for the Cloud Endpoints

00:15:11.890 --> 00:15:14.790
in the App Engine case.

00:15:14.790 --> 00:15:17.440
So if you can use those,
that's a good idea.

00:15:17.440 --> 00:15:20.080
I, myself, tend to like building
at a lower level and

00:15:20.080 --> 00:15:23.220
actually using the RESTful
endpoints, which means I need

00:15:23.220 --> 00:15:25.920
to actually do the OAuth
dance and get tokens

00:15:25.920 --> 00:15:27.620
and put tokens on.

00:15:27.620 --> 00:15:32.110
But even at that painful level,
it's not that painful.

00:15:32.110 --> 00:15:32.440
BRENO DE MEDEIROS: Yeah.

00:15:32.440 --> 00:15:37.300
Tim showed us how to whip up one
of these apps in a pinch.

00:15:37.300 --> 00:15:37.495
TIM BRAY: Yeah.

00:15:37.495 --> 00:15:40.380
We had a bug there earlier this
week, and we built eight

00:15:40.380 --> 00:15:45.150
apps in the course of a
day to chase it down.

00:15:45.150 --> 00:15:46.140
BRENO DE MEDEIROS: Right.

00:15:46.140 --> 00:15:50.020
So I think the Play
Service is--

00:15:50.020 --> 00:15:52.130
TIM BRAY: The Play Service is
a big deal for Android.

00:15:52.130 --> 00:15:54.640
It makes so many things possible
that weren't before.

00:15:54.640 --> 00:15:55.940
BRENO DE MEDEIROS: And sorry,
when I was talking about

00:15:55.940 --> 00:15:57.670
Android Auth platform
before I really

00:15:57.670 --> 00:15:58.920
meant the Play Services.

00:16:01.450 --> 00:16:03.340
TIM BRAY: So what do you think
the future of OAuth is?

00:16:03.340 --> 00:16:05.030
Eran Hammer publicly quit--

00:16:05.030 --> 00:16:07.450
I wouldn't say publicly, I would
say loudly quit-- as

00:16:07.450 --> 00:16:10.440
editor and claiming that the
specification is more complex,

00:16:10.440 --> 00:16:12.790
less interoperable, yadda,
yadda, yadda, yadda.

00:16:12.790 --> 00:16:15.200
Will there be OAuth 3.0?

00:16:15.200 --> 00:16:16.150
BRENO DE MEDEIROS: Oh, god.

00:16:16.150 --> 00:16:16.870
Oh well.

00:16:16.870 --> 00:16:21.300
So will there be OAuth 3.0?

00:16:21.300 --> 00:16:23.250
We certainly hope not.

00:16:23.250 --> 00:16:31.380
And are the problems with
interoperability in OAuth 2.0?

00:16:31.380 --> 00:16:33.970
Basically, when you're working
with an application in OAuth

00:16:33.970 --> 00:16:37.640
2.0, you are targeting APIs
that are typically

00:16:37.640 --> 00:16:39.190
provider-specific.

00:16:39.190 --> 00:16:45.660
And so what OAuth 2.0 gives
you is a largely reusable

00:16:45.660 --> 00:16:50.120
framework where you can
basically write code once and

00:16:50.120 --> 00:16:53.420
modify a few bits of
configuration and get another

00:16:53.420 --> 00:16:54.890
provider in the bag.

00:16:54.890 --> 00:16:58.430
So is that an interoperability
problem, or is it an

00:16:58.430 --> 00:17:01.220
interoperability win?

00:17:01.220 --> 00:17:04.116
TIM BRAY: I would put
it like this.

00:17:04.116 --> 00:17:08.520
So an internet protocol like
HTTP or SMTP or one of those

00:17:08.520 --> 00:17:09.660
is truly interoperable.

00:17:09.660 --> 00:17:11.970
If you have a server that
plays by the rules and a

00:17:11.970 --> 00:17:13.619
client that plays by the rules,
you can plug them in

00:17:13.619 --> 00:17:15.400
together, and they just work.

00:17:15.400 --> 00:17:16.880
So OAuth 2.0 isn't like that.

00:17:16.880 --> 00:17:18.569
OAuth 2.0 is--

00:17:18.569 --> 00:17:22.810
you have this great big piece
of machinery that you can

00:17:22.810 --> 00:17:24.660
operate and what comes
out of it is a token.

00:17:24.660 --> 00:17:27.569
And then you can use the token
to secure your HTTP

00:17:27.569 --> 00:17:29.660
conversations.

00:17:29.660 --> 00:17:33.450
But it is not the case that if
you write code to use OAuth

00:17:33.450 --> 00:17:35.940
2.0 to access Google APIs that
then you can automatically

00:17:35.940 --> 00:17:38.020
reuse it for Facebook APIs.

00:17:38.020 --> 00:17:40.830
That level of interoperability
isn't there.

00:17:40.830 --> 00:17:44.290
I just lost my microphone.

00:17:44.290 --> 00:17:45.530
I'll just hold it up
here like this.

00:17:45.530 --> 00:17:46.780
I hope that's good enough.

00:17:49.410 --> 00:17:53.270
On the other hand, the way I
think of OAuth 2.0 is as a

00:17:53.270 --> 00:17:55.150
framework for building
protocols.

00:17:55.150 --> 00:17:59.470
So the first example of that
that's being worked on is

00:17:59.470 --> 00:18:00.090
OpenID Connect.

00:18:00.090 --> 00:18:03.120
And OpenID Connect uses the
OAuth flows to provide

00:18:03.120 --> 00:18:04.880
login-like functions.

00:18:04.880 --> 00:18:08.970
And I think my bet is that
OpenID Connect really will be

00:18:08.970 --> 00:18:09.305
interoperable.

00:18:09.305 --> 00:18:10.100
BRENO DE MEDEIROS:
That's right.

00:18:10.100 --> 00:18:12.210
TIM BRAY: If you have a client
and a server that play by the

00:18:12.210 --> 00:18:14.170
rules, they should be able
to talk to each other

00:18:14.170 --> 00:18:14.900
automatically.

00:18:14.900 --> 00:18:15.540
BRENO DE MEDEIROS: Right.

00:18:15.540 --> 00:18:19.210
And so I think that's the
crucial part of this, that

00:18:19.210 --> 00:18:21.350
OAuth gives you lots
of tools, and the

00:18:21.350 --> 00:18:23.810
tools are very reusable.

00:18:23.810 --> 00:18:27.860
And so once you have
standard API--

00:18:27.860 --> 00:18:30.560
and OpenID Connect, for
instance, is trying to provide

00:18:30.560 --> 00:18:33.200
a standard identity
API for the web--

00:18:33.200 --> 00:18:37.470
you can build interoperable
protocols based on

00:18:37.470 --> 00:18:38.580
top of OAuth 2.0.

00:18:38.580 --> 00:18:40.780
And I think that's
what's important.

00:18:40.780 --> 00:18:42.430
MALE SPEAKER: So one of the
concerns that I often hear

00:18:42.430 --> 00:18:46.040
about standards is that
individual companies will make

00:18:46.040 --> 00:18:49.340
changes to those standards so
that what you might believe is

00:18:49.340 --> 00:18:51.710
something which is working
across all those different

00:18:51.710 --> 00:18:55.360
networks, it becomes tied to
a specific silo with one

00:18:55.360 --> 00:18:57.070
company's infrastructure.

00:18:57.070 --> 00:19:01.630
How can we work to not become
either another silo or to work

00:19:01.630 --> 00:19:04.920
with others to make sure that
the sign in that we do on

00:19:04.920 --> 00:19:07.265
Google works at these other
networks, also?

00:19:07.265 --> 00:19:07.700
TIM BRAY: Right.

00:19:07.700 --> 00:19:09.730
So at the OpenID Connect working
group, they're doing a

00:19:09.730 --> 00:19:10.470
really smart thing.

00:19:10.470 --> 00:19:12.680
They actually have a formal
interoperability framework

00:19:12.680 --> 00:19:17.280
where lots of players are
publishing candidate servers

00:19:17.280 --> 00:19:19.030
and clients and trying them out
and discovering whether

00:19:19.030 --> 00:19:20.520
they work against each other.

00:19:20.520 --> 00:19:23.200
And we are actually in the
process of rolling out an

00:19:23.200 --> 00:19:26.490
OpenID Connect endpoint that
we are going to claim is

00:19:26.490 --> 00:19:27.902
conformant to the spec.

00:19:27.902 --> 00:19:32.660
And that I think if anybody has
a client that they claim

00:19:32.660 --> 00:19:36.450
is conformant to the spec and
it doesn't interoperate, I

00:19:36.450 --> 00:19:38.240
think we'd take that a bug.

00:19:38.240 --> 00:19:39.130
BRENO DE MEDEIROS: Right.

00:19:39.130 --> 00:19:41.050
TIM BRAY: So yeah, that's
a very reasonable

00:19:41.050 --> 00:19:41.800
thing to worry about.

00:19:41.800 --> 00:19:43.870
It also has to do with the
nature of the protocol.

00:19:43.870 --> 00:19:47.030
Sort of the worst-case example
of all that is SQL.

00:19:47.030 --> 00:19:48.990
SQL is famously
non-interoperable.

00:19:48.990 --> 00:19:50.120
Just because you have something
that works with

00:19:50.120 --> 00:19:52.990
Oracle, the chance that it's
going to automatically work

00:19:52.990 --> 00:19:54.870
with a competitor
is very small.

00:19:54.870 --> 00:19:57.950
And the reason for that is the
designers of SQL, whenever

00:19:57.950 --> 00:20:01.220
they found a choice, are we
going to do it this way or do

00:20:01.220 --> 00:20:02.790
it that way, adopted both.

00:20:02.790 --> 00:20:06.130
And if you look at the SQL
standard, it's immensely large

00:20:06.130 --> 00:20:08.040
in size, and everything
is optional.

00:20:08.040 --> 00:20:10.230
And for everything, there's
multiple ways of doing it.

00:20:10.230 --> 00:20:13.410
The number of choices you've
cut down on increases your

00:20:13.410 --> 00:20:15.200
chances of getting good
interoperability.

00:20:15.200 --> 00:20:18.080
And I'm kind of a standards
veteran, and I'm pretty

00:20:18.080 --> 00:20:20.330
optimistic about OpenID Connect,
at least, that it

00:20:20.330 --> 00:20:23.170
will have real good
interoperability.

00:20:23.170 --> 00:20:24.910
BRENO DE MEDEIROS: So trying to
make the choices that will

00:20:24.910 --> 00:20:31.980
work with most and allow the
ones that need special

00:20:31.980 --> 00:20:35.470
behavior to work on extensions
without compromising the

00:20:35.470 --> 00:20:38.860
interoperability baseline.

00:20:38.860 --> 00:20:41.060
TIM BRAY: To go back to the
previous question, one of the

00:20:41.060 --> 00:20:44.110
things that Eran said was
that OAuth 2.0 was just

00:20:44.110 --> 00:20:45.360
insufficiently secure.

00:20:45.360 --> 00:20:49.280
I really want to push back
on that a little bit.

00:20:49.280 --> 00:20:51.530
Breno, by the way, is a
first-class security expert,

00:20:51.530 --> 00:20:52.100
which I'm not.

00:20:52.100 --> 00:20:54.670
So I'll let him tell me what
I just said that's wrong.

00:20:54.670 --> 00:20:57.530
Security is not a binary
continuum where you're either

00:20:57.530 --> 00:20:58.410
secure or you're insecure.

00:20:58.410 --> 00:21:01.050
It's a continuous variable.

00:21:01.050 --> 00:21:03.080
And I think what we're all
trying to do is hit an 80/20

00:21:03.080 --> 00:21:07.820
point where you have stuff that
is secure enough to be

00:21:07.820 --> 00:21:11.930
usable by ordinary people and
ordinary developers and is

00:21:11.930 --> 00:21:13.380
still good enough.

00:21:13.380 --> 00:21:19.390
And my opinion is that OAuth
2.0 bearer tokens exchanged

00:21:19.390 --> 00:21:24.720
over TLS modern HTTPS web
connections is good enough for

00:21:24.720 --> 00:21:25.770
practical purposes.

00:21:25.770 --> 00:21:27.877
Now, certain very high-security
operations may

00:21:27.877 --> 00:21:29.822
have extra requirements,
but I think we're at

00:21:29.822 --> 00:21:30.620
a good enough level.

00:21:30.620 --> 00:21:33.080
Breno, as an expert,
what do you think?

00:21:33.080 --> 00:21:35.380
BRENO DE MEDEIROS: So for
instance, I definitely think

00:21:35.380 --> 00:21:38.710
that OAuth 2.0 has a better
balance of security with

00:21:38.710 --> 00:21:41.150
usability than OAuth 1.0 did.

00:21:41.150 --> 00:21:43.430
If you look at the OAuth 1.0
design, there was a lot more

00:21:43.430 --> 00:21:44.340
crypto in it.

00:21:44.340 --> 00:21:47.720
And I'm not afraid of crypto,
but I know a lot of people who

00:21:47.720 --> 00:21:50.290
are, and with good reason.

00:21:50.290 --> 00:21:54.680
In particular, the way that
OAuth 1.0 uses crypto is not

00:21:54.680 --> 00:21:59.630
fully compatible with how HTTP
works, which makes people's

00:21:59.630 --> 00:22:01.130
life a lot harder.

00:22:01.130 --> 00:22:02.930
They have to deal with problems
they normally don't

00:22:02.930 --> 00:22:06.160
have to deal with in the course
of web development.

00:22:06.160 --> 00:22:14.060
And so also, not all benefits
were obtained by using crypto

00:22:14.060 --> 00:22:14.770
in OAuth 1.0.

00:22:14.770 --> 00:22:18.240
OAuth 1.0 didn't worry too much
about key management, and

00:22:18.240 --> 00:22:22.490
so the crypto bits caused more
pain than gain from a security

00:22:22.490 --> 00:22:23.230
perspective.

00:22:23.230 --> 00:22:29.540
I think a lot of more
experienced folks got involved

00:22:29.540 --> 00:22:35.120
in the design of OAuth 2.0 and
a lot of the hard edges that

00:22:35.120 --> 00:22:38.090
we encountered, like Google
deployed the OAuth 1.0 at

00:22:38.090 --> 00:22:40.260
scale, and we found a
lot of hard edges.

00:22:40.260 --> 00:22:43.030
And we definitely brought our
experience that was the same

00:22:43.030 --> 00:22:44.530
with many of the other
participants in

00:22:44.530 --> 00:22:46.970
the OAuth 2.0 effort.

00:22:46.970 --> 00:22:48.430
TIM BRAY: So I got one more
question here in the

00:22:48.430 --> 00:22:52.810
moderator, and it's asking
about, could a slash-dot

00:22:52.810 --> 00:22:57.120
well-known file published to
each provider's endpoint help

00:22:57.120 --> 00:22:58.550
with interoperability?

00:22:58.550 --> 00:23:00.380
This would describe their
implementation

00:23:00.380 --> 00:23:02.820
response with JSON.

00:23:02.820 --> 00:23:04.480
And we're talking
about discovery.

00:23:04.480 --> 00:23:08.170
And it turns out that if I want
to do an OpenID Connect

00:23:08.170 --> 00:23:11.170
interaction with Google or
Facebook or something, it

00:23:11.170 --> 00:23:13.980
turns out that there are
three, four, at least,

00:23:13.980 --> 00:23:15.760
different endpoints you
have to interact with.

00:23:15.760 --> 00:23:16.605
There's the one for
authentication.

00:23:16.605 --> 00:23:18.390
The one for getting a token.

00:23:18.390 --> 00:23:19.810
There's user info.

00:23:19.810 --> 00:23:20.990
There's at least three
I can think of.

00:23:20.990 --> 00:23:21.450
BRENO DE MEDEIROS: Right.

00:23:21.450 --> 00:23:22.540
TIM BRAY: Maybe more.

00:23:22.540 --> 00:23:25.000
And so the fact that you know
you're going to Google.com or

00:23:25.000 --> 00:23:27.180
Facebook.com doesn't actually
tell you enough.

00:23:27.180 --> 00:23:29.670
So somehow, you need to find out
what those endpoints are.

00:23:29.670 --> 00:23:31.950
Well, you can actually just
compile them into your code.

00:23:31.950 --> 00:23:34.470
And if you're only dealing with
Facebook, Google, and

00:23:34.470 --> 00:23:36.180
Microsoft, that's fine,
but that's kind of a

00:23:36.180 --> 00:23:37.060
very limited world.

00:23:37.060 --> 00:23:40.940
And we can imagine a world where
you would also like to

00:23:40.940 --> 00:23:44.440
get identity from your bank or
your university or your state

00:23:44.440 --> 00:23:46.160
government or whatever.

00:23:46.160 --> 00:23:49.650
And so there's this notion
of discovery.

00:23:49.650 --> 00:23:52.220
So there's another project
underway in the IETF called

00:23:52.220 --> 00:23:57.030
Web Finger, which allows you to
give an email address to go

00:23:57.030 --> 00:23:59.540
find out who their IDP is.

00:23:59.540 --> 00:24:01.810
And there's another project
called Simple Web Discovery,

00:24:01.810 --> 00:24:04.120
and there's some other work
in the OpenID Connect.

00:24:04.120 --> 00:24:06.970
And so the answer to the
question is yes.

00:24:06.970 --> 00:24:07.780
That's a good thing.

00:24:07.780 --> 00:24:09.620
But I don't think those
protocols are

00:24:09.620 --> 00:24:11.220
quite cooked yet.

00:24:11.220 --> 00:24:11.840
BRENO DE MEDEIROS: Right.

00:24:11.840 --> 00:24:14.620
And even Account Chooser is a
little entry point to start

00:24:14.620 --> 00:24:17.770
discovering information about
the user, for instance, their

00:24:17.770 --> 00:24:19.610
identity provider.

00:24:19.610 --> 00:24:22.430
And so you can see that once all
these bits are together,

00:24:22.430 --> 00:24:27.710
we're going to get more mileage
with identity with a

00:24:27.710 --> 00:24:30.700
broader set of providers, maybe
as an out of the box

00:24:30.700 --> 00:24:32.650
experience for developers.

00:24:32.650 --> 00:24:33.780
TIM BRAY: OK.

00:24:33.780 --> 00:24:35.100
Well, I think we've
about run through.

00:24:35.100 --> 00:24:38.290
Any more voice of the internet
questions out there?

00:24:38.290 --> 00:24:38.820
OK, folks.

00:24:38.820 --> 00:24:40.150
Thanks everybody
for showing up.

00:24:40.150 --> 00:24:42.840
Let's all remember the internet
is a big, scary,

00:24:42.840 --> 00:24:45.390
dangerous place, and let's
be careful with people's

00:24:45.390 --> 00:24:49.160
passwords, and let's HTTPS
everywhere whenever we can.

00:24:49.160 --> 00:24:51.360
And let's do good security.

00:24:51.360 --> 00:24:53.270
BRENO DE MEDEIROS:
That's right.

00:24:53.270 --> 00:24:54.410
TIM BRAY: Thank you kindly.

00:24:54.410 --> 00:24:55.480
BRENO DE MEDEIROS: Thank you.

00:24:55.480 --> 00:24:56.730
TIM BRAY: And goodbye.

00:25:03.462 --> 00:25:30.467
[MUSIC PLAYING]

