WEBVTT
Kind: captions
Language: en

00:00:00.650 --> 00:00:02.400
So you have a great
idea for an app that's

00:00:02.400 --> 00:00:05.560
going to run across mobile,
tablets, laptops, and PCs.

00:00:05.560 --> 00:00:08.140
And after you've done all the
hard work of designing the UI,

00:00:08.140 --> 00:00:10.520
now it's time to get to
the really hard problems.

00:00:10.520 --> 00:00:13.010
That is, how do you get all
of these devices communicating

00:00:13.010 --> 00:00:14.350
between one another.

00:00:14.350 --> 00:00:16.920
It's time to take
advantage of the cloud.

00:00:16.920 --> 00:00:18.880
Acting as a central
resource each client

00:00:18.880 --> 00:00:21.000
can use the cloud to
send and receive messages

00:00:21.000 --> 00:00:23.250
keeping all the other clients
in sync with each other.

00:00:23.250 --> 00:00:25.882
But not every cloud
is created equal,

00:00:25.882 --> 00:00:27.590
you'll want something
that's easy to use,

00:00:27.590 --> 00:00:29.465
won't become an ongoing
maintenance headache,

00:00:29.465 --> 00:00:31.060
and of course,
scale, just in case

00:00:31.060 --> 00:00:33.210
your app becomes a
smashing success.

00:00:33.210 --> 00:00:35.160
Enter Google App
Engine, which makes

00:00:35.160 --> 00:00:37.460
it easy to build scalable
cloud solutions for web

00:00:37.460 --> 00:00:39.010
apps and mobile backends.

00:00:39.010 --> 00:00:41.400
App Engine reduces the pain
of building these solutions

00:00:41.400 --> 00:00:44.460
by providing a suite of
powerful usable services,

00:00:44.460 --> 00:00:46.140
and it also reduces
deployment panes

00:00:46.140 --> 00:00:47.950
by automatically
running and managing

00:00:47.950 --> 00:00:49.460
your applications for you.

00:00:49.460 --> 00:00:50.880
This ensures that
your app always

00:00:50.880 --> 00:00:52.680
has the right amount
of server capacity

00:00:52.680 --> 00:00:55.590
to handle your traffic, not
too much, not too little.

00:00:55.590 --> 00:00:58.600
But back to the point, you're
building the next great app--

00:00:58.600 --> 00:01:00.820
how can Google App
Engine help with that?

00:01:00.820 --> 00:01:03.070
Let's say user a wants
to send a message user b,

00:01:03.070 --> 00:01:05.330
but user b isn't
currently online-- we're

00:01:05.330 --> 00:01:07.470
going to need some place
to store the message.

00:01:07.470 --> 00:01:10.290
The App Engine Data Store is
the easiest choice for this.

00:01:10.290 --> 00:01:12.180
It's part of App Engine
so it's ready to use

00:01:12.180 --> 00:01:14.230
with no configuration
or set up needed.

00:01:14.230 --> 00:01:16.086
You hand your data
to App Engine and it

00:01:16.086 --> 00:01:17.960
takes care of replicating
it to multiple data

00:01:17.960 --> 00:01:19.650
centers across
the world, so it's

00:01:19.650 --> 00:01:21.520
always available to
your global customers--

00:01:21.520 --> 00:01:23.730
no scheduled maintenance
or configuration headaches

00:01:23.730 --> 00:01:24.730
required.

00:01:24.730 --> 00:01:26.200
But best of all
the Data Store will

00:01:26.200 --> 00:01:28.880
continue to scale whatever
size your app needs.

00:01:28.880 --> 00:01:31.010
As you write more data,
you get more capacity

00:01:31.010 --> 00:01:32.799
all without having
to lift a finger.

00:01:32.799 --> 00:01:35.340
And of course storing messages
is only half the problem, when

00:01:35.340 --> 00:01:37.000
user b comes back
online, you'll need

00:01:37.000 --> 00:01:38.940
to retrieve any messages
waiting for her.

00:01:38.940 --> 00:01:41.040
And to do this you'll
need to server logic

00:01:41.040 --> 00:01:43.480
to fetch the right messages
for the specific user

00:01:43.480 --> 00:01:45.342
and return them to the
appropriate client.

00:01:45.342 --> 00:01:47.800
And thankfully you can author
that server side logic in one

00:01:47.800 --> 00:01:52.150
of our many supported languages
like Java, Python, Go, and PHP.

00:01:52.150 --> 00:01:53.880
Now as the number
of your users grow

00:01:53.880 --> 00:01:55.640
you'll notice that
your app often ends up

00:01:55.640 --> 00:01:58.430
fetching the same data over and
over and over and over again,

00:01:58.430 --> 00:02:01.110
frankly some data's just
more popular than other data.

00:02:01.110 --> 00:02:03.620
Fetching this data does take
a bit of time and computation,

00:02:03.620 --> 00:02:05.750
and repeated fetches
have the same information

00:02:05.750 --> 00:02:07.310
is hugely wasteful.

00:02:07.310 --> 00:02:09.979
To avoid melting your servers
with wasteful fetching,

00:02:09.979 --> 00:02:11.870
App Engine provides
a feature to improve

00:02:11.870 --> 00:02:14.300
retrieval speed
called, Memcache.

00:02:14.300 --> 00:02:17.440
Memcache allows you to store
commonly accessed data in fast,

00:02:17.440 --> 00:02:19.990
in memory distributed
cache, so your app

00:02:19.990 --> 00:02:22.730
isn't sitting around waiting
for a bunch of data store rights

00:02:22.730 --> 00:02:24.730
or for some business
logic to execute.

00:02:24.730 --> 00:02:26.830
Also did I mention less melting?

00:02:26.830 --> 00:02:28.434
That's a really important part.

00:02:28.434 --> 00:02:30.350
Of course besides the
Data Store and Memcache,

00:02:30.350 --> 00:02:32.570
there is a plethora of
APIs at your disposal,

00:02:32.570 --> 00:02:34.800
but that's another video.

00:02:34.800 --> 00:02:37.810
Anyhow, back to your app--
using Data Store and Memcache

00:02:37.810 --> 00:02:39.730
you can store and
retrieve data quickly.

00:02:39.730 --> 00:02:42.400
The runtime logic allows you
to specify customer request

00:02:42.400 --> 00:02:44.920
handlers so your client gets
exactly the responses they

00:02:44.920 --> 00:02:46.920
need, however you don't
always want your clients

00:02:46.920 --> 00:02:49.140
to wait around for server
side logic to finish.

00:02:49.140 --> 00:02:50.750
Sometimes you want the
server to do some work

00:02:50.750 --> 00:02:53.250
and you want your clients to
come back later for the result.

00:02:53.250 --> 00:02:56.170
For example processing an upload
video or applying an awesome

00:02:56.170 --> 00:02:59.280
filter to a picture of a
soon-to-be-eaten entree.

00:02:59.280 --> 00:03:01.894
These high-compute operations
take a bit of time to finish

00:03:01.894 --> 00:03:03.560
and leaving the client
connection opened

00:03:03.560 --> 00:03:05.960
during this time can chew
up your users' batteries

00:03:05.960 --> 00:03:08.572
which doesn't make for
great user experience.

00:03:08.572 --> 00:03:10.280
Plus there's probably
work your app wants

00:03:10.280 --> 00:03:12.710
to do when no one else is
around like gathering statistics

00:03:12.710 --> 00:03:14.180
of how many of your
users are interacting

00:03:14.180 --> 00:03:15.650
with one of your new features.

00:03:15.650 --> 00:03:18.090
To help with this, App
Engine provides the tasks

00:03:18.090 --> 00:03:20.110
API, which allows
you to schedule work

00:03:20.110 --> 00:03:22.100
to be run later or in
the background which

00:03:22.100 --> 00:03:24.450
is important to keep your
user's battery from melting

00:03:24.450 --> 00:03:26.283
while waiting for the
server to finish work,

00:03:26.283 --> 00:03:28.420
but that's another video.

00:03:28.420 --> 00:03:30.670
At this point you have a
basic app set up and running.

00:03:30.670 --> 00:03:32.086
As your app grows,
you'll probably

00:03:32.086 --> 00:03:33.720
want to add support
for binary files,

00:03:33.720 --> 00:03:37.000
like a user profile photo or
some awesome homemade music.

00:03:37.000 --> 00:03:39.280
Now while the Data Store is
built for structured data,

00:03:39.280 --> 00:03:41.810
it might not be the right
place for binary files.

00:03:41.810 --> 00:03:44.790
As such, it's to look deeper
at your storage options.

00:03:44.790 --> 00:03:47.657
Google Cloud Storage is up
to this particular task,

00:03:47.657 --> 00:03:49.740
allowing you to store an
unlimited number of files

00:03:49.740 --> 00:03:52.650
or objects up to terabytes
in size that are available

00:03:52.650 --> 00:03:55.970
globally, each with the access
controls that you specify.

00:03:55.970 --> 00:03:58.100
And so far we've talked
about how App Engine scales

00:03:58.100 --> 00:03:59.720
on the back end,
but it's also worth

00:03:59.720 --> 00:04:01.220
pointing out how
App Engine provides

00:04:01.220 --> 00:04:04.470
another invisible layer which
helps your app scale as well.

00:04:04.470 --> 00:04:06.520
You see App Engine
provides a dedicated

00:04:06.520 --> 00:04:09.780
layer of Front Ends which
make sure client data get off

00:04:09.780 --> 00:04:12.410
the internet and on to
Google's network as quickly

00:04:12.410 --> 00:04:15.300
as possible, while also making
sure that your code and the App

00:04:15.300 --> 00:04:17.850
Engine run time don't have
to wait around for slow

00:04:17.850 --> 00:04:19.720
or poorly connected clients.

00:04:19.720 --> 00:04:21.519
Now don't forget,
your clients can

00:04:21.519 --> 00:04:23.670
talk directly to
many of the back end

00:04:23.670 --> 00:04:26.880
services without needing to go
through your server side code.

00:04:26.880 --> 00:04:29.600
For example, your user can
upload an image and data

00:04:29.600 --> 00:04:32.160
directly to Cloud Storage
or grab structured data

00:04:32.160 --> 00:04:34.250
right from the Cloud
Store API and even

00:04:34.250 --> 00:04:36.320
talk directly to
the tasks API to see

00:04:36.320 --> 00:04:38.700
what pending work is
available for processing.

00:04:38.700 --> 00:04:41.160
Before you go running
off to build your app,

00:04:41.160 --> 00:04:43.560
there's a bit of planning
that needs to happen though.

00:04:43.560 --> 00:04:45.460
Namely as your service
or back end changes

00:04:45.460 --> 00:04:47.760
over time keeping your
Android, web and iOS

00:04:47.760 --> 00:04:49.190
clients in sync
with those changes

00:04:49.190 --> 00:04:51.580
becomes a really gnarly task.

00:04:51.580 --> 00:04:53.680
To help with this,
Cloud Endpoints

00:04:53.680 --> 00:04:55.550
makes your life just
a little bit easier.

00:04:55.550 --> 00:04:57.280
You simply define
your server API

00:04:57.280 --> 00:05:00.040
and the Cloud Endpoints will
generate the client libraries

00:05:00.040 --> 00:05:02.680
for you, which not only takes
care of data serialization

00:05:02.680 --> 00:05:04.920
but handles the connection
and minimizes transport

00:05:04.920 --> 00:05:06.406
bloat across the wire.

00:05:06.406 --> 00:05:08.780
With all of these features
and services and your command,

00:05:08.780 --> 00:05:11.400
Google App Engine allows you
to build the next great app

00:05:11.400 --> 00:05:14.426
and scale it big with the least
amount of trouble for you.

00:05:14.426 --> 00:05:17.890
See, building the next amazing
app is as easy as that.

00:05:17.890 --> 00:05:20.630
Now go build something great.

