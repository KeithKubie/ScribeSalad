WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.070
[APPLAUSE]

00:00:03.070 --> 00:00:04.320
JOHN MCCUTCHAN: Hey, everyone.

00:00:04.320 --> 00:00:05.235
I'm John McCutchan.

00:00:05.235 --> 00:00:06.610
TODD TURNIDGE:
I'm Todd Turnidge.

00:00:06.610 --> 00:00:08.490
We're both developers
on the Dart VM team.

00:00:08.490 --> 00:00:10.990
JOHN MCCUTCHAN: Yeah, and we
really care about the developer

00:00:10.990 --> 00:00:13.110
experience, so we're
really excited today

00:00:13.110 --> 00:00:15.890
to talk to you more about
Hot Reload and a new feature

00:00:15.890 --> 00:00:17.320
that you haven't
seen yet, Rewind.

00:00:17.320 --> 00:00:18.153
TODD TURNIDGE: Yeah.

00:00:18.153 --> 00:00:20.610
You saw some nice demos of
that with Eric's stuff already.

00:00:20.610 --> 00:00:22.940
We're going to go a little
more in-depth on them,

00:00:22.940 --> 00:00:25.060
and maybe a little
slower on some of that.

00:00:25.060 --> 00:00:25.935
JOHN MCCUTCHAN: Yeah.

00:00:25.935 --> 00:00:28.300
So what we're really
here to talk about today

00:00:28.300 --> 00:00:31.200
is changing the way you
change your Dart code.

00:00:31.200 --> 00:00:33.159
And so we're going to
start off with two demos.

00:00:33.159 --> 00:00:35.075
We're going to show Hot
Reload, and then we're

00:00:35.075 --> 00:00:36.070
going to show Rewind.

00:00:36.070 --> 00:00:39.390
So let's just get
straight into the demo.

00:00:39.390 --> 00:00:42.790
So here I am in Adam.

00:00:42.790 --> 00:00:46.190
And I have the Flutter
Gallery running on the side.

00:00:46.190 --> 00:00:48.510
You're already familiar
with Flutter Gallery.

00:00:48.510 --> 00:00:50.750
So what I've got here
on the left-hand side

00:00:50.750 --> 00:00:54.790
is the source code
for the calculator

00:00:54.790 --> 00:00:56.180
demo inside the gallery.

00:00:56.180 --> 00:00:58.140
So this is your
standard calculator--

00:00:58.140 --> 00:01:01.710
you know, add, subtract,
multiply, divide, 0 through 9.

00:01:01.710 --> 00:01:06.310
And as you saw, Eric showed
that you could very quickly

00:01:06.310 --> 00:01:08.322
redesign your UI.

00:01:08.322 --> 00:01:09.780
So what I'm going
to do is I'm just

00:01:09.780 --> 00:01:12.000
going to add 10, 11, and
12 to the calculator.

00:01:12.000 --> 00:01:13.666
TODD TURNIDGE: So
he's have just copying

00:01:13.666 --> 00:01:15.150
this little bit
of code, and he's

00:01:15.150 --> 00:01:18.410
going to change the 7, 8 and
9 keys to 10, 11, and 12, keys

00:01:18.410 --> 00:01:22.490
and then hit reload,
and there you go.

00:01:27.400 --> 00:01:29.930
JOHN MCCUTCHAN: And
as you saw before,

00:01:29.930 --> 00:01:34.300
you could also-- maybe
you want to change

00:01:34.300 --> 00:01:37.060
the color of the buttons.

00:01:37.060 --> 00:01:37.830
You can do that.

00:01:37.830 --> 00:01:39.350
TODD TURNIDGE:
Now, at the bottom

00:01:39.350 --> 00:01:42.804
here, it says reloaded
seven of 440 libraries.

00:01:42.804 --> 00:01:44.220
Want to say what's
going on there?

00:01:44.220 --> 00:01:45.678
JOHN MCCUTCHAN:
Yeah, so what we're

00:01:45.678 --> 00:01:47.380
doing in the backend
of the VM is we're

00:01:47.380 --> 00:01:50.770
actually figuring out which one
of your libraries have changed

00:01:50.770 --> 00:01:53.440
or are transitively
affected by the change,

00:01:53.440 --> 00:01:55.650
and we only reload those.

00:01:55.650 --> 00:01:57.510
And so this reload
that we just did

00:01:57.510 --> 00:02:00.120
there took 285
milliseconds, and we only

00:02:00.120 --> 00:02:03.760
reloaded seven of
about 440 libraries.

00:02:03.760 --> 00:02:06.260
TODD TURNIDGE: So let's talk
about what 285 milliseconds

00:02:06.260 --> 00:02:06.510
means.

00:02:06.510 --> 00:02:09.100
I mean, when you're developing,
if something takes 2 minutes,

00:02:09.100 --> 00:02:11.260
you go away and you do something
else, you get distracted,

00:02:11.260 --> 00:02:11.760
whatever.

00:02:11.760 --> 00:02:14.090
285 milliseconds,
as you saw, you're

00:02:14.090 --> 00:02:16.795
able to make change after change
after change and your tools

00:02:16.795 --> 00:02:17.920
aren't getting in your way.

00:02:17.920 --> 00:02:19.869
You've got a nice,
tight development cycle.

00:02:19.869 --> 00:02:21.410
JOHN MCCUTCHAN: This
is the true time

00:02:21.410 --> 00:02:24.650
from the moment I pressed
the request for the reload

00:02:24.650 --> 00:02:27.800
all the way until the frame
is rendered on the device.

00:02:27.800 --> 00:02:29.280
We're not skipping
anything here.

00:02:29.280 --> 00:02:32.530
This is the true time from when
you press the button in your ID

00:02:32.530 --> 00:02:36.620
to when you can visually
see it in the app.

00:02:36.620 --> 00:02:39.110
TODD TURNIDGE: And when did we
start working on that, like,

00:02:39.110 --> 00:02:40.530
back in March or something?

00:02:40.530 --> 00:02:41.363
JOHN MCCUTCHAN: May.

00:02:41.363 --> 00:02:43.020
TODD TURNIDGE: May, yeah.

00:02:43.020 --> 00:02:46.950
JOHN MCCUTCHAN: Yeah,
it's been one fun summer.

00:02:46.950 --> 00:02:47.783
TODD TURNIDGE: Yeah.

00:02:47.783 --> 00:02:53.202
JOHN MCCUTCHAN: So let's
take it a little bit further,

00:02:53.202 --> 00:02:56.490
and why don't we add the
mod operator to calculator?

00:02:56.490 --> 00:02:58.260
We're all developers,
we all have mod.

00:02:58.260 --> 00:03:01.300
For some reason, calculators
have forgotten about it.

00:03:01.300 --> 00:03:04.696
So I'm just going to go
ahead and I added a new key.

00:03:04.696 --> 00:03:06.320
And I'm going to
ignore this error here

00:03:06.320 --> 00:03:08.810
that the analyzer is warning
me about, telling me--

00:03:08.810 --> 00:03:09.440
TODD TURNIDGE:
Yeah, forget that.

00:03:09.440 --> 00:03:10.814
You're smarter
than the analyzer.

00:03:10.814 --> 00:03:13.040
JOHN MCCUTCHAN:
Yeah, handle mod tap.

00:03:13.040 --> 00:03:14.520
That's not implemented.

00:03:14.520 --> 00:03:16.951
And as you can see,
we get this red widget

00:03:16.951 --> 00:03:18.950
of death, which is what
happens when one of your

00:03:18.950 --> 00:03:21.180
build functions inside
your Flutter app

00:03:21.180 --> 00:03:22.694
ends up throwing an exception.

00:03:22.694 --> 00:03:24.860
TODD TURNIDGE: Except death
is now in quotes, right?

00:03:24.860 --> 00:03:26.943
JOHN MCCUTCHAN: Yeah,
because in the Reload world,

00:03:26.943 --> 00:03:29.000
we can bring your app
right back to life.

00:03:29.000 --> 00:03:33.710
So I'll just start by copying
the implementation of plus,

00:03:33.710 --> 00:03:35.590
and I'll just rename it to mod.

00:03:35.590 --> 00:03:37.090
TODD TURNIDGE: So
now we're not just

00:03:37.090 --> 00:03:39.810
changing little bits of code,
we're adding new functions.

00:03:39.810 --> 00:03:41.120
We can add new classes.

00:03:41.120 --> 00:03:42.530
We can add new lots of things.

00:03:42.530 --> 00:03:44.404
JOHN MCCUTCHAN: You can
import new libraries,

00:03:44.404 --> 00:03:46.900
you can unimport libraries,
you can delete classes.

00:03:46.900 --> 00:03:48.560
There's lots of things
you can do here.

00:03:48.560 --> 00:03:49.330
TODD TURNIDGE: But now
you should actually

00:03:49.330 --> 00:03:50.913
get something in our
accumulator here.

00:03:50.913 --> 00:03:53.230
JOHN MCCUTCHAN: Yeah, all
right, so let's do, like--

00:03:53.230 --> 00:03:55.471
TODD TURNIDGE: 8
times 11, maybe.

00:03:55.471 --> 00:03:58.300
JOHN MCCUTCHAN: Yeah, let's
somehow clear that out.

00:03:58.300 --> 00:04:01.060
That might get too big.

00:04:01.060 --> 00:04:04.200
All right, so there's
the 10 button working.

00:04:04.200 --> 00:04:06.860
Now, I've wired up
mod to do something,

00:04:06.860 --> 00:04:10.410
but it's really just
going to do plus.

00:04:10.410 --> 00:04:13.136
All right, the button works, but
let's take it one step further

00:04:13.136 --> 00:04:15.010
and actually finish the
implementation of mod

00:04:15.010 --> 00:04:16.304
in the calculator.

00:04:16.304 --> 00:04:18.470
So you could see here that
the way the calculator is

00:04:18.470 --> 00:04:21.766
structured is that you
pass in the operation kind

00:04:21.766 --> 00:04:22.890
when the button is pressed.

00:04:22.890 --> 00:04:27.300
So I'll just go ahead and say,
I want to do a mod operation.

00:04:27.300 --> 00:04:30.090
And here's the static
analyzer telling me,

00:04:30.090 --> 00:04:32.532
hey, there is no mod
defined for this ENUM.

00:04:32.532 --> 00:04:34.490
TODD TURNIDGE: At this
point, the workflow sort

00:04:34.490 --> 00:04:36.198
of looks like you
follow the bread crumbs

00:04:36.198 --> 00:04:39.020
that the analyzer left
you until, as Kevin

00:04:39.020 --> 00:04:43.845
was talking about earlier,
the red squiggles all go away.

00:04:43.845 --> 00:04:45.220
JOHN MCCUTCHAN:
So what I've done

00:04:45.220 --> 00:04:47.790
is I've added mod to
the ENUM, and that's

00:04:47.790 --> 00:04:50.126
OK in a Reloaded world.

00:04:50.126 --> 00:04:51.750
But now I'm just
going to follow along,

00:04:51.750 --> 00:04:53.166
and there's many
switch statements

00:04:53.166 --> 00:04:57.510
that I forgot to
include mod for.

00:04:57.510 --> 00:05:00.900
So this is what
the mod operation

00:05:00.900 --> 00:05:02.462
will look like on the screen.

00:05:02.462 --> 00:05:04.880
Or percent.

00:05:04.880 --> 00:05:06.710
Just use the analyzer here.

00:05:06.710 --> 00:05:12.684
Now, down here, this is handling
addition and subtraction.

00:05:12.684 --> 00:05:15.100
TODD TURNIDGE: So mod is like
multiplication and division,

00:05:15.100 --> 00:05:16.391
so it will handle the same way.

00:05:16.391 --> 00:05:18.209
JOHN MCCUTCHAN: Yeah.

00:05:18.209 --> 00:05:19.750
Now, down here is
where I'll actually

00:05:19.750 --> 00:05:21.610
go ahead and implement
mod, and Todd

00:05:21.610 --> 00:05:23.730
will talk about what I'm doing.

00:05:23.730 --> 00:05:26.105
TODD TURNIDGE: I think we
should see if Eric can actually

00:05:26.105 --> 00:05:28.530
add the 10 and 11 and 12 key
to the calculator for real,

00:05:28.530 --> 00:05:29.606
so save us all this time.

00:05:29.606 --> 00:05:30.480
JOHN MCCUTCHAN: Yeah.

00:05:30.480 --> 00:05:30.890
TODD TURNIDGE: Yeah.

00:05:30.890 --> 00:05:31.765
JOHN MCCUTCHAN: Yeah.

00:05:38.520 --> 00:05:41.767
TODD TURNIDGE: Is it looking
clean, or not quite yet?

00:05:41.767 --> 00:05:44.100
He's going to implement the
mod operator-- current value

00:05:44.100 --> 00:05:45.530
mod equals x number.

00:05:45.530 --> 00:05:47.720
JOHN MCCUTCHAN: And
we'll put an else there.

00:05:47.720 --> 00:05:49.527
OK, just do reload.

00:05:49.527 --> 00:05:50.360
TODD TURNIDGE: Boom.

00:05:50.360 --> 00:05:52.276
JOHN MCCUTCHAN: There's
no visual change here,

00:05:52.276 --> 00:05:54.817
but that reload took
265 milliseconds.

00:05:54.817 --> 00:05:56.400
TODD TURNIDGE: So
essentially instant.

00:05:56.400 --> 00:05:56.720
JOHN MCCUTCHAN: Let's see.

00:05:56.720 --> 00:05:57.562
All right, OK.

00:05:57.562 --> 00:05:58.686
It looks like it's working.

00:06:01.730 --> 00:06:02.418
There it is.

00:06:07.170 --> 00:06:11.370
So what we've seen
here is more than just

00:06:11.370 --> 00:06:13.780
editing the body of a function.

00:06:13.780 --> 00:06:16.300
We added methods,
we crashed our app,

00:06:16.300 --> 00:06:20.390
we brought the app back to life,
we added a new ENUM definition,

00:06:20.390 --> 00:06:23.700
and we fully implemented
mod in this calculator,

00:06:23.700 --> 00:06:25.291
never restarting it.

00:06:25.291 --> 00:06:27.290
TODD TURNIDGE: We kept
our state the whole time.

00:06:27.290 --> 00:06:29.081
JOHN MCCUTCHAN: And
each step along the way

00:06:29.081 --> 00:06:30.650
took about 285 milliseconds.

00:06:30.650 --> 00:06:33.060
So there's no more
"xkcd" compiling

00:06:33.060 --> 00:06:37.160
memes in the Flutter world.

00:06:37.160 --> 00:06:40.810
All right, so that's
the Hot Reload demo.

00:06:40.810 --> 00:06:43.082
Todd's going to
talk about Rewind.

00:06:43.082 --> 00:06:44.540
TODD TURNIDGE: All
right, so Rewind

00:06:44.540 --> 00:06:46.680
is a feature that
we're working on that

00:06:46.680 --> 00:06:48.520
plays very nicely with Reload.

00:06:48.520 --> 00:06:50.210
It's not quite
implemented in Flutter

00:06:50.210 --> 00:06:52.480
yet, so I'm going to demo
it on just a standalone Dart

00:06:52.480 --> 00:06:55.250
VM today, but it
will be coming soon.

00:06:55.250 --> 00:06:57.580
I've written a text
adventure game.

00:06:57.580 --> 00:06:59.670
Those of you who've seen
my demos in past years

00:06:59.670 --> 00:07:02.520
know I always have written
a text adventure game.

00:07:02.520 --> 00:07:04.500
All right, so you're in
a mysterious chamber.

00:07:04.500 --> 00:07:05.666
There's an exit to the west.

00:07:05.666 --> 00:07:07.320
A deadly mousetrap lies nearby.

00:07:07.320 --> 00:07:12.600
So I'm going to go attach the
Observatory debugger to this.

00:07:12.600 --> 00:07:15.194
Let's add a tab and
go to local host.

00:07:17.900 --> 00:07:19.610
JOHN MCCUTCHAN: So
what is Observatory?

00:07:19.610 --> 00:07:21.490
TODD TURNIDGE:
Observatory is a set

00:07:21.490 --> 00:07:23.570
of tools that come
bundled in with Flutter

00:07:23.570 --> 00:07:28.129
or with the Dart VM that allow
you to do just a ton of stuff.

00:07:28.129 --> 00:07:29.170
Like what kinds of stuff?

00:07:29.170 --> 00:07:31.336
JOHN MCCUTCHAN: CPU profiling,
allocation profiling.

00:07:31.336 --> 00:07:33.480
We have a new timeline
feature this year.

00:07:33.480 --> 00:07:33.980
Debugging.

00:07:33.980 --> 00:07:36.438
TODD TURNIDGE: In this case,
I'm going to use the debugger,

00:07:36.438 --> 00:07:39.310
and I'm going to tell it to
turn on break on exception

00:07:39.310 --> 00:07:41.350
so that if I hit an
exception while I'm

00:07:41.350 --> 00:07:44.840
running my text adventure game,
it will pop into the debugger.

00:07:44.840 --> 00:07:47.505
Now, do you think I'm likely
to hit an exception in my game?

00:07:47.505 --> 00:07:49.546
JOHN MCCUTCHAN: I've seen
this demo before, Todd.

00:07:49.546 --> 00:07:52.210
You're definitely going
to throw an exception.

00:07:52.210 --> 00:07:56.170
TODD TURNIDGE: So I'm going to
go west, I'm going to go south.

00:07:56.170 --> 00:07:58.410
I'm going to take the oil can.

00:07:58.410 --> 00:08:00.470
Now, the oil can can be
used to oil an object

00:08:00.470 --> 00:08:03.020
to make it not rusty, like
the rusty revolver, which

00:08:03.020 --> 00:08:04.420
I'm not holding.

00:08:04.420 --> 00:08:07.250
And I'm not holding a revolver.

00:08:07.250 --> 00:08:11.180
And uh-oh, I've gotten
this no such method.

00:08:11.180 --> 00:08:13.640
All right, so you run
into no such methods a lot

00:08:13.640 --> 00:08:16.219
if you're a Dart developer,
and usually it means what?

00:08:16.219 --> 00:08:17.760
JOHN MCCUTCHAN: Your
program is dead.

00:08:17.760 --> 00:08:20.009
TODD TURNIDGE: You restart
your program and try again.

00:08:20.009 --> 00:08:23.830
And you have to sort of
do this post-mortem thing.

00:08:23.830 --> 00:08:25.910
So let's look at this
stack trace here.

00:08:25.910 --> 00:08:27.660
We've got object no
such method, called

00:08:27.660 --> 00:08:31.560
by another no such method,
called by my do command.

00:08:31.560 --> 00:08:34.120
And what the Rewind
feature does is

00:08:34.120 --> 00:08:36.200
it allows us to take
any function call

00:08:36.200 --> 00:08:38.799
and rewind back to the
call site that called it

00:08:38.799 --> 00:08:40.690
so that then we're sort
of going back in time

00:08:40.690 --> 00:08:42.240
and we can run it again.

00:08:42.240 --> 00:08:42.760
JOHN MCCUTCHAN:
Now, what happens

00:08:42.760 --> 00:08:43.761
if there's side effects?

00:08:43.761 --> 00:08:45.385
TODD TURNIDGE: If
there's side effects,

00:08:45.385 --> 00:08:46.850
we don't undo the side effects.

00:08:46.850 --> 00:08:49.614
So this works pretty well
with a function that's

00:08:49.614 --> 00:08:50.780
relatively side effect-free.

00:08:50.780 --> 00:08:53.222
You can go back and sort
of walk through the steps

00:08:53.222 --> 00:08:54.430
again to see why you crashed.

00:08:54.430 --> 00:08:58.580
So I can rewind, and I
could rewind again, even.

00:08:58.580 --> 00:08:59.820
I could see, oh, I'm here.

00:08:59.820 --> 00:09:00.910
I'm doing this thing.

00:09:00.910 --> 00:09:01.920
JOHN MCCUTCHAN: So the
program has actually

00:09:01.920 --> 00:09:03.920
moved its execution point
back to this function.

00:09:03.920 --> 00:09:05.919
TODD TURNIDGE: Yeah, I'm
just about to the call.

00:09:05.919 --> 00:09:08.200
If I want to do the call
again, I can just continue

00:09:08.200 --> 00:09:10.990
and I can hit my
exception again, you know?

00:09:10.990 --> 00:09:13.623
Or I could rewind and I could
step back into the function.

00:09:18.630 --> 00:09:21.251
So let's actually use
this for some purpose.

00:09:21.251 --> 00:09:22.750
I'm looking at my
code and I'm like,

00:09:22.750 --> 00:09:25.160
boy, I wonder what the value
of the item 2 is there.

00:09:25.160 --> 00:09:29.200
So I'm going to go to
Emacs, king of editors,

00:09:29.200 --> 00:09:38.570
and I'm going to print
value is $ the item 2.

00:09:38.570 --> 00:09:40.260
So I'm just adding
some code in here.

00:09:40.260 --> 00:09:42.385
JOHN MCCUTCHAN: It's classic
[INAUDIBLE] debugging.

00:09:42.385 --> 00:09:43.710
TODD TURNIDGE: Yep.

00:09:43.710 --> 00:09:45.060
I'll save it.

00:09:45.060 --> 00:09:48.700
Now I'll go back over
here and I'll reload.

00:09:48.700 --> 00:09:50.790
So I've reloaded the code.

00:09:50.790 --> 00:09:52.460
If I start rewinding,
though, I see

00:09:52.460 --> 00:09:55.130
that I still have the
old code and do command.

00:09:55.130 --> 00:09:56.590
That's kind of bad.

00:09:56.590 --> 00:09:58.330
Well, it's because
I was in the middle

00:09:58.330 --> 00:09:59.750
of running that function.

00:09:59.750 --> 00:10:01.671
I was in the middle of
running the old code.

00:10:01.671 --> 00:10:03.170
In order to get the
new code, I need

00:10:03.170 --> 00:10:04.586
to enter the
function again, which

00:10:04.586 --> 00:10:06.680
means I need to rewind
one more and go back in.

00:10:06.680 --> 00:10:07.970
JOHN MCCUTCHAN: We'll talk
a little bit more about that

00:10:07.970 --> 00:10:08.670
later on in the talk.

00:10:08.670 --> 00:10:10.295
TODD TURNIDGE: So I
rewind, and now I'm

00:10:10.295 --> 00:10:11.770
going to just step
into do command.

00:10:11.770 --> 00:10:14.120
And you notice the pink
along the edge there?

00:10:14.120 --> 00:10:15.140
That's code coverage.

00:10:15.140 --> 00:10:17.430
This is the first time
we're in this function now.

00:10:17.430 --> 00:10:18.290
JOHN MCCUTCHAN: This
version of the function.

00:10:18.290 --> 00:10:19.390
TODD TURNIDGE: This
version of the function.

00:10:19.390 --> 00:10:21.931
And if I look down here, I see
that the printer will be done,

00:10:21.931 --> 00:10:24.680
so let's just continue and see
what the value could possibly

00:10:24.680 --> 00:10:25.180
have been.

00:10:25.180 --> 00:10:27.020
I hit the exception again.

00:10:27.020 --> 00:10:29.550
Go back over here to
my text adventure game.

00:10:29.550 --> 00:10:31.240
It says, oh, the value is null.

00:10:31.240 --> 00:10:33.840
All right, I have a
null in my program.

00:10:33.840 --> 00:10:35.850
Let's just fix this thing.

00:10:35.850 --> 00:10:41.450
So if the item 2-- I
have to sing when I code.

00:10:41.450 --> 00:10:45.380
It's really hard for people
in my office-- equals null,

00:10:45.380 --> 00:10:47.990
then-- John wears
headphones a lot, actually.

00:10:47.990 --> 00:10:49.573
JOHN MCCUTCHAN: Yeah,
noise-canceling.

00:10:51.670 --> 00:10:53.990
TODD TURNIDGE: And
then so if it's null,

00:10:53.990 --> 00:10:56.090
I'm going to give them
some sort of a message.

00:10:56.090 --> 00:10:58.660
JOHN MCCUTCHAN: How about
say, "You can't oil that."

00:10:58.660 --> 00:11:03.074
TODD TURNIDGE: You can't--
I'll say, "You can't oil that."

00:11:03.074 --> 00:11:04.740
I'm going to say,
"You cannot oil that!"

00:11:04.740 --> 00:11:05.970
JOHN MCCUTCHAN: All right.

00:11:05.970 --> 00:11:06.470
Be verbose.

00:11:06.470 --> 00:11:08.200
TODD TURNIDGE: Exclamation.

00:11:08.200 --> 00:11:09.840
This is my game.

00:11:09.840 --> 00:11:13.670
So I'm going to go back here,
and I'm going to reload this.

00:11:13.670 --> 00:11:16.020
JOHN MCCUTCHAN: So we got
to rewind past the point--

00:11:16.020 --> 00:11:18.020
TODD TURNIDGE: Yeah, so
let's start rewinding up

00:11:18.020 --> 00:11:19.520
frames and rewinding up frames.

00:11:19.520 --> 00:11:21.311
JOHN MCCUTCHAN: And
could you rewind, like,

00:11:21.311 --> 00:11:23.122
with an n number of frames?

00:11:23.122 --> 00:11:25.330
TODD TURNIDGE: You can say
rewind three, or something

00:11:25.330 --> 00:11:25.880
if you want.

00:11:25.880 --> 00:11:26.410
JOHN MCCUTCHAN: Nice.

00:11:26.410 --> 00:11:27.659
TODD TURNIDGE: And that works.

00:11:27.659 --> 00:11:30.940
And so let's rewind
one more and step in.

00:11:30.940 --> 00:11:34.692
And now it looks like--
I have to sing again.

00:11:34.692 --> 00:11:36.900
Yeah, there's this "You
cannot oil that" right there,

00:11:36.900 --> 00:11:40.131
so what do you say we continue
the program and see if it's all

00:11:40.131 --> 00:11:40.630
good?

00:11:43.990 --> 00:11:45.070
Back here.

00:11:45.070 --> 00:11:46.960
And it says, "You
cannot oil that."

00:11:46.960 --> 00:11:48.040
So I fixed my program.

00:11:48.040 --> 00:11:50.935
This is called fix and
continue debugging.

00:11:50.935 --> 00:11:51.560
We're able to--

00:11:51.560 --> 00:11:53.268
JOHN MCCUTCHAN: It's
the combination of--

00:11:53.268 --> 00:11:56.190
[APPLAUSE]

00:11:59.175 --> 00:12:00.550
TODD TURNIDGE: So
the combination

00:12:00.550 --> 00:12:03.155
of Reload plus being able
to just go a little bit back

00:12:03.155 --> 00:12:04.780
in time means that
you can get yourself

00:12:04.780 --> 00:12:07.150
into a weird, bad
neighborhood of your program,

00:12:07.150 --> 00:12:09.000
someplace where before you
just got knocked in the head

00:12:09.000 --> 00:12:10.205
and you had all
your stuff stolen.

00:12:10.205 --> 00:12:11.255
JOHN MCCUTCHAN: Yeah, you
wake up the next morning,

00:12:11.255 --> 00:12:12.250
you're like, what happened?

00:12:12.250 --> 00:12:14.875
TODD TURNIDGE: So instead, while
you're there, and you can say,

00:12:14.875 --> 00:12:16.110
I'm going to make this right.

00:12:16.110 --> 00:12:18.193
And you have, sort of,
your groundhog's day moment

00:12:18.193 --> 00:12:20.200
where you just redo
events again and again

00:12:20.200 --> 00:12:21.430
until you get it right.

00:12:21.430 --> 00:12:23.180
Fix your problem
and then you go on

00:12:23.180 --> 00:12:26.029
so you don't need to go through
your 15 minutes of setup

00:12:26.029 --> 00:12:26.570
that it took.

00:12:26.570 --> 00:12:27.200
JOHN MCCUTCHAN:
Yeah, I mean, Todd

00:12:27.200 --> 00:12:28.760
did, like, three
actions here, right?

00:12:28.760 --> 00:12:30.314
West, south, take the oil can.

00:12:30.314 --> 00:12:31.730
But in a larger
app, you might be,

00:12:31.730 --> 00:12:35.060
like, 10 pages deep
into your mobile app,

00:12:35.060 --> 00:12:37.737
your app has downloaded a bunch
of assets off the network,

00:12:37.737 --> 00:12:39.820
and getting back to the
state to reproduce the bug

00:12:39.820 --> 00:12:41.270
may take a minute or two.

00:12:41.270 --> 00:12:42.980
But with Rewind and
Reload combined,

00:12:42.980 --> 00:12:45.270
you can just hang out
right around the place

00:12:45.270 --> 00:12:46.420
where your bug is.

00:12:46.420 --> 00:12:48.350
TODD TURNIDGE: All right.

00:12:48.350 --> 00:12:50.510
JOHN MCCUTCHAN:
OK, so we've just

00:12:50.510 --> 00:12:54.452
given you a demo of Hot Reload
and Rewind combined, but let's

00:12:54.452 --> 00:12:56.660
take a step back and just
look at what this new death

00:12:56.660 --> 00:12:59.540
cycle looks like.

00:12:59.540 --> 00:13:01.540
TODD TURNIDGE: All right,
so you're programming,

00:13:01.540 --> 00:13:03.248
and occasionally when
you're programming,

00:13:03.248 --> 00:13:05.980
you find a problem
with your program.

00:13:05.980 --> 00:13:07.050
We both found problems.

00:13:07.050 --> 00:13:09.630
He had a function he called
that wasn't in his program,

00:13:09.630 --> 00:13:10.270
for example.

00:13:10.270 --> 00:13:11.820
He got this red screen.

00:13:11.820 --> 00:13:13.760
And so we changed our program.

00:13:13.760 --> 00:13:15.597
We just reload.

00:13:15.597 --> 00:13:17.430
JOHN MCCUTCHAN: Yeah,
and then what happens,

00:13:17.430 --> 00:13:19.780
the VM gets the reload
request, it determines

00:13:19.780 --> 00:13:21.860
which libraries have
changed, and then it

00:13:21.860 --> 00:13:23.664
just reloads those libraries.

00:13:23.664 --> 00:13:25.330
TODD TURNIDGE: Now,
sometimes the reload

00:13:25.330 --> 00:13:26.746
won't work for
some reason, right?

00:13:26.746 --> 00:13:29.120
Like, maybe you have some--
it's not really Dart code

00:13:29.120 --> 00:13:30.810
you've put into the
file or something.

00:13:30.810 --> 00:13:32.270
JOHN MCCUTCHAN: Yeah, maybe
you pasted some JavaScript

00:13:32.270 --> 00:13:32.770
in there.

00:13:35.955 --> 00:13:37.330
TODD TURNIDGE:
What happens then?

00:13:37.330 --> 00:13:38.413
JOHN MCCUTCHAN: It's safe.

00:13:38.413 --> 00:13:42.280
We detect at reload time if the
reload is acceptable to apply

00:13:42.280 --> 00:13:43.060
or not.

00:13:43.060 --> 00:13:45.300
And if we decide that
it can't be applied,

00:13:45.300 --> 00:13:47.320
we just put the old
code back in place

00:13:47.320 --> 00:13:49.962
and we just let your
program continue as it was.

00:13:49.962 --> 00:13:51.670
TODD TURNIDGE: We want
to take this cycle

00:13:51.670 --> 00:13:54.270
and make it as tight
as we possibly can.

00:13:54.270 --> 00:13:58.389
Remove as much of this
annoyance of development.

00:13:58.389 --> 00:14:00.430
JOHN MCCUTCHAN: So now,
for Flutter applications,

00:14:00.430 --> 00:14:03.040
we follow up Reload with
a couple extra steps.

00:14:03.040 --> 00:14:05.170
The first is that
we ask the Flutter

00:14:05.170 --> 00:14:06.265
app to reassemble itself.

00:14:06.265 --> 00:14:09.790
And what this means practically
speaking is just all of your

00:14:09.790 --> 00:14:11.950
build methods get re-invoked.

00:14:11.950 --> 00:14:14.400
So the new widget tree gets
passed down to the renderer,

00:14:14.400 --> 00:14:16.270
and that gets rendered
on the screen.

00:14:16.270 --> 00:14:19.370
And we just follow that up
again with a forced frame.

00:14:19.370 --> 00:14:23.100
So this is how we get the
Flutter app after reloading

00:14:23.100 --> 00:14:25.130
the code to reassemble the UI.

00:14:25.130 --> 00:14:27.130
TODD TURNIDGE: And the
way the Flutter framework

00:14:27.130 --> 00:14:28.880
is structured-- we
don't go into it-- it's

00:14:28.880 --> 00:14:32.010
particularly well-suited to work
well with Reload in this case.

00:14:32.010 --> 00:14:33.170
JOHN MCCUTCHAN: Yeah, I
mean, the Flutter framework

00:14:33.170 --> 00:14:34.045
is functional, right?

00:14:34.045 --> 00:14:37.110
And what we're talking about is
updating the body of functions.

00:14:39.282 --> 00:14:41.490
TODD TURNIDGE: OK, it helps
to have just a little bit

00:14:41.490 --> 00:14:43.940
of intuition about how
Reload works if you're

00:14:43.940 --> 00:14:46.092
going to be doing
development against it

00:14:46.092 --> 00:14:47.300
so that you're not surprised.

00:14:50.910 --> 00:14:53.640
First let's talk about, sort
of, naming and identity.

00:14:53.640 --> 00:14:56.000
I have some set of code
that I'm reloading,

00:14:56.000 --> 00:14:59.200
and when I load it
in, I get a library.

00:14:59.200 --> 00:15:02.200
And the library
might have some URL.

00:15:02.200 --> 00:15:04.580
It will replace whatever
original library

00:15:04.580 --> 00:15:05.640
had the same URL.

00:15:05.640 --> 00:15:09.100
So the library's URL is
important for determining

00:15:09.100 --> 00:15:11.570
what the replacement
is for the original.

00:15:11.570 --> 00:15:14.770
In the same way, if I have
some class with the same name

00:15:14.770 --> 00:15:17.270
as a class that
existed before, and it

00:15:17.270 --> 00:15:19.450
happens to be in
the same library,

00:15:19.450 --> 00:15:22.472
then we replace that class.

00:15:22.472 --> 00:15:24.680
JOHN MCCUTCHAN: It's fairly
intuitive as a developer.

00:15:24.680 --> 00:15:28.180
I mean, libraries are
loaded in Dart by URL,

00:15:28.180 --> 00:15:33.320
and we just keep these naming
and identities along the way.

00:15:33.320 --> 00:15:34.985
Now, the most common
question we've

00:15:34.985 --> 00:15:37.360
had from all of the developers
who've been playing around

00:15:37.360 --> 00:15:41.010
with Hot Reload for a while is
what happens to my static data?

00:15:41.010 --> 00:15:43.260
And if you look at the
top of the slide here,

00:15:43.260 --> 00:15:45.230
you can see that
there's this list x,

00:15:45.230 --> 00:15:48.300
and it has this initializing
expression of just a list of 1,

00:15:48.300 --> 00:15:49.730
2, 3.

00:15:49.730 --> 00:15:52.810
Now, the VM is only going to
run this initializing expression

00:15:52.810 --> 00:15:54.330
once.

00:15:54.330 --> 00:15:57.370
And it depends-- like,
when your program first

00:15:57.370 --> 00:15:59.970
accesses x, that's when the
initializing expression is

00:15:59.970 --> 00:16:01.129
going to be run.

00:16:01.129 --> 00:16:03.420
TODD TURNIDGE: So if we did
it once before our reload--

00:16:03.420 --> 00:16:04.920
JOHN MCCUTCHAN: It
would be 1, 2, 3.

00:16:04.920 --> 00:16:07.270
But if you reload it
first and then accessed x,

00:16:07.270 --> 00:16:10.830
you would get 4, 5, 6
as the initial value.

00:16:10.830 --> 00:16:13.590
And the key takeaway here
is that code is reloaded,

00:16:13.590 --> 00:16:15.140
but data isn't.

00:16:15.140 --> 00:16:17.229
So x does not
automatically update,

00:16:17.229 --> 00:16:19.270
but luckily you have a
debugger, and you can just

00:16:19.270 --> 00:16:23.150
go into the debugger and change
x to be whatever you want.

00:16:23.150 --> 00:16:25.680
TODD TURNIDGE: Basically, you
keep your heap across reloads.

00:16:25.680 --> 00:16:27.834
So whatever is there is there.

00:16:27.834 --> 00:16:29.750
All right, so let's talk
about function calls.

00:16:29.750 --> 00:16:32.540
We saw a little bit about
this in the adventure demo.

00:16:32.540 --> 00:16:35.700
So we have some activations
on our call stack.

00:16:35.700 --> 00:16:39.120
I call main, it calls
some other functions,

00:16:39.120 --> 00:16:42.240
and we activate a reload.

00:16:42.240 --> 00:16:43.900
We trigger a reload.

00:16:43.900 --> 00:16:46.550
After the point of the
reload, all new function calls

00:16:46.550 --> 00:16:48.470
will use the new code.

00:16:48.470 --> 00:16:49.555
But the existing--

00:16:49.555 --> 00:16:51.180
JOHN MCCUTCHAN: Yeah,
the existing code

00:16:51.180 --> 00:16:54.750
is going to stay there
and run until it comes off

00:16:54.750 --> 00:16:56.959
the stack, which is where
Rewind becomes so powerful.

00:16:56.959 --> 00:16:57.833
TODD TURNIDGE: Right.

00:16:57.833 --> 00:16:59.600
So if we called Foo
recursively here,

00:16:59.600 --> 00:17:02.750
we'd have a new version of Foo
on the stack at the same time

00:17:02.750 --> 00:17:04.270
as an old version of Foo.

00:17:04.270 --> 00:17:05.800
And so that's why
yeah, again, you

00:17:05.800 --> 00:17:07.710
need Rewind sometimes
because if you

00:17:07.710 --> 00:17:09.990
want to force executing
the new version of the code

00:17:09.990 --> 00:17:11.115
during a debugging session.

00:17:13.960 --> 00:17:15.960
JOHN MCCUTCHAN: So when
Dart was first designed,

00:17:15.960 --> 00:17:18.250
one of the explicit
design goals was

00:17:18.250 --> 00:17:21.025
to not allow you to change
the shape of an instance.

00:17:21.025 --> 00:17:23.400
TODD TURNIDGE: And by shape
we mean the number of fields.

00:17:23.400 --> 00:17:25.441
JOHN MCCUTCHAN: How many
fields is in your class?

00:17:25.441 --> 00:17:28.170
That is locked down the
moment your program runs.

00:17:28.170 --> 00:17:31.060
But in a Reload world and in
this live development world

00:17:31.060 --> 00:17:33.750
that we have today,
we want to support

00:17:33.750 --> 00:17:36.630
changing the shape of instances
while your program are running.

00:17:36.630 --> 00:17:39.360
So you can add a
new field in Reload.

00:17:39.360 --> 00:17:42.440
And what we do is we end
up going through the heap,

00:17:42.440 --> 00:17:45.910
we find every instance of
that class, we grow it,

00:17:45.910 --> 00:17:50.060
and we put null in to
where that new field is.

00:17:50.060 --> 00:17:53.280
And deleting works the same
way except we just shrink it.

00:17:53.280 --> 00:17:54.980
So we just scan
across the heap, we

00:17:54.980 --> 00:17:58.120
find every instance of
the class, shrink it down,

00:17:58.120 --> 00:18:00.160
and whatever values
were in those fields

00:18:00.160 --> 00:18:02.160
in those instances,
they're just garbage

00:18:02.160 --> 00:18:05.290
and the GC will take
care of them for you.

00:18:05.290 --> 00:18:07.180
Renaming fields
is not supported.

00:18:07.180 --> 00:18:08.740
It's just treated
like a deletion

00:18:08.740 --> 00:18:09.870
followed by an addition.

00:18:09.870 --> 00:18:11.244
TODD TURNIDGE:
Yeah, and ID could

00:18:11.244 --> 00:18:13.930
maybe-- if we have enough
context, we could do renames,

00:18:13.930 --> 00:18:16.351
but for now, it's just
additions and deletions.

00:18:16.351 --> 00:18:18.100
JOHN MCCUTCHAN: But
reordering works fine.

00:18:18.100 --> 00:18:20.160
Like we use URLs
and class names,

00:18:20.160 --> 00:18:23.000
we use field names for
matching and pairing them up.

00:18:23.000 --> 00:18:25.500
So if your class
goes from listing

00:18:25.500 --> 00:18:28.415
the fields as x, y, z to z,
y, x, everything will be fine.

00:18:28.415 --> 00:18:30.790
TODD TURNIDGE: We'll just swap
them all around in memory.

00:18:33.560 --> 00:18:35.570
OK, anonymous closures.

00:18:35.570 --> 00:18:37.340
In bold here you see
an anonymous closure

00:18:37.340 --> 00:18:39.950
that is adding two numbers.

00:18:39.950 --> 00:18:42.110
And after reload, maybe
it subtracts two numbers.

00:18:42.110 --> 00:18:45.610
Well, the closures get
captured at the time

00:18:45.610 --> 00:18:48.320
that they're created,
so it's not like

00:18:48.320 --> 00:18:50.810
just because you did a reload
that this closure that you

00:18:50.810 --> 00:18:51.935
created is going to change.

00:18:51.935 --> 00:18:54.000
It will continue to be
plus after the reload,

00:18:54.000 --> 00:18:56.297
even though you've changed it.

00:18:56.297 --> 00:18:57.880
JOHN MCCUTCHAN: So
this means that you

00:18:57.880 --> 00:19:00.335
could end up in a state
where they're both alive.

00:19:00.335 --> 00:19:02.918
TODD TURNIDGE: Yeah, you could
easily have, like, essentially,

00:19:02.918 --> 00:19:05.720
two anonymous closures, which
are, in some sense, the same.

00:19:05.720 --> 00:19:07.910
They're created at the
same point your program,

00:19:07.910 --> 00:19:09.580
but they're different
because they were

00:19:09.580 --> 00:19:10.790
created at different times.

00:19:10.790 --> 00:19:13.462
It's just part of
how closures work.

00:19:13.462 --> 00:19:14.920
JOHN MCCUTCHAN:
Anonymous closures.

00:19:14.920 --> 00:19:15.760
TODD TURNIDGE:
Anonymous closures.

00:19:15.760 --> 00:19:17.385
JOHN MCCUTCHAN: Now,
tear-off closures,

00:19:17.385 --> 00:19:20.930
these are like methods that
are attached to an instance.

00:19:20.930 --> 00:19:23.229
These always use
the latest code,

00:19:23.229 --> 00:19:25.520
and this is because when you
invoke a tear-off closure,

00:19:25.520 --> 00:19:28.230
there's a level of indirection
that it steps through where

00:19:28.230 --> 00:19:30.510
it's really attached to
the name of the method

00:19:30.510 --> 00:19:33.890
and not the source code that
was in the method at the time.

00:19:33.890 --> 00:19:36.260
So in this code example
on the slide here,

00:19:36.260 --> 00:19:40.460
you can see that I first start
off with my onTap printing 1,

00:19:40.460 --> 00:19:43.610
I make a tear-off closure, I
reload, and now it prints 2.

00:19:43.610 --> 00:19:45.930
I take another
tear-off closure, now

00:19:45.930 --> 00:19:48.870
both of these tear-off
closures print 2.

00:19:48.870 --> 00:19:50.760
TODD TURNIDGE: This
works pretty nicely

00:19:50.760 --> 00:19:53.210
when you're doing reload
as part of your development

00:19:53.210 --> 00:19:54.630
cycle, these tear-off closures.

00:19:54.630 --> 00:19:56.210
They just sort of
update themselves.

00:19:56.210 --> 00:19:58.580
JOHN MCCUTCHAN: Like
handle mod tap earlier--

00:19:58.580 --> 00:19:59.740
that's a tear-off closure.

00:19:59.740 --> 00:20:02.220
So every time I make a
change to handle mod tap,

00:20:02.220 --> 00:20:06.240
the app is going to
respect that and see that.

00:20:06.240 --> 00:20:09.200
So Dart now supports
live programming with

00:20:09.200 --> 00:20:12.296
less-than-1-second edit refresh
cycle on mobile devices.

00:20:12.296 --> 00:20:14.670
TODD TURNIDGE: Yeah, we've
got this Rewind feature coming

00:20:14.670 --> 00:20:16.503
soon, which is going
to give you the ability

00:20:16.503 --> 00:20:18.609
to fix and continue.

00:20:18.609 --> 00:20:20.400
JOHN MCCUTCHAN: So
yeah, try Flutter today.

00:20:20.400 --> 00:20:23.430
We're really excited for
you guys to try it out.

00:20:23.430 --> 00:20:26.830
Just finally, we just want to
say that this wasn't just Todd

00:20:26.830 --> 00:20:29.210
and I working on this.

00:20:29.210 --> 00:20:32.010
Ryan, who was also
on the VM team,

00:20:32.010 --> 00:20:34.060
and Ian Hickson, who's
on the Flutter team,

00:20:34.060 --> 00:20:37.960
have been very important
making this happen, as well

00:20:37.960 --> 00:20:40.180
as many other
people on both teams

00:20:40.180 --> 00:20:44.450
for bug reports and fixes.

00:20:44.450 --> 00:20:45.220
Thank you.

00:20:45.220 --> 00:20:46.386
TODD TURNIDGE: Yeah, thanks.

00:20:54.249 --> 00:20:56.040
SPEAKER 3: So you guys
did an excellent job

00:20:56.040 --> 00:20:58.922
of finishing in time to do a
little Q&amp;A if you would like.

00:20:58.922 --> 00:21:00.880
We have a couple minutes
while they get set up.

00:21:00.880 --> 00:21:02.140
Do you guys want to
answer some questions?

00:21:02.140 --> 00:21:02.710
TODD TURNIDGE: I'd love
to answer some questions.

00:21:02.710 --> 00:21:04.320
SPEAKER 3: I like just putting
you on the spot like that.

00:21:04.320 --> 00:21:04.710
Is that OK?

00:21:04.710 --> 00:21:05.730
TODD TURNIDGE: No, that's fine.

00:21:05.730 --> 00:21:07.090
SPEAKER 3: You guys
have any questions?

00:21:07.090 --> 00:21:09.381
SPEAKER 4: I'm waiting for,
like, the "SNL" thing like,

00:21:09.381 --> 00:21:11.360
so what you guys
did was awesome.

00:21:11.360 --> 00:21:14.172
Is that a question?

00:21:14.172 --> 00:21:15.130
SPEAKER 3: How awesome?

00:21:15.130 --> 00:21:16.510
SPEAKER 4: How awesome, exactly?

00:21:16.510 --> 00:21:18.895
Is this feature cool,
or the coolest feature?

00:21:18.895 --> 00:21:21.199
JOHN MCCUTCHAN: You guys
want to just grab us out

00:21:21.199 --> 00:21:22.740
of the context, you
can do that, too.

00:21:22.740 --> 00:21:24.330
TODD TURNIDGE: Yeah
that's also OK.

00:21:24.330 --> 00:21:25.280
JOHN MCCUTCHAN: Oh, I
think we've got a question.

00:21:25.280 --> 00:21:26.280
TODD TURNIDGE: OK.

00:21:26.280 --> 00:21:28.780
AUDIENCE: There is a
question about memory leaks

00:21:28.780 --> 00:21:39.550
and how many memory
[INAUDIBLE] for example,

00:21:39.550 --> 00:21:43.292
leaks so much, and
especially on Linux.

00:21:43.292 --> 00:21:45.250
SPEAKER 3: Could you
repeat the question first?

00:21:45.250 --> 00:21:46.666
TODD TURNIDGE:
Yeah, he was asking

00:21:46.666 --> 00:21:48.254
if we have problems
with memory leaks.

00:21:48.254 --> 00:21:49.420
JOHN MCCUTCHAN: Hot reload--

00:21:49.420 --> 00:21:52.460
TODD TURNIDGE: Is
your thing still on?

00:21:52.460 --> 00:21:53.980
JOHN MCCUTCHAN:
Thank you, it's not.

00:21:53.980 --> 00:21:56.900
Hot reload is implemented and
the VM does not leak memory.

00:21:56.900 --> 00:21:59.530
TODD TURNIDGE: Yeah, we create
all these new libraries,

00:21:59.530 --> 00:22:01.630
and then the old libraries,
we just unlink them

00:22:01.630 --> 00:22:04.080
and the GC takes care of them.

00:22:04.080 --> 00:22:06.270
I mean, all of our
libraries and code and stuff

00:22:06.270 --> 00:22:09.130
is all in the heap, and so once
we're not using it anymore,

00:22:09.130 --> 00:22:11.207
like on the call
stack, it goes away.

00:22:11.207 --> 00:22:13.040
JOHN MCCUTCHAN: Yeah,
those old code objects

00:22:13.040 --> 00:22:16.810
will just be GC'd after
the activation exits.

00:22:16.810 --> 00:22:17.586
Yeah.

00:22:17.586 --> 00:22:21.314
AUDIENCE: And about Flutter
framework, Flutter applications

00:22:21.314 --> 00:22:23.910
in comparison with
native applications,

00:22:23.910 --> 00:22:26.620
what about memory and CPU?

00:22:26.620 --> 00:22:28.370
JOHN MCCUTCHAN: We're
not the right people

00:22:28.370 --> 00:22:29.560
to answer that question.

00:22:29.560 --> 00:22:30.820
SPEAKER 4: Find Eric
and Seth and you

00:22:30.820 --> 00:22:32.070
can talk about that with them.

00:22:32.070 --> 00:22:34.526
JOHN MCCUTCHAN: We work
on the VM and reload.

00:22:34.526 --> 00:22:35.402
AUDIENCE: Thank you.

00:22:35.402 --> 00:22:37.068
AUDIENCE: How much
of that functionality

00:22:37.068 --> 00:22:41.036
can be reused for handlers
dot VM, [INAUDIBLE]?

00:22:41.036 --> 00:22:43.020
Is there something
that's going to come to--

00:22:43.020 --> 00:22:44.811
JOHN MCCUTCHAN: Oh,
it's already supported.

00:22:44.811 --> 00:22:45.500
AUDIENCE: OK.

00:22:45.500 --> 00:22:46.460
SPEAKER 4: The
question was does this

00:22:46.460 --> 00:22:48.960
all work in the headless Dart
desktop VM as well as Flutter?

00:22:48.960 --> 00:22:50.840
JOHN MCCUTCHAN:
Yeah, the server VM.

00:22:50.840 --> 00:22:51.120
TODD TURNIDGE: Yeah,
I was demoing it

00:22:51.120 --> 00:22:53.320
with the adventure game,
and that's basically

00:22:53.320 --> 00:22:54.430
the headless Dart VM.

00:22:54.430 --> 00:22:57.100
There's a couple of commits that
need to happen when I get back

00:22:57.100 --> 00:23:00.320
to Mountain View.

00:23:00.320 --> 00:23:03.475
AUDIENCE: So for IoT development
running Dart VM on IoT devices?

00:23:03.475 --> 00:23:04.350
JOHN MCCUTCHAN: Yeah.

00:23:04.350 --> 00:23:05.800
AUDIENCE: You could do
exactly the same thing?

00:23:05.800 --> 00:23:06.420
TODD TURNIDGE: Yeah.

00:23:06.420 --> 00:23:06.820
JOHN MCCUTCHAN: Yes.

00:23:06.820 --> 00:23:07.690
TODD TURNIDGE: And
please send us bug

00:23:07.690 --> 00:23:09.064
reports if you
find any problems.

00:23:09.064 --> 00:23:11.620
JOHN MCCUTCHAN: Yeah,
that'd be great.

00:23:11.620 --> 00:23:13.370
SPEAKER 3: Should we
do one more question?

00:23:13.370 --> 00:23:14.759
Zero more questions?

00:23:14.759 --> 00:23:15.550
Let's get it going.

00:23:15.550 --> 00:23:17.864
You guys ready
for the next talk?

00:23:17.864 --> 00:23:19.280
TODD TURNIDGE:
Thanks a lot, guys.

00:23:19.280 --> 00:23:20.830
[APPLAUSE]

