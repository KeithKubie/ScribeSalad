WEBVTT
Kind: captions
Language: en

00:00:14.230 --> 00:00:15.360
MANDY WHITE: Hi, I'm
Mandy White.

00:00:15.360 --> 00:00:17.960
I'm a developer advocate working
on the AdWords API.

00:00:17.960 --> 00:00:18.990
PAUL MATTHEWS: And I'm
Paul Matthews.

00:00:18.990 --> 00:00:21.120
I'm a developer programs
engineer, also working on the

00:00:21.120 --> 00:00:22.750
AdWords API.

00:00:22.750 --> 00:00:24.465
MANDY WHITE: Today we're going
to talk to you about a feature

00:00:24.465 --> 00:00:26.130
that was introduced into
the AdWords API

00:00:26.130 --> 00:00:27.405
recently, called AWQL.

00:00:31.500 --> 00:00:34.400
PAUL MATTHEWS: So
what is AWQL?

00:00:34.400 --> 00:00:37.050
AWQL is an AdWords
query language.

00:00:37.050 --> 00:00:40.220
It's a new feature introduced
in v 2012 06

00:00:40.220 --> 00:00:41.880
of the AdWords API.

00:00:41.880 --> 00:00:46.220
It's SQL-like syntax for
performing queries against the

00:00:46.220 --> 00:00:46.930
AdWords API.

00:00:46.930 --> 00:00:50.290
And it's an alternative to
using generic selectors.

00:00:50.290 --> 00:00:52.810
It's available for selected
AdWords API services,

00:00:52.810 --> 00:00:54.640
including Campaign
Service, Ad Group

00:00:54.640 --> 00:00:57.140
Service, and a few others.

00:00:57.140 --> 00:01:00.900
But most importantly, it's also
a [INAUDIBLE] querying

00:01:00.900 --> 00:01:02.150
the AdHoc reports.

00:01:04.860 --> 00:01:06.990
MANDY WHITE: So what is the
motivation for introducing

00:01:06.990 --> 00:01:08.190
this new query language?

00:01:08.190 --> 00:01:12.205
So the traditional methodology
used for querying, or making

00:01:12.205 --> 00:01:15.140
queries against the AdWords
API, generic selectors--

00:01:15.140 --> 00:01:18.120
can require quite a substantial
amount of code.

00:01:18.120 --> 00:01:21.150
AWQL, as we will see
in future slides,

00:01:21.150 --> 00:01:22.590
greatly simplifies that.

00:01:22.590 --> 00:01:25.580
Also the AWQL syntax is
much more intuitive.

00:01:25.580 --> 00:01:28.010
Any developers already familiar,
will code new SQL.

00:01:30.810 --> 00:01:32.510
PAUL MATTHEWS: OK, so let's
start off with an example

00:01:32.510 --> 00:01:33.790
service call.

00:01:33.790 --> 00:01:35.540
In this instance we're going
to be calling the Campaign

00:01:35.540 --> 00:01:37.530
Service, and we're going to
be trying to get hold of

00:01:37.530 --> 00:01:39.560
Campaign's objects.

00:01:39.560 --> 00:01:44.256
So we're going to give it the
criteria of CTR of greater 0

00:01:44.256 --> 00:01:46.180
or 0.5 or so clickthrough
rate.

00:01:46.180 --> 00:01:49.100
And we're going to be looking
for impressions over 100, and

00:01:49.100 --> 00:01:52.800
during the month of
September 2012.

00:01:52.800 --> 00:01:54.990
So that's the, sort
of, clause.

00:01:54.990 --> 00:01:58.650
And then we're going to sort
the results by order of

00:01:58.650 --> 00:01:59.900
impressions.

00:02:01.620 --> 00:02:03.790
So this maybe code that
you are used to.

00:02:03.790 --> 00:02:06.690
But they translate into whatever
language you're most

00:02:06.690 --> 00:02:07.840
familiar in.

00:02:07.840 --> 00:02:10.340
And basically this
is the Java API.

00:02:10.340 --> 00:02:13.100
Java library for querying
the AdWords API.

00:02:13.100 --> 00:02:16.870
So they are creating a
predicate, couple of

00:02:16.870 --> 00:02:21.590
predicates, adding these two
selectors, and we're querying

00:02:21.590 --> 00:02:23.320
the Campaign Service.

00:02:23.320 --> 00:02:25.490
And getting back
a page object.

00:02:25.490 --> 00:02:28.070
So that's the old code that
you're familiar with.

00:02:28.070 --> 00:02:31.080
As you can see, it's quite
a lot of code to

00:02:31.080 --> 00:02:34.000
query a simple request.

00:02:34.000 --> 00:02:38.840
So this is the equivalent
using the AdWords AWQL.

00:02:38.840 --> 00:02:41.130
You can see you're again
querying the Campaign Service,

00:02:41.130 --> 00:02:42.890
but we're using the
query method.

00:02:42.890 --> 00:02:45.100
We're passing in the
string, which is

00:02:45.100 --> 00:02:48.010
similar to an SQL string.

00:02:48.010 --> 00:02:51.370
But the main difference here is
that you don't have a From

00:02:51.370 --> 00:02:55.650
clause, and you know it's more
tailored towards AdWords

00:02:55.650 --> 00:02:56.790
specific stuff.

00:02:56.790 --> 00:03:00.390
But as you'll see, you also
get a page object back.

00:03:00.390 --> 00:03:05.180
So, the response is the same
as what you're used to in

00:03:05.180 --> 00:03:08.410
previous requests.

00:03:08.410 --> 00:03:11.820
And this is the alternative
using the Python library.

00:03:11.820 --> 00:03:13.590
But it's a parameterized
string.

00:03:13.590 --> 00:03:16.180
So this is probably more likely
what you'd be using to

00:03:16.180 --> 00:03:19.160
query the service.

00:03:19.160 --> 00:03:21.590
Again, returning the
page object.

00:03:21.590 --> 00:03:23.730
So let's break that down.

00:03:23.730 --> 00:03:27.550
To start off with, you're
supplying a Select, here you

00:03:27.550 --> 00:03:29.700
pass in fields that you're
interested in.

00:03:29.700 --> 00:03:32.100
You give it a Where clause,
and the criteria

00:03:32.100 --> 00:03:33.490
that goes with that.

00:03:33.490 --> 00:03:36.640
During, you're giving
it a time period.

00:03:36.640 --> 00:03:41.030
And then you Order By, and
give it the order of the

00:03:41.030 --> 00:03:41.880
results you want.

00:03:41.880 --> 00:03:44.360
And finally , Limit.

00:03:44.360 --> 00:03:46.500
In this example, we're
going to return

00:03:46.500 --> 00:03:49.260
the first 50 results.

00:03:49.260 --> 00:03:53.440
OK, so Paul's described to you
how we use AWQL against the

00:03:53.440 --> 00:03:54.280
AdWords API services.

00:03:54.280 --> 00:03:57.640
And I'm going to talk to you
about how we would use AWQL

00:03:57.640 --> 00:03:59.520
against AdHoc reports.

00:03:59.520 --> 00:04:01.840
AdHoc reports are very
simple to use.

00:04:01.840 --> 00:04:04.380
You don't actually need to use
a client [INAUDIBLE] to make

00:04:04.380 --> 00:04:06.590
queries against AdHoc reports.

00:04:06.590 --> 00:04:09.960
Send a post request, HTTP
post request would do.

00:04:09.960 --> 00:04:13.390
You'll supply some basic
HTTP headers.

00:04:13.390 --> 00:04:16.645
For example, you provide
authorization, content type,

00:04:16.645 --> 00:04:18.510
and customer id.

00:04:18.510 --> 00:04:21.010
And in the body of the post
request, you will provide, for

00:04:21.010 --> 00:04:23.520
the old way of doing it using
report definitions, you'll

00:04:23.520 --> 00:04:26.470
provide an XML fragment.

00:04:26.470 --> 00:04:27.830
The key value pair.

00:04:27.830 --> 00:04:30.480
The key being underscore
underscore rdxml.

00:04:30.480 --> 00:04:32.830
And the actual value being the
XML fragment, which is your

00:04:32.830 --> 00:04:35.170
report definition.

00:04:35.170 --> 00:04:36.670
Using AWQL is very similar.

00:04:36.670 --> 00:04:37.790
You're parsing in the
same headers.

00:04:37.790 --> 00:04:42.170
But we replaced the underscore
underscore rdxml, with

00:04:42.170 --> 00:04:43.500
underscore underscore
rd query.

00:04:43.500 --> 00:04:46.890
And this query again is a key
value pair, the value being

00:04:46.890 --> 00:04:48.520
the query string.

00:04:48.520 --> 00:04:51.500
Because we cannot actually
specify the query string, the

00:04:51.500 --> 00:04:53.820
format, sorry, there are no
formats within the query

00:04:53.820 --> 00:04:55.730
string, we have to specify
it separately.

00:04:55.730 --> 00:04:57.650
So that's an additional
parameter we have to add to

00:04:57.650 --> 00:04:58.690
the postBody.

00:04:58.690 --> 00:05:01.570
In this case it's underscore
underscore fmt.

00:05:01.570 --> 00:05:04.100
And the value for
that will be the

00:05:04.100 --> 00:05:05.770
download format you require.

00:05:05.770 --> 00:05:08.030
For example CSV or XML.

00:05:08.030 --> 00:05:10.400
You don't have to
do it this way.

00:05:10.400 --> 00:05:11.980
You can use the AdWords
API client libraries

00:05:11.980 --> 00:05:12.950
to do this for you.

00:05:12.950 --> 00:05:14.310
We have utility libraries
that will actually

00:05:14.310 --> 00:05:16.370
write queries for you.

00:05:16.370 --> 00:05:17.800
And here's some examples.

00:05:17.800 --> 00:05:19.690
And now we're looking at a code
example of how you would

00:05:19.690 --> 00:05:22.540
have done this with AdHoc
reports traditionally, with

00:05:22.540 --> 00:05:23.875
generic selectors.

00:05:23.875 --> 00:05:26.315
And again this is very similar
to the code that Paul showed

00:05:26.315 --> 00:05:30.800
you for making queries against
AdWords API services.

00:05:30.800 --> 00:05:32.430
In this case we create
a selector.

00:05:32.430 --> 00:05:33.990
We specify the field
we require.

00:05:33.990 --> 00:05:36.670
And then we assemble a report
definition object.

00:05:36.670 --> 00:05:38.840
Report name, date range type.

00:05:38.840 --> 00:05:40.720
What kind of report
we require.

00:05:40.720 --> 00:05:43.750
And finally we set the
download format.

00:05:43.750 --> 00:05:47.280
Then we use a utility library,
reportUtils, and again

00:05:47.280 --> 00:05:49.745
this is Java code.

00:05:49.745 --> 00:05:52.590
We have a download report method
on report utilities

00:05:52.590 --> 00:05:52.690
library class.

00:05:52.690 --> 00:05:56.525
And it'll be parsing an
authenticated API user.

00:05:56.525 --> 00:05:58.740
A report definition object,
which [? we ?]

00:05:58.740 --> 00:05:59.760
created earlier.

00:05:59.760 --> 00:06:02.435
And an alpha string to where we
want to write a response.

00:06:06.060 --> 00:06:09.020
How we would do that with AWQL,
it's a lot simpler.

00:06:09.020 --> 00:06:10.500
Lot less code.

00:06:10.500 --> 00:06:12.930
Obviously in this case, if you
look at it, this is a basic

00:06:12.930 --> 00:06:13.540
java string.

00:06:13.540 --> 00:06:15.575
It's not parametrized
in any way.

00:06:15.575 --> 00:06:16.910
It's a select statement.

00:06:16.910 --> 00:06:21.040
We specify the fields that
we are interested in.

00:06:21.040 --> 00:06:24.480
In this case we have to specify
a From clause, and the

00:06:24.480 --> 00:06:28.050
actual target table will be the
report we want to make the

00:06:28.050 --> 00:06:29.160
query against.

00:06:29.160 --> 00:06:32.050
In this case that's keyword
for [INAUDIBLE] report.

00:06:32.050 --> 00:06:34.580
We also want to specify in this
particular example, we

00:06:34.580 --> 00:06:36.250
want impressions
greater than 0.

00:06:36.250 --> 00:06:38.500
So we don't want with rows
that are 0 impressions.

00:06:38.500 --> 00:06:40.920
And we want it for yesterday.

00:06:40.920 --> 00:06:42.925
We can parametrize
that string.

00:06:42.925 --> 00:06:45.800
We can use string concatenation
in Java, or we

00:06:45.800 --> 00:06:48.330
can use a string
builder object.

00:06:48.330 --> 00:06:50.400
Or we can use a different
language and use the kind of

00:06:50.400 --> 00:06:52.810
example that Paul showed
you earlier.

00:06:52.810 --> 00:06:55.610
Then we can query, or make
a call against a report

00:06:55.610 --> 00:06:57.710
utilities library, again.

00:06:57.710 --> 00:06:58.540
This [INAUDIBLE]

00:06:58.540 --> 00:06:59.790
download report.

00:06:59.790 --> 00:07:02.260
We are parsing the authenticated
API user, this

00:07:02.260 --> 00:07:04.180
time we're parsing
the query string.

00:07:04.180 --> 00:07:06.690
And we also have to specify
the download format.

00:07:06.690 --> 00:07:09.270
But this goes back to the
example we showed you in post

00:07:09.270 --> 00:07:12.560
request, where we actually had
to specify which format we

00:07:12.560 --> 00:07:15.730
required, because that could
not be included in query.

00:07:15.730 --> 00:07:18.980
And the last parameter to the
call, is the alpha string

00:07:18.980 --> 00:07:19.360
[INAUDIBLE]

00:07:19.360 --> 00:07:22.320
write the results to.

00:07:22.320 --> 00:07:24.790
So quickly breaking it down,
similar to how Paul broke down

00:07:24.790 --> 00:07:26.320
the other example.

00:07:26.320 --> 00:07:27.740
We have a Select statement.

00:07:27.740 --> 00:07:30.435
And in this case we have a
mandatory From clause.

00:07:30.435 --> 00:07:34.520
And we have a Where clause to
define exactly what parameters

00:07:34.520 --> 00:07:36.840
we want to use to base
the query on.

00:07:36.840 --> 00:07:40.070
And we always have to provide
a During clause which will

00:07:40.070 --> 00:07:42.280
specify the date range for
which you want to pull

00:07:42.280 --> 00:07:43.530
statistics from the report.

00:07:46.260 --> 00:07:49.100
So let's summarize some of the
differences for AdHoc reports,

00:07:49.100 --> 00:07:52.230
between AdHoc reports, and
making calls against the

00:07:52.230 --> 00:07:55.120
AdWords API services.

00:07:55.120 --> 00:07:58.360
As we've briefly shown, you have
to specify which report

00:07:58.360 --> 00:08:01.360
you want to make the call
against, the query against.

00:08:01.360 --> 00:08:04.750
And this will be specified in
the From clause of the query.

00:08:04.750 --> 00:08:06.670
Also the During clause
is mandatory.

00:08:06.670 --> 00:08:09.800
You have to specify a date range
for which you want to

00:08:09.800 --> 00:08:12.280
make the query against.

00:08:12.280 --> 00:08:16.320
Also because AdHoc reports
supports sorting and paging,

00:08:16.320 --> 00:08:19.200
we have to provide an Order By,
and a limit, I'm sorry we

00:08:19.200 --> 00:08:21.060
cannot provide an OrderBy
and Limit clause

00:08:21.060 --> 00:08:24.050
for these query strings.

00:08:24.050 --> 00:08:27.040
More details on the exact syntax
of these queries can be

00:08:27.040 --> 00:08:31.320
found at AWQL documentation
at the following link.

00:08:31.320 --> 00:08:34.620
Paul's now going to summarize
the differences between making

00:08:34.620 --> 00:08:38.130
AWQL queries against AdWords
API services, and against

00:08:38.130 --> 00:08:40.631
AdHoc reports.

00:08:40.631 --> 00:08:43.659
PAUL MATTHEWS: OK, so firstly
the regular service calls.

00:08:43.659 --> 00:08:46.500
So with the regular service
calls you do not

00:08:46.500 --> 00:08:47.980
submit a From clause.

00:08:47.980 --> 00:08:50.230
We mentioned it earlier. it is
the main difference between

00:08:50.230 --> 00:08:53.200
AdHoc reports and service.

00:08:53.200 --> 00:08:55.840
Additionally, the During clause,
the OrderBy, and the

00:08:55.840 --> 00:08:56.800
Limit are all optional.

00:08:56.800 --> 00:08:59.290
So you don't have to
specify those.

00:08:59.290 --> 00:09:01.290
Moving on to AdHoc reports, the

00:09:01.290 --> 00:09:03.160
During clause is mandatory.

00:09:03.160 --> 00:09:05.260
The From clause is
also mandatory.

00:09:05.260 --> 00:09:07.990
So you know, there's a lot more
that you have to submit

00:09:07.990 --> 00:09:09.700
to an AdHoc report.

00:09:09.700 --> 00:09:13.480
And the Order By and Limit, as
Mandy just mentioned, are

00:09:13.480 --> 00:09:15.995
omitted because they cannot be
used with the AdHoc reports.

00:09:19.550 --> 00:09:22.315
MANDY WHITE: OK, so we talked
about how we can use AWQL to

00:09:22.315 --> 00:09:23.670
make queries against AdWords
API services and

00:09:23.670 --> 00:09:25.990
against AdHoc reports.

00:09:25.990 --> 00:09:28.780
There's a few tips we put
together about how we can make

00:09:28.780 --> 00:09:30.030
the best use of AWQL.

00:09:34.370 --> 00:09:36.670
One of the key messages we want
to pass on here, is that

00:09:36.670 --> 00:09:39.080
if you decide to replace your
existing generic selector code

00:09:39.080 --> 00:09:42.060
with AWQL code, you don't have
to actually change the way you

00:09:42.060 --> 00:09:43.330
process results.

00:09:43.330 --> 00:09:46.540
Provided the queries are
effectively the same, provide

00:09:46.540 --> 00:09:49.210
the same kind of results, then
you can process them exactly

00:09:49.210 --> 00:09:49.980
the same way.

00:09:49.980 --> 00:09:52.990
So you can just plug-in your
AWQL code to replace the

00:09:52.990 --> 00:09:54.550
generic selector code.

00:09:54.550 --> 00:09:58.210
Also AWQL has a gigantically
small impact on report

00:09:58.210 --> 00:09:59.860
generation performance.

00:09:59.860 --> 00:10:04.140
And so basically you don't
really have to worry too much

00:10:04.140 --> 00:10:08.420
about any performance decrease
when you are using AWQL.

00:10:08.420 --> 00:10:11.480
And similarly there's no actual
difference in the cost

00:10:11.480 --> 00:10:13.850
in terms of API units
between [INAUDIBLE]

00:10:13.850 --> 00:10:15.860
or AWQL.

00:10:15.860 --> 00:10:18.760
One thing we should mention
because of some of the quirks

00:10:18.760 --> 00:10:23.860
of AWQL, there's a couple of
parameters that are not

00:10:23.860 --> 00:10:26.920
supported in AWQL that you can
use with generic selectors.

00:10:26.920 --> 00:10:29.900
Particularly for specifying
date ranges.

00:10:29.900 --> 00:10:32.520
You can't specify All Time.

00:10:32.520 --> 00:10:34.300
Not really quite sure
why that is.

00:10:34.300 --> 00:10:36.230
And you can't specify
Custom Date.

00:10:36.230 --> 00:10:38.900
Custom dates can be
provided though.

00:10:38.900 --> 00:10:39.480
You just provide the
date ranges as two

00:10:39.480 --> 00:10:41.150
separate time objects.

00:10:41.150 --> 00:10:43.170
Date, time objects.

00:10:43.170 --> 00:10:43.620
So that's not a problem.

00:10:43.620 --> 00:10:47.550
You just can't specify the
clause, Custom Date.

00:10:47.550 --> 00:10:50.430
So our call to action to you is
make sure that you use AWQL

00:10:50.430 --> 00:10:53.810
the next time you define
a report query.

00:10:53.810 --> 00:10:57.460
And so the next one we can show
is, how we can do useful

00:10:57.460 --> 00:11:02.370
things with AWQL, like create a
command line interface tool

00:11:02.370 --> 00:11:05.000
for querying report data.

00:11:05.000 --> 00:11:08.100
PAUL MATTHEWS: OK, so we're
going to step into a quick CLI

00:11:08.100 --> 00:11:11.490
sample app demo here.

00:11:11.490 --> 00:11:16.720
To mean to show one way in which
you could use the AWQL

00:11:16.720 --> 00:11:18.100
sort of feature.

00:11:18.100 --> 00:11:20.890
So this application is
very, very small.

00:11:20.890 --> 00:11:23.420
It really didn't take
a lot to write.

00:11:23.420 --> 00:11:25.620
And I encourage you to do the
same if you're just curious

00:11:25.620 --> 00:11:29.050
about sort of trying out AWQL
for the first time.

00:11:29.050 --> 00:11:34.790
So all this does is it passes
the query off to the AWQL, to

00:11:34.790 --> 00:11:36.330
the endpoints on the services.

00:11:36.330 --> 00:11:38.580
And in this case we
are going to be

00:11:38.580 --> 00:11:40.340
querying the AdHoc report.

00:11:40.340 --> 00:11:43.260
So the first thing I do when I
get to this point is, I want

00:11:43.260 --> 00:11:50.630
to sort of find the information
about the table

00:11:50.630 --> 00:11:52.270
that I'm interested
in querying.

00:11:52.270 --> 00:11:54.780
So for the argument's sake of
this query, I'm going to be

00:11:54.780 --> 00:11:57.920
looking at querying the keywords
performance report.

00:11:57.920 --> 00:12:04.110
So here on the reports
definition page we have a list

00:12:04.110 --> 00:12:07.800
of all the fields that are
available to us, along with

00:12:07.800 --> 00:12:10.050
some information--

00:12:10.050 --> 00:12:12.850
some notes in the right hand
column, you know the behavior,

00:12:12.850 --> 00:12:15.280
and a lot of good information
there for you.

00:12:15.280 --> 00:12:17.780
So I'll start off by navigating
to this page and

00:12:17.780 --> 00:12:21.860
then choosing the table
I'm interested in.

00:12:21.860 --> 00:12:24.290
One good way to find this is, if
there's something you know

00:12:24.290 --> 00:12:27.230
the name of, and you're trying
to find out how to get all the

00:12:27.230 --> 00:12:31.930
information about it, is you
can just use your regular

00:12:31.930 --> 00:12:34.960
built in Find field browser.

00:12:34.960 --> 00:12:36.070
So we're going to be looking at

00:12:36.070 --> 00:12:37.890
keywords performance report.

00:12:37.890 --> 00:12:42.000
So then the next step would be
to go through, find all the

00:12:42.000 --> 00:12:44.290
fields that you're interested
in and decide what your

00:12:44.290 --> 00:12:46.870
criteria is for that
particular report.

00:12:46.870 --> 00:12:50.100
I'm not going to go through and
select it all out now, as

00:12:50.100 --> 00:12:50.910
it will take a bit too long.

00:12:50.910 --> 00:12:55.850
But I have got one that
I've prepared earlier.

00:12:55.850 --> 00:13:03.640
So again, using that command
line tool that I've prepared,

00:13:03.640 --> 00:13:06.650
I'm going to be selecting the ad
groups, the keyword id, the

00:13:06.650 --> 00:13:09.210
keyword text, the keyword
match type, impressions,

00:13:09.210 --> 00:13:16.610
clicks, and costs from the
keyword performance report.

00:13:19.870 --> 00:13:24.360
Next up, I want to specify my
criteria, which in this case

00:13:24.360 --> 00:13:27.450
we're going to be using the
impressions greater than 0,

00:13:27.450 --> 00:13:35.930
which is the same as saying
include 0 impressions False.

00:13:35.930 --> 00:13:40.530
And then finally, we're going
to say the During, because

00:13:40.530 --> 00:13:42.930
that is a mandatory field
for AdHoc reports.

00:13:42.930 --> 00:13:46.170
So During last week.

00:13:46.170 --> 00:13:49.180
And I query this report and
hopefully the result should be

00:13:49.180 --> 00:13:51.170
displaced on the screen for
us in a csv format.

00:13:56.070 --> 00:13:59.470
So what you can see here is
the response back saying

00:13:59.470 --> 00:14:00.970
keyword performance report.

00:14:00.970 --> 00:14:03.050
The date of the query.

00:14:03.050 --> 00:14:08.070
The first line of the actual csv
is, as you'll see is sort

00:14:08.070 --> 00:14:08.900
of the header columns.

00:14:08.900 --> 00:14:12.720
So I have group id, keyword
ID, keyword match type,

00:14:12.720 --> 00:14:15.980
impressions, clicks, cost, it's
all corresponding to the

00:14:15.980 --> 00:14:20.420
criteria, to the Select clause
that I've fed into the query.

00:14:20.420 --> 00:14:22.400
And then you've got
your results.

00:14:22.400 --> 00:14:26.890
So they exist down to the
second to last line.

00:14:26.890 --> 00:14:30.490
And finally on the last line you
have the totals, if you're

00:14:30.490 --> 00:14:31.890
interested in that.

00:14:31.890 --> 00:14:36.790
So here we've got a few
different keywords, things

00:14:36.790 --> 00:14:37.020
being displayed.

00:14:37.020 --> 00:14:41.160
And that concludes the
demo of the simple,

00:14:41.160 --> 00:14:43.887
AdWords CLI query app.

00:14:47.090 --> 00:14:49.090
We may have to go step
back into it.

00:14:53.812 --> 00:14:54.800
OK.

00:14:54.800 --> 00:14:56.120
MANDY WHITE: OK.

00:14:56.120 --> 00:14:57.240
Thanks Paul, that's brilliant.

00:14:57.240 --> 00:15:00.520
So just to quickly mention,
the reports, types,

00:15:00.520 --> 00:15:03.150
documentation that Paul was
looking at then is available

00:15:03.150 --> 00:15:05.720
in the AdWords API
documentation.

00:15:05.720 --> 00:15:08.100
I'm sure you can easily find
it by looking that up.

00:15:08.100 --> 00:15:13.460
So having looked at how we can
use AWQL against AdWords API

00:15:13.460 --> 00:15:16.620
services, and also how we
can make use of AWQL

00:15:16.620 --> 00:15:18.620
against AdHoc reports.

00:15:18.620 --> 00:15:21.380
Looking at a particular example,
the command line

00:15:21.380 --> 00:15:21.980
interfaces [INAUDIBLE]

00:15:21.980 --> 00:15:23.300
AWQL.

00:15:23.300 --> 00:15:25.520
Now we've pretty much finished
and wrapped up.

00:15:25.520 --> 00:15:28.000
And we have the opportunity
to answer, that

00:15:28.000 --> 00:15:29.940
you ask some questions.

00:15:29.940 --> 00:15:31.960
You can answer the questions
for us if you want.

00:15:31.960 --> 00:15:33.540
The more difficult.

00:15:33.540 --> 00:15:34.550
PAUL MATTHEWS: [INAUDIBLE]
contributors can be involved

00:15:34.550 --> 00:15:35.900
in that, I guess.

00:15:35.900 --> 00:15:36.098
MANDY WHITE: Yeah.

00:15:36.098 --> 00:15:37.980
So at the bottom there
we have a URL.

00:15:37.980 --> 00:15:41.045
A very short link URL, which we
put in the first slide, but

00:15:41.045 --> 00:15:42.950
we forgot to tell you about.

00:15:42.950 --> 00:15:46.100
And you can use that slide, it's
the moderator page, to

00:15:46.100 --> 00:15:48.240
enter questions.

00:15:48.240 --> 00:15:51.390
I'm not sure we can do live
questions as well.

00:15:51.390 --> 00:15:54.590
PAUL MATTHEWS: I don't think
we've got the Hangout set up

00:15:54.590 --> 00:15:56.260
to ask live questions.

00:15:56.260 --> 00:15:57.370
So this time it's just.

00:15:57.370 --> 00:15:58.770
MANDY WHITE: Right, so we can't
do live questions, but

00:15:58.770 --> 00:16:00.036
we can actually answer
your questions on

00:16:00.036 --> 00:16:00.830
the moderator page.

00:16:00.830 --> 00:16:02.072
Next time we do this, we'll
make sure we have

00:16:02.072 --> 00:16:02.970
the Hangout set up.

00:16:02.970 --> 00:16:03.870
PAUL MATTHEWS: Yup.

00:16:03.870 --> 00:16:05.960
MANDY WHITE: So let's look
at the moderator page.

00:16:05.960 --> 00:16:08.124
Paul, you want to go for it?

00:16:08.124 --> 00:16:09.374
PAUL MATHEWS: Sure.

00:16:11.940 --> 00:16:13.860
OK.

00:16:13.860 --> 00:16:16.030
No questions as yet.

00:16:16.030 --> 00:16:16.310
MANDY WHITE: OK.

00:16:16.310 --> 00:16:19.900
So one of the questions I
actually entered myself was,

00:16:19.900 --> 00:16:23.010
just to get things going, was
do we have to use a From

00:16:23.010 --> 00:16:26.850
clause with queries against
API services, or not?

00:16:26.850 --> 00:16:29.385
It seemed like there
was no need to.

00:16:29.385 --> 00:16:29.770
PAUL MATTHEWS: Yeah.

00:16:29.770 --> 00:16:32.870
So basically with the From
clause from the API services

00:16:32.870 --> 00:16:37.030
you don't need to submit the,
sorry, for queries against the

00:16:37.030 --> 00:16:39.630
API services you don't need to
submit the From clause because

00:16:39.630 --> 00:16:41.590
that's implied by the
service in which you

00:16:41.590 --> 00:16:42.780
are querying against.

00:16:42.780 --> 00:16:44.580
So for instance, if you are
querying against the Campaign

00:16:44.580 --> 00:16:46.660
Service, you're going to
be going querying from

00:16:46.660 --> 00:16:47.610
that sort of data.

00:16:47.610 --> 00:16:50.350
So you don't really need to
specify a From clause.

00:16:50.350 --> 00:16:50.590
MANDY WHITE: Right, OK.

00:16:50.590 --> 00:16:53.130
So those services, those, I
think, six services you

00:16:53.130 --> 00:16:56.260
identified on the second
slide, they all have an

00:16:56.260 --> 00:16:58.100
additional method on
them called Query.

00:16:58.100 --> 00:16:59.670
So there's Get, Mutate,
and now there's

00:16:59.670 --> 00:17:01.230
Query on those services.

00:17:01.230 --> 00:17:03.900
And Query basically, if you're
using query on the Campaign

00:17:03.900 --> 00:17:06.369
Service, then you don't need
to say from the Campaign

00:17:06.369 --> 00:17:07.250
Service because that's
implicit.

00:17:07.250 --> 00:17:07.970
PAUL MATTHEWS: Mm hmm.

00:17:07.970 --> 00:17:08.400
MANDY WHITE: OK.

00:17:08.400 --> 00:17:09.269
That's brilliant.

00:17:09.269 --> 00:17:10.200
PAUL MATTHEWS: Let's try
refreshing the page, that

00:17:10.200 --> 00:17:13.260
might bring back some
more results.

00:17:13.260 --> 00:17:14.510
You can remain hopeful.

00:17:24.240 --> 00:17:25.170
MANDY WHITE: Where are the
presenters is a popular

00:17:25.170 --> 00:17:26.325
question [? as well. ?]

00:17:26.325 --> 00:17:27.693
We are here.

00:17:27.693 --> 00:17:29.980
PAUL MATTHEWS: We are here.

00:17:29.980 --> 00:17:31.776
MANDY WHITE: Let us know if
you have any questions by

00:17:31.776 --> 00:17:33.110
answering on the
moderator page.

00:17:33.110 --> 00:17:35.360
PAUL MATTHEWS: Alternatively,
if there are many questions

00:17:35.360 --> 00:17:40.090
left over after this studio,
then we will do our best to

00:17:40.090 --> 00:17:44.830
turn them into forum requests,
and then respond to them.

00:17:44.830 --> 00:17:45.330
MANDY WHITE: So basically,
on that subject,

00:17:45.330 --> 00:17:46.660
we have an API forum.

00:17:46.660 --> 00:17:47.860
We haven't linked to it here.

00:17:47.860 --> 00:17:49.860
But you can easily find that
by searching on Google for

00:17:49.860 --> 00:17:51.730
AdWords API forum.

00:17:51.730 --> 00:17:53.140
That's fairly easy to find.

00:17:53.140 --> 00:17:57.490
And we have [INAUDIBLE] by
both Googlers and talk

00:17:57.490 --> 00:17:57.885
contributors.

00:17:57.885 --> 00:17:59.810
So you'll get answers there.

00:17:59.810 --> 00:18:02.860
You can also ask questions on
the YouTube page, and we can

00:18:02.860 --> 00:18:04.070
try and do our best
to answer them.

00:18:04.070 --> 00:18:06.220
I assume comments will
be open in there.

00:18:06.220 --> 00:18:06.840
So yeah.

00:18:06.840 --> 00:18:08.150
That's good.

00:18:08.150 --> 00:18:09.645
So yes, I thank you guys.

00:18:09.645 --> 00:18:12.420
Thanks for attending our Google
Developer live event

00:18:12.420 --> 00:18:13.633
today on AWQL.

00:18:13.633 --> 00:18:16.100
And we look forward to seeing
you again in the future.

00:18:16.100 --> 00:18:17.370
PAUL MATTHEWS: And just
before we go.

00:18:17.370 --> 00:18:18.110
MANDY WHITE: Just
before we go.

00:18:18.110 --> 00:18:20.630
Final slide.

00:18:20.630 --> 00:18:22.220
There's some other [? events ?]
coming up.

00:18:22.220 --> 00:18:24.700
If you do have any other
questions you want to ask,

00:18:24.700 --> 00:18:27.680
specific questions about AWQL,
or about anything else in the

00:18:27.680 --> 00:18:30.560
AdWords API, we have these
things called office hours.

00:18:30.560 --> 00:18:33.386
Basically we have a bunch of
engineers, sitting on the end

00:18:33.386 --> 00:18:35.630
of a Hangout for
an hour or so.

00:18:35.630 --> 00:18:37.465
And you can ask questions
there.

00:18:37.465 --> 00:18:39.440
These are the times
and the schedules.

00:18:39.440 --> 00:18:40.680
PAUL MATTHEWS: And this
is a face to face.

00:18:40.680 --> 00:18:42.910
So you know, you get answers
to your questions in real

00:18:42.910 --> 00:18:44.570
time, which can be really
quite beneficial.

00:18:44.570 --> 00:18:46.430
And also open a dialog
where you can ask

00:18:46.430 --> 00:18:48.050
more than one question.

00:18:48.050 --> 00:18:53.350
And also obviously we mentioned
sort of regions.

00:18:53.350 --> 00:18:56.710
So for instance, in America,
New York, on

00:18:56.710 --> 00:18:57.420
these office hours.

00:18:57.420 --> 00:19:00.170
But that's not to say that you
can't join them from Europe to

00:19:00.170 --> 00:19:01.330
the New York ones, you know.

00:19:01.330 --> 00:19:02.560
They are open to everybody.

00:19:02.560 --> 00:19:05.440
It's just that the time zones
suit the New York office

00:19:05.440 --> 00:19:06.862
probably best.

00:19:06.862 --> 00:19:07.336
MANDY WHITE: Yeah.

00:19:07.336 --> 00:19:07.810
OK.

00:19:07.810 --> 00:19:09.040
So thanks for doing
this today.

00:19:09.040 --> 00:19:10.320
And we look forward to seeing
you again in the future.

00:19:10.320 --> 00:19:10.920
PAUL MATTHEWS: Thank you.

00:19:10.920 --> 00:19:12.170
MANDY WHITE: Bye bye.

