WEBVTT
Kind: captions
Language: en

00:00:00.020 --> 00:00:05.800
We talked a bit about the hardware, you know, people are working on the hardware of quantum computing, yep

00:00:05.800 --> 00:00:08.940
What about software? where do you start thinking about that?

00:00:11.920 --> 00:00:14.260
Writing software for a quantum computer

00:00:14.340 --> 00:00:20.740
In my opinion is actually not very very different from how we write software for just a normal computer

00:00:20.880 --> 00:00:22.480
and we think about

00:00:22.480 --> 00:00:25.760
software in terms of being able to write down instructions

00:00:25.960 --> 00:00:32.420
for the computer and the computer executing these instructions changing some internal state when I write instructions for

00:00:32.620 --> 00:00:38.380
any type of computer whether it be like a modern MacBook Pro or an old PDP-11

00:00:38.560 --> 00:00:44.560
In both cases in the end, we have an assembly code that gets executed that's changing the memory the disk

00:00:45.070 --> 00:00:49.200
The registers in your CPU and so on and it's not different with a quantum computer

00:00:49.200 --> 00:00:51.839
It's just like the question is what are we changing?

00:00:52.570 --> 00:00:56.279
And how do we change them? We can really describe these things

00:00:57.190 --> 00:01:03.989
in quite simple terms, if we were to do this in with sort of full textbook honesty, we would discuss things like

00:01:04.989 --> 00:01:09.448
finite dimensional vector spaces and in Hilbert spaces and

00:01:10.060 --> 00:01:14.699
Linear operators and unitary maps and all that stuff and all that stuff is very very important

00:01:14.700 --> 00:01:19.200
If if you're actually sitting down writing a program but to get an understanding of it

00:01:19.200 --> 00:01:24.680
I think we can do away with it. And actually just think about things in terms of simple probabilities. So the idea of a Qubit

00:01:25.380 --> 00:01:27.260
So Qubit is a Bit in a quantom computer

00:01:27.400 --> 00:01:32.500
Yep it is. Yeah. It's sort of the fundamental building block. It's like a it's like a bit and a regular computer

00:01:33.369 --> 00:01:39.659
The way I think of it is it's a resource in the computer. It's a resource that you can use to perform a computation

00:01:40.840 --> 00:01:46.950
So a qubit to me is anything it's sort of abstract. But anything that has two states of being and

00:01:47.470 --> 00:01:52.559
Some possibility or probability of those states. So for instance we can think about

00:01:53.079 --> 00:02:00.119
Photons and their polarization a photon can be sort of polarized left and right or it can be polarized up and down

00:02:00.600 --> 00:02:05.700
But if we're not looking then maybe it's it's possibly in one or the other. Maybe it's 50%

00:02:06.280 --> 00:02:09.200
moving and traversing left and right and 50%

00:02:09.840 --> 00:02:12.800
Moving up and down. This is just for photons

00:02:13.300 --> 00:02:19.420
Turns out there are lots and lots of different ways to construct qubits the qubits that that we work on in the so called field

00:02:19.420 --> 00:02:26.170
Of superconducting quantum computation. We use a device called a superconducting charge qubit

00:02:26.170 --> 00:02:29.799
It doesn't matter all the details, but it suffice to say that the two states there

00:02:29.799 --> 00:02:34.029
Are is their charge or is there no charge in this circuit?

00:02:34.030 --> 00:02:38.289
And then of course, we have the same thing. It could we could have a probability like maybe there's a 10% chance

00:02:38.290 --> 00:02:40.290
there's a charge or maybe there's a

00:02:40.549 --> 00:02:44.709
90% chance there's a charge. These are called superconducting charge

00:02:45.230 --> 00:02:49.209
Qubits again, it sounds complicated, but the essence is the same two states

00:02:49.209 --> 00:02:53.240
but maybe it's in one or the other the interesting thing though is

00:02:53.660 --> 00:02:58.060
When we have multiple qubits, and this is really where the power of quantum computation happens

00:02:58.420 --> 00:03:00.580
We can actually think of it sort of simply

00:03:00.880 --> 00:03:06.900
Diagrammatically that if qubits if I just represent them sort of as a circle here, maybe we have three the idea

00:03:06.909 --> 00:03:10.419
Is that these qubits can interact this guy can interact with this guy?

00:03:10.519 --> 00:03:16.719
this guy can interact with this guy and these can interact with one another and every time we add a qubit if we were to

00:03:16.720 --> 00:03:20.140
Add a circle here. Let's say we added this fourth qubit right here

00:03:20.140 --> 00:03:25.300
We noticed that every single one of them can now interact with it. We have to draw lots of these lines

00:03:25.549 --> 00:03:31.119
It turns out that a quantum computer can deal with these additions of qubits in a very efficient fashion

00:03:32.269 --> 00:03:35.529
But like I said a qubit is something where it has two states

00:03:35.529 --> 00:03:38.720
So each of these guys can be in two states with a particular probability

00:03:39.180 --> 00:03:44.580
let's say the two states and our just 0 and 1, our qubit can be 0 or 1 or

00:03:44.840 --> 00:03:52.200
Possibly something in between. So if I write down these qubits with the probability, let's say we have three qubits here

00:03:52.209 --> 00:03:54.209
I'll call it Q0

00:03:54.260 --> 00:03:57.699
Q1 and Q2 what we have is

00:03:58.250 --> 00:04:04.149
That qubit 0 let's say it's this one right here 1 and 2, well qubit 0 could be in 0 or 1

00:04:04.250 --> 00:04:06.489
so it has some probability of being in 0

00:04:07.000 --> 00:04:11.800
Qubit 1 also has some probability of being in 0 and qubit 0 also has some probability being in 0

00:04:12.020 --> 00:04:13.780
maybe that's a 10% chance

00:04:13.860 --> 00:04:20.420
But now we have to painstakingly go through a write every one qubit 0 has a probability of being in the 0 state

00:04:20.480 --> 00:04:24.680
Qubit 1 also 0 and qubit 2 and we can write down all these possibilities

00:04:25.660 --> 00:04:32.940
Etc, etc until we get to the possibility that all of them are one and each of them has a probability. Maybe this is 5%

00:04:33.590 --> 00:04:40.209
Maybe this is 7%, maybe this is like 35%, maybe there's a very high percentage chance that all of them are one

00:04:40.720 --> 00:04:42.160
8% and so on

00:04:42.440 --> 00:04:50.160
so every time we add a qubit the size of this table doubles the number of probability percentages doubles and it turns out that

00:04:50.570 --> 00:04:56.920
these probabilities right here are ultimately what a quantum computer is computing with when we do an

00:04:57.200 --> 00:05:00.700
Instruction on a quantum computer when we instruct it to do something in the end

00:05:00.700 --> 00:05:06.160
it's always about changing these probabilities to favor some computation that we're trying to do

00:05:06.180 --> 00:05:09.300
When we start up a quantum computer, when we flick the switch on

00:05:09.460 --> 00:05:14.260
it'll start as 100% in this state and everything else will be 0%

00:05:14.380 --> 00:05:19.960
We start off here, and we know that we start off here. It might be that when we apply a certain operation

00:05:20.200 --> 00:05:23.160
So for example an operation as is the so called

00:05:24.160 --> 00:05:25.660
superposition

00:05:25.670 --> 00:05:28.420
Initialization or we call it Hadamard initialization

00:05:28.550 --> 00:05:34.990
This is if we have any number of qubits, so starting off in zero, and maybe we want every probability to be equal

00:05:34.990 --> 00:05:36.720
So if we want to start off here

00:05:36.720 --> 00:05:39.105
We do something called Hadamard initialization where we do

00:05:39.105 --> 00:05:44.600
a particular instruction called the Hadamard gate and what happens is this 100% now turns into

00:05:44.920 --> 00:05:46.800
Let's say we just have one qubit

00:05:46.810 --> 00:05:54.070
It would be 50% chance in the zero State and 50% chance in the one state if we had two qubits Hadamard

00:05:54.220 --> 00:05:58.760
initialization would cause us to be 25% chance with both qubits being 0

00:05:58.860 --> 00:06:00.440
25% chance

00:06:00.440 --> 00:06:01.730
0 1

00:06:01.730 --> 00:06:03.730
25% chance being 1 0

00:06:03.920 --> 00:06:09.759
25% chance being 1 1 the point is is that this particular instructions one instruction on a quantum computer?

00:06:10.190 --> 00:06:17.529
Allows us to change these probabilities in a way that we'd like and it might be useful for us to do something like this Hadamard

00:06:17.690 --> 00:06:24.130
Initialization with all the probabilities being equal because then from here we could do some operation that affects all these qubits and affects all these

00:06:24.130 --> 00:06:28.899
Probabilities sort of in the same way. But like I said, this is just one possible instruction

00:06:30.640 --> 00:06:35.880
So there can be an infinite number just like a normal computer it's not that they're an infinite number of instructions

00:06:35.900 --> 00:06:38.880
It's that they're an infinite of possible things you could do with the instructions

00:06:39.260 --> 00:06:45.480
So one of the greatest discoveries was that we can arrange these probabilities to be in whatever way that we would like

00:06:46.240 --> 00:06:48.680
Using five instructions total

00:06:48.820 --> 00:06:51.040
there are sort of five different ways that we can

00:06:51.060 --> 00:06:55.620
Permute these things and change them and there are this, one is called a measure instruction

00:06:55.620 --> 00:06:58.900
measure instruction is pretty important because while we're talking about probabilities

00:06:59.000 --> 00:07:01.380
we can't actually see these probabilities in the quantum computer

00:07:01.380 --> 00:07:02.780
They're just in there

00:07:02.860 --> 00:07:08.020
At some point. We do want to see are they zeros or ones? Like we need to answer that question

00:07:08.020 --> 00:07:12.120
So the measure instruction will take any list of probabilities and turn it into

00:07:12.650 --> 00:07:18.160
One of them will change to 100% So each of these is 25% chance. It'll pick one

00:07:18.160 --> 00:07:23.840
Let's say it's this one right here and measure is gonna make this a hundred percent with the other ones being zero percent

00:07:23.920 --> 00:07:28.940
That's one way of changing and then incidentally we also get to read out from the clunkier that it was a 1 0

00:07:29.020 --> 00:07:33.180
That's how we get our answers. That's the only way we get an answer. In fact from the quantum computer

00:07:33.180 --> 00:07:38.520
The rest of them are just purely ways of changing these probabilities. There are lots of different ways

00:07:38.520 --> 00:07:40.520
You can have instruction just like norm...

00:07:40.540 --> 00:07:46.680
Regular computers every single computer that's ever been built or every single CPU that's erver been built always has a different instruction set

00:07:46.880 --> 00:07:51.000
One possible instruction set is the following we have this Hadamard

00:07:51.020 --> 00:07:52.240
Is that named after someone?

00:07:52.240 --> 00:07:55.160
Yes, it's named after I think he was a mathematician

00:07:55.160 --> 00:08:00.780
He worked on a variety of mathematical subjects and there's a matrix that's actually one divided by square root of 2

00:08:01.480 --> 00:08:05.640
1 1 1 negative 1 which is a so-called Hadamard matrix

00:08:06.220 --> 00:08:11.660
Incidentally this is also used to represent how these probabilities change so Hadamard is one instruction

00:08:12.380 --> 00:08:18.640
There's another instruction called Phase, again It just has the effect of changing probabilities around in a particular way

00:08:18.640 --> 00:08:22.680
There's another instruction called the T gate not very

00:08:23.220 --> 00:08:29.680
Creatively named there's another instruction called the CNOT gate and what's special

00:08:29.680 --> 00:08:34.960
about the CNOT gate is that all of these right here act on one qubit

00:08:35.120 --> 00:08:40.180
We say I want to do a measure on qubit 2 or i want to do a T gate on qubit 0

00:08:40.440 --> 00:08:47.400
It sort of affects only one qubit. It'll affect a lot of probabilities because even though we're operating on one qubit here

00:08:47.400 --> 00:08:51.800
it accounts for this entire column so it actually changes all the probabilities

00:08:51.840 --> 00:08:54.800
CNOT is special because we get to choose two qubits

00:08:54.800 --> 00:08:55.980
This is how we get this

00:08:55.980 --> 00:09:01.300
interaction between them so CNOT you can say I want to do this on qubit 0 and qubit 2

00:09:01.300 --> 00:09:06.840
For instance and this itself is an instruction in a sort of quantum assembly code

00:09:07.020 --> 00:09:08.840
Are these instructions a bit like gates?

00:09:09.320 --> 00:09:17.240
Yea, so they are like gates but there's an interesting reversal and for example a NAND gate is something like this where data is coming

00:09:17.240 --> 00:09:20.220
Into the gate and data comes out of the gate

00:09:20.300 --> 00:09:27.100
what's interesting about these gates and quantum computation is sort of the opposite you have data that's sitting there all these probabilities and

00:09:27.620 --> 00:09:33.160
You like apply the gate to the Machine and all the probabilities change. So you're not sending data into the gate

00:09:33.160 --> 00:09:37.660
You're not putting this gate on the chip like a NAND gate for instance

00:09:38.020 --> 00:09:41.420
Is a gate that you would actually etch into a chip

00:09:41.460 --> 00:09:47.400
Here it's an instruction that you apply to the computer and it changes these probabilities, but nonetheless

00:09:47.480 --> 00:09:50.500
They're both different operations that you do on data

00:09:50.500 --> 00:09:55.700
And how does what you do is code get changed into these operations of instructions

00:09:55.740 --> 00:10:02.599
Yeah, so like with normal computers you can write these instructions out as assembly code. In fact one example is

00:10:03.209 --> 00:10:04.940
Say I want the following probabilities

00:10:04.940 --> 00:10:11.719
I have 0 0 0 1 1 0 1 1 I want this I want it to be 50% chance to be 0 0 or

00:10:12.000 --> 00:10:18.040
50% chance to be 1 1 this is called a bell state with a bell state. It's interesting because

00:10:18.420 --> 00:10:23.720
Theoretically let's suppose I have a qubit. Let's say close I could hold a qubit and

00:10:23.720 --> 00:10:25.720
Let's say I gave you a qubit

00:10:25.780 --> 00:10:28.600
it's 50% chance 0 0 or 50% chance 1 1

00:10:28.600 --> 00:10:34.000
so even if we travelled halfway across the world and I decided to measure my qubit with the measure

00:10:34.230 --> 00:10:36.560
Instruction and I determine that to 0

00:10:36.750 --> 00:10:43.669
Then I know for certain that you must be a 0 because there's a zero percent chance that were different, but somehow we determine this

00:10:43.670 --> 00:10:48.560
It's a 50% chance. It's not that it is already chosen literally is 50% chance. You don't know which one it is

00:10:49.829 --> 00:10:52.279
So we can write a program to construct a bell state

00:10:52.280 --> 00:10:55.160
I won't explain exactly why it works this way

00:10:55.160 --> 00:11:01.100
But you do a Hadamard on my qubit, qubit 0 we do a CNOT on

00:11:01.680 --> 00:11:06.880
My qubit and your qubit and we're done. This is a quantum program. You can write this out.

00:11:06.880 --> 00:11:11.080
Now there are higher levels of quantum programming where we don't want to restrict ourselves these instructions

00:11:11.080 --> 00:11:15.549
Maybe I want to more directly Express the probabilities and how I want them to change

00:11:15.550 --> 00:11:19.149
They all have to add up to 1 of course. I mean, we have a certain percentage chance

00:11:19.149 --> 00:11:23.679
It has to be 100% in the end, but maybe I want to shift the probabilities around in a particular way

00:11:23.680 --> 00:11:25.870
But not in any of the ways that's in our gate set

00:11:25.870 --> 00:11:28.800
I can write that down that can use something called a quantum

00:11:28.820 --> 00:11:34.880
compiler a piece of software that that converts what I want into these native instructions that gives me the

00:11:35.020 --> 00:11:37.500
next level of abstraction in the code

00:11:37.500 --> 00:11:43.120
we can go all the way up to using a full-blown library for writing this stuff one library that

00:11:43.200 --> 00:11:45.540
We've constructed is something called "PyQuil"

00:11:45.920 --> 00:11:53.400
Which allows us to actually write Python code to express quantum computations in Quil is actually this instruction set here

00:11:53.660 --> 00:11:58.140
Quil stands for quantum instruction language, which lets you write down this assembly code

00:11:58.140 --> 00:12:00.900
But hey, who came up with this things?

00:12:00.900 --> 00:12:04.580
is this a commercial thing or is this like...

00:12:04.580 --> 00:12:09.720
Yeah, yeah so quil was originally this particular type of instruction set

00:12:10.380 --> 00:12:12.760
Was a paper that I actually wrote a while ago

00:12:13.580 --> 00:12:18.360
The idea of gates and everything was very well known for many decades previous to that

00:12:18.760 --> 00:12:25.800
So this is a particular encoding of gates as instructions PyQuil is a library that's open source, it's free

00:12:25.800 --> 00:12:32.100
There are no restrictions really on using it to construct these programs, but it does allow you to actually connect up to

00:12:32.300 --> 00:12:37.120
Rigetti Computing's real quantum computers if you if you so pleased to actually run your programs

00:12:38.080 --> 00:12:42.820
But if you don't want to connect up to the quantum computers and you just want to simulate on your own laptop this can connect

00:12:42.820 --> 00:12:44.820
Up to a an open source

00:12:44.840 --> 00:12:50.040
Simulation tool that we have if you just kind of want to see how these probabilities change and so on

00:12:54.380 --> 00:13:01.560
Not quite you still have to express a quantum computation so a quantum computer doesn't print things out it's

00:13:01.560 --> 00:13:06.660
it's manipulating these probabilities so at some point you start to express things as

00:13:06.680 --> 00:13:12.310
Quantum instructions, so definitely if you wanted to make a bell state writing the bell state program you could do that

00:13:12.310 --> 00:13:17.140
But could you write "Hello world?" No, and this goes back to the fact that the quantum computer is a coprocessor

00:13:17.200 --> 00:13:21.340
Just like saying you don't write 'Hello World' on your GPU generally

00:13:22.020 --> 00:13:28.600
You don't express any particular computation and you also don't compile Python Into code on your GPU

00:13:28.600 --> 00:13:33.920
You write special code within Python that gets run on your GPU and it's the same thing with quantum computing

00:13:33.920 --> 00:13:40.920
and i know you said there are certain stabilty issues do you get hard answers outta this?

00:13:41.040 --> 00:13:47.240
So, yeah, so when an answer comes out when you measure you do get definite answer out, however

00:13:47.240 --> 00:13:54.340
since there's noise what we have to do is write our program get an answer out and store that and actually

00:13:54.340 --> 00:13:55.980
Rerun it multiple times

00:13:55.980 --> 00:14:00.980
We have to gather statistics about the answer and it turns out that the more you do this the more

00:14:01.200 --> 00:14:06.360
Accurate your answers become and that is to account for noise in the quantum computer currently

00:14:06.360 --> 00:14:11.060
So when we're talking about setting these probabilities, what you want them to be

00:14:11.060 --> 00:14:14.940
and i understand kind of running operations and gates to do

00:14:16.900 --> 00:14:19.020
just sounds like you know the answer

00:14:19.020 --> 00:14:21.280
Yeah, no, you don't know the answer

00:14:21.280 --> 00:14:22.340
You just show that

00:14:22.340 --> 00:14:27.600
If you were to do this series of operations that you'd get the right answer on, the answer might be different depending

00:14:27.760 --> 00:14:30.780
ofcourse the answer will be diffrent depending on the problem that you have

00:14:30.920 --> 00:14:33.900
so for instance one of the

00:14:34.080 --> 00:14:38.800
Main questions the quantum computer can solve is the same question that you can get from something called the Fourier

00:14:38.860 --> 00:14:45.200
Transform where you can find if you have like a sound wave and you want to find what frequencies it has

00:14:45.700 --> 00:14:48.900
you know that if you run the Fourier transform

00:14:49.260 --> 00:14:55.620
Proven using mathematics and so on that the answer will be the set of frequencies that make up that sound

00:14:55.900 --> 00:15:01.170
Likewise here. There's actually something called a quantum Fourier transform where if you run it

00:15:01.170 --> 00:15:04.780
you know that probabilities will accumulate on the

00:15:04.780 --> 00:15:08.900
Answers or the frequencies. Maybe that your that your sound wave has

00:15:08.940 --> 00:15:13.760
So, you know just by the construction of your program that you'll get the correct answer

00:15:13.860 --> 00:15:20.100
Not that you know the correct answer itself at the front-end, and that's the same with classical computing in my opinion

00:15:20.100 --> 00:15:22.380
You rarely do you know what the final answer is

00:15:22.380 --> 00:15:27.920
You just know the computation or the program that you've written will produce the correct answer

00:15:32.380 --> 00:15:34.840
You need more than one qubit to make this work

00:15:34.840 --> 00:15:36.360
You can use a qubit

00:15:36.360 --> 00:15:40.580
if you have a normal qubit your table is gonna look like this you're gonna have prob and

00:15:40.660 --> 00:15:44.800
Maybe it's like 50% in your states are just 0 and 1

00:15:44.920 --> 00:15:48.680
Except they're just not very many useful things you can do with a single qubit

00:15:48.680 --> 00:15:55.080
the power really comes from multiple qubits because you get this nice scaling law where if you have n qubits the number of

00:15:55.140 --> 00:16:03.680
Probabilities that you get to work with is 2 to the power of n so every single additional qubit you're doubling the number of probabilities that you have to work with

00:16:17.460 --> 00:16:19.940
How do you know how to do that for a regular computer though

00:16:19.960 --> 00:16:24.120
Well, I suppose with a regular computer if you're if you're adding numbers together

00:16:34.210 --> 00:16:38.069
Yep something comes out. Mm-hmm. It's the same thing at the quantum computer

00:16:38.069 --> 00:16:44.540
Your input is a bunch of probabilities which you know at the very start and all these gates change those probabilities in a controlled way

00:16:44.540 --> 00:16:48.740
You know exactly how Hadamard or Phase or T or CNOT

00:16:48.740 --> 00:16:53.280
you know exactly how it's gonna change those and you can write down exactly how it'll change those so you can

00:16:53.520 --> 00:17:00.240
Mechanically do the computation in the same way that we can mechanically do it with adders or ale use or whatever

00:17:00.240 --> 00:17:05.520
Just turns out that the most basic type of computation is actually a really it's a really large one

00:17:05.520 --> 00:17:12.960
It's actually equivalent to a big matrix multiply. If you were to write this out your probabilities as a column vector

00:17:13.420 --> 00:17:15.640
50% 25%

00:17:15.640 --> 00:17:18.280
Whatever 7% etc, etc

00:17:18.380 --> 00:17:24.480
Every operation in a quantum computer is actually specified as a matrix. You have a big set of matrix elements

00:17:24.500 --> 00:17:28.160
Maybe it's like 1 0 0 0 0 0 0 0

00:17:28.360 --> 00:17:30.040
1 1/2

00:17:30.080 --> 00:17:35.900
3/4 whatever I'm making it up as I go along of course, but you know with certainty 100% certainty that this operation

00:17:35.910 --> 00:17:40.229
Maybe this is like Hadamard on qubit 0 and Hadamard on qubit 1 or something like that

00:17:40.440 --> 00:17:45.120
it's not but you know that this operation is gonna change his probabilities and I could if I wanted to

00:17:45.460 --> 00:17:51.660
Manually go and compute this matrix multiplication. The thing is like I said this vector right here grows

00:17:52.420 --> 00:17:56.780
doubles in size every time I add a qubit so it's better for a quantum computer to do it as opposed to me

00:17:56.780 --> 00:17:58.780
or even a normal computer doing it

00:18:04.400 --> 00:18:09.820
Yep, this multiplication happens on the order of 50 to 250

00:18:10.020 --> 00:18:14.540
nanoseconds on a computer no matter the number of qubits that you have even if you have

00:18:14.580 --> 00:18:20.800
250 qubits this vector right here would be 2 to the power of 250 which is some enormously large number

00:18:20.800 --> 00:18:23.180
I don't even know an order of magnitude estimate of what that is

00:18:23.180 --> 00:18:29.700
It's so bigger than any computer on earth could store bigger than any computer in the universe could store but nonetheless it will do this

00:18:30.060 --> 00:18:37.860
Multiplication in 50 nanoseconds, which really starts getting into why quantum computers show promise for very fast or very powerful applications

00:18:38.020 --> 00:18:39.860
How much does a quantum computer cost then?

00:18:40.580 --> 00:18:41.900
Oh my gosh

00:18:42.160 --> 00:18:46.680
All the components it costs a great deal for sure if you want to buy one and have it in your living room

00:18:52.540 --> 00:19:00.120
Yeah, so one of the big popular ones is a very recent algorithm back in I think 2014 is when I came out

