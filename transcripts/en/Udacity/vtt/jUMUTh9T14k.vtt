WEBVTT
Kind: captions
Language: en

00:00:00.340 --> 00:00:03.480
With that we conclude discussion of synchronization

00:00:03.480 --> 00:00:06.939
and communication issues in parallel systems. The next

00:00:06.939 --> 00:00:09.820
part of the lesson will cover scheduling issues

00:00:09.820 --> 00:00:12.940
in parallel systems. You'll notice once again when

00:00:12.940 --> 00:00:15.600
we discuss scheduling issues that the mantra

00:00:15.600 --> 00:00:19.130
is always the same. Namely, pay attention to

00:00:19.130 --> 00:00:22.860
keeping the caches warm to ensure good performance.

00:00:22.860 --> 00:00:25.790
We're going to look at scheduling issues in

00:00:25.790 --> 00:00:30.720
parallel systems. Fundamentally, the typical behavior of

00:00:30.720 --> 00:00:35.750
any thread or process running on a processor is to do the following: compute for

00:00:35.750 --> 00:00:41.560
a while and then make a blocking IO system call or it might want

00:00:41.560 --> 00:00:44.020
to snychronize with other threads that it is part

00:00:44.020 --> 00:00:46.700
of in the application or it might be that

00:00:46.700 --> 00:00:48.660
it is a compute bond thread, in which case

00:00:48.660 --> 00:00:50.790
it might just run out of the time quantum that

00:00:50.790 --> 00:00:53.290
it has been given by the scheduler on the

00:00:53.290 --> 00:00:56.960
processor. But fundamentally what that means is this is

00:00:56.960 --> 00:01:00.900
a point at which the operating system, in particular

00:01:00.900 --> 00:01:03.670
the scheduler piece of the operating system, can schedule

00:01:03.670 --> 00:01:07.320
some other thread or process to run on the

00:01:07.320 --> 00:01:10.600
CPU. So how should the scheduler go about picking

00:01:10.600 --> 00:01:12.770
the next thread or process to run in the

00:01:12.770 --> 00:01:15.820
processors, given that it had the choice of other threads

00:01:15.820 --> 00:01:17.760
that in can run at any point of time?

