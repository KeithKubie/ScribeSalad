WEBVTT
Kind: captions
Language: en

00:00:00.159 --> 00:00:02.450
RONY ROZEN: If your app
displays large amounts of data,

00:00:02.450 --> 00:00:04.850
chances are you're using--
or at least should be using--

00:00:04.850 --> 00:00:07.310
a UITableView or a
UICollectionView.

00:00:07.310 --> 00:00:09.249
The goal of these
UI components is

00:00:09.249 --> 00:00:10.790
to make your life
easier when dealing

00:00:10.790 --> 00:00:12.212
with large amounts of data.

00:00:12.212 --> 00:00:13.670
But if you don't
use them properly,

00:00:13.670 --> 00:00:16.760
you can end up with a far
from perfect user experience.

00:00:16.760 --> 00:00:19.430
Let me share a couple of
UITableView optimization tips

00:00:19.430 --> 00:00:21.500
that are also relevant
for UICollectionView.

00:00:21.500 --> 00:00:23.150
Your users will
thank you for this.

00:00:23.150 --> 00:00:25.870
[MUSIC PLAYING]

00:00:25.870 --> 00:00:28.000
If you don't optimize
your UITableView use,

00:00:28.000 --> 00:00:29.980
there will be a lag when
the user is scrolling.

00:00:29.980 --> 00:00:31.690
That's, obviously,
not the smooth user

00:00:31.690 --> 00:00:33.070
experience you want to provide.

00:00:33.070 --> 00:00:34.580
So what can you do?

00:00:34.580 --> 00:00:36.940
Let's start with the simplest,
yet most significant tip.

00:00:36.940 --> 00:00:38.320
We use Identifier.

00:00:38.320 --> 00:00:40.270
You see, the way you
UITableView works

00:00:40.270 --> 00:00:41.770
is that new cells
are rendered right

00:00:41.770 --> 00:00:44.500
before they enter the screen
as the user is scrolling.

00:00:44.500 --> 00:00:46.030
At the same time,
other cells that

00:00:46.030 --> 00:00:48.830
have recently left the screen
are waiting to be reused.

00:00:48.830 --> 00:00:51.070
So using these cells that
were already rendered

00:00:51.070 --> 00:00:53.230
will be significantly more
efficient than creating

00:00:53.230 --> 00:00:55.240
new cells from scratch.

00:00:55.240 --> 00:00:57.420
The way to do this is to
provide each type of cell

00:00:57.420 --> 00:00:59.800
with a reuse identifier
when it's initially created,

00:00:59.800 --> 00:01:01.630
and ask for cells with
the same identifier

00:01:01.630 --> 00:01:03.890
whenever a new cell
needs to be rendered.

00:01:03.890 --> 00:01:07.510
This is done using UITableView's
dequeueReusableCell method.

00:01:07.510 --> 00:01:09.610
You provide the relevant
use identifier string,

00:01:09.610 --> 00:01:12.580
and the method returns a cell
with the same user identifier.

00:01:12.580 --> 00:01:15.050
If there is an already rendered
cell that can be reused,

00:01:15.050 --> 00:01:17.050
this is what the
method will return.

00:01:17.050 --> 00:01:18.880
If you have a custom
class for this cell,

00:01:18.880 --> 00:01:20.950
you should use the
register cellClass

00:01:20.950 --> 00:01:22.870
forCellReuseIdentifier
method, so

00:01:22.870 --> 00:01:26.290
that the dequeueReuseableCell
method will not fetch or create

00:01:26.290 --> 00:01:29.200
an instance of the
matching class.

00:01:29.200 --> 00:01:31.300
Note that if you have
multiple cell types,

00:01:31.300 --> 00:01:33.670
say, a list of classes
and a list of students

00:01:33.670 --> 00:01:36.240
for each class, you should make
sure to use different reuse

00:01:36.240 --> 00:01:38.224
identifiers for
each type of cell.

00:01:38.224 --> 00:01:39.640
This will ensure
that when calling

00:01:39.640 --> 00:01:41.811
the dequeueReuseableCell
method, the return cell

00:01:41.811 --> 00:01:43.810
will have the right
structure, and will save you

00:01:43.810 --> 00:01:45.910
the setup time.

00:01:45.910 --> 00:01:48.730
So now that we have our new
UITableView cell object,

00:01:48.730 --> 00:01:50.650
or a custom subclass,
we need to make

00:01:50.650 --> 00:01:52.660
sure it displays the
relevant content.

00:01:52.660 --> 00:01:56.080
This is done in the TableView
cellForRow indexPath method.

00:01:56.080 --> 00:01:58.510
Our goal is to make this
method implementation as short

00:01:58.510 --> 00:02:00.260
and to the point as possible.

00:02:00.260 --> 00:02:02.620
This is not the place
for complex computations,

00:02:02.620 --> 00:02:05.770
image manipulations, or any
other time-consuming actions.

00:02:05.770 --> 00:02:07.960
All of the heavy lifting
needs to be done elsewhere

00:02:07.960 --> 00:02:10.389
and be prepared by the time
this method is reached.

00:02:10.389 --> 00:02:12.280
Otherwise, you
guessed it, you can

00:02:12.280 --> 00:02:14.170
forget about smooth scrolling.

00:02:14.170 --> 00:02:16.390
Needless to say that it is
not the place for dealing

00:02:16.390 --> 00:02:17.840
with off-screen displays.

00:02:17.840 --> 00:02:20.680
Anything that isn't going
to be presented in the cell,

00:02:20.680 --> 00:02:22.870
or can be calculated
elsewhere, and not

00:02:22.870 --> 00:02:26.739
in the cellForRow indexPath
method doesn't belong here.

00:02:26.739 --> 00:02:28.780
In addition to keeping
this method implementation

00:02:28.780 --> 00:02:30.427
short, quick, and
to the point, you

00:02:30.427 --> 00:02:32.260
need to make sure that
you're loading images

00:02:32.260 --> 00:02:34.270
from the web on a
background thread.

00:02:34.270 --> 00:02:37.035
You don't want your display to
lag, or even worse, get stuck,

00:02:37.035 --> 00:02:38.410
while you're
waiting for an image

00:02:38.410 --> 00:02:39.950
to be loaded and displayed.

00:02:39.950 --> 00:02:42.067
It'll be a significantly
better user experience

00:02:42.067 --> 00:02:44.650
to show the cell immediately and
have the content from the web

00:02:44.650 --> 00:02:47.620
join a short while
after, when it's ready.

00:02:47.620 --> 00:02:49.450
Make sure to also
cache everything

00:02:49.450 --> 00:02:51.190
you can so that the
next time the user

00:02:51.190 --> 00:02:53.590
scrolls to a row that was
already displayed in the past,

00:02:53.590 --> 00:02:54.874
there will be no need to wait.

00:02:54.874 --> 00:02:56.290
The image will
appear immediately,

00:02:56.290 --> 00:02:58.617
since it was already
loaded and cached.

00:02:58.617 --> 00:03:00.700
There are multiple open
source libraries out there

00:03:00.700 --> 00:03:02.260
that can save you the
effort of implementing

00:03:02.260 --> 00:03:03.700
these improvements yourself.

00:03:03.700 --> 00:03:05.830
A simple Google Search
can find several of them,

00:03:05.830 --> 00:03:07.690
and you can pick your
personal favorite.

00:03:07.690 --> 00:03:10.720
One example is Kingfisher,
a lightweight, swift library

00:03:10.720 --> 00:03:13.300
for downloading and caching
images from the web.

00:03:13.300 --> 00:03:15.790
The simplest use case
will look like this.

00:03:15.790 --> 00:03:18.130
This will allow you to load
the image of your choosing,

00:03:18.130 --> 00:03:21.340
cache it, and if you attempt
to load the same image later,

00:03:21.340 --> 00:03:25.400
it will be retrieved from cache
and not reloaded from the web.

00:03:25.400 --> 00:03:26.830
Another tip that
can significantly

00:03:26.830 --> 00:03:28.402
improve the scrolling
experience is

00:03:28.402 --> 00:03:30.610
to make sure that the cell's
background is completely

00:03:30.610 --> 00:03:34.120
opaque, and, if possible, has
a single consistent background

00:03:34.120 --> 00:03:36.260
color, and not a
gradient, for example.

00:03:36.260 --> 00:03:38.800
So unless you need the cell's
background to be transparent,

00:03:38.800 --> 00:03:41.540
and are willing to possibly
pay for it in performance,

00:03:41.540 --> 00:03:44.080
make sure to have an opaque
background color for each cell,

00:03:44.080 --> 00:03:47.590
especially if it's the same
color as the view's background.

00:03:47.590 --> 00:03:49.330
I used UITableView
for these tips,

00:03:49.330 --> 00:03:51.700
but they are also
relevant UICollectionView.

00:03:51.700 --> 00:03:54.040
Give them a try and see for
yourself how much smoother

00:03:54.040 --> 00:03:55.090
you're scrolling gets.

00:03:55.090 --> 00:03:57.760
I can assure you your users
will notice and appreciate it

00:03:57.760 --> 00:03:58.630
as well.

00:03:58.630 --> 00:04:01.000
Until next time, I'm Rony
Rozen for "Route 85."

00:04:01.000 --> 00:04:01.860
Thanks for watching.

00:04:01.860 --> 00:04:04.910
[MUSIC PLAYING]

