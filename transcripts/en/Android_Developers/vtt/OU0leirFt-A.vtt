WEBVTT
Kind: captions
Language: en

00:00:00.254 --> 00:00:01.670
DAN MILLER: My
name is Dan Miller.

00:00:01.670 --> 00:00:04.790
I work for Unity Technologies
as an XR evangelist.

00:00:04.790 --> 00:00:08.390
So I mostly focus on AR and VR.

00:00:08.390 --> 00:00:11.360
But I've done a lot of mobile
game development in the past

00:00:11.360 --> 00:00:14.300
and built a lot of
Android applications.

00:00:14.300 --> 00:00:17.210
And what I want to do
today is talk a little bit

00:00:17.210 --> 00:00:20.780
about some best practices
for Unity development

00:00:20.780 --> 00:00:23.506
inside the Android ecosystem.

00:00:23.506 --> 00:00:25.130
So there's going to
be some fairly kind

00:00:25.130 --> 00:00:28.790
of basic or easy wins, as
well as talking about things

00:00:28.790 --> 00:00:31.130
you can do, and how to
understand and start

00:00:31.130 --> 00:00:34.430
some of the debugging
process, as well as some newer

00:00:34.430 --> 00:00:36.980
features and things
that are maybe still

00:00:36.980 --> 00:00:38.510
a little bit in early access.

00:00:38.510 --> 00:00:41.974
And if you are publishing your
game in the near coming months,

00:00:41.974 --> 00:00:43.640
you'll see some of
these things starting

00:00:43.640 --> 00:00:46.130
to come out, and just some
strategies that you can take

00:00:46.130 --> 00:00:48.570
advantage of as a developer.

00:00:48.570 --> 00:00:50.240
So before I get
started, I want to ask

00:00:50.240 --> 00:00:51.920
how many people
have heard of Unity,

00:00:51.920 --> 00:00:55.469
or are aware of the
Unity editor or engine.

00:00:55.469 --> 00:00:56.760
All right, lots of hands there.

00:00:56.760 --> 00:01:00.140
So if you're not aware,
Unity is a piece of software

00:01:00.140 --> 00:01:03.650
or a tool for writing
interactive applications.

00:01:03.650 --> 00:01:06.140
And we've done a
lot of work to make

00:01:06.140 --> 00:01:10.220
it very easy to develop
and create your games

00:01:10.220 --> 00:01:13.660
and publish them to stores,
like the Google Play Store.

00:01:13.660 --> 00:01:15.164
There's actually
integrated settings

00:01:15.164 --> 00:01:16.580
in the publish
settings so you can

00:01:16.580 --> 00:01:19.460
set up a lot of your
things, build out your APK,

00:01:19.460 --> 00:01:22.110
and push it up right away.

00:01:22.110 --> 00:01:22.610
All right.

00:01:22.610 --> 00:01:24.410
And so what I want
to do first is just

00:01:24.410 --> 00:01:26.540
go through what I
call some easy wins.

00:01:26.540 --> 00:01:28.610
Some basic techniques
to consider

00:01:28.610 --> 00:01:31.250
when publishing and
developing your application

00:01:31.250 --> 00:01:33.390
within the Unity editor.

00:01:33.390 --> 00:01:36.410
Next, I'm going to talk about
ADB, the Android Debug Bridge,

00:01:36.410 --> 00:01:38.660
how you can set that up,
and how you can utilize

00:01:38.660 --> 00:01:42.200
that to get some information
about what's actually happening

00:01:42.200 --> 00:01:46.765
with your application running
on Android back to your PC.

00:01:46.765 --> 00:01:48.890
And after that, I'm just
going to talk a little bit

00:01:48.890 --> 00:01:52.910
about reducing the APK
size on your application

00:01:52.910 --> 00:01:55.580
so that you can make
it easier for users

00:01:55.580 --> 00:01:57.890
to get a hold of your
app, try it right away,

00:01:57.890 --> 00:02:00.050
and not have to wait
for a long download time

00:02:00.050 --> 00:02:04.010
or downloading it over
something like Wi-Fi.

00:02:04.010 --> 00:02:06.650
All right, so let's start
with some easy wins.

00:02:06.650 --> 00:02:09.639
The first thing I want to talk
about is just texture atlasing.

00:02:09.639 --> 00:02:12.950
And what this is is it's
really common in 2D development

00:02:12.950 --> 00:02:14.810
where you pack all
of your sprites

00:02:14.810 --> 00:02:17.480
together in a single texture.

00:02:17.480 --> 00:02:20.180
What this allows you to
do is reduce draw calls.

00:02:20.180 --> 00:02:22.250
And you can then
kind of split it up

00:02:22.250 --> 00:02:24.080
to use different
little sprite sheets

00:02:24.080 --> 00:02:27.860
for each individual sprite,
but have them all packed here

00:02:27.860 --> 00:02:29.930
on a certain texture.

00:02:29.930 --> 00:02:32.750
And while this works
really well for 2D,

00:02:32.750 --> 00:02:36.170
it's also pretty common
to do it for 3D as well.

00:02:36.170 --> 00:02:38.430
You can see there's two
little bug creatures here.

00:02:38.430 --> 00:02:41.030
One's more of a dragonfly,
and one's a ladybug.

00:02:41.030 --> 00:02:43.670
But they're actually using
the same texture here

00:02:43.670 --> 00:02:45.900
and just referencing
different parts of it.

00:02:45.900 --> 00:02:47.840
So when you're creating
things like 3D assets,

00:02:47.840 --> 00:02:52.670
you can consider laying out the
UVs on a shared UV sheet here,

00:02:52.670 --> 00:02:54.770
and then reference the
same texture to, again,

00:02:54.770 --> 00:03:00.570
just reduce draw calls, and
optimize your application.

00:03:00.570 --> 00:03:03.300
Now, the other
thing to consider is

00:03:03.300 --> 00:03:06.330
how you're compressing
your textures,

00:03:06.330 --> 00:03:10.840
and what sort of shaders you're
using to render your 3D models.

00:03:10.840 --> 00:03:12.530
And again, this is
more on the 3D side,

00:03:12.530 --> 00:03:15.160
but does apply a
little bit to 2D.

00:03:15.160 --> 00:03:18.090
So one thing to keep
in mind is right now,

00:03:18.090 --> 00:03:20.820
inside the Unity editor,
the standard shader

00:03:20.820 --> 00:03:24.110
is PBR, or
Physically-Based Rendering.

00:03:24.110 --> 00:03:28.200
And this is meant to reflect
the lighting conditions

00:03:28.200 --> 00:03:31.020
and features in the real world.

00:03:31.020 --> 00:03:33.270
We have reflective
surfaces that are

00:03:33.270 --> 00:03:36.060
able to reflect the
environment around them,

00:03:36.060 --> 00:03:39.250
similar to what we have that
exist in the real world.

00:03:39.250 --> 00:03:42.120
Things like different lighting
settings and stuff like that.

00:03:42.120 --> 00:03:45.040
Now, depending on what sort
of application you're making,

00:03:45.040 --> 00:03:48.370
or what sort of stylistic choice
you're making with your models,

00:03:48.370 --> 00:03:52.470
it's not always really
appropriate to have these PBR

00:03:52.470 --> 00:03:55.230
materials and have all these
different options for what

00:03:55.230 --> 00:03:56.490
you need.

00:03:56.490 --> 00:03:59.040
You can see here that these
two bugs are a little bit more

00:03:59.040 --> 00:04:02.190
stylized or cartoon-like,
so it doesn't necessarily

00:04:02.190 --> 00:04:05.640
make sense to have
them fully going

00:04:05.640 --> 00:04:08.460
through the processes that's
required to render them based

00:04:08.460 --> 00:04:10.590
on physically-based properties.

00:04:10.590 --> 00:04:12.090
So what I've done
here is I actually

00:04:12.090 --> 00:04:15.720
have two different materials
that are backed-- one

00:04:15.720 --> 00:04:19.680
by the standard shader, and one
by a much lighter shader here.

00:04:19.680 --> 00:04:22.650
And you can see
the settings here.

00:04:22.650 --> 00:04:24.720
And even without
fully understanding

00:04:24.720 --> 00:04:26.820
what's happening at
the shader level,

00:04:26.820 --> 00:04:31.020
you can easily see the contrast
between the differences

00:04:31.020 --> 00:04:35.499
of the instructions or the maps
that are associated with this.

00:04:35.499 --> 00:04:38.040
And you'll see here on one side
we have just a simple texture

00:04:38.040 --> 00:04:38.767
assignment.

00:04:38.767 --> 00:04:41.100
And on the other, while we
have that texture assignment,

00:04:41.100 --> 00:04:43.200
we also have all these
different settings.

00:04:43.200 --> 00:04:46.080
But I haven't actually
adjusted them all at all.

00:04:46.080 --> 00:04:48.570
And if I go back
there, you can almost

00:04:48.570 --> 00:04:50.250
barely see a
difference between how

00:04:50.250 --> 00:04:53.590
the lighting and the
rendering is set up here.

00:04:53.590 --> 00:04:55.560
So something to really
keep in mind, depending

00:04:55.560 --> 00:04:59.070
if you're using 3D models and
the actual stylistic approach

00:04:59.070 --> 00:05:02.010
that you want to
your assets, is just

00:05:02.010 --> 00:05:05.790
considering using a
more lightweight shader

00:05:05.790 --> 00:05:08.010
or a mobile-optimized shader.

00:05:08.010 --> 00:05:10.200
So within Unity in
the material settings,

00:05:10.200 --> 00:05:12.420
you can actually drop down,
choose the shader that's

00:05:12.420 --> 00:05:14.580
backed for that material.

00:05:14.580 --> 00:05:17.140
And there is a specific
mobile one as well.

00:05:17.140 --> 00:05:19.740
So really consider this when
setting up your 3D models.

00:05:22.530 --> 00:05:25.350
And the last thing-- and this is
something that's kind of unique

00:05:25.350 --> 00:05:27.150
to the Android platform--

00:05:27.150 --> 00:05:30.450
is, within the Unity editor,
in the application namespace

00:05:30.450 --> 00:05:33.930
and API, we actually
have an is genuine check.

00:05:33.930 --> 00:05:36.360
And what you can do
here is, in your code,

00:05:36.360 --> 00:05:40.070
you can go and check
if the APK is genuine.

00:05:40.070 --> 00:05:42.210
And what it means
to be genuine is

00:05:42.210 --> 00:05:45.790
if it is directly downloaded
from the Google Play Store

00:05:45.790 --> 00:05:47.590
and has not been altered.

00:05:47.590 --> 00:05:51.910
Now, we all know that APK can
be fairly easily distributed.

00:05:51.910 --> 00:05:54.540
And this is really helpful
for testing or letting

00:05:54.540 --> 00:05:57.570
your buddy try out your
game before it's released.

00:05:57.570 --> 00:05:59.580
And what you can
do in your app is

00:05:59.580 --> 00:06:02.790
that you can use
this is genuine check

00:06:02.790 --> 00:06:06.520
to potentially restrict some
features or things like that.

00:06:06.520 --> 00:06:09.660
So you could restrict
access to the in-app store

00:06:09.660 --> 00:06:10.830
that's in your thing.

00:06:10.830 --> 00:06:13.830
You could also restrict
access to maybe certain levels

00:06:13.830 --> 00:06:18.750
or something if the is
genuine check is not passed.

00:06:18.750 --> 00:06:20.580
Now, something to keep
in mind is that this

00:06:20.580 --> 00:06:22.890
is a fairly expensive call.

00:06:22.890 --> 00:06:26.610
So if you are using it, consider
using it at a single point

00:06:26.610 --> 00:06:29.700
before you kind of
show different features

00:06:29.700 --> 00:06:30.810
or applications.

00:06:30.810 --> 00:06:33.420
And don't try to call
this every frame, as that

00:06:33.420 --> 00:06:37.085
will get pretty expensive.

00:06:37.085 --> 00:06:39.210
All right, and now I just
want to dive a little bit

00:06:39.210 --> 00:06:40.200
into debugging.

00:06:40.200 --> 00:06:42.990
And this is kind of a process
that I go through when

00:06:42.990 --> 00:06:44.940
developing any apps on Android.

00:06:44.940 --> 00:06:47.610
It is a little bit
more rudimentary

00:06:47.610 --> 00:06:50.100
but kind of helps
you get a base start

00:06:50.100 --> 00:06:55.220
to understand what's going
on and how to integrate this.

00:06:55.220 --> 00:06:57.200
And so for this, I use ADB.

00:06:57.200 --> 00:06:59.830
So ADB is the
Android Debug Bridge.

00:06:59.830 --> 00:07:02.900
And what it is is it's
basically a robust command line

00:07:02.900 --> 00:07:06.020
tool that allows you
to link in directly

00:07:06.020 --> 00:07:08.270
to your Android device.

00:07:08.270 --> 00:07:10.730
You can do this through
USB by just plugging it

00:07:10.730 --> 00:07:13.550
into your device, opening
up the ADB console,

00:07:13.550 --> 00:07:16.190
and then there's a lot
of associated commands,

00:07:16.190 --> 00:07:21.300
as well as flags that you can
use to get information back.

00:07:21.300 --> 00:07:24.740
Now, one thing to keep in
mind is that ADB gives you

00:07:24.740 --> 00:07:26.790
a lot of information back.

00:07:26.790 --> 00:07:28.880
And if you're not
using any filtering,

00:07:28.880 --> 00:07:31.580
it'll be hard to even really
read or understand what's

00:07:31.580 --> 00:07:34.880
happening, as information
just continually flies through

00:07:34.880 --> 00:07:37.840
in the console itself.

00:07:37.840 --> 00:07:39.150
So what can you do for this?

00:07:39.150 --> 00:07:43.080
Well, you can actually
set a specific Unity flag.

00:07:43.080 --> 00:07:45.360
But again, I just want
to kind of highlight here

00:07:45.360 --> 00:07:48.060
that, as a developer,
when you're connecting

00:07:48.060 --> 00:07:51.510
your device via ADB
or via your computer,

00:07:51.510 --> 00:07:53.670
you can do it the USB.

00:07:53.670 --> 00:07:55.590
And if you're using
a more modern phone,

00:07:55.590 --> 00:07:58.260
one thing to keep in mind is
that you will need to unlock

00:07:58.260 --> 00:08:00.420
and look at your phone
and actually allow

00:08:00.420 --> 00:08:02.410
those USB debugging.

00:08:02.410 --> 00:08:04.870
And that's an option in
the developer settings.

00:08:04.870 --> 00:08:07.110
So if you guys are
developing for Android,

00:08:07.110 --> 00:08:10.630
hopefully your Android device
is already in developer mode.

00:08:10.630 --> 00:08:12.180
And there's a little
checkbox there

00:08:12.180 --> 00:08:14.460
for allowing USB debugging.

00:08:14.460 --> 00:08:17.740
And then from here, you can
connect it to your computer,

00:08:17.740 --> 00:08:21.090
and then start hooking up ADB
and getting some information

00:08:21.090 --> 00:08:22.700
back.

00:08:22.700 --> 00:08:24.530
It is also available via Wi-Fi.

00:08:24.530 --> 00:08:27.440
And you can do this via
the connected editor

00:08:27.440 --> 00:08:30.150
in the console
window within Unity.

00:08:30.150 --> 00:08:32.501
So as I mentioned, there's
actually a flag or a callback

00:08:32.501 --> 00:08:33.000
here.

00:08:33.000 --> 00:08:35.490
And you can do a -s Unity.

00:08:35.490 --> 00:08:37.650
And that will give
you specific callbacks

00:08:37.650 --> 00:08:39.900
from your app running in Unity.

00:08:39.900 --> 00:08:42.750
So here I just have
a small, little debug

00:08:42.750 --> 00:08:46.650
log that every time I change
the orientation from portrait

00:08:46.650 --> 00:08:50.580
to landscape, it just
outputs a debug message

00:08:50.580 --> 00:08:53.070
within my console in the app.

00:08:53.070 --> 00:08:57.180
And as I'm running this on my
phone, and as it's connected,

00:08:57.180 --> 00:09:00.630
you can actually see these
callbacks through ADB.

00:09:00.630 --> 00:09:03.690
Now, it'll also output things
like errors or null reference

00:09:03.690 --> 00:09:07.350
exceptions, which, if you've
developed a lot of applications

00:09:07.350 --> 00:09:09.660
in Unity, you know you
always get those a lot

00:09:09.660 --> 00:09:11.244
where certain things
aren't hooked up,

00:09:11.244 --> 00:09:13.326
or certain things aren't
initialized before you're

00:09:13.326 --> 00:09:14.320
trying to call them.

00:09:14.320 --> 00:09:17.460
And you can get that
information back via ADB.

00:09:17.460 --> 00:09:19.650
So you can start tracing
and understanding

00:09:19.650 --> 00:09:23.010
where those issues
are coming from.

00:09:23.010 --> 00:09:24.560
All right, and now
what I want to do

00:09:24.560 --> 00:09:29.000
is talk a little bit about
reducing the size of your APK.

00:09:29.000 --> 00:09:32.540
So within Unity,
and just really when

00:09:32.540 --> 00:09:34.460
building any sort
of application,

00:09:34.460 --> 00:09:37.160
especially in the
mobile ecosystem,

00:09:37.160 --> 00:09:40.580
you know that how fast
your user can actually

00:09:40.580 --> 00:09:44.270
play and experience your
game is crucial in getting

00:09:44.270 --> 00:09:48.930
them to be retained and
continue to play it.

00:09:48.930 --> 00:09:52.490
And so part of this is a
strategy for delivering

00:09:52.490 --> 00:09:55.880
a small APK, or a
small application,

00:09:55.880 --> 00:09:58.100
that they can get
started with right away,

00:09:58.100 --> 00:10:00.500
they can download
not over Wi-Fi,

00:10:00.500 --> 00:10:03.470
and they can really
just start experiencing.

00:10:03.470 --> 00:10:06.050
So for this, there's a
couple different strategies

00:10:06.050 --> 00:10:08.840
both built into Unity and
the Google Play Store.

00:10:08.840 --> 00:10:11.580
And I want to talk about
how you, as a developer,

00:10:11.580 --> 00:10:14.540
can start taking
advantage of those.

00:10:14.540 --> 00:10:17.180
All right, so the first
one is splitting the APK

00:10:17.180 --> 00:10:19.020
by target architecture.

00:10:19.020 --> 00:10:21.230
Now, this is a little
bit of a newer function.

00:10:21.230 --> 00:10:25.760
So it's available in the latest
version of Unity in 2018.2.

00:10:25.760 --> 00:10:28.430
So that's the latest stable
release, available now.

00:10:28.430 --> 00:10:30.680
And what it allows
you to do is it

00:10:30.680 --> 00:10:34.580
allows you to check which
APK target architectures

00:10:34.580 --> 00:10:38.010
you specifically want when
you build out your app.

00:10:38.010 --> 00:10:40.190
Now, the Play Store
actually allows

00:10:40.190 --> 00:10:43.610
you to upload different
versions of the APK

00:10:43.610 --> 00:10:45.920
for all these target
architectures.

00:10:45.920 --> 00:10:48.830
And then, depending
on what device

00:10:48.830 --> 00:10:51.330
you're on and what target
architecture it has,

00:10:51.330 --> 00:10:54.410
it will actually download
these separate APKs.

00:10:54.410 --> 00:10:57.885
Previously, inside Unity, when
you would package up an APK,

00:10:57.885 --> 00:10:59.510
you would target
certain architectures,

00:10:59.510 --> 00:11:01.160
and it would all
kind of be combined

00:11:01.160 --> 00:11:03.980
into a single APK,
which ended up bloating

00:11:03.980 --> 00:11:05.870
your size a little bit.

00:11:05.870 --> 00:11:09.080
So this is just an easy win
where you can separate things

00:11:09.080 --> 00:11:11.780
out, and it'll output
different APKs depending

00:11:11.780 --> 00:11:14.400
on which checkboxes you hit.

00:11:14.400 --> 00:11:16.530
This is also a step
towards compliance

00:11:16.530 --> 00:11:19.380
with things like
the new Android P,

00:11:19.380 --> 00:11:22.560
as well as just
from requirements

00:11:22.560 --> 00:11:25.102
as you start to
build out your apps.

00:11:25.102 --> 00:11:26.560
The other thing
that's supported is

00:11:26.560 --> 00:11:30.940
something called APK
expansion files, or OBB.

00:11:30.940 --> 00:11:32.770
And what this is
is this is a way

00:11:32.770 --> 00:11:36.790
to build a base
unit of your game--

00:11:36.790 --> 00:11:39.850
think of something like the
main menu and the first couple

00:11:39.850 --> 00:11:40.930
levels--

00:11:40.930 --> 00:11:43.060
and then actually
split it up into what

00:11:43.060 --> 00:11:45.250
we call expansion
files, which are

00:11:45.250 --> 00:11:48.160
downloaded alongside your game.

00:11:48.160 --> 00:11:50.620
And again, this is
a way for your users

00:11:50.620 --> 00:11:54.790
to download your
application right away,

00:11:54.790 --> 00:11:57.670
and then start feeding in
the necessary data to then

00:11:57.670 --> 00:11:59.980
experience later levels.

00:11:59.980 --> 00:12:02.470
If someone downloads
your app right now,

00:12:02.470 --> 00:12:06.010
they might just want to
play the first couple levels

00:12:06.010 --> 00:12:08.440
and not have to wait for the
entire thing to download,

00:12:08.440 --> 00:12:11.290
or the entire size of your APK.

00:12:11.290 --> 00:12:14.320
So how do you take advantage
of this within Unity?

00:12:14.320 --> 00:12:17.140
Well, there's a small
checkbox there to build out

00:12:17.140 --> 00:12:22.980
these OBB within the publish
settings under player settings.

00:12:22.980 --> 00:12:25.190
Once you build this out,
it will actually, again,

00:12:25.190 --> 00:12:27.080
kind of separate your APK.

00:12:27.080 --> 00:12:29.030
And through the
Google Play Store,

00:12:29.030 --> 00:12:31.790
you can upload these
alongside of it.

00:12:31.790 --> 00:12:36.200
Now, because Android is
more of an open ecosystem,

00:12:36.200 --> 00:12:41.270
you do have to be careful about
users deleting these OBB files.

00:12:41.270 --> 00:12:43.460
And you can't
really restrict them

00:12:43.460 --> 00:12:46.970
from cleaning up their
phone, deleting some things

00:12:46.970 --> 00:12:49.430
to try to clear up maybe
space for another app

00:12:49.430 --> 00:12:51.090
or something like that.

00:12:51.090 --> 00:12:54.420
So it is required
that, if you do this,

00:12:54.420 --> 00:12:57.980
you actually provide a way
for the user to re-download

00:12:57.980 --> 00:13:01.310
these files within your app.

00:13:01.310 --> 00:13:02.930
So how do you do this?

00:13:02.930 --> 00:13:05.170
Well, Google provides
some documentation

00:13:05.170 --> 00:13:08.040
on how to actually integrate
it on their side of things

00:13:08.040 --> 00:13:10.250
for native applications.

00:13:10.250 --> 00:13:12.880
And on the Unity
side, if you guys just

00:13:12.880 --> 00:13:16.060
all want to take a picture
of this exact function

00:13:16.060 --> 00:13:17.739
and call back.

00:13:17.739 --> 00:13:19.030
And I was just kidding on that.

00:13:19.030 --> 00:13:21.310
There's actually an
asset store package

00:13:21.310 --> 00:13:25.180
here that we've written
that allows you to easily go

00:13:25.180 --> 00:13:28.000
and integrate that
extra download that's

00:13:28.000 --> 00:13:33.610
required if you do split up
your application using these OBB

00:13:33.610 --> 00:13:34.960
files.

00:13:34.960 --> 00:13:38.470
So again, this is a
setting built into Unity

00:13:38.470 --> 00:13:42.040
to split up your
app in order to have

00:13:42.040 --> 00:13:43.870
the main part of
the game, something

00:13:43.870 --> 00:13:46.300
like the main menu and
the first couple levels,

00:13:46.300 --> 00:13:48.880
and then expansion
files that complete

00:13:48.880 --> 00:13:50.710
the rest of your application.

00:13:50.710 --> 00:13:53.530
And the real goal
here is to try to get

00:13:53.530 --> 00:13:57.850
under that 100-megabyte limit
so that your users are not

00:13:57.850 --> 00:14:01.450
required to download
your app via Wi-Fi.

00:14:01.450 --> 00:14:05.980
And so this, you can see,
is just the Google Play OBB,

00:14:05.980 --> 00:14:08.590
and it's free on the
Unity asset store, which

00:14:08.590 --> 00:14:10.850
just has this little
code snippet here,

00:14:10.850 --> 00:14:13.270
as well as some sample
scenes and examples that

00:14:13.270 --> 00:14:16.960
allows you to then put a
button into your app, which

00:14:16.960 --> 00:14:21.610
is a requirement for the
Play Store when using that.

00:14:21.610 --> 00:14:22.110
All right.

00:14:22.110 --> 00:14:25.950
And now I want to talk a bit
about Google Play Instant.

00:14:25.950 --> 00:14:28.770
So this was mentioned in
a lot of previous talks,

00:14:28.770 --> 00:14:31.830
and it's something that I
think is really exciting

00:14:31.830 --> 00:14:35.610
and kind of what's possible
in coming in the future.

00:14:35.610 --> 00:14:38.610
So Google Play Instant
is a way for users

00:14:38.610 --> 00:14:41.430
to try out your
game even quicker

00:14:41.430 --> 00:14:44.370
it's a smaller,
bite-sized experience that

00:14:44.370 --> 00:14:47.340
may be something
like a single level,

00:14:47.340 --> 00:14:51.630
or really a taste of what your
full application and game can

00:14:51.630 --> 00:14:53.150
be.

00:14:53.150 --> 00:14:54.890
And how do you start
to integrate this,

00:14:54.890 --> 00:14:57.260
or how do you build
this within Unity?

00:14:57.260 --> 00:15:00.320
Well, Google's actually
made a plug-in.

00:15:00.320 --> 00:15:01.580
It's still in beta.

00:15:01.580 --> 00:15:03.380
But the cool thing
you can see here

00:15:03.380 --> 00:15:06.600
is that it's very
actively being worked on.

00:15:06.600 --> 00:15:07.940
I think this release--

00:15:07.940 --> 00:15:10.790
says here that it was really
something like four days ago.

00:15:10.790 --> 00:15:12.360
That was actually four days ago.

00:15:12.360 --> 00:15:16.250
So eight days ago, this plug-in
was updated and released.

00:15:16.250 --> 00:15:18.800
And it's really being
actively developed.

00:15:18.800 --> 00:15:21.470
And it is kind of a
special part of the store

00:15:21.470 --> 00:15:25.100
right now, where you can
give your users access to it.

00:15:25.100 --> 00:15:27.840
Now to integrate this and
use this within Unity,

00:15:27.840 --> 00:15:31.550
there is a lot of
additional steps and setups

00:15:31.550 --> 00:15:34.310
that you need to go
through fairly carefully.

00:15:34.310 --> 00:15:36.320
But Google has done
a really good job

00:15:36.320 --> 00:15:38.090
of providing a menu here.

00:15:38.090 --> 00:15:40.880
And it actually walks you
through the required steps.

00:15:40.880 --> 00:15:42.650
You drop down the
Google Play Instant.

00:15:42.650 --> 00:15:45.560
You can actually build to
the Instant architecture,

00:15:45.560 --> 00:15:47.270
and then run that
on your device.

00:15:47.270 --> 00:15:50.480
And it gives you this small,
little sample of your app

00:15:50.480 --> 00:15:52.700
and packages it all up for you.

00:15:52.700 --> 00:15:55.130
So this is directly
integrated into Unity.

00:15:55.130 --> 00:15:57.350
So you can start taking
advantage of it now

00:15:57.350 --> 00:16:00.200
and build these
instant play apps.

00:16:00.200 --> 00:16:04.090
And that's pretty much it
for my talk, so thanks a lot.

