WEBVTT
Kind: captions
Language: en

00:00:00.470 --> 00:00:03.510
To start designing algorithms for
a cluster or a supercomputer,

00:00:03.510 --> 00:00:04.800
you're going to need a machine model.

00:00:04.800 --> 00:00:06.840
How about this one?

00:00:06.840 --> 00:00:07.350
In this model,

00:00:07.350 --> 00:00:11.940
a machine is a collection of nodes
connected by some kind of network.

00:00:11.940 --> 00:00:16.170
Each node consists of a processor
connected to a private memory.

00:00:17.270 --> 00:00:20.480
By private, I mean that the node
can only directly read or

00:00:20.480 --> 00:00:21.560
write its own memory.

00:00:21.560 --> 00:00:26.400
It can't directly access
the memory of other nodes.

00:00:26.400 --> 00:00:30.440
I'll refer to this type of machine
as a Distributed Memory machine.

00:00:30.440 --> 00:00:34.390
Now this abstraction of
private memories is critical.

00:00:34.390 --> 00:00:36.250
It implies that to share data,

00:00:36.250 --> 00:00:39.280
nodes will have to send
messages to one another.

00:00:39.280 --> 00:00:43.610
So for example, suppose this node
wants to send data to this node.

00:00:43.610 --> 00:00:45.950
The only way to do that is the sender or

00:00:45.950 --> 00:00:50.860
source has to package up a message and
then put it on the network.

00:00:50.860 --> 00:00:54.510
So this message will have to find
some path through the network to get

00:00:54.510 --> 00:00:56.800
from the source node to
the destination node.

00:00:58.000 --> 00:01:02.170
In contrast to shared memory where
we read and write shared variables,

00:01:02.170 --> 00:01:06.260
this style of parallel communication
is called message-passing.

00:01:06.260 --> 00:01:09.540
Now this machine model
has a few simple rules.

00:01:09.540 --> 00:01:12.850
The zeroth rule of the model is
you never talk about the model.

00:01:12.850 --> 00:01:16.790
By that I mean, you need to master and
internalize these rules.

00:01:16.790 --> 00:01:18.920
Okay, so what are the real rules?

00:01:18.920 --> 00:01:23.360
The first rule is that you should
assume the network is fully connected.

00:01:23.360 --> 00:01:26.300
That means there's always a path
from any node to any other node in

00:01:26.300 --> 00:01:27.570
the network.

00:01:27.570 --> 00:01:30.880
The second rule is that the network
links are bi-directional.

00:01:30.880 --> 00:01:32.890
What does that mean?

00:01:32.890 --> 00:01:34.900
Well, suppose I have two
nodes in the machine, and

00:01:34.900 --> 00:01:36.185
they're connected by a link.

00:01:36.185 --> 00:01:39.830
Bi-directional means that
the link can carry a message in

00:01:39.830 --> 00:01:42.340
both directions at the same time.

00:01:42.340 --> 00:01:45.840
So, while one message is going this way,
another message can be going this way.

00:01:47.640 --> 00:01:52.391
The third rule is that you will allow
a node to concurrently perform at most,

00:01:52.391 --> 00:01:55.140
1 send and 1 receive at a time.

00:01:55.140 --> 00:01:59.000
This rule is important because it
effects the cost of communication.

00:01:59.000 --> 00:02:02.000
So for example suppose this node
wants to send the message on

00:02:02.000 --> 00:02:04.090
each of its outgoing links.

00:02:04.090 --> 00:02:07.220
In order for this node to send four
messages it's going to have to send them

00:02:07.220 --> 00:02:13.480
one at a time by contrast it could do
one send and one receive simultaneously.

00:02:13.480 --> 00:02:16.680
The fourth rule is about the cost
of a simultaneous send and

00:02:16.680 --> 00:02:19.200
receive of n words.

00:02:19.200 --> 00:02:22.090
So suppose this our computer, and

00:02:22.090 --> 00:02:25.180
let's further supposed that this node
wants to send a message to this node.

00:02:25.180 --> 00:02:30.650
There are several different paths,
here is one path and here's another.

00:02:31.760 --> 00:02:34.420
Regardless of which
path the message takes,

00:02:34.420 --> 00:02:36.820
rule number four says the following.

00:02:36.820 --> 00:02:40.890
The time to send the message
if it contains n words, is

00:02:40.890 --> 00:02:45.329
a constant alpha plus another constant
beta times the size of the message.

00:02:46.340 --> 00:02:50.710
In other words, the cost of sending the
message is linear in the message size.

00:02:50.710 --> 00:02:52.960
Now, it may seem strange that this cost,
somehow,

00:02:52.960 --> 00:02:54.930
is independent of the path that's taken.

00:02:54.930 --> 00:02:57.160
Now, that's not entirely true.

00:02:57.160 --> 00:03:00.210
And I'll clarify a little
bit later in the lesson.

00:03:00.210 --> 00:03:02.610
For the time being,
let's accept the formula, as stated.

00:03:02.610 --> 00:03:05.730
Now, the formula has two terms.

00:03:05.730 --> 00:03:10.110
The first term is called the latency,
and it has units of time.

00:03:10.110 --> 00:03:14.420
It's a fixed cost that you pay no
matter how large the message is.

00:03:14.420 --> 00:03:17.230
The second term has a parameter beta.

00:03:17.230 --> 00:03:18.060
Beta has a name.

00:03:18.060 --> 00:03:20.730
We'll call it the inverse bandwidth.

00:03:20.730 --> 00:03:23.480
It has units of time per word.

00:03:23.480 --> 00:03:26.480
You'll think a little bit more about
where this cost model really comes from

00:03:26.480 --> 00:03:28.200
momentarily, so just sit tight.

00:03:29.200 --> 00:03:32.980
One subtlety is, that this fourth
rule really only applies when there

00:03:32.980 --> 00:03:36.530
are no messages competing for links.

00:03:36.530 --> 00:03:39.120
So we have a fifth rule which
tells us what to do when

00:03:39.120 --> 00:03:42.810
messages are trying to go over
the same link, at the same time.

00:03:42.810 --> 00:03:45.360
This situation is called congestion.

00:03:45.360 --> 00:03:48.930
This rule says if there are k
messages simultaneously competing for

00:03:48.930 --> 00:03:51.750
a link, then in terms of
the cost of the message,

00:03:51.750 --> 00:03:57.120
will change only the beta term and
in particular we'll multiply it by k.

00:03:57.120 --> 00:04:00.620
For instance, let's consider this
link that connects these two nodes.

00:04:01.810 --> 00:04:04.720
The last rule governs what
happens if two messages try

00:04:04.720 --> 00:04:06.720
to go over the same link simultaneously.

00:04:07.900 --> 00:04:10.300
So suppose there's a red
message going this way and

00:04:10.300 --> 00:04:11.610
a blue message going this way.

00:04:11.610 --> 00:04:16.720
The last rule says that the effective
cost of this operation is the same as if

00:04:16.720 --> 00:04:21.769
the data transmission part, which is the
beta term, is serialized over the link.

00:04:22.840 --> 00:04:26.510
So if these two messages
are being transmitted in parallel

00:04:26.510 --> 00:04:30.840
Instead of observing a parallel
execution time of alpha plus beta n,

00:04:30.840 --> 00:04:34.100
supposing that the messages
are the same size n.

00:04:34.100 --> 00:04:38.870
What you'll see instead is a cost
of alpha plus beta times n times 2.

00:04:38.870 --> 00:04:43.270
Okay, so take a second to look at
these rules and commit them to memory.

