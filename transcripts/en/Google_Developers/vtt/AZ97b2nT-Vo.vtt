WEBVTT
Kind: captions
Language: en

00:00:00.580 --> 00:00:02.009
Modern smartphones
have to strike

00:00:02.009 --> 00:00:04.490
an on balance between
performance, thermal output,

00:00:04.490 --> 00:00:05.740
and battery consumption.

00:00:05.740 --> 00:00:07.700
And normally when a user's
purchasing a device,

00:00:07.700 --> 00:00:09.730
these are the last
things on their minds

00:00:09.730 --> 00:00:10.870
My name is Colt McAnlis.

00:00:10.870 --> 00:00:13.450
And unbeknownst to game devs,
these physical properties

00:00:13.450 --> 00:00:16.540
of a phone can manifest into
some really weird performance

00:00:16.540 --> 00:00:17.340
issues.

00:00:17.340 --> 00:00:19.120
You see all modern
mobile CPUs have

00:00:19.120 --> 00:00:21.940
a process known as
"frequency scaling."

00:00:21.940 --> 00:00:23.800
That is, in order
to conserve battery,

00:00:23.800 --> 00:00:26.110
the hardware will reduce the
amount of voltage supplied

00:00:26.110 --> 00:00:29.410
to the CPU, depending
on a variety of factors.

00:00:29.410 --> 00:00:31.680
This dip in supplied
energy helps

00:00:31.680 --> 00:00:34.280
reduce battery consumption
as well as thermal output

00:00:34.280 --> 00:00:37.180
but has the downside of slowing
down your CPU in the process.

00:00:37.180 --> 00:00:40.540
Now there's a variety of factors
that can cause this behavior,

00:00:40.540 --> 00:00:42.747
but there's two of them
that you need to know about.

00:00:42.747 --> 00:00:44.330
The first type of
frequency throttling

00:00:44.330 --> 00:00:47.477
has to do with the load
capacity of the CPU.

00:00:47.477 --> 00:00:49.060
If your CPU is
chugging along and then

00:00:49.060 --> 00:00:51.930
suddenly hits a consistent
run of low compute frames,

00:00:51.930 --> 00:00:53.820
the CPU governor--
which is the thing that

00:00:53.820 --> 00:00:56.170
controls the frequency--
can reduce the frequency

00:00:56.170 --> 00:00:59.010
supplied to the CPU, reducing
its computational power

00:00:59.010 --> 00:01:00.920
and thus saving energy.

00:01:00.920 --> 00:01:02.700
Subsequent frames,
of course, will

00:01:02.700 --> 00:01:05.120
run a bit slower since
there's less power being given

00:01:05.120 --> 00:01:08.390
to the CPU, which means you'll
see your frame time go up.

00:01:08.390 --> 00:01:11.300
This creates a problem, however,
once your CPU load returns back

00:01:11.300 --> 00:01:12.220
to normal.

00:01:12.220 --> 00:01:14.190
Since the frequency
has been downscaled,

00:01:14.190 --> 00:01:16.260
you could end up with
large performance spikes

00:01:16.260 --> 00:01:18.250
since your CPU has
been running slower.

00:01:18.250 --> 00:01:20.840
This performance hit will
continue until the CPU governor

00:01:20.840 --> 00:01:23.460
decides to upscale your
frequency back at which case

00:01:23.460 --> 00:01:25.566
you should be back in
your original state.

00:01:25.566 --> 00:01:27.440
The good news is that
this type of throttling

00:01:27.440 --> 00:01:29.370
is entirely under
your control, and you

00:01:29.370 --> 00:01:31.890
can address it before
things go badly.

00:01:31.890 --> 00:01:34.290
By timing your CPU
frame, you can easily

00:01:34.290 --> 00:01:37.290
detect when consistent
lulls in CPU load occur;

00:01:37.290 --> 00:01:39.610
and for the next few
frames, add some work

00:01:39.610 --> 00:01:41.620
to ensure that the CPU
is getting artificially

00:01:41.620 --> 00:01:43.110
pegged at the right frame rate.

00:01:43.110 --> 00:01:45.380
This will keep your
CPU from scaling

00:01:45.380 --> 00:01:47.570
and reduce your spikes
in your frame time.

00:01:47.570 --> 00:01:49.000
By the way, things
like spin loops

00:01:49.000 --> 00:01:51.660
are particularly nice solutions
that help chew up frame time.

00:01:51.660 --> 00:01:53.201
Or you can do
something more awesome,

00:01:53.201 --> 00:01:55.630
like path finding for
200 zombie entities.

00:01:55.630 --> 00:01:57.830
But that's really
another episode.

00:01:57.830 --> 00:02:00.310
Thankfully your Android
device reports the amount

00:02:00.310 --> 00:02:02.685
of frequency scaling that's
occurring on your device.

00:02:02.685 --> 00:02:04.810
So you can determine if
this is actually a problem.

00:02:04.810 --> 00:02:06.210
To get access to
this information

00:02:06.210 --> 00:02:09.042
simply read a few files from
an oddly cryptic system path,

00:02:09.042 --> 00:02:11.500
and you can determine if you're
getting artificially scaled

00:02:11.500 --> 00:02:12.366
or not.

00:02:12.366 --> 00:02:13.740
Now the second
type of throttling

00:02:13.740 --> 00:02:15.440
is a little bit more
difficult to deal

00:02:15.440 --> 00:02:17.150
with since it has
everything to do

00:02:17.150 --> 00:02:19.670
with the thermal properties
of the client device.

00:02:19.670 --> 00:02:21.760
See one of the dominant
trends in mobile computing

00:02:21.760 --> 00:02:24.240
has to do with
heat distribution.

00:02:24.240 --> 00:02:26.150
Typically on desktop
CPUs, they have

00:02:26.150 --> 00:02:29.830
this obnoxiously large heat sink
fan attached to it specifically

00:02:29.830 --> 00:02:32.580
to get rid of heat and keep
your computer from melting.

00:02:32.580 --> 00:02:34.950
Now in contrast,
mobile devices don't

00:02:34.950 --> 00:02:37.470
have the amount of physical
room for such a powerful heat

00:02:37.470 --> 00:02:40.730
sink and have to find different
ways to distribute heat.

00:02:40.730 --> 00:02:42.920
And more so, each
manufacturer likes

00:02:42.920 --> 00:02:45.740
taking into account
different thermal properties

00:02:45.740 --> 00:02:47.710
and use cases for their designs.

00:02:47.710 --> 00:02:49.140
For example, some
Android devices

00:02:49.140 --> 00:02:51.030
are built to handle
long-term gaming.

00:02:51.030 --> 00:02:53.970
While others expect more
moderate levels of usage

00:02:53.970 --> 00:02:57.170
and may not provide enough
airflow or sink space to get

00:02:57.170 --> 00:02:58.740
rid of heat effectively.

00:02:58.740 --> 00:03:02.280
As such, once the thermal
letoff becomes a problem,

00:03:02.280 --> 00:03:05.550
the CPU will become throttled to
help reduce the amount of heat

00:03:05.550 --> 00:03:08.060
being generated by the hardware.

00:03:08.060 --> 00:03:10.180
The end game here
is that eventually,

00:03:10.180 --> 00:03:12.520
due to form factor
or running duration,

00:03:12.520 --> 00:03:15.720
your CPU can get overheated
and then throttled and remain

00:03:15.720 --> 00:03:18.230
that way until the heat
properties of the device return

00:03:18.230 --> 00:03:20.390
back to normal operating values.

00:03:20.390 --> 00:03:24.450
And once in this state, your CPU
frame time is going to suffer.

00:03:24.450 --> 00:03:25.970
Now generally,
there's no good way

00:03:25.970 --> 00:03:29.420
to be reactive about this type
of throttling as it has much

00:03:29.420 --> 00:03:30.879
less to do with
your code and more

00:03:30.879 --> 00:03:32.920
to do with the thermal
properties of the device--

00:03:32.920 --> 00:03:34.807
unless you're doing
something really crazy,

00:03:34.807 --> 00:03:37.140
like trying to do protein
folding on someone's handheld.

00:03:37.140 --> 00:03:39.366
In which case, shame on you.

00:03:39.366 --> 00:03:41.240
Proactive developers
will collect performance

00:03:41.240 --> 00:03:42.700
characteristics
about the devices

00:03:42.700 --> 00:03:44.140
that their game
is run on and can

00:03:44.140 --> 00:03:46.370
reduce computational
complexity, features,

00:03:46.370 --> 00:03:47.580
or quality for those devices.

00:03:47.580 --> 00:03:49.900
But even then, that's
a lot work to do

00:03:49.900 --> 00:03:51.760
to avoid this thermal problem.

00:03:51.760 --> 00:03:53.340
Of course the first
step in fighting

00:03:53.340 --> 00:03:56.000
any type of thermal
throttling is aggressively

00:03:56.000 --> 00:03:57.740
optimizing the
performance of your game

00:03:57.740 --> 00:03:59.960
to ensure that you're not
wasting battery, frame

00:03:59.960 --> 00:04:02.750
time, or thermal letoff
on your consumer's device.

00:04:02.750 --> 00:04:04.290
So as always, keep calm.

00:04:04.290 --> 00:04:05.240
Profile your code.

00:04:05.240 --> 00:04:07.721
And remember, perf matters.

