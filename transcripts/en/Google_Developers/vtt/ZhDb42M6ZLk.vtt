WEBVTT
Kind: captions
Language: en

00:00:00.968 --> 00:00:02.367
Wan-Teh: My name is
Wan-Teh Chang.

00:00:02.367 --> 00:00:05.968
I'm going to talk about
the network stack in Chromium.

00:00:05.968 --> 00:00:10.634
A few minutes ago I sent
the URL for the slides

00:00:10.634 --> 00:00:14.534
to Chrome team--the Chrome team
email address.

00:00:14.534 --> 00:00:16.167
So if you have a laptop,

00:00:16.167 --> 00:00:18.834
you can search for an email
from me.

00:00:18.834 --> 00:00:22.834
And then you can look
at the slides.

00:00:22.834 --> 00:00:27.901
So when a user types in a URL--
a universal resource locator--

00:00:27.901 --> 00:00:32.100
the browser need to fetch
the resource from the network.

00:00:32.100 --> 00:00:35.334
And the network stack is
a component of Chromium

00:00:35.334 --> 00:00:37.467
that actually goes
through the network to do that,

00:00:37.467 --> 00:00:40.534
and also potentially
caches the resource

00:00:40.534 --> 00:00:42.467
for the next time.

00:00:42.467 --> 00:00:47.634
It's amazing that in the short
history of Chromium,

00:00:47.634 --> 00:00:51.634
we have already written
the network stack price.

00:00:51.634 --> 00:00:54.901
originally we started using
the WinINet library,

00:00:54.901 --> 00:00:57.334
which is really a component
of IE.

00:00:57.334 --> 00:01:00.267
And we did that to get something
working very quickly.

00:01:00.267 --> 00:01:05.033
And also, we believe that after
more than ten years at the web,

00:01:05.033 --> 00:01:09.667
every OS should have a very good
BOT and HTTP library.

00:01:09.667 --> 00:01:12.133
And we believe
that should be the case

00:01:12.133 --> 00:01:15.367
for all the three major
platforms.

00:01:15.367 --> 00:01:17.300
But we ran
into some problems,

00:01:17.300 --> 00:01:20.467
so we switched to another
library called

00:01:20.467 --> 00:01:22.000
WinHTTP on Windows.

00:01:22.000 --> 00:01:24.667
And it works mostly
just fine.

00:01:24.667 --> 00:01:26.100
So that's what--

00:01:26.100 --> 00:01:30.834
WinHTTP is actually
what's shipping in Chrome 1.0.

00:01:30.834 --> 00:01:34.968
But gradually we will run into
some imitations of WinHTTP.

00:01:34.968 --> 00:01:37.834
It's very difficult
to overcome those

00:01:37.834 --> 00:01:39.601
without a source code.

00:01:39.601 --> 00:01:41.534
I'll just name one example
is that

00:01:41.534 --> 00:01:44.667
you cannot use WinHTTP
to download a file

00:01:44.667 --> 00:01:46.434
larger than two gigabytes.

00:01:46.434 --> 00:01:50.133
And these days,
with these dvd-rom images,

00:01:50.133 --> 00:01:52.767
there are a lot of downloads
that are larger than that.

00:01:52.767 --> 00:01:56.601
and there is no way
for us to overcome that.

00:01:56.601 --> 00:02:02.100
So last July we started
to realize that

00:02:02.100 --> 00:02:05.100
it's really time to write
our own network stack.

00:02:05.100 --> 00:02:09.501
And also we believe that
that will also help

00:02:09.501 --> 00:02:13.300
the porting effort
to Mac and Linux.

00:02:13.300 --> 00:02:17.701
So in Chrome 2.0 beta,

00:02:17.701 --> 00:02:23.701
we are using our own
cross-platform network stack.

00:02:23.701 --> 00:02:26.167
And this also--

00:02:26.167 --> 00:02:29.033
One reason I mentioned earlier

00:02:29.033 --> 00:02:32.033
is that it allows us
to fix bugs easier.

00:02:32.033 --> 00:02:35.868
But we also have a lot of ideas
to improve performance.

00:02:35.868 --> 00:02:41.033
So this allows us
to experiment with those ideas.

00:02:41.033 --> 00:02:46.501
So in the source code, all
of our network stack source code

00:02:46.501 --> 00:02:49.067
is under a single directory net.

00:02:49.067 --> 00:02:53.367
And then under that, there are
several sub-directories.

00:02:53.367 --> 00:02:58.000
And most of them have
very obvious names, like HTTP.

00:02:58.000 --> 00:03:01.267
The HTTP subdirectory contains
the implementation

00:03:01.267 --> 00:03:03.000
of the HTTP protocol.

00:03:03.000 --> 00:03:06.968
And then, similarly, there is
another subdirectory for FTP.

00:03:06.968 --> 00:03:09.234
And then there is
a subdirectory called

00:03:09.234 --> 00:03:10.667
url_request.

00:03:10.667 --> 00:03:14.334
And for most of you, that
directory is the most important

00:03:14.334 --> 00:03:16.033
because that's really--

00:03:16.033 --> 00:03:19.167
The rest of Chrome uses
the network stack.

00:03:19.167 --> 00:03:21.934
They issue a URL request.

00:03:21.934 --> 00:03:25.467
And the URL request
will create

00:03:25.467 --> 00:03:31.467
the appropriate proto handle
to handle that URL request.

00:03:31.467 --> 00:03:35.234
We also have a subdirectory
called proxy

00:03:35.234 --> 00:03:40.400
to handle proxy
and get our system

00:03:40.400 --> 00:03:42.567
proxy settings and so on.

00:03:42.567 --> 00:03:47.567
And then there is a directory
underneath called Base--

00:03:47.567 --> 00:03:49.868
Underneath Net called Base,

00:03:49.868 --> 00:03:54.634
which contains the basic
socket implementation--SSL--

00:03:54.634 --> 00:03:56.567
certificate handling,
and so on.

00:03:56.567 --> 00:03:59.400
We also have our own test

00:03:59.400 --> 00:04:02.567
that is only used
for our unitest.

00:04:02.567 --> 00:04:05.701
So the network stack
is actually something

00:04:05.701 --> 00:04:09.033
that is possible to use
independent of Chromium.

00:04:09.033 --> 00:04:12.901
It has very little dependency
on the rest of Chromium.

00:04:12.901 --> 00:04:15.400
We only depend
on three other components...

00:04:15.400 --> 00:04:17.734
The Base component...

00:04:17.734 --> 00:04:20.968
The V8 JavaScript interpreter

00:04:20.968 --> 00:04:26.400
you only use for interpreting
the proxy auto-config files.

00:04:26.400 --> 00:04:29.901
We also use the Google URL
library.

00:04:29.901 --> 00:04:35.100
And then we use just a few
open-source libraries

00:04:35.100 --> 00:04:40.267
to decode HTTP content
decoding, such as Zzip or Gzip.

00:04:40.267 --> 00:04:42.567
So that's pretty much it.

00:04:42.567 --> 00:04:45.300
And most of the code is
cross-platformed.

00:04:45.300 --> 00:04:50.067
We hide platform-dependency
in a small number of files.

00:04:50.067 --> 00:04:53.300
So if you need to port
the network stack

00:04:53.300 --> 00:04:54.467
to a new platform,

00:04:54.467 --> 00:04:56.534
you would just need to provide
the OS bindings

00:04:56.534 --> 00:04:59.601
for RTCP sockets--
SSL sockets--

00:04:59.601 --> 00:05:02.200
get in the system,
process settings.

00:05:02.200 --> 00:05:06.400
Or how to access
the system certificate store.

00:05:06.400 --> 00:05:11.067
That's it.

00:05:11.067 --> 00:05:14.767
Then, if you need to use
the network stack,

00:05:14.767 --> 00:05:16.868
it's useful to know
the threading model

00:05:16.868 --> 00:05:18.300
and the IO model.

00:05:18.300 --> 00:05:22.601
The threading model is
mostly single-threaded.

00:05:22.601 --> 00:05:25.501
So we do most of the work
a single thread

00:05:25.501 --> 00:05:27.934
called the IO thread.

00:05:27.934 --> 00:05:30.934
This is useful to know
because this is why

00:05:30.934 --> 00:05:33.534
a lot of data structures
in the network stack

00:05:33.534 --> 00:05:39.534
don't need to be protected
by a lot.

00:05:39.534 --> 00:05:44.334
And the IO model is
an asynchronized IO model.

00:05:44.334 --> 00:05:47.567
So this means you initiate
an IO operation,

00:05:47.567 --> 00:05:51.267
and we return immediately
a status code that says

00:05:51.267 --> 00:05:53.033
it's in progress.

00:05:53.033 --> 00:05:56.400
And then, when
the IO operation is done,

00:05:56.400 --> 00:05:58.801
like the read, you say,
"I want to read."

00:05:58.801 --> 00:06:00.901
When the data is received,

00:06:00.901 --> 00:06:03.868
we will invoke your
Completion Callback

00:06:03.868 --> 00:06:07.067
provided by you
on the same IO thread.

00:06:07.067 --> 00:06:11.167
So they're just the model
we're using.

00:06:11.167 --> 00:06:16.167
And this actually is true
for most of the classes

00:06:16.167 --> 00:06:17.601
in the network stack,

00:06:17.601 --> 00:06:21.667
except for the top level--
URL request class.

00:06:21.667 --> 00:06:26.501
For that class we have
a delegate class

00:06:26.501 --> 00:06:31.067
that provide more ways
to invoke the callbacks

00:06:31.067 --> 00:06:37.067
for multiple events.

00:06:37.067 --> 00:06:43.067
Then the next slide
is how the network stack

00:06:43.067 --> 00:06:49.000
is integrated with Chromium.

00:06:49.000 --> 00:06:55.000
The network stack, because
it needs to access the network,

00:06:55.000 --> 00:06:56.467
is a privileged operation.

00:06:56.467 --> 00:06:59.133
So it has to run
inside the browser process.

00:06:59.133 --> 00:07:04.901
The renderer is the one
that actually initiates

00:07:04.901 --> 00:07:10.234
the loading of a resource
that starts from WebCATS.

00:07:10.234 --> 00:07:12.567
The web--internet engine.

00:07:12.567 --> 00:07:16.400
So that load resource request
goes through IPC

00:07:16.400 --> 00:07:18.534
to the browser process.

00:07:18.534 --> 00:07:21.667
And then there is a class
in the browser process

00:07:21.667 --> 00:07:23.467
called the resource
dispatcher host.

00:07:23.467 --> 00:07:26.634
That is responsible
for issuing

00:07:26.634 --> 00:07:31.868
the URL request
from the renderer processes

00:07:31.868 --> 00:07:33.534
through the network stack.

00:07:33.534 --> 00:07:36.534
So that is a very important
entry point

00:07:36.534 --> 00:07:41.834
into the network stack.

00:07:41.834 --> 00:07:44.467
But there is another
entry point

00:07:44.467 --> 00:07:47.634
into the network stack
called the URL fetcher.

00:07:47.634 --> 00:07:52.167
And that is used
only for URL requests,

00:07:52.167 --> 00:07:54.501
generated by Chromium itself.

00:07:54.501 --> 00:07:57.801
Such as visiting
the safe-browsing server,

00:07:57.801 --> 00:08:00.367
or carrying navigation
suggestions,

00:08:00.367 --> 00:08:04.801
or sending usage statistics
to our UMA servers.

00:08:04.801 --> 00:08:10.534
So at this point I'm going
to turn over to Eric Roman

00:08:10.534 --> 00:08:15.901
to go into the network stack
in more detail.

00:08:26.100 --> 00:08:28.968
Roman: Hey, so I'm gonna talk
a little bit about

00:08:28.968 --> 00:08:31.167
the programming model
for how you actually end up

00:08:31.167 --> 00:08:33.100
issuing network requests,

00:08:33.100 --> 00:08:34.868
and some of the layers
that we'll pass through

00:08:34.868 --> 00:08:36.501
as you do this.

00:08:36.501 --> 00:08:38.767
So the main header file
you'd want to check,

00:08:38.767 --> 00:08:41.901
if you're going to be
programming a network request,

00:08:41.901 --> 00:08:43.601
is urlrequest.h.

00:08:43.601 --> 00:08:46.734
And this describes how to use
the URL request objects,

00:08:46.734 --> 00:08:49.834
which is the main entry point
into the network stack.

00:08:49.834 --> 00:08:52.334
So when you construct
the URL request,

00:08:52.334 --> 00:08:55.934
you're going to specify
the URL that you want to fetch,

00:08:55.934 --> 00:09:00.601
as well as the URL request
delegate object.

00:09:00.601 --> 00:09:04.300
And the delegate object is
how you receive notification

00:09:04.300 --> 00:09:06.300
of events
during the network fetch.

00:09:06.300 --> 00:09:08.767
So you'll get--
you specify, essentially,

00:09:08.767 --> 00:09:10.801
callbacks for when
the response has started.

00:09:10.801 --> 00:09:13.033
When the response has completed.

00:09:13.033 --> 00:09:18.801
When you get a repeater act,
when authentication's required.

00:09:18.801 --> 00:09:23.100
And so the URL request object,
once you've constructed it,

00:09:23.100 --> 00:09:24.300
you just call "start,"

00:09:24.300 --> 00:09:27.234
and it begins
issuing the stuff synchronously,

00:09:27.234 --> 00:09:29.434
and your delegate will
get called

00:09:29.434 --> 00:09:32.601
to notify those various events.

00:09:32.601 --> 00:09:37.834
So the other thing you have
to specify to your request

00:09:37.834 --> 00:09:40.334
is the URL request context.

00:09:40.334 --> 00:09:43.934
And the context is essentially
the global state

00:09:43.934 --> 00:09:46.300
that's shared between
network requests.

00:09:46.300 --> 00:09:49.133
So this includes
the cookie store,

00:09:49.133 --> 00:09:52.968
the HTTP cache, the various
network session state...

00:09:52.968 --> 00:09:56.267
auth cache,
the client socket pool,

00:09:56.267 --> 00:09:58.567
and proxy service.

00:09:58.567 --> 00:10:00.667
And usually
the URL request contacts...

00:10:00.667 --> 00:10:04.367
you can think of it
as one per browser.

00:10:04.367 --> 00:10:07.067
And so all requests
you do

00:10:07.067 --> 00:10:08.601
will be sharing
this same state.

00:10:08.601 --> 00:10:11.400
So they share
the same cookie store.

00:10:11.400 --> 00:10:13.934
They share the same
HTTP cache.

00:10:13.934 --> 00:10:15.934
The exception is
with incognito mode,

00:10:15.934 --> 00:10:19.100
where you'd actually specify
a different URL request contact

00:10:19.100 --> 00:10:22.701
that you can substitute in
an in-memory cookie store,

00:10:22.701 --> 00:10:25.400
and in-memory cache.

00:10:25.400 --> 00:10:28.701
So I guess we'll just
step through a sample request--

00:10:28.701 --> 00:10:30.968
what happens
when you issue,

00:10:30.968 --> 00:10:33.467
let's say an HTTPS
or HTTP request.

00:10:47.934 --> 00:10:51.834
So if you have the--
Can you hear me?

00:10:51.834 --> 00:10:52.934
So if you have the slides,

00:10:52.934 --> 00:10:54.434
you can follow along
on those as well.

00:10:54.434 --> 00:10:57.300
I'll try and reproduce
the similar diagram.

00:12:21.834 --> 00:12:26.834
Okay, so, we'll start with
the URL request object.

00:12:26.834 --> 00:12:31.033
The arrows here represent
dependencies

00:12:31.033 --> 00:12:35.133
and sort of flow
of execution.

00:12:35.133 --> 00:12:37.801
So we're going to pass in
the delegate object,

00:12:37.801 --> 00:12:42.968
which is how we get called back
when events complete.

00:12:42.968 --> 00:12:45.100
And we also pass
the URL request contacts,

00:12:45.100 --> 00:12:47.501
which holds all
of our global state.

00:12:47.501 --> 00:12:50.968
So we're first going to
pass into the--

00:12:50.968 --> 00:12:53.801
The URL request is going to
look at the scheme of the URL.

00:12:53.801 --> 00:12:55.901
It's going to determine
what type of job to create.

00:12:55.901 --> 00:13:01.601
So since we support FTP file,
URLs, HTTP, HTTPS,

00:13:01.601 --> 00:13:05.434
this is where it determines
which specific type of jobs

00:13:05.434 --> 00:13:06.534
used for this request.

00:13:06.534 --> 00:13:08.267
So in our hypothetical
situation,

00:13:08.267 --> 00:13:10.234
we'll be using
an HTTPS request.

00:13:10.234 --> 00:13:11.767
So what it's going to do is
it's going to create

00:13:11.767 --> 00:13:13.634
a URL request HTTP drop.

00:13:13.634 --> 00:13:17.133
And the URL request HTTP drop,
at this layer,

00:13:17.133 --> 00:13:18.767
it applies filters.

00:13:18.767 --> 00:13:22.434
And it's also going to read
and write the cookie store.

00:13:22.434 --> 00:13:26.200
So we'll just write
the cookie store here.

00:13:26.200 --> 00:13:30.868
And the cookie store
comes from

00:13:30.868 --> 00:13:33.868
the URL request contacts.

00:13:33.868 --> 00:13:38.234
So after--we're going to
go down to the next layer.

00:13:38.234 --> 00:13:41.300
This is the HTTP cache
transaction.

00:13:41.300 --> 00:13:46.567
And this is going to enforce
the HTTP cache stuff.

00:13:46.567 --> 00:13:49.667
So it also has a dependency now
for more stake

00:13:49.667 --> 00:13:50.734
coming from the URL request
contacts,

00:13:50.734 --> 00:13:53.667
which is the HTTP cache.

00:13:57.367 --> 00:14:00.734
And that's also
part of URL requests contacts.

00:14:00.734 --> 00:14:02.834
So if the HTTP--

00:14:02.834 --> 00:14:04.634
If the request
can be serviced from cache,

00:14:04.634 --> 00:14:07.868
it's gonna stop at this layer,
and sort of return that.

00:14:07.868 --> 00:14:10.601
If not, then it's going to
have to actually do

00:14:10.601 --> 00:14:13.033
a real transaction
on the network.

00:14:13.033 --> 00:14:15.133
So it's going to go down
to the next layer,

00:14:15.133 --> 00:14:18.033
which is the HTTP network
transaction.

00:14:18.033 --> 00:14:19.901
And this is where
the real details

00:14:19.901 --> 00:14:21.968
of the HTTP protocol
are implemented.

00:14:21.968 --> 00:14:24.400
So reading and writing
the headers,

00:14:24.400 --> 00:14:25.868
understanding response codes--

00:14:25.868 --> 00:14:29.167
most of that logic is
in HTTP network transaction.

00:14:29.167 --> 00:14:31.267
And it's going to, like,
apply authentication,

00:14:31.267 --> 00:14:33.367
apply the proxy.

00:14:33.367 --> 00:14:38.667
So at this layer,
it's going to rely

00:14:38.667 --> 00:14:41.000
on quite a bit of state
from URL request contacts.

00:14:41.000 --> 00:14:46.100
And most of this is
in HTTP network session.

00:14:54.100 --> 00:14:58.667
So this is indirectly part
of URL request contacts.

00:14:58.667 --> 00:15:00.667
It's contained in that.

00:15:00.667 --> 00:15:05.601
And so your HTTP session
contains various things.

00:15:05.601 --> 00:15:11.267
IT contains the HTTP cache...

00:15:11.267 --> 00:15:15.200
the client socket pool,
proxy service.

00:15:15.200 --> 00:15:16.868
A lot of stuff from here
as well.

00:15:16.868 --> 00:15:19.534
So we'll draw in
a couple of those.

00:15:32.968 --> 00:15:37.000
Okay, and then, so now we're
near the bottom of the stack.

00:15:37.000 --> 00:15:40.000
And now we hav--the final levels
are the socket levels.

00:15:40.000 --> 00:15:43.400
So if this were an HTTP request,
we'd be talking

00:15:43.400 --> 00:15:46.868
to the client socket interface.

00:15:46.868 --> 00:15:49.367
We'd be talking to
SSL client socket.

00:15:49.367 --> 00:15:52.701
So we'll just put that
in here.

00:15:59.067 --> 00:16:04.534
And so this would essentially
wrap a transport socket,

00:16:04.534 --> 00:16:07.267
which would just be
our TCP client socket.

00:16:12.334 --> 00:16:14.300
And then, obviously, here
we're actually just 

00:16:14.300 --> 00:16:19.234
talking down to the network.

00:16:19.234 --> 00:16:24.634
So lastly,

00:16:24.634 --> 00:16:26.834
just gonna talk a little
about the tests.

00:16:26.834 --> 00:16:29.434
So if you're going to be
working the network stack,

00:16:29.434 --> 00:16:31.033
and you make modifications,

00:16:31.033 --> 00:16:33.567
you obviously want
a unit test.

00:16:33.567 --> 00:16:35.934
So to run the unit test,

00:16:35.934 --> 00:16:40.634
you just use the net unit test
target.

00:16:40.634 --> 00:16:43.968
And most of the tests use
mock dependencies.

00:16:43.968 --> 00:16:47.000
For, like, at the socket level
or, you know,

00:16:47.000 --> 00:16:48.934
mock proxy services,
whatever.

00:16:48.934 --> 00:16:50.767
There are some exceptions.

00:16:50.767 --> 00:16:53.133
As once I mentioned,
we also have the test server.

00:16:53.133 --> 00:16:56.000
And the test server is
a Python application,

00:16:56.000 --> 00:17:01.133
where you can create
custom responses

00:17:01.133 --> 00:17:05.000
or handlers for special tests.

00:17:05.000 --> 00:17:09.968
So that's also an option.

00:17:09.968 --> 00:17:13.701
So, yeah.

00:17:13.701 --> 00:17:16.801
And there's a bunch
of resources for--

00:17:16.801 --> 00:17:18.834
You can check out
the network stack road map,

00:17:18.834 --> 00:17:21.100
the DNS prefetching document
page.

00:17:21.100 --> 00:17:23.667
There's documentation
on disk cache,

00:17:23.667 --> 00:17:24.934
if you want more information.

00:17:24.934 --> 00:17:27.968
There's some links
in the slides.

00:17:27.968 --> 00:17:29.701
And I guess lastly,

00:17:29.701 --> 00:17:34.901
Wan-Teh and I can
answer questions.

00:17:34.901 --> 00:17:36.334
Yes.

00:17:36.334 --> 00:17:38.801
man: So Wan-Teh mentioned
reasons for switching away

00:17:38.801 --> 00:17:41.033
from WinINet and and WinHTTP.

00:17:41.033 --> 00:17:44.901
Can you guys reiterate
some of the other reasons

00:17:44.901 --> 00:17:49.100
besides the two-gigabyte
file download limit on WinHTTP?

00:17:49.100 --> 00:17:53.534
Why we ended up ditching,
like, WinINet, for example?

00:17:53.534 --> 00:17:58.000
So the question was to elaborate
a bit on, you know,

00:17:58.000 --> 00:18:01.367
why we chose to ditch WinINet
and WinHTTP.

00:18:01.367 --> 00:18:04.634
So he mentioned
there were some bugs.

00:18:04.634 --> 00:18:06.434
in particular, like,
not being able

00:18:06.434 --> 00:18:09.167
to do file downloads
over two gigabytes,

00:18:09.167 --> 00:18:13.133
and with some other--
I think Wan-Teh will--

00:18:13.133 --> 00:18:15.968
Wan-Teh: So with WinINet,
we basically ran into

00:18:15.968 --> 00:18:17.300
two major problems.

00:18:17.300 --> 00:18:21.267
The first one is that
we cannot get the certificate--

00:18:21.267 --> 00:18:23.067
the service certificate.

00:18:23.067 --> 00:18:25.801
And this is critical

00:18:25.801 --> 00:18:28.367
when you handle
an SSL certificate error.

00:18:28.367 --> 00:18:31.734
So that one we actually went
to extraordinary measure--means.

00:18:31.734 --> 00:18:34.934
And we were able
to get the certificate

00:18:34.934 --> 00:18:37.100
by patching WinINet.

00:18:37.100 --> 00:18:39.534
But the other one
that we cannot surmount

00:18:39.534 --> 00:18:42.801
was that it's impossible
to tell WinINet

00:18:42.801 --> 00:18:45.000
to bypass its own cache.

00:18:45.000 --> 00:18:49.801
And we know that some server
generates dynamic content

00:18:49.801 --> 00:18:52.467
based on the browser's
user agent.

00:18:52.467 --> 00:18:58.267
So we do not want to share
the cache with IE.

00:18:58.267 --> 00:19:01.801
So that's really the reason
we had to switch

00:19:01.801 --> 00:19:03.934
to a new library.

00:19:03.934 --> 00:19:08.100
For WinHTTP, we could tell
that it shares some code

00:19:08.100 --> 00:19:09.367
with WinINet.

00:19:09.367 --> 00:19:12.467
But probably because
it's not used in IE.

00:19:12.467 --> 00:19:18.033
The shared code is older,
so it has some bugs.

00:19:18.033 --> 00:19:22.033
Security bugs that had already
been fixed in IE's version.

00:19:22.033 --> 00:19:25.634
So we are quite unhappy
about that.

00:19:25.634 --> 00:19:31.634
And it also had some problem
that caused system crashes--

00:19:31.634 --> 00:19:33.934
blue screens on some laptops.

00:19:33.934 --> 00:19:39.934
That one we were also able
to find--work around.

00:19:39.934 --> 00:19:43.000
But in the end we just thought
that there are

00:19:43.000 --> 00:19:44.634
too many issues.

00:19:44.634 --> 00:19:50.234
And the porting to Mac
and Linux was going to start.

00:19:50.234 --> 00:19:54.868
So we thought it's time
to write our own.

00:19:54.868 --> 00:20:00.267
man: So on Mac and Linux,
what's the lay of the land

00:20:00.267 --> 00:20:04.067
with regard to existing platform
network implementations,

00:20:04.067 --> 00:20:06.267
and whether they're
better or worse?

00:20:06.267 --> 00:20:08.100
The same for us as--

00:20:08.100 --> 00:20:09.968
Wan-Teh: Okay.

00:20:09.968 --> 00:20:13.033
So Peter asked about the system
networking libraries

00:20:13.033 --> 00:20:16.667
on Mac and Linux,
and their quality.

00:20:16.667 --> 00:20:18.968
On the Mac,
I know there is a library

00:20:18.968 --> 00:20:20.634
called CFNetwork.

00:20:20.634 --> 00:20:22.834
I guess it stands for
Core Foundation Network.

00:20:22.834 --> 00:20:24.100
That's used by Safari.

00:20:24.100 --> 00:20:26.834
So I thought that should be
pretty good.

00:20:26.834 --> 00:20:31.734
But I don't have any
personal experience using it.

00:20:31.734 --> 00:20:35.000
Linux, the usual problem is
not whether there is one.

00:20:35.000 --> 00:20:37.133
The problem is
there are too many,

00:20:37.133 --> 00:20:38.567
and you need to pick one.

00:20:38.567 --> 00:20:42.400
So I thought on Linux--
we were considering LibCurl.

00:20:42.400 --> 00:20:44.234
That's quite popular.

00:20:44.234 --> 00:20:46.400
And there's another one
called Lib Neon

00:20:46.400 --> 00:20:48.400
that's used by the SBN client.

00:20:48.400 --> 00:20:52.200
I think both would
probably work well.

00:20:52.200 --> 00:20:56.200
But in the end, we just thought
it better to write our own.

00:20:56.200 --> 00:20:58.400
And the network stack,
it turns out,

00:20:58.400 --> 00:21:00.067
is not really that complicated

00:21:00.067 --> 00:21:02.167
Especially the core portion.

00:21:02.167 --> 00:21:07.200
So basically Darin Fisher
wrote it within a week.

00:21:07.200 --> 00:21:11.200
And it was able to do TCP--

00:21:11.200 --> 00:21:14.734
regular TTP requests--
HTTP requests.

00:21:14.734 --> 00:21:17.501
man: I'm just curious.

00:21:17.501 --> 00:21:19.734
Are we headed in the direction
of being able

00:21:19.734 --> 00:21:23.734
to have our own proxy settings
and our own certificate store,

00:21:23.734 --> 00:21:25.834
and not rely on the system
for that?

00:21:25.834 --> 00:21:28.901
Um, okay...
so the question is--

00:21:28.901 --> 00:21:31.567
Right now we're using
the system proxy settings

00:21:31.567 --> 00:21:33.067
and the system certificate
store.

00:21:33.067 --> 00:21:37.267
So the question is whether
we're going to support

00:21:37.267 --> 00:21:41.167
our own proxy settings
and a certificate store.

00:21:41.167 --> 00:21:45.067
I think the answer is--
I have two different answers.

00:21:45.067 --> 00:21:47.667
For a certificate store,
I still think

00:21:47.667 --> 00:21:50.801
it's very important to share
the system cert store

00:21:50.801 --> 00:21:53.234
with other applications.

00:21:53.234 --> 00:21:56.300
And we haven't received
any complaints

00:21:56.300 --> 00:21:59.601
about our using
the Windows system store.

00:21:59.601 --> 00:22:02.434
But with the proxy settings,

00:22:02.434 --> 00:22:08.267
we do get a lot of complaints
from some Firefox users.

00:22:08.267 --> 00:22:12.000
Basically,
their problem is that

00:22:12.000 --> 00:22:15.033
they use
the same laptop at work

00:22:15.033 --> 00:22:16.601
and at home.

00:22:16.601 --> 00:22:19.701
And they have to use
the system proxy settings

00:22:19.701 --> 00:22:21.267
with IE at work.

00:22:21.267 --> 00:22:24.968
But for some reason
they want to use--

00:22:24.968 --> 00:22:26.133
When they use Firefox,

00:22:26.133 --> 00:22:27.868
they want to use
a different set of settings

00:22:27.868 --> 00:22:30.634
that's appropriate
for their home network.

00:22:30.634 --> 00:22:34.067
And these Firefox users
told us

00:22:34.067 --> 00:22:37.167
that they cannot use Chrome
because of this reason.

00:22:37.167 --> 00:22:40.267
So we are seriously
considering adding

00:22:40.267 --> 00:22:44.834
our own proxy settings.

00:22:44.834 --> 00:22:49.467
man: What are the real-world
web-compat ramifications

00:22:49.467 --> 00:22:52.667
of different network stacks,
especially rolling our own?

00:22:52.667 --> 00:22:55.767
Wan-Teh: So the question is

00:22:55.767 --> 00:22:57.767
what are the real-world
ramifications

00:22:57.767 --> 00:22:59.467
of network stacks?

00:22:59.467 --> 00:23:02.567
Especially when writing
our own.

00:23:02.567 --> 00:23:05.868
man: For website compatibility.

00:23:05.868 --> 00:23:08.801
Wan-Teh: our experience is
that--

00:23:08.801 --> 00:23:13.734
So working on network, I think,
is similar to our layout.

00:23:13.734 --> 00:23:16.701
On the one hand, you need
to implement a standard.

00:23:16.701 --> 00:23:19.167
But on the other hand,
you also need to be

00:23:19.167 --> 00:23:22.701
somewhat permissive
of broken implementations.

00:23:22.701 --> 00:23:27.501
So our approach has been that
we're trying to be

00:23:27.501 --> 00:23:29.934
as strict as possible.

00:23:29.934 --> 00:23:34.801
And when we run into
incompatibility,

00:23:34.801 --> 00:23:38.267
we make our best effort
to contact the site,

00:23:38.267 --> 00:23:39.667
to correct it.

00:23:39.667 --> 00:23:41.100
Or sometimes contact--

00:23:41.100 --> 00:23:44.300
if they are using open-source
server product,

00:23:44.300 --> 00:23:46.601
we try to file a bug report.

00:23:46.601 --> 00:23:50.067
But usually that takes
a lot of effort.

00:23:50.067 --> 00:23:53.634
So we also have to implement
work-arounds

00:23:53.634 --> 00:23:57.634
for some
of the incompatibilites.

00:24:02.467 --> 00:24:07.267
Any other questions?

00:24:07.267 --> 00:24:09.033
Okay, thank you.

00:24:09.033 --> 00:24:12.334
[applause]

