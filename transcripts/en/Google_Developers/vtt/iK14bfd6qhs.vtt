WEBVTT
Kind: captions
Language: en

00:00:14.000 --> 00:00:15.950
STEVE BAZYL: Hey, everyone.

00:00:15.950 --> 00:00:18.590
Thank you for joining today for
another Google Developers

00:00:18.590 --> 00:00:21.010
Live session on Google Drive.

00:00:21.010 --> 00:00:23.540
Today we're going to talk about,
how to use Service

00:00:23.540 --> 00:00:26.660
Accounts with Google Drive.

00:00:26.660 --> 00:00:29.210
For those who aren't familiar
with Service Accounts, this is

00:00:29.210 --> 00:00:33.710
a special mode for OAuth 2.0
that is really designed to

00:00:33.710 --> 00:00:37.230
allow applications to
act as themselves.

00:00:37.230 --> 00:00:40.910
Typically when we're using
OAuth with the Drive API,

00:00:40.910 --> 00:00:43.030
we're building applications that
are acting on behalf of

00:00:43.030 --> 00:00:50.480
the user and accessing the
user's data on their behalf.

00:00:50.480 --> 00:00:52.920
And that requires a particular
flow around what we call

00:00:52.920 --> 00:00:55.880
"three-legged OAuth," where
there's this exchange, a

00:00:55.880 --> 00:00:59.600
series of re-directs, in order
for the user to delegate that

00:00:59.600 --> 00:01:02.200
access to your application.

00:01:02.200 --> 00:01:05.110
With service accounts, we're
basically removing the user

00:01:05.110 --> 00:01:07.540
from that equation, and allowing
the application to

00:01:07.540 --> 00:01:10.820
use its own credentials,
and act on data.

00:01:10.820 --> 00:01:13.800
In the case of Drive, there's
really two use cases that this

00:01:13.800 --> 00:01:15.660
becomes very useful for.

00:01:15.660 --> 00:01:17.090
One, is--

00:01:17.090 --> 00:01:19.010
in cases where you actually just
want to build an app that

00:01:19.010 --> 00:01:22.390
stores data in Drive, but it can
continue to own that data.

00:01:22.390 --> 00:01:26.150
It can still share files it
creates in Drive with users.

00:01:26.150 --> 00:01:29.400
It can use some of the advanced
features in the SDK

00:01:29.400 --> 00:01:35.000
such as document conversion,
OCR, image recognition, and

00:01:35.000 --> 00:01:39.630
Goggles, but doing this all in
the context of owning the data

00:01:39.630 --> 00:01:42.150
itself, and not acting
on behalf of a user.

00:01:42.150 --> 00:01:45.860
There's a second use case,
which is particularly

00:01:45.860 --> 00:01:49.040
important for Google Apps for
Business customers, which is

00:01:49.040 --> 00:01:50.230
user impersonation.

00:01:50.230 --> 00:01:52.350
And we can use the Service
Accounts functionality in

00:01:52.350 --> 00:01:57.180
OAuth to allow an application
to act on behalf of users

00:01:57.180 --> 00:02:00.280
within a domain, but without
involving them directly in the

00:02:00.280 --> 00:02:01.120
authorization.

00:02:01.120 --> 00:02:02.550
And we'll actually go
through both of

00:02:02.550 --> 00:02:06.130
those with some samples.

00:02:06.130 --> 00:02:08.150
For those who are curious about
how service accounts

00:02:08.150 --> 00:02:10.775
work, you can find information
at developers.googl

00:02:10.775 --> 00:02:12.025
e.com/account/do
cs/oauth2serviceaccount.

00:02:17.860 --> 00:02:20.460
I actually have the
page up here.

00:02:20.460 --> 00:02:25.150
This page actually goes a lot
into the particular protocol--

00:02:25.150 --> 00:02:27.270
the mechanism-- which
is it's an assertion

00:02:27.270 --> 00:02:29.930
profile that uses JWTs.

00:02:29.930 --> 00:02:33.650
You'll see those are j-w-t,
pronounced "jawt." And it's

00:02:33.650 --> 00:02:37.810
basically a small bit of JSON,
it's Base64 encoded, digitally

00:02:37.810 --> 00:02:39.380
signed, and then transmitted
over.

00:02:39.380 --> 00:02:43.150
It's a lot simpler than a lot
of the other assertion

00:02:43.150 --> 00:02:45.120
protocols that been around
for while-- things like

00:02:45.120 --> 00:02:45.350
[? SML-- ?]

00:02:45.350 --> 00:02:45.680
[? so ?]

00:02:45.680 --> 00:02:47.140
[? it's ?] really simple, very

00:02:47.140 --> 00:02:49.075
lightweight, and easy to implement.

00:02:51.670 --> 00:02:54.160
Again, the information
on here is really for

00:02:54.160 --> 00:02:55.270
building it for yourself.

00:02:55.270 --> 00:02:57.820
The good thing is most of our
client libraries actually have

00:02:57.820 --> 00:03:00.350
this functionality built in.

00:03:00.350 --> 00:03:02.200
It's very easy to use.

00:03:02.200 --> 00:03:04.040
And for the demos that I'm going
to do, I'm going to be

00:03:04.040 --> 00:03:06.460
using the Ruby Client since
that happens to be

00:03:06.460 --> 00:03:08.650
the one I work on.

00:03:08.650 --> 00:03:12.230
But again, you can find the same
functionality, similar

00:03:12.230 --> 00:03:14.250
code in Java, Python, PHP.

00:03:14.250 --> 00:03:16.150
And I think most of
the libraries now

00:03:16.150 --> 00:03:19.230
have this built in.

00:03:19.230 --> 00:03:21.390
So the first thing you really
have to do when you're using

00:03:21.390 --> 00:03:24.150
Service Accounts is you have to
create credentials for your

00:03:24.150 --> 00:03:24.630
application.

00:03:24.630 --> 00:03:28.310
I'm going to switch over
to the API's console.

00:03:28.310 --> 00:03:30.510
And here, I actually already
went through the steps of

00:03:30.510 --> 00:03:31.230
creating it.

00:03:31.230 --> 00:03:35.500
And you can see here, we have
a service account with a

00:03:35.500 --> 00:03:37.380
client ID and email address.

00:03:37.380 --> 00:03:43.370
And this actually downloads
a new private key when you

00:03:43.370 --> 00:03:44.480
create this.

00:03:44.480 --> 00:03:45.730
Actually just going to create
another one here.

00:03:48.530 --> 00:03:50.240
We can have as many of
these as we want.

00:03:50.240 --> 00:03:51.270
But it's really simple.

00:03:51.270 --> 00:03:55.225
Create client ID, you select a
service account, and create--

00:03:58.030 --> 00:03:59.760
that's going to generate
a key pair--

00:03:59.760 --> 00:04:02.470
you can download this.

00:04:02.470 --> 00:04:05.880
And we'll get a PKCS12 file.

00:04:05.880 --> 00:04:07.610
You do need to make note
of the [? secret. ?]

00:04:07.610 --> 00:04:10.330
Right now these are not password
projected-- well they

00:04:10.330 --> 00:04:12.590
are password protected, but
it's the same password for

00:04:12.590 --> 00:04:13.030
every file.

00:04:13.030 --> 00:04:16.490
So you do need to take care of
protecting your private key

00:04:16.490 --> 00:04:18.329
once you get it.

00:04:18.329 --> 00:04:20.010
Also you cannot download
it again.

00:04:20.010 --> 00:04:23.310
If you do lose that file, you
do need to regenerate it so

00:04:23.310 --> 00:04:26.220
that you have a new one
for your application.

00:04:26.220 --> 00:04:27.890
But we created another one.

00:04:27.890 --> 00:04:29.800
I' m just going to use the first
one that I had over here

00:04:29.800 --> 00:04:33.840
and switch over to our little
sample application.

00:04:33.840 --> 00:04:35.220
For those who have gone through
the quickstarts

00:04:35.220 --> 00:04:38.640
before, this is basically a
modified version of the

00:04:38.640 --> 00:04:40.920
quickstarts that we've been
showing off in some of the

00:04:40.920 --> 00:04:43.880
earlier Google Developer
Live sessions.

00:04:43.880 --> 00:04:46.710
They are also up
on the website.

00:04:46.710 --> 00:04:49.780
And what I did, I just went
through that application and

00:04:49.780 --> 00:04:52.600
changed the OAuth mechanism
to use Service Accounts.

00:04:52.600 --> 00:04:54.380
So there's a couple things
I want to point out

00:04:54.380 --> 00:04:55.630
for how this works.

00:04:57.820 --> 00:04:59.610
These first couple lines up
here-- basically just the

00:04:59.610 --> 00:05:03.390
information that we need in
order to have our app

00:05:03.390 --> 00:05:04.900
authorize itself.

00:05:04.900 --> 00:05:06.710
We have the service
account ID.

00:05:06.710 --> 00:05:09.950
This is the email address
that is generated for

00:05:09.950 --> 00:05:11.890
that service account.

00:05:11.890 --> 00:05:15.750
You'll notice, if you go back
over to the API console, we

00:05:15.750 --> 00:05:17.120
actually have two different
client IDs.

00:05:17.120 --> 00:05:19.910
You have a client ID and
an email address.

00:05:19.910 --> 00:05:24.010
Typically with OAuth 2.0, we're
using the client ID in

00:05:24.010 --> 00:05:27.250
the various OAuth APIs to
identify our client.

00:05:27.250 --> 00:05:30.420
In the case of the assertion
profile with Service Accounts,

00:05:30.420 --> 00:05:34.010
we actually want to use the
email address instead.

00:05:34.010 --> 00:05:34.830
So go over here.

00:05:34.830 --> 00:05:36.350
We have our key file--
this is one that we

00:05:36.350 --> 00:05:39.070
just downloaded earlier.

00:05:39.070 --> 00:05:43.080
Again, it's a PKCS12 file, and
we also have the secret to

00:05:43.080 --> 00:05:48.170
unlock the private key-- in this
case just not a secret.

00:05:48.170 --> 00:05:54.430
The rest of this is actually
follows very similar to how

00:05:54.430 --> 00:05:55.680
OAuth works in general.

00:05:59.380 --> 00:06:01.170
We initialize the client.

00:06:01.170 --> 00:06:04.010
We have the API we want to
discover-- in this case,

00:06:04.010 --> 00:06:05.630
Google Drive.

00:06:05.630 --> 00:06:08.070
But instead of going through
the redirects that we would

00:06:08.070 --> 00:06:15.080
normally do for OAuth or normal
three-legged OAuth, We

00:06:15.080 --> 00:06:17.690
actually just create
[? a new motor ?] key file,

00:06:17.690 --> 00:06:18.910
create our [? asserter ?]

00:06:18.910 --> 00:06:21.640
with our service account ID, the
scopes that we want, and

00:06:21.640 --> 00:06:22.860
our private key.

00:06:22.860 --> 00:06:25.350
And then we can make
an assertion.

00:06:25.350 --> 00:06:29.400
That is very similar to what
would happen when in normal

00:06:29.400 --> 00:06:32.510
OAuth where you get a code from
the user and you would

00:06:32.510 --> 00:06:34.620
exchange that for
an access token.

00:06:34.620 --> 00:06:36.760
In this case, we're just
exchanging the assertion for

00:06:36.760 --> 00:06:39.850
an access token that we can
use in our application.

00:06:39.850 --> 00:06:42.970
Once we have that set up, we
have an authorized client, and

00:06:42.970 --> 00:06:45.380
we can just do an upload
as normal.

00:06:45.380 --> 00:06:54.900
So we can actually go and try
this, and what we'll see here

00:06:54.900 --> 00:06:56.770
is everything worked fine.

00:06:56.770 --> 00:07:00.150
We uploaded the file, and
we have the metadata.

00:07:00.150 --> 00:07:07.740
And the one thing I want
to point is the owning

00:07:07.740 --> 00:07:12.400
user for this file.

00:07:12.400 --> 00:07:15.720
And we can see here is our
service account-- our

00:07:15.720 --> 00:07:18.270
application-- basically is
acting as a user and it owns

00:07:18.270 --> 00:07:21.220
the content that we created.

00:07:21.220 --> 00:07:22.810
So we can use those.

00:07:22.810 --> 00:07:24.576
We can create as many
files as we want up

00:07:24.576 --> 00:07:25.970
to our quota limits.

00:07:25.970 --> 00:07:28.780
One of the limitations, though,
with this approach is,

00:07:28.780 --> 00:07:30.660
there currently isn't a way
where you can actually buy

00:07:30.660 --> 00:07:34.920
more storage quota for
your service account.

00:07:34.920 --> 00:07:39.860
In terms of practical usage,
there are limits, but you can

00:07:39.860 --> 00:07:43.520
still do some very interesting
things with Service Accounts.

00:07:43.520 --> 00:07:46.250
The other case I
want to demo--

00:07:46.250 --> 00:07:49.982
and first, I'm going to
switch over to here--

00:07:49.982 --> 00:07:53.000
is this mode of user
impersonation.

00:07:53.000 --> 00:07:56.320
And this is just our Google
Apps control panel.

00:07:56.320 --> 00:07:58.270
We just have one of our test
domains here, [? Apps ?]

00:07:58.270 --> 00:07:59.680
[? Rocks. ?]

00:07:59.680 --> 00:08:04.460
And underneath Advanced Tools,
there's this link down here

00:08:04.460 --> 00:08:06.935
for Manage Third-party
OAuth Client Access.

00:08:06.935 --> 00:08:08.470
You can click here.

00:08:08.470 --> 00:08:12.680
And I actually already created
this earlier, but here's where

00:08:12.680 --> 00:08:16.010
we would do the delegation
for--

00:08:16.010 --> 00:08:17.890
or basically to authorize our
application to impersonate

00:08:17.890 --> 00:08:19.120
users on this domain.

00:08:19.120 --> 00:08:22.110
So basically what you do is
you take the client ID--

00:08:22.110 --> 00:08:25.260
this is the actual client ID for
the service account, not

00:08:25.260 --> 00:08:27.780
the email address--

00:08:27.780 --> 00:08:29.110
list the scopes.

00:08:29.110 --> 00:08:30.630
And then you authorize.

00:08:30.630 --> 00:08:35.770
Now what we can do is we can
go back into this file.

00:08:35.770 --> 00:08:41.070
And now I'm just going to add
my email address here.

00:08:41.070 --> 00:08:43.900
So when I authorize, instead
of authorizing on behalf of

00:08:43.900 --> 00:08:46.980
the application, I want to
authorize on behalf of the

00:08:46.980 --> 00:08:50.310
user for that domain.

00:08:50.310 --> 00:08:51.420
I can go back in.

00:08:51.420 --> 00:08:52.670
You can rerun this.

00:08:57.420 --> 00:09:02.850
And what we'll see is now
the file is owned by me.

00:09:02.850 --> 00:09:06.090
So even though it's basically
the same mechanism by virtue

00:09:06.090 --> 00:09:10.430
of the fact that I have at the
domain level authorized this

00:09:10.430 --> 00:09:13.570
particular application to act on
behalf of any of my users,

00:09:13.570 --> 00:09:14.720
I can now easily switch.

00:09:14.720 --> 00:09:17.650
This is really useful if you're
building Administrative

00:09:17.650 --> 00:09:19.650
Tools, you're a domain
administrator, you want to do

00:09:19.650 --> 00:09:24.020
auditing of docs usage or
reporting or just moving files

00:09:24.020 --> 00:09:27.300
between users in a
programmatic way.

00:09:27.300 --> 00:09:31.770
Obviously, it can be very
difficult to have lots of

00:09:31.770 --> 00:09:33.620
different users come and
authorize your application.

00:09:33.620 --> 00:09:37.150
This just allows you as a
privileged administrator to

00:09:37.150 --> 00:09:39.690
create applications that can do
things across your domain

00:09:39.690 --> 00:09:40.940
very easily.

00:09:44.020 --> 00:09:47.800
If you were to try this and say,
let's change this to my

00:09:47.800 --> 00:09:49.200
Google [? account, ?]

00:09:49.200 --> 00:09:52.280
this will fail because this
application isn't allowed to

00:09:52.280 --> 00:09:56.010
assert users on that domain.

00:09:56.010 --> 00:09:58.100
So, pretty easy to use.

00:09:58.100 --> 00:10:01.410
There is one other case for
Service Accounts that I want

00:10:01.410 --> 00:10:02.270
to mention.

00:10:02.270 --> 00:10:04.400
It's not something that is
currently supported, but this

00:10:04.400 --> 00:10:07.370
is our App Engine robot
accounts which uses a

00:10:07.370 --> 00:10:10.510
functionality very similar
to the Service Accounts

00:10:10.510 --> 00:10:12.710
that we just saw.

00:10:12.710 --> 00:10:15.650
But for various technical
reasons it is not yet fully

00:10:15.650 --> 00:10:16.780
supported with the Drive API.

00:10:16.780 --> 00:10:20.600
It is something that we're aware
of and looking to fix.

00:10:20.600 --> 00:10:24.560
But if you do you want to use
service account functionality

00:10:24.560 --> 00:10:29.290
on App Engine, particularly
with the Drive API, you do

00:10:29.290 --> 00:10:32.280
need to do a service account
created through our APIs

00:10:32.280 --> 00:10:36.030
console, as opposed to using
the built-in robot account

00:10:36.030 --> 00:10:38.320
functionality that comes
with App Engine.

00:10:38.320 --> 00:10:42.230
Again, something we're aware
of and looking to fix.

00:10:42.230 --> 00:10:45.290
But there are workarounds
for the time being.

00:10:45.290 --> 00:10:46.890
So that is Service Accounts.

00:10:46.890 --> 00:10:49.350
Again, you can find this
functionality in most of our

00:10:49.350 --> 00:10:51.790
client libraries.

00:10:51.790 --> 00:10:54.060
It's generally pretty
easy to use--

00:10:54.060 --> 00:10:58.480
particularly useful for domain
administrators that want to be

00:10:58.480 --> 00:11:02.570
able to manage Google Drive on
behalf of their users, without

00:11:02.570 --> 00:11:05.480
having to build a full-fledged
web application, and have to

00:11:05.480 --> 00:11:09.420
go through the complexities
of requiring each user to

00:11:09.420 --> 00:11:11.440
authorize themselves.

00:11:11.440 --> 00:11:14.780
So that is all for today.

00:11:14.780 --> 00:11:17.680
Look forward to seeing everyone
on Thursday at our

00:11:17.680 --> 00:11:19.230
next session.

00:11:19.230 --> 00:11:22.230
I don't know if we have a topic
yet, but once we have

00:11:22.230 --> 00:11:25.070
that, we'll make sure that it is
announced and available on

00:11:25.070 --> 00:11:27.870
developers.google.com/live.

00:11:27.870 --> 00:11:30.930
And you can also find us on
Google+ and Stack Overflow.

00:11:30.930 --> 00:11:32.180
Great, thank you very much.

00:11:39.070 --> 00:12:04.033
[MUSIC PLAYING]

