WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.225
Android - Performance Patterns

00:00:03.130 --> 00:00:06.920
Sometimes it's not the big,
glaring performance problems that get you,

00:00:06.920 --> 00:00:09.620
it's the little insignificant cost
of small functions,

00:00:09.620 --> 00:00:12.744
executed over and over again
that add up to big problems.

00:00:12.744 --> 00:00:16.158
I'm Joanna Smith and rather than suffering
the death of a thousand cuts,

00:00:16.158 --> 00:00:18.903
you can utilize batching
to keep your app alive.

00:00:19.300 --> 00:00:22.690
Almost everything in computing
has some associated performance overhead

00:00:22.690 --> 00:00:24.020
that goes along with it.

00:00:24.020 --> 00:00:26.700
This could be something big,
like decompressing an image,

00:00:26.700 --> 00:00:30.286
which requires a lot of memory allocations
to store the intermediate data.

00:00:30.286 --> 00:00:33.580
Or it can be something small,
like the extra memory copies

00:00:33.580 --> 00:00:36.874
and pointer management that tag
along with recursive functions.

00:00:36.874 --> 00:00:40.270
Now typically, these perf taxes
aren't much of a concern.

00:00:40.270 --> 00:00:45.287
But when executed multiple times, where
multiple is some seriously big number,

00:00:45.287 --> 00:00:49.455
this overhead can become a serious
performance burden for your application.

00:00:49.455 --> 00:00:52.070
And this is where batching comes in handy.

00:00:52.070 --> 00:00:54.200
Batching is the process
of grouping together

00:00:54.200 --> 00:00:56.650
identical instances of a task.

00:00:56.650 --> 00:01:01.078
This way the associated overhead
happens once, not once per instance.

00:01:01.078 --> 00:01:04.830
For example, if you're going to
render the same image 20 times,

00:01:04.830 --> 00:01:08.724
try loading it once before you begin
instead of loading it for every render.

00:01:08.724 --> 00:01:12.940
After all, nesting your computations
together gets you more bang for the buck.

00:01:12.940 --> 00:01:16.340
For Android, one of the most important
places you can leverage batching

00:01:16.340 --> 00:01:18.080
is with networking requests.

00:01:18.080 --> 00:01:21.145
Basically, there's an overhead cost
each time you need to turn on

00:01:21.145 --> 00:01:22.287
your phone's cell radio.

00:01:22.287 --> 00:01:24.950
So, if you're sending a packet out
once every 30 seconds,

00:01:24.950 --> 00:01:27.180
you're paying for that cost every packet.

00:01:27.180 --> 00:01:30.606
Instead, you should group one
to two minutes worth of requests together,

00:01:30.606 --> 00:01:34.500
turn the radio on once and send all
of those requests at the same time.

00:01:35.010 --> 00:01:37.790
But batching is pretty helpful
in other situations too,

00:01:37.790 --> 00:01:39.460
like rendering custom views.

00:01:39.460 --> 00:01:43.473
Rather than computing a transform matrix
for every item, you could group them and

00:01:43.473 --> 00:01:48.188
make small changes to a larger transform
matrix, saving you precious resources.

00:01:48.188 --> 00:01:51.573
And then there's the most obvious case
for batching, where some function

00:01:51.573 --> 00:01:54.363
needs to compute a lookup table
before working on the data.

00:01:54.363 --> 00:01:57.550
So, making a version that can
batch together 20 pieces of data

00:01:57.550 --> 00:02:00.928
for one lookup table creation
is a clear batching win.

00:02:00.928 --> 00:02:04.617
In fact, batching is so important
that all modern processors now

00:02:04.617 --> 00:02:07.122
come equipped with mathematical
batching support.

00:02:07.122 --> 00:02:10.075
Single instruction multiple data functions
allow you to execute

00:02:10.075 --> 00:02:14.589
the same mathematical functions on
multiple pieces of data all in parallel.

00:02:14.589 --> 00:02:16.790
So, instead of spending
individual CPU cycles

00:02:16.790 --> 00:02:20.050
on each of the four pieces of
data, you can spend one cycle

00:02:20.050 --> 00:02:21.670
and get the same results.

00:02:21.670 --> 00:02:24.400
And that's really what the
core of performance is about.

00:02:24.400 --> 00:02:28.350
Finding every opportunity to reduce
even the slightest performance overhead.

00:02:28.360 --> 00:02:31.946
Because a one millisecond overhead
called 16 times in one frame

00:02:31.946 --> 00:02:34.920
is all it takes to destroy
your frame rate.

00:02:34.920 --> 00:02:37.560
So, to see other improvements
and find more perf advice,

00:02:37.560 --> 00:02:40.510
check out the rest of our
Android Performance Patterns content.

00:02:40.510 --> 00:02:43.750
And consider joining our G+ Community
for tips, tricks, and help.

00:02:43.750 --> 00:02:46.810
But most importantly, keep calm,
profile your code,

00:02:46.810 --> 00:02:48.680
and always remember,
perf matters!

00:02:48.680 --> 00:02:52.527
(music playing)

