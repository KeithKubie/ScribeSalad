WEBVTT
Kind: captions
Language: en

00:00:02.350 --> 00:00:06.370
MALE SPEAKER: Thank you for
coming to Edmond Lau's talk.

00:00:06.370 --> 00:00:10.790
He will be talking about how to
be a more effective engineer.

00:00:10.790 --> 00:00:15.290
I met him about four
months ago or so,

00:00:15.290 --> 00:00:18.120
and it was also during
one of his talks.

00:00:18.120 --> 00:00:20.370
And I was just blown away by it.

00:00:20.370 --> 00:00:24.610
And I thought it would be so
useful to share his experience

00:00:24.610 --> 00:00:28.180
and knowledge with
the rest of Google.

00:00:28.180 --> 00:00:30.669
He is actually
also an ex-Google.

00:00:30.669 --> 00:00:31.960
So, he worked at Google before.

00:00:31.960 --> 00:00:34.940
He also worked at
various startups.

00:00:34.940 --> 00:00:40.980
And this talk will be based
on his experience as well

00:00:40.980 --> 00:00:44.160
as everyone he
interviewed with, and what

00:00:44.160 --> 00:00:48.030
makes for an effective engineer
and for an effective team.

00:00:48.030 --> 00:00:52.186
So without further ado, let me
introduce to you Edmond Lau.

00:00:52.186 --> 00:00:53.110
[APPLAUSE]

00:00:56.600 --> 00:00:58.500
EDMOND LAU: Yeah,
it's great to be back.

00:00:58.500 --> 00:01:06.090
I think it's been maybe 10
years since I first joined

00:01:06.090 --> 00:01:08.240
Google right out of school.

00:01:08.240 --> 00:01:11.690
I joined the search
quality team.

00:01:11.690 --> 00:01:13.400
And since leaving
Google, I've worked

00:01:13.400 --> 00:01:16.300
at a bunch of
different startups,

00:01:16.300 --> 00:01:18.960
including Ooyala,
Quora, and Qup.

00:01:18.960 --> 00:01:22.720
And two of those were actually
founded by former Googlers.

00:01:22.720 --> 00:01:24.440
And so, even though
I've been away

00:01:24.440 --> 00:01:27.700
from Google for quite
some time, Google culture

00:01:27.700 --> 00:01:30.890
has actually been a large
part of the various startups

00:01:30.890 --> 00:01:32.680
that I worked at.

00:01:32.680 --> 00:01:37.190
And earlier this year, I did
publish a book, "The Effective

00:01:37.190 --> 00:01:37.720
Engineer."

00:01:37.720 --> 00:01:40.820
And what I like to
do during this talk

00:01:40.820 --> 00:01:43.240
is share with you some of
the stories and lessons

00:01:43.240 --> 00:01:46.080
that I've collected
during these experiences.

00:01:46.080 --> 00:01:48.600
And so my promise to
you during this talk

00:01:48.600 --> 00:01:53.600
is that you sort of walk away
with a framework and a set

00:01:53.600 --> 00:01:56.530
of actual strategies that
you can apply to your day

00:01:56.530 --> 00:02:01.220
to day job on how to become
more effective as an engineer.

00:02:01.220 --> 00:02:06.040
But, before we dive into
the meat of the talk,

00:02:06.040 --> 00:02:09.460
I want to do a quick poll
and get a show of hands.

00:02:09.460 --> 00:02:18.230
Who here has pulled a long night
on a project for work before?

00:02:18.230 --> 00:02:20.590
Who here has done that-- who's
done work on the weekends

00:02:20.590 --> 00:02:22.770
before?

00:02:22.770 --> 00:02:23.650
A large number.

00:02:23.650 --> 00:02:29.180
Who here has worked multiple
months on a project, only

00:02:29.180 --> 00:02:33.587
to see maybe it not
actually launch?

00:02:33.587 --> 00:02:35.920
What about working multiple
months on a project and then

00:02:35.920 --> 00:02:38.320
see it launch, but
not actually sort

00:02:38.320 --> 00:02:40.187
of seeing the
impact or the effect

00:02:40.187 --> 00:02:41.228
that you actually wanted?

00:02:45.060 --> 00:02:46.980
And let's do one more.

00:02:46.980 --> 00:02:51.384
Who here has to do pager duty?

00:02:51.384 --> 00:02:53.800
And how many of you have been
paged in the middle of night

00:02:53.800 --> 00:02:57.210
or over the weekends before?

00:02:57.210 --> 00:03:00.280
Yeah, so it's a good
number of people.

00:03:00.280 --> 00:03:05.900
And when this stuff happens, a
lot of times we sort of wonder,

00:03:05.900 --> 00:03:10.680
was all this time and
energy, was it worth it?

00:03:10.680 --> 00:03:13.890
Was this actually the
best use of my time?

00:03:13.890 --> 00:03:17.870
And this isn't a question that
you just sort of ask at Google.

00:03:17.870 --> 00:03:21.520
It's also questions that we
ask at other places as well.

00:03:21.520 --> 00:03:24.860
I remember when I
left Google, the week

00:03:24.860 --> 00:03:28.920
immediately afterwards, I
jumped-- dove head first

00:03:28.920 --> 00:03:30.450
into my first startup.

00:03:30.450 --> 00:03:34.000
I didn't even take
a week of break.

00:03:34.000 --> 00:03:37.200
And this first
startup was Ooyala.

00:03:37.200 --> 00:03:39.610
It was an online video
company focused on building

00:03:39.610 --> 00:03:41.220
a platform for the enterprise.

00:03:41.220 --> 00:03:43.420
It was founded by
a former Googler.

00:03:43.420 --> 00:03:47.620
I remember my very first
week, the CTO told me,

00:03:47.620 --> 00:03:49.830
you're responsible for
building this feature that's

00:03:49.830 --> 00:03:52.360
already been promised
to a paying customer.

00:03:52.360 --> 00:03:55.691
And the video player has
written an actionscript,

00:03:55.691 --> 00:03:57.440
because it was a Flash
based video player.

00:03:57.440 --> 00:03:59.851
And it was a language
that I didn't know.

00:03:59.851 --> 00:04:01.350
The servers were
all written in Ruby

00:04:01.350 --> 00:04:04.320
on Rails, which I had
no familiarity with.

00:04:04.320 --> 00:04:06.760
And there was not
a single unit test

00:04:06.760 --> 00:04:08.200
across the entire codebase.

00:04:08.200 --> 00:04:12.370
And so, I was really scared
of just accidentally breaking

00:04:12.370 --> 00:04:14.480
something production.

00:04:14.480 --> 00:04:16.790
And so, my first
two weeks there,

00:04:16.790 --> 00:04:21.255
I ended up pulling 70 to 80 hour
weeks to try to get that done.

00:04:21.255 --> 00:04:23.010
And when I want to
talked to my CTO

00:04:23.010 --> 00:04:27.810
about how intense this felt,
his response was sink or swim.

00:04:27.810 --> 00:04:29.450
There's no life
preserver coming.

00:04:29.450 --> 00:04:32.200
You're just going to
have to work hard.

00:04:32.200 --> 00:04:36.600
And that was a very
intense and very stressful

00:04:36.600 --> 00:04:38.490
time in my career.

00:04:38.490 --> 00:04:40.180
And so, the next
startup I joined

00:04:40.180 --> 00:04:42.020
wasn't all that different.

00:04:42.020 --> 00:04:44.940
When I join Quora, which
was a question answer site,

00:04:44.940 --> 00:04:47.490
the jobs page actually
read, you should

00:04:47.490 --> 00:04:51.240
be ready to make this startup
the primary focus of your life.

00:04:51.240 --> 00:04:54.640
That's sort of how
intense the culture was.

00:04:54.640 --> 00:04:57.740
And that time, all
of these narratives

00:04:57.740 --> 00:05:01.340
about how you need to work
hard to succeed sort of really

00:05:01.340 --> 00:05:02.810
lined up with how
we were thinking.

00:05:02.810 --> 00:05:05.560
My team and I, we really
wanted to succeed.

00:05:05.560 --> 00:05:08.327
But at the same time, we
knew we were the underdogs.

00:05:08.327 --> 00:05:09.910
While we were building
an online video

00:05:09.910 --> 00:05:14.660
platform for the enterprise,
YouTube was free.

00:05:14.660 --> 00:05:18.400
Our biggest
competitor, Brightcove,

00:05:18.400 --> 00:05:19.877
dominated most of the market.

00:05:19.877 --> 00:05:21.710
And so we thought, one
of our secret weapons

00:05:21.710 --> 00:05:24.860
was that we're just going
to outwork everyone else.

00:05:24.860 --> 00:05:29.470
We're going to work
so hard that we're

00:05:29.470 --> 00:05:33.280
going to overcome all these
obstacles and actually succeed.

00:05:33.280 --> 00:05:39.145
And it took a while before
I started wondering,

00:05:39.145 --> 00:05:41.390
was this actually the
best use of our time?

00:05:41.390 --> 00:05:42.986
Because we worked
on projects where

00:05:42.986 --> 00:05:45.360
we'd spend multiple months
building a future for a paying

00:05:45.360 --> 00:05:48.380
customer, but then they
would never use it.

00:05:48.380 --> 00:05:52.780
Or at Quora, we'd
build content tools.

00:05:52.780 --> 00:05:55.500
And it just wouldn't get
the adoption from users

00:05:55.500 --> 00:05:58.030
that we actually wanted.

00:05:58.030 --> 00:06:00.920
There were all these things
where we spent so much time

00:06:00.920 --> 00:06:03.840
on these projects,
by the end of day,

00:06:03.840 --> 00:06:06.470
it didn't really
lead to any impact.

00:06:06.470 --> 00:06:08.700
And so, we started
sort of wondering,

00:06:08.700 --> 00:06:10.830
can we actually work smarter?

00:06:10.830 --> 00:06:14.950
Can we deliver
significantly more value

00:06:14.950 --> 00:06:17.250
while working fewer hours?

00:06:17.250 --> 00:06:20.310
And it's sort of like after
doing years of actually working

00:06:20.310 --> 00:06:24.850
these crazy hours before I had
this key insight that effort

00:06:24.850 --> 00:06:27.400
doesn't really equal impact.

00:06:27.400 --> 00:06:30.730
You may have good intentions,
but those good intentions

00:06:30.730 --> 00:06:32.980
don't actually lead to results.

00:06:32.980 --> 00:06:36.560
Think about a staff
engineer at Google.

00:06:36.560 --> 00:06:39.620
They probably produce
more than twice the impact

00:06:39.620 --> 00:06:42.830
or twice the output of
a more junior engineer,

00:06:42.830 --> 00:06:46.360
but they're probably not
working 2x the hours.

00:06:46.360 --> 00:06:48.140
Or think about Jeff Dean.

00:06:48.140 --> 00:06:52.070
So, I heard Google had to sort
of invent some new engineering

00:06:52.070 --> 00:06:55.780
level for him, like
senior Google fellow.

00:06:55.780 --> 00:06:58.560
He probably produces more than
10x the impact of most of us

00:06:58.560 --> 00:06:59.490
in this room.

00:06:59.490 --> 00:07:00.969
But he's not working
10x the hours

00:07:00.969 --> 00:07:02.510
because that's
physically impossible.

00:07:02.510 --> 00:07:04.800
There aren't that
many hours in the day.

00:07:04.800 --> 00:07:08.660
And so, the notion
that effort is

00:07:08.660 --> 00:07:10.840
sort of what
determines our impact

00:07:10.840 --> 00:07:13.740
isn't really a correct one,
and we need a better framework

00:07:13.740 --> 00:07:16.620
for the really understanding
and thinking and reasoning

00:07:16.620 --> 00:07:19.450
about impact and effectiveness.

00:07:19.450 --> 00:07:23.490
And so, that's sort of
where I sort of came

00:07:23.490 --> 00:07:27.750
upon this principle of
leverage, where leverage

00:07:27.750 --> 00:07:32.330
is defined as impact that
you produce for the time

00:07:32.330 --> 00:07:33.740
that you invest.

00:07:33.740 --> 00:07:37.770
It's the rate of return on your
investment of time and energy.

00:07:37.770 --> 00:07:38.600
It's the ROI.

00:07:38.600 --> 00:07:40.700
It's the rate of impact.

00:07:40.700 --> 00:07:44.560
If you think about the Pareto
Principle, the 80-20 Rule,

00:07:44.560 --> 00:07:46.990
it's the 20% of
work that actually

00:07:46.990 --> 00:07:49.000
produces 80% of the results.

00:07:49.000 --> 00:07:53.100
Those are the tasks, those are
the activities that actually

00:07:53.100 --> 00:07:54.300
are extremely high leverage.

00:07:56.820 --> 00:08:02.470
Now, sort of a central thesis
that I want you to take away

00:08:02.470 --> 00:08:05.730
from this talk is that this
central concept of leverage

00:08:05.730 --> 00:08:09.260
is really the guiding metric
that effective engineers should

00:08:09.260 --> 00:08:13.000
use to determine how and
where to spend their time.

00:08:13.000 --> 00:08:15.075
Now, it might seem a
little obvious and maybe

00:08:15.075 --> 00:08:20.810
a little simple to some of us,
but the same time, oftentimes

00:08:20.810 --> 00:08:22.940
we're so engrossed
in what we're doing,

00:08:22.940 --> 00:08:26.940
we're so focused on the
project that we're working on

00:08:26.940 --> 00:08:29.190
that we don't really
take the time to ask,

00:08:29.190 --> 00:08:31.040
are we working the right thing?

00:08:31.040 --> 00:08:32.529
We're attending meetings.

00:08:32.529 --> 00:08:34.320
That might not be the
best use of our time.

00:08:34.320 --> 00:08:36.860
Or we're fixing the
next urgent bug,

00:08:36.860 --> 00:08:40.500
or we're just fighting
the next fire.

00:08:40.500 --> 00:08:44.220
Or we're working on projects
that end up not shipping or not

00:08:44.220 --> 00:08:45.660
going anywhere.

00:08:45.660 --> 00:08:48.960
And we don't really take a
step back to think about,

00:08:48.960 --> 00:08:52.870
was our time on these
projects actually well spent?

00:08:52.870 --> 00:08:56.840
Were those activities
actually high leverage?

00:08:56.840 --> 00:09:00.690
And you can think about if
you're walking along the road

00:09:00.690 --> 00:09:03.570
and you see a boulder, that
boulder is really hard to move.

00:09:03.570 --> 00:09:05.730
But if you can find
the right lever,

00:09:05.730 --> 00:09:08.110
then you can apply just
a little bit of force

00:09:08.110 --> 00:09:09.770
and move that boulder
out of the way,

00:09:09.770 --> 00:09:12.120
because that lever
amplifies your output.

00:09:12.120 --> 00:09:13.990
In a similar way, in
software engineering,

00:09:13.990 --> 00:09:15.489
we're looking for
those levers where

00:09:15.489 --> 00:09:21.640
we can amplify our energy, our
time and produce massive gains.

00:09:21.640 --> 00:09:25.214
And so, the next question
we might ask ourselves,

00:09:25.214 --> 00:09:26.630
given that we have
this framework,

00:09:26.630 --> 00:09:30.100
is how do we actually
apply it to engineering?

00:09:30.100 --> 00:09:34.130
What are the highest leverage
activities for engineers?

00:09:34.130 --> 00:09:37.680
This is a question that I really
personally wanted to answer.

00:09:37.680 --> 00:09:40.860
I knew that working
60 to 80 hour weeks

00:09:40.860 --> 00:09:42.180
simply wasn't sustainable.

00:09:42.180 --> 00:09:46.730
It wasn't going to help us
win in our different markets.

00:09:46.730 --> 00:09:49.760
Also, I'd spend a lot of
time on engineering hiring

00:09:49.760 --> 00:09:50.460
and recruiting.

00:09:50.460 --> 00:09:53.480
And I'd screen thousands
of resumes or interview

00:09:53.480 --> 00:09:55.180
maybe 500 candidates.

00:09:55.180 --> 00:09:57.700
And I really want to
know, how do we actually

00:09:57.700 --> 00:10:01.790
identify the most effective
engineers to hire for our team?

00:10:01.790 --> 00:10:04.640
I'd also spent about maybe
a year and a half building

00:10:04.640 --> 00:10:08.030
the on boarding and
training programs

00:10:08.030 --> 00:10:10.260
for engineers at Quora.

00:10:10.260 --> 00:10:12.590
This was basically what
every new engineer at Quora

00:10:12.590 --> 00:10:13.740
would go through.

00:10:13.740 --> 00:10:15.420
And I wanted to know,
how do we actually

00:10:15.420 --> 00:10:19.160
train engineers and teach
them to be more effective?

00:10:19.160 --> 00:10:21.860
And so, I really wanted to know
the answer to this question.

00:10:21.860 --> 00:10:25.340
And so, that's what
started me on a quest

00:10:25.340 --> 00:10:30.020
where I quit my job at Quora and
then basically took two years

00:10:30.020 --> 00:10:33.270
to explore this question.

00:10:33.270 --> 00:10:35.130
And I went around
Silicon Valley.

00:10:35.130 --> 00:10:37.510
I interviewed a bunch
of engineering leaders

00:10:37.510 --> 00:10:38.590
from different companies.

00:10:38.590 --> 00:10:42.620
So, VPs, directors,
managers, tech leads,

00:10:42.620 --> 00:10:46.090
people from larger companies
like Google, Facebook,

00:10:46.090 --> 00:10:47.060
LinkedIn, Twitter.

00:10:47.060 --> 00:10:50.500
A few were from more medium size
companies like Dropbox, Square,

00:10:50.500 --> 00:10:52.310
Airbnb, Box, Etsy.

00:10:52.310 --> 00:10:55.670
And even smaller startups:
Instagram, Reddit, Lyft

00:10:55.670 --> 00:10:57.530
at the time was pretty small.

00:10:57.530 --> 00:10:59.340
And I grilled them.

00:10:59.340 --> 00:11:02.310
I asked them really
hard questions.

00:11:02.310 --> 00:11:06.275
Asked them, what separates
the most effective engineers

00:11:06.275 --> 00:11:10.010
you've worked with
from everyone else?

00:11:10.010 --> 00:11:12.540
What are the most
valuable lessons

00:11:12.540 --> 00:11:15.830
that you've learned
in the past year?

00:11:15.830 --> 00:11:18.590
What investments have you
made for your team that

00:11:18.590 --> 00:11:21.730
have paid the highest returns?

00:11:21.730 --> 00:11:25.480
I really wanted to know what
from their experiences proved

00:11:25.480 --> 00:11:28.430
out to be the highest leverage
activities that engineers

00:11:28.430 --> 00:11:30.890
everywhere should
be focusing on.

00:11:30.890 --> 00:11:34.750
And now 22 months
later, I basically

00:11:34.750 --> 00:11:38.320
had a collection of stories,
lessons, and actual strategies

00:11:38.320 --> 00:11:41.660
on how to be more
effective engineer.

00:11:41.660 --> 00:11:44.400
Now, everyone's
story was different,

00:11:44.400 --> 00:11:46.120
but there were a lot
of common themes.

00:11:46.120 --> 00:11:48.220
And in this book,
this is still a lot

00:11:48.220 --> 00:11:50.743
of those common themes
through actual strategies

00:11:50.743 --> 00:11:56.080
that you and I can apply in our
day to day jobs as engineers.

00:11:56.080 --> 00:11:59.590
And so, what I'd like to do
for the rest of this talk

00:11:59.590 --> 00:12:03.120
is actually share with you
five of those high leverage

00:12:03.120 --> 00:12:05.080
activities for
engineers that I think

00:12:05.080 --> 00:12:08.160
would be really useful for
us to incorporate in our day

00:12:08.160 --> 00:12:08.660
to day jobs.

00:12:12.490 --> 00:12:14.940
The first high leverage
activity really

00:12:14.940 --> 00:12:16.450
starts in our own
mindset, how we

00:12:16.450 --> 00:12:20.710
think about our own
development as engineers.

00:12:20.710 --> 00:12:25.380
And that activity is
optimizing for learning

00:12:25.380 --> 00:12:28.680
This Mantra is something that
has guided all of my own career

00:12:28.680 --> 00:12:29.180
decisions.

00:12:29.180 --> 00:12:32.860
Every change I made from company
to company or from company

00:12:32.860 --> 00:12:36.350
to writing a book was
because I saw an opportunity

00:12:36.350 --> 00:12:38.956
to actually increase
my learning rate.

00:12:38.956 --> 00:12:40.830
And this is really
important because learning

00:12:40.830 --> 00:12:45.330
is something that actually
compounds over time.

00:12:45.330 --> 00:12:48.880
What you learn today sets you
up for other opportunities

00:12:48.880 --> 00:12:51.810
and other learning that you
might have in the future.

00:12:51.810 --> 00:12:53.650
And when I say that it
compounds over time,

00:12:53.650 --> 00:12:55.500
I actually mean a few things.

00:12:55.500 --> 00:13:01.560
One, this curve of learning
is actually exponential.

00:13:01.560 --> 00:13:05.660
Just like if you were investing
in your financial investments,

00:13:05.660 --> 00:13:09.360
your investment portfolio,
your financial investments

00:13:09.360 --> 00:13:12.140
compound over time
exponentially.

00:13:12.140 --> 00:13:13.950
In a similar way,
investments in yourself

00:13:13.950 --> 00:13:16.140
also do the same thing.

00:13:16.140 --> 00:13:18.870
So, the second implication
is that the earlier

00:13:18.870 --> 00:13:20.900
on in your career
that you invest

00:13:20.900 --> 00:13:23.680
in yourself, the more
time that learning

00:13:23.680 --> 00:13:27.120
has to compound the long run.

00:13:27.120 --> 00:13:31.690
And thirdly even small
deltas in your learning rate

00:13:31.690 --> 00:13:33.750
can have tremendous
impact on how much

00:13:33.750 --> 00:13:38.490
knowledge and how much learning
you have in the long term.

00:13:38.490 --> 00:13:40.900
And so, it's really
hard actually

00:13:40.900 --> 00:13:45.670
to quantify how much we're
learning, but suppose

00:13:45.670 --> 00:13:47.500
you actually could.

00:13:47.500 --> 00:13:51.890
Suppose you could actually
improve yourself by 1% per day.

00:13:51.890 --> 00:13:53.820
What would that mean?

00:13:53.820 --> 00:13:57.970
Well, it would mean by the end
of the year, after 365 days,

00:13:57.970 --> 00:14:00.780
you'd actually be 37
times better than you

00:14:00.780 --> 00:14:03.290
were at the being of the year.

00:14:03.290 --> 00:14:05.400
That's a huge difference.

00:14:05.400 --> 00:14:08.090
And the best engineers and
the best engineering leaders

00:14:08.090 --> 00:14:11.790
actually aggressively
and relentlessly optimize

00:14:11.790 --> 00:14:13.710
in their own learning.

00:14:13.710 --> 00:14:17.015
One of the pieces of
advice Tamar Bercovici, who

00:14:17.015 --> 00:14:19.260
is a senior engineering
manager at Box,

00:14:19.260 --> 00:14:21.380
tells all of the
engineers he manages,

00:14:21.380 --> 00:14:24.000
is to own your own story.

00:14:24.000 --> 00:14:27.760
What she means by that
is that you need to take

00:14:27.760 --> 00:14:31.690
control and take ownership of
your own learning and growth,

00:14:31.690 --> 00:14:34.700
rather than waiting for
opportunities to come to you

00:14:34.700 --> 00:14:37.930
and find opportunities to
really invest in yourself.

00:14:37.930 --> 00:14:45.440
Read books, take classes, work
on side projects, attend talks.

00:14:45.440 --> 00:14:48.060
These are all ways that
you can invest in yourself

00:14:48.060 --> 00:14:50.576
and then those
investments will compound

00:14:50.576 --> 00:14:53.670
in your career in the long run.

00:14:53.670 --> 00:14:58.820
And so, when you think
about growing your career,

00:14:58.820 --> 00:15:01.720
ask yourself how might
you improve yourself

00:15:01.720 --> 00:15:03.250
every single day?

00:15:03.250 --> 00:15:07.420
And commit to making
a habit out of that.

00:15:07.420 --> 00:15:09.770
Now learning is one
thing that compounds.

00:15:09.770 --> 00:15:12.610
But another thing
that also compounds

00:15:12.610 --> 00:15:15.580
and that also is
very high leverage

00:15:15.580 --> 00:15:17.610
is actually investing
in your own iteration

00:15:17.610 --> 00:15:22.010
speed, how quickly you
can get things done.

00:15:22.010 --> 00:15:24.100
The faster we can
get things done,

00:15:24.100 --> 00:15:27.230
the more impact we'll
have in the long run.

00:15:27.230 --> 00:15:29.820
And because we're
all engineers, one

00:15:29.820 --> 00:15:32.850
of the best ways that we can
invest in our iteration speed

00:15:32.850 --> 00:15:35.720
is actually by
investing in tools.

00:15:35.720 --> 00:15:38.190
When I was talking with
Bobby Johnson, who's

00:15:38.190 --> 00:15:42.020
the former engineering
director at Facebook,

00:15:42.020 --> 00:15:43.840
he made the observation
to me that he

00:15:43.840 --> 00:15:48.230
found that people who are
successful, almost all of them

00:15:48.230 --> 00:15:50.160
wrote a lot of tools.

00:15:50.160 --> 00:15:52.310
He said the strongest
engineers and his team

00:15:52.310 --> 00:15:55.900
spend probably a third of
their time working on tools.

00:15:55.900 --> 00:15:59.530
Tools to do monitoring, tools
to make debugging easier,

00:15:59.530 --> 00:16:02.490
tools to just glue
the system together.

00:16:02.490 --> 00:16:04.490
But the surprising
thing was that he

00:16:04.490 --> 00:16:07.310
said this wasn't actually
obvious on his team.

00:16:07.310 --> 00:16:09.040
Because a lot of
engineers, we like

00:16:09.040 --> 00:16:10.760
working on the new shiny tool.

00:16:10.760 --> 00:16:12.600
We want to be the author
of some new system.

00:16:12.600 --> 00:16:15.610
We want to build this
new data storage system

00:16:15.610 --> 00:16:17.470
and be the author of that.

00:16:17.470 --> 00:16:20.880
When in reality, even
more mundane tasks,

00:16:20.880 --> 00:16:23.660
such as investing in tools and
investing in your own iteration

00:16:23.660 --> 00:16:29.450
speed, can be extremely high
leverage and have huge payoffs.

00:16:29.450 --> 00:16:33.270
This is sort of the reason why
a lot of big companies, Google,

00:16:33.270 --> 00:16:35.780
Facebook, Twitter,
LinkedIn, Dropbox,

00:16:35.780 --> 00:16:39.720
they all have teams the
focus on development tools.

00:16:39.720 --> 00:16:43.025
Because if you can decrease
bill times by, say,

00:16:43.025 --> 00:16:45.550
even one minute per day
and engineers are building,

00:16:45.550 --> 00:16:49.040
say, 10 times per day, and
you have 1,000 engineers,

00:16:49.040 --> 00:16:52.760
that's a one engineering
month saved per day.

00:16:52.760 --> 00:16:55.320
I remember when I joined
Google back in 2006

00:16:55.320 --> 00:16:58.760
and I was compiling in a Google
web server on search quality

00:16:58.760 --> 00:17:00.110
team.

00:17:00.110 --> 00:17:02.720
It was something that you kicked
off and then you went home

00:17:02.720 --> 00:17:04.390
and it compiled
itself overnight.

00:17:04.390 --> 00:17:06.560
That's how long it took.

00:17:06.560 --> 00:17:08.770
And by the time I
left in 2008, sort

00:17:08.770 --> 00:17:11.869
of when Blaze was getting
introduced, bill times I think

00:17:11.869 --> 00:17:13.970
dropped to around 20 minutes.

00:17:13.970 --> 00:17:15.430
And that was huge.

00:17:15.430 --> 00:17:17.930
I'm sure it's probably dropped
down even further since then.

00:17:17.930 --> 00:17:19.720
I'm not sure how fast it is now.

00:17:19.720 --> 00:17:24.280
I see I see some
shakes of the head.

00:17:24.280 --> 00:17:26.974
But all of these
investments in bill times

00:17:26.974 --> 00:17:28.140
are extremely high leverage.

00:17:28.140 --> 00:17:32.970
Because it means that you
can, instead of doing things

00:17:32.970 --> 00:17:34.820
in large batches,
you're doing them

00:17:34.820 --> 00:17:37.300
more iteratively over time.

00:17:37.300 --> 00:17:38.830
One of the proudest
accomplishments

00:17:38.830 --> 00:17:40.350
that we did while
at Quora was we

00:17:40.350 --> 00:17:41.850
had a system where
we could actually

00:17:41.850 --> 00:17:45.150
deploy code production
40 to 50 times per day.

00:17:45.150 --> 00:17:48.910
For every time an engineer
pushed to commit to get,

00:17:48.910 --> 00:17:52.175
it would automatically kick off
a suite of a few thousand unit

00:17:52.175 --> 00:17:53.270
tests.

00:17:53.270 --> 00:17:55.820
And if all those tests
passed, that code

00:17:55.820 --> 00:17:58.020
would then ship to a canary
machine, that would then

00:17:58.020 --> 00:17:59.920
run another battery of tests.

00:17:59.920 --> 00:18:02.460
And if that passed, the code
would be automatically shipped

00:18:02.460 --> 00:18:04.470
to all our webmachines
production.

00:18:04.470 --> 00:18:08.480
And that entire process only
took six or seven minutes,

00:18:08.480 --> 00:18:11.080
which meant that we could push
code production 40, 50 times

00:18:11.080 --> 00:18:12.230
a day.

00:18:12.230 --> 00:18:14.660
And that changed
deployments which,

00:18:14.660 --> 00:18:17.530
from any team to
this one off event

00:18:17.530 --> 00:18:20.580
that they have to do maybe every
week, maybe even every day,

00:18:20.580 --> 00:18:23.680
to something that was a very
normal part of a development.

00:18:23.680 --> 00:18:28.930
And it meant if we had
a question, how often is

00:18:28.930 --> 00:18:33.120
this feature that's on our
web page actually being used,

00:18:33.120 --> 00:18:36.260
it means that an engineer could
just add a simple log line,

00:18:36.260 --> 00:18:38.480
push that code to production,
and then start getting

00:18:38.480 --> 00:18:41.045
some data back within minutes.

00:18:41.045 --> 00:18:42.420
So, a lot of these
questions that

00:18:42.420 --> 00:18:45.180
are impossible with
a slower workflow, we

00:18:45.180 --> 00:18:46.820
were able to do
because of a system

00:18:46.820 --> 00:18:50.390
of continuous deployment.

00:18:50.390 --> 00:18:52.790
And you might wonder, when
does it make sense for us

00:18:52.790 --> 00:18:55.560
to invest in tools?

00:18:55.560 --> 00:18:58.810
And a good rule of thumb that
I got from Raffi Krikorian,

00:18:58.810 --> 00:19:01.730
who grew the infrastructure
team at Twitter

00:19:01.730 --> 00:19:05.780
from about 50 engineers
to 450 engineers,

00:19:05.780 --> 00:19:08.630
used to tell his team that
if you have to do something

00:19:08.630 --> 00:19:11.395
more than twice manually,
you should build

00:19:11.395 --> 00:19:12.919
a tool for the third time.

00:19:12.919 --> 00:19:14.710
And that's a good rule
of thumb, because we

00:19:14.710 --> 00:19:18.050
tend to underestimate how
often we're going to need

00:19:18.050 --> 00:19:20.900
to manually do certain tasks.

00:19:20.900 --> 00:19:23.580
Sometimes we get started,
we do things manually

00:19:23.580 --> 00:19:25.730
because it seems to be simpler.

00:19:25.730 --> 00:19:28.010
And then requirements
change, or we mess up

00:19:28.010 --> 00:19:29.920
during our manual steps.

00:19:29.920 --> 00:19:31.770
And then we end up
spending a lot more time

00:19:31.770 --> 00:19:33.900
than we actually could have.

00:19:33.900 --> 00:19:37.310
Instead, if we had invested in
tooling and automation sooner,

00:19:37.310 --> 00:19:41.490
we could save ourselves
a lot of time.

00:19:41.490 --> 00:19:47.070
And so, when you're
working on a project,

00:19:47.070 --> 00:19:49.690
you should also always ask
yourself, what are the events?

00:19:49.690 --> 00:19:52.890
What are the bottlenecks that
you face during development?

00:19:52.890 --> 00:19:54.690
How can you speed
those things up?

00:19:54.690 --> 00:19:56.550
Because all of
those improvements

00:19:56.550 --> 00:19:58.590
will sort of
compound in how fast

00:19:58.590 --> 00:20:01.390
or how quickly you
can get things done.

00:20:01.390 --> 00:20:04.700
You can also ask same question
when you're debugging, as well.

00:20:04.700 --> 00:20:06.620
Say you're building
an Android app

00:20:06.620 --> 00:20:09.670
and you're debugging
this photo sharing

00:20:09.670 --> 00:20:12.570
flow that's a few clicks
away from the home screen.

00:20:12.570 --> 00:20:16.520
Could you wire up your flow so
that when you start the app,

00:20:16.520 --> 00:20:18.810
you land right on that screen?

00:20:18.810 --> 00:20:22.156
Simple tweaks like to optimize
your own debugging flow

00:20:22.156 --> 00:20:23.530
to really optimize
your iteration

00:20:23.530 --> 00:20:27.640
speed can have a huge difference
in the long run in how

00:20:27.640 --> 00:20:31.380
productive and effective you are

00:20:31.380 --> 00:20:35.510
I've talked a lot about how
to get things done quickly.

00:20:35.510 --> 00:20:38.740
But another important
question to think about

00:20:38.740 --> 00:20:40.785
is not only how to get
things done quickly,

00:20:40.785 --> 00:20:43.810
but how to get the right
things done quickly.

00:20:43.810 --> 00:20:48.100
And so, that's another
key high leverage activity

00:20:48.100 --> 00:20:51.770
is actually validating
your ideas aggressively

00:20:51.770 --> 00:20:53.340
and iteratively.

00:20:53.340 --> 00:20:55.980
And a good example of how to
do this right as well as how

00:20:55.980 --> 00:20:59.220
to do this wrong
actually comes from Etsy.

00:20:59.220 --> 00:21:03.750
Etsy is a company that
sells handmade goods online,

00:21:03.750 --> 00:21:08.560
and last year they hit
almost $2 billion in revenue.

00:21:08.560 --> 00:21:12.437
And they had this
one project where

00:21:12.437 --> 00:21:14.270
they were trying to
build infinite scrolling

00:21:14.270 --> 00:21:15.310
on the results page.

00:21:15.310 --> 00:21:17.190
So, when you type
a query at Etsy,

00:21:17.190 --> 00:21:19.420
you see a bunch of
product products.

00:21:19.420 --> 00:21:22.840
And the product page is paged.

00:21:22.840 --> 00:21:24.610
And they were
exploring, maybe we

00:21:24.610 --> 00:21:26.690
should add infinite scrolling.

00:21:26.690 --> 00:21:30.870
Similar to how on Google Images,
if you scroll down on the image

00:21:30.870 --> 00:21:34.880
search page, results just sort
of keep loading onto that page.

00:21:34.880 --> 00:21:37.600
And so they'd spent many
months building this out,

00:21:37.600 --> 00:21:40.450
ironing bugs, and just when
they were about to ship,

00:21:40.450 --> 00:21:44.080
they decide, we should
probably test this.

00:21:44.080 --> 00:21:46.100
And so, they ran an AB test.

00:21:46.100 --> 00:21:48.570
And they found that click
through rates actually dropped

00:21:48.570 --> 00:21:50.170
by 10%.

00:21:50.170 --> 00:21:53.779
Purchase rates actually
dropped by nearly 25%.

00:21:53.779 --> 00:21:56.070
So, there was no way they
were going to actually launch

00:21:56.070 --> 00:21:58.680
this product.

00:21:58.680 --> 00:22:00.240
Then they actually
spent some time

00:22:00.240 --> 00:22:03.260
trying to figure out
why this wasn't working.

00:22:03.260 --> 00:22:08.050
And they realized that
for this product change

00:22:08.050 --> 00:22:11.500
to actually work, it sort of
relies on two assumptions.

00:22:11.500 --> 00:22:15.770
One is that if we show
more results to users,

00:22:15.770 --> 00:22:18.140
they'll be more likely
to buy products.

00:22:18.140 --> 00:22:20.690
And the second is that
if we show results

00:22:20.690 --> 00:22:24.830
faster to the users so that they
don't actually have to page,

00:22:24.830 --> 00:22:28.450
they would also
choose to buy more.

00:22:28.450 --> 00:22:31.100
But the key insight is that
each of these assumptions

00:22:31.100 --> 00:22:35.230
could have been independently
validated with much less work.

00:22:35.230 --> 00:22:39.167
If the assumption is that if
we show more results to users,

00:22:39.167 --> 00:22:41.250
they will buy more, they
could have just increased

00:22:41.250 --> 00:22:42.632
the page size.

00:22:42.632 --> 00:22:44.590
And in fact, when they
did that after the fact,

00:22:44.590 --> 00:22:49.470
they found that that really
had no impact on purchases.

00:22:49.470 --> 00:22:52.360
An assumption that
maybe a faster page

00:22:52.360 --> 00:22:54.810
will lead to more purchases,
that's something a little bit

00:22:54.810 --> 00:22:55.819
harder to test.

00:22:55.819 --> 00:22:57.110
But they got a little creative.

00:22:57.110 --> 00:22:59.770
They artificially
added some latency

00:22:59.770 --> 00:23:03.370
to some fraction of users,
made the page slower.

00:23:03.370 --> 00:23:05.310
And when they tried
that test, they

00:23:05.310 --> 00:23:08.470
found out that also didn't
have much of an impact.

00:23:08.470 --> 00:23:12.200
Each of those tests
were much easier to run.

00:23:12.200 --> 00:23:14.530
Very little engineering
effort required.

00:23:14.530 --> 00:23:16.940
And if they had run
those tests first,

00:23:16.940 --> 00:23:19.150
then they would have realized
their basic assumptions

00:23:19.150 --> 00:23:24.070
behind infinite scrolling didn't
even prove out in the wild.

00:23:24.070 --> 00:23:26.500
And so, there was no real
reason to actually invest all

00:23:26.500 --> 00:23:30.524
that time and effort to
build infinite scrolling.

00:23:30.524 --> 00:23:32.190
They sort of took
these lessons to heart

00:23:32.190 --> 00:23:34.106
when they worked on a
different project, which

00:23:34.106 --> 00:23:37.390
was rebuilding the product
page when you click through

00:23:37.390 --> 00:23:39.230
on a search result.

00:23:39.230 --> 00:23:41.620
They actually went through
14 different iterations

00:23:41.620 --> 00:23:44.410
of this page when they
were redesigning it.

00:23:44.410 --> 00:23:48.450
And they broke down
the redesign project

00:23:48.450 --> 00:23:51.500
into a number of different
testable assumptions.

00:23:51.500 --> 00:23:56.040
Does showing more related
products on the page actually

00:23:56.040 --> 00:23:57.860
decrease bounce rate?

00:23:57.860 --> 00:24:02.650
Does showing the price
in your native currency,

00:24:02.650 --> 00:24:04.820
does that increase purchases?

00:24:04.820 --> 00:24:07.542
Does showing a default
shipping option

00:24:07.542 --> 00:24:09.000
and the price of
a default shipping

00:24:09.000 --> 00:24:10.500
option make a difference?

00:24:10.500 --> 00:24:14.042
Does swapping sides of the
page make a difference?

00:24:14.042 --> 00:24:16.000
They broke down each of
these assumptions, each

00:24:16.000 --> 00:24:18.550
of these hypotheses,
and tested each one.

00:24:18.550 --> 00:24:21.430
And there were a bunch
of ones that didn't work.

00:24:21.430 --> 00:24:23.650
They failed.

00:24:23.650 --> 00:24:26.830
But, all of the information that
they collected from these 14

00:24:26.830 --> 00:24:29.350
different tests helped
them build confidence

00:24:29.350 --> 00:24:32.450
in theories about which
changes did matter,

00:24:32.450 --> 00:24:34.790
which ones did make an impact.

00:24:34.790 --> 00:24:37.885
And so with that, they were
able to launch a redesign

00:24:37.885 --> 00:24:39.510
that when I talked
to Mark Hedlund, who

00:24:39.510 --> 00:24:43.510
was the former VP of
product engineering at Etsy,

00:24:43.510 --> 00:24:45.660
he said that this was
actually the single largest

00:24:45.660 --> 00:24:48.050
experimental win
in Etsy's history.

00:24:48.050 --> 00:24:51.340
It was the most
successful project

00:24:51.340 --> 00:24:54.490
that they launched in terms
of purchasing performance.

00:24:54.490 --> 00:24:57.970
And it was only
possible because they

00:24:57.970 --> 00:25:00.320
learned that experiment
driven product design

00:25:00.320 --> 00:25:02.810
is a very powerful tool.

00:25:02.810 --> 00:25:04.567
Now, this is something
that I think,

00:25:04.567 --> 00:25:06.150
at least when I was
in search quality,

00:25:06.150 --> 00:25:07.410
Google did pretty well.

00:25:07.410 --> 00:25:09.260
They run a lot of AB tests.

00:25:09.260 --> 00:25:11.460
They sort of validate
a lot of changes

00:25:11.460 --> 00:25:16.020
to prove these changes are
actually improving searches

00:25:16.020 --> 00:25:18.170
and improving the bottom line.

00:25:18.170 --> 00:25:19.970
But another take
away from Etsy is

00:25:19.970 --> 00:25:23.310
that incrementally
validating your assumptions

00:25:23.310 --> 00:25:25.420
is a very high
leverage technique.

00:25:25.420 --> 00:25:29.330
If you can break down a large
problem into smaller testable

00:25:29.330 --> 00:25:32.400
hypotheses, and then
evaluate each one,

00:25:32.400 --> 00:25:35.530
you can really build
confidence in what works

00:25:35.530 --> 00:25:37.000
and what doesn't work.

00:25:37.000 --> 00:25:40.199
Or if a test proves that
your assumption is correct,

00:25:40.199 --> 00:25:42.740
then you have more confidence
that the path you're going down

00:25:42.740 --> 00:25:44.050
is the right path.

00:25:44.050 --> 00:25:46.580
If it proves your
assumption is incorrect,

00:25:46.580 --> 00:25:51.350
then that means you maybe need
to revise your project plan.

00:25:51.350 --> 00:25:56.480
At the very least, this could
save you months of effort.

00:25:56.480 --> 00:25:58.850
And in startups,
there is this idea

00:25:58.850 --> 00:26:01.870
of focusing on the
minimal viable product.

00:26:01.870 --> 00:26:04.881
What's the smallest
version of the product that

00:26:04.881 --> 00:26:07.130
takes the least amount of
effort to build that you can

00:26:07.130 --> 00:26:09.840
show to real users
and get feedback

00:26:09.840 --> 00:26:12.820
and validation that what you're
building, what you're designing

00:26:12.820 --> 00:26:14.750
is actually the
right thing to do?

00:26:14.750 --> 00:26:16.560
That's a very powerful idea.

00:26:16.560 --> 00:26:20.860
Now something, while
Google, especially search,

00:26:20.860 --> 00:26:23.030
it does a good job
with their AB testing,

00:26:23.030 --> 00:26:28.310
I think the idea of building
this minimal viable product

00:26:28.310 --> 00:26:30.780
is an idea that they can
definitely leverage more.

00:26:30.780 --> 00:26:34.760
Because a lot of
times at Google,

00:26:34.760 --> 00:26:37.200
we sort of build
products for speed.

00:26:37.200 --> 00:26:40.920
We optimize for performance,
we optimize for scale

00:26:40.920 --> 00:26:43.820
rather than really focusing
and asking a question.

00:26:43.820 --> 00:26:45.644
Like, is this product
actually the right

00:26:45.644 --> 00:26:47.060
thing to build in
the first place?

00:26:47.060 --> 00:26:49.720
Because it doesn't matter if
something is really performance

00:26:49.720 --> 00:26:52.410
if it's not the right thing
that users actually want.

00:26:55.060 --> 00:26:59.160
One of the good rules of thumb
that I got from Zach Brock,

00:26:59.160 --> 00:27:02.710
who was an engineer
manager at Square,

00:27:02.710 --> 00:27:06.480
is that he would constantly
ask his engineers, what's

00:27:06.480 --> 00:27:10.650
the scariest part of the
project that you're working on?

00:27:10.650 --> 00:27:14.020
That's the part of the most
unknowns, the most risks.

00:27:14.020 --> 00:27:16.670
That's the part you should
actually tackle first.

00:27:16.670 --> 00:27:19.210
Because you want to
reduce and tackle the risk

00:27:19.210 --> 00:27:23.950
head on so that if it proves
that these risky areas are

00:27:23.950 --> 00:27:27.670
there aren't doable or don't
impact your bottom line,

00:27:27.670 --> 00:27:31.280
you can cut your losses
short and move on.

00:27:31.280 --> 00:27:33.800
And so, when you're
working on projects,

00:27:33.800 --> 00:27:36.060
you should really
ask yourself, can you

00:27:36.060 --> 00:27:39.740
break this down into
smaller testable hypotheses?

00:27:39.740 --> 00:27:42.090
Can you use an inexpensive
test to validate

00:27:42.090 --> 00:27:45.220
that what you're doing
is the right thing?

00:27:45.220 --> 00:27:48.630
How might you expend 10%
of your effort upfront

00:27:48.630 --> 00:27:51.180
to validate that the
project you're working on

00:27:51.180 --> 00:27:52.680
will actually work?

00:27:52.680 --> 00:27:57.040
Because that 10% is a very
high leverage use of your time.

00:27:57.040 --> 00:27:59.750
It can save you months of
wasted effort further on.

00:28:02.280 --> 00:28:04.640
Validation definitely
is very important

00:28:04.640 --> 00:28:06.400
and can save you wasted effort.

00:28:06.400 --> 00:28:10.220
But another powerful technique,
another high leverage activity

00:28:10.220 --> 00:28:12.690
that can help you
reduce wasted effort,

00:28:12.690 --> 00:28:16.710
is this idea of minimizing
operational burden.

00:28:16.710 --> 00:28:21.600
A lot of times, we spend so much
time maintaining and operating

00:28:21.600 --> 00:28:23.850
our software that we
don't really have time

00:28:23.850 --> 00:28:25.992
to actually build new things.

00:28:29.850 --> 00:28:31.850
And if we can minimize
the operational burden

00:28:31.850 --> 00:28:34.630
that we actually have
on a day to day basis,

00:28:34.630 --> 00:28:38.234
we can spend a lot more time
actually focusing on impact.

00:28:38.234 --> 00:28:40.400
And a great story which
really illustrate this point

00:28:40.400 --> 00:28:42.320
comes from Instagram.

00:28:42.320 --> 00:28:45.340
When they were acquired
in 2012 by Facebook

00:28:45.340 --> 00:28:47.350
for a billion
dollars, they actually

00:28:47.350 --> 00:28:50.100
only had a team of 13 employees.

00:28:50.100 --> 00:28:54.125
And of those 13 employees, only
five of them were engineers.

00:28:54.125 --> 00:28:55.750
They had a really
small team supporting

00:28:55.750 --> 00:28:57.620
over 40 million users.

00:28:57.620 --> 00:29:00.440
So by any metric, this was
a pretty effective team.

00:29:03.540 --> 00:29:08.090
And I was curious, what was
it that allowed the Instagram

00:29:08.090 --> 00:29:10.690
team to be that effective?

00:29:10.690 --> 00:29:13.270
And so, I sat down with
Mike Krieger, the co-founder

00:29:13.270 --> 00:29:15.200
of Instagram, and I
asked him, was there

00:29:15.200 --> 00:29:17.300
any secret sauce to this?

00:29:17.300 --> 00:29:18.830
What was your key technique?

00:29:18.830 --> 00:29:22.840
And he said one of the most
important mantras that they

00:29:22.840 --> 00:29:25.860
had on Instagram was to
do the simple thing first.

00:29:25.860 --> 00:29:28.970
They actually had this
on posters in the office.

00:29:28.970 --> 00:29:30.890
During design
meetings, when someone

00:29:30.890 --> 00:29:33.840
was proposing a new
feature, they would actually

00:29:33.840 --> 00:29:36.380
challenge each other, is
this the simplest thing

00:29:36.380 --> 00:29:38.130
that we can do?

00:29:38.130 --> 00:29:42.540
If not, why are we adding
all this complexity?

00:29:42.540 --> 00:29:45.850
The key insight here was that
every feature they added,

00:29:45.850 --> 00:29:48.884
every system they added,
was another potential fire

00:29:48.884 --> 00:29:50.800
that they might have to
put out in the future.

00:29:50.800 --> 00:29:52.520
And with such a small
team, they couldn't

00:29:52.520 --> 00:29:55.950
afford to spend all that
time just putting out fires.

00:29:55.950 --> 00:29:58.030
And they were very
aggressive and very stringent

00:29:58.030 --> 00:30:00.720
about cutting sources
of complexity.

00:30:00.720 --> 00:30:02.990
And this actually a
very common theme.

00:30:02.990 --> 00:30:05.620
And I mentioned in the beginning
of how I went around and asked

00:30:05.620 --> 00:30:07.960
a lot of leaders, what's the
most valuable lesson you've

00:30:07.960 --> 00:30:09.715
learned the past year?

00:30:09.715 --> 00:30:11.840
And it turns out that a
lot of engineering leaders,

00:30:11.840 --> 00:30:14.830
including Mike Curtis, who
is the head of engineering

00:30:14.830 --> 00:30:17.830
at Airbnb, or Chris Lambert,
who's the CTO of Lyft,

00:30:17.830 --> 00:30:19.620
and a bunch of
other leaders, all

00:30:19.620 --> 00:30:24.130
said that they wished they
had made things simpler.

00:30:24.130 --> 00:30:26.240
They wish they hadn't
added so much complexity

00:30:26.240 --> 00:30:28.190
in the last year.

00:30:28.190 --> 00:30:30.750
And the reason why this
was such a common theme

00:30:30.750 --> 00:30:35.230
is because we often ignore
the hidden costs that

00:30:35.230 --> 00:30:38.020
are associated with complexity.

00:30:38.020 --> 00:30:40.020
When you introduce
sources of complexity,

00:30:40.020 --> 00:30:42.800
we're actually
introducing an ongoing tax

00:30:42.800 --> 00:30:47.250
that we have to pay as we
develop software in the future.

00:30:47.250 --> 00:30:49.710
And this tax actually comes
in a variety of forms.

00:30:49.710 --> 00:30:53.230
On the most basic level,
there's code complexity.

00:30:53.230 --> 00:30:55.730
That when we're dealing
with a very complex code,

00:30:55.730 --> 00:30:57.490
it's hard to ramp up on.

00:30:57.490 --> 00:30:59.310
It's hard to understand.

00:30:59.310 --> 00:31:01.042
It's hard to reason about.

00:31:01.042 --> 00:31:03.000
And as engineers, sometimes
we see complex code

00:31:03.000 --> 00:31:04.700
and then we tiptoe around it.

00:31:04.700 --> 00:31:07.130
We decide, we're not going
to touch this code base

00:31:07.130 --> 00:31:08.980
because it's a little hairy.

00:31:08.980 --> 00:31:11.710
And then, we miss out on
opportunities to actually build

00:31:11.710 --> 00:31:13.750
things that might be impactful.

00:31:13.750 --> 00:31:16.010
Or we do things in
a roundabout way

00:31:16.010 --> 00:31:20.640
just so that we can avoid
the complex piece of code.

00:31:20.640 --> 00:31:23.570
Besides code complexity,
there's also system complexity.

00:31:23.570 --> 00:31:27.170
So, how many moving pieces are
there actually in your system?

00:31:27.170 --> 00:31:29.890
I was teaching a
workshop at Pinterest.

00:31:29.890 --> 00:31:33.580
It was a five week
workshop for engineers

00:31:33.580 --> 00:31:35.100
on how to be more effective.

00:31:35.100 --> 00:31:37.620
And one of the stories
I gathered from them

00:31:37.620 --> 00:31:42.000
was that back in 2011 when
they were scaling their site,

00:31:42.000 --> 00:31:44.910
they actually had six
different data storage systems.

00:31:44.910 --> 00:31:48.440
They were running Cassandra,
MySQL, Membase, Memcached,

00:31:48.440 --> 00:31:51.640
MongoDB, and Redis.

00:31:51.640 --> 00:31:54.160
And they actually only had
a team of three back end

00:31:54.160 --> 00:31:55.450
engineers.

00:31:55.450 --> 00:31:56.130
That's insane.

00:31:56.130 --> 00:32:00.940
There were, like, two
systems per engineer.

00:32:00.940 --> 00:32:05.100
Each system on paper
set claims that they

00:32:05.100 --> 00:32:09.070
would solve some scalability
problem that they were facing.

00:32:09.070 --> 00:32:14.020
But in reality, each system just
failed in its own special way.

00:32:14.020 --> 00:32:17.350
It was just another fire
that they had to set out.

00:32:17.350 --> 00:32:21.200
And so, when you
make choices that

00:32:21.200 --> 00:32:23.480
really sort of fragment
our infrastructure,

00:32:23.480 --> 00:32:26.920
that has a lot of ongoing
taxes that we have to pay.

00:32:26.920 --> 00:32:29.040
It means that we're
spending-- we're thus

00:32:29.040 --> 00:32:32.090
able to pull together
resources to really strengthen

00:32:32.090 --> 00:32:36.050
libraries and abstractions
for a particular system.

00:32:36.050 --> 00:32:38.830
It means we have to take time
to understand the failure

00:32:38.830 --> 00:32:41.800
modes of each system
that we introduce.

00:32:41.800 --> 00:32:44.650
It means that every new
engineer who joins a team

00:32:44.650 --> 00:32:48.060
not to ramp up on one
additional system.

00:32:48.060 --> 00:32:51.260
And so, it took a
while, but in the end,

00:32:51.260 --> 00:32:54.430
Pinterest finally learned
that it's much simpler

00:32:54.430 --> 00:32:56.800
to have a system, a
scheme, where you can just

00:32:56.800 --> 00:32:58.480
add more machines to scale.

00:32:58.480 --> 00:33:00.980
And so, they cut out a
lot of the other systems

00:33:00.980 --> 00:33:03.010
that it didn't really
need and ended up

00:33:03.010 --> 00:33:07.869
with a much simpler system that
they could actually maintain.

00:33:07.869 --> 00:33:09.910
So, we've talked about
code complexity and system

00:33:09.910 --> 00:33:11.090
complexity.

00:33:11.090 --> 00:33:13.750
Another such complexity
is product complexity.

00:33:13.750 --> 00:33:16.970
Now, that comes when there
isn't a clear vision for where

00:33:16.970 --> 00:33:21.900
the product is going or there
isn't enough product focus.

00:33:21.900 --> 00:33:24.197
Product complexity leads
a lot to code complexity

00:33:24.197 --> 00:33:25.780
and simple complexity
because it means

00:33:25.780 --> 00:33:29.080
you have to write more code
and build more systems in order

00:33:29.080 --> 00:33:31.890
to maintain and support the
features that you're building.

00:33:31.890 --> 00:33:34.980
And when you have a wide
surface area in your product,

00:33:34.980 --> 00:33:36.715
every new feature
that you want to add

00:33:36.715 --> 00:33:38.090
becomes harder to
add because you

00:33:38.090 --> 00:33:41.540
think about how does this fit in
to the existing context of all

00:33:41.540 --> 00:33:43.160
the other features.

00:33:43.160 --> 00:33:45.530
There's more code branches
you have to look over.

00:33:45.530 --> 00:33:47.765
There's more issues and
bugs that are filed.

00:33:47.765 --> 00:33:50.140
There's more context switching
that you have to deal with

00:33:50.140 --> 00:33:52.832
to go back and forth
from feature to feature.

00:33:52.832 --> 00:33:55.040
And all of the time that
you spend doing this context

00:33:55.040 --> 00:33:56.740
switching is time
that you're not

00:33:56.740 --> 00:33:59.020
investing in
abstractions, [INAUDIBLE]

00:33:59.020 --> 00:34:00.850
paying technical debt.

00:34:00.850 --> 00:34:05.540
And so, those are all things
that end up slowing you down.

00:34:05.540 --> 00:34:07.150
[INAUDIBLE] last
soft of complexity,

00:34:07.150 --> 00:34:08.554
organizational complexity.

00:34:08.554 --> 00:34:10.929
Because when you have all of
this complexity in your code

00:34:10.929 --> 00:34:12.739
and your systems
and your product,

00:34:12.739 --> 00:34:15.750
it means that you need a
larger team to actually deal

00:34:15.750 --> 00:34:17.239
and manage with them all.

00:34:17.239 --> 00:34:18.780
And that means you
have to spend more

00:34:18.780 --> 00:34:20.480
time hiring and interviewing.

00:34:20.480 --> 00:34:23.330
You spend more time training,
onboarding, mentoring

00:34:23.330 --> 00:34:24.850
new engineers.

00:34:24.850 --> 00:34:28.150
And so, there's another tax
on the organization as well.

00:34:28.150 --> 00:34:29.650
Now alternatively,
some teams decide

00:34:29.650 --> 00:34:32.050
OK, let's just split our
team to smaller teams

00:34:32.050 --> 00:34:35.870
and each team sort of
manage a separate component.

00:34:35.870 --> 00:34:39.030
Or maybe even have a one
person team for each component.

00:34:39.030 --> 00:34:41.830
And there's cost
for that as well.

00:34:41.830 --> 00:34:43.920
It's less motivating
to work on your own.

00:34:43.920 --> 00:34:48.150
If you get stuck, it can
become more demotivating.

00:34:48.150 --> 00:34:50.080
The quality can go down
because it's harder

00:34:50.080 --> 00:34:51.610
to get feedback
from your coworkers

00:34:51.610 --> 00:34:54.170
if you don't the
same shared context.

00:34:54.170 --> 00:34:56.340
And your bus factor
also goes down.

00:34:56.340 --> 00:34:58.200
I remember when I was
working at Ooyala,

00:34:58.200 --> 00:35:00.100
there was one
point in time where

00:35:00.100 --> 00:35:03.420
I was the only person who was
knowledgeable about this piece

00:35:03.420 --> 00:35:05.420
of software called
the logs processor.

00:35:05.420 --> 00:35:07.910
So, the logs processor was
responsible for processing

00:35:07.910 --> 00:35:11.034
all of our customer's data
and then produce the reports

00:35:11.034 --> 00:35:13.200
that they could actually
read and sort of understand

00:35:13.200 --> 00:35:15.970
what their viewers were doing.

00:35:15.970 --> 00:35:19.780
And I was taking a much needed
vacation down in Hawaii.

00:35:19.780 --> 00:35:22.740
I was hiking around one
of the volcanoes there.

00:35:22.740 --> 00:35:27.020
And then, I suddenly get a
text, and it's from the CTO.

00:35:27.020 --> 00:35:29.862
And it says, logs
processor is down.

00:35:29.862 --> 00:35:32.440
I said, well that sucks.

00:35:32.440 --> 00:35:35.710
Unfortunately at that
time, I was the only person

00:35:35.710 --> 00:35:37.560
who knew how to fix it.

00:35:37.560 --> 00:35:40.690
And also unfortunately,
there's no Wifi in volcanoes.

00:35:40.690 --> 00:35:42.660
And so, that wasn't
a great situation.

00:35:42.660 --> 00:35:45.810
It was bad for me because
my vacation was interrupted.

00:35:45.810 --> 00:35:48.675
It was bad for the team
because they depended on me.

00:35:48.675 --> 00:35:51.900
And it was bad for our
customers because they couldn't

00:35:51.900 --> 00:35:54.220
get the reports and the
data that they needed

00:35:54.220 --> 00:35:56.710
to operate their business.

00:35:56.710 --> 00:36:00.297
And so, there are all
these costs of complexity

00:36:00.297 --> 00:36:01.380
on these different levels.

00:36:01.380 --> 00:36:04.435
On the level of code, systems,
product, organization.

00:36:04.435 --> 00:36:08.740
And they all come
from this core thing

00:36:08.740 --> 00:36:12.740
where we added more
complexity than we needed.

00:36:12.740 --> 00:36:16.750
And so, that's why this
theme of asking ourselves

00:36:16.750 --> 00:36:20.450
what's the simplest solution to
this problem is so important.

00:36:20.450 --> 00:36:23.110
Because it allows us to
stem off this complexity

00:36:23.110 --> 00:36:26.280
explosion at its bud
at the very beginning.

00:36:29.260 --> 00:36:33.840
And so, minimizing operational
burden is super important.

00:36:33.840 --> 00:36:36.090
And the last high leverage
activity I like to close on

00:36:36.090 --> 00:36:39.730
is actually building a
great engineering culture.

00:36:39.730 --> 00:36:43.130
I mentioned earlier on how
I've spent a lot of time

00:36:43.130 --> 00:36:45.090
on engineering hiring
and recruiting.

00:36:45.090 --> 00:36:47.350
And one of the
questions that I'll

00:36:47.350 --> 00:36:49.760
ask a lot of the
candidates I interview

00:36:49.760 --> 00:36:52.970
is, what's one thing you like
and one thing you dislike

00:36:52.970 --> 00:36:57.836
about your previous company?

00:36:57.836 --> 00:36:59.210
And over time,
this really helped

00:36:59.210 --> 00:37:02.440
paint a picture of what
exactly attracts an engineer

00:37:02.440 --> 00:37:04.110
to a company.

00:37:04.110 --> 00:37:07.120
What are the things
that turn them off?

00:37:07.120 --> 00:37:09.090
And it should actually
come as no surprise

00:37:09.090 --> 00:37:14.990
that engineers, they like to
work in environments where

00:37:14.990 --> 00:37:17.386
they can focus on high
leverage activities.

00:37:17.386 --> 00:37:18.760
They want to work
in environments

00:37:18.760 --> 00:37:22.650
where there's a chance to focus
on and optimize on learning.

00:37:22.650 --> 00:37:24.950
They want to work at
places where everyone

00:37:24.950 --> 00:37:27.430
is very productive and
getting a lot of things done,

00:37:27.430 --> 00:37:30.310
and there's good tooling
and good iteration speed.

00:37:30.310 --> 00:37:33.650
They want to work at places
where products aren't going

00:37:33.650 --> 00:37:37.600
to waste because assumptions
and hypotheses weren't

00:37:37.600 --> 00:37:38.856
being tested earlier on.

00:37:38.856 --> 00:37:40.980
They want to work at places
where they can actually

00:37:40.980 --> 00:37:44.730
build new features as opposed
to just maintain and pay off

00:37:44.730 --> 00:37:49.210
taxes for old existing ones.

00:37:49.210 --> 00:37:51.470
Now, Google is a
sort of great place

00:37:51.470 --> 00:37:55.332
in that there's a very strong
sense of engineering culture.

00:37:55.332 --> 00:37:57.790
But this is also something that
you can focus on your team,

00:37:57.790 --> 00:37:59.620
as well.

00:37:59.620 --> 00:38:04.210
On a team level,
you can really ask,

00:38:04.210 --> 00:38:06.600
what are the highest
leverage activities

00:38:06.600 --> 00:38:11.120
that you can start working on?

00:38:11.120 --> 00:38:14.790
You can think about how can
you invest in your own learning

00:38:14.790 --> 00:38:16.620
and in your own
growth to really sort

00:38:16.620 --> 00:38:19.460
of further your own career?

00:38:19.460 --> 00:38:22.800
You can think about
what tools can you build

00:38:22.800 --> 00:38:26.150
or what workflows can you
improve for both yourself

00:38:26.150 --> 00:38:30.157
and for your team to really
improve your iteration speed?

00:38:30.157 --> 00:38:31.990
Or think about a project
that you're working

00:38:31.990 --> 00:38:35.952
on that's a multimonth project.

00:38:35.952 --> 00:38:37.660
Are there ways that
you can break it down

00:38:37.660 --> 00:38:41.020
into testable hypotheses that
you can validate to make sure

00:38:41.020 --> 00:38:44.230
that you're actually building
the right thing for customers,

00:38:44.230 --> 00:38:48.920
for users, or other
members of the team?

00:38:48.920 --> 00:38:50.800
Or think about if you're
working on something

00:38:50.800 --> 00:38:53.140
that seems a little
bit too complex,

00:38:53.140 --> 00:38:56.400
is there a way to
actually make it simpler

00:38:56.400 --> 00:39:03.150
and pay off these future
taxes on complexity?

00:39:03.150 --> 00:39:06.700
Or think about, how can you
improve the engineering culture

00:39:06.700 --> 00:39:09.990
in your own team so that new
engineers who join the team

00:39:09.990 --> 00:39:11.240
can ramp up much more quickly?

00:39:14.030 --> 00:39:16.987
All of those high
leverage activities

00:39:16.987 --> 00:39:18.570
will make us more
effective engineers.

00:39:21.190 --> 00:39:24.646
I'll be happy to do some Q&amp;A.
Thank you all for coming.

00:39:24.646 --> 00:39:26.526
[APPLAUSE]

00:39:29.340 --> 00:39:31.360
I also a few limited
copies of books

00:39:31.360 --> 00:39:32.920
that we're going to hand out.

00:39:32.920 --> 00:39:35.770
May be Cindy or [? Chang ?] can
sort of hand them out as people

00:39:35.770 --> 00:39:36.780
ask questions.

00:39:36.780 --> 00:39:38.340
AUDIENCE: Unit tests.

00:39:38.340 --> 00:39:40.160
I kind of read in your
book and it kind of

00:39:40.160 --> 00:39:44.120
presented unit tests as a high
leverage kind of activity.

00:39:44.120 --> 00:39:46.097
But at the same time,
kind of like intuitively

00:39:46.097 --> 00:39:47.680
when I think about
writing unit tests,

00:39:47.680 --> 00:39:49.540
I feel like it's kind of slow.

00:39:49.540 --> 00:39:52.150
I got to write all these
to cover all this code.

00:39:52.150 --> 00:39:55.500
And if I want to refactor it,
I got to change this unit test.

00:39:55.500 --> 00:39:58.056
So, iteration speed
kind of slows down.

00:39:58.056 --> 00:39:59.430
Maybe you could
talk a little bit

00:39:59.430 --> 00:40:02.500
about exactly why
unity tests are really

00:40:02.500 --> 00:40:05.632
high leverage in spite of that
kind of feeling that I get?

00:40:05.632 --> 00:40:06.340
EDMOND LAU: Sure.

00:40:06.340 --> 00:40:08.210
Great question, [INAUDIBLE].

00:40:08.210 --> 00:40:13.670
So the question is, how do
you reason about unit tests

00:40:13.670 --> 00:40:15.080
with this framework of leverage?

00:40:15.080 --> 00:40:19.680
And really, I think
it's important to not be

00:40:19.680 --> 00:40:21.070
religious about unit tests.

00:40:21.070 --> 00:40:24.320
I think there are some
teams that focus on, OK, we

00:40:24.320 --> 00:40:27.270
need 100% coverage of our code.

00:40:27.270 --> 00:40:31.580
And I don't think that's
necessarily the best approach.

00:40:31.580 --> 00:40:35.322
It's a lot better think
about which types of tests

00:40:35.322 --> 00:40:36.280
would be high leverage?

00:40:36.280 --> 00:40:39.160
Which types of tests would
be easy to write, and yet

00:40:39.160 --> 00:40:40.890
pay off high rewards?

00:40:40.890 --> 00:40:42.870
And the area of
code bases that tend

00:40:42.870 --> 00:40:46.670
to benefit from a
lot more tests are

00:40:46.670 --> 00:40:49.210
code paths that either
see a lot of traffic,

00:40:49.210 --> 00:40:53.790
code paths that a lot
of engineers touch,

00:40:53.790 --> 00:40:57.480
or code paths that
are a lot riskier.

00:40:57.480 --> 00:41:00.640
And so, if something were to go
wrong, data would get corrupted

00:41:00.640 --> 00:41:02.866
or the cost would be large.

00:41:02.866 --> 00:41:04.240
In each of those
areas, it can be

00:41:04.240 --> 00:41:07.460
really beneficial to actually
have a set of unit tests.

00:41:07.460 --> 00:41:10.590
On the other hand, if you
have a piece of code that's

00:41:10.590 --> 00:41:12.970
sort of off to the side,
not many people use it,

00:41:12.970 --> 00:41:17.030
it's not touched that
often, in those cases,

00:41:17.030 --> 00:41:20.890
writing a unit test there might
not have that strong a payoff.

00:41:20.890 --> 00:41:23.100
And so, I would sort of
break down unit tests

00:41:23.100 --> 00:41:28.750
into different priority buckets
and sort of focus on the ones

00:41:28.750 --> 00:41:31.320
where there is more
traffic, people

00:41:31.320 --> 00:41:34.080
are changing it a lot more
often, or it's a lot riskier.

00:41:34.080 --> 00:41:36.990
Because those will have sort
of a better rate of return

00:41:36.990 --> 00:41:37.896
on your time.

00:41:37.896 --> 00:41:40.270
AUDIENCE: So, it seems to me
you have a lot of experience

00:41:40.270 --> 00:41:42.650
with working with startups
and small companies.

00:41:42.650 --> 00:41:45.180
And I wonder actually
how does your advice

00:41:45.180 --> 00:41:48.656
translate to a bigger
organization such as Google?

00:41:48.656 --> 00:41:50.280
As you were talking
through strategies,

00:41:50.280 --> 00:41:52.446
I was thinking in my head
about a particular example

00:41:52.446 --> 00:41:54.130
that illustrates this strategy.

00:41:54.130 --> 00:41:56.375
And for a big
company, for example,

00:41:56.375 --> 00:42:00.250
for the recent problems,
organizational complexity kind

00:42:00.250 --> 00:42:04.330
of becomes unavoidable.

00:42:04.330 --> 00:42:07.570
So, it seems to me
from your presentation,

00:42:07.570 --> 00:42:09.140
you give advice
for the more bottom

00:42:09.140 --> 00:42:11.250
up approach, which
Google is a lot like.

00:42:11.250 --> 00:42:12.750
But for a big
organization, actually

00:42:12.750 --> 00:42:17.240
maybe some top down
strategies are needed as well.

00:42:17.240 --> 00:42:20.760
For example, for using product
complexity and organization

00:42:20.760 --> 00:42:21.750
complexity.

00:42:21.750 --> 00:42:23.330
Do you have any
thoughts on this?

00:42:23.330 --> 00:42:24.080
EDMOND LAU: Yeah.

00:42:24.080 --> 00:42:27.690
So the question, to
rephrase a little bit,

00:42:27.690 --> 00:42:32.180
is how do these ideas
of focusing on complex--

00:42:32.180 --> 00:42:34.520
or addressing organizational
complexity apply to larger

00:42:34.520 --> 00:42:36.240
companies like Google?

00:42:36.240 --> 00:42:42.250
And I think it's
a great question.

00:42:42.250 --> 00:42:44.590
I think some of
the clarity comes

00:42:44.590 --> 00:42:50.000
from-- some of the strategies
that an individual contributor,

00:42:50.000 --> 00:42:52.320
an individual engineer where
you can sort of influence

00:42:52.320 --> 00:42:54.750
the complexity in
large organizations

00:42:54.750 --> 00:42:57.700
comes I think a lot from data.

00:42:57.700 --> 00:43:00.350
So, I know Google is a
very data driven company.

00:43:00.350 --> 00:43:04.750
And a lot of times, if you
can ask the right questions

00:43:04.750 --> 00:43:08.600
and back that up with any data
from users, data from activity,

00:43:08.600 --> 00:43:13.119
you can sort shift organizations
or products in a way

00:43:13.119 --> 00:43:14.160
to sort of streamline it.

00:43:14.160 --> 00:43:18.666
So, if you see a source of
complexity from a feature

00:43:18.666 --> 00:43:23.180
that you gather data and it
seems like it's not actually

00:43:23.180 --> 00:43:25.110
being used, I think
that sort of forms

00:43:25.110 --> 00:43:27.900
a more compelling case
for decision makers

00:43:27.900 --> 00:43:33.610
that, maybe this is an area of
the product that isn't really

00:43:33.610 --> 00:43:37.470
worth all the engineering
effort that's being spent on it.

00:43:37.470 --> 00:43:39.890
And so, I think data
is was definitely

00:43:39.890 --> 00:43:43.640
one area that can be used
to amplify your voice when

00:43:43.640 --> 00:43:47.840
you are making arguments
of that nature.

00:43:47.840 --> 00:43:50.660
I think another way that
you can sort of reduce

00:43:50.660 --> 00:43:55.690
complexity in these situations
is to talk to the decision

00:43:55.690 --> 00:43:59.110
makers and get clarity
on what the focus

00:43:59.110 --> 00:44:00.370
and what the mission is.

00:44:00.370 --> 00:44:03.820
And make sure that the
projects that you work on

00:44:03.820 --> 00:44:07.690
are ones that sort of align with
that mission and that focus.

00:44:07.690 --> 00:44:10.630
Because if you're working on
something that seems peripheral

00:44:10.630 --> 00:44:12.970
to that mission or
focus, then you're

00:44:12.970 --> 00:44:16.530
sort of introducing additional
sources of complexity

00:44:16.530 --> 00:44:20.244
to that mission, that focus,
that the organization has.

00:44:20.244 --> 00:44:21.660
So, you want to
at least make sure

00:44:21.660 --> 00:44:26.586
that your own work is aligned
with the goals of the rest

00:44:26.586 --> 00:44:27.972
of the organization has.

00:44:27.972 --> 00:44:29.680
AUDIENCE: So, I have
two questions having

00:44:29.680 --> 00:44:32.440
to do with the transition
between from engineer

00:44:32.440 --> 00:44:34.300
to engineer manager,
so maybe they

00:44:34.300 --> 00:44:36.040
are within the
scope of the book.

00:44:36.040 --> 00:44:39.050
One is about mentoring, the
other is about technical data.

00:44:39.050 --> 00:44:41.720
So, first would be, what are
your thoughts on mentoring

00:44:41.720 --> 00:44:43.170
in terms of leverage?

00:44:43.170 --> 00:44:45.710
And the second is,
how do you recommend

00:44:45.710 --> 00:44:47.240
convincing an
engineering manager

00:44:47.240 --> 00:44:50.940
that the code complexity
in your project

00:44:50.940 --> 00:44:55.914
is worth taking a sprint break
from delivering to actually

00:44:55.914 --> 00:44:58.080
refactoring something thing
from scratch with a much

00:44:58.080 --> 00:45:00.217
simpler version?

00:45:00.217 --> 00:45:01.300
EDMOND LAU: Good question.

00:45:01.300 --> 00:45:02.280
So the two questions.

00:45:02.280 --> 00:45:05.530
One is, is mentoring a leverage?

00:45:05.530 --> 00:45:09.600
Two is how does refactoring
and paying off technical debts

00:45:09.600 --> 00:45:11.470
[INAUDIBLE] into this?

00:45:11.470 --> 00:45:13.470
So with regards to the
first one mentoring,

00:45:13.470 --> 00:45:16.284
mentoring is definitely I
think extremely high leverage.

00:45:16.284 --> 00:45:18.700
I spent a year and a half when
I was at Quora building out

00:45:18.700 --> 00:45:20.440
the onboarding and
mentoring programs

00:45:20.440 --> 00:45:25.080
because I realize that even if
an engineer would have spend

00:45:25.080 --> 00:45:29.910
and one hour a day
training a new hire,

00:45:29.910 --> 00:45:32.820
that only represents like
1%-- it's like 20 hours.

00:45:32.820 --> 00:45:38.320
That's like 1% of the new
hire's total hours in that year.

00:45:38.320 --> 00:45:41.570
And yet it can have a dramatic
output, a dramatic impact

00:45:41.570 --> 00:45:43.070
on that engineer's output.

00:45:43.070 --> 00:45:44.680
And so, it's super
valuable, I think,

00:45:44.680 --> 00:45:47.830
to invest money in training
your teammates and making sure

00:45:47.830 --> 00:45:51.450
that you tell them
and teach them

00:45:51.450 --> 00:45:54.356
what the best practices
are before they spend

00:45:54.356 --> 00:45:55.730
a lot of time
writing code that's

00:45:55.730 --> 00:45:57.146
not following the
right guidelines

00:45:57.146 --> 00:45:58.330
or following bad designs.

00:45:58.330 --> 00:46:00.257
And so, mentoring
is super valuable.

00:46:00.257 --> 00:46:01.840
And the second
question is, how do you

00:46:01.840 --> 00:46:05.280
convince engineering
managers to actually focus

00:46:05.280 --> 00:46:08.790
on or to budget time
for technical debt?

00:46:08.790 --> 00:46:12.490
And I think some of the best
strategies I've seen for teams

00:46:12.490 --> 00:46:15.982
is to rather than just
to have that conversation

00:46:15.982 --> 00:46:18.190
and spend all that energy
convincing your engineering

00:46:18.190 --> 00:46:20.050
manager after, like
say, every project,

00:46:20.050 --> 00:46:23.780
to instead sort
of just set a sort

00:46:23.780 --> 00:46:27.600
of consistent budget for that.

00:46:27.600 --> 00:46:31.220
So some teams, for
instance, every month

00:46:31.220 --> 00:46:35.440
will have one week where
it's code cleanup week.

00:46:35.440 --> 00:46:39.770
Or after every sprint, they'll
have some number of days

00:46:39.770 --> 00:46:43.050
where they spend refactoring
and cleaning code.

00:46:43.050 --> 00:46:45.680
That way, it's-- you don't
have to have this sort

00:46:45.680 --> 00:46:48.250
of conversation every
time after every project.

00:46:48.250 --> 00:46:52.130
And in addition, you can
use that time and prioritize

00:46:52.130 --> 00:46:54.860
which areas of the code
actually need to be refactored.

00:46:54.860 --> 00:46:56.980
Which areas of code
need to be cleaned up.

00:46:56.980 --> 00:46:58.810
And so, I think it's
more useful to have

00:46:58.810 --> 00:47:01.606
a more general
conversation where

00:47:01.606 --> 00:47:02.980
to hit the goals
for the sprints,

00:47:02.980 --> 00:47:04.310
we're going to make
some trade offs.

00:47:04.310 --> 00:47:06.130
Those trade offs will
lead to some debt.

00:47:06.130 --> 00:47:11.370
And we want to have a
consistent schedule where

00:47:11.370 --> 00:47:13.800
every so often, we budget
some number of days

00:47:13.800 --> 00:47:15.824
to basically clean up that debt.

00:47:15.824 --> 00:47:17.990
Yeah, it's a little tricky
if you're a new engineer.

00:47:17.990 --> 00:47:20.372
I would say that even
as a new engineer,

00:47:20.372 --> 00:47:22.330
the way that you should
approach technical debt

00:47:22.330 --> 00:47:27.210
is to focus on the areas
where reducing that debt

00:47:27.210 --> 00:47:29.000
allows you to be
more productive.

00:47:29.000 --> 00:47:31.280
So, if you're reducing
debt on errors of the code

00:47:31.280 --> 00:47:33.400
that you have to
deal with yourself,

00:47:33.400 --> 00:47:35.610
a lot of times
doing that making,

00:47:35.610 --> 00:47:38.265
that investment actually
pays off on your own project

00:47:38.265 --> 00:47:40.140
because you can get your
project done sooner.

00:47:40.140 --> 00:47:41.930
That's sort of, I
think, a very easy way

00:47:41.930 --> 00:47:46.310
to justify that time spent
because you can provably

00:47:46.310 --> 00:47:49.580
demonstrate that it actually
accelerates your own project

00:47:49.580 --> 00:47:50.340
speed.

00:47:50.340 --> 00:47:52.280
And so, I would start there.

00:47:52.280 --> 00:47:55.000
AUDIENCE: Some of
the advice mentioned

00:47:55.000 --> 00:47:58.570
tackling unknowns early in
the project lifecycle and some

00:47:58.570 --> 00:48:02.420
of the other advice was
focusing on the simple things.

00:48:02.420 --> 00:48:05.660
I wonder, do you have
any advice on how

00:48:05.660 --> 00:48:09.590
to identify unknowns that
could be removed by focusing

00:48:09.590 --> 00:48:12.460
on simplicity
versus unknowns that

00:48:12.460 --> 00:48:14.770
deserve their own investment
and investigation?

00:48:17.209 --> 00:48:19.000
EDMOND LAU: So, the
question is, how do you

00:48:19.000 --> 00:48:23.160
differentiate between unknowns
that need to be investigated

00:48:23.160 --> 00:48:26.419
and unknowns that you can
potentially cut by focusing

00:48:26.419 --> 00:48:27.335
on a simpler solution?

00:48:32.650 --> 00:48:35.126
I don't have a simple
answer for that but I

00:48:35.126 --> 00:48:41.480
think some of the
approaches that you can take

00:48:41.480 --> 00:48:46.190
is to think about what are your
goals for this certain project?

00:48:46.190 --> 00:48:50.300
And if you didn't have to
design a grand system, what

00:48:50.300 --> 00:48:52.030
would be the simplest
solution that you

00:48:52.030 --> 00:48:55.957
could think of that could
maybe hit most of those goals?

00:48:55.957 --> 00:48:57.540
Because a lot of
times, the complexity

00:48:57.540 --> 00:49:02.710
comes from trying to address
the last 10% or the last 5%.

00:49:02.710 --> 00:49:06.620
And if you would take a
more pragmatic approach,

00:49:06.620 --> 00:49:09.240
maybe you can ask
instead, what covers

00:49:09.240 --> 00:49:10.940
80% percent of the use cases?

00:49:10.940 --> 00:49:12.610
Can I come up with
a solution for that?

00:49:12.610 --> 00:49:14.810
And then maybe for
the other cases,

00:49:14.810 --> 00:49:18.320
can we do something different
rather than making the core

00:49:18.320 --> 00:49:20.490
solution more complicated?

00:49:20.490 --> 00:49:23.000
And I think that's
something that-- that's

00:49:23.000 --> 00:49:24.670
a theme that I've
definitely seen

00:49:24.670 --> 00:49:26.790
other teams do with success.

00:49:26.790 --> 00:49:28.990
Because then for the
most part, they're

00:49:28.990 --> 00:49:31.550
dealing with something that
is simple to reason about.

00:49:31.550 --> 00:49:33.320
AUDIENCE: So I have
a question, a lot

00:49:33.320 --> 00:49:37.150
of cases we have
dependencies on other teams.

00:49:37.150 --> 00:49:39.830
For example, my
team, sometimes I go,

00:49:39.830 --> 00:49:42.770
there's a problem in the
[INAUDIBLE] Bluetooth stack.

00:49:42.770 --> 00:49:46.170
Then so I have to make a
talk with them or either

00:49:46.170 --> 00:49:50.164
I'd have to look into the
Bluetooth stack by myself.

00:49:50.164 --> 00:49:52.330
Which sometimes can be
harder because I don't really

00:49:52.330 --> 00:49:58.620
have a lot of expertise
on the low level code.

00:49:58.620 --> 00:50:02.884
So, can you talk a
little your experience

00:50:02.884 --> 00:50:06.830
about how do you deal
with team dependencies?

00:50:06.830 --> 00:50:10.471
How to talk and actually
cooperate with other teams?

00:50:10.471 --> 00:50:12.220
EDMOND LAU: So the
question is, how do you

00:50:12.220 --> 00:50:15.170
deal with interteam dependencies
where you're sort of blocked

00:50:15.170 --> 00:50:18.330
on someone else?

00:50:18.330 --> 00:50:21.240
So a lot of times when you're
blocked on someone else

00:50:21.240 --> 00:50:24.380
and they're not actually
working on this thing

00:50:24.380 --> 00:50:27.360
that you really care about,
that happens because there's

00:50:27.360 --> 00:50:28.940
a misalignment in incentives.

00:50:28.940 --> 00:50:31.120
Somehow your team
has a certain goal.

00:50:31.120 --> 00:50:32.860
The other team has
a certain goal.

00:50:32.860 --> 00:50:37.200
And those goals, maybe our
priorities don't really align.

00:50:37.200 --> 00:50:42.290
And so, I think
structurally, a good approach

00:50:42.290 --> 00:50:47.030
is to try to make
those goals align.

00:50:47.030 --> 00:50:52.150
To see if you can agree
that a certain focus is

00:50:52.150 --> 00:50:55.380
a priority for both
teams this quarter

00:50:55.380 --> 00:50:57.769
and sort of agree
from that perspective.

00:50:57.769 --> 00:50:59.310
If they don't align,
I think at least

00:50:59.310 --> 00:51:02.500
having that conversation
tells you then

00:51:02.500 --> 00:51:05.050
where-- the part that
you're blocked on,

00:51:05.050 --> 00:51:06.881
where that fits on
their priority list.

00:51:06.881 --> 00:51:08.630
And so, at least having
that conversation,

00:51:08.630 --> 00:51:12.080
you know that maybe this is only
like a medium to low priority

00:51:12.080 --> 00:51:13.200
for the other team.

00:51:13.200 --> 00:51:16.320
At that point, then you can
make this decision of well,

00:51:16.320 --> 00:51:18.630
do I wait for them
to work on that?

00:51:18.630 --> 00:51:22.990
Or do I then-- maybe I ramp
up on that Bluetooth stack

00:51:22.990 --> 00:51:24.280
to actually make progress.

00:51:24.280 --> 00:51:25.780
But I think it
really sort of starts

00:51:25.780 --> 00:51:28.210
from that communication
about goals and incentives.

00:51:28.210 --> 00:51:31.340
If they align, then you can
sort of rely more on that team.

00:51:31.340 --> 00:51:35.390
If they don't align, you do
have to make that trade off of,

00:51:35.390 --> 00:51:38.590
maybe it's worth my time to
learn this Bluetooth stack

00:51:38.590 --> 00:51:40.840
so that I can get the thing
out the door sooner rather

00:51:40.840 --> 00:51:42.942
than waiting for them to
get to it on the bottom

00:51:42.942 --> 00:51:43.900
of their priority list.

00:51:46.644 --> 00:51:48.310
AUDIENCE: So, you
mentioned the 60 to 80

00:51:48.310 --> 00:51:50.500
hour work weeks not
being sustainable.

00:51:50.500 --> 00:51:53.520
I was wondering what your
typical work week is like?

00:51:53.520 --> 00:51:56.590
And if you ever work
weekends anymore?

00:51:56.590 --> 00:51:57.840
And you also mention learning.

00:51:57.840 --> 00:51:59.630
I was wondering how
much time per week

00:51:59.630 --> 00:52:01.060
do you set aside for learning.

00:52:01.060 --> 00:52:03.450
Is it an hour on the
weekend that you spend

00:52:03.450 --> 00:52:04.830
or is it five minutes a day?

00:52:04.830 --> 00:52:08.675
How do you incorporate that
into your daily routine?

00:52:08.675 --> 00:52:10.800
EDMOND LAU: So nowadays,
I still work at a startup.

00:52:10.800 --> 00:52:13.470
I work at a startup called Quip.

00:52:13.470 --> 00:52:15.610
And we actually work
very normal hours,

00:52:15.610 --> 00:52:18.670
so we work maybe 40 hour weeks.

00:52:18.670 --> 00:52:20.360
I do spend a lot
of personal time

00:52:20.360 --> 00:52:24.390
on just sort of investing
in things like the book

00:52:24.390 --> 00:52:28.740
or these talks or
other ways I can teach

00:52:28.740 --> 00:52:30.200
engineers to be more effective.

00:52:30.200 --> 00:52:34.400
Mainly because that's
something I'm excited to do.

00:52:34.400 --> 00:52:39.770
In terms of how much time
I invest in learning,

00:52:39.770 --> 00:52:42.550
I personally love
to read, so I end up

00:52:42.550 --> 00:52:44.330
just reading a lot of books.

00:52:44.330 --> 00:52:48.840
And I think books are a
really large source and wealth

00:52:48.840 --> 00:52:49.899
of information for me.

00:52:49.899 --> 00:52:51.690
I don't know how much
time I spend reading,

00:52:51.690 --> 00:52:53.606
but I [INAUDIBLE] spend
a lot of time reading.

00:52:53.606 --> 00:52:56.360
MALE SPEAKER: Thank you very
much for coming [INAUDIBLE].

00:52:56.360 --> 00:52:58.424
[APPAUSE]

