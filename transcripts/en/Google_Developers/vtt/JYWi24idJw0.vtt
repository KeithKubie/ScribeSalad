WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:06.890
&gt;&gt; RAMSDALE: All right, looks like we got
a packed house. This is fantastic. I've actually

00:00:06.890 --> 00:00:12.960
been to a lot of these conferences and I've
never seen one and with such enthusiasm and

00:00:12.960 --> 00:00:16.160
such attendance. So this is fantastic. I hope
you guys are having a good time so far. And

00:00:16.160 --> 00:00:20.070
I hope you're learning a lot about Google
Technologies. I noticed some faces from my

00:00:20.070 --> 00:00:24.820
earlier sessions, this is great. We'll just
carry on where we left off. For those of you

00:00:24.820 --> 00:00:27.989
who didn't attend the first session, if you're
interested, we're going to post these online.

00:00:27.989 --> 00:00:31.850
But the way I've got to lay it out, I think
will give you a good idea of what's going

00:00:31.850 --> 00:00:36.920
on even if you didn't attend the first session.
So, my name is Chris Ramsdale. I work in Developer

00:00:36.920 --> 00:00:42.710
Relations with the Google Web Toolkit Team.
And today, I'm going to start taking about

00:00:42.710 --> 00:00:47.600
how to build Business Apps with the Spring
Technologies that we integrate it with. So

00:00:47.600 --> 00:00:50.760
we started off in the keynote talking a little
bit about this today and I gave about a five

00:00:50.760 --> 00:00:53.289
minute overview. So, I'm going to dig a little
bit deeper in today, and then we're going

00:00:53.289 --> 00:01:01.649
to try to expand out on what it means to actually
build business applications. So a brief agenda,

00:01:01.649 --> 00:01:04.830
you know, I had this worked around and I kept
moving the agenda around until I got comfortable

00:01:04.830 --> 00:01:09.300
with it. And I had demos towards the end to
kind of wrap things up. And I thought to myself,

00:01:09.300 --> 00:01:14.250
you know, it's weird when we talk about business
applications and enterprise applications,

00:01:14.250 --> 00:01:19.130
it varies greatly. Sometimes, there is Internal
Engineers that are writing internally facing

00:01:19.130 --> 00:01:23.560
applications where your HR Department, or
your Expenses Department, Finance Department

00:01:23.560 --> 00:01:27.740
will be using them. Then there's independent
software vendors, so ISV's that are creating

00:01:27.740 --> 00:01:31.840
the next killer app that could be a Business
or Enterprise App. It doesn't always have

00:01:31.840 --> 00:01:36.880
to be inward facing. So, I thought what we'd
do is we'd start with demos. And then we'll

00:01:36.880 --> 00:01:40.060
move on, we'll talk a little bit more in depth
about the tools, the integrated set of tools

00:01:40.060 --> 00:01:44.200
that we're providing with VMware and Spring.
We'll talk about the framework that we're

00:01:44.200 --> 00:01:48.130
providing. So, you saw it all today when Spring
actually generated some code while it's generating

00:01:48.130 --> 00:01:52.390
code that was based on the GWT 2.1 release.
We might as well talk a little bit about that

00:01:52.390 --> 00:01:56.250
and understand what's going on under the hood.
And then finally at the end, we'll bring it

00:01:56.250 --> 00:02:00.450
all together with a couple of slides to show
you how to get your application up and running

00:02:00.450 --> 00:02:06.049
using this new framework that we built up
with Google Web Toolkit 2.1. So without further

00:02:06.049 --> 00:02:11.530
ado, we'll jump into some demos. So when I
think of a business app from a Google standpoint,

00:02:11.530 --> 00:02:17.020
there's one that comes to mind all the time.
And that's AdWords. It is the front end that

00:02:17.020 --> 00:02:20.530
drives our business. While we have a lot of
things that we do in Google, one thing we

00:02:20.530 --> 00:02:25.190
do the most is sell ads online, right? And
this is an application that allows you to

00:02:25.190 --> 00:02:30.090
come in and generate a campaign. Say you're
pizza store, you can do pizza ads online and

00:02:30.090 --> 00:02:34.170
you generate who you're going to target, when
you're going to target and some other demographics

00:02:34.170 --> 00:02:40.420
about your user base. And this is all built
with Google Web Toolkit. They did a rewrite

00:02:40.420 --> 00:02:45.780
about a year and a half ago now and they went
from doing HTML, CSS and Java Script by hand

00:02:45.780 --> 00:02:50.060
to saying, "You know, this is a big enough
application and it means enough to the company

00:02:50.060 --> 00:02:54.340
that we need to rewrite it using a real language."
Nothing against Java Script but when you have

00:02:54.340 --> 00:02:58.580
a huge app--I mean, this is hundreds of thousands
of files and millions of lines and code--it

00:02:58.580 --> 00:03:02.190
becomes much easier to maintain when it's
written in a language such as Java and you

00:03:02.190 --> 00:03:06.500
have tools to go along with it. So stepping
out of the Google realm for a second, another

00:03:06.500 --> 00:03:11.790
one that comes to mind is IBM Blueprint. Now,
this was previously a company called Lombardi

00:03:11.790 --> 00:03:16.720
and they're based in the States and they were--what
they were doing was they were trying to model

00:03:16.720 --> 00:03:21.890
business processes on the web. And this is
a great example of what usually would have

00:03:21.890 --> 00:03:27.440
been a desktop application. And it was built
with Google Web Toolkit 2.0 and they recently

00:03:27.440 --> 00:03:30.540
updated to 2.1 as well because they've been
following along as we've been doing development.

00:03:30.540 --> 00:03:36.540
So I thought I bumped out and give you kind
of idea of what's going on in this application.

00:03:36.540 --> 00:03:42.960
So here I have a new project started and I
have set--okay, in this project, I actually

00:03:42.960 --> 00:03:47.091
have Milestone. So I have a Milestone 1 and
a Milestone 2. And what I can do is I can

00:03:47.091 --> 00:03:51.860
move these around and still can--I want to
switch things up because this activity--at

00:03:51.860 --> 00:03:56.860
this activity right here is tied the Milestone
1. So the list of activities I have to accomplish

00:03:56.860 --> 00:04:03.581
to get past Milestone 1 and again, I can switch
those up. I can come on back and add a milestone.

00:04:03.581 --> 00:04:10.490
I can edit it just like that. It's really
hard to demo with this thing right here. I

00:04:10.490 --> 00:04:20.560
can add activity, again, clicking on it. This--there
you go and I can add the participants. I can

00:04:20.560 --> 00:04:25.199
add up business donors, the experts. It's
not necessarily what is actually what I'm

00:04:25.199 --> 00:04:29.410
adding to the app; it's the look and feel;
it's what I'm doing. And so, for my business,

00:04:29.410 --> 00:04:32.760
I'm a manager and I'm trying to schedule a
whole bunch of employees to get a project

00:04:32.760 --> 00:04:36.370
to completion, that's what I'm trying to do.
There's no reason I have to have a crummy

00:04:36.370 --> 00:04:40.599
application that takes forever to load and
is only installed in my desktop. I should

00:04:40.599 --> 00:04:44.801
have this available to me via the web and
it should feel like a normal desktop application.

00:04:44.801 --> 00:04:49.750
And I think here too, the in situ effect,
the fact that everything's happening within

00:04:49.750 --> 00:04:54.759
the one window and not jumping around to forms,
I can keep my contextual awareness. I'm more

00:04:54.759 --> 00:04:59.469
efficient that way and that's really the power
of Google Web Toolkit. Regardless of 2.0 or

00:04:59.469 --> 00:05:05.120
2.1 or what we're releasing from the get-go,
it's been build an app on the web and just

00:05:05.120 --> 00:05:09.961
host it on the browser, and that's it. The
difference between a desktop application to

00:05:09.961 --> 00:05:13.819
a web application is that we're hosting this
one in the browser. Now there are some side

00:05:13.819 --> 00:05:17.180
effects that you can deploy it to the cloud
which is really nice but step one is getting

00:05:17.180 --> 00:05:21.159
it off the desktop. And I think they've done
a fantastic job here of creating application

00:05:21.159 --> 00:05:24.710
that feels like a desktop application. In
fact, so much so that they actually ended

00:05:24.710 --> 00:05:32.820
up getting acquired by IBM so hats off to
them. So for our next example, I actually

00:05:32.820 --> 00:05:37.889
wanted to bring up a local product manager
from a company called Webb. Otavio Silva is

00:05:37.889 --> 00:05:43.740
going to talk about their application that
they built using Google Web Toolkit. Otavio?

00:05:43.740 --> 00:05:56.800
&gt;&gt; SILVA: [SPEAKING IN FOREIGN LANGUAGE],
Jim. This is Otavio [SPEAKING IN FOREIGN LANGUAGE]

00:05:56.800 --> 00:06:03.729
&gt;&gt; RAMSDALE: Thanks, Octavio. So there is
one thing about his story that resonated with

00:06:03.729 --> 00:06:12.100
me quite well. When I originally met him--well,
jeez, about a year ago, actually--which is

00:06:12.100 --> 00:06:21.050
that it was an existing application, existing
infrastructure, that they were able to move

00:06:21.050 --> 00:06:32.039
over to use Google Web Toolkit. So, if you're
sitting here today and you work for a company

00:06:32.039 --> 00:06:40.979
and you're steeped in legacy technology, don't
think there is not a chance that you could

00:06:40.979 --> 00:06:48.800
move into making killer web apps, right? You
saw it right there. He has a typical back-end

00:06:48.800 --> 00:06:55.729
system that like many of us have had at some
point of time when we worked for various companies.

00:06:55.729 --> 00:07:01.789
And what they started doing was they started
carving out portions where they could use

00:07:01.789 --> 00:07:09.100
GWT. And by segmenting it and maybe by probably
having very good design patterns as well,

00:07:09.100 --> 00:07:14.659
they were able to say, "Okay, this portion
still goes to the existing back-end and this

00:07:14.659 --> 00:07:20.240
portion goes to the new back-end and resulting
new front-end, which is built in the GWT."

00:07:20.240 --> 00:07:31.029
It's an important note as I'm going to work
to the next portion of the deck. So we briefly

00:07:31.029 --> 00:07:42.509
touched on this morning some of the integration
work that we've been doing with VMware and

00:07:42.509 --> 00:07:48.300
Spring tools. And today while Eric Tholome
was talking about cloud portability--and I'll

00:07:48.300 --> 00:07:56.039
bring it up one more time--I want to really
focus on developer tools. I mean, that's--that

00:07:56.039 --> 00:08:03.099
is our core competency back in the Google
office where I come from, it's all about developer

00:08:03.099 --> 00:08:10.059
tools. So the motivation was in fact cloud-portable
business apps. But there was an underside

00:08:10.059 --> 00:08:20.110
part, too, which is that I just want to--I
want to see hyper-optimized business apps

00:08:20.110 --> 00:08:28.789
running in the browser. That's really my goal.
And I share that goal with several people

00:08:28.789 --> 00:08:43.040
back at Google; more than several. So what
we do is we take a look at the anatomy of

00:08:43.040 --> 00:08:52.580
a typical business app, right? Now, by--these
is a broad brush stroke. I don't expect that

00:08:52.580 --> 00:09:08.280
this is actually applicable to everything
but we said, "You know what?

00:09:08.280 --> 00:09:13.770
There's a range of developers." First of all,
there is ISPs and enterprise developers, they

00:09:13.770 --> 00:09:20.820
typically contain a lot of boilerplate cone,
they end up being prime for code generation.

00:09:20.820 --> 00:09:25.190
I think we can do something about that. And
there's forms over data, usually, for the

00:09:25.190 --> 00:09:33.750
simplistic ones and they're not optimized
for the browser, not all of them at least.

00:09:33.750 --> 00:09:42.290
So how can we fix this? And this is going
back to Eric's point, that when we looked

00:09:42.290 --> 00:10:04.690
at the lay of the land we looked at who was
out there. We saw Spring, we said, "You know

00:10:04.690 --> 00:10:26.140
what, they have a set of tools that perfectly
mimics what we have." And I'm going to show

00:10:26.140 --> 00:10:29.960
you that. But first, I want to talk about
developer lifecycle. So we said, "Okay, given

00:10:29.960 --> 00:10:33.970
that this is the anatomy of the app, given
that this is what you're going to build or

00:10:33.970 --> 00:10:40.110
what you have right now, what does it look
like when you build it," right? So we talked

00:10:40.110 --> 00:10:42.170
about generating app, but we talked about
basically generating code, bootstrapping your

00:10:42.170 --> 00:10:49.090
application, getting it up and running. Like,
how long does that take? Does it take one

00:10:49.090 --> 00:10:59.190
day? Does it take three days? Does it take
an entire week? Like, you know, when you start

00:10:59.190 --> 00:11:05.200
a new project and then all of a sudden your
dev manager comes along or the PM comes along--pesky

00:11:05.200 --> 00:11:10.360
PMs--come along and they'd say, you know,
"Got a new show? It's demo day. What do you

00:11:10.360 --> 00:11:17.610
have? What do you have," right? How long does
it take to bootstrap your application to get

00:11:17.610 --> 00:11:28.280
going? But once you have that, you want to
iterate. You want to write some code. And

00:11:28.280 --> 00:11:38.710
this is actually where the fun begins because
then you've got a great environment. You might

00:11:38.710 --> 00:11:48.580
have a small team you're working and you're
just in a really fast cycle. Then you get

00:11:48.580 --> 00:11:56.130
close to the end, you're going to start debugging,
so you want to fix some code. You want to

00:11:56.130 --> 00:12:03.130
optimize some code, right? You're at that
last 20%, 10%, 5% of your application and

00:12:03.130 --> 00:12:09.940
then you shift, right? So go celebrate, get
some sleep. So this is the typical development

00:12:09.940 --> 00:12:18.300
lifecycle. For building an app that I just
showed, how do we create a set of developer

00:12:18.300 --> 00:12:28.610
tools that make this seamless? So we look
at the tool you may know. Spring developer

00:12:28.610 --> 00:12:33.380
tools, I've covered most of these. Spring
Roo generates codes. SpringSource Tools use

00:12:33.380 --> 00:12:37.820
your IDE, Spring Insight is a--it's a performance
enhancing--performance enhancing, that's funny--performance

00:12:37.820 --> 00:12:44.160
metric gathering tool that allows you to identity
sluggishness in your application; I'll talk

00:12:44.160 --> 00:12:51.480
about that more in a second. Known as the
VMware, the parent company of Spring had a

00:12:51.480 --> 00:13:01.320
cloud technology called vFabric that allows
you to deploy to on premise environments.

00:13:01.320 --> 00:13:06.241
And then essentially, they had tools to build
business apps fast. Okay, so they had the

00:13:06.241 --> 00:13:11.420
business portion in fast down. Then we looked
at what we had and we said, "We have Google

00:13:11.420 --> 00:13:16.950
developer tools." We have Google Web Toolkit,
our Java to JavaScript compiler and code generation.

00:13:16.950 --> 00:13:22.540
Google Plugin for Eclipse, which gets you
back in the IDE, Speed Tracer to measure sluggishness

00:13:22.540 --> 00:13:26.510
in the browser, and then we have obviously
cloud technology, app engine for business

00:13:26.510 --> 00:13:34.420
as well as the consumer facing app engine.
And then at that was that we have tools for

00:13:34.420 --> 00:13:38.830
building killer web apps. So if you bring
the two together then we've accomplished what

00:13:38.830 --> 00:13:44.060
I first set out, which is the anatomy of the
business app and the lifecycle that you're--the

00:13:44.060 --> 00:13:49.430
developer lifecycle. So when you break it
down, you've got Spring Roo and GWT. You want

00:13:49.430 --> 00:13:56.980
to optimize for developers, minimize boilerplate,
and ultimately get that nice Ajax feel, so

00:13:56.980 --> 00:14:05.300
it looks you're running on--it feels like
you're running a desktop application in your

00:14:05.300 --> 00:14:14.730
browser. When you want to iterate, when you've
moved in the cycle, use SpringSource Tools

00:14:14.730 --> 00:14:25.130
Suite and Google Plugin for Eclipse to easily
install. It's baked into STS, so if you actually

00:14:25.130 --> 00:14:34.360
download SpringSource Tool Suite when you
leave you'll have a dashboard where you can

00:14:34.360 --> 00:14:52.720
immediately get our tools to get started.
So there's not a bunch of moving around to

00:14:52.720 --> 00:14:59.470
find some STK and some plugin it's just there.
Once you have it, you can build your app fast.

00:14:59.470 --> 00:15:06.940
Code generation refactoring quick fixes and
you can iterate quickly. As I showed off this

00:15:06.940 --> 00:15:20.010
morning in the keynote and as well as in the
first session, in browser debugging, no compiler

00:15:20.010 --> 00:15:28.580
phase, no deployment phase. One of the topics
that I haven't touched on was how you optimize

00:15:28.580 --> 00:15:35.630
your application. And that's using Speed Tracer
along with backends such as app engine and

00:15:35.630 --> 00:15:38.760
Spring Insight. And what's Spring--what Speed
Tracer does is it will--it has, like I said

00:15:38.760 --> 00:15:43.270
in my first session, it has hooks into WebKit,
which is what Safari and Chrome are built

00:15:43.270 --> 00:15:48.350
on top of, to actually measure things like
paint layouts, garbage collection so that

00:15:48.350 --> 00:15:55.370
when your app starts running slow, you can
easily tell; just Speed Trace it. And then

00:15:55.370 --> 00:15:59.650
what we have done is we've integrated that
with backend solutions, right, such as Speed

00:15:59.650 --> 00:16:05.200
Tracer and app stats for app engine that will
give you the server side metrics, bring them

00:16:05.200 --> 00:16:12.070
together in one unified UI to see, "Okay,
this is why it's slow in the browser. This

00:16:12.070 --> 00:16:21.240
is why it's slow in the server. I have holistic
view. I have a roundtrip view of when it was

00:16:21.240 --> 00:16:26.940
slow." So then finally, when you're done bootstrapping,
iterating, debugging, optimizing, you want

00:16:26.940 --> 00:16:30.520
to deploy. And this was the goal from kind
of a high-level when we went to integrate

00:16:30.520 --> 00:16:42.100
the two products, was that you should be able
to choose one of these to deploy to, VMware

00:16:42.100 --> 00:16:47.730
vCloud, Google App Engine, VMware vSphere,
any other cloud. And we actually made that

00:16:47.730 --> 00:16:52.560
happen. So I want to show one more demo before
we move on. So, how many of you are familiar

00:16:52.560 --> 00:16:58.430
with Spring--we've been talking about it--how
of you have you actually used Spring developer

00:16:58.430 --> 00:17:04.929
tools? All right. So there's a conference
called Spring One that happened last week

00:17:04.929 --> 00:17:13.029
in Chicago. We went out there and had a great
time. It was my first time ever at that conference,

00:17:13.029 --> 00:17:20.049
meeting some of the developers. But one of
the things we did was it was the first time

00:17:20.049 --> 00:17:23.459
they were announcing hosted sequel support
coming out of app engine for business. This

00:17:23.459 --> 00:17:26.749
is one of the things that Eric had talked
about in his keynote. It's very close to being

00:17:26.749 --> 00:17:32.440
production-great. Right now, we're now on
a trusted tester phase. That means we've got

00:17:32.440 --> 00:17:39.480
a beta quality version of it that we're getting
people involved in. And one of the people

00:17:39.480 --> 00:17:48.559
we got involved in it was a Spring engineer.
We said, "You know what'd be really, really

00:17:48.559 --> 00:17:57.470
cool? If you could take one of your Spring
apps that's never run an app engine before,

00:17:57.470 --> 00:18:04.600
has all the Spring backend, has all the sequel
integration and you could just drop it on

00:18:04.600 --> 00:18:10.620
an app engine, that would be proof that we've
actually accomplished our goal." And sure

00:18:10.620 --> 00:18:16.130
enough, it'll be like maybe changing--and
I asked him 25 lines of code out of like 20,000

00:18:16.130 --> 00:18:21.610
lines of code, had it running on a weekend.
So this is their travel app, just a basic

00:18:21.610 --> 00:18:26.269
app that comes with Spring Web Flow, has nothing
to do with Spring Roo, has nothing to do with

00:18:26.269 --> 00:18:31.140
Google Web Toolkit, has everything to do with
running on app engine as you can see by the

00:18:31.140 --> 00:18:36.410
URL. It's tough for you to see in the back
but it's running off of upspot.com. This is

00:18:36.410 --> 00:18:42.350
the hotel application, it's a travel application.
And so, I can go in and I can search for hotels,

00:18:42.350 --> 00:18:47.259
so maybe in Chicago. And there you go. I've
actually queried a SQL backend hosted in our

00:18:47.259 --> 00:18:54.049
cloud and I can--I brought back up a result
and I can click on that. Here we go, view

00:18:54.049 --> 00:18:59.909
hotels, sorry about that. Brings up that.
I can say, "Book It." Okay. I'm going to pick

00:18:59.909 --> 00:19:03.549
my date and I want non-smoking, ocean view--and
I don't have a fake credit card number right

00:19:03.549 --> 00:19:09.490
now. But you can see it's querying the system
right now and pulling back the results. All

00:19:09.490 --> 00:19:15.360
you had to do--this is the nice part, all
you had to do is to get this happen besides

00:19:15.360 --> 00:19:20.490
tweaking a few lines of code, was replaced
the JDBC driver that he was using and a connection

00:19:20.490 --> 00:19:26.570
string. That was it. So when we talk about
these things being cloud-portable we're really

00:19:26.570 --> 00:19:31.539
serious about it and this is proof positive
that this is actually going on. So the framework,

00:19:31.539 --> 00:19:36.730
the new Google 2.1 release. So when the Spring
Roo goes off and generates a whole bunch of

00:19:36.730 --> 00:19:43.799
code as you saw this morning, it's going to
generate that code for something, right, and

00:19:43.799 --> 00:19:51.909
it's going to generate for some framework.
And what we've done is Spring, and a lot of

00:19:51.909 --> 00:19:55.039
the enterprise community are built on top
of the MVC patterns, so the model-view controller

00:19:55.039 --> 00:19:58.750
pattern. It's great. It's fantastic. It scales
well. But it doesn't quite work perfectly

00:19:58.750 --> 00:20:04.110
for web apps. Basically, what you got to do
is you got to tweak it a bit and separate

00:20:04.110 --> 00:20:08.429
your view and controller codes just a tad
bit more for testability reasons and for performance

00:20:08.429 --> 00:20:13.289
reasons. But for all intent and purposes if
I say MVP, just think MVC and you'll be okay.

00:20:13.289 --> 00:20:18.529
So what we knew is that Spring Roo was already
generating this MVC-type application. And

00:20:18.529 --> 00:20:22.179
as your best practices, we said that this
is perfect. We used these best practices entirely.

00:20:22.179 --> 00:20:25.600
We just haven't codified them. We haven't
pulled them into a framework themselves, right?

00:20:25.600 --> 00:20:30.779
What we do is you have people like me and
engineers--others engineers and a GWT team

00:20:30.779 --> 00:20:36.679
going around saying like, "You know, if you
want to build big applications, you should

00:20:36.679 --> 00:20:41.340
go do dah, dah, dah, dah." And we'd rattle
off like three different things you needed

00:20:41.340 --> 00:20:44.899
to do. So we said, "We should take those best
practices and pull them into a framework,"

00:20:44.899 --> 00:20:51.559
and that's exactly what we did. We did quite
a few other things, too. So let's go over

00:20:51.559 --> 00:20:56.659
those. So when we talk about Google Web Toolkit
it's really comprised of three main products;

00:20:56.659 --> 00:21:00.759
Google Plugin for Eclipse, Speed Tracer and
a Google Web Toolkit SDK. Some minor enhancements

00:21:00.759 --> 00:21:05.340
to the top two, so from the Google Plugin
for Eclipse, we now have browser profiles.

00:21:05.340 --> 00:21:10.779
So this morning you saw me right-click on
that URL and I could pick Firefox or Safari.

00:21:10.779 --> 00:21:17.730
And very soon we'll have support for Chrome
and Mac as well. It's pretty nice, nice little

00:21:17.730 --> 00:21:22.620
enhancement. It was actually requested quite
a bit like, "Jeez, why can't I just launch

00:21:22.620 --> 00:21:27.720
a browser from inside the IDEs instead of
copying and pasting?" Well now, you can. The

00:21:27.720 --> 00:21:36.490
one I like the most and the one that was--the
one feature we got the most out of the integration

00:21:36.490 --> 00:21:44.059
with Spring was we had to fix our Maven support.
So I hate to keep asking, but how many people

00:21:44.059 --> 00:21:50.279
actually use Maven? Yes, that's what I thought.
Okay. So there's a lot, a lot of people that

00:21:50.279 --> 00:21:55.900
use Maven out there. And it's tough because
Maven doesn't always work well with IDEs.

00:21:55.900 --> 00:22:02.049
And actually it doesn't really work well with
Google Web Toolkit or Google App Engine SDKs,

00:22:02.049 --> 00:22:06.590
simply because there's a structure to our
SDKs when you actually unzip it. And I urged

00:22:06.590 --> 00:22:11.690
you if you don't have--if you haven't download
the SDKs, go do it. But when you unzip it,

00:22:11.690 --> 00:22:15.480
you'll notice that there's a structure to
them and Maven has its own structure. When

00:22:15.480 --> 00:22:21.759
those two structures don't align, well things
kind of go array. So what we did is we said,

00:22:21.759 --> 00:22:27.929
"Okay, well, we own the tools, we can fix
this." And so with some help from some Spring

00:22:27.929 --> 00:22:33.841
guys, we moved some special code that they
had in STS, in SpringSource Tool Suite into

00:22:33.841 --> 00:22:39.509
Google plug--into the Google Plugin for Eclipse.
So now, you can actually have Maven projects

00:22:39.509 --> 00:22:41.740
imported seamlessly into Eclipse or SpringSource
Tool Suite depending on which IDE you're using.

00:22:41.740 --> 00:22:43.659
Speed Tracer 1.0, I actually--I talked briefly
about this but you can do a roundtrip speed

00:22:43.659 --> 00:22:46.549
tracing, so client to backend see holistically
a view of your application. Another minor

00:22:46.549 --> 00:22:50.090
update with the UI, you can launch it from
the Google Plugin for Eclipse, so there's

00:22:50.090 --> 00:22:54.059
a notion of just integrating products, not
just us integrating with Speed Tracer or--us

00:22:54.059 --> 00:22:58.010
integrating with Spring and VMware, but us
integrating our own products as well just

00:22:58.010 --> 00:23:05.570
to give you a seamless experience. But let's
get to the goods. So the GWT SDK got some

00:23:05.570 --> 00:23:12.429
major, major updates and a major overhaul.
And what we did was we said, "This is the

00:23:12.429 --> 00:23:16.720
framework that I'm talking about." Activities
and places, request factory, editors, and

00:23:16.720 --> 00:23:20.799
cell-based widgets. These are the four main
topics that we--or the four main features

00:23:20.799 --> 00:23:30.320
we added to the GWT SDK. What are these? I'm
glad you've asked. So, Activities and Places

00:23:30.320 --> 00:23:34.670
was our formal name for this MVC/MVP framework.
Activities equal presenters. And to keep the

00:23:34.670 --> 00:23:39.240
analogy going, if you're from the MVC world,
activities kind of equal the controllers of

00:23:39.240 --> 00:23:43.489
your application. That's truly were the business
logic of your application goes, right? And

00:23:43.489 --> 00:23:46.960
in the places equal views, so that's your
widget code, that's what's displaying the

00:23:46.960 --> 00:23:50.259
tables, and the buttons, and the layout, and
the--overall, it's a mechanism from getting

00:23:50.259 --> 00:24:00.309
for one view to another, right? So when you
talk about hyper-optimizing an application,

00:24:00.309 --> 00:24:05.489
there's this notion of reusable code and when
you have to initialize things and when you

00:24:05.489 --> 00:24:09.919
don't. When you have a large application,
if you go through and you initialize all your

00:24:09.919 --> 00:24:20.519
views at once, you can imagine that kind of
makes for a sluggish start-up time. So when

00:24:20.519 --> 00:24:24.830
you use this framework, then we'll actually
lays--we initialize that for you, things like

00:24:24.830 --> 00:24:30.659
your places, and your views, and all your
widgets, and then in your app your application

00:24:30.659 --> 00:24:37.059
is snappy. So, RequestFactory. I mean, from
the get-go with Google Web Toolkit, one of

00:24:37.059 --> 00:24:42.320
the things we prioritized on was, well, one,
how much AJAX we're using, right? So under

00:24:42.320 --> 00:24:45.639
the covers there's a lot of calls going back
and forth even though you stay on the same

00:24:45.639 --> 00:24:49.460
screen. This is updating up here, this is
updating this table, your left hand nav might

00:24:49.460 --> 00:24:53.529
update and you don't know it, so it's all
happening under the hood. So, given the fact

00:24:53.529 --> 00:24:58.269
that we're doing so many AJAX calls, we realize
that we wanted to be super optimized with

00:24:58.269 --> 00:25:04.340
these and we want to make it easy for you
to call them. So we've done this with RequestFactory,

00:25:04.340 --> 00:25:09.879
it allows you to work with light weight proxy
objects. Another term for these are DTOs,

00:25:09.879 --> 00:25:14.799
Data Transfer Objects. So you want to think
model, domain objects and DTOs, and going

00:25:14.799 --> 00:25:19.999
back to the previous analogy, the model, that's
just the model. So that--no matter if you're

00:25:19.999 --> 00:25:25.659
using MVP or MVC, your model is your model,
it's your data. It's how you describe the

00:25:25.659 --> 00:25:28.480
things that are getting passed back and forth
in your application. Your domain objects are

00:25:28.480 --> 00:25:31.840
your entities, that would be like the employee,
or the expense, or the report that I was talking

00:25:31.840 --> 00:25:36.100
about this morning. And then DTOs are just
proxy objects, the light weight ones. The

00:25:36.100 --> 00:25:41.711
idea there is this, the takeaway, imagine
if you had a list of contacts and I was--in

00:25:41.711 --> 00:25:42.711
your contact, it was actually, let's say 70
fields deep, right? If you can remember--have

00:25:42.711 --> 00:25:49.820
you--you guys have used Microsoft Outlook,
right? That thing is widely extensible and

00:25:49.820 --> 00:25:54.110
it has all these fields, and if I want to
make a fetch, especially with my phone, I

00:25:54.110 --> 00:26:03.499
don't want all 70 fields I just want the top
10 that I can display, right? So we have to

00:26:03.499 --> 00:26:13.450
have a way for them to optimize that so you
get only what you can display and we did that

00:26:13.450 --> 00:26:19.100
here. If I may, we--while we were in a process
of building this framework for you to create

00:26:19.100 --> 00:26:24.700
your application and we realize that like,
"Well, what good is a framework when you can't

00:26:24.700 --> 00:26:28.539
edit, view and edit the data?" So we said,
"You know what, let's build--we'll build out

00:26:28.539 --> 00:26:39.929
some editors." And what we do is we give you
the ability to take an entity. So again, let's

00:26:39.929 --> 00:26:45.460
go back and say, your employee, and with just
annotations you can annotate it and we'll

00:26:45.460 --> 00:26:50.220
create a view for you, so--and you just plug
it into your application. Given that we give

00:26:50.220 --> 00:26:55.549
you some baseline UI, they can be customized
and they can be wired at the proxy objects

00:26:55.549 --> 00:27:00.710
for--in request factory. So there's a notion
that, "I told you that this is how you show

00:27:00.710 --> 00:27:07.440
this entity, this employee object," but I
can also say to my editor, "This is how you're

00:27:07.440 --> 00:27:14.049
going to get change sets." So if you're doing
Chris Ramsdale, the employee, and some other

00:27:14.049 --> 00:27:18.190
portion of the application makes a change,
gets synced up to the server, the server sends

00:27:18.190 --> 00:27:24.600
back down a change update like that my Social
Security number, or let's say my mobile phone

00:27:24.600 --> 00:27:30.970
number has changed, that editor that's displaying
me, my employee record, will be updated automatically

00:27:30.970 --> 00:27:36.970
for you. And it only have built-in validation
too. So, if you say your phone number is a

00:27:36.970 --> 00:27:41.200
phone number and a phone number has to be
numbers, you can build that in to the framework

00:27:41.200 --> 00:27:45.799
itself, you can build that into the editor
so that we can check to see if you put any

00:27:45.799 --> 00:27:49.369
alphanumeric characters or alphabetic characters,
or that your phone number is of some certain

00:27:49.369 --> 00:27:53.990
size. The cell-based widgets are a nice one.
So these were--if there's one thing we've

00:27:53.990 --> 00:28:01.320
learned over the years is that, do you ever
see widgets can be kind of heavy weight and

00:28:01.320 --> 00:28:08.690
the reason they're heavy weight is because
they're doing all of the sinking for events.

00:28:08.690 --> 00:28:16.330
So I drop a table on there and I put some
buttons in the cell, and then I put some--another

00:28:16.330 --> 00:28:20.799
table inside, another cell, that it just--all
of a sudden you end up with about 255 widgets

00:28:20.799 --> 00:28:24.460
on your page and they're all listening for
events. And when an event comes in, we have

00:28:24.460 --> 00:28:28.460
to go traverse the tree to find out who to
send it to and it gets slow and sluggish.

00:28:28.460 --> 00:28:32.330
And we found this out with AdWords really
quickly. So we said, "You know what, the way

00:28:32.330 --> 00:28:40.880
to solve this is we'll just have a container
and inside the container, we have a whole

00:28:40.880 --> 00:28:46.649
bunch of divs and when you want to actually
generate some UI, we'll generate it with HTML,

00:28:46.649 --> 00:28:51.710
we just stick it inside that div. So it's
very, very light weight. So what you end up

00:28:51.710 --> 00:28:55.169
with is a huge table on your screen, right?
Displaying all kinds of data but really it's

00:28:55.169 --> 00:28:57.410
only one widget, it's the container that's
listening for events. And the container is

00:28:57.410 --> 00:29:00.899
smart enough to know that when he gets the
event, it looks for some special properties

00:29:00.899 --> 00:29:06.019
and it can traverse its tree on it's own,
a very small tree that is, and find the div,

00:29:06.019 --> 00:29:11.049
give it to the div, and then he can take care
of it from there. So again, minimize event

00:29:11.049 --> 00:29:15.049
handling overhead, captured by a parent container,
relying on safe HTML. That was another one

00:29:15.049 --> 00:29:17.769
too, is that given the fact that we're injecting
HTML into these divs, it's got to be safe.

00:29:17.769 --> 00:29:20.960
So we've introduced a new component within
GWT 2.1 that allows you to have safe HTML.

00:29:20.960 --> 00:29:27.470
And if you don't know what that is, that's
basically so that you can't inject JavaScript

00:29:27.470 --> 00:29:34.730
into your page so it'll check it for you beforehand,
before you actually put it into your table.

00:29:34.730 --> 00:29:40.169
And then just because of all this, because
we've kept it lightweight, because we've kept

00:29:40.169 --> 00:29:42.619
it hyper-optimized for the desktop, we get
optimization for the mobile right off the

00:29:42.619 --> 00:29:47.070
bat. So now, I'm giving you the overview of
the framework. I thought we'd take a few slides

00:29:47.070 --> 00:29:53.179
just to bring it all together, right? To bring,
"Okay, you've told me about all these things.

00:29:53.179 --> 00:29:59.029
How do I actually do something with them now,"
right? Now, I'll tell you, the best way to

00:29:59.029 --> 00:30:06.669
do it is to actually go and download the SDK.
Go and download the tools, we have documentation

00:30:06.669 --> 00:30:14.010
online, and go and run through some of the
samples. But what I'll try to do is in a matter

00:30:14.010 --> 00:30:19.320
of the remaining 10 minutes here to step you
through what's going on and then feel free,

00:30:19.320 --> 00:30:23.559
we'll probably leave five minutes to do some
Q&amp;A. So putting the pieces together, one of

00:30:23.559 --> 00:30:26.169
the three steps. We have app startup, kind
of have to have that, right? We get a requesting

00:30:26.169 --> 00:30:30.239
data because what good is your application
if you don't have some valuable data inside

00:30:30.239 --> 00:30:35.919
of it. And then if you get the data we have
to display it, right? Pretty trivial. This

00:30:35.919 --> 00:30:41.010
has to happen. So let's see how we put these
pieces together. So for app startup, the first

00:30:41.010 --> 00:30:47.789
thing you're going to start off with is an
activity manager. This is going to be the

00:30:47.789 --> 00:30:51.559
person that gets you around in your application,
all right? So here's an activity mapper. So

00:30:51.559 --> 00:30:56.510
if I have an activity manager, right, that's
the core of getting around my application.

00:30:56.510 --> 00:31:02.029
My activity mapper gets me from a place back
to an activity. Now what's a place? A place

00:31:02.029 --> 00:31:09.740
is simply a spot in your application, right?
Hence the name, "place." "I want to go here.

00:31:09.740 --> 00:31:14.570
Okay. Well, give me the activity that gets
me to this view. I want to go view the details

00:31:14.570 --> 00:31:17.649
of an employee. Great, that's a new place.
Tell me the activity that gets me there."

00:31:17.649 --> 00:31:18.970
So you have an activity mapper. Now, typically,
and like, remember the application I showed

00:31:18.970 --> 00:31:22.570
today where we had a simple left-hand nav
and then we had a table that's actually showing

00:31:22.570 --> 00:31:25.190
some values. That left-hand nav is getting
me to different spots of my application. So

00:31:25.190 --> 00:31:29.710
how do I show it? I actually get a display
panel. A display panel is just a widget that

00:31:29.710 --> 00:31:34.279
show that navigation and you set that view,
that set display, on the activity manager.

00:31:34.279 --> 00:31:40.700
Okay, so now I need a place controller, right?
I need somebody that's actually going to take

00:31:40.700 --> 00:31:48.190
care of when I invoke the "I want to go here,"
he has to get that. And the place controller

00:31:48.190 --> 00:31:52.240
is the guy that's going to coordinate, notifying
everybody else that the user wants to go to

00:31:52.240 --> 00:31:57.629
another place. Mind you. The activity manager
can get me there. The place controller is

00:31:57.629 --> 00:32:00.379
going to notify the rest of the application.
Then you have a place history handler. So

00:32:00.379 --> 00:32:03.669
remember how I mentioned that you get history
support right out of the box, that's because

00:32:03.669 --> 00:32:08.299
we have a place history handler. And what
that does is that's going to take a bookmark

00:32:08.299 --> 00:32:13.519
or a URL that has a hashtag that's basically
a place in your application and it's going

00:32:13.519 --> 00:32:21.580
to turn it into a place request. And the way
it does that is the place history handler

00:32:21.580 --> 00:32:26.440
says, "Okay. I know how to generate your place
based on a URL that you've given me or a bookmark,

00:32:26.440 --> 00:32:35.529
but I don't know what to do with it. So, what
do I do?" I need to know about the place controller

00:32:35.529 --> 00:32:41.360
so I could tell the place controller, "Hey,
he just had a bookmark and I need to go to

00:32:41.360 --> 00:32:46.210
this place." So they register via that mechanism.
Now, we've got all this happening on the top,

00:32:46.210 --> 00:32:50.289
how do we get them to notify each other, right?
So from GWT 2.0 and on, we have this thing

00:32:50.289 --> 00:32:53.600
called the event bus which allows you to pass
requests and events back and forth. So we

00:32:53.600 --> 00:32:59.539
have an event bus. And then they all hook
into it and it's hunky-dory, right? So everybody's

00:32:59.539 --> 00:33:05.820
tied together but how do we actually get events?
What are the events that pass back and forth?

00:33:05.820 --> 00:33:10.110
Okay, so when we move everything else. We
just simply say, "Okay, these two are the

00:33:10.110 --> 00:33:13.619
important parts, the place controller and
the activity manager." Again, I want to go

00:33:13.619 --> 00:33:15.700
somewhere, I'll tell the place controller.
The activity manager says, "I can get you

00:33:15.700 --> 00:33:21.830
there." So how did they do that? It's actually
quite simple. When I want to go somewhere

00:33:21.830 --> 00:33:26.659
I simply, my application, calls go to on the
place controller and hands it a place. "Go

00:33:26.659 --> 00:33:30.820
to this record. Show me the details." The
place controller says, "That's great." It

00:33:30.820 --> 00:33:36.389
takes that place, wraps it up into event,
fires a place change request for you. And

00:33:36.389 --> 00:33:39.679
again, this is all part of the framework happening
under the covers. Puts it on the event bus

00:33:39.679 --> 00:33:43.359
and then the activity manager picks it up
and says, "Great. I know how to handle a place

00:33:43.359 --> 00:33:47.190
change request." So it takes that place change
request event, gets the place out of it, calls

00:33:47.190 --> 00:33:54.159
the activity mapper and says, "Hey, you know
how to map places to activities, tell me what

00:33:54.159 --> 00:34:00.899
activity goes with this." The activity mapper
says, "Hey, this is great. This is the record

00:34:00.899 --> 00:34:03.649
detail activity that you need." He says, "Great."
He gets back an activity. Now, this is the

00:34:03.649 --> 00:34:10.880
guy that's actually going to take this and
put up a view on your screen, you know? What

00:34:10.880 --> 00:34:14.899
happens is the activity manager says, "Thanks
for the activity, activity mapper. I'm going

00:34:14.899 --> 00:34:17.839
to call start on this guy. I'm going to pass
him a panel." And a panel is nothing more

00:34:17.839 --> 00:34:20.810
than a container where you can start drawing
in the event bus because you're going to have

00:34:20.810 --> 00:34:25.800
to get some of the events back and forth.
So at that point in time, that's when you

00:34:25.800 --> 00:34:27.929
start getting your view up. The activator--the
activity says, "Start, it get--" start gets

00:34:27.929 --> 00:34:36.730
a call on it and says, "I know how to draw
inside of a panel." So now that you have that

00:34:36.730 --> 00:34:42.240
initial view up, how do you go and request
data, right? So now and right now all I have

00:34:42.240 --> 00:34:46.440
is an empty screen. So this is where code
generation really, really takes on. This is

00:34:46.440 --> 00:34:50.500
some of the power of Google Web Toolkit. So
I start with an employee list activity, right?

00:34:50.500 --> 00:34:54.289
And what this is, is this is an activity,
as I mentioned before, but it's specific to

00:34:54.289 --> 00:34:59.420
listing. And it's specific to listing certain
types of objects. In this case, my employee,

00:34:59.420 --> 00:35:04.819
right? Now the framework is going to call
in that and say, "I need a range of objects.

00:35:04.819 --> 00:35:09.270
I need the first 10 employees. Get those for
me," because the rest of the application doesn't

00:35:09.270 --> 00:35:14.060
know how to do it. They're like, "I don't
know. I just know they need 10 employees,

00:35:14.060 --> 00:35:17.690
employed list activity. Find them for me."
Again, the activities are the brains of your

00:35:17.690 --> 00:35:23.819
application. It's where all the core code
goes. So the list of activity says, "You know

00:35:23.819 --> 00:35:31.900
what, I know about this thing called a request
factory," right? And I know that request factories

00:35:31.900 --> 00:35:36.859
will get request for me to my back end to
issue the data to me." So, he has a request

00:35:36.859 --> 00:35:40.039
factory. In fact, he's initialized with the
request factory. And he says, "Okay. Give

00:35:40.039 --> 00:35:44.450
me the employee request because I need to
get the first 10 employees." Request factory

00:35:44.450 --> 00:35:49.109
says, "Cool. No problem. I know about--I know
how to give you back an employee request and

00:35:49.109 --> 00:35:55.780
I also know what concrete class this is linked
to on the server side." Because at the end

00:35:55.780 --> 00:36:05.660
of the day, I can talk about code generation,
all this magic that happens, but you got to

00:36:05.660 --> 00:36:11.420
do a sequel call to get data out of your database,
right, to get it back to your application.

00:36:11.420 --> 00:36:16.420
So right now, this is all on the client side.
So the list of activities says, "Request factory,

00:36:16.420 --> 00:36:20.970
get me an employee request," he gets one,
goes through some generated code to call find

00:36:20.970 --> 00:36:25.710
all. It's kind of tough to read there. It's
"list employee proxy find all," give me all

00:36:25.710 --> 00:36:29.750
the employees. And call some generated code,
that's generated by the GWIT compiler and

00:36:29.750 --> 00:36:33.660
code generators, that's the magic, and finally
gets to your employee class on the server

00:36:33.660 --> 00:36:38.289
side. So this blue box on the right-hand side
for you is actually server side code that's

00:36:38.289 --> 00:36:42.230
going to run. And you can tell because it's
got a select start from sequel call, right?

00:36:42.230 --> 00:36:44.720
And that gets back a list of employees. Then
what it's going to do is it's going to pass

00:36:44.720 --> 00:36:49.180
it back through the generated code. The generated
code is going to take care of serializing

00:36:49.180 --> 00:36:54.700
all of those employees, right? Some big array
of employee records down to some JSON format

00:36:54.700 --> 00:37:00.900
and pass it back to you. And then what you
get, viola, is a list of employee proxies.

00:37:00.900 --> 00:37:07.359
And then you're like, "Hold on. Wait a second.
So I actually ask for employees, why am I

00:37:07.359 --> 00:37:15.130
getting back employee proxies?" That goes
back to the whole the employee proxy is the

00:37:15.130 --> 00:37:19.180
light weight version of your employee. You
can define which fields you want. But the

00:37:19.180 --> 00:37:20.940
point here, the real takeaway is that you
asked for a list of employees and didn't have

00:37:20.940 --> 00:37:23.970
to worry about what the JSON payload looked
like, all the serialization code, you just

00:37:23.970 --> 00:37:28.829
got back a list of employee proxies. And you
can start iterating over them and doing whatever

00:37:28.829 --> 00:37:35.310
you want to do. You have your data now and
it feels like an object. So now, this gets

00:37:35.310 --> 00:37:42.040
really easy. So I now I want to display this,
right? So I could iterate through this and

00:37:42.040 --> 00:37:52.859
I could, you know, pick apart fields and everything.
But we have this nice piece of the framework

00:37:52.859 --> 00:38:05.990
where once you have this list all you have
to do is you have a list view. Now in this

00:38:05.990 --> 00:38:18.010
case, list view is an abstract class. So you
derive from it, and I have my employee list

00:38:18.010 --> 00:38:26.070
view, that's specific to my application but
you get a bunch of helper methods along with

00:38:26.070 --> 00:38:32.579
that. So my employee list activity that now
has a list of employee proxies. A list of

00:38:32.579 --> 00:38:39.480
employee DTO says, "Cool. I'm going to give
to list view to show it. Because I am a--I'm

00:38:39.480 --> 00:38:44.680
an activity. I don't know about widgets. I
don't know how the screen's constructed. I

00:38:44.680 --> 00:38:52.180
don't even know if I'm talking to a mobile
view or a desktop view. But I know that I'm

00:38:52.180 --> 00:39:04.980
going to give it to this view and they'll
take care of it." The employee list view said,

00:39:04.980 --> 00:39:10.340
"This is great." Now, if you follow MVC enough,
you know there's one key rule that your views

00:39:10.340 --> 00:39:16.710
really don't know about your data model or
your views don't know about your business

00:39:16.710 --> 00:39:35.859
logic, they're really dumb views, right? All
they know how to do is to take some data,

00:39:35.859 --> 00:39:47.609
put it on the screen and be done with it.
So how do you do that? How do you give the

00:39:47.609 --> 00:39:52.900
employee list view a set of objects that it
doesn't know anything about? How does it know

00:39:52.900 --> 00:39:58.320
how to parse those to get the fields out so
that column one is my first name, column two

00:39:58.320 --> 00:40:04.410
is my last name and then column three is my
mobile number? That's easy. What you do is

00:40:04.410 --> 00:40:10.490
you have an outside entity that actually knows
about your data model, knows about some of

00:40:10.490 --> 00:40:16.450
your business logic and it says, "Look, Mr.
employee list view, I know that you don't

00:40:16.450 --> 00:40:26.960
know much about the world but I'm going to
tell you how to separate this record that

00:40:26.960 --> 00:44:03.740
comes back and where the--what column to put
the

00:44:03.740 --> 00:44:15.450
data

00:44:15.450 --> 00:44:20.289
in based on the fields." And all it does is
it calls add column and gives it, "Okay. For

00:44:20.289 --> 00:44:23.810
the first column, it's going to be the name.
You're going to have an abstract cell, that's

00:44:23.810 --> 00:44:28.359
going to be the cell you actually draw into,
and I'm going to pass you a get-value method,"

00:44:28.359 --> 00:44:33.970
right? This is an anonymous inner class that
knows how to get the data out of the employee

00:44:33.970 --> 00:44:38.789
proxies. So that the view never knows. It
simply iterates over its columns and says,

00:44:38.789 --> 00:44:44.980
"Okay. Column zero, here's an employee proxy.
You tell me what the value is." And that code

00:44:44.980 --> 00:44:50.260
that knows how to dissect that lives back
inside of the activity realm so it knows about

00:44:50.260 --> 00:44:56.510
data models and things like that. So it's
a way of getting your entity broken up on

00:44:56.510 --> 00:45:01.779
the screen without violating some of the principles
of MVC and MVP. And then finally, when it's

00:45:01.779 --> 00:45:05.529
all said and done, you have a screen that
looks like this. And this is the real app

00:45:05.529 --> 00:45:10.819
that we demoed at Google IO. Where you have
taken apart an expense report--yeah, it sounds

00:45:10.819 --> 00:45:15.349
like we're big on expense reports, I get it.
But we take apart an expense report, and you

00:45:15.349 --> 00:45:19.369
have the purpose, the notes, the department,
and it create it. And what I just showed you

00:45:19.369 --> 00:45:24.059
is exactly how that view is brought up right
now. So that's really about the first 10%

00:45:24.059 --> 00:45:28.190
of it. And then there's a whole much more
afterwards so, again, I encourage you to go

00:45:28.190 --> 00:45:33.049
download the SDK. Check out the documentation
and then we have a wildly active developer

00:45:33.049 --> 00:45:39.181
forum. So I think we're up to roughly 23,000
users at this point in time so there's a lot

00:45:39.181 --> 00:45:42.700
of you out there. We're out there. Go check
it out. Thanks.

