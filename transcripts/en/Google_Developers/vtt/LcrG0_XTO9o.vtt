WEBVTT
Kind: captions
Language: en

00:00:09.850 --> 00:00:12.350
Hi everybody, welcome to this
week's episode of YouTube

00:00:12.350 --> 00:00:13.660
Developers Live.

00:00:13.660 --> 00:00:16.129
I'm Jeff Posnik, coming to
you from New York City.

00:00:16.129 --> 00:00:18.440
And this week we're going to
be talking about how to

00:00:18.440 --> 00:00:21.740
discover great content, both
YouTube videos and YouTube

00:00:21.740 --> 00:00:26.840
channels, using the latest
YouTube Data API version 3.0.

00:00:26.840 --> 00:00:29.090
So let's actually dive
right into things.

00:00:29.090 --> 00:00:31.850
This is kind of a companion
piece to a blog post which

00:00:31.850 --> 00:00:35.000
details some of this
information in

00:00:35.000 --> 00:00:35.860
kind of written form.

00:00:35.860 --> 00:00:38.366
So feel free to refer to
that, we'll have a

00:00:38.366 --> 00:00:39.180
little annotation going.

00:00:39.180 --> 00:00:42.200
Or watch the video for
some real examples.

00:00:42.200 --> 00:00:45.210
The first thing that you might
want to do when helping your

00:00:45.210 --> 00:00:48.670
users of your application
discover great content that

00:00:48.670 --> 00:00:52.190
they might want to watch is
make use of the type of

00:00:52.190 --> 00:00:54.160
ranking and discovery that
we already use on the

00:00:54.160 --> 00:00:56.170
YouTube.com home page.

00:00:56.170 --> 00:00:59.880
So we actually do have an API
call in version 3.0 of the

00:00:59.880 --> 00:01:02.730
Data API that will give you
back more or less the same

00:01:02.730 --> 00:01:06.090
information that users see
when they go to the

00:01:06.090 --> 00:01:08.200
YouTube.com page while
they're logged in.

00:01:08.200 --> 00:01:11.230
And this is the recommendations
for videos

00:01:11.230 --> 00:01:13.930
that might be relevant to them
based on all sorts of

00:01:13.930 --> 00:01:15.250
different signals.

00:01:15.250 --> 00:01:17.000
So you as the application
developer don't have to worry

00:01:17.000 --> 00:01:17.650
about that.

00:01:17.650 --> 00:01:20.090
You can just make an API
call and get back some

00:01:20.090 --> 00:01:22.300
great shows to watch.

00:01:22.300 --> 00:01:24.980
So I'm going to actually
switch to the demo.

00:01:24.980 --> 00:01:28.490
And I'm going to do all these
demos using what we call our

00:01:28.490 --> 00:01:29.810
APIs Explorer.

00:01:29.810 --> 00:01:32.810
This is a great tool for playing
around with the API

00:01:32.810 --> 00:01:35.940
calls we're going to talk about
today, but also just any

00:01:35.940 --> 00:01:38.130
of our Data APIs or
Analytics APIs.

00:01:38.130 --> 00:01:41.120
If you're just getting started,
I'd really recommend

00:01:41.120 --> 00:01:42.750
checking out this tool.

00:01:42.750 --> 00:01:44.622
Again, we'll have an annotation
pointing to it so

00:01:44.622 --> 00:01:48.920
you can go there and try to make
some sample API calls.

00:01:48.920 --> 00:01:52.980
So this is, in particular, a
YouTube Activities List call

00:01:52.980 --> 00:01:54.160
that we're going to make.

00:01:54.160 --> 00:01:56.330
And we're going to pass in
a couple of parameters.

00:01:56.330 --> 00:01:59.960
We're going to put the part of
snippets, and that's just a

00:01:59.960 --> 00:02:01.850
common part that we
use through a

00:02:01.850 --> 00:02:03.880
lot of our API methods.

00:02:03.880 --> 00:02:08.650
It means give me some common
data about the videos that are

00:02:08.650 --> 00:02:12.030
being returned, such as a title,
a link to the video ID,

00:02:12.030 --> 00:02:13.870
things like that.

00:02:13.870 --> 00:02:16.550
And in particular, we're going
to do something a little bit

00:02:16.550 --> 00:02:17.800
different that you might
have seen before.

00:02:17.800 --> 00:02:21.040
We're going to pass in true
for this home parameter.

00:02:21.040 --> 00:02:25.810
And what this means is instead
of making a traditional

00:02:25.810 --> 00:02:29.370
YouTube Activities List call
where you get the list of

00:02:29.370 --> 00:02:32.210
recent activities for a specific
channel, or your own

00:02:32.210 --> 00:02:36.260
activities, passing in home
equals true means please give

00:02:36.260 --> 00:02:39.190
me the list of things that would
normally show up on the

00:02:39.190 --> 00:02:41.800
YouTube.com home page.

00:02:41.800 --> 00:02:43.800
So it's a little bit
special there.

00:02:43.800 --> 00:02:47.180
And I'm going to click Execute
down here and I'm going to get

00:02:47.180 --> 00:02:51.310
back a 401 Unauthorized because
there is something in

00:02:51.310 --> 00:02:54.150
particular about the home
equals true parameter.

00:02:54.150 --> 00:02:57.410
It only works right
now if you are

00:02:57.410 --> 00:02:59.600
authorized using OAuth 2.0.

00:02:59.600 --> 00:03:04.800
So it has to be personalized to
you and your own relevant

00:03:04.800 --> 00:03:07.530
activity, but the API needs
to know who you are first.

00:03:07.530 --> 00:03:11.330
So it's actually really easy
using the API Explorer to

00:03:11.330 --> 00:03:13.530
generate an OAuth 2.0 token.

00:03:13.530 --> 00:03:15.100
I can just to do
it using this.

00:03:15.100 --> 00:03:17.550
But if you're a developer and
you're looking to integrate

00:03:17.550 --> 00:03:20.110
this into your application,
you're going to have to take

00:03:20.110 --> 00:03:25.560
some steps to have your users go
through the OAuth 2.0 flow.

00:03:25.560 --> 00:03:28.590
It's made a lot easier by our
client libraries, we have lots

00:03:28.590 --> 00:03:31.590
of material available, including
some good guides on

00:03:31.590 --> 00:03:35.860
our developers on the
google.com/youtube page that

00:03:35.860 --> 00:03:39.790
talk about how you can go
through the OAuth 2.0 flow.

00:03:39.790 --> 00:03:43.300
One thing to note if you are,
for instance, wanting to take

00:03:43.300 --> 00:03:46.440
a user through the OAuth 2.0
flow, but you don't have a

00:03:46.440 --> 00:03:48.360
keyboard in your scenario.

00:03:48.360 --> 00:03:50.490
Maybe you're writing an
application that's on some

00:03:50.490 --> 00:03:53.250
sort of embedded device
or television,

00:03:53.250 --> 00:03:54.680
something like that.

00:03:54.680 --> 00:03:59.290
There is this particular OAuth
2.0 flow that you can use, and

00:03:59.290 --> 00:04:01.190
it's called OAuth
2.0 for Devices.

00:04:01.190 --> 00:04:03.720
And it's really well suited
to this use case.

00:04:03.720 --> 00:04:08.640
Basically, it allows a person
to log in and authorize on

00:04:08.640 --> 00:04:10.270
some computer that
they have nearby.

00:04:10.270 --> 00:04:12.970
And then your application
running on a different machine

00:04:12.970 --> 00:04:15.310
is able to pick up the
authorization.

00:04:15.310 --> 00:04:16.670
So it's pretty nifty.

00:04:16.670 --> 00:04:18.160
Again, consult our

00:04:18.160 --> 00:04:21.089
documentation for more details.

00:04:21.089 --> 00:04:23.940
But in this case, I'm sitting
in front of the computer and

00:04:23.940 --> 00:04:28.300
I'm making use of the handy,
built-in OAuth 2.0 support in

00:04:28.300 --> 00:04:28.810
the API Explorer.

00:04:28.810 --> 00:04:31.350
So I'm just going to click On
right here, and I'm going to

00:04:31.350 --> 00:04:33.310
click Authorized.

00:04:33.310 --> 00:04:35.310
And you just saw something
flash.

00:04:35.310 --> 00:04:38.580
I've previously authorized
access to the API Explorer for

00:04:38.580 --> 00:04:39.560
the account I'm logged in.

00:04:39.560 --> 00:04:42.440
So you didn't see the
full OAuth 2.0

00:04:42.440 --> 00:04:43.660
authorization screen.

00:04:43.660 --> 00:04:48.240
But what this means is if I go
here and click Execute again,

00:04:48.240 --> 00:04:50.140
we're getting back a response
in this case.

00:04:50.140 --> 00:04:54.810
And this is the same sort of
things I would see if I were

00:04:54.810 --> 00:04:55.895
visiting YouTube.com.

00:04:55.895 --> 00:05:00.500
Some videos that might be good
recommendations based on all

00:05:00.500 --> 00:05:02.230
sorts of different signals.

00:05:02.230 --> 00:05:05.260
So you could then display this
in a user interface and have

00:05:05.260 --> 00:05:08.140
folks select the videos that
they want to watch.

00:05:08.140 --> 00:05:10.650
So that's a great experience.

00:05:10.650 --> 00:05:13.300
There are some other ways though
that you might want to

00:05:13.300 --> 00:05:18.450
help users discover new videos,
and not necessarily

00:05:18.450 --> 00:05:22.320
tailored to their recommended
YouTube activities.

00:05:22.320 --> 00:05:25.950
And this kind of equivalent
to Most Popular

00:05:25.950 --> 00:05:27.840
Charts, let's say.

00:05:27.840 --> 00:05:31.495
Which is a concept that might be
familiar to some folks who

00:05:31.495 --> 00:05:33.950
have done previous development
using our older

00:05:33.950 --> 00:05:35.910
version 2.0 of the API.

00:05:35.910 --> 00:05:39.050
Let's say you wanted to retrieve
a list of popular

00:05:39.050 --> 00:05:41.920
videos that meet certain
parameters.

00:05:41.920 --> 00:05:44.180
So there are a few different
approaches for how you could

00:05:44.180 --> 00:05:46.510
do that in version
3.0 of the API.

00:05:46.510 --> 00:05:51.410
One way that you might want
to do that is starting by

00:05:51.410 --> 00:05:54.280
retrieving a list of different
categories.

00:05:54.280 --> 00:05:56.930
So YouTube will maintain
different lists of popular

00:05:56.930 --> 00:06:00.180
videos broken down by
various categories.

00:06:00.180 --> 00:06:02.730
And you could display a list
of those categories to your

00:06:02.730 --> 00:06:05.400
users and say, hey,
select a category.

00:06:05.400 --> 00:06:08.260
And after you select a category,
your application

00:06:08.260 --> 00:06:10.950
displays relevant popular
videos there.

00:06:10.950 --> 00:06:13.860
So assuming you want to take
that route, the first call

00:06:13.860 --> 00:06:16.630
you're going to want
to make is at

00:06:16.630 --> 00:06:18.110
YouTube.videocategories.list.

00:06:18.110 --> 00:06:20.550
Again, we're going to pass in
that snippet parameter.

00:06:20.550 --> 00:06:22.850
And in this case, we are
going to pass in

00:06:22.850 --> 00:06:24.490
a region code parameter.

00:06:24.490 --> 00:06:29.540
I am going to put in the US, but
any two character country

00:06:29.540 --> 00:06:30.720
code should work.

00:06:30.720 --> 00:06:33.300
And I don't need to
be authorized.

00:06:33.300 --> 00:06:35.390
It's not making use of any
personalized data or anything

00:06:35.390 --> 00:06:39.380
like this, I can just go through
it without having an

00:06:39.380 --> 00:06:40.250
OAuth 2.0 token.

00:06:40.250 --> 00:06:43.110
And I'm going to get back
a bunch of these video

00:06:43.110 --> 00:06:44.640
categories.

00:06:44.640 --> 00:06:47.310
These might be familiar to
anybody who's been on the

00:06:47.310 --> 00:06:50.740
YouTube.com website and has
browsed through categories,

00:06:50.740 --> 00:06:56.410
the direct link there between
audio and video vehicles,

00:06:56.410 --> 00:07:01.290
category, music, film and
animation, and so on.

00:07:01.290 --> 00:07:02.630
Let's look in particular
at this

00:07:02.630 --> 00:07:04.160
Pets and Animals category.

00:07:04.160 --> 00:07:06.820
Everybody likes going to YouTube
and finding some great

00:07:06.820 --> 00:07:08.470
pets videos.

00:07:08.470 --> 00:07:13.310
So the relevant piece of
information here is the title,

00:07:13.310 --> 00:07:17.890
Pets and Animals,
and the ID, 15.

00:07:17.890 --> 00:07:19.070
It's a little confusing
because there is

00:07:19.070 --> 00:07:20.520
this channel ID.

00:07:20.520 --> 00:07:22.960
This is more or less just a
placeholder value, it's not

00:07:22.960 --> 00:07:24.700
relevant to your API calls.

00:07:24.700 --> 00:07:29.450
What you really care about is
this ID value over here of 15.

00:07:29.450 --> 00:07:33.100
And after, let's say you
present a list of these

00:07:33.100 --> 00:07:35.510
categories to your user, the
user's chosen a specific

00:07:35.510 --> 00:07:38.970
category, you do a follow up API
call to actually get the

00:07:38.970 --> 00:07:42.190
most popular videos
in that category.

00:07:42.190 --> 00:07:47.560
And you do that using our
YouTube.videos.list operation.

00:07:47.560 --> 00:07:49.080
So you're going to want
to put in again

00:07:49.080 --> 00:07:50.970
the part equals snippet.

00:07:50.970 --> 00:07:54.920
And the charts, right now we
only support retrieving the

00:07:54.920 --> 00:07:58.060
most popular videos, so that's
the only value that

00:07:58.060 --> 00:07:59.480
you could put in.

00:07:59.480 --> 00:08:02.140
You do need to make sure that
you have chart equals most

00:08:02.140 --> 00:08:04.700
popular set because otherwise
it's a completely

00:08:04.700 --> 00:08:06.420
different API call.

00:08:06.420 --> 00:08:07.830
And we're going to scroll
down a bit.

00:08:07.830 --> 00:08:10.180
There are a lot of different
parameters that are

00:08:10.180 --> 00:08:13.570
potentially supported, but
again, I'm going to put in the

00:08:13.570 --> 00:08:18.160
region code here because I want
results that are specific

00:08:18.160 --> 00:08:19.770
to the United States
in this call.

00:08:19.770 --> 00:08:22.590
And I'm going to take that video
category ID I got in the

00:08:22.590 --> 00:08:24.120
previous step.

00:08:24.120 --> 00:08:27.680
Just go back there for a second,
it was 15, for Pets

00:08:27.680 --> 00:08:29.160
and Animals.

00:08:29.160 --> 00:08:32.870
And I'm going to put that
in right over here.

00:08:32.870 --> 00:08:40.140
So I'm going to click Execute,
and here are some great videos

00:08:40.140 --> 00:08:42.039
related to pets or animals.

00:08:42.039 --> 00:08:44.350
You can see, pretty relevant.

00:08:44.350 --> 00:08:48.500
But if I were to change the
region code from US to JP for

00:08:48.500 --> 00:08:50.190
Japan, for instance, you'll
get a completely

00:08:50.190 --> 00:08:53.320
different set of videos.

00:08:53.320 --> 00:08:57.660
I will fully trust that that
is Japanese characters and

00:08:57.660 --> 00:09:01.710
these are videos that are very
relevant in Japan in the Pets

00:09:01.710 --> 00:09:03.520
and Animals category.

00:09:03.520 --> 00:09:07.690
So that's a good way that you
can get some really customized

00:09:07.690 --> 00:09:11.130
charts depending upon the
category you're interested in

00:09:11.130 --> 00:09:14.220
or the region code that
you're interested in.

00:09:14.220 --> 00:09:14.450
So that's cool.

00:09:14.450 --> 00:09:17.710
One of the things that we talked
about before, but is

00:09:17.710 --> 00:09:21.230
also related to video discovery,
is making use of

00:09:21.230 --> 00:09:24.520
Search And in particular,
Search that's powered by

00:09:24.520 --> 00:09:29.150
Freebase or Google Knowledge
Graph topic IDs.

00:09:29.150 --> 00:09:32.660
So I'm going to put another
annotation in this video that

00:09:32.660 --> 00:09:34.520
points to a previous show that
we've done that goes into

00:09:34.520 --> 00:09:39.080
great detail about what Freebase
topic IDs are and

00:09:39.080 --> 00:09:41.840
gives you explanations on how
you could look up the relevant

00:09:41.840 --> 00:09:46.270
topic IDs for a specific
concept.

00:09:46.270 --> 00:09:49.740
But in the interest of brevity
in this show, I'm just going

00:09:49.740 --> 00:09:53.130
to give you one concrete example
of how you could do a

00:09:53.130 --> 00:09:56.890
YouTube Search List operation.

00:09:56.890 --> 00:10:00.590
And we're going to pass in a
topic ID that I looked up

00:10:00.590 --> 00:10:04.500
previously, and this is the
specific topic ID that

00:10:04.500 --> 00:10:06.800
corresponds to American
football.

00:10:06.800 --> 00:10:09.990
So this is actually a nice way
of narrowing down exactly what

00:10:09.990 --> 00:10:12.730
you're interested in finding
instead of putting in a

00:10:12.730 --> 00:10:16.270
generic search term of football,
which might match

00:10:16.270 --> 00:10:19.560
things that are European
football, otherwise known as

00:10:19.560 --> 00:10:23.430
soccer, or might match things
that are not directly related

00:10:23.430 --> 00:10:24.710
to American football.

00:10:24.710 --> 00:10:28.090
Putting this topic ID in here
means all the results that I

00:10:28.090 --> 00:10:31.660
get are definitely related to
American football, and that's

00:10:31.660 --> 00:10:35.060
a great way of discovering
content when you know exactly

00:10:35.060 --> 00:10:36.510
what you're looking for.

00:10:36.510 --> 00:10:38.790
So those are the two fields
that I've filled in.

00:10:38.790 --> 00:10:42.200
I click Execute, and
the results are

00:10:42.200 --> 00:10:44.870
all related to that.

00:10:44.870 --> 00:10:46.910
So there are some additional
parameters that you could put

00:10:46.910 --> 00:10:50.430
into your search call, things
like Published Before,

00:10:50.430 --> 00:10:52.660
Published After, different
orderings.

00:10:52.660 --> 00:10:56.020
So take a look at our
documentation on that.

00:10:56.020 --> 00:10:59.190
It's a great way of finding
content they you might not

00:10:59.190 --> 00:11:02.690
otherwise have found
specifically related to a

00:11:02.690 --> 00:11:05.530
given topic.

00:11:05.530 --> 00:11:09.030
So we've talked about how you
can find videos using version

00:11:09.030 --> 00:11:12.270
3.0 of the API, but you can also
find channels that your

00:11:12.270 --> 00:11:15.010
users might be interested in
either subscribing to or just

00:11:15.010 --> 00:11:19.070
viewing the recent activity
related to those channels, see

00:11:19.070 --> 00:11:20.710
some videos that have
been uploaded into

00:11:20.710 --> 00:11:22.420
them, things like that.

00:11:22.420 --> 00:11:25.580
And we do have API calls that
are related to channel

00:11:25.580 --> 00:11:27.160
discovery as well.

00:11:27.160 --> 00:11:33.320
So much like we started the
process of finding video

00:11:33.320 --> 00:11:38.350
categories by doing our Video
Categories list in the process

00:11:38.350 --> 00:11:42.110
of finding channels,
you first do a

00:11:42.110 --> 00:11:43.700
YouTube.guidecategories.list.

00:11:43.700 --> 00:11:45.465
It's not called channel
categories, it's called guide

00:11:45.465 --> 00:11:46.940
categories.

00:11:46.940 --> 00:11:49.230
So be sure you're
clear on that.

00:11:49.230 --> 00:11:50.890
But this is the right
call to make.

00:11:50.890 --> 00:11:53.570
You do part equals snippet, and
again you pass in a region

00:11:53.570 --> 00:11:56.790
code, two character
country code.

00:11:56.790 --> 00:12:00.940
You click Execute, and you'll
get back these results.

00:12:00.940 --> 00:12:03.710
So things like Best of YouTube,
featured channels,

00:12:03.710 --> 00:12:07.750
paid channels, music channels,
comedy, so on.

00:12:07.750 --> 00:12:10.800
Go over here, let's get
some gaming channels.

00:12:10.800 --> 00:12:13.660
Everybody loves gaming
content on YouTube.

00:12:13.660 --> 00:12:17.700
So this is the value that we
want over here, the ID value.

00:12:17.700 --> 00:12:21.480
Again, the channel ID that is
also returned is not going to

00:12:21.480 --> 00:12:24.100
be really relevant, it's just
kind of a placeholder value.

00:12:24.100 --> 00:12:27.670
So the two relevant things are
the title, which is Gaming,

00:12:27.670 --> 00:12:32.310
and the ID, which we're going
to copy right over here.

00:12:32.310 --> 00:12:36.140
And you take the values from
that previous call and then

00:12:36.140 --> 00:12:38.620
you can do a
YouTube.channels.list call.

00:12:38.620 --> 00:12:40.340
So again, part equals snippet.

00:12:40.340 --> 00:12:43.690
The category ID is that previous
one that we looked up

00:12:43.690 --> 00:12:46.030
for gaming.

00:12:46.030 --> 00:12:50.450
And we're going to click Execute
down here, and we get

00:12:50.450 --> 00:12:51.890
our standard JSON response.

00:12:51.890 --> 00:12:54.860
But this time we're getting a
bunch of information about

00:12:54.860 --> 00:12:56.980
channels, not individual
videos.

00:12:56.980 --> 00:13:01.450
So you'll see in this case the
five channels that we think

00:13:01.450 --> 00:13:04.270
are the most relevant to that
particular category.

00:13:04.270 --> 00:13:07.650
And at that point, you could
display information about the

00:13:07.650 --> 00:13:11.230
channels, do pretty much
whatever you'd like.

00:13:11.230 --> 00:13:14.510
So hopefully that gives folks a
good idea on how they could

00:13:14.510 --> 00:13:17.620
use the latest version of the
Data API to do some common

00:13:17.620 --> 00:13:21.830
operations related to both video
and channel discovery.

00:13:21.830 --> 00:13:23.040
Thanks for watching the show.

00:13:23.040 --> 00:13:26.130
As always, I want to plug the
fact that Google Developer

00:13:26.130 --> 00:13:29.110
Relations, which is the team
I work on, is hiring.

00:13:29.110 --> 00:13:33.415
So you could visit
developers.google.com/jobs and

00:13:33.415 --> 00:13:35.290
find out more information
there.

00:13:35.290 --> 00:13:37.380
And thanks very much for
watching the show.

00:13:37.380 --> 00:13:41.640
We had a bunch of different
links in the show, links to

00:13:41.640 --> 00:13:42.940
blog posts, things like that.

00:13:42.940 --> 00:13:44.840
Check out some of the
annotations in the video

00:13:44.840 --> 00:13:45.490
description.

00:13:45.490 --> 00:13:47.810
We'll include all those links
there so you can read more

00:13:47.810 --> 00:13:49.610
about the topics we covered.

00:13:49.610 --> 00:13:51.730
Thanks everybody, have
a great week.

