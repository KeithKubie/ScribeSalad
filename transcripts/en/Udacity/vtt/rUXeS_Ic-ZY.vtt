WEBVTT
Kind: captions
Language: en

00:00:00.170 --> 00:00:04.150
Let's look at the solution for the part three of our one cycle quiz,

00:00:04.150 --> 00:00:09.230
which is about, if this is the state at the beginning of the cycle then

00:00:09.230 --> 00:00:13.780
during this cycle, which if in instruction will this batch into the ALU here.

00:00:15.870 --> 00:00:19.380
And, this instruction we already saw in part two.

00:00:21.620 --> 00:00:25.230
Is going to free its reservation station and it's already executing, so

00:00:25.230 --> 00:00:30.620
it will definitely not dispatch again. This instruction here,

00:00:30.620 --> 00:00:34.854
will capture its last remaining operand during this cycle, so

00:00:34.854 --> 00:00:38.620
it becomes eligible for dispatch after that.

00:00:40.080 --> 00:00:44.900
We said that in the same cycle capture and then dispatch is allowed, so

00:00:44.900 --> 00:00:49.600
this instruction here is a candidate for dispatching.

00:00:49.600 --> 00:00:54.640
We're also going to issue this instruction here, into our reservation station.

00:00:55.860 --> 00:01:00.069
But because the issue and the dispatch is not allowed in the same cycle,

00:01:00.069 --> 00:01:04.141
that means that this instruction, even if its operands were ready,

00:01:04.141 --> 00:01:08.515
would not be eligible for dispatch now. So the only instruction eligible for

00:01:08.515 --> 00:01:12.842
dispatch is this one, which means that, that's the one that gets to dispatch.

00:01:12.842 --> 00:01:17.066
If more than one instruction were eligible for dispatch, then we would have to

00:01:17.066 --> 00:01:21.013
pick, which one dispatch is because we only have one execution unit. And

00:01:21.013 --> 00:01:24.556
in order to do that, we would actually need to be told what are the rules for

00:01:24.556 --> 00:01:26.058
picking among instructions.

00:01:26.058 --> 00:01:29.565
Fortunately, we didn't need that because only one is eligible for dispatch.

