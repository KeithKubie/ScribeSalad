WEBVTT
Kind: captions
Language: en

00:00:12.150 --> 00:00:13.880
TAKASHI MATSUO: Hi.

00:00:13.880 --> 00:00:17.800
I'm Takashi Matsuo, Developer
Advocate on App Engine.

00:00:17.800 --> 00:00:19.990
DANNY HERMES: And I'm Danny
Hermes, Developer Programs

00:00:19.990 --> 00:00:21.460
Engineer on App Engine.

00:00:21.460 --> 00:00:21.810
TAKASHI MATSUO: Yeah.

00:00:21.810 --> 00:00:28.170
Today we're going to have our
talk about OAuth2 Decorator.

00:00:28.170 --> 00:00:35.830
And speaking of OAuth2, I had
an experience a year ago.

00:00:35.830 --> 00:00:42.710
I wrote a sample App Engine
application using Google class

00:00:42.710 --> 00:00:46.970
API with or without
OAuth2 flow.

00:00:46.970 --> 00:00:51.880
And it was not a very
bad experience.

00:00:51.880 --> 00:00:57.950
It was just easy as checking
out their Google+ Client

00:00:57.950 --> 00:01:03.680
Library and copy it to your
project directory and tweak

00:01:03.680 --> 00:01:05.019
the setting up.

00:01:05.019 --> 00:01:07.860
But I almost forgot
about the details.

00:01:07.860 --> 00:01:11.590
So I'm not eligible to
talk about that.

00:01:11.590 --> 00:01:12.640
So--

00:01:12.640 --> 00:01:14.400
DANNY HERMES: Here I go
with the details.

00:01:14.400 --> 00:01:15.750
TAKASHI MATSUO: So go ahead.

00:01:15.750 --> 00:01:18.460
DANNY HERMES: So OAuth,
in general--

00:01:18.460 --> 00:01:22.390
OAuth1 first, and now OAuth2 has
caused a lot of people a

00:01:22.390 --> 00:01:23.260
lot of pain.

00:01:23.260 --> 00:01:27.080
And people say, the only thing
worse than OAuth2 is OAuth1.

00:01:27.080 --> 00:01:30.720
So we want to make these tools
as easy as possible for you

00:01:30.720 --> 00:01:33.770
guys, our developers,
to actually use it.

00:01:33.770 --> 00:01:36.520
And think about building
features into your

00:01:36.520 --> 00:01:39.560
applications, rather than
actually having to figure out

00:01:39.560 --> 00:01:41.370
how OAuth works every
single time.

00:01:41.370 --> 00:01:44.870
So I'm going to try to go
through from beginning to end

00:01:44.870 --> 00:01:48.360
on how you would develop an
application using the OAuth2

00:01:48.360 --> 00:01:51.170
Decorator in the Python
runtime of App Engine.

00:01:51.170 --> 00:01:51.825
OK?

00:01:51.825 --> 00:01:52.080
TAKASHI MATSUO: OK.

00:01:52.080 --> 00:01:55.120
DANNY HERMES: So the first
thing you need to do when

00:01:55.120 --> 00:01:58.960
using OAuth is tell Google,
hey, I have an application

00:01:58.960 --> 00:02:00.970
that's going to be
performing OAuth.

00:02:00.970 --> 00:02:06.840
So I will go to the Google
API's console.

00:02:06.840 --> 00:02:13.090
It can be found at
code.google.com/apis/console.

00:02:13.090 --> 00:02:15.690
It takes me to a project I've
already got going, but we'll

00:02:15.690 --> 00:02:18.260
create a new one
just for this.

00:02:18.260 --> 00:02:25.500
So my new one we will call,
GDL Dummy Project.

00:02:25.500 --> 00:02:26.460
You guys aren't dummies.

00:02:26.460 --> 00:02:27.710
The project is a dummy.

00:02:30.620 --> 00:02:34.140
And as it loads, as it loads.

00:02:34.140 --> 00:02:34.370
OK.

00:02:34.370 --> 00:02:35.030
There we go.

00:02:35.030 --> 00:02:38.780
So this is a list of services
that I will

00:02:38.780 --> 00:02:39.810
actually be able to call.

00:02:39.810 --> 00:02:41.450
A list of Google APIs
that I'll be able to

00:02:41.450 --> 00:02:42.900
call with this project.

00:02:42.900 --> 00:02:46.800
Now, I haven't told you this
yet, but I'm going to be

00:02:46.800 --> 00:02:48.380
calling the Tasks API.

00:02:48.380 --> 00:02:52.940
The Tasks API is a way for you
to keep track of things that

00:02:52.940 --> 00:02:53.440
you're doing.

00:02:53.440 --> 00:02:56.180
Or for your application to help
users track things that

00:02:56.180 --> 00:02:58.910
they're doing when they want
to get them done by, when

00:02:58.910 --> 00:03:01.720
they've completed them,
a general task list.

00:03:01.720 --> 00:03:05.340
So we're going to go down
and find the Tasks API.

00:03:05.340 --> 00:03:06.440
There it is.

00:03:06.440 --> 00:03:07.880
And click that button.

00:03:07.880 --> 00:03:09.110
It goes from on to off.

00:03:09.110 --> 00:03:12.210
Now, had I not done this--
actually making requests to

00:03:12.210 --> 00:03:16.700
the Tasks API with an
application using this API

00:03:16.700 --> 00:03:20.290
Console Project would give
me 403 forbidden error.

00:03:20.290 --> 00:03:24.160
Even if I were to have a valid
OAuth token, I would still not

00:03:24.160 --> 00:03:26.310
have access to the API because
I wouldn't have turned the

00:03:26.310 --> 00:03:26.970
service on.

00:03:26.970 --> 00:03:30.100
Now, when I was preparing for
this, it took me about two

00:03:30.100 --> 00:03:32.180
minutes to actually realize
that I had forgot

00:03:32.180 --> 00:03:33.000
to check this box.

00:03:33.000 --> 00:03:37.670
So it's very important to opt in
to all the APIs that you're

00:03:37.670 --> 00:03:40.460
going to be using that
are on this list.

00:03:40.460 --> 00:03:45.260
So the next thing
is API Access.

00:03:45.260 --> 00:03:49.530
So right now we have an API key,
but we need a Client ID

00:03:49.530 --> 00:03:52.110
and a Client Secret because this
Client ID and this Client

00:03:52.110 --> 00:03:55.830
Secret is how we actually
perform the OAuth dance.

00:03:55.830 --> 00:04:00.830
And we need to actually give
this to our Decorator when we

00:04:00.830 --> 00:04:02.890
construct it in our code.

00:04:02.890 --> 00:04:04.920
So we're going to create it
before we actually have to

00:04:04.920 --> 00:04:07.000
have one in our code.

00:04:07.000 --> 00:04:08.280
OK?

00:04:08.280 --> 00:04:14.520
So we're just going to
be using local hosts.

00:04:14.520 --> 00:04:20.190
So for our homepage
http://localhost8080.

00:04:20.190 --> 00:04:25.320
This will be local only, but if
you had an App Engine app,

00:04:25.320 --> 00:04:27.620
your app ID dot app [INAUDIBLE]
dot com would be

00:04:27.620 --> 00:04:28.760
your homepage.

00:04:28.760 --> 00:04:32.630
And our product Dummy Task
App is what it is.

00:04:32.630 --> 00:04:34.490
And we don't actually
need a logo.

00:04:34.490 --> 00:04:36.730
So then it's going to ask us if
it's a web application, a

00:04:36.730 --> 00:04:39.300
service account, or an installed
application.

00:04:39.300 --> 00:04:42.840
So this is going to be a web
application, obviously, hosted

00:04:42.840 --> 00:04:44.330
on App Engine.

00:04:44.330 --> 00:04:49.400
And the actual site is

00:04:49.400 --> 00:04:53.580
localhost:8080, as I said before.

00:04:53.580 --> 00:04:56.360
And what we'll get for
a redirect URI--

00:04:56.360 --> 00:04:58.395
I don't know if people can see
it, but it's http://localhost

00:04:58.395 --> 00:05:04.550
:8080/oauth2callback.

00:05:04.550 --> 00:05:08.130
And this is actually the default
callback used to

00:05:08.130 --> 00:05:12.500
handle a response from
Google when the

00:05:12.500 --> 00:05:14.070
OAuth2 dance is complete.

00:05:14.070 --> 00:05:16.960
So for those who aren't entirely
familiar with OAuth,

00:05:16.960 --> 00:05:19.020
I'm not going to go too much
into detail about it because

00:05:19.020 --> 00:05:21.760
we're really talking about App
Engine with OAuth, not OAuth

00:05:21.760 --> 00:05:23.310
as a standalone.

00:05:23.310 --> 00:05:27.600
But what happens is your
application with this Client

00:05:27.600 --> 00:05:30.990
ID and this Client Secret that
we're trying to get will

00:05:30.990 --> 00:05:37.030
actually send a request to a
Google URL that your user can

00:05:37.030 --> 00:05:39.170
authorize your application
or not.

00:05:39.170 --> 00:05:40.380
Right?

00:05:40.380 --> 00:05:44.300
And then after that, if the user
says Allow Access, they

00:05:44.300 --> 00:05:46.550
get redirected to your
application to a

00:05:46.550 --> 00:05:48.000
URI that you specify.

00:05:48.000 --> 00:05:49.767
So in this case, we specify
//oauth2callback.

00:05:52.830 --> 00:05:58.610
And at /oauth2callback we
actually have to handle the

00:05:58.610 --> 00:06:03.210
redirect from the Google OAuth2
part of the handshake

00:06:03.210 --> 00:06:05.990
and determine whether or not
we have a valid user.

00:06:05.990 --> 00:06:09.480
And that is what the OAuth2
Decorator is going

00:06:09.480 --> 00:06:10.210
to allow us to do.

00:06:10.210 --> 00:06:14.530
So here I'm going to go
create this Client ID.

00:06:14.530 --> 00:06:15.410
OK, cool.

00:06:15.410 --> 00:06:19.790
So now we have a Client ID
and a Client Secret.

00:06:19.790 --> 00:06:22.230
And we have a few other things,
like this redirect URI

00:06:22.230 --> 00:06:23.390
that we just specified.

00:06:23.390 --> 00:06:26.700
And if we were going to be using
a Google API directly

00:06:26.700 --> 00:06:28.800
from JavaScript, we also
have an origin, which

00:06:28.800 --> 00:06:31.970
is trusted by Google.

00:06:31.970 --> 00:06:35.240
So we're just going to leave
this like that for now.

00:06:35.240 --> 00:06:38.210
And we're going to go hop into
our App Engine and actually

00:06:38.210 --> 00:06:39.115
start building an application.

00:06:39.115 --> 00:06:40.680
Do you have a question?

00:06:40.680 --> 00:06:41.040
TAKASHI MATSUO: No.

00:06:41.040 --> 00:06:41.400
No.

00:06:41.400 --> 00:06:42.170
DANNY HERMES: OK.

00:06:42.170 --> 00:06:45.130
I thought I heard Takashi making
a noise like he wanted

00:06:45.130 --> 00:06:47.470
to talk, but apparently he
didn't have a question.

00:06:47.470 --> 00:06:48.400
All right, cool.

00:06:48.400 --> 00:06:53.500
So I'm here programming
on my Mac.

00:06:53.500 --> 00:06:56.410
And I've got a Google App
Engine Launcher open.

00:06:56.410 --> 00:07:01.780
And I have already loaded up the
project that I'm going to

00:07:01.780 --> 00:07:03.490
be working on, the app.

00:07:03.490 --> 00:07:10.160
So just to start us out, we've
got a simple application.

00:07:10.160 --> 00:07:11.760
It's running Python 2.7.

00:07:11.760 --> 00:07:14.900
If people are still on Python
2.5, I strongly encourage

00:07:14.900 --> 00:07:16.860
going to Python 2.7.

00:07:16.860 --> 00:07:21.220
And for all paths--
all routes--

00:07:21.220 --> 00:07:27.470
we're just using main.py
via this file.

00:07:27.470 --> 00:07:30.480
And all it's doing is
saying, hello GDL.

00:07:30.480 --> 00:07:34.040
So let's run that.

00:07:34.040 --> 00:07:35.820
And we're going to take
this simple main.py.

00:07:35.820 --> 00:07:39.320
And we're going to turn it into
our application that uses

00:07:39.320 --> 00:07:41.000
the OAuth2 Decorator.

00:07:41.000 --> 00:07:44.750
So let's just go to
localhost:8080.

00:07:44.750 --> 00:07:46.690
There we go.

00:07:46.690 --> 00:07:48.030
Hello, GDL!

00:07:48.030 --> 00:07:48.800
OK.

00:07:48.800 --> 00:07:49.250
Great.

00:07:49.250 --> 00:07:55.170
So now we want to add
some of the things

00:07:55.170 --> 00:07:57.340
provided for OAuth2.

00:07:57.340 --> 00:07:59.610
So what we actually want to use
to interact with Google

00:07:59.610 --> 00:08:03.390
APIs is a library called the
Google API Python Client.

00:08:03.390 --> 00:08:10.770
So the Google API Python Client
is a library used for

00:08:10.770 --> 00:08:13.170
Python to actually interact
with Google APIs, and it

00:08:13.170 --> 00:08:15.250
actually provides this
thing we want.

00:08:15.250 --> 00:08:17.680
So in order to use it
with App Engine,

00:08:17.680 --> 00:08:20.220
there's a specific download.

00:08:20.220 --> 00:08:22.530
It's on the download's
page of the product--

00:08:22.530 --> 00:08:23.230
project.

00:08:23.230 --> 00:08:24.100
Excuse me.

00:08:24.100 --> 00:08:27.530
And it's called full
dependencies build for Google

00:08:27.530 --> 00:08:30.930
App Engine projects with version
1.0 of this library.

00:08:30.930 --> 00:08:34.450
So I'm going to go grab this.

00:08:34.450 --> 00:08:37.570
I'm going to copy the address
of the download.

00:08:37.570 --> 00:08:43.530
And I will just wget it into my
directory of the project.

00:08:43.530 --> 00:08:45.240
And then I'm going
to just unzip it.

00:08:45.240 --> 00:08:48.640
And by doing this, you're
actually able to have all the

00:08:48.640 --> 00:08:50.250
dependencies that you need.

00:08:50.250 --> 00:08:52.470
So I just did a quick [? LS ?]

00:08:52.470 --> 00:08:53.460
in the directory.

00:08:53.460 --> 00:08:57.840
And we have OAuth2 Client URI
template, http:web2, the main

00:08:57.840 --> 00:09:00.010
dependencies needed
to actually use

00:09:00.010 --> 00:09:02.500
Google API Python Client.

00:09:02.500 --> 00:09:05.780
So that's the first step.

00:09:05.780 --> 00:09:07.330
Now once we've done
that, we can start

00:09:07.330 --> 00:09:08.990
importing things from it.

00:09:08.990 --> 00:09:18.270
So to actually build a service
object, call Google API from

00:09:18.270 --> 00:09:22.880
the API Client package provided
with this library,

00:09:22.880 --> 00:09:24.773
we're going to import a
method called Build.

00:09:24.773 --> 00:09:25.759
OK?

00:09:25.759 --> 00:09:27.240
TAKASHI MATSUO: OK.

00:09:27.240 --> 00:09:32.830
DANNY HERMES: And then from
the OAuth2 Client Package,

00:09:32.830 --> 00:09:36.130
within the App Engine module,
we're going to import this

00:09:36.130 --> 00:09:37.510
OAuth2 Decorator.

00:09:37.510 --> 00:09:41.330
Now, I have some notes where
I can check this later.

00:09:41.330 --> 00:09:43.920
There may be some typos, or
maybe I'm capitalizing

00:09:43.920 --> 00:09:45.320
something wrong,
but we'll see.

00:09:45.320 --> 00:09:48.410
That's the fun of a
live demo, right?

00:09:48.410 --> 00:09:51.750
And using these two, we can
accomplish pretty much

00:09:51.750 --> 00:09:53.140
everything we want
to accomplish.

00:09:53.140 --> 00:09:57.900
So the first thing we'll do--
we'll have a Decorator, which

00:09:57.900 --> 00:09:59.740
is an instance of OAuth2
Decorator.

00:09:59.740 --> 00:10:02.240
And here we need to pass in
our Client ID, our Client

00:10:02.240 --> 00:10:04.460
Secret, and then also a scope.

00:10:04.460 --> 00:10:08.130
And this scope is going
to give us access to

00:10:08.130 --> 00:10:09.120
a particular thing.

00:10:09.120 --> 00:10:12.040
So since we're using the
Tasks API, we actually

00:10:12.040 --> 00:10:13.550
need a Tasks Scope.

00:10:13.550 --> 00:10:16.880
I mentioned before that had we
not turned on that Tasks

00:10:16.880 --> 00:10:19.620
service, then we would
have got a 403.

00:10:19.620 --> 00:10:26.150
By the same token, if we
request an OAuth2 token

00:10:26.150 --> 00:10:31.560
without the correct scope, and
we make an API request that

00:10:31.560 --> 00:10:34.320
needs that scope, then that
will, of course, be rejected.

00:10:34.320 --> 00:10:38.730
So we're going to have to
specify a specific scope.

00:10:38.730 --> 00:10:39.540
OK.

00:10:39.540 --> 00:10:42.980
So first the Client ID-- we'll
go back to the console.

00:10:42.980 --> 00:10:46.970
We see here my Client
ID, 1 0, et cetera.

00:10:46.970 --> 00:10:49.720
I'm just going to fill
that in as a string.

00:10:49.720 --> 00:10:50.270
Oh, man.

00:10:50.270 --> 00:10:51.270
It's a long string.

00:10:51.270 --> 00:10:55.590
I don't like exceeding 80
characters, 80 columns.

00:10:55.590 --> 00:10:58.580
So we're going to do that.

00:10:58.580 --> 00:10:59.830
It's a bit--

00:11:02.470 --> 00:11:04.920
how to say?

00:11:04.920 --> 00:11:06.890
It's not so big a deal,
but I don't like it.

00:11:06.890 --> 00:11:07.330
OK.

00:11:07.330 --> 00:11:09.870
And then we go get our Client
Secret from the same page,

00:11:09.870 --> 00:11:13.240
VMJ5FD, et cetera.

00:11:13.240 --> 00:11:16.610
Now, when you're developing
applications, don't commit

00:11:16.610 --> 00:11:18.800
these Client Secrets to
open source projects.

00:11:18.800 --> 00:11:20.510
Don't leave them out
in the open.

00:11:20.510 --> 00:11:23.260
Don't expose them in
JavaScript or HTML.

00:11:23.260 --> 00:11:24.950
These are secret, right?

00:11:24.950 --> 00:11:27.880
For the purposes of this demo,
I'm letting you all see

00:11:27.880 --> 00:11:31.750
because this project on the
Google API's Console, I'm just

00:11:31.750 --> 00:11:33.700
going to throw away
after this.

00:11:33.700 --> 00:11:35.880
But in general, this
is a secret.

00:11:35.880 --> 00:11:38.650
And this is how you're actually
keeping the OAuth

00:11:38.650 --> 00:11:41.020
handshake that you do
with Google secure.

00:11:41.020 --> 00:11:45.590
By loading it into main.py, it's
known server-side, so you

00:11:45.590 --> 00:11:48.490
can actually perform the
authentication server-side.

00:11:48.490 --> 00:11:51.080
But you definitely don't want to
expose this client-side or,

00:11:51.080 --> 00:11:53.950
like I said, as part of an
open source project.

00:11:53.950 --> 00:11:59.650
And as the final keyword
argument to the OAuth2

00:11:59.650 --> 00:12:04.200
Decorator Constructor, we're
going to pass in the scope.

00:12:04.200 --> 00:12:06.035
So the scope we want here is--

00:12:10.000 --> 00:12:12.840
I don't know exactly if
this is what it is.

00:12:12.840 --> 00:12:15.880
But this is approximately
what it is.

00:12:15.880 --> 00:12:17.609
It's the scope for Tasks,
https://www.goog

00:12:17.609 --> 00:12:26.240
leapis.com/off/tasks.

00:12:26.240 --> 00:12:29.250
I believe that's what it is.

00:12:29.250 --> 00:12:30.820
But we'll see.

00:12:30.820 --> 00:12:32.400
If we get a failure,
we get a failure.

00:12:32.400 --> 00:12:35.790
That's the fun, the
fun of this.

00:12:35.790 --> 00:12:36.480
TAKASHI MATSUO: Looks-- yeah.

00:12:36.480 --> 00:12:37.360
Looks correct.

00:12:37.360 --> 00:12:37.820
DANNY HERMES: OK.

00:12:37.820 --> 00:12:38.610
Looks correct.

00:12:38.610 --> 00:12:39.380
There we go.

00:12:39.380 --> 00:12:43.820
Honestly, I could google it, but
I'd rather take my chances

00:12:43.820 --> 00:12:47.360
just for your benefit of seeing
how you really debug

00:12:47.360 --> 00:12:48.130
these things.

00:12:48.130 --> 00:12:49.230
MALE SPEAKER: We'll do a live.

00:12:49.230 --> 00:12:50.810
DANNY HERMES: We'll
do it live.

00:12:50.810 --> 00:12:51.620
I'll write it.

00:12:51.620 --> 00:12:54.380
We'll do it live.

00:12:54.380 --> 00:12:56.550
If you don't know the reference,
you should google

00:12:56.550 --> 00:12:59.000
that exact phrase.

00:12:59.000 --> 00:13:04.080
And then, after building the
Decorator, we actually need to

00:13:04.080 --> 00:13:05.500
interact with Google APIs.

00:13:05.500 --> 00:13:10.380
Actually before I go about doing
this, let's just use

00:13:10.380 --> 00:13:11.460
this Decorator.

00:13:11.460 --> 00:13:18.700
So there are two particular
ways we use the Decorator.

00:13:18.700 --> 00:13:20.810
We can either require--

00:13:20.810 --> 00:13:27.260
that particular route is
authenticated with OAuth.

00:13:27.260 --> 00:13:31.000
Or we can say that we're aware
whether or not it is.

00:13:31.000 --> 00:13:32.200
OK?

00:13:32.200 --> 00:13:40.200
So for this one, we're just
going to require that the main

00:13:40.200 --> 00:13:44.930
page Handler actually is
decorated with OAuth.

00:13:44.930 --> 00:13:48.060
And hence, any requests
that come through--

00:13:48.060 --> 00:13:52.000
if the user is either, A, not
signed in, or, B, the

00:13:52.000 --> 00:13:57.290
signed-in user has not actually
done the OAuth dance

00:13:57.290 --> 00:13:59.680
with the application, then this
will first happen before

00:13:59.680 --> 00:14:01.460
they can actually
visit this page.

00:14:01.460 --> 00:14:02.280
OK?

00:14:02.280 --> 00:14:04.600
So now, I've got
this Decorator,

00:14:04.600 --> 00:14:05.580
which we hope works.

00:14:05.580 --> 00:14:06.110
Maybe it will.

00:14:06.110 --> 00:14:07.790
Maybe it won't.

00:14:07.790 --> 00:14:10.950
And we're requiring that in
order for somebody to visit

00:14:10.950 --> 00:14:13.720
the main page of our
application, they are signed

00:14:13.720 --> 00:14:14.500
in via OAuth.

00:14:14.500 --> 00:14:15.240
OK?

00:14:15.240 --> 00:14:19.350
So now, let's go back to this
main page and reload.

00:14:19.350 --> 00:14:21.990
Ah, wonderful.

00:14:21.990 --> 00:14:23.680
So something went wrong.

00:14:23.680 --> 00:14:26.840
What went wrong?

00:14:26.840 --> 00:14:27.810
OK.

00:14:27.810 --> 00:14:29.170
My import was wrong.

00:14:29.170 --> 00:14:29.960
I know what it was.

00:14:29.960 --> 00:14:32.540
So I said it was in the
API Client Package.

00:14:32.540 --> 00:14:33.220
It's not.

00:14:33.220 --> 00:14:36.500
It's in the discovery modules
in the API Client Package.

00:14:36.500 --> 00:14:39.280
So that's easy to debug.

00:14:39.280 --> 00:14:43.570
For those unclear on what I did
so quickly, I went to my

00:14:43.570 --> 00:14:45.790
handy dandy Google App
Engine Launcher.

00:14:45.790 --> 00:14:47.560
I clicked Logs.

00:14:47.560 --> 00:14:49.480
And then I went to my
logs to actually see

00:14:49.480 --> 00:14:50.155
what was going on.

00:14:50.155 --> 00:14:52.100
And it told me Import Error.

00:14:52.100 --> 00:14:53.460
Can't Import Name Built.

00:14:53.460 --> 00:14:55.230
And that jogged my memory.

00:14:55.230 --> 00:14:59.900
Now, when you're doing this on
your own, you won't be typing

00:14:59.900 --> 00:15:00.610
this from scratch.

00:15:00.610 --> 00:15:02.210
You'll be referring to
our documentation

00:15:02.210 --> 00:15:03.260
and things like this.

00:15:03.260 --> 00:15:06.542
So hopefully these sorts
of things don't happen.

00:15:06.542 --> 00:15:07.315
Ah, wonderful.

00:15:07.315 --> 00:15:08.040
TAKASHI MATSUO: Oh yeah.

00:15:08.040 --> 00:15:08.550
DANNY HERMES: Great.

00:15:08.550 --> 00:15:12.410
So what happened here,
I refreshed the page.

00:15:12.410 --> 00:15:13.750
I'm no longer on local host.

00:15:13.750 --> 00:15:15.630
I'm on accounts.google.com/--

00:15:15.630 --> 00:15:20.450
this giant long URI containing
all the information Google

00:15:20.450 --> 00:15:23.460
needs to actually perform
OAuth specific to my

00:15:23.460 --> 00:15:26.820
application and specific to
actually the scope I needed.

00:15:26.820 --> 00:15:33.140
So you see here Dummy Task App,
the name we gave it in

00:15:33.140 --> 00:15:36.310
the API's Console, is requesting
permission to

00:15:36.310 --> 00:15:37.450
manage your tasks.

00:15:37.450 --> 00:15:40.270
So since we see Manager Task,
we know we didn't

00:15:40.270 --> 00:15:40.990
screw up the scope.

00:15:40.990 --> 00:15:43.810
We have the scope
that we needed.

00:15:43.810 --> 00:15:46.830
And in addition to this, it
wants to perform these when

00:15:46.830 --> 00:15:48.120
I'm not using the application.

00:15:48.120 --> 00:15:53.280
So the default value of offline
is used for access,

00:15:53.280 --> 00:15:58.010
which means that if the
application is going to manage

00:15:58.010 --> 00:16:01.380
my tasks, maybe I can set an
alarm-- say like, wake me up

00:16:01.380 --> 00:16:02.680
or something like this.

00:16:02.680 --> 00:16:05.570
Maybe that would be something
worthwhile to do

00:16:05.570 --> 00:16:06.810
with the Tasks API.

00:16:06.810 --> 00:16:09.970
I'm hinting at the future of
the rest of this talk.

00:16:09.970 --> 00:16:13.110
So, oh.

00:16:13.110 --> 00:16:14.460
What went wrong?

00:16:14.460 --> 00:16:15.740
I know what went wrong.

00:16:15.740 --> 00:16:18.930
But this is, again, part of the
debugging process, right?

00:16:18.930 --> 00:16:21.860
So what happened is we got

00:16:21.860 --> 00:16:24.570
localhost:8080 OAuth2 Callback.

00:16:24.570 --> 00:16:28.120
And now, this is what Google
knows to redirect for our

00:16:28.120 --> 00:16:29.670
application.

00:16:29.670 --> 00:16:33.030
And this is what we, in the API
console, said we wanted to

00:16:33.030 --> 00:16:34.220
redirect to.

00:16:34.220 --> 00:16:35.280
So why doesn't this work?

00:16:35.280 --> 00:16:39.200
Well, if we look at our
application code, the only

00:16:39.200 --> 00:16:42.400
route we're serving is slash
root, the root of our

00:16:42.400 --> 00:16:43.040
application.

00:16:43.040 --> 00:16:43.580
Right?

00:16:43.580 --> 00:16:48.880
So we actually need to serve
the route, OAuth2 Callback.

00:16:48.880 --> 00:16:50.540
But have no fear.

00:16:50.540 --> 00:16:53.150
You don't have to figure out how
you might do this because

00:16:53.150 --> 00:16:55.280
the Decorator does all of it.

00:16:55.280 --> 00:16:56.080
OK?

00:16:56.080 --> 00:16:59.140
So we'll add another handler.

00:16:59.140 --> 00:17:03.260
So the route that we're actually
going to use is

00:17:03.260 --> 00:17:04.510
decorator.callback_url.

00:17:06.450 --> 00:17:07.480
Is this what it is?

00:17:07.480 --> 00:17:10.190
Now, this one I want
to double check.

00:17:10.190 --> 00:17:10.810
Oh.

00:17:10.810 --> 00:17:12.650
It's not on the thing
that Takashi's got.

00:17:12.650 --> 00:17:14.060
TAKASHI MATSUO: Oh,
yeah, yeah.

00:17:14.060 --> 00:17:17.480
DANNY HERMES: Let me quick
pull up my reference.

00:17:17.480 --> 00:17:21.130
I'm cheating, but that's OK.

00:17:21.130 --> 00:17:21.920
There we go.

00:17:21.920 --> 00:17:23.730
Callback path.

00:17:23.730 --> 00:17:25.010
There are way too many
characters in

00:17:25.010 --> 00:17:26.099
this for me to memorize.

00:17:26.099 --> 00:17:28.960
Sorry, folks.

00:17:28.960 --> 00:17:33.600
So let me explain what I've just
done after I've got it

00:17:33.600 --> 00:17:34.900
formatted to my liking.

00:17:34.900 --> 00:17:35.400
OK.

00:17:35.400 --> 00:17:40.450
So the path is
decorator.callback_path.

00:17:40.450 --> 00:17:43.270
Now, we don't actually have to
specify callback_path, but if

00:17:43.270 --> 00:17:47.910
we had wanted to, we could use
callback_path= some other

00:17:47.910 --> 00:17:51.130
string when we actually
construct the Decorator.

00:17:51.130 --> 00:17:53.910
But the default value of
callback_path is the same

00:17:53.910 --> 00:18:00.010
default that the Google API
Console used, OAuth2 Callback.

00:18:00.010 --> 00:18:02.130
So we don't have to
worry about that.

00:18:02.130 --> 00:18:04.470
And then,
decorator.callback_handler

00:18:04.470 --> 00:18:08.210
actually gives us a handler
to deal with this traffic.

00:18:08.210 --> 00:18:11.330
So now that we've updated it to
actually be able to handle

00:18:11.330 --> 00:18:14.210
that route, let's
try this again--

00:18:14.210 --> 00:18:15.602
debugged.

00:18:15.602 --> 00:18:16.070
Ah.

00:18:16.070 --> 00:18:17.990
What went wrong?

00:18:17.990 --> 00:18:19.540
I know what went wrong.

00:18:19.540 --> 00:18:21.340
I didn't close a bracket.

00:18:21.340 --> 00:18:22.710
My bad.

00:18:22.710 --> 00:18:25.740
Bracket closed.

00:18:25.740 --> 00:18:26.510
There we go.

00:18:26.510 --> 00:18:27.550
OK.

00:18:27.550 --> 00:18:29.380
So we're back to where
we were before.

00:18:29.380 --> 00:18:31.670
The same accounts.google.com
OAuth page.

00:18:31.670 --> 00:18:34.750
Again, with the correct
scope, the Task Scope.

00:18:34.750 --> 00:18:37.300
And we're going to
allow access.

00:18:37.300 --> 00:18:38.100
Great.

00:18:38.100 --> 00:18:39.600
So nothing changed.

00:18:39.600 --> 00:18:42.110
I didn't actually change
the content of

00:18:42.110 --> 00:18:45.640
this, but we are actually--

00:18:45.640 --> 00:18:47.730
and I can show you
guys real quick.

00:18:47.730 --> 00:18:50.725
I'll go to the Admin Console
for this application.

00:18:53.300 --> 00:18:54.870
That is too big.

00:18:54.870 --> 00:18:58.650
And if I click List Entities,
we'll see that I actually have

00:18:58.650 --> 00:19:02.380
an entity that is a Credentials
Model for my

00:19:02.380 --> 00:19:03.010
application.

00:19:03.010 --> 00:19:11.320
So I've actually now got OAuth
credentials stored for the

00:19:11.320 --> 00:19:12.720
user that I'm signed in as.

00:19:12.720 --> 00:19:13.370
OK?

00:19:13.370 --> 00:19:14.600
Great.

00:19:14.600 --> 00:19:15.740
We've got credentials.

00:19:15.740 --> 00:19:17.620
Now, we want to do something
with them, right?

00:19:17.620 --> 00:19:18.000
TAKASHI MATSUO: Yeah.

00:19:18.000 --> 00:19:18.740
DANNY HERMES: OK.

00:19:18.740 --> 00:19:23.900
So instead of being boring and
saying, hello, GDL, I'm going

00:19:23.900 --> 00:19:27.890
to actually go get all the tasks
for the signed-in user

00:19:27.890 --> 00:19:29.730
and display them to him.

00:19:29.730 --> 00:19:31.770
That's somewhat simple, right?

00:19:31.770 --> 00:19:34.030
So we're going to do this.

00:19:34.030 --> 00:19:39.580
So in order to do this, I'll go
back and do the other thing

00:19:39.580 --> 00:19:40.540
that I started to.

00:19:40.540 --> 00:19:44.230
I'm going to create a service
object to actually interact

00:19:44.230 --> 00:19:45.300
with Google APIs.

00:19:45.300 --> 00:19:49.030
And in particular, we want to
interact with the Tasks API.

00:19:49.030 --> 00:19:53.430
So this method build, which we
imported incorrectly, and now

00:19:53.430 --> 00:19:56.750
we're importing correctly, takes
an API name and an API

00:19:56.750 --> 00:19:59.600
version and spits out an object
that you can interact

00:19:59.600 --> 00:20:01.370
with that API with.

00:20:01.370 --> 00:20:06.540
So the API name is tasks
and the version is v1.

00:20:06.540 --> 00:20:09.200
So in order to build that,
we simply call

00:20:09.200 --> 00:20:12.160
service=build tasks, v1.

00:20:12.160 --> 00:20:14.120
I'm going to refresh
this to make sure--

00:20:14.120 --> 00:20:14.610
OK.

00:20:14.610 --> 00:20:16.150
We're all good with that.

00:20:16.150 --> 00:20:18.320
OK, great.

00:20:18.320 --> 00:20:25.660
And now using this service, the
Tasks API has a resource

00:20:25.660 --> 00:20:27.380
called Tasks.

00:20:27.380 --> 00:20:29.620
And within that resource,
it has several methods.

00:20:29.620 --> 00:20:33.120
The one we want to use, in
particular, is the list

00:20:33.120 --> 00:20:34.790
method, right?

00:20:34.790 --> 00:20:39.390
So let me get my handy dandy
reference just for my sake.

00:20:44.760 --> 00:20:49.160
There, again, too much here
for me to go from memory.

00:20:49.160 --> 00:20:52.160
But so what we do here--

00:20:52.160 --> 00:20:57.000
we take our service object,
service.tasks.

00:20:57.000 --> 00:20:58.890
If we call that with no
argument, it gives us the

00:20:58.890 --> 00:21:01.690
sub-resource of the
API, called Tasks.

00:21:01.690 --> 00:21:03.070
And this is a way for
users to actually

00:21:03.070 --> 00:21:04.660
interact with their tasks.

00:21:04.660 --> 00:21:07.960
And now, within that resource,
we have this list method,

00:21:07.960 --> 00:21:11.270
which actually allows users to
list the tasks they have.

00:21:11.270 --> 00:21:15.490
And so we want a list of
our tasks from the

00:21:15.490 --> 00:21:16.630
default task list.

00:21:16.630 --> 00:21:21.730
So into the method list, we
pass tasklist=@default.

00:21:21.730 --> 00:21:24.370
And that gives us all the tasks
that we would have in

00:21:24.370 --> 00:21:27.560
the list that we see in Gmail,
for example, when we look at

00:21:27.560 --> 00:21:29.740
the default task
list in Gmail.

00:21:29.740 --> 00:21:32.990
And in order to execute
this, we want to use

00:21:32.990 --> 00:21:34.240
the signed-in user.

00:21:34.240 --> 00:21:38.490
And we know, since we've
specified the decorator.oauth

00:21:38.490 --> 00:21:42.200
required that there will be a
signed-in user if we get to

00:21:42.200 --> 00:21:43.440
actually run this method.

00:21:43.440 --> 00:21:44.260
Right?

00:21:44.260 --> 00:21:49.260
So when we actually execute this
method after passing in

00:21:49.260 --> 00:21:54.880
the argument tasklist= to the
list method, we're actually

00:21:54.880 --> 00:21:58.770
going to execute this by calling
.execute, and passing

00:21:58.770 --> 00:22:04.160
in as our HTTP object, our
authenticated object for

00:22:04.160 --> 00:22:07.440
making this request, passing
the token that we've just

00:22:07.440 --> 00:22:10.475
gotten, we're going to just
simply pass in decorator.http.

00:22:13.670 --> 00:22:15.110
Now, decorator.http--

00:22:20.200 --> 00:22:23.330
decorator.http, the method,
is just a method from the

00:22:23.330 --> 00:22:25.740
Decorator Object that we created
in the Global Scope

00:22:25.740 --> 00:22:28.260
before we actually created
any of our handlers.

00:22:28.260 --> 00:22:32.760
But when we actually call that
method, it is able to imply

00:22:32.760 --> 00:22:34.580
and authenticate an
HTTP instance

00:22:34.580 --> 00:22:35.990
from the current context.

00:22:35.990 --> 00:22:40.920
So this exact handler could have
decorator.http correspond

00:22:40.920 --> 00:22:44.150
to a different user, depending
on who makes it.

00:22:44.150 --> 00:22:44.740
Excuse me.

00:22:44.740 --> 00:22:50.290
Which user is actually having
the request served by

00:22:50.290 --> 00:22:51.540
mainpage.get.

00:22:54.060 --> 00:22:56.830
So the point is that
decorator.http depends on the

00:22:56.830 --> 00:22:59.670
current context and will
actually give you an

00:22:59.670 --> 00:23:03.360
authenticated HTTP object
for the current user.

00:23:03.360 --> 00:23:05.280
So great.

00:23:05.280 --> 00:23:06.280
We're going to call this.

00:23:06.280 --> 00:23:09.440
And we'll get a list of tasks.

00:23:09.440 --> 00:23:11.580
I'm going to pop this to the
next line, so we don't go over

00:23:11.580 --> 00:23:13.460
80 columns.

00:23:13.460 --> 00:23:18.170
Now, this list of tasks will
have a lot of things in it.

00:23:18.170 --> 00:23:23.310
Rather than going through and
taking out the parts we want,

00:23:23.310 --> 00:23:25.650
I'm just going to show you
the whole thing for now.

00:23:25.650 --> 00:23:30.310
So I've imported pretty print or
pprint in Python, so we can

00:23:30.310 --> 00:23:34.560
print what we get back in a
somewhat user-readable format.

00:23:34.560 --> 00:23:37.640
So instead of hello, GDL,
I'm going to write

00:23:37.640 --> 00:23:43.730
prettyprint.pformat of the
response we got back.

00:23:43.730 --> 00:23:44.850
Sound good?

00:23:44.850 --> 00:23:45.270
TAKASHI MATSUO: Yeah.

00:23:45.270 --> 00:23:46.370
DANNY HERMES: Sounds good.

00:23:46.370 --> 00:23:47.150
All right.

00:23:47.150 --> 00:23:48.910
So we'll go back here.

00:23:48.910 --> 00:23:50.080
Hope we didn't make
any mistakes.

00:23:50.080 --> 00:23:51.040
Maybe we did.

00:23:51.040 --> 00:23:53.440
Maybe we didn't, but
that's the great

00:23:53.440 --> 00:23:56.040
thing of a live demo.

00:23:56.040 --> 00:23:58.830
Loading, loading, awesome.

00:23:58.830 --> 00:24:01.720
So this is what the response
looks like.

00:24:01.720 --> 00:24:06.190
So we have a tag.

00:24:06.190 --> 00:24:10.570
We have items as another key.

00:24:10.570 --> 00:24:12.880
And then, down here
we have a kind.

00:24:12.880 --> 00:24:15.440
But really the only thing
we want is items.

00:24:15.440 --> 00:24:18.530
So this list of items gives us
a list of all our tasks.

00:24:18.530 --> 00:24:21.540
And then from there, we have
some other keys, like when the

00:24:21.540 --> 00:24:26.630
task is due, the ID of the
task, the position of the

00:24:26.630 --> 00:24:30.260
task, and most importantly,
the title of the task.

00:24:30.260 --> 00:24:33.560
So in reality, instead of
displaying everything, we

00:24:33.560 --> 00:24:35.460
would rather just go
get the items.

00:24:35.460 --> 00:24:37.500
So items=tasks--

00:24:37.500 --> 00:24:40.420
task is a dictionary, so
we can call task.get.

00:24:40.420 --> 00:24:44.970
Give it our key items
that we see here.

00:24:44.970 --> 00:24:47.500
And if that fails, we'll just
say, get [? the empty ?]

00:24:47.500 --> 00:24:49.580
list instead.

00:24:49.580 --> 00:24:55.220
And then, the response we would
want to send back, and

00:24:55.220 --> 00:24:56.280
since we're--

00:24:56.280 --> 00:24:59.590
I didn't mention this, but we're
sending back text plain.

00:24:59.590 --> 00:25:02.790
So rather than actually trying
to render HTML, is just going

00:25:02.790 --> 00:25:05.200
to render plain text
in the browser.

00:25:05.200 --> 00:25:07.800
And so we can use new line
characters without having to

00:25:07.800 --> 00:25:10.680
use the HTML BR character,
right?

00:25:10.680 --> 00:25:14.190
It's somewhat of a benefit.

00:25:14.190 --> 00:25:22.760
So for each task in Tasks,
there we go.

00:25:22.760 --> 00:25:23.976
TAKASHI MATSUO: Items.

00:25:23.976 --> 00:25:24.790
No?

00:25:24.790 --> 00:25:26.640
DANNY HERMES: Sorry.

00:25:26.640 --> 00:25:28.250
You're exactly right.

00:25:28.250 --> 00:25:28.950
Good call.

00:25:28.950 --> 00:25:30.640
My bad.

00:25:30.640 --> 00:25:33.830
That was about to be another
bug, but Takashi jumped right

00:25:33.830 --> 00:25:34.610
in front of that.

00:25:34.610 --> 00:25:38.780
And saved us that tiny bit
of time for that bug.

00:25:38.780 --> 00:25:41.810
So for each task in items, we're
actually just going to

00:25:41.810 --> 00:25:44.380
get the title.

00:25:44.380 --> 00:25:49.150
And fall back to the empty
string, if there is no title.

00:25:49.150 --> 00:25:53.890
And then, we will join
these by a new line

00:25:53.890 --> 00:25:56.770
character in Python.

00:25:56.770 --> 00:26:00.550
Newline.join this
list of titles.

00:26:00.550 --> 00:26:03.600
So if I call this, instead
using that.

00:26:03.600 --> 00:26:03.950
Oh.

00:26:03.950 --> 00:26:05.113
I didn't actually change--

00:26:05.113 --> 00:26:05.860
TAKASHI MATSUO: It's
still showing--

00:26:05.860 --> 00:26:06.565
DANNY HERMES: You're right.

00:26:06.565 --> 00:26:07.640
TAKASHI MATSUO: [INAUDIBLE].

00:26:07.640 --> 00:26:08.760
DANNY HERMES: I never
change what gets

00:26:08.760 --> 00:26:09.850
written to the response.

00:26:09.850 --> 00:26:14.550
So instead of pprint.pprint
[INAUDIBLE], I actually need

00:26:14.550 --> 00:26:16.020
to change to response.

00:26:16.020 --> 00:26:17.530
Thank you, Takashi.

00:26:17.530 --> 00:26:18.820
Bug number two that he found.

00:26:18.820 --> 00:26:21.570
So make the request again now.

00:26:21.570 --> 00:26:24.640
And then we see, Take a nap.

00:26:24.640 --> 00:26:25.680
I've got two minutes.

00:26:25.680 --> 00:26:28.010
I kind of want to write a
handler that will let me

00:26:28.010 --> 00:26:29.050
insert another task.

00:26:29.050 --> 00:26:31.090
And then, we'll come
back to this.

00:26:31.090 --> 00:26:33.890
Though, I think we should open
the floor to questions.

00:26:33.890 --> 00:26:40.170
Really what I wanted you guys
to see was using the OAuth2

00:26:40.170 --> 00:26:43.300
Decorator is as simple as
getting a Client ID and a

00:26:43.300 --> 00:26:45.650
Client Secret and specifying
your scope.

00:26:45.650 --> 00:26:47.900
And once you have that
Decorator, you can use it in

00:26:47.900 --> 00:26:50.555
cases like this,
[? decorator.oauthrequired. ?]

00:26:53.850 --> 00:26:57.550
And once you have actually
required that your users are

00:26:57.550 --> 00:27:01.040
signed in with OAuth, you can
do things like we did here

00:27:01.040 --> 00:27:04.660
with tasks=service.tasks,
et cetera.

00:27:04.660 --> 00:27:07.840
And you can execute these with
authenticated HTTP objects

00:27:07.840 --> 00:27:09.540
that you don't have to
worry about creating.

00:27:09.540 --> 00:27:11.930
You don't have to worry about
persisting the credentials for

00:27:11.930 --> 00:27:12.740
your users.

00:27:12.740 --> 00:27:14.580
It's all done by the
Decorator for you.

00:27:14.580 --> 00:27:17.000
And it's super handy.

00:27:17.000 --> 00:27:19.950
I will make one other
quick note.

00:27:19.950 --> 00:27:22.790
This stuff is all documented.

00:27:22.790 --> 00:27:24.040
If you just go ahead--

00:27:30.140 --> 00:27:33.640
If you go to
developers.google.com, and you

00:27:33.640 --> 00:27:36.720
search for OAuth2 Decorator--
developers.google.com actually

00:27:36.720 --> 00:27:39.350
has really great search, if
people weren't aware.

00:27:39.350 --> 00:27:41.860
So if you go and you search for
OAuth2 Decorator, the very

00:27:41.860 --> 00:27:46.390
first hit, using Google App
Engine, will give you all this

00:27:46.390 --> 00:27:50.650
that we just gave
you and more.

00:27:50.650 --> 00:27:55.290
And it will give you plenty
of other situations.

00:27:55.290 --> 00:27:57.800
So another situation,
other than OAuth

00:27:57.800 --> 00:28:00.400
Required, is OAuth Aware.

00:28:00.400 --> 00:28:02.640
So rather than actually
requiring the user go through

00:28:02.640 --> 00:28:06.150
the Flow, you find out if
the current user has

00:28:06.150 --> 00:28:07.390
gone through the Flow.

00:28:07.390 --> 00:28:09.070
And if they have, you
do one thing.

00:28:09.070 --> 00:28:10.620
You serve, maybe, their tasks.

00:28:10.620 --> 00:28:13.860
And if they haven't, you say,
hey, you haven't gone through

00:28:13.860 --> 00:28:14.460
the Flow yet.

00:28:14.460 --> 00:28:16.420
Do you want to, or do you just
want to look around?

00:28:16.420 --> 00:28:18.530
Do you want to read some
more, et cetera.

00:28:18.530 --> 00:28:19.670
And it's really up to you.

00:28:19.670 --> 00:28:21.860
So I encourage you go to
the documentation.

00:28:21.860 --> 00:28:26.000
If people want us to see us
do another live demo doing

00:28:26.000 --> 00:28:29.480
similar things, we would
be happy to, because we

00:28:29.480 --> 00:28:31.770
acknowledge that the
OAuth dance is

00:28:31.770 --> 00:28:32.690
not the easiest thing.

00:28:32.690 --> 00:28:37.530
And we want to help make
it easier for you guys.

00:28:37.530 --> 00:28:41.140
So it's already 9:30, but let's
try to answer a few

00:28:41.140 --> 00:28:44.056
questions-- one or two questions
from moderator.

00:28:44.056 --> 00:28:47.260
Do you have any particular
preferences on what you'd like

00:28:47.260 --> 00:28:48.510
to do, Takashi?

00:28:50.700 --> 00:28:52.080
TAKASHI MATSUO: Sure.

00:28:52.080 --> 00:28:52.520
Yeah.

00:28:52.520 --> 00:28:56.925
Here's a question, which is--

00:28:56.925 --> 00:28:59.240
DANNY HERMES: Let me read it,
and you can answer it.

00:28:59.240 --> 00:29:00.045
This guy?

00:29:00.045 --> 00:29:00.400
TAKASHI MATSUO: Yeah.

00:29:00.400 --> 00:29:01.570
Probably, yeah.

00:29:01.570 --> 00:29:03.570
DANNY HERMES: So it says, I know
this session is focused

00:29:03.570 --> 00:29:06.300
on consuming Google APIs, but
I was wondering if these

00:29:06.300 --> 00:29:10.500
concepts apply to third party
APIs also supporting OAuth2?

00:29:10.500 --> 00:29:12.500
Or if a different toolset
is needed.

00:29:12.500 --> 00:29:13.360
Many thanks.

00:29:13.360 --> 00:29:15.550
From [? Zugaldia ?]

00:29:15.550 --> 00:29:17.050
in Washington, DC.

00:29:17.050 --> 00:29:18.370
Sorry if I butchered
that name.

00:29:20.870 --> 00:29:22.740
So do you want me
to answer this?

00:29:22.740 --> 00:29:24.040
Or did you want to
answer this?

00:29:24.040 --> 00:29:26.740
Or I'd be happy to.

00:29:26.740 --> 00:29:30.800
So these are specific to Google
APIs, but they're not

00:29:30.800 --> 00:29:33.040
actually explicitly specific
to Google APIs.

00:29:33.040 --> 00:29:36.230
So the Google API Python Client
Library can be used

00:29:36.230 --> 00:29:38.610
with any discovery-based API.

00:29:38.610 --> 00:29:42.360
And so what's happening when
we call build tasks v1, it

00:29:42.360 --> 00:29:45.460
actually goes and retrieves
a discovery document.

00:29:45.460 --> 00:29:52.370
And from there, it can create
all the necessary things like,

00:29:52.370 --> 00:29:55.380
service.tasks.lists that
we saw, right?

00:29:55.380 --> 00:29:58.540
But if any other discovery-based
API that isn't

00:29:58.540 --> 00:30:02.690
from Google, if you wish to use
that, in addition to Tasks

00:30:02.690 --> 00:30:07.230
v1, you would specify a specific
URI template that

00:30:07.230 --> 00:30:10.080
those can be inserted into,
which would let you retrieve a

00:30:10.080 --> 00:30:11.340
discovery document.

00:30:11.340 --> 00:30:12.850
And that would still work.

00:30:12.850 --> 00:30:15.690
And then, when you would create
your Decorator, in

00:30:15.690 --> 00:30:22.200
addition to a Client ID and a
scope, you would also specify

00:30:22.200 --> 00:30:25.790
a token URI and an Auth URI.

00:30:25.790 --> 00:30:29.110
And both of these are official
parts of the OAuth2 spec,

00:30:29.110 --> 00:30:30.420
which has nothing to
do with Google.

00:30:30.420 --> 00:30:34.280
It's just a general Auth
spec on the web.

00:30:34.280 --> 00:30:38.430
But this library is specific for
Discovery APIs, but not to

00:30:38.430 --> 00:30:40.850
Google APIs.

00:30:40.850 --> 00:30:42.660
I see a Cloud Endpoints
question.

00:30:42.660 --> 00:30:43.740
Can I take that?

00:30:43.740 --> 00:30:45.630
I've been working a lot
on Cloud Endpoints.

00:30:45.630 --> 00:30:48.780
TAKASHI MATSUO: Do you guys plan
on extending App Engine--

00:30:48.780 --> 00:30:49.780
DANNY HERMES: I see.

00:30:49.780 --> 00:30:50.280
TAKASHI MATSUO: [INAUDIBLE]

00:30:50.280 --> 00:30:52.030
OAuth 2.0.

00:30:52.030 --> 00:30:55.350
I know it's already supported in
Cloud Endpoints, so my best

00:30:55.350 --> 00:31:00.100
guess would be yes, but thought
I'd ask anyway.

00:31:00.100 --> 00:31:02.000
DANNY HERMES: Now, I understand
why Takashi had

00:31:02.000 --> 00:31:02.500
scrolled down.

00:31:02.500 --> 00:31:05.530
We don't generally
give estimates or

00:31:05.530 --> 00:31:07.230
comments on new features.

00:31:07.230 --> 00:31:08.370
So sorry.

00:31:08.370 --> 00:31:12.500
Can't answer that one, but we
are serious about OAuth2.

00:31:12.500 --> 00:31:15.280
So do we want to wrap up, or
do we want to do one more?

00:31:15.280 --> 00:31:17.630
TAKASHI MATSUO: Yeah.

00:31:17.630 --> 00:31:19.650
So one more.

00:31:19.650 --> 00:31:20.150
DANNY HERMES: OK.

00:31:20.150 --> 00:31:20.660
I'll read it.

00:31:20.660 --> 00:31:21.780
You'll answer it, yeah?

00:31:21.780 --> 00:31:24.125
TAKASHI MATSUO: What is the
best practice pattern for

00:31:24.125 --> 00:31:27.660
decorating a POST handler?

00:31:27.660 --> 00:31:30.050
For example, after the
OAuth dance, the

00:31:30.050 --> 00:31:31.560
original post is gone.

00:31:31.560 --> 00:31:36.160
So is it redirected
to get handler the

00:31:36.160 --> 00:31:37.450
right things to do?

00:31:37.450 --> 00:31:39.720
Is the Decorator helpful
with this at all?

00:31:39.720 --> 00:31:44.510
DANNY HERMES: So tell me if
you disagree with this.

00:31:44.510 --> 00:31:47.340
Redirecting from a POST
handler is not good.

00:31:47.340 --> 00:31:48.320
Don't do this.

00:31:48.320 --> 00:31:50.360
That's not the point of POST.

00:31:50.360 --> 00:31:52.680
And if you're using POST within
your application for

00:31:52.680 --> 00:31:58.120
persisting data, creating new
things in your data store, you

00:31:58.120 --> 00:31:59.940
don't want to redirect
after this, right?

00:31:59.940 --> 00:32:02.290
The point of-- you can still
use the Decorator.

00:32:02.290 --> 00:32:05.400
And given more time, I was going
to show you guys this,

00:32:05.400 --> 00:32:08.880
but you can still use the
Decorator on a POST handler in

00:32:08.880 --> 00:32:10.280
the exact same fashion.

00:32:10.280 --> 00:32:13.230
And you can still call Decorator
to HTTP and make

00:32:13.230 --> 00:32:16.030
these requests, but from a POST
handler you'd be doing

00:32:16.030 --> 00:32:22.210
something more like inserting an
object, rather than listing

00:32:22.210 --> 00:32:25.560
some titles or some tasks
as we saw here, right?

00:32:25.560 --> 00:32:30.590
So after you complete the
insertion, you would give some

00:32:30.590 --> 00:32:32.900
response back to whatever
the caller was.

00:32:32.900 --> 00:32:35.520
So your POST request, maybe,
would be called asynchronously

00:32:35.520 --> 00:32:38.040
from your UI, right?

00:32:38.040 --> 00:32:42.070
And so the best practice is you
can use the Decorator in

00:32:42.070 --> 00:32:45.440
exactly the same fashion, but
doing a redirect is not

00:32:45.440 --> 00:32:49.830
something you want to do.

00:32:49.830 --> 00:32:55.100
I guess using the OAuth Aware
handler is probably better.

00:32:55.100 --> 00:32:59.300
And if you're using OAuth
Aware, you won't get

00:32:59.300 --> 00:32:59.840
redirected.

00:32:59.840 --> 00:33:01.980
And maybe that's really what the
heart of the question was

00:33:01.980 --> 00:33:04.870
is, will that redirect happen
if I use OAuth Required?

00:33:04.870 --> 00:33:08.560
So if you use OAuth Aware on
your POST handler, then you

00:33:08.560 --> 00:33:10.650
can check if decorator.

00:33:10.650 --> 00:33:12.020
has credentials.

00:33:12.020 --> 00:33:14.230
And if it has credentials, you
can do what you would have

00:33:14.230 --> 00:33:16.080
done in the required case.

00:33:16.080 --> 00:33:18.740
And if it doesn't have
credentials, you can serve a

00:33:18.740 --> 00:33:20.480
simple response, like a 400.

00:33:20.480 --> 00:33:25.010
And maybe give adjacent error
message that smart clients,

00:33:25.010 --> 00:33:27.450
like your UI, could consume
and actually

00:33:27.450 --> 00:33:30.020
do something with.

00:33:30.020 --> 00:33:31.614
Sound good?

00:33:31.614 --> 00:33:32.041
TAKASHI MATSUO: Yeah.

00:33:32.041 --> 00:33:32.470
I think so.

00:33:32.470 --> 00:33:35.860
DANNY HERMES: Do you have any
other clarifications or

00:33:35.860 --> 00:33:38.170
contradictions to what I said?

00:33:38.170 --> 00:33:40.661
Takashi knows way more than
I do about this stuff.

00:33:40.661 --> 00:33:43.200
TAKASHI MATSUO: No.

00:33:43.200 --> 00:33:49.600
What he's asking is, whether the
payload is still there or

00:33:49.600 --> 00:33:51.245
not on the POST handler?

00:33:51.245 --> 00:33:51.550
DANNY HERMES: What?

00:33:51.550 --> 00:33:53.620
How do you mean?

00:33:53.620 --> 00:33:57.550
TAKASHI MATSUO: So when the
redirect happens on the POST

00:33:57.550 --> 00:34:01.060
handler after coming
back to the--

00:34:01.060 --> 00:34:02.910
DANNY HERMES: So--

00:34:02.910 --> 00:34:03.950
TAKASHI MATSUO: --their
callback

00:34:03.950 --> 00:34:06.800
URL, the payload will--

00:34:06.800 --> 00:34:07.370
DANNY HERMES: Yeah.

00:34:07.370 --> 00:34:08.630
TAKASHI MATSUO: --be
lost, right?

00:34:08.630 --> 00:34:11.670
DANNY HERMES: I believe it will
be lost, but you don't

00:34:11.670 --> 00:34:15.020
want to actually redirect
a POST handler, right?

00:34:15.020 --> 00:34:17.980
You want to make it so that when
the POST request comes

00:34:17.980 --> 00:34:22.320
in, the cookies set in that POST
request from your user

00:34:22.320 --> 00:34:26.150
session will be able
to be used.

00:34:26.150 --> 00:34:29.030
And if there are no cookies with
that POST request, then

00:34:29.030 --> 00:34:31.120
you just give an
error message.

00:34:31.120 --> 00:34:35.270
So like I sort of stumbled
through at the beginning of my

00:34:35.270 --> 00:34:39.469
answer, you don't
actually want--

00:34:39.469 --> 00:34:41.650
you don't actually want to be
doing a redirect from a POST

00:34:41.650 --> 00:34:43.780
for the exact reason
that Takashi said.

00:34:43.780 --> 00:34:46.630
The payload won't make it
through a redirect to a third

00:34:46.630 --> 00:34:48.300
party and then back to you.

00:34:48.300 --> 00:34:52.290
So you want to be able to
use this payload via

00:34:52.290 --> 00:34:53.860
decorator.oauth_aware.

00:34:53.860 --> 00:34:57.488
And if you can't, then you
just serve an error.

00:34:57.488 --> 00:34:58.300
TAKASHI MATSUO: OK.

00:34:58.300 --> 00:34:59.352
DANNY HERMES: Thanks for
the clarification.

00:34:59.352 --> 00:34:59.770
TAKASHI MATSUO: No problem.

00:34:59.770 --> 00:35:00.900
DANNY HERMES: Thanks
everybody.

00:35:00.900 --> 00:35:01.700
TAKASHI MATSUO: Yeah.

00:35:01.700 --> 00:35:02.750
DANNY HERMES: It was great.

00:35:02.750 --> 00:35:03.830
Have a great new year.

00:35:03.830 --> 00:35:07.320
This will be our last
GDL of 2012.

00:35:07.320 --> 00:35:10.920
And we hope to do many
more in 2013.

00:35:10.920 --> 00:35:12.170
TAKASHI MATSUO: OK.

