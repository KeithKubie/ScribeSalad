WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.375
[MUSIC PLAYING]

00:00:05.059 --> 00:00:06.600
WAYNE PIEKARSKI:
I'm Wayne Piekarski,

00:00:06.600 --> 00:00:08.470
and I'm a developer
advocate here at Google.

00:00:08.470 --> 00:00:09.060
DAVE SMITH: I'm Dave Smith.

00:00:09.060 --> 00:00:11.140
I'm also a developer
advocate here at Google.

00:00:11.140 --> 00:00:12.639
WAYNE PIEKARSKI:
And so today, we're

00:00:12.639 --> 00:00:15.210
going to be talking about how
to make your own custom Android

00:00:15.210 --> 00:00:16.470
Things boards.

00:00:16.470 --> 00:00:18.390
So we showed you
during previous talks,

00:00:18.390 --> 00:00:19.880
if you may have
seen them or not,

00:00:19.880 --> 00:00:22.620
how it's possible that you can
create your own custom hardware

00:00:22.620 --> 00:00:23.610
designs.

00:00:23.610 --> 00:00:25.950
And you can start from
a simple prototype,

00:00:25.950 --> 00:00:28.740
but you can then take it
into a full production device

00:00:28.740 --> 00:00:30.390
that you could then
sell commercially.

00:00:30.390 --> 00:00:33.490
So let's get started
talking about that.

00:00:33.490 --> 00:00:36.615
So in the sandbox area, you may
have seen this little candle

00:00:36.615 --> 00:00:37.990
demo that we've
got set up there.

00:00:37.990 --> 00:00:39.690
If you haven't been
to the sandbox area,

00:00:39.690 --> 00:00:41.500
definitely go and
check that out.

00:00:41.500 --> 00:00:45.710
But it's an example of a little
LED candle that Dave built.

00:00:45.710 --> 00:00:47.880
And so basically, you've
got a little Android Things

00:00:47.880 --> 00:00:50.296
SOM on there, and it
flickers the lights.

00:00:50.296 --> 00:00:51.420
And that's a little candle.

00:00:51.420 --> 00:00:52.964
So he built a plastic
housing for it.

00:00:52.964 --> 00:00:54.130
You can put it inside of it.

00:00:54.130 --> 00:00:55.317
It looks really cool.

00:00:55.317 --> 00:00:57.150
So you can go check
that out in the sandbox.

00:00:57.150 --> 00:00:59.640
But it's a project that Dave
started working on recently,

00:00:59.640 --> 00:01:01.630
and it's something that
he built from scratch

00:01:01.630 --> 00:01:03.760
because Dave's a talented
electronic engineer

00:01:03.760 --> 00:01:07.259
and I just pretend to be
one on a day-to-day basis.

00:01:07.259 --> 00:01:08.800
But the thing I like
about it is it's

00:01:08.800 --> 00:01:10.660
a really compelling
example of how

00:01:10.660 --> 00:01:12.550
to make something
really simple that

00:01:12.550 --> 00:01:14.955
fits within the development
model of Android Things.

00:01:14.955 --> 00:01:17.080
And so you can think of it
as kind of a Hello World

00:01:17.080 --> 00:01:20.290
example for Android Things, a
basic setup that does something

00:01:20.290 --> 00:01:22.390
very simple that you
can then expand and do

00:01:22.390 --> 00:01:23.980
more with later on.

00:01:23.980 --> 00:01:26.620
And it turns out that
building something like this

00:01:26.620 --> 00:01:29.320
is actually reasonably possible
for a hobbyist developer

00:01:29.320 --> 00:01:31.600
at home using a set
of simple tools.

00:01:31.600 --> 00:01:33.550
You don't need a
factory or anything

00:01:33.550 --> 00:01:35.980
crazy to build
something like this.

00:01:35.980 --> 00:01:38.485
And everything we're
showing you in this talk--

00:01:38.485 --> 00:01:40.110
we're going to show
you all the steps--

00:01:40.110 --> 00:01:41.115
but everything's open source.

00:01:41.115 --> 00:01:42.850
So later on, Dave will
show you the links

00:01:42.850 --> 00:01:44.590
of where you can go to find
the information about how

00:01:44.590 --> 00:01:45.446
to get it.

00:01:45.446 --> 00:01:47.570
But everything's open
source, so you can modify it.

00:01:47.570 --> 00:01:48.700
You can study it.

00:01:48.700 --> 00:01:50.764
And we want to show
you how this works

00:01:50.764 --> 00:01:52.930
a bit because hardware
design is one of those things

00:01:52.930 --> 00:01:56.890
that I've always found is
kind of shrouded in mystery.

00:01:56.890 --> 00:01:59.627
And so for software
developers, a lot of people

00:01:59.627 --> 00:02:01.210
think, oh wow,
hardware is really hard

00:02:01.210 --> 00:02:02.126
and it's really scary.

00:02:02.126 --> 00:02:03.760
And I've always
thought that too.

00:02:03.760 --> 00:02:05.560
And it's actually not
an imagined problem.

00:02:05.560 --> 00:02:08.229
It's actually based
on real things.

00:02:08.229 --> 00:02:11.620
It's really complicated to
build high-speed electronics.

00:02:11.620 --> 00:02:14.440
If you look at a modern
motherboard or circuit board,

00:02:14.440 --> 00:02:16.450
there's tons of these
really fine pitch tracks.

00:02:16.450 --> 00:02:19.840
You can see on this
schematic on the screen here

00:02:19.840 --> 00:02:21.220
a bit of an example.

00:02:21.220 --> 00:02:23.160
And there's a lot
of dense packaging.

00:02:23.160 --> 00:02:24.970
There's impedance-matching
requirements,

00:02:24.970 --> 00:02:27.054
and there's noise and
interference considerations.

00:02:27.054 --> 00:02:28.428
And these are all
things you have

00:02:28.428 --> 00:02:30.430
to deal with when you're
building a circuit that

00:02:30.430 --> 00:02:31.840
runs at very high speed.

00:02:31.840 --> 00:02:34.660
Now, if you're building
just an LED and a battery,

00:02:34.660 --> 00:02:35.540
that's pretty simple.

00:02:35.540 --> 00:02:36.340
That's not high-speed.

00:02:36.340 --> 00:02:37.756
But when you're
building something

00:02:37.756 --> 00:02:40.450
that's vibrating at a
gigahertz or some frequency,

00:02:40.450 --> 00:02:42.890
you really need to start
thinking about these issues.

00:02:42.890 --> 00:02:43.840
And one of the
interesting things

00:02:43.840 --> 00:02:45.250
Dave's pointed out
to me when we started

00:02:45.250 --> 00:02:47.230
this talk was if you
look at the bottom right

00:02:47.230 --> 00:02:49.345
underneath that
semiconductor chip there,

00:02:49.345 --> 00:02:52.450
there are these traces that
are like, wiggling around.

00:02:52.450 --> 00:02:54.100
Now, that's not an accident.

00:02:54.100 --> 00:02:57.310
A very smart, intelligent design
person looked at that and went,

00:02:57.310 --> 00:03:01.000
we need to match impedances and
deal with the speed of light

00:03:01.000 --> 00:03:02.980
of an electron
traveling on a wire,

00:03:02.980 --> 00:03:04.510
and they did that on purpose.

00:03:04.510 --> 00:03:06.451
But I didn't know you
had to even do that.

00:03:06.451 --> 00:03:08.200
And so if I made that
board, without that,

00:03:08.200 --> 00:03:09.200
it wouldn't have worked.

00:03:09.200 --> 00:03:12.602
So this stuff's really
tricky, but it turns out,

00:03:12.602 --> 00:03:14.560
though, that with the
way we do Android Things,

00:03:14.560 --> 00:03:16.060
we can solve a lot
of those problems

00:03:16.060 --> 00:03:20.040
and make them easy for us
developers to play with.

00:03:20.040 --> 00:03:21.360
DAVE SMITH: Thanks, Wayne.

00:03:21.360 --> 00:03:23.120
So as Wayne mentioned,
one of the things

00:03:23.120 --> 00:03:25.460
that's sort of a core
philosophy of ours

00:03:25.460 --> 00:03:26.990
when it comes to
enabling developers

00:03:26.990 --> 00:03:29.510
to help build hardware
using Android Things

00:03:29.510 --> 00:03:31.220
is this idea of a
System on Module

00:03:31.220 --> 00:03:32.784
or a SOM-based architecture.

00:03:32.784 --> 00:03:34.700
And we really think of
this as one of the keys

00:03:34.700 --> 00:03:37.431
to developer success in
terms of building hardware.

00:03:37.431 --> 00:03:39.680
And it has a lot to do with
what Wayne just mentioned.

00:03:39.680 --> 00:03:42.230
So let me kind of walk
you through this idea

00:03:42.230 --> 00:03:44.220
and give you some examples here.

00:03:44.220 --> 00:03:47.060
So if you were to look at
a typical developer kit

00:03:47.060 --> 00:03:49.310
that you would buy
for Android Things,

00:03:49.310 --> 00:03:51.420
it might look
something like this.

00:03:51.420 --> 00:03:54.050
And what you may or may not
notice just looking at this

00:03:54.050 --> 00:03:56.840
is this is actually two
different boards stuck

00:03:56.840 --> 00:03:57.450
together.

00:03:57.450 --> 00:04:00.320
So if I explode those out a
little bit, what you can see

00:04:00.320 --> 00:04:03.110
is that we actually have
this larger baseboard,

00:04:03.110 --> 00:04:05.420
or what we often refer
to as a carrier board,

00:04:05.420 --> 00:04:08.340
and then the smaller
modules sitting on top.

00:04:08.340 --> 00:04:10.490
And that's what we refer
to as a system on module,

00:04:10.490 --> 00:04:12.470
a SOM, or a compute module.

00:04:12.470 --> 00:04:17.660
And that module has all of
the compute, the connectivity,

00:04:17.660 --> 00:04:20.209
and the storage hardware
that is essentially

00:04:20.209 --> 00:04:21.890
everything that's
required to build

00:04:21.890 --> 00:04:23.930
a specific tiny,
little computer.

00:04:23.930 --> 00:04:26.570
And that's where all the hard
stuff lives from an electronics

00:04:26.570 --> 00:04:27.410
perspective.

00:04:27.410 --> 00:04:29.390
That's where all the
high-speed stuff is.

00:04:29.390 --> 00:04:32.180
All those impedance requirements
that Wayne just mentioned,

00:04:32.180 --> 00:04:34.610
all of those things live
on that little module.

00:04:34.610 --> 00:04:37.610
And the only piece that you're
responsible for as a developer

00:04:37.610 --> 00:04:40.370
building a new product
is to essentially design

00:04:40.370 --> 00:04:42.620
your own version of
the baseboard that

00:04:42.620 --> 00:04:46.140
applies whatever is specific
to your application.

00:04:46.140 --> 00:04:49.400
So you might just have a
handful of little I/O pieces,

00:04:49.400 --> 00:04:51.380
maybe some connectors for power.

00:04:51.380 --> 00:04:54.740
The reason that the baseboard
design with the developer kit

00:04:54.740 --> 00:04:59.210
is so large is because it
has all the possible I/O that

00:04:59.210 --> 00:05:02.360
could ever come off of this
chip expanded out so that it's

00:05:02.360 --> 00:05:03.620
easy for you to work with.

00:05:03.620 --> 00:05:05.780
You can connect pieces
where you need them.

00:05:05.780 --> 00:05:08.240
But when you go into
production with your design,

00:05:08.240 --> 00:05:10.910
you can make this much,
much smaller and much more

00:05:10.910 --> 00:05:15.110
compact based on just the
elements that you need to apply

00:05:15.110 --> 00:05:18.520
for your specific application.

00:05:18.520 --> 00:05:22.230
OK, one of the other really big
things that people don't always

00:05:22.230 --> 00:05:24.540
think about when it comes
to working with SOMs

00:05:24.540 --> 00:05:25.920
is this idea that
if you're going

00:05:25.920 --> 00:05:28.710
to build an electronic product,
something you're actually

00:05:28.710 --> 00:05:31.320
going to sell to
consumers, you have

00:05:31.320 --> 00:05:33.240
to actually get that
thing tested for safety

00:05:33.240 --> 00:05:35.760
testing, regulatory testing.

00:05:35.760 --> 00:05:38.100
These are things that if
you just develop software,

00:05:38.100 --> 00:05:40.980
you don't maybe necessarily
have ever thought about.

00:05:40.980 --> 00:05:43.120
And this can cost
a lot of money,

00:05:43.120 --> 00:05:46.050
and it can waste your
company a lot of time.

00:05:46.050 --> 00:05:49.440
Certification testing
for FCC and UL,

00:05:49.440 --> 00:05:51.780
things like that, these
can cost on the order

00:05:51.780 --> 00:05:54.450
of tens of thousands
of dollars or more.

00:05:54.450 --> 00:05:58.020
And one of the issues
that SOMs solve for you

00:05:58.020 --> 00:06:01.950
is this idea that these are
pre-certified components

00:06:01.950 --> 00:06:04.480
according to all of those
regulatory standards.

00:06:04.480 --> 00:06:07.000
So the components are
FCC-certified for all

00:06:07.000 --> 00:06:08.640
of the wireless interfaces.

00:06:08.640 --> 00:06:10.620
The power supplies and
all of the other things

00:06:10.620 --> 00:06:12.810
are safety tested
through CSA and UL

00:06:12.810 --> 00:06:15.460
and whatever is required
in your specific country.

00:06:15.460 --> 00:06:19.470
And that drastically reduces,
if not completely eliminates,

00:06:19.470 --> 00:06:22.570
the requirements for testing
on your final product.

00:06:22.570 --> 00:06:26.400
So it's a huge cost-saver to use
these pre-certified components

00:06:26.400 --> 00:06:28.880
in your design.

00:06:28.880 --> 00:06:31.660
All right, a couple of other
benefits of using a SOM--

00:06:31.660 --> 00:06:33.917
one is that, at least with
the SOMs that we work with,

00:06:33.917 --> 00:06:35.750
there are a number of
them that are actually

00:06:35.750 --> 00:06:37.190
fairly interchangeable.

00:06:37.190 --> 00:06:40.340
And this significantly
reduces the amount of rework

00:06:40.340 --> 00:06:42.350
that you might have
to do in your design

00:06:42.350 --> 00:06:44.660
if you decide to move
to a different platform

00:06:44.660 --> 00:06:46.010
or a different vendor.

00:06:46.010 --> 00:06:48.500
So a couple examples of
this, first of all, some

00:06:48.500 --> 00:06:49.460
of our SOMs--

00:06:49.460 --> 00:06:51.620
for instance, the
Intel Edison as well as

00:06:51.620 --> 00:06:54.680
both variants of the NXP
Pico that we support--

00:06:54.680 --> 00:06:57.980
are actually pin-compatible,
meaning that you can literally

00:06:57.980 --> 00:07:01.580
take one off, install the
other one on in its place,

00:07:01.580 --> 00:07:02.997
and it will work
exactly the same.

00:07:02.997 --> 00:07:04.413
You don't have to
make any changes

00:07:04.413 --> 00:07:06.537
to your baseboard hardware
or your custom design.

00:07:06.537 --> 00:07:08.120
So if you decide,
for whatever reason,

00:07:08.120 --> 00:07:11.390
that you need to move
from the Edison to the NXP

00:07:11.390 --> 00:07:13.280
or back and forth,
you don't have

00:07:13.280 --> 00:07:16.280
to make any changes to
your hardware to do that.

00:07:16.280 --> 00:07:18.470
In some other cases, we
also provide variance

00:07:18.470 --> 00:07:21.350
from different vendors so that
you can solve supply chain

00:07:21.350 --> 00:07:22.760
issues if you run into them.

00:07:22.760 --> 00:07:26.000
So another example is that
Pico board that I mentioned

00:07:26.000 --> 00:07:28.370
uses the NXP I.MX 6 chip.

00:07:28.370 --> 00:07:31.670
And we have another SOM that
uses the exact same chip called

00:07:31.670 --> 00:07:32.660
the Argon.

00:07:32.660 --> 00:07:35.960
So you can, again, target a
specific hardware platform,

00:07:35.960 --> 00:07:37.790
but if you're having
supply chain problems

00:07:37.790 --> 00:07:39.770
getting that
specific module, you

00:07:39.770 --> 00:07:41.960
can just go use the
other one in its place.

00:07:41.960 --> 00:07:44.690
So it helps you reduce
the amount of rework

00:07:44.690 --> 00:07:46.610
you might have in
your design based

00:07:46.610 --> 00:07:49.670
on having to deal with some
of these vendor-based issues.

00:07:49.670 --> 00:07:52.830
In addition, SOMs are
highly available components.

00:07:52.830 --> 00:07:55.100
These are essentially
commodity components

00:07:55.100 --> 00:07:57.170
that you can buy
in single quantity,

00:07:57.170 --> 00:08:00.110
or a handful at a time,
or in very large quantity

00:08:00.110 --> 00:08:01.130
for production.

00:08:01.130 --> 00:08:04.160
You're essentially leveraging
the economies of scale

00:08:04.160 --> 00:08:06.230
that the vendors
are participating in

00:08:06.230 --> 00:08:07.442
on your behalf.

00:08:07.442 --> 00:08:09.650
So to give you an example,
if you were to go directly

00:08:09.650 --> 00:08:12.620
to a chip vendor and you were
to buy the CPUs yourself,

00:08:12.620 --> 00:08:14.180
buy the memory and
all these things

00:08:14.180 --> 00:08:17.570
to build this onto your specific
board, generally speaking,

00:08:17.570 --> 00:08:19.400
you would have to
buy those components

00:08:19.400 --> 00:08:21.170
in very large quantities--

00:08:21.170 --> 00:08:23.990
5,000, 10,000 or
more at a time, which

00:08:23.990 --> 00:08:26.030
is very prohibitively
expensive for just

00:08:26.030 --> 00:08:28.100
doing basic prototyping.

00:08:28.100 --> 00:08:30.020
What you do with a
SOM is essentially,

00:08:30.020 --> 00:08:32.230
the vendors that
build the modules

00:08:32.230 --> 00:08:34.190
absorb that cost for you.

00:08:34.190 --> 00:08:37.130
They buy 10,000 of the chips
and then build the modules

00:08:37.130 --> 00:08:39.890
and sell them in such a
way that you can buy one

00:08:39.890 --> 00:08:42.110
if you need it for
your prototype, or 100,

00:08:42.110 --> 00:08:44.630
or 1,000 or even more.

00:08:44.630 --> 00:08:46.940
And finally, SOMs
are well supported,

00:08:46.940 --> 00:08:49.520
both from Google's
perspective, but also

00:08:49.520 --> 00:08:51.390
with the individual vendors.

00:08:51.390 --> 00:08:53.240
So all of the vendors
that we work with

00:08:53.240 --> 00:08:55.850
have long-term support
contracts in place

00:08:55.850 --> 00:08:59.000
so that the hardware that you
choose to build your product on

00:08:59.000 --> 00:09:01.647
is guaranteed to be
supported on into the future

00:09:01.647 --> 00:09:03.980
so that you don't have to
worry about building something

00:09:03.980 --> 00:09:07.920
off a design that goes
into end-of-life next year.

00:09:07.920 --> 00:09:10.650
All right, so let's talk a
little bit about the tools

00:09:10.650 --> 00:09:12.870
and processes that you
might actually go through

00:09:12.870 --> 00:09:15.540
to build one of these things.

00:09:15.540 --> 00:09:17.499
So the first stage
generally-- and those of you

00:09:17.499 --> 00:09:18.956
who have played
with Android Things

00:09:18.956 --> 00:09:20.820
may have done a little
bit of this already.

00:09:20.820 --> 00:09:23.072
But when you first decide
to start using the platform

00:09:23.072 --> 00:09:24.780
and you want to start
building something,

00:09:24.780 --> 00:09:26.154
you're probably
going to purchase

00:09:26.154 --> 00:09:27.840
one of our supported
developer kits.

00:09:27.840 --> 00:09:30.810
This is an example of one of
them using the Intel Edison.

00:09:30.810 --> 00:09:32.760
And from here, you
would generally

00:09:32.760 --> 00:09:35.700
use that developer kit
baseboard to just start

00:09:35.700 --> 00:09:39.051
prototyping your idea,
generate that proof of concept.

00:09:39.051 --> 00:09:40.550
So you're going to
start connecting,

00:09:40.550 --> 00:09:43.851
in this case, maybe some
LEDs, some inputs, a display,

00:09:43.851 --> 00:09:46.350
whatever you want to do to sort
of test out if this thing is

00:09:46.350 --> 00:09:48.570
actually going to work.

00:09:48.570 --> 00:09:50.610
And then from there,
you can kind of

00:09:50.610 --> 00:09:53.260
carry it around; show it to the
other folks that you work with;

00:09:53.260 --> 00:09:56.440
say OK, I think this
idea might actually work.

00:09:56.440 --> 00:09:59.054
And then you can move
forward from that process.

00:09:59.054 --> 00:10:00.720
Now, there's a couple
of things that you

00:10:00.720 --> 00:10:04.740
might be using to build
these particular designs.

00:10:04.740 --> 00:10:07.342
One of them is you might
use a breadboard, which

00:10:07.342 --> 00:10:09.300
is essentially just a
solderless component that

00:10:09.300 --> 00:10:12.970
allows you to stick wires in and
prototype this thing up however

00:10:12.970 --> 00:10:14.010
it works for you.

00:10:14.010 --> 00:10:17.880
But those types of boards
are not that portable.

00:10:17.880 --> 00:10:19.900
Often if you move them
from here to here,

00:10:19.900 --> 00:10:22.590
you would lose a connection
because the wire comes loose.

00:10:22.590 --> 00:10:26.160
So generally, what we would
typically use in a prototype

00:10:26.160 --> 00:10:28.077
that you want to actually
show to someone else

00:10:28.077 --> 00:10:29.451
is something called
a protoboard.

00:10:29.451 --> 00:10:31.360
And that's what we have
in this example here.

00:10:31.360 --> 00:10:33.776
And if you want to get up close
with this particular piece

00:10:33.776 --> 00:10:35.340
of hardware, it
is in the Sandbox

00:10:35.340 --> 00:10:36.550
along with the final product.

00:10:36.550 --> 00:10:38.675
So you can look at that
design up close and kind of

00:10:38.675 --> 00:10:40.540
see how it's all put together.

00:10:40.540 --> 00:10:42.990
But once you've certified
that your idea is actually

00:10:42.990 --> 00:10:44.880
going to work,
you're probably going

00:10:44.880 --> 00:10:47.740
to want to actually build
a custom design out of it.

00:10:47.740 --> 00:10:50.450
This is really cool and it's
fun to post online and see

00:10:50.450 --> 00:10:51.870
all your friends
what you've done,

00:10:51.870 --> 00:10:54.480
but that's probably not
something you can ship

00:10:54.480 --> 00:10:56.220
in high volume to consumers.

00:10:56.220 --> 00:10:58.830
So you need to
redesign that into more

00:10:58.830 --> 00:11:01.980
of a custom, compact,
integrated system.

00:11:01.980 --> 00:11:03.570
And so in order
to do that, you're

00:11:03.570 --> 00:11:05.640
going to be using a
couple of new tools

00:11:05.640 --> 00:11:08.380
that you may or may not have
ever worked with before,

00:11:08.380 --> 00:11:10.410
and there's two
pieces of content,

00:11:10.410 --> 00:11:12.360
or what we call
hardware design files,

00:11:12.360 --> 00:11:15.030
that you have to create to
build this custom design.

00:11:15.030 --> 00:11:17.400
The first one is called a
schematic, and a layout.

00:11:17.400 --> 00:11:19.066
And we're going to
look at both of these

00:11:19.066 --> 00:11:21.070
so you get an idea of
what's inside of these.

00:11:21.070 --> 00:11:22.980
So a schematic for
an electronic product

00:11:22.980 --> 00:11:26.190
is essentially just a
definition of all the components

00:11:26.190 --> 00:11:29.640
you want to use and how they
should be connected together.

00:11:29.640 --> 00:11:31.200
And this example
that we have up here

00:11:31.200 --> 00:11:33.990
is the exact schematic
for that candle sample

00:11:33.990 --> 00:11:35.295
that you saw pictured earlier.

00:11:35.295 --> 00:11:37.170
And the first thing that
I want you to notice

00:11:37.170 --> 00:11:39.750
is there's not really
a whole lot there.

00:11:39.750 --> 00:11:41.460
And the reason for
that is because all

00:11:41.460 --> 00:11:43.620
of that complicated
hardware that goes along

00:11:43.620 --> 00:11:46.890
with the CPU and the memory,
et cetera, is on the module.

00:11:46.890 --> 00:11:49.740
So I don't have to add
those pieces to my design.

00:11:49.740 --> 00:11:51.660
All I have to design
in are the pieces that

00:11:51.660 --> 00:11:53.890
are specific to my application.

00:11:53.890 --> 00:11:56.550
So this design has a
connector for the USB which

00:11:56.550 --> 00:12:00.480
we use for power, a power supply
to do some voltage changing

00:12:00.480 --> 00:12:03.180
from the input to the
output, the connector

00:12:03.180 --> 00:12:05.170
for the actual module.

00:12:05.170 --> 00:12:06.990
So we don't have
to actually lay out

00:12:06.990 --> 00:12:09.540
all of the pieces that
are on that module, just

00:12:09.540 --> 00:12:12.630
a single connector where
we stick it onto our board.

00:12:12.630 --> 00:12:14.610
And then the I/O
pieces-- in this case,

00:12:14.610 --> 00:12:17.640
those little LEDs that we can
blink that you saw in the image

00:12:17.640 --> 00:12:18.990
before.

00:12:18.990 --> 00:12:22.500
So the schematic is responsible
for defining all of the things

00:12:22.500 --> 00:12:26.329
you want to use and how each
of those elements interconnect.

00:12:26.329 --> 00:12:27.870
And if you've never
done this before,

00:12:27.870 --> 00:12:29.661
there are a number of
tools that are really

00:12:29.661 --> 00:12:31.860
good to get started with this.

00:12:31.860 --> 00:12:33.990
And I've got them
listed there, so EAGLE--

00:12:33.990 --> 00:12:36.690
Altium actually has two products
called the Circuit Maker

00:12:36.690 --> 00:12:38.280
and Circuit Studio--

00:12:38.280 --> 00:12:39.360
and KiCad.

00:12:39.360 --> 00:12:42.300
All of these are very
approachable electronic design

00:12:42.300 --> 00:12:45.960
tools that allow you to get
started building schematics.

00:12:45.960 --> 00:12:47.730
One of the benefits
of all of these

00:12:47.730 --> 00:12:50.470
is they're very well
supported in the community.

00:12:50.470 --> 00:12:51.840
So you can get support.

00:12:51.840 --> 00:12:54.810
You can find tutorials if you're
not used to dealing with these.

00:12:54.810 --> 00:12:56.970
And in addition, all
of these have a lot

00:12:56.970 --> 00:12:59.190
of library support online.

00:12:59.190 --> 00:13:01.830
So just to give you an
example, this entire schematic

00:13:01.830 --> 00:13:04.290
was built in EAGLE,
and all of the parts

00:13:04.290 --> 00:13:07.470
came from open source
libraries provided by SparkFun.

00:13:07.470 --> 00:13:09.900
So I didn't have to
create any of those parts.

00:13:09.900 --> 00:13:12.730
I just used libraries
that already existed.

00:13:12.730 --> 00:13:15.930
And when you use tools like
EAGLE, Altium, and KiCad,

00:13:15.930 --> 00:13:17.892
you'll find good
support for doing that.

00:13:17.892 --> 00:13:19.350
There's actually
another reason why

00:13:19.350 --> 00:13:21.058
these are good tools
to choose, and we'll

00:13:21.058 --> 00:13:23.110
get to that in a minute.

00:13:23.110 --> 00:13:25.300
All right, so you
built the schematic.

00:13:25.300 --> 00:13:28.010
This is what I want this
electronic thing to do.

00:13:28.010 --> 00:13:29.800
But now, we have
to actually define

00:13:29.800 --> 00:13:32.390
what is it physically
going to look like,

00:13:32.390 --> 00:13:34.120
and that's what
the layout is for.

00:13:34.120 --> 00:13:35.890
So the layout
definition is basically,

00:13:35.890 --> 00:13:37.990
you're just drawing
a picture of,

00:13:37.990 --> 00:13:40.690
this is what I want the
board to actually be,

00:13:40.690 --> 00:13:43.120
where do I want the
components to be placed,

00:13:43.120 --> 00:13:45.370
how do I want those
wire connections to be

00:13:45.370 --> 00:13:48.310
routed, and get everything
sort of laid out perfectly.

00:13:48.310 --> 00:13:50.560
Are there any holes that we
want to drill in the board

00:13:50.560 --> 00:13:52.780
so that we can mount
it to something easily?

00:13:52.780 --> 00:13:55.060
All of those pieces are
defined by the layout.

00:13:55.060 --> 00:13:58.310
And this layout is also
defined in the same tool.

00:13:58.310 --> 00:14:01.300
So when you use an electronic
design tool like EAGLE,

00:14:01.300 --> 00:14:03.640
you define both the
schematic and the layout

00:14:03.640 --> 00:14:04.430
in the same tool.

00:14:04.430 --> 00:14:06.146
They're coupled
together very tightly so

00:14:06.146 --> 00:14:08.020
that when you make a
change to the schematic,

00:14:08.020 --> 00:14:10.602
that can be reflected on
the layout, and vice versa.

00:14:10.602 --> 00:14:13.060
Just to give you a picture, if
you've never actually looked

00:14:13.060 --> 00:14:16.360
at one of those layouts before,
it might look a little strange.

00:14:16.360 --> 00:14:18.250
So I put the physical
board next to it

00:14:18.250 --> 00:14:20.000
so you can kind
of get an idea of,

00:14:20.000 --> 00:14:22.720
oh OK, this is where
this connector goes,

00:14:22.720 --> 00:14:24.570
and these are the
holes for the LEDs.

00:14:24.570 --> 00:14:26.410
They're in the middle
in all of that.

00:14:26.410 --> 00:14:29.920
So essentially, once you have
a schematic defined and then

00:14:29.920 --> 00:14:32.230
a subsequent layout,
this is now something

00:14:32.230 --> 00:14:35.650
that you could take to a
vendor or manufacturer,

00:14:35.650 --> 00:14:37.330
and you could have
that thing produced.

00:14:40.060 --> 00:14:41.890
All right, so I want
to talk about a couple

00:14:41.890 --> 00:14:43.473
of different definitions
because there

00:14:43.473 --> 00:14:45.880
are two ways that you can
go about actually building

00:14:45.880 --> 00:14:47.210
one of these things.

00:14:47.210 --> 00:14:49.810
So the first stage that's
pretty much always required

00:14:49.810 --> 00:14:51.400
is you have to
fabricate the boards.

00:14:51.400 --> 00:14:54.190
So you hear someone talking
about fabricating a PCB

00:14:54.190 --> 00:14:55.870
or the fabrication process.

00:14:55.870 --> 00:14:59.160
That's essentially just building
the actual base circuit board,

00:14:59.160 --> 00:14:59.660
OK?

00:14:59.660 --> 00:15:02.980
It's taking that layout,
giving it to a vendor,

00:15:02.980 --> 00:15:05.020
and having them
actually etch out

00:15:05.020 --> 00:15:06.700
all of the pieces
on the fiberglass,

00:15:06.700 --> 00:15:09.190
and lay down the copper, and
all of those things for you

00:15:09.190 --> 00:15:13.570
so that you have a basis to
actually build your product.

00:15:13.570 --> 00:15:15.400
Then the assembly
process is essentially

00:15:15.400 --> 00:15:18.850
just taking that bare board
and installing the components

00:15:18.850 --> 00:15:19.920
on top of it.

00:15:19.920 --> 00:15:21.920
And there's a couple ways
that this can be done.

00:15:21.920 --> 00:15:23.461
The reason that
we've split these out

00:15:23.461 --> 00:15:25.810
is because you
generally probably

00:15:25.810 --> 00:15:28.244
don't want to try and
fabricate your own PCBs.

00:15:28.244 --> 00:15:30.160
There are people who do
it and there are tools

00:15:30.160 --> 00:15:31.360
that you can do to do that.

00:15:31.360 --> 00:15:33.880
But generally, that's a
process best left to a vendor,

00:15:33.880 --> 00:15:36.290
and it's relatively inexpensive
to be able to do this,

00:15:36.290 --> 00:15:38.050
even in low volume.

00:15:38.050 --> 00:15:41.680
But you might decide, for
cost reasons or time reasons

00:15:41.680 --> 00:15:43.720
or whatever, that
it's easier for you

00:15:43.720 --> 00:15:45.610
to assemble the board yourself.

00:15:45.610 --> 00:15:48.220
So you might decide to
simply buy the components

00:15:48.220 --> 00:15:51.220
and solder them down by hand or
using any other tools that you

00:15:51.220 --> 00:15:52.930
might have available to you.

00:15:52.930 --> 00:15:55.807
But you can also have a vendor
do this for you as well.

00:15:55.807 --> 00:15:58.390
So a little bit later on, we'll
look at some different options

00:15:58.390 --> 00:16:01.510
around where you might be able
to just get the PCBs fabricated

00:16:01.510 --> 00:16:04.720
themselves versus having them
completely fully assembled

00:16:04.720 --> 00:16:08.480
and delivered to you with
all those pieces in place.

00:16:08.480 --> 00:16:11.810
All right, so I mentioned
schematic and layout before.

00:16:11.810 --> 00:16:14.210
You could sort of think
of these design files

00:16:14.210 --> 00:16:16.710
as the source code
for your hardware.

00:16:16.710 --> 00:16:18.890
These are the pieces
that you develop.

00:16:18.890 --> 00:16:20.660
And then from
there, those can be

00:16:20.660 --> 00:16:23.180
fed into a number
of different tools

00:16:23.180 --> 00:16:25.820
to generate the
content or the files

00:16:25.820 --> 00:16:29.672
necessary to actually have these
pieces manufactured or created.

00:16:29.672 --> 00:16:31.130
There's a couple
other terms that I

00:16:31.130 --> 00:16:33.440
want you to be familiar
with if you're toying around

00:16:33.440 --> 00:16:35.070
with hardware at all.

00:16:35.070 --> 00:16:36.320
So the first is Gerbers.

00:16:36.320 --> 00:16:38.690
A Gerber file is
a generated file

00:16:38.690 --> 00:16:41.780
that is used by
CNC manufacturers

00:16:41.780 --> 00:16:43.400
to actually build your board.

00:16:43.400 --> 00:16:45.290
It's what takes your
layout, turns it

00:16:45.290 --> 00:16:47.000
into a bunch of
CNC instructions,

00:16:47.000 --> 00:16:49.550
and then a machine goes
around and puts drills down

00:16:49.550 --> 00:16:52.260
and etches out all the pieces
on the board and all of that.

00:16:52.260 --> 00:16:54.410
So it's essentially
the generated file that

00:16:54.410 --> 00:16:57.280
turns into your finished PCB.

00:16:57.280 --> 00:17:00.910
The BoM and the XYRS files are
used in the assembly process.

00:17:00.910 --> 00:17:03.191
So BoM stands for
Bill of Materials,

00:17:03.191 --> 00:17:05.440
and it's essentially just a
list of all the components

00:17:05.440 --> 00:17:09.700
on your board, and the part
numbers of those boards

00:17:09.700 --> 00:17:12.579
so that you can purchase
those, and how many of them

00:17:12.579 --> 00:17:15.310
are on each particular design.

00:17:15.310 --> 00:17:19.490
And then the XYRS file basically
is an automated file that tells

00:17:19.490 --> 00:17:21.490
a computer-- in this case,
it's a machine called

00:17:21.490 --> 00:17:22.869
a pick-and-place place machine--

00:17:22.869 --> 00:17:25.060
how to take those
components, pick them up,

00:17:25.060 --> 00:17:26.619
and drop them on your board.

00:17:26.619 --> 00:17:28.720
It's the exact
location, rotation,

00:17:28.720 --> 00:17:30.490
and all of that where
the component needs

00:17:30.490 --> 00:17:32.320
to sit so that it
can be assembled

00:17:32.320 --> 00:17:33.940
in the right location.

00:17:33.940 --> 00:17:37.550
So each of these files are
necessary in some cases

00:17:37.550 --> 00:17:39.880
if you want to fully
automate the production

00:17:39.880 --> 00:17:42.880
process of building the board.

00:17:42.880 --> 00:17:46.810
You can think of these files
as sort of your compiled code

00:17:46.810 --> 00:17:48.580
or your machine code.

00:17:48.580 --> 00:17:50.410
However, one of the
issues with these files

00:17:50.410 --> 00:17:54.160
is that there's not a lot
of pure standards associated

00:17:54.160 --> 00:17:55.550
with each of these.

00:17:55.550 --> 00:17:57.760
So there are different
formats for Gerbers.

00:17:57.760 --> 00:18:00.580
A BoM could be something
as simple as a CSV file,

00:18:00.580 --> 00:18:02.527
or it could be something
way more complicated.

00:18:02.527 --> 00:18:05.110
And different vendors are going
to have different requirements

00:18:05.110 --> 00:18:08.290
about how you produce those
files so that they can import

00:18:08.290 --> 00:18:09.820
them into their systems.

00:18:09.820 --> 00:18:12.250
So this turns out
not being quite as

00:18:12.250 --> 00:18:14.450
simple as you might imagine.

00:18:14.450 --> 00:18:16.360
And so generally
speaking, if you're just

00:18:16.360 --> 00:18:18.310
getting started with
this or you just

00:18:18.310 --> 00:18:20.740
want to do some very
quick basic prototyping,

00:18:20.740 --> 00:18:24.070
I recommend finding vendors
that allow you to ignore

00:18:24.070 --> 00:18:25.752
these files completely.

00:18:25.752 --> 00:18:27.460
And there are a number
of them out there,

00:18:27.460 --> 00:18:29.501
and I'm going to show you
a few in just a minute.

00:18:29.501 --> 00:18:32.980
But there are a lot of great
PCB and assembly vendors

00:18:32.980 --> 00:18:35.840
that will accept your
design files directly.

00:18:35.840 --> 00:18:38.735
So the way I'd like to think
of it is if you're new to this

00:18:38.735 --> 00:18:40.360
or you're not very
comfortable with it,

00:18:40.360 --> 00:18:42.943
and you start going around the
web looking at different places

00:18:42.943 --> 00:18:44.770
where you might be
able to build a PCB,

00:18:44.770 --> 00:18:47.860
if they ask you for Gerber
files, go look somewhere else.

00:18:47.860 --> 00:18:51.190
You'll be able to find someone
that can take your design

00:18:51.190 --> 00:18:53.080
files directly so you
don't have to mess

00:18:53.080 --> 00:18:55.750
with exporting those and
making sure they're correct

00:18:55.750 --> 00:18:56.620
and all of that.

00:18:56.620 --> 00:18:58.630
You may get there
eventually, and you might

00:18:58.630 --> 00:18:59.952
want to do that at some point.

00:18:59.952 --> 00:19:01.660
But at least when
you're getting started,

00:19:01.660 --> 00:19:04.202
that's something that you can
ignore completely because there

00:19:04.202 --> 00:19:06.743
are a number of great vendors--
and I've highlighted a couple

00:19:06.743 --> 00:19:07.480
of them here--

00:19:07.480 --> 00:19:09.559
that can take these
directly for you.

00:19:09.559 --> 00:19:11.350
So on the fabrication
side, one of the ones

00:19:11.350 --> 00:19:14.410
that we've used early in
prototyping is OSH park.

00:19:14.410 --> 00:19:17.230
And this is a great vendor,
one, because they'll

00:19:17.230 --> 00:19:19.730
accept your EAGLE files,
your Altium files,

00:19:19.730 --> 00:19:21.820
et cetera, directly
so you don't have

00:19:21.820 --> 00:19:23.350
to deal with all those Gerbers.

00:19:23.350 --> 00:19:26.620
But they're also very
low cost in low volume

00:19:26.620 --> 00:19:29.194
because they're what we
call a shared PCB vendor.

00:19:29.194 --> 00:19:30.610
And what essentially
that means is

00:19:30.610 --> 00:19:34.237
that when you give them a board
to make, they take your design

00:19:34.237 --> 00:19:36.820
and they take designs from other
customers that were submitted

00:19:36.820 --> 00:19:38.950
at the same time,
and they panel them

00:19:38.950 --> 00:19:42.797
all up together on one big piece
to run through the machine.

00:19:42.797 --> 00:19:45.130
So they reduce the cost for
you because they're actually

00:19:45.130 --> 00:19:48.130
running your design along
with others at the same time.

00:19:48.130 --> 00:19:50.440
That works really
well for prototyping

00:19:50.440 --> 00:19:53.870
because it means you can get
low quantities at low cost.

00:19:53.870 --> 00:19:56.650
It has some disadvantages and
lead time because it generally

00:19:56.650 --> 00:19:59.200
means you can't get things
that quickly because they have

00:19:59.200 --> 00:20:01.810
to wait for other designs
to come along that they

00:20:01.810 --> 00:20:03.040
can panel up together.

00:20:03.040 --> 00:20:05.770
So you generally can't get
something next day or the day

00:20:05.770 --> 00:20:08.080
after that with OSJ
Park, but it works really

00:20:08.080 --> 00:20:11.470
well for making sure your
board is actually correct

00:20:11.470 --> 00:20:13.930
before you go and actually
have it fully assembled.

00:20:13.930 --> 00:20:16.240
One of the common
issues with hardware

00:20:16.240 --> 00:20:18.070
is when you build
your design, you

00:20:18.070 --> 00:20:20.260
might have accidentally
crossed a couple of wires.

00:20:20.260 --> 00:20:22.300
And unfortunately,
unlike with software,

00:20:22.300 --> 00:20:24.610
we can't just delete
and recompile that.

00:20:24.610 --> 00:20:27.670
We have to actually scratch
off the trace, jumper or wire,

00:20:27.670 --> 00:20:30.170
or just throw the boards
away and make some new ones.

00:20:30.170 --> 00:20:33.460
So until you're certain that the
schematic you made is correct,

00:20:33.460 --> 00:20:36.850
it's good to stick with very
low-cost vendors like this

00:20:36.850 --> 00:20:38.930
and hand-assemble the
prototypes until you

00:20:38.930 --> 00:20:40.840
know for sure that
what you designed

00:20:40.840 --> 00:20:42.760
has everything in
the right place.

00:20:42.760 --> 00:20:45.310
On the assembly side,
there are a number

00:20:45.310 --> 00:20:48.160
of vendors that also
make this easy that we've

00:20:48.160 --> 00:20:49.180
worked with in the past.

00:20:49.180 --> 00:20:51.940
I've got CircuitHub and
MacroFab listed up here.

00:20:51.940 --> 00:20:53.730
CircuitHub is an
interesting one.

00:20:53.730 --> 00:20:56.350
It's essentially like
GitHub for hardware.

00:20:56.350 --> 00:20:59.050
They allow you to upload
your design files,

00:20:59.050 --> 00:21:01.510
and then you can share that
design under an open source

00:21:01.510 --> 00:21:02.030
license.

00:21:02.030 --> 00:21:04.500
Other people can
fork that design.

00:21:04.500 --> 00:21:07.090
And you can even buy
those designs directly

00:21:07.090 --> 00:21:08.270
from the web site.

00:21:08.270 --> 00:21:11.170
So they are an assembly
vendor as well as a way

00:21:11.170 --> 00:21:15.730
for you to sort of share designs
between folks in the community.

00:21:15.730 --> 00:21:17.627
And you'll see actually
a little bit later,

00:21:17.627 --> 00:21:19.960
CircuitHub is where we have
uploaded this sample for you

00:21:19.960 --> 00:21:21.910
to be able to see the
hardware design files

00:21:21.910 --> 00:21:23.830
and play around with it.

00:21:23.830 --> 00:21:27.550
MacroFab is another output
vendor that basically

00:21:27.550 --> 00:21:29.592
also takes your design files.

00:21:29.592 --> 00:21:31.300
And one of the nice
things about MarcoFab

00:21:31.300 --> 00:21:34.750
is they do more than just
electronics assembly.

00:21:34.750 --> 00:21:36.340
So they will
assemble your boards,

00:21:36.340 --> 00:21:39.490
and they're very good at doing
that at low-cost at low volume,

00:21:39.490 --> 00:21:41.860
but they will also
assist you in packaging

00:21:41.860 --> 00:21:43.870
that into a mechanical
housing or whatever

00:21:43.870 --> 00:21:47.110
your final packaging is,
and also can often help you

00:21:47.110 --> 00:21:48.452
with inventory as well.

00:21:48.452 --> 00:21:50.410
So these actually can be
a really great partner

00:21:50.410 --> 00:21:52.450
for a startup building
hardware where

00:21:52.450 --> 00:21:54.340
they will help you
sort manage all

00:21:54.340 --> 00:21:56.699
of that process along the
way in building your designs,

00:21:56.699 --> 00:21:58.990
and maintaining them, and
actually getting them shipped

00:21:58.990 --> 00:22:00.264
out to real consumers.

00:22:02.645 --> 00:22:04.270
All right, so now
Wayne's going to talk

00:22:04.270 --> 00:22:07.717
about what happens when somebody
does this for the first time.

00:22:07.717 --> 00:22:10.300
WAYNE PIEKARSKI: And how not to
burn your fingers, which I did

00:22:10.300 --> 00:22:11.220
multiple times.

00:22:11.220 --> 00:22:13.720
To get your prototypes done,
you've got two different steps.

00:22:13.720 --> 00:22:15.719
You've got the fabrication
step, and then you've

00:22:15.719 --> 00:22:18.160
got soldering the
components onto the board.

00:22:18.160 --> 00:22:20.830
So you might have access to
a local company who actually

00:22:20.830 --> 00:22:23.230
makes the PCBs where you are.

00:22:23.230 --> 00:22:23.950
So you don't--

00:22:23.950 --> 00:22:25.390
I mean, the problem with
a lot of these companies

00:22:25.390 --> 00:22:26.690
is that sometimes,
they're far away.

00:22:26.690 --> 00:22:28.900
They're on the other side of
the country or around the world.

00:22:28.900 --> 00:22:30.760
And you don't want to have to
wait a week or a couple of days

00:22:30.760 --> 00:22:32.050
to do your shipping.

00:22:32.050 --> 00:22:34.190
So sometimes, you want to
do iterative debugging.

00:22:34.190 --> 00:22:35.810
Now, when we write source
code on a computer,

00:22:35.810 --> 00:22:37.935
we just make a change, type
make, and run it again,

00:22:37.935 --> 00:22:39.280
and it takes like three seconds.

00:22:39.280 --> 00:22:42.532
But with electronics, there
is this production iteration

00:22:42.532 --> 00:22:44.740
that you have to make, which
could take days or weeks

00:22:44.740 --> 00:22:45.980
or whatever.

00:22:45.980 --> 00:22:48.460
So what we wanted to do
is rather than having

00:22:48.460 --> 00:22:50.290
the boards assembled
by someone else,

00:22:50.290 --> 00:22:51.790
I wanted to see how
hard it would be

00:22:51.790 --> 00:22:53.900
to actually solder them myself.

00:22:53.900 --> 00:22:56.345
And so I went to
take Dave's prototype

00:22:56.345 --> 00:22:57.970
and try it out to
see if I could do it.

00:22:57.970 --> 00:23:00.290
So I've got some kind of
electronics background.

00:23:00.290 --> 00:23:02.720
I did electronic engineering
many, many years ago.

00:23:02.720 --> 00:23:04.510
But I've only soldered
really large boards

00:23:04.510 --> 00:23:05.650
with through-hole mounts.

00:23:05.650 --> 00:23:07.750
Those are the ones where the
pin goes through the board.

00:23:07.750 --> 00:23:09.400
You can go in with a
huge soldering iron.

00:23:09.400 --> 00:23:10.780
And you can make all
kinds of mistakes,

00:23:10.780 --> 00:23:11.988
and it doesn't really matter.

00:23:11.988 --> 00:23:13.900
So I've done stuff like
that, but I've never

00:23:13.900 --> 00:23:15.400
done surface mount before.

00:23:15.400 --> 00:23:18.091
So I wanted to see how hard it
would be, what kind of mistakes

00:23:18.091 --> 00:23:19.840
I would make, and then
I was going to talk

00:23:19.840 --> 00:23:20.923
to you about how we do it.

00:23:20.923 --> 00:23:24.100
Now, the most challenging part
is the actual SOM connector

00:23:24.100 --> 00:23:27.547
that connects the baseboard
to the little SOM.

00:23:27.547 --> 00:23:29.630
And so that's the one
that's the most challenging,

00:23:29.630 --> 00:23:31.254
and we're going to
talk a bit about how

00:23:31.254 --> 00:23:33.580
we went about soldering that.

00:23:33.580 --> 00:23:36.340
So when you look at the SOM
connector, it's really small.

00:23:36.340 --> 00:23:38.080
If you look at
these images, those

00:23:38.080 --> 00:23:40.540
are images that are shot
through a microscope.

00:23:40.540 --> 00:23:43.120
And on the right, you can
see in the microscope I used.

00:23:43.120 --> 00:23:45.374
But you can't work with this
thing with your own eyes.

00:23:45.374 --> 00:23:47.540
If you actually hold the
SOM connector in your hand,

00:23:47.540 --> 00:23:48.970
it's this tiny, little thing.

00:23:48.970 --> 00:23:50.740
You can barely see the pins.

00:23:50.740 --> 00:23:53.100
And you're like, how am I
ever going to solder this?

00:23:53.100 --> 00:23:55.100
So I bought a really cheap
soldering microscope.

00:23:55.100 --> 00:23:56.620
They're about $200.

00:23:56.620 --> 00:23:58.585
And you basically put
it up to your eyes,

00:23:58.585 --> 00:24:00.460
put the board underneath
it, and you can then

00:24:00.460 --> 00:24:03.507
see all of the detail in
the board really easily.

00:24:03.507 --> 00:24:05.590
Now, it's interesting
because it's actually pretty

00:24:05.590 --> 00:24:07.737
surprisingly easy to work with.

00:24:07.737 --> 00:24:09.820
You would think that your
hands and everything are

00:24:09.820 --> 00:24:11.380
too large to be
able to get in there

00:24:11.380 --> 00:24:12.855
and solder something so fine.

00:24:12.855 --> 00:24:14.980
But it turns out, when
you're under the microscope,

00:24:14.980 --> 00:24:16.960
looking through it,
your body adjusts to it,

00:24:16.960 --> 00:24:19.630
and you're actually able
to make pretty fine motions

00:24:19.630 --> 00:24:21.160
without too many problems.

00:24:21.160 --> 00:24:22.435
Now, what I did find,
though, is that you've

00:24:22.435 --> 00:24:24.351
got to anchor your hand
a little bit so you'll

00:24:24.351 --> 00:24:26.770
kind of like press one
finger against the table.

00:24:26.770 --> 00:24:27.700
And then when you're
under the microscope,

00:24:27.700 --> 00:24:29.890
I actually occasionally
touch the soldering iron

00:24:29.890 --> 00:24:31.806
under my finger because
everything's so close.

00:24:31.806 --> 00:24:34.310
You don't realize how close it
is, so that was kind of fun.

00:24:34.310 --> 00:24:36.064
So yeah, a lot of
people around me

00:24:36.064 --> 00:24:37.480
were wondering why
I was screaming

00:24:37.480 --> 00:24:38.750
from the soldering station.

00:24:38.750 --> 00:24:41.520
But anyway, so make sure
you don't drink any coffee

00:24:41.520 --> 00:24:43.270
before you do it either,
because that also

00:24:43.270 --> 00:24:44.353
gives you the jitters too.

00:24:44.353 --> 00:24:46.540
So that's also a protip.

00:24:46.540 --> 00:24:49.180
But anyway, so I have
a basic soldering iron.

00:24:49.180 --> 00:24:50.221
I have the microscope.

00:24:50.221 --> 00:24:51.970
And with that, we're
going to try to start

00:24:51.970 --> 00:24:54.230
soldering one of these things.

00:24:54.230 --> 00:24:56.020
The problem with a
regular soldiering iron

00:24:56.020 --> 00:24:57.480
is that it's too large.

00:24:57.480 --> 00:25:00.880
So under a microscope,
on the left,

00:25:00.880 --> 00:25:03.160
you can see I've got
a ballpoint pen, which

00:25:03.160 --> 00:25:06.130
shows how big a real
pen looks like, the kind

00:25:06.130 --> 00:25:07.190
that you write with.

00:25:07.190 --> 00:25:09.670
And you can see that the
pen is the size of like five

00:25:09.670 --> 00:25:11.950
of the pins on
the SOM connector.

00:25:11.950 --> 00:25:13.780
So the tip of the
soldering iron I had

00:25:13.780 --> 00:25:15.970
was this big, huge
chisel tip thing

00:25:15.970 --> 00:25:17.920
that is designed for
like, I don't know,

00:25:17.920 --> 00:25:19.360
soldering huge objects.

00:25:19.360 --> 00:25:21.070
But we needed
something really fine.

00:25:21.070 --> 00:25:23.890
So you can actually buy a tiny
0.1 millimeter soldering iron

00:25:23.890 --> 00:25:26.450
tip, and you can see that
on the right in the image.

00:25:26.450 --> 00:25:28.617
So that tip is 0.1
millimeter wide.

00:25:28.617 --> 00:25:30.700
And you can see that it
still looks quite big even

00:25:30.700 --> 00:25:32.230
compared to the pins on there.

00:25:32.230 --> 00:25:34.570
But it turns out, you can
actually solder with this.

00:25:34.570 --> 00:25:35.986
And it's funny
because if you take

00:25:35.986 --> 00:25:38.714
that soldering tip and stab
your-- not stab yourself,

00:25:38.714 --> 00:25:40.630
but prick yourself with
it, it's really sharp.

00:25:40.630 --> 00:25:41.915
It feels almost like a needle.

00:25:41.915 --> 00:25:43.540
And yet, this thing
under a microscope,

00:25:43.540 --> 00:25:46.320
it's got this huge round tip,
and it's kind of incredible.

00:25:46.320 --> 00:25:48.267
But anyway, so that's
what it looks like.

00:25:48.267 --> 00:25:50.850
You can see how small everything
is relative to the soldiering

00:25:50.850 --> 00:25:51.340
iron.

00:25:51.340 --> 00:25:53.423
So that's kind of the
challenge that we're dealing

00:25:53.423 --> 00:25:56.040
with under the microscope.

00:25:56.040 --> 00:25:57.472
So the first thing
you need to do

00:25:57.472 --> 00:25:59.430
is when you're doing fine
soldiering like this,

00:25:59.430 --> 00:26:01.805
you need to make sure that
the solder sticks to the board

00:26:01.805 --> 00:26:02.370
cleanly.

00:26:02.370 --> 00:26:04.010
So we use what's
called flux for that.

00:26:04.010 --> 00:26:06.090
So most solder
has flux built in.

00:26:06.090 --> 00:26:08.050
But doing very fine
connections like this,

00:26:08.050 --> 00:26:10.600
you need to have extra flux
to make sure it works nicely.

00:26:10.600 --> 00:26:12.390
So you can buy these flux pens.

00:26:12.390 --> 00:26:15.920
And actually, the pen fills
up half the microscope

00:26:15.920 --> 00:26:17.810
when you're using it
because it's huge.

00:26:17.810 --> 00:26:20.402
But anyway, you paste a bit
of flux down on the board,

00:26:20.402 --> 00:26:22.610
and then you put the SOM
connector down on top of it.

00:26:22.610 --> 00:26:25.110
And you have to maneuver it in
with tweezers or your fingers

00:26:25.110 --> 00:26:26.150
or something like that.

00:26:26.150 --> 00:26:27.774
And then you've got
to hold it in place

00:26:27.774 --> 00:26:30.500
somehow so you can actually
do the soldering operation.

00:26:30.500 --> 00:26:34.280
So what you do is you basically
bring the soldering iron up,

00:26:34.280 --> 00:26:35.930
like you can see in
this picture here.

00:26:35.930 --> 00:26:38.010
You bring it up to the
pin, and then you've

00:26:38.010 --> 00:26:39.770
got to bring the solder
in against the pin

00:26:39.770 --> 00:26:40.850
at the same time.

00:26:40.850 --> 00:26:43.770
Now, what you don't want to do
is touch the solder directly

00:26:43.770 --> 00:26:45.740
onto the soldering iron,
because what happens

00:26:45.740 --> 00:26:48.140
is the solder just melts and
wicks up the soldering iron

00:26:48.140 --> 00:26:49.795
and doesn't go onto
the board itself.

00:26:49.795 --> 00:26:51.170
So you need to
make sure that you

00:26:51.170 --> 00:26:54.217
touch the solder under the
pins and keep the tip away.

00:26:54.217 --> 00:26:56.300
But at the same time,
you've got to touch the wire

00:26:56.300 --> 00:26:58.700
to heat it up and make
sure you solder correctly.

00:26:58.700 --> 00:27:01.680
So initially when I started, I
had problems getting everything

00:27:01.680 --> 00:27:02.220
to flow.

00:27:02.220 --> 00:27:03.390
But then Dave talked
to me and said,

00:27:03.390 --> 00:27:05.015
you're going to really
angle everything

00:27:05.015 --> 00:27:07.190
apart to really
avoid the touching.

00:27:07.190 --> 00:27:09.960
The solder itself is
0.4 millimeters wide.

00:27:09.960 --> 00:27:12.350
So if you look at the picture,
it's actually quite wide

00:27:12.350 --> 00:27:13.308
compared to everything.

00:27:13.308 --> 00:27:15.380
So it's possible to
sneak it in there.

00:27:15.380 --> 00:27:18.690
And after doing a
bunch of practice runs,

00:27:18.690 --> 00:27:20.190
I was actually able
to make it work.

00:27:20.190 --> 00:27:23.664
So this picture here
shows a work in progress

00:27:23.664 --> 00:27:25.080
as I was working
across the board.

00:27:25.080 --> 00:27:27.080
You can see some of the
pins in the bottom right

00:27:27.080 --> 00:27:28.850
are not done yet, and
the ones in the top

00:27:28.850 --> 00:27:30.600
are finished already.

00:27:30.600 --> 00:27:35.780
So this is a zoomed-up
version of that same photo.

00:27:35.780 --> 00:27:37.220
So this is actually
the first ever

00:27:37.220 --> 00:27:38.386
SOM that I've ever soldered.

00:27:38.386 --> 00:27:40.970
So I was like, I'm going
to document this process so

00:27:40.970 --> 00:27:43.110
that we can talk about
it here in this talk.

00:27:43.110 --> 00:27:45.590
But I mean, I did a pretty
terrible job on some of them

00:27:45.590 --> 00:27:46.400
in the top.

00:27:46.400 --> 00:27:48.230
But this is literally
my first ever attempt

00:27:48.230 --> 00:27:50.900
at soldering pins on a SOM,
so Dave was coaching me

00:27:50.900 --> 00:27:53.420
over Hangouts to tell
me some hints as to how

00:27:53.420 --> 00:27:54.880
things were working out.

00:27:54.880 --> 00:27:57.980
But you can see that
in the top left-ish,

00:27:57.980 --> 00:28:00.350
there are some nice pins
there, and then the bottom

00:28:00.350 --> 00:28:01.582
left with some better ones.

00:28:01.582 --> 00:28:04.040
Now occasionally, you'll notice
there are some pins where I

00:28:04.040 --> 00:28:05.830
blobbed the solder across them.

00:28:05.830 --> 00:28:06.830
Now, those are bad pins.

00:28:06.830 --> 00:28:10.096
If you actually turn the board
on with those pins shorted out

00:28:10.096 --> 00:28:11.720
like that, you'll
probably blow it out.

00:28:11.720 --> 00:28:13.511
So you've got to make
sure that if you ever

00:28:13.511 --> 00:28:15.135
bridge the solder
across the pins,

00:28:15.135 --> 00:28:17.010
that you've got to get
in there and use wic--

00:28:17.010 --> 00:28:20.570
there's this solder bridge you
can get that sucks solder out.

00:28:20.570 --> 00:28:23.420
You can use things like that to
remove solder if you need to.

00:28:23.420 --> 00:28:26.120
So anyway, so I had a
rough time getting started.

00:28:26.120 --> 00:28:29.420
But after a while, I was able to
do some pretty clean jobs that

00:28:29.420 --> 00:28:30.210
look quite nice.

00:28:30.210 --> 00:28:33.020
So you probably shouldn't do
this on your very first board

00:28:33.020 --> 00:28:34.516
that you're ever making.

00:28:34.516 --> 00:28:36.390
But after one or two,
you'll be better at it.

00:28:36.390 --> 00:28:38.000
So it's actually
something you can do.

00:28:38.000 --> 00:28:39.583
Now, if you look at
the board, there's

00:28:39.583 --> 00:28:42.050
actually a lot of
mess around there.

00:28:42.050 --> 00:28:43.460
The mess is not the solder.

00:28:43.460 --> 00:28:45.510
It's actually residue
from the flux.

00:28:45.510 --> 00:28:47.960
The flux is this
shiny material that's

00:28:47.960 --> 00:28:49.790
what makes everything
look kind of dirty.

00:28:49.790 --> 00:28:51.210
You can clean it a bit.

00:28:51.210 --> 00:28:53.442
But we were trying to find
q-tips and other things

00:28:53.442 --> 00:28:54.650
to get in there and clean it.

00:28:54.650 --> 00:28:56.840
But everything's so fine, you
can't get anything in there

00:28:56.840 --> 00:28:57.590
to clean it right.

00:28:57.590 --> 00:29:00.380
So we sort of cleaned it,
but the mess that's left over

00:29:00.380 --> 00:29:03.480
is the basic residue
from the flux.

00:29:03.480 --> 00:29:05.280
So while this is
time-consuming and it

00:29:05.280 --> 00:29:07.890
might take a few hours
to do in your own time,

00:29:07.890 --> 00:29:10.737
it's actually nice because you
can reduce your debugging time.

00:29:10.737 --> 00:29:13.320
You have the ability to take the
boards, solder them yourself,

00:29:13.320 --> 00:29:15.210
get it done, do some testing.

00:29:15.210 --> 00:29:16.831
And then if you
find mistakes, you

00:29:16.831 --> 00:29:18.580
can then use that
ability to make patches.

00:29:18.580 --> 00:29:20.640
So in the same way that
we patch source code,

00:29:20.640 --> 00:29:22.600
well, you can patch
your hardware as well.

00:29:22.600 --> 00:29:25.260
So Dave mentioned before, you
can scratch the tracks away,

00:29:25.260 --> 00:29:26.030
solder-wise.

00:29:26.030 --> 00:29:28.410
Now, it's not fun to do
this, but it is possible.

00:29:28.410 --> 00:29:30.180
And if that saves you
a week, then that's

00:29:30.180 --> 00:29:31.920
something that you
can do as well.

00:29:31.920 --> 00:29:34.590
And I've seen plenty
of boards where you

00:29:34.590 --> 00:29:35.920
see a wire running across them.

00:29:35.920 --> 00:29:36.900
It's like, why is
that there for?

00:29:36.900 --> 00:29:38.274
And it's like,
well, the designer

00:29:38.274 --> 00:29:40.920
forgot to put something in, like
a magic pad or something that

00:29:40.920 --> 00:29:41.940
did something right.

00:29:41.940 --> 00:29:44.370
And it's the equivalent
of writing code and then

00:29:44.370 --> 00:29:46.650
leaving one semi-colon
out, except that semi-colon

00:29:46.650 --> 00:29:48.858
is the one that powers the
circuit and does the work.

00:29:48.858 --> 00:29:51.180
So you don't have
a compiler that's

00:29:51.180 --> 00:29:53.680
going to run your circuit to
tell you if it's going to work.

00:29:53.680 --> 00:29:55.680
So you really have
to be careful.

00:29:55.680 --> 00:29:59.200
So yeah, you got to
really think about that.

00:29:59.200 --> 00:30:02.250
So here is a microscope
shot of one of the boards

00:30:02.250 --> 00:30:04.000
that Dave had
professionally fabricated.

00:30:04.000 --> 00:30:07.470
So you can see there that
everything looks super clean.

00:30:07.470 --> 00:30:11.820
Like, you can tell that a
machine is just gone and laid

00:30:11.820 --> 00:30:13.440
the solder down perfectly.

00:30:13.440 --> 00:30:15.420
And the way some of these
machines work is they

00:30:15.420 --> 00:30:17.730
actually put a solder
paste down on the board.

00:30:17.730 --> 00:30:19.710
They put SOM connector
on top, and then they

00:30:19.710 --> 00:30:22.680
put it through a reflow
oven that melts the solder

00:30:22.680 --> 00:30:24.610
and attaches the components.

00:30:24.610 --> 00:30:26.640
So you end up with a
really, really clean joint.

00:30:26.640 --> 00:30:28.530
And when you buy professionally
made electronics,

00:30:28.530 --> 00:30:29.905
it tends to look
a lot like that.

00:30:29.905 --> 00:30:31.494
So my soldering job,
obviously you're

00:30:31.494 --> 00:30:33.660
not going to put that circuit
onto the space shuttle

00:30:33.660 --> 00:30:34.680
and fly that.

00:30:34.680 --> 00:30:37.710
But in this case here, this is
a nice, reliable circuit where

00:30:37.710 --> 00:30:40.210
everything is nicely soldered.

00:30:40.210 --> 00:30:43.530
So it's not done by
a newbie like me.

00:30:43.530 --> 00:30:46.931
And then you attach the SOM onto
the board and you power it up,

00:30:46.931 --> 00:30:48.180
and the lights start blinking.

00:30:48.180 --> 00:30:50.400
And then we have that
demo in the Sandbox.

00:30:50.400 --> 00:30:52.230
And then you can
stand back and bask

00:30:52.230 --> 00:30:55.040
in the warming glow of the
Android bounce interpolator.

00:30:55.040 --> 00:30:56.700
So the sample Dave
put together, it

00:30:56.700 --> 00:30:59.370
uses the bouncing interpolator
to make the LEDs flicker.

00:30:59.370 --> 00:31:01.290
And you can hold your
hands in front of it

00:31:01.290 --> 00:31:03.140
and get that warm, cozy feeling.

00:31:03.140 --> 00:31:06.400
So it's a nice, simple example
because on the software side,

00:31:06.400 --> 00:31:08.280
we can do whatever we
want with the LEDs.

00:31:08.280 --> 00:31:09.860
But it's like a
Hello World in that

00:31:09.860 --> 00:31:11.440
it does something very basic.

00:31:11.440 --> 00:31:14.940
It uses basic components, like
a few LEDs and a few resistors.

00:31:14.940 --> 00:31:17.460
And now you're on track to
building whatever electronics

00:31:17.460 --> 00:31:18.444
that you want to build.

00:31:18.444 --> 00:31:20.610
And you can take this, once
you're familiar with it,

00:31:20.610 --> 00:31:22.068
and you can expand
on it from there

00:31:22.068 --> 00:31:24.540
to do something more
complicated for your needs.

00:31:24.540 --> 00:31:26.280
So once you've
built that device,

00:31:26.280 --> 00:31:28.590
you need to just think
about the next steps to take

00:31:28.590 --> 00:31:30.240
it commercial production.

00:31:30.240 --> 00:31:32.551
So before you can sell
a consumer device,

00:31:32.551 --> 00:31:34.050
you've got to think
about, well, how

00:31:34.050 --> 00:31:36.480
am I going to package
this and enclose it?

00:31:36.480 --> 00:31:40.050
And so you might need to find
an industrial designer to make

00:31:40.050 --> 00:31:41.940
a plastic housing for you.

00:31:41.940 --> 00:31:45.260
You can use a CNC printing
machine to make something,

00:31:45.260 --> 00:31:47.260
but those housings don't
tend to be very strong.

00:31:47.260 --> 00:31:49.343
So you're probably going
to need to have something

00:31:49.343 --> 00:31:50.790
professionally made for that.

00:31:50.790 --> 00:31:52.920
Then, when you ship this
device to your customers,

00:31:52.920 --> 00:31:54.378
you're going to
need to package it.

00:31:54.378 --> 00:31:57.060
So you're going to have to come
up with a cardboard box for it,

00:31:57.060 --> 00:31:58.519
maybe some documentation.

00:31:58.519 --> 00:32:00.060
It needs to have
padding inside of it

00:32:00.060 --> 00:32:02.340
to protect the product
during shipment, maybe

00:32:02.340 --> 00:32:03.274
legal documentation.

00:32:03.274 --> 00:32:05.190
You've got to get this
stuff made and printed,

00:32:05.190 --> 00:32:06.270
and it's not
something you can just

00:32:06.270 --> 00:32:07.561
knock up on your laser printer.

00:32:07.561 --> 00:32:08.680
It's got to look nice.

00:32:08.680 --> 00:32:10.740
And there are industrial
design companies that

00:32:10.740 --> 00:32:13.320
help with these final steps.

00:32:13.320 --> 00:32:15.240
And then finally,
even little things

00:32:15.240 --> 00:32:18.360
like if you need a power supply
or a cable for your device.

00:32:18.360 --> 00:32:21.127
You might have to include a USB
charger or something like that.

00:32:21.127 --> 00:32:22.710
While they're cheap,
they're not free.

00:32:22.710 --> 00:32:24.210
They still cost a
couple of dollars,

00:32:24.210 --> 00:32:26.310
and that adds to the
overall cost of the device

00:32:26.310 --> 00:32:27.450
that you're selling.

00:32:27.450 --> 00:32:30.420
And then finally, every
country has different rules

00:32:30.420 --> 00:32:33.630
about what devices they
allow, certifications, safety

00:32:33.630 --> 00:32:35.009
requirements, and so forth.

00:32:35.009 --> 00:32:36.550
And so for every
country you ship to,

00:32:36.550 --> 00:32:38.758
you're going to have to
investigate this and find out

00:32:38.758 --> 00:32:40.050
what those processes are.

00:32:40.050 --> 00:32:42.930
And so the SOM has had a lot of
testing and certification done

00:32:42.930 --> 00:32:45.330
on that, but the overall
packaging and device

00:32:45.330 --> 00:32:47.440
needs to also be
checked as well.

00:32:47.440 --> 00:32:49.380
So all of these things
I've outlined here

00:32:49.380 --> 00:32:51.030
do cost some money,
and it's important

00:32:51.030 --> 00:32:52.405
that you think
about these things

00:32:52.405 --> 00:32:55.550
before you get started on your
next big crazy startup idea.

00:32:55.550 --> 00:32:58.200
And make sure you think about
what the costs are going to be.

00:32:58.200 --> 00:32:59.970
And remember that if
you've got a fixed

00:32:59.970 --> 00:33:03.630
cost, like $10,000 for
design or certification,

00:33:03.630 --> 00:33:06.870
you need to sell enough units
to bury that cost in each one.

00:33:06.870 --> 00:33:10.440
If you sell 10,000 of something,
that adds $1 to the price.

00:33:10.440 --> 00:33:12.250
But if you're only
making 10 of something,

00:33:12.250 --> 00:33:14.624
then it's going to add $1,000
to the price of every unit.

00:33:14.624 --> 00:33:17.980
So you need to think about
some of those issues.

00:33:17.980 --> 00:33:20.680
And remember, just one
final little point here

00:33:20.680 --> 00:33:22.900
is that the nice thing
about Android Things

00:33:22.900 --> 00:33:25.750
is we've helped to simplify
the software side of things

00:33:25.750 --> 00:33:26.510
as well.

00:33:26.510 --> 00:33:29.149
So building an IoT device,
while it might seem easy

00:33:29.149 --> 00:33:30.940
and you can build your
own operating system

00:33:30.940 --> 00:33:33.880
and put it on there, it comes
at a price in that you still

00:33:33.880 --> 00:33:37.274
need to maintain that device and
security updates and so forth.

00:33:37.274 --> 00:33:39.190
So one of the nice things
about Android Things

00:33:39.190 --> 00:33:40.773
is that you have the
power of Android.

00:33:40.773 --> 00:33:42.370
You can use Android Studio.

00:33:42.370 --> 00:33:44.569
You can hire phone
app developers

00:33:44.569 --> 00:33:46.360
and get them to write
code for your device,

00:33:46.360 --> 00:33:48.040
and they can use the
same libraries and tools

00:33:48.040 --> 00:33:49.210
that they're familiar with.

00:33:49.210 --> 00:33:50.760
So you don't need
to hire someone

00:33:50.760 --> 00:33:53.810
who's a micro-controller expert
who writes assembly language.

00:33:53.810 --> 00:33:56.290
There's a lot more
programmers available to you.

00:33:56.290 --> 00:33:59.800
Also, the SOMs, we provide
updates from Google.

00:33:59.800 --> 00:34:01.660
We provide security
updates for them.

00:34:01.660 --> 00:34:03.489
We push the updates
out to the devices

00:34:03.489 --> 00:34:05.530
so that you don't need to
worry about maintaining

00:34:05.530 --> 00:34:06.910
all that stuff yourself.

00:34:06.910 --> 00:34:10.630
And then finally, you get all
the power of Android security.

00:34:10.630 --> 00:34:12.850
We have a huge team
on the Android team

00:34:12.850 --> 00:34:15.520
whose job is to scour the
internet looking for security

00:34:15.520 --> 00:34:18.699
problems, and patch Linux
kernels and patch libraries,

00:34:18.699 --> 00:34:20.159
and we take care
of that for you.

00:34:20.159 --> 00:34:22.659
So now, if you were going to
make the device yourself and do

00:34:22.659 --> 00:34:24.460
all the software, you
would have to have

00:34:24.460 --> 00:34:26.409
a huge team of security
people and everything

00:34:26.409 --> 00:34:28.074
to make sure that's
taken care of.

00:34:28.074 --> 00:34:30.070
With Android
Things, we've really

00:34:30.070 --> 00:34:32.770
done a lot to help simplify the
software side of things a lot

00:34:32.770 --> 00:34:36.429
as well so that you can focus
on what makes your product good

00:34:36.429 --> 00:34:39.310
and not have to worry about all
the little details of trying

00:34:39.310 --> 00:34:41.980
to secure a device, and push the
updates, and things like that.

00:34:45.130 --> 00:34:47.850
DAVE SMITH: So the moral of the
story is if Wayne can do it,

00:34:47.850 --> 00:34:50.646
you can probably do it too.

00:34:50.646 --> 00:34:52.520
So just a couple of
things to finish up here.

00:34:52.520 --> 00:34:55.362
If you're interested in sort of
learning more about the various

00:34:55.362 --> 00:34:57.570
hardware platforms that
Android Things does support--

00:34:57.570 --> 00:34:59.903
and as we add support for
more, that will be listed here

00:34:59.903 --> 00:35:00.510
as well--

00:35:00.510 --> 00:35:02.676
you can check out the
hardware support documentation

00:35:02.676 --> 00:35:04.350
on the Android dev site.

00:35:04.350 --> 00:35:06.450
The candle sample that
you see in the Sandbox,

00:35:06.450 --> 00:35:08.280
as we mentioned, is open source.

00:35:08.280 --> 00:35:10.650
So the source code and
the hardware design

00:35:10.650 --> 00:35:12.182
files themselves are on GitHub.

00:35:12.182 --> 00:35:14.640
And the design has also been
uploaded to Circuit Hub, where

00:35:14.640 --> 00:35:15.900
you can actually
purchase one of them

00:35:15.900 --> 00:35:18.060
directly if you don't even
want to mess with going

00:35:18.060 --> 00:35:19.540
through this whole process.

00:35:19.540 --> 00:35:21.480
So you can take a look
at those links as well,

00:35:21.480 --> 00:35:25.200
and also join our IoT developer
community on G+ so that you can

00:35:25.200 --> 00:35:26.010
connect with us.

00:35:26.010 --> 00:35:28.150
And Wayne and I are both
there answering questions.

00:35:28.150 --> 00:35:30.030
And just give us an
idea of what cool stuff

00:35:30.030 --> 00:35:31.530
you're doing so
that we can share it

00:35:31.530 --> 00:35:32.980
with the rest of the community.

00:35:32.980 --> 00:35:34.390
So we've got a few
minutes for questions.

00:35:34.390 --> 00:35:35.940
So if anybody has
any questions, feel

00:35:35.940 --> 00:35:37.900
free to hop up to the mics.

00:35:37.900 --> 00:35:39.076
And let's see what we got.

00:35:39.076 --> 00:35:40.200
WAYNE PIEKARSKI: Thank you.

00:35:40.200 --> 00:35:40.470
DAVE SMITH: Thank you.

00:35:40.470 --> 00:35:41.070
[APPLAUSE]

00:35:41.070 --> 00:35:44.420
[MUSIC PLAYING]

