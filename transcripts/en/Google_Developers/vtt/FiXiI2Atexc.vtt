WEBVTT
Kind: captions
Language: en

00:00:01.808 --> 00:00:02.657
[APPLAUSE]

00:00:02.657 --> 00:00:03.490
LARS BAK: All right.

00:00:03.490 --> 00:00:04.520
Good morning everybody.

00:00:04.520 --> 00:00:05.120
KASPER LUND: Morning.

00:00:05.120 --> 00:00:06.286
LARS BAK: Thanks for coming.

00:00:06.286 --> 00:00:07.186
It's super exciting.

00:00:07.186 --> 00:00:09.310
We've been working on this
project for a long time,

00:00:09.310 --> 00:00:14.290
and it's nice to see that people
are still interested in it.

00:00:14.290 --> 00:00:16.530
It's going to be
a great two days.

00:00:16.530 --> 00:00:18.542
There are a lot of
Dart team members.

00:00:18.542 --> 00:00:20.916
Actually I would like to start,
ask the Dart team members

00:00:20.916 --> 00:00:24.440
to stand up so we can see them.

00:00:24.440 --> 00:00:26.930
And you can see
there's a lot of them.

00:00:26.930 --> 00:00:29.070
So if you have
questions about Dart

00:00:29.070 --> 00:00:31.170
or really want to
corner them, those

00:00:31.170 --> 00:00:33.910
are the faces you
want to attack later.

00:00:33.910 --> 00:00:38.380
So my name is Lars Bak, and this
is my colleague, Kasper Lund,

00:00:38.380 --> 00:00:40.251
and we are both
engineers at Google

00:00:40.251 --> 00:00:42.000
and have been working
on Dart for a while.

00:00:45.080 --> 00:00:47.990
Welcome everybody.

00:00:47.990 --> 00:00:50.830
The main purpose of this
event is to do networking.

00:00:50.830 --> 00:00:52.640
So that means that
whenever we have breaks,

00:00:52.640 --> 00:00:56.280
you should go and talk to people
you don't know and ask them

00:00:56.280 --> 00:01:00.560
about how they use Dart and
listen to their success stories

00:01:00.560 --> 00:01:02.870
and so on.

00:01:02.870 --> 00:01:05.840
We'll try our best to get
around, talk to all of you,

00:01:05.840 --> 00:01:09.310
and but foremost it has
to be a great event.

00:01:09.310 --> 00:01:11.030
So I hope you will enjoy it.

00:01:13.620 --> 00:01:19.160
We started the Dart project
four and a half years ago

00:01:19.160 --> 00:01:23.390
to make sure that you could
be better, productive when

00:01:23.390 --> 00:01:24.800
doing programming.

00:01:24.800 --> 00:01:27.970
You probably all know that we
had a background in V8 doing

00:01:27.970 --> 00:01:29.520
JavaScript, and we
thought we could

00:01:29.520 --> 00:01:31.530
do something that was better.

00:01:31.530 --> 00:01:35.820
In particular we wanted to
create a programming platform

00:01:35.820 --> 00:01:38.740
where you had fast
turnaround cycles no matter

00:01:38.740 --> 00:01:42.950
how big your program was, fast
and predictable performance.

00:01:42.950 --> 00:01:45.540
And I think that's super
important so that the program

00:01:45.540 --> 00:01:47.750
can understand what's going on.

00:01:47.750 --> 00:01:49.250
The most annoying
part is you change

00:01:49.250 --> 00:01:53.130
one small part of your
program, and suddenly it's slow

00:01:53.130 --> 00:01:55.310
and you don't know why,
and you have to profile it.

00:01:55.310 --> 00:01:57.620
So that was the
sign to make sure

00:01:57.620 --> 00:02:01.055
that it was fast and predictable
no matter what kind of platform

00:02:01.055 --> 00:02:03.020
it was running on.

00:02:03.020 --> 00:02:06.310
Also clear language
semantics, we have a spec now.

00:02:06.310 --> 00:02:08.690
And so you should be able
to easily figure out what's

00:02:08.690 --> 00:02:10.880
going on when you execute Dart.

00:02:10.880 --> 00:02:15.300
And then, lastly, we also put
in an optional strong type

00:02:15.300 --> 00:02:18.500
system, static type system,
that's great for tooling.

00:02:18.500 --> 00:02:21.890
So if you have a big
program and you add types,

00:02:21.890 --> 00:02:25.380
we have tooling support for
doing refactoring and so on.

00:02:25.380 --> 00:02:28.420
So all in all, we hope
that Dart is still

00:02:28.420 --> 00:02:32.590
contributing to improved
programmer productivity.

00:02:32.590 --> 00:02:36.210
So there's been a lot
of questions about Dart.

00:02:36.210 --> 00:02:39.920
How can we improve the
Dart SDK over time?

00:02:39.920 --> 00:02:43.420
How or where is the
robust Dart web framework?

00:02:43.420 --> 00:02:46.370
As you all know on the web,
everything is in transition

00:02:46.370 --> 00:02:47.300
all the time.

00:02:47.300 --> 00:02:49.420
And sometimes you see a
framework that's coming up

00:02:49.420 --> 00:02:53.202
and is super popular but six
months down the line, it's gone

00:02:53.202 --> 00:02:54.660
and there's a new
one coming along.

00:02:54.660 --> 00:02:57.390
And so that's
certainly a challenge,

00:02:57.390 --> 00:02:59.080
and we'll talk about
that later, how

00:02:59.080 --> 00:03:01.160
to find the robust
Dart web framework.

00:03:04.350 --> 00:03:05.930
When can I use Dart for mobile?

00:03:05.930 --> 00:03:10.660
So far we have mostly focused
on the web for desktops

00:03:10.660 --> 00:03:14.930
and also for servers,
but we'll come up

00:03:14.930 --> 00:03:19.310
with answers, how to use
Dart on mobile in this talk.

00:03:19.310 --> 00:03:20.620
How about isolates?

00:03:20.620 --> 00:03:22.460
Isolates have been
around for a long time.

00:03:22.460 --> 00:03:24.970
It's the cool
talking frog in Dart,

00:03:24.970 --> 00:03:27.130
but nobody's really using
them mostly because we

00:03:27.130 --> 00:03:30.000
first targeted the web
platform where it's really

00:03:30.000 --> 00:03:32.950
hard to have concurrency.

00:03:32.950 --> 00:03:35.030
We'll be talking about
some use development

00:03:35.030 --> 00:03:40.101
that makes isolates easy to
use and also can demonstrate

00:03:40.101 --> 00:03:41.100
they're fairly scalable.

00:03:44.220 --> 00:03:49.350
At the end of the talk, I
will have some milestones

00:03:49.350 --> 00:03:52.010
for the project so you can
see what we are working on,

00:03:52.010 --> 00:03:54.670
and so you can
sort of aim at when

00:03:54.670 --> 00:03:57.915
you will get new features
in the Dart platform.

00:03:57.915 --> 00:04:00.040
These are some of the
questions that we have heard,

00:04:00.040 --> 00:04:02.540
and we will try to address
some of them in this talk,

00:04:02.540 --> 00:04:06.600
and all else will be addressed
in the talk over the next two

00:04:06.600 --> 00:04:07.100
days.

00:04:10.680 --> 00:04:15.800
First, I want to talk about how
we can improve the Dart SDK.

00:04:15.800 --> 00:04:21.480
Over the last year, we have been
moving the Dart analysis server

00:04:21.480 --> 00:04:24.910
from within Eclipse
two an independent Dart

00:04:24.910 --> 00:04:27.910
service that all IDs can use.

00:04:27.910 --> 00:04:33.910
And we'll talk about later today
that we'll be using WebStorm

00:04:33.910 --> 00:04:36.540
instead of the Dart editor.

00:04:36.540 --> 00:04:41.270
So when we ship 1.11
and in a short while,

00:04:41.270 --> 00:04:44.410
we will be focusing
on using WebStorm.

00:04:44.410 --> 00:04:45.820
And that will be
a plug-in, which

00:04:45.820 --> 00:04:48.100
is the Dart analysis server,
that will provide all

00:04:48.100 --> 00:04:51.090
of the analysis into the ID.

00:04:51.090 --> 00:04:52.940
And the cool thing
about this architecture

00:04:52.940 --> 00:04:56.880
is, of course, that if you
have your own third party ID

00:04:56.880 --> 00:04:59.390
and you want to have
a plug-in for Dart,

00:04:59.390 --> 00:05:04.380
you basically do that by just
customizing your code to talk

00:05:04.380 --> 00:05:06.510
to this analysis server.

00:05:06.510 --> 00:05:09.830
We want to have
better debugging.

00:05:09.830 --> 00:05:14.480
You probably all read about our
1.9 feature, async 0.8 which

00:05:14.480 --> 00:05:16.257
is really, really
cool when you do

00:05:16.257 --> 00:05:18.090
server side program in
[INAUDIBLE] and stuff

00:05:18.090 --> 00:05:19.050
like that.

00:05:19.050 --> 00:05:22.510
However, the problem is
when you use async 0.8,

00:05:22.510 --> 00:05:24.720
the stack is gone.

00:05:24.720 --> 00:05:27.290
And it's really hard to debug,
figure out what's going on.

00:05:27.290 --> 00:05:31.070
We will in the new
version of the SDK

00:05:31.070 --> 00:05:33.390
provide better
stack trace support

00:05:33.390 --> 00:05:36.420
so you can see how these
state machines were created

00:05:36.420 --> 00:05:38.550
and when they got created.

00:05:38.550 --> 00:05:41.310
We will also focus on
interactive programming

00:05:41.310 --> 00:05:43.480
so that when you have
a Dart program running,

00:05:43.480 --> 00:05:47.780
you can shoot off expressions
to the running system

00:05:47.780 --> 00:05:50.505
so you have a better interaction
with the running program that

00:05:50.505 --> 00:05:55.340
will allow you to be more
productive when you debug.

00:05:55.340 --> 00:05:58.610
Lastly, we are also
improving the tools.

00:05:58.610 --> 00:06:01.010
You all know if you're
running on Windows,

00:06:01.010 --> 00:06:04.820
that there are a lot of
symlinks when you do packages.

00:06:04.820 --> 00:06:06.660
They are disappearing,
which is good,

00:06:06.660 --> 00:06:09.360
which will make the
platform more robust.

00:06:09.360 --> 00:06:11.185
We will also have
a solution that

00:06:11.185 --> 00:06:12.900
will allow you to
bundle resources,

00:06:12.900 --> 00:06:17.684
like picture and audio,
with the deployed Dart app.

00:06:17.684 --> 00:06:19.100
So this should
just make it easier

00:06:19.100 --> 00:06:23.600
for you to use Dart if
you want to do deployment.

00:06:27.670 --> 00:06:30.260
Another focus we
have in the Dart team

00:06:30.260 --> 00:06:32.640
is Dart for the entire web.

00:06:32.640 --> 00:06:38.180
We want to make it is as
excellent to develop in Chrome

00:06:38.180 --> 00:06:41.940
as it is in other browsers
or the other way around.

00:06:41.940 --> 00:06:45.100
So right now we have
the Dartium build

00:06:45.100 --> 00:06:49.492
of Chromium that allows you
to do fast turnaround cycles.

00:06:49.492 --> 00:06:50.950
That works well if
you're trying it

00:06:50.950 --> 00:06:54.530
out on Chrome, but on
other browsers like Safari

00:06:54.530 --> 00:06:58.240
and Firefox, we would
also like to have

00:06:58.240 --> 00:06:59.940
the same fast turnaround cycles.

00:06:59.940 --> 00:07:02.350
So if you start a new
project called the DDC,

00:07:02.350 --> 00:07:03.700
Dart Development Compiler.

00:07:03.700 --> 00:07:05.470
We will allow you to
have fast turnaround

00:07:05.470 --> 00:07:07.840
times even though
you are debugging

00:07:07.840 --> 00:07:10.050
on any of these browsers.

00:07:10.050 --> 00:07:13.210
So there will be a session
later today at 2:30,

00:07:13.210 --> 00:07:16.760
where you will hear
about this new compiler.

00:07:16.760 --> 00:07:19.500
And lastly, we also want to do
better typescript JavaScript

00:07:19.500 --> 00:07:20.830
integration.

00:07:20.830 --> 00:07:23.720
So if you want to use Dart for
only a part of your program,

00:07:23.720 --> 00:07:24.590
you can do that.

00:07:29.840 --> 00:07:34.040
Now we will talk a few words
about the web application

00:07:34.040 --> 00:07:34.540
framework.

00:07:34.540 --> 00:07:36.770
You probably all heard
about Angular 2.0.

00:07:36.770 --> 00:07:39.870
This is the next generation
Angular platform.

00:07:39.870 --> 00:07:43.400
And we will be using that as
a preferred web application

00:07:43.400 --> 00:07:45.290
framework for Dart
moving forward.

00:07:45.290 --> 00:07:49.570
It's not done yet, and it'll
come out later this year.

00:07:49.570 --> 00:07:53.070
But what we already know is that
it's not as dynamic as Angular

00:07:53.070 --> 00:07:57.580
1.0 that allows us to generate
much smaller JavaScript code

00:07:57.580 --> 00:08:01.390
from the Dart [INAUDIBLE]
compiler, and, even better,

00:08:01.390 --> 00:08:03.620
the resulting application
is much faster.

00:08:03.620 --> 00:08:05.290
So, for instance,
if you have a table

00:08:05.290 --> 00:08:08.310
and you are scrolling and
so on, the Angular 2.0

00:08:08.310 --> 00:08:10.190
is already now
three times faster

00:08:10.190 --> 00:08:12.480
than the previous version.

00:08:12.480 --> 00:08:14.620
So it's looking
pretty good, and we'll

00:08:14.620 --> 00:08:18.160
do what we can to make
it as stable as possible,

00:08:18.160 --> 00:08:19.035
as fast as possible.

00:08:23.290 --> 00:08:26.420
Here's the industry transition.

00:08:26.420 --> 00:08:29.320
The whole thing is
moving from desktops

00:08:29.320 --> 00:08:31.440
to more mobile platforms.

00:08:31.440 --> 00:08:33.770
So we will have a
few slides presented

00:08:33.770 --> 00:08:36.049
by Kasper talking
about how we will

00:08:36.049 --> 00:08:38.864
attack the mobile platform.

00:08:38.864 --> 00:08:40.822
KASPER LUND: As you're
probably aware of this,

00:08:40.822 --> 00:08:42.780
but there's a very strong
trend in the industry

00:08:42.780 --> 00:08:46.330
that people are moving towards--
mobile, smartphones, tablets.

00:08:46.330 --> 00:08:48.860
People really want to run
applications in that setting

00:08:48.860 --> 00:08:50.260
and run them really well.

00:08:50.260 --> 00:08:53.550
And that gives us a lot of
great opportunities in the Dart

00:08:53.550 --> 00:08:55.430
space, and I'm going
to try to tell you

00:08:55.430 --> 00:08:58.110
a little bit about what
we're doing in that space.

00:08:58.110 --> 00:09:01.890
So mobile I think is really an
exciting opportunity for Dart.

00:09:01.890 --> 00:09:05.670
Dart, as a language, is really
designed for speed and size.

00:09:05.670 --> 00:09:08.880
And that seems to fit really
well in a mobile setting.

00:09:08.880 --> 00:09:11.970
Also, we have a strong focus
on developer productivity,

00:09:11.970 --> 00:09:14.230
and that seems like a welcome
addition to that space.

00:09:14.230 --> 00:09:16.070
Like a lot of the
native tool chains

00:09:16.070 --> 00:09:19.070
that people are using
today have very long sort

00:09:19.070 --> 00:09:20.760
of edit compile run cycles.

00:09:20.760 --> 00:09:24.180
Which is-- I mean if you're used
to working with something Dart

00:09:24.180 --> 00:09:26.630
and Dartium, it's very painful
to go to the native side

00:09:26.630 --> 00:09:28.980
and experience these
minute-long pauses,

00:09:28.980 --> 00:09:31.780
and then upload your app, run
it again, start from scratch.

00:09:31.780 --> 00:09:33.395
It's really not a
nice experience.

00:09:33.395 --> 00:09:36.910
And I think we can really
do even better there.

00:09:36.910 --> 00:09:39.312
So I think mobile
is pretty exciting.

00:09:39.312 --> 00:09:41.270
So we've been trying to
ask the question of why

00:09:41.270 --> 00:09:44.410
do people actually want
to use Dart on mobile?

00:09:44.410 --> 00:09:47.820
And clearly there's a desire
to use a modern and productive

00:09:47.820 --> 00:09:49.190
technology stack on mobile.

00:09:49.190 --> 00:09:50.720
But maybe, more
importantly, people

00:09:50.720 --> 00:09:54.200
feel like there could be a great
story in enabling code sharing

00:09:54.200 --> 00:09:57.937
across server and multiple
versions of the same client

00:09:57.937 --> 00:09:58.520
apps, perhaps.

00:09:58.520 --> 00:10:03.395
So if you're writing apps
that target iOS and Android,

00:10:03.395 --> 00:10:05.520
you probably want to be
able to share code between.

00:10:05.520 --> 00:10:08.490
And I think that's a space where
Dart can fit in really well.

00:10:08.490 --> 00:10:10.880
So if you look at a
diagram like this,

00:10:10.880 --> 00:10:13.530
imagine you have a
big application on iOS

00:10:13.530 --> 00:10:16.500
and you have the same sort
of application on Android,

00:10:16.500 --> 00:10:19.080
on iOS it's probably written
in Objective-C or some variant

00:10:19.080 --> 00:10:20.100
thereof.

00:10:20.100 --> 00:10:21.802
On Android it might
be written in Java.

00:10:21.802 --> 00:10:23.510
And if you have the
same thing on the web

00:10:23.510 --> 00:10:26.235
as well, you've probably written
that in this forum, probably

00:10:26.235 --> 00:10:27.860
in Dart, and other
forums, maybe you've

00:10:27.860 --> 00:10:29.050
written that in JavaScript.

00:10:29.050 --> 00:10:31.690
So you're running across
these different platforms.

00:10:31.690 --> 00:10:34.470
And you really want to be able
to have something at the bottom

00:10:34.470 --> 00:10:36.640
here where you can
share services,

00:10:36.640 --> 00:10:39.340
for lack of better
word, written in Dart.

00:10:39.340 --> 00:10:41.400
And it's a bit unclear
how much of your code

00:10:41.400 --> 00:10:43.850
you can push down there and
get the sharing benefits from.

00:10:43.850 --> 00:10:47.370
So it might be that the
diagram is a little bit off,

00:10:47.370 --> 00:10:50.040
that you can actually have a
lot more stuff in the Services

00:10:50.040 --> 00:10:53.460
section given the right kind
of application architecture.

00:10:53.460 --> 00:10:55.830
But the core notion is that
you can get this sharing.

00:10:55.830 --> 00:10:57.621
You can write the stuff
in Dart and you can

00:10:57.621 --> 00:11:00.100
work with that as Dart code.

00:11:00.100 --> 00:11:01.630
We actually prototyped this.

00:11:01.630 --> 00:11:05.820
We built a way of writing
a Dart application,

00:11:05.820 --> 00:11:08.200
write all the business
logic or the model,

00:11:08.200 --> 00:11:09.870
you could say, in Dart code.

00:11:09.870 --> 00:11:13.790
And then theme it and give it
a native UI on top of that.

00:11:13.790 --> 00:11:15.980
Here you see on
the far left, you

00:11:15.980 --> 00:11:20.730
see an Android UI using
native Android widgets.

00:11:20.730 --> 00:11:22.920
It's built basically
showing a list of to do.

00:11:22.920 --> 00:11:25.800
It's a very simple
thing, but the to-dos

00:11:25.800 --> 00:11:27.780
are implemented in Dart code.

00:11:27.780 --> 00:11:32.540
And that model is then shown or
presented on the Android system

00:11:32.540 --> 00:11:35.130
as a list of native widgets.

00:11:35.130 --> 00:11:37.860
On the right side you
have the same code on iOS.

00:11:37.860 --> 00:11:39.910
It's a slightly
different look and feel

00:11:39.910 --> 00:11:41.860
but still a native
look and feel.

00:11:41.860 --> 00:11:44.550
And in the middle, we
have our own command line

00:11:44.550 --> 00:11:47.590
based UI, you could say, for
the same kind of application,

00:11:47.590 --> 00:11:49.910
just showcasing that
you can actually

00:11:49.910 --> 00:11:53.530
build any kind of UI you want
to for this kind of application.

00:11:53.530 --> 00:11:55.220
It's a simple
example, but it does

00:11:55.220 --> 00:11:57.794
show you can build native
applications in Dart code.

00:11:57.794 --> 00:11:59.710
And we have this running
today, and I'm really

00:11:59.710 --> 00:12:01.126
happy to get some
feedback on that

00:12:01.126 --> 00:12:04.629
and have conversations
about that later on.

00:12:04.629 --> 00:12:06.170
You might have a
small question here,

00:12:06.170 --> 00:12:09.197
how do we actually run
this Dart code on iOS?

00:12:09.197 --> 00:12:11.780
And that's something we've been
working on for a little while,

00:12:11.780 --> 00:12:14.310
trying to make it possible
for us to run Dart well

00:12:14.310 --> 00:12:15.775
in an iOS context.

00:12:15.775 --> 00:12:17.400
On iOS there are
different restrictions

00:12:17.400 --> 00:12:19.960
that make it harder for
us to run Dart code.

00:12:19.960 --> 00:12:24.880
The Dart VM is very
much based on just

00:12:24.880 --> 00:12:27.120
in time compilation, which
is disallowed by iOS.

00:12:27.120 --> 00:12:30.210
So we cannot just take that as
it is and move it over there.

00:12:30.210 --> 00:12:33.200
So we need something else
that will make our Dart code

00:12:33.200 --> 00:12:34.740
fly on iOS.

00:12:34.740 --> 00:12:37.280
That thing is a
runtime system for iOS,

00:12:37.280 --> 00:12:40.330
called Fletch, which
is a small system.

00:12:40.330 --> 00:12:43.220
It's using interpretation
based on byte codes

00:12:43.220 --> 00:12:45.980
to fit in well in
the iOS setting.

00:12:45.980 --> 00:12:47.040
And it's really small.

00:12:47.040 --> 00:12:49.210
So that means that if you
have a native app for iOS,

00:12:49.210 --> 00:12:52.761
and you want to add some
amount of Dart code to it,

00:12:52.761 --> 00:12:55.010
adding the first line of
Dart code to your application

00:12:55.010 --> 00:12:57.700
is not going to blow the
binary size budget you have.

00:12:57.700 --> 00:12:59.234
So we've kept it
small and simple,

00:12:59.234 --> 00:13:01.400
and it's basically just to
make sure we can actually

00:13:01.400 --> 00:13:04.400
start sharing code between
Android and iOS versions

00:13:04.400 --> 00:13:06.760
through this Dart system.

00:13:06.760 --> 00:13:09.840
But there is a nice thing
about having a real runtime

00:13:09.840 --> 00:13:11.680
system on these
devices, and that thing

00:13:11.680 --> 00:13:14.430
is that you can actually do
on the fly program changes

00:13:14.430 --> 00:13:16.830
and support that in
the runtime system.

00:13:16.830 --> 00:13:19.440
So that means that for the
parts of your application,

00:13:19.440 --> 00:13:22.400
for this native application
that you've written in Dart,

00:13:22.400 --> 00:13:24.710
you can start changing that
while the program is still

00:13:24.710 --> 00:13:25.770
executing.

00:13:25.770 --> 00:13:28.235
And you can apply these
changes in an atomic way,

00:13:28.235 --> 00:13:30.130
like build up a
small set of changes

00:13:30.130 --> 00:13:33.720
that you want to fire off over
a wire protocol on a real device

00:13:33.720 --> 00:13:35.080
running your app.

00:13:35.080 --> 00:13:37.360
Without restarting it, you
can change the code there.

00:13:37.360 --> 00:13:39.485
And that really enables
fast development workflows,

00:13:39.485 --> 00:13:42.809
and it actually might be
a way of enticing people

00:13:42.809 --> 00:13:44.850
to write more of their
stuff in Dart because they

00:13:44.850 --> 00:13:46.350
get the benefit
without having to go

00:13:46.350 --> 00:13:51.140
through an expensive edit,
compile, restart cycle.

00:13:53.730 --> 00:13:56.325
There's a session about this
is called Dart for Mobile

00:13:56.325 --> 00:14:00.440
tomorrow at 4:30, and we'll
go into a lot more details

00:14:00.440 --> 00:14:02.560
about what this and
how this actually

00:14:02.560 --> 00:14:05.987
feels like from a
developer's perspective.

00:14:05.987 --> 00:14:07.570
There is another
area that I'm sort of

00:14:07.570 --> 00:14:13.080
touched on that also feels ripe
for improvements, Isolates.

00:14:13.080 --> 00:14:16.260
So when we shipped the
first version of Dart,

00:14:16.260 --> 00:14:18.680
people got really
excited about isolates.

00:14:18.680 --> 00:14:21.030
It seems like everybody,
at least almost everybody

00:14:21.030 --> 00:14:23.240
likes the idea of
isolates, like the ability

00:14:23.240 --> 00:14:26.370
to scale and get parallelism
into your code, security

00:14:26.370 --> 00:14:29.300
and plugins and actually
having a way of running code

00:14:29.300 --> 00:14:31.900
in a sandbox setting,
and maybe my favorite

00:14:31.900 --> 00:14:35.039
is the ability to actually
enforce resource constraints.

00:14:35.039 --> 00:14:36.830
At least in theory,
you can take an isolate

00:14:36.830 --> 00:14:39.040
and say, I only want to give
you two megabytes of memory

00:14:39.040 --> 00:14:39.840
to run your stuff.

00:14:39.840 --> 00:14:42.982
And if you cannot live within
that, I can shut you down.

00:14:42.982 --> 00:14:44.440
It feels like a
really strong thing

00:14:44.440 --> 00:14:46.860
because the isolates
are so disconnected.

00:14:46.860 --> 00:14:49.931
In practice, however, we
found that almost nobody

00:14:49.931 --> 00:14:50.680
likes to use them.

00:14:50.680 --> 00:14:52.890
Like they are powerful
and you can use them,

00:14:52.890 --> 00:14:55.255
but they are hard to use
and they really-- They

00:14:55.255 --> 00:14:56.880
have a sort of
cumbersome feel to them,

00:14:56.880 --> 00:14:58.740
and, maybe the worst
thing, is that it

00:14:58.740 --> 00:15:01.390
seems like simple things
are a little bit hard to do.

00:15:01.390 --> 00:15:03.180
And that's a really
bad place to be.

00:15:03.180 --> 00:15:06.400
Some people have built really
fantastic things with isolates,

00:15:06.400 --> 00:15:09.820
but I think it's more in
spite of the current APIs

00:15:09.820 --> 00:15:11.210
than it's because of them.

00:15:11.210 --> 00:15:12.899
They are actually hard to use.

00:15:12.899 --> 00:15:15.190
So to give you an idea of
where we'd like to take this,

00:15:15.190 --> 00:15:19.350
I'm going to give you a
small example of what another

00:15:19.350 --> 00:15:23.280
isolate API might look like and
how we could improve things.

00:15:23.280 --> 00:15:24.380
Fractals.

00:15:24.380 --> 00:15:26.430
This is probably not the
most beautiful rendering

00:15:26.430 --> 00:15:28.360
of a Mandelbrot fractal
that you've seen.

00:15:28.360 --> 00:15:31.540
If it is then, you have
some online searching to do.

00:15:31.540 --> 00:15:33.887
But this is fairly simple.

00:15:33.887 --> 00:15:34.720
But it is a problem.

00:15:34.720 --> 00:15:36.303
Like computing this
thing is a problem

00:15:36.303 --> 00:15:38.450
that's easy to [? paralyze, ?]
just not very easy

00:15:38.450 --> 00:15:39.590
in Dart today.

00:15:39.590 --> 00:15:41.960
So how do we make this easy
to [? paralyze ?] in Dart?

00:15:41.960 --> 00:15:44.800
Well, the way to actually
compute something like this,

00:15:44.800 --> 00:15:46.230
could look a little
bit like this.

00:15:46.230 --> 00:15:46.380
Right.

00:15:46.380 --> 00:15:48.510
You have a way of rendering
the entire fractal

00:15:48.510 --> 00:15:51.740
and getting a list of the
strings out you want to print.

00:15:51.740 --> 00:15:54.310
Every single line needs to be
rendered to a string as well.

00:15:54.310 --> 00:15:55.680
And every single character
rendered in the line

00:15:55.680 --> 00:15:57.270
needs to be rendered
to a character.

00:15:57.270 --> 00:15:59.460
If you look at the first
render fractal line

00:15:59.460 --> 00:16:01.570
up there, one way of
doing it is saying,

00:16:01.570 --> 00:16:04.850
I want to get a list
out with all the strings

00:16:04.850 --> 00:16:07.780
that come out of actually
calling render line.

00:16:07.780 --> 00:16:10.310
So I can generate a list
and fill in the contents

00:16:10.310 --> 00:16:13.950
from calling render line
sort of in sequence.

00:16:13.950 --> 00:16:16.040
This is actually fairly
simple code in many ways,

00:16:16.040 --> 00:16:18.054
and hopefully, given
a little bit of time,

00:16:18.054 --> 00:16:19.970
you could also just like
start hacking on this

00:16:19.970 --> 00:16:20.845
and making it better.

00:16:20.845 --> 00:16:24.499
So there are like 24,000
entries in this diagram.

00:16:24.499 --> 00:16:26.040
It would be nice if
you could compute

00:16:26.040 --> 00:16:27.610
them a little bit faster.

00:16:27.610 --> 00:16:30.120
So imagine the motherboard
execution on there

00:16:30.120 --> 00:16:30.807
is expensive.

00:16:30.807 --> 00:16:32.140
You want to [? paralyze ?] that.

00:16:32.140 --> 00:16:33.180
How would you do that?

00:16:33.180 --> 00:16:35.697
Well, if you consider
adding a little bit of space

00:16:35.697 --> 00:16:37.530
for putting in the
parallel constructs here,

00:16:37.530 --> 00:16:41.000
and you just go ahead and say,
I want to run this kind of thing

00:16:41.000 --> 00:16:42.260
in parallel.

00:16:42.260 --> 00:16:44.370
So what do I need to
add to make this happen?

00:16:44.370 --> 00:16:45.869
Well, first of all,
you need to have

00:16:45.869 --> 00:16:50.030
some construct for running a
list of actions in parallel.

00:16:50.030 --> 00:16:54.600
So I turned the render line
called in to a closure,

00:16:54.600 --> 00:16:57.100
that actually will
be an action for me

00:16:57.100 --> 00:16:58.590
that I can call
later on, and then

00:16:58.590 --> 00:17:02.130
I just tell the system I want
to run these in parallel.

00:17:02.130 --> 00:17:05.050
That seems like a pretty simple,
straightforward transition

00:17:05.050 --> 00:17:09.400
from a simple serial
API to a parallel one.

00:17:09.400 --> 00:17:12.190
It relies on us being able to
block at this point and say,

00:17:12.190 --> 00:17:16.450
I cannot really continue running
the render fractal method until

00:17:16.450 --> 00:17:17.609
I get a reply back.

00:17:17.609 --> 00:17:19.300
So it puts pressure on us
to deliver something that's

00:17:19.300 --> 00:17:21.109
synchronous because
that's the only way you

00:17:21.109 --> 00:17:25.950
can go in a trivial away from
a serial or simple to parallel.

00:17:25.950 --> 00:17:27.730
You can take this
to another level

00:17:27.730 --> 00:17:30.699
by doing the same thing
at the render line thing.

00:17:30.699 --> 00:17:32.740
Once you do this, then
you get actually something

00:17:32.740 --> 00:17:35.420
like more than
24,000 independent

00:17:35.420 --> 00:17:36.870
isolates that sort
of communicate

00:17:36.870 --> 00:17:37.969
and get a reply back.

00:17:37.969 --> 00:17:40.260
So if you want to make this
happen and to make it fast,

00:17:40.260 --> 00:17:42.593
you need to be able to sort
of lots and lots of isolates

00:17:42.593 --> 00:17:44.580
running concurrently.

00:17:44.580 --> 00:17:46.950
The nice thing is that we
actually built this and we

00:17:46.950 --> 00:17:49.450
prototyped this on top of Fletch
that has really lightweight

00:17:49.450 --> 00:17:53.040
isolates and a way of doing
more synchronous API's.

00:17:53.040 --> 00:17:55.840
And maybe the
final thing to note

00:17:55.840 --> 00:18:00.340
here is that it also supports
sending closures like this

00:18:00.340 --> 00:18:01.765
from one isolate to another.

00:18:01.765 --> 00:18:03.890
As long as the things you're
sending are immutable,

00:18:03.890 --> 00:18:05.690
you can send them without
copying them over,

00:18:05.690 --> 00:18:07.731
and that makes it really
to express these things.

00:18:07.731 --> 00:18:09.850
It's a way of rethinking
the core isolate

00:18:09.850 --> 00:18:13.940
APIs to make things like
parallelism a lot easier.

00:18:13.940 --> 00:18:19.480
So on my 16 core machine at the
office, I get these results.

00:18:19.480 --> 00:18:25.570
Instead of doing it just
as a set of serial steps,

00:18:25.570 --> 00:18:29.560
you can run them in parallel
this, 24,000 plus isolates.

00:18:29.560 --> 00:18:32.280
And that's 15.5
performance increase, which

00:18:32.280 --> 00:18:34.549
fits pretty well with the
scalability constraints

00:18:34.549 --> 00:18:35.090
we have here.

00:18:35.090 --> 00:18:36.700
I mean, it's a
simple system, but it

00:18:36.700 --> 00:18:39.650
shows that just fanning and
generating lots of isolates

00:18:39.650 --> 00:18:44.230
and then sort of reducing that,
to a simple, in this case,

00:18:44.230 --> 00:18:46.450
list of strings works
pretty well already.

00:18:46.450 --> 00:18:48.700
And it's a different way
of thinking about isolates

00:18:48.700 --> 00:18:50.320
and what we can do.

00:18:50.320 --> 00:18:51.935
It is research directions.

00:18:51.935 --> 00:18:53.810
We're trying to figure
out if this is enough,

00:18:53.810 --> 00:18:55.934
and I think it's pretty
clear that it's not enough.

00:18:55.934 --> 00:18:58.040
But it's a good place
to start to get--

00:18:58.040 --> 00:19:00.810
to make it much, much
easier to actually build

00:19:00.810 --> 00:19:02.590
parallel stuff in Dart.

00:19:02.590 --> 00:19:04.690
It's based on
synchronous operations.

00:19:04.690 --> 00:19:07.000
It's based on this notion
of not copying things

00:19:07.000 --> 00:19:08.800
when you pass messages.

00:19:08.800 --> 00:19:10.840
When they are
immutable, you can just

00:19:10.840 --> 00:19:14.134
block your current isolate, fan
out, and hand over reference

00:19:14.134 --> 00:19:15.550
to these mutable
data because it's

00:19:15.550 --> 00:19:17.710
safe to do so if
they are mutable.

00:19:17.710 --> 00:19:20.050
And it's also based on
really lightweight isolates.

00:19:20.050 --> 00:19:22.650
So I think that that's sort
of the core of what we're

00:19:22.650 --> 00:19:25.579
trying to do with isolates,
make it a lot easier to use

00:19:25.579 --> 00:19:27.120
and also make it a
lot more powerful.

00:19:31.593 --> 00:19:36.570
[APPLAUSE]

00:19:36.570 --> 00:19:38.690
LARS BAK: So many of you
probably ask questions.

00:19:38.690 --> 00:19:41.635
So we have Fletch and
we have the Dart VM.

00:19:41.635 --> 00:19:44.030
Are they sort of spitting it?

00:19:44.030 --> 00:19:45.990
So the way you
should think about

00:19:45.990 --> 00:19:49.150
is the Fletch VM right now
is sort of mostly a research

00:19:49.150 --> 00:19:50.340
vehicle.

00:19:50.340 --> 00:19:51.600
It's not done yet.

00:19:51.600 --> 00:19:53.720
And many of the
ideas with isolates

00:19:53.720 --> 00:19:56.000
can easily be transferred
to the Dart VM.

00:19:56.000 --> 00:19:58.630
So if these features
pan out, they

00:19:58.630 --> 00:20:00.452
will be available for
all Dart execution.

00:20:00.452 --> 00:20:02.910
KASPER LUND: Yes, it's mostly
about getting the feature set

00:20:02.910 --> 00:20:04.990
right, and I think
you play a big part

00:20:04.990 --> 00:20:07.610
in helping us determine
what's right before starting.

00:20:07.610 --> 00:20:08.830
LARS BAK: Yes.

00:20:08.830 --> 00:20:09.330
Yes.

00:20:09.330 --> 00:20:10.663
KASPER LUND: This direction now.

00:20:14.114 --> 00:20:15.530
LARS BAK: Learning
a new language,

00:20:15.530 --> 00:20:18.480
learning a new
platform takes a while.

00:20:18.480 --> 00:20:23.690
And this slide here is to tell
you to tell about Dart is here

00:20:23.690 --> 00:20:24.410
for the long run.

00:20:24.410 --> 00:20:26.390
We've been doing
Dart exclusively

00:20:26.390 --> 00:20:30.290
for four and a half years
and we'll continue to do so.

00:20:30.290 --> 00:20:35.210
Many projects inside Google
have invested a lot in Dart,

00:20:35.210 --> 00:20:37.450
and they will continue to do so.

00:20:37.450 --> 00:20:40.120
Also on the outside, and
you will hear many talks

00:20:40.120 --> 00:20:43.620
during these two days
about how external projects

00:20:43.620 --> 00:20:46.320
and companies are using Dart.

00:20:46.320 --> 00:20:50.040
I'll just let you read you the
part of this quote from Scott

00:20:50.040 --> 00:20:53.600
Silver, the VP of Engineering
for Ads, who has decided

00:20:53.600 --> 00:20:58.440
to build the next key-- the next
generation of platform based

00:20:58.440 --> 00:20:59.050
on Dart.

00:20:59.050 --> 00:21:02.050
So Dart will be here
for the long run.

00:21:02.050 --> 00:21:03.880
And it's important
for you guys to know

00:21:03.880 --> 00:21:07.300
because if you have to bet
on Dart for your company,

00:21:07.300 --> 00:21:09.230
it's good to know
that it will be around

00:21:09.230 --> 00:21:10.330
for the next many years.

00:21:14.530 --> 00:21:18.910
Here is the best roadmap
I could come up with.

00:21:18.910 --> 00:21:23.190
It's an animated slide so
it will be more (laughing).

00:21:23.190 --> 00:21:27.200
In May we will
migrate to Github,

00:21:27.200 --> 00:21:31.030
consolidate our source code.

00:21:31.030 --> 00:21:35.030
In 1.11 we will
retire the Dart ID

00:21:35.030 --> 00:21:38.140
and provide a
plug-in for WebStorm.

00:21:38.140 --> 00:21:42.800
So from then on, WebStorm
is the ID for Dart.

00:21:45.930 --> 00:21:49.200
We'll be adding HTTP
2 and Google RPC

00:21:49.200 --> 00:21:53.160
in 1.12, which is nice.

00:21:53.160 --> 00:21:57.030
We will give you
Fletch, the new VM.

00:21:57.030 --> 00:21:59.490
That will be a
beta version in Q3.

00:21:59.490 --> 00:22:02.930
And the final version
will come out in Q4.

00:22:02.930 --> 00:22:08.170
And the fact that we can run
Dart code without generating

00:22:08.170 --> 00:22:13.210
code will be great for iOS so
we can ship mobile applications

00:22:13.210 --> 00:22:15.580
on that platform.

00:22:15.580 --> 00:22:18.060
We will also provide
the Dart mobile services

00:22:18.060 --> 00:22:22.550
so we have a way of-- You could
take your Dart business logic

00:22:22.550 --> 00:22:25.070
and hook up to native UI digits.

00:22:25.070 --> 00:22:27.615
And we'll provide generators
that are based on IDL.

00:22:27.615 --> 00:22:31.090
They will generate all
the wire protocol for you.

00:22:34.180 --> 00:22:36.810
And then in the beginning
of the next year,

00:22:36.810 --> 00:22:39.570
it'll be Dart SDK 2.0.

00:22:39.570 --> 00:22:42.115
But don't worry, it'll be
mostly backwards compatible.

00:22:44.630 --> 00:22:45.810
This is not Python.

00:22:45.810 --> 00:22:49.900
[LAUGHTER]

00:22:49.900 --> 00:22:53.670
What we will do, however,
is we will guarantee

00:22:53.670 --> 00:22:55.490
that the programming
language is backwards

00:22:55.490 --> 00:22:58.490
compatible completely.

00:22:58.490 --> 00:23:02.290
If we do incompatible
changes in Dart SDK 2.0,

00:23:02.290 --> 00:23:03.880
we'll make sure
there is a migration

00:23:03.880 --> 00:23:06.520
tool that will
automatically convert

00:23:06.520 --> 00:23:10.460
your code to the new version.

00:23:10.460 --> 00:23:13.190
And you can ask, why
are we doing all this?

00:23:13.190 --> 00:23:15.930
Well, there are some
parts of the core Dart SDK

00:23:15.930 --> 00:23:18.280
we would like to
get out in packages,

00:23:18.280 --> 00:23:22.360
for instance like HTML,
and so we can faster

00:23:22.360 --> 00:23:23.756
rev that and so on.

00:23:23.756 --> 00:23:25.130
But trust us, we
will do whatever

00:23:25.130 --> 00:23:30.490
we can to make sure that
it's an easy transition.

00:23:30.490 --> 00:23:33.100
The Dart dev compiler you
will hear about later today

00:23:33.100 --> 00:23:36.050
will also be part
of the SDK 2.0.

00:23:36.050 --> 00:23:40.480
So this is very exciting,
but what you can hopefully

00:23:40.480 --> 00:23:43.450
see-- I'll cross the
line here-- We'll

00:23:43.450 --> 00:23:49.490
do what we can to make the Dart
SDK more robust, easier to use,

00:23:49.490 --> 00:23:53.220
and at the same time adding some
interesting features for mobile

00:23:53.220 --> 00:23:55.570
and the web.

00:23:55.570 --> 00:23:59.840
So with that in mind,
I'll say thank you.

00:23:59.840 --> 00:24:02.490
And I hope you have
a great two days.

00:24:02.490 --> 00:24:04.810
Do we have time for
questions or not?

00:24:04.810 --> 00:24:06.440
We do not have
time for questions.

00:24:06.440 --> 00:24:08.440
But that-- this is great.

00:24:08.440 --> 00:24:08.940
But--

00:24:11.392 --> 00:24:13.600
KASPER LUND: There's a panel
tomorrow, tomorrow yeah.

00:24:13.600 --> 00:24:15.558
LARS BAK: There's plenty
of time for discussion

00:24:15.558 --> 00:24:19.790
and just please approach
me if you have questions.

00:24:19.790 --> 00:24:21.360
But you can also
add your questions

00:24:21.360 --> 00:24:24.531
to the Dart summit
questions-- Dory page.

00:24:24.531 --> 00:24:26.030
And there'll be a
panel where we can

00:24:26.030 --> 00:24:27.390
answer all the hard questions.

00:24:27.390 --> 00:24:29.770
So, welcome to the show.

00:24:29.770 --> 00:24:32.892
And I will leave it up
for the next speaker.

00:24:32.892 --> 00:24:33.850
KASPER LUND: Thank you.

00:24:33.850 --> 00:24:35.400
[APPLAUSE]

