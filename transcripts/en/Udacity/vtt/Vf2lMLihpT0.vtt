WEBVTT
Kind: captions
Language: en

00:00:00.500 --> 00:00:02.520
HTTP/2 brings
a lot of changes.

00:00:02.520 --> 00:00:04.859
But how do we
transition from HTTP/1

00:00:04.860 --> 00:00:07.440
to this amazing HTTP/2 world?

00:00:07.440 --> 00:00:09.690
What do we have to do to
cater to all the users

00:00:09.689 --> 00:00:12.419
out there in the
best possible manner?

00:00:12.419 --> 00:00:15.810
With head of line blocking gone
in HTTP/2 and the new header

00:00:15.810 --> 00:00:18.690
compression requests
are now cheap.

00:00:18.690 --> 00:00:21.600
So things like concatenating
your JavaScript or CSS

00:00:21.600 --> 00:00:23.250
are not necessary anymore.

00:00:23.250 --> 00:00:25.410
And it can actually
make things worse.

00:00:25.410 --> 00:00:27.629
Think about updating
a cached file.

00:00:27.629 --> 00:00:29.640
If you fix a typo in
a JavaScript file,

00:00:29.640 --> 00:00:32.158
like a missing curly brace,
you would force your users

00:00:32.158 --> 00:00:35.549
to re-download the entire
concatenated blob of JavaScript

00:00:35.549 --> 00:00:38.729
instead of just the fragment
that actually changed.

00:00:38.729 --> 00:00:40.890
If each JavaScript
file was separate,

00:00:40.890 --> 00:00:44.700
you would only invalidate the
cache for that single file.

00:00:44.700 --> 00:00:46.830
Another advantage is the
new header compression

00:00:46.829 --> 00:00:49.859
becoming more effective
the more requests are sent.

00:00:49.859 --> 00:00:53.888
The more requests are sent, the
more headers can be re-used.

00:00:53.889 --> 00:00:55.679
That means that having
multiple connections

00:00:55.679 --> 00:00:59.280
to different servers is actually
bad for your performance.

00:00:59.280 --> 00:01:02.969
That being said, minifying and
compressing your JavaScript CSS

00:01:02.969 --> 00:01:05.039
and images is still a good idea.

00:01:05.040 --> 00:01:07.140
A byte saved is a byte saved.

00:01:07.140 --> 00:01:09.329
And especially in
developing countries,

00:01:09.329 --> 00:01:11.159
that means saved money.

00:01:11.159 --> 00:01:14.129
Additionally, all the advice
given for rendering performance

00:01:14.129 --> 00:01:17.849
like deferring a JavaScript or
inlining styles is still valid.

00:01:17.849 --> 00:01:20.759
And so is investing time
in building problem offline

00:01:20.760 --> 00:01:22.740
support with service worker.

00:01:22.739 --> 00:01:26.489
Most importantly, HTTP/2
is backwards compatible.

00:01:26.489 --> 00:01:30.839
All servers that speak HTTP/2
will be able to speak HTTP/1.

00:01:30.840 --> 00:01:35.340
A client that can't speak HTTP/2
will just fall back to HTTP/1

00:01:35.340 --> 00:01:37.320
and keep working as before.

00:01:37.319 --> 00:01:39.929
And those clients are
becoming exceedingly rare.

00:01:39.930 --> 00:01:42.930
So don't be scared of
working with HTTP/2.

00:01:42.930 --> 00:01:47.850
At the time of filming in early
2016, 71% of the web's traffic

00:01:47.849 --> 00:01:49.719
had support for HTTP/2.

00:01:49.719 --> 00:01:52.079
So it is fair to say
that you can optimize

00:01:52.079 --> 00:01:55.950
your web for HTTP/2 without
paying much attention to HTTP/1

00:01:55.950 --> 00:01:59.420
anymore as this
number will only grow.

