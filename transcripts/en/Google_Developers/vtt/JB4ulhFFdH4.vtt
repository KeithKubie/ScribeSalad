WEBVTT
Kind: captions
Language: en

00:00:05.470 --> 00:00:06.040
PATRICK MEENAN: Hi, everyone.

00:00:06.040 --> 00:00:07.170
Thanks for coming.

00:00:07.170 --> 00:00:08.410
My name is Patrick Meenan.

00:00:08.410 --> 00:00:11.100
I'm part of the Make the Web
Faster team here at Google,

00:00:11.100 --> 00:00:13.300
which is actually kind of an
exciting position to be in,

00:00:13.300 --> 00:00:15.500
because we get to focus on
the rest of the web.

00:00:15.500 --> 00:00:18.980
We don't have to just focus
on Google's properties.

00:00:18.980 --> 00:00:22.200
And one of the things I'm going
to talk about today is

00:00:22.200 --> 00:00:24.500
where we get an intersection
of something that's really

00:00:24.500 --> 00:00:26.260
good for web performance.

00:00:26.260 --> 00:00:28.570
But it's also one of the things
that you want to pay

00:00:28.570 --> 00:00:30.730
attention to, and there's a
really good reason to pay

00:00:30.730 --> 00:00:33.740
attention to it for your
sites, which is the

00:00:33.740 --> 00:00:36.650
third-party scripts and what
can happen to your sites as

00:00:36.650 --> 00:00:40.450
you integrate them, and good
ways to protect your site when

00:00:40.450 --> 00:00:41.520
things happen to them.

00:00:41.520 --> 00:00:44.140
So I want to start off with--

00:00:44.140 --> 00:00:45.900
this is sort of an
anonymized--

00:00:45.900 --> 00:00:48.860
it's a real live page from the
internet, sort of cleaned it

00:00:48.860 --> 00:00:53.050
up so you can't recognize
the owner, to use for

00:00:53.050 --> 00:00:54.750
the examples here.

00:00:54.750 --> 00:00:56.960
And as we go through, I'm going
to talk about a couple

00:00:56.960 --> 00:00:58.710
of different pages and
sites and stuff.

00:00:58.710 --> 00:01:01.050
These are just examples.

00:01:01.050 --> 00:01:02.790
They happen everywhere.

00:01:02.790 --> 00:01:05.540
And in particular, I'm going
to be picking on Google a

00:01:05.540 --> 00:01:08.690
little bit here as well, because
the issues even happen

00:01:08.690 --> 00:01:10.720
with our tags, for example.

00:01:10.720 --> 00:01:14.350
But this is what happens when
the page is loading normally.

00:01:14.350 --> 00:01:16.190
This is kind of what
it feels like.

00:01:16.190 --> 00:01:17.810
It's a pretty average page.

00:01:17.810 --> 00:01:20.590
It takes four or five
seconds to load.

00:01:20.590 --> 00:01:22.390
So there's a social widget
on the page.

00:01:22.390 --> 00:01:24.770
It's got the Google+ button.

00:01:24.770 --> 00:01:28.190
It's a little script tag, drop
it in, and voila, you've got

00:01:28.190 --> 00:01:29.480
sharing for your site.

00:01:29.480 --> 00:01:31.020
And you can spread the content
around the internet.

00:01:31.020 --> 00:01:33.060
It's great.

00:01:33.060 --> 00:01:37.400
Unfortunately, when the widget
is unavailable--

00:01:37.400 --> 00:01:39.730
Google doesn't really go down
very often, but it does go

00:01:39.730 --> 00:01:44.210
down in various parts of
the world sometimes.

00:01:44.210 --> 00:01:46.710
This happens to everyone.

00:01:46.710 --> 00:01:50.080
So yeah, are you still waiting
for the site to load?

00:01:50.080 --> 00:01:52.760
Or have gone on and finished
your browsing somewhere else

00:01:52.760 --> 00:01:54.520
because you think
the site's down?

00:01:54.520 --> 00:01:56.730
So this is actually a
best case scenario.

00:01:56.730 --> 00:02:00.380
On Windows, it'll take 20
seconds to timeout before the

00:02:00.380 --> 00:02:03.020
browser realizes that
a site or a piece of

00:02:03.020 --> 00:02:06.130
content is not available.

00:02:06.130 --> 00:02:09.300
On Mac and Linux, you're talking
60 plus seconds.

00:02:09.300 --> 00:02:11.780
So that's like complete
absurdity.

00:02:11.780 --> 00:02:14.180
The user would never wait that
long for it unless they're on

00:02:14.180 --> 00:02:17.190
a mobile phone, and they're
expecting not to be able to

00:02:17.190 --> 00:02:19.440
access content.

00:02:19.440 --> 00:02:22.850
And all of that is because the
one line of code where they

00:02:22.850 --> 00:02:23.930
injected the script.

00:02:23.930 --> 00:02:27.700
So the way browsers work, as
a browser is evaluating the

00:02:27.700 --> 00:02:30.000
content in your HTML, it
does it from top to

00:02:30.000 --> 00:02:31.860
bottom in your HTML.

00:02:31.860 --> 00:02:34.060
There's some preprocessors
that'll look for anything that

00:02:34.060 --> 00:02:36.370
looks like an URL, and it'll
try and fetch it for you.

00:02:36.370 --> 00:02:39.140
But as soon as it hits a script
tag, the browser needs

00:02:39.140 --> 00:02:42.880
to execute everything inside
of the script tag before it

00:02:42.880 --> 00:02:45.420
can go on and do anything
else with the DOM.

00:02:45.420 --> 00:02:47.480
And in this case, since the
script tag is actually

00:02:47.480 --> 00:02:50.780
referring to an external piece
of content, the browser needs

00:02:50.780 --> 00:02:54.050
to fetch that external piece
of content, finish fetching

00:02:54.050 --> 00:02:56.520
it, and then execute
it before it can do

00:02:56.520 --> 00:02:59.020
anything else in the page.

00:02:59.020 --> 00:03:03.940
So the more common way to do it
or the more performant way

00:03:03.940 --> 00:03:07.120
to do it and to avoid it is to
use an async script tag.

00:03:07.120 --> 00:03:12.330
It's somewhat uglier, which is
why especially product people

00:03:12.330 --> 00:03:16.840
and designers don't like it when
we try and put these up

00:03:16.840 --> 00:03:18.740
for our documentation,
in particular.

00:03:18.740 --> 00:03:20.510
It's like, but that's so
much uglier than the

00:03:20.510 --> 00:03:21.840
other script tag.

00:03:21.840 --> 00:03:25.890
But yeah, but it doesn't
block the page.

00:03:25.890 --> 00:03:28.510
And the slides are going to be
made available after the talk.

00:03:28.510 --> 00:03:30.860
So don't worry about trying to
record any of the URLs or

00:03:30.860 --> 00:03:31.650
anything like that.

00:03:31.650 --> 00:03:32.900
We'll have them all available.

00:03:35.190 --> 00:03:38.600
And so this is what it's
going to look like.

00:03:38.600 --> 00:03:40.640
We've got the normal
site on the left.

00:03:40.640 --> 00:03:44.360
We call it SPOF, front-end SPOF,
Single Point of Failure.

00:03:44.360 --> 00:03:46.725
And the async version of
the page on the right.

00:03:50.850 --> 00:03:56.960
So in the right, the Google+
button is still failing.

00:03:56.960 --> 00:03:58.190
But it happened to fail fast.

00:03:58.190 --> 00:04:00.620
And actually, the page
even loaded faster.

00:04:00.620 --> 00:04:02.870
That's because in the normal
case, the browser still needed

00:04:02.870 --> 00:04:06.440
to fetch the +1 JavaScript and
execute it before it could

00:04:06.440 --> 00:04:08.050
move beyond the script tag.

00:04:08.050 --> 00:04:11.370
With the async version, all it's
executing is injecting a

00:04:11.370 --> 00:04:12.600
DOMNode locally.

00:04:12.600 --> 00:04:14.600
It doesn't have to
fetch anything.

00:04:14.600 --> 00:04:18.459
So even in a good mode, it can
load faster by loading it

00:04:18.459 --> 00:04:19.649
asynchronously.

00:04:19.649 --> 00:04:23.280
So that's why it's been a
common push from the web

00:04:23.280 --> 00:04:26.370
performance community to load
your tags asynchronously for

00:04:26.370 --> 00:04:27.320
performance reasons.

00:04:27.320 --> 00:04:29.610
But there's really good
reasons for your site

00:04:29.610 --> 00:04:32.550
availability as well.

00:04:32.550 --> 00:04:35.160
More importantly, your
monitoring systems are going

00:04:35.160 --> 00:04:36.860
to tell you nothing's wrong.

00:04:36.860 --> 00:04:38.510
Your base page came back fine.

00:04:38.510 --> 00:04:39.950
You know, your HTML loaded.

00:04:39.950 --> 00:04:42.830
In this case, it loaded in
under 200 milliseconds.

00:04:42.830 --> 00:04:44.930
So anything you've got hitting
your server says, hey, my

00:04:44.930 --> 00:04:47.490
sites doing fine, no problems.

00:04:47.490 --> 00:04:51.180
Your full browser monitoring, if
you're using a product that

00:04:51.180 --> 00:04:53.620
loads your site with
a real browser,

00:04:53.620 --> 00:04:54.980
your site took longer.

00:04:54.980 --> 00:04:57.570
It took 20 seconds to load,
but it didn't fail.

00:04:57.570 --> 00:05:01.780
Most of those products usually
have like a 60-second timeout.

00:05:01.780 --> 00:05:06.450
So if you have thresholds set to
tell you when it's slower,

00:05:06.450 --> 00:05:09.980
and on the off chance that you
actually have alarming tied to

00:05:09.980 --> 00:05:11.730
that, you would have
been notified.

00:05:11.730 --> 00:05:14.010
But otherwise, in most cases,
you wouldn't know until the

00:05:14.010 --> 00:05:16.450
next day or whenever you go and
look at your performance

00:05:16.450 --> 00:05:18.500
data for the site.

00:05:18.500 --> 00:05:20.900
And even your analytics.

00:05:20.900 --> 00:05:23.400
Usually, you'll put your
analytics tags way up at the

00:05:23.400 --> 00:05:25.240
top of the page because
you want to count

00:05:25.240 --> 00:05:26.860
every single page view.

00:05:26.860 --> 00:05:29.100
And it's usually loaded
asynchronously.

00:05:29.100 --> 00:05:31.390
So your analytics, your page
view counts, all of that

00:05:31.390 --> 00:05:34.640
would've looked fine.

00:05:34.640 --> 00:05:36.080
And even your real user.

00:05:36.080 --> 00:05:38.940
Let's say, you're fringe,
cutting edge, and you've got

00:05:38.940 --> 00:05:41.440
real user monitoring for your
page load performance in

00:05:41.440 --> 00:05:43.930
place, where you've got
JavaScript beacons.

00:05:43.930 --> 00:05:46.150
And you're looking at
window.performance, and you're

00:05:46.150 --> 00:05:47.850
reporting the load times
of your pages

00:05:47.850 --> 00:05:49.280
back to your server.

00:05:49.280 --> 00:05:53.650
Well, 99.9% of those scripts
wait until onload before they

00:05:53.650 --> 00:05:55.840
report any data because they
want to report how long it

00:05:55.840 --> 00:05:57.390
took for the page to load.

00:05:57.390 --> 00:05:58.650
They don't have any
timeouts in it.

00:05:58.650 --> 00:06:00.810
They just wait for
the onload event.

00:06:00.810 --> 00:06:04.610
Never happened, because
the user bailed.

00:06:04.610 --> 00:06:05.850
That one page--

00:06:05.850 --> 00:06:08.350
so I told you I pulled a page
from the wild, and this was

00:06:08.350 --> 00:06:10.570
just a random page I pulled
from the wild--

00:06:10.570 --> 00:06:13.030
has all of these blocking
scripts up at the top of it.

00:06:13.030 --> 00:06:16.070
So if any one of those
third-party providers go down,

00:06:16.070 --> 00:06:20.590
that's the experience you get
when you're looking at it.

00:06:20.590 --> 00:06:24.680
So pulling from the HTTP
archive, it's a project that

00:06:24.680 --> 00:06:26.920
right now we're up
to 200,000 URLs.

00:06:26.920 --> 00:06:32.020
We scan twice a month from the
Alexa top million, and we're

00:06:32.020 --> 00:06:34.230
trying to scale it
up to a million.

00:06:34.230 --> 00:06:37.370
But even as we scale up the
number of domains we crawl,

00:06:37.370 --> 00:06:42.020
the number of domains
on each page, you're

00:06:42.020 --> 00:06:43.680
looking at 12, 13 domains.

00:06:43.680 --> 00:06:47.710
So it's not uncommon, and it's
becoming more and more popular

00:06:47.710 --> 00:06:50.070
to pull in more and more
third-party content that you

00:06:50.070 --> 00:06:52.820
don't control and lots of it.

00:06:52.820 --> 00:06:55.150
So you're going, OK, well, my
boss is going to yell at me,

00:06:55.150 --> 00:06:57.250
because he's browsing the site
or his friend's browsing the

00:06:57.250 --> 00:06:59.820
site, and it's not
working, right?

00:06:59.820 --> 00:07:04.010
But not necessarily, because
it's not always 100%.

00:07:04.010 --> 00:07:07.530
Somewhere in the world, well,
you know, social sites are

00:07:07.530 --> 00:07:11.710
really prone to being blocked
by governments.

00:07:11.710 --> 00:07:14.460
These three platforms, Twitter,
Facebook, and

00:07:14.460 --> 00:07:17.660
Google+, all of those are
blocked in various parts of

00:07:17.660 --> 00:07:20.100
the world 100% of the time.

00:07:20.100 --> 00:07:22.660
So just think about
it for a minute.

00:07:22.660 --> 00:07:23.950
You may not be Facebook.

00:07:23.950 --> 00:07:26.170
You're just a site that happened
to put a Facebook

00:07:26.170 --> 00:07:29.580
widget on your page or a Google+
button on your page.

00:07:29.580 --> 00:07:32.160
And you're actually trying to
target a global audience.

00:07:32.160 --> 00:07:34.830
But because of that one little
button, your page is not

00:07:34.830 --> 00:07:38.110
available in big parts of the
world if you're not doing it

00:07:38.110 --> 00:07:39.670
asynchronously.

00:07:39.670 --> 00:07:43.170
HTTPS as well in certain parts
of the world, depending on the

00:07:43.170 --> 00:07:46.100
day of the week,
may be blocked.

00:07:46.100 --> 00:07:51.290
So even locally in the US,
enterprises have all sorts of

00:07:51.290 --> 00:07:53.110
weird policies in place.

00:07:53.110 --> 00:07:54.340
I bumped into a guy.

00:07:54.340 --> 00:07:57.010
At one point, I was
loading jQuery.

00:07:57.010 --> 00:08:01.560
So I run a public site called
WebPagetest.org.

00:08:01.560 --> 00:08:06.870
And we were using jQuery from
Google's AJAX API CDN.

00:08:06.870 --> 00:08:11.000
And one of the corporate
policies that one of the users

00:08:11.000 --> 00:08:13.970
had in place, they decided they
didn't want any of their

00:08:13.970 --> 00:08:17.280
users using Google Search,
because they wanted their

00:08:17.280 --> 00:08:19.230
users focused on work
all of the time.

00:08:19.230 --> 00:08:22.400
So they blocked everything
Google, which included the

00:08:22.400 --> 00:08:24.690
jQuery from Google's AJAX CDN.

00:08:24.690 --> 00:08:26.780
It's like, oh, good Lord, you're
blocking half of the

00:08:26.780 --> 00:08:28.030
internet at that point.

00:08:30.480 --> 00:08:34.220
So I wanted to briefly give you
a quick introduction into

00:08:34.220 --> 00:08:36.340
what we call a waterfall chart,
if you haven't seen

00:08:36.340 --> 00:08:37.010
these before.

00:08:37.010 --> 00:08:39.880
Who here has seen a waterfall
chart before?

00:08:39.880 --> 00:08:40.350
Excellent.

00:08:40.350 --> 00:08:42.780
I like this audience.

00:08:42.780 --> 00:08:46.080
OK, so really quickly, each
line in the waterfall is a

00:08:46.080 --> 00:08:48.630
single request that the
browser is making out.

00:08:48.630 --> 00:08:51.200
This one, in particular,
came from WebPagetest.

00:08:51.200 --> 00:08:54.920
But the main thing to pay
attention to is the first line

00:08:54.920 --> 00:08:57.890
in the waterfall we usually
refer to as the back-end.

00:08:57.890 --> 00:09:00.840
That's the server call that
generated the HTML.

00:09:00.840 --> 00:09:03.490
The rest of it we refer to as
the front-end, which is

00:09:03.490 --> 00:09:06.000
everything that the browser
decides to pull in based on

00:09:06.000 --> 00:09:08.150
the HTML that you served it.

00:09:08.150 --> 00:09:09.970
And we have a couple
of vertical lines.

00:09:09.970 --> 00:09:12.070
One of the interesting ones is
the green one, which is the

00:09:12.070 --> 00:09:14.010
first paint that the
browser makes.

00:09:14.010 --> 00:09:18.280
But as you can tell, most of
the content, most of the

00:09:18.280 --> 00:09:20.430
requests that go out are for the
front-end, which is why we

00:09:20.430 --> 00:09:22.940
call the scripts a front-end
single point of failure.

00:09:25.830 --> 00:09:28.270
So happy user.

00:09:28.270 --> 00:09:32.030
We go through all sorts of
insane gyrations to make

00:09:32.030 --> 00:09:36.310
servers highly available,
especially for the back-end.

00:09:36.310 --> 00:09:39.020
We have redundant DNS servers,
globally distributed.

00:09:39.020 --> 00:09:41.970
And by we, I mean, everybody,
not Google.

00:09:41.970 --> 00:09:45.050
This is pretty much every
company I've ever worked with

00:09:45.050 --> 00:09:46.920
that works at any scale.

00:09:46.920 --> 00:09:50.300
And even with the cloud these
days, anyone does this.

00:09:50.300 --> 00:09:52.920
You've got redundant DNS servers
to make sure that the

00:09:52.920 --> 00:09:55.140
user can always resolve
your host name.

00:09:55.140 --> 00:09:57.480
You've got load balancers in
front of your servers to make

00:09:57.480 --> 00:10:01.020
sure that it's always
available.

00:10:01.020 --> 00:10:03.220
You've got multiple app
servers that the load

00:10:03.220 --> 00:10:04.300
balancers can talk to.

00:10:04.300 --> 00:10:07.170
So that if any of those go down,
you can still serve the

00:10:07.170 --> 00:10:08.160
content to the users.

00:10:08.160 --> 00:10:11.270
And there is no user-perceived
failures.

00:10:11.270 --> 00:10:14.700
You've got redundant databases,
shards, replicats,

00:10:14.700 --> 00:10:17.570
all of that, just to make sure
that the user always gets

00:10:17.570 --> 00:10:20.180
their HTML.

00:10:20.180 --> 00:10:20.710
That's great.

00:10:20.710 --> 00:10:23.310
But that's all for that first
line in the waterfall, right?

00:10:23.310 --> 00:10:26.090
You're hoping that everyone
does all of that for every

00:10:26.090 --> 00:10:28.110
other request.

00:10:28.110 --> 00:10:30.810
But what we really want to do
is take that same redundancy

00:10:30.810 --> 00:10:33.390
that you do for the back-end
to make sure that it always

00:10:33.390 --> 00:10:36.150
gets delivered and put the
same protections in your

00:10:36.150 --> 00:10:38.180
front-end code.

00:10:38.180 --> 00:10:41.460
So that's pretty much where
we're talking about async.

00:10:41.460 --> 00:10:45.700
So the async snippet, we got a
little peek at it earlier.

00:10:45.700 --> 00:10:49.900
Google Analytics was sort of
one of the big ones that

00:10:49.900 --> 00:10:52.180
worked out the different
browsers and the different

00:10:52.180 --> 00:10:53.880
browser behaviors and
what works well

00:10:53.880 --> 00:10:55.190
across all of the browsers.

00:10:55.190 --> 00:10:57.860
And this one pretty much
ends up working well.

00:10:57.860 --> 00:11:01.390
As you create a dynamic script
element, you inject it before

00:11:01.390 --> 00:11:04.300
the first script element
on the DOM.

00:11:04.300 --> 00:11:06.620
You can be guaranteed there
will always be a script

00:11:06.620 --> 00:11:08.720
element on the DOM because
you're injecting it from

00:11:08.720 --> 00:11:10.230
within a script element.

00:11:10.230 --> 00:11:12.460
So worst case, it's the one
you're injecting in it.

00:11:12.460 --> 00:11:13.720
And you insert it.

00:11:13.720 --> 00:11:17.580
And none of the browsers will
block based on that insertion.

00:11:17.580 --> 00:11:19.920
They will all treat that
as an async snippet.

00:11:19.920 --> 00:11:21.175
And they'll go ahead
and execute it, and

00:11:21.175 --> 00:11:22.680
they'll just fetch it.

00:11:22.680 --> 00:11:25.210
This works really well when
there are no dependencies.

00:11:25.210 --> 00:11:27.160
You don't care when
the code executes.

00:11:27.160 --> 00:11:30.520
Whenever the browser happens to
land the code, it runs it.

00:11:30.520 --> 00:11:33.000
And don't have any other code.

00:11:33.000 --> 00:11:35.090
Expect that that code
will be there at any

00:11:35.090 --> 00:11:36.340
specific point in time.

00:11:38.880 --> 00:11:44.430
One of the other common
patterns, Steve Souders in

00:11:44.430 --> 00:11:48.150
particular, High Performing Web
Sites book, really popular

00:11:48.150 --> 00:11:50.890
in the web performance
community.

00:11:50.890 --> 00:11:53.770
And he came from Yahoo on the
Exceptional Performance team.

00:11:53.770 --> 00:11:57.200
One of the patterns is to just
move all of your scripts to

00:11:57.200 --> 00:11:58.910
the bottom of the DOM.

00:11:58.910 --> 00:12:00.010
They'll still block.

00:12:00.010 --> 00:12:02.190
But they won't block anything
that the user sees.

00:12:02.190 --> 00:12:03.600
They'll block any other
content that

00:12:03.600 --> 00:12:04.430
comes behind them.

00:12:04.430 --> 00:12:06.230
So if they're right at the
bottom of the body of the

00:12:06.230 --> 00:12:08.900
page, all they're really
blocking is the code.

00:12:08.900 --> 00:12:10.940
This is really easy
to implement.

00:12:10.940 --> 00:12:13.630
A little harder if you have a
whole lot of inline scripts

00:12:13.630 --> 00:12:17.730
sprinkled throughout your page,
but it lets you keep the

00:12:17.730 --> 00:12:19.910
dependency chains, and you can
just move everything down to

00:12:19.910 --> 00:12:21.300
the bottom.

00:12:21.300 --> 00:12:23.590
I will say really quickly
because I'm sure there will be

00:12:23.590 --> 00:12:25.990
questions, well, what about
the HTML5 async tag?

00:12:25.990 --> 00:12:28.540
Why don't we just use that?

00:12:28.540 --> 00:12:29.470
That's great.

00:12:29.470 --> 00:12:33.470
And it actually performs a lot
better than even the async

00:12:33.470 --> 00:12:36.090
script, where you inject it
because the browser's

00:12:36.090 --> 00:12:38.630
pre-fetchers can see
that as an URL.

00:12:38.630 --> 00:12:40.840
And no matter where it happens
on the page, they'll go ahead,

00:12:40.840 --> 00:12:42.590
and they'll predict that you'll
need that, and they'll

00:12:42.590 --> 00:12:43.460
be able to find it.

00:12:43.460 --> 00:12:47.045
They can't find the script URL
that you're going to inject by

00:12:47.045 --> 00:12:48.480
a JavaScript.

00:12:48.480 --> 00:12:52.180
The big problem with the async
tag is none of the IE versions

00:12:52.180 --> 00:12:54.200
in the field right
now support it.

00:12:54.200 --> 00:12:57.320
And you end up with a blocking
script tag for all of IE.

00:12:57.320 --> 00:12:58.230
So you're still--

00:12:58.230 --> 00:13:01.070
at least today unless you're
doing mobile only, you're

00:13:01.070 --> 00:13:04.390
still a lot better using a
dynamically injected script

00:13:04.390 --> 00:13:06.720
than putting an async
tag on a script tag.

00:13:09.660 --> 00:13:13.030
One of the other things, so to
avoid the HTTPS issue or

00:13:13.030 --> 00:13:17.690
forcing all of your users
to use HTTPS is use

00:13:17.690 --> 00:13:19.350
protocol-relative URLs.

00:13:19.350 --> 00:13:21.010
They work in all browsers.

00:13:21.010 --> 00:13:22.920
IE has a problem with

00:13:22.920 --> 00:13:26.120
protocol-relative URLs with CSS.

00:13:26.120 --> 00:13:28.860
It'll load it twice
for some reason.

00:13:28.860 --> 00:13:31.610
But it'll work perfectly
fine with JavaScript.

00:13:31.610 --> 00:13:35.690
So if you're sharing any code
that you want people to embed,

00:13:35.690 --> 00:13:37.750
try and do it with
protocol-relative URLs instead

00:13:37.750 --> 00:13:39.000
of forcing HTTPS.

00:13:41.550 --> 00:13:43.930
The one thing is users
may get confused.

00:13:43.930 --> 00:13:47.190
They'll be like, but where's
the HTTP in front of it?

00:13:47.190 --> 00:13:49.460
So we've got a little education
to do there.

00:13:49.460 --> 00:13:56.260
But it's a good way to do it
in a protocol-neutral way.

00:13:56.260 --> 00:13:59.480
Finally, if you've got really
complex dependency chains and

00:13:59.480 --> 00:14:02.230
you still want to do things
asynchronously, there are a

00:14:02.230 --> 00:14:04.140
ton of loaders out there.

00:14:04.140 --> 00:14:07.620
Modernizr includes one as well,
which is a fairly good

00:14:07.620 --> 00:14:09.820
way to do it if you're already
depending on Modernizr.

00:14:09.820 --> 00:14:14.300
But there are also standalone
async loaders.

00:14:14.300 --> 00:14:16.740
And what they let you do is they
let you chain together

00:14:16.740 --> 00:14:20.430
and explicitly state the
dependency chain of resources.

00:14:20.430 --> 00:14:24.030
So in this case, it's saying,
hey, load jQuery.

00:14:24.030 --> 00:14:26.660
And when you're done loading
jQuery, load this other

00:14:26.660 --> 00:14:28.530
library that needed jQuery.

00:14:28.530 --> 00:14:31.920
Or you can even execute inline
script directly there, and you

00:14:31.920 --> 00:14:34.370
just chain them together
in a long series.

00:14:34.370 --> 00:14:39.220
You can do pretty cool things,
somewhat more complex even,

00:14:39.220 --> 00:14:41.020
where you load jQuery
from one place.

00:14:41.020 --> 00:14:43.600
In this case, the Google
AJAX libraries.

00:14:43.600 --> 00:14:47.980
But if that fails, you can load
it from a local copy.

00:14:47.980 --> 00:14:51.400
And then, when you're finally
done with that chain, go ahead

00:14:51.400 --> 00:14:54.730
and load the other library
that needed jQuery.

00:14:54.730 --> 00:14:57.510
This definitely requires a lot
more work, and building it

00:14:57.510 --> 00:15:01.340
into your actual system for
building your apps.

00:15:01.340 --> 00:15:03.470
But if you've got complex
dependency chains in your

00:15:03.470 --> 00:15:06.980
code, this is a really good way
to do it asynchronously.

00:15:06.980 --> 00:15:10.100
Because the main problem when
you're doing the async, you

00:15:10.100 --> 00:15:13.590
basically need to attach an
onload handler to your script

00:15:13.590 --> 00:15:16.470
that you injected to know when
it finished loading before you

00:15:16.470 --> 00:15:19.790
can execute the code that
depends on that, which is why

00:15:19.790 --> 00:15:22.200
the loaders are really
helpful.

00:15:22.200 --> 00:15:24.350
So we're all set, right?

00:15:24.350 --> 00:15:25.460
We can load asynchronously.

00:15:25.460 --> 00:15:27.600
Well, not quite.

00:15:27.600 --> 00:15:31.090
Async tags on pretty much
all browsers will

00:15:31.090 --> 00:15:33.750
block the onload event.

00:15:33.750 --> 00:15:38.070
And you'll actually see, so IE
9 and below doesn't, and some

00:15:38.070 --> 00:15:39.150
of the older browsers.

00:15:39.150 --> 00:15:42.580
But they're all moving towards
blocking because the HTML5

00:15:42.580 --> 00:15:47.025
spec explicitly calls for
injected script to block the

00:15:47.025 --> 00:15:49.600
onload event.

00:15:49.600 --> 00:15:52.640
If you follow Stoyan
Stefanov at all--

00:15:52.640 --> 00:15:53.890
phpied.com--

00:15:55.750 --> 00:15:59.110
he blogged today about a
technique where you can avoid

00:15:59.110 --> 00:16:00.760
onload blocking.

00:16:00.760 --> 00:16:05.750
If you put the script into an
iframe and you inject the URL

00:16:05.750 --> 00:16:08.530
for the iframe after you've
injected the iframe into the

00:16:08.530 --> 00:16:11.590
DOM, it gets orders of magnitude
more complicated.

00:16:11.590 --> 00:16:17.290
So just be aware that even if
you're loading the scripts

00:16:17.290 --> 00:16:19.710
asynchronously, one of these
things being down can still

00:16:19.710 --> 00:16:21.580
block your onload.

00:16:21.580 --> 00:16:25.280
Not so much of a big deal for
the user experience as long as

00:16:25.280 --> 00:16:27.930
you don't have anything critical
attached to onload.

00:16:27.930 --> 00:16:32.040
What you need to be careful of
and not assume is don't assume

00:16:32.040 --> 00:16:34.350
your onload will run.

00:16:34.350 --> 00:16:36.770
So be careful, set timeouts.

00:16:36.770 --> 00:16:41.360
If you're progressively
enhancing the UI with anything

00:16:41.360 --> 00:16:47.930
menu-wise, or form validation,
or anything like that, try and

00:16:47.930 --> 00:16:50.580
attach it in a logical fashion
that makes sense just from the

00:16:50.580 --> 00:16:53.190
way the page loads, not
necessarily trying to push it

00:16:53.190 --> 00:16:54.790
back after onload.

00:16:54.790 --> 00:16:56.770
Because you could get into a
state where the user sees the

00:16:56.770 --> 00:17:00.970
page, but then can't interact
with it for 20 seconds.

00:17:00.970 --> 00:17:02.710
And it's not a whole
lot better.

00:17:05.349 --> 00:17:07.040
So as an industry.

00:17:07.040 --> 00:17:12.040
And this is where I took 20
minutes, and I just browsed

00:17:12.040 --> 00:17:13.400
the web randomly.

00:17:13.400 --> 00:17:15.599
So nothing against
these companies.

00:17:15.599 --> 00:17:19.339
This is just to show you sort of
how widespread the issue is

00:17:19.339 --> 00:17:21.010
and how common it is.

00:17:21.010 --> 00:17:24.010
And if you think it's sort of,
well, you know, there's only

00:17:24.010 --> 00:17:28.150
two or three small sites that
have this problem out there.

00:17:28.150 --> 00:17:29.760
Oh, actually, we're not
in the sites yet.

00:17:29.760 --> 00:17:33.600
These are the actual scripts
that we share with you.

00:17:33.600 --> 00:17:38.320
So Google, when we launched the
+1 button-- and it's one

00:17:38.320 --> 00:17:40.860
of the reasons I used it as an
example-- we actually launched

00:17:40.860 --> 00:17:42.530
it as a blocking script.

00:17:42.530 --> 00:17:44.730
It's no longer a blocking
script.

00:17:44.730 --> 00:17:46.870
The internet was kind enough
to call us out on it,

00:17:46.870 --> 00:17:48.800
especially since we pushed
performance so well.

00:17:48.800 --> 00:17:50.590
And we got it fixed
really quickly.

00:17:50.590 --> 00:17:53.540
Unfortunately, whenever you
launch something, everyone

00:17:53.540 --> 00:17:56.310
integrates it as soon
as you launch it.

00:17:56.310 --> 00:17:57.840
They don't go back and fix it.

00:17:57.840 --> 00:18:01.200
So there's a whole lot of
blocking Google +1 button

00:18:01.200 --> 00:18:02.880
scripts out there as well.

00:18:02.880 --> 00:18:07.630
And it's really hard to be
consistent and not have

00:18:07.630 --> 00:18:10.650
blocking scripts seep their way
into your documentation.

00:18:10.650 --> 00:18:14.960
So you'll notice on the right
side, the Google +1 Badge, it

00:18:14.960 --> 00:18:18.110
can actually work perfectly fine
asynchronously, and it'll

00:18:18.110 --> 00:18:19.280
be fixed any day now.

00:18:19.280 --> 00:18:22.140
But the documentation on the
site has samples that use a

00:18:22.140 --> 00:18:23.730
blocking script tag.

00:18:23.730 --> 00:18:27.270
So it's really easy for this
to regress and to just keep

00:18:27.270 --> 00:18:29.150
finding its way into
the documentation.

00:18:29.150 --> 00:18:31.100
And as developers, we
copy and paste.

00:18:31.100 --> 00:18:32.800
So if it's in the documentation,
that's what's

00:18:32.800 --> 00:18:35.950
ending up on people's sites.

00:18:35.950 --> 00:18:38.300
But every one of these buttons,
even if they're in

00:18:38.300 --> 00:18:41.550
the async column, when they
launched, they were blocking.

00:18:41.550 --> 00:18:45.190
So you can expect that out in
the field the vast majority of

00:18:45.190 --> 00:18:49.080
the implementations are actually
blocking tags.

00:18:49.080 --> 00:18:50.370
Pinterest is an interesting
one.

00:18:50.370 --> 00:18:55.350
Their example is blocking, but
their documentation says to

00:18:55.350 --> 00:18:58.640
insert it right at the
end of the body.

00:18:58.640 --> 00:19:00.020
The problem with that
is there's a lot of

00:19:00.020 --> 00:19:01.340
CMS systems out there.

00:19:01.340 --> 00:19:04.620
And sometimes it's easier to
just attach code, say, to a

00:19:04.620 --> 00:19:08.090
post, for example, rather than
trying to figure out a way to

00:19:08.090 --> 00:19:10.070
just inject it once
at the end.

00:19:10.070 --> 00:19:12.760
And you end up getting it right
in the middle anyway.

00:19:12.760 --> 00:19:17.220
So just be aware of that if
you're pushing any scripts.

00:19:17.220 --> 00:19:19.330
Code libraries.

00:19:19.330 --> 00:19:20.590
This is a lot harder.

00:19:20.590 --> 00:19:25.190
So these, the widgets, the
social buttons and stuff, have

00:19:25.190 --> 00:19:27.180
no dependencies whatsoever.

00:19:27.180 --> 00:19:28.940
They're perfect candidates
for async.

00:19:28.940 --> 00:19:31.550
You drop a piece of code on
your page, and voila, a

00:19:31.550 --> 00:19:33.000
button shows up.

00:19:33.000 --> 00:19:36.440
Code libraries, on the other
hand, by definition, pretty

00:19:36.440 --> 00:19:38.640
much, have dependency chains.

00:19:38.640 --> 00:19:41.190
And getting them to load, that's
where you've got to use

00:19:41.190 --> 00:19:42.800
the loaders and everything
else, and

00:19:42.800 --> 00:19:45.100
it's a lot more complex.

00:19:45.100 --> 00:19:50.710
The samples for every code
library I have ever seen have

00:19:50.710 --> 00:19:54.550
you loading the code library
blocking in the head.

00:19:54.550 --> 00:19:57.080
It wouldn't be so bad if they
said, eh, a bunch of HTML here

00:19:57.080 --> 00:20:00.380
and then closing tag body
down at the bottom.

00:20:00.380 --> 00:20:01.470
But it's cleaner.

00:20:01.470 --> 00:20:04.990
It's easier for the developer to
read if you see, load code

00:20:04.990 --> 00:20:10.310
library, load code library UI,
load plug-in whatever, and

00:20:10.310 --> 00:20:11.720
then run code.

00:20:11.720 --> 00:20:14.790
The problem is, once again,
we're creatures of copy and

00:20:14.790 --> 00:20:17.800
paste, and that's what you end
up seeing on all the websites.

00:20:17.800 --> 00:20:20.980
So definitely watch
out for these.

00:20:20.980 --> 00:20:23.090
If you don't want to go the
loader route, move them to the

00:20:23.090 --> 00:20:25.160
bottom of the page at least,
get them out of

00:20:25.160 --> 00:20:27.640
the way of the content.

00:20:27.640 --> 00:20:30.130
There may be a couple of cases
where your UI depends on the

00:20:30.130 --> 00:20:32.410
JavaScript.

00:20:32.410 --> 00:20:35.910
Best if you don't, progressive
enhancement, and all that.

00:20:35.910 --> 00:20:37.360
But if you do, try and
move it out of the

00:20:37.360 --> 00:20:40.120
way as much as possible.

00:20:40.120 --> 00:20:40.930
Ad providers.

00:20:40.930 --> 00:20:44.880
So ads, I don't know how many
of you remember way back in

00:20:44.880 --> 00:20:45.990
the day, all of what?

00:20:45.990 --> 00:20:49.670
About a year ago, where you'd
load a website, and all you

00:20:49.670 --> 00:20:51.930
would see is a header
at the top.

00:20:51.930 --> 00:20:54.210
And finally an ad would
populate, and then the rest of

00:20:54.210 --> 00:20:54.980
the content would go.

00:20:54.980 --> 00:20:57.080
And you'd go, oh, man, those
ads are slowing down

00:20:57.080 --> 00:20:58.670
everything.

00:20:58.670 --> 00:21:00.660
Things are actually
a lot better now.

00:21:00.660 --> 00:21:04.400
The ad providers, the calling
chain, and the complexity of

00:21:04.400 --> 00:21:06.730
loading an ad hasn't gotten
a lot better.

00:21:06.730 --> 00:21:09.060
But they have gotten
out of your way.

00:21:09.060 --> 00:21:12.530
Doubleclick was the
first, I believe.

00:21:12.530 --> 00:21:15.170
I'm not sure if they're still
the only one with a fully

00:21:15.170 --> 00:21:18.060
async tag that you can
inject on your pages.

00:21:18.060 --> 00:21:21.080
So even loading the script that
loads the Doubleclick ads

00:21:21.080 --> 00:21:23.130
doesn't get in the
way of anything.

00:21:23.130 --> 00:21:26.960
Adsense, maybe a year
ago, the script

00:21:26.960 --> 00:21:28.630
itself is still blocking.

00:21:28.630 --> 00:21:32.050
But everything after the script
that loads is done in

00:21:32.050 --> 00:21:35.000
an iframe, and it's completely
asynchronous.

00:21:35.000 --> 00:21:39.010
And the Adsense script is so
pervasive that odds are it's

00:21:39.010 --> 00:21:40.850
in everyone's cache
by the time they

00:21:40.850 --> 00:21:42.190
hit your page anyway.

00:21:42.190 --> 00:21:45.410
The main reason they did that
was they could get 100%

00:21:45.410 --> 00:21:49.880
penetration on async ads if they
could push out and not

00:21:49.880 --> 00:21:52.200
change how the script
is embedded.

00:21:52.200 --> 00:21:55.270
And I'm not sure about
other ad providers.

00:21:55.270 --> 00:21:57.680
But if you're using another ad
provider, a lot of them do

00:21:57.680 --> 00:21:59.730
have async implementations.

00:21:59.730 --> 00:22:02.280
If they don't, at least
if they don't have it

00:22:02.280 --> 00:22:04.590
documented, ask them.

00:22:04.590 --> 00:22:06.690
A lot of them have
iframe solutions.

00:22:06.690 --> 00:22:08.860
You have to be a little careful
just blindly taking

00:22:08.860 --> 00:22:11.850
the iframe implementation,
which would be async.

00:22:11.850 --> 00:22:14.400
The problem with those are they
usually don't do as good

00:22:14.400 --> 00:22:17.040
targeting as if you use a
JavaScript implementation.

00:22:17.040 --> 00:22:21.460
So be a little careful just
doing it blindly.

00:22:21.460 --> 00:22:26.000
So when you've found a
third-party single point of

00:22:26.000 --> 00:22:28.880
failure and you want to see
what it looks like when it

00:22:28.880 --> 00:22:34.430
happens, well, back in the day
also, we used to route

00:22:34.430 --> 00:22:36.980
everything to localhost if we
wanted to see it fail, because

00:22:36.980 --> 00:22:39.930
it wouldn't respond
to the requests.

00:22:39.930 --> 00:22:40.670
It would just fail.

00:22:40.670 --> 00:22:42.380
The problem is it fails
right away.

00:22:42.380 --> 00:22:43.870
It's right there on your
local machine.

00:22:43.870 --> 00:22:46.350
So that's not how
sites go down.

00:22:46.350 --> 00:22:48.650
That's not how third
parties go down.

00:22:48.650 --> 00:22:50.250
What they do is they timeout.

00:22:50.250 --> 00:22:52.930
So you need a black hole.

00:22:52.930 --> 00:22:54.690
And this was a really difficult
server to set

00:22:54.690 --> 00:22:56.580
up, to scale it.

00:22:56.580 --> 00:22:57.960
I can guarantee, it will never,

00:22:57.960 --> 00:23:00.940
ever respond to anything.

00:23:00.940 --> 00:23:02.390
So feel free to use it.

00:23:02.390 --> 00:23:04.460
You can put in your
host's file.

00:23:04.460 --> 00:23:09.120
Point third-party domains
to that IP address or to

00:23:09.120 --> 00:23:11.340
blackhole.webpagetest.org if
you want to see what the

00:23:11.340 --> 00:23:13.480
experience is like loading.

00:23:13.480 --> 00:23:14.940
You won't actually need
to do it manually.

00:23:14.940 --> 00:23:17.770
We've got solutions in
place to help you.

00:23:17.770 --> 00:23:18.880
On the WebPagetest--

00:23:18.880 --> 00:23:22.760
and I'll do a demo towards the
end with doing this-- you can

00:23:22.760 --> 00:23:26.550
also force third-party domains
to point to the black hole, so

00:23:26.550 --> 00:23:28.760
you can capture waterfalls,
or video, or see what the

00:23:28.760 --> 00:23:30.400
experience is without
having to muck with

00:23:30.400 --> 00:23:31.920
your local host file.

00:23:31.920 --> 00:23:33.510
And you can share it.

00:23:33.510 --> 00:23:35.820
The sharing is particularly
important if you want to show

00:23:35.820 --> 00:23:38.150
someone, yes, we really
do have a problem.

00:23:38.150 --> 00:23:42.150
And this is what it looks
like when X goes down.

00:23:42.150 --> 00:23:43.365
But there's a sample
script in there.

00:23:43.365 --> 00:23:46.500
And like I said, the slides
will also be shared.

00:23:46.500 --> 00:23:50.310
And I wanted to introduce
you to SPOF-O-Matic.

00:23:50.310 --> 00:23:51.850
It's in the Chrome Web Store.

00:23:51.850 --> 00:23:56.280
It's something I created for
this presentation, largely.

00:23:56.280 --> 00:23:57.720
But I've been browsing the
web for it for the

00:23:57.720 --> 00:23:58.620
last couple of weeks.

00:23:58.620 --> 00:24:01.580
It's kind of entertaining
and kind of scary.

00:24:01.580 --> 00:24:06.120
What it does is it installs, and
it gives you a little gray

00:24:06.120 --> 00:24:09.090
circle when everything's happy
and nothing's happening.

00:24:09.090 --> 00:24:12.070
There's no third-party single
points of failure on the site.

00:24:12.070 --> 00:24:15.510
If it detects any likely
third-party single points of

00:24:15.510 --> 00:24:18.530
failure, it'll give you a big
warning icon and tell you how

00:24:18.530 --> 00:24:22.430
many were detected
on the page.

00:24:22.430 --> 00:24:24.470
And it does us all passively
while you browse.

00:24:24.470 --> 00:24:27.260
You don't have to click
to turn anything on.

00:24:27.260 --> 00:24:32.240
And then when you click on it,
it'll give you a list of the

00:24:32.240 --> 00:24:35.010
different things that were
detected as well as how much

00:24:35.010 --> 00:24:37.490
of the page content it blocks.

00:24:37.490 --> 00:24:39.930
So something way down at the
bottom of the page, like in

00:24:39.930 --> 00:24:45.520
this case the tracer down
at the bottom of the

00:24:45.520 --> 00:24:47.150
page, blocks nothing.

00:24:47.150 --> 00:24:52.550
But everything up at the top,
the jQuery, Optimizely, even

00:24:52.550 --> 00:24:54.980
the +1 button up at the
top, block a fair

00:24:54.980 --> 00:24:55.980
amount of page content.

00:24:55.980 --> 00:24:58.210
So those are the ones that you
want to be careful of.

00:24:58.210 --> 00:25:01.400
It's really ultra-conservative
in its detection.

00:25:01.400 --> 00:25:05.060
So it's less likely that you'll
get false positives.

00:25:05.060 --> 00:25:06.730
You're more likely to get false

00:25:06.730 --> 00:25:10.860
negatives when you're browsing.

00:25:10.860 --> 00:25:13.210
And if you get tired,
there is a site.

00:25:13.210 --> 00:25:15.440
You know, hey, I know this
is a third party.

00:25:15.440 --> 00:25:18.500
I'm expecting it to be a third
party, and it's just too much

00:25:18.500 --> 00:25:20.250
of a pain to change it.

00:25:20.250 --> 00:25:21.850
Or this isn't really
a third party.

00:25:21.850 --> 00:25:24.490
You can whitelist the domains
directly from the UI so it

00:25:24.490 --> 00:25:26.790
stops warning you about it.

00:25:26.790 --> 00:25:29.490
And you can clear the whitelist
or edit it.

00:25:29.490 --> 00:25:32.350
One of the cool things that you
can do is you can turn it

00:25:32.350 --> 00:25:35.470
into resource blocking mode if
you click the enable button up

00:25:35.470 --> 00:25:36.520
at the top.

00:25:36.520 --> 00:25:39.620
And it will automatically route
the third-party domains

00:25:39.620 --> 00:25:41.870
it detects to the black
hole for you.

00:25:41.870 --> 00:25:44.980
So you can browse the web as
if third-party domains were

00:25:44.980 --> 00:25:48.530
down and see what the
experience is.

00:25:48.530 --> 00:25:51.290
And when it's enabled, you'll
get a little black hole up at

00:25:51.290 --> 00:25:52.430
the top of the screen.

00:25:52.430 --> 00:25:55.000
By the way, if no one's ever
seen any of my UIs, I should

00:25:55.000 --> 00:25:57.540
not be allowed anywhere
near end user UI.

00:25:57.540 --> 00:25:59.740
So that's why you get
circles for icons.

00:26:02.450 --> 00:26:05.916
And so while you're browsing the
web, when it kicks in, and

00:26:05.916 --> 00:26:08.350
when it blocks third-party
content, you'll get a little

00:26:08.350 --> 00:26:10.880
stop sign inside of
the black hole.

00:26:10.880 --> 00:26:14.730
And I don't recommend running
in this mode for a long time

00:26:14.730 --> 00:26:17.090
unless you're really just
trying to quit the web,

00:26:17.090 --> 00:26:19.550
because you're just going to
stare at a whole lot of blank

00:26:19.550 --> 00:26:23.000
screens as you're browsing,
a whole lot of them.

00:26:23.000 --> 00:26:27.000
And this is where we get to see
how many of those you'll

00:26:27.000 --> 00:26:27.800
actually be staring at.

00:26:27.800 --> 00:26:30.320
So this is where if I took about
20 minutes, didn't spend

00:26:30.320 --> 00:26:30.950
a whole lot of time.

00:26:30.950 --> 00:26:33.470
And I was like, hey, let's see
how pervasive the problem is.

00:26:33.470 --> 00:26:36.900
Let's see if I can find enough
to populate the deck with to

00:26:36.900 --> 00:26:38.210
let people see.

00:26:38.210 --> 00:26:39.890
So new sites.

00:26:39.890 --> 00:26:43.000
CNN, the main page is
perfectly fine.

00:26:43.000 --> 00:26:46.580
And once again, nothing against
these developers.

00:26:46.580 --> 00:26:49.500
They took the snippets that
everyone gave them.

00:26:49.500 --> 00:26:51.430
They copied and pasted
it into their sites.

00:26:51.430 --> 00:26:54.490
And these are just a really
rough sample.

00:26:54.490 --> 00:26:56.710
This is everywhere.

00:26:56.710 --> 00:26:59.580
But the CNN main page is
perfectly fine and loads

00:26:59.580 --> 00:27:01.020
everything asynchronously.

00:27:01.020 --> 00:27:03.310
But when you get down to the
article page, there are a

00:27:03.310 --> 00:27:05.450
couple of different scripts that
it's loading blocking.

00:27:05.450 --> 00:27:10.680
And you'll generally see that
repeated because they want

00:27:10.680 --> 00:27:12.170
people sharing the articles.

00:27:12.170 --> 00:27:13.970
So you'll see more of the
social buttons, and the

00:27:13.970 --> 00:27:16.630
sharing widgets, and that kind
of thing on the low-level

00:27:16.630 --> 00:27:19.730
content, not necessarily on
the front page of sites.

00:27:19.730 --> 00:27:22.560
So be careful testing
just the front page.

00:27:22.560 --> 00:27:26.680
The Today Show's main page has
a fair number, including a

00:27:26.680 --> 00:27:29.800
bunch of polls and some
Typekit font stuff.

00:27:29.800 --> 00:27:33.610
ABC News's main page has a
blocking Facebook button.

00:27:33.610 --> 00:27:36.485
So news sites, they share
a lot of content.

00:27:36.485 --> 00:27:38.770
It's not unexpected.

00:27:38.770 --> 00:27:42.110
Blog content sites, once again,
same sort of thing.

00:27:42.110 --> 00:27:44.650
They want you sharing
the content.

00:27:44.650 --> 00:27:48.030
The Verge pulls a whole bunch
of jQuery from Google APIs

00:27:48.030 --> 00:27:51.010
right up at the top of the
page, which is fine.

00:27:51.010 --> 00:27:53.550
Pulling from Google APIs
is a good pattern,

00:27:53.550 --> 00:27:54.440
because it's shared.

00:27:54.440 --> 00:27:56.380
It tends to be in
people's caches.

00:27:56.380 --> 00:27:59.230
Just try and move it down to the
bottom of page on the odd

00:27:59.230 --> 00:28:02.640
chance that it's down or
it's blocked somewhere.

00:28:02.640 --> 00:28:05.270
And I'm not entirely sure
what crowd control is.

00:28:05.270 --> 00:28:09.220
But it sounds like it's a
user-targeting type thing.

00:28:09.220 --> 00:28:12.931
Same goes for a lot of
the other blogs.

00:28:12.931 --> 00:28:14.675
Oh, the last one, definitely
something I

00:28:14.675 --> 00:28:16.500
want to talk about.

00:28:16.500 --> 00:28:21.290
CNET is pulling in the HTML5
shim code directly from the

00:28:21.290 --> 00:28:23.800
trunk of Google Code.

00:28:23.800 --> 00:28:24.700
That's brave.

00:28:24.700 --> 00:28:26.020
[LAUGHTER]

00:28:26.020 --> 00:28:30.070
PATRICK MEENAN: So I hope they
personally know everyone that

00:28:30.070 --> 00:28:32.380
has commit access to that.

00:28:32.380 --> 00:28:37.250
But from a performance
perspective, you also want to

00:28:37.250 --> 00:28:39.190
be really careful.

00:28:39.190 --> 00:28:42.480
Both GitHub and Google Code
are not designed to serve

00:28:42.480 --> 00:28:44.740
static content to end users.

00:28:44.740 --> 00:28:46.160
They're not a CDN.

00:28:46.160 --> 00:28:50.120
They don't have caching headers
on the resources.

00:28:50.120 --> 00:28:52.560
They're not designed to
be performant for

00:28:52.560 --> 00:28:53.880
serving static content.

00:28:53.880 --> 00:28:58.170
So don't encourage users to pull
your code directly from--

00:28:58.170 --> 00:29:02.680
even if it's from a stable
branch, don't recommend

00:29:02.680 --> 00:29:05.600
pulling code directly from
the code repositories.

00:29:05.600 --> 00:29:07.810
Definitely don't recommend
people to pull it from the

00:29:07.810 --> 00:29:11.910
trunk on production pages.

00:29:11.910 --> 00:29:12.590
Politicians.

00:29:12.590 --> 00:29:13.680
Yay, I'm from DC.

00:29:13.680 --> 00:29:16.660
So I can't help but look and
see, hey, is it more of a

00:29:16.660 --> 00:29:18.130
Democrat or a Republican
problem?

00:29:18.130 --> 00:29:21.080
It's equal opportunity.

00:29:21.080 --> 00:29:22.610
And the White House as well.

00:29:22.610 --> 00:29:25.180
So all of these are blocking
scripts up at the top of their

00:29:25.180 --> 00:29:27.350
respective pages.

00:29:27.350 --> 00:29:30.230
E-Commerce I was a little more
surprised about, because it's

00:29:30.230 --> 00:29:31.310
not really content.

00:29:31.310 --> 00:29:33.340
But then when I thought about
a little more it's like, OK,

00:29:33.340 --> 00:29:35.890
well, maybe they want people
sharing the product pages.

00:29:35.890 --> 00:29:39.490
Or I guess in the case of
Bazaarvoice, the reviews,

00:29:39.490 --> 00:29:41.760
they're pulling reviews
in from a third party.

00:29:41.760 --> 00:29:44.810
But all of these are blocking
up at the top of the pages.

00:29:44.810 --> 00:29:47.550
So even the Pinterest button,
for example, on Newegg's

00:29:47.550 --> 00:29:50.910
product page isn't following the
pattern of being down at

00:29:50.910 --> 00:29:52.660
the bottom of the body.

00:29:52.660 --> 00:29:56.147
So people don't do what you
ask them to do in case you

00:29:56.147 --> 00:29:58.320
were wondering.

00:29:58.320 --> 00:30:02.050
So in these cases, the product
pages, in particular, you'll

00:30:02.050 --> 00:30:04.310
go ahead, like Best Buy, you'll
be browsing around.

00:30:04.310 --> 00:30:06.570
You'll find the category of
things you want to look at.

00:30:06.570 --> 00:30:08.530
And then you'll go to
click onto a product

00:30:08.530 --> 00:30:09.920
and try and buy it.

00:30:09.920 --> 00:30:12.590
And at that point, you get
a completely blank page.

00:30:12.590 --> 00:30:15.440
So it's good that you can
see what they offer.

00:30:15.440 --> 00:30:17.350
It kind of sucks that
you can't buy.

00:30:19.960 --> 00:30:22.390
So coming out of here--

00:30:22.390 --> 00:30:25.310
and we're not done yet, but I
definitely want what you guys

00:30:25.310 --> 00:30:30.230
to take away is if you're
creating the next big social

00:30:30.230 --> 00:30:33.020
media company and you create a
widget that you want everyone

00:30:33.020 --> 00:30:36.060
to use, please, don't
ever, ever

00:30:36.060 --> 00:30:37.500
provide a blocking snippet.

00:30:37.500 --> 00:30:40.800
Don't let it seep into your
documentation, even for a

00:30:40.800 --> 00:30:42.250
couple of minutes,
because that's

00:30:42.250 --> 00:30:45.020
what people will implement.

00:30:45.020 --> 00:30:47.770
All of your examples, no matter
where it is in your

00:30:47.770 --> 00:30:52.240
documentation, make
them asynchronous.

00:30:52.240 --> 00:30:56.120
The documentation for Google's
JS API is a really good

00:30:56.120 --> 00:30:57.220
example of that.

00:30:57.220 --> 00:31:00.570
Most of our documentation has
a blocking script example

00:31:00.570 --> 00:31:02.750
because it's the cleanest, and
it's sort of the easiest to

00:31:02.750 --> 00:31:03.790
understand.

00:31:03.790 --> 00:31:06.780
But if you dig really deep into
the documentation, you

00:31:06.780 --> 00:31:10.010
can actually find that it
supports callbacks and a

00:31:10.010 --> 00:31:14.110
completely async method of
loading even the JS API code,

00:31:14.110 --> 00:31:18.780
so another thing we're working
on cleaning up.

00:31:18.780 --> 00:31:22.770
HTTPS, try not to force it
if it's not required.

00:31:22.770 --> 00:31:25.900
Remember, you're trying
to get other people

00:31:25.900 --> 00:31:27.680
to adopt your code.

00:31:27.680 --> 00:31:30.840
So even if you want things in
the internet to be as secure

00:31:30.840 --> 00:31:31.820
as possible--

00:31:31.820 --> 00:31:34.010
yadda, yadda, yadda--

00:31:34.010 --> 00:31:36.670
don't try and push all of that
on the sites that are

00:31:36.670 --> 00:31:38.650
embedding your code.

00:31:38.650 --> 00:31:41.550
It would be really great if you
allowed sites to self-host

00:31:41.550 --> 00:31:44.330
anything that was absolutely
critical to them

00:31:44.330 --> 00:31:45.850
being able to load.

00:31:45.850 --> 00:31:49.280
If you're a site owner building
a site, don't ever,

00:31:49.280 --> 00:31:53.370
ever load anything that's
provided by a third party

00:31:53.370 --> 00:31:57.390
synchronously unless you
absolutely trust and depend

00:31:57.390 --> 00:32:00.670
and are willing to bet your
site availability on their

00:32:00.670 --> 00:32:04.280
availability and all of
their availability.

00:32:04.280 --> 00:32:06.340
No one is ever up 100%.

00:32:06.340 --> 00:32:07.260
I'll tell you that now.

00:32:07.260 --> 00:32:09.280
Even Google is never up 100%.

00:32:09.280 --> 00:32:12.250
You see, every now and
then, Gmail outages.

00:32:12.250 --> 00:32:16.480
Very, very rarely, but
nobody is up 100%.

00:32:16.480 --> 00:32:18.510
And once you start stacking
those, if you have three or

00:32:18.510 --> 00:32:21.660
four external dependencies,
you're availability starts

00:32:21.660 --> 00:32:23.940
going down.

00:32:23.940 --> 00:32:25.430
Be careful relying on onload.

00:32:25.430 --> 00:32:27.290
We talked about this
a little bit.

00:32:27.290 --> 00:32:28.540
Don't expect it to happen.

00:32:28.540 --> 00:32:31.810
Have timeouts, especially your
performance timing scripts,

00:32:31.810 --> 00:32:32.300
for example.

00:32:32.300 --> 00:32:35.510
Have it timeout something less
aggressive than 20 seconds

00:32:35.510 --> 00:32:39.830
that you can fire and say,
hey, it didn't happen.

00:32:39.830 --> 00:32:42.160
You're monitoring, make sure
you have really aggressive

00:32:42.160 --> 00:32:43.650
timeouts there as well.

00:32:43.650 --> 00:32:46.290
It kind of sucks to
get false alarms.

00:32:46.290 --> 00:32:48.080
You know, I've been
in this world.

00:32:48.080 --> 00:32:49.730
We get production pages.

00:32:49.730 --> 00:32:50.500
We're monitoring.

00:32:50.500 --> 00:32:52.370
They have ads on them.

00:32:52.370 --> 00:32:53.660
They vary all over the place.

00:32:53.660 --> 00:32:56.220
The ops teams don't like getting
woken up in the middle

00:32:56.220 --> 00:32:59.230
of the night because an ad
pushed out the load time.

00:32:59.230 --> 00:33:02.940
Unfortunately, if you keep the
timeouts really conservative,

00:33:02.940 --> 00:33:06.750
you may never know when you have
a script blocking your

00:33:06.750 --> 00:33:09.410
page from loading.

00:33:09.410 --> 00:33:12.800
And in your analytics, if you
have it available, make sure

00:33:12.800 --> 00:33:14.710
you take a look at the regions
and track your

00:33:14.710 --> 00:33:16.620
page failures by region.

00:33:16.620 --> 00:33:19.510
This is where you really want
the real user monitoring.

00:33:19.510 --> 00:33:22.940
Because odds are, you aren't
going to be able to have

00:33:22.940 --> 00:33:24.010
synthetic tests.

00:33:24.010 --> 00:33:26.700
Your monitoring system's testing
from every network in

00:33:26.700 --> 00:33:28.470
every country around
the world.

00:33:28.470 --> 00:33:30.720
And your best way to dig in to
those failures is to look at

00:33:30.720 --> 00:33:34.050
your analytics and look at your
failures by region from

00:33:34.050 --> 00:33:37.610
your beacons on your pages
to see what's going on.

00:33:37.610 --> 00:33:40.430
So now we're going to kick over
and play a little bit

00:33:40.430 --> 00:33:41.680
with SPOF-O-Matic.

00:33:46.190 --> 00:33:47.920
So here we have it up here.

00:33:47.920 --> 00:33:49.170
We'll browse around
a little bit.

00:33:52.720 --> 00:33:55.715
So Newegg's main page, it's
fine, still nice and gray.

00:34:03.575 --> 00:34:05.995
Let's see, I need
a new plasma TV.

00:34:10.389 --> 00:34:12.175
All right, and here, we
get the warning icon.

00:34:16.150 --> 00:34:17.440
Of course, that doesn't
actually zoom

00:34:17.440 --> 00:34:19.679
in the Chrome UI.

00:34:19.679 --> 00:34:22.570
And we can see the Pinterest
button, for example, is

00:34:22.570 --> 00:34:25.179
blocking 99% of the page.

00:34:25.179 --> 00:34:28.040
We'll go ahead and turn on
resource blocking, so we can

00:34:28.040 --> 00:34:29.219
experience the fun.

00:34:29.219 --> 00:34:33.889
Oh, I liked this one, SANS,
which is telling you the

00:34:33.889 --> 00:34:35.620
availability of the internet,

00:34:35.620 --> 00:34:37.449
vulnerabilities, things like that.

00:34:37.449 --> 00:34:41.210
[LAUGHTER]

00:34:41.210 --> 00:34:42.710
PATRICK MEENAN: Yay,
we see their logo.

00:34:42.710 --> 00:34:44.270
At least it's not a completely
blank page.

00:34:44.270 --> 00:34:45.719
So that's the other thing
to be aware of.

00:34:45.719 --> 00:34:49.330
It doesn't block 100% of the
page all of the time.

00:34:49.330 --> 00:34:50.889
It's not always a completely
blank screen.

00:34:50.889 --> 00:34:52.995
It depends on where the script
tag is on the page.

00:34:52.995 --> 00:34:54.239
Hey, there we go.

00:34:54.239 --> 00:34:54.980
Network security.

00:34:54.980 --> 00:34:57.700
So in this case, the search box
was actually loaded by a

00:34:57.700 --> 00:34:59.220
blocking script.

00:34:59.220 --> 00:35:01.400
So you got to see the header and
everything up until it hit

00:35:01.400 --> 00:35:05.260
the script to populate
the search box.

00:35:05.260 --> 00:35:09.660
I guess Best Buy since I used
them as an example earlier.

00:35:09.660 --> 00:35:10.910
We'll browse around.

00:35:15.270 --> 00:35:17.670
Oh, well, that didn't
take too long.

00:35:17.670 --> 00:35:20.510
OK, so you'll stare at a blank
screen there for a while.

00:35:20.510 --> 00:35:22.440
Like I said, you probably don't
want to browse around

00:35:22.440 --> 00:35:24.530
for too long with it in blocking
mode because you're

00:35:24.530 --> 00:35:25.900
going to get a lot of this.

00:35:25.900 --> 00:35:31.010
And it gets really tiring to
browse the internet like this.

00:35:31.010 --> 00:35:36.600
But I at least enjoy leaving it
enabled in detection mode

00:35:36.600 --> 00:35:39.490
as I browse around and just look
up every now and then up

00:35:39.490 --> 00:35:42.010
at the top corner and
see how often the

00:35:42.010 --> 00:35:43.920
warning icon comes up.

00:35:43.920 --> 00:35:48.340
And it's a pretty safe bet, 80
plus percent of the sites that

00:35:48.340 --> 00:35:52.270
i browse on any given day all
have some form of blocking

00:35:52.270 --> 00:35:54.405
scripts on their page that
they don't control.

00:35:59.290 --> 00:36:01.960
And actually, before I hop over,
in a second I'm going to

00:36:01.960 --> 00:36:03.330
show you how to create.

00:36:03.330 --> 00:36:05.730
So all of the videos that I
showed you earlier that showed

00:36:05.730 --> 00:36:08.290
the experience were created
in WebPagetest.

00:36:08.290 --> 00:36:09.920
I'm going to show you how
to create one of those.

00:36:09.920 --> 00:36:12.150
So if you're going to be sharing
with someone, you can

00:36:12.150 --> 00:36:13.760
give them a video.

00:36:13.760 --> 00:36:15.830
Executives seem to respond
really well

00:36:15.830 --> 00:36:17.520
to seeing the videos.

00:36:17.520 --> 00:36:19.450
So if you need to sell someone
on it, that's a really good

00:36:19.450 --> 00:36:20.200
way to do it.

00:36:20.200 --> 00:36:23.230
They don't tend to understand
waterfalls

00:36:23.230 --> 00:36:25.050
or understand SPOFs.

00:36:25.050 --> 00:36:27.470
But before that, did anyone
have a site that

00:36:27.470 --> 00:36:28.680
they wanted to try?

00:36:28.680 --> 00:36:29.930
Please, safe for work.

00:36:33.224 --> 00:36:34.580
AUDIENCE: Blazingcloud.net.

00:36:34.580 --> 00:36:35.830
PATRICK MEENAN:
Blazingcloud.net.

00:36:37.912 --> 00:36:46.624
[TYPING]

00:36:46.624 --> 00:36:48.210
PATRICK MEENAN: Well, looking
good, all gray.

00:36:51.660 --> 00:36:53.540
Now, let's see the blog,
though, where they have

00:36:53.540 --> 00:36:55.260
content that they like-- oh!

00:36:55.260 --> 00:36:59.460
[LAUGHING]

00:36:59.460 --> 00:37:00.410
PATRICK MEENAN: That's
actually not too bad.

00:37:00.410 --> 00:37:04.600
It's loading jQuery.

00:37:04.600 --> 00:37:05.870
It is loading up at the top.

00:37:05.870 --> 00:37:09.740
But let's see about a specific
article page.

00:37:12.460 --> 00:37:13.460
No, it's still jQuery.

00:37:13.460 --> 00:37:16.890
I don't see any social sharing
buttons either.

00:37:16.890 --> 00:37:19.825
So that's probably why the
blog is relatively safe.

00:37:22.858 --> 00:37:25.173
Yeah, right up here.

00:37:25.173 --> 00:37:26.110
AUDIENCE: Shutterfly.com.

00:37:26.110 --> 00:37:27.036
PATRICK MEENAN: Sorry,
can you speak up?

00:37:27.036 --> 00:37:27.830
AUDIENCE: Shutterfly.com.

00:37:27.830 --> 00:37:29.080
PATRICK MEENAN: Shutterfly.com.

00:37:30.825 --> 00:37:37.740
[TYPING]

00:37:37.740 --> 00:37:40.320
PATRICK MEENAN: Also looks
good, although--

00:37:40.320 --> 00:37:43.850
oh, I was going to say I don't
think I even remember.

00:37:43.850 --> 00:37:45.110
I used to have a Shutterfly
account.

00:37:45.110 --> 00:37:48.200
But it's been a little while.

00:37:48.200 --> 00:37:49.900
Take a tour.

00:37:49.900 --> 00:37:51.470
Oh, no, that looks like
it's a video.

00:37:54.310 --> 00:37:55.560
Store.

00:38:01.150 --> 00:38:02.490
Oh, here we go.

00:38:02.490 --> 00:38:05.550
So once again, it's
not too bad.

00:38:05.550 --> 00:38:10.690
So they turn yellow when they're
down below 50% of the

00:38:10.690 --> 00:38:15.540
page or so that's blocked
in this case, although--

00:38:15.540 --> 00:38:17.140
so one of them is the ad.

00:38:17.140 --> 00:38:21.530
Quantserve is a tracking
pixel, I believe.

00:38:21.530 --> 00:38:24.650
Having anything that's not
user facing as a blocking

00:38:24.650 --> 00:38:26.590
script is also probably
something you want to

00:38:26.590 --> 00:38:30.000
completely avoid, especially
anything that's like user

00:38:30.000 --> 00:38:34.200
behavioral tracking and stuff
that the users don't see.

00:38:34.200 --> 00:38:35.500
It's not for the users.

00:38:35.500 --> 00:38:37.570
You're doing it for you.

00:38:37.570 --> 00:38:39.530
Try and get it out of the
way as much as possible.

00:38:39.530 --> 00:38:41.730
You can still have it up at the
top of the page, just do

00:38:41.730 --> 00:38:45.210
it asynchronously so it doesn't
block anything.

00:38:45.210 --> 00:38:48.190
And then we'll hop back here
and browse a little more

00:38:48.190 --> 00:38:52.152
towards the end if
we've got time.

00:38:52.152 --> 00:38:53.890
But I wanted to show,
really quickly.

00:38:53.890 --> 00:38:57.995
So this is a WebPagetest
load of--

00:39:02.024 --> 00:39:07.040
oh, OK, so this is sort of the
cross between the performance

00:39:07.040 --> 00:39:09.980
world and the availability
and why it's important.

00:39:09.980 --> 00:39:13.950
We tend to like waterfalls that
do a lot of this and are

00:39:13.950 --> 00:39:17.450
more vertical and a lot less
of this where they start to

00:39:17.450 --> 00:39:18.810
get horizontal.

00:39:18.810 --> 00:39:20.580
And when they start to get
horizontal, that's where you

00:39:20.580 --> 00:39:23.060
have a series of things
that are blocking.

00:39:23.060 --> 00:39:29.690
And in this case, it's actually
the Google APIs.

00:39:29.690 --> 00:39:31.050
Not that one.

00:39:31.050 --> 00:39:35.360
Here, the JS API that then
creates a dependency chain and

00:39:35.360 --> 00:39:38.520
loads things serially that's
a blocking tag.

00:39:38.520 --> 00:39:40.780
It document writes all
sorts of patterns you

00:39:40.780 --> 00:39:43.310
want to try and avoid.

00:39:43.310 --> 00:39:47.840
But asynchronously, it would
have shaved 3 seconds off of

00:39:47.840 --> 00:39:51.480
the page load in this case just
by loading that script

00:39:51.480 --> 00:39:51.710
asynchronously.

00:39:51.710 --> 00:39:56.028
And we get the other benefits
of not blocking.

00:39:56.028 --> 00:39:57.900
AUDIENCE: You said there's
something in the documentation

00:39:57.900 --> 00:40:00.240
code, JS API asynchronously?

00:40:00.240 --> 00:40:04.590
PATRICK MEENAN: In the JS
API, look for callback.

00:40:04.590 --> 00:40:07.790
It's actually a query pram that
you can pass to JS API.

00:40:07.790 --> 00:40:09.750
Callback, and you can
pass it a function.

00:40:09.750 --> 00:40:13.280
And as soon as it loads, it'll
actually call your function to

00:40:13.280 --> 00:40:14.050
let you know it's loaded.

00:40:14.050 --> 00:40:16.890
And then you can do whatever
you depended on

00:40:16.890 --> 00:40:18.753
JS API being loaded.

00:40:18.753 --> 00:40:21.020
AUDIENCE: [INAUDIBLE].

00:40:21.020 --> 00:40:21.730
PATRICK MEENAN: Yes.

00:40:21.730 --> 00:40:22.930
I was really happy
when I saw it.

00:40:22.930 --> 00:40:24.650
So you don't even need
a third-party loader.

00:40:24.650 --> 00:40:25.760
It has it built in.

00:40:25.760 --> 00:40:29.270
It's just not promoted
right now in the UI.

00:40:29.270 --> 00:40:31.130
So this is WebPagetest.

00:40:31.130 --> 00:40:33.590
If you haven't tried it,
I highly recommend it.

00:40:33.590 --> 00:40:37.640
Not just because I created it,
but we use it a lot when we're

00:40:37.640 --> 00:40:39.200
doing performance analysis.

00:40:39.200 --> 00:40:41.300
You drop in an URL, and you
get a waterfall back.

00:40:41.300 --> 00:40:43.770
You can record video.

00:40:43.770 --> 00:40:49.410
But what you do is in here,
you'll do setDNS.

00:40:49.410 --> 00:40:52.050
So there's a whole bunch of
options you have in the UI.

00:40:52.050 --> 00:40:55.120
You can capture TCP dumps
and DevTools Timelines,

00:40:55.120 --> 00:40:56.380
and things like that.

00:40:56.380 --> 00:41:01.170
The script tab is where we put
the really crazy advanced

00:41:01.170 --> 00:41:03.040
features that we couldn't figure
out how to create UI

00:41:03.040 --> 00:41:05.400
buttons for.

00:41:05.400 --> 00:41:08.350
And I did mention how I suck
at UIs, so that's why

00:41:08.350 --> 00:41:09.950
everything's a tab and
a radio button.

00:41:13.158 --> 00:41:16.790
[TYPING]

00:41:16.790 --> 00:41:18.770
PATRICK MEENAN: So if you want
to block Facebook, for

00:41:18.770 --> 00:41:23.360
example, you do setDNSName,
connect facebook.net, and

00:41:23.360 --> 00:41:25.133
point that to black hole.

00:41:25.133 --> 00:41:29.570
[TYPING]

00:41:29.570 --> 00:41:39.800
PATRICK MEENAN: And then tell it
to navigate to the page you

00:41:39.800 --> 00:41:40.610
want to test.

00:41:40.610 --> 00:41:43.680
You probably want to record
video because you're going to

00:41:43.680 --> 00:41:46.280
want to create a video to show
people what it looks like.

00:41:46.280 --> 00:41:48.050
And then say, this is
what it looks like

00:41:48.050 --> 00:41:51.670
when Facebook is down.

00:41:51.670 --> 00:41:54.600
And once again, not picking on
Facebook here, it just happens

00:41:54.600 --> 00:41:56.060
to be an easy one.

00:41:56.060 --> 00:42:00.610
We all have this problem.

00:42:00.610 --> 00:42:04.480
All right, just get rid of
the ads for a second.

00:42:04.480 --> 00:42:05.070
Yes.

00:42:05.070 --> 00:42:08.230
By the way, you now know my
super secret query pram,

00:42:08.230 --> 00:42:11.420
bare=1, to get rid of the ads
when you're taking screenshots

00:42:11.420 --> 00:42:13.450
and things like that.

00:42:13.450 --> 00:42:15.200
So we'll go ahead and let
that finish running.

00:42:15.200 --> 00:42:19.330
I did run some examples
before.

00:42:19.330 --> 00:42:20.920
So what you want to do when
you want to create a

00:42:20.920 --> 00:42:22.510
side-by-side video,
for example.

00:42:22.510 --> 00:42:24.970
So recording video for any
one page is great.

00:42:24.970 --> 00:42:26.920
But what you really want to do
is be able to do the side by

00:42:26.920 --> 00:42:28.770
side and show, this is what
it's like normally.

00:42:28.770 --> 00:42:30.740
This is what it's
like super fast.

00:42:30.740 --> 00:42:34.340
And this is what it's like when
X is down or some of the

00:42:34.340 --> 00:42:35.350
other reasons we do it.

00:42:35.350 --> 00:42:37.160
This is what it's like
when we block ads.

00:42:37.160 --> 00:42:42.430
So you can see the impact that
ads have on the performance.

00:42:42.430 --> 00:42:44.740
If you go into your test history
and select the ones

00:42:44.740 --> 00:42:47.970
you want to compare, you can
just check the ones you want

00:42:47.970 --> 00:42:48.810
to compare.

00:42:48.810 --> 00:42:50.310
Click the Compare button.

00:42:50.310 --> 00:42:53.590
And you'll get a filmstrip of
what both of them look like

00:42:53.590 --> 00:42:54.920
when they're loading.

00:42:54.920 --> 00:42:58.380
You can sort of scroll
and play with it.

00:42:58.380 --> 00:43:05.560
And way out here somewhere,
you get 20 seconds.

00:43:05.560 --> 00:43:09.170
And you can also
create a video.

00:43:09.170 --> 00:43:12.180
That will be available
shortly.

00:43:12.180 --> 00:43:13.150
Magic cooking show.

00:43:13.150 --> 00:43:16.310
We have one we already did.

00:43:16.310 --> 00:43:20.330
And all of these URLs,
they're permanent.

00:43:20.330 --> 00:43:21.020
They're shareable.

00:43:21.020 --> 00:43:22.710
We keep the data forever.

00:43:22.710 --> 00:43:24.520
So you can share the filmstrips,
the raw test

00:43:24.520 --> 00:43:25.640
results, the videos.

00:43:25.640 --> 00:43:28.250
You can also download the raw
video, if you want to embed it

00:43:28.250 --> 00:43:31.150
in anything.

00:43:31.150 --> 00:43:32.880
Generally, in the web
performance world, if you see

00:43:32.880 --> 00:43:35.590
any videos that look like
this, that have multiple

00:43:35.590 --> 00:43:38.250
videos side by side with the
little timer going below it,

00:43:38.250 --> 00:43:40.660
they came from WebPagetest.

00:43:40.660 --> 00:43:43.170
But this works really well when
you're trying to sell

00:43:43.170 --> 00:43:45.670
executives on why it matters.

00:43:45.670 --> 00:43:48.390
And even on the performance side
of things, they respond

00:43:48.390 --> 00:43:49.300
very well to video.

00:43:49.300 --> 00:43:51.490
It's like, well, this is what
it used to look like.

00:43:51.490 --> 00:43:52.600
This is what it looks
like now.

00:43:52.600 --> 00:43:54.410
See how much faster it is?

00:43:54.410 --> 00:43:55.800
Pay us more to do this.

00:43:58.840 --> 00:44:01.700
Oh, wow, it didn't
work at all.

00:44:04.640 --> 00:44:05.890
Let me try it with Chrome.

00:44:09.590 --> 00:44:11.740
So have a whole bunch of
different browsers you can use

00:44:11.740 --> 00:44:14.390
to select for doing
your testing.

00:44:14.390 --> 00:44:17.240
The Chrome ones, you can
actually record a DevTools

00:44:17.240 --> 00:44:21.810
Timeline as well, if you want
all sorts of trace information

00:44:21.810 --> 00:44:23.060
for debugging.

00:44:25.720 --> 00:44:29.280
While those are running, anyone
else want to experiment

00:44:29.280 --> 00:44:30.870
with their site and
offer it up?

00:44:30.870 --> 00:44:33.160
Or someone else's site
and offer it up

00:44:33.160 --> 00:44:34.694
for everyone to see?

00:44:34.694 --> 00:44:36.510
AUDIENCE: Developers.google.com.

00:44:36.510 --> 00:44:37.760
PATRICK MEENAN: What was
that developers--

00:44:42.230 --> 00:44:49.920
So yes, my keyboard has a
problem with repeating O's for

00:44:49.920 --> 00:44:51.560
some reason, which is
really difficult

00:44:51.560 --> 00:44:52.570
when you work at Google.

00:44:52.570 --> 00:44:55.040
[LAUGHTER]

00:44:55.040 --> 00:44:58.060
PATRICK MEENAN: So nothing
loaded from third parties.

00:44:58.060 --> 00:45:03.960
However, the waterfall that I
used earlier, you'll notice up

00:45:03.960 --> 00:45:08.450
here, is for
developers.google.com.

00:45:08.450 --> 00:45:13.190
So the JS API is something we're
working on, even on the

00:45:13.190 --> 00:45:16.590
Developers page to get it out
of the way and make it

00:45:16.590 --> 00:45:18.140
significantly faster.

00:45:18.140 --> 00:45:21.390
And it's also got a little
problem with

00:45:21.390 --> 00:45:22.260
the first byte time.

00:45:22.260 --> 00:45:24.730
3 seconds is kind of obscene.

00:45:24.730 --> 00:45:27.050
So we're also looking at that.

00:45:27.050 --> 00:45:30.830
We tend to prefer first byte
times in the 100 millisecond

00:45:30.830 --> 00:45:32.080
range or so.

00:45:37.410 --> 00:45:40.495
OK, so here's the Business
Insider test.

00:45:45.290 --> 00:45:48.610
Yeah, so when we're looking at
waterfalls, usually if it

00:45:48.610 --> 00:45:52.940
doesn't fit above the fold,
that's a lot of resources.

00:45:52.940 --> 00:45:56.570
So yeah, whenever I'm working on
web performance stuff, get

00:45:56.570 --> 00:45:58.070
a lot of stuff just
looking from the

00:45:58.070 --> 00:45:59.240
thumbnail of the waterfall.

00:45:59.240 --> 00:46:00.400
How big it is It?

00:46:00.400 --> 00:46:02.920
What does it look like as
far as the shape of

00:46:02.920 --> 00:46:04.150
the waterfall goes?

00:46:04.150 --> 00:46:08.100
The yellow lines are either
redirects or, in the case of a

00:46:08.100 --> 00:46:12.580
repeat view, 304s,
Not Modified.

00:46:12.580 --> 00:46:13.940
There, it just finished.

00:46:13.940 --> 00:46:15.800
If you see any red lines,
those are worse.

00:46:15.800 --> 00:46:18.570
Those are 404s, that
kind of thing.

00:46:18.570 --> 00:46:20.320
It looks like they
did pretty well.

00:46:23.180 --> 00:46:25.030
Maybe this gap way
down here at the

00:46:25.030 --> 00:46:26.280
bottom of the waterfall.

00:46:34.540 --> 00:46:38.700
Yeah, so the onload got pushed
out to 24 seconds when

00:46:38.700 --> 00:46:39.600
Facebook was blocked.

00:46:39.600 --> 00:46:42.220
But as you can tell, the user
experience wasn't bad.

00:46:47.366 --> 00:46:50.160
Yeah, so the UI showed up
really quickly, well,

00:46:50.160 --> 00:46:51.920
relatively quickly.

00:46:51.920 --> 00:46:53.940
And it didn't block the
user experience.

00:46:53.940 --> 00:46:56.640
Oh, one other thing I can show
you guys while I'm here.

00:46:56.640 --> 00:46:59.590
If you're looking at a single
test, you get a

00:46:59.590 --> 00:47:00.760
waterfall down below it.

00:47:00.760 --> 00:47:02.890
And this red line will
track with the

00:47:02.890 --> 00:47:04.140
left edge of the filmstrip.

00:47:07.390 --> 00:47:08.970
Because we've got the Start
Render and we've always had

00:47:08.970 --> 00:47:10.500
the green Start Render line.

00:47:10.500 --> 00:47:13.700
But if you want to see what
caused the actual content--

00:47:13.700 --> 00:47:15.660
and it looks like in this case,
most of the content

00:47:15.660 --> 00:47:18.160
populated anyway--

00:47:18.160 --> 00:47:23.310
but you can figure out what
was blocking the UI from

00:47:23.310 --> 00:47:25.600
showing up.

00:47:25.600 --> 00:47:29.870
So that was the live portion
of our show.

00:47:29.870 --> 00:47:32.040
I think we can kick into any
questions and answers.

00:47:32.040 --> 00:47:35.810
I'll tweet out the link and
put it up on Google+.

00:47:35.810 --> 00:47:37.790
And I think as part of the show,
we're also going to make

00:47:37.790 --> 00:47:39.070
it available.

00:47:39.070 --> 00:47:40.390
So any questions?

00:47:45.370 --> 00:47:48.100
Wow, you're an easy crowd.

00:47:48.100 --> 00:47:49.620
All right, well, thank you.

00:47:49.620 --> 00:47:52.490
If you want to hit me up for
anything one on one, I'll hang

00:47:52.490 --> 00:47:55.000
around up here for
a couple minutes.

00:47:55.000 --> 00:47:58.500
If the next people come in,
we can talk outside in the

00:47:58.500 --> 00:48:00.005
hallway or something
like that.

00:48:00.005 --> 00:48:00.970
All right, thanks.

00:48:00.970 --> 00:48:03.082
[APPLAUSE]

