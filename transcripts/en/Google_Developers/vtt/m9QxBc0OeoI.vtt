WEBVTT
Kind: captions
Language: en

00:00:00.650 --> 00:00:01.220
TOM MOOR: OK.

00:00:01.220 --> 00:00:01.510
Cool.

00:00:01.510 --> 00:00:02.500
So yeah, like he said.

00:00:02.500 --> 00:00:03.731
My name is Tom Moor.

00:00:03.731 --> 00:00:05.730
I'm the co-founder of a
company called Sqwiggle.

00:00:05.730 --> 00:00:07.910
And before that I
worked on a company

00:00:07.910 --> 00:00:12.360
called Buffer that you
might have heard of.

00:00:12.360 --> 00:00:15.670
So the thing that these two
companies both have in common

00:00:15.670 --> 00:00:19.010
is that they're both built
by distributed teams.

00:00:19.010 --> 00:00:22.430
They're completely
geographically dispersed.

00:00:22.430 --> 00:00:24.520
We have no office.

00:00:24.520 --> 00:00:25.790
And you know, that's great.

00:00:25.790 --> 00:00:28.600
You know having a distributed
team has a lot of benefits.

00:00:28.600 --> 00:00:30.580
You can save money.

00:00:30.580 --> 00:00:32.470
You can have flexible
working hours.

00:00:32.470 --> 00:00:34.160
You can hire the best talent.

00:00:34.160 --> 00:00:35.900
But it also has its problems.

00:00:35.900 --> 00:00:38.200
You become lonely maybe.

00:00:38.200 --> 00:00:39.450
It's difficult to communicate.

00:00:39.450 --> 00:00:42.480
You have to spend 50 minutes
setting up calls here,

00:00:42.480 --> 00:00:43.520
setting up calls there.

00:00:43.520 --> 00:00:46.300
So basically the
idea behind Sqwiggle

00:00:46.300 --> 00:00:49.010
is to try and solve
these problems.

00:00:49.010 --> 00:00:53.130
And we do that in a couple
of interesting ways.

00:00:53.130 --> 00:00:57.130
Basically you can see
everybody on your team

00:00:57.130 --> 00:00:58.550
when you're using Sqwiggle.

00:00:58.550 --> 00:01:01.700
And the enabling technology
behind that is WebRTC.

00:01:01.700 --> 00:01:05.319
We use your webcam to
take pictures of you

00:01:05.319 --> 00:01:06.500
through the day.

00:01:06.500 --> 00:01:08.959
And then when you want to speak
with somebody on your team,

00:01:08.959 --> 00:01:10.583
instead of having to
call them, instead

00:01:10.583 --> 00:01:12.360
of having to set up
a meeting, you simply

00:01:12.360 --> 00:01:15.930
click on that picture, and it
immediately connects the video.

00:01:15.930 --> 00:01:19.560
So I'm going to tell you a
little bit about how it's all

00:01:19.560 --> 00:01:20.730
built and how we built it.

00:01:20.730 --> 00:01:25.320
But just so you can kind of
get a good feeling of what

00:01:25.320 --> 00:01:30.000
the product's about, I'll
give you a quick demo.

00:01:30.000 --> 00:01:33.410
If this will work.

00:01:33.410 --> 00:01:34.230
There we go.

00:01:34.230 --> 00:01:34.730
OK.

00:01:34.730 --> 00:01:35.646
You guys can see that?

00:01:35.646 --> 00:01:36.530
Yes.

00:01:36.530 --> 00:01:38.740
So you can see my team
here that's spread out.

00:01:38.740 --> 00:01:42.450
We have Matt in Missouri,
Will in Baltimore, Eric

00:01:42.450 --> 00:01:44.470
here in San Francisco.

00:01:44.470 --> 00:01:48.390
And if I want to speak to Will,
these pictures are updating

00:01:48.390 --> 00:01:51.840
and this is all using WebRTC,
I simply click on Will.

00:01:51.840 --> 00:01:53.770
And then he's available.

00:01:53.770 --> 00:01:54.270
Woo hoo.

00:01:54.270 --> 00:01:55.500
We don't have sound.

00:01:55.500 --> 00:01:57.377
But it's that simple, right?

00:01:57.377 --> 00:01:58.960
And you know, in the
background there,

00:01:58.960 --> 00:02:01.168
all the signaling that
everyone's been talking about?

00:02:01.168 --> 00:02:03.105
That will happen just
like that to connect

00:02:03.105 --> 00:02:03.980
to that conversation.

00:02:03.980 --> 00:02:06.050
If I want to speak with someone
else, I click on them as well.

00:02:06.050 --> 00:02:07.466
And they're brought
into the call.

00:02:07.466 --> 00:02:10.120
So it's very, very
seamless, very quick,

00:02:10.120 --> 00:02:12.624
and you can have immediate
discussions like that.

00:02:12.624 --> 00:02:13.540
So I'll just end that.

00:02:13.540 --> 00:02:15.025
Bye Will.

00:02:15.025 --> 00:02:17.230
I just interrupted his day.

00:02:17.230 --> 00:02:20.737
I got a thumbs up from him.

00:02:20.737 --> 00:02:21.820
So let me go back to that.

00:02:21.820 --> 00:02:23.380
So you can see
how quick that is.

00:02:23.380 --> 00:02:25.815
You can have really, really
quick video discussions.

00:02:25.815 --> 00:02:28.327
And like I say, without
WebRTC this just

00:02:28.327 --> 00:02:29.410
would never been possible.

00:02:34.510 --> 00:02:36.370
So why did we choose WebRTC?

00:02:36.370 --> 00:02:39.080
Well, first off,
we're web developers.

00:02:39.080 --> 00:02:41.580
We don't come from the
telecoms background

00:02:41.580 --> 00:02:42.990
like [? Sahee ?] and Chris.

00:02:42.990 --> 00:02:44.910
I don't have any
of that experience.

00:02:44.910 --> 00:02:46.170
We just had this great idea.

00:02:46.170 --> 00:02:48.220
We knew what the problem
was we needed to fix.

00:02:48.220 --> 00:02:50.010
We needed to fix the presence.

00:02:50.010 --> 00:02:52.390
But we didn't have the
telecoms experience.

00:02:52.390 --> 00:02:54.880
And it was just the
right time, WebRTC,

00:02:54.880 --> 00:02:57.270
we started on this about a
year and a half ago, WebRTC

00:02:57.270 --> 00:03:00.824
was just getting to a point
of maybe production ready.

00:03:00.824 --> 00:03:02.990
I'd say we were probably
one of the first production

00:03:02.990 --> 00:03:07.400
apps charging for
WebRTC functionality.

00:03:07.400 --> 00:03:09.570
We built our first
prototype in Flash.

00:03:09.570 --> 00:03:11.701
It was RTMFP.

00:03:11.701 --> 00:03:13.200
We took it to the
launch conference.

00:03:13.200 --> 00:03:14.491
Showed it to a bunch of people.

00:03:14.491 --> 00:03:17.710
Tried to get feedback as you
do like Lean Startup style.

00:03:17.710 --> 00:03:21.050
And the feedback was OK.

00:03:21.050 --> 00:03:22.727
People liked the idea.

00:03:22.727 --> 00:03:23.560
They like the thing.

00:03:23.560 --> 00:03:26.190
But the quality, they were
like, this isn't going to be OK.

00:03:26.190 --> 00:03:28.070
Flash just does not
have the quality.

00:03:28.070 --> 00:03:29.653
If you're going to
use this, if you're

00:03:29.653 --> 00:03:32.499
going to compete with Skype
or any of these other video

00:03:32.499 --> 00:03:34.040
VOIP tools, then
you're going to need

00:03:34.040 --> 00:03:36.220
to have really,
really killer quality.

00:03:36.220 --> 00:03:40.356
And at that point, we knew Flash
just wasn't going to cut it.

00:03:40.356 --> 00:03:41.980
Also you'd have to
use Adobe AIR if you

00:03:41.980 --> 00:03:43.430
wanted to do desktop and ugh.

00:03:43.430 --> 00:03:47.560
So we pretty quickly
went off that idea.

00:03:47.560 --> 00:03:50.030
Obviously, WebRTC cross
platform, cross browser.

00:03:50.030 --> 00:03:53.780
If we want to have an iPad app,
an Android app, desktop apps,

00:03:53.780 --> 00:03:55.570
across all the web
browsers, it really

00:03:55.570 --> 00:03:58.360
is the clear choice
at this point.

00:03:58.360 --> 00:04:00.190
And it's very high quality.

00:04:00.190 --> 00:04:01.290
You get a lot for free.

00:04:01.290 --> 00:04:03.850
You get the Opus
Audio Codec in there.

00:04:03.850 --> 00:04:07.850
You get great security, like
world leading security on it.

00:04:07.850 --> 00:04:10.100
And this is all accessible
through the JavaScript API.

00:04:10.100 --> 00:04:15.769
So for our team it really
made a lot of sense.

00:04:15.769 --> 00:04:18.060
So at that point, we have to
choose, do we roll our own

00:04:18.060 --> 00:04:20.204
or do we use one of
the existing providers?

00:04:20.204 --> 00:04:21.870
So at that point, a
year and a half ago,

00:04:21.870 --> 00:04:24.740
there wasn't really much in
the way of existing providers.

00:04:24.740 --> 00:04:30.460
Top Box had just about come
out with their WebRTC solution.

00:04:30.460 --> 00:04:33.510
And yeah, so we have
to make that choice.

00:04:33.510 --> 00:04:35.422
And we chose, we were a startup.

00:04:35.422 --> 00:04:37.380
This video was going to
be our core competency,

00:04:37.380 --> 00:04:39.213
we should have our core
competency in house.

00:04:39.213 --> 00:04:42.000
So we decided to roll
our own solution.

00:04:42.000 --> 00:04:44.751
And I've already put enough--
we had enough frustrations just

00:04:44.751 --> 00:04:46.000
with the technology as it was.

00:04:46.000 --> 00:04:46.999
Because it was so early.

00:04:46.999 --> 00:04:50.250
So we didn't want to introduce
another third party in there

00:04:50.250 --> 00:04:52.840
that would delay if there
was a bug or something.

00:04:52.840 --> 00:04:54.840
At least if it was a
bug it would be our bug.

00:04:54.840 --> 00:04:56.760
And we could jump
on it and fix it

00:04:56.760 --> 00:04:59.220
instead of having to
wait for somebody else.

00:04:59.220 --> 00:05:03.250
So we went and we
rolled our own version.

00:05:03.250 --> 00:05:05.710
Of course it wasn't
without its hurdles.

00:05:05.710 --> 00:05:08.977
In the early days, lots of
bugs, lots of API changes.

00:05:08.977 --> 00:05:11.310
Performance issues, particularly
with the video encoding

00:05:11.310 --> 00:05:13.360
were pretty terrible
in the early days.

00:05:13.360 --> 00:05:15.590
You could get one video
on the screen at once.

00:05:15.590 --> 00:05:17.340
If you tried to put
two or three on there,

00:05:17.340 --> 00:05:19.930
your CPU or your
laptop would just melt.

00:05:19.930 --> 00:05:21.150
It really couldn't handle it.

00:05:21.150 --> 00:05:23.185
But that's improved a lot.

00:05:23.185 --> 00:05:25.310
The echo cancellation, our
first production version

00:05:25.310 --> 00:05:28.220
that we charged for, the echo
cancellation was nonexistent.

00:05:28.220 --> 00:05:30.790
We just had to tell everybody
to put headphones in.

00:05:30.790 --> 00:05:33.144
And we still got
paying customers.

00:05:33.144 --> 00:05:35.560
And we also couldn't tell them
how to change their camera.

00:05:35.560 --> 00:05:37.370
Because that API
didn't exist either.

00:05:37.370 --> 00:05:39.517
But these are all problems
that you just-- this

00:05:39.517 --> 00:05:41.100
is what happens when
your early doors.

00:05:41.100 --> 00:05:43.391
It's got a lot, lot better
in the last year and a half.

00:05:43.391 --> 00:05:47.164
It's amazing how far it's come.

00:05:47.164 --> 00:05:49.330
So I'll tell you a little
bit about the architecture

00:05:49.330 --> 00:05:50.740
of Sqwiggle.

00:05:50.740 --> 00:05:53.360
Like I say, I've got a little
bit of imposter syndrome here.

00:05:53.360 --> 00:05:56.510
Because we're all web
developer backgrounds.

00:05:56.510 --> 00:05:58.150
We don't have
telecom backgrounds.

00:05:58.150 --> 00:06:00.149
So this is kind of how a
bunch of web developers

00:06:00.149 --> 00:06:03.320
go and build a
communication service.

00:06:03.320 --> 00:06:05.070
We have, its a pretty
standard setup.

00:06:05.070 --> 00:06:08.720
We have a rails API
socially it's public.

00:06:08.720 --> 00:06:10.170
We let our customers access it.

00:06:10.170 --> 00:06:15.060
We give them access tokens and
whatnot, which runs on rails.

00:06:15.060 --> 00:06:17.440
And we have app.sqwiggle.com.

00:06:17.440 --> 00:06:19.970
That's where we have a very
simple Node.js application.

00:06:19.970 --> 00:06:22.330
It pretty much just
serves up static assets.

00:06:22.330 --> 00:06:24.980
Every single one of our
clients uses the public API.

00:06:24.980 --> 00:06:28.960
So that's is nothing
really there to be honest.

00:06:28.960 --> 00:06:32.800
It's initially just
hosting an index HTML.

00:06:32.800 --> 00:06:33.960
So that's not interesting.

00:06:33.960 --> 00:06:35.400
And then we have
our main website,

00:06:35.400 --> 00:06:38.340
which has account
management, sign up,

00:06:38.340 --> 00:06:39.780
all this type of stuff.

00:06:39.780 --> 00:06:41.090
That is where everything began.

00:06:41.090 --> 00:06:43.090
How it starts, everything
is in one application.

00:06:43.090 --> 00:06:46.730
And then we just gradually
being unbundling over time.

00:06:46.730 --> 00:06:48.200
And we also have a desktop app.

00:06:48.200 --> 00:06:50.930
So for the desktop app, we used
a project called Node-Webkit

00:06:50.930 --> 00:06:53.780
I don't know if any of you here
have heard of that project.

00:06:53.780 --> 00:06:57.100
Basically it wraps a WebKit
process and a Node process

00:06:57.100 --> 00:06:58.000
into one.

00:06:58.000 --> 00:07:01.450
So you can access Node
functions from within a WebKit.

00:07:01.450 --> 00:07:02.810
And so you have a browser.

00:07:02.810 --> 00:07:04.850
And you can access
the file system.

00:07:04.850 --> 00:07:07.420
And then it puts that inside
of a desktop application

00:07:07.420 --> 00:07:09.220
rappa that's cross platform.

00:07:09.220 --> 00:07:10.740
So we can have a
desktop application

00:07:10.740 --> 00:07:12.073
that is actually running WebKit.

00:07:12.073 --> 00:07:15.220
And we can do native things
like we pause the music.

00:07:15.220 --> 00:07:17.527
It pulls your music
player when one

00:07:17.527 --> 00:07:19.110
of those instant
video calls comes in.

00:07:19.110 --> 00:07:21.555
So it's just whoa,
there is somebody there.

00:07:21.555 --> 00:07:25.850
It let's us do auto updating,
real desktop notifications,

00:07:25.850 --> 00:07:27.140
all that type of thing.

00:07:27.140 --> 00:07:29.420
So that's been a real lifesaver.

00:07:29.420 --> 00:07:30.260
WebKit is great.

00:07:30.260 --> 00:07:33.130
This also has a project called
[? Athim, ?] [? Athim ?] Core,

00:07:33.130 --> 00:07:35.260
which is very, very similar.

00:07:35.260 --> 00:07:36.760
So if you're a web
developer looking

00:07:36.760 --> 00:07:39.460
too desktop applications,
that works well.

00:07:39.460 --> 00:07:41.820
For the signaling
stuff, we kind of

00:07:41.820 --> 00:07:43.680
managed to pretty
much avoid everything

00:07:43.680 --> 00:07:46.797
Alex was talking about just
by using a pass provider.

00:07:46.797 --> 00:07:49.130
Just for the early days to
get things scaled up quickly.

00:07:49.130 --> 00:07:50.440
So we use Pusher.

00:07:50.440 --> 00:07:52.960
And Pusher handles
all our web sockets

00:07:52.960 --> 00:07:55.170
and all the presence across
channels at this point.

00:07:55.170 --> 00:07:57.420
And we also developed
a little gem internally

00:07:57.420 --> 00:08:00.380
called Switchboard that let's us
very easily send the real- time

00:08:00.380 --> 00:08:02.980
messages to different
pass providers

00:08:02.980 --> 00:08:06.160
or our own internal
systems if we want to.

00:08:06.160 --> 00:08:08.090
We've used that when
changing between versions

00:08:08.090 --> 00:08:10.640
of Sqwiggle and things.

00:08:10.640 --> 00:08:13.960
So that's like a
high level overview.

00:08:13.960 --> 00:08:15.660
For TURN, we did the same thing.

00:08:15.660 --> 00:08:17.360
We have a domain
turn.sqwiggle.com.

00:08:17.360 --> 00:08:18.860
If you hit that up,
it will give you

00:08:18.860 --> 00:08:21.100
like you're closest
geographically located TURN

00:08:21.100 --> 00:08:22.710
server.

00:08:22.710 --> 00:08:24.200
We use Route 53 for that.

00:08:24.200 --> 00:08:28.570
Route 50 Amazon's DNS server
has the latency stuff built in.

00:08:28.570 --> 00:08:30.500
It's really great.

00:08:30.500 --> 00:08:33.419
And we use the
rfc-5766-turn-server,

00:08:33.419 --> 00:08:35.110
which I think most people use.

00:08:35.110 --> 00:08:36.690
It's very solid.

00:08:36.690 --> 00:08:39.440
And we have these hosted on
Digital Ocean instead of Amazon

00:08:39.440 --> 00:08:40.159
actually.

00:08:40.159 --> 00:08:43.179
We found that the
bandwidth is more than

00:08:43.179 --> 00:08:46.531
sufficient across many
little digital ocean boxes.

00:08:46.531 --> 00:08:48.780
And we have those in all of
Digital Ocean's locations.

00:08:48.780 --> 00:08:51.180
So I think that's four
now, Singapore, Amsterdam,

00:08:51.180 --> 00:08:54.340
New York, and here.

00:08:54.340 --> 00:08:56.300
So that's been fairly
easy to be honest,

00:08:56.300 --> 00:09:00.260
the TURN side of things in
a very basic implementation.

00:09:02.890 --> 00:09:04.640
And you may seen, I'm
not sure if I had it

00:09:04.640 --> 00:09:06.341
on when I showed the demo.

00:09:06.341 --> 00:09:07.590
So we have the present system.

00:09:07.590 --> 00:09:09.260
You could see everybody there.

00:09:09.260 --> 00:09:11.840
And the way that's done
is we use getUserMedia.

00:09:11.840 --> 00:09:13.260
We capture the camera.

00:09:13.260 --> 00:09:15.680
We chuck it into a canvas.

00:09:15.680 --> 00:09:16.630
We do that.

00:09:16.630 --> 00:09:17.880
It's kind of intelligent.

00:09:17.880 --> 00:09:19.480
It's usually about
every 15 seconds.

00:09:19.480 --> 00:09:21.229
But it goes up to a
minute, three minutes.

00:09:21.229 --> 00:09:24.310
If there's just an empty chair
there, we don't take a picture.

00:09:24.310 --> 00:09:25.310
Well, we take a picture.

00:09:25.310 --> 00:09:27.870
But then we don't send it.

00:09:27.870 --> 00:09:30.300
And then on canvas, we can
do all sorts of filters.

00:09:30.300 --> 00:09:34.328
We filter people for
privacy and things like.

00:09:34.328 --> 00:09:35.953
As we have this
honeycomb filter so you

00:09:35.953 --> 00:09:36.880
can see if someone's there.

00:09:36.880 --> 00:09:38.380
But you can't see
if they're picking

00:09:38.380 --> 00:09:42.310
their nose, which a
lot of people like.

00:09:42.310 --> 00:09:44.430
And then we base 64
and code the image

00:09:44.430 --> 00:09:46.030
and shoot it over web sockets.

00:09:46.030 --> 00:09:48.440
So all of that, there's
just thousands and thousands

00:09:48.440 --> 00:09:50.710
of web socket
messages going there.

00:09:50.710 --> 00:09:52.320
And the quality comes
out really well.

00:09:52.320 --> 00:09:54.080
It's amazing what you
could fit in 10 KB

00:09:54.080 --> 00:09:56.930
when you use WebP,
which is what we use.

00:09:56.930 --> 00:10:01.600
We've used Google
throughout the stack really.

00:10:01.600 --> 00:10:03.100
And the chat is the same.

00:10:03.100 --> 00:10:06.050
It's all over web sockets
with a rails back end.

00:10:06.050 --> 00:10:09.579
So I won't go into
much detail here.

00:10:09.579 --> 00:10:11.120
Because I think it's
fairly standard.

00:10:11.120 --> 00:10:13.211
And if you've
implemented this before,

00:10:13.211 --> 00:10:14.710
you'll kind of know
what's going on.

00:10:14.710 --> 00:10:18.660
But just a high level
overview of our signaling.

00:10:18.660 --> 00:10:22.867
So when you click on someone, it
does a post request to our API.

00:10:22.867 --> 00:10:25.450
The API knows the current state
of the user, the current state

00:10:25.450 --> 00:10:27.075
of all the conversations
in the system.

00:10:27.075 --> 00:10:29.380
Obviously, we write a
record to the database

00:10:29.380 --> 00:10:32.290
to say this
conversation started.

00:10:32.290 --> 00:10:35.374
And then it shoots that back
to the client over web sockets.

00:10:35.374 --> 00:10:37.165
with the current state
of the conversation.

00:10:37.165 --> 00:10:39.665
So it says, hey, Tom and Eric
are now talking to each other.

00:10:39.665 --> 00:10:41.620
That goes to everybody
in the organization.

00:10:41.620 --> 00:10:43.630
Analysis update
so that everybody

00:10:43.630 --> 00:10:46.277
to see who's talking to
who even if they're not

00:10:46.277 --> 00:10:48.610
in the conversation, which
is really nice from a company

00:10:48.610 --> 00:10:50.420
transparency point of view.

00:10:50.420 --> 00:10:53.064
It let's you jump into
conversations just

00:10:53.064 --> 00:10:54.230
like you would in an office.

00:10:54.230 --> 00:10:57.270
You'd see that two people were
talking to each other, right?

00:10:57.270 --> 00:11:00.570
So that was kind of
the idea behind that.

00:11:00.570 --> 00:11:03.182
And then from that point, the
clients that are involved,

00:11:03.182 --> 00:11:04.140
they know their own ID.

00:11:04.140 --> 00:11:05.973
They know they're
involved on the front end.

00:11:05.973 --> 00:11:08.640
They initiate the standard
offer/answer hand shake.

00:11:08.640 --> 00:11:11.490
This is all done over web
sockets pretty much directly.

00:11:11.490 --> 00:11:13.139
It goes via pusher.

00:11:13.139 --> 00:11:14.930
I've missed that out
of these diagrams just

00:11:14.930 --> 00:11:17.910
for clarity's sake.

00:11:17.910 --> 00:11:20.404
So yeah, you do the
offer the answer.

00:11:20.404 --> 00:11:22.670
And then ice candidates
is sent an array.

00:11:22.670 --> 00:11:25.100
We throttle that to every 100
milliseconds or something.

00:11:25.100 --> 00:11:28.530
Otherwise, every time you get a
nice candidate from the WebRTC

00:11:28.530 --> 00:11:30.200
stack, it would send
a single message.

00:11:30.200 --> 00:11:31.840
And there'd be hundreds.

00:11:31.840 --> 00:11:35.320
So it ends up like three or
four ice trickle messages there.

00:11:38.930 --> 00:11:40.760
And where are we up to?

00:11:40.760 --> 00:11:41.260
Yes.

00:11:41.260 --> 00:11:43.700
So well, once you got the
trickle set up, that's it.

00:11:43.700 --> 00:11:45.750
Offer, answer, ice candidates.

00:11:45.750 --> 00:11:47.760
In theory the media
connection is created.

00:11:47.760 --> 00:11:49.309
It might go via
our TURN servers.

00:11:49.309 --> 00:11:49.850
It might not.

00:11:49.850 --> 00:11:51.960
It might be direct.

00:11:51.960 --> 00:11:54.830
And you should have the video
connection at that point.

00:11:54.830 --> 00:11:56.880
When you want to
end a conversation,

00:11:56.880 --> 00:11:59.230
you just do a delete
request to our API.

00:11:59.230 --> 00:12:03.010
And it will, again, the
API will figure out,

00:12:03.010 --> 00:12:06.030
it knows how many people
are in the conversation

00:12:06.030 --> 00:12:07.547
or if to just throw
you out of it.

00:12:07.547 --> 00:12:09.630
And then sends an updated
packet down to everybody

00:12:09.630 --> 00:12:12.230
in the organization so
that we can update the UI.

00:12:12.230 --> 00:12:15.585
And say, this
conversation's finished

00:12:15.585 --> 00:12:16.730
and that type of thing.

00:12:16.730 --> 00:12:19.280
And then anybody was involved
will do another post request

00:12:19.280 --> 00:12:22.890
to the server with
just a massive JSON

00:12:22.890 --> 00:12:26.310
hash of all of the information
that we could get out

00:12:26.310 --> 00:12:28.322
of the get stats
method basically plus

00:12:28.322 --> 00:12:29.280
a bunch of other stuff.

00:12:29.280 --> 00:12:34.440
So we just store a big JSON hash
of what the packet loss was.

00:12:34.440 --> 00:12:35.520
What did video connect?

00:12:35.520 --> 00:12:36.270
Did audio connect?

00:12:36.270 --> 00:12:38.450
What echo cancellation
details were there?

00:12:38.450 --> 00:12:40.210
And then we can go
through that later.

00:12:40.210 --> 00:12:43.426
And we graph things like average
packet loss across the servers,

00:12:43.426 --> 00:12:45.300
across the TURN servers
and things like this.

00:12:45.300 --> 00:12:49.230
And it lets you easily
find out problems

00:12:49.230 --> 00:12:53.420
before they get too big.

00:12:53.420 --> 00:12:55.350
So that's kind of our
current architecture.

00:12:55.350 --> 00:12:59.100
So as you saw, we have
this big grid of faces.

00:12:59.100 --> 00:13:00.810
And at the minute,
it's all peer to peer,

00:13:00.810 --> 00:13:04.182
which is kind of sucky.

00:13:04.182 --> 00:13:05.390
I can't remember who said it.

00:13:05.390 --> 00:13:07.330
But one of these
guys said, you start

00:13:07.330 --> 00:13:09.880
to lose messages and
things like this.

00:13:09.880 --> 00:13:13.790
And everything has to be done
in a very, very specific order

00:13:13.790 --> 00:13:16.530
because of the way
that WebRTC is set up.

00:13:16.530 --> 00:13:20.260
So when you have three,
four connections,

00:13:20.260 --> 00:13:22.440
you're encoding three
or four videos as well.

00:13:22.440 --> 00:13:26.000
So the front and starts to
lag down in terms of CPU

00:13:26.000 --> 00:13:27.620
and things like this.

00:13:27.620 --> 00:13:30.340
So you really don't
want to be doing peer

00:13:30.340 --> 00:13:32.362
to peer when you have
more than one on one.

00:13:32.362 --> 00:13:33.820
And that's just
something we've had

00:13:33.820 --> 00:13:36.890
to do up until now just
in terms of resources.

00:13:36.890 --> 00:13:40.070
But we've been building our
own multi-point control unit

00:13:40.070 --> 00:13:43.340
architecture, which we're
halfway through at the moment.

00:13:43.340 --> 00:13:44.980
So this isn't going
to be as detailed.

00:13:44.980 --> 00:13:47.620
I'll give you a high level
of what we're doing there.

00:13:47.620 --> 00:13:50.570
Because I think it's the
more interesting part.

00:13:50.570 --> 00:13:57.920
So we have a C gateway, which is
wrapped in a Golang interface.

00:13:57.920 --> 00:14:01.130
So actually what we have is
on each server, on each box,

00:14:01.130 --> 00:14:03.220
it has multiple
gateway processes.

00:14:03.220 --> 00:14:04.920
And then all of those
gateway processes

00:14:04.920 --> 00:14:09.840
are controlled by a
single Golang process.

00:14:09.840 --> 00:14:14.150
And that basically it
lets one of them go down.

00:14:14.150 --> 00:14:16.200
It gives you a little
bit more leeway

00:14:16.200 --> 00:14:17.845
if there is a problem there.

00:14:17.845 --> 00:14:20.590
And then we use
RabbitMQ to communicate

00:14:20.590 --> 00:14:25.700
between the multi-point
control unit and our own API.

00:14:25.700 --> 00:14:31.680
And then the API basically just
chooses which of the hardware

00:14:31.680 --> 00:14:34.127
MCUs the messages go to.

00:14:34.127 --> 00:14:36.210
So it looks like a little
bit something like this.

00:14:36.210 --> 00:14:38.480
If you have a post
request again,

00:14:38.480 --> 00:14:42.050
but this time we send an STP
offer with the post request.

00:14:42.050 --> 00:14:43.570
And I haven't put
the JSON on here.

00:14:43.570 --> 00:14:47.660
Because, in all honesty,
we're still figuring it out.

00:14:47.660 --> 00:14:50.310
So you send the
JSON offer with it.

00:14:50.310 --> 00:14:56.080
The API knows, OK I have
x number of MCUs running.

00:14:56.080 --> 00:14:57.210
It knows the loads of them.

00:14:57.210 --> 00:14:58.730
It knows which
ones are available.

00:14:58.730 --> 00:15:04.280
And it sends it to the most
appropriate MCU over RabbitMQ.

00:15:04.280 --> 00:15:08.000
And then on the MCU user end
when it receives that message,

00:15:08.000 --> 00:15:09.200
it creates a video room.

00:15:09.200 --> 00:15:11.770
It publishes the user
to it with the SDP

00:15:11.770 --> 00:15:13.610
and generates an
answer, response,

00:15:13.610 --> 00:15:16.280
which is sent over
RabbitAQ, back to the API.

00:15:16.280 --> 00:15:19.205
And then back over web
sockets down to the client.

00:15:19.205 --> 00:15:21.080
So you've got the offer
and the answer there.

00:15:21.080 --> 00:15:22.913
And at that point, you
publishing your media

00:15:22.913 --> 00:15:24.260
to the server.

00:15:24.260 --> 00:15:27.297
So you have to do that once
with the MCU architecture.

00:15:27.297 --> 00:15:29.970
And then when
another client joins,

00:15:29.970 --> 00:15:32.470
they do a PUT request to
that conversation to say,

00:15:32.470 --> 00:15:36.700
I've updated my offer.

00:15:36.700 --> 00:15:37.920
They do they offer, answer.

00:15:37.920 --> 00:15:38.961
And it's a similar thing.

00:15:38.961 --> 00:15:41.780
But except at this
time, they also get

00:15:41.780 --> 00:15:43.420
offers for all of
the people that

00:15:43.420 --> 00:15:45.190
are publishing to the
server so that they

00:15:45.190 --> 00:15:48.305
can send an answer
back and do the stream

00:15:48.305 --> 00:15:49.180
the other way around.

00:15:49.180 --> 00:15:51.010
So you end up with
one stream going up

00:15:51.010 --> 00:15:53.490
and n number of streams
coming back down,

00:15:53.490 --> 00:15:55.820
which is much more
efficient obviously.

00:15:55.820 --> 00:15:58.860
And it's a lot easier
on the client too.

00:15:58.860 --> 00:16:01.730
So unfortunately, I don't
have a lot of detail on this.

00:16:01.730 --> 00:16:03.960
Because we're literally,
probably those guys

00:16:03.960 --> 00:16:05.750
are literally programming
it as we speak.

00:16:05.750 --> 00:16:08.000
But I could probably answer
questions if you have any.

00:16:11.350 --> 00:16:14.080
And that's pretty much
how Sqwiggle is built.

00:16:14.080 --> 00:16:15.540
And I don't know
how long that was.

00:16:15.540 --> 00:16:17.890
It was probably
about five minutes.

00:16:17.890 --> 00:16:19.440
[APPLAUSE]

