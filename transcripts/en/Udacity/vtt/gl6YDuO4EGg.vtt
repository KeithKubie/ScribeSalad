WEBVTT
Kind: captions
Language: en

00:00:00.230 --> 00:00:03.030
We've looked at templates,
the visual side of an application.

00:00:03.030 --> 00:00:05.080
And modules, a container that houses and

00:00:05.080 --> 00:00:08.090
encapsulates the different
components of an application.

00:00:08.090 --> 00:00:09.810
Now it's time to add in controllers.

00:00:09.810 --> 00:00:12.580
This is where we really start
to see Angular coming together.

00:00:12.580 --> 00:00:14.280
But first time to play
with some more toys.

00:00:16.160 --> 00:00:18.380
Every Lego model can
be put on display but

00:00:18.380 --> 00:00:20.300
not all of them actually do anything.

00:00:20.300 --> 00:00:22.640
This LEGO car has wheels and
it can move.

00:00:22.640 --> 00:00:23.890
It's not just for show.

00:00:23.890 --> 00:00:26.542
The power of single page apps is
that you can interact with them.

00:00:26.542 --> 00:00:30.800
Angular controllers gives us
the ability to provide both data and

00:00:30.800 --> 00:00:32.930
functionality to an app's templates.

00:00:32.930 --> 00:00:34.700
Let's add some data to our apps.

00:00:34.700 --> 00:00:37.320
We can use Yoman to
generate the files we need.

00:00:37.320 --> 00:00:38.550
Let's make the controller first.

00:00:40.860 --> 00:00:43.580
We need the yo
angular:controller command.

00:00:43.580 --> 00:00:45.320
And let's create
a controller named menu.

00:00:46.630 --> 00:00:49.020
This creates a menu file in
the controllers directory.

00:00:50.390 --> 00:00:54.100
It also updates the index file
to include this new controller.

00:00:54.100 --> 00:00:55.340
While we're setting up our app,

00:00:55.340 --> 00:00:57.710
I want this project to
start with a clean slate.

00:00:57.710 --> 00:01:01.250
Let's remove this default main file
here, in the controller folder.

00:01:07.672 --> 00:01:09.010
And in the view folder.

00:01:13.980 --> 00:01:17.880
Now in our new menu controller let's
delete the functions default content.

00:01:19.280 --> 00:01:21.960
A controller just like the other
components in angular lives

00:01:21.960 --> 00:01:23.720
inside of a module.

00:01:23.720 --> 00:01:25.290
The modules already been created.

00:01:25.290 --> 00:01:28.380
So we get it and
add the controller to it.

00:01:28.380 --> 00:01:31.330
To actually create a controller
use angular's controller method.

00:01:31.330 --> 00:01:34.270
The name of the controller comes
first and then the function.

00:01:34.270 --> 00:01:36.600
A controller is a constructor function.

00:01:36.600 --> 00:01:40.239
Properties of the constructed object
can be used as variables in templates.

00:01:41.670 --> 00:01:46.393
let's add properties for
an ID, a name, an image,

00:01:46.393 --> 00:01:50.221
and a rating and i'll use these values.

00:01:50.221 --> 00:01:54.812
We've added properties to the controller
and the controller to the module.

00:01:54.812 --> 00:01:58.460
So Angular knows about our controller,
how to create it and

00:01:58.460 --> 00:02:00.650
the data to use when creating it.

00:02:00.650 --> 00:02:02.960
Let's add this controller
to the template, but

00:02:02.960 --> 00:02:04.510
first we actually need a template.

00:02:07.208 --> 00:02:09.680
Let's run yo angular view menu

00:02:09.680 --> 00:02:12.700
to generate an HTML template
with the name menu.

00:02:12.700 --> 00:02:15.100
The generator creates our
template in the view's directory.

00:02:16.120 --> 00:02:18.790
Now that we have our template
we can add it to the page.

00:02:18.790 --> 00:02:22.120
This line is left over from
the main file we deleted.

00:02:22.120 --> 00:02:23.649
Let's update it to use our menu files.

00:02:24.790 --> 00:02:28.220
We can swap out main here for menu and

00:02:28.220 --> 00:02:32.260
main controller we can replace
with menu controller as menu.

00:02:35.350 --> 00:02:39.450
Just like we use that strange ng app
attribute called a directive to add

00:02:39.450 --> 00:02:41.460
a module to the page.

00:02:41.460 --> 00:02:44.830
We need to use this directive
to include our new template.

00:02:44.830 --> 00:02:48.900
The directive to load the controller is,
ng dash controller.

00:02:48.900 --> 00:02:51.930
Then we pass it the name of
the controller we want, menu controller.

00:02:51.930 --> 00:02:54.780
And the variable name to use for
instantiation.

00:02:54.780 --> 00:02:55.630
Menu.

00:02:55.630 --> 00:02:57.740
I promise we'll look at
directives very soon.

00:02:58.830 --> 00:03:01.880
Refreshing the page shows
us the templates contents.

00:03:01.880 --> 00:03:04.970
Not very exciting, right, let's update
the template to include our data.

00:03:07.190 --> 00:03:10.450
Here's what the generator gives
us by default for our template.

00:03:10.450 --> 00:03:12.370
And here's the structure I want.

00:03:12.370 --> 00:03:16.410
With the HTML structure set,
we need to add in the dynamic content.

00:03:16.410 --> 00:03:20.160
Remember that dynamic content
needs to go inside an expression.

00:03:20.160 --> 00:03:22.360
For the heading we want
the menu item's name.

00:03:22.360 --> 00:03:25.530
So that's menu.name.

00:03:25.530 --> 00:03:28.410
Remember, menu here comes from
the ng-controller attribute

00:03:28.410 --> 00:03:31.320
which creates an instance of
the controller and names it menu.

00:03:32.440 --> 00:03:34.740
Adding the rest of the information
gives us this final template.

00:03:36.120 --> 00:03:39.870
On a side note, we're not adding the
items image with an image tag just yet.

00:03:39.870 --> 00:03:40.720
We'll fix this in a bit.

00:03:42.040 --> 00:03:43.270
And here's our app.

00:03:43.270 --> 00:03:46.280
Notice that our templates receiving
its data from the controller, and

00:03:46.280 --> 00:03:48.210
everything's displaying correctly.

00:03:48.210 --> 00:03:48.990
Awesome.

00:03:48.990 --> 00:03:51.450
What do you think about
what we've learned so far?

00:03:51.450 --> 00:03:53.990
You now should have a good understanding
that a controller provides

00:03:53.990 --> 00:03:55.910
the initial state for a template.

00:03:55.910 --> 00:03:58.110
And how to use expressions
to display that information.

