WEBVTT
Kind: captions
Language: en

00:00:00.240 --> 00:00:03.290
Now let's discuss
defenses against malware.

00:00:03.290 --> 00:00:06.490
We will discuss intrusion
detection in another lecture.

00:00:06.490 --> 00:00:09.390
Here, we want to focus
on Malware Analysis.

00:00:09.390 --> 00:00:13.960
Malware analysis produces information
about a malware that can be used for

00:00:13.960 --> 00:00:16.450
detection and response to malware.

00:00:16.450 --> 00:00:19.160
There are 2 typical approaches
to malware analysis.

00:00:19.160 --> 00:00:21.496
The first one is Static Analysis.

00:00:21.496 --> 00:00:25.640
In Static Analysis, we look at
the program or the insertion set of

00:00:25.640 --> 00:00:30.390
the malware in order to understand what
the malware would do if it is executed.

00:00:30.390 --> 00:00:33.440
That is we want to understand what
the malware can do without actually

00:00:33.440 --> 00:00:35.470
executing the malware.

00:00:35.470 --> 00:00:39.420
There are limitations for Static
Analysis because some program behaviors,

00:00:39.420 --> 00:00:42.810
in particular those that depend
on runtime or user input data,

00:00:42.810 --> 00:00:46.430
for example conditions,
cannot be precisely

00:00:46.430 --> 00:00:50.220
identified by looking at
the source code or binary code.

00:00:50.220 --> 00:00:52.960
In addition,
malware code can be obfuscated.

00:00:52.960 --> 00:00:55.050
We will come back to this point later.

00:00:55.050 --> 00:00:57.350
Another approach is Dynamic Analysis.

00:00:57.350 --> 00:01:02.330
Here, we run the malware program and
try to analyze its runtime behavior

00:01:02.330 --> 00:01:07.010
to understand what the malware
is doing when it is executed.

00:01:07.010 --> 00:01:11.510
And we can perform dynamic analysis
in different level of granularities.

00:01:11.510 --> 00:01:15.630
For example, we can analyze the malware
execution instruction by instruction.

00:01:15.630 --> 00:01:17.170
That's very fine-grained.

00:01:17.170 --> 00:01:20.060
Or we can analyze the malware execution

00:01:20.060 --> 00:01:23.950
by looking at the system calls
that the malware invokes.

00:01:23.950 --> 00:01:28.975
So that's the so called system called
tracing, and that's coarse-grained.

00:01:28.975 --> 00:01:32.492
There are also limitations
in dynamic analysis, because

00:01:32.492 --> 00:01:37.190
any particular runs of the malware
only reveal behaviors of those runs.

00:01:37.190 --> 00:01:40.820
That is, dynamic analysis cannot
provide the complete picture

00:01:40.820 --> 00:01:42.570
of malware behaviors.

00:01:42.570 --> 00:01:47.200
In addition, malware can try to resist
analysis by delaying execution,

00:01:47.200 --> 00:01:50.130
input or trigger and so on.

00:01:50.130 --> 00:01:54.370
That is, in any particular run of the
malware, the condition may not be right,

00:01:54.370 --> 00:01:56.300
for so then triggers in the malware, and

00:01:56.300 --> 00:01:59.760
therefore, their part of
the behaviors may not be revealed.

00:01:59.760 --> 00:02:03.552
Even the limitations of both
approaches typically a malware

00:02:03.552 --> 00:02:05.980
system will try to
employ both approaches.

