WEBVTT
Kind: captions
Language: en

00:00:00.032 --> 00:00:01.240
MIKE FAIRHURST: Hi, everyone.

00:00:01.240 --> 00:00:02.950
I'm Mike Fairhurst.

00:00:02.950 --> 00:00:06.460
I've been working for a little
over a year on a analysis

00:00:06.460 --> 00:00:09.808
plugin for AngularDart.

00:00:09.808 --> 00:00:11.239
Let's see.

00:00:11.239 --> 00:00:13.680
And next-- there we go.

00:00:13.680 --> 00:00:17.660
So the analysis plugin is a
plugin to the Dart analysis

00:00:17.660 --> 00:00:20.870
server, which is a common
back end for all of the IDEs

00:00:20.870 --> 00:00:26.630
that are supported by the
Dart team and the community.

00:00:26.630 --> 00:00:28.580
So by plugging into
the analysis server,

00:00:28.580 --> 00:00:32.240
we're able to expose some of the
same language features, right

00:00:32.240 --> 00:00:34.150
in the IDE of your choice.

00:00:34.150 --> 00:00:37.250
This can include autocompletion
and things like that.

00:00:37.250 --> 00:00:39.180
The API that we're using is--

00:00:39.180 --> 00:00:42.530
we're the first user, so the API
may be a little bit unstable.

00:00:42.530 --> 00:00:45.950
But we are excited for other
potential uses of it as well.

00:00:45.950 --> 00:00:48.410
For our plugin, we are
fully open sourced.

00:00:48.410 --> 00:00:50.600
And so we're hoping that
people will see this demo,

00:00:50.600 --> 00:00:53.109
they will want to give it a
try, and give us feedback.

00:00:53.109 --> 00:00:54.900
Because we think it's
really, really great,

00:00:54.900 --> 00:00:57.525
and so we're hoping we can make
it part of the core AngularDart

00:00:57.525 --> 00:00:59.540
offering.

00:00:59.540 --> 00:01:02.960
So yes, it's static analysis,
so it catches your errors.

00:01:02.960 --> 00:01:06.240
But as a creator, I think it
is a little bit more than that.

00:01:06.240 --> 00:01:08.990
So it can actually serve as
a form of documentation which

00:01:08.990 --> 00:01:10.570
is right at your fingertips.

00:01:10.570 --> 00:01:13.040
So autocompletion is
like doing a Control F,

00:01:13.040 --> 00:01:15.440
except it's
context-aware, right?

00:01:15.440 --> 00:01:18.800
And more than simple lookups,
if we talk semantics,

00:01:18.800 --> 00:01:22.640
Angular templates have
some interesting rules

00:01:22.640 --> 00:01:25.700
you might not be aware of,
maybe you've never bumped into.

00:01:25.700 --> 00:01:27.550
This plugin's gonna
know all them.

00:01:27.550 --> 00:01:29.640
Its really hard to document
some of that behavior,

00:01:29.640 --> 00:01:32.360
so instead we can have it
right at your fingertips.

00:01:32.360 --> 00:01:34.610
If you trip one of
these corner cases,

00:01:34.610 --> 00:01:36.524
then it's going to
alert you right away.

00:01:36.524 --> 00:01:37.940
And we're hoping
that it gives you

00:01:37.940 --> 00:01:40.760
actionable feedback, or
at least googleable terms,

00:01:40.760 --> 00:01:44.540
so that you don't have
to go to Stack Overflow.

00:01:44.540 --> 00:01:45.980
And then, luckily,
AngularDart is

00:01:45.980 --> 00:01:48.140
a very, very static
framework, much more static

00:01:48.140 --> 00:01:50.210
than Angular JS.

00:01:50.210 --> 00:01:53.630
So we think that we can
catch a lot of your issues,

00:01:53.630 --> 00:01:55.490
though we do avoid
dependency injection.

00:01:55.490 --> 00:01:57.770
Because yeah, someone once
proved that it was NP-hard,

00:01:57.770 --> 00:02:00.740
so we didn't touch that.

00:02:00.740 --> 00:02:02.122
So I did have
technical problems,

00:02:02.122 --> 00:02:03.080
but I have slides here.

00:02:05.990 --> 00:02:08.090
That's what you get for
using Linux on a laptop.

00:02:08.090 --> 00:02:12.080
So this is basically just the
Angular Quickstart Project.

00:02:12.080 --> 00:02:14.750
I've made some additions
to break things

00:02:14.750 --> 00:02:17.456
so we can see how it
works in an invalid app.

00:02:17.456 --> 00:02:18.830
You can see all
of the errors are

00:02:18.830 --> 00:02:21.620
highlighted in red, which
is my little template

00:02:21.620 --> 00:02:24.570
on the right side.

00:02:24.570 --> 00:02:28.010
So we use Dart because we
want static type checking

00:02:28.010 --> 00:02:29.130
when it's available.

00:02:29.130 --> 00:02:32.450
So just the ability to find
this length misspelling,

00:02:32.450 --> 00:02:35.870
it's underlined in red,
you can see it instantly--

00:02:35.870 --> 00:02:38.725
super, super easy to fix.

00:02:38.725 --> 00:02:40.600
But it can catch more
complicated errors too.

00:02:40.600 --> 00:02:43.420
So it says here, you know, "that
bound [INAUDIBLE] keyrelease

00:02:43.420 --> 00:02:45.730
does not exist on
any directives."

00:02:45.730 --> 00:02:47.960
So the immediate question
is, what does exist?

00:02:47.960 --> 00:02:49.990
And maybe we would go to MDN.

00:02:49.990 --> 00:02:53.440
Maybe we would go to ask
our coworker, look at code

00:02:53.440 --> 00:02:54.970
we've written before.

00:02:54.970 --> 00:02:57.460
Well, now you can
just autocomplete.

00:02:57.460 --> 00:02:59.540
So you can instantly see just--

00:02:59.540 --> 00:03:02.620
[APPLAUSE]

00:03:05.080 --> 00:03:10.440
So you can instantly see that
it's key up, not keyrelease,

00:03:10.440 --> 00:03:12.770
and instantly fix it.

00:03:12.770 --> 00:03:16.830
Additionally, once you have
this event configured correctly,

00:03:16.830 --> 00:03:19.570
it's going to catch something
which I bet money none of you

00:03:19.570 --> 00:03:22.030
caught when I showed
the earlier slides.

00:03:22.030 --> 00:03:25.660
So the Angular plugin is
going to be smarter than you.

00:03:25.660 --> 00:03:28.810
It catches a mismatch in the
event variable type itself,

00:03:28.810 --> 00:03:31.010
something you never
write down yourself.

00:03:31.010 --> 00:03:33.010
But it's going to track
that through the program

00:03:33.010 --> 00:03:35.890
and say, your component defined
close window with a mouse

00:03:35.890 --> 00:03:38.380
event, but key up
was a keyboard event.

00:03:38.380 --> 00:03:41.120
You no longer have to run your
tests to find the failure.

00:03:41.120 --> 00:03:44.210
It's right there.

00:03:44.210 --> 00:03:45.924
It also catches
missing directives.

00:03:45.924 --> 00:03:48.340
A really, really critical thing
that happens all the time,

00:03:48.340 --> 00:03:50.260
people put in a behavior that
just doesn't do anything.

00:03:50.260 --> 00:03:52.180
Because you didn't
include the directive.

00:03:52.180 --> 00:03:56.480
And now it's super,
super easy to fix.

00:03:56.480 --> 00:03:59.050
And then many
AngularDart users here

00:03:59.050 --> 00:04:00.730
probably went quite
a while before ever

00:04:00.730 --> 00:04:02.740
learning about transclusions.

00:04:02.740 --> 00:04:06.530
So transclusions are defined
by this template down here.

00:04:06.530 --> 00:04:09.730
So it's actually going to be
in the template of a component

00:04:09.730 --> 00:04:12.400
that you're using in your own
template of your own component.

00:04:12.400 --> 00:04:14.080
And it's kind of
configured in a way

00:04:14.080 --> 00:04:17.226
that's great for writing a
component, but nothing else.

00:04:17.226 --> 00:04:18.850
You are always going
to be really lucky

00:04:18.850 --> 00:04:21.054
if someone documents the
way that this stuff works.

00:04:21.054 --> 00:04:23.470
And now you don't have to worry
about whether you're lucky

00:04:23.470 --> 00:04:23.970
or not.

00:04:23.970 --> 00:04:25.470
Because you can
just autocomplete,

00:04:25.470 --> 00:04:27.053
and the plugin itself
is going to know

00:04:27.053 --> 00:04:28.530
you're inside of a dialogue.

00:04:28.530 --> 00:04:30.790
It's going to know what
transclusion selectors are

00:04:30.790 --> 00:04:32.200
available, and it's
going to generate a HTML

00:04:32.200 --> 00:04:34.366
tags-- complete with
properties, in this case, which

00:04:34.366 --> 00:04:37.700
are required in order to
get you working productively

00:04:37.700 --> 00:04:38.200
right away.

00:04:40.870 --> 00:04:42.894
Yeah, so hopefully
everyone tries it out.

00:04:42.894 --> 00:04:44.560
Anyone who's using
AngularDart, you just

00:04:44.560 --> 00:04:47.519
have to add these four lines
to your analysis options.

00:04:47.519 --> 00:04:49.810
Restart your analysis server
and give it a few minutes.

00:04:49.810 --> 00:04:51.580
It's going to download
and it's going

00:04:51.580 --> 00:04:54.340
to use pub [? resolve ?]
dependencies and stuff

00:04:54.340 --> 00:04:55.117
like that.

00:04:55.117 --> 00:04:56.200
But yeah, we're on GitHub.

00:04:56.200 --> 00:05:01.120
So we hope you like it, and if
not, definitely let us know.

00:05:01.120 --> 00:05:04.900
File bugs and questions,
and you can email me.

00:05:04.900 --> 00:05:07.885
And then, best of
all, while I'm here,

00:05:07.885 --> 00:05:11.350
take some time, if you can, to
fire this up on your project.

00:05:11.350 --> 00:05:13.520
Some of its errors
may be confusing.

00:05:13.520 --> 00:05:15.250
I would love to help
you out with it,

00:05:15.250 --> 00:05:19.270
if you bring a laptop over, and
see what it catches for you,

00:05:19.270 --> 00:05:21.460
and go from there.

00:05:21.460 --> 00:05:22.060
Thanks.

00:05:22.060 --> 00:05:24.810
[APPLAUSE]

