WEBVTT
Kind: captions
Language: en

00:00:00.474 --> 00:00:02.140
WM LELER: Welcome to
The Developer Show.

00:00:02.140 --> 00:00:06.070
I'm Wm Leler, and we're here
in Los Angeles at DartConf.

00:00:06.070 --> 00:00:09.084
And we're talking
to Leaf Peterson.

00:00:09.084 --> 00:00:10.000
LEAF PETERSON: Thanks.

00:00:10.000 --> 00:00:12.910
So I work on the Dart language.

00:00:12.910 --> 00:00:14.770
I'm a developer
on the Dart team,

00:00:14.770 --> 00:00:17.360
and I work on a
combination of things.

00:00:17.360 --> 00:00:19.570
So I do a lot of
work on tooling.

00:00:19.570 --> 00:00:21.820
But these days, what
I'm mostly working on

00:00:21.820 --> 00:00:23.380
is the language
itself and thinking

00:00:23.380 --> 00:00:25.480
about how the
language and the tools

00:00:25.480 --> 00:00:27.790
can work together to
try and provide the best

00:00:27.790 --> 00:00:29.770
experience possible
to our developers

00:00:29.770 --> 00:00:32.434
and, therefore,
to our end users.

00:00:32.434 --> 00:00:33.850
WM LELER: So what
I'm hearing here

00:00:33.850 --> 00:00:37.510
is that Dart hits the sweet
spot between dynamic and static

00:00:37.510 --> 00:00:38.050
languages.

00:00:38.050 --> 00:00:40.417
Can you tell us about that?

00:00:40.417 --> 00:00:42.000
LEAF PETERSON: Sure,
I do think that's

00:00:42.000 --> 00:00:47.670
a strength of Dart is that
the type system in Dart

00:00:47.670 --> 00:00:51.480
incorporates both the
notion of dynamic typing

00:00:51.480 --> 00:00:54.480
and a very nice strong
static type system.

00:00:54.480 --> 00:00:59.736
So you can use code
in a very dynamic way

00:00:59.736 --> 00:01:01.360
and do a sort of duck
typing-like code.

00:01:01.360 --> 00:01:05.220
You can call arbitrary methods
on dynamically typed things,

00:01:05.220 --> 00:01:06.930
and it will just try
to do what it can.

00:01:06.930 --> 00:01:09.900
Or you can write your code in
a very tightly statically typed

00:01:09.900 --> 00:01:12.840
way and get very strong
error checking, and very good

00:01:12.840 --> 00:01:15.330
refactoring, and
good help from all

00:01:15.330 --> 00:01:17.889
of the IDEs and the tooling.

00:01:17.889 --> 00:01:19.680
WM LELER: So what about
development cycles?

00:01:19.680 --> 00:01:21.607
How will developers
be using Dart?

00:01:21.607 --> 00:01:22.440
LEAF PETERSON: Yeah.

00:01:22.440 --> 00:01:25.470
So one of the nice things
about Dart, I think,

00:01:25.470 --> 00:01:28.740
is that it provides some
of the best of both worlds

00:01:28.740 --> 00:01:33.270
of languages, like JavaScript
and Java, that are JIT compiled

00:01:33.270 --> 00:01:36.360
and so provides you a very
sort of fast turnaround

00:01:36.360 --> 00:01:38.430
with languages that
are ahead of time

00:01:38.430 --> 00:01:40.920
compiled that give
you very fast startup

00:01:40.920 --> 00:01:42.270
and fast native performance.

00:01:42.270 --> 00:01:45.900
So Dart supports both of
those modes on both the web

00:01:45.900 --> 00:01:47.200
and on native.

00:01:47.200 --> 00:01:49.800
So we have a fast
developer cycle

00:01:49.800 --> 00:01:51.960
in both places where you
get very fast turnaround.

00:01:51.960 --> 00:01:53.668
You make a change to
your code and, boom,

00:01:53.668 --> 00:01:54.720
things are right back up.

00:01:54.720 --> 00:01:56.640
But then when it
comes time to ship,

00:01:56.640 --> 00:01:59.700
you get a really aggressive
compiler that goes off and does

00:01:59.700 --> 00:02:02.140
a lot of chewing on your code
and spits out something--

00:02:02.140 --> 00:02:05.677
starts up really fast and
then executes very quickly.

00:02:05.677 --> 00:02:07.260
WM LELER: So can you
talk a little bit

00:02:07.260 --> 00:02:09.217
about the future of Dart?

00:02:09.217 --> 00:02:10.050
LEAF PETERSON: Yeah.

00:02:10.050 --> 00:02:13.380
So there's a lot of things that
we want to push on in Dart.

00:02:13.380 --> 00:02:15.569
We want to keep
making it faster.

00:02:15.569 --> 00:02:16.860
We want to make startup faster.

00:02:16.860 --> 00:02:19.190
We want to make
execution faster,

00:02:19.190 --> 00:02:22.330
while keeping all of these dev
cycle benefits that we have.

00:02:22.330 --> 00:02:24.870
But we also want to add
things to the language that

00:02:24.870 --> 00:02:27.450
make developers more
productive, and in particular,

00:02:27.450 --> 00:02:29.040
developers more
productive writing

00:02:29.040 --> 00:02:31.560
the kind of client-side
UI code that we

00:02:31.560 --> 00:02:32.890
see them writing all the time.

00:02:32.890 --> 00:02:35.220
So we're very interested
in looking at ways

00:02:35.220 --> 00:02:38.250
to reduce the
overhead of the syntax

00:02:38.250 --> 00:02:41.070
when you're doing something like
writing a Flutter application

00:02:41.070 --> 00:02:42.717
or an Angular application.

00:02:42.717 --> 00:02:43.800
WM LELER: Thank you, Leaf.

00:02:43.800 --> 00:02:45.880
This has been fascinating.

00:02:45.880 --> 00:02:48.050
And thank you for watching.

