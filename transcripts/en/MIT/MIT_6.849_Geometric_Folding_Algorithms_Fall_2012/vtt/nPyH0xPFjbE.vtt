WEBVTT
Kind: captions
Language: en

00:00:03.310 --> 00:00:07.320
PROFESSOR: All right, lecture
19 is about mostly refolding,

00:00:07.320 --> 00:00:11.330
common unfoldings of polyhedra,
convex polyhedra, and also

00:00:11.330 --> 00:00:12.840
about Mozartkugel.

00:00:12.840 --> 00:00:17.390
But most questions were
about the common unfolding

00:00:17.390 --> 00:00:20.280
stuff, so let me
start with that.

00:00:20.280 --> 00:00:23.330
First question-- is
this fractal unfolding

00:00:23.330 --> 00:00:27.150
of regular tetrahedron
and the cube,

00:00:27.150 --> 00:00:33.350
which looks like
this-- is it resolved?

00:00:33.350 --> 00:00:36.230
The answer is no, but it
is at least published now.

00:00:36.230 --> 00:00:38.500
This is at EuroCG.

00:00:38.500 --> 00:00:40.970
One of the authors is
here, Ryuhei Uehara.

00:00:40.970 --> 00:00:45.740
And it's still
conjecture, although there

00:00:45.740 --> 00:00:47.465
is a way to explicitly
construct this.

00:00:47.465 --> 00:00:49.820
This does actually
fold into two things.

00:00:49.820 --> 00:00:53.270
It folds into a cube and a
tetramonohedron, a tetrahedron

00:00:53.270 --> 00:00:55.110
with equal sides.

00:00:55.110 --> 00:00:58.270
It's not a regular
tetrahedron, though,

00:00:58.270 --> 00:01:02.130
but this is actually
an unfolding.

00:01:02.130 --> 00:01:06.180
And they have another one, which
they haven't drawn because it

00:01:06.180 --> 00:01:12.050
has 10 to the 180 edges or so,
but it is within 3 times 10

00:01:12.050 --> 00:01:16.690
to the minus 1796 of regular.

00:01:16.690 --> 00:01:21.116
So that's pretty good evidence
that this is gonna work out.

00:01:21.116 --> 00:01:22.240
Let me write that down.

00:01:27.140 --> 00:01:29.820
So they have a particular
iteration procedure.

00:01:29.820 --> 00:01:33.230
It's not always guaranteed to
make a connected unfolding, is

00:01:33.230 --> 00:01:34.770
the troubling part.

00:01:34.770 --> 00:01:36.960
I think it will converge,
but the challenge

00:01:36.960 --> 00:01:40.030
is to find an infinite
sequence of examples

00:01:40.030 --> 00:01:43.950
like this one, that form
a connected polygon, that

00:01:43.950 --> 00:01:46.520
would limit to the fractal.

00:01:46.520 --> 00:01:47.870
They have that instance.

00:01:47.870 --> 00:01:51.600
They have another instance
which is very, very good.

00:01:51.600 --> 00:01:53.897
This is the error.

00:01:53.897 --> 00:01:55.980
But we don't yet know
whether there are infinitely

00:01:55.980 --> 00:02:00.720
many examples the converge all
the way to some fractal set.

00:02:00.720 --> 00:02:03.590
So that is a state
of the fractal.

00:02:03.590 --> 00:02:07.220
Next we have a
question about boxes.

00:02:07.220 --> 00:02:09.490
When that lecture was
given, it was open

00:02:09.490 --> 00:02:11.700
whether there was a common
unfolding of three boxes.

00:02:11.700 --> 00:02:14.130
That problem is now solved.

00:02:14.130 --> 00:02:15.790
There's two papers
about this topic.

00:02:15.790 --> 00:02:19.070
The first one we wrote together.

00:02:19.070 --> 00:02:21.180
And this is just
a fun example, not

00:02:21.180 --> 00:02:22.790
yet related to the
three box problem,

00:02:22.790 --> 00:02:25.820
but you may recall there
were some unfoldings of two

00:02:25.820 --> 00:02:29.530
boxes where one was 45
degrees to the other.

00:02:29.530 --> 00:02:31.010
This was the
challenge of making it

00:02:31.010 --> 00:02:33.300
not 45 degrees, something else.

00:02:33.300 --> 00:02:39.430
And here it's a 3 by 1
triangle that is the axis.

00:02:39.430 --> 00:02:44.670
So you end up with root 10, root
of 3 squared plus 1 squared.

00:02:44.670 --> 00:02:48.080
So that's still two boxes,
but at least at a funny angle.

00:02:48.080 --> 00:02:50.590
And this was actually
found computationally,

00:02:50.590 --> 00:02:53.720
with an integer linear
program for this.

00:02:53.720 --> 00:02:56.360
Integer linear
programming-- set up

00:02:56.360 --> 00:02:58.860
the problem of which pixels
are in and which pixels are out

00:02:58.860 --> 00:03:00.510
in this representation,
and could you

00:03:00.510 --> 00:03:03.719
fit-- we started with
these parameters.

00:03:03.719 --> 00:03:05.260
You have to be very
careful about how

00:03:05.260 --> 00:03:07.960
you choose the numbers to
make the surface areas match.

00:03:07.960 --> 00:03:10.780
So we just chose that
by hand, and then tried

00:03:10.780 --> 00:03:13.031
to find whether there
was such a thing.

00:03:13.031 --> 00:03:15.280
You could formulate that as
an integer linear program.

00:03:15.280 --> 00:03:17.330
It's not guaranteed
to be solvable

00:03:17.330 --> 00:03:19.750
especially efficiently, but
this one we found a solution.

00:03:19.750 --> 00:03:22.514
For fun we also turned it into
a puzzle, where we were just

00:03:22.514 --> 00:03:24.430
modified the boundaries
in corresponding ways,

00:03:24.430 --> 00:03:28.214
so now finding either folding
is actually pretty challenging.

00:03:28.214 --> 00:03:29.630
Well, one of them's
probably easy,

00:03:29.630 --> 00:03:34.910
but the off center
one is challenging.

00:03:34.910 --> 00:03:38.250
But this paper also had
a first kind of solution

00:03:38.250 --> 00:03:39.560
to the three box problem.

00:03:39.560 --> 00:03:44.360
So this is one net-- it's
a grid unfolding, even--

00:03:44.360 --> 00:03:49.740
and it folds into 1 by 1 by 5,
1 by 2 by 3, and 0 by 1 by 11.

00:03:49.740 --> 00:03:52.290
So this is a flat box, a
doubly covered rectangle.

00:03:52.290 --> 00:03:54.516
It's also not technically
a grid unfolding-- we're

00:03:54.516 --> 00:03:56.140
cutting in the middle
of a pixel, here.

00:03:56.140 --> 00:04:01.310
But if you just refine by 2
and call this 0 by 2 by 22,

00:04:01.310 --> 00:04:04.530
2 by 4 by 6 and then
2 by 2 by 10, then

00:04:04.530 --> 00:04:06.939
this is a grid unfolding.

00:04:06.939 --> 00:04:09.230
I don't know if you care
whether it's a grid unfolding,

00:04:09.230 --> 00:04:12.090
but you can make
it one if you want.

00:04:12.090 --> 00:04:15.260
So this is the first
solution, and this is actually

00:04:15.260 --> 00:04:16.435
found by computer search.

00:04:19.810 --> 00:04:22.070
This came from a long
series of research

00:04:22.070 --> 00:04:23.320
in the two box problem.

00:04:23.320 --> 00:04:25.820
We started by looking at
all common unfoldings of 1

00:04:25.820 --> 00:04:29.240
by 1 by 5, 1 by 2 by 3, and
then saw whether any of them

00:04:29.240 --> 00:04:31.930
folded in to 0 by one by 11.

00:04:31.930 --> 00:04:34.445
So the just for fun,
the way that search

00:04:34.445 --> 00:04:37.350
was done-- which is
in the same paper--

00:04:37.350 --> 00:04:41.020
is essentially to try to
construct incrementally

00:04:41.020 --> 00:04:43.270
a common unfolding
of those two polygons

00:04:43.270 --> 00:04:46.155
so they both have
surface area 22.

00:04:46.155 --> 00:04:47.905
The idea is, you start
with a single pixel

00:04:47.905 --> 00:04:51.100
and you say, oh, a single
pixel can fit on both surfaces.

00:04:51.100 --> 00:04:53.722
Then you try all possible
ways to add a second pixel,

00:04:53.722 --> 00:04:55.430
and make sure that at
all times the thing

00:04:55.430 --> 00:04:59.306
you have is a partial
unfolding of both shapes.

00:04:59.306 --> 00:05:00.680
So that way you
get to throw away

00:05:00.680 --> 00:05:02.440
anything that's
guaranteed to be bad,

00:05:02.440 --> 00:05:05.060
that won't fit on either shape.

00:05:05.060 --> 00:05:12.690
And so as you grow your polygon,
you get more and more options.

00:05:12.690 --> 00:05:16.600
So the max we get to
here is about 5 million

00:05:16.600 --> 00:05:19.850
common partial
unfoldings of size 17.

00:05:19.850 --> 00:05:21.850
And for comparison,
the total number

00:05:21.850 --> 00:05:26.700
of ways to build
polyominals of size 17--

00:05:26.700 --> 00:05:28.640
this is only looking
at grid unfoldings--

00:05:28.640 --> 00:05:33.450
so all possible polyominals
of size 17 is 10 times that.

00:05:33.450 --> 00:05:35.620
So we're getting a
lot of savings in time

00:05:35.620 --> 00:05:39.580
by throwing away things that are
not common partial unfoldings.

00:05:39.580 --> 00:05:42.230
And then, conveniently,
things start getting smaller.

00:05:42.230 --> 00:05:44.430
You get to throw away
more and more stuff,

00:05:44.430 --> 00:05:51.640
and you end up with only 2,263
common unfoldings of these two

00:05:51.640 --> 00:05:53.640
shapes, top.

00:05:53.640 --> 00:05:57.110
And surprisingly, exactly
one of them folds into a 0

00:05:57.110 --> 00:05:58.870
by 1 by 11 box.

00:05:58.870 --> 00:06:02.680
So this is unique for
these three parameters.

00:06:02.680 --> 00:06:04.570
And unfortunately
that's kind of the limit

00:06:04.570 --> 00:06:07.110
of how far we could easily
go with a computer search.

00:06:07.110 --> 00:06:09.000
And we could maybe get
a little bit bigger,

00:06:09.000 --> 00:06:10.500
but it seemed like
we were not going

00:06:10.500 --> 00:06:13.430
to be able to find three
boxes just by computer search

00:06:13.430 --> 00:06:16.757
if we wanted a non-flat example,
because numbers are just

00:06:16.757 --> 00:06:18.340
going to have to get
bigger, and we're

00:06:18.340 --> 00:06:21.570
not to be able to do this
enumeration procedure.

00:06:21.570 --> 00:06:26.680
So we need to think,
instead of computer search.

00:06:26.680 --> 00:06:29.590
Before we get to that,
one other fun result

00:06:29.590 --> 00:06:34.130
we got from thinking is, if you
allow these flat doubly covered

00:06:34.130 --> 00:06:39.220
rectangles, there's one
polygon, namely a long strip,

00:06:39.220 --> 00:06:44.610
that will fold into arbitrarily
many distinct rectangles.

00:06:44.610 --> 00:06:48.410
So if you take a long strip,
you can do this zigzag pattern.

00:06:48.410 --> 00:06:52.610
In this case it's height 2, and
you alternate covered on top,

00:06:52.610 --> 00:06:55.210
covered on the bottom, covered
on top, covered on the bottom,

00:06:55.210 --> 00:06:58.020
and you turn around
and do the same.

00:06:58.020 --> 00:07:01.200
And if provided your dimensions
are properly divisible,

00:07:01.200 --> 00:07:04.200
this will make a doubly
covered rectangle of this size.

00:07:04.200 --> 00:07:06.650
And you could also
do it with-- this

00:07:06.650 --> 00:07:09.920
is height 1, height 2,
height 3, and so on.

00:07:09.920 --> 00:07:14.970
In general , if you have and l
by one strip you can make about

00:07:14.970 --> 00:07:18.140
l different rectangles,
depending on how you choose

00:07:18.140 --> 00:07:22.040
your angle to be one
of some integer thing.

00:07:22.040 --> 00:07:22.832
So that's cool.

00:07:22.832 --> 00:07:24.290
If you allow doubly
covered things,

00:07:24.290 --> 00:07:26.680
then you can actually
make many, many boxes.

00:07:26.680 --> 00:07:29.180
If you really want
3D boxes, that's

00:07:29.180 --> 00:07:31.090
where the next paper comes in.

00:07:31.090 --> 00:07:35.460
So next paper is about three
different orthogonal boxes,

00:07:35.460 --> 00:07:37.115
all not flat.

00:07:37.115 --> 00:07:41.510
It's by Shirakawa
and Uehara again.

00:07:41.510 --> 00:07:42.860
And here's one of the solutions.

00:07:42.860 --> 00:07:47.110
So this one polygon is a grid
unfolding-- folds into a 7

00:07:47.110 --> 00:07:51.910
by 8 by 14, a 2 by 4 by
43, and a 2 by 13 by 16.

00:07:51.910 --> 00:07:54.500
And this is almost certainly
beyond what we could ever

00:07:54.500 --> 00:07:58.430
do by computer search,
by just exhaustion.

00:07:58.430 --> 00:08:02.420
This is found using human
intelligence, and this grid

00:08:02.420 --> 00:08:03.670
pattern.

00:08:03.670 --> 00:08:04.930
And they have another example.

00:08:04.930 --> 00:08:09.720
This one falls into 2 by 13 by
58, 7 by 14 by 38, and 7 by 56.

00:08:09.720 --> 00:08:12.900
This is actually-- this a
little more complicated,

00:08:12.900 --> 00:08:15.510
or a little bigger,
I should say.

00:08:15.510 --> 00:08:18.780
They're both based on a
common principle, which

00:08:18.780 --> 00:08:22.260
is to start from a solution
to the two box problem

00:08:22.260 --> 00:08:25.770
and then modify it
to make three boxes.

00:08:25.770 --> 00:08:30.120
So this is a common unfolding
event a by b by 8a box,

00:08:30.120 --> 00:08:32.799
and an a by two a
by 2a plus 3b box

00:08:32.799 --> 00:08:36.419
for, I think, for any
values of a and b.

00:08:36.419 --> 00:08:40.929
And essentially the way you
see that is, you either wrap it

00:08:40.929 --> 00:08:43.409
around this way, or you
wrap it around this way.

00:08:43.409 --> 00:08:46.350
I think that's how
the two foldings work.

00:08:46.350 --> 00:08:49.150
You have to figure out which
of these lines to keep,

00:08:49.150 --> 00:08:51.470
and which ones to throw.

00:08:51.470 --> 00:08:53.020
I haven't color coded them here.

00:08:53.020 --> 00:08:57.800
But that's a general
thing that's known before.

00:08:57.800 --> 00:08:59.610
I think maybe we
even saw in lecture

00:08:59.610 --> 00:09:02.740
this-- there was an example
where you could just repeat,

00:09:02.740 --> 00:09:06.010
and get infinitely many
examples of two different boxes.

00:09:06.010 --> 00:09:09.730
Now we want to modify it to
make three different boxes,

00:09:09.730 --> 00:09:12.340
or to add a third box.

00:09:12.340 --> 00:09:16.230
It's not known how to do a
fourth box of nonzero volume.

00:09:16.230 --> 00:09:19.620
So the basic idea,
which doesn't work,

00:09:19.620 --> 00:09:22.840
is following-- if
I built some box,

00:09:22.840 --> 00:09:26.270
and I slit it in this
sort of h pattern,

00:09:26.270 --> 00:09:31.010
and then I refold
it to be like this,

00:09:31.010 --> 00:09:32.880
I should get a different box.

00:09:32.880 --> 00:09:34.530
That would be really cool.

00:09:34.530 --> 00:09:36.290
The problem is, if
you look at what

00:09:36.290 --> 00:09:37.750
lengths have to
be equal for this.

00:09:37.750 --> 00:09:42.220
So these two lengths end
up being these two lengths,

00:09:42.220 --> 00:09:44.360
so those sums must be equal.

00:09:44.360 --> 00:09:47.800
And over here that
same length must

00:09:47.800 --> 00:09:51.810
equal the two
heights of the boxes.

00:09:51.810 --> 00:09:54.530
That implies that actually
this length equals this length,

00:09:54.530 --> 00:09:57.040
and so this is
actually a square.

00:09:57.040 --> 00:09:59.625
It's drawn here magically
to not be squares,

00:09:59.625 --> 00:10:01.000
but in fact they
must be squares,

00:10:01.000 --> 00:10:03.946
so it's good example
of misleading figure.

00:10:03.946 --> 00:10:06.320
Think about it as like, oh,
man, they have to be squares.

00:10:06.320 --> 00:10:08.910
That means you're converting
a 2 by 1 rectangle to a 1

00:10:08.910 --> 00:10:10.112
by 2 rectangle.

00:10:10.112 --> 00:10:12.070
And that's really not
going to change anything.

00:10:12.070 --> 00:10:15.310
You just rotated your
box, which is frustrating.

00:10:15.310 --> 00:10:18.260
Fortunately, there's a
tweak to make it work.

00:10:18.260 --> 00:10:24.680
The tweak is, you add wiggly
tabs and you refold things.

00:10:24.680 --> 00:10:30.610
So this is a-- in terms of
the grid, here, we've got an 8

00:10:30.610 --> 00:10:35.820
by 7 rectangle
originally on this face.

00:10:35.820 --> 00:10:39.280
We do all these cuts
that are in bold,

00:10:39.280 --> 00:10:42.510
and then when we refold we
also add in these dash creases.

00:10:42.510 --> 00:10:44.670
That's kind of
part of the magic.

00:10:44.670 --> 00:10:47.030
And we end up with
a 2 by 13 rectangle.

00:10:47.030 --> 00:10:49.350
These don't even have
the same surface area.

00:10:49.350 --> 00:10:53.662
Some of the material got
moved into the adjacent sides.

00:10:53.662 --> 00:10:55.120
But if you stare
at it long enough,

00:10:55.120 --> 00:10:59.070
this is a valid transformation
of an existing box.

00:10:59.070 --> 00:11:01.700
Now, of course, the challenge
is to get this trick

00:11:01.700 --> 00:11:07.029
to work with this
unfolding of two boxes.

00:11:07.029 --> 00:11:08.570
And it'll be really
nice if you could

00:11:08.570 --> 00:11:10.111
make it work for
both the boxes, then

00:11:10.111 --> 00:11:11.450
you'd get four boxes, total.

00:11:11.450 --> 00:11:12.900
We don't know how to do that.

00:11:12.900 --> 00:11:15.370
But with this particular
augmentation--

00:11:15.370 --> 00:11:19.030
so, same picture, particular
values of a and b chosen here,

00:11:19.030 --> 00:11:23.740
but these extra tabs and
pockets are put in there.

00:11:23.740 --> 00:11:28.330
Then we get a common
unfolding of three boxes.

00:11:28.330 --> 00:11:30.210
And you can see from
the numbers here you've

00:11:30.210 --> 00:11:34.100
got the 2 by 13 and
the 7 by 8 appearing,

00:11:34.100 --> 00:11:38.380
And this comes from
the other folding.

00:11:38.380 --> 00:11:40.640
So, pretty cool, right?

00:11:40.640 --> 00:11:43.466
And the same gadget
is being used

00:11:43.466 --> 00:11:45.090
in this the first
example I showed you,

00:11:45.090 --> 00:11:47.200
which is a somewhat smaller one.

00:11:47.200 --> 00:11:50.335
Again you get 7 by
8 here, and 2 by 13.

00:11:53.360 --> 00:11:58.504
So, this is how we
know how to do boxes.

00:11:58.504 --> 00:11:59.920
Now, in fact, there
are infinitely

00:11:59.920 --> 00:12:02.590
many examples along these lines.

00:12:02.590 --> 00:12:04.360
You can change that grid.

00:12:04.360 --> 00:12:08.620
Parities have to be right and
maintain some proportions,

00:12:08.620 --> 00:12:11.660
but there are lots of
examples of taking that grid,

00:12:11.660 --> 00:12:16.670
applying it to this net, and
then you get these three boxes.

00:12:16.670 --> 00:12:20.950
For any integer, k greater
or equal to zero will work.

00:12:20.950 --> 00:12:27.080
And so you get a nice infinite
series of examples, I think.

00:12:27.080 --> 00:12:31.212
The rough ratios are almost
the same, but-- is that right?

00:12:31.212 --> 00:12:33.295
No, no, actually they're
changing the proportions.

00:12:33.295 --> 00:12:40.805
You've got k, 4k, 16k, versus
4k, 4k, 7k, versus 4k, k, 4k.

00:12:40.805 --> 00:12:44.224
So-- sorry?

00:12:44.224 --> 00:12:49.841
Oh, 4k, 2k, and 24k,
sorry-- and this is 32.

00:12:49.841 --> 00:12:50.340
Yeah, sorry.

00:12:50.340 --> 00:12:53.250
I need to expand on that that.

00:12:53.250 --> 00:12:55.240
So, pretty cool, and
this is the state

00:12:55.240 --> 00:12:57.490
of the art of common unfoldings.

00:12:57.490 --> 00:13:01.110
Next open problem is for
non-zero volume boxes.

00:13:01.110 --> 00:13:04.930
Can you prove that 100 nonzero
volume boxes are impossible?

00:13:04.930 --> 00:13:07.100
Who knows.

00:13:07.100 --> 00:13:10.300
Maybe even four or
five is impossible.

00:13:10.300 --> 00:13:12.540
It seems pretty tricky.

00:13:12.540 --> 00:13:16.180
OK, I have one more
question, which

00:13:16.180 --> 00:13:18.160
is about the smooth
unfolding stuff.

00:13:21.850 --> 00:13:25.490
I call this a limit, and there's
this is issue about the area.

00:13:25.490 --> 00:13:26.640
So I want to go into this.

00:13:26.640 --> 00:13:29.620
Remember this picture-- we
take a smooth prismatoid, which

00:13:29.620 --> 00:13:34.090
is two convex-- not
polygons, but two convex

00:13:34.090 --> 00:13:35.330
bodies, parallel.

00:13:35.330 --> 00:13:36.550
Take the convex hull.

00:13:36.550 --> 00:13:38.830
You get the smooth surface.

00:13:38.830 --> 00:13:41.820
And then we unfold
it in the volcano way

00:13:41.820 --> 00:13:44.860
of taking every rib
here, every rule line,

00:13:44.860 --> 00:13:48.480
and developing it out flat.

00:13:48.480 --> 00:13:50.540
And when you do that,
you take the union

00:13:50.540 --> 00:13:53.040
of the ribs and the
unfolding, does not

00:13:53.040 --> 00:13:55.410
have the same area as
the original surface

00:13:55.410 --> 00:13:57.960
area of the polyhedron,
which seems a little weird.

00:14:01.255 --> 00:14:03.630
Sometimes we might call I
might have called this a limit.

00:14:03.630 --> 00:14:06.599
It's not really a limit
of the discrete case.

00:14:06.599 --> 00:14:09.140
And this is why we don't know
how to solve the discrete case,

00:14:09.140 --> 00:14:13.710
and yet, we can solve
the smooth case.

00:14:13.710 --> 00:14:17.330
The issue is, if you wanted
to form this structure

00:14:17.330 --> 00:14:20.960
as a limit of
discrete prismatoids,

00:14:20.960 --> 00:14:23.150
you want to subdivide this
into a very fine polygon,

00:14:23.150 --> 00:14:25.810
subdivide this into
a very fine polygon,

00:14:25.810 --> 00:14:27.710
and then try to unfold
those discreetly,

00:14:27.710 --> 00:14:30.210
and then take the limit as
you take finer and finer,

00:14:30.210 --> 00:14:32.660
closer and closer approximations
of the smooth things

00:14:32.660 --> 00:14:35.080
as polygons.

00:14:35.080 --> 00:14:39.250
It really depends how you
discretize-- maybe one way

00:14:39.250 --> 00:14:42.360
to think about that
is, if I start here

00:14:42.360 --> 00:14:45.460
and I do uniform spacing
from this point--

00:14:45.460 --> 00:14:48.390
or I do it from this, point or
from this point-- each of those

00:14:48.390 --> 00:14:50.810
is going to have a different--
it's going to capture

00:14:50.810 --> 00:14:53.612
a somewhat different
discrete structure.

00:14:53.612 --> 00:14:55.070
I think the way to
think about that

00:14:55.070 --> 00:14:57.690
is, the gaps will be spread
out in different ways.

00:14:57.690 --> 00:14:59.650
If I always cut here,
there will always

00:14:59.650 --> 00:15:02.500
be a gap incident to that point,
whereas if I always cut here,

00:15:02.500 --> 00:15:04.583
there will always be a gap
incident to this point,

00:15:04.583 --> 00:15:07.830
and not necessarily
at this point.

00:15:07.830 --> 00:15:10.810
Depending on your
discrete approximation,

00:15:10.810 --> 00:15:13.020
you'll get a very
different unfolded diagram.

00:15:13.020 --> 00:15:14.020
You're going to
get holes out here,

00:15:14.020 --> 00:15:15.645
because when you do
the discrete thing,

00:15:15.645 --> 00:15:17.740
the discrete thing
does preserve area.

00:15:17.740 --> 00:15:20.150
And yet, you imagine, as
you take the limit somehow

00:15:20.150 --> 00:15:21.440
the area jumps at the end.

00:15:21.440 --> 00:15:24.480
That shouldn't happen for a
limit, so this is not a limit.

00:15:24.480 --> 00:15:26.820
What happens is, you have
many different limit points

00:15:26.820 --> 00:15:29.110
depending on your
discrete representation.

00:15:29.110 --> 00:15:30.630
And this green
thing is essentially

00:15:30.630 --> 00:15:35.760
the union of all
those limit points.

00:15:35.760 --> 00:15:37.820
When you take the
union, the area goes up.

00:15:37.820 --> 00:15:40.290
That's essentially
what's going on here.

00:15:40.290 --> 00:15:41.540
That's my best interpretation.

00:15:45.750 --> 00:15:48.554
But yeah, shouldn't
use the word limit.

00:15:48.554 --> 00:15:50.220
OK that's it for
questions, unless there

00:15:50.220 --> 00:15:54.460
are other questions
about this or anything

00:15:54.460 --> 00:15:57.250
we talked about in lecture.

00:15:57.250 --> 00:16:01.780
So the next topic I want to
talk about-- this is a bonus,

00:16:01.780 --> 00:16:04.190
extra topic hasn't been
covered in this class before,

00:16:04.190 --> 00:16:05.630
but I've always wanted to.

00:16:05.630 --> 00:16:07.975
I think there was a final
project about it once.

00:16:07.975 --> 00:16:11.980
It's this guy,
Theo Jansen, and he

00:16:11.980 --> 00:16:13.695
builds these crazy
linkage structures.

00:16:13.695 --> 00:16:16.070
And the next two classes are
about protein folding, which

00:16:16.070 --> 00:16:21.080
is more on the linkage
folding aspect, and so

00:16:21.080 --> 00:16:24.280
thought it'd be fun
to transition over.

00:16:24.280 --> 00:16:26.000
Maybe first I'll
just show you some.

00:16:26.000 --> 00:16:32.620
These are two kits you can
buy of his constructions.

00:16:32.620 --> 00:16:36.476
This guy-- I will blow.

00:16:36.476 --> 00:16:40.380
[BLOWS]

00:16:49.180 --> 00:16:50.450
This guy's on here.

00:16:59.190 --> 00:17:03.500
If I turn this guy,
he walks-- and walks

00:17:03.500 --> 00:17:06.230
pretty elegantly if I
turn this very uniformly.

00:17:06.230 --> 00:17:06.983
It's pretty cool.

00:17:06.983 --> 00:17:08.149
It can walk both directions.

00:17:13.220 --> 00:17:14.329
It's also unpowered.

00:17:14.329 --> 00:17:15.589
You blow it, and it works.

00:17:15.589 --> 00:17:16.970
Here's another example.

00:17:16.970 --> 00:17:18.261
You see just the legs.

00:17:18.261 --> 00:17:20.510
It's more clearly a linkage,
although this is actually

00:17:20.510 --> 00:17:22.599
just implementing
the same linkage.

00:17:22.599 --> 00:17:25.800
It's just got some thicker--
filled in some rigid triangles

00:17:25.800 --> 00:17:26.934
here.

00:17:26.934 --> 00:17:30.140
[BLOWS]

00:17:30.140 --> 00:17:33.380
This is fun, because the
wind's going in one direction,

00:17:33.380 --> 00:17:35.710
and the guy's going in
the opposite direction.

00:17:35.710 --> 00:17:37.650
Here it's going in the
direction of the wind.

00:17:37.650 --> 00:17:39.884
Here it's going
perpendicular to the wind.

00:17:39.884 --> 00:17:41.700
[BLOWS]

00:17:41.700 --> 00:17:43.523
A little bit slower, though.

00:17:48.150 --> 00:17:53.280
I'll just manually
turn this guy.

00:17:53.280 --> 00:17:54.785
Is he going a little faster?

00:17:54.785 --> 00:17:58.000
So it's got really
cool leg mechanism.

00:18:02.330 --> 00:18:04.060
Looks almost like an animal.

00:18:04.060 --> 00:18:08.290
Theo calls these his
children, his animals.

00:18:08.290 --> 00:18:10.570
His goal is for them
to be self sufficient

00:18:10.570 --> 00:18:13.440
and to live on their
own in the beach.

00:18:13.440 --> 00:18:15.270
How many people have
seen his TED Talk?

00:18:15.270 --> 00:18:16.057
A few people.

00:18:16.057 --> 00:18:16.890
You should watch it.

00:18:16.890 --> 00:18:19.181
I'm not going to show it
here, because some people have

00:18:19.181 --> 00:18:20.820
seen it.

00:18:20.820 --> 00:18:23.300
He has this vision.

00:18:23.300 --> 00:18:24.970
He makes them all out of PVC.

00:18:24.970 --> 00:18:31.259
These are just injection molded
plastic kits which you can buy.

00:18:31.259 --> 00:18:32.050
They're super cool.

00:18:32.050 --> 00:18:33.740
Let me show you the bigger ones.

00:18:33.740 --> 00:18:36.511
This is living on the beach.

00:18:36.511 --> 00:18:38.260
At this point they're
not self sufficient,

00:18:38.260 --> 00:18:41.220
he has to correct
them occasionally. .

00:18:41.220 --> 00:18:45.320
But this guy's just walking
in the direction of the wind.

00:18:45.320 --> 00:18:50.420
I think here the wind slows down
a little bit, so lose momentum,

00:18:50.420 --> 00:18:53.170
then picks up.

00:18:53.170 --> 00:18:54.600
He does this in the Netherlands.

00:18:54.600 --> 00:18:56.470
He's got this crazy beach.

00:18:56.470 --> 00:18:59.620
Here's a much bigger one.

00:18:59.620 --> 00:19:03.160
It's got a lot more wind
collectors at the top.

00:19:03.160 --> 00:19:05.060
So these are all self powered.

00:19:05.060 --> 00:19:10.330
Originally he pushed them
along, but now they've

00:19:10.330 --> 00:19:12.540
learned to move by themselves.

00:19:12.540 --> 00:19:16.540
And very cool legs-- I want
to talk more about the leg

00:19:16.540 --> 00:19:21.050
linkage, because that's
the more mathematical part.

00:19:21.050 --> 00:19:23.900
So this is his original
drawing of the leg.

00:19:23.900 --> 00:19:25.580
It's a pretty simple idea.

00:19:25.580 --> 00:19:27.350
It's a pretty simple linkage.

00:19:27.350 --> 00:19:34.740
You've got a quadrilateral
here, 4 bar linkage, C-K-J-B,

00:19:34.740 --> 00:19:37.090
and you've got a rigid
triangle attached here.

00:19:37.090 --> 00:19:40.670
Then another quadrilateral
here, and then a rigid triangle

00:19:40.670 --> 00:19:41.750
at the bottom.

00:19:41.750 --> 00:19:44.120
So it's really just
two quadrilaterals

00:19:44.120 --> 00:19:45.980
connected by two
rigid triangles.

00:19:45.980 --> 00:19:48.230
And so it's a one degree
of freedom mechanism.

00:19:48.230 --> 00:19:50.370
As you flex this
quad, this one has

00:19:50.370 --> 00:19:53.960
to adapt because that
quad controls all three

00:19:53.960 --> 00:19:56.000
of these points because
of the rigid triangles,

00:19:56.000 --> 00:19:58.400
and so the fourth
one is determined.

00:19:58.400 --> 00:19:59.980
And then the crank is here.

00:20:02.880 --> 00:20:07.850
So this says vaste printer,
which means fixed points.

00:20:07.850 --> 00:20:09.940
So you've got these
two fixed points--

00:20:09.940 --> 00:20:11.810
this is actually also fixed.

00:20:11.810 --> 00:20:14.360
This is just an x to y ratio.

00:20:14.360 --> 00:20:17.240
So these two guys are
pinned, and this guy

00:20:17.240 --> 00:20:24.150
is rotating around this fixed
point-- that's the actuation,

00:20:24.150 --> 00:20:28.130
and that causes this
quadrilateral to fold.

00:20:28.130 --> 00:20:31.070
We are basically setting the
center of rotation of this guy

00:20:31.070 --> 00:20:32.760
relative to this
guy by measuring

00:20:32.760 --> 00:20:34.270
these lengths, a and l.

00:20:36.930 --> 00:20:40.170
He has these numbers, which
he calls the 11 holy numbers.

00:20:40.170 --> 00:20:42.820
It's a little cause because
there's actually 13 of them.

00:20:42.820 --> 00:20:45.305
There are 11 edge
lengths, and then there's

00:20:45.305 --> 00:20:47.180
these two, which are
not really edge lengths.

00:20:47.180 --> 00:20:49.810
It's just a measurement of how
to put the center of rotation

00:20:49.810 --> 00:20:53.330
relative to this guy.

00:20:53.330 --> 00:20:55.160
And the reason why
x and y matter here

00:20:55.160 --> 00:20:57.410
is because there's actually
a floor at the bottom,

00:20:57.410 --> 00:21:01.650
and you have to orient yourself
correctly relative to the floor

00:21:01.650 --> 00:21:04.300
so you can actually walk.

00:21:04.300 --> 00:21:09.310
So he found these numbers
by genetic algorithm.

00:21:09.310 --> 00:21:12.170
In the early days there
weren't-- I guess,

00:21:12.170 --> 00:21:14.590
before there were a lot of
genetic algorithms around.

00:21:14.590 --> 00:21:16.349
So he tried lots of
different values,

00:21:16.349 --> 00:21:17.890
simulated them on
the computer, found

00:21:17.890 --> 00:21:21.420
which ones walked
best, basically.

00:21:21.420 --> 00:21:23.830
Ones that were walking well
in various kinds of terrain

00:21:23.830 --> 00:21:25.750
would survive to
the next generation,

00:21:25.750 --> 00:21:28.260
try various random
mutations, perturbing

00:21:28.260 --> 00:21:32.350
all of these numbers, and
eventually finding this set

00:21:32.350 --> 00:21:35.690
to be especially
good in simulation,

00:21:35.690 --> 00:21:38.930
and that's what all of the
built linkages are based on.

00:21:42.160 --> 00:21:44.730
This is his computer
drawing, plus some markings

00:21:44.730 --> 00:21:46.390
on top of it.

00:21:46.390 --> 00:21:48.800
If you take this linkage
and go through the one

00:21:48.800 --> 00:21:51.260
degree of freedom,
this point, of course,

00:21:51.260 --> 00:21:52.730
moves along a circle.

00:21:52.730 --> 00:21:55.860
Then we're just drawing lots of
instances on top of each other.

00:21:55.860 --> 00:21:58.750
The foot-- this
guy down here moves

00:21:58.750 --> 00:22:01.790
in this pattern,
which is pretty cool.

00:22:01.790 --> 00:22:05.240
This is basically lifting
your foot up off the ground,

00:22:05.240 --> 00:22:08.199
pushing it down, and then
dragging along the floor.

00:22:08.199 --> 00:22:09.990
That's how you walk,
if you think about it.

00:22:09.990 --> 00:22:14.540
You push and propel
yourself forward.

00:22:14.540 --> 00:22:16.710
So this scraping
along the floor,

00:22:16.710 --> 00:22:18.330
if you've got a
high friction foot,

00:22:18.330 --> 00:22:21.100
will actually move you forward.

00:22:21.100 --> 00:22:24.162
In some sense, all of this
design-- and the one way

00:22:24.162 --> 00:22:25.620
you would choose
these numbers-- is

00:22:25.620 --> 00:22:27.590
to guarantee that
A- you get lift,

00:22:27.590 --> 00:22:30.840
because if you have non-uniform
terrain, you want to walk.

00:22:30.840 --> 00:22:33.730
He likes to call this mechanism
better than the wheel.

00:22:33.730 --> 00:22:37.000
It's like every invention
of something like the wheel,

00:22:37.000 --> 00:22:39.100
but even better because
wheels don't really

00:22:39.100 --> 00:22:40.990
work if you have
steps on the ground.

00:22:40.990 --> 00:22:42.740
Walking is superior,
cause you could

00:22:42.740 --> 00:22:46.050
walk over bumps and steps
and things like that.

00:22:46.050 --> 00:22:47.810
So you want a good
amount of lift,

00:22:47.810 --> 00:22:51.320
and then you want a good
amount, and ideally-- you

00:22:51.320 --> 00:22:52.790
can kind of see this here.

00:22:52.790 --> 00:22:55.600
These are uniformly spaced
as you rotate around,

00:22:55.600 --> 00:22:57.590
and these are all--
they look uniformly

00:22:57.590 --> 00:23:00.560
spaced on the bottom,
which means you're applying

00:23:00.560 --> 00:23:04.420
uniform force all along
the floor contact.

00:23:04.420 --> 00:23:10.120
It's not uniform here, but
it's uniform down here, mostly.

00:23:10.120 --> 00:23:12.370
It's not actually straight
in the true mechanism.

00:23:12.370 --> 00:23:15.630
I think this is another
drawing, two other people's

00:23:15.630 --> 00:23:17.467
drawings of the same mechanism.

00:23:17.467 --> 00:23:19.050
Here the triangles
have been filled in

00:23:19.050 --> 00:23:23.900
to be-- I think this is a
design for a metal version.

00:23:23.900 --> 00:23:25.860
And then this is a
mathematical simulation.

00:23:25.860 --> 00:23:30.480
Again, uniformly spaced
rotary cranking here.

00:23:30.480 --> 00:23:32.410
You get to see the spacing
of the points here.

00:23:32.410 --> 00:23:35.970
So it's moving a little
bit faster over the lift,

00:23:35.970 --> 00:23:38.350
and then pushing down and
spending a fair amount of time

00:23:38.350 --> 00:23:42.940
here, and pretty uniformly
applying . force.

00:23:42.940 --> 00:23:45.430
Also not completely flat.

00:23:45.430 --> 00:23:47.490
It looks like it's
convex-- in fact

00:23:47.490 --> 00:23:50.180
there's a little
upward dip here.

00:23:50.180 --> 00:23:53.850
But it's pretty good, pretty
straight, and a really good

00:23:53.850 --> 00:23:57.160
walking mechanism, possibly
the best within this family.

00:23:57.160 --> 00:24:00.770
Depends how you define
best, of course.

00:24:00.770 --> 00:24:05.370
And here's a fun
animation of how

00:24:05.370 --> 00:24:07.860
the parts of the linkage and
adding multiple legs, which

00:24:07.860 --> 00:24:09.910
is I wanted to show it.

00:24:09.910 --> 00:24:12.110
So you start with
one 4 bar mechanism.

00:24:12.110 --> 00:24:15.570
These are probably not quite
the right lengths, but close.

00:24:15.570 --> 00:24:19.090
You add two rigid
triangles it's a little

00:24:19.090 --> 00:24:22.190
add another quadrilateral on
there you see the spitting

00:24:22.190 --> 00:24:25.940
part offset relative to
that and then here you

00:24:25.940 --> 00:24:28.250
get the trajectory of the foot.

00:24:28.250 --> 00:24:31.660
And you see on a terrain how
it would move you forward,

00:24:31.660 --> 00:24:34.170
especially if you have
multiple legs, then one of them

00:24:34.170 --> 00:24:37.650
is always in contact so
you're moving forward.

00:24:37.650 --> 00:24:40.570
And then if you want
to be even cooler,

00:24:40.570 --> 00:24:45.120
you go to three dimensions,
use even more legs.

00:24:45.120 --> 00:24:48.290
And you have a little
crank in the center that

00:24:48.290 --> 00:24:53.229
offsets the timing of the feet
so they're all sporadically

00:24:53.229 --> 00:24:54.770
moving, and that's
essentially what's

00:24:54.770 --> 00:24:59.100
going on in this structure
where they're nicely,

00:24:59.100 --> 00:25:01.800
evenly distributed.

00:25:01.800 --> 00:25:03.810
There's a central
crank here that

00:25:03.810 --> 00:25:08.900
just offsets the timing
of all these feet,

00:25:08.900 --> 00:25:11.174
and it's super cool.

00:25:11.174 --> 00:25:12.590
I mean, some ways
the coolest part

00:25:12.590 --> 00:25:16.360
is how it looks like a
real animal walking--

00:25:16.360 --> 00:25:18.764
the funny timing, and the
way you lift and then spend

00:25:18.764 --> 00:25:20.930
most your time with a foot
on the ground, and so on.

00:25:20.930 --> 00:25:25.280
So, fun stuff.

00:25:25.280 --> 00:25:26.004
Let's see.

00:25:26.004 --> 00:25:27.420
Of course, other
people have tried

00:25:27.420 --> 00:25:28.880
to improve it in various ways.

00:25:28.880 --> 00:25:32.410
There's a couple of papers
proposing alternate walking

00:25:32.410 --> 00:25:34.030
linkage mechanisms.

00:25:34.030 --> 00:25:37.490
This is the Theo
Jansen version, this

00:25:37.490 --> 00:25:40.750
is another version by Ghassaei.

00:25:40.750 --> 00:25:44.060
And it's actually a
simpler linkage, just

00:25:44.060 --> 00:25:48.100
a 4 bar linkage over here too
rigid triangles and another 4

00:25:48.100 --> 00:25:49.360
bar linkage.

00:25:49.360 --> 00:25:51.160
I guess roughly the
same number of parts

00:25:51.160 --> 00:25:54.352
but, I think, one fewer
edge if I counted correctly,

00:25:54.352 --> 00:25:56.060
just because of the
way they're combined.

00:25:59.160 --> 00:26:02.960
And some fun things as you get--
this is the foot pattern down

00:26:02.960 --> 00:26:05.890
here, still has a nice straight
part, looks pretty uniform,

00:26:05.890 --> 00:26:07.240
speeds up for the lift.

00:26:07.240 --> 00:26:12.506
Does not lift as high-- this one
has a 30 percent higher step,

00:26:12.506 --> 00:26:13.630
which is considered better.

00:26:13.630 --> 00:26:15.900
You could move over
rougher terrain.

00:26:15.900 --> 00:26:18.750
This one has other Jansen's
has other advantages,

00:26:18.750 --> 00:26:20.807
like if you have two of
them in the same plane

00:26:20.807 --> 00:26:22.390
they will not collide
with each other.

00:26:22.390 --> 00:26:24.682
Two legs reflected
around each other.

00:26:24.682 --> 00:26:25.890
This one, they would collide.

00:26:25.890 --> 00:26:28.982
You have to move them
to separate planes.

00:26:28.982 --> 00:26:30.440
But some fun things
here as you get

00:26:30.440 --> 00:26:34.170
that this foot pattern is
symmetric, down the y-axis,

00:26:34.170 --> 00:26:38.030
and you get much less
variation in the height,

00:26:38.030 --> 00:26:42.680
sort of more uniform,
and a little less

00:26:42.680 --> 00:26:46.956
velocity variation on the
stride part, the walking.

00:26:46.956 --> 00:26:48.330
And then the other
thing, which I

00:26:48.330 --> 00:26:50.250
think was the main
purpose of the design,

00:26:50.250 --> 00:26:52.690
was that the center of
mass of the whole structure

00:26:52.690 --> 00:26:54.450
doesn't move very much.

00:26:54.450 --> 00:26:56.090
The blue dots here
are the center

00:26:56.090 --> 00:26:59.960
of mass over the motion
of the Jansen mechanism.

00:26:59.960 --> 00:27:05.471
And this one, the blue dots are
much smaller areas, 85% less

00:27:05.471 --> 00:27:05.970
movement.

00:27:05.970 --> 00:27:09.920
I'm not sure of the exact
definition of 85% there.

00:27:12.850 --> 00:27:15.400
This should be, if you were
like riding on the thing,

00:27:15.400 --> 00:27:18.740
you should feel less
wobble, in principle.

00:27:18.740 --> 00:27:22.110
They did build one of these
out of PVC tubing as well,

00:27:22.110 --> 00:27:25.260
but I haven't seen any video
so I don't know how it looks.

00:27:25.260 --> 00:27:27.830
Be kind of neat to see

00:27:27.830 --> 00:27:34.000
So this is a two fat
example, apparently.

00:27:34.000 --> 00:27:39.175
Said this one was over eating,
and so it tends to fall over.

00:27:39.175 --> 00:27:41.550
So it's a challenge to get
these things to work and you--

00:27:41.550 --> 00:27:44.250
I can't imagine how many hours
he spends building these,

00:27:44.250 --> 00:27:47.680
and then for one of
them to not live.

00:27:47.680 --> 00:27:52.759
He does things like, he'll
run these experiments.

00:27:52.759 --> 00:27:54.300
Like genetic algorithms
is one thing,

00:27:54.300 --> 00:27:56.070
but he'll do the
real genetics thing

00:27:56.070 --> 00:27:58.820
of building lots of
different variations,

00:27:58.820 --> 00:28:01.920
put them on the sand, see
which one goes the fastest.

00:28:01.920 --> 00:28:03.450
The other ones he kills.

00:28:03.450 --> 00:28:05.750
The one who went was
the fastest survives

00:28:05.750 --> 00:28:06.740
to the next generation.

00:28:06.740 --> 00:28:09.610
But each experiment must
take hours and hours--

00:28:09.610 --> 00:28:10.360
really impressive.

00:28:13.020 --> 00:28:16.140
So there are issues in
getting these things to work,

00:28:16.140 --> 00:28:19.590
and just having the leg
mechanism is one thing.

00:28:19.590 --> 00:28:21.800
These guys have a lot of
very interesting mechanisms

00:28:21.800 --> 00:28:25.150
beyond the legs, in order to--
they're sensors, essentially.

00:28:25.150 --> 00:28:28.830
They're purely mechanical--
there's no electronics here

00:28:28.830 --> 00:28:30.900
that are physical, I should say.

00:28:30.900 --> 00:28:33.550
There are sensors to detect
things like the wind direction.

00:28:33.550 --> 00:28:37.310
Recently we had the honor of
co-exhibiting with Theo Jansen.

00:28:37.310 --> 00:28:40.850
So this is some of our curve
crease paper folding in this,

00:28:40.850 --> 00:28:42.570
or some of his structures.

00:28:42.570 --> 00:28:45.510
Some of these small kits and
photographs of his larger ones

00:28:45.510 --> 00:28:50.640
were at this show in Stonybrook,
New York, earlier this year.

00:28:50.640 --> 00:28:52.610
It's kind of fun.

00:28:52.610 --> 00:28:56.460
And while we're on the
topic of kinetic sculpture,

00:28:56.460 --> 00:28:58.685
I have to show Arthur Ganson.

00:28:58.685 --> 00:29:02.680
It's funny, Ganson and
Jensen are so close.

00:29:02.680 --> 00:29:06.480
This is our local kinetic
expert-- kinetic sculpture

00:29:06.480 --> 00:29:06.980
expert.

00:29:06.980 --> 00:29:10.950
These are four examples
I took from the web,

00:29:10.950 --> 00:29:13.020
but all of these examples
and many, many more

00:29:13.020 --> 00:29:13.900
at the MIT Museum.

00:29:13.900 --> 00:29:16.820
If you haven't seen
his exhibit, you must.

00:29:16.820 --> 00:29:21.960
He hand builds lots
of gears and cranks,

00:29:21.960 --> 00:29:24.330
and uses them to
build crazy things.

00:29:24.330 --> 00:29:28.120
This is called the
self-oiling machine.

00:29:28.120 --> 00:29:30.430
it just grabbed a
bunch of oil and it'

00:29:30.430 --> 00:29:33.460
about to pour all
that oil onto itself.

00:29:33.460 --> 00:29:35.935
It's really gross.

00:29:35.935 --> 00:29:40.190
There it goes, pour-- and
should never get rusty.

00:29:40.190 --> 00:29:45.700
This is a very simple mechanism
that's just the random and cool

00:29:45.700 --> 00:29:48.057
how the changes kind of
move, wiggles around.

00:29:48.057 --> 00:29:49.640
It's a force to be
planar, essentially

00:29:49.640 --> 00:29:51.360
because of that chain.

00:29:51.360 --> 00:29:54.350
This one-- you've got various
handmade gears and so on,

00:29:54.350 --> 00:29:59.510
and hand cut pieces of rough
paper, to make them fly.

00:29:59.510 --> 00:30:02.460
And this is another beautiful,
relatively simple one.

00:30:02.460 --> 00:30:06.690
You've got a big counterweight
to make this chair almost zero

00:30:06.690 --> 00:30:09.871
weight, and then there's
a little cat here

00:30:09.871 --> 00:30:11.620
that's just rigid and
going back and forth

00:30:11.620 --> 00:30:15.350
and it causes that chair to
dance around in very cool ways.

00:30:19.367 --> 00:30:20.200
It's pretty amazing.

00:30:20.200 --> 00:30:24.310
He lives locally, and has made
a huge array of sculptures,

00:30:24.310 --> 00:30:27.570
one which I don't have a video
of, which is a lot of fun,

00:30:27.570 --> 00:30:30.700
is just-- there's a
big crank, and then

00:30:30.700 --> 00:30:33.510
a series of like 20
to 1 gear reductions,

00:30:33.510 --> 00:30:35.440
and at the other end
the turning element

00:30:35.440 --> 00:30:37.095
is in a solid block of concrete.

00:30:37.095 --> 00:30:38.970
And there's some
computation, like it'll

00:30:38.970 --> 00:30:42.950
take 100,000 years before that
before it turns that concrete

00:30:42.950 --> 00:30:45.760
around, which it can't do.

00:30:45.760 --> 00:30:47.585
Initially the gears
are going pretty fast,

00:30:47.585 --> 00:30:48.970
and then, slower
and slower, and then

00:30:48.970 --> 00:30:50.850
you just can't see them
for like five iterations

00:30:50.850 --> 00:30:52.270
and then it's
wedged into concrete

00:30:52.270 --> 00:31:00.050
It's a fun, practical example--
practical Anyway, lots

00:31:00.050 --> 00:31:03.840
of very cool kinetic sculpture
and all somehow based

00:31:03.840 --> 00:31:08.150
around linkages although not
necessarily strictly following

00:31:08.150 --> 00:31:08.890
our definition.

00:31:08.890 --> 00:31:12.680
And next week we'll be
talking about protein folding.

