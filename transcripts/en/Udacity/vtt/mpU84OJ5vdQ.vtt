WEBVTT
Kind: captions
Language: en

00:00:00.240 --> 00:00:04.090
Okay, so what we have here, again, is pseudocode for

00:00:04.090 --> 00:00:06.700
our K-NN algorithm. And I'm sort of writing it as

00:00:06.700 --> 00:00:09.150
like, a function. So, you're going to be given some

00:00:09.150 --> 00:00:12.560
training data D, that's the little x, y points, x

00:00:12.560 --> 00:00:14.110
y one, x y 2, x y 3, so on

00:00:14.110 --> 00:00:17.530
and so fourth. You're given some kind of distance metric

00:00:17.530 --> 00:00:22.460
or similarity function. And this is important because this represents

00:00:22.460 --> 00:00:25.450
the domain knowledge as I think we, we've already said.

00:00:25.450 --> 00:00:28.640
You get some number of neighbors that you care about,

00:00:28.640 --> 00:00:31.140
k, hence the k and n, which also, by the

00:00:31.140 --> 00:00:34.620
way, represents domain knowledge. Tells you something about how many

00:00:34.620 --> 00:00:36.300
neighbors you think you should have. And then are given

00:00:36.300 --> 00:00:39.230
some particular new query point and I want to output

00:00:39.230 --> 00:00:42.970
some kind of answer, some label, some value. So the

00:00:42.970 --> 00:00:46.590
K nn algorithm is remarkably simple given these things you

00:00:46.590 --> 00:00:50.480
simply find a set of nearest neighbors such that they

00:00:50.480 --> 00:00:53.830
are the K closest to your query point.

00:00:53.830 --> 00:00:57.950
&gt;&gt; Okay. I'm sort of processing this. So the, the data

00:00:57.950 --> 00:01:01.610
the capital D. Are those pairs and there's a set of pairs?

00:01:01.610 --> 00:01:02.150
&gt;&gt; Yes.

00:01:02.150 --> 00:01:08.650
&gt;&gt; Ok. And k smallest distances. So this NN this is a set?

00:01:08.650 --> 00:01:09.150
&gt;&gt; Yes.

00:01:09.150 --> 00:01:11.970
&gt;&gt; And it consists of all the elements in

00:01:11.970 --> 00:01:15.910
the data that are closest to the query point?

00:01:15.910 --> 00:01:19.130
&gt;&gt; Yep. And the so the query point is a parameter of that. Okay.

00:01:19.130 --> 00:01:22.180
Yeah. Alright. I think I. Oh. And then it's, then the so it's just return.

00:01:22.180 --> 00:01:23.600
&gt;&gt; Yeah, so we haven't figured out what

00:01:23.600 --> 00:01:25.090
to return. So there's two separate cases we've been

00:01:25.090 --> 00:01:27.690
talking about so far. One is where, we're doing

00:01:27.690 --> 00:01:31.500
classification, and one is where we're doing regression. So,

00:01:31.500 --> 00:01:33.360
a question for you would be, what do you

00:01:33.360 --> 00:01:35.940
think we should when we're doing classification? Sort of,

00:01:35.940 --> 00:01:37.980
what we were doing before on the map. What

00:01:37.980 --> 00:01:39.620
will be a way of returning a proper label?

00:01:39.620 --> 00:01:40.920
&gt;&gt; So you want to

00:01:40.920 --> 00:01:43.520
label, not a, like a weight on a label or something like that?

00:01:43.520 --> 00:01:44.580
&gt;&gt; No. I want a label. You have to

00:01:44.580 --> 00:01:46.420
produce an answer. You have to commit to something Michael.

00:01:46.420 --> 00:01:49.900
&gt;&gt; Alright. Can I commit to more than one thing?

00:01:49.900 --> 00:01:50.400
&gt;&gt; Nope.

00:01:51.720 --> 00:01:55.460
&gt;&gt; Okay. So I would say that a reasonable thing to do

00:01:55.460 --> 00:01:59.480
there would be. Did we get Ys associated with the things in NN?

00:01:59.480 --> 00:02:00.020
&gt;&gt; Yeap.

00:02:00.020 --> 00:02:02.590
&gt;&gt; So I would go with they should vote.

00:02:03.800 --> 00:02:05.900
&gt;&gt; I like that. I think that's a good one,

00:02:05.900 --> 00:02:08.220
so we'll simply vote and what does it mean to vote?

00:02:08.220 --> 00:02:13.540
&gt;&gt; It means, let's see, so feel like there would be a way to represent

00:02:13.540 --> 00:02:16.690
it in terms of NN, the set. Like do you want me to write it formally?

00:02:16.690 --> 00:02:17.320
&gt;&gt; No.

00:02:17.320 --> 00:02:21.820
&gt;&gt; Oh, then I would just say The closest point.

00:02:21.820 --> 00:02:25.370
Whichever yi is most frequent among the closest points wins.

00:02:25.370 --> 00:02:27.870
&gt;&gt; Yeah. Right. So you want to find a,

00:02:27.870 --> 00:02:31.520
a vote of basically a vote of the yi's,

00:02:31.520 --> 00:02:35.130
that are apart of the neighborhood set. And you take the plurality.

00:02:35.130 --> 00:02:39.160
&gt;&gt; Plurality I see. So it's whichever one occurs the most.

00:02:39.160 --> 00:02:39.830
&gt;&gt; Right.

00:02:39.830 --> 00:02:40.960
&gt;&gt; What if there's ties?

00:02:40.960 --> 00:02:42.870
&gt;&gt; It's the mode. The mode. Right.

00:02:42.870 --> 00:02:42.960
&gt;&gt; Right.

00:02:42.960 --> 00:02:45.520
&gt;&gt; Mmmm. I love mode.

00:02:45.520 --> 00:02:48.440
&gt;&gt; What if they're ties? That's a good point. Well, if they are

00:02:48.440 --> 00:02:51.440
ties among the output, then you're just going to have to pick one.

00:02:51.440 --> 00:02:51.570
&gt;&gt; OK.

00:02:51.570 --> 00:02:53.200
&gt;&gt; And there's lots of ways you might do that.

00:02:53.200 --> 00:02:57.380
You might say, well, I'll take the one. That is

00:02:57.380 --> 00:03:00.360
say, most commonly represented in the data

00:03:00.360 --> 00:03:03.280
period. Or I'll just randomly pick each

00:03:03.280 --> 00:03:06.130
time, or any number of ways you might, you c an imagine doing that.

00:03:06.130 --> 00:03:07.790
&gt;&gt; The one that's first alphabetically.

00:03:07.790 --> 00:03:09.200
&gt;&gt; The one that's first lexicographically?

00:03:09.200 --> 00:03:10.080
&gt;&gt; Hm.

00:03:10.080 --> 00:03:11.890
&gt;&gt; What about in the regression case?

00:03:11.890 --> 00:03:15.288
&gt;&gt; Okay. So in the regression case our y-is are numbers.

00:03:15.288 --> 00:03:19.610
&gt;&gt; Uh-huh. And we have the closest Yi's, so

00:03:19.610 --> 00:03:22.790
we have a bunch of those numbers and it

00:03:22.790 --> 00:03:25.330
seems like [LAUGH] if you have a pile of numbers and have to return

00:03:25.330 --> 00:03:28.410
one, a standard thing to do would be to take the average, or the mean.

00:03:28.410 --> 00:03:31.910
&gt;&gt; Yeah. Now let's just simply take the mean

00:03:31.910 --> 00:03:33.980
of the Yi's, and at least there, you don't

00:03:33.980 --> 00:03:37.250
have to worry about a tie. That's right. Though,

00:03:37.250 --> 00:03:38.850
I guess, you know. We didn't really deal with

00:03:38.850 --> 00:03:40.860
the question of what happens if there's more than

00:03:40.860 --> 00:03:42.710
k small. It's, like, what if they're all exactly

00:03:42.710 --> 00:03:44.600
the same distance? All n of them are exactly

00:03:44.600 --> 00:03:46.780
the same distance. So which are the k closest?

00:03:46.780 --> 00:03:47.810
&gt;&gt; Well, there's lots

00:03:47.810 --> 00:03:50.950
of things you could do there. I guess what I would suggest doing, is,

00:03:50.950 --> 00:03:54.800
take the, If you have more than k that are close, that are closest

00:03:54.800 --> 00:03:57.990
because you have a bunch of ties, in terms of the distance. Just take

00:03:57.990 --> 00:04:01.930
all of them. Get the smallest number greater than or equal to k. Okay.

00:04:01.930 --> 00:04:03.170
&gt;&gt; That seem reasonable?

00:04:03.170 --> 00:04:06.240
&gt;&gt; Yeah, I think that's what college rankings do.

00:04:06.240 --> 00:04:10.410
&gt;&gt; Actually, that is what college rankings do, and then they, yeah,

00:04:10.410 --> 00:04:12.880
that's exactly what college rankings do. So, let's do that. We know

00:04:12.880 --> 00:04:16.070
that college rankings make sense. [LAUGH]. Yeah,

00:04:16.070 --> 00:04:19.110
those are, they're scientifically proven to be,

00:04:19.110 --> 00:04:19.529
&gt;&gt; Youths.

00:04:19.529 --> 00:04:21.760
&gt;&gt; scary, scary to people in colleges.

00:04:21.760 --> 00:04:23.380
&gt;&gt; That's exactly right. So, here's what we've

00:04:23.380 --> 00:04:24.950
got, Michael. So, all we do is we take

00:04:24.950 --> 00:04:26.490
the training data. We have some notion of

00:04:26.490 --> 00:04:28.350
similarity or distance. We have a notion of the

00:04:28.350 --> 00:04:30.250
number of neighbors that we care about. We

00:04:30.250 --> 00:04:32.880
have a query point, we find the K closest

00:04:32.880 --> 00:04:35.470
to one, you know breaking ties accordingly. And then

00:04:35.470 --> 00:04:37.910
we basically average in some way, in a way

00:04:37.910 --> 00:04:39.520
that make sense for classification, in a way they make sense

00:04:39.520 --> 00:04:42.730
for regression and we are done. It's a very simple algorithm,

00:04:42.730 --> 00:04:45.920
but some of that's because a lot of decisions are being

00:04:45.920 --> 00:04:50.100
left up to the designer. The distance metric. The number k,

00:04:50.100 --> 00:04:53.670
how you're going to break ties. Exactly how you choose to implement

00:04:53.670 --> 00:04:57.890
voting. Exactly how you choose to implement the mean or the

00:04:57.890 --> 00:05:00.490
average operation that shows how to do here. And you could

00:05:00.490 --> 00:05:03.300
put a bunch of different things here and you end up in,

00:05:04.500 --> 00:05:07.860
completely, you could end up with completely different answer. Mm.

00:05:07.860 --> 00:05:10.110
&gt;&gt; By the way, one thing that you might do, just to give

00:05:10.110 --> 00:05:13.750
you an example of just, how much range there is here. Is rather than

00:05:13.750 --> 00:05:17.250
doing a simple vote by counting, you could do a vote that is say,

00:05:17.250 --> 00:05:22.190
weighted by how far away you are. So we could have a weighted vote.

00:05:22.190 --> 00:05:23.230
&gt;&gt; Uh-huh.

00:05:23.230 --> 00:05:24.380
&gt;&gt; That might help us with ties.

00:05:24.380 --> 00:05:26.400
&gt;&gt; That could help with ties. Yeah.

00:05:26.400 --> 00:05:29.360
&gt;&gt; You could do a weighted average. Yes, right.

00:05:29.360 --> 00:05:34.580
So, you're basically saying that the y values that correspond to x values that

00:05:34.580 --> 00:05:38.240
are closer to the query point have more of an influence on the mean.

00:05:38.240 --> 00:05:39.580
&gt;&gt; Which makes some sense, right?

00:05:39.580 --> 00:05:41.450
&gt;&gt; No, I think it makes a lot of sense!

00:05:41.450 --> 00:05:44.310
&gt;&gt; So, how would you weight that? What would you do?

00:05:44.310 --> 00:05:46.610
&gt;&gt; I would weight it by the similarity.

00:05:46.610 --> 00:05:50.170
&gt;&gt; Right, so well in this case, the similarity is we have a distance value

00:05:50.170 --> 00:05:54.880
similarity, so You would have to, you know, weight it by something like one over

00:05:54.880 --> 00:05:55.460
the distance.

00:05:55.460 --> 00:05:59.400
&gt;&gt; Oh I see. Okay. That seems like a hack.

00:05:59.400 --> 00:06:01.880
&gt;&gt; Sure but it's a hack that sort of makes sense.

00:06:01.880 --> 00:06:02.990
&gt;&gt; Okay.

00:06:02.990 --> 00:06:05.280
&gt;&gt; Okay. So anyway. Simple algorithim. Lots

00:06:05.280 --> 00:06:07.280
and lots of decisions to make here. All

00:06:07.280 --> 00:06:11.610
of which could in principle have a pretty big effect. And so, in order to see

00:06:11.610 --> 00:06:16.150
that, I want to do two quizzes that I hope get to heart of this and

00:06:16.150 --> 00:06:17.520
maybe give us a little bit of insight

00:06:17.520 --> 00:06:20.370
into how some of these decisions might matter

00:06:20.370 --> 00:06:24.310
on the one hand, and exactly just how simple

00:06:24.310 --> 00:06:26.770
or not simple this algorithm turns out to be. Okay?

00:06:26.770 --> 00:06:27.170
&gt;&gt; Awesome.

