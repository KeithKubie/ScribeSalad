WEBVTT
Kind: captions
Language: en

00:00:16.329 --> 00:00:19.440
SETH LADD: Welcome everybody,
to Dartisans episode 14.

00:00:19.440 --> 00:00:23.190
Today we turn the spotlight over
to our community members

00:00:23.190 --> 00:00:26.260
to see some cool demos and hear
some of their stories.

00:00:26.260 --> 00:00:29.660
But first, let's welcome my
co-host, JJ, welcome.

00:00:29.660 --> 00:00:30.520
JJ BEHRENS: Howdy.

00:00:30.520 --> 00:00:31.725
SETH LADD: John, thanks
for coming.

00:00:31.725 --> 00:00:32.880
JOHN MCCUTCHAN: Hello.

00:00:32.880 --> 00:00:35.640
SETH LADD: And let's start
off with some news.

00:00:35.640 --> 00:00:38.830
So the two books that we're
aware of, "Dart Up and

00:00:38.830 --> 00:00:42.110
Running" and "Dart in Action"
are now going to press, which

00:00:42.110 --> 00:00:42.770
is awesome.

00:00:42.770 --> 00:00:45.850
So look for those on your
favorite online book retailer

00:00:45.850 --> 00:00:46.690
or bookstore.

00:00:46.690 --> 00:00:48.030
JJ BEHRENS: "Dart for
Hipsters" not

00:00:48.030 --> 00:00:48.770
going to press yet?

00:00:48.770 --> 00:00:49.890
SETH LADD: Already
been in press.

00:00:49.890 --> 00:00:50.520
JJ BEHRENS: Oh wow.

00:00:50.520 --> 00:00:51.460
I'm impressed.

00:00:51.460 --> 00:00:53.240
SETH LADD: Haha
[DRUM FILL SOUND].

00:00:53.240 --> 00:00:56.940
And actually, that's a good
segue because Chris Strong,

00:00:56.940 --> 00:01:00.090
who is the author of "Dart for
Hipsters," has now picked up

00:01:00.090 --> 00:01:00.950
blogging again on Dart.

00:01:00.950 --> 00:01:03.430
He is back, although he'll
say he never really left.

00:01:03.430 --> 00:01:07.020
So we welcome Chris again
to his blogs about Dart.

00:01:07.020 --> 00:01:10.340
For instance, he's been updating
his hipster MVC

00:01:10.340 --> 00:01:12.470
framework with the M1 syntax.

00:01:12.470 --> 00:01:15.550
So you can follow along with
what Chris is doing there.

00:01:15.550 --> 00:01:18.670
On the speaking front, Dart will
be a code mash in early

00:01:18.670 --> 00:01:20.890
January in Sandusky, Ohio.

00:01:20.890 --> 00:01:24.410
Now this is cool because it
is an indoor water park.

00:01:24.410 --> 00:01:25.160
JJ BEHRENS: That's awesome.

00:01:25.160 --> 00:01:25.600
SETH LADD: Yes.

00:01:25.600 --> 00:01:27.690
I don't know how we're ever
going to get anything done at

00:01:27.690 --> 00:01:30.330
this conference, but I'm coming
with my swim trunks.

00:01:30.330 --> 00:01:32.100
JJ BEHRENS: Why did I not get
invited to this conference?

00:01:34.780 --> 00:01:39.410
SETH LADD: And we'll also be
at DevOps in November, and

00:01:39.410 --> 00:01:41.850
Rich Web Experience, excuse
me, also in November.

00:01:41.850 --> 00:01:42.600
So lots of places.

00:01:42.600 --> 00:01:44.070
JJ, any upcoming talks?

00:01:44.070 --> 00:01:47.640
JJ BEHRENS: Yeah, I have JS camp
Asia in Singapore, and I

00:01:47.640 --> 00:01:49.130
have [SPEAKING SPANISH]

00:01:49.130 --> 00:01:50.200
in Mexico.

00:01:50.200 --> 00:01:52.360
And I'm really working on
my Spanish for that one.

00:01:52.360 --> 00:01:53.080
SETH LADD: Awesome, awesome.

00:01:53.080 --> 00:01:54.030
JJ BEHRENS: [SPEAKING SPANISH]

00:01:54.030 --> 00:01:56.230
SETH LADD: And later in this
week, actually, I think a

00:01:56.230 --> 00:01:57.760
little bit closer to
home, John, there's

00:01:57.760 --> 00:01:59.100
DrinkUp in San Francisco?

00:01:59.100 --> 00:02:01.260
JOHN MCCUTCHAN: Yeah,
this next Thursday.

00:02:01.260 --> 00:02:03.970
SETH LADD: OK, and do you have
any details about this?

00:02:03.970 --> 00:02:06.380
JOHN MCCUTCHAN: Not the
specifics right now, but it'll

00:02:06.380 --> 00:02:09.114
be in San Francisco, around
7:00 PM next Thursday, and

00:02:09.114 --> 00:02:11.770
we'll send out a public
invite on G+ too.

00:02:11.770 --> 00:02:12.630
SETH LADD: Awesome, awesome.

00:02:12.630 --> 00:02:13.880
So if you're in the
Bay Area, stop by.

00:02:13.880 --> 00:02:16.430
This is a DrinkUp to support
and celebrate the

00:02:16.430 --> 00:02:17.650
M1 release of Dart.

00:02:17.650 --> 00:02:20.680
And it's put on by the Dart
SF meet up group.

00:02:20.680 --> 00:02:23.220
And about every other month,
they do presentations.

00:02:23.220 --> 00:02:26.340
And then the alternate months,
they do these more social

00:02:26.340 --> 00:02:29.420
DrinkUps and Meetups, which
is really cool.

00:02:29.420 --> 00:02:31.970
We relaunched our presentations
and slides page

00:02:31.970 --> 00:02:32.990
on dartlang.org.

00:02:32.990 --> 00:02:35.220
And so you can see nice full
color graphics of all the

00:02:35.220 --> 00:02:39.020
videos and the slides and PDFs
that we're aware of, put on by

00:02:39.020 --> 00:02:40.130
the Dart team.

00:02:40.130 --> 00:02:43.010
And also on YouTube, the Google
Developers channel, we

00:02:43.010 --> 00:02:46.620
have a Dart playlist where we
feature videos from throughout

00:02:46.620 --> 00:02:47.840
the community, the ones
that we notice.

00:02:47.840 --> 00:02:50.730
And so lots of good ways to keep
up with the presentations

00:02:50.730 --> 00:02:52.340
that we have done in the past.

00:02:52.340 --> 00:02:54.250
And we'll continue to
update with the ones

00:02:54.250 --> 00:02:56.250
we'll do in the future.

00:02:56.250 --> 00:02:59.760
The editor continues their
solid cadence of releases

00:02:59.760 --> 00:03:01.270
almost every week.

00:03:01.270 --> 00:03:03.440
Some of the features I really
love from this release are

00:03:03.440 --> 00:03:04.620
more clean ups.

00:03:04.620 --> 00:03:08.050
Now the code cleanups are
fantastic because, as we rev

00:03:08.050 --> 00:03:11.080
the Dart language, how
do you maintain and

00:03:11.080 --> 00:03:12.600
keep up your old code?

00:03:12.600 --> 00:03:14.170
How do you make it compliant
with M1?

00:03:14.170 --> 00:03:16.340
Well, the editor can actually
do this for you.

00:03:16.340 --> 00:03:20.110
And so it can do the syntactic
transformations.

00:03:20.110 --> 00:03:22.720
And other, just, cleanups
in general, that

00:03:22.720 --> 00:03:23.740
keep you up to date.

00:03:23.740 --> 00:03:27.860
And they've added more, like
removing the abstract keyword

00:03:27.860 --> 00:03:29.340
from empty methods.

00:03:29.340 --> 00:03:31.410
So the editor can do these
kind of cleanups for you.

00:03:31.410 --> 00:03:34.260
JJ BEHRENS: Dude, the editor
team just like kicks butt.

00:03:34.260 --> 00:03:35.730
They're, like, solid.

00:03:35.730 --> 00:03:37.360
SETH LADD: Super solid
velocity of the team.

00:03:37.360 --> 00:03:40.110
So now with the editor's auto
update, you'll get all these

00:03:40.110 --> 00:03:40.890
new features as well.

00:03:40.890 --> 00:03:44.930
So try out the clean up to keep
updated with all your

00:03:44.930 --> 00:03:47.850
code syntax and libraries.

00:03:47.850 --> 00:03:49.440
A lot of cool videos, actually,
have come out from

00:03:49.440 --> 00:03:54.320
the Goto conference in Aarhus,
which seems to be a very good

00:03:54.320 --> 00:03:57.150
language and virtual
machine conference.

00:03:57.150 --> 00:03:59.680
But Lars Bach and, I hope I
get the name right, Anders

00:03:59.680 --> 00:04:02.280
Haalsberg, I hope I
got that correct--

00:04:02.280 --> 00:04:04.860
they have a great discussion
posted to Channel 9,

00:04:04.860 --> 00:04:07.120
Microsoft's equivalent to GDL.

00:04:07.120 --> 00:04:11.590
And Glen Brock and Erik Meyer,
I hope I got that correct,

00:04:11.590 --> 00:04:13.190
have another great discussion
as well.

00:04:13.190 --> 00:04:14.650
And these are posted
on Channel 9.

00:04:14.650 --> 00:04:17.339
So if you're interested more
about just language designs,

00:04:17.339 --> 00:04:18.980
[? function ?] machine designs,
compiling the

00:04:18.980 --> 00:04:20.100
JavaScript--

00:04:20.100 --> 00:04:21.050
some good stuff there.

00:04:21.050 --> 00:04:23.400
JOHN MCCUTCHAN: Yeah.

00:04:23.400 --> 00:04:26.000
SETH LADD: Moving back over to
the community, Victor Savkin

00:04:26.000 --> 00:04:27.370
continues with DartCast.

00:04:27.370 --> 00:04:29.990
So he has dartcast.com, which is
really cool, and he's done

00:04:29.990 --> 00:04:33.135
three screen casts already about
just various features of

00:04:33.135 --> 00:04:35.370
the editor or the language.

00:04:35.370 --> 00:04:37.030
So we are really excited to
see what he's doing there.

00:04:37.030 --> 00:04:39.940
And if you want to see more,
just short how-to videos with

00:04:39.940 --> 00:04:42.570
Dart, check out dartcast.com.

00:04:42.570 --> 00:04:45.110
Speaking of victories, also
working on a data binding

00:04:45.110 --> 00:04:47.040
library for Dart.

00:04:47.040 --> 00:04:48.570
This one uses mirrors.

00:04:48.570 --> 00:04:51.970
And so this is probably a good
time to clarify our qualify,

00:04:51.970 --> 00:04:56.440
the use of mirrors is right now
really a VM only future.

00:04:56.440 --> 00:04:59.160
I'm not exactly sure how and
when we'll get into Dart to

00:04:59.160 --> 00:05:02.700
JS, but I think working in
the VM is good first.

00:05:02.700 --> 00:05:08.730
We can explore the API and get
it really solid for that too.

00:05:08.730 --> 00:05:12.320
There's a group of Dartisans
in Lithuania who have been

00:05:12.320 --> 00:05:14.970
translating the dartlang.org
site, which is

00:05:14.970 --> 00:05:15.900
really cool to see.

00:05:15.900 --> 00:05:17.890
And they reached out and asked
if they can do that, and of

00:05:17.890 --> 00:05:19.020
course we said yes.

00:05:19.020 --> 00:05:22.810
And this is really just a call
to action to communities all

00:05:22.810 --> 00:05:25.350
over the globe-- if there's
stuff you want to translate or

00:05:25.350 --> 00:05:27.690
get localized for your
community, we're here to

00:05:27.690 --> 00:05:28.270
support you.

00:05:28.270 --> 00:05:31.950
And thanks to the Lithuanian
Dartisans for that.

00:05:31.950 --> 00:05:35.290
John Evans, one of our solid
Windows users, has confirmed

00:05:35.290 --> 00:05:39.175
that dart editor pub, et cetera,
is working on Windows

00:05:39.175 --> 00:05:41.320
8, I'm which is great.

00:05:41.320 --> 00:05:43.470
So if you've updated to the
latest version of Windows,

00:05:43.470 --> 00:05:45.900
John's confirming that our Dart
tools seem to work just

00:05:45.900 --> 00:05:46.330
fine there.

00:05:46.330 --> 00:05:49.580
So that's really good to hear.

00:05:49.580 --> 00:05:51.310
Bernard [? Pitular ?]

00:05:51.310 --> 00:05:53.870
has been playing with Web
Audio API and Dart.

00:05:53.870 --> 00:05:56.980
Now, Bernard is working on the
Dart flash library, which is

00:05:56.980 --> 00:05:59.120
really cool. have you
guys seen this?

00:05:59.120 --> 00:06:01.360
JJ BEHRENS: I'm going to focus
on that right around December.

00:06:01.360 --> 00:06:04.270
Actually, I'm going to do a lot
of work with ActionScript

00:06:04.270 --> 00:06:06.240
developers.

00:06:06.240 --> 00:06:10.110
SETH LADD: There seems to be a
lot of familiarity there with

00:06:10.110 --> 00:06:11.300
ActionScript 3 developers
and Dart.

00:06:11.300 --> 00:06:14.480
And Bernard really keyed off of
that kind of early on, has

00:06:14.480 --> 00:06:17.130
been working on this API library
to make it easier for

00:06:17.130 --> 00:06:20.380
people from an ActionScript 3
background to work with Dart.

00:06:20.380 --> 00:06:22.590
And so if you want to learn
to play "Hey Jude" in the

00:06:22.590 --> 00:06:25.700
browser, check out his
latest experiment.

00:06:25.700 --> 00:06:27.270
It's really fun.

00:06:27.270 --> 00:06:29.040
I want a special call
out to Blossom.

00:06:29.040 --> 00:06:32.320
It's a new startup in the Bay
Area working on lean project

00:06:32.320 --> 00:06:32.830
management.

00:06:32.830 --> 00:06:36.700
And they recently had a blog
post about using Dart in

00:06:36.700 --> 00:06:38.510
production in their stack,
which is really cool.

00:06:38.510 --> 00:06:40.770
So I don't have too many
details, but they listed a lot

00:06:40.770 --> 00:06:44.940
of common projects like, if I
remember, NodeJS, and Dart,

00:06:44.940 --> 00:06:47.920
and so it seems like they have
a good kind of polyglot

00:06:47.920 --> 00:06:49.710
production stack,
which is cool.

00:06:49.710 --> 00:06:52.570
So check out that
to learn more.

00:06:52.570 --> 00:06:55.700
And this is actually a pretty
good segue into our guest, but

00:06:55.700 --> 00:07:00.150
Kevin Moore has released his
first straw man, first test

00:07:00.150 --> 00:07:02.440
around a Dart build system
he's calling Hop.

00:07:02.440 --> 00:07:05.520
And it's a call for comments to
see what kind of experience

00:07:05.520 --> 00:07:06.190
that you would like.

00:07:06.190 --> 00:07:09.090
And you can find this--

00:07:09.090 --> 00:07:10.810
I don't know if you can find
this, but you can find many

00:07:10.810 --> 00:07:12.600
libraries we've talking
about, and hopefully

00:07:12.600 --> 00:07:13.850
Hop soon, on Pub.

00:07:13.850 --> 00:07:17.340
And so I want to lead in today
with just showing off our

00:07:17.340 --> 00:07:18.340
package manager.

00:07:18.340 --> 00:07:20.200
So I'm going to go ahead and
share my screen here.

00:07:27.690 --> 00:07:28.680
OK.

00:07:28.680 --> 00:07:31.410
So we've done a lot about
community today.

00:07:31.410 --> 00:07:33.710
And we're going to need some of
our community guests just

00:07:33.710 --> 00:07:34.360
here in a moment.

00:07:34.360 --> 00:07:37.060
But where is really
this the focal

00:07:37.060 --> 00:07:38.170
point of the Dart community?

00:07:38.170 --> 00:07:41.510
Well, I think it's one pub,
our package manager.

00:07:41.510 --> 00:07:45.540
We have called that
pub.dartling.org, hopefully

00:07:45.540 --> 00:07:47.773
you guys can see
that coming in.

00:07:47.773 --> 00:07:48.699
No?

00:07:48.699 --> 00:07:49.949
Hmm.

00:07:51.940 --> 00:07:52.690
JOHN MCCUTCHAN: Looks
a little blurry.

00:07:52.690 --> 00:07:54.010
SETH LADD: Sorry, we're having
technical difficulties here

00:07:54.010 --> 00:07:55.520
with the font here.

00:07:55.520 --> 00:07:57.390
I'm going to try stop screen
sharing here for just a

00:07:57.390 --> 00:07:59.680
moment, and we'll
try it again.

00:07:59.680 --> 00:08:01.600
JJ BEHRENS: So it's kind of
interesting how he called the

00:08:01.600 --> 00:08:02.810
build system Hop.

00:08:02.810 --> 00:08:04.950
I would've guessed that he would
have gone after Dake,

00:08:04.950 --> 00:08:07.830
you know, for Dart Make.

00:08:07.830 --> 00:08:09.167
SETH LADD: That's a good
question for Kevin.

00:08:09.167 --> 00:08:11.120
We'll ask him in a moment.

00:08:11.120 --> 00:08:13.350
JJ BEHRENS: Yeah, so there was
a programming language called

00:08:13.350 --> 00:08:14.110
Brain Fuck.

00:08:14.110 --> 00:08:17.940
And I actually built build
system for Brain Fuck.

00:08:17.940 --> 00:08:21.640
And I made it so that you had to
put spaces before the tabs

00:08:21.640 --> 00:08:26.350
in order to denote the execution
block because you

00:08:26.350 --> 00:08:30.610
simply differentiating between
spaces and tabs wasn't enough.

00:08:30.610 --> 00:08:32.299
I thought like invisible spaces

00:08:32.299 --> 00:08:34.350
would actually be funnier.

00:08:34.350 --> 00:08:35.600
SETH LADD: Let's see
what happens here.

00:08:39.000 --> 00:08:41.500
Is it any better now, guys?

00:08:41.500 --> 00:08:45.250
JOHN MCCUTCHAN: Wow, that's
unfortunate that the text is

00:08:45.250 --> 00:08:46.460
really coming out garbled.

00:08:46.460 --> 00:08:47.576
SETH LADD: OK, I'm going
full screen.

00:08:47.576 --> 00:08:48.550
Does that help?

00:08:48.550 --> 00:08:49.620
Negative.

00:08:49.620 --> 00:08:50.490
OK, you know what?

00:08:50.490 --> 00:08:51.290
We're just going to move on.

00:08:51.290 --> 00:08:53.180
We're going to just talk
about Pub, and I'll

00:08:53.180 --> 00:08:54.390
stop our screen sharing.

00:08:54.390 --> 00:08:55.730
Hopefully, it works much
better for our guests.

00:08:55.730 --> 00:08:57.630
It was working better earlier.

00:08:57.630 --> 00:09:00.090
So pub.dartling.org is--

00:09:00.090 --> 00:09:01.570
yes--

00:09:01.570 --> 00:09:04.990
is our package hosting
service for Dart.

00:09:04.990 --> 00:09:07.370
Is it online now?

00:09:07.370 --> 00:09:07.980
OK.

00:09:07.980 --> 00:09:09.183
Our guests at home can see it?

00:09:09.183 --> 00:09:09.910
MALE SPEAKER 1: Yes.

00:09:09.910 --> 00:09:10.490
SETH LADD: Awesome.

00:09:10.490 --> 00:09:11.590
MALE SPEAKER 1: [INAUDIBLE]

00:09:11.590 --> 00:09:14.130
SETH LADD: OK, can you increase
the font a bunch?

00:09:14.130 --> 00:09:16.880
So this is where you're going
to find all of our community

00:09:16.880 --> 00:09:18.980
packages around Dart.

00:09:18.980 --> 00:09:21.780
We've got MVC frameworks, we've
got utility libraries,

00:09:21.780 --> 00:09:24.570
we have logging frameworks, not
only that, we also have

00:09:24.570 --> 00:09:25.980
all the documentation as well.

00:09:25.980 --> 00:09:27.280
How do you create your
own package?

00:09:27.280 --> 00:09:29.000
How do you use a package?

00:09:29.000 --> 00:09:31.110
If you were to click into a
certain package, you see

00:09:31.110 --> 00:09:33.460
really nice set of metadata
around the description of the

00:09:33.460 --> 00:09:36.030
package, the author, how you
contact the author, the

00:09:36.030 --> 00:09:38.570
package's homepage, versions.

00:09:38.570 --> 00:09:43.170
But I also like it on the right,
is a list of how do

00:09:43.170 --> 00:09:44.605
you, yourself use a package.

00:09:44.605 --> 00:09:48.300
Well, you can go through the
Dart Editor and actually, I'm

00:09:48.300 --> 00:09:51.130
sorry, you can define your
dependencies for the packages

00:09:51.130 --> 00:09:52.450
in your pubspec [INAUDIBLE]

00:09:52.450 --> 00:09:55.280
file and then use Dart Editor to
actually run Pub and go get

00:09:55.280 --> 00:09:56.610
all the packages for you.

00:09:56.610 --> 00:09:58.740
Or of course, you can do
it on the command line.

00:09:58.740 --> 00:10:01.660
All the instructions, all the
documentation, and the list of

00:10:01.660 --> 00:10:04.410
community packages, they're
all on pub.dartlang.org.

00:10:04.410 --> 00:10:06.220
You can find the stuff that
we've been talking about today

00:10:06.220 --> 00:10:07.600
and some of the stuff our
community members

00:10:07.600 --> 00:10:09.200
are working on there.

00:10:09.200 --> 00:10:10.970
And we'll continue
fleshing it out.

00:10:10.970 --> 00:10:13.360
And so I highly recommend
checking it out.

00:10:13.360 --> 00:10:14.580
Cool.

00:10:14.580 --> 00:10:17.410
So with that, let's meet some of
the authors behind some of

00:10:17.410 --> 00:10:21.120
these packages that you can
find on pub.dartlang.org.

00:10:21.120 --> 00:10:25.740
I want to hopefully go to the
Hangout here and welcome some

00:10:25.740 --> 00:10:26.850
of our external guests.

00:10:26.850 --> 00:10:30.080
So welcome everyone, Alex and
Kevin, thank you guys for

00:10:30.080 --> 00:10:32.620
joining us.

00:10:32.620 --> 00:10:33.500
And you might have--

00:10:33.500 --> 00:10:34.480
oh, great, OK.

00:10:34.480 --> 00:10:34.900
Alex.

00:10:34.900 --> 00:10:36.000
KEVIN MOORE: Hey Seth.

00:10:36.000 --> 00:10:38.360
SETH LADD: Hey Kevin,
thank you for--

00:10:38.360 --> 00:10:40.152
Alex, let's start with you.

00:10:40.152 --> 00:10:43.280
Could you introduce yourself?

00:10:43.280 --> 00:10:46.190
How are you involved with
the Dart project?

00:10:46.190 --> 00:10:49.020
ALEXANDER APRELEV: Right, so I
knew about Dart since it was

00:10:49.020 --> 00:10:52.910
announced, since I've been
working on GWT applications

00:10:52.910 --> 00:10:54.430
for a while.

00:10:54.430 --> 00:11:00.040
And then I always wanted to work
closer with open source

00:11:00.040 --> 00:11:03.470
projects, just to get a sense
of what it is like.

00:11:03.470 --> 00:11:10.510
And then, this summer, when
my family was visiting our

00:11:10.510 --> 00:11:13.610
grandparents, I had a lot of
time that I feel I could

00:11:13.610 --> 00:11:18.150
spare, so I got the source
code for Dart, build it

00:11:18.150 --> 00:11:23.950
locally, and basically the next
step was just to see what

00:11:23.950 --> 00:11:26.200
I can [INAUDIBLE]

00:11:26.200 --> 00:11:31.680
play with, get some hands
on experience with that.

00:11:31.680 --> 00:11:36.730
And I was browsing through the
Dart blog, which is a website

00:11:36.730 --> 00:11:42.810
where, let me share the page.

00:11:42.810 --> 00:11:47.720
So actually the framework
around Dart is extremely

00:11:47.720 --> 00:11:51.180
robust and easy to use.

00:11:51.180 --> 00:11:55.080
Anyway, so, basically, when I
was building the Dart for Mac,

00:11:55.080 --> 00:11:58.270
I saw that there was a problem
that I myself witnessed, and

00:11:58.270 --> 00:11:59.500
then I saw that there's
was a bug actually

00:11:59.500 --> 00:12:01.010
opened against that.

00:12:01.010 --> 00:12:03.520
So I decided to investigate
that.

00:12:03.520 --> 00:12:09.050
It was more along the lines of,
I have friends who do the

00:12:09.050 --> 00:12:15.540
code [INAUDIBLE] partitions and
basically solve artificial

00:12:15.540 --> 00:12:17.880
computer science problems.

00:12:17.880 --> 00:12:21.847
I saw this as an opportunity to
solve something real that

00:12:21.847 --> 00:12:26.670
could benefit the community,
the Dart community.

00:12:26.670 --> 00:12:31.870
And I spent, like, on this
particular one, I spent only a

00:12:31.870 --> 00:12:35.510
couple weeks, actually, looking
into the code, so the

00:12:35.510 --> 00:12:37.740
description is just
straightforward, just the

00:12:37.740 --> 00:12:39.220
build gets stuck.

00:12:39.220 --> 00:12:45.720
And you can see people putting
all the thread

00:12:45.720 --> 00:12:48.620
stack traces, et cetera.

00:12:48.620 --> 00:12:52.610
But it turns out, after some
investigation, it turns out

00:12:52.610 --> 00:12:56.780
that the issue was caused by
the xcode 4, explicitly

00:12:56.780 --> 00:13:02.120
blocking signals, which actually
prevented Dart to

00:13:02.120 --> 00:13:03.990
notice that the child
process exited.

00:13:07.220 --> 00:13:10.490
So with that, I mean, initially,
I put this change

00:13:10.490 --> 00:13:13.890
into the comments, but
then I took a little

00:13:13.890 --> 00:13:16.321
bit to get the response.

00:13:16.321 --> 00:13:18.850
No actually, yeah, so this one
was responded very quickly.

00:13:18.850 --> 00:13:21.390
And then I thought that, all
right, let me make a next

00:13:21.390 --> 00:13:25.190
step, which is actually
create a fix for this.

00:13:25.190 --> 00:13:27.300
So this is all described--

00:13:27.300 --> 00:13:30.950
so this is another, this is
another page that is part of

00:13:30.950 --> 00:13:34.840
the development life cycle for
Dart, Chrome and code reviews.

00:13:34.840 --> 00:13:39.740
So I created a patch, uploaded
it here, to the Chrome and

00:13:39.740 --> 00:13:44.980
code reviews, have it reviewed
by Bill here, and Bill

00:13:44.980 --> 00:13:46.755
committed it on my behalf.

00:13:46.755 --> 00:13:51.110
I mean, I mean, it was something
that made sense to

00:13:51.110 --> 00:13:52.410
the community.

00:13:52.410 --> 00:13:52.760
SETH LADD: Awesome.

00:13:52.760 --> 00:13:55.480
So this really speaks to Dart
being an open source project.

00:13:55.480 --> 00:13:58.620
That is, you were able to file
bugs, view the bug tracker

00:13:58.620 --> 00:14:01.800
itself, comment on the bugs,
and, in this case, actually

00:14:01.800 --> 00:14:05.340
submit a patch and work with the
Dart engineers to get that

00:14:05.340 --> 00:14:06.340
patch committed.

00:14:06.340 --> 00:14:08.080
That's awesome.

00:14:08.080 --> 00:14:08.490
ALEXANDER APRELEV:
Exactly right.

00:14:08.490 --> 00:14:09.600
SETH LADD: But now
I think you're

00:14:09.600 --> 00:14:10.750
doing a lot more, right?

00:14:10.750 --> 00:14:13.330
So you've got the external
committer bit.

00:14:13.330 --> 00:14:14.722
Is that true?

00:14:14.722 --> 00:14:16.010
ALEXANDER APRELEV: True, true.

00:14:16.010 --> 00:14:18.620
Yes, and I think after
I got about--

00:14:21.960 --> 00:14:22.880
four changes.

00:14:22.880 --> 00:14:26.380
Changes were committed, and
five were in the pipeline,

00:14:26.380 --> 00:14:29.430
being reviewed, Peter
from [? Aarhus ?]

00:14:29.430 --> 00:14:34.770
DartJS team just asked whether
I'm interested in having

00:14:34.770 --> 00:14:37.380
external committers
access rights.

00:14:37.380 --> 00:14:40.240
And I saw that as, OK, that's
another interesting angle,

00:14:40.240 --> 00:14:43.550
that I want to see how it's done
in Dart team, the whole

00:14:43.550 --> 00:14:47.060
build process, those
build [? blog ?]

00:14:47.060 --> 00:14:51.840
website, which looks like
intriguing and scary.

00:14:51.840 --> 00:14:57.700
I wanted to see what's it like
for you, and I got that.

00:14:57.700 --> 00:15:01.840
And since then, I was really
shepherded and guided by Peter

00:15:01.840 --> 00:15:03.060
and Dart to JS team.

00:15:03.060 --> 00:15:06.780
And that's actually where I
spend most of my time in terms

00:15:06.780 --> 00:15:09.176
of contributing to dart.

00:15:09.176 --> 00:15:11.740
JJ BEHRENS: You know, when you
said that you fixed some weird

00:15:11.740 --> 00:15:14.430
on Xcode involving signals,
I was impressed.

00:15:14.430 --> 00:15:18.340
But when you said that Peter
approved of it, like, you are

00:15:18.340 --> 00:15:20.990
on a whole other plane of
coolness to get Peter to

00:15:20.990 --> 00:15:22.360
approve of anything.

00:15:22.360 --> 00:15:24.330
SETH LADD: Yeah, the Dart to JS
is really, really good, and

00:15:24.330 --> 00:15:27.290
I think it speaks to Alexander's
skills as well to

00:15:27.290 --> 00:15:28.210
gain their respect.

00:15:28.210 --> 00:15:29.040
JJ BEHRENS: Absolutely.

00:15:29.040 --> 00:15:31.620
SETH LADD: But I also wanted to
say thanks to the Dart to

00:15:31.620 --> 00:15:33.900
JS team for shepherding
external committers.

00:15:33.900 --> 00:15:36.990
I think that's just fantastic
for them to open up a little

00:15:36.990 --> 00:15:40.245
bit more and help get more
help and contributions.

00:15:40.245 --> 00:15:43.620
So it's really cool to see this
two way collaboration.

00:15:43.620 --> 00:15:44.950
JJ BEHRENS: Absolutely.

00:15:44.950 --> 00:15:47.920
SETH LADD: So what are some of
the features or bugs you're

00:15:47.920 --> 00:15:51.480
working on now for Dart to JS?

00:15:51.480 --> 00:15:53.580
ALEXANDER APRELEV: So the most
recent one that we worked on

00:15:53.580 --> 00:16:00.750
is actually improvements of the
internal implementation of

00:16:00.750 --> 00:16:03.925
the way how the name resolution
is implemented.

00:16:03.925 --> 00:16:06.110
It's not necessarily
visible directly.

00:16:06.110 --> 00:16:08.610
That's actually another thing
that is extremely impressive--

00:16:08.610 --> 00:16:12.770
team is not only focused on
delivering fixers and fixing

00:16:12.770 --> 00:16:16.495
bugs, but also, at the same
time, cleaning up internals of

00:16:16.495 --> 00:16:20.440
the engine, making sure that
everything is designed and

00:16:20.440 --> 00:16:21.690
architected properly.

00:16:23.960 --> 00:16:25.750
So that's in Dart to JS.

00:16:25.750 --> 00:16:32.800
The most exciting bug that I
worked on recently involved a

00:16:32.800 --> 00:16:36.510
Windows platform where there was
some weird problems with

00:16:36.510 --> 00:16:39.390
the file being left
close by Dart.

00:16:39.390 --> 00:16:45.340
It turns out that, once again,
the fix was very simple, but

00:16:45.340 --> 00:16:48.940
it was something that, again,
took a little bit of research.

00:16:48.940 --> 00:16:54.590
But that's exactly the kind of
adrenaline that I was looking

00:16:54.590 --> 00:16:56.700
for and am looking for.

00:16:56.700 --> 00:16:57.190
SETH LADD: Awesome.

00:16:57.190 --> 00:17:00.020
Do you have any advice for
people who want to get more

00:17:00.020 --> 00:17:02.530
involved with Dart, either at
the patch level, or for

00:17:02.530 --> 00:17:05.250
developers who are interested in
getting external committer

00:17:05.250 --> 00:17:08.440
access, like you did?

00:17:08.440 --> 00:17:11.079
ALEXANDER APRELEV: So the whole
infrastructure, as I

00:17:11.079 --> 00:17:13.089
mentioned, that is used
by Dart, starting from

00:17:13.089 --> 00:17:17.480
[INAUDIBLE], Chromium code
review, build [? bot, ?]

00:17:17.480 --> 00:17:23.460
these are all extremely
solid, extremely

00:17:23.460 --> 00:17:25.369
robust pieces of software.

00:17:25.369 --> 00:17:28.970
So the dartboard.com is the
excellent place to start in

00:17:28.970 --> 00:17:34.430
terms of figuring out what's the
critical or high priority

00:17:34.430 --> 00:17:39.020
bugs that Google team, Dart
team, needs help with.

00:17:39.020 --> 00:17:43.955
So sort by criticality, by
priority, and identify the

00:17:43.955 --> 00:17:46.440
area of an interest to you.

00:17:46.440 --> 00:17:49.260
Like, I picked up Dart to JS
because I had some background

00:17:49.260 --> 00:17:52.990
in parsing, and some of the
issues that I saw there seemed

00:17:52.990 --> 00:17:54.350
pretty just straightforward
to me.

00:17:54.350 --> 00:17:58.950
And putting aside
Mac build issue.

00:17:58.950 --> 00:18:02.990
But yeah, look through the
bugs, identify something

00:18:02.990 --> 00:18:06.650
that's of an interest to you,
and just go for it.

00:18:06.650 --> 00:18:09.300
SETH LADD: So when they code
reviewed your changes, did you

00:18:09.300 --> 00:18:10.230
get any feedback?

00:18:10.230 --> 00:18:12.780
Did they ask you to
make any changes?

00:18:12.780 --> 00:18:14.450
ALEXANDER APRELEV: Oh yeah,
yeah, that's actually--

00:18:14.450 --> 00:18:18.210
code review process is something
that, generally

00:18:18.210 --> 00:18:21.490
speaking, developers don't--

00:18:21.490 --> 00:18:23.340
well, I don't know, I shouldn't
generalize.

00:18:23.340 --> 00:18:26.570
But it's not really taken
very seriously.

00:18:26.570 --> 00:18:31.510
But especially in Dart to JS
team, the amount of effort

00:18:31.510 --> 00:18:34.050
that goes into code reviews--

00:18:34.050 --> 00:18:35.670
it's exceptional.

00:18:35.670 --> 00:18:38.520
You learn much more from
code reviews than

00:18:38.520 --> 00:18:39.460
from anything else.

00:18:39.460 --> 00:18:42.360
So of course, reading the source
code, but actually

00:18:42.360 --> 00:18:44.950
doing the code review
is very useful.

00:18:44.950 --> 00:18:47.960
JJ BEHRENS: Yeah, I know that
at Google in general, we

00:18:47.960 --> 00:18:48.940
really like code reviews.

00:18:48.940 --> 00:18:51.120
But I think that that points out
something very important.

00:18:51.120 --> 00:18:53.060
And that's that if you want
to contribute to the Dart

00:18:53.060 --> 00:18:57.840
project, you have to be ready to
accept feedback, because no

00:18:57.840 --> 00:19:00.460
matter what change you make,
whether you're on the team or

00:19:00.460 --> 00:19:03.000
not on the team, people
are going to tell

00:19:03.000 --> 00:19:05.105
you to make it better.

00:19:05.105 --> 00:19:05.500
ALEXANDER APRELEV: Absolutely.

00:19:05.500 --> 00:19:07.780
SETH LADD: It's definitely
part of the culture.

00:19:07.780 --> 00:19:09.500
ALEXANDER APRELEV: Yeah,
and that's one thing

00:19:09.500 --> 00:19:10.250
that I really enjoy.

00:19:10.250 --> 00:19:15.870
I mean, personally, yeah, I
mean, one of the reasons why I

00:19:15.870 --> 00:19:18.480
increased the amount of time
I spent on this is that I'm

00:19:18.480 --> 00:19:20.662
learning a lot, for sure.

00:19:20.662 --> 00:19:22.840
SETH LADD: Well, I liked
what you said--

00:19:22.840 --> 00:19:25.895
find bugs or fixes that you
yourself are interested in.

00:19:25.895 --> 00:19:28.500
And I think that's one of the
tenets of open source

00:19:28.500 --> 00:19:28.890
development--

00:19:28.890 --> 00:19:29.840
scratch your own itch.

00:19:29.840 --> 00:19:32.870
And so, if you're interested in
working on or helping Dart,

00:19:32.870 --> 00:19:35.670
find the area that interests you
and work on the thing that

00:19:35.670 --> 00:19:36.410
gets you excited.

00:19:36.410 --> 00:19:37.800
And that's probably the best
way you're going to be

00:19:37.800 --> 00:19:39.244
successful.

00:19:39.244 --> 00:19:40.130
JOHN MCCUTCHAN: Yep.

00:19:40.130 --> 00:19:41.390
ALEXANDER APRELEV:
That's right.

00:19:41.390 --> 00:19:42.550
SETH LADD: Great, well
thank you, Alex.

00:19:42.550 --> 00:19:44.980
We look forward to further
contributions and working with

00:19:44.980 --> 00:19:47.440
you on Dart to JS and other
projects in Dart.

00:19:47.440 --> 00:19:47.730
JOHN MCCUTCHAN: Awesome.

00:19:47.730 --> 00:19:48.610
ALEXANDER APRELEV:
Sounds good.

00:19:48.610 --> 00:19:50.510
SETH LADD: Let's say
hi to Kevin Moore.

00:19:50.510 --> 00:19:52.750
Kevin is one of our early
adopters of Dart, and he's

00:19:52.750 --> 00:19:55.840
been publishing libraries to
Pub, which we saw earlier.

00:19:55.840 --> 00:19:58.560
And some of these libraries he
wants to show off today.

00:19:58.560 --> 00:20:01.600
So hi Kevin, welcome
to the show.

00:20:01.600 --> 00:20:04.620
KEVIN MOORE: Thanks Seth, thanks
for having me today.

00:20:04.620 --> 00:20:05.870
SETH LADD: Oh, it's
our pleasure.

00:20:05.870 --> 00:20:07.810
So Kevin, you've been working
on a bunch of stuff.

00:20:07.810 --> 00:20:10.150
You've been working on "Pop,
Pop, Win" which is a great

00:20:10.150 --> 00:20:12.370
HTML5 game built into
Dart that works

00:20:12.370 --> 00:20:15.140
on mobile and desktop.

00:20:15.140 --> 00:20:17.380
Oh, you just kicked off an
effort to explore what a build

00:20:17.380 --> 00:20:20.200
system might look like, but I
think today we want to focus

00:20:20.200 --> 00:20:21.750
on one of your other projects.

00:20:21.750 --> 00:20:22.550
Let's start there.

00:20:22.550 --> 00:20:24.730
What did you want to
show off today?

00:20:24.730 --> 00:20:27.290
KEVIN MOORE: Today I want to
talk about the Bag of Tricks

00:20:27.290 --> 00:20:28.910
that I call--

00:20:28.910 --> 00:20:31.560
it's actually in the library
that I started.

00:20:31.560 --> 00:20:33.760
I called a set of tools I built
at Microsoft when I was

00:20:33.760 --> 00:20:35.955
there in 2005, 2006,
the bag of tricks.

00:20:35.955 --> 00:20:40.090
And I realized it was a good
name for this general set of

00:20:40.090 --> 00:20:41.750
tools and libraries
that I used.

00:20:41.750 --> 00:20:44.770
In building systems, often you
want to encourage reuse, and

00:20:44.770 --> 00:20:47.110
so it's something that I
certainly like to have when

00:20:47.110 --> 00:20:48.060
I'm building software.

00:20:48.060 --> 00:20:51.915
And obviously, with Pub out now,
it's really easy to share

00:20:51.915 --> 00:20:54.260
that sort of stuff with
people in the wild.

00:20:54.260 --> 00:20:56.640
So it's an interesting
collection of things.

00:20:56.640 --> 00:20:58.490
I try to organize it well
internally, but it

00:20:58.490 --> 00:21:00.182
does a lot of stuff.

00:21:00.182 --> 00:21:02.550
JOHN MCCUTCHAN: Wow, cool.

00:21:02.550 --> 00:21:04.550
SETH LADD: And I also have to
say that you have a great logo

00:21:04.550 --> 00:21:06.076
for your project.

00:21:06.076 --> 00:21:06.430
KEVIN MOORE: Oh, thank you.

00:21:06.430 --> 00:21:09.040
Actually, I wonder if
I have it up here.

00:21:09.040 --> 00:21:11.750
I wanted to talk about "Pop,
Pop, Win," but yeah, if you

00:21:11.750 --> 00:21:16.020
wanted to take a look at
it, it's on github.

00:21:16.020 --> 00:21:16.780
[? KevMu ?]

00:21:16.780 --> 00:21:21.860
is my name, and it's box.dart,
so it's easy to find there.

00:21:21.860 --> 00:21:28.070
And I must give credit to my
business partner, actually,

00:21:28.070 --> 00:21:29.330
for doing the logo.

00:21:29.330 --> 00:21:31.900
So I realized I started clicking
without clicking

00:21:31.900 --> 00:21:33.422
share screen, so just
one second and I'll

00:21:33.422 --> 00:21:37.200
show you the logo.

00:21:37.200 --> 00:21:38.450
Just one second.

00:21:40.980 --> 00:21:42.330
So thanks [? Robbie ?]
for the logo, and

00:21:42.330 --> 00:21:45.466
here's the page on github.

00:21:45.466 --> 00:21:47.230
I'm actively maintaining it.

00:21:47.230 --> 00:21:48.030
It is on pub.

00:21:48.030 --> 00:21:52.050
I try to be pretty explicit
about the version I'm on, the

00:21:52.050 --> 00:21:52.950
version of Dart I'm on.

00:21:52.950 --> 00:21:56.800
So actually, if you open up
the change log, mark down

00:21:56.800 --> 00:21:59.860
file, you'll see that
if you align with--

00:21:59.860 --> 00:22:01.220
[INAUDIBLE] right here.

00:22:01.220 --> 00:22:06.900
So there's 2.0 branch in your
pub file, or the 2.0.2.1

00:22:06.900 --> 00:22:09.340
aligns with the M1
build we call.

00:22:09.340 --> 00:22:14.030
And then the releases since,
2.0.2.3 and 2.0.2.4, align

00:22:14.030 --> 00:22:19.480
with, I think it was the last
major editor release, which is

00:22:19.480 --> 00:22:21.510
not the most recent one,
but the one before.

00:22:21.510 --> 00:22:23.480
I'm having some bugs with
the most recent one.

00:22:23.480 --> 00:22:26.100
So something I'm really trying
to do here and encourage other

00:22:26.100 --> 00:22:29.250
library authors is something
called semantic versioning.

00:22:29.250 --> 00:22:31.600
And the idea is--

00:22:31.600 --> 00:22:34.440
you might end up with more
releases than you want, I'm

00:22:34.440 --> 00:22:39.040
staying kind of pre 1 until
Dart is released, but,

00:22:39.040 --> 00:22:42.750
basically, every time I change
things, I try to increment the

00:22:42.750 --> 00:22:44.238
build number so it's pretty
clear to people

00:22:44.238 --> 00:22:45.760
if I've broken something.

00:22:45.760 --> 00:22:47.650
SETH LADD: Cool, so Kevin, what
are some of the things

00:22:47.650 --> 00:22:49.110
that BOT does?

00:22:49.110 --> 00:22:51.835
KEVIN MOORE: So an example I
wanted to show quick was "Pop,

00:22:51.835 --> 00:22:57.220
Pop, Win" was the game I wrote
or to show off Dart and do

00:22:57.220 --> 00:22:58.990
some interesting things.

00:22:58.990 --> 00:23:01.436
So quickly, I don't know if
you're hearing sounds, but--

00:23:01.436 --> 00:23:03.710
ooh, and it blows up.

00:23:03.710 --> 00:23:05.570
And so there's actually a lot of
stuff going on in the game

00:23:05.570 --> 00:23:07.940
in terms of doing a lot of
drawing to canvas, allowing

00:23:07.940 --> 00:23:09.910
interaction, you'll see the
mouse kind of changes.

00:23:09.910 --> 00:23:12.720
And so really, what the
Bag of Tricks does--

00:23:12.720 --> 00:23:15.810
it exposes the set of libraries
that let you build

00:23:15.810 --> 00:23:17.780
interactive content on canvas.

00:23:17.780 --> 00:23:19.580
That's actually one part
of the Bag of Tricks.

00:23:19.580 --> 00:23:22.920
And so we're looking at the
source right now for BOT in

00:23:22.920 --> 00:23:23.800
our Dart Editor.

00:23:23.800 --> 00:23:27.818
And you'll see that I have the
retained library open.

00:23:27.818 --> 00:23:29.720
So trying to follow the
guidelines that

00:23:29.720 --> 00:23:31.060
exist in the libraries.

00:23:31.060 --> 00:23:34.290
You see the retained bit, if
you want to import it,

00:23:34.290 --> 00:23:37.240
includes a bunch of stuff,
things to do in canvas, and

00:23:37.240 --> 00:23:39.930
clicking, doing basic visuals.

00:23:39.930 --> 00:23:42.210
And so, if you want a simple
flavor, if you're looking at

00:23:42.210 --> 00:23:44.750
the source code, a very
simple thing to play

00:23:44.750 --> 00:23:46.000
would be the spin demo.

00:23:46.000 --> 00:23:48.390
So we'll go to the example
folder and

00:23:48.390 --> 00:23:49.640
run this one in Dartium.

00:23:52.088 --> 00:23:56.080
Drum roll as Dartium loads, and
an error message because

00:23:56.080 --> 00:23:59.550
we have slight version
conflicts.

00:23:59.550 --> 00:24:02.180
This is what we get for having
a very fast moving build

00:24:02.180 --> 00:24:03.620
process from the Dart team.

00:24:03.620 --> 00:24:05.270
And so obviously, this looks
very simple, right?

00:24:05.270 --> 00:24:09.250
But some of the interesting
things, because the canvas API

00:24:09.250 --> 00:24:12.220
in HTML doesn't have any
notion of element.

00:24:12.220 --> 00:24:14.520
It's [? just up ?] here
[? bit ?] buffer, you need to

00:24:14.520 --> 00:24:16.620
work to add your own
event handling.

00:24:16.620 --> 00:24:19.940
So if you notice, as I mouse
over here, we get an indicator

00:24:19.940 --> 00:24:22.690
that the mouse is over this
rectangle, and the spinning

00:24:22.690 --> 00:24:25.440
object is getting a
mouse over event.

00:24:25.440 --> 00:24:27.010
And that's all features
I implemented

00:24:27.010 --> 00:24:28.240
in the Bag of Tricks.

00:24:28.240 --> 00:24:29.330
And so [INAUDIBLE]

00:24:29.330 --> 00:24:33.097
elements, nested elements, and
do mouse interaction with

00:24:33.097 --> 00:24:34.010
those elements.

00:24:34.010 --> 00:24:35.760
SETH LADD: Kevin, I should say
that, for everyone watching at

00:24:35.760 --> 00:24:38.090
home, it's very, very smooth.

00:24:38.090 --> 00:24:39.930
It's just that it's a little
jittery on the Hangout.

00:24:39.930 --> 00:24:44.340
So what Kevin sees is a very
smooth, spinning sphere.

00:24:44.340 --> 00:24:47.950
KEVIN MOORE: Yeah, this is not
performance at all of Dart.

00:24:47.950 --> 00:24:50.000
I would suggest people take a
look at "Pop, Pop, Win" if

00:24:50.000 --> 00:24:52.650
they want to be convinced that
you can build very high

00:24:52.650 --> 00:24:54.350
performance, high
quality games.

00:24:54.350 --> 00:24:57.400
But unfortunately, this kind of
animation doesn't translate

00:24:57.400 --> 00:24:59.630
well over the screen caps.

00:24:59.630 --> 00:25:02.350
So my apologies for that.

00:25:02.350 --> 00:25:04.480
So the retained library does
a bunch of that stuff.

00:25:04.480 --> 00:25:05.780
I don't want to go
into it too much.

00:25:05.780 --> 00:25:08.830
I'd actually point people to a
screen caps I did, I think it

00:25:08.830 --> 00:25:11.840
was last week, that tried to
walk through how I built

00:25:11.840 --> 00:25:14.290
retained and the things
that it does.

00:25:14.290 --> 00:25:16.200
There's actually a set of other
features that are more

00:25:16.200 --> 00:25:18.770
in the base libraries that
enable a lot of stuff.

00:25:18.770 --> 00:25:21.980
And so if you click through,
and, actually, probably the

00:25:21.980 --> 00:25:25.770
easiest thing to do, and also
to show off another feature

00:25:25.770 --> 00:25:28.820
is, I'm using the documentation
generation that

00:25:28.820 --> 00:25:31.710
exists in Dart, which I love.

00:25:31.710 --> 00:25:34.530
I know Seth has pushed hard
to get this working well.

00:25:34.530 --> 00:25:36.970
And so, if you kind of walk
through the APIs, it's all up

00:25:36.970 --> 00:25:39.570
on BOTs, under my personal
website.

00:25:39.570 --> 00:25:43.525
And this is actually linked
from the source code.

00:25:43.525 --> 00:25:46.720
And so, really quickly, some
things that I built that

00:25:46.720 --> 00:25:51.980
really helped me build the "Pop,
Pop, Win" game, there's

00:25:51.980 --> 00:25:54.730
an array of 2D class, which
actually allows you to define

00:25:54.730 --> 00:25:57.550
a two dimensional array
very efficiently.

00:25:57.550 --> 00:25:59.440
So that's how I managed the
state of the field and,

00:25:59.440 --> 00:26:01.880
actually, all the squares that
I'm drawing in the field.

00:26:01.880 --> 00:26:04.780
I have classes for managing
different kinds of color, and

00:26:04.780 --> 00:26:08.450
so I have hue, saturation,
and lightness color.

00:26:08.450 --> 00:26:11.010
And where's the other
color here?

00:26:11.010 --> 00:26:11.420
I'm just going to find it.

00:26:11.420 --> 00:26:12.065
RGB's here somewhere.

00:26:12.065 --> 00:26:13.840
There's RGB.

00:26:13.840 --> 00:26:15.460
SETH LADD: Kevin.

00:26:15.460 --> 00:26:15.930
KEVIN MOORE: Go ahead.

00:26:15.930 --> 00:26:18.660
SETH LADD: So you showed
"Pop, Pop, Win" and

00:26:18.660 --> 00:26:19.590
some spinning squares.

00:26:19.590 --> 00:26:21.500
What are some other things
you envision people

00:26:21.500 --> 00:26:23.780
using Dart to build?

00:26:23.780 --> 00:26:27.500
Oh lord, the sky's the limit.

00:26:27.500 --> 00:26:30.380
I'm actually having a lot of
fun right now building

00:26:30.380 --> 00:26:31.685
interactive content.

00:26:31.685 --> 00:26:32.110
JJ BEHRENS: Wait a second.

00:26:32.110 --> 00:26:34.770
Did he just say that, like,
Dart is inappropriate for,

00:26:34.770 --> 00:26:37.120
like, Mars Lander type
software because

00:26:37.120 --> 00:26:39.780
the sky's the limit?

00:26:39.780 --> 00:26:40.610
SETH LADD: If it runs
on the browser.

00:26:40.610 --> 00:26:41.720
KEVIN MOORE: [INAUDIBLE]

00:26:41.720 --> 00:26:42.840
I'd probably stick with
Go, if you're

00:26:42.840 --> 00:26:44.010
doing embedded software.

00:26:44.010 --> 00:26:48.510
But honestly, if you're doing
interactive content,

00:26:48.510 --> 00:26:52.180
especially anything you want to
host on the web, I've built

00:26:52.180 --> 00:26:54.850
things with Dart now that I've
dreamed about building, or I

00:26:54.850 --> 00:26:57.310
would've built on a native
platform before.

00:26:57.310 --> 00:26:59.410
And certainly, it's kind
of a dual evolution.

00:26:59.410 --> 00:27:01.680
As the web platform has evolved
with Chrome, and you

00:27:01.680 --> 00:27:05.140
can get really good interaction
with building

00:27:05.140 --> 00:27:08.060
canvas apps and really fast
performance there--

00:27:08.060 --> 00:27:09.650
so that gives you the
raw performance.

00:27:09.650 --> 00:27:12.250
And then Dart has just been
spectacular because it really

00:27:12.250 --> 00:27:14.225
lets you build large systems.

00:27:14.225 --> 00:27:18.380
I've built large libraries with
deep object hierarchies

00:27:18.380 --> 00:27:22.920
and deeply related
sets of objects.

00:27:22.920 --> 00:27:25.720
And having a rich
object-oriented system, type

00:27:25.720 --> 00:27:28.520
checking, that sort of stuff,
really makes it easy to build

00:27:28.520 --> 00:27:30.950
more complicated things than I
normally would in JavaScript.

00:27:30.950 --> 00:27:32.060
So it's actually been
really fun.

00:27:32.060 --> 00:27:34.270
JJ BEHRENS: So Kevin, you've
obviously built a lot of

00:27:34.270 --> 00:27:36.670
software in your career.

00:27:36.670 --> 00:27:38.940
As you've come to Dart,
is there anything

00:27:38.940 --> 00:27:40.560
different about Dart?

00:27:40.560 --> 00:27:43.950
Are there lessons that you've
learned that have helped you

00:27:43.950 --> 00:27:48.360
become more effective as
a Dart programmer?

00:27:48.360 --> 00:27:50.480
KEVIN MOORE: Lessons
I've learned--

00:27:50.480 --> 00:27:52.900
I think one of the big ones,
and this is discussed,

00:27:52.900 --> 00:27:55.800
obviously, a lot, is kind of
embracing the optional

00:27:55.800 --> 00:27:58.420
typeness of Dart.

00:27:58.420 --> 00:28:02.180
And I think, like in so many
things in software, I find

00:28:02.180 --> 00:28:04.450
that you'll find purists
in both extremes.

00:28:04.450 --> 00:28:07.720
And so there's certainly people
who hate the notion of

00:28:07.720 --> 00:28:10.850
using types, who think it's
gratuitous, since they don't

00:28:10.850 --> 00:28:11.860
use it all.

00:28:11.860 --> 00:28:13.710
And there's others who are
very strict about typing

00:28:13.710 --> 00:28:14.090
everything.

00:28:14.090 --> 00:28:16.530
And I'm probably actually more
to the latter, honestly.

00:28:16.530 --> 00:28:20.340
I really like kind of using
types as much as possible,

00:28:20.340 --> 00:28:22.570
just for my own kind
of sanity.

00:28:22.570 --> 00:28:25.400
So certainly moving from a pure
JavaScript world, or even

00:28:25.400 --> 00:28:29.020
a Ruby world, the two places
I've spent the most time, and

00:28:29.020 --> 00:28:33.630
moving to this, I might start
out not using much typing as I

00:28:33.630 --> 00:28:36.640
code, and then very quickly I'll
blend in more and more.

00:28:36.640 --> 00:28:40.350
And the errors I get in the
Editor were good for a while,

00:28:40.350 --> 00:28:42.395
and they're better every
release of the Editor.

00:28:42.395 --> 00:28:44.755
So it really improves my
productivity, my ability to

00:28:44.755 --> 00:28:46.910
refactor, my ability
to find bugs.

00:28:46.910 --> 00:28:48.720
It's been really nice.

00:28:48.720 --> 00:28:51.840
JJ BEHRENS: Yeah, so I've also
done a lot of product Ruby

00:28:51.840 --> 00:28:52.410
programming.

00:28:52.410 --> 00:28:55.770
As has Seth, and the one thing
I've noticed about programming

00:28:55.770 --> 00:28:59.200
in Dart compared to Ruby is
that Ruby allows you to go

00:28:59.200 --> 00:29:02.050
really, really fast, but then
when you hit a brick wall, it

00:29:02.050 --> 00:29:05.490
really takes you a while to dig
yourself out of the hole.

00:29:05.490 --> 00:29:09.895
Have you noticed this as well,
where you get stuck less often

00:29:09.895 --> 00:29:12.920
because of the typing and
because it can catch errors

00:29:12.920 --> 00:29:14.880
more quickly?

00:29:14.880 --> 00:29:17.710
KEVIN MOORE: I think a lot of
the migration, at least I've

00:29:17.710 --> 00:29:19.920
experienced moving from, because
I've built some big

00:29:19.920 --> 00:29:23.310
systems in JavaScript
as well--

00:29:23.310 --> 00:29:28.360
the fact that you don't have
this type handle to hold on to

00:29:28.360 --> 00:29:29.700
can really get you in trouble.

00:29:29.700 --> 00:29:31.550
You have to have an
insane amount of

00:29:31.550 --> 00:29:33.020
diligence as you code in--

00:29:33.020 --> 00:29:35.260
this is my experience, at
least, with Ruby, and

00:29:35.260 --> 00:29:38.210
JavaScript, you need to have a
lot of diligence, not only for

00:29:38.210 --> 00:29:41.050
your own code, but in the team
you're working with around

00:29:41.050 --> 00:29:43.650
making sure you're documenting
things well, that you're not

00:29:43.650 --> 00:29:45.170
overusing duck typing
because it really

00:29:45.170 --> 00:29:46.050
can get you in trouble.

00:29:46.050 --> 00:29:48.650
And you really have to write a
lot of tests just to make sure

00:29:48.650 --> 00:29:52.290
that you're passing around the
right thing and that as the

00:29:52.290 --> 00:29:54.120
code evolves, you're
not passing around

00:29:54.120 --> 00:29:55.600
a type that's incorrect.

00:29:55.600 --> 00:29:59.560
And so to have the flexibility
that I have in Ruby and

00:29:59.560 --> 00:30:02.130
JavaScript around to be able to
move very quickly and not

00:30:02.130 --> 00:30:05.152
worry about types as then kind
of prototyping, but being able

00:30:05.152 --> 00:30:08.106
to flavor those on and load
those on, it's as much time as

00:30:08.106 --> 00:30:12.210
it takes to, say, document
a method.

00:30:12.210 --> 00:30:14.990
If you're running robust,
reusable code in Ruby or

00:30:14.990 --> 00:30:16.750
JavaScript, you want to
document what you

00:30:16.750 --> 00:30:17.910
expect as an input.

00:30:17.910 --> 00:30:21.030
And so using an actual type,
as opposed to just a big

00:30:21.030 --> 00:30:25.160
paragraph of text, really, not
only is it more clear to

00:30:25.160 --> 00:30:27.420
documented, and easier for
tooling, it makes you more

00:30:27.420 --> 00:30:30.480
productive because it's a much
more enforceable contract than

00:30:30.480 --> 00:30:32.450
just a note that, oh, by the
way, I expect to get a

00:30:32.450 --> 00:30:36.246
collection here, not a new
variable or something else.

00:30:36.246 --> 00:30:37.710
SETH LADD: Yeah.

00:30:37.710 --> 00:30:39.650
So you showed off some
of the 2D or graphics

00:30:39.650 --> 00:30:40.660
capabilities of BOT.

00:30:40.660 --> 00:30:44.330
Is there other utility things
that BOT does as well that

00:30:44.330 --> 00:30:45.580
aren't just graphics related?

00:30:49.836 --> 00:30:51.750
ALEXANDER APRELEV: Oh lord.

00:30:51.750 --> 00:30:53.823
So a few examples, and I'll try
to go quick because it's

00:30:53.823 --> 00:30:56.250
kind of a random collection
of things.

00:30:56.250 --> 00:30:59.990
You'll notice here, property and
attachable actually have a

00:30:59.990 --> 00:31:02.560
whole model for how you define
attachable events and

00:31:02.560 --> 00:31:03.400
properties.

00:31:03.400 --> 00:31:06.850
And so, I forget which design
pattern that enables.

00:31:06.850 --> 00:31:09.960
The idea is, you can define a
very simple object and then,

00:31:09.960 --> 00:31:12.920
at run time, add on new
attached behavior.

00:31:12.920 --> 00:31:15.840
And so I'll give you an
example of this--

00:31:15.840 --> 00:31:18.863
JJ BEHRENS: I think it's the
chain of responsibility.

00:31:18.863 --> 00:31:21.120
KEVIN MOORE: Yeah, I think
that might map well.

00:31:21.120 --> 00:31:23.880
These are always the
questions I bomb.

00:31:23.880 --> 00:31:25.840
I know how to use the design
patterns, I just don't know

00:31:25.840 --> 00:31:27.350
how to name them.

00:31:27.350 --> 00:31:30.380
A good example here is how
I handle click handling.

00:31:30.380 --> 00:31:32.990
So this is an example explicitly
about the visual

00:31:32.990 --> 00:31:35.450
graphics stuff, but it
can be used anywhere.

00:31:35.450 --> 00:31:38.320
The idea is, elements themselves
in my system don't

00:31:38.320 --> 00:31:40.980
understand anything about hit
testing, don't understand

00:31:40.980 --> 00:31:42.145
anything about the mouse.

00:31:42.145 --> 00:31:45.050
But I could layer that on and
have events around attaching

00:31:45.050 --> 00:31:50.950
click event, or attaching
a is clickable

00:31:50.950 --> 00:31:51.390
attribute to an event.

00:31:51.390 --> 00:31:57.130
So that you can tell, oh, you
want to add that functionality

00:31:57.130 --> 00:31:58.310
after the fact?

00:31:58.310 --> 00:31:59.710
I just turned on my screen
sharing to show you that I'm

00:31:59.710 --> 00:32:04.350
looking at my documentation
here.

00:32:04.350 --> 00:32:07.080
A few other things, I actually
have a model for events.

00:32:07.080 --> 00:32:09.510
That's a little bit cleaner
if you're outside the DOM.

00:32:09.510 --> 00:32:11.650
A lot of people wanted a unified
event model, and I'm

00:32:11.650 --> 00:32:14.035
looking forward to that
getting sussed out.

00:32:14.035 --> 00:32:16.160
So at the moment, it's a little
bit of a work around.

00:32:16.160 --> 00:32:18.710
Hopefully, as the Dart team
comes to that, but it's easy

00:32:18.710 --> 00:32:19.840
to figure out.

00:32:19.840 --> 00:32:23.380
JJ BEHRENS: You know, I actually
think that that's a

00:32:23.380 --> 00:32:25.980
really good feature because
I've been around

00:32:25.980 --> 00:32:27.060
ActionScript 3 coders.

00:32:27.060 --> 00:32:30.310
And one thing that they really
like to do is to have these

00:32:30.310 --> 00:32:33.120
things that are on the stage,
and they love attaching custom

00:32:33.120 --> 00:32:34.410
events to these things.

00:32:34.410 --> 00:32:38.470
And so having a reusable model
where you could create your

00:32:38.470 --> 00:32:41.400
own random events and attach
them to these objects, I think

00:32:41.400 --> 00:32:44.020
that that's going
to be a big win.

00:32:44.020 --> 00:32:47.350
SETH LADD: Kevin, can you
increase the font a bit as you

00:32:47.350 --> 00:32:49.420
finish up the list here?

00:32:49.420 --> 00:32:50.370
KEVIN MOORE: Sure.

00:32:50.370 --> 00:32:53.610
And so there's a whole bunch
of random stuff here.

00:32:53.610 --> 00:32:55.210
I won't go into all of it.

00:32:55.210 --> 00:32:56.200
Take a look, [? pay ?]

00:32:56.200 --> 00:32:58.120
[? me ?] and have to
answer questions.

00:32:58.120 --> 00:33:00.704
And one of the more one-off
things I played with, but I

00:33:00.704 --> 00:33:04.350
made it a library, I assume
you're looking at this now is,

00:33:04.350 --> 00:33:05.460
I actually have a whole
library that

00:33:05.460 --> 00:33:06.460
can generate QR codes.

00:33:06.460 --> 00:33:08.650
And this is code
I borrowed from

00:33:08.650 --> 00:33:10.050
another open source library.

00:33:10.050 --> 00:33:12.540
I think it started out
as ActionScript.

00:33:12.540 --> 00:33:15.320
But if you want to play with
an example of building a

00:33:15.320 --> 00:33:20.490
canvas-based app, and using some
isolates, actually, and I

00:33:20.490 --> 00:33:22.770
have a whole set of code that
actually makes dealing with

00:33:22.770 --> 00:33:23.650
isolates much easier.

00:33:23.650 --> 00:33:26.650
I have an example
of QR builder.

00:33:26.650 --> 00:33:29.070
Can you guys see
my screen now?

00:33:29.070 --> 00:33:30.470
SETH LADD: We can see
your screen, yes.

00:33:30.470 --> 00:33:31.630
KEVIN MOORE: Awesome.

00:33:31.630 --> 00:33:32.990
So quickly looking
up this sample.

00:33:41.110 --> 00:33:43.170
It's always the demo gods that
get nervous when I'm on a live

00:33:43.170 --> 00:33:43.930
[INAUDIBLE].

00:33:43.930 --> 00:33:46.675
So here you see a QR code, and
it animates in, again, forgive

00:33:46.675 --> 00:33:55.470
the frame rate on the Hangout,
but as you type in, you know,

00:33:55.470 --> 00:33:58.080
you see that the QR code
updates in real time.

00:33:58.080 --> 00:34:02.560
You can actually change the
error correction level and the

00:34:02.560 --> 00:34:04.210
generation.

00:34:04.210 --> 00:34:06.200
And actually, all the generation
is happening in the

00:34:06.200 --> 00:34:07.480
background, in an isolate.

00:34:07.480 --> 00:34:10.645
And I have whole set of helpers
in my async library

00:34:10.645 --> 00:34:13.750
that makes basically, not really
binding, but attaching

00:34:13.750 --> 00:34:17.850
to a value, and sending off
requests to get background

00:34:17.850 --> 00:34:20.389
processed, and getting a
notification when that's done?

00:34:20.389 --> 00:34:22.400
I simplified that pattern,
and created a set of

00:34:22.400 --> 00:34:24.070
helpers to do that.

00:34:24.070 --> 00:34:26.730
And so obviously, QR code
generation, even on a fast

00:34:26.730 --> 00:34:29.690
machine, will slow down your
frame rate, but I use isolates

00:34:29.690 --> 00:34:30.900
in the background, and
it's really fast.

00:34:30.900 --> 00:34:34.000
And so even some of these simple
things have been very

00:34:34.000 --> 00:34:36.750
easy to do in Dart and have
been a lot of fun.

00:34:36.750 --> 00:34:38.210
JJ BEHRENS: That's
really neat.

00:34:38.210 --> 00:34:41.219
I'm totally using it the next
time I interview some intern.

00:34:41.219 --> 00:34:43.810
I'm going to be typing these
in real time and

00:34:43.810 --> 00:34:45.502
asking him to read them.

00:34:45.502 --> 00:34:45.960
[LAUGHTER]

00:34:45.960 --> 00:34:50.389
JJ BEHRENS: I guarantee you,
some kid from MIT could do it.

00:34:50.389 --> 00:34:51.320
SETH LADD: Awesome, well
thank you Kevin,

00:34:51.320 --> 00:34:52.300
this is really cool.

00:34:52.300 --> 00:34:54.360
I want to really encourage
everyone to check out BOT on

00:34:54.360 --> 00:34:56.670
Pub and some of your other
projects as well.

00:34:56.670 --> 00:34:59.020
"Pop, Pop, Win," the game that
you showed, is also open

00:34:59.020 --> 00:35:00.330
source on github.

00:35:00.330 --> 00:35:02.110
And thanks against for spending
time with us.

00:35:02.110 --> 00:35:03.840
And we really appreciate you
working with the Dart

00:35:03.840 --> 00:35:05.790
community like this and showing
off what it can do.

00:35:05.790 --> 00:35:06.850
So thank you.

00:35:06.850 --> 00:35:08.430
KEVIN MOORE: You're
so welcome.

00:35:08.430 --> 00:35:11.070
SETH LADD: So we should move
from 2D graphics to 3D

00:35:11.070 --> 00:35:13.390
graphics and talk to John.

00:35:13.390 --> 00:35:15.080
John, thank you for
being here.

00:35:15.080 --> 00:35:16.070
JOHN MCCUTCHAN: Oh
no, my pleasure.

00:35:16.070 --> 00:35:18.010
SETH LADD: So John was a member
of one of the early

00:35:18.010 --> 00:35:21.040
adopting communities of Dart and
really keyed off of what

00:35:21.040 --> 00:35:23.950
he, again, kind of Kevin's
story as well, right?

00:35:23.950 --> 00:35:26.150
Just wanting to be a little bit
more structured and take

00:35:26.150 --> 00:35:28.890
advantage of a little bit more
power but yet build for the

00:35:28.890 --> 00:35:30.090
modern web browser.

00:35:30.090 --> 00:35:33.850
And now John, luckily,
works here.

00:35:33.850 --> 00:35:35.440
And John's going to show off
some of the libraries that he

00:35:35.440 --> 00:35:37.500
started before being a
Googler, and now he's

00:35:37.500 --> 00:35:39.610
continued working
on at Google.

00:35:39.610 --> 00:35:41.712
JOHN MCCUTCHAN: Hey everyone.

00:35:41.712 --> 00:35:44.750
Yeah, very much like Kevin's
story, I was really attracted

00:35:44.750 --> 00:35:47.250
to Dart, primarily for
the type system.

00:35:47.250 --> 00:35:51.540
I come from a C++ background,
and I love type.

00:35:51.540 --> 00:35:55.580
So I also kind of overly
type my code.

00:35:55.580 --> 00:35:58.880
But it saves me a
lot of effort.

00:35:58.880 --> 00:36:04.690
So what I want to show today is
a rendering engine and game

00:36:04.690 --> 00:36:07.450
engine called Javelin.

00:36:07.450 --> 00:36:09.320
So we definitely can't
see your fonts.

00:36:09.320 --> 00:36:09.690
JOHN MCCUTCHAN: Wow, OK.

00:36:09.690 --> 00:36:11.260
SETH LADD: And I don't think
increasing the font size will

00:36:11.260 --> 00:36:11.950
help either.

00:36:11.950 --> 00:36:14.225
JOHN MCCUTCHAN: Let me see
how the demo looks.

00:36:17.630 --> 00:36:19.834
Eesh, it's so aliased.

00:36:19.834 --> 00:36:21.980
JJ BEHRENS: It's much
smoother in person.

00:36:21.980 --> 00:36:24.415
SETH LADD: Also, we have
a lot more pixels here.

00:36:24.415 --> 00:36:25.720
JOHN MCCUTCHAN: Yes, hold on.

00:36:25.720 --> 00:36:28.960
All right, we're going to do
some technical rejiggering,

00:36:28.960 --> 00:36:31.020
which is the technical term.

00:36:31.020 --> 00:36:31.730
JOHN MCCUTCHAN: Yes.

00:36:31.730 --> 00:36:32.710
So--

00:36:32.710 --> 00:36:34.800
SETH LADD: While we're doing
this, why don't we talk a

00:36:34.800 --> 00:36:35.850
little bit about your
background?

00:36:35.850 --> 00:36:38.410
So you have experience
in actually

00:36:38.410 --> 00:36:39.620
building and writing games.

00:36:39.620 --> 00:36:41.490
Is that true?

00:36:41.490 --> 00:36:45.050
JOHN MCCUTCHAN: Not so much
games, but like, kind of game

00:36:45.050 --> 00:36:46.770
engine technology.

00:36:46.770 --> 00:36:50.730
So I worked with Erwin
[? Kumons ?] on the Bullet

00:36:50.730 --> 00:36:55.730
Physics engine for a couple
years, and kind of optimized

00:36:55.730 --> 00:36:59.390
it for the PlayStation 3, and
then did a whole bunch of

00:36:59.390 --> 00:37:03.840
smaller tool and technology
based work

00:37:03.840 --> 00:37:04.990
for PlayStation titles.

00:37:04.990 --> 00:37:05.300
SETH LADD: Awesome.

00:37:05.300 --> 00:37:07.820
So you're very comfortable
deep in the low levels of

00:37:07.820 --> 00:37:08.620
these engines.

00:37:08.620 --> 00:37:09.380
JOHN MCCUTCHAN: Yes, yes.

00:37:09.380 --> 00:37:15.030
Far more comfortable down there
than a higher level.

00:37:15.030 --> 00:37:16.280
So turn off--

00:37:20.882 --> 00:37:23.540
and we can leave the
Hangout right?

00:37:23.540 --> 00:37:25.875
JJ BEHRENS: So Seth, I've
noticed, a lot of the commits

00:37:25.875 --> 00:37:30.750
that I've seen from John are
crazy low level, like, array

00:37:30.750 --> 00:37:35.850
manipulations with like flow
32s to make them six times

00:37:35.850 --> 00:37:39.137
faster, and they're written in
Assembly, and I'm like I

00:37:39.137 --> 00:37:40.770
didn't even know this
stuff was in Dart.

00:37:40.770 --> 00:37:43.460
And he's sitting here
patching it.

00:37:43.460 --> 00:37:44.370
SETH LADD: Yeah it's
really cool.

00:37:44.370 --> 00:37:46.100
And talk about where this
actually is happening-- this

00:37:46.100 --> 00:37:47.600
is inside the Dart
virtual machine.

00:37:47.600 --> 00:37:51.320
This is kind of the power of a
platform that has its own VM.

00:37:51.320 --> 00:37:53.440
So of course, Dart compiles
the JavaScript, runs

00:37:53.440 --> 00:37:56.330
everywhere, but if you have your
own virtual machine you

00:37:56.330 --> 00:37:59.080
can accelerate options that
would be very hard to

00:37:59.080 --> 00:38:01.850
accelerate in JavaScript,
like native access

00:38:01.850 --> 00:38:03.650
to the typed arrays.

00:38:03.650 --> 00:38:05.620
JJ BEHRENS: And I'm super
excited about the fact that

00:38:05.620 --> 00:38:08.580
he's constantly running and
pushing the VM because the

00:38:08.580 --> 00:38:10.820
VM's going to open up
some new doors.

00:38:10.820 --> 00:38:12.560
SETH LADD: Right, just purely
performance reasons.

00:38:12.560 --> 00:38:14.410
JOHN MCCUTCHAN: I'm really
excited as well.

00:38:14.410 --> 00:38:18.390
This demo that I'm showing right
now is partially showing

00:38:18.390 --> 00:38:19.860
off some of the work
I did to speed of

00:38:19.860 --> 00:38:21.970
access to flow 32 arrays.

00:38:21.970 --> 00:38:25.170
By the time it gets drawn, it's
into the slower arrays,

00:38:25.170 --> 00:38:27.810
which will be going away soon,
but while it's been simulated,

00:38:27.810 --> 00:38:29.780
it's running in these
fast arrays.

00:38:29.780 --> 00:38:32.840
So what we're looking at here
is a fluid simulation.

00:38:32.840 --> 00:38:36.480
It's a height filled based one,
so I can put a droplet in

00:38:36.480 --> 00:38:38.690
there, and it's got reflective
boundaries.

00:38:38.690 --> 00:38:41.670
So you can see that the waves
start reflecting back.

00:38:41.670 --> 00:38:45.830
And this is running in a 50
by 50 grid all on the CPU.

00:38:45.830 --> 00:38:49.340
None of this is being simulated
on the GPU.

00:38:49.340 --> 00:38:50.790
It's pretty fun to play
around with--

00:38:50.790 --> 00:38:53.680
SETH LADD: So of course, you
could do this in WebGL, and

00:38:53.680 --> 00:38:55.490
get it on the GPU.

00:38:55.490 --> 00:38:57.790
But you kind of alluded
to it earlier--

00:38:57.790 --> 00:38:59.160
why do this on the CPU?

00:38:59.160 --> 00:39:01.100
JOHN MCCUTCHAN: So the big
problem with something that

00:39:01.100 --> 00:39:04.900
you simulate on WebGL is that if
you ever need to access it,

00:39:04.900 --> 00:39:09.030
to animate it, or to interact
with it from the CPU, you

00:39:09.030 --> 00:39:10.980
suffer a huge performance
penalty for that.

00:39:10.980 --> 00:39:14.630
If you can do all of your work
entirely on the GPU, and the

00:39:14.630 --> 00:39:17.430
work you're doing is well suited
to computation on a

00:39:17.430 --> 00:39:19.880
grid, then it's much faster.

00:39:19.880 --> 00:39:21.670
But as soon as you need to
involve the CPU, the

00:39:21.670 --> 00:39:24.670
performance benefits very
quickly go away.

00:39:24.670 --> 00:39:27.160
So this is all being simulated
on the CPU, and, as you can

00:39:27.160 --> 00:39:30.630
see, I can kind of shoot off
a wave from the one side.

00:39:30.630 --> 00:39:34.090
And it comes back and
reflects around.

00:39:34.090 --> 00:39:35.810
SETH LADD: So what this is
actually running inside?

00:39:35.810 --> 00:39:37.953
Because I think it's part of
the libraries you've been

00:39:37.953 --> 00:39:38.120
working on.

00:39:38.120 --> 00:39:39.050
JOHN MCCUTCHAN: Yes.

00:39:39.050 --> 00:39:43.140
So internally to this demo,
I'm using two libraries.

00:39:43.140 --> 00:39:48.880
The first is Dart vector math,
which is a 3D graphics, 3D

00:39:48.880 --> 00:39:52.470
programming math library,
so it has a four by four

00:39:52.470 --> 00:39:54.650
transformation matrices, all
the things that you need to

00:39:54.650 --> 00:39:57.690
construct a 3D rendering
engine.

00:39:57.690 --> 00:40:00.350
And that's also available
on Pub.

00:40:00.350 --> 00:40:03.690
So definitely check it out if
you're doing any kind of 3D

00:40:03.690 --> 00:40:04.710
programming.

00:40:04.710 --> 00:40:07.900
One of the cool features of
Specter, a low level graphics

00:40:07.900 --> 00:40:10.920
library that Javelin is built
on, is that it has a retained

00:40:10.920 --> 00:40:13.140
mode debug drawing mechanism.

00:40:13.140 --> 00:40:15.400
So what you're seeing on the
screen right now is a whole

00:40:15.400 --> 00:40:19.020
bunch of coordinate systems, and
circles, and spheres, and

00:40:19.020 --> 00:40:24.370
access line bounding boxes, but
they're being drawn in a

00:40:24.370 --> 00:40:25.650
retained mode debug system.

00:40:25.650 --> 00:40:28.810
So I can say, draw a box in this
position in the world for

00:40:28.810 --> 00:40:31.120
two seconds and then
forget about it.

00:40:31.120 --> 00:40:33.980
And Specter will handle drawing
it for the next two

00:40:33.980 --> 00:40:38.060
seconds and then clearing it
from the debug system when the

00:40:38.060 --> 00:40:38.770
time is up.

00:40:38.770 --> 00:40:43.660
And so it supports lines, boxes,
spheres, circles, and

00:40:43.660 --> 00:40:45.350
I'll be adding cones
and cylinders

00:40:45.350 --> 00:40:47.240
support as well soon.

00:40:47.240 --> 00:40:50.810
I just recently did a blog post
on the dartgamedevs.org

00:40:50.810 --> 00:40:52.420
on how to use this.

00:40:52.420 --> 00:40:55.490
It's really important, when
you're doing 3D graphics, to

00:40:55.490 --> 00:40:57.320
have a debug drawing
mechanism.

00:40:57.320 --> 00:40:59.110
SETH LADD: And I feel awful
for not mentioning

00:40:59.110 --> 00:41:02.050
dartgamedevs.org on
our news updates.

00:41:02.050 --> 00:41:03.200
Let's talk a little
bit about that.

00:41:03.200 --> 00:41:03.800
What is that?

00:41:03.800 --> 00:41:07.580
JOHN MCCUTCHAN: So it's a new
site that's focused on game

00:41:07.580 --> 00:41:09.960
developers who are working
with Dart.

00:41:09.960 --> 00:41:12.040
And we are taking

00:41:12.040 --> 00:41:14.280
contributions from the community.

00:41:14.280 --> 00:41:17.380
So far, I've written a few blog
posts on Specter, and I'm

00:41:17.380 --> 00:41:19.900
going to have a couple more this
week, one of which will

00:41:19.900 --> 00:41:23.696
be on how to do break
out like physics.

00:41:23.696 --> 00:41:26.090
SETH LADD: Cool.

00:41:26.090 --> 00:41:29.670
JOHN MCCUTCHAN: So another cool
feature here in Specter

00:41:29.670 --> 00:41:32.450
is that I have a post processing
system, so all I

00:41:32.450 --> 00:41:36.120
have to do is go down here and
select blur, and then suddenly

00:41:36.120 --> 00:41:37.750
the entire scene is blurred.

00:41:37.750 --> 00:41:40.670
The blurring is all being
done on the GPU.

00:41:40.670 --> 00:41:46.090
It's really simple to add
new blur effects.

00:41:46.090 --> 00:41:49.780
There's also a cloth
simulation.

00:41:49.780 --> 00:41:51.790
Again, this is running entirely
on this CPU because

00:41:51.790 --> 00:41:53.280
we want to be able to
throw things like a

00:41:53.280 --> 00:41:54.530
sphere at the cloth.

00:41:56.810 --> 00:42:00.870
So probably the most recent
feature that I've added to

00:42:00.870 --> 00:42:04.580
Javelin is an entirely
data-driven scene.

00:42:04.580 --> 00:42:08.100
So what you're looking at here
is a sky box, and there's a

00:42:08.100 --> 00:42:09.900
few elements.

00:42:09.900 --> 00:42:15.430
There's a box, and a cone, and
there's ground plane here, but

00:42:15.430 --> 00:42:17.360
no code was written to
construct this scene.

00:42:17.360 --> 00:42:18.590
And it can even animate.

00:42:18.590 --> 00:42:23.850
So if I go in and I make a
change to this file here, I'm

00:42:23.850 --> 00:42:27.600
changing a transformation
controller to manipulate the

00:42:27.600 --> 00:42:29.810
box's translation.

00:42:29.810 --> 00:42:33.060
So now that I've done that, if
I go down here, and I reload

00:42:33.060 --> 00:42:37.820
the scene, you can see that the
box is now moving relative

00:42:37.820 --> 00:42:39.440
to its parents.

00:42:39.440 --> 00:42:41.710
And this is, again, I haven't
written any code, I don't have

00:42:41.710 --> 00:42:45.910
to reload the application, I
just changed it, changed the

00:42:45.910 --> 00:42:49.320
data file, and then asked
Specter to reload the scene

00:42:49.320 --> 00:42:50.370
description.

00:42:50.370 --> 00:42:51.900
SETH LADD: Now what is really
cool about something like

00:42:51.900 --> 00:42:53.820
this, I know we've chatted about
this, is you can then

00:42:53.820 --> 00:42:57.230
send out this configuration,
people can't fork it, change

00:42:57.230 --> 00:43:00.520
it themselves, and kind of
branch these visuals demos.

00:43:00.520 --> 00:43:03.740
And seeing how they might
propagate out in the wild is

00:43:03.740 --> 00:43:04.460
really fascinating to me.

00:43:04.460 --> 00:43:07.960
JOHN MCCUTCHAN: Yeah, that's the
ultimate goal with this.

00:43:07.960 --> 00:43:12.190
And not so much just a scene
with transformations applied

00:43:12.190 --> 00:43:14.940
objects, but also game
logic as well.

00:43:14.940 --> 00:43:18.880
So hopefully you'll be able to
express most of the game just

00:43:18.880 --> 00:43:21.620
through data, and then load it
up, and share it with friends,

00:43:21.620 --> 00:43:23.390
and let them change it.

00:43:23.390 --> 00:43:24.780
SETH LADD: So what are some
things that you'll be working

00:43:24.780 --> 00:43:27.010
on next for these
two libraries?

00:43:27.010 --> 00:43:29.820
JOHN MCCUTCHAN: So right now
it's mainly working on the

00:43:29.820 --> 00:43:33.350
game component system so that
you can, kind of like Kevin's

00:43:33.350 --> 00:43:36.030
attachable logic, and this is
coming from the ActionScript

00:43:36.030 --> 00:43:39.090
world, where you have a
general game object.

00:43:39.090 --> 00:43:44.270
And then you express its
behavior through a runtime

00:43:44.270 --> 00:43:46.370
edition of components.

00:43:46.370 --> 00:43:48.970
So you could say this game
object now has health.

00:43:48.970 --> 00:43:51.400
And this game object
can have jump.

00:43:51.400 --> 00:43:53.250
And this can all be expressed
through data.

00:43:53.250 --> 00:43:56.186
So that's what the focus
right now is on.

00:43:56.186 --> 00:43:56.550
SETH LADD: Awesome.

00:43:56.550 --> 00:43:59.372
And this, of course, does this
compile the JavaScript to run

00:43:59.372 --> 00:44:00.450
in other browsers?

00:44:00.450 --> 00:44:03.320
JOHN MCCUTCHAN: It
should, yes.

00:44:03.320 --> 00:44:04.570
SETH LADD: Browsers that have
WebGL, we should probably say.

00:44:04.570 --> 00:44:05.340
JOHN MCCUTCHAN: Yes, of course.

00:44:05.340 --> 00:44:05.660
Yes.

00:44:05.660 --> 00:44:10.335
SETH LADD: Which is Firefox,
Opera, and of course Chrome.

00:44:10.335 --> 00:44:11.380
Well, thank you for
these demos.

00:44:11.380 --> 00:44:13.490
And these are on Pub as well?

00:44:13.490 --> 00:44:18.050
So Specter and Dart vector math,
as well as a user marker

00:44:18.050 --> 00:44:21.670
based profiling system, are
all available on Pub.

00:44:21.670 --> 00:44:23.960
Javelin is just on github right
now because it's still

00:44:23.960 --> 00:44:27.110
pretty experimental, and we're
working out what the API

00:44:27.110 --> 00:44:28.030
should look like.

00:44:28.030 --> 00:44:31.750
So we don't want to promote it,
people to depend on it,

00:44:31.750 --> 00:44:33.370
when we're going to change
a lot of it.

00:44:33.370 --> 00:44:33.930
SETH LADD: It's still early.

00:44:33.930 --> 00:44:34.360
JOHN MCCUTCHAN: Yeah.

00:44:34.360 --> 00:44:35.730
SETH LADD: Awesome, well, really
cool to see Pub has

00:44:35.730 --> 00:44:37.885
some of the lower-level
features, and especially Dart

00:44:37.885 --> 00:44:39.730
vector math, which is
useful to so many--

00:44:39.730 --> 00:44:41.950
JOHN MCCUTCHAN: Yes, not just
3D applications, but 2D

00:44:41.950 --> 00:44:47.500
applications as well, the Dart
box to 2D port has a branch

00:44:47.500 --> 00:44:50.390
that's almost complete that's
where they're moving over to

00:44:50.390 --> 00:44:51.750
Dart vector math.

00:44:51.750 --> 00:44:55.100
And it runs faster than
the current version.

00:44:55.100 --> 00:44:56.080
SETH LADD: All right,
there you go.

00:44:56.080 --> 00:44:57.450
Open source for the win.

00:44:57.450 --> 00:44:57.810
JOHN MCCUTCHAN: Yes.

00:44:57.810 --> 00:44:58.640
SETH LADD: Thank you John.

00:44:58.640 --> 00:44:59.420
JJ BEHRENS: Awesome.

00:44:59.420 --> 00:45:00.050
SETH LADD: Awesome.

00:45:00.050 --> 00:45:01.210
Well, we have a couple
questions,

00:45:01.210 --> 00:45:01.910
let's go into those.

00:45:01.910 --> 00:45:04.160
Just a couple here for
our community today.

00:45:04.160 --> 00:45:07.260
Chris McGee says, "What do you
think are the next big

00:45:07.260 --> 00:45:08.930
milestones for Dart?"

00:45:08.930 --> 00:45:10.290
JJ BEHRENS: I'm going
to take a big guess.

00:45:10.290 --> 00:45:10.730
SETH LADD: OK.

00:45:10.730 --> 00:45:11.490
JJ BEHRENS: Milestone 2.

00:45:11.490 --> 00:45:12.530
SETH LADD: Ooh, nice.

00:45:12.530 --> 00:45:13.760
M1 plus 1.

00:45:13.760 --> 00:45:16.140
JJ BEHRENS: Well,
you know, yeah

00:45:16.140 --> 00:45:17.230
SETH LADD: JJ has spoken.

00:45:17.230 --> 00:45:17.620
JJ BEHRENS: Yeah,
that's right.

00:45:17.620 --> 00:45:19.460
SETH LADD: It will be M2.

00:45:19.460 --> 00:45:20.620
I think I've heard--

00:45:20.620 --> 00:45:21.910
what's that?

00:45:21.910 --> 00:45:23.442
JOHN MCCUTCHAN: Sorry.

00:45:23.442 --> 00:45:25.370
SETH LADD: I think I've heard
them talk about mix-ins.

00:45:25.370 --> 00:45:29.320
JJ BEHRENS: Mix-ins,
also more mirrors.

00:45:29.320 --> 00:45:32.630
There was another thing that
Claude mentioned at his most

00:45:32.630 --> 00:45:34.880
recent talk in San Francisco.

00:45:34.880 --> 00:45:36.090
But those are the
two big ones.

00:45:36.090 --> 00:45:36.270
SETH LADD: Two big ones.

00:45:36.270 --> 00:45:38.095
Yeah, and a lot of bug fixes.

00:45:38.095 --> 00:45:40.250
JJ BEHRENS: A Lot of bug
fixes, and performance.

00:45:40.250 --> 00:45:42.130
SETH LADD: Well, working
on the libraries.

00:45:42.130 --> 00:45:42.460
JJ BEHRENS: Yep.

00:45:42.460 --> 00:45:43.610
SETH LADD: Which has definitely
already started.

00:45:43.610 --> 00:45:44.970
If you follow the mailing list,
there's been a ton of

00:45:44.970 --> 00:45:46.290
"breaking change" emails.

00:45:46.290 --> 00:45:48.250
We try to get a bunch of
those on the blog.

00:45:48.250 --> 00:45:50.020
JJ BEHRENS: There's definitely
going to be more focus on the

00:45:50.020 --> 00:45:52.810
libraries, whereas there was
more focused on the core

00:45:52.810 --> 00:45:55.330
language itself previously.

00:45:55.330 --> 00:45:56.150
Yeah.

00:45:56.150 --> 00:45:57.220
SETH LADD: Cool, so good.

00:45:57.220 --> 00:46:00.310
And thanks to the clean up,
actually, you can keep your

00:46:00.310 --> 00:46:03.330
head above water a little bit,
thanks to the editor.

00:46:03.330 --> 00:46:06.010
So another question here. "I
started coding with Dart, and

00:46:06.010 --> 00:46:07.610
I see that it doesn't have good

00:46:07.610 --> 00:46:08.520
compatibility with Firefox.

00:46:08.520 --> 00:46:09.750
I really appreciate Dart.

00:46:09.750 --> 00:46:12.510
My question is, what is
the solution to have

00:46:12.510 --> 00:46:13.600
compatibility?"

00:46:13.600 --> 00:46:16.770
Well, I think it's our intention
to support Firefox

00:46:16.770 --> 00:46:19.900
just fine, including other
modern browsers like IE 9,

00:46:19.900 --> 00:46:23.730
Opera, Safari, Firefox, Chrome,
mobile Safari, mobile

00:46:23.730 --> 00:46:27.200
Chrome, and so we would
encourage you file bugs if you

00:46:27.200 --> 00:46:29.820
notice any incompatibilities
between these different

00:46:29.820 --> 00:46:32.960
browsers at dartbug.com/new.

00:46:32.960 --> 00:46:36.670
And I mean, our general approach
here is that Dart,

00:46:36.670 --> 00:46:39.050
when compiled to JavaScript,
should work great across all

00:46:39.050 --> 00:46:39.840
modern browsers.

00:46:39.840 --> 00:46:41.910
And so that definitely
includes Firefox.

00:46:41.910 --> 00:46:44.920
So hopefully you can create a
reproducible test case for us.

00:46:44.920 --> 00:46:46.200
We'll take a look at that.

00:46:46.200 --> 00:46:49.360
I've already seen, for instance,
the HTML team take

00:46:49.360 --> 00:46:51.100
these kind of issues very
seriously because

00:46:51.100 --> 00:46:54.910
compatibility is, I would say,
maybe job number one.

00:46:54.910 --> 00:46:57.720
That is, making Dart work across
modern browsers is

00:46:57.720 --> 00:46:58.930
extremely important.

00:46:58.930 --> 00:47:01.917
So hopefully we could fix
that bug for you.

00:47:01.917 --> 00:47:03.200
JJ BEHRENS: Absolutely.

00:47:03.200 --> 00:47:06.980
That's a critical thing for us

00:47:06.980 --> 00:47:08.900
SETH LADD: Cool, well I want to
thank, again, our community

00:47:08.900 --> 00:47:11.190
members, Alex and Kevin, thank
you for stopping by on this

00:47:11.190 --> 00:47:14.820
show and talk how, Alex, you
see became an external

00:47:14.820 --> 00:47:17.450
committer, and Kevin, how
you've been working on

00:47:17.450 --> 00:47:19.530
external libraries--
very, very awesome.

00:47:19.530 --> 00:47:21.670
We'll see you in Pub.

00:47:21.670 --> 00:47:24.810
And John, thank you very much,
again, for demoing your

00:47:24.810 --> 00:47:26.760
libraries that you've
working on.

00:47:26.760 --> 00:47:30.610
Participate in Dart, join the
mailing list, file bugs.

00:47:30.610 --> 00:47:32.700
Stack Overflow has a lot
of great questions.

00:47:32.700 --> 00:47:34.880
And then publish your
libraries in Pub.

00:47:34.880 --> 00:47:36.980
JOHN MCCUTCHAN: Yeah, I
really want to point

00:47:36.980 --> 00:47:38.640
out the Stack Overflow.

00:47:38.640 --> 00:47:41.360
Because I'm sure that a lot of
people have questions about

00:47:41.360 --> 00:47:44.080
Dart, but there's so many people
answering questions on

00:47:44.080 --> 00:47:47.130
Dart that it's impossible for me
to get to Stack Overflow in

00:47:47.130 --> 00:47:49.500
time for there to be a question
that's not answered.

00:47:49.500 --> 00:47:51.310
SETH LADD: So pro-tip,
you can ask and then

00:47:51.310 --> 00:47:52.950
answer your own question.

00:47:52.950 --> 00:47:54.510
It's an awesome way
to get points.

00:47:54.510 --> 00:47:57.205
But JJ's right, we have a
really good community.

00:47:57.205 --> 00:47:58.700
JJ BEHRENS: We get paid
by commission, right?

00:47:58.700 --> 00:48:01.430
Like we get paid by the number
of questions we answer.

00:48:01.430 --> 00:48:02.160
JOHN MCCUTCHAN: Paid
by Stack Overflow.

00:48:02.160 --> 00:48:02.670
[INTERPOSING VOICES]

00:48:02.670 --> 00:48:04.200
SETH LADD: For you if you
put questions in for me.

00:48:04.200 --> 00:48:04.680
JJ BEHRENS: I know.

00:48:04.680 --> 00:48:07.670
Like, Seth answers the question
so fast, and if he

00:48:07.670 --> 00:48:09.892
doesn't get to them,
Bob Nystrom does.

00:48:09.892 --> 00:48:10.270
SETH LADD: I know.

00:48:10.270 --> 00:48:12.630
There's some really good
community members that beat us

00:48:12.630 --> 00:48:13.240
most of the time.

00:48:13.240 --> 00:48:14.260
And we really appreciate that.

00:48:14.260 --> 00:48:15.390
JJ BEHRENS: Yeah, we definitely
appreciate that.

00:48:15.390 --> 00:48:17.300
That's a big win.

00:48:17.300 --> 00:48:20.100
So we'll see you next on
"Dartisans" and in the Dart--

