WEBVTT
Kind: captions
Language: en

00:00:00.270 --> 00:00:01.978
WOJTEK KALICINSKI:
I'm Wojtek Kalicinski.

00:00:01.978 --> 00:00:03.210
This is Android Tool Time.

00:00:03.210 --> 00:00:06.090
And let's talk a bit about
the Espresso Test Recorder

00:00:06.090 --> 00:00:10.974
and how it can help with
adding UI tests to your app.

00:00:10.974 --> 00:00:12.270
[ALARM RINGING]

00:00:12.270 --> 00:00:14.880
But first, a short
explanation for those

00:00:14.880 --> 00:00:16.800
unfamiliar with Espresso.

00:00:16.800 --> 00:00:18.810
Espresso is a testing
framework designed

00:00:18.810 --> 00:00:22.350
to provide a fluent API for
writing concise and reliable UI

00:00:22.350 --> 00:00:23.520
tests.

00:00:23.520 --> 00:00:25.890
However, it is often
the case that developers

00:00:25.890 --> 00:00:28.380
are reluctant to add
UI tests to their apps

00:00:28.380 --> 00:00:31.200
or simply don't have time
to learn the framework.

00:00:31.200 --> 00:00:34.040
This is where the Espresso
Test Recorder comes in.

00:00:34.040 --> 00:00:35.910
It lets you create
and add UI tests

00:00:35.910 --> 00:00:39.120
to an existing app in
an interactive way.

00:00:39.120 --> 00:00:41.130
You might have previously
seen the beta version

00:00:41.130 --> 00:00:44.020
of this feature, but
in Android Studio 2.3

00:00:44.020 --> 00:00:47.880
we are promoting it to stable
with a few enhancements.

00:00:47.880 --> 00:00:49.950
To get started with
the Test Recorder click

00:00:49.950 --> 00:00:53.240
on Record Espresso Test
under the Run menu.

00:00:53.240 --> 00:00:55.330
The device selection
dialog pops up.

00:00:55.330 --> 00:00:57.600
And after you make your
choice, the Test Recorder

00:00:57.600 --> 00:00:59.970
runs your app in debug mode.

00:00:59.970 --> 00:01:02.040
Simply progress
through your app's UI

00:01:02.040 --> 00:01:04.650
as a regular user would
by clicking buttons,

00:01:04.650 --> 00:01:07.020
swiping, and typing
into input fields,

00:01:07.020 --> 00:01:09.420
and all those actions will
appear in the Test Recorder

00:01:09.420 --> 00:01:11.050
window.

00:01:11.050 --> 00:01:13.110
You can also click here
to add an assertion

00:01:13.110 --> 00:01:15.600
to your test at any
time during recording,

00:01:15.600 --> 00:01:17.580
which will trigger the
Test Recorder to dump

00:01:17.580 --> 00:01:19.660
the current view hierarchy.

00:01:19.660 --> 00:01:21.990
To select the view you
want to assert on, click

00:01:21.990 --> 00:01:24.420
on the screenshot that
appears in the recorder window

00:01:24.420 --> 00:01:26.730
and choose between the
assertion type from view

00:01:26.730 --> 00:01:30.390
exists, doesn't exist, or check
that it contains the specified

00:01:30.390 --> 00:01:31.890
text.

00:01:31.890 --> 00:01:33.860
When you've finished
recording your test,

00:01:33.860 --> 00:01:36.240
the test record generates
the equivalent test code

00:01:36.240 --> 00:01:38.460
to run your actions
and assertions

00:01:38.460 --> 00:01:41.160
and puts it in a new file in
your projects instrumentation

00:01:41.160 --> 00:01:42.820
test folder.

00:01:42.820 --> 00:01:44.490
It also checks if
your build file

00:01:44.490 --> 00:01:47.430
contains the required
Espresso dependencies and adds

00:01:47.430 --> 00:01:49.069
those if needed.

00:01:49.069 --> 00:01:51.360
When you look at the source
file that the Espresso Test

00:01:51.360 --> 00:01:54.600
Recorder created, you will
see that it's perfectly normal

00:01:54.600 --> 00:01:56.160
human-readable code.

00:01:56.160 --> 00:01:58.320
So if you need to further
customize your tests

00:01:58.320 --> 00:02:00.550
or alter them when
your app changes,

00:02:00.550 --> 00:02:02.790
you can simply open
the file again and make

00:02:02.790 --> 00:02:05.050
the alterations you need.

00:02:05.050 --> 00:02:06.960
As you can see, the
Espresso Test Recorder

00:02:06.960 --> 00:02:09.120
is very simple to
use, but it does

00:02:09.120 --> 00:02:11.080
come with some limitations.

00:02:11.080 --> 00:02:14.760
As of Android Studio 2.3, only
a few most common assertions

00:02:14.760 --> 00:02:17.180
are available through
the recorder UI.

00:02:17.180 --> 00:02:19.620
See, if you need anything
more complicated than that,

00:02:19.620 --> 00:02:23.010
you will need to edit the
generated code by hand.

00:02:23.010 --> 00:02:26.040
Also, at this stage, the Test
Recorder cannot handle all

00:02:26.040 --> 00:02:29.700
situations where additional
synchronization is needed

00:02:29.700 --> 00:02:33.630
to deal with delays and async
operations in your apps.

00:02:33.630 --> 00:02:35.940
I highly recommend getting
familiar with the Espresso

00:02:35.940 --> 00:02:38.250
idling resource
API and using that

00:02:38.250 --> 00:02:42.750
in your tests to signal when a
long-running operation happens.

00:02:42.750 --> 00:02:45.430
For advanced users who want
to tweak some aspects of test

00:02:45.430 --> 00:02:47.610
cogeneration, there
is a settings page

00:02:47.610 --> 00:02:51.360
for the Test Recorder in
Android Studio Preferences.

00:02:51.360 --> 00:02:54.030
Here you can change the
maximum view hierarchy depth

00:02:54.030 --> 00:02:56.460
that will be used for
view identification

00:02:56.460 --> 00:02:58.500
and if app data should
be cleared every time you

00:02:58.500 --> 00:03:00.990
record a new test.

00:03:00.990 --> 00:03:03.030
The Espresso Test
Recorder is a great way

00:03:03.030 --> 00:03:04.854
to start adding
tests to your app,

00:03:04.854 --> 00:03:06.270
whether you want
to learn Espresso

00:03:06.270 --> 00:03:08.880
by examining the
generated code or simply

00:03:08.880 --> 00:03:12.750
to quickly build a Test Suite
which you can customize later.

00:03:12.750 --> 00:03:15.300
We look forward to your
feedback on our social channels,

00:03:15.300 --> 00:03:17.580
and happy testing.

00:03:17.580 --> 00:03:18.570
Thanks for watching.

00:03:18.570 --> 00:03:21.132
And for more Android
Studio videos, click here.

00:03:21.132 --> 00:03:23.366
[MUSIC PLAYING]

