WEBVTT
Kind: captions
Language: en

00:00:08.720 --> 00:00:10.230
MICHAEL MANOOCHEHRI: Hello,
big data and BigQuery

00:00:10.230 --> 00:00:10.820
developers.

00:00:10.820 --> 00:00:12.740
My name is Michael Manoochehri
from the Google

00:00:12.740 --> 00:00:14.640
Cloud Platform team.

00:00:14.640 --> 00:00:17.250
We have a special show for
you today, a real treat.

00:00:17.250 --> 00:00:19.720
Joining me today for the first
time on Google Developers Live

00:00:19.720 --> 00:00:23.050
is Felipe Hoffa, our
newest team member.

00:00:23.050 --> 00:00:25.740
Felipe Hoffa is joining us on
the Google Cloud Platform

00:00:25.740 --> 00:00:27.340
Developer Relations team.

00:00:27.340 --> 00:00:30.830
Yesterday, the BigQuery team
launched a set of new features

00:00:30.830 --> 00:00:33.800
for BigQuery, and Felipe wrote a
really great blog post about

00:00:33.800 --> 00:00:36.230
this on the Google Cloud
Platform and

00:00:36.230 --> 00:00:37.690
Google Developers blogs.

00:00:37.690 --> 00:00:39.460
And so today, we're going to
take a look at some of these

00:00:39.460 --> 00:00:39.980
new features.

00:00:39.980 --> 00:00:42.160
We're going to talk about some
use cases that they're really

00:00:42.160 --> 00:00:44.580
good for and do some
demonstrations about what you

00:00:44.580 --> 00:00:46.100
can do with these features
as well.

00:00:46.100 --> 00:00:49.580
So Felipe, do you want to talk
about one of the ones that's

00:00:49.580 --> 00:00:51.910
one of my favorite,
my favorite ones?

00:00:51.910 --> 00:00:53.550
FELIPE HOFFA: Hello,
everybody.

00:00:53.550 --> 00:00:54.800
Welcome to--

00:00:58.380 --> 00:01:05.670
this is my first ever GDL video,
so I hope you enjoy it.

00:01:05.670 --> 00:01:09.940
And yes, we are bringing today
these new features.

00:01:09.940 --> 00:01:10.940
Let's talk about
the first one.

00:01:10.940 --> 00:01:12.410
MICHAEL MANOOCHEHRI: So this is
actually my favorite one.

00:01:12.410 --> 00:01:14.230
And I haven't tried out a lot
of these, so I'm going to be

00:01:14.230 --> 00:01:16.310
learning about some of these for
the first time from you.

00:01:16.310 --> 00:01:19.580
And since you went through all
of these in your blog post for

00:01:19.580 --> 00:01:21.520
our blog, you're probably
the person who could

00:01:21.520 --> 00:01:22.440
explain this the best.

00:01:22.440 --> 00:01:23.340
FELIPE HOFFA: Oh yes, yes.

00:01:23.340 --> 00:01:25.420
You've been talking to
developers for a long time,

00:01:25.420 --> 00:01:27.950
you know what they're doing,
you know how they are doing

00:01:27.950 --> 00:01:31.270
BigQuery, but they frequently
have one big request.

00:01:31.270 --> 00:01:31.980
MICHAEL MANOOCHEHRI: Yes

00:01:31.980 --> 00:01:32.840
FELIPE HOFFA: What's
this request?

00:01:32.840 --> 00:01:34.740
MICHAEL MANOOCHEHRI: Literally
a big request.

00:01:34.740 --> 00:01:36.480
Something that we've been asked
for since the beginning

00:01:36.480 --> 00:01:40.610
of the BigQuery launch was to
have a result set size that's

00:01:40.610 --> 00:01:43.700
large, as large as can be.

00:01:43.700 --> 00:01:46.760
Until yesterday, the maximum
result set you could get from

00:01:46.760 --> 00:01:49.530
a query was 128 megabytes
of data

00:01:49.530 --> 00:01:51.070
compressed, which is a lot.

00:01:51.070 --> 00:01:52.486
I mean, that's quite
a lot of data.

00:01:52.486 --> 00:01:53.260
FELIPE HOFFA: Exactly.

00:01:53.260 --> 00:01:55.960
So people were hitting
this limit.

00:01:55.960 --> 00:02:01.770
It's a weird limit to hit
because BigQuery's strength is

00:02:01.770 --> 00:02:04.770
going from big data
sizes, as Michael

00:02:04.770 --> 00:02:06.140
says, as it goes from--

00:02:06.140 --> 00:02:08.150
MICHAEL MANOOCHEHRI: Machine
size data to human data.

00:02:08.150 --> 00:02:08.820
FELIPE HOFFA: Exactly.

00:02:08.820 --> 00:02:11.690
So you have a terabyte
database, you have a

00:02:11.690 --> 00:02:15.120
10-terabyte database, and you
need to get knowledge from it.

00:02:15.120 --> 00:02:17.880
You want to reduce, to aggregate
this data and to

00:02:17.880 --> 00:02:22.030
understand the windows.

00:02:22.030 --> 00:02:27.120
Basically, you can always do
that with BigQuery, but

00:02:27.120 --> 00:02:31.700
sometimes people needed to get
a big table from a big table,

00:02:31.700 --> 00:02:36.430
for example, to transform a
terabyte [? lump ?] table into

00:02:36.430 --> 00:02:41.670
another thing, as a column,
transform the data.

00:02:41.670 --> 00:02:46.210
They were hitting this limit
of 128 megabytes of

00:02:46.210 --> 00:02:46.990
compressed.

00:02:46.990 --> 00:02:48.160
MICHAEL MANOOCHEHRI: And this
actually happens a lot when

00:02:48.160 --> 00:02:49.800
you're working with terabyte
size data sets.

00:02:49.800 --> 00:02:53.130
Sometimes your result set can
be a gigabyte, and that's

00:02:53.130 --> 00:02:53.830
quite a lot of data.

00:02:53.830 --> 00:02:55.190
It's hard to use that
instead in,

00:02:55.190 --> 00:02:56.640
say, a dashboard situation.

00:02:56.640 --> 00:02:59.460
But sometimes, you need to get
that result size back.

00:02:59.460 --> 00:03:03.240
And that's normal when your
actual set of data you're

00:03:03.240 --> 00:03:04.560
querying is in the
terabyte range.

00:03:04.560 --> 00:03:07.000
You'll see that you sometimes do
need just a slice of that,

00:03:07.000 --> 00:03:08.400
and that could be a
couple gigabytes.

00:03:08.400 --> 00:03:09.370
FELIPE HOFFA: Exactly.

00:03:09.370 --> 00:03:12.060
So what did we release
yesterday?

00:03:12.060 --> 00:03:14.300
We are raising that limit.

00:03:14.300 --> 00:03:17.270
There is no limit now.

00:03:17.270 --> 00:03:21.810
You can have a result set of
any size with a new flag,

00:03:21.810 --> 00:03:24.410
Allow Large Results.

00:03:24.410 --> 00:03:27.830
What does this do?

00:03:27.830 --> 00:03:32.780
You give it a name for a table,
and it will label the

00:03:32.780 --> 00:03:35.640
data in a new table,
or it will append

00:03:35.640 --> 00:03:36.610
to an existing one.

00:03:36.610 --> 00:03:38.140
MICHAEL MANOOCHEHRI: So this
is a question I have.

00:03:38.140 --> 00:03:41.030
Does that mean it doesn't return
the result set as a

00:03:41.030 --> 00:03:43.500
JSON object as a normal
query does?

00:03:43.500 --> 00:03:46.920
It actually will just create
a table that you can then

00:03:46.920 --> 00:03:49.390
request data from using the
Table Data List Function?

00:03:49.390 --> 00:03:50.250
Is that how that works?

00:03:50.250 --> 00:03:51.090
FELIPE HOFFA: Exactly, yes.

00:03:51.090 --> 00:03:56.570
Basically, if you are getting
a result so large, it's not

00:03:56.570 --> 00:04:02.310
really convenient to have it in
a JSON file being written

00:04:02.310 --> 00:04:07.430
on the network, so it makes
sense to put it on a new table

00:04:07.430 --> 00:04:08.610
and to query from it.

00:04:08.610 --> 00:04:11.740
It's also pretty convenient if
you have a terabyte table, you

00:04:11.740 --> 00:04:15.330
know that BigQuery is charged by
how much data it processes

00:04:15.330 --> 00:04:16.560
in each query.

00:04:16.560 --> 00:04:22.130
So you might want to separate
this terabyte table into

00:04:22.130 --> 00:04:25.140
several gigabyte-sized tables.

00:04:25.140 --> 00:04:25.310
MICHAEL MANOOCHEHRI: Right.

00:04:25.310 --> 00:04:27.450
So this is super useful if
you've got something like a

00:04:27.450 --> 00:04:29.540
year's worth of data and you
want to cut your data set up

00:04:29.540 --> 00:04:32.580
into weeks or months, or
something like that, where you

00:04:32.580 --> 00:04:34.960
do need a huge result set, but
you're going to use it later

00:04:34.960 --> 00:04:35.970
for other queries.

00:04:35.970 --> 00:04:36.900
So that's really useful.

00:04:36.900 --> 00:04:39.140
Also, I can't wait to try this
feature because it solves a

00:04:39.140 --> 00:04:41.560
problem that I've always had
which is time stamps in

00:04:41.560 --> 00:04:42.500
different formats.

00:04:42.500 --> 00:04:45.060
So last time we did a BigQuery
launch, we released a native

00:04:45.060 --> 00:04:47.610
timestamp format, which
everybody had been asking for.

00:04:47.610 --> 00:04:50.710
And until then, we had to put
timestamps as strings or

00:04:50.710 --> 00:04:53.380
integer Unix Epoch values, and
that can be pretty annoying

00:04:53.380 --> 00:04:55.670
when you want to use the
native time stamp.

00:04:55.670 --> 00:04:58.460
So now what we can do is we take
our terabytes of data, we

00:04:58.460 --> 00:05:01.190
can run a query that says,
cast this to a different

00:05:01.190 --> 00:05:03.970
timestamp, and then just export
that as this new table,

00:05:03.970 --> 00:05:04.930
which is great.

00:05:04.930 --> 00:05:06.210
I think this is going
to be super useful.

00:05:06.210 --> 00:05:07.620
Developers, I think, are going
to love this a lot.

00:05:07.620 --> 00:05:10.410
And we'd love to hear how you
like it, if you have any

00:05:10.410 --> 00:05:11.530
problems using this flag.

00:05:11.530 --> 00:05:13.850
I want to say one thing.

00:05:13.850 --> 00:05:14.830
Why do we have this option?

00:05:14.830 --> 00:05:18.430
Why do you have to choose
the option of the flag?

00:05:18.430 --> 00:05:21.030
And I think it's because when
you're making these tables,

00:05:21.030 --> 00:05:23.340
they can be really big, and we
want to make sure you know

00:05:23.340 --> 00:05:27.030
that you're generating these
large tables because storage

00:05:27.030 --> 00:05:28.440
does cost you something
in BigQuery.

00:05:28.440 --> 00:05:30.410
We want to make sure you know
you're doing it, so that's why

00:05:30.410 --> 00:05:31.465
we have this flag.

00:05:31.465 --> 00:05:33.900
FELIPE HOFFA: And when you're
using this flag, you are

00:05:33.900 --> 00:05:36.430
losing one feature.

00:05:36.430 --> 00:05:40.230
You can't order by the
entire result set.

00:05:40.230 --> 00:05:46.450
Basically, sorting a terabyte
data table for only one result

00:05:46.450 --> 00:05:50.330
is a big task, so that's
disabled, but you can do that

00:05:50.330 --> 00:05:52.120
on your smaller result set.

00:05:52.120 --> 00:05:53.810
MICHAEL MANOOCHEHRI: OK, so you
can actually run a query,

00:05:53.810 --> 00:05:54.720
make this big table.

00:05:54.720 --> 00:05:56.680
You can't order it in that
table, but then you can run a

00:05:56.680 --> 00:05:59.740
query later to do an Order
By or something.

00:05:59.740 --> 00:06:00.320
That sounds pretty good.

00:06:00.320 --> 00:06:01.470
I think a lot of our developers
are really

00:06:01.470 --> 00:06:02.120
going to like that.

00:06:02.120 --> 00:06:04.480
It's been one of our most
requested features.

00:06:04.480 --> 00:06:07.750
And so the BigQuery team, they
take a lot of pride into

00:06:07.750 --> 00:06:10.000
listening to what developers
want and actually releasing

00:06:10.000 --> 00:06:11.270
the features that are
most requested.

00:06:11.270 --> 00:06:14.440
So I think another one that's
been requested for quite a

00:06:14.440 --> 00:06:17.050
while is one that you talked
about yesterday, which I need

00:06:17.050 --> 00:06:18.296
to learn more about.

00:06:18.296 --> 00:06:20.240
FELIPE HOFFA: Yes.

00:06:20.240 --> 00:06:22.110
I think you're talking about
the Window Functions.

00:06:22.110 --> 00:06:23.500
MICHAEL MANOOCHEHRI: Yes,
the Window Functions.

00:06:23.500 --> 00:06:26.030
What are Window Functions?

00:06:26.030 --> 00:06:29.070
FELIPE HOFFA: Well, Window
Functions are giving you the

00:06:29.070 --> 00:06:34.080
ability to analyze your
data in smarter ways.

00:06:34.080 --> 00:06:36.730
You're dealing with
a lot of data.

00:06:36.730 --> 00:06:38.880
Your are sorting it, you are
ordering it, but sometimes you

00:06:38.880 --> 00:06:40.820
want to get a row number.

00:06:40.820 --> 00:06:45.970
BigQuery wasn't giving you a
row number for its result.

00:06:45.970 --> 00:06:49.110
That was pretty easy to run
before because you get your

00:06:49.110 --> 00:06:53.160
results, you can get a row
number on the application

00:06:53.160 --> 00:06:55.770
side, but sometimes you
want to use that

00:06:55.770 --> 00:06:57.160
number for further queries.

00:06:57.160 --> 00:06:58.800
MICHAEL MANOOCHEHRI: Right.

00:06:58.800 --> 00:07:03.410
So the Window Function, the way
I understand it is you can

00:07:03.410 --> 00:07:04.890
run a query and get a result.

00:07:04.890 --> 00:07:07.470
And then once you get that
result, this batch of data, a

00:07:07.470 --> 00:07:09.690
Window Function is something
that you run on top of that.

00:07:09.690 --> 00:07:10.630
FELIPE HOFFA: Exactly.

00:07:10.630 --> 00:07:11.720
MICHAEL MANOOCHEHRI: So you get
this result, and then you

00:07:11.720 --> 00:07:13.920
do something else with
that result.

00:07:13.920 --> 00:07:15.320
One of them is adding
row numbers.

00:07:15.320 --> 00:07:17.893
So this is something you do
after the result has been run.

00:07:17.893 --> 00:07:18.660
FELIPE HOFFA: Exactly.

00:07:18.660 --> 00:07:20.590
MICHAEL MANOOCHEHRI: OK, so
row numbers, that's cool.

00:07:20.590 --> 00:07:22.620
A lot of people have been
asking us for that.

00:07:22.620 --> 00:07:24.280
So what are some other examples
of things you do

00:07:24.280 --> 00:07:25.920
after the query?

00:07:25.920 --> 00:07:28.000
FELIPE HOFFA: Well, row number
has many variations.

00:07:28.000 --> 00:07:30.860
You can turn it into a
rank where you are

00:07:30.860 --> 00:07:33.836
ordering your data.

00:07:33.836 --> 00:07:39.360
The rank, there are
at least two ways

00:07:39.360 --> 00:07:43.520
to solve equal values.

00:07:43.520 --> 00:07:46.850
When there are ties, you can
say they are in a different

00:07:46.850 --> 00:07:51.480
rank just because one comes
after the other by chance.

00:07:51.480 --> 00:07:53.160
MICHAEL MANOOCHEHRI: So a lot
of our developers are game

00:07:53.160 --> 00:07:55.020
developers, they love to
put game analytics.

00:07:55.020 --> 00:07:57.660
And so this is awesome because
you can actually take this

00:07:57.660 --> 00:07:59.640
whole set of data and you can
find out things like-- well,

00:07:59.640 --> 00:08:01.900
first of all, row numbers
are useful, like

00:08:01.900 --> 00:08:03.450
what's the first place.

00:08:03.450 --> 00:08:05.660
But if you want to do a ranking,
you could say, of all

00:08:05.660 --> 00:08:09.390
the things in my database, what
are the first, second,

00:08:09.390 --> 00:08:13.010
and you said, if there's a tie
in the ranking, what happens?

00:08:13.010 --> 00:08:15.510
FELIPE HOFFA: You can solve
it in many ways.

00:08:15.510 --> 00:08:18.930
You can rank your players one,
two, three, four in an

00:08:18.930 --> 00:08:24.350
arbitrary order, if they
have the equal score.

00:08:24.350 --> 00:08:28.740
Or you can give the same
rank for people that

00:08:28.740 --> 00:08:29.520
have the same score.

00:08:29.520 --> 00:08:30.020
MICHAEL MANOOCHEHRI: Right.

00:08:30.020 --> 00:08:31.080
OK, this is awesome.

00:08:31.080 --> 00:08:34.640
Do you think we could show
a quick demo of how these

00:08:34.640 --> 00:08:35.169
functions work?

00:08:35.169 --> 00:08:35.935
FELIPE HOFFA: Yes.

00:08:35.935 --> 00:08:40.510
I guess you have seen what we
did for I/O. We put out 500

00:08:40.510 --> 00:08:43.960
sensors all around Moscone.

00:08:43.960 --> 00:08:48.690
We got a lot of readings--
temperature, humidity, noise.

00:08:48.690 --> 00:08:50.250
MICHAEL MANOOCHEHRI: If you're
interested in this project, by

00:08:50.250 --> 00:08:51.780
the way, we called it the
Data Sensing Lab.

00:08:51.780 --> 00:08:54.180
We worked with the O'Reilly
Data Sensing Lab Team.

00:08:54.180 --> 00:08:58.530
And our teammate, Kim Cameron
up in Seattle did a great

00:08:58.530 --> 00:09:00.770
Google I/O video, which is
available on YouTube.

00:09:00.770 --> 00:09:01.690
You can go check it out.

00:09:01.690 --> 00:09:04.220
It's called "Behind the Data
Sensing Lab." And Amy Unruh

00:09:04.220 --> 00:09:07.360
from the AppEngine Team was
also involved with that.

00:09:07.360 --> 00:09:09.760
So the data we collected from
that, we have it in

00:09:09.760 --> 00:09:10.800
BigQuery right now.

00:09:10.800 --> 00:09:13.410
We're going to actually release
it for everybody to

00:09:13.410 --> 00:09:14.760
use as soon as we can.

00:09:14.760 --> 00:09:17.020
But the example you're going to
do is based on this data?

00:09:17.020 --> 00:09:17.820
FELIPE HOFFA: Yes.

00:09:17.820 --> 00:09:19.240
Let's take this data.

00:09:19.240 --> 00:09:23.460
You will have it available to
run your own experiments, but

00:09:23.460 --> 00:09:26.120
let me run some experiments
now with it.

00:09:26.120 --> 00:09:29.120
Can we switch to the computer?

00:09:29.120 --> 00:09:33.135
I have here my table from
Moscone I/O '13.

00:09:33.135 --> 00:09:35.270
MICHAEL MANOOCHEHRI: So this
is the schema of the data.

00:09:35.270 --> 00:09:36.650
So you've got a timestamp.

00:09:36.650 --> 00:09:37.940
Actually, we have multiple
timestamps.

00:09:37.940 --> 00:09:40.560
I remember that we had different
places where the

00:09:40.560 --> 00:09:43.060
data was being sent, and at
every location, we'd have a

00:09:43.060 --> 00:09:43.800
different timestamp.

00:09:43.800 --> 00:09:45.070
So the sensor had its own.

00:09:45.070 --> 00:09:47.450
The AppEngine app we were
collecting the data in has its

00:09:47.450 --> 00:09:49.270
own timestamp because it took
a little bit of time.

00:09:49.270 --> 00:09:51.110
So we have multiple
timestamps.

00:09:51.110 --> 00:09:52.530
What else is in here?

00:09:52.530 --> 00:09:54.550
FELIPE HOFFA: The data is
a very important one.

00:09:54.550 --> 00:09:55.810
That's where we get the data.

00:09:55.810 --> 00:09:56.960
MICHAEL MANOOCHEHRI:
The data itself.

00:09:56.960 --> 00:09:59.750
FELIPE HOFFA: And we got
the sensor type.

00:09:59.750 --> 00:10:03.664
So how we measure, does this
row have a temperature?

00:10:03.664 --> 00:10:06.060
Does it have a noise reading,
an air quality reading?

00:10:06.060 --> 00:10:10.750
MICHAEL MANOOCHEHRI: So each
sensor that we placed around

00:10:10.750 --> 00:10:12.150
Moscone was measuring
different things.

00:10:12.150 --> 00:10:13.760
It was like the temperature
and the pressure

00:10:13.760 --> 00:10:14.930
and things like that.

00:10:14.930 --> 00:10:16.550
These are the kind of functions
that you see a lot

00:10:16.550 --> 00:10:19.290
in relational databases often
when the data can be small.

00:10:19.290 --> 00:10:20.940
But what's great about BigQuery
is now you can run

00:10:20.940 --> 00:10:22.920
these kind of queries over
really large data

00:10:22.920 --> 00:10:25.040
sets, easily via API.

00:10:25.040 --> 00:10:26.691
These are like terabyte
data sets.

00:10:26.691 --> 00:10:29.893
This is fantastic.

00:10:29.893 --> 00:10:30.920
FELIPE HOFFA: We will
talk about this.

00:10:30.920 --> 00:10:35.130
This query ran a very fast
because it's [? Cat. ?]

00:10:35.130 --> 00:10:35.710
I'll tell you more
about that later.

00:10:35.710 --> 00:10:37.020
MICHAEL MANOOCHEHRI:
I heard about this.

00:10:37.020 --> 00:10:37.360
FELIPE HOFFA: Yes.

00:10:37.360 --> 00:10:45.930
So we have the median, and you
can see that we got three

00:10:45.930 --> 00:10:47.080
million data points.

00:10:47.080 --> 00:10:47.650
MICHAEL MANOOCHEHRI:
So quite a lot.

00:10:47.650 --> 00:10:49.090
FELIPE HOFFA: Quite a lot.

00:10:49.090 --> 00:10:52.180
And each one, let's go to
the last, for example.

00:10:52.180 --> 00:10:52.540
In the [? Wallet ?]

00:10:52.540 --> 00:10:57.470
Room, the median was 29, but we
have many values for this

00:10:57.470 --> 00:10:59.540
median because it's going
through the window.

00:10:59.540 --> 00:11:01.200
MICHAEL MANOOCHEHRI: Like
every data point, right?

00:11:01.200 --> 00:11:03.300
FELIPE HOFFA: Every data point
is getting the median for that

00:11:03.300 --> 00:11:06.850
room, so we really want
to group this data.

00:11:06.850 --> 00:11:12.310
We can do that very easily
with this query.

00:11:12.310 --> 00:11:15.420
Let me run it, and I will tell
you more about this.

00:11:15.420 --> 00:11:18.370
So we are running the same
query, and now I'm

00:11:18.370 --> 00:11:20.490
grouping the data.

00:11:20.490 --> 00:11:24.470
Max median is the same as
minimum median because--

00:11:24.470 --> 00:11:25.470
MICHAEL MANOOCHEHRI: It's
just the median.

00:11:25.470 --> 00:11:26.580
FELIPE HOFFA: [INAUDIBLE] median
is the same for each

00:11:26.580 --> 00:11:28.690
room, and I'm grouping
by room.

00:11:28.690 --> 00:11:29.480
MICHAEL MANOOCHEHRI: OK,
so this is cool.

00:11:29.480 --> 00:11:32.760
So you're showing me the median
temperature over all

00:11:32.760 --> 00:11:34.740
the data that we collected,
which is a lot of

00:11:34.740 --> 00:11:37.170
data, and by room.

00:11:37.170 --> 00:11:39.900
So in this case, we're calling
the hallway a room and the

00:11:39.900 --> 00:11:41.030
lounge is a room.

00:11:41.030 --> 00:11:42.040
This is great.

00:11:42.040 --> 00:11:46.350
FELIPE HOFFA: So we have 72
rooms in Moscone, and each one

00:11:46.350 --> 00:11:47.460
has its median temperature.

00:11:47.460 --> 00:11:48.470
MICHAEL MANOOCHEHRI: I saw
the word "blimp" there.

00:11:48.470 --> 00:11:50.420
I remember we put some of the
sensors in the blimps that

00:11:50.420 --> 00:11:52.220
were floating around,
which was very fun.

00:11:52.220 --> 00:11:52.920
FELIPE HOFFA: Oh, yes.

00:11:52.920 --> 00:11:54.840
This was a very cool thing.

00:11:54.840 --> 00:11:58.120
We had three sensors there.

00:11:58.120 --> 00:12:02.056
So now, that's last time, and
now I'm doing a [INAUDIBLE]

00:12:02.056 --> 00:12:03.840
rank over it.

00:12:03.840 --> 00:12:06.170
I'm ordering it by million
in ascending order.

00:12:06.170 --> 00:12:10.510
So first, I get the coldest
rooms in I/O.

00:12:10.510 --> 00:12:11.690
MICHAEL MANOOCHEHRI: Looks like
the coldest room was the

00:12:11.690 --> 00:12:13.660
entrance, which makes
a lot of sense.

00:12:13.660 --> 00:12:14.430
FELIPE HOFFA: Oh, yes.

00:12:14.430 --> 00:12:17.130
MICHAEL MANOOCHEHRI:
OK, great.

00:12:17.130 --> 00:12:18.010
So this is wonderful.

00:12:18.010 --> 00:12:20.030
So for the sake of time, we have
a lot of other things to

00:12:20.030 --> 00:12:23.300
cover, but what are some of
the other Window Functions

00:12:23.300 --> 00:12:24.130
that are available?

00:12:24.130 --> 00:12:26.540
There was one with ratio.

00:12:26.540 --> 00:12:27.340
Can you explain that
ratio one?

00:12:27.340 --> 00:12:28.240
FELIPE HOFFA: Ratio to Report.

00:12:28.240 --> 00:12:30.840
That one is great.

00:12:30.840 --> 00:12:37.490
With that, we could see how much
of a contribution each

00:12:37.490 --> 00:12:39.980
data point makes.

00:12:39.980 --> 00:12:43.040
I was running some queries
yesterday that I wanted to

00:12:43.040 --> 00:12:46.830
know the ratio of men to women,
so I was able to count

00:12:46.830 --> 00:12:50.420
them, as you have always
been able to count.

00:12:50.420 --> 00:12:53.000
Then when I counted, I was
asking the ratio to report.

00:12:53.000 --> 00:12:55.290
What does this number
represent as a

00:12:55.290 --> 00:12:57.080
percentage of the total?

00:12:57.080 --> 00:12:57.390
MICHAEL MANOOCHEHRI: OK.

00:12:57.390 --> 00:12:59.540
So I remember you explaining
this to me yesterday.

00:12:59.540 --> 00:13:01.690
So one thing I thought was a
great use case is if you're

00:13:01.690 --> 00:13:04.870
doing sales, or something
related to that, or even if

00:13:04.870 --> 00:13:06.620
you have more data log files.

00:13:06.620 --> 00:13:09.270
So what Ratio to Report does,
correct me if I'm wrong, is

00:13:09.270 --> 00:13:11.260
sum up everything in a column.

00:13:11.260 --> 00:13:14.120
And then whatever field you have
that you're comparing it

00:13:14.120 --> 00:13:16.620
to, it's that contribution
to the sum.

00:13:16.620 --> 00:13:19.890
So you could do things like,
what contribution does this

00:13:19.890 --> 00:13:22.590
particular salesperson have to
the total amount of sales?

00:13:22.590 --> 00:13:25.030
Or what contribution does this
player have to the total

00:13:25.030 --> 00:13:26.600
amount of games being played?

00:13:26.600 --> 00:13:28.450
Things like that, which is
really amazing, especially if

00:13:28.450 --> 00:13:30.110
you have these really
large data sets.

00:13:30.110 --> 00:13:32.600
You can get these things in a
single query without having to

00:13:32.600 --> 00:13:33.930
do extra joins, things
like that.

00:13:33.930 --> 00:13:34.220
FELIPE HOFFA: Exactly.

00:13:34.220 --> 00:13:37.140
Previously, you could do that
with an extra join.

00:13:37.140 --> 00:13:39.270
There were smart ways
to solve it.

00:13:39.270 --> 00:13:40.980
But now, it's smarter.

00:13:40.980 --> 00:13:41.780
MICHAEL MANOOCHEHRI:
Incredibly fast.

00:13:41.780 --> 00:13:42.890
How did you do that?

00:13:42.890 --> 00:13:43.530
FELIPE HOFFA: [INAUDIBLE].

00:13:43.530 --> 00:13:45.730
I already computed once.

00:13:45.730 --> 00:13:46.980
MICHAEL MANOOCHEHRI: Yes.

00:13:46.980 --> 00:13:48.310
FELIPE HOFFA: That's what
BigQuery can do now.

00:13:48.310 --> 00:13:49.355
It can remember.

00:13:49.355 --> 00:13:51.050
MICHAEL MANOOCHEHRI: So you
remembered the original query

00:13:51.050 --> 00:13:53.300
result and you just told me
immediately without having to

00:13:53.300 --> 00:13:54.460
run the whole thing over.

00:13:54.460 --> 00:13:54.950
FELIPE HOFFA: Exactly.

00:13:54.950 --> 00:13:56.610
MICHAEL MANOOCHEHRI: And so
BigQuery does this now, too?

00:13:56.610 --> 00:13:57.360
FELIPE HOFFA: Yes.

00:13:57.360 --> 00:13:59.210
BigQuery is getting smarter
and faster.

00:13:59.210 --> 00:14:03.180
If you ask the same question
and it has the same answer,

00:14:03.180 --> 00:14:05.230
BigQuery will say that answer.

00:14:05.230 --> 00:14:06.130
MICHAEL MANOOCHEHRI: So
it caches the answer.

00:14:06.130 --> 00:14:06.780
This is very smart.

00:14:06.780 --> 00:14:07.700
It caches the answer.

00:14:07.700 --> 00:14:10.070
So now, instead of waiting seven
seconds for your query,

00:14:10.070 --> 00:14:11.930
you get it immediately.

00:14:11.930 --> 00:14:13.060
So caching is hard.

00:14:13.060 --> 00:14:14.820
Let me ask you a few questions
about caching, because I'm

00:14:14.820 --> 00:14:16.330
trying to understand
how this works.

00:14:16.330 --> 00:14:19.250
Caching works when the table
might not change.

00:14:19.250 --> 00:14:20.840
What if I add data
to the table?

00:14:20.840 --> 00:14:22.210
Then what happens
to the cache?

00:14:22.210 --> 00:14:24.340
FELIPE HOFFA: Well, in that
case, the cache goes away.

00:14:24.340 --> 00:14:25.270
MICHAEL MANOOCHEHRI: The
cache goes away.

00:14:25.270 --> 00:14:25.310
FELIPE HOFFA: Yeah.

00:14:25.310 --> 00:14:28.450
BigQuery is smart about this.

00:14:28.450 --> 00:14:32.400
It realizes the table is not the
same, so it will just dump

00:14:32.400 --> 00:14:35.030
the previous results and let
you get new results.

00:14:35.030 --> 00:14:35.330
MICHAEL MANOOCHEHRI: Right.

00:14:35.330 --> 00:14:38.050
And in your blog post,
you talked about

00:14:38.050 --> 00:14:39.680
deterministic queries.

00:14:39.680 --> 00:14:44.530
So one example of this is if I
have a query that depends on a

00:14:44.530 --> 00:14:46.830
current timestamp, I'm not
actually putting the timestamp

00:14:46.830 --> 00:14:49.500
but I'm asking BigQuery to tell
me, then every time I

00:14:49.500 --> 00:14:51.590
make that query, the
time stamp changes.

00:14:51.590 --> 00:14:52.890
So does that get cached, too?

00:14:52.890 --> 00:14:54.840
FELIPE HOFFA: No, that
doesn't get cut.

00:14:54.840 --> 00:14:57.210
If you want your data to
be cut, you have to use

00:14:57.210 --> 00:14:58.450
deterministic queries.

00:14:58.450 --> 00:14:59.710
What is a deterministic query?

00:14:59.710 --> 00:15:04.160
A query where its meaning
doesn't change with time.

00:15:04.160 --> 00:15:09.070
For example, if I use a Now
function, Now changes every

00:15:09.070 --> 00:15:11.460
time I query.

00:15:11.460 --> 00:15:14.090
So current time won't be
the same, the query

00:15:14.090 --> 00:15:15.370
doesn't get to be cached.

00:15:15.370 --> 00:15:16.130
MICHAEL MANOOCHEHRI: OK,
so that's great.

00:15:16.130 --> 00:15:19.880
So if the table doesn't change
and your query itself

00:15:19.880 --> 00:15:22.740
literally doesn't change and
does not depend on some of

00:15:22.740 --> 00:15:25.020
these functions like Now,
then it will be cached.

00:15:25.020 --> 00:15:26.420
FELIPE HOFFA: The limit
of queries per day.

00:15:26.420 --> 00:15:26.710
MICHAEL MANOOCHEHRI: OK.

00:15:26.710 --> 00:15:29.270
So the query quota limit
doesn't change, but the

00:15:29.270 --> 00:15:30.980
queries do return faster.

00:15:30.980 --> 00:15:32.140
FELIPE HOFFA: Yes.

00:15:32.140 --> 00:15:33.000
And you don't get charged
for them.

00:15:33.000 --> 00:15:34.280
MICHAEL MANOOCHEHRI: And you'll
get charged for them.

00:15:34.280 --> 00:15:34.770
OK, that's excellent.

00:15:34.770 --> 00:15:36.310
I think people are going
to like that a lot.

00:15:36.310 --> 00:15:38.260
OK, so we have a bunch
of other things.

00:15:38.260 --> 00:15:39.280
Let's just zip through
the rest.

00:15:39.280 --> 00:15:41.880
I'll just say one more thing.

00:15:41.880 --> 00:15:43.790
This particular function and
the large query results are

00:15:43.790 --> 00:15:47.010
now available in the API, and
you can read about that on our

00:15:47.010 --> 00:15:49.440
documentation site, and the
BigQuery command line tool.

00:15:49.440 --> 00:15:50.830
And I believe all of
these are also

00:15:50.830 --> 00:15:52.020
available in the UI itself.

00:15:52.020 --> 00:15:56.710
So you can actually say, large
results in the UI, cache the

00:15:56.710 --> 00:15:58.090
query in the UI, things
like that.

00:15:58.090 --> 00:15:58.330
FELIPE HOFFA: Exactly.

00:15:58.330 --> 00:16:01.220
We have two ways to access
BigQuery now.

00:16:01.220 --> 00:16:08.660
We have the BQ tool, we have the
web UI, we have the API.

00:16:08.660 --> 00:16:10.670
They both allow this option.

00:16:10.670 --> 00:16:14.450
Also, you might want not to have
a cache for some queries,

00:16:14.450 --> 00:16:16.440
just to run interactive demos.

00:16:16.440 --> 00:16:21.610
In that case, you can go in the
web UI to Enable Options.

00:16:21.610 --> 00:16:25.120
You are able to set them
on or off as you want.

00:16:25.120 --> 00:16:26.370
MICHAEL MANOOCHEHRI:
OK, excellent.

00:16:26.370 --> 00:16:28.680
So speaking of dashboards, let's
just touch on some of

00:16:28.680 --> 00:16:30.090
the other things we launched.

00:16:30.090 --> 00:16:33.820
One was an increase in the quota
for querying, right?

00:16:33.820 --> 00:16:37.590
So before yesterday, the maximum
amount of querying you

00:16:37.590 --> 00:16:40.105
could do is 200 gigabytes
at a time.

00:16:40.105 --> 00:16:42.480
So all your querying processing
had to add up to

00:16:42.480 --> 00:16:45.490
200 gigabytes, plus we
gave you one extra

00:16:45.490 --> 00:16:46.400
query of any size.

00:16:46.400 --> 00:16:48.210
That's so you could do these
massive queries.

00:16:48.210 --> 00:16:50.050
So now, we've actually
increased that.

00:16:50.050 --> 00:16:52.000
And can you remind me what
the increase was?

00:16:52.000 --> 00:16:52.280
FELIPE HOFFA: Yes.

00:16:52.280 --> 00:16:53.840
We are doubling the quota.

00:16:53.840 --> 00:16:55.076
MICHAEL MANOOCHEHRI: We're
doubling it, OK.

00:16:55.076 --> 00:16:58.725
FELIPE HOFFA: We are doubling
the 200 gigabytes and we are

00:16:58.725 --> 00:17:02.760
doubling the limited queries
from one to two at a time.

00:17:02.760 --> 00:17:04.430
MICHAEL MANOOCHEHRI: So Felipe
and I were just talking about

00:17:04.430 --> 00:17:07.130
accessibility, and I think the
whole point of BigQuery is to

00:17:07.130 --> 00:17:09.280
make these large data processing
tasks more

00:17:09.280 --> 00:17:12.319
accessible via API for
developers, and this pricing

00:17:12.319 --> 00:17:16.280
changes, the query caching, and
the quota updates are just

00:17:16.280 --> 00:17:18.339
meant to increase the
accessibility.

00:17:18.339 --> 00:17:20.290
So we're really excited, and
I think it's going to help

00:17:20.290 --> 00:17:21.960
developers a lot
with learning.

00:17:21.960 --> 00:17:22.690
FELIPE HOFFA: And
about pricing.

00:17:22.690 --> 00:17:23.740
Are you a high volume user?

00:17:23.740 --> 00:17:25.254
MICHAEL MANOOCHEHRI: Oh,
I definitely am.

00:17:25.254 --> 00:17:28.770
I use BigQuery tons,
all day long.

00:17:28.770 --> 00:17:29.050
FELIPE HOFFA: Exactly.

00:17:29.050 --> 00:17:31.670
If you are a high volume user,
there is also good news for

00:17:31.670 --> 00:17:36.140
you because you are able to
obtain tiered pricing where

00:17:36.140 --> 00:17:38.800
you have further discounts.

00:17:38.800 --> 00:17:43.780
So more good news to use
more of BigQuery.

00:17:43.780 --> 00:17:44.990
MICHAEL MANOOCHEHRI: Yeah,
we can't wait.

00:17:44.990 --> 00:17:47.130
I guess the other thing we've
done, is I mentioned before,

00:17:47.130 --> 00:17:49.010
we've added some UI updates.

00:17:49.010 --> 00:17:51.280
We've updated our client
libraries, we've updated our

00:17:51.280 --> 00:17:54.790
BigQ command line tool, and
we've also updated our

00:17:54.790 --> 00:17:55.900
documentation.

00:17:55.900 --> 00:17:58.240
So please, just go check out
our documentation at

00:17:58.240 --> 00:18:02.170
developers.google.com/bigquery.

00:18:02.170 --> 00:18:03.860
And if you have questions,
there's a lot of places you

00:18:03.860 --> 00:18:04.520
could reach us.

00:18:04.520 --> 00:18:05.750
You should definitely
follow the Google

00:18:05.750 --> 00:18:07.640
Cloud Platform G+ page.

00:18:07.640 --> 00:18:10.520
There's also the Google
Developers+ page.

00:18:10.520 --> 00:18:12.840
Again, reach out to us
on Stack Overflow at

00:18:12.840 --> 00:18:14.710
Google-BigQuery.

00:18:14.710 --> 00:18:17.600
And you can follow Felipe and
I. We're on Google+ as well.

00:18:17.600 --> 00:18:19.240
Just look for us there.

00:18:19.240 --> 00:18:20.580
And we're happy to
hear from you.

00:18:20.580 --> 00:18:22.760
We want to see what you guys are
building, and I hope that

00:18:22.760 --> 00:18:26.470
you use some of these new
features to build some cool

00:18:26.470 --> 00:18:29.070
applications and share
them with us.

00:18:29.070 --> 00:18:30.750
So thanks for joining us.

00:18:30.750 --> 00:18:32.350
My name is Michael
Manoochehri.

00:18:32.350 --> 00:18:33.910
FELIPE HOFFA: And I'm
Felipe Hoffa.

00:18:33.910 --> 00:18:35.160
Thank you for joining us today.

