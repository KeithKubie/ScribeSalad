WEBVTT
Kind: captions
Language: en

00:00:10.901 --> 00:00:12.400
Gregorio: Hi.
I'm Joe Gregorio,

00:00:12.400 --> 00:00:14.501
and I work in Developer
Relations at Google.

00:00:14.501 --> 00:00:16.367
This talk is on REST
and, in the talk,

00:00:16.367 --> 00:00:19.100
I presume you're familiar with
the Atom Publishing Protocol.

00:00:19.100 --> 00:00:21.367
If you're not,
you can watch my other video

00:00:21.367 --> 00:00:23.367
"An Introduction to
the Atom Publishing Protocol,"

00:00:23.367 --> 00:00:25.033
and then come back
and watch this one.

00:00:25.033 --> 00:00:26.834
So let's begin.

00:00:26.834 --> 00:00:28.467
You may have heard
the term REST,

00:00:28.467 --> 00:00:29.767
and a lot of protocols
these days

00:00:29.767 --> 00:00:32.467
are advertising
themselves as REST.

00:00:32.467 --> 00:00:34.434
REST comes
from Roy Fielding's thesis

00:00:34.434 --> 00:00:36.934
and stands for
Representational State Transfer.

00:00:36.934 --> 00:00:38.901
It's an architectural style.

00:00:38.901 --> 00:00:41.868
Now, an architectural style
is an abstraction

00:00:41.868 --> 00:00:43.601
as opposed
to a concrete thing.

00:00:43.601 --> 00:00:45.667
For example, this Shaker house

00:00:45.667 --> 00:00:48.767
is different from
the Shaker architectural style.

00:00:48.767 --> 00:00:50.601
The architectural style
of Shaker

00:00:50.601 --> 00:00:53.100
defines the attributes
or characteristics

00:00:53.100 --> 00:00:56.868
you would see in a house
built in that style.

00:00:56.868 --> 00:00:59.300
In the same way,
the REST architectural style

00:00:59.300 --> 00:01:01.434
is a set of architectural
constraints

00:01:01.434 --> 00:01:05.100
you would see in a protocol
built in that style.

00:01:05.100 --> 00:01:07.901
HTTP is one such protocol.

00:01:07.901 --> 00:01:09.133
And, for the remainder
of this talk,

00:01:09.133 --> 00:01:11.434
we're just going
to talk about HTTP.

00:01:11.434 --> 00:01:12.567
And I'll refer back

00:01:12.567 --> 00:01:14.067
to the architectural constraints
of REST

00:01:14.067 --> 00:01:16.200
as we work through
that example.

00:01:16.200 --> 00:01:20.634
Now, it's simply not possible
to cover every aspect HTTP,

00:01:20.634 --> 00:01:22.601
so at the end
of this presentation

00:01:22.601 --> 00:01:23.767
there will be
a further reading list,

00:01:23.767 --> 00:01:25.634
if you'd like to learn more.

00:01:25.634 --> 00:01:28.367
So why should you care
about REST?

00:01:28.367 --> 00:01:31.801
Well, it's the architecture
of the Web as it works today.

00:01:31.801 --> 00:01:33.534
And if you're going to be
building applications

00:01:33.534 --> 00:01:35.834
on the Web,
shouldn't you be working

00:01:35.834 --> 00:01:38.567
with the architecture
instead of against it?

00:01:38.567 --> 00:01:41.133
And, hopefully, as you see us
go through this video,

00:01:41.133 --> 00:01:43.167
there will be
many opportunities

00:01:43.167 --> 00:01:44.767
for increasing
the performance

00:01:44.767 --> 00:01:47.033
and scalability
of your application,

00:01:47.033 --> 00:01:49.167
and solve some traditionally
tricky problems

00:01:49.167 --> 00:01:50.868
by working with HTTP

00:01:50.868 --> 00:01:53.467
and taking full advantage
of its capabilities.

00:01:53.467 --> 00:01:55.100
Let's get some
of the basics down,

00:01:55.100 --> 00:01:58.100
some nomenclature
in the operation of HTTP.

00:01:58.100 --> 00:01:59.200
At its simplest,

00:01:59.200 --> 00:02:02.667
HTTP is a request
response protocol.

00:02:02.667 --> 00:02:05.100
You browser makes a request
to the server,

00:02:05.100 --> 00:02:07.334
the Web server
gives you a response.

00:02:07.334 --> 00:02:09.601
The beauty of the Web is
that it appears very simple,

00:02:09.601 --> 00:02:13.200
as if your browser is talking
directly to the server.

00:02:13.200 --> 00:02:14.934
So, let's look in detail

00:02:14.934 --> 00:02:17.734
at a specific request
and response.

00:02:17.734 --> 00:02:19.400
Here is a GET request

00:02:19.400 --> 00:02:25.300
to the URL
http://example.org/news

00:02:25.300 --> 00:02:27.200
and here's what
the response looks like.

00:02:27.200 --> 00:02:28.934
It's a 200 response

00:02:28.934 --> 00:02:31.434
and what you're seeing here
are the headers

00:02:31.434 --> 00:02:33.934
and a little bit
of the response body.

00:02:33.934 --> 00:02:36.767
The request is to a resource
identified by a URI,

00:02:36.767 --> 00:02:42.167
in this case like I said,
http://example.org/news.

00:02:42.167 --> 00:02:45.367
Resources or addressability
is very important.

00:02:45.367 --> 00:02:48.400
The request is to a resource
identified by a URI.

00:02:48.400 --> 00:02:53.234
In this case,
http://example.org/news.

00:02:53.234 --> 00:02:56.567
The URI is broken down
into two pieces.

00:02:56.567 --> 00:02:59.634
The path goes
into the request line,

00:02:59.634 --> 00:03:04.734
and you can see the host
shows up in the host header.

00:03:04.734 --> 00:03:06.100
There is a method

00:03:06.100 --> 00:03:08.734
and that's the action
to perform on the resource.

00:03:08.734 --> 00:03:10.667
There are actually
several different methods

00:03:10.667 --> 00:03:11.901
that can be used,

00:03:11.901 --> 00:03:15.567
GET, PUT, DELETE, HEAD,
and POST among others,

00:03:15.567 --> 00:03:16.734
and each of those methods

00:03:16.734 --> 00:03:19.300
has particular characteristics
about them.

00:03:19.300 --> 00:03:23.534
For example, GET is safe,
idempotent, and cacheable.

00:03:23.534 --> 00:03:25.267
Cacheable means
the response can be cached

00:03:25.267 --> 00:03:27.367
by an intermediary
along the way,

00:03:27.367 --> 00:03:31.200
idempotent means the request
can be done multiple times,

00:03:31.200 --> 00:03:33.801
and safe means
there are no side effects

00:03:33.801 --> 00:03:35.834
from performing that action.

00:03:35.834 --> 00:03:38.534
So PUT is also idempotent,

00:03:38.534 --> 00:03:40.834
but not safe,
and not cacheable.

00:03:40.834 --> 00:03:43.434
Same with DELETE,
it is idempotent.

00:03:43.434 --> 00:03:45.968
HEAD is safe and idempotent.

00:03:45.968 --> 00:03:48.601
POST has none
of those characteristics.

00:03:48.601 --> 00:03:50.534
Also returned
in that response

00:03:50.534 --> 00:03:53.200
was the representation
of that resource,

00:03:53.200 --> 00:03:55.067
what lives at that URI.

00:03:55.067 --> 00:03:56.801
The representation
is the body

00:03:56.801 --> 00:03:59.634
and, in this case,
it was an HTML document.

00:03:59.634 --> 00:04:02.667
HTML is a form
of hypertext,

00:04:02.667 --> 00:04:05.033
which means it has links
to other resources.

00:04:05.033 --> 00:04:07.467
Here is a traditional link
that you would click on

00:04:07.467 --> 00:04:09.701
to go to another page,

00:04:09.701 --> 00:04:11.367
but there's more
than one kind of link.

00:04:11.367 --> 00:04:12.901
Here is a link
to a CSS document

00:04:12.901 --> 00:04:16.200
that the browser will call
and include to style the page.

00:04:16.200 --> 00:04:17.868
There's also
other kinds of links.

00:04:17.868 --> 00:04:20.434
Here's one
to a JavaScript document

00:04:20.434 --> 00:04:21.934
that will get pulled in.

00:04:21.934 --> 00:04:24.334
This is a particularly important
kind of hypertext

00:04:24.334 --> 00:04:25.801
or document
that's pulled in.

00:04:25.801 --> 00:04:27.434
This is called Code on Demand,

00:04:27.434 --> 00:04:29.634
the ability to load code
into the browser

00:04:29.634 --> 00:04:32.267
and execute it
on the client.

00:04:32.267 --> 00:04:34.767
The response headers
show control data,

00:04:34.767 --> 00:04:36.801
such as this header
which controls how long

00:04:36.801 --> 00:04:39.467
the response can be cached.

00:04:39.467 --> 00:04:40.701
So now that we've looked

00:04:40.701 --> 00:04:43.567
at simple HTTP request
and response,

00:04:43.567 --> 00:04:45.934
let's go back and look
at some of the characteristics

00:04:45.934 --> 00:04:48.634
that a RESTful protocol
is supposed to have.

00:04:48.634 --> 00:04:50.901
Application state
and functionality

00:04:50.901 --> 00:04:52.868
are directed into resources.

00:04:52.868 --> 00:04:55.567
Those resources are
uniquely addressable

00:04:55.567 --> 00:04:59.100
using a universal syntax
for use in hypermedia links.

00:04:59.100 --> 00:05:01.968
All resources share
a uniform interface

00:05:01.968 --> 00:05:03.133
for transferring the state

00:05:03.133 --> 00:05:04.567
between the client
and the server

00:05:04.567 --> 00:05:08.868
consisting of a constraint set
of well-defined operations,

00:05:08.868 --> 00:05:11.133
a constraint set
of content types

00:05:11.133 --> 00:05:13.167
optionally supporting
Code on Demand,

00:05:13.167 --> 00:05:15.734
and a protocol
which is client-server,

00:05:15.734 --> 00:05:19.167
stateless, layered,
and cacheable.

00:05:19.167 --> 00:05:20.234
Now that we've
already talked about

00:05:20.234 --> 00:05:22.467
many of these aspects
with HTTP,

00:05:22.467 --> 00:05:25.534
we can see that
we already have resources

00:05:25.534 --> 00:05:27.501
that are identified by URIs,

00:05:27.501 --> 00:05:30.334
and those resources have
a uniform interface

00:05:30.334 --> 00:05:32.601
understanding
a limited set of methods

00:05:32.601 --> 00:05:35.868
such as GET, PUT, POST,
HEAD, and DELETE,

00:05:35.868 --> 00:05:38.400
and that the representations
are self-identified,

00:05:38.400 --> 00:05:39.801
a constraint set
of content types

00:05:39.801 --> 00:05:42.033
that might not
only be hypertext,

00:05:42.033 --> 00:05:44.167
but could also include
Code on Demand

00:05:44.167 --> 00:05:47.400
such as the example
we saw with JavaScript.

00:05:47.400 --> 00:05:51.367
And we've even seen that HTTP
is a client-server protocol.

00:05:51.367 --> 00:05:52.868
To discuss the remainder
of the characteristics

00:05:52.868 --> 00:05:54.234
of the protocol,

00:05:54.234 --> 00:05:55.767
we need to look
at the underlying structure

00:05:55.767 --> 00:05:57.234
of the Web.

00:05:57.234 --> 00:05:59.701
We originally started out
with a simplified example

00:05:59.701 --> 00:06:01.968
of how the Web appears
to a client.

00:06:01.968 --> 00:06:03.868
Let's switch to using
the right names

00:06:03.868 --> 00:06:05.701
for each of those pieces.

00:06:05.701 --> 00:06:08.767
They're the user agent
and the origin server.

00:06:08.767 --> 00:06:11.901
The reality is
that the connections

00:06:11.901 --> 00:06:14.334
between these pieces could be
a lot more complicated.

00:06:14.334 --> 00:06:17.601
There can be many intermediaries
between you and the server

00:06:17.601 --> 00:06:19.067
you're connecting to.

00:06:19.067 --> 00:06:22.334
By intermediaries,
we mean HTTP intermediaries,

00:06:22.334 --> 00:06:24.767
which doesn't include devices
at lower levels

00:06:24.767 --> 00:06:27.934
such as routers, modems,
and access points.

00:06:27.934 --> 00:06:29.801
Those intermediaries are

00:06:29.801 --> 00:06:31.501
the layered part
of the protocol,

00:06:31.501 --> 00:06:34.033
and that layering allows
intermediaries to be added

00:06:34.033 --> 00:06:36.634
at various points
in the request response path

00:06:36.634 --> 00:06:39.334
without changing the interfaces
between components

00:06:39.334 --> 00:06:41.367
where they can do things
to passing messages,

00:06:41.367 --> 00:06:44.868
such as translation or improving
performance with caching.

00:06:44.868 --> 00:06:48.200
Intermediaries include
proxies and gateways.

00:06:48.200 --> 00:06:49.567
Proxies are chosen
by the client,

00:06:49.567 --> 00:06:52.667
while gateways are chosen
by the origin server.

00:06:52.667 --> 00:06:55.601
Despite the slide showing
only one proxy and one gateway,

00:06:55.601 --> 00:06:58.167
realize there may be
several proxies and gateways

00:06:58.167 --> 00:07:01.167
between your user agent
and origin server,

00:07:01.167 --> 00:07:03.200
or there may
actually be none.

00:07:03.200 --> 00:07:05.567
Finally, every actor
in the chain,

00:07:05.567 --> 00:07:07.667
from the user agent
through the proxies

00:07:07.667 --> 00:07:09.701
and the gateways
to the origin server,

00:07:09.701 --> 00:07:11.934
may have a cache
associated with them.

00:07:11.934 --> 00:07:14.033
If an intermediary
does caching

00:07:14.033 --> 00:07:16.934
and a response indicates
that the response can be cached,

00:07:16.934 --> 00:07:18.634
in this case for an hour,

00:07:18.634 --> 00:07:20.434
then if a new request
for that resource

00:07:20.434 --> 00:07:22.267
comes within an hour,

00:07:22.267 --> 00:07:24.934
then the cached response
will be returned.

00:07:24.934 --> 00:07:27.400
These caches finish out
the major characteristics

00:07:27.400 --> 00:07:29.133
of our REST protocol.

00:07:29.133 --> 00:07:32.000
Now, we said this architecture
had benefits.

00:07:32.000 --> 00:07:33.334
What are some of those?

00:07:33.334 --> 00:07:35.701
Let's first look at some
of the performance benefits,

00:07:35.701 --> 00:07:37.834
which include efficiency,
scalability,

00:07:37.834 --> 00:07:40.334
and user perceived
performance.

00:07:40.334 --> 00:07:41.667
For efficiency,

00:07:41.667 --> 00:07:44.067
all of those caches
help along the way.

00:07:44.067 --> 00:07:46.334
Your request may not have
to reach all the way back

00:07:46.334 --> 00:07:47.501
to the origin server

00:07:47.501 --> 00:07:50.634
or, in the case
of a local user agent cache,

00:07:50.634 --> 00:07:52.901
you may never even hit
the network at all.

00:07:52.901 --> 00:07:55.567
Control data allows
the signaling of compression,

00:07:55.567 --> 00:07:57.834
so a response can be GZIPPED
before being sent

00:07:57.834 --> 00:08:00.234
to the user agents
that can handle them.

00:08:00.234 --> 00:08:02.467
Scalability comes
from many areas.

00:08:02.467 --> 00:08:04.367
The use of gateways allows you
to distribute traffic

00:08:04.367 --> 00:08:06.434
among a large set
of origin servers

00:08:06.434 --> 00:08:09.100
based on method,
URI, content type,

00:08:09.100 --> 00:08:12.200
or any of the other headers
coming in from the request.

00:08:12.200 --> 00:08:13.934
Caching helps
scalability also

00:08:13.934 --> 00:08:15.801
as it reduces
the actual number of requests

00:08:15.801 --> 00:08:18.534
that make it all the way
back to the origin server.

00:08:18.534 --> 00:08:20.467
And statelessness allows
a request to be routed

00:08:20.467 --> 00:08:22.267
through different
gateways and proxies,

00:08:22.267 --> 00:08:23.834
thus avoiding
introducing bottlenecks

00:08:23.834 --> 00:08:28.067
and allowing more intermediaries
to be added as needed.

00:08:28.067 --> 00:08:30.501
Finally, User Perceived
Performance is increased

00:08:30.501 --> 00:08:32.667
by having a reduced set
of known media types

00:08:32.667 --> 00:08:36.133
that allows browsers to handle
known types much faster.

00:08:36.133 --> 00:08:38.601
For example, partial rendering
of HTML documents

00:08:38.601 --> 00:08:40.300
as they download.

00:08:40.300 --> 00:08:42.667
Also, Code on Demand
allows computations

00:08:42.667 --> 00:08:44.167
to be moved closer
to the client

00:08:44.167 --> 00:08:45.434
or closer to the server,

00:08:45.434 --> 00:08:48.000
depending on where the work
can be done fastest.

00:08:48.000 --> 00:08:51.133
For example, having JavaScript
to do form validation

00:08:51.133 --> 00:08:54.234
before a request is even made
to the origin server

00:08:54.234 --> 00:08:55.801
is obviously faster

00:08:55.801 --> 00:08:58.133
than round-tripping
the form values to the server

00:08:58.133 --> 00:09:01.300
and having the server return
any validation errors.

00:09:01.300 --> 00:09:04.200
Similarly, caching helps here
as it requests may not need

00:09:04.200 --> 00:09:06.501
to go completely back
to the origin server.

00:09:06.501 --> 00:09:09.100
Also, since GET
is idempotent and safe,

00:09:09.100 --> 00:09:12.067
a user agent could pre-fetch
results before they're needed,

00:09:12.067 --> 00:09:15.234
thus increasing
user perceived performance.

00:09:15.234 --> 00:09:17.634
Lots of other benefits
we won't cover,

00:09:17.634 --> 00:09:20.367
but these are outlined
in Roy's thesis.

00:09:20.367 --> 00:09:22.367
But all these benefits
aren't free.

00:09:22.367 --> 00:09:24.300
You actually have to structure
your application

00:09:24.300 --> 00:09:26.601
or service
to take advantage of them.

00:09:26.601 --> 00:09:29.200
If you do, then you will get
the benefits.

00:09:29.200 --> 00:09:31.601
And if you don't,
you won't get them.

00:09:31.601 --> 00:09:34.567
To see how structuring helps,
let's look at two protocols:

00:09:34.567 --> 00:09:37.400
XML-RPC and
the Atom Publishing Protocol.

00:09:52.234 --> 00:09:56.968
So this is what
an XML-RPC request looks like,

00:09:56.968 --> 00:10:01.601
and here's
an example response.

00:10:01.601 --> 00:10:04.834
All of the requests
in XML-RPC are posts.

00:10:04.834 --> 00:10:08.033
So what do the intermediaries
see of this request response?

00:10:08.033 --> 00:10:09.667
Is it safe?
No.

00:10:09.667 --> 00:10:11.133
Is it idempotent?
No.

00:10:11.133 --> 00:10:12.868
Or is it cacheable?
No.

00:10:12.868 --> 00:10:16.367
If they are, the intermediaries
would never know that.

00:10:16.367 --> 00:10:18.634
All the requests go
to the same URI,

00:10:18.634 --> 00:10:20.968
which means that if you're going
to distribute many such calls

00:10:20.968 --> 00:10:22.901
among a group
of origin servers,

00:10:22.901 --> 00:10:24.434
you would have to look
inside the body

00:10:24.434 --> 00:10:25.934
for the method name.

00:10:25.934 --> 00:10:29.067
This gives the least amount
of information to the Web,

00:10:29.067 --> 00:10:31.334
and thus it doesn't get any help
from intermediaries

00:10:31.334 --> 00:10:33.801
and doesn't scale
with off the shelf parts.

00:10:33.801 --> 00:10:37.167
So let's take a look
at the Atom Publishing Protocol.

00:10:37.167 --> 00:10:39.934
So for authoring to begin
in the Atom Publishing Protocol,

00:10:39.934 --> 00:10:42.634
a client needs to discover
the capabilities and locations

00:10:42.634 --> 00:10:44.267
of the available collections.

00:10:44.267 --> 00:10:45.868
Service documents are designed

00:10:45.868 --> 00:10:48.667
to support
this discovery service.

00:10:48.667 --> 00:10:52.467
To retrieve a service document,
we send a GET to its URI.

00:10:52.467 --> 00:10:56.601
GET is safe, idempotent,
cacheable, and zipable.

00:10:56.601 --> 00:10:58.767
The response type
is self-identifying.

00:10:58.767 --> 00:11:00.868
As you can see,
there's a content type header

00:11:00.868 --> 00:11:03.801
of application
Atom Service plus XML

00:11:03.801 --> 00:11:07.334
that self-identifies what
the content is specifically,

00:11:07.334 --> 00:11:10.334
and the response itself
is hypertexted.

00:11:10.334 --> 00:11:12.734
It contains URIs
for each of the collections.

00:11:12.734 --> 00:11:14.968
That's what's highlighted,
in this slide here,

00:11:14.968 --> 00:11:17.767
is the relative URI
for the collection.

00:11:17.767 --> 00:11:19.267
Once we have
a collection URI,

00:11:19.267 --> 00:11:22.067
we can post an entry
to create a new member,

00:11:22.067 --> 00:11:25.501
and then GET, PUT, or DELETE
the members at their own URIs.

00:11:25.501 --> 00:11:29.934
So here's an example of a GET
to a collection document.

00:11:29.934 --> 00:11:35.467
Again, this is safe, idempotent,
cacheable, and zipable.

00:11:35.467 --> 00:11:38.868
The response is also
self-identifying here

00:11:38.868 --> 00:11:40.734
as you have
another content type,

00:11:40.734 --> 00:11:42.901
application/atom+xml.

00:11:42.901 --> 00:11:46.934
And again, the response
is hypertext.

00:11:46.934 --> 00:11:49.334
Lastly,
the edit URI identifies

00:11:49.334 --> 00:11:51.434
where the entry
can actually be modified.

00:11:51.434 --> 00:11:54.501
That URI, you can do a GET to,
to retrieve it,

00:11:54.501 --> 00:11:57.067
you can send a PUT
to update the resource,

00:11:57.067 --> 00:11:58.667
or you can send a DELETE
to remove it

00:11:58.667 --> 00:11:59.934
from the collection.

00:11:59.934 --> 00:12:02.167
So as you can see,
the Atom Publishing Protocol

00:12:02.167 --> 00:12:05.901
is designed with RESTful
characteristics in mind

00:12:05.901 --> 00:12:07.467
and gets many advantages

00:12:07.467 --> 00:12:10.067
from intermediaries
and the network itself

00:12:10.067 --> 00:12:12.968
as those messages
transfer back and forth.

00:12:12.968 --> 00:12:15.033
So, let's look at some
of the other idioms

00:12:15.033 --> 00:12:18.000
that you can use in building
your RESTful protocol

00:12:18.000 --> 00:12:19.701
to get some
of the advantages.

00:12:19.701 --> 00:12:22.734
For example,
long-lived images.

00:12:22.734 --> 00:12:24.601
If you have large images

00:12:24.601 --> 00:12:26.000
that need to be transferred
back and forth

00:12:26.000 --> 00:12:29.734
as part of your Web page,
what you should do is

00:12:29.734 --> 00:12:32.334
set the cache for those images
to be very long.

00:12:32.334 --> 00:12:33.868
If you need to update
those images,

00:12:33.868 --> 00:12:35.868
upload a new image
to a new URI

00:12:35.868 --> 00:12:39.767
and change the HTML to point
to that new URI.

00:12:39.767 --> 00:12:43.868
Here's an example
where I have big-image.png.

00:12:43.868 --> 00:12:45.634
And,
if we retrieve that image,

00:12:45.634 --> 00:12:47.133
you'll see that
the cache control header

00:12:47.133 --> 00:12:49.133
has been set
to a very long time.

00:12:49.133 --> 00:12:51.434
In this case, 30 days.

00:12:51.434 --> 00:12:54.400
If we made a mistake, or we'd
like to update that image,

00:12:54.400 --> 00:12:58.634
what I need to do is upload
a new image, big-image-2,

00:12:58.634 --> 00:13:01.300
set the cache control
for that to be very long,

00:13:01.300 --> 00:13:03.400
and then update the HTML.

00:13:03.400 --> 00:13:06.133
The idea here is
that you keep the HTML

00:13:06.133 --> 00:13:07.834
with the short
cache lifetime,

00:13:07.834 --> 00:13:11.200
and thus you
can update that easily.

00:13:11.200 --> 00:13:12.567
So there you go,

00:13:12.567 --> 00:13:16.200
a high level view of REST
and how it relates to HTTP.

00:13:16.200 --> 00:13:17.467
Here's the list
of further reading

00:13:17.467 --> 00:13:19.000
that I had promised you.

00:13:19.000 --> 00:13:23.467
"RFC 2616" actually outlines
what HTTP is.

00:13:23.467 --> 00:13:27.968
"RFC 3986" outlines
the URI standard.

00:13:27.968 --> 00:13:29.734
You can read
Roy Fielding's thesis,

00:13:29.734 --> 00:13:31.367
"Architectural Styles
and the Design

00:13:31.367 --> 00:13:33.767
of Network-based
Software Architectures."

00:13:33.767 --> 00:13:35.701
And there's also
this "Caching Tutorial"

00:13:35.701 --> 00:13:38.133
by Mark Nottingham
which covers in detail

00:13:38.133 --> 00:13:39.834
many of the things
we just talked about.

00:13:39.834 --> 00:13:41.767
Thanks and have fun.

