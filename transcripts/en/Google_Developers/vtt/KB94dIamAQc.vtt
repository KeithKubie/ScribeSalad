WEBVTT
Kind: captions
Language: en

00:00:00.880 --> 00:00:03.000
Imagine you're
walking in the forest

00:00:03.000 --> 00:00:05.010
and you encounter an object.

00:00:05.010 --> 00:00:06.990
What questions come
through your mind?

00:00:06.990 --> 00:00:08.910
First of all, what if this?

00:00:08.910 --> 00:00:10.770
Is this a stick?

00:00:10.770 --> 00:00:12.310
Obviously it's a stick.

00:00:12.310 --> 00:00:15.650
Secondly, hmm, what
can I do with it?

00:00:15.650 --> 00:00:17.780
If you are a child like
this little fellow,

00:00:17.780 --> 00:00:20.680
poking somebody with it may
sound like a great idea.

00:00:20.680 --> 00:00:22.430
Or if you're older,
you can probably

00:00:22.430 --> 00:00:24.610
use the stick as a walking aid.

00:00:24.610 --> 00:00:26.680
Find some more
sticks and maybe you

00:00:26.680 --> 00:00:28.580
can use them to build a shelter.

00:00:28.580 --> 00:00:32.670
Or you can use them to keep
warm on cold winter nights.

00:00:32.670 --> 00:00:35.200
The stick is an
example of an entity.

00:00:35.200 --> 00:00:38.240
And the many uses of it
are called affordances.

00:00:38.240 --> 00:00:40.820
This video is about
schema.org actions.

00:00:40.820 --> 00:00:44.840
And you can think of them as
entities plus affordances.

00:00:44.840 --> 00:00:47.050
What's so exciting
about actions?

00:00:47.050 --> 00:00:50.390
I think that actions can
enable some of the experiences

00:00:50.390 --> 00:00:53.450
I only read about in science
fiction books growing up.

00:00:53.450 --> 00:00:54.960
But let's start
at the beginning.

00:00:54.960 --> 00:00:56.610
Hi, I'm Jarek Wilkiewicz.

00:00:56.610 --> 00:00:59.720
If you watched the previous
two videos in this series,

00:00:59.720 --> 00:01:03.440
you know that my DJ buddy
Shawn and I built a system

00:01:03.440 --> 00:01:05.710
to make the data
from our music store

00:01:05.710 --> 00:01:09.290
machine readable and available
in the Knowledge Graph.

00:01:09.290 --> 00:01:13.180
We use schema.org and JSON-LD
so that when the user says,

00:01:13.180 --> 00:01:17.110
OK Google, and asks to listen
to a music artist we carry,

00:01:17.110 --> 00:01:19.450
our mobile application
will be ready to fulfill

00:01:19.450 --> 00:01:21.030
users' requests.

00:01:21.030 --> 00:01:23.060
Shawn and I published
the information

00:01:23.060 --> 00:01:25.580
about the artists we
carry in our store.

00:01:25.580 --> 00:01:28.250
We used JSON-LD
markup and embedded it

00:01:28.250 --> 00:01:30.650
in artist web pages on our site.

00:01:30.650 --> 00:01:34.030
We associated our mobile
music app with the artists

00:01:34.030 --> 00:01:37.970
we carry so that our app could
be triggered by the OK Google

00:01:37.970 --> 00:01:39.270
voice command.

00:01:39.270 --> 00:01:41.260
Remember my story
about the stick?

00:01:41.260 --> 00:01:44.700
As I told you earlier, the
many useful and not so useful

00:01:44.700 --> 00:01:48.700
things that can be done with
it are called affordances.

00:01:48.700 --> 00:01:50.260
And the affordance
is the quality

00:01:50.260 --> 00:01:52.380
of an object, or an
environment, which

00:01:52.380 --> 00:01:55.475
allows an individual
to perform an action.

00:01:55.475 --> 00:01:58.160
What does this have to do
with schema.org actions?

00:01:58.160 --> 00:01:59.320
Let me explain.

00:01:59.320 --> 00:02:01.800
If you take a look at
this JSON-LD markup,

00:02:01.800 --> 00:02:04.660
you will notice that the
potentialAction property

00:02:04.660 --> 00:02:07.370
identifies a
ListenAction affordance.

00:02:07.370 --> 00:02:10.830
This means that the music
artist from our store

00:02:10.830 --> 00:02:14.560
can be listened to
using our mobile app.

00:02:14.560 --> 00:02:16.770
Let's revisit this simple
architecture diagram

00:02:16.770 --> 00:02:18.330
from our first video.

00:02:18.330 --> 00:02:20.800
The JSON-LD markup
from our store site

00:02:20.800 --> 00:02:23.850
is processed by a
crawler and then saved

00:02:23.850 --> 00:02:26.350
in our small Knowledge Graph
running in an open source graph

00:02:26.350 --> 00:02:28.080
database called Cayley.

00:02:28.080 --> 00:02:30.800
The crawler parses the
markup from our site

00:02:30.800 --> 00:02:33.430
and transforms it into triples.

00:02:33.430 --> 00:02:36.930
Triples are data representation
well-suited for graphs.

00:02:36.930 --> 00:02:39.650
Once we have the triples, we
can load them into Cayley.

00:02:39.650 --> 00:02:41.600
As you can see in
this visualization,

00:02:41.600 --> 00:02:45.130
green nodes represent
the potentialAction.

00:02:45.130 --> 00:02:48.640
Much like other structured data
about our music store entities,

00:02:48.640 --> 00:02:50.710
we have loaded the
potentialAction triples

00:02:50.710 --> 00:02:51.630
into Cayley.

00:02:51.630 --> 00:02:54.850
We have also loaded a music
data set from Freebase.

00:02:54.850 --> 00:02:57.720
Now, Cayley can answer
handy questions such as,

00:02:57.720 --> 00:02:59.990
how can I listen to Nerdcore?

00:02:59.990 --> 00:03:02.560
As you can see, the query
produces an Android app

00:03:02.560 --> 00:03:03.570
as the result.

00:03:03.570 --> 00:03:07.370
The app can be invoked to
play the music we want.

00:03:07.370 --> 00:03:08.810
To show you how
this all works, we

00:03:08.810 --> 00:03:12.080
will use our Android action
simulator and our sample music

00:03:12.080 --> 00:03:13.080
app.

00:03:13.080 --> 00:03:14.990
Let's try to listen to Nerdcore.

00:03:14.990 --> 00:03:18.000
With the simulator, we can
issue the query for the genre.

00:03:18.000 --> 00:03:20.270
The full query
expression sent to Cayley

00:03:20.270 --> 00:03:22.430
is similar to the one
I showed you earlier.

00:03:22.430 --> 00:03:25.340
This should trigger
our sample music app.

00:03:25.340 --> 00:03:25.990
Oops!

00:03:25.990 --> 00:03:27.140
Or maybe not.

00:03:27.140 --> 00:03:28.960
Why isn't this working?

00:03:28.960 --> 00:03:30.610
Let's look at the
AndroidManifest

00:03:30.610 --> 00:03:32.170
of our sample music app.

00:03:32.170 --> 00:03:35.240
Oh, we forgot to include
the intent filter.

00:03:35.240 --> 00:03:36.650
We may need to fix that.

00:03:36.650 --> 00:03:40.860
MEDIA_PLAY_FROM_SEARCH handling
was missing from our manifest.

00:03:40.860 --> 00:03:42.570
Now we can try again.

00:03:42.570 --> 00:03:44.475
Sure enough, the
music starts playing.

00:03:44.475 --> 00:03:45.910
[MUSIC PLAYING]

00:03:45.910 --> 00:03:47.340
All right.

00:03:47.340 --> 00:03:50.380
So far, we've covered how a
mobile app can be triggered

00:03:50.380 --> 00:03:52.660
in our response to
a voice command,

00:03:52.660 --> 00:03:56.340
and I showed you the JSON-LD
markup which enables this.

00:03:56.340 --> 00:03:57.570
What about the web?

00:03:57.570 --> 00:04:01.460
Schema.org actions allows us
to specify web actions as well.

00:04:01.460 --> 00:04:03.640
For example, similarly
to the mobile app,

00:04:03.640 --> 00:04:06.400
we can indicate that the
artist from our store

00:04:06.400 --> 00:04:09.000
can be listened to on the web.

00:04:09.000 --> 00:04:11.050
Note that the HTTP
link identifies

00:04:11.050 --> 00:04:14.850
the URL where the user
can listen to the artist.

00:04:14.850 --> 00:04:17.720
Besides the ListenAction, what
other types of affordances

00:04:17.720 --> 00:04:20.079
can we specify using schema.org?

00:04:20.079 --> 00:04:21.320
A lot of them.

00:04:21.320 --> 00:04:23.880
Not all of them apply
to all entities, though.

00:04:23.880 --> 00:04:26.150
For example,
ListenAction may not

00:04:26.150 --> 00:04:28.380
work very well with a stick.

00:04:28.380 --> 00:04:30.040
OK, let's look at
another affordance

00:04:30.040 --> 00:04:31.040
called the SearchAction.

00:04:33.430 --> 00:04:35.680
To illustrate how the
SearchAction works,

00:04:35.680 --> 00:04:38.700
we will use our web simulator
to help us invoke actions.

00:04:38.700 --> 00:04:40.500
Let's fire it up.

00:04:40.500 --> 00:04:44.220
All right, let's point the
simulator at our music site.

00:04:44.220 --> 00:04:46.540
As you can tell, the
simulator detected

00:04:46.540 --> 00:04:48.420
we have a SearchAction
available.

00:04:48.420 --> 00:04:50.050
How did it do that?

00:04:50.050 --> 00:04:51.310
It's quite simple.

00:04:51.310 --> 00:04:53.160
As you may have
guessed by now, we

00:04:53.160 --> 00:04:57.430
used schema.org actions markup
on the main page of our store.

00:04:57.430 --> 00:04:59.220
Here's what the
markup looks like.

00:04:59.220 --> 00:05:00.720
Let's highlight a few things.

00:05:00.720 --> 00:05:04.570
The potentialAction target
is the HTTP urlTemplate.

00:05:04.570 --> 00:05:06.610
Remember that in
the mobile example,

00:05:06.610 --> 00:05:09.570
we were using an
Android deep link.

00:05:09.570 --> 00:05:13.270
The urlTemplate is
defined by RFC 6570.

00:05:13.270 --> 00:05:15.960
And while that's a
very awesome spec,

00:05:15.960 --> 00:05:19.130
we won't get into
the details here.

00:05:19.130 --> 00:05:22.110
Suffice it to say, that the
query parameter is properly

00:05:22.110 --> 00:05:25.390
substituted by the client, or,
in our case, the simulator.

00:05:25.390 --> 00:05:28.040
Let's now invoke
the SearchAction.

00:05:28.040 --> 00:05:31.610
As expected, we found Dual Core.

00:05:31.610 --> 00:05:34.230
Since the simulator also
detected the ListenAction

00:05:34.230 --> 00:05:37.200
in the JSON-LD response,
we can invoke it.

00:05:37.200 --> 00:05:40.690
This takes us to our
jarekandshawnmusic.com site

00:05:40.690 --> 00:05:42.950
where users can
listen to Dual Core.

00:05:42.950 --> 00:05:45.190
The target URL
the simulator uses

00:05:45.190 --> 00:05:48.330
is defined in the
JSON-LD response.

00:05:48.330 --> 00:05:51.070
Now, we can hit the
Play button and enjoy.

00:05:51.070 --> 00:05:52.540
[MUSIC PLAYING]

00:05:52.540 --> 00:05:53.580
All right.

00:05:53.580 --> 00:05:56.890
Let's think about the search
use case for a second.

00:05:56.890 --> 00:06:00.480
We use schema.org actions to
describe the search endpoint.

00:06:00.480 --> 00:06:02.270
The simulator sent
the GET request

00:06:02.270 --> 00:06:06.010
to the URL defined by our
markup with a query expression.

00:06:06.010 --> 00:06:10.190
Note that we have associated
a RESTful API affordance

00:06:10.190 --> 00:06:14.220
with an entity serialized
as a JSON-LD document.

00:06:14.220 --> 00:06:17.410
This is an example
of a Hypermedia API.

00:06:17.410 --> 00:06:21.000
The Hypermedia API topic is
quite fascinating in itself,

00:06:21.000 --> 00:06:23.080
but we won't get into it today.

00:06:23.080 --> 00:06:25.770
If you would like to learn
more about Hypermedia APIs,

00:06:25.770 --> 00:06:27.460
click the link on your screen.

00:06:27.460 --> 00:06:30.720
As you can tell by now,
schema.org action spec

00:06:30.720 --> 00:06:32.600
is quite expressive,
and I have barely

00:06:32.600 --> 00:06:34.500
scratched the surface
in this video.

00:06:34.500 --> 00:06:36.390
I am very excited
about the potential

00:06:36.390 --> 00:06:37.934
of schema.org actions.

00:06:37.934 --> 00:06:39.350
I think it's a
step towards making

00:06:39.350 --> 00:06:43.810
the dream I shared with you
in the first video a reality.

00:06:43.810 --> 00:06:46.170
OK, what do we do next?

00:06:46.170 --> 00:06:49.550
Let's learn more and
clone the repository

00:06:49.550 --> 00:06:52.090
that we have shared
to try it out.

00:06:52.090 --> 00:06:54.560
You can also get
more information from

00:06:54.560 --> 00:06:57.390
developers.google.com/schemas.

00:06:57.390 --> 00:07:00.510
Last but not least, if you find
this technology interesting,

00:07:00.510 --> 00:07:01.350
please let me know.

00:07:01.350 --> 00:07:02.840
I would love to hear from you.

00:07:02.840 --> 00:07:05.250
Thanks and have a great day.

