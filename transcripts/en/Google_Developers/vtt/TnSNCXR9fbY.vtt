WEBVTT
Kind: captions
Language: en

00:00:01.067 --> 00:00:02.334
Galpin: So the title
of the presentation

00:00:02.334 --> 00:00:05.167
is "Evading Pirates
and Stopping Vampires

00:00:05.167 --> 00:00:08.834
Using License Server,
In-app Billing, and App Engine."

00:00:08.834 --> 00:00:11.501
Now you might ask,

00:00:11.501 --> 00:00:14.501
"Okay, what do these
three things have in common?

00:00:14.501 --> 00:00:17.033
License Server, In-app Billing,
and App Engine."

00:00:17.033 --> 00:00:20.167
And they're all technologies
that we're providing

00:00:20.167 --> 00:00:24.167
that allow you to take
some form of your application

00:00:24.167 --> 00:00:26.167
and put it into the Cloud.

00:00:26.167 --> 00:00:28.000
In this case,

00:00:28.000 --> 00:00:31.000
the way your application
protects itself from pirates

00:00:31.000 --> 00:00:34.000
as well as the way we validate
that protection

00:00:34.000 --> 00:00:37.167
is now all being put in some
form or another in the Cloud.

00:00:37.167 --> 00:00:40.667
But let's talk first
about pirates.

00:00:40.667 --> 00:00:44.667
So piracy is a reality
on all platforms,

00:00:44.667 --> 00:00:47.000
and really dedicated pirates
aren't going to be stopped,

00:00:47.000 --> 00:00:50.834
which is why this talk is not
titled "Stopping Pirates,"

00:00:50.834 --> 00:00:53.167
because we recognize that--

00:00:53.167 --> 00:00:55.501
that, uh, ultimately people

00:00:55.501 --> 00:00:58.167
are very, uh,

00:00:58.167 --> 00:01:00.601
they're--they're--
ultimately people are--

00:01:00.601 --> 00:01:04.501
are going to be
very, very dedicated

00:01:04.501 --> 00:01:06.501
to trying to--

00:01:06.501 --> 00:01:08.834
to the craft of hacking.

00:01:08.834 --> 00:01:10.834
But what we want to do

00:01:10.834 --> 00:01:12.834
is not necessarily
target these people.

00:01:12.834 --> 00:01:14.834
Let them have fun.

00:01:14.834 --> 00:01:16.834
But let's target
these guys instead.

00:01:16.834 --> 00:01:18.834
Yeah, we all know--

00:01:18.834 --> 00:01:21.000
we all know
what these pirates look like.

00:01:21.000 --> 00:01:23.167
You know, the regular pirates
are, you know--

00:01:23.167 --> 00:01:25.501
have the eye patch, and they're
green, and, you know, they--

00:01:25.501 --> 00:01:27.834
but these guys here
are the guys we really want

00:01:27.834 --> 00:01:29.834
because these guys
are our potential customers.

00:01:29.834 --> 00:01:32.167
So why do stuff like make piracy
a little inconvenient

00:01:32.167 --> 00:01:34.334
or challenging
or message that it's uncool?

00:01:34.334 --> 00:01:36.667
You know, we can use the fact

00:01:36.667 --> 00:01:39.167
that people are downloading our
application as a marketing tool.

00:01:39.167 --> 00:01:41.501
It doesn't necessarily
have to be something

00:01:41.501 --> 00:01:43.167
where someone comes up

00:01:43.167 --> 00:01:45.167
and they just can't
play anything

00:01:45.167 --> 00:01:47.000
and they can't see anything.

00:01:47.000 --> 00:01:49.000
That doesn't help us ultimately.

00:01:49.000 --> 00:01:51.167
Um, we want to make sure
that people recognize

00:01:51.167 --> 00:01:53.167
that there's great content
out there.

00:01:53.167 --> 00:01:55.501
And of course, we want to
leverage new monetization models

00:01:55.501 --> 00:01:57.701
around things like
In-App purchase and Ads.

00:01:57.701 --> 00:01:59.667
So how many of you were at

00:01:59.667 --> 00:02:01.834
the Android Market talk
earlier today?

00:02:01.834 --> 00:02:04.000
So one of the things
that's kind of amazing

00:02:04.000 --> 00:02:06.167
is that we've now
put up a list

00:02:06.167 --> 00:02:08.334
of top-grossing applications
on Android Market.

00:02:08.334 --> 00:02:11.334
Now what's shocking about that

00:02:11.334 --> 00:02:13.667
is that out of the top five

00:02:13.667 --> 00:02:16.000
top-grossing applications

00:02:16.000 --> 00:02:20.000
three of them are solely funded
through In-App Payments,

00:02:20.000 --> 00:02:23.000
and we've only introduced
In-App Payments a month ago.

00:02:23.000 --> 00:02:26.334
So this is something
that is working.

00:02:26.334 --> 00:02:29.501
So again,

00:02:29.501 --> 00:02:31.534
if you have something like this

00:02:31.534 --> 00:02:33.667
when you--
when a license check fails,

00:02:33.667 --> 00:02:35.667
there's a good chance

00:02:35.667 --> 00:02:38.000
this is not going to do
anything valuable for you.

00:02:38.000 --> 00:02:40.000
Okay, your customer
is going to get annoyed.

00:02:40.000 --> 00:02:42.334
Even worse, if this comes up

00:02:42.334 --> 00:02:44.667
when they've legitimately
purchased the app,

00:02:44.667 --> 00:02:46.667
they're gonna be really upset.

00:02:46.667 --> 00:02:49.834
Although actually I-I would find
that kind of cool.

00:02:49.834 --> 00:02:51.834
But, uh...
[laughter]

00:02:51.834 --> 00:02:54.834
Galpin: But--but there are ways
in which we can approach this,

00:02:54.834 --> 00:02:56.834
again, as a marketing tool.

00:02:56.834 --> 00:02:59.667
So--so think about this

00:02:59.667 --> 00:03:02.000
as we go through
this presentation.

00:03:02.000 --> 00:03:05.667
But let's talk first about what
License Verification Library is.

00:03:05.667 --> 00:03:08.501
It is your first defense

00:03:08.501 --> 00:03:10.501
against piracy.

00:03:10.501 --> 00:03:12.667
And what's cool about it

00:03:12.667 --> 00:03:15.667
is that it is not a system
that is cookie-cutter system

00:03:15.667 --> 00:03:18.501
that every application uses
in the same way,

00:03:18.501 --> 00:03:20.334
and this is intentional,

00:03:20.334 --> 00:03:23.000
because the goal is that
someone should not be able

00:03:23.000 --> 00:03:24.834
to write a tool

00:03:24.834 --> 00:03:27.167
that removes this kind
of protection from your app,

00:03:27.167 --> 00:03:29.167
where if they write that tool

00:03:29.167 --> 00:03:31.167
it's got to be really,
really complicated,

00:03:31.167 --> 00:03:33.167
because it's going
to have to attack

00:03:33.167 --> 00:03:35.334
all sorts of different ways
you can protect yourself.

00:03:35.334 --> 00:03:37.367
And that's really the goal here.

00:03:37.367 --> 00:03:39.334
So how does this work?

00:03:39.334 --> 00:03:41.167
The application
actually determines

00:03:41.167 --> 00:03:43.167
how to enforce the policy.

00:03:43.167 --> 00:03:45.334
You get to create
the dialog that comes up.

00:03:45.334 --> 00:03:47.501
You get to create
the messaging around it.

00:03:47.501 --> 00:03:50.000
You get to use it, again, as
a marketing tool if you want to.

00:03:50.000 --> 00:03:52.000
In fact, you can simply say,

00:03:52.000 --> 00:03:54.000
"Hey, man,
I've got kids at home,

00:03:54.000 --> 00:03:56.334
and, you know, I make
my living off of this."

00:03:56.334 --> 00:03:58.334
And you can do
whatever you want.

00:03:58.334 --> 00:04:00.434
You don't have to be
the bad guy

00:04:00.434 --> 00:04:03.501
or seem like the bad guy,
'cause, of course, you're not.

00:04:03.501 --> 00:04:05.334
You're developers.

00:04:05.334 --> 00:04:07.501
Um, and the way this works

00:04:07.501 --> 00:04:09.834
is by using public key--

00:04:09.834 --> 00:04:12.834
public key cryptog--
public key cryptography.

00:04:12.834 --> 00:04:15.667
So we store the private key
up in our server,

00:04:15.667 --> 00:04:19.334
and your application
actually verifies the license,

00:04:19.334 --> 00:04:21.501
the signed license response
from our server.

00:04:21.501 --> 00:04:23.667
Let's talk about how
this actually works--

00:04:23.667 --> 00:04:26.834
so once again,
private key up in our server,

00:04:26.834 --> 00:04:28.834
which is actually
Android Market,

00:04:28.834 --> 00:04:30.834
and public key
in your application.

00:04:30.834 --> 00:04:33.167
When you want to verify
the license, your application

00:04:33.167 --> 00:04:35.334
simply sends a "check license
request" message

00:04:35.334 --> 00:04:37.334
off to the licensing service.

00:04:37.334 --> 00:04:39.501
It goes to the server.
It comes back down.

00:04:39.501 --> 00:04:41.501
And blam, you get
a signed response.

00:04:41.501 --> 00:04:43.167
Sounds pretty cool.

00:04:43.167 --> 00:04:45.167
The nice thing about this

00:04:45.167 --> 00:04:47.501
is that it has nothing to do
with the platform.

00:04:47.501 --> 00:04:49.834
They can be running whatever
kind of code they want.

00:04:49.834 --> 00:04:51.834
They can be running
a routed system.

00:04:51.834 --> 00:04:53.834
They can be running another,
you know--

00:04:53.834 --> 00:04:56.000
whatever they've put on there
it doesn't matter,

00:04:56.000 --> 00:04:58.000
because your application
and the server

00:04:58.000 --> 00:05:00.000
are the only
two trusted components.

00:05:00.000 --> 00:05:02.067
That was obviously done
by design.

00:05:02.067 --> 00:05:04.067
But there is one problem
with this

00:05:04.067 --> 00:05:06.167
in that there is
a well-known client attack.

00:05:06.167 --> 00:05:08.167
And here's what people do.

00:05:08.167 --> 00:05:10.167
They use tools
to disassemble the code,

00:05:10.167 --> 00:05:12.601
and they make simple changes in
the code to alter the response

00:05:12.601 --> 00:05:14.834
so that instead of returning
the licensed or unlicensed,

00:05:14.834 --> 00:05:16.501
it alters it.

00:05:16.501 --> 00:05:18.834
They reassemble it. They sign
it with an alternate signature.

00:05:18.834 --> 00:05:21.000
And blam,
protection is broken.

00:05:21.000 --> 00:05:24.167
So we realized that
was going to be an issue.

00:05:24.167 --> 00:05:26.334
In fact, when we first
released it we suggested

00:05:26.334 --> 00:05:28.667
doing a couple of things
in order to help strengthen

00:05:28.667 --> 00:05:30.667
the defenses
of your application.

00:05:30.667 --> 00:05:33.000
And since then we've come up
with a couple of more ideas,

00:05:33.000 --> 00:05:35.167
and I'll share a few of those
with you.

00:05:35.167 --> 00:05:37.167
So the first
and most important thing

00:05:37.167 --> 00:05:39.167
is to use an obfuscator,

00:05:39.167 --> 00:05:41.167
and it's gonna make it harder

00:05:41.167 --> 00:05:43.334
for someone to understand your
code when it's disassembled.

00:05:43.334 --> 00:05:45.834
The second thing we want to do
is to actually modify the LVL.

00:05:45.834 --> 00:05:47.834
The LVL is simply an example,

00:05:47.834 --> 00:05:49.834
and of course,
there's always a problem

00:05:49.834 --> 00:05:51.868
whenever you give
an example to someone,

00:05:51.868 --> 00:05:55.000
is that there is
a tremendous, tremendous desire

00:05:55.000 --> 00:05:58.000
to want to use it verbatim,
no matter how bad it is,

00:05:58.000 --> 00:06:01.000
and I've seen this
in--in every aspect

00:06:01.000 --> 00:06:03.000
of my software engineering
career,

00:06:03.000 --> 00:06:05.000
and the LVL is no exception.

00:06:05.000 --> 00:06:07.000
It it truly just an example

00:06:07.000 --> 00:06:09.334
of how to call this service
that's with an Android Market,

00:06:09.334 --> 00:06:11.501
but it is not
in any way designed

00:06:11.501 --> 00:06:14.834
to be the beyond
and all of piracy protection,

00:06:14.834 --> 00:06:16.834
so we modify it.

00:06:16.834 --> 00:06:18.834
And we also,
and most importantly,

00:06:18.834 --> 00:06:20.834
we make the application
tamper-resistant.

00:06:20.834 --> 00:06:22.834
We want the application
to know

00:06:22.834 --> 00:06:25.834
if the user has touched it,
if the user's re-signed it,

00:06:25.834 --> 00:06:27.834
if the user's done
something to it

00:06:27.834 --> 00:06:30.167
that is going to change its
behavior, for a lot of reasons.

00:06:30.167 --> 00:06:32.501
I mean, we want people
to not be cheating in games

00:06:32.501 --> 00:06:34.167
in Android Market either.

00:06:34.167 --> 00:06:36.167
So there's a lot of reasons

00:06:36.167 --> 00:06:38.167
to make your application
tamper-resistant.

00:06:38.167 --> 00:06:40.334
And the nice thing about
the tamper-resistant stuff

00:06:40.334 --> 00:06:42.334
is it doesn't matter.
It is not relying on the LVL.

00:06:42.334 --> 00:06:44.467
It is entirely independent
of what goes on in LVL.

00:06:44.467 --> 00:06:47.100
So let's talk about
invocation/response handling.

00:06:47.100 --> 00:06:49.667
One of the things
that the LVL does wrong

00:06:49.667 --> 00:06:53.167
is it invokes itself
in onCreate,

00:06:53.167 --> 00:06:55.167
which is a logical place

00:06:55.167 --> 00:06:57.334
if you want to invoke something
like this.

00:06:57.334 --> 00:06:59.501
After all, your activity's
being created right then.

00:06:59.501 --> 00:07:01.501
It's very, very obvious.

00:07:01.501 --> 00:07:03.667
The problem with that
is it's very obvious

00:07:03.667 --> 00:07:05.834
to anyone who's trying
to hack your code

00:07:05.834 --> 00:07:07.834
that that's where
you would put it,

00:07:07.834 --> 00:07:10.167
and it's always going
to happen at the same time,

00:07:10.167 --> 00:07:12.334
during start-up,
so it's very easy to trap.

00:07:12.334 --> 00:07:14.667
So it's much, much better
to put in a function,

00:07:14.667 --> 00:07:16.667
first of all, that's obfuscated,

00:07:16.667 --> 00:07:18.667
that--that isn't called
by the framework,

00:07:18.667 --> 00:07:21.167
and secondly, doing it
in a background thread.

00:07:21.167 --> 00:07:23.834
Doing it at some random time
makes it a lot harder to trap.

00:07:23.834 --> 00:07:26.167
Finally, again,

00:07:26.167 --> 00:07:28.834
allowing for a limited amount
of game play is kind of cool.

00:07:28.834 --> 00:07:31.534
I mean, first of all, it becomes
an immediate marketing tool,

00:07:31.534 --> 00:07:34.501
and, uh, and secondly, you know,

00:07:34.501 --> 00:07:37.000
it--it actually gives you
the ability to recover nicely.

00:07:37.000 --> 00:07:39.501
Like, if the user actually has
to wait for that license check

00:07:39.501 --> 00:07:41.501
at the beginning
of every single game,

00:07:41.501 --> 00:07:43.501
you're inconveniencing
all of your legitimate users,

00:07:43.501 --> 00:07:45.501
and that's not fun either.

00:07:45.501 --> 00:07:48.167
Um, definitely this third one
is super, super important,

00:07:48.167 --> 00:07:50.834
and we might even see a result
of that in this session,

00:07:50.834 --> 00:07:53.501
because we're gonna be demoing
a couple of license check stuff,

00:07:53.501 --> 00:07:55.834
and you'll see, especially
in a room like this

00:07:55.834 --> 00:07:58.334
where there's not gonna be
a lot of Wi-Fi issues probably

00:07:58.334 --> 00:08:00.267
or network issues,

00:08:00.267 --> 00:08:02.501
it's very possible
these checks are gonna fail.

00:08:02.501 --> 00:08:04.701
And so you're gonna want
to make sure

00:08:04.701 --> 00:08:06.667
that the failure you get, um,

00:08:06.667 --> 00:08:08.667
it's actually not
just "license failed,"

00:08:08.667 --> 00:08:11.000
but it's "license failed
because the user is unlicensed,"

00:08:11.000 --> 00:08:13.000
not failed because
the network is down.

00:08:13.000 --> 00:08:15.000
'Cause that--
there's nothing worse

00:08:15.000 --> 00:08:17.334
than trying to launch a game
when you're on a plane,

00:08:17.334 --> 00:08:19.334
getting an unlicensed response
and then saying,

00:08:19.334 --> 00:08:21.667
"Sorry, you're gonna be bored
for the next eight hours

00:08:21.667 --> 00:08:23.334
because of this."

00:08:23.334 --> 00:08:25.334
Again, we don't want
to inconvenience

00:08:25.334 --> 00:08:27.501
our legitimate users
as much as possible.

00:08:27.501 --> 00:08:29.667
And then finally,
another thing we can do

00:08:29.667 --> 00:08:31.834
is rather than just
chaining off our code

00:08:31.834 --> 00:08:34.667
and going and invoking
something like a dialog,

00:08:34.667 --> 00:08:36.667
which is very,
very easy to spot,

00:08:36.667 --> 00:08:39.200
invoke another activity
that actually does it for us.

00:08:39.200 --> 00:08:42.100
It makes it a lot harder
to track how that happened.

00:08:44.167 --> 00:08:46.334
Okay, here is the core logic

00:08:46.334 --> 00:08:48.501
in the existing LVL,

00:08:48.501 --> 00:08:51.000
and there are a lot of problems
with this core logic.

00:08:51.000 --> 00:08:53.000
Um, one of them--

00:08:53.000 --> 00:08:55.000
well, I'll--
I'll go through them.

00:08:55.000 --> 00:08:57.334
Uh, first of all, let's go
through some updated code.

00:08:57.334 --> 00:08:59.501
So first of all this looks
a little different.

00:08:59.501 --> 00:09:02.667
Now one is that
we are not using

00:09:02.667 --> 00:09:06.501
simple values like 0 and 1 to
mean licensed or not licensed.

00:09:06.501 --> 00:09:08.501
We're actually taking
those values.

00:09:08.501 --> 00:09:10.834
We're performing some sort of
transform on them so it's harder

00:09:10.834 --> 00:09:13.000
to see in the assembly code
what's going on.

00:09:13.000 --> 00:09:15.000
The second thing we're doing

00:09:15.000 --> 00:09:17.334
is we're actually shoving
a bunch of code in between,

00:09:17.334 --> 00:09:19.334
and the reason why
we're doing this

00:09:19.334 --> 00:09:21.667
is that it makes it
a lot harder to see,

00:09:21.667 --> 00:09:23.667
"All right, well,
there's that...

00:09:23.667 --> 00:09:25.834
Now what are they doing
with that value?"

00:09:25.834 --> 00:09:28.000
You've got to actually follow it
through the code.

00:09:28.000 --> 00:09:30.000
Even better if it's an--

00:09:30.000 --> 00:09:32.167
ultimately a different function,
or it's handled somewhere else,

00:09:32.167 --> 00:09:34.167
as long as it's being
stopped somewhere.

00:09:34.167 --> 00:09:36.334
So that's a really simple thing
you can do.

00:09:36.334 --> 00:09:38.501
Again, the idea--make it harder
for any simple tools

00:09:38.501 --> 00:09:40.501
in order to crack
your application.

00:09:40.501 --> 00:09:42.501
Tamper resistance--this is
actually my favorite part.

00:09:42.501 --> 00:09:44.701
Um, so the first thing
you can do

00:09:44.701 --> 00:09:46.667
and the easiest thing
you can do

00:09:46.667 --> 00:09:49.000
is to check to make sure your
application signature matches--

00:09:49.000 --> 00:09:51.000
now the signature
is actually the thing

00:09:51.000 --> 00:09:53.000
that's on your certificate
that is used

00:09:53.000 --> 00:09:55.334
to sign the application--
so it does remain consistent

00:09:55.334 --> 00:09:57.334
between different builds
of your application,

00:09:57.334 --> 00:09:59.667
and that can be done just by
going to the Package Manager

00:09:59.667 --> 00:10:01.667
and calling "get signatures,"

00:10:01.667 --> 00:10:03.667
returning in this case
the first one.

00:10:03.667 --> 00:10:05.334
Pretty simple.

00:10:05.334 --> 00:10:07.501
In this case I am actually
hashing the signature.

00:10:07.501 --> 00:10:09.667
Kind of nice--
you aren't storing a big string

00:10:09.667 --> 00:10:11.667
that's obvious
in the application.

00:10:11.667 --> 00:10:13.667
We're just storing an integer.

00:10:13.667 --> 00:10:15.667
That's pretty straightforward.

00:10:15.667 --> 00:10:18.033
That way if someone re-signs it
we can immediately tell.

00:10:18.033 --> 00:10:20.334
Um, we also want to make sure
it's not debuggable, you know,

00:10:20.334 --> 00:10:22.667
because if it is we probably
want to do something different.

00:10:22.667 --> 00:10:25.000
It makes it harder for someone
to track using the debugger.

00:10:25.000 --> 00:10:27.000
So that's easy to do, too.

00:10:27.000 --> 00:10:29.000
We can CRC code files
and compare.

00:10:29.000 --> 00:10:31.334
Now this sounds like it's gonna
be really expensive to do--

00:10:31.334 --> 00:10:33.667
I mean, you have to go through
all of your code files--

00:10:33.667 --> 00:10:36.000
but it turns out that
all of your--all of your files

00:10:36.000 --> 00:10:38.000
are actually CRC'ed for you

00:10:38.000 --> 00:10:40.334
because they're all inside of
zip packages inside of the APK.

00:10:40.334 --> 00:10:42.501
So we can just
take advantage of that.

00:10:42.501 --> 00:10:44.501
In this case now we have it.

00:10:44.501 --> 00:10:46.667
We've now in, you know,
four lines of code,

00:10:46.667 --> 00:10:48.667
CRC'ed all of our source files,

00:10:48.667 --> 00:10:50.667
and we've gotten the value
for that,

00:10:50.667 --> 00:10:52.667
and so we can check to see

00:10:52.667 --> 00:10:54.667
if our Dalvik files
have been changed.

00:10:54.667 --> 00:10:57.167
So another thing we can do if we
want to go farther with this--

00:10:57.167 --> 00:10:59.167
and this is kind of nice

00:10:59.167 --> 00:11:01.100
because it uses
a completely different API--

00:11:01.100 --> 00:11:03.501
is we can check to see if
our whole certificate matches.

00:11:03.501 --> 00:11:05.834
So this is just using the fact
that--that actually APK files

00:11:05.834 --> 00:11:08.167
are very similar to JAR files,
and you can use

00:11:08.167 --> 00:11:10.334
these same functions
which are part of our framework

00:11:10.334 --> 00:11:12.501
in order to actually pull
the certificates out.

00:11:12.501 --> 00:11:14.667
So one more thing you can do.

00:11:14.667 --> 00:11:17.834
Now, again,
this is all pretty basic stuff.

00:11:17.834 --> 00:11:19.834
Another thing you might want
to consider

00:11:19.834 --> 00:11:21.834
is actually adding reflection.

00:11:21.834 --> 00:11:25.667
Reflection is definitely
something you can do

00:11:25.667 --> 00:11:27.334
to obfuscate your code.

00:11:27.334 --> 00:11:29.667
It can also make
your code easier to hack,

00:11:29.667 --> 00:11:32.000
so we have to be careful
when we use this.

00:11:32.000 --> 00:11:34.000
So let's look at
our previous example,

00:11:34.000 --> 00:11:37.167
which gets the hash
of the first signature.

00:11:37.167 --> 00:11:39.501
Now we can implement this
using reflection

00:11:39.501 --> 00:11:41.501
in a couple of different ways.

00:11:41.501 --> 00:11:43.667
One of the things
that I'm doing here

00:11:43.667 --> 00:11:45.834
is I'm actually Base64 encoding

00:11:45.834 --> 00:11:48.000
the strings that I'm using
for reflection,

00:11:48.000 --> 00:11:50.000
again, making it harder to track

00:11:50.000 --> 00:11:52.167
what's going on
in the actual source code.

00:11:52.167 --> 00:11:55.334
The other thing that I'm doing
is obviously this is--

00:11:55.334 --> 00:11:57.667
there's gonna be no linkage
inside of the application

00:11:57.667 --> 00:11:59.667
that says we're actually
calling something

00:11:59.667 --> 00:12:01.667
in the Package Manager.

00:12:01.667 --> 00:12:03.834
And this is actually important,
because pretty much

00:12:03.834 --> 00:12:06.167
any of the tools that people
are using to analyze APKs

00:12:06.167 --> 00:12:08.501
are watching for calls
to the Package Manager.

00:12:08.501 --> 00:12:10.667
That's--that's--that's--
they recognize

00:12:10.667 --> 00:12:12.834
that people are using
these things already.

00:12:12.834 --> 00:12:15.167
So this is actually
a really good way

00:12:15.167 --> 00:12:18.167
of making--making those tools
much, much harder to write,

00:12:18.167 --> 00:12:20.167
making it much, much harder

00:12:20.167 --> 00:12:22.501
for your applications
to get compromised.

00:12:22.501 --> 00:12:25.501
Another thing we can do
is actually add native code.

00:12:25.501 --> 00:12:28.000
So if you happen to have
a native module,

00:12:28.000 --> 00:12:30.667
you can write that same thing
that I did--

00:12:30.667 --> 00:12:34.167
that I showed before,
looking something like this.

00:12:34.167 --> 00:12:36.501
Now, okay, admittedly

00:12:36.501 --> 00:12:38.667
this is a lot of code,

00:12:38.667 --> 00:12:41.667
but that's because this is
actually a combination of using

00:12:41.667 --> 00:12:44.000
reflection and JNI,

00:12:44.000 --> 00:12:46.000
and the first section of it

00:12:46.000 --> 00:12:48.000
actually is really
the reflective part.

00:12:48.000 --> 00:12:50.000
And all we're doing is getting

00:12:50.000 --> 00:12:52.167
the IEDs for all our functions
and our objects,

00:12:52.167 --> 00:12:54.501
and you really only do this once
when the application starts.

00:12:54.501 --> 00:12:57.601
And the code that actually does
the checking itself

00:12:57.601 --> 00:13:00.434
looks like that,

00:13:00.434 --> 00:13:02.834
so pretty straightforward.

00:13:02.834 --> 00:13:04.834
Again, it's very similar.

00:13:04.834 --> 00:13:07.000
We're just calling
a couple of methods in here.

00:13:07.000 --> 00:13:09.334
Of course, obfuscating
is important.

00:13:09.334 --> 00:13:11.834
We've actually added support
for ProGuard

00:13:11.834 --> 00:13:14.334
into the latest version
of the tools.

00:13:14.334 --> 00:13:18.334
But we realized that
there was a problem in the LVL

00:13:18.334 --> 00:13:21.834
that made it very difficult
to obfuscate what was going on.

00:13:21.834 --> 00:13:24.501
So anyone who's actually using
an obfuscator

00:13:24.501 --> 00:13:26.501
should make this change.

00:13:26.501 --> 00:13:29.000
So what we were doing
is we were actually

00:13:29.000 --> 00:13:32.000
binding to the service based
upon the class

00:13:32.000 --> 00:13:34.667
that was actually
inside of the LVL,

00:13:34.667 --> 00:13:38.200
which means when the obfuscator
went and changed that class name

00:13:38.200 --> 00:13:40.000
everything didn't work.

00:13:40.000 --> 00:13:42.167
And in fact there's
an elaborate work-around

00:13:42.167 --> 00:13:44.000
in the ProGuard file

00:13:44.000 --> 00:13:46.834
that comes with
the current, uh, SDK.

00:13:46.834 --> 00:13:48.667
But the good news

00:13:48.667 --> 00:13:50.834
is that in fact you can remove
that work-around

00:13:50.834 --> 00:13:52.834
and change this
to something else.

00:13:52.834 --> 00:13:55.000
And again, now we've got
a string there

00:13:55.000 --> 00:13:57.000
that makes it really obvious,

00:13:57.000 --> 00:13:59.000
so we should transform
that string somehow,

00:13:59.000 --> 00:14:00.767
again, use something.

00:14:00.767 --> 00:14:02.834
I-I don't necessarily
suggest Base64--

00:14:02.834 --> 00:14:05.167
That's kind of obvious--
but there are a lot of ways

00:14:05.167 --> 00:14:07.501
we can transform that string
so it's much, much harder

00:14:07.501 --> 00:14:09.501
for when someone's
looking for the code

00:14:09.501 --> 00:14:11.868
to figure out where
we're actually doing the check.

00:14:11.868 --> 00:14:13.834
All right, another thing
we can do

00:14:13.834 --> 00:14:17.000
is actually put the entire check
into C/C++ code,

00:14:17.000 --> 00:14:19.167
again, taking advantage
of the fact

00:14:19.167 --> 00:14:22.501
that our application
is actually a zip file.

00:14:22.501 --> 00:14:25.834
So what we've done here
is--okay, sorry.

00:14:25.834 --> 00:14:28.501
This is a little different.
Um... [laughs]

00:14:28.501 --> 00:14:30.834
This is--this is actually
CRC'ing classes.

00:14:30.834 --> 00:14:33.000
This is the same example
we had before.

00:14:33.000 --> 00:14:35.167
CRC'ing classes
taking advantage of the fact

00:14:35.167 --> 00:14:37.334
that it's a zip file,
once again using JNI.

00:14:37.334 --> 00:14:39.334
But what's kind of cool

00:14:39.334 --> 00:14:41.667
is we can actually go
a little farther than this,

00:14:41.667 --> 00:14:43.667
and we can actually go and use

00:14:43.667 --> 00:14:45.834
some publicly available
libraries that are out there,

00:14:45.834 --> 00:14:47.667
and this on--in this case

00:14:47.667 --> 00:14:50.000
we're using MiniZip
to do the exact same thing.

00:14:50.000 --> 00:14:51.834
And this line of code,

00:14:51.834 --> 00:14:54.167
when placed within the right
part of the MiniZip library,

00:14:54.167 --> 00:14:56.501
will actually,
entirely in need of code,

00:14:56.501 --> 00:14:58.834
allow you to check the CRC
of your main classes file.

00:14:58.834 --> 00:15:00.934
And this--this is great
because it means

00:15:00.934 --> 00:15:03.334
that they're not gonna have
anything in Dalvik to look for

00:15:03.334 --> 00:15:05.334
when they're trying
to figure out

00:15:05.334 --> 00:15:07.334
how to hack your application.

00:15:07.334 --> 00:15:09.501
They're actually have to go
modify the native library.

00:15:09.501 --> 00:15:11.834
It's, again, one more step that
they're gonna have to take.

00:15:11.834 --> 00:15:13.834
It makes it
just that much harder

00:15:13.834 --> 00:15:16.000
for them to work around
all of this.

00:15:16.000 --> 00:15:18.200
Finally, if you are going
to call native code

00:15:18.200 --> 00:15:20.000
within your application,

00:15:20.000 --> 00:15:22.167
consider registering your native
signatures from your class file

00:15:22.167 --> 00:15:24.000
with "javap-s,"

00:15:24.000 --> 00:15:26.167
um, using this register native
method function.

00:15:26.167 --> 00:15:28.167
And we're gonna talk about this

00:15:28.167 --> 00:15:30.334
a little bit in the next session
we're doing,

00:15:30.334 --> 00:15:32.501
which is on "C and C++
Bringing Games to Android,"

00:15:32.501 --> 00:15:34.667
but I just want--I thought
I'd mention this here

00:15:34.667 --> 00:15:36.667
because it's very, very useful.

00:15:36.667 --> 00:15:38.667
Because by registering
your methods manually

00:15:38.667 --> 00:15:40.667
rather than dynamically,
it makes the name--

00:15:40.667 --> 00:15:43.334
it means you can control
what the names are going to be,

00:15:43.334 --> 00:15:46.667
and ultimately that makes it
just that much harder to track,

00:15:46.667 --> 00:15:49.000
'cause the standard names
that are giving by JNI

00:15:49.000 --> 00:15:51.033
are very, very easy to see.

00:15:51.033 --> 00:15:53.000
Anyone can look at your library

00:15:53.000 --> 00:15:55.000
and see where
those entry points are.

00:15:55.000 --> 00:15:57.167
This just hides them
a little bit more.

00:15:57.167 --> 00:15:59.501
And, of course,
we can go further.

00:15:59.501 --> 00:16:01.934
Um, I'm not gonna get
into these kinds of things.

00:16:01.934 --> 00:16:04.167
We can actually store things
as encrypted resources.

00:16:04.167 --> 00:16:06.167
We can use the class loader.

00:16:06.167 --> 00:16:08.501
There's all sorts of crazy stuff
you can do in Dalvik,

00:16:08.501 --> 00:16:10.667
and I definitely recommend
looking at it.

00:16:10.667 --> 00:16:12.501
This is kind of fun.

00:16:12.501 --> 00:16:14.501
Um, you know,
eventually we do have

00:16:14.501 --> 00:16:16.501
kind of
diminishing returns here.

00:16:16.501 --> 00:16:18.834
Um, most of the things
that I talked about here

00:16:18.834 --> 00:16:21.501
can be implemented in literally
just a few hours of work,

00:16:21.501 --> 00:16:24.000
and if after you've spent months
working on your title,

00:16:24.000 --> 00:16:26.667
it makes a lot of sense to take
those few hours of work

00:16:26.667 --> 00:16:29.334
because it does actually,
believe it or not, help.

00:16:29.334 --> 00:16:32.501
And we've seen this with several
applications on Market

00:16:32.501 --> 00:16:35.000
that have taken
these kinds of techniques,

00:16:35.000 --> 00:16:37.667
and they have improved
their ability

00:16:37.667 --> 00:16:40.000
to protect against piracy.

00:16:40.000 --> 00:16:43.434
But there's something even worse
than pirates...

00:16:45.667 --> 00:16:48.667
and that is, well, vampires.

00:16:48.667 --> 00:16:52.334
And here's what I mean
when I say "vampires."

00:16:52.334 --> 00:16:55.000
Games and other titles

00:16:55.000 --> 00:16:57.667
often have server components,

00:16:57.667 --> 00:17:00.267
and sometimes Android games
have asset downloads,

00:17:00.267 --> 00:17:02.334
'cause they're really big.

00:17:02.334 --> 00:17:05.000
But if someone runs
your title unauthorized,

00:17:05.000 --> 00:17:08.667
they are sucking your bandwidth,

00:17:08.667 --> 00:17:11.834
and that costs you money.

00:17:11.834 --> 00:17:13.834
So what we can do

00:17:13.834 --> 00:17:16.501
is we can actually stop vampires

00:17:16.501 --> 00:17:19.000
by making sure our servers
actually understand

00:17:19.000 --> 00:17:21.267
how this whole system works...

00:17:25.834 --> 00:17:28.834
and the way we can do this
is fairly straightforward.

00:17:28.834 --> 00:17:31.000
So remember I showed you
that slide earlier

00:17:31.000 --> 00:17:34.000
talking about how we did
client side validation.

00:17:34.000 --> 00:17:37.000
Well, the server side validation
is pretty much the same thing.

00:17:37.000 --> 00:17:40.167
Public key is in
the market licensing--

00:17:40.167 --> 00:17:42.501
sorry, private key is in
the market licensing server,

00:17:42.501 --> 00:17:44.667
and the public key
is actually in our server.

00:17:44.667 --> 00:17:46.667
It's no longer even
in our application.

00:17:46.667 --> 00:17:49.167
And now what happens is
we check the license request,

00:17:49.167 --> 00:17:51.501
send it off to the server,
and it comes back.

00:17:51.501 --> 00:17:53.334
And our application,

00:17:53.334 --> 00:17:55.501
instead of doing anything
with that signed response,

00:17:55.501 --> 00:17:57.501
actually sends it
up to the server.

00:17:57.501 --> 00:17:59.667
And at this point the server
is actually responsible

00:17:59.667 --> 00:18:01.667
for doing any validation,

00:18:01.667 --> 00:18:03.667
and it actually sends,
in this case,

00:18:03.667 --> 00:18:05.701
a session token
back to the application,

00:18:05.701 --> 00:18:08.667
which can then be used
to download whatever you like.

00:18:08.667 --> 00:18:10.834
Sounds pretty cool.

00:18:10.834 --> 00:18:13.000
Once again,
now it doesn't even matter

00:18:13.000 --> 00:18:15.501
if the application itself
is compromised.

00:18:15.501 --> 00:18:18.000
Ultimately what we're really
doing is proxy-ing

00:18:18.000 --> 00:18:20.167
a transaction
between two servers,

00:18:20.167 --> 00:18:23.334
your server and our server.

00:18:23.334 --> 00:18:26.334
Now there is one potential
problem with this

00:18:26.334 --> 00:18:29.334
and that is, of course,
replay attacks.

00:18:29.334 --> 00:18:31.334
We want to avoid replay attacks.

00:18:31.334 --> 00:18:33.334
We want to make sure
that someone

00:18:33.334 --> 00:18:35.334
can't just capture
one of these sessions

00:18:35.334 --> 00:18:37.334
and use it to download the files

00:18:37.334 --> 00:18:39.334
and embed it back
into the application.

00:18:39.334 --> 00:18:41.667
So the good news is that we have
something called the nonce

00:18:41.667 --> 00:18:43.667
in a license validation
transaction.

00:18:43.667 --> 00:18:45.667
And you've got
a couple of options

00:18:45.667 --> 00:18:47.834
for how you might want
to use that.

00:18:47.834 --> 00:18:50.000
Um, you can generate it
on your server,

00:18:50.000 --> 00:18:52.167
and you can store
all the nonce values,

00:18:52.167 --> 00:18:54.167
and that allows you to guarantee

00:18:54.167 --> 00:18:56.334
that each one of these
license validation checks

00:18:56.334 --> 00:18:58.167
is only used once,

00:18:58.167 --> 00:19:00.434
and you're always going to have
to use a fresh one

00:19:00.434 --> 00:19:02.667
in order to validate
the license on an application.

00:19:02.667 --> 00:19:05.000
The other thing you can do
is generate it on the client

00:19:05.000 --> 00:19:07.000
and have the server
store it afterwards.

00:19:07.000 --> 00:19:09.334
A little bit more--a little bit
harder to deal with

00:19:09.334 --> 00:19:11.334
in terms of security,

00:19:11.334 --> 00:19:13.501
uh, because you, in theory,
could have collisions,

00:19:13.501 --> 00:19:15.501
but it's highly unlikely.

00:19:15.501 --> 00:19:18.000
So another thing,
as I alluded to earlier,

00:19:18.000 --> 00:19:21.000
is we can change
the monetization model--

00:19:21.000 --> 00:19:23.334
and, you know, a lot of this
is about games,

00:19:23.334 --> 00:19:25.834
but this applies
to all applications as well--

00:19:25.834 --> 00:19:28.667
so, of course, considering free
versions that are upgradeable,

00:19:28.667 --> 00:19:30.334
using game mechanics,

00:19:30.334 --> 00:19:32.334
you know, gamify
actually the game play

00:19:32.334 --> 00:19:35.667
so that we can actually
drive people into content,

00:19:35.667 --> 00:19:37.834
and of course, providing things
that extend the game

00:19:37.834 --> 00:19:39.834
and make a premium experience.

00:19:39.834 --> 00:19:41.834
So let's talk a little bit

00:19:41.834 --> 00:19:43.834
about Android Market
In-app Billing.

00:19:43.834 --> 00:19:45.868
Now this is a great feature.

00:19:45.868 --> 00:19:48.167
We announced it and released it
just a few months ago,

00:19:48.167 --> 00:19:50.334
and we've seen great uptake
with it already.

00:19:50.334 --> 00:19:53.501
It allows you to purchase
virtual goods and consumables.

00:19:53.501 --> 00:19:55.667
And again, we allow--we can do

00:19:55.667 --> 00:19:57.834
both client-side
and server-side validation.

00:19:57.834 --> 00:20:01.000
So our managed items are things
like your application.

00:20:01.000 --> 00:20:03.667
They're things that can
only be purchased once.

00:20:03.667 --> 00:20:06.000
But the good news
is that your application

00:20:06.000 --> 00:20:09.000
can actually ask the server
to replay these items,

00:20:09.000 --> 00:20:11.834
and they're really designed
for applications

00:20:11.834 --> 00:20:14.667
that don't necessarily
have a server component.

00:20:14.667 --> 00:20:17.667
And in fact,
you can even set it up

00:20:17.667 --> 00:20:19.834
so that if someone buys an item

00:20:19.834 --> 00:20:22.000
on one instance
of an application

00:20:22.000 --> 00:20:24.167
you make it show up
on another instance

00:20:24.167 --> 00:20:26.501
of the application
on another device automatically,

00:20:26.501 --> 00:20:28.501
but you don't have to do that.

00:20:28.501 --> 00:20:32.501
Unmanaged items are SKUs in
Market like your application,

00:20:32.501 --> 00:20:34.501
but they can be purchased
multiple times,

00:20:34.501 --> 00:20:36.667
and your application
cannot ask for a replay,

00:20:36.667 --> 00:20:38.834
so these are harder to secure.

00:20:38.834 --> 00:20:41.501
It--it--it--having
your own server

00:20:41.501 --> 00:20:43.667
is really, really useful
in all of these cases

00:20:43.667 --> 00:20:45.834
but especially in the case
of unmanaged items.

00:20:45.834 --> 00:20:48.501
So how does this look?

00:20:48.501 --> 00:20:50.501
Well, at a high level,

00:20:50.501 --> 00:20:52.701
it actually looks
almost exactly the same

00:20:52.701 --> 00:20:55.667
as what we did with
the license validation library.

00:20:55.667 --> 00:20:59.501
We have the private key
sitting in the Market server,

00:20:59.501 --> 00:21:01.501
and the public key
in our application.

00:21:01.501 --> 00:21:04.834
And we send a request off.

00:21:04.834 --> 00:21:07.000
It signs it with that key.

00:21:07.000 --> 00:21:10.334
It comes back, bam,
into our billing receiver.

00:21:10.334 --> 00:21:13.834
The server version
is almost identical.

00:21:13.834 --> 00:21:18.267
Once again, at a high level
this is what it looks like...

00:21:20.334 --> 00:21:22.501
pretty straightforward.

00:21:22.501 --> 00:21:24.501
Now one thing I'm doing here,

00:21:24.501 --> 00:21:26.501
and I thought
I'd point this out,

00:21:26.501 --> 00:21:28.501
is I'm adding credentials,

00:21:28.501 --> 00:21:30.834
and this might be useful
if what we're trying to do

00:21:30.834 --> 00:21:33.167
is actually support
account information

00:21:33.167 --> 00:21:35.167
across multiple devices.

00:21:35.167 --> 00:21:37.167
Ultimately what's going
to happen

00:21:37.167 --> 00:21:39.167
is that this--this transaction

00:21:39.167 --> 00:21:41.334
is going to end up getting an ID

00:21:41.334 --> 00:21:43.667
that's generated by the server.

00:21:43.667 --> 00:21:47.834
But in order to avoid any
possibility of replay attacks,

00:21:47.834 --> 00:21:51.667
adding a credential
is actually useful.

00:21:51.667 --> 00:21:54.334
And once again, now that
we have our server-side version,

00:21:54.334 --> 00:21:56.334
we can do the same thing.

00:21:56.334 --> 00:21:58.367
We can deliver new content

00:21:58.367 --> 00:22:00.434
as the result of
an In-app Billing transaction.

00:22:00.434 --> 00:22:02.667
But let's go
a little bit deeper here

00:22:02.667 --> 00:22:05.000
because In-app Billing is
slightly more complicated to use

00:22:05.000 --> 00:22:07.667
than license validation
for obvious reasons.

00:22:07.667 --> 00:22:10.334
So here is
our application activity,

00:22:10.334 --> 00:22:12.334
and here is Android Market.

00:22:12.334 --> 00:22:14.334
And the way this works

00:22:14.334 --> 00:22:16.501
is we start off
by requesting a purchase.

00:22:16.501 --> 00:22:18.501
Now before you do this,

00:22:18.501 --> 00:22:20.667
you should make sure
that you actually are

00:22:20.667 --> 00:22:22.834
on a version of Android Market
that supports In-app Billing,

00:22:22.834 --> 00:22:24.834
and there's a call to do that.

00:22:24.834 --> 00:22:26.834
I'm not gonna go through that.

00:22:26.834 --> 00:22:29.167
Then it ends up bundling
a response code

00:22:29.167 --> 00:22:31.501
that includes a purchase intent,

00:22:31.501 --> 00:22:34.501
and we are then
going to execute.

00:22:34.501 --> 00:22:37.667
We're gonna invoke that
with a StartIntentSender

00:22:37.667 --> 00:22:40.834
if we're on Android 2.0
or above,

00:22:40.834 --> 00:22:44.334
and that causes the checkout UI
to get displayed

00:22:44.334 --> 00:22:46.334
on top of our application,

00:22:46.334 --> 00:22:48.834
and it actually comes up
as non-full screen activity,

00:22:48.834 --> 00:22:50.834
which means that our application

00:22:50.834 --> 00:22:53.334
then goes into onPause() state.

00:22:53.334 --> 00:22:56.000
Now for those of you
who are writing games,

00:22:56.000 --> 00:22:59.167
if you, at this point, go
and dump all of your textures,

00:22:59.167 --> 00:23:02.334
you're going to--or you're using
the standard GLSurfaceView

00:23:02.334 --> 00:23:04.667
that dumps all of your textures,
you're gonna find out

00:23:04.667 --> 00:23:06.834
that it's gonna take
a couple seconds potentially

00:23:06.834 --> 00:23:09.000
for this to come back
when you reload everything.

00:23:09.000 --> 00:23:11.334
So you might want to take
a look at this case

00:23:11.334 --> 00:23:13.167
and optimize around it,

00:23:13.167 --> 00:23:15.667
so in fact we don't necessarily
dump until onStop().

00:23:15.667 --> 00:23:19.667
Then the user's gonna actually
say they buy something,

00:23:19.667 --> 00:23:21.667
and we get
an activity onResume()

00:23:21.667 --> 00:23:23.834
followed by
a broadcast result code

00:23:23.834 --> 00:23:25.834
saying what happened.

00:23:25.834 --> 00:23:29.667
So then we--then we, of course,
say, "Well, what did they buy?"

00:23:29.667 --> 00:23:32.000
We get the information,

00:23:32.000 --> 00:23:34.501
and it comes back
in a broadcast.

00:23:34.501 --> 00:23:36.501
Now the key thing
about these operations

00:23:36.501 --> 00:23:38.501
is that the first section here,

00:23:38.501 --> 00:23:40.501
the request purchase
and that bundle,

00:23:40.501 --> 00:23:42.167
are synchronous.

00:23:42.167 --> 00:23:44.834
After that, these are entirely
asynchronous operations.

00:23:44.834 --> 00:23:47.167
So it means that you have
to think about it

00:23:47.167 --> 00:23:49.167
when you're writing
your application.

00:23:49.167 --> 00:23:50.834
You have to make sure

00:23:50.834 --> 00:23:52.834
that there's something
that the user knows,

00:23:52.834 --> 00:23:55.000
that there's something still
going on in the background.

00:23:55.000 --> 00:23:56.667
It may take a while.

00:23:56.667 --> 00:23:59.167
We have fraud prevention and all
sorts of stuff on the back end

00:23:59.167 --> 00:24:01.334
that we try to do to make sure

00:24:01.334 --> 00:24:03.501
that the system
is working to its best,

00:24:03.501 --> 00:24:05.501
but that can take some time.

00:24:05.501 --> 00:24:07.667
So there is a delay
that will happen here.

00:24:07.667 --> 00:24:09.667
Finally, at the end of this,

00:24:09.667 --> 00:24:11.667
we get
a "purchase state changed"

00:24:11.667 --> 00:24:13.667
that lets us know that

00:24:13.667 --> 00:24:15.834
the purchase actually went
through or didn't go through.

00:24:15.834 --> 00:24:18.834
And then we say to the server,
"Yes, I got that message,"

00:24:18.834 --> 00:24:20.667
which is important,

00:24:20.667 --> 00:24:22.834
because if we don't actually
confirm the notification

00:24:22.834 --> 00:24:25.334
the server's gonna try to keep
delivering that notification

00:24:25.334 --> 00:24:27.834
to us again and again and again
until we confirm it,

00:24:27.834 --> 00:24:30.167
which is very, very useful,
because your application

00:24:30.167 --> 00:24:32.334
could get killed
in the middle of this,

00:24:32.334 --> 00:24:34.667
and you want to make sure
that when your application

00:24:34.667 --> 00:24:36.834
is up and running,
it actually gets a notification,

00:24:36.834 --> 00:24:39.000
confirms it, so you actually
purchase the item,

00:24:39.000 --> 00:24:41.167
give the user what they--
what they bought.

00:24:41.167 --> 00:24:43.167
And then finally
it lets you know

00:24:43.167 --> 00:24:45.200
that it received
your confirmation.

00:24:45.200 --> 00:24:48.167
So that's how you do it
without a server component.

00:24:48.167 --> 00:24:50.334
In order to add
a server component to this

00:24:50.334 --> 00:24:52.167
it's pretty straightforward.

00:24:52.167 --> 00:24:54.334
We're gonna use the technique
in which the server

00:24:54.334 --> 00:24:56.334
actually generates the nonce.

00:24:56.334 --> 00:24:58.834
So we're gonna start off with
sending a request to our server

00:24:58.834 --> 00:25:01.267
to get that nonce
and getting that nonce back.

00:25:01.267 --> 00:25:05.167
And then when we actually go
to confirm the notification,

00:25:05.167 --> 00:25:07.167
what we're actually going to do

00:25:07.167 --> 00:25:10.667
is perform the server
billing side authentication

00:25:10.667 --> 00:25:12.501
on our server,

00:25:12.501 --> 00:25:14.501
send it--send it the credentials

00:25:14.501 --> 00:25:16.501
that it's gotten back
from Market,

00:25:16.501 --> 00:25:18.501
and then finally return
the validated

00:25:18.501 --> 00:25:20.501
that we've routed
to the billing response.

00:25:20.501 --> 00:25:22.501
Now in our particular example,

00:25:22.501 --> 00:25:24.834
all that we've done
is actually taken a session ID

00:25:24.834 --> 00:25:26.834
that we generated earlier
and validated it

00:25:26.834 --> 00:25:29.167
and--and Trevor's gonna be
demonstrating that

00:25:29.167 --> 00:25:31.334
in just a moment.

00:25:31.334 --> 00:25:33.934
So, Trevor, if you could
come up, actually. [laughs]

00:25:39.501 --> 00:25:42.667
Johns: Okay, so if we can switch
over to our project here...

00:25:42.667 --> 00:25:44.667
Galpin: Yes.

00:25:44.667 --> 00:25:46.901
Johns: Which I think
is number three.

00:25:46.901 --> 00:25:49.000
Galpin: Sounds good.

00:25:49.000 --> 00:25:51.000
Johns: Ah, there we go.

00:25:51.000 --> 00:25:53.834
All right, so this is
a small little demo app

00:25:53.834 --> 00:25:56.000
that me and Dan have been
working on,

00:25:56.000 --> 00:25:58.000
um, to go and demonstrate
all this.

00:25:58.000 --> 00:26:00.267
We'll be releasing the code, um,
sometime after the--

00:26:00.267 --> 00:26:02.667
after Google I/O is--
after Google I/O is over

00:26:02.667 --> 00:26:05.000
for all of you to download
and take a look at.

00:26:05.000 --> 00:26:07.000
But basically
it just goes through

00:26:07.000 --> 00:26:09.000
exactly what
we just talked about.

00:26:09.000 --> 00:26:12.000
So I have my, uh, nice
little downloader app here.

00:26:12.000 --> 00:26:15.334
You can tell that the UI's
very, very awesome, right?

00:26:15.334 --> 00:26:17.334
[laughs]

00:26:17.334 --> 00:26:19.834
Um, and we implemented both
techniques you can use here,

00:26:19.834 --> 00:26:23.167
either, um, checking
a license server certificate

00:26:23.167 --> 00:26:25.200
or through In-App Billing.

00:26:25.200 --> 00:26:27.334
So we're gonna show you
In-App Billing here.

00:26:27.334 --> 00:26:29.334
And so when I push that,

00:26:29.334 --> 00:26:31.501
two things are happening
behind the scenes here,

00:26:31.501 --> 00:26:33.167
assuming Wi-Fi works.

00:26:33.167 --> 00:26:35.501
First off we're going to go
and get that nonce,

00:26:35.501 --> 00:26:37.834
and then we go,
and as soon as we get that,

00:26:37.834 --> 00:26:39.834
we make our In-App Billing
request.

00:26:39.834 --> 00:26:41.834
So let's go ahead and buy this

00:26:41.834 --> 00:26:43.834
with my nice
fake credit card here.

00:26:43.834 --> 00:26:45.501
All right.

00:26:45.501 --> 00:26:47.334
That comes back.

00:26:47.334 --> 00:26:49.667
Um, you see a slight delay
there while we wait for Market

00:26:49.667 --> 00:26:51.667
to go and confirm everything
for us,

00:26:51.667 --> 00:26:53.834
and then we get
a "Download Content" button.

00:26:53.834 --> 00:26:56.000
And so when we push
"Download Content" here,

00:26:56.000 --> 00:26:58.000
two more things
are gonna happen.

00:26:58.000 --> 00:27:00.267
First, we're gonna go
and take all of this time data

00:27:00.267 --> 00:27:02.667
that Market sent us
and send it back to the server.

00:27:02.667 --> 00:27:05.000
The server's gonna go
and upgrade our session token,

00:27:05.000 --> 00:27:07.000
and then we're gonna go

00:27:07.000 --> 00:27:09.100
and start downloading
our files...

00:27:11.501 --> 00:27:13.501
if Wi-Fi works. [laughs]

00:27:13.501 --> 00:27:16.167
So, um, ah, and there you go.

00:27:16.167 --> 00:27:19.334
So I could go into the Market--
uh, Publisher Console

00:27:19.334 --> 00:27:22.667
and go--instead of--instead of
a-a license response--

00:27:22.667 --> 00:27:24.334
or a purchase response,

00:27:24.334 --> 00:27:26.667
we can go and set it to, um,
send us--Excuse me.

00:27:26.667 --> 00:27:28.667
Since this is In-App Billing

00:27:28.667 --> 00:27:31.000
I can go and change the test SKU
and say that we're--

00:27:31.000 --> 00:27:33.033
that the purchase
didn't go through,

00:27:33.033 --> 00:27:35.167
but I'm not gonna do that,
'cause, quite frankly,

00:27:35.167 --> 00:27:36.834
it's not that interesting.

00:27:36.834 --> 00:27:38.501
Nothing happens.
Everything stops.

00:27:38.501 --> 00:27:40.501
Which is exactly what you want,
right.

00:27:40.501 --> 00:27:42.501
And so when this
finishes downloading,

00:27:42.501 --> 00:27:44.667
which, um, probably will take
another minute here,

00:27:44.667 --> 00:27:47.167
so I'm not gonna bore you all,
we get a nice little video file.

00:27:47.167 --> 00:27:49.501
You can click "play,"
and you'll get a nice app

00:27:49.501 --> 00:27:51.667
of all the Android app--all
the Android--er, activations.

00:27:51.667 --> 00:27:53.834
So, um...
Galpin: So this is an example--

00:27:53.834 --> 00:27:55.834
yeah, I should
probably continue on.

00:27:55.834 --> 00:27:58.000
Um, so this--we're not gonna
switch to the slides.

00:27:58.000 --> 00:28:00.000
I do want to actually show that.

00:28:00.000 --> 00:28:02.067
But what's kind of cool
about this

00:28:02.067 --> 00:28:04.167
is this is actually
a sample that we wrote

00:28:04.167 --> 00:28:06.534
that takes the original source
code that was given in both

00:28:06.534 --> 00:28:08.667
the license validation library
and the In-App Billing library

00:28:08.667 --> 00:28:10.834
and actually ports it
to standard Java SE,

00:28:10.834 --> 00:28:12.834
and it's running on--
under App Engine.

00:28:12.834 --> 00:28:14.834
Johns: Correct.
Galpin: And, uh,

00:28:14.834 --> 00:28:16.834
and we're actually playing...
Johns: Yay.

00:28:16.834 --> 00:28:18.834
Galpin: One of
my favorite videos.

00:28:18.834 --> 00:28:21.000
Um, actually all the time.
Johns: So like Dan said,

00:28:21.000 --> 00:28:23.334
the important thing to note here
is this is the same source code

00:28:23.334 --> 00:28:25.501
you have as part
of the Android SDK.

00:28:25.501 --> 00:28:27.501
And since it's Java code,

00:28:27.501 --> 00:28:29.501
and App Engine
also supports Java,

00:28:29.501 --> 00:28:31.834
we can pretty easily
just go and copy that over,

00:28:31.834 --> 00:28:34.000
and it actually doesn't take
too much work to get it working.

00:28:34.000 --> 00:28:35.834
Galpin: That's right.

00:28:35.834 --> 00:28:37.834
Even Trevor and I can do it,

00:28:37.834 --> 00:28:40.033
which means all of you
can do it.

00:28:40.033 --> 00:28:43.000
Johns: Yep. Right.
Let's go back to the slides.

00:28:43.000 --> 00:28:45.501
Maybe. There we go.
Galpin: All right. There we are.

00:28:45.501 --> 00:28:47.667
Okay, so let's talk
just a little bit

00:28:47.667 --> 00:28:49.667
about App Engine,

00:28:49.667 --> 00:28:51.834
and App Engine has been
really good to us,

00:28:51.834 --> 00:28:54.267
because we needed a place where
we could host that Java code

00:28:54.267 --> 00:28:56.501
and do that validation
and also, in this case,

00:28:56.501 --> 00:28:58.667
host the buying that
we're actually downloading.

00:28:58.667 --> 00:29:01.000
So, of course, it allows you
to run your Java code

00:29:01.000 --> 00:29:02.667
on our infrastructure.

00:29:02.667 --> 00:29:05.000
In this case we're using it
to validate license responses,

00:29:05.000 --> 00:29:06.667
secure transactions,

00:29:06.667 --> 00:29:08.667
and serve files directly
from the Blobstore.

00:29:08.667 --> 00:29:10.834
And--and what we're actually
doing is there's actually

00:29:10.834 --> 00:29:12.868
three different programs
in action here.

00:29:12.868 --> 00:29:14.834
There's actually
an App Engine application,

00:29:14.834 --> 00:29:16.834
which is handling
almost everything.

00:29:16.834 --> 00:29:19.167
There's actually a small
python script that we wrote

00:29:19.167 --> 00:29:22.334
that actually does bulk
uploading into App Engine

00:29:22.334 --> 00:29:24.334
and stores things
in the Blobstore.

00:29:24.334 --> 00:29:26.501
And then, of course, there's
the Android side module,

00:29:26.501 --> 00:29:28.167
which we just demonstrated.

00:29:28.167 --> 00:29:30.334
And again, this is useful
as an example.

00:29:30.334 --> 00:29:32.501
But remember, this is
just standard code.

00:29:32.501 --> 00:29:35.167
It can be run on
any Java-capable server.

00:29:35.167 --> 00:29:39.000
So how do we create
an App Engine project?

00:29:39.000 --> 00:29:41.167
So I'm gonna go through this
very, very quickly,

00:29:41.167 --> 00:29:43.167
but it is very, very easy

00:29:43.167 --> 00:29:45.167
specially if you like
using Eclipse,

00:29:45.167 --> 00:29:47.167
or if you just have Eclipse.

00:29:47.167 --> 00:29:49.167
You can just install
the plug-in.

00:29:49.167 --> 00:29:51.334
You can then literally
go through this wizard,

00:29:51.334 --> 00:29:54.167
which will create
the App Engine project for you,

00:29:54.167 --> 00:29:57.167
and it creates a little servlet
that you can fill in.

00:29:57.167 --> 00:29:59.834
And then you can literally
launch that servlet

00:29:59.834 --> 00:30:02.501
by going and clicking
"Deploy to App Engine."

00:30:02.501 --> 00:30:04.667
It really is pretty much
that simple.

00:30:04.667 --> 00:30:07.167
And we give you a bunch of tools
to manage it as well.

00:30:07.167 --> 00:30:09.167
You can look at bandwidth.

00:30:09.167 --> 00:30:11.167
You can see
who's connecting to it.

00:30:11.167 --> 00:30:13.501
It's kind of cool. You can
also get log-in information.

00:30:13.501 --> 00:30:16.000
But let's look at what the code
actually was like on App Engine.

00:30:16.000 --> 00:30:18.000
So now admittedly this is not--

00:30:18.000 --> 00:30:20.167
I'm not gonna show
the entire ported code,

00:30:20.167 --> 00:30:22.167
'cause it would take
a long time.

00:30:22.167 --> 00:30:24.167
It would bore you even more.

00:30:24.167 --> 00:30:26.501
So what I am gonna do
is show you the module

00:30:26.501 --> 00:30:28.501
that actually handles
the request for data

00:30:28.501 --> 00:30:30.501
and does the validation.

00:30:30.501 --> 00:30:32.501
So all this--all this
is doing here

00:30:32.501 --> 00:30:34.501
is actually gonna
generate a session.

00:30:34.501 --> 00:30:36.834
And what we're doing here
is we're actually getting

00:30:36.834 --> 00:30:39.834
the signature from the device,

00:30:39.834 --> 00:30:41.501
and we're passing it

00:30:41.501 --> 00:30:43.501
through that same
licensed validator class

00:30:43.501 --> 00:30:45.501
that is part of the LVL.

00:30:45.501 --> 00:30:47.834
We're calling verified just
like we would do on the device,

00:30:47.834 --> 00:30:49.834
and then we're returning
that value

00:30:49.834 --> 00:30:52.200
as part of a new session token
which is now validated.

00:30:52.200 --> 00:30:55.167
Now again, you know,
this is just an example

00:30:55.167 --> 00:30:57.334
of how one can build
this kind of server,

00:30:57.334 --> 00:30:59.334
but it's pretty straightforward.

00:30:59.334 --> 00:31:01.334
There's a very small amount
of code

00:31:01.334 --> 00:31:03.334
that needs to be
actually written.

00:31:03.334 --> 00:31:05.334
So while I have you all here,

00:31:05.334 --> 00:31:07.667
let me talk a little bit
about Cloud services in general.

00:31:07.667 --> 00:31:10.000
So your application
actually can take advantage

00:31:10.000 --> 00:31:12.167
of Cloud to Device Messaging,
which is, of course,

00:31:12.167 --> 00:31:14.167
basically what we're using
for the background

00:31:14.167 --> 00:31:16.334
for Google Talk and for GMAIL
to send messages.

00:31:16.334 --> 00:31:18.334
Also, the backup service.

00:31:18.334 --> 00:31:20.834
And then, of course, in that--
in that other pile

00:31:20.834 --> 00:31:22.834
we have Android Market,
licensing and billing,

00:31:22.834 --> 00:31:24.834
which I've talked about here.

00:31:24.834 --> 00:31:26.868
So Cloud to Device Messaging--

00:31:26.868 --> 00:31:29.000
we announced it last year
at Google I/O.

00:31:29.000 --> 00:31:30.667
It's pretty cool.

00:31:30.667 --> 00:31:32.834
It launches your app
if it's not running.

00:31:32.834 --> 00:31:34.834
It leverages
our network connection,

00:31:34.834 --> 00:31:36.834
and it queues
and delivers messages.

00:31:36.834 --> 00:31:38.834
And it's pretty straightforward
to set up,

00:31:38.834 --> 00:31:41.000
and I'll go through
a real basic flow here.

00:31:41.000 --> 00:31:43.167
And the reason why
I'm bringing these things in

00:31:43.167 --> 00:31:45.000
as part of this application

00:31:45.000 --> 00:31:47.334
is these are all part of bunch
of Cloud services

00:31:47.334 --> 00:31:49.501
you can take advantage of
in your application.

00:31:49.501 --> 00:31:51.834
And I think it's important,
especially now that we're seeing

00:31:51.834 --> 00:31:53.834
such an enormous number--
percentage of devices

00:31:53.834 --> 00:31:55.501
that are running Froyo,

00:31:55.501 --> 00:31:57.834
that people, for example, start
to take advantage of C2DM.

00:31:57.834 --> 00:32:00.133
We're at over 65% of devices now
that are running Froyo.

00:32:00.133 --> 00:32:03.000
So basically we start
with the registration flow.

00:32:03.000 --> 00:32:04.834
It's pretty simple.

00:32:04.834 --> 00:32:07.501
Your application needs to
register itself with the server,

00:32:07.501 --> 00:32:10.167
and your application
has to forward that idea across.

00:32:10.167 --> 00:32:12.834
Then on the back end side

00:32:12.834 --> 00:32:14.834
your server actually
has to create

00:32:14.834 --> 00:32:17.000
and store a session
with Cloud to Device Messaging

00:32:17.000 --> 00:32:20.000
and finally return the response.

00:32:20.000 --> 00:32:23.501
After that point, you can send
messages to the service,

00:32:23.501 --> 00:32:25.667
and it's going to send intents
to your application,

00:32:25.667 --> 00:32:28.000
Pretty straightforward.

00:32:28.000 --> 00:32:30.334
Application data backup
is kind of interesting as well.

00:32:30.334 --> 00:32:32.367
Um, one of the things that--

00:32:32.367 --> 00:32:34.334
that I found
is really frustrating

00:32:34.334 --> 00:32:36.667
is that I move around
between Android devices a lot.

00:32:36.667 --> 00:32:38.834
I don't know how many
of you do that,

00:32:38.834 --> 00:32:41.334
but I find I do it
more than most probably.

00:32:41.334 --> 00:32:43.834
And it's really frustrating
if I'm playing a title

00:32:43.834 --> 00:32:46.501
or playing a game,
or if I even have settings,

00:32:46.501 --> 00:32:48.501
and they don't end up

00:32:48.501 --> 00:32:50.501
getting transferred
automatically between devices.

00:32:50.501 --> 00:32:52.501
And of course, we provide
that capability

00:32:52.501 --> 00:32:54.334
with application data backup,

00:32:54.334 --> 00:32:56.501
and I want more applications
to use it.

00:32:56.501 --> 00:32:58.834
It also can be used for
a couple of cool ideas.

00:32:58.834 --> 00:33:01.167
Like if you want
to be able to track things

00:33:01.167 --> 00:33:02.834
going across devices,

00:33:02.834 --> 00:33:05.167
you can actually have that same
session carried across devices

00:33:05.167 --> 00:33:07.033
with application data backup.

00:33:07.033 --> 00:33:09.167
And this flows pretty
straightforward as well.

00:33:09.167 --> 00:33:11.167
You basically tell
the backup manager

00:33:11.167 --> 00:33:13.167
when you have data
that has changed.

00:33:13.167 --> 00:33:15.501
It then gives you
an onBackup() request,

00:33:15.501 --> 00:33:17.834
and it backs things up
to the Cloud.

00:33:17.834 --> 00:33:20.501
Now obviously, um,

00:33:20.501 --> 00:33:22.667
uh, you know,
if you look at this,

00:33:22.667 --> 00:33:24.667
this is actually part
of the framework.

00:33:24.667 --> 00:33:26.834
This is actually not tied
to Android Market,

00:33:26.834 --> 00:33:28.501
so you're relying on

00:33:28.501 --> 00:33:30.667
whatever Cloud backup
infrastructure is on the device.

00:33:30.667 --> 00:33:33.000
Restoring is pretty much
straightforward as well.

00:33:33.000 --> 00:33:36.334
If the application is installed,

00:33:36.334 --> 00:33:38.334
if data is backed up,

00:33:38.334 --> 00:33:40.501
it will send you an onRestore().

00:33:40.501 --> 00:33:42.501
So it's pretty straightforward,

00:33:42.501 --> 00:33:44.834
and it allows you
to do a lot of things,

00:33:44.834 --> 00:33:47.167
and it can also help you track
what's going on

00:33:47.167 --> 00:33:49.000
with usage across users.

00:33:49.000 --> 00:33:50.667
So one more thing--

00:33:50.667 --> 00:33:52.834
if you like the Androids
in this presentation,

00:33:52.834 --> 00:33:54.501
please consider
Androidifying yourself.

00:33:54.501 --> 00:33:56.167
It's really fun.

00:33:56.167 --> 00:33:58.501
And it saved me a lot of time
making artwork.

00:33:58.501 --> 00:34:00.434
[laughter]

00:34:00.434 --> 00:34:03.000
Galpin: So, uh, now we're gonna
open up the floor for questions.

00:34:03.000 --> 00:34:05.000
Now please use the microphones

00:34:05.000 --> 00:34:07.334
so that people outside
of this room can hear you

00:34:07.334 --> 00:34:09.667
or maybe even so that people
inside of this room can hear,

00:34:09.667 --> 00:34:11.834
and Trevor and I can both
take your questions.

00:34:11.834 --> 00:34:14.767
Thank you.
[applause]

00:34:20.667 --> 00:34:22.667
man: So if you're
doing something--

00:34:22.667 --> 00:34:25.501
like you mentioned you're
downloading this large movie.

00:34:25.501 --> 00:34:27.667
You don't want them
to download the movie

00:34:27.667 --> 00:34:29.834
and then just send it
to all their friends.

00:34:29.834 --> 00:34:31.834
Are you doing that

00:34:31.834 --> 00:34:35.000
by virtue of putting that
in the application store?

00:34:35.000 --> 00:34:37.501
Galpin: Well, you know, you've
got a couple of options here.

00:34:37.501 --> 00:34:40.167
I mean, I think that--
I think in this particular case

00:34:40.167 --> 00:34:43.000
we want to stop them from using
bandwidth on our server.

00:34:43.000 --> 00:34:45.667
Our goal was not to actually try
to protect the content.

00:34:45.667 --> 00:34:47.501
That's a secondary thing.

00:34:47.501 --> 00:34:49.834
Now, of course, you can take
that content, whatever it is.

00:34:49.834 --> 00:34:51.834
You can encrypt it
however you like.

00:34:51.834 --> 00:34:54.000
You can get a lot
of per device data there,

00:34:54.000 --> 00:34:56.167
and you can do that
on your back end.

00:34:56.167 --> 00:34:58.167
But that's kind of
a secondary problem

00:34:58.167 --> 00:35:00.100
versus the problem
of just trying

00:35:00.100 --> 00:35:02.501
to prevent someone from leeching
off your bandwidth, which is

00:35:02.501 --> 00:35:04.667
what we were, in this case,
particularly talking about.

00:35:04.667 --> 00:35:07.000
man: Okay. Um, and if you don't
have your own server,

00:35:07.000 --> 00:35:09.000
the Android Market
doesn't have any mechanism

00:35:09.000 --> 00:35:10.834
for storing binaries.

00:35:10.834 --> 00:35:13.167
You need to kind of
create your own server for that.

00:35:13.167 --> 00:35:15.501
Galpin: Well, as far as
what's tied in In-App Billing,

00:35:15.501 --> 00:35:17.167
that's correct.

00:35:17.167 --> 00:35:19.534
At the moment we do not have
anything like that.

00:35:19.534 --> 00:35:21.667
But again we do have things
like App Engine.

00:35:21.667 --> 00:35:23.834
App Engine has a certain amount
of free quota,

00:35:23.834 --> 00:35:26.000
and it's, you know--
so there are ways in which,

00:35:26.000 --> 00:35:28.167
depending on how much data
you have to store,

00:35:28.167 --> 00:35:30.501
you can still find facilities
out there on the Web,

00:35:30.501 --> 00:35:32.667
whether it's through us
or through someone else.

00:35:32.667 --> 00:35:34.667
man: Okay. Thank you.
Galpin: Sure.

00:35:34.667 --> 00:35:36.834
Coryat: Yes,
my name's John Coryat.

00:35:36.834 --> 00:35:39.334
I have a free app
called Radar Now.

00:35:39.334 --> 00:35:41.501
Um, I have, like, uh,

00:35:41.501 --> 00:35:44.000
about a million,
um, active users,

00:35:44.000 --> 00:35:47.334
and implementing, like, license
checks and stuff like that,

00:35:47.334 --> 00:35:50.167
I'm not sure if that's good
for a free app.

00:35:50.167 --> 00:35:52.667
I'd like to implement
In-App Billing,

00:35:52.667 --> 00:35:55.334
but, you know, that's adding
another layer.

00:35:55.334 --> 00:35:58.000
What's your feeling on that?
Galpin: Well, so license--

00:35:58.000 --> 00:36:00.100
I should have made this clear
at the start.

00:36:00.100 --> 00:36:02.167
So license validation
is something

00:36:02.167 --> 00:36:04.167
that only applies
to a paid application.

00:36:04.167 --> 00:36:06.000
Coryat: Okay.
Galpin: And, uh,

00:36:06.000 --> 00:36:08.334
and as far as In-App Billing
is concerned, um, you know,

00:36:08.334 --> 00:36:10.667
I think that, uh, if it fits
the business model,

00:36:10.667 --> 00:36:12.834
you know, I-I think
it can make sense.

00:36:12.834 --> 00:36:15.000
You know, obviously
you have to have something

00:36:15.000 --> 00:36:17.334
to drive someone to it.
If you do use In-App Billing,

00:36:17.334 --> 00:36:19.501
and you're doing an app
that's not server-driven,

00:36:19.501 --> 00:36:21.834
I'd definitely recommend using
a lot of these same checks

00:36:21.834 --> 00:36:24.000
we were talking about
in terms of integrity,

00:36:24.000 --> 00:36:26.200
because, again, that now
becomes a surface area

00:36:26.200 --> 00:36:28.400
for someone to attack, so, uh--
but for a free application

00:36:28.400 --> 00:36:30.534
it's typically not something
that's required.

00:36:30.534 --> 00:36:33.234
Coryat: Yeah, so what I have
in mind is adding features

00:36:33.234 --> 00:36:35.834
that have been requested
over the last two years

00:36:35.834 --> 00:36:39.167
by users begging for new stuff
and, uh...

00:36:39.167 --> 00:36:40.834
Galpin: Mm-hmm.

00:36:40.834 --> 00:36:43.000
Coryat: And the In-App Billing
thing seems perfect.

00:36:43.000 --> 00:36:45.167
I want to implement
in a subscription roll

00:36:45.167 --> 00:36:47.167
on my own server.
Galpin: Mm-hmm.

00:36:47.167 --> 00:36:49.167
Coryat: That's no issue, right?

00:36:49.167 --> 00:36:52.000
Galpin: So the only issue with
In-App Billing and subscriptions

00:36:52.000 --> 00:36:54.334
is there's currently no support
for subscriptions.

00:36:54.334 --> 00:36:56.334
in our In-App Billing directly,

00:36:56.334 --> 00:36:58.334
but you can use it
as an unmanaged item,

00:36:58.334 --> 00:37:00.267
and you can manage
those transactions yourself.

00:37:00.267 --> 00:37:02.334
So you can just notify the user

00:37:02.334 --> 00:37:04.167
that their subscription's
running out.

00:37:04.167 --> 00:37:06.000
They have to do
another purchase.

00:37:06.000 --> 00:37:07.834
Coryat: Very good.
Thanks very much.

00:37:07.834 --> 00:37:09.501
Galpin: Sure.

00:37:09.501 --> 00:37:11.667
man: I would like
to ask a question.

00:37:11.667 --> 00:37:13.834
Once you have pirated apps
out there, um,

00:37:13.834 --> 00:37:16.167
and so then you can implement
the LVL and stuff,

00:37:16.167 --> 00:37:19.334
but other than coming out with
new updates with great features,

00:37:19.334 --> 00:37:21.501
is there anything else
that you can do

00:37:21.501 --> 00:37:23.667
with things that are out there
in the wild?

00:37:23.667 --> 00:37:26.167
Galpin: Um, if you don't have
a server component, it's tough.

00:37:26.167 --> 00:37:28.167
I mean, you know, obviously--

00:37:28.167 --> 00:37:30.501
obviously, um, my general--
my general feeling

00:37:30.501 --> 00:37:32.501
is that it's useful
for every application

00:37:32.501 --> 00:37:34.667
to have some kind
of server component if possible,

00:37:34.667 --> 00:37:36.667
even if that's just
for analytics.

00:37:36.667 --> 00:37:38.834
I think it's important
for applications to track--

00:37:38.834 --> 00:37:41.000
for developers to know who's
using their applications,

00:37:41.000 --> 00:37:43.334
where they are, what kind
of install rate they're getting,

00:37:43.334 --> 00:37:45.667
even beyond what they get from
Market, which is pretty good.

00:37:45.667 --> 00:37:47.834
But that--so my feeling is,
yeah, it's hard.

00:37:47.834 --> 00:37:50.000
I mean, once it's--once it's
truly out there,

00:37:50.000 --> 00:37:54.000
there's not a lot you can do,
so...

00:37:54.000 --> 00:37:56.667
Stone: Hi, my name is Bo Stone.

00:37:56.667 --> 00:37:59.334
I do DroidIn for LinkedIn.

00:37:59.334 --> 00:38:01.834
It's a first-ever LinkedIn app.
Galpin: Mm-hmm.

00:38:01.834 --> 00:38:04.167
Stone: Um, and here's
the question.

00:38:04.167 --> 00:38:07.667
Uh, I have a pro version
of the app,

00:38:07.667 --> 00:38:11.000
and all it really does
is removes the ads,

00:38:11.000 --> 00:38:14.667
you know, Google ad, um,
from--from the application,

00:38:14.667 --> 00:38:16.834
so I would like going forward

00:38:16.834 --> 00:38:20.000
to make it available as, um,

00:38:20.000 --> 00:38:22.000
basically in-Market purchase,

00:38:22.000 --> 00:38:24.000
In-App purchase.
Galpin: Mm-hmm.

00:38:24.000 --> 00:38:26.334
Stone: But what's
really stopping me

00:38:26.334 --> 00:38:29.501
is that, uh, what do I do with
all the custom--

00:38:29.501 --> 00:38:32.334
all my happy customers
that already have it?

00:38:32.334 --> 00:38:36.167
So if I remove that code that,
you know, that I already have

00:38:36.167 --> 00:38:38.167
for verifying the license,

00:38:38.167 --> 00:38:40.667
what are they gonna do
with my future releases?

00:38:40.667 --> 00:38:43.834
And so if you don't have that,
I mean,

00:38:43.834 --> 00:38:46.501
I treat it as a request.

00:38:46.501 --> 00:38:50.000
I just need a mechanism of
taking that existing license

00:38:50.000 --> 00:38:53.834
and maybe giving
my customers a voucher

00:38:53.834 --> 00:38:57.667
that they can basically then go
into a Market site

00:38:57.667 --> 00:38:59.667
and purchase--

00:38:59.667 --> 00:39:02.501
basically use it to--to convert
that license

00:39:02.501 --> 00:39:04.501
into In-App license.
Galpin: Right.

00:39:04.501 --> 00:39:06.501
I mean, I think, so I mean--

00:39:06.501 --> 00:39:08.834
so the only way to do that
right now with the system

00:39:08.834 --> 00:39:11.000
is--is for it to be
an unmanaged transaction

00:39:11.000 --> 00:39:13.367
for you to store that kind
of information on your server.

00:39:13.367 --> 00:39:15.000
'Cause that gives you

00:39:15.000 --> 00:39:17.167
all the flexibility
to control how you use it.

00:39:17.167 --> 00:39:19.501
So you know, put up a--
if you put up a little server,

00:39:19.501 --> 00:39:21.834
and you tack on there, it's
still not a perfect solution,

00:39:21.834 --> 00:39:24.000
and I'd like to support that,
honestly,

00:39:24.000 --> 00:39:27.501
but, uh, you know, right now
the only way you can do that

00:39:27.501 --> 00:39:29.501
is through
an unmanaged transaction.

00:39:29.501 --> 00:39:31.667
Stone: All right, thank you.
Galpin: Sure.

00:39:31.667 --> 00:39:33.834
man: Um, yes, hello.

00:39:33.834 --> 00:39:35.834
In terms of, like--

00:39:35.834 --> 00:39:38.334
this was mainly for,
let's say, paid apps

00:39:38.334 --> 00:39:40.000
or In-App transaction.

00:39:40.000 --> 00:39:43.501
But for instance, if I want
to just save some information

00:39:43.501 --> 00:39:45.501
and want to obfuscate it,
let's say,

00:39:45.501 --> 00:39:47.501
like an API token...
Galpin: Right.

00:39:47.501 --> 00:39:49.667
man: and sometimes
a secret as well,

00:39:49.667 --> 00:39:51.667
is there any best practice?

00:39:51.667 --> 00:39:54.667
I mean, would you recommend
a way to ensure

00:39:54.667 --> 00:39:56.834
we can obfuscate some data

00:39:56.834 --> 00:39:59.000
that's either specific
to a user,

00:39:59.000 --> 00:40:01.334
like, uh, some kind of
passwords,

00:40:01.334 --> 00:40:03.501
something of that sort...
Galpin: Mm-hmm.

00:40:03.501 --> 00:40:06.667
man: or a token, in a way
that makes it difficult

00:40:06.667 --> 00:40:08.667
to just achieve easily,

00:40:08.667 --> 00:40:10.834
and where would--
where would you place it?

00:40:10.834 --> 00:40:12.834
Galpin: Well,
I mean, ultimately--

00:40:12.834 --> 00:40:15.334
so, I mean, ultimately I guess
there's kind of two things.

00:40:15.334 --> 00:40:17.501
If you're trying to protect
the user's data

00:40:17.501 --> 00:40:19.167
from other applications,

00:40:19.167 --> 00:40:21.501
the platform does a pretty good
job of doing that already,

00:40:21.501 --> 00:40:23.834
um, as long as you store data
in private locations,

00:40:23.834 --> 00:40:26.167
you know, and that's--
and that's one of the places

00:40:26.167 --> 00:40:28.501
in which the platform really
tries to secure data.

00:40:28.501 --> 00:40:31.501
Um, and of course, obfuscating
things on top of that is good,

00:40:31.501 --> 00:40:33.501
uh, uh, because, of course,

00:40:33.501 --> 00:40:35.501
the platform
could be compromised.

00:40:35.501 --> 00:40:37.667
There's no such thing
as a perfect system.

00:40:37.667 --> 00:40:39.667
But, um, but in general
that's--that's the--

00:40:39.667 --> 00:40:41.667
the platform tries
very, very hard

00:40:41.667 --> 00:40:43.834
to make sure that
there is a sandbox

00:40:43.834 --> 00:40:46.334
that applications can't get
out of to make that happen.

00:40:46.334 --> 00:40:49.167
Um, as far as best practices
in general for obfuscating,

00:40:49.167 --> 00:40:51.501
I mean, I think that, uh,

00:40:51.501 --> 00:40:53.868
you know, some of the things
we talked about here

00:40:53.868 --> 00:40:56.167
are--are not exactly relevant
to actually obfuscating data.

00:40:56.167 --> 00:40:58.334
But if you look inside
of the LVL,

00:40:58.334 --> 00:41:00.267
there's actually an obfuscated
preferences module

00:41:00.267 --> 00:41:02.501
that we actually give you
a source code,

00:41:02.501 --> 00:41:04.667
and that's probably
a good place to start.

00:41:04.667 --> 00:41:06.501
And it includes--it includes

00:41:06.501 --> 00:41:08.501
a pretty straightforward
implementation of that,

00:41:08.501 --> 00:41:10.834
and you can certainly grab
that code and use it.

00:41:10.834 --> 00:41:13.000
It's part of the freely
available library.

00:41:13.000 --> 00:41:16.834
man: Okay, and just as
a continuation of that,

00:41:16.834 --> 00:41:19.834
would you always execute
some kind of--

00:41:19.834 --> 00:41:21.834
I suppose you have to--

00:41:21.834 --> 00:41:24.667
but obfuscation and all
this kind of processing power

00:41:24.667 --> 00:41:26.868
just every time you need
to access it?

00:41:26.868 --> 00:41:29.334
So for instance if you have
like a [speaking indistinctly]

00:41:29.334 --> 00:41:31.834
where you want to know
if the user is logged in,

00:41:31.834 --> 00:41:34.167
do you each time
have to execute,

00:41:34.167 --> 00:41:37.834
let's say, this entire process
of running a thread

00:41:37.834 --> 00:41:39.834
and you know...
Galpin: I mean--

00:41:39.834 --> 00:41:42.167
I mean, I think that
it really depends on--on

00:41:42.167 --> 00:41:44.000
whether it's gonna
adversely affect

00:41:44.000 --> 00:41:45.834
the performance of your app.

00:41:45.834 --> 00:41:48.000
If it's not,
then I see no reason

00:41:48.000 --> 00:41:50.167
why not to execute it
all the time.

00:41:50.167 --> 00:41:52.501
If it does, then obviously
you're gonna want to make

00:41:52.501 --> 00:41:54.501
a compromise between
some level of security

00:41:54.501 --> 00:41:56.334
and some level of performance.

00:41:56.334 --> 00:41:58.501
I think it's really
on an app-by-app basis.

00:41:58.501 --> 00:42:00.300
man: Okay, thank you.

00:42:00.300 --> 00:42:02.167
man: Hi.
Galpin: Oh, yeah.

00:42:02.167 --> 00:42:04.334
man: My question
is on the free apps.

00:42:04.334 --> 00:42:06.334
You know, free apps...
[speaking indistinctly]

00:42:06.334 --> 00:42:08.334
the license validation check,
right?

00:42:08.334 --> 00:42:10.501
But I still want to do
the vampire attack.

00:42:10.501 --> 00:42:13.000
You know, some unknown people
are taking my free app

00:42:13.000 --> 00:42:15.667
and start using
my service site resources.

00:42:15.667 --> 00:42:19.000
So how do I go about protecting
that kind of, you know,

00:42:19.000 --> 00:42:21.501
free apps but at the same time
vampire attacks?

00:42:21.501 --> 00:42:23.501
Galpin:
It's an interesting problem.

00:42:23.501 --> 00:42:25.667
I mean, I guess--
I guess the question is,

00:42:25.667 --> 00:42:27.834
you know, in general
with the free app

00:42:27.834 --> 00:42:30.167
the goal is to have
as many users as possible,

00:42:30.167 --> 00:42:32.334
so are people misusing your app
in some way,

00:42:32.334 --> 00:42:34.667
or is it--or...
man: Yeah.

00:42:34.667 --> 00:42:38.501
For example, take the code
and decompile and, you know,

00:42:38.501 --> 00:42:40.667
modify certain things...
Galpin: Right.

00:42:40.667 --> 00:42:42.834
man: and make it work
on some other device,

00:42:42.834 --> 00:42:45.167
which we really don't want
to work on certain device.

00:42:45.167 --> 00:42:47.000
Galpin: I see. I see.

00:42:47.000 --> 00:42:49.167
Yeah, I mean, you know,
in that case,

00:42:49.167 --> 00:42:51.167
LVL isn't really gonna help you

00:42:51.167 --> 00:42:53.501
because ultimately the thing to
do is focus on integrity checks

00:42:53.501 --> 00:42:55.667
and try to make sure
that the code is--is

00:42:55.667 --> 00:42:57.667
as functionless as possible
in those cases,

00:42:57.667 --> 00:42:59.667
and you know, make sure that--

00:42:59.667 --> 00:43:01.667
you know, if someone's
touched your code,

00:43:01.667 --> 00:43:04.000
a lot of those things will
really make it very challenging

00:43:04.000 --> 00:43:06.200
for them to--to get
your application to work.

00:43:06.200 --> 00:43:08.167
And you know, hopefully
they'll give up,

00:43:08.167 --> 00:43:10.167
but if they don't,
you know, that's--that's--

00:43:10.167 --> 00:43:12.267
at least hopefully you've
prevented--you've created

00:43:12.267 --> 00:43:14.334
a window of opportunity
for your application.

00:43:14.334 --> 00:43:16.000
Now if you're using--

00:43:16.000 --> 00:43:18.000
if you're talking about using
server-side resources,

00:43:18.000 --> 00:43:20.167
a lot of the things you can do

00:43:20.167 --> 00:43:22.334
are actually take things like--
encrypt pieces.

00:43:22.334 --> 00:43:24.501
One of the things that's
very successful, actually,

00:43:24.501 --> 00:43:26.834
is taking, um, pieces of
your code that are well-known

00:43:26.834 --> 00:43:29.501
and using them as keys that
you send up to your encrypt--

00:43:29.501 --> 00:43:31.334
up to your server.

00:43:31.334 --> 00:43:33.501
So do things like grab
the CRC of this

00:43:33.501 --> 00:43:35.667
and don't necessarily use it
for an integrity check,

00:43:35.667 --> 00:43:37.667
but actually use it as a key

00:43:37.667 --> 00:43:39.834
that the server ends up using
to send content.

00:43:39.834 --> 00:43:41.501
So that's another method.

00:43:41.501 --> 00:43:43.667
You can actually directly
incorporate integrity checks

00:43:43.667 --> 00:43:45.834
into helping prevent misuse
of your application.

00:43:45.834 --> 00:43:48.000
Johns: Yeah, and it's
also worth noting, I mean,

00:43:48.000 --> 00:43:50.000
what you're trying
to do ultimately

00:43:50.000 --> 00:43:52.334
when you're trying to do
an application integrity check

00:43:52.334 --> 00:43:54.501
is make sure nobody's
tampered with the system.

00:43:54.501 --> 00:43:57.000
And to do that, you really need
something like a DPM,

00:43:57.000 --> 00:43:59.501
which unfortunately Android
doesn't have support for.

00:43:59.501 --> 00:44:01.100
Um, who knows.

00:44:01.100 --> 00:44:03.501
At some point in the future
we may or may not get that,

00:44:03.501 --> 00:44:05.501
but really that's
the missing piece

00:44:05.501 --> 00:44:07.501
for what you're trying
to do there.

00:44:07.501 --> 00:44:09.834
Galpin: But the key thing,
I think, is, you know, again,

00:44:09.834 --> 00:44:12.167
you can take advantage of values
that come from integrity checks,

00:44:12.167 --> 00:44:14.367
things like the CRC, things like
your application signature,

00:44:14.367 --> 00:44:16.667
things that are very difficult
to tamper with and use those

00:44:16.667 --> 00:44:18.667
as--and send them directly
to your application

00:44:18.667 --> 00:44:20.834
and use those to actually
validate what's going on.

00:44:20.834 --> 00:44:23.000
Now again, all this stuff
can be spoofed.

00:44:23.000 --> 00:44:25.000
It's not a perfect system,

00:44:25.000 --> 00:44:27.000
but you can make it
pretty challenging

00:44:27.000 --> 00:44:29.167
for someone to figure out
what's going on.

00:44:29.167 --> 00:44:30.834
man: Continuation on that,

00:44:30.834 --> 00:44:33.000
you said that application
can proxy the, you know,

00:44:33.000 --> 00:44:35.000
encrypted data coming from
the Android Market

00:44:35.000 --> 00:44:37.334
and then send it to our server
in the back end.

00:44:37.334 --> 00:44:39.000
Galpin: Mm-hmm.

00:44:39.000 --> 00:44:41.334
man: But what server has to do
at that point, you know,

00:44:41.334 --> 00:44:43.334
how do they validate
the response?

00:44:43.334 --> 00:44:45.667
Galpin: So ultimately it's what
I was talking about before.

00:44:45.667 --> 00:44:47.834
The Android Market signs
everything with a, um,

00:44:47.834 --> 00:44:49.501
with a private key,

00:44:49.501 --> 00:44:51.834
and then so what you do
is you put the public key

00:44:51.834 --> 00:44:53.834
that's associated
with that private key--

00:44:53.834 --> 00:44:56.000
and we give that to you
on Android Market.

00:44:56.000 --> 00:44:58.000
You put that on your server,

00:44:58.000 --> 00:45:00.100
and you actually use that
to validate the signature

00:45:00.100 --> 00:45:02.167
that comes back in
from Android Market.

00:45:02.167 --> 00:45:04.334
So that's how it creates
a relatively secure channel

00:45:04.334 --> 00:45:06.167
between the Market
and your application,

00:45:06.167 --> 00:45:08.334
even though the Market server
isn't directly talking

00:45:08.334 --> 00:45:10.334
to your server.
man: Oh, thank you.

00:45:10.334 --> 00:45:12.501
Johns: Yeah, and a take a look
in the In-App Billing code.

00:45:12.501 --> 00:45:14.334
There's a security Java file

00:45:14.334 --> 00:45:16.501
that shows you exactly how
to validate that response,

00:45:16.501 --> 00:45:18.501
and the source code
we'll be releasing

00:45:18.501 --> 00:45:20.868
will show you how to do that.
Galpin: Yeah, exactly.

00:45:20.868 --> 00:45:23.000
man: In the sample project
that you created,

00:45:23.000 --> 00:45:24.834
did you actually take the time

00:45:24.834 --> 00:45:27.167
to decompile your own
application and try to hack it?

00:45:27.167 --> 00:45:29.000
And in that case, which methods

00:45:29.000 --> 00:45:31.167
did you find were easier
to circumvent than others?

00:45:31.167 --> 00:45:33.167
Galpin: So--
Johns: This one in particular--

00:45:33.167 --> 00:45:35.501
um, well, to answer the first
part of your question, yes.

00:45:35.501 --> 00:45:37.501
man: Okay.
John: But in this case

00:45:37.501 --> 00:45:39.667
since we're doing
service side validation,

00:45:39.667 --> 00:45:42.000
there's actually no attack
window on the device,

00:45:42.000 --> 00:45:45.000
um, 'cause really
what you're doing

00:45:45.000 --> 00:45:47.000
is validating
a signed piece of data

00:45:47.000 --> 00:45:49.000
that's coming
from the Market server.

00:45:49.000 --> 00:45:51.000
So assuming that
you can't tamper with

00:45:51.000 --> 00:45:53.200
the Market server code,
which hopefully you can't,

00:45:53.200 --> 00:45:56.501
um, and assuming nobody can
tamper with your server,

00:45:56.501 --> 00:46:00.000
um, you know,
all the actual validation

00:46:00.000 --> 00:46:02.767
is being done on those ends,
and the device itself

00:46:02.767 --> 00:46:06.133
is just acting as a conduit for
the two to talk to each other.

00:46:06.133 --> 00:46:09.501
man: That applies to
your In-App purchasing example.

00:46:09.501 --> 00:46:11.167
Johns: Right.

00:46:11.167 --> 00:46:13.167
Galpin: And the LVL example
as well.

00:46:13.167 --> 00:46:14.834
What's more interesting

00:46:14.834 --> 00:46:17.000
is when you get into
the anti-tampering examples.

00:46:17.000 --> 00:46:19.167
And so there actually are tools
out there

00:46:19.167 --> 00:46:21.334
that you can actually run, uh,
and, uh,

00:46:21.334 --> 00:46:23.334
there are--there are
some Web sites

00:46:23.334 --> 00:46:25.334
that have created some
fairly sophisticated tools

00:46:25.334 --> 00:46:27.534
that try to break
this kind of protection.

00:46:27.534 --> 00:46:30.000
So that'd be my first--
my first effort on that.

00:46:30.000 --> 00:46:32.501
And, yeah, I actually designed
some of these examples

00:46:32.501 --> 00:46:34.501
based upon the results
of that tool.

00:46:34.501 --> 00:46:36.667
Now, of course, the tool
is gonna get updated,

00:46:36.667 --> 00:46:38.667
so don't use
my examples verbatim.

00:46:38.667 --> 00:46:41.167
Uh, but, uh, but definitely
that's a good place to start.

00:46:41.167 --> 00:46:43.000
The last thing you want

00:46:43.000 --> 00:46:45.334
is for you to put a lot of work
into something

00:46:45.334 --> 00:46:47.501
and to have it immediately
get--get compromised.

00:46:47.501 --> 00:46:49.667
man: I also have
a follow-up question.

00:46:49.667 --> 00:46:53.667
Um, what are your thoughts on
third-party libraries,

00:46:53.667 --> 00:46:55.667
such as Urban Airship,

00:46:55.667 --> 00:46:58.501
and the services they provide
versus how basically

00:46:58.501 --> 00:47:01.167
it's essentially copy and paste
for every application?

00:47:01.167 --> 00:47:03.501
Galpin: Uh...
man: Are you familiar?

00:47:03.501 --> 00:47:05.167
Galpin: I'm not.

00:47:05.167 --> 00:47:07.334
I don't have enough familiarity
with what they're doing.

00:47:07.334 --> 00:47:09.334
man: Basically they handle
the server-side validation,

00:47:09.334 --> 00:47:11.501
and you drop it
into your application,

00:47:11.501 --> 00:47:13.501
and they provide
the transport mechanism

00:47:13.501 --> 00:47:15.667
for the content to your device.
Galpin: Mm-hmm.

00:47:15.667 --> 00:47:17.667
I've heard--I've seen
some things like that.

00:47:17.667 --> 00:47:19.834
Yeah, I don't really have
an opinion on it.

00:47:19.834 --> 00:47:21.667
If they work, that's great.

00:47:21.667 --> 00:47:23.834
It's not--again, we're just
trying to show you

00:47:23.834 --> 00:47:26.167
how to use the APIs to do it.
man: Right.

00:47:26.167 --> 00:47:28.501
Galpin: But if they're doing it
for you, that's awesome.

00:47:28.501 --> 00:47:31.000
man: And what is the best way
to use In-App Payments

00:47:31.000 --> 00:47:33.701
for opening

00:47:33.701 --> 00:47:37.334
some extra premium features
of the application?

00:47:37.334 --> 00:47:39.834
Because in this case you will--

00:47:39.834 --> 00:47:42.000
you should have all this code

00:47:42.000 --> 00:47:44.334
also inside the application,

00:47:44.334 --> 00:47:48.334
and an attacker can use
all those techniques to open it.

00:47:48.334 --> 00:47:51.167
Galpin: So my--my general
best practice on that

00:47:51.167 --> 00:47:53.667
is to try to have resources
that are not in your application

00:47:53.667 --> 00:47:55.834
that have to be pulled in
from a server.

00:47:55.834 --> 00:47:58.501
And if that--and even better
if they can be encrypted

00:47:58.501 --> 00:48:00.434
with some
device-specific information

00:48:00.434 --> 00:48:04.501
that makes it a lot harder for
someone to break it and use it,

00:48:04.501 --> 00:48:06.501
especially if that decryption
is being done,

00:48:06.501 --> 00:48:08.667
like, inside of native code,
or it's being--

00:48:08.667 --> 00:48:10.834
you know, for
a lot of game titles,

00:48:10.834 --> 00:48:12.834
that's actually very, very easy.

00:48:12.834 --> 00:48:14.834
That's how they're already
accessing those assets.

00:48:14.834 --> 00:48:16.834
So that would be one way

00:48:16.834 --> 00:48:19.334
if you want to actually put--
put a little bit more, um, uh,

00:48:19.334 --> 00:48:22.000
to make it a little bit harder,
a little bit more obfuscated.

00:48:22.000 --> 00:48:24.000
So I-I like that method.

00:48:24.000 --> 00:48:26.167
Um, there are plenty
of other methods, too.

00:48:26.167 --> 00:48:29.167
I mean, um, if you look at
the latest versions of Unity.

00:48:29.167 --> 00:48:31.334
Um, they--they actually do
a bunch of things

00:48:31.334 --> 00:48:33.834
to try to help people out
in this exact same way,

00:48:33.834 --> 00:48:36.000
uh, in order to help them
encrypt resources

00:48:36.000 --> 00:48:38.000
and unlock things
in the application.

00:48:38.000 --> 00:48:40.033
But I think the best practice

00:48:40.033 --> 00:48:42.000
is to actually download
something else additional

00:48:42.000 --> 00:48:43.667
to the application.

00:48:43.667 --> 00:48:45.667
man: Even DEX files
to the memory?

00:48:45.667 --> 00:48:47.834
Galpin: Um, the problem with
DEX--DEX files are interesting.

00:48:47.834 --> 00:48:50.000
The problem with DEX files
is that you can't, um,

00:48:50.000 --> 00:48:52.501
you can't actually encrypt them
because they have to--

00:48:52.501 --> 00:48:54.834
and they have to be loaded in
the internal file system.

00:48:54.834 --> 00:48:56.834
You can't actually load them
from memory

00:48:56.834 --> 00:48:58.501
with our class loader.

00:48:58.501 --> 00:49:00.767
So, um, yes, that's not--
that's not a bad idea

00:49:00.767 --> 00:49:03.000
if it's a small class
that does something integral,

00:49:03.000 --> 00:49:05.167
but it--it is--it doesn't
necessarily provide you

00:49:05.167 --> 00:49:06.834
that much protection,

00:49:06.834 --> 00:49:09.167
and it is a lot of work
to set up.

00:49:09.167 --> 00:49:11.334
And it also is something that,
you know,

00:49:11.334 --> 00:49:13.200
in general downloading code

00:49:13.200 --> 00:49:15.167
is sort of
a questionable practice

00:49:15.167 --> 00:49:17.167
even though it does,
um, it does--

00:49:17.167 --> 00:49:19.334
even though the--the actual
system will prevent it

00:49:19.334 --> 00:49:21.501
from getting to any resources
that your application

00:49:21.501 --> 00:49:23.501
hasn't already--
hasn't already asked for.

00:49:23.501 --> 00:49:25.667
It does provide--
it does mean that your app

00:49:25.667 --> 00:49:27.501
is ultimately responsible for

00:49:27.501 --> 00:49:29.667
a potential additional vector
for compromising the system.

00:49:29.667 --> 00:49:31.834
So as a general rule,
you know, yes, um,

00:49:31.834 --> 00:49:33.834
it's one way of doing things,

00:49:33.834 --> 00:49:36.000
but it does mean that your
application could potentially

00:49:36.000 --> 00:49:38.000
be used by something else
that's naughty

00:49:38.000 --> 00:49:40.501
if it can figure out how you're
dealing with that DEX file.

00:49:40.501 --> 00:49:44.000
man: Okay, thanks.

00:49:44.000 --> 00:49:45.834
man: Hi, Dan.

00:49:45.834 --> 00:49:48.167
I--why not close the loop
and have the Market server

00:49:48.167 --> 00:49:50.167
communicate with your server?

00:49:50.167 --> 00:49:52.334
Johns: [laughs]
Galpin: It's--it's--

00:49:52.334 --> 00:49:54.334
it's something that
I think would be--

00:49:54.334 --> 00:49:56.501
would be an excellent addition
to the API.

00:49:56.501 --> 00:49:58.501
I don't think cryptographically
it's required.

00:49:58.501 --> 00:50:00.667
Uh, but I think
that it would make--

00:50:00.667 --> 00:50:02.834
it would make life
a little bit easier

00:50:02.834 --> 00:50:04.834
for some--for some applications,
and it's something

00:50:04.834 --> 00:50:07.000
that certainly we've talked
to the Market team about.

00:50:07.000 --> 00:50:09.501
Johns: Yeah, so just to follow
up on that and to be clear--

00:50:09.501 --> 00:50:11.501
from a security perspective,

00:50:11.501 --> 00:50:13.334
the way we're doing it

00:50:13.334 --> 00:50:15.501
versus providing an additional
API on the market server

00:50:15.501 --> 00:50:17.501
that your app could talk to,

00:50:17.501 --> 00:50:19.501
they're essentially equivalent.

00:50:19.501 --> 00:50:21.667
Um, the downside is having
an additional API

00:50:21.667 --> 00:50:23.667
actually adds
one more round trip worth

00:50:23.667 --> 00:50:25.667
of latency to your--
to your check.

00:50:25.667 --> 00:50:28.000
Um, but again, there are
some--some specific cases

00:50:28.000 --> 00:50:30.167
where it might make life easier
on developers,

00:50:30.167 --> 00:50:33.000
so we--we definitely have
a feature request open for that.

00:50:33.000 --> 00:50:35.334
man: All right, thanks.

00:50:35.334 --> 00:50:37.501
Galpin: All right, well,

00:50:37.501 --> 00:50:39.667
if that's it for the questions,

00:50:39.667 --> 00:50:42.501
the next session here
is going to be on, uh,

00:50:42.501 --> 00:50:45.501
bringing your games to Android
with C and C++,

00:50:45.501 --> 00:50:48.000
and myself and Ian Lewis
are gonna present that.

00:50:48.000 --> 00:50:50.000
And let us know how we're doing.

00:50:50.000 --> 00:50:53.834
I had a speaker meter,
uh, URL up there.

00:50:53.834 --> 00:50:57.000
And so please, uh, do check in.

00:50:57.000 --> 00:50:59.000
We do actually listen
to your feedback.

00:50:59.000 --> 00:51:01.334
And if you thought this was
a giant waste of time,

00:51:01.334 --> 00:51:03.000
let us know,

00:51:03.000 --> 00:51:05.334
and if you thought it was
interesting, let us know.

00:51:05.334 --> 00:51:07.167
And we'll be back next

00:51:07.167 --> 00:51:09.334
with "Bringing Games to Android
with C and C++."

00:51:09.334 --> 00:51:11.667
Thank you.
[applause]

