WEBVTT
Kind: captions
Language: en

00:00:00.249 --> 00:00:02.525
We’re here at the office of Alex Martelli the

00:00:02.525 --> 00:00:05.698
well-known Python programmer and author.

00:00:05.698 --> 00:00:07.595
Let’s go in and talk to Alex.

00:00:07.595 --> 00:00:15.288
In traditional Python the type well – type is strongly

00:00:15.288 --> 00:00:19.054
connected to an object. An object’s type is

00:00:19.054 --> 00:00:22.380
absolutely crucial to that object but it’s not

00:00:22.380 --> 00:00:25.786
connected to the name. A name, a variable if you

00:00:25.786 --> 00:00:28.471
want to call it that I would prefer to use the word

00:00:28.471 --> 00:00:33.124
name can indicate any object whatsoever. There is

00:00:33.124 --> 00:00:36.178
no constraint, a name is name is a name. Well if it

00:00:36.178 --> 00:00:40.729
quacks like a duck and walks like a duck, it’s a duck.

00:00:40.729 --> 00:00:44.425
Turns out – it was discovered a few years later that

00:00:44.425 --> 00:00:48.749
there is actually a bird, which while it does like – is

00:00:48.749 --> 00:00:51.754
morphologically indistinguishable from a duck but its

00:00:51.754 --> 00:00:55.938
DNA analysis proved it’s a goose. So well, but the

00:00:55.938 --> 00:01:00.029
point is that if you were a chef and needed to decide

00:01:00.029 --> 00:01:02.063
how to cook it you'd probably want to use duck

00:01:02.063 --> 00:01:04.596
recipes because it doesn’t have the amount of fat of

00:01:04.596 --> 00:01:07.290
the goose so they don't really care about the DNA.

00:01:07.290 --> 00:01:12.412
So, instead of checking the type of an object, the

00:01:12.412 --> 00:01:17.736
concept was just make sure it has the methods with

00:01:17.736 --> 00:01:20.295
the signatures that you need, which you can do

00:01:20.295 --> 00:01:24.429
simply by trying and that leaves us to being easier to

00:01:24.429 --> 00:01:28.148
ask for giving some permission, you try literally

00:01:28.148 --> 00:01:32.004
within a try statement and if the signature is wrong,

00:01:32.004 --> 00:01:35.414
or the name of the method is wrong, you get a

00:01:35.414 --> 00:01:39.601
attribute error type error and catch it in an except clause and

00:01:39.601 --> 00:01:43.751
either propagate the error or handle it appropriately.

00:01:43.751 --> 00:01:49.383
Now, with the introduction of abstract-based classes,

00:01:49.383 --> 00:01:53.945
the type becomes useful because it’s not anymore a

00:01:53.945 --> 00:01:57.636
type in the sense of an implementation. It’s a type in

00:01:57.636 --> 00:02:03.775
the sense of an abstraction. So, for example, there

00:02:03.775 --> 00:02:07.897
is a numbers abstract base class and if you want to

00:02:07.897 --> 00:02:13.173
verify that your argument is a number, actually

00:02:13.173 --> 00:02:17.998
asking if it is an instance of number, it doesn’t

00:02:17.998 --> 00:02:22.032
constraint at all the implementation, obviously, internally the

00:02:22.032 --> 00:02:25.742
implementation of unbounded precision integer

00:02:25.742 --> 00:02:28.934
versus a 32-bit float is going to be drastically

00:02:28.934 --> 00:02:31.976
different, but they are both numbers, meaning they

00:02:31.976 --> 00:02:34.870
both have greater than, less than, plus, minus,

00:02:34.870 --> 00:02:40.052
times, and so on, so that kind of type check is now

00:02:40.052 --> 00:02:44.275
respectable in Python. Not anything concrete but

00:02:44.275 --> 00:02:51.494
checked for the abstraction that’s – it’s duck-typed

00:02:51.494 --> 00:02:55.258
constraint, if you will. If it is a number then you’re

00:02:55.258 --> 00:02:59.454
guaranteed of all a set of methods, operators and

00:02:59.454 --> 00:03:02.693
signatures that you don’t have to check separately,

00:03:02.693 --> 00:03:06.693
so look at it as a bundle of search operations.

