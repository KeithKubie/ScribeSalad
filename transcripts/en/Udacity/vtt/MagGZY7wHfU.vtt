WEBVTT
Kind: captions
Language: en

00:00:00.196 --> 00:00:02.828
So, breaktime is over; now, you know about "Break."

00:00:02.828 --> 00:00:04.261
You know about "while" loops;

00:00:04.261 --> 00:00:06.810
you know about "if" to make decisions;

00:00:06.810 --> 00:00:08.145
you know everything you need

00:00:08.145 --> 00:00:10.712
to finish the goal of today's unit,

00:00:10.712 --> 00:00:14.262
which is to write the code for extracting all of the URLs

00:00:14.262 --> 00:00:15.412
from a web page.

00:00:15.412 --> 00:00:18.562
First, let's remember what we were doing before:

00:00:18.562 --> 00:00:20.863
we had the code that kept repeating

00:00:20.863 --> 00:00:22.846
to get one link after another.

00:00:22.846 --> 00:00:26.562
So, we had code like this: we had finding the "start_link"--

00:00:26.562 --> 00:00:29.278
and we assumed, before entering this code,

00:00:29.278 --> 00:00:32.362
that "page" has the contents of some web page.

00:00:32.362 --> 00:00:35.611
We would search for the start of a link;

00:00:35.611 --> 00:00:37.929
then we would find the "start_quote,"

00:00:37.929 --> 00:00:40.028
again using "find,"

00:00:40.028 --> 00:00:42.829
but this time passing in the start of the tag

00:00:42.829 --> 00:00:45.111
and searching for the double quote.

00:00:45.111 --> 00:00:47.828
Then, we would find the "end_quote."

00:00:47.828 --> 00:00:52.862
And then we would extract the URL using the string selection--

00:00:52.862 --> 00:00:54.611
selecting from "page,"

00:00:54.611 --> 00:01:01.245
from the "start_quote" to the "end_quote."

00:01:01.245 --> 00:01:04.028
Then, we would print out the URL,

00:01:04.028 --> 00:01:08.211
and this was what we needed to do for one URL.

00:01:08.211 --> 00:01:11.729
We would continue by advancing the "page"

00:01:11.729 --> 00:01:14.512
to go from where we found the "end_quote" to the end;

00:01:14.512 --> 00:01:19.146
and then we would do all the same thing again to find the next URL.

00:01:19.146 --> 00:01:22.362
And we'd keep doing this code, over and over again,

00:01:22.362 --> 00:01:25.412
finding as many URLs as there were on the page.

00:01:25.412 --> 00:01:29.028
So, here's the code, shrunken down so we have some more space.

00:01:29.028 --> 00:01:33.761
What we want to do is extract into a procedure,

00:01:33.761 --> 00:01:36.996
this part [indicating the first four lines after "page" is defined];

00:01:36.996 --> 00:01:39.011
and then we want to make it so we can keep going.

00:01:39.011 --> 00:01:41.562
We've seen "while" loops give us a way to keep going;

00:01:41.562 --> 00:01:45.429
so, we'll end up writing a "while" loop that keeps looking for links

00:01:45.429 --> 00:01:47.029
till we reach the end of the page.

00:01:47.029 --> 00:01:48.679
So, the first thing we're going to talk about is

00:01:48.679 --> 00:01:50.330
how we extracted this procedure,

00:01:50.330 --> 00:01:52.496
and we're going to need to make a few changes to it,

00:01:52.496 --> 00:01:54.261
to make it work well in our "while" loop.

00:01:54.261 --> 00:01:57.195
We defined a procedure, "get_next_target"--

00:01:57.195 --> 00:01:59.445
that takes the page as an input--

00:01:59.445 --> 00:02:03.145
and essentially had exactly the code we have here--

00:02:03.145 --> 00:02:07.445
except for, at the end, it would return both the URL

00:02:07.445 --> 00:02:08.846
and the value of "end_quote."

00:02:16.046 --> 00:02:17.895
And we had a quiz earlier

00:02:17.895 --> 00:02:21.862
where you determined that what "get_next_target" should do

00:02:21.862 --> 00:02:26.212
is return both the URL and the "end_quote"--

00:02:26.212 --> 00:02:29.962
that is the position where the end of the quote was found.

00:02:29.962 --> 00:02:32.630
So, we needed this procedure to return two values

00:02:32.630 --> 00:02:35.761
because we need to know both the URL, as a string,

00:02:35.761 --> 00:02:38.495
and where to continue looking for the next target.

00:02:38.495 --> 00:02:41.078
We haven't yet used a procedure that reutrns two things,

00:02:41.078 --> 00:02:42.679
but it's actually quite convenient

00:02:42.679 --> 00:02:44.012
and simple to do this.

00:02:44.012 --> 00:02:45.713
We can do this by just having two values

00:02:45.713 --> 00:02:47.496
on the left side of an assignment statement

00:02:47.496 --> 00:02:49.911
This works in general; so we can do--

00:02:49.911 --> 00:02:52.464
instead of our simple assignment rule,

00:02:52.464 --> 00:02:58.778
where we had a name, followed by an equal,

00:02:58.778 --> 00:03:01.846
followed by an expression,

00:03:01.846 --> 00:03:05.047
and that would assign the value of the expression to "name"--

00:03:05.047 --> 00:03:08.530
we can have multiple names on the left side,

00:03:08.530 --> 00:03:11.129
and multiple expressions on the right side.

00:03:11.129 --> 00:03:13.029
So, we can do multiple assignment,

00:03:13.029 --> 00:03:15.429
where we have any number of names,

00:03:15.429 --> 00:03:18.262
separated by commas, an equal sign,

00:03:18.262 --> 00:03:20.446
and then any number of expressions,

00:03:20.446 --> 00:03:22.662
also separated by commas.

00:03:22.662 --> 00:03:26.078
As long as the number of names and the number of expressions match,

00:03:26.078 --> 00:03:32.561
what happens is the value of the first expression is assigned to the first name--

00:03:32.561 --> 00:03:33.196
so this name [indicating ]

00:03:33.196 --> 00:03:35.827
will now refer to whatever this value was-- [indicating ]

00:03:35.827 --> 00:03:39.161
the value of the second expression is assigned to the second name.

00:03:39.161 --> 00:03:46.528
As an example, if we had "a, b = 1, 2",

00:03:46.528 --> 00:03:50.762
this would assign to "a" the value "1,"

00:03:50.762 --> 00:03:53.529
and to "b" the value "2."

00:03:53.529 --> 00:03:57.012
In order to get the two values returned by this procedure,

00:03:57.012 --> 00:03:59.929
what we need is to have two variables on the left side

00:03:59.929 --> 00:04:01.478
and the procedure call on the right.

00:04:01.478 --> 00:04:04.679
The syntax we'll use is just the URL [url]--

00:04:04.679 --> 00:04:06.797
we'll use that as the variable to hold the URL;

00:04:06.797 --> 00:04:08.212
and "endpos"--

00:04:08.212 --> 00:04:10.896
we'll use that as the variable to hold the end position;

00:04:10.896 --> 00:04:14.429
and, then, on the right side, we have "get_next_target"

00:04:14.429 --> 00:04:15.912
passing in "page."

00:04:15.912 --> 00:04:19.744
Since this returns two values, it's like listing two expressions:

00:04:19.744 --> 00:04:22.330
the first value returned will be assigned to "url,"

00:04:22.330 --> 00:04:25.396
the second value returned will be assigned to "endpos."

00:04:25.396 --> 00:04:28.329
Being able to have multiple variables

00:04:28.329 --> 00:04:30.447
on the left side of an assignment is very useful.

00:04:30.447 --> 00:04:33.129
Let's have a quiz to see an example of "why."

