WEBVTT
Kind: captions
Language: en

00:00:00.110 --> 00:00:05.290
So we look at the evolution of the routing table of this source using this coral

00:00:05.290 --> 00:00:09.190
approach to key-based routing. Where in every step,

00:00:09.190 --> 00:00:11.960
we are going the half distance toward the desired

00:00:11.960 --> 00:00:16.000
destination. Now reducing the distance by exactly half,

00:00:16.000 --> 00:00:18.060
may not always be possible because I may

00:00:18.060 --> 00:00:20.490
not have a way to reach that particular

00:00:20.490 --> 00:00:25.120
node. So it is approximately we reducing the distance

00:00:25.120 --> 00:00:27.920
by half, so let's run through this example

00:00:27.920 --> 00:00:31.050
to illustrate, how the there key based routers works?

00:00:31.050 --> 00:00:33.550
So the XOR distance between the source and the

00:00:33.550 --> 00:00:36.800
destination is is 10, so target for my first

00:00:36.800 --> 00:00:41.130
half is going to be,to a node that is

00:00:41.130 --> 00:00:44.620
five distant from the desired destination. The node that

00:00:44.620 --> 00:00:47.390
is five distant from the desired destination is node

00:00:47.390 --> 00:00:50.350
number one because the XOR of one and four

00:00:50.350 --> 00:00:52.990
is five. So this is my target that

00:00:52.990 --> 00:00:56.420
is half the distance to my desired destination.

00:00:56.420 --> 00:01:00.080
But unfortunately I don't have a direct way.

00:01:00.080 --> 00:01:03.120
Of reaching one because I don't have that entry

00:01:03.120 --> 00:01:05.980
in my routing table and therefore, I'm going

00:01:05.980 --> 00:01:08.700
to go to a node that is approximately half

00:01:08.700 --> 00:01:11.480
the distance and I could have gone to

00:01:11.480 --> 00:01:15.610
either two or zero, close to the desired half

00:01:15.610 --> 00:01:18.370
the distance metric, but to make forward progress

00:01:18.370 --> 00:01:20.770
towards the desired destination, I'll go to this

00:01:20.770 --> 00:01:24.960
guy who is Four distant from the desired

00:01:24.960 --> 00:01:30.260
destination. So I make a iiiicall to this node

00:01:30.260 --> 00:01:33.650
because I can not reach him. I go to him, and I'm going to ask him.

00:01:33.650 --> 00:01:36.960
Hey I am looking for someone who is

00:01:36.960 --> 00:01:40.550
two distant from my desired destination which is four.

00:01:40.550 --> 00:01:46.920
And when I send my request over to him He responds to me and says, look I have

00:01:46.920 --> 00:01:53.920
information on three nodes that are not exactly too distant but close enough,

00:01:53.920 --> 00:01:59.930
four, five and seven are the nodes that I have. Who are close enough to the

00:01:59.930 --> 00:02:02.540
two distant neighbor that you're looking for. The

00:02:02.540 --> 00:02:05.700
two distant neighbor is this guy. But even

00:02:05.700 --> 00:02:07.750
this node that I'm reaching that is four

00:02:07.750 --> 00:02:11.960
distant from my desired destination, he doesn't know

00:02:11.960 --> 00:02:15.730
anyone that is two distant from the destination,

00:02:15.730 --> 00:02:16.840
and so he is going to respond to

00:02:16.840 --> 00:02:19.390
me and say. I don't have exactly what

00:02:19.390 --> 00:02:22.930
you're looking for, but I have information about

00:02:22.930 --> 00:02:27.310
nodes four, five, and seven that are close

00:02:27.310 --> 00:02:30.920
enough to who you're looking for. That's the information

00:02:30.920 --> 00:02:36.100
that I get back. So when i get the response from this node, what I'm getting

00:02:36.100 --> 00:02:39.120
back is information on how to reach nodes

00:02:39.120 --> 00:02:42.240
number four, five, and seven. So I'm now going

00:02:42.240 --> 00:02:49.280
to populate my routing table to evolve it to this new state where it shows that

00:02:49.280 --> 00:02:52.630
in addition to what I started with originally,

00:02:52.630 --> 00:02:56.520
I have now new information about how to reach

00:02:56.520 --> 00:03:00.560
node number four Node number five, which I

00:03:00.560 --> 00:03:03.340
already had, and node number seven, which is

00:03:03.340 --> 00:03:07.900
the new information I got. So you can see that from this, I evolved to this

00:03:07.900 --> 00:03:16.490
by adding two more reachable entries in my routing table, namely nodes four and

00:03:16.490 --> 00:03:21.860
seven. So what do I want to do next? Well, the next thing that I want to do is,

00:03:21.860 --> 00:03:25.640
I want to go to someone who's too distant

00:03:25.640 --> 00:03:30.250
from the desired destination because I reduced the distance

00:03:30.250 --> 00:03:32.420
by half, and now I want to reduce it even

00:03:32.420 --> 00:03:35.120
further by half. That means I want to get

00:03:35.120 --> 00:03:38.760
to a node that is too distant from

00:03:38.760 --> 00:03:41.620
the desired destination, that is this guy right here.

00:03:41.620 --> 00:03:47.060
But I don't have a way of reaching him. So I'm going to go to a node that is

00:03:47.060 --> 00:03:50.180
close enough to the desired target. The target is

00:03:50.180 --> 00:03:53.880
too distant from. The desired destination. I don't have

00:03:53.880 --> 00:03:55.990
an entry for him. I could either go to

00:03:55.990 --> 00:03:59.580
the guy that is three distant from the desired destinatnion,

00:03:59.580 --> 00:04:02.490
or that is one distant from the desired destination.

00:04:02.490 --> 00:04:05.580
Obiviously I want to go closer to the destination so I'm

00:04:05.580 --> 00:04:08.460
going to go to this guy. Normally if I went

00:04:08.460 --> 00:04:12.750
to the guy who is Too distant from the destination

00:04:12.750 --> 00:04:15.340
I would have asked him for. I'm looking for

00:04:15.340 --> 00:04:19.130
someone who is one distant from the desired destination, but

00:04:19.130 --> 00:04:22.160
in this case, it turns out that I've already

00:04:22.160 --> 00:04:25.640
reached the guy that is one distant, because I did

00:04:25.640 --> 00:04:28.020
not have an entry for the guy who is

00:04:28.020 --> 00:04:31.300
two distant from the desired destination. So this guy is

00:04:31.300 --> 00:04:33.870
going to get my request that says I'm looking for

00:04:33.870 --> 00:04:38.320
somebody who is one distant from the desired destination and

00:04:38.320 --> 00:04:42.020
he looks at his [UNKNOWN] table and says,

00:04:42.020 --> 00:04:44.260
these are the nodes that I know, satisfy the

00:04:44.260 --> 00:04:47.010
criteria that you're looking for, 4, ,5, and 7.

00:04:47.010 --> 00:04:50.320
That's what I get back. I know that one

00:04:50.320 --> 00:04:52.860
thing is happening here, and that is - After

00:04:52.860 --> 00:04:57.120
my first hop, I got back node IDs for

00:04:57.120 --> 00:05:00.790
four, five, and seven, which are the response for

00:05:00.790 --> 00:05:03.460
my requests saying I'm looking for somebody who's too

00:05:03.460 --> 00:05:06.000
distant from the desired destination. Because it

00:05:06.000 --> 00:05:09.030
gave approximately the nodes that are having

00:05:09.030 --> 00:05:11.790
the characteristic of being too distant from

00:05:11.790 --> 00:05:14.810
the desired destination, including. The node number

00:05:14.810 --> 00:05:21.950
four itself. So my table evolved at this step with a direct way

00:05:21.950 --> 00:05:28.130
of reaching node number four as well. But notice that I'm not being greedy here.

00:05:28.130 --> 00:05:31.300
Because in the second step, I want to reduce

00:05:31.300 --> 00:05:34.070
my distance only by half from the first step, and

00:05:34.070 --> 00:05:36.470
that is. I want to go to somebody who's too

00:05:36.470 --> 00:05:41.140
distant from the design destination. That's what I did. And

00:05:41.140 --> 00:05:43.430
I got back this response. And when I get

00:05:43.430 --> 00:05:46.720
back the response, I'm going to populate my table again. But

00:05:46.720 --> 00:05:49.760
in turns out, I did not get any new information

00:05:49.760 --> 00:05:53.670
at this step because I only have the information about

00:05:53.670 --> 00:06:00.180
four, five and seven. At the end of my first RPC call as well. Now I have

00:06:00.180 --> 00:06:04.000
a way of reading the [INAUDIBLE] and in my

00:06:04.000 --> 00:06:06.730
conscious I can feel good that I'm not being

00:06:06.730 --> 00:06:13.530
greedy I can now the target is zero and now I can make the call directly To the

00:06:13.530 --> 00:06:16.050
desired destination and get back the response that I

00:06:16.050 --> 00:06:19.225
want. So you can see that in this coral's

00:06:19.225 --> 00:06:24.350
key-based routing, using this idea of reducing

00:06:24.350 --> 00:06:28.730
my distance to my desired destination by half

00:06:28.730 --> 00:06:34.010
at every harp. What it results in is the fact that the latency that I am

00:06:34.010 --> 00:06:36.520
going to experience in order to reach

00:06:36.520 --> 00:06:39.420
my desired destination is increased, because I have

00:06:39.420 --> 00:06:44.270
to take more number of hops in order to get to the desired destination. Even if

00:06:44.270 --> 00:06:49.800
I have a direct way of reaching my desired destination, I am not doing that.

00:06:49.800 --> 00:06:55.480
I am actually reducing my distance by half every time. In order to get to my

00:06:55.480 --> 00:06:58.850
desired destination and the reason is I'm

00:06:58.850 --> 00:07:02.620
placing common good more important than my own

00:07:02.620 --> 00:07:06.050
latency. I'm avoiding the tree saturation that can

00:07:06.050 --> 00:07:09.710
occur at the destination if everybody is greedy.

00:07:09.710 --> 00:07:12.910
That comes at the cost of increased latency But

00:07:12.910 --> 00:07:16.550
that's okay. What we are shooting for is common good.

