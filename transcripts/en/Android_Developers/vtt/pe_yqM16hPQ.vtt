WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.513
[JET ROARING]

00:00:02.513 --> 00:00:04.930
LYLA FUJIWARA: Your app won't
always be in the foreground.

00:00:04.930 --> 00:00:07.330
But you still need to do
important background work

00:00:07.330 --> 00:00:10.070
like downloading updates and
syncing with your server.

00:00:10.070 --> 00:00:11.470
Now, there are
many existing APIs

00:00:11.470 --> 00:00:14.200
for this, each with their
own particular use cases.

00:00:14.200 --> 00:00:16.630
Unfortunately, when these
APIs are used incorrectly,

00:00:16.630 --> 00:00:18.250
we see this happen.

00:00:18.250 --> 00:00:20.140
To save power for
users, Android has

00:00:20.140 --> 00:00:23.290
introduced many battery-saving
features in recent releases.

00:00:23.290 --> 00:00:24.850
These features
manage and balance

00:00:24.850 --> 00:00:26.830
the power usage of apps.

00:00:26.830 --> 00:00:29.410
As a developer, you need to
work with these battery-saving

00:00:29.410 --> 00:00:30.827
features to ensure
your background

00:00:30.827 --> 00:00:32.770
tasks run across API levels.

00:00:32.770 --> 00:00:34.070
This adds code complexity.

00:00:34.070 --> 00:00:35.950
But if you don't
do this properly,

00:00:35.950 --> 00:00:39.190
you risk your background work
not running for all users.

00:00:39.190 --> 00:00:41.920
This is where the
WorkManager library comes in.

00:00:41.920 --> 00:00:45.010
WorkManager provides a unified
solution for background work,

00:00:45.010 --> 00:00:47.980
taking Android's power-saving
features and the user's API

00:00:47.980 --> 00:00:49.450
level into account.

00:00:49.450 --> 00:00:52.240
It's backwards compatible
to API level 14, part

00:00:52.240 --> 00:00:55.120
of Android Jetpack, and it runs
with or without Google Play

00:00:55.120 --> 00:00:56.117
services.

00:00:56.117 --> 00:00:58.450
These features and more make
it the recommended solution

00:00:58.450 --> 00:01:01.090
for most background
work on Android.

00:01:01.090 --> 00:01:02.680
There are two key
attributes that

00:01:02.680 --> 00:01:04.870
make a task suitable
for WorkManager--

00:01:04.870 --> 00:01:06.490
first, that the
task is deferrable,

00:01:06.490 --> 00:01:09.010
and second, that the task
needs to be guaranteed to run.

00:01:09.010 --> 00:01:11.950
Deferrable work is any task
which is still useful even

00:01:11.950 --> 00:01:13.510
if it's not run immediately.

00:01:13.510 --> 00:01:15.550
So sending analytic
data to your server

00:01:15.550 --> 00:01:17.020
is totally deferrable work.

00:01:17.020 --> 00:01:19.912
But sending an instant
message is not deferrable.

00:01:19.912 --> 00:01:21.370
Guaranteed work
means that the task

00:01:21.370 --> 00:01:23.560
will run even if the
app process is killed

00:01:23.560 --> 00:01:25.030
or the device restarts.

00:01:25.030 --> 00:01:26.680
So a great use case
for WorkManager

00:01:26.680 --> 00:01:28.780
would be backing up
pictures to a server.

00:01:28.780 --> 00:01:30.850
This work can be deferred,
but it should also

00:01:30.850 --> 00:01:32.530
be guaranteed to run.

00:01:32.530 --> 00:01:34.450
WorkManager can be
paired with other APIs,

00:01:34.450 --> 00:01:37.203
like Firebase Cloud Messaging,
to trigger background work.

00:01:37.203 --> 00:01:38.620
So for example,
when there is data

00:01:38.620 --> 00:01:40.240
ready to sync on
your server, you

00:01:40.240 --> 00:01:42.640
can use an FCM message
to notify your app

00:01:42.640 --> 00:01:45.580
and then do the actual
syncing with WorkManager.

00:01:45.580 --> 00:01:47.890
While WorkManager is
powerful, background work

00:01:47.890 --> 00:01:49.585
isn't a one-size-fits-all
approach.

00:01:49.585 --> 00:01:51.460
So for example, while
I've been talking a lot

00:01:51.460 --> 00:01:53.500
about background work,
what I don't mean

00:01:53.500 --> 00:01:55.030
is background threading.

00:01:55.030 --> 00:01:57.370
WorkManager works
in conjunction with,

00:01:57.370 --> 00:02:00.820
but is not a replacement for,
Kotlin Coroutines, threadpools,

00:02:00.820 --> 00:02:02.620
or libraries like RxJava.

00:02:02.620 --> 00:02:04.900
WorkManager is also not
designed to trigger work

00:02:04.900 --> 00:02:06.280
at an exact time.

00:02:06.280 --> 00:02:08.919
For that, you're going to need
to use an API like AlarmManager

00:02:08.919 --> 00:02:11.830
or start a foreground service
if your users expect your tasks

00:02:11.830 --> 00:02:13.390
to happen immediately.

00:02:13.390 --> 00:02:16.060
For a complete view of
modern background execution,

00:02:16.060 --> 00:02:18.310
check out this blog post
on the "Android Developer"

00:02:18.310 --> 00:02:20.650
blog which I have linked below.

00:02:20.650 --> 00:02:22.900
Now, let me show you how
to actually create and do

00:02:22.900 --> 00:02:23.950
some work.

00:02:23.950 --> 00:02:26.860
Let's say that I want to upload
a photo using WorkManager.

00:02:26.860 --> 00:02:29.530
First, you define what your
task does using a worker,

00:02:29.530 --> 00:02:30.640
like this one.

00:02:30.640 --> 00:02:33.310
All the code goes into
the doWork method.

00:02:33.310 --> 00:02:35.110
Then you make a request
to do this work,

00:02:35.110 --> 00:02:37.180
using a class
called WorkRequest.

00:02:37.180 --> 00:02:39.460
As part of the WorkRequest,
you could add constraints,

00:02:39.460 --> 00:02:42.040
specify the input, and
choose to run the work once

00:02:42.040 --> 00:02:43.330
or periodically.

00:02:43.330 --> 00:02:45.100
The WorkRequest is
basically a class

00:02:45.100 --> 00:02:48.400
for configuring when and
how your task will be run.

00:02:48.400 --> 00:02:50.120
Since this is
non-repeating work,

00:02:50.120 --> 00:02:52.810
I'm going to go ahead and
use a OneTimeWorkRequest.

00:02:52.810 --> 00:02:55.000
I've added a constraint
here that it should only

00:02:55.000 --> 00:02:57.710
do this upload when
there's actually network.

00:02:57.710 --> 00:03:00.790
Finally, this passes in the
URI of the photo as input data,

00:03:00.790 --> 00:03:03.242
using WorkManager's Data Object.

00:03:03.242 --> 00:03:05.200
Once you have a WorkRequest,
you can enqueue it

00:03:05.200 --> 00:03:07.660
by calling WorkManager.enqueue.

00:03:07.660 --> 00:03:08.908
And well, that's it.

00:03:08.908 --> 00:03:10.450
At this point, I
know that this photo

00:03:10.450 --> 00:03:13.000
will be uploaded at some point
in the future when the network

00:03:13.000 --> 00:03:15.310
constraint is met, even
if the app is closed

00:03:15.310 --> 00:03:17.018
or the phone restarts.

00:03:17.018 --> 00:03:19.060
Now, let's say that I want
the option of updating

00:03:19.060 --> 00:03:21.250
the UI when my work finishes.

00:03:21.250 --> 00:03:24.580
I can use the method
getWorkInfoByIdLiveData

00:03:24.580 --> 00:03:26.860
to get a WorkInfo LiveData.

00:03:26.860 --> 00:03:29.170
The fact that the WorkInfo
is wrapped by LiveData

00:03:29.170 --> 00:03:30.610
makes it observable.

00:03:30.610 --> 00:03:32.170
If you haven't used
LiveData before,

00:03:32.170 --> 00:03:34.810
you can read about it in the
documentation linked below.

00:03:34.810 --> 00:03:36.430
WorkInfo has all
of the information

00:03:36.430 --> 00:03:38.510
about the current
state of my work,

00:03:38.510 --> 00:03:41.740
including the status of the
work and the optional output.

00:03:41.740 --> 00:03:44.270
So back in doWork, I
could return an output

00:03:44.270 --> 00:03:46.300
and then add this
LiveData observation code

00:03:46.300 --> 00:03:49.540
to my UI to display the
output when available.

00:03:49.540 --> 00:03:52.450
So what's going on behind the
scenes when you enqueue work?

00:03:52.450 --> 00:03:54.340
As mentioned,
WorkManager is backwards

00:03:54.340 --> 00:03:56.890
compatible to API
level 14 and runs

00:03:56.890 --> 00:03:58.570
without Google Play services.

00:03:58.570 --> 00:04:01.450
To ensure this, WorkManager
chooses between JobScheduler

00:04:01.450 --> 00:04:03.550
and a combination of
AlarmManager and broadcast

00:04:03.550 --> 00:04:05.290
receivers when running.

00:04:05.290 --> 00:04:07.270
To guarantee that the
work will keep running,

00:04:07.270 --> 00:04:09.220
all of that information
about enqueued work

00:04:09.220 --> 00:04:11.860
is kept in a
WorkManager-managed database

00:04:11.860 --> 00:04:14.470
so that it can be resumed
if it's ever stopped.

00:04:14.470 --> 00:04:17.440
Now, by default, Worker does
work off of the main thread,

00:04:17.440 --> 00:04:19.557
using an executor
behind the scenes.

00:04:19.557 --> 00:04:21.640
If you want to handle
threading in some other way,

00:04:21.640 --> 00:04:23.710
there's RxWorker and
CoroutineWorker, which

00:04:23.710 --> 00:04:25.300
are available out of the box.

00:04:25.300 --> 00:04:28.150
Or for even more control, you
can make your own worker class

00:04:28.150 --> 00:04:30.310
by extending
ListenableWorker and defining

00:04:30.310 --> 00:04:32.140
your exact threading strategy.

00:04:32.140 --> 00:04:34.570
One area where
WorkManager truly shines

00:04:34.570 --> 00:04:37.270
is when you create
chains of dependent work.

00:04:37.270 --> 00:04:39.880
Let's say that I want to add
a filter to multiple pictures,

00:04:39.880 --> 00:04:41.260
compress those
pictures together,

00:04:41.260 --> 00:04:42.760
and then batch
upload the compressed

00:04:42.760 --> 00:04:44.533
file to share with the world.

00:04:44.533 --> 00:04:46.450
Assuming you created all
of your work requests

00:04:46.450 --> 00:04:48.040
with the appropriate
constraints,

00:04:48.040 --> 00:04:49.998
the code to create this
dependent chain of work

00:04:49.998 --> 00:04:51.250
looks like this.

00:04:51.250 --> 00:04:53.110
I enqueued the
WorkRequests in the order

00:04:53.110 --> 00:04:54.890
that I want them to run.

00:04:54.890 --> 00:04:57.100
I've also enqueued these
filter image WorkRequests

00:04:57.100 --> 00:05:00.340
as a list, which causes
them to run in parallel.

00:05:00.340 --> 00:05:02.770
WorkManager will take care
of passing through the output

00:05:02.770 --> 00:05:04.400
and input in a chain.

00:05:04.400 --> 00:05:07.240
So here, the output of
these filter WorkRequests

00:05:07.240 --> 00:05:10.360
will be passed as the input
of the compressed WorkRequest.

00:05:10.360 --> 00:05:13.060
There is a ton more that you
could do with WorkManager.

00:05:13.060 --> 00:05:15.070
You can specify things
like periodic work

00:05:15.070 --> 00:05:17.110
for work that needs
to run repeatedly,

00:05:17.110 --> 00:05:20.290
unique work, tagged work so
that you can query or cancel

00:05:20.290 --> 00:05:23.950
related work, and backoff
policies for retrying work.

00:05:23.950 --> 00:05:26.150
For even more features,
tips, and tricks,

00:05:26.150 --> 00:05:29.420
check out the "Working with
Work Manager" talk linked below.

00:05:29.420 --> 00:05:31.570
So to summarize, by
using WorkManager,

00:05:31.570 --> 00:05:34.450
you can enqueue one-off
and periodic tasks

00:05:34.450 --> 00:05:37.840
with constraints, chain
tasks with input and output,

00:05:37.840 --> 00:05:41.320
and run these chained tasks
in parallel or sequentially,

00:05:41.320 --> 00:05:44.320
display the state of your
tasks using observation,

00:05:44.320 --> 00:05:47.140
and customize WorkManager's
threading strategy.

00:05:47.140 --> 00:05:49.270
WorkManager does all
of this while handling

00:05:49.270 --> 00:05:51.910
complex compatibility
issues, following

00:05:51.910 --> 00:05:54.730
system health best practices,
and guaranteeing your work

00:05:54.730 --> 00:05:56.030
will run.

00:05:56.030 --> 00:05:58.030
If you're ready to get
working with WorkManager,

00:05:58.030 --> 00:06:01.360
I've linked tons of helpful
documentation, code labs,

00:06:01.360 --> 00:06:03.760
presentations, and
blog posts below.

00:06:03.760 --> 00:06:04.930
Happy coding.

00:06:04.930 --> 00:06:07.980
[JET ROARING]

