WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.000
I want to make the point there are different types of tools that you can use in your tool box.

00:00:04.000 --> 00:00:07.000
We just saw the count calls.

00:00:07.000 --> 00:00:11.000
I think I would classify that as a debugging tool,

00:00:11.000 --> 00:00:15.000
and we saw a memo, and I'll classify that as a performance tool.

00:00:15.000 --> 00:00:23.000
Earlier, we saw n_ary, another decorator, which I can classify as an expressivenes tool.

00:00:23.000 --> 00:00:26.000
It gives you more power to say more about your language.

00:00:26.000 --> 00:00:29.000
This gives you no more power but makes it faster.

00:00:29.000 --> 00:00:32.000
This isn't going to end up in your final program,

00:00:32.000 --> 00:00:34.000
but helps you develop the program faster.

00:00:34.000 --> 00:00:38.000
I want to add another tool here in debugging called trace,

00:00:38.000 --> 00:00:41.000
which can help you see the execution of your program.

00:00:41.000 --> 00:00:45.000
So I'm going to define a decorator trace, which when we apply to fib,

00:00:45.000 --> 00:00:51.000
gives us this kind of output. When I ask here for what's the 6th Fibonacci number?

00:00:51.000 --> 00:00:56.000
It says for each recursive call, we have an indented call with an arrow going to the right

00:00:56.000 --> 00:00:58.000
saying we're making a call,

00:00:58.000 --> 00:01:00.000
and for each return, we have an arrow going to the left.

00:01:00.000 --> 00:01:06.000
When you ask for fib of 6, you keep on going down the list until we get near the end.

00:01:06.000 --> 00:01:11.000
When we ask for fib of 2, then that's defined in terms of 1 and 0,

00:01:11.000 --> 00:01:15.000
and they both return 1, so that means fib of 2 returns 2 and so on.

00:01:15.000 --> 00:01:21.000
We can see the shape of the trace here as we go.

00:01:21.000 --> 00:01:25.000
It's coming to the right and then returning back and coming to the right some more

00:01:25.000 --> 00:01:26.000
and returning back.

00:01:26.000 --> 00:01:33.000
The pattern takes a long time to reveal itself and would take even longer for larger arguments

00:01:33.000 --> 00:01:34.000
other than 6.

00:01:34.000 --> 00:01:37.000
But it gives you some idea for the flow of control of the program.

00:01:37.000 --> 00:01:41.000
So that's a useful tool have, and here's an implementation.

00:01:41.000 --> 00:01:43.000
It follows the same pattern as usual.

00:01:43.000 --> 00:01:45.000
Decorator takes a function as input.

00:01:45.000 --> 00:01:49.000
We're going to create another function, and this is what it's going to look like.

00:01:49.000 --> 00:01:52.000
We're going to figure out what it is that we're going to print.

00:01:52.000 --> 00:01:58.000
We're going to keep a variable, which we keep as an attribute of the trace function itself

00:01:58.000 --> 00:01:59.000
called the level.

00:01:59.000 --> 00:02:03.000
We'll increment that as we come in, print out some results here.

00:02:03.000 --> 00:02:09.000
We initialize the trace level to 0--the indentation level--and then finally, we return the function

00:02:09.000 --> 00:02:10.000
that we just built up.

00:02:10.000 --> 00:02:15.000
I've left out some bits here, and I want you to fill them in to make this function work properly

00:02:15.000 --> 09:59:59.000
to show the trace that I just showed.

