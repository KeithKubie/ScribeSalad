WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.000
So let's try a few examples. So we'll create a dictionary.

00:00:04.000 --> 00:00:08.000
We're using the squiggly brackets. On some keyboards

00:00:08.000 --> 00:00:12.000
that's the shift on the square bracket key. It may be somewhere else on your keyboard.

00:00:12.000 --> 00:00:16.000
And we're going to use the squiggly bracket to list our elements in the dictionary.

00:00:16.000 --> 00:00:20.000
So each element in the dictionary is a key value pair, and the entries in the dictionary

00:00:20.000 --> 00:00:25.000
will be the elements and their atomic numbers. So we have this string hydrogen

00:00:25.000 --> 00:00:29.000
with its atomic number of 1, and we have carbon with number 6.

00:00:29.000 --> 00:00:34.000
So we've created the dictionary, and what we see when we print it out

00:00:34.000 --> 00:00:37.000
is the elements in the dictionary. Now one thing you might notice is

00:00:37.000 --> 00:00:41.000
they're not in the same order that we put them there. If you think about what we did

00:00:41.000 --> 00:00:46.000
with hash tables, this isn't so surprising. When we put elements in hash tables,

00:00:46.000 --> 00:00:50.000
well where they end up in the hash table depends on the key and the hash function.

00:00:50.000 --> 00:00:53.000
It's not necessarily in the order that we put them in. And with the dictionary,

00:00:53.000 --> 00:00:56.000
because it's implemented like a hash table, we see the same thing.

00:00:56.000 --> 00:01:00.000
Unlike a list where the elements are ordered, with a dictionary there is no order

00:01:00.000 --> 00:01:03.000
to the elements. So when we print it out, they might appear in a different order

00:01:03.000 --> 00:01:07.000
from the order that we put them in. We can use the indexing to look up

00:01:07.000 --> 00:01:11.000
one of the elements. So now when we look up the value associated with hydrogen,

00:01:11.000 --> 00:01:17.000
we get 1, and if we look up the value associated with carbon, we get 6.

00:01:17.000 --> 00:01:20.000
What do you think is going to happen if we look up a value that's not in the dictionary?

00:01:20.000 --> 00:01:24.000
So now we're looking up the value associated with lithium,

00:01:24.000 --> 00:01:28.000
and what we get is an error. It's called a key error--key error. It says that element

00:01:28.000 --> 00:01:32.000
is not in the dictionary. This is different from how we defined lookup for our hash table.

00:01:32.000 --> 00:01:36.000
Right, we defined our lookup to return none when the element was not there.

00:01:36.000 --> 00:01:40.000
The way the built-in dictionary type works is it gives us an error when it's not there.

00:01:40.000 --> 00:01:45.000
If we don't want to get errors like that, we can use the in to see if an element is

00:01:45.000 --> 00:01:50.000
in the dictionary. So the in behaves similarly to in did for lists.

00:01:50.000 --> 00:01:57.000
We can say lithium in elements. That will evaluate to true if the key is in the dictionary,

00:01:57.000 --> 00:02:01.000
false otherwise. So now hit evaluate, it's still false.

00:02:01.000 --> 00:02:05.000
So I said that dictionaries were mutable. So we can add new elements.

00:02:05.000 --> 00:02:10.000
And the way to add an element is just to use an assignment. So we'll add lithium

00:02:10.000 --> 00:02:16.000
giving it a value of 3. Note that it was an error when we used an element like this

00:02:16.000 --> 00:02:20.000
as a lookup when it's on the left side of an assignment. Well that's an update, so that

00:02:20.000 --> 00:02:25.000
corresponds to the hash table update where lithium is the key, and 3 is the value.

00:02:25.000 --> 00:02:30.000
We can add another element. Let's add another element. We'll add nitrogen.

00:02:30.000 --> 00:02:36.000
And now when we look up nitrogen, we get the value that we assigned to nitrogen,

00:02:36.000 --> 00:02:40.000
which is 8. It turns out that 8 is not actually the correct value. The atomic number

00:02:40.000 --> 00:02:47.000
for nitrogen should be 7. So we can modify that value using another assignment.

00:02:47.000 --> 00:02:51.000
That's again the same as our hash table update. It won't create a new key value

00:02:51.000 --> 00:02:55.000
because the key nitrogen is already there, but it will update the value,

00:02:55.000 --> 00:03:01.000
so now the value associated with nitrogen will be 7.

00:03:01.000 --> 00:03:04.000
So we can see the first print, the value is 8, the second print, the value is now 7.

