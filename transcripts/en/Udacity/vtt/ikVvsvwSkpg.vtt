WEBVTT
Kind: captions
Language: en

00:00:00.560 --> 00:00:06.000
So the upshot of address space switching is you have to really ask

00:00:06.000 --> 00:00:09.120
the question, are we switching between small

00:00:09.120 --> 00:00:12.710
protection domains or large protection domains? If

00:00:12.710 --> 00:00:16.290
you are switching between small protection domains,

00:00:16.290 --> 00:00:19.230
then by taking advantage of whatever the

00:00:19.230 --> 00:00:22.470
hardware gives you, you can make. The

00:00:22.470 --> 00:00:26.000
switching between these small protection domains efficient

00:00:26.000 --> 00:00:29.410
by careful construction of the services, on the

00:00:29.410 --> 00:00:32.549
other hand if the switch is from one

00:00:32.549 --> 00:00:35.920
large protection domain to another large protection domain.

00:00:35.920 --> 00:00:39.260
The switching cost, the explicit cost of switching

00:00:39.260 --> 00:00:41.710
from one hardware address space, to a different

00:00:41.710 --> 00:00:45.480
hardware address space Is not that significant, because

00:00:45.480 --> 00:00:48.090
the loss of locality when you go from

00:00:48.090 --> 00:00:51.740
a large protection domain to another large protection domain,

00:00:51.740 --> 00:00:54.410
both in terms of TLB misses that are

00:00:54.410 --> 00:00:57.150
going to happen, when you start executing the new

00:00:57.150 --> 00:01:01.450
large protection domain. For translations as well as the

00:01:01.450 --> 00:01:04.550
cache effects, that the fact that your cache is

00:01:04.550 --> 00:01:06.110
now going to be warm with the data

00:01:06.110 --> 00:01:09.700
and the instructions for the new protection domain. That

00:01:09.700 --> 00:01:13.830
cost is much more significant than just the switching

00:01:13.830 --> 00:01:16.830
cost going from one large protection domain to another

00:01:16.830 --> 00:01:20.870
large protection domain. So this is the way, the address-based

00:01:20.870 --> 00:01:26.750
switching myth, is debunked by the L3 microkernel, by construction.

