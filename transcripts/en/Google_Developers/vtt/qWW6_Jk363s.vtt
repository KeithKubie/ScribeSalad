WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:10.300
&gt;&gt; The name of my company is LifeAware. The
motivation for creating it was, about three

00:00:10.300 --> 00:00:15.389
years ago when the Kansas City area, we–there
was a young woman who got abducted and she

00:00:15.389 --> 00:00:21.000
had been taken and gotten killed. Her parents
had been trying to get the cellphone records

00:00:21.000 --> 00:00:25.550
from the company and to find out where she
was at. Unfortunately, they took three days

00:00:25.550 --> 00:00:29.330
to get them and by the time they did get the
records, they were able to find the body but

00:00:29.330 --> 00:00:34.240
it was too late at that point. So LifeAware
is a mobile application that is in constant

00:00:34.240 --> 00:00:39.489
communication with our backend service on
App Engine that is recording where you go

00:00:39.489 --> 00:00:45.460
with your phone. There's a very robust and
full feature set of permissions about who

00:00:45.460 --> 00:00:50.019
can you share your location and who can they
see and stuff like that. But the important

00:00:50.019 --> 00:00:55.019
thing is that information is available to
anybody. So, if you have one person in your

00:00:55.019 --> 00:00:58.929
family that has an Android phone, then they
can log in to the website and they can track

00:00:58.929 --> 00:01:03.140
that one person.
&gt;&gt; So, did you choose Android to do this App?

00:01:03.140 --> 00:01:07.770
Tell us a bit about your technical decisions
to go with that platform.

00:01:07.770 --> 00:01:11.340
&gt;&gt; Well Android is the application that we
chose to do mobile client and there's lots

00:01:11.340 --> 00:01:17.510
of decision that went into that. One of the
decisions was the one platform to rule them

00:01:17.510 --> 00:01:22.480
all kind of thing. So if you write on Android,
any Android device can do it. We were specifically–we

00:01:22.480 --> 00:01:28.190
chose App Engine on the backend to–for the
scalability. We had actually–we were the

00:01:28.190 --> 00:01:33.710
top semi-finalist for the Android developers
challenge back in 2008. When we had submitted

00:01:33.710 --> 00:01:38.610
the application for that we had the full-featured
backend system working completely in Java.

00:01:38.610 --> 00:01:42.491
As we went through the [INDISTINCT] testing
and performance testing, we realized that

00:01:42.491 --> 00:01:46.360
we had a significant problem that we couldn’t
reach the scalability issues that we needed

00:01:46.360 --> 00:01:50.530
it to running on GlassFish and MySync backend.
And it’s not that we couldn’t have done

00:01:50.530 --> 00:01:54.020
it with those technologies, it was just it
would have taken much more resources than

00:01:54.020 --> 00:01:59.640
what we have available just at the time. So
by going to App Engine, we were able to achieve

00:01:59.640 --> 00:02:03.490
a lot more scalability than what we're really
been hoping that we could achieve for.

00:02:03.490 --> 00:02:09.979
&gt;&gt; So as developers, we have been really invested
in [INDISTINCT]. And do you have any particular

00:02:09.979 --> 00:02:12.810
lessons that you remember from developing
LifeAware?

00:02:12.810 --> 00:02:15.680
&gt;&gt; For going through LifeAware on App Engines,
probably the biggest lessons that we learned

00:02:15.680 --> 00:02:22.469
was the Python language itself. We had zero
experience coding in Python. The online documentation

00:02:22.469 --> 00:02:27.329
for Python is incredible. The documentation
for App Engine is incredible. So juggling

00:02:27.329 --> 00:02:31.189
through that, coming from Java which is such
a strongly type language and then going into

00:02:31.189 --> 00:02:35.560
Python which is a type less language, that
alone posed all kinds of interesting problems.

00:02:35.560 --> 00:02:40.290
But that was our biggest challenge.
&gt;&gt; So, do you use App Engine for production,

00:02:40.290 --> 00:02:45.710
for real [INDISTINCT] for all these projects?
And if you don’t, what do you see is the

00:02:45.710 --> 00:02:48.930
biggest barriers to doing that?
&gt;&gt; We currently use application for our production

00:02:48.930 --> 00:02:53.900
assistant for App Engine for our production
system. There–I think there is a big deterrent

00:02:53.900 --> 00:02:59.769
going from a small startup companies into
big enterprise development shops. App Engine

00:02:59.769 --> 00:03:04.019
is completely designed for developers to build
products. It works really well, it has a really

00:03:04.019 --> 00:03:07.989
strong object model. You can take the objects
that are stored in the data model and you

00:03:07.989 --> 00:03:12.739
can move them between different languages
very easily. What it doesn’t have is a strong

00:03:12.739 --> 00:03:16.970
reporting story. So if you want to attract
the number of users are registered at your

00:03:16.970 --> 00:03:23.580
site from, you know, week by week that's–that
can be a very difficult thing to do in App

00:03:23.580 --> 00:03:27.590
Engine. Almost every solution that we've come
across ends up writing some type of job to

00:03:27.590 --> 00:03:31.569
pull the data out of App Engine, but in interrelation
they were all modeled to where you can actually

00:03:31.569 --> 00:03:35.790
do that kind of reporting.
&gt;&gt; So how is using the AppEngine datastore

00:03:35.790 --> 00:03:40.920
compared with [INDISTINCT] Sequel development?
&gt;&gt; AppEngine datastore and Sequel development

00:03:40.920 --> 00:03:46.170
are worlds apart. There's a bridge that you
just have to cross. We've talked to lots of

00:03:46.170 --> 00:03:51.650
people out here in Google I/O and they're
very hung up on, well, “How can I write

00:03:51.650 --> 00:03:56.280
an application if I can't write sequel statements
to create that data out,?” and until you

00:03:56.280 --> 00:04:01.269
can make that leap and put your faith in the
datastore, that if, you know, just ask the

00:04:01.269 --> 00:04:05.189
datastore what it is that you want and just
define your filters, and you might get more

00:04:05.189 --> 00:04:09.200
that you want, you might get not exactly what
you want, but it's totally doable.

00:04:09.200 --> 00:04:16.489
&gt;&gt; So, in terms of engine, how can you write
a scaleable application of it?

00:04:16.489 --> 00:04:21.760
&gt;&gt; So, like I said before, we had the Java
system that–where we had a lot of constraints.

00:04:21.760 --> 00:04:27.430
We were running somewhere around three requests
a second and somewhere around two hours, running

00:04:27.430 --> 00:04:31.941
two requests a second on our low test. We
would come into system failure. App Engine

00:04:31.941 --> 00:04:36.700
in our peak performance in LifeAware, we were
running a five request a second and it was

00:04:36.700 --> 00:04:41.691
sustained over about a month and a half. So
since then, we–you know, they examined the

00:04:41.691 --> 00:04:45.200
LifeAware in the Android platform, you know,
we've tone it down now. So we're running steadily

00:04:45.200 --> 00:04:50.760
at two requests per second and we've been
running at two requests or more for seven

00:04:50.760 --> 00:04:53.960
or eight months straight now. And that's something
we would never have been able to do in Java.

00:04:53.960 --> 00:05:00.300
&gt;&gt; So, how is that App Engine simplified your
App deployment and production meetings?

00:05:00.300 --> 00:05:05.790
&gt;&gt; So, deploying an App Engine is a complete
dream. Coming from a very structured Java

00:05:05.790 --> 00:05:12.480
build system, the compile cycle and getting
all your resources in a proper place, building

00:05:12.480 --> 00:05:16.810
up your work containers or your–all those
things, it just simply goes away with App

00:05:16.810 --> 00:05:21.420
Engine. App Engine is fundamentally integrated
into the development process. So as you go

00:05:21.420 --> 00:05:25.200
through your testing and you finally get the
code and the state that you want to do, it's

00:05:25.200 --> 00:05:28.910
just a matter of clicking a button, authenticating
to the server, and it's out there.

00:05:28.910 --> 00:05:38.900
&gt;&gt; 
So, since you're here in I/O it's been in

00:05:38.900 --> 00:05:39.900
[INDISTINCT]. Is there anything new you've
come across or people that you've met that

00:05:39.900 --> 00:05:40.900
you really--something you really feel like
you’ve imparted here?

00:05:40.900 --> 00:05:41.900
&gt;&gt; I haven’t been able attend any of your
sessions yet, but some of the cool things

00:05:41.900 --> 00:05:47.000
that I learned today at the keynote was they
have a–a sync call on the GWT stuff. So

00:05:47.000 --> 00:05:52.830
our front end is we’re into GWT on the website.
So what that means is, today, right now, if

00:05:52.830 --> 00:05:55.990
you go to LifeAware, you'll have to download
every single JavaScript file that's been compiled

00:05:55.990 --> 00:06:00.430
in GWT. So now with this new feature, we would
be able to break that out into chunks which

00:06:00.430 --> 00:06:03.470
our website has very performed already, but
now will even be that much more so.

00:06:03.470 --> 00:06:05.660
&gt;&gt; Oh, that's terrific. Well, thank you for
coming.

00:06:05.660 --> 00:06:06.210
&gt;&gt; Thank you.

