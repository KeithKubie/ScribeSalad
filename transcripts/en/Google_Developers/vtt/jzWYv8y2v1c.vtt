WEBVTT
Kind: captions
Language: en

00:00:00.620 --> 00:00:02.850
LAURENCE MORONEY: The SMS
Retriever API for Android

00:00:02.850 --> 00:00:06.030
lets you verify your user's
phone number ownership

00:00:06.030 --> 00:00:09.510
without making them deal with
typing verification codes.

00:00:09.510 --> 00:00:12.180
By using the API, your
app can automatically

00:00:12.180 --> 00:00:15.420
retrieve verification codes
without having to request

00:00:15.420 --> 00:00:17.760
full SMS reading permissions.

00:00:17.760 --> 00:00:20.940
It really takes the friction
out of handling verification.

00:00:20.940 --> 00:00:22.710
Did I type the
right phone number?

00:00:22.710 --> 00:00:25.170
Did I type the right
verification code?

00:00:25.170 --> 00:00:26.910
Do I have to give
permissions correctly?

00:00:26.910 --> 00:00:28.530
All of these kinds of things.

00:00:28.530 --> 00:00:32.705
And using the API makes for a
much better user experience.

00:00:32.705 --> 00:00:34.870
I'm Laurence Moroney,
and in this video,

00:00:34.870 --> 00:00:37.890
I'll show you how you can
use this API in your apps.

00:00:37.890 --> 00:00:39.870
Before you begin, you'll
need an Android device

00:00:39.870 --> 00:00:40.950
with a phone number.

00:00:40.950 --> 00:00:44.190
And this Android device has to
run Google Play services 10.2X

00:00:44.190 --> 00:00:45.700
or higher.

00:00:45.700 --> 00:00:48.090
OK, once you have
this, the first step

00:00:48.090 --> 00:00:50.850
is the user will
initiate SMS verification

00:00:50.850 --> 00:00:52.540
from within your app.

00:00:52.540 --> 00:00:55.470
Your app might prompt the
user to enter a phone number,

00:00:55.470 --> 00:00:58.230
or you could use the
Smart Lock hint selector.

00:00:58.230 --> 00:01:00.280
Here's the code for
the hint selector.

00:01:00.280 --> 00:01:02.190
It uses the hint
request builder,

00:01:02.190 --> 00:01:05.910
telling it that it wants to
use a phone number identifier.

00:01:05.910 --> 00:01:10.290
And then this is used to
create and start on an intent.

00:01:10.290 --> 00:01:14.160
Then in your on activity
results within the credential,

00:01:14.160 --> 00:01:16.050
you'll have the phone
number as a string,

00:01:16.050 --> 00:01:18.250
and here's the code for that.

00:01:18.250 --> 00:01:21.250
Next up, you'll be getting an
instance of the SMS retriever

00:01:21.250 --> 00:01:26.010
client object so you can start
listening for an incoming SMS.

00:01:26.010 --> 00:01:27.990
This will stay alive
for up to five minutes

00:01:27.990 --> 00:01:29.970
waiting for that
incoming message.

00:01:29.970 --> 00:01:32.280
And the message needs to
contain a unique string that

00:01:32.280 --> 00:01:34.110
identifies your app.

00:01:34.110 --> 00:01:36.030
When your server
sends the message,

00:01:36.030 --> 00:01:38.700
it will use the same string.

00:01:38.700 --> 00:01:40.240
You'll see that
step in a moment,

00:01:40.240 --> 00:01:43.410
but first, let's take a look
at how to listen for the SMS.

00:01:43.410 --> 00:01:45.010
As you can see,
it's pretty simple.

00:01:45.010 --> 00:01:46.830
You get an SMS retriever
client and then

00:01:46.830 --> 00:01:48.450
you start a task for it.

00:01:48.450 --> 00:01:50.580
The task has an unsuccess
listener, as well as

00:01:50.580 --> 00:01:51.690
an unfailure one.

00:01:51.690 --> 00:01:53.880
You'll just simply
override these.

00:01:53.880 --> 00:01:56.160
At this point, you would
send the user's phone number

00:01:56.160 --> 00:01:58.920
to your server, and that
would start its workflow

00:01:58.920 --> 00:02:03.150
for generating the message that
it will SMS to that number.

00:02:03.150 --> 00:02:04.740
The message needs
to be constructed

00:02:04.740 --> 00:02:06.540
in a very specific way.

00:02:06.540 --> 00:02:09.150
First of all, it can't
be longer than 140 bytes.

00:02:09.150 --> 00:02:12.120
And it does need to start
with a well-defined header.

00:02:12.120 --> 00:02:13.770
See the documentation
for your options

00:02:13.770 --> 00:02:16.050
on building that header here.

00:02:16.050 --> 00:02:18.390
It must also end
with an 11 character

00:02:18.390 --> 00:02:20.650
hash that identifies your app.

00:02:20.650 --> 00:02:23.050
We'll see that in a moment.

00:02:23.050 --> 00:02:25.800
The one time code can
be anything you want,

00:02:25.800 --> 00:02:27.780
as long as it's unguessable.

00:02:27.780 --> 00:02:30.180
The easiest way to do
this is to simply generate

00:02:30.180 --> 00:02:33.150
a random number or a string
comprised of random numbers

00:02:33.150 --> 00:02:34.890
and characters.

00:02:34.890 --> 00:02:36.480
The hash string
ending the message

00:02:36.480 --> 00:02:39.030
does have to be
deterministic, though.

00:02:39.030 --> 00:02:41.160
On the client,
Google Play services

00:02:41.160 --> 00:02:43.320
will use this
string to determine

00:02:43.320 --> 00:02:46.560
which active verification
message is intended for.

00:02:46.560 --> 00:02:49.140
There are explicit steps
on how you can build this,

00:02:49.140 --> 00:02:52.080
and you can find
them at this URL.

00:02:52.080 --> 00:02:56.620
Your server will then send the
message to the phone using SMS.

00:02:56.620 --> 00:02:58.200
And when the
message is received,

00:02:58.200 --> 00:03:01.680
Google Play services
broadcast an intent,

00:03:01.680 --> 00:03:04.530
which contains the
text of that message.

00:03:04.530 --> 00:03:07.020
In your app, you'll need
a broadcast receiver

00:03:07.020 --> 00:03:08.810
to receive this.

00:03:08.810 --> 00:03:11.220
Let's take a look at the
code for that receiver.

00:03:11.220 --> 00:03:12.560
And here it is.

00:03:12.560 --> 00:03:15.570
In the on receive of
the broadcast receiver,

00:03:15.570 --> 00:03:19.120
you're able to get the extras
and pull the status from there.

00:03:19.120 --> 00:03:22.200
If the status indicates that
the message was successfully

00:03:22.200 --> 00:03:26.070
received, you can then pull
the message from the extras.

00:03:26.070 --> 00:03:29.130
From here, you can parse
out the verification code

00:03:29.130 --> 00:03:32.790
and send it back to your server
to verify that it was received

00:03:32.790 --> 00:03:34.570
and thus verify your phone.

00:03:34.570 --> 00:03:35.370
And that's it.

00:03:35.370 --> 00:03:37.410
To learn more about
this API, including

00:03:37.410 --> 00:03:39.990
how to save the phone
number back to Smart Lock,

00:03:39.990 --> 00:03:42.480
check out the SMS
retriever documentation

00:03:42.480 --> 00:03:44.520
on the Google Developer site.

00:03:44.520 --> 00:03:45.990
Also check out our
YouTube channel

00:03:45.990 --> 00:03:48.120
for more great videos
about Android development.

00:03:48.120 --> 00:03:49.950
And while you're
there, don't forget

00:03:49.950 --> 00:03:51.750
to hit that subscribe button.

00:03:51.750 --> 00:03:55.100
[MUSIC PLAYING]

