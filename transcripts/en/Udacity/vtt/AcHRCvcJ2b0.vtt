WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.000
So now we really want to use the full power of our rewrite rules

00:00:03.000 --> 00:00:06.000
to help us complete the parsing chart.

00:00:06.000 --> 00:00:09.000
We've already seen 2 possible ways to do it.

00:00:09.000 --> 00:00:13.000
If the dot is right before a nonterminal,

00:00:13.000 --> 00:00:16.000
then we take the closure or predict what's going to happen,

00:00:16.000 --> 00:00:19.000
by bringing in and rewriting rules that start with a (c).

00:00:19.000 --> 00:00:21.000
If, on the other hand, the dot is right before a terminal,

00:00:21.000 --> 00:00:24.000
a token--a fixed part of the input--

00:00:24.000 --> 00:00:26.000
we shift over it.

00:00:26.000 --> 00:00:29.000
We just move our finger to the right, assuming that this new token, (c),

00:00:29.000 --> 00:00:32.000
is exactly what we see in the input.

00:00:32.000 --> 00:00:35.000
But there is a third case--a "corner" case:

00:00:35.000 --> 00:00:37.000
3 corners--that's hard to draw;

00:00:37.000 --> 00:00:40.000
actually, that's not hard to draw; something with 3 corners is a triangle--

00:00:40.000 --> 00:00:43.000
in which there's nothing after the dot.

00:00:43.000 --> 00:00:46.000
What if there's no (c) and there's no (d), and we've reached the end?

00:00:46.000 --> 00:00:48.000
We've done a lot of shifting and our finger is already

00:00:48.000 --> 00:00:50.000
as far to the right as it can go.

00:00:50.000 --> 00:00:52.000
Well, now we're going to reduce--

00:00:52.000 --> 00:00:55.000
by applying the rule: (x --&gt; a b)

00:00:55.000 --> 00:00:57.000
in reverse.

00:00:57.000 --> 00:01:01.000
For example, let's say that the input was: &lt;a b blah&gt;

00:01:01.000 --> 00:01:04.000
and we were right here--we'd seen these 2 characters--

00:01:04.000 --> 00:01:06.000
and one of the rules in our grammar was:

00:01:06.000 --> 00:01:08.000
(x --&gt; a b).

00:01:08.000 --> 00:01:11.000
I match up this (a) with this one, this (a) with this one--

00:01:11.000 --> 00:01:15.000
and I'm going to take my input and conceptually change it,

00:01:15.000 --> 00:01:18.000
removing the (a b) and replacing them with (x)

00:01:18.000 --> 00:01:21.000
as if I'm constructing the parse tree

00:01:21.000 --> 00:01:24.000
or applying the rewrite rules in reverse.

00:01:24.000 --> 00:01:27.000
We've seen before how one direction

00:01:27.000 --> 00:01:29.000
corresponds to string generation,

00:01:29.000 --> 00:01:32.000
and one direction corresponds to parsing.

00:01:32.000 --> 00:01:34.000
So once we've matched our predictions exactly,

00:01:34.000 --> 00:01:36.000
the input has corresponded to (a)

00:01:36.000 --> 00:01:38.000
and the input has corresponded to (b)

00:01:38.000 --> 00:01:40.000
and we have rewrite rule: (x --&gt; a b),

00:01:40.000 --> 00:01:44.000
we're going to apply that rewrite rule in reverse

00:01:44.000 --> 00:01:48.000
to do parsing--removing (a) and (b) from the input--conceptually--

00:01:48.000 --> 00:01:50.000
and replacing them with (x).

00:01:50.000 --> 09:59:59.000
This is called reduction.

