WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.000
So we just spent our last unit, unit 6, talking about scaling

00:00:04.000 --> 00:00:08.000
and basically 101 uses of memcache.

00:00:08.000 --> 00:00:11.000
Now, a lot of the things that we talked about in scaling, you know,

00:00:11.000 --> 00:00:19.000
adding new app servers and adding more memcaches and scaling the DB horizontally and through sharding

00:00:19.000 --> 00:00:21.000
App Engine does for you.

00:00:21.000 --> 00:00:25.000
And have you guys been taking advantages of those features? Has that worked out for you in production?

00:00:25.000 --> 00:00:34.000
Absolutely. The auto-scaling is probably the best feature of it.

00:00:34.000 --> 00:00:37.000
It works really smoothly. It's very transparent.

00:00:37.000 --> 00:00:41.000
And, our traffic definitely has peaks and valleys.

00:00:41.000 --> 00:00:46.000
You know, there's been a lot of press, and that brings a lot of traffic,

00:00:46.000 --> 00:00:48.000
and with course launches there's a lot of traffic.

00:00:48.000 --> 00:00:53.000
There's a lot of traffic as, you know, homework deadlines come up, things like that.

00:00:53.000 --> 00:00:55.000
And we can handle that without thinking about it.

00:00:55.000 --> 00:00:59.000
Some of the--I wasn't there, but I've heard some stories

00:00:59.000 --> 00:01:05.000
from the early classes and the early AI prototype from the fall,

00:01:05.000 --> 00:01:10.000
and Mike pretty much was spinning up servers nonstop.

00:01:10.000 --> 00:01:14.000
You know, he didn't sleep for a couple of weeks. He was doing nothing but spinning up new virtuals.

00:01:14.000 --> 00:01:18.000
And we don't have to do that. We don't have to think about it.

00:01:18.000 --> 00:01:21.000
And we just, you know, check each day to see how many instances we have running.

00:01:21.000 --> 00:01:25.000
There was a time where we accidentally DDoS'd ourselves with a bug

00:01:25.000 --> 00:01:29.000
that was sending way too many requests back to the server, some Ajax requests,

00:01:29.000 --> 00:01:35.000
and when we spun up to a couple hundred instances, you know, everything was fine.

00:01:35.000 --> 00:01:42.000
Our users were still able to continue, and every site that's learning how to scale has made that mistake.

00:01:42.000 --> 00:01:48.000
But most of those other sites took themselves down for the day while they figured out what was going on,

00:01:48.000 --> 00:01:52.000
and we were able to figure out what was going on without going down.

00:01:52.000 --> 00:01:58.000
So, I think that was just an instance of, you know, kind of proof where it really does work well.

00:01:58.000 --> 00:02:02.000
Cool. It's funny to me that you mention on App Engine, you know,

00:02:02.000 --> 00:02:04.000
checking how many app servers you have in the morning

00:02:04.000 --> 00:02:09.000
because on reddit and Hipmunk that's a number we are really familiar with.

00:02:09.000 --> 00:02:13.000
You know, adding a new app server is something we do deliberately

00:02:13.000 --> 00:02:17.000
and especially, I know it is with reddit, something with a lot of deliberation beforehand.

00:02:17.000 --> 00:02:19.000
You know, how is this going to fit in the architecture?

00:02:19.000 --> 00:02:21.000
How is this going to change things, you know, with regards to caching and what not?

00:02:21.000 --> 00:02:25.000
And on App Engine, you know, you're working in a different--

00:02:25.000 --> 00:02:30.000
You have to kind of develop things in a different style as a result of this nature,

00:02:30.000 --> 00:02:33.000
And I wonder if you can comment on kind of how App Engine was designed

00:02:33.000 --> 00:02:35.000
and how it kind of fits the way you've done things in the past?

00:02:35.000 --> 00:02:40.000
It's really become clear to me in my time that I've been working with it

00:02:40.000 --> 00:02:43.000
that it was designed by people that had been through that several times

00:02:43.000 --> 00:02:45.000
with different kinds of apps

00:02:45.000 --> 00:02:52.000
because the solutions and the things that they provide you kind of has those characteristics

00:02:52.000 --> 00:02:59.000
of if you were building something over again just the way you'd do it.

00:02:59.000 --> 00:03:04.000
Like if, for example, the queing can get really complex,

00:03:04.000 --> 00:03:10.000
and their queing system, you know, well, you create a task; you give it some properties.

00:03:10.000 --> 00:03:17.000
The properties that they give you that you can kind of tune are exactly the ones that you'd want to tune.

00:03:17.000 --> 00:03:21.000
And then the trigger is just a simple, like, a web hook callback.

00:03:21.000 --> 00:03:26.000
And so your worker logic is just like any other request handler,

00:03:26.000 --> 00:03:32.000
and it's just very simple, you know, kind of like the least common denominator sort of mentality.

00:03:32.000 --> 00:03:38.000
So trying to just simplify things is definitely something that really comes to mind.

00:03:38.000 --> 00:03:42.000
Cool.

