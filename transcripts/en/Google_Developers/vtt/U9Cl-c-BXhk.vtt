WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.800
[MUSIC PLAYING]

00:00:02.800 --> 00:00:04.939
Writing fast and
battery-friendly phone apps

00:00:04.939 --> 00:00:06.910
is essential for
making users happy.

00:00:06.910 --> 00:00:10.040
But for Android Wear,
it's absolutely critical.

00:00:10.040 --> 00:00:12.210
My name's Wayne
Piekarski, and today I'm

00:00:12.210 --> 00:00:13.830
going to show you
some simple tricks

00:00:13.830 --> 00:00:17.430
to make your Android Wear
apps more battery-efficient.

00:00:17.430 --> 00:00:20.010
As we've discussed in earlier
videos such as this DevByte

00:00:20.010 --> 00:00:22.910
here, the Data Layer
API provides a mechanism

00:00:22.910 --> 00:00:25.570
for Android Wear devices to
communicate with a companion

00:00:25.570 --> 00:00:27.270
phone or tablet.

00:00:27.270 --> 00:00:30.820
The API provides data items,
which implement data storage,

00:00:30.820 --> 00:00:33.440
and automatic
synchronization, and messages

00:00:33.440 --> 00:00:35.260
which implement a faster
but not guaranteed

00:00:35.260 --> 00:00:37.894
way of sending messages
to another device.

00:00:37.894 --> 00:00:40.310
The first thing to realize
when designing your application

00:00:40.310 --> 00:00:42.280
architecture is that
your phone typically

00:00:42.280 --> 00:00:44.990
has a much more powerful
processor and a much larger

00:00:44.990 --> 00:00:47.300
battery than your wearable.

00:00:47.300 --> 00:00:48.970
So the best practice
is that you want

00:00:48.970 --> 00:00:52.460
to offload as much as possible
away from the wearable

00:00:52.460 --> 00:00:55.340
to try to get the most
battery life out of it.

00:00:55.340 --> 00:00:57.720
Another key part of the
application architecture

00:00:57.720 --> 00:01:00.180
is that the phone has direct
access to the internet,

00:01:00.180 --> 00:01:02.050
while the wearable does not.

00:01:02.050 --> 00:01:04.200
Imagine a scenario where
you're building an app

00:01:04.200 --> 00:01:06.390
to show weather
updates on a wearable.

00:01:06.390 --> 00:01:09.140
The phone will need to make
the request to fetch the data

00:01:09.140 --> 00:01:11.510
and then send that to the
wearable via the Data Layer

00:01:11.510 --> 00:01:12.880
API.

00:01:12.880 --> 00:01:14.930
There are many ways
you can implement this,

00:01:14.930 --> 00:01:16.670
but if you do not
design this carefully,

00:01:16.670 --> 00:01:17.914
it could perform poorly.

00:01:17.914 --> 00:01:19.330
So how do we go
about implementing

00:01:19.330 --> 00:01:21.672
an efficient solution to this?

00:01:21.672 --> 00:01:23.130
One of the first
improvements comes

00:01:23.130 --> 00:01:25.810
from changing how you wake
up the wearable device.

00:01:25.810 --> 00:01:28.930
Rather than having the wearable
wake up every 10 seconds or so

00:01:28.930 --> 00:01:32.220
and request an update from
information from the phone,

00:01:32.220 --> 00:01:33.800
instead, you should
allow the phone

00:01:33.800 --> 00:01:36.250
to drive updates to
the wearable device.

00:01:36.250 --> 00:01:38.350
This simple action of
keeping the watch asleep

00:01:38.350 --> 00:01:41.760
as long as possible will help
to conserve battery life.

00:01:41.760 --> 00:01:43.320
When implementing
the phone side,

00:01:43.320 --> 00:01:46.200
you need to do network requests
for a weather update every so

00:01:46.200 --> 00:01:47.460
often.

00:01:47.460 --> 00:01:50.720
You should consider using the
JobScheduler API for polling

00:01:50.720 --> 00:01:52.480
at a fixed interval
instead of trying

00:01:52.480 --> 00:01:54.070
to write your own mechanism.

00:01:54.070 --> 00:01:56.040
The JobScheduler is able
to combine your work

00:01:56.040 --> 00:01:58.930
with other work that needs
to be done at the same time,

00:01:58.930 --> 00:02:01.320
so the CPU can be working
out more efficiently

00:02:01.320 --> 00:02:03.580
and saving power on the phone.

00:02:03.580 --> 00:02:06.240
Once you've made the weather
update request from the phone,

00:02:06.240 --> 00:02:08.288
you may get back
updated information.

00:02:08.288 --> 00:02:10.570
An important step to do
here is to compare this

00:02:10.570 --> 00:02:13.580
with the previous information
downloaded earlier.

00:02:13.580 --> 00:02:15.310
If there's no change
to the information,

00:02:15.310 --> 00:02:16.800
you should not update the watch.

00:02:16.800 --> 00:02:18.380
There's no point in
waking it up just

00:02:18.380 --> 00:02:20.810
to tell it that
nothing has happened.

00:02:20.810 --> 00:02:22.260
If you've detected
a change, it's

00:02:22.260 --> 00:02:24.440
important to minimize the
amount of data we actually

00:02:24.440 --> 00:02:25.680
send to the wearable.

00:02:25.680 --> 00:02:28.730
It would be a bad idea to
send the entire weather query

00:02:28.730 --> 00:02:31.820
result here to the wearable
since it probably includes

00:02:31.820 --> 00:02:33.610
a lot of extra information.

00:02:33.610 --> 00:02:35.910
Instead, we should
posit on the phone

00:02:35.910 --> 00:02:37.400
and send just a
single temperature

00:02:37.400 --> 00:02:38.772
value, in this case.

00:02:38.772 --> 00:02:40.980
Remember, we're trying to
minimize the amount of work

00:02:40.980 --> 00:02:41.855
done on the wearable.

00:02:41.855 --> 00:02:45.430
Even things which might seem
trivial will add up eventually.

00:02:45.430 --> 00:02:47.410
So when sending the
data to the wearable,

00:02:47.410 --> 00:02:48.471
how should we do that?

00:02:48.471 --> 00:02:50.720
If you have to send a large
amount of temperature data

00:02:50.720 --> 00:02:53.180
for a time range, it might
be tempting to create

00:02:53.180 --> 00:02:55.530
separate data items for
each time and temperature,

00:02:55.530 --> 00:02:57.660
and then send them separately.

00:02:57.660 --> 00:02:59.710
However, for each
piece of data sent

00:02:59.710 --> 00:03:01.910
between the phone
and the wearable,

00:03:01.910 --> 00:03:05.540
there are overheads added by
the platform and the network.

00:03:05.540 --> 00:03:08.290
These overheads include
headers for packets,

00:03:08.290 --> 00:03:10.850
acknowledgements per
packet, and energy required

00:03:10.850 --> 00:03:13.070
for every packet sent,
as well as activating

00:03:13.070 --> 00:03:15.030
the wireless hardware.

00:03:15.030 --> 00:03:17.550
When designing code to
send data over a network,

00:03:17.550 --> 00:03:19.300
taking these overheads
into consideration

00:03:19.300 --> 00:03:20.600
is very important.

00:03:20.600 --> 00:03:24.060
So by storing many numeric
values into a single message,

00:03:24.060 --> 00:03:26.670
there will be much less
data sent and processed

00:03:26.670 --> 00:03:28.340
than sending each
one separately.

00:03:28.340 --> 00:03:30.190
So as you can see
here, the results

00:03:30.190 --> 00:03:32.040
can be quite considerable.

00:03:32.040 --> 00:03:33.791
Once you've sent the
data to the wearable,

00:03:33.791 --> 00:03:35.706
you might be tempted to
add an acknowledgement

00:03:35.706 --> 00:03:36.770
to check it was received.

00:03:36.770 --> 00:03:39.059
However, if you're
using data items,

00:03:39.059 --> 00:03:40.850
they're already guaranteed
by the framework

00:03:40.850 --> 00:03:43.174
to be synchronized when
the wearable is paired up.

00:03:43.174 --> 00:03:45.340
So you could be sure they'll
eventually be received,

00:03:45.340 --> 00:03:47.560
and there's no need for any
further acknowledgement.

00:03:47.560 --> 00:03:49.100
However, if you're
using messages,

00:03:49.100 --> 00:03:50.641
you might still need
to check they're

00:03:50.641 --> 00:03:52.820
received since transmission
is not guaranteed when

00:03:52.820 --> 00:03:55.090
the device is disconnected.

00:03:55.090 --> 00:03:57.870
So we've walked through
an example of how

00:03:57.870 --> 00:04:00.430
to improve performance and
battery life on Android Wear,

00:04:00.430 --> 00:04:02.980
and here's a summary
of the key points.

00:04:02.980 --> 00:04:04.580
Only request
network updates when

00:04:04.580 --> 00:04:06.950
you're certain there
might be a change.

00:04:06.950 --> 00:04:09.040
Process the received
data on the phone

00:04:09.040 --> 00:04:12.490
to minimize content sent
to the Android Wear device.

00:04:12.490 --> 00:04:14.530
Only send updates
to the wearable when

00:04:14.530 --> 00:04:16.640
things have actually changed.

00:04:16.640 --> 00:04:18.820
Combine multiple
pieces of data together

00:04:18.820 --> 00:04:21.690
into single items to
minimize protocol overheads.

00:04:21.690 --> 00:04:24.240
And finally, put as much
code on the phone side

00:04:24.240 --> 00:04:26.120
as you can since the
watch should only

00:04:26.120 --> 00:04:28.750
be used for information
presentation and simple user

00:04:28.750 --> 00:04:30.570
interaction.

00:04:30.570 --> 00:04:32.730
So these are some simple
but highly effective

00:04:32.730 --> 00:04:35.810
ways of writing efficient
applications for Android Wear.

00:04:35.810 --> 00:04:37.700
However, there are lots
of other techniques

00:04:37.700 --> 00:04:40.327
you can use to improve
your applications as well.

00:04:40.327 --> 00:04:42.660
So check out the rest of the
Android Performance Pattern

00:04:42.660 --> 00:04:44.970
series to learn more,
because much of it

00:04:44.970 --> 00:04:46.870
applies to Android Wear as well.

00:04:46.870 --> 00:04:49.350
And don't forget to join us
on the Android Wear Google+

00:04:49.350 --> 00:04:52.930
community for tips and
advice from other developers.

00:04:52.930 --> 00:04:54.230
So thanks for watching.

00:04:54.230 --> 00:04:57.280
I'm Wayne Piekarski, and
keep calm, profile your code,

00:04:57.280 --> 00:04:58.830
and always remember,
perf matters.

00:04:58.830 --> 00:05:02.180
[MUSIC PLAYING]

