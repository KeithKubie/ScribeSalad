WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.700
[MUSIC PLAYING]

00:00:02.700 --> 00:00:06.120
Compressed image formats
like PNG, JPEG, and WebP

00:00:06.120 --> 00:00:09.130
do a fantastic job of reducing
the file size of your images

00:00:09.130 --> 00:00:10.780
for distribution and transfer.

00:00:10.780 --> 00:00:13.290
But once the images get off
the disk and into memory,

00:00:13.290 --> 00:00:16.030
all those great compression
savings disappear.

00:00:16.030 --> 00:00:18.520
My name is Colt McAnlis, and
serious application developers

00:00:18.520 --> 00:00:22.000
know that smaller images don't
have to stop with disk formats.

00:00:22.000 --> 00:00:24.220
With the help of some of
Android's built in features,

00:00:24.220 --> 00:00:25.989
you can reduce the
amount of heap space

00:00:25.989 --> 00:00:27.530
that your images
are taking up, which

00:00:27.530 --> 00:00:29.960
can improve memory
efficiency and performance.

00:00:29.960 --> 00:00:32.890
It's worth pointing out that
the Dalvik version of Android's

00:00:32.890 --> 00:00:35.450
garbage collector
is non-compacting,

00:00:35.450 --> 00:00:36.940
meaning that as
objects are freed,

00:00:36.940 --> 00:00:39.650
other objects will not be
shuffled around in order

00:00:39.650 --> 00:00:41.380
to optimize for free space.

00:00:41.380 --> 00:00:43.250
This represents a large
problem for bitmaps,

00:00:43.250 --> 00:00:47.180
which tend to be the largest
continuous blocks of memory

00:00:47.180 --> 00:00:49.080
that you'll actually
allocate in your app.

00:00:49.080 --> 00:00:52.020
The less contiguous free
space there is in your heap

00:00:52.020 --> 00:00:53.480
means that allocations
for bitmaps

00:00:53.480 --> 00:00:55.400
can fail, causing a
garbage collection

00:00:55.400 --> 00:00:57.230
event to be kicked off
in order to free up

00:00:57.230 --> 00:00:59.800
space in other places so that
the allocation can eventually

00:00:59.800 --> 00:01:02.460
succeed or throw an
out of memory error.

00:01:02.460 --> 00:01:04.690
The reason that these images
are so large in memory

00:01:04.690 --> 00:01:07.654
is that before you can
use JPEG or PNG files,

00:01:07.654 --> 00:01:09.320
they first have to
be loaded into memory

00:01:09.320 --> 00:01:12.220
and decompressed to a
format that the system can

00:01:12.220 --> 00:01:14.387
use for rendering, meaning
that once they're loaded,

00:01:14.387 --> 00:01:16.261
they aren't in their
compressed form anymore.

00:01:16.261 --> 00:01:18.380
Nope, they're sitting
around on your CPU memory

00:01:18.380 --> 00:01:20.510
in all of their
uncompressed glory.

00:01:20.510 --> 00:01:22.460
And by default, when
images are loaded

00:01:22.460 --> 00:01:24.330
into a bitmap in
Android, they're

00:01:24.330 --> 00:01:27.840
done so at 32 bits per
pixel, giving eight bits

00:01:27.840 --> 00:01:30.820
to each of the red, green,
blue, and alpha channels.

00:01:30.820 --> 00:01:33.690
This happens even if you're
loading an image without alpha,

00:01:33.690 --> 00:01:35.255
like a JPEG image.

00:01:35.255 --> 00:01:36.880
Currently, Android
doesn't have support

00:01:36.880 --> 00:01:39.190
for 24 bits per
pixel image formats,

00:01:39.190 --> 00:01:41.630
meaning that even if your
image doesn't use alpha,

00:01:41.630 --> 00:01:44.050
when it's loaded, it'll get
converted to a 32-bit format

00:01:44.050 --> 00:01:47.560
in memory, basically weighting
eight bits per pixel.

00:01:47.560 --> 00:01:50.190
Oh, and don't forget that before
these images can be rendered

00:01:50.190 --> 00:01:53.510
to the screen, they first have
to be transferred to the GPU

00:01:53.510 --> 00:01:56.260
as textures, which means
that each bitmap you create

00:01:56.260 --> 00:01:59.280
is going to be taking
up CPU memory and GPU

00:01:59.280 --> 00:02:00.672
memory at the same time.

00:02:00.672 --> 00:02:02.130
In order to address
these problems,

00:02:02.130 --> 00:02:04.710
Android supports a few
alternate pixel formats

00:02:04.710 --> 00:02:07.100
that when used properly
can provide smaller

00:02:07.100 --> 00:02:10.440
CPU and GPU footprints, leading
to less heap fragmentation

00:02:10.440 --> 00:02:11.900
and better performance.

00:02:11.900 --> 00:02:15.580
Of course, the trick here is
that the savings of the space

00:02:15.580 --> 00:02:17.790
comes at the cost of
visual quality, which

00:02:17.790 --> 00:02:19.290
means that these
formats may not be

00:02:19.290 --> 00:02:21.090
right for every single scenario.

00:02:21.090 --> 00:02:25.070
For example, utilizing
the RGB565 format

00:02:25.070 --> 00:02:27.260
allows you to use
only 16 bits per pixel

00:02:27.260 --> 00:02:29.780
and ignore allocating any
bits to the alpha channel.

00:02:29.780 --> 00:02:32.820
Of course, you've now cut the
amount of information per pixel

00:02:32.820 --> 00:02:34.660
in half, which
reduces the number

00:02:34.660 --> 00:02:37.180
of possible unique
colors in your image.

00:02:37.180 --> 00:02:39.890
This is most noticeable in
gradient areas of your images

00:02:39.890 --> 00:02:42.185
or in icons, but
for most photos,

00:02:42.185 --> 00:02:44.310
the difference is really
hard to notice, especially

00:02:44.310 --> 00:02:45.950
on a very tiny screen.

00:02:45.950 --> 00:02:49.090
Now, if you want smaller format
but you still need alpha,

00:02:49.090 --> 00:02:52.210
trying the 4444 image
format, which basically

00:02:52.210 --> 00:02:54.490
cuts the number of
bits per pixel in half

00:02:54.490 --> 00:02:57.200
and keeps the alpha
channel, but of course

00:02:57.200 --> 00:02:59.690
introduces larger
visual differences.

00:02:59.690 --> 00:03:01.340
This lower quality
means that you're

00:03:01.340 --> 00:03:03.560
going to end up with
significant banding in areas

00:03:03.560 --> 00:03:05.520
of the image that
have smooth gradients.

00:03:05.520 --> 00:03:08.290
So it's not really appropriate
for full screen high resolution

00:03:08.290 --> 00:03:11.880
photos, but it can easily work
as a format for thumbnails that

00:03:11.880 --> 00:03:13.640
might need some alpha
applied to them,

00:03:13.640 --> 00:03:16.290
like if you're baking in
rounded corners to your images

00:03:16.290 --> 00:03:17.460
or something like that.

00:03:17.460 --> 00:03:20.140
Now, while Android doesn't
support gray scale bitmaps,

00:03:20.140 --> 00:03:24.530
the Alpha8 format can still be
quite used for alpha masking.

00:03:24.530 --> 00:03:27.390
For instance, creating a
simple grey icon and then using

00:03:27.390 --> 00:03:30.270
a color tint at run time to
turn it into the color that you

00:03:30.270 --> 00:03:32.090
actually want on the screen.

00:03:32.090 --> 00:03:33.682
You'll get a little
extra overhead

00:03:33.682 --> 00:03:35.140
during the rendering
of your image,

00:03:35.140 --> 00:03:37.540
but this might be a
huge win with respect

00:03:37.540 --> 00:03:39.350
to memory resonancy.

00:03:39.350 --> 00:03:43.280
Now, it's worth pointing out
that PNG, JPEG, and WebP don't

00:03:43.280 --> 00:03:45.440
support these smaller
pixel formats as part

00:03:45.440 --> 00:03:48.440
of their basic file structure,
meaning that at load time,

00:03:48.440 --> 00:03:50.910
you're going to have to
set the inPreferredConfig

00:03:50.910 --> 00:03:53.910
flag of your bitmap options
to whatever the target pixel

00:03:53.910 --> 00:03:56.270
format is that you're
looking to use.

00:03:56.270 --> 00:03:58.790
When the image is loaded, the
system will go load the data,

00:03:58.790 --> 00:04:01.010
convert it to the
format on your behalf.

00:04:01.010 --> 00:04:02.970
Just be aware though
that when it does this,

00:04:02.970 --> 00:04:04.430
you may get some
extra processing

00:04:04.430 --> 00:04:08.130
time as a result, which is
really important to note.

00:04:08.130 --> 00:04:10.390
Performance is all
about trade offs.

00:04:10.390 --> 00:04:13.260
Image memory size, visual
quality, and load times,

00:04:13.260 --> 00:04:15.770
it's all things that you
have to balance perfectly

00:04:15.770 --> 00:04:18.314
for your application to get
the best performance possible.

00:04:18.314 --> 00:04:20.480
Of course, that's why you
need to check out the rest

00:04:20.480 --> 00:04:23.950
of the Android performance
patterns content and also join

00:04:23.950 --> 00:04:26.680
our Google+ community for great
tips on other developers on how

00:04:26.680 --> 00:04:29.240
they balanced this
tricky equation.

00:04:29.240 --> 00:04:32.400
So keep calm, profile your
code, and always remember,

00:04:32.400 --> 00:04:33.880
perfmatters.

