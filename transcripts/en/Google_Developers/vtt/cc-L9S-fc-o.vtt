WEBVTT
Kind: captions
Language: en

00:00:02.968 --> 00:00:04.801
Boyd: My name's Ryan Boyd
and I'm here today

00:00:04.801 --> 00:00:07.300
to talk to you
about powering mobile apps

00:00:07.300 --> 00:00:08.767
with social data.

00:00:08.767 --> 00:00:11.300
All of you--and this
was going to be probably

00:00:11.300 --> 00:00:12.701
have something like this.

00:00:12.701 --> 00:00:15.534
Now I think it's you all have
something like this

00:00:15.534 --> 00:00:18.934
where you use a mobile device
that has internet access

00:00:18.934 --> 00:00:21.400
and you probably use it
every single day

00:00:21.400 --> 00:00:25.100
as much if not more than you use
your actual computer.

00:00:25.100 --> 00:00:26.567
We're going to talk
in this session

00:00:26.567 --> 00:00:29.000
a little bit about
how you can take the social data

00:00:29.000 --> 00:00:31.300
that you have defined
out there on the web

00:00:31.300 --> 00:00:33.901
and pull it in and use it
on a mobile device

00:00:33.901 --> 00:00:37.167
to make applications
more powerful.

00:00:37.167 --> 00:00:40.467
To start off,
a little number here.

00:00:40.467 --> 00:00:41.868
This shocked me.

00:00:41.868 --> 00:00:45.701
Last year, there were
140 million smartphones sold

00:00:45.701 --> 00:00:47.300
throughout the world.

00:00:47.300 --> 00:00:49.601
Uh, that breaks down
into something like half

00:00:49.601 --> 00:00:51.033
are Symbian devices.

00:00:51.033 --> 00:00:54.200
Uh, then it goes to,
uh, Blackberries,

00:00:54.200 --> 00:00:57.100
and Windows Mobile,
and iPhones, and--and all.

00:00:57.100 --> 00:01:00.300
And, um, also a bunch
of Android devices.

00:01:00.300 --> 00:01:03.234
But there's a huge audience
out there

00:01:03.234 --> 00:01:05.634
for any mobile app
that you develop.

00:01:05.634 --> 00:01:07.033
Uh, and depending
on the type of app

00:01:07.033 --> 00:01:08.033
that you develop,

00:01:08.033 --> 00:01:09.367
which we'll go into later,

00:01:09.367 --> 00:01:11.200
uh, the audience size
differs.

00:01:11.200 --> 00:01:12.601
Uh, but think about that.

00:01:12.601 --> 00:01:16.000
140 million devices
were sold last year.

00:01:16.000 --> 00:01:17.667
And these are smartphones
which, you know,

00:01:17.667 --> 00:01:21.934
I'm presuming most of them
have access to the internet.

00:01:21.934 --> 00:01:23.100
So the agenda.

00:01:23.100 --> 00:01:26.567
How are we gonna spend
our time here today?

00:01:26.567 --> 00:01:29.300
We're going to talk a little bit
about the technology,

00:01:29.300 --> 00:01:31.801
choosing the right type
of application to build,

00:01:31.801 --> 00:01:33.801
uh, for your use case,

00:01:33.801 --> 00:01:35.868
how it all fits together
with authorization

00:01:35.868 --> 00:01:37.434
and the protocols,

00:01:37.434 --> 00:01:40.601
and then dive into some examples
and code.

00:01:40.601 --> 00:01:42.133
Uh, and then we're going
to talk a little bit

00:01:42.133 --> 00:01:43.267
about the future.

00:01:43.267 --> 00:01:45.734
Uh, and hopefully the future
comes true.

00:01:45.734 --> 00:01:48.334
Um, and then take some questions
and answers.

00:01:48.334 --> 00:01:51.100
On that first slide here--
I'll actually step back.

00:01:51.100 --> 00:01:52.267
It's probably bad
to do this.

00:01:52.267 --> 00:01:53.534
But I'll step back.

00:01:53.534 --> 00:01:56.534
Uh, on this first slide here,
there's a URL

00:01:56.534 --> 00:01:59.467
for any questions
that you have during this talk.

00:01:59.467 --> 00:02:03.100
Uh, there--you can ask them
on Moderator at that URL

00:02:03.100 --> 00:02:04.701
or, uh, at the end
of the session,

00:02:04.701 --> 00:02:06.334
you can come up
to the microphones

00:02:06.334 --> 00:02:07.601
and ask your questions
in person

00:02:07.601 --> 00:02:09.434
if you're not terribly shy.

00:02:09.434 --> 00:02:11.834
You can also post
your feedback for this talk

00:02:11.834 --> 00:02:14.868
at the URL at the bottom.

00:02:14.868 --> 00:02:16.968
All right.

00:02:16.968 --> 00:02:21.100
So every app is better when...

00:02:21.100 --> 00:02:23.767
Anyone have any answer
for me?

00:02:23.767 --> 00:02:26.801
Social. Yes. Good answer.

00:02:26.801 --> 00:02:28.434
Uh, I-I did this
in a rehearsal

00:02:28.434 --> 00:02:29.868
and someone told me
"it's mobile."

00:02:29.868 --> 00:02:31.534
I guess that also applies
for this session

00:02:31.534 --> 00:02:32.534
pretty well too.

00:02:32.534 --> 00:02:35.267
But think about it.

00:02:35.267 --> 00:02:37.434
Weather is something
that you probably talk

00:02:37.434 --> 00:02:39.501
to a bunch of people
every day about

00:02:39.501 --> 00:02:42.133
in sort of small talk
conversations.

00:02:42.133 --> 00:02:43.734
Somewhat meaningless
conversations.

00:02:43.734 --> 00:02:47.801
Just a way to--to start off
and get to know someone.

00:02:47.801 --> 00:02:50.167
Weather is also something
that you may care about

00:02:50.167 --> 00:02:51.834
for your close family
and friends.

00:02:51.834 --> 00:02:53.100
I know I do.

00:02:53.100 --> 00:02:55.934
Like, I-I keep track
of, uh, in my mobile device,

00:02:55.934 --> 00:02:58.100
I keep track of the list
of, like, zip codes

00:02:58.100 --> 00:02:59.834
or locations
of--of where my family

00:02:59.834 --> 00:03:01.601
and friends are located.

00:03:01.601 --> 00:03:04.534
And, um, then I look
at the weather.

00:03:04.534 --> 00:03:07.300
So I look at the weather
and say, you know what,

00:03:07.300 --> 00:03:09.501
um, sorry, mom,
I know, you know,

00:03:09.501 --> 00:03:11.767
you're experiencing 20 degrees
temperatures

00:03:11.767 --> 00:03:14.868
and, uh, lots of snowfall
there in Pennsylvania.

00:03:14.868 --> 00:03:16.734
And I'm here
in sunny California.

00:03:16.734 --> 00:03:19.000
It's, you know,
only 60 degrees.

00:03:19.000 --> 00:03:21.067
Uh, or it's--
it's up to 60 degrees.

00:03:21.067 --> 00:03:25.634
Um, so, you know, it just
creates some conversation.

00:03:25.634 --> 00:03:27.767
And the one thing
that I'm really missing

00:03:27.767 --> 00:03:31.300
right now though
is the ability to keep track

00:03:31.300 --> 00:03:34.133
of my friends and family
who are often traveling.

00:03:34.133 --> 00:03:35.834
So, you know,
if I have a friend

00:03:35.834 --> 00:03:37.534
that's visiting D.C.
in the fa--

00:03:37.534 --> 00:03:40.601
or lives in D.C.
and it's fall there,

00:03:40.601 --> 00:03:43.067
um, I might be looking
at the weather in D.C.

00:03:43.067 --> 00:03:44.868
when in fact
they're in San Francisco

00:03:44.868 --> 00:03:46.400
and experiencing the fog.

00:03:46.400 --> 00:03:48.434
Or I have a friend
that, uh, you know,

00:03:48.434 --> 00:03:51.234
normally lives in New York
and it's really ugly.

00:03:51.234 --> 00:03:52.868
And in fact,
they can make fun of me

00:03:52.868 --> 00:03:54.133
and say that they're,
you know,

00:03:54.133 --> 00:03:55.767
sitting in Trunk Bay

00:03:55.767 --> 00:03:58.033
enjoying
the beautiful Caribbean.

00:03:58.033 --> 00:04:01.167
Um, so think about how you can
make weather social.

00:04:01.167 --> 00:04:03.367
It's not something--
you know, we do chitchat.

00:04:03.367 --> 00:04:05.667
But you don't--haven't seen
any social apps out there--

00:04:05.667 --> 00:04:08.100
I haven't--uh, that make
the weather as social

00:04:08.100 --> 00:04:09.901
as it could be.

00:04:09.901 --> 00:04:12.167
Exercise and weight loss.

00:04:12.167 --> 00:04:14.133
You know, you're going to think,
"hey, that's something

00:04:14.133 --> 00:04:16.300
that's ordinarily very private."

00:04:16.300 --> 00:04:18.300
How many calories
you ate today

00:04:18.300 --> 00:04:20.901
or, you know, how much weight
you've lost.

00:04:20.901 --> 00:04:22.367
You might, you know,
talk about that

00:04:22.367 --> 00:04:24.033
with your closest friends.

00:04:24.033 --> 00:04:27.033
Uh, but you're, you know,
really not broadcasting it out

00:04:27.033 --> 00:04:29.000
to a larger group
of friends.

00:04:29.000 --> 00:04:33.100
However, these types of things
can also be very social.

00:04:33.100 --> 00:04:35.467
Uh, I know a bunch
of people that I work with

00:04:35.467 --> 00:04:38.601
and friends and family
that use, uh, an app

00:04:38.601 --> 00:04:40.601
on the iPhone that allows you
to keep track

00:04:40.601 --> 00:04:41.968
of the calories
that you're eating.

00:04:41.968 --> 00:04:44.934
You put in, you know,
your exercise that you did

00:04:44.934 --> 00:04:46.267
and your calorie intake

00:04:46.267 --> 00:04:48.434
and it computes, like,
how much weight you can lose

00:04:48.434 --> 00:04:50.968
and that sort of thing--
with some other information

00:04:50.968 --> 00:04:52.634
like age and that sort.

00:04:52.634 --> 00:04:54.300
Um, but, you know,

00:04:54.300 --> 00:04:55.767
this information
just stays there

00:04:55.767 --> 00:04:56.901
on your personal device.

00:04:56.901 --> 00:04:59.267
And then you go and you talk
to your friends

00:04:59.267 --> 00:05:01.200
and say, you know,
"what did you do today?"

00:05:01.200 --> 00:05:02.634
or, you know,
"how's it going?"

00:05:02.634 --> 00:05:04.067
But wouldn't it be
much better

00:05:04.067 --> 00:05:06.334
if you could actually have
a graph of that information

00:05:06.334 --> 00:05:08.767
and be able to, you know,
compete against your friends?

00:05:08.767 --> 00:05:09.901
And have--you know,

00:05:09.901 --> 00:05:11.901
not only can you compete
in games and such,

00:05:11.901 --> 00:05:13.901
but you can compete
in real life.

00:05:13.901 --> 00:05:15.534
Uh, hopefully
in a healthy way.

00:05:15.534 --> 00:05:17.634
Hopefully you're doing
the working out at the gym,

00:05:17.634 --> 00:05:19.334
uh, and eating
the fresh fruit,

00:05:19.334 --> 00:05:21.834
and, uh, not doing other things
to lose weight.

00:05:21.834 --> 00:05:23.701
But, um, you know,
so that's something

00:05:23.701 --> 00:05:27.133
that can also
be made social.

00:05:27.133 --> 00:05:29.501
So here's a list
of a bunch of other ideas.

00:05:29.501 --> 00:05:31.334
I'm not going to go
into each of these.

00:05:31.334 --> 00:05:34.834
But I encourage you all,
um, to think about them

00:05:34.834 --> 00:05:37.567
and think about how
they can be social.

00:05:37.567 --> 00:05:42.767
Um, and, you know, we have
a couple different types though

00:05:42.767 --> 00:05:45.267
of social apps.

00:05:45.267 --> 00:05:47.434
Uh, you can build
a social app

00:05:47.434 --> 00:05:50.000
that just sits inside
a social network,

00:05:50.000 --> 00:05:53.000
uh, you know, using something
like MySpace or hi5

00:05:53.000 --> 00:05:55.834
or--or other social networks
out there.

00:05:55.834 --> 00:05:58.334
Or you can build
a, uh, social app

00:05:58.334 --> 00:06:00.167
that just sits
on a mobile device

00:06:00.167 --> 00:06:02.300
and interacts
with these networks.

00:06:02.300 --> 00:06:04.367
Or you can take
your social network app

00:06:04.367 --> 00:06:07.567
that sits, uh, normally
inside of MySpace

00:06:07.567 --> 00:06:09.501
and you can actually build
a mobile version of it.

00:06:09.501 --> 00:06:11.734
And we've seen a number
of providers do that,

00:06:11.734 --> 00:06:14.000
uh, Cingular cetera.

00:06:17.000 --> 00:06:19.968
But what's the technology
which enables all of this?

00:06:19.968 --> 00:06:21.701
Uh, I'm going to be stressing,
you know,

00:06:21.701 --> 00:06:23.467
things like OpenSocial
here today.

00:06:23.467 --> 00:06:25.667
Although they do--
you know, all of this does apply

00:06:25.667 --> 00:06:27.934
to other technologies.

00:06:27.934 --> 00:06:33.000
Uh, but OpenSocial introduced
in version 0.8.1

00:06:33.000 --> 00:06:35.667
REST and RPC protocols.

00:06:35.667 --> 00:06:39.167
Uh, these REST and RPC protocols
allow a standard way

00:06:39.167 --> 00:06:40.767
to access social data

00:06:40.767 --> 00:06:43.367
on a wide variety
of social networks.

00:06:43.367 --> 00:06:45.033
For those of you
that aren't familiar with it,

00:06:45.033 --> 00:06:48.167
there are about 25 or more
social networks around the world

00:06:48.167 --> 00:06:49.901
that support OpenSocial.

00:06:49.901 --> 00:06:52.901
Uh, those all have
the capability of exposing data

00:06:52.901 --> 00:06:54.934
with these REST
and RPC protocols.

00:06:54.934 --> 00:06:56.067
I'll have a slide here later,

00:06:56.067 --> 00:06:58.267
which shows the current ones
which do.

00:06:58.267 --> 00:07:01.234
Um, but anyway, in addition
to the OpenSocial standard,

00:07:01.234 --> 00:07:04.267
we also use the OAuth standard
for authorizing access

00:07:04.267 --> 00:07:05.667
to this social data.

00:07:05.667 --> 00:07:07.100
Uh, these networks want
to make sure

00:07:07.100 --> 00:07:10.901
that the user has consented
to giving you that information

00:07:10.901 --> 00:07:12.901
for your application.

00:07:12.901 --> 00:07:14.501
And then
there are client libraries

00:07:14.501 --> 00:07:18.834
that instead of using the raw
XML and HTTP or JSON data,

00:07:18.834 --> 00:07:21.434
uh, you can use
these client libraries

00:07:21.434 --> 00:07:23.300
written in a variety
of languages,

00:07:23.300 --> 00:07:25.567
uh, in order to make
your applications

00:07:25.567 --> 00:07:27.534
a little bit faster.

00:07:27.534 --> 00:07:29.334
And then we have
some sample code,

00:07:29.334 --> 00:07:32.400
uh, for both Android devices
and the iPhones.

00:07:32.400 --> 00:07:34.534
But don't forget the idea

00:07:34.534 --> 00:07:36.901
that the web is really
what powers all of this.

00:07:36.901 --> 00:07:38.734
Uh, you know,
all these technologies

00:07:38.734 --> 00:07:40.334
sit on top of the web,

00:07:40.334 --> 00:07:42.734
uh, and make this--
this possible.

00:07:42.734 --> 00:07:46.234
So choosing the right road.

00:07:46.234 --> 00:07:48.767
Uh, make sure you don't
go down the--the wrong way

00:07:48.767 --> 00:07:51.133
and hit the bicyclist
in this picture.

00:07:51.133 --> 00:07:54.567
But--so choosing the right road
to success.

00:07:54.567 --> 00:07:57.000
You can build
a web application.

00:07:57.000 --> 00:07:59.634
You can build a web application
with some native functionality

00:07:59.634 --> 00:08:02.067
that hooks
into, uh, the device's

00:08:02.067 --> 00:08:03.701
native functionality
like geolocation

00:08:03.701 --> 00:08:07.467
and things like that
using HTML 5 and Gears.

00:08:07.467 --> 00:08:10.067
Or you can just build
a-a purely native application

00:08:10.067 --> 00:08:12.901
that has access
to the full suite of APIs

00:08:12.901 --> 00:08:14.834
on a native device.

00:08:14.834 --> 00:08:17.567
So web application.

00:08:17.567 --> 00:08:18.734
Single app.

00:08:18.734 --> 00:08:20.534
You're developing
a single application

00:08:20.534 --> 00:08:24.534
which deploy--you know,
is able to be viewed

00:08:24.534 --> 00:08:29.133
on pretty much most of those
140 million devices

00:08:29.133 --> 00:08:32.968
that were sold last year.

00:08:32.968 --> 00:08:35.934
You can use open standards.
Open standards such as HTML.

00:08:35.934 --> 00:08:37.300
Or for a lot of devices,

00:08:37.300 --> 00:08:41.133
things like JavaScript
and CSS as well.

00:08:41.133 --> 00:08:42.868
But it's not available,
typically,

00:08:42.868 --> 00:08:44.367
in a market or app store.

00:08:44.367 --> 00:08:48.033
Although some applications
have taken their web apps

00:08:48.033 --> 00:08:51.501
and, uh, kind of built
a layer around it

00:08:51.501 --> 00:08:53.801
using something
like the WebView in Android

00:08:53.801 --> 00:08:59.100
to, you know, give a native
application framework

00:08:59.100 --> 00:09:02.000
around the mobile web app.

00:09:02.000 --> 00:09:04.934
But that's not that popular
and users don't really expect

00:09:04.934 --> 00:09:09.067
those types of applications
to be in a market or app store.

00:09:09.067 --> 00:09:10.567
You can also build
a web application

00:09:10.567 --> 00:09:12.634
with some native
functionality.

00:09:12.634 --> 00:09:14.267
You can have improved
performance

00:09:14.267 --> 00:09:15.934
over standard web apps

00:09:15.934 --> 00:09:18.200
and it can be made available
offline

00:09:18.200 --> 00:09:20.567
depending on the technologies
you're using.

00:09:20.567 --> 00:09:23.334
And you can also have access
to native APIs

00:09:23.334 --> 00:09:25.934
such as geolocation.

00:09:25.934 --> 00:09:27.801
These standards
are still emerging.

00:09:27.801 --> 00:09:30.367
Um, right now you may need
to fork a little bit

00:09:30.367 --> 00:09:32.033
for different, uh, platforms.

00:09:32.033 --> 00:09:34.367
So if you want to do
some of the offline stuff,

00:09:34.367 --> 00:09:37.767
you know, you might use Gears
on one device or HTML 5,

00:09:37.767 --> 00:09:39.300
at app cache databases

00:09:39.300 --> 00:09:43.334
and things like that
on other devices.

00:09:43.334 --> 00:09:45.167
So a native application.

00:09:45.167 --> 00:09:47.534
Basically, you get
the higher performance.

00:09:47.534 --> 00:09:50.267
You get access
to the full suite of APIs.

00:09:50.267 --> 00:09:53.601
You can still call the web
when you need to.

00:09:53.601 --> 00:09:57.234
And it requires building
an app for each platform.

00:09:57.234 --> 00:10:01.234
So you may have to learn Java,
and Objective-C, and C++ APIs,

00:10:01.234 --> 00:10:03.667
and, you know, know every
programming language out there.

00:10:03.667 --> 00:10:06.667
But you can take advantage
of--of those other features

00:10:06.667 --> 00:10:08.801
of native applications.

00:10:08.801 --> 00:10:10.200
So we're going to start off
by talking

00:10:10.200 --> 00:10:11.801
about web applications.

00:10:11.801 --> 00:10:15.000
Um, and, you know,
basically, we built a couple,

00:10:15.000 --> 00:10:17.868
little different samples
for this presentation.

00:10:17.868 --> 00:10:20.000
Um, the first one
I'm going to talk about

00:10:20.000 --> 00:10:22.601
is the "what you doing?" app.

00:10:22.601 --> 00:10:25.100
Uh, and "what you doing?" app
is--is kind of a--

00:10:25.100 --> 00:10:26.467
a dumbed down version
of the next app

00:10:26.467 --> 00:10:27.767
we'll talk about.

00:10:27.767 --> 00:10:31.367
But basically what it is
is an application that you go,

00:10:31.367 --> 00:10:34.601
you log in to a particular
social network--

00:10:34.601 --> 00:10:38.067
any of them that supports,
uh, these REST and RPC APIs,

00:10:38.067 --> 00:10:39.701
and what's called
three-legged OAuth,

00:10:39.701 --> 00:10:41.434
which I'll dive into later--

00:10:41.434 --> 00:10:44.934
and you go and, uh, you choose
the network.

00:10:44.934 --> 00:10:46.667
You hit "log in."

00:10:46.667 --> 00:10:48.467
For some reason,
that video on the left

00:10:48.467 --> 00:10:51.567
always pauses,
um, in presentation mode

00:10:51.567 --> 00:10:53.000
with these projectors,

00:10:53.000 --> 00:10:55.334
but not in the other things--
projectors that I've used.

00:10:55.334 --> 00:10:56.901
So forgive that.

00:10:56.901 --> 00:10:59.801
But the left, uh, Android app
is doing the exact same thing

00:10:59.801 --> 00:11:02.567
on, uh, this web application.

00:11:02.567 --> 00:11:04.200
And you go and log in.

00:11:04.200 --> 00:11:05.834
And basically,
you can see the updates

00:11:05.834 --> 00:11:07.501
everyone has made.

00:11:07.501 --> 00:11:09.567
Uh, you can see updates
from particular friends.

00:11:09.567 --> 00:11:11.501
And you can post
a little status update.

00:11:11.501 --> 00:11:15.267
It's very simple,
uh, standard application,

00:11:15.267 --> 00:11:18.868
uh, that just uses JavaScript
and HTML.

00:11:18.868 --> 00:11:21.601
And this should work
across many different devices

00:11:21.601 --> 00:11:23.567
around the world.

00:11:23.567 --> 00:11:26.801
So how does this work?

00:11:26.801 --> 00:11:29.400
Here's the--the different actors
in play here.

00:11:29.400 --> 00:11:30.801
We have the mobile device.

00:11:30.801 --> 00:11:35.133
We have MySpaceID
and MySpace's social data,

00:11:35.133 --> 00:11:38.467
uh, using OAuth
and the OpenSocial APIs.

00:11:38.467 --> 00:11:40.801
And then we have an App Engine
back-end.

00:11:40.801 --> 00:11:43.100
Uh, this application
is built with Java,

00:11:43.100 --> 00:11:45.734
uh, as an App Engine
application.

00:11:45.734 --> 00:11:48.367
Um, and then we go
and we have the communication

00:11:48.367 --> 00:11:49.767
that we're doing here.

00:11:49.767 --> 00:11:53.234
So first off, the mobile device
communicates over to MySpace

00:11:53.234 --> 00:11:55.634
to get a request token
for OAuth

00:11:55.634 --> 00:11:59.834
and then hands over the flow
to the App Engine app

00:11:59.834 --> 00:12:03.434
to store that authorization
for access

00:12:03.434 --> 00:12:06.033
to someone's social data.

00:12:06.033 --> 00:12:08.901
And then the mobile device
uses JSON.

00:12:08.901 --> 00:12:10.734
Um, if you can believe it
or not,

00:12:10.734 --> 00:12:12.367
that's actually the logo
for JSON.

00:12:12.367 --> 00:12:13.367
I didn't know it too

00:12:13.367 --> 00:12:14.968
till I went
to do this presentation.

00:12:14.968 --> 00:12:18.601
But it then uses JSON
to talk to the App Engine app,

00:12:18.601 --> 00:12:21.067
uh, and say
"give me the list of friends

00:12:21.067 --> 00:12:23.334
"so that I can display
the status updates

00:12:23.334 --> 00:12:25.400
from only the user's friends."

00:12:25.400 --> 00:12:28.667
Uh, and then the App Engine app
in the back-end

00:12:28.667 --> 00:12:32.667
uses the OpenSocial APIs
to talk over to MySpace

00:12:32.667 --> 00:12:35.133
and, uh, get that social data.

00:12:35.133 --> 00:12:36.734
And then the App Engine app
can cache it

00:12:36.734 --> 00:12:38.934
for a period of time,
uh, usually defined

00:12:38.934 --> 00:12:43.067
by the policies
of the social networks.

00:12:43.067 --> 00:12:44.567
So here's the JavaScript code.

00:12:44.567 --> 00:12:47.267
Basically, there's two methods
which are important here,

00:12:47.267 --> 00:12:49.067
one called "getRecentUpdates"

00:12:49.067 --> 00:12:51.801
and another called
"getFriendUpdates."

00:12:51.801 --> 00:12:53.467
Uh, and just builds out
the two screens

00:12:53.467 --> 00:12:55.634
in that app
with the various updates.

00:12:55.634 --> 00:12:57.567
"getFriendUpdates"
is being filtered

00:12:57.567 --> 00:12:59.567
by, uh, your friends.

00:12:59.567 --> 00:13:02.901
So these are JavaScript calls
that end up going off

00:13:02.901 --> 00:13:05.601
to the App Engine back-end.

00:13:05.601 --> 00:13:08.801
And the App Engine back-end
has two major classes.

00:13:08.801 --> 00:13:10.367
Uh, one is an update,

00:13:10.367 --> 00:13:13.067
which represents,
uh, the list of updates

00:13:13.067 --> 00:13:15.434
including the posting time
and the content,

00:13:15.434 --> 00:13:19.200
uh, as well as the OpenSocial ID
of the author.

00:13:19.200 --> 00:13:20.501
Uh, and then a user class,

00:13:20.501 --> 00:13:23.734
which represents that ID
as well as what social network

00:13:23.734 --> 00:13:26.901
they're connected to.

00:13:26.901 --> 00:13:29.334
So on the social code side,

00:13:29.334 --> 00:13:32.667
um, this is basically
the code that's being used,

00:13:32.667 --> 00:13:36.167
uh, using the Java
client library for OpenSocial.

00:13:36.167 --> 00:13:38.434
And we're just doing
some setup here.

00:13:38.434 --> 00:13:39.868
Um, and a large part--

00:13:39.868 --> 00:13:41.934
basically,
this whole first slide,

00:13:41.934 --> 00:13:43.934
uh, with the exception
of the last line,

00:13:43.934 --> 00:13:46.000
is just setting up
your access

00:13:46.000 --> 00:13:47.534
to the social data.

00:13:47.534 --> 00:13:51.067
This is setting up the OAuth
consumerKey and consumerSecret,

00:13:51.067 --> 00:13:52.767
which identifies
your application

00:13:52.767 --> 00:13:54.601
to the social network.

00:13:54.601 --> 00:13:57.567
And then it's setting up
the Access Token Secret,

00:13:57.567 --> 00:14:01.067
which shows that you have access
to that particular user's

00:14:01.067 --> 00:14:02.334
social data.

00:14:02.334 --> 00:14:04.100
And then the last line
is the only line here

00:14:04.100 --> 00:14:06.300
that's really doing something
substantial.

00:14:06.300 --> 00:14:08.834
And that's basically saying
"OpenSocial client,

00:14:08.834 --> 00:14:10.000
"fetch the friends

00:14:10.000 --> 00:14:12.000
of the currently
authenticated user.

00:14:12.000 --> 00:14:13.434
Uh, and it's really
simple data.

00:14:13.434 --> 00:14:15.334
And the only data
that you need here really

00:14:15.334 --> 00:14:17.334
is the ID of the user.

00:14:17.334 --> 00:14:18.734
Uh, in other applications,

00:14:18.734 --> 00:14:20.167
which we'll demonstrate
later on,

00:14:20.167 --> 00:14:21.968
you also use, like,
the thumbnail

00:14:21.968 --> 00:14:24.267
for the, uh,
for the profile picture.

00:14:24.267 --> 00:14:27.434
But this shows you
the basic code here.

00:14:27.434 --> 00:14:29.400
And now we're going
to enhance it

00:14:29.400 --> 00:14:32.701
and, uh, demo what's called
the "where you at?" application,

00:14:32.701 --> 00:14:34.968
uh, which is the last
application,

00:14:34.968 --> 00:14:38.801
but enhanced with a little bit
of native functionality.

00:14:38.801 --> 00:14:42.367
So we're going to go,
and on the Android device here,

00:14:42.367 --> 00:14:44.734
uh, load up the application.

00:14:44.734 --> 00:14:48.167
And, um, I apologize
if my network connection

00:14:48.167 --> 00:14:49.300
was a little weak
at the time

00:14:49.300 --> 00:14:51.534
that I took
this screencast here.

00:14:51.534 --> 00:14:57.267
But I went in and say,
um, now I can see a map.

00:14:57.267 --> 00:15:00.200
Uh, that map plots out
the points

00:15:00.200 --> 00:15:02.734
at which all my friends
made their updates.

00:15:02.734 --> 00:15:07.067
Um, and I can go log in
on any social network here

00:15:07.067 --> 00:15:08.567
that I'm choosing.

00:15:08.567 --> 00:15:11.400
And after I log in,

00:15:11.400 --> 00:15:12.734
I can post and update myself.

00:15:12.734 --> 00:15:14.868
And you can see me
doing that here.

00:15:14.868 --> 00:15:17.901
But first I need to do
the OAuth authorization.

00:15:17.901 --> 00:15:20.300
I'll dive into the details
of OAuth a little bit later.

00:15:20.300 --> 00:15:25.567
But I really wanted to cover
the social aspects first.

00:15:25.567 --> 00:15:27.167
So after I visit
the OAuth flow

00:15:27.167 --> 00:15:29.234
and authorize access
to my data,

00:15:29.234 --> 00:15:31.834
I come back
to the application.

00:15:35.167 --> 00:15:39.567
And wait for it here.
[laughs]

00:15:39.567 --> 00:15:42.901
And it displays the map,
uh, with all the updates.

00:15:42.901 --> 00:15:44.968
And I can go and click
on friends--

00:15:44.968 --> 00:15:47.167
uh, the little friend
link there

00:15:47.167 --> 00:15:51.067
and see the updates
just from my friends.

00:15:51.067 --> 00:15:53.667
Uh, and you can see the list
of textual updates

00:15:53.667 --> 00:15:56.367
was also filtered
based off of my friends.

00:15:56.367 --> 00:15:59.367
And now I can go here
and also post an update.

00:15:59.367 --> 00:16:03.601
And it will include the location
of where I'm currently at,

00:16:03.601 --> 00:16:06.834
uh, at the time that I-I posted
this update.

00:16:06.834 --> 00:16:09.033
And all my friends
will be able to see that.

00:16:09.033 --> 00:16:11.634
So that's taking the basic
web application

00:16:11.634 --> 00:16:15.000
with HTML and JavaScript,
uh, front-end

00:16:15.000 --> 00:16:17.734
and a Java App Engine
back-end,

00:16:17.734 --> 00:16:20.033
and adding some native
functionality

00:16:20.033 --> 00:16:21.167
from the mobile device.

00:16:21.167 --> 00:16:24.067
It uses the Gears,
um, libraries

00:16:24.067 --> 00:16:26.334
to get the location
from the device,

00:16:26.334 --> 00:16:28.267
uh, and post that
up to the container.

00:16:28.267 --> 00:16:31.667
And it allows my friends
to see it.

00:16:31.667 --> 00:16:34.968
So we added just a few little,
uh, functions

00:16:34.968 --> 00:16:37.300
in the JavaScript code
for this application

00:16:37.300 --> 00:16:40.167
to enable this native
functionality.

00:16:40.167 --> 00:16:43.033
Uh, we watch the position
using Google Gears.

00:16:43.033 --> 00:16:45.634
Keep track of the position
where the user's at.

00:16:45.634 --> 00:16:48.300
Uh, and we then use
getNearbyUpdates

00:16:48.300 --> 00:16:51.868
to retrieve the updates
that are near my position

00:16:51.868 --> 00:16:53.200
uh, where I'm currently at

00:16:53.200 --> 00:16:56.434
either based off of GPS,
or IP geolocation,

00:16:56.434 --> 00:16:58.567
or Wi-Fi geolocation.

00:16:58.567 --> 00:17:02.367
And then we update the position
when we post an update.

00:17:05.033 --> 00:17:08.200
So next I'm going to talk
about a purely native app.

00:17:08.200 --> 00:17:10.701
Uh, this app is called
Divide and Conquer.

00:17:10.701 --> 00:17:14.901
And basically what it is
is an open source application

00:17:14.901 --> 00:17:18.067
that's already out there
written by another developer,

00:17:18.067 --> 00:17:20.567
um, which is
the Divide and Conquer game.

00:17:20.567 --> 00:17:23.934
But I extended that with a bit
of social functionality.

00:17:23.934 --> 00:17:26.334
Uh, primarily
a social scoreboard.

00:17:26.334 --> 00:17:31.434
So I'm going to go
on my Android device.

00:17:31.434 --> 00:17:34.000
Click here.
Click "new game."

00:17:34.000 --> 00:17:37.100
I'm going to go around
and play the game a little bit.

00:17:40.000 --> 00:17:41.734
I'm actually going to control
the video here

00:17:41.734 --> 00:17:43.734
so you don't have to watch me
playing for too long.

00:17:43.734 --> 00:17:46.434
But basically,
the objective of--of this

00:17:46.434 --> 00:17:49.801
is to divide off the ball
into the 20%

00:17:49.801 --> 00:17:51.067
of the area of the screen,

00:17:51.067 --> 00:17:53.467
at which point you advance
to the next level.

00:17:53.467 --> 00:17:56.400
However, you lose a life
if the ball hits a line,

00:17:56.400 --> 00:17:58.467
uh, as it's being drawn.

00:17:58.467 --> 00:18:02.367
So I'm going to go through here
and get to level three.

00:18:02.367 --> 00:18:04.000
And then I hit the--
hit the line

00:18:04.000 --> 00:18:06.133
and comes up
a social scoreboard.

00:18:06.133 --> 00:18:08.901
So before this game added
a social functionality,

00:18:08.901 --> 00:18:11.767
basically, you kept on having
the incentive,

00:18:11.767 --> 00:18:14.834
uh, over and over
to score to the next level,

00:18:14.834 --> 00:18:16.367
but you had no way
to share that information

00:18:16.367 --> 00:18:18.400
with your friends
or compete against your friends

00:18:18.400 --> 00:18:19.901
without, like, making
a phone call,

00:18:19.901 --> 00:18:22.501
or sending a text,
or posting to a network

00:18:22.501 --> 00:18:24.767
"hey, I just scored this.
What did you score?"

00:18:24.767 --> 00:18:26.701
In this case
in the social scoreboard,

00:18:26.701 --> 00:18:30.601
we actually, uh, have a global
top score list

00:18:30.601 --> 00:18:34.067
from not just your friends
but anyone that's used

00:18:34.067 --> 00:18:35.901
this application
and may have signed in

00:18:35.901 --> 00:18:38.100
using a variety
of different social networks

00:18:38.100 --> 00:18:40.934
that all support
the OpenSocial APIs.

00:18:40.934 --> 00:18:46.334
Um, and then at the bottom
was, um, the--

00:18:46.334 --> 00:18:49.000
your actual friends,
and their profile pictures,

00:18:49.000 --> 00:18:50.667
and what their top score is.

00:18:50.667 --> 00:18:52.400
So now I'm going to go
a little bit into the code

00:18:52.400 --> 00:18:54.267
and how this works.

00:18:54.267 --> 00:18:57.000
But first,
uh, here's the data flowing.

00:18:57.000 --> 00:19:00.601
So again, here's the actors,
uh, in this application.

00:19:00.601 --> 00:19:03.267
We have the Android device,
uh, which is,

00:19:03.267 --> 00:19:05.400
you know, it's an Android
native application,

00:19:05.400 --> 00:19:08.234
so it's specifically
an Android device in this case.

00:19:08.234 --> 00:19:12.501
Uh, and again, I'm using
MySpaceID and MySpace

00:19:12.501 --> 00:19:15.133
for the social data
and access to the social data.

00:19:15.133 --> 00:19:17.267
And then I'm using
a App Engine back-end.

00:19:17.267 --> 00:19:18.467
In this case,

00:19:18.467 --> 00:19:22.067
it's a Python-based
App Engine back-end.

00:19:22.067 --> 00:19:23.901
Um, and, you know,
just to make sure

00:19:23.901 --> 00:19:25.100
you're all aware,

00:19:25.100 --> 00:19:27.000
I wasn't forced
to use App Engine for this.

00:19:27.000 --> 00:19:28.400
Honestly, it was just
the easiest way

00:19:28.400 --> 00:19:30.734
I could get this application
done very quickly.

00:19:30.734 --> 00:19:32.567
There's some great samples
online,

00:19:32.567 --> 00:19:37.734
which allow you to do JSON,
uh, RPC-based web services,

00:19:37.734 --> 00:19:40.200
uh, with App Engine.

00:19:40.200 --> 00:19:41.634
So we're going
to start off here.

00:19:41.634 --> 00:19:44.100
Uh, the Android device
calls out to MySpace

00:19:44.100 --> 00:19:46.367
and gets an OAuth
request token.

00:19:46.367 --> 00:19:48.801
Um, and the user
gets redirected

00:19:48.801 --> 00:19:49.968
in that browser flow

00:19:49.968 --> 00:19:52.167
that we'll go
into more detail later.

00:19:52.167 --> 00:19:56.133
Then uses the OpenSocial APIs
directly from the Android device

00:19:56.133 --> 00:19:59.300
to go out and get the list
of my friends

00:19:59.300 --> 00:20:02.868
and get their profile URL--
their thumbnail URLs

00:20:02.868 --> 00:20:05.601
and retrieve
their thumbnail data.

00:20:05.601 --> 00:20:09.434
And then when the game is over--
again using that JSON logo--

00:20:09.434 --> 00:20:12.434
uh, when the game is over,
uh, it basically makes

00:20:12.434 --> 00:20:13.968
a JSON RPC request

00:20:13.968 --> 00:20:16.767
and says
"hey, here's my current score,"

00:20:16.767 --> 00:20:19.534
um, and let's that update.

00:20:19.534 --> 00:20:21.400
But in the background
this entire time,

00:20:21.400 --> 00:20:26.000
it's also getting data,
um, on the top score list,

00:20:26.000 --> 00:20:28.234
and getting the data
of your friends,

00:20:28.234 --> 00:20:31.734
and, um, gathering
their top scores

00:20:31.734 --> 00:20:33.067
in a background process

00:20:33.067 --> 00:20:34.968
so that when you get
to the end of the game,

00:20:34.968 --> 00:20:36.400
uh, you're not stuck
with waiting

00:20:36.400 --> 00:20:39.000
for this all to happen.

00:20:39.000 --> 00:20:41.634
So here's a little difference,
uh, comparison

00:20:41.634 --> 00:20:44.200
between the two architectures
for the web app

00:20:44.200 --> 00:20:45.634
and the native app.

00:20:45.634 --> 00:20:48.634
Um, and basically,
the differences here

00:20:48.634 --> 00:20:50.234
in the applications
that I've built--

00:20:50.234 --> 00:20:52.300
and you can do these
different ways--

00:20:52.300 --> 00:20:53.868
Uh, in the applications
that I've built,

00:20:53.868 --> 00:20:55.934
the main difference is that,

00:20:55.934 --> 00:20:59.067
uh, in the native app,
you're accessing the social data

00:20:59.067 --> 00:21:01.701
from MySpace directly
on the device,

00:21:01.701 --> 00:21:05.868
uh, using the Java OpenSocial
client libraries.

00:21:05.868 --> 00:21:10.367
And the web application,
you're accessing the social data

00:21:10.367 --> 00:21:14.033
from a App Engine application
and caching it there.

00:21:14.033 --> 00:21:15.701
Um, but with your native app,

00:21:15.701 --> 00:21:18.734
you could actually, you know,
have the same social data

00:21:18.734 --> 00:21:21.968
be accessed
from the App Engine back-end

00:21:21.968 --> 00:21:25.167
as long as you found a way
to relay that OAuth token

00:21:25.167 --> 00:21:28.167
over to App Engine.

00:21:28.167 --> 00:21:30.334
So we're going to dive in to it
a little bit, the code here.

00:21:30.334 --> 00:21:32.234
DivideAndConquerActivity.

00:21:32.234 --> 00:21:33.334
Uh, for those of you
familiar

00:21:33.334 --> 00:21:35.434
with Android application
development,

00:21:35.434 --> 00:21:37.467
activities are, like,
kind of the main units

00:21:37.467 --> 00:21:38.734
in Android.

00:21:38.734 --> 00:21:41.534
And the DivideAndConquerActivity
was the existing class,

00:21:41.534 --> 00:21:43.801
which already existed--

00:21:43.801 --> 00:21:45.234
existing class
that already existed,

00:21:45.234 --> 00:21:46.868
that's kind of redundant there.

00:21:46.868 --> 00:21:48.701
But anyway,
it was the existing class

00:21:48.701 --> 00:21:51.300
that was the open source class
that controlled

00:21:51.300 --> 00:21:52.801
much of the gameplay.

00:21:52.801 --> 00:21:55.801
And basically what we did then
is add to this class

00:21:55.801 --> 00:21:58.501
some functionality
to collect your top scores,

00:21:58.501 --> 00:22:02.634
collect how long it took you,
uh, to achieve those scores,

00:22:02.634 --> 00:22:06.767
and, uh, then display
the TopScoresDialog.

00:22:06.767 --> 00:22:10.067
But first we had to choose
which social network,

00:22:10.067 --> 00:22:12.033
uh, that you're going
to connect to.

00:22:12.033 --> 00:22:13.400
I didn't show that yet.

00:22:13.400 --> 00:22:15.467
Again, I'm going to dive
into the OAuth stuff later.

00:22:15.467 --> 00:22:18.234
But, uh, and then we have
this social handler

00:22:18.234 --> 00:22:20.934
which controls the access
to the social data,

00:22:20.934 --> 00:22:24.133
connects over to MySpace,
retrieves the social data,

00:22:24.133 --> 00:22:27.100
um, and brings that back
to the device.

00:22:27.100 --> 00:22:28.901
And this all happens
in the background

00:22:28.901 --> 00:22:32.200
in a thread, uh, to avoid
the performance problems

00:22:32.200 --> 00:22:33.634
I was talking about
where you reach

00:22:33.634 --> 00:22:37.501
the end of the game
and have to wait a while.

00:22:37.501 --> 00:22:40.300
And then there's finally
the TopScoresDialog,

00:22:40.300 --> 00:22:41.501
which is that, you know,

00:22:41.501 --> 00:22:44.400
visual display
of the information and its UI.

00:22:44.400 --> 00:22:46.667
And frankly, that's the part
that I spent the longest on

00:22:46.667 --> 00:22:51.000
was just trying to get the UI
to be how I liked.

00:22:51.000 --> 00:22:53.501
So the back-end code,
uh, I mentioned the JSON

00:22:53.501 --> 00:22:56.767
RPC sample code that's out there
for App Engine.

00:22:56.767 --> 00:23:00.501
The back-end code, uh,
has one main method post.

00:23:00.501 --> 00:23:03.334
And then for each
of the HTTP post requests,

00:23:03.334 --> 00:23:05.934
it can go off and call
a particular RPC method.

00:23:05.934 --> 00:23:08.200
And there's three methods
defined here.

00:23:08.200 --> 00:23:12.100
Get the global top scores,
get the top scores for friends,

00:23:12.100 --> 00:23:13.868
and set my score.

00:23:13.868 --> 00:23:16.200
And the SetScore method,
basically,

00:23:16.200 --> 00:23:18.634
all of these APIs I have
is open.

00:23:18.634 --> 00:23:21.267
I don't really authenticate
access to these APIs

00:23:21.267 --> 00:23:22.634
for the App Engine app.

00:23:22.634 --> 00:23:25.601
So, yes, in theory,
you could fake, uh, your scores

00:23:25.601 --> 00:23:27.000
in this app.

00:23:27.000 --> 00:23:29.901
Maybe I'll--I'll figure out
a way to let it, uh, be

00:23:29.901 --> 00:23:31.434
so you can't fake your scores.

00:23:31.434 --> 00:23:35.067
But anyway, when you go off
and you set your score,

00:23:35.067 --> 00:23:37.467
you basically say
"here's my current score."

00:23:37.467 --> 00:23:38.968
And the device
doesn't keep track

00:23:38.968 --> 00:23:40.767
of all your past history.

00:23:40.767 --> 00:23:43.133
It just keeps track
of your current score.

00:23:43.133 --> 00:23:44.234
And then on the server side,

00:23:44.234 --> 00:23:46.567
it says "hey,
was that top score--

00:23:46.567 --> 00:23:48.367
"or was that score
your best score yet

00:23:48.367 --> 00:23:49.601
in this application?"

00:23:49.601 --> 00:23:53.801
And if so, it stores it.
If not, it just drops it.

00:23:53.801 --> 00:23:55.601
So step by step.

00:23:55.601 --> 00:23:57.868
We have the mobile app.
We go into it.

00:23:57.868 --> 00:24:00.033
We go in and choose
our social network.

00:24:00.033 --> 00:24:02.000
And you'll see
that video later.

00:24:02.000 --> 00:24:04.334
Uh, and after we choose
our social network,

00:24:04.334 --> 00:24:08.467
we go over to authorize access
to our social data.

00:24:08.467 --> 00:24:10.234
In this case,
I'm using Google.

00:24:10.234 --> 00:24:14.567
But in the demos that I showed,
uh, some of it was MySpace.

00:24:14.567 --> 00:24:16.300
Works the same way
either way.

00:24:16.300 --> 00:24:17.467
Comes back to the game

00:24:17.467 --> 00:24:19.968
and then it runs
that background process.

00:24:19.968 --> 00:24:22.634
And then when you're dead,

00:24:22.634 --> 00:24:24.801
it displays
the top score list.

00:24:24.801 --> 00:24:26.868
But in the end,
that's really our goal

00:24:26.868 --> 00:24:29.334
is to display
this top score list

00:24:29.334 --> 00:24:30.801
and increase
some competitiveness

00:24:30.801 --> 00:24:32.200
within the game.

00:24:32.200 --> 00:24:35.868
Increase the amount of time
people are playing the game.

00:24:35.868 --> 00:24:37.868
So the background stuff
that's happening,

00:24:37.868 --> 00:24:41.534
um, getting the top score list,
is basically--

00:24:41.534 --> 00:24:43.801
this is the JSON RPC stuff.

00:24:43.801 --> 00:24:46.868
Um, we have a single argument
that I add here

00:24:46.868 --> 00:24:48.334
and say "getTopScores."

00:24:48.334 --> 00:24:53.067
And then I call over to my HTTP
back--or App Engine back-end,

00:24:53.067 --> 00:24:55.667
um, and call that RPC method.

00:24:55.667 --> 00:24:57.000
I get some JSON data back.

00:24:57.000 --> 00:24:59.467
Although I don't show
how I parse that JSON data

00:24:59.467 --> 00:25:02.434
in these slides.

00:25:02.434 --> 00:25:05.300
Getting self and friends,
uh, again, also happens

00:25:05.300 --> 00:25:06.601
in the background.

00:25:06.601 --> 00:25:10.000
It basically sets up
all the identity stuff.

00:25:10.000 --> 00:25:13.667
And...

00:25:13.667 --> 00:25:15.834
then goes and fetches friends

00:25:15.834 --> 00:25:18.434
and fetches the current person
authenticated.

00:25:18.434 --> 00:25:20.033
Basically, I fetched
the current person

00:25:20.033 --> 00:25:22.067
'cause that's the way
I get the ID.

00:25:22.067 --> 00:25:23.767
So the OAuth token,
which I got back

00:25:23.767 --> 00:25:26.701
after the whole OAuth flow,
gives me access.

00:25:26.701 --> 00:25:28.133
And then I go off
to the container.

00:25:28.133 --> 00:25:31.434
It says--it'll say who--
"what's the ID for this user?"

00:25:31.434 --> 00:25:34.367
And it's an OpenSocial ID
on a particular container.

00:25:34.367 --> 00:25:36.100
Uh, but I need to know that
in order to keep track

00:25:36.100 --> 00:25:37.501
of my top scores.

00:25:37.501 --> 00:25:39.133
But I also need
to know my friends.

00:25:39.133 --> 00:25:42.300
I'm making these
as two separate calls here.

00:25:42.300 --> 00:25:44.801
Um, as a caveat,
if you were doing this

00:25:44.801 --> 00:25:46.067
in a real production
application,

00:25:46.067 --> 00:25:48.968
you might want to actually
do this as a batch call.

00:25:48.968 --> 00:25:50.968
OpenSocial supports
the concept of batching

00:25:50.968 --> 00:25:52.267
multiple requests together.

00:25:52.267 --> 00:25:55.734
And that would be a little bit
more efficient.

00:25:55.734 --> 00:25:57.801
So after I fetch my friends
and fetch--

00:25:57.801 --> 00:25:59.601
fetch the individual,
uh, people,

00:25:59.601 --> 00:26:02.601
I then go through and put stuff
in a return hash table.

00:26:02.601 --> 00:26:06.701
But, uh, that's not
that important for this.

00:26:06.701 --> 00:26:09.267
So then we get the top scores
of our friends.

00:26:09.267 --> 00:26:12.601
Uh, and again,
one simple line here difference

00:26:12.601 --> 00:26:15.667
between this and the last code
and that's basically

00:26:15.667 --> 00:26:18.901
the different, um, uh, argument
than it's specifying

00:26:18.901 --> 00:26:20.667
for the RPC score.

00:26:20.667 --> 00:26:25.033
But then after I get it,

00:26:25.033 --> 00:26:26.567
I then need
to get the pictures

00:26:26.567 --> 00:26:28.167
for each of those people.

00:26:28.167 --> 00:26:31.000
So what I do is I have
the friend object,

00:26:31.000 --> 00:26:35.300
which in the Java client library
is an OpenSocial person object.

00:26:35.300 --> 00:26:37.834
And I'm looping through
each of the people

00:26:37.834 --> 00:26:40.033
that I retrieve back
as friends

00:26:40.033 --> 00:26:42.501
and getting
their thumbnail URL.

00:26:42.501 --> 00:26:46.234
And if they were
in the top score list,

00:26:46.234 --> 00:26:49.133
then I retrieve that thumbnail
from the server

00:26:49.133 --> 00:26:52.000
and put the location
of that file

00:26:52.000 --> 00:26:54.634
on the Android device
into a hash table

00:26:54.634 --> 00:26:56.000
for later access

00:26:56.000 --> 00:27:00.100
when we display
the top score list.

00:27:00.100 --> 00:27:01.801
But before we display
the top score list,

00:27:01.801 --> 00:27:03.534
we actually have to set
our score

00:27:03.534 --> 00:27:04.634
and that's what it's doing.

00:27:04.634 --> 00:27:07.234
Again just doing
one simple argument

00:27:07.234 --> 00:27:09.501
saying the RPC method
we're calling,

00:27:09.501 --> 00:27:11.667
setting the level,
and the time taken,

00:27:11.667 --> 00:27:13.067
as well as the name.

00:27:13.067 --> 00:27:16.067
So because we can display
that global top score list

00:27:16.067 --> 00:27:19.367
and any of the users
who are using this application

00:27:19.367 --> 00:27:22.300
can come from a variety
of different social networks,

00:27:22.300 --> 00:27:25.334
I won't always have access
to say "given this ID,

00:27:25.334 --> 00:27:26.400
what's their name?"

00:27:26.400 --> 00:27:28.000
so I store that name
at the time

00:27:28.000 --> 00:27:33.434
that the person stor--
or gets their top score.

00:27:33.434 --> 00:27:35.901
So I bounced over this
a little bit here,

00:27:35.901 --> 00:27:37.334
the OAuth authorization,

00:27:37.334 --> 00:27:40.100
because I really wanted to talk
about the social stuff first.

00:27:40.100 --> 00:27:41.501
But now
let's get into a little bit

00:27:41.501 --> 00:27:43.300
about how the OAuth
authorization

00:27:43.300 --> 00:27:46.400
enables us to get access
to use this data.

00:27:48.300 --> 00:27:49.901
There's a lot of words
in these slides.

00:27:49.901 --> 00:27:53.033
These slides will be available
online later.

00:27:53.033 --> 00:27:55.200
But basically,
OAuth is a standard

00:27:55.200 --> 00:27:57.767
that's used across
many different APIs.

00:27:57.767 --> 00:27:59.033
Uh, in this case,

00:27:59.033 --> 00:28:00.801
almost all the OpenSocial
containers

00:28:00.801 --> 00:28:03.367
in one way or the other
use OAuth.

00:28:03.367 --> 00:28:07.667
Um, and it enables
the containers or APIs

00:28:07.667 --> 00:28:10.801
to authenticate
and authorize users

00:28:10.801 --> 00:28:12.167
how they wish.

00:28:12.167 --> 00:28:15.167
So basically it's all about
a flow to a web page.

00:28:15.167 --> 00:28:17.234
Uh, it's not about actually
getting a username

00:28:17.234 --> 00:28:18.367
and password.

00:28:18.367 --> 00:28:19.801
So it's a flow to a web page

00:28:19.801 --> 00:28:21.701
where the user generally
would enter their username

00:28:21.701 --> 00:28:24.300
and password directly
on that web page,

00:28:24.300 --> 00:28:28.434
but not give it to the actual
application author.

00:28:28.434 --> 00:28:30.701
Uh, and there's two
different types.

00:28:30.701 --> 00:28:32.801
There's this two-legged,
which is the newer way,

00:28:32.801 --> 00:28:34.033
and there's a three-legged,

00:28:34.033 --> 00:28:36.234
uh, which is
that web browser flow.

00:28:36.234 --> 00:28:38.200
I'll go into the types here
in the next slide.

00:28:38.200 --> 00:28:42.400
But, uh, first some caveats,
which I'll go into detail on.

00:28:42.400 --> 00:28:45.167
But basically, installed apps
have no way

00:28:45.167 --> 00:28:47.934
to really identify themselves
securely.

00:28:47.934 --> 00:28:50.601
There's those consumer keys
and secrets.

00:28:50.601 --> 00:28:54.067
And those are transmitted,
um, over the wire

00:28:54.067 --> 00:28:56.968
in your installed app
when the user downloads the app.

00:28:56.968 --> 00:28:58.501
So there's some things
that we're doing

00:28:58.501 --> 00:29:01.467
to get around that
or at least mitigate that.

00:29:01.467 --> 00:29:04.501
Um, and then it requires
the web browser

00:29:04.501 --> 00:29:06.067
for the authorization flow,

00:29:06.067 --> 00:29:08.400
which some application
developers or UI designers

00:29:08.400 --> 00:29:11.167
may not be used to.

00:29:11.167 --> 00:29:13.100
So the types, uh,

00:29:13.100 --> 00:29:16.000
I mentioned three-legged OAuth
and two-legged OAuth.

00:29:16.000 --> 00:29:17.534
Three-legged
is what you're seeing

00:29:17.534 --> 00:29:20.234
in all the examples
that I'm using here today.

00:29:20.234 --> 00:29:23.067
And basically, the idea
behind three-legged

00:29:23.067 --> 00:29:25.968
is there may not be
an actual application

00:29:25.968 --> 00:29:28.133
that sits inside
a social network.

00:29:28.133 --> 00:29:30.133
Uh, in this case,
my applications

00:29:30.133 --> 00:29:33.100
have no corresponding app
that sits in MySpace

00:29:33.100 --> 00:29:35.100
or hi5 or whatever.

00:29:35.100 --> 00:29:38.267
Um, but basically it allows you
to redirect.

00:29:38.267 --> 00:29:42.234
And the user can grant access,
uh, usually on a forever basis

00:29:42.234 --> 00:29:45.501
until revoked,
uh, to their social data.

00:29:45.501 --> 00:29:47.667
And revocation can happen

00:29:47.667 --> 00:29:50.601
depending on how the container
wishes to implement it.

00:29:50.601 --> 00:29:52.334
Uh, and usually
that would be implemented

00:29:52.334 --> 00:29:54.767
in a settings control panel
under your account

00:29:54.767 --> 00:29:56.434
where you can choose,
uh, to revoke

00:29:56.434 --> 00:30:00.133
specific a application's access
to your data.

00:30:00.133 --> 00:30:01.934
In the two-legged
OAuth scenario,

00:30:01.934 --> 00:30:05.467
you typically have an installed
OpenSocial application

00:30:05.467 --> 00:30:07.467
that sits inside a container.

00:30:07.467 --> 00:30:09.067
And that installed
application--

00:30:09.067 --> 00:30:12.400
when you go through the process
of installing the app,

00:30:12.400 --> 00:30:14.868
um, you're basically
granting access

00:30:14.868 --> 00:30:17.567
for that app to access
your social data.

00:30:17.567 --> 00:30:19.434
So then that app developer
on the networks

00:30:19.434 --> 00:30:23.901
that support this can then go
and get a two-legged OAuth

00:30:23.901 --> 00:30:26.400
consumer token
and consumer secret

00:30:26.400 --> 00:30:30.400
which then they can use
to access any of the data

00:30:30.400 --> 00:30:32.501
that--for each of the users

00:30:32.501 --> 00:30:34.067
who have installed
this application

00:30:34.067 --> 00:30:35.801
and granted access.

00:30:35.801 --> 00:30:38.133
Access is generally revoked
for these applications

00:30:38.133 --> 00:30:42.567
at the time the user
uninstalls the application.

00:30:42.567 --> 00:30:47.267
So because all of these examples
use three-legged OAuth,

00:30:47.267 --> 00:30:49.067
and the REST
and RPC libraries,

00:30:49.067 --> 00:30:50.868
I thought I'd give you
a list of the containers

00:30:50.868 --> 00:30:52.033
which I'm aware of.

00:30:52.033 --> 00:30:54.234
Forgive me if I-I miss some.

00:30:54.234 --> 00:30:56.200
But these are the containers
that I'm aware of

00:30:56.200 --> 00:30:57.901
that support
these technologies.

00:30:57.901 --> 00:30:59.601
So three-legged OAuth

00:30:59.601 --> 00:31:04.334
and then the REST and RPC APIs
for accessing a person

00:31:04.334 --> 00:31:05.901
and their list of friends.

00:31:05.901 --> 00:31:08.934
Some containers may also support
additional REST and RPC APIs

00:31:08.934 --> 00:31:11.033
for accessing things
like activities

00:31:11.033 --> 00:31:12.801
or application data.

00:31:15.367 --> 00:31:18.534
So I mentioned this caveat,
the installed app identification

00:31:18.534 --> 00:31:19.667
not secure.

00:31:19.667 --> 00:31:21.000
Uh, hopefully the word
"not secure"

00:31:21.000 --> 00:31:22.400
didn't scare you too much.

00:31:22.400 --> 00:31:24.968
It doesn't scare most users,
frankly.

00:31:24.968 --> 00:31:27.534
Uh, but apps
are typically identified

00:31:27.534 --> 00:31:30.133
by that consumer key
and secret.

00:31:30.133 --> 00:31:32.467
When a user goes and installs
your application

00:31:32.467 --> 00:31:33.634
on a mobile device,

00:31:33.634 --> 00:31:35.801
they're downloading
the application.

00:31:35.801 --> 00:31:38.934
Savvy users could then take
that application

00:31:38.934 --> 00:31:41.734
and run something like strings
on it to get the strings

00:31:41.734 --> 00:31:43.234
out of the app.

00:31:43.234 --> 00:31:47.100
And thereby, your consumer key
and secrets are compromised.

00:31:47.100 --> 00:31:48.667
There's things that you can do
to make it

00:31:48.667 --> 00:31:49.834
a little bit more difficult.

00:31:49.834 --> 00:31:52.434
But you can never really
make it impossible.

00:31:52.434 --> 00:31:55.834
So what this means is that
if you have an application

00:31:55.834 --> 00:31:57.767
that you called "foo,"

00:31:57.767 --> 00:32:00.467
some other application developer
could come along

00:32:00.467 --> 00:32:03.334
and take your consumer key
and secret

00:32:03.334 --> 00:32:05.434
and pretend to be "foo"

00:32:05.434 --> 00:32:07.467
and actually be evil "foo"

00:32:07.467 --> 00:32:09.234
in collecting someone's
social data.

00:32:09.234 --> 00:32:13.334
So what we do to kind of
at least make it real,

00:32:13.334 --> 00:32:16.334
uh, in terms of share
the correct information

00:32:16.334 --> 00:32:17.934
with the users
and granting access

00:32:17.934 --> 00:32:20.767
to their applications,
is to display some warnings.

00:32:20.767 --> 00:32:22.167
Uh, and we display warnings.

00:32:22.167 --> 00:32:23.467
And basically,
there are two ways

00:32:23.467 --> 00:32:24.734
that we can display warnings.

00:32:24.734 --> 00:32:27.000
There's one at the top here
just saying

00:32:27.000 --> 00:32:29.334
that there--the web site's
registered,

00:32:29.334 --> 00:32:31.267
uh, or the application
is registered,

00:32:31.267 --> 00:32:33.634
but isn't sending stuff
securely.

00:32:33.634 --> 00:32:36.334
And the other way
is, uh, a new solution,

00:32:36.334 --> 00:32:38.133
which I think we announced,
like, last week

00:32:38.133 --> 00:32:40.067
at the Internet Identity
Workshop.

00:32:40.067 --> 00:32:42.701
And basically we publish
a consumer key

00:32:42.701 --> 00:32:45.968
and a consumer secret
for any application to use.

00:32:45.968 --> 00:32:48.934
And it's called "anonymous"
and the secret's anonymous.

00:32:48.934 --> 00:32:51.100
Uh, and then allow them
to identify themselves

00:32:51.100 --> 00:32:54.367
by providing an additional
extended property,

00:32:54.367 --> 00:32:57.968
uh, in the OAuth request,
called the xoauth_displayname.

00:32:57.968 --> 00:33:01.300
And then it produces a warning
like what's down at the bottom.

00:33:01.300 --> 00:33:03.234
Uh, and if you can't read it,
basically,

00:33:03.234 --> 00:33:05.367
"the application
has directed you here

00:33:05.367 --> 00:33:08.267
claims to be" and then
that xoauth_displayname,

00:33:08.267 --> 00:33:09.667
Photo Editor in this case,

00:33:09.667 --> 00:33:11.334
"but we're unable to verify.

00:33:11.334 --> 00:33:15.033
"Please make sure that you went
through a proper process

00:33:15.033 --> 00:33:16.734
to access this application."

00:33:16.734 --> 00:33:19.167
So usually if a user
clicks on an icon

00:33:19.167 --> 00:33:21.267
on an application
that they trust

00:33:21.267 --> 00:33:22.901
and a web browser pops open,

00:33:22.901 --> 00:33:24.400
it's--it's more than likely

00:33:24.400 --> 00:33:26.968
that the, uh, application
that they just clicked on

00:33:26.968 --> 00:33:29.067
popped open that web browser.

00:33:29.067 --> 00:33:31.667
But making sure
that the user is aware--

00:33:31.667 --> 00:33:33.400
and you guys as app developers
should be aware

00:33:33.400 --> 00:33:35.734
of how this works.

00:33:35.734 --> 00:33:39.467
So OAuth has two basic flows
in the three-legged scenario.

00:33:39.467 --> 00:33:42.767
Uh, we talked about web apps
and we talked about native apps.

00:33:42.767 --> 00:33:44.601
These each have different
types of flows.

00:33:44.601 --> 00:33:47.067
So I'm just going to go
through that here.

00:33:47.067 --> 00:33:49.734
In a web application,
you start off on the web app.

00:33:49.734 --> 00:33:51.067
In the native application,

00:33:51.067 --> 00:33:53.801
you start off on a native app
running on the device.

00:33:53.801 --> 00:33:56.334
But the next step
is always the same.

00:33:56.334 --> 00:33:58.501
Regardless of whether
you're a web application

00:33:58.501 --> 00:34:00.334
or you're
a native application,

00:34:00.334 --> 00:34:02.901
you have to pop open
a web browser,

00:34:02.901 --> 00:34:05.934
uh, and ask users
to authorize access

00:34:05.934 --> 00:34:06.934
to your data.

00:34:06.934 --> 00:34:08.167
And I'll repeat here.

00:34:08.167 --> 00:34:13.200
Basically, the reason is
is that the data provider

00:34:13.200 --> 00:34:15.634
who's hosting these APIs
can choose

00:34:15.634 --> 00:34:17.701
to authenticate and authorize
access to their data

00:34:17.701 --> 00:34:19.033
however they want.

00:34:19.033 --> 00:34:21.334
It's not necessarily
a username and password.

00:34:21.334 --> 00:34:24.234
It could be something like
a secure ID or what have you.

00:34:24.234 --> 00:34:27.000
In practice today, most of them
are usernames and passwords.

00:34:27.000 --> 00:34:28.767
But they don't want
their users

00:34:28.767 --> 00:34:30.701
to be entering their username
and passwords

00:34:30.701 --> 00:34:34.467
in any app, on any device,
or on any web site.

00:34:34.467 --> 00:34:35.801
They want to keep that

00:34:35.801 --> 00:34:38.300
onto their particular
application.

00:34:38.300 --> 00:34:40.767
So there's a little bit
more trust here,

00:34:40.767 --> 00:34:42.801
uh, when user goes over
and, you know,

00:34:42.801 --> 00:34:45.000
sees the lock
of an SSL web page,

00:34:45.000 --> 00:34:46.834
and sees its myspace.com,

00:34:46.834 --> 00:34:49.000
or google.com in this case,

00:34:49.000 --> 00:34:50.634
and that's
where they're entering

00:34:50.634 --> 00:34:52.300
their credentials.

00:34:52.300 --> 00:34:55.968
You could also do this flow,
uh, built inside--

00:34:55.968 --> 00:34:57.033
in the native app case.

00:34:57.033 --> 00:34:58.801
You could do it inside
of WebView.

00:34:58.801 --> 00:35:01.601
I did a little bit
of experimentation with that.

00:35:01.601 --> 00:35:04.801
Basically, you--you build
a web browser into the app.

00:35:04.801 --> 00:35:06.701
And there's easy ways
to do that on Android

00:35:06.701 --> 00:35:07.934
and also on iPhones.

00:35:07.934 --> 00:35:09.934
But the real key point here

00:35:09.934 --> 00:35:11.767
is then the user
cannot be assured

00:35:11.767 --> 00:35:13.868
that they're entering
their credentials

00:35:13.868 --> 00:35:15.934
into the correct place.

00:35:15.934 --> 00:35:17.801
Whereas if you pop open
a web browser,

00:35:17.801 --> 00:35:19.701
they upgrade their assurance.

00:35:19.701 --> 00:35:21.467
And this is provided
that, you know,

00:35:21.467 --> 00:35:24.734
the device or computer you have
has some sort of sandboxing

00:35:24.734 --> 00:35:26.400
for applications.

00:35:26.400 --> 00:35:27.434
On most desktop apps,

00:35:27.434 --> 00:35:30.334
if you installed the app
on your desktop,

00:35:30.334 --> 00:35:31.968
they could already have access
and, you know,

00:35:31.968 --> 00:35:33.734
do a keylogger or something
like that.

00:35:33.734 --> 00:35:35.167
So--but, you know,

00:35:35.167 --> 00:35:37.901
just to basically mitigate
these problems.

00:35:37.901 --> 00:35:41.701
Um, and then at the end here
after you authorize access

00:35:41.701 --> 00:35:44.868
to the data, it just redirects
to where you came from.

00:35:44.868 --> 00:35:47.834
So in the top case, it redirects
back to the other web page.

00:35:47.834 --> 00:35:51.167
In the bottom case, it redirects
back to the native application.

00:35:51.167 --> 00:35:54.601
Uh, in Android devices
and also iPhones,

00:35:54.601 --> 00:35:57.501
basically, you can register
protocol handlers.

00:35:57.501 --> 00:35:59.734
So I think
my protocol handler in here

00:35:59.734 --> 00:36:04.534
is, like, android-
divideandconquer-socialapp://

00:36:04.534 --> 00:36:06.133
or something like that.

00:36:06.133 --> 00:36:09.000
And basically
as soon as I click

00:36:09.000 --> 00:36:12.133
on the authorize access
in the OAuth flow,

00:36:12.133 --> 00:36:15.167
it calls a URL
with that protocol

00:36:15.167 --> 00:36:16.434
and then the Android device

00:36:16.434 --> 00:36:19.234
knows to pop open
this application,

00:36:19.234 --> 00:36:23.601
uh, and take the OAuth token
back from the server.

00:36:23.601 --> 00:36:25.234
So here's an example
in the native app

00:36:25.234 --> 00:36:26.467
of me running through that.

00:36:26.467 --> 00:36:28.234
I have a settings dialog.

00:36:28.234 --> 00:36:30.234
I choose my social network.

00:36:30.234 --> 00:36:31.400
And like I said,
this can be a list

00:36:31.400 --> 00:36:33.434
of a variety
of different networks.

00:36:33.434 --> 00:36:34.767
In this case,
it's Google I/O.

00:36:34.767 --> 00:36:37.334
I'm choosing to log in
to my Google account.

00:36:37.334 --> 00:36:40.234
Um, and it pops open
a web browser.

00:36:40.234 --> 00:36:43.334
I type in my username here.

00:36:43.334 --> 00:36:45.968
I also type in my password.

00:36:45.968 --> 00:36:49.100
And please, folks,
this is not my real password--

00:36:49.100 --> 00:36:52.200
I changed my password
for recording this demo--

00:36:52.200 --> 00:36:54.567
[laughs] but don't lock
my account out

00:36:54.567 --> 00:36:55.901
by trying, please.

00:36:55.901 --> 00:36:58.000
Anyway, so I log in.

00:36:58.000 --> 00:37:01.467
And then scroll down here.

00:37:01.467 --> 00:37:03.968
You can see the warning message
that we talked about later.

00:37:03.968 --> 00:37:07.868
In this case, I'm actually using
consumer key and secret,

00:37:07.868 --> 00:37:09.534
not using the anonymous
anonymous.

00:37:09.534 --> 00:37:11.000
But I should have.

00:37:11.000 --> 00:37:14.167
And then grant access.
Now I'm back in the application.

00:37:14.167 --> 00:37:16.767
The application has started up
that background thread,

00:37:16.767 --> 00:37:19.634
which goes off and retrieves
all the social data,

00:37:19.634 --> 00:37:21.801
and the thumbnail pictures,
and that sort of thing

00:37:21.801 --> 00:37:23.133
in the background

00:37:23.133 --> 00:37:24.534
so that while I'm playing,

00:37:24.534 --> 00:37:26.901
that information's
made available.

00:37:26.901 --> 00:37:29.100
As long as I don't die
too quickly,

00:37:29.100 --> 00:37:30.834
I won't have to wait
at the end of the game

00:37:30.834 --> 00:37:33.868
to see the top score list.

00:37:33.868 --> 00:37:36.834
So let's see how this code works
a little bit

00:37:36.834 --> 00:37:39.000
when we're selecting
a network here.

00:37:39.000 --> 00:37:41.434
The big thing is
on DialogClosed.

00:37:41.434 --> 00:37:45.234
So after I say "yes, log in
to the network"

00:37:45.234 --> 00:37:47.501
and the dialog box closes,

00:37:47.501 --> 00:37:49.767
I build up
my OpenSocial client

00:37:49.767 --> 00:37:51.934
and get
an OAuth request token.

00:37:51.934 --> 00:37:54.467
And you can see
that Android scheme

00:37:54.467 --> 00:37:55.901
is that, you know,

00:37:55.901 --> 00:37:59.501
opensocial-androidwhatever://
thing that I was talking about.

00:37:59.501 --> 00:38:02.000
Um, and then I'm telling
the Android device

00:38:02.000 --> 00:38:04.667
to browse to a particular
web page.

00:38:04.667 --> 00:38:07.601
An Android device knows exactly
how to browse to a web page

00:38:07.601 --> 00:38:10.934
by pop opening--
popping up the web browser.

00:38:10.934 --> 00:38:14.868
And that automatically happens
from then on.

00:38:14.868 --> 00:38:18.868
Okay. So I talked a lot
about Android.

00:38:18.868 --> 00:38:22.434
You all are probably wondering:
what about the iPhone?

00:38:22.434 --> 00:38:26.334
Um, here is an example
of an iPhone application

00:38:26.334 --> 00:38:30.300
using the, um,

00:38:30.300 --> 00:38:32.968
using the Objective-C
client library.

00:38:32.968 --> 00:38:34.634
and some iPhone sample code.

00:38:34.634 --> 00:38:36.033
It's a native app.

00:38:36.033 --> 00:38:40.300
I go down here
and click on "fetch friends."

00:38:40.300 --> 00:38:45.901
And choose the social network
that I want to connect to.

00:38:45.901 --> 00:38:47.367
Plaxo in this case,

00:38:47.367 --> 00:38:49.534
but it could be
any of those others.

00:38:49.534 --> 00:38:51.467
It then pops open
the web browser

00:38:51.467 --> 00:38:53.367
and the Plaxo login page.

00:38:53.367 --> 00:38:54.901
I know where the buttons
are located here.

00:38:54.901 --> 00:38:56.200
So I don't have to zoom in.

00:38:56.200 --> 00:38:57.934
But I click "allow access."

00:38:57.934 --> 00:39:00.434
You can see there's
a similar warning message.

00:39:00.434 --> 00:39:03.167
But then it returns back
to the application

00:39:03.167 --> 00:39:06.968
and shows my list of friends
from Plaxo.

00:39:06.968 --> 00:39:09.734
Um, so you can imagine here,
you know, although I didn't have

00:39:09.734 --> 00:39:12.300
a really cool in-depth demo
for the iPhone,

00:39:12.300 --> 00:39:14.534
the same type of application
that we showed

00:39:14.534 --> 00:39:17.000
as a native app
for Divide and Conquer

00:39:17.000 --> 00:39:19.434
on an Android device could also
very easily be written

00:39:19.434 --> 00:39:21.634
on the iPhone
using this library

00:39:21.634 --> 00:39:23.200
and using some
of the sample code

00:39:23.200 --> 00:39:26.167
that we've provided.

00:39:26.167 --> 00:39:28.033
But what about the future?

00:39:28.033 --> 00:39:31.367
Um, the future is hopefully
very bright.

00:39:31.367 --> 00:39:34.634
Uh, basically,
these demonstrations showed--

00:39:34.634 --> 00:39:36.434
uh, there's a lot of reasons
right now

00:39:36.434 --> 00:39:38.567
that you might want to build
a native application

00:39:38.567 --> 00:39:40.534
to access the social data.

00:39:40.534 --> 00:39:43.300
But the things that are coming
down the line,

00:39:43.300 --> 00:39:45.667
uh, particularly the stuff
that Vic talked about

00:39:45.667 --> 00:39:49.234
in the keynote with HTML 5,
the Canvas, the Database,

00:39:49.234 --> 00:39:52.734
the App Cache, can all help you
make web applications

00:39:52.734 --> 00:39:55.300
which are more performant

00:39:55.300 --> 00:39:58.834
and use greater functionality
in the devices.

00:39:58.834 --> 00:40:01.734
Uh, things like Canvas
and SVG support,

00:40:01.734 --> 00:40:04.067
you could easily make
that Divide and Conquer game.

00:40:04.067 --> 00:40:06.000
And there's demos out there
on the web.

00:40:06.000 --> 00:40:07.834
You saw some stuff
in the keynote.

00:40:07.834 --> 00:40:10.400
Um, and then you can use
the same technologies

00:40:10.400 --> 00:40:13.734
of--of Database and App Cache
to make that application

00:40:13.734 --> 00:40:17.400
load faster even when
the user's offline.

00:40:17.400 --> 00:40:18.634
There's also a standard

00:40:18.634 --> 00:40:20.801
that was kind of looped
in with some of this.

00:40:20.801 --> 00:40:23.901
There's a W3C
geolocation APIs standard

00:40:23.901 --> 00:40:28.067
out there to get access
to the location of a user,

00:40:28.067 --> 00:40:30.734
uh, without using something
like Gears,

00:40:30.734 --> 00:40:33.767
but using a standard that works
on many different platforms.

00:40:33.767 --> 00:40:35.667
And location APIs
will be available

00:40:35.667 --> 00:40:37.834
in the upcoming
iPhone software.

00:40:37.834 --> 00:40:40.400
But for now, you might have
to do a little bit of a fork

00:40:40.400 --> 00:40:43.000
depending on whether
you're supporting iPhone,

00:40:43.000 --> 00:40:45.501
or Android,
or other devices.

00:40:45.501 --> 00:40:48.367
Um, and then just generally
improved browser performance.

00:40:48.367 --> 00:40:50.000
Right now it takes
a lot of time

00:40:50.000 --> 00:40:53.067
to load up a web application
for the first time.

00:40:53.067 --> 00:40:55.100
It has to load the web browser
into memory

00:40:55.100 --> 00:40:57.234
and load all the code
for parsing your JavaScript,

00:40:57.234 --> 00:40:59.734
and HTML,
and--and that sort of thing.

00:40:59.734 --> 00:41:03.300
But that will be improved
over time.

00:41:03.300 --> 00:41:06.000
So here's some credits
for the closed caption--

00:41:06.000 --> 00:41:07.234
or closed captioned--

00:41:07.234 --> 00:41:09.901
CC means closed captioned,
apparently, to me today.

00:41:09.901 --> 00:41:12.133
Creative Commons-licensed
photos.

00:41:12.133 --> 00:41:13.868
So thank you very much
for Flickr

00:41:13.868 --> 00:41:16.167
for making it easy
to find these.

00:41:16.167 --> 00:41:18.434
Uh, and thank you
for all these photographers

00:41:18.434 --> 00:41:20.234
for taking the pictures.

00:41:20.234 --> 00:41:22.634
And now it's time
for questions.

00:41:22.634 --> 00:41:25.334
You can feel free
to come to the microphones

00:41:25.334 --> 00:41:27.100
like I mentioned earlier,

00:41:27.100 --> 00:41:30.667
or you can post your questions
at the URL below

00:41:30.667 --> 00:41:32.100
on Google Moderator.

00:41:32.100 --> 00:41:35.033
And I'll start off by taking
some microphone questions.

00:41:35.033 --> 00:41:37.868
Um, over there.

00:41:37.868 --> 00:41:39.534
man: Thank you
for a good presentation.

00:41:39.534 --> 00:41:40.767
I appreciate it.

00:41:40.767 --> 00:41:42.767
Um, my question
is in regards

00:41:42.767 --> 00:41:46.934
to the push
versus the pull model.

00:41:46.934 --> 00:41:49.000
Um, and I'm interested
in a model

00:41:49.000 --> 00:41:52.267
where events are pushed
from the server

00:41:52.267 --> 00:41:54.501
to the web application

00:41:54.501 --> 00:41:58.801
without the user having
to manually click on something

00:41:58.801 --> 00:42:00.501
in order for their view
to update

00:42:00.501 --> 00:42:02.734
or to go fetch
the latest information.

00:42:02.734 --> 00:42:05.133
But that information
is seamlessly updated

00:42:05.133 --> 00:42:06.934
to those web clients.

00:42:06.934 --> 00:42:08.200
Boyd: Okay.

00:42:08.200 --> 00:42:11.334
Um, so I'm not aware
of anything right now

00:42:11.334 --> 00:42:13.601
which really does
the push model that well.

00:42:13.601 --> 00:42:16.067
You could use protocols
like XMTP

00:42:16.067 --> 00:42:17.367
or something like that,

00:42:17.367 --> 00:42:21.567
uh, or even SMS to do pushes
from providers

00:42:21.567 --> 00:42:23.968
like MySpace, or Plaxo,
or whatever.

00:42:23.968 --> 00:42:25.534
They haven't implemented
any of that

00:42:25.534 --> 00:42:27.367
as far as I'm aware
to push that out

00:42:27.367 --> 00:42:29.901
in an efficient way
to the devices.

00:42:29.901 --> 00:42:31.801
You are seeing though
some things--

00:42:31.801 --> 00:42:33.767
technologies coming out
to make pool

00:42:33.767 --> 00:42:35.567
a lot more efficient.

00:42:35.567 --> 00:42:38.234
Uh, I don't know
when the session was or is.

00:42:38.234 --> 00:42:39.367
I should probably know this.

00:42:39.367 --> 00:42:41.033
But there's a YouTube session

00:42:41.033 --> 00:42:43.601
talking about their
activity stream APIs.

00:42:43.601 --> 00:42:46.067
And they talk
about the SUP protocol.

00:42:46.067 --> 00:42:48.400
I think it's Simple Update
Protocol.

00:42:48.400 --> 00:42:50.601
And basically,
it was a protocol developed

00:42:50.601 --> 00:42:53.367
to get--if you have a lot
of different users,

00:42:53.367 --> 00:42:57.300
to get--to pull down a list
of all the users,

00:42:57.300 --> 00:42:58.667
which have updated content.

00:42:58.667 --> 00:43:01.534
So basically you get hashes
of all their user IDs.

00:43:01.534 --> 00:43:06.033
And you can do one pull every,
say, like, you know, two minutes

00:43:06.033 --> 00:43:07.334
or something like that,

00:43:07.334 --> 00:43:08.767
and get a list
of all your users

00:43:08.767 --> 00:43:11.234
that have had
their content changed.

00:43:11.234 --> 00:43:14.133
And that's kind of an efficient
way to do the--the pool stuff.

00:43:14.133 --> 00:43:15.868
But I'm not aware
if it's actually supported

00:43:15.868 --> 00:43:17.934
by any OpenSocial
containers yet.

00:43:17.934 --> 00:43:20.501
But we'll certainly take that
into advisement.

00:43:20.501 --> 00:43:23.167
Um, and you're welcome
as is everyone else here

00:43:23.167 --> 00:43:25.868
to participate
in the OpenSocial spec process

00:43:25.868 --> 00:43:27.968
and put forth ideas
like that.

00:43:27.968 --> 00:43:29.701
Uh, and the way
this spec process works,

00:43:29.701 --> 00:43:30.934
it's an online group.

00:43:30.934 --> 00:43:34.267
Everyone's invited to join,
uh, proposals.

00:43:34.267 --> 00:43:36.434
This process keeps on getting
modified a little bit

00:43:36.434 --> 00:43:38.901
based off of experiences we've
had with previous versions.

00:43:38.901 --> 00:43:41.434
But, uh, proposals
basically right now

00:43:41.434 --> 00:43:43.334
take five positive votes

00:43:43.334 --> 00:43:45.501
to get
into the specification.

00:43:45.501 --> 00:43:47.400
Uh, and then you do
a prototype.

00:43:47.400 --> 00:43:48.934
And as long as you have
no negative votes,

00:43:48.934 --> 00:43:50.200
it can get
into the specification.

00:43:50.200 --> 00:43:53.267
So we encourage everyone
to be involved with OpenSocial.

00:43:53.267 --> 00:43:55.200
And if there's, you know,
a real strong need

00:43:55.200 --> 00:43:57.667
for something like that,
go to this spec group,

00:43:57.667 --> 00:43:59.801
uh, and propose it,
and see what the containers

00:43:59.801 --> 00:44:02.033
have to say 'cause both
containers and app developers

00:44:02.033 --> 00:44:05.567
actively participate
in that.

00:44:05.567 --> 00:44:09.767
Next, I'm going to open up
the Moderator here.

00:44:09.767 --> 00:44:14.067
First of all, you guys
can look at my dog.

00:44:14.067 --> 00:44:17.834
Uh, and...

00:44:22.400 --> 00:44:24.400
So the first question here

00:44:24.400 --> 00:44:26.934
is "Where could we get
the sample code

00:44:26.934 --> 00:44:29.434
for the examples
that you presented?"

00:44:29.434 --> 00:44:33.667
So the OpenSocial
Java client library

00:44:33.667 --> 00:44:36.267
has built into it
an Android sample

00:44:36.267 --> 00:44:38.267
not quite as intricate

00:44:38.267 --> 00:44:40.167
as the example
that I presented,

00:44:40.167 --> 00:44:42.767
but does have
an Android sample.

00:44:42.767 --> 00:44:46.467
The Objective-C client library
for OpenSocial--

00:44:46.467 --> 00:44:48.367
if you just search for
OpenSocial client libraries,

00:44:48.367 --> 00:44:49.534
you'll find all of this--

00:44:49.534 --> 00:44:51.968
the Objective-C one
has the iPhone samples.

00:44:51.968 --> 00:44:53.534
The Divide and Conquer app

00:44:53.534 --> 00:44:55.367
and the web application
that I worked on,

00:44:55.367 --> 00:44:57.200
basically, the code
was written up

00:44:57.200 --> 00:44:58.701
through a couple days ago.

00:44:58.701 --> 00:45:01.734
And I haven't gone in through
the full, like, open source

00:45:01.734 --> 00:45:05.801
releasing process and, um,
actually cleaned up all the code

00:45:05.801 --> 00:45:07.868
other than the slides
that I presented.

00:45:07.868 --> 00:45:12.334
So those will be online
and open source shortly.

00:45:12.334 --> 00:45:13.901
And you'll find all of that
mentioned

00:45:13.901 --> 00:45:15.434
on the OpenSocial blog.

00:45:15.434 --> 00:45:17.367
So sorry I don't have that
for you today.

00:45:17.367 --> 00:45:19.467
Take another in-person one.

00:45:19.467 --> 00:45:21.234
man: Apologize
for a second question.

00:45:21.234 --> 00:45:24.434
Um, where do you see
the wave--

00:45:24.434 --> 00:45:27.701
Google Wave app or platform,

00:45:27.701 --> 00:45:31.033
uh, in regards to OpenSocial

00:45:31.033 --> 00:45:33.601
in looking forward?

00:45:33.601 --> 00:45:36.767
Boyd: Um, I can state
my personal comments on this

00:45:36.767 --> 00:45:38.167
and my personal beliefs.

00:45:38.167 --> 00:45:40.634
I don't--I don't have
the official word on that.

00:45:40.634 --> 00:45:44.300
I mean, uh, basically,
waves are very social things.

00:45:44.300 --> 00:45:48.467
Uh, they currently expose
some APIs in Wave

00:45:48.467 --> 00:45:51.634
that are like the social APIs
in OpenSocial.

00:45:51.634 --> 00:45:54.534
So there's the notion of who's
currently participating,

00:45:54.534 --> 00:45:56.067
who overall is participating--

00:45:56.067 --> 00:45:58.467
think of, like, the profile
and the friends--

00:45:58.467 --> 00:46:02.467
um, and they certainly have
the notion of activities.

00:46:02.467 --> 00:46:04.934
So I would hope
as--as they, you know, adopt

00:46:04.934 --> 00:46:06.300
OpenSocial standards,

00:46:06.300 --> 00:46:08.834
that they would also adopt
the REST and RPC APIs,

00:46:08.834 --> 00:46:11.167
which would allow you
to do many things like this.

00:46:11.167 --> 00:46:13.100
But keep in mind, there is
a totally different context

00:46:13.100 --> 00:46:15.100
with Wave than there is,

00:46:15.100 --> 00:46:17.167
uh, with traditional
social network apps.

00:46:17.167 --> 00:46:19.868
So, um, but that's--
that's all I can say.

00:46:19.868 --> 00:46:21.701
And that's, again,
my personal opinion,

00:46:21.701 --> 00:46:23.901
not, uh,
not the official word.

00:46:23.901 --> 00:46:26.000
man: Yeah. Thank you.

00:46:26.000 --> 00:46:31.234
Boyd: Let me just go back
to one question from here.

00:46:31.234 --> 00:46:34.734
"What did I use to record
those demo videos?"

00:46:34.734 --> 00:46:38.267
Snapz Pro, um, is an application
I downloaded, like,

00:46:38.267 --> 00:46:40.000
a couple years ago
and paid for.

00:46:40.000 --> 00:46:41.534
It's an--a shareware app.

00:46:41.534 --> 00:46:43.968
Use it for free for 30 days.
It's really cool.

00:46:43.968 --> 00:46:47.367
Um, and Keynote is amazing
at embedding video.

00:46:47.367 --> 00:46:48.567
So this is the first time

00:46:48.567 --> 00:46:51.100
I've actually done demo videos
like that.

00:46:51.100 --> 00:46:52.367
And I hope you guys liked it.

00:46:52.367 --> 00:46:54.634
It made it a little bit easier
and less chance

00:46:54.634 --> 00:46:57.000
that the demo would crash.

00:46:57.000 --> 00:46:59.067
Um...

00:46:59.067 --> 00:47:00.601
Thanks.

00:47:00.601 --> 00:47:02.901
And I guess we'll take
an in-person question now.

00:47:02.901 --> 00:47:04.234
man: I was going to say
one thing is, uh,

00:47:04.234 --> 00:47:06.000
Screenflow is another
great program

00:47:06.000 --> 00:47:10.334
to, uh, to capture, uh, web in--
or, uh, screencasts from.

00:47:10.334 --> 00:47:12.000
Um, I was actually--
I just finished writing

00:47:12.000 --> 00:47:14.767
a Facebook connect application
on the iPhone.

00:47:14.767 --> 00:47:17.334
And, uh, I don't think
a whole lot

00:47:17.334 --> 00:47:18.734
about, you know,
the social network

00:47:18.734 --> 00:47:19.801
that must bot--not be named.

00:47:19.801 --> 00:47:21.400
But they've done
a good job

00:47:21.400 --> 00:47:23.601
of making the flow
on the device

00:47:23.601 --> 00:47:26.400
very straightforward
and nowhere near as disruptive

00:47:26.400 --> 00:47:30.300
as, you know, it looks like
to jump out to another browser.

00:47:30.300 --> 00:47:33.234
Um, I've--I was one
of the early adopters of OAuth.

00:47:33.234 --> 00:47:35.901
I've done--I've done
AuthSub before that.

00:47:35.901 --> 00:47:37.367
And on the web,
it's a great environment

00:47:37.367 --> 00:47:39.300
and it's--
it's a very nice flow.

00:47:39.300 --> 00:47:41.434
Are there plans to build
a set of client libraries

00:47:41.434 --> 00:47:42.767
that we can use
on these devices?

00:47:42.767 --> 00:47:44.501
I mean, there's a finite
number of them right now.

00:47:44.501 --> 00:47:46.367
There's, like, you know,
four or five of them.

00:47:46.367 --> 00:47:48.100
And if you supported that,

00:47:48.100 --> 00:47:51.501
uh, I think the user experience
would be dramatically better.

00:47:51.501 --> 00:47:53.334
Boyd: So we don't have
direct plans.

00:47:53.334 --> 00:47:55.200
Uh, I mean,
there is a sample code.

00:47:55.200 --> 00:47:57.501
We could build, you know,
better client libraries.

00:47:57.501 --> 00:47:59.934
I don't know of any plans
to do that right now.

00:47:59.934 --> 00:48:02.267
Um, to answer your question

00:48:02.267 --> 00:48:04.067
about, like,
the Face connect model

00:48:04.067 --> 00:48:06.000
versus what we showed here,

00:48:06.000 --> 00:48:07.801
it's--basically,
it's always a question

00:48:07.801 --> 00:48:12.000
of--of balancing user privacy
and, uh, security

00:48:12.000 --> 00:48:14.400
with user interface
and user interaction.

00:48:14.400 --> 00:48:17.767
Um, and in the case
of the Facebook connect model,

00:48:17.767 --> 00:48:22.200
they chose to allow,
uh, app developers to display

00:48:22.200 --> 00:48:23.801
what is essentially,
like, a WebView

00:48:23.801 --> 00:48:26.634
within their application,
uh, that they've written

00:48:26.634 --> 00:48:28.133
and the user enters
their credentials

00:48:28.133 --> 00:48:29.901
directly in the application.

00:48:29.901 --> 00:48:32.234
That's not something
that I have known

00:48:32.234 --> 00:48:37.033
that, uh, OpenSocial networks,
uh, have been comfortable with.

00:48:37.033 --> 00:48:39.400
Um, but, you know,
it may happen.

00:48:39.400 --> 00:48:43.200
Um, you know, personally,
I like to enter my credentials

00:48:43.200 --> 00:48:46.434
in a place that I know
is--is the actual web browser

00:48:46.434 --> 00:48:48.067
in the device
with the SSL icon.

00:48:48.067 --> 00:48:49.801
But I understand
that a lot of users,

00:48:49.801 --> 00:48:51.367
um, could care less.

00:48:51.367 --> 00:48:53.701
But--so it's--it's just
making that balance.

00:48:53.701 --> 00:48:56.834
Um, and, you know, right now,
it's up for,

00:48:56.834 --> 00:48:58.467
you know, we have
some social networks.

00:48:58.467 --> 00:49:01.367
I doubt that we'll be
promoting that as Google.

00:49:01.367 --> 00:49:03.400
But, uh, you know,
there's all sorts

00:49:03.400 --> 00:49:05.100
of other social networks
around there too

00:49:05.100 --> 00:49:07.767
that were in that list
and other OpenSocial containers

00:49:07.767 --> 00:49:09.934
that may choose
to--to balance that equation

00:49:09.934 --> 00:49:11.734
somewhere else along the line.

00:49:11.734 --> 00:49:16.300
Um, I don't know
where it would be.

00:49:16.300 --> 00:49:18.901
So...

00:49:18.901 --> 00:49:22.000
"How to aggregate users
removing redundant ones

00:49:22.000 --> 00:49:23.534
"across different
social networks--

00:49:23.534 --> 00:49:26.100
"Orkut, MySpace,
and maybe Facebook

00:49:26.100 --> 00:49:29.767
representing one single user
on the mobile app client?"

00:49:29.767 --> 00:49:32.601
Uh, I mean, there's certainly
an opportunity here,

00:49:32.601 --> 00:49:35.601
at least for, you know,
an open platform like Android,

00:49:35.601 --> 00:49:39.100
to develop an application
which aggregated that

00:49:39.100 --> 00:49:43.067
and opened up some services
for individual third-party apps

00:49:43.067 --> 00:49:44.300
to hook into.

00:49:44.300 --> 00:49:45.734
I haven't seen
one of those yet.

00:49:45.734 --> 00:49:50.601
But there--there's definitely
an opportunity for that.

00:49:50.601 --> 00:49:52.200
No other in-person questions.

00:49:52.200 --> 00:49:54.834
So the last question...

00:49:54.834 --> 00:49:58.634
"Is the level of data access
the same for two-legged OAuth

00:49:58.634 --> 00:50:00.367
and three-legged OAuth?"

00:50:00.367 --> 00:50:04.300
Um, the actual standard
doesn't really define

00:50:04.300 --> 00:50:06.100
what level of access
you'll have.

00:50:06.100 --> 00:50:08.000
That's up to the individual
providers

00:50:08.000 --> 00:50:10.467
that are making these APIs
available.

00:50:10.467 --> 00:50:13.234
Uh, in practice, I think
the--the data is the same

00:50:13.234 --> 00:50:14.567
that I've seen.

00:50:14.567 --> 00:50:17.067
Um, you know, what acc--
what data you have access to

00:50:17.067 --> 00:50:18.968
with two-legged
versus three-legged OAuth.

00:50:18.968 --> 00:50:21.067
But a provider could choose
to provide

00:50:21.067 --> 00:50:24.133
different levels of access.

00:50:24.133 --> 00:50:26.634
And that's all the questions
I have here.

00:50:26.634 --> 00:50:29.267
Uh, is there any more
in person?

00:50:29.267 --> 00:50:32.868
Okay. Thank you very much.

